
Digimat_F401_IKS01A3_IDB05A2_tx.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000103d4  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000194  08010574  08010574  00020574  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08010708  08010708  00030204  2**0
                  CONTENTS
  4 .ARM          00000008  08010708  08010708  00020708  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08010710  08010710  00030204  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08010710  08010710  00020710  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08010714  08010714  00020714  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000204  20000000  08010718  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000780  20000204  0801091c  00030204  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000984  0801091c  00030984  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030204  2**0
                  CONTENTS, READONLY
 12 .debug_info   0003ed6f  00000000  00000000  00030234  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000056da  00000000  00000000  0006efa3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000031d8  00000000  00000000  00074680  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00002fb8  00000000  00000000  00077858  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001f7b0  00000000  00000000  0007a810  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002ce14  00000000  00000000  00099fc0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000addf2  00000000  00000000  000c6dd4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00174bc6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000df98  00000000  00000000  00174c18  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000204 	.word	0x20000204
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0801055c 	.word	0x0801055c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000208 	.word	0x20000208
 80001dc:	0801055c 	.word	0x0801055c

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_d2f>:
 8000608:	ea4f 0241 	mov.w	r2, r1, lsl #1
 800060c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000610:	bf24      	itt	cs
 8000612:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000616:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 800061a:	d90d      	bls.n	8000638 <__aeabi_d2f+0x30>
 800061c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000620:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000624:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000628:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 800062c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000630:	bf08      	it	eq
 8000632:	f020 0001 	biceq.w	r0, r0, #1
 8000636:	4770      	bx	lr
 8000638:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 800063c:	d121      	bne.n	8000682 <__aeabi_d2f+0x7a>
 800063e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000642:	bfbc      	itt	lt
 8000644:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000648:	4770      	bxlt	lr
 800064a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800064e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000652:	f1c2 0218 	rsb	r2, r2, #24
 8000656:	f1c2 0c20 	rsb	ip, r2, #32
 800065a:	fa10 f30c 	lsls.w	r3, r0, ip
 800065e:	fa20 f002 	lsr.w	r0, r0, r2
 8000662:	bf18      	it	ne
 8000664:	f040 0001 	orrne.w	r0, r0, #1
 8000668:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800066c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000670:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000674:	ea40 000c 	orr.w	r0, r0, ip
 8000678:	fa23 f302 	lsr.w	r3, r3, r2
 800067c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000680:	e7cc      	b.n	800061c <__aeabi_d2f+0x14>
 8000682:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000686:	d107      	bne.n	8000698 <__aeabi_d2f+0x90>
 8000688:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 800068c:	bf1e      	ittt	ne
 800068e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000692:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000696:	4770      	bxne	lr
 8000698:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 800069c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80006a0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80006a4:	4770      	bx	lr
 80006a6:	bf00      	nop

080006a8 <__aeabi_uldivmod>:
 80006a8:	b953      	cbnz	r3, 80006c0 <__aeabi_uldivmod+0x18>
 80006aa:	b94a      	cbnz	r2, 80006c0 <__aeabi_uldivmod+0x18>
 80006ac:	2900      	cmp	r1, #0
 80006ae:	bf08      	it	eq
 80006b0:	2800      	cmpeq	r0, #0
 80006b2:	bf1c      	itt	ne
 80006b4:	f04f 31ff 	movne.w	r1, #4294967295
 80006b8:	f04f 30ff 	movne.w	r0, #4294967295
 80006bc:	f000 b974 	b.w	80009a8 <__aeabi_idiv0>
 80006c0:	f1ad 0c08 	sub.w	ip, sp, #8
 80006c4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80006c8:	f000 f806 	bl	80006d8 <__udivmoddi4>
 80006cc:	f8dd e004 	ldr.w	lr, [sp, #4]
 80006d0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80006d4:	b004      	add	sp, #16
 80006d6:	4770      	bx	lr

080006d8 <__udivmoddi4>:
 80006d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80006dc:	9d08      	ldr	r5, [sp, #32]
 80006de:	4604      	mov	r4, r0
 80006e0:	468e      	mov	lr, r1
 80006e2:	2b00      	cmp	r3, #0
 80006e4:	d14d      	bne.n	8000782 <__udivmoddi4+0xaa>
 80006e6:	428a      	cmp	r2, r1
 80006e8:	4694      	mov	ip, r2
 80006ea:	d969      	bls.n	80007c0 <__udivmoddi4+0xe8>
 80006ec:	fab2 f282 	clz	r2, r2
 80006f0:	b152      	cbz	r2, 8000708 <__udivmoddi4+0x30>
 80006f2:	fa01 f302 	lsl.w	r3, r1, r2
 80006f6:	f1c2 0120 	rsb	r1, r2, #32
 80006fa:	fa20 f101 	lsr.w	r1, r0, r1
 80006fe:	fa0c fc02 	lsl.w	ip, ip, r2
 8000702:	ea41 0e03 	orr.w	lr, r1, r3
 8000706:	4094      	lsls	r4, r2
 8000708:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800070c:	0c21      	lsrs	r1, r4, #16
 800070e:	fbbe f6f8 	udiv	r6, lr, r8
 8000712:	fa1f f78c 	uxth.w	r7, ip
 8000716:	fb08 e316 	mls	r3, r8, r6, lr
 800071a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800071e:	fb06 f107 	mul.w	r1, r6, r7
 8000722:	4299      	cmp	r1, r3
 8000724:	d90a      	bls.n	800073c <__udivmoddi4+0x64>
 8000726:	eb1c 0303 	adds.w	r3, ip, r3
 800072a:	f106 30ff 	add.w	r0, r6, #4294967295
 800072e:	f080 811f 	bcs.w	8000970 <__udivmoddi4+0x298>
 8000732:	4299      	cmp	r1, r3
 8000734:	f240 811c 	bls.w	8000970 <__udivmoddi4+0x298>
 8000738:	3e02      	subs	r6, #2
 800073a:	4463      	add	r3, ip
 800073c:	1a5b      	subs	r3, r3, r1
 800073e:	b2a4      	uxth	r4, r4
 8000740:	fbb3 f0f8 	udiv	r0, r3, r8
 8000744:	fb08 3310 	mls	r3, r8, r0, r3
 8000748:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800074c:	fb00 f707 	mul.w	r7, r0, r7
 8000750:	42a7      	cmp	r7, r4
 8000752:	d90a      	bls.n	800076a <__udivmoddi4+0x92>
 8000754:	eb1c 0404 	adds.w	r4, ip, r4
 8000758:	f100 33ff 	add.w	r3, r0, #4294967295
 800075c:	f080 810a 	bcs.w	8000974 <__udivmoddi4+0x29c>
 8000760:	42a7      	cmp	r7, r4
 8000762:	f240 8107 	bls.w	8000974 <__udivmoddi4+0x29c>
 8000766:	4464      	add	r4, ip
 8000768:	3802      	subs	r0, #2
 800076a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800076e:	1be4      	subs	r4, r4, r7
 8000770:	2600      	movs	r6, #0
 8000772:	b11d      	cbz	r5, 800077c <__udivmoddi4+0xa4>
 8000774:	40d4      	lsrs	r4, r2
 8000776:	2300      	movs	r3, #0
 8000778:	e9c5 4300 	strd	r4, r3, [r5]
 800077c:	4631      	mov	r1, r6
 800077e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000782:	428b      	cmp	r3, r1
 8000784:	d909      	bls.n	800079a <__udivmoddi4+0xc2>
 8000786:	2d00      	cmp	r5, #0
 8000788:	f000 80ef 	beq.w	800096a <__udivmoddi4+0x292>
 800078c:	2600      	movs	r6, #0
 800078e:	e9c5 0100 	strd	r0, r1, [r5]
 8000792:	4630      	mov	r0, r6
 8000794:	4631      	mov	r1, r6
 8000796:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800079a:	fab3 f683 	clz	r6, r3
 800079e:	2e00      	cmp	r6, #0
 80007a0:	d14a      	bne.n	8000838 <__udivmoddi4+0x160>
 80007a2:	428b      	cmp	r3, r1
 80007a4:	d302      	bcc.n	80007ac <__udivmoddi4+0xd4>
 80007a6:	4282      	cmp	r2, r0
 80007a8:	f200 80f9 	bhi.w	800099e <__udivmoddi4+0x2c6>
 80007ac:	1a84      	subs	r4, r0, r2
 80007ae:	eb61 0303 	sbc.w	r3, r1, r3
 80007b2:	2001      	movs	r0, #1
 80007b4:	469e      	mov	lr, r3
 80007b6:	2d00      	cmp	r5, #0
 80007b8:	d0e0      	beq.n	800077c <__udivmoddi4+0xa4>
 80007ba:	e9c5 4e00 	strd	r4, lr, [r5]
 80007be:	e7dd      	b.n	800077c <__udivmoddi4+0xa4>
 80007c0:	b902      	cbnz	r2, 80007c4 <__udivmoddi4+0xec>
 80007c2:	deff      	udf	#255	; 0xff
 80007c4:	fab2 f282 	clz	r2, r2
 80007c8:	2a00      	cmp	r2, #0
 80007ca:	f040 8092 	bne.w	80008f2 <__udivmoddi4+0x21a>
 80007ce:	eba1 010c 	sub.w	r1, r1, ip
 80007d2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80007d6:	fa1f fe8c 	uxth.w	lr, ip
 80007da:	2601      	movs	r6, #1
 80007dc:	0c20      	lsrs	r0, r4, #16
 80007de:	fbb1 f3f7 	udiv	r3, r1, r7
 80007e2:	fb07 1113 	mls	r1, r7, r3, r1
 80007e6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80007ea:	fb0e f003 	mul.w	r0, lr, r3
 80007ee:	4288      	cmp	r0, r1
 80007f0:	d908      	bls.n	8000804 <__udivmoddi4+0x12c>
 80007f2:	eb1c 0101 	adds.w	r1, ip, r1
 80007f6:	f103 38ff 	add.w	r8, r3, #4294967295
 80007fa:	d202      	bcs.n	8000802 <__udivmoddi4+0x12a>
 80007fc:	4288      	cmp	r0, r1
 80007fe:	f200 80cb 	bhi.w	8000998 <__udivmoddi4+0x2c0>
 8000802:	4643      	mov	r3, r8
 8000804:	1a09      	subs	r1, r1, r0
 8000806:	b2a4      	uxth	r4, r4
 8000808:	fbb1 f0f7 	udiv	r0, r1, r7
 800080c:	fb07 1110 	mls	r1, r7, r0, r1
 8000810:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000814:	fb0e fe00 	mul.w	lr, lr, r0
 8000818:	45a6      	cmp	lr, r4
 800081a:	d908      	bls.n	800082e <__udivmoddi4+0x156>
 800081c:	eb1c 0404 	adds.w	r4, ip, r4
 8000820:	f100 31ff 	add.w	r1, r0, #4294967295
 8000824:	d202      	bcs.n	800082c <__udivmoddi4+0x154>
 8000826:	45a6      	cmp	lr, r4
 8000828:	f200 80bb 	bhi.w	80009a2 <__udivmoddi4+0x2ca>
 800082c:	4608      	mov	r0, r1
 800082e:	eba4 040e 	sub.w	r4, r4, lr
 8000832:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000836:	e79c      	b.n	8000772 <__udivmoddi4+0x9a>
 8000838:	f1c6 0720 	rsb	r7, r6, #32
 800083c:	40b3      	lsls	r3, r6
 800083e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000842:	ea4c 0c03 	orr.w	ip, ip, r3
 8000846:	fa20 f407 	lsr.w	r4, r0, r7
 800084a:	fa01 f306 	lsl.w	r3, r1, r6
 800084e:	431c      	orrs	r4, r3
 8000850:	40f9      	lsrs	r1, r7
 8000852:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000856:	fa00 f306 	lsl.w	r3, r0, r6
 800085a:	fbb1 f8f9 	udiv	r8, r1, r9
 800085e:	0c20      	lsrs	r0, r4, #16
 8000860:	fa1f fe8c 	uxth.w	lr, ip
 8000864:	fb09 1118 	mls	r1, r9, r8, r1
 8000868:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800086c:	fb08 f00e 	mul.w	r0, r8, lr
 8000870:	4288      	cmp	r0, r1
 8000872:	fa02 f206 	lsl.w	r2, r2, r6
 8000876:	d90b      	bls.n	8000890 <__udivmoddi4+0x1b8>
 8000878:	eb1c 0101 	adds.w	r1, ip, r1
 800087c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000880:	f080 8088 	bcs.w	8000994 <__udivmoddi4+0x2bc>
 8000884:	4288      	cmp	r0, r1
 8000886:	f240 8085 	bls.w	8000994 <__udivmoddi4+0x2bc>
 800088a:	f1a8 0802 	sub.w	r8, r8, #2
 800088e:	4461      	add	r1, ip
 8000890:	1a09      	subs	r1, r1, r0
 8000892:	b2a4      	uxth	r4, r4
 8000894:	fbb1 f0f9 	udiv	r0, r1, r9
 8000898:	fb09 1110 	mls	r1, r9, r0, r1
 800089c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80008a0:	fb00 fe0e 	mul.w	lr, r0, lr
 80008a4:	458e      	cmp	lr, r1
 80008a6:	d908      	bls.n	80008ba <__udivmoddi4+0x1e2>
 80008a8:	eb1c 0101 	adds.w	r1, ip, r1
 80008ac:	f100 34ff 	add.w	r4, r0, #4294967295
 80008b0:	d26c      	bcs.n	800098c <__udivmoddi4+0x2b4>
 80008b2:	458e      	cmp	lr, r1
 80008b4:	d96a      	bls.n	800098c <__udivmoddi4+0x2b4>
 80008b6:	3802      	subs	r0, #2
 80008b8:	4461      	add	r1, ip
 80008ba:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80008be:	fba0 9402 	umull	r9, r4, r0, r2
 80008c2:	eba1 010e 	sub.w	r1, r1, lr
 80008c6:	42a1      	cmp	r1, r4
 80008c8:	46c8      	mov	r8, r9
 80008ca:	46a6      	mov	lr, r4
 80008cc:	d356      	bcc.n	800097c <__udivmoddi4+0x2a4>
 80008ce:	d053      	beq.n	8000978 <__udivmoddi4+0x2a0>
 80008d0:	b15d      	cbz	r5, 80008ea <__udivmoddi4+0x212>
 80008d2:	ebb3 0208 	subs.w	r2, r3, r8
 80008d6:	eb61 010e 	sbc.w	r1, r1, lr
 80008da:	fa01 f707 	lsl.w	r7, r1, r7
 80008de:	fa22 f306 	lsr.w	r3, r2, r6
 80008e2:	40f1      	lsrs	r1, r6
 80008e4:	431f      	orrs	r7, r3
 80008e6:	e9c5 7100 	strd	r7, r1, [r5]
 80008ea:	2600      	movs	r6, #0
 80008ec:	4631      	mov	r1, r6
 80008ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80008f2:	f1c2 0320 	rsb	r3, r2, #32
 80008f6:	40d8      	lsrs	r0, r3
 80008f8:	fa0c fc02 	lsl.w	ip, ip, r2
 80008fc:	fa21 f303 	lsr.w	r3, r1, r3
 8000900:	4091      	lsls	r1, r2
 8000902:	4301      	orrs	r1, r0
 8000904:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000908:	fa1f fe8c 	uxth.w	lr, ip
 800090c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000910:	fb07 3610 	mls	r6, r7, r0, r3
 8000914:	0c0b      	lsrs	r3, r1, #16
 8000916:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800091a:	fb00 f60e 	mul.w	r6, r0, lr
 800091e:	429e      	cmp	r6, r3
 8000920:	fa04 f402 	lsl.w	r4, r4, r2
 8000924:	d908      	bls.n	8000938 <__udivmoddi4+0x260>
 8000926:	eb1c 0303 	adds.w	r3, ip, r3
 800092a:	f100 38ff 	add.w	r8, r0, #4294967295
 800092e:	d22f      	bcs.n	8000990 <__udivmoddi4+0x2b8>
 8000930:	429e      	cmp	r6, r3
 8000932:	d92d      	bls.n	8000990 <__udivmoddi4+0x2b8>
 8000934:	3802      	subs	r0, #2
 8000936:	4463      	add	r3, ip
 8000938:	1b9b      	subs	r3, r3, r6
 800093a:	b289      	uxth	r1, r1
 800093c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000940:	fb07 3316 	mls	r3, r7, r6, r3
 8000944:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000948:	fb06 f30e 	mul.w	r3, r6, lr
 800094c:	428b      	cmp	r3, r1
 800094e:	d908      	bls.n	8000962 <__udivmoddi4+0x28a>
 8000950:	eb1c 0101 	adds.w	r1, ip, r1
 8000954:	f106 38ff 	add.w	r8, r6, #4294967295
 8000958:	d216      	bcs.n	8000988 <__udivmoddi4+0x2b0>
 800095a:	428b      	cmp	r3, r1
 800095c:	d914      	bls.n	8000988 <__udivmoddi4+0x2b0>
 800095e:	3e02      	subs	r6, #2
 8000960:	4461      	add	r1, ip
 8000962:	1ac9      	subs	r1, r1, r3
 8000964:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000968:	e738      	b.n	80007dc <__udivmoddi4+0x104>
 800096a:	462e      	mov	r6, r5
 800096c:	4628      	mov	r0, r5
 800096e:	e705      	b.n	800077c <__udivmoddi4+0xa4>
 8000970:	4606      	mov	r6, r0
 8000972:	e6e3      	b.n	800073c <__udivmoddi4+0x64>
 8000974:	4618      	mov	r0, r3
 8000976:	e6f8      	b.n	800076a <__udivmoddi4+0x92>
 8000978:	454b      	cmp	r3, r9
 800097a:	d2a9      	bcs.n	80008d0 <__udivmoddi4+0x1f8>
 800097c:	ebb9 0802 	subs.w	r8, r9, r2
 8000980:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000984:	3801      	subs	r0, #1
 8000986:	e7a3      	b.n	80008d0 <__udivmoddi4+0x1f8>
 8000988:	4646      	mov	r6, r8
 800098a:	e7ea      	b.n	8000962 <__udivmoddi4+0x28a>
 800098c:	4620      	mov	r0, r4
 800098e:	e794      	b.n	80008ba <__udivmoddi4+0x1e2>
 8000990:	4640      	mov	r0, r8
 8000992:	e7d1      	b.n	8000938 <__udivmoddi4+0x260>
 8000994:	46d0      	mov	r8, sl
 8000996:	e77b      	b.n	8000890 <__udivmoddi4+0x1b8>
 8000998:	3b02      	subs	r3, #2
 800099a:	4461      	add	r1, ip
 800099c:	e732      	b.n	8000804 <__udivmoddi4+0x12c>
 800099e:	4630      	mov	r0, r6
 80009a0:	e709      	b.n	80007b6 <__udivmoddi4+0xde>
 80009a2:	4464      	add	r4, ip
 80009a4:	3802      	subs	r0, #2
 80009a6:	e742      	b.n	800082e <__udivmoddi4+0x156>

080009a8 <__aeabi_idiv0>:
 80009a8:	4770      	bx	lr
 80009aa:	bf00      	nop

080009ac <MX_BlueNRG_MS_Init>:
  PRINT_CSV("%02ld:%02ld:%02ld.%03ld", (long)(ms/(60*60*1000)%24), (long)(ms/(60*1000)%60), (long)((ms/1000)%60), (long)(ms%1000));
}
#endif

void MX_BlueNRG_MS_Init(void)
{
 80009ac:	b5b0      	push	{r4, r5, r7, lr}
 80009ae:	b08a      	sub	sp, #40	; 0x28
 80009b0:	af04      	add	r7, sp, #16
  /* USER CODE BEGIN BlueNRG_MS_Init_PreTreatment */

  /* USER CODE END BlueNRG_MS_Init_PreTreatment */

  /* Initialize the peripherals and the BLE Stack */
  const char *name = "BlueNRG";
 80009b2:	4b4c      	ldr	r3, [pc, #304]	; (8000ae4 <MX_BlueNRG_MS_Init+0x138>)
 80009b4:	617b      	str	r3, [r7, #20]
  uint8_t  bdaddr_len_out;
  uint8_t  hwVersion;
  uint16_t fwVersion;
  int ret;

  User_Init();
 80009b6:	f000 f8a9 	bl	8000b0c <User_Init>

  /* Get the User Button initial state */
  user_button_init_state = BSP_PB_GetState(BUTTON_KEY);
 80009ba:	2000      	movs	r0, #0
 80009bc:	f00a fa3a 	bl	800ae34 <BSP_PB_GetState>
 80009c0:	4603      	mov	r3, r0
 80009c2:	b2da      	uxtb	r2, r3
 80009c4:	4b48      	ldr	r3, [pc, #288]	; (8000ae8 <MX_BlueNRG_MS_Init+0x13c>)
 80009c6:	701a      	strb	r2, [r3, #0]

  hci_init(user_notify, NULL);
 80009c8:	2100      	movs	r1, #0
 80009ca:	4848      	ldr	r0, [pc, #288]	; (8000aec <MX_BlueNRG_MS_Init+0x140>)
 80009cc:	f00e fa14 	bl	800edf8 <hci_init>

  /* get the BlueNRG HW and FW versions */
  getBlueNRGVersion(&hwVersion, &fwVersion);
 80009d0:	1dba      	adds	r2, r7, #6
 80009d2:	f107 0308 	add.w	r3, r7, #8
 80009d6:	4611      	mov	r1, r2
 80009d8:	4618      	mov	r0, r3
 80009da:	f00e f881 	bl	800eae0 <getBlueNRGVersion>
   * Reset BlueNRG again otherwise we won't
   * be able to change its MAC address.
   * aci_hal_write_config_data() must be the first
   * command after reset otherwise it will fail.
   */
  hci_reset();
 80009de:	f00e f8c3 	bl	800eb68 <hci_reset>
  HAL_Delay(100);
 80009e2:	2064      	movs	r0, #100	; 0x64
 80009e4:	f00a fbca 	bl	800b17c <HAL_Delay>

  PRINTF("HWver %d\nFWver %d\n", hwVersion, fwVersion);
  if (hwVersion > 0x30) { /* X-NUCLEO-IDB05A1 expansion board is used */
 80009e8:	7a3b      	ldrb	r3, [r7, #8]
 80009ea:	2b30      	cmp	r3, #48	; 0x30
 80009ec:	d902      	bls.n	80009f4 <MX_BlueNRG_MS_Init+0x48>
    bnrg_expansion_board = IDB05A1;
 80009ee:	4b40      	ldr	r3, [pc, #256]	; (8000af0 <MX_BlueNRG_MS_Init+0x144>)
 80009f0:	2201      	movs	r2, #1
 80009f2:	701a      	strb	r2, [r3, #0]
  }

  ret = aci_hal_read_config_data(CONFIG_DATA_RANDOM_ADDRESS, BDADDR_SIZE, &bdaddr_len_out, bdaddr);
 80009f4:	f107 0209 	add.w	r2, r7, #9
 80009f8:	4b3e      	ldr	r3, [pc, #248]	; (8000af4 <MX_BlueNRG_MS_Init+0x148>)
 80009fa:	2106      	movs	r1, #6
 80009fc:	2080      	movs	r0, #128	; 0x80
 80009fe:	f00d ffe9 	bl	800e9d4 <aci_hal_read_config_data>
 8000a02:	4603      	mov	r3, r0
 8000a04:	613b      	str	r3, [r7, #16]

  if (ret) {
    PRINTF("Read Static Random address failed.\n");
  }

  if ((bdaddr[5] & 0xC0) != 0xC0) {
 8000a06:	4b3b      	ldr	r3, [pc, #236]	; (8000af4 <MX_BlueNRG_MS_Init+0x148>)
 8000a08:	795b      	ldrb	r3, [r3, #5]
 8000a0a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8000a0e:	2bc0      	cmp	r3, #192	; 0xc0
 8000a10:	d000      	beq.n	8000a14 <MX_BlueNRG_MS_Init+0x68>
    PRINTF("Static Random address not well formed.\n");
    while(1);
 8000a12:	e7fe      	b.n	8000a12 <MX_BlueNRG_MS_Init+0x66>
  }

  /* GATT Init */
  ret = aci_gatt_init();
 8000a14:	f00d fdaa 	bl	800e56c <aci_gatt_init>
 8000a18:	4603      	mov	r3, r0
 8000a1a:	613b      	str	r3, [r7, #16]
  if(ret){
    PRINTF("GATT_Init failed.\n");
  }

  /* GAP Init */
  if (bnrg_expansion_board == IDB05A1) {
 8000a1c:	4b34      	ldr	r3, [pc, #208]	; (8000af0 <MX_BlueNRG_MS_Init+0x144>)
 8000a1e:	781b      	ldrb	r3, [r3, #0]
 8000a20:	2b01      	cmp	r3, #1
 8000a22:	d110      	bne.n	8000a46 <MX_BlueNRG_MS_Init+0x9a>
    ret = aci_gap_init_IDB05A1(GAP_PERIPHERAL_ROLE_IDB05A1, 0, 0x07, &service_handle, &dev_name_char_handle, &appearance_char_handle);
 8000a24:	f107 020e 	add.w	r2, r7, #14
 8000a28:	f107 030a 	add.w	r3, r7, #10
 8000a2c:	9301      	str	r3, [sp, #4]
 8000a2e:	f107 030c 	add.w	r3, r7, #12
 8000a32:	9300      	str	r3, [sp, #0]
 8000a34:	4613      	mov	r3, r2
 8000a36:	2207      	movs	r2, #7
 8000a38:	2100      	movs	r1, #0
 8000a3a:	2001      	movs	r0, #1
 8000a3c:	f00d fb6a 	bl	800e114 <aci_gap_init_IDB05A1>
 8000a40:	4603      	mov	r3, r0
 8000a42:	613b      	str	r3, [r7, #16]
 8000a44:	e00a      	b.n	8000a5c <MX_BlueNRG_MS_Init+0xb0>
  }
  else {
    ret = aci_gap_init_IDB04A1(GAP_PERIPHERAL_ROLE_IDB04A1, &service_handle, &dev_name_char_handle, &appearance_char_handle);
 8000a46:	f107 030a 	add.w	r3, r7, #10
 8000a4a:	f107 020c 	add.w	r2, r7, #12
 8000a4e:	f107 010e 	add.w	r1, r7, #14
 8000a52:	2001      	movs	r0, #1
 8000a54:	f00d fbae 	bl	800e1b4 <aci_gap_init_IDB04A1>
 8000a58:	4603      	mov	r3, r0
 8000a5a:	613b      	str	r3, [r7, #16]
  if (ret != BLE_STATUS_SUCCESS) {
    PRINTF("GAP_Init failed.\n");
  }

  /* Update device name */
  ret = aci_gatt_update_char_value(service_handle, dev_name_char_handle, 0,
 8000a5c:	89fc      	ldrh	r4, [r7, #14]
 8000a5e:	89bd      	ldrh	r5, [r7, #12]
                                   strlen(name), (uint8_t *)name);
 8000a60:	6978      	ldr	r0, [r7, #20]
 8000a62:	f7ff fbbd 	bl	80001e0 <strlen>
 8000a66:	4603      	mov	r3, r0
  ret = aci_gatt_update_char_value(service_handle, dev_name_char_handle, 0,
 8000a68:	b2da      	uxtb	r2, r3
 8000a6a:	697b      	ldr	r3, [r7, #20]
 8000a6c:	9300      	str	r3, [sp, #0]
 8000a6e:	4613      	mov	r3, r2
 8000a70:	2200      	movs	r2, #0
 8000a72:	4629      	mov	r1, r5
 8000a74:	4620      	mov	r0, r4
 8000a76:	f00d fef0 	bl	800e85a <aci_gatt_update_char_value>
 8000a7a:	4603      	mov	r3, r0
 8000a7c:	613b      	str	r3, [r7, #16]
  if (ret) {
 8000a7e:	693b      	ldr	r3, [r7, #16]
 8000a80:	2b00      	cmp	r3, #0
 8000a82:	d000      	beq.n	8000a86 <MX_BlueNRG_MS_Init+0xda>
    PRINTF("aci_gatt_update_char_value failed.\n");
    while(1);
 8000a84:	e7fe      	b.n	8000a84 <MX_BlueNRG_MS_Init+0xd8>
  }

  ret = aci_gap_set_auth_requirement(MITM_PROTECTION_REQUIRED,
 8000a86:	2301      	movs	r3, #1
 8000a88:	9303      	str	r3, [sp, #12]
 8000a8a:	4b1b      	ldr	r3, [pc, #108]	; (8000af8 <MX_BlueNRG_MS_Init+0x14c>)
 8000a8c:	9302      	str	r3, [sp, #8]
 8000a8e:	2300      	movs	r3, #0
 8000a90:	9301      	str	r3, [sp, #4]
 8000a92:	2310      	movs	r3, #16
 8000a94:	9300      	str	r3, [sp, #0]
 8000a96:	2307      	movs	r3, #7
 8000a98:	2200      	movs	r2, #0
 8000a9a:	2100      	movs	r1, #0
 8000a9c:	2001      	movs	r0, #1
 8000a9e:	f00d fcbd 	bl	800e41c <aci_gap_set_auth_requirement>
 8000aa2:	4603      	mov	r3, r0
 8000aa4:	613b      	str	r3, [r7, #16]
                                     7,
                                     16,
                                     USE_FIXED_PIN_FOR_PAIRING,
                                     123456,
                                     BONDING);
  if (ret) {
 8000aa6:	693b      	ldr	r3, [r7, #16]
 8000aa8:	2b00      	cmp	r3, #0
 8000aaa:	d000      	beq.n	8000aae <MX_BlueNRG_MS_Init+0x102>
    PRINTF("aci_gap_set_authentication_requirement failed.\n");
    while(1);
 8000aac:	e7fe      	b.n	8000aac <MX_BlueNRG_MS_Init+0x100>
  }

  PRINTF("BLE Stack Initialized\n");

  ret = Add_HWServW2ST_Service();
 8000aae:	f001 fa8f 	bl	8001fd0 <Add_HWServW2ST_Service>
 8000ab2:	4603      	mov	r3, r0
 8000ab4:	613b      	str	r3, [r7, #16]
  if(ret == BLE_STATUS_SUCCESS) {
 8000ab6:	693b      	ldr	r3, [r7, #16]
 8000ab8:	2b00      	cmp	r3, #0
 8000aba:	d000      	beq.n	8000abe <MX_BlueNRG_MS_Init+0x112>
    PRINTF("BlueMS HW service added successfully.\n");
  } else {
    PRINTF("Error while adding BlueMS HW service: 0x%02x\r\n", ret);
    while(1);
 8000abc:	e7fe      	b.n	8000abc <MX_BlueNRG_MS_Init+0x110>
  }

  ret = Add_SWServW2ST_Service();
 8000abe:	f001 fb59 	bl	8002174 <Add_SWServW2ST_Service>
 8000ac2:	4603      	mov	r3, r0
 8000ac4:	613b      	str	r3, [r7, #16]
  if(ret == BLE_STATUS_SUCCESS) {
 8000ac6:	693b      	ldr	r3, [r7, #16]
 8000ac8:	2b00      	cmp	r3, #0
 8000aca:	d000      	beq.n	8000ace <MX_BlueNRG_MS_Init+0x122>
     PRINTF("BlueMS SW service added successfully.\n");
  } else {
     PRINTF("Error while adding BlueMS HW service: 0x%02x\r\n", ret);
     while(1);
 8000acc:	e7fe      	b.n	8000acc <MX_BlueNRG_MS_Init+0x120>
  }

  /* Set output power level */
  ret = aci_hal_set_tx_power_level(1,4);
 8000ace:	2104      	movs	r1, #4
 8000ad0:	2001      	movs	r0, #1
 8000ad2:	f00d ffd4 	bl	800ea7e <aci_hal_set_tx_power_level>
 8000ad6:	4603      	mov	r3, r0
 8000ad8:	613b      	str	r3, [r7, #16]

  /* USER CODE BEGIN BlueNRG_MS_Init_PostTreatment */

  /* USER CODE END BlueNRG_MS_Init_PostTreatment */
}
 8000ada:	bf00      	nop
 8000adc:	3718      	adds	r7, #24
 8000ade:	46bd      	mov	sp, r7
 8000ae0:	bdb0      	pop	{r4, r5, r7, pc}
 8000ae2:	bf00      	nop
 8000ae4:	08010574 	.word	0x08010574
 8000ae8:	20000000 	.word	0x20000000
 8000aec:	08002739 	.word	0x08002739
 8000af0:	20000220 	.word	0x20000220
 8000af4:	20000224 	.word	0x20000224
 8000af8:	0001e240 	.word	0x0001e240

08000afc <MX_BlueNRG_MS_Process>:

/*
 * BlueNRG-MS background task
 */
void MX_BlueNRG_MS_Process(void)
{
 8000afc:	b580      	push	{r7, lr}
 8000afe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BlueNRG_MS_Process_PreTreatment */

  /* USER CODE END BlueNRG_MS_Process_PreTreatment */

  User_Process();
 8000b00:	f000 f812 	bl	8000b28 <User_Process>
  hci_user_evt_proc();
 8000b04:	f00e faf4 	bl	800f0f0 <hci_user_evt_proc>

  /* USER CODE BEGIN BlueNRG_MS_Process_PostTreatment */

  /* USER CODE END BlueNRG_MS_Process_PostTreatment */
}
 8000b08:	bf00      	nop
 8000b0a:	bd80      	pop	{r7, pc}

08000b0c <User_Init>:
 *
 * @param  None
 * @retval None
 */
static void User_Init(void)
{
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	af00      	add	r7, sp, #0
  BSP_PB_Init(BUTTON_KEY, BUTTON_MODE_EXTI);
 8000b10:	2101      	movs	r1, #1
 8000b12:	2000      	movs	r0, #0
 8000b14:	f00a f93a 	bl	800ad8c <BSP_PB_Init>
  BSP_LED_Init(LED2);
 8000b18:	2000      	movs	r0, #0
 8000b1a:	f00a f8cd 	bl	800acb8 <BSP_LED_Init>

  BSP_COM_Init(COM1);
 8000b1e:	2000      	movs	r0, #0
 8000b20:	f00a f9ea 	bl	800aef8 <BSP_COM_Init>
}
 8000b24:	bf00      	nop
 8000b26:	bd80      	pop	{r7, pc}

08000b28 <User_Process>:
 *
 * @param  None
 * @retval None
 */
static void User_Process(void)
{
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	b082      	sub	sp, #8
 8000b2c:	af00      	add	r7, sp, #0
  float data_t;
  float data_p;
  static uint32_t counter = 0;

  if (set_connectable)
 8000b2e:	4b2c      	ldr	r3, [pc, #176]	; (8000be0 <User_Process+0xb8>)
 8000b30:	781b      	ldrb	r3, [r3, #0]
 8000b32:	b2db      	uxtb	r3, r3
 8000b34:	2b00      	cmp	r3, #0
 8000b36:	d004      	beq.n	8000b42 <User_Process+0x1a>
  {
    Set_DeviceConnectable();
 8000b38:	f001 fd8a 	bl	8002650 <Set_DeviceConnectable>
    set_connectable = FALSE;
 8000b3c:	4b28      	ldr	r3, [pc, #160]	; (8000be0 <User_Process+0xb8>)
 8000b3e:	2200      	movs	r2, #0
 8000b40:	701a      	strb	r2, [r3, #0]
    while (BSP_PB_GetState(BUTTON_KEY) == !user_button_init_state);

    /* Debouncing */
    HAL_Delay(50);
#endif
    BSP_LED_Toggle(LED2);
 8000b42:	2000      	movs	r0, #0
 8000b44:	f00a f8ca 	bl	800acdc <BSP_LED_Toggle>

    if (connected)
 8000b48:	4b26      	ldr	r3, [pc, #152]	; (8000be4 <User_Process+0xbc>)
 8000b4a:	681b      	ldr	r3, [r3, #0]
 8000b4c:	2b00      	cmp	r3, #0
 8000b4e:	d043      	beq.n	8000bd8 <User_Process+0xb0>
    {
      /* Set a random seed */
      srand(HAL_GetTick());
 8000b50:	f00a fb08 	bl	800b164 <HAL_GetTick>
 8000b54:	4603      	mov	r3, r0
 8000b56:	4618      	mov	r0, r3
 8000b58:	f00e fc9a 	bl	800f490 <srand>

      /* Update emulated Environmental data */
      Set_Random_Environmental_Values(&data_t, &data_p);
 8000b5c:	463a      	mov	r2, r7
 8000b5e:	1d3b      	adds	r3, r7, #4
 8000b60:	4611      	mov	r1, r2
 8000b62:	4618      	mov	r0, r3
 8000b64:	f000 f84c 	bl	8000c00 <Set_Random_Environmental_Values>
      BlueMS_Environmental_Update((int32_t)(data_p *100), (int16_t)(misure_temperatura*10));
 8000b68:	edd7 7a00 	vldr	s15, [r7]
 8000b6c:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 8000be8 <User_Process+0xc0>
 8000b70:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000b74:	eefd 6ae7 	vcvt.s32.f32	s13, s15
 8000b78:	4b1c      	ldr	r3, [pc, #112]	; (8000bec <User_Process+0xc4>)
 8000b7a:	edd3 7a00 	vldr	s15, [r3]
 8000b7e:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8000b82:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000b86:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000b8a:	ee17 3a90 	vmov	r3, s15
 8000b8e:	b21b      	sxth	r3, r3
 8000b90:	4619      	mov	r1, r3
 8000b92:	ee16 0a90 	vmov	r0, s13
 8000b96:	f001 fd15 	bl	80025c4 <BlueMS_Environmental_Update>

      /* Update emulated Acceleration, Gyroscope and Sensor Fusion data */
      Set_Random_Motion_Values(counter);
 8000b9a:	4b15      	ldr	r3, [pc, #84]	; (8000bf0 <User_Process+0xc8>)
 8000b9c:	681b      	ldr	r3, [r3, #0]
 8000b9e:	4618      	mov	r0, r3
 8000ba0:	f000 f8ae 	bl	8000d00 <Set_Random_Motion_Values>
      Acc_Update(&misure_accelerometro, &g_axes, &misure_accelerometro);
 8000ba4:	4a13      	ldr	r2, [pc, #76]	; (8000bf4 <User_Process+0xcc>)
 8000ba6:	4914      	ldr	r1, [pc, #80]	; (8000bf8 <User_Process+0xd0>)
 8000ba8:	4812      	ldr	r0, [pc, #72]	; (8000bf4 <User_Process+0xcc>)
 8000baa:	f001 fb73 	bl	8002294 <Acc_Update>
      Quat_Update(&q_axes);
 8000bae:	4813      	ldr	r0, [pc, #76]	; (8000bfc <User_Process+0xd4>)
 8000bb0:	f001 fbfa 	bl	80023a8 <Quat_Update>

      counter ++;
 8000bb4:	4b0e      	ldr	r3, [pc, #56]	; (8000bf0 <User_Process+0xc8>)
 8000bb6:	681b      	ldr	r3, [r3, #0]
 8000bb8:	3301      	adds	r3, #1
 8000bba:	4a0d      	ldr	r2, [pc, #52]	; (8000bf0 <User_Process+0xc8>)
 8000bbc:	6013      	str	r3, [r2, #0]
      if (counter == 40) {
 8000bbe:	4b0c      	ldr	r3, [pc, #48]	; (8000bf0 <User_Process+0xc8>)
 8000bc0:	681b      	ldr	r3, [r3, #0]
 8000bc2:	2b28      	cmp	r3, #40	; 0x28
 8000bc4:	d104      	bne.n	8000bd0 <User_Process+0xa8>
        counter = 0;
 8000bc6:	4b0a      	ldr	r3, [pc, #40]	; (8000bf0 <User_Process+0xc8>)
 8000bc8:	2200      	movs	r2, #0
 8000bca:	601a      	str	r2, [r3, #0]
        Reset_Motion_Values();
 8000bcc:	f001 f906 	bl	8001ddc <Reset_Motion_Values>
      }
#if !USE_BUTTON
      HAL_Delay(1000); /* wait 1 sec before sending new data */
 8000bd0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000bd4:	f00a fad2 	bl	800b17c <HAL_Delay>
#if USE_BUTTON
    /* Reset the User Button flag */
    user_button_pressed = 0;
  }
#endif
}
 8000bd8:	bf00      	nop
 8000bda:	3708      	adds	r7, #8
 8000bdc:	46bd      	mov	sp, r7
 8000bde:	bd80      	pop	{r7, pc}
 8000be0:	20000001 	.word	0x20000001
 8000be4:	20000260 	.word	0x20000260
 8000be8:	42c80000 	.word	0x42c80000
 8000bec:	200003a8 	.word	0x200003a8
 8000bf0:	2000022c 	.word	0x2000022c
 8000bf4:	2000039c 	.word	0x2000039c
 8000bf8:	20000270 	.word	0x20000270
 8000bfc:	20000288 	.word	0x20000288

08000c00 <Set_Random_Environmental_Values>:
 * @param  float pointer to temperature data
 * @param  float pointer to pressure data
 * @retval None
 */
static void Set_Random_Environmental_Values(float *data_t, float *data_p)
{
 8000c00:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8000c04:	b084      	sub	sp, #16
 8000c06:	af00      	add	r7, sp, #0
 8000c08:	60f8      	str	r0, [r7, #12]
 8000c0a:	60b9      	str	r1, [r7, #8]
  *data_t = 27.0 + ((uint64_t)rand()*5)/RAND_MAX;     /* T sensor emulation */
 8000c0c:	f00e fc6e 	bl	800f4ec <rand>
 8000c10:	4603      	mov	r3, r0
 8000c12:	17da      	asrs	r2, r3, #31
 8000c14:	469a      	mov	sl, r3
 8000c16:	4693      	mov	fp, r2
 8000c18:	4652      	mov	r2, sl
 8000c1a:	465b      	mov	r3, fp
 8000c1c:	f04f 0000 	mov.w	r0, #0
 8000c20:	f04f 0100 	mov.w	r1, #0
 8000c24:	0099      	lsls	r1, r3, #2
 8000c26:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 8000c2a:	0090      	lsls	r0, r2, #2
 8000c2c:	4602      	mov	r2, r0
 8000c2e:	460b      	mov	r3, r1
 8000c30:	eb12 010a 	adds.w	r1, r2, sl
 8000c34:	6039      	str	r1, [r7, #0]
 8000c36:	eb43 030b 	adc.w	r3, r3, fp
 8000c3a:	607b      	str	r3, [r7, #4]
 8000c3c:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8000c40:	f04f 0300 	mov.w	r3, #0
 8000c44:	e9d7 0100 	ldrd	r0, r1, [r7]
 8000c48:	f7ff fd2e 	bl	80006a8 <__aeabi_uldivmod>
 8000c4c:	4602      	mov	r2, r0
 8000c4e:	460b      	mov	r3, r1
 8000c50:	4610      	mov	r0, r2
 8000c52:	4619      	mov	r1, r3
 8000c54:	f7ff fca2 	bl	800059c <__aeabi_ul2d>
 8000c58:	f04f 0200 	mov.w	r2, #0
 8000c5c:	4b26      	ldr	r3, [pc, #152]	; (8000cf8 <Set_Random_Environmental_Values+0xf8>)
 8000c5e:	f7ff fb1d 	bl	800029c <__adddf3>
 8000c62:	4602      	mov	r2, r0
 8000c64:	460b      	mov	r3, r1
 8000c66:	4610      	mov	r0, r2
 8000c68:	4619      	mov	r1, r3
 8000c6a:	f7ff fccd 	bl	8000608 <__aeabi_d2f>
 8000c6e:	4602      	mov	r2, r0
 8000c70:	68fb      	ldr	r3, [r7, #12]
 8000c72:	601a      	str	r2, [r3, #0]
  *data_p = 1000.0 + ((uint64_t)rand()*80)/RAND_MAX; /* P sensor emulation */
 8000c74:	f00e fc3a 	bl	800f4ec <rand>
 8000c78:	4603      	mov	r3, r0
 8000c7a:	17da      	asrs	r2, r3, #31
 8000c7c:	4698      	mov	r8, r3
 8000c7e:	4691      	mov	r9, r2
 8000c80:	4642      	mov	r2, r8
 8000c82:	464b      	mov	r3, r9
 8000c84:	f04f 0000 	mov.w	r0, #0
 8000c88:	f04f 0100 	mov.w	r1, #0
 8000c8c:	0099      	lsls	r1, r3, #2
 8000c8e:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 8000c92:	0090      	lsls	r0, r2, #2
 8000c94:	4602      	mov	r2, r0
 8000c96:	460b      	mov	r3, r1
 8000c98:	eb12 0408 	adds.w	r4, r2, r8
 8000c9c:	eb43 0509 	adc.w	r5, r3, r9
 8000ca0:	f04f 0200 	mov.w	r2, #0
 8000ca4:	f04f 0300 	mov.w	r3, #0
 8000ca8:	012b      	lsls	r3, r5, #4
 8000caa:	ea43 7314 	orr.w	r3, r3, r4, lsr #28
 8000cae:	0122      	lsls	r2, r4, #4
 8000cb0:	4614      	mov	r4, r2
 8000cb2:	461d      	mov	r5, r3
 8000cb4:	4620      	mov	r0, r4
 8000cb6:	4629      	mov	r1, r5
 8000cb8:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8000cbc:	f04f 0300 	mov.w	r3, #0
 8000cc0:	f7ff fcf2 	bl	80006a8 <__aeabi_uldivmod>
 8000cc4:	4602      	mov	r2, r0
 8000cc6:	460b      	mov	r3, r1
 8000cc8:	4610      	mov	r0, r2
 8000cca:	4619      	mov	r1, r3
 8000ccc:	f7ff fc66 	bl	800059c <__aeabi_ul2d>
 8000cd0:	f04f 0200 	mov.w	r2, #0
 8000cd4:	4b09      	ldr	r3, [pc, #36]	; (8000cfc <Set_Random_Environmental_Values+0xfc>)
 8000cd6:	f7ff fae1 	bl	800029c <__adddf3>
 8000cda:	4602      	mov	r2, r0
 8000cdc:	460b      	mov	r3, r1
 8000cde:	4610      	mov	r0, r2
 8000ce0:	4619      	mov	r1, r3
 8000ce2:	f7ff fc91 	bl	8000608 <__aeabi_d2f>
 8000ce6:	4602      	mov	r2, r0
 8000ce8:	68bb      	ldr	r3, [r7, #8]
 8000cea:	601a      	str	r2, [r3, #0]
}
 8000cec:	bf00      	nop
 8000cee:	3710      	adds	r7, #16
 8000cf0:	46bd      	mov	sp, r7
 8000cf2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8000cf6:	bf00      	nop
 8000cf8:	403b0000 	.word	0x403b0000
 8000cfc:	408f4000 	.word	0x408f4000

08000d00 <Set_Random_Motion_Values>:
 * @brief  Set random values for all motion sensor data
 * @param  uint32_t counter for changing the rotation direction
 * @retval None
 */
static void Set_Random_Motion_Values(uint32_t cnt)
{
 8000d00:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8000d04:	f5ad 7d7a 	sub.w	sp, sp, #1000	; 0x3e8
 8000d08:	af00      	add	r7, sp, #0
 8000d0a:	f8c7 03e4 	str.w	r0, [r7, #996]	; 0x3e4
  /* Update Acceleration, Gyroscope and Sensor Fusion data */
  if (cnt < 20) {
 8000d0e:	f8d7 33e4 	ldr.w	r3, [r7, #996]	; 0x3e4
 8000d12:	2b13      	cmp	r3, #19
 8000d14:	f200 8426 	bhi.w	8001564 <Set_Random_Motion_Values+0x864>
    x_axes.AXIS_X +=  (10  + ((uint64_t)rand()*3*cnt)/RAND_MAX);
 8000d18:	f00e fbe8 	bl	800f4ec <rand>
 8000d1c:	4603      	mov	r3, r0
 8000d1e:	17da      	asrs	r2, r3, #31
 8000d20:	f8c7 3328 	str.w	r3, [r7, #808]	; 0x328
 8000d24:	f8c7 232c 	str.w	r2, [r7, #812]	; 0x32c
 8000d28:	f8d7 33e4 	ldr.w	r3, [r7, #996]	; 0x3e4
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	f8c7 3320 	str.w	r3, [r7, #800]	; 0x320
 8000d32:	f8c7 2324 	str.w	r2, [r7, #804]	; 0x324
 8000d36:	e9d7 45ca 	ldrd	r4, r5, [r7, #808]	; 0x328
 8000d3a:	462b      	mov	r3, r5
 8000d3c:	e9d7 abc8 	ldrd	sl, fp, [r7, #800]	; 0x320
 8000d40:	4652      	mov	r2, sl
 8000d42:	fb02 f203 	mul.w	r2, r2, r3
 8000d46:	465b      	mov	r3, fp
 8000d48:	4621      	mov	r1, r4
 8000d4a:	fb01 f303 	mul.w	r3, r1, r3
 8000d4e:	4413      	add	r3, r2
 8000d50:	4622      	mov	r2, r4
 8000d52:	4651      	mov	r1, sl
 8000d54:	fba2 8901 	umull	r8, r9, r2, r1
 8000d58:	444b      	add	r3, r9
 8000d5a:	4699      	mov	r9, r3
 8000d5c:	4642      	mov	r2, r8
 8000d5e:	464b      	mov	r3, r9
 8000d60:	1891      	adds	r1, r2, r2
 8000d62:	66b9      	str	r1, [r7, #104]	; 0x68
 8000d64:	415b      	adcs	r3, r3
 8000d66:	66fb      	str	r3, [r7, #108]	; 0x6c
 8000d68:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 8000d6c:	eb12 0108 	adds.w	r1, r2, r8
 8000d70:	f8c7 1318 	str.w	r1, [r7, #792]	; 0x318
 8000d74:	eb43 0309 	adc.w	r3, r3, r9
 8000d78:	f8c7 331c 	str.w	r3, [r7, #796]	; 0x31c
 8000d7c:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8000d80:	f04f 0300 	mov.w	r3, #0
 8000d84:	e9d7 01c6 	ldrd	r0, r1, [r7, #792]	; 0x318
 8000d88:	f7ff fc8e 	bl	80006a8 <__aeabi_uldivmod>
 8000d8c:	4602      	mov	r2, r0
 8000d8e:	460b      	mov	r3, r1
 8000d90:	f112 010a 	adds.w	r1, r2, #10
 8000d94:	f8c7 10c8 	str.w	r1, [r7, #200]	; 0xc8
 8000d98:	f143 0300 	adc.w	r3, r3, #0
 8000d9c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8000da0:	4bec      	ldr	r3, [pc, #944]	; (8001154 <Set_Random_Motion_Values+0x454>)
 8000da2:	681b      	ldr	r3, [r3, #0]
 8000da4:	461a      	mov	r2, r3
 8000da6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8000daa:	4413      	add	r3, r2
 8000dac:	461a      	mov	r2, r3
 8000dae:	4be9      	ldr	r3, [pc, #932]	; (8001154 <Set_Random_Motion_Values+0x454>)
 8000db0:	601a      	str	r2, [r3, #0]
    x_axes.AXIS_Y += -(10  + ((uint64_t)rand()*5*cnt)/RAND_MAX);
 8000db2:	f00e fb9b 	bl	800f4ec <rand>
 8000db6:	4603      	mov	r3, r0
 8000db8:	17da      	asrs	r2, r3, #31
 8000dba:	f8c7 3310 	str.w	r3, [r7, #784]	; 0x310
 8000dbe:	f8c7 2314 	str.w	r2, [r7, #788]	; 0x314
 8000dc2:	f8d7 33e4 	ldr.w	r3, [r7, #996]	; 0x3e4
 8000dc6:	2200      	movs	r2, #0
 8000dc8:	f8c7 3308 	str.w	r3, [r7, #776]	; 0x308
 8000dcc:	f8c7 230c 	str.w	r2, [r7, #780]	; 0x30c
 8000dd0:	e9d7 45c4 	ldrd	r4, r5, [r7, #784]	; 0x310
 8000dd4:	462b      	mov	r3, r5
 8000dd6:	e9d7 89c2 	ldrd	r8, r9, [r7, #776]	; 0x308
 8000dda:	4642      	mov	r2, r8
 8000ddc:	fb02 f203 	mul.w	r2, r2, r3
 8000de0:	464b      	mov	r3, r9
 8000de2:	4621      	mov	r1, r4
 8000de4:	fb01 f303 	mul.w	r3, r1, r3
 8000de8:	4413      	add	r3, r2
 8000dea:	4622      	mov	r2, r4
 8000dec:	4641      	mov	r1, r8
 8000dee:	fba2 1201 	umull	r1, r2, r2, r1
 8000df2:	f8c7 23dc 	str.w	r2, [r7, #988]	; 0x3dc
 8000df6:	460a      	mov	r2, r1
 8000df8:	f8c7 23d8 	str.w	r2, [r7, #984]	; 0x3d8
 8000dfc:	f8d7 23dc 	ldr.w	r2, [r7, #988]	; 0x3dc
 8000e00:	4413      	add	r3, r2
 8000e02:	f8c7 33dc 	str.w	r3, [r7, #988]	; 0x3dc
 8000e06:	e9d7 45f6 	ldrd	r4, r5, [r7, #984]	; 0x3d8
 8000e0a:	4622      	mov	r2, r4
 8000e0c:	462b      	mov	r3, r5
 8000e0e:	f04f 0000 	mov.w	r0, #0
 8000e12:	f04f 0100 	mov.w	r1, #0
 8000e16:	0099      	lsls	r1, r3, #2
 8000e18:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 8000e1c:	0090      	lsls	r0, r2, #2
 8000e1e:	4602      	mov	r2, r0
 8000e20:	460b      	mov	r3, r1
 8000e22:	4621      	mov	r1, r4
 8000e24:	1851      	adds	r1, r2, r1
 8000e26:	f8c7 1300 	str.w	r1, [r7, #768]	; 0x300
 8000e2a:	4629      	mov	r1, r5
 8000e2c:	eb43 0101 	adc.w	r1, r3, r1
 8000e30:	f8c7 1304 	str.w	r1, [r7, #772]	; 0x304
 8000e34:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8000e38:	f04f 0300 	mov.w	r3, #0
 8000e3c:	e9d7 01c0 	ldrd	r0, r1, [r7, #768]	; 0x300
 8000e40:	f7ff fc32 	bl	80006a8 <__aeabi_uldivmod>
 8000e44:	4602      	mov	r2, r0
 8000e46:	460b      	mov	r3, r1
 8000e48:	f06f 0009 	mvn.w	r0, #9
 8000e4c:	f04f 31ff 	mov.w	r1, #4294967295
 8000e50:	1a80      	subs	r0, r0, r2
 8000e52:	f8c7 00c0 	str.w	r0, [r7, #192]	; 0xc0
 8000e56:	eb61 0303 	sbc.w	r3, r1, r3
 8000e5a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8000e5e:	4bbd      	ldr	r3, [pc, #756]	; (8001154 <Set_Random_Motion_Values+0x454>)
 8000e60:	685b      	ldr	r3, [r3, #4]
 8000e62:	461a      	mov	r2, r3
 8000e64:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8000e68:	4413      	add	r3, r2
 8000e6a:	461a      	mov	r2, r3
 8000e6c:	4bb9      	ldr	r3, [pc, #740]	; (8001154 <Set_Random_Motion_Values+0x454>)
 8000e6e:	605a      	str	r2, [r3, #4]
    x_axes.AXIS_Z +=  (10  + ((uint64_t)rand()*7*cnt)/RAND_MAX);
 8000e70:	f00e fb3c 	bl	800f4ec <rand>
 8000e74:	4603      	mov	r3, r0
 8000e76:	17da      	asrs	r2, r3, #31
 8000e78:	f8c7 32f8 	str.w	r3, [r7, #760]	; 0x2f8
 8000e7c:	f8c7 22fc 	str.w	r2, [r7, #764]	; 0x2fc
 8000e80:	f8d7 33e4 	ldr.w	r3, [r7, #996]	; 0x3e4
 8000e84:	2200      	movs	r2, #0
 8000e86:	f8c7 32f0 	str.w	r3, [r7, #752]	; 0x2f0
 8000e8a:	f8c7 22f4 	str.w	r2, [r7, #756]	; 0x2f4
 8000e8e:	e9d7 45be 	ldrd	r4, r5, [r7, #760]	; 0x2f8
 8000e92:	462b      	mov	r3, r5
 8000e94:	e9d7 89bc 	ldrd	r8, r9, [r7, #752]	; 0x2f0
 8000e98:	4642      	mov	r2, r8
 8000e9a:	fb02 f203 	mul.w	r2, r2, r3
 8000e9e:	464b      	mov	r3, r9
 8000ea0:	4621      	mov	r1, r4
 8000ea2:	fb01 f303 	mul.w	r3, r1, r3
 8000ea6:	4413      	add	r3, r2
 8000ea8:	4622      	mov	r2, r4
 8000eaa:	4641      	mov	r1, r8
 8000eac:	fba2 1201 	umull	r1, r2, r2, r1
 8000eb0:	f8c7 23d4 	str.w	r2, [r7, #980]	; 0x3d4
 8000eb4:	460a      	mov	r2, r1
 8000eb6:	f8c7 23d0 	str.w	r2, [r7, #976]	; 0x3d0
 8000eba:	f8d7 23d4 	ldr.w	r2, [r7, #980]	; 0x3d4
 8000ebe:	4413      	add	r3, r2
 8000ec0:	f8c7 33d4 	str.w	r3, [r7, #980]	; 0x3d4
 8000ec4:	e9d7 45f4 	ldrd	r4, r5, [r7, #976]	; 0x3d0
 8000ec8:	4622      	mov	r2, r4
 8000eca:	462b      	mov	r3, r5
 8000ecc:	f04f 0000 	mov.w	r0, #0
 8000ed0:	f04f 0100 	mov.w	r1, #0
 8000ed4:	00d9      	lsls	r1, r3, #3
 8000ed6:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8000eda:	00d0      	lsls	r0, r2, #3
 8000edc:	4602      	mov	r2, r0
 8000ede:	460b      	mov	r3, r1
 8000ee0:	4621      	mov	r1, r4
 8000ee2:	1a51      	subs	r1, r2, r1
 8000ee4:	f8c7 12e8 	str.w	r1, [r7, #744]	; 0x2e8
 8000ee8:	4629      	mov	r1, r5
 8000eea:	eb63 0301 	sbc.w	r3, r3, r1
 8000eee:	f8c7 32ec 	str.w	r3, [r7, #748]	; 0x2ec
 8000ef2:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8000ef6:	f04f 0300 	mov.w	r3, #0
 8000efa:	e9d7 01ba 	ldrd	r0, r1, [r7, #744]	; 0x2e8
 8000efe:	f7ff fbd3 	bl	80006a8 <__aeabi_uldivmod>
 8000f02:	4602      	mov	r2, r0
 8000f04:	460b      	mov	r3, r1
 8000f06:	f112 010a 	adds.w	r1, r2, #10
 8000f0a:	f8c7 10b8 	str.w	r1, [r7, #184]	; 0xb8
 8000f0e:	f143 0300 	adc.w	r3, r3, #0
 8000f12:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8000f16:	4b8f      	ldr	r3, [pc, #572]	; (8001154 <Set_Random_Motion_Values+0x454>)
 8000f18:	689b      	ldr	r3, [r3, #8]
 8000f1a:	461a      	mov	r2, r3
 8000f1c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8000f20:	4413      	add	r3, r2
 8000f22:	461a      	mov	r2, r3
 8000f24:	4b8b      	ldr	r3, [pc, #556]	; (8001154 <Set_Random_Motion_Values+0x454>)
 8000f26:	609a      	str	r2, [r3, #8]
    g_axes.AXIS_X +=  (100 + ((uint64_t)rand()*2*cnt)/RAND_MAX);
 8000f28:	f00e fae0 	bl	800f4ec <rand>
 8000f2c:	4603      	mov	r3, r0
 8000f2e:	17da      	asrs	r2, r3, #31
 8000f30:	f8c7 32e0 	str.w	r3, [r7, #736]	; 0x2e0
 8000f34:	f8c7 22e4 	str.w	r2, [r7, #740]	; 0x2e4
 8000f38:	f8d7 33e4 	ldr.w	r3, [r7, #996]	; 0x3e4
 8000f3c:	2200      	movs	r2, #0
 8000f3e:	f8c7 32d8 	str.w	r3, [r7, #728]	; 0x2d8
 8000f42:	f8c7 22dc 	str.w	r2, [r7, #732]	; 0x2dc
 8000f46:	e9d7 45b8 	ldrd	r4, r5, [r7, #736]	; 0x2e0
 8000f4a:	462b      	mov	r3, r5
 8000f4c:	e9d7 89b6 	ldrd	r8, r9, [r7, #728]	; 0x2d8
 8000f50:	4642      	mov	r2, r8
 8000f52:	fb02 f203 	mul.w	r2, r2, r3
 8000f56:	464b      	mov	r3, r9
 8000f58:	4621      	mov	r1, r4
 8000f5a:	fb01 f303 	mul.w	r3, r1, r3
 8000f5e:	4413      	add	r3, r2
 8000f60:	4622      	mov	r2, r4
 8000f62:	4641      	mov	r1, r8
 8000f64:	fba2 1201 	umull	r1, r2, r2, r1
 8000f68:	f8c7 23cc 	str.w	r2, [r7, #972]	; 0x3cc
 8000f6c:	460a      	mov	r2, r1
 8000f6e:	f8c7 23c8 	str.w	r2, [r7, #968]	; 0x3c8
 8000f72:	f8d7 23cc 	ldr.w	r2, [r7, #972]	; 0x3cc
 8000f76:	4413      	add	r3, r2
 8000f78:	f8c7 33cc 	str.w	r3, [r7, #972]	; 0x3cc
 8000f7c:	e9d7 12f2 	ldrd	r1, r2, [r7, #968]	; 0x3c8
 8000f80:	460b      	mov	r3, r1
 8000f82:	18db      	adds	r3, r3, r3
 8000f84:	663b      	str	r3, [r7, #96]	; 0x60
 8000f86:	4613      	mov	r3, r2
 8000f88:	eb42 0303 	adc.w	r3, r2, r3
 8000f8c:	667b      	str	r3, [r7, #100]	; 0x64
 8000f8e:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8000f92:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8000f96:	f04f 0300 	mov.w	r3, #0
 8000f9a:	f7ff fb85 	bl	80006a8 <__aeabi_uldivmod>
 8000f9e:	4602      	mov	r2, r0
 8000fa0:	460b      	mov	r3, r1
 8000fa2:	f112 0164 	adds.w	r1, r2, #100	; 0x64
 8000fa6:	f8c7 10b0 	str.w	r1, [r7, #176]	; 0xb0
 8000faa:	f143 0300 	adc.w	r3, r3, #0
 8000fae:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8000fb2:	4b69      	ldr	r3, [pc, #420]	; (8001158 <Set_Random_Motion_Values+0x458>)
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	461a      	mov	r2, r3
 8000fb8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8000fbc:	4413      	add	r3, r2
 8000fbe:	461a      	mov	r2, r3
 8000fc0:	4b65      	ldr	r3, [pc, #404]	; (8001158 <Set_Random_Motion_Values+0x458>)
 8000fc2:	601a      	str	r2, [r3, #0]
    g_axes.AXIS_Y += -(100 + ((uint64_t)rand()*4*cnt)/RAND_MAX);
 8000fc4:	f00e fa92 	bl	800f4ec <rand>
 8000fc8:	4603      	mov	r3, r0
 8000fca:	17da      	asrs	r2, r3, #31
 8000fcc:	f8c7 32d0 	str.w	r3, [r7, #720]	; 0x2d0
 8000fd0:	f8c7 22d4 	str.w	r2, [r7, #724]	; 0x2d4
 8000fd4:	f8d7 33e4 	ldr.w	r3, [r7, #996]	; 0x3e4
 8000fd8:	2200      	movs	r2, #0
 8000fda:	f8c7 32c8 	str.w	r3, [r7, #712]	; 0x2c8
 8000fde:	f8c7 22cc 	str.w	r2, [r7, #716]	; 0x2cc
 8000fe2:	e9d7 45b4 	ldrd	r4, r5, [r7, #720]	; 0x2d0
 8000fe6:	462b      	mov	r3, r5
 8000fe8:	e9d7 89b2 	ldrd	r8, r9, [r7, #712]	; 0x2c8
 8000fec:	4642      	mov	r2, r8
 8000fee:	fb02 f203 	mul.w	r2, r2, r3
 8000ff2:	464b      	mov	r3, r9
 8000ff4:	4621      	mov	r1, r4
 8000ff6:	fb01 f303 	mul.w	r3, r1, r3
 8000ffa:	4413      	add	r3, r2
 8000ffc:	4622      	mov	r2, r4
 8000ffe:	4641      	mov	r1, r8
 8001000:	fba2 1201 	umull	r1, r2, r2, r1
 8001004:	f8c7 23c4 	str.w	r2, [r7, #964]	; 0x3c4
 8001008:	460a      	mov	r2, r1
 800100a:	f8c7 23c0 	str.w	r2, [r7, #960]	; 0x3c0
 800100e:	f8d7 23c4 	ldr.w	r2, [r7, #964]	; 0x3c4
 8001012:	4413      	add	r3, r2
 8001014:	f8c7 33c4 	str.w	r3, [r7, #964]	; 0x3c4
 8001018:	f04f 0000 	mov.w	r0, #0
 800101c:	f04f 0100 	mov.w	r1, #0
 8001020:	e9d7 45f0 	ldrd	r4, r5, [r7, #960]	; 0x3c0
 8001024:	462b      	mov	r3, r5
 8001026:	0099      	lsls	r1, r3, #2
 8001028:	4623      	mov	r3, r4
 800102a:	ea41 7193 	orr.w	r1, r1, r3, lsr #30
 800102e:	4623      	mov	r3, r4
 8001030:	0098      	lsls	r0, r3, #2
 8001032:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8001036:	f04f 0300 	mov.w	r3, #0
 800103a:	f7ff fb35 	bl	80006a8 <__aeabi_uldivmod>
 800103e:	4602      	mov	r2, r0
 8001040:	460b      	mov	r3, r1
 8001042:	f06f 0063 	mvn.w	r0, #99	; 0x63
 8001046:	f04f 31ff 	mov.w	r1, #4294967295
 800104a:	1a80      	subs	r0, r0, r2
 800104c:	f8c7 00a8 	str.w	r0, [r7, #168]	; 0xa8
 8001050:	eb61 0303 	sbc.w	r3, r1, r3
 8001054:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8001058:	4b3f      	ldr	r3, [pc, #252]	; (8001158 <Set_Random_Motion_Values+0x458>)
 800105a:	685b      	ldr	r3, [r3, #4]
 800105c:	461a      	mov	r2, r3
 800105e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001062:	4413      	add	r3, r2
 8001064:	461a      	mov	r2, r3
 8001066:	4b3c      	ldr	r3, [pc, #240]	; (8001158 <Set_Random_Motion_Values+0x458>)
 8001068:	605a      	str	r2, [r3, #4]
    g_axes.AXIS_Z +=  (100 + ((uint64_t)rand()*6*cnt)/RAND_MAX);
 800106a:	f00e fa3f 	bl	800f4ec <rand>
 800106e:	4603      	mov	r3, r0
 8001070:	17da      	asrs	r2, r3, #31
 8001072:	f8c7 32c0 	str.w	r3, [r7, #704]	; 0x2c0
 8001076:	f8c7 22c4 	str.w	r2, [r7, #708]	; 0x2c4
 800107a:	f8d7 33e4 	ldr.w	r3, [r7, #996]	; 0x3e4
 800107e:	2200      	movs	r2, #0
 8001080:	f8c7 32b8 	str.w	r3, [r7, #696]	; 0x2b8
 8001084:	f8c7 22bc 	str.w	r2, [r7, #700]	; 0x2bc
 8001088:	e9d7 45b0 	ldrd	r4, r5, [r7, #704]	; 0x2c0
 800108c:	462b      	mov	r3, r5
 800108e:	e9d7 89ae 	ldrd	r8, r9, [r7, #696]	; 0x2b8
 8001092:	4642      	mov	r2, r8
 8001094:	fb02 f203 	mul.w	r2, r2, r3
 8001098:	464b      	mov	r3, r9
 800109a:	4621      	mov	r1, r4
 800109c:	fb01 f303 	mul.w	r3, r1, r3
 80010a0:	4413      	add	r3, r2
 80010a2:	4622      	mov	r2, r4
 80010a4:	4641      	mov	r1, r8
 80010a6:	fba2 1201 	umull	r1, r2, r2, r1
 80010aa:	f8c7 23bc 	str.w	r2, [r7, #956]	; 0x3bc
 80010ae:	460a      	mov	r2, r1
 80010b0:	f8c7 23b8 	str.w	r2, [r7, #952]	; 0x3b8
 80010b4:	f8d7 23bc 	ldr.w	r2, [r7, #956]	; 0x3bc
 80010b8:	4413      	add	r3, r2
 80010ba:	f8c7 33bc 	str.w	r3, [r7, #956]	; 0x3bc
 80010be:	e9d7 45ee 	ldrd	r4, r5, [r7, #952]	; 0x3b8
 80010c2:	4622      	mov	r2, r4
 80010c4:	462b      	mov	r3, r5
 80010c6:	1891      	adds	r1, r2, r2
 80010c8:	65b9      	str	r1, [r7, #88]	; 0x58
 80010ca:	415b      	adcs	r3, r3
 80010cc:	65fb      	str	r3, [r7, #92]	; 0x5c
 80010ce:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80010d2:	4621      	mov	r1, r4
 80010d4:	1851      	adds	r1, r2, r1
 80010d6:	6539      	str	r1, [r7, #80]	; 0x50
 80010d8:	4629      	mov	r1, r5
 80010da:	eb43 0101 	adc.w	r1, r3, r1
 80010de:	6579      	str	r1, [r7, #84]	; 0x54
 80010e0:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 80010e4:	460b      	mov	r3, r1
 80010e6:	18db      	adds	r3, r3, r3
 80010e8:	64bb      	str	r3, [r7, #72]	; 0x48
 80010ea:	4613      	mov	r3, r2
 80010ec:	eb42 0303 	adc.w	r3, r2, r3
 80010f0:	64fb      	str	r3, [r7, #76]	; 0x4c
 80010f2:	e9d7 3412 	ldrd	r3, r4, [r7, #72]	; 0x48
 80010f6:	4618      	mov	r0, r3
 80010f8:	4621      	mov	r1, r4
 80010fa:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 80010fe:	f04f 0300 	mov.w	r3, #0
 8001102:	f7ff fad1 	bl	80006a8 <__aeabi_uldivmod>
 8001106:	4602      	mov	r2, r0
 8001108:	460b      	mov	r3, r1
 800110a:	f112 0164 	adds.w	r1, r2, #100	; 0x64
 800110e:	f8c7 10a0 	str.w	r1, [r7, #160]	; 0xa0
 8001112:	f143 0300 	adc.w	r3, r3, #0
 8001116:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800111a:	4b0f      	ldr	r3, [pc, #60]	; (8001158 <Set_Random_Motion_Values+0x458>)
 800111c:	689b      	ldr	r3, [r3, #8]
 800111e:	461a      	mov	r2, r3
 8001120:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8001124:	4413      	add	r3, r2
 8001126:	461a      	mov	r2, r3
 8001128:	4b0b      	ldr	r3, [pc, #44]	; (8001158 <Set_Random_Motion_Values+0x458>)
 800112a:	609a      	str	r2, [r3, #8]
    m_axes.AXIS_X +=  (3  + ((uint64_t)rand()*3*cnt)/RAND_MAX);
 800112c:	f00e f9de 	bl	800f4ec <rand>
 8001130:	4603      	mov	r3, r0
 8001132:	17da      	asrs	r2, r3, #31
 8001134:	f8c7 32b0 	str.w	r3, [r7, #688]	; 0x2b0
 8001138:	f8c7 22b4 	str.w	r2, [r7, #692]	; 0x2b4
 800113c:	f8d7 33e4 	ldr.w	r3, [r7, #996]	; 0x3e4
 8001140:	2200      	movs	r2, #0
 8001142:	f8c7 32a8 	str.w	r3, [r7, #680]	; 0x2a8
 8001146:	f8c7 22ac 	str.w	r2, [r7, #684]	; 0x2ac
 800114a:	e9d7 45ac 	ldrd	r4, r5, [r7, #688]	; 0x2b0
 800114e:	462b      	mov	r3, r5
 8001150:	e004      	b.n	800115c <Set_Random_Motion_Values+0x45c>
 8001152:	bf00      	nop
 8001154:	20000264 	.word	0x20000264
 8001158:	20000270 	.word	0x20000270
 800115c:	e9d7 89aa 	ldrd	r8, r9, [r7, #680]	; 0x2a8
 8001160:	4642      	mov	r2, r8
 8001162:	fb02 f203 	mul.w	r2, r2, r3
 8001166:	464b      	mov	r3, r9
 8001168:	4621      	mov	r1, r4
 800116a:	fb01 f303 	mul.w	r3, r1, r3
 800116e:	4413      	add	r3, r2
 8001170:	4622      	mov	r2, r4
 8001172:	4641      	mov	r1, r8
 8001174:	fba2 1201 	umull	r1, r2, r2, r1
 8001178:	f8c7 23b4 	str.w	r2, [r7, #948]	; 0x3b4
 800117c:	460a      	mov	r2, r1
 800117e:	f8c7 23b0 	str.w	r2, [r7, #944]	; 0x3b0
 8001182:	f8d7 23b4 	ldr.w	r2, [r7, #948]	; 0x3b4
 8001186:	4413      	add	r3, r2
 8001188:	f8c7 33b4 	str.w	r3, [r7, #948]	; 0x3b4
 800118c:	e9d7 45ec 	ldrd	r4, r5, [r7, #944]	; 0x3b0
 8001190:	4622      	mov	r2, r4
 8001192:	462b      	mov	r3, r5
 8001194:	1891      	adds	r1, r2, r2
 8001196:	6439      	str	r1, [r7, #64]	; 0x40
 8001198:	415b      	adcs	r3, r3
 800119a:	647b      	str	r3, [r7, #68]	; 0x44
 800119c:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80011a0:	4621      	mov	r1, r4
 80011a2:	1851      	adds	r1, r2, r1
 80011a4:	f8c7 12a0 	str.w	r1, [r7, #672]	; 0x2a0
 80011a8:	4629      	mov	r1, r5
 80011aa:	eb43 0101 	adc.w	r1, r3, r1
 80011ae:	f8c7 12a4 	str.w	r1, [r7, #676]	; 0x2a4
 80011b2:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 80011b6:	f04f 0300 	mov.w	r3, #0
 80011ba:	e9d7 01a8 	ldrd	r0, r1, [r7, #672]	; 0x2a0
 80011be:	f7ff fa73 	bl	80006a8 <__aeabi_uldivmod>
 80011c2:	4602      	mov	r2, r0
 80011c4:	460b      	mov	r3, r1
 80011c6:	1cd1      	adds	r1, r2, #3
 80011c8:	f8c7 1098 	str.w	r1, [r7, #152]	; 0x98
 80011cc:	f143 0300 	adc.w	r3, r3, #0
 80011d0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80011d4:	4be1      	ldr	r3, [pc, #900]	; (800155c <Set_Random_Motion_Values+0x85c>)
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	461a      	mov	r2, r3
 80011da:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80011de:	4413      	add	r3, r2
 80011e0:	461a      	mov	r2, r3
 80011e2:	4bde      	ldr	r3, [pc, #888]	; (800155c <Set_Random_Motion_Values+0x85c>)
 80011e4:	601a      	str	r2, [r3, #0]
    m_axes.AXIS_Y += -(3  + ((uint64_t)rand()*4*cnt)/RAND_MAX);
 80011e6:	f00e f981 	bl	800f4ec <rand>
 80011ea:	4603      	mov	r3, r0
 80011ec:	17da      	asrs	r2, r3, #31
 80011ee:	f8c7 3298 	str.w	r3, [r7, #664]	; 0x298
 80011f2:	f8c7 229c 	str.w	r2, [r7, #668]	; 0x29c
 80011f6:	f8d7 33e4 	ldr.w	r3, [r7, #996]	; 0x3e4
 80011fa:	2200      	movs	r2, #0
 80011fc:	f8c7 3290 	str.w	r3, [r7, #656]	; 0x290
 8001200:	f8c7 2294 	str.w	r2, [r7, #660]	; 0x294
 8001204:	e9d7 45a6 	ldrd	r4, r5, [r7, #664]	; 0x298
 8001208:	462b      	mov	r3, r5
 800120a:	e9d7 89a4 	ldrd	r8, r9, [r7, #656]	; 0x290
 800120e:	4642      	mov	r2, r8
 8001210:	fb02 f203 	mul.w	r2, r2, r3
 8001214:	464b      	mov	r3, r9
 8001216:	4621      	mov	r1, r4
 8001218:	fb01 f303 	mul.w	r3, r1, r3
 800121c:	4413      	add	r3, r2
 800121e:	4622      	mov	r2, r4
 8001220:	4641      	mov	r1, r8
 8001222:	fba2 1201 	umull	r1, r2, r2, r1
 8001226:	f8c7 23ac 	str.w	r2, [r7, #940]	; 0x3ac
 800122a:	460a      	mov	r2, r1
 800122c:	f8c7 23a8 	str.w	r2, [r7, #936]	; 0x3a8
 8001230:	f8d7 23ac 	ldr.w	r2, [r7, #940]	; 0x3ac
 8001234:	4413      	add	r3, r2
 8001236:	f8c7 33ac 	str.w	r3, [r7, #940]	; 0x3ac
 800123a:	f04f 0000 	mov.w	r0, #0
 800123e:	f04f 0100 	mov.w	r1, #0
 8001242:	e9d7 45ea 	ldrd	r4, r5, [r7, #936]	; 0x3a8
 8001246:	462b      	mov	r3, r5
 8001248:	0099      	lsls	r1, r3, #2
 800124a:	4623      	mov	r3, r4
 800124c:	ea41 7193 	orr.w	r1, r1, r3, lsr #30
 8001250:	4623      	mov	r3, r4
 8001252:	0098      	lsls	r0, r3, #2
 8001254:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8001258:	f04f 0300 	mov.w	r3, #0
 800125c:	f7ff fa24 	bl	80006a8 <__aeabi_uldivmod>
 8001260:	4602      	mov	r2, r0
 8001262:	460b      	mov	r3, r1
 8001264:	f06f 0002 	mvn.w	r0, #2
 8001268:	f04f 31ff 	mov.w	r1, #4294967295
 800126c:	1a80      	subs	r0, r0, r2
 800126e:	f8c7 0090 	str.w	r0, [r7, #144]	; 0x90
 8001272:	eb61 0303 	sbc.w	r3, r1, r3
 8001276:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800127a:	4bb8      	ldr	r3, [pc, #736]	; (800155c <Set_Random_Motion_Values+0x85c>)
 800127c:	685b      	ldr	r3, [r3, #4]
 800127e:	461a      	mov	r2, r3
 8001280:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001284:	4413      	add	r3, r2
 8001286:	461a      	mov	r2, r3
 8001288:	4bb4      	ldr	r3, [pc, #720]	; (800155c <Set_Random_Motion_Values+0x85c>)
 800128a:	605a      	str	r2, [r3, #4]
    m_axes.AXIS_Z +=  (3  + ((uint64_t)rand()*5*cnt)/RAND_MAX);
 800128c:	f00e f92e 	bl	800f4ec <rand>
 8001290:	4603      	mov	r3, r0
 8001292:	17da      	asrs	r2, r3, #31
 8001294:	f8c7 3288 	str.w	r3, [r7, #648]	; 0x288
 8001298:	f8c7 228c 	str.w	r2, [r7, #652]	; 0x28c
 800129c:	f8d7 33e4 	ldr.w	r3, [r7, #996]	; 0x3e4
 80012a0:	2200      	movs	r2, #0
 80012a2:	f8c7 3280 	str.w	r3, [r7, #640]	; 0x280
 80012a6:	f8c7 2284 	str.w	r2, [r7, #644]	; 0x284
 80012aa:	e9d7 45a2 	ldrd	r4, r5, [r7, #648]	; 0x288
 80012ae:	462b      	mov	r3, r5
 80012b0:	e9d7 89a0 	ldrd	r8, r9, [r7, #640]	; 0x280
 80012b4:	4642      	mov	r2, r8
 80012b6:	fb02 f203 	mul.w	r2, r2, r3
 80012ba:	464b      	mov	r3, r9
 80012bc:	4621      	mov	r1, r4
 80012be:	fb01 f303 	mul.w	r3, r1, r3
 80012c2:	4413      	add	r3, r2
 80012c4:	4622      	mov	r2, r4
 80012c6:	4641      	mov	r1, r8
 80012c8:	fba2 1201 	umull	r1, r2, r2, r1
 80012cc:	f8c7 23a4 	str.w	r2, [r7, #932]	; 0x3a4
 80012d0:	460a      	mov	r2, r1
 80012d2:	f8c7 23a0 	str.w	r2, [r7, #928]	; 0x3a0
 80012d6:	f8d7 23a4 	ldr.w	r2, [r7, #932]	; 0x3a4
 80012da:	4413      	add	r3, r2
 80012dc:	f8c7 33a4 	str.w	r3, [r7, #932]	; 0x3a4
 80012e0:	e9d7 45e8 	ldrd	r4, r5, [r7, #928]	; 0x3a0
 80012e4:	4622      	mov	r2, r4
 80012e6:	462b      	mov	r3, r5
 80012e8:	f04f 0000 	mov.w	r0, #0
 80012ec:	f04f 0100 	mov.w	r1, #0
 80012f0:	0099      	lsls	r1, r3, #2
 80012f2:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 80012f6:	0090      	lsls	r0, r2, #2
 80012f8:	4602      	mov	r2, r0
 80012fa:	460b      	mov	r3, r1
 80012fc:	4621      	mov	r1, r4
 80012fe:	1851      	adds	r1, r2, r1
 8001300:	f8c7 1278 	str.w	r1, [r7, #632]	; 0x278
 8001304:	4629      	mov	r1, r5
 8001306:	eb43 0101 	adc.w	r1, r3, r1
 800130a:	f8c7 127c 	str.w	r1, [r7, #636]	; 0x27c
 800130e:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8001312:	f04f 0300 	mov.w	r3, #0
 8001316:	e9d7 019e 	ldrd	r0, r1, [r7, #632]	; 0x278
 800131a:	f7ff f9c5 	bl	80006a8 <__aeabi_uldivmod>
 800131e:	4602      	mov	r2, r0
 8001320:	460b      	mov	r3, r1
 8001322:	1cd1      	adds	r1, r2, #3
 8001324:	f8c7 1088 	str.w	r1, [r7, #136]	; 0x88
 8001328:	f143 0300 	adc.w	r3, r3, #0
 800132c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8001330:	4b8a      	ldr	r3, [pc, #552]	; (800155c <Set_Random_Motion_Values+0x85c>)
 8001332:	689b      	ldr	r3, [r3, #8]
 8001334:	461a      	mov	r2, r3
 8001336:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800133a:	4413      	add	r3, r2
 800133c:	461a      	mov	r2, r3
 800133e:	4b87      	ldr	r3, [pc, #540]	; (800155c <Set_Random_Motion_Values+0x85c>)
 8001340:	609a      	str	r2, [r3, #8]

    q_axes.AXIS_X -= (100  + ((uint64_t)rand()*3*cnt)/RAND_MAX);
 8001342:	f00e f8d3 	bl	800f4ec <rand>
 8001346:	4603      	mov	r3, r0
 8001348:	17da      	asrs	r2, r3, #31
 800134a:	f8c7 3270 	str.w	r3, [r7, #624]	; 0x270
 800134e:	f8c7 2274 	str.w	r2, [r7, #628]	; 0x274
 8001352:	f8d7 33e4 	ldr.w	r3, [r7, #996]	; 0x3e4
 8001356:	2200      	movs	r2, #0
 8001358:	f8c7 3268 	str.w	r3, [r7, #616]	; 0x268
 800135c:	f8c7 226c 	str.w	r2, [r7, #620]	; 0x26c
 8001360:	e9d7 459c 	ldrd	r4, r5, [r7, #624]	; 0x270
 8001364:	462b      	mov	r3, r5
 8001366:	e9d7 899a 	ldrd	r8, r9, [r7, #616]	; 0x268
 800136a:	4642      	mov	r2, r8
 800136c:	fb02 f203 	mul.w	r2, r2, r3
 8001370:	464b      	mov	r3, r9
 8001372:	4621      	mov	r1, r4
 8001374:	fb01 f303 	mul.w	r3, r1, r3
 8001378:	4413      	add	r3, r2
 800137a:	4622      	mov	r2, r4
 800137c:	4641      	mov	r1, r8
 800137e:	fba2 1201 	umull	r1, r2, r2, r1
 8001382:	f8c7 239c 	str.w	r2, [r7, #924]	; 0x39c
 8001386:	460a      	mov	r2, r1
 8001388:	f8c7 2398 	str.w	r2, [r7, #920]	; 0x398
 800138c:	f8d7 239c 	ldr.w	r2, [r7, #924]	; 0x39c
 8001390:	4413      	add	r3, r2
 8001392:	f8c7 339c 	str.w	r3, [r7, #924]	; 0x39c
 8001396:	e9d7 45e6 	ldrd	r4, r5, [r7, #920]	; 0x398
 800139a:	4622      	mov	r2, r4
 800139c:	462b      	mov	r3, r5
 800139e:	1891      	adds	r1, r2, r2
 80013a0:	63b9      	str	r1, [r7, #56]	; 0x38
 80013a2:	415b      	adcs	r3, r3
 80013a4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80013a6:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80013aa:	4621      	mov	r1, r4
 80013ac:	1851      	adds	r1, r2, r1
 80013ae:	f8c7 1260 	str.w	r1, [r7, #608]	; 0x260
 80013b2:	4629      	mov	r1, r5
 80013b4:	eb43 0101 	adc.w	r1, r3, r1
 80013b8:	f8c7 1264 	str.w	r1, [r7, #612]	; 0x264
 80013bc:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 80013c0:	f04f 0300 	mov.w	r3, #0
 80013c4:	e9d7 0198 	ldrd	r0, r1, [r7, #608]	; 0x260
 80013c8:	f7ff f96e 	bl	80006a8 <__aeabi_uldivmod>
 80013cc:	4602      	mov	r2, r0
 80013ce:	460b      	mov	r3, r1
 80013d0:	f112 0164 	adds.w	r1, r2, #100	; 0x64
 80013d4:	f8c7 1080 	str.w	r1, [r7, #128]	; 0x80
 80013d8:	f143 0300 	adc.w	r3, r3, #0
 80013dc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80013e0:	4b5f      	ldr	r3, [pc, #380]	; (8001560 <Set_Random_Motion_Values+0x860>)
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	461a      	mov	r2, r3
 80013e6:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80013ea:	1ad3      	subs	r3, r2, r3
 80013ec:	461a      	mov	r2, r3
 80013ee:	4b5c      	ldr	r3, [pc, #368]	; (8001560 <Set_Random_Motion_Values+0x860>)
 80013f0:	601a      	str	r2, [r3, #0]
    q_axes.AXIS_Y += (100  + ((uint64_t)rand()*5*cnt)/RAND_MAX);
 80013f2:	f00e f87b 	bl	800f4ec <rand>
 80013f6:	4603      	mov	r3, r0
 80013f8:	17da      	asrs	r2, r3, #31
 80013fa:	f8c7 3258 	str.w	r3, [r7, #600]	; 0x258
 80013fe:	f8c7 225c 	str.w	r2, [r7, #604]	; 0x25c
 8001402:	f8d7 33e4 	ldr.w	r3, [r7, #996]	; 0x3e4
 8001406:	2200      	movs	r2, #0
 8001408:	f8c7 3250 	str.w	r3, [r7, #592]	; 0x250
 800140c:	f8c7 2254 	str.w	r2, [r7, #596]	; 0x254
 8001410:	e9d7 4596 	ldrd	r4, r5, [r7, #600]	; 0x258
 8001414:	462b      	mov	r3, r5
 8001416:	e9d7 8994 	ldrd	r8, r9, [r7, #592]	; 0x250
 800141a:	4642      	mov	r2, r8
 800141c:	fb02 f203 	mul.w	r2, r2, r3
 8001420:	464b      	mov	r3, r9
 8001422:	4621      	mov	r1, r4
 8001424:	fb01 f303 	mul.w	r3, r1, r3
 8001428:	4413      	add	r3, r2
 800142a:	4622      	mov	r2, r4
 800142c:	4641      	mov	r1, r8
 800142e:	fba2 1201 	umull	r1, r2, r2, r1
 8001432:	f8c7 2394 	str.w	r2, [r7, #916]	; 0x394
 8001436:	460a      	mov	r2, r1
 8001438:	f8c7 2390 	str.w	r2, [r7, #912]	; 0x390
 800143c:	f8d7 2394 	ldr.w	r2, [r7, #916]	; 0x394
 8001440:	4413      	add	r3, r2
 8001442:	f8c7 3394 	str.w	r3, [r7, #916]	; 0x394
 8001446:	e9d7 45e4 	ldrd	r4, r5, [r7, #912]	; 0x390
 800144a:	4622      	mov	r2, r4
 800144c:	462b      	mov	r3, r5
 800144e:	f04f 0000 	mov.w	r0, #0
 8001452:	f04f 0100 	mov.w	r1, #0
 8001456:	0099      	lsls	r1, r3, #2
 8001458:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 800145c:	0090      	lsls	r0, r2, #2
 800145e:	4602      	mov	r2, r0
 8001460:	460b      	mov	r3, r1
 8001462:	4621      	mov	r1, r4
 8001464:	1851      	adds	r1, r2, r1
 8001466:	f8c7 1248 	str.w	r1, [r7, #584]	; 0x248
 800146a:	4629      	mov	r1, r5
 800146c:	eb43 0101 	adc.w	r1, r3, r1
 8001470:	f8c7 124c 	str.w	r1, [r7, #588]	; 0x24c
 8001474:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8001478:	f04f 0300 	mov.w	r3, #0
 800147c:	e9d7 0192 	ldrd	r0, r1, [r7, #584]	; 0x248
 8001480:	f7ff f912 	bl	80006a8 <__aeabi_uldivmod>
 8001484:	4602      	mov	r2, r0
 8001486:	460b      	mov	r3, r1
 8001488:	f112 0164 	adds.w	r1, r2, #100	; 0x64
 800148c:	67b9      	str	r1, [r7, #120]	; 0x78
 800148e:	f143 0300 	adc.w	r3, r3, #0
 8001492:	67fb      	str	r3, [r7, #124]	; 0x7c
 8001494:	4b32      	ldr	r3, [pc, #200]	; (8001560 <Set_Random_Motion_Values+0x860>)
 8001496:	685b      	ldr	r3, [r3, #4]
 8001498:	461a      	mov	r2, r3
 800149a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800149c:	4413      	add	r3, r2
 800149e:	461a      	mov	r2, r3
 80014a0:	4b2f      	ldr	r3, [pc, #188]	; (8001560 <Set_Random_Motion_Values+0x860>)
 80014a2:	605a      	str	r2, [r3, #4]
    q_axes.AXIS_Z -= (100  + ((uint64_t)rand()*7*cnt)/RAND_MAX);
 80014a4:	f00e f822 	bl	800f4ec <rand>
 80014a8:	4603      	mov	r3, r0
 80014aa:	17da      	asrs	r2, r3, #31
 80014ac:	f8c7 3240 	str.w	r3, [r7, #576]	; 0x240
 80014b0:	f8c7 2244 	str.w	r2, [r7, #580]	; 0x244
 80014b4:	f8d7 33e4 	ldr.w	r3, [r7, #996]	; 0x3e4
 80014b8:	2200      	movs	r2, #0
 80014ba:	f8c7 3238 	str.w	r3, [r7, #568]	; 0x238
 80014be:	f8c7 223c 	str.w	r2, [r7, #572]	; 0x23c
 80014c2:	e9d7 4590 	ldrd	r4, r5, [r7, #576]	; 0x240
 80014c6:	462b      	mov	r3, r5
 80014c8:	e9d7 898e 	ldrd	r8, r9, [r7, #568]	; 0x238
 80014cc:	4642      	mov	r2, r8
 80014ce:	fb02 f203 	mul.w	r2, r2, r3
 80014d2:	464b      	mov	r3, r9
 80014d4:	4621      	mov	r1, r4
 80014d6:	fb01 f303 	mul.w	r3, r1, r3
 80014da:	4413      	add	r3, r2
 80014dc:	4622      	mov	r2, r4
 80014de:	4641      	mov	r1, r8
 80014e0:	fba2 1201 	umull	r1, r2, r2, r1
 80014e4:	f8c7 238c 	str.w	r2, [r7, #908]	; 0x38c
 80014e8:	460a      	mov	r2, r1
 80014ea:	f8c7 2388 	str.w	r2, [r7, #904]	; 0x388
 80014ee:	f8d7 238c 	ldr.w	r2, [r7, #908]	; 0x38c
 80014f2:	4413      	add	r3, r2
 80014f4:	f8c7 338c 	str.w	r3, [r7, #908]	; 0x38c
 80014f8:	e9d7 45e2 	ldrd	r4, r5, [r7, #904]	; 0x388
 80014fc:	4622      	mov	r2, r4
 80014fe:	462b      	mov	r3, r5
 8001500:	f04f 0000 	mov.w	r0, #0
 8001504:	f04f 0100 	mov.w	r1, #0
 8001508:	00d9      	lsls	r1, r3, #3
 800150a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800150e:	00d0      	lsls	r0, r2, #3
 8001510:	4602      	mov	r2, r0
 8001512:	460b      	mov	r3, r1
 8001514:	4621      	mov	r1, r4
 8001516:	1a51      	subs	r1, r2, r1
 8001518:	f8c7 1230 	str.w	r1, [r7, #560]	; 0x230
 800151c:	4629      	mov	r1, r5
 800151e:	eb63 0301 	sbc.w	r3, r3, r1
 8001522:	f8c7 3234 	str.w	r3, [r7, #564]	; 0x234
 8001526:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 800152a:	f04f 0300 	mov.w	r3, #0
 800152e:	e9d7 018c 	ldrd	r0, r1, [r7, #560]	; 0x230
 8001532:	f7ff f8b9 	bl	80006a8 <__aeabi_uldivmod>
 8001536:	4602      	mov	r2, r0
 8001538:	460b      	mov	r3, r1
 800153a:	f112 0164 	adds.w	r1, r2, #100	; 0x64
 800153e:	6739      	str	r1, [r7, #112]	; 0x70
 8001540:	f143 0300 	adc.w	r3, r3, #0
 8001544:	677b      	str	r3, [r7, #116]	; 0x74
 8001546:	4b06      	ldr	r3, [pc, #24]	; (8001560 <Set_Random_Motion_Values+0x860>)
 8001548:	689b      	ldr	r3, [r3, #8]
 800154a:	461a      	mov	r2, r3
 800154c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800154e:	1ad3      	subs	r3, r2, r3
 8001550:	461a      	mov	r2, r3
 8001552:	4b03      	ldr	r3, [pc, #12]	; (8001560 <Set_Random_Motion_Values+0x860>)
 8001554:	609a      	str	r2, [r3, #8]
    q_axes.AXIS_X += (200 + ((uint64_t)rand()*7*cnt)/RAND_MAX);
    q_axes.AXIS_Y -= (150 + ((uint64_t)rand()*3*cnt)/RAND_MAX);
    q_axes.AXIS_Z += (10  + ((uint64_t)rand()*5*cnt)/RAND_MAX);
  }

}
 8001556:	f000 bc37 	b.w	8001dc8 <Set_Random_Motion_Values+0x10c8>
 800155a:	bf00      	nop
 800155c:	2000027c 	.word	0x2000027c
 8001560:	20000288 	.word	0x20000288
    x_axes.AXIS_X += -(10  + ((uint64_t)rand()*3*cnt)/RAND_MAX);
 8001564:	f00d ffc2 	bl	800f4ec <rand>
 8001568:	4603      	mov	r3, r0
 800156a:	17da      	asrs	r2, r3, #31
 800156c:	f8c7 3228 	str.w	r3, [r7, #552]	; 0x228
 8001570:	f8c7 222c 	str.w	r2, [r7, #556]	; 0x22c
 8001574:	f8d7 33e4 	ldr.w	r3, [r7, #996]	; 0x3e4
 8001578:	2200      	movs	r2, #0
 800157a:	469a      	mov	sl, r3
 800157c:	4693      	mov	fp, r2
 800157e:	e9d7 018a 	ldrd	r0, r1, [r7, #552]	; 0x228
 8001582:	460b      	mov	r3, r1
 8001584:	fb0a f203 	mul.w	r2, sl, r3
 8001588:	4603      	mov	r3, r0
 800158a:	fb03 f30b 	mul.w	r3, r3, fp
 800158e:	4413      	add	r3, r2
 8001590:	4602      	mov	r2, r0
 8001592:	fba2 450a 	umull	r4, r5, r2, sl
 8001596:	442b      	add	r3, r5
 8001598:	461d      	mov	r5, r3
 800159a:	4622      	mov	r2, r4
 800159c:	462b      	mov	r3, r5
 800159e:	1891      	adds	r1, r2, r2
 80015a0:	6339      	str	r1, [r7, #48]	; 0x30
 80015a2:	415b      	adcs	r3, r3
 80015a4:	637b      	str	r3, [r7, #52]	; 0x34
 80015a6:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80015aa:	1911      	adds	r1, r2, r4
 80015ac:	f8c7 1220 	str.w	r1, [r7, #544]	; 0x220
 80015b0:	416b      	adcs	r3, r5
 80015b2:	f8c7 3224 	str.w	r3, [r7, #548]	; 0x224
 80015b6:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 80015ba:	f04f 0300 	mov.w	r3, #0
 80015be:	e9d7 0188 	ldrd	r0, r1, [r7, #544]	; 0x220
 80015c2:	f7ff f871 	bl	80006a8 <__aeabi_uldivmod>
 80015c6:	4602      	mov	r2, r0
 80015c8:	460b      	mov	r3, r1
 80015ca:	f06f 0009 	mvn.w	r0, #9
 80015ce:	f04f 31ff 	mov.w	r1, #4294967295
 80015d2:	1a80      	subs	r0, r0, r2
 80015d4:	f8c7 0128 	str.w	r0, [r7, #296]	; 0x128
 80015d8:	eb61 0303 	sbc.w	r3, r1, r3
 80015dc:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 80015e0:	4beb      	ldr	r3, [pc, #940]	; (8001990 <Set_Random_Motion_Values+0xc90>)
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	461a      	mov	r2, r3
 80015e6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80015ea:	4413      	add	r3, r2
 80015ec:	461a      	mov	r2, r3
 80015ee:	4be8      	ldr	r3, [pc, #928]	; (8001990 <Set_Random_Motion_Values+0xc90>)
 80015f0:	601a      	str	r2, [r3, #0]
    x_axes.AXIS_Y +=  (10  + ((uint64_t)rand()*5*cnt)/RAND_MAX);
 80015f2:	f00d ff7b 	bl	800f4ec <rand>
 80015f6:	4603      	mov	r3, r0
 80015f8:	17da      	asrs	r2, r3, #31
 80015fa:	f8c7 3218 	str.w	r3, [r7, #536]	; 0x218
 80015fe:	f8c7 221c 	str.w	r2, [r7, #540]	; 0x21c
 8001602:	f8d7 33e4 	ldr.w	r3, [r7, #996]	; 0x3e4
 8001606:	2200      	movs	r2, #0
 8001608:	f8c7 3210 	str.w	r3, [r7, #528]	; 0x210
 800160c:	f8c7 2214 	str.w	r2, [r7, #532]	; 0x214
 8001610:	e9d7 4586 	ldrd	r4, r5, [r7, #536]	; 0x218
 8001614:	462b      	mov	r3, r5
 8001616:	e9d7 8984 	ldrd	r8, r9, [r7, #528]	; 0x210
 800161a:	4642      	mov	r2, r8
 800161c:	fb02 f203 	mul.w	r2, r2, r3
 8001620:	464b      	mov	r3, r9
 8001622:	4621      	mov	r1, r4
 8001624:	fb01 f303 	mul.w	r3, r1, r3
 8001628:	4413      	add	r3, r2
 800162a:	4622      	mov	r2, r4
 800162c:	4641      	mov	r1, r8
 800162e:	fba2 1201 	umull	r1, r2, r2, r1
 8001632:	f8c7 2384 	str.w	r2, [r7, #900]	; 0x384
 8001636:	460a      	mov	r2, r1
 8001638:	f8c7 2380 	str.w	r2, [r7, #896]	; 0x380
 800163c:	f8d7 2384 	ldr.w	r2, [r7, #900]	; 0x384
 8001640:	4413      	add	r3, r2
 8001642:	f8c7 3384 	str.w	r3, [r7, #900]	; 0x384
 8001646:	e9d7 45e0 	ldrd	r4, r5, [r7, #896]	; 0x380
 800164a:	4622      	mov	r2, r4
 800164c:	462b      	mov	r3, r5
 800164e:	f04f 0000 	mov.w	r0, #0
 8001652:	f04f 0100 	mov.w	r1, #0
 8001656:	0099      	lsls	r1, r3, #2
 8001658:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 800165c:	0090      	lsls	r0, r2, #2
 800165e:	4602      	mov	r2, r0
 8001660:	460b      	mov	r3, r1
 8001662:	4621      	mov	r1, r4
 8001664:	1851      	adds	r1, r2, r1
 8001666:	f8c7 1208 	str.w	r1, [r7, #520]	; 0x208
 800166a:	4629      	mov	r1, r5
 800166c:	eb43 0101 	adc.w	r1, r3, r1
 8001670:	f8c7 120c 	str.w	r1, [r7, #524]	; 0x20c
 8001674:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8001678:	f04f 0300 	mov.w	r3, #0
 800167c:	e9d7 0182 	ldrd	r0, r1, [r7, #520]	; 0x208
 8001680:	f7ff f812 	bl	80006a8 <__aeabi_uldivmod>
 8001684:	4602      	mov	r2, r0
 8001686:	460b      	mov	r3, r1
 8001688:	f112 010a 	adds.w	r1, r2, #10
 800168c:	f8c7 1120 	str.w	r1, [r7, #288]	; 0x120
 8001690:	f143 0300 	adc.w	r3, r3, #0
 8001694:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8001698:	4bbd      	ldr	r3, [pc, #756]	; (8001990 <Set_Random_Motion_Values+0xc90>)
 800169a:	685b      	ldr	r3, [r3, #4]
 800169c:	461a      	mov	r2, r3
 800169e:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80016a2:	4413      	add	r3, r2
 80016a4:	461a      	mov	r2, r3
 80016a6:	4bba      	ldr	r3, [pc, #744]	; (8001990 <Set_Random_Motion_Values+0xc90>)
 80016a8:	605a      	str	r2, [r3, #4]
    x_axes.AXIS_Z += -(10  + ((uint64_t)rand()*7*cnt)/RAND_MAX);
 80016aa:	f00d ff1f 	bl	800f4ec <rand>
 80016ae:	4603      	mov	r3, r0
 80016b0:	17da      	asrs	r2, r3, #31
 80016b2:	f8c7 3200 	str.w	r3, [r7, #512]	; 0x200
 80016b6:	f8c7 2204 	str.w	r2, [r7, #516]	; 0x204
 80016ba:	f8d7 33e4 	ldr.w	r3, [r7, #996]	; 0x3e4
 80016be:	2200      	movs	r2, #0
 80016c0:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
 80016c4:	f8c7 21fc 	str.w	r2, [r7, #508]	; 0x1fc
 80016c8:	e9d7 4580 	ldrd	r4, r5, [r7, #512]	; 0x200
 80016cc:	462b      	mov	r3, r5
 80016ce:	e9d7 897e 	ldrd	r8, r9, [r7, #504]	; 0x1f8
 80016d2:	4642      	mov	r2, r8
 80016d4:	fb02 f203 	mul.w	r2, r2, r3
 80016d8:	464b      	mov	r3, r9
 80016da:	4621      	mov	r1, r4
 80016dc:	fb01 f303 	mul.w	r3, r1, r3
 80016e0:	4413      	add	r3, r2
 80016e2:	4622      	mov	r2, r4
 80016e4:	4641      	mov	r1, r8
 80016e6:	fba2 1201 	umull	r1, r2, r2, r1
 80016ea:	f8c7 237c 	str.w	r2, [r7, #892]	; 0x37c
 80016ee:	460a      	mov	r2, r1
 80016f0:	f8c7 2378 	str.w	r2, [r7, #888]	; 0x378
 80016f4:	f8d7 237c 	ldr.w	r2, [r7, #892]	; 0x37c
 80016f8:	4413      	add	r3, r2
 80016fa:	f8c7 337c 	str.w	r3, [r7, #892]	; 0x37c
 80016fe:	e9d7 45de 	ldrd	r4, r5, [r7, #888]	; 0x378
 8001702:	4622      	mov	r2, r4
 8001704:	462b      	mov	r3, r5
 8001706:	f04f 0000 	mov.w	r0, #0
 800170a:	f04f 0100 	mov.w	r1, #0
 800170e:	00d9      	lsls	r1, r3, #3
 8001710:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001714:	00d0      	lsls	r0, r2, #3
 8001716:	4602      	mov	r2, r0
 8001718:	460b      	mov	r3, r1
 800171a:	4621      	mov	r1, r4
 800171c:	1a51      	subs	r1, r2, r1
 800171e:	f8c7 11f0 	str.w	r1, [r7, #496]	; 0x1f0
 8001722:	4629      	mov	r1, r5
 8001724:	eb63 0301 	sbc.w	r3, r3, r1
 8001728:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
 800172c:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8001730:	f04f 0300 	mov.w	r3, #0
 8001734:	e9d7 017c 	ldrd	r0, r1, [r7, #496]	; 0x1f0
 8001738:	f7fe ffb6 	bl	80006a8 <__aeabi_uldivmod>
 800173c:	4602      	mov	r2, r0
 800173e:	460b      	mov	r3, r1
 8001740:	f06f 0009 	mvn.w	r0, #9
 8001744:	f04f 31ff 	mov.w	r1, #4294967295
 8001748:	1a80      	subs	r0, r0, r2
 800174a:	f8c7 0118 	str.w	r0, [r7, #280]	; 0x118
 800174e:	eb61 0303 	sbc.w	r3, r1, r3
 8001752:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8001756:	4b8e      	ldr	r3, [pc, #568]	; (8001990 <Set_Random_Motion_Values+0xc90>)
 8001758:	689b      	ldr	r3, [r3, #8]
 800175a:	461a      	mov	r2, r3
 800175c:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8001760:	4413      	add	r3, r2
 8001762:	461a      	mov	r2, r3
 8001764:	4b8a      	ldr	r3, [pc, #552]	; (8001990 <Set_Random_Motion_Values+0xc90>)
 8001766:	609a      	str	r2, [r3, #8]
    g_axes.AXIS_X += -(100 + ((uint64_t)rand()*2*cnt)/RAND_MAX);
 8001768:	f00d fec0 	bl	800f4ec <rand>
 800176c:	4603      	mov	r3, r0
 800176e:	17da      	asrs	r2, r3, #31
 8001770:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 8001774:	f8c7 21ec 	str.w	r2, [r7, #492]	; 0x1ec
 8001778:	f8d7 33e4 	ldr.w	r3, [r7, #996]	; 0x3e4
 800177c:	2200      	movs	r2, #0
 800177e:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8001782:	f8c7 21e4 	str.w	r2, [r7, #484]	; 0x1e4
 8001786:	e9d7 457a 	ldrd	r4, r5, [r7, #488]	; 0x1e8
 800178a:	462b      	mov	r3, r5
 800178c:	e9d7 8978 	ldrd	r8, r9, [r7, #480]	; 0x1e0
 8001790:	4642      	mov	r2, r8
 8001792:	fb02 f203 	mul.w	r2, r2, r3
 8001796:	464b      	mov	r3, r9
 8001798:	4621      	mov	r1, r4
 800179a:	fb01 f303 	mul.w	r3, r1, r3
 800179e:	4413      	add	r3, r2
 80017a0:	4622      	mov	r2, r4
 80017a2:	4641      	mov	r1, r8
 80017a4:	fba2 1201 	umull	r1, r2, r2, r1
 80017a8:	f8c7 2374 	str.w	r2, [r7, #884]	; 0x374
 80017ac:	460a      	mov	r2, r1
 80017ae:	f8c7 2370 	str.w	r2, [r7, #880]	; 0x370
 80017b2:	f8d7 2374 	ldr.w	r2, [r7, #884]	; 0x374
 80017b6:	4413      	add	r3, r2
 80017b8:	f8c7 3374 	str.w	r3, [r7, #884]	; 0x374
 80017bc:	e9d7 12dc 	ldrd	r1, r2, [r7, #880]	; 0x370
 80017c0:	460b      	mov	r3, r1
 80017c2:	18db      	adds	r3, r3, r3
 80017c4:	62bb      	str	r3, [r7, #40]	; 0x28
 80017c6:	4613      	mov	r3, r2
 80017c8:	eb42 0303 	adc.w	r3, r2, r3
 80017cc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80017ce:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80017d2:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 80017d6:	f04f 0300 	mov.w	r3, #0
 80017da:	f7fe ff65 	bl	80006a8 <__aeabi_uldivmod>
 80017de:	4602      	mov	r2, r0
 80017e0:	460b      	mov	r3, r1
 80017e2:	f06f 0063 	mvn.w	r0, #99	; 0x63
 80017e6:	f04f 31ff 	mov.w	r1, #4294967295
 80017ea:	1a80      	subs	r0, r0, r2
 80017ec:	f8c7 0110 	str.w	r0, [r7, #272]	; 0x110
 80017f0:	eb61 0303 	sbc.w	r3, r1, r3
 80017f4:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 80017f8:	4b66      	ldr	r3, [pc, #408]	; (8001994 <Set_Random_Motion_Values+0xc94>)
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	461a      	mov	r2, r3
 80017fe:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8001802:	4413      	add	r3, r2
 8001804:	461a      	mov	r2, r3
 8001806:	4b63      	ldr	r3, [pc, #396]	; (8001994 <Set_Random_Motion_Values+0xc94>)
 8001808:	601a      	str	r2, [r3, #0]
    g_axes.AXIS_Y +=  (100 + ((uint64_t)rand()*4*cnt)/RAND_MAX);
 800180a:	f00d fe6f 	bl	800f4ec <rand>
 800180e:	4603      	mov	r3, r0
 8001810:	17da      	asrs	r2, r3, #31
 8001812:	f8c7 31d8 	str.w	r3, [r7, #472]	; 0x1d8
 8001816:	f8c7 21dc 	str.w	r2, [r7, #476]	; 0x1dc
 800181a:	f8d7 33e4 	ldr.w	r3, [r7, #996]	; 0x3e4
 800181e:	2200      	movs	r2, #0
 8001820:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
 8001824:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
 8001828:	e9d7 4576 	ldrd	r4, r5, [r7, #472]	; 0x1d8
 800182c:	462b      	mov	r3, r5
 800182e:	e9d7 8974 	ldrd	r8, r9, [r7, #464]	; 0x1d0
 8001832:	4642      	mov	r2, r8
 8001834:	fb02 f203 	mul.w	r2, r2, r3
 8001838:	464b      	mov	r3, r9
 800183a:	4621      	mov	r1, r4
 800183c:	fb01 f303 	mul.w	r3, r1, r3
 8001840:	4413      	add	r3, r2
 8001842:	4622      	mov	r2, r4
 8001844:	4641      	mov	r1, r8
 8001846:	fba2 1201 	umull	r1, r2, r2, r1
 800184a:	f8c7 236c 	str.w	r2, [r7, #876]	; 0x36c
 800184e:	460a      	mov	r2, r1
 8001850:	f8c7 2368 	str.w	r2, [r7, #872]	; 0x368
 8001854:	f8d7 236c 	ldr.w	r2, [r7, #876]	; 0x36c
 8001858:	4413      	add	r3, r2
 800185a:	f8c7 336c 	str.w	r3, [r7, #876]	; 0x36c
 800185e:	f04f 0000 	mov.w	r0, #0
 8001862:	f04f 0100 	mov.w	r1, #0
 8001866:	e9d7 45da 	ldrd	r4, r5, [r7, #872]	; 0x368
 800186a:	462b      	mov	r3, r5
 800186c:	0099      	lsls	r1, r3, #2
 800186e:	4623      	mov	r3, r4
 8001870:	ea41 7193 	orr.w	r1, r1, r3, lsr #30
 8001874:	4623      	mov	r3, r4
 8001876:	0098      	lsls	r0, r3, #2
 8001878:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 800187c:	f04f 0300 	mov.w	r3, #0
 8001880:	f7fe ff12 	bl	80006a8 <__aeabi_uldivmod>
 8001884:	4602      	mov	r2, r0
 8001886:	460b      	mov	r3, r1
 8001888:	f112 0164 	adds.w	r1, r2, #100	; 0x64
 800188c:	f8c7 1108 	str.w	r1, [r7, #264]	; 0x108
 8001890:	f143 0300 	adc.w	r3, r3, #0
 8001894:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8001898:	4b3e      	ldr	r3, [pc, #248]	; (8001994 <Set_Random_Motion_Values+0xc94>)
 800189a:	685b      	ldr	r3, [r3, #4]
 800189c:	461a      	mov	r2, r3
 800189e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80018a2:	4413      	add	r3, r2
 80018a4:	461a      	mov	r2, r3
 80018a6:	4b3b      	ldr	r3, [pc, #236]	; (8001994 <Set_Random_Motion_Values+0xc94>)
 80018a8:	605a      	str	r2, [r3, #4]
    g_axes.AXIS_Z += -(100 + ((uint64_t)rand()*6*cnt)/RAND_MAX);
 80018aa:	f00d fe1f 	bl	800f4ec <rand>
 80018ae:	4603      	mov	r3, r0
 80018b0:	17da      	asrs	r2, r3, #31
 80018b2:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 80018b6:	f8c7 21cc 	str.w	r2, [r7, #460]	; 0x1cc
 80018ba:	f8d7 33e4 	ldr.w	r3, [r7, #996]	; 0x3e4
 80018be:	2200      	movs	r2, #0
 80018c0:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 80018c4:	f8c7 21c4 	str.w	r2, [r7, #452]	; 0x1c4
 80018c8:	e9d7 4572 	ldrd	r4, r5, [r7, #456]	; 0x1c8
 80018cc:	462b      	mov	r3, r5
 80018ce:	e9d7 8970 	ldrd	r8, r9, [r7, #448]	; 0x1c0
 80018d2:	4642      	mov	r2, r8
 80018d4:	fb02 f203 	mul.w	r2, r2, r3
 80018d8:	464b      	mov	r3, r9
 80018da:	4621      	mov	r1, r4
 80018dc:	fb01 f303 	mul.w	r3, r1, r3
 80018e0:	4413      	add	r3, r2
 80018e2:	4622      	mov	r2, r4
 80018e4:	4641      	mov	r1, r8
 80018e6:	fba2 1201 	umull	r1, r2, r2, r1
 80018ea:	f8c7 2364 	str.w	r2, [r7, #868]	; 0x364
 80018ee:	460a      	mov	r2, r1
 80018f0:	f8c7 2360 	str.w	r2, [r7, #864]	; 0x360
 80018f4:	f8d7 2364 	ldr.w	r2, [r7, #868]	; 0x364
 80018f8:	4413      	add	r3, r2
 80018fa:	f8c7 3364 	str.w	r3, [r7, #868]	; 0x364
 80018fe:	e9d7 45d8 	ldrd	r4, r5, [r7, #864]	; 0x360
 8001902:	4622      	mov	r2, r4
 8001904:	462b      	mov	r3, r5
 8001906:	1891      	adds	r1, r2, r2
 8001908:	6239      	str	r1, [r7, #32]
 800190a:	415b      	adcs	r3, r3
 800190c:	627b      	str	r3, [r7, #36]	; 0x24
 800190e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001912:	4621      	mov	r1, r4
 8001914:	1851      	adds	r1, r2, r1
 8001916:	61b9      	str	r1, [r7, #24]
 8001918:	4629      	mov	r1, r5
 800191a:	eb43 0101 	adc.w	r1, r3, r1
 800191e:	61f9      	str	r1, [r7, #28]
 8001920:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8001924:	460b      	mov	r3, r1
 8001926:	18db      	adds	r3, r3, r3
 8001928:	613b      	str	r3, [r7, #16]
 800192a:	4613      	mov	r3, r2
 800192c:	eb42 0303 	adc.w	r3, r2, r3
 8001930:	617b      	str	r3, [r7, #20]
 8001932:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8001936:	4618      	mov	r0, r3
 8001938:	4621      	mov	r1, r4
 800193a:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 800193e:	f04f 0300 	mov.w	r3, #0
 8001942:	f7fe feb1 	bl	80006a8 <__aeabi_uldivmod>
 8001946:	4602      	mov	r2, r0
 8001948:	460b      	mov	r3, r1
 800194a:	f06f 0063 	mvn.w	r0, #99	; 0x63
 800194e:	f04f 31ff 	mov.w	r1, #4294967295
 8001952:	1a80      	subs	r0, r0, r2
 8001954:	f8c7 0100 	str.w	r0, [r7, #256]	; 0x100
 8001958:	eb61 0303 	sbc.w	r3, r1, r3
 800195c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8001960:	4b0c      	ldr	r3, [pc, #48]	; (8001994 <Set_Random_Motion_Values+0xc94>)
 8001962:	689b      	ldr	r3, [r3, #8]
 8001964:	461a      	mov	r2, r3
 8001966:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800196a:	4413      	add	r3, r2
 800196c:	461a      	mov	r2, r3
 800196e:	4b09      	ldr	r3, [pc, #36]	; (8001994 <Set_Random_Motion_Values+0xc94>)
 8001970:	609a      	str	r2, [r3, #8]
    m_axes.AXIS_X += -(3  + ((uint64_t)rand()*7*cnt)/RAND_MAX);
 8001972:	f00d fdbb 	bl	800f4ec <rand>
 8001976:	4603      	mov	r3, r0
 8001978:	17da      	asrs	r2, r3, #31
 800197a:	f8c7 31b8 	str.w	r3, [r7, #440]	; 0x1b8
 800197e:	f8c7 21bc 	str.w	r2, [r7, #444]	; 0x1bc
 8001982:	f8d7 33e4 	ldr.w	r3, [r7, #996]	; 0x3e4
 8001986:	2200      	movs	r2, #0
 8001988:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
 800198c:	e004      	b.n	8001998 <Set_Random_Motion_Values+0xc98>
 800198e:	bf00      	nop
 8001990:	20000264 	.word	0x20000264
 8001994:	20000270 	.word	0x20000270
 8001998:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
 800199c:	e9d7 456e 	ldrd	r4, r5, [r7, #440]	; 0x1b8
 80019a0:	462b      	mov	r3, r5
 80019a2:	e9d7 896c 	ldrd	r8, r9, [r7, #432]	; 0x1b0
 80019a6:	4642      	mov	r2, r8
 80019a8:	fb02 f203 	mul.w	r2, r2, r3
 80019ac:	464b      	mov	r3, r9
 80019ae:	4621      	mov	r1, r4
 80019b0:	fb01 f303 	mul.w	r3, r1, r3
 80019b4:	4413      	add	r3, r2
 80019b6:	4622      	mov	r2, r4
 80019b8:	4641      	mov	r1, r8
 80019ba:	fba2 1201 	umull	r1, r2, r2, r1
 80019be:	f8c7 235c 	str.w	r2, [r7, #860]	; 0x35c
 80019c2:	460a      	mov	r2, r1
 80019c4:	f8c7 2358 	str.w	r2, [r7, #856]	; 0x358
 80019c8:	f8d7 235c 	ldr.w	r2, [r7, #860]	; 0x35c
 80019cc:	4413      	add	r3, r2
 80019ce:	f8c7 335c 	str.w	r3, [r7, #860]	; 0x35c
 80019d2:	e9d7 45d6 	ldrd	r4, r5, [r7, #856]	; 0x358
 80019d6:	4622      	mov	r2, r4
 80019d8:	462b      	mov	r3, r5
 80019da:	f04f 0000 	mov.w	r0, #0
 80019de:	f04f 0100 	mov.w	r1, #0
 80019e2:	00d9      	lsls	r1, r3, #3
 80019e4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80019e8:	00d0      	lsls	r0, r2, #3
 80019ea:	4602      	mov	r2, r0
 80019ec:	460b      	mov	r3, r1
 80019ee:	4621      	mov	r1, r4
 80019f0:	1a51      	subs	r1, r2, r1
 80019f2:	f8c7 11a8 	str.w	r1, [r7, #424]	; 0x1a8
 80019f6:	4629      	mov	r1, r5
 80019f8:	eb63 0301 	sbc.w	r3, r3, r1
 80019fc:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
 8001a00:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8001a04:	f04f 0300 	mov.w	r3, #0
 8001a08:	e9d7 016a 	ldrd	r0, r1, [r7, #424]	; 0x1a8
 8001a0c:	f7fe fe4c 	bl	80006a8 <__aeabi_uldivmod>
 8001a10:	4602      	mov	r2, r0
 8001a12:	460b      	mov	r3, r1
 8001a14:	f06f 0002 	mvn.w	r0, #2
 8001a18:	f04f 31ff 	mov.w	r1, #4294967295
 8001a1c:	1a80      	subs	r0, r0, r2
 8001a1e:	f8c7 00f8 	str.w	r0, [r7, #248]	; 0xf8
 8001a22:	eb61 0303 	sbc.w	r3, r1, r3
 8001a26:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8001a2a:	4bea      	ldr	r3, [pc, #936]	; (8001dd4 <Set_Random_Motion_Values+0x10d4>)
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	461a      	mov	r2, r3
 8001a30:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8001a34:	4413      	add	r3, r2
 8001a36:	461a      	mov	r2, r3
 8001a38:	4be6      	ldr	r3, [pc, #920]	; (8001dd4 <Set_Random_Motion_Values+0x10d4>)
 8001a3a:	601a      	str	r2, [r3, #0]
    m_axes.AXIS_Y +=  (3  + ((uint64_t)rand()*9*cnt)/RAND_MAX);
 8001a3c:	f00d fd56 	bl	800f4ec <rand>
 8001a40:	4603      	mov	r3, r0
 8001a42:	17da      	asrs	r2, r3, #31
 8001a44:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8001a48:	f8c7 21a4 	str.w	r2, [r7, #420]	; 0x1a4
 8001a4c:	f8d7 33e4 	ldr.w	r3, [r7, #996]	; 0x3e4
 8001a50:	2200      	movs	r2, #0
 8001a52:	f8c7 3198 	str.w	r3, [r7, #408]	; 0x198
 8001a56:	f8c7 219c 	str.w	r2, [r7, #412]	; 0x19c
 8001a5a:	e9d7 4568 	ldrd	r4, r5, [r7, #416]	; 0x1a0
 8001a5e:	462b      	mov	r3, r5
 8001a60:	e9d7 8966 	ldrd	r8, r9, [r7, #408]	; 0x198
 8001a64:	4642      	mov	r2, r8
 8001a66:	fb02 f203 	mul.w	r2, r2, r3
 8001a6a:	464b      	mov	r3, r9
 8001a6c:	4621      	mov	r1, r4
 8001a6e:	fb01 f303 	mul.w	r3, r1, r3
 8001a72:	4413      	add	r3, r2
 8001a74:	4622      	mov	r2, r4
 8001a76:	4641      	mov	r1, r8
 8001a78:	fba2 1201 	umull	r1, r2, r2, r1
 8001a7c:	f8c7 2354 	str.w	r2, [r7, #852]	; 0x354
 8001a80:	460a      	mov	r2, r1
 8001a82:	f8c7 2350 	str.w	r2, [r7, #848]	; 0x350
 8001a86:	f8d7 2354 	ldr.w	r2, [r7, #852]	; 0x354
 8001a8a:	4413      	add	r3, r2
 8001a8c:	f8c7 3354 	str.w	r3, [r7, #852]	; 0x354
 8001a90:	e9d7 45d4 	ldrd	r4, r5, [r7, #848]	; 0x350
 8001a94:	4622      	mov	r2, r4
 8001a96:	462b      	mov	r3, r5
 8001a98:	f04f 0000 	mov.w	r0, #0
 8001a9c:	f04f 0100 	mov.w	r1, #0
 8001aa0:	00d9      	lsls	r1, r3, #3
 8001aa2:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001aa6:	00d0      	lsls	r0, r2, #3
 8001aa8:	4602      	mov	r2, r0
 8001aaa:	460b      	mov	r3, r1
 8001aac:	4621      	mov	r1, r4
 8001aae:	1851      	adds	r1, r2, r1
 8001ab0:	f8c7 1190 	str.w	r1, [r7, #400]	; 0x190
 8001ab4:	4629      	mov	r1, r5
 8001ab6:	eb43 0101 	adc.w	r1, r3, r1
 8001aba:	f8c7 1194 	str.w	r1, [r7, #404]	; 0x194
 8001abe:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8001ac2:	f04f 0300 	mov.w	r3, #0
 8001ac6:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 8001aca:	f7fe fded 	bl	80006a8 <__aeabi_uldivmod>
 8001ace:	4602      	mov	r2, r0
 8001ad0:	460b      	mov	r3, r1
 8001ad2:	1cd1      	adds	r1, r2, #3
 8001ad4:	f8c7 10f0 	str.w	r1, [r7, #240]	; 0xf0
 8001ad8:	f143 0300 	adc.w	r3, r3, #0
 8001adc:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8001ae0:	4bbc      	ldr	r3, [pc, #752]	; (8001dd4 <Set_Random_Motion_Values+0x10d4>)
 8001ae2:	685b      	ldr	r3, [r3, #4]
 8001ae4:	461a      	mov	r2, r3
 8001ae6:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8001aea:	4413      	add	r3, r2
 8001aec:	461a      	mov	r2, r3
 8001aee:	4bb9      	ldr	r3, [pc, #740]	; (8001dd4 <Set_Random_Motion_Values+0x10d4>)
 8001af0:	605a      	str	r2, [r3, #4]
    m_axes.AXIS_Z += -(3  + ((uint64_t)rand()*3*cnt)/RAND_MAX);
 8001af2:	f00d fcfb 	bl	800f4ec <rand>
 8001af6:	4603      	mov	r3, r0
 8001af8:	17da      	asrs	r2, r3, #31
 8001afa:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 8001afe:	f8c7 218c 	str.w	r2, [r7, #396]	; 0x18c
 8001b02:	f8d7 33e4 	ldr.w	r3, [r7, #996]	; 0x3e4
 8001b06:	2200      	movs	r2, #0
 8001b08:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8001b0c:	f8c7 2184 	str.w	r2, [r7, #388]	; 0x184
 8001b10:	e9d7 4562 	ldrd	r4, r5, [r7, #392]	; 0x188
 8001b14:	462b      	mov	r3, r5
 8001b16:	e9d7 8960 	ldrd	r8, r9, [r7, #384]	; 0x180
 8001b1a:	4642      	mov	r2, r8
 8001b1c:	fb02 f203 	mul.w	r2, r2, r3
 8001b20:	464b      	mov	r3, r9
 8001b22:	4621      	mov	r1, r4
 8001b24:	fb01 f303 	mul.w	r3, r1, r3
 8001b28:	4413      	add	r3, r2
 8001b2a:	4622      	mov	r2, r4
 8001b2c:	4641      	mov	r1, r8
 8001b2e:	fba2 1201 	umull	r1, r2, r2, r1
 8001b32:	f8c7 234c 	str.w	r2, [r7, #844]	; 0x34c
 8001b36:	460a      	mov	r2, r1
 8001b38:	f8c7 2348 	str.w	r2, [r7, #840]	; 0x348
 8001b3c:	f8d7 234c 	ldr.w	r2, [r7, #844]	; 0x34c
 8001b40:	4413      	add	r3, r2
 8001b42:	f8c7 334c 	str.w	r3, [r7, #844]	; 0x34c
 8001b46:	e9d7 45d2 	ldrd	r4, r5, [r7, #840]	; 0x348
 8001b4a:	4622      	mov	r2, r4
 8001b4c:	462b      	mov	r3, r5
 8001b4e:	1891      	adds	r1, r2, r2
 8001b50:	60b9      	str	r1, [r7, #8]
 8001b52:	415b      	adcs	r3, r3
 8001b54:	60fb      	str	r3, [r7, #12]
 8001b56:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001b5a:	4621      	mov	r1, r4
 8001b5c:	1851      	adds	r1, r2, r1
 8001b5e:	f8c7 1178 	str.w	r1, [r7, #376]	; 0x178
 8001b62:	4629      	mov	r1, r5
 8001b64:	eb43 0101 	adc.w	r1, r3, r1
 8001b68:	f8c7 117c 	str.w	r1, [r7, #380]	; 0x17c
 8001b6c:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8001b70:	f04f 0300 	mov.w	r3, #0
 8001b74:	e9d7 015e 	ldrd	r0, r1, [r7, #376]	; 0x178
 8001b78:	f7fe fd96 	bl	80006a8 <__aeabi_uldivmod>
 8001b7c:	4602      	mov	r2, r0
 8001b7e:	460b      	mov	r3, r1
 8001b80:	f06f 0002 	mvn.w	r0, #2
 8001b84:	f04f 31ff 	mov.w	r1, #4294967295
 8001b88:	1a80      	subs	r0, r0, r2
 8001b8a:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
 8001b8e:	eb61 0303 	sbc.w	r3, r1, r3
 8001b92:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8001b96:	4b8f      	ldr	r3, [pc, #572]	; (8001dd4 <Set_Random_Motion_Values+0x10d4>)
 8001b98:	689b      	ldr	r3, [r3, #8]
 8001b9a:	461a      	mov	r2, r3
 8001b9c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8001ba0:	4413      	add	r3, r2
 8001ba2:	461a      	mov	r2, r3
 8001ba4:	4b8b      	ldr	r3, [pc, #556]	; (8001dd4 <Set_Random_Motion_Values+0x10d4>)
 8001ba6:	609a      	str	r2, [r3, #8]
    q_axes.AXIS_X += (200 + ((uint64_t)rand()*7*cnt)/RAND_MAX);
 8001ba8:	f00d fca0 	bl	800f4ec <rand>
 8001bac:	4603      	mov	r3, r0
 8001bae:	17da      	asrs	r2, r3, #31
 8001bb0:	f8c7 3170 	str.w	r3, [r7, #368]	; 0x170
 8001bb4:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
 8001bb8:	f8d7 33e4 	ldr.w	r3, [r7, #996]	; 0x3e4
 8001bbc:	2200      	movs	r2, #0
 8001bbe:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
 8001bc2:	f8c7 216c 	str.w	r2, [r7, #364]	; 0x16c
 8001bc6:	e9d7 455c 	ldrd	r4, r5, [r7, #368]	; 0x170
 8001bca:	462b      	mov	r3, r5
 8001bcc:	e9d7 895a 	ldrd	r8, r9, [r7, #360]	; 0x168
 8001bd0:	4642      	mov	r2, r8
 8001bd2:	fb02 f203 	mul.w	r2, r2, r3
 8001bd6:	464b      	mov	r3, r9
 8001bd8:	4621      	mov	r1, r4
 8001bda:	fb01 f303 	mul.w	r3, r1, r3
 8001bde:	4413      	add	r3, r2
 8001be0:	4622      	mov	r2, r4
 8001be2:	4641      	mov	r1, r8
 8001be4:	fba2 1201 	umull	r1, r2, r2, r1
 8001be8:	f8c7 2344 	str.w	r2, [r7, #836]	; 0x344
 8001bec:	460a      	mov	r2, r1
 8001bee:	f8c7 2340 	str.w	r2, [r7, #832]	; 0x340
 8001bf2:	f8d7 2344 	ldr.w	r2, [r7, #836]	; 0x344
 8001bf6:	4413      	add	r3, r2
 8001bf8:	f8c7 3344 	str.w	r3, [r7, #836]	; 0x344
 8001bfc:	e9d7 45d0 	ldrd	r4, r5, [r7, #832]	; 0x340
 8001c00:	4622      	mov	r2, r4
 8001c02:	462b      	mov	r3, r5
 8001c04:	f04f 0000 	mov.w	r0, #0
 8001c08:	f04f 0100 	mov.w	r1, #0
 8001c0c:	00d9      	lsls	r1, r3, #3
 8001c0e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001c12:	00d0      	lsls	r0, r2, #3
 8001c14:	4602      	mov	r2, r0
 8001c16:	460b      	mov	r3, r1
 8001c18:	4621      	mov	r1, r4
 8001c1a:	1a51      	subs	r1, r2, r1
 8001c1c:	f8c7 1160 	str.w	r1, [r7, #352]	; 0x160
 8001c20:	4629      	mov	r1, r5
 8001c22:	eb63 0301 	sbc.w	r3, r3, r1
 8001c26:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
 8001c2a:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8001c2e:	f04f 0300 	mov.w	r3, #0
 8001c32:	e9d7 0158 	ldrd	r0, r1, [r7, #352]	; 0x160
 8001c36:	f7fe fd37 	bl	80006a8 <__aeabi_uldivmod>
 8001c3a:	4602      	mov	r2, r0
 8001c3c:	460b      	mov	r3, r1
 8001c3e:	f112 01c8 	adds.w	r1, r2, #200	; 0xc8
 8001c42:	f8c7 10e0 	str.w	r1, [r7, #224]	; 0xe0
 8001c46:	f143 0300 	adc.w	r3, r3, #0
 8001c4a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8001c4e:	4b62      	ldr	r3, [pc, #392]	; (8001dd8 <Set_Random_Motion_Values+0x10d8>)
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	461a      	mov	r2, r3
 8001c54:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8001c58:	4413      	add	r3, r2
 8001c5a:	461a      	mov	r2, r3
 8001c5c:	4b5e      	ldr	r3, [pc, #376]	; (8001dd8 <Set_Random_Motion_Values+0x10d8>)
 8001c5e:	601a      	str	r2, [r3, #0]
    q_axes.AXIS_Y -= (150 + ((uint64_t)rand()*3*cnt)/RAND_MAX);
 8001c60:	f00d fc44 	bl	800f4ec <rand>
 8001c64:	4603      	mov	r3, r0
 8001c66:	17da      	asrs	r2, r3, #31
 8001c68:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 8001c6c:	f8c7 215c 	str.w	r2, [r7, #348]	; 0x15c
 8001c70:	f8d7 33e4 	ldr.w	r3, [r7, #996]	; 0x3e4
 8001c74:	2200      	movs	r2, #0
 8001c76:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8001c7a:	f8c7 2154 	str.w	r2, [r7, #340]	; 0x154
 8001c7e:	e9d7 4556 	ldrd	r4, r5, [r7, #344]	; 0x158
 8001c82:	462b      	mov	r3, r5
 8001c84:	e9d7 8954 	ldrd	r8, r9, [r7, #336]	; 0x150
 8001c88:	4642      	mov	r2, r8
 8001c8a:	fb02 f203 	mul.w	r2, r2, r3
 8001c8e:	464b      	mov	r3, r9
 8001c90:	4621      	mov	r1, r4
 8001c92:	fb01 f303 	mul.w	r3, r1, r3
 8001c96:	4413      	add	r3, r2
 8001c98:	4622      	mov	r2, r4
 8001c9a:	4641      	mov	r1, r8
 8001c9c:	fba2 1201 	umull	r1, r2, r2, r1
 8001ca0:	f8c7 233c 	str.w	r2, [r7, #828]	; 0x33c
 8001ca4:	460a      	mov	r2, r1
 8001ca6:	f8c7 2338 	str.w	r2, [r7, #824]	; 0x338
 8001caa:	f8d7 233c 	ldr.w	r2, [r7, #828]	; 0x33c
 8001cae:	4413      	add	r3, r2
 8001cb0:	f8c7 333c 	str.w	r3, [r7, #828]	; 0x33c
 8001cb4:	e9d7 45ce 	ldrd	r4, r5, [r7, #824]	; 0x338
 8001cb8:	4622      	mov	r2, r4
 8001cba:	462b      	mov	r3, r5
 8001cbc:	1891      	adds	r1, r2, r2
 8001cbe:	6039      	str	r1, [r7, #0]
 8001cc0:	415b      	adcs	r3, r3
 8001cc2:	607b      	str	r3, [r7, #4]
 8001cc4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001cc8:	4621      	mov	r1, r4
 8001cca:	1851      	adds	r1, r2, r1
 8001ccc:	f8c7 1148 	str.w	r1, [r7, #328]	; 0x148
 8001cd0:	4629      	mov	r1, r5
 8001cd2:	eb43 0101 	adc.w	r1, r3, r1
 8001cd6:	f8c7 114c 	str.w	r1, [r7, #332]	; 0x14c
 8001cda:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8001cde:	f04f 0300 	mov.w	r3, #0
 8001ce2:	e9d7 0152 	ldrd	r0, r1, [r7, #328]	; 0x148
 8001ce6:	f7fe fcdf 	bl	80006a8 <__aeabi_uldivmod>
 8001cea:	4602      	mov	r2, r0
 8001cec:	460b      	mov	r3, r1
 8001cee:	f112 0196 	adds.w	r1, r2, #150	; 0x96
 8001cf2:	f8c7 10d8 	str.w	r1, [r7, #216]	; 0xd8
 8001cf6:	f143 0300 	adc.w	r3, r3, #0
 8001cfa:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8001cfe:	4b36      	ldr	r3, [pc, #216]	; (8001dd8 <Set_Random_Motion_Values+0x10d8>)
 8001d00:	685b      	ldr	r3, [r3, #4]
 8001d02:	461a      	mov	r2, r3
 8001d04:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8001d08:	1ad3      	subs	r3, r2, r3
 8001d0a:	461a      	mov	r2, r3
 8001d0c:	4b32      	ldr	r3, [pc, #200]	; (8001dd8 <Set_Random_Motion_Values+0x10d8>)
 8001d0e:	605a      	str	r2, [r3, #4]
    q_axes.AXIS_Z += (10  + ((uint64_t)rand()*5*cnt)/RAND_MAX);
 8001d10:	f00d fbec 	bl	800f4ec <rand>
 8001d14:	4603      	mov	r3, r0
 8001d16:	17da      	asrs	r2, r3, #31
 8001d18:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
 8001d1c:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
 8001d20:	f8d7 33e4 	ldr.w	r3, [r7, #996]	; 0x3e4
 8001d24:	2200      	movs	r2, #0
 8001d26:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
 8001d2a:	f8c7 213c 	str.w	r2, [r7, #316]	; 0x13c
 8001d2e:	e9d7 4550 	ldrd	r4, r5, [r7, #320]	; 0x140
 8001d32:	462b      	mov	r3, r5
 8001d34:	e9d7 894e 	ldrd	r8, r9, [r7, #312]	; 0x138
 8001d38:	4642      	mov	r2, r8
 8001d3a:	fb02 f203 	mul.w	r2, r2, r3
 8001d3e:	464b      	mov	r3, r9
 8001d40:	4621      	mov	r1, r4
 8001d42:	fb01 f303 	mul.w	r3, r1, r3
 8001d46:	4413      	add	r3, r2
 8001d48:	4622      	mov	r2, r4
 8001d4a:	4641      	mov	r1, r8
 8001d4c:	fba2 1201 	umull	r1, r2, r2, r1
 8001d50:	f8c7 2334 	str.w	r2, [r7, #820]	; 0x334
 8001d54:	460a      	mov	r2, r1
 8001d56:	f8c7 2330 	str.w	r2, [r7, #816]	; 0x330
 8001d5a:	f8d7 2334 	ldr.w	r2, [r7, #820]	; 0x334
 8001d5e:	4413      	add	r3, r2
 8001d60:	f8c7 3334 	str.w	r3, [r7, #820]	; 0x334
 8001d64:	e9d7 45cc 	ldrd	r4, r5, [r7, #816]	; 0x330
 8001d68:	4622      	mov	r2, r4
 8001d6a:	462b      	mov	r3, r5
 8001d6c:	f04f 0000 	mov.w	r0, #0
 8001d70:	f04f 0100 	mov.w	r1, #0
 8001d74:	0099      	lsls	r1, r3, #2
 8001d76:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 8001d7a:	0090      	lsls	r0, r2, #2
 8001d7c:	4602      	mov	r2, r0
 8001d7e:	460b      	mov	r3, r1
 8001d80:	4621      	mov	r1, r4
 8001d82:	1851      	adds	r1, r2, r1
 8001d84:	f8c7 1130 	str.w	r1, [r7, #304]	; 0x130
 8001d88:	4629      	mov	r1, r5
 8001d8a:	eb43 0101 	adc.w	r1, r3, r1
 8001d8e:	f8c7 1134 	str.w	r1, [r7, #308]	; 0x134
 8001d92:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8001d96:	f04f 0300 	mov.w	r3, #0
 8001d9a:	e9d7 014c 	ldrd	r0, r1, [r7, #304]	; 0x130
 8001d9e:	f7fe fc83 	bl	80006a8 <__aeabi_uldivmod>
 8001da2:	4602      	mov	r2, r0
 8001da4:	460b      	mov	r3, r1
 8001da6:	f112 010a 	adds.w	r1, r2, #10
 8001daa:	f8c7 10d0 	str.w	r1, [r7, #208]	; 0xd0
 8001dae:	f143 0300 	adc.w	r3, r3, #0
 8001db2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8001db6:	4b08      	ldr	r3, [pc, #32]	; (8001dd8 <Set_Random_Motion_Values+0x10d8>)
 8001db8:	689b      	ldr	r3, [r3, #8]
 8001dba:	461a      	mov	r2, r3
 8001dbc:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8001dc0:	4413      	add	r3, r2
 8001dc2:	461a      	mov	r2, r3
 8001dc4:	4b04      	ldr	r3, [pc, #16]	; (8001dd8 <Set_Random_Motion_Values+0x10d8>)
 8001dc6:	609a      	str	r2, [r3, #8]
}
 8001dc8:	bf00      	nop
 8001dca:	f507 777a 	add.w	r7, r7, #1000	; 0x3e8
 8001dce:	46bd      	mov	sp, r7
 8001dd0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001dd4:	2000027c 	.word	0x2000027c
 8001dd8:	20000288 	.word	0x20000288

08001ddc <Reset_Motion_Values>:
 * @brief  Reset values for all motion sensor data
 * @param  None
 * @retval None
 */
static void Reset_Motion_Values(void)
{
 8001ddc:	b480      	push	{r7}
 8001dde:	af00      	add	r7, sp, #0
  x_axes.AXIS_X = (x_axes.AXIS_X)%2000 == 0 ? -x_axes.AXIS_X : 10;
 8001de0:	4b6e      	ldr	r3, [pc, #440]	; (8001f9c <Reset_Motion_Values+0x1c0>)
 8001de2:	681a      	ldr	r2, [r3, #0]
 8001de4:	4b6e      	ldr	r3, [pc, #440]	; (8001fa0 <Reset_Motion_Values+0x1c4>)
 8001de6:	fb83 1302 	smull	r1, r3, r3, r2
 8001dea:	11d9      	asrs	r1, r3, #7
 8001dec:	17d3      	asrs	r3, r2, #31
 8001dee:	1acb      	subs	r3, r1, r3
 8001df0:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8001df4:	fb01 f303 	mul.w	r3, r1, r3
 8001df8:	1ad3      	subs	r3, r2, r3
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d103      	bne.n	8001e06 <Reset_Motion_Values+0x2a>
 8001dfe:	4b67      	ldr	r3, [pc, #412]	; (8001f9c <Reset_Motion_Values+0x1c0>)
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	425b      	negs	r3, r3
 8001e04:	e000      	b.n	8001e08 <Reset_Motion_Values+0x2c>
 8001e06:	230a      	movs	r3, #10
 8001e08:	4a64      	ldr	r2, [pc, #400]	; (8001f9c <Reset_Motion_Values+0x1c0>)
 8001e0a:	6013      	str	r3, [r2, #0]
  x_axes.AXIS_Y = (x_axes.AXIS_Y)%2000 == 0 ? -x_axes.AXIS_Y : -10;
 8001e0c:	4b63      	ldr	r3, [pc, #396]	; (8001f9c <Reset_Motion_Values+0x1c0>)
 8001e0e:	685a      	ldr	r2, [r3, #4]
 8001e10:	4b63      	ldr	r3, [pc, #396]	; (8001fa0 <Reset_Motion_Values+0x1c4>)
 8001e12:	fb83 1302 	smull	r1, r3, r3, r2
 8001e16:	11d9      	asrs	r1, r3, #7
 8001e18:	17d3      	asrs	r3, r2, #31
 8001e1a:	1acb      	subs	r3, r1, r3
 8001e1c:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8001e20:	fb01 f303 	mul.w	r3, r1, r3
 8001e24:	1ad3      	subs	r3, r2, r3
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d103      	bne.n	8001e32 <Reset_Motion_Values+0x56>
 8001e2a:	4b5c      	ldr	r3, [pc, #368]	; (8001f9c <Reset_Motion_Values+0x1c0>)
 8001e2c:	685b      	ldr	r3, [r3, #4]
 8001e2e:	425b      	negs	r3, r3
 8001e30:	e001      	b.n	8001e36 <Reset_Motion_Values+0x5a>
 8001e32:	f06f 0309 	mvn.w	r3, #9
 8001e36:	4a59      	ldr	r2, [pc, #356]	; (8001f9c <Reset_Motion_Values+0x1c0>)
 8001e38:	6053      	str	r3, [r2, #4]
  x_axes.AXIS_Z = (x_axes.AXIS_Z)%2000 == 0 ? -x_axes.AXIS_Z : 10;
 8001e3a:	4b58      	ldr	r3, [pc, #352]	; (8001f9c <Reset_Motion_Values+0x1c0>)
 8001e3c:	689a      	ldr	r2, [r3, #8]
 8001e3e:	4b58      	ldr	r3, [pc, #352]	; (8001fa0 <Reset_Motion_Values+0x1c4>)
 8001e40:	fb83 1302 	smull	r1, r3, r3, r2
 8001e44:	11d9      	asrs	r1, r3, #7
 8001e46:	17d3      	asrs	r3, r2, #31
 8001e48:	1acb      	subs	r3, r1, r3
 8001e4a:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8001e4e:	fb01 f303 	mul.w	r3, r1, r3
 8001e52:	1ad3      	subs	r3, r2, r3
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d103      	bne.n	8001e60 <Reset_Motion_Values+0x84>
 8001e58:	4b50      	ldr	r3, [pc, #320]	; (8001f9c <Reset_Motion_Values+0x1c0>)
 8001e5a:	689b      	ldr	r3, [r3, #8]
 8001e5c:	425b      	negs	r3, r3
 8001e5e:	e000      	b.n	8001e62 <Reset_Motion_Values+0x86>
 8001e60:	230a      	movs	r3, #10
 8001e62:	4a4e      	ldr	r2, [pc, #312]	; (8001f9c <Reset_Motion_Values+0x1c0>)
 8001e64:	6093      	str	r3, [r2, #8]
  g_axes.AXIS_X = (g_axes.AXIS_X)%2000 == 0 ? -g_axes.AXIS_X : 100;
 8001e66:	4b4f      	ldr	r3, [pc, #316]	; (8001fa4 <Reset_Motion_Values+0x1c8>)
 8001e68:	681a      	ldr	r2, [r3, #0]
 8001e6a:	4b4d      	ldr	r3, [pc, #308]	; (8001fa0 <Reset_Motion_Values+0x1c4>)
 8001e6c:	fb83 1302 	smull	r1, r3, r3, r2
 8001e70:	11d9      	asrs	r1, r3, #7
 8001e72:	17d3      	asrs	r3, r2, #31
 8001e74:	1acb      	subs	r3, r1, r3
 8001e76:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8001e7a:	fb01 f303 	mul.w	r3, r1, r3
 8001e7e:	1ad3      	subs	r3, r2, r3
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d103      	bne.n	8001e8c <Reset_Motion_Values+0xb0>
 8001e84:	4b47      	ldr	r3, [pc, #284]	; (8001fa4 <Reset_Motion_Values+0x1c8>)
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	425b      	negs	r3, r3
 8001e8a:	e000      	b.n	8001e8e <Reset_Motion_Values+0xb2>
 8001e8c:	2364      	movs	r3, #100	; 0x64
 8001e8e:	4a45      	ldr	r2, [pc, #276]	; (8001fa4 <Reset_Motion_Values+0x1c8>)
 8001e90:	6013      	str	r3, [r2, #0]
  g_axes.AXIS_Y = (g_axes.AXIS_Y)%2000 == 0 ? -g_axes.AXIS_Y : -100;
 8001e92:	4b44      	ldr	r3, [pc, #272]	; (8001fa4 <Reset_Motion_Values+0x1c8>)
 8001e94:	685a      	ldr	r2, [r3, #4]
 8001e96:	4b42      	ldr	r3, [pc, #264]	; (8001fa0 <Reset_Motion_Values+0x1c4>)
 8001e98:	fb83 1302 	smull	r1, r3, r3, r2
 8001e9c:	11d9      	asrs	r1, r3, #7
 8001e9e:	17d3      	asrs	r3, r2, #31
 8001ea0:	1acb      	subs	r3, r1, r3
 8001ea2:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8001ea6:	fb01 f303 	mul.w	r3, r1, r3
 8001eaa:	1ad3      	subs	r3, r2, r3
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d103      	bne.n	8001eb8 <Reset_Motion_Values+0xdc>
 8001eb0:	4b3c      	ldr	r3, [pc, #240]	; (8001fa4 <Reset_Motion_Values+0x1c8>)
 8001eb2:	685b      	ldr	r3, [r3, #4]
 8001eb4:	425b      	negs	r3, r3
 8001eb6:	e001      	b.n	8001ebc <Reset_Motion_Values+0xe0>
 8001eb8:	f06f 0363 	mvn.w	r3, #99	; 0x63
 8001ebc:	4a39      	ldr	r2, [pc, #228]	; (8001fa4 <Reset_Motion_Values+0x1c8>)
 8001ebe:	6053      	str	r3, [r2, #4]
  g_axes.AXIS_Z = (g_axes.AXIS_Z)%2000 == 0 ? -g_axes.AXIS_Z : 100;
 8001ec0:	4b38      	ldr	r3, [pc, #224]	; (8001fa4 <Reset_Motion_Values+0x1c8>)
 8001ec2:	689a      	ldr	r2, [r3, #8]
 8001ec4:	4b36      	ldr	r3, [pc, #216]	; (8001fa0 <Reset_Motion_Values+0x1c4>)
 8001ec6:	fb83 1302 	smull	r1, r3, r3, r2
 8001eca:	11d9      	asrs	r1, r3, #7
 8001ecc:	17d3      	asrs	r3, r2, #31
 8001ece:	1acb      	subs	r3, r1, r3
 8001ed0:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8001ed4:	fb01 f303 	mul.w	r3, r1, r3
 8001ed8:	1ad3      	subs	r3, r2, r3
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d103      	bne.n	8001ee6 <Reset_Motion_Values+0x10a>
 8001ede:	4b31      	ldr	r3, [pc, #196]	; (8001fa4 <Reset_Motion_Values+0x1c8>)
 8001ee0:	689b      	ldr	r3, [r3, #8]
 8001ee2:	425b      	negs	r3, r3
 8001ee4:	e000      	b.n	8001ee8 <Reset_Motion_Values+0x10c>
 8001ee6:	2364      	movs	r3, #100	; 0x64
 8001ee8:	4a2e      	ldr	r2, [pc, #184]	; (8001fa4 <Reset_Motion_Values+0x1c8>)
 8001eea:	6093      	str	r3, [r2, #8]
  m_axes.AXIS_X = (g_axes.AXIS_X)%2000 == 0 ? -m_axes.AXIS_X : 3;
 8001eec:	4b2d      	ldr	r3, [pc, #180]	; (8001fa4 <Reset_Motion_Values+0x1c8>)
 8001eee:	681a      	ldr	r2, [r3, #0]
 8001ef0:	4b2b      	ldr	r3, [pc, #172]	; (8001fa0 <Reset_Motion_Values+0x1c4>)
 8001ef2:	fb83 1302 	smull	r1, r3, r3, r2
 8001ef6:	11d9      	asrs	r1, r3, #7
 8001ef8:	17d3      	asrs	r3, r2, #31
 8001efa:	1acb      	subs	r3, r1, r3
 8001efc:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8001f00:	fb01 f303 	mul.w	r3, r1, r3
 8001f04:	1ad3      	subs	r3, r2, r3
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d103      	bne.n	8001f12 <Reset_Motion_Values+0x136>
 8001f0a:	4b27      	ldr	r3, [pc, #156]	; (8001fa8 <Reset_Motion_Values+0x1cc>)
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	425b      	negs	r3, r3
 8001f10:	e000      	b.n	8001f14 <Reset_Motion_Values+0x138>
 8001f12:	2303      	movs	r3, #3
 8001f14:	4a24      	ldr	r2, [pc, #144]	; (8001fa8 <Reset_Motion_Values+0x1cc>)
 8001f16:	6013      	str	r3, [r2, #0]
  m_axes.AXIS_Y = (g_axes.AXIS_Y)%2000 == 0 ? -m_axes.AXIS_Y : -3;
 8001f18:	4b22      	ldr	r3, [pc, #136]	; (8001fa4 <Reset_Motion_Values+0x1c8>)
 8001f1a:	685a      	ldr	r2, [r3, #4]
 8001f1c:	4b20      	ldr	r3, [pc, #128]	; (8001fa0 <Reset_Motion_Values+0x1c4>)
 8001f1e:	fb83 1302 	smull	r1, r3, r3, r2
 8001f22:	11d9      	asrs	r1, r3, #7
 8001f24:	17d3      	asrs	r3, r2, #31
 8001f26:	1acb      	subs	r3, r1, r3
 8001f28:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8001f2c:	fb01 f303 	mul.w	r3, r1, r3
 8001f30:	1ad3      	subs	r3, r2, r3
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d103      	bne.n	8001f3e <Reset_Motion_Values+0x162>
 8001f36:	4b1c      	ldr	r3, [pc, #112]	; (8001fa8 <Reset_Motion_Values+0x1cc>)
 8001f38:	685b      	ldr	r3, [r3, #4]
 8001f3a:	425b      	negs	r3, r3
 8001f3c:	e001      	b.n	8001f42 <Reset_Motion_Values+0x166>
 8001f3e:	f06f 0302 	mvn.w	r3, #2
 8001f42:	4a19      	ldr	r2, [pc, #100]	; (8001fa8 <Reset_Motion_Values+0x1cc>)
 8001f44:	6053      	str	r3, [r2, #4]
  m_axes.AXIS_Z = (g_axes.AXIS_Z)%2000 == 0 ? -m_axes.AXIS_Z : 3;
 8001f46:	4b17      	ldr	r3, [pc, #92]	; (8001fa4 <Reset_Motion_Values+0x1c8>)
 8001f48:	689a      	ldr	r2, [r3, #8]
 8001f4a:	4b15      	ldr	r3, [pc, #84]	; (8001fa0 <Reset_Motion_Values+0x1c4>)
 8001f4c:	fb83 1302 	smull	r1, r3, r3, r2
 8001f50:	11d9      	asrs	r1, r3, #7
 8001f52:	17d3      	asrs	r3, r2, #31
 8001f54:	1acb      	subs	r3, r1, r3
 8001f56:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8001f5a:	fb01 f303 	mul.w	r3, r1, r3
 8001f5e:	1ad3      	subs	r3, r2, r3
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d103      	bne.n	8001f6c <Reset_Motion_Values+0x190>
 8001f64:	4b10      	ldr	r3, [pc, #64]	; (8001fa8 <Reset_Motion_Values+0x1cc>)
 8001f66:	689b      	ldr	r3, [r3, #8]
 8001f68:	425b      	negs	r3, r3
 8001f6a:	e000      	b.n	8001f6e <Reset_Motion_Values+0x192>
 8001f6c:	2303      	movs	r3, #3
 8001f6e:	4a0e      	ldr	r2, [pc, #56]	; (8001fa8 <Reset_Motion_Values+0x1cc>)
 8001f70:	6093      	str	r3, [r2, #8]
  q_axes.AXIS_X = -q_axes.AXIS_X;
 8001f72:	4b0e      	ldr	r3, [pc, #56]	; (8001fac <Reset_Motion_Values+0x1d0>)
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	425b      	negs	r3, r3
 8001f78:	4a0c      	ldr	r2, [pc, #48]	; (8001fac <Reset_Motion_Values+0x1d0>)
 8001f7a:	6013      	str	r3, [r2, #0]
  q_axes.AXIS_Y = -q_axes.AXIS_Y;
 8001f7c:	4b0b      	ldr	r3, [pc, #44]	; (8001fac <Reset_Motion_Values+0x1d0>)
 8001f7e:	685b      	ldr	r3, [r3, #4]
 8001f80:	425b      	negs	r3, r3
 8001f82:	4a0a      	ldr	r2, [pc, #40]	; (8001fac <Reset_Motion_Values+0x1d0>)
 8001f84:	6053      	str	r3, [r2, #4]
  q_axes.AXIS_Z = -q_axes.AXIS_Z;
 8001f86:	4b09      	ldr	r3, [pc, #36]	; (8001fac <Reset_Motion_Values+0x1d0>)
 8001f88:	689b      	ldr	r3, [r3, #8]
 8001f8a:	425b      	negs	r3, r3
 8001f8c:	4a07      	ldr	r2, [pc, #28]	; (8001fac <Reset_Motion_Values+0x1d0>)
 8001f8e:	6093      	str	r3, [r2, #8]
}
 8001f90:	bf00      	nop
 8001f92:	46bd      	mov	sp, r7
 8001f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f98:	4770      	bx	lr
 8001f9a:	bf00      	nop
 8001f9c:	20000264 	.word	0x20000264
 8001fa0:	10624dd3 	.word	0x10624dd3
 8001fa4:	20000270 	.word	0x20000270
 8001fa8:	2000027c 	.word	0x2000027c
 8001fac:	20000288 	.word	0x20000288

08001fb0 <BSP_PB_Callback>:
  * @brief  BSP Push Button callback
  * @param  Button Specifies the pin connected EXTI line
  * @retval None.
  */
void BSP_PB_Callback(Button_TypeDef Button)
{
 8001fb0:	b480      	push	{r7}
 8001fb2:	b083      	sub	sp, #12
 8001fb4:	af00      	add	r7, sp, #0
 8001fb6:	4603      	mov	r3, r0
 8001fb8:	71fb      	strb	r3, [r7, #7]
  /* Set the User Button flag */
  user_button_pressed = 1;
 8001fba:	4b04      	ldr	r3, [pc, #16]	; (8001fcc <BSP_PB_Callback+0x1c>)
 8001fbc:	2201      	movs	r2, #1
 8001fbe:	701a      	strb	r2, [r3, #0]
}
 8001fc0:	bf00      	nop
 8001fc2:	370c      	adds	r7, #12
 8001fc4:	46bd      	mov	sp, r7
 8001fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fca:	4770      	bx	lr
 8001fcc:	2000022a 	.word	0x2000022a

08001fd0 <Add_HWServW2ST_Service>:
 * @brief  Add the 'HW' service (and the Environmental and AccGyr characteristics).
 * @param  None
 * @retval tBleStatus Status
 */
tBleStatus Add_HWServW2ST_Service(void)
{
 8001fd0:	b590      	push	{r4, r7, lr}
 8001fd2:	b08d      	sub	sp, #52	; 0x34
 8001fd4:	af06      	add	r7, sp, #24
  tBleStatus ret;
  uint8_t uuid[16];

  /* Add_HWServW2ST_Service */
  COPY_HW_SENS_W2ST_SERVICE_UUID(uuid);
 8001fd6:	231b      	movs	r3, #27
 8001fd8:	713b      	strb	r3, [r7, #4]
 8001fda:	23c5      	movs	r3, #197	; 0xc5
 8001fdc:	717b      	strb	r3, [r7, #5]
 8001fde:	23d5      	movs	r3, #213	; 0xd5
 8001fe0:	71bb      	strb	r3, [r7, #6]
 8001fe2:	23a5      	movs	r3, #165	; 0xa5
 8001fe4:	71fb      	strb	r3, [r7, #7]
 8001fe6:	2302      	movs	r3, #2
 8001fe8:	723b      	strb	r3, [r7, #8]
 8001fea:	2300      	movs	r3, #0
 8001fec:	727b      	strb	r3, [r7, #9]
 8001fee:	23b4      	movs	r3, #180	; 0xb4
 8001ff0:	72bb      	strb	r3, [r7, #10]
 8001ff2:	239a      	movs	r3, #154	; 0x9a
 8001ff4:	72fb      	strb	r3, [r7, #11]
 8001ff6:	23e1      	movs	r3, #225	; 0xe1
 8001ff8:	733b      	strb	r3, [r7, #12]
 8001ffa:	2311      	movs	r3, #17
 8001ffc:	737b      	strb	r3, [r7, #13]
 8001ffe:	2301      	movs	r3, #1
 8002000:	73bb      	strb	r3, [r7, #14]
 8002002:	2300      	movs	r3, #0
 8002004:	73fb      	strb	r3, [r7, #15]
 8002006:	2300      	movs	r3, #0
 8002008:	743b      	strb	r3, [r7, #16]
 800200a:	2300      	movs	r3, #0
 800200c:	747b      	strb	r3, [r7, #17]
 800200e:	2300      	movs	r3, #0
 8002010:	74bb      	strb	r3, [r7, #18]
 8002012:	2300      	movs	r3, #0
 8002014:	74fb      	strb	r3, [r7, #19]
  BLUENRG_memcpy(&service_uuid.Service_UUID_128, uuid, 16);
 8002016:	4b52      	ldr	r3, [pc, #328]	; (8002160 <Add_HWServW2ST_Service+0x190>)
 8002018:	461c      	mov	r4, r3
 800201a:	1d3b      	adds	r3, r7, #4
 800201c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800201e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  ret = aci_gatt_add_serv(UUID_TYPE_128, service_uuid.Service_UUID_128, PRIMARY_SERVICE,
 8002022:	4b50      	ldr	r3, [pc, #320]	; (8002164 <Add_HWServW2ST_Service+0x194>)
 8002024:	9300      	str	r3, [sp, #0]
 8002026:	2310      	movs	r3, #16
 8002028:	2201      	movs	r2, #1
 800202a:	494d      	ldr	r1, [pc, #308]	; (8002160 <Add_HWServW2ST_Service+0x190>)
 800202c:	2002      	movs	r0, #2
 800202e:	f00c fac0 	bl	800e5b2 <aci_gatt_add_serv>
 8002032:	4603      	mov	r3, r0
 8002034:	75fb      	strb	r3, [r7, #23]
                          1+3*5, &HWServW2STHandle);
  if (ret != BLE_STATUS_SUCCESS)
 8002036:	7dfb      	ldrb	r3, [r7, #23]
 8002038:	2b00      	cmp	r3, #0
 800203a:	d001      	beq.n	8002040 <Add_HWServW2ST_Service+0x70>
    return BLE_STATUS_ERROR;
 800203c:	2347      	movs	r3, #71	; 0x47
 800203e:	e08a      	b.n	8002156 <Add_HWServW2ST_Service+0x186>

  /* Fill the Environmental BLE Characteristc */
  COPY_ENVIRONMENTAL_W2ST_CHAR_UUID(uuid);
 8002040:	231b      	movs	r3, #27
 8002042:	713b      	strb	r3, [r7, #4]
 8002044:	23c5      	movs	r3, #197	; 0xc5
 8002046:	717b      	strb	r3, [r7, #5]
 8002048:	23d5      	movs	r3, #213	; 0xd5
 800204a:	71bb      	strb	r3, [r7, #6]
 800204c:	23a5      	movs	r3, #165	; 0xa5
 800204e:	71fb      	strb	r3, [r7, #7]
 8002050:	2302      	movs	r3, #2
 8002052:	723b      	strb	r3, [r7, #8]
 8002054:	2300      	movs	r3, #0
 8002056:	727b      	strb	r3, [r7, #9]
 8002058:	2336      	movs	r3, #54	; 0x36
 800205a:	72bb      	strb	r3, [r7, #10]
 800205c:	23ac      	movs	r3, #172	; 0xac
 800205e:	72fb      	strb	r3, [r7, #11]
 8002060:	23e1      	movs	r3, #225	; 0xe1
 8002062:	733b      	strb	r3, [r7, #12]
 8002064:	2311      	movs	r3, #17
 8002066:	737b      	strb	r3, [r7, #13]
 8002068:	2301      	movs	r3, #1
 800206a:	73bb      	strb	r3, [r7, #14]
 800206c:	2300      	movs	r3, #0
 800206e:	73fb      	strb	r3, [r7, #15]
 8002070:	2300      	movs	r3, #0
 8002072:	743b      	strb	r3, [r7, #16]
 8002074:	2300      	movs	r3, #0
 8002076:	747b      	strb	r3, [r7, #17]
 8002078:	2300      	movs	r3, #0
 800207a:	74bb      	strb	r3, [r7, #18]
 800207c:	2300      	movs	r3, #0
 800207e:	74fb      	strb	r3, [r7, #19]
  uuid[14] |= 0x04; /* One Temperature value*/
 8002080:	7cbb      	ldrb	r3, [r7, #18]
 8002082:	f043 0304 	orr.w	r3, r3, #4
 8002086:	b2db      	uxtb	r3, r3
 8002088:	74bb      	strb	r3, [r7, #18]
  uuid[14] |= 0x10; /* Pressure value*/
 800208a:	7cbb      	ldrb	r3, [r7, #18]
 800208c:	f043 0310 	orr.w	r3, r3, #16
 8002090:	b2db      	uxtb	r3, r3
 8002092:	74bb      	strb	r3, [r7, #18]
  BLUENRG_memcpy(&char_uuid.Char_UUID_128, uuid, 16);
 8002094:	4b34      	ldr	r3, [pc, #208]	; (8002168 <Add_HWServW2ST_Service+0x198>)
 8002096:	461c      	mov	r4, r3
 8002098:	1d3b      	adds	r3, r7, #4
 800209a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800209c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  ret =  aci_gatt_add_char(HWServW2STHandle, UUID_TYPE_128, char_uuid.Char_UUID_128,
 80020a0:	4b30      	ldr	r3, [pc, #192]	; (8002164 <Add_HWServW2ST_Service+0x194>)
 80020a2:	8818      	ldrh	r0, [r3, #0]
 80020a4:	4b31      	ldr	r3, [pc, #196]	; (800216c <Add_HWServW2ST_Service+0x19c>)
 80020a6:	9305      	str	r3, [sp, #20]
 80020a8:	2300      	movs	r3, #0
 80020aa:	9304      	str	r3, [sp, #16]
 80020ac:	2310      	movs	r3, #16
 80020ae:	9303      	str	r3, [sp, #12]
 80020b0:	2304      	movs	r3, #4
 80020b2:	9302      	str	r3, [sp, #8]
 80020b4:	2300      	movs	r3, #0
 80020b6:	9301      	str	r3, [sp, #4]
 80020b8:	2312      	movs	r3, #18
 80020ba:	9300      	str	r3, [sp, #0]
 80020bc:	2308      	movs	r3, #8
 80020be:	4a2a      	ldr	r2, [pc, #168]	; (8002168 <Add_HWServW2ST_Service+0x198>)
 80020c0:	2102      	movs	r1, #2
 80020c2:	f00c faff 	bl	800e6c4 <aci_gatt_add_char>
 80020c6:	4603      	mov	r3, r0
 80020c8:	75fb      	strb	r3, [r7, #23]
                           2+2+4,
                           CHAR_PROP_NOTIFY|CHAR_PROP_READ,
                           ATTR_PERMISSION_NONE,
                           GATT_NOTIFY_READ_REQ_AND_WAIT_FOR_APPL_RESP,
                           16, 0, &EnvironmentalCharHandle);
  if (ret != BLE_STATUS_SUCCESS)
 80020ca:	7dfb      	ldrb	r3, [r7, #23]
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d001      	beq.n	80020d4 <Add_HWServW2ST_Service+0x104>
    return BLE_STATUS_ERROR;
 80020d0:	2347      	movs	r3, #71	; 0x47
 80020d2:	e040      	b.n	8002156 <Add_HWServW2ST_Service+0x186>

  /* Fill the AccGyroMag BLE Characteristc */
  COPY_ACC_GYRO_MAG_W2ST_CHAR_UUID(uuid);
 80020d4:	231b      	movs	r3, #27
 80020d6:	713b      	strb	r3, [r7, #4]
 80020d8:	23c5      	movs	r3, #197	; 0xc5
 80020da:	717b      	strb	r3, [r7, #5]
 80020dc:	23d5      	movs	r3, #213	; 0xd5
 80020de:	71bb      	strb	r3, [r7, #6]
 80020e0:	23a5      	movs	r3, #165	; 0xa5
 80020e2:	71fb      	strb	r3, [r7, #7]
 80020e4:	2302      	movs	r3, #2
 80020e6:	723b      	strb	r3, [r7, #8]
 80020e8:	2300      	movs	r3, #0
 80020ea:	727b      	strb	r3, [r7, #9]
 80020ec:	2336      	movs	r3, #54	; 0x36
 80020ee:	72bb      	strb	r3, [r7, #10]
 80020f0:	23ac      	movs	r3, #172	; 0xac
 80020f2:	72fb      	strb	r3, [r7, #11]
 80020f4:	23e1      	movs	r3, #225	; 0xe1
 80020f6:	733b      	strb	r3, [r7, #12]
 80020f8:	2311      	movs	r3, #17
 80020fa:	737b      	strb	r3, [r7, #13]
 80020fc:	2301      	movs	r3, #1
 80020fe:	73bb      	strb	r3, [r7, #14]
 8002100:	2300      	movs	r3, #0
 8002102:	73fb      	strb	r3, [r7, #15]
 8002104:	2300      	movs	r3, #0
 8002106:	743b      	strb	r3, [r7, #16]
 8002108:	2300      	movs	r3, #0
 800210a:	747b      	strb	r3, [r7, #17]
 800210c:	23e0      	movs	r3, #224	; 0xe0
 800210e:	74bb      	strb	r3, [r7, #18]
 8002110:	2300      	movs	r3, #0
 8002112:	74fb      	strb	r3, [r7, #19]
  BLUENRG_memcpy(&char_uuid.Char_UUID_128, uuid, 16);
 8002114:	4b14      	ldr	r3, [pc, #80]	; (8002168 <Add_HWServW2ST_Service+0x198>)
 8002116:	461c      	mov	r4, r3
 8002118:	1d3b      	adds	r3, r7, #4
 800211a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800211c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  ret =  aci_gatt_add_char(HWServW2STHandle, UUID_TYPE_128, char_uuid.Char_UUID_128,
 8002120:	4b10      	ldr	r3, [pc, #64]	; (8002164 <Add_HWServW2ST_Service+0x194>)
 8002122:	8818      	ldrh	r0, [r3, #0]
 8002124:	4b12      	ldr	r3, [pc, #72]	; (8002170 <Add_HWServW2ST_Service+0x1a0>)
 8002126:	9305      	str	r3, [sp, #20]
 8002128:	2300      	movs	r3, #0
 800212a:	9304      	str	r3, [sp, #16]
 800212c:	2310      	movs	r3, #16
 800212e:	9303      	str	r3, [sp, #12]
 8002130:	2304      	movs	r3, #4
 8002132:	9302      	str	r3, [sp, #8]
 8002134:	2300      	movs	r3, #0
 8002136:	9301      	str	r3, [sp, #4]
 8002138:	2310      	movs	r3, #16
 800213a:	9300      	str	r3, [sp, #0]
 800213c:	2314      	movs	r3, #20
 800213e:	4a0a      	ldr	r2, [pc, #40]	; (8002168 <Add_HWServW2ST_Service+0x198>)
 8002140:	2102      	movs	r1, #2
 8002142:	f00c fabf 	bl	800e6c4 <aci_gatt_add_char>
 8002146:	4603      	mov	r3, r0
 8002148:	75fb      	strb	r3, [r7, #23]
                           2+3*3*2,
                           CHAR_PROP_NOTIFY,
                           ATTR_PERMISSION_NONE,
                           GATT_NOTIFY_READ_REQ_AND_WAIT_FOR_APPL_RESP,
                           16, 0, &AccGyroMagCharHandle);
  if (ret != BLE_STATUS_SUCCESS)
 800214a:	7dfb      	ldrb	r3, [r7, #23]
 800214c:	2b00      	cmp	r3, #0
 800214e:	d001      	beq.n	8002154 <Add_HWServW2ST_Service+0x184>
    return BLE_STATUS_ERROR;
 8002150:	2347      	movs	r3, #71	; 0x47
 8002152:	e000      	b.n	8002156 <Add_HWServW2ST_Service+0x186>

  return BLE_STATUS_SUCCESS;
 8002154:	2300      	movs	r3, #0
}
 8002156:	4618      	mov	r0, r3
 8002158:	371c      	adds	r7, #28
 800215a:	46bd      	mov	sp, r7
 800215c:	bd90      	pop	{r4, r7, pc}
 800215e:	bf00      	nop
 8002160:	2000023c 	.word	0x2000023c
 8002164:	20000230 	.word	0x20000230
 8002168:	2000024c 	.word	0x2000024c
 800216c:	20000232 	.word	0x20000232
 8002170:	20000234 	.word	0x20000234

08002174 <Add_SWServW2ST_Service>:
 * @brief  Add the SW Feature service using a vendor specific profile
 * @param  None
 * @retval tBleStatus Status
 */
tBleStatus Add_SWServW2ST_Service(void)
{
 8002174:	b590      	push	{r4, r7, lr}
 8002176:	b08d      	sub	sp, #52	; 0x34
 8002178:	af06      	add	r7, sp, #24
  tBleStatus ret;
  int32_t NumberOfRecords=1;
 800217a:	2301      	movs	r3, #1
 800217c:	617b      	str	r3, [r7, #20]
  uint8_t uuid[16];

  COPY_SW_SENS_W2ST_SERVICE_UUID(uuid);
 800217e:	231b      	movs	r3, #27
 8002180:	703b      	strb	r3, [r7, #0]
 8002182:	23c5      	movs	r3, #197	; 0xc5
 8002184:	707b      	strb	r3, [r7, #1]
 8002186:	23d5      	movs	r3, #213	; 0xd5
 8002188:	70bb      	strb	r3, [r7, #2]
 800218a:	23a5      	movs	r3, #165	; 0xa5
 800218c:	70fb      	strb	r3, [r7, #3]
 800218e:	2302      	movs	r3, #2
 8002190:	713b      	strb	r3, [r7, #4]
 8002192:	2300      	movs	r3, #0
 8002194:	717b      	strb	r3, [r7, #5]
 8002196:	23b4      	movs	r3, #180	; 0xb4
 8002198:	71bb      	strb	r3, [r7, #6]
 800219a:	239a      	movs	r3, #154	; 0x9a
 800219c:	71fb      	strb	r3, [r7, #7]
 800219e:	23e1      	movs	r3, #225	; 0xe1
 80021a0:	723b      	strb	r3, [r7, #8]
 80021a2:	2311      	movs	r3, #17
 80021a4:	727b      	strb	r3, [r7, #9]
 80021a6:	2302      	movs	r3, #2
 80021a8:	72bb      	strb	r3, [r7, #10]
 80021aa:	2300      	movs	r3, #0
 80021ac:	72fb      	strb	r3, [r7, #11]
 80021ae:	2300      	movs	r3, #0
 80021b0:	733b      	strb	r3, [r7, #12]
 80021b2:	2300      	movs	r3, #0
 80021b4:	737b      	strb	r3, [r7, #13]
 80021b6:	2300      	movs	r3, #0
 80021b8:	73bb      	strb	r3, [r7, #14]
 80021ba:	2300      	movs	r3, #0
 80021bc:	73fb      	strb	r3, [r7, #15]
  BLUENRG_memcpy(&service_uuid.Service_UUID_128, uuid, 16);
 80021be:	4b31      	ldr	r3, [pc, #196]	; (8002284 <Add_SWServW2ST_Service+0x110>)
 80021c0:	461c      	mov	r4, r3
 80021c2:	463b      	mov	r3, r7
 80021c4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80021c6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  ret = aci_gatt_add_serv(UUID_TYPE_128, service_uuid.Service_UUID_128, PRIMARY_SERVICE,
 80021ca:	697b      	ldr	r3, [r7, #20]
 80021cc:	b2db      	uxtb	r3, r3
 80021ce:	461a      	mov	r2, r3
 80021d0:	0052      	lsls	r2, r2, #1
 80021d2:	4413      	add	r3, r2
 80021d4:	b2db      	uxtb	r3, r3
 80021d6:	3301      	adds	r3, #1
 80021d8:	b2db      	uxtb	r3, r3
 80021da:	4a2b      	ldr	r2, [pc, #172]	; (8002288 <Add_SWServW2ST_Service+0x114>)
 80021dc:	9200      	str	r2, [sp, #0]
 80021de:	2201      	movs	r2, #1
 80021e0:	4928      	ldr	r1, [pc, #160]	; (8002284 <Add_SWServW2ST_Service+0x110>)
 80021e2:	2002      	movs	r0, #2
 80021e4:	f00c f9e5 	bl	800e5b2 <aci_gatt_add_serv>
 80021e8:	4603      	mov	r3, r0
 80021ea:	74fb      	strb	r3, [r7, #19]
                          1+3*NumberOfRecords, &SWServW2STHandle);

  if (ret != BLE_STATUS_SUCCESS) {
 80021ec:	7cfb      	ldrb	r3, [r7, #19]
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d13f      	bne.n	8002272 <Add_SWServW2ST_Service+0xfe>
    goto fail;
  }

  COPY_QUATERNIONS_W2ST_CHAR_UUID(uuid);
 80021f2:	231b      	movs	r3, #27
 80021f4:	703b      	strb	r3, [r7, #0]
 80021f6:	23c5      	movs	r3, #197	; 0xc5
 80021f8:	707b      	strb	r3, [r7, #1]
 80021fa:	23d5      	movs	r3, #213	; 0xd5
 80021fc:	70bb      	strb	r3, [r7, #2]
 80021fe:	23a5      	movs	r3, #165	; 0xa5
 8002200:	70fb      	strb	r3, [r7, #3]
 8002202:	2302      	movs	r3, #2
 8002204:	713b      	strb	r3, [r7, #4]
 8002206:	2300      	movs	r3, #0
 8002208:	717b      	strb	r3, [r7, #5]
 800220a:	2336      	movs	r3, #54	; 0x36
 800220c:	71bb      	strb	r3, [r7, #6]
 800220e:	23ac      	movs	r3, #172	; 0xac
 8002210:	71fb      	strb	r3, [r7, #7]
 8002212:	23e1      	movs	r3, #225	; 0xe1
 8002214:	723b      	strb	r3, [r7, #8]
 8002216:	2311      	movs	r3, #17
 8002218:	727b      	strb	r3, [r7, #9]
 800221a:	2301      	movs	r3, #1
 800221c:	72bb      	strb	r3, [r7, #10]
 800221e:	2300      	movs	r3, #0
 8002220:	72fb      	strb	r3, [r7, #11]
 8002222:	2300      	movs	r3, #0
 8002224:	733b      	strb	r3, [r7, #12]
 8002226:	2301      	movs	r3, #1
 8002228:	737b      	strb	r3, [r7, #13]
 800222a:	2300      	movs	r3, #0
 800222c:	73bb      	strb	r3, [r7, #14]
 800222e:	2300      	movs	r3, #0
 8002230:	73fb      	strb	r3, [r7, #15]
  BLUENRG_memcpy(&char_uuid.Char_UUID_128, uuid, 16);
 8002232:	4b16      	ldr	r3, [pc, #88]	; (800228c <Add_SWServW2ST_Service+0x118>)
 8002234:	461c      	mov	r4, r3
 8002236:	463b      	mov	r3, r7
 8002238:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800223a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  ret =  aci_gatt_add_char(SWServW2STHandle, UUID_TYPE_128, char_uuid.Char_UUID_128,
 800223e:	4b12      	ldr	r3, [pc, #72]	; (8002288 <Add_SWServW2ST_Service+0x114>)
 8002240:	8818      	ldrh	r0, [r3, #0]
 8002242:	4b13      	ldr	r3, [pc, #76]	; (8002290 <Add_SWServW2ST_Service+0x11c>)
 8002244:	9305      	str	r3, [sp, #20]
 8002246:	2300      	movs	r3, #0
 8002248:	9304      	str	r3, [sp, #16]
 800224a:	2310      	movs	r3, #16
 800224c:	9303      	str	r3, [sp, #12]
 800224e:	2304      	movs	r3, #4
 8002250:	9302      	str	r3, [sp, #8]
 8002252:	2300      	movs	r3, #0
 8002254:	9301      	str	r3, [sp, #4]
 8002256:	2310      	movs	r3, #16
 8002258:	9300      	str	r3, [sp, #0]
 800225a:	2308      	movs	r3, #8
 800225c:	4a0b      	ldr	r2, [pc, #44]	; (800228c <Add_SWServW2ST_Service+0x118>)
 800225e:	2102      	movs	r1, #2
 8002260:	f00c fa30 	bl	800e6c4 <aci_gatt_add_char>
 8002264:	4603      	mov	r3, r0
 8002266:	74fb      	strb	r3, [r7, #19]
                           CHAR_PROP_NOTIFY,
                           ATTR_PERMISSION_NONE,
                           GATT_NOTIFY_READ_REQ_AND_WAIT_FOR_APPL_RESP,
                           16, 0, &QuaternionsCharHandle);

  if (ret != BLE_STATUS_SUCCESS) {
 8002268:	7cfb      	ldrb	r3, [r7, #19]
 800226a:	2b00      	cmp	r3, #0
 800226c:	d103      	bne.n	8002276 <Add_SWServW2ST_Service+0x102>
    goto fail;
  }

  return BLE_STATUS_SUCCESS;
 800226e:	2300      	movs	r3, #0
 8002270:	e003      	b.n	800227a <Add_SWServW2ST_Service+0x106>
    goto fail;
 8002272:	bf00      	nop
 8002274:	e000      	b.n	8002278 <Add_SWServW2ST_Service+0x104>
    goto fail;
 8002276:	bf00      	nop

fail:
  return BLE_STATUS_ERROR;
 8002278:	2347      	movs	r3, #71	; 0x47
}
 800227a:	4618      	mov	r0, r3
 800227c:	371c      	adds	r7, #28
 800227e:	46bd      	mov	sp, r7
 8002280:	bd90      	pop	{r4, r7, pc}
 8002282:	bf00      	nop
 8002284:	2000023c 	.word	0x2000023c
 8002288:	20000236 	.word	0x20000236
 800228c:	2000024c 	.word	0x2000024c
 8002290:	20000238 	.word	0x20000238

08002294 <Acc_Update>:
 * @brief  Update acceleration characteristic value
 * @param  AxesRaw_t structure containing acceleration value in mg.
 * @retval tBleStatus Status
 */
tBleStatus Acc_Update(AxesRaw_t *x_axes, AxesRaw_t *g_axes, AxesRaw_t *m_axes)
{
 8002294:	b580      	push	{r7, lr}
 8002296:	b08c      	sub	sp, #48	; 0x30
 8002298:	af02      	add	r7, sp, #8
 800229a:	60f8      	str	r0, [r7, #12]
 800229c:	60b9      	str	r1, [r7, #8]
 800229e:	607a      	str	r2, [r7, #4]
  uint8_t buff[2+2*3*3];
  tBleStatus ret;

  HOST_TO_LE_16(buff,(HAL_GetTick()>>3));
 80022a0:	f008 ff60 	bl	800b164 <HAL_GetTick>
 80022a4:	4603      	mov	r3, r0
 80022a6:	08db      	lsrs	r3, r3, #3
 80022a8:	b2db      	uxtb	r3, r3
 80022aa:	743b      	strb	r3, [r7, #16]
 80022ac:	f008 ff5a 	bl	800b164 <HAL_GetTick>
 80022b0:	4603      	mov	r3, r0
 80022b2:	0adb      	lsrs	r3, r3, #11
 80022b4:	b2db      	uxtb	r3, r3
 80022b6:	747b      	strb	r3, [r7, #17]

  HOST_TO_LE_16(buff+2,-x_axes->AXIS_Y);
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	685b      	ldr	r3, [r3, #4]
 80022bc:	b2db      	uxtb	r3, r3
 80022be:	425b      	negs	r3, r3
 80022c0:	b2db      	uxtb	r3, r3
 80022c2:	74bb      	strb	r3, [r7, #18]
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	685b      	ldr	r3, [r3, #4]
 80022c8:	425b      	negs	r3, r3
 80022ca:	121b      	asrs	r3, r3, #8
 80022cc:	b2db      	uxtb	r3, r3
 80022ce:	74fb      	strb	r3, [r7, #19]
  HOST_TO_LE_16(buff+4, x_axes->AXIS_X);
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	b2db      	uxtb	r3, r3
 80022d6:	753b      	strb	r3, [r7, #20]
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	121b      	asrs	r3, r3, #8
 80022de:	b2db      	uxtb	r3, r3
 80022e0:	757b      	strb	r3, [r7, #21]
  HOST_TO_LE_16(buff+6,-x_axes->AXIS_Z);
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	689b      	ldr	r3, [r3, #8]
 80022e6:	b2db      	uxtb	r3, r3
 80022e8:	425b      	negs	r3, r3
 80022ea:	b2db      	uxtb	r3, r3
 80022ec:	75bb      	strb	r3, [r7, #22]
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	689b      	ldr	r3, [r3, #8]
 80022f2:	425b      	negs	r3, r3
 80022f4:	121b      	asrs	r3, r3, #8
 80022f6:	b2db      	uxtb	r3, r3
 80022f8:	75fb      	strb	r3, [r7, #23]

  HOST_TO_LE_16(buff+8,g_axes->AXIS_Y);
 80022fa:	68bb      	ldr	r3, [r7, #8]
 80022fc:	685b      	ldr	r3, [r3, #4]
 80022fe:	b2db      	uxtb	r3, r3
 8002300:	763b      	strb	r3, [r7, #24]
 8002302:	68bb      	ldr	r3, [r7, #8]
 8002304:	685b      	ldr	r3, [r3, #4]
 8002306:	121b      	asrs	r3, r3, #8
 8002308:	b2db      	uxtb	r3, r3
 800230a:	767b      	strb	r3, [r7, #25]
  HOST_TO_LE_16(buff+10,g_axes->AXIS_X);
 800230c:	68bb      	ldr	r3, [r7, #8]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	b2db      	uxtb	r3, r3
 8002312:	76bb      	strb	r3, [r7, #26]
 8002314:	68bb      	ldr	r3, [r7, #8]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	121b      	asrs	r3, r3, #8
 800231a:	b2db      	uxtb	r3, r3
 800231c:	76fb      	strb	r3, [r7, #27]
  HOST_TO_LE_16(buff+12,g_axes->AXIS_Z);
 800231e:	68bb      	ldr	r3, [r7, #8]
 8002320:	689b      	ldr	r3, [r3, #8]
 8002322:	b2db      	uxtb	r3, r3
 8002324:	773b      	strb	r3, [r7, #28]
 8002326:	68bb      	ldr	r3, [r7, #8]
 8002328:	689b      	ldr	r3, [r3, #8]
 800232a:	121b      	asrs	r3, r3, #8
 800232c:	b2db      	uxtb	r3, r3
 800232e:	777b      	strb	r3, [r7, #29]

  HOST_TO_LE_16(buff+14,m_axes->AXIS_Y);
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	685b      	ldr	r3, [r3, #4]
 8002334:	b2db      	uxtb	r3, r3
 8002336:	77bb      	strb	r3, [r7, #30]
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	685b      	ldr	r3, [r3, #4]
 800233c:	121b      	asrs	r3, r3, #8
 800233e:	b2db      	uxtb	r3, r3
 8002340:	77fb      	strb	r3, [r7, #31]
  HOST_TO_LE_16(buff+16,m_axes->AXIS_X);
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	b2db      	uxtb	r3, r3
 8002348:	f887 3020 	strb.w	r3, [r7, #32]
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	121b      	asrs	r3, r3, #8
 8002352:	b2db      	uxtb	r3, r3
 8002354:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
  HOST_TO_LE_16(buff+18,m_axes->AXIS_Z);
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	689b      	ldr	r3, [r3, #8]
 800235c:	b2db      	uxtb	r3, r3
 800235e:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	689b      	ldr	r3, [r3, #8]
 8002366:	121b      	asrs	r3, r3, #8
 8002368:	b2db      	uxtb	r3, r3
 800236a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  ret = aci_gatt_update_char_value(HWServW2STHandle, AccGyroMagCharHandle,
 800236e:	4b0c      	ldr	r3, [pc, #48]	; (80023a0 <Acc_Update+0x10c>)
 8002370:	8818      	ldrh	r0, [r3, #0]
 8002372:	4b0c      	ldr	r3, [pc, #48]	; (80023a4 <Acc_Update+0x110>)
 8002374:	8819      	ldrh	r1, [r3, #0]
 8002376:	f107 0310 	add.w	r3, r7, #16
 800237a:	9300      	str	r3, [sp, #0]
 800237c:	2314      	movs	r3, #20
 800237e:	2200      	movs	r2, #0
 8002380:	f00c fa6b 	bl	800e85a <aci_gatt_update_char_value>
 8002384:	4603      	mov	r3, r0
 8002386:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				   0, 2+2*3*3, buff);
  if (ret != BLE_STATUS_SUCCESS){
 800238a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800238e:	2b00      	cmp	r3, #0
 8002390:	d001      	beq.n	8002396 <Acc_Update+0x102>
    PRINTF("Error while updating Acceleration characteristic: 0x%02X\n",ret) ;
    return BLE_STATUS_ERROR ;
 8002392:	2347      	movs	r3, #71	; 0x47
 8002394:	e000      	b.n	8002398 <Acc_Update+0x104>
  }

  return BLE_STATUS_SUCCESS;
 8002396:	2300      	movs	r3, #0
}
 8002398:	4618      	mov	r0, r3
 800239a:	3728      	adds	r7, #40	; 0x28
 800239c:	46bd      	mov	sp, r7
 800239e:	bd80      	pop	{r7, pc}
 80023a0:	20000230 	.word	0x20000230
 80023a4:	20000234 	.word	0x20000234

080023a8 <Quat_Update>:
 * @brief  Update quaternions characteristic value
 * @param  SensorAxes_t *data Structure containing the quaterions
 * @retval tBleStatus      Status
 */
tBleStatus Quat_Update(AxesRaw_t *data)
{
 80023a8:	b580      	push	{r7, lr}
 80023aa:	b088      	sub	sp, #32
 80023ac:	af02      	add	r7, sp, #8
 80023ae:	6078      	str	r0, [r7, #4]
  tBleStatus ret;
  uint8_t buff[2+6*SEND_N_QUATERNIONS];

  HOST_TO_LE_16(buff,(HAL_GetTick()>>3));
 80023b0:	f008 fed8 	bl	800b164 <HAL_GetTick>
 80023b4:	4603      	mov	r3, r0
 80023b6:	08db      	lsrs	r3, r3, #3
 80023b8:	b2db      	uxtb	r3, r3
 80023ba:	733b      	strb	r3, [r7, #12]
 80023bc:	f008 fed2 	bl	800b164 <HAL_GetTick>
 80023c0:	4603      	mov	r3, r0
 80023c2:	0adb      	lsrs	r3, r3, #11
 80023c4:	b2db      	uxtb	r3, r3
 80023c6:	737b      	strb	r3, [r7, #13]

#if SEND_N_QUATERNIONS == 1
  HOST_TO_LE_16(buff+2,data[0].AXIS_X);
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	b2db      	uxtb	r3, r3
 80023ce:	73bb      	strb	r3, [r7, #14]
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	121b      	asrs	r3, r3, #8
 80023d6:	b2db      	uxtb	r3, r3
 80023d8:	73fb      	strb	r3, [r7, #15]
  HOST_TO_LE_16(buff+4,data[0].AXIS_Y);
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	685b      	ldr	r3, [r3, #4]
 80023de:	b2db      	uxtb	r3, r3
 80023e0:	743b      	strb	r3, [r7, #16]
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	685b      	ldr	r3, [r3, #4]
 80023e6:	121b      	asrs	r3, r3, #8
 80023e8:	b2db      	uxtb	r3, r3
 80023ea:	747b      	strb	r3, [r7, #17]
  HOST_TO_LE_16(buff+6,data[0].AXIS_Z);
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	689b      	ldr	r3, [r3, #8]
 80023f0:	b2db      	uxtb	r3, r3
 80023f2:	74bb      	strb	r3, [r7, #18]
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	689b      	ldr	r3, [r3, #8]
 80023f8:	121b      	asrs	r3, r3, #8
 80023fa:	b2db      	uxtb	r3, r3
 80023fc:	74fb      	strb	r3, [r7, #19]
  HOST_TO_LE_16(buff+18,data[2].AXIS_Z);
#else
#error SEND_N_QUATERNIONS could be only 1,2,3
#endif

  ret = aci_gatt_update_char_value(SWServW2STHandle, QuaternionsCharHandle,
 80023fe:	4b0b      	ldr	r3, [pc, #44]	; (800242c <Quat_Update+0x84>)
 8002400:	8818      	ldrh	r0, [r3, #0]
 8002402:	4b0b      	ldr	r3, [pc, #44]	; (8002430 <Quat_Update+0x88>)
 8002404:	8819      	ldrh	r1, [r3, #0]
 8002406:	f107 030c 	add.w	r3, r7, #12
 800240a:	9300      	str	r3, [sp, #0]
 800240c:	2308      	movs	r3, #8
 800240e:	2200      	movs	r2, #0
 8002410:	f00c fa23 	bl	800e85a <aci_gatt_update_char_value>
 8002414:	4603      	mov	r3, r0
 8002416:	75fb      	strb	r3, [r7, #23]
				   0, 2+6*SEND_N_QUATERNIONS, buff);
  if (ret != BLE_STATUS_SUCCESS){
 8002418:	7dfb      	ldrb	r3, [r7, #23]
 800241a:	2b00      	cmp	r3, #0
 800241c:	d001      	beq.n	8002422 <Quat_Update+0x7a>
    PRINTF("Error while updating Sensor Fusion characteristic: 0x%02X\n",ret) ;
    return BLE_STATUS_ERROR ;
 800241e:	2347      	movs	r3, #71	; 0x47
 8002420:	e000      	b.n	8002424 <Quat_Update+0x7c>
  }

  return BLE_STATUS_SUCCESS;
 8002422:	2300      	movs	r3, #0
}
 8002424:	4618      	mov	r0, r3
 8002426:	3718      	adds	r7, #24
 8002428:	46bd      	mov	sp, r7
 800242a:	bd80      	pop	{r7, pc}
 800242c:	20000236 	.word	0x20000236
 8002430:	20000238 	.word	0x20000238

08002434 <Read_Request_CB>:
* Description    : Update the sensor values.
* Input          : Handle of the characteristic to update.
* Return         : None.
*******************************************************************************/
void Read_Request_CB(uint16_t handle)
{
 8002434:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002438:	b08e      	sub	sp, #56	; 0x38
 800243a:	af00      	add	r7, sp, #0
 800243c:	4603      	mov	r3, r0
 800243e:	84fb      	strh	r3, [r7, #38]	; 0x26
  tBleStatus ret;

  if(handle == AccGyroMagCharHandle + 1)
 8002440:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8002442:	4b57      	ldr	r3, [pc, #348]	; (80025a0 <Read_Request_CB+0x16c>)
 8002444:	881b      	ldrh	r3, [r3, #0]
 8002446:	3301      	adds	r3, #1
 8002448:	429a      	cmp	r2, r3
 800244a:	d105      	bne.n	8002458 <Read_Request_CB+0x24>
  {
    Acc_Update(&x_axes, &g_axes, &m_axes);
 800244c:	4a55      	ldr	r2, [pc, #340]	; (80025a4 <Read_Request_CB+0x170>)
 800244e:	4956      	ldr	r1, [pc, #344]	; (80025a8 <Read_Request_CB+0x174>)
 8002450:	4856      	ldr	r0, [pc, #344]	; (80025ac <Read_Request_CB+0x178>)
 8002452:	f7ff ff1f 	bl	8002294 <Acc_Update>
 8002456:	e091      	b.n	800257c <Read_Request_CB+0x148>
  }
  else if (handle == EnvironmentalCharHandle + 1)
 8002458:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800245a:	4b55      	ldr	r3, [pc, #340]	; (80025b0 <Read_Request_CB+0x17c>)
 800245c:	881b      	ldrh	r3, [r3, #0]
 800245e:	3301      	adds	r3, #1
 8002460:	429a      	cmp	r2, r3
 8002462:	f040 808b 	bne.w	800257c <Read_Request_CB+0x148>
  {
    float data_t, data_p;
    data_t = 27.0 + ((uint64_t)rand()*5)/RAND_MAX; //T sensor emulation
 8002466:	f00d f841 	bl	800f4ec <rand>
 800246a:	4603      	mov	r3, r0
 800246c:	17da      	asrs	r2, r3, #31
 800246e:	61bb      	str	r3, [r7, #24]
 8002470:	61fa      	str	r2, [r7, #28]
 8002472:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002476:	f04f 0000 	mov.w	r0, #0
 800247a:	f04f 0100 	mov.w	r1, #0
 800247e:	0099      	lsls	r1, r3, #2
 8002480:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 8002484:	0090      	lsls	r0, r2, #2
 8002486:	4602      	mov	r2, r0
 8002488:	460b      	mov	r3, r1
 800248a:	69b9      	ldr	r1, [r7, #24]
 800248c:	1851      	adds	r1, r2, r1
 800248e:	6139      	str	r1, [r7, #16]
 8002490:	69f9      	ldr	r1, [r7, #28]
 8002492:	eb43 0101 	adc.w	r1, r3, r1
 8002496:	6179      	str	r1, [r7, #20]
 8002498:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 800249c:	f04f 0300 	mov.w	r3, #0
 80024a0:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80024a4:	f7fe f900 	bl	80006a8 <__aeabi_uldivmod>
 80024a8:	4602      	mov	r2, r0
 80024aa:	460b      	mov	r3, r1
 80024ac:	4610      	mov	r0, r2
 80024ae:	4619      	mov	r1, r3
 80024b0:	f7fe f874 	bl	800059c <__aeabi_ul2d>
 80024b4:	f04f 0200 	mov.w	r2, #0
 80024b8:	4b3e      	ldr	r3, [pc, #248]	; (80025b4 <Read_Request_CB+0x180>)
 80024ba:	f7fd feef 	bl	800029c <__adddf3>
 80024be:	4602      	mov	r2, r0
 80024c0:	460b      	mov	r3, r1
 80024c2:	4610      	mov	r0, r2
 80024c4:	4619      	mov	r1, r3
 80024c6:	f7fe f89f 	bl	8000608 <__aeabi_d2f>
 80024ca:	4603      	mov	r3, r0
 80024cc:	637b      	str	r3, [r7, #52]	; 0x34
    data_p = 1000.0 + ((uint64_t)rand()*100)/RAND_MAX; //P sensor emulation
 80024ce:	f00d f80d 	bl	800f4ec <rand>
 80024d2:	4603      	mov	r3, r0
 80024d4:	17da      	asrs	r2, r3, #31
 80024d6:	4698      	mov	r8, r3
 80024d8:	4691      	mov	r9, r2
 80024da:	4642      	mov	r2, r8
 80024dc:	464b      	mov	r3, r9
 80024de:	1891      	adds	r1, r2, r2
 80024e0:	6039      	str	r1, [r7, #0]
 80024e2:	415b      	adcs	r3, r3
 80024e4:	607b      	str	r3, [r7, #4]
 80024e6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80024ea:	eb12 0408 	adds.w	r4, r2, r8
 80024ee:	eb43 0509 	adc.w	r5, r3, r9
 80024f2:	f04f 0200 	mov.w	r2, #0
 80024f6:	f04f 0300 	mov.w	r3, #0
 80024fa:	016b      	lsls	r3, r5, #5
 80024fc:	ea43 63d4 	orr.w	r3, r3, r4, lsr #27
 8002500:	0162      	lsls	r2, r4, #5
 8002502:	eb14 0a02 	adds.w	sl, r4, r2
 8002506:	eb45 0b03 	adc.w	fp, r5, r3
 800250a:	eb1a 0308 	adds.w	r3, sl, r8
 800250e:	60bb      	str	r3, [r7, #8]
 8002510:	eb4b 0309 	adc.w	r3, fp, r9
 8002514:	60fb      	str	r3, [r7, #12]
 8002516:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 800251a:	f04f 0300 	mov.w	r3, #0
 800251e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002522:	f7fe f8c1 	bl	80006a8 <__aeabi_uldivmod>
 8002526:	4602      	mov	r2, r0
 8002528:	460b      	mov	r3, r1
 800252a:	4610      	mov	r0, r2
 800252c:	4619      	mov	r1, r3
 800252e:	f7fe f835 	bl	800059c <__aeabi_ul2d>
 8002532:	f04f 0200 	mov.w	r2, #0
 8002536:	4b20      	ldr	r3, [pc, #128]	; (80025b8 <Read_Request_CB+0x184>)
 8002538:	f7fd feb0 	bl	800029c <__adddf3>
 800253c:	4602      	mov	r2, r0
 800253e:	460b      	mov	r3, r1
 8002540:	4610      	mov	r0, r2
 8002542:	4619      	mov	r1, r3
 8002544:	f7fe f860 	bl	8000608 <__aeabi_d2f>
 8002548:	4603      	mov	r3, r0
 800254a:	633b      	str	r3, [r7, #48]	; 0x30
    BlueMS_Environmental_Update((int32_t)(data_p *100), (int16_t)(data_t * 10));
 800254c:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8002550:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 80025bc <Read_Request_CB+0x188>
 8002554:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002558:	eefd 6ae7 	vcvt.s32.f32	s13, s15
 800255c:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8002560:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8002564:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002568:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800256c:	ee17 3a90 	vmov	r3, s15
 8002570:	b21b      	sxth	r3, r3
 8002572:	4619      	mov	r1, r3
 8002574:	ee16 0a90 	vmov	r0, s13
 8002578:	f000 f824 	bl	80025c4 <BlueMS_Environmental_Update>
  }

  if(connection_handle !=0)
 800257c:	4b10      	ldr	r3, [pc, #64]	; (80025c0 <Read_Request_CB+0x18c>)
 800257e:	881b      	ldrh	r3, [r3, #0]
 8002580:	2b00      	cmp	r3, #0
 8002582:	d007      	beq.n	8002594 <Read_Request_CB+0x160>
  {
    ret = aci_gatt_allow_read(connection_handle);
 8002584:	4b0e      	ldr	r3, [pc, #56]	; (80025c0 <Read_Request_CB+0x18c>)
 8002586:	881b      	ldrh	r3, [r3, #0]
 8002588:	4618      	mov	r0, r3
 800258a:	f00c f9f6 	bl	800e97a <aci_gatt_allow_read>
 800258e:	4603      	mov	r3, r0
 8002590:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (ret != BLE_STATUS_SUCCESS)
    {
      PRINTF("aci_gatt_allow_read() failed: 0x%02x\r\n", ret);
    }
  }
}
 8002594:	bf00      	nop
 8002596:	3738      	adds	r7, #56	; 0x38
 8002598:	46bd      	mov	sp, r7
 800259a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800259e:	bf00      	nop
 80025a0:	20000234 	.word	0x20000234
 80025a4:	2000027c 	.word	0x2000027c
 80025a8:	20000270 	.word	0x20000270
 80025ac:	20000264 	.word	0x20000264
 80025b0:	20000232 	.word	0x20000232
 80025b4:	403b0000 	.word	0x403b0000
 80025b8:	408f4000 	.word	0x408f4000
 80025bc:	42c80000 	.word	0x42c80000
 80025c0:	2000025c 	.word	0x2000025c

080025c4 <BlueMS_Environmental_Update>:

tBleStatus BlueMS_Environmental_Update(int32_t press, int16_t temp)
{
 80025c4:	b580      	push	{r7, lr}
 80025c6:	b088      	sub	sp, #32
 80025c8:	af02      	add	r7, sp, #8
 80025ca:	6078      	str	r0, [r7, #4]
 80025cc:	460b      	mov	r3, r1
 80025ce:	807b      	strh	r3, [r7, #2]
  tBleStatus ret;
  uint8_t buff[8];
  HOST_TO_LE_16(buff, HAL_GetTick()>>3);
 80025d0:	f008 fdc8 	bl	800b164 <HAL_GetTick>
 80025d4:	4603      	mov	r3, r0
 80025d6:	08db      	lsrs	r3, r3, #3
 80025d8:	b2db      	uxtb	r3, r3
 80025da:	733b      	strb	r3, [r7, #12]
 80025dc:	f008 fdc2 	bl	800b164 <HAL_GetTick>
 80025e0:	4603      	mov	r3, r0
 80025e2:	0adb      	lsrs	r3, r3, #11
 80025e4:	b2db      	uxtb	r3, r3
 80025e6:	737b      	strb	r3, [r7, #13]

  HOST_TO_LE_32(buff+2,press);
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	b2db      	uxtb	r3, r3
 80025ec:	73bb      	strb	r3, [r7, #14]
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	121b      	asrs	r3, r3, #8
 80025f2:	b2db      	uxtb	r3, r3
 80025f4:	73fb      	strb	r3, [r7, #15]
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	141b      	asrs	r3, r3, #16
 80025fa:	b2db      	uxtb	r3, r3
 80025fc:	743b      	strb	r3, [r7, #16]
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	161b      	asrs	r3, r3, #24
 8002602:	b2db      	uxtb	r3, r3
 8002604:	747b      	strb	r3, [r7, #17]
  HOST_TO_LE_16(buff+6,temp);
 8002606:	887b      	ldrh	r3, [r7, #2]
 8002608:	b2db      	uxtb	r3, r3
 800260a:	74bb      	strb	r3, [r7, #18]
 800260c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8002610:	121b      	asrs	r3, r3, #8
 8002612:	b21b      	sxth	r3, r3
 8002614:	b2db      	uxtb	r3, r3
 8002616:	74fb      	strb	r3, [r7, #19]

  ret = aci_gatt_update_char_value(HWServW2STHandle, EnvironmentalCharHandle,
 8002618:	4b0b      	ldr	r3, [pc, #44]	; (8002648 <BlueMS_Environmental_Update+0x84>)
 800261a:	8818      	ldrh	r0, [r3, #0]
 800261c:	4b0b      	ldr	r3, [pc, #44]	; (800264c <BlueMS_Environmental_Update+0x88>)
 800261e:	8819      	ldrh	r1, [r3, #0]
 8002620:	f107 030c 	add.w	r3, r7, #12
 8002624:	9300      	str	r3, [sp, #0]
 8002626:	2308      	movs	r3, #8
 8002628:	2200      	movs	r2, #0
 800262a:	f00c f916 	bl	800e85a <aci_gatt_update_char_value>
 800262e:	4603      	mov	r3, r0
 8002630:	75fb      	strb	r3, [r7, #23]
                                   0, 8, buff);

  if (ret != BLE_STATUS_SUCCESS){
 8002632:	7dfb      	ldrb	r3, [r7, #23]
 8002634:	2b00      	cmp	r3, #0
 8002636:	d001      	beq.n	800263c <BlueMS_Environmental_Update+0x78>
    PRINTF("Error while updating TEMP characteristic: 0x%04X\n",ret) ;
    return BLE_STATUS_ERROR ;
 8002638:	2347      	movs	r3, #71	; 0x47
 800263a:	e000      	b.n	800263e <BlueMS_Environmental_Update+0x7a>
  }

  return BLE_STATUS_SUCCESS;
 800263c:	2300      	movs	r3, #0
}
 800263e:	4618      	mov	r0, r3
 8002640:	3718      	adds	r7, #24
 8002642:	46bd      	mov	sp, r7
 8002644:	bd80      	pop	{r7, pc}
 8002646:	bf00      	nop
 8002648:	20000230 	.word	0x20000230
 800264c:	20000232 	.word	0x20000232

08002650 <Set_DeviceConnectable>:
 * Input          : None.
 * Output         : None.
 * Return         : None.
 *******************************************************************************/
void Set_DeviceConnectable(void)
{
 8002650:	b580      	push	{r7, lr}
 8002652:	b092      	sub	sp, #72	; 0x48
 8002654:	af08      	add	r7, sp, #32
  uint8_t ret;
  const char local_name[] = {AD_TYPE_COMPLETE_LOCAL_NAME,SENSOR_DEMO_NAME};
 8002656:	4a36      	ldr	r2, [pc, #216]	; (8002730 <Set_DeviceConnectable+0xe0>)
 8002658:	f107 031c 	add.w	r3, r7, #28
 800265c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002660:	e883 0003 	stmia.w	r3, {r0, r1}

  uint8_t manuf_data[26] = {
 8002664:	2302      	movs	r3, #2
 8002666:	703b      	strb	r3, [r7, #0]
 8002668:	230a      	movs	r3, #10
 800266a:	707b      	strb	r3, [r7, #1]
 800266c:	2300      	movs	r3, #0
 800266e:	70bb      	strb	r3, [r7, #2]
 8002670:	2308      	movs	r3, #8
 8002672:	70fb      	strb	r3, [r7, #3]
 8002674:	2309      	movs	r3, #9
 8002676:	713b      	strb	r3, [r7, #4]
 8002678:	2342      	movs	r3, #66	; 0x42
 800267a:	717b      	strb	r3, [r7, #5]
 800267c:	236c      	movs	r3, #108	; 0x6c
 800267e:	71bb      	strb	r3, [r7, #6]
 8002680:	2375      	movs	r3, #117	; 0x75
 8002682:	71fb      	strb	r3, [r7, #7]
 8002684:	2365      	movs	r3, #101	; 0x65
 8002686:	723b      	strb	r3, [r7, #8]
 8002688:	234e      	movs	r3, #78	; 0x4e
 800268a:	727b      	strb	r3, [r7, #9]
 800268c:	2352      	movs	r3, #82	; 0x52
 800268e:	72bb      	strb	r3, [r7, #10]
 8002690:	2347      	movs	r3, #71	; 0x47
 8002692:	72fb      	strb	r3, [r7, #11]
 8002694:	230d      	movs	r3, #13
 8002696:	733b      	strb	r3, [r7, #12]
 8002698:	23ff      	movs	r3, #255	; 0xff
 800269a:	737b      	strb	r3, [r7, #13]
 800269c:	2301      	movs	r3, #1
 800269e:	73bb      	strb	r3, [r7, #14]
 80026a0:	2380      	movs	r3, #128	; 0x80
 80026a2:	73fb      	strb	r3, [r7, #15]
 80026a4:	2300      	movs	r3, #0
 80026a6:	743b      	strb	r3, [r7, #16]
 80026a8:	23f4      	movs	r3, #244	; 0xf4
 80026aa:	747b      	strb	r3, [r7, #17]
 80026ac:	2300      	movs	r3, #0
 80026ae:	74bb      	strb	r3, [r7, #18]
 80026b0:	2300      	movs	r3, #0
 80026b2:	74fb      	strb	r3, [r7, #19]
    0x80,
    0x00,
    0xF4, /* ACC+Gyro+Mag 0xE0 | 0x04 Temp | 0x10 Pressure */
    0x00, /*  */
    0x00, /*  */
    bdaddr[5], /* BLE MAC start -MSB first- */
 80026b4:	4b1f      	ldr	r3, [pc, #124]	; (8002734 <Set_DeviceConnectable+0xe4>)
 80026b6:	795b      	ldrb	r3, [r3, #5]
  uint8_t manuf_data[26] = {
 80026b8:	753b      	strb	r3, [r7, #20]
    bdaddr[4],
 80026ba:	4b1e      	ldr	r3, [pc, #120]	; (8002734 <Set_DeviceConnectable+0xe4>)
 80026bc:	791b      	ldrb	r3, [r3, #4]
  uint8_t manuf_data[26] = {
 80026be:	757b      	strb	r3, [r7, #21]
    bdaddr[3],
 80026c0:	4b1c      	ldr	r3, [pc, #112]	; (8002734 <Set_DeviceConnectable+0xe4>)
 80026c2:	78db      	ldrb	r3, [r3, #3]
  uint8_t manuf_data[26] = {
 80026c4:	75bb      	strb	r3, [r7, #22]
    bdaddr[2],
 80026c6:	4b1b      	ldr	r3, [pc, #108]	; (8002734 <Set_DeviceConnectable+0xe4>)
 80026c8:	789b      	ldrb	r3, [r3, #2]
  uint8_t manuf_data[26] = {
 80026ca:	75fb      	strb	r3, [r7, #23]
    bdaddr[1],
 80026cc:	4b19      	ldr	r3, [pc, #100]	; (8002734 <Set_DeviceConnectable+0xe4>)
 80026ce:	785b      	ldrb	r3, [r3, #1]
  uint8_t manuf_data[26] = {
 80026d0:	763b      	strb	r3, [r7, #24]
    bdaddr[0]  /* BLE MAC stop */
 80026d2:	4b18      	ldr	r3, [pc, #96]	; (8002734 <Set_DeviceConnectable+0xe4>)
 80026d4:	781b      	ldrb	r3, [r3, #0]
  uint8_t manuf_data[26] = {
 80026d6:	767b      	strb	r3, [r7, #25]
  };

  manuf_data[18] |= 0x01; /* Sensor Fusion */
 80026d8:	7cbb      	ldrb	r3, [r7, #18]
 80026da:	f043 0301 	orr.w	r3, r3, #1
 80026de:	b2db      	uxtb	r3, r3
 80026e0:	74bb      	strb	r3, [r7, #18]

  hci_le_set_scan_resp_data(0, NULL);
 80026e2:	2100      	movs	r1, #0
 80026e4:	2000      	movs	r0, #0
 80026e6:	f00c faab 	bl	800ec40 <hci_le_set_scan_resp_data>

  PRINTF("Set General Discoverable Mode.\n");

  ret = aci_gap_set_discoverable(ADV_DATA_TYPE,
 80026ea:	2300      	movs	r3, #0
 80026ec:	9306      	str	r3, [sp, #24]
 80026ee:	2300      	movs	r3, #0
 80026f0:	9305      	str	r3, [sp, #20]
 80026f2:	2300      	movs	r3, #0
 80026f4:	9304      	str	r3, [sp, #16]
 80026f6:	2300      	movs	r3, #0
 80026f8:	9303      	str	r3, [sp, #12]
 80026fa:	f107 031c 	add.w	r3, r7, #28
 80026fe:	9302      	str	r3, [sp, #8]
 8002700:	2308      	movs	r3, #8
 8002702:	9301      	str	r3, [sp, #4]
 8002704:	2300      	movs	r3, #0
 8002706:	9300      	str	r3, [sp, #0]
 8002708:	2301      	movs	r3, #1
 800270a:	f44f 62f0 	mov.w	r2, #1920	; 0x780
 800270e:	f44f 61c8 	mov.w	r1, #1600	; 0x640
 8002712:	2000      	movs	r0, #0
 8002714:	f00b fd98 	bl	800e248 <aci_gap_set_discoverable>
 8002718:	4603      	mov	r3, r0
 800271a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
                                (ADV_INTERVAL_MIN_MS*1000)/625,(ADV_INTERVAL_MAX_MS*1000)/625,
                                 STATIC_RANDOM_ADDR, NO_WHITE_LIST_USE,
                                 sizeof(local_name), local_name, 0, NULL, 0, 0);

  aci_gap_update_adv_data(26, manuf_data);
 800271e:	463b      	mov	r3, r7
 8002720:	4619      	mov	r1, r3
 8002722:	201a      	movs	r0, #26
 8002724:	f00b fed1 	bl	800e4ca <aci_gap_update_adv_data>
  {
    PRINTF("aci_gap_set_discoverable() failed: 0x%02x\r\n", ret);
  }
  else
    PRINTF("aci_gap_set_discoverable() --> SUCCESS\r\n");
}
 8002728:	bf00      	nop
 800272a:	3728      	adds	r7, #40	; 0x28
 800272c:	46bd      	mov	sp, r7
 800272e:	bd80      	pop	{r7, pc}
 8002730:	0801057c 	.word	0x0801057c
 8002734:	20000224 	.word	0x20000224

08002738 <user_notify>:
 *         parsed.
 * @param  void* Pointer to the ACI packet
 * @retval None
 */
void user_notify(void * pData)
{
 8002738:	b580      	push	{r7, lr}
 800273a:	b088      	sub	sp, #32
 800273c:	af00      	add	r7, sp, #0
 800273e:	6078      	str	r0, [r7, #4]
  hci_uart_pckt *hci_pckt = pData;
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	61fb      	str	r3, [r7, #28]
  /* obtain event packet */
  hci_event_pckt *event_pckt = (hci_event_pckt*)hci_pckt->data;
 8002744:	69fb      	ldr	r3, [r7, #28]
 8002746:	3301      	adds	r3, #1
 8002748:	61bb      	str	r3, [r7, #24]

  if(hci_pckt->type != HCI_EVENT_PKT)
 800274a:	69fb      	ldr	r3, [r7, #28]
 800274c:	781b      	ldrb	r3, [r3, #0]
 800274e:	2b04      	cmp	r3, #4
 8002750:	d139      	bne.n	80027c6 <user_notify+0x8e>
    return;

  switch(event_pckt->evt){
 8002752:	69bb      	ldr	r3, [r7, #24]
 8002754:	781b      	ldrb	r3, [r3, #0]
 8002756:	2bff      	cmp	r3, #255	; 0xff
 8002758:	d01f      	beq.n	800279a <user_notify+0x62>
 800275a:	2bff      	cmp	r3, #255	; 0xff
 800275c:	dc38      	bgt.n	80027d0 <user_notify+0x98>
 800275e:	2b05      	cmp	r3, #5
 8002760:	d002      	beq.n	8002768 <user_notify+0x30>
 8002762:	2b3e      	cmp	r3, #62	; 0x3e
 8002764:	d003      	beq.n	800276e <user_notify+0x36>
 8002766:	e033      	b.n	80027d0 <user_notify+0x98>

  case EVT_DISCONN_COMPLETE:
    {
      GAP_DisconnectionComplete_CB();
 8002768:	f000 f836 	bl	80027d8 <GAP_DisconnectionComplete_CB>
    }
    break;
 800276c:	e030      	b.n	80027d0 <user_notify+0x98>

  case EVT_LE_META_EVENT:
    {
      evt_le_meta_event *evt = (void *)event_pckt->data;
 800276e:	69bb      	ldr	r3, [r7, #24]
 8002770:	3302      	adds	r3, #2
 8002772:	60fb      	str	r3, [r7, #12]

      switch(evt->subevent){
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	781b      	ldrb	r3, [r3, #0]
 8002778:	2b01      	cmp	r3, #1
 800277a:	d126      	bne.n	80027ca <user_notify+0x92>
      case EVT_LE_CONN_COMPLETE:
        {
          evt_le_connection_complete *cc = (void *)evt->data;
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	3301      	adds	r3, #1
 8002780:	60bb      	str	r3, [r7, #8]
          GAP_ConnectionComplete_CB(cc->peer_bdaddr, cc->handle);
 8002782:	68bb      	ldr	r3, [r7, #8]
 8002784:	1d5a      	adds	r2, r3, #5
 8002786:	68bb      	ldr	r3, [r7, #8]
 8002788:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800278c:	b29b      	uxth	r3, r3
 800278e:	4619      	mov	r1, r3
 8002790:	4610      	mov	r0, r2
 8002792:	f000 f837 	bl	8002804 <GAP_ConnectionComplete_CB>
        }
        break;
 8002796:	bf00      	nop
      }
    }
    break;
 8002798:	e017      	b.n	80027ca <user_notify+0x92>

  case EVT_VENDOR:
    {
      evt_blue_aci *blue_evt = (void*)event_pckt->data;
 800279a:	69bb      	ldr	r3, [r7, #24]
 800279c:	3302      	adds	r3, #2
 800279e:	617b      	str	r3, [r7, #20]
      switch(blue_evt->ecode){
 80027a0:	697b      	ldr	r3, [r7, #20]
 80027a2:	881b      	ldrh	r3, [r3, #0]
 80027a4:	b29b      	uxth	r3, r3
 80027a6:	461a      	mov	r2, r3
 80027a8:	f640 4314 	movw	r3, #3092	; 0xc14
 80027ac:	429a      	cmp	r2, r3
 80027ae:	d10e      	bne.n	80027ce <user_notify+0x96>

      case EVT_BLUE_GATT_READ_PERMIT_REQ:
        {
          evt_gatt_read_permit_req *pr = (void*)blue_evt->data;
 80027b0:	697b      	ldr	r3, [r7, #20]
 80027b2:	3302      	adds	r3, #2
 80027b4:	613b      	str	r3, [r7, #16]
          Read_Request_CB(pr->attr_handle);
 80027b6:	693b      	ldr	r3, [r7, #16]
 80027b8:	885b      	ldrh	r3, [r3, #2]
 80027ba:	b29b      	uxth	r3, r3
 80027bc:	4618      	mov	r0, r3
 80027be:	f7ff fe39 	bl	8002434 <Read_Request_CB>
        }
        break;
 80027c2:	bf00      	nop
      }

    }
    break;
 80027c4:	e003      	b.n	80027ce <user_notify+0x96>
    return;
 80027c6:	bf00      	nop
 80027c8:	e002      	b.n	80027d0 <user_notify+0x98>
    break;
 80027ca:	bf00      	nop
 80027cc:	e000      	b.n	80027d0 <user_notify+0x98>
    break;
 80027ce:	bf00      	nop
  }
}
 80027d0:	3720      	adds	r7, #32
 80027d2:	46bd      	mov	sp, r7
 80027d4:	bd80      	pop	{r7, pc}
	...

080027d8 <GAP_DisconnectionComplete_CB>:
 * @brief  This function is called when the peer device gets disconnected.
 * @param  None
 * @retval None
 */
void GAP_DisconnectionComplete_CB(void)
{
 80027d8:	b480      	push	{r7}
 80027da:	af00      	add	r7, sp, #0
  connected = FALSE;
 80027dc:	4b06      	ldr	r3, [pc, #24]	; (80027f8 <GAP_DisconnectionComplete_CB+0x20>)
 80027de:	2200      	movs	r2, #0
 80027e0:	601a      	str	r2, [r3, #0]
  PRINTF("Disconnected\n");
  /* Make the device connectable again. */
  set_connectable = TRUE;
 80027e2:	4b06      	ldr	r3, [pc, #24]	; (80027fc <GAP_DisconnectionComplete_CB+0x24>)
 80027e4:	2201      	movs	r2, #1
 80027e6:	701a      	strb	r2, [r3, #0]
  notification_enabled = FALSE;
 80027e8:	4b05      	ldr	r3, [pc, #20]	; (8002800 <GAP_DisconnectionComplete_CB+0x28>)
 80027ea:	2200      	movs	r2, #0
 80027ec:	701a      	strb	r2, [r3, #0]
}
 80027ee:	bf00      	nop
 80027f0:	46bd      	mov	sp, r7
 80027f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f6:	4770      	bx	lr
 80027f8:	20000260 	.word	0x20000260
 80027fc:	20000001 	.word	0x20000001
 8002800:	2000025e 	.word	0x2000025e

08002804 <GAP_ConnectionComplete_CB>:
 * @param  uint8_t Address of peer device
 * @param  uint16_t Connection handle
 * @retval None
 */
void GAP_ConnectionComplete_CB(uint8_t addr[6], uint16_t handle)
{
 8002804:	b480      	push	{r7}
 8002806:	b085      	sub	sp, #20
 8002808:	af00      	add	r7, sp, #0
 800280a:	6078      	str	r0, [r7, #4]
 800280c:	460b      	mov	r3, r1
 800280e:	807b      	strh	r3, [r7, #2]
  connected = TRUE;
 8002810:	4b0a      	ldr	r3, [pc, #40]	; (800283c <GAP_ConnectionComplete_CB+0x38>)
 8002812:	2201      	movs	r2, #1
 8002814:	601a      	str	r2, [r3, #0]
  connection_handle = handle;
 8002816:	4a0a      	ldr	r2, [pc, #40]	; (8002840 <GAP_ConnectionComplete_CB+0x3c>)
 8002818:	887b      	ldrh	r3, [r7, #2]
 800281a:	8013      	strh	r3, [r2, #0]

  PRINTF("Connected to device:");
  for(uint32_t i = 5; i > 0; i--){
 800281c:	2305      	movs	r3, #5
 800281e:	60fb      	str	r3, [r7, #12]
 8002820:	e002      	b.n	8002828 <GAP_ConnectionComplete_CB+0x24>
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	3b01      	subs	r3, #1
 8002826:	60fb      	str	r3, [r7, #12]
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	2b00      	cmp	r3, #0
 800282c:	d1f9      	bne.n	8002822 <GAP_ConnectionComplete_CB+0x1e>
    PRINTF("%02X-", addr[i]);
  }
  PRINTF("%02X\n", addr[0]);
}
 800282e:	bf00      	nop
 8002830:	bf00      	nop
 8002832:	3714      	adds	r7, #20
 8002834:	46bd      	mov	sp, r7
 8002836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800283a:	4770      	bx	lr
 800283c:	20000260 	.word	0x20000260
 8002840:	2000025c 	.word	0x2000025c

08002844 <HCI_TL_SPI_Init>:
 *
 * @param  void* Pointer to configuration struct
 * @retval int32_t Status
 */
int32_t HCI_TL_SPI_Init(void* pConf)
{
 8002844:	b580      	push	{r7, lr}
 8002846:	b088      	sub	sp, #32
 8002848:	af00      	add	r7, sp, #0
 800284a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;

  __HAL_RCC_GPIOA_CLK_ENABLE();
 800284c:	2300      	movs	r3, #0
 800284e:	60bb      	str	r3, [r7, #8]
 8002850:	4b1e      	ldr	r3, [pc, #120]	; (80028cc <HCI_TL_SPI_Init+0x88>)
 8002852:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002854:	4a1d      	ldr	r2, [pc, #116]	; (80028cc <HCI_TL_SPI_Init+0x88>)
 8002856:	f043 0301 	orr.w	r3, r3, #1
 800285a:	6313      	str	r3, [r2, #48]	; 0x30
 800285c:	4b1b      	ldr	r3, [pc, #108]	; (80028cc <HCI_TL_SPI_Init+0x88>)
 800285e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002860:	f003 0301 	and.w	r3, r3, #1
 8002864:	60bb      	str	r3, [r7, #8]
 8002866:	68bb      	ldr	r3, [r7, #8]

  /* Configure EXTI Line */
  GPIO_InitStruct.Pin = HCI_TL_SPI_EXTI_PIN;
 8002868:	2301      	movs	r3, #1
 800286a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800286c:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8002870:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002872:	2300      	movs	r3, #0
 8002874:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(HCI_TL_SPI_EXTI_PORT, &GPIO_InitStruct);
 8002876:	f107 030c 	add.w	r3, r7, #12
 800287a:	4619      	mov	r1, r3
 800287c:	4814      	ldr	r0, [pc, #80]	; (80028d0 <HCI_TL_SPI_Init+0x8c>)
 800287e:	f008 fe05 	bl	800b48c <HAL_GPIO_Init>

  /* Configure RESET Line */
  GPIO_InitStruct.Pin =  HCI_TL_RST_PIN ;
 8002882:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002886:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002888:	2301      	movs	r3, #1
 800288a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800288c:	2300      	movs	r3, #0
 800288e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002890:	2300      	movs	r3, #0
 8002892:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(HCI_TL_RST_PORT, &GPIO_InitStruct);
 8002894:	f107 030c 	add.w	r3, r7, #12
 8002898:	4619      	mov	r1, r3
 800289a:	480d      	ldr	r0, [pc, #52]	; (80028d0 <HCI_TL_SPI_Init+0x8c>)
 800289c:	f008 fdf6 	bl	800b48c <HAL_GPIO_Init>

  /* Configure CS */
  GPIO_InitStruct.Pin = HCI_TL_SPI_CS_PIN ;
 80028a0:	2302      	movs	r3, #2
 80028a2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80028a4:	2301      	movs	r3, #1
 80028a6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028a8:	2300      	movs	r3, #0
 80028aa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028ac:	2300      	movs	r3, #0
 80028ae:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(HCI_TL_SPI_CS_PORT, &GPIO_InitStruct);
 80028b0:	f107 030c 	add.w	r3, r7, #12
 80028b4:	4619      	mov	r1, r3
 80028b6:	4806      	ldr	r0, [pc, #24]	; (80028d0 <HCI_TL_SPI_Init+0x8c>)
 80028b8:	f008 fde8 	bl	800b48c <HAL_GPIO_Init>

  return BSP_SPI1_Init();
 80028bc:	f000 fad0 	bl	8002e60 <BSP_SPI1_Init>
 80028c0:	4603      	mov	r3, r0
}
 80028c2:	4618      	mov	r0, r3
 80028c4:	3720      	adds	r7, #32
 80028c6:	46bd      	mov	sp, r7
 80028c8:	bd80      	pop	{r7, pc}
 80028ca:	bf00      	nop
 80028cc:	40023800 	.word	0x40023800
 80028d0:	40020000 	.word	0x40020000

080028d4 <HCI_TL_SPI_DeInit>:
 *
 * @param  None
 * @retval int32_t 0
 */
int32_t HCI_TL_SPI_DeInit(void)
{
 80028d4:	b580      	push	{r7, lr}
 80028d6:	af00      	add	r7, sp, #0
  HAL_GPIO_DeInit(HCI_TL_SPI_EXTI_PORT, HCI_TL_SPI_EXTI_PIN);
 80028d8:	2101      	movs	r1, #1
 80028da:	4807      	ldr	r0, [pc, #28]	; (80028f8 <HCI_TL_SPI_DeInit+0x24>)
 80028dc:	f008 ff5a 	bl	800b794 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN);
 80028e0:	2102      	movs	r1, #2
 80028e2:	4805      	ldr	r0, [pc, #20]	; (80028f8 <HCI_TL_SPI_DeInit+0x24>)
 80028e4:	f008 ff56 	bl	800b794 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(HCI_TL_RST_PORT, HCI_TL_RST_PIN);
 80028e8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80028ec:	4802      	ldr	r0, [pc, #8]	; (80028f8 <HCI_TL_SPI_DeInit+0x24>)
 80028ee:	f008 ff51 	bl	800b794 <HAL_GPIO_DeInit>
  return 0;
 80028f2:	2300      	movs	r3, #0
}
 80028f4:	4618      	mov	r0, r3
 80028f6:	bd80      	pop	{r7, pc}
 80028f8:	40020000 	.word	0x40020000

080028fc <HCI_TL_SPI_Reset>:
 *
 * @param  None
 * @retval int32_t 0
 */
int32_t HCI_TL_SPI_Reset(void)
{
 80028fc:	b580      	push	{r7, lr}
 80028fe:	af00      	add	r7, sp, #0
  // Deselect CS PIN for BlueNRG to avoid spurious commands
  HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_SET);
 8002900:	2201      	movs	r2, #1
 8002902:	2102      	movs	r1, #2
 8002904:	480b      	ldr	r0, [pc, #44]	; (8002934 <HCI_TL_SPI_Reset+0x38>)
 8002906:	f009 f841 	bl	800b98c <HAL_GPIO_WritePin>

  HAL_GPIO_WritePin(HCI_TL_RST_PORT, HCI_TL_RST_PIN, GPIO_PIN_RESET);
 800290a:	2200      	movs	r2, #0
 800290c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002910:	4808      	ldr	r0, [pc, #32]	; (8002934 <HCI_TL_SPI_Reset+0x38>)
 8002912:	f009 f83b 	bl	800b98c <HAL_GPIO_WritePin>
  HAL_Delay(5);
 8002916:	2005      	movs	r0, #5
 8002918:	f008 fc30 	bl	800b17c <HAL_Delay>
  HAL_GPIO_WritePin(HCI_TL_RST_PORT, HCI_TL_RST_PIN, GPIO_PIN_SET);
 800291c:	2201      	movs	r2, #1
 800291e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002922:	4804      	ldr	r0, [pc, #16]	; (8002934 <HCI_TL_SPI_Reset+0x38>)
 8002924:	f009 f832 	bl	800b98c <HAL_GPIO_WritePin>
  HAL_Delay(5);
 8002928:	2005      	movs	r0, #5
 800292a:	f008 fc27 	bl	800b17c <HAL_Delay>
  return 0;
 800292e:	2300      	movs	r3, #0
}
 8002930:	4618      	mov	r0, r3
 8002932:	bd80      	pop	{r7, pc}
 8002934:	40020000 	.word	0x40020000

08002938 <HCI_TL_SPI_Receive>:
 * @param  buffer : Buffer where data from SPI are stored
 * @param  size   : Buffer size
 * @retval int32_t: Number of read bytes
 */
int32_t HCI_TL_SPI_Receive(uint8_t* buffer, uint16_t size)
{
 8002938:	b580      	push	{r7, lr}
 800293a:	b088      	sub	sp, #32
 800293c:	af00      	add	r7, sp, #0
 800293e:	6078      	str	r0, [r7, #4]
 8002940:	460b      	mov	r3, r1
 8002942:	807b      	strh	r3, [r7, #2]
  uint16_t byte_count;
  uint8_t len = 0;
 8002944:	2300      	movs	r3, #0
 8002946:	777b      	strb	r3, [r7, #29]
  uint8_t char_ff = 0xff;
 8002948:	23ff      	movs	r3, #255	; 0xff
 800294a:	773b      	strb	r3, [r7, #28]
  volatile uint8_t read_char;

  uint8_t header_master[HEADER_SIZE] = {0x0b, 0x00, 0x00, 0x00, 0x00};
 800294c:	4a25      	ldr	r2, [pc, #148]	; (80029e4 <HCI_TL_SPI_Receive+0xac>)
 800294e:	f107 0314 	add.w	r3, r7, #20
 8002952:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002956:	6018      	str	r0, [r3, #0]
 8002958:	3304      	adds	r3, #4
 800295a:	7019      	strb	r1, [r3, #0]
  uint8_t header_slave[HEADER_SIZE];

  /* CS reset */
  HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_RESET);
 800295c:	2200      	movs	r2, #0
 800295e:	2102      	movs	r1, #2
 8002960:	4821      	ldr	r0, [pc, #132]	; (80029e8 <HCI_TL_SPI_Receive+0xb0>)
 8002962:	f009 f813 	bl	800b98c <HAL_GPIO_WritePin>

  /* Read the header */
  BSP_SPI1_SendRecv(header_master, header_slave, HEADER_SIZE);
 8002966:	f107 010c 	add.w	r1, r7, #12
 800296a:	f107 0314 	add.w	r3, r7, #20
 800296e:	2205      	movs	r2, #5
 8002970:	4618      	mov	r0, r3
 8002972:	f000 faa5 	bl	8002ec0 <BSP_SPI1_SendRecv>

  if(header_slave[0] == 0x02)
 8002976:	7b3b      	ldrb	r3, [r7, #12]
 8002978:	2b02      	cmp	r3, #2
 800297a:	d129      	bne.n	80029d0 <HCI_TL_SPI_Receive+0x98>
  {
    /* device is ready */
    byte_count = (header_slave[4] << 8)| header_slave[3];
 800297c:	7c3b      	ldrb	r3, [r7, #16]
 800297e:	021b      	lsls	r3, r3, #8
 8002980:	b21a      	sxth	r2, r3
 8002982:	7bfb      	ldrb	r3, [r7, #15]
 8002984:	b21b      	sxth	r3, r3
 8002986:	4313      	orrs	r3, r2
 8002988:	b21b      	sxth	r3, r3
 800298a:	83fb      	strh	r3, [r7, #30]

    if(byte_count > 0)
 800298c:	8bfb      	ldrh	r3, [r7, #30]
 800298e:	2b00      	cmp	r3, #0
 8002990:	d01e      	beq.n	80029d0 <HCI_TL_SPI_Receive+0x98>
    {
      /* avoid to read more data than the size of the buffer */
      if (byte_count > size){
 8002992:	8bfa      	ldrh	r2, [r7, #30]
 8002994:	887b      	ldrh	r3, [r7, #2]
 8002996:	429a      	cmp	r2, r3
 8002998:	d901      	bls.n	800299e <HCI_TL_SPI_Receive+0x66>
        byte_count = size;
 800299a:	887b      	ldrh	r3, [r7, #2]
 800299c:	83fb      	strh	r3, [r7, #30]
      }

      for(len = 0; len < byte_count; len++)
 800299e:	2300      	movs	r3, #0
 80029a0:	777b      	strb	r3, [r7, #29]
 80029a2:	e010      	b.n	80029c6 <HCI_TL_SPI_Receive+0x8e>
      {
        BSP_SPI1_SendRecv(&char_ff, (uint8_t*)&read_char, 1);
 80029a4:	f107 011b 	add.w	r1, r7, #27
 80029a8:	f107 031c 	add.w	r3, r7, #28
 80029ac:	2201      	movs	r2, #1
 80029ae:	4618      	mov	r0, r3
 80029b0:	f000 fa86 	bl	8002ec0 <BSP_SPI1_SendRecv>
        buffer[len] = read_char;
 80029b4:	7f7b      	ldrb	r3, [r7, #29]
 80029b6:	687a      	ldr	r2, [r7, #4]
 80029b8:	4413      	add	r3, r2
 80029ba:	7efa      	ldrb	r2, [r7, #27]
 80029bc:	b2d2      	uxtb	r2, r2
 80029be:	701a      	strb	r2, [r3, #0]
      for(len = 0; len < byte_count; len++)
 80029c0:	7f7b      	ldrb	r3, [r7, #29]
 80029c2:	3301      	adds	r3, #1
 80029c4:	777b      	strb	r3, [r7, #29]
 80029c6:	7f7b      	ldrb	r3, [r7, #29]
 80029c8:	b29b      	uxth	r3, r3
 80029ca:	8bfa      	ldrh	r2, [r7, #30]
 80029cc:	429a      	cmp	r2, r3
 80029ce:	d8e9      	bhi.n	80029a4 <HCI_TL_SPI_Receive+0x6c>
      }
    }
  }
  /* Release CS line */
  HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_SET);
 80029d0:	2201      	movs	r2, #1
 80029d2:	2102      	movs	r1, #2
 80029d4:	4804      	ldr	r0, [pc, #16]	; (80029e8 <HCI_TL_SPI_Receive+0xb0>)
 80029d6:	f008 ffd9 	bl	800b98c <HAL_GPIO_WritePin>
    }
    PRINT_CSV("\n");
  }
#endif

  return len;
 80029da:	7f7b      	ldrb	r3, [r7, #29]
}
 80029dc:	4618      	mov	r0, r3
 80029de:	3720      	adds	r7, #32
 80029e0:	46bd      	mov	sp, r7
 80029e2:	bd80      	pop	{r7, pc}
 80029e4:	08010584 	.word	0x08010584
 80029e8:	40020000 	.word	0x40020000

080029ec <HCI_TL_SPI_Send>:
 * @param  buffer : data buffer to be written
 * @param  size   : size of first data buffer to be written
 * @retval int32_t: Number of read bytes
 */
int32_t HCI_TL_SPI_Send(uint8_t* buffer, uint16_t size)
{
 80029ec:	b580      	push	{r7, lr}
 80029ee:	b088      	sub	sp, #32
 80029f0:	af00      	add	r7, sp, #0
 80029f2:	6078      	str	r0, [r7, #4]
 80029f4:	460b      	mov	r3, r1
 80029f6:	807b      	strh	r3, [r7, #2]
  int32_t result;

  uint8_t header_master[HEADER_SIZE] = {0x0a, 0x00, 0x00, 0x00, 0x00};
 80029f8:	4a23      	ldr	r2, [pc, #140]	; (8002a88 <HCI_TL_SPI_Send+0x9c>)
 80029fa:	f107 0310 	add.w	r3, r7, #16
 80029fe:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002a02:	6018      	str	r0, [r3, #0]
 8002a04:	3304      	adds	r3, #4
 8002a06:	7019      	strb	r1, [r3, #0]
  uint8_t header_slave[HEADER_SIZE];

  static uint8_t read_char_buf[MAX_BUFFER_SIZE];
  uint32_t tickstart = HAL_GetTick();
 8002a08:	f008 fbac 	bl	800b164 <HAL_GetTick>
 8002a0c:	61b8      	str	r0, [r7, #24]

  do
  {
    result = 0;
 8002a0e:	2300      	movs	r3, #0
 8002a10:	61fb      	str	r3, [r7, #28]

    /* CS reset */
    HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_RESET);
 8002a12:	2200      	movs	r2, #0
 8002a14:	2102      	movs	r1, #2
 8002a16:	481d      	ldr	r0, [pc, #116]	; (8002a8c <HCI_TL_SPI_Send+0xa0>)
 8002a18:	f008 ffb8 	bl	800b98c <HAL_GPIO_WritePin>

    /* Read header */
    BSP_SPI1_SendRecv(header_master, header_slave, HEADER_SIZE);
 8002a1c:	f107 0108 	add.w	r1, r7, #8
 8002a20:	f107 0310 	add.w	r3, r7, #16
 8002a24:	2205      	movs	r2, #5
 8002a26:	4618      	mov	r0, r3
 8002a28:	f000 fa4a 	bl	8002ec0 <BSP_SPI1_SendRecv>

    if(header_slave[0] == 0x02)
 8002a2c:	7a3b      	ldrb	r3, [r7, #8]
 8002a2e:	2b02      	cmp	r3, #2
 8002a30:	d10f      	bne.n	8002a52 <HCI_TL_SPI_Send+0x66>
    {
      /* SPI is ready */
      if(header_slave[1] >= size)
 8002a32:	7a7b      	ldrb	r3, [r7, #9]
 8002a34:	b29b      	uxth	r3, r3
 8002a36:	887a      	ldrh	r2, [r7, #2]
 8002a38:	429a      	cmp	r2, r3
 8002a3a:	d806      	bhi.n	8002a4a <HCI_TL_SPI_Send+0x5e>
      {
        BSP_SPI1_SendRecv(buffer, read_char_buf, size);
 8002a3c:	887b      	ldrh	r3, [r7, #2]
 8002a3e:	461a      	mov	r2, r3
 8002a40:	4913      	ldr	r1, [pc, #76]	; (8002a90 <HCI_TL_SPI_Send+0xa4>)
 8002a42:	6878      	ldr	r0, [r7, #4]
 8002a44:	f000 fa3c 	bl	8002ec0 <BSP_SPI1_SendRecv>
 8002a48:	e006      	b.n	8002a58 <HCI_TL_SPI_Send+0x6c>
      }
      else
      {
        /* Buffer is too small */
        result = -2;
 8002a4a:	f06f 0301 	mvn.w	r3, #1
 8002a4e:	61fb      	str	r3, [r7, #28]
 8002a50:	e002      	b.n	8002a58 <HCI_TL_SPI_Send+0x6c>
      }
    } else {
      /* SPI is not ready */
      result = -1;
 8002a52:	f04f 33ff 	mov.w	r3, #4294967295
 8002a56:	61fb      	str	r3, [r7, #28]
    }

    /* Release CS line */
    HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_SET);
 8002a58:	2201      	movs	r2, #1
 8002a5a:	2102      	movs	r1, #2
 8002a5c:	480b      	ldr	r0, [pc, #44]	; (8002a8c <HCI_TL_SPI_Send+0xa0>)
 8002a5e:	f008 ff95 	bl	800b98c <HAL_GPIO_WritePin>

    if((HAL_GetTick() - tickstart) > TIMEOUT_DURATION)
 8002a62:	f008 fb7f 	bl	800b164 <HAL_GetTick>
 8002a66:	4602      	mov	r2, r0
 8002a68:	69bb      	ldr	r3, [r7, #24]
 8002a6a:	1ad3      	subs	r3, r2, r3
 8002a6c:	2b0f      	cmp	r3, #15
 8002a6e:	d903      	bls.n	8002a78 <HCI_TL_SPI_Send+0x8c>
    {
      result = -3;
 8002a70:	f06f 0302 	mvn.w	r3, #2
 8002a74:	61fb      	str	r3, [r7, #28]
      break;
 8002a76:	e002      	b.n	8002a7e <HCI_TL_SPI_Send+0x92>
    }
  } while(result < 0);
 8002a78:	69fb      	ldr	r3, [r7, #28]
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	dbc7      	blt.n	8002a0e <HCI_TL_SPI_Send+0x22>

  return result;
 8002a7e:	69fb      	ldr	r3, [r7, #28]
}
 8002a80:	4618      	mov	r0, r3
 8002a82:	3720      	adds	r7, #32
 8002a84:	46bd      	mov	sp, r7
 8002a86:	bd80      	pop	{r7, pc}
 8002a88:	0801058c 	.word	0x0801058c
 8002a8c:	40020000 	.word	0x40020000
 8002a90:	2000029c 	.word	0x2000029c

08002a94 <IsDataAvailable>:
 *
 * @param  None
 * @retval int32_t: 1 if data are present, 0 otherwise
 */
static int32_t IsDataAvailable(void)
{
 8002a94:	b580      	push	{r7, lr}
 8002a96:	af00      	add	r7, sp, #0
  return (HAL_GPIO_ReadPin(HCI_TL_SPI_EXTI_PORT, HCI_TL_SPI_EXTI_PIN) == GPIO_PIN_SET);
 8002a98:	2101      	movs	r1, #1
 8002a9a:	4805      	ldr	r0, [pc, #20]	; (8002ab0 <IsDataAvailable+0x1c>)
 8002a9c:	f008 ff5e 	bl	800b95c <HAL_GPIO_ReadPin>
 8002aa0:	4603      	mov	r3, r0
 8002aa2:	2b01      	cmp	r3, #1
 8002aa4:	bf0c      	ite	eq
 8002aa6:	2301      	moveq	r3, #1
 8002aa8:	2300      	movne	r3, #0
 8002aaa:	b2db      	uxtb	r3, r3
}
 8002aac:	4618      	mov	r0, r3
 8002aae:	bd80      	pop	{r7, pc}
 8002ab0:	40020000 	.word	0x40020000

08002ab4 <hci_tl_lowlevel_init>:
 *
 * @param  None
 * @retval None
 */
void hci_tl_lowlevel_init(void)
{
 8002ab4:	b580      	push	{r7, lr}
 8002ab6:	b088      	sub	sp, #32
 8002ab8:	af00      	add	r7, sp, #0

  /* USER CODE END hci_tl_lowlevel_init 1 */
  tHciIO fops;

  /* Register IO bus services */
  fops.Init    = HCI_TL_SPI_Init;
 8002aba:	4b13      	ldr	r3, [pc, #76]	; (8002b08 <hci_tl_lowlevel_init+0x54>)
 8002abc:	607b      	str	r3, [r7, #4]
  fops.DeInit  = HCI_TL_SPI_DeInit;
 8002abe:	4b13      	ldr	r3, [pc, #76]	; (8002b0c <hci_tl_lowlevel_init+0x58>)
 8002ac0:	60bb      	str	r3, [r7, #8]
  fops.Send    = HCI_TL_SPI_Send;
 8002ac2:	4b13      	ldr	r3, [pc, #76]	; (8002b10 <hci_tl_lowlevel_init+0x5c>)
 8002ac4:	617b      	str	r3, [r7, #20]
  fops.Receive = HCI_TL_SPI_Receive;
 8002ac6:	4b13      	ldr	r3, [pc, #76]	; (8002b14 <hci_tl_lowlevel_init+0x60>)
 8002ac8:	613b      	str	r3, [r7, #16]
  fops.Reset   = HCI_TL_SPI_Reset;
 8002aca:	4b13      	ldr	r3, [pc, #76]	; (8002b18 <hci_tl_lowlevel_init+0x64>)
 8002acc:	60fb      	str	r3, [r7, #12]
  fops.GetTick = BSP_GetTick;
 8002ace:	4b13      	ldr	r3, [pc, #76]	; (8002b1c <hci_tl_lowlevel_init+0x68>)
 8002ad0:	61fb      	str	r3, [r7, #28]

  hci_register_io_bus (&fops);
 8002ad2:	1d3b      	adds	r3, r7, #4
 8002ad4:	4618      	mov	r0, r3
 8002ad6:	f00c f9d1 	bl	800ee7c <hci_register_io_bus>
  /* USER CODE BEGIN hci_tl_lowlevel_init 2 */

  /* USER CODE END hci_tl_lowlevel_init 2 */

  /* Register event irq handler */
  HAL_EXTI_GetHandle(&hexti0, EXTI_LINE_0);
 8002ada:	f04f 61c0 	mov.w	r1, #100663296	; 0x6000000
 8002ade:	4810      	ldr	r0, [pc, #64]	; (8002b20 <hci_tl_lowlevel_init+0x6c>)
 8002ae0:	f008 fc9b 	bl	800b41a <HAL_EXTI_GetHandle>
  HAL_EXTI_RegisterCallback(&hexti0, HAL_EXTI_COMMON_CB_ID, hci_tl_lowlevel_isr);
 8002ae4:	4a0f      	ldr	r2, [pc, #60]	; (8002b24 <hci_tl_lowlevel_init+0x70>)
 8002ae6:	2100      	movs	r1, #0
 8002ae8:	480d      	ldr	r0, [pc, #52]	; (8002b20 <hci_tl_lowlevel_init+0x6c>)
 8002aea:	f008 fc7c 	bl	800b3e6 <HAL_EXTI_RegisterCallback>
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8002aee:	2200      	movs	r2, #0
 8002af0:	2100      	movs	r1, #0
 8002af2:	2006      	movs	r0, #6
 8002af4:	f008 fc41 	bl	800b37a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8002af8:	2006      	movs	r0, #6
 8002afa:	f008 fc5a 	bl	800b3b2 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN hci_tl_lowlevel_init 3 */

  /* USER CODE END hci_tl_lowlevel_init 3 */

}
 8002afe:	bf00      	nop
 8002b00:	3720      	adds	r7, #32
 8002b02:	46bd      	mov	sp, r7
 8002b04:	bd80      	pop	{r7, pc}
 8002b06:	bf00      	nop
 8002b08:	08002845 	.word	0x08002845
 8002b0c:	080028d5 	.word	0x080028d5
 8002b10:	080029ed 	.word	0x080029ed
 8002b14:	08002939 	.word	0x08002939
 8002b18:	080028fd 	.word	0x080028fd
 8002b1c:	0800307d 	.word	0x0800307d
 8002b20:	20000294 	.word	0x20000294
 8002b24:	08002b29 	.word	0x08002b29

08002b28 <hci_tl_lowlevel_isr>:
  *
  * @param  None
  * @retval None
  */
void hci_tl_lowlevel_isr(void)
{
 8002b28:	b580      	push	{r7, lr}
 8002b2a:	af00      	add	r7, sp, #0
  /* Call hci_notify_asynch_evt() */
  while(IsDataAvailable())
 8002b2c:	e005      	b.n	8002b3a <hci_tl_lowlevel_isr+0x12>
  {
    if (hci_notify_asynch_evt(NULL))
 8002b2e:	2000      	movs	r0, #0
 8002b30:	f00c fb0a 	bl	800f148 <hci_notify_asynch_evt>
 8002b34:	4603      	mov	r3, r0
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d105      	bne.n	8002b46 <hci_tl_lowlevel_isr+0x1e>
  while(IsDataAvailable())
 8002b3a:	f7ff ffab 	bl	8002a94 <IsDataAvailable>
 8002b3e:	4603      	mov	r3, r0
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d1f4      	bne.n	8002b2e <hci_tl_lowlevel_isr+0x6>
 8002b44:	e000      	b.n	8002b48 <hci_tl_lowlevel_isr+0x20>
    {
      return;
 8002b46:	bf00      	nop
  }

  /* USER CODE BEGIN hci_tl_lowlevel_isr */

  /* USER CODE END hci_tl_lowlevel_isr */
}
 8002b48:	bd80      	pop	{r7, pc}
	...

08002b4c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002b4c:	b580      	push	{r7, lr}
 8002b4e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002b50:	f008 faa2 	bl	800b098 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002b54:	f000 f82e 	bl	8002bb4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002b58:	f000 f898 	bl	8002c8c <MX_GPIO_Init>
  MX_BlueNRG_MS_Init();
 8002b5c:	f7fd ff26 	bl	80009ac <MX_BlueNRG_MS_Init>
  /* USER CODE BEGIN 2 */

  if (IKS01A3_MOTION_SENSOR_Init(IKS01A3_LSM6DSO_0, MOTION_ACCELERO)==HAL_OK){
 8002b60:	2102      	movs	r1, #2
 8002b62:	2000      	movs	r0, #0
 8002b64:	f007 fd16 	bl	800a594 <IKS01A3_MOTION_SENSOR_Init>
 8002b68:	4603      	mov	r3, r0
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d103      	bne.n	8002b76 <main+0x2a>
	  IKS01A3_MOTION_SENSOR_Enable(IKS01A3_LSM6DSO_0, MOTION_ACCELERO);
 8002b6e:	2102      	movs	r1, #2
 8002b70:	2000      	movs	r0, #0
 8002b72:	f007 fe0b 	bl	800a78c <IKS01A3_MOTION_SENSOR_Enable>
  }
  if(IKS01A3_ENV_SENSOR_Init(IKS01A3_STTS751_0, ENV_TEMPERATURE)==HAL_OK){
 8002b76:	2101      	movs	r1, #1
 8002b78:	2002      	movs	r0, #2
 8002b7a:	f007 f96f 	bl	8009e5c <IKS01A3_ENV_SENSOR_Init>
 8002b7e:	4603      	mov	r3, r0
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d103      	bne.n	8002b8c <main+0x40>
		  IKS01A3_ENV_SENSOR_Enable(IKS01A3_STTS751_0, ENV_TEMPERATURE);
 8002b84:	2101      	movs	r1, #1
 8002b86:	2002      	movs	r0, #2
 8002b88:	f007 fa64 	bl	800a054 <IKS01A3_ENV_SENSOR_Enable>
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */

  MX_BlueNRG_MS_Process();
 8002b8c:	f7fd ffb6 	bl	8000afc <MX_BlueNRG_MS_Process>
    /* USER CODE BEGIN 3 */


  IKS01A3_MOTION_SENSOR_GetAxes(IKS01A3_LSM6DSO_0, MOTION_ACCELERO, &misure_accelerometro);
 8002b90:	4a06      	ldr	r2, [pc, #24]	; (8002bac <main+0x60>)
 8002b92:	2102      	movs	r1, #2
 8002b94:	2000      	movs	r0, #0
 8002b96:	f007 fe3b 	bl	800a810 <IKS01A3_MOTION_SENSOR_GetAxes>

  IKS01A3_ENV_SENSOR_GetValue(IKS01A3_STTS751_0, ENV_TEMPERATURE, &misure_temperatura);
 8002b9a:	4a05      	ldr	r2, [pc, #20]	; (8002bb0 <main+0x64>)
 8002b9c:	2101      	movs	r1, #1
 8002b9e:	2002      	movs	r0, #2
 8002ba0:	f007 fa9a 	bl	800a0d8 <IKS01A3_ENV_SENSOR_GetValue>
  HAL_Delay(1);
 8002ba4:	2001      	movs	r0, #1
 8002ba6:	f008 fae9 	bl	800b17c <HAL_Delay>
  MX_BlueNRG_MS_Process();
 8002baa:	e7ef      	b.n	8002b8c <main+0x40>
 8002bac:	2000039c 	.word	0x2000039c
 8002bb0:	200003a8 	.word	0x200003a8

08002bb4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002bb4:	b580      	push	{r7, lr}
 8002bb6:	b094      	sub	sp, #80	; 0x50
 8002bb8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002bba:	f107 0320 	add.w	r3, r7, #32
 8002bbe:	2230      	movs	r2, #48	; 0x30
 8002bc0:	2100      	movs	r1, #0
 8002bc2:	4618      	mov	r0, r3
 8002bc4:	f00c fc5c 	bl	800f480 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002bc8:	f107 030c 	add.w	r3, r7, #12
 8002bcc:	2200      	movs	r2, #0
 8002bce:	601a      	str	r2, [r3, #0]
 8002bd0:	605a      	str	r2, [r3, #4]
 8002bd2:	609a      	str	r2, [r3, #8]
 8002bd4:	60da      	str	r2, [r3, #12]
 8002bd6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002bd8:	2300      	movs	r3, #0
 8002bda:	60bb      	str	r3, [r7, #8]
 8002bdc:	4b29      	ldr	r3, [pc, #164]	; (8002c84 <SystemClock_Config+0xd0>)
 8002bde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002be0:	4a28      	ldr	r2, [pc, #160]	; (8002c84 <SystemClock_Config+0xd0>)
 8002be2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002be6:	6413      	str	r3, [r2, #64]	; 0x40
 8002be8:	4b26      	ldr	r3, [pc, #152]	; (8002c84 <SystemClock_Config+0xd0>)
 8002bea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002bf0:	60bb      	str	r3, [r7, #8]
 8002bf2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8002bf4:	2300      	movs	r3, #0
 8002bf6:	607b      	str	r3, [r7, #4]
 8002bf8:	4b23      	ldr	r3, [pc, #140]	; (8002c88 <SystemClock_Config+0xd4>)
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8002c00:	4a21      	ldr	r2, [pc, #132]	; (8002c88 <SystemClock_Config+0xd4>)
 8002c02:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002c06:	6013      	str	r3, [r2, #0]
 8002c08:	4b1f      	ldr	r3, [pc, #124]	; (8002c88 <SystemClock_Config+0xd4>)
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002c10:	607b      	str	r3, [r7, #4]
 8002c12:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002c14:	2302      	movs	r3, #2
 8002c16:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002c18:	2301      	movs	r3, #1
 8002c1a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002c1c:	2310      	movs	r3, #16
 8002c1e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002c20:	2302      	movs	r3, #2
 8002c22:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002c24:	2300      	movs	r3, #0
 8002c26:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8002c28:	2310      	movs	r3, #16
 8002c2a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8002c2c:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8002c30:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8002c32:	2304      	movs	r3, #4
 8002c34:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8002c36:	2307      	movs	r3, #7
 8002c38:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002c3a:	f107 0320 	add.w	r3, r7, #32
 8002c3e:	4618      	mov	r0, r3
 8002c40:	f009 fef6 	bl	800ca30 <HAL_RCC_OscConfig>
 8002c44:	4603      	mov	r3, r0
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d001      	beq.n	8002c4e <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8002c4a:	f000 f89d 	bl	8002d88 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002c4e:	230f      	movs	r3, #15
 8002c50:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002c52:	2302      	movs	r3, #2
 8002c54:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002c56:	2300      	movs	r3, #0
 8002c58:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002c5a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002c5e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002c60:	2300      	movs	r3, #0
 8002c62:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002c64:	f107 030c 	add.w	r3, r7, #12
 8002c68:	2102      	movs	r1, #2
 8002c6a:	4618      	mov	r0, r3
 8002c6c:	f00a f958 	bl	800cf20 <HAL_RCC_ClockConfig>
 8002c70:	4603      	mov	r3, r0
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d001      	beq.n	8002c7a <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8002c76:	f000 f887 	bl	8002d88 <Error_Handler>
  }
}
 8002c7a:	bf00      	nop
 8002c7c:	3750      	adds	r7, #80	; 0x50
 8002c7e:	46bd      	mov	sp, r7
 8002c80:	bd80      	pop	{r7, pc}
 8002c82:	bf00      	nop
 8002c84:	40023800 	.word	0x40023800
 8002c88:	40007000 	.word	0x40007000

08002c8c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002c8c:	b580      	push	{r7, lr}
 8002c8e:	b08a      	sub	sp, #40	; 0x28
 8002c90:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c92:	f107 0314 	add.w	r3, r7, #20
 8002c96:	2200      	movs	r2, #0
 8002c98:	601a      	str	r2, [r3, #0]
 8002c9a:	605a      	str	r2, [r3, #4]
 8002c9c:	609a      	str	r2, [r3, #8]
 8002c9e:	60da      	str	r2, [r3, #12]
 8002ca0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002ca2:	2300      	movs	r3, #0
 8002ca4:	613b      	str	r3, [r7, #16]
 8002ca6:	4b36      	ldr	r3, [pc, #216]	; (8002d80 <MX_GPIO_Init+0xf4>)
 8002ca8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002caa:	4a35      	ldr	r2, [pc, #212]	; (8002d80 <MX_GPIO_Init+0xf4>)
 8002cac:	f043 0304 	orr.w	r3, r3, #4
 8002cb0:	6313      	str	r3, [r2, #48]	; 0x30
 8002cb2:	4b33      	ldr	r3, [pc, #204]	; (8002d80 <MX_GPIO_Init+0xf4>)
 8002cb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cb6:	f003 0304 	and.w	r3, r3, #4
 8002cba:	613b      	str	r3, [r7, #16]
 8002cbc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002cbe:	2300      	movs	r3, #0
 8002cc0:	60fb      	str	r3, [r7, #12]
 8002cc2:	4b2f      	ldr	r3, [pc, #188]	; (8002d80 <MX_GPIO_Init+0xf4>)
 8002cc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cc6:	4a2e      	ldr	r2, [pc, #184]	; (8002d80 <MX_GPIO_Init+0xf4>)
 8002cc8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002ccc:	6313      	str	r3, [r2, #48]	; 0x30
 8002cce:	4b2c      	ldr	r3, [pc, #176]	; (8002d80 <MX_GPIO_Init+0xf4>)
 8002cd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cd2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002cd6:	60fb      	str	r3, [r7, #12]
 8002cd8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002cda:	2300      	movs	r3, #0
 8002cdc:	60bb      	str	r3, [r7, #8]
 8002cde:	4b28      	ldr	r3, [pc, #160]	; (8002d80 <MX_GPIO_Init+0xf4>)
 8002ce0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ce2:	4a27      	ldr	r2, [pc, #156]	; (8002d80 <MX_GPIO_Init+0xf4>)
 8002ce4:	f043 0301 	orr.w	r3, r3, #1
 8002ce8:	6313      	str	r3, [r2, #48]	; 0x30
 8002cea:	4b25      	ldr	r3, [pc, #148]	; (8002d80 <MX_GPIO_Init+0xf4>)
 8002cec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cee:	f003 0301 	and.w	r3, r3, #1
 8002cf2:	60bb      	str	r3, [r7, #8]
 8002cf4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002cf6:	2300      	movs	r3, #0
 8002cf8:	607b      	str	r3, [r7, #4]
 8002cfa:	4b21      	ldr	r3, [pc, #132]	; (8002d80 <MX_GPIO_Init+0xf4>)
 8002cfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cfe:	4a20      	ldr	r2, [pc, #128]	; (8002d80 <MX_GPIO_Init+0xf4>)
 8002d00:	f043 0302 	orr.w	r3, r3, #2
 8002d04:	6313      	str	r3, [r2, #48]	; 0x30
 8002d06:	4b1e      	ldr	r3, [pc, #120]	; (8002d80 <MX_GPIO_Init+0xf4>)
 8002d08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d0a:	f003 0302 	and.w	r3, r3, #2
 8002d0e:	607b      	str	r3, [r7, #4]
 8002d10:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1|GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);
 8002d12:	2200      	movs	r2, #0
 8002d14:	f240 3102 	movw	r1, #770	; 0x302
 8002d18:	481a      	ldr	r0, [pc, #104]	; (8002d84 <MX_GPIO_Init+0xf8>)
 8002d1a:	f008 fe37 	bl	800b98c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002d1e:	2301      	movs	r3, #1
 8002d20:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002d22:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8002d26:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d28:	2300      	movs	r3, #0
 8002d2a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002d2c:	f107 0314 	add.w	r3, r7, #20
 8002d30:	4619      	mov	r1, r3
 8002d32:	4814      	ldr	r0, [pc, #80]	; (8002d84 <MX_GPIO_Init+0xf8>)
 8002d34:	f008 fbaa 	bl	800b48c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA8 PA9 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_8|GPIO_PIN_9;
 8002d38:	f240 3302 	movw	r3, #770	; 0x302
 8002d3c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002d3e:	2301      	movs	r3, #1
 8002d40:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d42:	2300      	movs	r3, #0
 8002d44:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d46:	2300      	movs	r3, #0
 8002d48:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002d4a:	f107 0314 	add.w	r3, r7, #20
 8002d4e:	4619      	mov	r1, r3
 8002d50:	480c      	ldr	r0, [pc, #48]	; (8002d84 <MX_GPIO_Init+0xf8>)
 8002d52:	f008 fb9b 	bl	800b48c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8002d56:	2200      	movs	r2, #0
 8002d58:	2100      	movs	r1, #0
 8002d5a:	2006      	movs	r0, #6
 8002d5c:	f008 fb0d 	bl	800b37a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8002d60:	2006      	movs	r0, #6
 8002d62:	f008 fb26 	bl	800b3b2 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8002d66:	2200      	movs	r2, #0
 8002d68:	2100      	movs	r1, #0
 8002d6a:	2028      	movs	r0, #40	; 0x28
 8002d6c:	f008 fb05 	bl	800b37a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8002d70:	2028      	movs	r0, #40	; 0x28
 8002d72:	f008 fb1e 	bl	800b3b2 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002d76:	bf00      	nop
 8002d78:	3728      	adds	r7, #40	; 0x28
 8002d7a:	46bd      	mov	sp, r7
 8002d7c:	bd80      	pop	{r7, pc}
 8002d7e:	bf00      	nop
 8002d80:	40023800 	.word	0x40023800
 8002d84:	40020000 	.word	0x40020000

08002d88 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002d88:	b480      	push	{r7}
 8002d8a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002d8c:	b672      	cpsid	i
}
 8002d8e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002d90:	e7fe      	b.n	8002d90 <Error_Handler+0x8>
	...

08002d94 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002d94:	b580      	push	{r7, lr}
 8002d96:	b082      	sub	sp, #8
 8002d98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002d9a:	2300      	movs	r3, #0
 8002d9c:	607b      	str	r3, [r7, #4]
 8002d9e:	4b10      	ldr	r3, [pc, #64]	; (8002de0 <HAL_MspInit+0x4c>)
 8002da0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002da2:	4a0f      	ldr	r2, [pc, #60]	; (8002de0 <HAL_MspInit+0x4c>)
 8002da4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002da8:	6453      	str	r3, [r2, #68]	; 0x44
 8002daa:	4b0d      	ldr	r3, [pc, #52]	; (8002de0 <HAL_MspInit+0x4c>)
 8002dac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002dae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002db2:	607b      	str	r3, [r7, #4]
 8002db4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002db6:	2300      	movs	r3, #0
 8002db8:	603b      	str	r3, [r7, #0]
 8002dba:	4b09      	ldr	r3, [pc, #36]	; (8002de0 <HAL_MspInit+0x4c>)
 8002dbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dbe:	4a08      	ldr	r2, [pc, #32]	; (8002de0 <HAL_MspInit+0x4c>)
 8002dc0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002dc4:	6413      	str	r3, [r2, #64]	; 0x40
 8002dc6:	4b06      	ldr	r3, [pc, #24]	; (8002de0 <HAL_MspInit+0x4c>)
 8002dc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002dce:	603b      	str	r3, [r7, #0]
 8002dd0:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8002dd2:	2007      	movs	r0, #7
 8002dd4:	f008 fac6 	bl	800b364 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002dd8:	bf00      	nop
 8002dda:	3708      	adds	r7, #8
 8002ddc:	46bd      	mov	sp, r7
 8002dde:	bd80      	pop	{r7, pc}
 8002de0:	40023800 	.word	0x40023800

08002de4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002de4:	b480      	push	{r7}
 8002de6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002de8:	e7fe      	b.n	8002de8 <NMI_Handler+0x4>

08002dea <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002dea:	b480      	push	{r7}
 8002dec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002dee:	e7fe      	b.n	8002dee <HardFault_Handler+0x4>

08002df0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002df0:	b480      	push	{r7}
 8002df2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002df4:	e7fe      	b.n	8002df4 <MemManage_Handler+0x4>

08002df6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002df6:	b480      	push	{r7}
 8002df8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002dfa:	e7fe      	b.n	8002dfa <BusFault_Handler+0x4>

08002dfc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002dfc:	b480      	push	{r7}
 8002dfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002e00:	e7fe      	b.n	8002e00 <UsageFault_Handler+0x4>

08002e02 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002e02:	b480      	push	{r7}
 8002e04:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002e06:	bf00      	nop
 8002e08:	46bd      	mov	sp, r7
 8002e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e0e:	4770      	bx	lr

08002e10 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002e10:	b480      	push	{r7}
 8002e12:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002e14:	bf00      	nop
 8002e16:	46bd      	mov	sp, r7
 8002e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e1c:	4770      	bx	lr

08002e1e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002e1e:	b480      	push	{r7}
 8002e20:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002e22:	bf00      	nop
 8002e24:	46bd      	mov	sp, r7
 8002e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e2a:	4770      	bx	lr

08002e2c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002e2c:	b580      	push	{r7, lr}
 8002e2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002e30:	f008 f984 	bl	800b13c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002e34:	bf00      	nop
 8002e36:	bd80      	pop	{r7, pc}

08002e38 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8002e38:	b580      	push	{r7, lr}
 8002e3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_EXTI_IRQHandler(&H_EXTI_0);
 8002e3c:	4802      	ldr	r0, [pc, #8]	; (8002e48 <EXTI0_IRQHandler+0x10>)
 8002e3e:	f008 fb01 	bl	800b444 <HAL_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8002e42:	bf00      	nop
 8002e44:	bd80      	pop	{r7, pc}
 8002e46:	bf00      	nop
 8002e48:	20000294 	.word	0x20000294

08002e4c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002e4c:	b580      	push	{r7, lr}
 8002e4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_EXTI_IRQHandler(&H_EXTI_13);
 8002e50:	4802      	ldr	r0, [pc, #8]	; (8002e5c <EXTI15_10_IRQHandler+0x10>)
 8002e52:	f008 faf7 	bl	800b444 <HAL_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002e56:	bf00      	nop
 8002e58:	bd80      	pop	{r7, pc}
 8002e5a:	bf00      	nop
 8002e5c:	2000018c 	.word	0x2000018c

08002e60 <BSP_SPI1_Init>:
/**
  * @brief  Initializes SPI HAL.
  * @retval BSP status
  */
int32_t BSP_SPI1_Init(void)
{
 8002e60:	b580      	push	{r7, lr}
 8002e62:	b082      	sub	sp, #8
 8002e64:	af00      	add	r7, sp, #0
  int32_t ret = BSP_ERROR_NONE;
 8002e66:	2300      	movs	r3, #0
 8002e68:	607b      	str	r3, [r7, #4]

  hspi1.Instance  = SPI1;
 8002e6a:	4b12      	ldr	r3, [pc, #72]	; (8002eb4 <BSP_SPI1_Init+0x54>)
 8002e6c:	4a12      	ldr	r2, [pc, #72]	; (8002eb8 <BSP_SPI1_Init+0x58>)
 8002e6e:	601a      	str	r2, [r3, #0]

  if(SPI1InitCounter++ == 0)
 8002e70:	4b12      	ldr	r3, [pc, #72]	; (8002ebc <BSP_SPI1_Init+0x5c>)
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	1c5a      	adds	r2, r3, #1
 8002e76:	4911      	ldr	r1, [pc, #68]	; (8002ebc <BSP_SPI1_Init+0x5c>)
 8002e78:	600a      	str	r2, [r1, #0]
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d114      	bne.n	8002ea8 <BSP_SPI1_Init+0x48>
  {
    if (HAL_SPI_GetState(&hspi1) == HAL_SPI_STATE_RESET)
 8002e7e:	480d      	ldr	r0, [pc, #52]	; (8002eb4 <BSP_SPI1_Init+0x54>)
 8002e80:	f00a fca3 	bl	800d7ca <HAL_SPI_GetState>
 8002e84:	4603      	mov	r3, r0
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d10e      	bne.n	8002ea8 <BSP_SPI1_Init+0x48>
    {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 0U)
        /* Init the SPI Msp */
        SPI1_MspInit(&hspi1);
 8002e8a:	480a      	ldr	r0, [pc, #40]	; (8002eb4 <BSP_SPI1_Init+0x54>)
 8002e8c:	f000 f93a 	bl	8003104 <SPI1_MspInit>
            {
                return BSP_ERROR_MSP_FAILURE;
            }
        }
#endif
        if(ret == BSP_ERROR_NONE)
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d108      	bne.n	8002ea8 <BSP_SPI1_Init+0x48>
        {
            /* Init the SPI */
            if (MX_SPI1_Init(&hspi1) != HAL_OK)
 8002e96:	4807      	ldr	r0, [pc, #28]	; (8002eb4 <BSP_SPI1_Init+0x54>)
 8002e98:	f000 f8f8 	bl	800308c <MX_SPI1_Init>
 8002e9c:	4603      	mov	r3, r0
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d002      	beq.n	8002ea8 <BSP_SPI1_Init+0x48>
            {
                ret = BSP_ERROR_BUS_FAILURE;
 8002ea2:	f06f 0307 	mvn.w	r3, #7
 8002ea6:	607b      	str	r3, [r7, #4]
            }
        }
    }
  }

  return ret;
 8002ea8:	687b      	ldr	r3, [r7, #4]
}
 8002eaa:	4618      	mov	r0, r3
 8002eac:	3708      	adds	r7, #8
 8002eae:	46bd      	mov	sp, r7
 8002eb0:	bd80      	pop	{r7, pc}
 8002eb2:	bf00      	nop
 8002eb4:	200003ac 	.word	0x200003ac
 8002eb8:	40013000 	.word	0x40013000
 8002ebc:	20000458 	.word	0x20000458

08002ec0 <BSP_SPI1_SendRecv>:
  * @param  pData: Pointer to data buffer to send/receive
  * @param  Length: Length of data in byte
  * @retval BSP status
  */
int32_t BSP_SPI1_SendRecv(uint8_t *pTxData, uint8_t *pRxData, uint16_t Length)
{
 8002ec0:	b580      	push	{r7, lr}
 8002ec2:	b088      	sub	sp, #32
 8002ec4:	af02      	add	r7, sp, #8
 8002ec6:	60f8      	str	r0, [r7, #12]
 8002ec8:	60b9      	str	r1, [r7, #8]
 8002eca:	4613      	mov	r3, r2
 8002ecc:	80fb      	strh	r3, [r7, #6]
  int32_t ret = BSP_ERROR_NONE;
 8002ece:	2300      	movs	r3, #0
 8002ed0:	617b      	str	r3, [r7, #20]

  if(HAL_SPI_TransmitReceive(&hspi1, pTxData, pRxData, Length, BUS_SPI1_POLL_TIMEOUT) != HAL_OK)
 8002ed2:	88fb      	ldrh	r3, [r7, #6]
 8002ed4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002ed8:	9200      	str	r2, [sp, #0]
 8002eda:	68ba      	ldr	r2, [r7, #8]
 8002edc:	68f9      	ldr	r1, [r7, #12]
 8002ede:	4807      	ldr	r0, [pc, #28]	; (8002efc <BSP_SPI1_SendRecv+0x3c>)
 8002ee0:	f00a fad1 	bl	800d486 <HAL_SPI_TransmitReceive>
 8002ee4:	4603      	mov	r3, r0
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d002      	beq.n	8002ef0 <BSP_SPI1_SendRecv+0x30>
  {
      ret = BSP_ERROR_UNKNOWN_FAILURE;
 8002eea:	f06f 0305 	mvn.w	r3, #5
 8002eee:	617b      	str	r3, [r7, #20]
  }
  return ret;
 8002ef0:	697b      	ldr	r3, [r7, #20]
}
 8002ef2:	4618      	mov	r0, r3
 8002ef4:	3718      	adds	r7, #24
 8002ef6:	46bd      	mov	sp, r7
 8002ef8:	bd80      	pop	{r7, pc}
 8002efa:	bf00      	nop
 8002efc:	200003ac 	.word	0x200003ac

08002f00 <BSP_I2C1_Init>:
/**
  * @brief  Initialize I2C HAL
  * @retval BSP status
  */
int32_t BSP_I2C1_Init(void)
{
 8002f00:	b580      	push	{r7, lr}
 8002f02:	b082      	sub	sp, #8
 8002f04:	af00      	add	r7, sp, #0

  int32_t ret = BSP_ERROR_NONE;
 8002f06:	2300      	movs	r3, #0
 8002f08:	607b      	str	r3, [r7, #4]

  hi2c1.Instance  = I2C1;
 8002f0a:	4b13      	ldr	r3, [pc, #76]	; (8002f58 <BSP_I2C1_Init+0x58>)
 8002f0c:	4a13      	ldr	r2, [pc, #76]	; (8002f5c <BSP_I2C1_Init+0x5c>)
 8002f0e:	601a      	str	r2, [r3, #0]

  if(I2C1InitCounter++ == 0)
 8002f10:	4b13      	ldr	r3, [pc, #76]	; (8002f60 <BSP_I2C1_Init+0x60>)
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	1c5a      	adds	r2, r3, #1
 8002f16:	4912      	ldr	r1, [pc, #72]	; (8002f60 <BSP_I2C1_Init+0x60>)
 8002f18:	600a      	str	r2, [r1, #0]
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d117      	bne.n	8002f4e <BSP_I2C1_Init+0x4e>
  {
    if (HAL_I2C_GetState(&hi2c1) == HAL_I2C_STATE_RESET)
 8002f1e:	480e      	ldr	r0, [pc, #56]	; (8002f58 <BSP_I2C1_Init+0x58>)
 8002f20:	f009 fa10 	bl	800c344 <HAL_I2C_GetState>
 8002f24:	4603      	mov	r3, r0
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d111      	bne.n	8002f4e <BSP_I2C1_Init+0x4e>
    {
    #if (USE_HAL_I2C_REGISTER_CALLBACKS == 0U)
      /* Init the I2C Msp */
      I2C1_MspInit(&hi2c1);
 8002f2a:	480b      	ldr	r0, [pc, #44]	; (8002f58 <BSP_I2C1_Init+0x58>)
 8002f2c:	f000 f986 	bl	800323c <I2C1_MspInit>
        {
          return BSP_ERROR_MSP_FAILURE;
        }
      }
    #endif
      if(ret == BSP_ERROR_NONE)
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d10b      	bne.n	8002f4e <BSP_I2C1_Init+0x4e>
      {
        /* Init the I2C */
        if(MX_I2C1_Init(&hi2c1) != HAL_OK)
 8002f36:	4808      	ldr	r0, [pc, #32]	; (8002f58 <BSP_I2C1_Init+0x58>)
 8002f38:	f000 f94c 	bl	80031d4 <MX_I2C1_Init>
 8002f3c:	4603      	mov	r3, r0
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d003      	beq.n	8002f4a <BSP_I2C1_Init+0x4a>
        {
          ret = BSP_ERROR_BUS_FAILURE;
 8002f42:	f06f 0307 	mvn.w	r3, #7
 8002f46:	607b      	str	r3, [r7, #4]
 8002f48:	e001      	b.n	8002f4e <BSP_I2C1_Init+0x4e>
        }
        else
        {
          ret = BSP_ERROR_NONE;
 8002f4a:	2300      	movs	r3, #0
 8002f4c:	607b      	str	r3, [r7, #4]
        }
      }
    }
  }
  return ret;
 8002f4e:	687b      	ldr	r3, [r7, #4]
}
 8002f50:	4618      	mov	r0, r3
 8002f52:	3708      	adds	r7, #8
 8002f54:	46bd      	mov	sp, r7
 8002f56:	bd80      	pop	{r7, pc}
 8002f58:	20000404 	.word	0x20000404
 8002f5c:	40005400 	.word	0x40005400
 8002f60:	2000045c 	.word	0x2000045c

08002f64 <BSP_I2C1_DeInit>:
/**
  * @brief  DeInitialize I2C HAL.
  * @retval BSP status
  */
int32_t BSP_I2C1_DeInit(void)
{
 8002f64:	b580      	push	{r7, lr}
 8002f66:	b082      	sub	sp, #8
 8002f68:	af00      	add	r7, sp, #0
  int32_t ret = BSP_ERROR_NONE;
 8002f6a:	2300      	movs	r3, #0
 8002f6c:	607b      	str	r3, [r7, #4]

  if (I2C1InitCounter > 0)
 8002f6e:	4b0f      	ldr	r3, [pc, #60]	; (8002fac <BSP_I2C1_DeInit+0x48>)
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d014      	beq.n	8002fa0 <BSP_I2C1_DeInit+0x3c>
  {
    if (--I2C1InitCounter == 0)
 8002f76:	4b0d      	ldr	r3, [pc, #52]	; (8002fac <BSP_I2C1_DeInit+0x48>)
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	3b01      	subs	r3, #1
 8002f7c:	4a0b      	ldr	r2, [pc, #44]	; (8002fac <BSP_I2C1_DeInit+0x48>)
 8002f7e:	6013      	str	r3, [r2, #0]
 8002f80:	4b0a      	ldr	r3, [pc, #40]	; (8002fac <BSP_I2C1_DeInit+0x48>)
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d10b      	bne.n	8002fa0 <BSP_I2C1_DeInit+0x3c>
    {
  #if (USE_HAL_I2C_REGISTER_CALLBACKS == 0U)
      /* DeInit the I2C */
      I2C1_MspDeInit(&hi2c1);
 8002f88:	4809      	ldr	r0, [pc, #36]	; (8002fb0 <BSP_I2C1_DeInit+0x4c>)
 8002f8a:	f000 f9a1 	bl	80032d0 <I2C1_MspDeInit>
  #endif
      /* DeInit the I2C */
      if (HAL_I2C_DeInit(&hi2c1) != HAL_OK)
 8002f8e:	4808      	ldr	r0, [pc, #32]	; (8002fb0 <BSP_I2C1_DeInit+0x4c>)
 8002f90:	f008 fe74 	bl	800bc7c <HAL_I2C_DeInit>
 8002f94:	4603      	mov	r3, r0
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d002      	beq.n	8002fa0 <BSP_I2C1_DeInit+0x3c>
      {
        ret = BSP_ERROR_BUS_FAILURE;
 8002f9a:	f06f 0307 	mvn.w	r3, #7
 8002f9e:	607b      	str	r3, [r7, #4]
      }
    }
  }
  return ret;
 8002fa0:	687b      	ldr	r3, [r7, #4]
}
 8002fa2:	4618      	mov	r0, r3
 8002fa4:	3708      	adds	r7, #8
 8002fa6:	46bd      	mov	sp, r7
 8002fa8:	bd80      	pop	{r7, pc}
 8002faa:	bf00      	nop
 8002fac:	2000045c 	.word	0x2000045c
 8002fb0:	20000404 	.word	0x20000404

08002fb4 <BSP_I2C1_WriteReg>:
  * @param  Length Data Length
  * @retval BSP status
  */

int32_t BSP_I2C1_WriteReg(uint16_t DevAddr, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 8002fb4:	b580      	push	{r7, lr}
 8002fb6:	b08a      	sub	sp, #40	; 0x28
 8002fb8:	af04      	add	r7, sp, #16
 8002fba:	60ba      	str	r2, [r7, #8]
 8002fbc:	461a      	mov	r2, r3
 8002fbe:	4603      	mov	r3, r0
 8002fc0:	81fb      	strh	r3, [r7, #14]
 8002fc2:	460b      	mov	r3, r1
 8002fc4:	81bb      	strh	r3, [r7, #12]
 8002fc6:	4613      	mov	r3, r2
 8002fc8:	80fb      	strh	r3, [r7, #6]
  int32_t ret = BSP_ERROR_NONE;
 8002fca:	2300      	movs	r3, #0
 8002fcc:	617b      	str	r3, [r7, #20]

  if (HAL_I2C_Mem_Write(&hi2c1, DevAddr,Reg, I2C_MEMADD_SIZE_8BIT,pData, Length, BUS_I2C1_POLL_TIMEOUT) != HAL_OK)
 8002fce:	89ba      	ldrh	r2, [r7, #12]
 8002fd0:	89f9      	ldrh	r1, [r7, #14]
 8002fd2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002fd6:	9302      	str	r3, [sp, #8]
 8002fd8:	88fb      	ldrh	r3, [r7, #6]
 8002fda:	9301      	str	r3, [sp, #4]
 8002fdc:	68bb      	ldr	r3, [r7, #8]
 8002fde:	9300      	str	r3, [sp, #0]
 8002fe0:	2301      	movs	r3, #1
 8002fe2:	480c      	ldr	r0, [pc, #48]	; (8003014 <BSP_I2C1_WriteReg+0x60>)
 8002fe4:	f008 fe8e 	bl	800bd04 <HAL_I2C_Mem_Write>
 8002fe8:	4603      	mov	r3, r0
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d00c      	beq.n	8003008 <BSP_I2C1_WriteReg+0x54>
  {
    if (HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF)
 8002fee:	4809      	ldr	r0, [pc, #36]	; (8003014 <BSP_I2C1_WriteReg+0x60>)
 8002ff0:	f009 f9b6 	bl	800c360 <HAL_I2C_GetError>
 8002ff4:	4603      	mov	r3, r0
 8002ff6:	2b04      	cmp	r3, #4
 8002ff8:	d103      	bne.n	8003002 <BSP_I2C1_WriteReg+0x4e>
    {
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 8002ffa:	f06f 0365 	mvn.w	r3, #101	; 0x65
 8002ffe:	617b      	str	r3, [r7, #20]
 8003000:	e002      	b.n	8003008 <BSP_I2C1_WriteReg+0x54>
    }
    else
    {
      ret =  BSP_ERROR_PERIPH_FAILURE;
 8003002:	f06f 0303 	mvn.w	r3, #3
 8003006:	617b      	str	r3, [r7, #20]
    }
  }
  return ret;
 8003008:	697b      	ldr	r3, [r7, #20]
}
 800300a:	4618      	mov	r0, r3
 800300c:	3718      	adds	r7, #24
 800300e:	46bd      	mov	sp, r7
 8003010:	bd80      	pop	{r7, pc}
 8003012:	bf00      	nop
 8003014:	20000404 	.word	0x20000404

08003018 <BSP_I2C1_ReadReg>:
  * @param  pData  Pointer to data buffer to read
  * @param  Length Data Length
  * @retval BSP status
  */
int32_t  BSP_I2C1_ReadReg(uint16_t DevAddr, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 8003018:	b580      	push	{r7, lr}
 800301a:	b08a      	sub	sp, #40	; 0x28
 800301c:	af04      	add	r7, sp, #16
 800301e:	60ba      	str	r2, [r7, #8]
 8003020:	461a      	mov	r2, r3
 8003022:	4603      	mov	r3, r0
 8003024:	81fb      	strh	r3, [r7, #14]
 8003026:	460b      	mov	r3, r1
 8003028:	81bb      	strh	r3, [r7, #12]
 800302a:	4613      	mov	r3, r2
 800302c:	80fb      	strh	r3, [r7, #6]
  int32_t ret = BSP_ERROR_NONE;
 800302e:	2300      	movs	r3, #0
 8003030:	617b      	str	r3, [r7, #20]

  if (HAL_I2C_Mem_Read(&hi2c1, DevAddr, Reg, I2C_MEMADD_SIZE_8BIT, pData, Length, BUS_I2C1_POLL_TIMEOUT) != HAL_OK)
 8003032:	89ba      	ldrh	r2, [r7, #12]
 8003034:	89f9      	ldrh	r1, [r7, #14]
 8003036:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800303a:	9302      	str	r3, [sp, #8]
 800303c:	88fb      	ldrh	r3, [r7, #6]
 800303e:	9301      	str	r3, [sp, #4]
 8003040:	68bb      	ldr	r3, [r7, #8]
 8003042:	9300      	str	r3, [sp, #0]
 8003044:	2301      	movs	r3, #1
 8003046:	480c      	ldr	r0, [pc, #48]	; (8003078 <BSP_I2C1_ReadReg+0x60>)
 8003048:	f008 ff56 	bl	800bef8 <HAL_I2C_Mem_Read>
 800304c:	4603      	mov	r3, r0
 800304e:	2b00      	cmp	r3, #0
 8003050:	d00c      	beq.n	800306c <BSP_I2C1_ReadReg+0x54>
  {
    if (HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF)
 8003052:	4809      	ldr	r0, [pc, #36]	; (8003078 <BSP_I2C1_ReadReg+0x60>)
 8003054:	f009 f984 	bl	800c360 <HAL_I2C_GetError>
 8003058:	4603      	mov	r3, r0
 800305a:	2b04      	cmp	r3, #4
 800305c:	d103      	bne.n	8003066 <BSP_I2C1_ReadReg+0x4e>
    {
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 800305e:	f06f 0365 	mvn.w	r3, #101	; 0x65
 8003062:	617b      	str	r3, [r7, #20]
 8003064:	e002      	b.n	800306c <BSP_I2C1_ReadReg+0x54>
    }
    else
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 8003066:	f06f 0303 	mvn.w	r3, #3
 800306a:	617b      	str	r3, [r7, #20]
    }
  }
  return ret;
 800306c:	697b      	ldr	r3, [r7, #20]
}
 800306e:	4618      	mov	r0, r3
 8003070:	3718      	adds	r7, #24
 8003072:	46bd      	mov	sp, r7
 8003074:	bd80      	pop	{r7, pc}
 8003076:	bf00      	nop
 8003078:	20000404 	.word	0x20000404

0800307c <BSP_GetTick>:

/**
  * @brief  Return system tick in ms
  * @retval Current HAL time base time stamp
  */
int32_t BSP_GetTick(void) {
 800307c:	b580      	push	{r7, lr}
 800307e:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8003080:	f008 f870 	bl	800b164 <HAL_GetTick>
 8003084:	4603      	mov	r3, r0
}
 8003086:	4618      	mov	r0, r3
 8003088:	bd80      	pop	{r7, pc}
	...

0800308c <MX_SPI1_Init>:

/* SPI1 init function */

__weak HAL_StatusTypeDef MX_SPI1_Init(SPI_HandleTypeDef* hspi)
{
 800308c:	b580      	push	{r7, lr}
 800308e:	b084      	sub	sp, #16
 8003090:	af00      	add	r7, sp, #0
 8003092:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8003094:	2300      	movs	r3, #0
 8003096:	73fb      	strb	r3, [r7, #15]

  hspi->Instance = SPI1;
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	4a19      	ldr	r2, [pc, #100]	; (8003100 <MX_SPI1_Init+0x74>)
 800309c:	601a      	str	r2, [r3, #0]
  hspi->Init.Mode = SPI_MODE_MASTER;
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	f44f 7282 	mov.w	r2, #260	; 0x104
 80030a4:	605a      	str	r2, [r3, #4]
  hspi->Init.Direction = SPI_DIRECTION_2LINES;
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	2200      	movs	r2, #0
 80030aa:	609a      	str	r2, [r3, #8]
  hspi->Init.DataSize = SPI_DATASIZE_8BIT;
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	2200      	movs	r2, #0
 80030b0:	60da      	str	r2, [r3, #12]
  hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	2200      	movs	r2, #0
 80030b6:	611a      	str	r2, [r3, #16]
  hspi->Init.CLKPhase = SPI_PHASE_1EDGE;
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	2200      	movs	r2, #0
 80030bc:	615a      	str	r2, [r3, #20]
  hspi->Init.NSS = SPI_NSS_SOFT;
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80030c4:	619a      	str	r2, [r3, #24]
  hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	2218      	movs	r2, #24
 80030ca:	61da      	str	r2, [r3, #28]
  hspi->Init.FirstBit = SPI_FIRSTBIT_MSB;
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	2200      	movs	r2, #0
 80030d0:	621a      	str	r2, [r3, #32]
  hspi->Init.TIMode = SPI_TIMODE_DISABLE;
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	2200      	movs	r2, #0
 80030d6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	2200      	movs	r2, #0
 80030dc:	629a      	str	r2, [r3, #40]	; 0x28
  hspi->Init.CRCPolynomial = 10;
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	220a      	movs	r2, #10
 80030e2:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(hspi) != HAL_OK)
 80030e4:	6878      	ldr	r0, [r7, #4]
 80030e6:	f00a f93b 	bl	800d360 <HAL_SPI_Init>
 80030ea:	4603      	mov	r3, r0
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d001      	beq.n	80030f4 <MX_SPI1_Init+0x68>
  {
    ret = HAL_ERROR;
 80030f0:	2301      	movs	r3, #1
 80030f2:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 80030f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80030f6:	4618      	mov	r0, r3
 80030f8:	3710      	adds	r7, #16
 80030fa:	46bd      	mov	sp, r7
 80030fc:	bd80      	pop	{r7, pc}
 80030fe:	bf00      	nop
 8003100:	40013000 	.word	0x40013000

08003104 <SPI1_MspInit>:

static void SPI1_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8003104:	b580      	push	{r7, lr}
 8003106:	b08a      	sub	sp, #40	; 0x28
 8003108:	af00      	add	r7, sp, #0
 800310a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800310c:	2300      	movs	r3, #0
 800310e:	613b      	str	r3, [r7, #16]
 8003110:	4b2d      	ldr	r3, [pc, #180]	; (80031c8 <SPI1_MspInit+0xc4>)
 8003112:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003114:	4a2c      	ldr	r2, [pc, #176]	; (80031c8 <SPI1_MspInit+0xc4>)
 8003116:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800311a:	6453      	str	r3, [r2, #68]	; 0x44
 800311c:	4b2a      	ldr	r3, [pc, #168]	; (80031c8 <SPI1_MspInit+0xc4>)
 800311e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003120:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003124:	613b      	str	r3, [r7, #16]
 8003126:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003128:	2300      	movs	r3, #0
 800312a:	60fb      	str	r3, [r7, #12]
 800312c:	4b26      	ldr	r3, [pc, #152]	; (80031c8 <SPI1_MspInit+0xc4>)
 800312e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003130:	4a25      	ldr	r2, [pc, #148]	; (80031c8 <SPI1_MspInit+0xc4>)
 8003132:	f043 0301 	orr.w	r3, r3, #1
 8003136:	6313      	str	r3, [r2, #48]	; 0x30
 8003138:	4b23      	ldr	r3, [pc, #140]	; (80031c8 <SPI1_MspInit+0xc4>)
 800313a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800313c:	f003 0301 	and.w	r3, r3, #1
 8003140:	60fb      	str	r3, [r7, #12]
 8003142:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003144:	2300      	movs	r3, #0
 8003146:	60bb      	str	r3, [r7, #8]
 8003148:	4b1f      	ldr	r3, [pc, #124]	; (80031c8 <SPI1_MspInit+0xc4>)
 800314a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800314c:	4a1e      	ldr	r2, [pc, #120]	; (80031c8 <SPI1_MspInit+0xc4>)
 800314e:	f043 0302 	orr.w	r3, r3, #2
 8003152:	6313      	str	r3, [r2, #48]	; 0x30
 8003154:	4b1c      	ldr	r3, [pc, #112]	; (80031c8 <SPI1_MspInit+0xc4>)
 8003156:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003158:	f003 0302 	and.w	r3, r3, #2
 800315c:	60bb      	str	r3, [r7, #8]
 800315e:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    PB3     ------> SPI1_SCK
    */
    GPIO_InitStruct.Pin = BUS_SPI1_MISO_GPIO_PIN;
 8003160:	2340      	movs	r3, #64	; 0x40
 8003162:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003164:	2302      	movs	r3, #2
 8003166:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003168:	2300      	movs	r3, #0
 800316a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800316c:	2303      	movs	r3, #3
 800316e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_SPI1_MISO_GPIO_AF;
 8003170:	2305      	movs	r3, #5
 8003172:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(BUS_SPI1_MISO_GPIO_PORT, &GPIO_InitStruct);
 8003174:	f107 0314 	add.w	r3, r7, #20
 8003178:	4619      	mov	r1, r3
 800317a:	4814      	ldr	r0, [pc, #80]	; (80031cc <SPI1_MspInit+0xc8>)
 800317c:	f008 f986 	bl	800b48c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BUS_SPI1_MOSI_GPIO_PIN;
 8003180:	2380      	movs	r3, #128	; 0x80
 8003182:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003184:	2302      	movs	r3, #2
 8003186:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003188:	2300      	movs	r3, #0
 800318a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800318c:	2303      	movs	r3, #3
 800318e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_SPI1_MOSI_GPIO_AF;
 8003190:	2305      	movs	r3, #5
 8003192:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(BUS_SPI1_MOSI_GPIO_PORT, &GPIO_InitStruct);
 8003194:	f107 0314 	add.w	r3, r7, #20
 8003198:	4619      	mov	r1, r3
 800319a:	480c      	ldr	r0, [pc, #48]	; (80031cc <SPI1_MspInit+0xc8>)
 800319c:	f008 f976 	bl	800b48c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BUS_SPI1_SCK_GPIO_PIN;
 80031a0:	2308      	movs	r3, #8
 80031a2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80031a4:	2302      	movs	r3, #2
 80031a6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031a8:	2300      	movs	r3, #0
 80031aa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80031ac:	2303      	movs	r3, #3
 80031ae:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_SPI1_SCK_GPIO_AF;
 80031b0:	2305      	movs	r3, #5
 80031b2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(BUS_SPI1_SCK_GPIO_PORT, &GPIO_InitStruct);
 80031b4:	f107 0314 	add.w	r3, r7, #20
 80031b8:	4619      	mov	r1, r3
 80031ba:	4805      	ldr	r0, [pc, #20]	; (80031d0 <SPI1_MspInit+0xcc>)
 80031bc:	f008 f966 	bl	800b48c <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
}
 80031c0:	bf00      	nop
 80031c2:	3728      	adds	r7, #40	; 0x28
 80031c4:	46bd      	mov	sp, r7
 80031c6:	bd80      	pop	{r7, pc}
 80031c8:	40023800 	.word	0x40023800
 80031cc:	40020000 	.word	0x40020000
 80031d0:	40020400 	.word	0x40020400

080031d4 <MX_I2C1_Init>:
}

/* I2C1 init function */

__weak HAL_StatusTypeDef MX_I2C1_Init(I2C_HandleTypeDef* hi2c)
{
 80031d4:	b580      	push	{r7, lr}
 80031d6:	b084      	sub	sp, #16
 80031d8:	af00      	add	r7, sp, #0
 80031da:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 80031dc:	2300      	movs	r3, #0
 80031de:	73fb      	strb	r3, [r7, #15]

  hi2c->Instance = I2C1;
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	4a14      	ldr	r2, [pc, #80]	; (8003234 <MX_I2C1_Init+0x60>)
 80031e4:	601a      	str	r2, [r3, #0]
  hi2c->Init.ClockSpeed = 100000;
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	4a13      	ldr	r2, [pc, #76]	; (8003238 <MX_I2C1_Init+0x64>)
 80031ea:	605a      	str	r2, [r3, #4]
  hi2c->Init.DutyCycle = I2C_DUTYCYCLE_2;
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	2200      	movs	r2, #0
 80031f0:	609a      	str	r2, [r3, #8]
  hi2c->Init.OwnAddress1 = 0;
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	2200      	movs	r2, #0
 80031f6:	60da      	str	r2, [r3, #12]
  hi2c->Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80031fe:	611a      	str	r2, [r3, #16]
  hi2c->Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	2200      	movs	r2, #0
 8003204:	615a      	str	r2, [r3, #20]
  hi2c->Init.OwnAddress2 = 0;
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	2200      	movs	r2, #0
 800320a:	619a      	str	r2, [r3, #24]
  hi2c->Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	2200      	movs	r2, #0
 8003210:	61da      	str	r2, [r3, #28]
  hi2c->Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	2200      	movs	r2, #0
 8003216:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(hi2c) != HAL_OK)
 8003218:	6878      	ldr	r0, [r7, #4]
 800321a:	f008 fbeb 	bl	800b9f4 <HAL_I2C_Init>
 800321e:	4603      	mov	r3, r0
 8003220:	2b00      	cmp	r3, #0
 8003222:	d001      	beq.n	8003228 <MX_I2C1_Init+0x54>
  {
    ret = HAL_ERROR;
 8003224:	2301      	movs	r3, #1
 8003226:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8003228:	7bfb      	ldrb	r3, [r7, #15]
}
 800322a:	4618      	mov	r0, r3
 800322c:	3710      	adds	r7, #16
 800322e:	46bd      	mov	sp, r7
 8003230:	bd80      	pop	{r7, pc}
 8003232:	bf00      	nop
 8003234:	40005400 	.word	0x40005400
 8003238:	000186a0 	.word	0x000186a0

0800323c <I2C1_MspInit>:

static void I2C1_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 800323c:	b580      	push	{r7, lr}
 800323e:	b08a      	sub	sp, #40	; 0x28
 8003240:	af00      	add	r7, sp, #0
 8003242:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003244:	2300      	movs	r3, #0
 8003246:	613b      	str	r3, [r7, #16]
 8003248:	4b1f      	ldr	r3, [pc, #124]	; (80032c8 <I2C1_MspInit+0x8c>)
 800324a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800324c:	4a1e      	ldr	r2, [pc, #120]	; (80032c8 <I2C1_MspInit+0x8c>)
 800324e:	f043 0302 	orr.w	r3, r3, #2
 8003252:	6313      	str	r3, [r2, #48]	; 0x30
 8003254:	4b1c      	ldr	r3, [pc, #112]	; (80032c8 <I2C1_MspInit+0x8c>)
 8003256:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003258:	f003 0302 	and.w	r3, r3, #2
 800325c:	613b      	str	r3, [r7, #16]
 800325e:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = BUS_I2C1_SCL_GPIO_PIN;
 8003260:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003264:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003266:	2312      	movs	r3, #18
 8003268:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800326a:	2300      	movs	r3, #0
 800326c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800326e:	2303      	movs	r3, #3
 8003270:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_I2C1_SCL_GPIO_AF;
 8003272:	2304      	movs	r3, #4
 8003274:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(BUS_I2C1_SCL_GPIO_PORT, &GPIO_InitStruct);
 8003276:	f107 0314 	add.w	r3, r7, #20
 800327a:	4619      	mov	r1, r3
 800327c:	4813      	ldr	r0, [pc, #76]	; (80032cc <I2C1_MspInit+0x90>)
 800327e:	f008 f905 	bl	800b48c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BUS_I2C1_SDA_GPIO_PIN;
 8003282:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003286:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003288:	2312      	movs	r3, #18
 800328a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800328c:	2300      	movs	r3, #0
 800328e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003290:	2303      	movs	r3, #3
 8003292:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_I2C1_SDA_GPIO_AF;
 8003294:	2304      	movs	r3, #4
 8003296:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(BUS_I2C1_SDA_GPIO_PORT, &GPIO_InitStruct);
 8003298:	f107 0314 	add.w	r3, r7, #20
 800329c:	4619      	mov	r1, r3
 800329e:	480b      	ldr	r0, [pc, #44]	; (80032cc <I2C1_MspInit+0x90>)
 80032a0:	f008 f8f4 	bl	800b48c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80032a4:	2300      	movs	r3, #0
 80032a6:	60fb      	str	r3, [r7, #12]
 80032a8:	4b07      	ldr	r3, [pc, #28]	; (80032c8 <I2C1_MspInit+0x8c>)
 80032aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032ac:	4a06      	ldr	r2, [pc, #24]	; (80032c8 <I2C1_MspInit+0x8c>)
 80032ae:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80032b2:	6413      	str	r3, [r2, #64]	; 0x40
 80032b4:	4b04      	ldr	r3, [pc, #16]	; (80032c8 <I2C1_MspInit+0x8c>)
 80032b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032b8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80032bc:	60fb      	str	r3, [r7, #12]
 80032be:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
}
 80032c0:	bf00      	nop
 80032c2:	3728      	adds	r7, #40	; 0x28
 80032c4:	46bd      	mov	sp, r7
 80032c6:	bd80      	pop	{r7, pc}
 80032c8:	40023800 	.word	0x40023800
 80032cc:	40020400 	.word	0x40020400

080032d0 <I2C1_MspDeInit>:

static void I2C1_MspDeInit(I2C_HandleTypeDef* i2cHandle)
{
 80032d0:	b580      	push	{r7, lr}
 80032d2:	b082      	sub	sp, #8
 80032d4:	af00      	add	r7, sp, #0
 80032d6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 80032d8:	4b09      	ldr	r3, [pc, #36]	; (8003300 <I2C1_MspDeInit+0x30>)
 80032da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032dc:	4a08      	ldr	r2, [pc, #32]	; (8003300 <I2C1_MspDeInit+0x30>)
 80032de:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80032e2:	6413      	str	r3, [r2, #64]	; 0x40

    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(BUS_I2C1_SCL_GPIO_PORT, BUS_I2C1_SCL_GPIO_PIN);
 80032e4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80032e8:	4806      	ldr	r0, [pc, #24]	; (8003304 <I2C1_MspDeInit+0x34>)
 80032ea:	f008 fa53 	bl	800b794 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(BUS_I2C1_SDA_GPIO_PORT, BUS_I2C1_SDA_GPIO_PIN);
 80032ee:	f44f 7100 	mov.w	r1, #512	; 0x200
 80032f2:	4804      	ldr	r0, [pc, #16]	; (8003304 <I2C1_MspDeInit+0x34>)
 80032f4:	f008 fa4e 	bl	800b794 <HAL_GPIO_DeInit>

  /* USER CODE BEGIN I2C1_MspDeInit 1 */

  /* USER CODE END I2C1_MspDeInit 1 */
}
 80032f8:	bf00      	nop
 80032fa:	3708      	adds	r7, #8
 80032fc:	46bd      	mov	sp, r7
 80032fe:	bd80      	pop	{r7, pc}
 8003300:	40023800 	.word	0x40023800
 8003304:	40020400 	.word	0x40020400

08003308 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003308:	b480      	push	{r7}
 800330a:	af00      	add	r7, sp, #0
  return 1;
 800330c:	2301      	movs	r3, #1
}
 800330e:	4618      	mov	r0, r3
 8003310:	46bd      	mov	sp, r7
 8003312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003316:	4770      	bx	lr

08003318 <_kill>:

int _kill(int pid, int sig)
{
 8003318:	b580      	push	{r7, lr}
 800331a:	b082      	sub	sp, #8
 800331c:	af00      	add	r7, sp, #0
 800331e:	6078      	str	r0, [r7, #4]
 8003320:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8003322:	f00c f875 	bl	800f410 <__errno>
 8003326:	4603      	mov	r3, r0
 8003328:	2216      	movs	r2, #22
 800332a:	601a      	str	r2, [r3, #0]
  return -1;
 800332c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003330:	4618      	mov	r0, r3
 8003332:	3708      	adds	r7, #8
 8003334:	46bd      	mov	sp, r7
 8003336:	bd80      	pop	{r7, pc}

08003338 <_exit>:

void _exit (int status)
{
 8003338:	b580      	push	{r7, lr}
 800333a:	b082      	sub	sp, #8
 800333c:	af00      	add	r7, sp, #0
 800333e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8003340:	f04f 31ff 	mov.w	r1, #4294967295
 8003344:	6878      	ldr	r0, [r7, #4]
 8003346:	f7ff ffe7 	bl	8003318 <_kill>
  while (1) {}    /* Make sure we hang here */
 800334a:	e7fe      	b.n	800334a <_exit+0x12>

0800334c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800334c:	b580      	push	{r7, lr}
 800334e:	b086      	sub	sp, #24
 8003350:	af00      	add	r7, sp, #0
 8003352:	60f8      	str	r0, [r7, #12]
 8003354:	60b9      	str	r1, [r7, #8]
 8003356:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003358:	2300      	movs	r3, #0
 800335a:	617b      	str	r3, [r7, #20]
 800335c:	e00a      	b.n	8003374 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800335e:	f3af 8000 	nop.w
 8003362:	4601      	mov	r1, r0
 8003364:	68bb      	ldr	r3, [r7, #8]
 8003366:	1c5a      	adds	r2, r3, #1
 8003368:	60ba      	str	r2, [r7, #8]
 800336a:	b2ca      	uxtb	r2, r1
 800336c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800336e:	697b      	ldr	r3, [r7, #20]
 8003370:	3301      	adds	r3, #1
 8003372:	617b      	str	r3, [r7, #20]
 8003374:	697a      	ldr	r2, [r7, #20]
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	429a      	cmp	r2, r3
 800337a:	dbf0      	blt.n	800335e <_read+0x12>
  }

  return len;
 800337c:	687b      	ldr	r3, [r7, #4]
}
 800337e:	4618      	mov	r0, r3
 8003380:	3718      	adds	r7, #24
 8003382:	46bd      	mov	sp, r7
 8003384:	bd80      	pop	{r7, pc}

08003386 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003386:	b580      	push	{r7, lr}
 8003388:	b086      	sub	sp, #24
 800338a:	af00      	add	r7, sp, #0
 800338c:	60f8      	str	r0, [r7, #12]
 800338e:	60b9      	str	r1, [r7, #8]
 8003390:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003392:	2300      	movs	r3, #0
 8003394:	617b      	str	r3, [r7, #20]
 8003396:	e009      	b.n	80033ac <_write+0x26>
  {
    __io_putchar(*ptr++);
 8003398:	68bb      	ldr	r3, [r7, #8]
 800339a:	1c5a      	adds	r2, r3, #1
 800339c:	60ba      	str	r2, [r7, #8]
 800339e:	781b      	ldrb	r3, [r3, #0]
 80033a0:	4618      	mov	r0, r3
 80033a2:	f007 fe15 	bl	800afd0 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80033a6:	697b      	ldr	r3, [r7, #20]
 80033a8:	3301      	adds	r3, #1
 80033aa:	617b      	str	r3, [r7, #20]
 80033ac:	697a      	ldr	r2, [r7, #20]
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	429a      	cmp	r2, r3
 80033b2:	dbf1      	blt.n	8003398 <_write+0x12>
  }
  return len;
 80033b4:	687b      	ldr	r3, [r7, #4]
}
 80033b6:	4618      	mov	r0, r3
 80033b8:	3718      	adds	r7, #24
 80033ba:	46bd      	mov	sp, r7
 80033bc:	bd80      	pop	{r7, pc}

080033be <_close>:

int _close(int file)
{
 80033be:	b480      	push	{r7}
 80033c0:	b083      	sub	sp, #12
 80033c2:	af00      	add	r7, sp, #0
 80033c4:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80033c6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80033ca:	4618      	mov	r0, r3
 80033cc:	370c      	adds	r7, #12
 80033ce:	46bd      	mov	sp, r7
 80033d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033d4:	4770      	bx	lr

080033d6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80033d6:	b480      	push	{r7}
 80033d8:	b083      	sub	sp, #12
 80033da:	af00      	add	r7, sp, #0
 80033dc:	6078      	str	r0, [r7, #4]
 80033de:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80033e0:	683b      	ldr	r3, [r7, #0]
 80033e2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80033e6:	605a      	str	r2, [r3, #4]
  return 0;
 80033e8:	2300      	movs	r3, #0
}
 80033ea:	4618      	mov	r0, r3
 80033ec:	370c      	adds	r7, #12
 80033ee:	46bd      	mov	sp, r7
 80033f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033f4:	4770      	bx	lr

080033f6 <_isatty>:

int _isatty(int file)
{
 80033f6:	b480      	push	{r7}
 80033f8:	b083      	sub	sp, #12
 80033fa:	af00      	add	r7, sp, #0
 80033fc:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80033fe:	2301      	movs	r3, #1
}
 8003400:	4618      	mov	r0, r3
 8003402:	370c      	adds	r7, #12
 8003404:	46bd      	mov	sp, r7
 8003406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800340a:	4770      	bx	lr

0800340c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800340c:	b480      	push	{r7}
 800340e:	b085      	sub	sp, #20
 8003410:	af00      	add	r7, sp, #0
 8003412:	60f8      	str	r0, [r7, #12]
 8003414:	60b9      	str	r1, [r7, #8]
 8003416:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8003418:	2300      	movs	r3, #0
}
 800341a:	4618      	mov	r0, r3
 800341c:	3714      	adds	r7, #20
 800341e:	46bd      	mov	sp, r7
 8003420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003424:	4770      	bx	lr
	...

08003428 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003428:	b580      	push	{r7, lr}
 800342a:	b086      	sub	sp, #24
 800342c:	af00      	add	r7, sp, #0
 800342e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003430:	4a14      	ldr	r2, [pc, #80]	; (8003484 <_sbrk+0x5c>)
 8003432:	4b15      	ldr	r3, [pc, #84]	; (8003488 <_sbrk+0x60>)
 8003434:	1ad3      	subs	r3, r2, r3
 8003436:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003438:	697b      	ldr	r3, [r7, #20]
 800343a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800343c:	4b13      	ldr	r3, [pc, #76]	; (800348c <_sbrk+0x64>)
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	2b00      	cmp	r3, #0
 8003442:	d102      	bne.n	800344a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003444:	4b11      	ldr	r3, [pc, #68]	; (800348c <_sbrk+0x64>)
 8003446:	4a12      	ldr	r2, [pc, #72]	; (8003490 <_sbrk+0x68>)
 8003448:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800344a:	4b10      	ldr	r3, [pc, #64]	; (800348c <_sbrk+0x64>)
 800344c:	681a      	ldr	r2, [r3, #0]
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	4413      	add	r3, r2
 8003452:	693a      	ldr	r2, [r7, #16]
 8003454:	429a      	cmp	r2, r3
 8003456:	d207      	bcs.n	8003468 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003458:	f00b ffda 	bl	800f410 <__errno>
 800345c:	4603      	mov	r3, r0
 800345e:	220c      	movs	r2, #12
 8003460:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003462:	f04f 33ff 	mov.w	r3, #4294967295
 8003466:	e009      	b.n	800347c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003468:	4b08      	ldr	r3, [pc, #32]	; (800348c <_sbrk+0x64>)
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800346e:	4b07      	ldr	r3, [pc, #28]	; (800348c <_sbrk+0x64>)
 8003470:	681a      	ldr	r2, [r3, #0]
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	4413      	add	r3, r2
 8003476:	4a05      	ldr	r2, [pc, #20]	; (800348c <_sbrk+0x64>)
 8003478:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800347a:	68fb      	ldr	r3, [r7, #12]
}
 800347c:	4618      	mov	r0, r3
 800347e:	3718      	adds	r7, #24
 8003480:	46bd      	mov	sp, r7
 8003482:	bd80      	pop	{r7, pc}
 8003484:	20018000 	.word	0x20018000
 8003488:	00000400 	.word	0x00000400
 800348c:	20000460 	.word	0x20000460
 8003490:	20000988 	.word	0x20000988

08003494 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003494:	b480      	push	{r7}
 8003496:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003498:	4b06      	ldr	r3, [pc, #24]	; (80034b4 <SystemInit+0x20>)
 800349a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800349e:	4a05      	ldr	r2, [pc, #20]	; (80034b4 <SystemInit+0x20>)
 80034a0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80034a4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80034a8:	bf00      	nop
 80034aa:	46bd      	mov	sp, r7
 80034ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034b0:	4770      	bx	lr
 80034b2:	bf00      	nop
 80034b4:	e000ed00 	.word	0xe000ed00

080034b8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80034b8:	f8df d034 	ldr.w	sp, [pc, #52]	; 80034f0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80034bc:	480d      	ldr	r0, [pc, #52]	; (80034f4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80034be:	490e      	ldr	r1, [pc, #56]	; (80034f8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80034c0:	4a0e      	ldr	r2, [pc, #56]	; (80034fc <LoopFillZerobss+0x1e>)
  movs r3, #0
 80034c2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80034c4:	e002      	b.n	80034cc <LoopCopyDataInit>

080034c6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80034c6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80034c8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80034ca:	3304      	adds	r3, #4

080034cc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80034cc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80034ce:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80034d0:	d3f9      	bcc.n	80034c6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80034d2:	4a0b      	ldr	r2, [pc, #44]	; (8003500 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80034d4:	4c0b      	ldr	r4, [pc, #44]	; (8003504 <LoopFillZerobss+0x26>)
  movs r3, #0
 80034d6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80034d8:	e001      	b.n	80034de <LoopFillZerobss>

080034da <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80034da:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80034dc:	3204      	adds	r2, #4

080034de <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80034de:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80034e0:	d3fb      	bcc.n	80034da <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80034e2:	f7ff ffd7 	bl	8003494 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80034e6:	f00b ff99 	bl	800f41c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80034ea:	f7ff fb2f 	bl	8002b4c <main>
  bx  lr    
 80034ee:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80034f0:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80034f4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80034f8:	20000204 	.word	0x20000204
  ldr r2, =_sidata
 80034fc:	08010718 	.word	0x08010718
  ldr r2, =_sbss
 8003500:	20000204 	.word	0x20000204
  ldr r4, =_ebss
 8003504:	20000984 	.word	0x20000984

08003508 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003508:	e7fe      	b.n	8003508 <ADC_IRQHandler>
	...

0800350c <HTS221_RegisterBusIO>:
  * @brief  Register Component Bus IO operations
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t HTS221_RegisterBusIO(HTS221_Object_t *pObj, HTS221_IO_t *pIO)
{
 800350c:	b580      	push	{r7, lr}
 800350e:	b084      	sub	sp, #16
 8003510:	af00      	add	r7, sp, #0
 8003512:	6078      	str	r0, [r7, #4]
 8003514:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (pObj == NULL)
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	2b00      	cmp	r3, #0
 800351a:	d103      	bne.n	8003524 <HTS221_RegisterBusIO+0x18>
  {
    ret = HTS221_ERROR;
 800351c:	f04f 33ff 	mov.w	r3, #4294967295
 8003520:	60fb      	str	r3, [r7, #12]
 8003522:	e034      	b.n	800358e <HTS221_RegisterBusIO+0x82>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 8003524:	683b      	ldr	r3, [r7, #0]
 8003526:	681a      	ldr	r2, [r3, #0]
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 800352c:	683b      	ldr	r3, [r7, #0]
 800352e:	685a      	ldr	r2, [r3, #4]
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	605a      	str	r2, [r3, #4]
    pObj->IO.BusType   = pIO->BusType;
 8003534:	683b      	ldr	r3, [r7, #0]
 8003536:	689a      	ldr	r2, [r3, #8]
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	609a      	str	r2, [r3, #8]
    pObj->IO.Address   = pIO->Address;
 800353c:	683b      	ldr	r3, [r7, #0]
 800353e:	7b1a      	ldrb	r2, [r3, #12]
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	731a      	strb	r2, [r3, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 8003544:	683b      	ldr	r3, [r7, #0]
 8003546:	691a      	ldr	r2, [r3, #16]
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	611a      	str	r2, [r3, #16]
    pObj->IO.ReadReg   = pIO->ReadReg;
 800354c:	683b      	ldr	r3, [r7, #0]
 800354e:	695a      	ldr	r2, [r3, #20]
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	615a      	str	r2, [r3, #20]
    pObj->IO.GetTick   = pIO->GetTick;
 8003554:	683b      	ldr	r3, [r7, #0]
 8003556:	699a      	ldr	r2, [r3, #24]
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	619a      	str	r2, [r3, #24]

    pObj->Ctx.read_reg  = ReadRegWrap;
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	4a0e      	ldr	r2, [pc, #56]	; (8003598 <HTS221_RegisterBusIO+0x8c>)
 8003560:	625a      	str	r2, [r3, #36]	; 0x24
    pObj->Ctx.write_reg = WriteRegWrap;
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	4a0d      	ldr	r2, [pc, #52]	; (800359c <HTS221_RegisterBusIO+0x90>)
 8003566:	621a      	str	r2, [r3, #32]
    pObj->Ctx.mdelay    = pIO->Delay;
 8003568:	683b      	ldr	r3, [r7, #0]
 800356a:	69da      	ldr	r2, [r3, #28]
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	629a      	str	r2, [r3, #40]	; 0x28
    pObj->Ctx.handle   = pObj;
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	687a      	ldr	r2, [r7, #4]
 8003574:	62da      	str	r2, [r3, #44]	; 0x2c

    if (pObj->IO.Init != NULL)
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	2b00      	cmp	r3, #0
 800357c:	d004      	beq.n	8003588 <HTS221_RegisterBusIO+0x7c>
    {
      ret = pObj->IO.Init();
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	4798      	blx	r3
 8003584:	60f8      	str	r0, [r7, #12]
 8003586:	e002      	b.n	800358e <HTS221_RegisterBusIO+0x82>
    }
    else
    {
      ret = HTS221_ERROR;
 8003588:	f04f 33ff 	mov.w	r3, #4294967295
 800358c:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 800358e:	68fb      	ldr	r3, [r7, #12]
}
 8003590:	4618      	mov	r0, r3
 8003592:	3710      	adds	r7, #16
 8003594:	46bd      	mov	sp, r7
 8003596:	bd80      	pop	{r7, pc}
 8003598:	08003bcb 	.word	0x08003bcb
 800359c:	08003c2d 	.word	0x08003c2d

080035a0 <HTS221_Init>:
  * @brief  Initialize the HTS221 sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t HTS221_Init(HTS221_Object_t *pObj)
{
 80035a0:	b580      	push	{r7, lr}
 80035a2:	b082      	sub	sp, #8
 80035a4:	af00      	add	r7, sp, #0
 80035a6:	6078      	str	r0, [r7, #4]
  if (pObj->is_initialized == 0U)
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d108      	bne.n	80035c4 <HTS221_Init+0x24>
  {
    if (HTS221_Initialize(pObj) != HTS221_OK)
 80035b2:	6878      	ldr	r0, [r7, #4]
 80035b4:	f000 faa4 	bl	8003b00 <HTS221_Initialize>
 80035b8:	4603      	mov	r3, r0
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d002      	beq.n	80035c4 <HTS221_Init+0x24>
    {
      return HTS221_ERROR;
 80035be:	f04f 33ff 	mov.w	r3, #4294967295
 80035c2:	e004      	b.n	80035ce <HTS221_Init+0x2e>
    }
  }

  pObj->is_initialized = 1;
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	2201      	movs	r2, #1
 80035c8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return HTS221_OK;
 80035cc:	2300      	movs	r3, #0
}
 80035ce:	4618      	mov	r0, r3
 80035d0:	3708      	adds	r7, #8
 80035d2:	46bd      	mov	sp, r7
 80035d4:	bd80      	pop	{r7, pc}

080035d6 <HTS221_DeInit>:
  * @brief  Deinitialize the HTS221 sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t HTS221_DeInit(HTS221_Object_t *pObj)
{
 80035d6:	b580      	push	{r7, lr}
 80035d8:	b082      	sub	sp, #8
 80035da:	af00      	add	r7, sp, #0
 80035dc:	6078      	str	r0, [r7, #4]
  if (pObj->is_initialized == 1U)
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80035e4:	2b01      	cmp	r3, #1
 80035e6:	d111      	bne.n	800360c <HTS221_DeInit+0x36>
  {
    if (HTS221_HUM_Disable(pObj) != HTS221_OK)
 80035e8:	6878      	ldr	r0, [r7, #4]
 80035ea:	f000 f878 	bl	80036de <HTS221_HUM_Disable>
 80035ee:	4603      	mov	r3, r0
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d002      	beq.n	80035fa <HTS221_DeInit+0x24>
    {
      return HTS221_ERROR;
 80035f4:	f04f 33ff 	mov.w	r3, #4294967295
 80035f8:	e00d      	b.n	8003616 <HTS221_DeInit+0x40>
    }

    if (HTS221_TEMP_Disable(pObj) != HTS221_OK)
 80035fa:	6878      	ldr	r0, [r7, #4]
 80035fc:	f000 f95f 	bl	80038be <HTS221_TEMP_Disable>
 8003600:	4603      	mov	r3, r0
 8003602:	2b00      	cmp	r3, #0
 8003604:	d002      	beq.n	800360c <HTS221_DeInit+0x36>
    {
      return HTS221_ERROR;
 8003606:	f04f 33ff 	mov.w	r3, #4294967295
 800360a:	e004      	b.n	8003616 <HTS221_DeInit+0x40>
    }
  }

  pObj->is_initialized = 0;
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	2200      	movs	r2, #0
 8003610:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return HTS221_OK;
 8003614:	2300      	movs	r3, #0
}
 8003616:	4618      	mov	r0, r3
 8003618:	3708      	adds	r7, #8
 800361a:	46bd      	mov	sp, r7
 800361c:	bd80      	pop	{r7, pc}

0800361e <HTS221_ReadID>:
  * @param  pObj the device pObj
  * @param  Id the WHO_AM_I value
  * @retval 0 in case of success, an error code otherwise
  */
int32_t HTS221_ReadID(HTS221_Object_t *pObj, uint8_t *Id)
{
 800361e:	b580      	push	{r7, lr}
 8003620:	b082      	sub	sp, #8
 8003622:	af00      	add	r7, sp, #0
 8003624:	6078      	str	r0, [r7, #4]
 8003626:	6039      	str	r1, [r7, #0]
  if (hts221_device_id_get(&(pObj->Ctx), Id) != HTS221_OK)
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	3320      	adds	r3, #32
 800362c:	6839      	ldr	r1, [r7, #0]
 800362e:	4618      	mov	r0, r3
 8003630:	f000 fc28 	bl	8003e84 <hts221_device_id_get>
 8003634:	4603      	mov	r3, r0
 8003636:	2b00      	cmp	r3, #0
 8003638:	d002      	beq.n	8003640 <HTS221_ReadID+0x22>
  {
    return HTS221_ERROR;
 800363a:	f04f 33ff 	mov.w	r3, #4294967295
 800363e:	e000      	b.n	8003642 <HTS221_ReadID+0x24>
  }

  return HTS221_OK;
 8003640:	2300      	movs	r3, #0
}
 8003642:	4618      	mov	r0, r3
 8003644:	3708      	adds	r7, #8
 8003646:	46bd      	mov	sp, r7
 8003648:	bd80      	pop	{r7, pc}
	...

0800364c <HTS221_GetCapabilities>:
  * @param  pObj Component object pointer
  * @param  Capabilities pointer to HTS221 sensor capabilities
  * @retval 0 in case of success, an error code otherwise
  */
int32_t HTS221_GetCapabilities(HTS221_Object_t *pObj, HTS221_Capabilities_t *Capabilities)
{
 800364c:	b480      	push	{r7}
 800364e:	b083      	sub	sp, #12
 8003650:	af00      	add	r7, sp, #0
 8003652:	6078      	str	r0, [r7, #4]
 8003654:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  Capabilities->Humidity    = 1;
 8003656:	683b      	ldr	r3, [r7, #0]
 8003658:	2201      	movs	r2, #1
 800365a:	709a      	strb	r2, [r3, #2]
  Capabilities->Pressure    = 0;
 800365c:	683b      	ldr	r3, [r7, #0]
 800365e:	2200      	movs	r2, #0
 8003660:	705a      	strb	r2, [r3, #1]
  Capabilities->Temperature = 1;
 8003662:	683b      	ldr	r3, [r7, #0]
 8003664:	2201      	movs	r2, #1
 8003666:	701a      	strb	r2, [r3, #0]
  Capabilities->LowPower    = 0;
 8003668:	683b      	ldr	r3, [r7, #0]
 800366a:	2200      	movs	r2, #0
 800366c:	70da      	strb	r2, [r3, #3]
  Capabilities->HumMaxOdr   = 12.5f;
 800366e:	683b      	ldr	r3, [r7, #0]
 8003670:	4a07      	ldr	r2, [pc, #28]	; (8003690 <HTS221_GetCapabilities+0x44>)
 8003672:	605a      	str	r2, [r3, #4]
  Capabilities->TempMaxOdr  = 12.5f;
 8003674:	683b      	ldr	r3, [r7, #0]
 8003676:	4a06      	ldr	r2, [pc, #24]	; (8003690 <HTS221_GetCapabilities+0x44>)
 8003678:	609a      	str	r2, [r3, #8]
  Capabilities->PressMaxOdr = 0.0f;
 800367a:	683b      	ldr	r3, [r7, #0]
 800367c:	f04f 0200 	mov.w	r2, #0
 8003680:	60da      	str	r2, [r3, #12]
  return HTS221_OK;
 8003682:	2300      	movs	r3, #0
}
 8003684:	4618      	mov	r0, r3
 8003686:	370c      	adds	r7, #12
 8003688:	46bd      	mov	sp, r7
 800368a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800368e:	4770      	bx	lr
 8003690:	41480000 	.word	0x41480000

08003694 <HTS221_HUM_Enable>:
  * @brief  Enable the HTS221 humidity sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t HTS221_HUM_Enable(HTS221_Object_t *pObj)
{
 8003694:	b580      	push	{r7, lr}
 8003696:	b082      	sub	sp, #8
 8003698:	af00      	add	r7, sp, #0
 800369a:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->hum_is_enabled == 1U)
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80036a2:	2b01      	cmp	r3, #1
 80036a4:	d101      	bne.n	80036aa <HTS221_HUM_Enable+0x16>
  {
    return HTS221_OK;
 80036a6:	2300      	movs	r3, #0
 80036a8:	e015      	b.n	80036d6 <HTS221_HUM_Enable+0x42>
  }

  /* Check if the HTS221 temperature sensor is already enabled. */
  /* If yes, skip the enable function, if not call enable function */
  if (pObj->temp_is_enabled == 0U)
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d10b      	bne.n	80036cc <HTS221_HUM_Enable+0x38>
  {
    /* Power on the component. */
    if (hts221_power_on_set(&(pObj->Ctx), PROPERTY_ENABLE) != HTS221_OK)
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	3320      	adds	r3, #32
 80036b8:	2101      	movs	r1, #1
 80036ba:	4618      	mov	r0, r3
 80036bc:	f000 fbf3 	bl	8003ea6 <hts221_power_on_set>
 80036c0:	4603      	mov	r3, r0
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d002      	beq.n	80036cc <HTS221_HUM_Enable+0x38>
    {
      return HTS221_ERROR;
 80036c6:	f04f 33ff 	mov.w	r3, #4294967295
 80036ca:	e004      	b.n	80036d6 <HTS221_HUM_Enable+0x42>
    }
  }

  pObj->hum_is_enabled = 1;
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	2201      	movs	r2, #1
 80036d0:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

  return HTS221_OK;
 80036d4:	2300      	movs	r3, #0
}
 80036d6:	4618      	mov	r0, r3
 80036d8:	3708      	adds	r7, #8
 80036da:	46bd      	mov	sp, r7
 80036dc:	bd80      	pop	{r7, pc}

080036de <HTS221_HUM_Disable>:
  * @brief  Disable the HTS221 humidity sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t HTS221_HUM_Disable(HTS221_Object_t *pObj)
{
 80036de:	b580      	push	{r7, lr}
 80036e0:	b082      	sub	sp, #8
 80036e2:	af00      	add	r7, sp, #0
 80036e4:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->hum_is_enabled == 0U)
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d101      	bne.n	80036f4 <HTS221_HUM_Disable+0x16>
  {
    return HTS221_OK;
 80036f0:	2300      	movs	r3, #0
 80036f2:	e015      	b.n	8003720 <HTS221_HUM_Disable+0x42>
  }

  /* Check if the HTS221 temperature sensor is still enable. */
  /* If yes, skip the disable function, if not call disable function */
  if (pObj->temp_is_enabled == 0U)
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d10b      	bne.n	8003716 <HTS221_HUM_Disable+0x38>
  {
    /* Power off the component. */
    if (hts221_power_on_set(&(pObj->Ctx), PROPERTY_DISABLE) != HTS221_OK)
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	3320      	adds	r3, #32
 8003702:	2100      	movs	r1, #0
 8003704:	4618      	mov	r0, r3
 8003706:	f000 fbce 	bl	8003ea6 <hts221_power_on_set>
 800370a:	4603      	mov	r3, r0
 800370c:	2b00      	cmp	r3, #0
 800370e:	d002      	beq.n	8003716 <HTS221_HUM_Disable+0x38>
    {
      return HTS221_ERROR;
 8003710:	f04f 33ff 	mov.w	r3, #4294967295
 8003714:	e004      	b.n	8003720 <HTS221_HUM_Disable+0x42>
    }
  }

  pObj->hum_is_enabled = 0;
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	2200      	movs	r2, #0
 800371a:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

  return HTS221_OK;
 800371e:	2300      	movs	r3, #0
}
 8003720:	4618      	mov	r0, r3
 8003722:	3708      	adds	r7, #8
 8003724:	46bd      	mov	sp, r7
 8003726:	bd80      	pop	{r7, pc}

08003728 <HTS221_HUM_GetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr pointer where the output data rate is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t HTS221_HUM_GetOutputDataRate(HTS221_Object_t *pObj, float *Odr)
{
 8003728:	b580      	push	{r7, lr}
 800372a:	b082      	sub	sp, #8
 800372c:	af00      	add	r7, sp, #0
 800372e:	6078      	str	r0, [r7, #4]
 8003730:	6039      	str	r1, [r7, #0]
  return HTS221_GetOutputDataRate(pObj, Odr);
 8003732:	6839      	ldr	r1, [r7, #0]
 8003734:	6878      	ldr	r0, [r7, #4]
 8003736:	f000 f96f 	bl	8003a18 <HTS221_GetOutputDataRate>
 800373a:	4603      	mov	r3, r0
}
 800373c:	4618      	mov	r0, r3
 800373e:	3708      	adds	r7, #8
 8003740:	46bd      	mov	sp, r7
 8003742:	bd80      	pop	{r7, pc}

08003744 <HTS221_HUM_SetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t HTS221_HUM_SetOutputDataRate(HTS221_Object_t *pObj, float Odr)
{
 8003744:	b580      	push	{r7, lr}
 8003746:	b082      	sub	sp, #8
 8003748:	af00      	add	r7, sp, #0
 800374a:	6078      	str	r0, [r7, #4]
 800374c:	ed87 0a00 	vstr	s0, [r7]
  return HTS221_SetOutputDataRate(pObj, Odr);
 8003750:	ed97 0a00 	vldr	s0, [r7]
 8003754:	6878      	ldr	r0, [r7, #4]
 8003756:	f000 f9a3 	bl	8003aa0 <HTS221_SetOutputDataRate>
 800375a:	4603      	mov	r3, r0
}
 800375c:	4618      	mov	r0, r3
 800375e:	3708      	adds	r7, #8
 8003760:	46bd      	mov	sp, r7
 8003762:	bd80      	pop	{r7, pc}

08003764 <HTS221_HUM_GetHumidity>:
  * @param  pObj the device pObj
  * @param  Value pointer where the humidity value is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t HTS221_HUM_GetHumidity(HTS221_Object_t *pObj, float *Value)
{
 8003764:	b580      	push	{r7, lr}
 8003766:	b088      	sub	sp, #32
 8003768:	af00      	add	r7, sp, #0
 800376a:	6078      	str	r0, [r7, #4]
 800376c:	6039      	str	r1, [r7, #0]
  hts221_axis1bit16_t data_raw_humidity;
  lin_t lin_hum;

  if (hts221_hum_adc_point_0_get(&(pObj->Ctx), &lin_hum.x0) != HTS221_OK)
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	3320      	adds	r3, #32
 8003772:	f107 020c 	add.w	r2, r7, #12
 8003776:	4611      	mov	r1, r2
 8003778:	4618      	mov	r0, r3
 800377a:	f000 fc58 	bl	800402e <hts221_hum_adc_point_0_get>
 800377e:	4603      	mov	r3, r0
 8003780:	2b00      	cmp	r3, #0
 8003782:	d002      	beq.n	800378a <HTS221_HUM_GetHumidity+0x26>
  {
    return HTS221_ERROR;
 8003784:	f04f 33ff 	mov.w	r3, #4294967295
 8003788:	e06b      	b.n	8003862 <HTS221_HUM_GetHumidity+0xfe>
  }

  if (hts221_hum_rh_point_0_get(&(pObj->Ctx), &lin_hum.y0) != HTS221_OK)
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	f103 0220 	add.w	r2, r3, #32
 8003790:	f107 030c 	add.w	r3, r7, #12
 8003794:	3304      	adds	r3, #4
 8003796:	4619      	mov	r1, r3
 8003798:	4610      	mov	r0, r2
 800379a:	f000 fbaa 	bl	8003ef2 <hts221_hum_rh_point_0_get>
 800379e:	4603      	mov	r3, r0
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d002      	beq.n	80037aa <HTS221_HUM_GetHumidity+0x46>
  {
    return HTS221_ERROR;
 80037a4:	f04f 33ff 	mov.w	r3, #4294967295
 80037a8:	e05b      	b.n	8003862 <HTS221_HUM_GetHumidity+0xfe>
  }

  if (hts221_hum_adc_point_1_get(&(pObj->Ctx), &lin_hum.x1) != HTS221_OK)
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	f103 0220 	add.w	r2, r3, #32
 80037b0:	f107 030c 	add.w	r3, r7, #12
 80037b4:	3308      	adds	r3, #8
 80037b6:	4619      	mov	r1, r3
 80037b8:	4610      	mov	r0, r2
 80037ba:	f000 fc5c 	bl	8004076 <hts221_hum_adc_point_1_get>
 80037be:	4603      	mov	r3, r0
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d002      	beq.n	80037ca <HTS221_HUM_GetHumidity+0x66>
  {
    return HTS221_ERROR;
 80037c4:	f04f 33ff 	mov.w	r3, #4294967295
 80037c8:	e04b      	b.n	8003862 <HTS221_HUM_GetHumidity+0xfe>
  }

  if (hts221_hum_rh_point_1_get(&(pObj->Ctx), &lin_hum.y1) != HTS221_OK)
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	f103 0220 	add.w	r2, r3, #32
 80037d0:	f107 030c 	add.w	r3, r7, #12
 80037d4:	330c      	adds	r3, #12
 80037d6:	4619      	mov	r1, r3
 80037d8:	4610      	mov	r0, r2
 80037da:	f000 fba8 	bl	8003f2e <hts221_hum_rh_point_1_get>
 80037de:	4603      	mov	r3, r0
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d002      	beq.n	80037ea <HTS221_HUM_GetHumidity+0x86>
  {
    return HTS221_ERROR;
 80037e4:	f04f 33ff 	mov.w	r3, #4294967295
 80037e8:	e03b      	b.n	8003862 <HTS221_HUM_GetHumidity+0xfe>
 80037ea:	2300      	movs	r3, #0
 80037ec:	83bb      	strh	r3, [r7, #28]
  }

  (void)memset(&data_raw_humidity.i16bit, 0x00, sizeof(int16_t));
  if (hts221_humidity_raw_get(&(pObj->Ctx), &data_raw_humidity.i16bit) != HTS221_OK)
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	3320      	adds	r3, #32
 80037f2:	f107 021c 	add.w	r2, r7, #28
 80037f6:	4611      	mov	r1, r2
 80037f8:	4618      	mov	r0, r3
 80037fa:	f000 fafd 	bl	8003df8 <hts221_humidity_raw_get>
 80037fe:	4603      	mov	r3, r0
 8003800:	2b00      	cmp	r3, #0
 8003802:	d002      	beq.n	800380a <HTS221_HUM_GetHumidity+0xa6>
  {
    return HTS221_ERROR;
 8003804:	f04f 33ff 	mov.w	r3, #4294967295
 8003808:	e02b      	b.n	8003862 <HTS221_HUM_GetHumidity+0xfe>
  }

  *Value = Linear_Interpolation(&lin_hum, (float)data_raw_humidity.i16bit);
 800380a:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 800380e:	ee07 3a90 	vmov	s15, r3
 8003812:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003816:	f107 030c 	add.w	r3, r7, #12
 800381a:	eeb0 0a67 	vmov.f32	s0, s15
 800381e:	4618      	mov	r0, r3
 8003820:	f000 f99a 	bl	8003b58 <Linear_Interpolation>
 8003824:	eef0 7a40 	vmov.f32	s15, s0
 8003828:	683b      	ldr	r3, [r7, #0]
 800382a:	edc3 7a00 	vstr	s15, [r3]

  if (*Value < 0.0f)
 800382e:	683b      	ldr	r3, [r7, #0]
 8003830:	edd3 7a00 	vldr	s15, [r3]
 8003834:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003838:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800383c:	d503      	bpl.n	8003846 <HTS221_HUM_GetHumidity+0xe2>
  {
    *Value = 0.0f;
 800383e:	683b      	ldr	r3, [r7, #0]
 8003840:	f04f 0200 	mov.w	r2, #0
 8003844:	601a      	str	r2, [r3, #0]
  }

  if (*Value > 100.0f)
 8003846:	683b      	ldr	r3, [r7, #0]
 8003848:	edd3 7a00 	vldr	s15, [r3]
 800384c:	ed9f 7a07 	vldr	s14, [pc, #28]	; 800386c <HTS221_HUM_GetHumidity+0x108>
 8003850:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003854:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003858:	dd02      	ble.n	8003860 <HTS221_HUM_GetHumidity+0xfc>
  {
    *Value = 100.0f;
 800385a:	683b      	ldr	r3, [r7, #0]
 800385c:	4a04      	ldr	r2, [pc, #16]	; (8003870 <HTS221_HUM_GetHumidity+0x10c>)
 800385e:	601a      	str	r2, [r3, #0]
  }

  return HTS221_OK;
 8003860:	2300      	movs	r3, #0
}
 8003862:	4618      	mov	r0, r3
 8003864:	3720      	adds	r7, #32
 8003866:	46bd      	mov	sp, r7
 8003868:	bd80      	pop	{r7, pc}
 800386a:	bf00      	nop
 800386c:	42c80000 	.word	0x42c80000
 8003870:	42c80000 	.word	0x42c80000

08003874 <HTS221_TEMP_Enable>:
  * @brief  Enable the HTS221 temperature sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t HTS221_TEMP_Enable(HTS221_Object_t *pObj)
{
 8003874:	b580      	push	{r7, lr}
 8003876:	b082      	sub	sp, #8
 8003878:	af00      	add	r7, sp, #0
 800387a:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->temp_is_enabled == 1U)
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8003882:	2b01      	cmp	r3, #1
 8003884:	d101      	bne.n	800388a <HTS221_TEMP_Enable+0x16>
  {
    return HTS221_OK;
 8003886:	2300      	movs	r3, #0
 8003888:	e015      	b.n	80038b6 <HTS221_TEMP_Enable+0x42>
  }

  /* Check if the HTS221 humidity sensor is already enabled. */
  /* If yes, skip the enable function, if not call enable function */
  if (pObj->hum_is_enabled == 0U)
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8003890:	2b00      	cmp	r3, #0
 8003892:	d10b      	bne.n	80038ac <HTS221_TEMP_Enable+0x38>
  {
    /* Power on the component. */
    if (hts221_power_on_set(&(pObj->Ctx), PROPERTY_ENABLE) != HTS221_OK)
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	3320      	adds	r3, #32
 8003898:	2101      	movs	r1, #1
 800389a:	4618      	mov	r0, r3
 800389c:	f000 fb03 	bl	8003ea6 <hts221_power_on_set>
 80038a0:	4603      	mov	r3, r0
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d002      	beq.n	80038ac <HTS221_TEMP_Enable+0x38>
    {
      return HTS221_ERROR;
 80038a6:	f04f 33ff 	mov.w	r3, #4294967295
 80038aa:	e004      	b.n	80038b6 <HTS221_TEMP_Enable+0x42>
    }
  }

  pObj->temp_is_enabled = 1;
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	2201      	movs	r2, #1
 80038b0:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32

  return HTS221_OK;
 80038b4:	2300      	movs	r3, #0
}
 80038b6:	4618      	mov	r0, r3
 80038b8:	3708      	adds	r7, #8
 80038ba:	46bd      	mov	sp, r7
 80038bc:	bd80      	pop	{r7, pc}

080038be <HTS221_TEMP_Disable>:
  * @brief  Disable the HTS221 temperature sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t HTS221_TEMP_Disable(HTS221_Object_t *pObj)
{
 80038be:	b580      	push	{r7, lr}
 80038c0:	b082      	sub	sp, #8
 80038c2:	af00      	add	r7, sp, #0
 80038c4:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->temp_is_enabled == 0U)
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d101      	bne.n	80038d4 <HTS221_TEMP_Disable+0x16>
  {
    return HTS221_OK;
 80038d0:	2300      	movs	r3, #0
 80038d2:	e015      	b.n	8003900 <HTS221_TEMP_Disable+0x42>
  }

  /* Check if the HTS221 humidity sensor is still enable. */
  /* If yes, skip the disable function, if not call disable function */
  if (pObj->hum_is_enabled == 0U)
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d10b      	bne.n	80038f6 <HTS221_TEMP_Disable+0x38>
  {
    /* Power off the component. */
    if (hts221_power_on_set(&(pObj->Ctx), PROPERTY_DISABLE) != HTS221_OK)
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	3320      	adds	r3, #32
 80038e2:	2100      	movs	r1, #0
 80038e4:	4618      	mov	r0, r3
 80038e6:	f000 fade 	bl	8003ea6 <hts221_power_on_set>
 80038ea:	4603      	mov	r3, r0
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d002      	beq.n	80038f6 <HTS221_TEMP_Disable+0x38>
    {
      return HTS221_ERROR;
 80038f0:	f04f 33ff 	mov.w	r3, #4294967295
 80038f4:	e004      	b.n	8003900 <HTS221_TEMP_Disable+0x42>
    }
  }

  pObj->temp_is_enabled = 0;
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	2200      	movs	r2, #0
 80038fa:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32

  return HTS221_OK;
 80038fe:	2300      	movs	r3, #0
}
 8003900:	4618      	mov	r0, r3
 8003902:	3708      	adds	r7, #8
 8003904:	46bd      	mov	sp, r7
 8003906:	bd80      	pop	{r7, pc}

08003908 <HTS221_TEMP_GetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr pointer where the output data rate is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t HTS221_TEMP_GetOutputDataRate(HTS221_Object_t *pObj, float *Odr)
{
 8003908:	b580      	push	{r7, lr}
 800390a:	b082      	sub	sp, #8
 800390c:	af00      	add	r7, sp, #0
 800390e:	6078      	str	r0, [r7, #4]
 8003910:	6039      	str	r1, [r7, #0]
  return HTS221_GetOutputDataRate(pObj, Odr);
 8003912:	6839      	ldr	r1, [r7, #0]
 8003914:	6878      	ldr	r0, [r7, #4]
 8003916:	f000 f87f 	bl	8003a18 <HTS221_GetOutputDataRate>
 800391a:	4603      	mov	r3, r0
}
 800391c:	4618      	mov	r0, r3
 800391e:	3708      	adds	r7, #8
 8003920:	46bd      	mov	sp, r7
 8003922:	bd80      	pop	{r7, pc}

08003924 <HTS221_TEMP_SetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t HTS221_TEMP_SetOutputDataRate(HTS221_Object_t *pObj, float Odr)
{
 8003924:	b580      	push	{r7, lr}
 8003926:	b082      	sub	sp, #8
 8003928:	af00      	add	r7, sp, #0
 800392a:	6078      	str	r0, [r7, #4]
 800392c:	ed87 0a00 	vstr	s0, [r7]
  return HTS221_SetOutputDataRate(pObj, Odr);
 8003930:	ed97 0a00 	vldr	s0, [r7]
 8003934:	6878      	ldr	r0, [r7, #4]
 8003936:	f000 f8b3 	bl	8003aa0 <HTS221_SetOutputDataRate>
 800393a:	4603      	mov	r3, r0
}
 800393c:	4618      	mov	r0, r3
 800393e:	3708      	adds	r7, #8
 8003940:	46bd      	mov	sp, r7
 8003942:	bd80      	pop	{r7, pc}

08003944 <HTS221_TEMP_GetTemperature>:
  * @param  pObj the device pObj
  * @param  Value pointer where the temperature value is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t HTS221_TEMP_GetTemperature(HTS221_Object_t *pObj, float *Value)
{
 8003944:	b580      	push	{r7, lr}
 8003946:	b088      	sub	sp, #32
 8003948:	af00      	add	r7, sp, #0
 800394a:	6078      	str	r0, [r7, #4]
 800394c:	6039      	str	r1, [r7, #0]
  hts221_axis1bit16_t data_raw_temperature;
  lin_t lin_temp;

  if (hts221_temp_adc_point_0_get(&(pObj->Ctx), &lin_temp.x0) != HTS221_OK)
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	3320      	adds	r3, #32
 8003952:	f107 020c 	add.w	r2, r7, #12
 8003956:	4611      	mov	r1, r2
 8003958:	4618      	mov	r0, r3
 800395a:	f000 fbb0 	bl	80040be <hts221_temp_adc_point_0_get>
 800395e:	4603      	mov	r3, r0
 8003960:	2b00      	cmp	r3, #0
 8003962:	d002      	beq.n	800396a <HTS221_TEMP_GetTemperature+0x26>
  {
    return HTS221_ERROR;
 8003964:	f04f 33ff 	mov.w	r3, #4294967295
 8003968:	e052      	b.n	8003a10 <HTS221_TEMP_GetTemperature+0xcc>
  }

  if (hts221_temp_deg_point_0_get(&(pObj->Ctx), &lin_temp.y0) != HTS221_OK)
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	f103 0220 	add.w	r2, r3, #32
 8003970:	f107 030c 	add.w	r3, r7, #12
 8003974:	3304      	adds	r3, #4
 8003976:	4619      	mov	r1, r3
 8003978:	4610      	mov	r0, r2
 800397a:	f000 faf6 	bl	8003f6a <hts221_temp_deg_point_0_get>
 800397e:	4603      	mov	r3, r0
 8003980:	2b00      	cmp	r3, #0
 8003982:	d002      	beq.n	800398a <HTS221_TEMP_GetTemperature+0x46>
  {
    return HTS221_ERROR;
 8003984:	f04f 33ff 	mov.w	r3, #4294967295
 8003988:	e042      	b.n	8003a10 <HTS221_TEMP_GetTemperature+0xcc>
  }

  if (hts221_temp_adc_point_1_get(&(pObj->Ctx), &lin_temp.x1) != HTS221_OK)
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	f103 0220 	add.w	r2, r3, #32
 8003990:	f107 030c 	add.w	r3, r7, #12
 8003994:	3308      	adds	r3, #8
 8003996:	4619      	mov	r1, r3
 8003998:	4610      	mov	r0, r2
 800399a:	f000 fbb4 	bl	8004106 <hts221_temp_adc_point_1_get>
 800399e:	4603      	mov	r3, r0
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d002      	beq.n	80039aa <HTS221_TEMP_GetTemperature+0x66>
  {
    return HTS221_ERROR;
 80039a4:	f04f 33ff 	mov.w	r3, #4294967295
 80039a8:	e032      	b.n	8003a10 <HTS221_TEMP_GetTemperature+0xcc>
  }

  if (hts221_temp_deg_point_1_get(&(pObj->Ctx), &lin_temp.y1) != HTS221_OK)
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	f103 0220 	add.w	r2, r3, #32
 80039b0:	f107 030c 	add.w	r3, r7, #12
 80039b4:	330c      	adds	r3, #12
 80039b6:	4619      	mov	r1, r3
 80039b8:	4610      	mov	r0, r2
 80039ba:	f000 fb07 	bl	8003fcc <hts221_temp_deg_point_1_get>
 80039be:	4603      	mov	r3, r0
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d002      	beq.n	80039ca <HTS221_TEMP_GetTemperature+0x86>
  {
    return HTS221_ERROR;
 80039c4:	f04f 33ff 	mov.w	r3, #4294967295
 80039c8:	e022      	b.n	8003a10 <HTS221_TEMP_GetTemperature+0xcc>
 80039ca:	2300      	movs	r3, #0
 80039cc:	83bb      	strh	r3, [r7, #28]
  }

  (void)memset(&data_raw_temperature.i16bit, 0x00, sizeof(int16_t));
  if (hts221_temperature_raw_get(&(pObj->Ctx), &data_raw_temperature.i16bit) != HTS221_OK)
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	3320      	adds	r3, #32
 80039d2:	f107 021c 	add.w	r2, r7, #28
 80039d6:	4611      	mov	r1, r2
 80039d8:	4618      	mov	r0, r3
 80039da:	f000 fa30 	bl	8003e3e <hts221_temperature_raw_get>
 80039de:	4603      	mov	r3, r0
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d002      	beq.n	80039ea <HTS221_TEMP_GetTemperature+0xa6>
  {
    return HTS221_ERROR;
 80039e4:	f04f 33ff 	mov.w	r3, #4294967295
 80039e8:	e012      	b.n	8003a10 <HTS221_TEMP_GetTemperature+0xcc>
  }

  *Value = Linear_Interpolation(&lin_temp, (float)data_raw_temperature.i16bit);
 80039ea:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 80039ee:	ee07 3a90 	vmov	s15, r3
 80039f2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80039f6:	f107 030c 	add.w	r3, r7, #12
 80039fa:	eeb0 0a67 	vmov.f32	s0, s15
 80039fe:	4618      	mov	r0, r3
 8003a00:	f000 f8aa 	bl	8003b58 <Linear_Interpolation>
 8003a04:	eef0 7a40 	vmov.f32	s15, s0
 8003a08:	683b      	ldr	r3, [r7, #0]
 8003a0a:	edc3 7a00 	vstr	s15, [r3]

  return HTS221_OK;
 8003a0e:	2300      	movs	r3, #0
}
 8003a10:	4618      	mov	r0, r3
 8003a12:	3720      	adds	r7, #32
 8003a14:	46bd      	mov	sp, r7
 8003a16:	bd80      	pop	{r7, pc}

08003a18 <HTS221_GetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t HTS221_GetOutputDataRate(HTS221_Object_t *pObj, float *Odr)
{
 8003a18:	b580      	push	{r7, lr}
 8003a1a:	b084      	sub	sp, #16
 8003a1c:	af00      	add	r7, sp, #0
 8003a1e:	6078      	str	r0, [r7, #4]
 8003a20:	6039      	str	r1, [r7, #0]
  int32_t ret = HTS221_OK;
 8003a22:	2300      	movs	r3, #0
 8003a24:	60fb      	str	r3, [r7, #12]
  hts221_odr_t odr_low_level;

  if (hts221_data_rate_get(&(pObj->Ctx), &odr_low_level) != HTS221_OK)
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	3320      	adds	r3, #32
 8003a2a:	f107 020b 	add.w	r2, r7, #11
 8003a2e:	4611      	mov	r1, r2
 8003a30:	4618      	mov	r0, r3
 8003a32:	f000 f983 	bl	8003d3c <hts221_data_rate_get>
 8003a36:	4603      	mov	r3, r0
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d002      	beq.n	8003a42 <HTS221_GetOutputDataRate+0x2a>
  {
    return HTS221_ERROR;
 8003a3c:	f04f 33ff 	mov.w	r3, #4294967295
 8003a40:	e025      	b.n	8003a8e <HTS221_GetOutputDataRate+0x76>
  }

  switch (odr_low_level)
 8003a42:	7afb      	ldrb	r3, [r7, #11]
 8003a44:	2b03      	cmp	r3, #3
 8003a46:	d81d      	bhi.n	8003a84 <HTS221_GetOutputDataRate+0x6c>
 8003a48:	a201      	add	r2, pc, #4	; (adr r2, 8003a50 <HTS221_GetOutputDataRate+0x38>)
 8003a4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a4e:	bf00      	nop
 8003a50:	08003a61 	.word	0x08003a61
 8003a54:	08003a6b 	.word	0x08003a6b
 8003a58:	08003a75 	.word	0x08003a75
 8003a5c:	08003a7d 	.word	0x08003a7d
  {
    case HTS221_ONE_SHOT:
      *Odr = 0.0f;
 8003a60:	683b      	ldr	r3, [r7, #0]
 8003a62:	f04f 0200 	mov.w	r2, #0
 8003a66:	601a      	str	r2, [r3, #0]
      break;
 8003a68:	e010      	b.n	8003a8c <HTS221_GetOutputDataRate+0x74>

    case HTS221_ODR_1Hz:
      *Odr = 1.0f;
 8003a6a:	683b      	ldr	r3, [r7, #0]
 8003a6c:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8003a70:	601a      	str	r2, [r3, #0]
      break;
 8003a72:	e00b      	b.n	8003a8c <HTS221_GetOutputDataRate+0x74>

    case HTS221_ODR_7Hz:
      *Odr = 7.0f;
 8003a74:	683b      	ldr	r3, [r7, #0]
 8003a76:	4a08      	ldr	r2, [pc, #32]	; (8003a98 <HTS221_GetOutputDataRate+0x80>)
 8003a78:	601a      	str	r2, [r3, #0]
      break;
 8003a7a:	e007      	b.n	8003a8c <HTS221_GetOutputDataRate+0x74>

    case HTS221_ODR_12Hz5:
      *Odr = 12.5f;
 8003a7c:	683b      	ldr	r3, [r7, #0]
 8003a7e:	4a07      	ldr	r2, [pc, #28]	; (8003a9c <HTS221_GetOutputDataRate+0x84>)
 8003a80:	601a      	str	r2, [r3, #0]
      break;
 8003a82:	e003      	b.n	8003a8c <HTS221_GetOutputDataRate+0x74>

    default:
      ret = HTS221_ERROR;
 8003a84:	f04f 33ff 	mov.w	r3, #4294967295
 8003a88:	60fb      	str	r3, [r7, #12]
      break;
 8003a8a:	bf00      	nop
  }

  return ret;
 8003a8c:	68fb      	ldr	r3, [r7, #12]
}
 8003a8e:	4618      	mov	r0, r3
 8003a90:	3710      	adds	r7, #16
 8003a92:	46bd      	mov	sp, r7
 8003a94:	bd80      	pop	{r7, pc}
 8003a96:	bf00      	nop
 8003a98:	40e00000 	.word	0x40e00000
 8003a9c:	41480000 	.word	0x41480000

08003aa0 <HTS221_SetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value to be set
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t HTS221_SetOutputDataRate(HTS221_Object_t *pObj, float Odr)
{
 8003aa0:	b580      	push	{r7, lr}
 8003aa2:	b084      	sub	sp, #16
 8003aa4:	af00      	add	r7, sp, #0
 8003aa6:	6078      	str	r0, [r7, #4]
 8003aa8:	ed87 0a00 	vstr	s0, [r7]
  hts221_odr_t new_odr;

  new_odr = (Odr <= 1.0f) ? HTS221_ODR_1Hz
            : (Odr <= 7.0f) ? HTS221_ODR_7Hz
 8003aac:	edd7 7a00 	vldr	s15, [r7]
 8003ab0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003ab4:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003ab8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003abc:	d801      	bhi.n	8003ac2 <HTS221_SetOutputDataRate+0x22>
 8003abe:	2301      	movs	r3, #1
 8003ac0:	e00b      	b.n	8003ada <HTS221_SetOutputDataRate+0x3a>
 8003ac2:	edd7 7a00 	vldr	s15, [r7]
 8003ac6:	eeb1 7a0c 	vmov.f32	s14, #28	; 0x40e00000  7.0
 8003aca:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003ace:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003ad2:	d801      	bhi.n	8003ad8 <HTS221_SetOutputDataRate+0x38>
 8003ad4:	2302      	movs	r3, #2
 8003ad6:	e000      	b.n	8003ada <HTS221_SetOutputDataRate+0x3a>
 8003ad8:	2303      	movs	r3, #3
  new_odr = (Odr <= 1.0f) ? HTS221_ODR_1Hz
 8003ada:	73fb      	strb	r3, [r7, #15]
            :                 HTS221_ODR_12Hz5;

  if (hts221_data_rate_set(&(pObj->Ctx), new_odr) != HTS221_OK)
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	3320      	adds	r3, #32
 8003ae0:	7bfa      	ldrb	r2, [r7, #15]
 8003ae2:	4611      	mov	r1, r2
 8003ae4:	4618      	mov	r0, r3
 8003ae6:	f000 f902 	bl	8003cee <hts221_data_rate_set>
 8003aea:	4603      	mov	r3, r0
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d002      	beq.n	8003af6 <HTS221_SetOutputDataRate+0x56>
  {
    return HTS221_ERROR;
 8003af0:	f04f 33ff 	mov.w	r3, #4294967295
 8003af4:	e000      	b.n	8003af8 <HTS221_SetOutputDataRate+0x58>
  }

  return HTS221_OK;
 8003af6:	2300      	movs	r3, #0
}
 8003af8:	4618      	mov	r0, r3
 8003afa:	3710      	adds	r7, #16
 8003afc:	46bd      	mov	sp, r7
 8003afe:	bd80      	pop	{r7, pc}

08003b00 <HTS221_Initialize>:
  * @brief  Initialize the HTS221 sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t HTS221_Initialize(HTS221_Object_t *pObj)
{
 8003b00:	b580      	push	{r7, lr}
 8003b02:	b082      	sub	sp, #8
 8003b04:	af00      	add	r7, sp, #0
 8003b06:	6078      	str	r0, [r7, #4]
  /* Power off the component. */
  if (hts221_power_on_set(&(pObj->Ctx), PROPERTY_DISABLE) != HTS221_OK)
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	3320      	adds	r3, #32
 8003b0c:	2100      	movs	r1, #0
 8003b0e:	4618      	mov	r0, r3
 8003b10:	f000 f9c9 	bl	8003ea6 <hts221_power_on_set>
 8003b14:	4603      	mov	r3, r0
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d002      	beq.n	8003b20 <HTS221_Initialize+0x20>
  {
    return HTS221_ERROR;
 8003b1a:	f04f 33ff 	mov.w	r3, #4294967295
 8003b1e:	e017      	b.n	8003b50 <HTS221_Initialize+0x50>
  }

  /* Enable BDU */
  if (hts221_block_data_update_set(&(pObj->Ctx), PROPERTY_ENABLE) != HTS221_OK)
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	3320      	adds	r3, #32
 8003b24:	2101      	movs	r1, #1
 8003b26:	4618      	mov	r0, r3
 8003b28:	f000 f940 	bl	8003dac <hts221_block_data_update_set>
 8003b2c:	4603      	mov	r3, r0
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d002      	beq.n	8003b38 <HTS221_Initialize+0x38>
  {
    return HTS221_ERROR;
 8003b32:	f04f 33ff 	mov.w	r3, #4294967295
 8003b36:	e00b      	b.n	8003b50 <HTS221_Initialize+0x50>
  }

  /* Set default ODR */
  if (HTS221_SetOutputDataRate(pObj, 1.0f) != HTS221_OK)
 8003b38:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8003b3c:	6878      	ldr	r0, [r7, #4]
 8003b3e:	f7ff ffaf 	bl	8003aa0 <HTS221_SetOutputDataRate>
 8003b42:	4603      	mov	r3, r0
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d002      	beq.n	8003b4e <HTS221_Initialize+0x4e>
  {
    return HTS221_ERROR;
 8003b48:	f04f 33ff 	mov.w	r3, #4294967295
 8003b4c:	e000      	b.n	8003b50 <HTS221_Initialize+0x50>
  }

  return HTS221_OK;
 8003b4e:	2300      	movs	r3, #0
}
 8003b50:	4618      	mov	r0, r3
 8003b52:	3708      	adds	r7, #8
 8003b54:	46bd      	mov	sp, r7
 8003b56:	bd80      	pop	{r7, pc}

08003b58 <Linear_Interpolation>:
  * @param  Lin the line
  * @param  Coeff the coefficient
  * @retval Calculation result
  */
static float Linear_Interpolation(lin_t *Lin, float Coeff)
{
 8003b58:	b480      	push	{r7}
 8003b5a:	b083      	sub	sp, #12
 8003b5c:	af00      	add	r7, sp, #0
 8003b5e:	6078      	str	r0, [r7, #4]
 8003b60:	ed87 0a00 	vstr	s0, [r7]
  return (((Lin->y1 - Lin->y0) * Coeff) + ((Lin->x1 * Lin->y0) - (Lin->x0 * Lin->y1))) / (Lin->x1 - Lin->x0);
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	ed93 7a03 	vldr	s14, [r3, #12]
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	edd3 7a01 	vldr	s15, [r3, #4]
 8003b70:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003b74:	edd7 7a00 	vldr	s15, [r7]
 8003b78:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	edd3 6a02 	vldr	s13, [r3, #8]
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	edd3 7a01 	vldr	s15, [r3, #4]
 8003b88:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	ed93 6a00 	vldr	s12, [r3]
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	edd3 7a03 	vldr	s15, [r3, #12]
 8003b98:	ee66 7a27 	vmul.f32	s15, s12, s15
 8003b9c:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8003ba0:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	edd3 6a02 	vldr	s13, [r3, #8]
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	edd3 7a00 	vldr	s15, [r3]
 8003bb0:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8003bb4:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8003bb8:	eef0 7a66 	vmov.f32	s15, s13
}
 8003bbc:	eeb0 0a67 	vmov.f32	s0, s15
 8003bc0:	370c      	adds	r7, #12
 8003bc2:	46bd      	mov	sp, r7
 8003bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bc8:	4770      	bx	lr

08003bca <ReadRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t ReadRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8003bca:	b590      	push	{r4, r7, lr}
 8003bcc:	b087      	sub	sp, #28
 8003bce:	af00      	add	r7, sp, #0
 8003bd0:	60f8      	str	r0, [r7, #12]
 8003bd2:	607a      	str	r2, [r7, #4]
 8003bd4:	461a      	mov	r2, r3
 8003bd6:	460b      	mov	r3, r1
 8003bd8:	72fb      	strb	r3, [r7, #11]
 8003bda:	4613      	mov	r3, r2
 8003bdc:	813b      	strh	r3, [r7, #8]
  HTS221_Object_t *pObj = (HTS221_Object_t *)Handle;
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	617b      	str	r3, [r7, #20]

  if (pObj->IO.BusType == (uint32_t)HTS221_I2C_BUS) /* I2C */
 8003be2:	697b      	ldr	r3, [r7, #20]
 8003be4:	689b      	ldr	r3, [r3, #8]
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d10e      	bne.n	8003c08 <ReadRegWrap+0x3e>
  {
    /* Enable Multi-byte read */
    return pObj->IO.ReadReg(pObj->IO.Address, (Reg | 0x80U), pData, Length);
 8003bea:	697b      	ldr	r3, [r7, #20]
 8003bec:	695c      	ldr	r4, [r3, #20]
 8003bee:	697b      	ldr	r3, [r7, #20]
 8003bf0:	7b1b      	ldrb	r3, [r3, #12]
 8003bf2:	b298      	uxth	r0, r3
 8003bf4:	7afb      	ldrb	r3, [r7, #11]
 8003bf6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003bfa:	b2db      	uxtb	r3, r3
 8003bfc:	b299      	uxth	r1, r3
 8003bfe:	893b      	ldrh	r3, [r7, #8]
 8003c00:	687a      	ldr	r2, [r7, #4]
 8003c02:	47a0      	blx	r4
 8003c04:	4603      	mov	r3, r0
 8003c06:	e00d      	b.n	8003c24 <ReadRegWrap+0x5a>
  }
  else /* SPI 3-Wires */
  {
    /* Enable Multi-byte read */
    return pObj->IO.ReadReg(pObj->IO.Address, (Reg | 0x40U), pData, Length);
 8003c08:	697b      	ldr	r3, [r7, #20]
 8003c0a:	695c      	ldr	r4, [r3, #20]
 8003c0c:	697b      	ldr	r3, [r7, #20]
 8003c0e:	7b1b      	ldrb	r3, [r3, #12]
 8003c10:	b298      	uxth	r0, r3
 8003c12:	7afb      	ldrb	r3, [r7, #11]
 8003c14:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003c18:	b2db      	uxtb	r3, r3
 8003c1a:	b299      	uxth	r1, r3
 8003c1c:	893b      	ldrh	r3, [r7, #8]
 8003c1e:	687a      	ldr	r2, [r7, #4]
 8003c20:	47a0      	blx	r4
 8003c22:	4603      	mov	r3, r0
  }
}
 8003c24:	4618      	mov	r0, r3
 8003c26:	371c      	adds	r7, #28
 8003c28:	46bd      	mov	sp, r7
 8003c2a:	bd90      	pop	{r4, r7, pc}

08003c2c <WriteRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t WriteRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8003c2c:	b590      	push	{r4, r7, lr}
 8003c2e:	b087      	sub	sp, #28
 8003c30:	af00      	add	r7, sp, #0
 8003c32:	60f8      	str	r0, [r7, #12]
 8003c34:	607a      	str	r2, [r7, #4]
 8003c36:	461a      	mov	r2, r3
 8003c38:	460b      	mov	r3, r1
 8003c3a:	72fb      	strb	r3, [r7, #11]
 8003c3c:	4613      	mov	r3, r2
 8003c3e:	813b      	strh	r3, [r7, #8]
  HTS221_Object_t *pObj = (HTS221_Object_t *)Handle;
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	617b      	str	r3, [r7, #20]

  if (pObj->IO.BusType == (uint32_t)HTS221_I2C_BUS) /* I2C */
 8003c44:	697b      	ldr	r3, [r7, #20]
 8003c46:	689b      	ldr	r3, [r3, #8]
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d10e      	bne.n	8003c6a <WriteRegWrap+0x3e>
  {
    /* Enable Multi-byte write */
    return pObj->IO.WriteReg(pObj->IO.Address, (Reg | 0x80U), pData, Length);
 8003c4c:	697b      	ldr	r3, [r7, #20]
 8003c4e:	691c      	ldr	r4, [r3, #16]
 8003c50:	697b      	ldr	r3, [r7, #20]
 8003c52:	7b1b      	ldrb	r3, [r3, #12]
 8003c54:	b298      	uxth	r0, r3
 8003c56:	7afb      	ldrb	r3, [r7, #11]
 8003c58:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003c5c:	b2db      	uxtb	r3, r3
 8003c5e:	b299      	uxth	r1, r3
 8003c60:	893b      	ldrh	r3, [r7, #8]
 8003c62:	687a      	ldr	r2, [r7, #4]
 8003c64:	47a0      	blx	r4
 8003c66:	4603      	mov	r3, r0
 8003c68:	e00d      	b.n	8003c86 <WriteRegWrap+0x5a>
  }
  else /* SPI 3-Wires */
  {
    /* Enable Multi-byte write */
    return pObj->IO.WriteReg(pObj->IO.Address, (Reg | 0x40U), pData, Length);
 8003c6a:	697b      	ldr	r3, [r7, #20]
 8003c6c:	691c      	ldr	r4, [r3, #16]
 8003c6e:	697b      	ldr	r3, [r7, #20]
 8003c70:	7b1b      	ldrb	r3, [r3, #12]
 8003c72:	b298      	uxth	r0, r3
 8003c74:	7afb      	ldrb	r3, [r7, #11]
 8003c76:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003c7a:	b2db      	uxtb	r3, r3
 8003c7c:	b299      	uxth	r1, r3
 8003c7e:	893b      	ldrh	r3, [r7, #8]
 8003c80:	687a      	ldr	r2, [r7, #4]
 8003c82:	47a0      	blx	r4
 8003c84:	4603      	mov	r3, r0
  }
}
 8003c86:	4618      	mov	r0, r3
 8003c88:	371c      	adds	r7, #28
 8003c8a:	46bd      	mov	sp, r7
 8003c8c:	bd90      	pop	{r4, r7, pc}

08003c8e <hts221_read_reg>:
  * @retval       interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t __weak hts221_read_reg(stmdev_ctx_t *ctx, uint8_t reg, uint8_t *data,
                               uint16_t len)
{
 8003c8e:	b590      	push	{r4, r7, lr}
 8003c90:	b087      	sub	sp, #28
 8003c92:	af00      	add	r7, sp, #0
 8003c94:	60f8      	str	r0, [r7, #12]
 8003c96:	607a      	str	r2, [r7, #4]
 8003c98:	461a      	mov	r2, r3
 8003c9a:	460b      	mov	r3, r1
 8003c9c:	72fb      	strb	r3, [r7, #11]
 8003c9e:	4613      	mov	r3, r2
 8003ca0:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	685c      	ldr	r4, [r3, #4]
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	68d8      	ldr	r0, [r3, #12]
 8003caa:	893b      	ldrh	r3, [r7, #8]
 8003cac:	7af9      	ldrb	r1, [r7, #11]
 8003cae:	687a      	ldr	r2, [r7, #4]
 8003cb0:	47a0      	blx	r4
 8003cb2:	6178      	str	r0, [r7, #20]

  return ret;
 8003cb4:	697b      	ldr	r3, [r7, #20]
}
 8003cb6:	4618      	mov	r0, r3
 8003cb8:	371c      	adds	r7, #28
 8003cba:	46bd      	mov	sp, r7
 8003cbc:	bd90      	pop	{r4, r7, pc}

08003cbe <hts221_write_reg>:
  *
  */
int32_t __weak hts221_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                                uint8_t *data,
                                uint16_t len)
{
 8003cbe:	b590      	push	{r4, r7, lr}
 8003cc0:	b087      	sub	sp, #28
 8003cc2:	af00      	add	r7, sp, #0
 8003cc4:	60f8      	str	r0, [r7, #12]
 8003cc6:	607a      	str	r2, [r7, #4]
 8003cc8:	461a      	mov	r2, r3
 8003cca:	460b      	mov	r3, r1
 8003ccc:	72fb      	strb	r3, [r7, #11]
 8003cce:	4613      	mov	r3, r2
 8003cd0:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	681c      	ldr	r4, [r3, #0]
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	68d8      	ldr	r0, [r3, #12]
 8003cda:	893b      	ldrh	r3, [r7, #8]
 8003cdc:	7af9      	ldrb	r1, [r7, #11]
 8003cde:	687a      	ldr	r2, [r7, #4]
 8003ce0:	47a0      	blx	r4
 8003ce2:	6178      	str	r0, [r7, #20]

  return ret;
 8003ce4:	697b      	ldr	r3, [r7, #20]
}
 8003ce6:	4618      	mov	r0, r3
 8003ce8:	371c      	adds	r7, #28
 8003cea:	46bd      	mov	sp, r7
 8003cec:	bd90      	pop	{r4, r7, pc}

08003cee <hts221_data_rate_set>:
  * @param  val     change the values of odr in reg CTRL_REG1
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_data_rate_set(stmdev_ctx_t *ctx, hts221_odr_t val)
{
 8003cee:	b580      	push	{r7, lr}
 8003cf0:	b084      	sub	sp, #16
 8003cf2:	af00      	add	r7, sp, #0
 8003cf4:	6078      	str	r0, [r7, #4]
 8003cf6:	460b      	mov	r3, r1
 8003cf8:	70fb      	strb	r3, [r7, #3]
  hts221_ctrl_reg1_t reg;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_CTRL_REG1, (uint8_t *) &reg, 1);
 8003cfa:	f107 0208 	add.w	r2, r7, #8
 8003cfe:	2301      	movs	r3, #1
 8003d00:	2120      	movs	r1, #32
 8003d02:	6878      	ldr	r0, [r7, #4]
 8003d04:	f7ff ffc3 	bl	8003c8e <hts221_read_reg>
 8003d08:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d10f      	bne.n	8003d30 <hts221_data_rate_set+0x42>
  {
    reg.odr = (uint8_t)val;
 8003d10:	78fb      	ldrb	r3, [r7, #3]
 8003d12:	f003 0303 	and.w	r3, r3, #3
 8003d16:	b2da      	uxtb	r2, r3
 8003d18:	7a3b      	ldrb	r3, [r7, #8]
 8003d1a:	f362 0301 	bfi	r3, r2, #0, #2
 8003d1e:	723b      	strb	r3, [r7, #8]
    ret = hts221_write_reg(ctx, HTS221_CTRL_REG1, (uint8_t *) &reg, 1);
 8003d20:	f107 0208 	add.w	r2, r7, #8
 8003d24:	2301      	movs	r3, #1
 8003d26:	2120      	movs	r1, #32
 8003d28:	6878      	ldr	r0, [r7, #4]
 8003d2a:	f7ff ffc8 	bl	8003cbe <hts221_write_reg>
 8003d2e:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8003d30:	68fb      	ldr	r3, [r7, #12]
}
 8003d32:	4618      	mov	r0, r3
 8003d34:	3710      	adds	r7, #16
 8003d36:	46bd      	mov	sp, r7
 8003d38:	bd80      	pop	{r7, pc}
	...

08003d3c <hts221_data_rate_get>:
  * @param  val     Get the values of odr in reg CTRL_REG1
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_data_rate_get(stmdev_ctx_t *ctx, hts221_odr_t *val)
{
 8003d3c:	b580      	push	{r7, lr}
 8003d3e:	b084      	sub	sp, #16
 8003d40:	af00      	add	r7, sp, #0
 8003d42:	6078      	str	r0, [r7, #4]
 8003d44:	6039      	str	r1, [r7, #0]
  hts221_ctrl_reg1_t reg;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_CTRL_REG1, (uint8_t *) &reg, 1);
 8003d46:	f107 0208 	add.w	r2, r7, #8
 8003d4a:	2301      	movs	r3, #1
 8003d4c:	2120      	movs	r1, #32
 8003d4e:	6878      	ldr	r0, [r7, #4]
 8003d50:	f7ff ff9d 	bl	8003c8e <hts221_read_reg>
 8003d54:	60f8      	str	r0, [r7, #12]

  switch (reg.odr)
 8003d56:	7a3b      	ldrb	r3, [r7, #8]
 8003d58:	f3c3 0301 	ubfx	r3, r3, #0, #2
 8003d5c:	b2db      	uxtb	r3, r3
 8003d5e:	2b03      	cmp	r3, #3
 8003d60:	d81a      	bhi.n	8003d98 <hts221_data_rate_get+0x5c>
 8003d62:	a201      	add	r2, pc, #4	; (adr r2, 8003d68 <hts221_data_rate_get+0x2c>)
 8003d64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d68:	08003d79 	.word	0x08003d79
 8003d6c:	08003d81 	.word	0x08003d81
 8003d70:	08003d89 	.word	0x08003d89
 8003d74:	08003d91 	.word	0x08003d91
  {
    case HTS221_ONE_SHOT:
      *val = HTS221_ONE_SHOT;
 8003d78:	683b      	ldr	r3, [r7, #0]
 8003d7a:	2200      	movs	r2, #0
 8003d7c:	701a      	strb	r2, [r3, #0]
      break;
 8003d7e:	e00f      	b.n	8003da0 <hts221_data_rate_get+0x64>

    case HTS221_ODR_1Hz:
      *val = HTS221_ODR_1Hz;
 8003d80:	683b      	ldr	r3, [r7, #0]
 8003d82:	2201      	movs	r2, #1
 8003d84:	701a      	strb	r2, [r3, #0]
      break;
 8003d86:	e00b      	b.n	8003da0 <hts221_data_rate_get+0x64>

    case HTS221_ODR_7Hz:
      *val = HTS221_ODR_7Hz;
 8003d88:	683b      	ldr	r3, [r7, #0]
 8003d8a:	2202      	movs	r2, #2
 8003d8c:	701a      	strb	r2, [r3, #0]
      break;
 8003d8e:	e007      	b.n	8003da0 <hts221_data_rate_get+0x64>

    case HTS221_ODR_12Hz5:
      *val = HTS221_ODR_12Hz5;
 8003d90:	683b      	ldr	r3, [r7, #0]
 8003d92:	2203      	movs	r2, #3
 8003d94:	701a      	strb	r2, [r3, #0]
      break;
 8003d96:	e003      	b.n	8003da0 <hts221_data_rate_get+0x64>

    default:
      *val = HTS221_ODR_ND;
 8003d98:	683b      	ldr	r3, [r7, #0]
 8003d9a:	2204      	movs	r2, #4
 8003d9c:	701a      	strb	r2, [r3, #0]
      break;
 8003d9e:	bf00      	nop
  }

  return ret;
 8003da0:	68fb      	ldr	r3, [r7, #12]
}
 8003da2:	4618      	mov	r0, r3
 8003da4:	3710      	adds	r7, #16
 8003da6:	46bd      	mov	sp, r7
 8003da8:	bd80      	pop	{r7, pc}
 8003daa:	bf00      	nop

08003dac <hts221_block_data_update_set>:
  * @param  val     change the values of bdu in reg CTRL_REG1
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8003dac:	b580      	push	{r7, lr}
 8003dae:	b084      	sub	sp, #16
 8003db0:	af00      	add	r7, sp, #0
 8003db2:	6078      	str	r0, [r7, #4]
 8003db4:	460b      	mov	r3, r1
 8003db6:	70fb      	strb	r3, [r7, #3]
  hts221_ctrl_reg1_t reg;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_CTRL_REG1, (uint8_t *) &reg, 1);
 8003db8:	f107 0208 	add.w	r2, r7, #8
 8003dbc:	2301      	movs	r3, #1
 8003dbe:	2120      	movs	r1, #32
 8003dc0:	6878      	ldr	r0, [r7, #4]
 8003dc2:	f7ff ff64 	bl	8003c8e <hts221_read_reg>
 8003dc6:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d10f      	bne.n	8003dee <hts221_block_data_update_set+0x42>
  {
    reg.bdu = val;
 8003dce:	78fb      	ldrb	r3, [r7, #3]
 8003dd0:	f003 0301 	and.w	r3, r3, #1
 8003dd4:	b2da      	uxtb	r2, r3
 8003dd6:	7a3b      	ldrb	r3, [r7, #8]
 8003dd8:	f362 0382 	bfi	r3, r2, #2, #1
 8003ddc:	723b      	strb	r3, [r7, #8]
    ret = hts221_write_reg(ctx, HTS221_CTRL_REG1, (uint8_t *) &reg, 1);
 8003dde:	f107 0208 	add.w	r2, r7, #8
 8003de2:	2301      	movs	r3, #1
 8003de4:	2120      	movs	r1, #32
 8003de6:	6878      	ldr	r0, [r7, #4]
 8003de8:	f7ff ff69 	bl	8003cbe <hts221_write_reg>
 8003dec:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8003dee:	68fb      	ldr	r3, [r7, #12]
}
 8003df0:	4618      	mov	r0, r3
 8003df2:	3710      	adds	r7, #16
 8003df4:	46bd      	mov	sp, r7
 8003df6:	bd80      	pop	{r7, pc}

08003df8 <hts221_humidity_raw_get>:
  * @param  buff    buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_humidity_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 8003df8:	b580      	push	{r7, lr}
 8003dfa:	b084      	sub	sp, #16
 8003dfc:	af00      	add	r7, sp, #0
 8003dfe:	6078      	str	r0, [r7, #4]
 8003e00:	6039      	str	r1, [r7, #0]
  uint8_t buff[2];
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_HUMIDITY_OUT_L, buff, 2);
 8003e02:	f107 0208 	add.w	r2, r7, #8
 8003e06:	2302      	movs	r3, #2
 8003e08:	2128      	movs	r1, #40	; 0x28
 8003e0a:	6878      	ldr	r0, [r7, #4]
 8003e0c:	f7ff ff3f 	bl	8003c8e <hts221_read_reg>
 8003e10:	60f8      	str	r0, [r7, #12]
  *val = (int16_t)buff[1];
 8003e12:	7a7b      	ldrb	r3, [r7, #9]
 8003e14:	b21a      	sxth	r2, r3
 8003e16:	683b      	ldr	r3, [r7, #0]
 8003e18:	801a      	strh	r2, [r3, #0]
  *val = (*val * 256) + (int16_t)buff[0];
 8003e1a:	683b      	ldr	r3, [r7, #0]
 8003e1c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003e20:	b29b      	uxth	r3, r3
 8003e22:	021b      	lsls	r3, r3, #8
 8003e24:	b29a      	uxth	r2, r3
 8003e26:	7a3b      	ldrb	r3, [r7, #8]
 8003e28:	b29b      	uxth	r3, r3
 8003e2a:	4413      	add	r3, r2
 8003e2c:	b29b      	uxth	r3, r3
 8003e2e:	b21a      	sxth	r2, r3
 8003e30:	683b      	ldr	r3, [r7, #0]
 8003e32:	801a      	strh	r2, [r3, #0]

  return ret;
 8003e34:	68fb      	ldr	r3, [r7, #12]
}
 8003e36:	4618      	mov	r0, r3
 8003e38:	3710      	adds	r7, #16
 8003e3a:	46bd      	mov	sp, r7
 8003e3c:	bd80      	pop	{r7, pc}

08003e3e <hts221_temperature_raw_get>:
  * @param  buff    buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_temperature_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 8003e3e:	b580      	push	{r7, lr}
 8003e40:	b084      	sub	sp, #16
 8003e42:	af00      	add	r7, sp, #0
 8003e44:	6078      	str	r0, [r7, #4]
 8003e46:	6039      	str	r1, [r7, #0]
  uint8_t buff[2];
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_TEMP_OUT_L, buff, 2);
 8003e48:	f107 0208 	add.w	r2, r7, #8
 8003e4c:	2302      	movs	r3, #2
 8003e4e:	212a      	movs	r1, #42	; 0x2a
 8003e50:	6878      	ldr	r0, [r7, #4]
 8003e52:	f7ff ff1c 	bl	8003c8e <hts221_read_reg>
 8003e56:	60f8      	str	r0, [r7, #12]
  *val = (int16_t)buff[1];
 8003e58:	7a7b      	ldrb	r3, [r7, #9]
 8003e5a:	b21a      	sxth	r2, r3
 8003e5c:	683b      	ldr	r3, [r7, #0]
 8003e5e:	801a      	strh	r2, [r3, #0]
  *val = (*val * 256) + (int16_t)buff[0];
 8003e60:	683b      	ldr	r3, [r7, #0]
 8003e62:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003e66:	b29b      	uxth	r3, r3
 8003e68:	021b      	lsls	r3, r3, #8
 8003e6a:	b29a      	uxth	r2, r3
 8003e6c:	7a3b      	ldrb	r3, [r7, #8]
 8003e6e:	b29b      	uxth	r3, r3
 8003e70:	4413      	add	r3, r2
 8003e72:	b29b      	uxth	r3, r3
 8003e74:	b21a      	sxth	r2, r3
 8003e76:	683b      	ldr	r3, [r7, #0]
 8003e78:	801a      	strh	r2, [r3, #0]

  return ret;
 8003e7a:	68fb      	ldr	r3, [r7, #12]
}
 8003e7c:	4618      	mov	r0, r3
 8003e7e:	3710      	adds	r7, #16
 8003e80:	46bd      	mov	sp, r7
 8003e82:	bd80      	pop	{r7, pc}

08003e84 <hts221_device_id_get>:
  * @param  buff    buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 8003e84:	b580      	push	{r7, lr}
 8003e86:	b084      	sub	sp, #16
 8003e88:	af00      	add	r7, sp, #0
 8003e8a:	6078      	str	r0, [r7, #4]
 8003e8c:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_WHO_AM_I, buff, 1);
 8003e8e:	2301      	movs	r3, #1
 8003e90:	683a      	ldr	r2, [r7, #0]
 8003e92:	210f      	movs	r1, #15
 8003e94:	6878      	ldr	r0, [r7, #4]
 8003e96:	f7ff fefa 	bl	8003c8e <hts221_read_reg>
 8003e9a:	60f8      	str	r0, [r7, #12]

  return ret;
 8003e9c:	68fb      	ldr	r3, [r7, #12]
}
 8003e9e:	4618      	mov	r0, r3
 8003ea0:	3710      	adds	r7, #16
 8003ea2:	46bd      	mov	sp, r7
 8003ea4:	bd80      	pop	{r7, pc}

08003ea6 <hts221_power_on_set>:
  * @param  val     change the values of pd in reg CTRL_REG1
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_power_on_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8003ea6:	b580      	push	{r7, lr}
 8003ea8:	b084      	sub	sp, #16
 8003eaa:	af00      	add	r7, sp, #0
 8003eac:	6078      	str	r0, [r7, #4]
 8003eae:	460b      	mov	r3, r1
 8003eb0:	70fb      	strb	r3, [r7, #3]
  hts221_ctrl_reg1_t reg;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_CTRL_REG1, (uint8_t *) &reg, 1);
 8003eb2:	f107 0208 	add.w	r2, r7, #8
 8003eb6:	2301      	movs	r3, #1
 8003eb8:	2120      	movs	r1, #32
 8003eba:	6878      	ldr	r0, [r7, #4]
 8003ebc:	f7ff fee7 	bl	8003c8e <hts221_read_reg>
 8003ec0:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d10f      	bne.n	8003ee8 <hts221_power_on_set+0x42>
  {
    reg.pd = val;
 8003ec8:	78fb      	ldrb	r3, [r7, #3]
 8003eca:	f003 0301 	and.w	r3, r3, #1
 8003ece:	b2da      	uxtb	r2, r3
 8003ed0:	7a3b      	ldrb	r3, [r7, #8]
 8003ed2:	f362 13c7 	bfi	r3, r2, #7, #1
 8003ed6:	723b      	strb	r3, [r7, #8]
    ret = hts221_write_reg(ctx, HTS221_CTRL_REG1, (uint8_t *) &reg, 1);
 8003ed8:	f107 0208 	add.w	r2, r7, #8
 8003edc:	2301      	movs	r3, #1
 8003ede:	2120      	movs	r1, #32
 8003ee0:	6878      	ldr	r0, [r7, #4]
 8003ee2:	f7ff feec 	bl	8003cbe <hts221_write_reg>
 8003ee6:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8003ee8:	68fb      	ldr	r3, [r7, #12]
}
 8003eea:	4618      	mov	r0, r3
 8003eec:	3710      	adds	r7, #16
 8003eee:	46bd      	mov	sp, r7
 8003ef0:	bd80      	pop	{r7, pc}

08003ef2 <hts221_hum_rh_point_0_get>:
  * @param  val     buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_hum_rh_point_0_get(stmdev_ctx_t *ctx, float_t *val)
{
 8003ef2:	b580      	push	{r7, lr}
 8003ef4:	b084      	sub	sp, #16
 8003ef6:	af00      	add	r7, sp, #0
 8003ef8:	6078      	str	r0, [r7, #4]
 8003efa:	6039      	str	r1, [r7, #0]
  uint8_t coeff;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_H0_RH_X2, &coeff, 1);
 8003efc:	f107 020b 	add.w	r2, r7, #11
 8003f00:	2301      	movs	r3, #1
 8003f02:	2130      	movs	r1, #48	; 0x30
 8003f04:	6878      	ldr	r0, [r7, #4]
 8003f06:	f7ff fec2 	bl	8003c8e <hts221_read_reg>
 8003f0a:	60f8      	str	r0, [r7, #12]
  *val = coeff / 2.0f;
 8003f0c:	7afb      	ldrb	r3, [r7, #11]
 8003f0e:	ee07 3a90 	vmov	s15, r3
 8003f12:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003f16:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8003f1a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003f1e:	683b      	ldr	r3, [r7, #0]
 8003f20:	edc3 7a00 	vstr	s15, [r3]

  return ret;
 8003f24:	68fb      	ldr	r3, [r7, #12]
}
 8003f26:	4618      	mov	r0, r3
 8003f28:	3710      	adds	r7, #16
 8003f2a:	46bd      	mov	sp, r7
 8003f2c:	bd80      	pop	{r7, pc}

08003f2e <hts221_hum_rh_point_1_get>:
  * @param  val     buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_hum_rh_point_1_get(stmdev_ctx_t *ctx, float_t *val)
{
 8003f2e:	b580      	push	{r7, lr}
 8003f30:	b084      	sub	sp, #16
 8003f32:	af00      	add	r7, sp, #0
 8003f34:	6078      	str	r0, [r7, #4]
 8003f36:	6039      	str	r1, [r7, #0]
  uint8_t coeff;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_H1_RH_X2, &coeff, 1);
 8003f38:	f107 020b 	add.w	r2, r7, #11
 8003f3c:	2301      	movs	r3, #1
 8003f3e:	2131      	movs	r1, #49	; 0x31
 8003f40:	6878      	ldr	r0, [r7, #4]
 8003f42:	f7ff fea4 	bl	8003c8e <hts221_read_reg>
 8003f46:	60f8      	str	r0, [r7, #12]
  *val = coeff / 2.0f;
 8003f48:	7afb      	ldrb	r3, [r7, #11]
 8003f4a:	ee07 3a90 	vmov	s15, r3
 8003f4e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003f52:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8003f56:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003f5a:	683b      	ldr	r3, [r7, #0]
 8003f5c:	edc3 7a00 	vstr	s15, [r3]

  return ret;
 8003f60:	68fb      	ldr	r3, [r7, #12]
}
 8003f62:	4618      	mov	r0, r3
 8003f64:	3710      	adds	r7, #16
 8003f66:	46bd      	mov	sp, r7
 8003f68:	bd80      	pop	{r7, pc}

08003f6a <hts221_temp_deg_point_0_get>:
  * @param  buff    buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_temp_deg_point_0_get(stmdev_ctx_t *ctx, float_t *val)
{
 8003f6a:	b580      	push	{r7, lr}
 8003f6c:	b086      	sub	sp, #24
 8003f6e:	af00      	add	r7, sp, #0
 8003f70:	6078      	str	r0, [r7, #4]
 8003f72:	6039      	str	r1, [r7, #0]
  hts221_t1_t0_msb_t reg;
  uint8_t coeff_h, coeff_l;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_T0_DEGC_X8, &coeff_l, 1);
 8003f74:	f107 020f 	add.w	r2, r7, #15
 8003f78:	2301      	movs	r3, #1
 8003f7a:	2132      	movs	r1, #50	; 0x32
 8003f7c:	6878      	ldr	r0, [r7, #4]
 8003f7e:	f7ff fe86 	bl	8003c8e <hts221_read_reg>
 8003f82:	6178      	str	r0, [r7, #20]

  if (ret == 0)
 8003f84:	697b      	ldr	r3, [r7, #20]
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d11b      	bne.n	8003fc2 <hts221_temp_deg_point_0_get+0x58>
  {
    ret = hts221_read_reg(ctx, HTS221_T1_T0_MSB, (uint8_t *) &reg, 1);
 8003f8a:	f107 0210 	add.w	r2, r7, #16
 8003f8e:	2301      	movs	r3, #1
 8003f90:	2135      	movs	r1, #53	; 0x35
 8003f92:	6878      	ldr	r0, [r7, #4]
 8003f94:	f7ff fe7b 	bl	8003c8e <hts221_read_reg>
 8003f98:	6178      	str	r0, [r7, #20]
    coeff_h = reg.t0_msb;
 8003f9a:	7c3b      	ldrb	r3, [r7, #16]
 8003f9c:	f3c3 0301 	ubfx	r3, r3, #0, #2
 8003fa0:	b2db      	uxtb	r3, r3
 8003fa2:	74fb      	strb	r3, [r7, #19]
    *val = ((coeff_h * 256) + coeff_l) / 8.0f;
 8003fa4:	7cfb      	ldrb	r3, [r7, #19]
 8003fa6:	021b      	lsls	r3, r3, #8
 8003fa8:	7bfa      	ldrb	r2, [r7, #15]
 8003faa:	4413      	add	r3, r2
 8003fac:	ee07 3a90 	vmov	s15, r3
 8003fb0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003fb4:	eef2 6a00 	vmov.f32	s13, #32	; 0x41000000  8.0
 8003fb8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003fbc:	683b      	ldr	r3, [r7, #0]
 8003fbe:	edc3 7a00 	vstr	s15, [r3]
  }

  return ret;
 8003fc2:	697b      	ldr	r3, [r7, #20]
}
 8003fc4:	4618      	mov	r0, r3
 8003fc6:	3718      	adds	r7, #24
 8003fc8:	46bd      	mov	sp, r7
 8003fca:	bd80      	pop	{r7, pc}

08003fcc <hts221_temp_deg_point_1_get>:
  * @param  val     buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_temp_deg_point_1_get(stmdev_ctx_t *ctx, float_t *val)
{
 8003fcc:	b580      	push	{r7, lr}
 8003fce:	b086      	sub	sp, #24
 8003fd0:	af00      	add	r7, sp, #0
 8003fd2:	6078      	str	r0, [r7, #4]
 8003fd4:	6039      	str	r1, [r7, #0]
  hts221_t1_t0_msb_t reg;
  uint8_t coeff_h, coeff_l;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_T1_DEGC_X8, &coeff_l, 1);
 8003fd6:	f107 020f 	add.w	r2, r7, #15
 8003fda:	2301      	movs	r3, #1
 8003fdc:	2133      	movs	r1, #51	; 0x33
 8003fde:	6878      	ldr	r0, [r7, #4]
 8003fe0:	f7ff fe55 	bl	8003c8e <hts221_read_reg>
 8003fe4:	6178      	str	r0, [r7, #20]

  if (ret == 0)
 8003fe6:	697b      	ldr	r3, [r7, #20]
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d11b      	bne.n	8004024 <hts221_temp_deg_point_1_get+0x58>
  {
    ret = hts221_read_reg(ctx, HTS221_T1_T0_MSB, (uint8_t *) &reg, 1);
 8003fec:	f107 0210 	add.w	r2, r7, #16
 8003ff0:	2301      	movs	r3, #1
 8003ff2:	2135      	movs	r1, #53	; 0x35
 8003ff4:	6878      	ldr	r0, [r7, #4]
 8003ff6:	f7ff fe4a 	bl	8003c8e <hts221_read_reg>
 8003ffa:	6178      	str	r0, [r7, #20]
    coeff_h = reg.t1_msb;
 8003ffc:	7c3b      	ldrb	r3, [r7, #16]
 8003ffe:	f3c3 0381 	ubfx	r3, r3, #2, #2
 8004002:	b2db      	uxtb	r3, r3
 8004004:	74fb      	strb	r3, [r7, #19]
    *val = ((coeff_h * 256) + coeff_l) / 8.0f;
 8004006:	7cfb      	ldrb	r3, [r7, #19]
 8004008:	021b      	lsls	r3, r3, #8
 800400a:	7bfa      	ldrb	r2, [r7, #15]
 800400c:	4413      	add	r3, r2
 800400e:	ee07 3a90 	vmov	s15, r3
 8004012:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004016:	eef2 6a00 	vmov.f32	s13, #32	; 0x41000000  8.0
 800401a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800401e:	683b      	ldr	r3, [r7, #0]
 8004020:	edc3 7a00 	vstr	s15, [r3]
  }

  return ret;
 8004024:	697b      	ldr	r3, [r7, #20]
}
 8004026:	4618      	mov	r0, r3
 8004028:	3718      	adds	r7, #24
 800402a:	46bd      	mov	sp, r7
 800402c:	bd80      	pop	{r7, pc}

0800402e <hts221_hum_adc_point_0_get>:
  * @param  val     buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_hum_adc_point_0_get(stmdev_ctx_t *ctx, float_t *val)
{
 800402e:	b580      	push	{r7, lr}
 8004030:	b084      	sub	sp, #16
 8004032:	af00      	add	r7, sp, #0
 8004034:	6078      	str	r0, [r7, #4]
 8004036:	6039      	str	r1, [r7, #0]
  uint8_t coeff_p[2];
  int16_t coeff;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_H0_T0_OUT_L, coeff_p, 2);
 8004038:	f107 0208 	add.w	r2, r7, #8
 800403c:	2302      	movs	r3, #2
 800403e:	2136      	movs	r1, #54	; 0x36
 8004040:	6878      	ldr	r0, [r7, #4]
 8004042:	f7ff fe24 	bl	8003c8e <hts221_read_reg>
 8004046:	60f8      	str	r0, [r7, #12]
  coeff = (coeff_p[1] * 256) + coeff_p[0];
 8004048:	7a7b      	ldrb	r3, [r7, #9]
 800404a:	b29b      	uxth	r3, r3
 800404c:	021b      	lsls	r3, r3, #8
 800404e:	b29a      	uxth	r2, r3
 8004050:	7a3b      	ldrb	r3, [r7, #8]
 8004052:	b29b      	uxth	r3, r3
 8004054:	4413      	add	r3, r2
 8004056:	b29b      	uxth	r3, r3
 8004058:	817b      	strh	r3, [r7, #10]
  *val = coeff * 1.0f;
 800405a:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800405e:	ee07 3a90 	vmov	s15, r3
 8004062:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004066:	683b      	ldr	r3, [r7, #0]
 8004068:	edc3 7a00 	vstr	s15, [r3]

  return ret;
 800406c:	68fb      	ldr	r3, [r7, #12]
}
 800406e:	4618      	mov	r0, r3
 8004070:	3710      	adds	r7, #16
 8004072:	46bd      	mov	sp, r7
 8004074:	bd80      	pop	{r7, pc}

08004076 <hts221_hum_adc_point_1_get>:
  * @param  val     buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_hum_adc_point_1_get(stmdev_ctx_t *ctx, float_t *val)
{
 8004076:	b580      	push	{r7, lr}
 8004078:	b084      	sub	sp, #16
 800407a:	af00      	add	r7, sp, #0
 800407c:	6078      	str	r0, [r7, #4]
 800407e:	6039      	str	r1, [r7, #0]
  uint8_t coeff_p[2];
  int16_t coeff;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_H1_T0_OUT_L, coeff_p, 2);
 8004080:	f107 0208 	add.w	r2, r7, #8
 8004084:	2302      	movs	r3, #2
 8004086:	213a      	movs	r1, #58	; 0x3a
 8004088:	6878      	ldr	r0, [r7, #4]
 800408a:	f7ff fe00 	bl	8003c8e <hts221_read_reg>
 800408e:	60f8      	str	r0, [r7, #12]
  coeff = (coeff_p[1] * 256) + coeff_p[0];
 8004090:	7a7b      	ldrb	r3, [r7, #9]
 8004092:	b29b      	uxth	r3, r3
 8004094:	021b      	lsls	r3, r3, #8
 8004096:	b29a      	uxth	r2, r3
 8004098:	7a3b      	ldrb	r3, [r7, #8]
 800409a:	b29b      	uxth	r3, r3
 800409c:	4413      	add	r3, r2
 800409e:	b29b      	uxth	r3, r3
 80040a0:	817b      	strh	r3, [r7, #10]
  *val = coeff * 1.0f;
 80040a2:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80040a6:	ee07 3a90 	vmov	s15, r3
 80040aa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80040ae:	683b      	ldr	r3, [r7, #0]
 80040b0:	edc3 7a00 	vstr	s15, [r3]

  return ret;
 80040b4:	68fb      	ldr	r3, [r7, #12]
}
 80040b6:	4618      	mov	r0, r3
 80040b8:	3710      	adds	r7, #16
 80040ba:	46bd      	mov	sp, r7
 80040bc:	bd80      	pop	{r7, pc}

080040be <hts221_temp_adc_point_0_get>:
  * @param  val     buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_temp_adc_point_0_get(stmdev_ctx_t *ctx, float_t *val)
{
 80040be:	b580      	push	{r7, lr}
 80040c0:	b084      	sub	sp, #16
 80040c2:	af00      	add	r7, sp, #0
 80040c4:	6078      	str	r0, [r7, #4]
 80040c6:	6039      	str	r1, [r7, #0]
  uint8_t coeff_p[2];
  int16_t coeff;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_T0_OUT_L, coeff_p, 2);
 80040c8:	f107 0208 	add.w	r2, r7, #8
 80040cc:	2302      	movs	r3, #2
 80040ce:	213c      	movs	r1, #60	; 0x3c
 80040d0:	6878      	ldr	r0, [r7, #4]
 80040d2:	f7ff fddc 	bl	8003c8e <hts221_read_reg>
 80040d6:	60f8      	str	r0, [r7, #12]
  coeff = (coeff_p[1] * 256) + coeff_p[0];
 80040d8:	7a7b      	ldrb	r3, [r7, #9]
 80040da:	b29b      	uxth	r3, r3
 80040dc:	021b      	lsls	r3, r3, #8
 80040de:	b29a      	uxth	r2, r3
 80040e0:	7a3b      	ldrb	r3, [r7, #8]
 80040e2:	b29b      	uxth	r3, r3
 80040e4:	4413      	add	r3, r2
 80040e6:	b29b      	uxth	r3, r3
 80040e8:	817b      	strh	r3, [r7, #10]
  *val = coeff * 1.0f;
 80040ea:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80040ee:	ee07 3a90 	vmov	s15, r3
 80040f2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80040f6:	683b      	ldr	r3, [r7, #0]
 80040f8:	edc3 7a00 	vstr	s15, [r3]

  return ret;
 80040fc:	68fb      	ldr	r3, [r7, #12]
}
 80040fe:	4618      	mov	r0, r3
 8004100:	3710      	adds	r7, #16
 8004102:	46bd      	mov	sp, r7
 8004104:	bd80      	pop	{r7, pc}

08004106 <hts221_temp_adc_point_1_get>:
  * @param  val     buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_temp_adc_point_1_get(stmdev_ctx_t *ctx, float_t *val)
{
 8004106:	b580      	push	{r7, lr}
 8004108:	b084      	sub	sp, #16
 800410a:	af00      	add	r7, sp, #0
 800410c:	6078      	str	r0, [r7, #4]
 800410e:	6039      	str	r1, [r7, #0]
  uint8_t coeff_p[2];
  int16_t coeff;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_T1_OUT_L, coeff_p, 2);
 8004110:	f107 0208 	add.w	r2, r7, #8
 8004114:	2302      	movs	r3, #2
 8004116:	213e      	movs	r1, #62	; 0x3e
 8004118:	6878      	ldr	r0, [r7, #4]
 800411a:	f7ff fdb8 	bl	8003c8e <hts221_read_reg>
 800411e:	60f8      	str	r0, [r7, #12]
  coeff = (coeff_p[1] * 256) + coeff_p[0];
 8004120:	7a7b      	ldrb	r3, [r7, #9]
 8004122:	b29b      	uxth	r3, r3
 8004124:	021b      	lsls	r3, r3, #8
 8004126:	b29a      	uxth	r2, r3
 8004128:	7a3b      	ldrb	r3, [r7, #8]
 800412a:	b29b      	uxth	r3, r3
 800412c:	4413      	add	r3, r2
 800412e:	b29b      	uxth	r3, r3
 8004130:	817b      	strh	r3, [r7, #10]
  *val = coeff * 1.0f;
 8004132:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8004136:	ee07 3a90 	vmov	s15, r3
 800413a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800413e:	683b      	ldr	r3, [r7, #0]
 8004140:	edc3 7a00 	vstr	s15, [r3]

  return ret;
 8004144:	68fb      	ldr	r3, [r7, #12]
}
 8004146:	4618      	mov	r0, r3
 8004148:	3710      	adds	r7, #16
 800414a:	46bd      	mov	sp, r7
 800414c:	bd80      	pop	{r7, pc}
	...

08004150 <LIS2DW12_RegisterBusIO>:
  * @brief  Register Component Bus IO operations
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DW12_RegisterBusIO(LIS2DW12_Object_t *pObj, LIS2DW12_IO_t *pIO)
{
 8004150:	b580      	push	{r7, lr}
 8004152:	b084      	sub	sp, #16
 8004154:	af00      	add	r7, sp, #0
 8004156:	6078      	str	r0, [r7, #4]
 8004158:	6039      	str	r1, [r7, #0]
  int32_t ret = LIS2DW12_OK;
 800415a:	2300      	movs	r3, #0
 800415c:	60fb      	str	r3, [r7, #12]

  if (pObj == NULL)
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	2b00      	cmp	r3, #0
 8004162:	d103      	bne.n	800416c <LIS2DW12_RegisterBusIO+0x1c>
  {
    ret = LIS2DW12_ERROR;
 8004164:	f04f 33ff 	mov.w	r3, #4294967295
 8004168:	60fb      	str	r3, [r7, #12]
 800416a:	e051      	b.n	8004210 <LIS2DW12_RegisterBusIO+0xc0>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 800416c:	683b      	ldr	r3, [r7, #0]
 800416e:	681a      	ldr	r2, [r3, #0]
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 8004174:	683b      	ldr	r3, [r7, #0]
 8004176:	685a      	ldr	r2, [r3, #4]
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	605a      	str	r2, [r3, #4]
    pObj->IO.BusType   = pIO->BusType;
 800417c:	683b      	ldr	r3, [r7, #0]
 800417e:	689a      	ldr	r2, [r3, #8]
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	609a      	str	r2, [r3, #8]
    pObj->IO.Address   = pIO->Address;
 8004184:	683b      	ldr	r3, [r7, #0]
 8004186:	7b1a      	ldrb	r2, [r3, #12]
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	731a      	strb	r2, [r3, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 800418c:	683b      	ldr	r3, [r7, #0]
 800418e:	691a      	ldr	r2, [r3, #16]
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	611a      	str	r2, [r3, #16]
    pObj->IO.ReadReg   = pIO->ReadReg;
 8004194:	683b      	ldr	r3, [r7, #0]
 8004196:	695a      	ldr	r2, [r3, #20]
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	615a      	str	r2, [r3, #20]
    pObj->IO.GetTick   = pIO->GetTick;
 800419c:	683b      	ldr	r3, [r7, #0]
 800419e:	699a      	ldr	r2, [r3, #24]
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	619a      	str	r2, [r3, #24]

    pObj->Ctx.read_reg  = ReadRegWrap;
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	4a1d      	ldr	r2, [pc, #116]	; (800421c <LIS2DW12_RegisterBusIO+0xcc>)
 80041a8:	625a      	str	r2, [r3, #36]	; 0x24
    pObj->Ctx.write_reg = WriteRegWrap;
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	4a1c      	ldr	r2, [pc, #112]	; (8004220 <LIS2DW12_RegisterBusIO+0xd0>)
 80041ae:	621a      	str	r2, [r3, #32]
    pObj->Ctx.mdelay    = pIO->Delay;
 80041b0:	683b      	ldr	r3, [r7, #0]
 80041b2:	69da      	ldr	r2, [r3, #28]
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	629a      	str	r2, [r3, #40]	; 0x28
    pObj->Ctx.handle   = pObj;
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	687a      	ldr	r2, [r7, #4]
 80041bc:	62da      	str	r2, [r3, #44]	; 0x2c

    if (pObj->IO.Init == NULL)
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d103      	bne.n	80041ce <LIS2DW12_RegisterBusIO+0x7e>
    {
      ret = LIS2DW12_ERROR;
 80041c6:	f04f 33ff 	mov.w	r3, #4294967295
 80041ca:	60fb      	str	r3, [r7, #12]
 80041cc:	e020      	b.n	8004210 <LIS2DW12_RegisterBusIO+0xc0>
    }
    else if (pObj->IO.Init() != LIS2DW12_OK)
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	4798      	blx	r3
 80041d4:	4603      	mov	r3, r0
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d003      	beq.n	80041e2 <LIS2DW12_RegisterBusIO+0x92>
    {
      ret = LIS2DW12_ERROR;
 80041da:	f04f 33ff 	mov.w	r3, #4294967295
 80041de:	60fb      	str	r3, [r7, #12]
 80041e0:	e016      	b.n	8004210 <LIS2DW12_RegisterBusIO+0xc0>
    }
    else
    {
      if (pObj->IO.BusType == LIS2DW12_SPI_3WIRES_BUS) /* SPI 3-Wires */
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	689b      	ldr	r3, [r3, #8]
 80041e6:	2b02      	cmp	r3, #2
 80041e8:	d112      	bne.n	8004210 <LIS2DW12_RegisterBusIO+0xc0>
      {
        /* Enable the SPI 3-Wires support only the first time */
        if (pObj->is_initialized == 0U)
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	d10d      	bne.n	8004210 <LIS2DW12_RegisterBusIO+0xc0>
        {
          /* Enable SPI 3-Wires on the component */
          uint8_t data = 0x05;
 80041f4:	2305      	movs	r3, #5
 80041f6:	72fb      	strb	r3, [r7, #11]

          if (LIS2DW12_Write_Reg(pObj, LIS2DW12_CTRL2, data) != LIS2DW12_OK)
 80041f8:	7afb      	ldrb	r3, [r7, #11]
 80041fa:	461a      	mov	r2, r3
 80041fc:	2121      	movs	r1, #33	; 0x21
 80041fe:	6878      	ldr	r0, [r7, #4]
 8004200:	f000 fd87 	bl	8004d12 <LIS2DW12_Write_Reg>
 8004204:	4603      	mov	r3, r0
 8004206:	2b00      	cmp	r3, #0
 8004208:	d002      	beq.n	8004210 <LIS2DW12_RegisterBusIO+0xc0>
          {
            ret = LIS2DW12_ERROR;
 800420a:	f04f 33ff 	mov.w	r3, #4294967295
 800420e:	60fb      	str	r3, [r7, #12]
        }
      }
    }
  }

  return ret;
 8004210:	68fb      	ldr	r3, [r7, #12]
}
 8004212:	4618      	mov	r0, r3
 8004214:	3710      	adds	r7, #16
 8004216:	46bd      	mov	sp, r7
 8004218:	bd80      	pop	{r7, pc}
 800421a:	bf00      	nop
 800421c:	080050a5 	.word	0x080050a5
 8004220:	080050db 	.word	0x080050db

08004224 <LIS2DW12_Init>:
  * @brief  Initialize the LIS2DW12 sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DW12_Init(LIS2DW12_Object_t *pObj)
{
 8004224:	b580      	push	{r7, lr}
 8004226:	b082      	sub	sp, #8
 8004228:	af00      	add	r7, sp, #0
 800422a:	6078      	str	r0, [r7, #4]
  /* Enable register address automatically incremented during a multiple byte
  access with a serial interface. */
  if (lis2dw12_auto_increment_set(&(pObj->Ctx), PROPERTY_ENABLE) != LIS2DW12_OK)
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	3320      	adds	r3, #32
 8004230:	2101      	movs	r1, #1
 8004232:	4618      	mov	r0, r3
 8004234:	f001 fa94 	bl	8005760 <lis2dw12_auto_increment_set>
 8004238:	4603      	mov	r3, r0
 800423a:	2b00      	cmp	r3, #0
 800423c:	d002      	beq.n	8004244 <LIS2DW12_Init+0x20>
  {
    return LIS2DW12_ERROR;
 800423e:	f04f 33ff 	mov.w	r3, #4294967295
 8004242:	e04b      	b.n	80042dc <LIS2DW12_Init+0xb8>
  }

  /* Enable BDU */
  if (lis2dw12_block_data_update_set(&(pObj->Ctx), PROPERTY_ENABLE) != LIS2DW12_OK)
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	3320      	adds	r3, #32
 8004248:	2101      	movs	r1, #1
 800424a:	4618      	mov	r0, r3
 800424c:	f001 f9a8 	bl	80055a0 <lis2dw12_block_data_update_set>
 8004250:	4603      	mov	r3, r0
 8004252:	2b00      	cmp	r3, #0
 8004254:	d002      	beq.n	800425c <LIS2DW12_Init+0x38>
  {
    return LIS2DW12_ERROR;
 8004256:	f04f 33ff 	mov.w	r3, #4294967295
 800425a:	e03f      	b.n	80042dc <LIS2DW12_Init+0xb8>
  }

  /* FIFO mode selection */
  if (lis2dw12_fifo_mode_set(&(pObj->Ctx), LIS2DW12_BYPASS_MODE) != LIS2DW12_OK)
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	3320      	adds	r3, #32
 8004260:	2100      	movs	r1, #0
 8004262:	4618      	mov	r0, r3
 8004264:	f001 faa2 	bl	80057ac <lis2dw12_fifo_mode_set>
 8004268:	4603      	mov	r3, r0
 800426a:	2b00      	cmp	r3, #0
 800426c:	d002      	beq.n	8004274 <LIS2DW12_Init+0x50>
  {
    return LIS2DW12_ERROR;
 800426e:	f04f 33ff 	mov.w	r3, #4294967295
 8004272:	e033      	b.n	80042dc <LIS2DW12_Init+0xb8>
  }

  /* Power mode selection */
  if (lis2dw12_power_mode_set(&(pObj->Ctx), LIS2DW12_HIGH_PERFORMANCE) != LIS2DW12_OK)
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	3320      	adds	r3, #32
 8004278:	2104      	movs	r1, #4
 800427a:	4618      	mov	r0, r3
 800427c:	f000 ff78 	bl	8005170 <lis2dw12_power_mode_set>
 8004280:	4603      	mov	r3, r0
 8004282:	2b00      	cmp	r3, #0
 8004284:	d002      	beq.n	800428c <LIS2DW12_Init+0x68>
  {
    return LIS2DW12_ERROR;
 8004286:	f04f 33ff 	mov.w	r3, #4294967295
 800428a:	e027      	b.n	80042dc <LIS2DW12_Init+0xb8>
  }

  /* Select default output data rate. */
  pObj->acc_odr = 100.0f;
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	4a15      	ldr	r2, [pc, #84]	; (80042e4 <LIS2DW12_Init+0xc0>)
 8004290:	635a      	str	r2, [r3, #52]	; 0x34
  /* Select default operating mode. */
  pObj->acc_operating_mode = LIS2DW12_HIGH_PERFORMANCE_MODE;
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	2200      	movs	r2, #0
 8004296:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  /* Select default low noise (disabled). */
  pObj->acc_low_noise = LIS2DW12_LOW_NOISE_DISABLE;
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	2200      	movs	r2, #0
 800429e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Output data rate selection - power down. */
  if (lis2dw12_data_rate_set(&(pObj->Ctx), LIS2DW12_XL_ODR_OFF) != LIS2DW12_OK)
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	3320      	adds	r3, #32
 80042a6:	2100      	movs	r1, #0
 80042a8:	4618      	mov	r0, r3
 80042aa:	f001 f869 	bl	8005380 <lis2dw12_data_rate_set>
 80042ae:	4603      	mov	r3, r0
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d002      	beq.n	80042ba <LIS2DW12_Init+0x96>
  {
    return LIS2DW12_ERROR;
 80042b4:	f04f 33ff 	mov.w	r3, #4294967295
 80042b8:	e010      	b.n	80042dc <LIS2DW12_Init+0xb8>
  }

  /* Full scale selection. */
  if (lis2dw12_full_scale_set(&(pObj->Ctx), LIS2DW12_2g) != LIS2DW12_OK)
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	3320      	adds	r3, #32
 80042be:	2100      	movs	r1, #0
 80042c0:	4618      	mov	r0, r3
 80042c2:	f001 f993 	bl	80055ec <lis2dw12_full_scale_set>
 80042c6:	4603      	mov	r3, r0
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d002      	beq.n	80042d2 <LIS2DW12_Init+0xae>
  {
    return LIS2DW12_ERROR;
 80042cc:	f04f 33ff 	mov.w	r3, #4294967295
 80042d0:	e004      	b.n	80042dc <LIS2DW12_Init+0xb8>
  }

  pObj->is_initialized = 1;
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	2201      	movs	r2, #1
 80042d6:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return LIS2DW12_OK;
 80042da:	2300      	movs	r3, #0
}
 80042dc:	4618      	mov	r0, r3
 80042de:	3708      	adds	r7, #8
 80042e0:	46bd      	mov	sp, r7
 80042e2:	bd80      	pop	{r7, pc}
 80042e4:	42c80000 	.word	0x42c80000

080042e8 <LIS2DW12_DeInit>:
  * @brief  Deinitialize the LIS2DW12 sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DW12_DeInit(LIS2DW12_Object_t *pObj)
{
 80042e8:	b580      	push	{r7, lr}
 80042ea:	b082      	sub	sp, #8
 80042ec:	af00      	add	r7, sp, #0
 80042ee:	6078      	str	r0, [r7, #4]
  /* Disable the component */
  if (LIS2DW12_ACC_Disable(pObj) != LIS2DW12_OK)
 80042f0:	6878      	ldr	r0, [r7, #4]
 80042f2:	f000 f888 	bl	8004406 <LIS2DW12_ACC_Disable>
 80042f6:	4603      	mov	r3, r0
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d002      	beq.n	8004302 <LIS2DW12_DeInit+0x1a>
  {
    return LIS2DW12_ERROR;
 80042fc:	f04f 33ff 	mov.w	r3, #4294967295
 8004300:	e010      	b.n	8004324 <LIS2DW12_DeInit+0x3c>
  }

  /* Reset output data rate. */
  pObj->acc_odr = 0.0f;
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	f04f 0200 	mov.w	r2, #0
 8004308:	635a      	str	r2, [r3, #52]	; 0x34
  /* Reset operating mode to default value. */
  pObj->acc_operating_mode = LIS2DW12_HIGH_PERFORMANCE_MODE;
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	2200      	movs	r2, #0
 800430e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  /* Reset low noise to default value (disabled). */
  pObj->acc_low_noise = LIS2DW12_LOW_NOISE_DISABLE;
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	2200      	movs	r2, #0
 8004316:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  pObj->is_initialized = 0;
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	2200      	movs	r2, #0
 800431e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return LIS2DW12_OK;
 8004322:	2300      	movs	r3, #0
}
 8004324:	4618      	mov	r0, r3
 8004326:	3708      	adds	r7, #8
 8004328:	46bd      	mov	sp, r7
 800432a:	bd80      	pop	{r7, pc}

0800432c <LIS2DW12_ReadID>:
  * @param  pObj the device pObj
  * @param  Id the WHO_AM_I value
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DW12_ReadID(LIS2DW12_Object_t *pObj, uint8_t *Id)
{
 800432c:	b580      	push	{r7, lr}
 800432e:	b082      	sub	sp, #8
 8004330:	af00      	add	r7, sp, #0
 8004332:	6078      	str	r0, [r7, #4]
 8004334:	6039      	str	r1, [r7, #0]
  if (lis2dw12_device_id_get(&(pObj->Ctx), Id) != LIS2DW12_OK)
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	3320      	adds	r3, #32
 800433a:	6839      	ldr	r1, [r7, #0]
 800433c:	4618      	mov	r0, r3
 800433e:	f001 f9fe 	bl	800573e <lis2dw12_device_id_get>
 8004342:	4603      	mov	r3, r0
 8004344:	2b00      	cmp	r3, #0
 8004346:	d002      	beq.n	800434e <LIS2DW12_ReadID+0x22>
  {
    return LIS2DW12_ERROR;
 8004348:	f04f 33ff 	mov.w	r3, #4294967295
 800434c:	e000      	b.n	8004350 <LIS2DW12_ReadID+0x24>
  }

  return LIS2DW12_OK;
 800434e:	2300      	movs	r3, #0
}
 8004350:	4618      	mov	r0, r3
 8004352:	3708      	adds	r7, #8
 8004354:	46bd      	mov	sp, r7
 8004356:	bd80      	pop	{r7, pc}

08004358 <LIS2DW12_GetCapabilities>:
  * @param  pObj Component object pointer
  * @param  Capabilities pointer to LIS2DW12 sensor capabilities
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DW12_GetCapabilities(LIS2DW12_Object_t *pObj, LIS2DW12_Capabilities_t *Capabilities)
{
 8004358:	b480      	push	{r7}
 800435a:	b083      	sub	sp, #12
 800435c:	af00      	add	r7, sp, #0
 800435e:	6078      	str	r0, [r7, #4]
 8004360:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  Capabilities->Acc          = 1;
 8004362:	683b      	ldr	r3, [r7, #0]
 8004364:	2201      	movs	r2, #1
 8004366:	701a      	strb	r2, [r3, #0]
  Capabilities->Gyro         = 0;
 8004368:	683b      	ldr	r3, [r7, #0]
 800436a:	2200      	movs	r2, #0
 800436c:	705a      	strb	r2, [r3, #1]
  Capabilities->Magneto      = 0;
 800436e:	683b      	ldr	r3, [r7, #0]
 8004370:	2200      	movs	r2, #0
 8004372:	709a      	strb	r2, [r3, #2]
  Capabilities->LowPower     = 0;
 8004374:	683b      	ldr	r3, [r7, #0]
 8004376:	2200      	movs	r2, #0
 8004378:	70da      	strb	r2, [r3, #3]
  Capabilities->GyroMaxFS    = 0;
 800437a:	683b      	ldr	r3, [r7, #0]
 800437c:	2200      	movs	r2, #0
 800437e:	605a      	str	r2, [r3, #4]
  Capabilities->AccMaxFS     = 16;
 8004380:	683b      	ldr	r3, [r7, #0]
 8004382:	2210      	movs	r2, #16
 8004384:	609a      	str	r2, [r3, #8]
  Capabilities->MagMaxFS     = 0;
 8004386:	683b      	ldr	r3, [r7, #0]
 8004388:	2200      	movs	r2, #0
 800438a:	60da      	str	r2, [r3, #12]
  Capabilities->GyroMaxOdr   = 0.0f;
 800438c:	683b      	ldr	r3, [r7, #0]
 800438e:	f04f 0200 	mov.w	r2, #0
 8004392:	611a      	str	r2, [r3, #16]
  Capabilities->AccMaxOdr    = 1600.0f;
 8004394:	683b      	ldr	r3, [r7, #0]
 8004396:	4a06      	ldr	r2, [pc, #24]	; (80043b0 <LIS2DW12_GetCapabilities+0x58>)
 8004398:	615a      	str	r2, [r3, #20]
  Capabilities->MagMaxOdr    = 0.0f;
 800439a:	683b      	ldr	r3, [r7, #0]
 800439c:	f04f 0200 	mov.w	r2, #0
 80043a0:	619a      	str	r2, [r3, #24]
  return LIS2DW12_OK;
 80043a2:	2300      	movs	r3, #0
}
 80043a4:	4618      	mov	r0, r3
 80043a6:	370c      	adds	r7, #12
 80043a8:	46bd      	mov	sp, r7
 80043aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ae:	4770      	bx	lr
 80043b0:	44c80000 	.word	0x44c80000

080043b4 <LIS2DW12_ACC_Enable>:
  * @brief  Enable the LIS2DW12 accelerometer sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DW12_ACC_Enable(LIS2DW12_Object_t *pObj)
{
 80043b4:	b580      	push	{r7, lr}
 80043b6:	b082      	sub	sp, #8
 80043b8:	af00      	add	r7, sp, #0
 80043ba:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->acc_is_enabled == 1U)
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80043c2:	2b01      	cmp	r3, #1
 80043c4:	d101      	bne.n	80043ca <LIS2DW12_ACC_Enable+0x16>
  {
    return LIS2DW12_OK;
 80043c6:	2300      	movs	r3, #0
 80043c8:	e019      	b.n	80043fe <LIS2DW12_ACC_Enable+0x4a>
  }

  /* Output data rate selection. */
  if (LIS2DW12_ACC_SetOutputDataRate_When_Enabled(pObj, pObj->acc_odr, pObj->acc_operating_mode,
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	f893 1038 	ldrb.w	r1, [r3, #56]	; 0x38
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80043dc:	461a      	mov	r2, r3
 80043de:	eeb0 0a67 	vmov.f32	s0, s15
 80043e2:	6878      	ldr	r0, [r7, #4]
 80043e4:	f000 fcb0 	bl	8004d48 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled>
 80043e8:	4603      	mov	r3, r0
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d002      	beq.n	80043f4 <LIS2DW12_ACC_Enable+0x40>
                                                  pObj->acc_low_noise) != LIS2DW12_OK)
  {
    return LIS2DW12_ERROR;
 80043ee:	f04f 33ff 	mov.w	r3, #4294967295
 80043f2:	e004      	b.n	80043fe <LIS2DW12_ACC_Enable+0x4a>
  }

  pObj->acc_is_enabled = 1;
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	2201      	movs	r2, #1
 80043f8:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

  return LIS2DW12_OK;
 80043fc:	2300      	movs	r3, #0
}
 80043fe:	4618      	mov	r0, r3
 8004400:	3708      	adds	r7, #8
 8004402:	46bd      	mov	sp, r7
 8004404:	bd80      	pop	{r7, pc}

08004406 <LIS2DW12_ACC_Disable>:
  * @brief  Disable the LIS2DW12 accelerometer sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DW12_ACC_Disable(LIS2DW12_Object_t *pObj)
{
 8004406:	b580      	push	{r7, lr}
 8004408:	b082      	sub	sp, #8
 800440a:	af00      	add	r7, sp, #0
 800440c:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->acc_is_enabled == 0U)
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8004414:	2b00      	cmp	r3, #0
 8004416:	d101      	bne.n	800441c <LIS2DW12_ACC_Disable+0x16>
  {
    return LIS2DW12_OK;
 8004418:	2300      	movs	r3, #0
 800441a:	e010      	b.n	800443e <LIS2DW12_ACC_Disable+0x38>
  }

  /* Output data rate selection - power down. */
  if (lis2dw12_data_rate_set(&(pObj->Ctx), LIS2DW12_XL_ODR_OFF) != LIS2DW12_OK)
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	3320      	adds	r3, #32
 8004420:	2100      	movs	r1, #0
 8004422:	4618      	mov	r0, r3
 8004424:	f000 ffac 	bl	8005380 <lis2dw12_data_rate_set>
 8004428:	4603      	mov	r3, r0
 800442a:	2b00      	cmp	r3, #0
 800442c:	d002      	beq.n	8004434 <LIS2DW12_ACC_Disable+0x2e>
  {
    return LIS2DW12_ERROR;
 800442e:	f04f 33ff 	mov.w	r3, #4294967295
 8004432:	e004      	b.n	800443e <LIS2DW12_ACC_Disable+0x38>
  }

  pObj->acc_is_enabled = 0;
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	2200      	movs	r2, #0
 8004438:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

  return LIS2DW12_OK;
 800443c:	2300      	movs	r3, #0
}
 800443e:	4618      	mov	r0, r3
 8004440:	3708      	adds	r7, #8
 8004442:	46bd      	mov	sp, r7
 8004444:	bd80      	pop	{r7, pc}
	...

08004448 <LIS2DW12_ACC_GetSensitivity>:
  * @param  pObj the device pObj
  * @param  Sensitivity pointer
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DW12_ACC_GetSensitivity(LIS2DW12_Object_t *pObj, float *Sensitivity)
{
 8004448:	b580      	push	{r7, lr}
 800444a:	b084      	sub	sp, #16
 800444c:	af00      	add	r7, sp, #0
 800444e:	6078      	str	r0, [r7, #4]
 8004450:	6039      	str	r1, [r7, #0]
  int32_t ret = LIS2DW12_OK;
 8004452:	2300      	movs	r3, #0
 8004454:	60fb      	str	r3, [r7, #12]
  lis2dw12_fs_t full_scale;
  lis2dw12_mode_t mode;

  /* Read actual full scale selection from sensor. */
  if (lis2dw12_full_scale_get(&(pObj->Ctx), &full_scale) != LIS2DW12_OK)
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	3320      	adds	r3, #32
 800445a:	f107 020b 	add.w	r2, r7, #11
 800445e:	4611      	mov	r1, r2
 8004460:	4618      	mov	r0, r3
 8004462:	f001 f8e9 	bl	8005638 <lis2dw12_full_scale_get>
 8004466:	4603      	mov	r3, r0
 8004468:	2b00      	cmp	r3, #0
 800446a:	d002      	beq.n	8004472 <LIS2DW12_ACC_GetSensitivity+0x2a>
  {
    return LIS2DW12_ERROR;
 800446c:	f04f 33ff 	mov.w	r3, #4294967295
 8004470:	e0a0      	b.n	80045b4 <LIS2DW12_ACC_GetSensitivity+0x16c>
  }

  /* Read actual power mode selection from sensor. */
  if (lis2dw12_power_mode_get(&(pObj->Ctx), &mode) != LIS2DW12_OK)
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	3320      	adds	r3, #32
 8004476:	f107 020a 	add.w	r2, r7, #10
 800447a:	4611      	mov	r1, r2
 800447c:	4618      	mov	r0, r3
 800447e:	f000 fec5 	bl	800520c <lis2dw12_power_mode_get>
 8004482:	4603      	mov	r3, r0
 8004484:	2b00      	cmp	r3, #0
 8004486:	d002      	beq.n	800448e <LIS2DW12_ACC_GetSensitivity+0x46>
  {
    return LIS2DW12_ERROR;
 8004488:	f04f 33ff 	mov.w	r3, #4294967295
 800448c:	e092      	b.n	80045b4 <LIS2DW12_ACC_GetSensitivity+0x16c>
  }

  switch (mode)
 800448e:	7abb      	ldrb	r3, [r7, #10]
 8004490:	2b1b      	cmp	r3, #27
 8004492:	f200 8087 	bhi.w	80045a4 <LIS2DW12_ACC_GetSensitivity+0x15c>
 8004496:	a201      	add	r2, pc, #4	; (adr r2, 800449c <LIS2DW12_ACC_GetSensitivity+0x54>)
 8004498:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800449c:	0800450d 	.word	0x0800450d
 80044a0:	08004559 	.word	0x08004559
 80044a4:	08004559 	.word	0x08004559
 80044a8:	08004559 	.word	0x08004559
 80044ac:	08004559 	.word	0x08004559
 80044b0:	080045a5 	.word	0x080045a5
 80044b4:	080045a5 	.word	0x080045a5
 80044b8:	080045a5 	.word	0x080045a5
 80044bc:	0800450d 	.word	0x0800450d
 80044c0:	08004559 	.word	0x08004559
 80044c4:	08004559 	.word	0x08004559
 80044c8:	08004559 	.word	0x08004559
 80044cc:	080045a5 	.word	0x080045a5
 80044d0:	080045a5 	.word	0x080045a5
 80044d4:	080045a5 	.word	0x080045a5
 80044d8:	080045a5 	.word	0x080045a5
 80044dc:	0800450d 	.word	0x0800450d
 80044e0:	08004559 	.word	0x08004559
 80044e4:	08004559 	.word	0x08004559
 80044e8:	08004559 	.word	0x08004559
 80044ec:	08004559 	.word	0x08004559
 80044f0:	080045a5 	.word	0x080045a5
 80044f4:	080045a5 	.word	0x080045a5
 80044f8:	080045a5 	.word	0x080045a5
 80044fc:	0800450d 	.word	0x0800450d
 8004500:	08004559 	.word	0x08004559
 8004504:	08004559 	.word	0x08004559
 8004508:	08004559 	.word	0x08004559
  {
    case LIS2DW12_CONT_LOW_PWR_12bit:
    case LIS2DW12_SINGLE_LOW_PWR_12bit:
    case LIS2DW12_CONT_LOW_PWR_LOW_NOISE_12bit:
    case LIS2DW12_SINGLE_LOW_LOW_NOISE_PWR_12bit:
      switch (full_scale)
 800450c:	7afb      	ldrb	r3, [r7, #11]
 800450e:	2b03      	cmp	r3, #3
 8004510:	d81a      	bhi.n	8004548 <LIS2DW12_ACC_GetSensitivity+0x100>
 8004512:	a201      	add	r2, pc, #4	; (adr r2, 8004518 <LIS2DW12_ACC_GetSensitivity+0xd0>)
 8004514:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004518:	08004529 	.word	0x08004529
 800451c:	08004531 	.word	0x08004531
 8004520:	08004539 	.word	0x08004539
 8004524:	08004541 	.word	0x08004541
      {
        case LIS2DW12_2g:
          *Sensitivity = LIS2DW12_ACC_SENSITIVITY_FOR_FS_2G_LOPOW1_MODE;
 8004528:	683b      	ldr	r3, [r7, #0]
 800452a:	4a24      	ldr	r2, [pc, #144]	; (80045bc <LIS2DW12_ACC_GetSensitivity+0x174>)
 800452c:	601a      	str	r2, [r3, #0]
          break;
 800452e:	e012      	b.n	8004556 <LIS2DW12_ACC_GetSensitivity+0x10e>

        case LIS2DW12_4g:
          *Sensitivity = LIS2DW12_ACC_SENSITIVITY_FOR_FS_4G_LOPOW1_MODE;
 8004530:	683b      	ldr	r3, [r7, #0]
 8004532:	4a23      	ldr	r2, [pc, #140]	; (80045c0 <LIS2DW12_ACC_GetSensitivity+0x178>)
 8004534:	601a      	str	r2, [r3, #0]
          break;
 8004536:	e00e      	b.n	8004556 <LIS2DW12_ACC_GetSensitivity+0x10e>

        case LIS2DW12_8g:
          *Sensitivity = LIS2DW12_ACC_SENSITIVITY_FOR_FS_8G_LOPOW1_MODE;
 8004538:	683b      	ldr	r3, [r7, #0]
 800453a:	4a22      	ldr	r2, [pc, #136]	; (80045c4 <LIS2DW12_ACC_GetSensitivity+0x17c>)
 800453c:	601a      	str	r2, [r3, #0]
          break;
 800453e:	e00a      	b.n	8004556 <LIS2DW12_ACC_GetSensitivity+0x10e>

        case LIS2DW12_16g:
          *Sensitivity = LIS2DW12_ACC_SENSITIVITY_FOR_FS_16G_LOPOW1_MODE;
 8004540:	683b      	ldr	r3, [r7, #0]
 8004542:	4a21      	ldr	r2, [pc, #132]	; (80045c8 <LIS2DW12_ACC_GetSensitivity+0x180>)
 8004544:	601a      	str	r2, [r3, #0]
          break;
 8004546:	e006      	b.n	8004556 <LIS2DW12_ACC_GetSensitivity+0x10e>

        default:
          *Sensitivity = -1.0f;
 8004548:	683b      	ldr	r3, [r7, #0]
 800454a:	4a20      	ldr	r2, [pc, #128]	; (80045cc <LIS2DW12_ACC_GetSensitivity+0x184>)
 800454c:	601a      	str	r2, [r3, #0]
          ret = LIS2DW12_ERROR;
 800454e:	f04f 33ff 	mov.w	r3, #4294967295
 8004552:	60fb      	str	r3, [r7, #12]
          break;
 8004554:	bf00      	nop
      }
      break;
 8004556:	e02c      	b.n	80045b2 <LIS2DW12_ACC_GetSensitivity+0x16a>
    case LIS2DW12_CONT_LOW_PWR_LOW_NOISE_3:
    case LIS2DW12_CONT_LOW_PWR_LOW_NOISE_2:
    case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_4:
    case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_3:
    case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_2:
      switch (full_scale)
 8004558:	7afb      	ldrb	r3, [r7, #11]
 800455a:	2b03      	cmp	r3, #3
 800455c:	d81a      	bhi.n	8004594 <LIS2DW12_ACC_GetSensitivity+0x14c>
 800455e:	a201      	add	r2, pc, #4	; (adr r2, 8004564 <LIS2DW12_ACC_GetSensitivity+0x11c>)
 8004560:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004564:	08004575 	.word	0x08004575
 8004568:	0800457d 	.word	0x0800457d
 800456c:	08004585 	.word	0x08004585
 8004570:	0800458d 	.word	0x0800458d
      {
        case LIS2DW12_2g:
          *Sensitivity = LIS2DW12_ACC_SENSITIVITY_FOR_FS_2G_OTHER_MODES;
 8004574:	683b      	ldr	r3, [r7, #0]
 8004576:	4a16      	ldr	r2, [pc, #88]	; (80045d0 <LIS2DW12_ACC_GetSensitivity+0x188>)
 8004578:	601a      	str	r2, [r3, #0]
          break;
 800457a:	e012      	b.n	80045a2 <LIS2DW12_ACC_GetSensitivity+0x15a>

        case LIS2DW12_4g:
          *Sensitivity = LIS2DW12_ACC_SENSITIVITY_FOR_FS_4G_OTHER_MODES;
 800457c:	683b      	ldr	r3, [r7, #0]
 800457e:	4a15      	ldr	r2, [pc, #84]	; (80045d4 <LIS2DW12_ACC_GetSensitivity+0x18c>)
 8004580:	601a      	str	r2, [r3, #0]
          break;
 8004582:	e00e      	b.n	80045a2 <LIS2DW12_ACC_GetSensitivity+0x15a>

        case LIS2DW12_8g:
          *Sensitivity = LIS2DW12_ACC_SENSITIVITY_FOR_FS_8G_OTHER_MODES;
 8004584:	683b      	ldr	r3, [r7, #0]
 8004586:	4a0d      	ldr	r2, [pc, #52]	; (80045bc <LIS2DW12_ACC_GetSensitivity+0x174>)
 8004588:	601a      	str	r2, [r3, #0]
          break;
 800458a:	e00a      	b.n	80045a2 <LIS2DW12_ACC_GetSensitivity+0x15a>

        case LIS2DW12_16g:
          *Sensitivity = LIS2DW12_ACC_SENSITIVITY_FOR_FS_16G_OTHER_MODES;
 800458c:	683b      	ldr	r3, [r7, #0]
 800458e:	4a0c      	ldr	r2, [pc, #48]	; (80045c0 <LIS2DW12_ACC_GetSensitivity+0x178>)
 8004590:	601a      	str	r2, [r3, #0]
          break;
 8004592:	e006      	b.n	80045a2 <LIS2DW12_ACC_GetSensitivity+0x15a>

        default:
          *Sensitivity = -1.0f;
 8004594:	683b      	ldr	r3, [r7, #0]
 8004596:	4a0d      	ldr	r2, [pc, #52]	; (80045cc <LIS2DW12_ACC_GetSensitivity+0x184>)
 8004598:	601a      	str	r2, [r3, #0]
          ret = LIS2DW12_ERROR;
 800459a:	f04f 33ff 	mov.w	r3, #4294967295
 800459e:	60fb      	str	r3, [r7, #12]
          break;
 80045a0:	bf00      	nop
      }
      break;
 80045a2:	e006      	b.n	80045b2 <LIS2DW12_ACC_GetSensitivity+0x16a>

    default:
      *Sensitivity = -1.0f;
 80045a4:	683b      	ldr	r3, [r7, #0]
 80045a6:	4a09      	ldr	r2, [pc, #36]	; (80045cc <LIS2DW12_ACC_GetSensitivity+0x184>)
 80045a8:	601a      	str	r2, [r3, #0]
      ret = LIS2DW12_ERROR;
 80045aa:	f04f 33ff 	mov.w	r3, #4294967295
 80045ae:	60fb      	str	r3, [r7, #12]
      break;
 80045b0:	bf00      	nop
  }

  return ret;
 80045b2:	68fb      	ldr	r3, [r7, #12]
}
 80045b4:	4618      	mov	r0, r3
 80045b6:	3710      	adds	r7, #16
 80045b8:	46bd      	mov	sp, r7
 80045ba:	bd80      	pop	{r7, pc}
 80045bc:	3f79db23 	.word	0x3f79db23
 80045c0:	3ff9db23 	.word	0x3ff9db23
 80045c4:	4079db23 	.word	0x4079db23
 80045c8:	40f9db23 	.word	0x40f9db23
 80045cc:	bf800000 	.word	0xbf800000
 80045d0:	3e79db23 	.word	0x3e79db23
 80045d4:	3ef9db23 	.word	0x3ef9db23

080045d8 <LIS2DW12_ACC_GetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr pointer where the output data rate is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DW12_ACC_GetOutputDataRate(LIS2DW12_Object_t *pObj, float *Odr)
{
 80045d8:	b580      	push	{r7, lr}
 80045da:	b084      	sub	sp, #16
 80045dc:	af00      	add	r7, sp, #0
 80045de:	6078      	str	r0, [r7, #4]
 80045e0:	6039      	str	r1, [r7, #0]
  int32_t ret = LIS2DW12_OK;
 80045e2:	2300      	movs	r3, #0
 80045e4:	60fb      	str	r3, [r7, #12]
  lis2dw12_odr_t odr_low_level;
  lis2dw12_mode_t mode;

  /* Get current output data rate. */
  if (lis2dw12_data_rate_get(&(pObj->Ctx), &odr_low_level) != LIS2DW12_OK)
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	3320      	adds	r3, #32
 80045ea:	f107 020b 	add.w	r2, r7, #11
 80045ee:	4611      	mov	r1, r2
 80045f0:	4618      	mov	r0, r3
 80045f2:	f000 ff0b 	bl	800540c <lis2dw12_data_rate_get>
 80045f6:	4603      	mov	r3, r0
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d002      	beq.n	8004602 <LIS2DW12_ACC_GetOutputDataRate+0x2a>
  {
    return LIS2DW12_ERROR;
 80045fc:	f04f 33ff 	mov.w	r3, #4294967295
 8004600:	e1d4      	b.n	80049ac <LIS2DW12_ACC_GetOutputDataRate+0x3d4>
  }

  /* Read actual power mode selection from sensor. */
  if (lis2dw12_power_mode_get(&(pObj->Ctx), &mode) != LIS2DW12_OK)
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	3320      	adds	r3, #32
 8004606:	f107 020a 	add.w	r2, r7, #10
 800460a:	4611      	mov	r1, r2
 800460c:	4618      	mov	r0, r3
 800460e:	f000 fdfd 	bl	800520c <lis2dw12_power_mode_get>
 8004612:	4603      	mov	r3, r0
 8004614:	2b00      	cmp	r3, #0
 8004616:	d002      	beq.n	800461e <LIS2DW12_ACC_GetOutputDataRate+0x46>
  {
    return LIS2DW12_ERROR;
 8004618:	f04f 33ff 	mov.w	r3, #4294967295
 800461c:	e1c6      	b.n	80049ac <LIS2DW12_ACC_GetOutputDataRate+0x3d4>
  }

  switch (odr_low_level)
 800461e:	7afb      	ldrb	r3, [r7, #11]
 8004620:	2b32      	cmp	r3, #50	; 0x32
 8004622:	f200 81bb 	bhi.w	800499c <LIS2DW12_ACC_GetOutputDataRate+0x3c4>
 8004626:	a201      	add	r2, pc, #4	; (adr r2, 800462c <LIS2DW12_ACC_GetOutputDataRate+0x54>)
 8004628:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800462c:	080046f9 	.word	0x080046f9
 8004630:	08004703 	.word	0x08004703
 8004634:	080047a1 	.word	0x080047a1
 8004638:	080047a9 	.word	0x080047a9
 800463c:	080047b1 	.word	0x080047b1
 8004640:	080047b9 	.word	0x080047b9
 8004644:	080047c1 	.word	0x080047c1
 8004648:	080047c9 	.word	0x080047c9
 800464c:	08004865 	.word	0x08004865
 8004650:	08004901 	.word	0x08004901
 8004654:	0800499d 	.word	0x0800499d
 8004658:	0800499d 	.word	0x0800499d
 800465c:	0800499d 	.word	0x0800499d
 8004660:	0800499d 	.word	0x0800499d
 8004664:	0800499d 	.word	0x0800499d
 8004668:	0800499d 	.word	0x0800499d
 800466c:	0800499d 	.word	0x0800499d
 8004670:	0800499d 	.word	0x0800499d
 8004674:	080046f9 	.word	0x080046f9
 8004678:	0800499d 	.word	0x0800499d
 800467c:	0800499d 	.word	0x0800499d
 8004680:	0800499d 	.word	0x0800499d
 8004684:	0800499d 	.word	0x0800499d
 8004688:	0800499d 	.word	0x0800499d
 800468c:	0800499d 	.word	0x0800499d
 8004690:	0800499d 	.word	0x0800499d
 8004694:	0800499d 	.word	0x0800499d
 8004698:	0800499d 	.word	0x0800499d
 800469c:	0800499d 	.word	0x0800499d
 80046a0:	0800499d 	.word	0x0800499d
 80046a4:	0800499d 	.word	0x0800499d
 80046a8:	0800499d 	.word	0x0800499d
 80046ac:	0800499d 	.word	0x0800499d
 80046b0:	0800499d 	.word	0x0800499d
 80046b4:	0800499d 	.word	0x0800499d
 80046b8:	0800499d 	.word	0x0800499d
 80046bc:	0800499d 	.word	0x0800499d
 80046c0:	0800499d 	.word	0x0800499d
 80046c4:	0800499d 	.word	0x0800499d
 80046c8:	0800499d 	.word	0x0800499d
 80046cc:	0800499d 	.word	0x0800499d
 80046d0:	0800499d 	.word	0x0800499d
 80046d4:	0800499d 	.word	0x0800499d
 80046d8:	0800499d 	.word	0x0800499d
 80046dc:	0800499d 	.word	0x0800499d
 80046e0:	0800499d 	.word	0x0800499d
 80046e4:	0800499d 	.word	0x0800499d
 80046e8:	0800499d 	.word	0x0800499d
 80046ec:	0800499d 	.word	0x0800499d
 80046f0:	0800499d 	.word	0x0800499d
 80046f4:	080046f9 	.word	0x080046f9
  {
    case LIS2DW12_XL_ODR_OFF:
    case LIS2DW12_XL_SET_SW_TRIG:
    case LIS2DW12_XL_SET_PIN_TRIG:
      *Odr = 0.0f;
 80046f8:	683b      	ldr	r3, [r7, #0]
 80046fa:	f04f 0200 	mov.w	r2, #0
 80046fe:	601a      	str	r2, [r3, #0]
      break;
 8004700:	e153      	b.n	80049aa <LIS2DW12_ACC_GetOutputDataRate+0x3d2>

    case LIS2DW12_XL_ODR_1Hz6_LP_ONLY:
      switch (mode)
 8004702:	7abb      	ldrb	r3, [r7, #10]
 8004704:	2b1b      	cmp	r3, #27
 8004706:	d843      	bhi.n	8004790 <LIS2DW12_ACC_GetOutputDataRate+0x1b8>
 8004708:	a201      	add	r2, pc, #4	; (adr r2, 8004710 <LIS2DW12_ACC_GetOutputDataRate+0x138>)
 800470a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800470e:	bf00      	nop
 8004710:	08004789 	.word	0x08004789
 8004714:	08004789 	.word	0x08004789
 8004718:	08004789 	.word	0x08004789
 800471c:	08004789 	.word	0x08004789
 8004720:	08004781 	.word	0x08004781
 8004724:	08004791 	.word	0x08004791
 8004728:	08004791 	.word	0x08004791
 800472c:	08004791 	.word	0x08004791
 8004730:	08004789 	.word	0x08004789
 8004734:	08004789 	.word	0x08004789
 8004738:	08004789 	.word	0x08004789
 800473c:	08004789 	.word	0x08004789
 8004740:	08004791 	.word	0x08004791
 8004744:	08004791 	.word	0x08004791
 8004748:	08004791 	.word	0x08004791
 800474c:	08004791 	.word	0x08004791
 8004750:	08004789 	.word	0x08004789
 8004754:	08004789 	.word	0x08004789
 8004758:	08004789 	.word	0x08004789
 800475c:	08004789 	.word	0x08004789
 8004760:	08004781 	.word	0x08004781
 8004764:	08004791 	.word	0x08004791
 8004768:	08004791 	.word	0x08004791
 800476c:	08004791 	.word	0x08004791
 8004770:	08004789 	.word	0x08004789
 8004774:	08004789 	.word	0x08004789
 8004778:	08004789 	.word	0x08004789
 800477c:	08004789 	.word	0x08004789
      {
        case LIS2DW12_HIGH_PERFORMANCE:
        case LIS2DW12_HIGH_PERFORMANCE_LOW_NOISE:
          *Odr = 12.5f;
 8004780:	683b      	ldr	r3, [r7, #0]
 8004782:	4a8c      	ldr	r2, [pc, #560]	; (80049b4 <LIS2DW12_ACC_GetOutputDataRate+0x3dc>)
 8004784:	601a      	str	r2, [r3, #0]
          break;
 8004786:	e00a      	b.n	800479e <LIS2DW12_ACC_GetOutputDataRate+0x1c6>
        case LIS2DW12_CONT_LOW_PWR_LOW_NOISE_12bit:
        case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_4:
        case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_3:
        case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_2:
        case LIS2DW12_SINGLE_LOW_LOW_NOISE_PWR_12bit:
          *Odr = 1.6f;
 8004788:	683b      	ldr	r3, [r7, #0]
 800478a:	4a8b      	ldr	r2, [pc, #556]	; (80049b8 <LIS2DW12_ACC_GetOutputDataRate+0x3e0>)
 800478c:	601a      	str	r2, [r3, #0]
          break;
 800478e:	e006      	b.n	800479e <LIS2DW12_ACC_GetOutputDataRate+0x1c6>

        default:
          *Odr = -1.0f;
 8004790:	683b      	ldr	r3, [r7, #0]
 8004792:	4a8a      	ldr	r2, [pc, #552]	; (80049bc <LIS2DW12_ACC_GetOutputDataRate+0x3e4>)
 8004794:	601a      	str	r2, [r3, #0]
          ret = LIS2DW12_ERROR;
 8004796:	f04f 33ff 	mov.w	r3, #4294967295
 800479a:	60fb      	str	r3, [r7, #12]
          break;
 800479c:	bf00      	nop
      }
      break;
 800479e:	e104      	b.n	80049aa <LIS2DW12_ACC_GetOutputDataRate+0x3d2>

    case LIS2DW12_XL_ODR_12Hz5:
      *Odr = 12.5f;
 80047a0:	683b      	ldr	r3, [r7, #0]
 80047a2:	4a84      	ldr	r2, [pc, #528]	; (80049b4 <LIS2DW12_ACC_GetOutputDataRate+0x3dc>)
 80047a4:	601a      	str	r2, [r3, #0]
      break;
 80047a6:	e100      	b.n	80049aa <LIS2DW12_ACC_GetOutputDataRate+0x3d2>

    case LIS2DW12_XL_ODR_25Hz:
      *Odr = 25.0f;
 80047a8:	683b      	ldr	r3, [r7, #0]
 80047aa:	4a85      	ldr	r2, [pc, #532]	; (80049c0 <LIS2DW12_ACC_GetOutputDataRate+0x3e8>)
 80047ac:	601a      	str	r2, [r3, #0]
      break;
 80047ae:	e0fc      	b.n	80049aa <LIS2DW12_ACC_GetOutputDataRate+0x3d2>

    case LIS2DW12_XL_ODR_50Hz:
      *Odr = 50.0f;
 80047b0:	683b      	ldr	r3, [r7, #0]
 80047b2:	4a84      	ldr	r2, [pc, #528]	; (80049c4 <LIS2DW12_ACC_GetOutputDataRate+0x3ec>)
 80047b4:	601a      	str	r2, [r3, #0]
      break;
 80047b6:	e0f8      	b.n	80049aa <LIS2DW12_ACC_GetOutputDataRate+0x3d2>

    case LIS2DW12_XL_ODR_100Hz:
      *Odr = 100.0f;
 80047b8:	683b      	ldr	r3, [r7, #0]
 80047ba:	4a83      	ldr	r2, [pc, #524]	; (80049c8 <LIS2DW12_ACC_GetOutputDataRate+0x3f0>)
 80047bc:	601a      	str	r2, [r3, #0]
      break;
 80047be:	e0f4      	b.n	80049aa <LIS2DW12_ACC_GetOutputDataRate+0x3d2>

    case LIS2DW12_XL_ODR_200Hz:
      *Odr = 200.0f;
 80047c0:	683b      	ldr	r3, [r7, #0]
 80047c2:	4a82      	ldr	r2, [pc, #520]	; (80049cc <LIS2DW12_ACC_GetOutputDataRate+0x3f4>)
 80047c4:	601a      	str	r2, [r3, #0]
      break;
 80047c6:	e0f0      	b.n	80049aa <LIS2DW12_ACC_GetOutputDataRate+0x3d2>

    case LIS2DW12_XL_ODR_400Hz:
      switch (mode)
 80047c8:	7abb      	ldrb	r3, [r7, #10]
 80047ca:	2b1b      	cmp	r3, #27
 80047cc:	d842      	bhi.n	8004854 <LIS2DW12_ACC_GetOutputDataRate+0x27c>
 80047ce:	a201      	add	r2, pc, #4	; (adr r2, 80047d4 <LIS2DW12_ACC_GetOutputDataRate+0x1fc>)
 80047d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80047d4:	0800484d 	.word	0x0800484d
 80047d8:	0800484d 	.word	0x0800484d
 80047dc:	0800484d 	.word	0x0800484d
 80047e0:	0800484d 	.word	0x0800484d
 80047e4:	08004845 	.word	0x08004845
 80047e8:	08004855 	.word	0x08004855
 80047ec:	08004855 	.word	0x08004855
 80047f0:	08004855 	.word	0x08004855
 80047f4:	0800484d 	.word	0x0800484d
 80047f8:	0800484d 	.word	0x0800484d
 80047fc:	0800484d 	.word	0x0800484d
 8004800:	0800484d 	.word	0x0800484d
 8004804:	08004855 	.word	0x08004855
 8004808:	08004855 	.word	0x08004855
 800480c:	08004855 	.word	0x08004855
 8004810:	08004855 	.word	0x08004855
 8004814:	0800484d 	.word	0x0800484d
 8004818:	0800484d 	.word	0x0800484d
 800481c:	0800484d 	.word	0x0800484d
 8004820:	0800484d 	.word	0x0800484d
 8004824:	08004845 	.word	0x08004845
 8004828:	08004855 	.word	0x08004855
 800482c:	08004855 	.word	0x08004855
 8004830:	08004855 	.word	0x08004855
 8004834:	0800484d 	.word	0x0800484d
 8004838:	0800484d 	.word	0x0800484d
 800483c:	0800484d 	.word	0x0800484d
 8004840:	0800484d 	.word	0x0800484d
      {
        case LIS2DW12_HIGH_PERFORMANCE:
        case LIS2DW12_HIGH_PERFORMANCE_LOW_NOISE:
          *Odr = 400.0f;
 8004844:	683b      	ldr	r3, [r7, #0]
 8004846:	4a62      	ldr	r2, [pc, #392]	; (80049d0 <LIS2DW12_ACC_GetOutputDataRate+0x3f8>)
 8004848:	601a      	str	r2, [r3, #0]
          break;
 800484a:	e00a      	b.n	8004862 <LIS2DW12_ACC_GetOutputDataRate+0x28a>
        case LIS2DW12_CONT_LOW_PWR_LOW_NOISE_12bit:
        case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_4:
        case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_3:
        case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_2:
        case LIS2DW12_SINGLE_LOW_LOW_NOISE_PWR_12bit:
          *Odr = 200.0f;
 800484c:	683b      	ldr	r3, [r7, #0]
 800484e:	4a5f      	ldr	r2, [pc, #380]	; (80049cc <LIS2DW12_ACC_GetOutputDataRate+0x3f4>)
 8004850:	601a      	str	r2, [r3, #0]
          break;
 8004852:	e006      	b.n	8004862 <LIS2DW12_ACC_GetOutputDataRate+0x28a>

        default:
          *Odr = -1.0f;
 8004854:	683b      	ldr	r3, [r7, #0]
 8004856:	4a59      	ldr	r2, [pc, #356]	; (80049bc <LIS2DW12_ACC_GetOutputDataRate+0x3e4>)
 8004858:	601a      	str	r2, [r3, #0]
          ret = LIS2DW12_ERROR;
 800485a:	f04f 33ff 	mov.w	r3, #4294967295
 800485e:	60fb      	str	r3, [r7, #12]
          break;
 8004860:	bf00      	nop
      }
      break;
 8004862:	e0a2      	b.n	80049aa <LIS2DW12_ACC_GetOutputDataRate+0x3d2>

    case LIS2DW12_XL_ODR_800Hz:
      switch (mode)
 8004864:	7abb      	ldrb	r3, [r7, #10]
 8004866:	2b1b      	cmp	r3, #27
 8004868:	d842      	bhi.n	80048f0 <LIS2DW12_ACC_GetOutputDataRate+0x318>
 800486a:	a201      	add	r2, pc, #4	; (adr r2, 8004870 <LIS2DW12_ACC_GetOutputDataRate+0x298>)
 800486c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004870:	080048e9 	.word	0x080048e9
 8004874:	080048e9 	.word	0x080048e9
 8004878:	080048e9 	.word	0x080048e9
 800487c:	080048e9 	.word	0x080048e9
 8004880:	080048e1 	.word	0x080048e1
 8004884:	080048f1 	.word	0x080048f1
 8004888:	080048f1 	.word	0x080048f1
 800488c:	080048f1 	.word	0x080048f1
 8004890:	080048e9 	.word	0x080048e9
 8004894:	080048e9 	.word	0x080048e9
 8004898:	080048e9 	.word	0x080048e9
 800489c:	080048e9 	.word	0x080048e9
 80048a0:	080048f1 	.word	0x080048f1
 80048a4:	080048f1 	.word	0x080048f1
 80048a8:	080048f1 	.word	0x080048f1
 80048ac:	080048f1 	.word	0x080048f1
 80048b0:	080048e9 	.word	0x080048e9
 80048b4:	080048e9 	.word	0x080048e9
 80048b8:	080048e9 	.word	0x080048e9
 80048bc:	080048e9 	.word	0x080048e9
 80048c0:	080048e1 	.word	0x080048e1
 80048c4:	080048f1 	.word	0x080048f1
 80048c8:	080048f1 	.word	0x080048f1
 80048cc:	080048f1 	.word	0x080048f1
 80048d0:	080048e9 	.word	0x080048e9
 80048d4:	080048e9 	.word	0x080048e9
 80048d8:	080048e9 	.word	0x080048e9
 80048dc:	080048e9 	.word	0x080048e9
      {
        case LIS2DW12_HIGH_PERFORMANCE:
        case LIS2DW12_HIGH_PERFORMANCE_LOW_NOISE:
          *Odr = 800.0f;
 80048e0:	683b      	ldr	r3, [r7, #0]
 80048e2:	4a3c      	ldr	r2, [pc, #240]	; (80049d4 <LIS2DW12_ACC_GetOutputDataRate+0x3fc>)
 80048e4:	601a      	str	r2, [r3, #0]
          break;
 80048e6:	e00a      	b.n	80048fe <LIS2DW12_ACC_GetOutputDataRate+0x326>
        case LIS2DW12_CONT_LOW_PWR_LOW_NOISE_12bit:
        case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_4:
        case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_3:
        case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_2:
        case LIS2DW12_SINGLE_LOW_LOW_NOISE_PWR_12bit:
          *Odr = 200.0f;
 80048e8:	683b      	ldr	r3, [r7, #0]
 80048ea:	4a38      	ldr	r2, [pc, #224]	; (80049cc <LIS2DW12_ACC_GetOutputDataRate+0x3f4>)
 80048ec:	601a      	str	r2, [r3, #0]
          break;
 80048ee:	e006      	b.n	80048fe <LIS2DW12_ACC_GetOutputDataRate+0x326>

        default:
          *Odr = -1.0f;
 80048f0:	683b      	ldr	r3, [r7, #0]
 80048f2:	4a32      	ldr	r2, [pc, #200]	; (80049bc <LIS2DW12_ACC_GetOutputDataRate+0x3e4>)
 80048f4:	601a      	str	r2, [r3, #0]
          ret = LIS2DW12_ERROR;
 80048f6:	f04f 33ff 	mov.w	r3, #4294967295
 80048fa:	60fb      	str	r3, [r7, #12]
          break;
 80048fc:	bf00      	nop
      }
      break;
 80048fe:	e054      	b.n	80049aa <LIS2DW12_ACC_GetOutputDataRate+0x3d2>

    case LIS2DW12_XL_ODR_1k6Hz:
      switch (mode)
 8004900:	7abb      	ldrb	r3, [r7, #10]
 8004902:	2b1b      	cmp	r3, #27
 8004904:	d842      	bhi.n	800498c <LIS2DW12_ACC_GetOutputDataRate+0x3b4>
 8004906:	a201      	add	r2, pc, #4	; (adr r2, 800490c <LIS2DW12_ACC_GetOutputDataRate+0x334>)
 8004908:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800490c:	08004985 	.word	0x08004985
 8004910:	08004985 	.word	0x08004985
 8004914:	08004985 	.word	0x08004985
 8004918:	08004985 	.word	0x08004985
 800491c:	0800497d 	.word	0x0800497d
 8004920:	0800498d 	.word	0x0800498d
 8004924:	0800498d 	.word	0x0800498d
 8004928:	0800498d 	.word	0x0800498d
 800492c:	08004985 	.word	0x08004985
 8004930:	08004985 	.word	0x08004985
 8004934:	08004985 	.word	0x08004985
 8004938:	08004985 	.word	0x08004985
 800493c:	0800498d 	.word	0x0800498d
 8004940:	0800498d 	.word	0x0800498d
 8004944:	0800498d 	.word	0x0800498d
 8004948:	0800498d 	.word	0x0800498d
 800494c:	08004985 	.word	0x08004985
 8004950:	08004985 	.word	0x08004985
 8004954:	08004985 	.word	0x08004985
 8004958:	08004985 	.word	0x08004985
 800495c:	0800497d 	.word	0x0800497d
 8004960:	0800498d 	.word	0x0800498d
 8004964:	0800498d 	.word	0x0800498d
 8004968:	0800498d 	.word	0x0800498d
 800496c:	08004985 	.word	0x08004985
 8004970:	08004985 	.word	0x08004985
 8004974:	08004985 	.word	0x08004985
 8004978:	08004985 	.word	0x08004985
      {
        case LIS2DW12_HIGH_PERFORMANCE:
        case LIS2DW12_HIGH_PERFORMANCE_LOW_NOISE:
          *Odr = 1600.0f;
 800497c:	683b      	ldr	r3, [r7, #0]
 800497e:	4a16      	ldr	r2, [pc, #88]	; (80049d8 <LIS2DW12_ACC_GetOutputDataRate+0x400>)
 8004980:	601a      	str	r2, [r3, #0]
          break;
 8004982:	e00a      	b.n	800499a <LIS2DW12_ACC_GetOutputDataRate+0x3c2>
        case LIS2DW12_CONT_LOW_PWR_LOW_NOISE_12bit:
        case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_4:
        case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_3:
        case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_2:
        case LIS2DW12_SINGLE_LOW_LOW_NOISE_PWR_12bit:
          *Odr = 200.0f;
 8004984:	683b      	ldr	r3, [r7, #0]
 8004986:	4a11      	ldr	r2, [pc, #68]	; (80049cc <LIS2DW12_ACC_GetOutputDataRate+0x3f4>)
 8004988:	601a      	str	r2, [r3, #0]
          break;
 800498a:	e006      	b.n	800499a <LIS2DW12_ACC_GetOutputDataRate+0x3c2>

        default:
          *Odr = -1.0f;
 800498c:	683b      	ldr	r3, [r7, #0]
 800498e:	4a0b      	ldr	r2, [pc, #44]	; (80049bc <LIS2DW12_ACC_GetOutputDataRate+0x3e4>)
 8004990:	601a      	str	r2, [r3, #0]
          ret = LIS2DW12_ERROR;
 8004992:	f04f 33ff 	mov.w	r3, #4294967295
 8004996:	60fb      	str	r3, [r7, #12]
          break;
 8004998:	bf00      	nop
      }
      break;
 800499a:	e006      	b.n	80049aa <LIS2DW12_ACC_GetOutputDataRate+0x3d2>

    default:
      *Odr = -1.0f;
 800499c:	683b      	ldr	r3, [r7, #0]
 800499e:	4a07      	ldr	r2, [pc, #28]	; (80049bc <LIS2DW12_ACC_GetOutputDataRate+0x3e4>)
 80049a0:	601a      	str	r2, [r3, #0]
      ret = LIS2DW12_ERROR;
 80049a2:	f04f 33ff 	mov.w	r3, #4294967295
 80049a6:	60fb      	str	r3, [r7, #12]
      break;
 80049a8:	bf00      	nop
  }

  return ret;
 80049aa:	68fb      	ldr	r3, [r7, #12]
}
 80049ac:	4618      	mov	r0, r3
 80049ae:	3710      	adds	r7, #16
 80049b0:	46bd      	mov	sp, r7
 80049b2:	bd80      	pop	{r7, pc}
 80049b4:	41480000 	.word	0x41480000
 80049b8:	3fcccccd 	.word	0x3fcccccd
 80049bc:	bf800000 	.word	0xbf800000
 80049c0:	41c80000 	.word	0x41c80000
 80049c4:	42480000 	.word	0x42480000
 80049c8:	42c80000 	.word	0x42c80000
 80049cc:	43480000 	.word	0x43480000
 80049d0:	43c80000 	.word	0x43c80000
 80049d4:	44480000 	.word	0x44480000
 80049d8:	44c80000 	.word	0x44c80000

080049dc <LIS2DW12_ACC_SetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DW12_ACC_SetOutputDataRate(LIS2DW12_Object_t *pObj, float Odr)
{
 80049dc:	b580      	push	{r7, lr}
 80049de:	b082      	sub	sp, #8
 80049e0:	af00      	add	r7, sp, #0
 80049e2:	6078      	str	r0, [r7, #4]
 80049e4:	ed87 0a00 	vstr	s0, [r7]
  /* By default we use High Performance mode and Low Noise disabled */
  return LIS2DW12_ACC_SetOutputDataRate_With_Mode(pObj, Odr, LIS2DW12_HIGH_PERFORMANCE_MODE, LIS2DW12_LOW_NOISE_DISABLE);
 80049e8:	2200      	movs	r2, #0
 80049ea:	2100      	movs	r1, #0
 80049ec:	ed97 0a00 	vldr	s0, [r7]
 80049f0:	6878      	ldr	r0, [r7, #4]
 80049f2:	f000 f805 	bl	8004a00 <LIS2DW12_ACC_SetOutputDataRate_With_Mode>
 80049f6:	4603      	mov	r3, r0
}
 80049f8:	4618      	mov	r0, r3
 80049fa:	3708      	adds	r7, #8
 80049fc:	46bd      	mov	sp, r7
 80049fe:	bd80      	pop	{r7, pc}

08004a00 <LIS2DW12_ACC_SetOutputDataRate_With_Mode>:
  * @param  Noise the low noise option
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DW12_ACC_SetOutputDataRate_With_Mode(LIS2DW12_Object_t *pObj, float Odr, LIS2DW12_Operating_Mode_t Mode,
                                                 LIS2DW12_Low_Noise_t Noise)
{
 8004a00:	b580      	push	{r7, lr}
 8004a02:	b084      	sub	sp, #16
 8004a04:	af00      	add	r7, sp, #0
 8004a06:	60f8      	str	r0, [r7, #12]
 8004a08:	ed87 0a02 	vstr	s0, [r7, #8]
 8004a0c:	460b      	mov	r3, r1
 8004a0e:	71fb      	strb	r3, [r7, #7]
 8004a10:	4613      	mov	r3, r2
 8004a12:	71bb      	strb	r3, [r7, #6]
  /* Check if the component is enabled */
  if (pObj->acc_is_enabled == 1U)
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8004a1a:	2b01      	cmp	r3, #1
 8004a1c:	d109      	bne.n	8004a32 <LIS2DW12_ACC_SetOutputDataRate_With_Mode+0x32>
  {
    return LIS2DW12_ACC_SetOutputDataRate_When_Enabled(pObj, Odr, Mode, Noise);
 8004a1e:	79ba      	ldrb	r2, [r7, #6]
 8004a20:	79fb      	ldrb	r3, [r7, #7]
 8004a22:	4619      	mov	r1, r3
 8004a24:	ed97 0a02 	vldr	s0, [r7, #8]
 8004a28:	68f8      	ldr	r0, [r7, #12]
 8004a2a:	f000 f98d 	bl	8004d48 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled>
 8004a2e:	4603      	mov	r3, r0
 8004a30:	e008      	b.n	8004a44 <LIS2DW12_ACC_SetOutputDataRate_With_Mode+0x44>
  }
  else
  {
    return LIS2DW12_ACC_SetOutputDataRate_When_Disabled(pObj, Odr, Mode, Noise);
 8004a32:	79ba      	ldrb	r2, [r7, #6]
 8004a34:	79fb      	ldrb	r3, [r7, #7]
 8004a36:	4619      	mov	r1, r3
 8004a38:	ed97 0a02 	vldr	s0, [r7, #8]
 8004a3c:	68f8      	ldr	r0, [r7, #12]
 8004a3e:	f000 fa9f 	bl	8004f80 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled>
 8004a42:	4603      	mov	r3, r0
  }
}
 8004a44:	4618      	mov	r0, r3
 8004a46:	3710      	adds	r7, #16
 8004a48:	46bd      	mov	sp, r7
 8004a4a:	bd80      	pop	{r7, pc}

08004a4c <LIS2DW12_ACC_GetFullScale>:
  * @param  pObj the device pObj
  * @param  FullScale pointer where the full scale is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DW12_ACC_GetFullScale(LIS2DW12_Object_t *pObj, int32_t *FullScale)
{
 8004a4c:	b580      	push	{r7, lr}
 8004a4e:	b084      	sub	sp, #16
 8004a50:	af00      	add	r7, sp, #0
 8004a52:	6078      	str	r0, [r7, #4]
 8004a54:	6039      	str	r1, [r7, #0]
  int32_t ret = LIS2DW12_OK;
 8004a56:	2300      	movs	r3, #0
 8004a58:	60fb      	str	r3, [r7, #12]
  lis2dw12_fs_t fs_low_level;

  /* Read actual full scale selection from sensor. */
  if (lis2dw12_full_scale_get(&(pObj->Ctx), &fs_low_level) != LIS2DW12_OK)
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	3320      	adds	r3, #32
 8004a5e:	f107 020b 	add.w	r2, r7, #11
 8004a62:	4611      	mov	r1, r2
 8004a64:	4618      	mov	r0, r3
 8004a66:	f000 fde7 	bl	8005638 <lis2dw12_full_scale_get>
 8004a6a:	4603      	mov	r3, r0
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d002      	beq.n	8004a76 <LIS2DW12_ACC_GetFullScale+0x2a>
  {
    return LIS2DW12_ERROR;
 8004a70:	f04f 33ff 	mov.w	r3, #4294967295
 8004a74:	e027      	b.n	8004ac6 <LIS2DW12_ACC_GetFullScale+0x7a>
  }

  switch (fs_low_level)
 8004a76:	7afb      	ldrb	r3, [r7, #11]
 8004a78:	2b03      	cmp	r3, #3
 8004a7a:	d81b      	bhi.n	8004ab4 <LIS2DW12_ACC_GetFullScale+0x68>
 8004a7c:	a201      	add	r2, pc, #4	; (adr r2, 8004a84 <LIS2DW12_ACC_GetFullScale+0x38>)
 8004a7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a82:	bf00      	nop
 8004a84:	08004a95 	.word	0x08004a95
 8004a88:	08004a9d 	.word	0x08004a9d
 8004a8c:	08004aa5 	.word	0x08004aa5
 8004a90:	08004aad 	.word	0x08004aad
  {
    case LIS2DW12_2g:
      *FullScale =  2;
 8004a94:	683b      	ldr	r3, [r7, #0]
 8004a96:	2202      	movs	r2, #2
 8004a98:	601a      	str	r2, [r3, #0]
      break;
 8004a9a:	e013      	b.n	8004ac4 <LIS2DW12_ACC_GetFullScale+0x78>

    case LIS2DW12_4g:
      *FullScale =  4;
 8004a9c:	683b      	ldr	r3, [r7, #0]
 8004a9e:	2204      	movs	r2, #4
 8004aa0:	601a      	str	r2, [r3, #0]
      break;
 8004aa2:	e00f      	b.n	8004ac4 <LIS2DW12_ACC_GetFullScale+0x78>

    case LIS2DW12_8g:
      *FullScale =  8;
 8004aa4:	683b      	ldr	r3, [r7, #0]
 8004aa6:	2208      	movs	r2, #8
 8004aa8:	601a      	str	r2, [r3, #0]
      break;
 8004aaa:	e00b      	b.n	8004ac4 <LIS2DW12_ACC_GetFullScale+0x78>

    case LIS2DW12_16g:
      *FullScale = 16;
 8004aac:	683b      	ldr	r3, [r7, #0]
 8004aae:	2210      	movs	r2, #16
 8004ab0:	601a      	str	r2, [r3, #0]
      break;
 8004ab2:	e007      	b.n	8004ac4 <LIS2DW12_ACC_GetFullScale+0x78>

    default:
      *FullScale = -1;
 8004ab4:	683b      	ldr	r3, [r7, #0]
 8004ab6:	f04f 32ff 	mov.w	r2, #4294967295
 8004aba:	601a      	str	r2, [r3, #0]
      ret = LIS2DW12_ERROR;
 8004abc:	f04f 33ff 	mov.w	r3, #4294967295
 8004ac0:	60fb      	str	r3, [r7, #12]
      break;
 8004ac2:	bf00      	nop
  }

  return ret;
 8004ac4:	68fb      	ldr	r3, [r7, #12]
}
 8004ac6:	4618      	mov	r0, r3
 8004ac8:	3710      	adds	r7, #16
 8004aca:	46bd      	mov	sp, r7
 8004acc:	bd80      	pop	{r7, pc}
 8004ace:	bf00      	nop

08004ad0 <LIS2DW12_ACC_SetFullScale>:
  * @param  pObj the device pObj
  * @param  FullScale the functional full scale to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DW12_ACC_SetFullScale(LIS2DW12_Object_t *pObj, int32_t FullScale)
{
 8004ad0:	b580      	push	{r7, lr}
 8004ad2:	b084      	sub	sp, #16
 8004ad4:	af00      	add	r7, sp, #0
 8004ad6:	6078      	str	r0, [r7, #4]
 8004ad8:	6039      	str	r1, [r7, #0]
  lis2dw12_fs_t new_fs;

  /* Seems like MISRA C-2012 rule 14.3a violation but only from single file statical analysis point of view because
     the parameter passed to the function is not known at the moment of analysis */
  new_fs = (FullScale <= 2) ? LIS2DW12_2g
           : (FullScale <= 4) ? LIS2DW12_4g
 8004ada:	683b      	ldr	r3, [r7, #0]
 8004adc:	2b02      	cmp	r3, #2
 8004ade:	dd0b      	ble.n	8004af8 <LIS2DW12_ACC_SetFullScale+0x28>
 8004ae0:	683b      	ldr	r3, [r7, #0]
 8004ae2:	2b04      	cmp	r3, #4
 8004ae4:	dd06      	ble.n	8004af4 <LIS2DW12_ACC_SetFullScale+0x24>
 8004ae6:	683b      	ldr	r3, [r7, #0]
 8004ae8:	2b08      	cmp	r3, #8
 8004aea:	dc01      	bgt.n	8004af0 <LIS2DW12_ACC_SetFullScale+0x20>
 8004aec:	2302      	movs	r3, #2
 8004aee:	e004      	b.n	8004afa <LIS2DW12_ACC_SetFullScale+0x2a>
 8004af0:	2303      	movs	r3, #3
 8004af2:	e002      	b.n	8004afa <LIS2DW12_ACC_SetFullScale+0x2a>
 8004af4:	2301      	movs	r3, #1
 8004af6:	e000      	b.n	8004afa <LIS2DW12_ACC_SetFullScale+0x2a>
 8004af8:	2300      	movs	r3, #0
  new_fs = (FullScale <= 2) ? LIS2DW12_2g
 8004afa:	73fb      	strb	r3, [r7, #15]
           : (FullScale <= 8) ? LIS2DW12_8g
           :                    LIS2DW12_16g;

  if (lis2dw12_full_scale_set(&(pObj->Ctx), new_fs) != LIS2DW12_OK)
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	3320      	adds	r3, #32
 8004b00:	7bfa      	ldrb	r2, [r7, #15]
 8004b02:	4611      	mov	r1, r2
 8004b04:	4618      	mov	r0, r3
 8004b06:	f000 fd71 	bl	80055ec <lis2dw12_full_scale_set>
 8004b0a:	4603      	mov	r3, r0
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	d002      	beq.n	8004b16 <LIS2DW12_ACC_SetFullScale+0x46>
  {
    return LIS2DW12_ERROR;
 8004b10:	f04f 33ff 	mov.w	r3, #4294967295
 8004b14:	e000      	b.n	8004b18 <LIS2DW12_ACC_SetFullScale+0x48>
  }

  return LIS2DW12_OK;
 8004b16:	2300      	movs	r3, #0
}
 8004b18:	4618      	mov	r0, r3
 8004b1a:	3710      	adds	r7, #16
 8004b1c:	46bd      	mov	sp, r7
 8004b1e:	bd80      	pop	{r7, pc}

08004b20 <LIS2DW12_ACC_GetAxesRaw>:
  * @param  pObj the device pObj
  * @param  Value pointer where the raw values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DW12_ACC_GetAxesRaw(LIS2DW12_Object_t *pObj, LIS2DW12_AxesRaw_t *Value)
{
 8004b20:	b580      	push	{r7, lr}
 8004b22:	b086      	sub	sp, #24
 8004b24:	af00      	add	r7, sp, #0
 8004b26:	6078      	str	r0, [r7, #4]
 8004b28:	6039      	str	r1, [r7, #0]
  lis2dw12_axis3bit16_t data_raw;
  lis2dw12_mode_t mode;
  int32_t ret = LIS2DW12_OK;
 8004b2a:	2300      	movs	r3, #0
 8004b2c:	617b      	str	r3, [r7, #20]

  /* Read actual power mode selection from sensor. */
  if (lis2dw12_power_mode_get(&(pObj->Ctx), &mode) != LIS2DW12_OK)
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	3320      	adds	r3, #32
 8004b32:	f107 020b 	add.w	r2, r7, #11
 8004b36:	4611      	mov	r1, r2
 8004b38:	4618      	mov	r0, r3
 8004b3a:	f000 fb67 	bl	800520c <lis2dw12_power_mode_get>
 8004b3e:	4603      	mov	r3, r0
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	d002      	beq.n	8004b4a <LIS2DW12_ACC_GetAxesRaw+0x2a>
  {
    return LIS2DW12_ERROR;
 8004b44:	f04f 33ff 	mov.w	r3, #4294967295
 8004b48:	e089      	b.n	8004c5e <LIS2DW12_ACC_GetAxesRaw+0x13e>
  }

  /* Read raw data values. */
  if (lis2dw12_acceleration_raw_get(&(pObj->Ctx), data_raw.i16bit) != LIS2DW12_OK)
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	3320      	adds	r3, #32
 8004b4e:	f107 020c 	add.w	r2, r7, #12
 8004b52:	4611      	mov	r1, r2
 8004b54:	4618      	mov	r0, r3
 8004b56:	f000 fda7 	bl	80056a8 <lis2dw12_acceleration_raw_get>
 8004b5a:	4603      	mov	r3, r0
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	d002      	beq.n	8004b66 <LIS2DW12_ACC_GetAxesRaw+0x46>
  {
    return LIS2DW12_ERROR;
 8004b60:	f04f 33ff 	mov.w	r3, #4294967295
 8004b64:	e07b      	b.n	8004c5e <LIS2DW12_ACC_GetAxesRaw+0x13e>
  }

  switch (mode)
 8004b66:	7afb      	ldrb	r3, [r7, #11]
 8004b68:	2b1b      	cmp	r3, #27
 8004b6a:	d873      	bhi.n	8004c54 <LIS2DW12_ACC_GetAxesRaw+0x134>
 8004b6c:	a201      	add	r2, pc, #4	; (adr r2, 8004b74 <LIS2DW12_ACC_GetAxesRaw+0x54>)
 8004b6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b72:	bf00      	nop
 8004b74:	08004be5 	.word	0x08004be5
 8004b78:	08004c1d 	.word	0x08004c1d
 8004b7c:	08004c1d 	.word	0x08004c1d
 8004b80:	08004c1d 	.word	0x08004c1d
 8004b84:	08004c1d 	.word	0x08004c1d
 8004b88:	08004c55 	.word	0x08004c55
 8004b8c:	08004c55 	.word	0x08004c55
 8004b90:	08004c55 	.word	0x08004c55
 8004b94:	08004be5 	.word	0x08004be5
 8004b98:	08004c1d 	.word	0x08004c1d
 8004b9c:	08004c1d 	.word	0x08004c1d
 8004ba0:	08004c1d 	.word	0x08004c1d
 8004ba4:	08004c55 	.word	0x08004c55
 8004ba8:	08004c55 	.word	0x08004c55
 8004bac:	08004c55 	.word	0x08004c55
 8004bb0:	08004c55 	.word	0x08004c55
 8004bb4:	08004be5 	.word	0x08004be5
 8004bb8:	08004c1d 	.word	0x08004c1d
 8004bbc:	08004c1d 	.word	0x08004c1d
 8004bc0:	08004c1d 	.word	0x08004c1d
 8004bc4:	08004c1d 	.word	0x08004c1d
 8004bc8:	08004c55 	.word	0x08004c55
 8004bcc:	08004c55 	.word	0x08004c55
 8004bd0:	08004c55 	.word	0x08004c55
 8004bd4:	08004be5 	.word	0x08004be5
 8004bd8:	08004c1d 	.word	0x08004c1d
 8004bdc:	08004c1d 	.word	0x08004c1d
 8004be0:	08004c1d 	.word	0x08004c1d
    case LIS2DW12_CONT_LOW_PWR_12bit:
    case LIS2DW12_SINGLE_LOW_PWR_12bit:
    case LIS2DW12_CONT_LOW_PWR_LOW_NOISE_12bit:
    case LIS2DW12_SINGLE_LOW_LOW_NOISE_PWR_12bit:
      /* Data format 12 bits. */
      Value->x = (data_raw.i16bit[0] / 16);
 8004be4:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	da00      	bge.n	8004bee <LIS2DW12_ACC_GetAxesRaw+0xce>
 8004bec:	330f      	adds	r3, #15
 8004bee:	111b      	asrs	r3, r3, #4
 8004bf0:	b21a      	sxth	r2, r3
 8004bf2:	683b      	ldr	r3, [r7, #0]
 8004bf4:	801a      	strh	r2, [r3, #0]
      Value->y = (data_raw.i16bit[1] / 16);
 8004bf6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	da00      	bge.n	8004c00 <LIS2DW12_ACC_GetAxesRaw+0xe0>
 8004bfe:	330f      	adds	r3, #15
 8004c00:	111b      	asrs	r3, r3, #4
 8004c02:	b21a      	sxth	r2, r3
 8004c04:	683b      	ldr	r3, [r7, #0]
 8004c06:	805a      	strh	r2, [r3, #2]
      Value->z = (data_raw.i16bit[2] / 16);
 8004c08:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	da00      	bge.n	8004c12 <LIS2DW12_ACC_GetAxesRaw+0xf2>
 8004c10:	330f      	adds	r3, #15
 8004c12:	111b      	asrs	r3, r3, #4
 8004c14:	b21a      	sxth	r2, r3
 8004c16:	683b      	ldr	r3, [r7, #0]
 8004c18:	809a      	strh	r2, [r3, #4]
      break;
 8004c1a:	e01f      	b.n	8004c5c <LIS2DW12_ACC_GetAxesRaw+0x13c>
    case LIS2DW12_CONT_LOW_PWR_LOW_NOISE_2:
    case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_4:
    case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_3:
    case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_2:
      /* Data format 14 bits. */
      Value->x = (data_raw.i16bit[0] / 4);
 8004c1c:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	da00      	bge.n	8004c26 <LIS2DW12_ACC_GetAxesRaw+0x106>
 8004c24:	3303      	adds	r3, #3
 8004c26:	109b      	asrs	r3, r3, #2
 8004c28:	b21a      	sxth	r2, r3
 8004c2a:	683b      	ldr	r3, [r7, #0]
 8004c2c:	801a      	strh	r2, [r3, #0]
      Value->y = (data_raw.i16bit[1] / 4);
 8004c2e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	da00      	bge.n	8004c38 <LIS2DW12_ACC_GetAxesRaw+0x118>
 8004c36:	3303      	adds	r3, #3
 8004c38:	109b      	asrs	r3, r3, #2
 8004c3a:	b21a      	sxth	r2, r3
 8004c3c:	683b      	ldr	r3, [r7, #0]
 8004c3e:	805a      	strh	r2, [r3, #2]
      Value->z = (data_raw.i16bit[2] / 4);
 8004c40:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	da00      	bge.n	8004c4a <LIS2DW12_ACC_GetAxesRaw+0x12a>
 8004c48:	3303      	adds	r3, #3
 8004c4a:	109b      	asrs	r3, r3, #2
 8004c4c:	b21a      	sxth	r2, r3
 8004c4e:	683b      	ldr	r3, [r7, #0]
 8004c50:	809a      	strh	r2, [r3, #4]
      break;
 8004c52:	e003      	b.n	8004c5c <LIS2DW12_ACC_GetAxesRaw+0x13c>

    default:
      ret = LIS2DW12_ERROR;
 8004c54:	f04f 33ff 	mov.w	r3, #4294967295
 8004c58:	617b      	str	r3, [r7, #20]
      break;
 8004c5a:	bf00      	nop
  }

  return ret;
 8004c5c:	697b      	ldr	r3, [r7, #20]
}
 8004c5e:	4618      	mov	r0, r3
 8004c60:	3718      	adds	r7, #24
 8004c62:	46bd      	mov	sp, r7
 8004c64:	bd80      	pop	{r7, pc}
 8004c66:	bf00      	nop

08004c68 <LIS2DW12_ACC_GetAxes>:
  * @param  pObj the device pObj
  * @param  Acceleration pointer where the values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DW12_ACC_GetAxes(LIS2DW12_Object_t *pObj, LIS2DW12_Axes_t *Acceleration)
{
 8004c68:	b580      	push	{r7, lr}
 8004c6a:	b086      	sub	sp, #24
 8004c6c:	af00      	add	r7, sp, #0
 8004c6e:	6078      	str	r0, [r7, #4]
 8004c70:	6039      	str	r1, [r7, #0]
  LIS2DW12_AxesRaw_t data_raw;
  float sensitivity = 0.0f;
 8004c72:	f04f 0300 	mov.w	r3, #0
 8004c76:	60fb      	str	r3, [r7, #12]

  /* Read raw data values. */
  if (LIS2DW12_ACC_GetAxesRaw(pObj, &data_raw) != LIS2DW12_OK)
 8004c78:	f107 0310 	add.w	r3, r7, #16
 8004c7c:	4619      	mov	r1, r3
 8004c7e:	6878      	ldr	r0, [r7, #4]
 8004c80:	f7ff ff4e 	bl	8004b20 <LIS2DW12_ACC_GetAxesRaw>
 8004c84:	4603      	mov	r3, r0
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d002      	beq.n	8004c90 <LIS2DW12_ACC_GetAxes+0x28>
  {
    return LIS2DW12_ERROR;
 8004c8a:	f04f 33ff 	mov.w	r3, #4294967295
 8004c8e:	e03c      	b.n	8004d0a <LIS2DW12_ACC_GetAxes+0xa2>
  }

  /* Get LIS2DW12 actual sensitivity. */
  if (LIS2DW12_ACC_GetSensitivity(pObj, &sensitivity) != LIS2DW12_OK)
 8004c90:	f107 030c 	add.w	r3, r7, #12
 8004c94:	4619      	mov	r1, r3
 8004c96:	6878      	ldr	r0, [r7, #4]
 8004c98:	f7ff fbd6 	bl	8004448 <LIS2DW12_ACC_GetSensitivity>
 8004c9c:	4603      	mov	r3, r0
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d002      	beq.n	8004ca8 <LIS2DW12_ACC_GetAxes+0x40>
  {
    return LIS2DW12_ERROR;
 8004ca2:	f04f 33ff 	mov.w	r3, #4294967295
 8004ca6:	e030      	b.n	8004d0a <LIS2DW12_ACC_GetAxes+0xa2>
  }

  /* Calculate the data. */
  Acceleration->x = (int32_t)((float)((float)data_raw.x * sensitivity));
 8004ca8:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8004cac:	ee07 3a90 	vmov	s15, r3
 8004cb0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004cb4:	edd7 7a03 	vldr	s15, [r7, #12]
 8004cb8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004cbc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004cc0:	ee17 2a90 	vmov	r2, s15
 8004cc4:	683b      	ldr	r3, [r7, #0]
 8004cc6:	601a      	str	r2, [r3, #0]
  Acceleration->y = (int32_t)((float)((float)data_raw.y * sensitivity));
 8004cc8:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8004ccc:	ee07 3a90 	vmov	s15, r3
 8004cd0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004cd4:	edd7 7a03 	vldr	s15, [r7, #12]
 8004cd8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004cdc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004ce0:	ee17 2a90 	vmov	r2, s15
 8004ce4:	683b      	ldr	r3, [r7, #0]
 8004ce6:	605a      	str	r2, [r3, #4]
  Acceleration->z = (int32_t)((float)((float)data_raw.z * sensitivity));
 8004ce8:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8004cec:	ee07 3a90 	vmov	s15, r3
 8004cf0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004cf4:	edd7 7a03 	vldr	s15, [r7, #12]
 8004cf8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004cfc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004d00:	ee17 2a90 	vmov	r2, s15
 8004d04:	683b      	ldr	r3, [r7, #0]
 8004d06:	609a      	str	r2, [r3, #8]

  return LIS2DW12_OK;
 8004d08:	2300      	movs	r3, #0
}
 8004d0a:	4618      	mov	r0, r3
 8004d0c:	3718      	adds	r7, #24
 8004d0e:	46bd      	mov	sp, r7
 8004d10:	bd80      	pop	{r7, pc}

08004d12 <LIS2DW12_Write_Reg>:
  * @param  Reg address to be written
  * @param  Data value to be written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DW12_Write_Reg(LIS2DW12_Object_t *pObj, uint8_t Reg, uint8_t Data)
{
 8004d12:	b580      	push	{r7, lr}
 8004d14:	b082      	sub	sp, #8
 8004d16:	af00      	add	r7, sp, #0
 8004d18:	6078      	str	r0, [r7, #4]
 8004d1a:	460b      	mov	r3, r1
 8004d1c:	70fb      	strb	r3, [r7, #3]
 8004d1e:	4613      	mov	r3, r2
 8004d20:	70bb      	strb	r3, [r7, #2]
  if (lis2dw12_write_reg(&(pObj->Ctx), Reg, &Data, 1) != LIS2DW12_OK)
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	f103 0020 	add.w	r0, r3, #32
 8004d28:	1cba      	adds	r2, r7, #2
 8004d2a:	78f9      	ldrb	r1, [r7, #3]
 8004d2c:	2301      	movs	r3, #1
 8004d2e:	f000 fa07 	bl	8005140 <lis2dw12_write_reg>
 8004d32:	4603      	mov	r3, r0
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	d002      	beq.n	8004d3e <LIS2DW12_Write_Reg+0x2c>
  {
    return LIS2DW12_ERROR;
 8004d38:	f04f 33ff 	mov.w	r3, #4294967295
 8004d3c:	e000      	b.n	8004d40 <LIS2DW12_Write_Reg+0x2e>
  }

  return LIS2DW12_OK;
 8004d3e:	2300      	movs	r3, #0
}
 8004d40:	4618      	mov	r0, r3
 8004d42:	3708      	adds	r7, #8
 8004d44:	46bd      	mov	sp, r7
 8004d46:	bd80      	pop	{r7, pc}

08004d48 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled>:
  * @param  Noise the low noise option
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LIS2DW12_ACC_SetOutputDataRate_When_Enabled(LIS2DW12_Object_t *pObj, float Odr,
                                                           LIS2DW12_Operating_Mode_t Mode, LIS2DW12_Low_Noise_t Noise)
{
 8004d48:	b580      	push	{r7, lr}
 8004d4a:	b086      	sub	sp, #24
 8004d4c:	af00      	add	r7, sp, #0
 8004d4e:	60f8      	str	r0, [r7, #12]
 8004d50:	ed87 0a02 	vstr	s0, [r7, #8]
 8004d54:	460b      	mov	r3, r1
 8004d56:	71fb      	strb	r3, [r7, #7]
 8004d58:	4613      	mov	r3, r2
 8004d5a:	71bb      	strb	r3, [r7, #6]
  lis2dw12_odr_t new_odr;
  lis2dw12_mode_t new_power_mode;

  switch (Mode)
 8004d5c:	79fb      	ldrb	r3, [r7, #7]
 8004d5e:	3b01      	subs	r3, #1
 8004d60:	2b03      	cmp	r3, #3
 8004d62:	d80b      	bhi.n	8004d7c <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x34>
 8004d64:	a201      	add	r2, pc, #4	; (adr r2, 8004d6c <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x24>)
 8004d66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d6a:	bf00      	nop
 8004d6c:	08004da9 	.word	0x08004da9
 8004d70:	08004dd5 	.word	0x08004dd5
 8004d74:	08004e01 	.word	0x08004e01
 8004d78:	08004e2d 	.word	0x08004e2d
  {
    case LIS2DW12_HIGH_PERFORMANCE_MODE:
    default:
      switch (Noise)
 8004d7c:	79bb      	ldrb	r3, [r7, #6]
 8004d7e:	2b01      	cmp	r3, #1
 8004d80:	d002      	beq.n	8004d88 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x40>
      {
        case LIS2DW12_LOW_NOISE_DISABLE:
        default:
          new_power_mode = LIS2DW12_HIGH_PERFORMANCE;
 8004d82:	2304      	movs	r3, #4
 8004d84:	75fb      	strb	r3, [r7, #23]
          break;
 8004d86:	e002      	b.n	8004d8e <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x46>
        case LIS2DW12_LOW_NOISE_ENABLE:
          new_power_mode = LIS2DW12_HIGH_PERFORMANCE_LOW_NOISE;
 8004d88:	2314      	movs	r3, #20
 8004d8a:	75fb      	strb	r3, [r7, #23]
          break;
 8004d8c:	bf00      	nop
      }

      /* If High Performance mode minimum ODR is 12.5Hz */
      if (Odr < 12.5f)
 8004d8e:	edd7 7a02 	vldr	s15, [r7, #8]
 8004d92:	eeb2 7a09 	vmov.f32	s14, #41	; 0x41480000  12.5
 8004d96:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004d9a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004d9e:	d400      	bmi.n	8004da2 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x5a>
      {
        Odr = 12.5f;
      }
      break;
 8004da0:	e05a      	b.n	8004e58 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x110>
        Odr = 12.5f;
 8004da2:	4b6f      	ldr	r3, [pc, #444]	; (8004f60 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x218>)
 8004da4:	60bb      	str	r3, [r7, #8]
      break;
 8004da6:	e057      	b.n	8004e58 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x110>
    case LIS2DW12_LOW_POWER_MODE4:
      switch (Noise)
 8004da8:	79bb      	ldrb	r3, [r7, #6]
 8004daa:	2b01      	cmp	r3, #1
 8004dac:	d002      	beq.n	8004db4 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x6c>
      {
        case LIS2DW12_LOW_NOISE_DISABLE:
        default:
          new_power_mode = LIS2DW12_CONT_LOW_PWR_4;
 8004dae:	2303      	movs	r3, #3
 8004db0:	75fb      	strb	r3, [r7, #23]
          break;
 8004db2:	e002      	b.n	8004dba <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x72>
        case LIS2DW12_LOW_NOISE_ENABLE:
          new_power_mode = LIS2DW12_CONT_LOW_PWR_LOW_NOISE_4;
 8004db4:	2313      	movs	r3, #19
 8004db6:	75fb      	strb	r3, [r7, #23]
          break;
 8004db8:	bf00      	nop
      }

      /* If Low Power mode maximum ODR is 200Hz */
      if (Odr > 200.0f)
 8004dba:	edd7 7a02 	vldr	s15, [r7, #8]
 8004dbe:	ed9f 7a69 	vldr	s14, [pc, #420]	; 8004f64 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x21c>
 8004dc2:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004dc6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004dca:	dc00      	bgt.n	8004dce <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x86>
      {
        Odr = 200.0f;
      }
      break;
 8004dcc:	e044      	b.n	8004e58 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x110>
        Odr = 200.0f;
 8004dce:	4b66      	ldr	r3, [pc, #408]	; (8004f68 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x220>)
 8004dd0:	60bb      	str	r3, [r7, #8]
      break;
 8004dd2:	e041      	b.n	8004e58 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x110>
    case LIS2DW12_LOW_POWER_MODE3:
      switch (Noise)
 8004dd4:	79bb      	ldrb	r3, [r7, #6]
 8004dd6:	2b01      	cmp	r3, #1
 8004dd8:	d002      	beq.n	8004de0 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x98>
      {
        case LIS2DW12_LOW_NOISE_DISABLE:
        default:
          new_power_mode = LIS2DW12_CONT_LOW_PWR_3;
 8004dda:	2302      	movs	r3, #2
 8004ddc:	75fb      	strb	r3, [r7, #23]
          break;
 8004dde:	e002      	b.n	8004de6 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x9e>
        case LIS2DW12_LOW_NOISE_ENABLE:
          new_power_mode = LIS2DW12_CONT_LOW_PWR_LOW_NOISE_3;
 8004de0:	2312      	movs	r3, #18
 8004de2:	75fb      	strb	r3, [r7, #23]
          break;
 8004de4:	bf00      	nop
      }

      /* If Low Power mode maximum ODR is 200Hz */
      if (Odr > 200.0f)
 8004de6:	edd7 7a02 	vldr	s15, [r7, #8]
 8004dea:	ed9f 7a5e 	vldr	s14, [pc, #376]	; 8004f64 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x21c>
 8004dee:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004df2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004df6:	dc00      	bgt.n	8004dfa <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0xb2>
      {
        Odr = 200.0f;
      }
      break;
 8004df8:	e02e      	b.n	8004e58 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x110>
        Odr = 200.0f;
 8004dfa:	4b5b      	ldr	r3, [pc, #364]	; (8004f68 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x220>)
 8004dfc:	60bb      	str	r3, [r7, #8]
      break;
 8004dfe:	e02b      	b.n	8004e58 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x110>
    case LIS2DW12_LOW_POWER_MODE2:
      switch (Noise)
 8004e00:	79bb      	ldrb	r3, [r7, #6]
 8004e02:	2b01      	cmp	r3, #1
 8004e04:	d002      	beq.n	8004e0c <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0xc4>
      {
        case LIS2DW12_LOW_NOISE_DISABLE:
        default:
          new_power_mode = LIS2DW12_CONT_LOW_PWR_2;
 8004e06:	2301      	movs	r3, #1
 8004e08:	75fb      	strb	r3, [r7, #23]
          break;
 8004e0a:	e002      	b.n	8004e12 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0xca>
        case LIS2DW12_LOW_NOISE_ENABLE:
          new_power_mode = LIS2DW12_CONT_LOW_PWR_LOW_NOISE_2;
 8004e0c:	2311      	movs	r3, #17
 8004e0e:	75fb      	strb	r3, [r7, #23]
          break;
 8004e10:	bf00      	nop
      }

      /* If Low Power mode maximum ODR is 200Hz */
      if (Odr > 200.0f)
 8004e12:	edd7 7a02 	vldr	s15, [r7, #8]
 8004e16:	ed9f 7a53 	vldr	s14, [pc, #332]	; 8004f64 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x21c>
 8004e1a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004e1e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004e22:	dc00      	bgt.n	8004e26 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0xde>
      {
        Odr = 200.0f;
      }
      break;
 8004e24:	e018      	b.n	8004e58 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x110>
        Odr = 200.0f;
 8004e26:	4b50      	ldr	r3, [pc, #320]	; (8004f68 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x220>)
 8004e28:	60bb      	str	r3, [r7, #8]
      break;
 8004e2a:	e015      	b.n	8004e58 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x110>
    case LIS2DW12_LOW_POWER_MODE1:
      switch (Noise)
 8004e2c:	79bb      	ldrb	r3, [r7, #6]
 8004e2e:	2b01      	cmp	r3, #1
 8004e30:	d002      	beq.n	8004e38 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0xf0>
      {
        case LIS2DW12_LOW_NOISE_DISABLE:
        default:
          new_power_mode = LIS2DW12_CONT_LOW_PWR_12bit;
 8004e32:	2300      	movs	r3, #0
 8004e34:	75fb      	strb	r3, [r7, #23]
          break;
 8004e36:	e002      	b.n	8004e3e <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0xf6>
        case LIS2DW12_LOW_NOISE_ENABLE:
          new_power_mode = LIS2DW12_CONT_LOW_PWR_LOW_NOISE_12bit;
 8004e38:	2310      	movs	r3, #16
 8004e3a:	75fb      	strb	r3, [r7, #23]
          break;
 8004e3c:	bf00      	nop
      }

      /* If Low Power mode maximum ODR is 200Hz */
      if (Odr > 200.0f)
 8004e3e:	edd7 7a02 	vldr	s15, [r7, #8]
 8004e42:	ed9f 7a48 	vldr	s14, [pc, #288]	; 8004f64 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x21c>
 8004e46:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004e4a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004e4e:	dc00      	bgt.n	8004e52 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x10a>
      {
        Odr = 200.0f;
      }
      break;
 8004e50:	e001      	b.n	8004e56 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x10e>
        Odr = 200.0f;
 8004e52:	4b45      	ldr	r3, [pc, #276]	; (8004f68 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x220>)
 8004e54:	60bb      	str	r3, [r7, #8]
      break;
 8004e56:	bf00      	nop
  }

  new_odr = (Odr <=    1.6f) ? LIS2DW12_XL_ODR_1Hz6_LP_ONLY
            : (Odr <=   12.5f) ? LIS2DW12_XL_ODR_12Hz5
 8004e58:	edd7 7a02 	vldr	s15, [r7, #8]
 8004e5c:	ed9f 7a43 	vldr	s14, [pc, #268]	; 8004f6c <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x224>
 8004e60:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004e64:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004e68:	d801      	bhi.n	8004e6e <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x126>
 8004e6a:	2301      	movs	r3, #1
 8004e6c:	e04d      	b.n	8004f0a <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x1c2>
 8004e6e:	edd7 7a02 	vldr	s15, [r7, #8]
 8004e72:	eeb2 7a09 	vmov.f32	s14, #41	; 0x41480000  12.5
 8004e76:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004e7a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004e7e:	d801      	bhi.n	8004e84 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x13c>
 8004e80:	2302      	movs	r3, #2
 8004e82:	e042      	b.n	8004f0a <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x1c2>
 8004e84:	edd7 7a02 	vldr	s15, [r7, #8]
 8004e88:	eeb3 7a09 	vmov.f32	s14, #57	; 0x41c80000  25.0
 8004e8c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004e90:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004e94:	d801      	bhi.n	8004e9a <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x152>
 8004e96:	2303      	movs	r3, #3
 8004e98:	e037      	b.n	8004f0a <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x1c2>
 8004e9a:	edd7 7a02 	vldr	s15, [r7, #8]
 8004e9e:	ed9f 7a34 	vldr	s14, [pc, #208]	; 8004f70 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x228>
 8004ea2:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004ea6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004eaa:	d801      	bhi.n	8004eb0 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x168>
 8004eac:	2304      	movs	r3, #4
 8004eae:	e02c      	b.n	8004f0a <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x1c2>
 8004eb0:	edd7 7a02 	vldr	s15, [r7, #8]
 8004eb4:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 8004f74 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x22c>
 8004eb8:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004ebc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004ec0:	d801      	bhi.n	8004ec6 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x17e>
 8004ec2:	2305      	movs	r3, #5
 8004ec4:	e021      	b.n	8004f0a <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x1c2>
 8004ec6:	edd7 7a02 	vldr	s15, [r7, #8]
 8004eca:	ed9f 7a26 	vldr	s14, [pc, #152]	; 8004f64 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x21c>
 8004ece:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004ed2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004ed6:	d801      	bhi.n	8004edc <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x194>
 8004ed8:	2306      	movs	r3, #6
 8004eda:	e016      	b.n	8004f0a <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x1c2>
 8004edc:	edd7 7a02 	vldr	s15, [r7, #8]
 8004ee0:	ed9f 7a25 	vldr	s14, [pc, #148]	; 8004f78 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x230>
 8004ee4:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004ee8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004eec:	d801      	bhi.n	8004ef2 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x1aa>
 8004eee:	2307      	movs	r3, #7
 8004ef0:	e00b      	b.n	8004f0a <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x1c2>
 8004ef2:	edd7 7a02 	vldr	s15, [r7, #8]
 8004ef6:	ed9f 7a21 	vldr	s14, [pc, #132]	; 8004f7c <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x234>
 8004efa:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004efe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004f02:	d801      	bhi.n	8004f08 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x1c0>
 8004f04:	2308      	movs	r3, #8
 8004f06:	e000      	b.n	8004f0a <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x1c2>
 8004f08:	2309      	movs	r3, #9
  new_odr = (Odr <=    1.6f) ? LIS2DW12_XL_ODR_1Hz6_LP_ONLY
 8004f0a:	75bb      	strb	r3, [r7, #22]
            : (Odr <=  400.0f) ? LIS2DW12_XL_ODR_400Hz
            : (Odr <=  800.0f) ? LIS2DW12_XL_ODR_800Hz
            :                    LIS2DW12_XL_ODR_1k6Hz;

  /* Output data rate selection. */
  if (lis2dw12_data_rate_set(&(pObj->Ctx), new_odr) != LIS2DW12_OK)
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	3320      	adds	r3, #32
 8004f10:	7dba      	ldrb	r2, [r7, #22]
 8004f12:	4611      	mov	r1, r2
 8004f14:	4618      	mov	r0, r3
 8004f16:	f000 fa33 	bl	8005380 <lis2dw12_data_rate_set>
 8004f1a:	4603      	mov	r3, r0
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	d002      	beq.n	8004f26 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x1de>
  {
    return LIS2DW12_ERROR;
 8004f20:	f04f 33ff 	mov.w	r3, #4294967295
 8004f24:	e018      	b.n	8004f58 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x210>
  }

  /* Power mode selection. */
  if (lis2dw12_power_mode_set(&(pObj->Ctx), new_power_mode) != LIS2DW12_OK)
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	3320      	adds	r3, #32
 8004f2a:	7dfa      	ldrb	r2, [r7, #23]
 8004f2c:	4611      	mov	r1, r2
 8004f2e:	4618      	mov	r0, r3
 8004f30:	f000 f91e 	bl	8005170 <lis2dw12_power_mode_set>
 8004f34:	4603      	mov	r3, r0
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	d002      	beq.n	8004f40 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x1f8>
  {
    return LIS2DW12_ERROR;
 8004f3a:	f04f 33ff 	mov.w	r3, #4294967295
 8004f3e:	e00b      	b.n	8004f58 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x210>
  }

  /* Store the current Odr, Mode and Noise values */
  pObj->acc_odr = Odr;
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	68ba      	ldr	r2, [r7, #8]
 8004f44:	635a      	str	r2, [r3, #52]	; 0x34
  pObj->acc_operating_mode = Mode;
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	79fa      	ldrb	r2, [r7, #7]
 8004f4a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  pObj->acc_low_noise = Noise;
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	79ba      	ldrb	r2, [r7, #6]
 8004f52:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return LIS2DW12_OK;
 8004f56:	2300      	movs	r3, #0
}
 8004f58:	4618      	mov	r0, r3
 8004f5a:	3718      	adds	r7, #24
 8004f5c:	46bd      	mov	sp, r7
 8004f5e:	bd80      	pop	{r7, pc}
 8004f60:	41480000 	.word	0x41480000
 8004f64:	43480000 	.word	0x43480000
 8004f68:	43480000 	.word	0x43480000
 8004f6c:	3fcccccd 	.word	0x3fcccccd
 8004f70:	42480000 	.word	0x42480000
 8004f74:	42c80000 	.word	0x42c80000
 8004f78:	43c80000 	.word	0x43c80000
 8004f7c:	44480000 	.word	0x44480000

08004f80 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled>:
  * @param  Noise the low noise option
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LIS2DW12_ACC_SetOutputDataRate_When_Disabled(LIS2DW12_Object_t *pObj, float Odr,
                                                            LIS2DW12_Operating_Mode_t Mode, LIS2DW12_Low_Noise_t Noise)
{
 8004f80:	b480      	push	{r7}
 8004f82:	b085      	sub	sp, #20
 8004f84:	af00      	add	r7, sp, #0
 8004f86:	60f8      	str	r0, [r7, #12]
 8004f88:	ed87 0a02 	vstr	s0, [r7, #8]
 8004f8c:	460b      	mov	r3, r1
 8004f8e:	71fb      	strb	r3, [r7, #7]
 8004f90:	4613      	mov	r3, r2
 8004f92:	71bb      	strb	r3, [r7, #6]
  /* Store the new Odr, Mode and Noise values */
  pObj->acc_operating_mode = Mode;
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	79fa      	ldrb	r2, [r7, #7]
 8004f98:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  pObj->acc_low_noise = Noise;
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	79ba      	ldrb	r2, [r7, #6]
 8004fa0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  pObj->acc_odr = (Odr <=    1.6f) ?    1.6f
                  : (Odr <=   12.5f) ?   12.5f
 8004fa4:	edd7 7a02 	vldr	s15, [r7, #8]
 8004fa8:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 8005068 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xe8>
 8004fac:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004fb0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004fb4:	d801      	bhi.n	8004fba <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0x3a>
 8004fb6:	4b2d      	ldr	r3, [pc, #180]	; (800506c <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xec>)
 8004fb8:	e04d      	b.n	8005056 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xd6>
                  : (Odr <=   25.0f) ?   25.0f
 8004fba:	edd7 7a02 	vldr	s15, [r7, #8]
 8004fbe:	eeb2 7a09 	vmov.f32	s14, #41	; 0x41480000  12.5
 8004fc2:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004fc6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004fca:	d801      	bhi.n	8004fd0 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0x50>
 8004fcc:	4b28      	ldr	r3, [pc, #160]	; (8005070 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xf0>)
 8004fce:	e042      	b.n	8005056 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xd6>
                  : (Odr <=   50.0f) ?   50.0f
 8004fd0:	edd7 7a02 	vldr	s15, [r7, #8]
 8004fd4:	eeb3 7a09 	vmov.f32	s14, #57	; 0x41c80000  25.0
 8004fd8:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004fdc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004fe0:	d801      	bhi.n	8004fe6 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0x66>
 8004fe2:	4b24      	ldr	r3, [pc, #144]	; (8005074 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xf4>)
 8004fe4:	e037      	b.n	8005056 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xd6>
                  : (Odr <=  100.0f) ?  100.0f
 8004fe6:	edd7 7a02 	vldr	s15, [r7, #8]
 8004fea:	ed9f 7a23 	vldr	s14, [pc, #140]	; 8005078 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xf8>
 8004fee:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004ff2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004ff6:	d801      	bhi.n	8004ffc <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0x7c>
 8004ff8:	4b20      	ldr	r3, [pc, #128]	; (800507c <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xfc>)
 8004ffa:	e02c      	b.n	8005056 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xd6>
                  : (Odr <=  200.0f) ?  200.0f
 8004ffc:	edd7 7a02 	vldr	s15, [r7, #8]
 8005000:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 8005080 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0x100>
 8005004:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005008:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800500c:	d801      	bhi.n	8005012 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0x92>
 800500e:	4b1d      	ldr	r3, [pc, #116]	; (8005084 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0x104>)
 8005010:	e021      	b.n	8005056 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xd6>
                  : (Odr <=  400.0f) ?  400.0f
 8005012:	edd7 7a02 	vldr	s15, [r7, #8]
 8005016:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 8005088 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0x108>
 800501a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800501e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005022:	d801      	bhi.n	8005028 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xa8>
 8005024:	4b19      	ldr	r3, [pc, #100]	; (800508c <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0x10c>)
 8005026:	e016      	b.n	8005056 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xd6>
                  : (Odr <=  800.0f) ?  800.0f
 8005028:	edd7 7a02 	vldr	s15, [r7, #8]
 800502c:	ed9f 7a18 	vldr	s14, [pc, #96]	; 8005090 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0x110>
 8005030:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005034:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005038:	d801      	bhi.n	800503e <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xbe>
 800503a:	4b16      	ldr	r3, [pc, #88]	; (8005094 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0x114>)
 800503c:	e00b      	b.n	8005056 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xd6>
                  :                    1600.0f;
 800503e:	edd7 7a02 	vldr	s15, [r7, #8]
 8005042:	ed9f 7a15 	vldr	s14, [pc, #84]	; 8005098 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0x118>
 8005046:	eef4 7ac7 	vcmpe.f32	s15, s14
 800504a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800504e:	d801      	bhi.n	8005054 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xd4>
 8005050:	4b12      	ldr	r3, [pc, #72]	; (800509c <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0x11c>)
 8005052:	e000      	b.n	8005056 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xd6>
 8005054:	4b12      	ldr	r3, [pc, #72]	; (80050a0 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0x120>)
  pObj->acc_odr = (Odr <=    1.6f) ?    1.6f
 8005056:	68fa      	ldr	r2, [r7, #12]
 8005058:	6353      	str	r3, [r2, #52]	; 0x34

  return LIS2DW12_OK;
 800505a:	2300      	movs	r3, #0
}
 800505c:	4618      	mov	r0, r3
 800505e:	3714      	adds	r7, #20
 8005060:	46bd      	mov	sp, r7
 8005062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005066:	4770      	bx	lr
 8005068:	3fcccccd 	.word	0x3fcccccd
 800506c:	3fcccccd 	.word	0x3fcccccd
 8005070:	41480000 	.word	0x41480000
 8005074:	41c80000 	.word	0x41c80000
 8005078:	42480000 	.word	0x42480000
 800507c:	42480000 	.word	0x42480000
 8005080:	42c80000 	.word	0x42c80000
 8005084:	42c80000 	.word	0x42c80000
 8005088:	43480000 	.word	0x43480000
 800508c:	43480000 	.word	0x43480000
 8005090:	43c80000 	.word	0x43c80000
 8005094:	43c80000 	.word	0x43c80000
 8005098:	44480000 	.word	0x44480000
 800509c:	44480000 	.word	0x44480000
 80050a0:	44c80000 	.word	0x44c80000

080050a4 <ReadRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t ReadRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 80050a4:	b590      	push	{r4, r7, lr}
 80050a6:	b087      	sub	sp, #28
 80050a8:	af00      	add	r7, sp, #0
 80050aa:	60f8      	str	r0, [r7, #12]
 80050ac:	607a      	str	r2, [r7, #4]
 80050ae:	461a      	mov	r2, r3
 80050b0:	460b      	mov	r3, r1
 80050b2:	72fb      	strb	r3, [r7, #11]
 80050b4:	4613      	mov	r3, r2
 80050b6:	813b      	strh	r3, [r7, #8]
  LIS2DW12_Object_t *pObj = (LIS2DW12_Object_t *)Handle;
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	617b      	str	r3, [r7, #20]

  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 80050bc:	697b      	ldr	r3, [r7, #20]
 80050be:	695c      	ldr	r4, [r3, #20]
 80050c0:	697b      	ldr	r3, [r7, #20]
 80050c2:	7b1b      	ldrb	r3, [r3, #12]
 80050c4:	b298      	uxth	r0, r3
 80050c6:	7afb      	ldrb	r3, [r7, #11]
 80050c8:	b299      	uxth	r1, r3
 80050ca:	893b      	ldrh	r3, [r7, #8]
 80050cc:	687a      	ldr	r2, [r7, #4]
 80050ce:	47a0      	blx	r4
 80050d0:	4603      	mov	r3, r0
}
 80050d2:	4618      	mov	r0, r3
 80050d4:	371c      	adds	r7, #28
 80050d6:	46bd      	mov	sp, r7
 80050d8:	bd90      	pop	{r4, r7, pc}

080050da <WriteRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t WriteRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 80050da:	b590      	push	{r4, r7, lr}
 80050dc:	b087      	sub	sp, #28
 80050de:	af00      	add	r7, sp, #0
 80050e0:	60f8      	str	r0, [r7, #12]
 80050e2:	607a      	str	r2, [r7, #4]
 80050e4:	461a      	mov	r2, r3
 80050e6:	460b      	mov	r3, r1
 80050e8:	72fb      	strb	r3, [r7, #11]
 80050ea:	4613      	mov	r3, r2
 80050ec:	813b      	strh	r3, [r7, #8]
  LIS2DW12_Object_t *pObj = (LIS2DW12_Object_t *)Handle;
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	617b      	str	r3, [r7, #20]

  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 80050f2:	697b      	ldr	r3, [r7, #20]
 80050f4:	691c      	ldr	r4, [r3, #16]
 80050f6:	697b      	ldr	r3, [r7, #20]
 80050f8:	7b1b      	ldrb	r3, [r3, #12]
 80050fa:	b298      	uxth	r0, r3
 80050fc:	7afb      	ldrb	r3, [r7, #11]
 80050fe:	b299      	uxth	r1, r3
 8005100:	893b      	ldrh	r3, [r7, #8]
 8005102:	687a      	ldr	r2, [r7, #4]
 8005104:	47a0      	blx	r4
 8005106:	4603      	mov	r3, r0
}
 8005108:	4618      	mov	r0, r3
 800510a:	371c      	adds	r7, #28
 800510c:	46bd      	mov	sp, r7
 800510e:	bd90      	pop	{r4, r7, pc}

08005110 <lis2dw12_read_reg>:
  *
  */
int32_t lis2dw12_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                          uint8_t *data,
                          uint16_t len)
{
 8005110:	b590      	push	{r4, r7, lr}
 8005112:	b087      	sub	sp, #28
 8005114:	af00      	add	r7, sp, #0
 8005116:	60f8      	str	r0, [r7, #12]
 8005118:	607a      	str	r2, [r7, #4]
 800511a:	461a      	mov	r2, r3
 800511c:	460b      	mov	r3, r1
 800511e:	72fb      	strb	r3, [r7, #11]
 8005120:	4613      	mov	r3, r2
 8005122:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	685c      	ldr	r4, [r3, #4]
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	68d8      	ldr	r0, [r3, #12]
 800512c:	893b      	ldrh	r3, [r7, #8]
 800512e:	7af9      	ldrb	r1, [r7, #11]
 8005130:	687a      	ldr	r2, [r7, #4]
 8005132:	47a0      	blx	r4
 8005134:	6178      	str	r0, [r7, #20]

  return ret;
 8005136:	697b      	ldr	r3, [r7, #20]
}
 8005138:	4618      	mov	r0, r3
 800513a:	371c      	adds	r7, #28
 800513c:	46bd      	mov	sp, r7
 800513e:	bd90      	pop	{r4, r7, pc}

08005140 <lis2dw12_write_reg>:
  *
  */
int32_t lis2dw12_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                           uint8_t *data,
                           uint16_t len)
{
 8005140:	b590      	push	{r4, r7, lr}
 8005142:	b087      	sub	sp, #28
 8005144:	af00      	add	r7, sp, #0
 8005146:	60f8      	str	r0, [r7, #12]
 8005148:	607a      	str	r2, [r7, #4]
 800514a:	461a      	mov	r2, r3
 800514c:	460b      	mov	r3, r1
 800514e:	72fb      	strb	r3, [r7, #11]
 8005150:	4613      	mov	r3, r2
 8005152:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	681c      	ldr	r4, [r3, #0]
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	68d8      	ldr	r0, [r3, #12]
 800515c:	893b      	ldrh	r3, [r7, #8]
 800515e:	7af9      	ldrb	r1, [r7, #11]
 8005160:	687a      	ldr	r2, [r7, #4]
 8005162:	47a0      	blx	r4
 8005164:	6178      	str	r0, [r7, #20]

  return ret;
 8005166:	697b      	ldr	r3, [r7, #20]
}
 8005168:	4618      	mov	r0, r3
 800516a:	371c      	adds	r7, #28
 800516c:	46bd      	mov	sp, r7
 800516e:	bd90      	pop	{r4, r7, pc}

08005170 <lis2dw12_power_mode_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_power_mode_set(stmdev_ctx_t *ctx,
                                lis2dw12_mode_t val)
{
 8005170:	b580      	push	{r7, lr}
 8005172:	b086      	sub	sp, #24
 8005174:	af00      	add	r7, sp, #0
 8005176:	6078      	str	r0, [r7, #4]
 8005178:	460b      	mov	r3, r1
 800517a:	70fb      	strb	r3, [r7, #3]
  lis2dw12_ctrl1_t ctrl1;
  lis2dw12_ctrl6_t ctrl6;
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL1, (uint8_t *) &ctrl1, 1);
 800517c:	f107 0210 	add.w	r2, r7, #16
 8005180:	2301      	movs	r3, #1
 8005182:	2120      	movs	r1, #32
 8005184:	6878      	ldr	r0, [r7, #4]
 8005186:	f7ff ffc3 	bl	8005110 <lis2dw12_read_reg>
 800518a:	6178      	str	r0, [r7, #20]

  if (ret == 0)
 800518c:	697b      	ldr	r3, [r7, #20]
 800518e:	2b00      	cmp	r3, #0
 8005190:	d118      	bne.n	80051c4 <lis2dw12_power_mode_set+0x54>
  {
    ctrl1.mode = ((uint8_t) val & 0x0CU) >> 2;
 8005192:	78fb      	ldrb	r3, [r7, #3]
 8005194:	089b      	lsrs	r3, r3, #2
 8005196:	f003 0303 	and.w	r3, r3, #3
 800519a:	b2da      	uxtb	r2, r3
 800519c:	7c3b      	ldrb	r3, [r7, #16]
 800519e:	f362 0383 	bfi	r3, r2, #2, #2
 80051a2:	743b      	strb	r3, [r7, #16]
    ctrl1.lp_mode = (uint8_t) val & 0x03U ;
 80051a4:	78fb      	ldrb	r3, [r7, #3]
 80051a6:	f003 0303 	and.w	r3, r3, #3
 80051aa:	b2da      	uxtb	r2, r3
 80051ac:	7c3b      	ldrb	r3, [r7, #16]
 80051ae:	f362 0301 	bfi	r3, r2, #0, #2
 80051b2:	743b      	strb	r3, [r7, #16]
    ret = lis2dw12_write_reg(ctx, LIS2DW12_CTRL1, (uint8_t *) &ctrl1, 1);
 80051b4:	f107 0210 	add.w	r2, r7, #16
 80051b8:	2301      	movs	r3, #1
 80051ba:	2120      	movs	r1, #32
 80051bc:	6878      	ldr	r0, [r7, #4]
 80051be:	f7ff ffbf 	bl	8005140 <lis2dw12_write_reg>
 80051c2:	6178      	str	r0, [r7, #20]
  }

  if (ret == 0)
 80051c4:	697b      	ldr	r3, [r7, #20]
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	d107      	bne.n	80051da <lis2dw12_power_mode_set+0x6a>
  {
    ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL6, (uint8_t *) &ctrl6, 1);
 80051ca:	f107 020c 	add.w	r2, r7, #12
 80051ce:	2301      	movs	r3, #1
 80051d0:	2125      	movs	r1, #37	; 0x25
 80051d2:	6878      	ldr	r0, [r7, #4]
 80051d4:	f7ff ff9c 	bl	8005110 <lis2dw12_read_reg>
 80051d8:	6178      	str	r0, [r7, #20]
  }

  if (ret == 0)
 80051da:	697b      	ldr	r3, [r7, #20]
 80051dc:	2b00      	cmp	r3, #0
 80051de:	d110      	bne.n	8005202 <lis2dw12_power_mode_set+0x92>
  {
    ctrl6.low_noise = ((uint8_t) val & 0x10U) >> 4;
 80051e0:	78fb      	ldrb	r3, [r7, #3]
 80051e2:	091b      	lsrs	r3, r3, #4
 80051e4:	f003 0301 	and.w	r3, r3, #1
 80051e8:	b2da      	uxtb	r2, r3
 80051ea:	7b3b      	ldrb	r3, [r7, #12]
 80051ec:	f362 0382 	bfi	r3, r2, #2, #1
 80051f0:	733b      	strb	r3, [r7, #12]
    ret = lis2dw12_write_reg(ctx, LIS2DW12_CTRL6, (uint8_t *) &ctrl6, 1);
 80051f2:	f107 020c 	add.w	r2, r7, #12
 80051f6:	2301      	movs	r3, #1
 80051f8:	2125      	movs	r1, #37	; 0x25
 80051fa:	6878      	ldr	r0, [r7, #4]
 80051fc:	f7ff ffa0 	bl	8005140 <lis2dw12_write_reg>
 8005200:	6178      	str	r0, [r7, #20]
  }

  return ret;
 8005202:	697b      	ldr	r3, [r7, #20]
}
 8005204:	4618      	mov	r0, r3
 8005206:	3718      	adds	r7, #24
 8005208:	46bd      	mov	sp, r7
 800520a:	bd80      	pop	{r7, pc}

0800520c <lis2dw12_power_mode_get>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_power_mode_get(stmdev_ctx_t *ctx,
                                lis2dw12_mode_t *val)
{
 800520c:	b580      	push	{r7, lr}
 800520e:	b086      	sub	sp, #24
 8005210:	af00      	add	r7, sp, #0
 8005212:	6078      	str	r0, [r7, #4]
 8005214:	6039      	str	r1, [r7, #0]
  lis2dw12_ctrl1_t ctrl1;
  lis2dw12_ctrl6_t ctrl6;
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL1, (uint8_t *) &ctrl1, 1);
 8005216:	f107 0210 	add.w	r2, r7, #16
 800521a:	2301      	movs	r3, #1
 800521c:	2120      	movs	r1, #32
 800521e:	6878      	ldr	r0, [r7, #4]
 8005220:	f7ff ff76 	bl	8005110 <lis2dw12_read_reg>
 8005224:	6178      	str	r0, [r7, #20]

  if (ret == 0)
 8005226:	697b      	ldr	r3, [r7, #20]
 8005228:	2b00      	cmp	r3, #0
 800522a:	f040 80a3 	bne.w	8005374 <lis2dw12_power_mode_get+0x168>
  {
    ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL6, (uint8_t *) &ctrl6, 1);
 800522e:	f107 020c 	add.w	r2, r7, #12
 8005232:	2301      	movs	r3, #1
 8005234:	2125      	movs	r1, #37	; 0x25
 8005236:	6878      	ldr	r0, [r7, #4]
 8005238:	f7ff ff6a 	bl	8005110 <lis2dw12_read_reg>
 800523c:	6178      	str	r0, [r7, #20]

    switch (((ctrl6.low_noise << 4) + (ctrl1.mode << 2) +
 800523e:	7b3b      	ldrb	r3, [r7, #12]
 8005240:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8005244:	b2db      	uxtb	r3, r3
 8005246:	011a      	lsls	r2, r3, #4
 8005248:	7c3b      	ldrb	r3, [r7, #16]
 800524a:	f3c3 0381 	ubfx	r3, r3, #2, #2
 800524e:	b2db      	uxtb	r3, r3
 8005250:	009b      	lsls	r3, r3, #2
 8005252:	4413      	add	r3, r2
             ctrl1.lp_mode))
 8005254:	7c3a      	ldrb	r2, [r7, #16]
 8005256:	f3c2 0201 	ubfx	r2, r2, #0, #2
 800525a:	b2d2      	uxtb	r2, r2
    switch (((ctrl6.low_noise << 4) + (ctrl1.mode << 2) +
 800525c:	4413      	add	r3, r2
 800525e:	2b1b      	cmp	r3, #27
 8005260:	f200 8084 	bhi.w	800536c <lis2dw12_power_mode_get+0x160>
 8005264:	a201      	add	r2, pc, #4	; (adr r2, 800526c <lis2dw12_power_mode_get+0x60>)
 8005266:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800526a:	bf00      	nop
 800526c:	080052fd 	.word	0x080052fd
 8005270:	080052f5 	.word	0x080052f5
 8005274:	080052ed 	.word	0x080052ed
 8005278:	080052e5 	.word	0x080052e5
 800527c:	080052dd 	.word	0x080052dd
 8005280:	0800536d 	.word	0x0800536d
 8005284:	0800536d 	.word	0x0800536d
 8005288:	0800536d 	.word	0x0800536d
 800528c:	0800531d 	.word	0x0800531d
 8005290:	08005315 	.word	0x08005315
 8005294:	0800530d 	.word	0x0800530d
 8005298:	08005305 	.word	0x08005305
 800529c:	0800536d 	.word	0x0800536d
 80052a0:	0800536d 	.word	0x0800536d
 80052a4:	0800536d 	.word	0x0800536d
 80052a8:	0800536d 	.word	0x0800536d
 80052ac:	08005345 	.word	0x08005345
 80052b0:	0800533d 	.word	0x0800533d
 80052b4:	08005335 	.word	0x08005335
 80052b8:	0800532d 	.word	0x0800532d
 80052bc:	08005325 	.word	0x08005325
 80052c0:	0800536d 	.word	0x0800536d
 80052c4:	0800536d 	.word	0x0800536d
 80052c8:	0800536d 	.word	0x0800536d
 80052cc:	08005365 	.word	0x08005365
 80052d0:	0800535d 	.word	0x0800535d
 80052d4:	08005355 	.word	0x08005355
 80052d8:	0800534d 	.word	0x0800534d
    {
      case LIS2DW12_HIGH_PERFORMANCE:
        *val = LIS2DW12_HIGH_PERFORMANCE;
 80052dc:	683b      	ldr	r3, [r7, #0]
 80052de:	2204      	movs	r2, #4
 80052e0:	701a      	strb	r2, [r3, #0]
        break;
 80052e2:	e048      	b.n	8005376 <lis2dw12_power_mode_get+0x16a>

      case LIS2DW12_CONT_LOW_PWR_4:
        *val = LIS2DW12_CONT_LOW_PWR_4;
 80052e4:	683b      	ldr	r3, [r7, #0]
 80052e6:	2203      	movs	r2, #3
 80052e8:	701a      	strb	r2, [r3, #0]
        break;
 80052ea:	e044      	b.n	8005376 <lis2dw12_power_mode_get+0x16a>

      case LIS2DW12_CONT_LOW_PWR_3:
        *val = LIS2DW12_CONT_LOW_PWR_3;
 80052ec:	683b      	ldr	r3, [r7, #0]
 80052ee:	2202      	movs	r2, #2
 80052f0:	701a      	strb	r2, [r3, #0]
        break;
 80052f2:	e040      	b.n	8005376 <lis2dw12_power_mode_get+0x16a>

      case LIS2DW12_CONT_LOW_PWR_2:
        *val = LIS2DW12_CONT_LOW_PWR_2;
 80052f4:	683b      	ldr	r3, [r7, #0]
 80052f6:	2201      	movs	r2, #1
 80052f8:	701a      	strb	r2, [r3, #0]
        break;
 80052fa:	e03c      	b.n	8005376 <lis2dw12_power_mode_get+0x16a>

      case LIS2DW12_CONT_LOW_PWR_12bit:
        *val = LIS2DW12_CONT_LOW_PWR_12bit;
 80052fc:	683b      	ldr	r3, [r7, #0]
 80052fe:	2200      	movs	r2, #0
 8005300:	701a      	strb	r2, [r3, #0]
        break;
 8005302:	e038      	b.n	8005376 <lis2dw12_power_mode_get+0x16a>

      case LIS2DW12_SINGLE_LOW_PWR_4:
        *val = LIS2DW12_SINGLE_LOW_PWR_4;
 8005304:	683b      	ldr	r3, [r7, #0]
 8005306:	220b      	movs	r2, #11
 8005308:	701a      	strb	r2, [r3, #0]
        break;
 800530a:	e034      	b.n	8005376 <lis2dw12_power_mode_get+0x16a>

      case LIS2DW12_SINGLE_LOW_PWR_3:
        *val = LIS2DW12_SINGLE_LOW_PWR_3;
 800530c:	683b      	ldr	r3, [r7, #0]
 800530e:	220a      	movs	r2, #10
 8005310:	701a      	strb	r2, [r3, #0]
        break;
 8005312:	e030      	b.n	8005376 <lis2dw12_power_mode_get+0x16a>

      case LIS2DW12_SINGLE_LOW_PWR_2:
        *val = LIS2DW12_SINGLE_LOW_PWR_2;
 8005314:	683b      	ldr	r3, [r7, #0]
 8005316:	2209      	movs	r2, #9
 8005318:	701a      	strb	r2, [r3, #0]
        break;
 800531a:	e02c      	b.n	8005376 <lis2dw12_power_mode_get+0x16a>

      case LIS2DW12_SINGLE_LOW_PWR_12bit:
        *val = LIS2DW12_SINGLE_LOW_PWR_12bit;
 800531c:	683b      	ldr	r3, [r7, #0]
 800531e:	2208      	movs	r2, #8
 8005320:	701a      	strb	r2, [r3, #0]
        break;
 8005322:	e028      	b.n	8005376 <lis2dw12_power_mode_get+0x16a>

      case LIS2DW12_HIGH_PERFORMANCE_LOW_NOISE:
        *val = LIS2DW12_HIGH_PERFORMANCE_LOW_NOISE;
 8005324:	683b      	ldr	r3, [r7, #0]
 8005326:	2214      	movs	r2, #20
 8005328:	701a      	strb	r2, [r3, #0]
        break;
 800532a:	e024      	b.n	8005376 <lis2dw12_power_mode_get+0x16a>

      case LIS2DW12_CONT_LOW_PWR_LOW_NOISE_4:
        *val = LIS2DW12_CONT_LOW_PWR_LOW_NOISE_4;
 800532c:	683b      	ldr	r3, [r7, #0]
 800532e:	2213      	movs	r2, #19
 8005330:	701a      	strb	r2, [r3, #0]
        break;
 8005332:	e020      	b.n	8005376 <lis2dw12_power_mode_get+0x16a>

      case LIS2DW12_CONT_LOW_PWR_LOW_NOISE_3:
        *val = LIS2DW12_CONT_LOW_PWR_LOW_NOISE_3;
 8005334:	683b      	ldr	r3, [r7, #0]
 8005336:	2212      	movs	r2, #18
 8005338:	701a      	strb	r2, [r3, #0]
        break;
 800533a:	e01c      	b.n	8005376 <lis2dw12_power_mode_get+0x16a>

      case LIS2DW12_CONT_LOW_PWR_LOW_NOISE_2:
        *val = LIS2DW12_CONT_LOW_PWR_LOW_NOISE_2;
 800533c:	683b      	ldr	r3, [r7, #0]
 800533e:	2211      	movs	r2, #17
 8005340:	701a      	strb	r2, [r3, #0]
        break;
 8005342:	e018      	b.n	8005376 <lis2dw12_power_mode_get+0x16a>

      case LIS2DW12_CONT_LOW_PWR_LOW_NOISE_12bit:
        *val = LIS2DW12_CONT_LOW_PWR_LOW_NOISE_12bit;
 8005344:	683b      	ldr	r3, [r7, #0]
 8005346:	2210      	movs	r2, #16
 8005348:	701a      	strb	r2, [r3, #0]
        break;
 800534a:	e014      	b.n	8005376 <lis2dw12_power_mode_get+0x16a>

      case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_4:
        *val = LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_4;
 800534c:	683b      	ldr	r3, [r7, #0]
 800534e:	221b      	movs	r2, #27
 8005350:	701a      	strb	r2, [r3, #0]
        break;
 8005352:	e010      	b.n	8005376 <lis2dw12_power_mode_get+0x16a>

      case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_3:
        *val = LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_3;
 8005354:	683b      	ldr	r3, [r7, #0]
 8005356:	221a      	movs	r2, #26
 8005358:	701a      	strb	r2, [r3, #0]
        break;
 800535a:	e00c      	b.n	8005376 <lis2dw12_power_mode_get+0x16a>

      case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_2:
        *val = LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_2;
 800535c:	683b      	ldr	r3, [r7, #0]
 800535e:	2219      	movs	r2, #25
 8005360:	701a      	strb	r2, [r3, #0]
        break;
 8005362:	e008      	b.n	8005376 <lis2dw12_power_mode_get+0x16a>

      case LIS2DW12_SINGLE_LOW_LOW_NOISE_PWR_12bit:
        *val = LIS2DW12_SINGLE_LOW_LOW_NOISE_PWR_12bit;
 8005364:	683b      	ldr	r3, [r7, #0]
 8005366:	2218      	movs	r2, #24
 8005368:	701a      	strb	r2, [r3, #0]
        break;
 800536a:	e004      	b.n	8005376 <lis2dw12_power_mode_get+0x16a>

      default:
        *val = LIS2DW12_HIGH_PERFORMANCE;
 800536c:	683b      	ldr	r3, [r7, #0]
 800536e:	2204      	movs	r2, #4
 8005370:	701a      	strb	r2, [r3, #0]
        break;
 8005372:	e000      	b.n	8005376 <lis2dw12_power_mode_get+0x16a>
    }
  }
 8005374:	bf00      	nop

  return ret;
 8005376:	697b      	ldr	r3, [r7, #20]
}
 8005378:	4618      	mov	r0, r3
 800537a:	3718      	adds	r7, #24
 800537c:	46bd      	mov	sp, r7
 800537e:	bd80      	pop	{r7, pc}

08005380 <lis2dw12_data_rate_set>:
  * @param  val      change the values of odr in reg CTRL1
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_data_rate_set(stmdev_ctx_t *ctx, lis2dw12_odr_t val)
{
 8005380:	b580      	push	{r7, lr}
 8005382:	b086      	sub	sp, #24
 8005384:	af00      	add	r7, sp, #0
 8005386:	6078      	str	r0, [r7, #4]
 8005388:	460b      	mov	r3, r1
 800538a:	70fb      	strb	r3, [r7, #3]
  lis2dw12_ctrl1_t ctrl1;
  lis2dw12_ctrl3_t ctrl3;
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL1, (uint8_t *) &ctrl1, 1);
 800538c:	f107 0210 	add.w	r2, r7, #16
 8005390:	2301      	movs	r3, #1
 8005392:	2120      	movs	r1, #32
 8005394:	6878      	ldr	r0, [r7, #4]
 8005396:	f7ff febb 	bl	8005110 <lis2dw12_read_reg>
 800539a:	6178      	str	r0, [r7, #20]

  if (ret == 0)
 800539c:	697b      	ldr	r3, [r7, #20]
 800539e:	2b00      	cmp	r3, #0
 80053a0:	d10f      	bne.n	80053c2 <lis2dw12_data_rate_set+0x42>
  {
    ctrl1.odr = (uint8_t) val;
 80053a2:	78fb      	ldrb	r3, [r7, #3]
 80053a4:	f003 030f 	and.w	r3, r3, #15
 80053a8:	b2da      	uxtb	r2, r3
 80053aa:	7c3b      	ldrb	r3, [r7, #16]
 80053ac:	f362 1307 	bfi	r3, r2, #4, #4
 80053b0:	743b      	strb	r3, [r7, #16]
    ret = lis2dw12_write_reg(ctx, LIS2DW12_CTRL1, (uint8_t *) &ctrl1, 1);
 80053b2:	f107 0210 	add.w	r2, r7, #16
 80053b6:	2301      	movs	r3, #1
 80053b8:	2120      	movs	r1, #32
 80053ba:	6878      	ldr	r0, [r7, #4]
 80053bc:	f7ff fec0 	bl	8005140 <lis2dw12_write_reg>
 80053c0:	6178      	str	r0, [r7, #20]
  }

  if (ret == 0)
 80053c2:	697b      	ldr	r3, [r7, #20]
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	d107      	bne.n	80053d8 <lis2dw12_data_rate_set+0x58>
  {
    ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL3, (uint8_t *) &ctrl3, 1);
 80053c8:	f107 020c 	add.w	r2, r7, #12
 80053cc:	2301      	movs	r3, #1
 80053ce:	2122      	movs	r1, #34	; 0x22
 80053d0:	6878      	ldr	r0, [r7, #4]
 80053d2:	f7ff fe9d 	bl	8005110 <lis2dw12_read_reg>
 80053d6:	6178      	str	r0, [r7, #20]
  }

  if (ret == 0)
 80053d8:	697b      	ldr	r3, [r7, #20]
 80053da:	2b00      	cmp	r3, #0
 80053dc:	d110      	bne.n	8005400 <lis2dw12_data_rate_set+0x80>
  {
    ctrl3.slp_mode = ((uint8_t) val & 0x30U) >> 4;
 80053de:	78fb      	ldrb	r3, [r7, #3]
 80053e0:	091b      	lsrs	r3, r3, #4
 80053e2:	f003 0303 	and.w	r3, r3, #3
 80053e6:	b2da      	uxtb	r2, r3
 80053e8:	7b3b      	ldrb	r3, [r7, #12]
 80053ea:	f362 0301 	bfi	r3, r2, #0, #2
 80053ee:	733b      	strb	r3, [r7, #12]
    ret = lis2dw12_write_reg(ctx, LIS2DW12_CTRL3, (uint8_t *) &ctrl3, 1);
 80053f0:	f107 020c 	add.w	r2, r7, #12
 80053f4:	2301      	movs	r3, #1
 80053f6:	2122      	movs	r1, #34	; 0x22
 80053f8:	6878      	ldr	r0, [r7, #4]
 80053fa:	f7ff fea1 	bl	8005140 <lis2dw12_write_reg>
 80053fe:	6178      	str	r0, [r7, #20]
  }

  return ret;
 8005400:	697b      	ldr	r3, [r7, #20]
}
 8005402:	4618      	mov	r0, r3
 8005404:	3718      	adds	r7, #24
 8005406:	46bd      	mov	sp, r7
 8005408:	bd80      	pop	{r7, pc}
	...

0800540c <lis2dw12_data_rate_get>:
  * @param  val      Get the values of odr in reg CTRL1
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_data_rate_get(stmdev_ctx_t *ctx, lis2dw12_odr_t *val)
{
 800540c:	b580      	push	{r7, lr}
 800540e:	b086      	sub	sp, #24
 8005410:	af00      	add	r7, sp, #0
 8005412:	6078      	str	r0, [r7, #4]
 8005414:	6039      	str	r1, [r7, #0]
  lis2dw12_ctrl1_t ctrl1;
  lis2dw12_ctrl3_t ctrl3;
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL1, (uint8_t *) &ctrl1, 1);
 8005416:	f107 0210 	add.w	r2, r7, #16
 800541a:	2301      	movs	r3, #1
 800541c:	2120      	movs	r1, #32
 800541e:	6878      	ldr	r0, [r7, #4]
 8005420:	f7ff fe76 	bl	8005110 <lis2dw12_read_reg>
 8005424:	6178      	str	r0, [r7, #20]

  if (ret == 0)
 8005426:	697b      	ldr	r3, [r7, #20]
 8005428:	2b00      	cmp	r3, #0
 800542a:	f040 80b3 	bne.w	8005594 <lis2dw12_data_rate_get+0x188>
  {
    ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL3, (uint8_t *) &ctrl3, 1);
 800542e:	f107 020c 	add.w	r2, r7, #12
 8005432:	2301      	movs	r3, #1
 8005434:	2122      	movs	r1, #34	; 0x22
 8005436:	6878      	ldr	r0, [r7, #4]
 8005438:	f7ff fe6a 	bl	8005110 <lis2dw12_read_reg>
 800543c:	6178      	str	r0, [r7, #20]

    switch ((ctrl3.slp_mode << 4) + ctrl1.odr)
 800543e:	7b3b      	ldrb	r3, [r7, #12]
 8005440:	f3c3 0301 	ubfx	r3, r3, #0, #2
 8005444:	b2db      	uxtb	r3, r3
 8005446:	011b      	lsls	r3, r3, #4
 8005448:	7c3a      	ldrb	r2, [r7, #16]
 800544a:	f3c2 1203 	ubfx	r2, r2, #4, #4
 800544e:	b2d2      	uxtb	r2, r2
 8005450:	4413      	add	r3, r2
 8005452:	2b32      	cmp	r3, #50	; 0x32
 8005454:	f200 809a 	bhi.w	800558c <lis2dw12_data_rate_get+0x180>
 8005458:	a201      	add	r2, pc, #4	; (adr r2, 8005460 <lis2dw12_data_rate_get+0x54>)
 800545a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800545e:	bf00      	nop
 8005460:	0800552d 	.word	0x0800552d
 8005464:	08005535 	.word	0x08005535
 8005468:	0800553d 	.word	0x0800553d
 800546c:	08005545 	.word	0x08005545
 8005470:	0800554d 	.word	0x0800554d
 8005474:	08005555 	.word	0x08005555
 8005478:	0800555d 	.word	0x0800555d
 800547c:	08005565 	.word	0x08005565
 8005480:	0800556d 	.word	0x0800556d
 8005484:	08005575 	.word	0x08005575
 8005488:	0800558d 	.word	0x0800558d
 800548c:	0800558d 	.word	0x0800558d
 8005490:	0800558d 	.word	0x0800558d
 8005494:	0800558d 	.word	0x0800558d
 8005498:	0800558d 	.word	0x0800558d
 800549c:	0800558d 	.word	0x0800558d
 80054a0:	0800558d 	.word	0x0800558d
 80054a4:	0800558d 	.word	0x0800558d
 80054a8:	08005585 	.word	0x08005585
 80054ac:	0800558d 	.word	0x0800558d
 80054b0:	0800558d 	.word	0x0800558d
 80054b4:	0800558d 	.word	0x0800558d
 80054b8:	0800558d 	.word	0x0800558d
 80054bc:	0800558d 	.word	0x0800558d
 80054c0:	0800558d 	.word	0x0800558d
 80054c4:	0800558d 	.word	0x0800558d
 80054c8:	0800558d 	.word	0x0800558d
 80054cc:	0800558d 	.word	0x0800558d
 80054d0:	0800558d 	.word	0x0800558d
 80054d4:	0800558d 	.word	0x0800558d
 80054d8:	0800558d 	.word	0x0800558d
 80054dc:	0800558d 	.word	0x0800558d
 80054e0:	0800558d 	.word	0x0800558d
 80054e4:	0800558d 	.word	0x0800558d
 80054e8:	0800558d 	.word	0x0800558d
 80054ec:	0800558d 	.word	0x0800558d
 80054f0:	0800558d 	.word	0x0800558d
 80054f4:	0800558d 	.word	0x0800558d
 80054f8:	0800558d 	.word	0x0800558d
 80054fc:	0800558d 	.word	0x0800558d
 8005500:	0800558d 	.word	0x0800558d
 8005504:	0800558d 	.word	0x0800558d
 8005508:	0800558d 	.word	0x0800558d
 800550c:	0800558d 	.word	0x0800558d
 8005510:	0800558d 	.word	0x0800558d
 8005514:	0800558d 	.word	0x0800558d
 8005518:	0800558d 	.word	0x0800558d
 800551c:	0800558d 	.word	0x0800558d
 8005520:	0800558d 	.word	0x0800558d
 8005524:	0800558d 	.word	0x0800558d
 8005528:	0800557d 	.word	0x0800557d
    {
      case LIS2DW12_XL_ODR_OFF:
        *val = LIS2DW12_XL_ODR_OFF;
 800552c:	683b      	ldr	r3, [r7, #0]
 800552e:	2200      	movs	r2, #0
 8005530:	701a      	strb	r2, [r3, #0]
        break;
 8005532:	e030      	b.n	8005596 <lis2dw12_data_rate_get+0x18a>

      case LIS2DW12_XL_ODR_1Hz6_LP_ONLY:
        *val = LIS2DW12_XL_ODR_1Hz6_LP_ONLY;
 8005534:	683b      	ldr	r3, [r7, #0]
 8005536:	2201      	movs	r2, #1
 8005538:	701a      	strb	r2, [r3, #0]
        break;
 800553a:	e02c      	b.n	8005596 <lis2dw12_data_rate_get+0x18a>

      case LIS2DW12_XL_ODR_12Hz5:
        *val = LIS2DW12_XL_ODR_12Hz5;
 800553c:	683b      	ldr	r3, [r7, #0]
 800553e:	2202      	movs	r2, #2
 8005540:	701a      	strb	r2, [r3, #0]
        break;
 8005542:	e028      	b.n	8005596 <lis2dw12_data_rate_get+0x18a>

      case LIS2DW12_XL_ODR_25Hz:
        *val = LIS2DW12_XL_ODR_25Hz;
 8005544:	683b      	ldr	r3, [r7, #0]
 8005546:	2203      	movs	r2, #3
 8005548:	701a      	strb	r2, [r3, #0]
        break;
 800554a:	e024      	b.n	8005596 <lis2dw12_data_rate_get+0x18a>

      case LIS2DW12_XL_ODR_50Hz:
        *val = LIS2DW12_XL_ODR_50Hz;
 800554c:	683b      	ldr	r3, [r7, #0]
 800554e:	2204      	movs	r2, #4
 8005550:	701a      	strb	r2, [r3, #0]
        break;
 8005552:	e020      	b.n	8005596 <lis2dw12_data_rate_get+0x18a>

      case LIS2DW12_XL_ODR_100Hz:
        *val = LIS2DW12_XL_ODR_100Hz;
 8005554:	683b      	ldr	r3, [r7, #0]
 8005556:	2205      	movs	r2, #5
 8005558:	701a      	strb	r2, [r3, #0]
        break;
 800555a:	e01c      	b.n	8005596 <lis2dw12_data_rate_get+0x18a>

      case LIS2DW12_XL_ODR_200Hz:
        *val = LIS2DW12_XL_ODR_200Hz;
 800555c:	683b      	ldr	r3, [r7, #0]
 800555e:	2206      	movs	r2, #6
 8005560:	701a      	strb	r2, [r3, #0]
        break;
 8005562:	e018      	b.n	8005596 <lis2dw12_data_rate_get+0x18a>

      case LIS2DW12_XL_ODR_400Hz:
        *val = LIS2DW12_XL_ODR_400Hz;
 8005564:	683b      	ldr	r3, [r7, #0]
 8005566:	2207      	movs	r2, #7
 8005568:	701a      	strb	r2, [r3, #0]
        break;
 800556a:	e014      	b.n	8005596 <lis2dw12_data_rate_get+0x18a>

      case LIS2DW12_XL_ODR_800Hz:
        *val = LIS2DW12_XL_ODR_800Hz;
 800556c:	683b      	ldr	r3, [r7, #0]
 800556e:	2208      	movs	r2, #8
 8005570:	701a      	strb	r2, [r3, #0]
        break;
 8005572:	e010      	b.n	8005596 <lis2dw12_data_rate_get+0x18a>

      case LIS2DW12_XL_ODR_1k6Hz:
        *val = LIS2DW12_XL_ODR_1k6Hz;
 8005574:	683b      	ldr	r3, [r7, #0]
 8005576:	2209      	movs	r2, #9
 8005578:	701a      	strb	r2, [r3, #0]
        break;
 800557a:	e00c      	b.n	8005596 <lis2dw12_data_rate_get+0x18a>

      case LIS2DW12_XL_SET_SW_TRIG:
        *val = LIS2DW12_XL_SET_SW_TRIG;
 800557c:	683b      	ldr	r3, [r7, #0]
 800557e:	2232      	movs	r2, #50	; 0x32
 8005580:	701a      	strb	r2, [r3, #0]
        break;
 8005582:	e008      	b.n	8005596 <lis2dw12_data_rate_get+0x18a>

      case LIS2DW12_XL_SET_PIN_TRIG:
        *val = LIS2DW12_XL_SET_PIN_TRIG;
 8005584:	683b      	ldr	r3, [r7, #0]
 8005586:	2212      	movs	r2, #18
 8005588:	701a      	strb	r2, [r3, #0]
        break;
 800558a:	e004      	b.n	8005596 <lis2dw12_data_rate_get+0x18a>

      default:
        *val = LIS2DW12_XL_ODR_OFF;
 800558c:	683b      	ldr	r3, [r7, #0]
 800558e:	2200      	movs	r2, #0
 8005590:	701a      	strb	r2, [r3, #0]
        break;
 8005592:	e000      	b.n	8005596 <lis2dw12_data_rate_get+0x18a>
    }
  }
 8005594:	bf00      	nop

  return ret;
 8005596:	697b      	ldr	r3, [r7, #20]
}
 8005598:	4618      	mov	r0, r3
 800559a:	3718      	adds	r7, #24
 800559c:	46bd      	mov	sp, r7
 800559e:	bd80      	pop	{r7, pc}

080055a0 <lis2dw12_block_data_update_set>:
  * @param  val      change the values of bdu in reg CTRL2
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
 80055a0:	b580      	push	{r7, lr}
 80055a2:	b084      	sub	sp, #16
 80055a4:	af00      	add	r7, sp, #0
 80055a6:	6078      	str	r0, [r7, #4]
 80055a8:	460b      	mov	r3, r1
 80055aa:	70fb      	strb	r3, [r7, #3]
  lis2dw12_ctrl2_t reg;
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL2, (uint8_t *) &reg, 1);
 80055ac:	f107 0208 	add.w	r2, r7, #8
 80055b0:	2301      	movs	r3, #1
 80055b2:	2121      	movs	r1, #33	; 0x21
 80055b4:	6878      	ldr	r0, [r7, #4]
 80055b6:	f7ff fdab 	bl	8005110 <lis2dw12_read_reg>
 80055ba:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	2b00      	cmp	r3, #0
 80055c0:	d10f      	bne.n	80055e2 <lis2dw12_block_data_update_set+0x42>
  {
    reg.bdu = val;
 80055c2:	78fb      	ldrb	r3, [r7, #3]
 80055c4:	f003 0301 	and.w	r3, r3, #1
 80055c8:	b2da      	uxtb	r2, r3
 80055ca:	7a3b      	ldrb	r3, [r7, #8]
 80055cc:	f362 03c3 	bfi	r3, r2, #3, #1
 80055d0:	723b      	strb	r3, [r7, #8]
    ret = lis2dw12_write_reg(ctx, LIS2DW12_CTRL2, (uint8_t *) &reg, 1);
 80055d2:	f107 0208 	add.w	r2, r7, #8
 80055d6:	2301      	movs	r3, #1
 80055d8:	2121      	movs	r1, #33	; 0x21
 80055da:	6878      	ldr	r0, [r7, #4]
 80055dc:	f7ff fdb0 	bl	8005140 <lis2dw12_write_reg>
 80055e0:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80055e2:	68fb      	ldr	r3, [r7, #12]
}
 80055e4:	4618      	mov	r0, r3
 80055e6:	3710      	adds	r7, #16
 80055e8:	46bd      	mov	sp, r7
 80055ea:	bd80      	pop	{r7, pc}

080055ec <lis2dw12_full_scale_set>:
  * @param  val      change the values of fs in reg CTRL6
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_full_scale_set(stmdev_ctx_t *ctx, lis2dw12_fs_t val)
{
 80055ec:	b580      	push	{r7, lr}
 80055ee:	b084      	sub	sp, #16
 80055f0:	af00      	add	r7, sp, #0
 80055f2:	6078      	str	r0, [r7, #4]
 80055f4:	460b      	mov	r3, r1
 80055f6:	70fb      	strb	r3, [r7, #3]
  lis2dw12_ctrl6_t reg;
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL6, (uint8_t *) &reg, 1);
 80055f8:	f107 0208 	add.w	r2, r7, #8
 80055fc:	2301      	movs	r3, #1
 80055fe:	2125      	movs	r1, #37	; 0x25
 8005600:	6878      	ldr	r0, [r7, #4]
 8005602:	f7ff fd85 	bl	8005110 <lis2dw12_read_reg>
 8005606:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	2b00      	cmp	r3, #0
 800560c:	d10f      	bne.n	800562e <lis2dw12_full_scale_set+0x42>
  {
    reg.fs = (uint8_t) val;
 800560e:	78fb      	ldrb	r3, [r7, #3]
 8005610:	f003 0303 	and.w	r3, r3, #3
 8005614:	b2da      	uxtb	r2, r3
 8005616:	7a3b      	ldrb	r3, [r7, #8]
 8005618:	f362 1305 	bfi	r3, r2, #4, #2
 800561c:	723b      	strb	r3, [r7, #8]
    ret = lis2dw12_write_reg(ctx, LIS2DW12_CTRL6, (uint8_t *) &reg, 1);
 800561e:	f107 0208 	add.w	r2, r7, #8
 8005622:	2301      	movs	r3, #1
 8005624:	2125      	movs	r1, #37	; 0x25
 8005626:	6878      	ldr	r0, [r7, #4]
 8005628:	f7ff fd8a 	bl	8005140 <lis2dw12_write_reg>
 800562c:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 800562e:	68fb      	ldr	r3, [r7, #12]
}
 8005630:	4618      	mov	r0, r3
 8005632:	3710      	adds	r7, #16
 8005634:	46bd      	mov	sp, r7
 8005636:	bd80      	pop	{r7, pc}

08005638 <lis2dw12_full_scale_get>:
  * @param  val      Get the values of fs in reg CTRL6
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_full_scale_get(stmdev_ctx_t *ctx, lis2dw12_fs_t *val)
{
 8005638:	b580      	push	{r7, lr}
 800563a:	b084      	sub	sp, #16
 800563c:	af00      	add	r7, sp, #0
 800563e:	6078      	str	r0, [r7, #4]
 8005640:	6039      	str	r1, [r7, #0]
  lis2dw12_ctrl6_t reg;
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL6, (uint8_t *) &reg, 1);
 8005642:	f107 0208 	add.w	r2, r7, #8
 8005646:	2301      	movs	r3, #1
 8005648:	2125      	movs	r1, #37	; 0x25
 800564a:	6878      	ldr	r0, [r7, #4]
 800564c:	f7ff fd60 	bl	8005110 <lis2dw12_read_reg>
 8005650:	60f8      	str	r0, [r7, #12]

  switch (reg.fs)
 8005652:	7a3b      	ldrb	r3, [r7, #8]
 8005654:	f3c3 1301 	ubfx	r3, r3, #4, #2
 8005658:	b2db      	uxtb	r3, r3
 800565a:	2b03      	cmp	r3, #3
 800565c:	d81a      	bhi.n	8005694 <lis2dw12_full_scale_get+0x5c>
 800565e:	a201      	add	r2, pc, #4	; (adr r2, 8005664 <lis2dw12_full_scale_get+0x2c>)
 8005660:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005664:	08005675 	.word	0x08005675
 8005668:	0800567d 	.word	0x0800567d
 800566c:	08005685 	.word	0x08005685
 8005670:	0800568d 	.word	0x0800568d
  {
    case LIS2DW12_2g:
      *val = LIS2DW12_2g;
 8005674:	683b      	ldr	r3, [r7, #0]
 8005676:	2200      	movs	r2, #0
 8005678:	701a      	strb	r2, [r3, #0]
      break;
 800567a:	e00f      	b.n	800569c <lis2dw12_full_scale_get+0x64>

    case LIS2DW12_4g:
      *val = LIS2DW12_4g;
 800567c:	683b      	ldr	r3, [r7, #0]
 800567e:	2201      	movs	r2, #1
 8005680:	701a      	strb	r2, [r3, #0]
      break;
 8005682:	e00b      	b.n	800569c <lis2dw12_full_scale_get+0x64>

    case LIS2DW12_8g:
      *val = LIS2DW12_8g;
 8005684:	683b      	ldr	r3, [r7, #0]
 8005686:	2202      	movs	r2, #2
 8005688:	701a      	strb	r2, [r3, #0]
      break;
 800568a:	e007      	b.n	800569c <lis2dw12_full_scale_get+0x64>

    case LIS2DW12_16g:
      *val = LIS2DW12_16g;
 800568c:	683b      	ldr	r3, [r7, #0]
 800568e:	2203      	movs	r2, #3
 8005690:	701a      	strb	r2, [r3, #0]
      break;
 8005692:	e003      	b.n	800569c <lis2dw12_full_scale_get+0x64>

    default:
      *val = LIS2DW12_2g;
 8005694:	683b      	ldr	r3, [r7, #0]
 8005696:	2200      	movs	r2, #0
 8005698:	701a      	strb	r2, [r3, #0]
      break;
 800569a:	bf00      	nop
  }

  return ret;
 800569c:	68fb      	ldr	r3, [r7, #12]
}
 800569e:	4618      	mov	r0, r3
 80056a0:	3710      	adds	r7, #16
 80056a2:	46bd      	mov	sp, r7
 80056a4:	bd80      	pop	{r7, pc}
 80056a6:	bf00      	nop

080056a8 <lis2dw12_acceleration_raw_get>:
  * @param  val      buffer that stores data read
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_acceleration_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 80056a8:	b580      	push	{r7, lr}
 80056aa:	b086      	sub	sp, #24
 80056ac:	af00      	add	r7, sp, #0
 80056ae:	6078      	str	r0, [r7, #4]
 80056b0:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_OUT_X_L, buff, 6);
 80056b2:	f107 020c 	add.w	r2, r7, #12
 80056b6:	2306      	movs	r3, #6
 80056b8:	2128      	movs	r1, #40	; 0x28
 80056ba:	6878      	ldr	r0, [r7, #4]
 80056bc:	f7ff fd28 	bl	8005110 <lis2dw12_read_reg>
 80056c0:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 80056c2:	7b7b      	ldrb	r3, [r7, #13]
 80056c4:	b21a      	sxth	r2, r3
 80056c6:	683b      	ldr	r3, [r7, #0]
 80056c8:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 80056ca:	683b      	ldr	r3, [r7, #0]
 80056cc:	f9b3 3000 	ldrsh.w	r3, [r3]
 80056d0:	b29b      	uxth	r3, r3
 80056d2:	021b      	lsls	r3, r3, #8
 80056d4:	b29a      	uxth	r2, r3
 80056d6:	7b3b      	ldrb	r3, [r7, #12]
 80056d8:	b29b      	uxth	r3, r3
 80056da:	4413      	add	r3, r2
 80056dc:	b29b      	uxth	r3, r3
 80056de:	b21a      	sxth	r2, r3
 80056e0:	683b      	ldr	r3, [r7, #0]
 80056e2:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 80056e4:	7bfa      	ldrb	r2, [r7, #15]
 80056e6:	683b      	ldr	r3, [r7, #0]
 80056e8:	3302      	adds	r3, #2
 80056ea:	b212      	sxth	r2, r2
 80056ec:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 80056ee:	683b      	ldr	r3, [r7, #0]
 80056f0:	3302      	adds	r3, #2
 80056f2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80056f6:	b29b      	uxth	r3, r3
 80056f8:	021b      	lsls	r3, r3, #8
 80056fa:	b29a      	uxth	r2, r3
 80056fc:	7bbb      	ldrb	r3, [r7, #14]
 80056fe:	b29b      	uxth	r3, r3
 8005700:	4413      	add	r3, r2
 8005702:	b29a      	uxth	r2, r3
 8005704:	683b      	ldr	r3, [r7, #0]
 8005706:	3302      	adds	r3, #2
 8005708:	b212      	sxth	r2, r2
 800570a:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 800570c:	7c7a      	ldrb	r2, [r7, #17]
 800570e:	683b      	ldr	r3, [r7, #0]
 8005710:	3304      	adds	r3, #4
 8005712:	b212      	sxth	r2, r2
 8005714:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 8005716:	683b      	ldr	r3, [r7, #0]
 8005718:	3304      	adds	r3, #4
 800571a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800571e:	b29b      	uxth	r3, r3
 8005720:	021b      	lsls	r3, r3, #8
 8005722:	b29a      	uxth	r2, r3
 8005724:	7c3b      	ldrb	r3, [r7, #16]
 8005726:	b29b      	uxth	r3, r3
 8005728:	4413      	add	r3, r2
 800572a:	b29a      	uxth	r2, r3
 800572c:	683b      	ldr	r3, [r7, #0]
 800572e:	3304      	adds	r3, #4
 8005730:	b212      	sxth	r2, r2
 8005732:	801a      	strh	r2, [r3, #0]

  return ret;
 8005734:	697b      	ldr	r3, [r7, #20]
}
 8005736:	4618      	mov	r0, r3
 8005738:	3718      	adds	r7, #24
 800573a:	46bd      	mov	sp, r7
 800573c:	bd80      	pop	{r7, pc}

0800573e <lis2dw12_device_id_get>:
  * @param  buff     buffer that stores data read
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 800573e:	b580      	push	{r7, lr}
 8005740:	b084      	sub	sp, #16
 8005742:	af00      	add	r7, sp, #0
 8005744:	6078      	str	r0, [r7, #4]
 8005746:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_WHO_AM_I, buff, 1);
 8005748:	2301      	movs	r3, #1
 800574a:	683a      	ldr	r2, [r7, #0]
 800574c:	210f      	movs	r1, #15
 800574e:	6878      	ldr	r0, [r7, #4]
 8005750:	f7ff fcde 	bl	8005110 <lis2dw12_read_reg>
 8005754:	60f8      	str	r0, [r7, #12]

  return ret;
 8005756:	68fb      	ldr	r3, [r7, #12]
}
 8005758:	4618      	mov	r0, r3
 800575a:	3710      	adds	r7, #16
 800575c:	46bd      	mov	sp, r7
 800575e:	bd80      	pop	{r7, pc}

08005760 <lis2dw12_auto_increment_set>:
  * @param  val      change the values of if_add_inc in reg CTRL2
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_auto_increment_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8005760:	b580      	push	{r7, lr}
 8005762:	b084      	sub	sp, #16
 8005764:	af00      	add	r7, sp, #0
 8005766:	6078      	str	r0, [r7, #4]
 8005768:	460b      	mov	r3, r1
 800576a:	70fb      	strb	r3, [r7, #3]
  lis2dw12_ctrl2_t reg;
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL2, (uint8_t *) &reg, 1);
 800576c:	f107 0208 	add.w	r2, r7, #8
 8005770:	2301      	movs	r3, #1
 8005772:	2121      	movs	r1, #33	; 0x21
 8005774:	6878      	ldr	r0, [r7, #4]
 8005776:	f7ff fccb 	bl	8005110 <lis2dw12_read_reg>
 800577a:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	2b00      	cmp	r3, #0
 8005780:	d10f      	bne.n	80057a2 <lis2dw12_auto_increment_set+0x42>
  {
    reg.if_add_inc = val;
 8005782:	78fb      	ldrb	r3, [r7, #3]
 8005784:	f003 0301 	and.w	r3, r3, #1
 8005788:	b2da      	uxtb	r2, r3
 800578a:	7a3b      	ldrb	r3, [r7, #8]
 800578c:	f362 0382 	bfi	r3, r2, #2, #1
 8005790:	723b      	strb	r3, [r7, #8]
    ret = lis2dw12_write_reg(ctx, LIS2DW12_CTRL2, (uint8_t *) &reg, 1);
 8005792:	f107 0208 	add.w	r2, r7, #8
 8005796:	2301      	movs	r3, #1
 8005798:	2121      	movs	r1, #33	; 0x21
 800579a:	6878      	ldr	r0, [r7, #4]
 800579c:	f7ff fcd0 	bl	8005140 <lis2dw12_write_reg>
 80057a0:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80057a2:	68fb      	ldr	r3, [r7, #12]
}
 80057a4:	4618      	mov	r0, r3
 80057a6:	3710      	adds	r7, #16
 80057a8:	46bd      	mov	sp, r7
 80057aa:	bd80      	pop	{r7, pc}

080057ac <lis2dw12_fifo_mode_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_fifo_mode_set(stmdev_ctx_t *ctx,
                               lis2dw12_fmode_t val)
{
 80057ac:	b580      	push	{r7, lr}
 80057ae:	b084      	sub	sp, #16
 80057b0:	af00      	add	r7, sp, #0
 80057b2:	6078      	str	r0, [r7, #4]
 80057b4:	460b      	mov	r3, r1
 80057b6:	70fb      	strb	r3, [r7, #3]
  lis2dw12_fifo_ctrl_t reg;
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_FIFO_CTRL, (uint8_t *) &reg, 1);
 80057b8:	f107 0208 	add.w	r2, r7, #8
 80057bc:	2301      	movs	r3, #1
 80057be:	212e      	movs	r1, #46	; 0x2e
 80057c0:	6878      	ldr	r0, [r7, #4]
 80057c2:	f7ff fca5 	bl	8005110 <lis2dw12_read_reg>
 80057c6:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	d10f      	bne.n	80057ee <lis2dw12_fifo_mode_set+0x42>
  {
    reg.fmode = (uint8_t) val;
 80057ce:	78fb      	ldrb	r3, [r7, #3]
 80057d0:	f003 0307 	and.w	r3, r3, #7
 80057d4:	b2da      	uxtb	r2, r3
 80057d6:	7a3b      	ldrb	r3, [r7, #8]
 80057d8:	f362 1347 	bfi	r3, r2, #5, #3
 80057dc:	723b      	strb	r3, [r7, #8]
    ret = lis2dw12_write_reg(ctx, LIS2DW12_FIFO_CTRL, (uint8_t *) &reg, 1);
 80057de:	f107 0208 	add.w	r2, r7, #8
 80057e2:	2301      	movs	r3, #1
 80057e4:	212e      	movs	r1, #46	; 0x2e
 80057e6:	6878      	ldr	r0, [r7, #4]
 80057e8:	f7ff fcaa 	bl	8005140 <lis2dw12_write_reg>
 80057ec:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80057ee:	68fb      	ldr	r3, [r7, #12]
}
 80057f0:	4618      	mov	r0, r3
 80057f2:	3710      	adds	r7, #16
 80057f4:	46bd      	mov	sp, r7
 80057f6:	bd80      	pop	{r7, pc}

080057f8 <LIS2MDL_RegisterBusIO>:
  * @brief  Register Component Bus IO operations
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_RegisterBusIO(LIS2MDL_Object_t *pObj, LIS2MDL_IO_t *pIO)
{
 80057f8:	b580      	push	{r7, lr}
 80057fa:	b084      	sub	sp, #16
 80057fc:	af00      	add	r7, sp, #0
 80057fe:	6078      	str	r0, [r7, #4]
 8005800:	6039      	str	r1, [r7, #0]
  int32_t ret = LIS2MDL_OK;
 8005802:	2300      	movs	r3, #0
 8005804:	60fb      	str	r3, [r7, #12]

  if (pObj == NULL)
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	2b00      	cmp	r3, #0
 800580a:	d103      	bne.n	8005814 <LIS2MDL_RegisterBusIO+0x1c>
  {
    ret = LIS2MDL_ERROR;
 800580c:	f04f 33ff 	mov.w	r3, #4294967295
 8005810:	60fb      	str	r3, [r7, #12]
 8005812:	e067      	b.n	80058e4 <LIS2MDL_RegisterBusIO+0xec>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 8005814:	683b      	ldr	r3, [r7, #0]
 8005816:	681a      	ldr	r2, [r3, #0]
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 800581c:	683b      	ldr	r3, [r7, #0]
 800581e:	685a      	ldr	r2, [r3, #4]
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	605a      	str	r2, [r3, #4]
    pObj->IO.BusType   = pIO->BusType;
 8005824:	683b      	ldr	r3, [r7, #0]
 8005826:	689a      	ldr	r2, [r3, #8]
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	609a      	str	r2, [r3, #8]
    pObj->IO.Address   = pIO->Address;
 800582c:	683b      	ldr	r3, [r7, #0]
 800582e:	7b1a      	ldrb	r2, [r3, #12]
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	731a      	strb	r2, [r3, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 8005834:	683b      	ldr	r3, [r7, #0]
 8005836:	691a      	ldr	r2, [r3, #16]
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	611a      	str	r2, [r3, #16]
    pObj->IO.ReadReg   = pIO->ReadReg;
 800583c:	683b      	ldr	r3, [r7, #0]
 800583e:	695a      	ldr	r2, [r3, #20]
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	615a      	str	r2, [r3, #20]
    pObj->IO.GetTick   = pIO->GetTick;
 8005844:	683b      	ldr	r3, [r7, #0]
 8005846:	699a      	ldr	r2, [r3, #24]
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	619a      	str	r2, [r3, #24]

    pObj->Ctx.read_reg  = ReadMagRegWrap;
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	4a28      	ldr	r2, [pc, #160]	; (80058f0 <LIS2MDL_RegisterBusIO+0xf8>)
 8005850:	625a      	str	r2, [r3, #36]	; 0x24
    pObj->Ctx.write_reg = WriteMagRegWrap;
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	4a27      	ldr	r2, [pc, #156]	; (80058f4 <LIS2MDL_RegisterBusIO+0xfc>)
 8005856:	621a      	str	r2, [r3, #32]
    pObj->Ctx.mdelay    = pIO->Delay;
 8005858:	683b      	ldr	r3, [r7, #0]
 800585a:	69da      	ldr	r2, [r3, #28]
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	629a      	str	r2, [r3, #40]	; 0x28
    pObj->Ctx.handle    = pObj;
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	687a      	ldr	r2, [r7, #4]
 8005864:	62da      	str	r2, [r3, #44]	; 0x2c

    if (pObj->IO.Init == NULL)
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	2b00      	cmp	r3, #0
 800586c:	d103      	bne.n	8005876 <LIS2MDL_RegisterBusIO+0x7e>
    {
      ret = LIS2MDL_ERROR;
 800586e:	f04f 33ff 	mov.w	r3, #4294967295
 8005872:	60fb      	str	r3, [r7, #12]
 8005874:	e036      	b.n	80058e4 <LIS2MDL_RegisterBusIO+0xec>
    }
    else if (pObj->IO.Init() != LIS2MDL_OK)
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	4798      	blx	r3
 800587c:	4603      	mov	r3, r0
 800587e:	2b00      	cmp	r3, #0
 8005880:	d003      	beq.n	800588a <LIS2MDL_RegisterBusIO+0x92>
    {
      ret = LIS2MDL_ERROR;
 8005882:	f04f 33ff 	mov.w	r3, #4294967295
 8005886:	60fb      	str	r3, [r7, #12]
 8005888:	e02c      	b.n	80058e4 <LIS2MDL_RegisterBusIO+0xec>
    }
    else
    {
      if (pObj->IO.BusType != LIS2MDL_I2C_BUS) /* If the bus type is not I2C */
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	689b      	ldr	r3, [r3, #8]
 800588e:	2b00      	cmp	r3, #0
 8005890:	d028      	beq.n	80058e4 <LIS2MDL_RegisterBusIO+0xec>
      {
        /* Disable I2C interface support and enable eventually SPI 4-Wires only the first time */
        if (pObj->is_initialized == 0U)
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005898:	2b00      	cmp	r3, #0
 800589a:	d123      	bne.n	80058e4 <LIS2MDL_RegisterBusIO+0xec>
        {
          if (pObj->IO.BusType == LIS2MDL_SPI_4WIRES_BUS) /* SPI 4-Wires */
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	689b      	ldr	r3, [r3, #8]
 80058a0:	2b01      	cmp	r3, #1
 80058a2:	d10d      	bne.n	80058c0 <LIS2MDL_RegisterBusIO+0xc8>
          {
            /* Enable SPI 4-Wires and disable I2C support on the component */
            uint8_t data = 0x34;
 80058a4:	2334      	movs	r3, #52	; 0x34
 80058a6:	72fb      	strb	r3, [r7, #11]

            if (LIS2MDL_Write_Reg(pObj, LIS2MDL_CFG_REG_C, data) != LIS2MDL_OK)
 80058a8:	7afb      	ldrb	r3, [r7, #11]
 80058aa:	461a      	mov	r2, r3
 80058ac:	2162      	movs	r1, #98	; 0x62
 80058ae:	6878      	ldr	r0, [r7, #4]
 80058b0:	f000 fb1b 	bl	8005eea <LIS2MDL_Write_Reg>
 80058b4:	4603      	mov	r3, r0
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	d014      	beq.n	80058e4 <LIS2MDL_RegisterBusIO+0xec>
            {
              return LIS2MDL_ERROR;
 80058ba:	f04f 33ff 	mov.w	r3, #4294967295
 80058be:	e012      	b.n	80058e6 <LIS2MDL_RegisterBusIO+0xee>
            }
          }
          else if (pObj->IO.BusType == LSM6DSOX_SENSORHUB_LIS2MDL_I2C_BUS) /* LSM6DSOX SensorHub with LIS2MDL example */
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	689b      	ldr	r3, [r3, #8]
 80058c4:	2b03      	cmp	r3, #3
 80058c6:	d101      	bne.n	80058cc <LIS2MDL_RegisterBusIO+0xd4>
          {
            /* Do nothing, just keep I2C support on the component */
            return ret;
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	e00c      	b.n	80058e6 <LIS2MDL_RegisterBusIO+0xee>
          }
          else
          {
            /* Disable I2C interface on the component */
            if (lis2mdl_i2c_interface_set(&(pObj->Ctx), LIS2MDL_I2C_DISABLE) != LIS2MDL_OK)
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	3320      	adds	r3, #32
 80058d0:	2101      	movs	r1, #1
 80058d2:	4618      	mov	r0, r3
 80058d4:	f000 ff70 	bl	80067b8 <lis2mdl_i2c_interface_set>
 80058d8:	4603      	mov	r3, r0
 80058da:	2b00      	cmp	r3, #0
 80058dc:	d002      	beq.n	80058e4 <LIS2MDL_RegisterBusIO+0xec>
            {
              return LIS2MDL_ERROR;
 80058de:	f04f 33ff 	mov.w	r3, #4294967295
 80058e2:	e000      	b.n	80058e6 <LIS2MDL_RegisterBusIO+0xee>
        }
      }
    }
  }

  return ret;
 80058e4:	68fb      	ldr	r3, [r7, #12]
}
 80058e6:	4618      	mov	r0, r3
 80058e8:	3710      	adds	r7, #16
 80058ea:	46bd      	mov	sp, r7
 80058ec:	bd80      	pop	{r7, pc}
 80058ee:	bf00      	nop
 80058f0:	08005f41 	.word	0x08005f41
 80058f4:	08005fc3 	.word	0x08005fc3

080058f8 <LIS2MDL_Init>:
  * @brief  Initialize the LIS2MDL sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_Init(LIS2MDL_Object_t *pObj)
{
 80058f8:	b580      	push	{r7, lr}
 80058fa:	b084      	sub	sp, #16
 80058fc:	af00      	add	r7, sp, #0
 80058fe:	6078      	str	r0, [r7, #4]
  lis2mdl_cfg_reg_a_t reg_a;
  lis2mdl_cfg_reg_c_t reg_c;

  if (pObj->IO.BusType == LSM6DSOX_SENSORHUB_LIS2MDL_I2C_BUS) /* LSM6DSOX SensorHub with LIS2MDL example */
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	689b      	ldr	r3, [r3, #8]
 8005904:	2b03      	cmp	r3, #3
 8005906:	d144      	bne.n	8005992 <LIS2MDL_Init+0x9a>
  {
    /* Read configuration from CFG_REG_C & CFG_REG_A regs */
    if (LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData(pObj, LIS2MDL_CFG_REG_C, (uint8_t *)&reg_c, 1) != LIS2MDL_OK)
 8005908:	f107 0208 	add.w	r2, r7, #8
 800590c:	2301      	movs	r3, #1
 800590e:	2162      	movs	r1, #98	; 0x62
 8005910:	6878      	ldr	r0, [r7, #4]
 8005912:	f000 fb97 	bl	8006044 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData>
 8005916:	4603      	mov	r3, r0
 8005918:	2b00      	cmp	r3, #0
 800591a:	d002      	beq.n	8005922 <LIS2MDL_Init+0x2a>
    {
      return LIS2MDL_ERROR;
 800591c:	f04f 33ff 	mov.w	r3, #4294967295
 8005920:	e06c      	b.n	80059fc <LIS2MDL_Init+0x104>
    }
    if (LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData(pObj, LIS2MDL_CFG_REG_A, (uint8_t *)&reg_a, 1) != LIS2MDL_OK)
 8005922:	f107 020c 	add.w	r2, r7, #12
 8005926:	2301      	movs	r3, #1
 8005928:	2160      	movs	r1, #96	; 0x60
 800592a:	6878      	ldr	r0, [r7, #4]
 800592c:	f000 fb8a 	bl	8006044 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData>
 8005930:	4603      	mov	r3, r0
 8005932:	2b00      	cmp	r3, #0
 8005934:	d002      	beq.n	800593c <LIS2MDL_Init+0x44>
    {
      return LIS2MDL_ERROR;
 8005936:	f04f 33ff 	mov.w	r3, #4294967295
 800593a:	e05f      	b.n	80059fc <LIS2MDL_Init+0x104>
    }

    /* Enable BDU */
    reg_c.bdu = PROPERTY_ENABLE;
 800593c:	7a3b      	ldrb	r3, [r7, #8]
 800593e:	f043 0310 	orr.w	r3, r3, #16
 8005942:	723b      	strb	r3, [r7, #8]

    /* Self Test disabled. */
    reg_c.self_test = PROPERTY_DISABLE;
 8005944:	7a3b      	ldrb	r3, [r7, #8]
 8005946:	f36f 0341 	bfc	r3, #1, #1
 800594a:	723b      	strb	r3, [r7, #8]

    /* Operating mode selection - power down */
    reg_a.md = LIS2MDL_POWER_DOWN;
 800594c:	7b3b      	ldrb	r3, [r7, #12]
 800594e:	2202      	movs	r2, #2
 8005950:	f362 0301 	bfi	r3, r2, #0, #2
 8005954:	733b      	strb	r3, [r7, #12]

    /* Output data rate selection */
    reg_a.odr = LIS2MDL_ODR_100Hz;
 8005956:	7b3b      	ldrb	r3, [r7, #12]
 8005958:	f043 030c 	orr.w	r3, r3, #12
 800595c:	733b      	strb	r3, [r7, #12]

    /* Write configuration to CFG_REG_C & CFG_REG_A regs */
    if (LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData(pObj, LIS2MDL_CFG_REG_C, (uint8_t *)&reg_c, 1) != LIS2MDL_OK)
 800595e:	f107 0208 	add.w	r2, r7, #8
 8005962:	2301      	movs	r3, #1
 8005964:	2162      	movs	r1, #98	; 0x62
 8005966:	6878      	ldr	r0, [r7, #4]
 8005968:	f000 fcab 	bl	80062c2 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData>
 800596c:	4603      	mov	r3, r0
 800596e:	2b00      	cmp	r3, #0
 8005970:	d002      	beq.n	8005978 <LIS2MDL_Init+0x80>
    {
      return LIS2MDL_ERROR;
 8005972:	f04f 33ff 	mov.w	r3, #4294967295
 8005976:	e041      	b.n	80059fc <LIS2MDL_Init+0x104>
    }
    if (LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData(pObj, LIS2MDL_CFG_REG_A, (uint8_t *)&reg_a, 1) != LIS2MDL_OK)
 8005978:	f107 020c 	add.w	r2, r7, #12
 800597c:	2301      	movs	r3, #1
 800597e:	2160      	movs	r1, #96	; 0x60
 8005980:	6878      	ldr	r0, [r7, #4]
 8005982:	f000 fc9e 	bl	80062c2 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData>
 8005986:	4603      	mov	r3, r0
 8005988:	2b00      	cmp	r3, #0
 800598a:	d032      	beq.n	80059f2 <LIS2MDL_Init+0xfa>
    {
      return LIS2MDL_ERROR;
 800598c:	f04f 33ff 	mov.w	r3, #4294967295
 8005990:	e034      	b.n	80059fc <LIS2MDL_Init+0x104>
    }
  }
  else
  {
    /* Enable BDU */
    if (lis2mdl_block_data_update_set(&(pObj->Ctx), PROPERTY_ENABLE) != LIS2MDL_OK)
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	3320      	adds	r3, #32
 8005996:	2101      	movs	r1, #1
 8005998:	4618      	mov	r0, r3
 800599a:	f000 fe65 	bl	8006668 <lis2mdl_block_data_update_set>
 800599e:	4603      	mov	r3, r0
 80059a0:	2b00      	cmp	r3, #0
 80059a2:	d002      	beq.n	80059aa <LIS2MDL_Init+0xb2>
    {
      return LIS2MDL_ERROR;
 80059a4:	f04f 33ff 	mov.w	r3, #4294967295
 80059a8:	e028      	b.n	80059fc <LIS2MDL_Init+0x104>
    }

    /* Operating mode selection - power down */
    if (lis2mdl_operating_mode_set(&(pObj->Ctx), LIS2MDL_POWER_DOWN) != LIS2MDL_OK)
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	3320      	adds	r3, #32
 80059ae:	2102      	movs	r1, #2
 80059b0:	4618      	mov	r0, r3
 80059b2:	f000 fdd4 	bl	800655e <lis2mdl_operating_mode_set>
 80059b6:	4603      	mov	r3, r0
 80059b8:	2b00      	cmp	r3, #0
 80059ba:	d002      	beq.n	80059c2 <LIS2MDL_Init+0xca>
    {
      return LIS2MDL_ERROR;
 80059bc:	f04f 33ff 	mov.w	r3, #4294967295
 80059c0:	e01c      	b.n	80059fc <LIS2MDL_Init+0x104>
    }

    /* Output data rate selection */
    if (lis2mdl_data_rate_set(&(pObj->Ctx), LIS2MDL_ODR_100Hz) != LIS2MDL_OK)
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	3320      	adds	r3, #32
 80059c6:	2103      	movs	r1, #3
 80059c8:	4618      	mov	r0, r3
 80059ca:	f000 fdee 	bl	80065aa <lis2mdl_data_rate_set>
 80059ce:	4603      	mov	r3, r0
 80059d0:	2b00      	cmp	r3, #0
 80059d2:	d002      	beq.n	80059da <LIS2MDL_Init+0xe2>
    {
      return LIS2MDL_ERROR;
 80059d4:	f04f 33ff 	mov.w	r3, #4294967295
 80059d8:	e010      	b.n	80059fc <LIS2MDL_Init+0x104>
    }

    /* Self Test disabled. */
    if (lis2mdl_self_test_set(&(pObj->Ctx), PROPERTY_DISABLE) != LIS2MDL_OK)
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	3320      	adds	r3, #32
 80059de:	2100      	movs	r1, #0
 80059e0:	4618      	mov	r0, r3
 80059e2:	f000 fec3 	bl	800676c <lis2mdl_self_test_set>
 80059e6:	4603      	mov	r3, r0
 80059e8:	2b00      	cmp	r3, #0
 80059ea:	d002      	beq.n	80059f2 <LIS2MDL_Init+0xfa>
    {
      return LIS2MDL_ERROR;
 80059ec:	f04f 33ff 	mov.w	r3, #4294967295
 80059f0:	e004      	b.n	80059fc <LIS2MDL_Init+0x104>
    }
  }

  pObj->is_initialized = 1;
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	2201      	movs	r2, #1
 80059f6:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return LIS2MDL_OK;
 80059fa:	2300      	movs	r3, #0
}
 80059fc:	4618      	mov	r0, r3
 80059fe:	3710      	adds	r7, #16
 8005a00:	46bd      	mov	sp, r7
 8005a02:	bd80      	pop	{r7, pc}

08005a04 <LIS2MDL_DeInit>:
  * @brief  Deinitialize the LIS2MDL magnetometer sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_DeInit(LIS2MDL_Object_t *pObj)
{
 8005a04:	b580      	push	{r7, lr}
 8005a06:	b082      	sub	sp, #8
 8005a08:	af00      	add	r7, sp, #0
 8005a0a:	6078      	str	r0, [r7, #4]
  /* Disable the component */
  if (LIS2MDL_MAG_Disable(pObj) != LIS2MDL_OK)
 8005a0c:	6878      	ldr	r0, [r7, #4]
 8005a0e:	f000 f8a5 	bl	8005b5c <LIS2MDL_MAG_Disable>
 8005a12:	4603      	mov	r3, r0
 8005a14:	2b00      	cmp	r3, #0
 8005a16:	d002      	beq.n	8005a1e <LIS2MDL_DeInit+0x1a>
  {
    return LIS2MDL_ERROR;
 8005a18:	f04f 33ff 	mov.w	r3, #4294967295
 8005a1c:	e004      	b.n	8005a28 <LIS2MDL_DeInit+0x24>
  }

  pObj->is_initialized = 0;
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	2200      	movs	r2, #0
 8005a22:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return LIS2MDL_OK;
 8005a26:	2300      	movs	r3, #0
}
 8005a28:	4618      	mov	r0, r3
 8005a2a:	3708      	adds	r7, #8
 8005a2c:	46bd      	mov	sp, r7
 8005a2e:	bd80      	pop	{r7, pc}

08005a30 <LIS2MDL_ReadID>:
  * @param  pObj the device pObj
  * @param  Id the WHO_AM_I value
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_ReadID(LIS2MDL_Object_t *pObj, uint8_t *Id)
{
 8005a30:	b580      	push	{r7, lr}
 8005a32:	b082      	sub	sp, #8
 8005a34:	af00      	add	r7, sp, #0
 8005a36:	6078      	str	r0, [r7, #4]
 8005a38:	6039      	str	r1, [r7, #0]
  if (pObj->IO.BusType == LSM6DSOX_SENSORHUB_LIS2MDL_I2C_BUS) /* LSM6DSOX SensorHub with LIS2MDL example */
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	689b      	ldr	r3, [r3, #8]
 8005a3e:	2b03      	cmp	r3, #3
 8005a40:	d10b      	bne.n	8005a5a <LIS2MDL_ReadID+0x2a>
  {
    if (LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData(pObj, LIS2MDL_WHO_AM_I, Id, 1) != LIS2MDL_OK)
 8005a42:	2301      	movs	r3, #1
 8005a44:	683a      	ldr	r2, [r7, #0]
 8005a46:	214f      	movs	r1, #79	; 0x4f
 8005a48:	6878      	ldr	r0, [r7, #4]
 8005a4a:	f000 fafb 	bl	8006044 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData>
 8005a4e:	4603      	mov	r3, r0
 8005a50:	2b00      	cmp	r3, #0
 8005a52:	d00e      	beq.n	8005a72 <LIS2MDL_ReadID+0x42>
    {
      return LIS2MDL_ERROR;
 8005a54:	f04f 33ff 	mov.w	r3, #4294967295
 8005a58:	e00c      	b.n	8005a74 <LIS2MDL_ReadID+0x44>
    }
  }
  else
  {
    if (lis2mdl_device_id_get(&(pObj->Ctx), Id) != LIS2MDL_OK)
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	3320      	adds	r3, #32
 8005a5e:	6839      	ldr	r1, [r7, #0]
 8005a60:	4618      	mov	r0, r3
 8005a62:	f000 fe72 	bl	800674a <lis2mdl_device_id_get>
 8005a66:	4603      	mov	r3, r0
 8005a68:	2b00      	cmp	r3, #0
 8005a6a:	d002      	beq.n	8005a72 <LIS2MDL_ReadID+0x42>
    {
      return LIS2MDL_ERROR;
 8005a6c:	f04f 33ff 	mov.w	r3, #4294967295
 8005a70:	e000      	b.n	8005a74 <LIS2MDL_ReadID+0x44>
    }
  }

  return LIS2MDL_OK;
 8005a72:	2300      	movs	r3, #0
}
 8005a74:	4618      	mov	r0, r3
 8005a76:	3708      	adds	r7, #8
 8005a78:	46bd      	mov	sp, r7
 8005a7a:	bd80      	pop	{r7, pc}

08005a7c <LIS2MDL_GetCapabilities>:
  * @param  pObj Component object pointer
  * @param  Capabilities pointer to LIS2MDL magnetometer sensor capabilities
  * @retval Component status
  */
int32_t LIS2MDL_GetCapabilities(LIS2MDL_Object_t *pObj, LIS2MDL_Capabilities_t *Capabilities)
{
 8005a7c:	b480      	push	{r7}
 8005a7e:	b083      	sub	sp, #12
 8005a80:	af00      	add	r7, sp, #0
 8005a82:	6078      	str	r0, [r7, #4]
 8005a84:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  Capabilities->Acc          = 0;
 8005a86:	683b      	ldr	r3, [r7, #0]
 8005a88:	2200      	movs	r2, #0
 8005a8a:	701a      	strb	r2, [r3, #0]
  Capabilities->Gyro         = 0;
 8005a8c:	683b      	ldr	r3, [r7, #0]
 8005a8e:	2200      	movs	r2, #0
 8005a90:	705a      	strb	r2, [r3, #1]
  Capabilities->Magneto      = 1;
 8005a92:	683b      	ldr	r3, [r7, #0]
 8005a94:	2201      	movs	r2, #1
 8005a96:	709a      	strb	r2, [r3, #2]
  Capabilities->LowPower     = 0;
 8005a98:	683b      	ldr	r3, [r7, #0]
 8005a9a:	2200      	movs	r2, #0
 8005a9c:	70da      	strb	r2, [r3, #3]
  Capabilities->GyroMaxFS    = 0;
 8005a9e:	683b      	ldr	r3, [r7, #0]
 8005aa0:	2200      	movs	r2, #0
 8005aa2:	605a      	str	r2, [r3, #4]
  Capabilities->AccMaxFS     = 0;
 8005aa4:	683b      	ldr	r3, [r7, #0]
 8005aa6:	2200      	movs	r2, #0
 8005aa8:	609a      	str	r2, [r3, #8]
  Capabilities->MagMaxFS     = 50;
 8005aaa:	683b      	ldr	r3, [r7, #0]
 8005aac:	2232      	movs	r2, #50	; 0x32
 8005aae:	60da      	str	r2, [r3, #12]
  Capabilities->GyroMaxOdr   = 0.0f;
 8005ab0:	683b      	ldr	r3, [r7, #0]
 8005ab2:	f04f 0200 	mov.w	r2, #0
 8005ab6:	611a      	str	r2, [r3, #16]
  Capabilities->AccMaxOdr    = 0.0f;
 8005ab8:	683b      	ldr	r3, [r7, #0]
 8005aba:	f04f 0200 	mov.w	r2, #0
 8005abe:	615a      	str	r2, [r3, #20]
  Capabilities->MagMaxOdr    = 100.0f;
 8005ac0:	683b      	ldr	r3, [r7, #0]
 8005ac2:	4a04      	ldr	r2, [pc, #16]	; (8005ad4 <LIS2MDL_GetCapabilities+0x58>)
 8005ac4:	619a      	str	r2, [r3, #24]
  return LIS2MDL_OK;
 8005ac6:	2300      	movs	r3, #0
}
 8005ac8:	4618      	mov	r0, r3
 8005aca:	370c      	adds	r7, #12
 8005acc:	46bd      	mov	sp, r7
 8005ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ad2:	4770      	bx	lr
 8005ad4:	42c80000 	.word	0x42c80000

08005ad8 <LIS2MDL_MAG_Enable>:
  * @brief Enable the LIS2MDL magnetometer sensor
  * @param pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_MAG_Enable(LIS2MDL_Object_t *pObj)
{
 8005ad8:	b580      	push	{r7, lr}
 8005ada:	b084      	sub	sp, #16
 8005adc:	af00      	add	r7, sp, #0
 8005ade:	6078      	str	r0, [r7, #4]
  lis2mdl_cfg_reg_a_t reg_a;

  /* Check if the component is already enabled */
  if (pObj->mag_is_enabled == 1U)
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8005ae6:	2b01      	cmp	r3, #1
 8005ae8:	d101      	bne.n	8005aee <LIS2MDL_MAG_Enable+0x16>
  {
    return LIS2MDL_OK;
 8005aea:	2300      	movs	r3, #0
 8005aec:	e032      	b.n	8005b54 <LIS2MDL_MAG_Enable+0x7c>
  }

  if (pObj->IO.BusType == LSM6DSOX_SENSORHUB_LIS2MDL_I2C_BUS) /* LSM6DSOX SensorHub with LIS2MDL example */
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	689b      	ldr	r3, [r3, #8]
 8005af2:	2b03      	cmp	r3, #3
 8005af4:	d11d      	bne.n	8005b32 <LIS2MDL_MAG_Enable+0x5a>
  {
    /* Read configuration from CFG_REG_A reg */
    if (LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData(pObj, LIS2MDL_CFG_REG_A, (uint8_t *)&reg_a, 1) != LIS2MDL_OK)
 8005af6:	f107 020c 	add.w	r2, r7, #12
 8005afa:	2301      	movs	r3, #1
 8005afc:	2160      	movs	r1, #96	; 0x60
 8005afe:	6878      	ldr	r0, [r7, #4]
 8005b00:	f000 faa0 	bl	8006044 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData>
 8005b04:	4603      	mov	r3, r0
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	d002      	beq.n	8005b10 <LIS2MDL_MAG_Enable+0x38>
    {
      return LIS2MDL_ERROR;
 8005b0a:	f04f 33ff 	mov.w	r3, #4294967295
 8005b0e:	e021      	b.n	8005b54 <LIS2MDL_MAG_Enable+0x7c>
    }

    /* Operation mode selection. */
    reg_a.md = LIS2MDL_CONTINUOUS_MODE;
 8005b10:	7b3b      	ldrb	r3, [r7, #12]
 8005b12:	f36f 0301 	bfc	r3, #0, #2
 8005b16:	733b      	strb	r3, [r7, #12]

    /* Write configuration to CFG_REG_A reg */
    if (LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData(pObj, LIS2MDL_CFG_REG_A, (uint8_t *)&reg_a, 1) != LIS2MDL_OK)
 8005b18:	f107 020c 	add.w	r2, r7, #12
 8005b1c:	2301      	movs	r3, #1
 8005b1e:	2160      	movs	r1, #96	; 0x60
 8005b20:	6878      	ldr	r0, [r7, #4]
 8005b22:	f000 fbce 	bl	80062c2 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData>
 8005b26:	4603      	mov	r3, r0
 8005b28:	2b00      	cmp	r3, #0
 8005b2a:	d00e      	beq.n	8005b4a <LIS2MDL_MAG_Enable+0x72>
    {
      return LIS2MDL_ERROR;
 8005b2c:	f04f 33ff 	mov.w	r3, #4294967295
 8005b30:	e010      	b.n	8005b54 <LIS2MDL_MAG_Enable+0x7c>
    }
  }
  else
  {
    /* Operation mode selection. */
    if (lis2mdl_operating_mode_set(&(pObj->Ctx), LIS2MDL_CONTINUOUS_MODE) != LIS2MDL_OK)
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	3320      	adds	r3, #32
 8005b36:	2100      	movs	r1, #0
 8005b38:	4618      	mov	r0, r3
 8005b3a:	f000 fd10 	bl	800655e <lis2mdl_operating_mode_set>
 8005b3e:	4603      	mov	r3, r0
 8005b40:	2b00      	cmp	r3, #0
 8005b42:	d002      	beq.n	8005b4a <LIS2MDL_MAG_Enable+0x72>
    {
      return LIS2MDL_ERROR;
 8005b44:	f04f 33ff 	mov.w	r3, #4294967295
 8005b48:	e004      	b.n	8005b54 <LIS2MDL_MAG_Enable+0x7c>
    }
  }

  pObj->mag_is_enabled = 1;
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	2201      	movs	r2, #1
 8005b4e:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

  return LIS2MDL_OK;
 8005b52:	2300      	movs	r3, #0
}
 8005b54:	4618      	mov	r0, r3
 8005b56:	3710      	adds	r7, #16
 8005b58:	46bd      	mov	sp, r7
 8005b5a:	bd80      	pop	{r7, pc}

08005b5c <LIS2MDL_MAG_Disable>:
  * @brief Disable the LIS2MDL magnetometer sensor
  * @param pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_MAG_Disable(LIS2MDL_Object_t *pObj)
{
 8005b5c:	b580      	push	{r7, lr}
 8005b5e:	b084      	sub	sp, #16
 8005b60:	af00      	add	r7, sp, #0
 8005b62:	6078      	str	r0, [r7, #4]
  lis2mdl_cfg_reg_a_t reg_a;

  /* Check if the component is already disabled */
  if (pObj->mag_is_enabled == 0U)
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8005b6a:	2b00      	cmp	r3, #0
 8005b6c:	d101      	bne.n	8005b72 <LIS2MDL_MAG_Disable+0x16>
  {
    return LIS2MDL_OK;
 8005b6e:	2300      	movs	r3, #0
 8005b70:	e033      	b.n	8005bda <LIS2MDL_MAG_Disable+0x7e>
  }

  if (pObj->IO.BusType == LSM6DSOX_SENSORHUB_LIS2MDL_I2C_BUS) /* LSM6DSOX SensorHub with LIS2MDL example */
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	689b      	ldr	r3, [r3, #8]
 8005b76:	2b03      	cmp	r3, #3
 8005b78:	d11e      	bne.n	8005bb8 <LIS2MDL_MAG_Disable+0x5c>
  {
    /* Read configuration from CFG_REG_A reg */
    if (LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData(pObj, LIS2MDL_CFG_REG_A, (uint8_t *)&reg_a, 1) != LIS2MDL_OK)
 8005b7a:	f107 020c 	add.w	r2, r7, #12
 8005b7e:	2301      	movs	r3, #1
 8005b80:	2160      	movs	r1, #96	; 0x60
 8005b82:	6878      	ldr	r0, [r7, #4]
 8005b84:	f000 fa5e 	bl	8006044 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData>
 8005b88:	4603      	mov	r3, r0
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	d002      	beq.n	8005b94 <LIS2MDL_MAG_Disable+0x38>
    {
      return LIS2MDL_ERROR;
 8005b8e:	f04f 33ff 	mov.w	r3, #4294967295
 8005b92:	e022      	b.n	8005bda <LIS2MDL_MAG_Disable+0x7e>
    }

    /* Operation mode selection. */
    reg_a.md = LIS2MDL_POWER_DOWN;
 8005b94:	7b3b      	ldrb	r3, [r7, #12]
 8005b96:	2202      	movs	r2, #2
 8005b98:	f362 0301 	bfi	r3, r2, #0, #2
 8005b9c:	733b      	strb	r3, [r7, #12]

    /* Write configuration to CFG_REG_A reg */
    if (LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData(pObj, LIS2MDL_CFG_REG_A, (uint8_t *)&reg_a, 1) != LIS2MDL_OK)
 8005b9e:	f107 020c 	add.w	r2, r7, #12
 8005ba2:	2301      	movs	r3, #1
 8005ba4:	2160      	movs	r1, #96	; 0x60
 8005ba6:	6878      	ldr	r0, [r7, #4]
 8005ba8:	f000 fb8b 	bl	80062c2 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData>
 8005bac:	4603      	mov	r3, r0
 8005bae:	2b00      	cmp	r3, #0
 8005bb0:	d00e      	beq.n	8005bd0 <LIS2MDL_MAG_Disable+0x74>
    {
      return LIS2MDL_ERROR;
 8005bb2:	f04f 33ff 	mov.w	r3, #4294967295
 8005bb6:	e010      	b.n	8005bda <LIS2MDL_MAG_Disable+0x7e>
    }
  }
  else
  {
    /* Operation mode selection. */
    if (lis2mdl_operating_mode_set(&(pObj->Ctx), LIS2MDL_POWER_DOWN) != LIS2MDL_OK)
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	3320      	adds	r3, #32
 8005bbc:	2102      	movs	r1, #2
 8005bbe:	4618      	mov	r0, r3
 8005bc0:	f000 fccd 	bl	800655e <lis2mdl_operating_mode_set>
 8005bc4:	4603      	mov	r3, r0
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	d002      	beq.n	8005bd0 <LIS2MDL_MAG_Disable+0x74>
    {
      return LIS2MDL_ERROR;
 8005bca:	f04f 33ff 	mov.w	r3, #4294967295
 8005bce:	e004      	b.n	8005bda <LIS2MDL_MAG_Disable+0x7e>
    }
  }

  pObj->mag_is_enabled = 0;
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	2200      	movs	r2, #0
 8005bd4:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

  return LIS2MDL_OK;
 8005bd8:	2300      	movs	r3, #0
}
 8005bda:	4618      	mov	r0, r3
 8005bdc:	3710      	adds	r7, #16
 8005bde:	46bd      	mov	sp, r7
 8005be0:	bd80      	pop	{r7, pc}

08005be2 <LIS2MDL_MAG_GetSensitivity>:
  * @param  pObj the device pObj
  * @param  Sensitivity pointer
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_MAG_GetSensitivity(LIS2MDL_Object_t *pObj, float *Sensitivity)
{
 8005be2:	b480      	push	{r7}
 8005be4:	b083      	sub	sp, #12
 8005be6:	af00      	add	r7, sp, #0
 8005be8:	6078      	str	r0, [r7, #4]
 8005bea:	6039      	str	r1, [r7, #0]
  *Sensitivity = LIS2MDL_MAG_SENSITIVITY_FS_50GAUSS;
 8005bec:	683b      	ldr	r3, [r7, #0]
 8005bee:	f04f 527f 	mov.w	r2, #1069547520	; 0x3fc00000
 8005bf2:	601a      	str	r2, [r3, #0]

  return LIS2MDL_OK;
 8005bf4:	2300      	movs	r3, #0
}
 8005bf6:	4618      	mov	r0, r3
 8005bf8:	370c      	adds	r7, #12
 8005bfa:	46bd      	mov	sp, r7
 8005bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c00:	4770      	bx	lr
	...

08005c04 <LIS2MDL_MAG_GetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr pointer where the output data rate is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_MAG_GetOutputDataRate(LIS2MDL_Object_t *pObj, float *Odr)
{
 8005c04:	b580      	push	{r7, lr}
 8005c06:	b084      	sub	sp, #16
 8005c08:	af00      	add	r7, sp, #0
 8005c0a:	6078      	str	r0, [r7, #4]
 8005c0c:	6039      	str	r1, [r7, #0]
  int32_t ret = LIS2MDL_OK;
 8005c0e:	2300      	movs	r3, #0
 8005c10:	60fb      	str	r3, [r7, #12]
  lis2mdl_odr_t odr_low_level;

  /* Get current output data rate. */
  if (lis2mdl_data_rate_get(&(pObj->Ctx), &odr_low_level) != LIS2MDL_OK)
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	3320      	adds	r3, #32
 8005c16:	f107 020b 	add.w	r2, r7, #11
 8005c1a:	4611      	mov	r1, r2
 8005c1c:	4618      	mov	r0, r3
 8005c1e:	f000 fceb 	bl	80065f8 <lis2mdl_data_rate_get>
 8005c22:	4603      	mov	r3, r0
 8005c24:	2b00      	cmp	r3, #0
 8005c26:	d002      	beq.n	8005c2e <LIS2MDL_MAG_GetOutputDataRate+0x2a>
  {
    return LIS2MDL_ERROR;
 8005c28:	f04f 33ff 	mov.w	r3, #4294967295
 8005c2c:	e023      	b.n	8005c76 <LIS2MDL_MAG_GetOutputDataRate+0x72>
  }

  switch (odr_low_level)
 8005c2e:	7afb      	ldrb	r3, [r7, #11]
 8005c30:	2b03      	cmp	r3, #3
 8005c32:	d81b      	bhi.n	8005c6c <LIS2MDL_MAG_GetOutputDataRate+0x68>
 8005c34:	a201      	add	r2, pc, #4	; (adr r2, 8005c3c <LIS2MDL_MAG_GetOutputDataRate+0x38>)
 8005c36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c3a:	bf00      	nop
 8005c3c:	08005c4d 	.word	0x08005c4d
 8005c40:	08005c55 	.word	0x08005c55
 8005c44:	08005c5d 	.word	0x08005c5d
 8005c48:	08005c65 	.word	0x08005c65
  {
    case LIS2MDL_ODR_10Hz:
      *Odr = 10.0f;
 8005c4c:	683b      	ldr	r3, [r7, #0]
 8005c4e:	4a0c      	ldr	r2, [pc, #48]	; (8005c80 <LIS2MDL_MAG_GetOutputDataRate+0x7c>)
 8005c50:	601a      	str	r2, [r3, #0]
      break;
 8005c52:	e00f      	b.n	8005c74 <LIS2MDL_MAG_GetOutputDataRate+0x70>

    case LIS2MDL_ODR_20Hz:
      *Odr = 20.0f;
 8005c54:	683b      	ldr	r3, [r7, #0]
 8005c56:	4a0b      	ldr	r2, [pc, #44]	; (8005c84 <LIS2MDL_MAG_GetOutputDataRate+0x80>)
 8005c58:	601a      	str	r2, [r3, #0]
      break;
 8005c5a:	e00b      	b.n	8005c74 <LIS2MDL_MAG_GetOutputDataRate+0x70>

    case LIS2MDL_ODR_50Hz:
      *Odr = 50.0f;
 8005c5c:	683b      	ldr	r3, [r7, #0]
 8005c5e:	4a0a      	ldr	r2, [pc, #40]	; (8005c88 <LIS2MDL_MAG_GetOutputDataRate+0x84>)
 8005c60:	601a      	str	r2, [r3, #0]
      break;
 8005c62:	e007      	b.n	8005c74 <LIS2MDL_MAG_GetOutputDataRate+0x70>

    case LIS2MDL_ODR_100Hz:
      *Odr = 100.0f;
 8005c64:	683b      	ldr	r3, [r7, #0]
 8005c66:	4a09      	ldr	r2, [pc, #36]	; (8005c8c <LIS2MDL_MAG_GetOutputDataRate+0x88>)
 8005c68:	601a      	str	r2, [r3, #0]
      break;
 8005c6a:	e003      	b.n	8005c74 <LIS2MDL_MAG_GetOutputDataRate+0x70>

    default:
      ret = LIS2MDL_ERROR;
 8005c6c:	f04f 33ff 	mov.w	r3, #4294967295
 8005c70:	60fb      	str	r3, [r7, #12]
      break;
 8005c72:	bf00      	nop
  }

  return ret;
 8005c74:	68fb      	ldr	r3, [r7, #12]
}
 8005c76:	4618      	mov	r0, r3
 8005c78:	3710      	adds	r7, #16
 8005c7a:	46bd      	mov	sp, r7
 8005c7c:	bd80      	pop	{r7, pc}
 8005c7e:	bf00      	nop
 8005c80:	41200000 	.word	0x41200000
 8005c84:	41a00000 	.word	0x41a00000
 8005c88:	42480000 	.word	0x42480000
 8005c8c:	42c80000 	.word	0x42c80000

08005c90 <LIS2MDL_MAG_SetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_MAG_SetOutputDataRate(LIS2MDL_Object_t *pObj, float Odr)
{
 8005c90:	b580      	push	{r7, lr}
 8005c92:	b084      	sub	sp, #16
 8005c94:	af00      	add	r7, sp, #0
 8005c96:	6078      	str	r0, [r7, #4]
 8005c98:	ed87 0a00 	vstr	s0, [r7]
  lis2mdl_odr_t new_odr;
  lis2mdl_cfg_reg_a_t reg_a;

  new_odr = (Odr <= 10.000f) ? LIS2MDL_ODR_10Hz
            : (Odr <= 20.000f) ? LIS2MDL_ODR_20Hz
 8005c9c:	edd7 7a00 	vldr	s15, [r7]
 8005ca0:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8005ca4:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005ca8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005cac:	d801      	bhi.n	8005cb2 <LIS2MDL_MAG_SetOutputDataRate+0x22>
 8005cae:	2300      	movs	r3, #0
 8005cb0:	e016      	b.n	8005ce0 <LIS2MDL_MAG_SetOutputDataRate+0x50>
 8005cb2:	edd7 7a00 	vldr	s15, [r7]
 8005cb6:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 8005cba:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005cbe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005cc2:	d801      	bhi.n	8005cc8 <LIS2MDL_MAG_SetOutputDataRate+0x38>
 8005cc4:	2301      	movs	r3, #1
 8005cc6:	e00b      	b.n	8005ce0 <LIS2MDL_MAG_SetOutputDataRate+0x50>
 8005cc8:	edd7 7a00 	vldr	s15, [r7]
 8005ccc:	ed9f 7a21 	vldr	s14, [pc, #132]	; 8005d54 <LIS2MDL_MAG_SetOutputDataRate+0xc4>
 8005cd0:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005cd4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005cd8:	d801      	bhi.n	8005cde <LIS2MDL_MAG_SetOutputDataRate+0x4e>
 8005cda:	2302      	movs	r3, #2
 8005cdc:	e000      	b.n	8005ce0 <LIS2MDL_MAG_SetOutputDataRate+0x50>
 8005cde:	2303      	movs	r3, #3
  new_odr = (Odr <= 10.000f) ? LIS2MDL_ODR_10Hz
 8005ce0:	73fb      	strb	r3, [r7, #15]
            : (Odr <= 50.000f) ? LIS2MDL_ODR_50Hz
            :                    LIS2MDL_ODR_100Hz;

  if (pObj->IO.BusType == LSM6DSOX_SENSORHUB_LIS2MDL_I2C_BUS) /* LSM6DSOX SensorHub with LIS2MDL example */
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	689b      	ldr	r3, [r3, #8]
 8005ce6:	2b03      	cmp	r3, #3
 8005ce8:	d121      	bne.n	8005d2e <LIS2MDL_MAG_SetOutputDataRate+0x9e>
  {
    /* Read configuration from CFG_REG_A reg */
    if (LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData(pObj, LIS2MDL_CFG_REG_A, (uint8_t *)&reg_a, 1) != LIS2MDL_OK)
 8005cea:	f107 020c 	add.w	r2, r7, #12
 8005cee:	2301      	movs	r3, #1
 8005cf0:	2160      	movs	r1, #96	; 0x60
 8005cf2:	6878      	ldr	r0, [r7, #4]
 8005cf4:	f000 f9a6 	bl	8006044 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData>
 8005cf8:	4603      	mov	r3, r0
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	d002      	beq.n	8005d04 <LIS2MDL_MAG_SetOutputDataRate+0x74>
    {
      return LIS2MDL_ERROR;
 8005cfe:	f04f 33ff 	mov.w	r3, #4294967295
 8005d02:	e022      	b.n	8005d4a <LIS2MDL_MAG_SetOutputDataRate+0xba>
    }

    /* Output data rate selection */
    reg_a.odr = new_odr;
 8005d04:	7bfb      	ldrb	r3, [r7, #15]
 8005d06:	f003 0303 	and.w	r3, r3, #3
 8005d0a:	b2da      	uxtb	r2, r3
 8005d0c:	7b3b      	ldrb	r3, [r7, #12]
 8005d0e:	f362 0383 	bfi	r3, r2, #2, #2
 8005d12:	733b      	strb	r3, [r7, #12]

    /* Write configuration to CFG_REG_A reg */
    if (LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData(pObj, LIS2MDL_CFG_REG_A, (uint8_t *)&reg_a, 1) != LIS2MDL_OK)
 8005d14:	f107 020c 	add.w	r2, r7, #12
 8005d18:	2301      	movs	r3, #1
 8005d1a:	2160      	movs	r1, #96	; 0x60
 8005d1c:	6878      	ldr	r0, [r7, #4]
 8005d1e:	f000 fad0 	bl	80062c2 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData>
 8005d22:	4603      	mov	r3, r0
 8005d24:	2b00      	cmp	r3, #0
 8005d26:	d00f      	beq.n	8005d48 <LIS2MDL_MAG_SetOutputDataRate+0xb8>
    {
      return LIS2MDL_ERROR;
 8005d28:	f04f 33ff 	mov.w	r3, #4294967295
 8005d2c:	e00d      	b.n	8005d4a <LIS2MDL_MAG_SetOutputDataRate+0xba>
    }
  }
  else
  {
    if (lis2mdl_data_rate_set(&(pObj->Ctx), new_odr) != LIS2MDL_OK)
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	3320      	adds	r3, #32
 8005d32:	7bfa      	ldrb	r2, [r7, #15]
 8005d34:	4611      	mov	r1, r2
 8005d36:	4618      	mov	r0, r3
 8005d38:	f000 fc37 	bl	80065aa <lis2mdl_data_rate_set>
 8005d3c:	4603      	mov	r3, r0
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	d002      	beq.n	8005d48 <LIS2MDL_MAG_SetOutputDataRate+0xb8>
    {
      return LIS2MDL_ERROR;
 8005d42:	f04f 33ff 	mov.w	r3, #4294967295
 8005d46:	e000      	b.n	8005d4a <LIS2MDL_MAG_SetOutputDataRate+0xba>
    }
  }

  return LIS2MDL_OK;
 8005d48:	2300      	movs	r3, #0
}
 8005d4a:	4618      	mov	r0, r3
 8005d4c:	3710      	adds	r7, #16
 8005d4e:	46bd      	mov	sp, r7
 8005d50:	bd80      	pop	{r7, pc}
 8005d52:	bf00      	nop
 8005d54:	42480000 	.word	0x42480000

08005d58 <LIS2MDL_MAG_GetFullScale>:
  * @param  pObj the device pObj
  * @param  FullScale pointer where the full scale is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_MAG_GetFullScale(LIS2MDL_Object_t *pObj, int32_t *FullScale)
{
 8005d58:	b480      	push	{r7}
 8005d5a:	b083      	sub	sp, #12
 8005d5c:	af00      	add	r7, sp, #0
 8005d5e:	6078      	str	r0, [r7, #4]
 8005d60:	6039      	str	r1, [r7, #0]
  *FullScale = 50;
 8005d62:	683b      	ldr	r3, [r7, #0]
 8005d64:	2232      	movs	r2, #50	; 0x32
 8005d66:	601a      	str	r2, [r3, #0]

  return LIS2MDL_OK;
 8005d68:	2300      	movs	r3, #0
}
 8005d6a:	4618      	mov	r0, r3
 8005d6c:	370c      	adds	r7, #12
 8005d6e:	46bd      	mov	sp, r7
 8005d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d74:	4770      	bx	lr

08005d76 <LIS2MDL_MAG_SetFullScale>:
  * @param  pObj the device pObj
  * @param  FullScale the functional full scale to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_MAG_SetFullScale(LIS2MDL_Object_t *pObj, int32_t FullScale)
{
 8005d76:	b480      	push	{r7}
 8005d78:	b083      	sub	sp, #12
 8005d7a:	af00      	add	r7, sp, #0
 8005d7c:	6078      	str	r0, [r7, #4]
 8005d7e:	6039      	str	r1, [r7, #0]
  return LIS2MDL_OK;
 8005d80:	2300      	movs	r3, #0
}
 8005d82:	4618      	mov	r0, r3
 8005d84:	370c      	adds	r7, #12
 8005d86:	46bd      	mov	sp, r7
 8005d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d8c:	4770      	bx	lr

08005d8e <LIS2MDL_MAG_GetAxesRaw>:
  * @param  pObj the device pObj
  * @param  Value pointer where the raw values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_MAG_GetAxesRaw(LIS2MDL_Object_t *pObj, LIS2MDL_AxesRaw_t *Value)
{
 8005d8e:	b580      	push	{r7, lr}
 8005d90:	b084      	sub	sp, #16
 8005d92:	af00      	add	r7, sp, #0
 8005d94:	6078      	str	r0, [r7, #4]
 8005d96:	6039      	str	r1, [r7, #0]
  lis2mdl_axis3bit16_t data_raw;

  /* Read raw data values. */
  if (lis2mdl_magnetic_raw_get(&(pObj->Ctx), data_raw.i16bit) != LIS2MDL_OK)
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	3320      	adds	r3, #32
 8005d9c:	f107 0208 	add.w	r2, r7, #8
 8005da0:	4611      	mov	r1, r2
 8005da2:	4618      	mov	r0, r3
 8005da4:	f000 fc86 	bl	80066b4 <lis2mdl_magnetic_raw_get>
 8005da8:	4603      	mov	r3, r0
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	d002      	beq.n	8005db4 <LIS2MDL_MAG_GetAxesRaw+0x26>
  {
    return LIS2MDL_ERROR;
 8005dae:	f04f 33ff 	mov.w	r3, #4294967295
 8005db2:	e00c      	b.n	8005dce <LIS2MDL_MAG_GetAxesRaw+0x40>
  }

  /* Format the data. */
  Value->x = data_raw.i16bit[0];
 8005db4:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8005db8:	683b      	ldr	r3, [r7, #0]
 8005dba:	801a      	strh	r2, [r3, #0]
  Value->y = data_raw.i16bit[1];
 8005dbc:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8005dc0:	683b      	ldr	r3, [r7, #0]
 8005dc2:	805a      	strh	r2, [r3, #2]
  Value->z = data_raw.i16bit[2];
 8005dc4:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8005dc8:	683b      	ldr	r3, [r7, #0]
 8005dca:	809a      	strh	r2, [r3, #4]

  return LIS2MDL_OK;
 8005dcc:	2300      	movs	r3, #0
}
 8005dce:	4618      	mov	r0, r3
 8005dd0:	3710      	adds	r7, #16
 8005dd2:	46bd      	mov	sp, r7
 8005dd4:	bd80      	pop	{r7, pc}

08005dd6 <LIS2MDL_MAG_GetAxes>:
  * @param  pObj the device pObj
  * @param  MagneticField pointer where the values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_MAG_GetAxes(LIS2MDL_Object_t *pObj, LIS2MDL_Axes_t *MagneticField)
{
 8005dd6:	b580      	push	{r7, lr}
 8005dd8:	b088      	sub	sp, #32
 8005dda:	af00      	add	r7, sp, #0
 8005ddc:	6078      	str	r0, [r7, #4]
 8005dde:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  lis2mdl_axis3bit16_t data_raw;
  float sensitivity;

  if (pObj->IO.BusType == LSM6DSOX_SENSORHUB_LIS2MDL_I2C_BUS) /* LSM6DSOX SensorHub with LIS2MDL example */
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	689b      	ldr	r3, [r3, #8]
 8005de4:	2b03      	cmp	r3, #3
 8005de6:	d137      	bne.n	8005e58 <LIS2MDL_MAG_GetAxes+0x82>
  {
    /* Read raw data values. */
    if (LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData(pObj, LIS2MDL_OUTX_L_REG, buff, 6) != LIS2MDL_OK)
 8005de8:	f107 0218 	add.w	r2, r7, #24
 8005dec:	2306      	movs	r3, #6
 8005dee:	2168      	movs	r1, #104	; 0x68
 8005df0:	6878      	ldr	r0, [r7, #4]
 8005df2:	f000 f927 	bl	8006044 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData>
 8005df6:	4603      	mov	r3, r0
 8005df8:	2b00      	cmp	r3, #0
 8005dfa:	d002      	beq.n	8005e02 <LIS2MDL_MAG_GetAxes+0x2c>
    {
      return LIS2MDL_ERROR;
 8005dfc:	f04f 33ff 	mov.w	r3, #4294967295
 8005e00:	e06f      	b.n	8005ee2 <LIS2MDL_MAG_GetAxes+0x10c>
    }
    data_raw.i16bit[0] = (int16_t)buff[1];
 8005e02:	7e7b      	ldrb	r3, [r7, #25]
 8005e04:	b21b      	sxth	r3, r3
 8005e06:	823b      	strh	r3, [r7, #16]
    data_raw.i16bit[0] = (data_raw.i16bit[0] * 256) + (int16_t)buff[0];
 8005e08:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8005e0c:	b29b      	uxth	r3, r3
 8005e0e:	021b      	lsls	r3, r3, #8
 8005e10:	b29a      	uxth	r2, r3
 8005e12:	7e3b      	ldrb	r3, [r7, #24]
 8005e14:	b29b      	uxth	r3, r3
 8005e16:	4413      	add	r3, r2
 8005e18:	b29b      	uxth	r3, r3
 8005e1a:	b21b      	sxth	r3, r3
 8005e1c:	823b      	strh	r3, [r7, #16]
    data_raw.i16bit[1] = (int16_t)buff[3];
 8005e1e:	7efb      	ldrb	r3, [r7, #27]
 8005e20:	b21b      	sxth	r3, r3
 8005e22:	827b      	strh	r3, [r7, #18]
    data_raw.i16bit[1] = (data_raw.i16bit[1] * 256) + (int16_t)buff[2];
 8005e24:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8005e28:	b29b      	uxth	r3, r3
 8005e2a:	021b      	lsls	r3, r3, #8
 8005e2c:	b29a      	uxth	r2, r3
 8005e2e:	7ebb      	ldrb	r3, [r7, #26]
 8005e30:	b29b      	uxth	r3, r3
 8005e32:	4413      	add	r3, r2
 8005e34:	b29b      	uxth	r3, r3
 8005e36:	b21b      	sxth	r3, r3
 8005e38:	827b      	strh	r3, [r7, #18]
    data_raw.i16bit[2] = (int16_t)buff[5];
 8005e3a:	7f7b      	ldrb	r3, [r7, #29]
 8005e3c:	b21b      	sxth	r3, r3
 8005e3e:	82bb      	strh	r3, [r7, #20]
    data_raw.i16bit[2] = (data_raw.i16bit[2] * 256) + (int16_t)buff[4];
 8005e40:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8005e44:	b29b      	uxth	r3, r3
 8005e46:	021b      	lsls	r3, r3, #8
 8005e48:	b29a      	uxth	r2, r3
 8005e4a:	7f3b      	ldrb	r3, [r7, #28]
 8005e4c:	b29b      	uxth	r3, r3
 8005e4e:	4413      	add	r3, r2
 8005e50:	b29b      	uxth	r3, r3
 8005e52:	b21b      	sxth	r3, r3
 8005e54:	82bb      	strh	r3, [r7, #20]
 8005e56:	e00d      	b.n	8005e74 <LIS2MDL_MAG_GetAxes+0x9e>
  }
  else
  {
    /* Read raw data values. */
    if (lis2mdl_magnetic_raw_get(&(pObj->Ctx), data_raw.i16bit) != LIS2MDL_OK)
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	3320      	adds	r3, #32
 8005e5c:	f107 0210 	add.w	r2, r7, #16
 8005e60:	4611      	mov	r1, r2
 8005e62:	4618      	mov	r0, r3
 8005e64:	f000 fc26 	bl	80066b4 <lis2mdl_magnetic_raw_get>
 8005e68:	4603      	mov	r3, r0
 8005e6a:	2b00      	cmp	r3, #0
 8005e6c:	d002      	beq.n	8005e74 <LIS2MDL_MAG_GetAxes+0x9e>
    {
      return LIS2MDL_ERROR;
 8005e6e:	f04f 33ff 	mov.w	r3, #4294967295
 8005e72:	e036      	b.n	8005ee2 <LIS2MDL_MAG_GetAxes+0x10c>
    }
  }

  /* Get LIS2MDL actual sensitivity. */
  (void)LIS2MDL_MAG_GetSensitivity(pObj, &sensitivity);
 8005e74:	f107 030c 	add.w	r3, r7, #12
 8005e78:	4619      	mov	r1, r3
 8005e7a:	6878      	ldr	r0, [r7, #4]
 8005e7c:	f7ff feb1 	bl	8005be2 <LIS2MDL_MAG_GetSensitivity>

  /* Calculate the data. */
  MagneticField->x = (int32_t)((float)((float)data_raw.i16bit[0] * sensitivity));
 8005e80:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8005e84:	ee07 3a90 	vmov	s15, r3
 8005e88:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005e8c:	edd7 7a03 	vldr	s15, [r7, #12]
 8005e90:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005e94:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005e98:	ee17 2a90 	vmov	r2, s15
 8005e9c:	683b      	ldr	r3, [r7, #0]
 8005e9e:	601a      	str	r2, [r3, #0]
  MagneticField->y = (int32_t)((float)((float)data_raw.i16bit[1] * sensitivity));
 8005ea0:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8005ea4:	ee07 3a90 	vmov	s15, r3
 8005ea8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005eac:	edd7 7a03 	vldr	s15, [r7, #12]
 8005eb0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005eb4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005eb8:	ee17 2a90 	vmov	r2, s15
 8005ebc:	683b      	ldr	r3, [r7, #0]
 8005ebe:	605a      	str	r2, [r3, #4]
  MagneticField->z = (int32_t)((float)((float)data_raw.i16bit[2] * sensitivity));
 8005ec0:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8005ec4:	ee07 3a90 	vmov	s15, r3
 8005ec8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005ecc:	edd7 7a03 	vldr	s15, [r7, #12]
 8005ed0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005ed4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005ed8:	ee17 2a90 	vmov	r2, s15
 8005edc:	683b      	ldr	r3, [r7, #0]
 8005ede:	609a      	str	r2, [r3, #8]

  return LIS2MDL_OK;
 8005ee0:	2300      	movs	r3, #0
}
 8005ee2:	4618      	mov	r0, r3
 8005ee4:	3720      	adds	r7, #32
 8005ee6:	46bd      	mov	sp, r7
 8005ee8:	bd80      	pop	{r7, pc}

08005eea <LIS2MDL_Write_Reg>:
  * @param  Reg address to be written
  * @param  Data value to be written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_Write_Reg(LIS2MDL_Object_t *pObj, uint8_t Reg, uint8_t Data)
{
 8005eea:	b580      	push	{r7, lr}
 8005eec:	b082      	sub	sp, #8
 8005eee:	af00      	add	r7, sp, #0
 8005ef0:	6078      	str	r0, [r7, #4]
 8005ef2:	460b      	mov	r3, r1
 8005ef4:	70fb      	strb	r3, [r7, #3]
 8005ef6:	4613      	mov	r3, r2
 8005ef8:	70bb      	strb	r3, [r7, #2]
  if (pObj->IO.BusType == LSM6DSOX_SENSORHUB_LIS2MDL_I2C_BUS) /* LSM6DSOX SensorHub with LIS2MDL example */
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	689b      	ldr	r3, [r3, #8]
 8005efe:	2b03      	cmp	r3, #3
 8005f00:	d10b      	bne.n	8005f1a <LIS2MDL_Write_Reg+0x30>
  {
    if (LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData(pObj, Reg, (uint8_t *)&Data, 1) != LIS2MDL_OK)
 8005f02:	1cba      	adds	r2, r7, #2
 8005f04:	78f9      	ldrb	r1, [r7, #3]
 8005f06:	2301      	movs	r3, #1
 8005f08:	6878      	ldr	r0, [r7, #4]
 8005f0a:	f000 f9da 	bl	80062c2 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData>
 8005f0e:	4603      	mov	r3, r0
 8005f10:	2b00      	cmp	r3, #0
 8005f12:	d010      	beq.n	8005f36 <LIS2MDL_Write_Reg+0x4c>
    {
      return LIS2MDL_ERROR;
 8005f14:	f04f 33ff 	mov.w	r3, #4294967295
 8005f18:	e00e      	b.n	8005f38 <LIS2MDL_Write_Reg+0x4e>
    }
  }
  else
  {
    if (lis2mdl_write_reg(&(pObj->Ctx), Reg, &Data, 1) != LIS2MDL_OK)
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	f103 0020 	add.w	r0, r3, #32
 8005f20:	1cba      	adds	r2, r7, #2
 8005f22:	78f9      	ldrb	r1, [r7, #3]
 8005f24:	2301      	movs	r3, #1
 8005f26:	f000 fb02 	bl	800652e <lis2mdl_write_reg>
 8005f2a:	4603      	mov	r3, r0
 8005f2c:	2b00      	cmp	r3, #0
 8005f2e:	d002      	beq.n	8005f36 <LIS2MDL_Write_Reg+0x4c>
    {
      return LIS2MDL_ERROR;
 8005f30:	f04f 33ff 	mov.w	r3, #4294967295
 8005f34:	e000      	b.n	8005f38 <LIS2MDL_Write_Reg+0x4e>
    }
  }

  return LIS2MDL_OK;
 8005f36:	2300      	movs	r3, #0
}
 8005f38:	4618      	mov	r0, r3
 8005f3a:	3708      	adds	r7, #8
 8005f3c:	46bd      	mov	sp, r7
 8005f3e:	bd80      	pop	{r7, pc}

08005f40 <ReadMagRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t ReadMagRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8005f40:	b590      	push	{r4, r7, lr}
 8005f42:	b087      	sub	sp, #28
 8005f44:	af00      	add	r7, sp, #0
 8005f46:	60f8      	str	r0, [r7, #12]
 8005f48:	607a      	str	r2, [r7, #4]
 8005f4a:	461a      	mov	r2, r3
 8005f4c:	460b      	mov	r3, r1
 8005f4e:	72fb      	strb	r3, [r7, #11]
 8005f50:	4613      	mov	r3, r2
 8005f52:	813b      	strh	r3, [r7, #8]
  LIS2MDL_Object_t *pObj = (LIS2MDL_Object_t *)Handle;
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	617b      	str	r3, [r7, #20]

  if (pObj->IO.BusType == LIS2MDL_I2C_BUS) /* I2C */
 8005f58:	697b      	ldr	r3, [r7, #20]
 8005f5a:	689b      	ldr	r3, [r3, #8]
 8005f5c:	2b00      	cmp	r3, #0
 8005f5e:	d10e      	bne.n	8005f7e <ReadMagRegWrap+0x3e>
  {
    /* Enable Multi-byte read */
    return pObj->IO.ReadReg(pObj->IO.Address, (Reg | 0x80U), pData, Length);
 8005f60:	697b      	ldr	r3, [r7, #20]
 8005f62:	695c      	ldr	r4, [r3, #20]
 8005f64:	697b      	ldr	r3, [r7, #20]
 8005f66:	7b1b      	ldrb	r3, [r3, #12]
 8005f68:	b298      	uxth	r0, r3
 8005f6a:	7afb      	ldrb	r3, [r7, #11]
 8005f6c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005f70:	b2db      	uxtb	r3, r3
 8005f72:	b299      	uxth	r1, r3
 8005f74:	893b      	ldrh	r3, [r7, #8]
 8005f76:	687a      	ldr	r2, [r7, #4]
 8005f78:	47a0      	blx	r4
 8005f7a:	4603      	mov	r3, r0
 8005f7c:	e01d      	b.n	8005fba <ReadMagRegWrap+0x7a>
  }
  else if (pObj->IO.BusType == LSM6DSOX_SENSORHUB_LIS2MDL_I2C_BUS) /* LSM6DSOX SensorHub with LIS2MDL example */
 8005f7e:	697b      	ldr	r3, [r7, #20]
 8005f80:	689b      	ldr	r3, [r3, #8]
 8005f82:	2b03      	cmp	r3, #3
 8005f84:	d10b      	bne.n	8005f9e <ReadMagRegWrap+0x5e>
  {
    return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 8005f86:	697b      	ldr	r3, [r7, #20]
 8005f88:	695c      	ldr	r4, [r3, #20]
 8005f8a:	697b      	ldr	r3, [r7, #20]
 8005f8c:	7b1b      	ldrb	r3, [r3, #12]
 8005f8e:	b298      	uxth	r0, r3
 8005f90:	7afb      	ldrb	r3, [r7, #11]
 8005f92:	b299      	uxth	r1, r3
 8005f94:	893b      	ldrh	r3, [r7, #8]
 8005f96:	687a      	ldr	r2, [r7, #4]
 8005f98:	47a0      	blx	r4
 8005f9a:	4603      	mov	r3, r0
 8005f9c:	e00d      	b.n	8005fba <ReadMagRegWrap+0x7a>
  }
  else   /* SPI 3-Wires or SPI 4-Wires */
  {
    /* Enable Multi-byte read */
    return pObj->IO.ReadReg(pObj->IO.Address, (Reg | 0x40U), pData, Length);
 8005f9e:	697b      	ldr	r3, [r7, #20]
 8005fa0:	695c      	ldr	r4, [r3, #20]
 8005fa2:	697b      	ldr	r3, [r7, #20]
 8005fa4:	7b1b      	ldrb	r3, [r3, #12]
 8005fa6:	b298      	uxth	r0, r3
 8005fa8:	7afb      	ldrb	r3, [r7, #11]
 8005faa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005fae:	b2db      	uxtb	r3, r3
 8005fb0:	b299      	uxth	r1, r3
 8005fb2:	893b      	ldrh	r3, [r7, #8]
 8005fb4:	687a      	ldr	r2, [r7, #4]
 8005fb6:	47a0      	blx	r4
 8005fb8:	4603      	mov	r3, r0
  }
}
 8005fba:	4618      	mov	r0, r3
 8005fbc:	371c      	adds	r7, #28
 8005fbe:	46bd      	mov	sp, r7
 8005fc0:	bd90      	pop	{r4, r7, pc}

08005fc2 <WriteMagRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t WriteMagRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8005fc2:	b590      	push	{r4, r7, lr}
 8005fc4:	b087      	sub	sp, #28
 8005fc6:	af00      	add	r7, sp, #0
 8005fc8:	60f8      	str	r0, [r7, #12]
 8005fca:	607a      	str	r2, [r7, #4]
 8005fcc:	461a      	mov	r2, r3
 8005fce:	460b      	mov	r3, r1
 8005fd0:	72fb      	strb	r3, [r7, #11]
 8005fd2:	4613      	mov	r3, r2
 8005fd4:	813b      	strh	r3, [r7, #8]
  LIS2MDL_Object_t *pObj = (LIS2MDL_Object_t *)Handle;
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	617b      	str	r3, [r7, #20]

  if (pObj->IO.BusType == LIS2MDL_I2C_BUS) /* I2C */
 8005fda:	697b      	ldr	r3, [r7, #20]
 8005fdc:	689b      	ldr	r3, [r3, #8]
 8005fde:	2b00      	cmp	r3, #0
 8005fe0:	d10e      	bne.n	8006000 <WriteMagRegWrap+0x3e>
  {
    /* Enable Multi-byte write */
    return pObj->IO.WriteReg(pObj->IO.Address, (Reg | 0x80U), pData, Length);
 8005fe2:	697b      	ldr	r3, [r7, #20]
 8005fe4:	691c      	ldr	r4, [r3, #16]
 8005fe6:	697b      	ldr	r3, [r7, #20]
 8005fe8:	7b1b      	ldrb	r3, [r3, #12]
 8005fea:	b298      	uxth	r0, r3
 8005fec:	7afb      	ldrb	r3, [r7, #11]
 8005fee:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005ff2:	b2db      	uxtb	r3, r3
 8005ff4:	b299      	uxth	r1, r3
 8005ff6:	893b      	ldrh	r3, [r7, #8]
 8005ff8:	687a      	ldr	r2, [r7, #4]
 8005ffa:	47a0      	blx	r4
 8005ffc:	4603      	mov	r3, r0
 8005ffe:	e01d      	b.n	800603c <WriteMagRegWrap+0x7a>
  }
  else if (pObj->IO.BusType == LSM6DSOX_SENSORHUB_LIS2MDL_I2C_BUS) /* LSM6DSOX SensorHub with LIS2MDL example */
 8006000:	697b      	ldr	r3, [r7, #20]
 8006002:	689b      	ldr	r3, [r3, #8]
 8006004:	2b03      	cmp	r3, #3
 8006006:	d10b      	bne.n	8006020 <WriteMagRegWrap+0x5e>
  {
    return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 8006008:	697b      	ldr	r3, [r7, #20]
 800600a:	691c      	ldr	r4, [r3, #16]
 800600c:	697b      	ldr	r3, [r7, #20]
 800600e:	7b1b      	ldrb	r3, [r3, #12]
 8006010:	b298      	uxth	r0, r3
 8006012:	7afb      	ldrb	r3, [r7, #11]
 8006014:	b299      	uxth	r1, r3
 8006016:	893b      	ldrh	r3, [r7, #8]
 8006018:	687a      	ldr	r2, [r7, #4]
 800601a:	47a0      	blx	r4
 800601c:	4603      	mov	r3, r0
 800601e:	e00d      	b.n	800603c <WriteMagRegWrap+0x7a>
  }
  else   /* SPI 3-Wires or SPI 4-Wires */
  {
    /* Enable Multi-byte write */
    return pObj->IO.WriteReg(pObj->IO.Address, (Reg | 0x40U), pData, Length);
 8006020:	697b      	ldr	r3, [r7, #20]
 8006022:	691c      	ldr	r4, [r3, #16]
 8006024:	697b      	ldr	r3, [r7, #20]
 8006026:	7b1b      	ldrb	r3, [r3, #12]
 8006028:	b298      	uxth	r0, r3
 800602a:	7afb      	ldrb	r3, [r7, #11]
 800602c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006030:	b2db      	uxtb	r3, r3
 8006032:	b299      	uxth	r1, r3
 8006034:	893b      	ldrh	r3, [r7, #8]
 8006036:	687a      	ldr	r2, [r7, #4]
 8006038:	47a0      	blx	r4
 800603a:	4603      	mov	r3, r0
  }
}
 800603c:	4618      	mov	r0, r3
 800603e:	371c      	adds	r7, #28
 8006040:	46bd      	mov	sp, r7
 8006042:	bd90      	pop	{r4, r7, pc}

08006044 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData>:
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData(LIS2MDL_Object_t *pObj, uint8_t Reg, uint8_t *pData,
                                                     uint16_t Length)
{
 8006044:	b580      	push	{r7, lr}
 8006046:	b08c      	sub	sp, #48	; 0x30
 8006048:	af00      	add	r7, sp, #0
 800604a:	60f8      	str	r0, [r7, #12]
 800604c:	607a      	str	r2, [r7, #4]
 800604e:	461a      	mov	r2, r3
 8006050:	460b      	mov	r3, r1
 8006052:	72fb      	strb	r3, [r7, #11]
 8006054:	4613      	mov	r3, r2
 8006056:	813b      	strh	r3, [r7, #8]
  uint8_t lsm6dsox_func_cfg_access = 0x01U;
 8006058:	2301      	movs	r3, #1
 800605a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  uint8_t shub_reg_access_en = 0x40U;
 800605e:	2340      	movs	r3, #64	; 0x40
 8006060:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
  uint8_t shub_reg_access_dis = 0x00U;
 8006064:	2300      	movs	r3, #0
 8006066:	f887 3020 	strb.w	r3, [r7, #32]
  uint8_t ext_sens_addr_read = LIS2MDL_I2C_ADD | 0x01U;
 800606a:	233d      	movs	r3, #61	; 0x3d
 800606c:	77fb      	strb	r3, [r7, #31]
  uint8_t slv0_add = 0x15U;
 800606e:	2315      	movs	r3, #21
 8006070:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
  uint8_t slv0_subadd = 0x16U;
 8006074:	2316      	movs	r3, #22
 8006076:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  uint8_t slave0_config = 0x17U;
 800607a:	2317      	movs	r3, #23
 800607c:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  uint8_t master_config = 0x14U;
 8006080:	2314      	movs	r3, #20
 8006082:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
  uint8_t write_once_i2c_en = 0x44U;
 8006086:	2344      	movs	r3, #68	; 0x44
 8006088:	77bb      	strb	r3, [r7, #30]
  uint8_t sensor_hub_1 = 0x02U;
 800608a:	2302      	movs	r3, #2
 800608c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  uint8_t status_master_mainpage = 0x39U;
 8006090:	2339      	movs	r3, #57	; 0x39
 8006092:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
  uint8_t sens_hub_endop = 0x01U;
 8006096:	2301      	movs	r3, #1
 8006098:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
  uint8_t lsm6dsox_outx_h_a = 0x29U;
 800609c:	2329      	movs	r3, #41	; 0x29
 800609e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint8_t lsm6dsox_status_reg = 0x1EU;
 80060a2:	231e      	movs	r3, #30
 80060a4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  uint8_t xlda = 0x01U;
 80060a8:	2301      	movs	r3, #1
 80060aa:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  uint8_t len = (uint8_t)Length;
 80060ae:	893b      	ldrh	r3, [r7, #8]
 80060b0:	b2db      	uxtb	r3, r3
 80060b2:	777b      	strb	r3, [r7, #29]
  uint8_t lsm6dsox_ctrl1_xl = 0x10U;
 80060b4:	2310      	movs	r3, #16
 80060b6:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  uint8_t lsm6dsox_xl_prev_odr;
  uint8_t lsm6dsox_xl_odr_off = 0x00U;
 80060ba:	2300      	movs	r3, #0
 80060bc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint8_t lsm6dsox_xl_odr_104hz = 0x40U;
 80060c0:	2340      	movs	r3, #64	; 0x40
 80060c2:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  uint8_t data;
  uint8_t data_array[6];

  /* Enable access to sensor hub registers */
  if (lis2mdl_write_reg(&(pObj->Ctx), lsm6dsox_func_cfg_access, &shub_reg_access_en, 1) != LIS2MDL_OK)
 80060c6:	68fb      	ldr	r3, [r7, #12]
 80060c8:	f103 0020 	add.w	r0, r3, #32
 80060cc:	f107 0221 	add.w	r2, r7, #33	; 0x21
 80060d0:	f897 102f 	ldrb.w	r1, [r7, #47]	; 0x2f
 80060d4:	2301      	movs	r3, #1
 80060d6:	f000 fa2a 	bl	800652e <lis2mdl_write_reg>
 80060da:	4603      	mov	r3, r0
 80060dc:	2b00      	cmp	r3, #0
 80060de:	d002      	beq.n	80060e6 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0xa2>
  {
    return LIS2MDL_ERROR;
 80060e0:	f04f 33ff 	mov.w	r3, #4294967295
 80060e4:	e0e9      	b.n	80062ba <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
  }

  /* Configure external device address, Enable read operation (rw_0 = 1) */
  if (lis2mdl_write_reg(&(pObj->Ctx), slv0_add, &ext_sens_addr_read, 1) != LIS2MDL_OK)
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	f103 0020 	add.w	r0, r3, #32
 80060ec:	f107 021f 	add.w	r2, r7, #31
 80060f0:	f897 102e 	ldrb.w	r1, [r7, #46]	; 0x2e
 80060f4:	2301      	movs	r3, #1
 80060f6:	f000 fa1a 	bl	800652e <lis2mdl_write_reg>
 80060fa:	4603      	mov	r3, r0
 80060fc:	2b00      	cmp	r3, #0
 80060fe:	d002      	beq.n	8006106 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0xc2>
  {
    return LIS2MDL_ERROR;
 8006100:	f04f 33ff 	mov.w	r3, #4294967295
 8006104:	e0d9      	b.n	80062ba <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
  }

  /* Configure address of the LIS2MDL register to be read */
  if (lis2mdl_write_reg(&(pObj->Ctx), slv0_subadd, &Reg, 1) != LIS2MDL_OK)
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	f103 0020 	add.w	r0, r3, #32
 800610c:	f107 020b 	add.w	r2, r7, #11
 8006110:	f897 102d 	ldrb.w	r1, [r7, #45]	; 0x2d
 8006114:	2301      	movs	r3, #1
 8006116:	f000 fa0a 	bl	800652e <lis2mdl_write_reg>
 800611a:	4603      	mov	r3, r0
 800611c:	2b00      	cmp	r3, #0
 800611e:	d002      	beq.n	8006126 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0xe2>
  {
    return LIS2MDL_ERROR;
 8006120:	f04f 33ff 	mov.w	r3, #4294967295
 8006124:	e0c9      	b.n	80062ba <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
  }

  /* Read required number of bytes (up to 6), SHUB_ODR = 104 Hz */
  if (lis2mdl_write_reg(&(pObj->Ctx), slave0_config, &len, 1) != LIS2MDL_OK)
 8006126:	68fb      	ldr	r3, [r7, #12]
 8006128:	f103 0020 	add.w	r0, r3, #32
 800612c:	f107 021d 	add.w	r2, r7, #29
 8006130:	f897 102c 	ldrb.w	r1, [r7, #44]	; 0x2c
 8006134:	2301      	movs	r3, #1
 8006136:	f000 f9fa 	bl	800652e <lis2mdl_write_reg>
 800613a:	4603      	mov	r3, r0
 800613c:	2b00      	cmp	r3, #0
 800613e:	d002      	beq.n	8006146 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x102>
  {
    return LIS2MDL_ERROR;
 8006140:	f04f 33ff 	mov.w	r3, #4294967295
 8006144:	e0b9      	b.n	80062ba <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
  }

  /* WRITE_ONCE is mandatory for read, I2C master enabled using slave 0, I2C pull-ups disabled */
  if (lis2mdl_write_reg(&(pObj->Ctx), master_config, &write_once_i2c_en, 1) != LIS2MDL_OK)
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	f103 0020 	add.w	r0, r3, #32
 800614c:	f107 021e 	add.w	r2, r7, #30
 8006150:	f897 102b 	ldrb.w	r1, [r7, #43]	; 0x2b
 8006154:	2301      	movs	r3, #1
 8006156:	f000 f9ea 	bl	800652e <lis2mdl_write_reg>
 800615a:	4603      	mov	r3, r0
 800615c:	2b00      	cmp	r3, #0
 800615e:	d002      	beq.n	8006166 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x122>
  {
    return LIS2MDL_ERROR;
 8006160:	f04f 33ff 	mov.w	r3, #4294967295
 8006164:	e0a9      	b.n	80062ba <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
  }

  /* Disable access to sensor hub registers */
  if (lis2mdl_write_reg(&(pObj->Ctx), lsm6dsox_func_cfg_access, &shub_reg_access_dis, 1) != LIS2MDL_OK)
 8006166:	68fb      	ldr	r3, [r7, #12]
 8006168:	f103 0020 	add.w	r0, r3, #32
 800616c:	f107 0220 	add.w	r2, r7, #32
 8006170:	f897 102f 	ldrb.w	r1, [r7, #47]	; 0x2f
 8006174:	2301      	movs	r3, #1
 8006176:	f000 f9da 	bl	800652e <lis2mdl_write_reg>
 800617a:	4603      	mov	r3, r0
 800617c:	2b00      	cmp	r3, #0
 800617e:	d002      	beq.n	8006186 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x142>
  {
    return LIS2MDL_ERROR;
 8006180:	f04f 33ff 	mov.w	r3, #4294967295
 8006184:	e099      	b.n	80062ba <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
  }

  /* Read LSM6DSOX ODR */
  if (lis2mdl_read_reg(&(pObj->Ctx), lsm6dsox_ctrl1_xl, &lsm6dsox_xl_prev_odr, 1) != LIS2MDL_OK)
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	f103 0020 	add.w	r0, r3, #32
 800618c:	f107 021c 	add.w	r2, r7, #28
 8006190:	f897 1024 	ldrb.w	r1, [r7, #36]	; 0x24
 8006194:	2301      	movs	r3, #1
 8006196:	f000 f9b2 	bl	80064fe <lis2mdl_read_reg>
 800619a:	4603      	mov	r3, r0
 800619c:	2b00      	cmp	r3, #0
 800619e:	d002      	beq.n	80061a6 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x162>
  {
    return LIS2MDL_ERROR;
 80061a0:	f04f 33ff 	mov.w	r3, #4294967295
 80061a4:	e089      	b.n	80062ba <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
  }

  /* Set XL_ODR_104HZ if the accelerometer is disabled */
  if (lsm6dsox_xl_prev_odr == lsm6dsox_xl_odr_off)
 80061a6:	7f3b      	ldrb	r3, [r7, #28]
 80061a8:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 80061ac:	429a      	cmp	r2, r3
 80061ae:	d102      	bne.n	80061b6 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x172>
  {
    lsm6dsox_xl_prev_odr = lsm6dsox_xl_odr_104hz;
 80061b0:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80061b4:	773b      	strb	r3, [r7, #28]
  }

  /* Enable accelerometer to trigger Sensor Hub operation */
  if (lis2mdl_write_reg(&(pObj->Ctx), lsm6dsox_ctrl1_xl, &lsm6dsox_xl_prev_odr, 1) != LIS2MDL_OK)
 80061b6:	68fb      	ldr	r3, [r7, #12]
 80061b8:	f103 0020 	add.w	r0, r3, #32
 80061bc:	f107 021c 	add.w	r2, r7, #28
 80061c0:	f897 1024 	ldrb.w	r1, [r7, #36]	; 0x24
 80061c4:	2301      	movs	r3, #1
 80061c6:	f000 f9b2 	bl	800652e <lis2mdl_write_reg>
 80061ca:	4603      	mov	r3, r0
 80061cc:	2b00      	cmp	r3, #0
 80061ce:	d002      	beq.n	80061d6 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x192>
  {
    return LIS2MDL_ERROR;
 80061d0:	f04f 33ff 	mov.w	r3, #4294967295
 80061d4:	e071      	b.n	80062ba <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
  }

  /* Read ACC data starting from LSM6DSOX OUTX_H_A register to clear accelerometer data-ready XLDA */
  if (lis2mdl_read_reg(&(pObj->Ctx), lsm6dsox_outx_h_a, data_array, 6) != LIS2MDL_OK)
 80061d6:	68fb      	ldr	r3, [r7, #12]
 80061d8:	f103 0020 	add.w	r0, r3, #32
 80061dc:	f107 0214 	add.w	r2, r7, #20
 80061e0:	f897 1027 	ldrb.w	r1, [r7, #39]	; 0x27
 80061e4:	2306      	movs	r3, #6
 80061e6:	f000 f98a 	bl	80064fe <lis2mdl_read_reg>
 80061ea:	4603      	mov	r3, r0
 80061ec:	2b00      	cmp	r3, #0
 80061ee:	d002      	beq.n	80061f6 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x1b2>
  {
    return LIS2MDL_ERROR;
 80061f0:	f04f 33ff 	mov.w	r3, #4294967295
 80061f4:	e061      	b.n	80062ba <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
  }

  /* Poll LSM6DSOX LSM6DSOX_STATUS_REG until XLDA = 1 (Wait for sensor hub trigger) */
  do
  {
    if (lis2mdl_read_reg(&(pObj->Ctx), lsm6dsox_status_reg, &data, 1) != LIS2MDL_OK)
 80061f6:	68fb      	ldr	r3, [r7, #12]
 80061f8:	f103 0020 	add.w	r0, r3, #32
 80061fc:	f107 021b 	add.w	r2, r7, #27
 8006200:	f897 1026 	ldrb.w	r1, [r7, #38]	; 0x26
 8006204:	2301      	movs	r3, #1
 8006206:	f000 f97a 	bl	80064fe <lis2mdl_read_reg>
 800620a:	4603      	mov	r3, r0
 800620c:	2b00      	cmp	r3, #0
 800620e:	d002      	beq.n	8006216 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x1d2>
    {
      return LIS2MDL_ERROR;
 8006210:	f04f 33ff 	mov.w	r3, #4294967295
 8006214:	e051      	b.n	80062ba <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
    }
  } while ((data & xlda) != xlda);
 8006216:	7efa      	ldrb	r2, [r7, #27]
 8006218:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800621c:	4013      	ands	r3, r2
 800621e:	b2db      	uxtb	r3, r3
 8006220:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
 8006224:	429a      	cmp	r2, r3
 8006226:	d1e6      	bne.n	80061f6 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x1b2>

  /* Poll LSM6DSOX SensorHub SENS_HUB_ENDOP bit in STATUS_MASTER_MAINPAGE reg until the end of SW write operations */
  do
  {
    if (lis2mdl_read_reg(&(pObj->Ctx), status_master_mainpage, &data, 1) != LIS2MDL_OK)
 8006228:	68fb      	ldr	r3, [r7, #12]
 800622a:	f103 0020 	add.w	r0, r3, #32
 800622e:	f107 021b 	add.w	r2, r7, #27
 8006232:	f897 1029 	ldrb.w	r1, [r7, #41]	; 0x29
 8006236:	2301      	movs	r3, #1
 8006238:	f000 f961 	bl	80064fe <lis2mdl_read_reg>
 800623c:	4603      	mov	r3, r0
 800623e:	2b00      	cmp	r3, #0
 8006240:	d002      	beq.n	8006248 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x204>
    {
      return LIS2MDL_ERROR;
 8006242:	f04f 33ff 	mov.w	r3, #4294967295
 8006246:	e038      	b.n	80062ba <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
    }
  } while ((data & sens_hub_endop) != sens_hub_endop);
 8006248:	7efa      	ldrb	r2, [r7, #27]
 800624a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800624e:	4013      	ands	r3, r2
 8006250:	b2db      	uxtb	r3, r3
 8006252:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8006256:	429a      	cmp	r2, r3
 8006258:	d1e6      	bne.n	8006228 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x1e4>

  /* Enable access to sensor hub registers */
  if (lis2mdl_write_reg(&(pObj->Ctx), lsm6dsox_func_cfg_access, &shub_reg_access_en, 1) != LIS2MDL_OK)
 800625a:	68fb      	ldr	r3, [r7, #12]
 800625c:	f103 0020 	add.w	r0, r3, #32
 8006260:	f107 0221 	add.w	r2, r7, #33	; 0x21
 8006264:	f897 102f 	ldrb.w	r1, [r7, #47]	; 0x2f
 8006268:	2301      	movs	r3, #1
 800626a:	f000 f960 	bl	800652e <lis2mdl_write_reg>
 800626e:	4603      	mov	r3, r0
 8006270:	2b00      	cmp	r3, #0
 8006272:	d002      	beq.n	800627a <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x236>
  {
    return LIS2MDL_ERROR;
 8006274:	f04f 33ff 	mov.w	r3, #4294967295
 8006278:	e01f      	b.n	80062ba <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
  }

  /* Read data from LSM6DSOX SensorHub regs containing values from required LIS2MDL regs */
  if (lis2mdl_read_reg(&(pObj->Ctx), sensor_hub_1, pData, Length) != LIS2MDL_OK)
 800627a:	68fb      	ldr	r3, [r7, #12]
 800627c:	f103 0020 	add.w	r0, r3, #32
 8006280:	893b      	ldrh	r3, [r7, #8]
 8006282:	f897 102a 	ldrb.w	r1, [r7, #42]	; 0x2a
 8006286:	687a      	ldr	r2, [r7, #4]
 8006288:	f000 f939 	bl	80064fe <lis2mdl_read_reg>
 800628c:	4603      	mov	r3, r0
 800628e:	2b00      	cmp	r3, #0
 8006290:	d002      	beq.n	8006298 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x254>
  {
    return LIS2MDL_ERROR;
 8006292:	f04f 33ff 	mov.w	r3, #4294967295
 8006296:	e010      	b.n	80062ba <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
  }

  /* Disable access to sensor hub registers */
  if (lis2mdl_write_reg(&(pObj->Ctx), lsm6dsox_func_cfg_access, &shub_reg_access_dis, 1) != LIS2MDL_OK)
 8006298:	68fb      	ldr	r3, [r7, #12]
 800629a:	f103 0020 	add.w	r0, r3, #32
 800629e:	f107 0220 	add.w	r2, r7, #32
 80062a2:	f897 102f 	ldrb.w	r1, [r7, #47]	; 0x2f
 80062a6:	2301      	movs	r3, #1
 80062a8:	f000 f941 	bl	800652e <lis2mdl_write_reg>
 80062ac:	4603      	mov	r3, r0
 80062ae:	2b00      	cmp	r3, #0
 80062b0:	d002      	beq.n	80062b8 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x274>
  {
    return LIS2MDL_ERROR;
 80062b2:	f04f 33ff 	mov.w	r3, #4294967295
 80062b6:	e000      	b.n	80062ba <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
  }

  return LIS2MDL_OK;
 80062b8:	2300      	movs	r3, #0
}
 80062ba:	4618      	mov	r0, r3
 80062bc:	3730      	adds	r7, #48	; 0x30
 80062be:	46bd      	mov	sp, r7
 80062c0:	bd80      	pop	{r7, pc}

080062c2 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData>:
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData(LIS2MDL_Object_t *pObj, uint8_t Reg, uint8_t *pData,
                                                      uint16_t Length)
{
 80062c2:	b580      	push	{r7, lr}
 80062c4:	b08c      	sub	sp, #48	; 0x30
 80062c6:	af00      	add	r7, sp, #0
 80062c8:	60f8      	str	r0, [r7, #12]
 80062ca:	607a      	str	r2, [r7, #4]
 80062cc:	461a      	mov	r2, r3
 80062ce:	460b      	mov	r3, r1
 80062d0:	72fb      	strb	r3, [r7, #11]
 80062d2:	4613      	mov	r3, r2
 80062d4:	813b      	strh	r3, [r7, #8]
  uint8_t lsm6dsox_func_cfg_access = 0x01U;
 80062d6:	2301      	movs	r3, #1
 80062d8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  uint8_t shub_reg_access_en = 0x40U;
 80062dc:	2340      	movs	r3, #64	; 0x40
 80062de:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
  uint8_t shub_reg_access_dis = 0x00U;
 80062e2:	2300      	movs	r3, #0
 80062e4:	f887 3020 	strb.w	r3, [r7, #32]
  uint8_t ext_sens_addr_write = LIS2MDL_I2C_ADD & 0xFEU;
 80062e8:	233c      	movs	r3, #60	; 0x3c
 80062ea:	77fb      	strb	r3, [r7, #31]
  uint8_t slv0_add = 0x15U;
 80062ec:	2315      	movs	r3, #21
 80062ee:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
  uint8_t slv0_subadd = 0x16U;
 80062f2:	2316      	movs	r3, #22
 80062f4:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  uint8_t slave0_config = 0x17U;
 80062f8:	2317      	movs	r3, #23
 80062fa:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  uint8_t shub_odr_104 = 0x00U;
 80062fe:	2300      	movs	r3, #0
 8006300:	77bb      	strb	r3, [r7, #30]
  uint8_t master_config = 0x14U;
 8006302:	2314      	movs	r3, #20
 8006304:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
  uint8_t write_once_i2c_en = 0x44U;
 8006308:	2344      	movs	r3, #68	; 0x44
 800630a:	777b      	strb	r3, [r7, #29]
  uint8_t status_master_mainpage = 0x39U;
 800630c:	2339      	movs	r3, #57	; 0x39
 800630e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  uint8_t wr_once_done = 0x80U;
 8006312:	2380      	movs	r3, #128	; 0x80
 8006314:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
  uint8_t lsm6dsox_outx_h_a = 0x29U;
 8006318:	2329      	movs	r3, #41	; 0x29
 800631a:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
  uint8_t lsm6dsox_status_reg = 0x1EU;
 800631e:	231e      	movs	r3, #30
 8006320:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint8_t xlda = 0x01U;
 8006324:	2301      	movs	r3, #1
 8006326:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  uint8_t lsm6dsox_ctrl1_xl = 0x10U;
 800632a:	2310      	movs	r3, #16
 800632c:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  uint8_t lsm6dsox_xl_prev_odr;
  uint8_t lsm6dsox_xl_odr_off = 0x00U;
 8006330:	2300      	movs	r3, #0
 8006332:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  uint8_t lsm6dsox_xl_odr_104hz = 0x40U;
 8006336:	2340      	movs	r3, #64	; 0x40
 8006338:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint8_t datawrite_slv0 = 0x0EU;
 800633c:	230e      	movs	r3, #14
 800633e:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  uint8_t data;
  uint8_t data_array[6];

  /* Enable access to sensor hub registers */
  if (lis2mdl_write_reg(&(pObj->Ctx), lsm6dsox_func_cfg_access, &shub_reg_access_en, 1) != LIS2MDL_OK)
 8006342:	68fb      	ldr	r3, [r7, #12]
 8006344:	f103 0020 	add.w	r0, r3, #32
 8006348:	f107 0221 	add.w	r2, r7, #33	; 0x21
 800634c:	f897 102f 	ldrb.w	r1, [r7, #47]	; 0x2f
 8006350:	2301      	movs	r3, #1
 8006352:	f000 f8ec 	bl	800652e <lis2mdl_write_reg>
 8006356:	4603      	mov	r3, r0
 8006358:	2b00      	cmp	r3, #0
 800635a:	d002      	beq.n	8006362 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0xa0>
  {
    return LIS2MDL_ERROR;
 800635c:	f04f 33ff 	mov.w	r3, #4294967295
 8006360:	e0c9      	b.n	80064f6 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x234>
  }

  /* Configure external device address, Enable write operation (rw_0 = 0) */
  if (lis2mdl_write_reg(&(pObj->Ctx), slv0_add, &ext_sens_addr_write, 1) != LIS2MDL_OK)
 8006362:	68fb      	ldr	r3, [r7, #12]
 8006364:	f103 0020 	add.w	r0, r3, #32
 8006368:	f107 021f 	add.w	r2, r7, #31
 800636c:	f897 102e 	ldrb.w	r1, [r7, #46]	; 0x2e
 8006370:	2301      	movs	r3, #1
 8006372:	f000 f8dc 	bl	800652e <lis2mdl_write_reg>
 8006376:	4603      	mov	r3, r0
 8006378:	2b00      	cmp	r3, #0
 800637a:	d002      	beq.n	8006382 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0xc0>
  {
    return LIS2MDL_ERROR;
 800637c:	f04f 33ff 	mov.w	r3, #4294967295
 8006380:	e0b9      	b.n	80064f6 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x234>
  }

  /* Configure address of the LIS2MDL register to be written to */
  if (lis2mdl_write_reg(&(pObj->Ctx), slv0_subadd, &Reg, 1) != LIS2MDL_OK)
 8006382:	68fb      	ldr	r3, [r7, #12]
 8006384:	f103 0020 	add.w	r0, r3, #32
 8006388:	f107 020b 	add.w	r2, r7, #11
 800638c:	f897 102d 	ldrb.w	r1, [r7, #45]	; 0x2d
 8006390:	2301      	movs	r3, #1
 8006392:	f000 f8cc 	bl	800652e <lis2mdl_write_reg>
 8006396:	4603      	mov	r3, r0
 8006398:	2b00      	cmp	r3, #0
 800639a:	d002      	beq.n	80063a2 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0xe0>
  {
    return LIS2MDL_ERROR;
 800639c:	f04f 33ff 	mov.w	r3, #4294967295
 80063a0:	e0a9      	b.n	80064f6 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x234>
  }

  /* Set SHUB_ODR = 104 Hz */
  if (lis2mdl_write_reg(&(pObj->Ctx), slave0_config, &shub_odr_104, 1) != LIS2MDL_OK)
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	f103 0020 	add.w	r0, r3, #32
 80063a8:	f107 021e 	add.w	r2, r7, #30
 80063ac:	f897 102c 	ldrb.w	r1, [r7, #44]	; 0x2c
 80063b0:	2301      	movs	r3, #1
 80063b2:	f000 f8bc 	bl	800652e <lis2mdl_write_reg>
 80063b6:	4603      	mov	r3, r0
 80063b8:	2b00      	cmp	r3, #0
 80063ba:	d002      	beq.n	80063c2 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x100>
  {
    return LIS2MDL_ERROR;
 80063bc:	f04f 33ff 	mov.w	r3, #4294967295
 80063c0:	e099      	b.n	80064f6 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x234>
  }

  /* Store data to be written to LIS2MDL in LSM6DSOX SH reg */
  if (lis2mdl_write_reg(&(pObj->Ctx), datawrite_slv0, pData, 1) != LIS2MDL_OK)
 80063c2:	68fb      	ldr	r3, [r7, #12]
 80063c4:	f103 0020 	add.w	r0, r3, #32
 80063c8:	f897 1022 	ldrb.w	r1, [r7, #34]	; 0x22
 80063cc:	2301      	movs	r3, #1
 80063ce:	687a      	ldr	r2, [r7, #4]
 80063d0:	f000 f8ad 	bl	800652e <lis2mdl_write_reg>
 80063d4:	4603      	mov	r3, r0
 80063d6:	2b00      	cmp	r3, #0
 80063d8:	d002      	beq.n	80063e0 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x11e>
  {
    return LIS2MDL_ERROR;
 80063da:	f04f 33ff 	mov.w	r3, #4294967295
 80063de:	e08a      	b.n	80064f6 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x234>
  }

  /* WRITE_ONCE enabled for single write, I2C master enabled using slave 0, I2C pull-ups disabled */
  if (lis2mdl_write_reg(&(pObj->Ctx), master_config, &write_once_i2c_en, 1) != LIS2MDL_OK)
 80063e0:	68fb      	ldr	r3, [r7, #12]
 80063e2:	f103 0020 	add.w	r0, r3, #32
 80063e6:	f107 021d 	add.w	r2, r7, #29
 80063ea:	f897 102b 	ldrb.w	r1, [r7, #43]	; 0x2b
 80063ee:	2301      	movs	r3, #1
 80063f0:	f000 f89d 	bl	800652e <lis2mdl_write_reg>
 80063f4:	4603      	mov	r3, r0
 80063f6:	2b00      	cmp	r3, #0
 80063f8:	d002      	beq.n	8006400 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x13e>
  {
    return LIS2MDL_ERROR;
 80063fa:	f04f 33ff 	mov.w	r3, #4294967295
 80063fe:	e07a      	b.n	80064f6 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x234>
  }

  /* Disable access to sensor hub registers */
  if (lis2mdl_write_reg(&(pObj->Ctx), lsm6dsox_func_cfg_access, &shub_reg_access_dis, 1) != LIS2MDL_OK)
 8006400:	68fb      	ldr	r3, [r7, #12]
 8006402:	f103 0020 	add.w	r0, r3, #32
 8006406:	f107 0220 	add.w	r2, r7, #32
 800640a:	f897 102f 	ldrb.w	r1, [r7, #47]	; 0x2f
 800640e:	2301      	movs	r3, #1
 8006410:	f000 f88d 	bl	800652e <lis2mdl_write_reg>
 8006414:	4603      	mov	r3, r0
 8006416:	2b00      	cmp	r3, #0
 8006418:	d002      	beq.n	8006420 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x15e>
  {
    return LIS2MDL_ERROR;
 800641a:	f04f 33ff 	mov.w	r3, #4294967295
 800641e:	e06a      	b.n	80064f6 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x234>
  }

  /* Read LSM6DSOX ODR */
  if (lis2mdl_read_reg(&(pObj->Ctx), lsm6dsox_ctrl1_xl, &lsm6dsox_xl_prev_odr, 1) != LIS2MDL_OK)
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	f103 0020 	add.w	r0, r3, #32
 8006426:	f107 021c 	add.w	r2, r7, #28
 800642a:	f897 1025 	ldrb.w	r1, [r7, #37]	; 0x25
 800642e:	2301      	movs	r3, #1
 8006430:	f000 f865 	bl	80064fe <lis2mdl_read_reg>
 8006434:	4603      	mov	r3, r0
 8006436:	2b00      	cmp	r3, #0
 8006438:	d002      	beq.n	8006440 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x17e>
  {
    return LIS2MDL_ERROR;
 800643a:	f04f 33ff 	mov.w	r3, #4294967295
 800643e:	e05a      	b.n	80064f6 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x234>
  }

  /* Set XL_ODR_104HZ if the accelerometer is disabled */
  if (lsm6dsox_xl_prev_odr == lsm6dsox_xl_odr_off)
 8006440:	7f3b      	ldrb	r3, [r7, #28]
 8006442:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8006446:	429a      	cmp	r2, r3
 8006448:	d102      	bne.n	8006450 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x18e>
  {
    lsm6dsox_xl_prev_odr = lsm6dsox_xl_odr_104hz;
 800644a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800644e:	773b      	strb	r3, [r7, #28]
  }

  /* Enable accelerometer to trigger Sensor Hub operation */
  if (lis2mdl_write_reg(&(pObj->Ctx), lsm6dsox_ctrl1_xl, &lsm6dsox_xl_prev_odr, 1) != LIS2MDL_OK)
 8006450:	68fb      	ldr	r3, [r7, #12]
 8006452:	f103 0020 	add.w	r0, r3, #32
 8006456:	f107 021c 	add.w	r2, r7, #28
 800645a:	f897 1025 	ldrb.w	r1, [r7, #37]	; 0x25
 800645e:	2301      	movs	r3, #1
 8006460:	f000 f865 	bl	800652e <lis2mdl_write_reg>
 8006464:	4603      	mov	r3, r0
 8006466:	2b00      	cmp	r3, #0
 8006468:	d002      	beq.n	8006470 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x1ae>
  {
    return LIS2MDL_ERROR;
 800646a:	f04f 33ff 	mov.w	r3, #4294967295
 800646e:	e042      	b.n	80064f6 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x234>
  }

  /* Read ACC data starting from LSM6DSOX OUTX_H_A register to clear accelerometer data-ready XLDA */
  if (lis2mdl_read_reg(&(pObj->Ctx), lsm6dsox_outx_h_a, data_array, 6) != LIS2MDL_OK)
 8006470:	68fb      	ldr	r3, [r7, #12]
 8006472:	f103 0020 	add.w	r0, r3, #32
 8006476:	f107 0214 	add.w	r2, r7, #20
 800647a:	f897 1028 	ldrb.w	r1, [r7, #40]	; 0x28
 800647e:	2306      	movs	r3, #6
 8006480:	f000 f83d 	bl	80064fe <lis2mdl_read_reg>
 8006484:	4603      	mov	r3, r0
 8006486:	2b00      	cmp	r3, #0
 8006488:	d002      	beq.n	8006490 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x1ce>
  {
    return LIS2MDL_ERROR;
 800648a:	f04f 33ff 	mov.w	r3, #4294967295
 800648e:	e032      	b.n	80064f6 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x234>
  }

  /* Poll LSM6DSOX LSM6DSOX_STATUS_REG until XLDA = 1 (Wait for sensor hub trigger) */
  do
  {
    if (lis2mdl_read_reg(&(pObj->Ctx), lsm6dsox_status_reg, &data, 1) != LIS2MDL_OK)
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	f103 0020 	add.w	r0, r3, #32
 8006496:	f107 021b 	add.w	r2, r7, #27
 800649a:	f897 1027 	ldrb.w	r1, [r7, #39]	; 0x27
 800649e:	2301      	movs	r3, #1
 80064a0:	f000 f82d 	bl	80064fe <lis2mdl_read_reg>
 80064a4:	4603      	mov	r3, r0
 80064a6:	2b00      	cmp	r3, #0
 80064a8:	d002      	beq.n	80064b0 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x1ee>
    {
      return LIS2MDL_ERROR;
 80064aa:	f04f 33ff 	mov.w	r3, #4294967295
 80064ae:	e022      	b.n	80064f6 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x234>
    }
  } while ((data & xlda) != xlda);
 80064b0:	7efa      	ldrb	r2, [r7, #27]
 80064b2:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80064b6:	4013      	ands	r3, r2
 80064b8:	b2db      	uxtb	r3, r3
 80064ba:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 80064be:	429a      	cmp	r2, r3
 80064c0:	d1e6      	bne.n	8006490 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x1ce>

  /* Poll LSM6DSOX SensorHub WR_ONCE_DONE bit in STATUS_MASTER_MAINPAGE reg until the end of SW write operations */
  do
  {
    if (lis2mdl_read_reg(&(pObj->Ctx), status_master_mainpage, &data, 1) != LIS2MDL_OK)
 80064c2:	68fb      	ldr	r3, [r7, #12]
 80064c4:	f103 0020 	add.w	r0, r3, #32
 80064c8:	f107 021b 	add.w	r2, r7, #27
 80064cc:	f897 102a 	ldrb.w	r1, [r7, #42]	; 0x2a
 80064d0:	2301      	movs	r3, #1
 80064d2:	f000 f814 	bl	80064fe <lis2mdl_read_reg>
 80064d6:	4603      	mov	r3, r0
 80064d8:	2b00      	cmp	r3, #0
 80064da:	d002      	beq.n	80064e2 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x220>
    {
      return LIS2MDL_ERROR;
 80064dc:	f04f 33ff 	mov.w	r3, #4294967295
 80064e0:	e009      	b.n	80064f6 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x234>
    }
  } while ((data & wr_once_done) != wr_once_done);
 80064e2:	7efa      	ldrb	r2, [r7, #27]
 80064e4:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 80064e8:	4013      	ands	r3, r2
 80064ea:	b2db      	uxtb	r3, r3
 80064ec:	f897 2029 	ldrb.w	r2, [r7, #41]	; 0x29
 80064f0:	429a      	cmp	r2, r3
 80064f2:	d1e6      	bne.n	80064c2 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x200>

  return LIS2MDL_OK;
 80064f4:	2300      	movs	r3, #0
}
 80064f6:	4618      	mov	r0, r3
 80064f8:	3730      	adds	r7, #48	; 0x30
 80064fa:	46bd      	mov	sp, r7
 80064fc:	bd80      	pop	{r7, pc}

080064fe <lis2mdl_read_reg>:
  *
  */
int32_t lis2mdl_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                         uint8_t *data,
                         uint16_t len)
{
 80064fe:	b590      	push	{r4, r7, lr}
 8006500:	b087      	sub	sp, #28
 8006502:	af00      	add	r7, sp, #0
 8006504:	60f8      	str	r0, [r7, #12]
 8006506:	607a      	str	r2, [r7, #4]
 8006508:	461a      	mov	r2, r3
 800650a:	460b      	mov	r3, r1
 800650c:	72fb      	strb	r3, [r7, #11]
 800650e:	4613      	mov	r3, r2
 8006510:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8006512:	68fb      	ldr	r3, [r7, #12]
 8006514:	685c      	ldr	r4, [r3, #4]
 8006516:	68fb      	ldr	r3, [r7, #12]
 8006518:	68d8      	ldr	r0, [r3, #12]
 800651a:	893b      	ldrh	r3, [r7, #8]
 800651c:	7af9      	ldrb	r1, [r7, #11]
 800651e:	687a      	ldr	r2, [r7, #4]
 8006520:	47a0      	blx	r4
 8006522:	6178      	str	r0, [r7, #20]

  return ret;
 8006524:	697b      	ldr	r3, [r7, #20]
}
 8006526:	4618      	mov	r0, r3
 8006528:	371c      	adds	r7, #28
 800652a:	46bd      	mov	sp, r7
 800652c:	bd90      	pop	{r4, r7, pc}

0800652e <lis2mdl_write_reg>:
  *
  */
int32_t lis2mdl_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                          uint8_t *data,
                          uint16_t len)
{
 800652e:	b590      	push	{r4, r7, lr}
 8006530:	b087      	sub	sp, #28
 8006532:	af00      	add	r7, sp, #0
 8006534:	60f8      	str	r0, [r7, #12]
 8006536:	607a      	str	r2, [r7, #4]
 8006538:	461a      	mov	r2, r3
 800653a:	460b      	mov	r3, r1
 800653c:	72fb      	strb	r3, [r7, #11]
 800653e:	4613      	mov	r3, r2
 8006540:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8006542:	68fb      	ldr	r3, [r7, #12]
 8006544:	681c      	ldr	r4, [r3, #0]
 8006546:	68fb      	ldr	r3, [r7, #12]
 8006548:	68d8      	ldr	r0, [r3, #12]
 800654a:	893b      	ldrh	r3, [r7, #8]
 800654c:	7af9      	ldrb	r1, [r7, #11]
 800654e:	687a      	ldr	r2, [r7, #4]
 8006550:	47a0      	blx	r4
 8006552:	6178      	str	r0, [r7, #20]

  return ret;
 8006554:	697b      	ldr	r3, [r7, #20]
}
 8006556:	4618      	mov	r0, r3
 8006558:	371c      	adds	r7, #28
 800655a:	46bd      	mov	sp, r7
 800655c:	bd90      	pop	{r4, r7, pc}

0800655e <lis2mdl_operating_mode_set>:
  * @retval        interface status.(MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2mdl_operating_mode_set(stmdev_ctx_t *ctx,
                                   lis2mdl_md_t val)
{
 800655e:	b580      	push	{r7, lr}
 8006560:	b084      	sub	sp, #16
 8006562:	af00      	add	r7, sp, #0
 8006564:	6078      	str	r0, [r7, #4]
 8006566:	460b      	mov	r3, r1
 8006568:	70fb      	strb	r3, [r7, #3]
  lis2mdl_cfg_reg_a_t reg;
  int32_t ret;

  ret = lis2mdl_read_reg(ctx, LIS2MDL_CFG_REG_A, (uint8_t *)&reg, 1);
 800656a:	f107 0208 	add.w	r2, r7, #8
 800656e:	2301      	movs	r3, #1
 8006570:	2160      	movs	r1, #96	; 0x60
 8006572:	6878      	ldr	r0, [r7, #4]
 8006574:	f7ff ffc3 	bl	80064fe <lis2mdl_read_reg>
 8006578:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 800657a:	68fb      	ldr	r3, [r7, #12]
 800657c:	2b00      	cmp	r3, #0
 800657e:	d10f      	bne.n	80065a0 <lis2mdl_operating_mode_set+0x42>
  {
    reg.md = (uint8_t)val;
 8006580:	78fb      	ldrb	r3, [r7, #3]
 8006582:	f003 0303 	and.w	r3, r3, #3
 8006586:	b2da      	uxtb	r2, r3
 8006588:	7a3b      	ldrb	r3, [r7, #8]
 800658a:	f362 0301 	bfi	r3, r2, #0, #2
 800658e:	723b      	strb	r3, [r7, #8]
    ret = lis2mdl_write_reg(ctx, LIS2MDL_CFG_REG_A, (uint8_t *)&reg, 1);
 8006590:	f107 0208 	add.w	r2, r7, #8
 8006594:	2301      	movs	r3, #1
 8006596:	2160      	movs	r1, #96	; 0x60
 8006598:	6878      	ldr	r0, [r7, #4]
 800659a:	f7ff ffc8 	bl	800652e <lis2mdl_write_reg>
 800659e:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80065a0:	68fb      	ldr	r3, [r7, #12]
}
 80065a2:	4618      	mov	r0, r3
 80065a4:	3710      	adds	r7, #16
 80065a6:	46bd      	mov	sp, r7
 80065a8:	bd80      	pop	{r7, pc}

080065aa <lis2mdl_data_rate_set>:
  * @param  val   change the values of odr in reg CFG_REG_A
  * @retval       interface status.(MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2mdl_data_rate_set(stmdev_ctx_t *ctx, lis2mdl_odr_t val)
{
 80065aa:	b580      	push	{r7, lr}
 80065ac:	b084      	sub	sp, #16
 80065ae:	af00      	add	r7, sp, #0
 80065b0:	6078      	str	r0, [r7, #4]
 80065b2:	460b      	mov	r3, r1
 80065b4:	70fb      	strb	r3, [r7, #3]
  lis2mdl_cfg_reg_a_t reg;
  int32_t ret;

  ret = lis2mdl_read_reg(ctx, LIS2MDL_CFG_REG_A, (uint8_t *)&reg, 1);
 80065b6:	f107 0208 	add.w	r2, r7, #8
 80065ba:	2301      	movs	r3, #1
 80065bc:	2160      	movs	r1, #96	; 0x60
 80065be:	6878      	ldr	r0, [r7, #4]
 80065c0:	f7ff ff9d 	bl	80064fe <lis2mdl_read_reg>
 80065c4:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	2b00      	cmp	r3, #0
 80065ca:	d10f      	bne.n	80065ec <lis2mdl_data_rate_set+0x42>
  {
    reg.odr = (uint8_t)val;
 80065cc:	78fb      	ldrb	r3, [r7, #3]
 80065ce:	f003 0303 	and.w	r3, r3, #3
 80065d2:	b2da      	uxtb	r2, r3
 80065d4:	7a3b      	ldrb	r3, [r7, #8]
 80065d6:	f362 0383 	bfi	r3, r2, #2, #2
 80065da:	723b      	strb	r3, [r7, #8]
    ret = lis2mdl_write_reg(ctx, LIS2MDL_CFG_REG_A, (uint8_t *)&reg, 1);
 80065dc:	f107 0208 	add.w	r2, r7, #8
 80065e0:	2301      	movs	r3, #1
 80065e2:	2160      	movs	r1, #96	; 0x60
 80065e4:	6878      	ldr	r0, [r7, #4]
 80065e6:	f7ff ffa2 	bl	800652e <lis2mdl_write_reg>
 80065ea:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80065ec:	68fb      	ldr	r3, [r7, #12]
}
 80065ee:	4618      	mov	r0, r3
 80065f0:	3710      	adds	r7, #16
 80065f2:	46bd      	mov	sp, r7
 80065f4:	bd80      	pop	{r7, pc}
	...

080065f8 <lis2mdl_data_rate_get>:
  * @param  val   Get the values of odr in reg CFG_REG_A.(ptr)
  * @retval       interface status.(MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2mdl_data_rate_get(stmdev_ctx_t *ctx, lis2mdl_odr_t *val)
{
 80065f8:	b580      	push	{r7, lr}
 80065fa:	b084      	sub	sp, #16
 80065fc:	af00      	add	r7, sp, #0
 80065fe:	6078      	str	r0, [r7, #4]
 8006600:	6039      	str	r1, [r7, #0]
  lis2mdl_cfg_reg_a_t reg;
  int32_t ret;

  ret = lis2mdl_read_reg(ctx, LIS2MDL_CFG_REG_A, (uint8_t *)&reg, 1);
 8006602:	f107 0208 	add.w	r2, r7, #8
 8006606:	2301      	movs	r3, #1
 8006608:	2160      	movs	r1, #96	; 0x60
 800660a:	6878      	ldr	r0, [r7, #4]
 800660c:	f7ff ff77 	bl	80064fe <lis2mdl_read_reg>
 8006610:	60f8      	str	r0, [r7, #12]

  switch (reg.odr)
 8006612:	7a3b      	ldrb	r3, [r7, #8]
 8006614:	f3c3 0381 	ubfx	r3, r3, #2, #2
 8006618:	b2db      	uxtb	r3, r3
 800661a:	2b03      	cmp	r3, #3
 800661c:	d81a      	bhi.n	8006654 <lis2mdl_data_rate_get+0x5c>
 800661e:	a201      	add	r2, pc, #4	; (adr r2, 8006624 <lis2mdl_data_rate_get+0x2c>)
 8006620:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006624:	08006635 	.word	0x08006635
 8006628:	0800663d 	.word	0x0800663d
 800662c:	08006645 	.word	0x08006645
 8006630:	0800664d 	.word	0x0800664d
  {
    case LIS2MDL_ODR_10Hz:
      *val = LIS2MDL_ODR_10Hz;
 8006634:	683b      	ldr	r3, [r7, #0]
 8006636:	2200      	movs	r2, #0
 8006638:	701a      	strb	r2, [r3, #0]
      break;
 800663a:	e00f      	b.n	800665c <lis2mdl_data_rate_get+0x64>

    case LIS2MDL_ODR_20Hz:
      *val = LIS2MDL_ODR_20Hz;
 800663c:	683b      	ldr	r3, [r7, #0]
 800663e:	2201      	movs	r2, #1
 8006640:	701a      	strb	r2, [r3, #0]
      break;
 8006642:	e00b      	b.n	800665c <lis2mdl_data_rate_get+0x64>

    case LIS2MDL_ODR_50Hz:
      *val = LIS2MDL_ODR_50Hz;
 8006644:	683b      	ldr	r3, [r7, #0]
 8006646:	2202      	movs	r2, #2
 8006648:	701a      	strb	r2, [r3, #0]
      break;
 800664a:	e007      	b.n	800665c <lis2mdl_data_rate_get+0x64>

    case LIS2MDL_ODR_100Hz:
      *val = LIS2MDL_ODR_100Hz;
 800664c:	683b      	ldr	r3, [r7, #0]
 800664e:	2203      	movs	r2, #3
 8006650:	701a      	strb	r2, [r3, #0]
      break;
 8006652:	e003      	b.n	800665c <lis2mdl_data_rate_get+0x64>

    default:
      *val = LIS2MDL_ODR_10Hz;
 8006654:	683b      	ldr	r3, [r7, #0]
 8006656:	2200      	movs	r2, #0
 8006658:	701a      	strb	r2, [r3, #0]
      break;
 800665a:	bf00      	nop
  }

  return ret;
 800665c:	68fb      	ldr	r3, [r7, #12]
}
 800665e:	4618      	mov	r0, r3
 8006660:	3710      	adds	r7, #16
 8006662:	46bd      	mov	sp, r7
 8006664:	bd80      	pop	{r7, pc}
 8006666:	bf00      	nop

08006668 <lis2mdl_block_data_update_set>:
  * @param  val   change the values of bdu in reg CFG_REG_C
  * @retval       interface status.(MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2mdl_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8006668:	b580      	push	{r7, lr}
 800666a:	b084      	sub	sp, #16
 800666c:	af00      	add	r7, sp, #0
 800666e:	6078      	str	r0, [r7, #4]
 8006670:	460b      	mov	r3, r1
 8006672:	70fb      	strb	r3, [r7, #3]
  lis2mdl_cfg_reg_c_t reg;
  int32_t ret;

  ret = lis2mdl_read_reg(ctx, LIS2MDL_CFG_REG_C, (uint8_t *)&reg, 1);
 8006674:	f107 0208 	add.w	r2, r7, #8
 8006678:	2301      	movs	r3, #1
 800667a:	2162      	movs	r1, #98	; 0x62
 800667c:	6878      	ldr	r0, [r7, #4]
 800667e:	f7ff ff3e 	bl	80064fe <lis2mdl_read_reg>
 8006682:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8006684:	68fb      	ldr	r3, [r7, #12]
 8006686:	2b00      	cmp	r3, #0
 8006688:	d10f      	bne.n	80066aa <lis2mdl_block_data_update_set+0x42>
  {
    reg.bdu = val;
 800668a:	78fb      	ldrb	r3, [r7, #3]
 800668c:	f003 0301 	and.w	r3, r3, #1
 8006690:	b2da      	uxtb	r2, r3
 8006692:	7a3b      	ldrb	r3, [r7, #8]
 8006694:	f362 1304 	bfi	r3, r2, #4, #1
 8006698:	723b      	strb	r3, [r7, #8]
    ret = lis2mdl_write_reg(ctx, LIS2MDL_CFG_REG_C, (uint8_t *)&reg, 1);
 800669a:	f107 0208 	add.w	r2, r7, #8
 800669e:	2301      	movs	r3, #1
 80066a0:	2162      	movs	r1, #98	; 0x62
 80066a2:	6878      	ldr	r0, [r7, #4]
 80066a4:	f7ff ff43 	bl	800652e <lis2mdl_write_reg>
 80066a8:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80066aa:	68fb      	ldr	r3, [r7, #12]
}
 80066ac:	4618      	mov	r0, r3
 80066ae:	3710      	adds	r7, #16
 80066b0:	46bd      	mov	sp, r7
 80066b2:	bd80      	pop	{r7, pc}

080066b4 <lis2mdl_magnetic_raw_get>:
  * @param  buff  that stores data read
  * @retval       interface status.(MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2mdl_magnetic_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 80066b4:	b580      	push	{r7, lr}
 80066b6:	b086      	sub	sp, #24
 80066b8:	af00      	add	r7, sp, #0
 80066ba:	6078      	str	r0, [r7, #4]
 80066bc:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;

  ret = lis2mdl_read_reg(ctx, LIS2MDL_OUTX_L_REG, buff, 6);
 80066be:	f107 020c 	add.w	r2, r7, #12
 80066c2:	2306      	movs	r3, #6
 80066c4:	2168      	movs	r1, #104	; 0x68
 80066c6:	6878      	ldr	r0, [r7, #4]
 80066c8:	f7ff ff19 	bl	80064fe <lis2mdl_read_reg>
 80066cc:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 80066ce:	7b7b      	ldrb	r3, [r7, #13]
 80066d0:	b21a      	sxth	r2, r3
 80066d2:	683b      	ldr	r3, [r7, #0]
 80066d4:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 80066d6:	683b      	ldr	r3, [r7, #0]
 80066d8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80066dc:	b29b      	uxth	r3, r3
 80066de:	021b      	lsls	r3, r3, #8
 80066e0:	b29a      	uxth	r2, r3
 80066e2:	7b3b      	ldrb	r3, [r7, #12]
 80066e4:	b29b      	uxth	r3, r3
 80066e6:	4413      	add	r3, r2
 80066e8:	b29b      	uxth	r3, r3
 80066ea:	b21a      	sxth	r2, r3
 80066ec:	683b      	ldr	r3, [r7, #0]
 80066ee:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 80066f0:	7bfa      	ldrb	r2, [r7, #15]
 80066f2:	683b      	ldr	r3, [r7, #0]
 80066f4:	3302      	adds	r3, #2
 80066f6:	b212      	sxth	r2, r2
 80066f8:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 80066fa:	683b      	ldr	r3, [r7, #0]
 80066fc:	3302      	adds	r3, #2
 80066fe:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006702:	b29b      	uxth	r3, r3
 8006704:	021b      	lsls	r3, r3, #8
 8006706:	b29a      	uxth	r2, r3
 8006708:	7bbb      	ldrb	r3, [r7, #14]
 800670a:	b29b      	uxth	r3, r3
 800670c:	4413      	add	r3, r2
 800670e:	b29a      	uxth	r2, r3
 8006710:	683b      	ldr	r3, [r7, #0]
 8006712:	3302      	adds	r3, #2
 8006714:	b212      	sxth	r2, r2
 8006716:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 8006718:	7c7a      	ldrb	r2, [r7, #17]
 800671a:	683b      	ldr	r3, [r7, #0]
 800671c:	3304      	adds	r3, #4
 800671e:	b212      	sxth	r2, r2
 8006720:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 8006722:	683b      	ldr	r3, [r7, #0]
 8006724:	3304      	adds	r3, #4
 8006726:	f9b3 3000 	ldrsh.w	r3, [r3]
 800672a:	b29b      	uxth	r3, r3
 800672c:	021b      	lsls	r3, r3, #8
 800672e:	b29a      	uxth	r2, r3
 8006730:	7c3b      	ldrb	r3, [r7, #16]
 8006732:	b29b      	uxth	r3, r3
 8006734:	4413      	add	r3, r2
 8006736:	b29a      	uxth	r2, r3
 8006738:	683b      	ldr	r3, [r7, #0]
 800673a:	3304      	adds	r3, #4
 800673c:	b212      	sxth	r2, r2
 800673e:	801a      	strh	r2, [r3, #0]

  return ret;
 8006740:	697b      	ldr	r3, [r7, #20]
}
 8006742:	4618      	mov	r0, r3
 8006744:	3718      	adds	r7, #24
 8006746:	46bd      	mov	sp, r7
 8006748:	bd80      	pop	{r7, pc}

0800674a <lis2mdl_device_id_get>:
  * @param  buff  that stores data read
  * @retval       interface status.(MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2mdl_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 800674a:	b580      	push	{r7, lr}
 800674c:	b084      	sub	sp, #16
 800674e:	af00      	add	r7, sp, #0
 8006750:	6078      	str	r0, [r7, #4]
 8006752:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = lis2mdl_read_reg(ctx, LIS2MDL_WHO_AM_I, buff, 1);
 8006754:	2301      	movs	r3, #1
 8006756:	683a      	ldr	r2, [r7, #0]
 8006758:	214f      	movs	r1, #79	; 0x4f
 800675a:	6878      	ldr	r0, [r7, #4]
 800675c:	f7ff fecf 	bl	80064fe <lis2mdl_read_reg>
 8006760:	60f8      	str	r0, [r7, #12]

  return ret;
 8006762:	68fb      	ldr	r3, [r7, #12]
}
 8006764:	4618      	mov	r0, r3
 8006766:	3710      	adds	r7, #16
 8006768:	46bd      	mov	sp, r7
 800676a:	bd80      	pop	{r7, pc}

0800676c <lis2mdl_self_test_set>:
  * @param  val   change the values of self_test in reg CFG_REG_C
  * @retval       interface status.(MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2mdl_self_test_set(stmdev_ctx_t *ctx, uint8_t val)
{
 800676c:	b580      	push	{r7, lr}
 800676e:	b084      	sub	sp, #16
 8006770:	af00      	add	r7, sp, #0
 8006772:	6078      	str	r0, [r7, #4]
 8006774:	460b      	mov	r3, r1
 8006776:	70fb      	strb	r3, [r7, #3]
  lis2mdl_cfg_reg_c_t reg;
  int32_t ret;

  ret = lis2mdl_read_reg(ctx, LIS2MDL_CFG_REG_C, (uint8_t *)&reg, 1);
 8006778:	f107 0208 	add.w	r2, r7, #8
 800677c:	2301      	movs	r3, #1
 800677e:	2162      	movs	r1, #98	; 0x62
 8006780:	6878      	ldr	r0, [r7, #4]
 8006782:	f7ff febc 	bl	80064fe <lis2mdl_read_reg>
 8006786:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8006788:	68fb      	ldr	r3, [r7, #12]
 800678a:	2b00      	cmp	r3, #0
 800678c:	d10f      	bne.n	80067ae <lis2mdl_self_test_set+0x42>
  {
    reg.self_test = val;
 800678e:	78fb      	ldrb	r3, [r7, #3]
 8006790:	f003 0301 	and.w	r3, r3, #1
 8006794:	b2da      	uxtb	r2, r3
 8006796:	7a3b      	ldrb	r3, [r7, #8]
 8006798:	f362 0341 	bfi	r3, r2, #1, #1
 800679c:	723b      	strb	r3, [r7, #8]
    ret = lis2mdl_write_reg(ctx, LIS2MDL_CFG_REG_C, (uint8_t *)&reg, 1);
 800679e:	f107 0208 	add.w	r2, r7, #8
 80067a2:	2301      	movs	r3, #1
 80067a4:	2162      	movs	r1, #98	; 0x62
 80067a6:	6878      	ldr	r0, [r7, #4]
 80067a8:	f7ff fec1 	bl	800652e <lis2mdl_write_reg>
 80067ac:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80067ae:	68fb      	ldr	r3, [r7, #12]
}
 80067b0:	4618      	mov	r0, r3
 80067b2:	3710      	adds	r7, #16
 80067b4:	46bd      	mov	sp, r7
 80067b6:	bd80      	pop	{r7, pc}

080067b8 <lis2mdl_i2c_interface_set>:
  * @retval       interface status.(MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2mdl_i2c_interface_set(stmdev_ctx_t *ctx,
                                  lis2mdl_i2c_dis_t val)
{
 80067b8:	b580      	push	{r7, lr}
 80067ba:	b084      	sub	sp, #16
 80067bc:	af00      	add	r7, sp, #0
 80067be:	6078      	str	r0, [r7, #4]
 80067c0:	460b      	mov	r3, r1
 80067c2:	70fb      	strb	r3, [r7, #3]
  lis2mdl_cfg_reg_c_t reg;
  int32_t ret;

  ret = lis2mdl_read_reg(ctx, LIS2MDL_CFG_REG_C, (uint8_t *)&reg, 1);
 80067c4:	f107 0208 	add.w	r2, r7, #8
 80067c8:	2301      	movs	r3, #1
 80067ca:	2162      	movs	r1, #98	; 0x62
 80067cc:	6878      	ldr	r0, [r7, #4]
 80067ce:	f7ff fe96 	bl	80064fe <lis2mdl_read_reg>
 80067d2:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 80067d4:	68fb      	ldr	r3, [r7, #12]
 80067d6:	2b00      	cmp	r3, #0
 80067d8:	d10f      	bne.n	80067fa <lis2mdl_i2c_interface_set+0x42>
  {
    reg.i2c_dis = (uint8_t)val;
 80067da:	78fb      	ldrb	r3, [r7, #3]
 80067dc:	f003 0301 	and.w	r3, r3, #1
 80067e0:	b2da      	uxtb	r2, r3
 80067e2:	7a3b      	ldrb	r3, [r7, #8]
 80067e4:	f362 1345 	bfi	r3, r2, #5, #1
 80067e8:	723b      	strb	r3, [r7, #8]
    ret = lis2mdl_write_reg(ctx, LIS2MDL_CFG_REG_C, (uint8_t *)&reg, 1);
 80067ea:	f107 0208 	add.w	r2, r7, #8
 80067ee:	2301      	movs	r3, #1
 80067f0:	2162      	movs	r1, #98	; 0x62
 80067f2:	6878      	ldr	r0, [r7, #4]
 80067f4:	f7ff fe9b 	bl	800652e <lis2mdl_write_reg>
 80067f8:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80067fa:	68fb      	ldr	r3, [r7, #12]
}
 80067fc:	4618      	mov	r0, r3
 80067fe:	3710      	adds	r7, #16
 8006800:	46bd      	mov	sp, r7
 8006802:	bd80      	pop	{r7, pc}

08006804 <LPS22HH_RegisterBusIO>:
  * @brief  Register Component Bus IO operations
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22HH_RegisterBusIO(LPS22HH_Object_t *pObj, LPS22HH_IO_t *pIO)
{
 8006804:	b580      	push	{r7, lr}
 8006806:	b084      	sub	sp, #16
 8006808:	af00      	add	r7, sp, #0
 800680a:	6078      	str	r0, [r7, #4]
 800680c:	6039      	str	r1, [r7, #0]
  int32_t ret = LPS22HH_OK;
 800680e:	2300      	movs	r3, #0
 8006810:	60fb      	str	r3, [r7, #12]

  if (pObj == NULL)
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	2b00      	cmp	r3, #0
 8006816:	d103      	bne.n	8006820 <LPS22HH_RegisterBusIO+0x1c>
  {
    ret = LPS22HH_ERROR;
 8006818:	f04f 33ff 	mov.w	r3, #4294967295
 800681c:	60fb      	str	r3, [r7, #12]
 800681e:	e051      	b.n	80068c4 <LPS22HH_RegisterBusIO+0xc0>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 8006820:	683b      	ldr	r3, [r7, #0]
 8006822:	681a      	ldr	r2, [r3, #0]
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 8006828:	683b      	ldr	r3, [r7, #0]
 800682a:	685a      	ldr	r2, [r3, #4]
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	605a      	str	r2, [r3, #4]
    pObj->IO.BusType   = pIO->BusType;
 8006830:	683b      	ldr	r3, [r7, #0]
 8006832:	689a      	ldr	r2, [r3, #8]
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	609a      	str	r2, [r3, #8]
    pObj->IO.Address   = pIO->Address;
 8006838:	683b      	ldr	r3, [r7, #0]
 800683a:	7b1a      	ldrb	r2, [r3, #12]
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	731a      	strb	r2, [r3, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 8006840:	683b      	ldr	r3, [r7, #0]
 8006842:	691a      	ldr	r2, [r3, #16]
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	611a      	str	r2, [r3, #16]
    pObj->IO.ReadReg   = pIO->ReadReg;
 8006848:	683b      	ldr	r3, [r7, #0]
 800684a:	695a      	ldr	r2, [r3, #20]
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	615a      	str	r2, [r3, #20]
    pObj->IO.GetTick   = pIO->GetTick;
 8006850:	683b      	ldr	r3, [r7, #0]
 8006852:	699a      	ldr	r2, [r3, #24]
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	619a      	str	r2, [r3, #24]

    pObj->Ctx.read_reg  = ReadRegWrap;
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	4a1d      	ldr	r2, [pc, #116]	; (80068d0 <LPS22HH_RegisterBusIO+0xcc>)
 800685c:	625a      	str	r2, [r3, #36]	; 0x24
    pObj->Ctx.write_reg = WriteRegWrap;
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	4a1c      	ldr	r2, [pc, #112]	; (80068d4 <LPS22HH_RegisterBusIO+0xd0>)
 8006862:	621a      	str	r2, [r3, #32]
    pObj->Ctx.mdelay    = pIO->Delay;
 8006864:	683b      	ldr	r3, [r7, #0]
 8006866:	69da      	ldr	r2, [r3, #28]
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	629a      	str	r2, [r3, #40]	; 0x28
    pObj->Ctx.handle   = pObj;
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	687a      	ldr	r2, [r7, #4]
 8006870:	62da      	str	r2, [r3, #44]	; 0x2c

    if (pObj->IO.Init == NULL)
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	2b00      	cmp	r3, #0
 8006878:	d103      	bne.n	8006882 <LPS22HH_RegisterBusIO+0x7e>
    {
      ret = LPS22HH_ERROR;
 800687a:	f04f 33ff 	mov.w	r3, #4294967295
 800687e:	60fb      	str	r3, [r7, #12]
 8006880:	e020      	b.n	80068c4 <LPS22HH_RegisterBusIO+0xc0>
    }
    else if (pObj->IO.Init() != LPS22HH_OK)
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	4798      	blx	r3
 8006888:	4603      	mov	r3, r0
 800688a:	2b00      	cmp	r3, #0
 800688c:	d003      	beq.n	8006896 <LPS22HH_RegisterBusIO+0x92>
    {
      ret = LPS22HH_ERROR;
 800688e:	f04f 33ff 	mov.w	r3, #4294967295
 8006892:	60fb      	str	r3, [r7, #12]
 8006894:	e016      	b.n	80068c4 <LPS22HH_RegisterBusIO+0xc0>
    }
    else
    {
      if (pObj->IO.BusType == LPS22HH_SPI_3WIRES_BUS) /* SPI 3-Wires */
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	689b      	ldr	r3, [r3, #8]
 800689a:	2b02      	cmp	r3, #2
 800689c:	d112      	bne.n	80068c4 <LPS22HH_RegisterBusIO+0xc0>
      {
        /* Enable the SPI 3-Wires support only the first time */
        if (pObj->is_initialized == 0U)
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80068a4:	2b00      	cmp	r3, #0
 80068a6:	d10d      	bne.n	80068c4 <LPS22HH_RegisterBusIO+0xc0>
        {
          /* Enable SPI 3-Wires on the component */
          uint8_t data = 0x01;
 80068a8:	2301      	movs	r3, #1
 80068aa:	72fb      	strb	r3, [r7, #11]

          if (LPS22HH_Write_Reg(pObj, LPS22HH_CTRL_REG1, data) != LPS22HH_OK)
 80068ac:	7afb      	ldrb	r3, [r7, #11]
 80068ae:	461a      	mov	r2, r3
 80068b0:	2110      	movs	r1, #16
 80068b2:	6878      	ldr	r0, [r7, #4]
 80068b4:	f000 f9df 	bl	8006c76 <LPS22HH_Write_Reg>
 80068b8:	4603      	mov	r3, r0
 80068ba:	2b00      	cmp	r3, #0
 80068bc:	d002      	beq.n	80068c4 <LPS22HH_RegisterBusIO+0xc0>
          {
            ret = LPS22HH_ERROR;
 80068be:	f04f 33ff 	mov.w	r3, #4294967295
 80068c2:	60fb      	str	r3, [r7, #12]
        }
      }
    }
  }

  return ret;
 80068c4:	68fb      	ldr	r3, [r7, #12]
}
 80068c6:	4618      	mov	r0, r3
 80068c8:	3710      	adds	r7, #16
 80068ca:	46bd      	mov	sp, r7
 80068cc:	bd80      	pop	{r7, pc}
 80068ce:	bf00      	nop
 80068d0:	08006f9f 	.word	0x08006f9f
 80068d4:	08006fd5 	.word	0x08006fd5

080068d8 <LPS22HH_Init>:
  * @brief  Initialize the LPS22HH sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22HH_Init(LPS22HH_Object_t *pObj)
{
 80068d8:	b580      	push	{r7, lr}
 80068da:	b082      	sub	sp, #8
 80068dc:	af00      	add	r7, sp, #0
 80068de:	6078      	str	r0, [r7, #4]
  if (pObj->is_initialized == 0U)
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80068e6:	2b00      	cmp	r3, #0
 80068e8:	d108      	bne.n	80068fc <LPS22HH_Init+0x24>
  {
    if (LPS22HH_Initialize(pObj) != LPS22HH_OK)
 80068ea:	6878      	ldr	r0, [r7, #4]
 80068ec:	f000 fb0e 	bl	8006f0c <LPS22HH_Initialize>
 80068f0:	4603      	mov	r3, r0
 80068f2:	2b00      	cmp	r3, #0
 80068f4:	d002      	beq.n	80068fc <LPS22HH_Init+0x24>
    {
      return LPS22HH_ERROR;
 80068f6:	f04f 33ff 	mov.w	r3, #4294967295
 80068fa:	e004      	b.n	8006906 <LPS22HH_Init+0x2e>
    }
  }

  pObj->is_initialized = 1U;
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	2201      	movs	r2, #1
 8006900:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return LPS22HH_OK;
 8006904:	2300      	movs	r3, #0
}
 8006906:	4618      	mov	r0, r3
 8006908:	3708      	adds	r7, #8
 800690a:	46bd      	mov	sp, r7
 800690c:	bd80      	pop	{r7, pc}

0800690e <LPS22HH_DeInit>:
  * @brief  Deinitialize the LPS22HH sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22HH_DeInit(LPS22HH_Object_t *pObj)
{
 800690e:	b580      	push	{r7, lr}
 8006910:	b082      	sub	sp, #8
 8006912:	af00      	add	r7, sp, #0
 8006914:	6078      	str	r0, [r7, #4]
  if (pObj->is_initialized == 1U)
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800691c:	2b01      	cmp	r3, #1
 800691e:	d111      	bne.n	8006944 <LPS22HH_DeInit+0x36>
  {
    if (LPS22HH_PRESS_Disable(pObj) != LPS22HH_OK)
 8006920:	6878      	ldr	r0, [r7, #4]
 8006922:	f000 f877 	bl	8006a14 <LPS22HH_PRESS_Disable>
 8006926:	4603      	mov	r3, r0
 8006928:	2b00      	cmp	r3, #0
 800692a:	d002      	beq.n	8006932 <LPS22HH_DeInit+0x24>
    {
      return LPS22HH_ERROR;
 800692c:	f04f 33ff 	mov.w	r3, #4294967295
 8006930:	e00d      	b.n	800694e <LPS22HH_DeInit+0x40>
    }

    if (LPS22HH_TEMP_Disable(pObj) != LPS22HH_OK)
 8006932:	6878      	ldr	r0, [r7, #4]
 8006934:	f000 f918 	bl	8006b68 <LPS22HH_TEMP_Disable>
 8006938:	4603      	mov	r3, r0
 800693a:	2b00      	cmp	r3, #0
 800693c:	d002      	beq.n	8006944 <LPS22HH_DeInit+0x36>
    {
      return LPS22HH_ERROR;
 800693e:	f04f 33ff 	mov.w	r3, #4294967295
 8006942:	e004      	b.n	800694e <LPS22HH_DeInit+0x40>
    }
  }

  pObj->is_initialized = 0;
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	2200      	movs	r2, #0
 8006948:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return LPS22HH_OK;
 800694c:	2300      	movs	r3, #0
}
 800694e:	4618      	mov	r0, r3
 8006950:	3708      	adds	r7, #8
 8006952:	46bd      	mov	sp, r7
 8006954:	bd80      	pop	{r7, pc}

08006956 <LPS22HH_ReadID>:
  * @param  pObj the device pObj
  * @param  Id the WHO_AM_I value
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22HH_ReadID(LPS22HH_Object_t *pObj, uint8_t *Id)
{
 8006956:	b580      	push	{r7, lr}
 8006958:	b082      	sub	sp, #8
 800695a:	af00      	add	r7, sp, #0
 800695c:	6078      	str	r0, [r7, #4]
 800695e:	6039      	str	r1, [r7, #0]
  if (lps22hh_device_id_get(&(pObj->Ctx), Id) != LPS22HH_OK)
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	3320      	adds	r3, #32
 8006964:	6839      	ldr	r1, [r7, #0]
 8006966:	4618      	mov	r0, r3
 8006968:	f000 fd1a 	bl	80073a0 <lps22hh_device_id_get>
 800696c:	4603      	mov	r3, r0
 800696e:	2b00      	cmp	r3, #0
 8006970:	d002      	beq.n	8006978 <LPS22HH_ReadID+0x22>
  {
    return LPS22HH_ERROR;
 8006972:	f04f 33ff 	mov.w	r3, #4294967295
 8006976:	e000      	b.n	800697a <LPS22HH_ReadID+0x24>
  }

  return LPS22HH_OK;
 8006978:	2300      	movs	r3, #0
}
 800697a:	4618      	mov	r0, r3
 800697c:	3708      	adds	r7, #8
 800697e:	46bd      	mov	sp, r7
 8006980:	bd80      	pop	{r7, pc}
	...

08006984 <LPS22HH_GetCapabilities>:
  * @param  pObj Component object pointer
  * @param  Capabilities pointer to LPS22HH sensor capabilities
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22HH_GetCapabilities(LPS22HH_Object_t *pObj, LPS22HH_Capabilities_t *Capabilities)
{
 8006984:	b480      	push	{r7}
 8006986:	b083      	sub	sp, #12
 8006988:	af00      	add	r7, sp, #0
 800698a:	6078      	str	r0, [r7, #4]
 800698c:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  Capabilities->Humidity    = 0;
 800698e:	683b      	ldr	r3, [r7, #0]
 8006990:	2200      	movs	r2, #0
 8006992:	709a      	strb	r2, [r3, #2]
  Capabilities->Pressure    = 1;
 8006994:	683b      	ldr	r3, [r7, #0]
 8006996:	2201      	movs	r2, #1
 8006998:	705a      	strb	r2, [r3, #1]
  Capabilities->Temperature = 1;
 800699a:	683b      	ldr	r3, [r7, #0]
 800699c:	2201      	movs	r2, #1
 800699e:	701a      	strb	r2, [r3, #0]
  Capabilities->LowPower    = 0;
 80069a0:	683b      	ldr	r3, [r7, #0]
 80069a2:	2200      	movs	r2, #0
 80069a4:	70da      	strb	r2, [r3, #3]
  Capabilities->HumMaxOdr   = 0.0f;
 80069a6:	683b      	ldr	r3, [r7, #0]
 80069a8:	f04f 0200 	mov.w	r2, #0
 80069ac:	605a      	str	r2, [r3, #4]
  Capabilities->TempMaxOdr  = 200.0f;
 80069ae:	683b      	ldr	r3, [r7, #0]
 80069b0:	4a05      	ldr	r2, [pc, #20]	; (80069c8 <LPS22HH_GetCapabilities+0x44>)
 80069b2:	609a      	str	r2, [r3, #8]
  Capabilities->PressMaxOdr = 200.0f;
 80069b4:	683b      	ldr	r3, [r7, #0]
 80069b6:	4a04      	ldr	r2, [pc, #16]	; (80069c8 <LPS22HH_GetCapabilities+0x44>)
 80069b8:	60da      	str	r2, [r3, #12]
  return LPS22HH_OK;
 80069ba:	2300      	movs	r3, #0
}
 80069bc:	4618      	mov	r0, r3
 80069be:	370c      	adds	r7, #12
 80069c0:	46bd      	mov	sp, r7
 80069c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069c6:	4770      	bx	lr
 80069c8:	43480000 	.word	0x43480000

080069cc <LPS22HH_PRESS_Enable>:
  * @brief  Enable the LPS22HH pressure sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22HH_PRESS_Enable(LPS22HH_Object_t *pObj)
{
 80069cc:	b580      	push	{r7, lr}
 80069ce:	b082      	sub	sp, #8
 80069d0:	af00      	add	r7, sp, #0
 80069d2:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->press_is_enabled == 1U)
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80069da:	2b01      	cmp	r3, #1
 80069dc:	d101      	bne.n	80069e2 <LPS22HH_PRESS_Enable+0x16>
  {
    return LPS22HH_OK;
 80069de:	2300      	movs	r3, #0
 80069e0:	e014      	b.n	8006a0c <LPS22HH_PRESS_Enable+0x40>
  }

  /* Output data rate selection. */
  if (lps22hh_data_rate_set(&(pObj->Ctx), pObj->last_odr) != LPS22HH_OK)
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	f103 0220 	add.w	r2, r3, #32
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 80069ee:	4619      	mov	r1, r3
 80069f0:	4610      	mov	r0, r2
 80069f2:	f000 fb93 	bl	800711c <lps22hh_data_rate_set>
 80069f6:	4603      	mov	r3, r0
 80069f8:	2b00      	cmp	r3, #0
 80069fa:	d002      	beq.n	8006a02 <LPS22HH_PRESS_Enable+0x36>
  {
    return LPS22HH_ERROR;
 80069fc:	f04f 33ff 	mov.w	r3, #4294967295
 8006a00:	e004      	b.n	8006a0c <LPS22HH_PRESS_Enable+0x40>
  }

  pObj->press_is_enabled = 1;
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	2201      	movs	r2, #1
 8006a06:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

  return LPS22HH_OK;
 8006a0a:	2300      	movs	r3, #0
}
 8006a0c:	4618      	mov	r0, r3
 8006a0e:	3708      	adds	r7, #8
 8006a10:	46bd      	mov	sp, r7
 8006a12:	bd80      	pop	{r7, pc}

08006a14 <LPS22HH_PRESS_Disable>:
  * @brief  Disable the LPS22HH pressure sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22HH_PRESS_Disable(LPS22HH_Object_t *pObj)
{
 8006a14:	b580      	push	{r7, lr}
 8006a16:	b082      	sub	sp, #8
 8006a18:	af00      	add	r7, sp, #0
 8006a1a:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->press_is_enabled == 0U)
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8006a22:	2b00      	cmp	r3, #0
 8006a24:	d101      	bne.n	8006a2a <LPS22HH_PRESS_Disable+0x16>
  {
    return LPS22HH_OK;
 8006a26:	2300      	movs	r3, #0
 8006a28:	e024      	b.n	8006a74 <LPS22HH_PRESS_Disable+0x60>
  }

  /* Check if the LPS22HH temperature sensor is still enable. */
  /* If yes, skip the disable function, if not call disable function */
  if (pObj->temp_is_enabled == 0U)
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8006a30:	2b00      	cmp	r3, #0
 8006a32:	d11a      	bne.n	8006a6a <LPS22HH_PRESS_Disable+0x56>
  {
    /* Get current output data rate. */
    if (lps22hh_data_rate_get(&(pObj->Ctx), &pObj->last_odr) != LPS22HH_OK)
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	f103 0220 	add.w	r2, r3, #32
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	3333      	adds	r3, #51	; 0x33
 8006a3e:	4619      	mov	r1, r3
 8006a40:	4610      	mov	r0, r2
 8006a42:	f000 fbb9 	bl	80071b8 <lps22hh_data_rate_get>
 8006a46:	4603      	mov	r3, r0
 8006a48:	2b00      	cmp	r3, #0
 8006a4a:	d002      	beq.n	8006a52 <LPS22HH_PRESS_Disable+0x3e>
    {
      return LPS22HH_ERROR;
 8006a4c:	f04f 33ff 	mov.w	r3, #4294967295
 8006a50:	e010      	b.n	8006a74 <LPS22HH_PRESS_Disable+0x60>
    }

    /* Output data rate selection - power down. */
    if (lps22hh_data_rate_set(&(pObj->Ctx), LPS22HH_POWER_DOWN) != LPS22HH_OK)
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	3320      	adds	r3, #32
 8006a56:	2100      	movs	r1, #0
 8006a58:	4618      	mov	r0, r3
 8006a5a:	f000 fb5f 	bl	800711c <lps22hh_data_rate_set>
 8006a5e:	4603      	mov	r3, r0
 8006a60:	2b00      	cmp	r3, #0
 8006a62:	d002      	beq.n	8006a6a <LPS22HH_PRESS_Disable+0x56>
    {
      return LPS22HH_ERROR;
 8006a64:	f04f 33ff 	mov.w	r3, #4294967295
 8006a68:	e004      	b.n	8006a74 <LPS22HH_PRESS_Disable+0x60>
    }
  }

  pObj->press_is_enabled = 0;
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	2200      	movs	r2, #0
 8006a6e:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

  return LPS22HH_OK;
 8006a72:	2300      	movs	r3, #0
}
 8006a74:	4618      	mov	r0, r3
 8006a76:	3708      	adds	r7, #8
 8006a78:	46bd      	mov	sp, r7
 8006a7a:	bd80      	pop	{r7, pc}

08006a7c <LPS22HH_PRESS_GetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr pointer where the output data rate is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22HH_PRESS_GetOutputDataRate(LPS22HH_Object_t *pObj, float *Odr)
{
 8006a7c:	b580      	push	{r7, lr}
 8006a7e:	b082      	sub	sp, #8
 8006a80:	af00      	add	r7, sp, #0
 8006a82:	6078      	str	r0, [r7, #4]
 8006a84:	6039      	str	r1, [r7, #0]
  return LPS22HH_GetOutputDataRate(pObj, Odr);
 8006a86:	6839      	ldr	r1, [r7, #0]
 8006a88:	6878      	ldr	r0, [r7, #4]
 8006a8a:	f000 f90f 	bl	8006cac <LPS22HH_GetOutputDataRate>
 8006a8e:	4603      	mov	r3, r0
}
 8006a90:	4618      	mov	r0, r3
 8006a92:	3708      	adds	r7, #8
 8006a94:	46bd      	mov	sp, r7
 8006a96:	bd80      	pop	{r7, pc}

08006a98 <LPS22HH_PRESS_SetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22HH_PRESS_SetOutputDataRate(LPS22HH_Object_t *pObj, float Odr)
{
 8006a98:	b580      	push	{r7, lr}
 8006a9a:	b082      	sub	sp, #8
 8006a9c:	af00      	add	r7, sp, #0
 8006a9e:	6078      	str	r0, [r7, #4]
 8006aa0:	ed87 0a00 	vstr	s0, [r7]
  /* Check if the component is enabled */
  if (pObj->press_is_enabled == 1U)
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8006aaa:	2b01      	cmp	r3, #1
 8006aac:	d106      	bne.n	8006abc <LPS22HH_PRESS_SetOutputDataRate+0x24>
  {
    return LPS22HH_SetOutputDataRate_When_Enabled(pObj, Odr);
 8006aae:	ed97 0a00 	vldr	s0, [r7]
 8006ab2:	6878      	ldr	r0, [r7, #4]
 8006ab4:	f000 f95e 	bl	8006d74 <LPS22HH_SetOutputDataRate_When_Enabled>
 8006ab8:	4603      	mov	r3, r0
 8006aba:	e005      	b.n	8006ac8 <LPS22HH_PRESS_SetOutputDataRate+0x30>
  }
  else
  {
    return LPS22HH_SetOutputDataRate_When_Disabled(pObj, Odr);
 8006abc:	ed97 0a00 	vldr	s0, [r7]
 8006ac0:	6878      	ldr	r0, [r7, #4]
 8006ac2:	f000 f9c9 	bl	8006e58 <LPS22HH_SetOutputDataRate_When_Disabled>
 8006ac6:	4603      	mov	r3, r0
  }
}
 8006ac8:	4618      	mov	r0, r3
 8006aca:	3708      	adds	r7, #8
 8006acc:	46bd      	mov	sp, r7
 8006ace:	bd80      	pop	{r7, pc}

08006ad0 <LPS22HH_PRESS_GetPressure>:
  * @param  pObj the device pObj
  * @param  Value pointer where the pressure value is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22HH_PRESS_GetPressure(LPS22HH_Object_t *pObj, float *Value)
{
 8006ad0:	b580      	push	{r7, lr}
 8006ad2:	b084      	sub	sp, #16
 8006ad4:	af00      	add	r7, sp, #0
 8006ad6:	6078      	str	r0, [r7, #4]
 8006ad8:	6039      	str	r1, [r7, #0]
  lps22hh_axis1bit32_t data_raw_pressure;

  (void)memset(data_raw_pressure.u8bit, 0x00, sizeof(int32_t));
 8006ada:	f107 030c 	add.w	r3, r7, #12
 8006ade:	2204      	movs	r2, #4
 8006ae0:	2100      	movs	r1, #0
 8006ae2:	4618      	mov	r0, r3
 8006ae4:	f008 fccc 	bl	800f480 <memset>
  if (lps22hh_pressure_raw_get(&(pObj->Ctx), (uint32_t *)&data_raw_pressure.i32bit) != LPS22HH_OK)
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	3320      	adds	r3, #32
 8006aec:	f107 020c 	add.w	r2, r7, #12
 8006af0:	4611      	mov	r1, r2
 8006af2:	4618      	mov	r0, r3
 8006af4:	f000 fc08 	bl	8007308 <lps22hh_pressure_raw_get>
 8006af8:	4603      	mov	r3, r0
 8006afa:	2b00      	cmp	r3, #0
 8006afc:	d002      	beq.n	8006b04 <LPS22HH_PRESS_GetPressure+0x34>
  {
    return LPS22HH_ERROR;
 8006afe:	f04f 33ff 	mov.w	r3, #4294967295
 8006b02:	e009      	b.n	8006b18 <LPS22HH_PRESS_GetPressure+0x48>
  }

  *Value = lps22hh_from_lsb_to_hpa((uint32_t)data_raw_pressure.i32bit);
 8006b04:	68fb      	ldr	r3, [r7, #12]
 8006b06:	4618      	mov	r0, r3
 8006b08:	f000 fab0 	bl	800706c <lps22hh_from_lsb_to_hpa>
 8006b0c:	eef0 7a40 	vmov.f32	s15, s0
 8006b10:	683b      	ldr	r3, [r7, #0]
 8006b12:	edc3 7a00 	vstr	s15, [r3]

  return LPS22HH_OK;
 8006b16:	2300      	movs	r3, #0
}
 8006b18:	4618      	mov	r0, r3
 8006b1a:	3710      	adds	r7, #16
 8006b1c:	46bd      	mov	sp, r7
 8006b1e:	bd80      	pop	{r7, pc}

08006b20 <LPS22HH_TEMP_Enable>:
  * @brief  Enable the LPS22HH temperature sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22HH_TEMP_Enable(LPS22HH_Object_t *pObj)
{
 8006b20:	b580      	push	{r7, lr}
 8006b22:	b082      	sub	sp, #8
 8006b24:	af00      	add	r7, sp, #0
 8006b26:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->temp_is_enabled == 1U)
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8006b2e:	2b01      	cmp	r3, #1
 8006b30:	d101      	bne.n	8006b36 <LPS22HH_TEMP_Enable+0x16>
  {
    return LPS22HH_OK;
 8006b32:	2300      	movs	r3, #0
 8006b34:	e014      	b.n	8006b60 <LPS22HH_TEMP_Enable+0x40>
  }

  /* Output data rate selection. */
  if (lps22hh_data_rate_set(&(pObj->Ctx), pObj->last_odr) != LPS22HH_OK)
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	f103 0220 	add.w	r2, r3, #32
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 8006b42:	4619      	mov	r1, r3
 8006b44:	4610      	mov	r0, r2
 8006b46:	f000 fae9 	bl	800711c <lps22hh_data_rate_set>
 8006b4a:	4603      	mov	r3, r0
 8006b4c:	2b00      	cmp	r3, #0
 8006b4e:	d002      	beq.n	8006b56 <LPS22HH_TEMP_Enable+0x36>
  {
    return LPS22HH_ERROR;
 8006b50:	f04f 33ff 	mov.w	r3, #4294967295
 8006b54:	e004      	b.n	8006b60 <LPS22HH_TEMP_Enable+0x40>
  }

  pObj->temp_is_enabled = 1;
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	2201      	movs	r2, #1
 8006b5a:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32

  return LPS22HH_OK;
 8006b5e:	2300      	movs	r3, #0
}
 8006b60:	4618      	mov	r0, r3
 8006b62:	3708      	adds	r7, #8
 8006b64:	46bd      	mov	sp, r7
 8006b66:	bd80      	pop	{r7, pc}

08006b68 <LPS22HH_TEMP_Disable>:
  * @brief  Disable the LPS22HH temperature sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22HH_TEMP_Disable(LPS22HH_Object_t *pObj)
{
 8006b68:	b580      	push	{r7, lr}
 8006b6a:	b082      	sub	sp, #8
 8006b6c:	af00      	add	r7, sp, #0
 8006b6e:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->temp_is_enabled == 0U)
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8006b76:	2b00      	cmp	r3, #0
 8006b78:	d101      	bne.n	8006b7e <LPS22HH_TEMP_Disable+0x16>
  {
    return LPS22HH_OK;
 8006b7a:	2300      	movs	r3, #0
 8006b7c:	e024      	b.n	8006bc8 <LPS22HH_TEMP_Disable+0x60>
  }

  /* Check if the LPS22HH pressure sensor is still enable. */
  /* If yes, skip the disable function, if not call disable function */
  if (pObj->press_is_enabled == 0U)
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8006b84:	2b00      	cmp	r3, #0
 8006b86:	d11a      	bne.n	8006bbe <LPS22HH_TEMP_Disable+0x56>
  {
    /* Get current output data rate. */
    if (lps22hh_data_rate_get(&(pObj->Ctx), &pObj->last_odr) != LPS22HH_OK)
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	f103 0220 	add.w	r2, r3, #32
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	3333      	adds	r3, #51	; 0x33
 8006b92:	4619      	mov	r1, r3
 8006b94:	4610      	mov	r0, r2
 8006b96:	f000 fb0f 	bl	80071b8 <lps22hh_data_rate_get>
 8006b9a:	4603      	mov	r3, r0
 8006b9c:	2b00      	cmp	r3, #0
 8006b9e:	d002      	beq.n	8006ba6 <LPS22HH_TEMP_Disable+0x3e>
    {
      return LPS22HH_ERROR;
 8006ba0:	f04f 33ff 	mov.w	r3, #4294967295
 8006ba4:	e010      	b.n	8006bc8 <LPS22HH_TEMP_Disable+0x60>
    }

    /* Output data rate selection - power down. */
    if (lps22hh_data_rate_set(&(pObj->Ctx), LPS22HH_POWER_DOWN) != LPS22HH_OK)
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	3320      	adds	r3, #32
 8006baa:	2100      	movs	r1, #0
 8006bac:	4618      	mov	r0, r3
 8006bae:	f000 fab5 	bl	800711c <lps22hh_data_rate_set>
 8006bb2:	4603      	mov	r3, r0
 8006bb4:	2b00      	cmp	r3, #0
 8006bb6:	d002      	beq.n	8006bbe <LPS22HH_TEMP_Disable+0x56>
    {
      return LPS22HH_ERROR;
 8006bb8:	f04f 33ff 	mov.w	r3, #4294967295
 8006bbc:	e004      	b.n	8006bc8 <LPS22HH_TEMP_Disable+0x60>
    }
  }

  pObj->temp_is_enabled = 0;
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	2200      	movs	r2, #0
 8006bc2:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32

  return LPS22HH_OK;
 8006bc6:	2300      	movs	r3, #0
}
 8006bc8:	4618      	mov	r0, r3
 8006bca:	3708      	adds	r7, #8
 8006bcc:	46bd      	mov	sp, r7
 8006bce:	bd80      	pop	{r7, pc}

08006bd0 <LPS22HH_TEMP_GetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr pointer where the output data rate is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22HH_TEMP_GetOutputDataRate(LPS22HH_Object_t *pObj, float *Odr)
{
 8006bd0:	b580      	push	{r7, lr}
 8006bd2:	b082      	sub	sp, #8
 8006bd4:	af00      	add	r7, sp, #0
 8006bd6:	6078      	str	r0, [r7, #4]
 8006bd8:	6039      	str	r1, [r7, #0]
  return LPS22HH_GetOutputDataRate(pObj, Odr);
 8006bda:	6839      	ldr	r1, [r7, #0]
 8006bdc:	6878      	ldr	r0, [r7, #4]
 8006bde:	f000 f865 	bl	8006cac <LPS22HH_GetOutputDataRate>
 8006be2:	4603      	mov	r3, r0
}
 8006be4:	4618      	mov	r0, r3
 8006be6:	3708      	adds	r7, #8
 8006be8:	46bd      	mov	sp, r7
 8006bea:	bd80      	pop	{r7, pc}

08006bec <LPS22HH_TEMP_SetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22HH_TEMP_SetOutputDataRate(LPS22HH_Object_t *pObj, float Odr)
{
 8006bec:	b580      	push	{r7, lr}
 8006bee:	b082      	sub	sp, #8
 8006bf0:	af00      	add	r7, sp, #0
 8006bf2:	6078      	str	r0, [r7, #4]
 8006bf4:	ed87 0a00 	vstr	s0, [r7]
  /* Check if the component is enabled */
  if (pObj->temp_is_enabled == 1U)
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8006bfe:	2b01      	cmp	r3, #1
 8006c00:	d106      	bne.n	8006c10 <LPS22HH_TEMP_SetOutputDataRate+0x24>
  {
    return LPS22HH_SetOutputDataRate_When_Enabled(pObj, Odr);
 8006c02:	ed97 0a00 	vldr	s0, [r7]
 8006c06:	6878      	ldr	r0, [r7, #4]
 8006c08:	f000 f8b4 	bl	8006d74 <LPS22HH_SetOutputDataRate_When_Enabled>
 8006c0c:	4603      	mov	r3, r0
 8006c0e:	e005      	b.n	8006c1c <LPS22HH_TEMP_SetOutputDataRate+0x30>
  }
  else
  {
    return LPS22HH_SetOutputDataRate_When_Disabled(pObj, Odr);
 8006c10:	ed97 0a00 	vldr	s0, [r7]
 8006c14:	6878      	ldr	r0, [r7, #4]
 8006c16:	f000 f91f 	bl	8006e58 <LPS22HH_SetOutputDataRate_When_Disabled>
 8006c1a:	4603      	mov	r3, r0
  }
}
 8006c1c:	4618      	mov	r0, r3
 8006c1e:	3708      	adds	r7, #8
 8006c20:	46bd      	mov	sp, r7
 8006c22:	bd80      	pop	{r7, pc}

08006c24 <LPS22HH_TEMP_GetTemperature>:
  * @param  pObj the device pObj
  * @param  Value pointer where the temperature value is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22HH_TEMP_GetTemperature(LPS22HH_Object_t *pObj, float *Value)
{
 8006c24:	b580      	push	{r7, lr}
 8006c26:	b084      	sub	sp, #16
 8006c28:	af00      	add	r7, sp, #0
 8006c2a:	6078      	str	r0, [r7, #4]
 8006c2c:	6039      	str	r1, [r7, #0]
  lps22hh_axis1bit16_t data_raw_temperature;

  (void)memset(data_raw_temperature.u8bit, 0x00, sizeof(int16_t));
 8006c2e:	f107 030c 	add.w	r3, r7, #12
 8006c32:	2202      	movs	r2, #2
 8006c34:	2100      	movs	r1, #0
 8006c36:	4618      	mov	r0, r3
 8006c38:	f008 fc22 	bl	800f480 <memset>
  if (lps22hh_temperature_raw_get(&(pObj->Ctx), &data_raw_temperature.i16bit) != LPS22HH_OK)
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	3320      	adds	r3, #32
 8006c40:	f107 020c 	add.w	r2, r7, #12
 8006c44:	4611      	mov	r1, r2
 8006c46:	4618      	mov	r0, r3
 8006c48:	f000 fb87 	bl	800735a <lps22hh_temperature_raw_get>
 8006c4c:	4603      	mov	r3, r0
 8006c4e:	2b00      	cmp	r3, #0
 8006c50:	d002      	beq.n	8006c58 <LPS22HH_TEMP_GetTemperature+0x34>
  {
    return LPS22HH_ERROR;
 8006c52:	f04f 33ff 	mov.w	r3, #4294967295
 8006c56:	e00a      	b.n	8006c6e <LPS22HH_TEMP_GetTemperature+0x4a>
  }

  *Value = lps22hh_from_lsb_to_celsius(data_raw_temperature.i16bit);
 8006c58:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8006c5c:	4618      	mov	r0, r3
 8006c5e:	f000 fa1d 	bl	800709c <lps22hh_from_lsb_to_celsius>
 8006c62:	eef0 7a40 	vmov.f32	s15, s0
 8006c66:	683b      	ldr	r3, [r7, #0]
 8006c68:	edc3 7a00 	vstr	s15, [r3]

  return LPS22HH_OK;
 8006c6c:	2300      	movs	r3, #0
}
 8006c6e:	4618      	mov	r0, r3
 8006c70:	3710      	adds	r7, #16
 8006c72:	46bd      	mov	sp, r7
 8006c74:	bd80      	pop	{r7, pc}

08006c76 <LPS22HH_Write_Reg>:
  * @param  Reg address to be written
  * @param  Data value to be written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22HH_Write_Reg(LPS22HH_Object_t *pObj, uint8_t Reg, uint8_t Data)
{
 8006c76:	b580      	push	{r7, lr}
 8006c78:	b082      	sub	sp, #8
 8006c7a:	af00      	add	r7, sp, #0
 8006c7c:	6078      	str	r0, [r7, #4]
 8006c7e:	460b      	mov	r3, r1
 8006c80:	70fb      	strb	r3, [r7, #3]
 8006c82:	4613      	mov	r3, r2
 8006c84:	70bb      	strb	r3, [r7, #2]
  if (lps22hh_write_reg(&(pObj->Ctx), Reg, &Data, 1) != LPS22HH_OK)
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	f103 0020 	add.w	r0, r3, #32
 8006c8c:	1cba      	adds	r2, r7, #2
 8006c8e:	78f9      	ldrb	r1, [r7, #3]
 8006c90:	2301      	movs	r3, #1
 8006c92:	f000 f9d2 	bl	800703a <lps22hh_write_reg>
 8006c96:	4603      	mov	r3, r0
 8006c98:	2b00      	cmp	r3, #0
 8006c9a:	d002      	beq.n	8006ca2 <LPS22HH_Write_Reg+0x2c>
  {
    return LPS22HH_ERROR;
 8006c9c:	f04f 33ff 	mov.w	r3, #4294967295
 8006ca0:	e000      	b.n	8006ca4 <LPS22HH_Write_Reg+0x2e>
  }

  return LPS22HH_OK;
 8006ca2:	2300      	movs	r3, #0
}
 8006ca4:	4618      	mov	r0, r3
 8006ca6:	3708      	adds	r7, #8
 8006ca8:	46bd      	mov	sp, r7
 8006caa:	bd80      	pop	{r7, pc}

08006cac <LPS22HH_GetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LPS22HH_GetOutputDataRate(LPS22HH_Object_t *pObj, float *Odr)
{
 8006cac:	b580      	push	{r7, lr}
 8006cae:	b084      	sub	sp, #16
 8006cb0:	af00      	add	r7, sp, #0
 8006cb2:	6078      	str	r0, [r7, #4]
 8006cb4:	6039      	str	r1, [r7, #0]
  int32_t ret = LPS22HH_OK;
 8006cb6:	2300      	movs	r3, #0
 8006cb8:	60fb      	str	r3, [r7, #12]
  lps22hh_odr_t odr_low_level;

  if (lps22hh_data_rate_get(&(pObj->Ctx), &odr_low_level) != LPS22HH_OK)
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	3320      	adds	r3, #32
 8006cbe:	f107 020b 	add.w	r2, r7, #11
 8006cc2:	4611      	mov	r1, r2
 8006cc4:	4618      	mov	r0, r3
 8006cc6:	f000 fa77 	bl	80071b8 <lps22hh_data_rate_get>
 8006cca:	4603      	mov	r3, r0
 8006ccc:	2b00      	cmp	r3, #0
 8006cce:	d002      	beq.n	8006cd6 <LPS22HH_GetOutputDataRate+0x2a>
  {
    return LPS22HH_ERROR;
 8006cd0:	f04f 33ff 	mov.w	r3, #4294967295
 8006cd4:	e03d      	b.n	8006d52 <LPS22HH_GetOutputDataRate+0xa6>
  }

  switch (odr_low_level)
 8006cd6:	7afb      	ldrb	r3, [r7, #11]
 8006cd8:	2b07      	cmp	r3, #7
 8006cda:	d835      	bhi.n	8006d48 <LPS22HH_GetOutputDataRate+0x9c>
 8006cdc:	a201      	add	r2, pc, #4	; (adr r2, 8006ce4 <LPS22HH_GetOutputDataRate+0x38>)
 8006cde:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ce2:	bf00      	nop
 8006ce4:	08006d05 	.word	0x08006d05
 8006ce8:	08006d0f 	.word	0x08006d0f
 8006cec:	08006d19 	.word	0x08006d19
 8006cf0:	08006d21 	.word	0x08006d21
 8006cf4:	08006d29 	.word	0x08006d29
 8006cf8:	08006d31 	.word	0x08006d31
 8006cfc:	08006d39 	.word	0x08006d39
 8006d00:	08006d41 	.word	0x08006d41
  {
    case LPS22HH_POWER_DOWN:
      *Odr = 0.0f;
 8006d04:	683b      	ldr	r3, [r7, #0]
 8006d06:	f04f 0200 	mov.w	r2, #0
 8006d0a:	601a      	str	r2, [r3, #0]
      break;
 8006d0c:	e020      	b.n	8006d50 <LPS22HH_GetOutputDataRate+0xa4>

    case LPS22HH_1_Hz:
      *Odr = 1.0f;
 8006d0e:	683b      	ldr	r3, [r7, #0]
 8006d10:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8006d14:	601a      	str	r2, [r3, #0]
      break;
 8006d16:	e01b      	b.n	8006d50 <LPS22HH_GetOutputDataRate+0xa4>

    case LPS22HH_10_Hz:
      *Odr = 10.0f;
 8006d18:	683b      	ldr	r3, [r7, #0]
 8006d1a:	4a10      	ldr	r2, [pc, #64]	; (8006d5c <LPS22HH_GetOutputDataRate+0xb0>)
 8006d1c:	601a      	str	r2, [r3, #0]
      break;
 8006d1e:	e017      	b.n	8006d50 <LPS22HH_GetOutputDataRate+0xa4>

    case LPS22HH_25_Hz:
      *Odr = 25.0f;
 8006d20:	683b      	ldr	r3, [r7, #0]
 8006d22:	4a0f      	ldr	r2, [pc, #60]	; (8006d60 <LPS22HH_GetOutputDataRate+0xb4>)
 8006d24:	601a      	str	r2, [r3, #0]
      break;
 8006d26:	e013      	b.n	8006d50 <LPS22HH_GetOutputDataRate+0xa4>

    case LPS22HH_50_Hz:
      *Odr = 50.0f;
 8006d28:	683b      	ldr	r3, [r7, #0]
 8006d2a:	4a0e      	ldr	r2, [pc, #56]	; (8006d64 <LPS22HH_GetOutputDataRate+0xb8>)
 8006d2c:	601a      	str	r2, [r3, #0]
      break;
 8006d2e:	e00f      	b.n	8006d50 <LPS22HH_GetOutputDataRate+0xa4>

    case LPS22HH_75_Hz:
      *Odr = 75.0f;
 8006d30:	683b      	ldr	r3, [r7, #0]
 8006d32:	4a0d      	ldr	r2, [pc, #52]	; (8006d68 <LPS22HH_GetOutputDataRate+0xbc>)
 8006d34:	601a      	str	r2, [r3, #0]
      break;
 8006d36:	e00b      	b.n	8006d50 <LPS22HH_GetOutputDataRate+0xa4>

    case LPS22HH_100_Hz:
      *Odr = 100.0f;
 8006d38:	683b      	ldr	r3, [r7, #0]
 8006d3a:	4a0c      	ldr	r2, [pc, #48]	; (8006d6c <LPS22HH_GetOutputDataRate+0xc0>)
 8006d3c:	601a      	str	r2, [r3, #0]
      break;
 8006d3e:	e007      	b.n	8006d50 <LPS22HH_GetOutputDataRate+0xa4>

    case LPS22HH_200_Hz:
      *Odr = 200.0f;
 8006d40:	683b      	ldr	r3, [r7, #0]
 8006d42:	4a0b      	ldr	r2, [pc, #44]	; (8006d70 <LPS22HH_GetOutputDataRate+0xc4>)
 8006d44:	601a      	str	r2, [r3, #0]
      break;
 8006d46:	e003      	b.n	8006d50 <LPS22HH_GetOutputDataRate+0xa4>

    default:
      ret = LPS22HH_ERROR;
 8006d48:	f04f 33ff 	mov.w	r3, #4294967295
 8006d4c:	60fb      	str	r3, [r7, #12]
      break;
 8006d4e:	bf00      	nop
  }

  return ret;
 8006d50:	68fb      	ldr	r3, [r7, #12]
}
 8006d52:	4618      	mov	r0, r3
 8006d54:	3710      	adds	r7, #16
 8006d56:	46bd      	mov	sp, r7
 8006d58:	bd80      	pop	{r7, pc}
 8006d5a:	bf00      	nop
 8006d5c:	41200000 	.word	0x41200000
 8006d60:	41c80000 	.word	0x41c80000
 8006d64:	42480000 	.word	0x42480000
 8006d68:	42960000 	.word	0x42960000
 8006d6c:	42c80000 	.word	0x42c80000
 8006d70:	43480000 	.word	0x43480000

08006d74 <LPS22HH_SetOutputDataRate_When_Enabled>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value to be set
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LPS22HH_SetOutputDataRate_When_Enabled(LPS22HH_Object_t *pObj, float Odr)
{
 8006d74:	b580      	push	{r7, lr}
 8006d76:	b084      	sub	sp, #16
 8006d78:	af00      	add	r7, sp, #0
 8006d7a:	6078      	str	r0, [r7, #4]
 8006d7c:	ed87 0a00 	vstr	s0, [r7]
  lps22hh_odr_t new_odr;

  new_odr = (Odr <=   1.0f) ? LPS22HH_1_Hz
            : (Odr <=  10.0f) ? LPS22HH_10_Hz
 8006d80:	edd7 7a00 	vldr	s15, [r7]
 8006d84:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006d88:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006d8c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006d90:	d801      	bhi.n	8006d96 <LPS22HH_SetOutputDataRate_When_Enabled+0x22>
 8006d92:	2301      	movs	r3, #1
 8006d94:	e037      	b.n	8006e06 <LPS22HH_SetOutputDataRate_When_Enabled+0x92>
 8006d96:	edd7 7a00 	vldr	s15, [r7]
 8006d9a:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8006d9e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006da2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006da6:	d801      	bhi.n	8006dac <LPS22HH_SetOutputDataRate_When_Enabled+0x38>
 8006da8:	2302      	movs	r3, #2
 8006daa:	e02c      	b.n	8006e06 <LPS22HH_SetOutputDataRate_When_Enabled+0x92>
 8006dac:	edd7 7a00 	vldr	s15, [r7]
 8006db0:	eeb3 7a09 	vmov.f32	s14, #57	; 0x41c80000  25.0
 8006db4:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006db8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006dbc:	d801      	bhi.n	8006dc2 <LPS22HH_SetOutputDataRate_When_Enabled+0x4e>
 8006dbe:	2303      	movs	r3, #3
 8006dc0:	e021      	b.n	8006e06 <LPS22HH_SetOutputDataRate_When_Enabled+0x92>
 8006dc2:	edd7 7a00 	vldr	s15, [r7]
 8006dc6:	ed9f 7a21 	vldr	s14, [pc, #132]	; 8006e4c <LPS22HH_SetOutputDataRate_When_Enabled+0xd8>
 8006dca:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006dce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006dd2:	d801      	bhi.n	8006dd8 <LPS22HH_SetOutputDataRate_When_Enabled+0x64>
 8006dd4:	2304      	movs	r3, #4
 8006dd6:	e016      	b.n	8006e06 <LPS22HH_SetOutputDataRate_When_Enabled+0x92>
 8006dd8:	edd7 7a00 	vldr	s15, [r7]
 8006ddc:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 8006e50 <LPS22HH_SetOutputDataRate_When_Enabled+0xdc>
 8006de0:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006de4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006de8:	d801      	bhi.n	8006dee <LPS22HH_SetOutputDataRate_When_Enabled+0x7a>
 8006dea:	2305      	movs	r3, #5
 8006dec:	e00b      	b.n	8006e06 <LPS22HH_SetOutputDataRate_When_Enabled+0x92>
 8006dee:	edd7 7a00 	vldr	s15, [r7]
 8006df2:	ed9f 7a18 	vldr	s14, [pc, #96]	; 8006e54 <LPS22HH_SetOutputDataRate_When_Enabled+0xe0>
 8006df6:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006dfa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006dfe:	d801      	bhi.n	8006e04 <LPS22HH_SetOutputDataRate_When_Enabled+0x90>
 8006e00:	2306      	movs	r3, #6
 8006e02:	e000      	b.n	8006e06 <LPS22HH_SetOutputDataRate_When_Enabled+0x92>
 8006e04:	2307      	movs	r3, #7
  new_odr = (Odr <=   1.0f) ? LPS22HH_1_Hz
 8006e06:	73fb      	strb	r3, [r7, #15]
            : (Odr <=  50.0f) ? LPS22HH_50_Hz
            : (Odr <=  75.0f) ? LPS22HH_75_Hz
            : (Odr <= 100.0f) ? LPS22HH_100_Hz
            :                   LPS22HH_200_Hz;

  if (lps22hh_data_rate_set(&(pObj->Ctx), new_odr) != LPS22HH_OK)
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	3320      	adds	r3, #32
 8006e0c:	7bfa      	ldrb	r2, [r7, #15]
 8006e0e:	4611      	mov	r1, r2
 8006e10:	4618      	mov	r0, r3
 8006e12:	f000 f983 	bl	800711c <lps22hh_data_rate_set>
 8006e16:	4603      	mov	r3, r0
 8006e18:	2b00      	cmp	r3, #0
 8006e1a:	d002      	beq.n	8006e22 <LPS22HH_SetOutputDataRate_When_Enabled+0xae>
  {
    return LPS22HH_ERROR;
 8006e1c:	f04f 33ff 	mov.w	r3, #4294967295
 8006e20:	e00f      	b.n	8006e42 <LPS22HH_SetOutputDataRate_When_Enabled+0xce>
  }

  if (lps22hh_data_rate_get(&(pObj->Ctx), &pObj->last_odr) != LPS22HH_OK)
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	f103 0220 	add.w	r2, r3, #32
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	3333      	adds	r3, #51	; 0x33
 8006e2c:	4619      	mov	r1, r3
 8006e2e:	4610      	mov	r0, r2
 8006e30:	f000 f9c2 	bl	80071b8 <lps22hh_data_rate_get>
 8006e34:	4603      	mov	r3, r0
 8006e36:	2b00      	cmp	r3, #0
 8006e38:	d002      	beq.n	8006e40 <LPS22HH_SetOutputDataRate_When_Enabled+0xcc>
  {
    return LPS22HH_ERROR;
 8006e3a:	f04f 33ff 	mov.w	r3, #4294967295
 8006e3e:	e000      	b.n	8006e42 <LPS22HH_SetOutputDataRate_When_Enabled+0xce>
  }

  return LPS22HH_OK;
 8006e40:	2300      	movs	r3, #0
}
 8006e42:	4618      	mov	r0, r3
 8006e44:	3710      	adds	r7, #16
 8006e46:	46bd      	mov	sp, r7
 8006e48:	bd80      	pop	{r7, pc}
 8006e4a:	bf00      	nop
 8006e4c:	42480000 	.word	0x42480000
 8006e50:	42960000 	.word	0x42960000
 8006e54:	42c80000 	.word	0x42c80000

08006e58 <LPS22HH_SetOutputDataRate_When_Disabled>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value to be set
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LPS22HH_SetOutputDataRate_When_Disabled(LPS22HH_Object_t *pObj, float Odr)
{
 8006e58:	b480      	push	{r7}
 8006e5a:	b083      	sub	sp, #12
 8006e5c:	af00      	add	r7, sp, #0
 8006e5e:	6078      	str	r0, [r7, #4]
 8006e60:	ed87 0a00 	vstr	s0, [r7]
  pObj->last_odr = (Odr <=   1.0f) ? LPS22HH_1_Hz
                   : (Odr <=  10.0f) ? LPS22HH_10_Hz
 8006e64:	edd7 7a00 	vldr	s15, [r7]
 8006e68:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006e6c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006e70:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006e74:	d801      	bhi.n	8006e7a <LPS22HH_SetOutputDataRate_When_Disabled+0x22>
 8006e76:	2301      	movs	r3, #1
 8006e78:	e037      	b.n	8006eea <LPS22HH_SetOutputDataRate_When_Disabled+0x92>
 8006e7a:	edd7 7a00 	vldr	s15, [r7]
 8006e7e:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8006e82:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006e86:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006e8a:	d801      	bhi.n	8006e90 <LPS22HH_SetOutputDataRate_When_Disabled+0x38>
 8006e8c:	2302      	movs	r3, #2
 8006e8e:	e02c      	b.n	8006eea <LPS22HH_SetOutputDataRate_When_Disabled+0x92>
 8006e90:	edd7 7a00 	vldr	s15, [r7]
 8006e94:	eeb3 7a09 	vmov.f32	s14, #57	; 0x41c80000  25.0
 8006e98:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006e9c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006ea0:	d801      	bhi.n	8006ea6 <LPS22HH_SetOutputDataRate_When_Disabled+0x4e>
 8006ea2:	2303      	movs	r3, #3
 8006ea4:	e021      	b.n	8006eea <LPS22HH_SetOutputDataRate_When_Disabled+0x92>
 8006ea6:	edd7 7a00 	vldr	s15, [r7]
 8006eaa:	ed9f 7a15 	vldr	s14, [pc, #84]	; 8006f00 <LPS22HH_SetOutputDataRate_When_Disabled+0xa8>
 8006eae:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006eb2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006eb6:	d801      	bhi.n	8006ebc <LPS22HH_SetOutputDataRate_When_Disabled+0x64>
 8006eb8:	2304      	movs	r3, #4
 8006eba:	e016      	b.n	8006eea <LPS22HH_SetOutputDataRate_When_Disabled+0x92>
 8006ebc:	edd7 7a00 	vldr	s15, [r7]
 8006ec0:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8006f04 <LPS22HH_SetOutputDataRate_When_Disabled+0xac>
 8006ec4:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006ec8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006ecc:	d801      	bhi.n	8006ed2 <LPS22HH_SetOutputDataRate_When_Disabled+0x7a>
 8006ece:	2305      	movs	r3, #5
 8006ed0:	e00b      	b.n	8006eea <LPS22HH_SetOutputDataRate_When_Disabled+0x92>
 8006ed2:	edd7 7a00 	vldr	s15, [r7]
 8006ed6:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 8006f08 <LPS22HH_SetOutputDataRate_When_Disabled+0xb0>
 8006eda:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006ede:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006ee2:	d801      	bhi.n	8006ee8 <LPS22HH_SetOutputDataRate_When_Disabled+0x90>
 8006ee4:	2306      	movs	r3, #6
 8006ee6:	e000      	b.n	8006eea <LPS22HH_SetOutputDataRate_When_Disabled+0x92>
 8006ee8:	2307      	movs	r3, #7
  pObj->last_odr = (Odr <=   1.0f) ? LPS22HH_1_Hz
 8006eea:	687a      	ldr	r2, [r7, #4]
 8006eec:	f882 3033 	strb.w	r3, [r2, #51]	; 0x33
                   : (Odr <=  50.0f) ? LPS22HH_50_Hz
                   : (Odr <=  75.0f) ? LPS22HH_75_Hz
                   : (Odr <= 100.0f) ? LPS22HH_100_Hz
                   :                   LPS22HH_200_Hz;

  return LPS22HH_OK;
 8006ef0:	2300      	movs	r3, #0
}
 8006ef2:	4618      	mov	r0, r3
 8006ef4:	370c      	adds	r7, #12
 8006ef6:	46bd      	mov	sp, r7
 8006ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006efc:	4770      	bx	lr
 8006efe:	bf00      	nop
 8006f00:	42480000 	.word	0x42480000
 8006f04:	42960000 	.word	0x42960000
 8006f08:	42c80000 	.word	0x42c80000

08006f0c <LPS22HH_Initialize>:
  * @brief  Initialize the LPS22HH sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LPS22HH_Initialize(LPS22HH_Object_t *pObj)
{
 8006f0c:	b580      	push	{r7, lr}
 8006f0e:	b082      	sub	sp, #8
 8006f10:	af00      	add	r7, sp, #0
 8006f12:	6078      	str	r0, [r7, #4]
  /* Disable MIPI I3C(SM) interface */
  if (lps22hh_i3c_interface_set(&(pObj->Ctx), LPS22HH_I3C_DISABLE) != LPS22HH_OK)
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	3320      	adds	r3, #32
 8006f18:	2111      	movs	r1, #17
 8006f1a:	4618      	mov	r0, r3
 8006f1c:	f000 fa9d 	bl	800745a <lps22hh_i3c_interface_set>
 8006f20:	4603      	mov	r3, r0
 8006f22:	2b00      	cmp	r3, #0
 8006f24:	d002      	beq.n	8006f2c <LPS22HH_Initialize+0x20>
  {
    return LPS22HH_ERROR;
 8006f26:	f04f 33ff 	mov.w	r3, #4294967295
 8006f2a:	e034      	b.n	8006f96 <LPS22HH_Initialize+0x8a>
  }

  /* Power down the device, set Low Noise Enable (bit 5), clear One Shot (bit 4) */
  if (lps22hh_data_rate_set(&(pObj->Ctx), (lps22hh_odr_t)(LPS22HH_POWER_DOWN | 0x10)) != LPS22HH_OK)
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	3320      	adds	r3, #32
 8006f30:	2110      	movs	r1, #16
 8006f32:	4618      	mov	r0, r3
 8006f34:	f000 f8f2 	bl	800711c <lps22hh_data_rate_set>
 8006f38:	4603      	mov	r3, r0
 8006f3a:	2b00      	cmp	r3, #0
 8006f3c:	d002      	beq.n	8006f44 <LPS22HH_Initialize+0x38>
  {
    return LPS22HH_ERROR;
 8006f3e:	f04f 33ff 	mov.w	r3, #4294967295
 8006f42:	e028      	b.n	8006f96 <LPS22HH_Initialize+0x8a>
  }

  /* Disable low-pass filter on LPS22HH pressure data */
  if (lps22hh_lp_bandwidth_set(&(pObj->Ctx), LPS22HH_LPF_ODR_DIV_2) != LPS22HH_OK)
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	3320      	adds	r3, #32
 8006f48:	2100      	movs	r1, #0
 8006f4a:	4618      	mov	r0, r3
 8006f4c:	f000 fa5f 	bl	800740e <lps22hh_lp_bandwidth_set>
 8006f50:	4603      	mov	r3, r0
 8006f52:	2b00      	cmp	r3, #0
 8006f54:	d002      	beq.n	8006f5c <LPS22HH_Initialize+0x50>
  {
    return LPS22HH_ERROR;
 8006f56:	f04f 33ff 	mov.w	r3, #4294967295
 8006f5a:	e01c      	b.n	8006f96 <LPS22HH_Initialize+0x8a>
  }

  /* Set block data update mode */
  if (lps22hh_block_data_update_set(&(pObj->Ctx), PROPERTY_ENABLE) != LPS22HH_OK)
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	3320      	adds	r3, #32
 8006f60:	2101      	movs	r1, #1
 8006f62:	4618      	mov	r0, r3
 8006f64:	f000 f8b4 	bl	80070d0 <lps22hh_block_data_update_set>
 8006f68:	4603      	mov	r3, r0
 8006f6a:	2b00      	cmp	r3, #0
 8006f6c:	d002      	beq.n	8006f74 <LPS22HH_Initialize+0x68>
  {
    return LPS22HH_ERROR;
 8006f6e:	f04f 33ff 	mov.w	r3, #4294967295
 8006f72:	e010      	b.n	8006f96 <LPS22HH_Initialize+0x8a>
  }

  /* Set autoincrement for multi-byte read/write */
  if (lps22hh_auto_increment_set(&(pObj->Ctx), PROPERTY_ENABLE) != LPS22HH_OK)
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	3320      	adds	r3, #32
 8006f78:	2101      	movs	r1, #1
 8006f7a:	4618      	mov	r0, r3
 8006f7c:	f000 fa21 	bl	80073c2 <lps22hh_auto_increment_set>
 8006f80:	4603      	mov	r3, r0
 8006f82:	2b00      	cmp	r3, #0
 8006f84:	d002      	beq.n	8006f8c <LPS22HH_Initialize+0x80>
  {
    return LPS22HH_ERROR;
 8006f86:	f04f 33ff 	mov.w	r3, #4294967295
 8006f8a:	e004      	b.n	8006f96 <LPS22HH_Initialize+0x8a>
  }

  pObj->last_odr = LPS22HH_25_Hz;
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	2203      	movs	r2, #3
 8006f90:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33

  return LPS22HH_OK;
 8006f94:	2300      	movs	r3, #0
}
 8006f96:	4618      	mov	r0, r3
 8006f98:	3708      	adds	r7, #8
 8006f9a:	46bd      	mov	sp, r7
 8006f9c:	bd80      	pop	{r7, pc}

08006f9e <ReadRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t ReadRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8006f9e:	b590      	push	{r4, r7, lr}
 8006fa0:	b087      	sub	sp, #28
 8006fa2:	af00      	add	r7, sp, #0
 8006fa4:	60f8      	str	r0, [r7, #12]
 8006fa6:	607a      	str	r2, [r7, #4]
 8006fa8:	461a      	mov	r2, r3
 8006faa:	460b      	mov	r3, r1
 8006fac:	72fb      	strb	r3, [r7, #11]
 8006fae:	4613      	mov	r3, r2
 8006fb0:	813b      	strh	r3, [r7, #8]
  LPS22HH_Object_t *pObj = (LPS22HH_Object_t *)Handle;
 8006fb2:	68fb      	ldr	r3, [r7, #12]
 8006fb4:	617b      	str	r3, [r7, #20]

  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 8006fb6:	697b      	ldr	r3, [r7, #20]
 8006fb8:	695c      	ldr	r4, [r3, #20]
 8006fba:	697b      	ldr	r3, [r7, #20]
 8006fbc:	7b1b      	ldrb	r3, [r3, #12]
 8006fbe:	b298      	uxth	r0, r3
 8006fc0:	7afb      	ldrb	r3, [r7, #11]
 8006fc2:	b299      	uxth	r1, r3
 8006fc4:	893b      	ldrh	r3, [r7, #8]
 8006fc6:	687a      	ldr	r2, [r7, #4]
 8006fc8:	47a0      	blx	r4
 8006fca:	4603      	mov	r3, r0
}
 8006fcc:	4618      	mov	r0, r3
 8006fce:	371c      	adds	r7, #28
 8006fd0:	46bd      	mov	sp, r7
 8006fd2:	bd90      	pop	{r4, r7, pc}

08006fd4 <WriteRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t WriteRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8006fd4:	b590      	push	{r4, r7, lr}
 8006fd6:	b087      	sub	sp, #28
 8006fd8:	af00      	add	r7, sp, #0
 8006fda:	60f8      	str	r0, [r7, #12]
 8006fdc:	607a      	str	r2, [r7, #4]
 8006fde:	461a      	mov	r2, r3
 8006fe0:	460b      	mov	r3, r1
 8006fe2:	72fb      	strb	r3, [r7, #11]
 8006fe4:	4613      	mov	r3, r2
 8006fe6:	813b      	strh	r3, [r7, #8]
  LPS22HH_Object_t *pObj = (LPS22HH_Object_t *)Handle;
 8006fe8:	68fb      	ldr	r3, [r7, #12]
 8006fea:	617b      	str	r3, [r7, #20]

  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 8006fec:	697b      	ldr	r3, [r7, #20]
 8006fee:	691c      	ldr	r4, [r3, #16]
 8006ff0:	697b      	ldr	r3, [r7, #20]
 8006ff2:	7b1b      	ldrb	r3, [r3, #12]
 8006ff4:	b298      	uxth	r0, r3
 8006ff6:	7afb      	ldrb	r3, [r7, #11]
 8006ff8:	b299      	uxth	r1, r3
 8006ffa:	893b      	ldrh	r3, [r7, #8]
 8006ffc:	687a      	ldr	r2, [r7, #4]
 8006ffe:	47a0      	blx	r4
 8007000:	4603      	mov	r3, r0
}
 8007002:	4618      	mov	r0, r3
 8007004:	371c      	adds	r7, #28
 8007006:	46bd      	mov	sp, r7
 8007008:	bd90      	pop	{r4, r7, pc}

0800700a <lps22hh_read_reg>:
  *
  */
int32_t __weak lps22hh_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                                uint8_t *data,
                                uint16_t len)
{
 800700a:	b590      	push	{r4, r7, lr}
 800700c:	b087      	sub	sp, #28
 800700e:	af00      	add	r7, sp, #0
 8007010:	60f8      	str	r0, [r7, #12]
 8007012:	607a      	str	r2, [r7, #4]
 8007014:	461a      	mov	r2, r3
 8007016:	460b      	mov	r3, r1
 8007018:	72fb      	strb	r3, [r7, #11]
 800701a:	4613      	mov	r3, r2
 800701c:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 800701e:	68fb      	ldr	r3, [r7, #12]
 8007020:	685c      	ldr	r4, [r3, #4]
 8007022:	68fb      	ldr	r3, [r7, #12]
 8007024:	68d8      	ldr	r0, [r3, #12]
 8007026:	893b      	ldrh	r3, [r7, #8]
 8007028:	7af9      	ldrb	r1, [r7, #11]
 800702a:	687a      	ldr	r2, [r7, #4]
 800702c:	47a0      	blx	r4
 800702e:	6178      	str	r0, [r7, #20]

  return ret;
 8007030:	697b      	ldr	r3, [r7, #20]
}
 8007032:	4618      	mov	r0, r3
 8007034:	371c      	adds	r7, #28
 8007036:	46bd      	mov	sp, r7
 8007038:	bd90      	pop	{r4, r7, pc}

0800703a <lps22hh_write_reg>:
  *
  */
int32_t __weak lps22hh_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                                 uint8_t *data,
                                 uint16_t len)
{
 800703a:	b590      	push	{r4, r7, lr}
 800703c:	b087      	sub	sp, #28
 800703e:	af00      	add	r7, sp, #0
 8007040:	60f8      	str	r0, [r7, #12]
 8007042:	607a      	str	r2, [r7, #4]
 8007044:	461a      	mov	r2, r3
 8007046:	460b      	mov	r3, r1
 8007048:	72fb      	strb	r3, [r7, #11]
 800704a:	4613      	mov	r3, r2
 800704c:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 800704e:	68fb      	ldr	r3, [r7, #12]
 8007050:	681c      	ldr	r4, [r3, #0]
 8007052:	68fb      	ldr	r3, [r7, #12]
 8007054:	68d8      	ldr	r0, [r3, #12]
 8007056:	893b      	ldrh	r3, [r7, #8]
 8007058:	7af9      	ldrb	r1, [r7, #11]
 800705a:	687a      	ldr	r2, [r7, #4]
 800705c:	47a0      	blx	r4
 800705e:	6178      	str	r0, [r7, #20]

  return ret;
 8007060:	697b      	ldr	r3, [r7, #20]
}
 8007062:	4618      	mov	r0, r3
 8007064:	371c      	adds	r7, #28
 8007066:	46bd      	mov	sp, r7
 8007068:	bd90      	pop	{r4, r7, pc}
	...

0800706c <lps22hh_from_lsb_to_hpa>:
  * @brief       These functions convert raw-data into engineering units.
  * @{
  *
  */
float_t lps22hh_from_lsb_to_hpa(uint32_t lsb)
{
 800706c:	b480      	push	{r7}
 800706e:	b083      	sub	sp, #12
 8007070:	af00      	add	r7, sp, #0
 8007072:	6078      	str	r0, [r7, #4]
  return ((float_t) lsb / 1048576.0f);
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	ee07 3a90 	vmov	s15, r3
 800707a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800707e:	ed9f 7a06 	vldr	s14, [pc, #24]	; 8007098 <lps22hh_from_lsb_to_hpa+0x2c>
 8007082:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8007086:	eef0 7a66 	vmov.f32	s15, s13
}
 800708a:	eeb0 0a67 	vmov.f32	s0, s15
 800708e:	370c      	adds	r7, #12
 8007090:	46bd      	mov	sp, r7
 8007092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007096:	4770      	bx	lr
 8007098:	49800000 	.word	0x49800000

0800709c <lps22hh_from_lsb_to_celsius>:

float_t lps22hh_from_lsb_to_celsius(int16_t lsb)
{
 800709c:	b480      	push	{r7}
 800709e:	b083      	sub	sp, #12
 80070a0:	af00      	add	r7, sp, #0
 80070a2:	4603      	mov	r3, r0
 80070a4:	80fb      	strh	r3, [r7, #6]
  return ((float_t) lsb / 100.0f);
 80070a6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80070aa:	ee07 3a90 	vmov	s15, r3
 80070ae:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80070b2:	ed9f 7a06 	vldr	s14, [pc, #24]	; 80070cc <lps22hh_from_lsb_to_celsius+0x30>
 80070b6:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80070ba:	eef0 7a66 	vmov.f32	s15, s13
}
 80070be:	eeb0 0a67 	vmov.f32	s0, s15
 80070c2:	370c      	adds	r7, #12
 80070c4:	46bd      	mov	sp, r7
 80070c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070ca:	4770      	bx	lr
 80070cc:	42c80000 	.word	0x42c80000

080070d0 <lps22hh_block_data_update_set>:
  * @param  val      change the values of bdu in reg CTRL_REG1
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
 80070d0:	b580      	push	{r7, lr}
 80070d2:	b084      	sub	sp, #16
 80070d4:	af00      	add	r7, sp, #0
 80070d6:	6078      	str	r0, [r7, #4]
 80070d8:	460b      	mov	r3, r1
 80070da:	70fb      	strb	r3, [r7, #3]
  lps22hh_ctrl_reg1_t reg;
  int32_t ret;

  ret = lps22hh_read_reg(ctx, LPS22HH_CTRL_REG1, (uint8_t *) &reg, 1);
 80070dc:	f107 0208 	add.w	r2, r7, #8
 80070e0:	2301      	movs	r3, #1
 80070e2:	2110      	movs	r1, #16
 80070e4:	6878      	ldr	r0, [r7, #4]
 80070e6:	f7ff ff90 	bl	800700a <lps22hh_read_reg>
 80070ea:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 80070ec:	68fb      	ldr	r3, [r7, #12]
 80070ee:	2b00      	cmp	r3, #0
 80070f0:	d10f      	bne.n	8007112 <lps22hh_block_data_update_set+0x42>
  {
    reg.bdu = val;
 80070f2:	78fb      	ldrb	r3, [r7, #3]
 80070f4:	f003 0301 	and.w	r3, r3, #1
 80070f8:	b2da      	uxtb	r2, r3
 80070fa:	7a3b      	ldrb	r3, [r7, #8]
 80070fc:	f362 0341 	bfi	r3, r2, #1, #1
 8007100:	723b      	strb	r3, [r7, #8]
    ret = lps22hh_write_reg(ctx, LPS22HH_CTRL_REG1, (uint8_t *) &reg, 1);
 8007102:	f107 0208 	add.w	r2, r7, #8
 8007106:	2301      	movs	r3, #1
 8007108:	2110      	movs	r1, #16
 800710a:	6878      	ldr	r0, [r7, #4]
 800710c:	f7ff ff95 	bl	800703a <lps22hh_write_reg>
 8007110:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8007112:	68fb      	ldr	r3, [r7, #12]
}
 8007114:	4618      	mov	r0, r3
 8007116:	3710      	adds	r7, #16
 8007118:	46bd      	mov	sp, r7
 800711a:	bd80      	pop	{r7, pc}

0800711c <lps22hh_data_rate_set>:
  * @param  val      change the values of odr in reg CTRL_REG1
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_data_rate_set(stmdev_ctx_t *ctx, lps22hh_odr_t val)
{
 800711c:	b580      	push	{r7, lr}
 800711e:	b086      	sub	sp, #24
 8007120:	af00      	add	r7, sp, #0
 8007122:	6078      	str	r0, [r7, #4]
 8007124:	460b      	mov	r3, r1
 8007126:	70fb      	strb	r3, [r7, #3]
  lps22hh_ctrl_reg1_t ctrl_reg1;
  lps22hh_ctrl_reg2_t ctrl_reg2;
  int32_t ret;

  ret = lps22hh_read_reg(ctx, LPS22HH_CTRL_REG1, (uint8_t *)&ctrl_reg1, 1);
 8007128:	f107 0210 	add.w	r2, r7, #16
 800712c:	2301      	movs	r3, #1
 800712e:	2110      	movs	r1, #16
 8007130:	6878      	ldr	r0, [r7, #4]
 8007132:	f7ff ff6a 	bl	800700a <lps22hh_read_reg>
 8007136:	6178      	str	r0, [r7, #20]

  if (ret == 0)
 8007138:	697b      	ldr	r3, [r7, #20]
 800713a:	2b00      	cmp	r3, #0
 800713c:	d107      	bne.n	800714e <lps22hh_data_rate_set+0x32>
  {
    ret = lps22hh_read_reg(ctx, LPS22HH_CTRL_REG2, (uint8_t *)&ctrl_reg2, 1);
 800713e:	f107 020c 	add.w	r2, r7, #12
 8007142:	2301      	movs	r3, #1
 8007144:	2111      	movs	r1, #17
 8007146:	6878      	ldr	r0, [r7, #4]
 8007148:	f7ff ff5f 	bl	800700a <lps22hh_read_reg>
 800714c:	6178      	str	r0, [r7, #20]
  }

  if (ret == 0)
 800714e:	697b      	ldr	r3, [r7, #20]
 8007150:	2b00      	cmp	r3, #0
 8007152:	d10f      	bne.n	8007174 <lps22hh_data_rate_set+0x58>
  {
    ctrl_reg1.odr = (uint8_t)val & 0x07U;
 8007154:	78fb      	ldrb	r3, [r7, #3]
 8007156:	f003 0307 	and.w	r3, r3, #7
 800715a:	b2da      	uxtb	r2, r3
 800715c:	7c3b      	ldrb	r3, [r7, #16]
 800715e:	f362 1306 	bfi	r3, r2, #4, #3
 8007162:	743b      	strb	r3, [r7, #16]
    ret = lps22hh_write_reg(ctx, LPS22HH_CTRL_REG1, (uint8_t *)&ctrl_reg1, 1);
 8007164:	f107 0210 	add.w	r2, r7, #16
 8007168:	2301      	movs	r3, #1
 800716a:	2110      	movs	r1, #16
 800716c:	6878      	ldr	r0, [r7, #4]
 800716e:	f7ff ff64 	bl	800703a <lps22hh_write_reg>
 8007172:	6178      	str	r0, [r7, #20]
  }

  if (ret == 0)
 8007174:	697b      	ldr	r3, [r7, #20]
 8007176:	2b00      	cmp	r3, #0
 8007178:	d119      	bne.n	80071ae <lps22hh_data_rate_set+0x92>
  {
    ctrl_reg2.low_noise_en = ((uint8_t)val & 0x10U) >> 4;
 800717a:	78fb      	ldrb	r3, [r7, #3]
 800717c:	091b      	lsrs	r3, r3, #4
 800717e:	f003 0301 	and.w	r3, r3, #1
 8007182:	b2da      	uxtb	r2, r3
 8007184:	7b3b      	ldrb	r3, [r7, #12]
 8007186:	f362 0341 	bfi	r3, r2, #1, #1
 800718a:	733b      	strb	r3, [r7, #12]
    ctrl_reg2.one_shot = ((uint8_t)val & 0x08U) >> 3;
 800718c:	78fb      	ldrb	r3, [r7, #3]
 800718e:	08db      	lsrs	r3, r3, #3
 8007190:	f003 0301 	and.w	r3, r3, #1
 8007194:	b2da      	uxtb	r2, r3
 8007196:	7b3b      	ldrb	r3, [r7, #12]
 8007198:	f362 0300 	bfi	r3, r2, #0, #1
 800719c:	733b      	strb	r3, [r7, #12]
    ret = lps22hh_write_reg(ctx, LPS22HH_CTRL_REG2, (uint8_t *)&ctrl_reg2, 1);
 800719e:	f107 020c 	add.w	r2, r7, #12
 80071a2:	2301      	movs	r3, #1
 80071a4:	2111      	movs	r1, #17
 80071a6:	6878      	ldr	r0, [r7, #4]
 80071a8:	f7ff ff47 	bl	800703a <lps22hh_write_reg>
 80071ac:	6178      	str	r0, [r7, #20]
  }

  return ret;
 80071ae:	697b      	ldr	r3, [r7, #20]
}
 80071b0:	4618      	mov	r0, r3
 80071b2:	3718      	adds	r7, #24
 80071b4:	46bd      	mov	sp, r7
 80071b6:	bd80      	pop	{r7, pc}

080071b8 <lps22hh_data_rate_get>:
  * @param  val      Get the values of odr in reg CTRL_REG1
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_data_rate_get(stmdev_ctx_t *ctx, lps22hh_odr_t *val)
{
 80071b8:	b580      	push	{r7, lr}
 80071ba:	b086      	sub	sp, #24
 80071bc:	af00      	add	r7, sp, #0
 80071be:	6078      	str	r0, [r7, #4]
 80071c0:	6039      	str	r1, [r7, #0]
  lps22hh_ctrl_reg1_t ctrl_reg1;
  lps22hh_ctrl_reg2_t ctrl_reg2;
  int32_t ret;

  ret = lps22hh_read_reg(ctx, LPS22HH_CTRL_REG1, (uint8_t *)&ctrl_reg1, 1);
 80071c2:	f107 0210 	add.w	r2, r7, #16
 80071c6:	2301      	movs	r3, #1
 80071c8:	2110      	movs	r1, #16
 80071ca:	6878      	ldr	r0, [r7, #4]
 80071cc:	f7ff ff1d 	bl	800700a <lps22hh_read_reg>
 80071d0:	6178      	str	r0, [r7, #20]

  if (ret == 0)
 80071d2:	697b      	ldr	r3, [r7, #20]
 80071d4:	2b00      	cmp	r3, #0
 80071d6:	d107      	bne.n	80071e8 <lps22hh_data_rate_get+0x30>
  {
    ret = lps22hh_read_reg(ctx, LPS22HH_CTRL_REG2, (uint8_t *)&ctrl_reg2, 1);
 80071d8:	f107 020c 	add.w	r2, r7, #12
 80071dc:	2301      	movs	r3, #1
 80071de:	2111      	movs	r1, #17
 80071e0:	6878      	ldr	r0, [r7, #4]
 80071e2:	f7ff ff12 	bl	800700a <lps22hh_read_reg>
 80071e6:	6178      	str	r0, [r7, #20]
  }

  if (ret == 0)
 80071e8:	697b      	ldr	r3, [r7, #20]
 80071ea:	2b00      	cmp	r3, #0
 80071ec:	f040 8086 	bne.w	80072fc <lps22hh_data_rate_get+0x144>
  {
    ret = lps22hh_read_reg(ctx, LPS22HH_CTRL_REG2, (uint8_t *)&ctrl_reg2, 1);
 80071f0:	f107 020c 	add.w	r2, r7, #12
 80071f4:	2301      	movs	r3, #1
 80071f6:	2111      	movs	r1, #17
 80071f8:	6878      	ldr	r0, [r7, #4]
 80071fa:	f7ff ff06 	bl	800700a <lps22hh_read_reg>
 80071fe:	6178      	str	r0, [r7, #20]

    switch (((ctrl_reg2.low_noise_en << 4) + (ctrl_reg2.one_shot << 3) +
 8007200:	7b3b      	ldrb	r3, [r7, #12]
 8007202:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8007206:	b2db      	uxtb	r3, r3
 8007208:	011a      	lsls	r2, r3, #4
 800720a:	7b3b      	ldrb	r3, [r7, #12]
 800720c:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8007210:	b2db      	uxtb	r3, r3
 8007212:	00db      	lsls	r3, r3, #3
 8007214:	4413      	add	r3, r2
             ctrl_reg1.odr))
 8007216:	7c3a      	ldrb	r2, [r7, #16]
 8007218:	f3c2 1202 	ubfx	r2, r2, #4, #3
 800721c:	b2d2      	uxtb	r2, r2
    switch (((ctrl_reg2.low_noise_en << 4) + (ctrl_reg2.one_shot << 3) +
 800721e:	4413      	add	r3, r2
 8007220:	2b15      	cmp	r3, #21
 8007222:	d867      	bhi.n	80072f4 <lps22hh_data_rate_get+0x13c>
 8007224:	a201      	add	r2, pc, #4	; (adr r2, 800722c <lps22hh_data_rate_get+0x74>)
 8007226:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800722a:	bf00      	nop
 800722c:	08007285 	.word	0x08007285
 8007230:	08007295 	.word	0x08007295
 8007234:	0800729d 	.word	0x0800729d
 8007238:	080072a5 	.word	0x080072a5
 800723c:	080072ad 	.word	0x080072ad
 8007240:	080072b5 	.word	0x080072b5
 8007244:	080072e5 	.word	0x080072e5
 8007248:	080072ed 	.word	0x080072ed
 800724c:	0800728d 	.word	0x0800728d
 8007250:	080072f5 	.word	0x080072f5
 8007254:	080072f5 	.word	0x080072f5
 8007258:	080072f5 	.word	0x080072f5
 800725c:	080072f5 	.word	0x080072f5
 8007260:	080072f5 	.word	0x080072f5
 8007264:	080072f5 	.word	0x080072f5
 8007268:	080072f5 	.word	0x080072f5
 800726c:	080072f5 	.word	0x080072f5
 8007270:	080072bd 	.word	0x080072bd
 8007274:	080072c5 	.word	0x080072c5
 8007278:	080072cd 	.word	0x080072cd
 800727c:	080072d5 	.word	0x080072d5
 8007280:	080072dd 	.word	0x080072dd
    {
      case LPS22HH_POWER_DOWN:
        *val = LPS22HH_POWER_DOWN;
 8007284:	683b      	ldr	r3, [r7, #0]
 8007286:	2200      	movs	r2, #0
 8007288:	701a      	strb	r2, [r3, #0]
        break;
 800728a:	e038      	b.n	80072fe <lps22hh_data_rate_get+0x146>

      case LPS22HH_ONE_SHOOT:
        *val = LPS22HH_ONE_SHOOT;
 800728c:	683b      	ldr	r3, [r7, #0]
 800728e:	2208      	movs	r2, #8
 8007290:	701a      	strb	r2, [r3, #0]
        break;
 8007292:	e034      	b.n	80072fe <lps22hh_data_rate_get+0x146>

      case LPS22HH_1_Hz:
        *val = LPS22HH_1_Hz;
 8007294:	683b      	ldr	r3, [r7, #0]
 8007296:	2201      	movs	r2, #1
 8007298:	701a      	strb	r2, [r3, #0]
        break;
 800729a:	e030      	b.n	80072fe <lps22hh_data_rate_get+0x146>

      case LPS22HH_10_Hz:
        *val = LPS22HH_10_Hz;
 800729c:	683b      	ldr	r3, [r7, #0]
 800729e:	2202      	movs	r2, #2
 80072a0:	701a      	strb	r2, [r3, #0]
        break;
 80072a2:	e02c      	b.n	80072fe <lps22hh_data_rate_get+0x146>

      case LPS22HH_25_Hz:
        *val = LPS22HH_25_Hz;
 80072a4:	683b      	ldr	r3, [r7, #0]
 80072a6:	2203      	movs	r2, #3
 80072a8:	701a      	strb	r2, [r3, #0]
        break;
 80072aa:	e028      	b.n	80072fe <lps22hh_data_rate_get+0x146>

      case LPS22HH_50_Hz:
        *val = LPS22HH_50_Hz;
 80072ac:	683b      	ldr	r3, [r7, #0]
 80072ae:	2204      	movs	r2, #4
 80072b0:	701a      	strb	r2, [r3, #0]
        break;
 80072b2:	e024      	b.n	80072fe <lps22hh_data_rate_get+0x146>

      case LPS22HH_75_Hz:
        *val = LPS22HH_75_Hz;
 80072b4:	683b      	ldr	r3, [r7, #0]
 80072b6:	2205      	movs	r2, #5
 80072b8:	701a      	strb	r2, [r3, #0]
        break;
 80072ba:	e020      	b.n	80072fe <lps22hh_data_rate_get+0x146>

      case LPS22HH_1_Hz_LOW_NOISE:
        *val = LPS22HH_1_Hz_LOW_NOISE;
 80072bc:	683b      	ldr	r3, [r7, #0]
 80072be:	2211      	movs	r2, #17
 80072c0:	701a      	strb	r2, [r3, #0]
        break;
 80072c2:	e01c      	b.n	80072fe <lps22hh_data_rate_get+0x146>

      case LPS22HH_10_Hz_LOW_NOISE:
        *val = LPS22HH_10_Hz_LOW_NOISE;
 80072c4:	683b      	ldr	r3, [r7, #0]
 80072c6:	2212      	movs	r2, #18
 80072c8:	701a      	strb	r2, [r3, #0]
        break;
 80072ca:	e018      	b.n	80072fe <lps22hh_data_rate_get+0x146>

      case LPS22HH_25_Hz_LOW_NOISE:
        *val = LPS22HH_25_Hz_LOW_NOISE;
 80072cc:	683b      	ldr	r3, [r7, #0]
 80072ce:	2213      	movs	r2, #19
 80072d0:	701a      	strb	r2, [r3, #0]
        break;
 80072d2:	e014      	b.n	80072fe <lps22hh_data_rate_get+0x146>

      case LPS22HH_50_Hz_LOW_NOISE:
        *val = LPS22HH_50_Hz_LOW_NOISE;
 80072d4:	683b      	ldr	r3, [r7, #0]
 80072d6:	2214      	movs	r2, #20
 80072d8:	701a      	strb	r2, [r3, #0]
        break;
 80072da:	e010      	b.n	80072fe <lps22hh_data_rate_get+0x146>

      case LPS22HH_75_Hz_LOW_NOISE:
        *val = LPS22HH_75_Hz_LOW_NOISE;
 80072dc:	683b      	ldr	r3, [r7, #0]
 80072de:	2215      	movs	r2, #21
 80072e0:	701a      	strb	r2, [r3, #0]
        break;
 80072e2:	e00c      	b.n	80072fe <lps22hh_data_rate_get+0x146>

      case LPS22HH_100_Hz:
        *val = LPS22HH_100_Hz;
 80072e4:	683b      	ldr	r3, [r7, #0]
 80072e6:	2206      	movs	r2, #6
 80072e8:	701a      	strb	r2, [r3, #0]
        break;
 80072ea:	e008      	b.n	80072fe <lps22hh_data_rate_get+0x146>

      case LPS22HH_200_Hz:
        *val = LPS22HH_200_Hz;
 80072ec:	683b      	ldr	r3, [r7, #0]
 80072ee:	2207      	movs	r2, #7
 80072f0:	701a      	strb	r2, [r3, #0]
        break;
 80072f2:	e004      	b.n	80072fe <lps22hh_data_rate_get+0x146>

      default:
        *val = LPS22HH_POWER_DOWN;
 80072f4:	683b      	ldr	r3, [r7, #0]
 80072f6:	2200      	movs	r2, #0
 80072f8:	701a      	strb	r2, [r3, #0]
        break;
 80072fa:	e000      	b.n	80072fe <lps22hh_data_rate_get+0x146>
    }
  }
 80072fc:	bf00      	nop

  return ret;
 80072fe:	697b      	ldr	r3, [r7, #20]
}
 8007300:	4618      	mov	r0, r3
 8007302:	3718      	adds	r7, #24
 8007304:	46bd      	mov	sp, r7
 8007306:	bd80      	pop	{r7, pc}

08007308 <lps22hh_pressure_raw_get>:
  * @param  buff     buffer that stores data read
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_pressure_raw_get(stmdev_ctx_t *ctx, uint32_t *buff)
{
 8007308:	b580      	push	{r7, lr}
 800730a:	b084      	sub	sp, #16
 800730c:	af00      	add	r7, sp, #0
 800730e:	6078      	str	r0, [r7, #4]
 8007310:	6039      	str	r1, [r7, #0]
  int32_t ret;

  uint8_t reg[3];
  ret =  lps22hh_read_reg(ctx, LPS22HH_PRESS_OUT_XL, reg, 3);
 8007312:	f107 0208 	add.w	r2, r7, #8
 8007316:	2303      	movs	r3, #3
 8007318:	2128      	movs	r1, #40	; 0x28
 800731a:	6878      	ldr	r0, [r7, #4]
 800731c:	f7ff fe75 	bl	800700a <lps22hh_read_reg>
 8007320:	60f8      	str	r0, [r7, #12]
  *buff = reg[2];
 8007322:	7abb      	ldrb	r3, [r7, #10]
 8007324:	461a      	mov	r2, r3
 8007326:	683b      	ldr	r3, [r7, #0]
 8007328:	601a      	str	r2, [r3, #0]
  *buff = (*buff * 256) + reg[1];
 800732a:	683b      	ldr	r3, [r7, #0]
 800732c:	681b      	ldr	r3, [r3, #0]
 800732e:	021b      	lsls	r3, r3, #8
 8007330:	7a7a      	ldrb	r2, [r7, #9]
 8007332:	441a      	add	r2, r3
 8007334:	683b      	ldr	r3, [r7, #0]
 8007336:	601a      	str	r2, [r3, #0]
  *buff = (*buff * 256) + reg[0];
 8007338:	683b      	ldr	r3, [r7, #0]
 800733a:	681b      	ldr	r3, [r3, #0]
 800733c:	021b      	lsls	r3, r3, #8
 800733e:	7a3a      	ldrb	r2, [r7, #8]
 8007340:	441a      	add	r2, r3
 8007342:	683b      	ldr	r3, [r7, #0]
 8007344:	601a      	str	r2, [r3, #0]
  *buff *= 256;
 8007346:	683b      	ldr	r3, [r7, #0]
 8007348:	681b      	ldr	r3, [r3, #0]
 800734a:	021a      	lsls	r2, r3, #8
 800734c:	683b      	ldr	r3, [r7, #0]
 800734e:	601a      	str	r2, [r3, #0]

  return ret;
 8007350:	68fb      	ldr	r3, [r7, #12]
}
 8007352:	4618      	mov	r0, r3
 8007354:	3710      	adds	r7, #16
 8007356:	46bd      	mov	sp, r7
 8007358:	bd80      	pop	{r7, pc}

0800735a <lps22hh_temperature_raw_get>:
  * @param  buff     buffer that stores data read
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_temperature_raw_get(stmdev_ctx_t *ctx, int16_t *buff)
{
 800735a:	b580      	push	{r7, lr}
 800735c:	b084      	sub	sp, #16
 800735e:	af00      	add	r7, sp, #0
 8007360:	6078      	str	r0, [r7, #4]
 8007362:	6039      	str	r1, [r7, #0]
  int32_t ret;

  uint8_t reg[2];
  ret =  lps22hh_read_reg(ctx, LPS22HH_TEMP_OUT_L, reg, 2);
 8007364:	f107 0208 	add.w	r2, r7, #8
 8007368:	2302      	movs	r3, #2
 800736a:	212b      	movs	r1, #43	; 0x2b
 800736c:	6878      	ldr	r0, [r7, #4]
 800736e:	f7ff fe4c 	bl	800700a <lps22hh_read_reg>
 8007372:	60f8      	str	r0, [r7, #12]
  *buff = reg[1];
 8007374:	7a7b      	ldrb	r3, [r7, #9]
 8007376:	b21a      	sxth	r2, r3
 8007378:	683b      	ldr	r3, [r7, #0]
 800737a:	801a      	strh	r2, [r3, #0]
  *buff = (*buff * 256) + reg[0];
 800737c:	683b      	ldr	r3, [r7, #0]
 800737e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007382:	b29b      	uxth	r3, r3
 8007384:	021b      	lsls	r3, r3, #8
 8007386:	b29a      	uxth	r2, r3
 8007388:	7a3b      	ldrb	r3, [r7, #8]
 800738a:	b29b      	uxth	r3, r3
 800738c:	4413      	add	r3, r2
 800738e:	b29b      	uxth	r3, r3
 8007390:	b21a      	sxth	r2, r3
 8007392:	683b      	ldr	r3, [r7, #0]
 8007394:	801a      	strh	r2, [r3, #0]

  return ret;
 8007396:	68fb      	ldr	r3, [r7, #12]
}
 8007398:	4618      	mov	r0, r3
 800739a:	3710      	adds	r7, #16
 800739c:	46bd      	mov	sp, r7
 800739e:	bd80      	pop	{r7, pc}

080073a0 <lps22hh_device_id_get>:
  * @param  buff     buffer that stores data read
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 80073a0:	b580      	push	{r7, lr}
 80073a2:	b084      	sub	sp, #16
 80073a4:	af00      	add	r7, sp, #0
 80073a6:	6078      	str	r0, [r7, #4]
 80073a8:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret =  lps22hh_read_reg(ctx, LPS22HH_WHO_AM_I, buff, 1);
 80073aa:	2301      	movs	r3, #1
 80073ac:	683a      	ldr	r2, [r7, #0]
 80073ae:	210f      	movs	r1, #15
 80073b0:	6878      	ldr	r0, [r7, #4]
 80073b2:	f7ff fe2a 	bl	800700a <lps22hh_read_reg>
 80073b6:	60f8      	str	r0, [r7, #12]

  return ret;
 80073b8:	68fb      	ldr	r3, [r7, #12]
}
 80073ba:	4618      	mov	r0, r3
 80073bc:	3710      	adds	r7, #16
 80073be:	46bd      	mov	sp, r7
 80073c0:	bd80      	pop	{r7, pc}

080073c2 <lps22hh_auto_increment_set>:
  * @param  val      change the values of if_add_inc in reg CTRL_REG2
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_auto_increment_set(stmdev_ctx_t *ctx, uint8_t val)
{
 80073c2:	b580      	push	{r7, lr}
 80073c4:	b084      	sub	sp, #16
 80073c6:	af00      	add	r7, sp, #0
 80073c8:	6078      	str	r0, [r7, #4]
 80073ca:	460b      	mov	r3, r1
 80073cc:	70fb      	strb	r3, [r7, #3]
  lps22hh_ctrl_reg2_t reg;
  int32_t ret;

  ret = lps22hh_read_reg(ctx, LPS22HH_CTRL_REG2, (uint8_t *) &reg, 1);
 80073ce:	f107 0208 	add.w	r2, r7, #8
 80073d2:	2301      	movs	r3, #1
 80073d4:	2111      	movs	r1, #17
 80073d6:	6878      	ldr	r0, [r7, #4]
 80073d8:	f7ff fe17 	bl	800700a <lps22hh_read_reg>
 80073dc:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 80073de:	68fb      	ldr	r3, [r7, #12]
 80073e0:	2b00      	cmp	r3, #0
 80073e2:	d10f      	bne.n	8007404 <lps22hh_auto_increment_set+0x42>
  {
    reg.if_add_inc = val;
 80073e4:	78fb      	ldrb	r3, [r7, #3]
 80073e6:	f003 0301 	and.w	r3, r3, #1
 80073ea:	b2da      	uxtb	r2, r3
 80073ec:	7a3b      	ldrb	r3, [r7, #8]
 80073ee:	f362 1304 	bfi	r3, r2, #4, #1
 80073f2:	723b      	strb	r3, [r7, #8]
    ret = lps22hh_write_reg(ctx, LPS22HH_CTRL_REG2, (uint8_t *) &reg, 1);
 80073f4:	f107 0208 	add.w	r2, r7, #8
 80073f8:	2301      	movs	r3, #1
 80073fa:	2111      	movs	r1, #17
 80073fc:	6878      	ldr	r0, [r7, #4]
 80073fe:	f7ff fe1c 	bl	800703a <lps22hh_write_reg>
 8007402:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8007404:	68fb      	ldr	r3, [r7, #12]
}
 8007406:	4618      	mov	r0, r3
 8007408:	3710      	adds	r7, #16
 800740a:	46bd      	mov	sp, r7
 800740c:	bd80      	pop	{r7, pc}

0800740e <lps22hh_lp_bandwidth_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_lp_bandwidth_set(stmdev_ctx_t *ctx,
                                 lps22hh_lpfp_cfg_t val)
{
 800740e:	b580      	push	{r7, lr}
 8007410:	b084      	sub	sp, #16
 8007412:	af00      	add	r7, sp, #0
 8007414:	6078      	str	r0, [r7, #4]
 8007416:	460b      	mov	r3, r1
 8007418:	70fb      	strb	r3, [r7, #3]
  lps22hh_ctrl_reg1_t reg;
  int32_t ret;

  ret = lps22hh_read_reg(ctx, LPS22HH_CTRL_REG1, (uint8_t *) &reg, 1);
 800741a:	f107 0208 	add.w	r2, r7, #8
 800741e:	2301      	movs	r3, #1
 8007420:	2110      	movs	r1, #16
 8007422:	6878      	ldr	r0, [r7, #4]
 8007424:	f7ff fdf1 	bl	800700a <lps22hh_read_reg>
 8007428:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 800742a:	68fb      	ldr	r3, [r7, #12]
 800742c:	2b00      	cmp	r3, #0
 800742e:	d10f      	bne.n	8007450 <lps22hh_lp_bandwidth_set+0x42>
  {
    reg.lpfp_cfg = (uint8_t)val;
 8007430:	78fb      	ldrb	r3, [r7, #3]
 8007432:	f003 0303 	and.w	r3, r3, #3
 8007436:	b2da      	uxtb	r2, r3
 8007438:	7a3b      	ldrb	r3, [r7, #8]
 800743a:	f362 0383 	bfi	r3, r2, #2, #2
 800743e:	723b      	strb	r3, [r7, #8]
    ret = lps22hh_write_reg(ctx, LPS22HH_CTRL_REG1, (uint8_t *) &reg, 1);
 8007440:	f107 0208 	add.w	r2, r7, #8
 8007444:	2301      	movs	r3, #1
 8007446:	2110      	movs	r1, #16
 8007448:	6878      	ldr	r0, [r7, #4]
 800744a:	f7ff fdf6 	bl	800703a <lps22hh_write_reg>
 800744e:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8007450:	68fb      	ldr	r3, [r7, #12]
}
 8007452:	4618      	mov	r0, r3
 8007454:	3710      	adds	r7, #16
 8007456:	46bd      	mov	sp, r7
 8007458:	bd80      	pop	{r7, pc}

0800745a <lps22hh_i3c_interface_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_i3c_interface_set(stmdev_ctx_t *ctx,
                                  lps22hh_i3c_disable_t val)
{
 800745a:	b580      	push	{r7, lr}
 800745c:	b084      	sub	sp, #16
 800745e:	af00      	add	r7, sp, #0
 8007460:	6078      	str	r0, [r7, #4]
 8007462:	460b      	mov	r3, r1
 8007464:	70fb      	strb	r3, [r7, #3]
  lps22hh_if_ctrl_t reg;
  int32_t ret;

  ret = lps22hh_read_reg(ctx, LPS22HH_IF_CTRL, (uint8_t *) &reg, 1);
 8007466:	f107 0208 	add.w	r2, r7, #8
 800746a:	2301      	movs	r3, #1
 800746c:	210e      	movs	r1, #14
 800746e:	6878      	ldr	r0, [r7, #4]
 8007470:	f7ff fdcb 	bl	800700a <lps22hh_read_reg>
 8007474:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8007476:	68fb      	ldr	r3, [r7, #12]
 8007478:	2b00      	cmp	r3, #0
 800747a:	d118      	bne.n	80074ae <lps22hh_i3c_interface_set+0x54>
  {
    reg.i3c_disable = ((uint8_t)val & 0x01u);
 800747c:	78fb      	ldrb	r3, [r7, #3]
 800747e:	f003 0301 	and.w	r3, r3, #1
 8007482:	b2da      	uxtb	r2, r3
 8007484:	7a3b      	ldrb	r3, [r7, #8]
 8007486:	f362 0341 	bfi	r3, r2, #1, #1
 800748a:	723b      	strb	r3, [r7, #8]
    reg.int_en_i3c = ((uint8_t)val & 0x10U) >> 4;
 800748c:	78fb      	ldrb	r3, [r7, #3]
 800748e:	091b      	lsrs	r3, r3, #4
 8007490:	f003 0301 	and.w	r3, r3, #1
 8007494:	b2da      	uxtb	r2, r3
 8007496:	7a3b      	ldrb	r3, [r7, #8]
 8007498:	f362 13c7 	bfi	r3, r2, #7, #1
 800749c:	723b      	strb	r3, [r7, #8]
    ret = lps22hh_write_reg(ctx, LPS22HH_IF_CTRL, (uint8_t *) &reg, 1);
 800749e:	f107 0208 	add.w	r2, r7, #8
 80074a2:	2301      	movs	r3, #1
 80074a4:	210e      	movs	r1, #14
 80074a6:	6878      	ldr	r0, [r7, #4]
 80074a8:	f7ff fdc7 	bl	800703a <lps22hh_write_reg>
 80074ac:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80074ae:	68fb      	ldr	r3, [r7, #12]
}
 80074b0:	4618      	mov	r0, r3
 80074b2:	3710      	adds	r7, #16
 80074b4:	46bd      	mov	sp, r7
 80074b6:	bd80      	pop	{r7, pc}

080074b8 <LSM6DSO_RegisterBusIO>:
  * @brief  Register Component Bus IO operations
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_RegisterBusIO(LSM6DSO_Object_t *pObj, LSM6DSO_IO_t *pIO)
{
 80074b8:	b580      	push	{r7, lr}
 80074ba:	b084      	sub	sp, #16
 80074bc:	af00      	add	r7, sp, #0
 80074be:	6078      	str	r0, [r7, #4]
 80074c0:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSO_OK;
 80074c2:	2300      	movs	r3, #0
 80074c4:	60fb      	str	r3, [r7, #12]

  if (pObj == NULL)
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	2b00      	cmp	r3, #0
 80074ca:	d103      	bne.n	80074d4 <LSM6DSO_RegisterBusIO+0x1c>
  {
    ret = LSM6DSO_ERROR;
 80074cc:	f04f 33ff 	mov.w	r3, #4294967295
 80074d0:	60fb      	str	r3, [r7, #12]
 80074d2:	e051      	b.n	8007578 <LSM6DSO_RegisterBusIO+0xc0>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 80074d4:	683b      	ldr	r3, [r7, #0]
 80074d6:	681a      	ldr	r2, [r3, #0]
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 80074dc:	683b      	ldr	r3, [r7, #0]
 80074de:	685a      	ldr	r2, [r3, #4]
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	605a      	str	r2, [r3, #4]
    pObj->IO.BusType   = pIO->BusType;
 80074e4:	683b      	ldr	r3, [r7, #0]
 80074e6:	689a      	ldr	r2, [r3, #8]
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	609a      	str	r2, [r3, #8]
    pObj->IO.Address   = pIO->Address;
 80074ec:	683b      	ldr	r3, [r7, #0]
 80074ee:	7b1a      	ldrb	r2, [r3, #12]
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	731a      	strb	r2, [r3, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 80074f4:	683b      	ldr	r3, [r7, #0]
 80074f6:	691a      	ldr	r2, [r3, #16]
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	611a      	str	r2, [r3, #16]
    pObj->IO.ReadReg   = pIO->ReadReg;
 80074fc:	683b      	ldr	r3, [r7, #0]
 80074fe:	695a      	ldr	r2, [r3, #20]
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	615a      	str	r2, [r3, #20]
    pObj->IO.GetTick   = pIO->GetTick;
 8007504:	683b      	ldr	r3, [r7, #0]
 8007506:	699a      	ldr	r2, [r3, #24]
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	619a      	str	r2, [r3, #24]

    pObj->Ctx.read_reg  = ReadRegWrap;
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	4a1d      	ldr	r2, [pc, #116]	; (8007584 <LSM6DSO_RegisterBusIO+0xcc>)
 8007510:	625a      	str	r2, [r3, #36]	; 0x24
    pObj->Ctx.write_reg = WriteRegWrap;
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	4a1c      	ldr	r2, [pc, #112]	; (8007588 <LSM6DSO_RegisterBusIO+0xd0>)
 8007516:	621a      	str	r2, [r3, #32]
    pObj->Ctx.mdelay    = pIO->Delay;
 8007518:	683b      	ldr	r3, [r7, #0]
 800751a:	69da      	ldr	r2, [r3, #28]
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	629a      	str	r2, [r3, #40]	; 0x28
    pObj->Ctx.handle   = pObj;
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	687a      	ldr	r2, [r7, #4]
 8007524:	62da      	str	r2, [r3, #44]	; 0x2c

    if (pObj->IO.Init == NULL)
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	681b      	ldr	r3, [r3, #0]
 800752a:	2b00      	cmp	r3, #0
 800752c:	d103      	bne.n	8007536 <LSM6DSO_RegisterBusIO+0x7e>
    {
      ret = LSM6DSO_ERROR;
 800752e:	f04f 33ff 	mov.w	r3, #4294967295
 8007532:	60fb      	str	r3, [r7, #12]
 8007534:	e020      	b.n	8007578 <LSM6DSO_RegisterBusIO+0xc0>
    }
    else if (pObj->IO.Init() != LSM6DSO_OK)
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	681b      	ldr	r3, [r3, #0]
 800753a:	4798      	blx	r3
 800753c:	4603      	mov	r3, r0
 800753e:	2b00      	cmp	r3, #0
 8007540:	d003      	beq.n	800754a <LSM6DSO_RegisterBusIO+0x92>
    {
      ret = LSM6DSO_ERROR;
 8007542:	f04f 33ff 	mov.w	r3, #4294967295
 8007546:	60fb      	str	r3, [r7, #12]
 8007548:	e016      	b.n	8007578 <LSM6DSO_RegisterBusIO+0xc0>
    }
    else
    {
      if (pObj->IO.BusType == LSM6DSO_SPI_3WIRES_BUS) /* SPI 3-Wires */
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	689b      	ldr	r3, [r3, #8]
 800754e:	2b02      	cmp	r3, #2
 8007550:	d112      	bne.n	8007578 <LSM6DSO_RegisterBusIO+0xc0>
      {
        /* Enable the SPI 3-Wires support only the first time */
        if (pObj->is_initialized == 0U)
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8007558:	2b00      	cmp	r3, #0
 800755a:	d10d      	bne.n	8007578 <LSM6DSO_RegisterBusIO+0xc0>
        {
          /* Enable SPI 3-Wires on the component */
          uint8_t data = 0x0C;
 800755c:	230c      	movs	r3, #12
 800755e:	72fb      	strb	r3, [r7, #11]

          if (LSM6DSO_Write_Reg(pObj, LSM6DSO_CTRL3_C, data) != LSM6DSO_OK)
 8007560:	7afb      	ldrb	r3, [r7, #11]
 8007562:	461a      	mov	r2, r3
 8007564:	2112      	movs	r1, #18
 8007566:	6878      	ldr	r0, [r7, #4]
 8007568:	f000 ff59 	bl	800841e <LSM6DSO_Write_Reg>
 800756c:	4603      	mov	r3, r0
 800756e:	2b00      	cmp	r3, #0
 8007570:	d002      	beq.n	8007578 <LSM6DSO_RegisterBusIO+0xc0>
          {
            ret = LSM6DSO_ERROR;
 8007572:	f04f 33ff 	mov.w	r3, #4294967295
 8007576:	60fb      	str	r3, [r7, #12]
        }
      }
    }
  }

  return ret;
 8007578:	68fb      	ldr	r3, [r7, #12]
}
 800757a:	4618      	mov	r0, r3
 800757c:	3710      	adds	r7, #16
 800757e:	46bd      	mov	sp, r7
 8007580:	bd80      	pop	{r7, pc}
 8007582:	bf00      	nop
 8007584:	080088c1 	.word	0x080088c1
 8007588:	080088f7 	.word	0x080088f7

0800758c <LSM6DSO_Init>:
  * @brief  Initialize the LSM6DSO sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_Init(LSM6DSO_Object_t *pObj)
{
 800758c:	b580      	push	{r7, lr}
 800758e:	b082      	sub	sp, #8
 8007590:	af00      	add	r7, sp, #0
 8007592:	6078      	str	r0, [r7, #4]
  /* Disable I3C */
  if (lsm6dso_i3c_disable_set(&(pObj->Ctx), LSM6DSO_I3C_DISABLE) != LSM6DSO_OK)
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	3320      	adds	r3, #32
 8007598:	2180      	movs	r1, #128	; 0x80
 800759a:	4618      	mov	r0, r3
 800759c:	f001 fe97 	bl	80092ce <lsm6dso_i3c_disable_set>
 80075a0:	4603      	mov	r3, r0
 80075a2:	2b00      	cmp	r3, #0
 80075a4:	d002      	beq.n	80075ac <LSM6DSO_Init+0x20>
  {
    return LSM6DSO_ERROR;
 80075a6:	f04f 33ff 	mov.w	r3, #4294967295
 80075aa:	e060      	b.n	800766e <LSM6DSO_Init+0xe2>
  }

  /* Enable register address automatically incremented during a multiple byte
  access with a serial interface. */
  if (lsm6dso_auto_increment_set(&(pObj->Ctx), PROPERTY_ENABLE) != LSM6DSO_OK)
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	3320      	adds	r3, #32
 80075b0:	2101      	movs	r1, #1
 80075b2:	4618      	mov	r0, r3
 80075b4:	f001 fe65 	bl	8009282 <lsm6dso_auto_increment_set>
 80075b8:	4603      	mov	r3, r0
 80075ba:	2b00      	cmp	r3, #0
 80075bc:	d002      	beq.n	80075c4 <LSM6DSO_Init+0x38>
  {
    return LSM6DSO_ERROR;
 80075be:	f04f 33ff 	mov.w	r3, #4294967295
 80075c2:	e054      	b.n	800766e <LSM6DSO_Init+0xe2>
  }

  /* Enable BDU */
  if (lsm6dso_block_data_update_set(&(pObj->Ctx), PROPERTY_ENABLE) != LSM6DSO_OK)
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	3320      	adds	r3, #32
 80075c8:	2101      	movs	r1, #1
 80075ca:	4618      	mov	r0, r3
 80075cc:	f001 fd66 	bl	800909c <lsm6dso_block_data_update_set>
 80075d0:	4603      	mov	r3, r0
 80075d2:	2b00      	cmp	r3, #0
 80075d4:	d002      	beq.n	80075dc <LSM6DSO_Init+0x50>
  {
    return LSM6DSO_ERROR;
 80075d6:	f04f 33ff 	mov.w	r3, #4294967295
 80075da:	e048      	b.n	800766e <LSM6DSO_Init+0xe2>
  }

  /* FIFO mode selection */
  if (lsm6dso_fifo_mode_set(&(pObj->Ctx), LSM6DSO_BYPASS_MODE) != LSM6DSO_OK)
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	3320      	adds	r3, #32
 80075e0:	2100      	movs	r1, #0
 80075e2:	4618      	mov	r0, r3
 80075e4:	f001 feb9 	bl	800935a <lsm6dso_fifo_mode_set>
 80075e8:	4603      	mov	r3, r0
 80075ea:	2b00      	cmp	r3, #0
 80075ec:	d002      	beq.n	80075f4 <LSM6DSO_Init+0x68>
  {
    return LSM6DSO_ERROR;
 80075ee:	f04f 33ff 	mov.w	r3, #4294967295
 80075f2:	e03c      	b.n	800766e <LSM6DSO_Init+0xe2>
  }

  /* Select default output data rate. */
  pObj->acc_odr = LSM6DSO_XL_ODR_104Hz;
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	2204      	movs	r2, #4
 80075f8:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33

  /* Output data rate selection - power down. */
  if (lsm6dso_xl_data_rate_set(&(pObj->Ctx), LSM6DSO_XL_ODR_OFF) != LSM6DSO_OK)
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	3320      	adds	r3, #32
 8007600:	2100      	movs	r1, #0
 8007602:	4618      	mov	r0, r3
 8007604:	f001 fa20 	bl	8008a48 <lsm6dso_xl_data_rate_set>
 8007608:	4603      	mov	r3, r0
 800760a:	2b00      	cmp	r3, #0
 800760c:	d002      	beq.n	8007614 <LSM6DSO_Init+0x88>
  {
    return LSM6DSO_ERROR;
 800760e:	f04f 33ff 	mov.w	r3, #4294967295
 8007612:	e02c      	b.n	800766e <LSM6DSO_Init+0xe2>
  }

  /* Full scale selection. */
  if (lsm6dso_xl_full_scale_set(&(pObj->Ctx), LSM6DSO_2g) != LSM6DSO_OK)
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	3320      	adds	r3, #32
 8007618:	2100      	movs	r1, #0
 800761a:	4618      	mov	r0, r3
 800761c:	f001 f9b6 	bl	800898c <lsm6dso_xl_full_scale_set>
 8007620:	4603      	mov	r3, r0
 8007622:	2b00      	cmp	r3, #0
 8007624:	d002      	beq.n	800762c <LSM6DSO_Init+0xa0>
  {
    return LSM6DSO_ERROR;
 8007626:	f04f 33ff 	mov.w	r3, #4294967295
 800762a:	e020      	b.n	800766e <LSM6DSO_Init+0xe2>
  }

  /* Select default output data rate. */
  pObj->gyro_odr = LSM6DSO_GY_ODR_104Hz;
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	2204      	movs	r2, #4
 8007630:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Output data rate selection - power down. */
  if (lsm6dso_gy_data_rate_set(&(pObj->Ctx), LSM6DSO_GY_ODR_OFF) != LSM6DSO_OK)
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	3320      	adds	r3, #32
 8007638:	2100      	movs	r1, #0
 800763a:	4618      	mov	r0, r3
 800763c:	f001 fbd0 	bl	8008de0 <lsm6dso_gy_data_rate_set>
 8007640:	4603      	mov	r3, r0
 8007642:	2b00      	cmp	r3, #0
 8007644:	d002      	beq.n	800764c <LSM6DSO_Init+0xc0>
  {
    return LSM6DSO_ERROR;
 8007646:	f04f 33ff 	mov.w	r3, #4294967295
 800764a:	e010      	b.n	800766e <LSM6DSO_Init+0xe2>
  }

  /* Full scale selection. */
  if (lsm6dso_gy_full_scale_set(&(pObj->Ctx), LSM6DSO_2000dps) != LSM6DSO_OK)
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	3320      	adds	r3, #32
 8007650:	2106      	movs	r1, #6
 8007652:	4618      	mov	r0, r3
 8007654:	f001 fb5c 	bl	8008d10 <lsm6dso_gy_full_scale_set>
 8007658:	4603      	mov	r3, r0
 800765a:	2b00      	cmp	r3, #0
 800765c:	d002      	beq.n	8007664 <LSM6DSO_Init+0xd8>
  {
    return LSM6DSO_ERROR;
 800765e:	f04f 33ff 	mov.w	r3, #4294967295
 8007662:	e004      	b.n	800766e <LSM6DSO_Init+0xe2>
  }

  pObj->is_initialized = 1;
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	2201      	movs	r2, #1
 8007668:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return LSM6DSO_OK;
 800766c:	2300      	movs	r3, #0
}
 800766e:	4618      	mov	r0, r3
 8007670:	3708      	adds	r7, #8
 8007672:	46bd      	mov	sp, r7
 8007674:	bd80      	pop	{r7, pc}

08007676 <LSM6DSO_DeInit>:
  * @brief  Deinitialize the LSM6DSO sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_DeInit(LSM6DSO_Object_t *pObj)
{
 8007676:	b580      	push	{r7, lr}
 8007678:	b082      	sub	sp, #8
 800767a:	af00      	add	r7, sp, #0
 800767c:	6078      	str	r0, [r7, #4]
  /* Disable the component */
  if (LSM6DSO_ACC_Disable(pObj) != LSM6DSO_OK)
 800767e:	6878      	ldr	r0, [r7, #4]
 8007680:	f000 f888 	bl	8007794 <LSM6DSO_ACC_Disable>
 8007684:	4603      	mov	r3, r0
 8007686:	2b00      	cmp	r3, #0
 8007688:	d002      	beq.n	8007690 <LSM6DSO_DeInit+0x1a>
  {
    return LSM6DSO_ERROR;
 800768a:	f04f 33ff 	mov.w	r3, #4294967295
 800768e:	e015      	b.n	80076bc <LSM6DSO_DeInit+0x46>
  }

  if (LSM6DSO_GYRO_Disable(pObj) != LSM6DSO_OK)
 8007690:	6878      	ldr	r0, [r7, #4]
 8007692:	f000 fc2e 	bl	8007ef2 <LSM6DSO_GYRO_Disable>
 8007696:	4603      	mov	r3, r0
 8007698:	2b00      	cmp	r3, #0
 800769a:	d002      	beq.n	80076a2 <LSM6DSO_DeInit+0x2c>
  {
    return LSM6DSO_ERROR;
 800769c:	f04f 33ff 	mov.w	r3, #4294967295
 80076a0:	e00c      	b.n	80076bc <LSM6DSO_DeInit+0x46>
  }

  /* Reset output data rate. */
  pObj->acc_odr = LSM6DSO_XL_ODR_OFF;
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	2200      	movs	r2, #0
 80076a6:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
  pObj->gyro_odr = LSM6DSO_GY_ODR_OFF;
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	2200      	movs	r2, #0
 80076ae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  pObj->is_initialized = 0;
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	2200      	movs	r2, #0
 80076b6:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return LSM6DSO_OK;
 80076ba:	2300      	movs	r3, #0
}
 80076bc:	4618      	mov	r0, r3
 80076be:	3708      	adds	r7, #8
 80076c0:	46bd      	mov	sp, r7
 80076c2:	bd80      	pop	{r7, pc}

080076c4 <LSM6DSO_ReadID>:
  * @param  pObj the device pObj
  * @param  Id the WHO_AM_I value
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_ReadID(LSM6DSO_Object_t *pObj, uint8_t *Id)
{
 80076c4:	b580      	push	{r7, lr}
 80076c6:	b082      	sub	sp, #8
 80076c8:	af00      	add	r7, sp, #0
 80076ca:	6078      	str	r0, [r7, #4]
 80076cc:	6039      	str	r1, [r7, #0]
  if (lsm6dso_device_id_get(&(pObj->Ctx), Id) != LSM6DSO_OK)
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	3320      	adds	r3, #32
 80076d2:	6839      	ldr	r1, [r7, #0]
 80076d4:	4618      	mov	r0, r3
 80076d6:	f001 fdc3 	bl	8009260 <lsm6dso_device_id_get>
 80076da:	4603      	mov	r3, r0
 80076dc:	2b00      	cmp	r3, #0
 80076de:	d002      	beq.n	80076e6 <LSM6DSO_ReadID+0x22>
  {
    return LSM6DSO_ERROR;
 80076e0:	f04f 33ff 	mov.w	r3, #4294967295
 80076e4:	e000      	b.n	80076e8 <LSM6DSO_ReadID+0x24>
  }

  return LSM6DSO_OK;
 80076e6:	2300      	movs	r3, #0
}
 80076e8:	4618      	mov	r0, r3
 80076ea:	3708      	adds	r7, #8
 80076ec:	46bd      	mov	sp, r7
 80076ee:	bd80      	pop	{r7, pc}

080076f0 <LSM6DSO_GetCapabilities>:
  * @param  pObj Component object pointer
  * @param  Capabilities pointer to LSM6DSO sensor capabilities
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_GetCapabilities(LSM6DSO_Object_t *pObj, LSM6DSO_Capabilities_t *Capabilities)
{
 80076f0:	b480      	push	{r7}
 80076f2:	b083      	sub	sp, #12
 80076f4:	af00      	add	r7, sp, #0
 80076f6:	6078      	str	r0, [r7, #4]
 80076f8:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  Capabilities->Acc          = 1;
 80076fa:	683b      	ldr	r3, [r7, #0]
 80076fc:	2201      	movs	r2, #1
 80076fe:	701a      	strb	r2, [r3, #0]
  Capabilities->Gyro         = 1;
 8007700:	683b      	ldr	r3, [r7, #0]
 8007702:	2201      	movs	r2, #1
 8007704:	705a      	strb	r2, [r3, #1]
  Capabilities->Magneto      = 0;
 8007706:	683b      	ldr	r3, [r7, #0]
 8007708:	2200      	movs	r2, #0
 800770a:	709a      	strb	r2, [r3, #2]
  Capabilities->LowPower     = 0;
 800770c:	683b      	ldr	r3, [r7, #0]
 800770e:	2200      	movs	r2, #0
 8007710:	70da      	strb	r2, [r3, #3]
  Capabilities->GyroMaxFS    = 2000;
 8007712:	683b      	ldr	r3, [r7, #0]
 8007714:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8007718:	605a      	str	r2, [r3, #4]
  Capabilities->AccMaxFS     = 16;
 800771a:	683b      	ldr	r3, [r7, #0]
 800771c:	2210      	movs	r2, #16
 800771e:	609a      	str	r2, [r3, #8]
  Capabilities->MagMaxFS     = 0;
 8007720:	683b      	ldr	r3, [r7, #0]
 8007722:	2200      	movs	r2, #0
 8007724:	60da      	str	r2, [r3, #12]
  Capabilities->GyroMaxOdr   = 6660.0f;
 8007726:	683b      	ldr	r3, [r7, #0]
 8007728:	4a07      	ldr	r2, [pc, #28]	; (8007748 <LSM6DSO_GetCapabilities+0x58>)
 800772a:	611a      	str	r2, [r3, #16]
  Capabilities->AccMaxOdr    = 6660.0f;
 800772c:	683b      	ldr	r3, [r7, #0]
 800772e:	4a06      	ldr	r2, [pc, #24]	; (8007748 <LSM6DSO_GetCapabilities+0x58>)
 8007730:	615a      	str	r2, [r3, #20]
  Capabilities->MagMaxOdr    = 0.0f;
 8007732:	683b      	ldr	r3, [r7, #0]
 8007734:	f04f 0200 	mov.w	r2, #0
 8007738:	619a      	str	r2, [r3, #24]
  return LSM6DSO_OK;
 800773a:	2300      	movs	r3, #0
}
 800773c:	4618      	mov	r0, r3
 800773e:	370c      	adds	r7, #12
 8007740:	46bd      	mov	sp, r7
 8007742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007746:	4770      	bx	lr
 8007748:	45d02000 	.word	0x45d02000

0800774c <LSM6DSO_ACC_Enable>:
  * @brief  Enable the LSM6DSO accelerometer sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_ACC_Enable(LSM6DSO_Object_t *pObj)
{
 800774c:	b580      	push	{r7, lr}
 800774e:	b082      	sub	sp, #8
 8007750:	af00      	add	r7, sp, #0
 8007752:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->acc_is_enabled == 1U)
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800775a:	2b01      	cmp	r3, #1
 800775c:	d101      	bne.n	8007762 <LSM6DSO_ACC_Enable+0x16>
  {
    return LSM6DSO_OK;
 800775e:	2300      	movs	r3, #0
 8007760:	e014      	b.n	800778c <LSM6DSO_ACC_Enable+0x40>
  }

  /* Output data rate selection. */
  if (lsm6dso_xl_data_rate_set(&(pObj->Ctx), pObj->acc_odr) != LSM6DSO_OK)
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	f103 0220 	add.w	r2, r3, #32
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 800776e:	4619      	mov	r1, r3
 8007770:	4610      	mov	r0, r2
 8007772:	f001 f969 	bl	8008a48 <lsm6dso_xl_data_rate_set>
 8007776:	4603      	mov	r3, r0
 8007778:	2b00      	cmp	r3, #0
 800777a:	d002      	beq.n	8007782 <LSM6DSO_ACC_Enable+0x36>
  {
    return LSM6DSO_ERROR;
 800777c:	f04f 33ff 	mov.w	r3, #4294967295
 8007780:	e004      	b.n	800778c <LSM6DSO_ACC_Enable+0x40>
  }

  pObj->acc_is_enabled = 1;
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	2201      	movs	r2, #1
 8007786:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

  return LSM6DSO_OK;
 800778a:	2300      	movs	r3, #0
}
 800778c:	4618      	mov	r0, r3
 800778e:	3708      	adds	r7, #8
 8007790:	46bd      	mov	sp, r7
 8007792:	bd80      	pop	{r7, pc}

08007794 <LSM6DSO_ACC_Disable>:
  * @brief  Disable the LSM6DSO accelerometer sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_ACC_Disable(LSM6DSO_Object_t *pObj)
{
 8007794:	b580      	push	{r7, lr}
 8007796:	b082      	sub	sp, #8
 8007798:	af00      	add	r7, sp, #0
 800779a:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->acc_is_enabled == 0U)
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80077a2:	2b00      	cmp	r3, #0
 80077a4:	d101      	bne.n	80077aa <LSM6DSO_ACC_Disable+0x16>
  {
    return LSM6DSO_OK;
 80077a6:	2300      	movs	r3, #0
 80077a8:	e01f      	b.n	80077ea <LSM6DSO_ACC_Disable+0x56>
  }

  /* Get current output data rate. */
  if (lsm6dso_xl_data_rate_get(&(pObj->Ctx), &pObj->acc_odr) != LSM6DSO_OK)
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	f103 0220 	add.w	r2, r3, #32
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	3333      	adds	r3, #51	; 0x33
 80077b4:	4619      	mov	r1, r3
 80077b6:	4610      	mov	r0, r2
 80077b8:	f001 fa42 	bl	8008c40 <lsm6dso_xl_data_rate_get>
 80077bc:	4603      	mov	r3, r0
 80077be:	2b00      	cmp	r3, #0
 80077c0:	d002      	beq.n	80077c8 <LSM6DSO_ACC_Disable+0x34>
  {
    return LSM6DSO_ERROR;
 80077c2:	f04f 33ff 	mov.w	r3, #4294967295
 80077c6:	e010      	b.n	80077ea <LSM6DSO_ACC_Disable+0x56>
  }

  /* Output data rate selection - power down. */
  if (lsm6dso_xl_data_rate_set(&(pObj->Ctx), LSM6DSO_XL_ODR_OFF) != LSM6DSO_OK)
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	3320      	adds	r3, #32
 80077cc:	2100      	movs	r1, #0
 80077ce:	4618      	mov	r0, r3
 80077d0:	f001 f93a 	bl	8008a48 <lsm6dso_xl_data_rate_set>
 80077d4:	4603      	mov	r3, r0
 80077d6:	2b00      	cmp	r3, #0
 80077d8:	d002      	beq.n	80077e0 <LSM6DSO_ACC_Disable+0x4c>
  {
    return LSM6DSO_ERROR;
 80077da:	f04f 33ff 	mov.w	r3, #4294967295
 80077de:	e004      	b.n	80077ea <LSM6DSO_ACC_Disable+0x56>
  }

  pObj->acc_is_enabled = 0;
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	2200      	movs	r2, #0
 80077e4:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

  return LSM6DSO_OK;
 80077e8:	2300      	movs	r3, #0
}
 80077ea:	4618      	mov	r0, r3
 80077ec:	3708      	adds	r7, #8
 80077ee:	46bd      	mov	sp, r7
 80077f0:	bd80      	pop	{r7, pc}
	...

080077f4 <LSM6DSO_ACC_GetSensitivity>:
  * @param  pObj the device pObj
  * @param  Sensitivity pointer
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_ACC_GetSensitivity(LSM6DSO_Object_t *pObj, float_t *Sensitivity)
{
 80077f4:	b580      	push	{r7, lr}
 80077f6:	b084      	sub	sp, #16
 80077f8:	af00      	add	r7, sp, #0
 80077fa:	6078      	str	r0, [r7, #4]
 80077fc:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSO_OK;
 80077fe:	2300      	movs	r3, #0
 8007800:	60fb      	str	r3, [r7, #12]
  lsm6dso_fs_xl_t full_scale;

  /* Read actual full scale selection from sensor. */
  if (lsm6dso_xl_full_scale_get(&(pObj->Ctx), &full_scale) != LSM6DSO_OK)
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	3320      	adds	r3, #32
 8007806:	f107 020b 	add.w	r2, r7, #11
 800780a:	4611      	mov	r1, r2
 800780c:	4618      	mov	r0, r3
 800780e:	f001 f8e3 	bl	80089d8 <lsm6dso_xl_full_scale_get>
 8007812:	4603      	mov	r3, r0
 8007814:	2b00      	cmp	r3, #0
 8007816:	d002      	beq.n	800781e <LSM6DSO_ACC_GetSensitivity+0x2a>
  {
    return LSM6DSO_ERROR;
 8007818:	f04f 33ff 	mov.w	r3, #4294967295
 800781c:	e023      	b.n	8007866 <LSM6DSO_ACC_GetSensitivity+0x72>
  }

  /* Store the Sensitivity based on actual full scale. */
  switch (full_scale)
 800781e:	7afb      	ldrb	r3, [r7, #11]
 8007820:	2b03      	cmp	r3, #3
 8007822:	d81b      	bhi.n	800785c <LSM6DSO_ACC_GetSensitivity+0x68>
 8007824:	a201      	add	r2, pc, #4	; (adr r2, 800782c <LSM6DSO_ACC_GetSensitivity+0x38>)
 8007826:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800782a:	bf00      	nop
 800782c:	0800783d 	.word	0x0800783d
 8007830:	08007855 	.word	0x08007855
 8007834:	08007845 	.word	0x08007845
 8007838:	0800784d 	.word	0x0800784d
  {
    case LSM6DSO_2g:
      *Sensitivity = LSM6DSO_ACC_SENSITIVITY_FS_2G;
 800783c:	683b      	ldr	r3, [r7, #0]
 800783e:	4a0c      	ldr	r2, [pc, #48]	; (8007870 <LSM6DSO_ACC_GetSensitivity+0x7c>)
 8007840:	601a      	str	r2, [r3, #0]
      break;
 8007842:	e00f      	b.n	8007864 <LSM6DSO_ACC_GetSensitivity+0x70>

    case LSM6DSO_4g:
      *Sensitivity = LSM6DSO_ACC_SENSITIVITY_FS_4G;
 8007844:	683b      	ldr	r3, [r7, #0]
 8007846:	4a0b      	ldr	r2, [pc, #44]	; (8007874 <LSM6DSO_ACC_GetSensitivity+0x80>)
 8007848:	601a      	str	r2, [r3, #0]
      break;
 800784a:	e00b      	b.n	8007864 <LSM6DSO_ACC_GetSensitivity+0x70>

    case LSM6DSO_8g:
      *Sensitivity = LSM6DSO_ACC_SENSITIVITY_FS_8G;
 800784c:	683b      	ldr	r3, [r7, #0]
 800784e:	4a0a      	ldr	r2, [pc, #40]	; (8007878 <LSM6DSO_ACC_GetSensitivity+0x84>)
 8007850:	601a      	str	r2, [r3, #0]
      break;
 8007852:	e007      	b.n	8007864 <LSM6DSO_ACC_GetSensitivity+0x70>

    case LSM6DSO_16g:
      *Sensitivity = LSM6DSO_ACC_SENSITIVITY_FS_16G;
 8007854:	683b      	ldr	r3, [r7, #0]
 8007856:	4a09      	ldr	r2, [pc, #36]	; (800787c <LSM6DSO_ACC_GetSensitivity+0x88>)
 8007858:	601a      	str	r2, [r3, #0]
      break;
 800785a:	e003      	b.n	8007864 <LSM6DSO_ACC_GetSensitivity+0x70>

    default:
      ret = LSM6DSO_ERROR;
 800785c:	f04f 33ff 	mov.w	r3, #4294967295
 8007860:	60fb      	str	r3, [r7, #12]
      break;
 8007862:	bf00      	nop
  }

  return ret;
 8007864:	68fb      	ldr	r3, [r7, #12]
}
 8007866:	4618      	mov	r0, r3
 8007868:	3710      	adds	r7, #16
 800786a:	46bd      	mov	sp, r7
 800786c:	bd80      	pop	{r7, pc}
 800786e:	bf00      	nop
 8007870:	3d79db23 	.word	0x3d79db23
 8007874:	3df9db23 	.word	0x3df9db23
 8007878:	3e79db23 	.word	0x3e79db23
 800787c:	3ef9db23 	.word	0x3ef9db23

08007880 <LSM6DSO_ACC_GetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr pointer where the output data rate is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_ACC_GetOutputDataRate(LSM6DSO_Object_t *pObj, float_t *Odr)
{
 8007880:	b580      	push	{r7, lr}
 8007882:	b084      	sub	sp, #16
 8007884:	af00      	add	r7, sp, #0
 8007886:	6078      	str	r0, [r7, #4]
 8007888:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSO_OK;
 800788a:	2300      	movs	r3, #0
 800788c:	60fb      	str	r3, [r7, #12]
  lsm6dso_odr_xl_t odr_low_level;

  /* Get current output data rate. */
  if (lsm6dso_xl_data_rate_get(&(pObj->Ctx), &odr_low_level) != LSM6DSO_OK)
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	3320      	adds	r3, #32
 8007892:	f107 020b 	add.w	r2, r7, #11
 8007896:	4611      	mov	r1, r2
 8007898:	4618      	mov	r0, r3
 800789a:	f001 f9d1 	bl	8008c40 <lsm6dso_xl_data_rate_get>
 800789e:	4603      	mov	r3, r0
 80078a0:	2b00      	cmp	r3, #0
 80078a2:	d002      	beq.n	80078aa <LSM6DSO_ACC_GetOutputDataRate+0x2a>
  {
    return LSM6DSO_ERROR;
 80078a4:	f04f 33ff 	mov.w	r3, #4294967295
 80078a8:	e054      	b.n	8007954 <LSM6DSO_ACC_GetOutputDataRate+0xd4>
  }

  switch (odr_low_level)
 80078aa:	7afb      	ldrb	r3, [r7, #11]
 80078ac:	2b0b      	cmp	r3, #11
 80078ae:	d84c      	bhi.n	800794a <LSM6DSO_ACC_GetOutputDataRate+0xca>
 80078b0:	a201      	add	r2, pc, #4	; (adr r2, 80078b8 <LSM6DSO_ACC_GetOutputDataRate+0x38>)
 80078b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80078b6:	bf00      	nop
 80078b8:	080078e9 	.word	0x080078e9
 80078bc:	080078fb 	.word	0x080078fb
 80078c0:	08007903 	.word	0x08007903
 80078c4:	0800790b 	.word	0x0800790b
 80078c8:	08007913 	.word	0x08007913
 80078cc:	0800791b 	.word	0x0800791b
 80078d0:	08007923 	.word	0x08007923
 80078d4:	0800792b 	.word	0x0800792b
 80078d8:	08007933 	.word	0x08007933
 80078dc:	0800793b 	.word	0x0800793b
 80078e0:	08007943 	.word	0x08007943
 80078e4:	080078f3 	.word	0x080078f3
  {
    case LSM6DSO_XL_ODR_OFF:
      *Odr = 0.0f;
 80078e8:	683b      	ldr	r3, [r7, #0]
 80078ea:	f04f 0200 	mov.w	r2, #0
 80078ee:	601a      	str	r2, [r3, #0]
      break;
 80078f0:	e02f      	b.n	8007952 <LSM6DSO_ACC_GetOutputDataRate+0xd2>

    case LSM6DSO_XL_ODR_1Hz6:
      *Odr = 1.6f;
 80078f2:	683b      	ldr	r3, [r7, #0]
 80078f4:	4a19      	ldr	r2, [pc, #100]	; (800795c <LSM6DSO_ACC_GetOutputDataRate+0xdc>)
 80078f6:	601a      	str	r2, [r3, #0]
      break;
 80078f8:	e02b      	b.n	8007952 <LSM6DSO_ACC_GetOutputDataRate+0xd2>

    case LSM6DSO_XL_ODR_12Hz5:
      *Odr = 12.5f;
 80078fa:	683b      	ldr	r3, [r7, #0]
 80078fc:	4a18      	ldr	r2, [pc, #96]	; (8007960 <LSM6DSO_ACC_GetOutputDataRate+0xe0>)
 80078fe:	601a      	str	r2, [r3, #0]
      break;
 8007900:	e027      	b.n	8007952 <LSM6DSO_ACC_GetOutputDataRate+0xd2>

    case LSM6DSO_XL_ODR_26Hz:
      *Odr = 26.0f;
 8007902:	683b      	ldr	r3, [r7, #0]
 8007904:	4a17      	ldr	r2, [pc, #92]	; (8007964 <LSM6DSO_ACC_GetOutputDataRate+0xe4>)
 8007906:	601a      	str	r2, [r3, #0]
      break;
 8007908:	e023      	b.n	8007952 <LSM6DSO_ACC_GetOutputDataRate+0xd2>

    case LSM6DSO_XL_ODR_52Hz:
      *Odr = 52.0f;
 800790a:	683b      	ldr	r3, [r7, #0]
 800790c:	4a16      	ldr	r2, [pc, #88]	; (8007968 <LSM6DSO_ACC_GetOutputDataRate+0xe8>)
 800790e:	601a      	str	r2, [r3, #0]
      break;
 8007910:	e01f      	b.n	8007952 <LSM6DSO_ACC_GetOutputDataRate+0xd2>

    case LSM6DSO_XL_ODR_104Hz:
      *Odr = 104.0f;
 8007912:	683b      	ldr	r3, [r7, #0]
 8007914:	4a15      	ldr	r2, [pc, #84]	; (800796c <LSM6DSO_ACC_GetOutputDataRate+0xec>)
 8007916:	601a      	str	r2, [r3, #0]
      break;
 8007918:	e01b      	b.n	8007952 <LSM6DSO_ACC_GetOutputDataRate+0xd2>

    case LSM6DSO_XL_ODR_208Hz:
      *Odr = 208.0f;
 800791a:	683b      	ldr	r3, [r7, #0]
 800791c:	4a14      	ldr	r2, [pc, #80]	; (8007970 <LSM6DSO_ACC_GetOutputDataRate+0xf0>)
 800791e:	601a      	str	r2, [r3, #0]
      break;
 8007920:	e017      	b.n	8007952 <LSM6DSO_ACC_GetOutputDataRate+0xd2>

    case LSM6DSO_XL_ODR_417Hz:
      *Odr = 417.0f;
 8007922:	683b      	ldr	r3, [r7, #0]
 8007924:	4a13      	ldr	r2, [pc, #76]	; (8007974 <LSM6DSO_ACC_GetOutputDataRate+0xf4>)
 8007926:	601a      	str	r2, [r3, #0]
      break;
 8007928:	e013      	b.n	8007952 <LSM6DSO_ACC_GetOutputDataRate+0xd2>

    case LSM6DSO_XL_ODR_833Hz:
      *Odr = 833.0f;
 800792a:	683b      	ldr	r3, [r7, #0]
 800792c:	4a12      	ldr	r2, [pc, #72]	; (8007978 <LSM6DSO_ACC_GetOutputDataRate+0xf8>)
 800792e:	601a      	str	r2, [r3, #0]
      break;
 8007930:	e00f      	b.n	8007952 <LSM6DSO_ACC_GetOutputDataRate+0xd2>

    case LSM6DSO_XL_ODR_1667Hz:
      *Odr = 1667.0f;
 8007932:	683b      	ldr	r3, [r7, #0]
 8007934:	4a11      	ldr	r2, [pc, #68]	; (800797c <LSM6DSO_ACC_GetOutputDataRate+0xfc>)
 8007936:	601a      	str	r2, [r3, #0]
      break;
 8007938:	e00b      	b.n	8007952 <LSM6DSO_ACC_GetOutputDataRate+0xd2>

    case LSM6DSO_XL_ODR_3333Hz:
      *Odr = 3333.0f;
 800793a:	683b      	ldr	r3, [r7, #0]
 800793c:	4a10      	ldr	r2, [pc, #64]	; (8007980 <LSM6DSO_ACC_GetOutputDataRate+0x100>)
 800793e:	601a      	str	r2, [r3, #0]
      break;
 8007940:	e007      	b.n	8007952 <LSM6DSO_ACC_GetOutputDataRate+0xd2>

    case LSM6DSO_XL_ODR_6667Hz:
      *Odr = 6667.0f;
 8007942:	683b      	ldr	r3, [r7, #0]
 8007944:	4a0f      	ldr	r2, [pc, #60]	; (8007984 <LSM6DSO_ACC_GetOutputDataRate+0x104>)
 8007946:	601a      	str	r2, [r3, #0]
      break;
 8007948:	e003      	b.n	8007952 <LSM6DSO_ACC_GetOutputDataRate+0xd2>

    default:
      ret = LSM6DSO_ERROR;
 800794a:	f04f 33ff 	mov.w	r3, #4294967295
 800794e:	60fb      	str	r3, [r7, #12]
      break;
 8007950:	bf00      	nop
  }

  return ret;
 8007952:	68fb      	ldr	r3, [r7, #12]
}
 8007954:	4618      	mov	r0, r3
 8007956:	3710      	adds	r7, #16
 8007958:	46bd      	mov	sp, r7
 800795a:	bd80      	pop	{r7, pc}
 800795c:	3fcccccd 	.word	0x3fcccccd
 8007960:	41480000 	.word	0x41480000
 8007964:	41d00000 	.word	0x41d00000
 8007968:	42500000 	.word	0x42500000
 800796c:	42d00000 	.word	0x42d00000
 8007970:	43500000 	.word	0x43500000
 8007974:	43d08000 	.word	0x43d08000
 8007978:	44504000 	.word	0x44504000
 800797c:	44d06000 	.word	0x44d06000
 8007980:	45505000 	.word	0x45505000
 8007984:	45d05800 	.word	0x45d05800

08007988 <LSM6DSO_ACC_SetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_ACC_SetOutputDataRate(LSM6DSO_Object_t *pObj, float_t Odr)
{
 8007988:	b580      	push	{r7, lr}
 800798a:	b082      	sub	sp, #8
 800798c:	af00      	add	r7, sp, #0
 800798e:	6078      	str	r0, [r7, #4]
 8007990:	ed87 0a00 	vstr	s0, [r7]
  return LSM6DSO_ACC_SetOutputDataRate_With_Mode(pObj, Odr, LSM6DSO_ACC_HIGH_PERFORMANCE_MODE);
 8007994:	2100      	movs	r1, #0
 8007996:	ed97 0a00 	vldr	s0, [r7]
 800799a:	6878      	ldr	r0, [r7, #4]
 800799c:	f000 f806 	bl	80079ac <LSM6DSO_ACC_SetOutputDataRate_With_Mode>
 80079a0:	4603      	mov	r3, r0
}
 80079a2:	4618      	mov	r0, r3
 80079a4:	3708      	adds	r7, #8
 80079a6:	46bd      	mov	sp, r7
 80079a8:	bd80      	pop	{r7, pc}
	...

080079ac <LSM6DSO_ACC_SetOutputDataRate_With_Mode>:
  * @param  Mode the accelerometer operating mode
  * @note   This function switches off the gyroscope if Ultra Low Power Mode is set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_ACC_SetOutputDataRate_With_Mode(LSM6DSO_Object_t *pObj, float_t Odr, LSM6DSO_ACC_Operating_Mode_t Mode)
{
 80079ac:	b580      	push	{r7, lr}
 80079ae:	b08c      	sub	sp, #48	; 0x30
 80079b0:	af00      	add	r7, sp, #0
 80079b2:	60f8      	str	r0, [r7, #12]
 80079b4:	ed87 0a02 	vstr	s0, [r7, #8]
 80079b8:	460b      	mov	r3, r1
 80079ba:	71fb      	strb	r3, [r7, #7]
  int32_t ret = LSM6DSO_OK;
 80079bc:	2300      	movs	r3, #0
 80079be:	62fb      	str	r3, [r7, #44]	; 0x2c
  float_t newOdr = Odr;
 80079c0:	68bb      	ldr	r3, [r7, #8]
 80079c2:	62bb      	str	r3, [r7, #40]	; 0x28

  switch (Mode)
 80079c4:	79fb      	ldrb	r3, [r7, #7]
 80079c6:	2b02      	cmp	r3, #2
 80079c8:	f000 80ea 	beq.w	8007ba0 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x1f4>
 80079cc:	2b02      	cmp	r3, #2
 80079ce:	f300 8163 	bgt.w	8007c98 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2ec>
 80079d2:	2b00      	cmp	r3, #0
 80079d4:	d002      	beq.n	80079dc <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x30>
 80079d6:	2b01      	cmp	r3, #1
 80079d8:	d074      	beq.n	8007ac4 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x118>
 80079da:	e15d      	b.n	8007c98 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2ec>
    {
      /* We must uncheck Low Power and Ultra Low Power bits if they are enabled */
      lsm6dso_ctrl5_c_t val1;
      lsm6dso_ctrl6_c_t val2;

      if (lsm6dso_read_reg(&(pObj->Ctx), LSM6DSO_CTRL5_C, (uint8_t *)&val1, 1) != LSM6DSO_OK)
 80079dc:	68fb      	ldr	r3, [r7, #12]
 80079de:	f103 0020 	add.w	r0, r3, #32
 80079e2:	f107 0224 	add.w	r2, r7, #36	; 0x24
 80079e6:	2301      	movs	r3, #1
 80079e8:	2114      	movs	r1, #20
 80079ea:	f000 ff9f 	bl	800892c <lsm6dso_read_reg>
 80079ee:	4603      	mov	r3, r0
 80079f0:	2b00      	cmp	r3, #0
 80079f2:	d002      	beq.n	80079fa <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x4e>
      {
        return LSM6DSO_ERROR;
 80079f4:	f04f 33ff 	mov.w	r3, #4294967295
 80079f8:	e16c      	b.n	8007cd4 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
      }

      if (val1.xl_ulp_en != 0U)
 80079fa:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80079fe:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8007a02:	b2db      	uxtb	r3, r3
 8007a04:	2b00      	cmp	r3, #0
 8007a06:	d025      	beq.n	8007a54 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0xa8>
      {
        /* Power off the accelerometer */
        if (pObj->acc_is_enabled == 1U)
 8007a08:	68fb      	ldr	r3, [r7, #12]
 8007a0a:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8007a0e:	2b01      	cmp	r3, #1
 8007a10:	d10b      	bne.n	8007a2a <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x7e>
        {
          if (lsm6dso_xl_data_rate_set(&(pObj->Ctx), LSM6DSO_XL_ODR_OFF) != LSM6DSO_OK)
 8007a12:	68fb      	ldr	r3, [r7, #12]
 8007a14:	3320      	adds	r3, #32
 8007a16:	2100      	movs	r1, #0
 8007a18:	4618      	mov	r0, r3
 8007a1a:	f001 f815 	bl	8008a48 <lsm6dso_xl_data_rate_set>
 8007a1e:	4603      	mov	r3, r0
 8007a20:	2b00      	cmp	r3, #0
 8007a22:	d002      	beq.n	8007a2a <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x7e>
          {
            return LSM6DSO_ERROR;
 8007a24:	f04f 33ff 	mov.w	r3, #4294967295
 8007a28:	e154      	b.n	8007cd4 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
          }
        }

        val1.xl_ulp_en = 0;
 8007a2a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8007a2e:	f36f 13c7 	bfc	r3, #7, #1
 8007a32:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
        if (lsm6dso_write_reg(&(pObj->Ctx), LSM6DSO_CTRL5_C, (uint8_t *)&val1, 1) != LSM6DSO_OK)
 8007a36:	68fb      	ldr	r3, [r7, #12]
 8007a38:	f103 0020 	add.w	r0, r3, #32
 8007a3c:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8007a40:	2301      	movs	r3, #1
 8007a42:	2114      	movs	r1, #20
 8007a44:	f000 ff8a 	bl	800895c <lsm6dso_write_reg>
 8007a48:	4603      	mov	r3, r0
 8007a4a:	2b00      	cmp	r3, #0
 8007a4c:	d002      	beq.n	8007a54 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0xa8>
        {
          return LSM6DSO_ERROR;
 8007a4e:	f04f 33ff 	mov.w	r3, #4294967295
 8007a52:	e13f      	b.n	8007cd4 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
        }
      }

      if (lsm6dso_read_reg(&(pObj->Ctx), LSM6DSO_CTRL6_C, (uint8_t *)&val2, 1) != LSM6DSO_OK)
 8007a54:	68fb      	ldr	r3, [r7, #12]
 8007a56:	f103 0020 	add.w	r0, r3, #32
 8007a5a:	f107 0220 	add.w	r2, r7, #32
 8007a5e:	2301      	movs	r3, #1
 8007a60:	2115      	movs	r1, #21
 8007a62:	f000 ff63 	bl	800892c <lsm6dso_read_reg>
 8007a66:	4603      	mov	r3, r0
 8007a68:	2b00      	cmp	r3, #0
 8007a6a:	d002      	beq.n	8007a72 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0xc6>
      {
        return LSM6DSO_ERROR;
 8007a6c:	f04f 33ff 	mov.w	r3, #4294967295
 8007a70:	e130      	b.n	8007cd4 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
      }

      if (val2.xl_hm_mode != 0U)
 8007a72:	f897 3020 	ldrb.w	r3, [r7, #32]
 8007a76:	f003 0310 	and.w	r3, r3, #16
 8007a7a:	b2db      	uxtb	r3, r3
 8007a7c:	2b00      	cmp	r3, #0
 8007a7e:	d014      	beq.n	8007aaa <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0xfe>
      {
        val2.xl_hm_mode = 0U;
 8007a80:	f897 3020 	ldrb.w	r3, [r7, #32]
 8007a84:	f36f 1304 	bfc	r3, #4, #1
 8007a88:	f887 3020 	strb.w	r3, [r7, #32]
        if (lsm6dso_write_reg(&(pObj->Ctx), LSM6DSO_CTRL6_C, (uint8_t *)&val2, 1) != LSM6DSO_OK)
 8007a8c:	68fb      	ldr	r3, [r7, #12]
 8007a8e:	f103 0020 	add.w	r0, r3, #32
 8007a92:	f107 0220 	add.w	r2, r7, #32
 8007a96:	2301      	movs	r3, #1
 8007a98:	2115      	movs	r1, #21
 8007a9a:	f000 ff5f 	bl	800895c <lsm6dso_write_reg>
 8007a9e:	4603      	mov	r3, r0
 8007aa0:	2b00      	cmp	r3, #0
 8007aa2:	d002      	beq.n	8007aaa <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0xfe>
        {
          return LSM6DSO_ERROR;
 8007aa4:	f04f 33ff 	mov.w	r3, #4294967295
 8007aa8:	e114      	b.n	8007cd4 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
        }
      }

      /* ODR should be at least 12.5Hz */
      if (newOdr < 12.5f)
 8007aaa:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8007aae:	eeb2 7a09 	vmov.f32	s14, #41	; 0x41480000  12.5
 8007ab2:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007ab6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007aba:	d400      	bmi.n	8007abe <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x112>
      {
        newOdr = 12.5f;
      }
      break;
 8007abc:	e0f0      	b.n	8007ca0 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2f4>
        newOdr = 12.5f;
 8007abe:	4b87      	ldr	r3, [pc, #540]	; (8007cdc <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x330>)
 8007ac0:	62bb      	str	r3, [r7, #40]	; 0x28
 8007ac2:	e0ed      	b.n	8007ca0 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2f4>
      /* We must uncheck Ultra Low Power bit if it is enabled */
      /* and check the Low Power bit if it is unchecked       */
      lsm6dso_ctrl5_c_t val1;
      lsm6dso_ctrl6_c_t val2;

      if (lsm6dso_read_reg(&(pObj->Ctx), LSM6DSO_CTRL5_C, (uint8_t *)&val1, 1) != LSM6DSO_OK)
 8007ac4:	68fb      	ldr	r3, [r7, #12]
 8007ac6:	f103 0020 	add.w	r0, r3, #32
 8007aca:	f107 021c 	add.w	r2, r7, #28
 8007ace:	2301      	movs	r3, #1
 8007ad0:	2114      	movs	r1, #20
 8007ad2:	f000 ff2b 	bl	800892c <lsm6dso_read_reg>
 8007ad6:	4603      	mov	r3, r0
 8007ad8:	2b00      	cmp	r3, #0
 8007ada:	d002      	beq.n	8007ae2 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x136>
      {
        return LSM6DSO_ERROR;
 8007adc:	f04f 33ff 	mov.w	r3, #4294967295
 8007ae0:	e0f8      	b.n	8007cd4 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
      }

      if (val1.xl_ulp_en != 0U)
 8007ae2:	7f3b      	ldrb	r3, [r7, #28]
 8007ae4:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8007ae8:	b2db      	uxtb	r3, r3
 8007aea:	2b00      	cmp	r3, #0
 8007aec:	d023      	beq.n	8007b36 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x18a>
      {
        /* Power off the accelerometer */
        if (pObj->acc_is_enabled == 1U)
 8007aee:	68fb      	ldr	r3, [r7, #12]
 8007af0:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8007af4:	2b01      	cmp	r3, #1
 8007af6:	d10b      	bne.n	8007b10 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x164>
        {
          if (lsm6dso_xl_data_rate_set(&(pObj->Ctx), LSM6DSO_XL_ODR_OFF) != LSM6DSO_OK)
 8007af8:	68fb      	ldr	r3, [r7, #12]
 8007afa:	3320      	adds	r3, #32
 8007afc:	2100      	movs	r1, #0
 8007afe:	4618      	mov	r0, r3
 8007b00:	f000 ffa2 	bl	8008a48 <lsm6dso_xl_data_rate_set>
 8007b04:	4603      	mov	r3, r0
 8007b06:	2b00      	cmp	r3, #0
 8007b08:	d002      	beq.n	8007b10 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x164>
          {
            return LSM6DSO_ERROR;
 8007b0a:	f04f 33ff 	mov.w	r3, #4294967295
 8007b0e:	e0e1      	b.n	8007cd4 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
          }
        }

        val1.xl_ulp_en = 0;
 8007b10:	7f3b      	ldrb	r3, [r7, #28]
 8007b12:	f36f 13c7 	bfc	r3, #7, #1
 8007b16:	773b      	strb	r3, [r7, #28]
        if (lsm6dso_write_reg(&(pObj->Ctx), LSM6DSO_CTRL5_C, (uint8_t *)&val1, 1) != LSM6DSO_OK)
 8007b18:	68fb      	ldr	r3, [r7, #12]
 8007b1a:	f103 0020 	add.w	r0, r3, #32
 8007b1e:	f107 021c 	add.w	r2, r7, #28
 8007b22:	2301      	movs	r3, #1
 8007b24:	2114      	movs	r1, #20
 8007b26:	f000 ff19 	bl	800895c <lsm6dso_write_reg>
 8007b2a:	4603      	mov	r3, r0
 8007b2c:	2b00      	cmp	r3, #0
 8007b2e:	d002      	beq.n	8007b36 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x18a>
        {
          return LSM6DSO_ERROR;
 8007b30:	f04f 33ff 	mov.w	r3, #4294967295
 8007b34:	e0ce      	b.n	8007cd4 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
        }
      }

      if (lsm6dso_read_reg(&(pObj->Ctx), LSM6DSO_CTRL6_C, (uint8_t *)&val2, 1) != LSM6DSO_OK)
 8007b36:	68fb      	ldr	r3, [r7, #12]
 8007b38:	f103 0020 	add.w	r0, r3, #32
 8007b3c:	f107 0218 	add.w	r2, r7, #24
 8007b40:	2301      	movs	r3, #1
 8007b42:	2115      	movs	r1, #21
 8007b44:	f000 fef2 	bl	800892c <lsm6dso_read_reg>
 8007b48:	4603      	mov	r3, r0
 8007b4a:	2b00      	cmp	r3, #0
 8007b4c:	d002      	beq.n	8007b54 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x1a8>
      {
        return LSM6DSO_ERROR;
 8007b4e:	f04f 33ff 	mov.w	r3, #4294967295
 8007b52:	e0bf      	b.n	8007cd4 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
      }

      if (val2.xl_hm_mode == 0U)
 8007b54:	7e3b      	ldrb	r3, [r7, #24]
 8007b56:	f003 0310 	and.w	r3, r3, #16
 8007b5a:	b2db      	uxtb	r3, r3
 8007b5c:	2b00      	cmp	r3, #0
 8007b5e:	d112      	bne.n	8007b86 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x1da>
      {
        val2.xl_hm_mode = 1U;
 8007b60:	7e3b      	ldrb	r3, [r7, #24]
 8007b62:	f043 0310 	orr.w	r3, r3, #16
 8007b66:	763b      	strb	r3, [r7, #24]
        if (lsm6dso_write_reg(&(pObj->Ctx), LSM6DSO_CTRL6_C, (uint8_t *)&val2, 1) != LSM6DSO_OK)
 8007b68:	68fb      	ldr	r3, [r7, #12]
 8007b6a:	f103 0020 	add.w	r0, r3, #32
 8007b6e:	f107 0218 	add.w	r2, r7, #24
 8007b72:	2301      	movs	r3, #1
 8007b74:	2115      	movs	r1, #21
 8007b76:	f000 fef1 	bl	800895c <lsm6dso_write_reg>
 8007b7a:	4603      	mov	r3, r0
 8007b7c:	2b00      	cmp	r3, #0
 8007b7e:	d002      	beq.n	8007b86 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x1da>
        {
          return LSM6DSO_ERROR;
 8007b80:	f04f 33ff 	mov.w	r3, #4294967295
 8007b84:	e0a6      	b.n	8007cd4 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
        }
      }

      /* Now we need to limit the ODR to 208 Hz if it is higher */
      if (newOdr > 208.0f)
 8007b86:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8007b8a:	ed9f 7a55 	vldr	s14, [pc, #340]	; 8007ce0 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x334>
 8007b8e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007b92:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007b96:	dc00      	bgt.n	8007b9a <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x1ee>
      {
        newOdr = 208.0f;
      }
      break;
 8007b98:	e082      	b.n	8007ca0 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2f4>
        newOdr = 208.0f;
 8007b9a:	4b52      	ldr	r3, [pc, #328]	; (8007ce4 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x338>)
 8007b9c:	62bb      	str	r3, [r7, #40]	; 0x28
 8007b9e:	e07f      	b.n	8007ca0 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2f4>
      /* and check the Ultra Low Power bit if it is unchecked             */
      /* We must switch off gyro otherwise Ultra Low Power does not work  */
      lsm6dso_ctrl5_c_t val1;
      lsm6dso_ctrl6_c_t val2;

      if (lsm6dso_read_reg(&(pObj->Ctx), LSM6DSO_CTRL6_C, (uint8_t *)&val2, 1) != LSM6DSO_OK)
 8007ba0:	68fb      	ldr	r3, [r7, #12]
 8007ba2:	f103 0020 	add.w	r0, r3, #32
 8007ba6:	f107 0210 	add.w	r2, r7, #16
 8007baa:	2301      	movs	r3, #1
 8007bac:	2115      	movs	r1, #21
 8007bae:	f000 febd 	bl	800892c <lsm6dso_read_reg>
 8007bb2:	4603      	mov	r3, r0
 8007bb4:	2b00      	cmp	r3, #0
 8007bb6:	d002      	beq.n	8007bbe <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x212>
      {
        return LSM6DSO_ERROR;
 8007bb8:	f04f 33ff 	mov.w	r3, #4294967295
 8007bbc:	e08a      	b.n	8007cd4 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
      }

      if (val2.xl_hm_mode != 0U)
 8007bbe:	7c3b      	ldrb	r3, [r7, #16]
 8007bc0:	f003 0310 	and.w	r3, r3, #16
 8007bc4:	b2db      	uxtb	r3, r3
 8007bc6:	2b00      	cmp	r3, #0
 8007bc8:	d012      	beq.n	8007bf0 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x244>
      {
        val2.xl_hm_mode = 0U;
 8007bca:	7c3b      	ldrb	r3, [r7, #16]
 8007bcc:	f36f 1304 	bfc	r3, #4, #1
 8007bd0:	743b      	strb	r3, [r7, #16]
        if (lsm6dso_write_reg(&(pObj->Ctx), LSM6DSO_CTRL6_C, (uint8_t *)&val2, 1) != LSM6DSO_OK)
 8007bd2:	68fb      	ldr	r3, [r7, #12]
 8007bd4:	f103 0020 	add.w	r0, r3, #32
 8007bd8:	f107 0210 	add.w	r2, r7, #16
 8007bdc:	2301      	movs	r3, #1
 8007bde:	2115      	movs	r1, #21
 8007be0:	f000 febc 	bl	800895c <lsm6dso_write_reg>
 8007be4:	4603      	mov	r3, r0
 8007be6:	2b00      	cmp	r3, #0
 8007be8:	d002      	beq.n	8007bf0 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x244>
        {
          return LSM6DSO_ERROR;
 8007bea:	f04f 33ff 	mov.w	r3, #4294967295
 8007bee:	e071      	b.n	8007cd4 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
        }
      }

      /* Disable Gyro */
      if (pObj->gyro_is_enabled == 1U)
 8007bf0:	68fb      	ldr	r3, [r7, #12]
 8007bf2:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8007bf6:	2b01      	cmp	r3, #1
 8007bf8:	d108      	bne.n	8007c0c <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x260>
      {
        if (LSM6DSO_GYRO_Disable(pObj) != LSM6DSO_OK)
 8007bfa:	68f8      	ldr	r0, [r7, #12]
 8007bfc:	f000 f979 	bl	8007ef2 <LSM6DSO_GYRO_Disable>
 8007c00:	4603      	mov	r3, r0
 8007c02:	2b00      	cmp	r3, #0
 8007c04:	d002      	beq.n	8007c0c <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x260>
        {
          return LSM6DSO_ERROR;
 8007c06:	f04f 33ff 	mov.w	r3, #4294967295
 8007c0a:	e063      	b.n	8007cd4 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
        }
      }

      if (lsm6dso_read_reg(&(pObj->Ctx), LSM6DSO_CTRL5_C, (uint8_t *)&val1, 1) != LSM6DSO_OK)
 8007c0c:	68fb      	ldr	r3, [r7, #12]
 8007c0e:	f103 0020 	add.w	r0, r3, #32
 8007c12:	f107 0214 	add.w	r2, r7, #20
 8007c16:	2301      	movs	r3, #1
 8007c18:	2114      	movs	r1, #20
 8007c1a:	f000 fe87 	bl	800892c <lsm6dso_read_reg>
 8007c1e:	4603      	mov	r3, r0
 8007c20:	2b00      	cmp	r3, #0
 8007c22:	d002      	beq.n	8007c2a <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x27e>
      {
        return LSM6DSO_ERROR;
 8007c24:	f04f 33ff 	mov.w	r3, #4294967295
 8007c28:	e054      	b.n	8007cd4 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
      }

      if (val1.xl_ulp_en == 0U)
 8007c2a:	7d3b      	ldrb	r3, [r7, #20]
 8007c2c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8007c30:	b2db      	uxtb	r3, r3
 8007c32:	2b00      	cmp	r3, #0
 8007c34:	d123      	bne.n	8007c7e <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2d2>
      {
        /* Power off the accelerometer */
        if (pObj->acc_is_enabled == 1U)
 8007c36:	68fb      	ldr	r3, [r7, #12]
 8007c38:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8007c3c:	2b01      	cmp	r3, #1
 8007c3e:	d10b      	bne.n	8007c58 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2ac>
        {
          if (lsm6dso_xl_data_rate_set(&(pObj->Ctx), LSM6DSO_XL_ODR_OFF) != LSM6DSO_OK)
 8007c40:	68fb      	ldr	r3, [r7, #12]
 8007c42:	3320      	adds	r3, #32
 8007c44:	2100      	movs	r1, #0
 8007c46:	4618      	mov	r0, r3
 8007c48:	f000 fefe 	bl	8008a48 <lsm6dso_xl_data_rate_set>
 8007c4c:	4603      	mov	r3, r0
 8007c4e:	2b00      	cmp	r3, #0
 8007c50:	d002      	beq.n	8007c58 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2ac>
          {
            return LSM6DSO_ERROR;
 8007c52:	f04f 33ff 	mov.w	r3, #4294967295
 8007c56:	e03d      	b.n	8007cd4 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
          }
        }

        val1.xl_ulp_en = 1U;
 8007c58:	7d3b      	ldrb	r3, [r7, #20]
 8007c5a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007c5e:	753b      	strb	r3, [r7, #20]
        if (lsm6dso_write_reg(&(pObj->Ctx), LSM6DSO_CTRL5_C, (uint8_t *)&val1, 1) != LSM6DSO_OK)
 8007c60:	68fb      	ldr	r3, [r7, #12]
 8007c62:	f103 0020 	add.w	r0, r3, #32
 8007c66:	f107 0214 	add.w	r2, r7, #20
 8007c6a:	2301      	movs	r3, #1
 8007c6c:	2114      	movs	r1, #20
 8007c6e:	f000 fe75 	bl	800895c <lsm6dso_write_reg>
 8007c72:	4603      	mov	r3, r0
 8007c74:	2b00      	cmp	r3, #0
 8007c76:	d002      	beq.n	8007c7e <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2d2>
        {
          return LSM6DSO_ERROR;
 8007c78:	f04f 33ff 	mov.w	r3, #4294967295
 8007c7c:	e02a      	b.n	8007cd4 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
        }
      }

      /* Now we need to limit the ODR to 208 Hz if it is higher */
      if (newOdr > 208.0f)
 8007c7e:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8007c82:	ed9f 7a17 	vldr	s14, [pc, #92]	; 8007ce0 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x334>
 8007c86:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007c8a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007c8e:	dc00      	bgt.n	8007c92 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2e6>
      {
        newOdr = 208.0f;
      }
      break;
 8007c90:	e006      	b.n	8007ca0 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2f4>
        newOdr = 208.0f;
 8007c92:	4b14      	ldr	r3, [pc, #80]	; (8007ce4 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x338>)
 8007c94:	62bb      	str	r3, [r7, #40]	; 0x28
 8007c96:	e003      	b.n	8007ca0 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2f4>
    }
    default:
      ret = LSM6DSO_ERROR;
 8007c98:	f04f 33ff 	mov.w	r3, #4294967295
 8007c9c:	62fb      	str	r3, [r7, #44]	; 0x2c
      break;
 8007c9e:	bf00      	nop
  }

  if (ret == LSM6DSO_ERROR)
 8007ca0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ca2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007ca6:	d102      	bne.n	8007cae <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x302>
  {
    return LSM6DSO_ERROR;
 8007ca8:	f04f 33ff 	mov.w	r3, #4294967295
 8007cac:	e012      	b.n	8007cd4 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
  }

  if (pObj->acc_is_enabled == 1U)
 8007cae:	68fb      	ldr	r3, [r7, #12]
 8007cb0:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8007cb4:	2b01      	cmp	r3, #1
 8007cb6:	d106      	bne.n	8007cc6 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x31a>
  {
    ret = LSM6DSO_ACC_SetOutputDataRate_When_Enabled(pObj, newOdr);
 8007cb8:	ed97 0a0a 	vldr	s0, [r7, #40]	; 0x28
 8007cbc:	68f8      	ldr	r0, [r7, #12]
 8007cbe:	f000 fbc9 	bl	8008454 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled>
 8007cc2:	62f8      	str	r0, [r7, #44]	; 0x2c
 8007cc4:	e005      	b.n	8007cd2 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x326>
  }
  else
  {
    ret = LSM6DSO_ACC_SetOutputDataRate_When_Disabled(pObj, newOdr);
 8007cc6:	ed97 0a0a 	vldr	s0, [r7, #40]	; 0x28
 8007cca:	68f8      	ldr	r0, [r7, #12]
 8007ccc:	f000 fc5a 	bl	8008584 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled>
 8007cd0:	62f8      	str	r0, [r7, #44]	; 0x2c
  }

  return ret;
 8007cd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8007cd4:	4618      	mov	r0, r3
 8007cd6:	3730      	adds	r7, #48	; 0x30
 8007cd8:	46bd      	mov	sp, r7
 8007cda:	bd80      	pop	{r7, pc}
 8007cdc:	41480000 	.word	0x41480000
 8007ce0:	43500000 	.word	0x43500000
 8007ce4:	43500000 	.word	0x43500000

08007ce8 <LSM6DSO_ACC_GetFullScale>:
  * @param  pObj the device pObj
  * @param  FullScale pointer where the full scale is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_ACC_GetFullScale(LSM6DSO_Object_t *pObj, int32_t *FullScale)
{
 8007ce8:	b580      	push	{r7, lr}
 8007cea:	b084      	sub	sp, #16
 8007cec:	af00      	add	r7, sp, #0
 8007cee:	6078      	str	r0, [r7, #4]
 8007cf0:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSO_OK;
 8007cf2:	2300      	movs	r3, #0
 8007cf4:	60fb      	str	r3, [r7, #12]
  lsm6dso_fs_xl_t fs_low_level;

  /* Read actual full scale selection from sensor. */
  if (lsm6dso_xl_full_scale_get(&(pObj->Ctx), &fs_low_level) != LSM6DSO_OK)
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	3320      	adds	r3, #32
 8007cfa:	f107 020b 	add.w	r2, r7, #11
 8007cfe:	4611      	mov	r1, r2
 8007d00:	4618      	mov	r0, r3
 8007d02:	f000 fe69 	bl	80089d8 <lsm6dso_xl_full_scale_get>
 8007d06:	4603      	mov	r3, r0
 8007d08:	2b00      	cmp	r3, #0
 8007d0a:	d002      	beq.n	8007d12 <LSM6DSO_ACC_GetFullScale+0x2a>
  {
    return LSM6DSO_ERROR;
 8007d0c:	f04f 33ff 	mov.w	r3, #4294967295
 8007d10:	e023      	b.n	8007d5a <LSM6DSO_ACC_GetFullScale+0x72>
  }

  switch (fs_low_level)
 8007d12:	7afb      	ldrb	r3, [r7, #11]
 8007d14:	2b03      	cmp	r3, #3
 8007d16:	d81b      	bhi.n	8007d50 <LSM6DSO_ACC_GetFullScale+0x68>
 8007d18:	a201      	add	r2, pc, #4	; (adr r2, 8007d20 <LSM6DSO_ACC_GetFullScale+0x38>)
 8007d1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d1e:	bf00      	nop
 8007d20:	08007d31 	.word	0x08007d31
 8007d24:	08007d49 	.word	0x08007d49
 8007d28:	08007d39 	.word	0x08007d39
 8007d2c:	08007d41 	.word	0x08007d41
  {
    case LSM6DSO_2g:
      *FullScale =  2;
 8007d30:	683b      	ldr	r3, [r7, #0]
 8007d32:	2202      	movs	r2, #2
 8007d34:	601a      	str	r2, [r3, #0]
      break;
 8007d36:	e00f      	b.n	8007d58 <LSM6DSO_ACC_GetFullScale+0x70>

    case LSM6DSO_4g:
      *FullScale =  4;
 8007d38:	683b      	ldr	r3, [r7, #0]
 8007d3a:	2204      	movs	r2, #4
 8007d3c:	601a      	str	r2, [r3, #0]
      break;
 8007d3e:	e00b      	b.n	8007d58 <LSM6DSO_ACC_GetFullScale+0x70>

    case LSM6DSO_8g:
      *FullScale =  8;
 8007d40:	683b      	ldr	r3, [r7, #0]
 8007d42:	2208      	movs	r2, #8
 8007d44:	601a      	str	r2, [r3, #0]
      break;
 8007d46:	e007      	b.n	8007d58 <LSM6DSO_ACC_GetFullScale+0x70>

    case LSM6DSO_16g:
      *FullScale = 16;
 8007d48:	683b      	ldr	r3, [r7, #0]
 8007d4a:	2210      	movs	r2, #16
 8007d4c:	601a      	str	r2, [r3, #0]
      break;
 8007d4e:	e003      	b.n	8007d58 <LSM6DSO_ACC_GetFullScale+0x70>

    default:
      ret = LSM6DSO_ERROR;
 8007d50:	f04f 33ff 	mov.w	r3, #4294967295
 8007d54:	60fb      	str	r3, [r7, #12]
      break;
 8007d56:	bf00      	nop
  }

  return ret;
 8007d58:	68fb      	ldr	r3, [r7, #12]
}
 8007d5a:	4618      	mov	r0, r3
 8007d5c:	3710      	adds	r7, #16
 8007d5e:	46bd      	mov	sp, r7
 8007d60:	bd80      	pop	{r7, pc}
 8007d62:	bf00      	nop

08007d64 <LSM6DSO_ACC_SetFullScale>:
  * @param  pObj the device pObj
  * @param  FullScale the functional full scale to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_ACC_SetFullScale(LSM6DSO_Object_t *pObj, int32_t FullScale)
{
 8007d64:	b580      	push	{r7, lr}
 8007d66:	b084      	sub	sp, #16
 8007d68:	af00      	add	r7, sp, #0
 8007d6a:	6078      	str	r0, [r7, #4]
 8007d6c:	6039      	str	r1, [r7, #0]
  lsm6dso_fs_xl_t new_fs;

  /* Seems like MISRA C-2012 rule 14.3a violation but only from single file statical analysis point of view because
     the parameter passed to the function is not known at the moment of analysis */
  new_fs = (FullScale <= 2) ? LSM6DSO_2g
           : (FullScale <= 4) ? LSM6DSO_4g
 8007d6e:	683b      	ldr	r3, [r7, #0]
 8007d70:	2b02      	cmp	r3, #2
 8007d72:	dd0b      	ble.n	8007d8c <LSM6DSO_ACC_SetFullScale+0x28>
 8007d74:	683b      	ldr	r3, [r7, #0]
 8007d76:	2b04      	cmp	r3, #4
 8007d78:	dd06      	ble.n	8007d88 <LSM6DSO_ACC_SetFullScale+0x24>
 8007d7a:	683b      	ldr	r3, [r7, #0]
 8007d7c:	2b08      	cmp	r3, #8
 8007d7e:	dc01      	bgt.n	8007d84 <LSM6DSO_ACC_SetFullScale+0x20>
 8007d80:	2303      	movs	r3, #3
 8007d82:	e004      	b.n	8007d8e <LSM6DSO_ACC_SetFullScale+0x2a>
 8007d84:	2301      	movs	r3, #1
 8007d86:	e002      	b.n	8007d8e <LSM6DSO_ACC_SetFullScale+0x2a>
 8007d88:	2302      	movs	r3, #2
 8007d8a:	e000      	b.n	8007d8e <LSM6DSO_ACC_SetFullScale+0x2a>
 8007d8c:	2300      	movs	r3, #0
  new_fs = (FullScale <= 2) ? LSM6DSO_2g
 8007d8e:	73fb      	strb	r3, [r7, #15]
           : (FullScale <= 8) ? LSM6DSO_8g
           :                    LSM6DSO_16g;

  if (lsm6dso_xl_full_scale_set(&(pObj->Ctx), new_fs) != LSM6DSO_OK)
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	3320      	adds	r3, #32
 8007d94:	7bfa      	ldrb	r2, [r7, #15]
 8007d96:	4611      	mov	r1, r2
 8007d98:	4618      	mov	r0, r3
 8007d9a:	f000 fdf7 	bl	800898c <lsm6dso_xl_full_scale_set>
 8007d9e:	4603      	mov	r3, r0
 8007da0:	2b00      	cmp	r3, #0
 8007da2:	d002      	beq.n	8007daa <LSM6DSO_ACC_SetFullScale+0x46>
  {
    return LSM6DSO_ERROR;
 8007da4:	f04f 33ff 	mov.w	r3, #4294967295
 8007da8:	e000      	b.n	8007dac <LSM6DSO_ACC_SetFullScale+0x48>
  }

  return LSM6DSO_OK;
 8007daa:	2300      	movs	r3, #0
}
 8007dac:	4618      	mov	r0, r3
 8007dae:	3710      	adds	r7, #16
 8007db0:	46bd      	mov	sp, r7
 8007db2:	bd80      	pop	{r7, pc}

08007db4 <LSM6DSO_ACC_GetAxesRaw>:
  * @param  pObj the device pObj
  * @param  Value pointer where the raw values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_ACC_GetAxesRaw(LSM6DSO_Object_t *pObj, LSM6DSO_AxesRaw_t *Value)
{
 8007db4:	b580      	push	{r7, lr}
 8007db6:	b084      	sub	sp, #16
 8007db8:	af00      	add	r7, sp, #0
 8007dba:	6078      	str	r0, [r7, #4]
 8007dbc:	6039      	str	r1, [r7, #0]
  lsm6dso_axis3bit16_t data_raw;

  /* Read raw data values. */
  if (lsm6dso_acceleration_raw_get(&(pObj->Ctx), data_raw.i16bit) != LSM6DSO_OK)
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	3320      	adds	r3, #32
 8007dc2:	f107 0208 	add.w	r2, r7, #8
 8007dc6:	4611      	mov	r1, r2
 8007dc8:	4618      	mov	r0, r3
 8007dca:	f001 f9d8 	bl	800917e <lsm6dso_acceleration_raw_get>
 8007dce:	4603      	mov	r3, r0
 8007dd0:	2b00      	cmp	r3, #0
 8007dd2:	d002      	beq.n	8007dda <LSM6DSO_ACC_GetAxesRaw+0x26>
  {
    return LSM6DSO_ERROR;
 8007dd4:	f04f 33ff 	mov.w	r3, #4294967295
 8007dd8:	e00c      	b.n	8007df4 <LSM6DSO_ACC_GetAxesRaw+0x40>
  }

  /* Format the data. */
  Value->x = data_raw.i16bit[0];
 8007dda:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8007dde:	683b      	ldr	r3, [r7, #0]
 8007de0:	801a      	strh	r2, [r3, #0]
  Value->y = data_raw.i16bit[1];
 8007de2:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8007de6:	683b      	ldr	r3, [r7, #0]
 8007de8:	805a      	strh	r2, [r3, #2]
  Value->z = data_raw.i16bit[2];
 8007dea:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8007dee:	683b      	ldr	r3, [r7, #0]
 8007df0:	809a      	strh	r2, [r3, #4]

  return LSM6DSO_OK;
 8007df2:	2300      	movs	r3, #0
}
 8007df4:	4618      	mov	r0, r3
 8007df6:	3710      	adds	r7, #16
 8007df8:	46bd      	mov	sp, r7
 8007dfa:	bd80      	pop	{r7, pc}

08007dfc <LSM6DSO_ACC_GetAxes>:
  * @param  pObj the device pObj
  * @param  Acceleration pointer where the values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_ACC_GetAxes(LSM6DSO_Object_t *pObj, LSM6DSO_Axes_t *Acceleration)
{
 8007dfc:	b580      	push	{r7, lr}
 8007dfe:	b086      	sub	sp, #24
 8007e00:	af00      	add	r7, sp, #0
 8007e02:	6078      	str	r0, [r7, #4]
 8007e04:	6039      	str	r1, [r7, #0]
  lsm6dso_axis3bit16_t data_raw;
  float_t sensitivity = 0.0f;
 8007e06:	f04f 0300 	mov.w	r3, #0
 8007e0a:	60fb      	str	r3, [r7, #12]

  /* Read raw data values. */
  if (lsm6dso_acceleration_raw_get(&(pObj->Ctx), data_raw.i16bit) != LSM6DSO_OK)
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	3320      	adds	r3, #32
 8007e10:	f107 0210 	add.w	r2, r7, #16
 8007e14:	4611      	mov	r1, r2
 8007e16:	4618      	mov	r0, r3
 8007e18:	f001 f9b1 	bl	800917e <lsm6dso_acceleration_raw_get>
 8007e1c:	4603      	mov	r3, r0
 8007e1e:	2b00      	cmp	r3, #0
 8007e20:	d002      	beq.n	8007e28 <LSM6DSO_ACC_GetAxes+0x2c>
  {
    return LSM6DSO_ERROR;
 8007e22:	f04f 33ff 	mov.w	r3, #4294967295
 8007e26:	e03c      	b.n	8007ea2 <LSM6DSO_ACC_GetAxes+0xa6>
  }

  /* Get LSM6DSO actual sensitivity. */
  if (LSM6DSO_ACC_GetSensitivity(pObj, &sensitivity) != LSM6DSO_OK)
 8007e28:	f107 030c 	add.w	r3, r7, #12
 8007e2c:	4619      	mov	r1, r3
 8007e2e:	6878      	ldr	r0, [r7, #4]
 8007e30:	f7ff fce0 	bl	80077f4 <LSM6DSO_ACC_GetSensitivity>
 8007e34:	4603      	mov	r3, r0
 8007e36:	2b00      	cmp	r3, #0
 8007e38:	d002      	beq.n	8007e40 <LSM6DSO_ACC_GetAxes+0x44>
  {
    return LSM6DSO_ERROR;
 8007e3a:	f04f 33ff 	mov.w	r3, #4294967295
 8007e3e:	e030      	b.n	8007ea2 <LSM6DSO_ACC_GetAxes+0xa6>
  }

  /* Calculate the data. */
  Acceleration->x = (int32_t)((float_t)((float_t)data_raw.i16bit[0] * sensitivity));
 8007e40:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8007e44:	ee07 3a90 	vmov	s15, r3
 8007e48:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8007e4c:	edd7 7a03 	vldr	s15, [r7, #12]
 8007e50:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007e54:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007e58:	ee17 2a90 	vmov	r2, s15
 8007e5c:	683b      	ldr	r3, [r7, #0]
 8007e5e:	601a      	str	r2, [r3, #0]
  Acceleration->y = (int32_t)((float_t)((float_t)data_raw.i16bit[1] * sensitivity));
 8007e60:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8007e64:	ee07 3a90 	vmov	s15, r3
 8007e68:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8007e6c:	edd7 7a03 	vldr	s15, [r7, #12]
 8007e70:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007e74:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007e78:	ee17 2a90 	vmov	r2, s15
 8007e7c:	683b      	ldr	r3, [r7, #0]
 8007e7e:	605a      	str	r2, [r3, #4]
  Acceleration->z = (int32_t)((float_t)((float_t)data_raw.i16bit[2] * sensitivity));
 8007e80:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8007e84:	ee07 3a90 	vmov	s15, r3
 8007e88:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8007e8c:	edd7 7a03 	vldr	s15, [r7, #12]
 8007e90:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007e94:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007e98:	ee17 2a90 	vmov	r2, s15
 8007e9c:	683b      	ldr	r3, [r7, #0]
 8007e9e:	609a      	str	r2, [r3, #8]

  return LSM6DSO_OK;
 8007ea0:	2300      	movs	r3, #0
}
 8007ea2:	4618      	mov	r0, r3
 8007ea4:	3718      	adds	r7, #24
 8007ea6:	46bd      	mov	sp, r7
 8007ea8:	bd80      	pop	{r7, pc}

08007eaa <LSM6DSO_GYRO_Enable>:
  * @brief  Enable the LSM6DSO gyroscope sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_GYRO_Enable(LSM6DSO_Object_t *pObj)
{
 8007eaa:	b580      	push	{r7, lr}
 8007eac:	b082      	sub	sp, #8
 8007eae:	af00      	add	r7, sp, #0
 8007eb0:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->gyro_is_enabled == 1U)
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8007eb8:	2b01      	cmp	r3, #1
 8007eba:	d101      	bne.n	8007ec0 <LSM6DSO_GYRO_Enable+0x16>
  {
    return LSM6DSO_OK;
 8007ebc:	2300      	movs	r3, #0
 8007ebe:	e014      	b.n	8007eea <LSM6DSO_GYRO_Enable+0x40>
  }

  /* Output data rate selection. */
  if (lsm6dso_gy_data_rate_set(&(pObj->Ctx), pObj->gyro_odr) != LSM6DSO_OK)
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	f103 0220 	add.w	r2, r3, #32
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8007ecc:	4619      	mov	r1, r3
 8007ece:	4610      	mov	r0, r2
 8007ed0:	f000 ff86 	bl	8008de0 <lsm6dso_gy_data_rate_set>
 8007ed4:	4603      	mov	r3, r0
 8007ed6:	2b00      	cmp	r3, #0
 8007ed8:	d002      	beq.n	8007ee0 <LSM6DSO_GYRO_Enable+0x36>
  {
    return LSM6DSO_ERROR;
 8007eda:	f04f 33ff 	mov.w	r3, #4294967295
 8007ede:	e004      	b.n	8007eea <LSM6DSO_GYRO_Enable+0x40>
  }

  pObj->gyro_is_enabled = 1;
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	2201      	movs	r2, #1
 8007ee4:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32

  return LSM6DSO_OK;
 8007ee8:	2300      	movs	r3, #0
}
 8007eea:	4618      	mov	r0, r3
 8007eec:	3708      	adds	r7, #8
 8007eee:	46bd      	mov	sp, r7
 8007ef0:	bd80      	pop	{r7, pc}

08007ef2 <LSM6DSO_GYRO_Disable>:
  * @brief  Disable the LSM6DSO gyroscope sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_GYRO_Disable(LSM6DSO_Object_t *pObj)
{
 8007ef2:	b580      	push	{r7, lr}
 8007ef4:	b082      	sub	sp, #8
 8007ef6:	af00      	add	r7, sp, #0
 8007ef8:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->gyro_is_enabled == 0U)
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8007f00:	2b00      	cmp	r3, #0
 8007f02:	d101      	bne.n	8007f08 <LSM6DSO_GYRO_Disable+0x16>
  {
    return LSM6DSO_OK;
 8007f04:	2300      	movs	r3, #0
 8007f06:	e01f      	b.n	8007f48 <LSM6DSO_GYRO_Disable+0x56>
  }

  /* Get current output data rate. */
  if (lsm6dso_gy_data_rate_get(&(pObj->Ctx), &pObj->gyro_odr) != LSM6DSO_OK)
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	f103 0220 	add.w	r2, r3, #32
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	3334      	adds	r3, #52	; 0x34
 8007f12:	4619      	mov	r1, r3
 8007f14:	4610      	mov	r0, r2
 8007f16:	f001 f85f 	bl	8008fd8 <lsm6dso_gy_data_rate_get>
 8007f1a:	4603      	mov	r3, r0
 8007f1c:	2b00      	cmp	r3, #0
 8007f1e:	d002      	beq.n	8007f26 <LSM6DSO_GYRO_Disable+0x34>
  {
    return LSM6DSO_ERROR;
 8007f20:	f04f 33ff 	mov.w	r3, #4294967295
 8007f24:	e010      	b.n	8007f48 <LSM6DSO_GYRO_Disable+0x56>
  }

  /* Output data rate selection - power down. */
  if (lsm6dso_gy_data_rate_set(&(pObj->Ctx), LSM6DSO_GY_ODR_OFF) != LSM6DSO_OK)
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	3320      	adds	r3, #32
 8007f2a:	2100      	movs	r1, #0
 8007f2c:	4618      	mov	r0, r3
 8007f2e:	f000 ff57 	bl	8008de0 <lsm6dso_gy_data_rate_set>
 8007f32:	4603      	mov	r3, r0
 8007f34:	2b00      	cmp	r3, #0
 8007f36:	d002      	beq.n	8007f3e <LSM6DSO_GYRO_Disable+0x4c>
  {
    return LSM6DSO_ERROR;
 8007f38:	f04f 33ff 	mov.w	r3, #4294967295
 8007f3c:	e004      	b.n	8007f48 <LSM6DSO_GYRO_Disable+0x56>
  }

  pObj->gyro_is_enabled = 0;
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	2200      	movs	r2, #0
 8007f42:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32

  return LSM6DSO_OK;
 8007f46:	2300      	movs	r3, #0
}
 8007f48:	4618      	mov	r0, r3
 8007f4a:	3708      	adds	r7, #8
 8007f4c:	46bd      	mov	sp, r7
 8007f4e:	bd80      	pop	{r7, pc}

08007f50 <LSM6DSO_GYRO_GetSensitivity>:
  * @param  pObj the device pObj
  * @param  Sensitivity pointer
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_GYRO_GetSensitivity(LSM6DSO_Object_t *pObj, float_t *Sensitivity)
{
 8007f50:	b580      	push	{r7, lr}
 8007f52:	b084      	sub	sp, #16
 8007f54:	af00      	add	r7, sp, #0
 8007f56:	6078      	str	r0, [r7, #4]
 8007f58:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSO_OK;
 8007f5a:	2300      	movs	r3, #0
 8007f5c:	60fb      	str	r3, [r7, #12]
  lsm6dso_fs_g_t full_scale;

  /* Read actual full scale selection from sensor. */
  if (lsm6dso_gy_full_scale_get(&(pObj->Ctx), &full_scale) != LSM6DSO_OK)
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	3320      	adds	r3, #32
 8007f62:	f107 020b 	add.w	r2, r7, #11
 8007f66:	4611      	mov	r1, r2
 8007f68:	4618      	mov	r0, r3
 8007f6a:	f000 fef7 	bl	8008d5c <lsm6dso_gy_full_scale_get>
 8007f6e:	4603      	mov	r3, r0
 8007f70:	2b00      	cmp	r3, #0
 8007f72:	d002      	beq.n	8007f7a <LSM6DSO_GYRO_GetSensitivity+0x2a>
  {
    return LSM6DSO_ERROR;
 8007f74:	f04f 33ff 	mov.w	r3, #4294967295
 8007f78:	e02d      	b.n	8007fd6 <LSM6DSO_GYRO_GetSensitivity+0x86>
  }

  /* Store the sensitivity based on actual full scale. */
  switch (full_scale)
 8007f7a:	7afb      	ldrb	r3, [r7, #11]
 8007f7c:	2b06      	cmp	r3, #6
 8007f7e:	d825      	bhi.n	8007fcc <LSM6DSO_GYRO_GetSensitivity+0x7c>
 8007f80:	a201      	add	r2, pc, #4	; (adr r2, 8007f88 <LSM6DSO_GYRO_GetSensitivity+0x38>)
 8007f82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f86:	bf00      	nop
 8007f88:	08007fad 	.word	0x08007fad
 8007f8c:	08007fa5 	.word	0x08007fa5
 8007f90:	08007fb5 	.word	0x08007fb5
 8007f94:	08007fcd 	.word	0x08007fcd
 8007f98:	08007fbd 	.word	0x08007fbd
 8007f9c:	08007fcd 	.word	0x08007fcd
 8007fa0:	08007fc5 	.word	0x08007fc5
  {
    case LSM6DSO_125dps:
      *Sensitivity = LSM6DSO_GYRO_SENSITIVITY_FS_125DPS;
 8007fa4:	683b      	ldr	r3, [r7, #0]
 8007fa6:	4a0e      	ldr	r2, [pc, #56]	; (8007fe0 <LSM6DSO_GYRO_GetSensitivity+0x90>)
 8007fa8:	601a      	str	r2, [r3, #0]
      break;
 8007faa:	e013      	b.n	8007fd4 <LSM6DSO_GYRO_GetSensitivity+0x84>

    case LSM6DSO_250dps:
      *Sensitivity = LSM6DSO_GYRO_SENSITIVITY_FS_250DPS;
 8007fac:	683b      	ldr	r3, [r7, #0]
 8007fae:	4a0d      	ldr	r2, [pc, #52]	; (8007fe4 <LSM6DSO_GYRO_GetSensitivity+0x94>)
 8007fb0:	601a      	str	r2, [r3, #0]
      break;
 8007fb2:	e00f      	b.n	8007fd4 <LSM6DSO_GYRO_GetSensitivity+0x84>

    case LSM6DSO_500dps:
      *Sensitivity = LSM6DSO_GYRO_SENSITIVITY_FS_500DPS;
 8007fb4:	683b      	ldr	r3, [r7, #0]
 8007fb6:	4a0c      	ldr	r2, [pc, #48]	; (8007fe8 <LSM6DSO_GYRO_GetSensitivity+0x98>)
 8007fb8:	601a      	str	r2, [r3, #0]
      break;
 8007fba:	e00b      	b.n	8007fd4 <LSM6DSO_GYRO_GetSensitivity+0x84>

    case LSM6DSO_1000dps:
      *Sensitivity = LSM6DSO_GYRO_SENSITIVITY_FS_1000DPS;
 8007fbc:	683b      	ldr	r3, [r7, #0]
 8007fbe:	4a0b      	ldr	r2, [pc, #44]	; (8007fec <LSM6DSO_GYRO_GetSensitivity+0x9c>)
 8007fc0:	601a      	str	r2, [r3, #0]
      break;
 8007fc2:	e007      	b.n	8007fd4 <LSM6DSO_GYRO_GetSensitivity+0x84>

    case LSM6DSO_2000dps:
      *Sensitivity = LSM6DSO_GYRO_SENSITIVITY_FS_2000DPS;
 8007fc4:	683b      	ldr	r3, [r7, #0]
 8007fc6:	4a0a      	ldr	r2, [pc, #40]	; (8007ff0 <LSM6DSO_GYRO_GetSensitivity+0xa0>)
 8007fc8:	601a      	str	r2, [r3, #0]
      break;
 8007fca:	e003      	b.n	8007fd4 <LSM6DSO_GYRO_GetSensitivity+0x84>

    default:
      ret = LSM6DSO_ERROR;
 8007fcc:	f04f 33ff 	mov.w	r3, #4294967295
 8007fd0:	60fb      	str	r3, [r7, #12]
      break;
 8007fd2:	bf00      	nop
  }

  return ret;
 8007fd4:	68fb      	ldr	r3, [r7, #12]
}
 8007fd6:	4618      	mov	r0, r3
 8007fd8:	3710      	adds	r7, #16
 8007fda:	46bd      	mov	sp, r7
 8007fdc:	bd80      	pop	{r7, pc}
 8007fde:	bf00      	nop
 8007fe0:	408c0000 	.word	0x408c0000
 8007fe4:	410c0000 	.word	0x410c0000
 8007fe8:	418c0000 	.word	0x418c0000
 8007fec:	420c0000 	.word	0x420c0000
 8007ff0:	428c0000 	.word	0x428c0000

08007ff4 <LSM6DSO_GYRO_GetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr pointer where the output data rate is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_GYRO_GetOutputDataRate(LSM6DSO_Object_t *pObj, float_t *Odr)
{
 8007ff4:	b580      	push	{r7, lr}
 8007ff6:	b084      	sub	sp, #16
 8007ff8:	af00      	add	r7, sp, #0
 8007ffa:	6078      	str	r0, [r7, #4]
 8007ffc:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSO_OK;
 8007ffe:	2300      	movs	r3, #0
 8008000:	60fb      	str	r3, [r7, #12]
  lsm6dso_odr_g_t odr_low_level;

  /* Get current output data rate. */
  if (lsm6dso_gy_data_rate_get(&(pObj->Ctx), &odr_low_level) != LSM6DSO_OK)
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	3320      	adds	r3, #32
 8008006:	f107 020b 	add.w	r2, r7, #11
 800800a:	4611      	mov	r1, r2
 800800c:	4618      	mov	r0, r3
 800800e:	f000 ffe3 	bl	8008fd8 <lsm6dso_gy_data_rate_get>
 8008012:	4603      	mov	r3, r0
 8008014:	2b00      	cmp	r3, #0
 8008016:	d002      	beq.n	800801e <LSM6DSO_GYRO_GetOutputDataRate+0x2a>
  {
    return LSM6DSO_ERROR;
 8008018:	f04f 33ff 	mov.w	r3, #4294967295
 800801c:	e04e      	b.n	80080bc <LSM6DSO_GYRO_GetOutputDataRate+0xc8>
  }

  switch (odr_low_level)
 800801e:	7afb      	ldrb	r3, [r7, #11]
 8008020:	2b0a      	cmp	r3, #10
 8008022:	d846      	bhi.n	80080b2 <LSM6DSO_GYRO_GetOutputDataRate+0xbe>
 8008024:	a201      	add	r2, pc, #4	; (adr r2, 800802c <LSM6DSO_GYRO_GetOutputDataRate+0x38>)
 8008026:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800802a:	bf00      	nop
 800802c:	08008059 	.word	0x08008059
 8008030:	08008063 	.word	0x08008063
 8008034:	0800806b 	.word	0x0800806b
 8008038:	08008073 	.word	0x08008073
 800803c:	0800807b 	.word	0x0800807b
 8008040:	08008083 	.word	0x08008083
 8008044:	0800808b 	.word	0x0800808b
 8008048:	08008093 	.word	0x08008093
 800804c:	0800809b 	.word	0x0800809b
 8008050:	080080a3 	.word	0x080080a3
 8008054:	080080ab 	.word	0x080080ab
  {
    case LSM6DSO_GY_ODR_OFF:
      *Odr = 0.0f;
 8008058:	683b      	ldr	r3, [r7, #0]
 800805a:	f04f 0200 	mov.w	r2, #0
 800805e:	601a      	str	r2, [r3, #0]
      break;
 8008060:	e02b      	b.n	80080ba <LSM6DSO_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSO_GY_ODR_12Hz5:
      *Odr = 12.5f;
 8008062:	683b      	ldr	r3, [r7, #0]
 8008064:	4a17      	ldr	r2, [pc, #92]	; (80080c4 <LSM6DSO_GYRO_GetOutputDataRate+0xd0>)
 8008066:	601a      	str	r2, [r3, #0]
      break;
 8008068:	e027      	b.n	80080ba <LSM6DSO_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSO_GY_ODR_26Hz:
      *Odr = 26.0f;
 800806a:	683b      	ldr	r3, [r7, #0]
 800806c:	4a16      	ldr	r2, [pc, #88]	; (80080c8 <LSM6DSO_GYRO_GetOutputDataRate+0xd4>)
 800806e:	601a      	str	r2, [r3, #0]
      break;
 8008070:	e023      	b.n	80080ba <LSM6DSO_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSO_GY_ODR_52Hz:
      *Odr = 52.0f;
 8008072:	683b      	ldr	r3, [r7, #0]
 8008074:	4a15      	ldr	r2, [pc, #84]	; (80080cc <LSM6DSO_GYRO_GetOutputDataRate+0xd8>)
 8008076:	601a      	str	r2, [r3, #0]
      break;
 8008078:	e01f      	b.n	80080ba <LSM6DSO_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSO_GY_ODR_104Hz:
      *Odr = 104.0f;
 800807a:	683b      	ldr	r3, [r7, #0]
 800807c:	4a14      	ldr	r2, [pc, #80]	; (80080d0 <LSM6DSO_GYRO_GetOutputDataRate+0xdc>)
 800807e:	601a      	str	r2, [r3, #0]
      break;
 8008080:	e01b      	b.n	80080ba <LSM6DSO_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSO_GY_ODR_208Hz:
      *Odr = 208.0f;
 8008082:	683b      	ldr	r3, [r7, #0]
 8008084:	4a13      	ldr	r2, [pc, #76]	; (80080d4 <LSM6DSO_GYRO_GetOutputDataRate+0xe0>)
 8008086:	601a      	str	r2, [r3, #0]
      break;
 8008088:	e017      	b.n	80080ba <LSM6DSO_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSO_GY_ODR_417Hz:
      *Odr = 417.0f;
 800808a:	683b      	ldr	r3, [r7, #0]
 800808c:	4a12      	ldr	r2, [pc, #72]	; (80080d8 <LSM6DSO_GYRO_GetOutputDataRate+0xe4>)
 800808e:	601a      	str	r2, [r3, #0]
      break;
 8008090:	e013      	b.n	80080ba <LSM6DSO_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSO_GY_ODR_833Hz:
      *Odr = 833.0f;
 8008092:	683b      	ldr	r3, [r7, #0]
 8008094:	4a11      	ldr	r2, [pc, #68]	; (80080dc <LSM6DSO_GYRO_GetOutputDataRate+0xe8>)
 8008096:	601a      	str	r2, [r3, #0]
      break;
 8008098:	e00f      	b.n	80080ba <LSM6DSO_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSO_GY_ODR_1667Hz:
      *Odr = 1667.0f;
 800809a:	683b      	ldr	r3, [r7, #0]
 800809c:	4a10      	ldr	r2, [pc, #64]	; (80080e0 <LSM6DSO_GYRO_GetOutputDataRate+0xec>)
 800809e:	601a      	str	r2, [r3, #0]
      break;
 80080a0:	e00b      	b.n	80080ba <LSM6DSO_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSO_GY_ODR_3333Hz:
      *Odr = 3333.0f;
 80080a2:	683b      	ldr	r3, [r7, #0]
 80080a4:	4a0f      	ldr	r2, [pc, #60]	; (80080e4 <LSM6DSO_GYRO_GetOutputDataRate+0xf0>)
 80080a6:	601a      	str	r2, [r3, #0]
      break;
 80080a8:	e007      	b.n	80080ba <LSM6DSO_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSO_GY_ODR_6667Hz:
      *Odr = 6667.0f;
 80080aa:	683b      	ldr	r3, [r7, #0]
 80080ac:	4a0e      	ldr	r2, [pc, #56]	; (80080e8 <LSM6DSO_GYRO_GetOutputDataRate+0xf4>)
 80080ae:	601a      	str	r2, [r3, #0]
      break;
 80080b0:	e003      	b.n	80080ba <LSM6DSO_GYRO_GetOutputDataRate+0xc6>

    default:
      ret = LSM6DSO_ERROR;
 80080b2:	f04f 33ff 	mov.w	r3, #4294967295
 80080b6:	60fb      	str	r3, [r7, #12]
      break;
 80080b8:	bf00      	nop
  }

  return ret;
 80080ba:	68fb      	ldr	r3, [r7, #12]
}
 80080bc:	4618      	mov	r0, r3
 80080be:	3710      	adds	r7, #16
 80080c0:	46bd      	mov	sp, r7
 80080c2:	bd80      	pop	{r7, pc}
 80080c4:	41480000 	.word	0x41480000
 80080c8:	41d00000 	.word	0x41d00000
 80080cc:	42500000 	.word	0x42500000
 80080d0:	42d00000 	.word	0x42d00000
 80080d4:	43500000 	.word	0x43500000
 80080d8:	43d08000 	.word	0x43d08000
 80080dc:	44504000 	.word	0x44504000
 80080e0:	44d06000 	.word	0x44d06000
 80080e4:	45505000 	.word	0x45505000
 80080e8:	45d05800 	.word	0x45d05800

080080ec <LSM6DSO_GYRO_SetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_GYRO_SetOutputDataRate(LSM6DSO_Object_t *pObj, float_t Odr)
{
 80080ec:	b580      	push	{r7, lr}
 80080ee:	b082      	sub	sp, #8
 80080f0:	af00      	add	r7, sp, #0
 80080f2:	6078      	str	r0, [r7, #4]
 80080f4:	ed87 0a00 	vstr	s0, [r7]
  return LSM6DSO_GYRO_SetOutputDataRate_With_Mode(pObj, Odr, LSM6DSO_GYRO_HIGH_PERFORMANCE_MODE);
 80080f8:	2100      	movs	r1, #0
 80080fa:	ed97 0a00 	vldr	s0, [r7]
 80080fe:	6878      	ldr	r0, [r7, #4]
 8008100:	f000 f806 	bl	8008110 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode>
 8008104:	4603      	mov	r3, r0
}
 8008106:	4618      	mov	r0, r3
 8008108:	3708      	adds	r7, #8
 800810a:	46bd      	mov	sp, r7
 800810c:	bd80      	pop	{r7, pc}
	...

08008110 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode>:
  * @param  Mode the gyroscope operating mode
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_GYRO_SetOutputDataRate_With_Mode(LSM6DSO_Object_t *pObj, float_t Odr,
                                                 LSM6DSO_GYRO_Operating_Mode_t Mode)
{
 8008110:	b580      	push	{r7, lr}
 8008112:	b088      	sub	sp, #32
 8008114:	af00      	add	r7, sp, #0
 8008116:	60f8      	str	r0, [r7, #12]
 8008118:	ed87 0a02 	vstr	s0, [r7, #8]
 800811c:	460b      	mov	r3, r1
 800811e:	71fb      	strb	r3, [r7, #7]
  int32_t ret = LSM6DSO_OK;
 8008120:	2300      	movs	r3, #0
 8008122:	61fb      	str	r3, [r7, #28]
  float_t newOdr = Odr;
 8008124:	68bb      	ldr	r3, [r7, #8]
 8008126:	61bb      	str	r3, [r7, #24]

  switch (Mode)
 8008128:	79fb      	ldrb	r3, [r7, #7]
 800812a:	2b00      	cmp	r3, #0
 800812c:	d002      	beq.n	8008134 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x24>
 800812e:	2b01      	cmp	r3, #1
 8008130:	d028      	beq.n	8008184 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x74>
 8008132:	e05c      	b.n	80081ee <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0xde>
    case LSM6DSO_GYRO_HIGH_PERFORMANCE_MODE:
    {
      /* We must uncheck Low Power bit if it is enabled */
      lsm6dso_ctrl7_g_t val1;

      if (lsm6dso_read_reg(&(pObj->Ctx), LSM6DSO_CTRL7_G, (uint8_t *)&val1, 1) != LSM6DSO_OK)
 8008134:	68fb      	ldr	r3, [r7, #12]
 8008136:	f103 0020 	add.w	r0, r3, #32
 800813a:	f107 0214 	add.w	r2, r7, #20
 800813e:	2301      	movs	r3, #1
 8008140:	2116      	movs	r1, #22
 8008142:	f000 fbf3 	bl	800892c <lsm6dso_read_reg>
 8008146:	4603      	mov	r3, r0
 8008148:	2b00      	cmp	r3, #0
 800814a:	d002      	beq.n	8008152 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x42>
      {
        return LSM6DSO_ERROR;
 800814c:	f04f 33ff 	mov.w	r3, #4294967295
 8008150:	e06c      	b.n	800822c <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x11c>
      }

      if (val1.g_hm_mode != 0U)
 8008152:	7d3b      	ldrb	r3, [r7, #20]
 8008154:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8008158:	b2db      	uxtb	r3, r3
 800815a:	2b00      	cmp	r3, #0
 800815c:	d04b      	beq.n	80081f6 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0xe6>
      {
        val1.g_hm_mode = 0U;
 800815e:	7d3b      	ldrb	r3, [r7, #20]
 8008160:	f36f 13c7 	bfc	r3, #7, #1
 8008164:	753b      	strb	r3, [r7, #20]
        if (lsm6dso_write_reg(&(pObj->Ctx), LSM6DSO_CTRL7_G, (uint8_t *)&val1, 1) != LSM6DSO_OK)
 8008166:	68fb      	ldr	r3, [r7, #12]
 8008168:	f103 0020 	add.w	r0, r3, #32
 800816c:	f107 0214 	add.w	r2, r7, #20
 8008170:	2301      	movs	r3, #1
 8008172:	2116      	movs	r1, #22
 8008174:	f000 fbf2 	bl	800895c <lsm6dso_write_reg>
 8008178:	4603      	mov	r3, r0
 800817a:	2b00      	cmp	r3, #0
 800817c:	d03b      	beq.n	80081f6 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0xe6>
        {
          return LSM6DSO_ERROR;
 800817e:	f04f 33ff 	mov.w	r3, #4294967295
 8008182:	e053      	b.n	800822c <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x11c>
    case LSM6DSO_GYRO_LOW_POWER_NORMAL_MODE:
    {
      /* We must check the Low Power bit if it is unchecked */
      lsm6dso_ctrl7_g_t val1;

      if (lsm6dso_read_reg(&(pObj->Ctx), LSM6DSO_CTRL7_G, (uint8_t *)&val1, 1) != LSM6DSO_OK)
 8008184:	68fb      	ldr	r3, [r7, #12]
 8008186:	f103 0020 	add.w	r0, r3, #32
 800818a:	f107 0210 	add.w	r2, r7, #16
 800818e:	2301      	movs	r3, #1
 8008190:	2116      	movs	r1, #22
 8008192:	f000 fbcb 	bl	800892c <lsm6dso_read_reg>
 8008196:	4603      	mov	r3, r0
 8008198:	2b00      	cmp	r3, #0
 800819a:	d002      	beq.n	80081a2 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x92>
      {
        return LSM6DSO_ERROR;
 800819c:	f04f 33ff 	mov.w	r3, #4294967295
 80081a0:	e044      	b.n	800822c <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x11c>
      }

      if (val1.g_hm_mode == 0U)
 80081a2:	7c3b      	ldrb	r3, [r7, #16]
 80081a4:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80081a8:	b2db      	uxtb	r3, r3
 80081aa:	2b00      	cmp	r3, #0
 80081ac:	d112      	bne.n	80081d4 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0xc4>
      {
        val1.g_hm_mode = 1U;
 80081ae:	7c3b      	ldrb	r3, [r7, #16]
 80081b0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80081b4:	743b      	strb	r3, [r7, #16]
        if (lsm6dso_write_reg(&(pObj->Ctx), LSM6DSO_CTRL7_G, (uint8_t *)&val1, 1) != LSM6DSO_OK)
 80081b6:	68fb      	ldr	r3, [r7, #12]
 80081b8:	f103 0020 	add.w	r0, r3, #32
 80081bc:	f107 0210 	add.w	r2, r7, #16
 80081c0:	2301      	movs	r3, #1
 80081c2:	2116      	movs	r1, #22
 80081c4:	f000 fbca 	bl	800895c <lsm6dso_write_reg>
 80081c8:	4603      	mov	r3, r0
 80081ca:	2b00      	cmp	r3, #0
 80081cc:	d002      	beq.n	80081d4 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0xc4>
        {
          return LSM6DSO_ERROR;
 80081ce:	f04f 33ff 	mov.w	r3, #4294967295
 80081d2:	e02b      	b.n	800822c <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x11c>
        }
      }

      /* Now we need to limit the ODR to 208 Hz if it is higher */
      if (newOdr > 208.0f)
 80081d4:	edd7 7a06 	vldr	s15, [r7, #24]
 80081d8:	ed9f 7a16 	vldr	s14, [pc, #88]	; 8008234 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x124>
 80081dc:	eef4 7ac7 	vcmpe.f32	s15, s14
 80081e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80081e4:	dc00      	bgt.n	80081e8 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0xd8>
      {
        newOdr = 208.0f;
      }
      break;
 80081e6:	e007      	b.n	80081f8 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0xe8>
        newOdr = 208.0f;
 80081e8:	4b13      	ldr	r3, [pc, #76]	; (8008238 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x128>)
 80081ea:	61bb      	str	r3, [r7, #24]
 80081ec:	e004      	b.n	80081f8 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0xe8>
    }
    default:
      ret = LSM6DSO_ERROR;
 80081ee:	f04f 33ff 	mov.w	r3, #4294967295
 80081f2:	61fb      	str	r3, [r7, #28]
      break;
 80081f4:	e000      	b.n	80081f8 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0xe8>
      break;
 80081f6:	bf00      	nop
  }

  if (ret == LSM6DSO_ERROR)
 80081f8:	69fb      	ldr	r3, [r7, #28]
 80081fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80081fe:	d102      	bne.n	8008206 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0xf6>
  {
    return LSM6DSO_ERROR;
 8008200:	f04f 33ff 	mov.w	r3, #4294967295
 8008204:	e012      	b.n	800822c <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x11c>
  }

  if (pObj->gyro_is_enabled == 1U)
 8008206:	68fb      	ldr	r3, [r7, #12]
 8008208:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800820c:	2b01      	cmp	r3, #1
 800820e:	d106      	bne.n	800821e <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x10e>
  {
    ret = LSM6DSO_GYRO_SetOutputDataRate_When_Enabled(pObj, newOdr);
 8008210:	ed97 0a06 	vldr	s0, [r7, #24]
 8008214:	68f8      	ldr	r0, [r7, #12]
 8008216:	f000 fa45 	bl	80086a4 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled>
 800821a:	61f8      	str	r0, [r7, #28]
 800821c:	e005      	b.n	800822a <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x11a>
  }
  else
  {
    ret = LSM6DSO_GYRO_SetOutputDataRate_When_Disabled(pObj, newOdr);
 800821e:	ed97 0a06 	vldr	s0, [r7, #24]
 8008222:	68f8      	ldr	r0, [r7, #12]
 8008224:	f000 faca 	bl	80087bc <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled>
 8008228:	61f8      	str	r0, [r7, #28]
  }

  return ret;
 800822a:	69fb      	ldr	r3, [r7, #28]
}
 800822c:	4618      	mov	r0, r3
 800822e:	3720      	adds	r7, #32
 8008230:	46bd      	mov	sp, r7
 8008232:	bd80      	pop	{r7, pc}
 8008234:	43500000 	.word	0x43500000
 8008238:	43500000 	.word	0x43500000

0800823c <LSM6DSO_GYRO_GetFullScale>:
  * @param  pObj the device pObj
  * @param  FullScale pointer where the full scale is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_GYRO_GetFullScale(LSM6DSO_Object_t *pObj, int32_t  *FullScale)
{
 800823c:	b580      	push	{r7, lr}
 800823e:	b084      	sub	sp, #16
 8008240:	af00      	add	r7, sp, #0
 8008242:	6078      	str	r0, [r7, #4]
 8008244:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSO_OK;
 8008246:	2300      	movs	r3, #0
 8008248:	60fb      	str	r3, [r7, #12]
  lsm6dso_fs_g_t fs_low_level;

  /* Read actual full scale selection from sensor. */
  if (lsm6dso_gy_full_scale_get(&(pObj->Ctx), &fs_low_level) != LSM6DSO_OK)
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	3320      	adds	r3, #32
 800824e:	f107 020b 	add.w	r2, r7, #11
 8008252:	4611      	mov	r1, r2
 8008254:	4618      	mov	r0, r3
 8008256:	f000 fd81 	bl	8008d5c <lsm6dso_gy_full_scale_get>
 800825a:	4603      	mov	r3, r0
 800825c:	2b00      	cmp	r3, #0
 800825e:	d002      	beq.n	8008266 <LSM6DSO_GYRO_GetFullScale+0x2a>
  {
    return LSM6DSO_ERROR;
 8008260:	f04f 33ff 	mov.w	r3, #4294967295
 8008264:	e030      	b.n	80082c8 <LSM6DSO_GYRO_GetFullScale+0x8c>
  }

  switch (fs_low_level)
 8008266:	7afb      	ldrb	r3, [r7, #11]
 8008268:	2b06      	cmp	r3, #6
 800826a:	d828      	bhi.n	80082be <LSM6DSO_GYRO_GetFullScale+0x82>
 800826c:	a201      	add	r2, pc, #4	; (adr r2, 8008274 <LSM6DSO_GYRO_GetFullScale+0x38>)
 800826e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008272:	bf00      	nop
 8008274:	08008299 	.word	0x08008299
 8008278:	08008291 	.word	0x08008291
 800827c:	080082a1 	.word	0x080082a1
 8008280:	080082bf 	.word	0x080082bf
 8008284:	080082ab 	.word	0x080082ab
 8008288:	080082bf 	.word	0x080082bf
 800828c:	080082b5 	.word	0x080082b5
  {
    case LSM6DSO_125dps:
      *FullScale =  125;
 8008290:	683b      	ldr	r3, [r7, #0]
 8008292:	227d      	movs	r2, #125	; 0x7d
 8008294:	601a      	str	r2, [r3, #0]
      break;
 8008296:	e016      	b.n	80082c6 <LSM6DSO_GYRO_GetFullScale+0x8a>

    case LSM6DSO_250dps:
      *FullScale =  250;
 8008298:	683b      	ldr	r3, [r7, #0]
 800829a:	22fa      	movs	r2, #250	; 0xfa
 800829c:	601a      	str	r2, [r3, #0]
      break;
 800829e:	e012      	b.n	80082c6 <LSM6DSO_GYRO_GetFullScale+0x8a>

    case LSM6DSO_500dps:
      *FullScale =  500;
 80082a0:	683b      	ldr	r3, [r7, #0]
 80082a2:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80082a6:	601a      	str	r2, [r3, #0]
      break;
 80082a8:	e00d      	b.n	80082c6 <LSM6DSO_GYRO_GetFullScale+0x8a>

    case LSM6DSO_1000dps:
      *FullScale = 1000;
 80082aa:	683b      	ldr	r3, [r7, #0]
 80082ac:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80082b0:	601a      	str	r2, [r3, #0]
      break;
 80082b2:	e008      	b.n	80082c6 <LSM6DSO_GYRO_GetFullScale+0x8a>

    case LSM6DSO_2000dps:
      *FullScale = 2000;
 80082b4:	683b      	ldr	r3, [r7, #0]
 80082b6:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 80082ba:	601a      	str	r2, [r3, #0]
      break;
 80082bc:	e003      	b.n	80082c6 <LSM6DSO_GYRO_GetFullScale+0x8a>

    default:
      ret = LSM6DSO_ERROR;
 80082be:	f04f 33ff 	mov.w	r3, #4294967295
 80082c2:	60fb      	str	r3, [r7, #12]
      break;
 80082c4:	bf00      	nop
  }

  return ret;
 80082c6:	68fb      	ldr	r3, [r7, #12]
}
 80082c8:	4618      	mov	r0, r3
 80082ca:	3710      	adds	r7, #16
 80082cc:	46bd      	mov	sp, r7
 80082ce:	bd80      	pop	{r7, pc}

080082d0 <LSM6DSO_GYRO_SetFullScale>:
  * @param  pObj the device pObj
  * @param  FullScale the functional full scale to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_GYRO_SetFullScale(LSM6DSO_Object_t *pObj, int32_t FullScale)
{
 80082d0:	b580      	push	{r7, lr}
 80082d2:	b084      	sub	sp, #16
 80082d4:	af00      	add	r7, sp, #0
 80082d6:	6078      	str	r0, [r7, #4]
 80082d8:	6039      	str	r1, [r7, #0]
  lsm6dso_fs_g_t new_fs;

  new_fs = (FullScale <= 125)  ? LSM6DSO_125dps
           : (FullScale <= 250)  ? LSM6DSO_250dps
 80082da:	683b      	ldr	r3, [r7, #0]
 80082dc:	2b7d      	cmp	r3, #125	; 0x7d
 80082de:	dd12      	ble.n	8008306 <LSM6DSO_GYRO_SetFullScale+0x36>
 80082e0:	683b      	ldr	r3, [r7, #0]
 80082e2:	2bfa      	cmp	r3, #250	; 0xfa
 80082e4:	dd0d      	ble.n	8008302 <LSM6DSO_GYRO_SetFullScale+0x32>
 80082e6:	683b      	ldr	r3, [r7, #0]
 80082e8:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80082ec:	dd07      	ble.n	80082fe <LSM6DSO_GYRO_SetFullScale+0x2e>
 80082ee:	683b      	ldr	r3, [r7, #0]
 80082f0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80082f4:	dc01      	bgt.n	80082fa <LSM6DSO_GYRO_SetFullScale+0x2a>
 80082f6:	2304      	movs	r3, #4
 80082f8:	e006      	b.n	8008308 <LSM6DSO_GYRO_SetFullScale+0x38>
 80082fa:	2306      	movs	r3, #6
 80082fc:	e004      	b.n	8008308 <LSM6DSO_GYRO_SetFullScale+0x38>
 80082fe:	2302      	movs	r3, #2
 8008300:	e002      	b.n	8008308 <LSM6DSO_GYRO_SetFullScale+0x38>
 8008302:	2300      	movs	r3, #0
 8008304:	e000      	b.n	8008308 <LSM6DSO_GYRO_SetFullScale+0x38>
 8008306:	2301      	movs	r3, #1
  new_fs = (FullScale <= 125)  ? LSM6DSO_125dps
 8008308:	73fb      	strb	r3, [r7, #15]
           : (FullScale <= 500)  ? LSM6DSO_500dps
           : (FullScale <= 1000) ? LSM6DSO_1000dps
           :                       LSM6DSO_2000dps;

  if (lsm6dso_gy_full_scale_set(&(pObj->Ctx), new_fs) != LSM6DSO_OK)
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	3320      	adds	r3, #32
 800830e:	7bfa      	ldrb	r2, [r7, #15]
 8008310:	4611      	mov	r1, r2
 8008312:	4618      	mov	r0, r3
 8008314:	f000 fcfc 	bl	8008d10 <lsm6dso_gy_full_scale_set>
 8008318:	4603      	mov	r3, r0
 800831a:	2b00      	cmp	r3, #0
 800831c:	d002      	beq.n	8008324 <LSM6DSO_GYRO_SetFullScale+0x54>
  {
    return LSM6DSO_ERROR;
 800831e:	f04f 33ff 	mov.w	r3, #4294967295
 8008322:	e000      	b.n	8008326 <LSM6DSO_GYRO_SetFullScale+0x56>
  }

  return LSM6DSO_OK;
 8008324:	2300      	movs	r3, #0
}
 8008326:	4618      	mov	r0, r3
 8008328:	3710      	adds	r7, #16
 800832a:	46bd      	mov	sp, r7
 800832c:	bd80      	pop	{r7, pc}

0800832e <LSM6DSO_GYRO_GetAxesRaw>:
  * @param  pObj the device pObj
  * @param  Value pointer where the raw values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_GYRO_GetAxesRaw(LSM6DSO_Object_t *pObj, LSM6DSO_AxesRaw_t *Value)
{
 800832e:	b580      	push	{r7, lr}
 8008330:	b084      	sub	sp, #16
 8008332:	af00      	add	r7, sp, #0
 8008334:	6078      	str	r0, [r7, #4]
 8008336:	6039      	str	r1, [r7, #0]
  lsm6dso_axis3bit16_t data_raw;

  /* Read raw data values. */
  if (lsm6dso_angular_rate_raw_get(&(pObj->Ctx), data_raw.i16bit) != LSM6DSO_OK)
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	3320      	adds	r3, #32
 800833c:	f107 0208 	add.w	r2, r7, #8
 8008340:	4611      	mov	r1, r2
 8008342:	4618      	mov	r0, r3
 8008344:	f000 fed0 	bl	80090e8 <lsm6dso_angular_rate_raw_get>
 8008348:	4603      	mov	r3, r0
 800834a:	2b00      	cmp	r3, #0
 800834c:	d002      	beq.n	8008354 <LSM6DSO_GYRO_GetAxesRaw+0x26>
  {
    return LSM6DSO_ERROR;
 800834e:	f04f 33ff 	mov.w	r3, #4294967295
 8008352:	e00c      	b.n	800836e <LSM6DSO_GYRO_GetAxesRaw+0x40>
  }

  /* Format the data. */
  Value->x = data_raw.i16bit[0];
 8008354:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8008358:	683b      	ldr	r3, [r7, #0]
 800835a:	801a      	strh	r2, [r3, #0]
  Value->y = data_raw.i16bit[1];
 800835c:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8008360:	683b      	ldr	r3, [r7, #0]
 8008362:	805a      	strh	r2, [r3, #2]
  Value->z = data_raw.i16bit[2];
 8008364:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8008368:	683b      	ldr	r3, [r7, #0]
 800836a:	809a      	strh	r2, [r3, #4]

  return LSM6DSO_OK;
 800836c:	2300      	movs	r3, #0
}
 800836e:	4618      	mov	r0, r3
 8008370:	3710      	adds	r7, #16
 8008372:	46bd      	mov	sp, r7
 8008374:	bd80      	pop	{r7, pc}

08008376 <LSM6DSO_GYRO_GetAxes>:
  * @param  pObj the device pObj
  * @param  AngularRate pointer where the values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_GYRO_GetAxes(LSM6DSO_Object_t *pObj, LSM6DSO_Axes_t *AngularRate)
{
 8008376:	b580      	push	{r7, lr}
 8008378:	b086      	sub	sp, #24
 800837a:	af00      	add	r7, sp, #0
 800837c:	6078      	str	r0, [r7, #4]
 800837e:	6039      	str	r1, [r7, #0]
  lsm6dso_axis3bit16_t data_raw;
  float_t sensitivity;

  /* Read raw data values. */
  if (lsm6dso_angular_rate_raw_get(&(pObj->Ctx), data_raw.i16bit) != LSM6DSO_OK)
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	3320      	adds	r3, #32
 8008384:	f107 0210 	add.w	r2, r7, #16
 8008388:	4611      	mov	r1, r2
 800838a:	4618      	mov	r0, r3
 800838c:	f000 feac 	bl	80090e8 <lsm6dso_angular_rate_raw_get>
 8008390:	4603      	mov	r3, r0
 8008392:	2b00      	cmp	r3, #0
 8008394:	d002      	beq.n	800839c <LSM6DSO_GYRO_GetAxes+0x26>
  {
    return LSM6DSO_ERROR;
 8008396:	f04f 33ff 	mov.w	r3, #4294967295
 800839a:	e03c      	b.n	8008416 <LSM6DSO_GYRO_GetAxes+0xa0>
  }

  /* Get LSM6DSO actual sensitivity. */
  if (LSM6DSO_GYRO_GetSensitivity(pObj, &sensitivity) != LSM6DSO_OK)
 800839c:	f107 030c 	add.w	r3, r7, #12
 80083a0:	4619      	mov	r1, r3
 80083a2:	6878      	ldr	r0, [r7, #4]
 80083a4:	f7ff fdd4 	bl	8007f50 <LSM6DSO_GYRO_GetSensitivity>
 80083a8:	4603      	mov	r3, r0
 80083aa:	2b00      	cmp	r3, #0
 80083ac:	d002      	beq.n	80083b4 <LSM6DSO_GYRO_GetAxes+0x3e>
  {
    return LSM6DSO_ERROR;
 80083ae:	f04f 33ff 	mov.w	r3, #4294967295
 80083b2:	e030      	b.n	8008416 <LSM6DSO_GYRO_GetAxes+0xa0>
  }

  /* Calculate the data. */
  AngularRate->x = (int32_t)((float_t)((float_t)data_raw.i16bit[0] * sensitivity));
 80083b4:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80083b8:	ee07 3a90 	vmov	s15, r3
 80083bc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80083c0:	edd7 7a03 	vldr	s15, [r7, #12]
 80083c4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80083c8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80083cc:	ee17 2a90 	vmov	r2, s15
 80083d0:	683b      	ldr	r3, [r7, #0]
 80083d2:	601a      	str	r2, [r3, #0]
  AngularRate->y = (int32_t)((float_t)((float_t)data_raw.i16bit[1] * sensitivity));
 80083d4:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80083d8:	ee07 3a90 	vmov	s15, r3
 80083dc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80083e0:	edd7 7a03 	vldr	s15, [r7, #12]
 80083e4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80083e8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80083ec:	ee17 2a90 	vmov	r2, s15
 80083f0:	683b      	ldr	r3, [r7, #0]
 80083f2:	605a      	str	r2, [r3, #4]
  AngularRate->z = (int32_t)((float_t)((float_t)data_raw.i16bit[2] * sensitivity));
 80083f4:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80083f8:	ee07 3a90 	vmov	s15, r3
 80083fc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8008400:	edd7 7a03 	vldr	s15, [r7, #12]
 8008404:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008408:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800840c:	ee17 2a90 	vmov	r2, s15
 8008410:	683b      	ldr	r3, [r7, #0]
 8008412:	609a      	str	r2, [r3, #8]

  return LSM6DSO_OK;
 8008414:	2300      	movs	r3, #0
}
 8008416:	4618      	mov	r0, r3
 8008418:	3718      	adds	r7, #24
 800841a:	46bd      	mov	sp, r7
 800841c:	bd80      	pop	{r7, pc}

0800841e <LSM6DSO_Write_Reg>:
  * @param  Reg address to be written
  * @param  Data value to be written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_Write_Reg(LSM6DSO_Object_t *pObj, uint8_t Reg, uint8_t Data)
{
 800841e:	b580      	push	{r7, lr}
 8008420:	b082      	sub	sp, #8
 8008422:	af00      	add	r7, sp, #0
 8008424:	6078      	str	r0, [r7, #4]
 8008426:	460b      	mov	r3, r1
 8008428:	70fb      	strb	r3, [r7, #3]
 800842a:	4613      	mov	r3, r2
 800842c:	70bb      	strb	r3, [r7, #2]
  if (lsm6dso_write_reg(&(pObj->Ctx), Reg, &Data, 1) != LSM6DSO_OK)
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	f103 0020 	add.w	r0, r3, #32
 8008434:	1cba      	adds	r2, r7, #2
 8008436:	78f9      	ldrb	r1, [r7, #3]
 8008438:	2301      	movs	r3, #1
 800843a:	f000 fa8f 	bl	800895c <lsm6dso_write_reg>
 800843e:	4603      	mov	r3, r0
 8008440:	2b00      	cmp	r3, #0
 8008442:	d002      	beq.n	800844a <LSM6DSO_Write_Reg+0x2c>
  {
    return LSM6DSO_ERROR;
 8008444:	f04f 33ff 	mov.w	r3, #4294967295
 8008448:	e000      	b.n	800844c <LSM6DSO_Write_Reg+0x2e>
  }

  return LSM6DSO_OK;
 800844a:	2300      	movs	r3, #0
}
 800844c:	4618      	mov	r0, r3
 800844e:	3708      	adds	r7, #8
 8008450:	46bd      	mov	sp, r7
 8008452:	bd80      	pop	{r7, pc}

08008454 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled>:
  * @param  pObj the device pObj
  * @param  Odr the functional output data rate to be set
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LSM6DSO_ACC_SetOutputDataRate_When_Enabled(LSM6DSO_Object_t *pObj, float_t Odr)
{
 8008454:	b580      	push	{r7, lr}
 8008456:	b084      	sub	sp, #16
 8008458:	af00      	add	r7, sp, #0
 800845a:	6078      	str	r0, [r7, #4]
 800845c:	ed87 0a00 	vstr	s0, [r7]
  lsm6dso_odr_xl_t new_odr;

  new_odr = (Odr <=    1.6f) ? LSM6DSO_XL_ODR_1Hz6
            : (Odr <=   12.5f) ? LSM6DSO_XL_ODR_12Hz5
 8008460:	edd7 7a00 	vldr	s15, [r7]
 8008464:	ed9f 7a3f 	vldr	s14, [pc, #252]	; 8008564 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x110>
 8008468:	eef4 7ac7 	vcmpe.f32	s15, s14
 800846c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008470:	d801      	bhi.n	8008476 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x22>
 8008472:	230b      	movs	r3, #11
 8008474:	e063      	b.n	800853e <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xea>
 8008476:	edd7 7a00 	vldr	s15, [r7]
 800847a:	eeb2 7a09 	vmov.f32	s14, #41	; 0x41480000  12.5
 800847e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008482:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008486:	d801      	bhi.n	800848c <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x38>
 8008488:	2301      	movs	r3, #1
 800848a:	e058      	b.n	800853e <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xea>
 800848c:	edd7 7a00 	vldr	s15, [r7]
 8008490:	eeb3 7a0a 	vmov.f32	s14, #58	; 0x41d00000  26.0
 8008494:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008498:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800849c:	d801      	bhi.n	80084a2 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x4e>
 800849e:	2302      	movs	r3, #2
 80084a0:	e04d      	b.n	800853e <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xea>
 80084a2:	edd7 7a00 	vldr	s15, [r7]
 80084a6:	ed9f 7a30 	vldr	s14, [pc, #192]	; 8008568 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x114>
 80084aa:	eef4 7ac7 	vcmpe.f32	s15, s14
 80084ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80084b2:	d801      	bhi.n	80084b8 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x64>
 80084b4:	2303      	movs	r3, #3
 80084b6:	e042      	b.n	800853e <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xea>
 80084b8:	edd7 7a00 	vldr	s15, [r7]
 80084bc:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 800856c <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x118>
 80084c0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80084c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80084c8:	d801      	bhi.n	80084ce <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x7a>
 80084ca:	2304      	movs	r3, #4
 80084cc:	e037      	b.n	800853e <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xea>
 80084ce:	edd7 7a00 	vldr	s15, [r7]
 80084d2:	ed9f 7a27 	vldr	s14, [pc, #156]	; 8008570 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x11c>
 80084d6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80084da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80084de:	d801      	bhi.n	80084e4 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x90>
 80084e0:	2305      	movs	r3, #5
 80084e2:	e02c      	b.n	800853e <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xea>
 80084e4:	edd7 7a00 	vldr	s15, [r7]
 80084e8:	ed9f 7a22 	vldr	s14, [pc, #136]	; 8008574 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x120>
 80084ec:	eef4 7ac7 	vcmpe.f32	s15, s14
 80084f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80084f4:	d801      	bhi.n	80084fa <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xa6>
 80084f6:	2306      	movs	r3, #6
 80084f8:	e021      	b.n	800853e <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xea>
 80084fa:	edd7 7a00 	vldr	s15, [r7]
 80084fe:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 8008578 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x124>
 8008502:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008506:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800850a:	d801      	bhi.n	8008510 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xbc>
 800850c:	2307      	movs	r3, #7
 800850e:	e016      	b.n	800853e <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xea>
 8008510:	edd7 7a00 	vldr	s15, [r7]
 8008514:	ed9f 7a19 	vldr	s14, [pc, #100]	; 800857c <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x128>
 8008518:	eef4 7ac7 	vcmpe.f32	s15, s14
 800851c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008520:	d801      	bhi.n	8008526 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xd2>
 8008522:	2308      	movs	r3, #8
 8008524:	e00b      	b.n	800853e <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xea>
 8008526:	edd7 7a00 	vldr	s15, [r7]
 800852a:	ed9f 7a15 	vldr	s14, [pc, #84]	; 8008580 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x12c>
 800852e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008532:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008536:	d801      	bhi.n	800853c <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xe8>
 8008538:	2309      	movs	r3, #9
 800853a:	e000      	b.n	800853e <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xea>
 800853c:	230a      	movs	r3, #10
  new_odr = (Odr <=    1.6f) ? LSM6DSO_XL_ODR_1Hz6
 800853e:	73fb      	strb	r3, [r7, #15]
            : (Odr <= 1667.0f) ? LSM6DSO_XL_ODR_1667Hz
            : (Odr <= 3333.0f) ? LSM6DSO_XL_ODR_3333Hz
            :                    LSM6DSO_XL_ODR_6667Hz;

  /* Output data rate selection. */
  if (lsm6dso_xl_data_rate_set(&(pObj->Ctx), new_odr) != LSM6DSO_OK)
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	3320      	adds	r3, #32
 8008544:	7bfa      	ldrb	r2, [r7, #15]
 8008546:	4611      	mov	r1, r2
 8008548:	4618      	mov	r0, r3
 800854a:	f000 fa7d 	bl	8008a48 <lsm6dso_xl_data_rate_set>
 800854e:	4603      	mov	r3, r0
 8008550:	2b00      	cmp	r3, #0
 8008552:	d002      	beq.n	800855a <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x106>
  {
    return LSM6DSO_ERROR;
 8008554:	f04f 33ff 	mov.w	r3, #4294967295
 8008558:	e000      	b.n	800855c <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x108>
  }

  return LSM6DSO_OK;
 800855a:	2300      	movs	r3, #0
}
 800855c:	4618      	mov	r0, r3
 800855e:	3710      	adds	r7, #16
 8008560:	46bd      	mov	sp, r7
 8008562:	bd80      	pop	{r7, pc}
 8008564:	3fcccccd 	.word	0x3fcccccd
 8008568:	42500000 	.word	0x42500000
 800856c:	42d00000 	.word	0x42d00000
 8008570:	43500000 	.word	0x43500000
 8008574:	43d08000 	.word	0x43d08000
 8008578:	44504000 	.word	0x44504000
 800857c:	44d06000 	.word	0x44d06000
 8008580:	45505000 	.word	0x45505000

08008584 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled>:
  * @param  pObj the device pObj
  * @param  Odr the functional output data rate to be set
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LSM6DSO_ACC_SetOutputDataRate_When_Disabled(LSM6DSO_Object_t *pObj, float_t Odr)
{
 8008584:	b480      	push	{r7}
 8008586:	b083      	sub	sp, #12
 8008588:	af00      	add	r7, sp, #0
 800858a:	6078      	str	r0, [r7, #4]
 800858c:	ed87 0a00 	vstr	s0, [r7]
  pObj->acc_odr = (Odr <=    1.6f) ? LSM6DSO_XL_ODR_1Hz6
                  : (Odr <=   12.5f) ? LSM6DSO_XL_ODR_12Hz5
 8008590:	edd7 7a00 	vldr	s15, [r7]
 8008594:	ed9f 7a3b 	vldr	s14, [pc, #236]	; 8008684 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x100>
 8008598:	eef4 7ac7 	vcmpe.f32	s15, s14
 800859c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80085a0:	d801      	bhi.n	80085a6 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x22>
 80085a2:	230b      	movs	r3, #11
 80085a4:	e063      	b.n	800866e <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xea>
 80085a6:	edd7 7a00 	vldr	s15, [r7]
 80085aa:	eeb2 7a09 	vmov.f32	s14, #41	; 0x41480000  12.5
 80085ae:	eef4 7ac7 	vcmpe.f32	s15, s14
 80085b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80085b6:	d801      	bhi.n	80085bc <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x38>
 80085b8:	2301      	movs	r3, #1
 80085ba:	e058      	b.n	800866e <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xea>
 80085bc:	edd7 7a00 	vldr	s15, [r7]
 80085c0:	eeb3 7a0a 	vmov.f32	s14, #58	; 0x41d00000  26.0
 80085c4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80085c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80085cc:	d801      	bhi.n	80085d2 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x4e>
 80085ce:	2302      	movs	r3, #2
 80085d0:	e04d      	b.n	800866e <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xea>
 80085d2:	edd7 7a00 	vldr	s15, [r7]
 80085d6:	ed9f 7a2c 	vldr	s14, [pc, #176]	; 8008688 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x104>
 80085da:	eef4 7ac7 	vcmpe.f32	s15, s14
 80085de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80085e2:	d801      	bhi.n	80085e8 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x64>
 80085e4:	2303      	movs	r3, #3
 80085e6:	e042      	b.n	800866e <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xea>
 80085e8:	edd7 7a00 	vldr	s15, [r7]
 80085ec:	ed9f 7a27 	vldr	s14, [pc, #156]	; 800868c <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x108>
 80085f0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80085f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80085f8:	d801      	bhi.n	80085fe <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x7a>
 80085fa:	2304      	movs	r3, #4
 80085fc:	e037      	b.n	800866e <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xea>
 80085fe:	edd7 7a00 	vldr	s15, [r7]
 8008602:	ed9f 7a23 	vldr	s14, [pc, #140]	; 8008690 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x10c>
 8008606:	eef4 7ac7 	vcmpe.f32	s15, s14
 800860a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800860e:	d801      	bhi.n	8008614 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x90>
 8008610:	2305      	movs	r3, #5
 8008612:	e02c      	b.n	800866e <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xea>
 8008614:	edd7 7a00 	vldr	s15, [r7]
 8008618:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 8008694 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x110>
 800861c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008620:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008624:	d801      	bhi.n	800862a <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xa6>
 8008626:	2306      	movs	r3, #6
 8008628:	e021      	b.n	800866e <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xea>
 800862a:	edd7 7a00 	vldr	s15, [r7]
 800862e:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 8008698 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x114>
 8008632:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008636:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800863a:	d801      	bhi.n	8008640 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xbc>
 800863c:	2307      	movs	r3, #7
 800863e:	e016      	b.n	800866e <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xea>
 8008640:	edd7 7a00 	vldr	s15, [r7]
 8008644:	ed9f 7a15 	vldr	s14, [pc, #84]	; 800869c <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x118>
 8008648:	eef4 7ac7 	vcmpe.f32	s15, s14
 800864c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008650:	d801      	bhi.n	8008656 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xd2>
 8008652:	2308      	movs	r3, #8
 8008654:	e00b      	b.n	800866e <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xea>
 8008656:	edd7 7a00 	vldr	s15, [r7]
 800865a:	ed9f 7a11 	vldr	s14, [pc, #68]	; 80086a0 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x11c>
 800865e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008662:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008666:	d801      	bhi.n	800866c <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xe8>
 8008668:	2309      	movs	r3, #9
 800866a:	e000      	b.n	800866e <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xea>
 800866c:	230a      	movs	r3, #10
  pObj->acc_odr = (Odr <=    1.6f) ? LSM6DSO_XL_ODR_1Hz6
 800866e:	687a      	ldr	r2, [r7, #4]
 8008670:	f882 3033 	strb.w	r3, [r2, #51]	; 0x33
                  : (Odr <=  833.0f) ? LSM6DSO_XL_ODR_833Hz
                  : (Odr <= 1667.0f) ? LSM6DSO_XL_ODR_1667Hz
                  : (Odr <= 3333.0f) ? LSM6DSO_XL_ODR_3333Hz
                  :                    LSM6DSO_XL_ODR_6667Hz;

  return LSM6DSO_OK;
 8008674:	2300      	movs	r3, #0
}
 8008676:	4618      	mov	r0, r3
 8008678:	370c      	adds	r7, #12
 800867a:	46bd      	mov	sp, r7
 800867c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008680:	4770      	bx	lr
 8008682:	bf00      	nop
 8008684:	3fcccccd 	.word	0x3fcccccd
 8008688:	42500000 	.word	0x42500000
 800868c:	42d00000 	.word	0x42d00000
 8008690:	43500000 	.word	0x43500000
 8008694:	43d08000 	.word	0x43d08000
 8008698:	44504000 	.word	0x44504000
 800869c:	44d06000 	.word	0x44d06000
 80086a0:	45505000 	.word	0x45505000

080086a4 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled>:
  * @param  pObj the device pObj
  * @param  Odr the functional output data rate to be set
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LSM6DSO_GYRO_SetOutputDataRate_When_Enabled(LSM6DSO_Object_t *pObj, float_t Odr)
{
 80086a4:	b580      	push	{r7, lr}
 80086a6:	b084      	sub	sp, #16
 80086a8:	af00      	add	r7, sp, #0
 80086aa:	6078      	str	r0, [r7, #4]
 80086ac:	ed87 0a00 	vstr	s0, [r7]
  lsm6dso_odr_g_t new_odr;

  new_odr = (Odr <=   12.5f) ? LSM6DSO_GY_ODR_12Hz5
            : (Odr <=   26.0f) ? LSM6DSO_GY_ODR_26Hz
 80086b0:	edd7 7a00 	vldr	s15, [r7]
 80086b4:	eeb2 7a09 	vmov.f32	s14, #41	; 0x41480000  12.5
 80086b8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80086bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80086c0:	d801      	bhi.n	80086c6 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x22>
 80086c2:	2301      	movs	r3, #1
 80086c4:	e058      	b.n	8008778 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 80086c6:	edd7 7a00 	vldr	s15, [r7]
 80086ca:	eeb3 7a0a 	vmov.f32	s14, #58	; 0x41d00000  26.0
 80086ce:	eef4 7ac7 	vcmpe.f32	s15, s14
 80086d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80086d6:	d801      	bhi.n	80086dc <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x38>
 80086d8:	2302      	movs	r3, #2
 80086da:	e04d      	b.n	8008778 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 80086dc:	edd7 7a00 	vldr	s15, [r7]
 80086e0:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 80087a0 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xfc>
 80086e4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80086e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80086ec:	d801      	bhi.n	80086f2 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x4e>
 80086ee:	2303      	movs	r3, #3
 80086f0:	e042      	b.n	8008778 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 80086f2:	edd7 7a00 	vldr	s15, [r7]
 80086f6:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 80087a4 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x100>
 80086fa:	eef4 7ac7 	vcmpe.f32	s15, s14
 80086fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008702:	d801      	bhi.n	8008708 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x64>
 8008704:	2304      	movs	r3, #4
 8008706:	e037      	b.n	8008778 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 8008708:	edd7 7a00 	vldr	s15, [r7]
 800870c:	ed9f 7a26 	vldr	s14, [pc, #152]	; 80087a8 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x104>
 8008710:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008714:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008718:	d801      	bhi.n	800871e <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x7a>
 800871a:	2305      	movs	r3, #5
 800871c:	e02c      	b.n	8008778 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 800871e:	edd7 7a00 	vldr	s15, [r7]
 8008722:	ed9f 7a22 	vldr	s14, [pc, #136]	; 80087ac <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x108>
 8008726:	eef4 7ac7 	vcmpe.f32	s15, s14
 800872a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800872e:	d801      	bhi.n	8008734 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x90>
 8008730:	2306      	movs	r3, #6
 8008732:	e021      	b.n	8008778 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 8008734:	edd7 7a00 	vldr	s15, [r7]
 8008738:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 80087b0 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x10c>
 800873c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008740:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008744:	d801      	bhi.n	800874a <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xa6>
 8008746:	2307      	movs	r3, #7
 8008748:	e016      	b.n	8008778 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 800874a:	edd7 7a00 	vldr	s15, [r7]
 800874e:	ed9f 7a19 	vldr	s14, [pc, #100]	; 80087b4 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x110>
 8008752:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008756:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800875a:	d801      	bhi.n	8008760 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xbc>
 800875c:	2308      	movs	r3, #8
 800875e:	e00b      	b.n	8008778 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 8008760:	edd7 7a00 	vldr	s15, [r7]
 8008764:	ed9f 7a14 	vldr	s14, [pc, #80]	; 80087b8 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x114>
 8008768:	eef4 7ac7 	vcmpe.f32	s15, s14
 800876c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008770:	d801      	bhi.n	8008776 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xd2>
 8008772:	2309      	movs	r3, #9
 8008774:	e000      	b.n	8008778 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 8008776:	230a      	movs	r3, #10
  new_odr = (Odr <=   12.5f) ? LSM6DSO_GY_ODR_12Hz5
 8008778:	73fb      	strb	r3, [r7, #15]
            : (Odr <= 1667.0f) ? LSM6DSO_GY_ODR_1667Hz
            : (Odr <= 3333.0f) ? LSM6DSO_GY_ODR_3333Hz
            :                    LSM6DSO_GY_ODR_6667Hz;

  /* Output data rate selection. */
  if (lsm6dso_gy_data_rate_set(&(pObj->Ctx), new_odr) != LSM6DSO_OK)
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	3320      	adds	r3, #32
 800877e:	7bfa      	ldrb	r2, [r7, #15]
 8008780:	4611      	mov	r1, r2
 8008782:	4618      	mov	r0, r3
 8008784:	f000 fb2c 	bl	8008de0 <lsm6dso_gy_data_rate_set>
 8008788:	4603      	mov	r3, r0
 800878a:	2b00      	cmp	r3, #0
 800878c:	d002      	beq.n	8008794 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xf0>
  {
    return LSM6DSO_ERROR;
 800878e:	f04f 33ff 	mov.w	r3, #4294967295
 8008792:	e000      	b.n	8008796 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xf2>
  }

  return LSM6DSO_OK;
 8008794:	2300      	movs	r3, #0
}
 8008796:	4618      	mov	r0, r3
 8008798:	3710      	adds	r7, #16
 800879a:	46bd      	mov	sp, r7
 800879c:	bd80      	pop	{r7, pc}
 800879e:	bf00      	nop
 80087a0:	42500000 	.word	0x42500000
 80087a4:	42d00000 	.word	0x42d00000
 80087a8:	43500000 	.word	0x43500000
 80087ac:	43d08000 	.word	0x43d08000
 80087b0:	44504000 	.word	0x44504000
 80087b4:	44d06000 	.word	0x44d06000
 80087b8:	45505000 	.word	0x45505000

080087bc <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled>:
  * @param  pObj the device pObj
  * @param  Odr the functional output data rate to be set
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LSM6DSO_GYRO_SetOutputDataRate_When_Disabled(LSM6DSO_Object_t *pObj, float_t Odr)
{
 80087bc:	b480      	push	{r7}
 80087be:	b083      	sub	sp, #12
 80087c0:	af00      	add	r7, sp, #0
 80087c2:	6078      	str	r0, [r7, #4]
 80087c4:	ed87 0a00 	vstr	s0, [r7]
  pObj->gyro_odr = (Odr <=   12.5f) ? LSM6DSO_GY_ODR_12Hz5
                   : (Odr <=   26.0f) ? LSM6DSO_GY_ODR_26Hz
 80087c8:	edd7 7a00 	vldr	s15, [r7]
 80087cc:	eeb2 7a09 	vmov.f32	s14, #41	; 0x41480000  12.5
 80087d0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80087d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80087d8:	d801      	bhi.n	80087de <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0x22>
 80087da:	2301      	movs	r3, #1
 80087dc:	e058      	b.n	8008890 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 80087de:	edd7 7a00 	vldr	s15, [r7]
 80087e2:	eeb3 7a0a 	vmov.f32	s14, #58	; 0x41d00000  26.0
 80087e6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80087ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80087ee:	d801      	bhi.n	80087f4 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0x38>
 80087f0:	2302      	movs	r3, #2
 80087f2:	e04d      	b.n	8008890 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 80087f4:	edd7 7a00 	vldr	s15, [r7]
 80087f8:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 80088a4 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xe8>
 80087fc:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008800:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008804:	d801      	bhi.n	800880a <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0x4e>
 8008806:	2303      	movs	r3, #3
 8008808:	e042      	b.n	8008890 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 800880a:	edd7 7a00 	vldr	s15, [r7]
 800880e:	ed9f 7a26 	vldr	s14, [pc, #152]	; 80088a8 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xec>
 8008812:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008816:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800881a:	d801      	bhi.n	8008820 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0x64>
 800881c:	2304      	movs	r3, #4
 800881e:	e037      	b.n	8008890 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 8008820:	edd7 7a00 	vldr	s15, [r7]
 8008824:	ed9f 7a21 	vldr	s14, [pc, #132]	; 80088ac <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xf0>
 8008828:	eef4 7ac7 	vcmpe.f32	s15, s14
 800882c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008830:	d801      	bhi.n	8008836 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0x7a>
 8008832:	2305      	movs	r3, #5
 8008834:	e02c      	b.n	8008890 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 8008836:	edd7 7a00 	vldr	s15, [r7]
 800883a:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 80088b0 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xf4>
 800883e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008842:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008846:	d801      	bhi.n	800884c <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0x90>
 8008848:	2306      	movs	r3, #6
 800884a:	e021      	b.n	8008890 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 800884c:	edd7 7a00 	vldr	s15, [r7]
 8008850:	ed9f 7a18 	vldr	s14, [pc, #96]	; 80088b4 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xf8>
 8008854:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008858:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800885c:	d801      	bhi.n	8008862 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xa6>
 800885e:	2307      	movs	r3, #7
 8008860:	e016      	b.n	8008890 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 8008862:	edd7 7a00 	vldr	s15, [r7]
 8008866:	ed9f 7a14 	vldr	s14, [pc, #80]	; 80088b8 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xfc>
 800886a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800886e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008872:	d801      	bhi.n	8008878 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xbc>
 8008874:	2308      	movs	r3, #8
 8008876:	e00b      	b.n	8008890 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 8008878:	edd7 7a00 	vldr	s15, [r7]
 800887c:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 80088bc <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0x100>
 8008880:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008884:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008888:	d801      	bhi.n	800888e <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xd2>
 800888a:	2309      	movs	r3, #9
 800888c:	e000      	b.n	8008890 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 800888e:	230a      	movs	r3, #10
  pObj->gyro_odr = (Odr <=   12.5f) ? LSM6DSO_GY_ODR_12Hz5
 8008890:	687a      	ldr	r2, [r7, #4]
 8008892:	f882 3034 	strb.w	r3, [r2, #52]	; 0x34
                   : (Odr <=  833.0f) ? LSM6DSO_GY_ODR_833Hz
                   : (Odr <= 1667.0f) ? LSM6DSO_GY_ODR_1667Hz
                   : (Odr <= 3333.0f) ? LSM6DSO_GY_ODR_3333Hz
                   :                    LSM6DSO_GY_ODR_6667Hz;

  return LSM6DSO_OK;
 8008896:	2300      	movs	r3, #0
}
 8008898:	4618      	mov	r0, r3
 800889a:	370c      	adds	r7, #12
 800889c:	46bd      	mov	sp, r7
 800889e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088a2:	4770      	bx	lr
 80088a4:	42500000 	.word	0x42500000
 80088a8:	42d00000 	.word	0x42d00000
 80088ac:	43500000 	.word	0x43500000
 80088b0:	43d08000 	.word	0x43d08000
 80088b4:	44504000 	.word	0x44504000
 80088b8:	44d06000 	.word	0x44d06000
 80088bc:	45505000 	.word	0x45505000

080088c0 <ReadRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t ReadRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 80088c0:	b590      	push	{r4, r7, lr}
 80088c2:	b087      	sub	sp, #28
 80088c4:	af00      	add	r7, sp, #0
 80088c6:	60f8      	str	r0, [r7, #12]
 80088c8:	607a      	str	r2, [r7, #4]
 80088ca:	461a      	mov	r2, r3
 80088cc:	460b      	mov	r3, r1
 80088ce:	72fb      	strb	r3, [r7, #11]
 80088d0:	4613      	mov	r3, r2
 80088d2:	813b      	strh	r3, [r7, #8]
  LSM6DSO_Object_t *pObj = (LSM6DSO_Object_t *)Handle;
 80088d4:	68fb      	ldr	r3, [r7, #12]
 80088d6:	617b      	str	r3, [r7, #20]

  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 80088d8:	697b      	ldr	r3, [r7, #20]
 80088da:	695c      	ldr	r4, [r3, #20]
 80088dc:	697b      	ldr	r3, [r7, #20]
 80088de:	7b1b      	ldrb	r3, [r3, #12]
 80088e0:	b298      	uxth	r0, r3
 80088e2:	7afb      	ldrb	r3, [r7, #11]
 80088e4:	b299      	uxth	r1, r3
 80088e6:	893b      	ldrh	r3, [r7, #8]
 80088e8:	687a      	ldr	r2, [r7, #4]
 80088ea:	47a0      	blx	r4
 80088ec:	4603      	mov	r3, r0
}
 80088ee:	4618      	mov	r0, r3
 80088f0:	371c      	adds	r7, #28
 80088f2:	46bd      	mov	sp, r7
 80088f4:	bd90      	pop	{r4, r7, pc}

080088f6 <WriteRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t WriteRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 80088f6:	b590      	push	{r4, r7, lr}
 80088f8:	b087      	sub	sp, #28
 80088fa:	af00      	add	r7, sp, #0
 80088fc:	60f8      	str	r0, [r7, #12]
 80088fe:	607a      	str	r2, [r7, #4]
 8008900:	461a      	mov	r2, r3
 8008902:	460b      	mov	r3, r1
 8008904:	72fb      	strb	r3, [r7, #11]
 8008906:	4613      	mov	r3, r2
 8008908:	813b      	strh	r3, [r7, #8]
  LSM6DSO_Object_t *pObj = (LSM6DSO_Object_t *)Handle;
 800890a:	68fb      	ldr	r3, [r7, #12]
 800890c:	617b      	str	r3, [r7, #20]

  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 800890e:	697b      	ldr	r3, [r7, #20]
 8008910:	691c      	ldr	r4, [r3, #16]
 8008912:	697b      	ldr	r3, [r7, #20]
 8008914:	7b1b      	ldrb	r3, [r3, #12]
 8008916:	b298      	uxth	r0, r3
 8008918:	7afb      	ldrb	r3, [r7, #11]
 800891a:	b299      	uxth	r1, r3
 800891c:	893b      	ldrh	r3, [r7, #8]
 800891e:	687a      	ldr	r2, [r7, #4]
 8008920:	47a0      	blx	r4
 8008922:	4603      	mov	r3, r0
}
 8008924:	4618      	mov	r0, r3
 8008926:	371c      	adds	r7, #28
 8008928:	46bd      	mov	sp, r7
 800892a:	bd90      	pop	{r4, r7, pc}

0800892c <lsm6dso_read_reg>:
  *
  */
int32_t __weak lsm6dso_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                                uint8_t *data,
                                uint16_t len)
{
 800892c:	b590      	push	{r4, r7, lr}
 800892e:	b087      	sub	sp, #28
 8008930:	af00      	add	r7, sp, #0
 8008932:	60f8      	str	r0, [r7, #12]
 8008934:	607a      	str	r2, [r7, #4]
 8008936:	461a      	mov	r2, r3
 8008938:	460b      	mov	r3, r1
 800893a:	72fb      	strb	r3, [r7, #11]
 800893c:	4613      	mov	r3, r2
 800893e:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8008940:	68fb      	ldr	r3, [r7, #12]
 8008942:	685c      	ldr	r4, [r3, #4]
 8008944:	68fb      	ldr	r3, [r7, #12]
 8008946:	68d8      	ldr	r0, [r3, #12]
 8008948:	893b      	ldrh	r3, [r7, #8]
 800894a:	7af9      	ldrb	r1, [r7, #11]
 800894c:	687a      	ldr	r2, [r7, #4]
 800894e:	47a0      	blx	r4
 8008950:	6178      	str	r0, [r7, #20]

  return ret;
 8008952:	697b      	ldr	r3, [r7, #20]
}
 8008954:	4618      	mov	r0, r3
 8008956:	371c      	adds	r7, #28
 8008958:	46bd      	mov	sp, r7
 800895a:	bd90      	pop	{r4, r7, pc}

0800895c <lsm6dso_write_reg>:
  *
  */
int32_t __weak lsm6dso_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                                 uint8_t *data,
                                 uint16_t len)
{
 800895c:	b590      	push	{r4, r7, lr}
 800895e:	b087      	sub	sp, #28
 8008960:	af00      	add	r7, sp, #0
 8008962:	60f8      	str	r0, [r7, #12]
 8008964:	607a      	str	r2, [r7, #4]
 8008966:	461a      	mov	r2, r3
 8008968:	460b      	mov	r3, r1
 800896a:	72fb      	strb	r3, [r7, #11]
 800896c:	4613      	mov	r3, r2
 800896e:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8008970:	68fb      	ldr	r3, [r7, #12]
 8008972:	681c      	ldr	r4, [r3, #0]
 8008974:	68fb      	ldr	r3, [r7, #12]
 8008976:	68d8      	ldr	r0, [r3, #12]
 8008978:	893b      	ldrh	r3, [r7, #8]
 800897a:	7af9      	ldrb	r1, [r7, #11]
 800897c:	687a      	ldr	r2, [r7, #4]
 800897e:	47a0      	blx	r4
 8008980:	6178      	str	r0, [r7, #20]

  return ret;
 8008982:	697b      	ldr	r3, [r7, #20]
}
 8008984:	4618      	mov	r0, r3
 8008986:	371c      	adds	r7, #28
 8008988:	46bd      	mov	sp, r7
 800898a:	bd90      	pop	{r4, r7, pc}

0800898c <lsm6dso_xl_full_scale_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_xl_full_scale_set(stmdev_ctx_t *ctx,
                                  lsm6dso_fs_xl_t val)
{
 800898c:	b580      	push	{r7, lr}
 800898e:	b084      	sub	sp, #16
 8008990:	af00      	add	r7, sp, #0
 8008992:	6078      	str	r0, [r7, #4]
 8008994:	460b      	mov	r3, r1
 8008996:	70fb      	strb	r3, [r7, #3]
  lsm6dso_ctrl1_xl_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL1_XL, (uint8_t *)&reg, 1);
 8008998:	f107 0208 	add.w	r2, r7, #8
 800899c:	2301      	movs	r3, #1
 800899e:	2110      	movs	r1, #16
 80089a0:	6878      	ldr	r0, [r7, #4]
 80089a2:	f7ff ffc3 	bl	800892c <lsm6dso_read_reg>
 80089a6:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 80089a8:	68fb      	ldr	r3, [r7, #12]
 80089aa:	2b00      	cmp	r3, #0
 80089ac:	d10f      	bne.n	80089ce <lsm6dso_xl_full_scale_set+0x42>
  {
    reg.fs_xl = (uint8_t) val;
 80089ae:	78fb      	ldrb	r3, [r7, #3]
 80089b0:	f003 0303 	and.w	r3, r3, #3
 80089b4:	b2da      	uxtb	r2, r3
 80089b6:	7a3b      	ldrb	r3, [r7, #8]
 80089b8:	f362 0383 	bfi	r3, r2, #2, #2
 80089bc:	723b      	strb	r3, [r7, #8]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL1_XL, (uint8_t *)&reg, 1);
 80089be:	f107 0208 	add.w	r2, r7, #8
 80089c2:	2301      	movs	r3, #1
 80089c4:	2110      	movs	r1, #16
 80089c6:	6878      	ldr	r0, [r7, #4]
 80089c8:	f7ff ffc8 	bl	800895c <lsm6dso_write_reg>
 80089cc:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80089ce:	68fb      	ldr	r3, [r7, #12]
}
 80089d0:	4618      	mov	r0, r3
 80089d2:	3710      	adds	r7, #16
 80089d4:	46bd      	mov	sp, r7
 80089d6:	bd80      	pop	{r7, pc}

080089d8 <lsm6dso_xl_full_scale_get>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_xl_full_scale_get(stmdev_ctx_t *ctx,
                                  lsm6dso_fs_xl_t *val)
{
 80089d8:	b580      	push	{r7, lr}
 80089da:	b084      	sub	sp, #16
 80089dc:	af00      	add	r7, sp, #0
 80089de:	6078      	str	r0, [r7, #4]
 80089e0:	6039      	str	r1, [r7, #0]
  lsm6dso_ctrl1_xl_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL1_XL, (uint8_t *)&reg, 1);
 80089e2:	f107 0208 	add.w	r2, r7, #8
 80089e6:	2301      	movs	r3, #1
 80089e8:	2110      	movs	r1, #16
 80089ea:	6878      	ldr	r0, [r7, #4]
 80089ec:	f7ff ff9e 	bl	800892c <lsm6dso_read_reg>
 80089f0:	60f8      	str	r0, [r7, #12]

  switch (reg.fs_xl)
 80089f2:	7a3b      	ldrb	r3, [r7, #8]
 80089f4:	f3c3 0381 	ubfx	r3, r3, #2, #2
 80089f8:	b2db      	uxtb	r3, r3
 80089fa:	2b03      	cmp	r3, #3
 80089fc:	d81a      	bhi.n	8008a34 <lsm6dso_xl_full_scale_get+0x5c>
 80089fe:	a201      	add	r2, pc, #4	; (adr r2, 8008a04 <lsm6dso_xl_full_scale_get+0x2c>)
 8008a00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a04:	08008a15 	.word	0x08008a15
 8008a08:	08008a1d 	.word	0x08008a1d
 8008a0c:	08008a25 	.word	0x08008a25
 8008a10:	08008a2d 	.word	0x08008a2d
  {
    case LSM6DSO_2g:
      *val = LSM6DSO_2g;
 8008a14:	683b      	ldr	r3, [r7, #0]
 8008a16:	2200      	movs	r2, #0
 8008a18:	701a      	strb	r2, [r3, #0]
      break;
 8008a1a:	e00f      	b.n	8008a3c <lsm6dso_xl_full_scale_get+0x64>

    case LSM6DSO_16g:
      *val = LSM6DSO_16g;
 8008a1c:	683b      	ldr	r3, [r7, #0]
 8008a1e:	2201      	movs	r2, #1
 8008a20:	701a      	strb	r2, [r3, #0]
      break;
 8008a22:	e00b      	b.n	8008a3c <lsm6dso_xl_full_scale_get+0x64>

    case LSM6DSO_4g:
      *val = LSM6DSO_4g;
 8008a24:	683b      	ldr	r3, [r7, #0]
 8008a26:	2202      	movs	r2, #2
 8008a28:	701a      	strb	r2, [r3, #0]
      break;
 8008a2a:	e007      	b.n	8008a3c <lsm6dso_xl_full_scale_get+0x64>

    case LSM6DSO_8g:
      *val = LSM6DSO_8g;
 8008a2c:	683b      	ldr	r3, [r7, #0]
 8008a2e:	2203      	movs	r2, #3
 8008a30:	701a      	strb	r2, [r3, #0]
      break;
 8008a32:	e003      	b.n	8008a3c <lsm6dso_xl_full_scale_get+0x64>

    default:
      *val = LSM6DSO_2g;
 8008a34:	683b      	ldr	r3, [r7, #0]
 8008a36:	2200      	movs	r2, #0
 8008a38:	701a      	strb	r2, [r3, #0]
      break;
 8008a3a:	bf00      	nop
  }

  return ret;
 8008a3c:	68fb      	ldr	r3, [r7, #12]
}
 8008a3e:	4618      	mov	r0, r3
 8008a40:	3710      	adds	r7, #16
 8008a42:	46bd      	mov	sp, r7
 8008a44:	bd80      	pop	{r7, pc}
 8008a46:	bf00      	nop

08008a48 <lsm6dso_xl_data_rate_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_xl_data_rate_set(stmdev_ctx_t *ctx,
                                 lsm6dso_odr_xl_t val)
{
 8008a48:	b580      	push	{r7, lr}
 8008a4a:	b086      	sub	sp, #24
 8008a4c:	af00      	add	r7, sp, #0
 8008a4e:	6078      	str	r0, [r7, #4]
 8008a50:	460b      	mov	r3, r1
 8008a52:	70fb      	strb	r3, [r7, #3]
  lsm6dso_odr_xl_t odr_xl =  val;
 8008a54:	78fb      	ldrb	r3, [r7, #3]
 8008a56:	75fb      	strb	r3, [r7, #23]
  lsm6dso_fsm_odr_t fsm_odr;
  lsm6dso_ctrl1_xl_t reg;
  int32_t ret;

  /* Check the Finite State Machine data rate constraints */
  ret =  lsm6dso_fsm_enable_get(ctx, &fsm_enable);
 8008a58:	f107 030c 	add.w	r3, r7, #12
 8008a5c:	4619      	mov	r1, r3
 8008a5e:	6878      	ldr	r0, [r7, #4]
 8008a60:	f000 fca1 	bl	80093a6 <lsm6dso_fsm_enable_get>
 8008a64:	6138      	str	r0, [r7, #16]

  if (ret == 0)
 8008a66:	693b      	ldr	r3, [r7, #16]
 8008a68:	2b00      	cmp	r3, #0
 8008a6a:	f040 80c4 	bne.w	8008bf6 <lsm6dso_xl_data_rate_set+0x1ae>
  {
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
 8008a6e:	7b3b      	ldrb	r3, [r7, #12]
 8008a70:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8008a74:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm2_en  |
 8008a76:	7b3b      	ldrb	r3, [r7, #12]
 8008a78:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8008a7c:	b2db      	uxtb	r3, r3
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
 8008a7e:	4313      	orrs	r3, r2
 8008a80:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm3_en  |
 8008a82:	7b3b      	ldrb	r3, [r7, #12]
 8008a84:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8008a88:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm2_en  |
 8008a8a:	4313      	orrs	r3, r2
 8008a8c:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm4_en  |
 8008a8e:	7b3b      	ldrb	r3, [r7, #12]
 8008a90:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8008a94:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm3_en  |
 8008a96:	4313      	orrs	r3, r2
 8008a98:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm5_en  |
 8008a9a:	7b3b      	ldrb	r3, [r7, #12]
 8008a9c:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8008aa0:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm4_en  |
 8008aa2:	4313      	orrs	r3, r2
 8008aa4:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm6_en  |
 8008aa6:	7b3b      	ldrb	r3, [r7, #12]
 8008aa8:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8008aac:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm5_en  |
 8008aae:	4313      	orrs	r3, r2
 8008ab0:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm7_en  |
 8008ab2:	7b3b      	ldrb	r3, [r7, #12]
 8008ab4:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8008ab8:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm6_en  |
 8008aba:	4313      	orrs	r3, r2
 8008abc:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm8_en  |
 8008abe:	7b3b      	ldrb	r3, [r7, #12]
 8008ac0:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8008ac4:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm7_en  |
 8008ac6:	4313      	orrs	r3, r2
 8008ac8:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm9_en  |
 8008aca:	7b7b      	ldrb	r3, [r7, #13]
 8008acc:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8008ad0:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm8_en  |
 8008ad2:	4313      	orrs	r3, r2
 8008ad4:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm10_en |
 8008ad6:	7b7b      	ldrb	r3, [r7, #13]
 8008ad8:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8008adc:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm9_en  |
 8008ade:	4313      	orrs	r3, r2
 8008ae0:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm11_en |
 8008ae2:	7b7b      	ldrb	r3, [r7, #13]
 8008ae4:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8008ae8:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm10_en |
 8008aea:	4313      	orrs	r3, r2
 8008aec:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm12_en |
 8008aee:	7b7b      	ldrb	r3, [r7, #13]
 8008af0:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8008af4:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm11_en |
 8008af6:	4313      	orrs	r3, r2
 8008af8:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm13_en |
 8008afa:	7b7b      	ldrb	r3, [r7, #13]
 8008afc:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8008b00:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm12_en |
 8008b02:	4313      	orrs	r3, r2
 8008b04:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm14_en |
 8008b06:	7b7b      	ldrb	r3, [r7, #13]
 8008b08:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8008b0c:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm13_en |
 8008b0e:	4313      	orrs	r3, r2
 8008b10:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm15_en |
 8008b12:	7b7b      	ldrb	r3, [r7, #13]
 8008b14:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8008b18:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm14_en |
 8008b1a:	4313      	orrs	r3, r2
 8008b1c:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm16_en) == PROPERTY_ENABLE)
 8008b1e:	7b7b      	ldrb	r3, [r7, #13]
 8008b20:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8008b24:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm15_en |
 8008b26:	4313      	orrs	r3, r2
 8008b28:	b2db      	uxtb	r3, r3
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
 8008b2a:	2b01      	cmp	r3, #1
 8008b2c:	d163      	bne.n	8008bf6 <lsm6dso_xl_data_rate_set+0x1ae>
    {
      ret =  lsm6dso_fsm_data_rate_get(ctx, &fsm_odr);
 8008b2e:	f107 030b 	add.w	r3, r7, #11
 8008b32:	4619      	mov	r1, r3
 8008b34:	6878      	ldr	r0, [r7, #4]
 8008b36:	f000 fc57 	bl	80093e8 <lsm6dso_fsm_data_rate_get>
 8008b3a:	6138      	str	r0, [r7, #16]

      if (ret == 0)
 8008b3c:	693b      	ldr	r3, [r7, #16]
 8008b3e:	2b00      	cmp	r3, #0
 8008b40:	d159      	bne.n	8008bf6 <lsm6dso_xl_data_rate_set+0x1ae>
      {
        switch (fsm_odr)
 8008b42:	7afb      	ldrb	r3, [r7, #11]
 8008b44:	2b03      	cmp	r3, #3
 8008b46:	d853      	bhi.n	8008bf0 <lsm6dso_xl_data_rate_set+0x1a8>
 8008b48:	a201      	add	r2, pc, #4	; (adr r2, 8008b50 <lsm6dso_xl_data_rate_set+0x108>)
 8008b4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b4e:	bf00      	nop
 8008b50:	08008b61 	.word	0x08008b61
 8008b54:	08008b73 	.word	0x08008b73
 8008b58:	08008b91 	.word	0x08008b91
 8008b5c:	08008bbb 	.word	0x08008bbb
        {
          case LSM6DSO_ODR_FSM_12Hz5:
            if (val == LSM6DSO_XL_ODR_OFF)
 8008b60:	78fb      	ldrb	r3, [r7, #3]
 8008b62:	2b00      	cmp	r3, #0
 8008b64:	d102      	bne.n	8008b6c <lsm6dso_xl_data_rate_set+0x124>
            {
              odr_xl = LSM6DSO_XL_ODR_12Hz5;
 8008b66:	2301      	movs	r3, #1
 8008b68:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_xl = val;
            }

            break;
 8008b6a:	e045      	b.n	8008bf8 <lsm6dso_xl_data_rate_set+0x1b0>
              odr_xl = val;
 8008b6c:	78fb      	ldrb	r3, [r7, #3]
 8008b6e:	75fb      	strb	r3, [r7, #23]
            break;
 8008b70:	e042      	b.n	8008bf8 <lsm6dso_xl_data_rate_set+0x1b0>

          case LSM6DSO_ODR_FSM_26Hz:
            if (val == LSM6DSO_XL_ODR_OFF)
 8008b72:	78fb      	ldrb	r3, [r7, #3]
 8008b74:	2b00      	cmp	r3, #0
 8008b76:	d102      	bne.n	8008b7e <lsm6dso_xl_data_rate_set+0x136>
            {
              odr_xl = LSM6DSO_XL_ODR_26Hz;
 8008b78:	2302      	movs	r3, #2
 8008b7a:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_xl = val;
            }

            break;
 8008b7c:	e03c      	b.n	8008bf8 <lsm6dso_xl_data_rate_set+0x1b0>
            else if (val == LSM6DSO_XL_ODR_12Hz5)
 8008b7e:	78fb      	ldrb	r3, [r7, #3]
 8008b80:	2b01      	cmp	r3, #1
 8008b82:	d102      	bne.n	8008b8a <lsm6dso_xl_data_rate_set+0x142>
              odr_xl = LSM6DSO_XL_ODR_26Hz;
 8008b84:	2302      	movs	r3, #2
 8008b86:	75fb      	strb	r3, [r7, #23]
            break;
 8008b88:	e036      	b.n	8008bf8 <lsm6dso_xl_data_rate_set+0x1b0>
              odr_xl = val;
 8008b8a:	78fb      	ldrb	r3, [r7, #3]
 8008b8c:	75fb      	strb	r3, [r7, #23]
            break;
 8008b8e:	e033      	b.n	8008bf8 <lsm6dso_xl_data_rate_set+0x1b0>

          case LSM6DSO_ODR_FSM_52Hz:
            if (val == LSM6DSO_XL_ODR_OFF)
 8008b90:	78fb      	ldrb	r3, [r7, #3]
 8008b92:	2b00      	cmp	r3, #0
 8008b94:	d102      	bne.n	8008b9c <lsm6dso_xl_data_rate_set+0x154>
            {
              odr_xl = LSM6DSO_XL_ODR_52Hz;
 8008b96:	2303      	movs	r3, #3
 8008b98:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_xl = val;
            }

            break;
 8008b9a:	e02d      	b.n	8008bf8 <lsm6dso_xl_data_rate_set+0x1b0>
            else if (val == LSM6DSO_XL_ODR_12Hz5)
 8008b9c:	78fb      	ldrb	r3, [r7, #3]
 8008b9e:	2b01      	cmp	r3, #1
 8008ba0:	d102      	bne.n	8008ba8 <lsm6dso_xl_data_rate_set+0x160>
              odr_xl = LSM6DSO_XL_ODR_52Hz;
 8008ba2:	2303      	movs	r3, #3
 8008ba4:	75fb      	strb	r3, [r7, #23]
            break;
 8008ba6:	e027      	b.n	8008bf8 <lsm6dso_xl_data_rate_set+0x1b0>
            else if (val == LSM6DSO_XL_ODR_26Hz)
 8008ba8:	78fb      	ldrb	r3, [r7, #3]
 8008baa:	2b02      	cmp	r3, #2
 8008bac:	d102      	bne.n	8008bb4 <lsm6dso_xl_data_rate_set+0x16c>
              odr_xl = LSM6DSO_XL_ODR_52Hz;
 8008bae:	2303      	movs	r3, #3
 8008bb0:	75fb      	strb	r3, [r7, #23]
            break;
 8008bb2:	e021      	b.n	8008bf8 <lsm6dso_xl_data_rate_set+0x1b0>
              odr_xl = val;
 8008bb4:	78fb      	ldrb	r3, [r7, #3]
 8008bb6:	75fb      	strb	r3, [r7, #23]
            break;
 8008bb8:	e01e      	b.n	8008bf8 <lsm6dso_xl_data_rate_set+0x1b0>

          case LSM6DSO_ODR_FSM_104Hz:
            if (val == LSM6DSO_XL_ODR_OFF)
 8008bba:	78fb      	ldrb	r3, [r7, #3]
 8008bbc:	2b00      	cmp	r3, #0
 8008bbe:	d102      	bne.n	8008bc6 <lsm6dso_xl_data_rate_set+0x17e>
            {
              odr_xl = LSM6DSO_XL_ODR_104Hz;
 8008bc0:	2304      	movs	r3, #4
 8008bc2:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_xl = val;
            }

            break;
 8008bc4:	e018      	b.n	8008bf8 <lsm6dso_xl_data_rate_set+0x1b0>
            else if (val == LSM6DSO_XL_ODR_12Hz5)
 8008bc6:	78fb      	ldrb	r3, [r7, #3]
 8008bc8:	2b01      	cmp	r3, #1
 8008bca:	d102      	bne.n	8008bd2 <lsm6dso_xl_data_rate_set+0x18a>
              odr_xl = LSM6DSO_XL_ODR_104Hz;
 8008bcc:	2304      	movs	r3, #4
 8008bce:	75fb      	strb	r3, [r7, #23]
            break;
 8008bd0:	e012      	b.n	8008bf8 <lsm6dso_xl_data_rate_set+0x1b0>
            else if (val == LSM6DSO_XL_ODR_26Hz)
 8008bd2:	78fb      	ldrb	r3, [r7, #3]
 8008bd4:	2b02      	cmp	r3, #2
 8008bd6:	d102      	bne.n	8008bde <lsm6dso_xl_data_rate_set+0x196>
              odr_xl = LSM6DSO_XL_ODR_104Hz;
 8008bd8:	2304      	movs	r3, #4
 8008bda:	75fb      	strb	r3, [r7, #23]
            break;
 8008bdc:	e00c      	b.n	8008bf8 <lsm6dso_xl_data_rate_set+0x1b0>
            else if (val == LSM6DSO_XL_ODR_52Hz)
 8008bde:	78fb      	ldrb	r3, [r7, #3]
 8008be0:	2b03      	cmp	r3, #3
 8008be2:	d102      	bne.n	8008bea <lsm6dso_xl_data_rate_set+0x1a2>
              odr_xl = LSM6DSO_XL_ODR_104Hz;
 8008be4:	2304      	movs	r3, #4
 8008be6:	75fb      	strb	r3, [r7, #23]
            break;
 8008be8:	e006      	b.n	8008bf8 <lsm6dso_xl_data_rate_set+0x1b0>
              odr_xl = val;
 8008bea:	78fb      	ldrb	r3, [r7, #3]
 8008bec:	75fb      	strb	r3, [r7, #23]
            break;
 8008bee:	e003      	b.n	8008bf8 <lsm6dso_xl_data_rate_set+0x1b0>

          default:
            odr_xl = val;
 8008bf0:	78fb      	ldrb	r3, [r7, #3]
 8008bf2:	75fb      	strb	r3, [r7, #23]
            break;
 8008bf4:	e000      	b.n	8008bf8 <lsm6dso_xl_data_rate_set+0x1b0>
        }
      }
 8008bf6:	bf00      	nop
    }
  }

  if (ret == 0)
 8008bf8:	693b      	ldr	r3, [r7, #16]
 8008bfa:	2b00      	cmp	r3, #0
 8008bfc:	d107      	bne.n	8008c0e <lsm6dso_xl_data_rate_set+0x1c6>
  {
    ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL1_XL, (uint8_t *)&reg, 1);
 8008bfe:	f107 0208 	add.w	r2, r7, #8
 8008c02:	2301      	movs	r3, #1
 8008c04:	2110      	movs	r1, #16
 8008c06:	6878      	ldr	r0, [r7, #4]
 8008c08:	f7ff fe90 	bl	800892c <lsm6dso_read_reg>
 8008c0c:	6138      	str	r0, [r7, #16]
  }

  if (ret == 0)
 8008c0e:	693b      	ldr	r3, [r7, #16]
 8008c10:	2b00      	cmp	r3, #0
 8008c12:	d10f      	bne.n	8008c34 <lsm6dso_xl_data_rate_set+0x1ec>
  {
    reg.odr_xl = (uint8_t) odr_xl;
 8008c14:	7dfb      	ldrb	r3, [r7, #23]
 8008c16:	f003 030f 	and.w	r3, r3, #15
 8008c1a:	b2da      	uxtb	r2, r3
 8008c1c:	7a3b      	ldrb	r3, [r7, #8]
 8008c1e:	f362 1307 	bfi	r3, r2, #4, #4
 8008c22:	723b      	strb	r3, [r7, #8]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL1_XL, (uint8_t *)&reg, 1);
 8008c24:	f107 0208 	add.w	r2, r7, #8
 8008c28:	2301      	movs	r3, #1
 8008c2a:	2110      	movs	r1, #16
 8008c2c:	6878      	ldr	r0, [r7, #4]
 8008c2e:	f7ff fe95 	bl	800895c <lsm6dso_write_reg>
 8008c32:	6138      	str	r0, [r7, #16]
  }

  return ret;
 8008c34:	693b      	ldr	r3, [r7, #16]
}
 8008c36:	4618      	mov	r0, r3
 8008c38:	3718      	adds	r7, #24
 8008c3a:	46bd      	mov	sp, r7
 8008c3c:	bd80      	pop	{r7, pc}
 8008c3e:	bf00      	nop

08008c40 <lsm6dso_xl_data_rate_get>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_xl_data_rate_get(stmdev_ctx_t *ctx,
                                 lsm6dso_odr_xl_t *val)
{
 8008c40:	b580      	push	{r7, lr}
 8008c42:	b084      	sub	sp, #16
 8008c44:	af00      	add	r7, sp, #0
 8008c46:	6078      	str	r0, [r7, #4]
 8008c48:	6039      	str	r1, [r7, #0]
  lsm6dso_ctrl1_xl_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL1_XL, (uint8_t *)&reg, 1);
 8008c4a:	f107 0208 	add.w	r2, r7, #8
 8008c4e:	2301      	movs	r3, #1
 8008c50:	2110      	movs	r1, #16
 8008c52:	6878      	ldr	r0, [r7, #4]
 8008c54:	f7ff fe6a 	bl	800892c <lsm6dso_read_reg>
 8008c58:	60f8      	str	r0, [r7, #12]

  switch (reg.odr_xl)
 8008c5a:	7a3b      	ldrb	r3, [r7, #8]
 8008c5c:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8008c60:	b2db      	uxtb	r3, r3
 8008c62:	2b0b      	cmp	r3, #11
 8008c64:	d84a      	bhi.n	8008cfc <lsm6dso_xl_data_rate_get+0xbc>
 8008c66:	a201      	add	r2, pc, #4	; (adr r2, 8008c6c <lsm6dso_xl_data_rate_get+0x2c>)
 8008c68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c6c:	08008c9d 	.word	0x08008c9d
 8008c70:	08008ca5 	.word	0x08008ca5
 8008c74:	08008cad 	.word	0x08008cad
 8008c78:	08008cb5 	.word	0x08008cb5
 8008c7c:	08008cbd 	.word	0x08008cbd
 8008c80:	08008cc5 	.word	0x08008cc5
 8008c84:	08008ccd 	.word	0x08008ccd
 8008c88:	08008cd5 	.word	0x08008cd5
 8008c8c:	08008cdd 	.word	0x08008cdd
 8008c90:	08008ce5 	.word	0x08008ce5
 8008c94:	08008ced 	.word	0x08008ced
 8008c98:	08008cf5 	.word	0x08008cf5
  {
    case LSM6DSO_XL_ODR_OFF:
      *val = LSM6DSO_XL_ODR_OFF;
 8008c9c:	683b      	ldr	r3, [r7, #0]
 8008c9e:	2200      	movs	r2, #0
 8008ca0:	701a      	strb	r2, [r3, #0]
      break;
 8008ca2:	e02f      	b.n	8008d04 <lsm6dso_xl_data_rate_get+0xc4>

    case LSM6DSO_XL_ODR_12Hz5:
      *val = LSM6DSO_XL_ODR_12Hz5;
 8008ca4:	683b      	ldr	r3, [r7, #0]
 8008ca6:	2201      	movs	r2, #1
 8008ca8:	701a      	strb	r2, [r3, #0]
      break;
 8008caa:	e02b      	b.n	8008d04 <lsm6dso_xl_data_rate_get+0xc4>

    case LSM6DSO_XL_ODR_26Hz:
      *val = LSM6DSO_XL_ODR_26Hz;
 8008cac:	683b      	ldr	r3, [r7, #0]
 8008cae:	2202      	movs	r2, #2
 8008cb0:	701a      	strb	r2, [r3, #0]
      break;
 8008cb2:	e027      	b.n	8008d04 <lsm6dso_xl_data_rate_get+0xc4>

    case LSM6DSO_XL_ODR_52Hz:
      *val = LSM6DSO_XL_ODR_52Hz;
 8008cb4:	683b      	ldr	r3, [r7, #0]
 8008cb6:	2203      	movs	r2, #3
 8008cb8:	701a      	strb	r2, [r3, #0]
      break;
 8008cba:	e023      	b.n	8008d04 <lsm6dso_xl_data_rate_get+0xc4>

    case LSM6DSO_XL_ODR_104Hz:
      *val = LSM6DSO_XL_ODR_104Hz;
 8008cbc:	683b      	ldr	r3, [r7, #0]
 8008cbe:	2204      	movs	r2, #4
 8008cc0:	701a      	strb	r2, [r3, #0]
      break;
 8008cc2:	e01f      	b.n	8008d04 <lsm6dso_xl_data_rate_get+0xc4>

    case LSM6DSO_XL_ODR_208Hz:
      *val = LSM6DSO_XL_ODR_208Hz;
 8008cc4:	683b      	ldr	r3, [r7, #0]
 8008cc6:	2205      	movs	r2, #5
 8008cc8:	701a      	strb	r2, [r3, #0]
      break;
 8008cca:	e01b      	b.n	8008d04 <lsm6dso_xl_data_rate_get+0xc4>

    case LSM6DSO_XL_ODR_417Hz:
      *val = LSM6DSO_XL_ODR_417Hz;
 8008ccc:	683b      	ldr	r3, [r7, #0]
 8008cce:	2206      	movs	r2, #6
 8008cd0:	701a      	strb	r2, [r3, #0]
      break;
 8008cd2:	e017      	b.n	8008d04 <lsm6dso_xl_data_rate_get+0xc4>

    case LSM6DSO_XL_ODR_833Hz:
      *val = LSM6DSO_XL_ODR_833Hz;
 8008cd4:	683b      	ldr	r3, [r7, #0]
 8008cd6:	2207      	movs	r2, #7
 8008cd8:	701a      	strb	r2, [r3, #0]
      break;
 8008cda:	e013      	b.n	8008d04 <lsm6dso_xl_data_rate_get+0xc4>

    case LSM6DSO_XL_ODR_1667Hz:
      *val = LSM6DSO_XL_ODR_1667Hz;
 8008cdc:	683b      	ldr	r3, [r7, #0]
 8008cde:	2208      	movs	r2, #8
 8008ce0:	701a      	strb	r2, [r3, #0]
      break;
 8008ce2:	e00f      	b.n	8008d04 <lsm6dso_xl_data_rate_get+0xc4>

    case LSM6DSO_XL_ODR_3333Hz:
      *val = LSM6DSO_XL_ODR_3333Hz;
 8008ce4:	683b      	ldr	r3, [r7, #0]
 8008ce6:	2209      	movs	r2, #9
 8008ce8:	701a      	strb	r2, [r3, #0]
      break;
 8008cea:	e00b      	b.n	8008d04 <lsm6dso_xl_data_rate_get+0xc4>

    case LSM6DSO_XL_ODR_6667Hz:
      *val = LSM6DSO_XL_ODR_6667Hz;
 8008cec:	683b      	ldr	r3, [r7, #0]
 8008cee:	220a      	movs	r2, #10
 8008cf0:	701a      	strb	r2, [r3, #0]
      break;
 8008cf2:	e007      	b.n	8008d04 <lsm6dso_xl_data_rate_get+0xc4>

    case LSM6DSO_XL_ODR_1Hz6:
      *val = LSM6DSO_XL_ODR_1Hz6;
 8008cf4:	683b      	ldr	r3, [r7, #0]
 8008cf6:	220b      	movs	r2, #11
 8008cf8:	701a      	strb	r2, [r3, #0]
      break;
 8008cfa:	e003      	b.n	8008d04 <lsm6dso_xl_data_rate_get+0xc4>

    default:
      *val = LSM6DSO_XL_ODR_OFF;
 8008cfc:	683b      	ldr	r3, [r7, #0]
 8008cfe:	2200      	movs	r2, #0
 8008d00:	701a      	strb	r2, [r3, #0]
      break;
 8008d02:	bf00      	nop
  }

  return ret;
 8008d04:	68fb      	ldr	r3, [r7, #12]
}
 8008d06:	4618      	mov	r0, r3
 8008d08:	3710      	adds	r7, #16
 8008d0a:	46bd      	mov	sp, r7
 8008d0c:	bd80      	pop	{r7, pc}
 8008d0e:	bf00      	nop

08008d10 <lsm6dso_gy_full_scale_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_gy_full_scale_set(stmdev_ctx_t *ctx,
                                  lsm6dso_fs_g_t val)
{
 8008d10:	b580      	push	{r7, lr}
 8008d12:	b084      	sub	sp, #16
 8008d14:	af00      	add	r7, sp, #0
 8008d16:	6078      	str	r0, [r7, #4]
 8008d18:	460b      	mov	r3, r1
 8008d1a:	70fb      	strb	r3, [r7, #3]
  lsm6dso_ctrl2_g_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL2_G, (uint8_t *)&reg, 1);
 8008d1c:	f107 0208 	add.w	r2, r7, #8
 8008d20:	2301      	movs	r3, #1
 8008d22:	2111      	movs	r1, #17
 8008d24:	6878      	ldr	r0, [r7, #4]
 8008d26:	f7ff fe01 	bl	800892c <lsm6dso_read_reg>
 8008d2a:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8008d2c:	68fb      	ldr	r3, [r7, #12]
 8008d2e:	2b00      	cmp	r3, #0
 8008d30:	d10f      	bne.n	8008d52 <lsm6dso_gy_full_scale_set+0x42>
  {
    reg.fs_g = (uint8_t) val;
 8008d32:	78fb      	ldrb	r3, [r7, #3]
 8008d34:	f003 0307 	and.w	r3, r3, #7
 8008d38:	b2da      	uxtb	r2, r3
 8008d3a:	7a3b      	ldrb	r3, [r7, #8]
 8008d3c:	f362 0343 	bfi	r3, r2, #1, #3
 8008d40:	723b      	strb	r3, [r7, #8]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL2_G, (uint8_t *)&reg, 1);
 8008d42:	f107 0208 	add.w	r2, r7, #8
 8008d46:	2301      	movs	r3, #1
 8008d48:	2111      	movs	r1, #17
 8008d4a:	6878      	ldr	r0, [r7, #4]
 8008d4c:	f7ff fe06 	bl	800895c <lsm6dso_write_reg>
 8008d50:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8008d52:	68fb      	ldr	r3, [r7, #12]
}
 8008d54:	4618      	mov	r0, r3
 8008d56:	3710      	adds	r7, #16
 8008d58:	46bd      	mov	sp, r7
 8008d5a:	bd80      	pop	{r7, pc}

08008d5c <lsm6dso_gy_full_scale_get>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_gy_full_scale_get(stmdev_ctx_t *ctx,
                                  lsm6dso_fs_g_t *val)
{
 8008d5c:	b580      	push	{r7, lr}
 8008d5e:	b084      	sub	sp, #16
 8008d60:	af00      	add	r7, sp, #0
 8008d62:	6078      	str	r0, [r7, #4]
 8008d64:	6039      	str	r1, [r7, #0]
  lsm6dso_ctrl2_g_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL2_G, (uint8_t *)&reg, 1);
 8008d66:	f107 0208 	add.w	r2, r7, #8
 8008d6a:	2301      	movs	r3, #1
 8008d6c:	2111      	movs	r1, #17
 8008d6e:	6878      	ldr	r0, [r7, #4]
 8008d70:	f7ff fddc 	bl	800892c <lsm6dso_read_reg>
 8008d74:	60f8      	str	r0, [r7, #12]

  switch (reg.fs_g)
 8008d76:	7a3b      	ldrb	r3, [r7, #8]
 8008d78:	f3c3 0342 	ubfx	r3, r3, #1, #3
 8008d7c:	b2db      	uxtb	r3, r3
 8008d7e:	2b06      	cmp	r3, #6
 8008d80:	d824      	bhi.n	8008dcc <lsm6dso_gy_full_scale_get+0x70>
 8008d82:	a201      	add	r2, pc, #4	; (adr r2, 8008d88 <lsm6dso_gy_full_scale_get+0x2c>)
 8008d84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008d88:	08008da5 	.word	0x08008da5
 8008d8c:	08008dad 	.word	0x08008dad
 8008d90:	08008db5 	.word	0x08008db5
 8008d94:	08008dcd 	.word	0x08008dcd
 8008d98:	08008dbd 	.word	0x08008dbd
 8008d9c:	08008dcd 	.word	0x08008dcd
 8008da0:	08008dc5 	.word	0x08008dc5
  {
    case LSM6DSO_250dps:
      *val = LSM6DSO_250dps;
 8008da4:	683b      	ldr	r3, [r7, #0]
 8008da6:	2200      	movs	r2, #0
 8008da8:	701a      	strb	r2, [r3, #0]
      break;
 8008daa:	e013      	b.n	8008dd4 <lsm6dso_gy_full_scale_get+0x78>

    case LSM6DSO_125dps:
      *val = LSM6DSO_125dps;
 8008dac:	683b      	ldr	r3, [r7, #0]
 8008dae:	2201      	movs	r2, #1
 8008db0:	701a      	strb	r2, [r3, #0]
      break;
 8008db2:	e00f      	b.n	8008dd4 <lsm6dso_gy_full_scale_get+0x78>

    case LSM6DSO_500dps:
      *val = LSM6DSO_500dps;
 8008db4:	683b      	ldr	r3, [r7, #0]
 8008db6:	2202      	movs	r2, #2
 8008db8:	701a      	strb	r2, [r3, #0]
      break;
 8008dba:	e00b      	b.n	8008dd4 <lsm6dso_gy_full_scale_get+0x78>

    case LSM6DSO_1000dps:
      *val = LSM6DSO_1000dps;
 8008dbc:	683b      	ldr	r3, [r7, #0]
 8008dbe:	2204      	movs	r2, #4
 8008dc0:	701a      	strb	r2, [r3, #0]
      break;
 8008dc2:	e007      	b.n	8008dd4 <lsm6dso_gy_full_scale_get+0x78>

    case LSM6DSO_2000dps:
      *val = LSM6DSO_2000dps;
 8008dc4:	683b      	ldr	r3, [r7, #0]
 8008dc6:	2206      	movs	r2, #6
 8008dc8:	701a      	strb	r2, [r3, #0]
      break;
 8008dca:	e003      	b.n	8008dd4 <lsm6dso_gy_full_scale_get+0x78>

    default:
      *val = LSM6DSO_250dps;
 8008dcc:	683b      	ldr	r3, [r7, #0]
 8008dce:	2200      	movs	r2, #0
 8008dd0:	701a      	strb	r2, [r3, #0]
      break;
 8008dd2:	bf00      	nop
  }

  return ret;
 8008dd4:	68fb      	ldr	r3, [r7, #12]
}
 8008dd6:	4618      	mov	r0, r3
 8008dd8:	3710      	adds	r7, #16
 8008dda:	46bd      	mov	sp, r7
 8008ddc:	bd80      	pop	{r7, pc}
 8008dde:	bf00      	nop

08008de0 <lsm6dso_gy_data_rate_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_gy_data_rate_set(stmdev_ctx_t *ctx,
                                 lsm6dso_odr_g_t val)
{
 8008de0:	b580      	push	{r7, lr}
 8008de2:	b086      	sub	sp, #24
 8008de4:	af00      	add	r7, sp, #0
 8008de6:	6078      	str	r0, [r7, #4]
 8008de8:	460b      	mov	r3, r1
 8008dea:	70fb      	strb	r3, [r7, #3]
  lsm6dso_odr_g_t odr_gy =  val;
 8008dec:	78fb      	ldrb	r3, [r7, #3]
 8008dee:	75fb      	strb	r3, [r7, #23]
  lsm6dso_fsm_odr_t fsm_odr;
  lsm6dso_ctrl2_g_t reg;
  int32_t ret;

  /* Check the Finite State Machine data rate constraints */
  ret =  lsm6dso_fsm_enable_get(ctx, &fsm_enable);
 8008df0:	f107 030c 	add.w	r3, r7, #12
 8008df4:	4619      	mov	r1, r3
 8008df6:	6878      	ldr	r0, [r7, #4]
 8008df8:	f000 fad5 	bl	80093a6 <lsm6dso_fsm_enable_get>
 8008dfc:	6138      	str	r0, [r7, #16]

  if (ret == 0)
 8008dfe:	693b      	ldr	r3, [r7, #16]
 8008e00:	2b00      	cmp	r3, #0
 8008e02:	f040 80c4 	bne.w	8008f8e <lsm6dso_gy_data_rate_set+0x1ae>
  {
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
 8008e06:	7b3b      	ldrb	r3, [r7, #12]
 8008e08:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8008e0c:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm2_en  |
 8008e0e:	7b3b      	ldrb	r3, [r7, #12]
 8008e10:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8008e14:	b2db      	uxtb	r3, r3
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
 8008e16:	4313      	orrs	r3, r2
 8008e18:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm3_en  |
 8008e1a:	7b3b      	ldrb	r3, [r7, #12]
 8008e1c:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8008e20:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm2_en  |
 8008e22:	4313      	orrs	r3, r2
 8008e24:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm4_en  |
 8008e26:	7b3b      	ldrb	r3, [r7, #12]
 8008e28:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8008e2c:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm3_en  |
 8008e2e:	4313      	orrs	r3, r2
 8008e30:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm5_en  |
 8008e32:	7b3b      	ldrb	r3, [r7, #12]
 8008e34:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8008e38:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm4_en  |
 8008e3a:	4313      	orrs	r3, r2
 8008e3c:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm6_en  |
 8008e3e:	7b3b      	ldrb	r3, [r7, #12]
 8008e40:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8008e44:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm5_en  |
 8008e46:	4313      	orrs	r3, r2
 8008e48:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm7_en  |
 8008e4a:	7b3b      	ldrb	r3, [r7, #12]
 8008e4c:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8008e50:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm6_en  |
 8008e52:	4313      	orrs	r3, r2
 8008e54:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm8_en  |
 8008e56:	7b3b      	ldrb	r3, [r7, #12]
 8008e58:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8008e5c:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm7_en  |
 8008e5e:	4313      	orrs	r3, r2
 8008e60:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm9_en  |
 8008e62:	7b7b      	ldrb	r3, [r7, #13]
 8008e64:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8008e68:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm8_en  |
 8008e6a:	4313      	orrs	r3, r2
 8008e6c:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm10_en |
 8008e6e:	7b7b      	ldrb	r3, [r7, #13]
 8008e70:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8008e74:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm9_en  |
 8008e76:	4313      	orrs	r3, r2
 8008e78:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm11_en |
 8008e7a:	7b7b      	ldrb	r3, [r7, #13]
 8008e7c:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8008e80:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm10_en |
 8008e82:	4313      	orrs	r3, r2
 8008e84:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm12_en |
 8008e86:	7b7b      	ldrb	r3, [r7, #13]
 8008e88:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8008e8c:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm11_en |
 8008e8e:	4313      	orrs	r3, r2
 8008e90:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm13_en |
 8008e92:	7b7b      	ldrb	r3, [r7, #13]
 8008e94:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8008e98:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm12_en |
 8008e9a:	4313      	orrs	r3, r2
 8008e9c:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm14_en |
 8008e9e:	7b7b      	ldrb	r3, [r7, #13]
 8008ea0:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8008ea4:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm13_en |
 8008ea6:	4313      	orrs	r3, r2
 8008ea8:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm15_en |
 8008eaa:	7b7b      	ldrb	r3, [r7, #13]
 8008eac:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8008eb0:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm14_en |
 8008eb2:	4313      	orrs	r3, r2
 8008eb4:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm16_en) == PROPERTY_ENABLE)
 8008eb6:	7b7b      	ldrb	r3, [r7, #13]
 8008eb8:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8008ebc:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm15_en |
 8008ebe:	4313      	orrs	r3, r2
 8008ec0:	b2db      	uxtb	r3, r3
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
 8008ec2:	2b01      	cmp	r3, #1
 8008ec4:	d163      	bne.n	8008f8e <lsm6dso_gy_data_rate_set+0x1ae>
    {
      ret =  lsm6dso_fsm_data_rate_get(ctx, &fsm_odr);
 8008ec6:	f107 030b 	add.w	r3, r7, #11
 8008eca:	4619      	mov	r1, r3
 8008ecc:	6878      	ldr	r0, [r7, #4]
 8008ece:	f000 fa8b 	bl	80093e8 <lsm6dso_fsm_data_rate_get>
 8008ed2:	6138      	str	r0, [r7, #16]

      if (ret == 0)
 8008ed4:	693b      	ldr	r3, [r7, #16]
 8008ed6:	2b00      	cmp	r3, #0
 8008ed8:	d159      	bne.n	8008f8e <lsm6dso_gy_data_rate_set+0x1ae>
      {
        switch (fsm_odr)
 8008eda:	7afb      	ldrb	r3, [r7, #11]
 8008edc:	2b03      	cmp	r3, #3
 8008ede:	d853      	bhi.n	8008f88 <lsm6dso_gy_data_rate_set+0x1a8>
 8008ee0:	a201      	add	r2, pc, #4	; (adr r2, 8008ee8 <lsm6dso_gy_data_rate_set+0x108>)
 8008ee2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008ee6:	bf00      	nop
 8008ee8:	08008ef9 	.word	0x08008ef9
 8008eec:	08008f0b 	.word	0x08008f0b
 8008ef0:	08008f29 	.word	0x08008f29
 8008ef4:	08008f53 	.word	0x08008f53
        {
          case LSM6DSO_ODR_FSM_12Hz5:
            if (val == LSM6DSO_GY_ODR_OFF)
 8008ef8:	78fb      	ldrb	r3, [r7, #3]
 8008efa:	2b00      	cmp	r3, #0
 8008efc:	d102      	bne.n	8008f04 <lsm6dso_gy_data_rate_set+0x124>
            {
              odr_gy = LSM6DSO_GY_ODR_12Hz5;
 8008efe:	2301      	movs	r3, #1
 8008f00:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_gy = val;
            }

            break;
 8008f02:	e045      	b.n	8008f90 <lsm6dso_gy_data_rate_set+0x1b0>
              odr_gy = val;
 8008f04:	78fb      	ldrb	r3, [r7, #3]
 8008f06:	75fb      	strb	r3, [r7, #23]
            break;
 8008f08:	e042      	b.n	8008f90 <lsm6dso_gy_data_rate_set+0x1b0>

          case LSM6DSO_ODR_FSM_26Hz:
            if (val == LSM6DSO_GY_ODR_OFF)
 8008f0a:	78fb      	ldrb	r3, [r7, #3]
 8008f0c:	2b00      	cmp	r3, #0
 8008f0e:	d102      	bne.n	8008f16 <lsm6dso_gy_data_rate_set+0x136>
            {
              odr_gy = LSM6DSO_GY_ODR_26Hz;
 8008f10:	2302      	movs	r3, #2
 8008f12:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_gy = val;
            }

            break;
 8008f14:	e03c      	b.n	8008f90 <lsm6dso_gy_data_rate_set+0x1b0>
            else if (val == LSM6DSO_GY_ODR_12Hz5)
 8008f16:	78fb      	ldrb	r3, [r7, #3]
 8008f18:	2b01      	cmp	r3, #1
 8008f1a:	d102      	bne.n	8008f22 <lsm6dso_gy_data_rate_set+0x142>
              odr_gy = LSM6DSO_GY_ODR_26Hz;
 8008f1c:	2302      	movs	r3, #2
 8008f1e:	75fb      	strb	r3, [r7, #23]
            break;
 8008f20:	e036      	b.n	8008f90 <lsm6dso_gy_data_rate_set+0x1b0>
              odr_gy = val;
 8008f22:	78fb      	ldrb	r3, [r7, #3]
 8008f24:	75fb      	strb	r3, [r7, #23]
            break;
 8008f26:	e033      	b.n	8008f90 <lsm6dso_gy_data_rate_set+0x1b0>

          case LSM6DSO_ODR_FSM_52Hz:
            if (val == LSM6DSO_GY_ODR_OFF)
 8008f28:	78fb      	ldrb	r3, [r7, #3]
 8008f2a:	2b00      	cmp	r3, #0
 8008f2c:	d102      	bne.n	8008f34 <lsm6dso_gy_data_rate_set+0x154>
            {
              odr_gy = LSM6DSO_GY_ODR_52Hz;
 8008f2e:	2303      	movs	r3, #3
 8008f30:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_gy = val;
            }

            break;
 8008f32:	e02d      	b.n	8008f90 <lsm6dso_gy_data_rate_set+0x1b0>
            else if (val == LSM6DSO_GY_ODR_12Hz5)
 8008f34:	78fb      	ldrb	r3, [r7, #3]
 8008f36:	2b01      	cmp	r3, #1
 8008f38:	d102      	bne.n	8008f40 <lsm6dso_gy_data_rate_set+0x160>
              odr_gy = LSM6DSO_GY_ODR_52Hz;
 8008f3a:	2303      	movs	r3, #3
 8008f3c:	75fb      	strb	r3, [r7, #23]
            break;
 8008f3e:	e027      	b.n	8008f90 <lsm6dso_gy_data_rate_set+0x1b0>
            else if (val == LSM6DSO_GY_ODR_26Hz)
 8008f40:	78fb      	ldrb	r3, [r7, #3]
 8008f42:	2b02      	cmp	r3, #2
 8008f44:	d102      	bne.n	8008f4c <lsm6dso_gy_data_rate_set+0x16c>
              odr_gy = LSM6DSO_GY_ODR_52Hz;
 8008f46:	2303      	movs	r3, #3
 8008f48:	75fb      	strb	r3, [r7, #23]
            break;
 8008f4a:	e021      	b.n	8008f90 <lsm6dso_gy_data_rate_set+0x1b0>
              odr_gy = val;
 8008f4c:	78fb      	ldrb	r3, [r7, #3]
 8008f4e:	75fb      	strb	r3, [r7, #23]
            break;
 8008f50:	e01e      	b.n	8008f90 <lsm6dso_gy_data_rate_set+0x1b0>

          case LSM6DSO_ODR_FSM_104Hz:
            if (val == LSM6DSO_GY_ODR_OFF)
 8008f52:	78fb      	ldrb	r3, [r7, #3]
 8008f54:	2b00      	cmp	r3, #0
 8008f56:	d102      	bne.n	8008f5e <lsm6dso_gy_data_rate_set+0x17e>
            {
              odr_gy = LSM6DSO_GY_ODR_104Hz;
 8008f58:	2304      	movs	r3, #4
 8008f5a:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_gy = val;
            }

            break;
 8008f5c:	e018      	b.n	8008f90 <lsm6dso_gy_data_rate_set+0x1b0>
            else if (val == LSM6DSO_GY_ODR_12Hz5)
 8008f5e:	78fb      	ldrb	r3, [r7, #3]
 8008f60:	2b01      	cmp	r3, #1
 8008f62:	d102      	bne.n	8008f6a <lsm6dso_gy_data_rate_set+0x18a>
              odr_gy = LSM6DSO_GY_ODR_104Hz;
 8008f64:	2304      	movs	r3, #4
 8008f66:	75fb      	strb	r3, [r7, #23]
            break;
 8008f68:	e012      	b.n	8008f90 <lsm6dso_gy_data_rate_set+0x1b0>
            else if (val == LSM6DSO_GY_ODR_26Hz)
 8008f6a:	78fb      	ldrb	r3, [r7, #3]
 8008f6c:	2b02      	cmp	r3, #2
 8008f6e:	d102      	bne.n	8008f76 <lsm6dso_gy_data_rate_set+0x196>
              odr_gy = LSM6DSO_GY_ODR_104Hz;
 8008f70:	2304      	movs	r3, #4
 8008f72:	75fb      	strb	r3, [r7, #23]
            break;
 8008f74:	e00c      	b.n	8008f90 <lsm6dso_gy_data_rate_set+0x1b0>
            else if (val == LSM6DSO_GY_ODR_52Hz)
 8008f76:	78fb      	ldrb	r3, [r7, #3]
 8008f78:	2b03      	cmp	r3, #3
 8008f7a:	d102      	bne.n	8008f82 <lsm6dso_gy_data_rate_set+0x1a2>
              odr_gy = LSM6DSO_GY_ODR_104Hz;
 8008f7c:	2304      	movs	r3, #4
 8008f7e:	75fb      	strb	r3, [r7, #23]
            break;
 8008f80:	e006      	b.n	8008f90 <lsm6dso_gy_data_rate_set+0x1b0>
              odr_gy = val;
 8008f82:	78fb      	ldrb	r3, [r7, #3]
 8008f84:	75fb      	strb	r3, [r7, #23]
            break;
 8008f86:	e003      	b.n	8008f90 <lsm6dso_gy_data_rate_set+0x1b0>

          default:
            odr_gy = val;
 8008f88:	78fb      	ldrb	r3, [r7, #3]
 8008f8a:	75fb      	strb	r3, [r7, #23]
            break;
 8008f8c:	e000      	b.n	8008f90 <lsm6dso_gy_data_rate_set+0x1b0>
        }
      }
 8008f8e:	bf00      	nop
    }
  }

  if (ret == 0)
 8008f90:	693b      	ldr	r3, [r7, #16]
 8008f92:	2b00      	cmp	r3, #0
 8008f94:	d107      	bne.n	8008fa6 <lsm6dso_gy_data_rate_set+0x1c6>
  {
    ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL2_G, (uint8_t *)&reg, 1);
 8008f96:	f107 0208 	add.w	r2, r7, #8
 8008f9a:	2301      	movs	r3, #1
 8008f9c:	2111      	movs	r1, #17
 8008f9e:	6878      	ldr	r0, [r7, #4]
 8008fa0:	f7ff fcc4 	bl	800892c <lsm6dso_read_reg>
 8008fa4:	6138      	str	r0, [r7, #16]
  }

  if (ret == 0)
 8008fa6:	693b      	ldr	r3, [r7, #16]
 8008fa8:	2b00      	cmp	r3, #0
 8008faa:	d10f      	bne.n	8008fcc <lsm6dso_gy_data_rate_set+0x1ec>
  {
    reg.odr_g = (uint8_t) odr_gy;
 8008fac:	7dfb      	ldrb	r3, [r7, #23]
 8008fae:	f003 030f 	and.w	r3, r3, #15
 8008fb2:	b2da      	uxtb	r2, r3
 8008fb4:	7a3b      	ldrb	r3, [r7, #8]
 8008fb6:	f362 1307 	bfi	r3, r2, #4, #4
 8008fba:	723b      	strb	r3, [r7, #8]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL2_G, (uint8_t *)&reg, 1);
 8008fbc:	f107 0208 	add.w	r2, r7, #8
 8008fc0:	2301      	movs	r3, #1
 8008fc2:	2111      	movs	r1, #17
 8008fc4:	6878      	ldr	r0, [r7, #4]
 8008fc6:	f7ff fcc9 	bl	800895c <lsm6dso_write_reg>
 8008fca:	6138      	str	r0, [r7, #16]
  }

  return ret;
 8008fcc:	693b      	ldr	r3, [r7, #16]
}
 8008fce:	4618      	mov	r0, r3
 8008fd0:	3718      	adds	r7, #24
 8008fd2:	46bd      	mov	sp, r7
 8008fd4:	bd80      	pop	{r7, pc}
 8008fd6:	bf00      	nop

08008fd8 <lsm6dso_gy_data_rate_get>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_gy_data_rate_get(stmdev_ctx_t *ctx,
                                 lsm6dso_odr_g_t *val)
{
 8008fd8:	b580      	push	{r7, lr}
 8008fda:	b084      	sub	sp, #16
 8008fdc:	af00      	add	r7, sp, #0
 8008fde:	6078      	str	r0, [r7, #4]
 8008fe0:	6039      	str	r1, [r7, #0]
  lsm6dso_ctrl2_g_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL2_G, (uint8_t *)&reg, 1);
 8008fe2:	f107 0208 	add.w	r2, r7, #8
 8008fe6:	2301      	movs	r3, #1
 8008fe8:	2111      	movs	r1, #17
 8008fea:	6878      	ldr	r0, [r7, #4]
 8008fec:	f7ff fc9e 	bl	800892c <lsm6dso_read_reg>
 8008ff0:	60f8      	str	r0, [r7, #12]

  switch (reg.odr_g)
 8008ff2:	7a3b      	ldrb	r3, [r7, #8]
 8008ff4:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8008ff8:	b2db      	uxtb	r3, r3
 8008ffa:	2b0a      	cmp	r3, #10
 8008ffc:	d844      	bhi.n	8009088 <lsm6dso_gy_data_rate_get+0xb0>
 8008ffe:	a201      	add	r2, pc, #4	; (adr r2, 8009004 <lsm6dso_gy_data_rate_get+0x2c>)
 8009000:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009004:	08009031 	.word	0x08009031
 8009008:	08009039 	.word	0x08009039
 800900c:	08009041 	.word	0x08009041
 8009010:	08009049 	.word	0x08009049
 8009014:	08009051 	.word	0x08009051
 8009018:	08009059 	.word	0x08009059
 800901c:	08009061 	.word	0x08009061
 8009020:	08009069 	.word	0x08009069
 8009024:	08009071 	.word	0x08009071
 8009028:	08009079 	.word	0x08009079
 800902c:	08009081 	.word	0x08009081
  {
    case LSM6DSO_GY_ODR_OFF:
      *val = LSM6DSO_GY_ODR_OFF;
 8009030:	683b      	ldr	r3, [r7, #0]
 8009032:	2200      	movs	r2, #0
 8009034:	701a      	strb	r2, [r3, #0]
      break;
 8009036:	e02b      	b.n	8009090 <lsm6dso_gy_data_rate_get+0xb8>

    case LSM6DSO_GY_ODR_12Hz5:
      *val = LSM6DSO_GY_ODR_12Hz5;
 8009038:	683b      	ldr	r3, [r7, #0]
 800903a:	2201      	movs	r2, #1
 800903c:	701a      	strb	r2, [r3, #0]
      break;
 800903e:	e027      	b.n	8009090 <lsm6dso_gy_data_rate_get+0xb8>

    case LSM6DSO_GY_ODR_26Hz:
      *val = LSM6DSO_GY_ODR_26Hz;
 8009040:	683b      	ldr	r3, [r7, #0]
 8009042:	2202      	movs	r2, #2
 8009044:	701a      	strb	r2, [r3, #0]
      break;
 8009046:	e023      	b.n	8009090 <lsm6dso_gy_data_rate_get+0xb8>

    case LSM6DSO_GY_ODR_52Hz:
      *val = LSM6DSO_GY_ODR_52Hz;
 8009048:	683b      	ldr	r3, [r7, #0]
 800904a:	2203      	movs	r2, #3
 800904c:	701a      	strb	r2, [r3, #0]
      break;
 800904e:	e01f      	b.n	8009090 <lsm6dso_gy_data_rate_get+0xb8>

    case LSM6DSO_GY_ODR_104Hz:
      *val = LSM6DSO_GY_ODR_104Hz;
 8009050:	683b      	ldr	r3, [r7, #0]
 8009052:	2204      	movs	r2, #4
 8009054:	701a      	strb	r2, [r3, #0]
      break;
 8009056:	e01b      	b.n	8009090 <lsm6dso_gy_data_rate_get+0xb8>

    case LSM6DSO_GY_ODR_208Hz:
      *val = LSM6DSO_GY_ODR_208Hz;
 8009058:	683b      	ldr	r3, [r7, #0]
 800905a:	2205      	movs	r2, #5
 800905c:	701a      	strb	r2, [r3, #0]
      break;
 800905e:	e017      	b.n	8009090 <lsm6dso_gy_data_rate_get+0xb8>

    case LSM6DSO_GY_ODR_417Hz:
      *val = LSM6DSO_GY_ODR_417Hz;
 8009060:	683b      	ldr	r3, [r7, #0]
 8009062:	2206      	movs	r2, #6
 8009064:	701a      	strb	r2, [r3, #0]
      break;
 8009066:	e013      	b.n	8009090 <lsm6dso_gy_data_rate_get+0xb8>

    case LSM6DSO_GY_ODR_833Hz:
      *val = LSM6DSO_GY_ODR_833Hz;
 8009068:	683b      	ldr	r3, [r7, #0]
 800906a:	2207      	movs	r2, #7
 800906c:	701a      	strb	r2, [r3, #0]
      break;
 800906e:	e00f      	b.n	8009090 <lsm6dso_gy_data_rate_get+0xb8>

    case LSM6DSO_GY_ODR_1667Hz:
      *val = LSM6DSO_GY_ODR_1667Hz;
 8009070:	683b      	ldr	r3, [r7, #0]
 8009072:	2208      	movs	r2, #8
 8009074:	701a      	strb	r2, [r3, #0]
      break;
 8009076:	e00b      	b.n	8009090 <lsm6dso_gy_data_rate_get+0xb8>

    case LSM6DSO_GY_ODR_3333Hz:
      *val = LSM6DSO_GY_ODR_3333Hz;
 8009078:	683b      	ldr	r3, [r7, #0]
 800907a:	2209      	movs	r2, #9
 800907c:	701a      	strb	r2, [r3, #0]
      break;
 800907e:	e007      	b.n	8009090 <lsm6dso_gy_data_rate_get+0xb8>

    case LSM6DSO_GY_ODR_6667Hz:
      *val = LSM6DSO_GY_ODR_6667Hz;
 8009080:	683b      	ldr	r3, [r7, #0]
 8009082:	220a      	movs	r2, #10
 8009084:	701a      	strb	r2, [r3, #0]
      break;
 8009086:	e003      	b.n	8009090 <lsm6dso_gy_data_rate_get+0xb8>

    default:
      *val = LSM6DSO_GY_ODR_OFF;
 8009088:	683b      	ldr	r3, [r7, #0]
 800908a:	2200      	movs	r2, #0
 800908c:	701a      	strb	r2, [r3, #0]
      break;
 800908e:	bf00      	nop
  }

  return ret;
 8009090:	68fb      	ldr	r3, [r7, #12]
}
 8009092:	4618      	mov	r0, r3
 8009094:	3710      	adds	r7, #16
 8009096:	46bd      	mov	sp, r7
 8009098:	bd80      	pop	{r7, pc}
 800909a:	bf00      	nop

0800909c <lsm6dso_block_data_update_set>:
  * @param  val      change the values of bdu in reg CTRL3_C
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
 800909c:	b580      	push	{r7, lr}
 800909e:	b084      	sub	sp, #16
 80090a0:	af00      	add	r7, sp, #0
 80090a2:	6078      	str	r0, [r7, #4]
 80090a4:	460b      	mov	r3, r1
 80090a6:	70fb      	strb	r3, [r7, #3]
  lsm6dso_ctrl3_c_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL3_C, (uint8_t *)&reg, 1);
 80090a8:	f107 0208 	add.w	r2, r7, #8
 80090ac:	2301      	movs	r3, #1
 80090ae:	2112      	movs	r1, #18
 80090b0:	6878      	ldr	r0, [r7, #4]
 80090b2:	f7ff fc3b 	bl	800892c <lsm6dso_read_reg>
 80090b6:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 80090b8:	68fb      	ldr	r3, [r7, #12]
 80090ba:	2b00      	cmp	r3, #0
 80090bc:	d10f      	bne.n	80090de <lsm6dso_block_data_update_set+0x42>
  {
    reg.bdu = val;
 80090be:	78fb      	ldrb	r3, [r7, #3]
 80090c0:	f003 0301 	and.w	r3, r3, #1
 80090c4:	b2da      	uxtb	r2, r3
 80090c6:	7a3b      	ldrb	r3, [r7, #8]
 80090c8:	f362 1386 	bfi	r3, r2, #6, #1
 80090cc:	723b      	strb	r3, [r7, #8]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL3_C, (uint8_t *)&reg, 1);
 80090ce:	f107 0208 	add.w	r2, r7, #8
 80090d2:	2301      	movs	r3, #1
 80090d4:	2112      	movs	r1, #18
 80090d6:	6878      	ldr	r0, [r7, #4]
 80090d8:	f7ff fc40 	bl	800895c <lsm6dso_write_reg>
 80090dc:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80090de:	68fb      	ldr	r3, [r7, #12]
}
 80090e0:	4618      	mov	r0, r3
 80090e2:	3710      	adds	r7, #16
 80090e4:	46bd      	mov	sp, r7
 80090e6:	bd80      	pop	{r7, pc}

080090e8 <lsm6dso_angular_rate_raw_get>:
  * @param  buff     buffer that stores data read
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_angular_rate_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 80090e8:	b580      	push	{r7, lr}
 80090ea:	b086      	sub	sp, #24
 80090ec:	af00      	add	r7, sp, #0
 80090ee:	6078      	str	r0, [r7, #4]
 80090f0:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_OUTX_L_G, buff, 6);
 80090f2:	f107 020c 	add.w	r2, r7, #12
 80090f6:	2306      	movs	r3, #6
 80090f8:	2122      	movs	r1, #34	; 0x22
 80090fa:	6878      	ldr	r0, [r7, #4]
 80090fc:	f7ff fc16 	bl	800892c <lsm6dso_read_reg>
 8009100:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 8009102:	7b7b      	ldrb	r3, [r7, #13]
 8009104:	b21a      	sxth	r2, r3
 8009106:	683b      	ldr	r3, [r7, #0]
 8009108:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 800910a:	683b      	ldr	r3, [r7, #0]
 800910c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8009110:	b29b      	uxth	r3, r3
 8009112:	021b      	lsls	r3, r3, #8
 8009114:	b29a      	uxth	r2, r3
 8009116:	7b3b      	ldrb	r3, [r7, #12]
 8009118:	b29b      	uxth	r3, r3
 800911a:	4413      	add	r3, r2
 800911c:	b29b      	uxth	r3, r3
 800911e:	b21a      	sxth	r2, r3
 8009120:	683b      	ldr	r3, [r7, #0]
 8009122:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 8009124:	7bfa      	ldrb	r2, [r7, #15]
 8009126:	683b      	ldr	r3, [r7, #0]
 8009128:	3302      	adds	r3, #2
 800912a:	b212      	sxth	r2, r2
 800912c:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 800912e:	683b      	ldr	r3, [r7, #0]
 8009130:	3302      	adds	r3, #2
 8009132:	f9b3 3000 	ldrsh.w	r3, [r3]
 8009136:	b29b      	uxth	r3, r3
 8009138:	021b      	lsls	r3, r3, #8
 800913a:	b29a      	uxth	r2, r3
 800913c:	7bbb      	ldrb	r3, [r7, #14]
 800913e:	b29b      	uxth	r3, r3
 8009140:	4413      	add	r3, r2
 8009142:	b29a      	uxth	r2, r3
 8009144:	683b      	ldr	r3, [r7, #0]
 8009146:	3302      	adds	r3, #2
 8009148:	b212      	sxth	r2, r2
 800914a:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 800914c:	7c7a      	ldrb	r2, [r7, #17]
 800914e:	683b      	ldr	r3, [r7, #0]
 8009150:	3304      	adds	r3, #4
 8009152:	b212      	sxth	r2, r2
 8009154:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 8009156:	683b      	ldr	r3, [r7, #0]
 8009158:	3304      	adds	r3, #4
 800915a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800915e:	b29b      	uxth	r3, r3
 8009160:	021b      	lsls	r3, r3, #8
 8009162:	b29a      	uxth	r2, r3
 8009164:	7c3b      	ldrb	r3, [r7, #16]
 8009166:	b29b      	uxth	r3, r3
 8009168:	4413      	add	r3, r2
 800916a:	b29a      	uxth	r2, r3
 800916c:	683b      	ldr	r3, [r7, #0]
 800916e:	3304      	adds	r3, #4
 8009170:	b212      	sxth	r2, r2
 8009172:	801a      	strh	r2, [r3, #0]

  return ret;
 8009174:	697b      	ldr	r3, [r7, #20]
}
 8009176:	4618      	mov	r0, r3
 8009178:	3718      	adds	r7, #24
 800917a:	46bd      	mov	sp, r7
 800917c:	bd80      	pop	{r7, pc}

0800917e <lsm6dso_acceleration_raw_get>:
  * @param  buff     buffer that stores data read
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_acceleration_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 800917e:	b580      	push	{r7, lr}
 8009180:	b086      	sub	sp, #24
 8009182:	af00      	add	r7, sp, #0
 8009184:	6078      	str	r0, [r7, #4]
 8009186:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_OUTX_L_A, buff, 6);
 8009188:	f107 020c 	add.w	r2, r7, #12
 800918c:	2306      	movs	r3, #6
 800918e:	2128      	movs	r1, #40	; 0x28
 8009190:	6878      	ldr	r0, [r7, #4]
 8009192:	f7ff fbcb 	bl	800892c <lsm6dso_read_reg>
 8009196:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 8009198:	7b7b      	ldrb	r3, [r7, #13]
 800919a:	b21a      	sxth	r2, r3
 800919c:	683b      	ldr	r3, [r7, #0]
 800919e:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 80091a0:	683b      	ldr	r3, [r7, #0]
 80091a2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80091a6:	b29b      	uxth	r3, r3
 80091a8:	021b      	lsls	r3, r3, #8
 80091aa:	b29a      	uxth	r2, r3
 80091ac:	7b3b      	ldrb	r3, [r7, #12]
 80091ae:	b29b      	uxth	r3, r3
 80091b0:	4413      	add	r3, r2
 80091b2:	b29b      	uxth	r3, r3
 80091b4:	b21a      	sxth	r2, r3
 80091b6:	683b      	ldr	r3, [r7, #0]
 80091b8:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 80091ba:	7bfa      	ldrb	r2, [r7, #15]
 80091bc:	683b      	ldr	r3, [r7, #0]
 80091be:	3302      	adds	r3, #2
 80091c0:	b212      	sxth	r2, r2
 80091c2:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 80091c4:	683b      	ldr	r3, [r7, #0]
 80091c6:	3302      	adds	r3, #2
 80091c8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80091cc:	b29b      	uxth	r3, r3
 80091ce:	021b      	lsls	r3, r3, #8
 80091d0:	b29a      	uxth	r2, r3
 80091d2:	7bbb      	ldrb	r3, [r7, #14]
 80091d4:	b29b      	uxth	r3, r3
 80091d6:	4413      	add	r3, r2
 80091d8:	b29a      	uxth	r2, r3
 80091da:	683b      	ldr	r3, [r7, #0]
 80091dc:	3302      	adds	r3, #2
 80091de:	b212      	sxth	r2, r2
 80091e0:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 80091e2:	7c7a      	ldrb	r2, [r7, #17]
 80091e4:	683b      	ldr	r3, [r7, #0]
 80091e6:	3304      	adds	r3, #4
 80091e8:	b212      	sxth	r2, r2
 80091ea:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 80091ec:	683b      	ldr	r3, [r7, #0]
 80091ee:	3304      	adds	r3, #4
 80091f0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80091f4:	b29b      	uxth	r3, r3
 80091f6:	021b      	lsls	r3, r3, #8
 80091f8:	b29a      	uxth	r2, r3
 80091fa:	7c3b      	ldrb	r3, [r7, #16]
 80091fc:	b29b      	uxth	r3, r3
 80091fe:	4413      	add	r3, r2
 8009200:	b29a      	uxth	r2, r3
 8009202:	683b      	ldr	r3, [r7, #0]
 8009204:	3304      	adds	r3, #4
 8009206:	b212      	sxth	r2, r2
 8009208:	801a      	strh	r2, [r3, #0]

  return ret;
 800920a:	697b      	ldr	r3, [r7, #20]
}
 800920c:	4618      	mov	r0, r3
 800920e:	3718      	adds	r7, #24
 8009210:	46bd      	mov	sp, r7
 8009212:	bd80      	pop	{r7, pc}

08009214 <lsm6dso_mem_bank_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_mem_bank_set(stmdev_ctx_t *ctx,
                             lsm6dso_reg_access_t val)
{
 8009214:	b580      	push	{r7, lr}
 8009216:	b084      	sub	sp, #16
 8009218:	af00      	add	r7, sp, #0
 800921a:	6078      	str	r0, [r7, #4]
 800921c:	460b      	mov	r3, r1
 800921e:	70fb      	strb	r3, [r7, #3]
  lsm6dso_func_cfg_access_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_FUNC_CFG_ACCESS, (uint8_t *)&reg, 1);
 8009220:	f107 0208 	add.w	r2, r7, #8
 8009224:	2301      	movs	r3, #1
 8009226:	2101      	movs	r1, #1
 8009228:	6878      	ldr	r0, [r7, #4]
 800922a:	f7ff fb7f 	bl	800892c <lsm6dso_read_reg>
 800922e:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8009230:	68fb      	ldr	r3, [r7, #12]
 8009232:	2b00      	cmp	r3, #0
 8009234:	d10f      	bne.n	8009256 <lsm6dso_mem_bank_set+0x42>
  {
    reg.reg_access = (uint8_t)val;
 8009236:	78fb      	ldrb	r3, [r7, #3]
 8009238:	f003 0303 	and.w	r3, r3, #3
 800923c:	b2da      	uxtb	r2, r3
 800923e:	7a3b      	ldrb	r3, [r7, #8]
 8009240:	f362 1387 	bfi	r3, r2, #6, #2
 8009244:	723b      	strb	r3, [r7, #8]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_FUNC_CFG_ACCESS, (uint8_t *)&reg, 1);
 8009246:	f107 0208 	add.w	r2, r7, #8
 800924a:	2301      	movs	r3, #1
 800924c:	2101      	movs	r1, #1
 800924e:	6878      	ldr	r0, [r7, #4]
 8009250:	f7ff fb84 	bl	800895c <lsm6dso_write_reg>
 8009254:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8009256:	68fb      	ldr	r3, [r7, #12]
}
 8009258:	4618      	mov	r0, r3
 800925a:	3710      	adds	r7, #16
 800925c:	46bd      	mov	sp, r7
 800925e:	bd80      	pop	{r7, pc}

08009260 <lsm6dso_device_id_get>:
  * @param  buff     buffer that stores data read
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 8009260:	b580      	push	{r7, lr}
 8009262:	b084      	sub	sp, #16
 8009264:	af00      	add	r7, sp, #0
 8009266:	6078      	str	r0, [r7, #4]
 8009268:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_WHO_AM_I, buff, 1);
 800926a:	2301      	movs	r3, #1
 800926c:	683a      	ldr	r2, [r7, #0]
 800926e:	210f      	movs	r1, #15
 8009270:	6878      	ldr	r0, [r7, #4]
 8009272:	f7ff fb5b 	bl	800892c <lsm6dso_read_reg>
 8009276:	60f8      	str	r0, [r7, #12]

  return ret;
 8009278:	68fb      	ldr	r3, [r7, #12]
}
 800927a:	4618      	mov	r0, r3
 800927c:	3710      	adds	r7, #16
 800927e:	46bd      	mov	sp, r7
 8009280:	bd80      	pop	{r7, pc}

08009282 <lsm6dso_auto_increment_set>:
  * @param  val      change the values of if_inc in reg CTRL3_C
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_auto_increment_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8009282:	b580      	push	{r7, lr}
 8009284:	b084      	sub	sp, #16
 8009286:	af00      	add	r7, sp, #0
 8009288:	6078      	str	r0, [r7, #4]
 800928a:	460b      	mov	r3, r1
 800928c:	70fb      	strb	r3, [r7, #3]
  lsm6dso_ctrl3_c_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL3_C, (uint8_t *)&reg, 1);
 800928e:	f107 0208 	add.w	r2, r7, #8
 8009292:	2301      	movs	r3, #1
 8009294:	2112      	movs	r1, #18
 8009296:	6878      	ldr	r0, [r7, #4]
 8009298:	f7ff fb48 	bl	800892c <lsm6dso_read_reg>
 800929c:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 800929e:	68fb      	ldr	r3, [r7, #12]
 80092a0:	2b00      	cmp	r3, #0
 80092a2:	d10f      	bne.n	80092c4 <lsm6dso_auto_increment_set+0x42>
  {
    reg.if_inc = val;
 80092a4:	78fb      	ldrb	r3, [r7, #3]
 80092a6:	f003 0301 	and.w	r3, r3, #1
 80092aa:	b2da      	uxtb	r2, r3
 80092ac:	7a3b      	ldrb	r3, [r7, #8]
 80092ae:	f362 0382 	bfi	r3, r2, #2, #1
 80092b2:	723b      	strb	r3, [r7, #8]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL3_C, (uint8_t *)&reg, 1);
 80092b4:	f107 0208 	add.w	r2, r7, #8
 80092b8:	2301      	movs	r3, #1
 80092ba:	2112      	movs	r1, #18
 80092bc:	6878      	ldr	r0, [r7, #4]
 80092be:	f7ff fb4d 	bl	800895c <lsm6dso_write_reg>
 80092c2:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80092c4:	68fb      	ldr	r3, [r7, #12]
}
 80092c6:	4618      	mov	r0, r3
 80092c8:	3710      	adds	r7, #16
 80092ca:	46bd      	mov	sp, r7
 80092cc:	bd80      	pop	{r7, pc}

080092ce <lsm6dso_i3c_disable_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_i3c_disable_set(stmdev_ctx_t *ctx,
                                lsm6dso_i3c_disable_t val)
{
 80092ce:	b580      	push	{r7, lr}
 80092d0:	b086      	sub	sp, #24
 80092d2:	af00      	add	r7, sp, #0
 80092d4:	6078      	str	r0, [r7, #4]
 80092d6:	460b      	mov	r3, r1
 80092d8:	70fb      	strb	r3, [r7, #3]
  lsm6dso_i3c_bus_avb_t i3c_bus_avb;
  lsm6dso_ctrl9_xl_t ctrl9_xl;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL9_XL, (uint8_t *)&ctrl9_xl, 1);
 80092da:	f107 020c 	add.w	r2, r7, #12
 80092de:	2301      	movs	r3, #1
 80092e0:	2118      	movs	r1, #24
 80092e2:	6878      	ldr	r0, [r7, #4]
 80092e4:	f7ff fb22 	bl	800892c <lsm6dso_read_reg>
 80092e8:	6178      	str	r0, [r7, #20]

  if (ret == 0)
 80092ea:	697b      	ldr	r3, [r7, #20]
 80092ec:	2b00      	cmp	r3, #0
 80092ee:	d111      	bne.n	8009314 <lsm6dso_i3c_disable_set+0x46>
  {
    ctrl9_xl.i3c_disable = ((uint8_t)val & 0x80U) >> 7;
 80092f0:	78fb      	ldrb	r3, [r7, #3]
 80092f2:	09db      	lsrs	r3, r3, #7
 80092f4:	b2db      	uxtb	r3, r3
 80092f6:	f003 0301 	and.w	r3, r3, #1
 80092fa:	b2da      	uxtb	r2, r3
 80092fc:	7b3b      	ldrb	r3, [r7, #12]
 80092fe:	f362 0341 	bfi	r3, r2, #1, #1
 8009302:	733b      	strb	r3, [r7, #12]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL9_XL, (uint8_t *)&ctrl9_xl, 1);
 8009304:	f107 020c 	add.w	r2, r7, #12
 8009308:	2301      	movs	r3, #1
 800930a:	2118      	movs	r1, #24
 800930c:	6878      	ldr	r0, [r7, #4]
 800930e:	f7ff fb25 	bl	800895c <lsm6dso_write_reg>
 8009312:	6178      	str	r0, [r7, #20]
  }

  if (ret == 0)
 8009314:	697b      	ldr	r3, [r7, #20]
 8009316:	2b00      	cmp	r3, #0
 8009318:	d107      	bne.n	800932a <lsm6dso_i3c_disable_set+0x5c>
  {
    ret = lsm6dso_read_reg(ctx, LSM6DSO_I3C_BUS_AVB,
 800931a:	f107 0210 	add.w	r2, r7, #16
 800931e:	2301      	movs	r3, #1
 8009320:	2162      	movs	r1, #98	; 0x62
 8009322:	6878      	ldr	r0, [r7, #4]
 8009324:	f7ff fb02 	bl	800892c <lsm6dso_read_reg>
 8009328:	6178      	str	r0, [r7, #20]
                           (uint8_t *)&i3c_bus_avb, 1);
  }

  if (ret == 0)
 800932a:	697b      	ldr	r3, [r7, #20]
 800932c:	2b00      	cmp	r3, #0
 800932e:	d10f      	bne.n	8009350 <lsm6dso_i3c_disable_set+0x82>
  {
    i3c_bus_avb.i3c_bus_avb_sel = (uint8_t)val & 0x03U;
 8009330:	78fb      	ldrb	r3, [r7, #3]
 8009332:	f003 0303 	and.w	r3, r3, #3
 8009336:	b2da      	uxtb	r2, r3
 8009338:	7c3b      	ldrb	r3, [r7, #16]
 800933a:	f362 03c4 	bfi	r3, r2, #3, #2
 800933e:	743b      	strb	r3, [r7, #16]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_I3C_BUS_AVB,
 8009340:	f107 0210 	add.w	r2, r7, #16
 8009344:	2301      	movs	r3, #1
 8009346:	2162      	movs	r1, #98	; 0x62
 8009348:	6878      	ldr	r0, [r7, #4]
 800934a:	f7ff fb07 	bl	800895c <lsm6dso_write_reg>
 800934e:	6178      	str	r0, [r7, #20]
                            (uint8_t *)&i3c_bus_avb, 1);
  }

  return ret;
 8009350:	697b      	ldr	r3, [r7, #20]
}
 8009352:	4618      	mov	r0, r3
 8009354:	3718      	adds	r7, #24
 8009356:	46bd      	mov	sp, r7
 8009358:	bd80      	pop	{r7, pc}

0800935a <lsm6dso_fifo_mode_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_fifo_mode_set(stmdev_ctx_t *ctx,
                              lsm6dso_fifo_mode_t val)
{
 800935a:	b580      	push	{r7, lr}
 800935c:	b084      	sub	sp, #16
 800935e:	af00      	add	r7, sp, #0
 8009360:	6078      	str	r0, [r7, #4]
 8009362:	460b      	mov	r3, r1
 8009364:	70fb      	strb	r3, [r7, #3]
  lsm6dso_fifo_ctrl4_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_FIFO_CTRL4, (uint8_t *)&reg, 1);
 8009366:	f107 0208 	add.w	r2, r7, #8
 800936a:	2301      	movs	r3, #1
 800936c:	210a      	movs	r1, #10
 800936e:	6878      	ldr	r0, [r7, #4]
 8009370:	f7ff fadc 	bl	800892c <lsm6dso_read_reg>
 8009374:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8009376:	68fb      	ldr	r3, [r7, #12]
 8009378:	2b00      	cmp	r3, #0
 800937a:	d10f      	bne.n	800939c <lsm6dso_fifo_mode_set+0x42>
  {
    reg.fifo_mode = (uint8_t)val;
 800937c:	78fb      	ldrb	r3, [r7, #3]
 800937e:	f003 0307 	and.w	r3, r3, #7
 8009382:	b2da      	uxtb	r2, r3
 8009384:	7a3b      	ldrb	r3, [r7, #8]
 8009386:	f362 0302 	bfi	r3, r2, #0, #3
 800938a:	723b      	strb	r3, [r7, #8]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_FIFO_CTRL4, (uint8_t *)&reg, 1);
 800938c:	f107 0208 	add.w	r2, r7, #8
 8009390:	2301      	movs	r3, #1
 8009392:	210a      	movs	r1, #10
 8009394:	6878      	ldr	r0, [r7, #4]
 8009396:	f7ff fae1 	bl	800895c <lsm6dso_write_reg>
 800939a:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 800939c:	68fb      	ldr	r3, [r7, #12]
}
 800939e:	4618      	mov	r0, r3
 80093a0:	3710      	adds	r7, #16
 80093a2:	46bd      	mov	sp, r7
 80093a4:	bd80      	pop	{r7, pc}

080093a6 <lsm6dso_fsm_enable_get>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_fsm_enable_get(stmdev_ctx_t *ctx,
                               lsm6dso_emb_fsm_enable_t *val)
{
 80093a6:	b580      	push	{r7, lr}
 80093a8:	b084      	sub	sp, #16
 80093aa:	af00      	add	r7, sp, #0
 80093ac:	6078      	str	r0, [r7, #4]
 80093ae:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = lsm6dso_mem_bank_set(ctx, LSM6DSO_EMBEDDED_FUNC_BANK);
 80093b0:	2102      	movs	r1, #2
 80093b2:	6878      	ldr	r0, [r7, #4]
 80093b4:	f7ff ff2e 	bl	8009214 <lsm6dso_mem_bank_set>
 80093b8:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 80093ba:	68fb      	ldr	r3, [r7, #12]
 80093bc:	2b00      	cmp	r3, #0
 80093be:	d106      	bne.n	80093ce <lsm6dso_fsm_enable_get+0x28>
  {
    ret = lsm6dso_read_reg(ctx, LSM6DSO_FSM_ENABLE_A, (uint8_t *) val, 2);
 80093c0:	2302      	movs	r3, #2
 80093c2:	683a      	ldr	r2, [r7, #0]
 80093c4:	2146      	movs	r1, #70	; 0x46
 80093c6:	6878      	ldr	r0, [r7, #4]
 80093c8:	f7ff fab0 	bl	800892c <lsm6dso_read_reg>
 80093cc:	60f8      	str	r0, [r7, #12]
  }

  if (ret == 0)
 80093ce:	68fb      	ldr	r3, [r7, #12]
 80093d0:	2b00      	cmp	r3, #0
 80093d2:	d104      	bne.n	80093de <lsm6dso_fsm_enable_get+0x38>
  {
    ret = lsm6dso_mem_bank_set(ctx, LSM6DSO_USER_BANK);
 80093d4:	2100      	movs	r1, #0
 80093d6:	6878      	ldr	r0, [r7, #4]
 80093d8:	f7ff ff1c 	bl	8009214 <lsm6dso_mem_bank_set>
 80093dc:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80093de:	68fb      	ldr	r3, [r7, #12]
}
 80093e0:	4618      	mov	r0, r3
 80093e2:	3710      	adds	r7, #16
 80093e4:	46bd      	mov	sp, r7
 80093e6:	bd80      	pop	{r7, pc}

080093e8 <lsm6dso_fsm_data_rate_get>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_fsm_data_rate_get(stmdev_ctx_t *ctx,
                                  lsm6dso_fsm_odr_t *val)
{
 80093e8:	b580      	push	{r7, lr}
 80093ea:	b084      	sub	sp, #16
 80093ec:	af00      	add	r7, sp, #0
 80093ee:	6078      	str	r0, [r7, #4]
 80093f0:	6039      	str	r1, [r7, #0]
  lsm6dso_emb_func_odr_cfg_b_t reg;
  int32_t ret;

  ret = lsm6dso_mem_bank_set(ctx, LSM6DSO_EMBEDDED_FUNC_BANK);
 80093f2:	2102      	movs	r1, #2
 80093f4:	6878      	ldr	r0, [r7, #4]
 80093f6:	f7ff ff0d 	bl	8009214 <lsm6dso_mem_bank_set>
 80093fa:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 80093fc:	68fb      	ldr	r3, [r7, #12]
 80093fe:	2b00      	cmp	r3, #0
 8009400:	d107      	bne.n	8009412 <lsm6dso_fsm_data_rate_get+0x2a>
  {
    ret = lsm6dso_read_reg(ctx, LSM6DSO_EMB_FUNC_ODR_CFG_B,
 8009402:	f107 0208 	add.w	r2, r7, #8
 8009406:	2301      	movs	r3, #1
 8009408:	215f      	movs	r1, #95	; 0x5f
 800940a:	6878      	ldr	r0, [r7, #4]
 800940c:	f7ff fa8e 	bl	800892c <lsm6dso_read_reg>
 8009410:	60f8      	str	r0, [r7, #12]
                           (uint8_t *)&reg, 1);
  }

  if (ret == 0)
 8009412:	68fb      	ldr	r3, [r7, #12]
 8009414:	2b00      	cmp	r3, #0
 8009416:	d12a      	bne.n	800946e <lsm6dso_fsm_data_rate_get+0x86>
  {
    switch (reg.fsm_odr)
 8009418:	7a3b      	ldrb	r3, [r7, #8]
 800941a:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 800941e:	b2db      	uxtb	r3, r3
 8009420:	2b03      	cmp	r3, #3
 8009422:	d81b      	bhi.n	800945c <lsm6dso_fsm_data_rate_get+0x74>
 8009424:	a201      	add	r2, pc, #4	; (adr r2, 800942c <lsm6dso_fsm_data_rate_get+0x44>)
 8009426:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800942a:	bf00      	nop
 800942c:	0800943d 	.word	0x0800943d
 8009430:	08009445 	.word	0x08009445
 8009434:	0800944d 	.word	0x0800944d
 8009438:	08009455 	.word	0x08009455
    {
      case LSM6DSO_ODR_FSM_12Hz5:
        *val = LSM6DSO_ODR_FSM_12Hz5;
 800943c:	683b      	ldr	r3, [r7, #0]
 800943e:	2200      	movs	r2, #0
 8009440:	701a      	strb	r2, [r3, #0]
        break;
 8009442:	e00f      	b.n	8009464 <lsm6dso_fsm_data_rate_get+0x7c>

      case LSM6DSO_ODR_FSM_26Hz:
        *val = LSM6DSO_ODR_FSM_26Hz;
 8009444:	683b      	ldr	r3, [r7, #0]
 8009446:	2201      	movs	r2, #1
 8009448:	701a      	strb	r2, [r3, #0]
        break;
 800944a:	e00b      	b.n	8009464 <lsm6dso_fsm_data_rate_get+0x7c>

      case LSM6DSO_ODR_FSM_52Hz:
        *val = LSM6DSO_ODR_FSM_52Hz;
 800944c:	683b      	ldr	r3, [r7, #0]
 800944e:	2202      	movs	r2, #2
 8009450:	701a      	strb	r2, [r3, #0]
        break;
 8009452:	e007      	b.n	8009464 <lsm6dso_fsm_data_rate_get+0x7c>

      case LSM6DSO_ODR_FSM_104Hz:
        *val = LSM6DSO_ODR_FSM_104Hz;
 8009454:	683b      	ldr	r3, [r7, #0]
 8009456:	2203      	movs	r2, #3
 8009458:	701a      	strb	r2, [r3, #0]
        break;
 800945a:	e003      	b.n	8009464 <lsm6dso_fsm_data_rate_get+0x7c>

      default:
        *val = LSM6DSO_ODR_FSM_12Hz5;
 800945c:	683b      	ldr	r3, [r7, #0]
 800945e:	2200      	movs	r2, #0
 8009460:	701a      	strb	r2, [r3, #0]
        break;
 8009462:	bf00      	nop
    }

    ret = lsm6dso_mem_bank_set(ctx, LSM6DSO_USER_BANK);
 8009464:	2100      	movs	r1, #0
 8009466:	6878      	ldr	r0, [r7, #4]
 8009468:	f7ff fed4 	bl	8009214 <lsm6dso_mem_bank_set>
 800946c:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 800946e:	68fb      	ldr	r3, [r7, #12]
}
 8009470:	4618      	mov	r0, r3
 8009472:	3710      	adds	r7, #16
 8009474:	46bd      	mov	sp, r7
 8009476:	bd80      	pop	{r7, pc}

08009478 <STTS751_RegisterBusIO>:
  * @brief  Register Component Bus IO operations
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t STTS751_RegisterBusIO(STTS751_Object_t *pObj, STTS751_IO_t *pIO)
{
 8009478:	b580      	push	{r7, lr}
 800947a:	b084      	sub	sp, #16
 800947c:	af00      	add	r7, sp, #0
 800947e:	6078      	str	r0, [r7, #4]
 8009480:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (pObj == NULL)
 8009482:	687b      	ldr	r3, [r7, #4]
 8009484:	2b00      	cmp	r3, #0
 8009486:	d103      	bne.n	8009490 <STTS751_RegisterBusIO+0x18>
  {
    ret = STTS751_ERROR;
 8009488:	f04f 33ff 	mov.w	r3, #4294967295
 800948c:	60fb      	str	r3, [r7, #12]
 800948e:	e034      	b.n	80094fa <STTS751_RegisterBusIO+0x82>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 8009490:	683b      	ldr	r3, [r7, #0]
 8009492:	681a      	ldr	r2, [r3, #0]
 8009494:	687b      	ldr	r3, [r7, #4]
 8009496:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 8009498:	683b      	ldr	r3, [r7, #0]
 800949a:	685a      	ldr	r2, [r3, #4]
 800949c:	687b      	ldr	r3, [r7, #4]
 800949e:	605a      	str	r2, [r3, #4]
    pObj->IO.BusType   = pIO->BusType;
 80094a0:	683b      	ldr	r3, [r7, #0]
 80094a2:	689a      	ldr	r2, [r3, #8]
 80094a4:	687b      	ldr	r3, [r7, #4]
 80094a6:	609a      	str	r2, [r3, #8]
    pObj->IO.Address   = pIO->Address;
 80094a8:	683b      	ldr	r3, [r7, #0]
 80094aa:	7b1a      	ldrb	r2, [r3, #12]
 80094ac:	687b      	ldr	r3, [r7, #4]
 80094ae:	731a      	strb	r2, [r3, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 80094b0:	683b      	ldr	r3, [r7, #0]
 80094b2:	691a      	ldr	r2, [r3, #16]
 80094b4:	687b      	ldr	r3, [r7, #4]
 80094b6:	611a      	str	r2, [r3, #16]
    pObj->IO.ReadReg   = pIO->ReadReg;
 80094b8:	683b      	ldr	r3, [r7, #0]
 80094ba:	695a      	ldr	r2, [r3, #20]
 80094bc:	687b      	ldr	r3, [r7, #4]
 80094be:	615a      	str	r2, [r3, #20]
    pObj->IO.GetTick   = pIO->GetTick;
 80094c0:	683b      	ldr	r3, [r7, #0]
 80094c2:	699a      	ldr	r2, [r3, #24]
 80094c4:	687b      	ldr	r3, [r7, #4]
 80094c6:	619a      	str	r2, [r3, #24]

    pObj->Ctx.read_reg  = ReadRegWrap;
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	4a0e      	ldr	r2, [pc, #56]	; (8009504 <STTS751_RegisterBusIO+0x8c>)
 80094cc:	625a      	str	r2, [r3, #36]	; 0x24
    pObj->Ctx.write_reg = WriteRegWrap;
 80094ce:	687b      	ldr	r3, [r7, #4]
 80094d0:	4a0d      	ldr	r2, [pc, #52]	; (8009508 <STTS751_RegisterBusIO+0x90>)
 80094d2:	621a      	str	r2, [r3, #32]
    pObj->Ctx.mdelay    = pIO->Delay;
 80094d4:	683b      	ldr	r3, [r7, #0]
 80094d6:	69da      	ldr	r2, [r3, #28]
 80094d8:	687b      	ldr	r3, [r7, #4]
 80094da:	629a      	str	r2, [r3, #40]	; 0x28
    pObj->Ctx.handle   = pObj;
 80094dc:	687b      	ldr	r3, [r7, #4]
 80094de:	687a      	ldr	r2, [r7, #4]
 80094e0:	62da      	str	r2, [r3, #44]	; 0x2c

    if (pObj->IO.Init != NULL)
 80094e2:	687b      	ldr	r3, [r7, #4]
 80094e4:	681b      	ldr	r3, [r3, #0]
 80094e6:	2b00      	cmp	r3, #0
 80094e8:	d004      	beq.n	80094f4 <STTS751_RegisterBusIO+0x7c>
    {
      ret = pObj->IO.Init();
 80094ea:	687b      	ldr	r3, [r7, #4]
 80094ec:	681b      	ldr	r3, [r3, #0]
 80094ee:	4798      	blx	r3
 80094f0:	60f8      	str	r0, [r7, #12]
 80094f2:	e002      	b.n	80094fa <STTS751_RegisterBusIO+0x82>
    }
    else
    {
      ret = STTS751_ERROR;
 80094f4:	f04f 33ff 	mov.w	r3, #4294967295
 80094f8:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 80094fa:	68fb      	ldr	r3, [r7, #12]
}
 80094fc:	4618      	mov	r0, r3
 80094fe:	3710      	adds	r7, #16
 8009500:	46bd      	mov	sp, r7
 8009502:	bd80      	pop	{r7, pc}
 8009504:	0800998d 	.word	0x0800998d
 8009508:	080099fb 	.word	0x080099fb

0800950c <STTS751_Init>:
  * @brief  Initialize the STTS751 sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t STTS751_Init(STTS751_Object_t *pObj)
{
 800950c:	b580      	push	{r7, lr}
 800950e:	b082      	sub	sp, #8
 8009510:	af00      	add	r7, sp, #0
 8009512:	6078      	str	r0, [r7, #4]
  if (pObj->is_initialized == 0U)
 8009514:	687b      	ldr	r3, [r7, #4]
 8009516:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800951a:	2b00      	cmp	r3, #0
 800951c:	d127      	bne.n	800956e <STTS751_Init+0x62>
  {
    /* Disable EVENT pin of SMBus. */
    if (stts751_pin_event_route_set(&(pObj->Ctx),  PROPERTY_ENABLE) != STTS751_OK)
 800951e:	687b      	ldr	r3, [r7, #4]
 8009520:	3320      	adds	r3, #32
 8009522:	2101      	movs	r1, #1
 8009524:	4618      	mov	r0, r3
 8009526:	f000 fc4c 	bl	8009dc2 <stts751_pin_event_route_set>
 800952a:	4603      	mov	r3, r0
 800952c:	2b00      	cmp	r3, #0
 800952e:	d002      	beq.n	8009536 <STTS751_Init+0x2a>
    {
      return STTS751_ERROR;
 8009530:	f04f 33ff 	mov.w	r3, #4294967295
 8009534:	e020      	b.n	8009578 <STTS751_Init+0x6c>
    }

    /* Set default ODR */
    pObj->temp_odr = 1.0f;
 8009536:	687b      	ldr	r3, [r7, #4]
 8009538:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800953c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the resolution to the maximum allowed value */
    if (stts751_resolution_set(&(pObj->Ctx), STTS751_12bit) != STTS751_OK)
 800953e:	687b      	ldr	r3, [r7, #4]
 8009540:	3320      	adds	r3, #32
 8009542:	2103      	movs	r1, #3
 8009544:	4618      	mov	r0, r3
 8009546:	f000 fbaf 	bl	8009ca8 <stts751_resolution_set>
 800954a:	4603      	mov	r3, r0
 800954c:	2b00      	cmp	r3, #0
 800954e:	d002      	beq.n	8009556 <STTS751_Init+0x4a>
    {
      return STTS751_ERROR;
 8009550:	f04f 33ff 	mov.w	r3, #4294967295
 8009554:	e010      	b.n	8009578 <STTS751_Init+0x6c>
    }

    /* Put the component in standby mode. */
    if (stts751_temp_data_rate_set(&(pObj->Ctx), STTS751_TEMP_ODR_OFF) != STTS751_OK)
 8009556:	687b      	ldr	r3, [r7, #4]
 8009558:	3320      	adds	r3, #32
 800955a:	2180      	movs	r1, #128	; 0x80
 800955c:	4618      	mov	r0, r3
 800955e:	f000 facd 	bl	8009afc <stts751_temp_data_rate_set>
 8009562:	4603      	mov	r3, r0
 8009564:	2b00      	cmp	r3, #0
 8009566:	d002      	beq.n	800956e <STTS751_Init+0x62>
    {
      return STTS751_ERROR;
 8009568:	f04f 33ff 	mov.w	r3, #4294967295
 800956c:	e004      	b.n	8009578 <STTS751_Init+0x6c>
    }
  }

  pObj->is_initialized = 1;
 800956e:	687b      	ldr	r3, [r7, #4]
 8009570:	2201      	movs	r2, #1
 8009572:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return STTS751_OK;
 8009576:	2300      	movs	r3, #0
}
 8009578:	4618      	mov	r0, r3
 800957a:	3708      	adds	r7, #8
 800957c:	46bd      	mov	sp, r7
 800957e:	bd80      	pop	{r7, pc}

08009580 <STTS751_DeInit>:
  * @brief  Deinitialize the STTS751 sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t STTS751_DeInit(STTS751_Object_t *pObj)
{
 8009580:	b580      	push	{r7, lr}
 8009582:	b082      	sub	sp, #8
 8009584:	af00      	add	r7, sp, #0
 8009586:	6078      	str	r0, [r7, #4]
  if (pObj->is_initialized == 1U)
 8009588:	687b      	ldr	r3, [r7, #4]
 800958a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800958e:	2b01      	cmp	r3, #1
 8009590:	d108      	bne.n	80095a4 <STTS751_DeInit+0x24>
  {
    /* Put the component in standby mode */
    if (STTS751_TEMP_Disable(pObj) != STTS751_OK)
 8009592:	6878      	ldr	r0, [r7, #4]
 8009594:	f000 f870 	bl	8009678 <STTS751_TEMP_Disable>
 8009598:	4603      	mov	r3, r0
 800959a:	2b00      	cmp	r3, #0
 800959c:	d002      	beq.n	80095a4 <STTS751_DeInit+0x24>
    {
      return STTS751_ERROR;
 800959e:	f04f 33ff 	mov.w	r3, #4294967295
 80095a2:	e004      	b.n	80095ae <STTS751_DeInit+0x2e>
    }
  }

  pObj->is_initialized = 0;
 80095a4:	687b      	ldr	r3, [r7, #4]
 80095a6:	2200      	movs	r2, #0
 80095a8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return STTS751_OK;
 80095ac:	2300      	movs	r3, #0
}
 80095ae:	4618      	mov	r0, r3
 80095b0:	3708      	adds	r7, #8
 80095b2:	46bd      	mov	sp, r7
 80095b4:	bd80      	pop	{r7, pc}

080095b6 <STTS751_ReadID>:
  * @param  pObj the device pObj
  * @param  Id the WHO_AM_I value
  * @retval 0 in case of success, an error code otherwise
  */
int32_t STTS751_ReadID(STTS751_Object_t *pObj, uint8_t *Id)
{
 80095b6:	b580      	push	{r7, lr}
 80095b8:	b084      	sub	sp, #16
 80095ba:	af00      	add	r7, sp, #0
 80095bc:	6078      	str	r0, [r7, #4]
 80095be:	6039      	str	r1, [r7, #0]
  stts751_id_t buf;

  if (stts751_device_id_get(&(pObj->Ctx), &buf) != STTS751_OK)
 80095c0:	687b      	ldr	r3, [r7, #4]
 80095c2:	3320      	adds	r3, #32
 80095c4:	f107 020c 	add.w	r2, r7, #12
 80095c8:	4611      	mov	r1, r2
 80095ca:	4618      	mov	r0, r3
 80095cc:	f000 fc1f 	bl	8009e0e <stts751_device_id_get>
 80095d0:	4603      	mov	r3, r0
 80095d2:	2b00      	cmp	r3, #0
 80095d4:	d002      	beq.n	80095dc <STTS751_ReadID+0x26>
  {
    return STTS751_ERROR;
 80095d6:	f04f 33ff 	mov.w	r3, #4294967295
 80095da:	e003      	b.n	80095e4 <STTS751_ReadID+0x2e>
  }

  *Id = buf.manufacturer_id;
 80095dc:	7b7a      	ldrb	r2, [r7, #13]
 80095de:	683b      	ldr	r3, [r7, #0]
 80095e0:	701a      	strb	r2, [r3, #0]

  return STTS751_OK;
 80095e2:	2300      	movs	r3, #0
}
 80095e4:	4618      	mov	r0, r3
 80095e6:	3710      	adds	r7, #16
 80095e8:	46bd      	mov	sp, r7
 80095ea:	bd80      	pop	{r7, pc}

080095ec <STTS751_GetCapabilities>:
  * @param  pObj Component object pointer
  * @param  Capabilities pointer to STTS751 sensor capabilities
  * @retval 0 in case of success, an error code otherwise
  */
int32_t STTS751_GetCapabilities(STTS751_Object_t *pObj, STTS751_Capabilities_t *Capabilities)
{
 80095ec:	b480      	push	{r7}
 80095ee:	b083      	sub	sp, #12
 80095f0:	af00      	add	r7, sp, #0
 80095f2:	6078      	str	r0, [r7, #4]
 80095f4:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  Capabilities->Humidity    = 0;
 80095f6:	683b      	ldr	r3, [r7, #0]
 80095f8:	2200      	movs	r2, #0
 80095fa:	709a      	strb	r2, [r3, #2]
  Capabilities->Pressure    = 0;
 80095fc:	683b      	ldr	r3, [r7, #0]
 80095fe:	2200      	movs	r2, #0
 8009600:	705a      	strb	r2, [r3, #1]
  Capabilities->Temperature = 1;
 8009602:	683b      	ldr	r3, [r7, #0]
 8009604:	2201      	movs	r2, #1
 8009606:	701a      	strb	r2, [r3, #0]
  Capabilities->LowPower    = 0;
 8009608:	683b      	ldr	r3, [r7, #0]
 800960a:	2200      	movs	r2, #0
 800960c:	70da      	strb	r2, [r3, #3]
  Capabilities->HumMaxOdr   = 0.0f;
 800960e:	683b      	ldr	r3, [r7, #0]
 8009610:	f04f 0200 	mov.w	r2, #0
 8009614:	605a      	str	r2, [r3, #4]
  Capabilities->TempMaxOdr  = 32.0f;
 8009616:	683b      	ldr	r3, [r7, #0]
 8009618:	f04f 4284 	mov.w	r2, #1107296256	; 0x42000000
 800961c:	609a      	str	r2, [r3, #8]
  Capabilities->PressMaxOdr = 0.0f;
 800961e:	683b      	ldr	r3, [r7, #0]
 8009620:	f04f 0200 	mov.w	r2, #0
 8009624:	60da      	str	r2, [r3, #12]
  return STTS751_OK;
 8009626:	2300      	movs	r3, #0
}
 8009628:	4618      	mov	r0, r3
 800962a:	370c      	adds	r7, #12
 800962c:	46bd      	mov	sp, r7
 800962e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009632:	4770      	bx	lr

08009634 <STTS751_TEMP_Enable>:
  * @brief  Enable the STTS751 temperature sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t STTS751_TEMP_Enable(STTS751_Object_t *pObj)
{
 8009634:	b580      	push	{r7, lr}
 8009636:	b082      	sub	sp, #8
 8009638:	af00      	add	r7, sp, #0
 800963a:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->temp_is_enabled == 1U)
 800963c:	687b      	ldr	r3, [r7, #4]
 800963e:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8009642:	2b01      	cmp	r3, #1
 8009644:	d101      	bne.n	800964a <STTS751_TEMP_Enable+0x16>
  {
    return STTS751_OK;
 8009646:	2300      	movs	r3, #0
 8009648:	e012      	b.n	8009670 <STTS751_TEMP_Enable+0x3c>
  }

  /* Power on the component and set the odr. */
  if (STTS751_TEMP_SetOutputDataRate(pObj, pObj->temp_odr) != STTS751_OK)
 800964a:	687b      	ldr	r3, [r7, #4]
 800964c:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8009650:	eeb0 0a67 	vmov.f32	s0, s15
 8009654:	6878      	ldr	r0, [r7, #4]
 8009656:	f000 f8b5 	bl	80097c4 <STTS751_TEMP_SetOutputDataRate>
 800965a:	4603      	mov	r3, r0
 800965c:	2b00      	cmp	r3, #0
 800965e:	d002      	beq.n	8009666 <STTS751_TEMP_Enable+0x32>
  {
    return STTS751_ERROR;
 8009660:	f04f 33ff 	mov.w	r3, #4294967295
 8009664:	e004      	b.n	8009670 <STTS751_TEMP_Enable+0x3c>
  }

  pObj->temp_is_enabled = 1;
 8009666:	687b      	ldr	r3, [r7, #4]
 8009668:	2201      	movs	r2, #1
 800966a:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

  return STTS751_OK;
 800966e:	2300      	movs	r3, #0
}
 8009670:	4618      	mov	r0, r3
 8009672:	3708      	adds	r7, #8
 8009674:	46bd      	mov	sp, r7
 8009676:	bd80      	pop	{r7, pc}

08009678 <STTS751_TEMP_Disable>:
  * @brief  Disable the STTS751 temperature sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t STTS751_TEMP_Disable(STTS751_Object_t *pObj)
{
 8009678:	b580      	push	{r7, lr}
 800967a:	b082      	sub	sp, #8
 800967c:	af00      	add	r7, sp, #0
 800967e:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->temp_is_enabled == 0U)
 8009680:	687b      	ldr	r3, [r7, #4]
 8009682:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8009686:	2b00      	cmp	r3, #0
 8009688:	d101      	bne.n	800968e <STTS751_TEMP_Disable+0x16>
  {
    return STTS751_OK;
 800968a:	2300      	movs	r3, #0
 800968c:	e01c      	b.n	80096c8 <STTS751_TEMP_Disable+0x50>
  }

  /* Save the current odr. */
  if (STTS751_TEMP_GetOutputDataRate(pObj, &pObj->temp_odr) != STTS751_OK)
 800968e:	687b      	ldr	r3, [r7, #4]
 8009690:	3334      	adds	r3, #52	; 0x34
 8009692:	4619      	mov	r1, r3
 8009694:	6878      	ldr	r0, [r7, #4]
 8009696:	f000 f81b 	bl	80096d0 <STTS751_TEMP_GetOutputDataRate>
 800969a:	4603      	mov	r3, r0
 800969c:	2b00      	cmp	r3, #0
 800969e:	d002      	beq.n	80096a6 <STTS751_TEMP_Disable+0x2e>
  {
    return STTS751_ERROR;
 80096a0:	f04f 33ff 	mov.w	r3, #4294967295
 80096a4:	e010      	b.n	80096c8 <STTS751_TEMP_Disable+0x50>
  }

  /* Put the component in standby mode. */
  if (stts751_temp_data_rate_set(&(pObj->Ctx), STTS751_TEMP_ODR_OFF) != STTS751_OK)
 80096a6:	687b      	ldr	r3, [r7, #4]
 80096a8:	3320      	adds	r3, #32
 80096aa:	2180      	movs	r1, #128	; 0x80
 80096ac:	4618      	mov	r0, r3
 80096ae:	f000 fa25 	bl	8009afc <stts751_temp_data_rate_set>
 80096b2:	4603      	mov	r3, r0
 80096b4:	2b00      	cmp	r3, #0
 80096b6:	d002      	beq.n	80096be <STTS751_TEMP_Disable+0x46>
  {
    return STTS751_ERROR;
 80096b8:	f04f 33ff 	mov.w	r3, #4294967295
 80096bc:	e004      	b.n	80096c8 <STTS751_TEMP_Disable+0x50>
  }

  pObj->temp_is_enabled = 0;
 80096be:	687b      	ldr	r3, [r7, #4]
 80096c0:	2200      	movs	r2, #0
 80096c2:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

  return STTS751_OK;
 80096c6:	2300      	movs	r3, #0
}
 80096c8:	4618      	mov	r0, r3
 80096ca:	3708      	adds	r7, #8
 80096cc:	46bd      	mov	sp, r7
 80096ce:	bd80      	pop	{r7, pc}

080096d0 <STTS751_TEMP_GetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr pointer where the output data rate is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t STTS751_TEMP_GetOutputDataRate(STTS751_Object_t *pObj, float *Odr)
{
 80096d0:	b580      	push	{r7, lr}
 80096d2:	b084      	sub	sp, #16
 80096d4:	af00      	add	r7, sp, #0
 80096d6:	6078      	str	r0, [r7, #4]
 80096d8:	6039      	str	r1, [r7, #0]
  int32_t ret = STTS751_OK;
 80096da:	2300      	movs	r3, #0
 80096dc:	60fb      	str	r3, [r7, #12]
  stts751_odr_t odr_low_level;

  if (stts751_temp_data_rate_get(&(pObj->Ctx), &odr_low_level) != STTS751_OK)
 80096de:	687b      	ldr	r3, [r7, #4]
 80096e0:	3320      	adds	r3, #32
 80096e2:	f107 020b 	add.w	r2, r7, #11
 80096e6:	4611      	mov	r1, r2
 80096e8:	4618      	mov	r0, r3
 80096ea:	f000 fa5d 	bl	8009ba8 <stts751_temp_data_rate_get>
 80096ee:	4603      	mov	r3, r0
 80096f0:	2b00      	cmp	r3, #0
 80096f2:	d002      	beq.n	80096fa <STTS751_TEMP_GetOutputDataRate+0x2a>
  {
    return STTS751_ERROR;
 80096f4:	f04f 33ff 	mov.w	r3, #4294967295
 80096f8:	e060      	b.n	80097bc <STTS751_TEMP_GetOutputDataRate+0xec>
  }

  switch (odr_low_level)
 80096fa:	7afb      	ldrb	r3, [r7, #11]
 80096fc:	2b90      	cmp	r3, #144	; 0x90
 80096fe:	d021      	beq.n	8009744 <STTS751_TEMP_GetOutputDataRate+0x74>
 8009700:	2b90      	cmp	r3, #144	; 0x90
 8009702:	dc56      	bgt.n	80097b2 <STTS751_TEMP_GetOutputDataRate+0xe2>
 8009704:	2b09      	cmp	r3, #9
 8009706:	dc1b      	bgt.n	8009740 <STTS751_TEMP_GetOutputDataRate+0x70>
 8009708:	2b00      	cmp	r3, #0
 800970a:	db52      	blt.n	80097b2 <STTS751_TEMP_GetOutputDataRate+0xe2>
 800970c:	2b09      	cmp	r3, #9
 800970e:	d850      	bhi.n	80097b2 <STTS751_TEMP_GetOutputDataRate+0xe2>
 8009710:	a201      	add	r2, pc, #4	; (adr r2, 8009718 <STTS751_TEMP_GetOutputDataRate+0x48>)
 8009712:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009716:	bf00      	nop
 8009718:	0800974f 	.word	0x0800974f
 800971c:	08009759 	.word	0x08009759
 8009720:	08009763 	.word	0x08009763
 8009724:	0800976d 	.word	0x0800976d
 8009728:	08009777 	.word	0x08009777
 800972c:	08009781 	.word	0x08009781
 8009730:	0800978b 	.word	0x0800978b
 8009734:	08009795 	.word	0x08009795
 8009738:	0800979f 	.word	0x0800979f
 800973c:	080097a9 	.word	0x080097a9
 8009740:	2b80      	cmp	r3, #128	; 0x80
 8009742:	d136      	bne.n	80097b2 <STTS751_TEMP_GetOutputDataRate+0xe2>
  {
    case STTS751_TEMP_ODR_OFF:
    case STTS751_TEMP_ODR_ONE_SHOT:
      *Odr = 0.0f;
 8009744:	683b      	ldr	r3, [r7, #0]
 8009746:	f04f 0200 	mov.w	r2, #0
 800974a:	601a      	str	r2, [r3, #0]
      break;
 800974c:	e035      	b.n	80097ba <STTS751_TEMP_GetOutputDataRate+0xea>

    case STTS751_TEMP_ODR_62mHz5:
      *Odr = 0.0625f;
 800974e:	683b      	ldr	r3, [r7, #0]
 8009750:	f04f 5276 	mov.w	r2, #1031798784	; 0x3d800000
 8009754:	601a      	str	r2, [r3, #0]
      break;
 8009756:	e030      	b.n	80097ba <STTS751_TEMP_GetOutputDataRate+0xea>

    case STTS751_TEMP_ODR_125mHz:
      *Odr = 0.125f;
 8009758:	683b      	ldr	r3, [r7, #0]
 800975a:	f04f 5278 	mov.w	r2, #1040187392	; 0x3e000000
 800975e:	601a      	str	r2, [r3, #0]
      break;
 8009760:	e02b      	b.n	80097ba <STTS751_TEMP_GetOutputDataRate+0xea>

    case STTS751_TEMP_ODR_250mHz:
      *Odr = 0.250f;
 8009762:	683b      	ldr	r3, [r7, #0]
 8009764:	f04f 527a 	mov.w	r2, #1048576000	; 0x3e800000
 8009768:	601a      	str	r2, [r3, #0]
      break;
 800976a:	e026      	b.n	80097ba <STTS751_TEMP_GetOutputDataRate+0xea>

    case STTS751_TEMP_ODR_500mHz:
      *Odr = 0.500f;
 800976c:	683b      	ldr	r3, [r7, #0]
 800976e:	f04f 527c 	mov.w	r2, #1056964608	; 0x3f000000
 8009772:	601a      	str	r2, [r3, #0]
      break;
 8009774:	e021      	b.n	80097ba <STTS751_TEMP_GetOutputDataRate+0xea>

    case STTS751_TEMP_ODR_1Hz:
      *Odr = 1.0f;
 8009776:	683b      	ldr	r3, [r7, #0]
 8009778:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800977c:	601a      	str	r2, [r3, #0]
      break;
 800977e:	e01c      	b.n	80097ba <STTS751_TEMP_GetOutputDataRate+0xea>

    case STTS751_TEMP_ODR_2Hz:
      *Odr = 2.0f;
 8009780:	683b      	ldr	r3, [r7, #0]
 8009782:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8009786:	601a      	str	r2, [r3, #0]
      break;
 8009788:	e017      	b.n	80097ba <STTS751_TEMP_GetOutputDataRate+0xea>

    case STTS751_TEMP_ODR_4Hz:
      *Odr = 4.0f;
 800978a:	683b      	ldr	r3, [r7, #0]
 800978c:	f04f 4281 	mov.w	r2, #1082130432	; 0x40800000
 8009790:	601a      	str	r2, [r3, #0]
      break;
 8009792:	e012      	b.n	80097ba <STTS751_TEMP_GetOutputDataRate+0xea>

    case STTS751_TEMP_ODR_8Hz:
      *Odr = 8.0f;
 8009794:	683b      	ldr	r3, [r7, #0]
 8009796:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
 800979a:	601a      	str	r2, [r3, #0]
      break;
 800979c:	e00d      	b.n	80097ba <STTS751_TEMP_GetOutputDataRate+0xea>

    case STTS751_TEMP_ODR_16Hz:
      *Odr = 16.0f;
 800979e:	683b      	ldr	r3, [r7, #0]
 80097a0:	f04f 4283 	mov.w	r2, #1098907648	; 0x41800000
 80097a4:	601a      	str	r2, [r3, #0]
      break;
 80097a6:	e008      	b.n	80097ba <STTS751_TEMP_GetOutputDataRate+0xea>

    case STTS751_TEMP_ODR_32Hz:
      *Odr = 32.0f;
 80097a8:	683b      	ldr	r3, [r7, #0]
 80097aa:	f04f 4284 	mov.w	r2, #1107296256	; 0x42000000
 80097ae:	601a      	str	r2, [r3, #0]
      break;
 80097b0:	e003      	b.n	80097ba <STTS751_TEMP_GetOutputDataRate+0xea>

    default:
      ret = STTS751_ERROR;
 80097b2:	f04f 33ff 	mov.w	r3, #4294967295
 80097b6:	60fb      	str	r3, [r7, #12]
      break;
 80097b8:	bf00      	nop
  }

  return ret;
 80097ba:	68fb      	ldr	r3, [r7, #12]
}
 80097bc:	4618      	mov	r0, r3
 80097be:	3710      	adds	r7, #16
 80097c0:	46bd      	mov	sp, r7
 80097c2:	bd80      	pop	{r7, pc}

080097c4 <STTS751_TEMP_SetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t STTS751_TEMP_SetOutputDataRate(STTS751_Object_t *pObj, float Odr)
{
 80097c4:	b580      	push	{r7, lr}
 80097c6:	b084      	sub	sp, #16
 80097c8:	af00      	add	r7, sp, #0
 80097ca:	6078      	str	r0, [r7, #4]
 80097cc:	ed87 0a00 	vstr	s0, [r7]
  stts751_odr_t new_odr;
  stts751_tres_t res;

  /* Get the current resolution */
  if (stts751_resolution_get(&(pObj->Ctx), &res) != STTS751_OK)
 80097d0:	687b      	ldr	r3, [r7, #4]
 80097d2:	3320      	adds	r3, #32
 80097d4:	f107 020e 	add.w	r2, r7, #14
 80097d8:	4611      	mov	r1, r2
 80097da:	4618      	mov	r0, r3
 80097dc:	f000 fa8a 	bl	8009cf4 <stts751_resolution_get>
 80097e0:	4603      	mov	r3, r0
 80097e2:	2b00      	cmp	r3, #0
 80097e4:	d002      	beq.n	80097ec <STTS751_TEMP_SetOutputDataRate+0x28>
  {
    return STTS751_ERROR;
 80097e6:	f04f 33ff 	mov.w	r3, #4294967295
 80097ea:	e0a5      	b.n	8009938 <STTS751_TEMP_SetOutputDataRate+0x174>
  }

  /* If the requested odr is 16Hz we cannot use the 12 bits resolution */
  if (Odr == 16.0f && res == STTS751_12bit)
 80097ec:	edd7 7a00 	vldr	s15, [r7]
 80097f0:	eeb3 7a00 	vmov.f32	s14, #48	; 0x41800000  16.0
 80097f4:	eef4 7a47 	vcmp.f32	s15, s14
 80097f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80097fc:	d10e      	bne.n	800981c <STTS751_TEMP_SetOutputDataRate+0x58>
 80097fe:	7bbb      	ldrb	r3, [r7, #14]
 8009800:	2b03      	cmp	r3, #3
 8009802:	d10b      	bne.n	800981c <STTS751_TEMP_SetOutputDataRate+0x58>
  {
    /* We force resolution to the maximum allowed value */
    if (stts751_resolution_set(&(pObj->Ctx), STTS751_11bit) != STTS751_OK)
 8009804:	687b      	ldr	r3, [r7, #4]
 8009806:	3320      	adds	r3, #32
 8009808:	2101      	movs	r1, #1
 800980a:	4618      	mov	r0, r3
 800980c:	f000 fa4c 	bl	8009ca8 <stts751_resolution_set>
 8009810:	4603      	mov	r3, r0
 8009812:	2b00      	cmp	r3, #0
 8009814:	d002      	beq.n	800981c <STTS751_TEMP_SetOutputDataRate+0x58>
    {
      return STTS751_ERROR;
 8009816:	f04f 33ff 	mov.w	r3, #4294967295
 800981a:	e08d      	b.n	8009938 <STTS751_TEMP_SetOutputDataRate+0x174>
    }
  }

  /* If the requested odr is 32Hz we cannot use the 12 bits and 11 bits resolutions */
  if (Odr == 32.0f && (res == STTS751_12bit || res == STTS751_11bit))
 800981c:	edd7 7a00 	vldr	s15, [r7]
 8009820:	ed9f 7a47 	vldr	s14, [pc, #284]	; 8009940 <STTS751_TEMP_SetOutputDataRate+0x17c>
 8009824:	eef4 7a47 	vcmp.f32	s15, s14
 8009828:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800982c:	d111      	bne.n	8009852 <STTS751_TEMP_SetOutputDataRate+0x8e>
 800982e:	7bbb      	ldrb	r3, [r7, #14]
 8009830:	2b03      	cmp	r3, #3
 8009832:	d002      	beq.n	800983a <STTS751_TEMP_SetOutputDataRate+0x76>
 8009834:	7bbb      	ldrb	r3, [r7, #14]
 8009836:	2b01      	cmp	r3, #1
 8009838:	d10b      	bne.n	8009852 <STTS751_TEMP_SetOutputDataRate+0x8e>
  {
    /* We force resolution to the maximum allowed value */
    if (stts751_resolution_set(&(pObj->Ctx), STTS751_10bit) != STTS751_OK)
 800983a:	687b      	ldr	r3, [r7, #4]
 800983c:	3320      	adds	r3, #32
 800983e:	2100      	movs	r1, #0
 8009840:	4618      	mov	r0, r3
 8009842:	f000 fa31 	bl	8009ca8 <stts751_resolution_set>
 8009846:	4603      	mov	r3, r0
 8009848:	2b00      	cmp	r3, #0
 800984a:	d002      	beq.n	8009852 <STTS751_TEMP_SetOutputDataRate+0x8e>
    {
      return STTS751_ERROR;
 800984c:	f04f 33ff 	mov.w	r3, #4294967295
 8009850:	e072      	b.n	8009938 <STTS751_TEMP_SetOutputDataRate+0x174>
    }
  }

  new_odr = (Odr <= 0.0625f) ? STTS751_TEMP_ODR_62mHz5
            : (Odr <= 0.125f) ? STTS751_TEMP_ODR_125mHz
 8009852:	edd7 7a00 	vldr	s15, [r7]
 8009856:	ed9f 7a3b 	vldr	s14, [pc, #236]	; 8009944 <STTS751_TEMP_SetOutputDataRate+0x180>
 800985a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800985e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009862:	d801      	bhi.n	8009868 <STTS751_TEMP_SetOutputDataRate+0xa4>
 8009864:	2300      	movs	r3, #0
 8009866:	e058      	b.n	800991a <STTS751_TEMP_SetOutputDataRate+0x156>
 8009868:	edd7 7a00 	vldr	s15, [r7]
 800986c:	eeb4 7a00 	vmov.f32	s14, #64	; 0x3e000000  0.125
 8009870:	eef4 7ac7 	vcmpe.f32	s15, s14
 8009874:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009878:	d801      	bhi.n	800987e <STTS751_TEMP_SetOutputDataRate+0xba>
 800987a:	2301      	movs	r3, #1
 800987c:	e04d      	b.n	800991a <STTS751_TEMP_SetOutputDataRate+0x156>
 800987e:	edd7 7a00 	vldr	s15, [r7]
 8009882:	eeb5 7a00 	vmov.f32	s14, #80	; 0x3e800000  0.250
 8009886:	eef4 7ac7 	vcmpe.f32	s15, s14
 800988a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800988e:	d801      	bhi.n	8009894 <STTS751_TEMP_SetOutputDataRate+0xd0>
 8009890:	2302      	movs	r3, #2
 8009892:	e042      	b.n	800991a <STTS751_TEMP_SetOutputDataRate+0x156>
 8009894:	edd7 7a00 	vldr	s15, [r7]
 8009898:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800989c:	eef4 7ac7 	vcmpe.f32	s15, s14
 80098a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80098a4:	d801      	bhi.n	80098aa <STTS751_TEMP_SetOutputDataRate+0xe6>
 80098a6:	2303      	movs	r3, #3
 80098a8:	e037      	b.n	800991a <STTS751_TEMP_SetOutputDataRate+0x156>
 80098aa:	edd7 7a00 	vldr	s15, [r7]
 80098ae:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80098b2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80098b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80098ba:	d801      	bhi.n	80098c0 <STTS751_TEMP_SetOutputDataRate+0xfc>
 80098bc:	2304      	movs	r3, #4
 80098be:	e02c      	b.n	800991a <STTS751_TEMP_SetOutputDataRate+0x156>
 80098c0:	edd7 7a00 	vldr	s15, [r7]
 80098c4:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 80098c8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80098cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80098d0:	d801      	bhi.n	80098d6 <STTS751_TEMP_SetOutputDataRate+0x112>
 80098d2:	2305      	movs	r3, #5
 80098d4:	e021      	b.n	800991a <STTS751_TEMP_SetOutputDataRate+0x156>
 80098d6:	edd7 7a00 	vldr	s15, [r7]
 80098da:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 80098de:	eef4 7ac7 	vcmpe.f32	s15, s14
 80098e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80098e6:	d801      	bhi.n	80098ec <STTS751_TEMP_SetOutputDataRate+0x128>
 80098e8:	2306      	movs	r3, #6
 80098ea:	e016      	b.n	800991a <STTS751_TEMP_SetOutputDataRate+0x156>
 80098ec:	edd7 7a00 	vldr	s15, [r7]
 80098f0:	eeb2 7a00 	vmov.f32	s14, #32	; 0x41000000  8.0
 80098f4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80098f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80098fc:	d801      	bhi.n	8009902 <STTS751_TEMP_SetOutputDataRate+0x13e>
 80098fe:	2307      	movs	r3, #7
 8009900:	e00b      	b.n	800991a <STTS751_TEMP_SetOutputDataRate+0x156>
 8009902:	edd7 7a00 	vldr	s15, [r7]
 8009906:	eeb3 7a00 	vmov.f32	s14, #48	; 0x41800000  16.0
 800990a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800990e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009912:	d801      	bhi.n	8009918 <STTS751_TEMP_SetOutputDataRate+0x154>
 8009914:	2308      	movs	r3, #8
 8009916:	e000      	b.n	800991a <STTS751_TEMP_SetOutputDataRate+0x156>
 8009918:	2309      	movs	r3, #9
  new_odr = (Odr <= 0.0625f) ? STTS751_TEMP_ODR_62mHz5
 800991a:	73fb      	strb	r3, [r7, #15]
            : (Odr <= 4.0f) ? STTS751_TEMP_ODR_4Hz
            : (Odr <= 8.0f) ? STTS751_TEMP_ODR_8Hz
            : (Odr <= 16.0f) ? STTS751_TEMP_ODR_16Hz
            :                    STTS751_TEMP_ODR_32Hz;

  if (stts751_temp_data_rate_set(&(pObj->Ctx), new_odr) != STTS751_OK)
 800991c:	687b      	ldr	r3, [r7, #4]
 800991e:	3320      	adds	r3, #32
 8009920:	7bfa      	ldrb	r2, [r7, #15]
 8009922:	4611      	mov	r1, r2
 8009924:	4618      	mov	r0, r3
 8009926:	f000 f8e9 	bl	8009afc <stts751_temp_data_rate_set>
 800992a:	4603      	mov	r3, r0
 800992c:	2b00      	cmp	r3, #0
 800992e:	d002      	beq.n	8009936 <STTS751_TEMP_SetOutputDataRate+0x172>
  {
    return STTS751_ERROR;
 8009930:	f04f 33ff 	mov.w	r3, #4294967295
 8009934:	e000      	b.n	8009938 <STTS751_TEMP_SetOutputDataRate+0x174>
  }

  return STTS751_OK;
 8009936:	2300      	movs	r3, #0
}
 8009938:	4618      	mov	r0, r3
 800993a:	3710      	adds	r7, #16
 800993c:	46bd      	mov	sp, r7
 800993e:	bd80      	pop	{r7, pc}
 8009940:	42000000 	.word	0x42000000
 8009944:	3d800000 	.word	0x3d800000

08009948 <STTS751_TEMP_GetTemperature>:
  * @param  pObj the device pObj
  * @param  Value pointer where the temperature value is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t STTS751_TEMP_GetTemperature(STTS751_Object_t *pObj, float *Value)
{
 8009948:	b580      	push	{r7, lr}
 800994a:	b084      	sub	sp, #16
 800994c:	af00      	add	r7, sp, #0
 800994e:	6078      	str	r0, [r7, #4]
 8009950:	6039      	str	r1, [r7, #0]
  int16_t raw_value;

  /* Get the temperature */
  if (stts751_temperature_raw_get(&(pObj->Ctx), &raw_value) != STTS751_OK)
 8009952:	687b      	ldr	r3, [r7, #4]
 8009954:	3320      	adds	r3, #32
 8009956:	f107 020e 	add.w	r2, r7, #14
 800995a:	4611      	mov	r1, r2
 800995c:	4618      	mov	r0, r3
 800995e:	f000 fa01 	bl	8009d64 <stts751_temperature_raw_get>
 8009962:	4603      	mov	r3, r0
 8009964:	2b00      	cmp	r3, #0
 8009966:	d002      	beq.n	800996e <STTS751_TEMP_GetTemperature+0x26>
  {
    return STTS751_ERROR;
 8009968:	f04f 33ff 	mov.w	r3, #4294967295
 800996c:	e00a      	b.n	8009984 <STTS751_TEMP_GetTemperature+0x3c>
  }

  *Value = stts751_from_lsb_to_celsius(raw_value);
 800996e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8009972:	4618      	mov	r0, r3
 8009974:	f000 f8a8 	bl	8009ac8 <stts751_from_lsb_to_celsius>
 8009978:	eef0 7a40 	vmov.f32	s15, s0
 800997c:	683b      	ldr	r3, [r7, #0]
 800997e:	edc3 7a00 	vstr	s15, [r3]

  return STTS751_OK;
 8009982:	2300      	movs	r3, #0
}
 8009984:	4618      	mov	r0, r3
 8009986:	3710      	adds	r7, #16
 8009988:	46bd      	mov	sp, r7
 800998a:	bd80      	pop	{r7, pc}

0800998c <ReadRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t ReadRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 800998c:	b590      	push	{r4, r7, lr}
 800998e:	b089      	sub	sp, #36	; 0x24
 8009990:	af00      	add	r7, sp, #0
 8009992:	60f8      	str	r0, [r7, #12]
 8009994:	607a      	str	r2, [r7, #4]
 8009996:	461a      	mov	r2, r3
 8009998:	460b      	mov	r3, r1
 800999a:	72fb      	strb	r3, [r7, #11]
 800999c:	4613      	mov	r3, r2
 800999e:	813b      	strh	r3, [r7, #8]
  uint16_t i;
  int32_t ret = STTS751_OK;
 80099a0:	2300      	movs	r3, #0
 80099a2:	61bb      	str	r3, [r7, #24]
  STTS751_Object_t *pObj = (STTS751_Object_t *)Handle;
 80099a4:	68fb      	ldr	r3, [r7, #12]
 80099a6:	617b      	str	r3, [r7, #20]

  if (pObj->IO.BusType == (uint32_t)STTS751_I2C_BUS) /* I2C */
 80099a8:	697b      	ldr	r3, [r7, #20]
 80099aa:	689b      	ldr	r3, [r3, #8]
 80099ac:	2b00      	cmp	r3, #0
 80099ae:	d11f      	bne.n	80099f0 <ReadRegWrap+0x64>
  {
    for (i = 0; i < Length; i++)
 80099b0:	2300      	movs	r3, #0
 80099b2:	83fb      	strh	r3, [r7, #30]
 80099b4:	e018      	b.n	80099e8 <ReadRegWrap+0x5c>
    {
      ret = pObj->IO.ReadReg(pObj->IO.Address, (Reg + i), &pData[i], 1);
 80099b6:	697b      	ldr	r3, [r7, #20]
 80099b8:	695c      	ldr	r4, [r3, #20]
 80099ba:	697b      	ldr	r3, [r7, #20]
 80099bc:	7b1b      	ldrb	r3, [r3, #12]
 80099be:	b298      	uxth	r0, r3
 80099c0:	7afb      	ldrb	r3, [r7, #11]
 80099c2:	b29a      	uxth	r2, r3
 80099c4:	8bfb      	ldrh	r3, [r7, #30]
 80099c6:	4413      	add	r3, r2
 80099c8:	b299      	uxth	r1, r3
 80099ca:	8bfb      	ldrh	r3, [r7, #30]
 80099cc:	687a      	ldr	r2, [r7, #4]
 80099ce:	441a      	add	r2, r3
 80099d0:	2301      	movs	r3, #1
 80099d2:	47a0      	blx	r4
 80099d4:	61b8      	str	r0, [r7, #24]
      if (ret != STTS751_OK)
 80099d6:	69bb      	ldr	r3, [r7, #24]
 80099d8:	2b00      	cmp	r3, #0
 80099da:	d002      	beq.n	80099e2 <ReadRegWrap+0x56>
      {
        return STTS751_ERROR;
 80099dc:	f04f 33ff 	mov.w	r3, #4294967295
 80099e0:	e007      	b.n	80099f2 <ReadRegWrap+0x66>
    for (i = 0; i < Length; i++)
 80099e2:	8bfb      	ldrh	r3, [r7, #30]
 80099e4:	3301      	adds	r3, #1
 80099e6:	83fb      	strh	r3, [r7, #30]
 80099e8:	8bfa      	ldrh	r2, [r7, #30]
 80099ea:	893b      	ldrh	r3, [r7, #8]
 80099ec:	429a      	cmp	r2, r3
 80099ee:	d3e2      	bcc.n	80099b6 <ReadRegWrap+0x2a>
      }
    }
  }

  return ret;
 80099f0:	69bb      	ldr	r3, [r7, #24]
}
 80099f2:	4618      	mov	r0, r3
 80099f4:	3724      	adds	r7, #36	; 0x24
 80099f6:	46bd      	mov	sp, r7
 80099f8:	bd90      	pop	{r4, r7, pc}

080099fa <WriteRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t WriteRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 80099fa:	b590      	push	{r4, r7, lr}
 80099fc:	b089      	sub	sp, #36	; 0x24
 80099fe:	af00      	add	r7, sp, #0
 8009a00:	60f8      	str	r0, [r7, #12]
 8009a02:	607a      	str	r2, [r7, #4]
 8009a04:	461a      	mov	r2, r3
 8009a06:	460b      	mov	r3, r1
 8009a08:	72fb      	strb	r3, [r7, #11]
 8009a0a:	4613      	mov	r3, r2
 8009a0c:	813b      	strh	r3, [r7, #8]
  uint16_t i;
  int32_t ret = STTS751_OK;
 8009a0e:	2300      	movs	r3, #0
 8009a10:	61bb      	str	r3, [r7, #24]
  STTS751_Object_t *pObj = (STTS751_Object_t *)Handle;
 8009a12:	68fb      	ldr	r3, [r7, #12]
 8009a14:	617b      	str	r3, [r7, #20]

  if (pObj->IO.BusType == (uint32_t)STTS751_I2C_BUS) /* I2C */
 8009a16:	697b      	ldr	r3, [r7, #20]
 8009a18:	689b      	ldr	r3, [r3, #8]
 8009a1a:	2b00      	cmp	r3, #0
 8009a1c:	d11f      	bne.n	8009a5e <WriteRegWrap+0x64>
  {
    for (i = 0; i < Length; i++)
 8009a1e:	2300      	movs	r3, #0
 8009a20:	83fb      	strh	r3, [r7, #30]
 8009a22:	e018      	b.n	8009a56 <WriteRegWrap+0x5c>
    {
      ret = pObj->IO.WriteReg(pObj->IO.Address, (Reg + i), &pData[i], 1);
 8009a24:	697b      	ldr	r3, [r7, #20]
 8009a26:	691c      	ldr	r4, [r3, #16]
 8009a28:	697b      	ldr	r3, [r7, #20]
 8009a2a:	7b1b      	ldrb	r3, [r3, #12]
 8009a2c:	b298      	uxth	r0, r3
 8009a2e:	7afb      	ldrb	r3, [r7, #11]
 8009a30:	b29a      	uxth	r2, r3
 8009a32:	8bfb      	ldrh	r3, [r7, #30]
 8009a34:	4413      	add	r3, r2
 8009a36:	b299      	uxth	r1, r3
 8009a38:	8bfb      	ldrh	r3, [r7, #30]
 8009a3a:	687a      	ldr	r2, [r7, #4]
 8009a3c:	441a      	add	r2, r3
 8009a3e:	2301      	movs	r3, #1
 8009a40:	47a0      	blx	r4
 8009a42:	61b8      	str	r0, [r7, #24]
      if (ret != STTS751_OK)
 8009a44:	69bb      	ldr	r3, [r7, #24]
 8009a46:	2b00      	cmp	r3, #0
 8009a48:	d002      	beq.n	8009a50 <WriteRegWrap+0x56>
      {
        return STTS751_ERROR;
 8009a4a:	f04f 33ff 	mov.w	r3, #4294967295
 8009a4e:	e007      	b.n	8009a60 <WriteRegWrap+0x66>
    for (i = 0; i < Length; i++)
 8009a50:	8bfb      	ldrh	r3, [r7, #30]
 8009a52:	3301      	adds	r3, #1
 8009a54:	83fb      	strh	r3, [r7, #30]
 8009a56:	8bfa      	ldrh	r2, [r7, #30]
 8009a58:	893b      	ldrh	r3, [r7, #8]
 8009a5a:	429a      	cmp	r2, r3
 8009a5c:	d3e2      	bcc.n	8009a24 <WriteRegWrap+0x2a>
      }
    }
  }

  return ret;
 8009a5e:	69bb      	ldr	r3, [r7, #24]
}
 8009a60:	4618      	mov	r0, r3
 8009a62:	3724      	adds	r7, #36	; 0x24
 8009a64:	46bd      	mov	sp, r7
 8009a66:	bd90      	pop	{r4, r7, pc}

08009a68 <stts751_read_reg>:
  *
  */
int32_t stts751_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                         uint8_t *data,
                         uint16_t len)
{
 8009a68:	b590      	push	{r4, r7, lr}
 8009a6a:	b087      	sub	sp, #28
 8009a6c:	af00      	add	r7, sp, #0
 8009a6e:	60f8      	str	r0, [r7, #12]
 8009a70:	607a      	str	r2, [r7, #4]
 8009a72:	461a      	mov	r2, r3
 8009a74:	460b      	mov	r3, r1
 8009a76:	72fb      	strb	r3, [r7, #11]
 8009a78:	4613      	mov	r3, r2
 8009a7a:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8009a7c:	68fb      	ldr	r3, [r7, #12]
 8009a7e:	685c      	ldr	r4, [r3, #4]
 8009a80:	68fb      	ldr	r3, [r7, #12]
 8009a82:	68d8      	ldr	r0, [r3, #12]
 8009a84:	893b      	ldrh	r3, [r7, #8]
 8009a86:	7af9      	ldrb	r1, [r7, #11]
 8009a88:	687a      	ldr	r2, [r7, #4]
 8009a8a:	47a0      	blx	r4
 8009a8c:	6178      	str	r0, [r7, #20]

  return ret;
 8009a8e:	697b      	ldr	r3, [r7, #20]
}
 8009a90:	4618      	mov	r0, r3
 8009a92:	371c      	adds	r7, #28
 8009a94:	46bd      	mov	sp, r7
 8009a96:	bd90      	pop	{r4, r7, pc}

08009a98 <stts751_write_reg>:
  *
  */
int32_t stts751_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                          uint8_t *data,
                          uint16_t len)
{
 8009a98:	b590      	push	{r4, r7, lr}
 8009a9a:	b087      	sub	sp, #28
 8009a9c:	af00      	add	r7, sp, #0
 8009a9e:	60f8      	str	r0, [r7, #12]
 8009aa0:	607a      	str	r2, [r7, #4]
 8009aa2:	461a      	mov	r2, r3
 8009aa4:	460b      	mov	r3, r1
 8009aa6:	72fb      	strb	r3, [r7, #11]
 8009aa8:	4613      	mov	r3, r2
 8009aaa:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8009aac:	68fb      	ldr	r3, [r7, #12]
 8009aae:	681c      	ldr	r4, [r3, #0]
 8009ab0:	68fb      	ldr	r3, [r7, #12]
 8009ab2:	68d8      	ldr	r0, [r3, #12]
 8009ab4:	893b      	ldrh	r3, [r7, #8]
 8009ab6:	7af9      	ldrb	r1, [r7, #11]
 8009ab8:	687a      	ldr	r2, [r7, #4]
 8009aba:	47a0      	blx	r4
 8009abc:	6178      	str	r0, [r7, #20]

  return ret;
 8009abe:	697b      	ldr	r3, [r7, #20]
}
 8009ac0:	4618      	mov	r0, r3
 8009ac2:	371c      	adds	r7, #28
 8009ac4:	46bd      	mov	sp, r7
 8009ac6:	bd90      	pop	{r4, r7, pc}

08009ac8 <stts751_from_lsb_to_celsius>:
  * @{
  *
  */

float_t stts751_from_lsb_to_celsius(int16_t lsb)
{
 8009ac8:	b480      	push	{r7}
 8009aca:	b083      	sub	sp, #12
 8009acc:	af00      	add	r7, sp, #0
 8009ace:	4603      	mov	r3, r0
 8009ad0:	80fb      	strh	r3, [r7, #6]
  return ((float_t)lsb) / 256.0f;
 8009ad2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8009ad6:	ee07 3a90 	vmov	s15, r3
 8009ada:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009ade:	ed9f 7a06 	vldr	s14, [pc, #24]	; 8009af8 <stts751_from_lsb_to_celsius+0x30>
 8009ae2:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8009ae6:	eef0 7a66 	vmov.f32	s15, s13
}
 8009aea:	eeb0 0a67 	vmov.f32	s0, s15
 8009aee:	370c      	adds	r7, #12
 8009af0:	46bd      	mov	sp, r7
 8009af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009af6:	4770      	bx	lr
 8009af8:	43800000 	.word	0x43800000

08009afc <stts751_temp_data_rate_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t stts751_temp_data_rate_set(stmdev_ctx_t *ctx,
                                   stts751_odr_t val)
{
 8009afc:	b580      	push	{r7, lr}
 8009afe:	b086      	sub	sp, #24
 8009b00:	af00      	add	r7, sp, #0
 8009b02:	6078      	str	r0, [r7, #4]
 8009b04:	460b      	mov	r3, r1
 8009b06:	70fb      	strb	r3, [r7, #3]
  stts751_configuration_t configuration;
  stts751_conversion_rate_t conversion_rate;
  uint8_t dummy_value = 0xAA;
 8009b08:	23aa      	movs	r3, #170	; 0xaa
 8009b0a:	72fb      	strb	r3, [r7, #11]
  int32_t ret;

  ret = stts751_read_reg(ctx, STTS751_CONVERSION_RATE,
 8009b0c:	f107 020c 	add.w	r2, r7, #12
 8009b10:	2301      	movs	r3, #1
 8009b12:	2104      	movs	r1, #4
 8009b14:	6878      	ldr	r0, [r7, #4]
 8009b16:	f7ff ffa7 	bl	8009a68 <stts751_read_reg>
 8009b1a:	6178      	str	r0, [r7, #20]
                         (uint8_t *)&conversion_rate, 1);

  if (ret == 0)
 8009b1c:	697b      	ldr	r3, [r7, #20]
 8009b1e:	2b00      	cmp	r3, #0
 8009b20:	d10f      	bne.n	8009b42 <stts751_temp_data_rate_set+0x46>
  {
    conversion_rate.conv = (uint8_t)val & 0x0FU;
 8009b22:	78fb      	ldrb	r3, [r7, #3]
 8009b24:	f003 030f 	and.w	r3, r3, #15
 8009b28:	b2da      	uxtb	r2, r3
 8009b2a:	7b3b      	ldrb	r3, [r7, #12]
 8009b2c:	f362 0303 	bfi	r3, r2, #0, #4
 8009b30:	733b      	strb	r3, [r7, #12]
    ret = stts751_write_reg(ctx, STTS751_CONVERSION_RATE,
 8009b32:	f107 020c 	add.w	r2, r7, #12
 8009b36:	2301      	movs	r3, #1
 8009b38:	2104      	movs	r1, #4
 8009b3a:	6878      	ldr	r0, [r7, #4]
 8009b3c:	f7ff ffac 	bl	8009a98 <stts751_write_reg>
 8009b40:	6178      	str	r0, [r7, #20]
                            (uint8_t *)&conversion_rate, 1);
  }

  if (ret == 0)
 8009b42:	697b      	ldr	r3, [r7, #20]
 8009b44:	2b00      	cmp	r3, #0
 8009b46:	d107      	bne.n	8009b58 <stts751_temp_data_rate_set+0x5c>
  {
    ret = stts751_read_reg(ctx, STTS751_CONFIGURATION,
 8009b48:	f107 0210 	add.w	r2, r7, #16
 8009b4c:	2301      	movs	r3, #1
 8009b4e:	2103      	movs	r1, #3
 8009b50:	6878      	ldr	r0, [r7, #4]
 8009b52:	f7ff ff89 	bl	8009a68 <stts751_read_reg>
 8009b56:	6178      	str	r0, [r7, #20]
                           (uint8_t *)&configuration, 1);
  }

  if (ret == 0)
 8009b58:	697b      	ldr	r3, [r7, #20]
 8009b5a:	2b00      	cmp	r3, #0
 8009b5c:	d111      	bne.n	8009b82 <stts751_temp_data_rate_set+0x86>
  {
    configuration.stop = ((uint8_t)val & 0x80U) >> 7;
 8009b5e:	78fb      	ldrb	r3, [r7, #3]
 8009b60:	09db      	lsrs	r3, r3, #7
 8009b62:	b2db      	uxtb	r3, r3
 8009b64:	f003 0301 	and.w	r3, r3, #1
 8009b68:	b2da      	uxtb	r2, r3
 8009b6a:	7c3b      	ldrb	r3, [r7, #16]
 8009b6c:	f362 1386 	bfi	r3, r2, #6, #1
 8009b70:	743b      	strb	r3, [r7, #16]
    ret = stts751_write_reg(ctx, STTS751_CONFIGURATION,
 8009b72:	f107 0210 	add.w	r2, r7, #16
 8009b76:	2301      	movs	r3, #1
 8009b78:	2103      	movs	r1, #3
 8009b7a:	6878      	ldr	r0, [r7, #4]
 8009b7c:	f7ff ff8c 	bl	8009a98 <stts751_write_reg>
 8009b80:	6178      	str	r0, [r7, #20]
                            (uint8_t *)&configuration, 1);
  }

  if ((ret == 0) && (val == STTS751_TEMP_ODR_ONE_SHOT))
 8009b82:	697b      	ldr	r3, [r7, #20]
 8009b84:	2b00      	cmp	r3, #0
 8009b86:	d10a      	bne.n	8009b9e <stts751_temp_data_rate_set+0xa2>
 8009b88:	78fb      	ldrb	r3, [r7, #3]
 8009b8a:	2b90      	cmp	r3, #144	; 0x90
 8009b8c:	d107      	bne.n	8009b9e <stts751_temp_data_rate_set+0xa2>
  {
    ret = stts751_write_reg(ctx, STTS751_ONE_SHOT, &dummy_value, 1);
 8009b8e:	f107 020b 	add.w	r2, r7, #11
 8009b92:	2301      	movs	r3, #1
 8009b94:	210f      	movs	r1, #15
 8009b96:	6878      	ldr	r0, [r7, #4]
 8009b98:	f7ff ff7e 	bl	8009a98 <stts751_write_reg>
 8009b9c:	6178      	str	r0, [r7, #20]
  }

  return ret;
 8009b9e:	697b      	ldr	r3, [r7, #20]
}
 8009ba0:	4618      	mov	r0, r3
 8009ba2:	3718      	adds	r7, #24
 8009ba4:	46bd      	mov	sp, r7
 8009ba6:	bd80      	pop	{r7, pc}

08009ba8 <stts751_temp_data_rate_get>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t stts751_temp_data_rate_get(stmdev_ctx_t *ctx,
                                   stts751_odr_t *val)
{
 8009ba8:	b580      	push	{r7, lr}
 8009baa:	b086      	sub	sp, #24
 8009bac:	af00      	add	r7, sp, #0
 8009bae:	6078      	str	r0, [r7, #4]
 8009bb0:	6039      	str	r1, [r7, #0]
  stts751_conversion_rate_t conversion_rate;
  stts751_configuration_t configuration;
  int32_t ret;

  ret = stts751_read_reg(ctx, STTS751_CONVERSION_RATE,
 8009bb2:	f107 0210 	add.w	r2, r7, #16
 8009bb6:	2301      	movs	r3, #1
 8009bb8:	2104      	movs	r1, #4
 8009bba:	6878      	ldr	r0, [r7, #4]
 8009bbc:	f7ff ff54 	bl	8009a68 <stts751_read_reg>
 8009bc0:	6178      	str	r0, [r7, #20]
                         (uint8_t *)&conversion_rate, 1);

  if (ret == 0)
 8009bc2:	697b      	ldr	r3, [r7, #20]
 8009bc4:	2b00      	cmp	r3, #0
 8009bc6:	d107      	bne.n	8009bd8 <stts751_temp_data_rate_get+0x30>
  {
    ret = stts751_read_reg(ctx, STTS751_CONFIGURATION,
 8009bc8:	f107 020c 	add.w	r2, r7, #12
 8009bcc:	2301      	movs	r3, #1
 8009bce:	2103      	movs	r1, #3
 8009bd0:	6878      	ldr	r0, [r7, #4]
 8009bd2:	f7ff ff49 	bl	8009a68 <stts751_read_reg>
 8009bd6:	6178      	str	r0, [r7, #20]
                           (uint8_t *)&configuration, 1);
  }

  switch ((configuration.stop << 7) + conversion_rate.conv)
 8009bd8:	7b3b      	ldrb	r3, [r7, #12]
 8009bda:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8009bde:	b2db      	uxtb	r3, r3
 8009be0:	01db      	lsls	r3, r3, #7
 8009be2:	7c3a      	ldrb	r2, [r7, #16]
 8009be4:	f3c2 0203 	ubfx	r2, r2, #0, #4
 8009be8:	b2d2      	uxtb	r2, r2
 8009bea:	4413      	add	r3, r2
 8009bec:	2b90      	cmp	r3, #144	; 0x90
 8009bee:	d025      	beq.n	8009c3c <stts751_temp_data_rate_get+0x94>
 8009bf0:	2b90      	cmp	r3, #144	; 0x90
 8009bf2:	dc4f      	bgt.n	8009c94 <stts751_temp_data_rate_get+0xec>
 8009bf4:	2b09      	cmp	r3, #9
 8009bf6:	dc1b      	bgt.n	8009c30 <stts751_temp_data_rate_get+0x88>
 8009bf8:	2b00      	cmp	r3, #0
 8009bfa:	db4b      	blt.n	8009c94 <stts751_temp_data_rate_get+0xec>
 8009bfc:	2b09      	cmp	r3, #9
 8009bfe:	d849      	bhi.n	8009c94 <stts751_temp_data_rate_get+0xec>
 8009c00:	a201      	add	r2, pc, #4	; (adr r2, 8009c08 <stts751_temp_data_rate_get+0x60>)
 8009c02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009c06:	bf00      	nop
 8009c08:	08009c45 	.word	0x08009c45
 8009c0c:	08009c4d 	.word	0x08009c4d
 8009c10:	08009c55 	.word	0x08009c55
 8009c14:	08009c5d 	.word	0x08009c5d
 8009c18:	08009c65 	.word	0x08009c65
 8009c1c:	08009c6d 	.word	0x08009c6d
 8009c20:	08009c75 	.word	0x08009c75
 8009c24:	08009c7d 	.word	0x08009c7d
 8009c28:	08009c85 	.word	0x08009c85
 8009c2c:	08009c8d 	.word	0x08009c8d
 8009c30:	2b80      	cmp	r3, #128	; 0x80
 8009c32:	d12f      	bne.n	8009c94 <stts751_temp_data_rate_get+0xec>
  {
    case STTS751_TEMP_ODR_OFF:
      *val = STTS751_TEMP_ODR_OFF;
 8009c34:	683b      	ldr	r3, [r7, #0]
 8009c36:	2280      	movs	r2, #128	; 0x80
 8009c38:	701a      	strb	r2, [r3, #0]
      break;
 8009c3a:	e02f      	b.n	8009c9c <stts751_temp_data_rate_get+0xf4>

    case STTS751_TEMP_ODR_ONE_SHOT:
      *val = STTS751_TEMP_ODR_ONE_SHOT;
 8009c3c:	683b      	ldr	r3, [r7, #0]
 8009c3e:	2290      	movs	r2, #144	; 0x90
 8009c40:	701a      	strb	r2, [r3, #0]
      break;
 8009c42:	e02b      	b.n	8009c9c <stts751_temp_data_rate_get+0xf4>

    case STTS751_TEMP_ODR_62mHz5:
      *val = STTS751_TEMP_ODR_62mHz5;
 8009c44:	683b      	ldr	r3, [r7, #0]
 8009c46:	2200      	movs	r2, #0
 8009c48:	701a      	strb	r2, [r3, #0]
      break;
 8009c4a:	e027      	b.n	8009c9c <stts751_temp_data_rate_get+0xf4>

    case STTS751_TEMP_ODR_125mHz:
      *val = STTS751_TEMP_ODR_125mHz;
 8009c4c:	683b      	ldr	r3, [r7, #0]
 8009c4e:	2201      	movs	r2, #1
 8009c50:	701a      	strb	r2, [r3, #0]
      break;
 8009c52:	e023      	b.n	8009c9c <stts751_temp_data_rate_get+0xf4>

    case STTS751_TEMP_ODR_250mHz:
      *val = STTS751_TEMP_ODR_250mHz;
 8009c54:	683b      	ldr	r3, [r7, #0]
 8009c56:	2202      	movs	r2, #2
 8009c58:	701a      	strb	r2, [r3, #0]
      break;
 8009c5a:	e01f      	b.n	8009c9c <stts751_temp_data_rate_get+0xf4>

    case STTS751_TEMP_ODR_500mHz:
      *val = STTS751_TEMP_ODR_500mHz;
 8009c5c:	683b      	ldr	r3, [r7, #0]
 8009c5e:	2203      	movs	r2, #3
 8009c60:	701a      	strb	r2, [r3, #0]
      break;
 8009c62:	e01b      	b.n	8009c9c <stts751_temp_data_rate_get+0xf4>

    case STTS751_TEMP_ODR_1Hz:
      *val = STTS751_TEMP_ODR_1Hz;
 8009c64:	683b      	ldr	r3, [r7, #0]
 8009c66:	2204      	movs	r2, #4
 8009c68:	701a      	strb	r2, [r3, #0]
      break;
 8009c6a:	e017      	b.n	8009c9c <stts751_temp_data_rate_get+0xf4>

    case STTS751_TEMP_ODR_2Hz:
      *val = STTS751_TEMP_ODR_2Hz;
 8009c6c:	683b      	ldr	r3, [r7, #0]
 8009c6e:	2205      	movs	r2, #5
 8009c70:	701a      	strb	r2, [r3, #0]
      break;
 8009c72:	e013      	b.n	8009c9c <stts751_temp_data_rate_get+0xf4>

    case STTS751_TEMP_ODR_4Hz:
      *val = STTS751_TEMP_ODR_4Hz;
 8009c74:	683b      	ldr	r3, [r7, #0]
 8009c76:	2206      	movs	r2, #6
 8009c78:	701a      	strb	r2, [r3, #0]
      break;
 8009c7a:	e00f      	b.n	8009c9c <stts751_temp_data_rate_get+0xf4>

    case STTS751_TEMP_ODR_8Hz:
      *val = STTS751_TEMP_ODR_8Hz;
 8009c7c:	683b      	ldr	r3, [r7, #0]
 8009c7e:	2207      	movs	r2, #7
 8009c80:	701a      	strb	r2, [r3, #0]
      break;
 8009c82:	e00b      	b.n	8009c9c <stts751_temp_data_rate_get+0xf4>

    case STTS751_TEMP_ODR_16Hz:
      *val = STTS751_TEMP_ODR_16Hz;
 8009c84:	683b      	ldr	r3, [r7, #0]
 8009c86:	2208      	movs	r2, #8
 8009c88:	701a      	strb	r2, [r3, #0]
      break;
 8009c8a:	e007      	b.n	8009c9c <stts751_temp_data_rate_get+0xf4>

    case STTS751_TEMP_ODR_32Hz:
      *val = STTS751_TEMP_ODR_32Hz;
 8009c8c:	683b      	ldr	r3, [r7, #0]
 8009c8e:	2209      	movs	r2, #9
 8009c90:	701a      	strb	r2, [r3, #0]
      break;
 8009c92:	e003      	b.n	8009c9c <stts751_temp_data_rate_get+0xf4>

    default:
      *val = STTS751_TEMP_ODR_OFF;
 8009c94:	683b      	ldr	r3, [r7, #0]
 8009c96:	2280      	movs	r2, #128	; 0x80
 8009c98:	701a      	strb	r2, [r3, #0]
      break;
 8009c9a:	bf00      	nop
  }

  return ret;
 8009c9c:	697b      	ldr	r3, [r7, #20]
}
 8009c9e:	4618      	mov	r0, r3
 8009ca0:	3718      	adds	r7, #24
 8009ca2:	46bd      	mov	sp, r7
 8009ca4:	bd80      	pop	{r7, pc}
 8009ca6:	bf00      	nop

08009ca8 <stts751_resolution_set>:
  * @param  val      change the values of tres in reg CONFIGURATION
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t stts751_resolution_set(stmdev_ctx_t *ctx, stts751_tres_t val)
{
 8009ca8:	b580      	push	{r7, lr}
 8009caa:	b084      	sub	sp, #16
 8009cac:	af00      	add	r7, sp, #0
 8009cae:	6078      	str	r0, [r7, #4]
 8009cb0:	460b      	mov	r3, r1
 8009cb2:	70fb      	strb	r3, [r7, #3]
  stts751_configuration_t reg;
  int32_t ret;

  ret = stts751_read_reg(ctx, STTS751_CONFIGURATION, (uint8_t *) &reg, 1);
 8009cb4:	f107 0208 	add.w	r2, r7, #8
 8009cb8:	2301      	movs	r3, #1
 8009cba:	2103      	movs	r1, #3
 8009cbc:	6878      	ldr	r0, [r7, #4]
 8009cbe:	f7ff fed3 	bl	8009a68 <stts751_read_reg>
 8009cc2:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8009cc4:	68fb      	ldr	r3, [r7, #12]
 8009cc6:	2b00      	cmp	r3, #0
 8009cc8:	d10f      	bne.n	8009cea <stts751_resolution_set+0x42>
  {
    reg.tres = (uint8_t) val;
 8009cca:	78fb      	ldrb	r3, [r7, #3]
 8009ccc:	f003 0303 	and.w	r3, r3, #3
 8009cd0:	b2da      	uxtb	r2, r3
 8009cd2:	7a3b      	ldrb	r3, [r7, #8]
 8009cd4:	f362 0383 	bfi	r3, r2, #2, #2
 8009cd8:	723b      	strb	r3, [r7, #8]
    ret = stts751_write_reg(ctx, STTS751_CONFIGURATION, (uint8_t *) &reg, 1);
 8009cda:	f107 0208 	add.w	r2, r7, #8
 8009cde:	2301      	movs	r3, #1
 8009ce0:	2103      	movs	r1, #3
 8009ce2:	6878      	ldr	r0, [r7, #4]
 8009ce4:	f7ff fed8 	bl	8009a98 <stts751_write_reg>
 8009ce8:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8009cea:	68fb      	ldr	r3, [r7, #12]
}
 8009cec:	4618      	mov	r0, r3
 8009cee:	3710      	adds	r7, #16
 8009cf0:	46bd      	mov	sp, r7
 8009cf2:	bd80      	pop	{r7, pc}

08009cf4 <stts751_resolution_get>:
  * @param  val      Get the values of tres in reg CONFIGURATION
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t stts751_resolution_get(stmdev_ctx_t *ctx, stts751_tres_t *val)
{
 8009cf4:	b580      	push	{r7, lr}
 8009cf6:	b084      	sub	sp, #16
 8009cf8:	af00      	add	r7, sp, #0
 8009cfa:	6078      	str	r0, [r7, #4]
 8009cfc:	6039      	str	r1, [r7, #0]
  stts751_configuration_t reg;
  int32_t ret;

  ret = stts751_read_reg(ctx, STTS751_CONFIGURATION, (uint8_t *) &reg, 1);
 8009cfe:	f107 0208 	add.w	r2, r7, #8
 8009d02:	2301      	movs	r3, #1
 8009d04:	2103      	movs	r1, #3
 8009d06:	6878      	ldr	r0, [r7, #4]
 8009d08:	f7ff feae 	bl	8009a68 <stts751_read_reg>
 8009d0c:	60f8      	str	r0, [r7, #12]

  switch (reg.tres)
 8009d0e:	7a3b      	ldrb	r3, [r7, #8]
 8009d10:	f3c3 0381 	ubfx	r3, r3, #2, #2
 8009d14:	b2db      	uxtb	r3, r3
 8009d16:	2b03      	cmp	r3, #3
 8009d18:	d81a      	bhi.n	8009d50 <stts751_resolution_get+0x5c>
 8009d1a:	a201      	add	r2, pc, #4	; (adr r2, 8009d20 <stts751_resolution_get+0x2c>)
 8009d1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009d20:	08009d39 	.word	0x08009d39
 8009d24:	08009d41 	.word	0x08009d41
 8009d28:	08009d31 	.word	0x08009d31
 8009d2c:	08009d49 	.word	0x08009d49
  {
    case STTS751_9bit:
      *val = STTS751_9bit;
 8009d30:	683b      	ldr	r3, [r7, #0]
 8009d32:	2202      	movs	r2, #2
 8009d34:	701a      	strb	r2, [r3, #0]
      break;
 8009d36:	e00f      	b.n	8009d58 <stts751_resolution_get+0x64>

    case STTS751_10bit:
      *val = STTS751_10bit;
 8009d38:	683b      	ldr	r3, [r7, #0]
 8009d3a:	2200      	movs	r2, #0
 8009d3c:	701a      	strb	r2, [r3, #0]
      break;
 8009d3e:	e00b      	b.n	8009d58 <stts751_resolution_get+0x64>

    case STTS751_11bit:
      *val = STTS751_11bit;
 8009d40:	683b      	ldr	r3, [r7, #0]
 8009d42:	2201      	movs	r2, #1
 8009d44:	701a      	strb	r2, [r3, #0]
      break;
 8009d46:	e007      	b.n	8009d58 <stts751_resolution_get+0x64>

    case STTS751_12bit:
      *val = STTS751_12bit;
 8009d48:	683b      	ldr	r3, [r7, #0]
 8009d4a:	2203      	movs	r2, #3
 8009d4c:	701a      	strb	r2, [r3, #0]
      break;
 8009d4e:	e003      	b.n	8009d58 <stts751_resolution_get+0x64>

    default:
      *val = STTS751_9bit;
 8009d50:	683b      	ldr	r3, [r7, #0]
 8009d52:	2202      	movs	r2, #2
 8009d54:	701a      	strb	r2, [r3, #0]
      break;
 8009d56:	bf00      	nop
  }

  return ret;
 8009d58:	68fb      	ldr	r3, [r7, #12]
}
 8009d5a:	4618      	mov	r0, r3
 8009d5c:	3710      	adds	r7, #16
 8009d5e:	46bd      	mov	sp, r7
 8009d60:	bd80      	pop	{r7, pc}
 8009d62:	bf00      	nop

08009d64 <stts751_temperature_raw_get>:
  * @param  buff     buffer that stores data read
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t stts751_temperature_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 8009d64:	b580      	push	{r7, lr}
 8009d66:	b084      	sub	sp, #16
 8009d68:	af00      	add	r7, sp, #0
 8009d6a:	6078      	str	r0, [r7, #4]
 8009d6c:	6039      	str	r1, [r7, #0]
  uint8_t buff[2];
  int32_t ret;

  ret = stts751_read_reg(ctx, STTS751_TEMPERATURE_HIGH,
 8009d6e:	f107 0308 	add.w	r3, r7, #8
 8009d72:	1c5a      	adds	r2, r3, #1
 8009d74:	2301      	movs	r3, #1
 8009d76:	2100      	movs	r1, #0
 8009d78:	6878      	ldr	r0, [r7, #4]
 8009d7a:	f7ff fe75 	bl	8009a68 <stts751_read_reg>
 8009d7e:	60f8      	str	r0, [r7, #12]
                         (uint8_t *)&buff[1], 1);

  if (ret == 0)
 8009d80:	68fb      	ldr	r3, [r7, #12]
 8009d82:	2b00      	cmp	r3, #0
 8009d84:	d118      	bne.n	8009db8 <stts751_temperature_raw_get+0x54>
  {
    ret = stts751_read_reg(ctx, STTS751_TEMPERATURE_LOW,
 8009d86:	f107 0208 	add.w	r2, r7, #8
 8009d8a:	2301      	movs	r3, #1
 8009d8c:	2102      	movs	r1, #2
 8009d8e:	6878      	ldr	r0, [r7, #4]
 8009d90:	f7ff fe6a 	bl	8009a68 <stts751_read_reg>
 8009d94:	60f8      	str	r0, [r7, #12]
                           &buff[0], 1);
    *val = (int16_t)buff[1];
 8009d96:	7a7b      	ldrb	r3, [r7, #9]
 8009d98:	b21a      	sxth	r2, r3
 8009d9a:	683b      	ldr	r3, [r7, #0]
 8009d9c:	801a      	strh	r2, [r3, #0]
    *val = (*val * 256) + (int16_t)buff[0];
 8009d9e:	683b      	ldr	r3, [r7, #0]
 8009da0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8009da4:	b29b      	uxth	r3, r3
 8009da6:	021b      	lsls	r3, r3, #8
 8009da8:	b29a      	uxth	r2, r3
 8009daa:	7a3b      	ldrb	r3, [r7, #8]
 8009dac:	b29b      	uxth	r3, r3
 8009dae:	4413      	add	r3, r2
 8009db0:	b29b      	uxth	r3, r3
 8009db2:	b21a      	sxth	r2, r3
 8009db4:	683b      	ldr	r3, [r7, #0]
 8009db6:	801a      	strh	r2, [r3, #0]
  }

  return ret;
 8009db8:	68fb      	ldr	r3, [r7, #12]
}
 8009dba:	4618      	mov	r0, r3
 8009dbc:	3710      	adds	r7, #16
 8009dbe:	46bd      	mov	sp, r7
 8009dc0:	bd80      	pop	{r7, pc}

08009dc2 <stts751_pin_event_route_set>:
  * @param  val      set mask1 bit in register CONFIGURATION.
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t stts751_pin_event_route_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8009dc2:	b580      	push	{r7, lr}
 8009dc4:	b084      	sub	sp, #16
 8009dc6:	af00      	add	r7, sp, #0
 8009dc8:	6078      	str	r0, [r7, #4]
 8009dca:	460b      	mov	r3, r1
 8009dcc:	70fb      	strb	r3, [r7, #3]
  stts751_configuration_t reg;
  int32_t ret;

  ret = stts751_read_reg(ctx, STTS751_CONFIGURATION, (uint8_t *)&reg, 1);
 8009dce:	f107 0208 	add.w	r2, r7, #8
 8009dd2:	2301      	movs	r3, #1
 8009dd4:	2103      	movs	r1, #3
 8009dd6:	6878      	ldr	r0, [r7, #4]
 8009dd8:	f7ff fe46 	bl	8009a68 <stts751_read_reg>
 8009ddc:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8009dde:	68fb      	ldr	r3, [r7, #12]
 8009de0:	2b00      	cmp	r3, #0
 8009de2:	d10f      	bne.n	8009e04 <stts751_pin_event_route_set+0x42>
  {
    reg.mask1 = val;
 8009de4:	78fb      	ldrb	r3, [r7, #3]
 8009de6:	f003 0301 	and.w	r3, r3, #1
 8009dea:	b2da      	uxtb	r2, r3
 8009dec:	7a3b      	ldrb	r3, [r7, #8]
 8009dee:	f362 13c7 	bfi	r3, r2, #7, #1
 8009df2:	723b      	strb	r3, [r7, #8]
    ret = stts751_write_reg(ctx, STTS751_CONFIGURATION, (uint8_t *)&reg, 1);
 8009df4:	f107 0208 	add.w	r2, r7, #8
 8009df8:	2301      	movs	r3, #1
 8009dfa:	2103      	movs	r1, #3
 8009dfc:	6878      	ldr	r0, [r7, #4]
 8009dfe:	f7ff fe4b 	bl	8009a98 <stts751_write_reg>
 8009e02:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8009e04:	68fb      	ldr	r3, [r7, #12]
}
 8009e06:	4618      	mov	r0, r3
 8009e08:	3710      	adds	r7, #16
 8009e0a:	46bd      	mov	sp, r7
 8009e0c:	bd80      	pop	{r7, pc}

08009e0e <stts751_device_id_get>:
  * @param  buff     buffer that stores data read
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t stts751_device_id_get(stmdev_ctx_t *ctx, stts751_id_t *buff)
{
 8009e0e:	b580      	push	{r7, lr}
 8009e10:	b084      	sub	sp, #16
 8009e12:	af00      	add	r7, sp, #0
 8009e14:	6078      	str	r0, [r7, #4]
 8009e16:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = stts751_read_reg(ctx, STTS751_PRODUCT_ID,
 8009e18:	683a      	ldr	r2, [r7, #0]
 8009e1a:	2301      	movs	r3, #1
 8009e1c:	21fd      	movs	r1, #253	; 0xfd
 8009e1e:	6878      	ldr	r0, [r7, #4]
 8009e20:	f7ff fe22 	bl	8009a68 <stts751_read_reg>
 8009e24:	60f8      	str	r0, [r7, #12]
                         (uint8_t *)&buff->product_id, 1);

  if (ret == 0)
 8009e26:	68fb      	ldr	r3, [r7, #12]
 8009e28:	2b00      	cmp	r3, #0
 8009e2a:	d107      	bne.n	8009e3c <stts751_device_id_get+0x2e>
  {
    ret = stts751_read_reg(ctx, STTS751_MANUFACTURER_ID,
 8009e2c:	683b      	ldr	r3, [r7, #0]
 8009e2e:	1c5a      	adds	r2, r3, #1
 8009e30:	2301      	movs	r3, #1
 8009e32:	21fe      	movs	r1, #254	; 0xfe
 8009e34:	6878      	ldr	r0, [r7, #4]
 8009e36:	f7ff fe17 	bl	8009a68 <stts751_read_reg>
 8009e3a:	60f8      	str	r0, [r7, #12]
                           (uint8_t *)&buff->manufacturer_id, 1);
  }

  if (ret == 0)
 8009e3c:	68fb      	ldr	r3, [r7, #12]
 8009e3e:	2b00      	cmp	r3, #0
 8009e40:	d107      	bne.n	8009e52 <stts751_device_id_get+0x44>
  {
    ret = stts751_read_reg(ctx, STTS751_REVISION_ID,
 8009e42:	683b      	ldr	r3, [r7, #0]
 8009e44:	1c9a      	adds	r2, r3, #2
 8009e46:	2301      	movs	r3, #1
 8009e48:	21ff      	movs	r1, #255	; 0xff
 8009e4a:	6878      	ldr	r0, [r7, #4]
 8009e4c:	f7ff fe0c 	bl	8009a68 <stts751_read_reg>
 8009e50:	60f8      	str	r0, [r7, #12]
                           (uint8_t *)&buff->revision_id, 1);
  }

  return ret;
 8009e52:	68fb      	ldr	r3, [r7, #12]
}
 8009e54:	4618      	mov	r0, r3
 8009e56:	3710      	adds	r7, #16
 8009e58:	46bd      	mov	sp, r7
 8009e5a:	bd80      	pop	{r7, pc}

08009e5c <IKS01A3_ENV_SENSOR_Init>:
  *         - ENV_TEMPERATURE and/or ENV_PRESSURE for instance 1
  *         - ENV_TEMPERATURE for instance 2
  * @retval BSP status
  */
int32_t IKS01A3_ENV_SENSOR_Init(uint32_t Instance, uint32_t Functions)
{
 8009e5c:	b580      	push	{r7, lr}
 8009e5e:	b08a      	sub	sp, #40	; 0x28
 8009e60:	af00      	add	r7, sp, #0
 8009e62:	6078      	str	r0, [r7, #4]
 8009e64:	6039      	str	r1, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
 8009e66:	2300      	movs	r3, #0
 8009e68:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t function = ENV_TEMPERATURE;
 8009e6a:	2301      	movs	r3, #1
 8009e6c:	623b      	str	r3, [r7, #32]
  uint32_t i;
  uint32_t component_functions = 0;
 8009e6e:	2300      	movs	r3, #0
 8009e70:	61bb      	str	r3, [r7, #24]
  IKS01A3_ENV_SENSOR_Capabilities_t cap;

  switch (Instance)
 8009e72:	687b      	ldr	r3, [r7, #4]
 8009e74:	2b02      	cmp	r3, #2
 8009e76:	d06e      	beq.n	8009f56 <IKS01A3_ENV_SENSOR_Init+0xfa>
 8009e78:	687b      	ldr	r3, [r7, #4]
 8009e7a:	2b02      	cmp	r3, #2
 8009e7c:	f200 809d 	bhi.w	8009fba <IKS01A3_ENV_SENSOR_Init+0x15e>
 8009e80:	687b      	ldr	r3, [r7, #4]
 8009e82:	2b00      	cmp	r3, #0
 8009e84:	d003      	beq.n	8009e8e <IKS01A3_ENV_SENSOR_Init+0x32>
 8009e86:	687b      	ldr	r3, [r7, #4]
 8009e88:	2b01      	cmp	r3, #1
 8009e8a:	d032      	beq.n	8009ef2 <IKS01A3_ENV_SENSOR_Init+0x96>
 8009e8c:	e095      	b.n	8009fba <IKS01A3_ENV_SENSOR_Init+0x15e>
  {
#if (USE_IKS01A3_ENV_SENSOR_HTS221_0 == 1)
    case IKS01A3_HTS221_0:
      if (HTS221_0_Probe(Functions) != BSP_ERROR_NONE)
 8009e8e:	6838      	ldr	r0, [r7, #0]
 8009e90:	f000 f966 	bl	800a160 <HTS221_0_Probe>
 8009e94:	4603      	mov	r3, r0
 8009e96:	2b00      	cmp	r3, #0
 8009e98:	d002      	beq.n	8009ea0 <IKS01A3_ENV_SENSOR_Init+0x44>
      {
        return BSP_ERROR_NO_INIT;
 8009e9a:	f04f 33ff 	mov.w	r3, #4294967295
 8009e9e:	e0cc      	b.n	800a03a <IKS01A3_ENV_SENSOR_Init+0x1de>
      }
      if (EnvDrv[Instance]->GetCapabilities(EnvCompObj[Instance], (void *)&cap) != BSP_ERROR_NONE)
 8009ea0:	4a68      	ldr	r2, [pc, #416]	; (800a044 <IKS01A3_ENV_SENSOR_Init+0x1e8>)
 8009ea2:	687b      	ldr	r3, [r7, #4]
 8009ea4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009ea8:	68db      	ldr	r3, [r3, #12]
 8009eaa:	4967      	ldr	r1, [pc, #412]	; (800a048 <IKS01A3_ENV_SENSOR_Init+0x1ec>)
 8009eac:	687a      	ldr	r2, [r7, #4]
 8009eae:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8009eb2:	f107 0108 	add.w	r1, r7, #8
 8009eb6:	4610      	mov	r0, r2
 8009eb8:	4798      	blx	r3
 8009eba:	4603      	mov	r3, r0
 8009ebc:	2b00      	cmp	r3, #0
 8009ebe:	d002      	beq.n	8009ec6 <IKS01A3_ENV_SENSOR_Init+0x6a>
      {
        return BSP_ERROR_UNKNOWN_COMPONENT;
 8009ec0:	f06f 0306 	mvn.w	r3, #6
 8009ec4:	e0b9      	b.n	800a03a <IKS01A3_ENV_SENSOR_Init+0x1de>
      }
      if (cap.Temperature == 1U)
 8009ec6:	7a3b      	ldrb	r3, [r7, #8]
 8009ec8:	2b01      	cmp	r3, #1
 8009eca:	d103      	bne.n	8009ed4 <IKS01A3_ENV_SENSOR_Init+0x78>
      {
        component_functions |= ENV_TEMPERATURE;
 8009ecc:	69bb      	ldr	r3, [r7, #24]
 8009ece:	f043 0301 	orr.w	r3, r3, #1
 8009ed2:	61bb      	str	r3, [r7, #24]
      }
      if (cap.Humidity == 1U)
 8009ed4:	7abb      	ldrb	r3, [r7, #10]
 8009ed6:	2b01      	cmp	r3, #1
 8009ed8:	d103      	bne.n	8009ee2 <IKS01A3_ENV_SENSOR_Init+0x86>
      {
        component_functions |= ENV_HUMIDITY;
 8009eda:	69bb      	ldr	r3, [r7, #24]
 8009edc:	f043 0304 	orr.w	r3, r3, #4
 8009ee0:	61bb      	str	r3, [r7, #24]
      }
      if (cap.Pressure == 1U)
 8009ee2:	7a7b      	ldrb	r3, [r7, #9]
 8009ee4:	2b01      	cmp	r3, #1
 8009ee6:	d16c      	bne.n	8009fc2 <IKS01A3_ENV_SENSOR_Init+0x166>
      {
        component_functions |= ENV_PRESSURE;
 8009ee8:	69bb      	ldr	r3, [r7, #24]
 8009eea:	f043 0302 	orr.w	r3, r3, #2
 8009eee:	61bb      	str	r3, [r7, #24]
      }
      break;
 8009ef0:	e067      	b.n	8009fc2 <IKS01A3_ENV_SENSOR_Init+0x166>
      break;
#endif

#if (USE_IKS01A3_ENV_SENSOR_LPS22HH_0 == 1)
    case IKS01A3_LPS22HH_0:
      if (LPS22HH_0_Probe(Functions) != BSP_ERROR_NONE)
 8009ef2:	6838      	ldr	r0, [r7, #0]
 8009ef4:	f000 f9ee 	bl	800a2d4 <LPS22HH_0_Probe>
 8009ef8:	4603      	mov	r3, r0
 8009efa:	2b00      	cmp	r3, #0
 8009efc:	d002      	beq.n	8009f04 <IKS01A3_ENV_SENSOR_Init+0xa8>
      {
        return BSP_ERROR_NO_INIT;
 8009efe:	f04f 33ff 	mov.w	r3, #4294967295
 8009f02:	e09a      	b.n	800a03a <IKS01A3_ENV_SENSOR_Init+0x1de>
      }
      if (EnvDrv[Instance]->GetCapabilities(EnvCompObj[Instance], (void *)&cap) != BSP_ERROR_NONE)
 8009f04:	4a4f      	ldr	r2, [pc, #316]	; (800a044 <IKS01A3_ENV_SENSOR_Init+0x1e8>)
 8009f06:	687b      	ldr	r3, [r7, #4]
 8009f08:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009f0c:	68db      	ldr	r3, [r3, #12]
 8009f0e:	494e      	ldr	r1, [pc, #312]	; (800a048 <IKS01A3_ENV_SENSOR_Init+0x1ec>)
 8009f10:	687a      	ldr	r2, [r7, #4]
 8009f12:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8009f16:	f107 0108 	add.w	r1, r7, #8
 8009f1a:	4610      	mov	r0, r2
 8009f1c:	4798      	blx	r3
 8009f1e:	4603      	mov	r3, r0
 8009f20:	2b00      	cmp	r3, #0
 8009f22:	d002      	beq.n	8009f2a <IKS01A3_ENV_SENSOR_Init+0xce>
      {
        return BSP_ERROR_UNKNOWN_COMPONENT;
 8009f24:	f06f 0306 	mvn.w	r3, #6
 8009f28:	e087      	b.n	800a03a <IKS01A3_ENV_SENSOR_Init+0x1de>
      }
      if (cap.Temperature == 1U)
 8009f2a:	7a3b      	ldrb	r3, [r7, #8]
 8009f2c:	2b01      	cmp	r3, #1
 8009f2e:	d103      	bne.n	8009f38 <IKS01A3_ENV_SENSOR_Init+0xdc>
      {
        component_functions |= ENV_TEMPERATURE;
 8009f30:	69bb      	ldr	r3, [r7, #24]
 8009f32:	f043 0301 	orr.w	r3, r3, #1
 8009f36:	61bb      	str	r3, [r7, #24]
      }
      if (cap.Humidity == 1U)
 8009f38:	7abb      	ldrb	r3, [r7, #10]
 8009f3a:	2b01      	cmp	r3, #1
 8009f3c:	d103      	bne.n	8009f46 <IKS01A3_ENV_SENSOR_Init+0xea>
      {
        component_functions |= ENV_HUMIDITY;
 8009f3e:	69bb      	ldr	r3, [r7, #24]
 8009f40:	f043 0304 	orr.w	r3, r3, #4
 8009f44:	61bb      	str	r3, [r7, #24]
      }
      if (cap.Pressure == 1U)
 8009f46:	7a7b      	ldrb	r3, [r7, #9]
 8009f48:	2b01      	cmp	r3, #1
 8009f4a:	d13c      	bne.n	8009fc6 <IKS01A3_ENV_SENSOR_Init+0x16a>
      {
        component_functions |= ENV_PRESSURE;
 8009f4c:	69bb      	ldr	r3, [r7, #24]
 8009f4e:	f043 0302 	orr.w	r3, r3, #2
 8009f52:	61bb      	str	r3, [r7, #24]
      }
      break;
 8009f54:	e037      	b.n	8009fc6 <IKS01A3_ENV_SENSOR_Init+0x16a>
#endif

#if (USE_IKS01A3_ENV_SENSOR_STTS751_0 == 1)
    case IKS01A3_STTS751_0:
      if (STTS751_0_Probe(Functions) != BSP_ERROR_NONE)
 8009f56:	6838      	ldr	r0, [r7, #0]
 8009f58:	f000 fa78 	bl	800a44c <STTS751_0_Probe>
 8009f5c:	4603      	mov	r3, r0
 8009f5e:	2b00      	cmp	r3, #0
 8009f60:	d002      	beq.n	8009f68 <IKS01A3_ENV_SENSOR_Init+0x10c>
      {
        return BSP_ERROR_NO_INIT;
 8009f62:	f04f 33ff 	mov.w	r3, #4294967295
 8009f66:	e068      	b.n	800a03a <IKS01A3_ENV_SENSOR_Init+0x1de>
      }
      if (EnvDrv[Instance]->GetCapabilities(EnvCompObj[Instance], (void *)&cap) != BSP_ERROR_NONE)
 8009f68:	4a36      	ldr	r2, [pc, #216]	; (800a044 <IKS01A3_ENV_SENSOR_Init+0x1e8>)
 8009f6a:	687b      	ldr	r3, [r7, #4]
 8009f6c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009f70:	68db      	ldr	r3, [r3, #12]
 8009f72:	4935      	ldr	r1, [pc, #212]	; (800a048 <IKS01A3_ENV_SENSOR_Init+0x1ec>)
 8009f74:	687a      	ldr	r2, [r7, #4]
 8009f76:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8009f7a:	f107 0108 	add.w	r1, r7, #8
 8009f7e:	4610      	mov	r0, r2
 8009f80:	4798      	blx	r3
 8009f82:	4603      	mov	r3, r0
 8009f84:	2b00      	cmp	r3, #0
 8009f86:	d002      	beq.n	8009f8e <IKS01A3_ENV_SENSOR_Init+0x132>
      {
        return BSP_ERROR_UNKNOWN_COMPONENT;
 8009f88:	f06f 0306 	mvn.w	r3, #6
 8009f8c:	e055      	b.n	800a03a <IKS01A3_ENV_SENSOR_Init+0x1de>
      }
      if (cap.Temperature == 1U)
 8009f8e:	7a3b      	ldrb	r3, [r7, #8]
 8009f90:	2b01      	cmp	r3, #1
 8009f92:	d103      	bne.n	8009f9c <IKS01A3_ENV_SENSOR_Init+0x140>
      {
        component_functions |= ENV_TEMPERATURE;
 8009f94:	69bb      	ldr	r3, [r7, #24]
 8009f96:	f043 0301 	orr.w	r3, r3, #1
 8009f9a:	61bb      	str	r3, [r7, #24]
      }
      if (cap.Humidity == 1U)
 8009f9c:	7abb      	ldrb	r3, [r7, #10]
 8009f9e:	2b01      	cmp	r3, #1
 8009fa0:	d103      	bne.n	8009faa <IKS01A3_ENV_SENSOR_Init+0x14e>
      {
        component_functions |= ENV_HUMIDITY;
 8009fa2:	69bb      	ldr	r3, [r7, #24]
 8009fa4:	f043 0304 	orr.w	r3, r3, #4
 8009fa8:	61bb      	str	r3, [r7, #24]
      }
      if (cap.Pressure == 1U)
 8009faa:	7a7b      	ldrb	r3, [r7, #9]
 8009fac:	2b01      	cmp	r3, #1
 8009fae:	d10c      	bne.n	8009fca <IKS01A3_ENV_SENSOR_Init+0x16e>
      {
        component_functions |= ENV_PRESSURE;
 8009fb0:	69bb      	ldr	r3, [r7, #24]
 8009fb2:	f043 0302 	orr.w	r3, r3, #2
 8009fb6:	61bb      	str	r3, [r7, #24]
      }
      break;
 8009fb8:	e007      	b.n	8009fca <IKS01A3_ENV_SENSOR_Init+0x16e>
      }
      break;
#endif

    default:
      ret = BSP_ERROR_WRONG_PARAM;
 8009fba:	f06f 0301 	mvn.w	r3, #1
 8009fbe:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8009fc0:	e004      	b.n	8009fcc <IKS01A3_ENV_SENSOR_Init+0x170>
      break;
 8009fc2:	bf00      	nop
 8009fc4:	e002      	b.n	8009fcc <IKS01A3_ENV_SENSOR_Init+0x170>
      break;
 8009fc6:	bf00      	nop
 8009fc8:	e000      	b.n	8009fcc <IKS01A3_ENV_SENSOR_Init+0x170>
      break;
 8009fca:	bf00      	nop
  }

  if (ret != BSP_ERROR_NONE)
 8009fcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009fce:	2b00      	cmp	r3, #0
 8009fd0:	d001      	beq.n	8009fd6 <IKS01A3_ENV_SENSOR_Init+0x17a>
  {
    return ret;
 8009fd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009fd4:	e031      	b.n	800a03a <IKS01A3_ENV_SENSOR_Init+0x1de>
  }

  for (i = 0; i < IKS01A3_ENV_FUNCTIONS_NBR; i++)
 8009fd6:	2300      	movs	r3, #0
 8009fd8:	61fb      	str	r3, [r7, #28]
 8009fda:	e02a      	b.n	800a032 <IKS01A3_ENV_SENSOR_Init+0x1d6>
  {
    if (((Functions & function) == function) && ((component_functions & function) == function))
 8009fdc:	683a      	ldr	r2, [r7, #0]
 8009fde:	6a3b      	ldr	r3, [r7, #32]
 8009fe0:	4013      	ands	r3, r2
 8009fe2:	6a3a      	ldr	r2, [r7, #32]
 8009fe4:	429a      	cmp	r2, r3
 8009fe6:	d11e      	bne.n	800a026 <IKS01A3_ENV_SENSOR_Init+0x1ca>
 8009fe8:	69ba      	ldr	r2, [r7, #24]
 8009fea:	6a3b      	ldr	r3, [r7, #32]
 8009fec:	4013      	ands	r3, r2
 8009fee:	6a3a      	ldr	r2, [r7, #32]
 8009ff0:	429a      	cmp	r2, r3
 8009ff2:	d118      	bne.n	800a026 <IKS01A3_ENV_SENSOR_Init+0x1ca>
    {
      if (EnvFuncDrv[Instance][FunctionIndex[function]]->Enable(EnvCompObj[Instance]) != BSP_ERROR_NONE)
 8009ff4:	4a15      	ldr	r2, [pc, #84]	; (800a04c <IKS01A3_ENV_SENSOR_Init+0x1f0>)
 8009ff6:	6a3b      	ldr	r3, [r7, #32]
 8009ff8:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8009ffc:	4814      	ldr	r0, [pc, #80]	; (800a050 <IKS01A3_ENV_SENSOR_Init+0x1f4>)
 8009ffe:	687a      	ldr	r2, [r7, #4]
 800a000:	4613      	mov	r3, r2
 800a002:	005b      	lsls	r3, r3, #1
 800a004:	4413      	add	r3, r2
 800a006:	440b      	add	r3, r1
 800a008:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 800a00c:	681b      	ldr	r3, [r3, #0]
 800a00e:	490e      	ldr	r1, [pc, #56]	; (800a048 <IKS01A3_ENV_SENSOR_Init+0x1ec>)
 800a010:	687a      	ldr	r2, [r7, #4]
 800a012:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800a016:	4610      	mov	r0, r2
 800a018:	4798      	blx	r3
 800a01a:	4603      	mov	r3, r0
 800a01c:	2b00      	cmp	r3, #0
 800a01e:	d002      	beq.n	800a026 <IKS01A3_ENV_SENSOR_Init+0x1ca>
      {
        return BSP_ERROR_COMPONENT_FAILURE;
 800a020:	f06f 0304 	mvn.w	r3, #4
 800a024:	e009      	b.n	800a03a <IKS01A3_ENV_SENSOR_Init+0x1de>
      }
    }
    function = function << 1;
 800a026:	6a3b      	ldr	r3, [r7, #32]
 800a028:	005b      	lsls	r3, r3, #1
 800a02a:	623b      	str	r3, [r7, #32]
  for (i = 0; i < IKS01A3_ENV_FUNCTIONS_NBR; i++)
 800a02c:	69fb      	ldr	r3, [r7, #28]
 800a02e:	3301      	adds	r3, #1
 800a030:	61fb      	str	r3, [r7, #28]
 800a032:	69fb      	ldr	r3, [r7, #28]
 800a034:	2b02      	cmp	r3, #2
 800a036:	d9d1      	bls.n	8009fdc <IKS01A3_ENV_SENSOR_Init+0x180>
  }

  return ret;
 800a038:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800a03a:	4618      	mov	r0, r3
 800a03c:	3728      	adds	r7, #40	; 0x28
 800a03e:	46bd      	mov	sp, r7
 800a040:	bd80      	pop	{r7, pc}
 800a042:	bf00      	nop
 800a044:	20000494 	.word	0x20000494
 800a048:	20000464 	.word	0x20000464
 800a04c:	2000015c 	.word	0x2000015c
 800a050:	20000470 	.word	0x20000470

0800a054 <IKS01A3_ENV_SENSOR_Enable>:
  *         - ENV_TEMPERATURE or ENV_HUMIDITY for instance 0
  *         - ENV_TEMPERATURE or ENV_PRESSURE for instance 1
  * @retval BSP status
  */
int32_t IKS01A3_ENV_SENSOR_Enable(uint32_t Instance, uint32_t Function)
{
 800a054:	b580      	push	{r7, lr}
 800a056:	b084      	sub	sp, #16
 800a058:	af00      	add	r7, sp, #0
 800a05a:	6078      	str	r0, [r7, #4]
 800a05c:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (Instance >= IKS01A3_ENV_INSTANCES_NBR)
 800a05e:	687b      	ldr	r3, [r7, #4]
 800a060:	2b02      	cmp	r3, #2
 800a062:	d903      	bls.n	800a06c <IKS01A3_ENV_SENSOR_Enable+0x18>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 800a064:	f06f 0301 	mvn.w	r3, #1
 800a068:	60fb      	str	r3, [r7, #12]
 800a06a:	e028      	b.n	800a0be <IKS01A3_ENV_SENSOR_Enable+0x6a>
  }
  else
  {
    if ((EnvCtx[Instance].Functions & Function) == Function)
 800a06c:	4a16      	ldr	r2, [pc, #88]	; (800a0c8 <IKS01A3_ENV_SENSOR_Enable+0x74>)
 800a06e:	687b      	ldr	r3, [r7, #4]
 800a070:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800a074:	683b      	ldr	r3, [r7, #0]
 800a076:	4013      	ands	r3, r2
 800a078:	683a      	ldr	r2, [r7, #0]
 800a07a:	429a      	cmp	r2, r3
 800a07c:	d11c      	bne.n	800a0b8 <IKS01A3_ENV_SENSOR_Enable+0x64>
    {
      if (EnvFuncDrv[Instance][FunctionIndex[Function]]->Enable(EnvCompObj[Instance]) != BSP_ERROR_NONE)
 800a07e:	4a13      	ldr	r2, [pc, #76]	; (800a0cc <IKS01A3_ENV_SENSOR_Enable+0x78>)
 800a080:	683b      	ldr	r3, [r7, #0]
 800a082:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800a086:	4812      	ldr	r0, [pc, #72]	; (800a0d0 <IKS01A3_ENV_SENSOR_Enable+0x7c>)
 800a088:	687a      	ldr	r2, [r7, #4]
 800a08a:	4613      	mov	r3, r2
 800a08c:	005b      	lsls	r3, r3, #1
 800a08e:	4413      	add	r3, r2
 800a090:	440b      	add	r3, r1
 800a092:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 800a096:	681b      	ldr	r3, [r3, #0]
 800a098:	490e      	ldr	r1, [pc, #56]	; (800a0d4 <IKS01A3_ENV_SENSOR_Enable+0x80>)
 800a09a:	687a      	ldr	r2, [r7, #4]
 800a09c:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800a0a0:	4610      	mov	r0, r2
 800a0a2:	4798      	blx	r3
 800a0a4:	4603      	mov	r3, r0
 800a0a6:	2b00      	cmp	r3, #0
 800a0a8:	d003      	beq.n	800a0b2 <IKS01A3_ENV_SENSOR_Enable+0x5e>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800a0aa:	f06f 0304 	mvn.w	r3, #4
 800a0ae:	60fb      	str	r3, [r7, #12]
 800a0b0:	e005      	b.n	800a0be <IKS01A3_ENV_SENSOR_Enable+0x6a>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 800a0b2:	2300      	movs	r3, #0
 800a0b4:	60fb      	str	r3, [r7, #12]
 800a0b6:	e002      	b.n	800a0be <IKS01A3_ENV_SENSOR_Enable+0x6a>
      }
    }
    else
    {
      ret = BSP_ERROR_WRONG_PARAM;
 800a0b8:	f06f 0301 	mvn.w	r3, #1
 800a0bc:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 800a0be:	68fb      	ldr	r3, [r7, #12]
}
 800a0c0:	4618      	mov	r0, r3
 800a0c2:	3710      	adds	r7, #16
 800a0c4:	46bd      	mov	sp, r7
 800a0c6:	bd80      	pop	{r7, pc}
 800a0c8:	200004a0 	.word	0x200004a0
 800a0cc:	2000015c 	.word	0x2000015c
 800a0d0:	20000470 	.word	0x20000470
 800a0d4:	20000464 	.word	0x20000464

0800a0d8 <IKS01A3_ENV_SENSOR_GetValue>:
  *         - ENV_TEMPERATURE or ENV_PRESSURE for instance 1
  * @param  Value pointer to environmental sensor value
  * @retval BSP status
  */
int32_t IKS01A3_ENV_SENSOR_GetValue(uint32_t Instance, uint32_t Function, float *Value)
{
 800a0d8:	b580      	push	{r7, lr}
 800a0da:	b086      	sub	sp, #24
 800a0dc:	af00      	add	r7, sp, #0
 800a0de:	60f8      	str	r0, [r7, #12]
 800a0e0:	60b9      	str	r1, [r7, #8]
 800a0e2:	607a      	str	r2, [r7, #4]
  int32_t ret;

  if (Instance >= IKS01A3_ENV_INSTANCES_NBR)
 800a0e4:	68fb      	ldr	r3, [r7, #12]
 800a0e6:	2b02      	cmp	r3, #2
 800a0e8:	d903      	bls.n	800a0f2 <IKS01A3_ENV_SENSOR_GetValue+0x1a>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 800a0ea:	f06f 0301 	mvn.w	r3, #1
 800a0ee:	617b      	str	r3, [r7, #20]
 800a0f0:	e029      	b.n	800a146 <IKS01A3_ENV_SENSOR_GetValue+0x6e>
  }
  else
  {
    if ((EnvCtx[Instance].Functions & Function) == Function)
 800a0f2:	4a17      	ldr	r2, [pc, #92]	; (800a150 <IKS01A3_ENV_SENSOR_GetValue+0x78>)
 800a0f4:	68fb      	ldr	r3, [r7, #12]
 800a0f6:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800a0fa:	68bb      	ldr	r3, [r7, #8]
 800a0fc:	4013      	ands	r3, r2
 800a0fe:	68ba      	ldr	r2, [r7, #8]
 800a100:	429a      	cmp	r2, r3
 800a102:	d11d      	bne.n	800a140 <IKS01A3_ENV_SENSOR_GetValue+0x68>
    {
      if (EnvFuncDrv[Instance][FunctionIndex[Function]]->GetValue(EnvCompObj[Instance], Value) != BSP_ERROR_NONE)
 800a104:	4a13      	ldr	r2, [pc, #76]	; (800a154 <IKS01A3_ENV_SENSOR_GetValue+0x7c>)
 800a106:	68bb      	ldr	r3, [r7, #8]
 800a108:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800a10c:	4812      	ldr	r0, [pc, #72]	; (800a158 <IKS01A3_ENV_SENSOR_GetValue+0x80>)
 800a10e:	68fa      	ldr	r2, [r7, #12]
 800a110:	4613      	mov	r3, r2
 800a112:	005b      	lsls	r3, r3, #1
 800a114:	4413      	add	r3, r2
 800a116:	440b      	add	r3, r1
 800a118:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 800a11c:	691b      	ldr	r3, [r3, #16]
 800a11e:	490f      	ldr	r1, [pc, #60]	; (800a15c <IKS01A3_ENV_SENSOR_GetValue+0x84>)
 800a120:	68fa      	ldr	r2, [r7, #12]
 800a122:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800a126:	6879      	ldr	r1, [r7, #4]
 800a128:	4610      	mov	r0, r2
 800a12a:	4798      	blx	r3
 800a12c:	4603      	mov	r3, r0
 800a12e:	2b00      	cmp	r3, #0
 800a130:	d003      	beq.n	800a13a <IKS01A3_ENV_SENSOR_GetValue+0x62>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800a132:	f06f 0304 	mvn.w	r3, #4
 800a136:	617b      	str	r3, [r7, #20]
 800a138:	e005      	b.n	800a146 <IKS01A3_ENV_SENSOR_GetValue+0x6e>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 800a13a:	2300      	movs	r3, #0
 800a13c:	617b      	str	r3, [r7, #20]
 800a13e:	e002      	b.n	800a146 <IKS01A3_ENV_SENSOR_GetValue+0x6e>
      }
    }
    else
    {
      ret = BSP_ERROR_WRONG_PARAM;
 800a140:	f06f 0301 	mvn.w	r3, #1
 800a144:	617b      	str	r3, [r7, #20]
    }
  }

  return ret;
 800a146:	697b      	ldr	r3, [r7, #20]
}
 800a148:	4618      	mov	r0, r3
 800a14a:	3718      	adds	r7, #24
 800a14c:	46bd      	mov	sp, r7
 800a14e:	bd80      	pop	{r7, pc}
 800a150:	200004a0 	.word	0x200004a0
 800a154:	2000015c 	.word	0x2000015c
 800a158:	20000470 	.word	0x20000470
 800a15c:	20000464 	.word	0x20000464

0800a160 <HTS221_0_Probe>:
  * @param  Functions Environmental sensor functions. Could be :
  *         - ENV_TEMPERATURE and/or ENV_HUMIDITY
  * @retval BSP status
  */
static int32_t HTS221_0_Probe(uint32_t Functions)
{
 800a160:	b580      	push	{r7, lr}
 800a162:	b090      	sub	sp, #64	; 0x40
 800a164:	af00      	add	r7, sp, #0
 800a166:	6078      	str	r0, [r7, #4]
  HTS221_IO_t            io_ctx;
  uint8_t                id;
  int32_t                ret = BSP_ERROR_NONE;
 800a168:	2300      	movs	r3, #0
 800a16a:	63fb      	str	r3, [r7, #60]	; 0x3c
  static HTS221_Object_t hts221_obj_0;
  HTS221_Capabilities_t  cap;

  /* Configure the environmental sensor driver */
  io_ctx.BusType     = HTS221_I2C_BUS; /* I2C */
 800a16c:	2300      	movs	r3, #0
 800a16e:	627b      	str	r3, [r7, #36]	; 0x24
  io_ctx.Address     = HTS221_I2C_ADDRESS;
 800a170:	23bf      	movs	r3, #191	; 0xbf
 800a172:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
  io_ctx.Init        = IKS01A3_I2C_Init;
 800a176:	4b49      	ldr	r3, [pc, #292]	; (800a29c <HTS221_0_Probe+0x13c>)
 800a178:	61fb      	str	r3, [r7, #28]
  io_ctx.DeInit      = IKS01A3_I2C_DeInit;
 800a17a:	4b49      	ldr	r3, [pc, #292]	; (800a2a0 <HTS221_0_Probe+0x140>)
 800a17c:	623b      	str	r3, [r7, #32]
  io_ctx.ReadReg     = IKS01A3_I2C_ReadReg;
 800a17e:	4b49      	ldr	r3, [pc, #292]	; (800a2a4 <HTS221_0_Probe+0x144>)
 800a180:	633b      	str	r3, [r7, #48]	; 0x30
  io_ctx.WriteReg    = IKS01A3_I2C_WriteReg;
 800a182:	4b49      	ldr	r3, [pc, #292]	; (800a2a8 <HTS221_0_Probe+0x148>)
 800a184:	62fb      	str	r3, [r7, #44]	; 0x2c
  io_ctx.GetTick     = IKS01A3_GetTick;
 800a186:	4b49      	ldr	r3, [pc, #292]	; (800a2ac <HTS221_0_Probe+0x14c>)
 800a188:	637b      	str	r3, [r7, #52]	; 0x34

  if (HTS221_RegisterBusIO(&hts221_obj_0, &io_ctx) != HTS221_OK)
 800a18a:	f107 031c 	add.w	r3, r7, #28
 800a18e:	4619      	mov	r1, r3
 800a190:	4847      	ldr	r0, [pc, #284]	; (800a2b0 <HTS221_0_Probe+0x150>)
 800a192:	f7f9 f9bb 	bl	800350c <HTS221_RegisterBusIO>
 800a196:	4603      	mov	r3, r0
 800a198:	2b00      	cmp	r3, #0
 800a19a:	d003      	beq.n	800a1a4 <HTS221_0_Probe+0x44>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800a19c:	f06f 0306 	mvn.w	r3, #6
 800a1a0:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a1a2:	e076      	b.n	800a292 <HTS221_0_Probe+0x132>
  }
  else if (HTS221_ReadID(&hts221_obj_0, &id) != HTS221_OK)
 800a1a4:	f107 031b 	add.w	r3, r7, #27
 800a1a8:	4619      	mov	r1, r3
 800a1aa:	4841      	ldr	r0, [pc, #260]	; (800a2b0 <HTS221_0_Probe+0x150>)
 800a1ac:	f7f9 fa37 	bl	800361e <HTS221_ReadID>
 800a1b0:	4603      	mov	r3, r0
 800a1b2:	2b00      	cmp	r3, #0
 800a1b4:	d003      	beq.n	800a1be <HTS221_0_Probe+0x5e>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800a1b6:	f06f 0306 	mvn.w	r3, #6
 800a1ba:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a1bc:	e069      	b.n	800a292 <HTS221_0_Probe+0x132>
  }
  else if (id != HTS221_ID)
 800a1be:	7efb      	ldrb	r3, [r7, #27]
 800a1c0:	2bbc      	cmp	r3, #188	; 0xbc
 800a1c2:	d003      	beq.n	800a1cc <HTS221_0_Probe+0x6c>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800a1c4:	f06f 0306 	mvn.w	r3, #6
 800a1c8:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a1ca:	e062      	b.n	800a292 <HTS221_0_Probe+0x132>
  }
  else
  {
    (void)HTS221_GetCapabilities(&hts221_obj_0, &cap);
 800a1cc:	f107 0308 	add.w	r3, r7, #8
 800a1d0:	4619      	mov	r1, r3
 800a1d2:	4837      	ldr	r0, [pc, #220]	; (800a2b0 <HTS221_0_Probe+0x150>)
 800a1d4:	f7f9 fa3a 	bl	800364c <HTS221_GetCapabilities>
    EnvCtx[IKS01A3_HTS221_0].Functions = ((uint32_t)cap.Temperature) | ((uint32_t)cap.Pressure << 1) | ((
 800a1d8:	7a3b      	ldrb	r3, [r7, #8]
 800a1da:	461a      	mov	r2, r3
 800a1dc:	7a7b      	ldrb	r3, [r7, #9]
 800a1de:	005b      	lsls	r3, r3, #1
 800a1e0:	431a      	orrs	r2, r3
                                           uint32_t)cap.Humidity << 2);
 800a1e2:	7abb      	ldrb	r3, [r7, #10]
 800a1e4:	009b      	lsls	r3, r3, #2
    EnvCtx[IKS01A3_HTS221_0].Functions = ((uint32_t)cap.Temperature) | ((uint32_t)cap.Pressure << 1) | ((
 800a1e6:	4313      	orrs	r3, r2
 800a1e8:	4a32      	ldr	r2, [pc, #200]	; (800a2b4 <HTS221_0_Probe+0x154>)
 800a1ea:	6013      	str	r3, [r2, #0]

    EnvCompObj[IKS01A3_HTS221_0] = &hts221_obj_0;
 800a1ec:	4b32      	ldr	r3, [pc, #200]	; (800a2b8 <HTS221_0_Probe+0x158>)
 800a1ee:	4a30      	ldr	r2, [pc, #192]	; (800a2b0 <HTS221_0_Probe+0x150>)
 800a1f0:	601a      	str	r2, [r3, #0]
    /* The second cast (void *) is added to bypass Misra R11.3 rule */
    EnvDrv[IKS01A3_HTS221_0] = (ENV_SENSOR_CommonDrv_t *)(void *)&HTS221_COMMON_Driver;
 800a1f2:	4b32      	ldr	r3, [pc, #200]	; (800a2bc <HTS221_0_Probe+0x15c>)
 800a1f4:	4a32      	ldr	r2, [pc, #200]	; (800a2c0 <HTS221_0_Probe+0x160>)
 800a1f6:	601a      	str	r2, [r3, #0]

    if ((ret == BSP_ERROR_NONE) && ((Functions & ENV_TEMPERATURE) == ENV_TEMPERATURE) && (cap.Temperature == 1U))
 800a1f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a1fa:	2b00      	cmp	r3, #0
 800a1fc:	d11d      	bne.n	800a23a <HTS221_0_Probe+0xda>
 800a1fe:	687b      	ldr	r3, [r7, #4]
 800a200:	f003 0301 	and.w	r3, r3, #1
 800a204:	2b00      	cmp	r3, #0
 800a206:	d018      	beq.n	800a23a <HTS221_0_Probe+0xda>
 800a208:	7a3b      	ldrb	r3, [r7, #8]
 800a20a:	2b01      	cmp	r3, #1
 800a20c:	d115      	bne.n	800a23a <HTS221_0_Probe+0xda>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      EnvFuncDrv[IKS01A3_HTS221_0][FunctionIndex[ENV_TEMPERATURE]] = (ENV_SENSOR_FuncDrv_t *)(void *)&HTS221_TEMP_Driver;
 800a20e:	4b2d      	ldr	r3, [pc, #180]	; (800a2c4 <HTS221_0_Probe+0x164>)
 800a210:	685b      	ldr	r3, [r3, #4]
 800a212:	4a2d      	ldr	r2, [pc, #180]	; (800a2c8 <HTS221_0_Probe+0x168>)
 800a214:	492d      	ldr	r1, [pc, #180]	; (800a2cc <HTS221_0_Probe+0x16c>)
 800a216:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

      if (EnvDrv[IKS01A3_HTS221_0]->Init(EnvCompObj[IKS01A3_HTS221_0]) != HTS221_OK)
 800a21a:	4b28      	ldr	r3, [pc, #160]	; (800a2bc <HTS221_0_Probe+0x15c>)
 800a21c:	681b      	ldr	r3, [r3, #0]
 800a21e:	681b      	ldr	r3, [r3, #0]
 800a220:	4a25      	ldr	r2, [pc, #148]	; (800a2b8 <HTS221_0_Probe+0x158>)
 800a222:	6812      	ldr	r2, [r2, #0]
 800a224:	4610      	mov	r0, r2
 800a226:	4798      	blx	r3
 800a228:	4603      	mov	r3, r0
 800a22a:	2b00      	cmp	r3, #0
 800a22c:	d003      	beq.n	800a236 <HTS221_0_Probe+0xd6>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800a22e:	f06f 0304 	mvn.w	r3, #4
 800a232:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a234:	e001      	b.n	800a23a <HTS221_0_Probe+0xda>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 800a236:	2300      	movs	r3, #0
 800a238:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & ENV_HUMIDITY) == ENV_HUMIDITY) && (cap.Humidity == 1U))
 800a23a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a23c:	2b00      	cmp	r3, #0
 800a23e:	d11d      	bne.n	800a27c <HTS221_0_Probe+0x11c>
 800a240:	687b      	ldr	r3, [r7, #4]
 800a242:	f003 0304 	and.w	r3, r3, #4
 800a246:	2b00      	cmp	r3, #0
 800a248:	d018      	beq.n	800a27c <HTS221_0_Probe+0x11c>
 800a24a:	7abb      	ldrb	r3, [r7, #10]
 800a24c:	2b01      	cmp	r3, #1
 800a24e:	d115      	bne.n	800a27c <HTS221_0_Probe+0x11c>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      EnvFuncDrv[IKS01A3_HTS221_0][FunctionIndex[ENV_HUMIDITY]] = (ENV_SENSOR_FuncDrv_t *)(void *)&HTS221_HUM_Driver;
 800a250:	4b1c      	ldr	r3, [pc, #112]	; (800a2c4 <HTS221_0_Probe+0x164>)
 800a252:	691b      	ldr	r3, [r3, #16]
 800a254:	4a1c      	ldr	r2, [pc, #112]	; (800a2c8 <HTS221_0_Probe+0x168>)
 800a256:	491e      	ldr	r1, [pc, #120]	; (800a2d0 <HTS221_0_Probe+0x170>)
 800a258:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

      if (EnvDrv[IKS01A3_HTS221_0]->Init(EnvCompObj[IKS01A3_HTS221_0]) != HTS221_OK)
 800a25c:	4b17      	ldr	r3, [pc, #92]	; (800a2bc <HTS221_0_Probe+0x15c>)
 800a25e:	681b      	ldr	r3, [r3, #0]
 800a260:	681b      	ldr	r3, [r3, #0]
 800a262:	4a15      	ldr	r2, [pc, #84]	; (800a2b8 <HTS221_0_Probe+0x158>)
 800a264:	6812      	ldr	r2, [r2, #0]
 800a266:	4610      	mov	r0, r2
 800a268:	4798      	blx	r3
 800a26a:	4603      	mov	r3, r0
 800a26c:	2b00      	cmp	r3, #0
 800a26e:	d003      	beq.n	800a278 <HTS221_0_Probe+0x118>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800a270:	f06f 0304 	mvn.w	r3, #4
 800a274:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a276:	e001      	b.n	800a27c <HTS221_0_Probe+0x11c>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 800a278:	2300      	movs	r3, #0
 800a27a:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & ENV_PRESSURE) == ENV_PRESSURE))
 800a27c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a27e:	2b00      	cmp	r3, #0
 800a280:	d107      	bne.n	800a292 <HTS221_0_Probe+0x132>
 800a282:	687b      	ldr	r3, [r7, #4]
 800a284:	f003 0302 	and.w	r3, r3, #2
 800a288:	2b00      	cmp	r3, #0
 800a28a:	d002      	beq.n	800a292 <HTS221_0_Probe+0x132>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 800a28c:	f06f 0304 	mvn.w	r3, #4
 800a290:	63fb      	str	r3, [r7, #60]	; 0x3c
    }
  }

  return ret;
 800a292:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800a294:	4618      	mov	r0, r3
 800a296:	3740      	adds	r7, #64	; 0x40
 800a298:	46bd      	mov	sp, r7
 800a29a:	bd80      	pop	{r7, pc}
 800a29c:	08002f01 	.word	0x08002f01
 800a2a0:	08002f65 	.word	0x08002f65
 800a2a4:	08003019 	.word	0x08003019
 800a2a8:	08002fb5 	.word	0x08002fb5
 800a2ac:	0800307d 	.word	0x0800307d
 800a2b0:	200004ac 	.word	0x200004ac
 800a2b4:	200004a0 	.word	0x200004a0
 800a2b8:	20000464 	.word	0x20000464
 800a2bc:	20000494 	.word	0x20000494
 800a2c0:	20000008 	.word	0x20000008
 800a2c4:	2000015c 	.word	0x2000015c
 800a2c8:	20000470 	.word	0x20000470
 800a2cc:	2000002c 	.word	0x2000002c
 800a2d0:	20000018 	.word	0x20000018

0800a2d4 <LPS22HH_0_Probe>:
  * @param  Functions Environmental sensor functions. Could be :
  *         - ENV_TEMPERATURE and/or ENV_PRESSURE
  * @retval BSP status
  */
static int32_t LPS22HH_0_Probe(uint32_t Functions)
{
 800a2d4:	b580      	push	{r7, lr}
 800a2d6:	b090      	sub	sp, #64	; 0x40
 800a2d8:	af00      	add	r7, sp, #0
 800a2da:	6078      	str	r0, [r7, #4]
  LPS22HH_IO_t            io_ctx;
  uint8_t                 id;
  int32_t                 ret = BSP_ERROR_NONE;
 800a2dc:	2300      	movs	r3, #0
 800a2de:	63fb      	str	r3, [r7, #60]	; 0x3c
  static LPS22HH_Object_t lps22hh_obj_0;
  LPS22HH_Capabilities_t  cap;

  /* Configure the pressure driver */
  io_ctx.BusType     = LPS22HH_I2C_BUS; /* I2C */
 800a2e0:	2300      	movs	r3, #0
 800a2e2:	627b      	str	r3, [r7, #36]	; 0x24
  io_ctx.Address     = LPS22HH_I2C_ADD_H;
 800a2e4:	23bb      	movs	r3, #187	; 0xbb
 800a2e6:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
  io_ctx.Init        = IKS01A3_I2C_Init;
 800a2ea:	4b4a      	ldr	r3, [pc, #296]	; (800a414 <LPS22HH_0_Probe+0x140>)
 800a2ec:	61fb      	str	r3, [r7, #28]
  io_ctx.DeInit      = IKS01A3_I2C_DeInit;
 800a2ee:	4b4a      	ldr	r3, [pc, #296]	; (800a418 <LPS22HH_0_Probe+0x144>)
 800a2f0:	623b      	str	r3, [r7, #32]
  io_ctx.ReadReg     = IKS01A3_I2C_ReadReg;
 800a2f2:	4b4a      	ldr	r3, [pc, #296]	; (800a41c <LPS22HH_0_Probe+0x148>)
 800a2f4:	633b      	str	r3, [r7, #48]	; 0x30
  io_ctx.WriteReg    = IKS01A3_I2C_WriteReg;
 800a2f6:	4b4a      	ldr	r3, [pc, #296]	; (800a420 <LPS22HH_0_Probe+0x14c>)
 800a2f8:	62fb      	str	r3, [r7, #44]	; 0x2c
  io_ctx.GetTick     = IKS01A3_GetTick;
 800a2fa:	4b4a      	ldr	r3, [pc, #296]	; (800a424 <LPS22HH_0_Probe+0x150>)
 800a2fc:	637b      	str	r3, [r7, #52]	; 0x34

  if (LPS22HH_RegisterBusIO(&lps22hh_obj_0, &io_ctx) != LPS22HH_OK)
 800a2fe:	f107 031c 	add.w	r3, r7, #28
 800a302:	4619      	mov	r1, r3
 800a304:	4848      	ldr	r0, [pc, #288]	; (800a428 <LPS22HH_0_Probe+0x154>)
 800a306:	f7fc fa7d 	bl	8006804 <LPS22HH_RegisterBusIO>
 800a30a:	4603      	mov	r3, r0
 800a30c:	2b00      	cmp	r3, #0
 800a30e:	d003      	beq.n	800a318 <LPS22HH_0_Probe+0x44>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800a310:	f06f 0306 	mvn.w	r3, #6
 800a314:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a316:	e078      	b.n	800a40a <LPS22HH_0_Probe+0x136>
  }
  else if (LPS22HH_ReadID(&lps22hh_obj_0, &id) != LPS22HH_OK)
 800a318:	f107 031b 	add.w	r3, r7, #27
 800a31c:	4619      	mov	r1, r3
 800a31e:	4842      	ldr	r0, [pc, #264]	; (800a428 <LPS22HH_0_Probe+0x154>)
 800a320:	f7fc fb19 	bl	8006956 <LPS22HH_ReadID>
 800a324:	4603      	mov	r3, r0
 800a326:	2b00      	cmp	r3, #0
 800a328:	d003      	beq.n	800a332 <LPS22HH_0_Probe+0x5e>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800a32a:	f06f 0306 	mvn.w	r3, #6
 800a32e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a330:	e06b      	b.n	800a40a <LPS22HH_0_Probe+0x136>
  }
  else if (id != LPS22HH_ID)
 800a332:	7efb      	ldrb	r3, [r7, #27]
 800a334:	2bb3      	cmp	r3, #179	; 0xb3
 800a336:	d003      	beq.n	800a340 <LPS22HH_0_Probe+0x6c>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800a338:	f06f 0306 	mvn.w	r3, #6
 800a33c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a33e:	e064      	b.n	800a40a <LPS22HH_0_Probe+0x136>
  }
  else
  {
    (void)LPS22HH_GetCapabilities(&lps22hh_obj_0, &cap);
 800a340:	f107 0308 	add.w	r3, r7, #8
 800a344:	4619      	mov	r1, r3
 800a346:	4838      	ldr	r0, [pc, #224]	; (800a428 <LPS22HH_0_Probe+0x154>)
 800a348:	f7fc fb1c 	bl	8006984 <LPS22HH_GetCapabilities>

    EnvCtx[IKS01A3_LPS22HH_0].Functions = ((uint32_t)cap.Temperature) | ((uint32_t)cap.Pressure << 1) | ((
 800a34c:	7a3b      	ldrb	r3, [r7, #8]
 800a34e:	461a      	mov	r2, r3
 800a350:	7a7b      	ldrb	r3, [r7, #9]
 800a352:	005b      	lsls	r3, r3, #1
 800a354:	431a      	orrs	r2, r3
                                            uint32_t)cap.Humidity << 2);
 800a356:	7abb      	ldrb	r3, [r7, #10]
 800a358:	009b      	lsls	r3, r3, #2
    EnvCtx[IKS01A3_LPS22HH_0].Functions = ((uint32_t)cap.Temperature) | ((uint32_t)cap.Pressure << 1) | ((
 800a35a:	4313      	orrs	r3, r2
 800a35c:	4a33      	ldr	r2, [pc, #204]	; (800a42c <LPS22HH_0_Probe+0x158>)
 800a35e:	6053      	str	r3, [r2, #4]

    EnvCompObj[IKS01A3_LPS22HH_0] = &lps22hh_obj_0;
 800a360:	4b33      	ldr	r3, [pc, #204]	; (800a430 <LPS22HH_0_Probe+0x15c>)
 800a362:	4a31      	ldr	r2, [pc, #196]	; (800a428 <LPS22HH_0_Probe+0x154>)
 800a364:	605a      	str	r2, [r3, #4]
    /* The second cast (void *) is added to bypass Misra R11.3 rule */
    EnvDrv[IKS01A3_LPS22HH_0] = (ENV_SENSOR_CommonDrv_t *)(void *)&LPS22HH_COMMON_Driver;
 800a366:	4b33      	ldr	r3, [pc, #204]	; (800a434 <LPS22HH_0_Probe+0x160>)
 800a368:	4a33      	ldr	r2, [pc, #204]	; (800a438 <LPS22HH_0_Probe+0x164>)
 800a36a:	605a      	str	r2, [r3, #4]

    if ((ret == BSP_ERROR_NONE) && ((Functions & ENV_TEMPERATURE) == ENV_TEMPERATURE) && (cap.Temperature == 1U))
 800a36c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a36e:	2b00      	cmp	r3, #0
 800a370:	d11e      	bne.n	800a3b0 <LPS22HH_0_Probe+0xdc>
 800a372:	687b      	ldr	r3, [r7, #4]
 800a374:	f003 0301 	and.w	r3, r3, #1
 800a378:	2b00      	cmp	r3, #0
 800a37a:	d019      	beq.n	800a3b0 <LPS22HH_0_Probe+0xdc>
 800a37c:	7a3b      	ldrb	r3, [r7, #8]
 800a37e:	2b01      	cmp	r3, #1
 800a380:	d116      	bne.n	800a3b0 <LPS22HH_0_Probe+0xdc>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      EnvFuncDrv[IKS01A3_LPS22HH_0][FunctionIndex[ENV_TEMPERATURE]] = (ENV_SENSOR_FuncDrv_t *)(void *)&LPS22HH_TEMP_Driver;
 800a382:	4b2e      	ldr	r3, [pc, #184]	; (800a43c <LPS22HH_0_Probe+0x168>)
 800a384:	685b      	ldr	r3, [r3, #4]
 800a386:	4a2e      	ldr	r2, [pc, #184]	; (800a440 <LPS22HH_0_Probe+0x16c>)
 800a388:	3303      	adds	r3, #3
 800a38a:	492e      	ldr	r1, [pc, #184]	; (800a444 <LPS22HH_0_Probe+0x170>)
 800a38c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

      if (EnvDrv[IKS01A3_LPS22HH_0]->Init(EnvCompObj[IKS01A3_LPS22HH_0]) != LPS22HH_OK)
 800a390:	4b28      	ldr	r3, [pc, #160]	; (800a434 <LPS22HH_0_Probe+0x160>)
 800a392:	685b      	ldr	r3, [r3, #4]
 800a394:	681b      	ldr	r3, [r3, #0]
 800a396:	4a26      	ldr	r2, [pc, #152]	; (800a430 <LPS22HH_0_Probe+0x15c>)
 800a398:	6852      	ldr	r2, [r2, #4]
 800a39a:	4610      	mov	r0, r2
 800a39c:	4798      	blx	r3
 800a39e:	4603      	mov	r3, r0
 800a3a0:	2b00      	cmp	r3, #0
 800a3a2:	d003      	beq.n	800a3ac <LPS22HH_0_Probe+0xd8>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800a3a4:	f06f 0304 	mvn.w	r3, #4
 800a3a8:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a3aa:	e001      	b.n	800a3b0 <LPS22HH_0_Probe+0xdc>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 800a3ac:	2300      	movs	r3, #0
 800a3ae:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & ENV_PRESSURE) == ENV_PRESSURE) && (cap.Pressure == 1U))
 800a3b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a3b2:	2b00      	cmp	r3, #0
 800a3b4:	d11e      	bne.n	800a3f4 <LPS22HH_0_Probe+0x120>
 800a3b6:	687b      	ldr	r3, [r7, #4]
 800a3b8:	f003 0302 	and.w	r3, r3, #2
 800a3bc:	2b00      	cmp	r3, #0
 800a3be:	d019      	beq.n	800a3f4 <LPS22HH_0_Probe+0x120>
 800a3c0:	7a7b      	ldrb	r3, [r7, #9]
 800a3c2:	2b01      	cmp	r3, #1
 800a3c4:	d116      	bne.n	800a3f4 <LPS22HH_0_Probe+0x120>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      EnvFuncDrv[IKS01A3_LPS22HH_0][FunctionIndex[ENV_PRESSURE]] = (ENV_SENSOR_FuncDrv_t *)(void *)&LPS22HH_PRESS_Driver;
 800a3c6:	4b1d      	ldr	r3, [pc, #116]	; (800a43c <LPS22HH_0_Probe+0x168>)
 800a3c8:	689b      	ldr	r3, [r3, #8]
 800a3ca:	4a1d      	ldr	r2, [pc, #116]	; (800a440 <LPS22HH_0_Probe+0x16c>)
 800a3cc:	3303      	adds	r3, #3
 800a3ce:	491e      	ldr	r1, [pc, #120]	; (800a448 <LPS22HH_0_Probe+0x174>)
 800a3d0:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

      if (EnvDrv[IKS01A3_LPS22HH_0]->Init(EnvCompObj[IKS01A3_LPS22HH_0]) != LPS22HH_OK)
 800a3d4:	4b17      	ldr	r3, [pc, #92]	; (800a434 <LPS22HH_0_Probe+0x160>)
 800a3d6:	685b      	ldr	r3, [r3, #4]
 800a3d8:	681b      	ldr	r3, [r3, #0]
 800a3da:	4a15      	ldr	r2, [pc, #84]	; (800a430 <LPS22HH_0_Probe+0x15c>)
 800a3dc:	6852      	ldr	r2, [r2, #4]
 800a3de:	4610      	mov	r0, r2
 800a3e0:	4798      	blx	r3
 800a3e2:	4603      	mov	r3, r0
 800a3e4:	2b00      	cmp	r3, #0
 800a3e6:	d003      	beq.n	800a3f0 <LPS22HH_0_Probe+0x11c>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800a3e8:	f06f 0304 	mvn.w	r3, #4
 800a3ec:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a3ee:	e001      	b.n	800a3f4 <LPS22HH_0_Probe+0x120>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 800a3f0:	2300      	movs	r3, #0
 800a3f2:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & ENV_HUMIDITY) == ENV_HUMIDITY))
 800a3f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a3f6:	2b00      	cmp	r3, #0
 800a3f8:	d107      	bne.n	800a40a <LPS22HH_0_Probe+0x136>
 800a3fa:	687b      	ldr	r3, [r7, #4]
 800a3fc:	f003 0304 	and.w	r3, r3, #4
 800a400:	2b00      	cmp	r3, #0
 800a402:	d002      	beq.n	800a40a <LPS22HH_0_Probe+0x136>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 800a404:	f06f 0304 	mvn.w	r3, #4
 800a408:	63fb      	str	r3, [r7, #60]	; 0x3c
    }
  }
  return ret;
 800a40a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800a40c:	4618      	mov	r0, r3
 800a40e:	3740      	adds	r7, #64	; 0x40
 800a410:	46bd      	mov	sp, r7
 800a412:	bd80      	pop	{r7, pc}
 800a414:	08002f01 	.word	0x08002f01
 800a418:	08002f65 	.word	0x08002f65
 800a41c:	08003019 	.word	0x08003019
 800a420:	08002fb5 	.word	0x08002fb5
 800a424:	0800307d 	.word	0x0800307d
 800a428:	200004e0 	.word	0x200004e0
 800a42c:	200004a0 	.word	0x200004a0
 800a430:	20000464 	.word	0x20000464
 800a434:	20000494 	.word	0x20000494
 800a438:	200000a8 	.word	0x200000a8
 800a43c:	2000015c 	.word	0x2000015c
 800a440:	20000470 	.word	0x20000470
 800a444:	200000cc 	.word	0x200000cc
 800a448:	200000b8 	.word	0x200000b8

0800a44c <STTS751_0_Probe>:
  * @param  Functions Environmental sensor functions. Could be :
  *         - ENV_TEMPERATURE
  * @retval BSP status
  */
static int32_t STTS751_0_Probe(uint32_t Functions)
{
 800a44c:	b580      	push	{r7, lr}
 800a44e:	b090      	sub	sp, #64	; 0x40
 800a450:	af00      	add	r7, sp, #0
 800a452:	6078      	str	r0, [r7, #4]
  STTS751_IO_t            io_ctx;
  uint8_t                 id;
  int32_t                 ret = BSP_ERROR_NONE;
 800a454:	2300      	movs	r3, #0
 800a456:	63fb      	str	r3, [r7, #60]	; 0x3c
  static STTS751_Object_t stts751_obj_0;
  STTS751_Capabilities_t  cap;

  /* Configure the pressure driver */
  io_ctx.BusType     = STTS751_I2C_BUS; /* I2C */
 800a458:	2300      	movs	r3, #0
 800a45a:	627b      	str	r3, [r7, #36]	; 0x24
  io_ctx.Address     = STTS751_1xxxx_ADD_7K5;
 800a45c:	2395      	movs	r3, #149	; 0x95
 800a45e:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
  io_ctx.Init        = IKS01A3_I2C_Init;
 800a462:	4b3f      	ldr	r3, [pc, #252]	; (800a560 <STTS751_0_Probe+0x114>)
 800a464:	61fb      	str	r3, [r7, #28]
  io_ctx.DeInit      = IKS01A3_I2C_DeInit;
 800a466:	4b3f      	ldr	r3, [pc, #252]	; (800a564 <STTS751_0_Probe+0x118>)
 800a468:	623b      	str	r3, [r7, #32]
  io_ctx.ReadReg     = IKS01A3_I2C_ReadReg;
 800a46a:	4b3f      	ldr	r3, [pc, #252]	; (800a568 <STTS751_0_Probe+0x11c>)
 800a46c:	633b      	str	r3, [r7, #48]	; 0x30
  io_ctx.WriteReg    = IKS01A3_I2C_WriteReg;
 800a46e:	4b3f      	ldr	r3, [pc, #252]	; (800a56c <STTS751_0_Probe+0x120>)
 800a470:	62fb      	str	r3, [r7, #44]	; 0x2c
  io_ctx.GetTick     = IKS01A3_GetTick;
 800a472:	4b3f      	ldr	r3, [pc, #252]	; (800a570 <STTS751_0_Probe+0x124>)
 800a474:	637b      	str	r3, [r7, #52]	; 0x34

  if (STTS751_RegisterBusIO(&stts751_obj_0, &io_ctx) != STTS751_OK)
 800a476:	f107 031c 	add.w	r3, r7, #28
 800a47a:	4619      	mov	r1, r3
 800a47c:	483d      	ldr	r0, [pc, #244]	; (800a574 <STTS751_0_Probe+0x128>)
 800a47e:	f7fe fffb 	bl	8009478 <STTS751_RegisterBusIO>
 800a482:	4603      	mov	r3, r0
 800a484:	2b00      	cmp	r3, #0
 800a486:	d003      	beq.n	800a490 <STTS751_0_Probe+0x44>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800a488:	f06f 0306 	mvn.w	r3, #6
 800a48c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a48e:	e061      	b.n	800a554 <STTS751_0_Probe+0x108>
  }
  else if (STTS751_ReadID(&stts751_obj_0, &id) != STTS751_OK)
 800a490:	f107 031b 	add.w	r3, r7, #27
 800a494:	4619      	mov	r1, r3
 800a496:	4837      	ldr	r0, [pc, #220]	; (800a574 <STTS751_0_Probe+0x128>)
 800a498:	f7ff f88d 	bl	80095b6 <STTS751_ReadID>
 800a49c:	4603      	mov	r3, r0
 800a49e:	2b00      	cmp	r3, #0
 800a4a0:	d003      	beq.n	800a4aa <STTS751_0_Probe+0x5e>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800a4a2:	f06f 0306 	mvn.w	r3, #6
 800a4a6:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a4a8:	e054      	b.n	800a554 <STTS751_0_Probe+0x108>
  }
  else if (id != STTS751_ID_MAN)
 800a4aa:	7efb      	ldrb	r3, [r7, #27]
 800a4ac:	2b53      	cmp	r3, #83	; 0x53
 800a4ae:	d003      	beq.n	800a4b8 <STTS751_0_Probe+0x6c>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800a4b0:	f06f 0306 	mvn.w	r3, #6
 800a4b4:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a4b6:	e04d      	b.n	800a554 <STTS751_0_Probe+0x108>
  }
  else
  {
    (void)STTS751_GetCapabilities(&stts751_obj_0, &cap);
 800a4b8:	f107 0308 	add.w	r3, r7, #8
 800a4bc:	4619      	mov	r1, r3
 800a4be:	482d      	ldr	r0, [pc, #180]	; (800a574 <STTS751_0_Probe+0x128>)
 800a4c0:	f7ff f894 	bl	80095ec <STTS751_GetCapabilities>

    EnvCtx[IKS01A3_STTS751_0].Functions = ((uint32_t)cap.Temperature) | ((uint32_t)cap.Pressure << 1) | ((
 800a4c4:	7a3b      	ldrb	r3, [r7, #8]
 800a4c6:	461a      	mov	r2, r3
 800a4c8:	7a7b      	ldrb	r3, [r7, #9]
 800a4ca:	005b      	lsls	r3, r3, #1
 800a4cc:	431a      	orrs	r2, r3
                                            uint32_t)cap.Humidity << 2);
 800a4ce:	7abb      	ldrb	r3, [r7, #10]
 800a4d0:	009b      	lsls	r3, r3, #2
    EnvCtx[IKS01A3_STTS751_0].Functions = ((uint32_t)cap.Temperature) | ((uint32_t)cap.Pressure << 1) | ((
 800a4d2:	4313      	orrs	r3, r2
 800a4d4:	4a28      	ldr	r2, [pc, #160]	; (800a578 <STTS751_0_Probe+0x12c>)
 800a4d6:	6093      	str	r3, [r2, #8]

    EnvCompObj[IKS01A3_STTS751_0] = &stts751_obj_0;
 800a4d8:	4b28      	ldr	r3, [pc, #160]	; (800a57c <STTS751_0_Probe+0x130>)
 800a4da:	4a26      	ldr	r2, [pc, #152]	; (800a574 <STTS751_0_Probe+0x128>)
 800a4dc:	609a      	str	r2, [r3, #8]
    /* The second cast (void *) is added to bypass Misra R11.3 rule */
    EnvDrv[IKS01A3_STTS751_0] = (ENV_SENSOR_CommonDrv_t *)(void *)&STTS751_COMMON_Driver;
 800a4de:	4b28      	ldr	r3, [pc, #160]	; (800a580 <STTS751_0_Probe+0x134>)
 800a4e0:	4a28      	ldr	r2, [pc, #160]	; (800a584 <STTS751_0_Probe+0x138>)
 800a4e2:	609a      	str	r2, [r3, #8]

    if ((ret == BSP_ERROR_NONE) && ((Functions & ENV_TEMPERATURE) == ENV_TEMPERATURE) && (cap.Temperature == 1U))
 800a4e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a4e6:	2b00      	cmp	r3, #0
 800a4e8:	d11e      	bne.n	800a528 <STTS751_0_Probe+0xdc>
 800a4ea:	687b      	ldr	r3, [r7, #4]
 800a4ec:	f003 0301 	and.w	r3, r3, #1
 800a4f0:	2b00      	cmp	r3, #0
 800a4f2:	d019      	beq.n	800a528 <STTS751_0_Probe+0xdc>
 800a4f4:	7a3b      	ldrb	r3, [r7, #8]
 800a4f6:	2b01      	cmp	r3, #1
 800a4f8:	d116      	bne.n	800a528 <STTS751_0_Probe+0xdc>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      EnvFuncDrv[IKS01A3_STTS751_0][FunctionIndex[ENV_TEMPERATURE]] = (ENV_SENSOR_FuncDrv_t *)(void *)&STTS751_TEMP_Driver;
 800a4fa:	4b23      	ldr	r3, [pc, #140]	; (800a588 <STTS751_0_Probe+0x13c>)
 800a4fc:	685b      	ldr	r3, [r3, #4]
 800a4fe:	4a23      	ldr	r2, [pc, #140]	; (800a58c <STTS751_0_Probe+0x140>)
 800a500:	3306      	adds	r3, #6
 800a502:	4923      	ldr	r1, [pc, #140]	; (800a590 <STTS751_0_Probe+0x144>)
 800a504:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

      if (EnvDrv[IKS01A3_STTS751_0]->Init(EnvCompObj[IKS01A3_STTS751_0]) != STTS751_OK)
 800a508:	4b1d      	ldr	r3, [pc, #116]	; (800a580 <STTS751_0_Probe+0x134>)
 800a50a:	689b      	ldr	r3, [r3, #8]
 800a50c:	681b      	ldr	r3, [r3, #0]
 800a50e:	4a1b      	ldr	r2, [pc, #108]	; (800a57c <STTS751_0_Probe+0x130>)
 800a510:	6892      	ldr	r2, [r2, #8]
 800a512:	4610      	mov	r0, r2
 800a514:	4798      	blx	r3
 800a516:	4603      	mov	r3, r0
 800a518:	2b00      	cmp	r3, #0
 800a51a:	d003      	beq.n	800a524 <STTS751_0_Probe+0xd8>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800a51c:	f06f 0304 	mvn.w	r3, #4
 800a520:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a522:	e001      	b.n	800a528 <STTS751_0_Probe+0xdc>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 800a524:	2300      	movs	r3, #0
 800a526:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & ENV_HUMIDITY) == ENV_HUMIDITY))
 800a528:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a52a:	2b00      	cmp	r3, #0
 800a52c:	d107      	bne.n	800a53e <STTS751_0_Probe+0xf2>
 800a52e:	687b      	ldr	r3, [r7, #4]
 800a530:	f003 0304 	and.w	r3, r3, #4
 800a534:	2b00      	cmp	r3, #0
 800a536:	d002      	beq.n	800a53e <STTS751_0_Probe+0xf2>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 800a538:	f06f 0304 	mvn.w	r3, #4
 800a53c:	63fb      	str	r3, [r7, #60]	; 0x3c
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & ENV_PRESSURE) == ENV_PRESSURE))
 800a53e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a540:	2b00      	cmp	r3, #0
 800a542:	d107      	bne.n	800a554 <STTS751_0_Probe+0x108>
 800a544:	687b      	ldr	r3, [r7, #4]
 800a546:	f003 0302 	and.w	r3, r3, #2
 800a54a:	2b00      	cmp	r3, #0
 800a54c:	d002      	beq.n	800a554 <STTS751_0_Probe+0x108>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 800a54e:	f06f 0304 	mvn.w	r3, #4
 800a552:	63fb      	str	r3, [r7, #60]	; 0x3c
    }
  }
  return ret;
 800a554:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800a556:	4618      	mov	r0, r3
 800a558:	3740      	adds	r7, #64	; 0x40
 800a55a:	46bd      	mov	sp, r7
 800a55c:	bd80      	pop	{r7, pc}
 800a55e:	bf00      	nop
 800a560:	08002f01 	.word	0x08002f01
 800a564:	08002f65 	.word	0x08002f65
 800a568:	08003019 	.word	0x08003019
 800a56c:	08002fb5 	.word	0x08002fb5
 800a570:	0800307d 	.word	0x0800307d
 800a574:	20000514 	.word	0x20000514
 800a578:	200004a0 	.word	0x200004a0
 800a57c:	20000464 	.word	0x20000464
 800a580:	20000494 	.word	0x20000494
 800a584:	20000138 	.word	0x20000138
 800a588:	2000015c 	.word	0x2000015c
 800a58c:	20000470 	.word	0x20000470
 800a590:	20000148 	.word	0x20000148

0800a594 <IKS01A3_MOTION_SENSOR_Init>:
  *         - MOTION_ACCELERO for instance 1
  *         - MOTION_MAGNETO for instance 2
  * @retval BSP status
  */
int32_t IKS01A3_MOTION_SENSOR_Init(uint32_t Instance, uint32_t Functions)
{
 800a594:	b580      	push	{r7, lr}
 800a596:	b08e      	sub	sp, #56	; 0x38
 800a598:	af00      	add	r7, sp, #0
 800a59a:	6078      	str	r0, [r7, #4]
 800a59c:	6039      	str	r1, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
 800a59e:	2300      	movs	r3, #0
 800a5a0:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t function = MOTION_GYRO;
 800a5a2:	2301      	movs	r3, #1
 800a5a4:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t i;
  uint32_t component_functions = 0;
 800a5a6:	2300      	movs	r3, #0
 800a5a8:	62bb      	str	r3, [r7, #40]	; 0x28
  IKS01A3_MOTION_SENSOR_Capabilities_t cap;

  switch (Instance)
 800a5aa:	687b      	ldr	r3, [r7, #4]
 800a5ac:	2b02      	cmp	r3, #2
 800a5ae:	d06e      	beq.n	800a68e <IKS01A3_MOTION_SENSOR_Init+0xfa>
 800a5b0:	687b      	ldr	r3, [r7, #4]
 800a5b2:	2b02      	cmp	r3, #2
 800a5b4:	f200 809d 	bhi.w	800a6f2 <IKS01A3_MOTION_SENSOR_Init+0x15e>
 800a5b8:	687b      	ldr	r3, [r7, #4]
 800a5ba:	2b00      	cmp	r3, #0
 800a5bc:	d003      	beq.n	800a5c6 <IKS01A3_MOTION_SENSOR_Init+0x32>
 800a5be:	687b      	ldr	r3, [r7, #4]
 800a5c0:	2b01      	cmp	r3, #1
 800a5c2:	d032      	beq.n	800a62a <IKS01A3_MOTION_SENSOR_Init+0x96>
 800a5c4:	e095      	b.n	800a6f2 <IKS01A3_MOTION_SENSOR_Init+0x15e>
  {
#if (USE_IKS01A3_MOTION_SENSOR_LSM6DSO_0 == 1)
    case IKS01A3_LSM6DSO_0:
      if (LSM6DSO_0_Probe(Functions) != BSP_ERROR_NONE)
 800a5c6:	6838      	ldr	r0, [r7, #0]
 800a5c8:	f000 f966 	bl	800a898 <LSM6DSO_0_Probe>
 800a5cc:	4603      	mov	r3, r0
 800a5ce:	2b00      	cmp	r3, #0
 800a5d0:	d002      	beq.n	800a5d8 <IKS01A3_MOTION_SENSOR_Init+0x44>
      {
        return BSP_ERROR_NO_INIT;
 800a5d2:	f04f 33ff 	mov.w	r3, #4294967295
 800a5d6:	e0cc      	b.n	800a772 <IKS01A3_MOTION_SENSOR_Init+0x1de>
      }
      if (MotionDrv[Instance]->GetCapabilities(MotionCompObj[Instance], (void *)&cap) != BSP_ERROR_NONE)
 800a5d8:	4a68      	ldr	r2, [pc, #416]	; (800a77c <IKS01A3_MOTION_SENSOR_Init+0x1e8>)
 800a5da:	687b      	ldr	r3, [r7, #4]
 800a5dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a5e0:	68db      	ldr	r3, [r3, #12]
 800a5e2:	4967      	ldr	r1, [pc, #412]	; (800a780 <IKS01A3_MOTION_SENSOR_Init+0x1ec>)
 800a5e4:	687a      	ldr	r2, [r7, #4]
 800a5e6:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800a5ea:	f107 010c 	add.w	r1, r7, #12
 800a5ee:	4610      	mov	r0, r2
 800a5f0:	4798      	blx	r3
 800a5f2:	4603      	mov	r3, r0
 800a5f4:	2b00      	cmp	r3, #0
 800a5f6:	d002      	beq.n	800a5fe <IKS01A3_MOTION_SENSOR_Init+0x6a>
      {
        return BSP_ERROR_UNKNOWN_COMPONENT;
 800a5f8:	f06f 0306 	mvn.w	r3, #6
 800a5fc:	e0b9      	b.n	800a772 <IKS01A3_MOTION_SENSOR_Init+0x1de>
      }
      if (cap.Acc == 1U)
 800a5fe:	7b3b      	ldrb	r3, [r7, #12]
 800a600:	2b01      	cmp	r3, #1
 800a602:	d103      	bne.n	800a60c <IKS01A3_MOTION_SENSOR_Init+0x78>
      {
        component_functions |= MOTION_ACCELERO;
 800a604:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a606:	f043 0302 	orr.w	r3, r3, #2
 800a60a:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      if (cap.Gyro == 1U)
 800a60c:	7b7b      	ldrb	r3, [r7, #13]
 800a60e:	2b01      	cmp	r3, #1
 800a610:	d103      	bne.n	800a61a <IKS01A3_MOTION_SENSOR_Init+0x86>
      {
        component_functions |= MOTION_GYRO;
 800a612:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a614:	f043 0301 	orr.w	r3, r3, #1
 800a618:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      if (cap.Magneto == 1U)
 800a61a:	7bbb      	ldrb	r3, [r7, #14]
 800a61c:	2b01      	cmp	r3, #1
 800a61e:	d16c      	bne.n	800a6fa <IKS01A3_MOTION_SENSOR_Init+0x166>
      {
        component_functions |= MOTION_MAGNETO;
 800a620:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a622:	f043 0304 	orr.w	r3, r3, #4
 800a626:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      break;
 800a628:	e067      	b.n	800a6fa <IKS01A3_MOTION_SENSOR_Init+0x166>
#endif

#if (USE_IKS01A3_MOTION_SENSOR_LIS2DW12_0 == 1)
    case IKS01A3_LIS2DW12_0:
      if (LIS2DW12_0_Probe(Functions) != BSP_ERROR_NONE)
 800a62a:	6838      	ldr	r0, [r7, #0]
 800a62c:	f000 f9f4 	bl	800aa18 <LIS2DW12_0_Probe>
 800a630:	4603      	mov	r3, r0
 800a632:	2b00      	cmp	r3, #0
 800a634:	d002      	beq.n	800a63c <IKS01A3_MOTION_SENSOR_Init+0xa8>
      {
        return BSP_ERROR_NO_INIT;
 800a636:	f04f 33ff 	mov.w	r3, #4294967295
 800a63a:	e09a      	b.n	800a772 <IKS01A3_MOTION_SENSOR_Init+0x1de>
      }
      if (MotionDrv[Instance]->GetCapabilities(MotionCompObj[Instance], (void *)&cap) != BSP_ERROR_NONE)
 800a63c:	4a4f      	ldr	r2, [pc, #316]	; (800a77c <IKS01A3_MOTION_SENSOR_Init+0x1e8>)
 800a63e:	687b      	ldr	r3, [r7, #4]
 800a640:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a644:	68db      	ldr	r3, [r3, #12]
 800a646:	494e      	ldr	r1, [pc, #312]	; (800a780 <IKS01A3_MOTION_SENSOR_Init+0x1ec>)
 800a648:	687a      	ldr	r2, [r7, #4]
 800a64a:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800a64e:	f107 010c 	add.w	r1, r7, #12
 800a652:	4610      	mov	r0, r2
 800a654:	4798      	blx	r3
 800a656:	4603      	mov	r3, r0
 800a658:	2b00      	cmp	r3, #0
 800a65a:	d002      	beq.n	800a662 <IKS01A3_MOTION_SENSOR_Init+0xce>
      {
        return BSP_ERROR_UNKNOWN_COMPONENT;
 800a65c:	f06f 0306 	mvn.w	r3, #6
 800a660:	e087      	b.n	800a772 <IKS01A3_MOTION_SENSOR_Init+0x1de>
      }
      if (cap.Acc == 1U)
 800a662:	7b3b      	ldrb	r3, [r7, #12]
 800a664:	2b01      	cmp	r3, #1
 800a666:	d103      	bne.n	800a670 <IKS01A3_MOTION_SENSOR_Init+0xdc>
      {
        component_functions |= MOTION_ACCELERO;
 800a668:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a66a:	f043 0302 	orr.w	r3, r3, #2
 800a66e:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      if (cap.Gyro == 1U)
 800a670:	7b7b      	ldrb	r3, [r7, #13]
 800a672:	2b01      	cmp	r3, #1
 800a674:	d103      	bne.n	800a67e <IKS01A3_MOTION_SENSOR_Init+0xea>
      {
        component_functions |= MOTION_GYRO;
 800a676:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a678:	f043 0301 	orr.w	r3, r3, #1
 800a67c:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      if (cap.Magneto == 1U)
 800a67e:	7bbb      	ldrb	r3, [r7, #14]
 800a680:	2b01      	cmp	r3, #1
 800a682:	d13c      	bne.n	800a6fe <IKS01A3_MOTION_SENSOR_Init+0x16a>
      {
        component_functions |= MOTION_MAGNETO;
 800a684:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a686:	f043 0304 	orr.w	r3, r3, #4
 800a68a:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      break;
 800a68c:	e037      	b.n	800a6fe <IKS01A3_MOTION_SENSOR_Init+0x16a>
#endif

#if (USE_IKS01A3_MOTION_SENSOR_LIS2MDL_0 == 1)
    case IKS01A3_LIS2MDL_0:
      if (LIS2MDL_0_Probe(Functions) != BSP_ERROR_NONE)
 800a68e:	6838      	ldr	r0, [r7, #0]
 800a690:	f000 fa6a 	bl	800ab68 <LIS2MDL_0_Probe>
 800a694:	4603      	mov	r3, r0
 800a696:	2b00      	cmp	r3, #0
 800a698:	d002      	beq.n	800a6a0 <IKS01A3_MOTION_SENSOR_Init+0x10c>
      {
        return BSP_ERROR_NO_INIT;
 800a69a:	f04f 33ff 	mov.w	r3, #4294967295
 800a69e:	e068      	b.n	800a772 <IKS01A3_MOTION_SENSOR_Init+0x1de>
      }
      if (MotionDrv[Instance]->GetCapabilities(MotionCompObj[Instance], (void *)&cap) != BSP_ERROR_NONE)
 800a6a0:	4a36      	ldr	r2, [pc, #216]	; (800a77c <IKS01A3_MOTION_SENSOR_Init+0x1e8>)
 800a6a2:	687b      	ldr	r3, [r7, #4]
 800a6a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a6a8:	68db      	ldr	r3, [r3, #12]
 800a6aa:	4935      	ldr	r1, [pc, #212]	; (800a780 <IKS01A3_MOTION_SENSOR_Init+0x1ec>)
 800a6ac:	687a      	ldr	r2, [r7, #4]
 800a6ae:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800a6b2:	f107 010c 	add.w	r1, r7, #12
 800a6b6:	4610      	mov	r0, r2
 800a6b8:	4798      	blx	r3
 800a6ba:	4603      	mov	r3, r0
 800a6bc:	2b00      	cmp	r3, #0
 800a6be:	d002      	beq.n	800a6c6 <IKS01A3_MOTION_SENSOR_Init+0x132>
      {
        return BSP_ERROR_UNKNOWN_COMPONENT;
 800a6c0:	f06f 0306 	mvn.w	r3, #6
 800a6c4:	e055      	b.n	800a772 <IKS01A3_MOTION_SENSOR_Init+0x1de>
      }
      if (cap.Acc == 1U)
 800a6c6:	7b3b      	ldrb	r3, [r7, #12]
 800a6c8:	2b01      	cmp	r3, #1
 800a6ca:	d103      	bne.n	800a6d4 <IKS01A3_MOTION_SENSOR_Init+0x140>
      {
        component_functions |= MOTION_ACCELERO;
 800a6cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a6ce:	f043 0302 	orr.w	r3, r3, #2
 800a6d2:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      if (cap.Gyro == 1U)
 800a6d4:	7b7b      	ldrb	r3, [r7, #13]
 800a6d6:	2b01      	cmp	r3, #1
 800a6d8:	d103      	bne.n	800a6e2 <IKS01A3_MOTION_SENSOR_Init+0x14e>
      {
        component_functions |= MOTION_GYRO;
 800a6da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a6dc:	f043 0301 	orr.w	r3, r3, #1
 800a6e0:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      if (cap.Magneto == 1U)
 800a6e2:	7bbb      	ldrb	r3, [r7, #14]
 800a6e4:	2b01      	cmp	r3, #1
 800a6e6:	d10c      	bne.n	800a702 <IKS01A3_MOTION_SENSOR_Init+0x16e>
      {
        component_functions |= MOTION_MAGNETO;
 800a6e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a6ea:	f043 0304 	orr.w	r3, r3, #4
 800a6ee:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      break;
 800a6f0:	e007      	b.n	800a702 <IKS01A3_MOTION_SENSOR_Init+0x16e>
      }
      break;
#endif

    default:
      ret = BSP_ERROR_WRONG_PARAM;
 800a6f2:	f06f 0301 	mvn.w	r3, #1
 800a6f6:	637b      	str	r3, [r7, #52]	; 0x34
      break;
 800a6f8:	e004      	b.n	800a704 <IKS01A3_MOTION_SENSOR_Init+0x170>
      break;
 800a6fa:	bf00      	nop
 800a6fc:	e002      	b.n	800a704 <IKS01A3_MOTION_SENSOR_Init+0x170>
      break;
 800a6fe:	bf00      	nop
 800a700:	e000      	b.n	800a704 <IKS01A3_MOTION_SENSOR_Init+0x170>
      break;
 800a702:	bf00      	nop
  }

  if (ret != BSP_ERROR_NONE)
 800a704:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a706:	2b00      	cmp	r3, #0
 800a708:	d001      	beq.n	800a70e <IKS01A3_MOTION_SENSOR_Init+0x17a>
  {
    return ret;
 800a70a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a70c:	e031      	b.n	800a772 <IKS01A3_MOTION_SENSOR_Init+0x1de>
  }

  for (i = 0; i < IKS01A3_MOTION_FUNCTIONS_NBR; i++)
 800a70e:	2300      	movs	r3, #0
 800a710:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a712:	e02a      	b.n	800a76a <IKS01A3_MOTION_SENSOR_Init+0x1d6>
  {
    if (((Functions & function) == function) && ((component_functions & function) == function))
 800a714:	683a      	ldr	r2, [r7, #0]
 800a716:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a718:	4013      	ands	r3, r2
 800a71a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a71c:	429a      	cmp	r2, r3
 800a71e:	d11e      	bne.n	800a75e <IKS01A3_MOTION_SENSOR_Init+0x1ca>
 800a720:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a722:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a724:	4013      	ands	r3, r2
 800a726:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a728:	429a      	cmp	r2, r3
 800a72a:	d118      	bne.n	800a75e <IKS01A3_MOTION_SENSOR_Init+0x1ca>
    {
      if (MotionFuncDrv[Instance][FunctionIndex[function]]->Enable(MotionCompObj[Instance]) != BSP_ERROR_NONE)
 800a72c:	4a15      	ldr	r2, [pc, #84]	; (800a784 <IKS01A3_MOTION_SENSOR_Init+0x1f0>)
 800a72e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a730:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800a734:	4814      	ldr	r0, [pc, #80]	; (800a788 <IKS01A3_MOTION_SENSOR_Init+0x1f4>)
 800a736:	687a      	ldr	r2, [r7, #4]
 800a738:	4613      	mov	r3, r2
 800a73a:	005b      	lsls	r3, r3, #1
 800a73c:	4413      	add	r3, r2
 800a73e:	440b      	add	r3, r1
 800a740:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 800a744:	681b      	ldr	r3, [r3, #0]
 800a746:	490e      	ldr	r1, [pc, #56]	; (800a780 <IKS01A3_MOTION_SENSOR_Init+0x1ec>)
 800a748:	687a      	ldr	r2, [r7, #4]
 800a74a:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800a74e:	4610      	mov	r0, r2
 800a750:	4798      	blx	r3
 800a752:	4603      	mov	r3, r0
 800a754:	2b00      	cmp	r3, #0
 800a756:	d002      	beq.n	800a75e <IKS01A3_MOTION_SENSOR_Init+0x1ca>
      {
        return BSP_ERROR_COMPONENT_FAILURE;
 800a758:	f06f 0304 	mvn.w	r3, #4
 800a75c:	e009      	b.n	800a772 <IKS01A3_MOTION_SENSOR_Init+0x1de>
      }
    }
    function = function << 1;
 800a75e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a760:	005b      	lsls	r3, r3, #1
 800a762:	633b      	str	r3, [r7, #48]	; 0x30
  for (i = 0; i < IKS01A3_MOTION_FUNCTIONS_NBR; i++)
 800a764:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a766:	3301      	adds	r3, #1
 800a768:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a76a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a76c:	2b02      	cmp	r3, #2
 800a76e:	d9d1      	bls.n	800a714 <IKS01A3_MOTION_SENSOR_Init+0x180>
  }

  return ret;
 800a770:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800a772:	4618      	mov	r0, r3
 800a774:	3738      	adds	r7, #56	; 0x38
 800a776:	46bd      	mov	sp, r7
 800a778:	bd80      	pop	{r7, pc}
 800a77a:	bf00      	nop
 800a77c:	2000057c 	.word	0x2000057c
 800a780:	2000054c 	.word	0x2000054c
 800a784:	20000170 	.word	0x20000170
 800a788:	20000558 	.word	0x20000558

0800a78c <IKS01A3_MOTION_SENSOR_Enable>:
  *         - MOTION_ACCELERO for instance 1
  *         - MOTION_MAGNETO for instance 2
  * @retval BSP status
  */
int32_t IKS01A3_MOTION_SENSOR_Enable(uint32_t Instance, uint32_t Function)
{
 800a78c:	b580      	push	{r7, lr}
 800a78e:	b084      	sub	sp, #16
 800a790:	af00      	add	r7, sp, #0
 800a792:	6078      	str	r0, [r7, #4]
 800a794:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (Instance >= IKS01A3_MOTION_INSTANCES_NBR)
 800a796:	687b      	ldr	r3, [r7, #4]
 800a798:	2b02      	cmp	r3, #2
 800a79a:	d903      	bls.n	800a7a4 <IKS01A3_MOTION_SENSOR_Enable+0x18>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 800a79c:	f06f 0301 	mvn.w	r3, #1
 800a7a0:	60fb      	str	r3, [r7, #12]
 800a7a2:	e028      	b.n	800a7f6 <IKS01A3_MOTION_SENSOR_Enable+0x6a>
  }
  else
  {
    if ((MotionCtx[Instance].Functions & Function) == Function)
 800a7a4:	4a16      	ldr	r2, [pc, #88]	; (800a800 <IKS01A3_MOTION_SENSOR_Enable+0x74>)
 800a7a6:	687b      	ldr	r3, [r7, #4]
 800a7a8:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800a7ac:	683b      	ldr	r3, [r7, #0]
 800a7ae:	4013      	ands	r3, r2
 800a7b0:	683a      	ldr	r2, [r7, #0]
 800a7b2:	429a      	cmp	r2, r3
 800a7b4:	d11c      	bne.n	800a7f0 <IKS01A3_MOTION_SENSOR_Enable+0x64>
    {
      if (MotionFuncDrv[Instance][FunctionIndex[Function]]->Enable(MotionCompObj[Instance]) != BSP_ERROR_NONE)
 800a7b6:	4a13      	ldr	r2, [pc, #76]	; (800a804 <IKS01A3_MOTION_SENSOR_Enable+0x78>)
 800a7b8:	683b      	ldr	r3, [r7, #0]
 800a7ba:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800a7be:	4812      	ldr	r0, [pc, #72]	; (800a808 <IKS01A3_MOTION_SENSOR_Enable+0x7c>)
 800a7c0:	687a      	ldr	r2, [r7, #4]
 800a7c2:	4613      	mov	r3, r2
 800a7c4:	005b      	lsls	r3, r3, #1
 800a7c6:	4413      	add	r3, r2
 800a7c8:	440b      	add	r3, r1
 800a7ca:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 800a7ce:	681b      	ldr	r3, [r3, #0]
 800a7d0:	490e      	ldr	r1, [pc, #56]	; (800a80c <IKS01A3_MOTION_SENSOR_Enable+0x80>)
 800a7d2:	687a      	ldr	r2, [r7, #4]
 800a7d4:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800a7d8:	4610      	mov	r0, r2
 800a7da:	4798      	blx	r3
 800a7dc:	4603      	mov	r3, r0
 800a7de:	2b00      	cmp	r3, #0
 800a7e0:	d003      	beq.n	800a7ea <IKS01A3_MOTION_SENSOR_Enable+0x5e>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800a7e2:	f06f 0304 	mvn.w	r3, #4
 800a7e6:	60fb      	str	r3, [r7, #12]
 800a7e8:	e005      	b.n	800a7f6 <IKS01A3_MOTION_SENSOR_Enable+0x6a>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 800a7ea:	2300      	movs	r3, #0
 800a7ec:	60fb      	str	r3, [r7, #12]
 800a7ee:	e002      	b.n	800a7f6 <IKS01A3_MOTION_SENSOR_Enable+0x6a>
      }
    }
    else
    {
      ret = BSP_ERROR_WRONG_PARAM;
 800a7f0:	f06f 0301 	mvn.w	r3, #1
 800a7f4:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 800a7f6:	68fb      	ldr	r3, [r7, #12]
}
 800a7f8:	4618      	mov	r0, r3
 800a7fa:	3710      	adds	r7, #16
 800a7fc:	46bd      	mov	sp, r7
 800a7fe:	bd80      	pop	{r7, pc}
 800a800:	20000588 	.word	0x20000588
 800a804:	20000170 	.word	0x20000170
 800a808:	20000558 	.word	0x20000558
 800a80c:	2000054c 	.word	0x2000054c

0800a810 <IKS01A3_MOTION_SENSOR_GetAxes>:
  *         - MOTION_MAGNETO for instance 2
  * @param  Axes pointer to axes data structure
  * @retval BSP status
  */
int32_t IKS01A3_MOTION_SENSOR_GetAxes(uint32_t Instance, uint32_t Function, IKS01A3_MOTION_SENSOR_Axes_t *Axes)
{
 800a810:	b580      	push	{r7, lr}
 800a812:	b086      	sub	sp, #24
 800a814:	af00      	add	r7, sp, #0
 800a816:	60f8      	str	r0, [r7, #12]
 800a818:	60b9      	str	r1, [r7, #8]
 800a81a:	607a      	str	r2, [r7, #4]
  int32_t ret;

  if (Instance >= IKS01A3_MOTION_INSTANCES_NBR)
 800a81c:	68fb      	ldr	r3, [r7, #12]
 800a81e:	2b02      	cmp	r3, #2
 800a820:	d903      	bls.n	800a82a <IKS01A3_MOTION_SENSOR_GetAxes+0x1a>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 800a822:	f06f 0301 	mvn.w	r3, #1
 800a826:	617b      	str	r3, [r7, #20]
 800a828:	e029      	b.n	800a87e <IKS01A3_MOTION_SENSOR_GetAxes+0x6e>
  }
  else
  {
    if ((MotionCtx[Instance].Functions & Function) == Function)
 800a82a:	4a17      	ldr	r2, [pc, #92]	; (800a888 <IKS01A3_MOTION_SENSOR_GetAxes+0x78>)
 800a82c:	68fb      	ldr	r3, [r7, #12]
 800a82e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800a832:	68bb      	ldr	r3, [r7, #8]
 800a834:	4013      	ands	r3, r2
 800a836:	68ba      	ldr	r2, [r7, #8]
 800a838:	429a      	cmp	r2, r3
 800a83a:	d11d      	bne.n	800a878 <IKS01A3_MOTION_SENSOR_GetAxes+0x68>
    {
      if (MotionFuncDrv[Instance][FunctionIndex[Function]]->GetAxes(MotionCompObj[Instance], Axes) != BSP_ERROR_NONE)
 800a83c:	4a13      	ldr	r2, [pc, #76]	; (800a88c <IKS01A3_MOTION_SENSOR_GetAxes+0x7c>)
 800a83e:	68bb      	ldr	r3, [r7, #8]
 800a840:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800a844:	4812      	ldr	r0, [pc, #72]	; (800a890 <IKS01A3_MOTION_SENSOR_GetAxes+0x80>)
 800a846:	68fa      	ldr	r2, [r7, #12]
 800a848:	4613      	mov	r3, r2
 800a84a:	005b      	lsls	r3, r3, #1
 800a84c:	4413      	add	r3, r2
 800a84e:	440b      	add	r3, r1
 800a850:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 800a854:	69db      	ldr	r3, [r3, #28]
 800a856:	490f      	ldr	r1, [pc, #60]	; (800a894 <IKS01A3_MOTION_SENSOR_GetAxes+0x84>)
 800a858:	68fa      	ldr	r2, [r7, #12]
 800a85a:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800a85e:	6879      	ldr	r1, [r7, #4]
 800a860:	4610      	mov	r0, r2
 800a862:	4798      	blx	r3
 800a864:	4603      	mov	r3, r0
 800a866:	2b00      	cmp	r3, #0
 800a868:	d003      	beq.n	800a872 <IKS01A3_MOTION_SENSOR_GetAxes+0x62>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800a86a:	f06f 0304 	mvn.w	r3, #4
 800a86e:	617b      	str	r3, [r7, #20]
 800a870:	e005      	b.n	800a87e <IKS01A3_MOTION_SENSOR_GetAxes+0x6e>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 800a872:	2300      	movs	r3, #0
 800a874:	617b      	str	r3, [r7, #20]
 800a876:	e002      	b.n	800a87e <IKS01A3_MOTION_SENSOR_GetAxes+0x6e>
      }
    }
    else
    {
      ret = BSP_ERROR_WRONG_PARAM;
 800a878:	f06f 0301 	mvn.w	r3, #1
 800a87c:	617b      	str	r3, [r7, #20]
    }
  }

  return ret;
 800a87e:	697b      	ldr	r3, [r7, #20]
}
 800a880:	4618      	mov	r0, r3
 800a882:	3718      	adds	r7, #24
 800a884:	46bd      	mov	sp, r7
 800a886:	bd80      	pop	{r7, pc}
 800a888:	20000588 	.word	0x20000588
 800a88c:	20000170 	.word	0x20000170
 800a890:	20000558 	.word	0x20000558
 800a894:	2000054c 	.word	0x2000054c

0800a898 <LSM6DSO_0_Probe>:
/**
  * @brief  Register Bus IOs for instance 0 if component ID is OK
  * @retval BSP status
  */
static int32_t LSM6DSO_0_Probe(uint32_t Functions)
{
 800a898:	b580      	push	{r7, lr}
 800a89a:	b094      	sub	sp, #80	; 0x50
 800a89c:	af00      	add	r7, sp, #0
 800a89e:	6078      	str	r0, [r7, #4]
  LSM6DSO_IO_t            io_ctx;
  uint8_t                 id;
  static LSM6DSO_Object_t lsm6dso_obj_0;
  LSM6DSO_Capabilities_t  cap;
  int32_t ret = BSP_ERROR_NONE;
 800a8a0:	2300      	movs	r3, #0
 800a8a2:	64fb      	str	r3, [r7, #76]	; 0x4c

  /* Configure the accelero driver */
  io_ctx.BusType     = LSM6DSO_I2C_BUS; /* I2C */
 800a8a4:	2300      	movs	r3, #0
 800a8a6:	637b      	str	r3, [r7, #52]	; 0x34
  io_ctx.Address     = LSM6DSO_I2C_ADD_H;
 800a8a8:	23d7      	movs	r3, #215	; 0xd7
 800a8aa:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  io_ctx.Init        = IKS01A3_I2C_Init;
 800a8ae:	4b4b      	ldr	r3, [pc, #300]	; (800a9dc <LSM6DSO_0_Probe+0x144>)
 800a8b0:	62fb      	str	r3, [r7, #44]	; 0x2c
  io_ctx.DeInit      = IKS01A3_I2C_DeInit;
 800a8b2:	4b4b      	ldr	r3, [pc, #300]	; (800a9e0 <LSM6DSO_0_Probe+0x148>)
 800a8b4:	633b      	str	r3, [r7, #48]	; 0x30
  io_ctx.ReadReg     = IKS01A3_I2C_ReadReg;
 800a8b6:	4b4b      	ldr	r3, [pc, #300]	; (800a9e4 <LSM6DSO_0_Probe+0x14c>)
 800a8b8:	643b      	str	r3, [r7, #64]	; 0x40
  io_ctx.WriteReg    = IKS01A3_I2C_WriteReg;
 800a8ba:	4b4b      	ldr	r3, [pc, #300]	; (800a9e8 <LSM6DSO_0_Probe+0x150>)
 800a8bc:	63fb      	str	r3, [r7, #60]	; 0x3c
  io_ctx.GetTick     = IKS01A3_GetTick;
 800a8be:	4b4b      	ldr	r3, [pc, #300]	; (800a9ec <LSM6DSO_0_Probe+0x154>)
 800a8c0:	647b      	str	r3, [r7, #68]	; 0x44
  io_ctx.Delay       = IKS01A3_Delay;
 800a8c2:	4b4b      	ldr	r3, [pc, #300]	; (800a9f0 <LSM6DSO_0_Probe+0x158>)
 800a8c4:	64bb      	str	r3, [r7, #72]	; 0x48

  if (LSM6DSO_RegisterBusIO(&lsm6dso_obj_0, &io_ctx) != LSM6DSO_OK)
 800a8c6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800a8ca:	4619      	mov	r1, r3
 800a8cc:	4849      	ldr	r0, [pc, #292]	; (800a9f4 <LSM6DSO_0_Probe+0x15c>)
 800a8ce:	f7fc fdf3 	bl	80074b8 <LSM6DSO_RegisterBusIO>
 800a8d2:	4603      	mov	r3, r0
 800a8d4:	2b00      	cmp	r3, #0
 800a8d6:	d003      	beq.n	800a8e0 <LSM6DSO_0_Probe+0x48>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800a8d8:	f06f 0306 	mvn.w	r3, #6
 800a8dc:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a8de:	e077      	b.n	800a9d0 <LSM6DSO_0_Probe+0x138>
  }
  else if (LSM6DSO_ReadID(&lsm6dso_obj_0, &id) != LSM6DSO_OK)
 800a8e0:	f107 032b 	add.w	r3, r7, #43	; 0x2b
 800a8e4:	4619      	mov	r1, r3
 800a8e6:	4843      	ldr	r0, [pc, #268]	; (800a9f4 <LSM6DSO_0_Probe+0x15c>)
 800a8e8:	f7fc feec 	bl	80076c4 <LSM6DSO_ReadID>
 800a8ec:	4603      	mov	r3, r0
 800a8ee:	2b00      	cmp	r3, #0
 800a8f0:	d003      	beq.n	800a8fa <LSM6DSO_0_Probe+0x62>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800a8f2:	f06f 0306 	mvn.w	r3, #6
 800a8f6:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a8f8:	e06a      	b.n	800a9d0 <LSM6DSO_0_Probe+0x138>
  }
  else if (id != LSM6DSO_ID)
 800a8fa:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800a8fe:	2b6c      	cmp	r3, #108	; 0x6c
 800a900:	d003      	beq.n	800a90a <LSM6DSO_0_Probe+0x72>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800a902:	f06f 0306 	mvn.w	r3, #6
 800a906:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a908:	e062      	b.n	800a9d0 <LSM6DSO_0_Probe+0x138>
  }
  else
  {
    (void)LSM6DSO_GetCapabilities(&lsm6dso_obj_0, &cap);
 800a90a:	f107 030c 	add.w	r3, r7, #12
 800a90e:	4619      	mov	r1, r3
 800a910:	4838      	ldr	r0, [pc, #224]	; (800a9f4 <LSM6DSO_0_Probe+0x15c>)
 800a912:	f7fc feed 	bl	80076f0 <LSM6DSO_GetCapabilities>
    MotionCtx[IKS01A3_LSM6DSO_0].Functions = ((uint32_t)cap.Gyro) | ((uint32_t)cap.Acc << 1) | ((uint32_t)cap.Magneto << 2);
 800a916:	7b7b      	ldrb	r3, [r7, #13]
 800a918:	461a      	mov	r2, r3
 800a91a:	7b3b      	ldrb	r3, [r7, #12]
 800a91c:	005b      	lsls	r3, r3, #1
 800a91e:	431a      	orrs	r2, r3
 800a920:	7bbb      	ldrb	r3, [r7, #14]
 800a922:	009b      	lsls	r3, r3, #2
 800a924:	4313      	orrs	r3, r2
 800a926:	4a34      	ldr	r2, [pc, #208]	; (800a9f8 <LSM6DSO_0_Probe+0x160>)
 800a928:	6013      	str	r3, [r2, #0]

    MotionCompObj[IKS01A3_LSM6DSO_0] = &lsm6dso_obj_0;
 800a92a:	4b34      	ldr	r3, [pc, #208]	; (800a9fc <LSM6DSO_0_Probe+0x164>)
 800a92c:	4a31      	ldr	r2, [pc, #196]	; (800a9f4 <LSM6DSO_0_Probe+0x15c>)
 800a92e:	601a      	str	r2, [r3, #0]
    /* The second cast (void *) is added to bypass Misra R11.3 rule */
    MotionDrv[IKS01A3_LSM6DSO_0] = (MOTION_SENSOR_CommonDrv_t *)(void *)&LSM6DSO_COMMON_Driver;
 800a930:	4b33      	ldr	r3, [pc, #204]	; (800aa00 <LSM6DSO_0_Probe+0x168>)
 800a932:	4a34      	ldr	r2, [pc, #208]	; (800aa04 <LSM6DSO_0_Probe+0x16c>)
 800a934:	601a      	str	r2, [r3, #0]

    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_GYRO) == MOTION_GYRO) && (cap.Gyro == 1U))
 800a936:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a938:	2b00      	cmp	r3, #0
 800a93a:	d11d      	bne.n	800a978 <LSM6DSO_0_Probe+0xe0>
 800a93c:	687b      	ldr	r3, [r7, #4]
 800a93e:	f003 0301 	and.w	r3, r3, #1
 800a942:	2b00      	cmp	r3, #0
 800a944:	d018      	beq.n	800a978 <LSM6DSO_0_Probe+0xe0>
 800a946:	7b7b      	ldrb	r3, [r7, #13]
 800a948:	2b01      	cmp	r3, #1
 800a94a:	d115      	bne.n	800a978 <LSM6DSO_0_Probe+0xe0>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      MotionFuncDrv[IKS01A3_LSM6DSO_0][FunctionIndex[MOTION_GYRO]] = (MOTION_SENSOR_FuncDrv_t *)(void *)&LSM6DSO_GYRO_Driver;
 800a94c:	4b2e      	ldr	r3, [pc, #184]	; (800aa08 <LSM6DSO_0_Probe+0x170>)
 800a94e:	685b      	ldr	r3, [r3, #4]
 800a950:	4a2e      	ldr	r2, [pc, #184]	; (800aa0c <LSM6DSO_0_Probe+0x174>)
 800a952:	492f      	ldr	r1, [pc, #188]	; (800aa10 <LSM6DSO_0_Probe+0x178>)
 800a954:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

      if (MotionDrv[IKS01A3_LSM6DSO_0]->Init(MotionCompObj[IKS01A3_LSM6DSO_0]) != LSM6DSO_OK)
 800a958:	4b29      	ldr	r3, [pc, #164]	; (800aa00 <LSM6DSO_0_Probe+0x168>)
 800a95a:	681b      	ldr	r3, [r3, #0]
 800a95c:	681b      	ldr	r3, [r3, #0]
 800a95e:	4a27      	ldr	r2, [pc, #156]	; (800a9fc <LSM6DSO_0_Probe+0x164>)
 800a960:	6812      	ldr	r2, [r2, #0]
 800a962:	4610      	mov	r0, r2
 800a964:	4798      	blx	r3
 800a966:	4603      	mov	r3, r0
 800a968:	2b00      	cmp	r3, #0
 800a96a:	d003      	beq.n	800a974 <LSM6DSO_0_Probe+0xdc>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800a96c:	f06f 0304 	mvn.w	r3, #4
 800a970:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a972:	e001      	b.n	800a978 <LSM6DSO_0_Probe+0xe0>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 800a974:	2300      	movs	r3, #0
 800a976:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_ACCELERO) == MOTION_ACCELERO) && (cap.Acc == 1U))
 800a978:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a97a:	2b00      	cmp	r3, #0
 800a97c:	d11d      	bne.n	800a9ba <LSM6DSO_0_Probe+0x122>
 800a97e:	687b      	ldr	r3, [r7, #4]
 800a980:	f003 0302 	and.w	r3, r3, #2
 800a984:	2b00      	cmp	r3, #0
 800a986:	d018      	beq.n	800a9ba <LSM6DSO_0_Probe+0x122>
 800a988:	7b3b      	ldrb	r3, [r7, #12]
 800a98a:	2b01      	cmp	r3, #1
 800a98c:	d115      	bne.n	800a9ba <LSM6DSO_0_Probe+0x122>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      MotionFuncDrv[IKS01A3_LSM6DSO_0][FunctionIndex[MOTION_ACCELERO]] = (MOTION_SENSOR_FuncDrv_t *)(
 800a98e:	4b1e      	ldr	r3, [pc, #120]	; (800aa08 <LSM6DSO_0_Probe+0x170>)
 800a990:	689b      	ldr	r3, [r3, #8]
 800a992:	4a1e      	ldr	r2, [pc, #120]	; (800aa0c <LSM6DSO_0_Probe+0x174>)
 800a994:	491f      	ldr	r1, [pc, #124]	; (800aa14 <LSM6DSO_0_Probe+0x17c>)
 800a996:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                                                                           void *)&LSM6DSO_ACC_Driver;

      if (MotionDrv[IKS01A3_LSM6DSO_0]->Init(MotionCompObj[IKS01A3_LSM6DSO_0]) != LSM6DSO_OK)
 800a99a:	4b19      	ldr	r3, [pc, #100]	; (800aa00 <LSM6DSO_0_Probe+0x168>)
 800a99c:	681b      	ldr	r3, [r3, #0]
 800a99e:	681b      	ldr	r3, [r3, #0]
 800a9a0:	4a16      	ldr	r2, [pc, #88]	; (800a9fc <LSM6DSO_0_Probe+0x164>)
 800a9a2:	6812      	ldr	r2, [r2, #0]
 800a9a4:	4610      	mov	r0, r2
 800a9a6:	4798      	blx	r3
 800a9a8:	4603      	mov	r3, r0
 800a9aa:	2b00      	cmp	r3, #0
 800a9ac:	d003      	beq.n	800a9b6 <LSM6DSO_0_Probe+0x11e>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800a9ae:	f06f 0304 	mvn.w	r3, #4
 800a9b2:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a9b4:	e001      	b.n	800a9ba <LSM6DSO_0_Probe+0x122>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 800a9b6:	2300      	movs	r3, #0
 800a9b8:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_MAGNETO) == MOTION_MAGNETO))
 800a9ba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a9bc:	2b00      	cmp	r3, #0
 800a9be:	d107      	bne.n	800a9d0 <LSM6DSO_0_Probe+0x138>
 800a9c0:	687b      	ldr	r3, [r7, #4]
 800a9c2:	f003 0304 	and.w	r3, r3, #4
 800a9c6:	2b00      	cmp	r3, #0
 800a9c8:	d002      	beq.n	800a9d0 <LSM6DSO_0_Probe+0x138>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 800a9ca:	f06f 0304 	mvn.w	r3, #4
 800a9ce:	64fb      	str	r3, [r7, #76]	; 0x4c
    }
  }
  return ret;
 800a9d0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
}
 800a9d2:	4618      	mov	r0, r3
 800a9d4:	3750      	adds	r7, #80	; 0x50
 800a9d6:	46bd      	mov	sp, r7
 800a9d8:	bd80      	pop	{r7, pc}
 800a9da:	bf00      	nop
 800a9dc:	08002f01 	.word	0x08002f01
 800a9e0:	08002f65 	.word	0x08002f65
 800a9e4:	08003019 	.word	0x08003019
 800a9e8:	08002fb5 	.word	0x08002fb5
 800a9ec:	0800307d 	.word	0x0800307d
 800a9f0:	0800b17d 	.word	0x0800b17d
 800a9f4:	20000594 	.word	0x20000594
 800a9f8:	20000588 	.word	0x20000588
 800a9fc:	2000054c 	.word	0x2000054c
 800aa00:	2000057c 	.word	0x2000057c
 800aa04:	200000e0 	.word	0x200000e0
 800aa08:	20000170 	.word	0x20000170
 800aa0c:	20000558 	.word	0x20000558
 800aa10:	20000114 	.word	0x20000114
 800aa14:	200000f0 	.word	0x200000f0

0800aa18 <LIS2DW12_0_Probe>:
/**
  * @brief  Register Bus IOs for instance 1 if component ID is OK
  * @retval BSP status
  */
static int32_t LIS2DW12_0_Probe(uint32_t Functions)
{
 800aa18:	b580      	push	{r7, lr}
 800aa1a:	b094      	sub	sp, #80	; 0x50
 800aa1c:	af00      	add	r7, sp, #0
 800aa1e:	6078      	str	r0, [r7, #4]
  LIS2DW12_IO_t            io_ctx;
  uint8_t                  id;
  static LIS2DW12_Object_t lis2dw12_obj_0;
  LIS2DW12_Capabilities_t  cap;
  int32_t ret = BSP_ERROR_NONE;
 800aa20:	2300      	movs	r3, #0
 800aa22:	64fb      	str	r3, [r7, #76]	; 0x4c

  /* Configure the accelero driver */
  io_ctx.BusType     = LIS2DW12_I2C_BUS; /* I2C */
 800aa24:	2300      	movs	r3, #0
 800aa26:	637b      	str	r3, [r7, #52]	; 0x34
  io_ctx.Address     = LIS2DW12_I2C_ADD_H;
 800aa28:	2333      	movs	r3, #51	; 0x33
 800aa2a:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  io_ctx.Init        = IKS01A3_I2C_Init;
 800aa2e:	4b40      	ldr	r3, [pc, #256]	; (800ab30 <LIS2DW12_0_Probe+0x118>)
 800aa30:	62fb      	str	r3, [r7, #44]	; 0x2c
  io_ctx.DeInit      = IKS01A3_I2C_DeInit;
 800aa32:	4b40      	ldr	r3, [pc, #256]	; (800ab34 <LIS2DW12_0_Probe+0x11c>)
 800aa34:	633b      	str	r3, [r7, #48]	; 0x30
  io_ctx.ReadReg     = IKS01A3_I2C_ReadReg;
 800aa36:	4b40      	ldr	r3, [pc, #256]	; (800ab38 <LIS2DW12_0_Probe+0x120>)
 800aa38:	643b      	str	r3, [r7, #64]	; 0x40
  io_ctx.WriteReg    = IKS01A3_I2C_WriteReg;
 800aa3a:	4b40      	ldr	r3, [pc, #256]	; (800ab3c <LIS2DW12_0_Probe+0x124>)
 800aa3c:	63fb      	str	r3, [r7, #60]	; 0x3c
  io_ctx.GetTick     = IKS01A3_GetTick;
 800aa3e:	4b40      	ldr	r3, [pc, #256]	; (800ab40 <LIS2DW12_0_Probe+0x128>)
 800aa40:	647b      	str	r3, [r7, #68]	; 0x44
  io_ctx.Delay       = IKS01A3_Delay;
 800aa42:	4b40      	ldr	r3, [pc, #256]	; (800ab44 <LIS2DW12_0_Probe+0x12c>)
 800aa44:	64bb      	str	r3, [r7, #72]	; 0x48

  if (LIS2DW12_RegisterBusIO(&lis2dw12_obj_0, &io_ctx) != LIS2DW12_OK)
 800aa46:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800aa4a:	4619      	mov	r1, r3
 800aa4c:	483e      	ldr	r0, [pc, #248]	; (800ab48 <LIS2DW12_0_Probe+0x130>)
 800aa4e:	f7f9 fb7f 	bl	8004150 <LIS2DW12_RegisterBusIO>
 800aa52:	4603      	mov	r3, r0
 800aa54:	2b00      	cmp	r3, #0
 800aa56:	d003      	beq.n	800aa60 <LIS2DW12_0_Probe+0x48>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800aa58:	f06f 0306 	mvn.w	r3, #6
 800aa5c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800aa5e:	e062      	b.n	800ab26 <LIS2DW12_0_Probe+0x10e>
  }
  else if (LIS2DW12_ReadID(&lis2dw12_obj_0, &id) != LIS2DW12_OK)
 800aa60:	f107 032b 	add.w	r3, r7, #43	; 0x2b
 800aa64:	4619      	mov	r1, r3
 800aa66:	4838      	ldr	r0, [pc, #224]	; (800ab48 <LIS2DW12_0_Probe+0x130>)
 800aa68:	f7f9 fc60 	bl	800432c <LIS2DW12_ReadID>
 800aa6c:	4603      	mov	r3, r0
 800aa6e:	2b00      	cmp	r3, #0
 800aa70:	d003      	beq.n	800aa7a <LIS2DW12_0_Probe+0x62>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800aa72:	f06f 0306 	mvn.w	r3, #6
 800aa76:	64fb      	str	r3, [r7, #76]	; 0x4c
 800aa78:	e055      	b.n	800ab26 <LIS2DW12_0_Probe+0x10e>
  }
  else if (id != LIS2DW12_ID)
 800aa7a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800aa7e:	2b44      	cmp	r3, #68	; 0x44
 800aa80:	d003      	beq.n	800aa8a <LIS2DW12_0_Probe+0x72>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800aa82:	f06f 0306 	mvn.w	r3, #6
 800aa86:	64fb      	str	r3, [r7, #76]	; 0x4c
 800aa88:	e04d      	b.n	800ab26 <LIS2DW12_0_Probe+0x10e>
  }
  else
  {
    (void)LIS2DW12_GetCapabilities(&lis2dw12_obj_0, &cap);
 800aa8a:	f107 030c 	add.w	r3, r7, #12
 800aa8e:	4619      	mov	r1, r3
 800aa90:	482d      	ldr	r0, [pc, #180]	; (800ab48 <LIS2DW12_0_Probe+0x130>)
 800aa92:	f7f9 fc61 	bl	8004358 <LIS2DW12_GetCapabilities>
    MotionCtx[IKS01A3_LIS2DW12_0].Functions = ((uint32_t)cap.Gyro) | ((uint32_t)cap.Acc << 1) | ((uint32_t)cap.Magneto << 2);
 800aa96:	7b7b      	ldrb	r3, [r7, #13]
 800aa98:	461a      	mov	r2, r3
 800aa9a:	7b3b      	ldrb	r3, [r7, #12]
 800aa9c:	005b      	lsls	r3, r3, #1
 800aa9e:	431a      	orrs	r2, r3
 800aaa0:	7bbb      	ldrb	r3, [r7, #14]
 800aaa2:	009b      	lsls	r3, r3, #2
 800aaa4:	4313      	orrs	r3, r2
 800aaa6:	4a29      	ldr	r2, [pc, #164]	; (800ab4c <LIS2DW12_0_Probe+0x134>)
 800aaa8:	6053      	str	r3, [r2, #4]

    MotionCompObj[IKS01A3_LIS2DW12_0] = &lis2dw12_obj_0;
 800aaaa:	4b29      	ldr	r3, [pc, #164]	; (800ab50 <LIS2DW12_0_Probe+0x138>)
 800aaac:	4a26      	ldr	r2, [pc, #152]	; (800ab48 <LIS2DW12_0_Probe+0x130>)
 800aaae:	605a      	str	r2, [r3, #4]
    /* The second cast (void *) is added to bypass Misra R11.3 rule */
    MotionDrv[IKS01A3_LIS2DW12_0] = (MOTION_SENSOR_CommonDrv_t *)(void *)&LIS2DW12_COMMON_Driver;
 800aab0:	4b28      	ldr	r3, [pc, #160]	; (800ab54 <LIS2DW12_0_Probe+0x13c>)
 800aab2:	4a29      	ldr	r2, [pc, #164]	; (800ab58 <LIS2DW12_0_Probe+0x140>)
 800aab4:	605a      	str	r2, [r3, #4]

    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_ACCELERO) == MOTION_ACCELERO) && (cap.Acc == 1U))
 800aab6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800aab8:	2b00      	cmp	r3, #0
 800aaba:	d11e      	bne.n	800aafa <LIS2DW12_0_Probe+0xe2>
 800aabc:	687b      	ldr	r3, [r7, #4]
 800aabe:	f003 0302 	and.w	r3, r3, #2
 800aac2:	2b00      	cmp	r3, #0
 800aac4:	d019      	beq.n	800aafa <LIS2DW12_0_Probe+0xe2>
 800aac6:	7b3b      	ldrb	r3, [r7, #12]
 800aac8:	2b01      	cmp	r3, #1
 800aaca:	d116      	bne.n	800aafa <LIS2DW12_0_Probe+0xe2>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      MotionFuncDrv[IKS01A3_LIS2DW12_0][FunctionIndex[MOTION_ACCELERO]] = (MOTION_SENSOR_FuncDrv_t *)(
 800aacc:	4b23      	ldr	r3, [pc, #140]	; (800ab5c <LIS2DW12_0_Probe+0x144>)
 800aace:	689b      	ldr	r3, [r3, #8]
 800aad0:	4a23      	ldr	r2, [pc, #140]	; (800ab60 <LIS2DW12_0_Probe+0x148>)
 800aad2:	3303      	adds	r3, #3
 800aad4:	4923      	ldr	r1, [pc, #140]	; (800ab64 <LIS2DW12_0_Probe+0x14c>)
 800aad6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                                                                            void *)&LIS2DW12_ACC_Driver;

      if (MotionDrv[IKS01A3_LIS2DW12_0]->Init(MotionCompObj[IKS01A3_LIS2DW12_0]) != LIS2DW12_OK)
 800aada:	4b1e      	ldr	r3, [pc, #120]	; (800ab54 <LIS2DW12_0_Probe+0x13c>)
 800aadc:	685b      	ldr	r3, [r3, #4]
 800aade:	681b      	ldr	r3, [r3, #0]
 800aae0:	4a1b      	ldr	r2, [pc, #108]	; (800ab50 <LIS2DW12_0_Probe+0x138>)
 800aae2:	6852      	ldr	r2, [r2, #4]
 800aae4:	4610      	mov	r0, r2
 800aae6:	4798      	blx	r3
 800aae8:	4603      	mov	r3, r0
 800aaea:	2b00      	cmp	r3, #0
 800aaec:	d003      	beq.n	800aaf6 <LIS2DW12_0_Probe+0xde>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800aaee:	f06f 0304 	mvn.w	r3, #4
 800aaf2:	64fb      	str	r3, [r7, #76]	; 0x4c
 800aaf4:	e001      	b.n	800aafa <LIS2DW12_0_Probe+0xe2>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 800aaf6:	2300      	movs	r3, #0
 800aaf8:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_GYRO) == MOTION_GYRO))
 800aafa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800aafc:	2b00      	cmp	r3, #0
 800aafe:	d107      	bne.n	800ab10 <LIS2DW12_0_Probe+0xf8>
 800ab00:	687b      	ldr	r3, [r7, #4]
 800ab02:	f003 0301 	and.w	r3, r3, #1
 800ab06:	2b00      	cmp	r3, #0
 800ab08:	d002      	beq.n	800ab10 <LIS2DW12_0_Probe+0xf8>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 800ab0a:	f06f 0304 	mvn.w	r3, #4
 800ab0e:	64fb      	str	r3, [r7, #76]	; 0x4c
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_MAGNETO) == MOTION_MAGNETO))
 800ab10:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ab12:	2b00      	cmp	r3, #0
 800ab14:	d107      	bne.n	800ab26 <LIS2DW12_0_Probe+0x10e>
 800ab16:	687b      	ldr	r3, [r7, #4]
 800ab18:	f003 0304 	and.w	r3, r3, #4
 800ab1c:	2b00      	cmp	r3, #0
 800ab1e:	d002      	beq.n	800ab26 <LIS2DW12_0_Probe+0x10e>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 800ab20:	f06f 0304 	mvn.w	r3, #4
 800ab24:	64fb      	str	r3, [r7, #76]	; 0x4c
    }
  }
  return ret;
 800ab26:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
}
 800ab28:	4618      	mov	r0, r3
 800ab2a:	3750      	adds	r7, #80	; 0x50
 800ab2c:	46bd      	mov	sp, r7
 800ab2e:	bd80      	pop	{r7, pc}
 800ab30:	08002f01 	.word	0x08002f01
 800ab34:	08002f65 	.word	0x08002f65
 800ab38:	08003019 	.word	0x08003019
 800ab3c:	08002fb5 	.word	0x08002fb5
 800ab40:	0800307d 	.word	0x0800307d
 800ab44:	0800b17d 	.word	0x0800b17d
 800ab48:	200005cc 	.word	0x200005cc
 800ab4c:	20000588 	.word	0x20000588
 800ab50:	2000054c 	.word	0x2000054c
 800ab54:	2000057c 	.word	0x2000057c
 800ab58:	20000040 	.word	0x20000040
 800ab5c:	20000170 	.word	0x20000170
 800ab60:	20000558 	.word	0x20000558
 800ab64:	20000050 	.word	0x20000050

0800ab68 <LIS2MDL_0_Probe>:
/**
  * @brief  Register Bus IOs for instance 1 if component ID is OK
  * @retval BSP status
  */
static int32_t LIS2MDL_0_Probe(uint32_t Functions)
{
 800ab68:	b580      	push	{r7, lr}
 800ab6a:	b094      	sub	sp, #80	; 0x50
 800ab6c:	af00      	add	r7, sp, #0
 800ab6e:	6078      	str	r0, [r7, #4]
  LIS2MDL_IO_t            io_ctx;
  uint8_t                 id;
  static LIS2MDL_Object_t lis2mdl_obj_0;
  LIS2MDL_Capabilities_t  cap;
  int32_t                 ret = BSP_ERROR_NONE;
 800ab70:	2300      	movs	r3, #0
 800ab72:	64fb      	str	r3, [r7, #76]	; 0x4c

  /* Configure the accelero driver */
  io_ctx.BusType     = LIS2MDL_I2C_BUS; /* I2C */
 800ab74:	2300      	movs	r3, #0
 800ab76:	637b      	str	r3, [r7, #52]	; 0x34
  io_ctx.Address     = LIS2MDL_I2C_ADD;
 800ab78:	233d      	movs	r3, #61	; 0x3d
 800ab7a:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  io_ctx.Init        = IKS01A3_I2C_Init;
 800ab7e:	4b40      	ldr	r3, [pc, #256]	; (800ac80 <LIS2MDL_0_Probe+0x118>)
 800ab80:	62fb      	str	r3, [r7, #44]	; 0x2c
  io_ctx.DeInit      = IKS01A3_I2C_DeInit;
 800ab82:	4b40      	ldr	r3, [pc, #256]	; (800ac84 <LIS2MDL_0_Probe+0x11c>)
 800ab84:	633b      	str	r3, [r7, #48]	; 0x30
  io_ctx.ReadReg     = IKS01A3_I2C_ReadReg;
 800ab86:	4b40      	ldr	r3, [pc, #256]	; (800ac88 <LIS2MDL_0_Probe+0x120>)
 800ab88:	643b      	str	r3, [r7, #64]	; 0x40
  io_ctx.WriteReg    = IKS01A3_I2C_WriteReg;
 800ab8a:	4b40      	ldr	r3, [pc, #256]	; (800ac8c <LIS2MDL_0_Probe+0x124>)
 800ab8c:	63fb      	str	r3, [r7, #60]	; 0x3c
  io_ctx.GetTick     = IKS01A3_GetTick;
 800ab8e:	4b40      	ldr	r3, [pc, #256]	; (800ac90 <LIS2MDL_0_Probe+0x128>)
 800ab90:	647b      	str	r3, [r7, #68]	; 0x44
  io_ctx.Delay       = IKS01A3_Delay;
 800ab92:	4b40      	ldr	r3, [pc, #256]	; (800ac94 <LIS2MDL_0_Probe+0x12c>)
 800ab94:	64bb      	str	r3, [r7, #72]	; 0x48

  if (LIS2MDL_RegisterBusIO(&lis2mdl_obj_0, &io_ctx) != LIS2MDL_OK)
 800ab96:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800ab9a:	4619      	mov	r1, r3
 800ab9c:	483e      	ldr	r0, [pc, #248]	; (800ac98 <LIS2MDL_0_Probe+0x130>)
 800ab9e:	f7fa fe2b 	bl	80057f8 <LIS2MDL_RegisterBusIO>
 800aba2:	4603      	mov	r3, r0
 800aba4:	2b00      	cmp	r3, #0
 800aba6:	d003      	beq.n	800abb0 <LIS2MDL_0_Probe+0x48>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800aba8:	f06f 0306 	mvn.w	r3, #6
 800abac:	64fb      	str	r3, [r7, #76]	; 0x4c
 800abae:	e062      	b.n	800ac76 <LIS2MDL_0_Probe+0x10e>
  }
  else if (LIS2MDL_ReadID(&lis2mdl_obj_0, &id) != LIS2MDL_OK)
 800abb0:	f107 032b 	add.w	r3, r7, #43	; 0x2b
 800abb4:	4619      	mov	r1, r3
 800abb6:	4838      	ldr	r0, [pc, #224]	; (800ac98 <LIS2MDL_0_Probe+0x130>)
 800abb8:	f7fa ff3a 	bl	8005a30 <LIS2MDL_ReadID>
 800abbc:	4603      	mov	r3, r0
 800abbe:	2b00      	cmp	r3, #0
 800abc0:	d003      	beq.n	800abca <LIS2MDL_0_Probe+0x62>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800abc2:	f06f 0306 	mvn.w	r3, #6
 800abc6:	64fb      	str	r3, [r7, #76]	; 0x4c
 800abc8:	e055      	b.n	800ac76 <LIS2MDL_0_Probe+0x10e>
  }
  else if (id != LIS2MDL_ID)
 800abca:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800abce:	2b40      	cmp	r3, #64	; 0x40
 800abd0:	d003      	beq.n	800abda <LIS2MDL_0_Probe+0x72>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800abd2:	f06f 0306 	mvn.w	r3, #6
 800abd6:	64fb      	str	r3, [r7, #76]	; 0x4c
 800abd8:	e04d      	b.n	800ac76 <LIS2MDL_0_Probe+0x10e>
  }
  else
  {
    (void)LIS2MDL_GetCapabilities(&lis2mdl_obj_0, &cap);
 800abda:	f107 030c 	add.w	r3, r7, #12
 800abde:	4619      	mov	r1, r3
 800abe0:	482d      	ldr	r0, [pc, #180]	; (800ac98 <LIS2MDL_0_Probe+0x130>)
 800abe2:	f7fa ff4b 	bl	8005a7c <LIS2MDL_GetCapabilities>
    MotionCtx[IKS01A3_LIS2MDL_0].Functions = ((uint32_t)cap.Gyro) | ((uint32_t)cap.Acc << 1) | ((uint32_t)cap.Magneto << 2);
 800abe6:	7b7b      	ldrb	r3, [r7, #13]
 800abe8:	461a      	mov	r2, r3
 800abea:	7b3b      	ldrb	r3, [r7, #12]
 800abec:	005b      	lsls	r3, r3, #1
 800abee:	431a      	orrs	r2, r3
 800abf0:	7bbb      	ldrb	r3, [r7, #14]
 800abf2:	009b      	lsls	r3, r3, #2
 800abf4:	4313      	orrs	r3, r2
 800abf6:	4a29      	ldr	r2, [pc, #164]	; (800ac9c <LIS2MDL_0_Probe+0x134>)
 800abf8:	6093      	str	r3, [r2, #8]

    MotionCompObj[IKS01A3_LIS2MDL_0] = &lis2mdl_obj_0;
 800abfa:	4b29      	ldr	r3, [pc, #164]	; (800aca0 <LIS2MDL_0_Probe+0x138>)
 800abfc:	4a26      	ldr	r2, [pc, #152]	; (800ac98 <LIS2MDL_0_Probe+0x130>)
 800abfe:	609a      	str	r2, [r3, #8]
    /* The second cast (void *) is added to bypass Misra R11.3 rule */
    MotionDrv[IKS01A3_LIS2MDL_0] = (MOTION_SENSOR_CommonDrv_t *)(void *)&LIS2MDL_COMMON_Driver;
 800ac00:	4b28      	ldr	r3, [pc, #160]	; (800aca4 <LIS2MDL_0_Probe+0x13c>)
 800ac02:	4a29      	ldr	r2, [pc, #164]	; (800aca8 <LIS2MDL_0_Probe+0x140>)
 800ac04:	609a      	str	r2, [r3, #8]

    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_MAGNETO) == MOTION_MAGNETO) && (cap.Magneto == 1U))
 800ac06:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ac08:	2b00      	cmp	r3, #0
 800ac0a:	d11e      	bne.n	800ac4a <LIS2MDL_0_Probe+0xe2>
 800ac0c:	687b      	ldr	r3, [r7, #4]
 800ac0e:	f003 0304 	and.w	r3, r3, #4
 800ac12:	2b00      	cmp	r3, #0
 800ac14:	d019      	beq.n	800ac4a <LIS2MDL_0_Probe+0xe2>
 800ac16:	7bbb      	ldrb	r3, [r7, #14]
 800ac18:	2b01      	cmp	r3, #1
 800ac1a:	d116      	bne.n	800ac4a <LIS2MDL_0_Probe+0xe2>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      MotionFuncDrv[IKS01A3_LIS2MDL_0][FunctionIndex[MOTION_MAGNETO]] = (MOTION_SENSOR_FuncDrv_t *)(
 800ac1c:	4b23      	ldr	r3, [pc, #140]	; (800acac <LIS2MDL_0_Probe+0x144>)
 800ac1e:	691b      	ldr	r3, [r3, #16]
 800ac20:	4a23      	ldr	r2, [pc, #140]	; (800acb0 <LIS2MDL_0_Probe+0x148>)
 800ac22:	3306      	adds	r3, #6
 800ac24:	4923      	ldr	r1, [pc, #140]	; (800acb4 <LIS2MDL_0_Probe+0x14c>)
 800ac26:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                                                                          void *)&LIS2MDL_MAG_Driver;

      if (MotionDrv[IKS01A3_LIS2MDL_0]->Init(MotionCompObj[IKS01A3_LIS2MDL_0]) != LIS2MDL_OK)
 800ac2a:	4b1e      	ldr	r3, [pc, #120]	; (800aca4 <LIS2MDL_0_Probe+0x13c>)
 800ac2c:	689b      	ldr	r3, [r3, #8]
 800ac2e:	681b      	ldr	r3, [r3, #0]
 800ac30:	4a1b      	ldr	r2, [pc, #108]	; (800aca0 <LIS2MDL_0_Probe+0x138>)
 800ac32:	6892      	ldr	r2, [r2, #8]
 800ac34:	4610      	mov	r0, r2
 800ac36:	4798      	blx	r3
 800ac38:	4603      	mov	r3, r0
 800ac3a:	2b00      	cmp	r3, #0
 800ac3c:	d003      	beq.n	800ac46 <LIS2MDL_0_Probe+0xde>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800ac3e:	f06f 0304 	mvn.w	r3, #4
 800ac42:	64fb      	str	r3, [r7, #76]	; 0x4c
 800ac44:	e001      	b.n	800ac4a <LIS2MDL_0_Probe+0xe2>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 800ac46:	2300      	movs	r3, #0
 800ac48:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_ACCELERO) == MOTION_ACCELERO))
 800ac4a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ac4c:	2b00      	cmp	r3, #0
 800ac4e:	d107      	bne.n	800ac60 <LIS2MDL_0_Probe+0xf8>
 800ac50:	687b      	ldr	r3, [r7, #4]
 800ac52:	f003 0302 	and.w	r3, r3, #2
 800ac56:	2b00      	cmp	r3, #0
 800ac58:	d002      	beq.n	800ac60 <LIS2MDL_0_Probe+0xf8>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 800ac5a:	f06f 0304 	mvn.w	r3, #4
 800ac5e:	64fb      	str	r3, [r7, #76]	; 0x4c
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_GYRO) == MOTION_GYRO))
 800ac60:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ac62:	2b00      	cmp	r3, #0
 800ac64:	d107      	bne.n	800ac76 <LIS2MDL_0_Probe+0x10e>
 800ac66:	687b      	ldr	r3, [r7, #4]
 800ac68:	f003 0301 	and.w	r3, r3, #1
 800ac6c:	2b00      	cmp	r3, #0
 800ac6e:	d002      	beq.n	800ac76 <LIS2MDL_0_Probe+0x10e>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 800ac70:	f06f 0304 	mvn.w	r3, #4
 800ac74:	64fb      	str	r3, [r7, #76]	; 0x4c
    }
  }
  return ret;
 800ac76:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
}
 800ac78:	4618      	mov	r0, r3
 800ac7a:	3750      	adds	r7, #80	; 0x50
 800ac7c:	46bd      	mov	sp, r7
 800ac7e:	bd80      	pop	{r7, pc}
 800ac80:	08002f01 	.word	0x08002f01
 800ac84:	08002f65 	.word	0x08002f65
 800ac88:	08003019 	.word	0x08003019
 800ac8c:	08002fb5 	.word	0x08002fb5
 800ac90:	0800307d 	.word	0x0800307d
 800ac94:	0800b17d 	.word	0x0800b17d
 800ac98:	20000608 	.word	0x20000608
 800ac9c:	20000588 	.word	0x20000588
 800aca0:	2000054c 	.word	0x2000054c
 800aca4:	2000057c 	.word	0x2000057c
 800aca8:	20000074 	.word	0x20000074
 800acac:	20000170 	.word	0x20000170
 800acb0:	20000558 	.word	0x20000558
 800acb4:	20000084 	.word	0x20000084

0800acb8 <BSP_LED_Init>:
 *              This parameter can be one of the following values:
 *              @arg  LED2, LED4, ...
 * @retval HAL status
 */
int32_t BSP_LED_Init(Led_TypeDef Led)
{
 800acb8:	b580      	push	{r7, lr}
 800acba:	b082      	sub	sp, #8
 800acbc:	af00      	add	r7, sp, #0
 800acbe:	4603      	mov	r3, r0
 800acc0:	71fb      	strb	r3, [r7, #7]
  static const BSP_LED_GPIO_Init LedGpioInit[LEDn] = {LED_USER_GPIO_Init};
  LedGpioInit[Led]();
 800acc2:	79fb      	ldrb	r3, [r7, #7]
 800acc4:	4a04      	ldr	r2, [pc, #16]	; (800acd8 <BSP_LED_Init+0x20>)
 800acc6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800acca:	4798      	blx	r3
  return BSP_ERROR_NONE;
 800accc:	2300      	movs	r3, #0
}
 800acce:	4618      	mov	r0, r3
 800acd0:	3708      	adds	r7, #8
 800acd2:	46bd      	mov	sp, r7
 800acd4:	bd80      	pop	{r7, pc}
 800acd6:	bf00      	nop
 800acd8:	080105ac 	.word	0x080105ac

0800acdc <BSP_LED_Toggle>:
 *              @arg  LED3
 *              @arg  LED4
 * @retval HAL status
 */
int32_t BSP_LED_Toggle(Led_TypeDef Led)
{
 800acdc:	b580      	push	{r7, lr}
 800acde:	b082      	sub	sp, #8
 800ace0:	af00      	add	r7, sp, #0
 800ace2:	4603      	mov	r3, r0
 800ace4:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_TogglePin(LED_PORT[Led], LED_PIN[Led]);
 800ace6:	79fb      	ldrb	r3, [r7, #7]
 800ace8:	4a06      	ldr	r2, [pc, #24]	; (800ad04 <BSP_LED_Toggle+0x28>)
 800acea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800acee:	2220      	movs	r2, #32
 800acf0:	4611      	mov	r1, r2
 800acf2:	4618      	mov	r0, r3
 800acf4:	f000 fe63 	bl	800b9be <HAL_GPIO_TogglePin>

  return BSP_ERROR_NONE;
 800acf8:	2300      	movs	r3, #0
}
 800acfa:	4618      	mov	r0, r3
 800acfc:	3708      	adds	r7, #8
 800acfe:	46bd      	mov	sp, r7
 800ad00:	bd80      	pop	{r7, pc}
 800ad02:	bf00      	nop
 800ad04:	20000184 	.word	0x20000184

0800ad08 <LED_USER_GPIO_Init>:
}
/**
  * @brief
  * @retval None
  */
static void LED_USER_GPIO_Init(void) {
 800ad08:	b580      	push	{r7, lr}
 800ad0a:	b088      	sub	sp, #32
 800ad0c:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800ad0e:	2300      	movs	r3, #0
 800ad10:	60bb      	str	r3, [r7, #8]
 800ad12:	4b1c      	ldr	r3, [pc, #112]	; (800ad84 <LED_USER_GPIO_Init+0x7c>)
 800ad14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ad16:	4a1b      	ldr	r2, [pc, #108]	; (800ad84 <LED_USER_GPIO_Init+0x7c>)
 800ad18:	f043 0301 	orr.w	r3, r3, #1
 800ad1c:	6313      	str	r3, [r2, #48]	; 0x30
 800ad1e:	4b19      	ldr	r3, [pc, #100]	; (800ad84 <LED_USER_GPIO_Init+0x7c>)
 800ad20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ad22:	f003 0301 	and.w	r3, r3, #1
 800ad26:	60bb      	str	r3, [r7, #8]
 800ad28:	68bb      	ldr	r3, [r7, #8]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800ad2a:	f107 030c 	add.w	r3, r7, #12
 800ad2e:	2200      	movs	r2, #0
 800ad30:	601a      	str	r2, [r3, #0]
 800ad32:	605a      	str	r2, [r3, #4]
 800ad34:	609a      	str	r2, [r3, #8]
 800ad36:	60da      	str	r2, [r3, #12]
 800ad38:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800ad3a:	2300      	movs	r3, #0
 800ad3c:	607b      	str	r3, [r7, #4]
 800ad3e:	4b11      	ldr	r3, [pc, #68]	; (800ad84 <LED_USER_GPIO_Init+0x7c>)
 800ad40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ad42:	4a10      	ldr	r2, [pc, #64]	; (800ad84 <LED_USER_GPIO_Init+0x7c>)
 800ad44:	f043 0301 	orr.w	r3, r3, #1
 800ad48:	6313      	str	r3, [r2, #48]	; 0x30
 800ad4a:	4b0e      	ldr	r3, [pc, #56]	; (800ad84 <LED_USER_GPIO_Init+0x7c>)
 800ad4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ad4e:	f003 0301 	and.w	r3, r3, #1
 800ad52:	607b      	str	r3, [r7, #4]
 800ad54:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BUS_BSP_LED_GPIO_PORT, BUS_BSP_LED_GPIO_PIN, GPIO_PIN_RESET);
 800ad56:	2200      	movs	r2, #0
 800ad58:	2120      	movs	r1, #32
 800ad5a:	480b      	ldr	r0, [pc, #44]	; (800ad88 <LED_USER_GPIO_Init+0x80>)
 800ad5c:	f000 fe16 	bl	800b98c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PTPIN */
  GPIO_InitStruct.Pin = BUS_BSP_LED_GPIO_PIN;
 800ad60:	2320      	movs	r3, #32
 800ad62:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800ad64:	2301      	movs	r3, #1
 800ad66:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ad68:	2300      	movs	r3, #0
 800ad6a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800ad6c:	2300      	movs	r3, #0
 800ad6e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(BUS_BSP_LED_GPIO_PORT, &GPIO_InitStruct);
 800ad70:	f107 030c 	add.w	r3, r7, #12
 800ad74:	4619      	mov	r1, r3
 800ad76:	4804      	ldr	r0, [pc, #16]	; (800ad88 <LED_USER_GPIO_Init+0x80>)
 800ad78:	f000 fb88 	bl	800b48c <HAL_GPIO_Init>

}
 800ad7c:	bf00      	nop
 800ad7e:	3720      	adds	r7, #32
 800ad80:	46bd      	mov	sp, r7
 800ad82:	bd80      	pop	{r7, pc}
 800ad84:	40023800 	.word	0x40023800
 800ad88:	40020000 	.word	0x40020000

0800ad8c <BSP_PB_Init>:
  *                    @arg  BUTTON_MODE_EXTI: Button will be connected to EXTI line
  *                                            with interrupt generation capability
  * @retval BSP status
  */
int32_t BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 800ad8c:	b580      	push	{r7, lr}
 800ad8e:	b084      	sub	sp, #16
 800ad90:	af00      	add	r7, sp, #0
 800ad92:	4603      	mov	r3, r0
 800ad94:	460a      	mov	r2, r1
 800ad96:	71fb      	strb	r3, [r7, #7]
 800ad98:	4613      	mov	r3, r2
 800ad9a:	71bb      	strb	r3, [r7, #6]
  int32_t ret = BSP_ERROR_NONE;
 800ad9c:	2300      	movs	r3, #0
 800ad9e:	60fb      	str	r3, [r7, #12]
  static const BSP_EXTI_LineCallback ButtonCallback[BUTTONn] ={BUTTON_USER_EXTI_Callback};
  static const uint32_t  BSP_BUTTON_PRIO [BUTTONn] ={BSP_BUTTON_USER_IT_PRIORITY};
  static const uint32_t BUTTON_EXTI_LINE[BUTTONn] ={USER_BUTTON_EXTI_LINE};
  static const BSP_BUTTON_GPIO_Init ButtonGpioInit[BUTTONn] = {BUTTON_USER_GPIO_Init};

  ButtonGpioInit[Button]();
 800ada0:	79fb      	ldrb	r3, [r7, #7]
 800ada2:	4a1f      	ldr	r2, [pc, #124]	; (800ae20 <BSP_PB_Init+0x94>)
 800ada4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ada8:	4798      	blx	r3

  if (ButtonMode == BUTTON_MODE_EXTI)
 800adaa:	79bb      	ldrb	r3, [r7, #6]
 800adac:	2b01      	cmp	r3, #1
 800adae:	d132      	bne.n	800ae16 <BSP_PB_Init+0x8a>
  {
    if(HAL_EXTI_GetHandle(&hpb_exti[Button], BUTTON_EXTI_LINE[Button]) != HAL_OK)
 800adb0:	79fb      	ldrb	r3, [r7, #7]
 800adb2:	00db      	lsls	r3, r3, #3
 800adb4:	4a1b      	ldr	r2, [pc, #108]	; (800ae24 <BSP_PB_Init+0x98>)
 800adb6:	441a      	add	r2, r3
 800adb8:	79fb      	ldrb	r3, [r7, #7]
 800adba:	491b      	ldr	r1, [pc, #108]	; (800ae28 <BSP_PB_Init+0x9c>)
 800adbc:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800adc0:	4619      	mov	r1, r3
 800adc2:	4610      	mov	r0, r2
 800adc4:	f000 fb29 	bl	800b41a <HAL_EXTI_GetHandle>
 800adc8:	4603      	mov	r3, r0
 800adca:	2b00      	cmp	r3, #0
 800adcc:	d003      	beq.n	800add6 <BSP_PB_Init+0x4a>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 800adce:	f06f 0303 	mvn.w	r3, #3
 800add2:	60fb      	str	r3, [r7, #12]
 800add4:	e01f      	b.n	800ae16 <BSP_PB_Init+0x8a>
    }
    else if (HAL_EXTI_RegisterCallback(&hpb_exti[Button],  HAL_EXTI_COMMON_CB_ID, ButtonCallback[Button]) != HAL_OK)
 800add6:	79fb      	ldrb	r3, [r7, #7]
 800add8:	00db      	lsls	r3, r3, #3
 800adda:	4a12      	ldr	r2, [pc, #72]	; (800ae24 <BSP_PB_Init+0x98>)
 800addc:	1898      	adds	r0, r3, r2
 800adde:	79fb      	ldrb	r3, [r7, #7]
 800ade0:	4a12      	ldr	r2, [pc, #72]	; (800ae2c <BSP_PB_Init+0xa0>)
 800ade2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ade6:	461a      	mov	r2, r3
 800ade8:	2100      	movs	r1, #0
 800adea:	f000 fafc 	bl	800b3e6 <HAL_EXTI_RegisterCallback>
 800adee:	4603      	mov	r3, r0
 800adf0:	2b00      	cmp	r3, #0
 800adf2:	d003      	beq.n	800adfc <BSP_PB_Init+0x70>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 800adf4:	f06f 0303 	mvn.w	r3, #3
 800adf8:	60fb      	str	r3, [r7, #12]
 800adfa:	e00c      	b.n	800ae16 <BSP_PB_Init+0x8a>
    }
	else
    {
      /* Enable and set Button EXTI Interrupt to the lowest priority */
      HAL_NVIC_SetPriority((BUTTON_IRQn[Button]), BSP_BUTTON_PRIO[Button], 0x00);
 800adfc:	2028      	movs	r0, #40	; 0x28
 800adfe:	79fb      	ldrb	r3, [r7, #7]
 800ae00:	4a0b      	ldr	r2, [pc, #44]	; (800ae30 <BSP_PB_Init+0xa4>)
 800ae02:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ae06:	2200      	movs	r2, #0
 800ae08:	4619      	mov	r1, r3
 800ae0a:	f000 fab6 	bl	800b37a <HAL_NVIC_SetPriority>
      HAL_NVIC_EnableIRQ((BUTTON_IRQn[Button]));
 800ae0e:	2328      	movs	r3, #40	; 0x28
 800ae10:	4618      	mov	r0, r3
 800ae12:	f000 face 	bl	800b3b2 <HAL_NVIC_EnableIRQ>
    }
  }

  return ret;
 800ae16:	68fb      	ldr	r3, [r7, #12]
}
 800ae18:	4618      	mov	r0, r3
 800ae1a:	3710      	adds	r7, #16
 800ae1c:	46bd      	mov	sp, r7
 800ae1e:	bd80      	pop	{r7, pc}
 800ae20:	080105b0 	.word	0x080105b0
 800ae24:	2000018c 	.word	0x2000018c
 800ae28:	080105b4 	.word	0x080105b4
 800ae2c:	080105b8 	.word	0x080105b8
 800ae30:	080105bc 	.word	0x080105bc

0800ae34 <BSP_PB_GetState>:
 *                This parameter can be one of the following values:
 *                @arg  BUTTON_USER
 * @retval The Button GPIO pin value (GPIO_PIN_RESET = button pressed)
 */
int32_t BSP_PB_GetState(Button_TypeDef Button)
{
 800ae34:	b580      	push	{r7, lr}
 800ae36:	b082      	sub	sp, #8
 800ae38:	af00      	add	r7, sp, #0
 800ae3a:	4603      	mov	r3, r0
 800ae3c:	71fb      	strb	r3, [r7, #7]
  return (int32_t)(HAL_GPIO_ReadPin(BUTTON_PORT[Button], BUTTON_PIN[Button]) == GPIO_PIN_RESET);
 800ae3e:	79fb      	ldrb	r3, [r7, #7]
 800ae40:	4a09      	ldr	r2, [pc, #36]	; (800ae68 <BSP_PB_GetState+0x34>)
 800ae42:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ae46:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800ae4a:	4611      	mov	r1, r2
 800ae4c:	4618      	mov	r0, r3
 800ae4e:	f000 fd85 	bl	800b95c <HAL_GPIO_ReadPin>
 800ae52:	4603      	mov	r3, r0
 800ae54:	2b00      	cmp	r3, #0
 800ae56:	bf0c      	ite	eq
 800ae58:	2301      	moveq	r3, #1
 800ae5a:	2300      	movne	r3, #0
 800ae5c:	b2db      	uxtb	r3, r3
}
 800ae5e:	4618      	mov	r0, r3
 800ae60:	3708      	adds	r7, #8
 800ae62:	46bd      	mov	sp, r7
 800ae64:	bd80      	pop	{r7, pc}
 800ae66:	bf00      	nop
 800ae68:	20000188 	.word	0x20000188

0800ae6c <BUTTON_USER_EXTI_Callback>:
/**
  * @brief  User EXTI line detection callbacks.
  * @retval None
  */
static void BUTTON_USER_EXTI_Callback(void)
{
 800ae6c:	b580      	push	{r7, lr}
 800ae6e:	af00      	add	r7, sp, #0
  BSP_PB_Callback(BUTTON_USER);
 800ae70:	2000      	movs	r0, #0
 800ae72:	f7f7 f89d 	bl	8001fb0 <BSP_PB_Callback>
}
 800ae76:	bf00      	nop
 800ae78:	bd80      	pop	{r7, pc}
	...

0800ae7c <BUTTON_USER_GPIO_Init>:

/**
  * @brief
  * @retval None
  */
static void BUTTON_USER_GPIO_Init(void) {
 800ae7c:	b580      	push	{r7, lr}
 800ae7e:	b088      	sub	sp, #32
 800ae80:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800ae82:	2300      	movs	r3, #0
 800ae84:	60bb      	str	r3, [r7, #8]
 800ae86:	4b1a      	ldr	r3, [pc, #104]	; (800aef0 <BUTTON_USER_GPIO_Init+0x74>)
 800ae88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ae8a:	4a19      	ldr	r2, [pc, #100]	; (800aef0 <BUTTON_USER_GPIO_Init+0x74>)
 800ae8c:	f043 0304 	orr.w	r3, r3, #4
 800ae90:	6313      	str	r3, [r2, #48]	; 0x30
 800ae92:	4b17      	ldr	r3, [pc, #92]	; (800aef0 <BUTTON_USER_GPIO_Init+0x74>)
 800ae94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ae96:	f003 0304 	and.w	r3, r3, #4
 800ae9a:	60bb      	str	r3, [r7, #8]
 800ae9c:	68bb      	ldr	r3, [r7, #8]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800ae9e:	f107 030c 	add.w	r3, r7, #12
 800aea2:	2200      	movs	r2, #0
 800aea4:	601a      	str	r2, [r3, #0]
 800aea6:	605a      	str	r2, [r3, #4]
 800aea8:	609a      	str	r2, [r3, #8]
 800aeaa:	60da      	str	r2, [r3, #12]
 800aeac:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800aeae:	2300      	movs	r3, #0
 800aeb0:	607b      	str	r3, [r7, #4]
 800aeb2:	4b0f      	ldr	r3, [pc, #60]	; (800aef0 <BUTTON_USER_GPIO_Init+0x74>)
 800aeb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aeb6:	4a0e      	ldr	r2, [pc, #56]	; (800aef0 <BUTTON_USER_GPIO_Init+0x74>)
 800aeb8:	f043 0304 	orr.w	r3, r3, #4
 800aebc:	6313      	str	r3, [r2, #48]	; 0x30
 800aebe:	4b0c      	ldr	r3, [pc, #48]	; (800aef0 <BUTTON_USER_GPIO_Init+0x74>)
 800aec0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aec2:	f003 0304 	and.w	r3, r3, #4
 800aec6:	607b      	str	r3, [r7, #4]
 800aec8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : PTPIN */
  GPIO_InitStruct.Pin = BUS_BSP_BUTTON_GPIO_PIN;
 800aeca:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800aece:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800aed0:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800aed4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800aed6:	2300      	movs	r3, #0
 800aed8:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(BUS_BSP_BUTTON_GPIO_PORT, &GPIO_InitStruct);
 800aeda:	f107 030c 	add.w	r3, r7, #12
 800aede:	4619      	mov	r1, r3
 800aee0:	4804      	ldr	r0, [pc, #16]	; (800aef4 <BUTTON_USER_GPIO_Init+0x78>)
 800aee2:	f000 fad3 	bl	800b48c <HAL_GPIO_Init>

}
 800aee6:	bf00      	nop
 800aee8:	3720      	adds	r7, #32
 800aeea:	46bd      	mov	sp, r7
 800aeec:	bd80      	pop	{r7, pc}
 800aeee:	bf00      	nop
 800aef0:	40023800 	.word	0x40023800
 800aef4:	40020800 	.word	0x40020800

0800aef8 <BSP_COM_Init>:
 * @param  UART_Init: Pointer to a UART_HandleTypeDef structure that contains the
 *                    configuration information for the specified USART peripheral.
 * @retval BSP error code
 */
int32_t BSP_COM_Init(COM_TypeDef COM)
{
 800aef8:	b580      	push	{r7, lr}
 800aefa:	b084      	sub	sp, #16
 800aefc:	af00      	add	r7, sp, #0
 800aefe:	4603      	mov	r3, r0
 800af00:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 800af02:	2300      	movs	r3, #0
 800af04:	60fb      	str	r3, [r7, #12]

  if(COM > COMn)
 800af06:	79fb      	ldrb	r3, [r7, #7]
 800af08:	2b01      	cmp	r3, #1
 800af0a:	d903      	bls.n	800af14 <BSP_COM_Init+0x1c>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 800af0c:	f06f 0301 	mvn.w	r3, #1
 800af10:	60fb      	str	r3, [r7, #12]
 800af12:	e025      	b.n	800af60 <BSP_COM_Init+0x68>
  }
  else
  {
     hcom_uart[COM].Instance = COM_USART[COM];
 800af14:	79fb      	ldrb	r3, [r7, #7]
 800af16:	79fa      	ldrb	r2, [r7, #7]
 800af18:	4914      	ldr	r1, [pc, #80]	; (800af6c <BSP_COM_Init+0x74>)
 800af1a:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800af1e:	4814      	ldr	r0, [pc, #80]	; (800af70 <BSP_COM_Init+0x78>)
 800af20:	4613      	mov	r3, r2
 800af22:	011b      	lsls	r3, r3, #4
 800af24:	4413      	add	r3, r2
 800af26:	009b      	lsls	r3, r3, #2
 800af28:	4403      	add	r3, r0
 800af2a:	6019      	str	r1, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 0U)
    /* Init the UART Msp */
    USART2_MspInit(&hcom_uart[COM]);
 800af2c:	79fa      	ldrb	r2, [r7, #7]
 800af2e:	4613      	mov	r3, r2
 800af30:	011b      	lsls	r3, r3, #4
 800af32:	4413      	add	r3, r2
 800af34:	009b      	lsls	r3, r3, #2
 800af36:	4a0e      	ldr	r2, [pc, #56]	; (800af70 <BSP_COM_Init+0x78>)
 800af38:	4413      	add	r3, r2
 800af3a:	4618      	mov	r0, r3
 800af3c:	f000 f864 	bl	800b008 <USART2_MspInit>
      {
        return BSP_ERROR_MSP_FAILURE;
      }
    }
#endif
    if (MX_USART2_UART_Init(&hcom_uart[COM]))
 800af40:	79fa      	ldrb	r2, [r7, #7]
 800af42:	4613      	mov	r3, r2
 800af44:	011b      	lsls	r3, r3, #4
 800af46:	4413      	add	r3, r2
 800af48:	009b      	lsls	r3, r3, #2
 800af4a:	4a09      	ldr	r2, [pc, #36]	; (800af70 <BSP_COM_Init+0x78>)
 800af4c:	4413      	add	r3, r2
 800af4e:	4618      	mov	r0, r3
 800af50:	f000 f810 	bl	800af74 <MX_USART2_UART_Init>
 800af54:	4603      	mov	r3, r0
 800af56:	2b00      	cmp	r3, #0
 800af58:	d002      	beq.n	800af60 <BSP_COM_Init+0x68>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 800af5a:	f06f 0303 	mvn.w	r3, #3
 800af5e:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 800af60:	68fb      	ldr	r3, [r7, #12]
}
 800af62:	4618      	mov	r0, r3
 800af64:	3710      	adds	r7, #16
 800af66:	46bd      	mov	sp, r7
 800af68:	bd80      	pop	{r7, pc}
 800af6a:	bf00      	nop
 800af6c:	20000194 	.word	0x20000194
 800af70:	2000063c 	.word	0x2000063c

0800af74 <MX_USART2_UART_Init>:
 */

/* USART2 init function */

__weak HAL_StatusTypeDef MX_USART2_UART_Init(UART_HandleTypeDef* huart)
{
 800af74:	b580      	push	{r7, lr}
 800af76:	b084      	sub	sp, #16
 800af78:	af00      	add	r7, sp, #0
 800af7a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 800af7c:	2300      	movs	r3, #0
 800af7e:	73fb      	strb	r3, [r7, #15]

  huart->Instance = USART2;
 800af80:	687b      	ldr	r3, [r7, #4]
 800af82:	4a12      	ldr	r2, [pc, #72]	; (800afcc <MX_USART2_UART_Init+0x58>)
 800af84:	601a      	str	r2, [r3, #0]
  huart->Init.BaudRate = 115200;
 800af86:	687b      	ldr	r3, [r7, #4]
 800af88:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800af8c:	605a      	str	r2, [r3, #4]
  huart->Init.WordLength = UART_WORDLENGTH_8B;
 800af8e:	687b      	ldr	r3, [r7, #4]
 800af90:	2200      	movs	r2, #0
 800af92:	609a      	str	r2, [r3, #8]
  huart->Init.StopBits = UART_STOPBITS_1;
 800af94:	687b      	ldr	r3, [r7, #4]
 800af96:	2200      	movs	r2, #0
 800af98:	60da      	str	r2, [r3, #12]
  huart->Init.Parity = UART_PARITY_NONE;
 800af9a:	687b      	ldr	r3, [r7, #4]
 800af9c:	2200      	movs	r2, #0
 800af9e:	611a      	str	r2, [r3, #16]
  huart->Init.Mode = UART_MODE_TX_RX;
 800afa0:	687b      	ldr	r3, [r7, #4]
 800afa2:	220c      	movs	r2, #12
 800afa4:	615a      	str	r2, [r3, #20]
  huart->Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800afa6:	687b      	ldr	r3, [r7, #4]
 800afa8:	2200      	movs	r2, #0
 800afaa:	619a      	str	r2, [r3, #24]
  huart->Init.OverSampling = UART_OVERSAMPLING_16;
 800afac:	687b      	ldr	r3, [r7, #4]
 800afae:	2200      	movs	r2, #0
 800afb0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(huart) != HAL_OK)
 800afb2:	6878      	ldr	r0, [r7, #4]
 800afb4:	f002 fce2 	bl	800d97c <HAL_UART_Init>
 800afb8:	4603      	mov	r3, r0
 800afba:	2b00      	cmp	r3, #0
 800afbc:	d001      	beq.n	800afc2 <MX_USART2_UART_Init+0x4e>
  {
    ret = HAL_ERROR;
 800afbe:	2301      	movs	r3, #1
 800afc0:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800afc2:	7bfb      	ldrb	r3, [r7, #15]
}
 800afc4:	4618      	mov	r0, r3
 800afc6:	3710      	adds	r7, #16
 800afc8:	46bd      	mov	sp, r7
 800afca:	bd80      	pop	{r7, pc}
 800afcc:	40004400 	.word	0x40004400

0800afd0 <__io_putchar>:
  (void)HAL_UART_Transmit(&hcom_uart[COM_ActiveLogPort], (uint8_t *)&ch, 1, COM_POLL_TIMEOUT);
  return ch;
}
#else /* For GCC Toolchains */
int __io_putchar (int ch)
{
 800afd0:	b580      	push	{r7, lr}
 800afd2:	b082      	sub	sp, #8
 800afd4:	af00      	add	r7, sp, #0
 800afd6:	6078      	str	r0, [r7, #4]
  (void)HAL_UART_Transmit(&hcom_uart[COM_ActiveLogPort], (uint8_t *)&ch, 1, COM_POLL_TIMEOUT);
 800afd8:	4b09      	ldr	r3, [pc, #36]	; (800b000 <__io_putchar+0x30>)
 800afda:	781b      	ldrb	r3, [r3, #0]
 800afdc:	461a      	mov	r2, r3
 800afde:	4613      	mov	r3, r2
 800afe0:	011b      	lsls	r3, r3, #4
 800afe2:	4413      	add	r3, r2
 800afe4:	009b      	lsls	r3, r3, #2
 800afe6:	4a07      	ldr	r2, [pc, #28]	; (800b004 <__io_putchar+0x34>)
 800afe8:	1898      	adds	r0, r3, r2
 800afea:	1d39      	adds	r1, r7, #4
 800afec:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800aff0:	2201      	movs	r2, #1
 800aff2:	f002 fd1a 	bl	800da2a <HAL_UART_Transmit>
  return ch;
 800aff6:	687b      	ldr	r3, [r7, #4]
}
 800aff8:	4618      	mov	r0, r3
 800affa:	3708      	adds	r7, #8
 800affc:	46bd      	mov	sp, r7
 800affe:	bd80      	pop	{r7, pc}
 800b000:	20000680 	.word	0x20000680
 800b004:	2000063c 	.word	0x2000063c

0800b008 <USART2_MspInit>:
 * @param  huart USART2 handle
 * @retval None
 */

static void USART2_MspInit(UART_HandleTypeDef* uartHandle)
{
 800b008:	b580      	push	{r7, lr}
 800b00a:	b08a      	sub	sp, #40	; 0x28
 800b00c:	af00      	add	r7, sp, #0
 800b00e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_USART2_CLK_ENABLE();
 800b010:	2300      	movs	r3, #0
 800b012:	613b      	str	r3, [r7, #16]
 800b014:	4b1e      	ldr	r3, [pc, #120]	; (800b090 <USART2_MspInit+0x88>)
 800b016:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b018:	4a1d      	ldr	r2, [pc, #116]	; (800b090 <USART2_MspInit+0x88>)
 800b01a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b01e:	6413      	str	r3, [r2, #64]	; 0x40
 800b020:	4b1b      	ldr	r3, [pc, #108]	; (800b090 <USART2_MspInit+0x88>)
 800b022:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b024:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b028:	613b      	str	r3, [r7, #16]
 800b02a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800b02c:	2300      	movs	r3, #0
 800b02e:	60fb      	str	r3, [r7, #12]
 800b030:	4b17      	ldr	r3, [pc, #92]	; (800b090 <USART2_MspInit+0x88>)
 800b032:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b034:	4a16      	ldr	r2, [pc, #88]	; (800b090 <USART2_MspInit+0x88>)
 800b036:	f043 0301 	orr.w	r3, r3, #1
 800b03a:	6313      	str	r3, [r2, #48]	; 0x30
 800b03c:	4b14      	ldr	r3, [pc, #80]	; (800b090 <USART2_MspInit+0x88>)
 800b03e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b040:	f003 0301 	and.w	r3, r3, #1
 800b044:	60fb      	str	r3, [r7, #12]
 800b046:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = BUS_USART2_TX_GPIO_PIN;
 800b048:	2304      	movs	r3, #4
 800b04a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b04c:	2302      	movs	r3, #2
 800b04e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b050:	2300      	movs	r3, #0
 800b052:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800b054:	2300      	movs	r3, #0
 800b056:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_USART2_TX_GPIO_AF;
 800b058:	2307      	movs	r3, #7
 800b05a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(BUS_USART2_TX_GPIO_PORT, &GPIO_InitStruct);
 800b05c:	f107 0314 	add.w	r3, r7, #20
 800b060:	4619      	mov	r1, r3
 800b062:	480c      	ldr	r0, [pc, #48]	; (800b094 <USART2_MspInit+0x8c>)
 800b064:	f000 fa12 	bl	800b48c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BUS_USART2_RX_GPIO_PIN;
 800b068:	2308      	movs	r3, #8
 800b06a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b06c:	2302      	movs	r3, #2
 800b06e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b070:	2300      	movs	r3, #0
 800b072:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800b074:	2300      	movs	r3, #0
 800b076:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_USART2_RX_GPIO_AF;
 800b078:	2307      	movs	r3, #7
 800b07a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(BUS_USART2_RX_GPIO_PORT, &GPIO_InitStruct);
 800b07c:	f107 0314 	add.w	r3, r7, #20
 800b080:	4619      	mov	r1, r3
 800b082:	4804      	ldr	r0, [pc, #16]	; (800b094 <USART2_MspInit+0x8c>)
 800b084:	f000 fa02 	bl	800b48c <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
}
 800b088:	bf00      	nop
 800b08a:	3728      	adds	r7, #40	; 0x28
 800b08c:	46bd      	mov	sp, r7
 800b08e:	bd80      	pop	{r7, pc}
 800b090:	40023800 	.word	0x40023800
 800b094:	40020000 	.word	0x40020000

0800b098 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800b098:	b580      	push	{r7, lr}
 800b09a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800b09c:	4b0e      	ldr	r3, [pc, #56]	; (800b0d8 <HAL_Init+0x40>)
 800b09e:	681b      	ldr	r3, [r3, #0]
 800b0a0:	4a0d      	ldr	r2, [pc, #52]	; (800b0d8 <HAL_Init+0x40>)
 800b0a2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800b0a6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800b0a8:	4b0b      	ldr	r3, [pc, #44]	; (800b0d8 <HAL_Init+0x40>)
 800b0aa:	681b      	ldr	r3, [r3, #0]
 800b0ac:	4a0a      	ldr	r2, [pc, #40]	; (800b0d8 <HAL_Init+0x40>)
 800b0ae:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800b0b2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800b0b4:	4b08      	ldr	r3, [pc, #32]	; (800b0d8 <HAL_Init+0x40>)
 800b0b6:	681b      	ldr	r3, [r3, #0]
 800b0b8:	4a07      	ldr	r2, [pc, #28]	; (800b0d8 <HAL_Init+0x40>)
 800b0ba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b0be:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800b0c0:	2003      	movs	r0, #3
 800b0c2:	f000 f94f 	bl	800b364 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800b0c6:	2000      	movs	r0, #0
 800b0c8:	f000 f808 	bl	800b0dc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800b0cc:	f7f7 fe62 	bl	8002d94 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800b0d0:	2300      	movs	r3, #0
}
 800b0d2:	4618      	mov	r0, r3
 800b0d4:	bd80      	pop	{r7, pc}
 800b0d6:	bf00      	nop
 800b0d8:	40023c00 	.word	0x40023c00

0800b0dc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800b0dc:	b580      	push	{r7, lr}
 800b0de:	b082      	sub	sp, #8
 800b0e0:	af00      	add	r7, sp, #0
 800b0e2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800b0e4:	4b12      	ldr	r3, [pc, #72]	; (800b130 <HAL_InitTick+0x54>)
 800b0e6:	681a      	ldr	r2, [r3, #0]
 800b0e8:	4b12      	ldr	r3, [pc, #72]	; (800b134 <HAL_InitTick+0x58>)
 800b0ea:	781b      	ldrb	r3, [r3, #0]
 800b0ec:	4619      	mov	r1, r3
 800b0ee:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800b0f2:	fbb3 f3f1 	udiv	r3, r3, r1
 800b0f6:	fbb2 f3f3 	udiv	r3, r2, r3
 800b0fa:	4618      	mov	r0, r3
 800b0fc:	f000 f967 	bl	800b3ce <HAL_SYSTICK_Config>
 800b100:	4603      	mov	r3, r0
 800b102:	2b00      	cmp	r3, #0
 800b104:	d001      	beq.n	800b10a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800b106:	2301      	movs	r3, #1
 800b108:	e00e      	b.n	800b128 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800b10a:	687b      	ldr	r3, [r7, #4]
 800b10c:	2b0f      	cmp	r3, #15
 800b10e:	d80a      	bhi.n	800b126 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800b110:	2200      	movs	r2, #0
 800b112:	6879      	ldr	r1, [r7, #4]
 800b114:	f04f 30ff 	mov.w	r0, #4294967295
 800b118:	f000 f92f 	bl	800b37a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800b11c:	4a06      	ldr	r2, [pc, #24]	; (800b138 <HAL_InitTick+0x5c>)
 800b11e:	687b      	ldr	r3, [r7, #4]
 800b120:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800b122:	2300      	movs	r3, #0
 800b124:	e000      	b.n	800b128 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800b126:	2301      	movs	r3, #1
}
 800b128:	4618      	mov	r0, r3
 800b12a:	3708      	adds	r7, #8
 800b12c:	46bd      	mov	sp, r7
 800b12e:	bd80      	pop	{r7, pc}
 800b130:	20000004 	.word	0x20000004
 800b134:	2000019c 	.word	0x2000019c
 800b138:	20000198 	.word	0x20000198

0800b13c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800b13c:	b480      	push	{r7}
 800b13e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800b140:	4b06      	ldr	r3, [pc, #24]	; (800b15c <HAL_IncTick+0x20>)
 800b142:	781b      	ldrb	r3, [r3, #0]
 800b144:	461a      	mov	r2, r3
 800b146:	4b06      	ldr	r3, [pc, #24]	; (800b160 <HAL_IncTick+0x24>)
 800b148:	681b      	ldr	r3, [r3, #0]
 800b14a:	4413      	add	r3, r2
 800b14c:	4a04      	ldr	r2, [pc, #16]	; (800b160 <HAL_IncTick+0x24>)
 800b14e:	6013      	str	r3, [r2, #0]
}
 800b150:	bf00      	nop
 800b152:	46bd      	mov	sp, r7
 800b154:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b158:	4770      	bx	lr
 800b15a:	bf00      	nop
 800b15c:	2000019c 	.word	0x2000019c
 800b160:	20000684 	.word	0x20000684

0800b164 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800b164:	b480      	push	{r7}
 800b166:	af00      	add	r7, sp, #0
  return uwTick;
 800b168:	4b03      	ldr	r3, [pc, #12]	; (800b178 <HAL_GetTick+0x14>)
 800b16a:	681b      	ldr	r3, [r3, #0]
}
 800b16c:	4618      	mov	r0, r3
 800b16e:	46bd      	mov	sp, r7
 800b170:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b174:	4770      	bx	lr
 800b176:	bf00      	nop
 800b178:	20000684 	.word	0x20000684

0800b17c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800b17c:	b580      	push	{r7, lr}
 800b17e:	b084      	sub	sp, #16
 800b180:	af00      	add	r7, sp, #0
 800b182:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800b184:	f7ff ffee 	bl	800b164 <HAL_GetTick>
 800b188:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800b18a:	687b      	ldr	r3, [r7, #4]
 800b18c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800b18e:	68fb      	ldr	r3, [r7, #12]
 800b190:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b194:	d005      	beq.n	800b1a2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800b196:	4b0a      	ldr	r3, [pc, #40]	; (800b1c0 <HAL_Delay+0x44>)
 800b198:	781b      	ldrb	r3, [r3, #0]
 800b19a:	461a      	mov	r2, r3
 800b19c:	68fb      	ldr	r3, [r7, #12]
 800b19e:	4413      	add	r3, r2
 800b1a0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800b1a2:	bf00      	nop
 800b1a4:	f7ff ffde 	bl	800b164 <HAL_GetTick>
 800b1a8:	4602      	mov	r2, r0
 800b1aa:	68bb      	ldr	r3, [r7, #8]
 800b1ac:	1ad3      	subs	r3, r2, r3
 800b1ae:	68fa      	ldr	r2, [r7, #12]
 800b1b0:	429a      	cmp	r2, r3
 800b1b2:	d8f7      	bhi.n	800b1a4 <HAL_Delay+0x28>
  {
  }
}
 800b1b4:	bf00      	nop
 800b1b6:	bf00      	nop
 800b1b8:	3710      	adds	r7, #16
 800b1ba:	46bd      	mov	sp, r7
 800b1bc:	bd80      	pop	{r7, pc}
 800b1be:	bf00      	nop
 800b1c0:	2000019c 	.word	0x2000019c

0800b1c4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800b1c4:	b480      	push	{r7}
 800b1c6:	b085      	sub	sp, #20
 800b1c8:	af00      	add	r7, sp, #0
 800b1ca:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800b1cc:	687b      	ldr	r3, [r7, #4]
 800b1ce:	f003 0307 	and.w	r3, r3, #7
 800b1d2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800b1d4:	4b0c      	ldr	r3, [pc, #48]	; (800b208 <__NVIC_SetPriorityGrouping+0x44>)
 800b1d6:	68db      	ldr	r3, [r3, #12]
 800b1d8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800b1da:	68ba      	ldr	r2, [r7, #8]
 800b1dc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800b1e0:	4013      	ands	r3, r2
 800b1e2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800b1e4:	68fb      	ldr	r3, [r7, #12]
 800b1e6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800b1e8:	68bb      	ldr	r3, [r7, #8]
 800b1ea:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800b1ec:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800b1f0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b1f4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800b1f6:	4a04      	ldr	r2, [pc, #16]	; (800b208 <__NVIC_SetPriorityGrouping+0x44>)
 800b1f8:	68bb      	ldr	r3, [r7, #8]
 800b1fa:	60d3      	str	r3, [r2, #12]
}
 800b1fc:	bf00      	nop
 800b1fe:	3714      	adds	r7, #20
 800b200:	46bd      	mov	sp, r7
 800b202:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b206:	4770      	bx	lr
 800b208:	e000ed00 	.word	0xe000ed00

0800b20c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800b20c:	b480      	push	{r7}
 800b20e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800b210:	4b04      	ldr	r3, [pc, #16]	; (800b224 <__NVIC_GetPriorityGrouping+0x18>)
 800b212:	68db      	ldr	r3, [r3, #12]
 800b214:	0a1b      	lsrs	r3, r3, #8
 800b216:	f003 0307 	and.w	r3, r3, #7
}
 800b21a:	4618      	mov	r0, r3
 800b21c:	46bd      	mov	sp, r7
 800b21e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b222:	4770      	bx	lr
 800b224:	e000ed00 	.word	0xe000ed00

0800b228 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800b228:	b480      	push	{r7}
 800b22a:	b083      	sub	sp, #12
 800b22c:	af00      	add	r7, sp, #0
 800b22e:	4603      	mov	r3, r0
 800b230:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800b232:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b236:	2b00      	cmp	r3, #0
 800b238:	db0b      	blt.n	800b252 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800b23a:	79fb      	ldrb	r3, [r7, #7]
 800b23c:	f003 021f 	and.w	r2, r3, #31
 800b240:	4907      	ldr	r1, [pc, #28]	; (800b260 <__NVIC_EnableIRQ+0x38>)
 800b242:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b246:	095b      	lsrs	r3, r3, #5
 800b248:	2001      	movs	r0, #1
 800b24a:	fa00 f202 	lsl.w	r2, r0, r2
 800b24e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800b252:	bf00      	nop
 800b254:	370c      	adds	r7, #12
 800b256:	46bd      	mov	sp, r7
 800b258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b25c:	4770      	bx	lr
 800b25e:	bf00      	nop
 800b260:	e000e100 	.word	0xe000e100

0800b264 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800b264:	b480      	push	{r7}
 800b266:	b083      	sub	sp, #12
 800b268:	af00      	add	r7, sp, #0
 800b26a:	4603      	mov	r3, r0
 800b26c:	6039      	str	r1, [r7, #0]
 800b26e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800b270:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b274:	2b00      	cmp	r3, #0
 800b276:	db0a      	blt.n	800b28e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800b278:	683b      	ldr	r3, [r7, #0]
 800b27a:	b2da      	uxtb	r2, r3
 800b27c:	490c      	ldr	r1, [pc, #48]	; (800b2b0 <__NVIC_SetPriority+0x4c>)
 800b27e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b282:	0112      	lsls	r2, r2, #4
 800b284:	b2d2      	uxtb	r2, r2
 800b286:	440b      	add	r3, r1
 800b288:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800b28c:	e00a      	b.n	800b2a4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800b28e:	683b      	ldr	r3, [r7, #0]
 800b290:	b2da      	uxtb	r2, r3
 800b292:	4908      	ldr	r1, [pc, #32]	; (800b2b4 <__NVIC_SetPriority+0x50>)
 800b294:	79fb      	ldrb	r3, [r7, #7]
 800b296:	f003 030f 	and.w	r3, r3, #15
 800b29a:	3b04      	subs	r3, #4
 800b29c:	0112      	lsls	r2, r2, #4
 800b29e:	b2d2      	uxtb	r2, r2
 800b2a0:	440b      	add	r3, r1
 800b2a2:	761a      	strb	r2, [r3, #24]
}
 800b2a4:	bf00      	nop
 800b2a6:	370c      	adds	r7, #12
 800b2a8:	46bd      	mov	sp, r7
 800b2aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2ae:	4770      	bx	lr
 800b2b0:	e000e100 	.word	0xe000e100
 800b2b4:	e000ed00 	.word	0xe000ed00

0800b2b8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800b2b8:	b480      	push	{r7}
 800b2ba:	b089      	sub	sp, #36	; 0x24
 800b2bc:	af00      	add	r7, sp, #0
 800b2be:	60f8      	str	r0, [r7, #12]
 800b2c0:	60b9      	str	r1, [r7, #8]
 800b2c2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800b2c4:	68fb      	ldr	r3, [r7, #12]
 800b2c6:	f003 0307 	and.w	r3, r3, #7
 800b2ca:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800b2cc:	69fb      	ldr	r3, [r7, #28]
 800b2ce:	f1c3 0307 	rsb	r3, r3, #7
 800b2d2:	2b04      	cmp	r3, #4
 800b2d4:	bf28      	it	cs
 800b2d6:	2304      	movcs	r3, #4
 800b2d8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800b2da:	69fb      	ldr	r3, [r7, #28]
 800b2dc:	3304      	adds	r3, #4
 800b2de:	2b06      	cmp	r3, #6
 800b2e0:	d902      	bls.n	800b2e8 <NVIC_EncodePriority+0x30>
 800b2e2:	69fb      	ldr	r3, [r7, #28]
 800b2e4:	3b03      	subs	r3, #3
 800b2e6:	e000      	b.n	800b2ea <NVIC_EncodePriority+0x32>
 800b2e8:	2300      	movs	r3, #0
 800b2ea:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800b2ec:	f04f 32ff 	mov.w	r2, #4294967295
 800b2f0:	69bb      	ldr	r3, [r7, #24]
 800b2f2:	fa02 f303 	lsl.w	r3, r2, r3
 800b2f6:	43da      	mvns	r2, r3
 800b2f8:	68bb      	ldr	r3, [r7, #8]
 800b2fa:	401a      	ands	r2, r3
 800b2fc:	697b      	ldr	r3, [r7, #20]
 800b2fe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800b300:	f04f 31ff 	mov.w	r1, #4294967295
 800b304:	697b      	ldr	r3, [r7, #20]
 800b306:	fa01 f303 	lsl.w	r3, r1, r3
 800b30a:	43d9      	mvns	r1, r3
 800b30c:	687b      	ldr	r3, [r7, #4]
 800b30e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800b310:	4313      	orrs	r3, r2
         );
}
 800b312:	4618      	mov	r0, r3
 800b314:	3724      	adds	r7, #36	; 0x24
 800b316:	46bd      	mov	sp, r7
 800b318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b31c:	4770      	bx	lr
	...

0800b320 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800b320:	b580      	push	{r7, lr}
 800b322:	b082      	sub	sp, #8
 800b324:	af00      	add	r7, sp, #0
 800b326:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800b328:	687b      	ldr	r3, [r7, #4]
 800b32a:	3b01      	subs	r3, #1
 800b32c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800b330:	d301      	bcc.n	800b336 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800b332:	2301      	movs	r3, #1
 800b334:	e00f      	b.n	800b356 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800b336:	4a0a      	ldr	r2, [pc, #40]	; (800b360 <SysTick_Config+0x40>)
 800b338:	687b      	ldr	r3, [r7, #4]
 800b33a:	3b01      	subs	r3, #1
 800b33c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800b33e:	210f      	movs	r1, #15
 800b340:	f04f 30ff 	mov.w	r0, #4294967295
 800b344:	f7ff ff8e 	bl	800b264 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800b348:	4b05      	ldr	r3, [pc, #20]	; (800b360 <SysTick_Config+0x40>)
 800b34a:	2200      	movs	r2, #0
 800b34c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800b34e:	4b04      	ldr	r3, [pc, #16]	; (800b360 <SysTick_Config+0x40>)
 800b350:	2207      	movs	r2, #7
 800b352:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800b354:	2300      	movs	r3, #0
}
 800b356:	4618      	mov	r0, r3
 800b358:	3708      	adds	r7, #8
 800b35a:	46bd      	mov	sp, r7
 800b35c:	bd80      	pop	{r7, pc}
 800b35e:	bf00      	nop
 800b360:	e000e010 	.word	0xe000e010

0800b364 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800b364:	b580      	push	{r7, lr}
 800b366:	b082      	sub	sp, #8
 800b368:	af00      	add	r7, sp, #0
 800b36a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800b36c:	6878      	ldr	r0, [r7, #4]
 800b36e:	f7ff ff29 	bl	800b1c4 <__NVIC_SetPriorityGrouping>
}
 800b372:	bf00      	nop
 800b374:	3708      	adds	r7, #8
 800b376:	46bd      	mov	sp, r7
 800b378:	bd80      	pop	{r7, pc}

0800b37a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800b37a:	b580      	push	{r7, lr}
 800b37c:	b086      	sub	sp, #24
 800b37e:	af00      	add	r7, sp, #0
 800b380:	4603      	mov	r3, r0
 800b382:	60b9      	str	r1, [r7, #8]
 800b384:	607a      	str	r2, [r7, #4]
 800b386:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800b388:	2300      	movs	r3, #0
 800b38a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800b38c:	f7ff ff3e 	bl	800b20c <__NVIC_GetPriorityGrouping>
 800b390:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800b392:	687a      	ldr	r2, [r7, #4]
 800b394:	68b9      	ldr	r1, [r7, #8]
 800b396:	6978      	ldr	r0, [r7, #20]
 800b398:	f7ff ff8e 	bl	800b2b8 <NVIC_EncodePriority>
 800b39c:	4602      	mov	r2, r0
 800b39e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b3a2:	4611      	mov	r1, r2
 800b3a4:	4618      	mov	r0, r3
 800b3a6:	f7ff ff5d 	bl	800b264 <__NVIC_SetPriority>
}
 800b3aa:	bf00      	nop
 800b3ac:	3718      	adds	r7, #24
 800b3ae:	46bd      	mov	sp, r7
 800b3b0:	bd80      	pop	{r7, pc}

0800b3b2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800b3b2:	b580      	push	{r7, lr}
 800b3b4:	b082      	sub	sp, #8
 800b3b6:	af00      	add	r7, sp, #0
 800b3b8:	4603      	mov	r3, r0
 800b3ba:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800b3bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b3c0:	4618      	mov	r0, r3
 800b3c2:	f7ff ff31 	bl	800b228 <__NVIC_EnableIRQ>
}
 800b3c6:	bf00      	nop
 800b3c8:	3708      	adds	r7, #8
 800b3ca:	46bd      	mov	sp, r7
 800b3cc:	bd80      	pop	{r7, pc}

0800b3ce <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800b3ce:	b580      	push	{r7, lr}
 800b3d0:	b082      	sub	sp, #8
 800b3d2:	af00      	add	r7, sp, #0
 800b3d4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800b3d6:	6878      	ldr	r0, [r7, #4]
 800b3d8:	f7ff ffa2 	bl	800b320 <SysTick_Config>
 800b3dc:	4603      	mov	r3, r0
}
 800b3de:	4618      	mov	r0, r3
 800b3e0:	3708      	adds	r7, #8
 800b3e2:	46bd      	mov	sp, r7
 800b3e4:	bd80      	pop	{r7, pc}

0800b3e6 <HAL_EXTI_RegisterCallback>:
  *         This parameter can be one of @arg @ref EXTI_CallbackIDTypeDef values.
  * @param  pPendingCbfn function pointer to be stored as callback.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_RegisterCallback(EXTI_HandleTypeDef *hexti, EXTI_CallbackIDTypeDef CallbackID, void (*pPendingCbfn)(void))
{
 800b3e6:	b480      	push	{r7}
 800b3e8:	b087      	sub	sp, #28
 800b3ea:	af00      	add	r7, sp, #0
 800b3ec:	60f8      	str	r0, [r7, #12]
 800b3ee:	460b      	mov	r3, r1
 800b3f0:	607a      	str	r2, [r7, #4]
 800b3f2:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 800b3f4:	2300      	movs	r3, #0
 800b3f6:	75fb      	strb	r3, [r7, #23]

  switch (CallbackID)
 800b3f8:	7afb      	ldrb	r3, [r7, #11]
 800b3fa:	2b00      	cmp	r3, #0
 800b3fc:	d103      	bne.n	800b406 <HAL_EXTI_RegisterCallback+0x20>
  {
    case  HAL_EXTI_COMMON_CB_ID:
      hexti->PendingCallback = pPendingCbfn;
 800b3fe:	68fb      	ldr	r3, [r7, #12]
 800b400:	687a      	ldr	r2, [r7, #4]
 800b402:	605a      	str	r2, [r3, #4]
      break;
 800b404:	e002      	b.n	800b40c <HAL_EXTI_RegisterCallback+0x26>

    default:
      status = HAL_ERROR;
 800b406:	2301      	movs	r3, #1
 800b408:	75fb      	strb	r3, [r7, #23]
      break;
 800b40a:	bf00      	nop
  }

  return status;
 800b40c:	7dfb      	ldrb	r3, [r7, #23]
}
 800b40e:	4618      	mov	r0, r3
 800b410:	371c      	adds	r7, #28
 800b412:	46bd      	mov	sp, r7
 800b414:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b418:	4770      	bx	lr

0800b41a <HAL_EXTI_GetHandle>:
  * @param  ExtiLine Exti line number.
  *         This parameter can be from 0 to @ref EXTI_LINE_NB.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_GetHandle(EXTI_HandleTypeDef *hexti, uint32_t ExtiLine)
{
 800b41a:	b480      	push	{r7}
 800b41c:	b083      	sub	sp, #12
 800b41e:	af00      	add	r7, sp, #0
 800b420:	6078      	str	r0, [r7, #4]
 800b422:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(ExtiLine));

  /* Check null pointer */
  if (hexti == NULL)
 800b424:	687b      	ldr	r3, [r7, #4]
 800b426:	2b00      	cmp	r3, #0
 800b428:	d101      	bne.n	800b42e <HAL_EXTI_GetHandle+0x14>
  {
    return HAL_ERROR;
 800b42a:	2301      	movs	r3, #1
 800b42c:	e003      	b.n	800b436 <HAL_EXTI_GetHandle+0x1c>
  }
  else
  {
    /* Store line number as handle private field */
    hexti->Line = ExtiLine;
 800b42e:	687b      	ldr	r3, [r7, #4]
 800b430:	683a      	ldr	r2, [r7, #0]
 800b432:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 800b434:	2300      	movs	r3, #0
  }
}
 800b436:	4618      	mov	r0, r3
 800b438:	370c      	adds	r7, #12
 800b43a:	46bd      	mov	sp, r7
 800b43c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b440:	4770      	bx	lr
	...

0800b444 <HAL_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  hexti Exti handle.
  * @retval none.
  */
void HAL_EXTI_IRQHandler(EXTI_HandleTypeDef *hexti)
{
 800b444:	b580      	push	{r7, lr}
 800b446:	b084      	sub	sp, #16
 800b448:	af00      	add	r7, sp, #0
 800b44a:	6078      	str	r0, [r7, #4]
  uint32_t regval;
  uint32_t maskline;

  /* Compute line mask */
  maskline = (1uL << (hexti->Line & EXTI_PIN_MASK));
 800b44c:	687b      	ldr	r3, [r7, #4]
 800b44e:	681b      	ldr	r3, [r3, #0]
 800b450:	f003 031f 	and.w	r3, r3, #31
 800b454:	2201      	movs	r2, #1
 800b456:	fa02 f303 	lsl.w	r3, r2, r3
 800b45a:	60fb      	str	r3, [r7, #12]

  /* Get pending bit  */
  regval = (EXTI->PR & maskline);
 800b45c:	4b0a      	ldr	r3, [pc, #40]	; (800b488 <HAL_EXTI_IRQHandler+0x44>)
 800b45e:	695b      	ldr	r3, [r3, #20]
 800b460:	68fa      	ldr	r2, [r7, #12]
 800b462:	4013      	ands	r3, r2
 800b464:	60bb      	str	r3, [r7, #8]
  if (regval != 0x00u)
 800b466:	68bb      	ldr	r3, [r7, #8]
 800b468:	2b00      	cmp	r3, #0
 800b46a:	d009      	beq.n	800b480 <HAL_EXTI_IRQHandler+0x3c>
  {
    /* Clear pending bit */
    EXTI->PR = maskline;
 800b46c:	4a06      	ldr	r2, [pc, #24]	; (800b488 <HAL_EXTI_IRQHandler+0x44>)
 800b46e:	68fb      	ldr	r3, [r7, #12]
 800b470:	6153      	str	r3, [r2, #20]

    /* Call callback */
    if (hexti->PendingCallback != NULL)
 800b472:	687b      	ldr	r3, [r7, #4]
 800b474:	685b      	ldr	r3, [r3, #4]
 800b476:	2b00      	cmp	r3, #0
 800b478:	d002      	beq.n	800b480 <HAL_EXTI_IRQHandler+0x3c>
    {
      hexti->PendingCallback();
 800b47a:	687b      	ldr	r3, [r7, #4]
 800b47c:	685b      	ldr	r3, [r3, #4]
 800b47e:	4798      	blx	r3
    }
  }
}
 800b480:	bf00      	nop
 800b482:	3710      	adds	r7, #16
 800b484:	46bd      	mov	sp, r7
 800b486:	bd80      	pop	{r7, pc}
 800b488:	40013c00 	.word	0x40013c00

0800b48c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800b48c:	b480      	push	{r7}
 800b48e:	b089      	sub	sp, #36	; 0x24
 800b490:	af00      	add	r7, sp, #0
 800b492:	6078      	str	r0, [r7, #4]
 800b494:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800b496:	2300      	movs	r3, #0
 800b498:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800b49a:	2300      	movs	r3, #0
 800b49c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800b49e:	2300      	movs	r3, #0
 800b4a0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800b4a2:	2300      	movs	r3, #0
 800b4a4:	61fb      	str	r3, [r7, #28]
 800b4a6:	e159      	b.n	800b75c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800b4a8:	2201      	movs	r2, #1
 800b4aa:	69fb      	ldr	r3, [r7, #28]
 800b4ac:	fa02 f303 	lsl.w	r3, r2, r3
 800b4b0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800b4b2:	683b      	ldr	r3, [r7, #0]
 800b4b4:	681b      	ldr	r3, [r3, #0]
 800b4b6:	697a      	ldr	r2, [r7, #20]
 800b4b8:	4013      	ands	r3, r2
 800b4ba:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800b4bc:	693a      	ldr	r2, [r7, #16]
 800b4be:	697b      	ldr	r3, [r7, #20]
 800b4c0:	429a      	cmp	r2, r3
 800b4c2:	f040 8148 	bne.w	800b756 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800b4c6:	683b      	ldr	r3, [r7, #0]
 800b4c8:	685b      	ldr	r3, [r3, #4]
 800b4ca:	f003 0303 	and.w	r3, r3, #3
 800b4ce:	2b01      	cmp	r3, #1
 800b4d0:	d005      	beq.n	800b4de <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800b4d2:	683b      	ldr	r3, [r7, #0]
 800b4d4:	685b      	ldr	r3, [r3, #4]
 800b4d6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800b4da:	2b02      	cmp	r3, #2
 800b4dc:	d130      	bne.n	800b540 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800b4de:	687b      	ldr	r3, [r7, #4]
 800b4e0:	689b      	ldr	r3, [r3, #8]
 800b4e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800b4e4:	69fb      	ldr	r3, [r7, #28]
 800b4e6:	005b      	lsls	r3, r3, #1
 800b4e8:	2203      	movs	r2, #3
 800b4ea:	fa02 f303 	lsl.w	r3, r2, r3
 800b4ee:	43db      	mvns	r3, r3
 800b4f0:	69ba      	ldr	r2, [r7, #24]
 800b4f2:	4013      	ands	r3, r2
 800b4f4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800b4f6:	683b      	ldr	r3, [r7, #0]
 800b4f8:	68da      	ldr	r2, [r3, #12]
 800b4fa:	69fb      	ldr	r3, [r7, #28]
 800b4fc:	005b      	lsls	r3, r3, #1
 800b4fe:	fa02 f303 	lsl.w	r3, r2, r3
 800b502:	69ba      	ldr	r2, [r7, #24]
 800b504:	4313      	orrs	r3, r2
 800b506:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800b508:	687b      	ldr	r3, [r7, #4]
 800b50a:	69ba      	ldr	r2, [r7, #24]
 800b50c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800b50e:	687b      	ldr	r3, [r7, #4]
 800b510:	685b      	ldr	r3, [r3, #4]
 800b512:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800b514:	2201      	movs	r2, #1
 800b516:	69fb      	ldr	r3, [r7, #28]
 800b518:	fa02 f303 	lsl.w	r3, r2, r3
 800b51c:	43db      	mvns	r3, r3
 800b51e:	69ba      	ldr	r2, [r7, #24]
 800b520:	4013      	ands	r3, r2
 800b522:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800b524:	683b      	ldr	r3, [r7, #0]
 800b526:	685b      	ldr	r3, [r3, #4]
 800b528:	091b      	lsrs	r3, r3, #4
 800b52a:	f003 0201 	and.w	r2, r3, #1
 800b52e:	69fb      	ldr	r3, [r7, #28]
 800b530:	fa02 f303 	lsl.w	r3, r2, r3
 800b534:	69ba      	ldr	r2, [r7, #24]
 800b536:	4313      	orrs	r3, r2
 800b538:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800b53a:	687b      	ldr	r3, [r7, #4]
 800b53c:	69ba      	ldr	r2, [r7, #24]
 800b53e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800b540:	683b      	ldr	r3, [r7, #0]
 800b542:	685b      	ldr	r3, [r3, #4]
 800b544:	f003 0303 	and.w	r3, r3, #3
 800b548:	2b03      	cmp	r3, #3
 800b54a:	d017      	beq.n	800b57c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800b54c:	687b      	ldr	r3, [r7, #4]
 800b54e:	68db      	ldr	r3, [r3, #12]
 800b550:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800b552:	69fb      	ldr	r3, [r7, #28]
 800b554:	005b      	lsls	r3, r3, #1
 800b556:	2203      	movs	r2, #3
 800b558:	fa02 f303 	lsl.w	r3, r2, r3
 800b55c:	43db      	mvns	r3, r3
 800b55e:	69ba      	ldr	r2, [r7, #24]
 800b560:	4013      	ands	r3, r2
 800b562:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800b564:	683b      	ldr	r3, [r7, #0]
 800b566:	689a      	ldr	r2, [r3, #8]
 800b568:	69fb      	ldr	r3, [r7, #28]
 800b56a:	005b      	lsls	r3, r3, #1
 800b56c:	fa02 f303 	lsl.w	r3, r2, r3
 800b570:	69ba      	ldr	r2, [r7, #24]
 800b572:	4313      	orrs	r3, r2
 800b574:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800b576:	687b      	ldr	r3, [r7, #4]
 800b578:	69ba      	ldr	r2, [r7, #24]
 800b57a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800b57c:	683b      	ldr	r3, [r7, #0]
 800b57e:	685b      	ldr	r3, [r3, #4]
 800b580:	f003 0303 	and.w	r3, r3, #3
 800b584:	2b02      	cmp	r3, #2
 800b586:	d123      	bne.n	800b5d0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800b588:	69fb      	ldr	r3, [r7, #28]
 800b58a:	08da      	lsrs	r2, r3, #3
 800b58c:	687b      	ldr	r3, [r7, #4]
 800b58e:	3208      	adds	r2, #8
 800b590:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b594:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800b596:	69fb      	ldr	r3, [r7, #28]
 800b598:	f003 0307 	and.w	r3, r3, #7
 800b59c:	009b      	lsls	r3, r3, #2
 800b59e:	220f      	movs	r2, #15
 800b5a0:	fa02 f303 	lsl.w	r3, r2, r3
 800b5a4:	43db      	mvns	r3, r3
 800b5a6:	69ba      	ldr	r2, [r7, #24]
 800b5a8:	4013      	ands	r3, r2
 800b5aa:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800b5ac:	683b      	ldr	r3, [r7, #0]
 800b5ae:	691a      	ldr	r2, [r3, #16]
 800b5b0:	69fb      	ldr	r3, [r7, #28]
 800b5b2:	f003 0307 	and.w	r3, r3, #7
 800b5b6:	009b      	lsls	r3, r3, #2
 800b5b8:	fa02 f303 	lsl.w	r3, r2, r3
 800b5bc:	69ba      	ldr	r2, [r7, #24]
 800b5be:	4313      	orrs	r3, r2
 800b5c0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800b5c2:	69fb      	ldr	r3, [r7, #28]
 800b5c4:	08da      	lsrs	r2, r3, #3
 800b5c6:	687b      	ldr	r3, [r7, #4]
 800b5c8:	3208      	adds	r2, #8
 800b5ca:	69b9      	ldr	r1, [r7, #24]
 800b5cc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800b5d0:	687b      	ldr	r3, [r7, #4]
 800b5d2:	681b      	ldr	r3, [r3, #0]
 800b5d4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800b5d6:	69fb      	ldr	r3, [r7, #28]
 800b5d8:	005b      	lsls	r3, r3, #1
 800b5da:	2203      	movs	r2, #3
 800b5dc:	fa02 f303 	lsl.w	r3, r2, r3
 800b5e0:	43db      	mvns	r3, r3
 800b5e2:	69ba      	ldr	r2, [r7, #24]
 800b5e4:	4013      	ands	r3, r2
 800b5e6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800b5e8:	683b      	ldr	r3, [r7, #0]
 800b5ea:	685b      	ldr	r3, [r3, #4]
 800b5ec:	f003 0203 	and.w	r2, r3, #3
 800b5f0:	69fb      	ldr	r3, [r7, #28]
 800b5f2:	005b      	lsls	r3, r3, #1
 800b5f4:	fa02 f303 	lsl.w	r3, r2, r3
 800b5f8:	69ba      	ldr	r2, [r7, #24]
 800b5fa:	4313      	orrs	r3, r2
 800b5fc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800b5fe:	687b      	ldr	r3, [r7, #4]
 800b600:	69ba      	ldr	r2, [r7, #24]
 800b602:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800b604:	683b      	ldr	r3, [r7, #0]
 800b606:	685b      	ldr	r3, [r3, #4]
 800b608:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800b60c:	2b00      	cmp	r3, #0
 800b60e:	f000 80a2 	beq.w	800b756 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800b612:	2300      	movs	r3, #0
 800b614:	60fb      	str	r3, [r7, #12]
 800b616:	4b57      	ldr	r3, [pc, #348]	; (800b774 <HAL_GPIO_Init+0x2e8>)
 800b618:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b61a:	4a56      	ldr	r2, [pc, #344]	; (800b774 <HAL_GPIO_Init+0x2e8>)
 800b61c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800b620:	6453      	str	r3, [r2, #68]	; 0x44
 800b622:	4b54      	ldr	r3, [pc, #336]	; (800b774 <HAL_GPIO_Init+0x2e8>)
 800b624:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b626:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b62a:	60fb      	str	r3, [r7, #12]
 800b62c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800b62e:	4a52      	ldr	r2, [pc, #328]	; (800b778 <HAL_GPIO_Init+0x2ec>)
 800b630:	69fb      	ldr	r3, [r7, #28]
 800b632:	089b      	lsrs	r3, r3, #2
 800b634:	3302      	adds	r3, #2
 800b636:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b63a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800b63c:	69fb      	ldr	r3, [r7, #28]
 800b63e:	f003 0303 	and.w	r3, r3, #3
 800b642:	009b      	lsls	r3, r3, #2
 800b644:	220f      	movs	r2, #15
 800b646:	fa02 f303 	lsl.w	r3, r2, r3
 800b64a:	43db      	mvns	r3, r3
 800b64c:	69ba      	ldr	r2, [r7, #24]
 800b64e:	4013      	ands	r3, r2
 800b650:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800b652:	687b      	ldr	r3, [r7, #4]
 800b654:	4a49      	ldr	r2, [pc, #292]	; (800b77c <HAL_GPIO_Init+0x2f0>)
 800b656:	4293      	cmp	r3, r2
 800b658:	d019      	beq.n	800b68e <HAL_GPIO_Init+0x202>
 800b65a:	687b      	ldr	r3, [r7, #4]
 800b65c:	4a48      	ldr	r2, [pc, #288]	; (800b780 <HAL_GPIO_Init+0x2f4>)
 800b65e:	4293      	cmp	r3, r2
 800b660:	d013      	beq.n	800b68a <HAL_GPIO_Init+0x1fe>
 800b662:	687b      	ldr	r3, [r7, #4]
 800b664:	4a47      	ldr	r2, [pc, #284]	; (800b784 <HAL_GPIO_Init+0x2f8>)
 800b666:	4293      	cmp	r3, r2
 800b668:	d00d      	beq.n	800b686 <HAL_GPIO_Init+0x1fa>
 800b66a:	687b      	ldr	r3, [r7, #4]
 800b66c:	4a46      	ldr	r2, [pc, #280]	; (800b788 <HAL_GPIO_Init+0x2fc>)
 800b66e:	4293      	cmp	r3, r2
 800b670:	d007      	beq.n	800b682 <HAL_GPIO_Init+0x1f6>
 800b672:	687b      	ldr	r3, [r7, #4]
 800b674:	4a45      	ldr	r2, [pc, #276]	; (800b78c <HAL_GPIO_Init+0x300>)
 800b676:	4293      	cmp	r3, r2
 800b678:	d101      	bne.n	800b67e <HAL_GPIO_Init+0x1f2>
 800b67a:	2304      	movs	r3, #4
 800b67c:	e008      	b.n	800b690 <HAL_GPIO_Init+0x204>
 800b67e:	2307      	movs	r3, #7
 800b680:	e006      	b.n	800b690 <HAL_GPIO_Init+0x204>
 800b682:	2303      	movs	r3, #3
 800b684:	e004      	b.n	800b690 <HAL_GPIO_Init+0x204>
 800b686:	2302      	movs	r3, #2
 800b688:	e002      	b.n	800b690 <HAL_GPIO_Init+0x204>
 800b68a:	2301      	movs	r3, #1
 800b68c:	e000      	b.n	800b690 <HAL_GPIO_Init+0x204>
 800b68e:	2300      	movs	r3, #0
 800b690:	69fa      	ldr	r2, [r7, #28]
 800b692:	f002 0203 	and.w	r2, r2, #3
 800b696:	0092      	lsls	r2, r2, #2
 800b698:	4093      	lsls	r3, r2
 800b69a:	69ba      	ldr	r2, [r7, #24]
 800b69c:	4313      	orrs	r3, r2
 800b69e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800b6a0:	4935      	ldr	r1, [pc, #212]	; (800b778 <HAL_GPIO_Init+0x2ec>)
 800b6a2:	69fb      	ldr	r3, [r7, #28]
 800b6a4:	089b      	lsrs	r3, r3, #2
 800b6a6:	3302      	adds	r3, #2
 800b6a8:	69ba      	ldr	r2, [r7, #24]
 800b6aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800b6ae:	4b38      	ldr	r3, [pc, #224]	; (800b790 <HAL_GPIO_Init+0x304>)
 800b6b0:	689b      	ldr	r3, [r3, #8]
 800b6b2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800b6b4:	693b      	ldr	r3, [r7, #16]
 800b6b6:	43db      	mvns	r3, r3
 800b6b8:	69ba      	ldr	r2, [r7, #24]
 800b6ba:	4013      	ands	r3, r2
 800b6bc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800b6be:	683b      	ldr	r3, [r7, #0]
 800b6c0:	685b      	ldr	r3, [r3, #4]
 800b6c2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800b6c6:	2b00      	cmp	r3, #0
 800b6c8:	d003      	beq.n	800b6d2 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800b6ca:	69ba      	ldr	r2, [r7, #24]
 800b6cc:	693b      	ldr	r3, [r7, #16]
 800b6ce:	4313      	orrs	r3, r2
 800b6d0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800b6d2:	4a2f      	ldr	r2, [pc, #188]	; (800b790 <HAL_GPIO_Init+0x304>)
 800b6d4:	69bb      	ldr	r3, [r7, #24]
 800b6d6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800b6d8:	4b2d      	ldr	r3, [pc, #180]	; (800b790 <HAL_GPIO_Init+0x304>)
 800b6da:	68db      	ldr	r3, [r3, #12]
 800b6dc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800b6de:	693b      	ldr	r3, [r7, #16]
 800b6e0:	43db      	mvns	r3, r3
 800b6e2:	69ba      	ldr	r2, [r7, #24]
 800b6e4:	4013      	ands	r3, r2
 800b6e6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800b6e8:	683b      	ldr	r3, [r7, #0]
 800b6ea:	685b      	ldr	r3, [r3, #4]
 800b6ec:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800b6f0:	2b00      	cmp	r3, #0
 800b6f2:	d003      	beq.n	800b6fc <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 800b6f4:	69ba      	ldr	r2, [r7, #24]
 800b6f6:	693b      	ldr	r3, [r7, #16]
 800b6f8:	4313      	orrs	r3, r2
 800b6fa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800b6fc:	4a24      	ldr	r2, [pc, #144]	; (800b790 <HAL_GPIO_Init+0x304>)
 800b6fe:	69bb      	ldr	r3, [r7, #24]
 800b700:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800b702:	4b23      	ldr	r3, [pc, #140]	; (800b790 <HAL_GPIO_Init+0x304>)
 800b704:	685b      	ldr	r3, [r3, #4]
 800b706:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800b708:	693b      	ldr	r3, [r7, #16]
 800b70a:	43db      	mvns	r3, r3
 800b70c:	69ba      	ldr	r2, [r7, #24]
 800b70e:	4013      	ands	r3, r2
 800b710:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800b712:	683b      	ldr	r3, [r7, #0]
 800b714:	685b      	ldr	r3, [r3, #4]
 800b716:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b71a:	2b00      	cmp	r3, #0
 800b71c:	d003      	beq.n	800b726 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800b71e:	69ba      	ldr	r2, [r7, #24]
 800b720:	693b      	ldr	r3, [r7, #16]
 800b722:	4313      	orrs	r3, r2
 800b724:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800b726:	4a1a      	ldr	r2, [pc, #104]	; (800b790 <HAL_GPIO_Init+0x304>)
 800b728:	69bb      	ldr	r3, [r7, #24]
 800b72a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800b72c:	4b18      	ldr	r3, [pc, #96]	; (800b790 <HAL_GPIO_Init+0x304>)
 800b72e:	681b      	ldr	r3, [r3, #0]
 800b730:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800b732:	693b      	ldr	r3, [r7, #16]
 800b734:	43db      	mvns	r3, r3
 800b736:	69ba      	ldr	r2, [r7, #24]
 800b738:	4013      	ands	r3, r2
 800b73a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800b73c:	683b      	ldr	r3, [r7, #0]
 800b73e:	685b      	ldr	r3, [r3, #4]
 800b740:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800b744:	2b00      	cmp	r3, #0
 800b746:	d003      	beq.n	800b750 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 800b748:	69ba      	ldr	r2, [r7, #24]
 800b74a:	693b      	ldr	r3, [r7, #16]
 800b74c:	4313      	orrs	r3, r2
 800b74e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800b750:	4a0f      	ldr	r2, [pc, #60]	; (800b790 <HAL_GPIO_Init+0x304>)
 800b752:	69bb      	ldr	r3, [r7, #24]
 800b754:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800b756:	69fb      	ldr	r3, [r7, #28]
 800b758:	3301      	adds	r3, #1
 800b75a:	61fb      	str	r3, [r7, #28]
 800b75c:	69fb      	ldr	r3, [r7, #28]
 800b75e:	2b0f      	cmp	r3, #15
 800b760:	f67f aea2 	bls.w	800b4a8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800b764:	bf00      	nop
 800b766:	bf00      	nop
 800b768:	3724      	adds	r7, #36	; 0x24
 800b76a:	46bd      	mov	sp, r7
 800b76c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b770:	4770      	bx	lr
 800b772:	bf00      	nop
 800b774:	40023800 	.word	0x40023800
 800b778:	40013800 	.word	0x40013800
 800b77c:	40020000 	.word	0x40020000
 800b780:	40020400 	.word	0x40020400
 800b784:	40020800 	.word	0x40020800
 800b788:	40020c00 	.word	0x40020c00
 800b78c:	40021000 	.word	0x40021000
 800b790:	40013c00 	.word	0x40013c00

0800b794 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 800b794:	b480      	push	{r7}
 800b796:	b087      	sub	sp, #28
 800b798:	af00      	add	r7, sp, #0
 800b79a:	6078      	str	r0, [r7, #4]
 800b79c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800b79e:	2300      	movs	r3, #0
 800b7a0:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 800b7a2:	2300      	movs	r3, #0
 800b7a4:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 800b7a6:	2300      	movs	r3, #0
 800b7a8:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800b7aa:	2300      	movs	r3, #0
 800b7ac:	617b      	str	r3, [r7, #20]
 800b7ae:	e0bb      	b.n	800b928 <HAL_GPIO_DeInit+0x194>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800b7b0:	2201      	movs	r2, #1
 800b7b2:	697b      	ldr	r3, [r7, #20]
 800b7b4:	fa02 f303 	lsl.w	r3, r2, r3
 800b7b8:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 800b7ba:	683a      	ldr	r2, [r7, #0]
 800b7bc:	693b      	ldr	r3, [r7, #16]
 800b7be:	4013      	ands	r3, r2
 800b7c0:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 800b7c2:	68fa      	ldr	r2, [r7, #12]
 800b7c4:	693b      	ldr	r3, [r7, #16]
 800b7c6:	429a      	cmp	r2, r3
 800b7c8:	f040 80ab 	bne.w	800b922 <HAL_GPIO_DeInit+0x18e>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 800b7cc:	4a5c      	ldr	r2, [pc, #368]	; (800b940 <HAL_GPIO_DeInit+0x1ac>)
 800b7ce:	697b      	ldr	r3, [r7, #20]
 800b7d0:	089b      	lsrs	r3, r3, #2
 800b7d2:	3302      	adds	r3, #2
 800b7d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b7d8:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 800b7da:	697b      	ldr	r3, [r7, #20]
 800b7dc:	f003 0303 	and.w	r3, r3, #3
 800b7e0:	009b      	lsls	r3, r3, #2
 800b7e2:	220f      	movs	r2, #15
 800b7e4:	fa02 f303 	lsl.w	r3, r2, r3
 800b7e8:	68ba      	ldr	r2, [r7, #8]
 800b7ea:	4013      	ands	r3, r2
 800b7ec:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 800b7ee:	687b      	ldr	r3, [r7, #4]
 800b7f0:	4a54      	ldr	r2, [pc, #336]	; (800b944 <HAL_GPIO_DeInit+0x1b0>)
 800b7f2:	4293      	cmp	r3, r2
 800b7f4:	d019      	beq.n	800b82a <HAL_GPIO_DeInit+0x96>
 800b7f6:	687b      	ldr	r3, [r7, #4]
 800b7f8:	4a53      	ldr	r2, [pc, #332]	; (800b948 <HAL_GPIO_DeInit+0x1b4>)
 800b7fa:	4293      	cmp	r3, r2
 800b7fc:	d013      	beq.n	800b826 <HAL_GPIO_DeInit+0x92>
 800b7fe:	687b      	ldr	r3, [r7, #4]
 800b800:	4a52      	ldr	r2, [pc, #328]	; (800b94c <HAL_GPIO_DeInit+0x1b8>)
 800b802:	4293      	cmp	r3, r2
 800b804:	d00d      	beq.n	800b822 <HAL_GPIO_DeInit+0x8e>
 800b806:	687b      	ldr	r3, [r7, #4]
 800b808:	4a51      	ldr	r2, [pc, #324]	; (800b950 <HAL_GPIO_DeInit+0x1bc>)
 800b80a:	4293      	cmp	r3, r2
 800b80c:	d007      	beq.n	800b81e <HAL_GPIO_DeInit+0x8a>
 800b80e:	687b      	ldr	r3, [r7, #4]
 800b810:	4a50      	ldr	r2, [pc, #320]	; (800b954 <HAL_GPIO_DeInit+0x1c0>)
 800b812:	4293      	cmp	r3, r2
 800b814:	d101      	bne.n	800b81a <HAL_GPIO_DeInit+0x86>
 800b816:	2304      	movs	r3, #4
 800b818:	e008      	b.n	800b82c <HAL_GPIO_DeInit+0x98>
 800b81a:	2307      	movs	r3, #7
 800b81c:	e006      	b.n	800b82c <HAL_GPIO_DeInit+0x98>
 800b81e:	2303      	movs	r3, #3
 800b820:	e004      	b.n	800b82c <HAL_GPIO_DeInit+0x98>
 800b822:	2302      	movs	r3, #2
 800b824:	e002      	b.n	800b82c <HAL_GPIO_DeInit+0x98>
 800b826:	2301      	movs	r3, #1
 800b828:	e000      	b.n	800b82c <HAL_GPIO_DeInit+0x98>
 800b82a:	2300      	movs	r3, #0
 800b82c:	697a      	ldr	r2, [r7, #20]
 800b82e:	f002 0203 	and.w	r2, r2, #3
 800b832:	0092      	lsls	r2, r2, #2
 800b834:	4093      	lsls	r3, r2
 800b836:	68ba      	ldr	r2, [r7, #8]
 800b838:	429a      	cmp	r2, r3
 800b83a:	d132      	bne.n	800b8a2 <HAL_GPIO_DeInit+0x10e>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 800b83c:	4b46      	ldr	r3, [pc, #280]	; (800b958 <HAL_GPIO_DeInit+0x1c4>)
 800b83e:	681a      	ldr	r2, [r3, #0]
 800b840:	68fb      	ldr	r3, [r7, #12]
 800b842:	43db      	mvns	r3, r3
 800b844:	4944      	ldr	r1, [pc, #272]	; (800b958 <HAL_GPIO_DeInit+0x1c4>)
 800b846:	4013      	ands	r3, r2
 800b848:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 800b84a:	4b43      	ldr	r3, [pc, #268]	; (800b958 <HAL_GPIO_DeInit+0x1c4>)
 800b84c:	685a      	ldr	r2, [r3, #4]
 800b84e:	68fb      	ldr	r3, [r7, #12]
 800b850:	43db      	mvns	r3, r3
 800b852:	4941      	ldr	r1, [pc, #260]	; (800b958 <HAL_GPIO_DeInit+0x1c4>)
 800b854:	4013      	ands	r3, r2
 800b856:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 800b858:	4b3f      	ldr	r3, [pc, #252]	; (800b958 <HAL_GPIO_DeInit+0x1c4>)
 800b85a:	68da      	ldr	r2, [r3, #12]
 800b85c:	68fb      	ldr	r3, [r7, #12]
 800b85e:	43db      	mvns	r3, r3
 800b860:	493d      	ldr	r1, [pc, #244]	; (800b958 <HAL_GPIO_DeInit+0x1c4>)
 800b862:	4013      	ands	r3, r2
 800b864:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 800b866:	4b3c      	ldr	r3, [pc, #240]	; (800b958 <HAL_GPIO_DeInit+0x1c4>)
 800b868:	689a      	ldr	r2, [r3, #8]
 800b86a:	68fb      	ldr	r3, [r7, #12]
 800b86c:	43db      	mvns	r3, r3
 800b86e:	493a      	ldr	r1, [pc, #232]	; (800b958 <HAL_GPIO_DeInit+0x1c4>)
 800b870:	4013      	ands	r3, r2
 800b872:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 800b874:	697b      	ldr	r3, [r7, #20]
 800b876:	f003 0303 	and.w	r3, r3, #3
 800b87a:	009b      	lsls	r3, r3, #2
 800b87c:	220f      	movs	r2, #15
 800b87e:	fa02 f303 	lsl.w	r3, r2, r3
 800b882:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 800b884:	4a2e      	ldr	r2, [pc, #184]	; (800b940 <HAL_GPIO_DeInit+0x1ac>)
 800b886:	697b      	ldr	r3, [r7, #20]
 800b888:	089b      	lsrs	r3, r3, #2
 800b88a:	3302      	adds	r3, #2
 800b88c:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800b890:	68bb      	ldr	r3, [r7, #8]
 800b892:	43da      	mvns	r2, r3
 800b894:	482a      	ldr	r0, [pc, #168]	; (800b940 <HAL_GPIO_DeInit+0x1ac>)
 800b896:	697b      	ldr	r3, [r7, #20]
 800b898:	089b      	lsrs	r3, r3, #2
 800b89a:	400a      	ands	r2, r1
 800b89c:	3302      	adds	r3, #2
 800b89e:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800b8a2:	687b      	ldr	r3, [r7, #4]
 800b8a4:	681a      	ldr	r2, [r3, #0]
 800b8a6:	697b      	ldr	r3, [r7, #20]
 800b8a8:	005b      	lsls	r3, r3, #1
 800b8aa:	2103      	movs	r1, #3
 800b8ac:	fa01 f303 	lsl.w	r3, r1, r3
 800b8b0:	43db      	mvns	r3, r3
 800b8b2:	401a      	ands	r2, r3
 800b8b4:	687b      	ldr	r3, [r7, #4]
 800b8b6:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800b8b8:	697b      	ldr	r3, [r7, #20]
 800b8ba:	08da      	lsrs	r2, r3, #3
 800b8bc:	687b      	ldr	r3, [r7, #4]
 800b8be:	3208      	adds	r2, #8
 800b8c0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800b8c4:	697b      	ldr	r3, [r7, #20]
 800b8c6:	f003 0307 	and.w	r3, r3, #7
 800b8ca:	009b      	lsls	r3, r3, #2
 800b8cc:	220f      	movs	r2, #15
 800b8ce:	fa02 f303 	lsl.w	r3, r2, r3
 800b8d2:	43db      	mvns	r3, r3
 800b8d4:	697a      	ldr	r2, [r7, #20]
 800b8d6:	08d2      	lsrs	r2, r2, #3
 800b8d8:	4019      	ands	r1, r3
 800b8da:	687b      	ldr	r3, [r7, #4]
 800b8dc:	3208      	adds	r2, #8
 800b8de:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800b8e2:	687b      	ldr	r3, [r7, #4]
 800b8e4:	68da      	ldr	r2, [r3, #12]
 800b8e6:	697b      	ldr	r3, [r7, #20]
 800b8e8:	005b      	lsls	r3, r3, #1
 800b8ea:	2103      	movs	r1, #3
 800b8ec:	fa01 f303 	lsl.w	r3, r1, r3
 800b8f0:	43db      	mvns	r3, r3
 800b8f2:	401a      	ands	r2, r3
 800b8f4:	687b      	ldr	r3, [r7, #4]
 800b8f6:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 800b8f8:	687b      	ldr	r3, [r7, #4]
 800b8fa:	685a      	ldr	r2, [r3, #4]
 800b8fc:	2101      	movs	r1, #1
 800b8fe:	697b      	ldr	r3, [r7, #20]
 800b900:	fa01 f303 	lsl.w	r3, r1, r3
 800b904:	43db      	mvns	r3, r3
 800b906:	401a      	ands	r2, r3
 800b908:	687b      	ldr	r3, [r7, #4]
 800b90a:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800b90c:	687b      	ldr	r3, [r7, #4]
 800b90e:	689a      	ldr	r2, [r3, #8]
 800b910:	697b      	ldr	r3, [r7, #20]
 800b912:	005b      	lsls	r3, r3, #1
 800b914:	2103      	movs	r1, #3
 800b916:	fa01 f303 	lsl.w	r3, r1, r3
 800b91a:	43db      	mvns	r3, r3
 800b91c:	401a      	ands	r2, r3
 800b91e:	687b      	ldr	r3, [r7, #4]
 800b920:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800b922:	697b      	ldr	r3, [r7, #20]
 800b924:	3301      	adds	r3, #1
 800b926:	617b      	str	r3, [r7, #20]
 800b928:	697b      	ldr	r3, [r7, #20]
 800b92a:	2b0f      	cmp	r3, #15
 800b92c:	f67f af40 	bls.w	800b7b0 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 800b930:	bf00      	nop
 800b932:	bf00      	nop
 800b934:	371c      	adds	r7, #28
 800b936:	46bd      	mov	sp, r7
 800b938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b93c:	4770      	bx	lr
 800b93e:	bf00      	nop
 800b940:	40013800 	.word	0x40013800
 800b944:	40020000 	.word	0x40020000
 800b948:	40020400 	.word	0x40020400
 800b94c:	40020800 	.word	0x40020800
 800b950:	40020c00 	.word	0x40020c00
 800b954:	40021000 	.word	0x40021000
 800b958:	40013c00 	.word	0x40013c00

0800b95c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800b95c:	b480      	push	{r7}
 800b95e:	b085      	sub	sp, #20
 800b960:	af00      	add	r7, sp, #0
 800b962:	6078      	str	r0, [r7, #4]
 800b964:	460b      	mov	r3, r1
 800b966:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800b968:	687b      	ldr	r3, [r7, #4]
 800b96a:	691a      	ldr	r2, [r3, #16]
 800b96c:	887b      	ldrh	r3, [r7, #2]
 800b96e:	4013      	ands	r3, r2
 800b970:	2b00      	cmp	r3, #0
 800b972:	d002      	beq.n	800b97a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800b974:	2301      	movs	r3, #1
 800b976:	73fb      	strb	r3, [r7, #15]
 800b978:	e001      	b.n	800b97e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800b97a:	2300      	movs	r3, #0
 800b97c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800b97e:	7bfb      	ldrb	r3, [r7, #15]
}
 800b980:	4618      	mov	r0, r3
 800b982:	3714      	adds	r7, #20
 800b984:	46bd      	mov	sp, r7
 800b986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b98a:	4770      	bx	lr

0800b98c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800b98c:	b480      	push	{r7}
 800b98e:	b083      	sub	sp, #12
 800b990:	af00      	add	r7, sp, #0
 800b992:	6078      	str	r0, [r7, #4]
 800b994:	460b      	mov	r3, r1
 800b996:	807b      	strh	r3, [r7, #2]
 800b998:	4613      	mov	r3, r2
 800b99a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800b99c:	787b      	ldrb	r3, [r7, #1]
 800b99e:	2b00      	cmp	r3, #0
 800b9a0:	d003      	beq.n	800b9aa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800b9a2:	887a      	ldrh	r2, [r7, #2]
 800b9a4:	687b      	ldr	r3, [r7, #4]
 800b9a6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800b9a8:	e003      	b.n	800b9b2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800b9aa:	887b      	ldrh	r3, [r7, #2]
 800b9ac:	041a      	lsls	r2, r3, #16
 800b9ae:	687b      	ldr	r3, [r7, #4]
 800b9b0:	619a      	str	r2, [r3, #24]
}
 800b9b2:	bf00      	nop
 800b9b4:	370c      	adds	r7, #12
 800b9b6:	46bd      	mov	sp, r7
 800b9b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9bc:	4770      	bx	lr

0800b9be <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800b9be:	b480      	push	{r7}
 800b9c0:	b085      	sub	sp, #20
 800b9c2:	af00      	add	r7, sp, #0
 800b9c4:	6078      	str	r0, [r7, #4]
 800b9c6:	460b      	mov	r3, r1
 800b9c8:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800b9ca:	687b      	ldr	r3, [r7, #4]
 800b9cc:	695b      	ldr	r3, [r3, #20]
 800b9ce:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800b9d0:	887a      	ldrh	r2, [r7, #2]
 800b9d2:	68fb      	ldr	r3, [r7, #12]
 800b9d4:	4013      	ands	r3, r2
 800b9d6:	041a      	lsls	r2, r3, #16
 800b9d8:	68fb      	ldr	r3, [r7, #12]
 800b9da:	43d9      	mvns	r1, r3
 800b9dc:	887b      	ldrh	r3, [r7, #2]
 800b9de:	400b      	ands	r3, r1
 800b9e0:	431a      	orrs	r2, r3
 800b9e2:	687b      	ldr	r3, [r7, #4]
 800b9e4:	619a      	str	r2, [r3, #24]
}
 800b9e6:	bf00      	nop
 800b9e8:	3714      	adds	r7, #20
 800b9ea:	46bd      	mov	sp, r7
 800b9ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9f0:	4770      	bx	lr
	...

0800b9f4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800b9f4:	b580      	push	{r7, lr}
 800b9f6:	b084      	sub	sp, #16
 800b9f8:	af00      	add	r7, sp, #0
 800b9fa:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800b9fc:	687b      	ldr	r3, [r7, #4]
 800b9fe:	2b00      	cmp	r3, #0
 800ba00:	d101      	bne.n	800ba06 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800ba02:	2301      	movs	r3, #1
 800ba04:	e12b      	b.n	800bc5e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800ba06:	687b      	ldr	r3, [r7, #4]
 800ba08:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ba0c:	b2db      	uxtb	r3, r3
 800ba0e:	2b00      	cmp	r3, #0
 800ba10:	d106      	bne.n	800ba20 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800ba12:	687b      	ldr	r3, [r7, #4]
 800ba14:	2200      	movs	r2, #0
 800ba16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800ba1a:	6878      	ldr	r0, [r7, #4]
 800ba1c:	f000 f95d 	bl	800bcda <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800ba20:	687b      	ldr	r3, [r7, #4]
 800ba22:	2224      	movs	r2, #36	; 0x24
 800ba24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800ba28:	687b      	ldr	r3, [r7, #4]
 800ba2a:	681b      	ldr	r3, [r3, #0]
 800ba2c:	681a      	ldr	r2, [r3, #0]
 800ba2e:	687b      	ldr	r3, [r7, #4]
 800ba30:	681b      	ldr	r3, [r3, #0]
 800ba32:	f022 0201 	bic.w	r2, r2, #1
 800ba36:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800ba38:	687b      	ldr	r3, [r7, #4]
 800ba3a:	681b      	ldr	r3, [r3, #0]
 800ba3c:	681a      	ldr	r2, [r3, #0]
 800ba3e:	687b      	ldr	r3, [r7, #4]
 800ba40:	681b      	ldr	r3, [r3, #0]
 800ba42:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800ba46:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800ba48:	687b      	ldr	r3, [r7, #4]
 800ba4a:	681b      	ldr	r3, [r3, #0]
 800ba4c:	681a      	ldr	r2, [r3, #0]
 800ba4e:	687b      	ldr	r3, [r7, #4]
 800ba50:	681b      	ldr	r3, [r3, #0]
 800ba52:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800ba56:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800ba58:	f001 fc5a 	bl	800d310 <HAL_RCC_GetPCLK1Freq>
 800ba5c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800ba5e:	687b      	ldr	r3, [r7, #4]
 800ba60:	685b      	ldr	r3, [r3, #4]
 800ba62:	4a81      	ldr	r2, [pc, #516]	; (800bc68 <HAL_I2C_Init+0x274>)
 800ba64:	4293      	cmp	r3, r2
 800ba66:	d807      	bhi.n	800ba78 <HAL_I2C_Init+0x84>
 800ba68:	68fb      	ldr	r3, [r7, #12]
 800ba6a:	4a80      	ldr	r2, [pc, #512]	; (800bc6c <HAL_I2C_Init+0x278>)
 800ba6c:	4293      	cmp	r3, r2
 800ba6e:	bf94      	ite	ls
 800ba70:	2301      	movls	r3, #1
 800ba72:	2300      	movhi	r3, #0
 800ba74:	b2db      	uxtb	r3, r3
 800ba76:	e006      	b.n	800ba86 <HAL_I2C_Init+0x92>
 800ba78:	68fb      	ldr	r3, [r7, #12]
 800ba7a:	4a7d      	ldr	r2, [pc, #500]	; (800bc70 <HAL_I2C_Init+0x27c>)
 800ba7c:	4293      	cmp	r3, r2
 800ba7e:	bf94      	ite	ls
 800ba80:	2301      	movls	r3, #1
 800ba82:	2300      	movhi	r3, #0
 800ba84:	b2db      	uxtb	r3, r3
 800ba86:	2b00      	cmp	r3, #0
 800ba88:	d001      	beq.n	800ba8e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800ba8a:	2301      	movs	r3, #1
 800ba8c:	e0e7      	b.n	800bc5e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800ba8e:	68fb      	ldr	r3, [r7, #12]
 800ba90:	4a78      	ldr	r2, [pc, #480]	; (800bc74 <HAL_I2C_Init+0x280>)
 800ba92:	fba2 2303 	umull	r2, r3, r2, r3
 800ba96:	0c9b      	lsrs	r3, r3, #18
 800ba98:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800ba9a:	687b      	ldr	r3, [r7, #4]
 800ba9c:	681b      	ldr	r3, [r3, #0]
 800ba9e:	685b      	ldr	r3, [r3, #4]
 800baa0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800baa4:	687b      	ldr	r3, [r7, #4]
 800baa6:	681b      	ldr	r3, [r3, #0]
 800baa8:	68ba      	ldr	r2, [r7, #8]
 800baaa:	430a      	orrs	r2, r1
 800baac:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800baae:	687b      	ldr	r3, [r7, #4]
 800bab0:	681b      	ldr	r3, [r3, #0]
 800bab2:	6a1b      	ldr	r3, [r3, #32]
 800bab4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800bab8:	687b      	ldr	r3, [r7, #4]
 800baba:	685b      	ldr	r3, [r3, #4]
 800babc:	4a6a      	ldr	r2, [pc, #424]	; (800bc68 <HAL_I2C_Init+0x274>)
 800babe:	4293      	cmp	r3, r2
 800bac0:	d802      	bhi.n	800bac8 <HAL_I2C_Init+0xd4>
 800bac2:	68bb      	ldr	r3, [r7, #8]
 800bac4:	3301      	adds	r3, #1
 800bac6:	e009      	b.n	800badc <HAL_I2C_Init+0xe8>
 800bac8:	68bb      	ldr	r3, [r7, #8]
 800baca:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800bace:	fb02 f303 	mul.w	r3, r2, r3
 800bad2:	4a69      	ldr	r2, [pc, #420]	; (800bc78 <HAL_I2C_Init+0x284>)
 800bad4:	fba2 2303 	umull	r2, r3, r2, r3
 800bad8:	099b      	lsrs	r3, r3, #6
 800bada:	3301      	adds	r3, #1
 800badc:	687a      	ldr	r2, [r7, #4]
 800bade:	6812      	ldr	r2, [r2, #0]
 800bae0:	430b      	orrs	r3, r1
 800bae2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800bae4:	687b      	ldr	r3, [r7, #4]
 800bae6:	681b      	ldr	r3, [r3, #0]
 800bae8:	69db      	ldr	r3, [r3, #28]
 800baea:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800baee:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800baf2:	687b      	ldr	r3, [r7, #4]
 800baf4:	685b      	ldr	r3, [r3, #4]
 800baf6:	495c      	ldr	r1, [pc, #368]	; (800bc68 <HAL_I2C_Init+0x274>)
 800baf8:	428b      	cmp	r3, r1
 800bafa:	d819      	bhi.n	800bb30 <HAL_I2C_Init+0x13c>
 800bafc:	68fb      	ldr	r3, [r7, #12]
 800bafe:	1e59      	subs	r1, r3, #1
 800bb00:	687b      	ldr	r3, [r7, #4]
 800bb02:	685b      	ldr	r3, [r3, #4]
 800bb04:	005b      	lsls	r3, r3, #1
 800bb06:	fbb1 f3f3 	udiv	r3, r1, r3
 800bb0a:	1c59      	adds	r1, r3, #1
 800bb0c:	f640 73fc 	movw	r3, #4092	; 0xffc
 800bb10:	400b      	ands	r3, r1
 800bb12:	2b00      	cmp	r3, #0
 800bb14:	d00a      	beq.n	800bb2c <HAL_I2C_Init+0x138>
 800bb16:	68fb      	ldr	r3, [r7, #12]
 800bb18:	1e59      	subs	r1, r3, #1
 800bb1a:	687b      	ldr	r3, [r7, #4]
 800bb1c:	685b      	ldr	r3, [r3, #4]
 800bb1e:	005b      	lsls	r3, r3, #1
 800bb20:	fbb1 f3f3 	udiv	r3, r1, r3
 800bb24:	3301      	adds	r3, #1
 800bb26:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800bb2a:	e051      	b.n	800bbd0 <HAL_I2C_Init+0x1dc>
 800bb2c:	2304      	movs	r3, #4
 800bb2e:	e04f      	b.n	800bbd0 <HAL_I2C_Init+0x1dc>
 800bb30:	687b      	ldr	r3, [r7, #4]
 800bb32:	689b      	ldr	r3, [r3, #8]
 800bb34:	2b00      	cmp	r3, #0
 800bb36:	d111      	bne.n	800bb5c <HAL_I2C_Init+0x168>
 800bb38:	68fb      	ldr	r3, [r7, #12]
 800bb3a:	1e58      	subs	r0, r3, #1
 800bb3c:	687b      	ldr	r3, [r7, #4]
 800bb3e:	6859      	ldr	r1, [r3, #4]
 800bb40:	460b      	mov	r3, r1
 800bb42:	005b      	lsls	r3, r3, #1
 800bb44:	440b      	add	r3, r1
 800bb46:	fbb0 f3f3 	udiv	r3, r0, r3
 800bb4a:	3301      	adds	r3, #1
 800bb4c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800bb50:	2b00      	cmp	r3, #0
 800bb52:	bf0c      	ite	eq
 800bb54:	2301      	moveq	r3, #1
 800bb56:	2300      	movne	r3, #0
 800bb58:	b2db      	uxtb	r3, r3
 800bb5a:	e012      	b.n	800bb82 <HAL_I2C_Init+0x18e>
 800bb5c:	68fb      	ldr	r3, [r7, #12]
 800bb5e:	1e58      	subs	r0, r3, #1
 800bb60:	687b      	ldr	r3, [r7, #4]
 800bb62:	6859      	ldr	r1, [r3, #4]
 800bb64:	460b      	mov	r3, r1
 800bb66:	009b      	lsls	r3, r3, #2
 800bb68:	440b      	add	r3, r1
 800bb6a:	0099      	lsls	r1, r3, #2
 800bb6c:	440b      	add	r3, r1
 800bb6e:	fbb0 f3f3 	udiv	r3, r0, r3
 800bb72:	3301      	adds	r3, #1
 800bb74:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800bb78:	2b00      	cmp	r3, #0
 800bb7a:	bf0c      	ite	eq
 800bb7c:	2301      	moveq	r3, #1
 800bb7e:	2300      	movne	r3, #0
 800bb80:	b2db      	uxtb	r3, r3
 800bb82:	2b00      	cmp	r3, #0
 800bb84:	d001      	beq.n	800bb8a <HAL_I2C_Init+0x196>
 800bb86:	2301      	movs	r3, #1
 800bb88:	e022      	b.n	800bbd0 <HAL_I2C_Init+0x1dc>
 800bb8a:	687b      	ldr	r3, [r7, #4]
 800bb8c:	689b      	ldr	r3, [r3, #8]
 800bb8e:	2b00      	cmp	r3, #0
 800bb90:	d10e      	bne.n	800bbb0 <HAL_I2C_Init+0x1bc>
 800bb92:	68fb      	ldr	r3, [r7, #12]
 800bb94:	1e58      	subs	r0, r3, #1
 800bb96:	687b      	ldr	r3, [r7, #4]
 800bb98:	6859      	ldr	r1, [r3, #4]
 800bb9a:	460b      	mov	r3, r1
 800bb9c:	005b      	lsls	r3, r3, #1
 800bb9e:	440b      	add	r3, r1
 800bba0:	fbb0 f3f3 	udiv	r3, r0, r3
 800bba4:	3301      	adds	r3, #1
 800bba6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800bbaa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800bbae:	e00f      	b.n	800bbd0 <HAL_I2C_Init+0x1dc>
 800bbb0:	68fb      	ldr	r3, [r7, #12]
 800bbb2:	1e58      	subs	r0, r3, #1
 800bbb4:	687b      	ldr	r3, [r7, #4]
 800bbb6:	6859      	ldr	r1, [r3, #4]
 800bbb8:	460b      	mov	r3, r1
 800bbba:	009b      	lsls	r3, r3, #2
 800bbbc:	440b      	add	r3, r1
 800bbbe:	0099      	lsls	r1, r3, #2
 800bbc0:	440b      	add	r3, r1
 800bbc2:	fbb0 f3f3 	udiv	r3, r0, r3
 800bbc6:	3301      	adds	r3, #1
 800bbc8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800bbcc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800bbd0:	6879      	ldr	r1, [r7, #4]
 800bbd2:	6809      	ldr	r1, [r1, #0]
 800bbd4:	4313      	orrs	r3, r2
 800bbd6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800bbd8:	687b      	ldr	r3, [r7, #4]
 800bbda:	681b      	ldr	r3, [r3, #0]
 800bbdc:	681b      	ldr	r3, [r3, #0]
 800bbde:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800bbe2:	687b      	ldr	r3, [r7, #4]
 800bbe4:	69da      	ldr	r2, [r3, #28]
 800bbe6:	687b      	ldr	r3, [r7, #4]
 800bbe8:	6a1b      	ldr	r3, [r3, #32]
 800bbea:	431a      	orrs	r2, r3
 800bbec:	687b      	ldr	r3, [r7, #4]
 800bbee:	681b      	ldr	r3, [r3, #0]
 800bbf0:	430a      	orrs	r2, r1
 800bbf2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800bbf4:	687b      	ldr	r3, [r7, #4]
 800bbf6:	681b      	ldr	r3, [r3, #0]
 800bbf8:	689b      	ldr	r3, [r3, #8]
 800bbfa:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800bbfe:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800bc02:	687a      	ldr	r2, [r7, #4]
 800bc04:	6911      	ldr	r1, [r2, #16]
 800bc06:	687a      	ldr	r2, [r7, #4]
 800bc08:	68d2      	ldr	r2, [r2, #12]
 800bc0a:	4311      	orrs	r1, r2
 800bc0c:	687a      	ldr	r2, [r7, #4]
 800bc0e:	6812      	ldr	r2, [r2, #0]
 800bc10:	430b      	orrs	r3, r1
 800bc12:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800bc14:	687b      	ldr	r3, [r7, #4]
 800bc16:	681b      	ldr	r3, [r3, #0]
 800bc18:	68db      	ldr	r3, [r3, #12]
 800bc1a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800bc1e:	687b      	ldr	r3, [r7, #4]
 800bc20:	695a      	ldr	r2, [r3, #20]
 800bc22:	687b      	ldr	r3, [r7, #4]
 800bc24:	699b      	ldr	r3, [r3, #24]
 800bc26:	431a      	orrs	r2, r3
 800bc28:	687b      	ldr	r3, [r7, #4]
 800bc2a:	681b      	ldr	r3, [r3, #0]
 800bc2c:	430a      	orrs	r2, r1
 800bc2e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800bc30:	687b      	ldr	r3, [r7, #4]
 800bc32:	681b      	ldr	r3, [r3, #0]
 800bc34:	681a      	ldr	r2, [r3, #0]
 800bc36:	687b      	ldr	r3, [r7, #4]
 800bc38:	681b      	ldr	r3, [r3, #0]
 800bc3a:	f042 0201 	orr.w	r2, r2, #1
 800bc3e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800bc40:	687b      	ldr	r3, [r7, #4]
 800bc42:	2200      	movs	r2, #0
 800bc44:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800bc46:	687b      	ldr	r3, [r7, #4]
 800bc48:	2220      	movs	r2, #32
 800bc4a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800bc4e:	687b      	ldr	r3, [r7, #4]
 800bc50:	2200      	movs	r2, #0
 800bc52:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800bc54:	687b      	ldr	r3, [r7, #4]
 800bc56:	2200      	movs	r2, #0
 800bc58:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800bc5c:	2300      	movs	r3, #0
}
 800bc5e:	4618      	mov	r0, r3
 800bc60:	3710      	adds	r7, #16
 800bc62:	46bd      	mov	sp, r7
 800bc64:	bd80      	pop	{r7, pc}
 800bc66:	bf00      	nop
 800bc68:	000186a0 	.word	0x000186a0
 800bc6c:	001e847f 	.word	0x001e847f
 800bc70:	003d08ff 	.word	0x003d08ff
 800bc74:	431bde83 	.word	0x431bde83
 800bc78:	10624dd3 	.word	0x10624dd3

0800bc7c <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 800bc7c:	b580      	push	{r7, lr}
 800bc7e:	b082      	sub	sp, #8
 800bc80:	af00      	add	r7, sp, #0
 800bc82:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800bc84:	687b      	ldr	r3, [r7, #4]
 800bc86:	2b00      	cmp	r3, #0
 800bc88:	d101      	bne.n	800bc8e <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 800bc8a:	2301      	movs	r3, #1
 800bc8c:	e021      	b.n	800bcd2 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 800bc8e:	687b      	ldr	r3, [r7, #4]
 800bc90:	2224      	movs	r2, #36	; 0x24
 800bc92:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 800bc96:	687b      	ldr	r3, [r7, #4]
 800bc98:	681b      	ldr	r3, [r3, #0]
 800bc9a:	681a      	ldr	r2, [r3, #0]
 800bc9c:	687b      	ldr	r3, [r7, #4]
 800bc9e:	681b      	ldr	r3, [r3, #0]
 800bca0:	f022 0201 	bic.w	r2, r2, #1
 800bca4:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 800bca6:	6878      	ldr	r0, [r7, #4]
 800bca8:	f000 f821 	bl	800bcee <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 800bcac:	687b      	ldr	r3, [r7, #4]
 800bcae:	2200      	movs	r2, #0
 800bcb0:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State         = HAL_I2C_STATE_RESET;
 800bcb2:	687b      	ldr	r3, [r7, #4]
 800bcb4:	2200      	movs	r2, #0
 800bcb6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800bcba:	687b      	ldr	r3, [r7, #4]
 800bcbc:	2200      	movs	r2, #0
 800bcbe:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 800bcc0:	687b      	ldr	r3, [r7, #4]
 800bcc2:	2200      	movs	r2, #0
 800bcc4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 800bcc8:	687b      	ldr	r3, [r7, #4]
 800bcca:	2200      	movs	r2, #0
 800bccc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800bcd0:	2300      	movs	r3, #0
}
 800bcd2:	4618      	mov	r0, r3
 800bcd4:	3708      	adds	r7, #8
 800bcd6:	46bd      	mov	sp, r7
 800bcd8:	bd80      	pop	{r7, pc}

0800bcda <HAL_I2C_MspInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspInit(I2C_HandleTypeDef *hi2c)
{
 800bcda:	b480      	push	{r7}
 800bcdc:	b083      	sub	sp, #12
 800bcde:	af00      	add	r7, sp, #0
 800bce0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspInit could be implemented in the user file
   */
}
 800bce2:	bf00      	nop
 800bce4:	370c      	adds	r7, #12
 800bce6:	46bd      	mov	sp, r7
 800bce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcec:	4770      	bx	lr

0800bcee <HAL_I2C_MspDeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspDeInit(I2C_HandleTypeDef *hi2c)
{
 800bcee:	b480      	push	{r7}
 800bcf0:	b083      	sub	sp, #12
 800bcf2:	af00      	add	r7, sp, #0
 800bcf4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspDeInit could be implemented in the user file
   */
}
 800bcf6:	bf00      	nop
 800bcf8:	370c      	adds	r7, #12
 800bcfa:	46bd      	mov	sp, r7
 800bcfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd00:	4770      	bx	lr
	...

0800bd04 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800bd04:	b580      	push	{r7, lr}
 800bd06:	b088      	sub	sp, #32
 800bd08:	af02      	add	r7, sp, #8
 800bd0a:	60f8      	str	r0, [r7, #12]
 800bd0c:	4608      	mov	r0, r1
 800bd0e:	4611      	mov	r1, r2
 800bd10:	461a      	mov	r2, r3
 800bd12:	4603      	mov	r3, r0
 800bd14:	817b      	strh	r3, [r7, #10]
 800bd16:	460b      	mov	r3, r1
 800bd18:	813b      	strh	r3, [r7, #8]
 800bd1a:	4613      	mov	r3, r2
 800bd1c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800bd1e:	f7ff fa21 	bl	800b164 <HAL_GetTick>
 800bd22:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800bd24:	68fb      	ldr	r3, [r7, #12]
 800bd26:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800bd2a:	b2db      	uxtb	r3, r3
 800bd2c:	2b20      	cmp	r3, #32
 800bd2e:	f040 80d9 	bne.w	800bee4 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800bd32:	697b      	ldr	r3, [r7, #20]
 800bd34:	9300      	str	r3, [sp, #0]
 800bd36:	2319      	movs	r3, #25
 800bd38:	2201      	movs	r2, #1
 800bd3a:	496d      	ldr	r1, [pc, #436]	; (800bef0 <HAL_I2C_Mem_Write+0x1ec>)
 800bd3c:	68f8      	ldr	r0, [r7, #12]
 800bd3e:	f000 fc99 	bl	800c674 <I2C_WaitOnFlagUntilTimeout>
 800bd42:	4603      	mov	r3, r0
 800bd44:	2b00      	cmp	r3, #0
 800bd46:	d001      	beq.n	800bd4c <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 800bd48:	2302      	movs	r3, #2
 800bd4a:	e0cc      	b.n	800bee6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800bd4c:	68fb      	ldr	r3, [r7, #12]
 800bd4e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800bd52:	2b01      	cmp	r3, #1
 800bd54:	d101      	bne.n	800bd5a <HAL_I2C_Mem_Write+0x56>
 800bd56:	2302      	movs	r3, #2
 800bd58:	e0c5      	b.n	800bee6 <HAL_I2C_Mem_Write+0x1e2>
 800bd5a:	68fb      	ldr	r3, [r7, #12]
 800bd5c:	2201      	movs	r2, #1
 800bd5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800bd62:	68fb      	ldr	r3, [r7, #12]
 800bd64:	681b      	ldr	r3, [r3, #0]
 800bd66:	681b      	ldr	r3, [r3, #0]
 800bd68:	f003 0301 	and.w	r3, r3, #1
 800bd6c:	2b01      	cmp	r3, #1
 800bd6e:	d007      	beq.n	800bd80 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800bd70:	68fb      	ldr	r3, [r7, #12]
 800bd72:	681b      	ldr	r3, [r3, #0]
 800bd74:	681a      	ldr	r2, [r3, #0]
 800bd76:	68fb      	ldr	r3, [r7, #12]
 800bd78:	681b      	ldr	r3, [r3, #0]
 800bd7a:	f042 0201 	orr.w	r2, r2, #1
 800bd7e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800bd80:	68fb      	ldr	r3, [r7, #12]
 800bd82:	681b      	ldr	r3, [r3, #0]
 800bd84:	681a      	ldr	r2, [r3, #0]
 800bd86:	68fb      	ldr	r3, [r7, #12]
 800bd88:	681b      	ldr	r3, [r3, #0]
 800bd8a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800bd8e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800bd90:	68fb      	ldr	r3, [r7, #12]
 800bd92:	2221      	movs	r2, #33	; 0x21
 800bd94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800bd98:	68fb      	ldr	r3, [r7, #12]
 800bd9a:	2240      	movs	r2, #64	; 0x40
 800bd9c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800bda0:	68fb      	ldr	r3, [r7, #12]
 800bda2:	2200      	movs	r2, #0
 800bda4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800bda6:	68fb      	ldr	r3, [r7, #12]
 800bda8:	6a3a      	ldr	r2, [r7, #32]
 800bdaa:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800bdac:	68fb      	ldr	r3, [r7, #12]
 800bdae:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800bdb0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800bdb2:	68fb      	ldr	r3, [r7, #12]
 800bdb4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bdb6:	b29a      	uxth	r2, r3
 800bdb8:	68fb      	ldr	r3, [r7, #12]
 800bdba:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800bdbc:	68fb      	ldr	r3, [r7, #12]
 800bdbe:	4a4d      	ldr	r2, [pc, #308]	; (800bef4 <HAL_I2C_Mem_Write+0x1f0>)
 800bdc0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800bdc2:	88f8      	ldrh	r0, [r7, #6]
 800bdc4:	893a      	ldrh	r2, [r7, #8]
 800bdc6:	8979      	ldrh	r1, [r7, #10]
 800bdc8:	697b      	ldr	r3, [r7, #20]
 800bdca:	9301      	str	r3, [sp, #4]
 800bdcc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bdce:	9300      	str	r3, [sp, #0]
 800bdd0:	4603      	mov	r3, r0
 800bdd2:	68f8      	ldr	r0, [r7, #12]
 800bdd4:	f000 fad0 	bl	800c378 <I2C_RequestMemoryWrite>
 800bdd8:	4603      	mov	r3, r0
 800bdda:	2b00      	cmp	r3, #0
 800bddc:	d052      	beq.n	800be84 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800bdde:	2301      	movs	r3, #1
 800bde0:	e081      	b.n	800bee6 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800bde2:	697a      	ldr	r2, [r7, #20]
 800bde4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800bde6:	68f8      	ldr	r0, [r7, #12]
 800bde8:	f000 fd1a 	bl	800c820 <I2C_WaitOnTXEFlagUntilTimeout>
 800bdec:	4603      	mov	r3, r0
 800bdee:	2b00      	cmp	r3, #0
 800bdf0:	d00d      	beq.n	800be0e <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800bdf2:	68fb      	ldr	r3, [r7, #12]
 800bdf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bdf6:	2b04      	cmp	r3, #4
 800bdf8:	d107      	bne.n	800be0a <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800bdfa:	68fb      	ldr	r3, [r7, #12]
 800bdfc:	681b      	ldr	r3, [r3, #0]
 800bdfe:	681a      	ldr	r2, [r3, #0]
 800be00:	68fb      	ldr	r3, [r7, #12]
 800be02:	681b      	ldr	r3, [r3, #0]
 800be04:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800be08:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800be0a:	2301      	movs	r3, #1
 800be0c:	e06b      	b.n	800bee6 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800be0e:	68fb      	ldr	r3, [r7, #12]
 800be10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800be12:	781a      	ldrb	r2, [r3, #0]
 800be14:	68fb      	ldr	r3, [r7, #12]
 800be16:	681b      	ldr	r3, [r3, #0]
 800be18:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800be1a:	68fb      	ldr	r3, [r7, #12]
 800be1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800be1e:	1c5a      	adds	r2, r3, #1
 800be20:	68fb      	ldr	r3, [r7, #12]
 800be22:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 800be24:	68fb      	ldr	r3, [r7, #12]
 800be26:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800be28:	3b01      	subs	r3, #1
 800be2a:	b29a      	uxth	r2, r3
 800be2c:	68fb      	ldr	r3, [r7, #12]
 800be2e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800be30:	68fb      	ldr	r3, [r7, #12]
 800be32:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800be34:	b29b      	uxth	r3, r3
 800be36:	3b01      	subs	r3, #1
 800be38:	b29a      	uxth	r2, r3
 800be3a:	68fb      	ldr	r3, [r7, #12]
 800be3c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800be3e:	68fb      	ldr	r3, [r7, #12]
 800be40:	681b      	ldr	r3, [r3, #0]
 800be42:	695b      	ldr	r3, [r3, #20]
 800be44:	f003 0304 	and.w	r3, r3, #4
 800be48:	2b04      	cmp	r3, #4
 800be4a:	d11b      	bne.n	800be84 <HAL_I2C_Mem_Write+0x180>
 800be4c:	68fb      	ldr	r3, [r7, #12]
 800be4e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800be50:	2b00      	cmp	r3, #0
 800be52:	d017      	beq.n	800be84 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800be54:	68fb      	ldr	r3, [r7, #12]
 800be56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800be58:	781a      	ldrb	r2, [r3, #0]
 800be5a:	68fb      	ldr	r3, [r7, #12]
 800be5c:	681b      	ldr	r3, [r3, #0]
 800be5e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800be60:	68fb      	ldr	r3, [r7, #12]
 800be62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800be64:	1c5a      	adds	r2, r3, #1
 800be66:	68fb      	ldr	r3, [r7, #12]
 800be68:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800be6a:	68fb      	ldr	r3, [r7, #12]
 800be6c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800be6e:	3b01      	subs	r3, #1
 800be70:	b29a      	uxth	r2, r3
 800be72:	68fb      	ldr	r3, [r7, #12]
 800be74:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800be76:	68fb      	ldr	r3, [r7, #12]
 800be78:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800be7a:	b29b      	uxth	r3, r3
 800be7c:	3b01      	subs	r3, #1
 800be7e:	b29a      	uxth	r2, r3
 800be80:	68fb      	ldr	r3, [r7, #12]
 800be82:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800be84:	68fb      	ldr	r3, [r7, #12]
 800be86:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800be88:	2b00      	cmp	r3, #0
 800be8a:	d1aa      	bne.n	800bde2 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800be8c:	697a      	ldr	r2, [r7, #20]
 800be8e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800be90:	68f8      	ldr	r0, [r7, #12]
 800be92:	f000 fd06 	bl	800c8a2 <I2C_WaitOnBTFFlagUntilTimeout>
 800be96:	4603      	mov	r3, r0
 800be98:	2b00      	cmp	r3, #0
 800be9a:	d00d      	beq.n	800beb8 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800be9c:	68fb      	ldr	r3, [r7, #12]
 800be9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bea0:	2b04      	cmp	r3, #4
 800bea2:	d107      	bne.n	800beb4 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800bea4:	68fb      	ldr	r3, [r7, #12]
 800bea6:	681b      	ldr	r3, [r3, #0]
 800bea8:	681a      	ldr	r2, [r3, #0]
 800beaa:	68fb      	ldr	r3, [r7, #12]
 800beac:	681b      	ldr	r3, [r3, #0]
 800beae:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800beb2:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800beb4:	2301      	movs	r3, #1
 800beb6:	e016      	b.n	800bee6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800beb8:	68fb      	ldr	r3, [r7, #12]
 800beba:	681b      	ldr	r3, [r3, #0]
 800bebc:	681a      	ldr	r2, [r3, #0]
 800bebe:	68fb      	ldr	r3, [r7, #12]
 800bec0:	681b      	ldr	r3, [r3, #0]
 800bec2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800bec6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800bec8:	68fb      	ldr	r3, [r7, #12]
 800beca:	2220      	movs	r2, #32
 800becc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800bed0:	68fb      	ldr	r3, [r7, #12]
 800bed2:	2200      	movs	r2, #0
 800bed4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800bed8:	68fb      	ldr	r3, [r7, #12]
 800beda:	2200      	movs	r2, #0
 800bedc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800bee0:	2300      	movs	r3, #0
 800bee2:	e000      	b.n	800bee6 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 800bee4:	2302      	movs	r3, #2
  }
}
 800bee6:	4618      	mov	r0, r3
 800bee8:	3718      	adds	r7, #24
 800beea:	46bd      	mov	sp, r7
 800beec:	bd80      	pop	{r7, pc}
 800beee:	bf00      	nop
 800bef0:	00100002 	.word	0x00100002
 800bef4:	ffff0000 	.word	0xffff0000

0800bef8 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800bef8:	b580      	push	{r7, lr}
 800befa:	b08c      	sub	sp, #48	; 0x30
 800befc:	af02      	add	r7, sp, #8
 800befe:	60f8      	str	r0, [r7, #12]
 800bf00:	4608      	mov	r0, r1
 800bf02:	4611      	mov	r1, r2
 800bf04:	461a      	mov	r2, r3
 800bf06:	4603      	mov	r3, r0
 800bf08:	817b      	strh	r3, [r7, #10]
 800bf0a:	460b      	mov	r3, r1
 800bf0c:	813b      	strh	r3, [r7, #8]
 800bf0e:	4613      	mov	r3, r2
 800bf10:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800bf12:	f7ff f927 	bl	800b164 <HAL_GetTick>
 800bf16:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800bf18:	68fb      	ldr	r3, [r7, #12]
 800bf1a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800bf1e:	b2db      	uxtb	r3, r3
 800bf20:	2b20      	cmp	r3, #32
 800bf22:	f040 8208 	bne.w	800c336 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800bf26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf28:	9300      	str	r3, [sp, #0]
 800bf2a:	2319      	movs	r3, #25
 800bf2c:	2201      	movs	r2, #1
 800bf2e:	497b      	ldr	r1, [pc, #492]	; (800c11c <HAL_I2C_Mem_Read+0x224>)
 800bf30:	68f8      	ldr	r0, [r7, #12]
 800bf32:	f000 fb9f 	bl	800c674 <I2C_WaitOnFlagUntilTimeout>
 800bf36:	4603      	mov	r3, r0
 800bf38:	2b00      	cmp	r3, #0
 800bf3a:	d001      	beq.n	800bf40 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 800bf3c:	2302      	movs	r3, #2
 800bf3e:	e1fb      	b.n	800c338 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800bf40:	68fb      	ldr	r3, [r7, #12]
 800bf42:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800bf46:	2b01      	cmp	r3, #1
 800bf48:	d101      	bne.n	800bf4e <HAL_I2C_Mem_Read+0x56>
 800bf4a:	2302      	movs	r3, #2
 800bf4c:	e1f4      	b.n	800c338 <HAL_I2C_Mem_Read+0x440>
 800bf4e:	68fb      	ldr	r3, [r7, #12]
 800bf50:	2201      	movs	r2, #1
 800bf52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800bf56:	68fb      	ldr	r3, [r7, #12]
 800bf58:	681b      	ldr	r3, [r3, #0]
 800bf5a:	681b      	ldr	r3, [r3, #0]
 800bf5c:	f003 0301 	and.w	r3, r3, #1
 800bf60:	2b01      	cmp	r3, #1
 800bf62:	d007      	beq.n	800bf74 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800bf64:	68fb      	ldr	r3, [r7, #12]
 800bf66:	681b      	ldr	r3, [r3, #0]
 800bf68:	681a      	ldr	r2, [r3, #0]
 800bf6a:	68fb      	ldr	r3, [r7, #12]
 800bf6c:	681b      	ldr	r3, [r3, #0]
 800bf6e:	f042 0201 	orr.w	r2, r2, #1
 800bf72:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800bf74:	68fb      	ldr	r3, [r7, #12]
 800bf76:	681b      	ldr	r3, [r3, #0]
 800bf78:	681a      	ldr	r2, [r3, #0]
 800bf7a:	68fb      	ldr	r3, [r7, #12]
 800bf7c:	681b      	ldr	r3, [r3, #0]
 800bf7e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800bf82:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800bf84:	68fb      	ldr	r3, [r7, #12]
 800bf86:	2222      	movs	r2, #34	; 0x22
 800bf88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800bf8c:	68fb      	ldr	r3, [r7, #12]
 800bf8e:	2240      	movs	r2, #64	; 0x40
 800bf90:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800bf94:	68fb      	ldr	r3, [r7, #12]
 800bf96:	2200      	movs	r2, #0
 800bf98:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800bf9a:	68fb      	ldr	r3, [r7, #12]
 800bf9c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800bf9e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800bfa0:	68fb      	ldr	r3, [r7, #12]
 800bfa2:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 800bfa4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800bfa6:	68fb      	ldr	r3, [r7, #12]
 800bfa8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bfaa:	b29a      	uxth	r2, r3
 800bfac:	68fb      	ldr	r3, [r7, #12]
 800bfae:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800bfb0:	68fb      	ldr	r3, [r7, #12]
 800bfb2:	4a5b      	ldr	r2, [pc, #364]	; (800c120 <HAL_I2C_Mem_Read+0x228>)
 800bfb4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800bfb6:	88f8      	ldrh	r0, [r7, #6]
 800bfb8:	893a      	ldrh	r2, [r7, #8]
 800bfba:	8979      	ldrh	r1, [r7, #10]
 800bfbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bfbe:	9301      	str	r3, [sp, #4]
 800bfc0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bfc2:	9300      	str	r3, [sp, #0]
 800bfc4:	4603      	mov	r3, r0
 800bfc6:	68f8      	ldr	r0, [r7, #12]
 800bfc8:	f000 fa6c 	bl	800c4a4 <I2C_RequestMemoryRead>
 800bfcc:	4603      	mov	r3, r0
 800bfce:	2b00      	cmp	r3, #0
 800bfd0:	d001      	beq.n	800bfd6 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 800bfd2:	2301      	movs	r3, #1
 800bfd4:	e1b0      	b.n	800c338 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 800bfd6:	68fb      	ldr	r3, [r7, #12]
 800bfd8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bfda:	2b00      	cmp	r3, #0
 800bfdc:	d113      	bne.n	800c006 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800bfde:	2300      	movs	r3, #0
 800bfe0:	623b      	str	r3, [r7, #32]
 800bfe2:	68fb      	ldr	r3, [r7, #12]
 800bfe4:	681b      	ldr	r3, [r3, #0]
 800bfe6:	695b      	ldr	r3, [r3, #20]
 800bfe8:	623b      	str	r3, [r7, #32]
 800bfea:	68fb      	ldr	r3, [r7, #12]
 800bfec:	681b      	ldr	r3, [r3, #0]
 800bfee:	699b      	ldr	r3, [r3, #24]
 800bff0:	623b      	str	r3, [r7, #32]
 800bff2:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800bff4:	68fb      	ldr	r3, [r7, #12]
 800bff6:	681b      	ldr	r3, [r3, #0]
 800bff8:	681a      	ldr	r2, [r3, #0]
 800bffa:	68fb      	ldr	r3, [r7, #12]
 800bffc:	681b      	ldr	r3, [r3, #0]
 800bffe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800c002:	601a      	str	r2, [r3, #0]
 800c004:	e184      	b.n	800c310 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 800c006:	68fb      	ldr	r3, [r7, #12]
 800c008:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c00a:	2b01      	cmp	r3, #1
 800c00c:	d11b      	bne.n	800c046 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800c00e:	68fb      	ldr	r3, [r7, #12]
 800c010:	681b      	ldr	r3, [r3, #0]
 800c012:	681a      	ldr	r2, [r3, #0]
 800c014:	68fb      	ldr	r3, [r7, #12]
 800c016:	681b      	ldr	r3, [r3, #0]
 800c018:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800c01c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800c01e:	2300      	movs	r3, #0
 800c020:	61fb      	str	r3, [r7, #28]
 800c022:	68fb      	ldr	r3, [r7, #12]
 800c024:	681b      	ldr	r3, [r3, #0]
 800c026:	695b      	ldr	r3, [r3, #20]
 800c028:	61fb      	str	r3, [r7, #28]
 800c02a:	68fb      	ldr	r3, [r7, #12]
 800c02c:	681b      	ldr	r3, [r3, #0]
 800c02e:	699b      	ldr	r3, [r3, #24]
 800c030:	61fb      	str	r3, [r7, #28]
 800c032:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800c034:	68fb      	ldr	r3, [r7, #12]
 800c036:	681b      	ldr	r3, [r3, #0]
 800c038:	681a      	ldr	r2, [r3, #0]
 800c03a:	68fb      	ldr	r3, [r7, #12]
 800c03c:	681b      	ldr	r3, [r3, #0]
 800c03e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800c042:	601a      	str	r2, [r3, #0]
 800c044:	e164      	b.n	800c310 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 800c046:	68fb      	ldr	r3, [r7, #12]
 800c048:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c04a:	2b02      	cmp	r3, #2
 800c04c:	d11b      	bne.n	800c086 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800c04e:	68fb      	ldr	r3, [r7, #12]
 800c050:	681b      	ldr	r3, [r3, #0]
 800c052:	681a      	ldr	r2, [r3, #0]
 800c054:	68fb      	ldr	r3, [r7, #12]
 800c056:	681b      	ldr	r3, [r3, #0]
 800c058:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800c05c:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800c05e:	68fb      	ldr	r3, [r7, #12]
 800c060:	681b      	ldr	r3, [r3, #0]
 800c062:	681a      	ldr	r2, [r3, #0]
 800c064:	68fb      	ldr	r3, [r7, #12]
 800c066:	681b      	ldr	r3, [r3, #0]
 800c068:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800c06c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800c06e:	2300      	movs	r3, #0
 800c070:	61bb      	str	r3, [r7, #24]
 800c072:	68fb      	ldr	r3, [r7, #12]
 800c074:	681b      	ldr	r3, [r3, #0]
 800c076:	695b      	ldr	r3, [r3, #20]
 800c078:	61bb      	str	r3, [r7, #24]
 800c07a:	68fb      	ldr	r3, [r7, #12]
 800c07c:	681b      	ldr	r3, [r3, #0]
 800c07e:	699b      	ldr	r3, [r3, #24]
 800c080:	61bb      	str	r3, [r7, #24]
 800c082:	69bb      	ldr	r3, [r7, #24]
 800c084:	e144      	b.n	800c310 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800c086:	2300      	movs	r3, #0
 800c088:	617b      	str	r3, [r7, #20]
 800c08a:	68fb      	ldr	r3, [r7, #12]
 800c08c:	681b      	ldr	r3, [r3, #0]
 800c08e:	695b      	ldr	r3, [r3, #20]
 800c090:	617b      	str	r3, [r7, #20]
 800c092:	68fb      	ldr	r3, [r7, #12]
 800c094:	681b      	ldr	r3, [r3, #0]
 800c096:	699b      	ldr	r3, [r3, #24]
 800c098:	617b      	str	r3, [r7, #20]
 800c09a:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 800c09c:	e138      	b.n	800c310 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 800c09e:	68fb      	ldr	r3, [r7, #12]
 800c0a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c0a2:	2b03      	cmp	r3, #3
 800c0a4:	f200 80f1 	bhi.w	800c28a <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800c0a8:	68fb      	ldr	r3, [r7, #12]
 800c0aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c0ac:	2b01      	cmp	r3, #1
 800c0ae:	d123      	bne.n	800c0f8 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800c0b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c0b2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800c0b4:	68f8      	ldr	r0, [r7, #12]
 800c0b6:	f000 fc35 	bl	800c924 <I2C_WaitOnRXNEFlagUntilTimeout>
 800c0ba:	4603      	mov	r3, r0
 800c0bc:	2b00      	cmp	r3, #0
 800c0be:	d001      	beq.n	800c0c4 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 800c0c0:	2301      	movs	r3, #1
 800c0c2:	e139      	b.n	800c338 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800c0c4:	68fb      	ldr	r3, [r7, #12]
 800c0c6:	681b      	ldr	r3, [r3, #0]
 800c0c8:	691a      	ldr	r2, [r3, #16]
 800c0ca:	68fb      	ldr	r3, [r7, #12]
 800c0cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c0ce:	b2d2      	uxtb	r2, r2
 800c0d0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800c0d2:	68fb      	ldr	r3, [r7, #12]
 800c0d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c0d6:	1c5a      	adds	r2, r3, #1
 800c0d8:	68fb      	ldr	r3, [r7, #12]
 800c0da:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800c0dc:	68fb      	ldr	r3, [r7, #12]
 800c0de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c0e0:	3b01      	subs	r3, #1
 800c0e2:	b29a      	uxth	r2, r3
 800c0e4:	68fb      	ldr	r3, [r7, #12]
 800c0e6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800c0e8:	68fb      	ldr	r3, [r7, #12]
 800c0ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c0ec:	b29b      	uxth	r3, r3
 800c0ee:	3b01      	subs	r3, #1
 800c0f0:	b29a      	uxth	r2, r3
 800c0f2:	68fb      	ldr	r3, [r7, #12]
 800c0f4:	855a      	strh	r2, [r3, #42]	; 0x2a
 800c0f6:	e10b      	b.n	800c310 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800c0f8:	68fb      	ldr	r3, [r7, #12]
 800c0fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c0fc:	2b02      	cmp	r3, #2
 800c0fe:	d14e      	bne.n	800c19e <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800c100:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c102:	9300      	str	r3, [sp, #0]
 800c104:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c106:	2200      	movs	r2, #0
 800c108:	4906      	ldr	r1, [pc, #24]	; (800c124 <HAL_I2C_Mem_Read+0x22c>)
 800c10a:	68f8      	ldr	r0, [r7, #12]
 800c10c:	f000 fab2 	bl	800c674 <I2C_WaitOnFlagUntilTimeout>
 800c110:	4603      	mov	r3, r0
 800c112:	2b00      	cmp	r3, #0
 800c114:	d008      	beq.n	800c128 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 800c116:	2301      	movs	r3, #1
 800c118:	e10e      	b.n	800c338 <HAL_I2C_Mem_Read+0x440>
 800c11a:	bf00      	nop
 800c11c:	00100002 	.word	0x00100002
 800c120:	ffff0000 	.word	0xffff0000
 800c124:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800c128:	68fb      	ldr	r3, [r7, #12]
 800c12a:	681b      	ldr	r3, [r3, #0]
 800c12c:	681a      	ldr	r2, [r3, #0]
 800c12e:	68fb      	ldr	r3, [r7, #12]
 800c130:	681b      	ldr	r3, [r3, #0]
 800c132:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800c136:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800c138:	68fb      	ldr	r3, [r7, #12]
 800c13a:	681b      	ldr	r3, [r3, #0]
 800c13c:	691a      	ldr	r2, [r3, #16]
 800c13e:	68fb      	ldr	r3, [r7, #12]
 800c140:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c142:	b2d2      	uxtb	r2, r2
 800c144:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800c146:	68fb      	ldr	r3, [r7, #12]
 800c148:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c14a:	1c5a      	adds	r2, r3, #1
 800c14c:	68fb      	ldr	r3, [r7, #12]
 800c14e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800c150:	68fb      	ldr	r3, [r7, #12]
 800c152:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c154:	3b01      	subs	r3, #1
 800c156:	b29a      	uxth	r2, r3
 800c158:	68fb      	ldr	r3, [r7, #12]
 800c15a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800c15c:	68fb      	ldr	r3, [r7, #12]
 800c15e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c160:	b29b      	uxth	r3, r3
 800c162:	3b01      	subs	r3, #1
 800c164:	b29a      	uxth	r2, r3
 800c166:	68fb      	ldr	r3, [r7, #12]
 800c168:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800c16a:	68fb      	ldr	r3, [r7, #12]
 800c16c:	681b      	ldr	r3, [r3, #0]
 800c16e:	691a      	ldr	r2, [r3, #16]
 800c170:	68fb      	ldr	r3, [r7, #12]
 800c172:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c174:	b2d2      	uxtb	r2, r2
 800c176:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800c178:	68fb      	ldr	r3, [r7, #12]
 800c17a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c17c:	1c5a      	adds	r2, r3, #1
 800c17e:	68fb      	ldr	r3, [r7, #12]
 800c180:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800c182:	68fb      	ldr	r3, [r7, #12]
 800c184:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c186:	3b01      	subs	r3, #1
 800c188:	b29a      	uxth	r2, r3
 800c18a:	68fb      	ldr	r3, [r7, #12]
 800c18c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800c18e:	68fb      	ldr	r3, [r7, #12]
 800c190:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c192:	b29b      	uxth	r3, r3
 800c194:	3b01      	subs	r3, #1
 800c196:	b29a      	uxth	r2, r3
 800c198:	68fb      	ldr	r3, [r7, #12]
 800c19a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800c19c:	e0b8      	b.n	800c310 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800c19e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c1a0:	9300      	str	r3, [sp, #0]
 800c1a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c1a4:	2200      	movs	r2, #0
 800c1a6:	4966      	ldr	r1, [pc, #408]	; (800c340 <HAL_I2C_Mem_Read+0x448>)
 800c1a8:	68f8      	ldr	r0, [r7, #12]
 800c1aa:	f000 fa63 	bl	800c674 <I2C_WaitOnFlagUntilTimeout>
 800c1ae:	4603      	mov	r3, r0
 800c1b0:	2b00      	cmp	r3, #0
 800c1b2:	d001      	beq.n	800c1b8 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 800c1b4:	2301      	movs	r3, #1
 800c1b6:	e0bf      	b.n	800c338 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800c1b8:	68fb      	ldr	r3, [r7, #12]
 800c1ba:	681b      	ldr	r3, [r3, #0]
 800c1bc:	681a      	ldr	r2, [r3, #0]
 800c1be:	68fb      	ldr	r3, [r7, #12]
 800c1c0:	681b      	ldr	r3, [r3, #0]
 800c1c2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800c1c6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800c1c8:	68fb      	ldr	r3, [r7, #12]
 800c1ca:	681b      	ldr	r3, [r3, #0]
 800c1cc:	691a      	ldr	r2, [r3, #16]
 800c1ce:	68fb      	ldr	r3, [r7, #12]
 800c1d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c1d2:	b2d2      	uxtb	r2, r2
 800c1d4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800c1d6:	68fb      	ldr	r3, [r7, #12]
 800c1d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c1da:	1c5a      	adds	r2, r3, #1
 800c1dc:	68fb      	ldr	r3, [r7, #12]
 800c1de:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800c1e0:	68fb      	ldr	r3, [r7, #12]
 800c1e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c1e4:	3b01      	subs	r3, #1
 800c1e6:	b29a      	uxth	r2, r3
 800c1e8:	68fb      	ldr	r3, [r7, #12]
 800c1ea:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800c1ec:	68fb      	ldr	r3, [r7, #12]
 800c1ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c1f0:	b29b      	uxth	r3, r3
 800c1f2:	3b01      	subs	r3, #1
 800c1f4:	b29a      	uxth	r2, r3
 800c1f6:	68fb      	ldr	r3, [r7, #12]
 800c1f8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800c1fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c1fc:	9300      	str	r3, [sp, #0]
 800c1fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c200:	2200      	movs	r2, #0
 800c202:	494f      	ldr	r1, [pc, #316]	; (800c340 <HAL_I2C_Mem_Read+0x448>)
 800c204:	68f8      	ldr	r0, [r7, #12]
 800c206:	f000 fa35 	bl	800c674 <I2C_WaitOnFlagUntilTimeout>
 800c20a:	4603      	mov	r3, r0
 800c20c:	2b00      	cmp	r3, #0
 800c20e:	d001      	beq.n	800c214 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 800c210:	2301      	movs	r3, #1
 800c212:	e091      	b.n	800c338 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800c214:	68fb      	ldr	r3, [r7, #12]
 800c216:	681b      	ldr	r3, [r3, #0]
 800c218:	681a      	ldr	r2, [r3, #0]
 800c21a:	68fb      	ldr	r3, [r7, #12]
 800c21c:	681b      	ldr	r3, [r3, #0]
 800c21e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800c222:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800c224:	68fb      	ldr	r3, [r7, #12]
 800c226:	681b      	ldr	r3, [r3, #0]
 800c228:	691a      	ldr	r2, [r3, #16]
 800c22a:	68fb      	ldr	r3, [r7, #12]
 800c22c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c22e:	b2d2      	uxtb	r2, r2
 800c230:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800c232:	68fb      	ldr	r3, [r7, #12]
 800c234:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c236:	1c5a      	adds	r2, r3, #1
 800c238:	68fb      	ldr	r3, [r7, #12]
 800c23a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800c23c:	68fb      	ldr	r3, [r7, #12]
 800c23e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c240:	3b01      	subs	r3, #1
 800c242:	b29a      	uxth	r2, r3
 800c244:	68fb      	ldr	r3, [r7, #12]
 800c246:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800c248:	68fb      	ldr	r3, [r7, #12]
 800c24a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c24c:	b29b      	uxth	r3, r3
 800c24e:	3b01      	subs	r3, #1
 800c250:	b29a      	uxth	r2, r3
 800c252:	68fb      	ldr	r3, [r7, #12]
 800c254:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800c256:	68fb      	ldr	r3, [r7, #12]
 800c258:	681b      	ldr	r3, [r3, #0]
 800c25a:	691a      	ldr	r2, [r3, #16]
 800c25c:	68fb      	ldr	r3, [r7, #12]
 800c25e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c260:	b2d2      	uxtb	r2, r2
 800c262:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800c264:	68fb      	ldr	r3, [r7, #12]
 800c266:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c268:	1c5a      	adds	r2, r3, #1
 800c26a:	68fb      	ldr	r3, [r7, #12]
 800c26c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800c26e:	68fb      	ldr	r3, [r7, #12]
 800c270:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c272:	3b01      	subs	r3, #1
 800c274:	b29a      	uxth	r2, r3
 800c276:	68fb      	ldr	r3, [r7, #12]
 800c278:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800c27a:	68fb      	ldr	r3, [r7, #12]
 800c27c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c27e:	b29b      	uxth	r3, r3
 800c280:	3b01      	subs	r3, #1
 800c282:	b29a      	uxth	r2, r3
 800c284:	68fb      	ldr	r3, [r7, #12]
 800c286:	855a      	strh	r2, [r3, #42]	; 0x2a
 800c288:	e042      	b.n	800c310 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800c28a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c28c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800c28e:	68f8      	ldr	r0, [r7, #12]
 800c290:	f000 fb48 	bl	800c924 <I2C_WaitOnRXNEFlagUntilTimeout>
 800c294:	4603      	mov	r3, r0
 800c296:	2b00      	cmp	r3, #0
 800c298:	d001      	beq.n	800c29e <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 800c29a:	2301      	movs	r3, #1
 800c29c:	e04c      	b.n	800c338 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800c29e:	68fb      	ldr	r3, [r7, #12]
 800c2a0:	681b      	ldr	r3, [r3, #0]
 800c2a2:	691a      	ldr	r2, [r3, #16]
 800c2a4:	68fb      	ldr	r3, [r7, #12]
 800c2a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c2a8:	b2d2      	uxtb	r2, r2
 800c2aa:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800c2ac:	68fb      	ldr	r3, [r7, #12]
 800c2ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c2b0:	1c5a      	adds	r2, r3, #1
 800c2b2:	68fb      	ldr	r3, [r7, #12]
 800c2b4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800c2b6:	68fb      	ldr	r3, [r7, #12]
 800c2b8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c2ba:	3b01      	subs	r3, #1
 800c2bc:	b29a      	uxth	r2, r3
 800c2be:	68fb      	ldr	r3, [r7, #12]
 800c2c0:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800c2c2:	68fb      	ldr	r3, [r7, #12]
 800c2c4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c2c6:	b29b      	uxth	r3, r3
 800c2c8:	3b01      	subs	r3, #1
 800c2ca:	b29a      	uxth	r2, r3
 800c2cc:	68fb      	ldr	r3, [r7, #12]
 800c2ce:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800c2d0:	68fb      	ldr	r3, [r7, #12]
 800c2d2:	681b      	ldr	r3, [r3, #0]
 800c2d4:	695b      	ldr	r3, [r3, #20]
 800c2d6:	f003 0304 	and.w	r3, r3, #4
 800c2da:	2b04      	cmp	r3, #4
 800c2dc:	d118      	bne.n	800c310 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800c2de:	68fb      	ldr	r3, [r7, #12]
 800c2e0:	681b      	ldr	r3, [r3, #0]
 800c2e2:	691a      	ldr	r2, [r3, #16]
 800c2e4:	68fb      	ldr	r3, [r7, #12]
 800c2e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c2e8:	b2d2      	uxtb	r2, r2
 800c2ea:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800c2ec:	68fb      	ldr	r3, [r7, #12]
 800c2ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c2f0:	1c5a      	adds	r2, r3, #1
 800c2f2:	68fb      	ldr	r3, [r7, #12]
 800c2f4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800c2f6:	68fb      	ldr	r3, [r7, #12]
 800c2f8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c2fa:	3b01      	subs	r3, #1
 800c2fc:	b29a      	uxth	r2, r3
 800c2fe:	68fb      	ldr	r3, [r7, #12]
 800c300:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800c302:	68fb      	ldr	r3, [r7, #12]
 800c304:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c306:	b29b      	uxth	r3, r3
 800c308:	3b01      	subs	r3, #1
 800c30a:	b29a      	uxth	r2, r3
 800c30c:	68fb      	ldr	r3, [r7, #12]
 800c30e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800c310:	68fb      	ldr	r3, [r7, #12]
 800c312:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c314:	2b00      	cmp	r3, #0
 800c316:	f47f aec2 	bne.w	800c09e <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800c31a:	68fb      	ldr	r3, [r7, #12]
 800c31c:	2220      	movs	r2, #32
 800c31e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800c322:	68fb      	ldr	r3, [r7, #12]
 800c324:	2200      	movs	r2, #0
 800c326:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800c32a:	68fb      	ldr	r3, [r7, #12]
 800c32c:	2200      	movs	r2, #0
 800c32e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800c332:	2300      	movs	r3, #0
 800c334:	e000      	b.n	800c338 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 800c336:	2302      	movs	r3, #2
  }
}
 800c338:	4618      	mov	r0, r3
 800c33a:	3728      	adds	r7, #40	; 0x28
 800c33c:	46bd      	mov	sp, r7
 800c33e:	bd80      	pop	{r7, pc}
 800c340:	00010004 	.word	0x00010004

0800c344 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 800c344:	b480      	push	{r7}
 800c346:	b083      	sub	sp, #12
 800c348:	af00      	add	r7, sp, #0
 800c34a:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 800c34c:	687b      	ldr	r3, [r7, #4]
 800c34e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c352:	b2db      	uxtb	r3, r3
}
 800c354:	4618      	mov	r0, r3
 800c356:	370c      	adds	r7, #12
 800c358:	46bd      	mov	sp, r7
 800c35a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c35e:	4770      	bx	lr

0800c360 <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(I2C_HandleTypeDef *hi2c)
{
 800c360:	b480      	push	{r7}
 800c362:	b083      	sub	sp, #12
 800c364:	af00      	add	r7, sp, #0
 800c366:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 800c368:	687b      	ldr	r3, [r7, #4]
 800c36a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 800c36c:	4618      	mov	r0, r3
 800c36e:	370c      	adds	r7, #12
 800c370:	46bd      	mov	sp, r7
 800c372:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c376:	4770      	bx	lr

0800c378 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800c378:	b580      	push	{r7, lr}
 800c37a:	b088      	sub	sp, #32
 800c37c:	af02      	add	r7, sp, #8
 800c37e:	60f8      	str	r0, [r7, #12]
 800c380:	4608      	mov	r0, r1
 800c382:	4611      	mov	r1, r2
 800c384:	461a      	mov	r2, r3
 800c386:	4603      	mov	r3, r0
 800c388:	817b      	strh	r3, [r7, #10]
 800c38a:	460b      	mov	r3, r1
 800c38c:	813b      	strh	r3, [r7, #8]
 800c38e:	4613      	mov	r3, r2
 800c390:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800c392:	68fb      	ldr	r3, [r7, #12]
 800c394:	681b      	ldr	r3, [r3, #0]
 800c396:	681a      	ldr	r2, [r3, #0]
 800c398:	68fb      	ldr	r3, [r7, #12]
 800c39a:	681b      	ldr	r3, [r3, #0]
 800c39c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800c3a0:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800c3a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c3a4:	9300      	str	r3, [sp, #0]
 800c3a6:	6a3b      	ldr	r3, [r7, #32]
 800c3a8:	2200      	movs	r2, #0
 800c3aa:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800c3ae:	68f8      	ldr	r0, [r7, #12]
 800c3b0:	f000 f960 	bl	800c674 <I2C_WaitOnFlagUntilTimeout>
 800c3b4:	4603      	mov	r3, r0
 800c3b6:	2b00      	cmp	r3, #0
 800c3b8:	d00d      	beq.n	800c3d6 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800c3ba:	68fb      	ldr	r3, [r7, #12]
 800c3bc:	681b      	ldr	r3, [r3, #0]
 800c3be:	681b      	ldr	r3, [r3, #0]
 800c3c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c3c4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c3c8:	d103      	bne.n	800c3d2 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800c3ca:	68fb      	ldr	r3, [r7, #12]
 800c3cc:	f44f 7200 	mov.w	r2, #512	; 0x200
 800c3d0:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800c3d2:	2303      	movs	r3, #3
 800c3d4:	e05f      	b.n	800c496 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800c3d6:	897b      	ldrh	r3, [r7, #10]
 800c3d8:	b2db      	uxtb	r3, r3
 800c3da:	461a      	mov	r2, r3
 800c3dc:	68fb      	ldr	r3, [r7, #12]
 800c3de:	681b      	ldr	r3, [r3, #0]
 800c3e0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800c3e4:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800c3e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c3e8:	6a3a      	ldr	r2, [r7, #32]
 800c3ea:	492d      	ldr	r1, [pc, #180]	; (800c4a0 <I2C_RequestMemoryWrite+0x128>)
 800c3ec:	68f8      	ldr	r0, [r7, #12]
 800c3ee:	f000 f998 	bl	800c722 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800c3f2:	4603      	mov	r3, r0
 800c3f4:	2b00      	cmp	r3, #0
 800c3f6:	d001      	beq.n	800c3fc <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 800c3f8:	2301      	movs	r3, #1
 800c3fa:	e04c      	b.n	800c496 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800c3fc:	2300      	movs	r3, #0
 800c3fe:	617b      	str	r3, [r7, #20]
 800c400:	68fb      	ldr	r3, [r7, #12]
 800c402:	681b      	ldr	r3, [r3, #0]
 800c404:	695b      	ldr	r3, [r3, #20]
 800c406:	617b      	str	r3, [r7, #20]
 800c408:	68fb      	ldr	r3, [r7, #12]
 800c40a:	681b      	ldr	r3, [r3, #0]
 800c40c:	699b      	ldr	r3, [r3, #24]
 800c40e:	617b      	str	r3, [r7, #20]
 800c410:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800c412:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c414:	6a39      	ldr	r1, [r7, #32]
 800c416:	68f8      	ldr	r0, [r7, #12]
 800c418:	f000 fa02 	bl	800c820 <I2C_WaitOnTXEFlagUntilTimeout>
 800c41c:	4603      	mov	r3, r0
 800c41e:	2b00      	cmp	r3, #0
 800c420:	d00d      	beq.n	800c43e <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800c422:	68fb      	ldr	r3, [r7, #12]
 800c424:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c426:	2b04      	cmp	r3, #4
 800c428:	d107      	bne.n	800c43a <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800c42a:	68fb      	ldr	r3, [r7, #12]
 800c42c:	681b      	ldr	r3, [r3, #0]
 800c42e:	681a      	ldr	r2, [r3, #0]
 800c430:	68fb      	ldr	r3, [r7, #12]
 800c432:	681b      	ldr	r3, [r3, #0]
 800c434:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800c438:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800c43a:	2301      	movs	r3, #1
 800c43c:	e02b      	b.n	800c496 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800c43e:	88fb      	ldrh	r3, [r7, #6]
 800c440:	2b01      	cmp	r3, #1
 800c442:	d105      	bne.n	800c450 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800c444:	893b      	ldrh	r3, [r7, #8]
 800c446:	b2da      	uxtb	r2, r3
 800c448:	68fb      	ldr	r3, [r7, #12]
 800c44a:	681b      	ldr	r3, [r3, #0]
 800c44c:	611a      	str	r2, [r3, #16]
 800c44e:	e021      	b.n	800c494 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800c450:	893b      	ldrh	r3, [r7, #8]
 800c452:	0a1b      	lsrs	r3, r3, #8
 800c454:	b29b      	uxth	r3, r3
 800c456:	b2da      	uxtb	r2, r3
 800c458:	68fb      	ldr	r3, [r7, #12]
 800c45a:	681b      	ldr	r3, [r3, #0]
 800c45c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800c45e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c460:	6a39      	ldr	r1, [r7, #32]
 800c462:	68f8      	ldr	r0, [r7, #12]
 800c464:	f000 f9dc 	bl	800c820 <I2C_WaitOnTXEFlagUntilTimeout>
 800c468:	4603      	mov	r3, r0
 800c46a:	2b00      	cmp	r3, #0
 800c46c:	d00d      	beq.n	800c48a <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800c46e:	68fb      	ldr	r3, [r7, #12]
 800c470:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c472:	2b04      	cmp	r3, #4
 800c474:	d107      	bne.n	800c486 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800c476:	68fb      	ldr	r3, [r7, #12]
 800c478:	681b      	ldr	r3, [r3, #0]
 800c47a:	681a      	ldr	r2, [r3, #0]
 800c47c:	68fb      	ldr	r3, [r7, #12]
 800c47e:	681b      	ldr	r3, [r3, #0]
 800c480:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800c484:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800c486:	2301      	movs	r3, #1
 800c488:	e005      	b.n	800c496 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800c48a:	893b      	ldrh	r3, [r7, #8]
 800c48c:	b2da      	uxtb	r2, r3
 800c48e:	68fb      	ldr	r3, [r7, #12]
 800c490:	681b      	ldr	r3, [r3, #0]
 800c492:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 800c494:	2300      	movs	r3, #0
}
 800c496:	4618      	mov	r0, r3
 800c498:	3718      	adds	r7, #24
 800c49a:	46bd      	mov	sp, r7
 800c49c:	bd80      	pop	{r7, pc}
 800c49e:	bf00      	nop
 800c4a0:	00010002 	.word	0x00010002

0800c4a4 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800c4a4:	b580      	push	{r7, lr}
 800c4a6:	b088      	sub	sp, #32
 800c4a8:	af02      	add	r7, sp, #8
 800c4aa:	60f8      	str	r0, [r7, #12]
 800c4ac:	4608      	mov	r0, r1
 800c4ae:	4611      	mov	r1, r2
 800c4b0:	461a      	mov	r2, r3
 800c4b2:	4603      	mov	r3, r0
 800c4b4:	817b      	strh	r3, [r7, #10]
 800c4b6:	460b      	mov	r3, r1
 800c4b8:	813b      	strh	r3, [r7, #8]
 800c4ba:	4613      	mov	r3, r2
 800c4bc:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800c4be:	68fb      	ldr	r3, [r7, #12]
 800c4c0:	681b      	ldr	r3, [r3, #0]
 800c4c2:	681a      	ldr	r2, [r3, #0]
 800c4c4:	68fb      	ldr	r3, [r7, #12]
 800c4c6:	681b      	ldr	r3, [r3, #0]
 800c4c8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800c4cc:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800c4ce:	68fb      	ldr	r3, [r7, #12]
 800c4d0:	681b      	ldr	r3, [r3, #0]
 800c4d2:	681a      	ldr	r2, [r3, #0]
 800c4d4:	68fb      	ldr	r3, [r7, #12]
 800c4d6:	681b      	ldr	r3, [r3, #0]
 800c4d8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800c4dc:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800c4de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c4e0:	9300      	str	r3, [sp, #0]
 800c4e2:	6a3b      	ldr	r3, [r7, #32]
 800c4e4:	2200      	movs	r2, #0
 800c4e6:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800c4ea:	68f8      	ldr	r0, [r7, #12]
 800c4ec:	f000 f8c2 	bl	800c674 <I2C_WaitOnFlagUntilTimeout>
 800c4f0:	4603      	mov	r3, r0
 800c4f2:	2b00      	cmp	r3, #0
 800c4f4:	d00d      	beq.n	800c512 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800c4f6:	68fb      	ldr	r3, [r7, #12]
 800c4f8:	681b      	ldr	r3, [r3, #0]
 800c4fa:	681b      	ldr	r3, [r3, #0]
 800c4fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c500:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c504:	d103      	bne.n	800c50e <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800c506:	68fb      	ldr	r3, [r7, #12]
 800c508:	f44f 7200 	mov.w	r2, #512	; 0x200
 800c50c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800c50e:	2303      	movs	r3, #3
 800c510:	e0aa      	b.n	800c668 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800c512:	897b      	ldrh	r3, [r7, #10]
 800c514:	b2db      	uxtb	r3, r3
 800c516:	461a      	mov	r2, r3
 800c518:	68fb      	ldr	r3, [r7, #12]
 800c51a:	681b      	ldr	r3, [r3, #0]
 800c51c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800c520:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800c522:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c524:	6a3a      	ldr	r2, [r7, #32]
 800c526:	4952      	ldr	r1, [pc, #328]	; (800c670 <I2C_RequestMemoryRead+0x1cc>)
 800c528:	68f8      	ldr	r0, [r7, #12]
 800c52a:	f000 f8fa 	bl	800c722 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800c52e:	4603      	mov	r3, r0
 800c530:	2b00      	cmp	r3, #0
 800c532:	d001      	beq.n	800c538 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 800c534:	2301      	movs	r3, #1
 800c536:	e097      	b.n	800c668 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800c538:	2300      	movs	r3, #0
 800c53a:	617b      	str	r3, [r7, #20]
 800c53c:	68fb      	ldr	r3, [r7, #12]
 800c53e:	681b      	ldr	r3, [r3, #0]
 800c540:	695b      	ldr	r3, [r3, #20]
 800c542:	617b      	str	r3, [r7, #20]
 800c544:	68fb      	ldr	r3, [r7, #12]
 800c546:	681b      	ldr	r3, [r3, #0]
 800c548:	699b      	ldr	r3, [r3, #24]
 800c54a:	617b      	str	r3, [r7, #20]
 800c54c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800c54e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c550:	6a39      	ldr	r1, [r7, #32]
 800c552:	68f8      	ldr	r0, [r7, #12]
 800c554:	f000 f964 	bl	800c820 <I2C_WaitOnTXEFlagUntilTimeout>
 800c558:	4603      	mov	r3, r0
 800c55a:	2b00      	cmp	r3, #0
 800c55c:	d00d      	beq.n	800c57a <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800c55e:	68fb      	ldr	r3, [r7, #12]
 800c560:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c562:	2b04      	cmp	r3, #4
 800c564:	d107      	bne.n	800c576 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800c566:	68fb      	ldr	r3, [r7, #12]
 800c568:	681b      	ldr	r3, [r3, #0]
 800c56a:	681a      	ldr	r2, [r3, #0]
 800c56c:	68fb      	ldr	r3, [r7, #12]
 800c56e:	681b      	ldr	r3, [r3, #0]
 800c570:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800c574:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800c576:	2301      	movs	r3, #1
 800c578:	e076      	b.n	800c668 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800c57a:	88fb      	ldrh	r3, [r7, #6]
 800c57c:	2b01      	cmp	r3, #1
 800c57e:	d105      	bne.n	800c58c <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800c580:	893b      	ldrh	r3, [r7, #8]
 800c582:	b2da      	uxtb	r2, r3
 800c584:	68fb      	ldr	r3, [r7, #12]
 800c586:	681b      	ldr	r3, [r3, #0]
 800c588:	611a      	str	r2, [r3, #16]
 800c58a:	e021      	b.n	800c5d0 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800c58c:	893b      	ldrh	r3, [r7, #8]
 800c58e:	0a1b      	lsrs	r3, r3, #8
 800c590:	b29b      	uxth	r3, r3
 800c592:	b2da      	uxtb	r2, r3
 800c594:	68fb      	ldr	r3, [r7, #12]
 800c596:	681b      	ldr	r3, [r3, #0]
 800c598:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800c59a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c59c:	6a39      	ldr	r1, [r7, #32]
 800c59e:	68f8      	ldr	r0, [r7, #12]
 800c5a0:	f000 f93e 	bl	800c820 <I2C_WaitOnTXEFlagUntilTimeout>
 800c5a4:	4603      	mov	r3, r0
 800c5a6:	2b00      	cmp	r3, #0
 800c5a8:	d00d      	beq.n	800c5c6 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800c5aa:	68fb      	ldr	r3, [r7, #12]
 800c5ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c5ae:	2b04      	cmp	r3, #4
 800c5b0:	d107      	bne.n	800c5c2 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800c5b2:	68fb      	ldr	r3, [r7, #12]
 800c5b4:	681b      	ldr	r3, [r3, #0]
 800c5b6:	681a      	ldr	r2, [r3, #0]
 800c5b8:	68fb      	ldr	r3, [r7, #12]
 800c5ba:	681b      	ldr	r3, [r3, #0]
 800c5bc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800c5c0:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800c5c2:	2301      	movs	r3, #1
 800c5c4:	e050      	b.n	800c668 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800c5c6:	893b      	ldrh	r3, [r7, #8]
 800c5c8:	b2da      	uxtb	r2, r3
 800c5ca:	68fb      	ldr	r3, [r7, #12]
 800c5cc:	681b      	ldr	r3, [r3, #0]
 800c5ce:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800c5d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c5d2:	6a39      	ldr	r1, [r7, #32]
 800c5d4:	68f8      	ldr	r0, [r7, #12]
 800c5d6:	f000 f923 	bl	800c820 <I2C_WaitOnTXEFlagUntilTimeout>
 800c5da:	4603      	mov	r3, r0
 800c5dc:	2b00      	cmp	r3, #0
 800c5de:	d00d      	beq.n	800c5fc <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800c5e0:	68fb      	ldr	r3, [r7, #12]
 800c5e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c5e4:	2b04      	cmp	r3, #4
 800c5e6:	d107      	bne.n	800c5f8 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800c5e8:	68fb      	ldr	r3, [r7, #12]
 800c5ea:	681b      	ldr	r3, [r3, #0]
 800c5ec:	681a      	ldr	r2, [r3, #0]
 800c5ee:	68fb      	ldr	r3, [r7, #12]
 800c5f0:	681b      	ldr	r3, [r3, #0]
 800c5f2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800c5f6:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800c5f8:	2301      	movs	r3, #1
 800c5fa:	e035      	b.n	800c668 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800c5fc:	68fb      	ldr	r3, [r7, #12]
 800c5fe:	681b      	ldr	r3, [r3, #0]
 800c600:	681a      	ldr	r2, [r3, #0]
 800c602:	68fb      	ldr	r3, [r7, #12]
 800c604:	681b      	ldr	r3, [r3, #0]
 800c606:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800c60a:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800c60c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c60e:	9300      	str	r3, [sp, #0]
 800c610:	6a3b      	ldr	r3, [r7, #32]
 800c612:	2200      	movs	r2, #0
 800c614:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800c618:	68f8      	ldr	r0, [r7, #12]
 800c61a:	f000 f82b 	bl	800c674 <I2C_WaitOnFlagUntilTimeout>
 800c61e:	4603      	mov	r3, r0
 800c620:	2b00      	cmp	r3, #0
 800c622:	d00d      	beq.n	800c640 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800c624:	68fb      	ldr	r3, [r7, #12]
 800c626:	681b      	ldr	r3, [r3, #0]
 800c628:	681b      	ldr	r3, [r3, #0]
 800c62a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c62e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c632:	d103      	bne.n	800c63c <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800c634:	68fb      	ldr	r3, [r7, #12]
 800c636:	f44f 7200 	mov.w	r2, #512	; 0x200
 800c63a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800c63c:	2303      	movs	r3, #3
 800c63e:	e013      	b.n	800c668 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800c640:	897b      	ldrh	r3, [r7, #10]
 800c642:	b2db      	uxtb	r3, r3
 800c644:	f043 0301 	orr.w	r3, r3, #1
 800c648:	b2da      	uxtb	r2, r3
 800c64a:	68fb      	ldr	r3, [r7, #12]
 800c64c:	681b      	ldr	r3, [r3, #0]
 800c64e:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800c650:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c652:	6a3a      	ldr	r2, [r7, #32]
 800c654:	4906      	ldr	r1, [pc, #24]	; (800c670 <I2C_RequestMemoryRead+0x1cc>)
 800c656:	68f8      	ldr	r0, [r7, #12]
 800c658:	f000 f863 	bl	800c722 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800c65c:	4603      	mov	r3, r0
 800c65e:	2b00      	cmp	r3, #0
 800c660:	d001      	beq.n	800c666 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800c662:	2301      	movs	r3, #1
 800c664:	e000      	b.n	800c668 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800c666:	2300      	movs	r3, #0
}
 800c668:	4618      	mov	r0, r3
 800c66a:	3718      	adds	r7, #24
 800c66c:	46bd      	mov	sp, r7
 800c66e:	bd80      	pop	{r7, pc}
 800c670:	00010002 	.word	0x00010002

0800c674 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800c674:	b580      	push	{r7, lr}
 800c676:	b084      	sub	sp, #16
 800c678:	af00      	add	r7, sp, #0
 800c67a:	60f8      	str	r0, [r7, #12]
 800c67c:	60b9      	str	r1, [r7, #8]
 800c67e:	603b      	str	r3, [r7, #0]
 800c680:	4613      	mov	r3, r2
 800c682:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800c684:	e025      	b.n	800c6d2 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800c686:	683b      	ldr	r3, [r7, #0]
 800c688:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c68c:	d021      	beq.n	800c6d2 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800c68e:	f7fe fd69 	bl	800b164 <HAL_GetTick>
 800c692:	4602      	mov	r2, r0
 800c694:	69bb      	ldr	r3, [r7, #24]
 800c696:	1ad3      	subs	r3, r2, r3
 800c698:	683a      	ldr	r2, [r7, #0]
 800c69a:	429a      	cmp	r2, r3
 800c69c:	d302      	bcc.n	800c6a4 <I2C_WaitOnFlagUntilTimeout+0x30>
 800c69e:	683b      	ldr	r3, [r7, #0]
 800c6a0:	2b00      	cmp	r3, #0
 800c6a2:	d116      	bne.n	800c6d2 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 800c6a4:	68fb      	ldr	r3, [r7, #12]
 800c6a6:	2200      	movs	r2, #0
 800c6a8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800c6aa:	68fb      	ldr	r3, [r7, #12]
 800c6ac:	2220      	movs	r2, #32
 800c6ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800c6b2:	68fb      	ldr	r3, [r7, #12]
 800c6b4:	2200      	movs	r2, #0
 800c6b6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800c6ba:	68fb      	ldr	r3, [r7, #12]
 800c6bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c6be:	f043 0220 	orr.w	r2, r3, #32
 800c6c2:	68fb      	ldr	r3, [r7, #12]
 800c6c4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800c6c6:	68fb      	ldr	r3, [r7, #12]
 800c6c8:	2200      	movs	r2, #0
 800c6ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800c6ce:	2301      	movs	r3, #1
 800c6d0:	e023      	b.n	800c71a <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800c6d2:	68bb      	ldr	r3, [r7, #8]
 800c6d4:	0c1b      	lsrs	r3, r3, #16
 800c6d6:	b2db      	uxtb	r3, r3
 800c6d8:	2b01      	cmp	r3, #1
 800c6da:	d10d      	bne.n	800c6f8 <I2C_WaitOnFlagUntilTimeout+0x84>
 800c6dc:	68fb      	ldr	r3, [r7, #12]
 800c6de:	681b      	ldr	r3, [r3, #0]
 800c6e0:	695b      	ldr	r3, [r3, #20]
 800c6e2:	43da      	mvns	r2, r3
 800c6e4:	68bb      	ldr	r3, [r7, #8]
 800c6e6:	4013      	ands	r3, r2
 800c6e8:	b29b      	uxth	r3, r3
 800c6ea:	2b00      	cmp	r3, #0
 800c6ec:	bf0c      	ite	eq
 800c6ee:	2301      	moveq	r3, #1
 800c6f0:	2300      	movne	r3, #0
 800c6f2:	b2db      	uxtb	r3, r3
 800c6f4:	461a      	mov	r2, r3
 800c6f6:	e00c      	b.n	800c712 <I2C_WaitOnFlagUntilTimeout+0x9e>
 800c6f8:	68fb      	ldr	r3, [r7, #12]
 800c6fa:	681b      	ldr	r3, [r3, #0]
 800c6fc:	699b      	ldr	r3, [r3, #24]
 800c6fe:	43da      	mvns	r2, r3
 800c700:	68bb      	ldr	r3, [r7, #8]
 800c702:	4013      	ands	r3, r2
 800c704:	b29b      	uxth	r3, r3
 800c706:	2b00      	cmp	r3, #0
 800c708:	bf0c      	ite	eq
 800c70a:	2301      	moveq	r3, #1
 800c70c:	2300      	movne	r3, #0
 800c70e:	b2db      	uxtb	r3, r3
 800c710:	461a      	mov	r2, r3
 800c712:	79fb      	ldrb	r3, [r7, #7]
 800c714:	429a      	cmp	r2, r3
 800c716:	d0b6      	beq.n	800c686 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800c718:	2300      	movs	r3, #0
}
 800c71a:	4618      	mov	r0, r3
 800c71c:	3710      	adds	r7, #16
 800c71e:	46bd      	mov	sp, r7
 800c720:	bd80      	pop	{r7, pc}

0800c722 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800c722:	b580      	push	{r7, lr}
 800c724:	b084      	sub	sp, #16
 800c726:	af00      	add	r7, sp, #0
 800c728:	60f8      	str	r0, [r7, #12]
 800c72a:	60b9      	str	r1, [r7, #8]
 800c72c:	607a      	str	r2, [r7, #4]
 800c72e:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800c730:	e051      	b.n	800c7d6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800c732:	68fb      	ldr	r3, [r7, #12]
 800c734:	681b      	ldr	r3, [r3, #0]
 800c736:	695b      	ldr	r3, [r3, #20]
 800c738:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800c73c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c740:	d123      	bne.n	800c78a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800c742:	68fb      	ldr	r3, [r7, #12]
 800c744:	681b      	ldr	r3, [r3, #0]
 800c746:	681a      	ldr	r2, [r3, #0]
 800c748:	68fb      	ldr	r3, [r7, #12]
 800c74a:	681b      	ldr	r3, [r3, #0]
 800c74c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800c750:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800c752:	68fb      	ldr	r3, [r7, #12]
 800c754:	681b      	ldr	r3, [r3, #0]
 800c756:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800c75a:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800c75c:	68fb      	ldr	r3, [r7, #12]
 800c75e:	2200      	movs	r2, #0
 800c760:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800c762:	68fb      	ldr	r3, [r7, #12]
 800c764:	2220      	movs	r2, #32
 800c766:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800c76a:	68fb      	ldr	r3, [r7, #12]
 800c76c:	2200      	movs	r2, #0
 800c76e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800c772:	68fb      	ldr	r3, [r7, #12]
 800c774:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c776:	f043 0204 	orr.w	r2, r3, #4
 800c77a:	68fb      	ldr	r3, [r7, #12]
 800c77c:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800c77e:	68fb      	ldr	r3, [r7, #12]
 800c780:	2200      	movs	r2, #0
 800c782:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800c786:	2301      	movs	r3, #1
 800c788:	e046      	b.n	800c818 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800c78a:	687b      	ldr	r3, [r7, #4]
 800c78c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c790:	d021      	beq.n	800c7d6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800c792:	f7fe fce7 	bl	800b164 <HAL_GetTick>
 800c796:	4602      	mov	r2, r0
 800c798:	683b      	ldr	r3, [r7, #0]
 800c79a:	1ad3      	subs	r3, r2, r3
 800c79c:	687a      	ldr	r2, [r7, #4]
 800c79e:	429a      	cmp	r2, r3
 800c7a0:	d302      	bcc.n	800c7a8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800c7a2:	687b      	ldr	r3, [r7, #4]
 800c7a4:	2b00      	cmp	r3, #0
 800c7a6:	d116      	bne.n	800c7d6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800c7a8:	68fb      	ldr	r3, [r7, #12]
 800c7aa:	2200      	movs	r2, #0
 800c7ac:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800c7ae:	68fb      	ldr	r3, [r7, #12]
 800c7b0:	2220      	movs	r2, #32
 800c7b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800c7b6:	68fb      	ldr	r3, [r7, #12]
 800c7b8:	2200      	movs	r2, #0
 800c7ba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800c7be:	68fb      	ldr	r3, [r7, #12]
 800c7c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c7c2:	f043 0220 	orr.w	r2, r3, #32
 800c7c6:	68fb      	ldr	r3, [r7, #12]
 800c7c8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800c7ca:	68fb      	ldr	r3, [r7, #12]
 800c7cc:	2200      	movs	r2, #0
 800c7ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800c7d2:	2301      	movs	r3, #1
 800c7d4:	e020      	b.n	800c818 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800c7d6:	68bb      	ldr	r3, [r7, #8]
 800c7d8:	0c1b      	lsrs	r3, r3, #16
 800c7da:	b2db      	uxtb	r3, r3
 800c7dc:	2b01      	cmp	r3, #1
 800c7de:	d10c      	bne.n	800c7fa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 800c7e0:	68fb      	ldr	r3, [r7, #12]
 800c7e2:	681b      	ldr	r3, [r3, #0]
 800c7e4:	695b      	ldr	r3, [r3, #20]
 800c7e6:	43da      	mvns	r2, r3
 800c7e8:	68bb      	ldr	r3, [r7, #8]
 800c7ea:	4013      	ands	r3, r2
 800c7ec:	b29b      	uxth	r3, r3
 800c7ee:	2b00      	cmp	r3, #0
 800c7f0:	bf14      	ite	ne
 800c7f2:	2301      	movne	r3, #1
 800c7f4:	2300      	moveq	r3, #0
 800c7f6:	b2db      	uxtb	r3, r3
 800c7f8:	e00b      	b.n	800c812 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800c7fa:	68fb      	ldr	r3, [r7, #12]
 800c7fc:	681b      	ldr	r3, [r3, #0]
 800c7fe:	699b      	ldr	r3, [r3, #24]
 800c800:	43da      	mvns	r2, r3
 800c802:	68bb      	ldr	r3, [r7, #8]
 800c804:	4013      	ands	r3, r2
 800c806:	b29b      	uxth	r3, r3
 800c808:	2b00      	cmp	r3, #0
 800c80a:	bf14      	ite	ne
 800c80c:	2301      	movne	r3, #1
 800c80e:	2300      	moveq	r3, #0
 800c810:	b2db      	uxtb	r3, r3
 800c812:	2b00      	cmp	r3, #0
 800c814:	d18d      	bne.n	800c732 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800c816:	2300      	movs	r3, #0
}
 800c818:	4618      	mov	r0, r3
 800c81a:	3710      	adds	r7, #16
 800c81c:	46bd      	mov	sp, r7
 800c81e:	bd80      	pop	{r7, pc}

0800c820 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800c820:	b580      	push	{r7, lr}
 800c822:	b084      	sub	sp, #16
 800c824:	af00      	add	r7, sp, #0
 800c826:	60f8      	str	r0, [r7, #12]
 800c828:	60b9      	str	r1, [r7, #8]
 800c82a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800c82c:	e02d      	b.n	800c88a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800c82e:	68f8      	ldr	r0, [r7, #12]
 800c830:	f000 f8ce 	bl	800c9d0 <I2C_IsAcknowledgeFailed>
 800c834:	4603      	mov	r3, r0
 800c836:	2b00      	cmp	r3, #0
 800c838:	d001      	beq.n	800c83e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800c83a:	2301      	movs	r3, #1
 800c83c:	e02d      	b.n	800c89a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800c83e:	68bb      	ldr	r3, [r7, #8]
 800c840:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c844:	d021      	beq.n	800c88a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800c846:	f7fe fc8d 	bl	800b164 <HAL_GetTick>
 800c84a:	4602      	mov	r2, r0
 800c84c:	687b      	ldr	r3, [r7, #4]
 800c84e:	1ad3      	subs	r3, r2, r3
 800c850:	68ba      	ldr	r2, [r7, #8]
 800c852:	429a      	cmp	r2, r3
 800c854:	d302      	bcc.n	800c85c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800c856:	68bb      	ldr	r3, [r7, #8]
 800c858:	2b00      	cmp	r3, #0
 800c85a:	d116      	bne.n	800c88a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800c85c:	68fb      	ldr	r3, [r7, #12]
 800c85e:	2200      	movs	r2, #0
 800c860:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800c862:	68fb      	ldr	r3, [r7, #12]
 800c864:	2220      	movs	r2, #32
 800c866:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800c86a:	68fb      	ldr	r3, [r7, #12]
 800c86c:	2200      	movs	r2, #0
 800c86e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800c872:	68fb      	ldr	r3, [r7, #12]
 800c874:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c876:	f043 0220 	orr.w	r2, r3, #32
 800c87a:	68fb      	ldr	r3, [r7, #12]
 800c87c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800c87e:	68fb      	ldr	r3, [r7, #12]
 800c880:	2200      	movs	r2, #0
 800c882:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800c886:	2301      	movs	r3, #1
 800c888:	e007      	b.n	800c89a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800c88a:	68fb      	ldr	r3, [r7, #12]
 800c88c:	681b      	ldr	r3, [r3, #0]
 800c88e:	695b      	ldr	r3, [r3, #20]
 800c890:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c894:	2b80      	cmp	r3, #128	; 0x80
 800c896:	d1ca      	bne.n	800c82e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800c898:	2300      	movs	r3, #0
}
 800c89a:	4618      	mov	r0, r3
 800c89c:	3710      	adds	r7, #16
 800c89e:	46bd      	mov	sp, r7
 800c8a0:	bd80      	pop	{r7, pc}

0800c8a2 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800c8a2:	b580      	push	{r7, lr}
 800c8a4:	b084      	sub	sp, #16
 800c8a6:	af00      	add	r7, sp, #0
 800c8a8:	60f8      	str	r0, [r7, #12]
 800c8aa:	60b9      	str	r1, [r7, #8]
 800c8ac:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800c8ae:	e02d      	b.n	800c90c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800c8b0:	68f8      	ldr	r0, [r7, #12]
 800c8b2:	f000 f88d 	bl	800c9d0 <I2C_IsAcknowledgeFailed>
 800c8b6:	4603      	mov	r3, r0
 800c8b8:	2b00      	cmp	r3, #0
 800c8ba:	d001      	beq.n	800c8c0 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800c8bc:	2301      	movs	r3, #1
 800c8be:	e02d      	b.n	800c91c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800c8c0:	68bb      	ldr	r3, [r7, #8]
 800c8c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c8c6:	d021      	beq.n	800c90c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800c8c8:	f7fe fc4c 	bl	800b164 <HAL_GetTick>
 800c8cc:	4602      	mov	r2, r0
 800c8ce:	687b      	ldr	r3, [r7, #4]
 800c8d0:	1ad3      	subs	r3, r2, r3
 800c8d2:	68ba      	ldr	r2, [r7, #8]
 800c8d4:	429a      	cmp	r2, r3
 800c8d6:	d302      	bcc.n	800c8de <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800c8d8:	68bb      	ldr	r3, [r7, #8]
 800c8da:	2b00      	cmp	r3, #0
 800c8dc:	d116      	bne.n	800c90c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800c8de:	68fb      	ldr	r3, [r7, #12]
 800c8e0:	2200      	movs	r2, #0
 800c8e2:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800c8e4:	68fb      	ldr	r3, [r7, #12]
 800c8e6:	2220      	movs	r2, #32
 800c8e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800c8ec:	68fb      	ldr	r3, [r7, #12]
 800c8ee:	2200      	movs	r2, #0
 800c8f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800c8f4:	68fb      	ldr	r3, [r7, #12]
 800c8f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c8f8:	f043 0220 	orr.w	r2, r3, #32
 800c8fc:	68fb      	ldr	r3, [r7, #12]
 800c8fe:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800c900:	68fb      	ldr	r3, [r7, #12]
 800c902:	2200      	movs	r2, #0
 800c904:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800c908:	2301      	movs	r3, #1
 800c90a:	e007      	b.n	800c91c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800c90c:	68fb      	ldr	r3, [r7, #12]
 800c90e:	681b      	ldr	r3, [r3, #0]
 800c910:	695b      	ldr	r3, [r3, #20]
 800c912:	f003 0304 	and.w	r3, r3, #4
 800c916:	2b04      	cmp	r3, #4
 800c918:	d1ca      	bne.n	800c8b0 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800c91a:	2300      	movs	r3, #0
}
 800c91c:	4618      	mov	r0, r3
 800c91e:	3710      	adds	r7, #16
 800c920:	46bd      	mov	sp, r7
 800c922:	bd80      	pop	{r7, pc}

0800c924 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800c924:	b580      	push	{r7, lr}
 800c926:	b084      	sub	sp, #16
 800c928:	af00      	add	r7, sp, #0
 800c92a:	60f8      	str	r0, [r7, #12]
 800c92c:	60b9      	str	r1, [r7, #8]
 800c92e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800c930:	e042      	b.n	800c9b8 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800c932:	68fb      	ldr	r3, [r7, #12]
 800c934:	681b      	ldr	r3, [r3, #0]
 800c936:	695b      	ldr	r3, [r3, #20]
 800c938:	f003 0310 	and.w	r3, r3, #16
 800c93c:	2b10      	cmp	r3, #16
 800c93e:	d119      	bne.n	800c974 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800c940:	68fb      	ldr	r3, [r7, #12]
 800c942:	681b      	ldr	r3, [r3, #0]
 800c944:	f06f 0210 	mvn.w	r2, #16
 800c948:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800c94a:	68fb      	ldr	r3, [r7, #12]
 800c94c:	2200      	movs	r2, #0
 800c94e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800c950:	68fb      	ldr	r3, [r7, #12]
 800c952:	2220      	movs	r2, #32
 800c954:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800c958:	68fb      	ldr	r3, [r7, #12]
 800c95a:	2200      	movs	r2, #0
 800c95c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800c960:	68fb      	ldr	r3, [r7, #12]
 800c962:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800c964:	68fb      	ldr	r3, [r7, #12]
 800c966:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800c968:	68fb      	ldr	r3, [r7, #12]
 800c96a:	2200      	movs	r2, #0
 800c96c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800c970:	2301      	movs	r3, #1
 800c972:	e029      	b.n	800c9c8 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800c974:	f7fe fbf6 	bl	800b164 <HAL_GetTick>
 800c978:	4602      	mov	r2, r0
 800c97a:	687b      	ldr	r3, [r7, #4]
 800c97c:	1ad3      	subs	r3, r2, r3
 800c97e:	68ba      	ldr	r2, [r7, #8]
 800c980:	429a      	cmp	r2, r3
 800c982:	d302      	bcc.n	800c98a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800c984:	68bb      	ldr	r3, [r7, #8]
 800c986:	2b00      	cmp	r3, #0
 800c988:	d116      	bne.n	800c9b8 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800c98a:	68fb      	ldr	r3, [r7, #12]
 800c98c:	2200      	movs	r2, #0
 800c98e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800c990:	68fb      	ldr	r3, [r7, #12]
 800c992:	2220      	movs	r2, #32
 800c994:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800c998:	68fb      	ldr	r3, [r7, #12]
 800c99a:	2200      	movs	r2, #0
 800c99c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800c9a0:	68fb      	ldr	r3, [r7, #12]
 800c9a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c9a4:	f043 0220 	orr.w	r2, r3, #32
 800c9a8:	68fb      	ldr	r3, [r7, #12]
 800c9aa:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800c9ac:	68fb      	ldr	r3, [r7, #12]
 800c9ae:	2200      	movs	r2, #0
 800c9b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800c9b4:	2301      	movs	r3, #1
 800c9b6:	e007      	b.n	800c9c8 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800c9b8:	68fb      	ldr	r3, [r7, #12]
 800c9ba:	681b      	ldr	r3, [r3, #0]
 800c9bc:	695b      	ldr	r3, [r3, #20]
 800c9be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c9c2:	2b40      	cmp	r3, #64	; 0x40
 800c9c4:	d1b5      	bne.n	800c932 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800c9c6:	2300      	movs	r3, #0
}
 800c9c8:	4618      	mov	r0, r3
 800c9ca:	3710      	adds	r7, #16
 800c9cc:	46bd      	mov	sp, r7
 800c9ce:	bd80      	pop	{r7, pc}

0800c9d0 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800c9d0:	b480      	push	{r7}
 800c9d2:	b083      	sub	sp, #12
 800c9d4:	af00      	add	r7, sp, #0
 800c9d6:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800c9d8:	687b      	ldr	r3, [r7, #4]
 800c9da:	681b      	ldr	r3, [r3, #0]
 800c9dc:	695b      	ldr	r3, [r3, #20]
 800c9de:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800c9e2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c9e6:	d11b      	bne.n	800ca20 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800c9e8:	687b      	ldr	r3, [r7, #4]
 800c9ea:	681b      	ldr	r3, [r3, #0]
 800c9ec:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800c9f0:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800c9f2:	687b      	ldr	r3, [r7, #4]
 800c9f4:	2200      	movs	r2, #0
 800c9f6:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800c9f8:	687b      	ldr	r3, [r7, #4]
 800c9fa:	2220      	movs	r2, #32
 800c9fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800ca00:	687b      	ldr	r3, [r7, #4]
 800ca02:	2200      	movs	r2, #0
 800ca04:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800ca08:	687b      	ldr	r3, [r7, #4]
 800ca0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ca0c:	f043 0204 	orr.w	r2, r3, #4
 800ca10:	687b      	ldr	r3, [r7, #4]
 800ca12:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800ca14:	687b      	ldr	r3, [r7, #4]
 800ca16:	2200      	movs	r2, #0
 800ca18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800ca1c:	2301      	movs	r3, #1
 800ca1e:	e000      	b.n	800ca22 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800ca20:	2300      	movs	r3, #0
}
 800ca22:	4618      	mov	r0, r3
 800ca24:	370c      	adds	r7, #12
 800ca26:	46bd      	mov	sp, r7
 800ca28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca2c:	4770      	bx	lr
	...

0800ca30 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800ca30:	b580      	push	{r7, lr}
 800ca32:	b086      	sub	sp, #24
 800ca34:	af00      	add	r7, sp, #0
 800ca36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800ca38:	687b      	ldr	r3, [r7, #4]
 800ca3a:	2b00      	cmp	r3, #0
 800ca3c:	d101      	bne.n	800ca42 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800ca3e:	2301      	movs	r3, #1
 800ca40:	e267      	b.n	800cf12 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800ca42:	687b      	ldr	r3, [r7, #4]
 800ca44:	681b      	ldr	r3, [r3, #0]
 800ca46:	f003 0301 	and.w	r3, r3, #1
 800ca4a:	2b00      	cmp	r3, #0
 800ca4c:	d075      	beq.n	800cb3a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800ca4e:	4b88      	ldr	r3, [pc, #544]	; (800cc70 <HAL_RCC_OscConfig+0x240>)
 800ca50:	689b      	ldr	r3, [r3, #8]
 800ca52:	f003 030c 	and.w	r3, r3, #12
 800ca56:	2b04      	cmp	r3, #4
 800ca58:	d00c      	beq.n	800ca74 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800ca5a:	4b85      	ldr	r3, [pc, #532]	; (800cc70 <HAL_RCC_OscConfig+0x240>)
 800ca5c:	689b      	ldr	r3, [r3, #8]
 800ca5e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800ca62:	2b08      	cmp	r3, #8
 800ca64:	d112      	bne.n	800ca8c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800ca66:	4b82      	ldr	r3, [pc, #520]	; (800cc70 <HAL_RCC_OscConfig+0x240>)
 800ca68:	685b      	ldr	r3, [r3, #4]
 800ca6a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800ca6e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800ca72:	d10b      	bne.n	800ca8c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800ca74:	4b7e      	ldr	r3, [pc, #504]	; (800cc70 <HAL_RCC_OscConfig+0x240>)
 800ca76:	681b      	ldr	r3, [r3, #0]
 800ca78:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ca7c:	2b00      	cmp	r3, #0
 800ca7e:	d05b      	beq.n	800cb38 <HAL_RCC_OscConfig+0x108>
 800ca80:	687b      	ldr	r3, [r7, #4]
 800ca82:	685b      	ldr	r3, [r3, #4]
 800ca84:	2b00      	cmp	r3, #0
 800ca86:	d157      	bne.n	800cb38 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800ca88:	2301      	movs	r3, #1
 800ca8a:	e242      	b.n	800cf12 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800ca8c:	687b      	ldr	r3, [r7, #4]
 800ca8e:	685b      	ldr	r3, [r3, #4]
 800ca90:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ca94:	d106      	bne.n	800caa4 <HAL_RCC_OscConfig+0x74>
 800ca96:	4b76      	ldr	r3, [pc, #472]	; (800cc70 <HAL_RCC_OscConfig+0x240>)
 800ca98:	681b      	ldr	r3, [r3, #0]
 800ca9a:	4a75      	ldr	r2, [pc, #468]	; (800cc70 <HAL_RCC_OscConfig+0x240>)
 800ca9c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800caa0:	6013      	str	r3, [r2, #0]
 800caa2:	e01d      	b.n	800cae0 <HAL_RCC_OscConfig+0xb0>
 800caa4:	687b      	ldr	r3, [r7, #4]
 800caa6:	685b      	ldr	r3, [r3, #4]
 800caa8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800caac:	d10c      	bne.n	800cac8 <HAL_RCC_OscConfig+0x98>
 800caae:	4b70      	ldr	r3, [pc, #448]	; (800cc70 <HAL_RCC_OscConfig+0x240>)
 800cab0:	681b      	ldr	r3, [r3, #0]
 800cab2:	4a6f      	ldr	r2, [pc, #444]	; (800cc70 <HAL_RCC_OscConfig+0x240>)
 800cab4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800cab8:	6013      	str	r3, [r2, #0]
 800caba:	4b6d      	ldr	r3, [pc, #436]	; (800cc70 <HAL_RCC_OscConfig+0x240>)
 800cabc:	681b      	ldr	r3, [r3, #0]
 800cabe:	4a6c      	ldr	r2, [pc, #432]	; (800cc70 <HAL_RCC_OscConfig+0x240>)
 800cac0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800cac4:	6013      	str	r3, [r2, #0]
 800cac6:	e00b      	b.n	800cae0 <HAL_RCC_OscConfig+0xb0>
 800cac8:	4b69      	ldr	r3, [pc, #420]	; (800cc70 <HAL_RCC_OscConfig+0x240>)
 800caca:	681b      	ldr	r3, [r3, #0]
 800cacc:	4a68      	ldr	r2, [pc, #416]	; (800cc70 <HAL_RCC_OscConfig+0x240>)
 800cace:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800cad2:	6013      	str	r3, [r2, #0]
 800cad4:	4b66      	ldr	r3, [pc, #408]	; (800cc70 <HAL_RCC_OscConfig+0x240>)
 800cad6:	681b      	ldr	r3, [r3, #0]
 800cad8:	4a65      	ldr	r2, [pc, #404]	; (800cc70 <HAL_RCC_OscConfig+0x240>)
 800cada:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800cade:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800cae0:	687b      	ldr	r3, [r7, #4]
 800cae2:	685b      	ldr	r3, [r3, #4]
 800cae4:	2b00      	cmp	r3, #0
 800cae6:	d013      	beq.n	800cb10 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800cae8:	f7fe fb3c 	bl	800b164 <HAL_GetTick>
 800caec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800caee:	e008      	b.n	800cb02 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800caf0:	f7fe fb38 	bl	800b164 <HAL_GetTick>
 800caf4:	4602      	mov	r2, r0
 800caf6:	693b      	ldr	r3, [r7, #16]
 800caf8:	1ad3      	subs	r3, r2, r3
 800cafa:	2b64      	cmp	r3, #100	; 0x64
 800cafc:	d901      	bls.n	800cb02 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800cafe:	2303      	movs	r3, #3
 800cb00:	e207      	b.n	800cf12 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800cb02:	4b5b      	ldr	r3, [pc, #364]	; (800cc70 <HAL_RCC_OscConfig+0x240>)
 800cb04:	681b      	ldr	r3, [r3, #0]
 800cb06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800cb0a:	2b00      	cmp	r3, #0
 800cb0c:	d0f0      	beq.n	800caf0 <HAL_RCC_OscConfig+0xc0>
 800cb0e:	e014      	b.n	800cb3a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800cb10:	f7fe fb28 	bl	800b164 <HAL_GetTick>
 800cb14:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800cb16:	e008      	b.n	800cb2a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800cb18:	f7fe fb24 	bl	800b164 <HAL_GetTick>
 800cb1c:	4602      	mov	r2, r0
 800cb1e:	693b      	ldr	r3, [r7, #16]
 800cb20:	1ad3      	subs	r3, r2, r3
 800cb22:	2b64      	cmp	r3, #100	; 0x64
 800cb24:	d901      	bls.n	800cb2a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800cb26:	2303      	movs	r3, #3
 800cb28:	e1f3      	b.n	800cf12 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800cb2a:	4b51      	ldr	r3, [pc, #324]	; (800cc70 <HAL_RCC_OscConfig+0x240>)
 800cb2c:	681b      	ldr	r3, [r3, #0]
 800cb2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800cb32:	2b00      	cmp	r3, #0
 800cb34:	d1f0      	bne.n	800cb18 <HAL_RCC_OscConfig+0xe8>
 800cb36:	e000      	b.n	800cb3a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800cb38:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800cb3a:	687b      	ldr	r3, [r7, #4]
 800cb3c:	681b      	ldr	r3, [r3, #0]
 800cb3e:	f003 0302 	and.w	r3, r3, #2
 800cb42:	2b00      	cmp	r3, #0
 800cb44:	d063      	beq.n	800cc0e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800cb46:	4b4a      	ldr	r3, [pc, #296]	; (800cc70 <HAL_RCC_OscConfig+0x240>)
 800cb48:	689b      	ldr	r3, [r3, #8]
 800cb4a:	f003 030c 	and.w	r3, r3, #12
 800cb4e:	2b00      	cmp	r3, #0
 800cb50:	d00b      	beq.n	800cb6a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800cb52:	4b47      	ldr	r3, [pc, #284]	; (800cc70 <HAL_RCC_OscConfig+0x240>)
 800cb54:	689b      	ldr	r3, [r3, #8]
 800cb56:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800cb5a:	2b08      	cmp	r3, #8
 800cb5c:	d11c      	bne.n	800cb98 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800cb5e:	4b44      	ldr	r3, [pc, #272]	; (800cc70 <HAL_RCC_OscConfig+0x240>)
 800cb60:	685b      	ldr	r3, [r3, #4]
 800cb62:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800cb66:	2b00      	cmp	r3, #0
 800cb68:	d116      	bne.n	800cb98 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800cb6a:	4b41      	ldr	r3, [pc, #260]	; (800cc70 <HAL_RCC_OscConfig+0x240>)
 800cb6c:	681b      	ldr	r3, [r3, #0]
 800cb6e:	f003 0302 	and.w	r3, r3, #2
 800cb72:	2b00      	cmp	r3, #0
 800cb74:	d005      	beq.n	800cb82 <HAL_RCC_OscConfig+0x152>
 800cb76:	687b      	ldr	r3, [r7, #4]
 800cb78:	68db      	ldr	r3, [r3, #12]
 800cb7a:	2b01      	cmp	r3, #1
 800cb7c:	d001      	beq.n	800cb82 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800cb7e:	2301      	movs	r3, #1
 800cb80:	e1c7      	b.n	800cf12 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800cb82:	4b3b      	ldr	r3, [pc, #236]	; (800cc70 <HAL_RCC_OscConfig+0x240>)
 800cb84:	681b      	ldr	r3, [r3, #0]
 800cb86:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800cb8a:	687b      	ldr	r3, [r7, #4]
 800cb8c:	691b      	ldr	r3, [r3, #16]
 800cb8e:	00db      	lsls	r3, r3, #3
 800cb90:	4937      	ldr	r1, [pc, #220]	; (800cc70 <HAL_RCC_OscConfig+0x240>)
 800cb92:	4313      	orrs	r3, r2
 800cb94:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800cb96:	e03a      	b.n	800cc0e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800cb98:	687b      	ldr	r3, [r7, #4]
 800cb9a:	68db      	ldr	r3, [r3, #12]
 800cb9c:	2b00      	cmp	r3, #0
 800cb9e:	d020      	beq.n	800cbe2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800cba0:	4b34      	ldr	r3, [pc, #208]	; (800cc74 <HAL_RCC_OscConfig+0x244>)
 800cba2:	2201      	movs	r2, #1
 800cba4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800cba6:	f7fe fadd 	bl	800b164 <HAL_GetTick>
 800cbaa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800cbac:	e008      	b.n	800cbc0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800cbae:	f7fe fad9 	bl	800b164 <HAL_GetTick>
 800cbb2:	4602      	mov	r2, r0
 800cbb4:	693b      	ldr	r3, [r7, #16]
 800cbb6:	1ad3      	subs	r3, r2, r3
 800cbb8:	2b02      	cmp	r3, #2
 800cbba:	d901      	bls.n	800cbc0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800cbbc:	2303      	movs	r3, #3
 800cbbe:	e1a8      	b.n	800cf12 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800cbc0:	4b2b      	ldr	r3, [pc, #172]	; (800cc70 <HAL_RCC_OscConfig+0x240>)
 800cbc2:	681b      	ldr	r3, [r3, #0]
 800cbc4:	f003 0302 	and.w	r3, r3, #2
 800cbc8:	2b00      	cmp	r3, #0
 800cbca:	d0f0      	beq.n	800cbae <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800cbcc:	4b28      	ldr	r3, [pc, #160]	; (800cc70 <HAL_RCC_OscConfig+0x240>)
 800cbce:	681b      	ldr	r3, [r3, #0]
 800cbd0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800cbd4:	687b      	ldr	r3, [r7, #4]
 800cbd6:	691b      	ldr	r3, [r3, #16]
 800cbd8:	00db      	lsls	r3, r3, #3
 800cbda:	4925      	ldr	r1, [pc, #148]	; (800cc70 <HAL_RCC_OscConfig+0x240>)
 800cbdc:	4313      	orrs	r3, r2
 800cbde:	600b      	str	r3, [r1, #0]
 800cbe0:	e015      	b.n	800cc0e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800cbe2:	4b24      	ldr	r3, [pc, #144]	; (800cc74 <HAL_RCC_OscConfig+0x244>)
 800cbe4:	2200      	movs	r2, #0
 800cbe6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800cbe8:	f7fe fabc 	bl	800b164 <HAL_GetTick>
 800cbec:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800cbee:	e008      	b.n	800cc02 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800cbf0:	f7fe fab8 	bl	800b164 <HAL_GetTick>
 800cbf4:	4602      	mov	r2, r0
 800cbf6:	693b      	ldr	r3, [r7, #16]
 800cbf8:	1ad3      	subs	r3, r2, r3
 800cbfa:	2b02      	cmp	r3, #2
 800cbfc:	d901      	bls.n	800cc02 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800cbfe:	2303      	movs	r3, #3
 800cc00:	e187      	b.n	800cf12 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800cc02:	4b1b      	ldr	r3, [pc, #108]	; (800cc70 <HAL_RCC_OscConfig+0x240>)
 800cc04:	681b      	ldr	r3, [r3, #0]
 800cc06:	f003 0302 	and.w	r3, r3, #2
 800cc0a:	2b00      	cmp	r3, #0
 800cc0c:	d1f0      	bne.n	800cbf0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800cc0e:	687b      	ldr	r3, [r7, #4]
 800cc10:	681b      	ldr	r3, [r3, #0]
 800cc12:	f003 0308 	and.w	r3, r3, #8
 800cc16:	2b00      	cmp	r3, #0
 800cc18:	d036      	beq.n	800cc88 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800cc1a:	687b      	ldr	r3, [r7, #4]
 800cc1c:	695b      	ldr	r3, [r3, #20]
 800cc1e:	2b00      	cmp	r3, #0
 800cc20:	d016      	beq.n	800cc50 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800cc22:	4b15      	ldr	r3, [pc, #84]	; (800cc78 <HAL_RCC_OscConfig+0x248>)
 800cc24:	2201      	movs	r2, #1
 800cc26:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800cc28:	f7fe fa9c 	bl	800b164 <HAL_GetTick>
 800cc2c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800cc2e:	e008      	b.n	800cc42 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800cc30:	f7fe fa98 	bl	800b164 <HAL_GetTick>
 800cc34:	4602      	mov	r2, r0
 800cc36:	693b      	ldr	r3, [r7, #16]
 800cc38:	1ad3      	subs	r3, r2, r3
 800cc3a:	2b02      	cmp	r3, #2
 800cc3c:	d901      	bls.n	800cc42 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800cc3e:	2303      	movs	r3, #3
 800cc40:	e167      	b.n	800cf12 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800cc42:	4b0b      	ldr	r3, [pc, #44]	; (800cc70 <HAL_RCC_OscConfig+0x240>)
 800cc44:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800cc46:	f003 0302 	and.w	r3, r3, #2
 800cc4a:	2b00      	cmp	r3, #0
 800cc4c:	d0f0      	beq.n	800cc30 <HAL_RCC_OscConfig+0x200>
 800cc4e:	e01b      	b.n	800cc88 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800cc50:	4b09      	ldr	r3, [pc, #36]	; (800cc78 <HAL_RCC_OscConfig+0x248>)
 800cc52:	2200      	movs	r2, #0
 800cc54:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800cc56:	f7fe fa85 	bl	800b164 <HAL_GetTick>
 800cc5a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800cc5c:	e00e      	b.n	800cc7c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800cc5e:	f7fe fa81 	bl	800b164 <HAL_GetTick>
 800cc62:	4602      	mov	r2, r0
 800cc64:	693b      	ldr	r3, [r7, #16]
 800cc66:	1ad3      	subs	r3, r2, r3
 800cc68:	2b02      	cmp	r3, #2
 800cc6a:	d907      	bls.n	800cc7c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800cc6c:	2303      	movs	r3, #3
 800cc6e:	e150      	b.n	800cf12 <HAL_RCC_OscConfig+0x4e2>
 800cc70:	40023800 	.word	0x40023800
 800cc74:	42470000 	.word	0x42470000
 800cc78:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800cc7c:	4b88      	ldr	r3, [pc, #544]	; (800cea0 <HAL_RCC_OscConfig+0x470>)
 800cc7e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800cc80:	f003 0302 	and.w	r3, r3, #2
 800cc84:	2b00      	cmp	r3, #0
 800cc86:	d1ea      	bne.n	800cc5e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800cc88:	687b      	ldr	r3, [r7, #4]
 800cc8a:	681b      	ldr	r3, [r3, #0]
 800cc8c:	f003 0304 	and.w	r3, r3, #4
 800cc90:	2b00      	cmp	r3, #0
 800cc92:	f000 8097 	beq.w	800cdc4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800cc96:	2300      	movs	r3, #0
 800cc98:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800cc9a:	4b81      	ldr	r3, [pc, #516]	; (800cea0 <HAL_RCC_OscConfig+0x470>)
 800cc9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cc9e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800cca2:	2b00      	cmp	r3, #0
 800cca4:	d10f      	bne.n	800ccc6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800cca6:	2300      	movs	r3, #0
 800cca8:	60bb      	str	r3, [r7, #8]
 800ccaa:	4b7d      	ldr	r3, [pc, #500]	; (800cea0 <HAL_RCC_OscConfig+0x470>)
 800ccac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ccae:	4a7c      	ldr	r2, [pc, #496]	; (800cea0 <HAL_RCC_OscConfig+0x470>)
 800ccb0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800ccb4:	6413      	str	r3, [r2, #64]	; 0x40
 800ccb6:	4b7a      	ldr	r3, [pc, #488]	; (800cea0 <HAL_RCC_OscConfig+0x470>)
 800ccb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ccba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800ccbe:	60bb      	str	r3, [r7, #8]
 800ccc0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800ccc2:	2301      	movs	r3, #1
 800ccc4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800ccc6:	4b77      	ldr	r3, [pc, #476]	; (800cea4 <HAL_RCC_OscConfig+0x474>)
 800ccc8:	681b      	ldr	r3, [r3, #0]
 800ccca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ccce:	2b00      	cmp	r3, #0
 800ccd0:	d118      	bne.n	800cd04 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800ccd2:	4b74      	ldr	r3, [pc, #464]	; (800cea4 <HAL_RCC_OscConfig+0x474>)
 800ccd4:	681b      	ldr	r3, [r3, #0]
 800ccd6:	4a73      	ldr	r2, [pc, #460]	; (800cea4 <HAL_RCC_OscConfig+0x474>)
 800ccd8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800ccdc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800ccde:	f7fe fa41 	bl	800b164 <HAL_GetTick>
 800cce2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800cce4:	e008      	b.n	800ccf8 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800cce6:	f7fe fa3d 	bl	800b164 <HAL_GetTick>
 800ccea:	4602      	mov	r2, r0
 800ccec:	693b      	ldr	r3, [r7, #16]
 800ccee:	1ad3      	subs	r3, r2, r3
 800ccf0:	2b02      	cmp	r3, #2
 800ccf2:	d901      	bls.n	800ccf8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800ccf4:	2303      	movs	r3, #3
 800ccf6:	e10c      	b.n	800cf12 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800ccf8:	4b6a      	ldr	r3, [pc, #424]	; (800cea4 <HAL_RCC_OscConfig+0x474>)
 800ccfa:	681b      	ldr	r3, [r3, #0]
 800ccfc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800cd00:	2b00      	cmp	r3, #0
 800cd02:	d0f0      	beq.n	800cce6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800cd04:	687b      	ldr	r3, [r7, #4]
 800cd06:	689b      	ldr	r3, [r3, #8]
 800cd08:	2b01      	cmp	r3, #1
 800cd0a:	d106      	bne.n	800cd1a <HAL_RCC_OscConfig+0x2ea>
 800cd0c:	4b64      	ldr	r3, [pc, #400]	; (800cea0 <HAL_RCC_OscConfig+0x470>)
 800cd0e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cd10:	4a63      	ldr	r2, [pc, #396]	; (800cea0 <HAL_RCC_OscConfig+0x470>)
 800cd12:	f043 0301 	orr.w	r3, r3, #1
 800cd16:	6713      	str	r3, [r2, #112]	; 0x70
 800cd18:	e01c      	b.n	800cd54 <HAL_RCC_OscConfig+0x324>
 800cd1a:	687b      	ldr	r3, [r7, #4]
 800cd1c:	689b      	ldr	r3, [r3, #8]
 800cd1e:	2b05      	cmp	r3, #5
 800cd20:	d10c      	bne.n	800cd3c <HAL_RCC_OscConfig+0x30c>
 800cd22:	4b5f      	ldr	r3, [pc, #380]	; (800cea0 <HAL_RCC_OscConfig+0x470>)
 800cd24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cd26:	4a5e      	ldr	r2, [pc, #376]	; (800cea0 <HAL_RCC_OscConfig+0x470>)
 800cd28:	f043 0304 	orr.w	r3, r3, #4
 800cd2c:	6713      	str	r3, [r2, #112]	; 0x70
 800cd2e:	4b5c      	ldr	r3, [pc, #368]	; (800cea0 <HAL_RCC_OscConfig+0x470>)
 800cd30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cd32:	4a5b      	ldr	r2, [pc, #364]	; (800cea0 <HAL_RCC_OscConfig+0x470>)
 800cd34:	f043 0301 	orr.w	r3, r3, #1
 800cd38:	6713      	str	r3, [r2, #112]	; 0x70
 800cd3a:	e00b      	b.n	800cd54 <HAL_RCC_OscConfig+0x324>
 800cd3c:	4b58      	ldr	r3, [pc, #352]	; (800cea0 <HAL_RCC_OscConfig+0x470>)
 800cd3e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cd40:	4a57      	ldr	r2, [pc, #348]	; (800cea0 <HAL_RCC_OscConfig+0x470>)
 800cd42:	f023 0301 	bic.w	r3, r3, #1
 800cd46:	6713      	str	r3, [r2, #112]	; 0x70
 800cd48:	4b55      	ldr	r3, [pc, #340]	; (800cea0 <HAL_RCC_OscConfig+0x470>)
 800cd4a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cd4c:	4a54      	ldr	r2, [pc, #336]	; (800cea0 <HAL_RCC_OscConfig+0x470>)
 800cd4e:	f023 0304 	bic.w	r3, r3, #4
 800cd52:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800cd54:	687b      	ldr	r3, [r7, #4]
 800cd56:	689b      	ldr	r3, [r3, #8]
 800cd58:	2b00      	cmp	r3, #0
 800cd5a:	d015      	beq.n	800cd88 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800cd5c:	f7fe fa02 	bl	800b164 <HAL_GetTick>
 800cd60:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800cd62:	e00a      	b.n	800cd7a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800cd64:	f7fe f9fe 	bl	800b164 <HAL_GetTick>
 800cd68:	4602      	mov	r2, r0
 800cd6a:	693b      	ldr	r3, [r7, #16]
 800cd6c:	1ad3      	subs	r3, r2, r3
 800cd6e:	f241 3288 	movw	r2, #5000	; 0x1388
 800cd72:	4293      	cmp	r3, r2
 800cd74:	d901      	bls.n	800cd7a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800cd76:	2303      	movs	r3, #3
 800cd78:	e0cb      	b.n	800cf12 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800cd7a:	4b49      	ldr	r3, [pc, #292]	; (800cea0 <HAL_RCC_OscConfig+0x470>)
 800cd7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cd7e:	f003 0302 	and.w	r3, r3, #2
 800cd82:	2b00      	cmp	r3, #0
 800cd84:	d0ee      	beq.n	800cd64 <HAL_RCC_OscConfig+0x334>
 800cd86:	e014      	b.n	800cdb2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800cd88:	f7fe f9ec 	bl	800b164 <HAL_GetTick>
 800cd8c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800cd8e:	e00a      	b.n	800cda6 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800cd90:	f7fe f9e8 	bl	800b164 <HAL_GetTick>
 800cd94:	4602      	mov	r2, r0
 800cd96:	693b      	ldr	r3, [r7, #16]
 800cd98:	1ad3      	subs	r3, r2, r3
 800cd9a:	f241 3288 	movw	r2, #5000	; 0x1388
 800cd9e:	4293      	cmp	r3, r2
 800cda0:	d901      	bls.n	800cda6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800cda2:	2303      	movs	r3, #3
 800cda4:	e0b5      	b.n	800cf12 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800cda6:	4b3e      	ldr	r3, [pc, #248]	; (800cea0 <HAL_RCC_OscConfig+0x470>)
 800cda8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cdaa:	f003 0302 	and.w	r3, r3, #2
 800cdae:	2b00      	cmp	r3, #0
 800cdb0:	d1ee      	bne.n	800cd90 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800cdb2:	7dfb      	ldrb	r3, [r7, #23]
 800cdb4:	2b01      	cmp	r3, #1
 800cdb6:	d105      	bne.n	800cdc4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800cdb8:	4b39      	ldr	r3, [pc, #228]	; (800cea0 <HAL_RCC_OscConfig+0x470>)
 800cdba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cdbc:	4a38      	ldr	r2, [pc, #224]	; (800cea0 <HAL_RCC_OscConfig+0x470>)
 800cdbe:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800cdc2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800cdc4:	687b      	ldr	r3, [r7, #4]
 800cdc6:	699b      	ldr	r3, [r3, #24]
 800cdc8:	2b00      	cmp	r3, #0
 800cdca:	f000 80a1 	beq.w	800cf10 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800cdce:	4b34      	ldr	r3, [pc, #208]	; (800cea0 <HAL_RCC_OscConfig+0x470>)
 800cdd0:	689b      	ldr	r3, [r3, #8]
 800cdd2:	f003 030c 	and.w	r3, r3, #12
 800cdd6:	2b08      	cmp	r3, #8
 800cdd8:	d05c      	beq.n	800ce94 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800cdda:	687b      	ldr	r3, [r7, #4]
 800cddc:	699b      	ldr	r3, [r3, #24]
 800cdde:	2b02      	cmp	r3, #2
 800cde0:	d141      	bne.n	800ce66 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800cde2:	4b31      	ldr	r3, [pc, #196]	; (800cea8 <HAL_RCC_OscConfig+0x478>)
 800cde4:	2200      	movs	r2, #0
 800cde6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800cde8:	f7fe f9bc 	bl	800b164 <HAL_GetTick>
 800cdec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800cdee:	e008      	b.n	800ce02 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800cdf0:	f7fe f9b8 	bl	800b164 <HAL_GetTick>
 800cdf4:	4602      	mov	r2, r0
 800cdf6:	693b      	ldr	r3, [r7, #16]
 800cdf8:	1ad3      	subs	r3, r2, r3
 800cdfa:	2b02      	cmp	r3, #2
 800cdfc:	d901      	bls.n	800ce02 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800cdfe:	2303      	movs	r3, #3
 800ce00:	e087      	b.n	800cf12 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800ce02:	4b27      	ldr	r3, [pc, #156]	; (800cea0 <HAL_RCC_OscConfig+0x470>)
 800ce04:	681b      	ldr	r3, [r3, #0]
 800ce06:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ce0a:	2b00      	cmp	r3, #0
 800ce0c:	d1f0      	bne.n	800cdf0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800ce0e:	687b      	ldr	r3, [r7, #4]
 800ce10:	69da      	ldr	r2, [r3, #28]
 800ce12:	687b      	ldr	r3, [r7, #4]
 800ce14:	6a1b      	ldr	r3, [r3, #32]
 800ce16:	431a      	orrs	r2, r3
 800ce18:	687b      	ldr	r3, [r7, #4]
 800ce1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ce1c:	019b      	lsls	r3, r3, #6
 800ce1e:	431a      	orrs	r2, r3
 800ce20:	687b      	ldr	r3, [r7, #4]
 800ce22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ce24:	085b      	lsrs	r3, r3, #1
 800ce26:	3b01      	subs	r3, #1
 800ce28:	041b      	lsls	r3, r3, #16
 800ce2a:	431a      	orrs	r2, r3
 800ce2c:	687b      	ldr	r3, [r7, #4]
 800ce2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ce30:	061b      	lsls	r3, r3, #24
 800ce32:	491b      	ldr	r1, [pc, #108]	; (800cea0 <HAL_RCC_OscConfig+0x470>)
 800ce34:	4313      	orrs	r3, r2
 800ce36:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800ce38:	4b1b      	ldr	r3, [pc, #108]	; (800cea8 <HAL_RCC_OscConfig+0x478>)
 800ce3a:	2201      	movs	r2, #1
 800ce3c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800ce3e:	f7fe f991 	bl	800b164 <HAL_GetTick>
 800ce42:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800ce44:	e008      	b.n	800ce58 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800ce46:	f7fe f98d 	bl	800b164 <HAL_GetTick>
 800ce4a:	4602      	mov	r2, r0
 800ce4c:	693b      	ldr	r3, [r7, #16]
 800ce4e:	1ad3      	subs	r3, r2, r3
 800ce50:	2b02      	cmp	r3, #2
 800ce52:	d901      	bls.n	800ce58 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800ce54:	2303      	movs	r3, #3
 800ce56:	e05c      	b.n	800cf12 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800ce58:	4b11      	ldr	r3, [pc, #68]	; (800cea0 <HAL_RCC_OscConfig+0x470>)
 800ce5a:	681b      	ldr	r3, [r3, #0]
 800ce5c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ce60:	2b00      	cmp	r3, #0
 800ce62:	d0f0      	beq.n	800ce46 <HAL_RCC_OscConfig+0x416>
 800ce64:	e054      	b.n	800cf10 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800ce66:	4b10      	ldr	r3, [pc, #64]	; (800cea8 <HAL_RCC_OscConfig+0x478>)
 800ce68:	2200      	movs	r2, #0
 800ce6a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800ce6c:	f7fe f97a 	bl	800b164 <HAL_GetTick>
 800ce70:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800ce72:	e008      	b.n	800ce86 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800ce74:	f7fe f976 	bl	800b164 <HAL_GetTick>
 800ce78:	4602      	mov	r2, r0
 800ce7a:	693b      	ldr	r3, [r7, #16]
 800ce7c:	1ad3      	subs	r3, r2, r3
 800ce7e:	2b02      	cmp	r3, #2
 800ce80:	d901      	bls.n	800ce86 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800ce82:	2303      	movs	r3, #3
 800ce84:	e045      	b.n	800cf12 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800ce86:	4b06      	ldr	r3, [pc, #24]	; (800cea0 <HAL_RCC_OscConfig+0x470>)
 800ce88:	681b      	ldr	r3, [r3, #0]
 800ce8a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ce8e:	2b00      	cmp	r3, #0
 800ce90:	d1f0      	bne.n	800ce74 <HAL_RCC_OscConfig+0x444>
 800ce92:	e03d      	b.n	800cf10 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800ce94:	687b      	ldr	r3, [r7, #4]
 800ce96:	699b      	ldr	r3, [r3, #24]
 800ce98:	2b01      	cmp	r3, #1
 800ce9a:	d107      	bne.n	800ceac <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800ce9c:	2301      	movs	r3, #1
 800ce9e:	e038      	b.n	800cf12 <HAL_RCC_OscConfig+0x4e2>
 800cea0:	40023800 	.word	0x40023800
 800cea4:	40007000 	.word	0x40007000
 800cea8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800ceac:	4b1b      	ldr	r3, [pc, #108]	; (800cf1c <HAL_RCC_OscConfig+0x4ec>)
 800ceae:	685b      	ldr	r3, [r3, #4]
 800ceb0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800ceb2:	687b      	ldr	r3, [r7, #4]
 800ceb4:	699b      	ldr	r3, [r3, #24]
 800ceb6:	2b01      	cmp	r3, #1
 800ceb8:	d028      	beq.n	800cf0c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800ceba:	68fb      	ldr	r3, [r7, #12]
 800cebc:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800cec0:	687b      	ldr	r3, [r7, #4]
 800cec2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800cec4:	429a      	cmp	r2, r3
 800cec6:	d121      	bne.n	800cf0c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800cec8:	68fb      	ldr	r3, [r7, #12]
 800ceca:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800cece:	687b      	ldr	r3, [r7, #4]
 800ced0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800ced2:	429a      	cmp	r2, r3
 800ced4:	d11a      	bne.n	800cf0c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800ced6:	68fa      	ldr	r2, [r7, #12]
 800ced8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800cedc:	4013      	ands	r3, r2
 800cede:	687a      	ldr	r2, [r7, #4]
 800cee0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800cee2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800cee4:	4293      	cmp	r3, r2
 800cee6:	d111      	bne.n	800cf0c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800cee8:	68fb      	ldr	r3, [r7, #12]
 800ceea:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800ceee:	687b      	ldr	r3, [r7, #4]
 800cef0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cef2:	085b      	lsrs	r3, r3, #1
 800cef4:	3b01      	subs	r3, #1
 800cef6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800cef8:	429a      	cmp	r2, r3
 800cefa:	d107      	bne.n	800cf0c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800cefc:	68fb      	ldr	r3, [r7, #12]
 800cefe:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800cf02:	687b      	ldr	r3, [r7, #4]
 800cf04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cf06:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800cf08:	429a      	cmp	r2, r3
 800cf0a:	d001      	beq.n	800cf10 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800cf0c:	2301      	movs	r3, #1
 800cf0e:	e000      	b.n	800cf12 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800cf10:	2300      	movs	r3, #0
}
 800cf12:	4618      	mov	r0, r3
 800cf14:	3718      	adds	r7, #24
 800cf16:	46bd      	mov	sp, r7
 800cf18:	bd80      	pop	{r7, pc}
 800cf1a:	bf00      	nop
 800cf1c:	40023800 	.word	0x40023800

0800cf20 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800cf20:	b580      	push	{r7, lr}
 800cf22:	b084      	sub	sp, #16
 800cf24:	af00      	add	r7, sp, #0
 800cf26:	6078      	str	r0, [r7, #4]
 800cf28:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800cf2a:	687b      	ldr	r3, [r7, #4]
 800cf2c:	2b00      	cmp	r3, #0
 800cf2e:	d101      	bne.n	800cf34 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800cf30:	2301      	movs	r3, #1
 800cf32:	e0cc      	b.n	800d0ce <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800cf34:	4b68      	ldr	r3, [pc, #416]	; (800d0d8 <HAL_RCC_ClockConfig+0x1b8>)
 800cf36:	681b      	ldr	r3, [r3, #0]
 800cf38:	f003 0307 	and.w	r3, r3, #7
 800cf3c:	683a      	ldr	r2, [r7, #0]
 800cf3e:	429a      	cmp	r2, r3
 800cf40:	d90c      	bls.n	800cf5c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800cf42:	4b65      	ldr	r3, [pc, #404]	; (800d0d8 <HAL_RCC_ClockConfig+0x1b8>)
 800cf44:	683a      	ldr	r2, [r7, #0]
 800cf46:	b2d2      	uxtb	r2, r2
 800cf48:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800cf4a:	4b63      	ldr	r3, [pc, #396]	; (800d0d8 <HAL_RCC_ClockConfig+0x1b8>)
 800cf4c:	681b      	ldr	r3, [r3, #0]
 800cf4e:	f003 0307 	and.w	r3, r3, #7
 800cf52:	683a      	ldr	r2, [r7, #0]
 800cf54:	429a      	cmp	r2, r3
 800cf56:	d001      	beq.n	800cf5c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800cf58:	2301      	movs	r3, #1
 800cf5a:	e0b8      	b.n	800d0ce <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800cf5c:	687b      	ldr	r3, [r7, #4]
 800cf5e:	681b      	ldr	r3, [r3, #0]
 800cf60:	f003 0302 	and.w	r3, r3, #2
 800cf64:	2b00      	cmp	r3, #0
 800cf66:	d020      	beq.n	800cfaa <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800cf68:	687b      	ldr	r3, [r7, #4]
 800cf6a:	681b      	ldr	r3, [r3, #0]
 800cf6c:	f003 0304 	and.w	r3, r3, #4
 800cf70:	2b00      	cmp	r3, #0
 800cf72:	d005      	beq.n	800cf80 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800cf74:	4b59      	ldr	r3, [pc, #356]	; (800d0dc <HAL_RCC_ClockConfig+0x1bc>)
 800cf76:	689b      	ldr	r3, [r3, #8]
 800cf78:	4a58      	ldr	r2, [pc, #352]	; (800d0dc <HAL_RCC_ClockConfig+0x1bc>)
 800cf7a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800cf7e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800cf80:	687b      	ldr	r3, [r7, #4]
 800cf82:	681b      	ldr	r3, [r3, #0]
 800cf84:	f003 0308 	and.w	r3, r3, #8
 800cf88:	2b00      	cmp	r3, #0
 800cf8a:	d005      	beq.n	800cf98 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800cf8c:	4b53      	ldr	r3, [pc, #332]	; (800d0dc <HAL_RCC_ClockConfig+0x1bc>)
 800cf8e:	689b      	ldr	r3, [r3, #8]
 800cf90:	4a52      	ldr	r2, [pc, #328]	; (800d0dc <HAL_RCC_ClockConfig+0x1bc>)
 800cf92:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800cf96:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800cf98:	4b50      	ldr	r3, [pc, #320]	; (800d0dc <HAL_RCC_ClockConfig+0x1bc>)
 800cf9a:	689b      	ldr	r3, [r3, #8]
 800cf9c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800cfa0:	687b      	ldr	r3, [r7, #4]
 800cfa2:	689b      	ldr	r3, [r3, #8]
 800cfa4:	494d      	ldr	r1, [pc, #308]	; (800d0dc <HAL_RCC_ClockConfig+0x1bc>)
 800cfa6:	4313      	orrs	r3, r2
 800cfa8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800cfaa:	687b      	ldr	r3, [r7, #4]
 800cfac:	681b      	ldr	r3, [r3, #0]
 800cfae:	f003 0301 	and.w	r3, r3, #1
 800cfb2:	2b00      	cmp	r3, #0
 800cfb4:	d044      	beq.n	800d040 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800cfb6:	687b      	ldr	r3, [r7, #4]
 800cfb8:	685b      	ldr	r3, [r3, #4]
 800cfba:	2b01      	cmp	r3, #1
 800cfbc:	d107      	bne.n	800cfce <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800cfbe:	4b47      	ldr	r3, [pc, #284]	; (800d0dc <HAL_RCC_ClockConfig+0x1bc>)
 800cfc0:	681b      	ldr	r3, [r3, #0]
 800cfc2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800cfc6:	2b00      	cmp	r3, #0
 800cfc8:	d119      	bne.n	800cffe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800cfca:	2301      	movs	r3, #1
 800cfcc:	e07f      	b.n	800d0ce <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800cfce:	687b      	ldr	r3, [r7, #4]
 800cfd0:	685b      	ldr	r3, [r3, #4]
 800cfd2:	2b02      	cmp	r3, #2
 800cfd4:	d003      	beq.n	800cfde <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800cfd6:	687b      	ldr	r3, [r7, #4]
 800cfd8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800cfda:	2b03      	cmp	r3, #3
 800cfdc:	d107      	bne.n	800cfee <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800cfde:	4b3f      	ldr	r3, [pc, #252]	; (800d0dc <HAL_RCC_ClockConfig+0x1bc>)
 800cfe0:	681b      	ldr	r3, [r3, #0]
 800cfe2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800cfe6:	2b00      	cmp	r3, #0
 800cfe8:	d109      	bne.n	800cffe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800cfea:	2301      	movs	r3, #1
 800cfec:	e06f      	b.n	800d0ce <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800cfee:	4b3b      	ldr	r3, [pc, #236]	; (800d0dc <HAL_RCC_ClockConfig+0x1bc>)
 800cff0:	681b      	ldr	r3, [r3, #0]
 800cff2:	f003 0302 	and.w	r3, r3, #2
 800cff6:	2b00      	cmp	r3, #0
 800cff8:	d101      	bne.n	800cffe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800cffa:	2301      	movs	r3, #1
 800cffc:	e067      	b.n	800d0ce <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800cffe:	4b37      	ldr	r3, [pc, #220]	; (800d0dc <HAL_RCC_ClockConfig+0x1bc>)
 800d000:	689b      	ldr	r3, [r3, #8]
 800d002:	f023 0203 	bic.w	r2, r3, #3
 800d006:	687b      	ldr	r3, [r7, #4]
 800d008:	685b      	ldr	r3, [r3, #4]
 800d00a:	4934      	ldr	r1, [pc, #208]	; (800d0dc <HAL_RCC_ClockConfig+0x1bc>)
 800d00c:	4313      	orrs	r3, r2
 800d00e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800d010:	f7fe f8a8 	bl	800b164 <HAL_GetTick>
 800d014:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800d016:	e00a      	b.n	800d02e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800d018:	f7fe f8a4 	bl	800b164 <HAL_GetTick>
 800d01c:	4602      	mov	r2, r0
 800d01e:	68fb      	ldr	r3, [r7, #12]
 800d020:	1ad3      	subs	r3, r2, r3
 800d022:	f241 3288 	movw	r2, #5000	; 0x1388
 800d026:	4293      	cmp	r3, r2
 800d028:	d901      	bls.n	800d02e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800d02a:	2303      	movs	r3, #3
 800d02c:	e04f      	b.n	800d0ce <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800d02e:	4b2b      	ldr	r3, [pc, #172]	; (800d0dc <HAL_RCC_ClockConfig+0x1bc>)
 800d030:	689b      	ldr	r3, [r3, #8]
 800d032:	f003 020c 	and.w	r2, r3, #12
 800d036:	687b      	ldr	r3, [r7, #4]
 800d038:	685b      	ldr	r3, [r3, #4]
 800d03a:	009b      	lsls	r3, r3, #2
 800d03c:	429a      	cmp	r2, r3
 800d03e:	d1eb      	bne.n	800d018 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800d040:	4b25      	ldr	r3, [pc, #148]	; (800d0d8 <HAL_RCC_ClockConfig+0x1b8>)
 800d042:	681b      	ldr	r3, [r3, #0]
 800d044:	f003 0307 	and.w	r3, r3, #7
 800d048:	683a      	ldr	r2, [r7, #0]
 800d04a:	429a      	cmp	r2, r3
 800d04c:	d20c      	bcs.n	800d068 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800d04e:	4b22      	ldr	r3, [pc, #136]	; (800d0d8 <HAL_RCC_ClockConfig+0x1b8>)
 800d050:	683a      	ldr	r2, [r7, #0]
 800d052:	b2d2      	uxtb	r2, r2
 800d054:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800d056:	4b20      	ldr	r3, [pc, #128]	; (800d0d8 <HAL_RCC_ClockConfig+0x1b8>)
 800d058:	681b      	ldr	r3, [r3, #0]
 800d05a:	f003 0307 	and.w	r3, r3, #7
 800d05e:	683a      	ldr	r2, [r7, #0]
 800d060:	429a      	cmp	r2, r3
 800d062:	d001      	beq.n	800d068 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800d064:	2301      	movs	r3, #1
 800d066:	e032      	b.n	800d0ce <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800d068:	687b      	ldr	r3, [r7, #4]
 800d06a:	681b      	ldr	r3, [r3, #0]
 800d06c:	f003 0304 	and.w	r3, r3, #4
 800d070:	2b00      	cmp	r3, #0
 800d072:	d008      	beq.n	800d086 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800d074:	4b19      	ldr	r3, [pc, #100]	; (800d0dc <HAL_RCC_ClockConfig+0x1bc>)
 800d076:	689b      	ldr	r3, [r3, #8]
 800d078:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800d07c:	687b      	ldr	r3, [r7, #4]
 800d07e:	68db      	ldr	r3, [r3, #12]
 800d080:	4916      	ldr	r1, [pc, #88]	; (800d0dc <HAL_RCC_ClockConfig+0x1bc>)
 800d082:	4313      	orrs	r3, r2
 800d084:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800d086:	687b      	ldr	r3, [r7, #4]
 800d088:	681b      	ldr	r3, [r3, #0]
 800d08a:	f003 0308 	and.w	r3, r3, #8
 800d08e:	2b00      	cmp	r3, #0
 800d090:	d009      	beq.n	800d0a6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800d092:	4b12      	ldr	r3, [pc, #72]	; (800d0dc <HAL_RCC_ClockConfig+0x1bc>)
 800d094:	689b      	ldr	r3, [r3, #8]
 800d096:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800d09a:	687b      	ldr	r3, [r7, #4]
 800d09c:	691b      	ldr	r3, [r3, #16]
 800d09e:	00db      	lsls	r3, r3, #3
 800d0a0:	490e      	ldr	r1, [pc, #56]	; (800d0dc <HAL_RCC_ClockConfig+0x1bc>)
 800d0a2:	4313      	orrs	r3, r2
 800d0a4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800d0a6:	f000 f821 	bl	800d0ec <HAL_RCC_GetSysClockFreq>
 800d0aa:	4602      	mov	r2, r0
 800d0ac:	4b0b      	ldr	r3, [pc, #44]	; (800d0dc <HAL_RCC_ClockConfig+0x1bc>)
 800d0ae:	689b      	ldr	r3, [r3, #8]
 800d0b0:	091b      	lsrs	r3, r3, #4
 800d0b2:	f003 030f 	and.w	r3, r3, #15
 800d0b6:	490a      	ldr	r1, [pc, #40]	; (800d0e0 <HAL_RCC_ClockConfig+0x1c0>)
 800d0b8:	5ccb      	ldrb	r3, [r1, r3]
 800d0ba:	fa22 f303 	lsr.w	r3, r2, r3
 800d0be:	4a09      	ldr	r2, [pc, #36]	; (800d0e4 <HAL_RCC_ClockConfig+0x1c4>)
 800d0c0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800d0c2:	4b09      	ldr	r3, [pc, #36]	; (800d0e8 <HAL_RCC_ClockConfig+0x1c8>)
 800d0c4:	681b      	ldr	r3, [r3, #0]
 800d0c6:	4618      	mov	r0, r3
 800d0c8:	f7fe f808 	bl	800b0dc <HAL_InitTick>

  return HAL_OK;
 800d0cc:	2300      	movs	r3, #0
}
 800d0ce:	4618      	mov	r0, r3
 800d0d0:	3710      	adds	r7, #16
 800d0d2:	46bd      	mov	sp, r7
 800d0d4:	bd80      	pop	{r7, pc}
 800d0d6:	bf00      	nop
 800d0d8:	40023c00 	.word	0x40023c00
 800d0dc:	40023800 	.word	0x40023800
 800d0e0:	08010594 	.word	0x08010594
 800d0e4:	20000004 	.word	0x20000004
 800d0e8:	20000198 	.word	0x20000198

0800d0ec <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800d0ec:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800d0f0:	b094      	sub	sp, #80	; 0x50
 800d0f2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800d0f4:	2300      	movs	r3, #0
 800d0f6:	647b      	str	r3, [r7, #68]	; 0x44
 800d0f8:	2300      	movs	r3, #0
 800d0fa:	64fb      	str	r3, [r7, #76]	; 0x4c
 800d0fc:	2300      	movs	r3, #0
 800d0fe:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 800d100:	2300      	movs	r3, #0
 800d102:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800d104:	4b79      	ldr	r3, [pc, #484]	; (800d2ec <HAL_RCC_GetSysClockFreq+0x200>)
 800d106:	689b      	ldr	r3, [r3, #8]
 800d108:	f003 030c 	and.w	r3, r3, #12
 800d10c:	2b08      	cmp	r3, #8
 800d10e:	d00d      	beq.n	800d12c <HAL_RCC_GetSysClockFreq+0x40>
 800d110:	2b08      	cmp	r3, #8
 800d112:	f200 80e1 	bhi.w	800d2d8 <HAL_RCC_GetSysClockFreq+0x1ec>
 800d116:	2b00      	cmp	r3, #0
 800d118:	d002      	beq.n	800d120 <HAL_RCC_GetSysClockFreq+0x34>
 800d11a:	2b04      	cmp	r3, #4
 800d11c:	d003      	beq.n	800d126 <HAL_RCC_GetSysClockFreq+0x3a>
 800d11e:	e0db      	b.n	800d2d8 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800d120:	4b73      	ldr	r3, [pc, #460]	; (800d2f0 <HAL_RCC_GetSysClockFreq+0x204>)
 800d122:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 800d124:	e0db      	b.n	800d2de <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800d126:	4b73      	ldr	r3, [pc, #460]	; (800d2f4 <HAL_RCC_GetSysClockFreq+0x208>)
 800d128:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800d12a:	e0d8      	b.n	800d2de <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800d12c:	4b6f      	ldr	r3, [pc, #444]	; (800d2ec <HAL_RCC_GetSysClockFreq+0x200>)
 800d12e:	685b      	ldr	r3, [r3, #4]
 800d130:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800d134:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800d136:	4b6d      	ldr	r3, [pc, #436]	; (800d2ec <HAL_RCC_GetSysClockFreq+0x200>)
 800d138:	685b      	ldr	r3, [r3, #4]
 800d13a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800d13e:	2b00      	cmp	r3, #0
 800d140:	d063      	beq.n	800d20a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800d142:	4b6a      	ldr	r3, [pc, #424]	; (800d2ec <HAL_RCC_GetSysClockFreq+0x200>)
 800d144:	685b      	ldr	r3, [r3, #4]
 800d146:	099b      	lsrs	r3, r3, #6
 800d148:	2200      	movs	r2, #0
 800d14a:	63bb      	str	r3, [r7, #56]	; 0x38
 800d14c:	63fa      	str	r2, [r7, #60]	; 0x3c
 800d14e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d150:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d154:	633b      	str	r3, [r7, #48]	; 0x30
 800d156:	2300      	movs	r3, #0
 800d158:	637b      	str	r3, [r7, #52]	; 0x34
 800d15a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800d15e:	4622      	mov	r2, r4
 800d160:	462b      	mov	r3, r5
 800d162:	f04f 0000 	mov.w	r0, #0
 800d166:	f04f 0100 	mov.w	r1, #0
 800d16a:	0159      	lsls	r1, r3, #5
 800d16c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800d170:	0150      	lsls	r0, r2, #5
 800d172:	4602      	mov	r2, r0
 800d174:	460b      	mov	r3, r1
 800d176:	4621      	mov	r1, r4
 800d178:	1a51      	subs	r1, r2, r1
 800d17a:	6139      	str	r1, [r7, #16]
 800d17c:	4629      	mov	r1, r5
 800d17e:	eb63 0301 	sbc.w	r3, r3, r1
 800d182:	617b      	str	r3, [r7, #20]
 800d184:	f04f 0200 	mov.w	r2, #0
 800d188:	f04f 0300 	mov.w	r3, #0
 800d18c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800d190:	4659      	mov	r1, fp
 800d192:	018b      	lsls	r3, r1, #6
 800d194:	4651      	mov	r1, sl
 800d196:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800d19a:	4651      	mov	r1, sl
 800d19c:	018a      	lsls	r2, r1, #6
 800d19e:	4651      	mov	r1, sl
 800d1a0:	ebb2 0801 	subs.w	r8, r2, r1
 800d1a4:	4659      	mov	r1, fp
 800d1a6:	eb63 0901 	sbc.w	r9, r3, r1
 800d1aa:	f04f 0200 	mov.w	r2, #0
 800d1ae:	f04f 0300 	mov.w	r3, #0
 800d1b2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800d1b6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800d1ba:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800d1be:	4690      	mov	r8, r2
 800d1c0:	4699      	mov	r9, r3
 800d1c2:	4623      	mov	r3, r4
 800d1c4:	eb18 0303 	adds.w	r3, r8, r3
 800d1c8:	60bb      	str	r3, [r7, #8]
 800d1ca:	462b      	mov	r3, r5
 800d1cc:	eb49 0303 	adc.w	r3, r9, r3
 800d1d0:	60fb      	str	r3, [r7, #12]
 800d1d2:	f04f 0200 	mov.w	r2, #0
 800d1d6:	f04f 0300 	mov.w	r3, #0
 800d1da:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800d1de:	4629      	mov	r1, r5
 800d1e0:	024b      	lsls	r3, r1, #9
 800d1e2:	4621      	mov	r1, r4
 800d1e4:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800d1e8:	4621      	mov	r1, r4
 800d1ea:	024a      	lsls	r2, r1, #9
 800d1ec:	4610      	mov	r0, r2
 800d1ee:	4619      	mov	r1, r3
 800d1f0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d1f2:	2200      	movs	r2, #0
 800d1f4:	62bb      	str	r3, [r7, #40]	; 0x28
 800d1f6:	62fa      	str	r2, [r7, #44]	; 0x2c
 800d1f8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800d1fc:	f7f3 fa54 	bl	80006a8 <__aeabi_uldivmod>
 800d200:	4602      	mov	r2, r0
 800d202:	460b      	mov	r3, r1
 800d204:	4613      	mov	r3, r2
 800d206:	64fb      	str	r3, [r7, #76]	; 0x4c
 800d208:	e058      	b.n	800d2bc <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800d20a:	4b38      	ldr	r3, [pc, #224]	; (800d2ec <HAL_RCC_GetSysClockFreq+0x200>)
 800d20c:	685b      	ldr	r3, [r3, #4]
 800d20e:	099b      	lsrs	r3, r3, #6
 800d210:	2200      	movs	r2, #0
 800d212:	4618      	mov	r0, r3
 800d214:	4611      	mov	r1, r2
 800d216:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800d21a:	623b      	str	r3, [r7, #32]
 800d21c:	2300      	movs	r3, #0
 800d21e:	627b      	str	r3, [r7, #36]	; 0x24
 800d220:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800d224:	4642      	mov	r2, r8
 800d226:	464b      	mov	r3, r9
 800d228:	f04f 0000 	mov.w	r0, #0
 800d22c:	f04f 0100 	mov.w	r1, #0
 800d230:	0159      	lsls	r1, r3, #5
 800d232:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800d236:	0150      	lsls	r0, r2, #5
 800d238:	4602      	mov	r2, r0
 800d23a:	460b      	mov	r3, r1
 800d23c:	4641      	mov	r1, r8
 800d23e:	ebb2 0a01 	subs.w	sl, r2, r1
 800d242:	4649      	mov	r1, r9
 800d244:	eb63 0b01 	sbc.w	fp, r3, r1
 800d248:	f04f 0200 	mov.w	r2, #0
 800d24c:	f04f 0300 	mov.w	r3, #0
 800d250:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800d254:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800d258:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800d25c:	ebb2 040a 	subs.w	r4, r2, sl
 800d260:	eb63 050b 	sbc.w	r5, r3, fp
 800d264:	f04f 0200 	mov.w	r2, #0
 800d268:	f04f 0300 	mov.w	r3, #0
 800d26c:	00eb      	lsls	r3, r5, #3
 800d26e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800d272:	00e2      	lsls	r2, r4, #3
 800d274:	4614      	mov	r4, r2
 800d276:	461d      	mov	r5, r3
 800d278:	4643      	mov	r3, r8
 800d27a:	18e3      	adds	r3, r4, r3
 800d27c:	603b      	str	r3, [r7, #0]
 800d27e:	464b      	mov	r3, r9
 800d280:	eb45 0303 	adc.w	r3, r5, r3
 800d284:	607b      	str	r3, [r7, #4]
 800d286:	f04f 0200 	mov.w	r2, #0
 800d28a:	f04f 0300 	mov.w	r3, #0
 800d28e:	e9d7 4500 	ldrd	r4, r5, [r7]
 800d292:	4629      	mov	r1, r5
 800d294:	028b      	lsls	r3, r1, #10
 800d296:	4621      	mov	r1, r4
 800d298:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800d29c:	4621      	mov	r1, r4
 800d29e:	028a      	lsls	r2, r1, #10
 800d2a0:	4610      	mov	r0, r2
 800d2a2:	4619      	mov	r1, r3
 800d2a4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d2a6:	2200      	movs	r2, #0
 800d2a8:	61bb      	str	r3, [r7, #24]
 800d2aa:	61fa      	str	r2, [r7, #28]
 800d2ac:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800d2b0:	f7f3 f9fa 	bl	80006a8 <__aeabi_uldivmod>
 800d2b4:	4602      	mov	r2, r0
 800d2b6:	460b      	mov	r3, r1
 800d2b8:	4613      	mov	r3, r2
 800d2ba:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800d2bc:	4b0b      	ldr	r3, [pc, #44]	; (800d2ec <HAL_RCC_GetSysClockFreq+0x200>)
 800d2be:	685b      	ldr	r3, [r3, #4]
 800d2c0:	0c1b      	lsrs	r3, r3, #16
 800d2c2:	f003 0303 	and.w	r3, r3, #3
 800d2c6:	3301      	adds	r3, #1
 800d2c8:	005b      	lsls	r3, r3, #1
 800d2ca:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 800d2cc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800d2ce:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d2d0:	fbb2 f3f3 	udiv	r3, r2, r3
 800d2d4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800d2d6:	e002      	b.n	800d2de <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800d2d8:	4b05      	ldr	r3, [pc, #20]	; (800d2f0 <HAL_RCC_GetSysClockFreq+0x204>)
 800d2da:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800d2dc:	bf00      	nop
    }
  }
  return sysclockfreq;
 800d2de:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 800d2e0:	4618      	mov	r0, r3
 800d2e2:	3750      	adds	r7, #80	; 0x50
 800d2e4:	46bd      	mov	sp, r7
 800d2e6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800d2ea:	bf00      	nop
 800d2ec:	40023800 	.word	0x40023800
 800d2f0:	00f42400 	.word	0x00f42400
 800d2f4:	007a1200 	.word	0x007a1200

0800d2f8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800d2f8:	b480      	push	{r7}
 800d2fa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800d2fc:	4b03      	ldr	r3, [pc, #12]	; (800d30c <HAL_RCC_GetHCLKFreq+0x14>)
 800d2fe:	681b      	ldr	r3, [r3, #0]
}
 800d300:	4618      	mov	r0, r3
 800d302:	46bd      	mov	sp, r7
 800d304:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d308:	4770      	bx	lr
 800d30a:	bf00      	nop
 800d30c:	20000004 	.word	0x20000004

0800d310 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800d310:	b580      	push	{r7, lr}
 800d312:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800d314:	f7ff fff0 	bl	800d2f8 <HAL_RCC_GetHCLKFreq>
 800d318:	4602      	mov	r2, r0
 800d31a:	4b05      	ldr	r3, [pc, #20]	; (800d330 <HAL_RCC_GetPCLK1Freq+0x20>)
 800d31c:	689b      	ldr	r3, [r3, #8]
 800d31e:	0a9b      	lsrs	r3, r3, #10
 800d320:	f003 0307 	and.w	r3, r3, #7
 800d324:	4903      	ldr	r1, [pc, #12]	; (800d334 <HAL_RCC_GetPCLK1Freq+0x24>)
 800d326:	5ccb      	ldrb	r3, [r1, r3]
 800d328:	fa22 f303 	lsr.w	r3, r2, r3
}
 800d32c:	4618      	mov	r0, r3
 800d32e:	bd80      	pop	{r7, pc}
 800d330:	40023800 	.word	0x40023800
 800d334:	080105a4 	.word	0x080105a4

0800d338 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800d338:	b580      	push	{r7, lr}
 800d33a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800d33c:	f7ff ffdc 	bl	800d2f8 <HAL_RCC_GetHCLKFreq>
 800d340:	4602      	mov	r2, r0
 800d342:	4b05      	ldr	r3, [pc, #20]	; (800d358 <HAL_RCC_GetPCLK2Freq+0x20>)
 800d344:	689b      	ldr	r3, [r3, #8]
 800d346:	0b5b      	lsrs	r3, r3, #13
 800d348:	f003 0307 	and.w	r3, r3, #7
 800d34c:	4903      	ldr	r1, [pc, #12]	; (800d35c <HAL_RCC_GetPCLK2Freq+0x24>)
 800d34e:	5ccb      	ldrb	r3, [r1, r3]
 800d350:	fa22 f303 	lsr.w	r3, r2, r3
}
 800d354:	4618      	mov	r0, r3
 800d356:	bd80      	pop	{r7, pc}
 800d358:	40023800 	.word	0x40023800
 800d35c:	080105a4 	.word	0x080105a4

0800d360 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800d360:	b580      	push	{r7, lr}
 800d362:	b082      	sub	sp, #8
 800d364:	af00      	add	r7, sp, #0
 800d366:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800d368:	687b      	ldr	r3, [r7, #4]
 800d36a:	2b00      	cmp	r3, #0
 800d36c:	d101      	bne.n	800d372 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800d36e:	2301      	movs	r3, #1
 800d370:	e07b      	b.n	800d46a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800d372:	687b      	ldr	r3, [r7, #4]
 800d374:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d376:	2b00      	cmp	r3, #0
 800d378:	d108      	bne.n	800d38c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800d37a:	687b      	ldr	r3, [r7, #4]
 800d37c:	685b      	ldr	r3, [r3, #4]
 800d37e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800d382:	d009      	beq.n	800d398 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800d384:	687b      	ldr	r3, [r7, #4]
 800d386:	2200      	movs	r2, #0
 800d388:	61da      	str	r2, [r3, #28]
 800d38a:	e005      	b.n	800d398 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800d38c:	687b      	ldr	r3, [r7, #4]
 800d38e:	2200      	movs	r2, #0
 800d390:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800d392:	687b      	ldr	r3, [r7, #4]
 800d394:	2200      	movs	r2, #0
 800d396:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800d398:	687b      	ldr	r3, [r7, #4]
 800d39a:	2200      	movs	r2, #0
 800d39c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800d39e:	687b      	ldr	r3, [r7, #4]
 800d3a0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800d3a4:	b2db      	uxtb	r3, r3
 800d3a6:	2b00      	cmp	r3, #0
 800d3a8:	d106      	bne.n	800d3b8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800d3aa:	687b      	ldr	r3, [r7, #4]
 800d3ac:	2200      	movs	r2, #0
 800d3ae:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800d3b2:	6878      	ldr	r0, [r7, #4]
 800d3b4:	f000 f85d 	bl	800d472 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800d3b8:	687b      	ldr	r3, [r7, #4]
 800d3ba:	2202      	movs	r2, #2
 800d3bc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800d3c0:	687b      	ldr	r3, [r7, #4]
 800d3c2:	681b      	ldr	r3, [r3, #0]
 800d3c4:	681a      	ldr	r2, [r3, #0]
 800d3c6:	687b      	ldr	r3, [r7, #4]
 800d3c8:	681b      	ldr	r3, [r3, #0]
 800d3ca:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800d3ce:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800d3d0:	687b      	ldr	r3, [r7, #4]
 800d3d2:	685b      	ldr	r3, [r3, #4]
 800d3d4:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800d3d8:	687b      	ldr	r3, [r7, #4]
 800d3da:	689b      	ldr	r3, [r3, #8]
 800d3dc:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800d3e0:	431a      	orrs	r2, r3
 800d3e2:	687b      	ldr	r3, [r7, #4]
 800d3e4:	68db      	ldr	r3, [r3, #12]
 800d3e6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800d3ea:	431a      	orrs	r2, r3
 800d3ec:	687b      	ldr	r3, [r7, #4]
 800d3ee:	691b      	ldr	r3, [r3, #16]
 800d3f0:	f003 0302 	and.w	r3, r3, #2
 800d3f4:	431a      	orrs	r2, r3
 800d3f6:	687b      	ldr	r3, [r7, #4]
 800d3f8:	695b      	ldr	r3, [r3, #20]
 800d3fa:	f003 0301 	and.w	r3, r3, #1
 800d3fe:	431a      	orrs	r2, r3
 800d400:	687b      	ldr	r3, [r7, #4]
 800d402:	699b      	ldr	r3, [r3, #24]
 800d404:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800d408:	431a      	orrs	r2, r3
 800d40a:	687b      	ldr	r3, [r7, #4]
 800d40c:	69db      	ldr	r3, [r3, #28]
 800d40e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800d412:	431a      	orrs	r2, r3
 800d414:	687b      	ldr	r3, [r7, #4]
 800d416:	6a1b      	ldr	r3, [r3, #32]
 800d418:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d41c:	ea42 0103 	orr.w	r1, r2, r3
 800d420:	687b      	ldr	r3, [r7, #4]
 800d422:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d424:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800d428:	687b      	ldr	r3, [r7, #4]
 800d42a:	681b      	ldr	r3, [r3, #0]
 800d42c:	430a      	orrs	r2, r1
 800d42e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800d430:	687b      	ldr	r3, [r7, #4]
 800d432:	699b      	ldr	r3, [r3, #24]
 800d434:	0c1b      	lsrs	r3, r3, #16
 800d436:	f003 0104 	and.w	r1, r3, #4
 800d43a:	687b      	ldr	r3, [r7, #4]
 800d43c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d43e:	f003 0210 	and.w	r2, r3, #16
 800d442:	687b      	ldr	r3, [r7, #4]
 800d444:	681b      	ldr	r3, [r3, #0]
 800d446:	430a      	orrs	r2, r1
 800d448:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800d44a:	687b      	ldr	r3, [r7, #4]
 800d44c:	681b      	ldr	r3, [r3, #0]
 800d44e:	69da      	ldr	r2, [r3, #28]
 800d450:	687b      	ldr	r3, [r7, #4]
 800d452:	681b      	ldr	r3, [r3, #0]
 800d454:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800d458:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800d45a:	687b      	ldr	r3, [r7, #4]
 800d45c:	2200      	movs	r2, #0
 800d45e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800d460:	687b      	ldr	r3, [r7, #4]
 800d462:	2201      	movs	r2, #1
 800d464:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800d468:	2300      	movs	r3, #0
}
 800d46a:	4618      	mov	r0, r3
 800d46c:	3708      	adds	r7, #8
 800d46e:	46bd      	mov	sp, r7
 800d470:	bd80      	pop	{r7, pc}

0800d472 <HAL_SPI_MspInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_MspInit(SPI_HandleTypeDef *hspi)
{
 800d472:	b480      	push	{r7}
 800d474:	b083      	sub	sp, #12
 800d476:	af00      	add	r7, sp, #0
 800d478:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_MspInit should be implemented in the user file
   */
}
 800d47a:	bf00      	nop
 800d47c:	370c      	adds	r7, #12
 800d47e:	46bd      	mov	sp, r7
 800d480:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d484:	4770      	bx	lr

0800d486 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800d486:	b580      	push	{r7, lr}
 800d488:	b08c      	sub	sp, #48	; 0x30
 800d48a:	af00      	add	r7, sp, #0
 800d48c:	60f8      	str	r0, [r7, #12]
 800d48e:	60b9      	str	r1, [r7, #8]
 800d490:	607a      	str	r2, [r7, #4]
 800d492:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800d494:	2301      	movs	r3, #1
 800d496:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800d498:	2300      	movs	r3, #0
 800d49a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800d49e:	68fb      	ldr	r3, [r7, #12]
 800d4a0:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800d4a4:	2b01      	cmp	r3, #1
 800d4a6:	d101      	bne.n	800d4ac <HAL_SPI_TransmitReceive+0x26>
 800d4a8:	2302      	movs	r3, #2
 800d4aa:	e18a      	b.n	800d7c2 <HAL_SPI_TransmitReceive+0x33c>
 800d4ac:	68fb      	ldr	r3, [r7, #12]
 800d4ae:	2201      	movs	r2, #1
 800d4b0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800d4b4:	f7fd fe56 	bl	800b164 <HAL_GetTick>
 800d4b8:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800d4ba:	68fb      	ldr	r3, [r7, #12]
 800d4bc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800d4c0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 800d4c4:	68fb      	ldr	r3, [r7, #12]
 800d4c6:	685b      	ldr	r3, [r3, #4]
 800d4c8:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800d4ca:	887b      	ldrh	r3, [r7, #2]
 800d4cc:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800d4ce:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800d4d2:	2b01      	cmp	r3, #1
 800d4d4:	d00f      	beq.n	800d4f6 <HAL_SPI_TransmitReceive+0x70>
 800d4d6:	69fb      	ldr	r3, [r7, #28]
 800d4d8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800d4dc:	d107      	bne.n	800d4ee <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800d4de:	68fb      	ldr	r3, [r7, #12]
 800d4e0:	689b      	ldr	r3, [r3, #8]
 800d4e2:	2b00      	cmp	r3, #0
 800d4e4:	d103      	bne.n	800d4ee <HAL_SPI_TransmitReceive+0x68>
 800d4e6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800d4ea:	2b04      	cmp	r3, #4
 800d4ec:	d003      	beq.n	800d4f6 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 800d4ee:	2302      	movs	r3, #2
 800d4f0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800d4f4:	e15b      	b.n	800d7ae <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800d4f6:	68bb      	ldr	r3, [r7, #8]
 800d4f8:	2b00      	cmp	r3, #0
 800d4fa:	d005      	beq.n	800d508 <HAL_SPI_TransmitReceive+0x82>
 800d4fc:	687b      	ldr	r3, [r7, #4]
 800d4fe:	2b00      	cmp	r3, #0
 800d500:	d002      	beq.n	800d508 <HAL_SPI_TransmitReceive+0x82>
 800d502:	887b      	ldrh	r3, [r7, #2]
 800d504:	2b00      	cmp	r3, #0
 800d506:	d103      	bne.n	800d510 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800d508:	2301      	movs	r3, #1
 800d50a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800d50e:	e14e      	b.n	800d7ae <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800d510:	68fb      	ldr	r3, [r7, #12]
 800d512:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800d516:	b2db      	uxtb	r3, r3
 800d518:	2b04      	cmp	r3, #4
 800d51a:	d003      	beq.n	800d524 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800d51c:	68fb      	ldr	r3, [r7, #12]
 800d51e:	2205      	movs	r2, #5
 800d520:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800d524:	68fb      	ldr	r3, [r7, #12]
 800d526:	2200      	movs	r2, #0
 800d528:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800d52a:	68fb      	ldr	r3, [r7, #12]
 800d52c:	687a      	ldr	r2, [r7, #4]
 800d52e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800d530:	68fb      	ldr	r3, [r7, #12]
 800d532:	887a      	ldrh	r2, [r7, #2]
 800d534:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800d536:	68fb      	ldr	r3, [r7, #12]
 800d538:	887a      	ldrh	r2, [r7, #2]
 800d53a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800d53c:	68fb      	ldr	r3, [r7, #12]
 800d53e:	68ba      	ldr	r2, [r7, #8]
 800d540:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800d542:	68fb      	ldr	r3, [r7, #12]
 800d544:	887a      	ldrh	r2, [r7, #2]
 800d546:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800d548:	68fb      	ldr	r3, [r7, #12]
 800d54a:	887a      	ldrh	r2, [r7, #2]
 800d54c:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800d54e:	68fb      	ldr	r3, [r7, #12]
 800d550:	2200      	movs	r2, #0
 800d552:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800d554:	68fb      	ldr	r3, [r7, #12]
 800d556:	2200      	movs	r2, #0
 800d558:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800d55a:	68fb      	ldr	r3, [r7, #12]
 800d55c:	681b      	ldr	r3, [r3, #0]
 800d55e:	681b      	ldr	r3, [r3, #0]
 800d560:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d564:	2b40      	cmp	r3, #64	; 0x40
 800d566:	d007      	beq.n	800d578 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800d568:	68fb      	ldr	r3, [r7, #12]
 800d56a:	681b      	ldr	r3, [r3, #0]
 800d56c:	681a      	ldr	r2, [r3, #0]
 800d56e:	68fb      	ldr	r3, [r7, #12]
 800d570:	681b      	ldr	r3, [r3, #0]
 800d572:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800d576:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800d578:	68fb      	ldr	r3, [r7, #12]
 800d57a:	68db      	ldr	r3, [r3, #12]
 800d57c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800d580:	d178      	bne.n	800d674 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800d582:	68fb      	ldr	r3, [r7, #12]
 800d584:	685b      	ldr	r3, [r3, #4]
 800d586:	2b00      	cmp	r3, #0
 800d588:	d002      	beq.n	800d590 <HAL_SPI_TransmitReceive+0x10a>
 800d58a:	8b7b      	ldrh	r3, [r7, #26]
 800d58c:	2b01      	cmp	r3, #1
 800d58e:	d166      	bne.n	800d65e <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800d590:	68fb      	ldr	r3, [r7, #12]
 800d592:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d594:	881a      	ldrh	r2, [r3, #0]
 800d596:	68fb      	ldr	r3, [r7, #12]
 800d598:	681b      	ldr	r3, [r3, #0]
 800d59a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800d59c:	68fb      	ldr	r3, [r7, #12]
 800d59e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d5a0:	1c9a      	adds	r2, r3, #2
 800d5a2:	68fb      	ldr	r3, [r7, #12]
 800d5a4:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800d5a6:	68fb      	ldr	r3, [r7, #12]
 800d5a8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800d5aa:	b29b      	uxth	r3, r3
 800d5ac:	3b01      	subs	r3, #1
 800d5ae:	b29a      	uxth	r2, r3
 800d5b0:	68fb      	ldr	r3, [r7, #12]
 800d5b2:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800d5b4:	e053      	b.n	800d65e <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800d5b6:	68fb      	ldr	r3, [r7, #12]
 800d5b8:	681b      	ldr	r3, [r3, #0]
 800d5ba:	689b      	ldr	r3, [r3, #8]
 800d5bc:	f003 0302 	and.w	r3, r3, #2
 800d5c0:	2b02      	cmp	r3, #2
 800d5c2:	d11b      	bne.n	800d5fc <HAL_SPI_TransmitReceive+0x176>
 800d5c4:	68fb      	ldr	r3, [r7, #12]
 800d5c6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800d5c8:	b29b      	uxth	r3, r3
 800d5ca:	2b00      	cmp	r3, #0
 800d5cc:	d016      	beq.n	800d5fc <HAL_SPI_TransmitReceive+0x176>
 800d5ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d5d0:	2b01      	cmp	r3, #1
 800d5d2:	d113      	bne.n	800d5fc <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800d5d4:	68fb      	ldr	r3, [r7, #12]
 800d5d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d5d8:	881a      	ldrh	r2, [r3, #0]
 800d5da:	68fb      	ldr	r3, [r7, #12]
 800d5dc:	681b      	ldr	r3, [r3, #0]
 800d5de:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800d5e0:	68fb      	ldr	r3, [r7, #12]
 800d5e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d5e4:	1c9a      	adds	r2, r3, #2
 800d5e6:	68fb      	ldr	r3, [r7, #12]
 800d5e8:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800d5ea:	68fb      	ldr	r3, [r7, #12]
 800d5ec:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800d5ee:	b29b      	uxth	r3, r3
 800d5f0:	3b01      	subs	r3, #1
 800d5f2:	b29a      	uxth	r2, r3
 800d5f4:	68fb      	ldr	r3, [r7, #12]
 800d5f6:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800d5f8:	2300      	movs	r3, #0
 800d5fa:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800d5fc:	68fb      	ldr	r3, [r7, #12]
 800d5fe:	681b      	ldr	r3, [r3, #0]
 800d600:	689b      	ldr	r3, [r3, #8]
 800d602:	f003 0301 	and.w	r3, r3, #1
 800d606:	2b01      	cmp	r3, #1
 800d608:	d119      	bne.n	800d63e <HAL_SPI_TransmitReceive+0x1b8>
 800d60a:	68fb      	ldr	r3, [r7, #12]
 800d60c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800d60e:	b29b      	uxth	r3, r3
 800d610:	2b00      	cmp	r3, #0
 800d612:	d014      	beq.n	800d63e <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800d614:	68fb      	ldr	r3, [r7, #12]
 800d616:	681b      	ldr	r3, [r3, #0]
 800d618:	68da      	ldr	r2, [r3, #12]
 800d61a:	68fb      	ldr	r3, [r7, #12]
 800d61c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d61e:	b292      	uxth	r2, r2
 800d620:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800d622:	68fb      	ldr	r3, [r7, #12]
 800d624:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d626:	1c9a      	adds	r2, r3, #2
 800d628:	68fb      	ldr	r3, [r7, #12]
 800d62a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800d62c:	68fb      	ldr	r3, [r7, #12]
 800d62e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800d630:	b29b      	uxth	r3, r3
 800d632:	3b01      	subs	r3, #1
 800d634:	b29a      	uxth	r2, r3
 800d636:	68fb      	ldr	r3, [r7, #12]
 800d638:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800d63a:	2301      	movs	r3, #1
 800d63c:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800d63e:	f7fd fd91 	bl	800b164 <HAL_GetTick>
 800d642:	4602      	mov	r2, r0
 800d644:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d646:	1ad3      	subs	r3, r2, r3
 800d648:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d64a:	429a      	cmp	r2, r3
 800d64c:	d807      	bhi.n	800d65e <HAL_SPI_TransmitReceive+0x1d8>
 800d64e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d650:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d654:	d003      	beq.n	800d65e <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 800d656:	2303      	movs	r3, #3
 800d658:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800d65c:	e0a7      	b.n	800d7ae <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800d65e:	68fb      	ldr	r3, [r7, #12]
 800d660:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800d662:	b29b      	uxth	r3, r3
 800d664:	2b00      	cmp	r3, #0
 800d666:	d1a6      	bne.n	800d5b6 <HAL_SPI_TransmitReceive+0x130>
 800d668:	68fb      	ldr	r3, [r7, #12]
 800d66a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800d66c:	b29b      	uxth	r3, r3
 800d66e:	2b00      	cmp	r3, #0
 800d670:	d1a1      	bne.n	800d5b6 <HAL_SPI_TransmitReceive+0x130>
 800d672:	e07c      	b.n	800d76e <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800d674:	68fb      	ldr	r3, [r7, #12]
 800d676:	685b      	ldr	r3, [r3, #4]
 800d678:	2b00      	cmp	r3, #0
 800d67a:	d002      	beq.n	800d682 <HAL_SPI_TransmitReceive+0x1fc>
 800d67c:	8b7b      	ldrh	r3, [r7, #26]
 800d67e:	2b01      	cmp	r3, #1
 800d680:	d16b      	bne.n	800d75a <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800d682:	68fb      	ldr	r3, [r7, #12]
 800d684:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800d686:	68fb      	ldr	r3, [r7, #12]
 800d688:	681b      	ldr	r3, [r3, #0]
 800d68a:	330c      	adds	r3, #12
 800d68c:	7812      	ldrb	r2, [r2, #0]
 800d68e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800d690:	68fb      	ldr	r3, [r7, #12]
 800d692:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d694:	1c5a      	adds	r2, r3, #1
 800d696:	68fb      	ldr	r3, [r7, #12]
 800d698:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800d69a:	68fb      	ldr	r3, [r7, #12]
 800d69c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800d69e:	b29b      	uxth	r3, r3
 800d6a0:	3b01      	subs	r3, #1
 800d6a2:	b29a      	uxth	r2, r3
 800d6a4:	68fb      	ldr	r3, [r7, #12]
 800d6a6:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800d6a8:	e057      	b.n	800d75a <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800d6aa:	68fb      	ldr	r3, [r7, #12]
 800d6ac:	681b      	ldr	r3, [r3, #0]
 800d6ae:	689b      	ldr	r3, [r3, #8]
 800d6b0:	f003 0302 	and.w	r3, r3, #2
 800d6b4:	2b02      	cmp	r3, #2
 800d6b6:	d11c      	bne.n	800d6f2 <HAL_SPI_TransmitReceive+0x26c>
 800d6b8:	68fb      	ldr	r3, [r7, #12]
 800d6ba:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800d6bc:	b29b      	uxth	r3, r3
 800d6be:	2b00      	cmp	r3, #0
 800d6c0:	d017      	beq.n	800d6f2 <HAL_SPI_TransmitReceive+0x26c>
 800d6c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d6c4:	2b01      	cmp	r3, #1
 800d6c6:	d114      	bne.n	800d6f2 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800d6c8:	68fb      	ldr	r3, [r7, #12]
 800d6ca:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800d6cc:	68fb      	ldr	r3, [r7, #12]
 800d6ce:	681b      	ldr	r3, [r3, #0]
 800d6d0:	330c      	adds	r3, #12
 800d6d2:	7812      	ldrb	r2, [r2, #0]
 800d6d4:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800d6d6:	68fb      	ldr	r3, [r7, #12]
 800d6d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d6da:	1c5a      	adds	r2, r3, #1
 800d6dc:	68fb      	ldr	r3, [r7, #12]
 800d6de:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800d6e0:	68fb      	ldr	r3, [r7, #12]
 800d6e2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800d6e4:	b29b      	uxth	r3, r3
 800d6e6:	3b01      	subs	r3, #1
 800d6e8:	b29a      	uxth	r2, r3
 800d6ea:	68fb      	ldr	r3, [r7, #12]
 800d6ec:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800d6ee:	2300      	movs	r3, #0
 800d6f0:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800d6f2:	68fb      	ldr	r3, [r7, #12]
 800d6f4:	681b      	ldr	r3, [r3, #0]
 800d6f6:	689b      	ldr	r3, [r3, #8]
 800d6f8:	f003 0301 	and.w	r3, r3, #1
 800d6fc:	2b01      	cmp	r3, #1
 800d6fe:	d119      	bne.n	800d734 <HAL_SPI_TransmitReceive+0x2ae>
 800d700:	68fb      	ldr	r3, [r7, #12]
 800d702:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800d704:	b29b      	uxth	r3, r3
 800d706:	2b00      	cmp	r3, #0
 800d708:	d014      	beq.n	800d734 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800d70a:	68fb      	ldr	r3, [r7, #12]
 800d70c:	681b      	ldr	r3, [r3, #0]
 800d70e:	68da      	ldr	r2, [r3, #12]
 800d710:	68fb      	ldr	r3, [r7, #12]
 800d712:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d714:	b2d2      	uxtb	r2, r2
 800d716:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800d718:	68fb      	ldr	r3, [r7, #12]
 800d71a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d71c:	1c5a      	adds	r2, r3, #1
 800d71e:	68fb      	ldr	r3, [r7, #12]
 800d720:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800d722:	68fb      	ldr	r3, [r7, #12]
 800d724:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800d726:	b29b      	uxth	r3, r3
 800d728:	3b01      	subs	r3, #1
 800d72a:	b29a      	uxth	r2, r3
 800d72c:	68fb      	ldr	r3, [r7, #12]
 800d72e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800d730:	2301      	movs	r3, #1
 800d732:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800d734:	f7fd fd16 	bl	800b164 <HAL_GetTick>
 800d738:	4602      	mov	r2, r0
 800d73a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d73c:	1ad3      	subs	r3, r2, r3
 800d73e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d740:	429a      	cmp	r2, r3
 800d742:	d803      	bhi.n	800d74c <HAL_SPI_TransmitReceive+0x2c6>
 800d744:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d746:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d74a:	d102      	bne.n	800d752 <HAL_SPI_TransmitReceive+0x2cc>
 800d74c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d74e:	2b00      	cmp	r3, #0
 800d750:	d103      	bne.n	800d75a <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 800d752:	2303      	movs	r3, #3
 800d754:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800d758:	e029      	b.n	800d7ae <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800d75a:	68fb      	ldr	r3, [r7, #12]
 800d75c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800d75e:	b29b      	uxth	r3, r3
 800d760:	2b00      	cmp	r3, #0
 800d762:	d1a2      	bne.n	800d6aa <HAL_SPI_TransmitReceive+0x224>
 800d764:	68fb      	ldr	r3, [r7, #12]
 800d766:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800d768:	b29b      	uxth	r3, r3
 800d76a:	2b00      	cmp	r3, #0
 800d76c:	d19d      	bne.n	800d6aa <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800d76e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d770:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800d772:	68f8      	ldr	r0, [r7, #12]
 800d774:	f000 f8c0 	bl	800d8f8 <SPI_EndRxTxTransaction>
 800d778:	4603      	mov	r3, r0
 800d77a:	2b00      	cmp	r3, #0
 800d77c:	d006      	beq.n	800d78c <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 800d77e:	2301      	movs	r3, #1
 800d780:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800d784:	68fb      	ldr	r3, [r7, #12]
 800d786:	2220      	movs	r2, #32
 800d788:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800d78a:	e010      	b.n	800d7ae <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800d78c:	68fb      	ldr	r3, [r7, #12]
 800d78e:	689b      	ldr	r3, [r3, #8]
 800d790:	2b00      	cmp	r3, #0
 800d792:	d10b      	bne.n	800d7ac <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800d794:	2300      	movs	r3, #0
 800d796:	617b      	str	r3, [r7, #20]
 800d798:	68fb      	ldr	r3, [r7, #12]
 800d79a:	681b      	ldr	r3, [r3, #0]
 800d79c:	68db      	ldr	r3, [r3, #12]
 800d79e:	617b      	str	r3, [r7, #20]
 800d7a0:	68fb      	ldr	r3, [r7, #12]
 800d7a2:	681b      	ldr	r3, [r3, #0]
 800d7a4:	689b      	ldr	r3, [r3, #8]
 800d7a6:	617b      	str	r3, [r7, #20]
 800d7a8:	697b      	ldr	r3, [r7, #20]
 800d7aa:	e000      	b.n	800d7ae <HAL_SPI_TransmitReceive+0x328>
  }

error :
 800d7ac:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800d7ae:	68fb      	ldr	r3, [r7, #12]
 800d7b0:	2201      	movs	r2, #1
 800d7b2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800d7b6:	68fb      	ldr	r3, [r7, #12]
 800d7b8:	2200      	movs	r2, #0
 800d7ba:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800d7be:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800d7c2:	4618      	mov	r0, r3
 800d7c4:	3730      	adds	r7, #48	; 0x30
 800d7c6:	46bd      	mov	sp, r7
 800d7c8:	bd80      	pop	{r7, pc}

0800d7ca <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 800d7ca:	b480      	push	{r7}
 800d7cc:	b083      	sub	sp, #12
 800d7ce:	af00      	add	r7, sp, #0
 800d7d0:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 800d7d2:	687b      	ldr	r3, [r7, #4]
 800d7d4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800d7d8:	b2db      	uxtb	r3, r3
}
 800d7da:	4618      	mov	r0, r3
 800d7dc:	370c      	adds	r7, #12
 800d7de:	46bd      	mov	sp, r7
 800d7e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7e4:	4770      	bx	lr
	...

0800d7e8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800d7e8:	b580      	push	{r7, lr}
 800d7ea:	b088      	sub	sp, #32
 800d7ec:	af00      	add	r7, sp, #0
 800d7ee:	60f8      	str	r0, [r7, #12]
 800d7f0:	60b9      	str	r1, [r7, #8]
 800d7f2:	603b      	str	r3, [r7, #0]
 800d7f4:	4613      	mov	r3, r2
 800d7f6:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800d7f8:	f7fd fcb4 	bl	800b164 <HAL_GetTick>
 800d7fc:	4602      	mov	r2, r0
 800d7fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d800:	1a9b      	subs	r3, r3, r2
 800d802:	683a      	ldr	r2, [r7, #0]
 800d804:	4413      	add	r3, r2
 800d806:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800d808:	f7fd fcac 	bl	800b164 <HAL_GetTick>
 800d80c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800d80e:	4b39      	ldr	r3, [pc, #228]	; (800d8f4 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800d810:	681b      	ldr	r3, [r3, #0]
 800d812:	015b      	lsls	r3, r3, #5
 800d814:	0d1b      	lsrs	r3, r3, #20
 800d816:	69fa      	ldr	r2, [r7, #28]
 800d818:	fb02 f303 	mul.w	r3, r2, r3
 800d81c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800d81e:	e054      	b.n	800d8ca <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800d820:	683b      	ldr	r3, [r7, #0]
 800d822:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d826:	d050      	beq.n	800d8ca <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800d828:	f7fd fc9c 	bl	800b164 <HAL_GetTick>
 800d82c:	4602      	mov	r2, r0
 800d82e:	69bb      	ldr	r3, [r7, #24]
 800d830:	1ad3      	subs	r3, r2, r3
 800d832:	69fa      	ldr	r2, [r7, #28]
 800d834:	429a      	cmp	r2, r3
 800d836:	d902      	bls.n	800d83e <SPI_WaitFlagStateUntilTimeout+0x56>
 800d838:	69fb      	ldr	r3, [r7, #28]
 800d83a:	2b00      	cmp	r3, #0
 800d83c:	d13d      	bne.n	800d8ba <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800d83e:	68fb      	ldr	r3, [r7, #12]
 800d840:	681b      	ldr	r3, [r3, #0]
 800d842:	685a      	ldr	r2, [r3, #4]
 800d844:	68fb      	ldr	r3, [r7, #12]
 800d846:	681b      	ldr	r3, [r3, #0]
 800d848:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800d84c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800d84e:	68fb      	ldr	r3, [r7, #12]
 800d850:	685b      	ldr	r3, [r3, #4]
 800d852:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800d856:	d111      	bne.n	800d87c <SPI_WaitFlagStateUntilTimeout+0x94>
 800d858:	68fb      	ldr	r3, [r7, #12]
 800d85a:	689b      	ldr	r3, [r3, #8]
 800d85c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800d860:	d004      	beq.n	800d86c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800d862:	68fb      	ldr	r3, [r7, #12]
 800d864:	689b      	ldr	r3, [r3, #8]
 800d866:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800d86a:	d107      	bne.n	800d87c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800d86c:	68fb      	ldr	r3, [r7, #12]
 800d86e:	681b      	ldr	r3, [r3, #0]
 800d870:	681a      	ldr	r2, [r3, #0]
 800d872:	68fb      	ldr	r3, [r7, #12]
 800d874:	681b      	ldr	r3, [r3, #0]
 800d876:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800d87a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800d87c:	68fb      	ldr	r3, [r7, #12]
 800d87e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d880:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800d884:	d10f      	bne.n	800d8a6 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800d886:	68fb      	ldr	r3, [r7, #12]
 800d888:	681b      	ldr	r3, [r3, #0]
 800d88a:	681a      	ldr	r2, [r3, #0]
 800d88c:	68fb      	ldr	r3, [r7, #12]
 800d88e:	681b      	ldr	r3, [r3, #0]
 800d890:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800d894:	601a      	str	r2, [r3, #0]
 800d896:	68fb      	ldr	r3, [r7, #12]
 800d898:	681b      	ldr	r3, [r3, #0]
 800d89a:	681a      	ldr	r2, [r3, #0]
 800d89c:	68fb      	ldr	r3, [r7, #12]
 800d89e:	681b      	ldr	r3, [r3, #0]
 800d8a0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800d8a4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800d8a6:	68fb      	ldr	r3, [r7, #12]
 800d8a8:	2201      	movs	r2, #1
 800d8aa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800d8ae:	68fb      	ldr	r3, [r7, #12]
 800d8b0:	2200      	movs	r2, #0
 800d8b2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800d8b6:	2303      	movs	r3, #3
 800d8b8:	e017      	b.n	800d8ea <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800d8ba:	697b      	ldr	r3, [r7, #20]
 800d8bc:	2b00      	cmp	r3, #0
 800d8be:	d101      	bne.n	800d8c4 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800d8c0:	2300      	movs	r3, #0
 800d8c2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800d8c4:	697b      	ldr	r3, [r7, #20]
 800d8c6:	3b01      	subs	r3, #1
 800d8c8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800d8ca:	68fb      	ldr	r3, [r7, #12]
 800d8cc:	681b      	ldr	r3, [r3, #0]
 800d8ce:	689a      	ldr	r2, [r3, #8]
 800d8d0:	68bb      	ldr	r3, [r7, #8]
 800d8d2:	4013      	ands	r3, r2
 800d8d4:	68ba      	ldr	r2, [r7, #8]
 800d8d6:	429a      	cmp	r2, r3
 800d8d8:	bf0c      	ite	eq
 800d8da:	2301      	moveq	r3, #1
 800d8dc:	2300      	movne	r3, #0
 800d8de:	b2db      	uxtb	r3, r3
 800d8e0:	461a      	mov	r2, r3
 800d8e2:	79fb      	ldrb	r3, [r7, #7]
 800d8e4:	429a      	cmp	r2, r3
 800d8e6:	d19b      	bne.n	800d820 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800d8e8:	2300      	movs	r3, #0
}
 800d8ea:	4618      	mov	r0, r3
 800d8ec:	3720      	adds	r7, #32
 800d8ee:	46bd      	mov	sp, r7
 800d8f0:	bd80      	pop	{r7, pc}
 800d8f2:	bf00      	nop
 800d8f4:	20000004 	.word	0x20000004

0800d8f8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800d8f8:	b580      	push	{r7, lr}
 800d8fa:	b088      	sub	sp, #32
 800d8fc:	af02      	add	r7, sp, #8
 800d8fe:	60f8      	str	r0, [r7, #12]
 800d900:	60b9      	str	r1, [r7, #8]
 800d902:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800d904:	4b1b      	ldr	r3, [pc, #108]	; (800d974 <SPI_EndRxTxTransaction+0x7c>)
 800d906:	681b      	ldr	r3, [r3, #0]
 800d908:	4a1b      	ldr	r2, [pc, #108]	; (800d978 <SPI_EndRxTxTransaction+0x80>)
 800d90a:	fba2 2303 	umull	r2, r3, r2, r3
 800d90e:	0d5b      	lsrs	r3, r3, #21
 800d910:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800d914:	fb02 f303 	mul.w	r3, r2, r3
 800d918:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800d91a:	68fb      	ldr	r3, [r7, #12]
 800d91c:	685b      	ldr	r3, [r3, #4]
 800d91e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800d922:	d112      	bne.n	800d94a <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800d924:	687b      	ldr	r3, [r7, #4]
 800d926:	9300      	str	r3, [sp, #0]
 800d928:	68bb      	ldr	r3, [r7, #8]
 800d92a:	2200      	movs	r2, #0
 800d92c:	2180      	movs	r1, #128	; 0x80
 800d92e:	68f8      	ldr	r0, [r7, #12]
 800d930:	f7ff ff5a 	bl	800d7e8 <SPI_WaitFlagStateUntilTimeout>
 800d934:	4603      	mov	r3, r0
 800d936:	2b00      	cmp	r3, #0
 800d938:	d016      	beq.n	800d968 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800d93a:	68fb      	ldr	r3, [r7, #12]
 800d93c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d93e:	f043 0220 	orr.w	r2, r3, #32
 800d942:	68fb      	ldr	r3, [r7, #12]
 800d944:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800d946:	2303      	movs	r3, #3
 800d948:	e00f      	b.n	800d96a <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800d94a:	697b      	ldr	r3, [r7, #20]
 800d94c:	2b00      	cmp	r3, #0
 800d94e:	d00a      	beq.n	800d966 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 800d950:	697b      	ldr	r3, [r7, #20]
 800d952:	3b01      	subs	r3, #1
 800d954:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800d956:	68fb      	ldr	r3, [r7, #12]
 800d958:	681b      	ldr	r3, [r3, #0]
 800d95a:	689b      	ldr	r3, [r3, #8]
 800d95c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d960:	2b80      	cmp	r3, #128	; 0x80
 800d962:	d0f2      	beq.n	800d94a <SPI_EndRxTxTransaction+0x52>
 800d964:	e000      	b.n	800d968 <SPI_EndRxTxTransaction+0x70>
        break;
 800d966:	bf00      	nop
  }

  return HAL_OK;
 800d968:	2300      	movs	r3, #0
}
 800d96a:	4618      	mov	r0, r3
 800d96c:	3718      	adds	r7, #24
 800d96e:	46bd      	mov	sp, r7
 800d970:	bd80      	pop	{r7, pc}
 800d972:	bf00      	nop
 800d974:	20000004 	.word	0x20000004
 800d978:	165e9f81 	.word	0x165e9f81

0800d97c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800d97c:	b580      	push	{r7, lr}
 800d97e:	b082      	sub	sp, #8
 800d980:	af00      	add	r7, sp, #0
 800d982:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800d984:	687b      	ldr	r3, [r7, #4]
 800d986:	2b00      	cmp	r3, #0
 800d988:	d101      	bne.n	800d98e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800d98a:	2301      	movs	r3, #1
 800d98c:	e03f      	b.n	800da0e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800d98e:	687b      	ldr	r3, [r7, #4]
 800d990:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800d994:	b2db      	uxtb	r3, r3
 800d996:	2b00      	cmp	r3, #0
 800d998:	d106      	bne.n	800d9a8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800d99a:	687b      	ldr	r3, [r7, #4]
 800d99c:	2200      	movs	r2, #0
 800d99e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800d9a2:	6878      	ldr	r0, [r7, #4]
 800d9a4:	f000 f837 	bl	800da16 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800d9a8:	687b      	ldr	r3, [r7, #4]
 800d9aa:	2224      	movs	r2, #36	; 0x24
 800d9ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800d9b0:	687b      	ldr	r3, [r7, #4]
 800d9b2:	681b      	ldr	r3, [r3, #0]
 800d9b4:	68da      	ldr	r2, [r3, #12]
 800d9b6:	687b      	ldr	r3, [r7, #4]
 800d9b8:	681b      	ldr	r3, [r3, #0]
 800d9ba:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800d9be:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800d9c0:	6878      	ldr	r0, [r7, #4]
 800d9c2:	f000 f933 	bl	800dc2c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800d9c6:	687b      	ldr	r3, [r7, #4]
 800d9c8:	681b      	ldr	r3, [r3, #0]
 800d9ca:	691a      	ldr	r2, [r3, #16]
 800d9cc:	687b      	ldr	r3, [r7, #4]
 800d9ce:	681b      	ldr	r3, [r3, #0]
 800d9d0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800d9d4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800d9d6:	687b      	ldr	r3, [r7, #4]
 800d9d8:	681b      	ldr	r3, [r3, #0]
 800d9da:	695a      	ldr	r2, [r3, #20]
 800d9dc:	687b      	ldr	r3, [r7, #4]
 800d9de:	681b      	ldr	r3, [r3, #0]
 800d9e0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800d9e4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800d9e6:	687b      	ldr	r3, [r7, #4]
 800d9e8:	681b      	ldr	r3, [r3, #0]
 800d9ea:	68da      	ldr	r2, [r3, #12]
 800d9ec:	687b      	ldr	r3, [r7, #4]
 800d9ee:	681b      	ldr	r3, [r3, #0]
 800d9f0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800d9f4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d9f6:	687b      	ldr	r3, [r7, #4]
 800d9f8:	2200      	movs	r2, #0
 800d9fa:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800d9fc:	687b      	ldr	r3, [r7, #4]
 800d9fe:	2220      	movs	r2, #32
 800da00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800da04:	687b      	ldr	r3, [r7, #4]
 800da06:	2220      	movs	r2, #32
 800da08:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800da0c:	2300      	movs	r3, #0
}
 800da0e:	4618      	mov	r0, r3
 800da10:	3708      	adds	r7, #8
 800da12:	46bd      	mov	sp, r7
 800da14:	bd80      	pop	{r7, pc}

0800da16 <HAL_UART_MspInit>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 800da16:	b480      	push	{r7}
 800da18:	b083      	sub	sp, #12
 800da1a:	af00      	add	r7, sp, #0
 800da1c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_MspInit could be implemented in the user file
   */
}
 800da1e:	bf00      	nop
 800da20:	370c      	adds	r7, #12
 800da22:	46bd      	mov	sp, r7
 800da24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da28:	4770      	bx	lr

0800da2a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800da2a:	b580      	push	{r7, lr}
 800da2c:	b08a      	sub	sp, #40	; 0x28
 800da2e:	af02      	add	r7, sp, #8
 800da30:	60f8      	str	r0, [r7, #12]
 800da32:	60b9      	str	r1, [r7, #8]
 800da34:	603b      	str	r3, [r7, #0]
 800da36:	4613      	mov	r3, r2
 800da38:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800da3a:	2300      	movs	r3, #0
 800da3c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800da3e:	68fb      	ldr	r3, [r7, #12]
 800da40:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800da44:	b2db      	uxtb	r3, r3
 800da46:	2b20      	cmp	r3, #32
 800da48:	d17c      	bne.n	800db44 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800da4a:	68bb      	ldr	r3, [r7, #8]
 800da4c:	2b00      	cmp	r3, #0
 800da4e:	d002      	beq.n	800da56 <HAL_UART_Transmit+0x2c>
 800da50:	88fb      	ldrh	r3, [r7, #6]
 800da52:	2b00      	cmp	r3, #0
 800da54:	d101      	bne.n	800da5a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800da56:	2301      	movs	r3, #1
 800da58:	e075      	b.n	800db46 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800da5a:	68fb      	ldr	r3, [r7, #12]
 800da5c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800da60:	2b01      	cmp	r3, #1
 800da62:	d101      	bne.n	800da68 <HAL_UART_Transmit+0x3e>
 800da64:	2302      	movs	r3, #2
 800da66:	e06e      	b.n	800db46 <HAL_UART_Transmit+0x11c>
 800da68:	68fb      	ldr	r3, [r7, #12]
 800da6a:	2201      	movs	r2, #1
 800da6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800da70:	68fb      	ldr	r3, [r7, #12]
 800da72:	2200      	movs	r2, #0
 800da74:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800da76:	68fb      	ldr	r3, [r7, #12]
 800da78:	2221      	movs	r2, #33	; 0x21
 800da7a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800da7e:	f7fd fb71 	bl	800b164 <HAL_GetTick>
 800da82:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800da84:	68fb      	ldr	r3, [r7, #12]
 800da86:	88fa      	ldrh	r2, [r7, #6]
 800da88:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800da8a:	68fb      	ldr	r3, [r7, #12]
 800da8c:	88fa      	ldrh	r2, [r7, #6]
 800da8e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800da90:	68fb      	ldr	r3, [r7, #12]
 800da92:	689b      	ldr	r3, [r3, #8]
 800da94:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800da98:	d108      	bne.n	800daac <HAL_UART_Transmit+0x82>
 800da9a:	68fb      	ldr	r3, [r7, #12]
 800da9c:	691b      	ldr	r3, [r3, #16]
 800da9e:	2b00      	cmp	r3, #0
 800daa0:	d104      	bne.n	800daac <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800daa2:	2300      	movs	r3, #0
 800daa4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800daa6:	68bb      	ldr	r3, [r7, #8]
 800daa8:	61bb      	str	r3, [r7, #24]
 800daaa:	e003      	b.n	800dab4 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800daac:	68bb      	ldr	r3, [r7, #8]
 800daae:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800dab0:	2300      	movs	r3, #0
 800dab2:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800dab4:	68fb      	ldr	r3, [r7, #12]
 800dab6:	2200      	movs	r2, #0
 800dab8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800dabc:	e02a      	b.n	800db14 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800dabe:	683b      	ldr	r3, [r7, #0]
 800dac0:	9300      	str	r3, [sp, #0]
 800dac2:	697b      	ldr	r3, [r7, #20]
 800dac4:	2200      	movs	r2, #0
 800dac6:	2180      	movs	r1, #128	; 0x80
 800dac8:	68f8      	ldr	r0, [r7, #12]
 800daca:	f000 f840 	bl	800db4e <UART_WaitOnFlagUntilTimeout>
 800dace:	4603      	mov	r3, r0
 800dad0:	2b00      	cmp	r3, #0
 800dad2:	d001      	beq.n	800dad8 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800dad4:	2303      	movs	r3, #3
 800dad6:	e036      	b.n	800db46 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800dad8:	69fb      	ldr	r3, [r7, #28]
 800dada:	2b00      	cmp	r3, #0
 800dadc:	d10b      	bne.n	800daf6 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800dade:	69bb      	ldr	r3, [r7, #24]
 800dae0:	881b      	ldrh	r3, [r3, #0]
 800dae2:	461a      	mov	r2, r3
 800dae4:	68fb      	ldr	r3, [r7, #12]
 800dae6:	681b      	ldr	r3, [r3, #0]
 800dae8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800daec:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800daee:	69bb      	ldr	r3, [r7, #24]
 800daf0:	3302      	adds	r3, #2
 800daf2:	61bb      	str	r3, [r7, #24]
 800daf4:	e007      	b.n	800db06 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800daf6:	69fb      	ldr	r3, [r7, #28]
 800daf8:	781a      	ldrb	r2, [r3, #0]
 800dafa:	68fb      	ldr	r3, [r7, #12]
 800dafc:	681b      	ldr	r3, [r3, #0]
 800dafe:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800db00:	69fb      	ldr	r3, [r7, #28]
 800db02:	3301      	adds	r3, #1
 800db04:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800db06:	68fb      	ldr	r3, [r7, #12]
 800db08:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800db0a:	b29b      	uxth	r3, r3
 800db0c:	3b01      	subs	r3, #1
 800db0e:	b29a      	uxth	r2, r3
 800db10:	68fb      	ldr	r3, [r7, #12]
 800db12:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800db14:	68fb      	ldr	r3, [r7, #12]
 800db16:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800db18:	b29b      	uxth	r3, r3
 800db1a:	2b00      	cmp	r3, #0
 800db1c:	d1cf      	bne.n	800dabe <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800db1e:	683b      	ldr	r3, [r7, #0]
 800db20:	9300      	str	r3, [sp, #0]
 800db22:	697b      	ldr	r3, [r7, #20]
 800db24:	2200      	movs	r2, #0
 800db26:	2140      	movs	r1, #64	; 0x40
 800db28:	68f8      	ldr	r0, [r7, #12]
 800db2a:	f000 f810 	bl	800db4e <UART_WaitOnFlagUntilTimeout>
 800db2e:	4603      	mov	r3, r0
 800db30:	2b00      	cmp	r3, #0
 800db32:	d001      	beq.n	800db38 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800db34:	2303      	movs	r3, #3
 800db36:	e006      	b.n	800db46 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800db38:	68fb      	ldr	r3, [r7, #12]
 800db3a:	2220      	movs	r2, #32
 800db3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800db40:	2300      	movs	r3, #0
 800db42:	e000      	b.n	800db46 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800db44:	2302      	movs	r3, #2
  }
}
 800db46:	4618      	mov	r0, r3
 800db48:	3720      	adds	r7, #32
 800db4a:	46bd      	mov	sp, r7
 800db4c:	bd80      	pop	{r7, pc}

0800db4e <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800db4e:	b580      	push	{r7, lr}
 800db50:	b090      	sub	sp, #64	; 0x40
 800db52:	af00      	add	r7, sp, #0
 800db54:	60f8      	str	r0, [r7, #12]
 800db56:	60b9      	str	r1, [r7, #8]
 800db58:	603b      	str	r3, [r7, #0]
 800db5a:	4613      	mov	r3, r2
 800db5c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800db5e:	e050      	b.n	800dc02 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800db60:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800db62:	f1b3 3fff 	cmp.w	r3, #4294967295
 800db66:	d04c      	beq.n	800dc02 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800db68:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800db6a:	2b00      	cmp	r3, #0
 800db6c:	d007      	beq.n	800db7e <UART_WaitOnFlagUntilTimeout+0x30>
 800db6e:	f7fd faf9 	bl	800b164 <HAL_GetTick>
 800db72:	4602      	mov	r2, r0
 800db74:	683b      	ldr	r3, [r7, #0]
 800db76:	1ad3      	subs	r3, r2, r3
 800db78:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800db7a:	429a      	cmp	r2, r3
 800db7c:	d241      	bcs.n	800dc02 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800db7e:	68fb      	ldr	r3, [r7, #12]
 800db80:	681b      	ldr	r3, [r3, #0]
 800db82:	330c      	adds	r3, #12
 800db84:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800db86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800db88:	e853 3f00 	ldrex	r3, [r3]
 800db8c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800db8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800db90:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800db94:	63fb      	str	r3, [r7, #60]	; 0x3c
 800db96:	68fb      	ldr	r3, [r7, #12]
 800db98:	681b      	ldr	r3, [r3, #0]
 800db9a:	330c      	adds	r3, #12
 800db9c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800db9e:	637a      	str	r2, [r7, #52]	; 0x34
 800dba0:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dba2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800dba4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800dba6:	e841 2300 	strex	r3, r2, [r1]
 800dbaa:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800dbac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dbae:	2b00      	cmp	r3, #0
 800dbb0:	d1e5      	bne.n	800db7e <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800dbb2:	68fb      	ldr	r3, [r7, #12]
 800dbb4:	681b      	ldr	r3, [r3, #0]
 800dbb6:	3314      	adds	r3, #20
 800dbb8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dbba:	697b      	ldr	r3, [r7, #20]
 800dbbc:	e853 3f00 	ldrex	r3, [r3]
 800dbc0:	613b      	str	r3, [r7, #16]
   return(result);
 800dbc2:	693b      	ldr	r3, [r7, #16]
 800dbc4:	f023 0301 	bic.w	r3, r3, #1
 800dbc8:	63bb      	str	r3, [r7, #56]	; 0x38
 800dbca:	68fb      	ldr	r3, [r7, #12]
 800dbcc:	681b      	ldr	r3, [r3, #0]
 800dbce:	3314      	adds	r3, #20
 800dbd0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800dbd2:	623a      	str	r2, [r7, #32]
 800dbd4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dbd6:	69f9      	ldr	r1, [r7, #28]
 800dbd8:	6a3a      	ldr	r2, [r7, #32]
 800dbda:	e841 2300 	strex	r3, r2, [r1]
 800dbde:	61bb      	str	r3, [r7, #24]
   return(result);
 800dbe0:	69bb      	ldr	r3, [r7, #24]
 800dbe2:	2b00      	cmp	r3, #0
 800dbe4:	d1e5      	bne.n	800dbb2 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800dbe6:	68fb      	ldr	r3, [r7, #12]
 800dbe8:	2220      	movs	r2, #32
 800dbea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800dbee:	68fb      	ldr	r3, [r7, #12]
 800dbf0:	2220      	movs	r2, #32
 800dbf2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800dbf6:	68fb      	ldr	r3, [r7, #12]
 800dbf8:	2200      	movs	r2, #0
 800dbfa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800dbfe:	2303      	movs	r3, #3
 800dc00:	e00f      	b.n	800dc22 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800dc02:	68fb      	ldr	r3, [r7, #12]
 800dc04:	681b      	ldr	r3, [r3, #0]
 800dc06:	681a      	ldr	r2, [r3, #0]
 800dc08:	68bb      	ldr	r3, [r7, #8]
 800dc0a:	4013      	ands	r3, r2
 800dc0c:	68ba      	ldr	r2, [r7, #8]
 800dc0e:	429a      	cmp	r2, r3
 800dc10:	bf0c      	ite	eq
 800dc12:	2301      	moveq	r3, #1
 800dc14:	2300      	movne	r3, #0
 800dc16:	b2db      	uxtb	r3, r3
 800dc18:	461a      	mov	r2, r3
 800dc1a:	79fb      	ldrb	r3, [r7, #7]
 800dc1c:	429a      	cmp	r2, r3
 800dc1e:	d09f      	beq.n	800db60 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800dc20:	2300      	movs	r3, #0
}
 800dc22:	4618      	mov	r0, r3
 800dc24:	3740      	adds	r7, #64	; 0x40
 800dc26:	46bd      	mov	sp, r7
 800dc28:	bd80      	pop	{r7, pc}
	...

0800dc2c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800dc2c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800dc30:	b0c0      	sub	sp, #256	; 0x100
 800dc32:	af00      	add	r7, sp, #0
 800dc34:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800dc38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800dc3c:	681b      	ldr	r3, [r3, #0]
 800dc3e:	691b      	ldr	r3, [r3, #16]
 800dc40:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800dc44:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800dc48:	68d9      	ldr	r1, [r3, #12]
 800dc4a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800dc4e:	681a      	ldr	r2, [r3, #0]
 800dc50:	ea40 0301 	orr.w	r3, r0, r1
 800dc54:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800dc56:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800dc5a:	689a      	ldr	r2, [r3, #8]
 800dc5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800dc60:	691b      	ldr	r3, [r3, #16]
 800dc62:	431a      	orrs	r2, r3
 800dc64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800dc68:	695b      	ldr	r3, [r3, #20]
 800dc6a:	431a      	orrs	r2, r3
 800dc6c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800dc70:	69db      	ldr	r3, [r3, #28]
 800dc72:	4313      	orrs	r3, r2
 800dc74:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800dc78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800dc7c:	681b      	ldr	r3, [r3, #0]
 800dc7e:	68db      	ldr	r3, [r3, #12]
 800dc80:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800dc84:	f021 010c 	bic.w	r1, r1, #12
 800dc88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800dc8c:	681a      	ldr	r2, [r3, #0]
 800dc8e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800dc92:	430b      	orrs	r3, r1
 800dc94:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800dc96:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800dc9a:	681b      	ldr	r3, [r3, #0]
 800dc9c:	695b      	ldr	r3, [r3, #20]
 800dc9e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800dca2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800dca6:	6999      	ldr	r1, [r3, #24]
 800dca8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800dcac:	681a      	ldr	r2, [r3, #0]
 800dcae:	ea40 0301 	orr.w	r3, r0, r1
 800dcb2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800dcb4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800dcb8:	681a      	ldr	r2, [r3, #0]
 800dcba:	4b8f      	ldr	r3, [pc, #572]	; (800def8 <UART_SetConfig+0x2cc>)
 800dcbc:	429a      	cmp	r2, r3
 800dcbe:	d005      	beq.n	800dccc <UART_SetConfig+0xa0>
 800dcc0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800dcc4:	681a      	ldr	r2, [r3, #0]
 800dcc6:	4b8d      	ldr	r3, [pc, #564]	; (800defc <UART_SetConfig+0x2d0>)
 800dcc8:	429a      	cmp	r2, r3
 800dcca:	d104      	bne.n	800dcd6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800dccc:	f7ff fb34 	bl	800d338 <HAL_RCC_GetPCLK2Freq>
 800dcd0:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800dcd4:	e003      	b.n	800dcde <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800dcd6:	f7ff fb1b 	bl	800d310 <HAL_RCC_GetPCLK1Freq>
 800dcda:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800dcde:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800dce2:	69db      	ldr	r3, [r3, #28]
 800dce4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800dce8:	f040 810c 	bne.w	800df04 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800dcec:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800dcf0:	2200      	movs	r2, #0
 800dcf2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800dcf6:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800dcfa:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800dcfe:	4622      	mov	r2, r4
 800dd00:	462b      	mov	r3, r5
 800dd02:	1891      	adds	r1, r2, r2
 800dd04:	65b9      	str	r1, [r7, #88]	; 0x58
 800dd06:	415b      	adcs	r3, r3
 800dd08:	65fb      	str	r3, [r7, #92]	; 0x5c
 800dd0a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800dd0e:	4621      	mov	r1, r4
 800dd10:	eb12 0801 	adds.w	r8, r2, r1
 800dd14:	4629      	mov	r1, r5
 800dd16:	eb43 0901 	adc.w	r9, r3, r1
 800dd1a:	f04f 0200 	mov.w	r2, #0
 800dd1e:	f04f 0300 	mov.w	r3, #0
 800dd22:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800dd26:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800dd2a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800dd2e:	4690      	mov	r8, r2
 800dd30:	4699      	mov	r9, r3
 800dd32:	4623      	mov	r3, r4
 800dd34:	eb18 0303 	adds.w	r3, r8, r3
 800dd38:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800dd3c:	462b      	mov	r3, r5
 800dd3e:	eb49 0303 	adc.w	r3, r9, r3
 800dd42:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800dd46:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800dd4a:	685b      	ldr	r3, [r3, #4]
 800dd4c:	2200      	movs	r2, #0
 800dd4e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800dd52:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800dd56:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800dd5a:	460b      	mov	r3, r1
 800dd5c:	18db      	adds	r3, r3, r3
 800dd5e:	653b      	str	r3, [r7, #80]	; 0x50
 800dd60:	4613      	mov	r3, r2
 800dd62:	eb42 0303 	adc.w	r3, r2, r3
 800dd66:	657b      	str	r3, [r7, #84]	; 0x54
 800dd68:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800dd6c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800dd70:	f7f2 fc9a 	bl	80006a8 <__aeabi_uldivmod>
 800dd74:	4602      	mov	r2, r0
 800dd76:	460b      	mov	r3, r1
 800dd78:	4b61      	ldr	r3, [pc, #388]	; (800df00 <UART_SetConfig+0x2d4>)
 800dd7a:	fba3 2302 	umull	r2, r3, r3, r2
 800dd7e:	095b      	lsrs	r3, r3, #5
 800dd80:	011c      	lsls	r4, r3, #4
 800dd82:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800dd86:	2200      	movs	r2, #0
 800dd88:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800dd8c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800dd90:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800dd94:	4642      	mov	r2, r8
 800dd96:	464b      	mov	r3, r9
 800dd98:	1891      	adds	r1, r2, r2
 800dd9a:	64b9      	str	r1, [r7, #72]	; 0x48
 800dd9c:	415b      	adcs	r3, r3
 800dd9e:	64fb      	str	r3, [r7, #76]	; 0x4c
 800dda0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800dda4:	4641      	mov	r1, r8
 800dda6:	eb12 0a01 	adds.w	sl, r2, r1
 800ddaa:	4649      	mov	r1, r9
 800ddac:	eb43 0b01 	adc.w	fp, r3, r1
 800ddb0:	f04f 0200 	mov.w	r2, #0
 800ddb4:	f04f 0300 	mov.w	r3, #0
 800ddb8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800ddbc:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800ddc0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800ddc4:	4692      	mov	sl, r2
 800ddc6:	469b      	mov	fp, r3
 800ddc8:	4643      	mov	r3, r8
 800ddca:	eb1a 0303 	adds.w	r3, sl, r3
 800ddce:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800ddd2:	464b      	mov	r3, r9
 800ddd4:	eb4b 0303 	adc.w	r3, fp, r3
 800ddd8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800dddc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800dde0:	685b      	ldr	r3, [r3, #4]
 800dde2:	2200      	movs	r2, #0
 800dde4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800dde8:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800ddec:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800ddf0:	460b      	mov	r3, r1
 800ddf2:	18db      	adds	r3, r3, r3
 800ddf4:	643b      	str	r3, [r7, #64]	; 0x40
 800ddf6:	4613      	mov	r3, r2
 800ddf8:	eb42 0303 	adc.w	r3, r2, r3
 800ddfc:	647b      	str	r3, [r7, #68]	; 0x44
 800ddfe:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800de02:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800de06:	f7f2 fc4f 	bl	80006a8 <__aeabi_uldivmod>
 800de0a:	4602      	mov	r2, r0
 800de0c:	460b      	mov	r3, r1
 800de0e:	4611      	mov	r1, r2
 800de10:	4b3b      	ldr	r3, [pc, #236]	; (800df00 <UART_SetConfig+0x2d4>)
 800de12:	fba3 2301 	umull	r2, r3, r3, r1
 800de16:	095b      	lsrs	r3, r3, #5
 800de18:	2264      	movs	r2, #100	; 0x64
 800de1a:	fb02 f303 	mul.w	r3, r2, r3
 800de1e:	1acb      	subs	r3, r1, r3
 800de20:	00db      	lsls	r3, r3, #3
 800de22:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800de26:	4b36      	ldr	r3, [pc, #216]	; (800df00 <UART_SetConfig+0x2d4>)
 800de28:	fba3 2302 	umull	r2, r3, r3, r2
 800de2c:	095b      	lsrs	r3, r3, #5
 800de2e:	005b      	lsls	r3, r3, #1
 800de30:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800de34:	441c      	add	r4, r3
 800de36:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800de3a:	2200      	movs	r2, #0
 800de3c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800de40:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800de44:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800de48:	4642      	mov	r2, r8
 800de4a:	464b      	mov	r3, r9
 800de4c:	1891      	adds	r1, r2, r2
 800de4e:	63b9      	str	r1, [r7, #56]	; 0x38
 800de50:	415b      	adcs	r3, r3
 800de52:	63fb      	str	r3, [r7, #60]	; 0x3c
 800de54:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800de58:	4641      	mov	r1, r8
 800de5a:	1851      	adds	r1, r2, r1
 800de5c:	6339      	str	r1, [r7, #48]	; 0x30
 800de5e:	4649      	mov	r1, r9
 800de60:	414b      	adcs	r3, r1
 800de62:	637b      	str	r3, [r7, #52]	; 0x34
 800de64:	f04f 0200 	mov.w	r2, #0
 800de68:	f04f 0300 	mov.w	r3, #0
 800de6c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800de70:	4659      	mov	r1, fp
 800de72:	00cb      	lsls	r3, r1, #3
 800de74:	4651      	mov	r1, sl
 800de76:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800de7a:	4651      	mov	r1, sl
 800de7c:	00ca      	lsls	r2, r1, #3
 800de7e:	4610      	mov	r0, r2
 800de80:	4619      	mov	r1, r3
 800de82:	4603      	mov	r3, r0
 800de84:	4642      	mov	r2, r8
 800de86:	189b      	adds	r3, r3, r2
 800de88:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800de8c:	464b      	mov	r3, r9
 800de8e:	460a      	mov	r2, r1
 800de90:	eb42 0303 	adc.w	r3, r2, r3
 800de94:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800de98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800de9c:	685b      	ldr	r3, [r3, #4]
 800de9e:	2200      	movs	r2, #0
 800dea0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800dea4:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800dea8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800deac:	460b      	mov	r3, r1
 800deae:	18db      	adds	r3, r3, r3
 800deb0:	62bb      	str	r3, [r7, #40]	; 0x28
 800deb2:	4613      	mov	r3, r2
 800deb4:	eb42 0303 	adc.w	r3, r2, r3
 800deb8:	62fb      	str	r3, [r7, #44]	; 0x2c
 800deba:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800debe:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800dec2:	f7f2 fbf1 	bl	80006a8 <__aeabi_uldivmod>
 800dec6:	4602      	mov	r2, r0
 800dec8:	460b      	mov	r3, r1
 800deca:	4b0d      	ldr	r3, [pc, #52]	; (800df00 <UART_SetConfig+0x2d4>)
 800decc:	fba3 1302 	umull	r1, r3, r3, r2
 800ded0:	095b      	lsrs	r3, r3, #5
 800ded2:	2164      	movs	r1, #100	; 0x64
 800ded4:	fb01 f303 	mul.w	r3, r1, r3
 800ded8:	1ad3      	subs	r3, r2, r3
 800deda:	00db      	lsls	r3, r3, #3
 800dedc:	3332      	adds	r3, #50	; 0x32
 800dede:	4a08      	ldr	r2, [pc, #32]	; (800df00 <UART_SetConfig+0x2d4>)
 800dee0:	fba2 2303 	umull	r2, r3, r2, r3
 800dee4:	095b      	lsrs	r3, r3, #5
 800dee6:	f003 0207 	and.w	r2, r3, #7
 800deea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800deee:	681b      	ldr	r3, [r3, #0]
 800def0:	4422      	add	r2, r4
 800def2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800def4:	e105      	b.n	800e102 <UART_SetConfig+0x4d6>
 800def6:	bf00      	nop
 800def8:	40011000 	.word	0x40011000
 800defc:	40011400 	.word	0x40011400
 800df00:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800df04:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800df08:	2200      	movs	r2, #0
 800df0a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800df0e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800df12:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800df16:	4642      	mov	r2, r8
 800df18:	464b      	mov	r3, r9
 800df1a:	1891      	adds	r1, r2, r2
 800df1c:	6239      	str	r1, [r7, #32]
 800df1e:	415b      	adcs	r3, r3
 800df20:	627b      	str	r3, [r7, #36]	; 0x24
 800df22:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800df26:	4641      	mov	r1, r8
 800df28:	1854      	adds	r4, r2, r1
 800df2a:	4649      	mov	r1, r9
 800df2c:	eb43 0501 	adc.w	r5, r3, r1
 800df30:	f04f 0200 	mov.w	r2, #0
 800df34:	f04f 0300 	mov.w	r3, #0
 800df38:	00eb      	lsls	r3, r5, #3
 800df3a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800df3e:	00e2      	lsls	r2, r4, #3
 800df40:	4614      	mov	r4, r2
 800df42:	461d      	mov	r5, r3
 800df44:	4643      	mov	r3, r8
 800df46:	18e3      	adds	r3, r4, r3
 800df48:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800df4c:	464b      	mov	r3, r9
 800df4e:	eb45 0303 	adc.w	r3, r5, r3
 800df52:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800df56:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800df5a:	685b      	ldr	r3, [r3, #4]
 800df5c:	2200      	movs	r2, #0
 800df5e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800df62:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800df66:	f04f 0200 	mov.w	r2, #0
 800df6a:	f04f 0300 	mov.w	r3, #0
 800df6e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800df72:	4629      	mov	r1, r5
 800df74:	008b      	lsls	r3, r1, #2
 800df76:	4621      	mov	r1, r4
 800df78:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800df7c:	4621      	mov	r1, r4
 800df7e:	008a      	lsls	r2, r1, #2
 800df80:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800df84:	f7f2 fb90 	bl	80006a8 <__aeabi_uldivmod>
 800df88:	4602      	mov	r2, r0
 800df8a:	460b      	mov	r3, r1
 800df8c:	4b60      	ldr	r3, [pc, #384]	; (800e110 <UART_SetConfig+0x4e4>)
 800df8e:	fba3 2302 	umull	r2, r3, r3, r2
 800df92:	095b      	lsrs	r3, r3, #5
 800df94:	011c      	lsls	r4, r3, #4
 800df96:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800df9a:	2200      	movs	r2, #0
 800df9c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800dfa0:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800dfa4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800dfa8:	4642      	mov	r2, r8
 800dfaa:	464b      	mov	r3, r9
 800dfac:	1891      	adds	r1, r2, r2
 800dfae:	61b9      	str	r1, [r7, #24]
 800dfb0:	415b      	adcs	r3, r3
 800dfb2:	61fb      	str	r3, [r7, #28]
 800dfb4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800dfb8:	4641      	mov	r1, r8
 800dfba:	1851      	adds	r1, r2, r1
 800dfbc:	6139      	str	r1, [r7, #16]
 800dfbe:	4649      	mov	r1, r9
 800dfc0:	414b      	adcs	r3, r1
 800dfc2:	617b      	str	r3, [r7, #20]
 800dfc4:	f04f 0200 	mov.w	r2, #0
 800dfc8:	f04f 0300 	mov.w	r3, #0
 800dfcc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800dfd0:	4659      	mov	r1, fp
 800dfd2:	00cb      	lsls	r3, r1, #3
 800dfd4:	4651      	mov	r1, sl
 800dfd6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800dfda:	4651      	mov	r1, sl
 800dfdc:	00ca      	lsls	r2, r1, #3
 800dfde:	4610      	mov	r0, r2
 800dfe0:	4619      	mov	r1, r3
 800dfe2:	4603      	mov	r3, r0
 800dfe4:	4642      	mov	r2, r8
 800dfe6:	189b      	adds	r3, r3, r2
 800dfe8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800dfec:	464b      	mov	r3, r9
 800dfee:	460a      	mov	r2, r1
 800dff0:	eb42 0303 	adc.w	r3, r2, r3
 800dff4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800dff8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800dffc:	685b      	ldr	r3, [r3, #4]
 800dffe:	2200      	movs	r2, #0
 800e000:	67bb      	str	r3, [r7, #120]	; 0x78
 800e002:	67fa      	str	r2, [r7, #124]	; 0x7c
 800e004:	f04f 0200 	mov.w	r2, #0
 800e008:	f04f 0300 	mov.w	r3, #0
 800e00c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800e010:	4649      	mov	r1, r9
 800e012:	008b      	lsls	r3, r1, #2
 800e014:	4641      	mov	r1, r8
 800e016:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800e01a:	4641      	mov	r1, r8
 800e01c:	008a      	lsls	r2, r1, #2
 800e01e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800e022:	f7f2 fb41 	bl	80006a8 <__aeabi_uldivmod>
 800e026:	4602      	mov	r2, r0
 800e028:	460b      	mov	r3, r1
 800e02a:	4b39      	ldr	r3, [pc, #228]	; (800e110 <UART_SetConfig+0x4e4>)
 800e02c:	fba3 1302 	umull	r1, r3, r3, r2
 800e030:	095b      	lsrs	r3, r3, #5
 800e032:	2164      	movs	r1, #100	; 0x64
 800e034:	fb01 f303 	mul.w	r3, r1, r3
 800e038:	1ad3      	subs	r3, r2, r3
 800e03a:	011b      	lsls	r3, r3, #4
 800e03c:	3332      	adds	r3, #50	; 0x32
 800e03e:	4a34      	ldr	r2, [pc, #208]	; (800e110 <UART_SetConfig+0x4e4>)
 800e040:	fba2 2303 	umull	r2, r3, r2, r3
 800e044:	095b      	lsrs	r3, r3, #5
 800e046:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800e04a:	441c      	add	r4, r3
 800e04c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800e050:	2200      	movs	r2, #0
 800e052:	673b      	str	r3, [r7, #112]	; 0x70
 800e054:	677a      	str	r2, [r7, #116]	; 0x74
 800e056:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800e05a:	4642      	mov	r2, r8
 800e05c:	464b      	mov	r3, r9
 800e05e:	1891      	adds	r1, r2, r2
 800e060:	60b9      	str	r1, [r7, #8]
 800e062:	415b      	adcs	r3, r3
 800e064:	60fb      	str	r3, [r7, #12]
 800e066:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800e06a:	4641      	mov	r1, r8
 800e06c:	1851      	adds	r1, r2, r1
 800e06e:	6039      	str	r1, [r7, #0]
 800e070:	4649      	mov	r1, r9
 800e072:	414b      	adcs	r3, r1
 800e074:	607b      	str	r3, [r7, #4]
 800e076:	f04f 0200 	mov.w	r2, #0
 800e07a:	f04f 0300 	mov.w	r3, #0
 800e07e:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800e082:	4659      	mov	r1, fp
 800e084:	00cb      	lsls	r3, r1, #3
 800e086:	4651      	mov	r1, sl
 800e088:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800e08c:	4651      	mov	r1, sl
 800e08e:	00ca      	lsls	r2, r1, #3
 800e090:	4610      	mov	r0, r2
 800e092:	4619      	mov	r1, r3
 800e094:	4603      	mov	r3, r0
 800e096:	4642      	mov	r2, r8
 800e098:	189b      	adds	r3, r3, r2
 800e09a:	66bb      	str	r3, [r7, #104]	; 0x68
 800e09c:	464b      	mov	r3, r9
 800e09e:	460a      	mov	r2, r1
 800e0a0:	eb42 0303 	adc.w	r3, r2, r3
 800e0a4:	66fb      	str	r3, [r7, #108]	; 0x6c
 800e0a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800e0aa:	685b      	ldr	r3, [r3, #4]
 800e0ac:	2200      	movs	r2, #0
 800e0ae:	663b      	str	r3, [r7, #96]	; 0x60
 800e0b0:	667a      	str	r2, [r7, #100]	; 0x64
 800e0b2:	f04f 0200 	mov.w	r2, #0
 800e0b6:	f04f 0300 	mov.w	r3, #0
 800e0ba:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800e0be:	4649      	mov	r1, r9
 800e0c0:	008b      	lsls	r3, r1, #2
 800e0c2:	4641      	mov	r1, r8
 800e0c4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800e0c8:	4641      	mov	r1, r8
 800e0ca:	008a      	lsls	r2, r1, #2
 800e0cc:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800e0d0:	f7f2 faea 	bl	80006a8 <__aeabi_uldivmod>
 800e0d4:	4602      	mov	r2, r0
 800e0d6:	460b      	mov	r3, r1
 800e0d8:	4b0d      	ldr	r3, [pc, #52]	; (800e110 <UART_SetConfig+0x4e4>)
 800e0da:	fba3 1302 	umull	r1, r3, r3, r2
 800e0de:	095b      	lsrs	r3, r3, #5
 800e0e0:	2164      	movs	r1, #100	; 0x64
 800e0e2:	fb01 f303 	mul.w	r3, r1, r3
 800e0e6:	1ad3      	subs	r3, r2, r3
 800e0e8:	011b      	lsls	r3, r3, #4
 800e0ea:	3332      	adds	r3, #50	; 0x32
 800e0ec:	4a08      	ldr	r2, [pc, #32]	; (800e110 <UART_SetConfig+0x4e4>)
 800e0ee:	fba2 2303 	umull	r2, r3, r2, r3
 800e0f2:	095b      	lsrs	r3, r3, #5
 800e0f4:	f003 020f 	and.w	r2, r3, #15
 800e0f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800e0fc:	681b      	ldr	r3, [r3, #0]
 800e0fe:	4422      	add	r2, r4
 800e100:	609a      	str	r2, [r3, #8]
}
 800e102:	bf00      	nop
 800e104:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800e108:	46bd      	mov	sp, r7
 800e10a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800e10e:	bf00      	nop
 800e110:	51eb851f 	.word	0x51eb851f

0800e114 <aci_gap_init_IDB05A1>:

#define MIN(a,b)            ((a) < (b) )? (a) : (b)
#define MAX(a,b)            ((a) > (b) )? (a) : (b)

tBleStatus aci_gap_init_IDB05A1(uint8_t role, uint8_t privacy_enabled, uint8_t device_name_char_len, uint16_t* service_handle, uint16_t* dev_name_char_handle, uint16_t* appearance_char_handle)
{
 800e114:	b580      	push	{r7, lr}
 800e116:	b08c      	sub	sp, #48	; 0x30
 800e118:	af00      	add	r7, sp, #0
 800e11a:	603b      	str	r3, [r7, #0]
 800e11c:	4603      	mov	r3, r0
 800e11e:	71fb      	strb	r3, [r7, #7]
 800e120:	460b      	mov	r3, r1
 800e122:	71bb      	strb	r3, [r7, #6]
 800e124:	4613      	mov	r3, r2
 800e126:	717b      	strb	r3, [r7, #5]
  struct hci_request rq;
  gap_init_cp_IDB05A1 cp;
  gap_init_rp resp;
 
  cp.role = role;
 800e128:	79fb      	ldrb	r3, [r7, #7]
 800e12a:	753b      	strb	r3, [r7, #20]
  cp.privacy_enabled = privacy_enabled;
 800e12c:	79bb      	ldrb	r3, [r7, #6]
 800e12e:	757b      	strb	r3, [r7, #21]
  cp.device_name_char_len = device_name_char_len;
 800e130:	797b      	ldrb	r3, [r7, #5]
 800e132:	75bb      	strb	r3, [r7, #22]
    
  BLUENRG_memset(&resp, 0, sizeof(resp));
 800e134:	f107 030c 	add.w	r3, r7, #12
 800e138:	2207      	movs	r2, #7
 800e13a:	2100      	movs	r1, #0
 800e13c:	4618      	mov	r0, r3
 800e13e:	f001 f99f 	bl	800f480 <memset>
  
  BLUENRG_memset(&rq, 0, sizeof(rq));
 800e142:	f107 0318 	add.w	r3, r7, #24
 800e146:	2218      	movs	r2, #24
 800e148:	2100      	movs	r1, #0
 800e14a:	4618      	mov	r0, r3
 800e14c:	f001 f998 	bl	800f480 <memset>
  rq.ogf = OGF_VENDOR_CMD;
 800e150:	233f      	movs	r3, #63	; 0x3f
 800e152:	833b      	strh	r3, [r7, #24]
  rq.ocf = OCF_GAP_INIT;
 800e154:	238a      	movs	r3, #138	; 0x8a
 800e156:	837b      	strh	r3, [r7, #26]
  rq.cparam = &cp;
 800e158:	f107 0314 	add.w	r3, r7, #20
 800e15c:	623b      	str	r3, [r7, #32]
  rq.clen = sizeof(cp);
 800e15e:	2303      	movs	r3, #3
 800e160:	627b      	str	r3, [r7, #36]	; 0x24
  rq.rparam = &resp;
 800e162:	f107 030c 	add.w	r3, r7, #12
 800e166:	62bb      	str	r3, [r7, #40]	; 0x28
  rq.rlen = GAP_INIT_RP_SIZE;
 800e168:	2307      	movs	r3, #7
 800e16a:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  if (hci_send_req(&rq, FALSE) < 0)
 800e16c:	f107 0318 	add.w	r3, r7, #24
 800e170:	2100      	movs	r1, #0
 800e172:	4618      	mov	r0, r3
 800e174:	f000 fea2 	bl	800eebc <hci_send_req>
 800e178:	4603      	mov	r3, r0
 800e17a:	2b00      	cmp	r3, #0
 800e17c:	da01      	bge.n	800e182 <aci_gap_init_IDB05A1+0x6e>
    return BLE_STATUS_TIMEOUT;
 800e17e:	23ff      	movs	r3, #255	; 0xff
 800e180:	e014      	b.n	800e1ac <aci_gap_init_IDB05A1+0x98>
  
  if (resp.status) {
 800e182:	7b3b      	ldrb	r3, [r7, #12]
 800e184:	2b00      	cmp	r3, #0
 800e186:	d001      	beq.n	800e18c <aci_gap_init_IDB05A1+0x78>
    return resp.status;
 800e188:	7b3b      	ldrb	r3, [r7, #12]
 800e18a:	e00f      	b.n	800e1ac <aci_gap_init_IDB05A1+0x98>
  }
  
  *service_handle = btohs(resp.service_handle);
 800e18c:	f8b7 300d 	ldrh.w	r3, [r7, #13]
 800e190:	b29a      	uxth	r2, r3
 800e192:	683b      	ldr	r3, [r7, #0]
 800e194:	801a      	strh	r2, [r3, #0]
  *dev_name_char_handle = btohs(resp.dev_name_char_handle);
 800e196:	f8b7 300f 	ldrh.w	r3, [r7, #15]
 800e19a:	b29a      	uxth	r2, r3
 800e19c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e19e:	801a      	strh	r2, [r3, #0]
  *appearance_char_handle = btohs(resp.appearance_char_handle);
 800e1a0:	f8b7 3011 	ldrh.w	r3, [r7, #17]
 800e1a4:	b29a      	uxth	r2, r3
 800e1a6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e1a8:	801a      	strh	r2, [r3, #0]
  
  return 0;
 800e1aa:	2300      	movs	r3, #0
}
 800e1ac:	4618      	mov	r0, r3
 800e1ae:	3730      	adds	r7, #48	; 0x30
 800e1b0:	46bd      	mov	sp, r7
 800e1b2:	bd80      	pop	{r7, pc}

0800e1b4 <aci_gap_init_IDB04A1>:

tBleStatus aci_gap_init_IDB04A1(uint8_t role, uint16_t* service_handle, uint16_t* dev_name_char_handle, uint16_t* appearance_char_handle)
{
 800e1b4:	b580      	push	{r7, lr}
 800e1b6:	b08e      	sub	sp, #56	; 0x38
 800e1b8:	af00      	add	r7, sp, #0
 800e1ba:	60b9      	str	r1, [r7, #8]
 800e1bc:	607a      	str	r2, [r7, #4]
 800e1be:	603b      	str	r3, [r7, #0]
 800e1c0:	4603      	mov	r3, r0
 800e1c2:	73fb      	strb	r3, [r7, #15]
  struct hci_request rq;
  gap_init_cp_IDB04A1 cp;
  gap_init_rp resp;

  cp.role = role;
 800e1c4:	7bfb      	ldrb	r3, [r7, #15]
 800e1c6:	773b      	strb	r3, [r7, #28]
    
  BLUENRG_memset(&resp, 0, sizeof(resp));
 800e1c8:	f107 0314 	add.w	r3, r7, #20
 800e1cc:	2207      	movs	r2, #7
 800e1ce:	2100      	movs	r1, #0
 800e1d0:	4618      	mov	r0, r3
 800e1d2:	f001 f955 	bl	800f480 <memset>
  
  BLUENRG_memset(&rq, 0, sizeof(rq));
 800e1d6:	f107 0320 	add.w	r3, r7, #32
 800e1da:	2218      	movs	r2, #24
 800e1dc:	2100      	movs	r1, #0
 800e1de:	4618      	mov	r0, r3
 800e1e0:	f001 f94e 	bl	800f480 <memset>
  rq.ogf = OGF_VENDOR_CMD;
 800e1e4:	233f      	movs	r3, #63	; 0x3f
 800e1e6:	843b      	strh	r3, [r7, #32]
  rq.ocf = OCF_GAP_INIT;
 800e1e8:	238a      	movs	r3, #138	; 0x8a
 800e1ea:	847b      	strh	r3, [r7, #34]	; 0x22
  rq.cparam = &cp;
 800e1ec:	f107 031c 	add.w	r3, r7, #28
 800e1f0:	62bb      	str	r3, [r7, #40]	; 0x28
  rq.clen = sizeof(cp);
 800e1f2:	2301      	movs	r3, #1
 800e1f4:	62fb      	str	r3, [r7, #44]	; 0x2c
  rq.rparam = &resp;
 800e1f6:	f107 0314 	add.w	r3, r7, #20
 800e1fa:	633b      	str	r3, [r7, #48]	; 0x30
  rq.rlen = GAP_INIT_RP_SIZE;
 800e1fc:	2307      	movs	r3, #7
 800e1fe:	637b      	str	r3, [r7, #52]	; 0x34
  
  if (hci_send_req(&rq, FALSE) < 0)
 800e200:	f107 0320 	add.w	r3, r7, #32
 800e204:	2100      	movs	r1, #0
 800e206:	4618      	mov	r0, r3
 800e208:	f000 fe58 	bl	800eebc <hci_send_req>
 800e20c:	4603      	mov	r3, r0
 800e20e:	2b00      	cmp	r3, #0
 800e210:	da01      	bge.n	800e216 <aci_gap_init_IDB04A1+0x62>
    return BLE_STATUS_TIMEOUT;
 800e212:	23ff      	movs	r3, #255	; 0xff
 800e214:	e014      	b.n	800e240 <aci_gap_init_IDB04A1+0x8c>
  
  if (resp.status) {
 800e216:	7d3b      	ldrb	r3, [r7, #20]
 800e218:	2b00      	cmp	r3, #0
 800e21a:	d001      	beq.n	800e220 <aci_gap_init_IDB04A1+0x6c>
    return resp.status;
 800e21c:	7d3b      	ldrb	r3, [r7, #20]
 800e21e:	e00f      	b.n	800e240 <aci_gap_init_IDB04A1+0x8c>
  }
  
  *service_handle = btohs(resp.service_handle);
 800e220:	f8b7 3015 	ldrh.w	r3, [r7, #21]
 800e224:	b29a      	uxth	r2, r3
 800e226:	68bb      	ldr	r3, [r7, #8]
 800e228:	801a      	strh	r2, [r3, #0]
  *dev_name_char_handle = btohs(resp.dev_name_char_handle);
 800e22a:	f8b7 3017 	ldrh.w	r3, [r7, #23]
 800e22e:	b29a      	uxth	r2, r3
 800e230:	687b      	ldr	r3, [r7, #4]
 800e232:	801a      	strh	r2, [r3, #0]
  *appearance_char_handle = btohs(resp.appearance_char_handle);
 800e234:	f8b7 3019 	ldrh.w	r3, [r7, #25]
 800e238:	b29a      	uxth	r2, r3
 800e23a:	683b      	ldr	r3, [r7, #0]
 800e23c:	801a      	strh	r2, [r3, #0]
  
  return 0;
 800e23e:	2300      	movs	r3, #0
}
 800e240:	4618      	mov	r0, r3
 800e242:	3738      	adds	r7, #56	; 0x38
 800e244:	46bd      	mov	sp, r7
 800e246:	bd80      	pop	{r7, pc}

0800e248 <aci_gap_set_discoverable>:

tBleStatus aci_gap_set_discoverable(uint8_t AdvType, uint16_t AdvIntervMin, uint16_t AdvIntervMax,
                             uint8_t OwnAddrType, uint8_t AdvFilterPolicy, uint8_t LocalNameLen,
                             const char *LocalName, uint8_t ServiceUUIDLen, uint8_t* ServiceUUIDList,
                             uint16_t SlaveConnIntervMin, uint16_t SlaveConnIntervMax)
{
 800e248:	b590      	push	{r4, r7, lr}
 800e24a:	b095      	sub	sp, #84	; 0x54
 800e24c:	af00      	add	r7, sp, #0
 800e24e:	4604      	mov	r4, r0
 800e250:	4608      	mov	r0, r1
 800e252:	4611      	mov	r1, r2
 800e254:	461a      	mov	r2, r3
 800e256:	4623      	mov	r3, r4
 800e258:	71fb      	strb	r3, [r7, #7]
 800e25a:	4603      	mov	r3, r0
 800e25c:	80bb      	strh	r3, [r7, #4]
 800e25e:	460b      	mov	r3, r1
 800e260:	807b      	strh	r3, [r7, #2]
 800e262:	4613      	mov	r3, r2
 800e264:	71bb      	strb	r3, [r7, #6]
  struct hci_request rq;
  uint8_t status;    
  uint8_t buffer[40];
  uint8_t indx = 0;
 800e266:	2300      	movs	r3, #0
 800e268:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  
  if ((LocalNameLen+ServiceUUIDLen+14) > sizeof(buffer))
 800e26c:	f897 2064 	ldrb.w	r2, [r7, #100]	; 0x64
 800e270:	f897 306c 	ldrb.w	r3, [r7, #108]	; 0x6c
 800e274:	4413      	add	r3, r2
 800e276:	330e      	adds	r3, #14
 800e278:	2b28      	cmp	r3, #40	; 0x28
 800e27a:	d901      	bls.n	800e280 <aci_gap_set_discoverable+0x38>
    return BLE_STATUS_INVALID_PARAMS;
 800e27c:	2342      	movs	r3, #66	; 0x42
 800e27e:	e0c9      	b.n	800e414 <aci_gap_set_discoverable+0x1cc>

  buffer[indx] = AdvType;
 800e280:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800e284:	3350      	adds	r3, #80	; 0x50
 800e286:	443b      	add	r3, r7
 800e288:	79fa      	ldrb	r2, [r7, #7]
 800e28a:	f803 2c48 	strb.w	r2, [r3, #-72]
  indx++;
 800e28e:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800e292:	3301      	adds	r3, #1
 800e294:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  
  AdvIntervMin = htobs(AdvIntervMin);
 800e298:	88bb      	ldrh	r3, [r7, #4]
 800e29a:	80bb      	strh	r3, [r7, #4]
  BLUENRG_memcpy(buffer + indx, &AdvIntervMin, 2);
 800e29c:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800e2a0:	f107 0208 	add.w	r2, r7, #8
 800e2a4:	4413      	add	r3, r2
 800e2a6:	88ba      	ldrh	r2, [r7, #4]
 800e2a8:	801a      	strh	r2, [r3, #0]
  indx +=  2;
 800e2aa:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800e2ae:	3302      	adds	r3, #2
 800e2b0:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
    
  AdvIntervMax = htobs(AdvIntervMax);
 800e2b4:	887b      	ldrh	r3, [r7, #2]
 800e2b6:	807b      	strh	r3, [r7, #2]
  BLUENRG_memcpy(buffer + indx, &AdvIntervMax, 2);
 800e2b8:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800e2bc:	f107 0208 	add.w	r2, r7, #8
 800e2c0:	4413      	add	r3, r2
 800e2c2:	887a      	ldrh	r2, [r7, #2]
 800e2c4:	801a      	strh	r2, [r3, #0]
  indx +=  2;
 800e2c6:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800e2ca:	3302      	adds	r3, #2
 800e2cc:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
    
  buffer[indx] = OwnAddrType;
 800e2d0:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800e2d4:	3350      	adds	r3, #80	; 0x50
 800e2d6:	443b      	add	r3, r7
 800e2d8:	79ba      	ldrb	r2, [r7, #6]
 800e2da:	f803 2c48 	strb.w	r2, [r3, #-72]
  indx++;
 800e2de:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800e2e2:	3301      	adds	r3, #1
 800e2e4:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
    
  buffer[indx] = AdvFilterPolicy;
 800e2e8:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800e2ec:	3350      	adds	r3, #80	; 0x50
 800e2ee:	443b      	add	r3, r7
 800e2f0:	f897 2060 	ldrb.w	r2, [r7, #96]	; 0x60
 800e2f4:	f803 2c48 	strb.w	r2, [r3, #-72]
  indx++;
 800e2f8:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800e2fc:	3301      	adds	r3, #1
 800e2fe:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
    
  buffer[indx] = LocalNameLen;
 800e302:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800e306:	3350      	adds	r3, #80	; 0x50
 800e308:	443b      	add	r3, r7
 800e30a:	f897 2064 	ldrb.w	r2, [r7, #100]	; 0x64
 800e30e:	f803 2c48 	strb.w	r2, [r3, #-72]
  indx++;
 800e312:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800e316:	3301      	adds	r3, #1
 800e318:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
    
  BLUENRG_memcpy(buffer + indx, LocalName, LocalNameLen);
 800e31c:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800e320:	f107 0208 	add.w	r2, r7, #8
 800e324:	4413      	add	r3, r2
 800e326:	f897 2064 	ldrb.w	r2, [r7, #100]	; 0x64
 800e32a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800e32c:	4618      	mov	r0, r3
 800e32e:	f001 f899 	bl	800f464 <memcpy>
  indx +=  LocalNameLen;
 800e332:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 800e336:	f897 3064 	ldrb.w	r3, [r7, #100]	; 0x64
 800e33a:	4413      	add	r3, r2
 800e33c:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  
  buffer[indx] = ServiceUUIDLen;
 800e340:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800e344:	3350      	adds	r3, #80	; 0x50
 800e346:	443b      	add	r3, r7
 800e348:	f897 206c 	ldrb.w	r2, [r7, #108]	; 0x6c
 800e34c:	f803 2c48 	strb.w	r2, [r3, #-72]
  indx++;
 800e350:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800e354:	3301      	adds	r3, #1
 800e356:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

  BLUENRG_memcpy(buffer + indx, ServiceUUIDList, ServiceUUIDLen);
 800e35a:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800e35e:	f107 0208 	add.w	r2, r7, #8
 800e362:	4413      	add	r3, r2
 800e364:	f897 206c 	ldrb.w	r2, [r7, #108]	; 0x6c
 800e368:	6f39      	ldr	r1, [r7, #112]	; 0x70
 800e36a:	4618      	mov	r0, r3
 800e36c:	f001 f87a 	bl	800f464 <memcpy>
  indx +=  ServiceUUIDLen;  
 800e370:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 800e374:	f897 306c 	ldrb.w	r3, [r7, #108]	; 0x6c
 800e378:	4413      	add	r3, r2
 800e37a:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

  SlaveConnIntervMin = htobs(SlaveConnIntervMin);
 800e37e:	f8b7 3074 	ldrh.w	r3, [r7, #116]	; 0x74
 800e382:	f8a7 3074 	strh.w	r3, [r7, #116]	; 0x74
  BLUENRG_memcpy(buffer + indx, &SlaveConnIntervMin, 2);
 800e386:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800e38a:	f107 0208 	add.w	r2, r7, #8
 800e38e:	4413      	add	r3, r2
 800e390:	f8b7 2074 	ldrh.w	r2, [r7, #116]	; 0x74
 800e394:	801a      	strh	r2, [r3, #0]
  indx +=  2;
 800e396:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800e39a:	3302      	adds	r3, #2
 800e39c:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  
  SlaveConnIntervMax = htobs(SlaveConnIntervMax);
 800e3a0:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 800e3a4:	f8a7 3078 	strh.w	r3, [r7, #120]	; 0x78
  BLUENRG_memcpy(buffer + indx, &SlaveConnIntervMax, 2);
 800e3a8:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800e3ac:	f107 0208 	add.w	r2, r7, #8
 800e3b0:	4413      	add	r3, r2
 800e3b2:	f8b7 2078 	ldrh.w	r2, [r7, #120]	; 0x78
 800e3b6:	801a      	strh	r2, [r3, #0]
  indx +=  2;    
 800e3b8:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800e3bc:	3302      	adds	r3, #2
 800e3be:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

  BLUENRG_memset(&rq, 0, sizeof(rq));
 800e3c2:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800e3c6:	2218      	movs	r2, #24
 800e3c8:	2100      	movs	r1, #0
 800e3ca:	4618      	mov	r0, r3
 800e3cc:	f001 f858 	bl	800f480 <memset>
  rq.ogf = OGF_VENDOR_CMD;
 800e3d0:	233f      	movs	r3, #63	; 0x3f
 800e3d2:	86bb      	strh	r3, [r7, #52]	; 0x34
  rq.ocf = OCF_GAP_SET_DISCOVERABLE;
 800e3d4:	2383      	movs	r3, #131	; 0x83
 800e3d6:	86fb      	strh	r3, [r7, #54]	; 0x36
  rq.cparam = (void *)buffer;
 800e3d8:	f107 0308 	add.w	r3, r7, #8
 800e3dc:	63fb      	str	r3, [r7, #60]	; 0x3c
  rq.clen = indx;
 800e3de:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800e3e2:	643b      	str	r3, [r7, #64]	; 0x40
  rq.rparam = &status;
 800e3e4:	f107 0333 	add.w	r3, r7, #51	; 0x33
 800e3e8:	647b      	str	r3, [r7, #68]	; 0x44
  rq.rlen = 1;
 800e3ea:	2301      	movs	r3, #1
 800e3ec:	64bb      	str	r3, [r7, #72]	; 0x48

  if (hci_send_req(&rq, FALSE) < 0)
 800e3ee:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800e3f2:	2100      	movs	r1, #0
 800e3f4:	4618      	mov	r0, r3
 800e3f6:	f000 fd61 	bl	800eebc <hci_send_req>
 800e3fa:	4603      	mov	r3, r0
 800e3fc:	2b00      	cmp	r3, #0
 800e3fe:	da01      	bge.n	800e404 <aci_gap_set_discoverable+0x1bc>
    return BLE_STATUS_TIMEOUT;
 800e400:	23ff      	movs	r3, #255	; 0xff
 800e402:	e007      	b.n	800e414 <aci_gap_set_discoverable+0x1cc>

  if (status) {
 800e404:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800e408:	2b00      	cmp	r3, #0
 800e40a:	d002      	beq.n	800e412 <aci_gap_set_discoverable+0x1ca>
    return status;
 800e40c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800e410:	e000      	b.n	800e414 <aci_gap_set_discoverable+0x1cc>
  }

  return 0;
 800e412:	2300      	movs	r3, #0
}
 800e414:	4618      	mov	r0, r3
 800e416:	3754      	adds	r7, #84	; 0x54
 800e418:	46bd      	mov	sp, r7
 800e41a:	bd90      	pop	{r4, r7, pc}

0800e41c <aci_gap_set_auth_requirement>:
                                        uint8_t min_encryption_key_size,
                                        uint8_t max_encryption_key_size,
                                        uint8_t use_fixed_pin,
                                        uint32_t fixed_pin,
                                        uint8_t bonding_mode)
{
 800e41c:	b590      	push	{r4, r7, lr}
 800e41e:	b091      	sub	sp, #68	; 0x44
 800e420:	af00      	add	r7, sp, #0
 800e422:	603a      	str	r2, [r7, #0]
 800e424:	461a      	mov	r2, r3
 800e426:	4603      	mov	r3, r0
 800e428:	71fb      	strb	r3, [r7, #7]
 800e42a:	460b      	mov	r3, r1
 800e42c:	71bb      	strb	r3, [r7, #6]
 800e42e:	4613      	mov	r3, r2
 800e430:	717b      	strb	r3, [r7, #5]
  struct hci_request rq;
  gap_set_auth_requirement_cp cp;    
  uint8_t status;
    
  cp.mitm_mode = mitm_mode;
 800e432:	79fb      	ldrb	r3, [r7, #7]
 800e434:	733b      	strb	r3, [r7, #12]
  cp.oob_enable = oob_enable;
 800e436:	79bb      	ldrb	r3, [r7, #6]
 800e438:	737b      	strb	r3, [r7, #13]
  /* FIX: check on oob_enable introduced to fix issue in projects for Cortex-M33 */
  if (oob_enable) {
 800e43a:	79bb      	ldrb	r3, [r7, #6]
 800e43c:	2b00      	cmp	r3, #0
 800e43e:	d00a      	beq.n	800e456 <aci_gap_set_auth_requirement+0x3a>
    BLUENRG_memcpy(cp.oob_data, oob_data, 16);
 800e440:	683a      	ldr	r2, [r7, #0]
 800e442:	f107 030e 	add.w	r3, r7, #14
 800e446:	6814      	ldr	r4, [r2, #0]
 800e448:	6850      	ldr	r0, [r2, #4]
 800e44a:	6891      	ldr	r1, [r2, #8]
 800e44c:	68d2      	ldr	r2, [r2, #12]
 800e44e:	601c      	str	r4, [r3, #0]
 800e450:	6058      	str	r0, [r3, #4]
 800e452:	6099      	str	r1, [r3, #8]
 800e454:	60da      	str	r2, [r3, #12]
  }
  cp.min_encryption_key_size = min_encryption_key_size;
 800e456:	797b      	ldrb	r3, [r7, #5]
 800e458:	77bb      	strb	r3, [r7, #30]
  cp.max_encryption_key_size = max_encryption_key_size;
 800e45a:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
 800e45e:	77fb      	strb	r3, [r7, #31]
  cp.use_fixed_pin = use_fixed_pin;
 800e460:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 800e464:	f887 3020 	strb.w	r3, [r7, #32]
  cp.fixed_pin = htobl(fixed_pin);
 800e468:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800e46a:	f8c7 3021 	str.w	r3, [r7, #33]	; 0x21
  cp.bonding_mode = bonding_mode;
 800e46e:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 800e472:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

  BLUENRG_memset(&rq, 0, sizeof(rq));
 800e476:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800e47a:	2218      	movs	r2, #24
 800e47c:	2100      	movs	r1, #0
 800e47e:	4618      	mov	r0, r3
 800e480:	f000 fffe 	bl	800f480 <memset>
  rq.ogf = OGF_VENDOR_CMD;
 800e484:	233f      	movs	r3, #63	; 0x3f
 800e486:	853b      	strh	r3, [r7, #40]	; 0x28
  rq.ocf = OCF_GAP_SET_AUTH_REQUIREMENT;
 800e488:	2386      	movs	r3, #134	; 0x86
 800e48a:	857b      	strh	r3, [r7, #42]	; 0x2a
  rq.cparam = &cp;
 800e48c:	f107 030c 	add.w	r3, r7, #12
 800e490:	633b      	str	r3, [r7, #48]	; 0x30
  rq.clen = sizeof(cp);
 800e492:	231a      	movs	r3, #26
 800e494:	637b      	str	r3, [r7, #52]	; 0x34
  rq.rparam = &status;
 800e496:	f107 030b 	add.w	r3, r7, #11
 800e49a:	63bb      	str	r3, [r7, #56]	; 0x38
  rq.rlen = 1;
 800e49c:	2301      	movs	r3, #1
 800e49e:	63fb      	str	r3, [r7, #60]	; 0x3c

  if (hci_send_req(&rq, FALSE) < 0)
 800e4a0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800e4a4:	2100      	movs	r1, #0
 800e4a6:	4618      	mov	r0, r3
 800e4a8:	f000 fd08 	bl	800eebc <hci_send_req>
 800e4ac:	4603      	mov	r3, r0
 800e4ae:	2b00      	cmp	r3, #0
 800e4b0:	da01      	bge.n	800e4b6 <aci_gap_set_auth_requirement+0x9a>
    return BLE_STATUS_TIMEOUT;
 800e4b2:	23ff      	movs	r3, #255	; 0xff
 800e4b4:	e005      	b.n	800e4c2 <aci_gap_set_auth_requirement+0xa6>

  if (status) {
 800e4b6:	7afb      	ldrb	r3, [r7, #11]
 800e4b8:	2b00      	cmp	r3, #0
 800e4ba:	d001      	beq.n	800e4c0 <aci_gap_set_auth_requirement+0xa4>
    return status;
 800e4bc:	7afb      	ldrb	r3, [r7, #11]
 800e4be:	e000      	b.n	800e4c2 <aci_gap_set_auth_requirement+0xa6>
  }
    
  return 0;
 800e4c0:	2300      	movs	r3, #0
}
 800e4c2:	4618      	mov	r0, r3
 800e4c4:	3744      	adds	r7, #68	; 0x44
 800e4c6:	46bd      	mov	sp, r7
 800e4c8:	bd90      	pop	{r4, r7, pc}

0800e4ca <aci_gap_update_adv_data>:
  return status;

}

tBleStatus aci_gap_update_adv_data(uint8_t AdvLen, const uint8_t *AdvData)
{
 800e4ca:	b580      	push	{r7, lr}
 800e4cc:	b092      	sub	sp, #72	; 0x48
 800e4ce:	af00      	add	r7, sp, #0
 800e4d0:	4603      	mov	r3, r0
 800e4d2:	6039      	str	r1, [r7, #0]
 800e4d4:	71fb      	strb	r3, [r7, #7]
  struct hci_request rq;
  uint8_t status;
  uint8_t buffer[32];
  uint8_t indx = 0;
 800e4d6:	2300      	movs	r3, #0
 800e4d8:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  if (AdvLen > (sizeof(buffer)-1))
 800e4dc:	79fb      	ldrb	r3, [r7, #7]
 800e4de:	2b1f      	cmp	r3, #31
 800e4e0:	d901      	bls.n	800e4e6 <aci_gap_update_adv_data+0x1c>
    return BLE_STATUS_INVALID_PARAMS;
 800e4e2:	2342      	movs	r3, #66	; 0x42
 800e4e4:	e03e      	b.n	800e564 <aci_gap_update_adv_data+0x9a>

  buffer[indx] = AdvLen;
 800e4e6:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800e4ea:	3348      	adds	r3, #72	; 0x48
 800e4ec:	443b      	add	r3, r7
 800e4ee:	79fa      	ldrb	r2, [r7, #7]
 800e4f0:	f803 2c40 	strb.w	r2, [r3, #-64]
  indx++;
 800e4f4:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800e4f8:	3301      	adds	r3, #1
 800e4fa:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  BLUENRG_memcpy(buffer + indx, AdvData, AdvLen);
 800e4fe:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800e502:	f107 0208 	add.w	r2, r7, #8
 800e506:	4413      	add	r3, r2
 800e508:	79fa      	ldrb	r2, [r7, #7]
 800e50a:	6839      	ldr	r1, [r7, #0]
 800e50c:	4618      	mov	r0, r3
 800e50e:	f000 ffa9 	bl	800f464 <memcpy>
  indx +=  AdvLen;
 800e512:	f897 2047 	ldrb.w	r2, [r7, #71]	; 0x47
 800e516:	79fb      	ldrb	r3, [r7, #7]
 800e518:	4413      	add	r3, r2
 800e51a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  BLUENRG_memset(&rq, 0, sizeof(rq));
 800e51e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800e522:	2218      	movs	r2, #24
 800e524:	2100      	movs	r1, #0
 800e526:	4618      	mov	r0, r3
 800e528:	f000 ffaa 	bl	800f480 <memset>
  rq.ogf = OGF_VENDOR_CMD;
 800e52c:	233f      	movs	r3, #63	; 0x3f
 800e52e:	85bb      	strh	r3, [r7, #44]	; 0x2c
  rq.ocf = OCF_GAP_UPDATE_ADV_DATA;
 800e530:	238e      	movs	r3, #142	; 0x8e
 800e532:	85fb      	strh	r3, [r7, #46]	; 0x2e
  rq.cparam = (void *)buffer;
 800e534:	f107 0308 	add.w	r3, r7, #8
 800e538:	637b      	str	r3, [r7, #52]	; 0x34
  rq.clen = indx;
 800e53a:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800e53e:	63bb      	str	r3, [r7, #56]	; 0x38
  rq.rparam = &status;
 800e540:	f107 032b 	add.w	r3, r7, #43	; 0x2b
 800e544:	63fb      	str	r3, [r7, #60]	; 0x3c
  rq.rlen = 1;
 800e546:	2301      	movs	r3, #1
 800e548:	643b      	str	r3, [r7, #64]	; 0x40
    
  if (hci_send_req(&rq, FALSE) < 0)
 800e54a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800e54e:	2100      	movs	r1, #0
 800e550:	4618      	mov	r0, r3
 800e552:	f000 fcb3 	bl	800eebc <hci_send_req>
 800e556:	4603      	mov	r3, r0
 800e558:	2b00      	cmp	r3, #0
 800e55a:	da01      	bge.n	800e560 <aci_gap_update_adv_data+0x96>
    return BLE_STATUS_TIMEOUT;
 800e55c:	23ff      	movs	r3, #255	; 0xff
 800e55e:	e001      	b.n	800e564 <aci_gap_update_adv_data+0x9a>
    
  return status;
 800e560:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800e564:	4618      	mov	r0, r3
 800e566:	3748      	adds	r7, #72	; 0x48
 800e568:	46bd      	mov	sp, r7
 800e56a:	bd80      	pop	{r7, pc}

0800e56c <aci_gatt_init>:
#define MIN(a,b)            ((a) < (b) )? (a) : (b)
#define MAX(a,b)            ((a) > (b) )? (a) : (b)


tBleStatus aci_gatt_init(void)
{
 800e56c:	b580      	push	{r7, lr}
 800e56e:	b088      	sub	sp, #32
 800e570:	af00      	add	r7, sp, #0
  struct hci_request rq;
  uint8_t status;

  BLUENRG_memset(&rq, 0, sizeof(rq));
 800e572:	f107 0308 	add.w	r3, r7, #8
 800e576:	2218      	movs	r2, #24
 800e578:	2100      	movs	r1, #0
 800e57a:	4618      	mov	r0, r3
 800e57c:	f000 ff80 	bl	800f480 <memset>
  rq.ogf = OGF_VENDOR_CMD;
 800e580:	233f      	movs	r3, #63	; 0x3f
 800e582:	813b      	strh	r3, [r7, #8]
  rq.ocf = OCF_GATT_INIT;
 800e584:	f240 1301 	movw	r3, #257	; 0x101
 800e588:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 800e58a:	1dfb      	adds	r3, r7, #7
 800e58c:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 800e58e:	2301      	movs	r3, #1
 800e590:	61fb      	str	r3, [r7, #28]

  if (hci_send_req(&rq, FALSE) < 0)
 800e592:	f107 0308 	add.w	r3, r7, #8
 800e596:	2100      	movs	r1, #0
 800e598:	4618      	mov	r0, r3
 800e59a:	f000 fc8f 	bl	800eebc <hci_send_req>
 800e59e:	4603      	mov	r3, r0
 800e5a0:	2b00      	cmp	r3, #0
 800e5a2:	da01      	bge.n	800e5a8 <aci_gatt_init+0x3c>
    return BLE_STATUS_TIMEOUT;
 800e5a4:	23ff      	movs	r3, #255	; 0xff
 800e5a6:	e000      	b.n	800e5aa <aci_gatt_init+0x3e>

  return status;
 800e5a8:	79fb      	ldrb	r3, [r7, #7]
}
 800e5aa:	4618      	mov	r0, r3
 800e5ac:	3720      	adds	r7, #32
 800e5ae:	46bd      	mov	sp, r7
 800e5b0:	bd80      	pop	{r7, pc}

0800e5b2 <aci_gatt_add_serv>:

tBleStatus aci_gatt_add_serv(uint8_t service_uuid_type, const uint8_t* service_uuid, uint8_t service_type, uint8_t max_attr_records, uint16_t *serviceHandle)
{
 800e5b2:	b580      	push	{r7, lr}
 800e5b4:	b090      	sub	sp, #64	; 0x40
 800e5b6:	af00      	add	r7, sp, #0
 800e5b8:	6039      	str	r1, [r7, #0]
 800e5ba:	4611      	mov	r1, r2
 800e5bc:	461a      	mov	r2, r3
 800e5be:	4603      	mov	r3, r0
 800e5c0:	71fb      	strb	r3, [r7, #7]
 800e5c2:	460b      	mov	r3, r1
 800e5c4:	71bb      	strb	r3, [r7, #6]
 800e5c6:	4613      	mov	r3, r2
 800e5c8:	717b      	strb	r3, [r7, #5]
  struct hci_request rq;
  gatt_add_serv_rp resp;    
  uint8_t buffer[19];
  uint8_t uuid_len;
  uint8_t indx = 0;
 800e5ca:	2300      	movs	r3, #0
 800e5cc:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
    
  buffer[indx] = service_uuid_type;
 800e5d0:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 800e5d4:	3340      	adds	r3, #64	; 0x40
 800e5d6:	443b      	add	r3, r7
 800e5d8:	79fa      	ldrb	r2, [r7, #7]
 800e5da:	f803 2c34 	strb.w	r2, [r3, #-52]
  indx++;
 800e5de:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 800e5e2:	3301      	adds	r3, #1
 800e5e4:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
    
  if(service_uuid_type == UUID_TYPE_16){
 800e5e8:	79fb      	ldrb	r3, [r7, #7]
 800e5ea:	2b01      	cmp	r3, #1
 800e5ec:	d103      	bne.n	800e5f6 <aci_gatt_add_serv+0x44>
    uuid_len = 2;
 800e5ee:	2302      	movs	r3, #2
 800e5f0:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 800e5f4:	e002      	b.n	800e5fc <aci_gatt_add_serv+0x4a>
  }
  else {
    uuid_len = 16;
 800e5f6:	2310      	movs	r3, #16
 800e5f8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  }        
  BLUENRG_memcpy(buffer + indx, service_uuid, uuid_len);
 800e5fc:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 800e600:	f107 020c 	add.w	r2, r7, #12
 800e604:	4413      	add	r3, r2
 800e606:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 800e60a:	6839      	ldr	r1, [r7, #0]
 800e60c:	4618      	mov	r0, r3
 800e60e:	f000 ff29 	bl	800f464 <memcpy>
  indx +=  uuid_len;
 800e612:	f897 203e 	ldrb.w	r2, [r7, #62]	; 0x3e
 800e616:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800e61a:	4413      	add	r3, r2
 800e61c:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
    
  buffer[indx] = service_type;
 800e620:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 800e624:	3340      	adds	r3, #64	; 0x40
 800e626:	443b      	add	r3, r7
 800e628:	79ba      	ldrb	r2, [r7, #6]
 800e62a:	f803 2c34 	strb.w	r2, [r3, #-52]
  indx++;
 800e62e:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 800e632:	3301      	adds	r3, #1
 800e634:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
    
  buffer[indx] = max_attr_records;
 800e638:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 800e63c:	3340      	adds	r3, #64	; 0x40
 800e63e:	443b      	add	r3, r7
 800e640:	797a      	ldrb	r2, [r7, #5]
 800e642:	f803 2c34 	strb.w	r2, [r3, #-52]
  indx++;
 800e646:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 800e64a:	3301      	adds	r3, #1
 800e64c:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
    
    
  BLUENRG_memset(&resp, 0, sizeof(resp));
 800e650:	f107 0320 	add.w	r3, r7, #32
 800e654:	2203      	movs	r2, #3
 800e656:	2100      	movs	r1, #0
 800e658:	4618      	mov	r0, r3
 800e65a:	f000 ff11 	bl	800f480 <memset>

  BLUENRG_memset(&rq, 0, sizeof(rq));
 800e65e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800e662:	2218      	movs	r2, #24
 800e664:	2100      	movs	r1, #0
 800e666:	4618      	mov	r0, r3
 800e668:	f000 ff0a 	bl	800f480 <memset>
  rq.ogf = OGF_VENDOR_CMD;
 800e66c:	233f      	movs	r3, #63	; 0x3f
 800e66e:	84bb      	strh	r3, [r7, #36]	; 0x24
  rq.ocf = OCF_GATT_ADD_SERV;
 800e670:	f44f 7381 	mov.w	r3, #258	; 0x102
 800e674:	84fb      	strh	r3, [r7, #38]	; 0x26
  rq.cparam = (void *)buffer;
 800e676:	f107 030c 	add.w	r3, r7, #12
 800e67a:	62fb      	str	r3, [r7, #44]	; 0x2c
  rq.clen = indx;
 800e67c:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 800e680:	633b      	str	r3, [r7, #48]	; 0x30
  rq.rparam = &resp;
 800e682:	f107 0320 	add.w	r3, r7, #32
 800e686:	637b      	str	r3, [r7, #52]	; 0x34
  rq.rlen = GATT_ADD_SERV_RP_SIZE;
 800e688:	2303      	movs	r3, #3
 800e68a:	63bb      	str	r3, [r7, #56]	; 0x38

  if (hci_send_req(&rq, FALSE) < 0)
 800e68c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800e690:	2100      	movs	r1, #0
 800e692:	4618      	mov	r0, r3
 800e694:	f000 fc12 	bl	800eebc <hci_send_req>
 800e698:	4603      	mov	r3, r0
 800e69a:	2b00      	cmp	r3, #0
 800e69c:	da01      	bge.n	800e6a2 <aci_gatt_add_serv+0xf0>
    return BLE_STATUS_TIMEOUT;
 800e69e:	23ff      	movs	r3, #255	; 0xff
 800e6a0:	e00c      	b.n	800e6bc <aci_gatt_add_serv+0x10a>

  if (resp.status) {
 800e6a2:	f897 3020 	ldrb.w	r3, [r7, #32]
 800e6a6:	2b00      	cmp	r3, #0
 800e6a8:	d002      	beq.n	800e6b0 <aci_gatt_add_serv+0xfe>
    return resp.status;
 800e6aa:	f897 3020 	ldrb.w	r3, [r7, #32]
 800e6ae:	e005      	b.n	800e6bc <aci_gatt_add_serv+0x10a>
  }
    
  *serviceHandle = btohs(resp.handle);
 800e6b0:	f8b7 3021 	ldrh.w	r3, [r7, #33]	; 0x21
 800e6b4:	b29a      	uxth	r2, r3
 800e6b6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e6b8:	801a      	strh	r2, [r3, #0]

  return 0;
 800e6ba:	2300      	movs	r3, #0
}
 800e6bc:	4618      	mov	r0, r3
 800e6be:	3740      	adds	r7, #64	; 0x40
 800e6c0:	46bd      	mov	sp, r7
 800e6c2:	bd80      	pop	{r7, pc}

0800e6c4 <aci_gatt_add_char>:
			     uint8_t secPermissions,
			     uint8_t gattEvtMask,
			     uint8_t encryKeySize,
			     uint8_t isVariable,
			     uint16_t* charHandle)                     
{
 800e6c4:	b580      	push	{r7, lr}
 800e6c6:	b092      	sub	sp, #72	; 0x48
 800e6c8:	af00      	add	r7, sp, #0
 800e6ca:	603a      	str	r2, [r7, #0]
 800e6cc:	461a      	mov	r2, r3
 800e6ce:	4603      	mov	r3, r0
 800e6d0:	80fb      	strh	r3, [r7, #6]
 800e6d2:	460b      	mov	r3, r1
 800e6d4:	717b      	strb	r3, [r7, #5]
 800e6d6:	4613      	mov	r3, r2
 800e6d8:	713b      	strb	r3, [r7, #4]
  struct hci_request rq;
  gatt_add_serv_rp resp;
  uint8_t buffer[25];
  uint8_t uuid_len;
  uint8_t indx = 0;
 800e6da:	2300      	movs	r3, #0
 800e6dc:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
    
  serviceHandle = htobs(serviceHandle);
 800e6e0:	88fb      	ldrh	r3, [r7, #6]
 800e6e2:	80fb      	strh	r3, [r7, #6]
  BLUENRG_memcpy(buffer + indx, &serviceHandle, 2);
 800e6e4:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 800e6e8:	f107 020c 	add.w	r2, r7, #12
 800e6ec:	4413      	add	r3, r2
 800e6ee:	88fa      	ldrh	r2, [r7, #6]
 800e6f0:	801a      	strh	r2, [r3, #0]
  indx += 2;
 800e6f2:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 800e6f6:	3302      	adds	r3, #2
 800e6f8:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
    
  buffer[indx] = charUuidType;
 800e6fc:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 800e700:	3348      	adds	r3, #72	; 0x48
 800e702:	443b      	add	r3, r7
 800e704:	797a      	ldrb	r2, [r7, #5]
 800e706:	f803 2c3c 	strb.w	r2, [r3, #-60]
  indx++;
 800e70a:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 800e70e:	3301      	adds	r3, #1
 800e710:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
    
  if(charUuidType == UUID_TYPE_16){
 800e714:	797b      	ldrb	r3, [r7, #5]
 800e716:	2b01      	cmp	r3, #1
 800e718:	d103      	bne.n	800e722 <aci_gatt_add_char+0x5e>
    uuid_len = 2;
 800e71a:	2302      	movs	r3, #2
 800e71c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 800e720:	e002      	b.n	800e728 <aci_gatt_add_char+0x64>
  }
  else {
    uuid_len = 16;
 800e722:	2310      	movs	r3, #16
 800e724:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  }        
  BLUENRG_memcpy(buffer + indx, charUuid, uuid_len);
 800e728:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 800e72c:	f107 020c 	add.w	r2, r7, #12
 800e730:	4413      	add	r3, r2
 800e732:	f897 2047 	ldrb.w	r2, [r7, #71]	; 0x47
 800e736:	6839      	ldr	r1, [r7, #0]
 800e738:	4618      	mov	r0, r3
 800e73a:	f000 fe93 	bl	800f464 <memcpy>
  indx +=  uuid_len;
 800e73e:	f897 2046 	ldrb.w	r2, [r7, #70]	; 0x46
 800e742:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800e746:	4413      	add	r3, r2
 800e748:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
    
  buffer[indx] = charValueLen;
 800e74c:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 800e750:	3348      	adds	r3, #72	; 0x48
 800e752:	443b      	add	r3, r7
 800e754:	793a      	ldrb	r2, [r7, #4]
 800e756:	f803 2c3c 	strb.w	r2, [r3, #-60]
  indx++;
 800e75a:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 800e75e:	3301      	adds	r3, #1
 800e760:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
    
  buffer[indx] = charProperties;
 800e764:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 800e768:	3348      	adds	r3, #72	; 0x48
 800e76a:	443b      	add	r3, r7
 800e76c:	f897 2050 	ldrb.w	r2, [r7, #80]	; 0x50
 800e770:	f803 2c3c 	strb.w	r2, [r3, #-60]
  indx++;
 800e774:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 800e778:	3301      	adds	r3, #1
 800e77a:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
    
  buffer[indx] = secPermissions;
 800e77e:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 800e782:	3348      	adds	r3, #72	; 0x48
 800e784:	443b      	add	r3, r7
 800e786:	f897 2054 	ldrb.w	r2, [r7, #84]	; 0x54
 800e78a:	f803 2c3c 	strb.w	r2, [r3, #-60]
  indx++;
 800e78e:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 800e792:	3301      	adds	r3, #1
 800e794:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
    
  buffer[indx] = gattEvtMask;
 800e798:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 800e79c:	3348      	adds	r3, #72	; 0x48
 800e79e:	443b      	add	r3, r7
 800e7a0:	f897 2058 	ldrb.w	r2, [r7, #88]	; 0x58
 800e7a4:	f803 2c3c 	strb.w	r2, [r3, #-60]
  indx++;
 800e7a8:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 800e7ac:	3301      	adds	r3, #1
 800e7ae:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
    
  buffer[indx] = encryKeySize;
 800e7b2:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 800e7b6:	3348      	adds	r3, #72	; 0x48
 800e7b8:	443b      	add	r3, r7
 800e7ba:	f897 205c 	ldrb.w	r2, [r7, #92]	; 0x5c
 800e7be:	f803 2c3c 	strb.w	r2, [r3, #-60]
  indx++;
 800e7c2:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 800e7c6:	3301      	adds	r3, #1
 800e7c8:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
    
  buffer[indx] = isVariable;
 800e7cc:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 800e7d0:	3348      	adds	r3, #72	; 0x48
 800e7d2:	443b      	add	r3, r7
 800e7d4:	f897 2060 	ldrb.w	r2, [r7, #96]	; 0x60
 800e7d8:	f803 2c3c 	strb.w	r2, [r3, #-60]
  indx++;
 800e7dc:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 800e7e0:	3301      	adds	r3, #1
 800e7e2:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
    
  BLUENRG_memset(&resp, 0, sizeof(resp));
 800e7e6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800e7ea:	2203      	movs	r2, #3
 800e7ec:	2100      	movs	r1, #0
 800e7ee:	4618      	mov	r0, r3
 800e7f0:	f000 fe46 	bl	800f480 <memset>

  BLUENRG_memset(&rq, 0, sizeof(rq));
 800e7f4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800e7f8:	2218      	movs	r2, #24
 800e7fa:	2100      	movs	r1, #0
 800e7fc:	4618      	mov	r0, r3
 800e7fe:	f000 fe3f 	bl	800f480 <memset>
  rq.ogf = OGF_VENDOR_CMD;
 800e802:	233f      	movs	r3, #63	; 0x3f
 800e804:	85bb      	strh	r3, [r7, #44]	; 0x2c
  rq.ocf = OCF_GATT_ADD_CHAR;
 800e806:	f44f 7382 	mov.w	r3, #260	; 0x104
 800e80a:	85fb      	strh	r3, [r7, #46]	; 0x2e
  rq.cparam = (void *)buffer;
 800e80c:	f107 030c 	add.w	r3, r7, #12
 800e810:	637b      	str	r3, [r7, #52]	; 0x34
  rq.clen = indx;
 800e812:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 800e816:	63bb      	str	r3, [r7, #56]	; 0x38
  rq.rparam = &resp;
 800e818:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800e81c:	63fb      	str	r3, [r7, #60]	; 0x3c
  rq.rlen = GATT_ADD_CHAR_RP_SIZE;
 800e81e:	2303      	movs	r3, #3
 800e820:	643b      	str	r3, [r7, #64]	; 0x40

  if (hci_send_req(&rq, FALSE) < 0)
 800e822:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800e826:	2100      	movs	r1, #0
 800e828:	4618      	mov	r0, r3
 800e82a:	f000 fb47 	bl	800eebc <hci_send_req>
 800e82e:	4603      	mov	r3, r0
 800e830:	2b00      	cmp	r3, #0
 800e832:	da01      	bge.n	800e838 <aci_gatt_add_char+0x174>
    return BLE_STATUS_TIMEOUT;
 800e834:	23ff      	movs	r3, #255	; 0xff
 800e836:	e00c      	b.n	800e852 <aci_gatt_add_char+0x18e>

  if (resp.status) {
 800e838:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800e83c:	2b00      	cmp	r3, #0
 800e83e:	d002      	beq.n	800e846 <aci_gatt_add_char+0x182>
    return resp.status;
 800e840:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800e844:	e005      	b.n	800e852 <aci_gatt_add_char+0x18e>
  }
    
  *charHandle = btohs(resp.handle);
 800e846:	f8b7 3029 	ldrh.w	r3, [r7, #41]	; 0x29
 800e84a:	b29a      	uxth	r2, r3
 800e84c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800e84e:	801a      	strh	r2, [r3, #0]

  return 0;
 800e850:	2300      	movs	r3, #0
}
 800e852:	4618      	mov	r0, r3
 800e854:	3748      	adds	r7, #72	; 0x48
 800e856:	46bd      	mov	sp, r7
 800e858:	bd80      	pop	{r7, pc}

0800e85a <aci_gatt_update_char_value>:
tBleStatus aci_gatt_update_char_value(uint16_t servHandle, 
				      uint16_t charHandle,
				      uint8_t charValOffset,
				      uint8_t charValueLen,   
                                      const void *charValue)
{
 800e85a:	b590      	push	{r4, r7, lr}
 800e85c:	b0ab      	sub	sp, #172	; 0xac
 800e85e:	af00      	add	r7, sp, #0
 800e860:	4604      	mov	r4, r0
 800e862:	4608      	mov	r0, r1
 800e864:	4611      	mov	r1, r2
 800e866:	461a      	mov	r2, r3
 800e868:	4623      	mov	r3, r4
 800e86a:	80fb      	strh	r3, [r7, #6]
 800e86c:	4603      	mov	r3, r0
 800e86e:	80bb      	strh	r3, [r7, #4]
 800e870:	460b      	mov	r3, r1
 800e872:	70fb      	strb	r3, [r7, #3]
 800e874:	4613      	mov	r3, r2
 800e876:	70bb      	strb	r3, [r7, #2]
  struct hci_request rq;
  uint8_t status;
  uint8_t buffer[HCI_MAX_PAYLOAD_SIZE];
  uint8_t indx = 0;
 800e878:	2300      	movs	r3, #0
 800e87a:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
    
  if ((charValueLen+6) > HCI_MAX_PAYLOAD_SIZE)
 800e87e:	78bb      	ldrb	r3, [r7, #2]
 800e880:	2b7a      	cmp	r3, #122	; 0x7a
 800e882:	d901      	bls.n	800e888 <aci_gatt_update_char_value+0x2e>
    return BLE_STATUS_INVALID_PARAMS;
 800e884:	2342      	movs	r3, #66	; 0x42
 800e886:	e074      	b.n	800e972 <aci_gatt_update_char_value+0x118>

  servHandle = htobs(servHandle);
 800e888:	88fb      	ldrh	r3, [r7, #6]
 800e88a:	80fb      	strh	r3, [r7, #6]
  BLUENRG_memcpy(buffer + indx, &servHandle, 2);
 800e88c:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 800e890:	f107 0208 	add.w	r2, r7, #8
 800e894:	4413      	add	r3, r2
 800e896:	88fa      	ldrh	r2, [r7, #6]
 800e898:	801a      	strh	r2, [r3, #0]
  indx += 2;
 800e89a:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 800e89e:	3302      	adds	r3, #2
 800e8a0:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
    
  charHandle = htobs(charHandle);
 800e8a4:	88bb      	ldrh	r3, [r7, #4]
 800e8a6:	80bb      	strh	r3, [r7, #4]
  BLUENRG_memcpy(buffer + indx, &charHandle, 2);
 800e8a8:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 800e8ac:	f107 0208 	add.w	r2, r7, #8
 800e8b0:	4413      	add	r3, r2
 800e8b2:	88ba      	ldrh	r2, [r7, #4]
 800e8b4:	801a      	strh	r2, [r3, #0]
  indx += 2;
 800e8b6:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 800e8ba:	3302      	adds	r3, #2
 800e8bc:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
    
  buffer[indx] = charValOffset;
 800e8c0:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 800e8c4:	33a8      	adds	r3, #168	; 0xa8
 800e8c6:	443b      	add	r3, r7
 800e8c8:	78fa      	ldrb	r2, [r7, #3]
 800e8ca:	f803 2ca0 	strb.w	r2, [r3, #-160]
  indx++;
 800e8ce:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 800e8d2:	3301      	adds	r3, #1
 800e8d4:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
    
  buffer[indx] = charValueLen;
 800e8d8:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 800e8dc:	33a8      	adds	r3, #168	; 0xa8
 800e8de:	443b      	add	r3, r7
 800e8e0:	78ba      	ldrb	r2, [r7, #2]
 800e8e2:	f803 2ca0 	strb.w	r2, [r3, #-160]
  indx++;
 800e8e6:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 800e8ea:	3301      	adds	r3, #1
 800e8ec:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
        
  BLUENRG_memcpy(buffer + indx, charValue, charValueLen);
 800e8f0:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 800e8f4:	f107 0208 	add.w	r2, r7, #8
 800e8f8:	4413      	add	r3, r2
 800e8fa:	78ba      	ldrb	r2, [r7, #2]
 800e8fc:	f8d7 10b8 	ldr.w	r1, [r7, #184]	; 0xb8
 800e900:	4618      	mov	r0, r3
 800e902:	f000 fdaf 	bl	800f464 <memcpy>
  indx +=  charValueLen;
 800e906:	f897 20a7 	ldrb.w	r2, [r7, #167]	; 0xa7
 800e90a:	78bb      	ldrb	r3, [r7, #2]
 800e90c:	4413      	add	r3, r2
 800e90e:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7

  BLUENRG_memset(&rq, 0, sizeof(rq));
 800e912:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800e916:	2218      	movs	r2, #24
 800e918:	2100      	movs	r1, #0
 800e91a:	4618      	mov	r0, r3
 800e91c:	f000 fdb0 	bl	800f480 <memset>
  rq.ogf = OGF_VENDOR_CMD;
 800e920:	233f      	movs	r3, #63	; 0x3f
 800e922:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
  rq.ocf = OCF_GATT_UPD_CHAR_VAL;
 800e926:	f44f 7383 	mov.w	r3, #262	; 0x106
 800e92a:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
  rq.cparam = (void *)buffer;
 800e92e:	f107 0308 	add.w	r3, r7, #8
 800e932:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  rq.clen = indx;
 800e936:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 800e93a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  rq.rparam = &status;
 800e93e:	f107 038b 	add.w	r3, r7, #139	; 0x8b
 800e942:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  rq.rlen = 1;
 800e946:	2301      	movs	r3, #1
 800e948:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

  if (hci_send_req(&rq, FALSE) < 0)
 800e94c:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800e950:	2100      	movs	r1, #0
 800e952:	4618      	mov	r0, r3
 800e954:	f000 fab2 	bl	800eebc <hci_send_req>
 800e958:	4603      	mov	r3, r0
 800e95a:	2b00      	cmp	r3, #0
 800e95c:	da01      	bge.n	800e962 <aci_gatt_update_char_value+0x108>
    return BLE_STATUS_TIMEOUT;
 800e95e:	23ff      	movs	r3, #255	; 0xff
 800e960:	e007      	b.n	800e972 <aci_gatt_update_char_value+0x118>

  if (status) {
 800e962:	f897 308b 	ldrb.w	r3, [r7, #139]	; 0x8b
 800e966:	2b00      	cmp	r3, #0
 800e968:	d002      	beq.n	800e970 <aci_gatt_update_char_value+0x116>
    return status;
 800e96a:	f897 308b 	ldrb.w	r3, [r7, #139]	; 0x8b
 800e96e:	e000      	b.n	800e972 <aci_gatt_update_char_value+0x118>
  }

  return 0;
 800e970:	2300      	movs	r3, #0
}
 800e972:	4618      	mov	r0, r3
 800e974:	37ac      	adds	r7, #172	; 0xac
 800e976:	46bd      	mov	sp, r7
 800e978:	bd90      	pop	{r4, r7, pc}

0800e97a <aci_gatt_allow_read>:

  return 0;
}

tBleStatus aci_gatt_allow_read(uint16_t conn_handle)
{
 800e97a:	b580      	push	{r7, lr}
 800e97c:	b08a      	sub	sp, #40	; 0x28
 800e97e:	af00      	add	r7, sp, #0
 800e980:	4603      	mov	r3, r0
 800e982:	80fb      	strh	r3, [r7, #6]
    struct hci_request rq;
    gatt_allow_read_cp cp;
    uint8_t status;
    
    cp.conn_handle = htobs(conn_handle);
 800e984:	88fb      	ldrh	r3, [r7, #6]
 800e986:	81bb      	strh	r3, [r7, #12]

    BLUENRG_memset(&rq, 0, sizeof(rq));
 800e988:	f107 0310 	add.w	r3, r7, #16
 800e98c:	2218      	movs	r2, #24
 800e98e:	2100      	movs	r1, #0
 800e990:	4618      	mov	r0, r3
 800e992:	f000 fd75 	bl	800f480 <memset>
    rq.ogf = OGF_VENDOR_CMD;
 800e996:	233f      	movs	r3, #63	; 0x3f
 800e998:	823b      	strh	r3, [r7, #16]
    rq.ocf = OCF_GATT_ALLOW_READ;
 800e99a:	f240 1327 	movw	r3, #295	; 0x127
 800e99e:	827b      	strh	r3, [r7, #18]
    rq.cparam = &cp;
 800e9a0:	f107 030c 	add.w	r3, r7, #12
 800e9a4:	61bb      	str	r3, [r7, #24]
    rq.clen = GATT_ALLOW_READ_CP_SIZE;
 800e9a6:	2302      	movs	r3, #2
 800e9a8:	61fb      	str	r3, [r7, #28]
    rq.rparam = &status;
 800e9aa:	f107 030b 	add.w	r3, r7, #11
 800e9ae:	623b      	str	r3, [r7, #32]
    rq.rlen = 1;
 800e9b0:	2301      	movs	r3, #1
 800e9b2:	627b      	str	r3, [r7, #36]	; 0x24

    if (hci_send_req(&rq, FALSE) < 0)
 800e9b4:	f107 0310 	add.w	r3, r7, #16
 800e9b8:	2100      	movs	r1, #0
 800e9ba:	4618      	mov	r0, r3
 800e9bc:	f000 fa7e 	bl	800eebc <hci_send_req>
 800e9c0:	4603      	mov	r3, r0
 800e9c2:	2b00      	cmp	r3, #0
 800e9c4:	da01      	bge.n	800e9ca <aci_gatt_allow_read+0x50>
      return BLE_STATUS_TIMEOUT;
 800e9c6:	23ff      	movs	r3, #255	; 0xff
 800e9c8:	e000      	b.n	800e9cc <aci_gatt_allow_read+0x52>

    return status;
 800e9ca:	7afb      	ldrb	r3, [r7, #11]
}
 800e9cc:	4618      	mov	r0, r3
 800e9ce:	3728      	adds	r7, #40	; 0x28
 800e9d0:	46bd      	mov	sp, r7
 800e9d2:	bd80      	pop	{r7, pc}

0800e9d4 <aci_hal_read_config_data>:

  return status;
}

tBleStatus aci_hal_read_config_data(uint8_t offset, uint16_t data_len, uint8_t *data_len_out_p, uint8_t *data)
{
 800e9d4:	b580      	push	{r7, lr}
 800e9d6:	b0ac      	sub	sp, #176	; 0xb0
 800e9d8:	af00      	add	r7, sp, #0
 800e9da:	60ba      	str	r2, [r7, #8]
 800e9dc:	607b      	str	r3, [r7, #4]
 800e9de:	4603      	mov	r3, r0
 800e9e0:	73fb      	strb	r3, [r7, #15]
 800e9e2:	460b      	mov	r3, r1
 800e9e4:	81bb      	strh	r3, [r7, #12]
  struct hci_request rq;
  hal_read_config_data_cp cp;
  hal_read_config_data_rp rp;
  
  cp.offset = offset;
 800e9e6:	7bfb      	ldrb	r3, [r7, #15]
 800e9e8:	f887 3094 	strb.w	r3, [r7, #148]	; 0x94
  
  BLUENRG_memset(&rq, 0, sizeof(rq));
 800e9ec:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800e9f0:	2218      	movs	r2, #24
 800e9f2:	2100      	movs	r1, #0
 800e9f4:	4618      	mov	r0, r3
 800e9f6:	f000 fd43 	bl	800f480 <memset>
  rq.ogf = OGF_VENDOR_CMD;
 800e9fa:	233f      	movs	r3, #63	; 0x3f
 800e9fc:	f8a7 3098 	strh.w	r3, [r7, #152]	; 0x98
  rq.ocf = OCF_HAL_READ_CONFIG_DATA;
 800ea00:	230d      	movs	r3, #13
 800ea02:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
  rq.cparam = &cp;
 800ea06:	f107 0394 	add.w	r3, r7, #148	; 0x94
 800ea0a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  rq.clen = sizeof(cp);
 800ea0e:	2301      	movs	r3, #1
 800ea10:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  rq.rparam = &rp;
 800ea14:	f107 0314 	add.w	r3, r7, #20
 800ea18:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  rq.rlen = sizeof(rp);
 800ea1c:	2380      	movs	r3, #128	; 0x80
 800ea1e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  
  if (hci_send_req(&rq, FALSE) < 0)
 800ea22:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800ea26:	2100      	movs	r1, #0
 800ea28:	4618      	mov	r0, r3
 800ea2a:	f000 fa47 	bl	800eebc <hci_send_req>
 800ea2e:	4603      	mov	r3, r0
 800ea30:	2b00      	cmp	r3, #0
 800ea32:	da01      	bge.n	800ea38 <aci_hal_read_config_data+0x64>
    return BLE_STATUS_TIMEOUT;
 800ea34:	23ff      	movs	r3, #255	; 0xff
 800ea36:	e01e      	b.n	800ea76 <aci_hal_read_config_data+0xa2>
  
  if(rp.status)
 800ea38:	7d3b      	ldrb	r3, [r7, #20]
 800ea3a:	2b00      	cmp	r3, #0
 800ea3c:	d001      	beq.n	800ea42 <aci_hal_read_config_data+0x6e>
    return rp.status;
 800ea3e:	7d3b      	ldrb	r3, [r7, #20]
 800ea40:	e019      	b.n	800ea76 <aci_hal_read_config_data+0xa2>
  
  *data_len_out_p = rq.rlen-1;
 800ea42:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800ea46:	b2db      	uxtb	r3, r3
 800ea48:	3b01      	subs	r3, #1
 800ea4a:	b2da      	uxtb	r2, r3
 800ea4c:	68bb      	ldr	r3, [r7, #8]
 800ea4e:	701a      	strb	r2, [r3, #0]
  
  BLUENRG_memcpy(data, rp.data, MIN(data_len, *data_len_out_p));
 800ea50:	68bb      	ldr	r3, [r7, #8]
 800ea52:	781b      	ldrb	r3, [r3, #0]
 800ea54:	b29b      	uxth	r3, r3
 800ea56:	89ba      	ldrh	r2, [r7, #12]
 800ea58:	429a      	cmp	r2, r3
 800ea5a:	d201      	bcs.n	800ea60 <aci_hal_read_config_data+0x8c>
 800ea5c:	89ba      	ldrh	r2, [r7, #12]
 800ea5e:	e002      	b.n	800ea66 <aci_hal_read_config_data+0x92>
 800ea60:	68bb      	ldr	r3, [r7, #8]
 800ea62:	781b      	ldrb	r3, [r3, #0]
 800ea64:	461a      	mov	r2, r3
 800ea66:	f107 0314 	add.w	r3, r7, #20
 800ea6a:	3301      	adds	r3, #1
 800ea6c:	4619      	mov	r1, r3
 800ea6e:	6878      	ldr	r0, [r7, #4]
 800ea70:	f000 fcf8 	bl	800f464 <memcpy>
  
  return 0;
 800ea74:	2300      	movs	r3, #0
}
 800ea76:	4618      	mov	r0, r3
 800ea78:	37b0      	adds	r7, #176	; 0xb0
 800ea7a:	46bd      	mov	sp, r7
 800ea7c:	bd80      	pop	{r7, pc}

0800ea7e <aci_hal_set_tx_power_level>:

tBleStatus aci_hal_set_tx_power_level(uint8_t en_high_power, uint8_t pa_level)
{
 800ea7e:	b580      	push	{r7, lr}
 800ea80:	b08a      	sub	sp, #40	; 0x28
 800ea82:	af00      	add	r7, sp, #0
 800ea84:	4603      	mov	r3, r0
 800ea86:	460a      	mov	r2, r1
 800ea88:	71fb      	strb	r3, [r7, #7]
 800ea8a:	4613      	mov	r3, r2
 800ea8c:	71bb      	strb	r3, [r7, #6]
  struct hci_request rq;
  hal_set_tx_power_level_cp cp;    
  uint8_t status;
    
  cp.en_high_power = en_high_power;
 800ea8e:	79fb      	ldrb	r3, [r7, #7]
 800ea90:	733b      	strb	r3, [r7, #12]
  cp.pa_level = pa_level;
 800ea92:	79bb      	ldrb	r3, [r7, #6]
 800ea94:	737b      	strb	r3, [r7, #13]

  BLUENRG_memset(&rq, 0, sizeof(rq));
 800ea96:	f107 0310 	add.w	r3, r7, #16
 800ea9a:	2218      	movs	r2, #24
 800ea9c:	2100      	movs	r1, #0
 800ea9e:	4618      	mov	r0, r3
 800eaa0:	f000 fcee 	bl	800f480 <memset>
  rq.ogf = OGF_VENDOR_CMD;
 800eaa4:	233f      	movs	r3, #63	; 0x3f
 800eaa6:	823b      	strh	r3, [r7, #16]
  rq.ocf = OCF_HAL_SET_TX_POWER_LEVEL;
 800eaa8:	230f      	movs	r3, #15
 800eaaa:	827b      	strh	r3, [r7, #18]
  rq.cparam = &cp;
 800eaac:	f107 030c 	add.w	r3, r7, #12
 800eab0:	61bb      	str	r3, [r7, #24]
  rq.clen = HAL_SET_TX_POWER_LEVEL_CP_SIZE;
 800eab2:	2302      	movs	r3, #2
 800eab4:	61fb      	str	r3, [r7, #28]
  rq.rparam = &status;
 800eab6:	f107 030b 	add.w	r3, r7, #11
 800eaba:	623b      	str	r3, [r7, #32]
  rq.rlen = 1;
 800eabc:	2301      	movs	r3, #1
 800eabe:	627b      	str	r3, [r7, #36]	; 0x24

  if (hci_send_req(&rq, FALSE) < 0)
 800eac0:	f107 0310 	add.w	r3, r7, #16
 800eac4:	2100      	movs	r1, #0
 800eac6:	4618      	mov	r0, r3
 800eac8:	f000 f9f8 	bl	800eebc <hci_send_req>
 800eacc:	4603      	mov	r3, r0
 800eace:	2b00      	cmp	r3, #0
 800ead0:	da01      	bge.n	800ead6 <aci_hal_set_tx_power_level+0x58>
    return BLE_STATUS_TIMEOUT;
 800ead2:	23ff      	movs	r3, #255	; 0xff
 800ead4:	e000      	b.n	800ead8 <aci_hal_set_tx_power_level+0x5a>

  return status;
 800ead6:	7afb      	ldrb	r3, [r7, #11]
}
 800ead8:	4618      	mov	r0, r3
 800eada:	3728      	adds	r7, #40	; 0x28
 800eadc:	46bd      	mov	sp, r7
 800eade:	bd80      	pop	{r7, pc}

0800eae0 <getBlueNRGVersion>:
#include "hci.h"
#include "hci_le.h"
#include "string.h"

uint8_t getBlueNRGVersion(uint8_t *hwVersion, uint16_t *fwVersion)
{
 800eae0:	b590      	push	{r4, r7, lr}
 800eae2:	b089      	sub	sp, #36	; 0x24
 800eae4:	af02      	add	r7, sp, #8
 800eae6:	6078      	str	r0, [r7, #4]
 800eae8:	6039      	str	r1, [r7, #0]
  uint8_t status;
  uint8_t hci_version, lmp_pal_version;
  uint16_t hci_revision, manufacturer_name, lmp_pal_subversion;

  status = hci_le_read_local_version(&hci_version, &hci_revision, &lmp_pal_version, 
 800eaea:	f107 0410 	add.w	r4, r7, #16
 800eaee:	f107 0215 	add.w	r2, r7, #21
 800eaf2:	f107 0112 	add.w	r1, r7, #18
 800eaf6:	f107 0016 	add.w	r0, r7, #22
 800eafa:	f107 030e 	add.w	r3, r7, #14
 800eafe:	9300      	str	r3, [sp, #0]
 800eb00:	4623      	mov	r3, r4
 800eb02:	f000 f853 	bl	800ebac <hci_le_read_local_version>
 800eb06:	4603      	mov	r3, r0
 800eb08:	75fb      	strb	r3, [r7, #23]
                                     &manufacturer_name, &lmp_pal_subversion);

  if (status == BLE_STATUS_SUCCESS) {
 800eb0a:	7dfb      	ldrb	r3, [r7, #23]
 800eb0c:	2b00      	cmp	r3, #0
 800eb0e:	d126      	bne.n	800eb5e <getBlueNRGVersion+0x7e>
    *hwVersion = hci_revision >> 8;
 800eb10:	8a7b      	ldrh	r3, [r7, #18]
 800eb12:	0a1b      	lsrs	r3, r3, #8
 800eb14:	b29b      	uxth	r3, r3
 800eb16:	b2da      	uxtb	r2, r3
 800eb18:	687b      	ldr	r3, [r7, #4]
 800eb1a:	701a      	strb	r2, [r3, #0]
    *fwVersion = (hci_revision & 0xFF) << 8;              // Major Version Number
 800eb1c:	8a7b      	ldrh	r3, [r7, #18]
 800eb1e:	021b      	lsls	r3, r3, #8
 800eb20:	b29a      	uxth	r2, r3
 800eb22:	683b      	ldr	r3, [r7, #0]
 800eb24:	801a      	strh	r2, [r3, #0]
    *fwVersion |= ((lmp_pal_subversion >> 4) & 0xF) << 4; // Minor Version Number
 800eb26:	683b      	ldr	r3, [r7, #0]
 800eb28:	881b      	ldrh	r3, [r3, #0]
 800eb2a:	b21a      	sxth	r2, r3
 800eb2c:	89fb      	ldrh	r3, [r7, #14]
 800eb2e:	091b      	lsrs	r3, r3, #4
 800eb30:	b29b      	uxth	r3, r3
 800eb32:	011b      	lsls	r3, r3, #4
 800eb34:	b21b      	sxth	r3, r3
 800eb36:	b2db      	uxtb	r3, r3
 800eb38:	b21b      	sxth	r3, r3
 800eb3a:	4313      	orrs	r3, r2
 800eb3c:	b21b      	sxth	r3, r3
 800eb3e:	b29a      	uxth	r2, r3
 800eb40:	683b      	ldr	r3, [r7, #0]
 800eb42:	801a      	strh	r2, [r3, #0]
    *fwVersion |= lmp_pal_subversion & 0xF;               // Patch Version Number
 800eb44:	683b      	ldr	r3, [r7, #0]
 800eb46:	881b      	ldrh	r3, [r3, #0]
 800eb48:	b21a      	sxth	r2, r3
 800eb4a:	89fb      	ldrh	r3, [r7, #14]
 800eb4c:	b21b      	sxth	r3, r3
 800eb4e:	f003 030f 	and.w	r3, r3, #15
 800eb52:	b21b      	sxth	r3, r3
 800eb54:	4313      	orrs	r3, r2
 800eb56:	b21b      	sxth	r3, r3
 800eb58:	b29a      	uxth	r2, r3
 800eb5a:	683b      	ldr	r3, [r7, #0]
 800eb5c:	801a      	strh	r2, [r3, #0]
  }
  return status;
 800eb5e:	7dfb      	ldrb	r3, [r7, #23]
}
 800eb60:	4618      	mov	r0, r3
 800eb62:	371c      	adds	r7, #28
 800eb64:	46bd      	mov	sp, r7
 800eb66:	bd90      	pop	{r4, r7, pc}

0800eb68 <hci_reset>:

#define MIN(a,b)            ((a) < (b) )? (a) : (b)
#define MAX(a,b)            ((a) > (b) )? (a) : (b)

int hci_reset(void)
{
 800eb68:	b580      	push	{r7, lr}
 800eb6a:	b088      	sub	sp, #32
 800eb6c:	af00      	add	r7, sp, #0
  struct hci_request rq;
  uint8_t status;
  
  BLUENRG_memset(&rq, 0, sizeof(rq));
 800eb6e:	f107 0308 	add.w	r3, r7, #8
 800eb72:	2218      	movs	r2, #24
 800eb74:	2100      	movs	r1, #0
 800eb76:	4618      	mov	r0, r3
 800eb78:	f000 fc82 	bl	800f480 <memset>
  rq.ogf = OGF_HOST_CTL;
 800eb7c:	2303      	movs	r3, #3
 800eb7e:	813b      	strh	r3, [r7, #8]
  rq.ocf = OCF_RESET;
 800eb80:	2303      	movs	r3, #3
 800eb82:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 800eb84:	1dfb      	adds	r3, r7, #7
 800eb86:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 800eb88:	2301      	movs	r3, #1
 800eb8a:	61fb      	str	r3, [r7, #28]
  
  if (hci_send_req(&rq, FALSE) < 0)
 800eb8c:	f107 0308 	add.w	r3, r7, #8
 800eb90:	2100      	movs	r1, #0
 800eb92:	4618      	mov	r0, r3
 800eb94:	f000 f992 	bl	800eebc <hci_send_req>
 800eb98:	4603      	mov	r3, r0
 800eb9a:	2b00      	cmp	r3, #0
 800eb9c:	da01      	bge.n	800eba2 <hci_reset+0x3a>
    return BLE_STATUS_TIMEOUT;
 800eb9e:	23ff      	movs	r3, #255	; 0xff
 800eba0:	e000      	b.n	800eba4 <hci_reset+0x3c>
  
  return status;  
 800eba2:	79fb      	ldrb	r3, [r7, #7]
}
 800eba4:	4618      	mov	r0, r3
 800eba6:	3720      	adds	r7, #32
 800eba8:	46bd      	mov	sp, r7
 800ebaa:	bd80      	pop	{r7, pc}

0800ebac <hci_le_read_local_version>:
  return status;  
}

int hci_le_read_local_version(uint8_t *hci_version, uint16_t *hci_revision, uint8_t *lmp_pal_version, 
                              uint16_t *manufacturer_name, uint16_t *lmp_pal_subversion)
{
 800ebac:	b580      	push	{r7, lr}
 800ebae:	b08e      	sub	sp, #56	; 0x38
 800ebb0:	af00      	add	r7, sp, #0
 800ebb2:	60f8      	str	r0, [r7, #12]
 800ebb4:	60b9      	str	r1, [r7, #8]
 800ebb6:	607a      	str	r2, [r7, #4]
 800ebb8:	603b      	str	r3, [r7, #0]
  struct hci_request rq;
  read_local_version_rp resp;
  
  BLUENRG_memset(&resp, 0, sizeof(resp));
 800ebba:	f107 0314 	add.w	r3, r7, #20
 800ebbe:	2209      	movs	r2, #9
 800ebc0:	2100      	movs	r1, #0
 800ebc2:	4618      	mov	r0, r3
 800ebc4:	f000 fc5c 	bl	800f480 <memset>
  
  BLUENRG_memset(&rq, 0, sizeof(rq));
 800ebc8:	f107 0320 	add.w	r3, r7, #32
 800ebcc:	2218      	movs	r2, #24
 800ebce:	2100      	movs	r1, #0
 800ebd0:	4618      	mov	r0, r3
 800ebd2:	f000 fc55 	bl	800f480 <memset>
  rq.ogf = OGF_INFO_PARAM;
 800ebd6:	2304      	movs	r3, #4
 800ebd8:	843b      	strh	r3, [r7, #32]
  rq.ocf = OCF_READ_LOCAL_VERSION;
 800ebda:	2301      	movs	r3, #1
 800ebdc:	847b      	strh	r3, [r7, #34]	; 0x22
  rq.cparam = NULL;
 800ebde:	2300      	movs	r3, #0
 800ebe0:	62bb      	str	r3, [r7, #40]	; 0x28
  rq.clen = 0;
 800ebe2:	2300      	movs	r3, #0
 800ebe4:	62fb      	str	r3, [r7, #44]	; 0x2c
  rq.rparam = &resp;
 800ebe6:	f107 0314 	add.w	r3, r7, #20
 800ebea:	633b      	str	r3, [r7, #48]	; 0x30
  rq.rlen = READ_LOCAL_VERSION_RP_SIZE;
 800ebec:	2309      	movs	r3, #9
 800ebee:	637b      	str	r3, [r7, #52]	; 0x34
  
  if (hci_send_req(&rq, FALSE) < 0)
 800ebf0:	f107 0320 	add.w	r3, r7, #32
 800ebf4:	2100      	movs	r1, #0
 800ebf6:	4618      	mov	r0, r3
 800ebf8:	f000 f960 	bl	800eebc <hci_send_req>
 800ebfc:	4603      	mov	r3, r0
 800ebfe:	2b00      	cmp	r3, #0
 800ec00:	da01      	bge.n	800ec06 <hci_le_read_local_version+0x5a>
    return BLE_STATUS_TIMEOUT;
 800ec02:	23ff      	movs	r3, #255	; 0xff
 800ec04:	e018      	b.n	800ec38 <hci_le_read_local_version+0x8c>
  
  if (resp.status) {
 800ec06:	7d3b      	ldrb	r3, [r7, #20]
 800ec08:	2b00      	cmp	r3, #0
 800ec0a:	d001      	beq.n	800ec10 <hci_le_read_local_version+0x64>
    return resp.status;
 800ec0c:	7d3b      	ldrb	r3, [r7, #20]
 800ec0e:	e013      	b.n	800ec38 <hci_le_read_local_version+0x8c>
  }
  
  
  *hci_version = resp.hci_version;
 800ec10:	7d7a      	ldrb	r2, [r7, #21]
 800ec12:	68fb      	ldr	r3, [r7, #12]
 800ec14:	701a      	strb	r2, [r3, #0]
  *hci_revision =  btohs(resp.hci_revision);
 800ec16:	8afa      	ldrh	r2, [r7, #22]
 800ec18:	68bb      	ldr	r3, [r7, #8]
 800ec1a:	801a      	strh	r2, [r3, #0]
  *lmp_pal_version = resp.lmp_pal_version;
 800ec1c:	7e3a      	ldrb	r2, [r7, #24]
 800ec1e:	687b      	ldr	r3, [r7, #4]
 800ec20:	701a      	strb	r2, [r3, #0]
  *manufacturer_name = btohs(resp.manufacturer_name);
 800ec22:	f8b7 3019 	ldrh.w	r3, [r7, #25]
 800ec26:	b29a      	uxth	r2, r3
 800ec28:	683b      	ldr	r3, [r7, #0]
 800ec2a:	801a      	strh	r2, [r3, #0]
  *lmp_pal_subversion = btohs(resp.lmp_pal_subversion);
 800ec2c:	f8b7 301b 	ldrh.w	r3, [r7, #27]
 800ec30:	b29a      	uxth	r2, r3
 800ec32:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ec34:	801a      	strh	r2, [r3, #0]
  
  return 0;
 800ec36:	2300      	movs	r3, #0
}
 800ec38:	4618      	mov	r0, r3
 800ec3a:	3738      	adds	r7, #56	; 0x38
 800ec3c:	46bd      	mov	sp, r7
 800ec3e:	bd80      	pop	{r7, pc}

0800ec40 <hci_le_set_scan_resp_data>:
  
  return 0;
}

int hci_le_set_scan_resp_data(uint8_t length, const uint8_t data[])
{
 800ec40:	b580      	push	{r7, lr}
 800ec42:	b092      	sub	sp, #72	; 0x48
 800ec44:	af00      	add	r7, sp, #0
 800ec46:	4603      	mov	r3, r0
 800ec48:	6039      	str	r1, [r7, #0]
 800ec4a:	71fb      	strb	r3, [r7, #7]
  struct hci_request rq;
  le_set_scan_response_data_cp scan_resp_cp;
  uint8_t status;
  
  BLUENRG_memset(&scan_resp_cp, 0, sizeof(scan_resp_cp));
 800ec4c:	f107 0310 	add.w	r3, r7, #16
 800ec50:	2220      	movs	r2, #32
 800ec52:	2100      	movs	r1, #0
 800ec54:	4618      	mov	r0, r3
 800ec56:	f000 fc13 	bl	800f480 <memset>
  scan_resp_cp.length = length;
 800ec5a:	79fb      	ldrb	r3, [r7, #7]
 800ec5c:	743b      	strb	r3, [r7, #16]
  BLUENRG_memcpy(scan_resp_cp.data, data, MIN(31,length));
 800ec5e:	79fb      	ldrb	r3, [r7, #7]
 800ec60:	2b1f      	cmp	r3, #31
 800ec62:	bf28      	it	cs
 800ec64:	231f      	movcs	r3, #31
 800ec66:	b2db      	uxtb	r3, r3
 800ec68:	461a      	mov	r2, r3
 800ec6a:	f107 0310 	add.w	r3, r7, #16
 800ec6e:	3301      	adds	r3, #1
 800ec70:	6839      	ldr	r1, [r7, #0]
 800ec72:	4618      	mov	r0, r3
 800ec74:	f000 fbf6 	bl	800f464 <memcpy>
  
  BLUENRG_memset(&rq, 0, sizeof(rq));
 800ec78:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800ec7c:	2218      	movs	r2, #24
 800ec7e:	2100      	movs	r1, #0
 800ec80:	4618      	mov	r0, r3
 800ec82:	f000 fbfd 	bl	800f480 <memset>
  rq.ogf = OGF_LE_CTL;
 800ec86:	2308      	movs	r3, #8
 800ec88:	863b      	strh	r3, [r7, #48]	; 0x30
  rq.ocf = OCF_LE_SET_SCAN_RESPONSE_DATA;
 800ec8a:	2309      	movs	r3, #9
 800ec8c:	867b      	strh	r3, [r7, #50]	; 0x32
  rq.cparam = &scan_resp_cp;
 800ec8e:	f107 0310 	add.w	r3, r7, #16
 800ec92:	63bb      	str	r3, [r7, #56]	; 0x38
  rq.clen = LE_SET_SCAN_RESPONSE_DATA_CP_SIZE;
 800ec94:	2320      	movs	r3, #32
 800ec96:	63fb      	str	r3, [r7, #60]	; 0x3c
  rq.rparam = &status;
 800ec98:	f107 030f 	add.w	r3, r7, #15
 800ec9c:	643b      	str	r3, [r7, #64]	; 0x40
  rq.rlen = 1;
 800ec9e:	2301      	movs	r3, #1
 800eca0:	647b      	str	r3, [r7, #68]	; 0x44
  
  if (hci_send_req(&rq, FALSE) < 0)
 800eca2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800eca6:	2100      	movs	r1, #0
 800eca8:	4618      	mov	r0, r3
 800ecaa:	f000 f907 	bl	800eebc <hci_send_req>
 800ecae:	4603      	mov	r3, r0
 800ecb0:	2b00      	cmp	r3, #0
 800ecb2:	da01      	bge.n	800ecb8 <hci_le_set_scan_resp_data+0x78>
    return BLE_STATUS_TIMEOUT;
 800ecb4:	23ff      	movs	r3, #255	; 0xff
 800ecb6:	e000      	b.n	800ecba <hci_le_set_scan_resp_data+0x7a>
  
  return status;
 800ecb8:	7bfb      	ldrb	r3, [r7, #15]
}
 800ecba:	4618      	mov	r0, r3
 800ecbc:	3748      	adds	r7, #72	; 0x48
 800ecbe:	46bd      	mov	sp, r7
 800ecc0:	bd80      	pop	{r7, pc}

0800ecc2 <verify_packet>:
  *
  * @param  hciReadPacket The HCI data packet
  * @retval 0: valid packet, 1: incorrect packet, 2: wrong length (packet truncated or too long)
  */
static int verify_packet(const tHciDataPacket * hciReadPacket)
{
 800ecc2:	b480      	push	{r7}
 800ecc4:	b085      	sub	sp, #20
 800ecc6:	af00      	add	r7, sp, #0
 800ecc8:	6078      	str	r0, [r7, #4]
  const uint8_t *hci_pckt = hciReadPacket->dataBuff;
 800ecca:	687b      	ldr	r3, [r7, #4]
 800eccc:	3308      	adds	r3, #8
 800ecce:	60fb      	str	r3, [r7, #12]
  
  if (hci_pckt[HCI_PCK_TYPE_OFFSET] != HCI_EVENT_PKT)
 800ecd0:	68fb      	ldr	r3, [r7, #12]
 800ecd2:	781b      	ldrb	r3, [r3, #0]
 800ecd4:	2b04      	cmp	r3, #4
 800ecd6:	d001      	beq.n	800ecdc <verify_packet+0x1a>
    return 1; /* Incorrect type */
 800ecd8:	2301      	movs	r3, #1
 800ecda:	e00c      	b.n	800ecf6 <verify_packet+0x34>
  
  if (hci_pckt[EVENT_PARAMETER_TOT_LEN_OFFSET] != hciReadPacket->data_len - (1+HCI_EVENT_HDR_SIZE))
 800ecdc:	68fb      	ldr	r3, [r7, #12]
 800ecde:	3302      	adds	r3, #2
 800ece0:	781b      	ldrb	r3, [r3, #0]
 800ece2:	461a      	mov	r2, r3
 800ece4:	687b      	ldr	r3, [r7, #4]
 800ece6:	f893 3088 	ldrb.w	r3, [r3, #136]	; 0x88
 800ecea:	3b03      	subs	r3, #3
 800ecec:	429a      	cmp	r2, r3
 800ecee:	d001      	beq.n	800ecf4 <verify_packet+0x32>
    return 2; /* Wrong length (packet truncated or too long) */
 800ecf0:	2302      	movs	r3, #2
 800ecf2:	e000      	b.n	800ecf6 <verify_packet+0x34>
  
  return 0;      
 800ecf4:	2300      	movs	r3, #0
}
 800ecf6:	4618      	mov	r0, r3
 800ecf8:	3714      	adds	r7, #20
 800ecfa:	46bd      	mov	sp, r7
 800ecfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed00:	4770      	bx	lr
	...

0800ed04 <send_cmd>:
  * @param  plen The HCI command length
  * @param  param The HCI command parameters
  * @retval None
  */
static void send_cmd(uint16_t ogf, uint16_t ocf, uint8_t plen, void *param)
{
 800ed04:	b580      	push	{r7, lr}
 800ed06:	b0a6      	sub	sp, #152	; 0x98
 800ed08:	af00      	add	r7, sp, #0
 800ed0a:	607b      	str	r3, [r7, #4]
 800ed0c:	4603      	mov	r3, r0
 800ed0e:	81fb      	strh	r3, [r7, #14]
 800ed10:	460b      	mov	r3, r1
 800ed12:	81bb      	strh	r3, [r7, #12]
 800ed14:	4613      	mov	r3, r2
 800ed16:	72fb      	strb	r3, [r7, #11]
  uint8_t payload[HCI_MAX_PAYLOAD_SIZE];  
  hci_command_hdr hc;
  
  hc.opcode = htobs(cmd_opcode_pack(ogf, ocf));
 800ed18:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800ed1c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800ed20:	b21a      	sxth	r2, r3
 800ed22:	89fb      	ldrh	r3, [r7, #14]
 800ed24:	029b      	lsls	r3, r3, #10
 800ed26:	b21b      	sxth	r3, r3
 800ed28:	4313      	orrs	r3, r2
 800ed2a:	b21b      	sxth	r3, r3
 800ed2c:	b29b      	uxth	r3, r3
 800ed2e:	82bb      	strh	r3, [r7, #20]
  hc.plen = plen;
 800ed30:	7afb      	ldrb	r3, [r7, #11]
 800ed32:	75bb      	strb	r3, [r7, #22]

  payload[0] = HCI_COMMAND_PKT;
 800ed34:	2301      	movs	r3, #1
 800ed36:	763b      	strb	r3, [r7, #24]
  BLUENRG_memcpy(payload + 1, &hc, sizeof(hc));
 800ed38:	f107 0318 	add.w	r3, r7, #24
 800ed3c:	3301      	adds	r3, #1
 800ed3e:	461a      	mov	r2, r3
 800ed40:	f107 0314 	add.w	r3, r7, #20
 800ed44:	8819      	ldrh	r1, [r3, #0]
 800ed46:	789b      	ldrb	r3, [r3, #2]
 800ed48:	8011      	strh	r1, [r2, #0]
 800ed4a:	7093      	strb	r3, [r2, #2]
  BLUENRG_memcpy(payload + HCI_HDR_SIZE + HCI_COMMAND_HDR_SIZE, param, plen);
 800ed4c:	f107 0318 	add.w	r3, r7, #24
 800ed50:	3304      	adds	r3, #4
 800ed52:	7afa      	ldrb	r2, [r7, #11]
 800ed54:	6879      	ldr	r1, [r7, #4]
 800ed56:	4618      	mov	r0, r3
 800ed58:	f000 fb84 	bl	800f464 <memcpy>
  
  if (hciContext.io.Send)
 800ed5c:	4b08      	ldr	r3, [pc, #32]	; (800ed80 <send_cmd+0x7c>)
 800ed5e:	691b      	ldr	r3, [r3, #16]
 800ed60:	2b00      	cmp	r3, #0
 800ed62:	d009      	beq.n	800ed78 <send_cmd+0x74>
  {
    hciContext.io.Send (payload, HCI_HDR_SIZE + HCI_COMMAND_HDR_SIZE + plen);
 800ed64:	4b06      	ldr	r3, [pc, #24]	; (800ed80 <send_cmd+0x7c>)
 800ed66:	691b      	ldr	r3, [r3, #16]
 800ed68:	7afa      	ldrb	r2, [r7, #11]
 800ed6a:	b292      	uxth	r2, r2
 800ed6c:	3204      	adds	r2, #4
 800ed6e:	b291      	uxth	r1, r2
 800ed70:	f107 0218 	add.w	r2, r7, #24
 800ed74:	4610      	mov	r0, r2
 800ed76:	4798      	blx	r3
  }
}
 800ed78:	bf00      	nop
 800ed7a:	3798      	adds	r7, #152	; 0x98
 800ed7c:	46bd      	mov	sp, r7
 800ed7e:	bd80      	pop	{r7, pc}
 800ed80:	20000954 	.word	0x20000954

0800ed84 <move_list>:
  * @param  dest_list
  * @param  src_list
  * @retval None
  */
static void move_list(tListNode * dest_list, tListNode * src_list)
{
 800ed84:	b580      	push	{r7, lr}
 800ed86:	b084      	sub	sp, #16
 800ed88:	af00      	add	r7, sp, #0
 800ed8a:	6078      	str	r0, [r7, #4]
 800ed8c:	6039      	str	r1, [r7, #0]
  pListNode tmp_node;
  
  while (!list_is_empty(src_list))
 800ed8e:	e00a      	b.n	800eda6 <move_list+0x22>
  {
    list_remove_tail(src_list, &tmp_node);
 800ed90:	f107 030c 	add.w	r3, r7, #12
 800ed94:	4619      	mov	r1, r3
 800ed96:	6838      	ldr	r0, [r7, #0]
 800ed98:	f000 faea 	bl	800f370 <list_remove_tail>
    list_insert_head(dest_list, tmp_node);
 800ed9c:	68fb      	ldr	r3, [r7, #12]
 800ed9e:	4619      	mov	r1, r3
 800eda0:	6878      	ldr	r0, [r7, #4]
 800eda2:	f000 fa51 	bl	800f248 <list_insert_head>
  while (!list_is_empty(src_list))
 800eda6:	6838      	ldr	r0, [r7, #0]
 800eda8:	f000 fa2c 	bl	800f204 <list_is_empty>
 800edac:	4603      	mov	r3, r0
 800edae:	2b00      	cmp	r3, #0
 800edb0:	d0ee      	beq.n	800ed90 <move_list+0xc>
  }
}
 800edb2:	bf00      	nop
 800edb4:	bf00      	nop
 800edb6:	3710      	adds	r7, #16
 800edb8:	46bd      	mov	sp, r7
 800edba:	bd80      	pop	{r7, pc}

0800edbc <free_event_list>:
  *
  * @param  None
  * @retval None
  */
static void free_event_list(void)
{
 800edbc:	b580      	push	{r7, lr}
 800edbe:	b082      	sub	sp, #8
 800edc0:	af00      	add	r7, sp, #0
  tHciDataPacket * pckt;

  while(list_get_size(&hciReadPktPool) < HCI_READ_PACKET_NUM_MAX/2){
 800edc2:	e009      	b.n	800edd8 <free_event_list+0x1c>
    list_remove_head(&hciReadPktRxQueue, (tListNode **)&pckt);    
 800edc4:	1d3b      	adds	r3, r7, #4
 800edc6:	4619      	mov	r1, r3
 800edc8:	4809      	ldr	r0, [pc, #36]	; (800edf0 <free_event_list+0x34>)
 800edca:	f000 faaa 	bl	800f322 <list_remove_head>
    list_insert_tail(&hciReadPktPool, (tListNode *)pckt);
 800edce:	687b      	ldr	r3, [r7, #4]
 800edd0:	4619      	mov	r1, r3
 800edd2:	4808      	ldr	r0, [pc, #32]	; (800edf4 <free_event_list+0x38>)
 800edd4:	f000 fa5e 	bl	800f294 <list_insert_tail>
  while(list_get_size(&hciReadPktPool) < HCI_READ_PACKET_NUM_MAX/2){
 800edd8:	4806      	ldr	r0, [pc, #24]	; (800edf4 <free_event_list+0x38>)
 800edda:	f000 faf0 	bl	800f3be <list_get_size>
 800edde:	4603      	mov	r3, r0
 800ede0:	2b01      	cmp	r3, #1
 800ede2:	ddef      	ble.n	800edc4 <free_event_list+0x8>
  }
}
 800ede4:	bf00      	nop
 800ede6:	bf00      	nop
 800ede8:	3708      	adds	r7, #8
 800edea:	46bd      	mov	sp, r7
 800edec:	bd80      	pop	{r7, pc}
 800edee:	bf00      	nop
 800edf0:	20000690 	.word	0x20000690
 800edf4:	20000688 	.word	0x20000688

0800edf8 <hci_init>:

/********************** HCI Transport layer functions *****************************/

void hci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 800edf8:	b580      	push	{r7, lr}
 800edfa:	b084      	sub	sp, #16
 800edfc:	af00      	add	r7, sp, #0
 800edfe:	6078      	str	r0, [r7, #4]
 800ee00:	6039      	str	r1, [r7, #0]
  uint8_t index;

  if(UserEvtRx != NULL)
 800ee02:	687b      	ldr	r3, [r7, #4]
 800ee04:	2b00      	cmp	r3, #0
 800ee06:	d002      	beq.n	800ee0e <hci_init+0x16>
  {
    hciContext.UserEvtRx = UserEvtRx;
 800ee08:	4a18      	ldr	r2, [pc, #96]	; (800ee6c <hci_init+0x74>)
 800ee0a:	687b      	ldr	r3, [r7, #4]
 800ee0c:	61d3      	str	r3, [r2, #28]
  }
  
  /* Initialize list heads of ready and free hci data packet queues */
  list_init_head(&hciReadPktPool);
 800ee0e:	4818      	ldr	r0, [pc, #96]	; (800ee70 <hci_init+0x78>)
 800ee10:	f000 f9e8 	bl	800f1e4 <list_init_head>
  list_init_head(&hciReadPktRxQueue);
 800ee14:	4817      	ldr	r0, [pc, #92]	; (800ee74 <hci_init+0x7c>)
 800ee16:	f000 f9e5 	bl	800f1e4 <list_init_head>

  /* Initialize TL BLE layer */
  hci_tl_lowlevel_init();
 800ee1a:	f7f3 fe4b 	bl	8002ab4 <hci_tl_lowlevel_init>
    
  /* Initialize the queue of free hci data packets */
  for (index = 0; index < HCI_READ_PACKET_NUM_MAX; index++)
 800ee1e:	2300      	movs	r3, #0
 800ee20:	73fb      	strb	r3, [r7, #15]
 800ee22:	e00c      	b.n	800ee3e <hci_init+0x46>
  {
    list_insert_tail(&hciReadPktPool, (tListNode *)&hciReadPacketBuffer[index]);
 800ee24:	7bfb      	ldrb	r3, [r7, #15]
 800ee26:	228c      	movs	r2, #140	; 0x8c
 800ee28:	fb02 f303 	mul.w	r3, r2, r3
 800ee2c:	4a12      	ldr	r2, [pc, #72]	; (800ee78 <hci_init+0x80>)
 800ee2e:	4413      	add	r3, r2
 800ee30:	4619      	mov	r1, r3
 800ee32:	480f      	ldr	r0, [pc, #60]	; (800ee70 <hci_init+0x78>)
 800ee34:	f000 fa2e 	bl	800f294 <list_insert_tail>
  for (index = 0; index < HCI_READ_PACKET_NUM_MAX; index++)
 800ee38:	7bfb      	ldrb	r3, [r7, #15]
 800ee3a:	3301      	adds	r3, #1
 800ee3c:	73fb      	strb	r3, [r7, #15]
 800ee3e:	7bfb      	ldrb	r3, [r7, #15]
 800ee40:	2b04      	cmp	r3, #4
 800ee42:	d9ef      	bls.n	800ee24 <hci_init+0x2c>
  } 
  
  /* Initialize low level driver */
  if (hciContext.io.Init)  hciContext.io.Init(NULL);
 800ee44:	4b09      	ldr	r3, [pc, #36]	; (800ee6c <hci_init+0x74>)
 800ee46:	681b      	ldr	r3, [r3, #0]
 800ee48:	2b00      	cmp	r3, #0
 800ee4a:	d003      	beq.n	800ee54 <hci_init+0x5c>
 800ee4c:	4b07      	ldr	r3, [pc, #28]	; (800ee6c <hci_init+0x74>)
 800ee4e:	681b      	ldr	r3, [r3, #0]
 800ee50:	2000      	movs	r0, #0
 800ee52:	4798      	blx	r3
  if (hciContext.io.Reset) hciContext.io.Reset();
 800ee54:	4b05      	ldr	r3, [pc, #20]	; (800ee6c <hci_init+0x74>)
 800ee56:	689b      	ldr	r3, [r3, #8]
 800ee58:	2b00      	cmp	r3, #0
 800ee5a:	d002      	beq.n	800ee62 <hci_init+0x6a>
 800ee5c:	4b03      	ldr	r3, [pc, #12]	; (800ee6c <hci_init+0x74>)
 800ee5e:	689b      	ldr	r3, [r3, #8]
 800ee60:	4798      	blx	r3
}
 800ee62:	bf00      	nop
 800ee64:	3710      	adds	r7, #16
 800ee66:	46bd      	mov	sp, r7
 800ee68:	bd80      	pop	{r7, pc}
 800ee6a:	bf00      	nop
 800ee6c:	20000954 	.word	0x20000954
 800ee70:	20000688 	.word	0x20000688
 800ee74:	20000690 	.word	0x20000690
 800ee78:	20000698 	.word	0x20000698

0800ee7c <hci_register_io_bus>:

void hci_register_io_bus(tHciIO* fops)
{
 800ee7c:	b480      	push	{r7}
 800ee7e:	b083      	sub	sp, #12
 800ee80:	af00      	add	r7, sp, #0
 800ee82:	6078      	str	r0, [r7, #4]
  /* Register bus function */
  hciContext.io.Init    = fops->Init; 
 800ee84:	687b      	ldr	r3, [r7, #4]
 800ee86:	681b      	ldr	r3, [r3, #0]
 800ee88:	4a0b      	ldr	r2, [pc, #44]	; (800eeb8 <hci_register_io_bus+0x3c>)
 800ee8a:	6013      	str	r3, [r2, #0]
  hciContext.io.Receive = fops->Receive;  
 800ee8c:	687b      	ldr	r3, [r7, #4]
 800ee8e:	68db      	ldr	r3, [r3, #12]
 800ee90:	4a09      	ldr	r2, [pc, #36]	; (800eeb8 <hci_register_io_bus+0x3c>)
 800ee92:	60d3      	str	r3, [r2, #12]
  hciContext.io.Send    = fops->Send;
 800ee94:	687b      	ldr	r3, [r7, #4]
 800ee96:	691b      	ldr	r3, [r3, #16]
 800ee98:	4a07      	ldr	r2, [pc, #28]	; (800eeb8 <hci_register_io_bus+0x3c>)
 800ee9a:	6113      	str	r3, [r2, #16]
  hciContext.io.GetTick = fops->GetTick;
 800ee9c:	687b      	ldr	r3, [r7, #4]
 800ee9e:	699b      	ldr	r3, [r3, #24]
 800eea0:	4a05      	ldr	r2, [pc, #20]	; (800eeb8 <hci_register_io_bus+0x3c>)
 800eea2:	6193      	str	r3, [r2, #24]
  hciContext.io.Reset   = fops->Reset;
 800eea4:	687b      	ldr	r3, [r7, #4]
 800eea6:	689b      	ldr	r3, [r3, #8]
 800eea8:	4a03      	ldr	r2, [pc, #12]	; (800eeb8 <hci_register_io_bus+0x3c>)
 800eeaa:	6093      	str	r3, [r2, #8]
}
 800eeac:	bf00      	nop
 800eeae:	370c      	adds	r7, #12
 800eeb0:	46bd      	mov	sp, r7
 800eeb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eeb6:	4770      	bx	lr
 800eeb8:	20000954 	.word	0x20000954

0800eebc <hci_send_req>:

int hci_send_req(struct hci_request* r, BOOL async)
{
 800eebc:	b580      	push	{r7, lr}
 800eebe:	b08e      	sub	sp, #56	; 0x38
 800eec0:	af00      	add	r7, sp, #0
 800eec2:	6078      	str	r0, [r7, #4]
 800eec4:	460b      	mov	r3, r1
 800eec6:	70fb      	strb	r3, [r7, #3]
  uint8_t *ptr;
  uint16_t opcode = htobs(cmd_opcode_pack(r->ogf, r->ocf));
 800eec8:	687b      	ldr	r3, [r7, #4]
 800eeca:	885b      	ldrh	r3, [r3, #2]
 800eecc:	b21b      	sxth	r3, r3
 800eece:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800eed2:	b21a      	sxth	r2, r3
 800eed4:	687b      	ldr	r3, [r7, #4]
 800eed6:	881b      	ldrh	r3, [r3, #0]
 800eed8:	029b      	lsls	r3, r3, #10
 800eeda:	b21b      	sxth	r3, r3
 800eedc:	4313      	orrs	r3, r2
 800eede:	b21b      	sxth	r3, r3
 800eee0:	86fb      	strh	r3, [r7, #54]	; 0x36
  hci_event_pckt *event_pckt;
  hci_uart_pckt *hci_hdr;

  tHciDataPacket * hciReadPacket = NULL;
 800eee2:	2300      	movs	r3, #0
 800eee4:	613b      	str	r3, [r7, #16]
  tListNode hciTempQueue;
  
  list_init_head(&hciTempQueue);
 800eee6:	f107 0308 	add.w	r3, r7, #8
 800eeea:	4618      	mov	r0, r3
 800eeec:	f000 f97a 	bl	800f1e4 <list_init_head>

  free_event_list();
 800eef0:	f7ff ff64 	bl	800edbc <free_event_list>
  
  send_cmd(r->ogf, r->ocf, r->clen, r->cparam);
 800eef4:	687b      	ldr	r3, [r7, #4]
 800eef6:	8818      	ldrh	r0, [r3, #0]
 800eef8:	687b      	ldr	r3, [r7, #4]
 800eefa:	8859      	ldrh	r1, [r3, #2]
 800eefc:	687b      	ldr	r3, [r7, #4]
 800eefe:	68db      	ldr	r3, [r3, #12]
 800ef00:	b2da      	uxtb	r2, r3
 800ef02:	687b      	ldr	r3, [r7, #4]
 800ef04:	689b      	ldr	r3, [r3, #8]
 800ef06:	f7ff fefd 	bl	800ed04 <send_cmd>
  
  if (async)
 800ef0a:	78fb      	ldrb	r3, [r7, #3]
 800ef0c:	2b00      	cmp	r3, #0
 800ef0e:	d001      	beq.n	800ef14 <hci_send_req+0x58>
  {
    return 0;
 800ef10:	2300      	movs	r3, #0
 800ef12:	e0e5      	b.n	800f0e0 <hci_send_req+0x224>
    evt_cmd_complete  *cc;
    evt_cmd_status    *cs;
    evt_le_meta_event *me;
    uint32_t len;
    
    uint32_t tickstart = HAL_GetTick();
 800ef14:	f7fc f926 	bl	800b164 <HAL_GetTick>
 800ef18:	6338      	str	r0, [r7, #48]	; 0x30
      
    while (1)
    {
      if ((HAL_GetTick() - tickstart) > HCI_DEFAULT_TIMEOUT_MS)
 800ef1a:	f7fc f923 	bl	800b164 <HAL_GetTick>
 800ef1e:	4602      	mov	r2, r0
 800ef20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ef22:	1ad3      	subs	r3, r2, r3
 800ef24:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800ef28:	f200 80b6 	bhi.w	800f098 <hci_send_req+0x1dc>
      {
        goto failed;
      }
      
      if (!list_is_empty(&hciReadPktRxQueue)) 
 800ef2c:	486e      	ldr	r0, [pc, #440]	; (800f0e8 <hci_send_req+0x22c>)
 800ef2e:	f000 f969 	bl	800f204 <list_is_empty>
 800ef32:	4603      	mov	r3, r0
 800ef34:	2b00      	cmp	r3, #0
 800ef36:	d000      	beq.n	800ef3a <hci_send_req+0x7e>
      if ((HAL_GetTick() - tickstart) > HCI_DEFAULT_TIMEOUT_MS)
 800ef38:	e7ef      	b.n	800ef1a <hci_send_req+0x5e>
      {
        break;
 800ef3a:	bf00      	nop
      }
    }
    
    /* Extract packet from HCI event queue. */
    list_remove_head(&hciReadPktRxQueue, (tListNode **)&hciReadPacket);    
 800ef3c:	f107 0310 	add.w	r3, r7, #16
 800ef40:	4619      	mov	r1, r3
 800ef42:	4869      	ldr	r0, [pc, #420]	; (800f0e8 <hci_send_req+0x22c>)
 800ef44:	f000 f9ed 	bl	800f322 <list_remove_head>
    
    hci_hdr = (void *)hciReadPacket->dataBuff;
 800ef48:	693b      	ldr	r3, [r7, #16]
 800ef4a:	3308      	adds	r3, #8
 800ef4c:	62fb      	str	r3, [r7, #44]	; 0x2c

    if (hci_hdr->type == HCI_EVENT_PKT)
 800ef4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ef50:	781b      	ldrb	r3, [r3, #0]
 800ef52:	2b04      	cmp	r3, #4
 800ef54:	d17b      	bne.n	800f04e <hci_send_req+0x192>
    {
      event_pckt = (void *)(hci_hdr->data);
 800ef56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ef58:	3301      	adds	r3, #1
 800ef5a:	62bb      	str	r3, [r7, #40]	; 0x28
    
      ptr = hciReadPacket->dataBuff + (1 + HCI_EVENT_HDR_SIZE);
 800ef5c:	693b      	ldr	r3, [r7, #16]
 800ef5e:	3308      	adds	r3, #8
 800ef60:	3303      	adds	r3, #3
 800ef62:	627b      	str	r3, [r7, #36]	; 0x24
      len = hciReadPacket->data_len - (1 + HCI_EVENT_HDR_SIZE);
 800ef64:	693b      	ldr	r3, [r7, #16]
 800ef66:	f893 3088 	ldrb.w	r3, [r3, #136]	; 0x88
 800ef6a:	3b03      	subs	r3, #3
 800ef6c:	623b      	str	r3, [r7, #32]
    
      switch (event_pckt->evt) 
 800ef6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ef70:	781b      	ldrb	r3, [r3, #0]
 800ef72:	2b3e      	cmp	r3, #62	; 0x3e
 800ef74:	d04d      	beq.n	800f012 <hci_send_req+0x156>
 800ef76:	2b3e      	cmp	r3, #62	; 0x3e
 800ef78:	dc6b      	bgt.n	800f052 <hci_send_req+0x196>
 800ef7a:	2b10      	cmp	r3, #16
 800ef7c:	f000 808e 	beq.w	800f09c <hci_send_req+0x1e0>
 800ef80:	2b10      	cmp	r3, #16
 800ef82:	dc66      	bgt.n	800f052 <hci_send_req+0x196>
 800ef84:	2b0e      	cmp	r3, #14
 800ef86:	d024      	beq.n	800efd2 <hci_send_req+0x116>
 800ef88:	2b0f      	cmp	r3, #15
 800ef8a:	d162      	bne.n	800f052 <hci_send_req+0x196>
      {      
      case EVT_CMD_STATUS:
        cs = (void *) ptr;
 800ef8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ef8e:	61bb      	str	r3, [r7, #24]
        
        if (cs->opcode != opcode)
 800ef90:	69bb      	ldr	r3, [r7, #24]
 800ef92:	885b      	ldrh	r3, [r3, #2]
 800ef94:	b29b      	uxth	r3, r3
 800ef96:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800ef98:	429a      	cmp	r2, r3
 800ef9a:	f040 8081 	bne.w	800f0a0 <hci_send_req+0x1e4>
          goto failed;
        
        if (r->event != EVT_CMD_STATUS) {
 800ef9e:	687b      	ldr	r3, [r7, #4]
 800efa0:	685b      	ldr	r3, [r3, #4]
 800efa2:	2b0f      	cmp	r3, #15
 800efa4:	d004      	beq.n	800efb0 <hci_send_req+0xf4>
          if (cs->status) {
 800efa6:	69bb      	ldr	r3, [r7, #24]
 800efa8:	781b      	ldrb	r3, [r3, #0]
 800efaa:	2b00      	cmp	r3, #0
 800efac:	d053      	beq.n	800f056 <hci_send_req+0x19a>
            goto failed;
 800efae:	e07a      	b.n	800f0a6 <hci_send_req+0x1ea>
          }
          break;
        }

        r->rlen = MIN(len, r->rlen);
 800efb0:	687b      	ldr	r3, [r7, #4]
 800efb2:	695a      	ldr	r2, [r3, #20]
 800efb4:	6a3b      	ldr	r3, [r7, #32]
 800efb6:	429a      	cmp	r2, r3
 800efb8:	bf28      	it	cs
 800efba:	461a      	movcs	r2, r3
 800efbc:	687b      	ldr	r3, [r7, #4]
 800efbe:	615a      	str	r2, [r3, #20]
        BLUENRG_memcpy(r->rparam, ptr, r->rlen);
 800efc0:	687b      	ldr	r3, [r7, #4]
 800efc2:	6918      	ldr	r0, [r3, #16]
 800efc4:	687b      	ldr	r3, [r7, #4]
 800efc6:	695b      	ldr	r3, [r3, #20]
 800efc8:	461a      	mov	r2, r3
 800efca:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800efcc:	f000 fa4a 	bl	800f464 <memcpy>
        goto done;
 800efd0:	e07a      	b.n	800f0c8 <hci_send_req+0x20c>
      
      case EVT_CMD_COMPLETE:
        cc = (void *) ptr;
 800efd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800efd4:	617b      	str	r3, [r7, #20]
      
        if (cc->opcode != opcode)
 800efd6:	697b      	ldr	r3, [r7, #20]
 800efd8:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800efdc:	b29b      	uxth	r3, r3
 800efde:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800efe0:	429a      	cmp	r2, r3
 800efe2:	d15f      	bne.n	800f0a4 <hci_send_req+0x1e8>
          goto failed;
      
        ptr += EVT_CMD_COMPLETE_SIZE;
 800efe4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800efe6:	3303      	adds	r3, #3
 800efe8:	627b      	str	r3, [r7, #36]	; 0x24
        len -= EVT_CMD_COMPLETE_SIZE;
 800efea:	6a3b      	ldr	r3, [r7, #32]
 800efec:	3b03      	subs	r3, #3
 800efee:	623b      	str	r3, [r7, #32]
      
        r->rlen = MIN(len, r->rlen);
 800eff0:	687b      	ldr	r3, [r7, #4]
 800eff2:	695a      	ldr	r2, [r3, #20]
 800eff4:	6a3b      	ldr	r3, [r7, #32]
 800eff6:	429a      	cmp	r2, r3
 800eff8:	bf28      	it	cs
 800effa:	461a      	movcs	r2, r3
 800effc:	687b      	ldr	r3, [r7, #4]
 800effe:	615a      	str	r2, [r3, #20]
        BLUENRG_memcpy(r->rparam, ptr, r->rlen);
 800f000:	687b      	ldr	r3, [r7, #4]
 800f002:	6918      	ldr	r0, [r3, #16]
 800f004:	687b      	ldr	r3, [r7, #4]
 800f006:	695b      	ldr	r3, [r3, #20]
 800f008:	461a      	mov	r2, r3
 800f00a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800f00c:	f000 fa2a 	bl	800f464 <memcpy>
        goto done;
 800f010:	e05a      	b.n	800f0c8 <hci_send_req+0x20c>
      
      case EVT_LE_META_EVENT:
        me = (void *) ptr;
 800f012:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f014:	61fb      	str	r3, [r7, #28]
      
        if (me->subevent != r->event)
 800f016:	69fb      	ldr	r3, [r7, #28]
 800f018:	781b      	ldrb	r3, [r3, #0]
 800f01a:	461a      	mov	r2, r3
 800f01c:	687b      	ldr	r3, [r7, #4]
 800f01e:	685b      	ldr	r3, [r3, #4]
 800f020:	429a      	cmp	r2, r3
 800f022:	d11a      	bne.n	800f05a <hci_send_req+0x19e>
          break;
      
        len -= 1;
 800f024:	6a3b      	ldr	r3, [r7, #32]
 800f026:	3b01      	subs	r3, #1
 800f028:	623b      	str	r3, [r7, #32]
        r->rlen = MIN(len, r->rlen);
 800f02a:	687b      	ldr	r3, [r7, #4]
 800f02c:	695a      	ldr	r2, [r3, #20]
 800f02e:	6a3b      	ldr	r3, [r7, #32]
 800f030:	429a      	cmp	r2, r3
 800f032:	bf28      	it	cs
 800f034:	461a      	movcs	r2, r3
 800f036:	687b      	ldr	r3, [r7, #4]
 800f038:	615a      	str	r2, [r3, #20]
        BLUENRG_memcpy(r->rparam, me->data, r->rlen);
 800f03a:	687b      	ldr	r3, [r7, #4]
 800f03c:	6918      	ldr	r0, [r3, #16]
 800f03e:	69fb      	ldr	r3, [r7, #28]
 800f040:	1c59      	adds	r1, r3, #1
 800f042:	687b      	ldr	r3, [r7, #4]
 800f044:	695b      	ldr	r3, [r3, #20]
 800f046:	461a      	mov	r2, r3
 800f048:	f000 fa0c 	bl	800f464 <memcpy>
        goto done;
 800f04c:	e03c      	b.n	800f0c8 <hci_send_req+0x20c>
        goto failed;
      
      default:      
        break;
      }
    }
 800f04e:	bf00      	nop
 800f050:	e004      	b.n	800f05c <hci_send_req+0x1a0>
        break;
 800f052:	bf00      	nop
 800f054:	e002      	b.n	800f05c <hci_send_req+0x1a0>
          break;
 800f056:	bf00      	nop
 800f058:	e000      	b.n	800f05c <hci_send_req+0x1a0>
          break;
 800f05a:	bf00      	nop
    
    /* If there are no more packets to be processed, be sure there is at list one
       packet in the pool to process the expected event.
       If no free packets are available, discard the processed event and insert it
       into the pool. */
    if (list_is_empty(&hciReadPktPool) && list_is_empty(&hciReadPktRxQueue)) {
 800f05c:	4823      	ldr	r0, [pc, #140]	; (800f0ec <hci_send_req+0x230>)
 800f05e:	f000 f8d1 	bl	800f204 <list_is_empty>
 800f062:	4603      	mov	r3, r0
 800f064:	2b00      	cmp	r3, #0
 800f066:	d00d      	beq.n	800f084 <hci_send_req+0x1c8>
 800f068:	481f      	ldr	r0, [pc, #124]	; (800f0e8 <hci_send_req+0x22c>)
 800f06a:	f000 f8cb 	bl	800f204 <list_is_empty>
 800f06e:	4603      	mov	r3, r0
 800f070:	2b00      	cmp	r3, #0
 800f072:	d007      	beq.n	800f084 <hci_send_req+0x1c8>
      list_insert_tail(&hciReadPktPool, (tListNode *)hciReadPacket);
 800f074:	693b      	ldr	r3, [r7, #16]
 800f076:	4619      	mov	r1, r3
 800f078:	481c      	ldr	r0, [pc, #112]	; (800f0ec <hci_send_req+0x230>)
 800f07a:	f000 f90b 	bl	800f294 <list_insert_tail>
      hciReadPacket=NULL;
 800f07e:	2300      	movs	r3, #0
 800f080:	613b      	str	r3, [r7, #16]
 800f082:	e008      	b.n	800f096 <hci_send_req+0x1da>
    else {
      /* Insert the packet in a different queue. These packets will be
      inserted back in the main queue just before exiting from send_req(), so that
      these events can be processed by the application.
    */
    list_insert_tail(&hciTempQueue, (tListNode *)hciReadPacket);
 800f084:	693a      	ldr	r2, [r7, #16]
 800f086:	f107 0308 	add.w	r3, r7, #8
 800f08a:	4611      	mov	r1, r2
 800f08c:	4618      	mov	r0, r3
 800f08e:	f000 f901 	bl	800f294 <list_insert_tail>
      hciReadPacket=NULL;
 800f092:	2300      	movs	r3, #0
 800f094:	613b      	str	r3, [r7, #16]
  {
 800f096:	e73d      	b.n	800ef14 <hci_send_req+0x58>
        goto failed;
 800f098:	bf00      	nop
 800f09a:	e004      	b.n	800f0a6 <hci_send_req+0x1ea>
        goto failed;
 800f09c:	bf00      	nop
 800f09e:	e002      	b.n	800f0a6 <hci_send_req+0x1ea>
          goto failed;
 800f0a0:	bf00      	nop
 800f0a2:	e000      	b.n	800f0a6 <hci_send_req+0x1ea>
          goto failed;
 800f0a4:	bf00      	nop
    }
  }
  
failed: 
  if (hciReadPacket!=NULL) {
 800f0a6:	693b      	ldr	r3, [r7, #16]
 800f0a8:	2b00      	cmp	r3, #0
 800f0aa:	d004      	beq.n	800f0b6 <hci_send_req+0x1fa>
    list_insert_head(&hciReadPktPool, (tListNode *)hciReadPacket);
 800f0ac:	693b      	ldr	r3, [r7, #16]
 800f0ae:	4619      	mov	r1, r3
 800f0b0:	480e      	ldr	r0, [pc, #56]	; (800f0ec <hci_send_req+0x230>)
 800f0b2:	f000 f8c9 	bl	800f248 <list_insert_head>
  }
  move_list(&hciReadPktRxQueue, &hciTempQueue);
 800f0b6:	f107 0308 	add.w	r3, r7, #8
 800f0ba:	4619      	mov	r1, r3
 800f0bc:	480a      	ldr	r0, [pc, #40]	; (800f0e8 <hci_send_req+0x22c>)
 800f0be:	f7ff fe61 	bl	800ed84 <move_list>

  return -1;
 800f0c2:	f04f 33ff 	mov.w	r3, #4294967295
 800f0c6:	e00b      	b.n	800f0e0 <hci_send_req+0x224>
  
done:
  /* Insert the packet back into the pool.*/
  list_insert_head(&hciReadPktPool, (tListNode *)hciReadPacket); 
 800f0c8:	693b      	ldr	r3, [r7, #16]
 800f0ca:	4619      	mov	r1, r3
 800f0cc:	4807      	ldr	r0, [pc, #28]	; (800f0ec <hci_send_req+0x230>)
 800f0ce:	f000 f8bb 	bl	800f248 <list_insert_head>
  move_list(&hciReadPktRxQueue, &hciTempQueue);
 800f0d2:	f107 0308 	add.w	r3, r7, #8
 800f0d6:	4619      	mov	r1, r3
 800f0d8:	4803      	ldr	r0, [pc, #12]	; (800f0e8 <hci_send_req+0x22c>)
 800f0da:	f7ff fe53 	bl	800ed84 <move_list>

  return 0;
 800f0de:	2300      	movs	r3, #0
}
 800f0e0:	4618      	mov	r0, r3
 800f0e2:	3738      	adds	r7, #56	; 0x38
 800f0e4:	46bd      	mov	sp, r7
 800f0e6:	bd80      	pop	{r7, pc}
 800f0e8:	20000690 	.word	0x20000690
 800f0ec:	20000688 	.word	0x20000688

0800f0f0 <hci_user_evt_proc>:

void hci_user_evt_proc(void)
{
 800f0f0:	b580      	push	{r7, lr}
 800f0f2:	b082      	sub	sp, #8
 800f0f4:	af00      	add	r7, sp, #0
  tHciDataPacket * hciReadPacket = NULL;
 800f0f6:	2300      	movs	r3, #0
 800f0f8:	607b      	str	r3, [r7, #4]
     
  /* process any pending events read */
  while (list_is_empty(&hciReadPktRxQueue) == FALSE)
 800f0fa:	e013      	b.n	800f124 <hci_user_evt_proc+0x34>
  {
    list_remove_head (&hciReadPktRxQueue, (tListNode **)&hciReadPacket);
 800f0fc:	1d3b      	adds	r3, r7, #4
 800f0fe:	4619      	mov	r1, r3
 800f100:	480e      	ldr	r0, [pc, #56]	; (800f13c <hci_user_evt_proc+0x4c>)
 800f102:	f000 f90e 	bl	800f322 <list_remove_head>

    if (hciContext.UserEvtRx != NULL)
 800f106:	4b0e      	ldr	r3, [pc, #56]	; (800f140 <hci_user_evt_proc+0x50>)
 800f108:	69db      	ldr	r3, [r3, #28]
 800f10a:	2b00      	cmp	r3, #0
 800f10c:	d005      	beq.n	800f11a <hci_user_evt_proc+0x2a>
    {
      hciContext.UserEvtRx(hciReadPacket->dataBuff);
 800f10e:	4b0c      	ldr	r3, [pc, #48]	; (800f140 <hci_user_evt_proc+0x50>)
 800f110:	69db      	ldr	r3, [r3, #28]
 800f112:	687a      	ldr	r2, [r7, #4]
 800f114:	3208      	adds	r2, #8
 800f116:	4610      	mov	r0, r2
 800f118:	4798      	blx	r3
    }

    list_insert_tail(&hciReadPktPool, (tListNode *)hciReadPacket);
 800f11a:	687b      	ldr	r3, [r7, #4]
 800f11c:	4619      	mov	r1, r3
 800f11e:	4809      	ldr	r0, [pc, #36]	; (800f144 <hci_user_evt_proc+0x54>)
 800f120:	f000 f8b8 	bl	800f294 <list_insert_tail>
  while (list_is_empty(&hciReadPktRxQueue) == FALSE)
 800f124:	4805      	ldr	r0, [pc, #20]	; (800f13c <hci_user_evt_proc+0x4c>)
 800f126:	f000 f86d 	bl	800f204 <list_is_empty>
 800f12a:	4603      	mov	r3, r0
 800f12c:	2b00      	cmp	r3, #0
 800f12e:	d0e5      	beq.n	800f0fc <hci_user_evt_proc+0xc>
  }
}
 800f130:	bf00      	nop
 800f132:	bf00      	nop
 800f134:	3708      	adds	r7, #8
 800f136:	46bd      	mov	sp, r7
 800f138:	bd80      	pop	{r7, pc}
 800f13a:	bf00      	nop
 800f13c:	20000690 	.word	0x20000690
 800f140:	20000954 	.word	0x20000954
 800f144:	20000688 	.word	0x20000688

0800f148 <hci_notify_asynch_evt>:

int32_t hci_notify_asynch_evt(void* pdata)
{
 800f148:	b580      	push	{r7, lr}
 800f14a:	b086      	sub	sp, #24
 800f14c:	af00      	add	r7, sp, #0
 800f14e:	6078      	str	r0, [r7, #4]
  tHciDataPacket * hciReadPacket = NULL;
 800f150:	2300      	movs	r3, #0
 800f152:	60fb      	str	r3, [r7, #12]
  uint8_t data_len;
  
  int32_t ret = 0;
 800f154:	2300      	movs	r3, #0
 800f156:	617b      	str	r3, [r7, #20]
  
  if (list_is_empty (&hciReadPktPool) == FALSE)
 800f158:	481f      	ldr	r0, [pc, #124]	; (800f1d8 <hci_notify_asynch_evt+0x90>)
 800f15a:	f000 f853 	bl	800f204 <list_is_empty>
 800f15e:	4603      	mov	r3, r0
 800f160:	2b00      	cmp	r3, #0
 800f162:	d132      	bne.n	800f1ca <hci_notify_asynch_evt+0x82>
  {
    /* Queuing a packet to read */
    list_remove_head (&hciReadPktPool, (tListNode **)&hciReadPacket);
 800f164:	f107 030c 	add.w	r3, r7, #12
 800f168:	4619      	mov	r1, r3
 800f16a:	481b      	ldr	r0, [pc, #108]	; (800f1d8 <hci_notify_asynch_evt+0x90>)
 800f16c:	f000 f8d9 	bl	800f322 <list_remove_head>
    
    if (hciContext.io.Receive)
 800f170:	4b1a      	ldr	r3, [pc, #104]	; (800f1dc <hci_notify_asynch_evt+0x94>)
 800f172:	68db      	ldr	r3, [r3, #12]
 800f174:	2b00      	cmp	r3, #0
 800f176:	d02a      	beq.n	800f1ce <hci_notify_asynch_evt+0x86>
    {
      data_len = hciContext.io.Receive(hciReadPacket->dataBuff, HCI_READ_PACKET_SIZE);
 800f178:	4b18      	ldr	r3, [pc, #96]	; (800f1dc <hci_notify_asynch_evt+0x94>)
 800f17a:	68db      	ldr	r3, [r3, #12]
 800f17c:	68fa      	ldr	r2, [r7, #12]
 800f17e:	3208      	adds	r2, #8
 800f180:	2180      	movs	r1, #128	; 0x80
 800f182:	4610      	mov	r0, r2
 800f184:	4798      	blx	r3
 800f186:	4603      	mov	r3, r0
 800f188:	74fb      	strb	r3, [r7, #19]
      if (data_len > 0)
 800f18a:	7cfb      	ldrb	r3, [r7, #19]
 800f18c:	2b00      	cmp	r3, #0
 800f18e:	d016      	beq.n	800f1be <hci_notify_asynch_evt+0x76>
      {                    
        hciReadPacket->data_len = data_len;
 800f190:	68fb      	ldr	r3, [r7, #12]
 800f192:	7cfa      	ldrb	r2, [r7, #19]
 800f194:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
        if (verify_packet(hciReadPacket) == 0)
 800f198:	68fb      	ldr	r3, [r7, #12]
 800f19a:	4618      	mov	r0, r3
 800f19c:	f7ff fd91 	bl	800ecc2 <verify_packet>
 800f1a0:	4603      	mov	r3, r0
 800f1a2:	2b00      	cmp	r3, #0
 800f1a4:	d105      	bne.n	800f1b2 <hci_notify_asynch_evt+0x6a>
          list_insert_tail(&hciReadPktRxQueue, (tListNode *)hciReadPacket);
 800f1a6:	68fb      	ldr	r3, [r7, #12]
 800f1a8:	4619      	mov	r1, r3
 800f1aa:	480d      	ldr	r0, [pc, #52]	; (800f1e0 <hci_notify_asynch_evt+0x98>)
 800f1ac:	f000 f872 	bl	800f294 <list_insert_tail>
 800f1b0:	e00d      	b.n	800f1ce <hci_notify_asynch_evt+0x86>
        else
          list_insert_head(&hciReadPktPool, (tListNode *)hciReadPacket);          
 800f1b2:	68fb      	ldr	r3, [r7, #12]
 800f1b4:	4619      	mov	r1, r3
 800f1b6:	4808      	ldr	r0, [pc, #32]	; (800f1d8 <hci_notify_asynch_evt+0x90>)
 800f1b8:	f000 f846 	bl	800f248 <list_insert_head>
 800f1bc:	e007      	b.n	800f1ce <hci_notify_asynch_evt+0x86>
      }
      else 
      {
        /* Insert the packet back into the pool*/
        list_insert_head(&hciReadPktPool, (tListNode *)hciReadPacket);
 800f1be:	68fb      	ldr	r3, [r7, #12]
 800f1c0:	4619      	mov	r1, r3
 800f1c2:	4805      	ldr	r0, [pc, #20]	; (800f1d8 <hci_notify_asynch_evt+0x90>)
 800f1c4:	f000 f840 	bl	800f248 <list_insert_head>
 800f1c8:	e001      	b.n	800f1ce <hci_notify_asynch_evt+0x86>
      }
    }
  }
  else 
  {
    ret = 1;
 800f1ca:	2301      	movs	r3, #1
 800f1cc:	617b      	str	r3, [r7, #20]
  }
  return ret;
 800f1ce:	697b      	ldr	r3, [r7, #20]

}
 800f1d0:	4618      	mov	r0, r3
 800f1d2:	3718      	adds	r7, #24
 800f1d4:	46bd      	mov	sp, r7
 800f1d6:	bd80      	pop	{r7, pc}
 800f1d8:	20000688 	.word	0x20000688
 800f1dc:	20000954 	.word	0x20000954
 800f1e0:	20000690 	.word	0x20000690

0800f1e4 <list_init_head>:

/******************************************************************************
 * Function Definitions 
******************************************************************************/
void list_init_head (tListNode * listHead)
{
 800f1e4:	b480      	push	{r7}
 800f1e6:	b083      	sub	sp, #12
 800f1e8:	af00      	add	r7, sp, #0
 800f1ea:	6078      	str	r0, [r7, #4]
  listHead->next = listHead;
 800f1ec:	687b      	ldr	r3, [r7, #4]
 800f1ee:	687a      	ldr	r2, [r7, #4]
 800f1f0:	601a      	str	r2, [r3, #0]
  listHead->prev = listHead;	
 800f1f2:	687b      	ldr	r3, [r7, #4]
 800f1f4:	687a      	ldr	r2, [r7, #4]
 800f1f6:	605a      	str	r2, [r3, #4]
}
 800f1f8:	bf00      	nop
 800f1fa:	370c      	adds	r7, #12
 800f1fc:	46bd      	mov	sp, r7
 800f1fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f202:	4770      	bx	lr

0800f204 <list_is_empty>:

uint8_t list_is_empty (tListNode * listHead)
{
 800f204:	b480      	push	{r7}
 800f206:	b087      	sub	sp, #28
 800f208:	af00      	add	r7, sp, #0
 800f20a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800f20c:	f3ef 8310 	mrs	r3, PRIMASK
 800f210:	60fb      	str	r3, [r7, #12]
  return(result);
 800f212:	68fb      	ldr	r3, [r7, #12]
  uint8_t return_value;
  
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800f214:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 800f216:	b672      	cpsid	i
}
 800f218:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
   
  if(listHead->next == listHead)
 800f21a:	687b      	ldr	r3, [r7, #4]
 800f21c:	681b      	ldr	r3, [r3, #0]
 800f21e:	687a      	ldr	r2, [r7, #4]
 800f220:	429a      	cmp	r2, r3
 800f222:	d102      	bne.n	800f22a <list_is_empty+0x26>
  {
    return_value = 1;
 800f224:	2301      	movs	r3, #1
 800f226:	75fb      	strb	r3, [r7, #23]
 800f228:	e001      	b.n	800f22e <list_is_empty+0x2a>
  }
  else
  {
    return_value = 0;
 800f22a:	2300      	movs	r3, #0
 800f22c:	75fb      	strb	r3, [r7, #23]
 800f22e:	693b      	ldr	r3, [r7, #16]
 800f230:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800f232:	68bb      	ldr	r3, [r7, #8]
 800f234:	f383 8810 	msr	PRIMASK, r3
}
 800f238:	bf00      	nop
  }
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
  
  return return_value;
 800f23a:	7dfb      	ldrb	r3, [r7, #23]
}
 800f23c:	4618      	mov	r0, r3
 800f23e:	371c      	adds	r7, #28
 800f240:	46bd      	mov	sp, r7
 800f242:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f246:	4770      	bx	lr

0800f248 <list_insert_head>:

void list_insert_head (tListNode * listHead, tListNode * node)
{
 800f248:	b480      	push	{r7}
 800f24a:	b087      	sub	sp, #28
 800f24c:	af00      	add	r7, sp, #0
 800f24e:	6078      	str	r0, [r7, #4]
 800f250:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800f252:	f3ef 8310 	mrs	r3, PRIMASK
 800f256:	60fb      	str	r3, [r7, #12]
  return(result);
 800f258:	68fb      	ldr	r3, [r7, #12]
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800f25a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800f25c:	b672      	cpsid	i
}
 800f25e:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  
  node->next = listHead->next;
 800f260:	687b      	ldr	r3, [r7, #4]
 800f262:	681a      	ldr	r2, [r3, #0]
 800f264:	683b      	ldr	r3, [r7, #0]
 800f266:	601a      	str	r2, [r3, #0]
  node->prev = listHead;
 800f268:	683b      	ldr	r3, [r7, #0]
 800f26a:	687a      	ldr	r2, [r7, #4]
 800f26c:	605a      	str	r2, [r3, #4]
  listHead->next = node;
 800f26e:	687b      	ldr	r3, [r7, #4]
 800f270:	683a      	ldr	r2, [r7, #0]
 800f272:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node;
 800f274:	683b      	ldr	r3, [r7, #0]
 800f276:	681b      	ldr	r3, [r3, #0]
 800f278:	683a      	ldr	r2, [r7, #0]
 800f27a:	605a      	str	r2, [r3, #4]
 800f27c:	697b      	ldr	r3, [r7, #20]
 800f27e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800f280:	693b      	ldr	r3, [r7, #16]
 800f282:	f383 8810 	msr	PRIMASK, r3
}
 800f286:	bf00      	nop
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}
 800f288:	bf00      	nop
 800f28a:	371c      	adds	r7, #28
 800f28c:	46bd      	mov	sp, r7
 800f28e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f292:	4770      	bx	lr

0800f294 <list_insert_tail>:

void list_insert_tail (tListNode * listHead, tListNode * node)
{
 800f294:	b480      	push	{r7}
 800f296:	b087      	sub	sp, #28
 800f298:	af00      	add	r7, sp, #0
 800f29a:	6078      	str	r0, [r7, #4]
 800f29c:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800f29e:	f3ef 8310 	mrs	r3, PRIMASK
 800f2a2:	60fb      	str	r3, [r7, #12]
  return(result);
 800f2a4:	68fb      	ldr	r3, [r7, #12]
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800f2a6:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800f2a8:	b672      	cpsid	i
}
 800f2aa:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  
  node->next = listHead;
 800f2ac:	683b      	ldr	r3, [r7, #0]
 800f2ae:	687a      	ldr	r2, [r7, #4]
 800f2b0:	601a      	str	r2, [r3, #0]
  node->prev = listHead->prev;
 800f2b2:	687b      	ldr	r3, [r7, #4]
 800f2b4:	685a      	ldr	r2, [r3, #4]
 800f2b6:	683b      	ldr	r3, [r7, #0]
 800f2b8:	605a      	str	r2, [r3, #4]
  listHead->prev = node;
 800f2ba:	687b      	ldr	r3, [r7, #4]
 800f2bc:	683a      	ldr	r2, [r7, #0]
 800f2be:	605a      	str	r2, [r3, #4]
  (node->prev)->next = node;
 800f2c0:	683b      	ldr	r3, [r7, #0]
 800f2c2:	685b      	ldr	r3, [r3, #4]
 800f2c4:	683a      	ldr	r2, [r7, #0]
 800f2c6:	601a      	str	r2, [r3, #0]
 800f2c8:	697b      	ldr	r3, [r7, #20]
 800f2ca:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800f2cc:	693b      	ldr	r3, [r7, #16]
 800f2ce:	f383 8810 	msr	PRIMASK, r3
}
 800f2d2:	bf00      	nop
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}
 800f2d4:	bf00      	nop
 800f2d6:	371c      	adds	r7, #28
 800f2d8:	46bd      	mov	sp, r7
 800f2da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2de:	4770      	bx	lr

0800f2e0 <list_remove_node>:

void list_remove_node (tListNode * node)
{
 800f2e0:	b480      	push	{r7}
 800f2e2:	b087      	sub	sp, #28
 800f2e4:	af00      	add	r7, sp, #0
 800f2e6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800f2e8:	f3ef 8310 	mrs	r3, PRIMASK
 800f2ec:	60fb      	str	r3, [r7, #12]
  return(result);
 800f2ee:	68fb      	ldr	r3, [r7, #12]
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800f2f0:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800f2f2:	b672      	cpsid	i
}
 800f2f4:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  
  (node->prev)->next = node->next;
 800f2f6:	687b      	ldr	r3, [r7, #4]
 800f2f8:	685b      	ldr	r3, [r3, #4]
 800f2fa:	687a      	ldr	r2, [r7, #4]
 800f2fc:	6812      	ldr	r2, [r2, #0]
 800f2fe:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node->prev;
 800f300:	687b      	ldr	r3, [r7, #4]
 800f302:	681b      	ldr	r3, [r3, #0]
 800f304:	687a      	ldr	r2, [r7, #4]
 800f306:	6852      	ldr	r2, [r2, #4]
 800f308:	605a      	str	r2, [r3, #4]
 800f30a:	697b      	ldr	r3, [r7, #20]
 800f30c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800f30e:	693b      	ldr	r3, [r7, #16]
 800f310:	f383 8810 	msr	PRIMASK, r3
}
 800f314:	bf00      	nop
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}
 800f316:	bf00      	nop
 800f318:	371c      	adds	r7, #28
 800f31a:	46bd      	mov	sp, r7
 800f31c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f320:	4770      	bx	lr

0800f322 <list_remove_head>:

void list_remove_head (tListNode * listHead, tListNode ** node )
{
 800f322:	b580      	push	{r7, lr}
 800f324:	b086      	sub	sp, #24
 800f326:	af00      	add	r7, sp, #0
 800f328:	6078      	str	r0, [r7, #4]
 800f32a:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800f32c:	f3ef 8310 	mrs	r3, PRIMASK
 800f330:	60fb      	str	r3, [r7, #12]
  return(result);
 800f332:	68fb      	ldr	r3, [r7, #12]
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800f334:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800f336:	b672      	cpsid	i
}
 800f338:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  
  *node = listHead->next;
 800f33a:	687b      	ldr	r3, [r7, #4]
 800f33c:	681a      	ldr	r2, [r3, #0]
 800f33e:	683b      	ldr	r3, [r7, #0]
 800f340:	601a      	str	r2, [r3, #0]
  list_remove_node (listHead->next);
 800f342:	687b      	ldr	r3, [r7, #4]
 800f344:	681b      	ldr	r3, [r3, #0]
 800f346:	4618      	mov	r0, r3
 800f348:	f7ff ffca 	bl	800f2e0 <list_remove_node>
  (*node)->next = NULL;
 800f34c:	683b      	ldr	r3, [r7, #0]
 800f34e:	681b      	ldr	r3, [r3, #0]
 800f350:	2200      	movs	r2, #0
 800f352:	601a      	str	r2, [r3, #0]
  (*node)->prev = NULL;
 800f354:	683b      	ldr	r3, [r7, #0]
 800f356:	681b      	ldr	r3, [r3, #0]
 800f358:	2200      	movs	r2, #0
 800f35a:	605a      	str	r2, [r3, #4]
 800f35c:	697b      	ldr	r3, [r7, #20]
 800f35e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800f360:	693b      	ldr	r3, [r7, #16]
 800f362:	f383 8810 	msr	PRIMASK, r3
}
 800f366:	bf00      	nop
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}
 800f368:	bf00      	nop
 800f36a:	3718      	adds	r7, #24
 800f36c:	46bd      	mov	sp, r7
 800f36e:	bd80      	pop	{r7, pc}

0800f370 <list_remove_tail>:

void list_remove_tail (tListNode * listHead, tListNode ** node )
{
 800f370:	b580      	push	{r7, lr}
 800f372:	b086      	sub	sp, #24
 800f374:	af00      	add	r7, sp, #0
 800f376:	6078      	str	r0, [r7, #4]
 800f378:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800f37a:	f3ef 8310 	mrs	r3, PRIMASK
 800f37e:	60fb      	str	r3, [r7, #12]
  return(result);
 800f380:	68fb      	ldr	r3, [r7, #12]
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800f382:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800f384:	b672      	cpsid	i
}
 800f386:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  
  *node = listHead->prev;
 800f388:	687b      	ldr	r3, [r7, #4]
 800f38a:	685a      	ldr	r2, [r3, #4]
 800f38c:	683b      	ldr	r3, [r7, #0]
 800f38e:	601a      	str	r2, [r3, #0]
  list_remove_node (listHead->prev);
 800f390:	687b      	ldr	r3, [r7, #4]
 800f392:	685b      	ldr	r3, [r3, #4]
 800f394:	4618      	mov	r0, r3
 800f396:	f7ff ffa3 	bl	800f2e0 <list_remove_node>
  (*node)->next = NULL;
 800f39a:	683b      	ldr	r3, [r7, #0]
 800f39c:	681b      	ldr	r3, [r3, #0]
 800f39e:	2200      	movs	r2, #0
 800f3a0:	601a      	str	r2, [r3, #0]
  (*node)->prev = NULL;
 800f3a2:	683b      	ldr	r3, [r7, #0]
 800f3a4:	681b      	ldr	r3, [r3, #0]
 800f3a6:	2200      	movs	r2, #0
 800f3a8:	605a      	str	r2, [r3, #4]
 800f3aa:	697b      	ldr	r3, [r7, #20]
 800f3ac:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800f3ae:	693b      	ldr	r3, [r7, #16]
 800f3b0:	f383 8810 	msr	PRIMASK, r3
}
 800f3b4:	bf00      	nop
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}
 800f3b6:	bf00      	nop
 800f3b8:	3718      	adds	r7, #24
 800f3ba:	46bd      	mov	sp, r7
 800f3bc:	bd80      	pop	{r7, pc}

0800f3be <list_get_size>:
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}

int list_get_size (tListNode * listHead)
{
 800f3be:	b480      	push	{r7}
 800f3c0:	b089      	sub	sp, #36	; 0x24
 800f3c2:	af00      	add	r7, sp, #0
 800f3c4:	6078      	str	r0, [r7, #4]
  int size = 0;
 800f3c6:	2300      	movs	r3, #0
 800f3c8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800f3ca:	f3ef 8310 	mrs	r3, PRIMASK
 800f3ce:	613b      	str	r3, [r7, #16]
  return(result);
 800f3d0:	693b      	ldr	r3, [r7, #16]
  tListNode * temp;

  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800f3d2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800f3d4:	b672      	cpsid	i
}
 800f3d6:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  temp = listHead->next;
 800f3d8:	687b      	ldr	r3, [r7, #4]
 800f3da:	681b      	ldr	r3, [r3, #0]
 800f3dc:	61bb      	str	r3, [r7, #24]
  while (temp != listHead)
 800f3de:	e005      	b.n	800f3ec <list_get_size+0x2e>
  {
    size++;
 800f3e0:	69fb      	ldr	r3, [r7, #28]
 800f3e2:	3301      	adds	r3, #1
 800f3e4:	61fb      	str	r3, [r7, #28]
    temp = temp->next;		
 800f3e6:	69bb      	ldr	r3, [r7, #24]
 800f3e8:	681b      	ldr	r3, [r3, #0]
 800f3ea:	61bb      	str	r3, [r7, #24]
  while (temp != listHead)
 800f3ec:	69ba      	ldr	r2, [r7, #24]
 800f3ee:	687b      	ldr	r3, [r7, #4]
 800f3f0:	429a      	cmp	r2, r3
 800f3f2:	d1f5      	bne.n	800f3e0 <list_get_size+0x22>
 800f3f4:	697b      	ldr	r3, [r7, #20]
 800f3f6:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800f3f8:	68fb      	ldr	r3, [r7, #12]
 800f3fa:	f383 8810 	msr	PRIMASK, r3
}
 800f3fe:	bf00      	nop
  }
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
  
  return (size);
 800f400:	69fb      	ldr	r3, [r7, #28]
}
 800f402:	4618      	mov	r0, r3
 800f404:	3724      	adds	r7, #36	; 0x24
 800f406:	46bd      	mov	sp, r7
 800f408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f40c:	4770      	bx	lr
	...

0800f410 <__errno>:
 800f410:	4b01      	ldr	r3, [pc, #4]	; (800f418 <__errno+0x8>)
 800f412:	6818      	ldr	r0, [r3, #0]
 800f414:	4770      	bx	lr
 800f416:	bf00      	nop
 800f418:	200001a0 	.word	0x200001a0

0800f41c <__libc_init_array>:
 800f41c:	b570      	push	{r4, r5, r6, lr}
 800f41e:	4d0d      	ldr	r5, [pc, #52]	; (800f454 <__libc_init_array+0x38>)
 800f420:	4c0d      	ldr	r4, [pc, #52]	; (800f458 <__libc_init_array+0x3c>)
 800f422:	1b64      	subs	r4, r4, r5
 800f424:	10a4      	asrs	r4, r4, #2
 800f426:	2600      	movs	r6, #0
 800f428:	42a6      	cmp	r6, r4
 800f42a:	d109      	bne.n	800f440 <__libc_init_array+0x24>
 800f42c:	4d0b      	ldr	r5, [pc, #44]	; (800f45c <__libc_init_array+0x40>)
 800f42e:	4c0c      	ldr	r4, [pc, #48]	; (800f460 <__libc_init_array+0x44>)
 800f430:	f001 f894 	bl	801055c <_init>
 800f434:	1b64      	subs	r4, r4, r5
 800f436:	10a4      	asrs	r4, r4, #2
 800f438:	2600      	movs	r6, #0
 800f43a:	42a6      	cmp	r6, r4
 800f43c:	d105      	bne.n	800f44a <__libc_init_array+0x2e>
 800f43e:	bd70      	pop	{r4, r5, r6, pc}
 800f440:	f855 3b04 	ldr.w	r3, [r5], #4
 800f444:	4798      	blx	r3
 800f446:	3601      	adds	r6, #1
 800f448:	e7ee      	b.n	800f428 <__libc_init_array+0xc>
 800f44a:	f855 3b04 	ldr.w	r3, [r5], #4
 800f44e:	4798      	blx	r3
 800f450:	3601      	adds	r6, #1
 800f452:	e7f2      	b.n	800f43a <__libc_init_array+0x1e>
 800f454:	08010710 	.word	0x08010710
 800f458:	08010710 	.word	0x08010710
 800f45c:	08010710 	.word	0x08010710
 800f460:	08010714 	.word	0x08010714

0800f464 <memcpy>:
 800f464:	440a      	add	r2, r1
 800f466:	4291      	cmp	r1, r2
 800f468:	f100 33ff 	add.w	r3, r0, #4294967295
 800f46c:	d100      	bne.n	800f470 <memcpy+0xc>
 800f46e:	4770      	bx	lr
 800f470:	b510      	push	{r4, lr}
 800f472:	f811 4b01 	ldrb.w	r4, [r1], #1
 800f476:	f803 4f01 	strb.w	r4, [r3, #1]!
 800f47a:	4291      	cmp	r1, r2
 800f47c:	d1f9      	bne.n	800f472 <memcpy+0xe>
 800f47e:	bd10      	pop	{r4, pc}

0800f480 <memset>:
 800f480:	4402      	add	r2, r0
 800f482:	4603      	mov	r3, r0
 800f484:	4293      	cmp	r3, r2
 800f486:	d100      	bne.n	800f48a <memset+0xa>
 800f488:	4770      	bx	lr
 800f48a:	f803 1b01 	strb.w	r1, [r3], #1
 800f48e:	e7f9      	b.n	800f484 <memset+0x4>

0800f490 <srand>:
 800f490:	b538      	push	{r3, r4, r5, lr}
 800f492:	4b10      	ldr	r3, [pc, #64]	; (800f4d4 <srand+0x44>)
 800f494:	681d      	ldr	r5, [r3, #0]
 800f496:	6bab      	ldr	r3, [r5, #56]	; 0x38
 800f498:	4604      	mov	r4, r0
 800f49a:	b9b3      	cbnz	r3, 800f4ca <srand+0x3a>
 800f49c:	2018      	movs	r0, #24
 800f49e:	f000 f893 	bl	800f5c8 <malloc>
 800f4a2:	4602      	mov	r2, r0
 800f4a4:	63a8      	str	r0, [r5, #56]	; 0x38
 800f4a6:	b920      	cbnz	r0, 800f4b2 <srand+0x22>
 800f4a8:	4b0b      	ldr	r3, [pc, #44]	; (800f4d8 <srand+0x48>)
 800f4aa:	480c      	ldr	r0, [pc, #48]	; (800f4dc <srand+0x4c>)
 800f4ac:	2142      	movs	r1, #66	; 0x42
 800f4ae:	f000 f85b 	bl	800f568 <__assert_func>
 800f4b2:	490b      	ldr	r1, [pc, #44]	; (800f4e0 <srand+0x50>)
 800f4b4:	4b0b      	ldr	r3, [pc, #44]	; (800f4e4 <srand+0x54>)
 800f4b6:	e9c0 1300 	strd	r1, r3, [r0]
 800f4ba:	4b0b      	ldr	r3, [pc, #44]	; (800f4e8 <srand+0x58>)
 800f4bc:	6083      	str	r3, [r0, #8]
 800f4be:	230b      	movs	r3, #11
 800f4c0:	8183      	strh	r3, [r0, #12]
 800f4c2:	2100      	movs	r1, #0
 800f4c4:	2001      	movs	r0, #1
 800f4c6:	e9c2 0104 	strd	r0, r1, [r2, #16]
 800f4ca:	6bab      	ldr	r3, [r5, #56]	; 0x38
 800f4cc:	2200      	movs	r2, #0
 800f4ce:	611c      	str	r4, [r3, #16]
 800f4d0:	615a      	str	r2, [r3, #20]
 800f4d2:	bd38      	pop	{r3, r4, r5, pc}
 800f4d4:	200001a0 	.word	0x200001a0
 800f4d8:	080105c4 	.word	0x080105c4
 800f4dc:	080105db 	.word	0x080105db
 800f4e0:	abcd330e 	.word	0xabcd330e
 800f4e4:	e66d1234 	.word	0xe66d1234
 800f4e8:	0005deec 	.word	0x0005deec

0800f4ec <rand>:
 800f4ec:	4b16      	ldr	r3, [pc, #88]	; (800f548 <rand+0x5c>)
 800f4ee:	b510      	push	{r4, lr}
 800f4f0:	681c      	ldr	r4, [r3, #0]
 800f4f2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800f4f4:	b9b3      	cbnz	r3, 800f524 <rand+0x38>
 800f4f6:	2018      	movs	r0, #24
 800f4f8:	f000 f866 	bl	800f5c8 <malloc>
 800f4fc:	63a0      	str	r0, [r4, #56]	; 0x38
 800f4fe:	b928      	cbnz	r0, 800f50c <rand+0x20>
 800f500:	4602      	mov	r2, r0
 800f502:	4b12      	ldr	r3, [pc, #72]	; (800f54c <rand+0x60>)
 800f504:	4812      	ldr	r0, [pc, #72]	; (800f550 <rand+0x64>)
 800f506:	214e      	movs	r1, #78	; 0x4e
 800f508:	f000 f82e 	bl	800f568 <__assert_func>
 800f50c:	4a11      	ldr	r2, [pc, #68]	; (800f554 <rand+0x68>)
 800f50e:	4b12      	ldr	r3, [pc, #72]	; (800f558 <rand+0x6c>)
 800f510:	e9c0 2300 	strd	r2, r3, [r0]
 800f514:	4b11      	ldr	r3, [pc, #68]	; (800f55c <rand+0x70>)
 800f516:	6083      	str	r3, [r0, #8]
 800f518:	230b      	movs	r3, #11
 800f51a:	8183      	strh	r3, [r0, #12]
 800f51c:	2201      	movs	r2, #1
 800f51e:	2300      	movs	r3, #0
 800f520:	e9c0 2304 	strd	r2, r3, [r0, #16]
 800f524:	6ba4      	ldr	r4, [r4, #56]	; 0x38
 800f526:	4a0e      	ldr	r2, [pc, #56]	; (800f560 <rand+0x74>)
 800f528:	6920      	ldr	r0, [r4, #16]
 800f52a:	6963      	ldr	r3, [r4, #20]
 800f52c:	490d      	ldr	r1, [pc, #52]	; (800f564 <rand+0x78>)
 800f52e:	4342      	muls	r2, r0
 800f530:	fb01 2203 	mla	r2, r1, r3, r2
 800f534:	fba0 0101 	umull	r0, r1, r0, r1
 800f538:	1c43      	adds	r3, r0, #1
 800f53a:	eb42 0001 	adc.w	r0, r2, r1
 800f53e:	e9c4 3004 	strd	r3, r0, [r4, #16]
 800f542:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 800f546:	bd10      	pop	{r4, pc}
 800f548:	200001a0 	.word	0x200001a0
 800f54c:	080105c4 	.word	0x080105c4
 800f550:	080105db 	.word	0x080105db
 800f554:	abcd330e 	.word	0xabcd330e
 800f558:	e66d1234 	.word	0xe66d1234
 800f55c:	0005deec 	.word	0x0005deec
 800f560:	5851f42d 	.word	0x5851f42d
 800f564:	4c957f2d 	.word	0x4c957f2d

0800f568 <__assert_func>:
 800f568:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800f56a:	4614      	mov	r4, r2
 800f56c:	461a      	mov	r2, r3
 800f56e:	4b09      	ldr	r3, [pc, #36]	; (800f594 <__assert_func+0x2c>)
 800f570:	681b      	ldr	r3, [r3, #0]
 800f572:	4605      	mov	r5, r0
 800f574:	68d8      	ldr	r0, [r3, #12]
 800f576:	b14c      	cbz	r4, 800f58c <__assert_func+0x24>
 800f578:	4b07      	ldr	r3, [pc, #28]	; (800f598 <__assert_func+0x30>)
 800f57a:	9100      	str	r1, [sp, #0]
 800f57c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800f580:	4906      	ldr	r1, [pc, #24]	; (800f59c <__assert_func+0x34>)
 800f582:	462b      	mov	r3, r5
 800f584:	f000 f80e 	bl	800f5a4 <fiprintf>
 800f588:	f000 fcc4 	bl	800ff14 <abort>
 800f58c:	4b04      	ldr	r3, [pc, #16]	; (800f5a0 <__assert_func+0x38>)
 800f58e:	461c      	mov	r4, r3
 800f590:	e7f3      	b.n	800f57a <__assert_func+0x12>
 800f592:	bf00      	nop
 800f594:	200001a0 	.word	0x200001a0
 800f598:	08010636 	.word	0x08010636
 800f59c:	08010643 	.word	0x08010643
 800f5a0:	08010671 	.word	0x08010671

0800f5a4 <fiprintf>:
 800f5a4:	b40e      	push	{r1, r2, r3}
 800f5a6:	b503      	push	{r0, r1, lr}
 800f5a8:	4601      	mov	r1, r0
 800f5aa:	ab03      	add	r3, sp, #12
 800f5ac:	4805      	ldr	r0, [pc, #20]	; (800f5c4 <fiprintf+0x20>)
 800f5ae:	f853 2b04 	ldr.w	r2, [r3], #4
 800f5b2:	6800      	ldr	r0, [r0, #0]
 800f5b4:	9301      	str	r3, [sp, #4]
 800f5b6:	f000 f919 	bl	800f7ec <_vfiprintf_r>
 800f5ba:	b002      	add	sp, #8
 800f5bc:	f85d eb04 	ldr.w	lr, [sp], #4
 800f5c0:	b003      	add	sp, #12
 800f5c2:	4770      	bx	lr
 800f5c4:	200001a0 	.word	0x200001a0

0800f5c8 <malloc>:
 800f5c8:	4b02      	ldr	r3, [pc, #8]	; (800f5d4 <malloc+0xc>)
 800f5ca:	4601      	mov	r1, r0
 800f5cc:	6818      	ldr	r0, [r3, #0]
 800f5ce:	f000 b86f 	b.w	800f6b0 <_malloc_r>
 800f5d2:	bf00      	nop
 800f5d4:	200001a0 	.word	0x200001a0

0800f5d8 <_free_r>:
 800f5d8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800f5da:	2900      	cmp	r1, #0
 800f5dc:	d044      	beq.n	800f668 <_free_r+0x90>
 800f5de:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f5e2:	9001      	str	r0, [sp, #4]
 800f5e4:	2b00      	cmp	r3, #0
 800f5e6:	f1a1 0404 	sub.w	r4, r1, #4
 800f5ea:	bfb8      	it	lt
 800f5ec:	18e4      	addlt	r4, r4, r3
 800f5ee:	f000 feb9 	bl	8010364 <__malloc_lock>
 800f5f2:	4a1e      	ldr	r2, [pc, #120]	; (800f66c <_free_r+0x94>)
 800f5f4:	9801      	ldr	r0, [sp, #4]
 800f5f6:	6813      	ldr	r3, [r2, #0]
 800f5f8:	b933      	cbnz	r3, 800f608 <_free_r+0x30>
 800f5fa:	6063      	str	r3, [r4, #4]
 800f5fc:	6014      	str	r4, [r2, #0]
 800f5fe:	b003      	add	sp, #12
 800f600:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800f604:	f000 beb4 	b.w	8010370 <__malloc_unlock>
 800f608:	42a3      	cmp	r3, r4
 800f60a:	d908      	bls.n	800f61e <_free_r+0x46>
 800f60c:	6825      	ldr	r5, [r4, #0]
 800f60e:	1961      	adds	r1, r4, r5
 800f610:	428b      	cmp	r3, r1
 800f612:	bf01      	itttt	eq
 800f614:	6819      	ldreq	r1, [r3, #0]
 800f616:	685b      	ldreq	r3, [r3, #4]
 800f618:	1949      	addeq	r1, r1, r5
 800f61a:	6021      	streq	r1, [r4, #0]
 800f61c:	e7ed      	b.n	800f5fa <_free_r+0x22>
 800f61e:	461a      	mov	r2, r3
 800f620:	685b      	ldr	r3, [r3, #4]
 800f622:	b10b      	cbz	r3, 800f628 <_free_r+0x50>
 800f624:	42a3      	cmp	r3, r4
 800f626:	d9fa      	bls.n	800f61e <_free_r+0x46>
 800f628:	6811      	ldr	r1, [r2, #0]
 800f62a:	1855      	adds	r5, r2, r1
 800f62c:	42a5      	cmp	r5, r4
 800f62e:	d10b      	bne.n	800f648 <_free_r+0x70>
 800f630:	6824      	ldr	r4, [r4, #0]
 800f632:	4421      	add	r1, r4
 800f634:	1854      	adds	r4, r2, r1
 800f636:	42a3      	cmp	r3, r4
 800f638:	6011      	str	r1, [r2, #0]
 800f63a:	d1e0      	bne.n	800f5fe <_free_r+0x26>
 800f63c:	681c      	ldr	r4, [r3, #0]
 800f63e:	685b      	ldr	r3, [r3, #4]
 800f640:	6053      	str	r3, [r2, #4]
 800f642:	4421      	add	r1, r4
 800f644:	6011      	str	r1, [r2, #0]
 800f646:	e7da      	b.n	800f5fe <_free_r+0x26>
 800f648:	d902      	bls.n	800f650 <_free_r+0x78>
 800f64a:	230c      	movs	r3, #12
 800f64c:	6003      	str	r3, [r0, #0]
 800f64e:	e7d6      	b.n	800f5fe <_free_r+0x26>
 800f650:	6825      	ldr	r5, [r4, #0]
 800f652:	1961      	adds	r1, r4, r5
 800f654:	428b      	cmp	r3, r1
 800f656:	bf04      	itt	eq
 800f658:	6819      	ldreq	r1, [r3, #0]
 800f65a:	685b      	ldreq	r3, [r3, #4]
 800f65c:	6063      	str	r3, [r4, #4]
 800f65e:	bf04      	itt	eq
 800f660:	1949      	addeq	r1, r1, r5
 800f662:	6021      	streq	r1, [r4, #0]
 800f664:	6054      	str	r4, [r2, #4]
 800f666:	e7ca      	b.n	800f5fe <_free_r+0x26>
 800f668:	b003      	add	sp, #12
 800f66a:	bd30      	pop	{r4, r5, pc}
 800f66c:	20000974 	.word	0x20000974

0800f670 <sbrk_aligned>:
 800f670:	b570      	push	{r4, r5, r6, lr}
 800f672:	4e0e      	ldr	r6, [pc, #56]	; (800f6ac <sbrk_aligned+0x3c>)
 800f674:	460c      	mov	r4, r1
 800f676:	6831      	ldr	r1, [r6, #0]
 800f678:	4605      	mov	r5, r0
 800f67a:	b911      	cbnz	r1, 800f682 <sbrk_aligned+0x12>
 800f67c:	f000 fb7a 	bl	800fd74 <_sbrk_r>
 800f680:	6030      	str	r0, [r6, #0]
 800f682:	4621      	mov	r1, r4
 800f684:	4628      	mov	r0, r5
 800f686:	f000 fb75 	bl	800fd74 <_sbrk_r>
 800f68a:	1c43      	adds	r3, r0, #1
 800f68c:	d00a      	beq.n	800f6a4 <sbrk_aligned+0x34>
 800f68e:	1cc4      	adds	r4, r0, #3
 800f690:	f024 0403 	bic.w	r4, r4, #3
 800f694:	42a0      	cmp	r0, r4
 800f696:	d007      	beq.n	800f6a8 <sbrk_aligned+0x38>
 800f698:	1a21      	subs	r1, r4, r0
 800f69a:	4628      	mov	r0, r5
 800f69c:	f000 fb6a 	bl	800fd74 <_sbrk_r>
 800f6a0:	3001      	adds	r0, #1
 800f6a2:	d101      	bne.n	800f6a8 <sbrk_aligned+0x38>
 800f6a4:	f04f 34ff 	mov.w	r4, #4294967295
 800f6a8:	4620      	mov	r0, r4
 800f6aa:	bd70      	pop	{r4, r5, r6, pc}
 800f6ac:	20000978 	.word	0x20000978

0800f6b0 <_malloc_r>:
 800f6b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f6b4:	1ccd      	adds	r5, r1, #3
 800f6b6:	f025 0503 	bic.w	r5, r5, #3
 800f6ba:	3508      	adds	r5, #8
 800f6bc:	2d0c      	cmp	r5, #12
 800f6be:	bf38      	it	cc
 800f6c0:	250c      	movcc	r5, #12
 800f6c2:	2d00      	cmp	r5, #0
 800f6c4:	4607      	mov	r7, r0
 800f6c6:	db01      	blt.n	800f6cc <_malloc_r+0x1c>
 800f6c8:	42a9      	cmp	r1, r5
 800f6ca:	d905      	bls.n	800f6d8 <_malloc_r+0x28>
 800f6cc:	230c      	movs	r3, #12
 800f6ce:	603b      	str	r3, [r7, #0]
 800f6d0:	2600      	movs	r6, #0
 800f6d2:	4630      	mov	r0, r6
 800f6d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f6d8:	4e2e      	ldr	r6, [pc, #184]	; (800f794 <_malloc_r+0xe4>)
 800f6da:	f000 fe43 	bl	8010364 <__malloc_lock>
 800f6de:	6833      	ldr	r3, [r6, #0]
 800f6e0:	461c      	mov	r4, r3
 800f6e2:	bb34      	cbnz	r4, 800f732 <_malloc_r+0x82>
 800f6e4:	4629      	mov	r1, r5
 800f6e6:	4638      	mov	r0, r7
 800f6e8:	f7ff ffc2 	bl	800f670 <sbrk_aligned>
 800f6ec:	1c43      	adds	r3, r0, #1
 800f6ee:	4604      	mov	r4, r0
 800f6f0:	d14d      	bne.n	800f78e <_malloc_r+0xde>
 800f6f2:	6834      	ldr	r4, [r6, #0]
 800f6f4:	4626      	mov	r6, r4
 800f6f6:	2e00      	cmp	r6, #0
 800f6f8:	d140      	bne.n	800f77c <_malloc_r+0xcc>
 800f6fa:	6823      	ldr	r3, [r4, #0]
 800f6fc:	4631      	mov	r1, r6
 800f6fe:	4638      	mov	r0, r7
 800f700:	eb04 0803 	add.w	r8, r4, r3
 800f704:	f000 fb36 	bl	800fd74 <_sbrk_r>
 800f708:	4580      	cmp	r8, r0
 800f70a:	d13a      	bne.n	800f782 <_malloc_r+0xd2>
 800f70c:	6821      	ldr	r1, [r4, #0]
 800f70e:	3503      	adds	r5, #3
 800f710:	1a6d      	subs	r5, r5, r1
 800f712:	f025 0503 	bic.w	r5, r5, #3
 800f716:	3508      	adds	r5, #8
 800f718:	2d0c      	cmp	r5, #12
 800f71a:	bf38      	it	cc
 800f71c:	250c      	movcc	r5, #12
 800f71e:	4629      	mov	r1, r5
 800f720:	4638      	mov	r0, r7
 800f722:	f7ff ffa5 	bl	800f670 <sbrk_aligned>
 800f726:	3001      	adds	r0, #1
 800f728:	d02b      	beq.n	800f782 <_malloc_r+0xd2>
 800f72a:	6823      	ldr	r3, [r4, #0]
 800f72c:	442b      	add	r3, r5
 800f72e:	6023      	str	r3, [r4, #0]
 800f730:	e00e      	b.n	800f750 <_malloc_r+0xa0>
 800f732:	6822      	ldr	r2, [r4, #0]
 800f734:	1b52      	subs	r2, r2, r5
 800f736:	d41e      	bmi.n	800f776 <_malloc_r+0xc6>
 800f738:	2a0b      	cmp	r2, #11
 800f73a:	d916      	bls.n	800f76a <_malloc_r+0xba>
 800f73c:	1961      	adds	r1, r4, r5
 800f73e:	42a3      	cmp	r3, r4
 800f740:	6025      	str	r5, [r4, #0]
 800f742:	bf18      	it	ne
 800f744:	6059      	strne	r1, [r3, #4]
 800f746:	6863      	ldr	r3, [r4, #4]
 800f748:	bf08      	it	eq
 800f74a:	6031      	streq	r1, [r6, #0]
 800f74c:	5162      	str	r2, [r4, r5]
 800f74e:	604b      	str	r3, [r1, #4]
 800f750:	4638      	mov	r0, r7
 800f752:	f104 060b 	add.w	r6, r4, #11
 800f756:	f000 fe0b 	bl	8010370 <__malloc_unlock>
 800f75a:	f026 0607 	bic.w	r6, r6, #7
 800f75e:	1d23      	adds	r3, r4, #4
 800f760:	1af2      	subs	r2, r6, r3
 800f762:	d0b6      	beq.n	800f6d2 <_malloc_r+0x22>
 800f764:	1b9b      	subs	r3, r3, r6
 800f766:	50a3      	str	r3, [r4, r2]
 800f768:	e7b3      	b.n	800f6d2 <_malloc_r+0x22>
 800f76a:	6862      	ldr	r2, [r4, #4]
 800f76c:	42a3      	cmp	r3, r4
 800f76e:	bf0c      	ite	eq
 800f770:	6032      	streq	r2, [r6, #0]
 800f772:	605a      	strne	r2, [r3, #4]
 800f774:	e7ec      	b.n	800f750 <_malloc_r+0xa0>
 800f776:	4623      	mov	r3, r4
 800f778:	6864      	ldr	r4, [r4, #4]
 800f77a:	e7b2      	b.n	800f6e2 <_malloc_r+0x32>
 800f77c:	4634      	mov	r4, r6
 800f77e:	6876      	ldr	r6, [r6, #4]
 800f780:	e7b9      	b.n	800f6f6 <_malloc_r+0x46>
 800f782:	230c      	movs	r3, #12
 800f784:	603b      	str	r3, [r7, #0]
 800f786:	4638      	mov	r0, r7
 800f788:	f000 fdf2 	bl	8010370 <__malloc_unlock>
 800f78c:	e7a1      	b.n	800f6d2 <_malloc_r+0x22>
 800f78e:	6025      	str	r5, [r4, #0]
 800f790:	e7de      	b.n	800f750 <_malloc_r+0xa0>
 800f792:	bf00      	nop
 800f794:	20000974 	.word	0x20000974

0800f798 <__sfputc_r>:
 800f798:	6893      	ldr	r3, [r2, #8]
 800f79a:	3b01      	subs	r3, #1
 800f79c:	2b00      	cmp	r3, #0
 800f79e:	b410      	push	{r4}
 800f7a0:	6093      	str	r3, [r2, #8]
 800f7a2:	da08      	bge.n	800f7b6 <__sfputc_r+0x1e>
 800f7a4:	6994      	ldr	r4, [r2, #24]
 800f7a6:	42a3      	cmp	r3, r4
 800f7a8:	db01      	blt.n	800f7ae <__sfputc_r+0x16>
 800f7aa:	290a      	cmp	r1, #10
 800f7ac:	d103      	bne.n	800f7b6 <__sfputc_r+0x1e>
 800f7ae:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f7b2:	f000 baef 	b.w	800fd94 <__swbuf_r>
 800f7b6:	6813      	ldr	r3, [r2, #0]
 800f7b8:	1c58      	adds	r0, r3, #1
 800f7ba:	6010      	str	r0, [r2, #0]
 800f7bc:	7019      	strb	r1, [r3, #0]
 800f7be:	4608      	mov	r0, r1
 800f7c0:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f7c4:	4770      	bx	lr

0800f7c6 <__sfputs_r>:
 800f7c6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f7c8:	4606      	mov	r6, r0
 800f7ca:	460f      	mov	r7, r1
 800f7cc:	4614      	mov	r4, r2
 800f7ce:	18d5      	adds	r5, r2, r3
 800f7d0:	42ac      	cmp	r4, r5
 800f7d2:	d101      	bne.n	800f7d8 <__sfputs_r+0x12>
 800f7d4:	2000      	movs	r0, #0
 800f7d6:	e007      	b.n	800f7e8 <__sfputs_r+0x22>
 800f7d8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f7dc:	463a      	mov	r2, r7
 800f7de:	4630      	mov	r0, r6
 800f7e0:	f7ff ffda 	bl	800f798 <__sfputc_r>
 800f7e4:	1c43      	adds	r3, r0, #1
 800f7e6:	d1f3      	bne.n	800f7d0 <__sfputs_r+0xa>
 800f7e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800f7ec <_vfiprintf_r>:
 800f7ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f7f0:	460d      	mov	r5, r1
 800f7f2:	b09d      	sub	sp, #116	; 0x74
 800f7f4:	4614      	mov	r4, r2
 800f7f6:	4698      	mov	r8, r3
 800f7f8:	4606      	mov	r6, r0
 800f7fa:	b118      	cbz	r0, 800f804 <_vfiprintf_r+0x18>
 800f7fc:	6983      	ldr	r3, [r0, #24]
 800f7fe:	b90b      	cbnz	r3, 800f804 <_vfiprintf_r+0x18>
 800f800:	f000 fcaa 	bl	8010158 <__sinit>
 800f804:	4b89      	ldr	r3, [pc, #548]	; (800fa2c <_vfiprintf_r+0x240>)
 800f806:	429d      	cmp	r5, r3
 800f808:	d11b      	bne.n	800f842 <_vfiprintf_r+0x56>
 800f80a:	6875      	ldr	r5, [r6, #4]
 800f80c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800f80e:	07d9      	lsls	r1, r3, #31
 800f810:	d405      	bmi.n	800f81e <_vfiprintf_r+0x32>
 800f812:	89ab      	ldrh	r3, [r5, #12]
 800f814:	059a      	lsls	r2, r3, #22
 800f816:	d402      	bmi.n	800f81e <_vfiprintf_r+0x32>
 800f818:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800f81a:	f000 fd3b 	bl	8010294 <__retarget_lock_acquire_recursive>
 800f81e:	89ab      	ldrh	r3, [r5, #12]
 800f820:	071b      	lsls	r3, r3, #28
 800f822:	d501      	bpl.n	800f828 <_vfiprintf_r+0x3c>
 800f824:	692b      	ldr	r3, [r5, #16]
 800f826:	b9eb      	cbnz	r3, 800f864 <_vfiprintf_r+0x78>
 800f828:	4629      	mov	r1, r5
 800f82a:	4630      	mov	r0, r6
 800f82c:	f000 fb04 	bl	800fe38 <__swsetup_r>
 800f830:	b1c0      	cbz	r0, 800f864 <_vfiprintf_r+0x78>
 800f832:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800f834:	07dc      	lsls	r4, r3, #31
 800f836:	d50e      	bpl.n	800f856 <_vfiprintf_r+0x6a>
 800f838:	f04f 30ff 	mov.w	r0, #4294967295
 800f83c:	b01d      	add	sp, #116	; 0x74
 800f83e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f842:	4b7b      	ldr	r3, [pc, #492]	; (800fa30 <_vfiprintf_r+0x244>)
 800f844:	429d      	cmp	r5, r3
 800f846:	d101      	bne.n	800f84c <_vfiprintf_r+0x60>
 800f848:	68b5      	ldr	r5, [r6, #8]
 800f84a:	e7df      	b.n	800f80c <_vfiprintf_r+0x20>
 800f84c:	4b79      	ldr	r3, [pc, #484]	; (800fa34 <_vfiprintf_r+0x248>)
 800f84e:	429d      	cmp	r5, r3
 800f850:	bf08      	it	eq
 800f852:	68f5      	ldreq	r5, [r6, #12]
 800f854:	e7da      	b.n	800f80c <_vfiprintf_r+0x20>
 800f856:	89ab      	ldrh	r3, [r5, #12]
 800f858:	0598      	lsls	r0, r3, #22
 800f85a:	d4ed      	bmi.n	800f838 <_vfiprintf_r+0x4c>
 800f85c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800f85e:	f000 fd1a 	bl	8010296 <__retarget_lock_release_recursive>
 800f862:	e7e9      	b.n	800f838 <_vfiprintf_r+0x4c>
 800f864:	2300      	movs	r3, #0
 800f866:	9309      	str	r3, [sp, #36]	; 0x24
 800f868:	2320      	movs	r3, #32
 800f86a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800f86e:	f8cd 800c 	str.w	r8, [sp, #12]
 800f872:	2330      	movs	r3, #48	; 0x30
 800f874:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800fa38 <_vfiprintf_r+0x24c>
 800f878:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800f87c:	f04f 0901 	mov.w	r9, #1
 800f880:	4623      	mov	r3, r4
 800f882:	469a      	mov	sl, r3
 800f884:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f888:	b10a      	cbz	r2, 800f88e <_vfiprintf_r+0xa2>
 800f88a:	2a25      	cmp	r2, #37	; 0x25
 800f88c:	d1f9      	bne.n	800f882 <_vfiprintf_r+0x96>
 800f88e:	ebba 0b04 	subs.w	fp, sl, r4
 800f892:	d00b      	beq.n	800f8ac <_vfiprintf_r+0xc0>
 800f894:	465b      	mov	r3, fp
 800f896:	4622      	mov	r2, r4
 800f898:	4629      	mov	r1, r5
 800f89a:	4630      	mov	r0, r6
 800f89c:	f7ff ff93 	bl	800f7c6 <__sfputs_r>
 800f8a0:	3001      	adds	r0, #1
 800f8a2:	f000 80aa 	beq.w	800f9fa <_vfiprintf_r+0x20e>
 800f8a6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800f8a8:	445a      	add	r2, fp
 800f8aa:	9209      	str	r2, [sp, #36]	; 0x24
 800f8ac:	f89a 3000 	ldrb.w	r3, [sl]
 800f8b0:	2b00      	cmp	r3, #0
 800f8b2:	f000 80a2 	beq.w	800f9fa <_vfiprintf_r+0x20e>
 800f8b6:	2300      	movs	r3, #0
 800f8b8:	f04f 32ff 	mov.w	r2, #4294967295
 800f8bc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800f8c0:	f10a 0a01 	add.w	sl, sl, #1
 800f8c4:	9304      	str	r3, [sp, #16]
 800f8c6:	9307      	str	r3, [sp, #28]
 800f8c8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800f8cc:	931a      	str	r3, [sp, #104]	; 0x68
 800f8ce:	4654      	mov	r4, sl
 800f8d0:	2205      	movs	r2, #5
 800f8d2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f8d6:	4858      	ldr	r0, [pc, #352]	; (800fa38 <_vfiprintf_r+0x24c>)
 800f8d8:	f7f0 fc8a 	bl	80001f0 <memchr>
 800f8dc:	9a04      	ldr	r2, [sp, #16]
 800f8de:	b9d8      	cbnz	r0, 800f918 <_vfiprintf_r+0x12c>
 800f8e0:	06d1      	lsls	r1, r2, #27
 800f8e2:	bf44      	itt	mi
 800f8e4:	2320      	movmi	r3, #32
 800f8e6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f8ea:	0713      	lsls	r3, r2, #28
 800f8ec:	bf44      	itt	mi
 800f8ee:	232b      	movmi	r3, #43	; 0x2b
 800f8f0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f8f4:	f89a 3000 	ldrb.w	r3, [sl]
 800f8f8:	2b2a      	cmp	r3, #42	; 0x2a
 800f8fa:	d015      	beq.n	800f928 <_vfiprintf_r+0x13c>
 800f8fc:	9a07      	ldr	r2, [sp, #28]
 800f8fe:	4654      	mov	r4, sl
 800f900:	2000      	movs	r0, #0
 800f902:	f04f 0c0a 	mov.w	ip, #10
 800f906:	4621      	mov	r1, r4
 800f908:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f90c:	3b30      	subs	r3, #48	; 0x30
 800f90e:	2b09      	cmp	r3, #9
 800f910:	d94e      	bls.n	800f9b0 <_vfiprintf_r+0x1c4>
 800f912:	b1b0      	cbz	r0, 800f942 <_vfiprintf_r+0x156>
 800f914:	9207      	str	r2, [sp, #28]
 800f916:	e014      	b.n	800f942 <_vfiprintf_r+0x156>
 800f918:	eba0 0308 	sub.w	r3, r0, r8
 800f91c:	fa09 f303 	lsl.w	r3, r9, r3
 800f920:	4313      	orrs	r3, r2
 800f922:	9304      	str	r3, [sp, #16]
 800f924:	46a2      	mov	sl, r4
 800f926:	e7d2      	b.n	800f8ce <_vfiprintf_r+0xe2>
 800f928:	9b03      	ldr	r3, [sp, #12]
 800f92a:	1d19      	adds	r1, r3, #4
 800f92c:	681b      	ldr	r3, [r3, #0]
 800f92e:	9103      	str	r1, [sp, #12]
 800f930:	2b00      	cmp	r3, #0
 800f932:	bfbb      	ittet	lt
 800f934:	425b      	neglt	r3, r3
 800f936:	f042 0202 	orrlt.w	r2, r2, #2
 800f93a:	9307      	strge	r3, [sp, #28]
 800f93c:	9307      	strlt	r3, [sp, #28]
 800f93e:	bfb8      	it	lt
 800f940:	9204      	strlt	r2, [sp, #16]
 800f942:	7823      	ldrb	r3, [r4, #0]
 800f944:	2b2e      	cmp	r3, #46	; 0x2e
 800f946:	d10c      	bne.n	800f962 <_vfiprintf_r+0x176>
 800f948:	7863      	ldrb	r3, [r4, #1]
 800f94a:	2b2a      	cmp	r3, #42	; 0x2a
 800f94c:	d135      	bne.n	800f9ba <_vfiprintf_r+0x1ce>
 800f94e:	9b03      	ldr	r3, [sp, #12]
 800f950:	1d1a      	adds	r2, r3, #4
 800f952:	681b      	ldr	r3, [r3, #0]
 800f954:	9203      	str	r2, [sp, #12]
 800f956:	2b00      	cmp	r3, #0
 800f958:	bfb8      	it	lt
 800f95a:	f04f 33ff 	movlt.w	r3, #4294967295
 800f95e:	3402      	adds	r4, #2
 800f960:	9305      	str	r3, [sp, #20]
 800f962:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800fa48 <_vfiprintf_r+0x25c>
 800f966:	7821      	ldrb	r1, [r4, #0]
 800f968:	2203      	movs	r2, #3
 800f96a:	4650      	mov	r0, sl
 800f96c:	f7f0 fc40 	bl	80001f0 <memchr>
 800f970:	b140      	cbz	r0, 800f984 <_vfiprintf_r+0x198>
 800f972:	2340      	movs	r3, #64	; 0x40
 800f974:	eba0 000a 	sub.w	r0, r0, sl
 800f978:	fa03 f000 	lsl.w	r0, r3, r0
 800f97c:	9b04      	ldr	r3, [sp, #16]
 800f97e:	4303      	orrs	r3, r0
 800f980:	3401      	adds	r4, #1
 800f982:	9304      	str	r3, [sp, #16]
 800f984:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f988:	482c      	ldr	r0, [pc, #176]	; (800fa3c <_vfiprintf_r+0x250>)
 800f98a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800f98e:	2206      	movs	r2, #6
 800f990:	f7f0 fc2e 	bl	80001f0 <memchr>
 800f994:	2800      	cmp	r0, #0
 800f996:	d03f      	beq.n	800fa18 <_vfiprintf_r+0x22c>
 800f998:	4b29      	ldr	r3, [pc, #164]	; (800fa40 <_vfiprintf_r+0x254>)
 800f99a:	bb1b      	cbnz	r3, 800f9e4 <_vfiprintf_r+0x1f8>
 800f99c:	9b03      	ldr	r3, [sp, #12]
 800f99e:	3307      	adds	r3, #7
 800f9a0:	f023 0307 	bic.w	r3, r3, #7
 800f9a4:	3308      	adds	r3, #8
 800f9a6:	9303      	str	r3, [sp, #12]
 800f9a8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f9aa:	443b      	add	r3, r7
 800f9ac:	9309      	str	r3, [sp, #36]	; 0x24
 800f9ae:	e767      	b.n	800f880 <_vfiprintf_r+0x94>
 800f9b0:	fb0c 3202 	mla	r2, ip, r2, r3
 800f9b4:	460c      	mov	r4, r1
 800f9b6:	2001      	movs	r0, #1
 800f9b8:	e7a5      	b.n	800f906 <_vfiprintf_r+0x11a>
 800f9ba:	2300      	movs	r3, #0
 800f9bc:	3401      	adds	r4, #1
 800f9be:	9305      	str	r3, [sp, #20]
 800f9c0:	4619      	mov	r1, r3
 800f9c2:	f04f 0c0a 	mov.w	ip, #10
 800f9c6:	4620      	mov	r0, r4
 800f9c8:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f9cc:	3a30      	subs	r2, #48	; 0x30
 800f9ce:	2a09      	cmp	r2, #9
 800f9d0:	d903      	bls.n	800f9da <_vfiprintf_r+0x1ee>
 800f9d2:	2b00      	cmp	r3, #0
 800f9d4:	d0c5      	beq.n	800f962 <_vfiprintf_r+0x176>
 800f9d6:	9105      	str	r1, [sp, #20]
 800f9d8:	e7c3      	b.n	800f962 <_vfiprintf_r+0x176>
 800f9da:	fb0c 2101 	mla	r1, ip, r1, r2
 800f9de:	4604      	mov	r4, r0
 800f9e0:	2301      	movs	r3, #1
 800f9e2:	e7f0      	b.n	800f9c6 <_vfiprintf_r+0x1da>
 800f9e4:	ab03      	add	r3, sp, #12
 800f9e6:	9300      	str	r3, [sp, #0]
 800f9e8:	462a      	mov	r2, r5
 800f9ea:	4b16      	ldr	r3, [pc, #88]	; (800fa44 <_vfiprintf_r+0x258>)
 800f9ec:	a904      	add	r1, sp, #16
 800f9ee:	4630      	mov	r0, r6
 800f9f0:	f3af 8000 	nop.w
 800f9f4:	4607      	mov	r7, r0
 800f9f6:	1c78      	adds	r0, r7, #1
 800f9f8:	d1d6      	bne.n	800f9a8 <_vfiprintf_r+0x1bc>
 800f9fa:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800f9fc:	07d9      	lsls	r1, r3, #31
 800f9fe:	d405      	bmi.n	800fa0c <_vfiprintf_r+0x220>
 800fa00:	89ab      	ldrh	r3, [r5, #12]
 800fa02:	059a      	lsls	r2, r3, #22
 800fa04:	d402      	bmi.n	800fa0c <_vfiprintf_r+0x220>
 800fa06:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800fa08:	f000 fc45 	bl	8010296 <__retarget_lock_release_recursive>
 800fa0c:	89ab      	ldrh	r3, [r5, #12]
 800fa0e:	065b      	lsls	r3, r3, #25
 800fa10:	f53f af12 	bmi.w	800f838 <_vfiprintf_r+0x4c>
 800fa14:	9809      	ldr	r0, [sp, #36]	; 0x24
 800fa16:	e711      	b.n	800f83c <_vfiprintf_r+0x50>
 800fa18:	ab03      	add	r3, sp, #12
 800fa1a:	9300      	str	r3, [sp, #0]
 800fa1c:	462a      	mov	r2, r5
 800fa1e:	4b09      	ldr	r3, [pc, #36]	; (800fa44 <_vfiprintf_r+0x258>)
 800fa20:	a904      	add	r1, sp, #16
 800fa22:	4630      	mov	r0, r6
 800fa24:	f000 f880 	bl	800fb28 <_printf_i>
 800fa28:	e7e4      	b.n	800f9f4 <_vfiprintf_r+0x208>
 800fa2a:	bf00      	nop
 800fa2c:	080106c8 	.word	0x080106c8
 800fa30:	080106e8 	.word	0x080106e8
 800fa34:	080106a8 	.word	0x080106a8
 800fa38:	08010672 	.word	0x08010672
 800fa3c:	0801067c 	.word	0x0801067c
 800fa40:	00000000 	.word	0x00000000
 800fa44:	0800f7c7 	.word	0x0800f7c7
 800fa48:	08010678 	.word	0x08010678

0800fa4c <_printf_common>:
 800fa4c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800fa50:	4616      	mov	r6, r2
 800fa52:	4699      	mov	r9, r3
 800fa54:	688a      	ldr	r2, [r1, #8]
 800fa56:	690b      	ldr	r3, [r1, #16]
 800fa58:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800fa5c:	4293      	cmp	r3, r2
 800fa5e:	bfb8      	it	lt
 800fa60:	4613      	movlt	r3, r2
 800fa62:	6033      	str	r3, [r6, #0]
 800fa64:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800fa68:	4607      	mov	r7, r0
 800fa6a:	460c      	mov	r4, r1
 800fa6c:	b10a      	cbz	r2, 800fa72 <_printf_common+0x26>
 800fa6e:	3301      	adds	r3, #1
 800fa70:	6033      	str	r3, [r6, #0]
 800fa72:	6823      	ldr	r3, [r4, #0]
 800fa74:	0699      	lsls	r1, r3, #26
 800fa76:	bf42      	ittt	mi
 800fa78:	6833      	ldrmi	r3, [r6, #0]
 800fa7a:	3302      	addmi	r3, #2
 800fa7c:	6033      	strmi	r3, [r6, #0]
 800fa7e:	6825      	ldr	r5, [r4, #0]
 800fa80:	f015 0506 	ands.w	r5, r5, #6
 800fa84:	d106      	bne.n	800fa94 <_printf_common+0x48>
 800fa86:	f104 0a19 	add.w	sl, r4, #25
 800fa8a:	68e3      	ldr	r3, [r4, #12]
 800fa8c:	6832      	ldr	r2, [r6, #0]
 800fa8e:	1a9b      	subs	r3, r3, r2
 800fa90:	42ab      	cmp	r3, r5
 800fa92:	dc26      	bgt.n	800fae2 <_printf_common+0x96>
 800fa94:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800fa98:	1e13      	subs	r3, r2, #0
 800fa9a:	6822      	ldr	r2, [r4, #0]
 800fa9c:	bf18      	it	ne
 800fa9e:	2301      	movne	r3, #1
 800faa0:	0692      	lsls	r2, r2, #26
 800faa2:	d42b      	bmi.n	800fafc <_printf_common+0xb0>
 800faa4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800faa8:	4649      	mov	r1, r9
 800faaa:	4638      	mov	r0, r7
 800faac:	47c0      	blx	r8
 800faae:	3001      	adds	r0, #1
 800fab0:	d01e      	beq.n	800faf0 <_printf_common+0xa4>
 800fab2:	6823      	ldr	r3, [r4, #0]
 800fab4:	68e5      	ldr	r5, [r4, #12]
 800fab6:	6832      	ldr	r2, [r6, #0]
 800fab8:	f003 0306 	and.w	r3, r3, #6
 800fabc:	2b04      	cmp	r3, #4
 800fabe:	bf08      	it	eq
 800fac0:	1aad      	subeq	r5, r5, r2
 800fac2:	68a3      	ldr	r3, [r4, #8]
 800fac4:	6922      	ldr	r2, [r4, #16]
 800fac6:	bf0c      	ite	eq
 800fac8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800facc:	2500      	movne	r5, #0
 800face:	4293      	cmp	r3, r2
 800fad0:	bfc4      	itt	gt
 800fad2:	1a9b      	subgt	r3, r3, r2
 800fad4:	18ed      	addgt	r5, r5, r3
 800fad6:	2600      	movs	r6, #0
 800fad8:	341a      	adds	r4, #26
 800fada:	42b5      	cmp	r5, r6
 800fadc:	d11a      	bne.n	800fb14 <_printf_common+0xc8>
 800fade:	2000      	movs	r0, #0
 800fae0:	e008      	b.n	800faf4 <_printf_common+0xa8>
 800fae2:	2301      	movs	r3, #1
 800fae4:	4652      	mov	r2, sl
 800fae6:	4649      	mov	r1, r9
 800fae8:	4638      	mov	r0, r7
 800faea:	47c0      	blx	r8
 800faec:	3001      	adds	r0, #1
 800faee:	d103      	bne.n	800faf8 <_printf_common+0xac>
 800faf0:	f04f 30ff 	mov.w	r0, #4294967295
 800faf4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800faf8:	3501      	adds	r5, #1
 800fafa:	e7c6      	b.n	800fa8a <_printf_common+0x3e>
 800fafc:	18e1      	adds	r1, r4, r3
 800fafe:	1c5a      	adds	r2, r3, #1
 800fb00:	2030      	movs	r0, #48	; 0x30
 800fb02:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800fb06:	4422      	add	r2, r4
 800fb08:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800fb0c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800fb10:	3302      	adds	r3, #2
 800fb12:	e7c7      	b.n	800faa4 <_printf_common+0x58>
 800fb14:	2301      	movs	r3, #1
 800fb16:	4622      	mov	r2, r4
 800fb18:	4649      	mov	r1, r9
 800fb1a:	4638      	mov	r0, r7
 800fb1c:	47c0      	blx	r8
 800fb1e:	3001      	adds	r0, #1
 800fb20:	d0e6      	beq.n	800faf0 <_printf_common+0xa4>
 800fb22:	3601      	adds	r6, #1
 800fb24:	e7d9      	b.n	800fada <_printf_common+0x8e>
	...

0800fb28 <_printf_i>:
 800fb28:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800fb2c:	7e0f      	ldrb	r7, [r1, #24]
 800fb2e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800fb30:	2f78      	cmp	r7, #120	; 0x78
 800fb32:	4691      	mov	r9, r2
 800fb34:	4680      	mov	r8, r0
 800fb36:	460c      	mov	r4, r1
 800fb38:	469a      	mov	sl, r3
 800fb3a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800fb3e:	d807      	bhi.n	800fb50 <_printf_i+0x28>
 800fb40:	2f62      	cmp	r7, #98	; 0x62
 800fb42:	d80a      	bhi.n	800fb5a <_printf_i+0x32>
 800fb44:	2f00      	cmp	r7, #0
 800fb46:	f000 80d8 	beq.w	800fcfa <_printf_i+0x1d2>
 800fb4a:	2f58      	cmp	r7, #88	; 0x58
 800fb4c:	f000 80a3 	beq.w	800fc96 <_printf_i+0x16e>
 800fb50:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800fb54:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800fb58:	e03a      	b.n	800fbd0 <_printf_i+0xa8>
 800fb5a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800fb5e:	2b15      	cmp	r3, #21
 800fb60:	d8f6      	bhi.n	800fb50 <_printf_i+0x28>
 800fb62:	a101      	add	r1, pc, #4	; (adr r1, 800fb68 <_printf_i+0x40>)
 800fb64:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800fb68:	0800fbc1 	.word	0x0800fbc1
 800fb6c:	0800fbd5 	.word	0x0800fbd5
 800fb70:	0800fb51 	.word	0x0800fb51
 800fb74:	0800fb51 	.word	0x0800fb51
 800fb78:	0800fb51 	.word	0x0800fb51
 800fb7c:	0800fb51 	.word	0x0800fb51
 800fb80:	0800fbd5 	.word	0x0800fbd5
 800fb84:	0800fb51 	.word	0x0800fb51
 800fb88:	0800fb51 	.word	0x0800fb51
 800fb8c:	0800fb51 	.word	0x0800fb51
 800fb90:	0800fb51 	.word	0x0800fb51
 800fb94:	0800fce1 	.word	0x0800fce1
 800fb98:	0800fc05 	.word	0x0800fc05
 800fb9c:	0800fcc3 	.word	0x0800fcc3
 800fba0:	0800fb51 	.word	0x0800fb51
 800fba4:	0800fb51 	.word	0x0800fb51
 800fba8:	0800fd03 	.word	0x0800fd03
 800fbac:	0800fb51 	.word	0x0800fb51
 800fbb0:	0800fc05 	.word	0x0800fc05
 800fbb4:	0800fb51 	.word	0x0800fb51
 800fbb8:	0800fb51 	.word	0x0800fb51
 800fbbc:	0800fccb 	.word	0x0800fccb
 800fbc0:	682b      	ldr	r3, [r5, #0]
 800fbc2:	1d1a      	adds	r2, r3, #4
 800fbc4:	681b      	ldr	r3, [r3, #0]
 800fbc6:	602a      	str	r2, [r5, #0]
 800fbc8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800fbcc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800fbd0:	2301      	movs	r3, #1
 800fbd2:	e0a3      	b.n	800fd1c <_printf_i+0x1f4>
 800fbd4:	6820      	ldr	r0, [r4, #0]
 800fbd6:	6829      	ldr	r1, [r5, #0]
 800fbd8:	0606      	lsls	r6, r0, #24
 800fbda:	f101 0304 	add.w	r3, r1, #4
 800fbde:	d50a      	bpl.n	800fbf6 <_printf_i+0xce>
 800fbe0:	680e      	ldr	r6, [r1, #0]
 800fbe2:	602b      	str	r3, [r5, #0]
 800fbe4:	2e00      	cmp	r6, #0
 800fbe6:	da03      	bge.n	800fbf0 <_printf_i+0xc8>
 800fbe8:	232d      	movs	r3, #45	; 0x2d
 800fbea:	4276      	negs	r6, r6
 800fbec:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800fbf0:	485e      	ldr	r0, [pc, #376]	; (800fd6c <_printf_i+0x244>)
 800fbf2:	230a      	movs	r3, #10
 800fbf4:	e019      	b.n	800fc2a <_printf_i+0x102>
 800fbf6:	680e      	ldr	r6, [r1, #0]
 800fbf8:	602b      	str	r3, [r5, #0]
 800fbfa:	f010 0f40 	tst.w	r0, #64	; 0x40
 800fbfe:	bf18      	it	ne
 800fc00:	b236      	sxthne	r6, r6
 800fc02:	e7ef      	b.n	800fbe4 <_printf_i+0xbc>
 800fc04:	682b      	ldr	r3, [r5, #0]
 800fc06:	6820      	ldr	r0, [r4, #0]
 800fc08:	1d19      	adds	r1, r3, #4
 800fc0a:	6029      	str	r1, [r5, #0]
 800fc0c:	0601      	lsls	r1, r0, #24
 800fc0e:	d501      	bpl.n	800fc14 <_printf_i+0xec>
 800fc10:	681e      	ldr	r6, [r3, #0]
 800fc12:	e002      	b.n	800fc1a <_printf_i+0xf2>
 800fc14:	0646      	lsls	r6, r0, #25
 800fc16:	d5fb      	bpl.n	800fc10 <_printf_i+0xe8>
 800fc18:	881e      	ldrh	r6, [r3, #0]
 800fc1a:	4854      	ldr	r0, [pc, #336]	; (800fd6c <_printf_i+0x244>)
 800fc1c:	2f6f      	cmp	r7, #111	; 0x6f
 800fc1e:	bf0c      	ite	eq
 800fc20:	2308      	moveq	r3, #8
 800fc22:	230a      	movne	r3, #10
 800fc24:	2100      	movs	r1, #0
 800fc26:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800fc2a:	6865      	ldr	r5, [r4, #4]
 800fc2c:	60a5      	str	r5, [r4, #8]
 800fc2e:	2d00      	cmp	r5, #0
 800fc30:	bfa2      	ittt	ge
 800fc32:	6821      	ldrge	r1, [r4, #0]
 800fc34:	f021 0104 	bicge.w	r1, r1, #4
 800fc38:	6021      	strge	r1, [r4, #0]
 800fc3a:	b90e      	cbnz	r6, 800fc40 <_printf_i+0x118>
 800fc3c:	2d00      	cmp	r5, #0
 800fc3e:	d04d      	beq.n	800fcdc <_printf_i+0x1b4>
 800fc40:	4615      	mov	r5, r2
 800fc42:	fbb6 f1f3 	udiv	r1, r6, r3
 800fc46:	fb03 6711 	mls	r7, r3, r1, r6
 800fc4a:	5dc7      	ldrb	r7, [r0, r7]
 800fc4c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800fc50:	4637      	mov	r7, r6
 800fc52:	42bb      	cmp	r3, r7
 800fc54:	460e      	mov	r6, r1
 800fc56:	d9f4      	bls.n	800fc42 <_printf_i+0x11a>
 800fc58:	2b08      	cmp	r3, #8
 800fc5a:	d10b      	bne.n	800fc74 <_printf_i+0x14c>
 800fc5c:	6823      	ldr	r3, [r4, #0]
 800fc5e:	07de      	lsls	r6, r3, #31
 800fc60:	d508      	bpl.n	800fc74 <_printf_i+0x14c>
 800fc62:	6923      	ldr	r3, [r4, #16]
 800fc64:	6861      	ldr	r1, [r4, #4]
 800fc66:	4299      	cmp	r1, r3
 800fc68:	bfde      	ittt	le
 800fc6a:	2330      	movle	r3, #48	; 0x30
 800fc6c:	f805 3c01 	strble.w	r3, [r5, #-1]
 800fc70:	f105 35ff 	addle.w	r5, r5, #4294967295
 800fc74:	1b52      	subs	r2, r2, r5
 800fc76:	6122      	str	r2, [r4, #16]
 800fc78:	f8cd a000 	str.w	sl, [sp]
 800fc7c:	464b      	mov	r3, r9
 800fc7e:	aa03      	add	r2, sp, #12
 800fc80:	4621      	mov	r1, r4
 800fc82:	4640      	mov	r0, r8
 800fc84:	f7ff fee2 	bl	800fa4c <_printf_common>
 800fc88:	3001      	adds	r0, #1
 800fc8a:	d14c      	bne.n	800fd26 <_printf_i+0x1fe>
 800fc8c:	f04f 30ff 	mov.w	r0, #4294967295
 800fc90:	b004      	add	sp, #16
 800fc92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fc96:	4835      	ldr	r0, [pc, #212]	; (800fd6c <_printf_i+0x244>)
 800fc98:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800fc9c:	6829      	ldr	r1, [r5, #0]
 800fc9e:	6823      	ldr	r3, [r4, #0]
 800fca0:	f851 6b04 	ldr.w	r6, [r1], #4
 800fca4:	6029      	str	r1, [r5, #0]
 800fca6:	061d      	lsls	r5, r3, #24
 800fca8:	d514      	bpl.n	800fcd4 <_printf_i+0x1ac>
 800fcaa:	07df      	lsls	r7, r3, #31
 800fcac:	bf44      	itt	mi
 800fcae:	f043 0320 	orrmi.w	r3, r3, #32
 800fcb2:	6023      	strmi	r3, [r4, #0]
 800fcb4:	b91e      	cbnz	r6, 800fcbe <_printf_i+0x196>
 800fcb6:	6823      	ldr	r3, [r4, #0]
 800fcb8:	f023 0320 	bic.w	r3, r3, #32
 800fcbc:	6023      	str	r3, [r4, #0]
 800fcbe:	2310      	movs	r3, #16
 800fcc0:	e7b0      	b.n	800fc24 <_printf_i+0xfc>
 800fcc2:	6823      	ldr	r3, [r4, #0]
 800fcc4:	f043 0320 	orr.w	r3, r3, #32
 800fcc8:	6023      	str	r3, [r4, #0]
 800fcca:	2378      	movs	r3, #120	; 0x78
 800fccc:	4828      	ldr	r0, [pc, #160]	; (800fd70 <_printf_i+0x248>)
 800fcce:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800fcd2:	e7e3      	b.n	800fc9c <_printf_i+0x174>
 800fcd4:	0659      	lsls	r1, r3, #25
 800fcd6:	bf48      	it	mi
 800fcd8:	b2b6      	uxthmi	r6, r6
 800fcda:	e7e6      	b.n	800fcaa <_printf_i+0x182>
 800fcdc:	4615      	mov	r5, r2
 800fcde:	e7bb      	b.n	800fc58 <_printf_i+0x130>
 800fce0:	682b      	ldr	r3, [r5, #0]
 800fce2:	6826      	ldr	r6, [r4, #0]
 800fce4:	6961      	ldr	r1, [r4, #20]
 800fce6:	1d18      	adds	r0, r3, #4
 800fce8:	6028      	str	r0, [r5, #0]
 800fcea:	0635      	lsls	r5, r6, #24
 800fcec:	681b      	ldr	r3, [r3, #0]
 800fcee:	d501      	bpl.n	800fcf4 <_printf_i+0x1cc>
 800fcf0:	6019      	str	r1, [r3, #0]
 800fcf2:	e002      	b.n	800fcfa <_printf_i+0x1d2>
 800fcf4:	0670      	lsls	r0, r6, #25
 800fcf6:	d5fb      	bpl.n	800fcf0 <_printf_i+0x1c8>
 800fcf8:	8019      	strh	r1, [r3, #0]
 800fcfa:	2300      	movs	r3, #0
 800fcfc:	6123      	str	r3, [r4, #16]
 800fcfe:	4615      	mov	r5, r2
 800fd00:	e7ba      	b.n	800fc78 <_printf_i+0x150>
 800fd02:	682b      	ldr	r3, [r5, #0]
 800fd04:	1d1a      	adds	r2, r3, #4
 800fd06:	602a      	str	r2, [r5, #0]
 800fd08:	681d      	ldr	r5, [r3, #0]
 800fd0a:	6862      	ldr	r2, [r4, #4]
 800fd0c:	2100      	movs	r1, #0
 800fd0e:	4628      	mov	r0, r5
 800fd10:	f7f0 fa6e 	bl	80001f0 <memchr>
 800fd14:	b108      	cbz	r0, 800fd1a <_printf_i+0x1f2>
 800fd16:	1b40      	subs	r0, r0, r5
 800fd18:	6060      	str	r0, [r4, #4]
 800fd1a:	6863      	ldr	r3, [r4, #4]
 800fd1c:	6123      	str	r3, [r4, #16]
 800fd1e:	2300      	movs	r3, #0
 800fd20:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800fd24:	e7a8      	b.n	800fc78 <_printf_i+0x150>
 800fd26:	6923      	ldr	r3, [r4, #16]
 800fd28:	462a      	mov	r2, r5
 800fd2a:	4649      	mov	r1, r9
 800fd2c:	4640      	mov	r0, r8
 800fd2e:	47d0      	blx	sl
 800fd30:	3001      	adds	r0, #1
 800fd32:	d0ab      	beq.n	800fc8c <_printf_i+0x164>
 800fd34:	6823      	ldr	r3, [r4, #0]
 800fd36:	079b      	lsls	r3, r3, #30
 800fd38:	d413      	bmi.n	800fd62 <_printf_i+0x23a>
 800fd3a:	68e0      	ldr	r0, [r4, #12]
 800fd3c:	9b03      	ldr	r3, [sp, #12]
 800fd3e:	4298      	cmp	r0, r3
 800fd40:	bfb8      	it	lt
 800fd42:	4618      	movlt	r0, r3
 800fd44:	e7a4      	b.n	800fc90 <_printf_i+0x168>
 800fd46:	2301      	movs	r3, #1
 800fd48:	4632      	mov	r2, r6
 800fd4a:	4649      	mov	r1, r9
 800fd4c:	4640      	mov	r0, r8
 800fd4e:	47d0      	blx	sl
 800fd50:	3001      	adds	r0, #1
 800fd52:	d09b      	beq.n	800fc8c <_printf_i+0x164>
 800fd54:	3501      	adds	r5, #1
 800fd56:	68e3      	ldr	r3, [r4, #12]
 800fd58:	9903      	ldr	r1, [sp, #12]
 800fd5a:	1a5b      	subs	r3, r3, r1
 800fd5c:	42ab      	cmp	r3, r5
 800fd5e:	dcf2      	bgt.n	800fd46 <_printf_i+0x21e>
 800fd60:	e7eb      	b.n	800fd3a <_printf_i+0x212>
 800fd62:	2500      	movs	r5, #0
 800fd64:	f104 0619 	add.w	r6, r4, #25
 800fd68:	e7f5      	b.n	800fd56 <_printf_i+0x22e>
 800fd6a:	bf00      	nop
 800fd6c:	08010683 	.word	0x08010683
 800fd70:	08010694 	.word	0x08010694

0800fd74 <_sbrk_r>:
 800fd74:	b538      	push	{r3, r4, r5, lr}
 800fd76:	4d06      	ldr	r5, [pc, #24]	; (800fd90 <_sbrk_r+0x1c>)
 800fd78:	2300      	movs	r3, #0
 800fd7a:	4604      	mov	r4, r0
 800fd7c:	4608      	mov	r0, r1
 800fd7e:	602b      	str	r3, [r5, #0]
 800fd80:	f7f3 fb52 	bl	8003428 <_sbrk>
 800fd84:	1c43      	adds	r3, r0, #1
 800fd86:	d102      	bne.n	800fd8e <_sbrk_r+0x1a>
 800fd88:	682b      	ldr	r3, [r5, #0]
 800fd8a:	b103      	cbz	r3, 800fd8e <_sbrk_r+0x1a>
 800fd8c:	6023      	str	r3, [r4, #0]
 800fd8e:	bd38      	pop	{r3, r4, r5, pc}
 800fd90:	20000980 	.word	0x20000980

0800fd94 <__swbuf_r>:
 800fd94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fd96:	460e      	mov	r6, r1
 800fd98:	4614      	mov	r4, r2
 800fd9a:	4605      	mov	r5, r0
 800fd9c:	b118      	cbz	r0, 800fda6 <__swbuf_r+0x12>
 800fd9e:	6983      	ldr	r3, [r0, #24]
 800fda0:	b90b      	cbnz	r3, 800fda6 <__swbuf_r+0x12>
 800fda2:	f000 f9d9 	bl	8010158 <__sinit>
 800fda6:	4b21      	ldr	r3, [pc, #132]	; (800fe2c <__swbuf_r+0x98>)
 800fda8:	429c      	cmp	r4, r3
 800fdaa:	d12b      	bne.n	800fe04 <__swbuf_r+0x70>
 800fdac:	686c      	ldr	r4, [r5, #4]
 800fdae:	69a3      	ldr	r3, [r4, #24]
 800fdb0:	60a3      	str	r3, [r4, #8]
 800fdb2:	89a3      	ldrh	r3, [r4, #12]
 800fdb4:	071a      	lsls	r2, r3, #28
 800fdb6:	d52f      	bpl.n	800fe18 <__swbuf_r+0x84>
 800fdb8:	6923      	ldr	r3, [r4, #16]
 800fdba:	b36b      	cbz	r3, 800fe18 <__swbuf_r+0x84>
 800fdbc:	6923      	ldr	r3, [r4, #16]
 800fdbe:	6820      	ldr	r0, [r4, #0]
 800fdc0:	1ac0      	subs	r0, r0, r3
 800fdc2:	6963      	ldr	r3, [r4, #20]
 800fdc4:	b2f6      	uxtb	r6, r6
 800fdc6:	4283      	cmp	r3, r0
 800fdc8:	4637      	mov	r7, r6
 800fdca:	dc04      	bgt.n	800fdd6 <__swbuf_r+0x42>
 800fdcc:	4621      	mov	r1, r4
 800fdce:	4628      	mov	r0, r5
 800fdd0:	f000 f92e 	bl	8010030 <_fflush_r>
 800fdd4:	bb30      	cbnz	r0, 800fe24 <__swbuf_r+0x90>
 800fdd6:	68a3      	ldr	r3, [r4, #8]
 800fdd8:	3b01      	subs	r3, #1
 800fdda:	60a3      	str	r3, [r4, #8]
 800fddc:	6823      	ldr	r3, [r4, #0]
 800fdde:	1c5a      	adds	r2, r3, #1
 800fde0:	6022      	str	r2, [r4, #0]
 800fde2:	701e      	strb	r6, [r3, #0]
 800fde4:	6963      	ldr	r3, [r4, #20]
 800fde6:	3001      	adds	r0, #1
 800fde8:	4283      	cmp	r3, r0
 800fdea:	d004      	beq.n	800fdf6 <__swbuf_r+0x62>
 800fdec:	89a3      	ldrh	r3, [r4, #12]
 800fdee:	07db      	lsls	r3, r3, #31
 800fdf0:	d506      	bpl.n	800fe00 <__swbuf_r+0x6c>
 800fdf2:	2e0a      	cmp	r6, #10
 800fdf4:	d104      	bne.n	800fe00 <__swbuf_r+0x6c>
 800fdf6:	4621      	mov	r1, r4
 800fdf8:	4628      	mov	r0, r5
 800fdfa:	f000 f919 	bl	8010030 <_fflush_r>
 800fdfe:	b988      	cbnz	r0, 800fe24 <__swbuf_r+0x90>
 800fe00:	4638      	mov	r0, r7
 800fe02:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800fe04:	4b0a      	ldr	r3, [pc, #40]	; (800fe30 <__swbuf_r+0x9c>)
 800fe06:	429c      	cmp	r4, r3
 800fe08:	d101      	bne.n	800fe0e <__swbuf_r+0x7a>
 800fe0a:	68ac      	ldr	r4, [r5, #8]
 800fe0c:	e7cf      	b.n	800fdae <__swbuf_r+0x1a>
 800fe0e:	4b09      	ldr	r3, [pc, #36]	; (800fe34 <__swbuf_r+0xa0>)
 800fe10:	429c      	cmp	r4, r3
 800fe12:	bf08      	it	eq
 800fe14:	68ec      	ldreq	r4, [r5, #12]
 800fe16:	e7ca      	b.n	800fdae <__swbuf_r+0x1a>
 800fe18:	4621      	mov	r1, r4
 800fe1a:	4628      	mov	r0, r5
 800fe1c:	f000 f80c 	bl	800fe38 <__swsetup_r>
 800fe20:	2800      	cmp	r0, #0
 800fe22:	d0cb      	beq.n	800fdbc <__swbuf_r+0x28>
 800fe24:	f04f 37ff 	mov.w	r7, #4294967295
 800fe28:	e7ea      	b.n	800fe00 <__swbuf_r+0x6c>
 800fe2a:	bf00      	nop
 800fe2c:	080106c8 	.word	0x080106c8
 800fe30:	080106e8 	.word	0x080106e8
 800fe34:	080106a8 	.word	0x080106a8

0800fe38 <__swsetup_r>:
 800fe38:	4b32      	ldr	r3, [pc, #200]	; (800ff04 <__swsetup_r+0xcc>)
 800fe3a:	b570      	push	{r4, r5, r6, lr}
 800fe3c:	681d      	ldr	r5, [r3, #0]
 800fe3e:	4606      	mov	r6, r0
 800fe40:	460c      	mov	r4, r1
 800fe42:	b125      	cbz	r5, 800fe4e <__swsetup_r+0x16>
 800fe44:	69ab      	ldr	r3, [r5, #24]
 800fe46:	b913      	cbnz	r3, 800fe4e <__swsetup_r+0x16>
 800fe48:	4628      	mov	r0, r5
 800fe4a:	f000 f985 	bl	8010158 <__sinit>
 800fe4e:	4b2e      	ldr	r3, [pc, #184]	; (800ff08 <__swsetup_r+0xd0>)
 800fe50:	429c      	cmp	r4, r3
 800fe52:	d10f      	bne.n	800fe74 <__swsetup_r+0x3c>
 800fe54:	686c      	ldr	r4, [r5, #4]
 800fe56:	89a3      	ldrh	r3, [r4, #12]
 800fe58:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800fe5c:	0719      	lsls	r1, r3, #28
 800fe5e:	d42c      	bmi.n	800feba <__swsetup_r+0x82>
 800fe60:	06dd      	lsls	r5, r3, #27
 800fe62:	d411      	bmi.n	800fe88 <__swsetup_r+0x50>
 800fe64:	2309      	movs	r3, #9
 800fe66:	6033      	str	r3, [r6, #0]
 800fe68:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800fe6c:	81a3      	strh	r3, [r4, #12]
 800fe6e:	f04f 30ff 	mov.w	r0, #4294967295
 800fe72:	e03e      	b.n	800fef2 <__swsetup_r+0xba>
 800fe74:	4b25      	ldr	r3, [pc, #148]	; (800ff0c <__swsetup_r+0xd4>)
 800fe76:	429c      	cmp	r4, r3
 800fe78:	d101      	bne.n	800fe7e <__swsetup_r+0x46>
 800fe7a:	68ac      	ldr	r4, [r5, #8]
 800fe7c:	e7eb      	b.n	800fe56 <__swsetup_r+0x1e>
 800fe7e:	4b24      	ldr	r3, [pc, #144]	; (800ff10 <__swsetup_r+0xd8>)
 800fe80:	429c      	cmp	r4, r3
 800fe82:	bf08      	it	eq
 800fe84:	68ec      	ldreq	r4, [r5, #12]
 800fe86:	e7e6      	b.n	800fe56 <__swsetup_r+0x1e>
 800fe88:	0758      	lsls	r0, r3, #29
 800fe8a:	d512      	bpl.n	800feb2 <__swsetup_r+0x7a>
 800fe8c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800fe8e:	b141      	cbz	r1, 800fea2 <__swsetup_r+0x6a>
 800fe90:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800fe94:	4299      	cmp	r1, r3
 800fe96:	d002      	beq.n	800fe9e <__swsetup_r+0x66>
 800fe98:	4630      	mov	r0, r6
 800fe9a:	f7ff fb9d 	bl	800f5d8 <_free_r>
 800fe9e:	2300      	movs	r3, #0
 800fea0:	6363      	str	r3, [r4, #52]	; 0x34
 800fea2:	89a3      	ldrh	r3, [r4, #12]
 800fea4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800fea8:	81a3      	strh	r3, [r4, #12]
 800feaa:	2300      	movs	r3, #0
 800feac:	6063      	str	r3, [r4, #4]
 800feae:	6923      	ldr	r3, [r4, #16]
 800feb0:	6023      	str	r3, [r4, #0]
 800feb2:	89a3      	ldrh	r3, [r4, #12]
 800feb4:	f043 0308 	orr.w	r3, r3, #8
 800feb8:	81a3      	strh	r3, [r4, #12]
 800feba:	6923      	ldr	r3, [r4, #16]
 800febc:	b94b      	cbnz	r3, 800fed2 <__swsetup_r+0x9a>
 800febe:	89a3      	ldrh	r3, [r4, #12]
 800fec0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800fec4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800fec8:	d003      	beq.n	800fed2 <__swsetup_r+0x9a>
 800feca:	4621      	mov	r1, r4
 800fecc:	4630      	mov	r0, r6
 800fece:	f000 fa09 	bl	80102e4 <__smakebuf_r>
 800fed2:	89a0      	ldrh	r0, [r4, #12]
 800fed4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800fed8:	f010 0301 	ands.w	r3, r0, #1
 800fedc:	d00a      	beq.n	800fef4 <__swsetup_r+0xbc>
 800fede:	2300      	movs	r3, #0
 800fee0:	60a3      	str	r3, [r4, #8]
 800fee2:	6963      	ldr	r3, [r4, #20]
 800fee4:	425b      	negs	r3, r3
 800fee6:	61a3      	str	r3, [r4, #24]
 800fee8:	6923      	ldr	r3, [r4, #16]
 800feea:	b943      	cbnz	r3, 800fefe <__swsetup_r+0xc6>
 800feec:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800fef0:	d1ba      	bne.n	800fe68 <__swsetup_r+0x30>
 800fef2:	bd70      	pop	{r4, r5, r6, pc}
 800fef4:	0781      	lsls	r1, r0, #30
 800fef6:	bf58      	it	pl
 800fef8:	6963      	ldrpl	r3, [r4, #20]
 800fefa:	60a3      	str	r3, [r4, #8]
 800fefc:	e7f4      	b.n	800fee8 <__swsetup_r+0xb0>
 800fefe:	2000      	movs	r0, #0
 800ff00:	e7f7      	b.n	800fef2 <__swsetup_r+0xba>
 800ff02:	bf00      	nop
 800ff04:	200001a0 	.word	0x200001a0
 800ff08:	080106c8 	.word	0x080106c8
 800ff0c:	080106e8 	.word	0x080106e8
 800ff10:	080106a8 	.word	0x080106a8

0800ff14 <abort>:
 800ff14:	b508      	push	{r3, lr}
 800ff16:	2006      	movs	r0, #6
 800ff18:	f000 fa58 	bl	80103cc <raise>
 800ff1c:	2001      	movs	r0, #1
 800ff1e:	f7f3 fa0b 	bl	8003338 <_exit>
	...

0800ff24 <__sflush_r>:
 800ff24:	898a      	ldrh	r2, [r1, #12]
 800ff26:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ff2a:	4605      	mov	r5, r0
 800ff2c:	0710      	lsls	r0, r2, #28
 800ff2e:	460c      	mov	r4, r1
 800ff30:	d458      	bmi.n	800ffe4 <__sflush_r+0xc0>
 800ff32:	684b      	ldr	r3, [r1, #4]
 800ff34:	2b00      	cmp	r3, #0
 800ff36:	dc05      	bgt.n	800ff44 <__sflush_r+0x20>
 800ff38:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800ff3a:	2b00      	cmp	r3, #0
 800ff3c:	dc02      	bgt.n	800ff44 <__sflush_r+0x20>
 800ff3e:	2000      	movs	r0, #0
 800ff40:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ff44:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800ff46:	2e00      	cmp	r6, #0
 800ff48:	d0f9      	beq.n	800ff3e <__sflush_r+0x1a>
 800ff4a:	2300      	movs	r3, #0
 800ff4c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800ff50:	682f      	ldr	r7, [r5, #0]
 800ff52:	602b      	str	r3, [r5, #0]
 800ff54:	d032      	beq.n	800ffbc <__sflush_r+0x98>
 800ff56:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800ff58:	89a3      	ldrh	r3, [r4, #12]
 800ff5a:	075a      	lsls	r2, r3, #29
 800ff5c:	d505      	bpl.n	800ff6a <__sflush_r+0x46>
 800ff5e:	6863      	ldr	r3, [r4, #4]
 800ff60:	1ac0      	subs	r0, r0, r3
 800ff62:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800ff64:	b10b      	cbz	r3, 800ff6a <__sflush_r+0x46>
 800ff66:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800ff68:	1ac0      	subs	r0, r0, r3
 800ff6a:	2300      	movs	r3, #0
 800ff6c:	4602      	mov	r2, r0
 800ff6e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800ff70:	6a21      	ldr	r1, [r4, #32]
 800ff72:	4628      	mov	r0, r5
 800ff74:	47b0      	blx	r6
 800ff76:	1c43      	adds	r3, r0, #1
 800ff78:	89a3      	ldrh	r3, [r4, #12]
 800ff7a:	d106      	bne.n	800ff8a <__sflush_r+0x66>
 800ff7c:	6829      	ldr	r1, [r5, #0]
 800ff7e:	291d      	cmp	r1, #29
 800ff80:	d82c      	bhi.n	800ffdc <__sflush_r+0xb8>
 800ff82:	4a2a      	ldr	r2, [pc, #168]	; (801002c <__sflush_r+0x108>)
 800ff84:	40ca      	lsrs	r2, r1
 800ff86:	07d6      	lsls	r6, r2, #31
 800ff88:	d528      	bpl.n	800ffdc <__sflush_r+0xb8>
 800ff8a:	2200      	movs	r2, #0
 800ff8c:	6062      	str	r2, [r4, #4]
 800ff8e:	04d9      	lsls	r1, r3, #19
 800ff90:	6922      	ldr	r2, [r4, #16]
 800ff92:	6022      	str	r2, [r4, #0]
 800ff94:	d504      	bpl.n	800ffa0 <__sflush_r+0x7c>
 800ff96:	1c42      	adds	r2, r0, #1
 800ff98:	d101      	bne.n	800ff9e <__sflush_r+0x7a>
 800ff9a:	682b      	ldr	r3, [r5, #0]
 800ff9c:	b903      	cbnz	r3, 800ffa0 <__sflush_r+0x7c>
 800ff9e:	6560      	str	r0, [r4, #84]	; 0x54
 800ffa0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ffa2:	602f      	str	r7, [r5, #0]
 800ffa4:	2900      	cmp	r1, #0
 800ffa6:	d0ca      	beq.n	800ff3e <__sflush_r+0x1a>
 800ffa8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ffac:	4299      	cmp	r1, r3
 800ffae:	d002      	beq.n	800ffb6 <__sflush_r+0x92>
 800ffb0:	4628      	mov	r0, r5
 800ffb2:	f7ff fb11 	bl	800f5d8 <_free_r>
 800ffb6:	2000      	movs	r0, #0
 800ffb8:	6360      	str	r0, [r4, #52]	; 0x34
 800ffba:	e7c1      	b.n	800ff40 <__sflush_r+0x1c>
 800ffbc:	6a21      	ldr	r1, [r4, #32]
 800ffbe:	2301      	movs	r3, #1
 800ffc0:	4628      	mov	r0, r5
 800ffc2:	47b0      	blx	r6
 800ffc4:	1c41      	adds	r1, r0, #1
 800ffc6:	d1c7      	bne.n	800ff58 <__sflush_r+0x34>
 800ffc8:	682b      	ldr	r3, [r5, #0]
 800ffca:	2b00      	cmp	r3, #0
 800ffcc:	d0c4      	beq.n	800ff58 <__sflush_r+0x34>
 800ffce:	2b1d      	cmp	r3, #29
 800ffd0:	d001      	beq.n	800ffd6 <__sflush_r+0xb2>
 800ffd2:	2b16      	cmp	r3, #22
 800ffd4:	d101      	bne.n	800ffda <__sflush_r+0xb6>
 800ffd6:	602f      	str	r7, [r5, #0]
 800ffd8:	e7b1      	b.n	800ff3e <__sflush_r+0x1a>
 800ffda:	89a3      	ldrh	r3, [r4, #12]
 800ffdc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ffe0:	81a3      	strh	r3, [r4, #12]
 800ffe2:	e7ad      	b.n	800ff40 <__sflush_r+0x1c>
 800ffe4:	690f      	ldr	r7, [r1, #16]
 800ffe6:	2f00      	cmp	r7, #0
 800ffe8:	d0a9      	beq.n	800ff3e <__sflush_r+0x1a>
 800ffea:	0793      	lsls	r3, r2, #30
 800ffec:	680e      	ldr	r6, [r1, #0]
 800ffee:	bf08      	it	eq
 800fff0:	694b      	ldreq	r3, [r1, #20]
 800fff2:	600f      	str	r7, [r1, #0]
 800fff4:	bf18      	it	ne
 800fff6:	2300      	movne	r3, #0
 800fff8:	eba6 0807 	sub.w	r8, r6, r7
 800fffc:	608b      	str	r3, [r1, #8]
 800fffe:	f1b8 0f00 	cmp.w	r8, #0
 8010002:	dd9c      	ble.n	800ff3e <__sflush_r+0x1a>
 8010004:	6a21      	ldr	r1, [r4, #32]
 8010006:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8010008:	4643      	mov	r3, r8
 801000a:	463a      	mov	r2, r7
 801000c:	4628      	mov	r0, r5
 801000e:	47b0      	blx	r6
 8010010:	2800      	cmp	r0, #0
 8010012:	dc06      	bgt.n	8010022 <__sflush_r+0xfe>
 8010014:	89a3      	ldrh	r3, [r4, #12]
 8010016:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801001a:	81a3      	strh	r3, [r4, #12]
 801001c:	f04f 30ff 	mov.w	r0, #4294967295
 8010020:	e78e      	b.n	800ff40 <__sflush_r+0x1c>
 8010022:	4407      	add	r7, r0
 8010024:	eba8 0800 	sub.w	r8, r8, r0
 8010028:	e7e9      	b.n	800fffe <__sflush_r+0xda>
 801002a:	bf00      	nop
 801002c:	20400001 	.word	0x20400001

08010030 <_fflush_r>:
 8010030:	b538      	push	{r3, r4, r5, lr}
 8010032:	690b      	ldr	r3, [r1, #16]
 8010034:	4605      	mov	r5, r0
 8010036:	460c      	mov	r4, r1
 8010038:	b913      	cbnz	r3, 8010040 <_fflush_r+0x10>
 801003a:	2500      	movs	r5, #0
 801003c:	4628      	mov	r0, r5
 801003e:	bd38      	pop	{r3, r4, r5, pc}
 8010040:	b118      	cbz	r0, 801004a <_fflush_r+0x1a>
 8010042:	6983      	ldr	r3, [r0, #24]
 8010044:	b90b      	cbnz	r3, 801004a <_fflush_r+0x1a>
 8010046:	f000 f887 	bl	8010158 <__sinit>
 801004a:	4b14      	ldr	r3, [pc, #80]	; (801009c <_fflush_r+0x6c>)
 801004c:	429c      	cmp	r4, r3
 801004e:	d11b      	bne.n	8010088 <_fflush_r+0x58>
 8010050:	686c      	ldr	r4, [r5, #4]
 8010052:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010056:	2b00      	cmp	r3, #0
 8010058:	d0ef      	beq.n	801003a <_fflush_r+0xa>
 801005a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 801005c:	07d0      	lsls	r0, r2, #31
 801005e:	d404      	bmi.n	801006a <_fflush_r+0x3a>
 8010060:	0599      	lsls	r1, r3, #22
 8010062:	d402      	bmi.n	801006a <_fflush_r+0x3a>
 8010064:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8010066:	f000 f915 	bl	8010294 <__retarget_lock_acquire_recursive>
 801006a:	4628      	mov	r0, r5
 801006c:	4621      	mov	r1, r4
 801006e:	f7ff ff59 	bl	800ff24 <__sflush_r>
 8010072:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8010074:	07da      	lsls	r2, r3, #31
 8010076:	4605      	mov	r5, r0
 8010078:	d4e0      	bmi.n	801003c <_fflush_r+0xc>
 801007a:	89a3      	ldrh	r3, [r4, #12]
 801007c:	059b      	lsls	r3, r3, #22
 801007e:	d4dd      	bmi.n	801003c <_fflush_r+0xc>
 8010080:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8010082:	f000 f908 	bl	8010296 <__retarget_lock_release_recursive>
 8010086:	e7d9      	b.n	801003c <_fflush_r+0xc>
 8010088:	4b05      	ldr	r3, [pc, #20]	; (80100a0 <_fflush_r+0x70>)
 801008a:	429c      	cmp	r4, r3
 801008c:	d101      	bne.n	8010092 <_fflush_r+0x62>
 801008e:	68ac      	ldr	r4, [r5, #8]
 8010090:	e7df      	b.n	8010052 <_fflush_r+0x22>
 8010092:	4b04      	ldr	r3, [pc, #16]	; (80100a4 <_fflush_r+0x74>)
 8010094:	429c      	cmp	r4, r3
 8010096:	bf08      	it	eq
 8010098:	68ec      	ldreq	r4, [r5, #12]
 801009a:	e7da      	b.n	8010052 <_fflush_r+0x22>
 801009c:	080106c8 	.word	0x080106c8
 80100a0:	080106e8 	.word	0x080106e8
 80100a4:	080106a8 	.word	0x080106a8

080100a8 <std>:
 80100a8:	2300      	movs	r3, #0
 80100aa:	b510      	push	{r4, lr}
 80100ac:	4604      	mov	r4, r0
 80100ae:	e9c0 3300 	strd	r3, r3, [r0]
 80100b2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80100b6:	6083      	str	r3, [r0, #8]
 80100b8:	8181      	strh	r1, [r0, #12]
 80100ba:	6643      	str	r3, [r0, #100]	; 0x64
 80100bc:	81c2      	strh	r2, [r0, #14]
 80100be:	6183      	str	r3, [r0, #24]
 80100c0:	4619      	mov	r1, r3
 80100c2:	2208      	movs	r2, #8
 80100c4:	305c      	adds	r0, #92	; 0x5c
 80100c6:	f7ff f9db 	bl	800f480 <memset>
 80100ca:	4b05      	ldr	r3, [pc, #20]	; (80100e0 <std+0x38>)
 80100cc:	6263      	str	r3, [r4, #36]	; 0x24
 80100ce:	4b05      	ldr	r3, [pc, #20]	; (80100e4 <std+0x3c>)
 80100d0:	62a3      	str	r3, [r4, #40]	; 0x28
 80100d2:	4b05      	ldr	r3, [pc, #20]	; (80100e8 <std+0x40>)
 80100d4:	62e3      	str	r3, [r4, #44]	; 0x2c
 80100d6:	4b05      	ldr	r3, [pc, #20]	; (80100ec <std+0x44>)
 80100d8:	6224      	str	r4, [r4, #32]
 80100da:	6323      	str	r3, [r4, #48]	; 0x30
 80100dc:	bd10      	pop	{r4, pc}
 80100de:	bf00      	nop
 80100e0:	08010405 	.word	0x08010405
 80100e4:	08010427 	.word	0x08010427
 80100e8:	0801045f 	.word	0x0801045f
 80100ec:	08010483 	.word	0x08010483

080100f0 <_cleanup_r>:
 80100f0:	4901      	ldr	r1, [pc, #4]	; (80100f8 <_cleanup_r+0x8>)
 80100f2:	f000 b8af 	b.w	8010254 <_fwalk_reent>
 80100f6:	bf00      	nop
 80100f8:	08010031 	.word	0x08010031

080100fc <__sfmoreglue>:
 80100fc:	b570      	push	{r4, r5, r6, lr}
 80100fe:	2268      	movs	r2, #104	; 0x68
 8010100:	1e4d      	subs	r5, r1, #1
 8010102:	4355      	muls	r5, r2
 8010104:	460e      	mov	r6, r1
 8010106:	f105 0174 	add.w	r1, r5, #116	; 0x74
 801010a:	f7ff fad1 	bl	800f6b0 <_malloc_r>
 801010e:	4604      	mov	r4, r0
 8010110:	b140      	cbz	r0, 8010124 <__sfmoreglue+0x28>
 8010112:	2100      	movs	r1, #0
 8010114:	e9c0 1600 	strd	r1, r6, [r0]
 8010118:	300c      	adds	r0, #12
 801011a:	60a0      	str	r0, [r4, #8]
 801011c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8010120:	f7ff f9ae 	bl	800f480 <memset>
 8010124:	4620      	mov	r0, r4
 8010126:	bd70      	pop	{r4, r5, r6, pc}

08010128 <__sfp_lock_acquire>:
 8010128:	4801      	ldr	r0, [pc, #4]	; (8010130 <__sfp_lock_acquire+0x8>)
 801012a:	f000 b8b3 	b.w	8010294 <__retarget_lock_acquire_recursive>
 801012e:	bf00      	nop
 8010130:	2000097d 	.word	0x2000097d

08010134 <__sfp_lock_release>:
 8010134:	4801      	ldr	r0, [pc, #4]	; (801013c <__sfp_lock_release+0x8>)
 8010136:	f000 b8ae 	b.w	8010296 <__retarget_lock_release_recursive>
 801013a:	bf00      	nop
 801013c:	2000097d 	.word	0x2000097d

08010140 <__sinit_lock_acquire>:
 8010140:	4801      	ldr	r0, [pc, #4]	; (8010148 <__sinit_lock_acquire+0x8>)
 8010142:	f000 b8a7 	b.w	8010294 <__retarget_lock_acquire_recursive>
 8010146:	bf00      	nop
 8010148:	2000097e 	.word	0x2000097e

0801014c <__sinit_lock_release>:
 801014c:	4801      	ldr	r0, [pc, #4]	; (8010154 <__sinit_lock_release+0x8>)
 801014e:	f000 b8a2 	b.w	8010296 <__retarget_lock_release_recursive>
 8010152:	bf00      	nop
 8010154:	2000097e 	.word	0x2000097e

08010158 <__sinit>:
 8010158:	b510      	push	{r4, lr}
 801015a:	4604      	mov	r4, r0
 801015c:	f7ff fff0 	bl	8010140 <__sinit_lock_acquire>
 8010160:	69a3      	ldr	r3, [r4, #24]
 8010162:	b11b      	cbz	r3, 801016c <__sinit+0x14>
 8010164:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010168:	f7ff bff0 	b.w	801014c <__sinit_lock_release>
 801016c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8010170:	6523      	str	r3, [r4, #80]	; 0x50
 8010172:	4b13      	ldr	r3, [pc, #76]	; (80101c0 <__sinit+0x68>)
 8010174:	4a13      	ldr	r2, [pc, #76]	; (80101c4 <__sinit+0x6c>)
 8010176:	681b      	ldr	r3, [r3, #0]
 8010178:	62a2      	str	r2, [r4, #40]	; 0x28
 801017a:	42a3      	cmp	r3, r4
 801017c:	bf04      	itt	eq
 801017e:	2301      	moveq	r3, #1
 8010180:	61a3      	streq	r3, [r4, #24]
 8010182:	4620      	mov	r0, r4
 8010184:	f000 f820 	bl	80101c8 <__sfp>
 8010188:	6060      	str	r0, [r4, #4]
 801018a:	4620      	mov	r0, r4
 801018c:	f000 f81c 	bl	80101c8 <__sfp>
 8010190:	60a0      	str	r0, [r4, #8]
 8010192:	4620      	mov	r0, r4
 8010194:	f000 f818 	bl	80101c8 <__sfp>
 8010198:	2200      	movs	r2, #0
 801019a:	60e0      	str	r0, [r4, #12]
 801019c:	2104      	movs	r1, #4
 801019e:	6860      	ldr	r0, [r4, #4]
 80101a0:	f7ff ff82 	bl	80100a8 <std>
 80101a4:	68a0      	ldr	r0, [r4, #8]
 80101a6:	2201      	movs	r2, #1
 80101a8:	2109      	movs	r1, #9
 80101aa:	f7ff ff7d 	bl	80100a8 <std>
 80101ae:	68e0      	ldr	r0, [r4, #12]
 80101b0:	2202      	movs	r2, #2
 80101b2:	2112      	movs	r1, #18
 80101b4:	f7ff ff78 	bl	80100a8 <std>
 80101b8:	2301      	movs	r3, #1
 80101ba:	61a3      	str	r3, [r4, #24]
 80101bc:	e7d2      	b.n	8010164 <__sinit+0xc>
 80101be:	bf00      	nop
 80101c0:	080105c0 	.word	0x080105c0
 80101c4:	080100f1 	.word	0x080100f1

080101c8 <__sfp>:
 80101c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80101ca:	4607      	mov	r7, r0
 80101cc:	f7ff ffac 	bl	8010128 <__sfp_lock_acquire>
 80101d0:	4b1e      	ldr	r3, [pc, #120]	; (801024c <__sfp+0x84>)
 80101d2:	681e      	ldr	r6, [r3, #0]
 80101d4:	69b3      	ldr	r3, [r6, #24]
 80101d6:	b913      	cbnz	r3, 80101de <__sfp+0x16>
 80101d8:	4630      	mov	r0, r6
 80101da:	f7ff ffbd 	bl	8010158 <__sinit>
 80101de:	3648      	adds	r6, #72	; 0x48
 80101e0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80101e4:	3b01      	subs	r3, #1
 80101e6:	d503      	bpl.n	80101f0 <__sfp+0x28>
 80101e8:	6833      	ldr	r3, [r6, #0]
 80101ea:	b30b      	cbz	r3, 8010230 <__sfp+0x68>
 80101ec:	6836      	ldr	r6, [r6, #0]
 80101ee:	e7f7      	b.n	80101e0 <__sfp+0x18>
 80101f0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80101f4:	b9d5      	cbnz	r5, 801022c <__sfp+0x64>
 80101f6:	4b16      	ldr	r3, [pc, #88]	; (8010250 <__sfp+0x88>)
 80101f8:	60e3      	str	r3, [r4, #12]
 80101fa:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80101fe:	6665      	str	r5, [r4, #100]	; 0x64
 8010200:	f000 f847 	bl	8010292 <__retarget_lock_init_recursive>
 8010204:	f7ff ff96 	bl	8010134 <__sfp_lock_release>
 8010208:	e9c4 5501 	strd	r5, r5, [r4, #4]
 801020c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8010210:	6025      	str	r5, [r4, #0]
 8010212:	61a5      	str	r5, [r4, #24]
 8010214:	2208      	movs	r2, #8
 8010216:	4629      	mov	r1, r5
 8010218:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 801021c:	f7ff f930 	bl	800f480 <memset>
 8010220:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8010224:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8010228:	4620      	mov	r0, r4
 801022a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801022c:	3468      	adds	r4, #104	; 0x68
 801022e:	e7d9      	b.n	80101e4 <__sfp+0x1c>
 8010230:	2104      	movs	r1, #4
 8010232:	4638      	mov	r0, r7
 8010234:	f7ff ff62 	bl	80100fc <__sfmoreglue>
 8010238:	4604      	mov	r4, r0
 801023a:	6030      	str	r0, [r6, #0]
 801023c:	2800      	cmp	r0, #0
 801023e:	d1d5      	bne.n	80101ec <__sfp+0x24>
 8010240:	f7ff ff78 	bl	8010134 <__sfp_lock_release>
 8010244:	230c      	movs	r3, #12
 8010246:	603b      	str	r3, [r7, #0]
 8010248:	e7ee      	b.n	8010228 <__sfp+0x60>
 801024a:	bf00      	nop
 801024c:	080105c0 	.word	0x080105c0
 8010250:	ffff0001 	.word	0xffff0001

08010254 <_fwalk_reent>:
 8010254:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010258:	4606      	mov	r6, r0
 801025a:	4688      	mov	r8, r1
 801025c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8010260:	2700      	movs	r7, #0
 8010262:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8010266:	f1b9 0901 	subs.w	r9, r9, #1
 801026a:	d505      	bpl.n	8010278 <_fwalk_reent+0x24>
 801026c:	6824      	ldr	r4, [r4, #0]
 801026e:	2c00      	cmp	r4, #0
 8010270:	d1f7      	bne.n	8010262 <_fwalk_reent+0xe>
 8010272:	4638      	mov	r0, r7
 8010274:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010278:	89ab      	ldrh	r3, [r5, #12]
 801027a:	2b01      	cmp	r3, #1
 801027c:	d907      	bls.n	801028e <_fwalk_reent+0x3a>
 801027e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8010282:	3301      	adds	r3, #1
 8010284:	d003      	beq.n	801028e <_fwalk_reent+0x3a>
 8010286:	4629      	mov	r1, r5
 8010288:	4630      	mov	r0, r6
 801028a:	47c0      	blx	r8
 801028c:	4307      	orrs	r7, r0
 801028e:	3568      	adds	r5, #104	; 0x68
 8010290:	e7e9      	b.n	8010266 <_fwalk_reent+0x12>

08010292 <__retarget_lock_init_recursive>:
 8010292:	4770      	bx	lr

08010294 <__retarget_lock_acquire_recursive>:
 8010294:	4770      	bx	lr

08010296 <__retarget_lock_release_recursive>:
 8010296:	4770      	bx	lr

08010298 <__swhatbuf_r>:
 8010298:	b570      	push	{r4, r5, r6, lr}
 801029a:	460e      	mov	r6, r1
 801029c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80102a0:	2900      	cmp	r1, #0
 80102a2:	b096      	sub	sp, #88	; 0x58
 80102a4:	4614      	mov	r4, r2
 80102a6:	461d      	mov	r5, r3
 80102a8:	da08      	bge.n	80102bc <__swhatbuf_r+0x24>
 80102aa:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80102ae:	2200      	movs	r2, #0
 80102b0:	602a      	str	r2, [r5, #0]
 80102b2:	061a      	lsls	r2, r3, #24
 80102b4:	d410      	bmi.n	80102d8 <__swhatbuf_r+0x40>
 80102b6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80102ba:	e00e      	b.n	80102da <__swhatbuf_r+0x42>
 80102bc:	466a      	mov	r2, sp
 80102be:	f000 f907 	bl	80104d0 <_fstat_r>
 80102c2:	2800      	cmp	r0, #0
 80102c4:	dbf1      	blt.n	80102aa <__swhatbuf_r+0x12>
 80102c6:	9a01      	ldr	r2, [sp, #4]
 80102c8:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80102cc:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80102d0:	425a      	negs	r2, r3
 80102d2:	415a      	adcs	r2, r3
 80102d4:	602a      	str	r2, [r5, #0]
 80102d6:	e7ee      	b.n	80102b6 <__swhatbuf_r+0x1e>
 80102d8:	2340      	movs	r3, #64	; 0x40
 80102da:	2000      	movs	r0, #0
 80102dc:	6023      	str	r3, [r4, #0]
 80102de:	b016      	add	sp, #88	; 0x58
 80102e0:	bd70      	pop	{r4, r5, r6, pc}
	...

080102e4 <__smakebuf_r>:
 80102e4:	898b      	ldrh	r3, [r1, #12]
 80102e6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80102e8:	079d      	lsls	r5, r3, #30
 80102ea:	4606      	mov	r6, r0
 80102ec:	460c      	mov	r4, r1
 80102ee:	d507      	bpl.n	8010300 <__smakebuf_r+0x1c>
 80102f0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80102f4:	6023      	str	r3, [r4, #0]
 80102f6:	6123      	str	r3, [r4, #16]
 80102f8:	2301      	movs	r3, #1
 80102fa:	6163      	str	r3, [r4, #20]
 80102fc:	b002      	add	sp, #8
 80102fe:	bd70      	pop	{r4, r5, r6, pc}
 8010300:	ab01      	add	r3, sp, #4
 8010302:	466a      	mov	r2, sp
 8010304:	f7ff ffc8 	bl	8010298 <__swhatbuf_r>
 8010308:	9900      	ldr	r1, [sp, #0]
 801030a:	4605      	mov	r5, r0
 801030c:	4630      	mov	r0, r6
 801030e:	f7ff f9cf 	bl	800f6b0 <_malloc_r>
 8010312:	b948      	cbnz	r0, 8010328 <__smakebuf_r+0x44>
 8010314:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010318:	059a      	lsls	r2, r3, #22
 801031a:	d4ef      	bmi.n	80102fc <__smakebuf_r+0x18>
 801031c:	f023 0303 	bic.w	r3, r3, #3
 8010320:	f043 0302 	orr.w	r3, r3, #2
 8010324:	81a3      	strh	r3, [r4, #12]
 8010326:	e7e3      	b.n	80102f0 <__smakebuf_r+0xc>
 8010328:	4b0d      	ldr	r3, [pc, #52]	; (8010360 <__smakebuf_r+0x7c>)
 801032a:	62b3      	str	r3, [r6, #40]	; 0x28
 801032c:	89a3      	ldrh	r3, [r4, #12]
 801032e:	6020      	str	r0, [r4, #0]
 8010330:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010334:	81a3      	strh	r3, [r4, #12]
 8010336:	9b00      	ldr	r3, [sp, #0]
 8010338:	6163      	str	r3, [r4, #20]
 801033a:	9b01      	ldr	r3, [sp, #4]
 801033c:	6120      	str	r0, [r4, #16]
 801033e:	b15b      	cbz	r3, 8010358 <__smakebuf_r+0x74>
 8010340:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8010344:	4630      	mov	r0, r6
 8010346:	f000 f8d5 	bl	80104f4 <_isatty_r>
 801034a:	b128      	cbz	r0, 8010358 <__smakebuf_r+0x74>
 801034c:	89a3      	ldrh	r3, [r4, #12]
 801034e:	f023 0303 	bic.w	r3, r3, #3
 8010352:	f043 0301 	orr.w	r3, r3, #1
 8010356:	81a3      	strh	r3, [r4, #12]
 8010358:	89a0      	ldrh	r0, [r4, #12]
 801035a:	4305      	orrs	r5, r0
 801035c:	81a5      	strh	r5, [r4, #12]
 801035e:	e7cd      	b.n	80102fc <__smakebuf_r+0x18>
 8010360:	080100f1 	.word	0x080100f1

08010364 <__malloc_lock>:
 8010364:	4801      	ldr	r0, [pc, #4]	; (801036c <__malloc_lock+0x8>)
 8010366:	f7ff bf95 	b.w	8010294 <__retarget_lock_acquire_recursive>
 801036a:	bf00      	nop
 801036c:	2000097c 	.word	0x2000097c

08010370 <__malloc_unlock>:
 8010370:	4801      	ldr	r0, [pc, #4]	; (8010378 <__malloc_unlock+0x8>)
 8010372:	f7ff bf90 	b.w	8010296 <__retarget_lock_release_recursive>
 8010376:	bf00      	nop
 8010378:	2000097c 	.word	0x2000097c

0801037c <_raise_r>:
 801037c:	291f      	cmp	r1, #31
 801037e:	b538      	push	{r3, r4, r5, lr}
 8010380:	4604      	mov	r4, r0
 8010382:	460d      	mov	r5, r1
 8010384:	d904      	bls.n	8010390 <_raise_r+0x14>
 8010386:	2316      	movs	r3, #22
 8010388:	6003      	str	r3, [r0, #0]
 801038a:	f04f 30ff 	mov.w	r0, #4294967295
 801038e:	bd38      	pop	{r3, r4, r5, pc}
 8010390:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8010392:	b112      	cbz	r2, 801039a <_raise_r+0x1e>
 8010394:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8010398:	b94b      	cbnz	r3, 80103ae <_raise_r+0x32>
 801039a:	4620      	mov	r0, r4
 801039c:	f000 f830 	bl	8010400 <_getpid_r>
 80103a0:	462a      	mov	r2, r5
 80103a2:	4601      	mov	r1, r0
 80103a4:	4620      	mov	r0, r4
 80103a6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80103aa:	f000 b817 	b.w	80103dc <_kill_r>
 80103ae:	2b01      	cmp	r3, #1
 80103b0:	d00a      	beq.n	80103c8 <_raise_r+0x4c>
 80103b2:	1c59      	adds	r1, r3, #1
 80103b4:	d103      	bne.n	80103be <_raise_r+0x42>
 80103b6:	2316      	movs	r3, #22
 80103b8:	6003      	str	r3, [r0, #0]
 80103ba:	2001      	movs	r0, #1
 80103bc:	e7e7      	b.n	801038e <_raise_r+0x12>
 80103be:	2400      	movs	r4, #0
 80103c0:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80103c4:	4628      	mov	r0, r5
 80103c6:	4798      	blx	r3
 80103c8:	2000      	movs	r0, #0
 80103ca:	e7e0      	b.n	801038e <_raise_r+0x12>

080103cc <raise>:
 80103cc:	4b02      	ldr	r3, [pc, #8]	; (80103d8 <raise+0xc>)
 80103ce:	4601      	mov	r1, r0
 80103d0:	6818      	ldr	r0, [r3, #0]
 80103d2:	f7ff bfd3 	b.w	801037c <_raise_r>
 80103d6:	bf00      	nop
 80103d8:	200001a0 	.word	0x200001a0

080103dc <_kill_r>:
 80103dc:	b538      	push	{r3, r4, r5, lr}
 80103de:	4d07      	ldr	r5, [pc, #28]	; (80103fc <_kill_r+0x20>)
 80103e0:	2300      	movs	r3, #0
 80103e2:	4604      	mov	r4, r0
 80103e4:	4608      	mov	r0, r1
 80103e6:	4611      	mov	r1, r2
 80103e8:	602b      	str	r3, [r5, #0]
 80103ea:	f7f2 ff95 	bl	8003318 <_kill>
 80103ee:	1c43      	adds	r3, r0, #1
 80103f0:	d102      	bne.n	80103f8 <_kill_r+0x1c>
 80103f2:	682b      	ldr	r3, [r5, #0]
 80103f4:	b103      	cbz	r3, 80103f8 <_kill_r+0x1c>
 80103f6:	6023      	str	r3, [r4, #0]
 80103f8:	bd38      	pop	{r3, r4, r5, pc}
 80103fa:	bf00      	nop
 80103fc:	20000980 	.word	0x20000980

08010400 <_getpid_r>:
 8010400:	f7f2 bf82 	b.w	8003308 <_getpid>

08010404 <__sread>:
 8010404:	b510      	push	{r4, lr}
 8010406:	460c      	mov	r4, r1
 8010408:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801040c:	f000 f894 	bl	8010538 <_read_r>
 8010410:	2800      	cmp	r0, #0
 8010412:	bfab      	itete	ge
 8010414:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8010416:	89a3      	ldrhlt	r3, [r4, #12]
 8010418:	181b      	addge	r3, r3, r0
 801041a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801041e:	bfac      	ite	ge
 8010420:	6563      	strge	r3, [r4, #84]	; 0x54
 8010422:	81a3      	strhlt	r3, [r4, #12]
 8010424:	bd10      	pop	{r4, pc}

08010426 <__swrite>:
 8010426:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801042a:	461f      	mov	r7, r3
 801042c:	898b      	ldrh	r3, [r1, #12]
 801042e:	05db      	lsls	r3, r3, #23
 8010430:	4605      	mov	r5, r0
 8010432:	460c      	mov	r4, r1
 8010434:	4616      	mov	r6, r2
 8010436:	d505      	bpl.n	8010444 <__swrite+0x1e>
 8010438:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801043c:	2302      	movs	r3, #2
 801043e:	2200      	movs	r2, #0
 8010440:	f000 f868 	bl	8010514 <_lseek_r>
 8010444:	89a3      	ldrh	r3, [r4, #12]
 8010446:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801044a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801044e:	81a3      	strh	r3, [r4, #12]
 8010450:	4632      	mov	r2, r6
 8010452:	463b      	mov	r3, r7
 8010454:	4628      	mov	r0, r5
 8010456:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801045a:	f000 b817 	b.w	801048c <_write_r>

0801045e <__sseek>:
 801045e:	b510      	push	{r4, lr}
 8010460:	460c      	mov	r4, r1
 8010462:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010466:	f000 f855 	bl	8010514 <_lseek_r>
 801046a:	1c43      	adds	r3, r0, #1
 801046c:	89a3      	ldrh	r3, [r4, #12]
 801046e:	bf15      	itete	ne
 8010470:	6560      	strne	r0, [r4, #84]	; 0x54
 8010472:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8010476:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801047a:	81a3      	strheq	r3, [r4, #12]
 801047c:	bf18      	it	ne
 801047e:	81a3      	strhne	r3, [r4, #12]
 8010480:	bd10      	pop	{r4, pc}

08010482 <__sclose>:
 8010482:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010486:	f000 b813 	b.w	80104b0 <_close_r>
	...

0801048c <_write_r>:
 801048c:	b538      	push	{r3, r4, r5, lr}
 801048e:	4d07      	ldr	r5, [pc, #28]	; (80104ac <_write_r+0x20>)
 8010490:	4604      	mov	r4, r0
 8010492:	4608      	mov	r0, r1
 8010494:	4611      	mov	r1, r2
 8010496:	2200      	movs	r2, #0
 8010498:	602a      	str	r2, [r5, #0]
 801049a:	461a      	mov	r2, r3
 801049c:	f7f2 ff73 	bl	8003386 <_write>
 80104a0:	1c43      	adds	r3, r0, #1
 80104a2:	d102      	bne.n	80104aa <_write_r+0x1e>
 80104a4:	682b      	ldr	r3, [r5, #0]
 80104a6:	b103      	cbz	r3, 80104aa <_write_r+0x1e>
 80104a8:	6023      	str	r3, [r4, #0]
 80104aa:	bd38      	pop	{r3, r4, r5, pc}
 80104ac:	20000980 	.word	0x20000980

080104b0 <_close_r>:
 80104b0:	b538      	push	{r3, r4, r5, lr}
 80104b2:	4d06      	ldr	r5, [pc, #24]	; (80104cc <_close_r+0x1c>)
 80104b4:	2300      	movs	r3, #0
 80104b6:	4604      	mov	r4, r0
 80104b8:	4608      	mov	r0, r1
 80104ba:	602b      	str	r3, [r5, #0]
 80104bc:	f7f2 ff7f 	bl	80033be <_close>
 80104c0:	1c43      	adds	r3, r0, #1
 80104c2:	d102      	bne.n	80104ca <_close_r+0x1a>
 80104c4:	682b      	ldr	r3, [r5, #0]
 80104c6:	b103      	cbz	r3, 80104ca <_close_r+0x1a>
 80104c8:	6023      	str	r3, [r4, #0]
 80104ca:	bd38      	pop	{r3, r4, r5, pc}
 80104cc:	20000980 	.word	0x20000980

080104d0 <_fstat_r>:
 80104d0:	b538      	push	{r3, r4, r5, lr}
 80104d2:	4d07      	ldr	r5, [pc, #28]	; (80104f0 <_fstat_r+0x20>)
 80104d4:	2300      	movs	r3, #0
 80104d6:	4604      	mov	r4, r0
 80104d8:	4608      	mov	r0, r1
 80104da:	4611      	mov	r1, r2
 80104dc:	602b      	str	r3, [r5, #0]
 80104de:	f7f2 ff7a 	bl	80033d6 <_fstat>
 80104e2:	1c43      	adds	r3, r0, #1
 80104e4:	d102      	bne.n	80104ec <_fstat_r+0x1c>
 80104e6:	682b      	ldr	r3, [r5, #0]
 80104e8:	b103      	cbz	r3, 80104ec <_fstat_r+0x1c>
 80104ea:	6023      	str	r3, [r4, #0]
 80104ec:	bd38      	pop	{r3, r4, r5, pc}
 80104ee:	bf00      	nop
 80104f0:	20000980 	.word	0x20000980

080104f4 <_isatty_r>:
 80104f4:	b538      	push	{r3, r4, r5, lr}
 80104f6:	4d06      	ldr	r5, [pc, #24]	; (8010510 <_isatty_r+0x1c>)
 80104f8:	2300      	movs	r3, #0
 80104fa:	4604      	mov	r4, r0
 80104fc:	4608      	mov	r0, r1
 80104fe:	602b      	str	r3, [r5, #0]
 8010500:	f7f2 ff79 	bl	80033f6 <_isatty>
 8010504:	1c43      	adds	r3, r0, #1
 8010506:	d102      	bne.n	801050e <_isatty_r+0x1a>
 8010508:	682b      	ldr	r3, [r5, #0]
 801050a:	b103      	cbz	r3, 801050e <_isatty_r+0x1a>
 801050c:	6023      	str	r3, [r4, #0]
 801050e:	bd38      	pop	{r3, r4, r5, pc}
 8010510:	20000980 	.word	0x20000980

08010514 <_lseek_r>:
 8010514:	b538      	push	{r3, r4, r5, lr}
 8010516:	4d07      	ldr	r5, [pc, #28]	; (8010534 <_lseek_r+0x20>)
 8010518:	4604      	mov	r4, r0
 801051a:	4608      	mov	r0, r1
 801051c:	4611      	mov	r1, r2
 801051e:	2200      	movs	r2, #0
 8010520:	602a      	str	r2, [r5, #0]
 8010522:	461a      	mov	r2, r3
 8010524:	f7f2 ff72 	bl	800340c <_lseek>
 8010528:	1c43      	adds	r3, r0, #1
 801052a:	d102      	bne.n	8010532 <_lseek_r+0x1e>
 801052c:	682b      	ldr	r3, [r5, #0]
 801052e:	b103      	cbz	r3, 8010532 <_lseek_r+0x1e>
 8010530:	6023      	str	r3, [r4, #0]
 8010532:	bd38      	pop	{r3, r4, r5, pc}
 8010534:	20000980 	.word	0x20000980

08010538 <_read_r>:
 8010538:	b538      	push	{r3, r4, r5, lr}
 801053a:	4d07      	ldr	r5, [pc, #28]	; (8010558 <_read_r+0x20>)
 801053c:	4604      	mov	r4, r0
 801053e:	4608      	mov	r0, r1
 8010540:	4611      	mov	r1, r2
 8010542:	2200      	movs	r2, #0
 8010544:	602a      	str	r2, [r5, #0]
 8010546:	461a      	mov	r2, r3
 8010548:	f7f2 ff00 	bl	800334c <_read>
 801054c:	1c43      	adds	r3, r0, #1
 801054e:	d102      	bne.n	8010556 <_read_r+0x1e>
 8010550:	682b      	ldr	r3, [r5, #0]
 8010552:	b103      	cbz	r3, 8010556 <_read_r+0x1e>
 8010554:	6023      	str	r3, [r4, #0]
 8010556:	bd38      	pop	{r3, r4, r5, pc}
 8010558:	20000980 	.word	0x20000980

0801055c <_init>:
 801055c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801055e:	bf00      	nop
 8010560:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010562:	bc08      	pop	{r3}
 8010564:	469e      	mov	lr, r3
 8010566:	4770      	bx	lr

08010568 <_fini>:
 8010568:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801056a:	bf00      	nop
 801056c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801056e:	bc08      	pop	{r3}
 8010570:	469e      	mov	lr, r3
 8010572:	4770      	bx	lr
