
Digimat_F401_IKS01A3_IDB05A2_tx.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000794c  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08007ae0  08007ae0  00017ae0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007af8  08007af8  000200e8  2**0
                  CONTENTS
  4 .ARM          00000008  08007af8  08007af8  00017af8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007b00  08007b00  000200e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007b00  08007b00  00017b00  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007b04  08007b04  00017b04  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000e8  20000000  08007b08  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000017c  200000e8  08007bf0  000200e8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000264  08007bf0  00020264  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000200e8  2**0
                  CONTENTS, READONLY
 12 .debug_info   000283ed  00000000  00000000  00020118  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002e0c  00000000  00000000  00048505  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001ee0  00000000  00000000  0004b318  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001dc8  00000000  00000000  0004d1f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000030a9  00000000  00000000  0004efc0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000188b2  00000000  00000000  00052069  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00097357  00000000  00000000  0006a91b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00101c72  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000084c4  00000000  00000000  00101cc4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	200000e8 	.word	0x200000e8
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08007ac8 	.word	0x08007ac8

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	200000ec 	.word	0x200000ec
 80001d0:	08007ac8 	.word	0x08007ac8

080001d4 <__aeabi_uldivmod>:
 80001d4:	b953      	cbnz	r3, 80001ec <__aeabi_uldivmod+0x18>
 80001d6:	b94a      	cbnz	r2, 80001ec <__aeabi_uldivmod+0x18>
 80001d8:	2900      	cmp	r1, #0
 80001da:	bf08      	it	eq
 80001dc:	2800      	cmpeq	r0, #0
 80001de:	bf1c      	itt	ne
 80001e0:	f04f 31ff 	movne.w	r1, #4294967295
 80001e4:	f04f 30ff 	movne.w	r0, #4294967295
 80001e8:	f000 b974 	b.w	80004d4 <__aeabi_idiv0>
 80001ec:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f4:	f000 f806 	bl	8000204 <__udivmoddi4>
 80001f8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001fc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000200:	b004      	add	sp, #16
 8000202:	4770      	bx	lr

08000204 <__udivmoddi4>:
 8000204:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000208:	9d08      	ldr	r5, [sp, #32]
 800020a:	4604      	mov	r4, r0
 800020c:	468e      	mov	lr, r1
 800020e:	2b00      	cmp	r3, #0
 8000210:	d14d      	bne.n	80002ae <__udivmoddi4+0xaa>
 8000212:	428a      	cmp	r2, r1
 8000214:	4694      	mov	ip, r2
 8000216:	d969      	bls.n	80002ec <__udivmoddi4+0xe8>
 8000218:	fab2 f282 	clz	r2, r2
 800021c:	b152      	cbz	r2, 8000234 <__udivmoddi4+0x30>
 800021e:	fa01 f302 	lsl.w	r3, r1, r2
 8000222:	f1c2 0120 	rsb	r1, r2, #32
 8000226:	fa20 f101 	lsr.w	r1, r0, r1
 800022a:	fa0c fc02 	lsl.w	ip, ip, r2
 800022e:	ea41 0e03 	orr.w	lr, r1, r3
 8000232:	4094      	lsls	r4, r2
 8000234:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000238:	0c21      	lsrs	r1, r4, #16
 800023a:	fbbe f6f8 	udiv	r6, lr, r8
 800023e:	fa1f f78c 	uxth.w	r7, ip
 8000242:	fb08 e316 	mls	r3, r8, r6, lr
 8000246:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800024a:	fb06 f107 	mul.w	r1, r6, r7
 800024e:	4299      	cmp	r1, r3
 8000250:	d90a      	bls.n	8000268 <__udivmoddi4+0x64>
 8000252:	eb1c 0303 	adds.w	r3, ip, r3
 8000256:	f106 30ff 	add.w	r0, r6, #4294967295
 800025a:	f080 811f 	bcs.w	800049c <__udivmoddi4+0x298>
 800025e:	4299      	cmp	r1, r3
 8000260:	f240 811c 	bls.w	800049c <__udivmoddi4+0x298>
 8000264:	3e02      	subs	r6, #2
 8000266:	4463      	add	r3, ip
 8000268:	1a5b      	subs	r3, r3, r1
 800026a:	b2a4      	uxth	r4, r4
 800026c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000270:	fb08 3310 	mls	r3, r8, r0, r3
 8000274:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000278:	fb00 f707 	mul.w	r7, r0, r7
 800027c:	42a7      	cmp	r7, r4
 800027e:	d90a      	bls.n	8000296 <__udivmoddi4+0x92>
 8000280:	eb1c 0404 	adds.w	r4, ip, r4
 8000284:	f100 33ff 	add.w	r3, r0, #4294967295
 8000288:	f080 810a 	bcs.w	80004a0 <__udivmoddi4+0x29c>
 800028c:	42a7      	cmp	r7, r4
 800028e:	f240 8107 	bls.w	80004a0 <__udivmoddi4+0x29c>
 8000292:	4464      	add	r4, ip
 8000294:	3802      	subs	r0, #2
 8000296:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800029a:	1be4      	subs	r4, r4, r7
 800029c:	2600      	movs	r6, #0
 800029e:	b11d      	cbz	r5, 80002a8 <__udivmoddi4+0xa4>
 80002a0:	40d4      	lsrs	r4, r2
 80002a2:	2300      	movs	r3, #0
 80002a4:	e9c5 4300 	strd	r4, r3, [r5]
 80002a8:	4631      	mov	r1, r6
 80002aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ae:	428b      	cmp	r3, r1
 80002b0:	d909      	bls.n	80002c6 <__udivmoddi4+0xc2>
 80002b2:	2d00      	cmp	r5, #0
 80002b4:	f000 80ef 	beq.w	8000496 <__udivmoddi4+0x292>
 80002b8:	2600      	movs	r6, #0
 80002ba:	e9c5 0100 	strd	r0, r1, [r5]
 80002be:	4630      	mov	r0, r6
 80002c0:	4631      	mov	r1, r6
 80002c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c6:	fab3 f683 	clz	r6, r3
 80002ca:	2e00      	cmp	r6, #0
 80002cc:	d14a      	bne.n	8000364 <__udivmoddi4+0x160>
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d302      	bcc.n	80002d8 <__udivmoddi4+0xd4>
 80002d2:	4282      	cmp	r2, r0
 80002d4:	f200 80f9 	bhi.w	80004ca <__udivmoddi4+0x2c6>
 80002d8:	1a84      	subs	r4, r0, r2
 80002da:	eb61 0303 	sbc.w	r3, r1, r3
 80002de:	2001      	movs	r0, #1
 80002e0:	469e      	mov	lr, r3
 80002e2:	2d00      	cmp	r5, #0
 80002e4:	d0e0      	beq.n	80002a8 <__udivmoddi4+0xa4>
 80002e6:	e9c5 4e00 	strd	r4, lr, [r5]
 80002ea:	e7dd      	b.n	80002a8 <__udivmoddi4+0xa4>
 80002ec:	b902      	cbnz	r2, 80002f0 <__udivmoddi4+0xec>
 80002ee:	deff      	udf	#255	; 0xff
 80002f0:	fab2 f282 	clz	r2, r2
 80002f4:	2a00      	cmp	r2, #0
 80002f6:	f040 8092 	bne.w	800041e <__udivmoddi4+0x21a>
 80002fa:	eba1 010c 	sub.w	r1, r1, ip
 80002fe:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000302:	fa1f fe8c 	uxth.w	lr, ip
 8000306:	2601      	movs	r6, #1
 8000308:	0c20      	lsrs	r0, r4, #16
 800030a:	fbb1 f3f7 	udiv	r3, r1, r7
 800030e:	fb07 1113 	mls	r1, r7, r3, r1
 8000312:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000316:	fb0e f003 	mul.w	r0, lr, r3
 800031a:	4288      	cmp	r0, r1
 800031c:	d908      	bls.n	8000330 <__udivmoddi4+0x12c>
 800031e:	eb1c 0101 	adds.w	r1, ip, r1
 8000322:	f103 38ff 	add.w	r8, r3, #4294967295
 8000326:	d202      	bcs.n	800032e <__udivmoddi4+0x12a>
 8000328:	4288      	cmp	r0, r1
 800032a:	f200 80cb 	bhi.w	80004c4 <__udivmoddi4+0x2c0>
 800032e:	4643      	mov	r3, r8
 8000330:	1a09      	subs	r1, r1, r0
 8000332:	b2a4      	uxth	r4, r4
 8000334:	fbb1 f0f7 	udiv	r0, r1, r7
 8000338:	fb07 1110 	mls	r1, r7, r0, r1
 800033c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000340:	fb0e fe00 	mul.w	lr, lr, r0
 8000344:	45a6      	cmp	lr, r4
 8000346:	d908      	bls.n	800035a <__udivmoddi4+0x156>
 8000348:	eb1c 0404 	adds.w	r4, ip, r4
 800034c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000350:	d202      	bcs.n	8000358 <__udivmoddi4+0x154>
 8000352:	45a6      	cmp	lr, r4
 8000354:	f200 80bb 	bhi.w	80004ce <__udivmoddi4+0x2ca>
 8000358:	4608      	mov	r0, r1
 800035a:	eba4 040e 	sub.w	r4, r4, lr
 800035e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000362:	e79c      	b.n	800029e <__udivmoddi4+0x9a>
 8000364:	f1c6 0720 	rsb	r7, r6, #32
 8000368:	40b3      	lsls	r3, r6
 800036a:	fa22 fc07 	lsr.w	ip, r2, r7
 800036e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000372:	fa20 f407 	lsr.w	r4, r0, r7
 8000376:	fa01 f306 	lsl.w	r3, r1, r6
 800037a:	431c      	orrs	r4, r3
 800037c:	40f9      	lsrs	r1, r7
 800037e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000382:	fa00 f306 	lsl.w	r3, r0, r6
 8000386:	fbb1 f8f9 	udiv	r8, r1, r9
 800038a:	0c20      	lsrs	r0, r4, #16
 800038c:	fa1f fe8c 	uxth.w	lr, ip
 8000390:	fb09 1118 	mls	r1, r9, r8, r1
 8000394:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000398:	fb08 f00e 	mul.w	r0, r8, lr
 800039c:	4288      	cmp	r0, r1
 800039e:	fa02 f206 	lsl.w	r2, r2, r6
 80003a2:	d90b      	bls.n	80003bc <__udivmoddi4+0x1b8>
 80003a4:	eb1c 0101 	adds.w	r1, ip, r1
 80003a8:	f108 3aff 	add.w	sl, r8, #4294967295
 80003ac:	f080 8088 	bcs.w	80004c0 <__udivmoddi4+0x2bc>
 80003b0:	4288      	cmp	r0, r1
 80003b2:	f240 8085 	bls.w	80004c0 <__udivmoddi4+0x2bc>
 80003b6:	f1a8 0802 	sub.w	r8, r8, #2
 80003ba:	4461      	add	r1, ip
 80003bc:	1a09      	subs	r1, r1, r0
 80003be:	b2a4      	uxth	r4, r4
 80003c0:	fbb1 f0f9 	udiv	r0, r1, r9
 80003c4:	fb09 1110 	mls	r1, r9, r0, r1
 80003c8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003cc:	fb00 fe0e 	mul.w	lr, r0, lr
 80003d0:	458e      	cmp	lr, r1
 80003d2:	d908      	bls.n	80003e6 <__udivmoddi4+0x1e2>
 80003d4:	eb1c 0101 	adds.w	r1, ip, r1
 80003d8:	f100 34ff 	add.w	r4, r0, #4294967295
 80003dc:	d26c      	bcs.n	80004b8 <__udivmoddi4+0x2b4>
 80003de:	458e      	cmp	lr, r1
 80003e0:	d96a      	bls.n	80004b8 <__udivmoddi4+0x2b4>
 80003e2:	3802      	subs	r0, #2
 80003e4:	4461      	add	r1, ip
 80003e6:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003ea:	fba0 9402 	umull	r9, r4, r0, r2
 80003ee:	eba1 010e 	sub.w	r1, r1, lr
 80003f2:	42a1      	cmp	r1, r4
 80003f4:	46c8      	mov	r8, r9
 80003f6:	46a6      	mov	lr, r4
 80003f8:	d356      	bcc.n	80004a8 <__udivmoddi4+0x2a4>
 80003fa:	d053      	beq.n	80004a4 <__udivmoddi4+0x2a0>
 80003fc:	b15d      	cbz	r5, 8000416 <__udivmoddi4+0x212>
 80003fe:	ebb3 0208 	subs.w	r2, r3, r8
 8000402:	eb61 010e 	sbc.w	r1, r1, lr
 8000406:	fa01 f707 	lsl.w	r7, r1, r7
 800040a:	fa22 f306 	lsr.w	r3, r2, r6
 800040e:	40f1      	lsrs	r1, r6
 8000410:	431f      	orrs	r7, r3
 8000412:	e9c5 7100 	strd	r7, r1, [r5]
 8000416:	2600      	movs	r6, #0
 8000418:	4631      	mov	r1, r6
 800041a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800041e:	f1c2 0320 	rsb	r3, r2, #32
 8000422:	40d8      	lsrs	r0, r3
 8000424:	fa0c fc02 	lsl.w	ip, ip, r2
 8000428:	fa21 f303 	lsr.w	r3, r1, r3
 800042c:	4091      	lsls	r1, r2
 800042e:	4301      	orrs	r1, r0
 8000430:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000434:	fa1f fe8c 	uxth.w	lr, ip
 8000438:	fbb3 f0f7 	udiv	r0, r3, r7
 800043c:	fb07 3610 	mls	r6, r7, r0, r3
 8000440:	0c0b      	lsrs	r3, r1, #16
 8000442:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000446:	fb00 f60e 	mul.w	r6, r0, lr
 800044a:	429e      	cmp	r6, r3
 800044c:	fa04 f402 	lsl.w	r4, r4, r2
 8000450:	d908      	bls.n	8000464 <__udivmoddi4+0x260>
 8000452:	eb1c 0303 	adds.w	r3, ip, r3
 8000456:	f100 38ff 	add.w	r8, r0, #4294967295
 800045a:	d22f      	bcs.n	80004bc <__udivmoddi4+0x2b8>
 800045c:	429e      	cmp	r6, r3
 800045e:	d92d      	bls.n	80004bc <__udivmoddi4+0x2b8>
 8000460:	3802      	subs	r0, #2
 8000462:	4463      	add	r3, ip
 8000464:	1b9b      	subs	r3, r3, r6
 8000466:	b289      	uxth	r1, r1
 8000468:	fbb3 f6f7 	udiv	r6, r3, r7
 800046c:	fb07 3316 	mls	r3, r7, r6, r3
 8000470:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000474:	fb06 f30e 	mul.w	r3, r6, lr
 8000478:	428b      	cmp	r3, r1
 800047a:	d908      	bls.n	800048e <__udivmoddi4+0x28a>
 800047c:	eb1c 0101 	adds.w	r1, ip, r1
 8000480:	f106 38ff 	add.w	r8, r6, #4294967295
 8000484:	d216      	bcs.n	80004b4 <__udivmoddi4+0x2b0>
 8000486:	428b      	cmp	r3, r1
 8000488:	d914      	bls.n	80004b4 <__udivmoddi4+0x2b0>
 800048a:	3e02      	subs	r6, #2
 800048c:	4461      	add	r1, ip
 800048e:	1ac9      	subs	r1, r1, r3
 8000490:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000494:	e738      	b.n	8000308 <__udivmoddi4+0x104>
 8000496:	462e      	mov	r6, r5
 8000498:	4628      	mov	r0, r5
 800049a:	e705      	b.n	80002a8 <__udivmoddi4+0xa4>
 800049c:	4606      	mov	r6, r0
 800049e:	e6e3      	b.n	8000268 <__udivmoddi4+0x64>
 80004a0:	4618      	mov	r0, r3
 80004a2:	e6f8      	b.n	8000296 <__udivmoddi4+0x92>
 80004a4:	454b      	cmp	r3, r9
 80004a6:	d2a9      	bcs.n	80003fc <__udivmoddi4+0x1f8>
 80004a8:	ebb9 0802 	subs.w	r8, r9, r2
 80004ac:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004b0:	3801      	subs	r0, #1
 80004b2:	e7a3      	b.n	80003fc <__udivmoddi4+0x1f8>
 80004b4:	4646      	mov	r6, r8
 80004b6:	e7ea      	b.n	800048e <__udivmoddi4+0x28a>
 80004b8:	4620      	mov	r0, r4
 80004ba:	e794      	b.n	80003e6 <__udivmoddi4+0x1e2>
 80004bc:	4640      	mov	r0, r8
 80004be:	e7d1      	b.n	8000464 <__udivmoddi4+0x260>
 80004c0:	46d0      	mov	r8, sl
 80004c2:	e77b      	b.n	80003bc <__udivmoddi4+0x1b8>
 80004c4:	3b02      	subs	r3, #2
 80004c6:	4461      	add	r1, ip
 80004c8:	e732      	b.n	8000330 <__udivmoddi4+0x12c>
 80004ca:	4630      	mov	r0, r6
 80004cc:	e709      	b.n	80002e2 <__udivmoddi4+0xde>
 80004ce:	4464      	add	r4, ip
 80004d0:	3802      	subs	r0, #2
 80004d2:	e742      	b.n	800035a <__udivmoddi4+0x156>

080004d4 <__aeabi_idiv0>:
 80004d4:	4770      	bx	lr
 80004d6:	bf00      	nop

080004d8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004d8:	b580      	push	{r7, lr}
 80004da:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004dc:	f005 f9d8 	bl	8005890 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004e0:	f000 f818 	bl	8000514 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004e4:	f000 f882 	bl	80005ec <MX_GPIO_Init>
//  MX_BlueNRG_MS_Init();
  /* USER CODE BEGIN 2 */

  if (IKS01A3_MOTION_SENSOR_Init(IKS01A3_LSM6DSO_0, MOTION_ACCELERO)==HAL_OK){
 80004e8:	2102      	movs	r1, #2
 80004ea:	2000      	movs	r0, #0
 80004ec:	f004 fe3e 	bl	800516c <IKS01A3_MOTION_SENSOR_Init>
 80004f0:	4603      	mov	r3, r0
 80004f2:	2b00      	cmp	r3, #0
 80004f4:	d103      	bne.n	80004fe <main+0x26>
	  IKS01A3_MOTION_SENSOR_Enable(IKS01A3_LSM6DSO_0, MOTION_ACCELERO);
 80004f6:	2102      	movs	r1, #2
 80004f8:	2000      	movs	r0, #0
 80004fa:	f004 ff33 	bl	8005364 <IKS01A3_MOTION_SENSOR_Enable>

//  MX_BlueNRG_MS_Process();
    /* USER CODE BEGIN 3 */


  IKS01A3_MOTION_SENSOR_GetAxes(IKS01A3_LSM6DSO_0, MOTION_ACCELERO, &misure_accelerometro);
 80004fe:	4a04      	ldr	r2, [pc, #16]	; (8000510 <main+0x38>)
 8000500:	2102      	movs	r1, #2
 8000502:	2000      	movs	r0, #0
 8000504:	f004 ff70 	bl	80053e8 <IKS01A3_MOTION_SENSOR_GetAxes>
  HAL_Delay(1);
 8000508:	2001      	movs	r0, #1
 800050a:	f005 fa33 	bl	8005974 <HAL_Delay>
  IKS01A3_MOTION_SENSOR_GetAxes(IKS01A3_LSM6DSO_0, MOTION_ACCELERO, &misure_accelerometro);
 800050e:	e7f6      	b.n	80004fe <main+0x26>
 8000510:	2000010c 	.word	0x2000010c

08000514 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000514:	b580      	push	{r7, lr}
 8000516:	b094      	sub	sp, #80	; 0x50
 8000518:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800051a:	f107 0320 	add.w	r3, r7, #32
 800051e:	2230      	movs	r2, #48	; 0x30
 8000520:	2100      	movs	r1, #0
 8000522:	4618      	mov	r0, r3
 8000524:	f007 fac8 	bl	8007ab8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000528:	f107 030c 	add.w	r3, r7, #12
 800052c:	2200      	movs	r2, #0
 800052e:	601a      	str	r2, [r3, #0]
 8000530:	605a      	str	r2, [r3, #4]
 8000532:	609a      	str	r2, [r3, #8]
 8000534:	60da      	str	r2, [r3, #12]
 8000536:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000538:	2300      	movs	r3, #0
 800053a:	60bb      	str	r3, [r7, #8]
 800053c:	4b29      	ldr	r3, [pc, #164]	; (80005e4 <SystemClock_Config+0xd0>)
 800053e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000540:	4a28      	ldr	r2, [pc, #160]	; (80005e4 <SystemClock_Config+0xd0>)
 8000542:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000546:	6413      	str	r3, [r2, #64]	; 0x40
 8000548:	4b26      	ldr	r3, [pc, #152]	; (80005e4 <SystemClock_Config+0xd0>)
 800054a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800054c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000550:	60bb      	str	r3, [r7, #8]
 8000552:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000554:	2300      	movs	r3, #0
 8000556:	607b      	str	r3, [r7, #4]
 8000558:	4b23      	ldr	r3, [pc, #140]	; (80005e8 <SystemClock_Config+0xd4>)
 800055a:	681b      	ldr	r3, [r3, #0]
 800055c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000560:	4a21      	ldr	r2, [pc, #132]	; (80005e8 <SystemClock_Config+0xd4>)
 8000562:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000566:	6013      	str	r3, [r2, #0]
 8000568:	4b1f      	ldr	r3, [pc, #124]	; (80005e8 <SystemClock_Config+0xd4>)
 800056a:	681b      	ldr	r3, [r3, #0]
 800056c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000570:	607b      	str	r3, [r7, #4]
 8000572:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000574:	2302      	movs	r3, #2
 8000576:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000578:	2301      	movs	r3, #1
 800057a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800057c:	2310      	movs	r3, #16
 800057e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000580:	2302      	movs	r3, #2
 8000582:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000584:	2300      	movs	r3, #0
 8000586:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000588:	2310      	movs	r3, #16
 800058a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 800058c:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000590:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000592:	2304      	movs	r3, #4
 8000594:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000596:	2307      	movs	r3, #7
 8000598:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800059a:	f107 0320 	add.w	r3, r7, #32
 800059e:	4618      	mov	r0, r3
 80005a0:	f006 fde2 	bl	8007168 <HAL_RCC_OscConfig>
 80005a4:	4603      	mov	r3, r0
 80005a6:	2b00      	cmp	r3, #0
 80005a8:	d001      	beq.n	80005ae <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80005aa:	f000 f89d 	bl	80006e8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005ae:	230f      	movs	r3, #15
 80005b0:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005b2:	2302      	movs	r3, #2
 80005b4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005b6:	2300      	movs	r3, #0
 80005b8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80005ba:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80005be:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005c0:	2300      	movs	r3, #0
 80005c2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80005c4:	f107 030c 	add.w	r3, r7, #12
 80005c8:	2102      	movs	r1, #2
 80005ca:	4618      	mov	r0, r3
 80005cc:	f007 f844 	bl	8007658 <HAL_RCC_ClockConfig>
 80005d0:	4603      	mov	r3, r0
 80005d2:	2b00      	cmp	r3, #0
 80005d4:	d001      	beq.n	80005da <SystemClock_Config+0xc6>
  {
    Error_Handler();
 80005d6:	f000 f887 	bl	80006e8 <Error_Handler>
  }
}
 80005da:	bf00      	nop
 80005dc:	3750      	adds	r7, #80	; 0x50
 80005de:	46bd      	mov	sp, r7
 80005e0:	bd80      	pop	{r7, pc}
 80005e2:	bf00      	nop
 80005e4:	40023800 	.word	0x40023800
 80005e8:	40007000 	.word	0x40007000

080005ec <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80005ec:	b580      	push	{r7, lr}
 80005ee:	b08a      	sub	sp, #40	; 0x28
 80005f0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005f2:	f107 0314 	add.w	r3, r7, #20
 80005f6:	2200      	movs	r2, #0
 80005f8:	601a      	str	r2, [r3, #0]
 80005fa:	605a      	str	r2, [r3, #4]
 80005fc:	609a      	str	r2, [r3, #8]
 80005fe:	60da      	str	r2, [r3, #12]
 8000600:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000602:	2300      	movs	r3, #0
 8000604:	613b      	str	r3, [r7, #16]
 8000606:	4b36      	ldr	r3, [pc, #216]	; (80006e0 <MX_GPIO_Init+0xf4>)
 8000608:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800060a:	4a35      	ldr	r2, [pc, #212]	; (80006e0 <MX_GPIO_Init+0xf4>)
 800060c:	f043 0304 	orr.w	r3, r3, #4
 8000610:	6313      	str	r3, [r2, #48]	; 0x30
 8000612:	4b33      	ldr	r3, [pc, #204]	; (80006e0 <MX_GPIO_Init+0xf4>)
 8000614:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000616:	f003 0304 	and.w	r3, r3, #4
 800061a:	613b      	str	r3, [r7, #16]
 800061c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800061e:	2300      	movs	r3, #0
 8000620:	60fb      	str	r3, [r7, #12]
 8000622:	4b2f      	ldr	r3, [pc, #188]	; (80006e0 <MX_GPIO_Init+0xf4>)
 8000624:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000626:	4a2e      	ldr	r2, [pc, #184]	; (80006e0 <MX_GPIO_Init+0xf4>)
 8000628:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800062c:	6313      	str	r3, [r2, #48]	; 0x30
 800062e:	4b2c      	ldr	r3, [pc, #176]	; (80006e0 <MX_GPIO_Init+0xf4>)
 8000630:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000632:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000636:	60fb      	str	r3, [r7, #12]
 8000638:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800063a:	2300      	movs	r3, #0
 800063c:	60bb      	str	r3, [r7, #8]
 800063e:	4b28      	ldr	r3, [pc, #160]	; (80006e0 <MX_GPIO_Init+0xf4>)
 8000640:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000642:	4a27      	ldr	r2, [pc, #156]	; (80006e0 <MX_GPIO_Init+0xf4>)
 8000644:	f043 0301 	orr.w	r3, r3, #1
 8000648:	6313      	str	r3, [r2, #48]	; 0x30
 800064a:	4b25      	ldr	r3, [pc, #148]	; (80006e0 <MX_GPIO_Init+0xf4>)
 800064c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800064e:	f003 0301 	and.w	r3, r3, #1
 8000652:	60bb      	str	r3, [r7, #8]
 8000654:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000656:	2300      	movs	r3, #0
 8000658:	607b      	str	r3, [r7, #4]
 800065a:	4b21      	ldr	r3, [pc, #132]	; (80006e0 <MX_GPIO_Init+0xf4>)
 800065c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800065e:	4a20      	ldr	r2, [pc, #128]	; (80006e0 <MX_GPIO_Init+0xf4>)
 8000660:	f043 0302 	orr.w	r3, r3, #2
 8000664:	6313      	str	r3, [r2, #48]	; 0x30
 8000666:	4b1e      	ldr	r3, [pc, #120]	; (80006e0 <MX_GPIO_Init+0xf4>)
 8000668:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800066a:	f003 0302 	and.w	r3, r3, #2
 800066e:	607b      	str	r3, [r7, #4]
 8000670:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1|GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);
 8000672:	2200      	movs	r2, #0
 8000674:	f240 3102 	movw	r1, #770	; 0x302
 8000678:	481a      	ldr	r0, [pc, #104]	; (80006e4 <MX_GPIO_Init+0xf8>)
 800067a:	f005 fd3d 	bl	80060f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 800067e:	2301      	movs	r3, #1
 8000680:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000682:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000686:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000688:	2300      	movs	r3, #0
 800068a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800068c:	f107 0314 	add.w	r3, r7, #20
 8000690:	4619      	mov	r1, r3
 8000692:	4814      	ldr	r0, [pc, #80]	; (80006e4 <MX_GPIO_Init+0xf8>)
 8000694:	f005 fac8 	bl	8005c28 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA8 PA9 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_8|GPIO_PIN_9;
 8000698:	f240 3302 	movw	r3, #770	; 0x302
 800069c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800069e:	2301      	movs	r3, #1
 80006a0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006a2:	2300      	movs	r3, #0
 80006a4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006a6:	2300      	movs	r3, #0
 80006a8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006aa:	f107 0314 	add.w	r3, r7, #20
 80006ae:	4619      	mov	r1, r3
 80006b0:	480c      	ldr	r0, [pc, #48]	; (80006e4 <MX_GPIO_Init+0xf8>)
 80006b2:	f005 fab9 	bl	8005c28 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 80006b6:	2200      	movs	r2, #0
 80006b8:	2100      	movs	r1, #0
 80006ba:	2006      	movs	r0, #6
 80006bc:	f005 fa59 	bl	8005b72 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80006c0:	2006      	movs	r0, #6
 80006c2:	f005 fa72 	bl	8005baa <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80006c6:	2200      	movs	r2, #0
 80006c8:	2100      	movs	r1, #0
 80006ca:	2028      	movs	r0, #40	; 0x28
 80006cc:	f005 fa51 	bl	8005b72 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80006d0:	2028      	movs	r0, #40	; 0x28
 80006d2:	f005 fa6a 	bl	8005baa <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80006d6:	bf00      	nop
 80006d8:	3728      	adds	r7, #40	; 0x28
 80006da:	46bd      	mov	sp, r7
 80006dc:	bd80      	pop	{r7, pc}
 80006de:	bf00      	nop
 80006e0:	40023800 	.word	0x40023800
 80006e4:	40020000 	.word	0x40020000

080006e8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80006e8:	b480      	push	{r7}
 80006ea:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80006ec:	b672      	cpsid	i
}
 80006ee:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80006f0:	e7fe      	b.n	80006f0 <Error_Handler+0x8>
	...

080006f4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80006f4:	b580      	push	{r7, lr}
 80006f6:	b082      	sub	sp, #8
 80006f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80006fa:	2300      	movs	r3, #0
 80006fc:	607b      	str	r3, [r7, #4]
 80006fe:	4b10      	ldr	r3, [pc, #64]	; (8000740 <HAL_MspInit+0x4c>)
 8000700:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000702:	4a0f      	ldr	r2, [pc, #60]	; (8000740 <HAL_MspInit+0x4c>)
 8000704:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000708:	6453      	str	r3, [r2, #68]	; 0x44
 800070a:	4b0d      	ldr	r3, [pc, #52]	; (8000740 <HAL_MspInit+0x4c>)
 800070c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800070e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000712:	607b      	str	r3, [r7, #4]
 8000714:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000716:	2300      	movs	r3, #0
 8000718:	603b      	str	r3, [r7, #0]
 800071a:	4b09      	ldr	r3, [pc, #36]	; (8000740 <HAL_MspInit+0x4c>)
 800071c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800071e:	4a08      	ldr	r2, [pc, #32]	; (8000740 <HAL_MspInit+0x4c>)
 8000720:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000724:	6413      	str	r3, [r2, #64]	; 0x40
 8000726:	4b06      	ldr	r3, [pc, #24]	; (8000740 <HAL_MspInit+0x4c>)
 8000728:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800072a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800072e:	603b      	str	r3, [r7, #0]
 8000730:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000732:	2007      	movs	r0, #7
 8000734:	f005 fa12 	bl	8005b5c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000738:	bf00      	nop
 800073a:	3708      	adds	r7, #8
 800073c:	46bd      	mov	sp, r7
 800073e:	bd80      	pop	{r7, pc}
 8000740:	40023800 	.word	0x40023800

08000744 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000744:	b480      	push	{r7}
 8000746:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000748:	e7fe      	b.n	8000748 <NMI_Handler+0x4>

0800074a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800074a:	b480      	push	{r7}
 800074c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800074e:	e7fe      	b.n	800074e <HardFault_Handler+0x4>

08000750 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000750:	b480      	push	{r7}
 8000752:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000754:	e7fe      	b.n	8000754 <MemManage_Handler+0x4>

08000756 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000756:	b480      	push	{r7}
 8000758:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800075a:	e7fe      	b.n	800075a <BusFault_Handler+0x4>

0800075c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800075c:	b480      	push	{r7}
 800075e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000760:	e7fe      	b.n	8000760 <UsageFault_Handler+0x4>

08000762 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000762:	b480      	push	{r7}
 8000764:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000766:	bf00      	nop
 8000768:	46bd      	mov	sp, r7
 800076a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800076e:	4770      	bx	lr

08000770 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000770:	b480      	push	{r7}
 8000772:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000774:	bf00      	nop
 8000776:	46bd      	mov	sp, r7
 8000778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800077c:	4770      	bx	lr

0800077e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800077e:	b480      	push	{r7}
 8000780:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000782:	bf00      	nop
 8000784:	46bd      	mov	sp, r7
 8000786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800078a:	4770      	bx	lr

0800078c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800078c:	b580      	push	{r7, lr}
 800078e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000790:	f005 f8d0 	bl	8005934 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000794:	bf00      	nop
 8000796:	bd80      	pop	{r7, pc}

08000798 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8000798:	b580      	push	{r7, lr}
 800079a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_EXTI_IRQHandler(&H_EXTI_0);
 800079c:	4802      	ldr	r0, [pc, #8]	; (80007a8 <EXTI0_IRQHandler+0x10>)
 800079e:	f005 fa1f 	bl	8005be0 <HAL_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 80007a2:	bf00      	nop
 80007a4:	bd80      	pop	{r7, pc}
 80007a6:	bf00      	nop
 80007a8:	20000104 	.word	0x20000104

080007ac <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80007ac:	b580      	push	{r7, lr}
 80007ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_EXTI_IRQHandler(&H_EXTI_13);
 80007b0:	4802      	ldr	r0, [pc, #8]	; (80007bc <EXTI15_10_IRQHandler+0x10>)
 80007b2:	f005 fa15 	bl	8005be0 <HAL_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80007b6:	bf00      	nop
 80007b8:	bd80      	pop	{r7, pc}
 80007ba:	bf00      	nop
 80007bc:	200000d8 	.word	0x200000d8

080007c0 <BSP_I2C1_Init>:
/**
  * @brief  Initialize I2C HAL
  * @retval BSP status
  */
int32_t BSP_I2C1_Init(void)
{
 80007c0:	b580      	push	{r7, lr}
 80007c2:	b082      	sub	sp, #8
 80007c4:	af00      	add	r7, sp, #0

  int32_t ret = BSP_ERROR_NONE;
 80007c6:	2300      	movs	r3, #0
 80007c8:	607b      	str	r3, [r7, #4]

  hi2c1.Instance  = I2C1;
 80007ca:	4b13      	ldr	r3, [pc, #76]	; (8000818 <BSP_I2C1_Init+0x58>)
 80007cc:	4a13      	ldr	r2, [pc, #76]	; (800081c <BSP_I2C1_Init+0x5c>)
 80007ce:	601a      	str	r2, [r3, #0]

  if(I2C1InitCounter++ == 0)
 80007d0:	4b13      	ldr	r3, [pc, #76]	; (8000820 <BSP_I2C1_Init+0x60>)
 80007d2:	681b      	ldr	r3, [r3, #0]
 80007d4:	1c5a      	adds	r2, r3, #1
 80007d6:	4912      	ldr	r1, [pc, #72]	; (8000820 <BSP_I2C1_Init+0x60>)
 80007d8:	600a      	str	r2, [r1, #0]
 80007da:	2b00      	cmp	r3, #0
 80007dc:	d117      	bne.n	800080e <BSP_I2C1_Init+0x4e>
  {
    if (HAL_I2C_GetState(&hi2c1) == HAL_I2C_STATE_RESET)
 80007de:	480e      	ldr	r0, [pc, #56]	; (8000818 <BSP_I2C1_Init+0x58>)
 80007e0:	f006 f94c 	bl	8006a7c <HAL_I2C_GetState>
 80007e4:	4603      	mov	r3, r0
 80007e6:	2b00      	cmp	r3, #0
 80007e8:	d111      	bne.n	800080e <BSP_I2C1_Init+0x4e>
    {
    #if (USE_HAL_I2C_REGISTER_CALLBACKS == 0U)
      /* Init the I2C Msp */
      I2C1_MspInit(&hi2c1);
 80007ea:	480b      	ldr	r0, [pc, #44]	; (8000818 <BSP_I2C1_Init+0x58>)
 80007ec:	f000 f8e2 	bl	80009b4 <I2C1_MspInit>
        {
          return BSP_ERROR_MSP_FAILURE;
        }
      }
    #endif
      if(ret == BSP_ERROR_NONE)
 80007f0:	687b      	ldr	r3, [r7, #4]
 80007f2:	2b00      	cmp	r3, #0
 80007f4:	d10b      	bne.n	800080e <BSP_I2C1_Init+0x4e>
      {
        /* Init the I2C */
        if(MX_I2C1_Init(&hi2c1) != HAL_OK)
 80007f6:	4808      	ldr	r0, [pc, #32]	; (8000818 <BSP_I2C1_Init+0x58>)
 80007f8:	f000 f8a8 	bl	800094c <MX_I2C1_Init>
 80007fc:	4603      	mov	r3, r0
 80007fe:	2b00      	cmp	r3, #0
 8000800:	d003      	beq.n	800080a <BSP_I2C1_Init+0x4a>
        {
          ret = BSP_ERROR_BUS_FAILURE;
 8000802:	f06f 0307 	mvn.w	r3, #7
 8000806:	607b      	str	r3, [r7, #4]
 8000808:	e001      	b.n	800080e <BSP_I2C1_Init+0x4e>
        }
        else
        {
          ret = BSP_ERROR_NONE;
 800080a:	2300      	movs	r3, #0
 800080c:	607b      	str	r3, [r7, #4]
        }
      }
    }
  }
  return ret;
 800080e:	687b      	ldr	r3, [r7, #4]
}
 8000810:	4618      	mov	r0, r3
 8000812:	3708      	adds	r7, #8
 8000814:	46bd      	mov	sp, r7
 8000816:	bd80      	pop	{r7, pc}
 8000818:	20000118 	.word	0x20000118
 800081c:	40005400 	.word	0x40005400
 8000820:	2000016c 	.word	0x2000016c

08000824 <BSP_I2C1_DeInit>:
/**
  * @brief  DeInitialize I2C HAL.
  * @retval BSP status
  */
int32_t BSP_I2C1_DeInit(void)
{
 8000824:	b580      	push	{r7, lr}
 8000826:	b082      	sub	sp, #8
 8000828:	af00      	add	r7, sp, #0
  int32_t ret = BSP_ERROR_NONE;
 800082a:	2300      	movs	r3, #0
 800082c:	607b      	str	r3, [r7, #4]

  if (I2C1InitCounter > 0)
 800082e:	4b0f      	ldr	r3, [pc, #60]	; (800086c <BSP_I2C1_DeInit+0x48>)
 8000830:	681b      	ldr	r3, [r3, #0]
 8000832:	2b00      	cmp	r3, #0
 8000834:	d014      	beq.n	8000860 <BSP_I2C1_DeInit+0x3c>
  {
    if (--I2C1InitCounter == 0)
 8000836:	4b0d      	ldr	r3, [pc, #52]	; (800086c <BSP_I2C1_DeInit+0x48>)
 8000838:	681b      	ldr	r3, [r3, #0]
 800083a:	3b01      	subs	r3, #1
 800083c:	4a0b      	ldr	r2, [pc, #44]	; (800086c <BSP_I2C1_DeInit+0x48>)
 800083e:	6013      	str	r3, [r2, #0]
 8000840:	4b0a      	ldr	r3, [pc, #40]	; (800086c <BSP_I2C1_DeInit+0x48>)
 8000842:	681b      	ldr	r3, [r3, #0]
 8000844:	2b00      	cmp	r3, #0
 8000846:	d10b      	bne.n	8000860 <BSP_I2C1_DeInit+0x3c>
    {
  #if (USE_HAL_I2C_REGISTER_CALLBACKS == 0U)
      /* DeInit the I2C */
      I2C1_MspDeInit(&hi2c1);
 8000848:	4809      	ldr	r0, [pc, #36]	; (8000870 <BSP_I2C1_DeInit+0x4c>)
 800084a:	f000 f8fd 	bl	8000a48 <I2C1_MspDeInit>
  #endif
      /* DeInit the I2C */
      if (HAL_I2C_DeInit(&hi2c1) != HAL_OK)
 800084e:	4808      	ldr	r0, [pc, #32]	; (8000870 <BSP_I2C1_DeInit+0x4c>)
 8000850:	f005 fdb0 	bl	80063b4 <HAL_I2C_DeInit>
 8000854:	4603      	mov	r3, r0
 8000856:	2b00      	cmp	r3, #0
 8000858:	d002      	beq.n	8000860 <BSP_I2C1_DeInit+0x3c>
      {
        ret = BSP_ERROR_BUS_FAILURE;
 800085a:	f06f 0307 	mvn.w	r3, #7
 800085e:	607b      	str	r3, [r7, #4]
      }
    }
  }
  return ret;
 8000860:	687b      	ldr	r3, [r7, #4]
}
 8000862:	4618      	mov	r0, r3
 8000864:	3708      	adds	r7, #8
 8000866:	46bd      	mov	sp, r7
 8000868:	bd80      	pop	{r7, pc}
 800086a:	bf00      	nop
 800086c:	2000016c 	.word	0x2000016c
 8000870:	20000118 	.word	0x20000118

08000874 <BSP_I2C1_WriteReg>:
  * @param  Length Data Length
  * @retval BSP status
  */

int32_t BSP_I2C1_WriteReg(uint16_t DevAddr, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 8000874:	b580      	push	{r7, lr}
 8000876:	b08a      	sub	sp, #40	; 0x28
 8000878:	af04      	add	r7, sp, #16
 800087a:	60ba      	str	r2, [r7, #8]
 800087c:	461a      	mov	r2, r3
 800087e:	4603      	mov	r3, r0
 8000880:	81fb      	strh	r3, [r7, #14]
 8000882:	460b      	mov	r3, r1
 8000884:	81bb      	strh	r3, [r7, #12]
 8000886:	4613      	mov	r3, r2
 8000888:	80fb      	strh	r3, [r7, #6]
  int32_t ret = BSP_ERROR_NONE;
 800088a:	2300      	movs	r3, #0
 800088c:	617b      	str	r3, [r7, #20]

  if (HAL_I2C_Mem_Write(&hi2c1, DevAddr,Reg, I2C_MEMADD_SIZE_8BIT,pData, Length, BUS_I2C1_POLL_TIMEOUT) != HAL_OK)
 800088e:	89ba      	ldrh	r2, [r7, #12]
 8000890:	89f9      	ldrh	r1, [r7, #14]
 8000892:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000896:	9302      	str	r3, [sp, #8]
 8000898:	88fb      	ldrh	r3, [r7, #6]
 800089a:	9301      	str	r3, [sp, #4]
 800089c:	68bb      	ldr	r3, [r7, #8]
 800089e:	9300      	str	r3, [sp, #0]
 80008a0:	2301      	movs	r3, #1
 80008a2:	480c      	ldr	r0, [pc, #48]	; (80008d4 <BSP_I2C1_WriteReg+0x60>)
 80008a4:	f005 fdca 	bl	800643c <HAL_I2C_Mem_Write>
 80008a8:	4603      	mov	r3, r0
 80008aa:	2b00      	cmp	r3, #0
 80008ac:	d00c      	beq.n	80008c8 <BSP_I2C1_WriteReg+0x54>
  {
    if (HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF)
 80008ae:	4809      	ldr	r0, [pc, #36]	; (80008d4 <BSP_I2C1_WriteReg+0x60>)
 80008b0:	f006 f8f2 	bl	8006a98 <HAL_I2C_GetError>
 80008b4:	4603      	mov	r3, r0
 80008b6:	2b04      	cmp	r3, #4
 80008b8:	d103      	bne.n	80008c2 <BSP_I2C1_WriteReg+0x4e>
    {
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 80008ba:	f06f 0365 	mvn.w	r3, #101	; 0x65
 80008be:	617b      	str	r3, [r7, #20]
 80008c0:	e002      	b.n	80008c8 <BSP_I2C1_WriteReg+0x54>
    }
    else
    {
      ret =  BSP_ERROR_PERIPH_FAILURE;
 80008c2:	f06f 0303 	mvn.w	r3, #3
 80008c6:	617b      	str	r3, [r7, #20]
    }
  }
  return ret;
 80008c8:	697b      	ldr	r3, [r7, #20]
}
 80008ca:	4618      	mov	r0, r3
 80008cc:	3718      	adds	r7, #24
 80008ce:	46bd      	mov	sp, r7
 80008d0:	bd80      	pop	{r7, pc}
 80008d2:	bf00      	nop
 80008d4:	20000118 	.word	0x20000118

080008d8 <BSP_I2C1_ReadReg>:
  * @param  pData  Pointer to data buffer to read
  * @param  Length Data Length
  * @retval BSP status
  */
int32_t  BSP_I2C1_ReadReg(uint16_t DevAddr, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 80008d8:	b580      	push	{r7, lr}
 80008da:	b08a      	sub	sp, #40	; 0x28
 80008dc:	af04      	add	r7, sp, #16
 80008de:	60ba      	str	r2, [r7, #8]
 80008e0:	461a      	mov	r2, r3
 80008e2:	4603      	mov	r3, r0
 80008e4:	81fb      	strh	r3, [r7, #14]
 80008e6:	460b      	mov	r3, r1
 80008e8:	81bb      	strh	r3, [r7, #12]
 80008ea:	4613      	mov	r3, r2
 80008ec:	80fb      	strh	r3, [r7, #6]
  int32_t ret = BSP_ERROR_NONE;
 80008ee:	2300      	movs	r3, #0
 80008f0:	617b      	str	r3, [r7, #20]

  if (HAL_I2C_Mem_Read(&hi2c1, DevAddr, Reg, I2C_MEMADD_SIZE_8BIT, pData, Length, BUS_I2C1_POLL_TIMEOUT) != HAL_OK)
 80008f2:	89ba      	ldrh	r2, [r7, #12]
 80008f4:	89f9      	ldrh	r1, [r7, #14]
 80008f6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80008fa:	9302      	str	r3, [sp, #8]
 80008fc:	88fb      	ldrh	r3, [r7, #6]
 80008fe:	9301      	str	r3, [sp, #4]
 8000900:	68bb      	ldr	r3, [r7, #8]
 8000902:	9300      	str	r3, [sp, #0]
 8000904:	2301      	movs	r3, #1
 8000906:	480c      	ldr	r0, [pc, #48]	; (8000938 <BSP_I2C1_ReadReg+0x60>)
 8000908:	f005 fe92 	bl	8006630 <HAL_I2C_Mem_Read>
 800090c:	4603      	mov	r3, r0
 800090e:	2b00      	cmp	r3, #0
 8000910:	d00c      	beq.n	800092c <BSP_I2C1_ReadReg+0x54>
  {
    if (HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF)
 8000912:	4809      	ldr	r0, [pc, #36]	; (8000938 <BSP_I2C1_ReadReg+0x60>)
 8000914:	f006 f8c0 	bl	8006a98 <HAL_I2C_GetError>
 8000918:	4603      	mov	r3, r0
 800091a:	2b04      	cmp	r3, #4
 800091c:	d103      	bne.n	8000926 <BSP_I2C1_ReadReg+0x4e>
    {
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 800091e:	f06f 0365 	mvn.w	r3, #101	; 0x65
 8000922:	617b      	str	r3, [r7, #20]
 8000924:	e002      	b.n	800092c <BSP_I2C1_ReadReg+0x54>
    }
    else
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 8000926:	f06f 0303 	mvn.w	r3, #3
 800092a:	617b      	str	r3, [r7, #20]
    }
  }
  return ret;
 800092c:	697b      	ldr	r3, [r7, #20]
}
 800092e:	4618      	mov	r0, r3
 8000930:	3718      	adds	r7, #24
 8000932:	46bd      	mov	sp, r7
 8000934:	bd80      	pop	{r7, pc}
 8000936:	bf00      	nop
 8000938:	20000118 	.word	0x20000118

0800093c <BSP_GetTick>:

/**
  * @brief  Return system tick in ms
  * @retval Current HAL time base time stamp
  */
int32_t BSP_GetTick(void) {
 800093c:	b580      	push	{r7, lr}
 800093e:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8000940:	f005 f80c 	bl	800595c <HAL_GetTick>
 8000944:	4603      	mov	r3, r0
}
 8000946:	4618      	mov	r0, r3
 8000948:	bd80      	pop	{r7, pc}
	...

0800094c <MX_I2C1_Init>:
}

/* I2C1 init function */

__weak HAL_StatusTypeDef MX_I2C1_Init(I2C_HandleTypeDef* hi2c)
{
 800094c:	b580      	push	{r7, lr}
 800094e:	b084      	sub	sp, #16
 8000950:	af00      	add	r7, sp, #0
 8000952:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8000954:	2300      	movs	r3, #0
 8000956:	73fb      	strb	r3, [r7, #15]

  hi2c->Instance = I2C1;
 8000958:	687b      	ldr	r3, [r7, #4]
 800095a:	4a14      	ldr	r2, [pc, #80]	; (80009ac <MX_I2C1_Init+0x60>)
 800095c:	601a      	str	r2, [r3, #0]
  hi2c->Init.ClockSpeed = 100000;
 800095e:	687b      	ldr	r3, [r7, #4]
 8000960:	4a13      	ldr	r2, [pc, #76]	; (80009b0 <MX_I2C1_Init+0x64>)
 8000962:	605a      	str	r2, [r3, #4]
  hi2c->Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000964:	687b      	ldr	r3, [r7, #4]
 8000966:	2200      	movs	r2, #0
 8000968:	609a      	str	r2, [r3, #8]
  hi2c->Init.OwnAddress1 = 0;
 800096a:	687b      	ldr	r3, [r7, #4]
 800096c:	2200      	movs	r2, #0
 800096e:	60da      	str	r2, [r3, #12]
  hi2c->Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000970:	687b      	ldr	r3, [r7, #4]
 8000972:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000976:	611a      	str	r2, [r3, #16]
  hi2c->Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000978:	687b      	ldr	r3, [r7, #4]
 800097a:	2200      	movs	r2, #0
 800097c:	615a      	str	r2, [r3, #20]
  hi2c->Init.OwnAddress2 = 0;
 800097e:	687b      	ldr	r3, [r7, #4]
 8000980:	2200      	movs	r2, #0
 8000982:	619a      	str	r2, [r3, #24]
  hi2c->Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000984:	687b      	ldr	r3, [r7, #4]
 8000986:	2200      	movs	r2, #0
 8000988:	61da      	str	r2, [r3, #28]
  hi2c->Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800098a:	687b      	ldr	r3, [r7, #4]
 800098c:	2200      	movs	r2, #0
 800098e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(hi2c) != HAL_OK)
 8000990:	6878      	ldr	r0, [r7, #4]
 8000992:	f005 fbcb 	bl	800612c <HAL_I2C_Init>
 8000996:	4603      	mov	r3, r0
 8000998:	2b00      	cmp	r3, #0
 800099a:	d001      	beq.n	80009a0 <MX_I2C1_Init+0x54>
  {
    ret = HAL_ERROR;
 800099c:	2301      	movs	r3, #1
 800099e:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 80009a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80009a2:	4618      	mov	r0, r3
 80009a4:	3710      	adds	r7, #16
 80009a6:	46bd      	mov	sp, r7
 80009a8:	bd80      	pop	{r7, pc}
 80009aa:	bf00      	nop
 80009ac:	40005400 	.word	0x40005400
 80009b0:	000186a0 	.word	0x000186a0

080009b4 <I2C1_MspInit>:

static void I2C1_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80009b4:	b580      	push	{r7, lr}
 80009b6:	b08a      	sub	sp, #40	; 0x28
 80009b8:	af00      	add	r7, sp, #0
 80009ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80009bc:	2300      	movs	r3, #0
 80009be:	613b      	str	r3, [r7, #16]
 80009c0:	4b1f      	ldr	r3, [pc, #124]	; (8000a40 <I2C1_MspInit+0x8c>)
 80009c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009c4:	4a1e      	ldr	r2, [pc, #120]	; (8000a40 <I2C1_MspInit+0x8c>)
 80009c6:	f043 0302 	orr.w	r3, r3, #2
 80009ca:	6313      	str	r3, [r2, #48]	; 0x30
 80009cc:	4b1c      	ldr	r3, [pc, #112]	; (8000a40 <I2C1_MspInit+0x8c>)
 80009ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009d0:	f003 0302 	and.w	r3, r3, #2
 80009d4:	613b      	str	r3, [r7, #16]
 80009d6:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = BUS_I2C1_SCL_GPIO_PIN;
 80009d8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80009dc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80009de:	2312      	movs	r3, #18
 80009e0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009e2:	2300      	movs	r3, #0
 80009e4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009e6:	2303      	movs	r3, #3
 80009e8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_I2C1_SCL_GPIO_AF;
 80009ea:	2304      	movs	r3, #4
 80009ec:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(BUS_I2C1_SCL_GPIO_PORT, &GPIO_InitStruct);
 80009ee:	f107 0314 	add.w	r3, r7, #20
 80009f2:	4619      	mov	r1, r3
 80009f4:	4813      	ldr	r0, [pc, #76]	; (8000a44 <I2C1_MspInit+0x90>)
 80009f6:	f005 f917 	bl	8005c28 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BUS_I2C1_SDA_GPIO_PIN;
 80009fa:	f44f 7300 	mov.w	r3, #512	; 0x200
 80009fe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000a00:	2312      	movs	r3, #18
 8000a02:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a04:	2300      	movs	r3, #0
 8000a06:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a08:	2303      	movs	r3, #3
 8000a0a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_I2C1_SDA_GPIO_AF;
 8000a0c:	2304      	movs	r3, #4
 8000a0e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(BUS_I2C1_SDA_GPIO_PORT, &GPIO_InitStruct);
 8000a10:	f107 0314 	add.w	r3, r7, #20
 8000a14:	4619      	mov	r1, r3
 8000a16:	480b      	ldr	r0, [pc, #44]	; (8000a44 <I2C1_MspInit+0x90>)
 8000a18:	f005 f906 	bl	8005c28 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000a1c:	2300      	movs	r3, #0
 8000a1e:	60fb      	str	r3, [r7, #12]
 8000a20:	4b07      	ldr	r3, [pc, #28]	; (8000a40 <I2C1_MspInit+0x8c>)
 8000a22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a24:	4a06      	ldr	r2, [pc, #24]	; (8000a40 <I2C1_MspInit+0x8c>)
 8000a26:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000a2a:	6413      	str	r3, [r2, #64]	; 0x40
 8000a2c:	4b04      	ldr	r3, [pc, #16]	; (8000a40 <I2C1_MspInit+0x8c>)
 8000a2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a30:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000a34:	60fb      	str	r3, [r7, #12]
 8000a36:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
}
 8000a38:	bf00      	nop
 8000a3a:	3728      	adds	r7, #40	; 0x28
 8000a3c:	46bd      	mov	sp, r7
 8000a3e:	bd80      	pop	{r7, pc}
 8000a40:	40023800 	.word	0x40023800
 8000a44:	40020400 	.word	0x40020400

08000a48 <I2C1_MspDeInit>:

static void I2C1_MspDeInit(I2C_HandleTypeDef* i2cHandle)
{
 8000a48:	b580      	push	{r7, lr}
 8000a4a:	b082      	sub	sp, #8
 8000a4c:	af00      	add	r7, sp, #0
 8000a4e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 8000a50:	4b09      	ldr	r3, [pc, #36]	; (8000a78 <I2C1_MspDeInit+0x30>)
 8000a52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a54:	4a08      	ldr	r2, [pc, #32]	; (8000a78 <I2C1_MspDeInit+0x30>)
 8000a56:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8000a5a:	6413      	str	r3, [r2, #64]	; 0x40

    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(BUS_I2C1_SCL_GPIO_PORT, BUS_I2C1_SCL_GPIO_PIN);
 8000a5c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000a60:	4806      	ldr	r0, [pc, #24]	; (8000a7c <I2C1_MspDeInit+0x34>)
 8000a62:	f005 fa65 	bl	8005f30 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(BUS_I2C1_SDA_GPIO_PORT, BUS_I2C1_SDA_GPIO_PIN);
 8000a66:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000a6a:	4804      	ldr	r0, [pc, #16]	; (8000a7c <I2C1_MspDeInit+0x34>)
 8000a6c:	f005 fa60 	bl	8005f30 <HAL_GPIO_DeInit>

  /* USER CODE BEGIN I2C1_MspDeInit 1 */

  /* USER CODE END I2C1_MspDeInit 1 */
}
 8000a70:	bf00      	nop
 8000a72:	3708      	adds	r7, #8
 8000a74:	46bd      	mov	sp, r7
 8000a76:	bd80      	pop	{r7, pc}
 8000a78:	40023800 	.word	0x40023800
 8000a7c:	40020400 	.word	0x40020400

08000a80 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000a80:	b480      	push	{r7}
 8000a82:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000a84:	4b06      	ldr	r3, [pc, #24]	; (8000aa0 <SystemInit+0x20>)
 8000a86:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000a8a:	4a05      	ldr	r2, [pc, #20]	; (8000aa0 <SystemInit+0x20>)
 8000a8c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000a90:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000a94:	bf00      	nop
 8000a96:	46bd      	mov	sp, r7
 8000a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a9c:	4770      	bx	lr
 8000a9e:	bf00      	nop
 8000aa0:	e000ed00 	.word	0xe000ed00

08000aa4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000aa4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000adc <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000aa8:	480d      	ldr	r0, [pc, #52]	; (8000ae0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000aaa:	490e      	ldr	r1, [pc, #56]	; (8000ae4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000aac:	4a0e      	ldr	r2, [pc, #56]	; (8000ae8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000aae:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ab0:	e002      	b.n	8000ab8 <LoopCopyDataInit>

08000ab2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ab2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ab4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ab6:	3304      	adds	r3, #4

08000ab8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ab8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000aba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000abc:	d3f9      	bcc.n	8000ab2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000abe:	4a0b      	ldr	r2, [pc, #44]	; (8000aec <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000ac0:	4c0b      	ldr	r4, [pc, #44]	; (8000af0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000ac2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ac4:	e001      	b.n	8000aca <LoopFillZerobss>

08000ac6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000ac6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ac8:	3204      	adds	r2, #4

08000aca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000aca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000acc:	d3fb      	bcc.n	8000ac6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000ace:	f7ff ffd7 	bl	8000a80 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000ad2:	f006 ffcd 	bl	8007a70 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000ad6:	f7ff fcff 	bl	80004d8 <main>
  bx  lr    
 8000ada:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000adc:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000ae0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ae4:	200000e8 	.word	0x200000e8
  ldr r2, =_sidata
 8000ae8:	08007b08 	.word	0x08007b08
  ldr r2, =_sbss
 8000aec:	200000e8 	.word	0x200000e8
  ldr r4, =_ebss
 8000af0:	20000264 	.word	0x20000264

08000af4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000af4:	e7fe      	b.n	8000af4 <ADC_IRQHandler>
	...

08000af8 <LIS2DW12_RegisterBusIO>:
  * @brief  Register Component Bus IO operations
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DW12_RegisterBusIO(LIS2DW12_Object_t *pObj, LIS2DW12_IO_t *pIO)
{
 8000af8:	b580      	push	{r7, lr}
 8000afa:	b084      	sub	sp, #16
 8000afc:	af00      	add	r7, sp, #0
 8000afe:	6078      	str	r0, [r7, #4]
 8000b00:	6039      	str	r1, [r7, #0]
  int32_t ret = LIS2DW12_OK;
 8000b02:	2300      	movs	r3, #0
 8000b04:	60fb      	str	r3, [r7, #12]

  if (pObj == NULL)
 8000b06:	687b      	ldr	r3, [r7, #4]
 8000b08:	2b00      	cmp	r3, #0
 8000b0a:	d103      	bne.n	8000b14 <LIS2DW12_RegisterBusIO+0x1c>
  {
    ret = LIS2DW12_ERROR;
 8000b0c:	f04f 33ff 	mov.w	r3, #4294967295
 8000b10:	60fb      	str	r3, [r7, #12]
 8000b12:	e051      	b.n	8000bb8 <LIS2DW12_RegisterBusIO+0xc0>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 8000b14:	683b      	ldr	r3, [r7, #0]
 8000b16:	681a      	ldr	r2, [r3, #0]
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 8000b1c:	683b      	ldr	r3, [r7, #0]
 8000b1e:	685a      	ldr	r2, [r3, #4]
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	605a      	str	r2, [r3, #4]
    pObj->IO.BusType   = pIO->BusType;
 8000b24:	683b      	ldr	r3, [r7, #0]
 8000b26:	689a      	ldr	r2, [r3, #8]
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	609a      	str	r2, [r3, #8]
    pObj->IO.Address   = pIO->Address;
 8000b2c:	683b      	ldr	r3, [r7, #0]
 8000b2e:	7b1a      	ldrb	r2, [r3, #12]
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	731a      	strb	r2, [r3, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 8000b34:	683b      	ldr	r3, [r7, #0]
 8000b36:	691a      	ldr	r2, [r3, #16]
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	611a      	str	r2, [r3, #16]
    pObj->IO.ReadReg   = pIO->ReadReg;
 8000b3c:	683b      	ldr	r3, [r7, #0]
 8000b3e:	695a      	ldr	r2, [r3, #20]
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	615a      	str	r2, [r3, #20]
    pObj->IO.GetTick   = pIO->GetTick;
 8000b44:	683b      	ldr	r3, [r7, #0]
 8000b46:	699a      	ldr	r2, [r3, #24]
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	619a      	str	r2, [r3, #24]

    pObj->Ctx.read_reg  = ReadRegWrap;
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	4a1d      	ldr	r2, [pc, #116]	; (8000bc4 <LIS2DW12_RegisterBusIO+0xcc>)
 8000b50:	625a      	str	r2, [r3, #36]	; 0x24
    pObj->Ctx.write_reg = WriteRegWrap;
 8000b52:	687b      	ldr	r3, [r7, #4]
 8000b54:	4a1c      	ldr	r2, [pc, #112]	; (8000bc8 <LIS2DW12_RegisterBusIO+0xd0>)
 8000b56:	621a      	str	r2, [r3, #32]
    pObj->Ctx.mdelay    = pIO->Delay;
 8000b58:	683b      	ldr	r3, [r7, #0]
 8000b5a:	69da      	ldr	r2, [r3, #28]
 8000b5c:	687b      	ldr	r3, [r7, #4]
 8000b5e:	629a      	str	r2, [r3, #40]	; 0x28
    pObj->Ctx.handle   = pObj;
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	687a      	ldr	r2, [r7, #4]
 8000b64:	62da      	str	r2, [r3, #44]	; 0x2c

    if (pObj->IO.Init == NULL)
 8000b66:	687b      	ldr	r3, [r7, #4]
 8000b68:	681b      	ldr	r3, [r3, #0]
 8000b6a:	2b00      	cmp	r3, #0
 8000b6c:	d103      	bne.n	8000b76 <LIS2DW12_RegisterBusIO+0x7e>
    {
      ret = LIS2DW12_ERROR;
 8000b6e:	f04f 33ff 	mov.w	r3, #4294967295
 8000b72:	60fb      	str	r3, [r7, #12]
 8000b74:	e020      	b.n	8000bb8 <LIS2DW12_RegisterBusIO+0xc0>
    }
    else if (pObj->IO.Init() != LIS2DW12_OK)
 8000b76:	687b      	ldr	r3, [r7, #4]
 8000b78:	681b      	ldr	r3, [r3, #0]
 8000b7a:	4798      	blx	r3
 8000b7c:	4603      	mov	r3, r0
 8000b7e:	2b00      	cmp	r3, #0
 8000b80:	d003      	beq.n	8000b8a <LIS2DW12_RegisterBusIO+0x92>
    {
      ret = LIS2DW12_ERROR;
 8000b82:	f04f 33ff 	mov.w	r3, #4294967295
 8000b86:	60fb      	str	r3, [r7, #12]
 8000b88:	e016      	b.n	8000bb8 <LIS2DW12_RegisterBusIO+0xc0>
    }
    else
    {
      if (pObj->IO.BusType == LIS2DW12_SPI_3WIRES_BUS) /* SPI 3-Wires */
 8000b8a:	687b      	ldr	r3, [r7, #4]
 8000b8c:	689b      	ldr	r3, [r3, #8]
 8000b8e:	2b02      	cmp	r3, #2
 8000b90:	d112      	bne.n	8000bb8 <LIS2DW12_RegisterBusIO+0xc0>
      {
        /* Enable the SPI 3-Wires support only the first time */
        if (pObj->is_initialized == 0U)
 8000b92:	687b      	ldr	r3, [r7, #4]
 8000b94:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8000b98:	2b00      	cmp	r3, #0
 8000b9a:	d10d      	bne.n	8000bb8 <LIS2DW12_RegisterBusIO+0xc0>
        {
          /* Enable SPI 3-Wires on the component */
          uint8_t data = 0x05;
 8000b9c:	2305      	movs	r3, #5
 8000b9e:	72fb      	strb	r3, [r7, #11]

          if (LIS2DW12_Write_Reg(pObj, LIS2DW12_CTRL2, data) != LIS2DW12_OK)
 8000ba0:	7afb      	ldrb	r3, [r7, #11]
 8000ba2:	461a      	mov	r2, r3
 8000ba4:	2121      	movs	r1, #33	; 0x21
 8000ba6:	6878      	ldr	r0, [r7, #4]
 8000ba8:	f000 fd87 	bl	80016ba <LIS2DW12_Write_Reg>
 8000bac:	4603      	mov	r3, r0
 8000bae:	2b00      	cmp	r3, #0
 8000bb0:	d002      	beq.n	8000bb8 <LIS2DW12_RegisterBusIO+0xc0>
          {
            ret = LIS2DW12_ERROR;
 8000bb2:	f04f 33ff 	mov.w	r3, #4294967295
 8000bb6:	60fb      	str	r3, [r7, #12]
        }
      }
    }
  }

  return ret;
 8000bb8:	68fb      	ldr	r3, [r7, #12]
}
 8000bba:	4618      	mov	r0, r3
 8000bbc:	3710      	adds	r7, #16
 8000bbe:	46bd      	mov	sp, r7
 8000bc0:	bd80      	pop	{r7, pc}
 8000bc2:	bf00      	nop
 8000bc4:	08001a4d 	.word	0x08001a4d
 8000bc8:	08001a83 	.word	0x08001a83

08000bcc <LIS2DW12_Init>:
  * @brief  Initialize the LIS2DW12 sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DW12_Init(LIS2DW12_Object_t *pObj)
{
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	b082      	sub	sp, #8
 8000bd0:	af00      	add	r7, sp, #0
 8000bd2:	6078      	str	r0, [r7, #4]
  /* Enable register address automatically incremented during a multiple byte
  access with a serial interface. */
  if (lis2dw12_auto_increment_set(&(pObj->Ctx), PROPERTY_ENABLE) != LIS2DW12_OK)
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	3320      	adds	r3, #32
 8000bd8:	2101      	movs	r1, #1
 8000bda:	4618      	mov	r0, r3
 8000bdc:	f001 fa94 	bl	8002108 <lis2dw12_auto_increment_set>
 8000be0:	4603      	mov	r3, r0
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	d002      	beq.n	8000bec <LIS2DW12_Init+0x20>
  {
    return LIS2DW12_ERROR;
 8000be6:	f04f 33ff 	mov.w	r3, #4294967295
 8000bea:	e04b      	b.n	8000c84 <LIS2DW12_Init+0xb8>
  }

  /* Enable BDU */
  if (lis2dw12_block_data_update_set(&(pObj->Ctx), PROPERTY_ENABLE) != LIS2DW12_OK)
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	3320      	adds	r3, #32
 8000bf0:	2101      	movs	r1, #1
 8000bf2:	4618      	mov	r0, r3
 8000bf4:	f001 f9a8 	bl	8001f48 <lis2dw12_block_data_update_set>
 8000bf8:	4603      	mov	r3, r0
 8000bfa:	2b00      	cmp	r3, #0
 8000bfc:	d002      	beq.n	8000c04 <LIS2DW12_Init+0x38>
  {
    return LIS2DW12_ERROR;
 8000bfe:	f04f 33ff 	mov.w	r3, #4294967295
 8000c02:	e03f      	b.n	8000c84 <LIS2DW12_Init+0xb8>
  }

  /* FIFO mode selection */
  if (lis2dw12_fifo_mode_set(&(pObj->Ctx), LIS2DW12_BYPASS_MODE) != LIS2DW12_OK)
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	3320      	adds	r3, #32
 8000c08:	2100      	movs	r1, #0
 8000c0a:	4618      	mov	r0, r3
 8000c0c:	f001 faa2 	bl	8002154 <lis2dw12_fifo_mode_set>
 8000c10:	4603      	mov	r3, r0
 8000c12:	2b00      	cmp	r3, #0
 8000c14:	d002      	beq.n	8000c1c <LIS2DW12_Init+0x50>
  {
    return LIS2DW12_ERROR;
 8000c16:	f04f 33ff 	mov.w	r3, #4294967295
 8000c1a:	e033      	b.n	8000c84 <LIS2DW12_Init+0xb8>
  }

  /* Power mode selection */
  if (lis2dw12_power_mode_set(&(pObj->Ctx), LIS2DW12_HIGH_PERFORMANCE) != LIS2DW12_OK)
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	3320      	adds	r3, #32
 8000c20:	2104      	movs	r1, #4
 8000c22:	4618      	mov	r0, r3
 8000c24:	f000 ff78 	bl	8001b18 <lis2dw12_power_mode_set>
 8000c28:	4603      	mov	r3, r0
 8000c2a:	2b00      	cmp	r3, #0
 8000c2c:	d002      	beq.n	8000c34 <LIS2DW12_Init+0x68>
  {
    return LIS2DW12_ERROR;
 8000c2e:	f04f 33ff 	mov.w	r3, #4294967295
 8000c32:	e027      	b.n	8000c84 <LIS2DW12_Init+0xb8>
  }

  /* Select default output data rate. */
  pObj->acc_odr = 100.0f;
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	4a15      	ldr	r2, [pc, #84]	; (8000c8c <LIS2DW12_Init+0xc0>)
 8000c38:	635a      	str	r2, [r3, #52]	; 0x34
  /* Select default operating mode. */
  pObj->acc_operating_mode = LIS2DW12_HIGH_PERFORMANCE_MODE;
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	2200      	movs	r2, #0
 8000c3e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  /* Select default low noise (disabled). */
  pObj->acc_low_noise = LIS2DW12_LOW_NOISE_DISABLE;
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	2200      	movs	r2, #0
 8000c46:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Output data rate selection - power down. */
  if (lis2dw12_data_rate_set(&(pObj->Ctx), LIS2DW12_XL_ODR_OFF) != LIS2DW12_OK)
 8000c4a:	687b      	ldr	r3, [r7, #4]
 8000c4c:	3320      	adds	r3, #32
 8000c4e:	2100      	movs	r1, #0
 8000c50:	4618      	mov	r0, r3
 8000c52:	f001 f869 	bl	8001d28 <lis2dw12_data_rate_set>
 8000c56:	4603      	mov	r3, r0
 8000c58:	2b00      	cmp	r3, #0
 8000c5a:	d002      	beq.n	8000c62 <LIS2DW12_Init+0x96>
  {
    return LIS2DW12_ERROR;
 8000c5c:	f04f 33ff 	mov.w	r3, #4294967295
 8000c60:	e010      	b.n	8000c84 <LIS2DW12_Init+0xb8>
  }

  /* Full scale selection. */
  if (lis2dw12_full_scale_set(&(pObj->Ctx), LIS2DW12_2g) != LIS2DW12_OK)
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	3320      	adds	r3, #32
 8000c66:	2100      	movs	r1, #0
 8000c68:	4618      	mov	r0, r3
 8000c6a:	f001 f993 	bl	8001f94 <lis2dw12_full_scale_set>
 8000c6e:	4603      	mov	r3, r0
 8000c70:	2b00      	cmp	r3, #0
 8000c72:	d002      	beq.n	8000c7a <LIS2DW12_Init+0xae>
  {
    return LIS2DW12_ERROR;
 8000c74:	f04f 33ff 	mov.w	r3, #4294967295
 8000c78:	e004      	b.n	8000c84 <LIS2DW12_Init+0xb8>
  }

  pObj->is_initialized = 1;
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	2201      	movs	r2, #1
 8000c7e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return LIS2DW12_OK;
 8000c82:	2300      	movs	r3, #0
}
 8000c84:	4618      	mov	r0, r3
 8000c86:	3708      	adds	r7, #8
 8000c88:	46bd      	mov	sp, r7
 8000c8a:	bd80      	pop	{r7, pc}
 8000c8c:	42c80000 	.word	0x42c80000

08000c90 <LIS2DW12_DeInit>:
  * @brief  Deinitialize the LIS2DW12 sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DW12_DeInit(LIS2DW12_Object_t *pObj)
{
 8000c90:	b580      	push	{r7, lr}
 8000c92:	b082      	sub	sp, #8
 8000c94:	af00      	add	r7, sp, #0
 8000c96:	6078      	str	r0, [r7, #4]
  /* Disable the component */
  if (LIS2DW12_ACC_Disable(pObj) != LIS2DW12_OK)
 8000c98:	6878      	ldr	r0, [r7, #4]
 8000c9a:	f000 f888 	bl	8000dae <LIS2DW12_ACC_Disable>
 8000c9e:	4603      	mov	r3, r0
 8000ca0:	2b00      	cmp	r3, #0
 8000ca2:	d002      	beq.n	8000caa <LIS2DW12_DeInit+0x1a>
  {
    return LIS2DW12_ERROR;
 8000ca4:	f04f 33ff 	mov.w	r3, #4294967295
 8000ca8:	e010      	b.n	8000ccc <LIS2DW12_DeInit+0x3c>
  }

  /* Reset output data rate. */
  pObj->acc_odr = 0.0f;
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	f04f 0200 	mov.w	r2, #0
 8000cb0:	635a      	str	r2, [r3, #52]	; 0x34
  /* Reset operating mode to default value. */
  pObj->acc_operating_mode = LIS2DW12_HIGH_PERFORMANCE_MODE;
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  /* Reset low noise to default value (disabled). */
  pObj->acc_low_noise = LIS2DW12_LOW_NOISE_DISABLE;
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  pObj->is_initialized = 0;
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	2200      	movs	r2, #0
 8000cc6:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return LIS2DW12_OK;
 8000cca:	2300      	movs	r3, #0
}
 8000ccc:	4618      	mov	r0, r3
 8000cce:	3708      	adds	r7, #8
 8000cd0:	46bd      	mov	sp, r7
 8000cd2:	bd80      	pop	{r7, pc}

08000cd4 <LIS2DW12_ReadID>:
  * @param  pObj the device pObj
  * @param  Id the WHO_AM_I value
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DW12_ReadID(LIS2DW12_Object_t *pObj, uint8_t *Id)
{
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	b082      	sub	sp, #8
 8000cd8:	af00      	add	r7, sp, #0
 8000cda:	6078      	str	r0, [r7, #4]
 8000cdc:	6039      	str	r1, [r7, #0]
  if (lis2dw12_device_id_get(&(pObj->Ctx), Id) != LIS2DW12_OK)
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	3320      	adds	r3, #32
 8000ce2:	6839      	ldr	r1, [r7, #0]
 8000ce4:	4618      	mov	r0, r3
 8000ce6:	f001 f9fe 	bl	80020e6 <lis2dw12_device_id_get>
 8000cea:	4603      	mov	r3, r0
 8000cec:	2b00      	cmp	r3, #0
 8000cee:	d002      	beq.n	8000cf6 <LIS2DW12_ReadID+0x22>
  {
    return LIS2DW12_ERROR;
 8000cf0:	f04f 33ff 	mov.w	r3, #4294967295
 8000cf4:	e000      	b.n	8000cf8 <LIS2DW12_ReadID+0x24>
  }

  return LIS2DW12_OK;
 8000cf6:	2300      	movs	r3, #0
}
 8000cf8:	4618      	mov	r0, r3
 8000cfa:	3708      	adds	r7, #8
 8000cfc:	46bd      	mov	sp, r7
 8000cfe:	bd80      	pop	{r7, pc}

08000d00 <LIS2DW12_GetCapabilities>:
  * @param  pObj Component object pointer
  * @param  Capabilities pointer to LIS2DW12 sensor capabilities
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DW12_GetCapabilities(LIS2DW12_Object_t *pObj, LIS2DW12_Capabilities_t *Capabilities)
{
 8000d00:	b480      	push	{r7}
 8000d02:	b083      	sub	sp, #12
 8000d04:	af00      	add	r7, sp, #0
 8000d06:	6078      	str	r0, [r7, #4]
 8000d08:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  Capabilities->Acc          = 1;
 8000d0a:	683b      	ldr	r3, [r7, #0]
 8000d0c:	2201      	movs	r2, #1
 8000d0e:	701a      	strb	r2, [r3, #0]
  Capabilities->Gyro         = 0;
 8000d10:	683b      	ldr	r3, [r7, #0]
 8000d12:	2200      	movs	r2, #0
 8000d14:	705a      	strb	r2, [r3, #1]
  Capabilities->Magneto      = 0;
 8000d16:	683b      	ldr	r3, [r7, #0]
 8000d18:	2200      	movs	r2, #0
 8000d1a:	709a      	strb	r2, [r3, #2]
  Capabilities->LowPower     = 0;
 8000d1c:	683b      	ldr	r3, [r7, #0]
 8000d1e:	2200      	movs	r2, #0
 8000d20:	70da      	strb	r2, [r3, #3]
  Capabilities->GyroMaxFS    = 0;
 8000d22:	683b      	ldr	r3, [r7, #0]
 8000d24:	2200      	movs	r2, #0
 8000d26:	605a      	str	r2, [r3, #4]
  Capabilities->AccMaxFS     = 16;
 8000d28:	683b      	ldr	r3, [r7, #0]
 8000d2a:	2210      	movs	r2, #16
 8000d2c:	609a      	str	r2, [r3, #8]
  Capabilities->MagMaxFS     = 0;
 8000d2e:	683b      	ldr	r3, [r7, #0]
 8000d30:	2200      	movs	r2, #0
 8000d32:	60da      	str	r2, [r3, #12]
  Capabilities->GyroMaxOdr   = 0.0f;
 8000d34:	683b      	ldr	r3, [r7, #0]
 8000d36:	f04f 0200 	mov.w	r2, #0
 8000d3a:	611a      	str	r2, [r3, #16]
  Capabilities->AccMaxOdr    = 1600.0f;
 8000d3c:	683b      	ldr	r3, [r7, #0]
 8000d3e:	4a06      	ldr	r2, [pc, #24]	; (8000d58 <LIS2DW12_GetCapabilities+0x58>)
 8000d40:	615a      	str	r2, [r3, #20]
  Capabilities->MagMaxOdr    = 0.0f;
 8000d42:	683b      	ldr	r3, [r7, #0]
 8000d44:	f04f 0200 	mov.w	r2, #0
 8000d48:	619a      	str	r2, [r3, #24]
  return LIS2DW12_OK;
 8000d4a:	2300      	movs	r3, #0
}
 8000d4c:	4618      	mov	r0, r3
 8000d4e:	370c      	adds	r7, #12
 8000d50:	46bd      	mov	sp, r7
 8000d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d56:	4770      	bx	lr
 8000d58:	44c80000 	.word	0x44c80000

08000d5c <LIS2DW12_ACC_Enable>:
  * @brief  Enable the LIS2DW12 accelerometer sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DW12_ACC_Enable(LIS2DW12_Object_t *pObj)
{
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	b082      	sub	sp, #8
 8000d60:	af00      	add	r7, sp, #0
 8000d62:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->acc_is_enabled == 1U)
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8000d6a:	2b01      	cmp	r3, #1
 8000d6c:	d101      	bne.n	8000d72 <LIS2DW12_ACC_Enable+0x16>
  {
    return LIS2DW12_OK;
 8000d6e:	2300      	movs	r3, #0
 8000d70:	e019      	b.n	8000da6 <LIS2DW12_ACC_Enable+0x4a>
  }

  /* Output data rate selection. */
  if (LIS2DW12_ACC_SetOutputDataRate_When_Enabled(pObj, pObj->acc_odr, pObj->acc_operating_mode,
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	f893 1038 	ldrb.w	r1, [r3, #56]	; 0x38
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8000d84:	461a      	mov	r2, r3
 8000d86:	eeb0 0a67 	vmov.f32	s0, s15
 8000d8a:	6878      	ldr	r0, [r7, #4]
 8000d8c:	f000 fcb0 	bl	80016f0 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled>
 8000d90:	4603      	mov	r3, r0
 8000d92:	2b00      	cmp	r3, #0
 8000d94:	d002      	beq.n	8000d9c <LIS2DW12_ACC_Enable+0x40>
                                                  pObj->acc_low_noise) != LIS2DW12_OK)
  {
    return LIS2DW12_ERROR;
 8000d96:	f04f 33ff 	mov.w	r3, #4294967295
 8000d9a:	e004      	b.n	8000da6 <LIS2DW12_ACC_Enable+0x4a>
  }

  pObj->acc_is_enabled = 1;
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	2201      	movs	r2, #1
 8000da0:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

  return LIS2DW12_OK;
 8000da4:	2300      	movs	r3, #0
}
 8000da6:	4618      	mov	r0, r3
 8000da8:	3708      	adds	r7, #8
 8000daa:	46bd      	mov	sp, r7
 8000dac:	bd80      	pop	{r7, pc}

08000dae <LIS2DW12_ACC_Disable>:
  * @brief  Disable the LIS2DW12 accelerometer sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DW12_ACC_Disable(LIS2DW12_Object_t *pObj)
{
 8000dae:	b580      	push	{r7, lr}
 8000db0:	b082      	sub	sp, #8
 8000db2:	af00      	add	r7, sp, #0
 8000db4:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->acc_is_enabled == 0U)
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8000dbc:	2b00      	cmp	r3, #0
 8000dbe:	d101      	bne.n	8000dc4 <LIS2DW12_ACC_Disable+0x16>
  {
    return LIS2DW12_OK;
 8000dc0:	2300      	movs	r3, #0
 8000dc2:	e010      	b.n	8000de6 <LIS2DW12_ACC_Disable+0x38>
  }

  /* Output data rate selection - power down. */
  if (lis2dw12_data_rate_set(&(pObj->Ctx), LIS2DW12_XL_ODR_OFF) != LIS2DW12_OK)
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	3320      	adds	r3, #32
 8000dc8:	2100      	movs	r1, #0
 8000dca:	4618      	mov	r0, r3
 8000dcc:	f000 ffac 	bl	8001d28 <lis2dw12_data_rate_set>
 8000dd0:	4603      	mov	r3, r0
 8000dd2:	2b00      	cmp	r3, #0
 8000dd4:	d002      	beq.n	8000ddc <LIS2DW12_ACC_Disable+0x2e>
  {
    return LIS2DW12_ERROR;
 8000dd6:	f04f 33ff 	mov.w	r3, #4294967295
 8000dda:	e004      	b.n	8000de6 <LIS2DW12_ACC_Disable+0x38>
  }

  pObj->acc_is_enabled = 0;
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	2200      	movs	r2, #0
 8000de0:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

  return LIS2DW12_OK;
 8000de4:	2300      	movs	r3, #0
}
 8000de6:	4618      	mov	r0, r3
 8000de8:	3708      	adds	r7, #8
 8000dea:	46bd      	mov	sp, r7
 8000dec:	bd80      	pop	{r7, pc}
	...

08000df0 <LIS2DW12_ACC_GetSensitivity>:
  * @param  pObj the device pObj
  * @param  Sensitivity pointer
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DW12_ACC_GetSensitivity(LIS2DW12_Object_t *pObj, float *Sensitivity)
{
 8000df0:	b580      	push	{r7, lr}
 8000df2:	b084      	sub	sp, #16
 8000df4:	af00      	add	r7, sp, #0
 8000df6:	6078      	str	r0, [r7, #4]
 8000df8:	6039      	str	r1, [r7, #0]
  int32_t ret = LIS2DW12_OK;
 8000dfa:	2300      	movs	r3, #0
 8000dfc:	60fb      	str	r3, [r7, #12]
  lis2dw12_fs_t full_scale;
  lis2dw12_mode_t mode;

  /* Read actual full scale selection from sensor. */
  if (lis2dw12_full_scale_get(&(pObj->Ctx), &full_scale) != LIS2DW12_OK)
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	3320      	adds	r3, #32
 8000e02:	f107 020b 	add.w	r2, r7, #11
 8000e06:	4611      	mov	r1, r2
 8000e08:	4618      	mov	r0, r3
 8000e0a:	f001 f8e9 	bl	8001fe0 <lis2dw12_full_scale_get>
 8000e0e:	4603      	mov	r3, r0
 8000e10:	2b00      	cmp	r3, #0
 8000e12:	d002      	beq.n	8000e1a <LIS2DW12_ACC_GetSensitivity+0x2a>
  {
    return LIS2DW12_ERROR;
 8000e14:	f04f 33ff 	mov.w	r3, #4294967295
 8000e18:	e0a0      	b.n	8000f5c <LIS2DW12_ACC_GetSensitivity+0x16c>
  }

  /* Read actual power mode selection from sensor. */
  if (lis2dw12_power_mode_get(&(pObj->Ctx), &mode) != LIS2DW12_OK)
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	3320      	adds	r3, #32
 8000e1e:	f107 020a 	add.w	r2, r7, #10
 8000e22:	4611      	mov	r1, r2
 8000e24:	4618      	mov	r0, r3
 8000e26:	f000 fec5 	bl	8001bb4 <lis2dw12_power_mode_get>
 8000e2a:	4603      	mov	r3, r0
 8000e2c:	2b00      	cmp	r3, #0
 8000e2e:	d002      	beq.n	8000e36 <LIS2DW12_ACC_GetSensitivity+0x46>
  {
    return LIS2DW12_ERROR;
 8000e30:	f04f 33ff 	mov.w	r3, #4294967295
 8000e34:	e092      	b.n	8000f5c <LIS2DW12_ACC_GetSensitivity+0x16c>
  }

  switch (mode)
 8000e36:	7abb      	ldrb	r3, [r7, #10]
 8000e38:	2b1b      	cmp	r3, #27
 8000e3a:	f200 8087 	bhi.w	8000f4c <LIS2DW12_ACC_GetSensitivity+0x15c>
 8000e3e:	a201      	add	r2, pc, #4	; (adr r2, 8000e44 <LIS2DW12_ACC_GetSensitivity+0x54>)
 8000e40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e44:	08000eb5 	.word	0x08000eb5
 8000e48:	08000f01 	.word	0x08000f01
 8000e4c:	08000f01 	.word	0x08000f01
 8000e50:	08000f01 	.word	0x08000f01
 8000e54:	08000f01 	.word	0x08000f01
 8000e58:	08000f4d 	.word	0x08000f4d
 8000e5c:	08000f4d 	.word	0x08000f4d
 8000e60:	08000f4d 	.word	0x08000f4d
 8000e64:	08000eb5 	.word	0x08000eb5
 8000e68:	08000f01 	.word	0x08000f01
 8000e6c:	08000f01 	.word	0x08000f01
 8000e70:	08000f01 	.word	0x08000f01
 8000e74:	08000f4d 	.word	0x08000f4d
 8000e78:	08000f4d 	.word	0x08000f4d
 8000e7c:	08000f4d 	.word	0x08000f4d
 8000e80:	08000f4d 	.word	0x08000f4d
 8000e84:	08000eb5 	.word	0x08000eb5
 8000e88:	08000f01 	.word	0x08000f01
 8000e8c:	08000f01 	.word	0x08000f01
 8000e90:	08000f01 	.word	0x08000f01
 8000e94:	08000f01 	.word	0x08000f01
 8000e98:	08000f4d 	.word	0x08000f4d
 8000e9c:	08000f4d 	.word	0x08000f4d
 8000ea0:	08000f4d 	.word	0x08000f4d
 8000ea4:	08000eb5 	.word	0x08000eb5
 8000ea8:	08000f01 	.word	0x08000f01
 8000eac:	08000f01 	.word	0x08000f01
 8000eb0:	08000f01 	.word	0x08000f01
  {
    case LIS2DW12_CONT_LOW_PWR_12bit:
    case LIS2DW12_SINGLE_LOW_PWR_12bit:
    case LIS2DW12_CONT_LOW_PWR_LOW_NOISE_12bit:
    case LIS2DW12_SINGLE_LOW_LOW_NOISE_PWR_12bit:
      switch (full_scale)
 8000eb4:	7afb      	ldrb	r3, [r7, #11]
 8000eb6:	2b03      	cmp	r3, #3
 8000eb8:	d81a      	bhi.n	8000ef0 <LIS2DW12_ACC_GetSensitivity+0x100>
 8000eba:	a201      	add	r2, pc, #4	; (adr r2, 8000ec0 <LIS2DW12_ACC_GetSensitivity+0xd0>)
 8000ebc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000ec0:	08000ed1 	.word	0x08000ed1
 8000ec4:	08000ed9 	.word	0x08000ed9
 8000ec8:	08000ee1 	.word	0x08000ee1
 8000ecc:	08000ee9 	.word	0x08000ee9
      {
        case LIS2DW12_2g:
          *Sensitivity = LIS2DW12_ACC_SENSITIVITY_FOR_FS_2G_LOPOW1_MODE;
 8000ed0:	683b      	ldr	r3, [r7, #0]
 8000ed2:	4a24      	ldr	r2, [pc, #144]	; (8000f64 <LIS2DW12_ACC_GetSensitivity+0x174>)
 8000ed4:	601a      	str	r2, [r3, #0]
          break;
 8000ed6:	e012      	b.n	8000efe <LIS2DW12_ACC_GetSensitivity+0x10e>

        case LIS2DW12_4g:
          *Sensitivity = LIS2DW12_ACC_SENSITIVITY_FOR_FS_4G_LOPOW1_MODE;
 8000ed8:	683b      	ldr	r3, [r7, #0]
 8000eda:	4a23      	ldr	r2, [pc, #140]	; (8000f68 <LIS2DW12_ACC_GetSensitivity+0x178>)
 8000edc:	601a      	str	r2, [r3, #0]
          break;
 8000ede:	e00e      	b.n	8000efe <LIS2DW12_ACC_GetSensitivity+0x10e>

        case LIS2DW12_8g:
          *Sensitivity = LIS2DW12_ACC_SENSITIVITY_FOR_FS_8G_LOPOW1_MODE;
 8000ee0:	683b      	ldr	r3, [r7, #0]
 8000ee2:	4a22      	ldr	r2, [pc, #136]	; (8000f6c <LIS2DW12_ACC_GetSensitivity+0x17c>)
 8000ee4:	601a      	str	r2, [r3, #0]
          break;
 8000ee6:	e00a      	b.n	8000efe <LIS2DW12_ACC_GetSensitivity+0x10e>

        case LIS2DW12_16g:
          *Sensitivity = LIS2DW12_ACC_SENSITIVITY_FOR_FS_16G_LOPOW1_MODE;
 8000ee8:	683b      	ldr	r3, [r7, #0]
 8000eea:	4a21      	ldr	r2, [pc, #132]	; (8000f70 <LIS2DW12_ACC_GetSensitivity+0x180>)
 8000eec:	601a      	str	r2, [r3, #0]
          break;
 8000eee:	e006      	b.n	8000efe <LIS2DW12_ACC_GetSensitivity+0x10e>

        default:
          *Sensitivity = -1.0f;
 8000ef0:	683b      	ldr	r3, [r7, #0]
 8000ef2:	4a20      	ldr	r2, [pc, #128]	; (8000f74 <LIS2DW12_ACC_GetSensitivity+0x184>)
 8000ef4:	601a      	str	r2, [r3, #0]
          ret = LIS2DW12_ERROR;
 8000ef6:	f04f 33ff 	mov.w	r3, #4294967295
 8000efa:	60fb      	str	r3, [r7, #12]
          break;
 8000efc:	bf00      	nop
      }
      break;
 8000efe:	e02c      	b.n	8000f5a <LIS2DW12_ACC_GetSensitivity+0x16a>
    case LIS2DW12_CONT_LOW_PWR_LOW_NOISE_3:
    case LIS2DW12_CONT_LOW_PWR_LOW_NOISE_2:
    case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_4:
    case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_3:
    case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_2:
      switch (full_scale)
 8000f00:	7afb      	ldrb	r3, [r7, #11]
 8000f02:	2b03      	cmp	r3, #3
 8000f04:	d81a      	bhi.n	8000f3c <LIS2DW12_ACC_GetSensitivity+0x14c>
 8000f06:	a201      	add	r2, pc, #4	; (adr r2, 8000f0c <LIS2DW12_ACC_GetSensitivity+0x11c>)
 8000f08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f0c:	08000f1d 	.word	0x08000f1d
 8000f10:	08000f25 	.word	0x08000f25
 8000f14:	08000f2d 	.word	0x08000f2d
 8000f18:	08000f35 	.word	0x08000f35
      {
        case LIS2DW12_2g:
          *Sensitivity = LIS2DW12_ACC_SENSITIVITY_FOR_FS_2G_OTHER_MODES;
 8000f1c:	683b      	ldr	r3, [r7, #0]
 8000f1e:	4a16      	ldr	r2, [pc, #88]	; (8000f78 <LIS2DW12_ACC_GetSensitivity+0x188>)
 8000f20:	601a      	str	r2, [r3, #0]
          break;
 8000f22:	e012      	b.n	8000f4a <LIS2DW12_ACC_GetSensitivity+0x15a>

        case LIS2DW12_4g:
          *Sensitivity = LIS2DW12_ACC_SENSITIVITY_FOR_FS_4G_OTHER_MODES;
 8000f24:	683b      	ldr	r3, [r7, #0]
 8000f26:	4a15      	ldr	r2, [pc, #84]	; (8000f7c <LIS2DW12_ACC_GetSensitivity+0x18c>)
 8000f28:	601a      	str	r2, [r3, #0]
          break;
 8000f2a:	e00e      	b.n	8000f4a <LIS2DW12_ACC_GetSensitivity+0x15a>

        case LIS2DW12_8g:
          *Sensitivity = LIS2DW12_ACC_SENSITIVITY_FOR_FS_8G_OTHER_MODES;
 8000f2c:	683b      	ldr	r3, [r7, #0]
 8000f2e:	4a0d      	ldr	r2, [pc, #52]	; (8000f64 <LIS2DW12_ACC_GetSensitivity+0x174>)
 8000f30:	601a      	str	r2, [r3, #0]
          break;
 8000f32:	e00a      	b.n	8000f4a <LIS2DW12_ACC_GetSensitivity+0x15a>

        case LIS2DW12_16g:
          *Sensitivity = LIS2DW12_ACC_SENSITIVITY_FOR_FS_16G_OTHER_MODES;
 8000f34:	683b      	ldr	r3, [r7, #0]
 8000f36:	4a0c      	ldr	r2, [pc, #48]	; (8000f68 <LIS2DW12_ACC_GetSensitivity+0x178>)
 8000f38:	601a      	str	r2, [r3, #0]
          break;
 8000f3a:	e006      	b.n	8000f4a <LIS2DW12_ACC_GetSensitivity+0x15a>

        default:
          *Sensitivity = -1.0f;
 8000f3c:	683b      	ldr	r3, [r7, #0]
 8000f3e:	4a0d      	ldr	r2, [pc, #52]	; (8000f74 <LIS2DW12_ACC_GetSensitivity+0x184>)
 8000f40:	601a      	str	r2, [r3, #0]
          ret = LIS2DW12_ERROR;
 8000f42:	f04f 33ff 	mov.w	r3, #4294967295
 8000f46:	60fb      	str	r3, [r7, #12]
          break;
 8000f48:	bf00      	nop
      }
      break;
 8000f4a:	e006      	b.n	8000f5a <LIS2DW12_ACC_GetSensitivity+0x16a>

    default:
      *Sensitivity = -1.0f;
 8000f4c:	683b      	ldr	r3, [r7, #0]
 8000f4e:	4a09      	ldr	r2, [pc, #36]	; (8000f74 <LIS2DW12_ACC_GetSensitivity+0x184>)
 8000f50:	601a      	str	r2, [r3, #0]
      ret = LIS2DW12_ERROR;
 8000f52:	f04f 33ff 	mov.w	r3, #4294967295
 8000f56:	60fb      	str	r3, [r7, #12]
      break;
 8000f58:	bf00      	nop
  }

  return ret;
 8000f5a:	68fb      	ldr	r3, [r7, #12]
}
 8000f5c:	4618      	mov	r0, r3
 8000f5e:	3710      	adds	r7, #16
 8000f60:	46bd      	mov	sp, r7
 8000f62:	bd80      	pop	{r7, pc}
 8000f64:	3f79db23 	.word	0x3f79db23
 8000f68:	3ff9db23 	.word	0x3ff9db23
 8000f6c:	4079db23 	.word	0x4079db23
 8000f70:	40f9db23 	.word	0x40f9db23
 8000f74:	bf800000 	.word	0xbf800000
 8000f78:	3e79db23 	.word	0x3e79db23
 8000f7c:	3ef9db23 	.word	0x3ef9db23

08000f80 <LIS2DW12_ACC_GetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr pointer where the output data rate is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DW12_ACC_GetOutputDataRate(LIS2DW12_Object_t *pObj, float *Odr)
{
 8000f80:	b580      	push	{r7, lr}
 8000f82:	b084      	sub	sp, #16
 8000f84:	af00      	add	r7, sp, #0
 8000f86:	6078      	str	r0, [r7, #4]
 8000f88:	6039      	str	r1, [r7, #0]
  int32_t ret = LIS2DW12_OK;
 8000f8a:	2300      	movs	r3, #0
 8000f8c:	60fb      	str	r3, [r7, #12]
  lis2dw12_odr_t odr_low_level;
  lis2dw12_mode_t mode;

  /* Get current output data rate. */
  if (lis2dw12_data_rate_get(&(pObj->Ctx), &odr_low_level) != LIS2DW12_OK)
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	3320      	adds	r3, #32
 8000f92:	f107 020b 	add.w	r2, r7, #11
 8000f96:	4611      	mov	r1, r2
 8000f98:	4618      	mov	r0, r3
 8000f9a:	f000 ff0b 	bl	8001db4 <lis2dw12_data_rate_get>
 8000f9e:	4603      	mov	r3, r0
 8000fa0:	2b00      	cmp	r3, #0
 8000fa2:	d002      	beq.n	8000faa <LIS2DW12_ACC_GetOutputDataRate+0x2a>
  {
    return LIS2DW12_ERROR;
 8000fa4:	f04f 33ff 	mov.w	r3, #4294967295
 8000fa8:	e1d4      	b.n	8001354 <LIS2DW12_ACC_GetOutputDataRate+0x3d4>
  }

  /* Read actual power mode selection from sensor. */
  if (lis2dw12_power_mode_get(&(pObj->Ctx), &mode) != LIS2DW12_OK)
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	3320      	adds	r3, #32
 8000fae:	f107 020a 	add.w	r2, r7, #10
 8000fb2:	4611      	mov	r1, r2
 8000fb4:	4618      	mov	r0, r3
 8000fb6:	f000 fdfd 	bl	8001bb4 <lis2dw12_power_mode_get>
 8000fba:	4603      	mov	r3, r0
 8000fbc:	2b00      	cmp	r3, #0
 8000fbe:	d002      	beq.n	8000fc6 <LIS2DW12_ACC_GetOutputDataRate+0x46>
  {
    return LIS2DW12_ERROR;
 8000fc0:	f04f 33ff 	mov.w	r3, #4294967295
 8000fc4:	e1c6      	b.n	8001354 <LIS2DW12_ACC_GetOutputDataRate+0x3d4>
  }

  switch (odr_low_level)
 8000fc6:	7afb      	ldrb	r3, [r7, #11]
 8000fc8:	2b32      	cmp	r3, #50	; 0x32
 8000fca:	f200 81bb 	bhi.w	8001344 <LIS2DW12_ACC_GetOutputDataRate+0x3c4>
 8000fce:	a201      	add	r2, pc, #4	; (adr r2, 8000fd4 <LIS2DW12_ACC_GetOutputDataRate+0x54>)
 8000fd0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000fd4:	080010a1 	.word	0x080010a1
 8000fd8:	080010ab 	.word	0x080010ab
 8000fdc:	08001149 	.word	0x08001149
 8000fe0:	08001151 	.word	0x08001151
 8000fe4:	08001159 	.word	0x08001159
 8000fe8:	08001161 	.word	0x08001161
 8000fec:	08001169 	.word	0x08001169
 8000ff0:	08001171 	.word	0x08001171
 8000ff4:	0800120d 	.word	0x0800120d
 8000ff8:	080012a9 	.word	0x080012a9
 8000ffc:	08001345 	.word	0x08001345
 8001000:	08001345 	.word	0x08001345
 8001004:	08001345 	.word	0x08001345
 8001008:	08001345 	.word	0x08001345
 800100c:	08001345 	.word	0x08001345
 8001010:	08001345 	.word	0x08001345
 8001014:	08001345 	.word	0x08001345
 8001018:	08001345 	.word	0x08001345
 800101c:	080010a1 	.word	0x080010a1
 8001020:	08001345 	.word	0x08001345
 8001024:	08001345 	.word	0x08001345
 8001028:	08001345 	.word	0x08001345
 800102c:	08001345 	.word	0x08001345
 8001030:	08001345 	.word	0x08001345
 8001034:	08001345 	.word	0x08001345
 8001038:	08001345 	.word	0x08001345
 800103c:	08001345 	.word	0x08001345
 8001040:	08001345 	.word	0x08001345
 8001044:	08001345 	.word	0x08001345
 8001048:	08001345 	.word	0x08001345
 800104c:	08001345 	.word	0x08001345
 8001050:	08001345 	.word	0x08001345
 8001054:	08001345 	.word	0x08001345
 8001058:	08001345 	.word	0x08001345
 800105c:	08001345 	.word	0x08001345
 8001060:	08001345 	.word	0x08001345
 8001064:	08001345 	.word	0x08001345
 8001068:	08001345 	.word	0x08001345
 800106c:	08001345 	.word	0x08001345
 8001070:	08001345 	.word	0x08001345
 8001074:	08001345 	.word	0x08001345
 8001078:	08001345 	.word	0x08001345
 800107c:	08001345 	.word	0x08001345
 8001080:	08001345 	.word	0x08001345
 8001084:	08001345 	.word	0x08001345
 8001088:	08001345 	.word	0x08001345
 800108c:	08001345 	.word	0x08001345
 8001090:	08001345 	.word	0x08001345
 8001094:	08001345 	.word	0x08001345
 8001098:	08001345 	.word	0x08001345
 800109c:	080010a1 	.word	0x080010a1
  {
    case LIS2DW12_XL_ODR_OFF:
    case LIS2DW12_XL_SET_SW_TRIG:
    case LIS2DW12_XL_SET_PIN_TRIG:
      *Odr = 0.0f;
 80010a0:	683b      	ldr	r3, [r7, #0]
 80010a2:	f04f 0200 	mov.w	r2, #0
 80010a6:	601a      	str	r2, [r3, #0]
      break;
 80010a8:	e153      	b.n	8001352 <LIS2DW12_ACC_GetOutputDataRate+0x3d2>

    case LIS2DW12_XL_ODR_1Hz6_LP_ONLY:
      switch (mode)
 80010aa:	7abb      	ldrb	r3, [r7, #10]
 80010ac:	2b1b      	cmp	r3, #27
 80010ae:	d843      	bhi.n	8001138 <LIS2DW12_ACC_GetOutputDataRate+0x1b8>
 80010b0:	a201      	add	r2, pc, #4	; (adr r2, 80010b8 <LIS2DW12_ACC_GetOutputDataRate+0x138>)
 80010b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80010b6:	bf00      	nop
 80010b8:	08001131 	.word	0x08001131
 80010bc:	08001131 	.word	0x08001131
 80010c0:	08001131 	.word	0x08001131
 80010c4:	08001131 	.word	0x08001131
 80010c8:	08001129 	.word	0x08001129
 80010cc:	08001139 	.word	0x08001139
 80010d0:	08001139 	.word	0x08001139
 80010d4:	08001139 	.word	0x08001139
 80010d8:	08001131 	.word	0x08001131
 80010dc:	08001131 	.word	0x08001131
 80010e0:	08001131 	.word	0x08001131
 80010e4:	08001131 	.word	0x08001131
 80010e8:	08001139 	.word	0x08001139
 80010ec:	08001139 	.word	0x08001139
 80010f0:	08001139 	.word	0x08001139
 80010f4:	08001139 	.word	0x08001139
 80010f8:	08001131 	.word	0x08001131
 80010fc:	08001131 	.word	0x08001131
 8001100:	08001131 	.word	0x08001131
 8001104:	08001131 	.word	0x08001131
 8001108:	08001129 	.word	0x08001129
 800110c:	08001139 	.word	0x08001139
 8001110:	08001139 	.word	0x08001139
 8001114:	08001139 	.word	0x08001139
 8001118:	08001131 	.word	0x08001131
 800111c:	08001131 	.word	0x08001131
 8001120:	08001131 	.word	0x08001131
 8001124:	08001131 	.word	0x08001131
      {
        case LIS2DW12_HIGH_PERFORMANCE:
        case LIS2DW12_HIGH_PERFORMANCE_LOW_NOISE:
          *Odr = 12.5f;
 8001128:	683b      	ldr	r3, [r7, #0]
 800112a:	4a8c      	ldr	r2, [pc, #560]	; (800135c <LIS2DW12_ACC_GetOutputDataRate+0x3dc>)
 800112c:	601a      	str	r2, [r3, #0]
          break;
 800112e:	e00a      	b.n	8001146 <LIS2DW12_ACC_GetOutputDataRate+0x1c6>
        case LIS2DW12_CONT_LOW_PWR_LOW_NOISE_12bit:
        case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_4:
        case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_3:
        case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_2:
        case LIS2DW12_SINGLE_LOW_LOW_NOISE_PWR_12bit:
          *Odr = 1.6f;
 8001130:	683b      	ldr	r3, [r7, #0]
 8001132:	4a8b      	ldr	r2, [pc, #556]	; (8001360 <LIS2DW12_ACC_GetOutputDataRate+0x3e0>)
 8001134:	601a      	str	r2, [r3, #0]
          break;
 8001136:	e006      	b.n	8001146 <LIS2DW12_ACC_GetOutputDataRate+0x1c6>

        default:
          *Odr = -1.0f;
 8001138:	683b      	ldr	r3, [r7, #0]
 800113a:	4a8a      	ldr	r2, [pc, #552]	; (8001364 <LIS2DW12_ACC_GetOutputDataRate+0x3e4>)
 800113c:	601a      	str	r2, [r3, #0]
          ret = LIS2DW12_ERROR;
 800113e:	f04f 33ff 	mov.w	r3, #4294967295
 8001142:	60fb      	str	r3, [r7, #12]
          break;
 8001144:	bf00      	nop
      }
      break;
 8001146:	e104      	b.n	8001352 <LIS2DW12_ACC_GetOutputDataRate+0x3d2>

    case LIS2DW12_XL_ODR_12Hz5:
      *Odr = 12.5f;
 8001148:	683b      	ldr	r3, [r7, #0]
 800114a:	4a84      	ldr	r2, [pc, #528]	; (800135c <LIS2DW12_ACC_GetOutputDataRate+0x3dc>)
 800114c:	601a      	str	r2, [r3, #0]
      break;
 800114e:	e100      	b.n	8001352 <LIS2DW12_ACC_GetOutputDataRate+0x3d2>

    case LIS2DW12_XL_ODR_25Hz:
      *Odr = 25.0f;
 8001150:	683b      	ldr	r3, [r7, #0]
 8001152:	4a85      	ldr	r2, [pc, #532]	; (8001368 <LIS2DW12_ACC_GetOutputDataRate+0x3e8>)
 8001154:	601a      	str	r2, [r3, #0]
      break;
 8001156:	e0fc      	b.n	8001352 <LIS2DW12_ACC_GetOutputDataRate+0x3d2>

    case LIS2DW12_XL_ODR_50Hz:
      *Odr = 50.0f;
 8001158:	683b      	ldr	r3, [r7, #0]
 800115a:	4a84      	ldr	r2, [pc, #528]	; (800136c <LIS2DW12_ACC_GetOutputDataRate+0x3ec>)
 800115c:	601a      	str	r2, [r3, #0]
      break;
 800115e:	e0f8      	b.n	8001352 <LIS2DW12_ACC_GetOutputDataRate+0x3d2>

    case LIS2DW12_XL_ODR_100Hz:
      *Odr = 100.0f;
 8001160:	683b      	ldr	r3, [r7, #0]
 8001162:	4a83      	ldr	r2, [pc, #524]	; (8001370 <LIS2DW12_ACC_GetOutputDataRate+0x3f0>)
 8001164:	601a      	str	r2, [r3, #0]
      break;
 8001166:	e0f4      	b.n	8001352 <LIS2DW12_ACC_GetOutputDataRate+0x3d2>

    case LIS2DW12_XL_ODR_200Hz:
      *Odr = 200.0f;
 8001168:	683b      	ldr	r3, [r7, #0]
 800116a:	4a82      	ldr	r2, [pc, #520]	; (8001374 <LIS2DW12_ACC_GetOutputDataRate+0x3f4>)
 800116c:	601a      	str	r2, [r3, #0]
      break;
 800116e:	e0f0      	b.n	8001352 <LIS2DW12_ACC_GetOutputDataRate+0x3d2>

    case LIS2DW12_XL_ODR_400Hz:
      switch (mode)
 8001170:	7abb      	ldrb	r3, [r7, #10]
 8001172:	2b1b      	cmp	r3, #27
 8001174:	d842      	bhi.n	80011fc <LIS2DW12_ACC_GetOutputDataRate+0x27c>
 8001176:	a201      	add	r2, pc, #4	; (adr r2, 800117c <LIS2DW12_ACC_GetOutputDataRate+0x1fc>)
 8001178:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800117c:	080011f5 	.word	0x080011f5
 8001180:	080011f5 	.word	0x080011f5
 8001184:	080011f5 	.word	0x080011f5
 8001188:	080011f5 	.word	0x080011f5
 800118c:	080011ed 	.word	0x080011ed
 8001190:	080011fd 	.word	0x080011fd
 8001194:	080011fd 	.word	0x080011fd
 8001198:	080011fd 	.word	0x080011fd
 800119c:	080011f5 	.word	0x080011f5
 80011a0:	080011f5 	.word	0x080011f5
 80011a4:	080011f5 	.word	0x080011f5
 80011a8:	080011f5 	.word	0x080011f5
 80011ac:	080011fd 	.word	0x080011fd
 80011b0:	080011fd 	.word	0x080011fd
 80011b4:	080011fd 	.word	0x080011fd
 80011b8:	080011fd 	.word	0x080011fd
 80011bc:	080011f5 	.word	0x080011f5
 80011c0:	080011f5 	.word	0x080011f5
 80011c4:	080011f5 	.word	0x080011f5
 80011c8:	080011f5 	.word	0x080011f5
 80011cc:	080011ed 	.word	0x080011ed
 80011d0:	080011fd 	.word	0x080011fd
 80011d4:	080011fd 	.word	0x080011fd
 80011d8:	080011fd 	.word	0x080011fd
 80011dc:	080011f5 	.word	0x080011f5
 80011e0:	080011f5 	.word	0x080011f5
 80011e4:	080011f5 	.word	0x080011f5
 80011e8:	080011f5 	.word	0x080011f5
      {
        case LIS2DW12_HIGH_PERFORMANCE:
        case LIS2DW12_HIGH_PERFORMANCE_LOW_NOISE:
          *Odr = 400.0f;
 80011ec:	683b      	ldr	r3, [r7, #0]
 80011ee:	4a62      	ldr	r2, [pc, #392]	; (8001378 <LIS2DW12_ACC_GetOutputDataRate+0x3f8>)
 80011f0:	601a      	str	r2, [r3, #0]
          break;
 80011f2:	e00a      	b.n	800120a <LIS2DW12_ACC_GetOutputDataRate+0x28a>
        case LIS2DW12_CONT_LOW_PWR_LOW_NOISE_12bit:
        case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_4:
        case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_3:
        case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_2:
        case LIS2DW12_SINGLE_LOW_LOW_NOISE_PWR_12bit:
          *Odr = 200.0f;
 80011f4:	683b      	ldr	r3, [r7, #0]
 80011f6:	4a5f      	ldr	r2, [pc, #380]	; (8001374 <LIS2DW12_ACC_GetOutputDataRate+0x3f4>)
 80011f8:	601a      	str	r2, [r3, #0]
          break;
 80011fa:	e006      	b.n	800120a <LIS2DW12_ACC_GetOutputDataRate+0x28a>

        default:
          *Odr = -1.0f;
 80011fc:	683b      	ldr	r3, [r7, #0]
 80011fe:	4a59      	ldr	r2, [pc, #356]	; (8001364 <LIS2DW12_ACC_GetOutputDataRate+0x3e4>)
 8001200:	601a      	str	r2, [r3, #0]
          ret = LIS2DW12_ERROR;
 8001202:	f04f 33ff 	mov.w	r3, #4294967295
 8001206:	60fb      	str	r3, [r7, #12]
          break;
 8001208:	bf00      	nop
      }
      break;
 800120a:	e0a2      	b.n	8001352 <LIS2DW12_ACC_GetOutputDataRate+0x3d2>

    case LIS2DW12_XL_ODR_800Hz:
      switch (mode)
 800120c:	7abb      	ldrb	r3, [r7, #10]
 800120e:	2b1b      	cmp	r3, #27
 8001210:	d842      	bhi.n	8001298 <LIS2DW12_ACC_GetOutputDataRate+0x318>
 8001212:	a201      	add	r2, pc, #4	; (adr r2, 8001218 <LIS2DW12_ACC_GetOutputDataRate+0x298>)
 8001214:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001218:	08001291 	.word	0x08001291
 800121c:	08001291 	.word	0x08001291
 8001220:	08001291 	.word	0x08001291
 8001224:	08001291 	.word	0x08001291
 8001228:	08001289 	.word	0x08001289
 800122c:	08001299 	.word	0x08001299
 8001230:	08001299 	.word	0x08001299
 8001234:	08001299 	.word	0x08001299
 8001238:	08001291 	.word	0x08001291
 800123c:	08001291 	.word	0x08001291
 8001240:	08001291 	.word	0x08001291
 8001244:	08001291 	.word	0x08001291
 8001248:	08001299 	.word	0x08001299
 800124c:	08001299 	.word	0x08001299
 8001250:	08001299 	.word	0x08001299
 8001254:	08001299 	.word	0x08001299
 8001258:	08001291 	.word	0x08001291
 800125c:	08001291 	.word	0x08001291
 8001260:	08001291 	.word	0x08001291
 8001264:	08001291 	.word	0x08001291
 8001268:	08001289 	.word	0x08001289
 800126c:	08001299 	.word	0x08001299
 8001270:	08001299 	.word	0x08001299
 8001274:	08001299 	.word	0x08001299
 8001278:	08001291 	.word	0x08001291
 800127c:	08001291 	.word	0x08001291
 8001280:	08001291 	.word	0x08001291
 8001284:	08001291 	.word	0x08001291
      {
        case LIS2DW12_HIGH_PERFORMANCE:
        case LIS2DW12_HIGH_PERFORMANCE_LOW_NOISE:
          *Odr = 800.0f;
 8001288:	683b      	ldr	r3, [r7, #0]
 800128a:	4a3c      	ldr	r2, [pc, #240]	; (800137c <LIS2DW12_ACC_GetOutputDataRate+0x3fc>)
 800128c:	601a      	str	r2, [r3, #0]
          break;
 800128e:	e00a      	b.n	80012a6 <LIS2DW12_ACC_GetOutputDataRate+0x326>
        case LIS2DW12_CONT_LOW_PWR_LOW_NOISE_12bit:
        case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_4:
        case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_3:
        case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_2:
        case LIS2DW12_SINGLE_LOW_LOW_NOISE_PWR_12bit:
          *Odr = 200.0f;
 8001290:	683b      	ldr	r3, [r7, #0]
 8001292:	4a38      	ldr	r2, [pc, #224]	; (8001374 <LIS2DW12_ACC_GetOutputDataRate+0x3f4>)
 8001294:	601a      	str	r2, [r3, #0]
          break;
 8001296:	e006      	b.n	80012a6 <LIS2DW12_ACC_GetOutputDataRate+0x326>

        default:
          *Odr = -1.0f;
 8001298:	683b      	ldr	r3, [r7, #0]
 800129a:	4a32      	ldr	r2, [pc, #200]	; (8001364 <LIS2DW12_ACC_GetOutputDataRate+0x3e4>)
 800129c:	601a      	str	r2, [r3, #0]
          ret = LIS2DW12_ERROR;
 800129e:	f04f 33ff 	mov.w	r3, #4294967295
 80012a2:	60fb      	str	r3, [r7, #12]
          break;
 80012a4:	bf00      	nop
      }
      break;
 80012a6:	e054      	b.n	8001352 <LIS2DW12_ACC_GetOutputDataRate+0x3d2>

    case LIS2DW12_XL_ODR_1k6Hz:
      switch (mode)
 80012a8:	7abb      	ldrb	r3, [r7, #10]
 80012aa:	2b1b      	cmp	r3, #27
 80012ac:	d842      	bhi.n	8001334 <LIS2DW12_ACC_GetOutputDataRate+0x3b4>
 80012ae:	a201      	add	r2, pc, #4	; (adr r2, 80012b4 <LIS2DW12_ACC_GetOutputDataRate+0x334>)
 80012b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80012b4:	0800132d 	.word	0x0800132d
 80012b8:	0800132d 	.word	0x0800132d
 80012bc:	0800132d 	.word	0x0800132d
 80012c0:	0800132d 	.word	0x0800132d
 80012c4:	08001325 	.word	0x08001325
 80012c8:	08001335 	.word	0x08001335
 80012cc:	08001335 	.word	0x08001335
 80012d0:	08001335 	.word	0x08001335
 80012d4:	0800132d 	.word	0x0800132d
 80012d8:	0800132d 	.word	0x0800132d
 80012dc:	0800132d 	.word	0x0800132d
 80012e0:	0800132d 	.word	0x0800132d
 80012e4:	08001335 	.word	0x08001335
 80012e8:	08001335 	.word	0x08001335
 80012ec:	08001335 	.word	0x08001335
 80012f0:	08001335 	.word	0x08001335
 80012f4:	0800132d 	.word	0x0800132d
 80012f8:	0800132d 	.word	0x0800132d
 80012fc:	0800132d 	.word	0x0800132d
 8001300:	0800132d 	.word	0x0800132d
 8001304:	08001325 	.word	0x08001325
 8001308:	08001335 	.word	0x08001335
 800130c:	08001335 	.word	0x08001335
 8001310:	08001335 	.word	0x08001335
 8001314:	0800132d 	.word	0x0800132d
 8001318:	0800132d 	.word	0x0800132d
 800131c:	0800132d 	.word	0x0800132d
 8001320:	0800132d 	.word	0x0800132d
      {
        case LIS2DW12_HIGH_PERFORMANCE:
        case LIS2DW12_HIGH_PERFORMANCE_LOW_NOISE:
          *Odr = 1600.0f;
 8001324:	683b      	ldr	r3, [r7, #0]
 8001326:	4a16      	ldr	r2, [pc, #88]	; (8001380 <LIS2DW12_ACC_GetOutputDataRate+0x400>)
 8001328:	601a      	str	r2, [r3, #0]
          break;
 800132a:	e00a      	b.n	8001342 <LIS2DW12_ACC_GetOutputDataRate+0x3c2>
        case LIS2DW12_CONT_LOW_PWR_LOW_NOISE_12bit:
        case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_4:
        case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_3:
        case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_2:
        case LIS2DW12_SINGLE_LOW_LOW_NOISE_PWR_12bit:
          *Odr = 200.0f;
 800132c:	683b      	ldr	r3, [r7, #0]
 800132e:	4a11      	ldr	r2, [pc, #68]	; (8001374 <LIS2DW12_ACC_GetOutputDataRate+0x3f4>)
 8001330:	601a      	str	r2, [r3, #0]
          break;
 8001332:	e006      	b.n	8001342 <LIS2DW12_ACC_GetOutputDataRate+0x3c2>

        default:
          *Odr = -1.0f;
 8001334:	683b      	ldr	r3, [r7, #0]
 8001336:	4a0b      	ldr	r2, [pc, #44]	; (8001364 <LIS2DW12_ACC_GetOutputDataRate+0x3e4>)
 8001338:	601a      	str	r2, [r3, #0]
          ret = LIS2DW12_ERROR;
 800133a:	f04f 33ff 	mov.w	r3, #4294967295
 800133e:	60fb      	str	r3, [r7, #12]
          break;
 8001340:	bf00      	nop
      }
      break;
 8001342:	e006      	b.n	8001352 <LIS2DW12_ACC_GetOutputDataRate+0x3d2>

    default:
      *Odr = -1.0f;
 8001344:	683b      	ldr	r3, [r7, #0]
 8001346:	4a07      	ldr	r2, [pc, #28]	; (8001364 <LIS2DW12_ACC_GetOutputDataRate+0x3e4>)
 8001348:	601a      	str	r2, [r3, #0]
      ret = LIS2DW12_ERROR;
 800134a:	f04f 33ff 	mov.w	r3, #4294967295
 800134e:	60fb      	str	r3, [r7, #12]
      break;
 8001350:	bf00      	nop
  }

  return ret;
 8001352:	68fb      	ldr	r3, [r7, #12]
}
 8001354:	4618      	mov	r0, r3
 8001356:	3710      	adds	r7, #16
 8001358:	46bd      	mov	sp, r7
 800135a:	bd80      	pop	{r7, pc}
 800135c:	41480000 	.word	0x41480000
 8001360:	3fcccccd 	.word	0x3fcccccd
 8001364:	bf800000 	.word	0xbf800000
 8001368:	41c80000 	.word	0x41c80000
 800136c:	42480000 	.word	0x42480000
 8001370:	42c80000 	.word	0x42c80000
 8001374:	43480000 	.word	0x43480000
 8001378:	43c80000 	.word	0x43c80000
 800137c:	44480000 	.word	0x44480000
 8001380:	44c80000 	.word	0x44c80000

08001384 <LIS2DW12_ACC_SetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DW12_ACC_SetOutputDataRate(LIS2DW12_Object_t *pObj, float Odr)
{
 8001384:	b580      	push	{r7, lr}
 8001386:	b082      	sub	sp, #8
 8001388:	af00      	add	r7, sp, #0
 800138a:	6078      	str	r0, [r7, #4]
 800138c:	ed87 0a00 	vstr	s0, [r7]
  /* By default we use High Performance mode and Low Noise disabled */
  return LIS2DW12_ACC_SetOutputDataRate_With_Mode(pObj, Odr, LIS2DW12_HIGH_PERFORMANCE_MODE, LIS2DW12_LOW_NOISE_DISABLE);
 8001390:	2200      	movs	r2, #0
 8001392:	2100      	movs	r1, #0
 8001394:	ed97 0a00 	vldr	s0, [r7]
 8001398:	6878      	ldr	r0, [r7, #4]
 800139a:	f000 f805 	bl	80013a8 <LIS2DW12_ACC_SetOutputDataRate_With_Mode>
 800139e:	4603      	mov	r3, r0
}
 80013a0:	4618      	mov	r0, r3
 80013a2:	3708      	adds	r7, #8
 80013a4:	46bd      	mov	sp, r7
 80013a6:	bd80      	pop	{r7, pc}

080013a8 <LIS2DW12_ACC_SetOutputDataRate_With_Mode>:
  * @param  Noise the low noise option
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DW12_ACC_SetOutputDataRate_With_Mode(LIS2DW12_Object_t *pObj, float Odr, LIS2DW12_Operating_Mode_t Mode,
                                                 LIS2DW12_Low_Noise_t Noise)
{
 80013a8:	b580      	push	{r7, lr}
 80013aa:	b084      	sub	sp, #16
 80013ac:	af00      	add	r7, sp, #0
 80013ae:	60f8      	str	r0, [r7, #12]
 80013b0:	ed87 0a02 	vstr	s0, [r7, #8]
 80013b4:	460b      	mov	r3, r1
 80013b6:	71fb      	strb	r3, [r7, #7]
 80013b8:	4613      	mov	r3, r2
 80013ba:	71bb      	strb	r3, [r7, #6]
  /* Check if the component is enabled */
  if (pObj->acc_is_enabled == 1U)
 80013bc:	68fb      	ldr	r3, [r7, #12]
 80013be:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80013c2:	2b01      	cmp	r3, #1
 80013c4:	d109      	bne.n	80013da <LIS2DW12_ACC_SetOutputDataRate_With_Mode+0x32>
  {
    return LIS2DW12_ACC_SetOutputDataRate_When_Enabled(pObj, Odr, Mode, Noise);
 80013c6:	79ba      	ldrb	r2, [r7, #6]
 80013c8:	79fb      	ldrb	r3, [r7, #7]
 80013ca:	4619      	mov	r1, r3
 80013cc:	ed97 0a02 	vldr	s0, [r7, #8]
 80013d0:	68f8      	ldr	r0, [r7, #12]
 80013d2:	f000 f98d 	bl	80016f0 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled>
 80013d6:	4603      	mov	r3, r0
 80013d8:	e008      	b.n	80013ec <LIS2DW12_ACC_SetOutputDataRate_With_Mode+0x44>
  }
  else
  {
    return LIS2DW12_ACC_SetOutputDataRate_When_Disabled(pObj, Odr, Mode, Noise);
 80013da:	79ba      	ldrb	r2, [r7, #6]
 80013dc:	79fb      	ldrb	r3, [r7, #7]
 80013de:	4619      	mov	r1, r3
 80013e0:	ed97 0a02 	vldr	s0, [r7, #8]
 80013e4:	68f8      	ldr	r0, [r7, #12]
 80013e6:	f000 fa9f 	bl	8001928 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled>
 80013ea:	4603      	mov	r3, r0
  }
}
 80013ec:	4618      	mov	r0, r3
 80013ee:	3710      	adds	r7, #16
 80013f0:	46bd      	mov	sp, r7
 80013f2:	bd80      	pop	{r7, pc}

080013f4 <LIS2DW12_ACC_GetFullScale>:
  * @param  pObj the device pObj
  * @param  FullScale pointer where the full scale is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DW12_ACC_GetFullScale(LIS2DW12_Object_t *pObj, int32_t *FullScale)
{
 80013f4:	b580      	push	{r7, lr}
 80013f6:	b084      	sub	sp, #16
 80013f8:	af00      	add	r7, sp, #0
 80013fa:	6078      	str	r0, [r7, #4]
 80013fc:	6039      	str	r1, [r7, #0]
  int32_t ret = LIS2DW12_OK;
 80013fe:	2300      	movs	r3, #0
 8001400:	60fb      	str	r3, [r7, #12]
  lis2dw12_fs_t fs_low_level;

  /* Read actual full scale selection from sensor. */
  if (lis2dw12_full_scale_get(&(pObj->Ctx), &fs_low_level) != LIS2DW12_OK)
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	3320      	adds	r3, #32
 8001406:	f107 020b 	add.w	r2, r7, #11
 800140a:	4611      	mov	r1, r2
 800140c:	4618      	mov	r0, r3
 800140e:	f000 fde7 	bl	8001fe0 <lis2dw12_full_scale_get>
 8001412:	4603      	mov	r3, r0
 8001414:	2b00      	cmp	r3, #0
 8001416:	d002      	beq.n	800141e <LIS2DW12_ACC_GetFullScale+0x2a>
  {
    return LIS2DW12_ERROR;
 8001418:	f04f 33ff 	mov.w	r3, #4294967295
 800141c:	e027      	b.n	800146e <LIS2DW12_ACC_GetFullScale+0x7a>
  }

  switch (fs_low_level)
 800141e:	7afb      	ldrb	r3, [r7, #11]
 8001420:	2b03      	cmp	r3, #3
 8001422:	d81b      	bhi.n	800145c <LIS2DW12_ACC_GetFullScale+0x68>
 8001424:	a201      	add	r2, pc, #4	; (adr r2, 800142c <LIS2DW12_ACC_GetFullScale+0x38>)
 8001426:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800142a:	bf00      	nop
 800142c:	0800143d 	.word	0x0800143d
 8001430:	08001445 	.word	0x08001445
 8001434:	0800144d 	.word	0x0800144d
 8001438:	08001455 	.word	0x08001455
  {
    case LIS2DW12_2g:
      *FullScale =  2;
 800143c:	683b      	ldr	r3, [r7, #0]
 800143e:	2202      	movs	r2, #2
 8001440:	601a      	str	r2, [r3, #0]
      break;
 8001442:	e013      	b.n	800146c <LIS2DW12_ACC_GetFullScale+0x78>

    case LIS2DW12_4g:
      *FullScale =  4;
 8001444:	683b      	ldr	r3, [r7, #0]
 8001446:	2204      	movs	r2, #4
 8001448:	601a      	str	r2, [r3, #0]
      break;
 800144a:	e00f      	b.n	800146c <LIS2DW12_ACC_GetFullScale+0x78>

    case LIS2DW12_8g:
      *FullScale =  8;
 800144c:	683b      	ldr	r3, [r7, #0]
 800144e:	2208      	movs	r2, #8
 8001450:	601a      	str	r2, [r3, #0]
      break;
 8001452:	e00b      	b.n	800146c <LIS2DW12_ACC_GetFullScale+0x78>

    case LIS2DW12_16g:
      *FullScale = 16;
 8001454:	683b      	ldr	r3, [r7, #0]
 8001456:	2210      	movs	r2, #16
 8001458:	601a      	str	r2, [r3, #0]
      break;
 800145a:	e007      	b.n	800146c <LIS2DW12_ACC_GetFullScale+0x78>

    default:
      *FullScale = -1;
 800145c:	683b      	ldr	r3, [r7, #0]
 800145e:	f04f 32ff 	mov.w	r2, #4294967295
 8001462:	601a      	str	r2, [r3, #0]
      ret = LIS2DW12_ERROR;
 8001464:	f04f 33ff 	mov.w	r3, #4294967295
 8001468:	60fb      	str	r3, [r7, #12]
      break;
 800146a:	bf00      	nop
  }

  return ret;
 800146c:	68fb      	ldr	r3, [r7, #12]
}
 800146e:	4618      	mov	r0, r3
 8001470:	3710      	adds	r7, #16
 8001472:	46bd      	mov	sp, r7
 8001474:	bd80      	pop	{r7, pc}
 8001476:	bf00      	nop

08001478 <LIS2DW12_ACC_SetFullScale>:
  * @param  pObj the device pObj
  * @param  FullScale the functional full scale to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DW12_ACC_SetFullScale(LIS2DW12_Object_t *pObj, int32_t FullScale)
{
 8001478:	b580      	push	{r7, lr}
 800147a:	b084      	sub	sp, #16
 800147c:	af00      	add	r7, sp, #0
 800147e:	6078      	str	r0, [r7, #4]
 8001480:	6039      	str	r1, [r7, #0]
  lis2dw12_fs_t new_fs;

  /* Seems like MISRA C-2012 rule 14.3a violation but only from single file statical analysis point of view because
     the parameter passed to the function is not known at the moment of analysis */
  new_fs = (FullScale <= 2) ? LIS2DW12_2g
           : (FullScale <= 4) ? LIS2DW12_4g
 8001482:	683b      	ldr	r3, [r7, #0]
 8001484:	2b02      	cmp	r3, #2
 8001486:	dd0b      	ble.n	80014a0 <LIS2DW12_ACC_SetFullScale+0x28>
 8001488:	683b      	ldr	r3, [r7, #0]
 800148a:	2b04      	cmp	r3, #4
 800148c:	dd06      	ble.n	800149c <LIS2DW12_ACC_SetFullScale+0x24>
 800148e:	683b      	ldr	r3, [r7, #0]
 8001490:	2b08      	cmp	r3, #8
 8001492:	dc01      	bgt.n	8001498 <LIS2DW12_ACC_SetFullScale+0x20>
 8001494:	2302      	movs	r3, #2
 8001496:	e004      	b.n	80014a2 <LIS2DW12_ACC_SetFullScale+0x2a>
 8001498:	2303      	movs	r3, #3
 800149a:	e002      	b.n	80014a2 <LIS2DW12_ACC_SetFullScale+0x2a>
 800149c:	2301      	movs	r3, #1
 800149e:	e000      	b.n	80014a2 <LIS2DW12_ACC_SetFullScale+0x2a>
 80014a0:	2300      	movs	r3, #0
  new_fs = (FullScale <= 2) ? LIS2DW12_2g
 80014a2:	73fb      	strb	r3, [r7, #15]
           : (FullScale <= 8) ? LIS2DW12_8g
           :                    LIS2DW12_16g;

  if (lis2dw12_full_scale_set(&(pObj->Ctx), new_fs) != LIS2DW12_OK)
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	3320      	adds	r3, #32
 80014a8:	7bfa      	ldrb	r2, [r7, #15]
 80014aa:	4611      	mov	r1, r2
 80014ac:	4618      	mov	r0, r3
 80014ae:	f000 fd71 	bl	8001f94 <lis2dw12_full_scale_set>
 80014b2:	4603      	mov	r3, r0
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	d002      	beq.n	80014be <LIS2DW12_ACC_SetFullScale+0x46>
  {
    return LIS2DW12_ERROR;
 80014b8:	f04f 33ff 	mov.w	r3, #4294967295
 80014bc:	e000      	b.n	80014c0 <LIS2DW12_ACC_SetFullScale+0x48>
  }

  return LIS2DW12_OK;
 80014be:	2300      	movs	r3, #0
}
 80014c0:	4618      	mov	r0, r3
 80014c2:	3710      	adds	r7, #16
 80014c4:	46bd      	mov	sp, r7
 80014c6:	bd80      	pop	{r7, pc}

080014c8 <LIS2DW12_ACC_GetAxesRaw>:
  * @param  pObj the device pObj
  * @param  Value pointer where the raw values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DW12_ACC_GetAxesRaw(LIS2DW12_Object_t *pObj, LIS2DW12_AxesRaw_t *Value)
{
 80014c8:	b580      	push	{r7, lr}
 80014ca:	b086      	sub	sp, #24
 80014cc:	af00      	add	r7, sp, #0
 80014ce:	6078      	str	r0, [r7, #4]
 80014d0:	6039      	str	r1, [r7, #0]
  lis2dw12_axis3bit16_t data_raw;
  lis2dw12_mode_t mode;
  int32_t ret = LIS2DW12_OK;
 80014d2:	2300      	movs	r3, #0
 80014d4:	617b      	str	r3, [r7, #20]

  /* Read actual power mode selection from sensor. */
  if (lis2dw12_power_mode_get(&(pObj->Ctx), &mode) != LIS2DW12_OK)
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	3320      	adds	r3, #32
 80014da:	f107 020b 	add.w	r2, r7, #11
 80014de:	4611      	mov	r1, r2
 80014e0:	4618      	mov	r0, r3
 80014e2:	f000 fb67 	bl	8001bb4 <lis2dw12_power_mode_get>
 80014e6:	4603      	mov	r3, r0
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d002      	beq.n	80014f2 <LIS2DW12_ACC_GetAxesRaw+0x2a>
  {
    return LIS2DW12_ERROR;
 80014ec:	f04f 33ff 	mov.w	r3, #4294967295
 80014f0:	e089      	b.n	8001606 <LIS2DW12_ACC_GetAxesRaw+0x13e>
  }

  /* Read raw data values. */
  if (lis2dw12_acceleration_raw_get(&(pObj->Ctx), data_raw.i16bit) != LIS2DW12_OK)
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	3320      	adds	r3, #32
 80014f6:	f107 020c 	add.w	r2, r7, #12
 80014fa:	4611      	mov	r1, r2
 80014fc:	4618      	mov	r0, r3
 80014fe:	f000 fda7 	bl	8002050 <lis2dw12_acceleration_raw_get>
 8001502:	4603      	mov	r3, r0
 8001504:	2b00      	cmp	r3, #0
 8001506:	d002      	beq.n	800150e <LIS2DW12_ACC_GetAxesRaw+0x46>
  {
    return LIS2DW12_ERROR;
 8001508:	f04f 33ff 	mov.w	r3, #4294967295
 800150c:	e07b      	b.n	8001606 <LIS2DW12_ACC_GetAxesRaw+0x13e>
  }

  switch (mode)
 800150e:	7afb      	ldrb	r3, [r7, #11]
 8001510:	2b1b      	cmp	r3, #27
 8001512:	d873      	bhi.n	80015fc <LIS2DW12_ACC_GetAxesRaw+0x134>
 8001514:	a201      	add	r2, pc, #4	; (adr r2, 800151c <LIS2DW12_ACC_GetAxesRaw+0x54>)
 8001516:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800151a:	bf00      	nop
 800151c:	0800158d 	.word	0x0800158d
 8001520:	080015c5 	.word	0x080015c5
 8001524:	080015c5 	.word	0x080015c5
 8001528:	080015c5 	.word	0x080015c5
 800152c:	080015c5 	.word	0x080015c5
 8001530:	080015fd 	.word	0x080015fd
 8001534:	080015fd 	.word	0x080015fd
 8001538:	080015fd 	.word	0x080015fd
 800153c:	0800158d 	.word	0x0800158d
 8001540:	080015c5 	.word	0x080015c5
 8001544:	080015c5 	.word	0x080015c5
 8001548:	080015c5 	.word	0x080015c5
 800154c:	080015fd 	.word	0x080015fd
 8001550:	080015fd 	.word	0x080015fd
 8001554:	080015fd 	.word	0x080015fd
 8001558:	080015fd 	.word	0x080015fd
 800155c:	0800158d 	.word	0x0800158d
 8001560:	080015c5 	.word	0x080015c5
 8001564:	080015c5 	.word	0x080015c5
 8001568:	080015c5 	.word	0x080015c5
 800156c:	080015c5 	.word	0x080015c5
 8001570:	080015fd 	.word	0x080015fd
 8001574:	080015fd 	.word	0x080015fd
 8001578:	080015fd 	.word	0x080015fd
 800157c:	0800158d 	.word	0x0800158d
 8001580:	080015c5 	.word	0x080015c5
 8001584:	080015c5 	.word	0x080015c5
 8001588:	080015c5 	.word	0x080015c5
    case LIS2DW12_CONT_LOW_PWR_12bit:
    case LIS2DW12_SINGLE_LOW_PWR_12bit:
    case LIS2DW12_CONT_LOW_PWR_LOW_NOISE_12bit:
    case LIS2DW12_SINGLE_LOW_LOW_NOISE_PWR_12bit:
      /* Data format 12 bits. */
      Value->x = (data_raw.i16bit[0] / 16);
 800158c:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8001590:	2b00      	cmp	r3, #0
 8001592:	da00      	bge.n	8001596 <LIS2DW12_ACC_GetAxesRaw+0xce>
 8001594:	330f      	adds	r3, #15
 8001596:	111b      	asrs	r3, r3, #4
 8001598:	b21a      	sxth	r2, r3
 800159a:	683b      	ldr	r3, [r7, #0]
 800159c:	801a      	strh	r2, [r3, #0]
      Value->y = (data_raw.i16bit[1] / 16);
 800159e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	da00      	bge.n	80015a8 <LIS2DW12_ACC_GetAxesRaw+0xe0>
 80015a6:	330f      	adds	r3, #15
 80015a8:	111b      	asrs	r3, r3, #4
 80015aa:	b21a      	sxth	r2, r3
 80015ac:	683b      	ldr	r3, [r7, #0]
 80015ae:	805a      	strh	r2, [r3, #2]
      Value->z = (data_raw.i16bit[2] / 16);
 80015b0:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	da00      	bge.n	80015ba <LIS2DW12_ACC_GetAxesRaw+0xf2>
 80015b8:	330f      	adds	r3, #15
 80015ba:	111b      	asrs	r3, r3, #4
 80015bc:	b21a      	sxth	r2, r3
 80015be:	683b      	ldr	r3, [r7, #0]
 80015c0:	809a      	strh	r2, [r3, #4]
      break;
 80015c2:	e01f      	b.n	8001604 <LIS2DW12_ACC_GetAxesRaw+0x13c>
    case LIS2DW12_CONT_LOW_PWR_LOW_NOISE_2:
    case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_4:
    case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_3:
    case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_2:
      /* Data format 14 bits. */
      Value->x = (data_raw.i16bit[0] / 4);
 80015c4:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	da00      	bge.n	80015ce <LIS2DW12_ACC_GetAxesRaw+0x106>
 80015cc:	3303      	adds	r3, #3
 80015ce:	109b      	asrs	r3, r3, #2
 80015d0:	b21a      	sxth	r2, r3
 80015d2:	683b      	ldr	r3, [r7, #0]
 80015d4:	801a      	strh	r2, [r3, #0]
      Value->y = (data_raw.i16bit[1] / 4);
 80015d6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80015da:	2b00      	cmp	r3, #0
 80015dc:	da00      	bge.n	80015e0 <LIS2DW12_ACC_GetAxesRaw+0x118>
 80015de:	3303      	adds	r3, #3
 80015e0:	109b      	asrs	r3, r3, #2
 80015e2:	b21a      	sxth	r2, r3
 80015e4:	683b      	ldr	r3, [r7, #0]
 80015e6:	805a      	strh	r2, [r3, #2]
      Value->z = (data_raw.i16bit[2] / 4);
 80015e8:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	da00      	bge.n	80015f2 <LIS2DW12_ACC_GetAxesRaw+0x12a>
 80015f0:	3303      	adds	r3, #3
 80015f2:	109b      	asrs	r3, r3, #2
 80015f4:	b21a      	sxth	r2, r3
 80015f6:	683b      	ldr	r3, [r7, #0]
 80015f8:	809a      	strh	r2, [r3, #4]
      break;
 80015fa:	e003      	b.n	8001604 <LIS2DW12_ACC_GetAxesRaw+0x13c>

    default:
      ret = LIS2DW12_ERROR;
 80015fc:	f04f 33ff 	mov.w	r3, #4294967295
 8001600:	617b      	str	r3, [r7, #20]
      break;
 8001602:	bf00      	nop
  }

  return ret;
 8001604:	697b      	ldr	r3, [r7, #20]
}
 8001606:	4618      	mov	r0, r3
 8001608:	3718      	adds	r7, #24
 800160a:	46bd      	mov	sp, r7
 800160c:	bd80      	pop	{r7, pc}
 800160e:	bf00      	nop

08001610 <LIS2DW12_ACC_GetAxes>:
  * @param  pObj the device pObj
  * @param  Acceleration pointer where the values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DW12_ACC_GetAxes(LIS2DW12_Object_t *pObj, LIS2DW12_Axes_t *Acceleration)
{
 8001610:	b580      	push	{r7, lr}
 8001612:	b086      	sub	sp, #24
 8001614:	af00      	add	r7, sp, #0
 8001616:	6078      	str	r0, [r7, #4]
 8001618:	6039      	str	r1, [r7, #0]
  LIS2DW12_AxesRaw_t data_raw;
  float sensitivity = 0.0f;
 800161a:	f04f 0300 	mov.w	r3, #0
 800161e:	60fb      	str	r3, [r7, #12]

  /* Read raw data values. */
  if (LIS2DW12_ACC_GetAxesRaw(pObj, &data_raw) != LIS2DW12_OK)
 8001620:	f107 0310 	add.w	r3, r7, #16
 8001624:	4619      	mov	r1, r3
 8001626:	6878      	ldr	r0, [r7, #4]
 8001628:	f7ff ff4e 	bl	80014c8 <LIS2DW12_ACC_GetAxesRaw>
 800162c:	4603      	mov	r3, r0
 800162e:	2b00      	cmp	r3, #0
 8001630:	d002      	beq.n	8001638 <LIS2DW12_ACC_GetAxes+0x28>
  {
    return LIS2DW12_ERROR;
 8001632:	f04f 33ff 	mov.w	r3, #4294967295
 8001636:	e03c      	b.n	80016b2 <LIS2DW12_ACC_GetAxes+0xa2>
  }

  /* Get LIS2DW12 actual sensitivity. */
  if (LIS2DW12_ACC_GetSensitivity(pObj, &sensitivity) != LIS2DW12_OK)
 8001638:	f107 030c 	add.w	r3, r7, #12
 800163c:	4619      	mov	r1, r3
 800163e:	6878      	ldr	r0, [r7, #4]
 8001640:	f7ff fbd6 	bl	8000df0 <LIS2DW12_ACC_GetSensitivity>
 8001644:	4603      	mov	r3, r0
 8001646:	2b00      	cmp	r3, #0
 8001648:	d002      	beq.n	8001650 <LIS2DW12_ACC_GetAxes+0x40>
  {
    return LIS2DW12_ERROR;
 800164a:	f04f 33ff 	mov.w	r3, #4294967295
 800164e:	e030      	b.n	80016b2 <LIS2DW12_ACC_GetAxes+0xa2>
  }

  /* Calculate the data. */
  Acceleration->x = (int32_t)((float)((float)data_raw.x * sensitivity));
 8001650:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8001654:	ee07 3a90 	vmov	s15, r3
 8001658:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800165c:	edd7 7a03 	vldr	s15, [r7, #12]
 8001660:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001664:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001668:	ee17 2a90 	vmov	r2, s15
 800166c:	683b      	ldr	r3, [r7, #0]
 800166e:	601a      	str	r2, [r3, #0]
  Acceleration->y = (int32_t)((float)((float)data_raw.y * sensitivity));
 8001670:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8001674:	ee07 3a90 	vmov	s15, r3
 8001678:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800167c:	edd7 7a03 	vldr	s15, [r7, #12]
 8001680:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001684:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001688:	ee17 2a90 	vmov	r2, s15
 800168c:	683b      	ldr	r3, [r7, #0]
 800168e:	605a      	str	r2, [r3, #4]
  Acceleration->z = (int32_t)((float)((float)data_raw.z * sensitivity));
 8001690:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001694:	ee07 3a90 	vmov	s15, r3
 8001698:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800169c:	edd7 7a03 	vldr	s15, [r7, #12]
 80016a0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80016a4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80016a8:	ee17 2a90 	vmov	r2, s15
 80016ac:	683b      	ldr	r3, [r7, #0]
 80016ae:	609a      	str	r2, [r3, #8]

  return LIS2DW12_OK;
 80016b0:	2300      	movs	r3, #0
}
 80016b2:	4618      	mov	r0, r3
 80016b4:	3718      	adds	r7, #24
 80016b6:	46bd      	mov	sp, r7
 80016b8:	bd80      	pop	{r7, pc}

080016ba <LIS2DW12_Write_Reg>:
  * @param  Reg address to be written
  * @param  Data value to be written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DW12_Write_Reg(LIS2DW12_Object_t *pObj, uint8_t Reg, uint8_t Data)
{
 80016ba:	b580      	push	{r7, lr}
 80016bc:	b082      	sub	sp, #8
 80016be:	af00      	add	r7, sp, #0
 80016c0:	6078      	str	r0, [r7, #4]
 80016c2:	460b      	mov	r3, r1
 80016c4:	70fb      	strb	r3, [r7, #3]
 80016c6:	4613      	mov	r3, r2
 80016c8:	70bb      	strb	r3, [r7, #2]
  if (lis2dw12_write_reg(&(pObj->Ctx), Reg, &Data, 1) != LIS2DW12_OK)
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	f103 0020 	add.w	r0, r3, #32
 80016d0:	1cba      	adds	r2, r7, #2
 80016d2:	78f9      	ldrb	r1, [r7, #3]
 80016d4:	2301      	movs	r3, #1
 80016d6:	f000 fa07 	bl	8001ae8 <lis2dw12_write_reg>
 80016da:	4603      	mov	r3, r0
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d002      	beq.n	80016e6 <LIS2DW12_Write_Reg+0x2c>
  {
    return LIS2DW12_ERROR;
 80016e0:	f04f 33ff 	mov.w	r3, #4294967295
 80016e4:	e000      	b.n	80016e8 <LIS2DW12_Write_Reg+0x2e>
  }

  return LIS2DW12_OK;
 80016e6:	2300      	movs	r3, #0
}
 80016e8:	4618      	mov	r0, r3
 80016ea:	3708      	adds	r7, #8
 80016ec:	46bd      	mov	sp, r7
 80016ee:	bd80      	pop	{r7, pc}

080016f0 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled>:
  * @param  Noise the low noise option
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LIS2DW12_ACC_SetOutputDataRate_When_Enabled(LIS2DW12_Object_t *pObj, float Odr,
                                                           LIS2DW12_Operating_Mode_t Mode, LIS2DW12_Low_Noise_t Noise)
{
 80016f0:	b580      	push	{r7, lr}
 80016f2:	b086      	sub	sp, #24
 80016f4:	af00      	add	r7, sp, #0
 80016f6:	60f8      	str	r0, [r7, #12]
 80016f8:	ed87 0a02 	vstr	s0, [r7, #8]
 80016fc:	460b      	mov	r3, r1
 80016fe:	71fb      	strb	r3, [r7, #7]
 8001700:	4613      	mov	r3, r2
 8001702:	71bb      	strb	r3, [r7, #6]
  lis2dw12_odr_t new_odr;
  lis2dw12_mode_t new_power_mode;

  switch (Mode)
 8001704:	79fb      	ldrb	r3, [r7, #7]
 8001706:	3b01      	subs	r3, #1
 8001708:	2b03      	cmp	r3, #3
 800170a:	d80b      	bhi.n	8001724 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x34>
 800170c:	a201      	add	r2, pc, #4	; (adr r2, 8001714 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x24>)
 800170e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001712:	bf00      	nop
 8001714:	08001751 	.word	0x08001751
 8001718:	0800177d 	.word	0x0800177d
 800171c:	080017a9 	.word	0x080017a9
 8001720:	080017d5 	.word	0x080017d5
  {
    case LIS2DW12_HIGH_PERFORMANCE_MODE:
    default:
      switch (Noise)
 8001724:	79bb      	ldrb	r3, [r7, #6]
 8001726:	2b01      	cmp	r3, #1
 8001728:	d002      	beq.n	8001730 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x40>
      {
        case LIS2DW12_LOW_NOISE_DISABLE:
        default:
          new_power_mode = LIS2DW12_HIGH_PERFORMANCE;
 800172a:	2304      	movs	r3, #4
 800172c:	75fb      	strb	r3, [r7, #23]
          break;
 800172e:	e002      	b.n	8001736 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x46>
        case LIS2DW12_LOW_NOISE_ENABLE:
          new_power_mode = LIS2DW12_HIGH_PERFORMANCE_LOW_NOISE;
 8001730:	2314      	movs	r3, #20
 8001732:	75fb      	strb	r3, [r7, #23]
          break;
 8001734:	bf00      	nop
      }

      /* If High Performance mode minimum ODR is 12.5Hz */
      if (Odr < 12.5f)
 8001736:	edd7 7a02 	vldr	s15, [r7, #8]
 800173a:	eeb2 7a09 	vmov.f32	s14, #41	; 0x41480000  12.5
 800173e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001742:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001746:	d400      	bmi.n	800174a <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x5a>
      {
        Odr = 12.5f;
      }
      break;
 8001748:	e05a      	b.n	8001800 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x110>
        Odr = 12.5f;
 800174a:	4b6f      	ldr	r3, [pc, #444]	; (8001908 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x218>)
 800174c:	60bb      	str	r3, [r7, #8]
      break;
 800174e:	e057      	b.n	8001800 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x110>
    case LIS2DW12_LOW_POWER_MODE4:
      switch (Noise)
 8001750:	79bb      	ldrb	r3, [r7, #6]
 8001752:	2b01      	cmp	r3, #1
 8001754:	d002      	beq.n	800175c <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x6c>
      {
        case LIS2DW12_LOW_NOISE_DISABLE:
        default:
          new_power_mode = LIS2DW12_CONT_LOW_PWR_4;
 8001756:	2303      	movs	r3, #3
 8001758:	75fb      	strb	r3, [r7, #23]
          break;
 800175a:	e002      	b.n	8001762 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x72>
        case LIS2DW12_LOW_NOISE_ENABLE:
          new_power_mode = LIS2DW12_CONT_LOW_PWR_LOW_NOISE_4;
 800175c:	2313      	movs	r3, #19
 800175e:	75fb      	strb	r3, [r7, #23]
          break;
 8001760:	bf00      	nop
      }

      /* If Low Power mode maximum ODR is 200Hz */
      if (Odr > 200.0f)
 8001762:	edd7 7a02 	vldr	s15, [r7, #8]
 8001766:	ed9f 7a69 	vldr	s14, [pc, #420]	; 800190c <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x21c>
 800176a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800176e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001772:	dc00      	bgt.n	8001776 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x86>
      {
        Odr = 200.0f;
      }
      break;
 8001774:	e044      	b.n	8001800 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x110>
        Odr = 200.0f;
 8001776:	4b66      	ldr	r3, [pc, #408]	; (8001910 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x220>)
 8001778:	60bb      	str	r3, [r7, #8]
      break;
 800177a:	e041      	b.n	8001800 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x110>
    case LIS2DW12_LOW_POWER_MODE3:
      switch (Noise)
 800177c:	79bb      	ldrb	r3, [r7, #6]
 800177e:	2b01      	cmp	r3, #1
 8001780:	d002      	beq.n	8001788 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x98>
      {
        case LIS2DW12_LOW_NOISE_DISABLE:
        default:
          new_power_mode = LIS2DW12_CONT_LOW_PWR_3;
 8001782:	2302      	movs	r3, #2
 8001784:	75fb      	strb	r3, [r7, #23]
          break;
 8001786:	e002      	b.n	800178e <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x9e>
        case LIS2DW12_LOW_NOISE_ENABLE:
          new_power_mode = LIS2DW12_CONT_LOW_PWR_LOW_NOISE_3;
 8001788:	2312      	movs	r3, #18
 800178a:	75fb      	strb	r3, [r7, #23]
          break;
 800178c:	bf00      	nop
      }

      /* If Low Power mode maximum ODR is 200Hz */
      if (Odr > 200.0f)
 800178e:	edd7 7a02 	vldr	s15, [r7, #8]
 8001792:	ed9f 7a5e 	vldr	s14, [pc, #376]	; 800190c <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x21c>
 8001796:	eef4 7ac7 	vcmpe.f32	s15, s14
 800179a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800179e:	dc00      	bgt.n	80017a2 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0xb2>
      {
        Odr = 200.0f;
      }
      break;
 80017a0:	e02e      	b.n	8001800 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x110>
        Odr = 200.0f;
 80017a2:	4b5b      	ldr	r3, [pc, #364]	; (8001910 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x220>)
 80017a4:	60bb      	str	r3, [r7, #8]
      break;
 80017a6:	e02b      	b.n	8001800 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x110>
    case LIS2DW12_LOW_POWER_MODE2:
      switch (Noise)
 80017a8:	79bb      	ldrb	r3, [r7, #6]
 80017aa:	2b01      	cmp	r3, #1
 80017ac:	d002      	beq.n	80017b4 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0xc4>
      {
        case LIS2DW12_LOW_NOISE_DISABLE:
        default:
          new_power_mode = LIS2DW12_CONT_LOW_PWR_2;
 80017ae:	2301      	movs	r3, #1
 80017b0:	75fb      	strb	r3, [r7, #23]
          break;
 80017b2:	e002      	b.n	80017ba <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0xca>
        case LIS2DW12_LOW_NOISE_ENABLE:
          new_power_mode = LIS2DW12_CONT_LOW_PWR_LOW_NOISE_2;
 80017b4:	2311      	movs	r3, #17
 80017b6:	75fb      	strb	r3, [r7, #23]
          break;
 80017b8:	bf00      	nop
      }

      /* If Low Power mode maximum ODR is 200Hz */
      if (Odr > 200.0f)
 80017ba:	edd7 7a02 	vldr	s15, [r7, #8]
 80017be:	ed9f 7a53 	vldr	s14, [pc, #332]	; 800190c <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x21c>
 80017c2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80017c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80017ca:	dc00      	bgt.n	80017ce <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0xde>
      {
        Odr = 200.0f;
      }
      break;
 80017cc:	e018      	b.n	8001800 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x110>
        Odr = 200.0f;
 80017ce:	4b50      	ldr	r3, [pc, #320]	; (8001910 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x220>)
 80017d0:	60bb      	str	r3, [r7, #8]
      break;
 80017d2:	e015      	b.n	8001800 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x110>
    case LIS2DW12_LOW_POWER_MODE1:
      switch (Noise)
 80017d4:	79bb      	ldrb	r3, [r7, #6]
 80017d6:	2b01      	cmp	r3, #1
 80017d8:	d002      	beq.n	80017e0 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0xf0>
      {
        case LIS2DW12_LOW_NOISE_DISABLE:
        default:
          new_power_mode = LIS2DW12_CONT_LOW_PWR_12bit;
 80017da:	2300      	movs	r3, #0
 80017dc:	75fb      	strb	r3, [r7, #23]
          break;
 80017de:	e002      	b.n	80017e6 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0xf6>
        case LIS2DW12_LOW_NOISE_ENABLE:
          new_power_mode = LIS2DW12_CONT_LOW_PWR_LOW_NOISE_12bit;
 80017e0:	2310      	movs	r3, #16
 80017e2:	75fb      	strb	r3, [r7, #23]
          break;
 80017e4:	bf00      	nop
      }

      /* If Low Power mode maximum ODR is 200Hz */
      if (Odr > 200.0f)
 80017e6:	edd7 7a02 	vldr	s15, [r7, #8]
 80017ea:	ed9f 7a48 	vldr	s14, [pc, #288]	; 800190c <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x21c>
 80017ee:	eef4 7ac7 	vcmpe.f32	s15, s14
 80017f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80017f6:	dc00      	bgt.n	80017fa <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x10a>
      {
        Odr = 200.0f;
      }
      break;
 80017f8:	e001      	b.n	80017fe <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x10e>
        Odr = 200.0f;
 80017fa:	4b45      	ldr	r3, [pc, #276]	; (8001910 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x220>)
 80017fc:	60bb      	str	r3, [r7, #8]
      break;
 80017fe:	bf00      	nop
  }

  new_odr = (Odr <=    1.6f) ? LIS2DW12_XL_ODR_1Hz6_LP_ONLY
            : (Odr <=   12.5f) ? LIS2DW12_XL_ODR_12Hz5
 8001800:	edd7 7a02 	vldr	s15, [r7, #8]
 8001804:	ed9f 7a43 	vldr	s14, [pc, #268]	; 8001914 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x224>
 8001808:	eef4 7ac7 	vcmpe.f32	s15, s14
 800180c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001810:	d801      	bhi.n	8001816 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x126>
 8001812:	2301      	movs	r3, #1
 8001814:	e04d      	b.n	80018b2 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x1c2>
 8001816:	edd7 7a02 	vldr	s15, [r7, #8]
 800181a:	eeb2 7a09 	vmov.f32	s14, #41	; 0x41480000  12.5
 800181e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001822:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001826:	d801      	bhi.n	800182c <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x13c>
 8001828:	2302      	movs	r3, #2
 800182a:	e042      	b.n	80018b2 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x1c2>
 800182c:	edd7 7a02 	vldr	s15, [r7, #8]
 8001830:	eeb3 7a09 	vmov.f32	s14, #57	; 0x41c80000  25.0
 8001834:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001838:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800183c:	d801      	bhi.n	8001842 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x152>
 800183e:	2303      	movs	r3, #3
 8001840:	e037      	b.n	80018b2 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x1c2>
 8001842:	edd7 7a02 	vldr	s15, [r7, #8]
 8001846:	ed9f 7a34 	vldr	s14, [pc, #208]	; 8001918 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x228>
 800184a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800184e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001852:	d801      	bhi.n	8001858 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x168>
 8001854:	2304      	movs	r3, #4
 8001856:	e02c      	b.n	80018b2 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x1c2>
 8001858:	edd7 7a02 	vldr	s15, [r7, #8]
 800185c:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 800191c <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x22c>
 8001860:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001864:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001868:	d801      	bhi.n	800186e <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x17e>
 800186a:	2305      	movs	r3, #5
 800186c:	e021      	b.n	80018b2 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x1c2>
 800186e:	edd7 7a02 	vldr	s15, [r7, #8]
 8001872:	ed9f 7a26 	vldr	s14, [pc, #152]	; 800190c <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x21c>
 8001876:	eef4 7ac7 	vcmpe.f32	s15, s14
 800187a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800187e:	d801      	bhi.n	8001884 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x194>
 8001880:	2306      	movs	r3, #6
 8001882:	e016      	b.n	80018b2 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x1c2>
 8001884:	edd7 7a02 	vldr	s15, [r7, #8]
 8001888:	ed9f 7a25 	vldr	s14, [pc, #148]	; 8001920 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x230>
 800188c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001890:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001894:	d801      	bhi.n	800189a <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x1aa>
 8001896:	2307      	movs	r3, #7
 8001898:	e00b      	b.n	80018b2 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x1c2>
 800189a:	edd7 7a02 	vldr	s15, [r7, #8]
 800189e:	ed9f 7a21 	vldr	s14, [pc, #132]	; 8001924 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x234>
 80018a2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80018a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80018aa:	d801      	bhi.n	80018b0 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x1c0>
 80018ac:	2308      	movs	r3, #8
 80018ae:	e000      	b.n	80018b2 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x1c2>
 80018b0:	2309      	movs	r3, #9
  new_odr = (Odr <=    1.6f) ? LIS2DW12_XL_ODR_1Hz6_LP_ONLY
 80018b2:	75bb      	strb	r3, [r7, #22]
            : (Odr <=  400.0f) ? LIS2DW12_XL_ODR_400Hz
            : (Odr <=  800.0f) ? LIS2DW12_XL_ODR_800Hz
            :                    LIS2DW12_XL_ODR_1k6Hz;

  /* Output data rate selection. */
  if (lis2dw12_data_rate_set(&(pObj->Ctx), new_odr) != LIS2DW12_OK)
 80018b4:	68fb      	ldr	r3, [r7, #12]
 80018b6:	3320      	adds	r3, #32
 80018b8:	7dba      	ldrb	r2, [r7, #22]
 80018ba:	4611      	mov	r1, r2
 80018bc:	4618      	mov	r0, r3
 80018be:	f000 fa33 	bl	8001d28 <lis2dw12_data_rate_set>
 80018c2:	4603      	mov	r3, r0
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d002      	beq.n	80018ce <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x1de>
  {
    return LIS2DW12_ERROR;
 80018c8:	f04f 33ff 	mov.w	r3, #4294967295
 80018cc:	e018      	b.n	8001900 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x210>
  }

  /* Power mode selection. */
  if (lis2dw12_power_mode_set(&(pObj->Ctx), new_power_mode) != LIS2DW12_OK)
 80018ce:	68fb      	ldr	r3, [r7, #12]
 80018d0:	3320      	adds	r3, #32
 80018d2:	7dfa      	ldrb	r2, [r7, #23]
 80018d4:	4611      	mov	r1, r2
 80018d6:	4618      	mov	r0, r3
 80018d8:	f000 f91e 	bl	8001b18 <lis2dw12_power_mode_set>
 80018dc:	4603      	mov	r3, r0
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d002      	beq.n	80018e8 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x1f8>
  {
    return LIS2DW12_ERROR;
 80018e2:	f04f 33ff 	mov.w	r3, #4294967295
 80018e6:	e00b      	b.n	8001900 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x210>
  }

  /* Store the current Odr, Mode and Noise values */
  pObj->acc_odr = Odr;
 80018e8:	68fb      	ldr	r3, [r7, #12]
 80018ea:	68ba      	ldr	r2, [r7, #8]
 80018ec:	635a      	str	r2, [r3, #52]	; 0x34
  pObj->acc_operating_mode = Mode;
 80018ee:	68fb      	ldr	r3, [r7, #12]
 80018f0:	79fa      	ldrb	r2, [r7, #7]
 80018f2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  pObj->acc_low_noise = Noise;
 80018f6:	68fb      	ldr	r3, [r7, #12]
 80018f8:	79ba      	ldrb	r2, [r7, #6]
 80018fa:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return LIS2DW12_OK;
 80018fe:	2300      	movs	r3, #0
}
 8001900:	4618      	mov	r0, r3
 8001902:	3718      	adds	r7, #24
 8001904:	46bd      	mov	sp, r7
 8001906:	bd80      	pop	{r7, pc}
 8001908:	41480000 	.word	0x41480000
 800190c:	43480000 	.word	0x43480000
 8001910:	43480000 	.word	0x43480000
 8001914:	3fcccccd 	.word	0x3fcccccd
 8001918:	42480000 	.word	0x42480000
 800191c:	42c80000 	.word	0x42c80000
 8001920:	43c80000 	.word	0x43c80000
 8001924:	44480000 	.word	0x44480000

08001928 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled>:
  * @param  Noise the low noise option
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LIS2DW12_ACC_SetOutputDataRate_When_Disabled(LIS2DW12_Object_t *pObj, float Odr,
                                                            LIS2DW12_Operating_Mode_t Mode, LIS2DW12_Low_Noise_t Noise)
{
 8001928:	b480      	push	{r7}
 800192a:	b085      	sub	sp, #20
 800192c:	af00      	add	r7, sp, #0
 800192e:	60f8      	str	r0, [r7, #12]
 8001930:	ed87 0a02 	vstr	s0, [r7, #8]
 8001934:	460b      	mov	r3, r1
 8001936:	71fb      	strb	r3, [r7, #7]
 8001938:	4613      	mov	r3, r2
 800193a:	71bb      	strb	r3, [r7, #6]
  /* Store the new Odr, Mode and Noise values */
  pObj->acc_operating_mode = Mode;
 800193c:	68fb      	ldr	r3, [r7, #12]
 800193e:	79fa      	ldrb	r2, [r7, #7]
 8001940:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  pObj->acc_low_noise = Noise;
 8001944:	68fb      	ldr	r3, [r7, #12]
 8001946:	79ba      	ldrb	r2, [r7, #6]
 8001948:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  pObj->acc_odr = (Odr <=    1.6f) ?    1.6f
                  : (Odr <=   12.5f) ?   12.5f
 800194c:	edd7 7a02 	vldr	s15, [r7, #8]
 8001950:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 8001a10 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xe8>
 8001954:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001958:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800195c:	d801      	bhi.n	8001962 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0x3a>
 800195e:	4b2d      	ldr	r3, [pc, #180]	; (8001a14 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xec>)
 8001960:	e04d      	b.n	80019fe <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xd6>
                  : (Odr <=   25.0f) ?   25.0f
 8001962:	edd7 7a02 	vldr	s15, [r7, #8]
 8001966:	eeb2 7a09 	vmov.f32	s14, #41	; 0x41480000  12.5
 800196a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800196e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001972:	d801      	bhi.n	8001978 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0x50>
 8001974:	4b28      	ldr	r3, [pc, #160]	; (8001a18 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xf0>)
 8001976:	e042      	b.n	80019fe <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xd6>
                  : (Odr <=   50.0f) ?   50.0f
 8001978:	edd7 7a02 	vldr	s15, [r7, #8]
 800197c:	eeb3 7a09 	vmov.f32	s14, #57	; 0x41c80000  25.0
 8001980:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001984:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001988:	d801      	bhi.n	800198e <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0x66>
 800198a:	4b24      	ldr	r3, [pc, #144]	; (8001a1c <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xf4>)
 800198c:	e037      	b.n	80019fe <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xd6>
                  : (Odr <=  100.0f) ?  100.0f
 800198e:	edd7 7a02 	vldr	s15, [r7, #8]
 8001992:	ed9f 7a23 	vldr	s14, [pc, #140]	; 8001a20 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xf8>
 8001996:	eef4 7ac7 	vcmpe.f32	s15, s14
 800199a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800199e:	d801      	bhi.n	80019a4 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0x7c>
 80019a0:	4b20      	ldr	r3, [pc, #128]	; (8001a24 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xfc>)
 80019a2:	e02c      	b.n	80019fe <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xd6>
                  : (Odr <=  200.0f) ?  200.0f
 80019a4:	edd7 7a02 	vldr	s15, [r7, #8]
 80019a8:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 8001a28 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0x100>
 80019ac:	eef4 7ac7 	vcmpe.f32	s15, s14
 80019b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80019b4:	d801      	bhi.n	80019ba <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0x92>
 80019b6:	4b1d      	ldr	r3, [pc, #116]	; (8001a2c <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0x104>)
 80019b8:	e021      	b.n	80019fe <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xd6>
                  : (Odr <=  400.0f) ?  400.0f
 80019ba:	edd7 7a02 	vldr	s15, [r7, #8]
 80019be:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 8001a30 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0x108>
 80019c2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80019c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80019ca:	d801      	bhi.n	80019d0 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xa8>
 80019cc:	4b19      	ldr	r3, [pc, #100]	; (8001a34 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0x10c>)
 80019ce:	e016      	b.n	80019fe <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xd6>
                  : (Odr <=  800.0f) ?  800.0f
 80019d0:	edd7 7a02 	vldr	s15, [r7, #8]
 80019d4:	ed9f 7a18 	vldr	s14, [pc, #96]	; 8001a38 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0x110>
 80019d8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80019dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80019e0:	d801      	bhi.n	80019e6 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xbe>
 80019e2:	4b16      	ldr	r3, [pc, #88]	; (8001a3c <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0x114>)
 80019e4:	e00b      	b.n	80019fe <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xd6>
                  :                    1600.0f;
 80019e6:	edd7 7a02 	vldr	s15, [r7, #8]
 80019ea:	ed9f 7a15 	vldr	s14, [pc, #84]	; 8001a40 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0x118>
 80019ee:	eef4 7ac7 	vcmpe.f32	s15, s14
 80019f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80019f6:	d801      	bhi.n	80019fc <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xd4>
 80019f8:	4b12      	ldr	r3, [pc, #72]	; (8001a44 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0x11c>)
 80019fa:	e000      	b.n	80019fe <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xd6>
 80019fc:	4b12      	ldr	r3, [pc, #72]	; (8001a48 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0x120>)
  pObj->acc_odr = (Odr <=    1.6f) ?    1.6f
 80019fe:	68fa      	ldr	r2, [r7, #12]
 8001a00:	6353      	str	r3, [r2, #52]	; 0x34

  return LIS2DW12_OK;
 8001a02:	2300      	movs	r3, #0
}
 8001a04:	4618      	mov	r0, r3
 8001a06:	3714      	adds	r7, #20
 8001a08:	46bd      	mov	sp, r7
 8001a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a0e:	4770      	bx	lr
 8001a10:	3fcccccd 	.word	0x3fcccccd
 8001a14:	3fcccccd 	.word	0x3fcccccd
 8001a18:	41480000 	.word	0x41480000
 8001a1c:	41c80000 	.word	0x41c80000
 8001a20:	42480000 	.word	0x42480000
 8001a24:	42480000 	.word	0x42480000
 8001a28:	42c80000 	.word	0x42c80000
 8001a2c:	42c80000 	.word	0x42c80000
 8001a30:	43480000 	.word	0x43480000
 8001a34:	43480000 	.word	0x43480000
 8001a38:	43c80000 	.word	0x43c80000
 8001a3c:	43c80000 	.word	0x43c80000
 8001a40:	44480000 	.word	0x44480000
 8001a44:	44480000 	.word	0x44480000
 8001a48:	44c80000 	.word	0x44c80000

08001a4c <ReadRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t ReadRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8001a4c:	b590      	push	{r4, r7, lr}
 8001a4e:	b087      	sub	sp, #28
 8001a50:	af00      	add	r7, sp, #0
 8001a52:	60f8      	str	r0, [r7, #12]
 8001a54:	607a      	str	r2, [r7, #4]
 8001a56:	461a      	mov	r2, r3
 8001a58:	460b      	mov	r3, r1
 8001a5a:	72fb      	strb	r3, [r7, #11]
 8001a5c:	4613      	mov	r3, r2
 8001a5e:	813b      	strh	r3, [r7, #8]
  LIS2DW12_Object_t *pObj = (LIS2DW12_Object_t *)Handle;
 8001a60:	68fb      	ldr	r3, [r7, #12]
 8001a62:	617b      	str	r3, [r7, #20]

  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 8001a64:	697b      	ldr	r3, [r7, #20]
 8001a66:	695c      	ldr	r4, [r3, #20]
 8001a68:	697b      	ldr	r3, [r7, #20]
 8001a6a:	7b1b      	ldrb	r3, [r3, #12]
 8001a6c:	b298      	uxth	r0, r3
 8001a6e:	7afb      	ldrb	r3, [r7, #11]
 8001a70:	b299      	uxth	r1, r3
 8001a72:	893b      	ldrh	r3, [r7, #8]
 8001a74:	687a      	ldr	r2, [r7, #4]
 8001a76:	47a0      	blx	r4
 8001a78:	4603      	mov	r3, r0
}
 8001a7a:	4618      	mov	r0, r3
 8001a7c:	371c      	adds	r7, #28
 8001a7e:	46bd      	mov	sp, r7
 8001a80:	bd90      	pop	{r4, r7, pc}

08001a82 <WriteRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t WriteRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8001a82:	b590      	push	{r4, r7, lr}
 8001a84:	b087      	sub	sp, #28
 8001a86:	af00      	add	r7, sp, #0
 8001a88:	60f8      	str	r0, [r7, #12]
 8001a8a:	607a      	str	r2, [r7, #4]
 8001a8c:	461a      	mov	r2, r3
 8001a8e:	460b      	mov	r3, r1
 8001a90:	72fb      	strb	r3, [r7, #11]
 8001a92:	4613      	mov	r3, r2
 8001a94:	813b      	strh	r3, [r7, #8]
  LIS2DW12_Object_t *pObj = (LIS2DW12_Object_t *)Handle;
 8001a96:	68fb      	ldr	r3, [r7, #12]
 8001a98:	617b      	str	r3, [r7, #20]

  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 8001a9a:	697b      	ldr	r3, [r7, #20]
 8001a9c:	691c      	ldr	r4, [r3, #16]
 8001a9e:	697b      	ldr	r3, [r7, #20]
 8001aa0:	7b1b      	ldrb	r3, [r3, #12]
 8001aa2:	b298      	uxth	r0, r3
 8001aa4:	7afb      	ldrb	r3, [r7, #11]
 8001aa6:	b299      	uxth	r1, r3
 8001aa8:	893b      	ldrh	r3, [r7, #8]
 8001aaa:	687a      	ldr	r2, [r7, #4]
 8001aac:	47a0      	blx	r4
 8001aae:	4603      	mov	r3, r0
}
 8001ab0:	4618      	mov	r0, r3
 8001ab2:	371c      	adds	r7, #28
 8001ab4:	46bd      	mov	sp, r7
 8001ab6:	bd90      	pop	{r4, r7, pc}

08001ab8 <lis2dw12_read_reg>:
  *
  */
int32_t lis2dw12_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                          uint8_t *data,
                          uint16_t len)
{
 8001ab8:	b590      	push	{r4, r7, lr}
 8001aba:	b087      	sub	sp, #28
 8001abc:	af00      	add	r7, sp, #0
 8001abe:	60f8      	str	r0, [r7, #12]
 8001ac0:	607a      	str	r2, [r7, #4]
 8001ac2:	461a      	mov	r2, r3
 8001ac4:	460b      	mov	r3, r1
 8001ac6:	72fb      	strb	r3, [r7, #11]
 8001ac8:	4613      	mov	r3, r2
 8001aca:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8001acc:	68fb      	ldr	r3, [r7, #12]
 8001ace:	685c      	ldr	r4, [r3, #4]
 8001ad0:	68fb      	ldr	r3, [r7, #12]
 8001ad2:	68d8      	ldr	r0, [r3, #12]
 8001ad4:	893b      	ldrh	r3, [r7, #8]
 8001ad6:	7af9      	ldrb	r1, [r7, #11]
 8001ad8:	687a      	ldr	r2, [r7, #4]
 8001ada:	47a0      	blx	r4
 8001adc:	6178      	str	r0, [r7, #20]

  return ret;
 8001ade:	697b      	ldr	r3, [r7, #20]
}
 8001ae0:	4618      	mov	r0, r3
 8001ae2:	371c      	adds	r7, #28
 8001ae4:	46bd      	mov	sp, r7
 8001ae6:	bd90      	pop	{r4, r7, pc}

08001ae8 <lis2dw12_write_reg>:
  *
  */
int32_t lis2dw12_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                           uint8_t *data,
                           uint16_t len)
{
 8001ae8:	b590      	push	{r4, r7, lr}
 8001aea:	b087      	sub	sp, #28
 8001aec:	af00      	add	r7, sp, #0
 8001aee:	60f8      	str	r0, [r7, #12]
 8001af0:	607a      	str	r2, [r7, #4]
 8001af2:	461a      	mov	r2, r3
 8001af4:	460b      	mov	r3, r1
 8001af6:	72fb      	strb	r3, [r7, #11]
 8001af8:	4613      	mov	r3, r2
 8001afa:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8001afc:	68fb      	ldr	r3, [r7, #12]
 8001afe:	681c      	ldr	r4, [r3, #0]
 8001b00:	68fb      	ldr	r3, [r7, #12]
 8001b02:	68d8      	ldr	r0, [r3, #12]
 8001b04:	893b      	ldrh	r3, [r7, #8]
 8001b06:	7af9      	ldrb	r1, [r7, #11]
 8001b08:	687a      	ldr	r2, [r7, #4]
 8001b0a:	47a0      	blx	r4
 8001b0c:	6178      	str	r0, [r7, #20]

  return ret;
 8001b0e:	697b      	ldr	r3, [r7, #20]
}
 8001b10:	4618      	mov	r0, r3
 8001b12:	371c      	adds	r7, #28
 8001b14:	46bd      	mov	sp, r7
 8001b16:	bd90      	pop	{r4, r7, pc}

08001b18 <lis2dw12_power_mode_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_power_mode_set(stmdev_ctx_t *ctx,
                                lis2dw12_mode_t val)
{
 8001b18:	b580      	push	{r7, lr}
 8001b1a:	b086      	sub	sp, #24
 8001b1c:	af00      	add	r7, sp, #0
 8001b1e:	6078      	str	r0, [r7, #4]
 8001b20:	460b      	mov	r3, r1
 8001b22:	70fb      	strb	r3, [r7, #3]
  lis2dw12_ctrl1_t ctrl1;
  lis2dw12_ctrl6_t ctrl6;
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL1, (uint8_t *) &ctrl1, 1);
 8001b24:	f107 0210 	add.w	r2, r7, #16
 8001b28:	2301      	movs	r3, #1
 8001b2a:	2120      	movs	r1, #32
 8001b2c:	6878      	ldr	r0, [r7, #4]
 8001b2e:	f7ff ffc3 	bl	8001ab8 <lis2dw12_read_reg>
 8001b32:	6178      	str	r0, [r7, #20]

  if (ret == 0)
 8001b34:	697b      	ldr	r3, [r7, #20]
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d118      	bne.n	8001b6c <lis2dw12_power_mode_set+0x54>
  {
    ctrl1.mode = ((uint8_t) val & 0x0CU) >> 2;
 8001b3a:	78fb      	ldrb	r3, [r7, #3]
 8001b3c:	089b      	lsrs	r3, r3, #2
 8001b3e:	f003 0303 	and.w	r3, r3, #3
 8001b42:	b2da      	uxtb	r2, r3
 8001b44:	7c3b      	ldrb	r3, [r7, #16]
 8001b46:	f362 0383 	bfi	r3, r2, #2, #2
 8001b4a:	743b      	strb	r3, [r7, #16]
    ctrl1.lp_mode = (uint8_t) val & 0x03U ;
 8001b4c:	78fb      	ldrb	r3, [r7, #3]
 8001b4e:	f003 0303 	and.w	r3, r3, #3
 8001b52:	b2da      	uxtb	r2, r3
 8001b54:	7c3b      	ldrb	r3, [r7, #16]
 8001b56:	f362 0301 	bfi	r3, r2, #0, #2
 8001b5a:	743b      	strb	r3, [r7, #16]
    ret = lis2dw12_write_reg(ctx, LIS2DW12_CTRL1, (uint8_t *) &ctrl1, 1);
 8001b5c:	f107 0210 	add.w	r2, r7, #16
 8001b60:	2301      	movs	r3, #1
 8001b62:	2120      	movs	r1, #32
 8001b64:	6878      	ldr	r0, [r7, #4]
 8001b66:	f7ff ffbf 	bl	8001ae8 <lis2dw12_write_reg>
 8001b6a:	6178      	str	r0, [r7, #20]
  }

  if (ret == 0)
 8001b6c:	697b      	ldr	r3, [r7, #20]
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d107      	bne.n	8001b82 <lis2dw12_power_mode_set+0x6a>
  {
    ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL6, (uint8_t *) &ctrl6, 1);
 8001b72:	f107 020c 	add.w	r2, r7, #12
 8001b76:	2301      	movs	r3, #1
 8001b78:	2125      	movs	r1, #37	; 0x25
 8001b7a:	6878      	ldr	r0, [r7, #4]
 8001b7c:	f7ff ff9c 	bl	8001ab8 <lis2dw12_read_reg>
 8001b80:	6178      	str	r0, [r7, #20]
  }

  if (ret == 0)
 8001b82:	697b      	ldr	r3, [r7, #20]
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d110      	bne.n	8001baa <lis2dw12_power_mode_set+0x92>
  {
    ctrl6.low_noise = ((uint8_t) val & 0x10U) >> 4;
 8001b88:	78fb      	ldrb	r3, [r7, #3]
 8001b8a:	091b      	lsrs	r3, r3, #4
 8001b8c:	f003 0301 	and.w	r3, r3, #1
 8001b90:	b2da      	uxtb	r2, r3
 8001b92:	7b3b      	ldrb	r3, [r7, #12]
 8001b94:	f362 0382 	bfi	r3, r2, #2, #1
 8001b98:	733b      	strb	r3, [r7, #12]
    ret = lis2dw12_write_reg(ctx, LIS2DW12_CTRL6, (uint8_t *) &ctrl6, 1);
 8001b9a:	f107 020c 	add.w	r2, r7, #12
 8001b9e:	2301      	movs	r3, #1
 8001ba0:	2125      	movs	r1, #37	; 0x25
 8001ba2:	6878      	ldr	r0, [r7, #4]
 8001ba4:	f7ff ffa0 	bl	8001ae8 <lis2dw12_write_reg>
 8001ba8:	6178      	str	r0, [r7, #20]
  }

  return ret;
 8001baa:	697b      	ldr	r3, [r7, #20]
}
 8001bac:	4618      	mov	r0, r3
 8001bae:	3718      	adds	r7, #24
 8001bb0:	46bd      	mov	sp, r7
 8001bb2:	bd80      	pop	{r7, pc}

08001bb4 <lis2dw12_power_mode_get>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_power_mode_get(stmdev_ctx_t *ctx,
                                lis2dw12_mode_t *val)
{
 8001bb4:	b580      	push	{r7, lr}
 8001bb6:	b086      	sub	sp, #24
 8001bb8:	af00      	add	r7, sp, #0
 8001bba:	6078      	str	r0, [r7, #4]
 8001bbc:	6039      	str	r1, [r7, #0]
  lis2dw12_ctrl1_t ctrl1;
  lis2dw12_ctrl6_t ctrl6;
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL1, (uint8_t *) &ctrl1, 1);
 8001bbe:	f107 0210 	add.w	r2, r7, #16
 8001bc2:	2301      	movs	r3, #1
 8001bc4:	2120      	movs	r1, #32
 8001bc6:	6878      	ldr	r0, [r7, #4]
 8001bc8:	f7ff ff76 	bl	8001ab8 <lis2dw12_read_reg>
 8001bcc:	6178      	str	r0, [r7, #20]

  if (ret == 0)
 8001bce:	697b      	ldr	r3, [r7, #20]
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	f040 80a3 	bne.w	8001d1c <lis2dw12_power_mode_get+0x168>
  {
    ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL6, (uint8_t *) &ctrl6, 1);
 8001bd6:	f107 020c 	add.w	r2, r7, #12
 8001bda:	2301      	movs	r3, #1
 8001bdc:	2125      	movs	r1, #37	; 0x25
 8001bde:	6878      	ldr	r0, [r7, #4]
 8001be0:	f7ff ff6a 	bl	8001ab8 <lis2dw12_read_reg>
 8001be4:	6178      	str	r0, [r7, #20]

    switch (((ctrl6.low_noise << 4) + (ctrl1.mode << 2) +
 8001be6:	7b3b      	ldrb	r3, [r7, #12]
 8001be8:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8001bec:	b2db      	uxtb	r3, r3
 8001bee:	011a      	lsls	r2, r3, #4
 8001bf0:	7c3b      	ldrb	r3, [r7, #16]
 8001bf2:	f3c3 0381 	ubfx	r3, r3, #2, #2
 8001bf6:	b2db      	uxtb	r3, r3
 8001bf8:	009b      	lsls	r3, r3, #2
 8001bfa:	4413      	add	r3, r2
             ctrl1.lp_mode))
 8001bfc:	7c3a      	ldrb	r2, [r7, #16]
 8001bfe:	f3c2 0201 	ubfx	r2, r2, #0, #2
 8001c02:	b2d2      	uxtb	r2, r2
    switch (((ctrl6.low_noise << 4) + (ctrl1.mode << 2) +
 8001c04:	4413      	add	r3, r2
 8001c06:	2b1b      	cmp	r3, #27
 8001c08:	f200 8084 	bhi.w	8001d14 <lis2dw12_power_mode_get+0x160>
 8001c0c:	a201      	add	r2, pc, #4	; (adr r2, 8001c14 <lis2dw12_power_mode_get+0x60>)
 8001c0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c12:	bf00      	nop
 8001c14:	08001ca5 	.word	0x08001ca5
 8001c18:	08001c9d 	.word	0x08001c9d
 8001c1c:	08001c95 	.word	0x08001c95
 8001c20:	08001c8d 	.word	0x08001c8d
 8001c24:	08001c85 	.word	0x08001c85
 8001c28:	08001d15 	.word	0x08001d15
 8001c2c:	08001d15 	.word	0x08001d15
 8001c30:	08001d15 	.word	0x08001d15
 8001c34:	08001cc5 	.word	0x08001cc5
 8001c38:	08001cbd 	.word	0x08001cbd
 8001c3c:	08001cb5 	.word	0x08001cb5
 8001c40:	08001cad 	.word	0x08001cad
 8001c44:	08001d15 	.word	0x08001d15
 8001c48:	08001d15 	.word	0x08001d15
 8001c4c:	08001d15 	.word	0x08001d15
 8001c50:	08001d15 	.word	0x08001d15
 8001c54:	08001ced 	.word	0x08001ced
 8001c58:	08001ce5 	.word	0x08001ce5
 8001c5c:	08001cdd 	.word	0x08001cdd
 8001c60:	08001cd5 	.word	0x08001cd5
 8001c64:	08001ccd 	.word	0x08001ccd
 8001c68:	08001d15 	.word	0x08001d15
 8001c6c:	08001d15 	.word	0x08001d15
 8001c70:	08001d15 	.word	0x08001d15
 8001c74:	08001d0d 	.word	0x08001d0d
 8001c78:	08001d05 	.word	0x08001d05
 8001c7c:	08001cfd 	.word	0x08001cfd
 8001c80:	08001cf5 	.word	0x08001cf5
    {
      case LIS2DW12_HIGH_PERFORMANCE:
        *val = LIS2DW12_HIGH_PERFORMANCE;
 8001c84:	683b      	ldr	r3, [r7, #0]
 8001c86:	2204      	movs	r2, #4
 8001c88:	701a      	strb	r2, [r3, #0]
        break;
 8001c8a:	e048      	b.n	8001d1e <lis2dw12_power_mode_get+0x16a>

      case LIS2DW12_CONT_LOW_PWR_4:
        *val = LIS2DW12_CONT_LOW_PWR_4;
 8001c8c:	683b      	ldr	r3, [r7, #0]
 8001c8e:	2203      	movs	r2, #3
 8001c90:	701a      	strb	r2, [r3, #0]
        break;
 8001c92:	e044      	b.n	8001d1e <lis2dw12_power_mode_get+0x16a>

      case LIS2DW12_CONT_LOW_PWR_3:
        *val = LIS2DW12_CONT_LOW_PWR_3;
 8001c94:	683b      	ldr	r3, [r7, #0]
 8001c96:	2202      	movs	r2, #2
 8001c98:	701a      	strb	r2, [r3, #0]
        break;
 8001c9a:	e040      	b.n	8001d1e <lis2dw12_power_mode_get+0x16a>

      case LIS2DW12_CONT_LOW_PWR_2:
        *val = LIS2DW12_CONT_LOW_PWR_2;
 8001c9c:	683b      	ldr	r3, [r7, #0]
 8001c9e:	2201      	movs	r2, #1
 8001ca0:	701a      	strb	r2, [r3, #0]
        break;
 8001ca2:	e03c      	b.n	8001d1e <lis2dw12_power_mode_get+0x16a>

      case LIS2DW12_CONT_LOW_PWR_12bit:
        *val = LIS2DW12_CONT_LOW_PWR_12bit;
 8001ca4:	683b      	ldr	r3, [r7, #0]
 8001ca6:	2200      	movs	r2, #0
 8001ca8:	701a      	strb	r2, [r3, #0]
        break;
 8001caa:	e038      	b.n	8001d1e <lis2dw12_power_mode_get+0x16a>

      case LIS2DW12_SINGLE_LOW_PWR_4:
        *val = LIS2DW12_SINGLE_LOW_PWR_4;
 8001cac:	683b      	ldr	r3, [r7, #0]
 8001cae:	220b      	movs	r2, #11
 8001cb0:	701a      	strb	r2, [r3, #0]
        break;
 8001cb2:	e034      	b.n	8001d1e <lis2dw12_power_mode_get+0x16a>

      case LIS2DW12_SINGLE_LOW_PWR_3:
        *val = LIS2DW12_SINGLE_LOW_PWR_3;
 8001cb4:	683b      	ldr	r3, [r7, #0]
 8001cb6:	220a      	movs	r2, #10
 8001cb8:	701a      	strb	r2, [r3, #0]
        break;
 8001cba:	e030      	b.n	8001d1e <lis2dw12_power_mode_get+0x16a>

      case LIS2DW12_SINGLE_LOW_PWR_2:
        *val = LIS2DW12_SINGLE_LOW_PWR_2;
 8001cbc:	683b      	ldr	r3, [r7, #0]
 8001cbe:	2209      	movs	r2, #9
 8001cc0:	701a      	strb	r2, [r3, #0]
        break;
 8001cc2:	e02c      	b.n	8001d1e <lis2dw12_power_mode_get+0x16a>

      case LIS2DW12_SINGLE_LOW_PWR_12bit:
        *val = LIS2DW12_SINGLE_LOW_PWR_12bit;
 8001cc4:	683b      	ldr	r3, [r7, #0]
 8001cc6:	2208      	movs	r2, #8
 8001cc8:	701a      	strb	r2, [r3, #0]
        break;
 8001cca:	e028      	b.n	8001d1e <lis2dw12_power_mode_get+0x16a>

      case LIS2DW12_HIGH_PERFORMANCE_LOW_NOISE:
        *val = LIS2DW12_HIGH_PERFORMANCE_LOW_NOISE;
 8001ccc:	683b      	ldr	r3, [r7, #0]
 8001cce:	2214      	movs	r2, #20
 8001cd0:	701a      	strb	r2, [r3, #0]
        break;
 8001cd2:	e024      	b.n	8001d1e <lis2dw12_power_mode_get+0x16a>

      case LIS2DW12_CONT_LOW_PWR_LOW_NOISE_4:
        *val = LIS2DW12_CONT_LOW_PWR_LOW_NOISE_4;
 8001cd4:	683b      	ldr	r3, [r7, #0]
 8001cd6:	2213      	movs	r2, #19
 8001cd8:	701a      	strb	r2, [r3, #0]
        break;
 8001cda:	e020      	b.n	8001d1e <lis2dw12_power_mode_get+0x16a>

      case LIS2DW12_CONT_LOW_PWR_LOW_NOISE_3:
        *val = LIS2DW12_CONT_LOW_PWR_LOW_NOISE_3;
 8001cdc:	683b      	ldr	r3, [r7, #0]
 8001cde:	2212      	movs	r2, #18
 8001ce0:	701a      	strb	r2, [r3, #0]
        break;
 8001ce2:	e01c      	b.n	8001d1e <lis2dw12_power_mode_get+0x16a>

      case LIS2DW12_CONT_LOW_PWR_LOW_NOISE_2:
        *val = LIS2DW12_CONT_LOW_PWR_LOW_NOISE_2;
 8001ce4:	683b      	ldr	r3, [r7, #0]
 8001ce6:	2211      	movs	r2, #17
 8001ce8:	701a      	strb	r2, [r3, #0]
        break;
 8001cea:	e018      	b.n	8001d1e <lis2dw12_power_mode_get+0x16a>

      case LIS2DW12_CONT_LOW_PWR_LOW_NOISE_12bit:
        *val = LIS2DW12_CONT_LOW_PWR_LOW_NOISE_12bit;
 8001cec:	683b      	ldr	r3, [r7, #0]
 8001cee:	2210      	movs	r2, #16
 8001cf0:	701a      	strb	r2, [r3, #0]
        break;
 8001cf2:	e014      	b.n	8001d1e <lis2dw12_power_mode_get+0x16a>

      case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_4:
        *val = LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_4;
 8001cf4:	683b      	ldr	r3, [r7, #0]
 8001cf6:	221b      	movs	r2, #27
 8001cf8:	701a      	strb	r2, [r3, #0]
        break;
 8001cfa:	e010      	b.n	8001d1e <lis2dw12_power_mode_get+0x16a>

      case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_3:
        *val = LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_3;
 8001cfc:	683b      	ldr	r3, [r7, #0]
 8001cfe:	221a      	movs	r2, #26
 8001d00:	701a      	strb	r2, [r3, #0]
        break;
 8001d02:	e00c      	b.n	8001d1e <lis2dw12_power_mode_get+0x16a>

      case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_2:
        *val = LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_2;
 8001d04:	683b      	ldr	r3, [r7, #0]
 8001d06:	2219      	movs	r2, #25
 8001d08:	701a      	strb	r2, [r3, #0]
        break;
 8001d0a:	e008      	b.n	8001d1e <lis2dw12_power_mode_get+0x16a>

      case LIS2DW12_SINGLE_LOW_LOW_NOISE_PWR_12bit:
        *val = LIS2DW12_SINGLE_LOW_LOW_NOISE_PWR_12bit;
 8001d0c:	683b      	ldr	r3, [r7, #0]
 8001d0e:	2218      	movs	r2, #24
 8001d10:	701a      	strb	r2, [r3, #0]
        break;
 8001d12:	e004      	b.n	8001d1e <lis2dw12_power_mode_get+0x16a>

      default:
        *val = LIS2DW12_HIGH_PERFORMANCE;
 8001d14:	683b      	ldr	r3, [r7, #0]
 8001d16:	2204      	movs	r2, #4
 8001d18:	701a      	strb	r2, [r3, #0]
        break;
 8001d1a:	e000      	b.n	8001d1e <lis2dw12_power_mode_get+0x16a>
    }
  }
 8001d1c:	bf00      	nop

  return ret;
 8001d1e:	697b      	ldr	r3, [r7, #20]
}
 8001d20:	4618      	mov	r0, r3
 8001d22:	3718      	adds	r7, #24
 8001d24:	46bd      	mov	sp, r7
 8001d26:	bd80      	pop	{r7, pc}

08001d28 <lis2dw12_data_rate_set>:
  * @param  val      change the values of odr in reg CTRL1
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_data_rate_set(stmdev_ctx_t *ctx, lis2dw12_odr_t val)
{
 8001d28:	b580      	push	{r7, lr}
 8001d2a:	b086      	sub	sp, #24
 8001d2c:	af00      	add	r7, sp, #0
 8001d2e:	6078      	str	r0, [r7, #4]
 8001d30:	460b      	mov	r3, r1
 8001d32:	70fb      	strb	r3, [r7, #3]
  lis2dw12_ctrl1_t ctrl1;
  lis2dw12_ctrl3_t ctrl3;
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL1, (uint8_t *) &ctrl1, 1);
 8001d34:	f107 0210 	add.w	r2, r7, #16
 8001d38:	2301      	movs	r3, #1
 8001d3a:	2120      	movs	r1, #32
 8001d3c:	6878      	ldr	r0, [r7, #4]
 8001d3e:	f7ff febb 	bl	8001ab8 <lis2dw12_read_reg>
 8001d42:	6178      	str	r0, [r7, #20]

  if (ret == 0)
 8001d44:	697b      	ldr	r3, [r7, #20]
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d10f      	bne.n	8001d6a <lis2dw12_data_rate_set+0x42>
  {
    ctrl1.odr = (uint8_t) val;
 8001d4a:	78fb      	ldrb	r3, [r7, #3]
 8001d4c:	f003 030f 	and.w	r3, r3, #15
 8001d50:	b2da      	uxtb	r2, r3
 8001d52:	7c3b      	ldrb	r3, [r7, #16]
 8001d54:	f362 1307 	bfi	r3, r2, #4, #4
 8001d58:	743b      	strb	r3, [r7, #16]
    ret = lis2dw12_write_reg(ctx, LIS2DW12_CTRL1, (uint8_t *) &ctrl1, 1);
 8001d5a:	f107 0210 	add.w	r2, r7, #16
 8001d5e:	2301      	movs	r3, #1
 8001d60:	2120      	movs	r1, #32
 8001d62:	6878      	ldr	r0, [r7, #4]
 8001d64:	f7ff fec0 	bl	8001ae8 <lis2dw12_write_reg>
 8001d68:	6178      	str	r0, [r7, #20]
  }

  if (ret == 0)
 8001d6a:	697b      	ldr	r3, [r7, #20]
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d107      	bne.n	8001d80 <lis2dw12_data_rate_set+0x58>
  {
    ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL3, (uint8_t *) &ctrl3, 1);
 8001d70:	f107 020c 	add.w	r2, r7, #12
 8001d74:	2301      	movs	r3, #1
 8001d76:	2122      	movs	r1, #34	; 0x22
 8001d78:	6878      	ldr	r0, [r7, #4]
 8001d7a:	f7ff fe9d 	bl	8001ab8 <lis2dw12_read_reg>
 8001d7e:	6178      	str	r0, [r7, #20]
  }

  if (ret == 0)
 8001d80:	697b      	ldr	r3, [r7, #20]
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d110      	bne.n	8001da8 <lis2dw12_data_rate_set+0x80>
  {
    ctrl3.slp_mode = ((uint8_t) val & 0x30U) >> 4;
 8001d86:	78fb      	ldrb	r3, [r7, #3]
 8001d88:	091b      	lsrs	r3, r3, #4
 8001d8a:	f003 0303 	and.w	r3, r3, #3
 8001d8e:	b2da      	uxtb	r2, r3
 8001d90:	7b3b      	ldrb	r3, [r7, #12]
 8001d92:	f362 0301 	bfi	r3, r2, #0, #2
 8001d96:	733b      	strb	r3, [r7, #12]
    ret = lis2dw12_write_reg(ctx, LIS2DW12_CTRL3, (uint8_t *) &ctrl3, 1);
 8001d98:	f107 020c 	add.w	r2, r7, #12
 8001d9c:	2301      	movs	r3, #1
 8001d9e:	2122      	movs	r1, #34	; 0x22
 8001da0:	6878      	ldr	r0, [r7, #4]
 8001da2:	f7ff fea1 	bl	8001ae8 <lis2dw12_write_reg>
 8001da6:	6178      	str	r0, [r7, #20]
  }

  return ret;
 8001da8:	697b      	ldr	r3, [r7, #20]
}
 8001daa:	4618      	mov	r0, r3
 8001dac:	3718      	adds	r7, #24
 8001dae:	46bd      	mov	sp, r7
 8001db0:	bd80      	pop	{r7, pc}
	...

08001db4 <lis2dw12_data_rate_get>:
  * @param  val      Get the values of odr in reg CTRL1
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_data_rate_get(stmdev_ctx_t *ctx, lis2dw12_odr_t *val)
{
 8001db4:	b580      	push	{r7, lr}
 8001db6:	b086      	sub	sp, #24
 8001db8:	af00      	add	r7, sp, #0
 8001dba:	6078      	str	r0, [r7, #4]
 8001dbc:	6039      	str	r1, [r7, #0]
  lis2dw12_ctrl1_t ctrl1;
  lis2dw12_ctrl3_t ctrl3;
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL1, (uint8_t *) &ctrl1, 1);
 8001dbe:	f107 0210 	add.w	r2, r7, #16
 8001dc2:	2301      	movs	r3, #1
 8001dc4:	2120      	movs	r1, #32
 8001dc6:	6878      	ldr	r0, [r7, #4]
 8001dc8:	f7ff fe76 	bl	8001ab8 <lis2dw12_read_reg>
 8001dcc:	6178      	str	r0, [r7, #20]

  if (ret == 0)
 8001dce:	697b      	ldr	r3, [r7, #20]
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	f040 80b3 	bne.w	8001f3c <lis2dw12_data_rate_get+0x188>
  {
    ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL3, (uint8_t *) &ctrl3, 1);
 8001dd6:	f107 020c 	add.w	r2, r7, #12
 8001dda:	2301      	movs	r3, #1
 8001ddc:	2122      	movs	r1, #34	; 0x22
 8001dde:	6878      	ldr	r0, [r7, #4]
 8001de0:	f7ff fe6a 	bl	8001ab8 <lis2dw12_read_reg>
 8001de4:	6178      	str	r0, [r7, #20]

    switch ((ctrl3.slp_mode << 4) + ctrl1.odr)
 8001de6:	7b3b      	ldrb	r3, [r7, #12]
 8001de8:	f3c3 0301 	ubfx	r3, r3, #0, #2
 8001dec:	b2db      	uxtb	r3, r3
 8001dee:	011b      	lsls	r3, r3, #4
 8001df0:	7c3a      	ldrb	r2, [r7, #16]
 8001df2:	f3c2 1203 	ubfx	r2, r2, #4, #4
 8001df6:	b2d2      	uxtb	r2, r2
 8001df8:	4413      	add	r3, r2
 8001dfa:	2b32      	cmp	r3, #50	; 0x32
 8001dfc:	f200 809a 	bhi.w	8001f34 <lis2dw12_data_rate_get+0x180>
 8001e00:	a201      	add	r2, pc, #4	; (adr r2, 8001e08 <lis2dw12_data_rate_get+0x54>)
 8001e02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e06:	bf00      	nop
 8001e08:	08001ed5 	.word	0x08001ed5
 8001e0c:	08001edd 	.word	0x08001edd
 8001e10:	08001ee5 	.word	0x08001ee5
 8001e14:	08001eed 	.word	0x08001eed
 8001e18:	08001ef5 	.word	0x08001ef5
 8001e1c:	08001efd 	.word	0x08001efd
 8001e20:	08001f05 	.word	0x08001f05
 8001e24:	08001f0d 	.word	0x08001f0d
 8001e28:	08001f15 	.word	0x08001f15
 8001e2c:	08001f1d 	.word	0x08001f1d
 8001e30:	08001f35 	.word	0x08001f35
 8001e34:	08001f35 	.word	0x08001f35
 8001e38:	08001f35 	.word	0x08001f35
 8001e3c:	08001f35 	.word	0x08001f35
 8001e40:	08001f35 	.word	0x08001f35
 8001e44:	08001f35 	.word	0x08001f35
 8001e48:	08001f35 	.word	0x08001f35
 8001e4c:	08001f35 	.word	0x08001f35
 8001e50:	08001f2d 	.word	0x08001f2d
 8001e54:	08001f35 	.word	0x08001f35
 8001e58:	08001f35 	.word	0x08001f35
 8001e5c:	08001f35 	.word	0x08001f35
 8001e60:	08001f35 	.word	0x08001f35
 8001e64:	08001f35 	.word	0x08001f35
 8001e68:	08001f35 	.word	0x08001f35
 8001e6c:	08001f35 	.word	0x08001f35
 8001e70:	08001f35 	.word	0x08001f35
 8001e74:	08001f35 	.word	0x08001f35
 8001e78:	08001f35 	.word	0x08001f35
 8001e7c:	08001f35 	.word	0x08001f35
 8001e80:	08001f35 	.word	0x08001f35
 8001e84:	08001f35 	.word	0x08001f35
 8001e88:	08001f35 	.word	0x08001f35
 8001e8c:	08001f35 	.word	0x08001f35
 8001e90:	08001f35 	.word	0x08001f35
 8001e94:	08001f35 	.word	0x08001f35
 8001e98:	08001f35 	.word	0x08001f35
 8001e9c:	08001f35 	.word	0x08001f35
 8001ea0:	08001f35 	.word	0x08001f35
 8001ea4:	08001f35 	.word	0x08001f35
 8001ea8:	08001f35 	.word	0x08001f35
 8001eac:	08001f35 	.word	0x08001f35
 8001eb0:	08001f35 	.word	0x08001f35
 8001eb4:	08001f35 	.word	0x08001f35
 8001eb8:	08001f35 	.word	0x08001f35
 8001ebc:	08001f35 	.word	0x08001f35
 8001ec0:	08001f35 	.word	0x08001f35
 8001ec4:	08001f35 	.word	0x08001f35
 8001ec8:	08001f35 	.word	0x08001f35
 8001ecc:	08001f35 	.word	0x08001f35
 8001ed0:	08001f25 	.word	0x08001f25
    {
      case LIS2DW12_XL_ODR_OFF:
        *val = LIS2DW12_XL_ODR_OFF;
 8001ed4:	683b      	ldr	r3, [r7, #0]
 8001ed6:	2200      	movs	r2, #0
 8001ed8:	701a      	strb	r2, [r3, #0]
        break;
 8001eda:	e030      	b.n	8001f3e <lis2dw12_data_rate_get+0x18a>

      case LIS2DW12_XL_ODR_1Hz6_LP_ONLY:
        *val = LIS2DW12_XL_ODR_1Hz6_LP_ONLY;
 8001edc:	683b      	ldr	r3, [r7, #0]
 8001ede:	2201      	movs	r2, #1
 8001ee0:	701a      	strb	r2, [r3, #0]
        break;
 8001ee2:	e02c      	b.n	8001f3e <lis2dw12_data_rate_get+0x18a>

      case LIS2DW12_XL_ODR_12Hz5:
        *val = LIS2DW12_XL_ODR_12Hz5;
 8001ee4:	683b      	ldr	r3, [r7, #0]
 8001ee6:	2202      	movs	r2, #2
 8001ee8:	701a      	strb	r2, [r3, #0]
        break;
 8001eea:	e028      	b.n	8001f3e <lis2dw12_data_rate_get+0x18a>

      case LIS2DW12_XL_ODR_25Hz:
        *val = LIS2DW12_XL_ODR_25Hz;
 8001eec:	683b      	ldr	r3, [r7, #0]
 8001eee:	2203      	movs	r2, #3
 8001ef0:	701a      	strb	r2, [r3, #0]
        break;
 8001ef2:	e024      	b.n	8001f3e <lis2dw12_data_rate_get+0x18a>

      case LIS2DW12_XL_ODR_50Hz:
        *val = LIS2DW12_XL_ODR_50Hz;
 8001ef4:	683b      	ldr	r3, [r7, #0]
 8001ef6:	2204      	movs	r2, #4
 8001ef8:	701a      	strb	r2, [r3, #0]
        break;
 8001efa:	e020      	b.n	8001f3e <lis2dw12_data_rate_get+0x18a>

      case LIS2DW12_XL_ODR_100Hz:
        *val = LIS2DW12_XL_ODR_100Hz;
 8001efc:	683b      	ldr	r3, [r7, #0]
 8001efe:	2205      	movs	r2, #5
 8001f00:	701a      	strb	r2, [r3, #0]
        break;
 8001f02:	e01c      	b.n	8001f3e <lis2dw12_data_rate_get+0x18a>

      case LIS2DW12_XL_ODR_200Hz:
        *val = LIS2DW12_XL_ODR_200Hz;
 8001f04:	683b      	ldr	r3, [r7, #0]
 8001f06:	2206      	movs	r2, #6
 8001f08:	701a      	strb	r2, [r3, #0]
        break;
 8001f0a:	e018      	b.n	8001f3e <lis2dw12_data_rate_get+0x18a>

      case LIS2DW12_XL_ODR_400Hz:
        *val = LIS2DW12_XL_ODR_400Hz;
 8001f0c:	683b      	ldr	r3, [r7, #0]
 8001f0e:	2207      	movs	r2, #7
 8001f10:	701a      	strb	r2, [r3, #0]
        break;
 8001f12:	e014      	b.n	8001f3e <lis2dw12_data_rate_get+0x18a>

      case LIS2DW12_XL_ODR_800Hz:
        *val = LIS2DW12_XL_ODR_800Hz;
 8001f14:	683b      	ldr	r3, [r7, #0]
 8001f16:	2208      	movs	r2, #8
 8001f18:	701a      	strb	r2, [r3, #0]
        break;
 8001f1a:	e010      	b.n	8001f3e <lis2dw12_data_rate_get+0x18a>

      case LIS2DW12_XL_ODR_1k6Hz:
        *val = LIS2DW12_XL_ODR_1k6Hz;
 8001f1c:	683b      	ldr	r3, [r7, #0]
 8001f1e:	2209      	movs	r2, #9
 8001f20:	701a      	strb	r2, [r3, #0]
        break;
 8001f22:	e00c      	b.n	8001f3e <lis2dw12_data_rate_get+0x18a>

      case LIS2DW12_XL_SET_SW_TRIG:
        *val = LIS2DW12_XL_SET_SW_TRIG;
 8001f24:	683b      	ldr	r3, [r7, #0]
 8001f26:	2232      	movs	r2, #50	; 0x32
 8001f28:	701a      	strb	r2, [r3, #0]
        break;
 8001f2a:	e008      	b.n	8001f3e <lis2dw12_data_rate_get+0x18a>

      case LIS2DW12_XL_SET_PIN_TRIG:
        *val = LIS2DW12_XL_SET_PIN_TRIG;
 8001f2c:	683b      	ldr	r3, [r7, #0]
 8001f2e:	2212      	movs	r2, #18
 8001f30:	701a      	strb	r2, [r3, #0]
        break;
 8001f32:	e004      	b.n	8001f3e <lis2dw12_data_rate_get+0x18a>

      default:
        *val = LIS2DW12_XL_ODR_OFF;
 8001f34:	683b      	ldr	r3, [r7, #0]
 8001f36:	2200      	movs	r2, #0
 8001f38:	701a      	strb	r2, [r3, #0]
        break;
 8001f3a:	e000      	b.n	8001f3e <lis2dw12_data_rate_get+0x18a>
    }
  }
 8001f3c:	bf00      	nop

  return ret;
 8001f3e:	697b      	ldr	r3, [r7, #20]
}
 8001f40:	4618      	mov	r0, r3
 8001f42:	3718      	adds	r7, #24
 8001f44:	46bd      	mov	sp, r7
 8001f46:	bd80      	pop	{r7, pc}

08001f48 <lis2dw12_block_data_update_set>:
  * @param  val      change the values of bdu in reg CTRL2
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8001f48:	b580      	push	{r7, lr}
 8001f4a:	b084      	sub	sp, #16
 8001f4c:	af00      	add	r7, sp, #0
 8001f4e:	6078      	str	r0, [r7, #4]
 8001f50:	460b      	mov	r3, r1
 8001f52:	70fb      	strb	r3, [r7, #3]
  lis2dw12_ctrl2_t reg;
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL2, (uint8_t *) &reg, 1);
 8001f54:	f107 0208 	add.w	r2, r7, #8
 8001f58:	2301      	movs	r3, #1
 8001f5a:	2121      	movs	r1, #33	; 0x21
 8001f5c:	6878      	ldr	r0, [r7, #4]
 8001f5e:	f7ff fdab 	bl	8001ab8 <lis2dw12_read_reg>
 8001f62:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d10f      	bne.n	8001f8a <lis2dw12_block_data_update_set+0x42>
  {
    reg.bdu = val;
 8001f6a:	78fb      	ldrb	r3, [r7, #3]
 8001f6c:	f003 0301 	and.w	r3, r3, #1
 8001f70:	b2da      	uxtb	r2, r3
 8001f72:	7a3b      	ldrb	r3, [r7, #8]
 8001f74:	f362 03c3 	bfi	r3, r2, #3, #1
 8001f78:	723b      	strb	r3, [r7, #8]
    ret = lis2dw12_write_reg(ctx, LIS2DW12_CTRL2, (uint8_t *) &reg, 1);
 8001f7a:	f107 0208 	add.w	r2, r7, #8
 8001f7e:	2301      	movs	r3, #1
 8001f80:	2121      	movs	r1, #33	; 0x21
 8001f82:	6878      	ldr	r0, [r7, #4]
 8001f84:	f7ff fdb0 	bl	8001ae8 <lis2dw12_write_reg>
 8001f88:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8001f8a:	68fb      	ldr	r3, [r7, #12]
}
 8001f8c:	4618      	mov	r0, r3
 8001f8e:	3710      	adds	r7, #16
 8001f90:	46bd      	mov	sp, r7
 8001f92:	bd80      	pop	{r7, pc}

08001f94 <lis2dw12_full_scale_set>:
  * @param  val      change the values of fs in reg CTRL6
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_full_scale_set(stmdev_ctx_t *ctx, lis2dw12_fs_t val)
{
 8001f94:	b580      	push	{r7, lr}
 8001f96:	b084      	sub	sp, #16
 8001f98:	af00      	add	r7, sp, #0
 8001f9a:	6078      	str	r0, [r7, #4]
 8001f9c:	460b      	mov	r3, r1
 8001f9e:	70fb      	strb	r3, [r7, #3]
  lis2dw12_ctrl6_t reg;
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL6, (uint8_t *) &reg, 1);
 8001fa0:	f107 0208 	add.w	r2, r7, #8
 8001fa4:	2301      	movs	r3, #1
 8001fa6:	2125      	movs	r1, #37	; 0x25
 8001fa8:	6878      	ldr	r0, [r7, #4]
 8001faa:	f7ff fd85 	bl	8001ab8 <lis2dw12_read_reg>
 8001fae:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d10f      	bne.n	8001fd6 <lis2dw12_full_scale_set+0x42>
  {
    reg.fs = (uint8_t) val;
 8001fb6:	78fb      	ldrb	r3, [r7, #3]
 8001fb8:	f003 0303 	and.w	r3, r3, #3
 8001fbc:	b2da      	uxtb	r2, r3
 8001fbe:	7a3b      	ldrb	r3, [r7, #8]
 8001fc0:	f362 1305 	bfi	r3, r2, #4, #2
 8001fc4:	723b      	strb	r3, [r7, #8]
    ret = lis2dw12_write_reg(ctx, LIS2DW12_CTRL6, (uint8_t *) &reg, 1);
 8001fc6:	f107 0208 	add.w	r2, r7, #8
 8001fca:	2301      	movs	r3, #1
 8001fcc:	2125      	movs	r1, #37	; 0x25
 8001fce:	6878      	ldr	r0, [r7, #4]
 8001fd0:	f7ff fd8a 	bl	8001ae8 <lis2dw12_write_reg>
 8001fd4:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8001fd6:	68fb      	ldr	r3, [r7, #12]
}
 8001fd8:	4618      	mov	r0, r3
 8001fda:	3710      	adds	r7, #16
 8001fdc:	46bd      	mov	sp, r7
 8001fde:	bd80      	pop	{r7, pc}

08001fe0 <lis2dw12_full_scale_get>:
  * @param  val      Get the values of fs in reg CTRL6
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_full_scale_get(stmdev_ctx_t *ctx, lis2dw12_fs_t *val)
{
 8001fe0:	b580      	push	{r7, lr}
 8001fe2:	b084      	sub	sp, #16
 8001fe4:	af00      	add	r7, sp, #0
 8001fe6:	6078      	str	r0, [r7, #4]
 8001fe8:	6039      	str	r1, [r7, #0]
  lis2dw12_ctrl6_t reg;
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL6, (uint8_t *) &reg, 1);
 8001fea:	f107 0208 	add.w	r2, r7, #8
 8001fee:	2301      	movs	r3, #1
 8001ff0:	2125      	movs	r1, #37	; 0x25
 8001ff2:	6878      	ldr	r0, [r7, #4]
 8001ff4:	f7ff fd60 	bl	8001ab8 <lis2dw12_read_reg>
 8001ff8:	60f8      	str	r0, [r7, #12]

  switch (reg.fs)
 8001ffa:	7a3b      	ldrb	r3, [r7, #8]
 8001ffc:	f3c3 1301 	ubfx	r3, r3, #4, #2
 8002000:	b2db      	uxtb	r3, r3
 8002002:	2b03      	cmp	r3, #3
 8002004:	d81a      	bhi.n	800203c <lis2dw12_full_scale_get+0x5c>
 8002006:	a201      	add	r2, pc, #4	; (adr r2, 800200c <lis2dw12_full_scale_get+0x2c>)
 8002008:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800200c:	0800201d 	.word	0x0800201d
 8002010:	08002025 	.word	0x08002025
 8002014:	0800202d 	.word	0x0800202d
 8002018:	08002035 	.word	0x08002035
  {
    case LIS2DW12_2g:
      *val = LIS2DW12_2g;
 800201c:	683b      	ldr	r3, [r7, #0]
 800201e:	2200      	movs	r2, #0
 8002020:	701a      	strb	r2, [r3, #0]
      break;
 8002022:	e00f      	b.n	8002044 <lis2dw12_full_scale_get+0x64>

    case LIS2DW12_4g:
      *val = LIS2DW12_4g;
 8002024:	683b      	ldr	r3, [r7, #0]
 8002026:	2201      	movs	r2, #1
 8002028:	701a      	strb	r2, [r3, #0]
      break;
 800202a:	e00b      	b.n	8002044 <lis2dw12_full_scale_get+0x64>

    case LIS2DW12_8g:
      *val = LIS2DW12_8g;
 800202c:	683b      	ldr	r3, [r7, #0]
 800202e:	2202      	movs	r2, #2
 8002030:	701a      	strb	r2, [r3, #0]
      break;
 8002032:	e007      	b.n	8002044 <lis2dw12_full_scale_get+0x64>

    case LIS2DW12_16g:
      *val = LIS2DW12_16g;
 8002034:	683b      	ldr	r3, [r7, #0]
 8002036:	2203      	movs	r2, #3
 8002038:	701a      	strb	r2, [r3, #0]
      break;
 800203a:	e003      	b.n	8002044 <lis2dw12_full_scale_get+0x64>

    default:
      *val = LIS2DW12_2g;
 800203c:	683b      	ldr	r3, [r7, #0]
 800203e:	2200      	movs	r2, #0
 8002040:	701a      	strb	r2, [r3, #0]
      break;
 8002042:	bf00      	nop
  }

  return ret;
 8002044:	68fb      	ldr	r3, [r7, #12]
}
 8002046:	4618      	mov	r0, r3
 8002048:	3710      	adds	r7, #16
 800204a:	46bd      	mov	sp, r7
 800204c:	bd80      	pop	{r7, pc}
 800204e:	bf00      	nop

08002050 <lis2dw12_acceleration_raw_get>:
  * @param  val      buffer that stores data read
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_acceleration_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 8002050:	b580      	push	{r7, lr}
 8002052:	b086      	sub	sp, #24
 8002054:	af00      	add	r7, sp, #0
 8002056:	6078      	str	r0, [r7, #4]
 8002058:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_OUT_X_L, buff, 6);
 800205a:	f107 020c 	add.w	r2, r7, #12
 800205e:	2306      	movs	r3, #6
 8002060:	2128      	movs	r1, #40	; 0x28
 8002062:	6878      	ldr	r0, [r7, #4]
 8002064:	f7ff fd28 	bl	8001ab8 <lis2dw12_read_reg>
 8002068:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 800206a:	7b7b      	ldrb	r3, [r7, #13]
 800206c:	b21a      	sxth	r2, r3
 800206e:	683b      	ldr	r3, [r7, #0]
 8002070:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 8002072:	683b      	ldr	r3, [r7, #0]
 8002074:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002078:	b29b      	uxth	r3, r3
 800207a:	021b      	lsls	r3, r3, #8
 800207c:	b29a      	uxth	r2, r3
 800207e:	7b3b      	ldrb	r3, [r7, #12]
 8002080:	b29b      	uxth	r3, r3
 8002082:	4413      	add	r3, r2
 8002084:	b29b      	uxth	r3, r3
 8002086:	b21a      	sxth	r2, r3
 8002088:	683b      	ldr	r3, [r7, #0]
 800208a:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 800208c:	7bfa      	ldrb	r2, [r7, #15]
 800208e:	683b      	ldr	r3, [r7, #0]
 8002090:	3302      	adds	r3, #2
 8002092:	b212      	sxth	r2, r2
 8002094:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 8002096:	683b      	ldr	r3, [r7, #0]
 8002098:	3302      	adds	r3, #2
 800209a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800209e:	b29b      	uxth	r3, r3
 80020a0:	021b      	lsls	r3, r3, #8
 80020a2:	b29a      	uxth	r2, r3
 80020a4:	7bbb      	ldrb	r3, [r7, #14]
 80020a6:	b29b      	uxth	r3, r3
 80020a8:	4413      	add	r3, r2
 80020aa:	b29a      	uxth	r2, r3
 80020ac:	683b      	ldr	r3, [r7, #0]
 80020ae:	3302      	adds	r3, #2
 80020b0:	b212      	sxth	r2, r2
 80020b2:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 80020b4:	7c7a      	ldrb	r2, [r7, #17]
 80020b6:	683b      	ldr	r3, [r7, #0]
 80020b8:	3304      	adds	r3, #4
 80020ba:	b212      	sxth	r2, r2
 80020bc:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 80020be:	683b      	ldr	r3, [r7, #0]
 80020c0:	3304      	adds	r3, #4
 80020c2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80020c6:	b29b      	uxth	r3, r3
 80020c8:	021b      	lsls	r3, r3, #8
 80020ca:	b29a      	uxth	r2, r3
 80020cc:	7c3b      	ldrb	r3, [r7, #16]
 80020ce:	b29b      	uxth	r3, r3
 80020d0:	4413      	add	r3, r2
 80020d2:	b29a      	uxth	r2, r3
 80020d4:	683b      	ldr	r3, [r7, #0]
 80020d6:	3304      	adds	r3, #4
 80020d8:	b212      	sxth	r2, r2
 80020da:	801a      	strh	r2, [r3, #0]

  return ret;
 80020dc:	697b      	ldr	r3, [r7, #20]
}
 80020de:	4618      	mov	r0, r3
 80020e0:	3718      	adds	r7, #24
 80020e2:	46bd      	mov	sp, r7
 80020e4:	bd80      	pop	{r7, pc}

080020e6 <lis2dw12_device_id_get>:
  * @param  buff     buffer that stores data read
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 80020e6:	b580      	push	{r7, lr}
 80020e8:	b084      	sub	sp, #16
 80020ea:	af00      	add	r7, sp, #0
 80020ec:	6078      	str	r0, [r7, #4]
 80020ee:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_WHO_AM_I, buff, 1);
 80020f0:	2301      	movs	r3, #1
 80020f2:	683a      	ldr	r2, [r7, #0]
 80020f4:	210f      	movs	r1, #15
 80020f6:	6878      	ldr	r0, [r7, #4]
 80020f8:	f7ff fcde 	bl	8001ab8 <lis2dw12_read_reg>
 80020fc:	60f8      	str	r0, [r7, #12]

  return ret;
 80020fe:	68fb      	ldr	r3, [r7, #12]
}
 8002100:	4618      	mov	r0, r3
 8002102:	3710      	adds	r7, #16
 8002104:	46bd      	mov	sp, r7
 8002106:	bd80      	pop	{r7, pc}

08002108 <lis2dw12_auto_increment_set>:
  * @param  val      change the values of if_add_inc in reg CTRL2
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_auto_increment_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8002108:	b580      	push	{r7, lr}
 800210a:	b084      	sub	sp, #16
 800210c:	af00      	add	r7, sp, #0
 800210e:	6078      	str	r0, [r7, #4]
 8002110:	460b      	mov	r3, r1
 8002112:	70fb      	strb	r3, [r7, #3]
  lis2dw12_ctrl2_t reg;
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL2, (uint8_t *) &reg, 1);
 8002114:	f107 0208 	add.w	r2, r7, #8
 8002118:	2301      	movs	r3, #1
 800211a:	2121      	movs	r1, #33	; 0x21
 800211c:	6878      	ldr	r0, [r7, #4]
 800211e:	f7ff fccb 	bl	8001ab8 <lis2dw12_read_reg>
 8002122:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	2b00      	cmp	r3, #0
 8002128:	d10f      	bne.n	800214a <lis2dw12_auto_increment_set+0x42>
  {
    reg.if_add_inc = val;
 800212a:	78fb      	ldrb	r3, [r7, #3]
 800212c:	f003 0301 	and.w	r3, r3, #1
 8002130:	b2da      	uxtb	r2, r3
 8002132:	7a3b      	ldrb	r3, [r7, #8]
 8002134:	f362 0382 	bfi	r3, r2, #2, #1
 8002138:	723b      	strb	r3, [r7, #8]
    ret = lis2dw12_write_reg(ctx, LIS2DW12_CTRL2, (uint8_t *) &reg, 1);
 800213a:	f107 0208 	add.w	r2, r7, #8
 800213e:	2301      	movs	r3, #1
 8002140:	2121      	movs	r1, #33	; 0x21
 8002142:	6878      	ldr	r0, [r7, #4]
 8002144:	f7ff fcd0 	bl	8001ae8 <lis2dw12_write_reg>
 8002148:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 800214a:	68fb      	ldr	r3, [r7, #12]
}
 800214c:	4618      	mov	r0, r3
 800214e:	3710      	adds	r7, #16
 8002150:	46bd      	mov	sp, r7
 8002152:	bd80      	pop	{r7, pc}

08002154 <lis2dw12_fifo_mode_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_fifo_mode_set(stmdev_ctx_t *ctx,
                               lis2dw12_fmode_t val)
{
 8002154:	b580      	push	{r7, lr}
 8002156:	b084      	sub	sp, #16
 8002158:	af00      	add	r7, sp, #0
 800215a:	6078      	str	r0, [r7, #4]
 800215c:	460b      	mov	r3, r1
 800215e:	70fb      	strb	r3, [r7, #3]
  lis2dw12_fifo_ctrl_t reg;
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_FIFO_CTRL, (uint8_t *) &reg, 1);
 8002160:	f107 0208 	add.w	r2, r7, #8
 8002164:	2301      	movs	r3, #1
 8002166:	212e      	movs	r1, #46	; 0x2e
 8002168:	6878      	ldr	r0, [r7, #4]
 800216a:	f7ff fca5 	bl	8001ab8 <lis2dw12_read_reg>
 800216e:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	2b00      	cmp	r3, #0
 8002174:	d10f      	bne.n	8002196 <lis2dw12_fifo_mode_set+0x42>
  {
    reg.fmode = (uint8_t) val;
 8002176:	78fb      	ldrb	r3, [r7, #3]
 8002178:	f003 0307 	and.w	r3, r3, #7
 800217c:	b2da      	uxtb	r2, r3
 800217e:	7a3b      	ldrb	r3, [r7, #8]
 8002180:	f362 1347 	bfi	r3, r2, #5, #3
 8002184:	723b      	strb	r3, [r7, #8]
    ret = lis2dw12_write_reg(ctx, LIS2DW12_FIFO_CTRL, (uint8_t *) &reg, 1);
 8002186:	f107 0208 	add.w	r2, r7, #8
 800218a:	2301      	movs	r3, #1
 800218c:	212e      	movs	r1, #46	; 0x2e
 800218e:	6878      	ldr	r0, [r7, #4]
 8002190:	f7ff fcaa 	bl	8001ae8 <lis2dw12_write_reg>
 8002194:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8002196:	68fb      	ldr	r3, [r7, #12]
}
 8002198:	4618      	mov	r0, r3
 800219a:	3710      	adds	r7, #16
 800219c:	46bd      	mov	sp, r7
 800219e:	bd80      	pop	{r7, pc}

080021a0 <LIS2MDL_RegisterBusIO>:
  * @brief  Register Component Bus IO operations
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_RegisterBusIO(LIS2MDL_Object_t *pObj, LIS2MDL_IO_t *pIO)
{
 80021a0:	b580      	push	{r7, lr}
 80021a2:	b084      	sub	sp, #16
 80021a4:	af00      	add	r7, sp, #0
 80021a6:	6078      	str	r0, [r7, #4]
 80021a8:	6039      	str	r1, [r7, #0]
  int32_t ret = LIS2MDL_OK;
 80021aa:	2300      	movs	r3, #0
 80021ac:	60fb      	str	r3, [r7, #12]

  if (pObj == NULL)
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d103      	bne.n	80021bc <LIS2MDL_RegisterBusIO+0x1c>
  {
    ret = LIS2MDL_ERROR;
 80021b4:	f04f 33ff 	mov.w	r3, #4294967295
 80021b8:	60fb      	str	r3, [r7, #12]
 80021ba:	e067      	b.n	800228c <LIS2MDL_RegisterBusIO+0xec>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 80021bc:	683b      	ldr	r3, [r7, #0]
 80021be:	681a      	ldr	r2, [r3, #0]
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 80021c4:	683b      	ldr	r3, [r7, #0]
 80021c6:	685a      	ldr	r2, [r3, #4]
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	605a      	str	r2, [r3, #4]
    pObj->IO.BusType   = pIO->BusType;
 80021cc:	683b      	ldr	r3, [r7, #0]
 80021ce:	689a      	ldr	r2, [r3, #8]
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	609a      	str	r2, [r3, #8]
    pObj->IO.Address   = pIO->Address;
 80021d4:	683b      	ldr	r3, [r7, #0]
 80021d6:	7b1a      	ldrb	r2, [r3, #12]
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	731a      	strb	r2, [r3, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 80021dc:	683b      	ldr	r3, [r7, #0]
 80021de:	691a      	ldr	r2, [r3, #16]
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	611a      	str	r2, [r3, #16]
    pObj->IO.ReadReg   = pIO->ReadReg;
 80021e4:	683b      	ldr	r3, [r7, #0]
 80021e6:	695a      	ldr	r2, [r3, #20]
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	615a      	str	r2, [r3, #20]
    pObj->IO.GetTick   = pIO->GetTick;
 80021ec:	683b      	ldr	r3, [r7, #0]
 80021ee:	699a      	ldr	r2, [r3, #24]
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	619a      	str	r2, [r3, #24]

    pObj->Ctx.read_reg  = ReadMagRegWrap;
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	4a28      	ldr	r2, [pc, #160]	; (8002298 <LIS2MDL_RegisterBusIO+0xf8>)
 80021f8:	625a      	str	r2, [r3, #36]	; 0x24
    pObj->Ctx.write_reg = WriteMagRegWrap;
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	4a27      	ldr	r2, [pc, #156]	; (800229c <LIS2MDL_RegisterBusIO+0xfc>)
 80021fe:	621a      	str	r2, [r3, #32]
    pObj->Ctx.mdelay    = pIO->Delay;
 8002200:	683b      	ldr	r3, [r7, #0]
 8002202:	69da      	ldr	r2, [r3, #28]
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	629a      	str	r2, [r3, #40]	; 0x28
    pObj->Ctx.handle    = pObj;
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	687a      	ldr	r2, [r7, #4]
 800220c:	62da      	str	r2, [r3, #44]	; 0x2c

    if (pObj->IO.Init == NULL)
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	2b00      	cmp	r3, #0
 8002214:	d103      	bne.n	800221e <LIS2MDL_RegisterBusIO+0x7e>
    {
      ret = LIS2MDL_ERROR;
 8002216:	f04f 33ff 	mov.w	r3, #4294967295
 800221a:	60fb      	str	r3, [r7, #12]
 800221c:	e036      	b.n	800228c <LIS2MDL_RegisterBusIO+0xec>
    }
    else if (pObj->IO.Init() != LIS2MDL_OK)
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	4798      	blx	r3
 8002224:	4603      	mov	r3, r0
 8002226:	2b00      	cmp	r3, #0
 8002228:	d003      	beq.n	8002232 <LIS2MDL_RegisterBusIO+0x92>
    {
      ret = LIS2MDL_ERROR;
 800222a:	f04f 33ff 	mov.w	r3, #4294967295
 800222e:	60fb      	str	r3, [r7, #12]
 8002230:	e02c      	b.n	800228c <LIS2MDL_RegisterBusIO+0xec>
    }
    else
    {
      if (pObj->IO.BusType != LIS2MDL_I2C_BUS) /* If the bus type is not I2C */
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	689b      	ldr	r3, [r3, #8]
 8002236:	2b00      	cmp	r3, #0
 8002238:	d028      	beq.n	800228c <LIS2MDL_RegisterBusIO+0xec>
      {
        /* Disable I2C interface support and enable eventually SPI 4-Wires only the first time */
        if (pObj->is_initialized == 0U)
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002240:	2b00      	cmp	r3, #0
 8002242:	d123      	bne.n	800228c <LIS2MDL_RegisterBusIO+0xec>
        {
          if (pObj->IO.BusType == LIS2MDL_SPI_4WIRES_BUS) /* SPI 4-Wires */
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	689b      	ldr	r3, [r3, #8]
 8002248:	2b01      	cmp	r3, #1
 800224a:	d10d      	bne.n	8002268 <LIS2MDL_RegisterBusIO+0xc8>
          {
            /* Enable SPI 4-Wires and disable I2C support on the component */
            uint8_t data = 0x34;
 800224c:	2334      	movs	r3, #52	; 0x34
 800224e:	72fb      	strb	r3, [r7, #11]

            if (LIS2MDL_Write_Reg(pObj, LIS2MDL_CFG_REG_C, data) != LIS2MDL_OK)
 8002250:	7afb      	ldrb	r3, [r7, #11]
 8002252:	461a      	mov	r2, r3
 8002254:	2162      	movs	r1, #98	; 0x62
 8002256:	6878      	ldr	r0, [r7, #4]
 8002258:	f000 fb1b 	bl	8002892 <LIS2MDL_Write_Reg>
 800225c:	4603      	mov	r3, r0
 800225e:	2b00      	cmp	r3, #0
 8002260:	d014      	beq.n	800228c <LIS2MDL_RegisterBusIO+0xec>
            {
              return LIS2MDL_ERROR;
 8002262:	f04f 33ff 	mov.w	r3, #4294967295
 8002266:	e012      	b.n	800228e <LIS2MDL_RegisterBusIO+0xee>
            }
          }
          else if (pObj->IO.BusType == LSM6DSOX_SENSORHUB_LIS2MDL_I2C_BUS) /* LSM6DSOX SensorHub with LIS2MDL example */
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	689b      	ldr	r3, [r3, #8]
 800226c:	2b03      	cmp	r3, #3
 800226e:	d101      	bne.n	8002274 <LIS2MDL_RegisterBusIO+0xd4>
          {
            /* Do nothing, just keep I2C support on the component */
            return ret;
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	e00c      	b.n	800228e <LIS2MDL_RegisterBusIO+0xee>
          }
          else
          {
            /* Disable I2C interface on the component */
            if (lis2mdl_i2c_interface_set(&(pObj->Ctx), LIS2MDL_I2C_DISABLE) != LIS2MDL_OK)
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	3320      	adds	r3, #32
 8002278:	2101      	movs	r1, #1
 800227a:	4618      	mov	r0, r3
 800227c:	f000 ff70 	bl	8003160 <lis2mdl_i2c_interface_set>
 8002280:	4603      	mov	r3, r0
 8002282:	2b00      	cmp	r3, #0
 8002284:	d002      	beq.n	800228c <LIS2MDL_RegisterBusIO+0xec>
            {
              return LIS2MDL_ERROR;
 8002286:	f04f 33ff 	mov.w	r3, #4294967295
 800228a:	e000      	b.n	800228e <LIS2MDL_RegisterBusIO+0xee>
        }
      }
    }
  }

  return ret;
 800228c:	68fb      	ldr	r3, [r7, #12]
}
 800228e:	4618      	mov	r0, r3
 8002290:	3710      	adds	r7, #16
 8002292:	46bd      	mov	sp, r7
 8002294:	bd80      	pop	{r7, pc}
 8002296:	bf00      	nop
 8002298:	080028e9 	.word	0x080028e9
 800229c:	0800296b 	.word	0x0800296b

080022a0 <LIS2MDL_Init>:
  * @brief  Initialize the LIS2MDL sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_Init(LIS2MDL_Object_t *pObj)
{
 80022a0:	b580      	push	{r7, lr}
 80022a2:	b084      	sub	sp, #16
 80022a4:	af00      	add	r7, sp, #0
 80022a6:	6078      	str	r0, [r7, #4]
  lis2mdl_cfg_reg_a_t reg_a;
  lis2mdl_cfg_reg_c_t reg_c;

  if (pObj->IO.BusType == LSM6DSOX_SENSORHUB_LIS2MDL_I2C_BUS) /* LSM6DSOX SensorHub with LIS2MDL example */
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	689b      	ldr	r3, [r3, #8]
 80022ac:	2b03      	cmp	r3, #3
 80022ae:	d144      	bne.n	800233a <LIS2MDL_Init+0x9a>
  {
    /* Read configuration from CFG_REG_C & CFG_REG_A regs */
    if (LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData(pObj, LIS2MDL_CFG_REG_C, (uint8_t *)&reg_c, 1) != LIS2MDL_OK)
 80022b0:	f107 0208 	add.w	r2, r7, #8
 80022b4:	2301      	movs	r3, #1
 80022b6:	2162      	movs	r1, #98	; 0x62
 80022b8:	6878      	ldr	r0, [r7, #4]
 80022ba:	f000 fb97 	bl	80029ec <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData>
 80022be:	4603      	mov	r3, r0
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d002      	beq.n	80022ca <LIS2MDL_Init+0x2a>
    {
      return LIS2MDL_ERROR;
 80022c4:	f04f 33ff 	mov.w	r3, #4294967295
 80022c8:	e06c      	b.n	80023a4 <LIS2MDL_Init+0x104>
    }
    if (LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData(pObj, LIS2MDL_CFG_REG_A, (uint8_t *)&reg_a, 1) != LIS2MDL_OK)
 80022ca:	f107 020c 	add.w	r2, r7, #12
 80022ce:	2301      	movs	r3, #1
 80022d0:	2160      	movs	r1, #96	; 0x60
 80022d2:	6878      	ldr	r0, [r7, #4]
 80022d4:	f000 fb8a 	bl	80029ec <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData>
 80022d8:	4603      	mov	r3, r0
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d002      	beq.n	80022e4 <LIS2MDL_Init+0x44>
    {
      return LIS2MDL_ERROR;
 80022de:	f04f 33ff 	mov.w	r3, #4294967295
 80022e2:	e05f      	b.n	80023a4 <LIS2MDL_Init+0x104>
    }

    /* Enable BDU */
    reg_c.bdu = PROPERTY_ENABLE;
 80022e4:	7a3b      	ldrb	r3, [r7, #8]
 80022e6:	f043 0310 	orr.w	r3, r3, #16
 80022ea:	723b      	strb	r3, [r7, #8]

    /* Self Test disabled. */
    reg_c.self_test = PROPERTY_DISABLE;
 80022ec:	7a3b      	ldrb	r3, [r7, #8]
 80022ee:	f36f 0341 	bfc	r3, #1, #1
 80022f2:	723b      	strb	r3, [r7, #8]

    /* Operating mode selection - power down */
    reg_a.md = LIS2MDL_POWER_DOWN;
 80022f4:	7b3b      	ldrb	r3, [r7, #12]
 80022f6:	2202      	movs	r2, #2
 80022f8:	f362 0301 	bfi	r3, r2, #0, #2
 80022fc:	733b      	strb	r3, [r7, #12]

    /* Output data rate selection */
    reg_a.odr = LIS2MDL_ODR_100Hz;
 80022fe:	7b3b      	ldrb	r3, [r7, #12]
 8002300:	f043 030c 	orr.w	r3, r3, #12
 8002304:	733b      	strb	r3, [r7, #12]

    /* Write configuration to CFG_REG_C & CFG_REG_A regs */
    if (LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData(pObj, LIS2MDL_CFG_REG_C, (uint8_t *)&reg_c, 1) != LIS2MDL_OK)
 8002306:	f107 0208 	add.w	r2, r7, #8
 800230a:	2301      	movs	r3, #1
 800230c:	2162      	movs	r1, #98	; 0x62
 800230e:	6878      	ldr	r0, [r7, #4]
 8002310:	f000 fcab 	bl	8002c6a <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData>
 8002314:	4603      	mov	r3, r0
 8002316:	2b00      	cmp	r3, #0
 8002318:	d002      	beq.n	8002320 <LIS2MDL_Init+0x80>
    {
      return LIS2MDL_ERROR;
 800231a:	f04f 33ff 	mov.w	r3, #4294967295
 800231e:	e041      	b.n	80023a4 <LIS2MDL_Init+0x104>
    }
    if (LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData(pObj, LIS2MDL_CFG_REG_A, (uint8_t *)&reg_a, 1) != LIS2MDL_OK)
 8002320:	f107 020c 	add.w	r2, r7, #12
 8002324:	2301      	movs	r3, #1
 8002326:	2160      	movs	r1, #96	; 0x60
 8002328:	6878      	ldr	r0, [r7, #4]
 800232a:	f000 fc9e 	bl	8002c6a <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData>
 800232e:	4603      	mov	r3, r0
 8002330:	2b00      	cmp	r3, #0
 8002332:	d032      	beq.n	800239a <LIS2MDL_Init+0xfa>
    {
      return LIS2MDL_ERROR;
 8002334:	f04f 33ff 	mov.w	r3, #4294967295
 8002338:	e034      	b.n	80023a4 <LIS2MDL_Init+0x104>
    }
  }
  else
  {
    /* Enable BDU */
    if (lis2mdl_block_data_update_set(&(pObj->Ctx), PROPERTY_ENABLE) != LIS2MDL_OK)
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	3320      	adds	r3, #32
 800233e:	2101      	movs	r1, #1
 8002340:	4618      	mov	r0, r3
 8002342:	f000 fe65 	bl	8003010 <lis2mdl_block_data_update_set>
 8002346:	4603      	mov	r3, r0
 8002348:	2b00      	cmp	r3, #0
 800234a:	d002      	beq.n	8002352 <LIS2MDL_Init+0xb2>
    {
      return LIS2MDL_ERROR;
 800234c:	f04f 33ff 	mov.w	r3, #4294967295
 8002350:	e028      	b.n	80023a4 <LIS2MDL_Init+0x104>
    }

    /* Operating mode selection - power down */
    if (lis2mdl_operating_mode_set(&(pObj->Ctx), LIS2MDL_POWER_DOWN) != LIS2MDL_OK)
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	3320      	adds	r3, #32
 8002356:	2102      	movs	r1, #2
 8002358:	4618      	mov	r0, r3
 800235a:	f000 fdd4 	bl	8002f06 <lis2mdl_operating_mode_set>
 800235e:	4603      	mov	r3, r0
 8002360:	2b00      	cmp	r3, #0
 8002362:	d002      	beq.n	800236a <LIS2MDL_Init+0xca>
    {
      return LIS2MDL_ERROR;
 8002364:	f04f 33ff 	mov.w	r3, #4294967295
 8002368:	e01c      	b.n	80023a4 <LIS2MDL_Init+0x104>
    }

    /* Output data rate selection */
    if (lis2mdl_data_rate_set(&(pObj->Ctx), LIS2MDL_ODR_100Hz) != LIS2MDL_OK)
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	3320      	adds	r3, #32
 800236e:	2103      	movs	r1, #3
 8002370:	4618      	mov	r0, r3
 8002372:	f000 fdee 	bl	8002f52 <lis2mdl_data_rate_set>
 8002376:	4603      	mov	r3, r0
 8002378:	2b00      	cmp	r3, #0
 800237a:	d002      	beq.n	8002382 <LIS2MDL_Init+0xe2>
    {
      return LIS2MDL_ERROR;
 800237c:	f04f 33ff 	mov.w	r3, #4294967295
 8002380:	e010      	b.n	80023a4 <LIS2MDL_Init+0x104>
    }

    /* Self Test disabled. */
    if (lis2mdl_self_test_set(&(pObj->Ctx), PROPERTY_DISABLE) != LIS2MDL_OK)
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	3320      	adds	r3, #32
 8002386:	2100      	movs	r1, #0
 8002388:	4618      	mov	r0, r3
 800238a:	f000 fec3 	bl	8003114 <lis2mdl_self_test_set>
 800238e:	4603      	mov	r3, r0
 8002390:	2b00      	cmp	r3, #0
 8002392:	d002      	beq.n	800239a <LIS2MDL_Init+0xfa>
    {
      return LIS2MDL_ERROR;
 8002394:	f04f 33ff 	mov.w	r3, #4294967295
 8002398:	e004      	b.n	80023a4 <LIS2MDL_Init+0x104>
    }
  }

  pObj->is_initialized = 1;
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	2201      	movs	r2, #1
 800239e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return LIS2MDL_OK;
 80023a2:	2300      	movs	r3, #0
}
 80023a4:	4618      	mov	r0, r3
 80023a6:	3710      	adds	r7, #16
 80023a8:	46bd      	mov	sp, r7
 80023aa:	bd80      	pop	{r7, pc}

080023ac <LIS2MDL_DeInit>:
  * @brief  Deinitialize the LIS2MDL magnetometer sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_DeInit(LIS2MDL_Object_t *pObj)
{
 80023ac:	b580      	push	{r7, lr}
 80023ae:	b082      	sub	sp, #8
 80023b0:	af00      	add	r7, sp, #0
 80023b2:	6078      	str	r0, [r7, #4]
  /* Disable the component */
  if (LIS2MDL_MAG_Disable(pObj) != LIS2MDL_OK)
 80023b4:	6878      	ldr	r0, [r7, #4]
 80023b6:	f000 f8a5 	bl	8002504 <LIS2MDL_MAG_Disable>
 80023ba:	4603      	mov	r3, r0
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d002      	beq.n	80023c6 <LIS2MDL_DeInit+0x1a>
  {
    return LIS2MDL_ERROR;
 80023c0:	f04f 33ff 	mov.w	r3, #4294967295
 80023c4:	e004      	b.n	80023d0 <LIS2MDL_DeInit+0x24>
  }

  pObj->is_initialized = 0;
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	2200      	movs	r2, #0
 80023ca:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return LIS2MDL_OK;
 80023ce:	2300      	movs	r3, #0
}
 80023d0:	4618      	mov	r0, r3
 80023d2:	3708      	adds	r7, #8
 80023d4:	46bd      	mov	sp, r7
 80023d6:	bd80      	pop	{r7, pc}

080023d8 <LIS2MDL_ReadID>:
  * @param  pObj the device pObj
  * @param  Id the WHO_AM_I value
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_ReadID(LIS2MDL_Object_t *pObj, uint8_t *Id)
{
 80023d8:	b580      	push	{r7, lr}
 80023da:	b082      	sub	sp, #8
 80023dc:	af00      	add	r7, sp, #0
 80023de:	6078      	str	r0, [r7, #4]
 80023e0:	6039      	str	r1, [r7, #0]
  if (pObj->IO.BusType == LSM6DSOX_SENSORHUB_LIS2MDL_I2C_BUS) /* LSM6DSOX SensorHub with LIS2MDL example */
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	689b      	ldr	r3, [r3, #8]
 80023e6:	2b03      	cmp	r3, #3
 80023e8:	d10b      	bne.n	8002402 <LIS2MDL_ReadID+0x2a>
  {
    if (LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData(pObj, LIS2MDL_WHO_AM_I, Id, 1) != LIS2MDL_OK)
 80023ea:	2301      	movs	r3, #1
 80023ec:	683a      	ldr	r2, [r7, #0]
 80023ee:	214f      	movs	r1, #79	; 0x4f
 80023f0:	6878      	ldr	r0, [r7, #4]
 80023f2:	f000 fafb 	bl	80029ec <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData>
 80023f6:	4603      	mov	r3, r0
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d00e      	beq.n	800241a <LIS2MDL_ReadID+0x42>
    {
      return LIS2MDL_ERROR;
 80023fc:	f04f 33ff 	mov.w	r3, #4294967295
 8002400:	e00c      	b.n	800241c <LIS2MDL_ReadID+0x44>
    }
  }
  else
  {
    if (lis2mdl_device_id_get(&(pObj->Ctx), Id) != LIS2MDL_OK)
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	3320      	adds	r3, #32
 8002406:	6839      	ldr	r1, [r7, #0]
 8002408:	4618      	mov	r0, r3
 800240a:	f000 fe72 	bl	80030f2 <lis2mdl_device_id_get>
 800240e:	4603      	mov	r3, r0
 8002410:	2b00      	cmp	r3, #0
 8002412:	d002      	beq.n	800241a <LIS2MDL_ReadID+0x42>
    {
      return LIS2MDL_ERROR;
 8002414:	f04f 33ff 	mov.w	r3, #4294967295
 8002418:	e000      	b.n	800241c <LIS2MDL_ReadID+0x44>
    }
  }

  return LIS2MDL_OK;
 800241a:	2300      	movs	r3, #0
}
 800241c:	4618      	mov	r0, r3
 800241e:	3708      	adds	r7, #8
 8002420:	46bd      	mov	sp, r7
 8002422:	bd80      	pop	{r7, pc}

08002424 <LIS2MDL_GetCapabilities>:
  * @param  pObj Component object pointer
  * @param  Capabilities pointer to LIS2MDL magnetometer sensor capabilities
  * @retval Component status
  */
int32_t LIS2MDL_GetCapabilities(LIS2MDL_Object_t *pObj, LIS2MDL_Capabilities_t *Capabilities)
{
 8002424:	b480      	push	{r7}
 8002426:	b083      	sub	sp, #12
 8002428:	af00      	add	r7, sp, #0
 800242a:	6078      	str	r0, [r7, #4]
 800242c:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  Capabilities->Acc          = 0;
 800242e:	683b      	ldr	r3, [r7, #0]
 8002430:	2200      	movs	r2, #0
 8002432:	701a      	strb	r2, [r3, #0]
  Capabilities->Gyro         = 0;
 8002434:	683b      	ldr	r3, [r7, #0]
 8002436:	2200      	movs	r2, #0
 8002438:	705a      	strb	r2, [r3, #1]
  Capabilities->Magneto      = 1;
 800243a:	683b      	ldr	r3, [r7, #0]
 800243c:	2201      	movs	r2, #1
 800243e:	709a      	strb	r2, [r3, #2]
  Capabilities->LowPower     = 0;
 8002440:	683b      	ldr	r3, [r7, #0]
 8002442:	2200      	movs	r2, #0
 8002444:	70da      	strb	r2, [r3, #3]
  Capabilities->GyroMaxFS    = 0;
 8002446:	683b      	ldr	r3, [r7, #0]
 8002448:	2200      	movs	r2, #0
 800244a:	605a      	str	r2, [r3, #4]
  Capabilities->AccMaxFS     = 0;
 800244c:	683b      	ldr	r3, [r7, #0]
 800244e:	2200      	movs	r2, #0
 8002450:	609a      	str	r2, [r3, #8]
  Capabilities->MagMaxFS     = 50;
 8002452:	683b      	ldr	r3, [r7, #0]
 8002454:	2232      	movs	r2, #50	; 0x32
 8002456:	60da      	str	r2, [r3, #12]
  Capabilities->GyroMaxOdr   = 0.0f;
 8002458:	683b      	ldr	r3, [r7, #0]
 800245a:	f04f 0200 	mov.w	r2, #0
 800245e:	611a      	str	r2, [r3, #16]
  Capabilities->AccMaxOdr    = 0.0f;
 8002460:	683b      	ldr	r3, [r7, #0]
 8002462:	f04f 0200 	mov.w	r2, #0
 8002466:	615a      	str	r2, [r3, #20]
  Capabilities->MagMaxOdr    = 100.0f;
 8002468:	683b      	ldr	r3, [r7, #0]
 800246a:	4a04      	ldr	r2, [pc, #16]	; (800247c <LIS2MDL_GetCapabilities+0x58>)
 800246c:	619a      	str	r2, [r3, #24]
  return LIS2MDL_OK;
 800246e:	2300      	movs	r3, #0
}
 8002470:	4618      	mov	r0, r3
 8002472:	370c      	adds	r7, #12
 8002474:	46bd      	mov	sp, r7
 8002476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800247a:	4770      	bx	lr
 800247c:	42c80000 	.word	0x42c80000

08002480 <LIS2MDL_MAG_Enable>:
  * @brief Enable the LIS2MDL magnetometer sensor
  * @param pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_MAG_Enable(LIS2MDL_Object_t *pObj)
{
 8002480:	b580      	push	{r7, lr}
 8002482:	b084      	sub	sp, #16
 8002484:	af00      	add	r7, sp, #0
 8002486:	6078      	str	r0, [r7, #4]
  lis2mdl_cfg_reg_a_t reg_a;

  /* Check if the component is already enabled */
  if (pObj->mag_is_enabled == 1U)
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800248e:	2b01      	cmp	r3, #1
 8002490:	d101      	bne.n	8002496 <LIS2MDL_MAG_Enable+0x16>
  {
    return LIS2MDL_OK;
 8002492:	2300      	movs	r3, #0
 8002494:	e032      	b.n	80024fc <LIS2MDL_MAG_Enable+0x7c>
  }

  if (pObj->IO.BusType == LSM6DSOX_SENSORHUB_LIS2MDL_I2C_BUS) /* LSM6DSOX SensorHub with LIS2MDL example */
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	689b      	ldr	r3, [r3, #8]
 800249a:	2b03      	cmp	r3, #3
 800249c:	d11d      	bne.n	80024da <LIS2MDL_MAG_Enable+0x5a>
  {
    /* Read configuration from CFG_REG_A reg */
    if (LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData(pObj, LIS2MDL_CFG_REG_A, (uint8_t *)&reg_a, 1) != LIS2MDL_OK)
 800249e:	f107 020c 	add.w	r2, r7, #12
 80024a2:	2301      	movs	r3, #1
 80024a4:	2160      	movs	r1, #96	; 0x60
 80024a6:	6878      	ldr	r0, [r7, #4]
 80024a8:	f000 faa0 	bl	80029ec <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData>
 80024ac:	4603      	mov	r3, r0
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d002      	beq.n	80024b8 <LIS2MDL_MAG_Enable+0x38>
    {
      return LIS2MDL_ERROR;
 80024b2:	f04f 33ff 	mov.w	r3, #4294967295
 80024b6:	e021      	b.n	80024fc <LIS2MDL_MAG_Enable+0x7c>
    }

    /* Operation mode selection. */
    reg_a.md = LIS2MDL_CONTINUOUS_MODE;
 80024b8:	7b3b      	ldrb	r3, [r7, #12]
 80024ba:	f36f 0301 	bfc	r3, #0, #2
 80024be:	733b      	strb	r3, [r7, #12]

    /* Write configuration to CFG_REG_A reg */
    if (LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData(pObj, LIS2MDL_CFG_REG_A, (uint8_t *)&reg_a, 1) != LIS2MDL_OK)
 80024c0:	f107 020c 	add.w	r2, r7, #12
 80024c4:	2301      	movs	r3, #1
 80024c6:	2160      	movs	r1, #96	; 0x60
 80024c8:	6878      	ldr	r0, [r7, #4]
 80024ca:	f000 fbce 	bl	8002c6a <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData>
 80024ce:	4603      	mov	r3, r0
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d00e      	beq.n	80024f2 <LIS2MDL_MAG_Enable+0x72>
    {
      return LIS2MDL_ERROR;
 80024d4:	f04f 33ff 	mov.w	r3, #4294967295
 80024d8:	e010      	b.n	80024fc <LIS2MDL_MAG_Enable+0x7c>
    }
  }
  else
  {
    /* Operation mode selection. */
    if (lis2mdl_operating_mode_set(&(pObj->Ctx), LIS2MDL_CONTINUOUS_MODE) != LIS2MDL_OK)
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	3320      	adds	r3, #32
 80024de:	2100      	movs	r1, #0
 80024e0:	4618      	mov	r0, r3
 80024e2:	f000 fd10 	bl	8002f06 <lis2mdl_operating_mode_set>
 80024e6:	4603      	mov	r3, r0
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d002      	beq.n	80024f2 <LIS2MDL_MAG_Enable+0x72>
    {
      return LIS2MDL_ERROR;
 80024ec:	f04f 33ff 	mov.w	r3, #4294967295
 80024f0:	e004      	b.n	80024fc <LIS2MDL_MAG_Enable+0x7c>
    }
  }

  pObj->mag_is_enabled = 1;
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	2201      	movs	r2, #1
 80024f6:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

  return LIS2MDL_OK;
 80024fa:	2300      	movs	r3, #0
}
 80024fc:	4618      	mov	r0, r3
 80024fe:	3710      	adds	r7, #16
 8002500:	46bd      	mov	sp, r7
 8002502:	bd80      	pop	{r7, pc}

08002504 <LIS2MDL_MAG_Disable>:
  * @brief Disable the LIS2MDL magnetometer sensor
  * @param pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_MAG_Disable(LIS2MDL_Object_t *pObj)
{
 8002504:	b580      	push	{r7, lr}
 8002506:	b084      	sub	sp, #16
 8002508:	af00      	add	r7, sp, #0
 800250a:	6078      	str	r0, [r7, #4]
  lis2mdl_cfg_reg_a_t reg_a;

  /* Check if the component is already disabled */
  if (pObj->mag_is_enabled == 0U)
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8002512:	2b00      	cmp	r3, #0
 8002514:	d101      	bne.n	800251a <LIS2MDL_MAG_Disable+0x16>
  {
    return LIS2MDL_OK;
 8002516:	2300      	movs	r3, #0
 8002518:	e033      	b.n	8002582 <LIS2MDL_MAG_Disable+0x7e>
  }

  if (pObj->IO.BusType == LSM6DSOX_SENSORHUB_LIS2MDL_I2C_BUS) /* LSM6DSOX SensorHub with LIS2MDL example */
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	689b      	ldr	r3, [r3, #8]
 800251e:	2b03      	cmp	r3, #3
 8002520:	d11e      	bne.n	8002560 <LIS2MDL_MAG_Disable+0x5c>
  {
    /* Read configuration from CFG_REG_A reg */
    if (LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData(pObj, LIS2MDL_CFG_REG_A, (uint8_t *)&reg_a, 1) != LIS2MDL_OK)
 8002522:	f107 020c 	add.w	r2, r7, #12
 8002526:	2301      	movs	r3, #1
 8002528:	2160      	movs	r1, #96	; 0x60
 800252a:	6878      	ldr	r0, [r7, #4]
 800252c:	f000 fa5e 	bl	80029ec <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData>
 8002530:	4603      	mov	r3, r0
 8002532:	2b00      	cmp	r3, #0
 8002534:	d002      	beq.n	800253c <LIS2MDL_MAG_Disable+0x38>
    {
      return LIS2MDL_ERROR;
 8002536:	f04f 33ff 	mov.w	r3, #4294967295
 800253a:	e022      	b.n	8002582 <LIS2MDL_MAG_Disable+0x7e>
    }

    /* Operation mode selection. */
    reg_a.md = LIS2MDL_POWER_DOWN;
 800253c:	7b3b      	ldrb	r3, [r7, #12]
 800253e:	2202      	movs	r2, #2
 8002540:	f362 0301 	bfi	r3, r2, #0, #2
 8002544:	733b      	strb	r3, [r7, #12]

    /* Write configuration to CFG_REG_A reg */
    if (LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData(pObj, LIS2MDL_CFG_REG_A, (uint8_t *)&reg_a, 1) != LIS2MDL_OK)
 8002546:	f107 020c 	add.w	r2, r7, #12
 800254a:	2301      	movs	r3, #1
 800254c:	2160      	movs	r1, #96	; 0x60
 800254e:	6878      	ldr	r0, [r7, #4]
 8002550:	f000 fb8b 	bl	8002c6a <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData>
 8002554:	4603      	mov	r3, r0
 8002556:	2b00      	cmp	r3, #0
 8002558:	d00e      	beq.n	8002578 <LIS2MDL_MAG_Disable+0x74>
    {
      return LIS2MDL_ERROR;
 800255a:	f04f 33ff 	mov.w	r3, #4294967295
 800255e:	e010      	b.n	8002582 <LIS2MDL_MAG_Disable+0x7e>
    }
  }
  else
  {
    /* Operation mode selection. */
    if (lis2mdl_operating_mode_set(&(pObj->Ctx), LIS2MDL_POWER_DOWN) != LIS2MDL_OK)
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	3320      	adds	r3, #32
 8002564:	2102      	movs	r1, #2
 8002566:	4618      	mov	r0, r3
 8002568:	f000 fccd 	bl	8002f06 <lis2mdl_operating_mode_set>
 800256c:	4603      	mov	r3, r0
 800256e:	2b00      	cmp	r3, #0
 8002570:	d002      	beq.n	8002578 <LIS2MDL_MAG_Disable+0x74>
    {
      return LIS2MDL_ERROR;
 8002572:	f04f 33ff 	mov.w	r3, #4294967295
 8002576:	e004      	b.n	8002582 <LIS2MDL_MAG_Disable+0x7e>
    }
  }

  pObj->mag_is_enabled = 0;
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	2200      	movs	r2, #0
 800257c:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

  return LIS2MDL_OK;
 8002580:	2300      	movs	r3, #0
}
 8002582:	4618      	mov	r0, r3
 8002584:	3710      	adds	r7, #16
 8002586:	46bd      	mov	sp, r7
 8002588:	bd80      	pop	{r7, pc}

0800258a <LIS2MDL_MAG_GetSensitivity>:
  * @param  pObj the device pObj
  * @param  Sensitivity pointer
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_MAG_GetSensitivity(LIS2MDL_Object_t *pObj, float *Sensitivity)
{
 800258a:	b480      	push	{r7}
 800258c:	b083      	sub	sp, #12
 800258e:	af00      	add	r7, sp, #0
 8002590:	6078      	str	r0, [r7, #4]
 8002592:	6039      	str	r1, [r7, #0]
  *Sensitivity = LIS2MDL_MAG_SENSITIVITY_FS_50GAUSS;
 8002594:	683b      	ldr	r3, [r7, #0]
 8002596:	f04f 527f 	mov.w	r2, #1069547520	; 0x3fc00000
 800259a:	601a      	str	r2, [r3, #0]

  return LIS2MDL_OK;
 800259c:	2300      	movs	r3, #0
}
 800259e:	4618      	mov	r0, r3
 80025a0:	370c      	adds	r7, #12
 80025a2:	46bd      	mov	sp, r7
 80025a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a8:	4770      	bx	lr
	...

080025ac <LIS2MDL_MAG_GetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr pointer where the output data rate is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_MAG_GetOutputDataRate(LIS2MDL_Object_t *pObj, float *Odr)
{
 80025ac:	b580      	push	{r7, lr}
 80025ae:	b084      	sub	sp, #16
 80025b0:	af00      	add	r7, sp, #0
 80025b2:	6078      	str	r0, [r7, #4]
 80025b4:	6039      	str	r1, [r7, #0]
  int32_t ret = LIS2MDL_OK;
 80025b6:	2300      	movs	r3, #0
 80025b8:	60fb      	str	r3, [r7, #12]
  lis2mdl_odr_t odr_low_level;

  /* Get current output data rate. */
  if (lis2mdl_data_rate_get(&(pObj->Ctx), &odr_low_level) != LIS2MDL_OK)
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	3320      	adds	r3, #32
 80025be:	f107 020b 	add.w	r2, r7, #11
 80025c2:	4611      	mov	r1, r2
 80025c4:	4618      	mov	r0, r3
 80025c6:	f000 fceb 	bl	8002fa0 <lis2mdl_data_rate_get>
 80025ca:	4603      	mov	r3, r0
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d002      	beq.n	80025d6 <LIS2MDL_MAG_GetOutputDataRate+0x2a>
  {
    return LIS2MDL_ERROR;
 80025d0:	f04f 33ff 	mov.w	r3, #4294967295
 80025d4:	e023      	b.n	800261e <LIS2MDL_MAG_GetOutputDataRate+0x72>
  }

  switch (odr_low_level)
 80025d6:	7afb      	ldrb	r3, [r7, #11]
 80025d8:	2b03      	cmp	r3, #3
 80025da:	d81b      	bhi.n	8002614 <LIS2MDL_MAG_GetOutputDataRate+0x68>
 80025dc:	a201      	add	r2, pc, #4	; (adr r2, 80025e4 <LIS2MDL_MAG_GetOutputDataRate+0x38>)
 80025de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80025e2:	bf00      	nop
 80025e4:	080025f5 	.word	0x080025f5
 80025e8:	080025fd 	.word	0x080025fd
 80025ec:	08002605 	.word	0x08002605
 80025f0:	0800260d 	.word	0x0800260d
  {
    case LIS2MDL_ODR_10Hz:
      *Odr = 10.0f;
 80025f4:	683b      	ldr	r3, [r7, #0]
 80025f6:	4a0c      	ldr	r2, [pc, #48]	; (8002628 <LIS2MDL_MAG_GetOutputDataRate+0x7c>)
 80025f8:	601a      	str	r2, [r3, #0]
      break;
 80025fa:	e00f      	b.n	800261c <LIS2MDL_MAG_GetOutputDataRate+0x70>

    case LIS2MDL_ODR_20Hz:
      *Odr = 20.0f;
 80025fc:	683b      	ldr	r3, [r7, #0]
 80025fe:	4a0b      	ldr	r2, [pc, #44]	; (800262c <LIS2MDL_MAG_GetOutputDataRate+0x80>)
 8002600:	601a      	str	r2, [r3, #0]
      break;
 8002602:	e00b      	b.n	800261c <LIS2MDL_MAG_GetOutputDataRate+0x70>

    case LIS2MDL_ODR_50Hz:
      *Odr = 50.0f;
 8002604:	683b      	ldr	r3, [r7, #0]
 8002606:	4a0a      	ldr	r2, [pc, #40]	; (8002630 <LIS2MDL_MAG_GetOutputDataRate+0x84>)
 8002608:	601a      	str	r2, [r3, #0]
      break;
 800260a:	e007      	b.n	800261c <LIS2MDL_MAG_GetOutputDataRate+0x70>

    case LIS2MDL_ODR_100Hz:
      *Odr = 100.0f;
 800260c:	683b      	ldr	r3, [r7, #0]
 800260e:	4a09      	ldr	r2, [pc, #36]	; (8002634 <LIS2MDL_MAG_GetOutputDataRate+0x88>)
 8002610:	601a      	str	r2, [r3, #0]
      break;
 8002612:	e003      	b.n	800261c <LIS2MDL_MAG_GetOutputDataRate+0x70>

    default:
      ret = LIS2MDL_ERROR;
 8002614:	f04f 33ff 	mov.w	r3, #4294967295
 8002618:	60fb      	str	r3, [r7, #12]
      break;
 800261a:	bf00      	nop
  }

  return ret;
 800261c:	68fb      	ldr	r3, [r7, #12]
}
 800261e:	4618      	mov	r0, r3
 8002620:	3710      	adds	r7, #16
 8002622:	46bd      	mov	sp, r7
 8002624:	bd80      	pop	{r7, pc}
 8002626:	bf00      	nop
 8002628:	41200000 	.word	0x41200000
 800262c:	41a00000 	.word	0x41a00000
 8002630:	42480000 	.word	0x42480000
 8002634:	42c80000 	.word	0x42c80000

08002638 <LIS2MDL_MAG_SetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_MAG_SetOutputDataRate(LIS2MDL_Object_t *pObj, float Odr)
{
 8002638:	b580      	push	{r7, lr}
 800263a:	b084      	sub	sp, #16
 800263c:	af00      	add	r7, sp, #0
 800263e:	6078      	str	r0, [r7, #4]
 8002640:	ed87 0a00 	vstr	s0, [r7]
  lis2mdl_odr_t new_odr;
  lis2mdl_cfg_reg_a_t reg_a;

  new_odr = (Odr <= 10.000f) ? LIS2MDL_ODR_10Hz
            : (Odr <= 20.000f) ? LIS2MDL_ODR_20Hz
 8002644:	edd7 7a00 	vldr	s15, [r7]
 8002648:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 800264c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002650:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002654:	d801      	bhi.n	800265a <LIS2MDL_MAG_SetOutputDataRate+0x22>
 8002656:	2300      	movs	r3, #0
 8002658:	e016      	b.n	8002688 <LIS2MDL_MAG_SetOutputDataRate+0x50>
 800265a:	edd7 7a00 	vldr	s15, [r7]
 800265e:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 8002662:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002666:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800266a:	d801      	bhi.n	8002670 <LIS2MDL_MAG_SetOutputDataRate+0x38>
 800266c:	2301      	movs	r3, #1
 800266e:	e00b      	b.n	8002688 <LIS2MDL_MAG_SetOutputDataRate+0x50>
 8002670:	edd7 7a00 	vldr	s15, [r7]
 8002674:	ed9f 7a21 	vldr	s14, [pc, #132]	; 80026fc <LIS2MDL_MAG_SetOutputDataRate+0xc4>
 8002678:	eef4 7ac7 	vcmpe.f32	s15, s14
 800267c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002680:	d801      	bhi.n	8002686 <LIS2MDL_MAG_SetOutputDataRate+0x4e>
 8002682:	2302      	movs	r3, #2
 8002684:	e000      	b.n	8002688 <LIS2MDL_MAG_SetOutputDataRate+0x50>
 8002686:	2303      	movs	r3, #3
  new_odr = (Odr <= 10.000f) ? LIS2MDL_ODR_10Hz
 8002688:	73fb      	strb	r3, [r7, #15]
            : (Odr <= 50.000f) ? LIS2MDL_ODR_50Hz
            :                    LIS2MDL_ODR_100Hz;

  if (pObj->IO.BusType == LSM6DSOX_SENSORHUB_LIS2MDL_I2C_BUS) /* LSM6DSOX SensorHub with LIS2MDL example */
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	689b      	ldr	r3, [r3, #8]
 800268e:	2b03      	cmp	r3, #3
 8002690:	d121      	bne.n	80026d6 <LIS2MDL_MAG_SetOutputDataRate+0x9e>
  {
    /* Read configuration from CFG_REG_A reg */
    if (LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData(pObj, LIS2MDL_CFG_REG_A, (uint8_t *)&reg_a, 1) != LIS2MDL_OK)
 8002692:	f107 020c 	add.w	r2, r7, #12
 8002696:	2301      	movs	r3, #1
 8002698:	2160      	movs	r1, #96	; 0x60
 800269a:	6878      	ldr	r0, [r7, #4]
 800269c:	f000 f9a6 	bl	80029ec <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData>
 80026a0:	4603      	mov	r3, r0
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d002      	beq.n	80026ac <LIS2MDL_MAG_SetOutputDataRate+0x74>
    {
      return LIS2MDL_ERROR;
 80026a6:	f04f 33ff 	mov.w	r3, #4294967295
 80026aa:	e022      	b.n	80026f2 <LIS2MDL_MAG_SetOutputDataRate+0xba>
    }

    /* Output data rate selection */
    reg_a.odr = new_odr;
 80026ac:	7bfb      	ldrb	r3, [r7, #15]
 80026ae:	f003 0303 	and.w	r3, r3, #3
 80026b2:	b2da      	uxtb	r2, r3
 80026b4:	7b3b      	ldrb	r3, [r7, #12]
 80026b6:	f362 0383 	bfi	r3, r2, #2, #2
 80026ba:	733b      	strb	r3, [r7, #12]

    /* Write configuration to CFG_REG_A reg */
    if (LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData(pObj, LIS2MDL_CFG_REG_A, (uint8_t *)&reg_a, 1) != LIS2MDL_OK)
 80026bc:	f107 020c 	add.w	r2, r7, #12
 80026c0:	2301      	movs	r3, #1
 80026c2:	2160      	movs	r1, #96	; 0x60
 80026c4:	6878      	ldr	r0, [r7, #4]
 80026c6:	f000 fad0 	bl	8002c6a <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData>
 80026ca:	4603      	mov	r3, r0
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d00f      	beq.n	80026f0 <LIS2MDL_MAG_SetOutputDataRate+0xb8>
    {
      return LIS2MDL_ERROR;
 80026d0:	f04f 33ff 	mov.w	r3, #4294967295
 80026d4:	e00d      	b.n	80026f2 <LIS2MDL_MAG_SetOutputDataRate+0xba>
    }
  }
  else
  {
    if (lis2mdl_data_rate_set(&(pObj->Ctx), new_odr) != LIS2MDL_OK)
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	3320      	adds	r3, #32
 80026da:	7bfa      	ldrb	r2, [r7, #15]
 80026dc:	4611      	mov	r1, r2
 80026de:	4618      	mov	r0, r3
 80026e0:	f000 fc37 	bl	8002f52 <lis2mdl_data_rate_set>
 80026e4:	4603      	mov	r3, r0
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d002      	beq.n	80026f0 <LIS2MDL_MAG_SetOutputDataRate+0xb8>
    {
      return LIS2MDL_ERROR;
 80026ea:	f04f 33ff 	mov.w	r3, #4294967295
 80026ee:	e000      	b.n	80026f2 <LIS2MDL_MAG_SetOutputDataRate+0xba>
    }
  }

  return LIS2MDL_OK;
 80026f0:	2300      	movs	r3, #0
}
 80026f2:	4618      	mov	r0, r3
 80026f4:	3710      	adds	r7, #16
 80026f6:	46bd      	mov	sp, r7
 80026f8:	bd80      	pop	{r7, pc}
 80026fa:	bf00      	nop
 80026fc:	42480000 	.word	0x42480000

08002700 <LIS2MDL_MAG_GetFullScale>:
  * @param  pObj the device pObj
  * @param  FullScale pointer where the full scale is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_MAG_GetFullScale(LIS2MDL_Object_t *pObj, int32_t *FullScale)
{
 8002700:	b480      	push	{r7}
 8002702:	b083      	sub	sp, #12
 8002704:	af00      	add	r7, sp, #0
 8002706:	6078      	str	r0, [r7, #4]
 8002708:	6039      	str	r1, [r7, #0]
  *FullScale = 50;
 800270a:	683b      	ldr	r3, [r7, #0]
 800270c:	2232      	movs	r2, #50	; 0x32
 800270e:	601a      	str	r2, [r3, #0]

  return LIS2MDL_OK;
 8002710:	2300      	movs	r3, #0
}
 8002712:	4618      	mov	r0, r3
 8002714:	370c      	adds	r7, #12
 8002716:	46bd      	mov	sp, r7
 8002718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800271c:	4770      	bx	lr

0800271e <LIS2MDL_MAG_SetFullScale>:
  * @param  pObj the device pObj
  * @param  FullScale the functional full scale to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_MAG_SetFullScale(LIS2MDL_Object_t *pObj, int32_t FullScale)
{
 800271e:	b480      	push	{r7}
 8002720:	b083      	sub	sp, #12
 8002722:	af00      	add	r7, sp, #0
 8002724:	6078      	str	r0, [r7, #4]
 8002726:	6039      	str	r1, [r7, #0]
  return LIS2MDL_OK;
 8002728:	2300      	movs	r3, #0
}
 800272a:	4618      	mov	r0, r3
 800272c:	370c      	adds	r7, #12
 800272e:	46bd      	mov	sp, r7
 8002730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002734:	4770      	bx	lr

08002736 <LIS2MDL_MAG_GetAxesRaw>:
  * @param  pObj the device pObj
  * @param  Value pointer where the raw values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_MAG_GetAxesRaw(LIS2MDL_Object_t *pObj, LIS2MDL_AxesRaw_t *Value)
{
 8002736:	b580      	push	{r7, lr}
 8002738:	b084      	sub	sp, #16
 800273a:	af00      	add	r7, sp, #0
 800273c:	6078      	str	r0, [r7, #4]
 800273e:	6039      	str	r1, [r7, #0]
  lis2mdl_axis3bit16_t data_raw;

  /* Read raw data values. */
  if (lis2mdl_magnetic_raw_get(&(pObj->Ctx), data_raw.i16bit) != LIS2MDL_OK)
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	3320      	adds	r3, #32
 8002744:	f107 0208 	add.w	r2, r7, #8
 8002748:	4611      	mov	r1, r2
 800274a:	4618      	mov	r0, r3
 800274c:	f000 fc86 	bl	800305c <lis2mdl_magnetic_raw_get>
 8002750:	4603      	mov	r3, r0
 8002752:	2b00      	cmp	r3, #0
 8002754:	d002      	beq.n	800275c <LIS2MDL_MAG_GetAxesRaw+0x26>
  {
    return LIS2MDL_ERROR;
 8002756:	f04f 33ff 	mov.w	r3, #4294967295
 800275a:	e00c      	b.n	8002776 <LIS2MDL_MAG_GetAxesRaw+0x40>
  }

  /* Format the data. */
  Value->x = data_raw.i16bit[0];
 800275c:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8002760:	683b      	ldr	r3, [r7, #0]
 8002762:	801a      	strh	r2, [r3, #0]
  Value->y = data_raw.i16bit[1];
 8002764:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8002768:	683b      	ldr	r3, [r7, #0]
 800276a:	805a      	strh	r2, [r3, #2]
  Value->z = data_raw.i16bit[2];
 800276c:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8002770:	683b      	ldr	r3, [r7, #0]
 8002772:	809a      	strh	r2, [r3, #4]

  return LIS2MDL_OK;
 8002774:	2300      	movs	r3, #0
}
 8002776:	4618      	mov	r0, r3
 8002778:	3710      	adds	r7, #16
 800277a:	46bd      	mov	sp, r7
 800277c:	bd80      	pop	{r7, pc}

0800277e <LIS2MDL_MAG_GetAxes>:
  * @param  pObj the device pObj
  * @param  MagneticField pointer where the values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_MAG_GetAxes(LIS2MDL_Object_t *pObj, LIS2MDL_Axes_t *MagneticField)
{
 800277e:	b580      	push	{r7, lr}
 8002780:	b088      	sub	sp, #32
 8002782:	af00      	add	r7, sp, #0
 8002784:	6078      	str	r0, [r7, #4]
 8002786:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  lis2mdl_axis3bit16_t data_raw;
  float sensitivity;

  if (pObj->IO.BusType == LSM6DSOX_SENSORHUB_LIS2MDL_I2C_BUS) /* LSM6DSOX SensorHub with LIS2MDL example */
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	689b      	ldr	r3, [r3, #8]
 800278c:	2b03      	cmp	r3, #3
 800278e:	d137      	bne.n	8002800 <LIS2MDL_MAG_GetAxes+0x82>
  {
    /* Read raw data values. */
    if (LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData(pObj, LIS2MDL_OUTX_L_REG, buff, 6) != LIS2MDL_OK)
 8002790:	f107 0218 	add.w	r2, r7, #24
 8002794:	2306      	movs	r3, #6
 8002796:	2168      	movs	r1, #104	; 0x68
 8002798:	6878      	ldr	r0, [r7, #4]
 800279a:	f000 f927 	bl	80029ec <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData>
 800279e:	4603      	mov	r3, r0
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d002      	beq.n	80027aa <LIS2MDL_MAG_GetAxes+0x2c>
    {
      return LIS2MDL_ERROR;
 80027a4:	f04f 33ff 	mov.w	r3, #4294967295
 80027a8:	e06f      	b.n	800288a <LIS2MDL_MAG_GetAxes+0x10c>
    }
    data_raw.i16bit[0] = (int16_t)buff[1];
 80027aa:	7e7b      	ldrb	r3, [r7, #25]
 80027ac:	b21b      	sxth	r3, r3
 80027ae:	823b      	strh	r3, [r7, #16]
    data_raw.i16bit[0] = (data_raw.i16bit[0] * 256) + (int16_t)buff[0];
 80027b0:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80027b4:	b29b      	uxth	r3, r3
 80027b6:	021b      	lsls	r3, r3, #8
 80027b8:	b29a      	uxth	r2, r3
 80027ba:	7e3b      	ldrb	r3, [r7, #24]
 80027bc:	b29b      	uxth	r3, r3
 80027be:	4413      	add	r3, r2
 80027c0:	b29b      	uxth	r3, r3
 80027c2:	b21b      	sxth	r3, r3
 80027c4:	823b      	strh	r3, [r7, #16]
    data_raw.i16bit[1] = (int16_t)buff[3];
 80027c6:	7efb      	ldrb	r3, [r7, #27]
 80027c8:	b21b      	sxth	r3, r3
 80027ca:	827b      	strh	r3, [r7, #18]
    data_raw.i16bit[1] = (data_raw.i16bit[1] * 256) + (int16_t)buff[2];
 80027cc:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80027d0:	b29b      	uxth	r3, r3
 80027d2:	021b      	lsls	r3, r3, #8
 80027d4:	b29a      	uxth	r2, r3
 80027d6:	7ebb      	ldrb	r3, [r7, #26]
 80027d8:	b29b      	uxth	r3, r3
 80027da:	4413      	add	r3, r2
 80027dc:	b29b      	uxth	r3, r3
 80027de:	b21b      	sxth	r3, r3
 80027e0:	827b      	strh	r3, [r7, #18]
    data_raw.i16bit[2] = (int16_t)buff[5];
 80027e2:	7f7b      	ldrb	r3, [r7, #29]
 80027e4:	b21b      	sxth	r3, r3
 80027e6:	82bb      	strh	r3, [r7, #20]
    data_raw.i16bit[2] = (data_raw.i16bit[2] * 256) + (int16_t)buff[4];
 80027e8:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80027ec:	b29b      	uxth	r3, r3
 80027ee:	021b      	lsls	r3, r3, #8
 80027f0:	b29a      	uxth	r2, r3
 80027f2:	7f3b      	ldrb	r3, [r7, #28]
 80027f4:	b29b      	uxth	r3, r3
 80027f6:	4413      	add	r3, r2
 80027f8:	b29b      	uxth	r3, r3
 80027fa:	b21b      	sxth	r3, r3
 80027fc:	82bb      	strh	r3, [r7, #20]
 80027fe:	e00d      	b.n	800281c <LIS2MDL_MAG_GetAxes+0x9e>
  }
  else
  {
    /* Read raw data values. */
    if (lis2mdl_magnetic_raw_get(&(pObj->Ctx), data_raw.i16bit) != LIS2MDL_OK)
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	3320      	adds	r3, #32
 8002804:	f107 0210 	add.w	r2, r7, #16
 8002808:	4611      	mov	r1, r2
 800280a:	4618      	mov	r0, r3
 800280c:	f000 fc26 	bl	800305c <lis2mdl_magnetic_raw_get>
 8002810:	4603      	mov	r3, r0
 8002812:	2b00      	cmp	r3, #0
 8002814:	d002      	beq.n	800281c <LIS2MDL_MAG_GetAxes+0x9e>
    {
      return LIS2MDL_ERROR;
 8002816:	f04f 33ff 	mov.w	r3, #4294967295
 800281a:	e036      	b.n	800288a <LIS2MDL_MAG_GetAxes+0x10c>
    }
  }

  /* Get LIS2MDL actual sensitivity. */
  (void)LIS2MDL_MAG_GetSensitivity(pObj, &sensitivity);
 800281c:	f107 030c 	add.w	r3, r7, #12
 8002820:	4619      	mov	r1, r3
 8002822:	6878      	ldr	r0, [r7, #4]
 8002824:	f7ff feb1 	bl	800258a <LIS2MDL_MAG_GetSensitivity>

  /* Calculate the data. */
  MagneticField->x = (int32_t)((float)((float)data_raw.i16bit[0] * sensitivity));
 8002828:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800282c:	ee07 3a90 	vmov	s15, r3
 8002830:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002834:	edd7 7a03 	vldr	s15, [r7, #12]
 8002838:	ee67 7a27 	vmul.f32	s15, s14, s15
 800283c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002840:	ee17 2a90 	vmov	r2, s15
 8002844:	683b      	ldr	r3, [r7, #0]
 8002846:	601a      	str	r2, [r3, #0]
  MagneticField->y = (int32_t)((float)((float)data_raw.i16bit[1] * sensitivity));
 8002848:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800284c:	ee07 3a90 	vmov	s15, r3
 8002850:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002854:	edd7 7a03 	vldr	s15, [r7, #12]
 8002858:	ee67 7a27 	vmul.f32	s15, s14, s15
 800285c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002860:	ee17 2a90 	vmov	r2, s15
 8002864:	683b      	ldr	r3, [r7, #0]
 8002866:	605a      	str	r2, [r3, #4]
  MagneticField->z = (int32_t)((float)((float)data_raw.i16bit[2] * sensitivity));
 8002868:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800286c:	ee07 3a90 	vmov	s15, r3
 8002870:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002874:	edd7 7a03 	vldr	s15, [r7, #12]
 8002878:	ee67 7a27 	vmul.f32	s15, s14, s15
 800287c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002880:	ee17 2a90 	vmov	r2, s15
 8002884:	683b      	ldr	r3, [r7, #0]
 8002886:	609a      	str	r2, [r3, #8]

  return LIS2MDL_OK;
 8002888:	2300      	movs	r3, #0
}
 800288a:	4618      	mov	r0, r3
 800288c:	3720      	adds	r7, #32
 800288e:	46bd      	mov	sp, r7
 8002890:	bd80      	pop	{r7, pc}

08002892 <LIS2MDL_Write_Reg>:
  * @param  Reg address to be written
  * @param  Data value to be written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_Write_Reg(LIS2MDL_Object_t *pObj, uint8_t Reg, uint8_t Data)
{
 8002892:	b580      	push	{r7, lr}
 8002894:	b082      	sub	sp, #8
 8002896:	af00      	add	r7, sp, #0
 8002898:	6078      	str	r0, [r7, #4]
 800289a:	460b      	mov	r3, r1
 800289c:	70fb      	strb	r3, [r7, #3]
 800289e:	4613      	mov	r3, r2
 80028a0:	70bb      	strb	r3, [r7, #2]
  if (pObj->IO.BusType == LSM6DSOX_SENSORHUB_LIS2MDL_I2C_BUS) /* LSM6DSOX SensorHub with LIS2MDL example */
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	689b      	ldr	r3, [r3, #8]
 80028a6:	2b03      	cmp	r3, #3
 80028a8:	d10b      	bne.n	80028c2 <LIS2MDL_Write_Reg+0x30>
  {
    if (LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData(pObj, Reg, (uint8_t *)&Data, 1) != LIS2MDL_OK)
 80028aa:	1cba      	adds	r2, r7, #2
 80028ac:	78f9      	ldrb	r1, [r7, #3]
 80028ae:	2301      	movs	r3, #1
 80028b0:	6878      	ldr	r0, [r7, #4]
 80028b2:	f000 f9da 	bl	8002c6a <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData>
 80028b6:	4603      	mov	r3, r0
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d010      	beq.n	80028de <LIS2MDL_Write_Reg+0x4c>
    {
      return LIS2MDL_ERROR;
 80028bc:	f04f 33ff 	mov.w	r3, #4294967295
 80028c0:	e00e      	b.n	80028e0 <LIS2MDL_Write_Reg+0x4e>
    }
  }
  else
  {
    if (lis2mdl_write_reg(&(pObj->Ctx), Reg, &Data, 1) != LIS2MDL_OK)
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	f103 0020 	add.w	r0, r3, #32
 80028c8:	1cba      	adds	r2, r7, #2
 80028ca:	78f9      	ldrb	r1, [r7, #3]
 80028cc:	2301      	movs	r3, #1
 80028ce:	f000 fb02 	bl	8002ed6 <lis2mdl_write_reg>
 80028d2:	4603      	mov	r3, r0
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d002      	beq.n	80028de <LIS2MDL_Write_Reg+0x4c>
    {
      return LIS2MDL_ERROR;
 80028d8:	f04f 33ff 	mov.w	r3, #4294967295
 80028dc:	e000      	b.n	80028e0 <LIS2MDL_Write_Reg+0x4e>
    }
  }

  return LIS2MDL_OK;
 80028de:	2300      	movs	r3, #0
}
 80028e0:	4618      	mov	r0, r3
 80028e2:	3708      	adds	r7, #8
 80028e4:	46bd      	mov	sp, r7
 80028e6:	bd80      	pop	{r7, pc}

080028e8 <ReadMagRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t ReadMagRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 80028e8:	b590      	push	{r4, r7, lr}
 80028ea:	b087      	sub	sp, #28
 80028ec:	af00      	add	r7, sp, #0
 80028ee:	60f8      	str	r0, [r7, #12]
 80028f0:	607a      	str	r2, [r7, #4]
 80028f2:	461a      	mov	r2, r3
 80028f4:	460b      	mov	r3, r1
 80028f6:	72fb      	strb	r3, [r7, #11]
 80028f8:	4613      	mov	r3, r2
 80028fa:	813b      	strh	r3, [r7, #8]
  LIS2MDL_Object_t *pObj = (LIS2MDL_Object_t *)Handle;
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	617b      	str	r3, [r7, #20]

  if (pObj->IO.BusType == LIS2MDL_I2C_BUS) /* I2C */
 8002900:	697b      	ldr	r3, [r7, #20]
 8002902:	689b      	ldr	r3, [r3, #8]
 8002904:	2b00      	cmp	r3, #0
 8002906:	d10e      	bne.n	8002926 <ReadMagRegWrap+0x3e>
  {
    /* Enable Multi-byte read */
    return pObj->IO.ReadReg(pObj->IO.Address, (Reg | 0x80U), pData, Length);
 8002908:	697b      	ldr	r3, [r7, #20]
 800290a:	695c      	ldr	r4, [r3, #20]
 800290c:	697b      	ldr	r3, [r7, #20]
 800290e:	7b1b      	ldrb	r3, [r3, #12]
 8002910:	b298      	uxth	r0, r3
 8002912:	7afb      	ldrb	r3, [r7, #11]
 8002914:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002918:	b2db      	uxtb	r3, r3
 800291a:	b299      	uxth	r1, r3
 800291c:	893b      	ldrh	r3, [r7, #8]
 800291e:	687a      	ldr	r2, [r7, #4]
 8002920:	47a0      	blx	r4
 8002922:	4603      	mov	r3, r0
 8002924:	e01d      	b.n	8002962 <ReadMagRegWrap+0x7a>
  }
  else if (pObj->IO.BusType == LSM6DSOX_SENSORHUB_LIS2MDL_I2C_BUS) /* LSM6DSOX SensorHub with LIS2MDL example */
 8002926:	697b      	ldr	r3, [r7, #20]
 8002928:	689b      	ldr	r3, [r3, #8]
 800292a:	2b03      	cmp	r3, #3
 800292c:	d10b      	bne.n	8002946 <ReadMagRegWrap+0x5e>
  {
    return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 800292e:	697b      	ldr	r3, [r7, #20]
 8002930:	695c      	ldr	r4, [r3, #20]
 8002932:	697b      	ldr	r3, [r7, #20]
 8002934:	7b1b      	ldrb	r3, [r3, #12]
 8002936:	b298      	uxth	r0, r3
 8002938:	7afb      	ldrb	r3, [r7, #11]
 800293a:	b299      	uxth	r1, r3
 800293c:	893b      	ldrh	r3, [r7, #8]
 800293e:	687a      	ldr	r2, [r7, #4]
 8002940:	47a0      	blx	r4
 8002942:	4603      	mov	r3, r0
 8002944:	e00d      	b.n	8002962 <ReadMagRegWrap+0x7a>
  }
  else   /* SPI 3-Wires or SPI 4-Wires */
  {
    /* Enable Multi-byte read */
    return pObj->IO.ReadReg(pObj->IO.Address, (Reg | 0x40U), pData, Length);
 8002946:	697b      	ldr	r3, [r7, #20]
 8002948:	695c      	ldr	r4, [r3, #20]
 800294a:	697b      	ldr	r3, [r7, #20]
 800294c:	7b1b      	ldrb	r3, [r3, #12]
 800294e:	b298      	uxth	r0, r3
 8002950:	7afb      	ldrb	r3, [r7, #11]
 8002952:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002956:	b2db      	uxtb	r3, r3
 8002958:	b299      	uxth	r1, r3
 800295a:	893b      	ldrh	r3, [r7, #8]
 800295c:	687a      	ldr	r2, [r7, #4]
 800295e:	47a0      	blx	r4
 8002960:	4603      	mov	r3, r0
  }
}
 8002962:	4618      	mov	r0, r3
 8002964:	371c      	adds	r7, #28
 8002966:	46bd      	mov	sp, r7
 8002968:	bd90      	pop	{r4, r7, pc}

0800296a <WriteMagRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t WriteMagRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 800296a:	b590      	push	{r4, r7, lr}
 800296c:	b087      	sub	sp, #28
 800296e:	af00      	add	r7, sp, #0
 8002970:	60f8      	str	r0, [r7, #12]
 8002972:	607a      	str	r2, [r7, #4]
 8002974:	461a      	mov	r2, r3
 8002976:	460b      	mov	r3, r1
 8002978:	72fb      	strb	r3, [r7, #11]
 800297a:	4613      	mov	r3, r2
 800297c:	813b      	strh	r3, [r7, #8]
  LIS2MDL_Object_t *pObj = (LIS2MDL_Object_t *)Handle;
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	617b      	str	r3, [r7, #20]

  if (pObj->IO.BusType == LIS2MDL_I2C_BUS) /* I2C */
 8002982:	697b      	ldr	r3, [r7, #20]
 8002984:	689b      	ldr	r3, [r3, #8]
 8002986:	2b00      	cmp	r3, #0
 8002988:	d10e      	bne.n	80029a8 <WriteMagRegWrap+0x3e>
  {
    /* Enable Multi-byte write */
    return pObj->IO.WriteReg(pObj->IO.Address, (Reg | 0x80U), pData, Length);
 800298a:	697b      	ldr	r3, [r7, #20]
 800298c:	691c      	ldr	r4, [r3, #16]
 800298e:	697b      	ldr	r3, [r7, #20]
 8002990:	7b1b      	ldrb	r3, [r3, #12]
 8002992:	b298      	uxth	r0, r3
 8002994:	7afb      	ldrb	r3, [r7, #11]
 8002996:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800299a:	b2db      	uxtb	r3, r3
 800299c:	b299      	uxth	r1, r3
 800299e:	893b      	ldrh	r3, [r7, #8]
 80029a0:	687a      	ldr	r2, [r7, #4]
 80029a2:	47a0      	blx	r4
 80029a4:	4603      	mov	r3, r0
 80029a6:	e01d      	b.n	80029e4 <WriteMagRegWrap+0x7a>
  }
  else if (pObj->IO.BusType == LSM6DSOX_SENSORHUB_LIS2MDL_I2C_BUS) /* LSM6DSOX SensorHub with LIS2MDL example */
 80029a8:	697b      	ldr	r3, [r7, #20]
 80029aa:	689b      	ldr	r3, [r3, #8]
 80029ac:	2b03      	cmp	r3, #3
 80029ae:	d10b      	bne.n	80029c8 <WriteMagRegWrap+0x5e>
  {
    return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 80029b0:	697b      	ldr	r3, [r7, #20]
 80029b2:	691c      	ldr	r4, [r3, #16]
 80029b4:	697b      	ldr	r3, [r7, #20]
 80029b6:	7b1b      	ldrb	r3, [r3, #12]
 80029b8:	b298      	uxth	r0, r3
 80029ba:	7afb      	ldrb	r3, [r7, #11]
 80029bc:	b299      	uxth	r1, r3
 80029be:	893b      	ldrh	r3, [r7, #8]
 80029c0:	687a      	ldr	r2, [r7, #4]
 80029c2:	47a0      	blx	r4
 80029c4:	4603      	mov	r3, r0
 80029c6:	e00d      	b.n	80029e4 <WriteMagRegWrap+0x7a>
  }
  else   /* SPI 3-Wires or SPI 4-Wires */
  {
    /* Enable Multi-byte write */
    return pObj->IO.WriteReg(pObj->IO.Address, (Reg | 0x40U), pData, Length);
 80029c8:	697b      	ldr	r3, [r7, #20]
 80029ca:	691c      	ldr	r4, [r3, #16]
 80029cc:	697b      	ldr	r3, [r7, #20]
 80029ce:	7b1b      	ldrb	r3, [r3, #12]
 80029d0:	b298      	uxth	r0, r3
 80029d2:	7afb      	ldrb	r3, [r7, #11]
 80029d4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80029d8:	b2db      	uxtb	r3, r3
 80029da:	b299      	uxth	r1, r3
 80029dc:	893b      	ldrh	r3, [r7, #8]
 80029de:	687a      	ldr	r2, [r7, #4]
 80029e0:	47a0      	blx	r4
 80029e2:	4603      	mov	r3, r0
  }
}
 80029e4:	4618      	mov	r0, r3
 80029e6:	371c      	adds	r7, #28
 80029e8:	46bd      	mov	sp, r7
 80029ea:	bd90      	pop	{r4, r7, pc}

080029ec <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData>:
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData(LIS2MDL_Object_t *pObj, uint8_t Reg, uint8_t *pData,
                                                     uint16_t Length)
{
 80029ec:	b580      	push	{r7, lr}
 80029ee:	b08c      	sub	sp, #48	; 0x30
 80029f0:	af00      	add	r7, sp, #0
 80029f2:	60f8      	str	r0, [r7, #12]
 80029f4:	607a      	str	r2, [r7, #4]
 80029f6:	461a      	mov	r2, r3
 80029f8:	460b      	mov	r3, r1
 80029fa:	72fb      	strb	r3, [r7, #11]
 80029fc:	4613      	mov	r3, r2
 80029fe:	813b      	strh	r3, [r7, #8]
  uint8_t lsm6dsox_func_cfg_access = 0x01U;
 8002a00:	2301      	movs	r3, #1
 8002a02:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  uint8_t shub_reg_access_en = 0x40U;
 8002a06:	2340      	movs	r3, #64	; 0x40
 8002a08:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
  uint8_t shub_reg_access_dis = 0x00U;
 8002a0c:	2300      	movs	r3, #0
 8002a0e:	f887 3020 	strb.w	r3, [r7, #32]
  uint8_t ext_sens_addr_read = LIS2MDL_I2C_ADD | 0x01U;
 8002a12:	233d      	movs	r3, #61	; 0x3d
 8002a14:	77fb      	strb	r3, [r7, #31]
  uint8_t slv0_add = 0x15U;
 8002a16:	2315      	movs	r3, #21
 8002a18:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
  uint8_t slv0_subadd = 0x16U;
 8002a1c:	2316      	movs	r3, #22
 8002a1e:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  uint8_t slave0_config = 0x17U;
 8002a22:	2317      	movs	r3, #23
 8002a24:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  uint8_t master_config = 0x14U;
 8002a28:	2314      	movs	r3, #20
 8002a2a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
  uint8_t write_once_i2c_en = 0x44U;
 8002a2e:	2344      	movs	r3, #68	; 0x44
 8002a30:	77bb      	strb	r3, [r7, #30]
  uint8_t sensor_hub_1 = 0x02U;
 8002a32:	2302      	movs	r3, #2
 8002a34:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  uint8_t status_master_mainpage = 0x39U;
 8002a38:	2339      	movs	r3, #57	; 0x39
 8002a3a:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
  uint8_t sens_hub_endop = 0x01U;
 8002a3e:	2301      	movs	r3, #1
 8002a40:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
  uint8_t lsm6dsox_outx_h_a = 0x29U;
 8002a44:	2329      	movs	r3, #41	; 0x29
 8002a46:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint8_t lsm6dsox_status_reg = 0x1EU;
 8002a4a:	231e      	movs	r3, #30
 8002a4c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  uint8_t xlda = 0x01U;
 8002a50:	2301      	movs	r3, #1
 8002a52:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  uint8_t len = (uint8_t)Length;
 8002a56:	893b      	ldrh	r3, [r7, #8]
 8002a58:	b2db      	uxtb	r3, r3
 8002a5a:	777b      	strb	r3, [r7, #29]
  uint8_t lsm6dsox_ctrl1_xl = 0x10U;
 8002a5c:	2310      	movs	r3, #16
 8002a5e:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  uint8_t lsm6dsox_xl_prev_odr;
  uint8_t lsm6dsox_xl_odr_off = 0x00U;
 8002a62:	2300      	movs	r3, #0
 8002a64:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint8_t lsm6dsox_xl_odr_104hz = 0x40U;
 8002a68:	2340      	movs	r3, #64	; 0x40
 8002a6a:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  uint8_t data;
  uint8_t data_array[6];

  /* Enable access to sensor hub registers */
  if (lis2mdl_write_reg(&(pObj->Ctx), lsm6dsox_func_cfg_access, &shub_reg_access_en, 1) != LIS2MDL_OK)
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	f103 0020 	add.w	r0, r3, #32
 8002a74:	f107 0221 	add.w	r2, r7, #33	; 0x21
 8002a78:	f897 102f 	ldrb.w	r1, [r7, #47]	; 0x2f
 8002a7c:	2301      	movs	r3, #1
 8002a7e:	f000 fa2a 	bl	8002ed6 <lis2mdl_write_reg>
 8002a82:	4603      	mov	r3, r0
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d002      	beq.n	8002a8e <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0xa2>
  {
    return LIS2MDL_ERROR;
 8002a88:	f04f 33ff 	mov.w	r3, #4294967295
 8002a8c:	e0e9      	b.n	8002c62 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
  }

  /* Configure external device address, Enable read operation (rw_0 = 1) */
  if (lis2mdl_write_reg(&(pObj->Ctx), slv0_add, &ext_sens_addr_read, 1) != LIS2MDL_OK)
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	f103 0020 	add.w	r0, r3, #32
 8002a94:	f107 021f 	add.w	r2, r7, #31
 8002a98:	f897 102e 	ldrb.w	r1, [r7, #46]	; 0x2e
 8002a9c:	2301      	movs	r3, #1
 8002a9e:	f000 fa1a 	bl	8002ed6 <lis2mdl_write_reg>
 8002aa2:	4603      	mov	r3, r0
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d002      	beq.n	8002aae <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0xc2>
  {
    return LIS2MDL_ERROR;
 8002aa8:	f04f 33ff 	mov.w	r3, #4294967295
 8002aac:	e0d9      	b.n	8002c62 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
  }

  /* Configure address of the LIS2MDL register to be read */
  if (lis2mdl_write_reg(&(pObj->Ctx), slv0_subadd, &Reg, 1) != LIS2MDL_OK)
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	f103 0020 	add.w	r0, r3, #32
 8002ab4:	f107 020b 	add.w	r2, r7, #11
 8002ab8:	f897 102d 	ldrb.w	r1, [r7, #45]	; 0x2d
 8002abc:	2301      	movs	r3, #1
 8002abe:	f000 fa0a 	bl	8002ed6 <lis2mdl_write_reg>
 8002ac2:	4603      	mov	r3, r0
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d002      	beq.n	8002ace <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0xe2>
  {
    return LIS2MDL_ERROR;
 8002ac8:	f04f 33ff 	mov.w	r3, #4294967295
 8002acc:	e0c9      	b.n	8002c62 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
  }

  /* Read required number of bytes (up to 6), SHUB_ODR = 104 Hz */
  if (lis2mdl_write_reg(&(pObj->Ctx), slave0_config, &len, 1) != LIS2MDL_OK)
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	f103 0020 	add.w	r0, r3, #32
 8002ad4:	f107 021d 	add.w	r2, r7, #29
 8002ad8:	f897 102c 	ldrb.w	r1, [r7, #44]	; 0x2c
 8002adc:	2301      	movs	r3, #1
 8002ade:	f000 f9fa 	bl	8002ed6 <lis2mdl_write_reg>
 8002ae2:	4603      	mov	r3, r0
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d002      	beq.n	8002aee <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x102>
  {
    return LIS2MDL_ERROR;
 8002ae8:	f04f 33ff 	mov.w	r3, #4294967295
 8002aec:	e0b9      	b.n	8002c62 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
  }

  /* WRITE_ONCE is mandatory for read, I2C master enabled using slave 0, I2C pull-ups disabled */
  if (lis2mdl_write_reg(&(pObj->Ctx), master_config, &write_once_i2c_en, 1) != LIS2MDL_OK)
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	f103 0020 	add.w	r0, r3, #32
 8002af4:	f107 021e 	add.w	r2, r7, #30
 8002af8:	f897 102b 	ldrb.w	r1, [r7, #43]	; 0x2b
 8002afc:	2301      	movs	r3, #1
 8002afe:	f000 f9ea 	bl	8002ed6 <lis2mdl_write_reg>
 8002b02:	4603      	mov	r3, r0
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d002      	beq.n	8002b0e <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x122>
  {
    return LIS2MDL_ERROR;
 8002b08:	f04f 33ff 	mov.w	r3, #4294967295
 8002b0c:	e0a9      	b.n	8002c62 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
  }

  /* Disable access to sensor hub registers */
  if (lis2mdl_write_reg(&(pObj->Ctx), lsm6dsox_func_cfg_access, &shub_reg_access_dis, 1) != LIS2MDL_OK)
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	f103 0020 	add.w	r0, r3, #32
 8002b14:	f107 0220 	add.w	r2, r7, #32
 8002b18:	f897 102f 	ldrb.w	r1, [r7, #47]	; 0x2f
 8002b1c:	2301      	movs	r3, #1
 8002b1e:	f000 f9da 	bl	8002ed6 <lis2mdl_write_reg>
 8002b22:	4603      	mov	r3, r0
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d002      	beq.n	8002b2e <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x142>
  {
    return LIS2MDL_ERROR;
 8002b28:	f04f 33ff 	mov.w	r3, #4294967295
 8002b2c:	e099      	b.n	8002c62 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
  }

  /* Read LSM6DSOX ODR */
  if (lis2mdl_read_reg(&(pObj->Ctx), lsm6dsox_ctrl1_xl, &lsm6dsox_xl_prev_odr, 1) != LIS2MDL_OK)
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	f103 0020 	add.w	r0, r3, #32
 8002b34:	f107 021c 	add.w	r2, r7, #28
 8002b38:	f897 1024 	ldrb.w	r1, [r7, #36]	; 0x24
 8002b3c:	2301      	movs	r3, #1
 8002b3e:	f000 f9b2 	bl	8002ea6 <lis2mdl_read_reg>
 8002b42:	4603      	mov	r3, r0
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d002      	beq.n	8002b4e <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x162>
  {
    return LIS2MDL_ERROR;
 8002b48:	f04f 33ff 	mov.w	r3, #4294967295
 8002b4c:	e089      	b.n	8002c62 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
  }

  /* Set XL_ODR_104HZ if the accelerometer is disabled */
  if (lsm6dsox_xl_prev_odr == lsm6dsox_xl_odr_off)
 8002b4e:	7f3b      	ldrb	r3, [r7, #28]
 8002b50:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8002b54:	429a      	cmp	r2, r3
 8002b56:	d102      	bne.n	8002b5e <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x172>
  {
    lsm6dsox_xl_prev_odr = lsm6dsox_xl_odr_104hz;
 8002b58:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8002b5c:	773b      	strb	r3, [r7, #28]
  }

  /* Enable accelerometer to trigger Sensor Hub operation */
  if (lis2mdl_write_reg(&(pObj->Ctx), lsm6dsox_ctrl1_xl, &lsm6dsox_xl_prev_odr, 1) != LIS2MDL_OK)
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	f103 0020 	add.w	r0, r3, #32
 8002b64:	f107 021c 	add.w	r2, r7, #28
 8002b68:	f897 1024 	ldrb.w	r1, [r7, #36]	; 0x24
 8002b6c:	2301      	movs	r3, #1
 8002b6e:	f000 f9b2 	bl	8002ed6 <lis2mdl_write_reg>
 8002b72:	4603      	mov	r3, r0
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d002      	beq.n	8002b7e <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x192>
  {
    return LIS2MDL_ERROR;
 8002b78:	f04f 33ff 	mov.w	r3, #4294967295
 8002b7c:	e071      	b.n	8002c62 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
  }

  /* Read ACC data starting from LSM6DSOX OUTX_H_A register to clear accelerometer data-ready XLDA */
  if (lis2mdl_read_reg(&(pObj->Ctx), lsm6dsox_outx_h_a, data_array, 6) != LIS2MDL_OK)
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	f103 0020 	add.w	r0, r3, #32
 8002b84:	f107 0214 	add.w	r2, r7, #20
 8002b88:	f897 1027 	ldrb.w	r1, [r7, #39]	; 0x27
 8002b8c:	2306      	movs	r3, #6
 8002b8e:	f000 f98a 	bl	8002ea6 <lis2mdl_read_reg>
 8002b92:	4603      	mov	r3, r0
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d002      	beq.n	8002b9e <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x1b2>
  {
    return LIS2MDL_ERROR;
 8002b98:	f04f 33ff 	mov.w	r3, #4294967295
 8002b9c:	e061      	b.n	8002c62 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
  }

  /* Poll LSM6DSOX LSM6DSOX_STATUS_REG until XLDA = 1 (Wait for sensor hub trigger) */
  do
  {
    if (lis2mdl_read_reg(&(pObj->Ctx), lsm6dsox_status_reg, &data, 1) != LIS2MDL_OK)
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	f103 0020 	add.w	r0, r3, #32
 8002ba4:	f107 021b 	add.w	r2, r7, #27
 8002ba8:	f897 1026 	ldrb.w	r1, [r7, #38]	; 0x26
 8002bac:	2301      	movs	r3, #1
 8002bae:	f000 f97a 	bl	8002ea6 <lis2mdl_read_reg>
 8002bb2:	4603      	mov	r3, r0
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d002      	beq.n	8002bbe <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x1d2>
    {
      return LIS2MDL_ERROR;
 8002bb8:	f04f 33ff 	mov.w	r3, #4294967295
 8002bbc:	e051      	b.n	8002c62 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
    }
  } while ((data & xlda) != xlda);
 8002bbe:	7efa      	ldrb	r2, [r7, #27]
 8002bc0:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8002bc4:	4013      	ands	r3, r2
 8002bc6:	b2db      	uxtb	r3, r3
 8002bc8:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
 8002bcc:	429a      	cmp	r2, r3
 8002bce:	d1e6      	bne.n	8002b9e <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x1b2>

  /* Poll LSM6DSOX SensorHub SENS_HUB_ENDOP bit in STATUS_MASTER_MAINPAGE reg until the end of SW write operations */
  do
  {
    if (lis2mdl_read_reg(&(pObj->Ctx), status_master_mainpage, &data, 1) != LIS2MDL_OK)
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	f103 0020 	add.w	r0, r3, #32
 8002bd6:	f107 021b 	add.w	r2, r7, #27
 8002bda:	f897 1029 	ldrb.w	r1, [r7, #41]	; 0x29
 8002bde:	2301      	movs	r3, #1
 8002be0:	f000 f961 	bl	8002ea6 <lis2mdl_read_reg>
 8002be4:	4603      	mov	r3, r0
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d002      	beq.n	8002bf0 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x204>
    {
      return LIS2MDL_ERROR;
 8002bea:	f04f 33ff 	mov.w	r3, #4294967295
 8002bee:	e038      	b.n	8002c62 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
    }
  } while ((data & sens_hub_endop) != sens_hub_endop);
 8002bf0:	7efa      	ldrb	r2, [r7, #27]
 8002bf2:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8002bf6:	4013      	ands	r3, r2
 8002bf8:	b2db      	uxtb	r3, r3
 8002bfa:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8002bfe:	429a      	cmp	r2, r3
 8002c00:	d1e6      	bne.n	8002bd0 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x1e4>

  /* Enable access to sensor hub registers */
  if (lis2mdl_write_reg(&(pObj->Ctx), lsm6dsox_func_cfg_access, &shub_reg_access_en, 1) != LIS2MDL_OK)
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	f103 0020 	add.w	r0, r3, #32
 8002c08:	f107 0221 	add.w	r2, r7, #33	; 0x21
 8002c0c:	f897 102f 	ldrb.w	r1, [r7, #47]	; 0x2f
 8002c10:	2301      	movs	r3, #1
 8002c12:	f000 f960 	bl	8002ed6 <lis2mdl_write_reg>
 8002c16:	4603      	mov	r3, r0
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d002      	beq.n	8002c22 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x236>
  {
    return LIS2MDL_ERROR;
 8002c1c:	f04f 33ff 	mov.w	r3, #4294967295
 8002c20:	e01f      	b.n	8002c62 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
  }

  /* Read data from LSM6DSOX SensorHub regs containing values from required LIS2MDL regs */
  if (lis2mdl_read_reg(&(pObj->Ctx), sensor_hub_1, pData, Length) != LIS2MDL_OK)
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	f103 0020 	add.w	r0, r3, #32
 8002c28:	893b      	ldrh	r3, [r7, #8]
 8002c2a:	f897 102a 	ldrb.w	r1, [r7, #42]	; 0x2a
 8002c2e:	687a      	ldr	r2, [r7, #4]
 8002c30:	f000 f939 	bl	8002ea6 <lis2mdl_read_reg>
 8002c34:	4603      	mov	r3, r0
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d002      	beq.n	8002c40 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x254>
  {
    return LIS2MDL_ERROR;
 8002c3a:	f04f 33ff 	mov.w	r3, #4294967295
 8002c3e:	e010      	b.n	8002c62 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
  }

  /* Disable access to sensor hub registers */
  if (lis2mdl_write_reg(&(pObj->Ctx), lsm6dsox_func_cfg_access, &shub_reg_access_dis, 1) != LIS2MDL_OK)
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	f103 0020 	add.w	r0, r3, #32
 8002c46:	f107 0220 	add.w	r2, r7, #32
 8002c4a:	f897 102f 	ldrb.w	r1, [r7, #47]	; 0x2f
 8002c4e:	2301      	movs	r3, #1
 8002c50:	f000 f941 	bl	8002ed6 <lis2mdl_write_reg>
 8002c54:	4603      	mov	r3, r0
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d002      	beq.n	8002c60 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x274>
  {
    return LIS2MDL_ERROR;
 8002c5a:	f04f 33ff 	mov.w	r3, #4294967295
 8002c5e:	e000      	b.n	8002c62 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
  }

  return LIS2MDL_OK;
 8002c60:	2300      	movs	r3, #0
}
 8002c62:	4618      	mov	r0, r3
 8002c64:	3730      	adds	r7, #48	; 0x30
 8002c66:	46bd      	mov	sp, r7
 8002c68:	bd80      	pop	{r7, pc}

08002c6a <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData>:
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData(LIS2MDL_Object_t *pObj, uint8_t Reg, uint8_t *pData,
                                                      uint16_t Length)
{
 8002c6a:	b580      	push	{r7, lr}
 8002c6c:	b08c      	sub	sp, #48	; 0x30
 8002c6e:	af00      	add	r7, sp, #0
 8002c70:	60f8      	str	r0, [r7, #12]
 8002c72:	607a      	str	r2, [r7, #4]
 8002c74:	461a      	mov	r2, r3
 8002c76:	460b      	mov	r3, r1
 8002c78:	72fb      	strb	r3, [r7, #11]
 8002c7a:	4613      	mov	r3, r2
 8002c7c:	813b      	strh	r3, [r7, #8]
  uint8_t lsm6dsox_func_cfg_access = 0x01U;
 8002c7e:	2301      	movs	r3, #1
 8002c80:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  uint8_t shub_reg_access_en = 0x40U;
 8002c84:	2340      	movs	r3, #64	; 0x40
 8002c86:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
  uint8_t shub_reg_access_dis = 0x00U;
 8002c8a:	2300      	movs	r3, #0
 8002c8c:	f887 3020 	strb.w	r3, [r7, #32]
  uint8_t ext_sens_addr_write = LIS2MDL_I2C_ADD & 0xFEU;
 8002c90:	233c      	movs	r3, #60	; 0x3c
 8002c92:	77fb      	strb	r3, [r7, #31]
  uint8_t slv0_add = 0x15U;
 8002c94:	2315      	movs	r3, #21
 8002c96:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
  uint8_t slv0_subadd = 0x16U;
 8002c9a:	2316      	movs	r3, #22
 8002c9c:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  uint8_t slave0_config = 0x17U;
 8002ca0:	2317      	movs	r3, #23
 8002ca2:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  uint8_t shub_odr_104 = 0x00U;
 8002ca6:	2300      	movs	r3, #0
 8002ca8:	77bb      	strb	r3, [r7, #30]
  uint8_t master_config = 0x14U;
 8002caa:	2314      	movs	r3, #20
 8002cac:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
  uint8_t write_once_i2c_en = 0x44U;
 8002cb0:	2344      	movs	r3, #68	; 0x44
 8002cb2:	777b      	strb	r3, [r7, #29]
  uint8_t status_master_mainpage = 0x39U;
 8002cb4:	2339      	movs	r3, #57	; 0x39
 8002cb6:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  uint8_t wr_once_done = 0x80U;
 8002cba:	2380      	movs	r3, #128	; 0x80
 8002cbc:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
  uint8_t lsm6dsox_outx_h_a = 0x29U;
 8002cc0:	2329      	movs	r3, #41	; 0x29
 8002cc2:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
  uint8_t lsm6dsox_status_reg = 0x1EU;
 8002cc6:	231e      	movs	r3, #30
 8002cc8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint8_t xlda = 0x01U;
 8002ccc:	2301      	movs	r3, #1
 8002cce:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  uint8_t lsm6dsox_ctrl1_xl = 0x10U;
 8002cd2:	2310      	movs	r3, #16
 8002cd4:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  uint8_t lsm6dsox_xl_prev_odr;
  uint8_t lsm6dsox_xl_odr_off = 0x00U;
 8002cd8:	2300      	movs	r3, #0
 8002cda:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  uint8_t lsm6dsox_xl_odr_104hz = 0x40U;
 8002cde:	2340      	movs	r3, #64	; 0x40
 8002ce0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint8_t datawrite_slv0 = 0x0EU;
 8002ce4:	230e      	movs	r3, #14
 8002ce6:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  uint8_t data;
  uint8_t data_array[6];

  /* Enable access to sensor hub registers */
  if (lis2mdl_write_reg(&(pObj->Ctx), lsm6dsox_func_cfg_access, &shub_reg_access_en, 1) != LIS2MDL_OK)
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	f103 0020 	add.w	r0, r3, #32
 8002cf0:	f107 0221 	add.w	r2, r7, #33	; 0x21
 8002cf4:	f897 102f 	ldrb.w	r1, [r7, #47]	; 0x2f
 8002cf8:	2301      	movs	r3, #1
 8002cfa:	f000 f8ec 	bl	8002ed6 <lis2mdl_write_reg>
 8002cfe:	4603      	mov	r3, r0
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d002      	beq.n	8002d0a <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0xa0>
  {
    return LIS2MDL_ERROR;
 8002d04:	f04f 33ff 	mov.w	r3, #4294967295
 8002d08:	e0c9      	b.n	8002e9e <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x234>
  }

  /* Configure external device address, Enable write operation (rw_0 = 0) */
  if (lis2mdl_write_reg(&(pObj->Ctx), slv0_add, &ext_sens_addr_write, 1) != LIS2MDL_OK)
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	f103 0020 	add.w	r0, r3, #32
 8002d10:	f107 021f 	add.w	r2, r7, #31
 8002d14:	f897 102e 	ldrb.w	r1, [r7, #46]	; 0x2e
 8002d18:	2301      	movs	r3, #1
 8002d1a:	f000 f8dc 	bl	8002ed6 <lis2mdl_write_reg>
 8002d1e:	4603      	mov	r3, r0
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d002      	beq.n	8002d2a <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0xc0>
  {
    return LIS2MDL_ERROR;
 8002d24:	f04f 33ff 	mov.w	r3, #4294967295
 8002d28:	e0b9      	b.n	8002e9e <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x234>
  }

  /* Configure address of the LIS2MDL register to be written to */
  if (lis2mdl_write_reg(&(pObj->Ctx), slv0_subadd, &Reg, 1) != LIS2MDL_OK)
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	f103 0020 	add.w	r0, r3, #32
 8002d30:	f107 020b 	add.w	r2, r7, #11
 8002d34:	f897 102d 	ldrb.w	r1, [r7, #45]	; 0x2d
 8002d38:	2301      	movs	r3, #1
 8002d3a:	f000 f8cc 	bl	8002ed6 <lis2mdl_write_reg>
 8002d3e:	4603      	mov	r3, r0
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d002      	beq.n	8002d4a <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0xe0>
  {
    return LIS2MDL_ERROR;
 8002d44:	f04f 33ff 	mov.w	r3, #4294967295
 8002d48:	e0a9      	b.n	8002e9e <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x234>
  }

  /* Set SHUB_ODR = 104 Hz */
  if (lis2mdl_write_reg(&(pObj->Ctx), slave0_config, &shub_odr_104, 1) != LIS2MDL_OK)
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	f103 0020 	add.w	r0, r3, #32
 8002d50:	f107 021e 	add.w	r2, r7, #30
 8002d54:	f897 102c 	ldrb.w	r1, [r7, #44]	; 0x2c
 8002d58:	2301      	movs	r3, #1
 8002d5a:	f000 f8bc 	bl	8002ed6 <lis2mdl_write_reg>
 8002d5e:	4603      	mov	r3, r0
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d002      	beq.n	8002d6a <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x100>
  {
    return LIS2MDL_ERROR;
 8002d64:	f04f 33ff 	mov.w	r3, #4294967295
 8002d68:	e099      	b.n	8002e9e <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x234>
  }

  /* Store data to be written to LIS2MDL in LSM6DSOX SH reg */
  if (lis2mdl_write_reg(&(pObj->Ctx), datawrite_slv0, pData, 1) != LIS2MDL_OK)
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	f103 0020 	add.w	r0, r3, #32
 8002d70:	f897 1022 	ldrb.w	r1, [r7, #34]	; 0x22
 8002d74:	2301      	movs	r3, #1
 8002d76:	687a      	ldr	r2, [r7, #4]
 8002d78:	f000 f8ad 	bl	8002ed6 <lis2mdl_write_reg>
 8002d7c:	4603      	mov	r3, r0
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d002      	beq.n	8002d88 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x11e>
  {
    return LIS2MDL_ERROR;
 8002d82:	f04f 33ff 	mov.w	r3, #4294967295
 8002d86:	e08a      	b.n	8002e9e <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x234>
  }

  /* WRITE_ONCE enabled for single write, I2C master enabled using slave 0, I2C pull-ups disabled */
  if (lis2mdl_write_reg(&(pObj->Ctx), master_config, &write_once_i2c_en, 1) != LIS2MDL_OK)
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	f103 0020 	add.w	r0, r3, #32
 8002d8e:	f107 021d 	add.w	r2, r7, #29
 8002d92:	f897 102b 	ldrb.w	r1, [r7, #43]	; 0x2b
 8002d96:	2301      	movs	r3, #1
 8002d98:	f000 f89d 	bl	8002ed6 <lis2mdl_write_reg>
 8002d9c:	4603      	mov	r3, r0
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d002      	beq.n	8002da8 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x13e>
  {
    return LIS2MDL_ERROR;
 8002da2:	f04f 33ff 	mov.w	r3, #4294967295
 8002da6:	e07a      	b.n	8002e9e <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x234>
  }

  /* Disable access to sensor hub registers */
  if (lis2mdl_write_reg(&(pObj->Ctx), lsm6dsox_func_cfg_access, &shub_reg_access_dis, 1) != LIS2MDL_OK)
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	f103 0020 	add.w	r0, r3, #32
 8002dae:	f107 0220 	add.w	r2, r7, #32
 8002db2:	f897 102f 	ldrb.w	r1, [r7, #47]	; 0x2f
 8002db6:	2301      	movs	r3, #1
 8002db8:	f000 f88d 	bl	8002ed6 <lis2mdl_write_reg>
 8002dbc:	4603      	mov	r3, r0
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d002      	beq.n	8002dc8 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x15e>
  {
    return LIS2MDL_ERROR;
 8002dc2:	f04f 33ff 	mov.w	r3, #4294967295
 8002dc6:	e06a      	b.n	8002e9e <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x234>
  }

  /* Read LSM6DSOX ODR */
  if (lis2mdl_read_reg(&(pObj->Ctx), lsm6dsox_ctrl1_xl, &lsm6dsox_xl_prev_odr, 1) != LIS2MDL_OK)
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	f103 0020 	add.w	r0, r3, #32
 8002dce:	f107 021c 	add.w	r2, r7, #28
 8002dd2:	f897 1025 	ldrb.w	r1, [r7, #37]	; 0x25
 8002dd6:	2301      	movs	r3, #1
 8002dd8:	f000 f865 	bl	8002ea6 <lis2mdl_read_reg>
 8002ddc:	4603      	mov	r3, r0
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d002      	beq.n	8002de8 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x17e>
  {
    return LIS2MDL_ERROR;
 8002de2:	f04f 33ff 	mov.w	r3, #4294967295
 8002de6:	e05a      	b.n	8002e9e <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x234>
  }

  /* Set XL_ODR_104HZ if the accelerometer is disabled */
  if (lsm6dsox_xl_prev_odr == lsm6dsox_xl_odr_off)
 8002de8:	7f3b      	ldrb	r3, [r7, #28]
 8002dea:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8002dee:	429a      	cmp	r2, r3
 8002df0:	d102      	bne.n	8002df8 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x18e>
  {
    lsm6dsox_xl_prev_odr = lsm6dsox_xl_odr_104hz;
 8002df2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002df6:	773b      	strb	r3, [r7, #28]
  }

  /* Enable accelerometer to trigger Sensor Hub operation */
  if (lis2mdl_write_reg(&(pObj->Ctx), lsm6dsox_ctrl1_xl, &lsm6dsox_xl_prev_odr, 1) != LIS2MDL_OK)
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	f103 0020 	add.w	r0, r3, #32
 8002dfe:	f107 021c 	add.w	r2, r7, #28
 8002e02:	f897 1025 	ldrb.w	r1, [r7, #37]	; 0x25
 8002e06:	2301      	movs	r3, #1
 8002e08:	f000 f865 	bl	8002ed6 <lis2mdl_write_reg>
 8002e0c:	4603      	mov	r3, r0
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d002      	beq.n	8002e18 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x1ae>
  {
    return LIS2MDL_ERROR;
 8002e12:	f04f 33ff 	mov.w	r3, #4294967295
 8002e16:	e042      	b.n	8002e9e <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x234>
  }

  /* Read ACC data starting from LSM6DSOX OUTX_H_A register to clear accelerometer data-ready XLDA */
  if (lis2mdl_read_reg(&(pObj->Ctx), lsm6dsox_outx_h_a, data_array, 6) != LIS2MDL_OK)
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	f103 0020 	add.w	r0, r3, #32
 8002e1e:	f107 0214 	add.w	r2, r7, #20
 8002e22:	f897 1028 	ldrb.w	r1, [r7, #40]	; 0x28
 8002e26:	2306      	movs	r3, #6
 8002e28:	f000 f83d 	bl	8002ea6 <lis2mdl_read_reg>
 8002e2c:	4603      	mov	r3, r0
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d002      	beq.n	8002e38 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x1ce>
  {
    return LIS2MDL_ERROR;
 8002e32:	f04f 33ff 	mov.w	r3, #4294967295
 8002e36:	e032      	b.n	8002e9e <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x234>
  }

  /* Poll LSM6DSOX LSM6DSOX_STATUS_REG until XLDA = 1 (Wait for sensor hub trigger) */
  do
  {
    if (lis2mdl_read_reg(&(pObj->Ctx), lsm6dsox_status_reg, &data, 1) != LIS2MDL_OK)
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	f103 0020 	add.w	r0, r3, #32
 8002e3e:	f107 021b 	add.w	r2, r7, #27
 8002e42:	f897 1027 	ldrb.w	r1, [r7, #39]	; 0x27
 8002e46:	2301      	movs	r3, #1
 8002e48:	f000 f82d 	bl	8002ea6 <lis2mdl_read_reg>
 8002e4c:	4603      	mov	r3, r0
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d002      	beq.n	8002e58 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x1ee>
    {
      return LIS2MDL_ERROR;
 8002e52:	f04f 33ff 	mov.w	r3, #4294967295
 8002e56:	e022      	b.n	8002e9e <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x234>
    }
  } while ((data & xlda) != xlda);
 8002e58:	7efa      	ldrb	r2, [r7, #27]
 8002e5a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8002e5e:	4013      	ands	r3, r2
 8002e60:	b2db      	uxtb	r3, r3
 8002e62:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8002e66:	429a      	cmp	r2, r3
 8002e68:	d1e6      	bne.n	8002e38 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x1ce>

  /* Poll LSM6DSOX SensorHub WR_ONCE_DONE bit in STATUS_MASTER_MAINPAGE reg until the end of SW write operations */
  do
  {
    if (lis2mdl_read_reg(&(pObj->Ctx), status_master_mainpage, &data, 1) != LIS2MDL_OK)
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	f103 0020 	add.w	r0, r3, #32
 8002e70:	f107 021b 	add.w	r2, r7, #27
 8002e74:	f897 102a 	ldrb.w	r1, [r7, #42]	; 0x2a
 8002e78:	2301      	movs	r3, #1
 8002e7a:	f000 f814 	bl	8002ea6 <lis2mdl_read_reg>
 8002e7e:	4603      	mov	r3, r0
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d002      	beq.n	8002e8a <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x220>
    {
      return LIS2MDL_ERROR;
 8002e84:	f04f 33ff 	mov.w	r3, #4294967295
 8002e88:	e009      	b.n	8002e9e <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x234>
    }
  } while ((data & wr_once_done) != wr_once_done);
 8002e8a:	7efa      	ldrb	r2, [r7, #27]
 8002e8c:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8002e90:	4013      	ands	r3, r2
 8002e92:	b2db      	uxtb	r3, r3
 8002e94:	f897 2029 	ldrb.w	r2, [r7, #41]	; 0x29
 8002e98:	429a      	cmp	r2, r3
 8002e9a:	d1e6      	bne.n	8002e6a <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x200>

  return LIS2MDL_OK;
 8002e9c:	2300      	movs	r3, #0
}
 8002e9e:	4618      	mov	r0, r3
 8002ea0:	3730      	adds	r7, #48	; 0x30
 8002ea2:	46bd      	mov	sp, r7
 8002ea4:	bd80      	pop	{r7, pc}

08002ea6 <lis2mdl_read_reg>:
  *
  */
int32_t lis2mdl_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                         uint8_t *data,
                         uint16_t len)
{
 8002ea6:	b590      	push	{r4, r7, lr}
 8002ea8:	b087      	sub	sp, #28
 8002eaa:	af00      	add	r7, sp, #0
 8002eac:	60f8      	str	r0, [r7, #12]
 8002eae:	607a      	str	r2, [r7, #4]
 8002eb0:	461a      	mov	r2, r3
 8002eb2:	460b      	mov	r3, r1
 8002eb4:	72fb      	strb	r3, [r7, #11]
 8002eb6:	4613      	mov	r3, r2
 8002eb8:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	685c      	ldr	r4, [r3, #4]
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	68d8      	ldr	r0, [r3, #12]
 8002ec2:	893b      	ldrh	r3, [r7, #8]
 8002ec4:	7af9      	ldrb	r1, [r7, #11]
 8002ec6:	687a      	ldr	r2, [r7, #4]
 8002ec8:	47a0      	blx	r4
 8002eca:	6178      	str	r0, [r7, #20]

  return ret;
 8002ecc:	697b      	ldr	r3, [r7, #20]
}
 8002ece:	4618      	mov	r0, r3
 8002ed0:	371c      	adds	r7, #28
 8002ed2:	46bd      	mov	sp, r7
 8002ed4:	bd90      	pop	{r4, r7, pc}

08002ed6 <lis2mdl_write_reg>:
  *
  */
int32_t lis2mdl_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                          uint8_t *data,
                          uint16_t len)
{
 8002ed6:	b590      	push	{r4, r7, lr}
 8002ed8:	b087      	sub	sp, #28
 8002eda:	af00      	add	r7, sp, #0
 8002edc:	60f8      	str	r0, [r7, #12]
 8002ede:	607a      	str	r2, [r7, #4]
 8002ee0:	461a      	mov	r2, r3
 8002ee2:	460b      	mov	r3, r1
 8002ee4:	72fb      	strb	r3, [r7, #11]
 8002ee6:	4613      	mov	r3, r2
 8002ee8:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	681c      	ldr	r4, [r3, #0]
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	68d8      	ldr	r0, [r3, #12]
 8002ef2:	893b      	ldrh	r3, [r7, #8]
 8002ef4:	7af9      	ldrb	r1, [r7, #11]
 8002ef6:	687a      	ldr	r2, [r7, #4]
 8002ef8:	47a0      	blx	r4
 8002efa:	6178      	str	r0, [r7, #20]

  return ret;
 8002efc:	697b      	ldr	r3, [r7, #20]
}
 8002efe:	4618      	mov	r0, r3
 8002f00:	371c      	adds	r7, #28
 8002f02:	46bd      	mov	sp, r7
 8002f04:	bd90      	pop	{r4, r7, pc}

08002f06 <lis2mdl_operating_mode_set>:
  * @retval        interface status.(MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2mdl_operating_mode_set(stmdev_ctx_t *ctx,
                                   lis2mdl_md_t val)
{
 8002f06:	b580      	push	{r7, lr}
 8002f08:	b084      	sub	sp, #16
 8002f0a:	af00      	add	r7, sp, #0
 8002f0c:	6078      	str	r0, [r7, #4]
 8002f0e:	460b      	mov	r3, r1
 8002f10:	70fb      	strb	r3, [r7, #3]
  lis2mdl_cfg_reg_a_t reg;
  int32_t ret;

  ret = lis2mdl_read_reg(ctx, LIS2MDL_CFG_REG_A, (uint8_t *)&reg, 1);
 8002f12:	f107 0208 	add.w	r2, r7, #8
 8002f16:	2301      	movs	r3, #1
 8002f18:	2160      	movs	r1, #96	; 0x60
 8002f1a:	6878      	ldr	r0, [r7, #4]
 8002f1c:	f7ff ffc3 	bl	8002ea6 <lis2mdl_read_reg>
 8002f20:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d10f      	bne.n	8002f48 <lis2mdl_operating_mode_set+0x42>
  {
    reg.md = (uint8_t)val;
 8002f28:	78fb      	ldrb	r3, [r7, #3]
 8002f2a:	f003 0303 	and.w	r3, r3, #3
 8002f2e:	b2da      	uxtb	r2, r3
 8002f30:	7a3b      	ldrb	r3, [r7, #8]
 8002f32:	f362 0301 	bfi	r3, r2, #0, #2
 8002f36:	723b      	strb	r3, [r7, #8]
    ret = lis2mdl_write_reg(ctx, LIS2MDL_CFG_REG_A, (uint8_t *)&reg, 1);
 8002f38:	f107 0208 	add.w	r2, r7, #8
 8002f3c:	2301      	movs	r3, #1
 8002f3e:	2160      	movs	r1, #96	; 0x60
 8002f40:	6878      	ldr	r0, [r7, #4]
 8002f42:	f7ff ffc8 	bl	8002ed6 <lis2mdl_write_reg>
 8002f46:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8002f48:	68fb      	ldr	r3, [r7, #12]
}
 8002f4a:	4618      	mov	r0, r3
 8002f4c:	3710      	adds	r7, #16
 8002f4e:	46bd      	mov	sp, r7
 8002f50:	bd80      	pop	{r7, pc}

08002f52 <lis2mdl_data_rate_set>:
  * @param  val   change the values of odr in reg CFG_REG_A
  * @retval       interface status.(MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2mdl_data_rate_set(stmdev_ctx_t *ctx, lis2mdl_odr_t val)
{
 8002f52:	b580      	push	{r7, lr}
 8002f54:	b084      	sub	sp, #16
 8002f56:	af00      	add	r7, sp, #0
 8002f58:	6078      	str	r0, [r7, #4]
 8002f5a:	460b      	mov	r3, r1
 8002f5c:	70fb      	strb	r3, [r7, #3]
  lis2mdl_cfg_reg_a_t reg;
  int32_t ret;

  ret = lis2mdl_read_reg(ctx, LIS2MDL_CFG_REG_A, (uint8_t *)&reg, 1);
 8002f5e:	f107 0208 	add.w	r2, r7, #8
 8002f62:	2301      	movs	r3, #1
 8002f64:	2160      	movs	r1, #96	; 0x60
 8002f66:	6878      	ldr	r0, [r7, #4]
 8002f68:	f7ff ff9d 	bl	8002ea6 <lis2mdl_read_reg>
 8002f6c:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d10f      	bne.n	8002f94 <lis2mdl_data_rate_set+0x42>
  {
    reg.odr = (uint8_t)val;
 8002f74:	78fb      	ldrb	r3, [r7, #3]
 8002f76:	f003 0303 	and.w	r3, r3, #3
 8002f7a:	b2da      	uxtb	r2, r3
 8002f7c:	7a3b      	ldrb	r3, [r7, #8]
 8002f7e:	f362 0383 	bfi	r3, r2, #2, #2
 8002f82:	723b      	strb	r3, [r7, #8]
    ret = lis2mdl_write_reg(ctx, LIS2MDL_CFG_REG_A, (uint8_t *)&reg, 1);
 8002f84:	f107 0208 	add.w	r2, r7, #8
 8002f88:	2301      	movs	r3, #1
 8002f8a:	2160      	movs	r1, #96	; 0x60
 8002f8c:	6878      	ldr	r0, [r7, #4]
 8002f8e:	f7ff ffa2 	bl	8002ed6 <lis2mdl_write_reg>
 8002f92:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8002f94:	68fb      	ldr	r3, [r7, #12]
}
 8002f96:	4618      	mov	r0, r3
 8002f98:	3710      	adds	r7, #16
 8002f9a:	46bd      	mov	sp, r7
 8002f9c:	bd80      	pop	{r7, pc}
	...

08002fa0 <lis2mdl_data_rate_get>:
  * @param  val   Get the values of odr in reg CFG_REG_A.(ptr)
  * @retval       interface status.(MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2mdl_data_rate_get(stmdev_ctx_t *ctx, lis2mdl_odr_t *val)
{
 8002fa0:	b580      	push	{r7, lr}
 8002fa2:	b084      	sub	sp, #16
 8002fa4:	af00      	add	r7, sp, #0
 8002fa6:	6078      	str	r0, [r7, #4]
 8002fa8:	6039      	str	r1, [r7, #0]
  lis2mdl_cfg_reg_a_t reg;
  int32_t ret;

  ret = lis2mdl_read_reg(ctx, LIS2MDL_CFG_REG_A, (uint8_t *)&reg, 1);
 8002faa:	f107 0208 	add.w	r2, r7, #8
 8002fae:	2301      	movs	r3, #1
 8002fb0:	2160      	movs	r1, #96	; 0x60
 8002fb2:	6878      	ldr	r0, [r7, #4]
 8002fb4:	f7ff ff77 	bl	8002ea6 <lis2mdl_read_reg>
 8002fb8:	60f8      	str	r0, [r7, #12]

  switch (reg.odr)
 8002fba:	7a3b      	ldrb	r3, [r7, #8]
 8002fbc:	f3c3 0381 	ubfx	r3, r3, #2, #2
 8002fc0:	b2db      	uxtb	r3, r3
 8002fc2:	2b03      	cmp	r3, #3
 8002fc4:	d81a      	bhi.n	8002ffc <lis2mdl_data_rate_get+0x5c>
 8002fc6:	a201      	add	r2, pc, #4	; (adr r2, 8002fcc <lis2mdl_data_rate_get+0x2c>)
 8002fc8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002fcc:	08002fdd 	.word	0x08002fdd
 8002fd0:	08002fe5 	.word	0x08002fe5
 8002fd4:	08002fed 	.word	0x08002fed
 8002fd8:	08002ff5 	.word	0x08002ff5
  {
    case LIS2MDL_ODR_10Hz:
      *val = LIS2MDL_ODR_10Hz;
 8002fdc:	683b      	ldr	r3, [r7, #0]
 8002fde:	2200      	movs	r2, #0
 8002fe0:	701a      	strb	r2, [r3, #0]
      break;
 8002fe2:	e00f      	b.n	8003004 <lis2mdl_data_rate_get+0x64>

    case LIS2MDL_ODR_20Hz:
      *val = LIS2MDL_ODR_20Hz;
 8002fe4:	683b      	ldr	r3, [r7, #0]
 8002fe6:	2201      	movs	r2, #1
 8002fe8:	701a      	strb	r2, [r3, #0]
      break;
 8002fea:	e00b      	b.n	8003004 <lis2mdl_data_rate_get+0x64>

    case LIS2MDL_ODR_50Hz:
      *val = LIS2MDL_ODR_50Hz;
 8002fec:	683b      	ldr	r3, [r7, #0]
 8002fee:	2202      	movs	r2, #2
 8002ff0:	701a      	strb	r2, [r3, #0]
      break;
 8002ff2:	e007      	b.n	8003004 <lis2mdl_data_rate_get+0x64>

    case LIS2MDL_ODR_100Hz:
      *val = LIS2MDL_ODR_100Hz;
 8002ff4:	683b      	ldr	r3, [r7, #0]
 8002ff6:	2203      	movs	r2, #3
 8002ff8:	701a      	strb	r2, [r3, #0]
      break;
 8002ffa:	e003      	b.n	8003004 <lis2mdl_data_rate_get+0x64>

    default:
      *val = LIS2MDL_ODR_10Hz;
 8002ffc:	683b      	ldr	r3, [r7, #0]
 8002ffe:	2200      	movs	r2, #0
 8003000:	701a      	strb	r2, [r3, #0]
      break;
 8003002:	bf00      	nop
  }

  return ret;
 8003004:	68fb      	ldr	r3, [r7, #12]
}
 8003006:	4618      	mov	r0, r3
 8003008:	3710      	adds	r7, #16
 800300a:	46bd      	mov	sp, r7
 800300c:	bd80      	pop	{r7, pc}
 800300e:	bf00      	nop

08003010 <lis2mdl_block_data_update_set>:
  * @param  val   change the values of bdu in reg CFG_REG_C
  * @retval       interface status.(MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2mdl_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8003010:	b580      	push	{r7, lr}
 8003012:	b084      	sub	sp, #16
 8003014:	af00      	add	r7, sp, #0
 8003016:	6078      	str	r0, [r7, #4]
 8003018:	460b      	mov	r3, r1
 800301a:	70fb      	strb	r3, [r7, #3]
  lis2mdl_cfg_reg_c_t reg;
  int32_t ret;

  ret = lis2mdl_read_reg(ctx, LIS2MDL_CFG_REG_C, (uint8_t *)&reg, 1);
 800301c:	f107 0208 	add.w	r2, r7, #8
 8003020:	2301      	movs	r3, #1
 8003022:	2162      	movs	r1, #98	; 0x62
 8003024:	6878      	ldr	r0, [r7, #4]
 8003026:	f7ff ff3e 	bl	8002ea6 <lis2mdl_read_reg>
 800302a:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	2b00      	cmp	r3, #0
 8003030:	d10f      	bne.n	8003052 <lis2mdl_block_data_update_set+0x42>
  {
    reg.bdu = val;
 8003032:	78fb      	ldrb	r3, [r7, #3]
 8003034:	f003 0301 	and.w	r3, r3, #1
 8003038:	b2da      	uxtb	r2, r3
 800303a:	7a3b      	ldrb	r3, [r7, #8]
 800303c:	f362 1304 	bfi	r3, r2, #4, #1
 8003040:	723b      	strb	r3, [r7, #8]
    ret = lis2mdl_write_reg(ctx, LIS2MDL_CFG_REG_C, (uint8_t *)&reg, 1);
 8003042:	f107 0208 	add.w	r2, r7, #8
 8003046:	2301      	movs	r3, #1
 8003048:	2162      	movs	r1, #98	; 0x62
 800304a:	6878      	ldr	r0, [r7, #4]
 800304c:	f7ff ff43 	bl	8002ed6 <lis2mdl_write_reg>
 8003050:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8003052:	68fb      	ldr	r3, [r7, #12]
}
 8003054:	4618      	mov	r0, r3
 8003056:	3710      	adds	r7, #16
 8003058:	46bd      	mov	sp, r7
 800305a:	bd80      	pop	{r7, pc}

0800305c <lis2mdl_magnetic_raw_get>:
  * @param  buff  that stores data read
  * @retval       interface status.(MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2mdl_magnetic_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 800305c:	b580      	push	{r7, lr}
 800305e:	b086      	sub	sp, #24
 8003060:	af00      	add	r7, sp, #0
 8003062:	6078      	str	r0, [r7, #4]
 8003064:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;

  ret = lis2mdl_read_reg(ctx, LIS2MDL_OUTX_L_REG, buff, 6);
 8003066:	f107 020c 	add.w	r2, r7, #12
 800306a:	2306      	movs	r3, #6
 800306c:	2168      	movs	r1, #104	; 0x68
 800306e:	6878      	ldr	r0, [r7, #4]
 8003070:	f7ff ff19 	bl	8002ea6 <lis2mdl_read_reg>
 8003074:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 8003076:	7b7b      	ldrb	r3, [r7, #13]
 8003078:	b21a      	sxth	r2, r3
 800307a:	683b      	ldr	r3, [r7, #0]
 800307c:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 800307e:	683b      	ldr	r3, [r7, #0]
 8003080:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003084:	b29b      	uxth	r3, r3
 8003086:	021b      	lsls	r3, r3, #8
 8003088:	b29a      	uxth	r2, r3
 800308a:	7b3b      	ldrb	r3, [r7, #12]
 800308c:	b29b      	uxth	r3, r3
 800308e:	4413      	add	r3, r2
 8003090:	b29b      	uxth	r3, r3
 8003092:	b21a      	sxth	r2, r3
 8003094:	683b      	ldr	r3, [r7, #0]
 8003096:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 8003098:	7bfa      	ldrb	r2, [r7, #15]
 800309a:	683b      	ldr	r3, [r7, #0]
 800309c:	3302      	adds	r3, #2
 800309e:	b212      	sxth	r2, r2
 80030a0:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 80030a2:	683b      	ldr	r3, [r7, #0]
 80030a4:	3302      	adds	r3, #2
 80030a6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80030aa:	b29b      	uxth	r3, r3
 80030ac:	021b      	lsls	r3, r3, #8
 80030ae:	b29a      	uxth	r2, r3
 80030b0:	7bbb      	ldrb	r3, [r7, #14]
 80030b2:	b29b      	uxth	r3, r3
 80030b4:	4413      	add	r3, r2
 80030b6:	b29a      	uxth	r2, r3
 80030b8:	683b      	ldr	r3, [r7, #0]
 80030ba:	3302      	adds	r3, #2
 80030bc:	b212      	sxth	r2, r2
 80030be:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 80030c0:	7c7a      	ldrb	r2, [r7, #17]
 80030c2:	683b      	ldr	r3, [r7, #0]
 80030c4:	3304      	adds	r3, #4
 80030c6:	b212      	sxth	r2, r2
 80030c8:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 80030ca:	683b      	ldr	r3, [r7, #0]
 80030cc:	3304      	adds	r3, #4
 80030ce:	f9b3 3000 	ldrsh.w	r3, [r3]
 80030d2:	b29b      	uxth	r3, r3
 80030d4:	021b      	lsls	r3, r3, #8
 80030d6:	b29a      	uxth	r2, r3
 80030d8:	7c3b      	ldrb	r3, [r7, #16]
 80030da:	b29b      	uxth	r3, r3
 80030dc:	4413      	add	r3, r2
 80030de:	b29a      	uxth	r2, r3
 80030e0:	683b      	ldr	r3, [r7, #0]
 80030e2:	3304      	adds	r3, #4
 80030e4:	b212      	sxth	r2, r2
 80030e6:	801a      	strh	r2, [r3, #0]

  return ret;
 80030e8:	697b      	ldr	r3, [r7, #20]
}
 80030ea:	4618      	mov	r0, r3
 80030ec:	3718      	adds	r7, #24
 80030ee:	46bd      	mov	sp, r7
 80030f0:	bd80      	pop	{r7, pc}

080030f2 <lis2mdl_device_id_get>:
  * @param  buff  that stores data read
  * @retval       interface status.(MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2mdl_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 80030f2:	b580      	push	{r7, lr}
 80030f4:	b084      	sub	sp, #16
 80030f6:	af00      	add	r7, sp, #0
 80030f8:	6078      	str	r0, [r7, #4]
 80030fa:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = lis2mdl_read_reg(ctx, LIS2MDL_WHO_AM_I, buff, 1);
 80030fc:	2301      	movs	r3, #1
 80030fe:	683a      	ldr	r2, [r7, #0]
 8003100:	214f      	movs	r1, #79	; 0x4f
 8003102:	6878      	ldr	r0, [r7, #4]
 8003104:	f7ff fecf 	bl	8002ea6 <lis2mdl_read_reg>
 8003108:	60f8      	str	r0, [r7, #12]

  return ret;
 800310a:	68fb      	ldr	r3, [r7, #12]
}
 800310c:	4618      	mov	r0, r3
 800310e:	3710      	adds	r7, #16
 8003110:	46bd      	mov	sp, r7
 8003112:	bd80      	pop	{r7, pc}

08003114 <lis2mdl_self_test_set>:
  * @param  val   change the values of self_test in reg CFG_REG_C
  * @retval       interface status.(MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2mdl_self_test_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8003114:	b580      	push	{r7, lr}
 8003116:	b084      	sub	sp, #16
 8003118:	af00      	add	r7, sp, #0
 800311a:	6078      	str	r0, [r7, #4]
 800311c:	460b      	mov	r3, r1
 800311e:	70fb      	strb	r3, [r7, #3]
  lis2mdl_cfg_reg_c_t reg;
  int32_t ret;

  ret = lis2mdl_read_reg(ctx, LIS2MDL_CFG_REG_C, (uint8_t *)&reg, 1);
 8003120:	f107 0208 	add.w	r2, r7, #8
 8003124:	2301      	movs	r3, #1
 8003126:	2162      	movs	r1, #98	; 0x62
 8003128:	6878      	ldr	r0, [r7, #4]
 800312a:	f7ff febc 	bl	8002ea6 <lis2mdl_read_reg>
 800312e:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	2b00      	cmp	r3, #0
 8003134:	d10f      	bne.n	8003156 <lis2mdl_self_test_set+0x42>
  {
    reg.self_test = val;
 8003136:	78fb      	ldrb	r3, [r7, #3]
 8003138:	f003 0301 	and.w	r3, r3, #1
 800313c:	b2da      	uxtb	r2, r3
 800313e:	7a3b      	ldrb	r3, [r7, #8]
 8003140:	f362 0341 	bfi	r3, r2, #1, #1
 8003144:	723b      	strb	r3, [r7, #8]
    ret = lis2mdl_write_reg(ctx, LIS2MDL_CFG_REG_C, (uint8_t *)&reg, 1);
 8003146:	f107 0208 	add.w	r2, r7, #8
 800314a:	2301      	movs	r3, #1
 800314c:	2162      	movs	r1, #98	; 0x62
 800314e:	6878      	ldr	r0, [r7, #4]
 8003150:	f7ff fec1 	bl	8002ed6 <lis2mdl_write_reg>
 8003154:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8003156:	68fb      	ldr	r3, [r7, #12]
}
 8003158:	4618      	mov	r0, r3
 800315a:	3710      	adds	r7, #16
 800315c:	46bd      	mov	sp, r7
 800315e:	bd80      	pop	{r7, pc}

08003160 <lis2mdl_i2c_interface_set>:
  * @retval       interface status.(MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2mdl_i2c_interface_set(stmdev_ctx_t *ctx,
                                  lis2mdl_i2c_dis_t val)
{
 8003160:	b580      	push	{r7, lr}
 8003162:	b084      	sub	sp, #16
 8003164:	af00      	add	r7, sp, #0
 8003166:	6078      	str	r0, [r7, #4]
 8003168:	460b      	mov	r3, r1
 800316a:	70fb      	strb	r3, [r7, #3]
  lis2mdl_cfg_reg_c_t reg;
  int32_t ret;

  ret = lis2mdl_read_reg(ctx, LIS2MDL_CFG_REG_C, (uint8_t *)&reg, 1);
 800316c:	f107 0208 	add.w	r2, r7, #8
 8003170:	2301      	movs	r3, #1
 8003172:	2162      	movs	r1, #98	; 0x62
 8003174:	6878      	ldr	r0, [r7, #4]
 8003176:	f7ff fe96 	bl	8002ea6 <lis2mdl_read_reg>
 800317a:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	2b00      	cmp	r3, #0
 8003180:	d10f      	bne.n	80031a2 <lis2mdl_i2c_interface_set+0x42>
  {
    reg.i2c_dis = (uint8_t)val;
 8003182:	78fb      	ldrb	r3, [r7, #3]
 8003184:	f003 0301 	and.w	r3, r3, #1
 8003188:	b2da      	uxtb	r2, r3
 800318a:	7a3b      	ldrb	r3, [r7, #8]
 800318c:	f362 1345 	bfi	r3, r2, #5, #1
 8003190:	723b      	strb	r3, [r7, #8]
    ret = lis2mdl_write_reg(ctx, LIS2MDL_CFG_REG_C, (uint8_t *)&reg, 1);
 8003192:	f107 0208 	add.w	r2, r7, #8
 8003196:	2301      	movs	r3, #1
 8003198:	2162      	movs	r1, #98	; 0x62
 800319a:	6878      	ldr	r0, [r7, #4]
 800319c:	f7ff fe9b 	bl	8002ed6 <lis2mdl_write_reg>
 80031a0:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80031a2:	68fb      	ldr	r3, [r7, #12]
}
 80031a4:	4618      	mov	r0, r3
 80031a6:	3710      	adds	r7, #16
 80031a8:	46bd      	mov	sp, r7
 80031aa:	bd80      	pop	{r7, pc}

080031ac <LSM6DSO_RegisterBusIO>:
  * @brief  Register Component Bus IO operations
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_RegisterBusIO(LSM6DSO_Object_t *pObj, LSM6DSO_IO_t *pIO)
{
 80031ac:	b580      	push	{r7, lr}
 80031ae:	b084      	sub	sp, #16
 80031b0:	af00      	add	r7, sp, #0
 80031b2:	6078      	str	r0, [r7, #4]
 80031b4:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSO_OK;
 80031b6:	2300      	movs	r3, #0
 80031b8:	60fb      	str	r3, [r7, #12]

  if (pObj == NULL)
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d103      	bne.n	80031c8 <LSM6DSO_RegisterBusIO+0x1c>
  {
    ret = LSM6DSO_ERROR;
 80031c0:	f04f 33ff 	mov.w	r3, #4294967295
 80031c4:	60fb      	str	r3, [r7, #12]
 80031c6:	e051      	b.n	800326c <LSM6DSO_RegisterBusIO+0xc0>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 80031c8:	683b      	ldr	r3, [r7, #0]
 80031ca:	681a      	ldr	r2, [r3, #0]
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 80031d0:	683b      	ldr	r3, [r7, #0]
 80031d2:	685a      	ldr	r2, [r3, #4]
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	605a      	str	r2, [r3, #4]
    pObj->IO.BusType   = pIO->BusType;
 80031d8:	683b      	ldr	r3, [r7, #0]
 80031da:	689a      	ldr	r2, [r3, #8]
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	609a      	str	r2, [r3, #8]
    pObj->IO.Address   = pIO->Address;
 80031e0:	683b      	ldr	r3, [r7, #0]
 80031e2:	7b1a      	ldrb	r2, [r3, #12]
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	731a      	strb	r2, [r3, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 80031e8:	683b      	ldr	r3, [r7, #0]
 80031ea:	691a      	ldr	r2, [r3, #16]
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	611a      	str	r2, [r3, #16]
    pObj->IO.ReadReg   = pIO->ReadReg;
 80031f0:	683b      	ldr	r3, [r7, #0]
 80031f2:	695a      	ldr	r2, [r3, #20]
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	615a      	str	r2, [r3, #20]
    pObj->IO.GetTick   = pIO->GetTick;
 80031f8:	683b      	ldr	r3, [r7, #0]
 80031fa:	699a      	ldr	r2, [r3, #24]
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	619a      	str	r2, [r3, #24]

    pObj->Ctx.read_reg  = ReadRegWrap;
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	4a1d      	ldr	r2, [pc, #116]	; (8003278 <LSM6DSO_RegisterBusIO+0xcc>)
 8003204:	625a      	str	r2, [r3, #36]	; 0x24
    pObj->Ctx.write_reg = WriteRegWrap;
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	4a1c      	ldr	r2, [pc, #112]	; (800327c <LSM6DSO_RegisterBusIO+0xd0>)
 800320a:	621a      	str	r2, [r3, #32]
    pObj->Ctx.mdelay    = pIO->Delay;
 800320c:	683b      	ldr	r3, [r7, #0]
 800320e:	69da      	ldr	r2, [r3, #28]
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	629a      	str	r2, [r3, #40]	; 0x28
    pObj->Ctx.handle   = pObj;
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	687a      	ldr	r2, [r7, #4]
 8003218:	62da      	str	r2, [r3, #44]	; 0x2c

    if (pObj->IO.Init == NULL)
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	2b00      	cmp	r3, #0
 8003220:	d103      	bne.n	800322a <LSM6DSO_RegisterBusIO+0x7e>
    {
      ret = LSM6DSO_ERROR;
 8003222:	f04f 33ff 	mov.w	r3, #4294967295
 8003226:	60fb      	str	r3, [r7, #12]
 8003228:	e020      	b.n	800326c <LSM6DSO_RegisterBusIO+0xc0>
    }
    else if (pObj->IO.Init() != LSM6DSO_OK)
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	4798      	blx	r3
 8003230:	4603      	mov	r3, r0
 8003232:	2b00      	cmp	r3, #0
 8003234:	d003      	beq.n	800323e <LSM6DSO_RegisterBusIO+0x92>
    {
      ret = LSM6DSO_ERROR;
 8003236:	f04f 33ff 	mov.w	r3, #4294967295
 800323a:	60fb      	str	r3, [r7, #12]
 800323c:	e016      	b.n	800326c <LSM6DSO_RegisterBusIO+0xc0>
    }
    else
    {
      if (pObj->IO.BusType == LSM6DSO_SPI_3WIRES_BUS) /* SPI 3-Wires */
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	689b      	ldr	r3, [r3, #8]
 8003242:	2b02      	cmp	r3, #2
 8003244:	d112      	bne.n	800326c <LSM6DSO_RegisterBusIO+0xc0>
      {
        /* Enable the SPI 3-Wires support only the first time */
        if (pObj->is_initialized == 0U)
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800324c:	2b00      	cmp	r3, #0
 800324e:	d10d      	bne.n	800326c <LSM6DSO_RegisterBusIO+0xc0>
        {
          /* Enable SPI 3-Wires on the component */
          uint8_t data = 0x0C;
 8003250:	230c      	movs	r3, #12
 8003252:	72fb      	strb	r3, [r7, #11]

          if (LSM6DSO_Write_Reg(pObj, LSM6DSO_CTRL3_C, data) != LSM6DSO_OK)
 8003254:	7afb      	ldrb	r3, [r7, #11]
 8003256:	461a      	mov	r2, r3
 8003258:	2112      	movs	r1, #18
 800325a:	6878      	ldr	r0, [r7, #4]
 800325c:	f000 ff59 	bl	8004112 <LSM6DSO_Write_Reg>
 8003260:	4603      	mov	r3, r0
 8003262:	2b00      	cmp	r3, #0
 8003264:	d002      	beq.n	800326c <LSM6DSO_RegisterBusIO+0xc0>
          {
            ret = LSM6DSO_ERROR;
 8003266:	f04f 33ff 	mov.w	r3, #4294967295
 800326a:	60fb      	str	r3, [r7, #12]
        }
      }
    }
  }

  return ret;
 800326c:	68fb      	ldr	r3, [r7, #12]
}
 800326e:	4618      	mov	r0, r3
 8003270:	3710      	adds	r7, #16
 8003272:	46bd      	mov	sp, r7
 8003274:	bd80      	pop	{r7, pc}
 8003276:	bf00      	nop
 8003278:	080045b5 	.word	0x080045b5
 800327c:	080045eb 	.word	0x080045eb

08003280 <LSM6DSO_Init>:
  * @brief  Initialize the LSM6DSO sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_Init(LSM6DSO_Object_t *pObj)
{
 8003280:	b580      	push	{r7, lr}
 8003282:	b082      	sub	sp, #8
 8003284:	af00      	add	r7, sp, #0
 8003286:	6078      	str	r0, [r7, #4]
  /* Disable I3C */
  if (lsm6dso_i3c_disable_set(&(pObj->Ctx), LSM6DSO_I3C_DISABLE) != LSM6DSO_OK)
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	3320      	adds	r3, #32
 800328c:	2180      	movs	r1, #128	; 0x80
 800328e:	4618      	mov	r0, r3
 8003290:	f001 fe97 	bl	8004fc2 <lsm6dso_i3c_disable_set>
 8003294:	4603      	mov	r3, r0
 8003296:	2b00      	cmp	r3, #0
 8003298:	d002      	beq.n	80032a0 <LSM6DSO_Init+0x20>
  {
    return LSM6DSO_ERROR;
 800329a:	f04f 33ff 	mov.w	r3, #4294967295
 800329e:	e060      	b.n	8003362 <LSM6DSO_Init+0xe2>
  }

  /* Enable register address automatically incremented during a multiple byte
  access with a serial interface. */
  if (lsm6dso_auto_increment_set(&(pObj->Ctx), PROPERTY_ENABLE) != LSM6DSO_OK)
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	3320      	adds	r3, #32
 80032a4:	2101      	movs	r1, #1
 80032a6:	4618      	mov	r0, r3
 80032a8:	f001 fe65 	bl	8004f76 <lsm6dso_auto_increment_set>
 80032ac:	4603      	mov	r3, r0
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d002      	beq.n	80032b8 <LSM6DSO_Init+0x38>
  {
    return LSM6DSO_ERROR;
 80032b2:	f04f 33ff 	mov.w	r3, #4294967295
 80032b6:	e054      	b.n	8003362 <LSM6DSO_Init+0xe2>
  }

  /* Enable BDU */
  if (lsm6dso_block_data_update_set(&(pObj->Ctx), PROPERTY_ENABLE) != LSM6DSO_OK)
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	3320      	adds	r3, #32
 80032bc:	2101      	movs	r1, #1
 80032be:	4618      	mov	r0, r3
 80032c0:	f001 fd66 	bl	8004d90 <lsm6dso_block_data_update_set>
 80032c4:	4603      	mov	r3, r0
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d002      	beq.n	80032d0 <LSM6DSO_Init+0x50>
  {
    return LSM6DSO_ERROR;
 80032ca:	f04f 33ff 	mov.w	r3, #4294967295
 80032ce:	e048      	b.n	8003362 <LSM6DSO_Init+0xe2>
  }

  /* FIFO mode selection */
  if (lsm6dso_fifo_mode_set(&(pObj->Ctx), LSM6DSO_BYPASS_MODE) != LSM6DSO_OK)
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	3320      	adds	r3, #32
 80032d4:	2100      	movs	r1, #0
 80032d6:	4618      	mov	r0, r3
 80032d8:	f001 feb9 	bl	800504e <lsm6dso_fifo_mode_set>
 80032dc:	4603      	mov	r3, r0
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d002      	beq.n	80032e8 <LSM6DSO_Init+0x68>
  {
    return LSM6DSO_ERROR;
 80032e2:	f04f 33ff 	mov.w	r3, #4294967295
 80032e6:	e03c      	b.n	8003362 <LSM6DSO_Init+0xe2>
  }

  /* Select default output data rate. */
  pObj->acc_odr = LSM6DSO_XL_ODR_104Hz;
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	2204      	movs	r2, #4
 80032ec:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33

  /* Output data rate selection - power down. */
  if (lsm6dso_xl_data_rate_set(&(pObj->Ctx), LSM6DSO_XL_ODR_OFF) != LSM6DSO_OK)
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	3320      	adds	r3, #32
 80032f4:	2100      	movs	r1, #0
 80032f6:	4618      	mov	r0, r3
 80032f8:	f001 fa20 	bl	800473c <lsm6dso_xl_data_rate_set>
 80032fc:	4603      	mov	r3, r0
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d002      	beq.n	8003308 <LSM6DSO_Init+0x88>
  {
    return LSM6DSO_ERROR;
 8003302:	f04f 33ff 	mov.w	r3, #4294967295
 8003306:	e02c      	b.n	8003362 <LSM6DSO_Init+0xe2>
  }

  /* Full scale selection. */
  if (lsm6dso_xl_full_scale_set(&(pObj->Ctx), LSM6DSO_2g) != LSM6DSO_OK)
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	3320      	adds	r3, #32
 800330c:	2100      	movs	r1, #0
 800330e:	4618      	mov	r0, r3
 8003310:	f001 f9b6 	bl	8004680 <lsm6dso_xl_full_scale_set>
 8003314:	4603      	mov	r3, r0
 8003316:	2b00      	cmp	r3, #0
 8003318:	d002      	beq.n	8003320 <LSM6DSO_Init+0xa0>
  {
    return LSM6DSO_ERROR;
 800331a:	f04f 33ff 	mov.w	r3, #4294967295
 800331e:	e020      	b.n	8003362 <LSM6DSO_Init+0xe2>
  }

  /* Select default output data rate. */
  pObj->gyro_odr = LSM6DSO_GY_ODR_104Hz;
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	2204      	movs	r2, #4
 8003324:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Output data rate selection - power down. */
  if (lsm6dso_gy_data_rate_set(&(pObj->Ctx), LSM6DSO_GY_ODR_OFF) != LSM6DSO_OK)
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	3320      	adds	r3, #32
 800332c:	2100      	movs	r1, #0
 800332e:	4618      	mov	r0, r3
 8003330:	f001 fbd0 	bl	8004ad4 <lsm6dso_gy_data_rate_set>
 8003334:	4603      	mov	r3, r0
 8003336:	2b00      	cmp	r3, #0
 8003338:	d002      	beq.n	8003340 <LSM6DSO_Init+0xc0>
  {
    return LSM6DSO_ERROR;
 800333a:	f04f 33ff 	mov.w	r3, #4294967295
 800333e:	e010      	b.n	8003362 <LSM6DSO_Init+0xe2>
  }

  /* Full scale selection. */
  if (lsm6dso_gy_full_scale_set(&(pObj->Ctx), LSM6DSO_2000dps) != LSM6DSO_OK)
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	3320      	adds	r3, #32
 8003344:	2106      	movs	r1, #6
 8003346:	4618      	mov	r0, r3
 8003348:	f001 fb5c 	bl	8004a04 <lsm6dso_gy_full_scale_set>
 800334c:	4603      	mov	r3, r0
 800334e:	2b00      	cmp	r3, #0
 8003350:	d002      	beq.n	8003358 <LSM6DSO_Init+0xd8>
  {
    return LSM6DSO_ERROR;
 8003352:	f04f 33ff 	mov.w	r3, #4294967295
 8003356:	e004      	b.n	8003362 <LSM6DSO_Init+0xe2>
  }

  pObj->is_initialized = 1;
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	2201      	movs	r2, #1
 800335c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return LSM6DSO_OK;
 8003360:	2300      	movs	r3, #0
}
 8003362:	4618      	mov	r0, r3
 8003364:	3708      	adds	r7, #8
 8003366:	46bd      	mov	sp, r7
 8003368:	bd80      	pop	{r7, pc}

0800336a <LSM6DSO_DeInit>:
  * @brief  Deinitialize the LSM6DSO sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_DeInit(LSM6DSO_Object_t *pObj)
{
 800336a:	b580      	push	{r7, lr}
 800336c:	b082      	sub	sp, #8
 800336e:	af00      	add	r7, sp, #0
 8003370:	6078      	str	r0, [r7, #4]
  /* Disable the component */
  if (LSM6DSO_ACC_Disable(pObj) != LSM6DSO_OK)
 8003372:	6878      	ldr	r0, [r7, #4]
 8003374:	f000 f888 	bl	8003488 <LSM6DSO_ACC_Disable>
 8003378:	4603      	mov	r3, r0
 800337a:	2b00      	cmp	r3, #0
 800337c:	d002      	beq.n	8003384 <LSM6DSO_DeInit+0x1a>
  {
    return LSM6DSO_ERROR;
 800337e:	f04f 33ff 	mov.w	r3, #4294967295
 8003382:	e015      	b.n	80033b0 <LSM6DSO_DeInit+0x46>
  }

  if (LSM6DSO_GYRO_Disable(pObj) != LSM6DSO_OK)
 8003384:	6878      	ldr	r0, [r7, #4]
 8003386:	f000 fc2e 	bl	8003be6 <LSM6DSO_GYRO_Disable>
 800338a:	4603      	mov	r3, r0
 800338c:	2b00      	cmp	r3, #0
 800338e:	d002      	beq.n	8003396 <LSM6DSO_DeInit+0x2c>
  {
    return LSM6DSO_ERROR;
 8003390:	f04f 33ff 	mov.w	r3, #4294967295
 8003394:	e00c      	b.n	80033b0 <LSM6DSO_DeInit+0x46>
  }

  /* Reset output data rate. */
  pObj->acc_odr = LSM6DSO_XL_ODR_OFF;
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	2200      	movs	r2, #0
 800339a:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
  pObj->gyro_odr = LSM6DSO_GY_ODR_OFF;
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	2200      	movs	r2, #0
 80033a2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  pObj->is_initialized = 0;
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	2200      	movs	r2, #0
 80033aa:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return LSM6DSO_OK;
 80033ae:	2300      	movs	r3, #0
}
 80033b0:	4618      	mov	r0, r3
 80033b2:	3708      	adds	r7, #8
 80033b4:	46bd      	mov	sp, r7
 80033b6:	bd80      	pop	{r7, pc}

080033b8 <LSM6DSO_ReadID>:
  * @param  pObj the device pObj
  * @param  Id the WHO_AM_I value
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_ReadID(LSM6DSO_Object_t *pObj, uint8_t *Id)
{
 80033b8:	b580      	push	{r7, lr}
 80033ba:	b082      	sub	sp, #8
 80033bc:	af00      	add	r7, sp, #0
 80033be:	6078      	str	r0, [r7, #4]
 80033c0:	6039      	str	r1, [r7, #0]
  if (lsm6dso_device_id_get(&(pObj->Ctx), Id) != LSM6DSO_OK)
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	3320      	adds	r3, #32
 80033c6:	6839      	ldr	r1, [r7, #0]
 80033c8:	4618      	mov	r0, r3
 80033ca:	f001 fdc3 	bl	8004f54 <lsm6dso_device_id_get>
 80033ce:	4603      	mov	r3, r0
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d002      	beq.n	80033da <LSM6DSO_ReadID+0x22>
  {
    return LSM6DSO_ERROR;
 80033d4:	f04f 33ff 	mov.w	r3, #4294967295
 80033d8:	e000      	b.n	80033dc <LSM6DSO_ReadID+0x24>
  }

  return LSM6DSO_OK;
 80033da:	2300      	movs	r3, #0
}
 80033dc:	4618      	mov	r0, r3
 80033de:	3708      	adds	r7, #8
 80033e0:	46bd      	mov	sp, r7
 80033e2:	bd80      	pop	{r7, pc}

080033e4 <LSM6DSO_GetCapabilities>:
  * @param  pObj Component object pointer
  * @param  Capabilities pointer to LSM6DSO sensor capabilities
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_GetCapabilities(LSM6DSO_Object_t *pObj, LSM6DSO_Capabilities_t *Capabilities)
{
 80033e4:	b480      	push	{r7}
 80033e6:	b083      	sub	sp, #12
 80033e8:	af00      	add	r7, sp, #0
 80033ea:	6078      	str	r0, [r7, #4]
 80033ec:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  Capabilities->Acc          = 1;
 80033ee:	683b      	ldr	r3, [r7, #0]
 80033f0:	2201      	movs	r2, #1
 80033f2:	701a      	strb	r2, [r3, #0]
  Capabilities->Gyro         = 1;
 80033f4:	683b      	ldr	r3, [r7, #0]
 80033f6:	2201      	movs	r2, #1
 80033f8:	705a      	strb	r2, [r3, #1]
  Capabilities->Magneto      = 0;
 80033fa:	683b      	ldr	r3, [r7, #0]
 80033fc:	2200      	movs	r2, #0
 80033fe:	709a      	strb	r2, [r3, #2]
  Capabilities->LowPower     = 0;
 8003400:	683b      	ldr	r3, [r7, #0]
 8003402:	2200      	movs	r2, #0
 8003404:	70da      	strb	r2, [r3, #3]
  Capabilities->GyroMaxFS    = 2000;
 8003406:	683b      	ldr	r3, [r7, #0]
 8003408:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800340c:	605a      	str	r2, [r3, #4]
  Capabilities->AccMaxFS     = 16;
 800340e:	683b      	ldr	r3, [r7, #0]
 8003410:	2210      	movs	r2, #16
 8003412:	609a      	str	r2, [r3, #8]
  Capabilities->MagMaxFS     = 0;
 8003414:	683b      	ldr	r3, [r7, #0]
 8003416:	2200      	movs	r2, #0
 8003418:	60da      	str	r2, [r3, #12]
  Capabilities->GyroMaxOdr   = 6660.0f;
 800341a:	683b      	ldr	r3, [r7, #0]
 800341c:	4a07      	ldr	r2, [pc, #28]	; (800343c <LSM6DSO_GetCapabilities+0x58>)
 800341e:	611a      	str	r2, [r3, #16]
  Capabilities->AccMaxOdr    = 6660.0f;
 8003420:	683b      	ldr	r3, [r7, #0]
 8003422:	4a06      	ldr	r2, [pc, #24]	; (800343c <LSM6DSO_GetCapabilities+0x58>)
 8003424:	615a      	str	r2, [r3, #20]
  Capabilities->MagMaxOdr    = 0.0f;
 8003426:	683b      	ldr	r3, [r7, #0]
 8003428:	f04f 0200 	mov.w	r2, #0
 800342c:	619a      	str	r2, [r3, #24]
  return LSM6DSO_OK;
 800342e:	2300      	movs	r3, #0
}
 8003430:	4618      	mov	r0, r3
 8003432:	370c      	adds	r7, #12
 8003434:	46bd      	mov	sp, r7
 8003436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800343a:	4770      	bx	lr
 800343c:	45d02000 	.word	0x45d02000

08003440 <LSM6DSO_ACC_Enable>:
  * @brief  Enable the LSM6DSO accelerometer sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_ACC_Enable(LSM6DSO_Object_t *pObj)
{
 8003440:	b580      	push	{r7, lr}
 8003442:	b082      	sub	sp, #8
 8003444:	af00      	add	r7, sp, #0
 8003446:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->acc_is_enabled == 1U)
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800344e:	2b01      	cmp	r3, #1
 8003450:	d101      	bne.n	8003456 <LSM6DSO_ACC_Enable+0x16>
  {
    return LSM6DSO_OK;
 8003452:	2300      	movs	r3, #0
 8003454:	e014      	b.n	8003480 <LSM6DSO_ACC_Enable+0x40>
  }

  /* Output data rate selection. */
  if (lsm6dso_xl_data_rate_set(&(pObj->Ctx), pObj->acc_odr) != LSM6DSO_OK)
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	f103 0220 	add.w	r2, r3, #32
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 8003462:	4619      	mov	r1, r3
 8003464:	4610      	mov	r0, r2
 8003466:	f001 f969 	bl	800473c <lsm6dso_xl_data_rate_set>
 800346a:	4603      	mov	r3, r0
 800346c:	2b00      	cmp	r3, #0
 800346e:	d002      	beq.n	8003476 <LSM6DSO_ACC_Enable+0x36>
  {
    return LSM6DSO_ERROR;
 8003470:	f04f 33ff 	mov.w	r3, #4294967295
 8003474:	e004      	b.n	8003480 <LSM6DSO_ACC_Enable+0x40>
  }

  pObj->acc_is_enabled = 1;
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	2201      	movs	r2, #1
 800347a:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

  return LSM6DSO_OK;
 800347e:	2300      	movs	r3, #0
}
 8003480:	4618      	mov	r0, r3
 8003482:	3708      	adds	r7, #8
 8003484:	46bd      	mov	sp, r7
 8003486:	bd80      	pop	{r7, pc}

08003488 <LSM6DSO_ACC_Disable>:
  * @brief  Disable the LSM6DSO accelerometer sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_ACC_Disable(LSM6DSO_Object_t *pObj)
{
 8003488:	b580      	push	{r7, lr}
 800348a:	b082      	sub	sp, #8
 800348c:	af00      	add	r7, sp, #0
 800348e:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->acc_is_enabled == 0U)
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8003496:	2b00      	cmp	r3, #0
 8003498:	d101      	bne.n	800349e <LSM6DSO_ACC_Disable+0x16>
  {
    return LSM6DSO_OK;
 800349a:	2300      	movs	r3, #0
 800349c:	e01f      	b.n	80034de <LSM6DSO_ACC_Disable+0x56>
  }

  /* Get current output data rate. */
  if (lsm6dso_xl_data_rate_get(&(pObj->Ctx), &pObj->acc_odr) != LSM6DSO_OK)
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	f103 0220 	add.w	r2, r3, #32
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	3333      	adds	r3, #51	; 0x33
 80034a8:	4619      	mov	r1, r3
 80034aa:	4610      	mov	r0, r2
 80034ac:	f001 fa42 	bl	8004934 <lsm6dso_xl_data_rate_get>
 80034b0:	4603      	mov	r3, r0
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d002      	beq.n	80034bc <LSM6DSO_ACC_Disable+0x34>
  {
    return LSM6DSO_ERROR;
 80034b6:	f04f 33ff 	mov.w	r3, #4294967295
 80034ba:	e010      	b.n	80034de <LSM6DSO_ACC_Disable+0x56>
  }

  /* Output data rate selection - power down. */
  if (lsm6dso_xl_data_rate_set(&(pObj->Ctx), LSM6DSO_XL_ODR_OFF) != LSM6DSO_OK)
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	3320      	adds	r3, #32
 80034c0:	2100      	movs	r1, #0
 80034c2:	4618      	mov	r0, r3
 80034c4:	f001 f93a 	bl	800473c <lsm6dso_xl_data_rate_set>
 80034c8:	4603      	mov	r3, r0
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d002      	beq.n	80034d4 <LSM6DSO_ACC_Disable+0x4c>
  {
    return LSM6DSO_ERROR;
 80034ce:	f04f 33ff 	mov.w	r3, #4294967295
 80034d2:	e004      	b.n	80034de <LSM6DSO_ACC_Disable+0x56>
  }

  pObj->acc_is_enabled = 0;
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	2200      	movs	r2, #0
 80034d8:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

  return LSM6DSO_OK;
 80034dc:	2300      	movs	r3, #0
}
 80034de:	4618      	mov	r0, r3
 80034e0:	3708      	adds	r7, #8
 80034e2:	46bd      	mov	sp, r7
 80034e4:	bd80      	pop	{r7, pc}
	...

080034e8 <LSM6DSO_ACC_GetSensitivity>:
  * @param  pObj the device pObj
  * @param  Sensitivity pointer
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_ACC_GetSensitivity(LSM6DSO_Object_t *pObj, float_t *Sensitivity)
{
 80034e8:	b580      	push	{r7, lr}
 80034ea:	b084      	sub	sp, #16
 80034ec:	af00      	add	r7, sp, #0
 80034ee:	6078      	str	r0, [r7, #4]
 80034f0:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSO_OK;
 80034f2:	2300      	movs	r3, #0
 80034f4:	60fb      	str	r3, [r7, #12]
  lsm6dso_fs_xl_t full_scale;

  /* Read actual full scale selection from sensor. */
  if (lsm6dso_xl_full_scale_get(&(pObj->Ctx), &full_scale) != LSM6DSO_OK)
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	3320      	adds	r3, #32
 80034fa:	f107 020b 	add.w	r2, r7, #11
 80034fe:	4611      	mov	r1, r2
 8003500:	4618      	mov	r0, r3
 8003502:	f001 f8e3 	bl	80046cc <lsm6dso_xl_full_scale_get>
 8003506:	4603      	mov	r3, r0
 8003508:	2b00      	cmp	r3, #0
 800350a:	d002      	beq.n	8003512 <LSM6DSO_ACC_GetSensitivity+0x2a>
  {
    return LSM6DSO_ERROR;
 800350c:	f04f 33ff 	mov.w	r3, #4294967295
 8003510:	e023      	b.n	800355a <LSM6DSO_ACC_GetSensitivity+0x72>
  }

  /* Store the Sensitivity based on actual full scale. */
  switch (full_scale)
 8003512:	7afb      	ldrb	r3, [r7, #11]
 8003514:	2b03      	cmp	r3, #3
 8003516:	d81b      	bhi.n	8003550 <LSM6DSO_ACC_GetSensitivity+0x68>
 8003518:	a201      	add	r2, pc, #4	; (adr r2, 8003520 <LSM6DSO_ACC_GetSensitivity+0x38>)
 800351a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800351e:	bf00      	nop
 8003520:	08003531 	.word	0x08003531
 8003524:	08003549 	.word	0x08003549
 8003528:	08003539 	.word	0x08003539
 800352c:	08003541 	.word	0x08003541
  {
    case LSM6DSO_2g:
      *Sensitivity = LSM6DSO_ACC_SENSITIVITY_FS_2G;
 8003530:	683b      	ldr	r3, [r7, #0]
 8003532:	4a0c      	ldr	r2, [pc, #48]	; (8003564 <LSM6DSO_ACC_GetSensitivity+0x7c>)
 8003534:	601a      	str	r2, [r3, #0]
      break;
 8003536:	e00f      	b.n	8003558 <LSM6DSO_ACC_GetSensitivity+0x70>

    case LSM6DSO_4g:
      *Sensitivity = LSM6DSO_ACC_SENSITIVITY_FS_4G;
 8003538:	683b      	ldr	r3, [r7, #0]
 800353a:	4a0b      	ldr	r2, [pc, #44]	; (8003568 <LSM6DSO_ACC_GetSensitivity+0x80>)
 800353c:	601a      	str	r2, [r3, #0]
      break;
 800353e:	e00b      	b.n	8003558 <LSM6DSO_ACC_GetSensitivity+0x70>

    case LSM6DSO_8g:
      *Sensitivity = LSM6DSO_ACC_SENSITIVITY_FS_8G;
 8003540:	683b      	ldr	r3, [r7, #0]
 8003542:	4a0a      	ldr	r2, [pc, #40]	; (800356c <LSM6DSO_ACC_GetSensitivity+0x84>)
 8003544:	601a      	str	r2, [r3, #0]
      break;
 8003546:	e007      	b.n	8003558 <LSM6DSO_ACC_GetSensitivity+0x70>

    case LSM6DSO_16g:
      *Sensitivity = LSM6DSO_ACC_SENSITIVITY_FS_16G;
 8003548:	683b      	ldr	r3, [r7, #0]
 800354a:	4a09      	ldr	r2, [pc, #36]	; (8003570 <LSM6DSO_ACC_GetSensitivity+0x88>)
 800354c:	601a      	str	r2, [r3, #0]
      break;
 800354e:	e003      	b.n	8003558 <LSM6DSO_ACC_GetSensitivity+0x70>

    default:
      ret = LSM6DSO_ERROR;
 8003550:	f04f 33ff 	mov.w	r3, #4294967295
 8003554:	60fb      	str	r3, [r7, #12]
      break;
 8003556:	bf00      	nop
  }

  return ret;
 8003558:	68fb      	ldr	r3, [r7, #12]
}
 800355a:	4618      	mov	r0, r3
 800355c:	3710      	adds	r7, #16
 800355e:	46bd      	mov	sp, r7
 8003560:	bd80      	pop	{r7, pc}
 8003562:	bf00      	nop
 8003564:	3d79db23 	.word	0x3d79db23
 8003568:	3df9db23 	.word	0x3df9db23
 800356c:	3e79db23 	.word	0x3e79db23
 8003570:	3ef9db23 	.word	0x3ef9db23

08003574 <LSM6DSO_ACC_GetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr pointer where the output data rate is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_ACC_GetOutputDataRate(LSM6DSO_Object_t *pObj, float_t *Odr)
{
 8003574:	b580      	push	{r7, lr}
 8003576:	b084      	sub	sp, #16
 8003578:	af00      	add	r7, sp, #0
 800357a:	6078      	str	r0, [r7, #4]
 800357c:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSO_OK;
 800357e:	2300      	movs	r3, #0
 8003580:	60fb      	str	r3, [r7, #12]
  lsm6dso_odr_xl_t odr_low_level;

  /* Get current output data rate. */
  if (lsm6dso_xl_data_rate_get(&(pObj->Ctx), &odr_low_level) != LSM6DSO_OK)
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	3320      	adds	r3, #32
 8003586:	f107 020b 	add.w	r2, r7, #11
 800358a:	4611      	mov	r1, r2
 800358c:	4618      	mov	r0, r3
 800358e:	f001 f9d1 	bl	8004934 <lsm6dso_xl_data_rate_get>
 8003592:	4603      	mov	r3, r0
 8003594:	2b00      	cmp	r3, #0
 8003596:	d002      	beq.n	800359e <LSM6DSO_ACC_GetOutputDataRate+0x2a>
  {
    return LSM6DSO_ERROR;
 8003598:	f04f 33ff 	mov.w	r3, #4294967295
 800359c:	e054      	b.n	8003648 <LSM6DSO_ACC_GetOutputDataRate+0xd4>
  }

  switch (odr_low_level)
 800359e:	7afb      	ldrb	r3, [r7, #11]
 80035a0:	2b0b      	cmp	r3, #11
 80035a2:	d84c      	bhi.n	800363e <LSM6DSO_ACC_GetOutputDataRate+0xca>
 80035a4:	a201      	add	r2, pc, #4	; (adr r2, 80035ac <LSM6DSO_ACC_GetOutputDataRate+0x38>)
 80035a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80035aa:	bf00      	nop
 80035ac:	080035dd 	.word	0x080035dd
 80035b0:	080035ef 	.word	0x080035ef
 80035b4:	080035f7 	.word	0x080035f7
 80035b8:	080035ff 	.word	0x080035ff
 80035bc:	08003607 	.word	0x08003607
 80035c0:	0800360f 	.word	0x0800360f
 80035c4:	08003617 	.word	0x08003617
 80035c8:	0800361f 	.word	0x0800361f
 80035cc:	08003627 	.word	0x08003627
 80035d0:	0800362f 	.word	0x0800362f
 80035d4:	08003637 	.word	0x08003637
 80035d8:	080035e7 	.word	0x080035e7
  {
    case LSM6DSO_XL_ODR_OFF:
      *Odr = 0.0f;
 80035dc:	683b      	ldr	r3, [r7, #0]
 80035de:	f04f 0200 	mov.w	r2, #0
 80035e2:	601a      	str	r2, [r3, #0]
      break;
 80035e4:	e02f      	b.n	8003646 <LSM6DSO_ACC_GetOutputDataRate+0xd2>

    case LSM6DSO_XL_ODR_1Hz6:
      *Odr = 1.6f;
 80035e6:	683b      	ldr	r3, [r7, #0]
 80035e8:	4a19      	ldr	r2, [pc, #100]	; (8003650 <LSM6DSO_ACC_GetOutputDataRate+0xdc>)
 80035ea:	601a      	str	r2, [r3, #0]
      break;
 80035ec:	e02b      	b.n	8003646 <LSM6DSO_ACC_GetOutputDataRate+0xd2>

    case LSM6DSO_XL_ODR_12Hz5:
      *Odr = 12.5f;
 80035ee:	683b      	ldr	r3, [r7, #0]
 80035f0:	4a18      	ldr	r2, [pc, #96]	; (8003654 <LSM6DSO_ACC_GetOutputDataRate+0xe0>)
 80035f2:	601a      	str	r2, [r3, #0]
      break;
 80035f4:	e027      	b.n	8003646 <LSM6DSO_ACC_GetOutputDataRate+0xd2>

    case LSM6DSO_XL_ODR_26Hz:
      *Odr = 26.0f;
 80035f6:	683b      	ldr	r3, [r7, #0]
 80035f8:	4a17      	ldr	r2, [pc, #92]	; (8003658 <LSM6DSO_ACC_GetOutputDataRate+0xe4>)
 80035fa:	601a      	str	r2, [r3, #0]
      break;
 80035fc:	e023      	b.n	8003646 <LSM6DSO_ACC_GetOutputDataRate+0xd2>

    case LSM6DSO_XL_ODR_52Hz:
      *Odr = 52.0f;
 80035fe:	683b      	ldr	r3, [r7, #0]
 8003600:	4a16      	ldr	r2, [pc, #88]	; (800365c <LSM6DSO_ACC_GetOutputDataRate+0xe8>)
 8003602:	601a      	str	r2, [r3, #0]
      break;
 8003604:	e01f      	b.n	8003646 <LSM6DSO_ACC_GetOutputDataRate+0xd2>

    case LSM6DSO_XL_ODR_104Hz:
      *Odr = 104.0f;
 8003606:	683b      	ldr	r3, [r7, #0]
 8003608:	4a15      	ldr	r2, [pc, #84]	; (8003660 <LSM6DSO_ACC_GetOutputDataRate+0xec>)
 800360a:	601a      	str	r2, [r3, #0]
      break;
 800360c:	e01b      	b.n	8003646 <LSM6DSO_ACC_GetOutputDataRate+0xd2>

    case LSM6DSO_XL_ODR_208Hz:
      *Odr = 208.0f;
 800360e:	683b      	ldr	r3, [r7, #0]
 8003610:	4a14      	ldr	r2, [pc, #80]	; (8003664 <LSM6DSO_ACC_GetOutputDataRate+0xf0>)
 8003612:	601a      	str	r2, [r3, #0]
      break;
 8003614:	e017      	b.n	8003646 <LSM6DSO_ACC_GetOutputDataRate+0xd2>

    case LSM6DSO_XL_ODR_417Hz:
      *Odr = 417.0f;
 8003616:	683b      	ldr	r3, [r7, #0]
 8003618:	4a13      	ldr	r2, [pc, #76]	; (8003668 <LSM6DSO_ACC_GetOutputDataRate+0xf4>)
 800361a:	601a      	str	r2, [r3, #0]
      break;
 800361c:	e013      	b.n	8003646 <LSM6DSO_ACC_GetOutputDataRate+0xd2>

    case LSM6DSO_XL_ODR_833Hz:
      *Odr = 833.0f;
 800361e:	683b      	ldr	r3, [r7, #0]
 8003620:	4a12      	ldr	r2, [pc, #72]	; (800366c <LSM6DSO_ACC_GetOutputDataRate+0xf8>)
 8003622:	601a      	str	r2, [r3, #0]
      break;
 8003624:	e00f      	b.n	8003646 <LSM6DSO_ACC_GetOutputDataRate+0xd2>

    case LSM6DSO_XL_ODR_1667Hz:
      *Odr = 1667.0f;
 8003626:	683b      	ldr	r3, [r7, #0]
 8003628:	4a11      	ldr	r2, [pc, #68]	; (8003670 <LSM6DSO_ACC_GetOutputDataRate+0xfc>)
 800362a:	601a      	str	r2, [r3, #0]
      break;
 800362c:	e00b      	b.n	8003646 <LSM6DSO_ACC_GetOutputDataRate+0xd2>

    case LSM6DSO_XL_ODR_3333Hz:
      *Odr = 3333.0f;
 800362e:	683b      	ldr	r3, [r7, #0]
 8003630:	4a10      	ldr	r2, [pc, #64]	; (8003674 <LSM6DSO_ACC_GetOutputDataRate+0x100>)
 8003632:	601a      	str	r2, [r3, #0]
      break;
 8003634:	e007      	b.n	8003646 <LSM6DSO_ACC_GetOutputDataRate+0xd2>

    case LSM6DSO_XL_ODR_6667Hz:
      *Odr = 6667.0f;
 8003636:	683b      	ldr	r3, [r7, #0]
 8003638:	4a0f      	ldr	r2, [pc, #60]	; (8003678 <LSM6DSO_ACC_GetOutputDataRate+0x104>)
 800363a:	601a      	str	r2, [r3, #0]
      break;
 800363c:	e003      	b.n	8003646 <LSM6DSO_ACC_GetOutputDataRate+0xd2>

    default:
      ret = LSM6DSO_ERROR;
 800363e:	f04f 33ff 	mov.w	r3, #4294967295
 8003642:	60fb      	str	r3, [r7, #12]
      break;
 8003644:	bf00      	nop
  }

  return ret;
 8003646:	68fb      	ldr	r3, [r7, #12]
}
 8003648:	4618      	mov	r0, r3
 800364a:	3710      	adds	r7, #16
 800364c:	46bd      	mov	sp, r7
 800364e:	bd80      	pop	{r7, pc}
 8003650:	3fcccccd 	.word	0x3fcccccd
 8003654:	41480000 	.word	0x41480000
 8003658:	41d00000 	.word	0x41d00000
 800365c:	42500000 	.word	0x42500000
 8003660:	42d00000 	.word	0x42d00000
 8003664:	43500000 	.word	0x43500000
 8003668:	43d08000 	.word	0x43d08000
 800366c:	44504000 	.word	0x44504000
 8003670:	44d06000 	.word	0x44d06000
 8003674:	45505000 	.word	0x45505000
 8003678:	45d05800 	.word	0x45d05800

0800367c <LSM6DSO_ACC_SetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_ACC_SetOutputDataRate(LSM6DSO_Object_t *pObj, float_t Odr)
{
 800367c:	b580      	push	{r7, lr}
 800367e:	b082      	sub	sp, #8
 8003680:	af00      	add	r7, sp, #0
 8003682:	6078      	str	r0, [r7, #4]
 8003684:	ed87 0a00 	vstr	s0, [r7]
  return LSM6DSO_ACC_SetOutputDataRate_With_Mode(pObj, Odr, LSM6DSO_ACC_HIGH_PERFORMANCE_MODE);
 8003688:	2100      	movs	r1, #0
 800368a:	ed97 0a00 	vldr	s0, [r7]
 800368e:	6878      	ldr	r0, [r7, #4]
 8003690:	f000 f806 	bl	80036a0 <LSM6DSO_ACC_SetOutputDataRate_With_Mode>
 8003694:	4603      	mov	r3, r0
}
 8003696:	4618      	mov	r0, r3
 8003698:	3708      	adds	r7, #8
 800369a:	46bd      	mov	sp, r7
 800369c:	bd80      	pop	{r7, pc}
	...

080036a0 <LSM6DSO_ACC_SetOutputDataRate_With_Mode>:
  * @param  Mode the accelerometer operating mode
  * @note   This function switches off the gyroscope if Ultra Low Power Mode is set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_ACC_SetOutputDataRate_With_Mode(LSM6DSO_Object_t *pObj, float_t Odr, LSM6DSO_ACC_Operating_Mode_t Mode)
{
 80036a0:	b580      	push	{r7, lr}
 80036a2:	b08c      	sub	sp, #48	; 0x30
 80036a4:	af00      	add	r7, sp, #0
 80036a6:	60f8      	str	r0, [r7, #12]
 80036a8:	ed87 0a02 	vstr	s0, [r7, #8]
 80036ac:	460b      	mov	r3, r1
 80036ae:	71fb      	strb	r3, [r7, #7]
  int32_t ret = LSM6DSO_OK;
 80036b0:	2300      	movs	r3, #0
 80036b2:	62fb      	str	r3, [r7, #44]	; 0x2c
  float_t newOdr = Odr;
 80036b4:	68bb      	ldr	r3, [r7, #8]
 80036b6:	62bb      	str	r3, [r7, #40]	; 0x28

  switch (Mode)
 80036b8:	79fb      	ldrb	r3, [r7, #7]
 80036ba:	2b02      	cmp	r3, #2
 80036bc:	f000 80ea 	beq.w	8003894 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x1f4>
 80036c0:	2b02      	cmp	r3, #2
 80036c2:	f300 8163 	bgt.w	800398c <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2ec>
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d002      	beq.n	80036d0 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x30>
 80036ca:	2b01      	cmp	r3, #1
 80036cc:	d074      	beq.n	80037b8 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x118>
 80036ce:	e15d      	b.n	800398c <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2ec>
    {
      /* We must uncheck Low Power and Ultra Low Power bits if they are enabled */
      lsm6dso_ctrl5_c_t val1;
      lsm6dso_ctrl6_c_t val2;

      if (lsm6dso_read_reg(&(pObj->Ctx), LSM6DSO_CTRL5_C, (uint8_t *)&val1, 1) != LSM6DSO_OK)
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	f103 0020 	add.w	r0, r3, #32
 80036d6:	f107 0224 	add.w	r2, r7, #36	; 0x24
 80036da:	2301      	movs	r3, #1
 80036dc:	2114      	movs	r1, #20
 80036de:	f000 ff9f 	bl	8004620 <lsm6dso_read_reg>
 80036e2:	4603      	mov	r3, r0
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d002      	beq.n	80036ee <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x4e>
      {
        return LSM6DSO_ERROR;
 80036e8:	f04f 33ff 	mov.w	r3, #4294967295
 80036ec:	e16c      	b.n	80039c8 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
      }

      if (val1.xl_ulp_en != 0U)
 80036ee:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80036f2:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80036f6:	b2db      	uxtb	r3, r3
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d025      	beq.n	8003748 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0xa8>
      {
        /* Power off the accelerometer */
        if (pObj->acc_is_enabled == 1U)
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8003702:	2b01      	cmp	r3, #1
 8003704:	d10b      	bne.n	800371e <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x7e>
        {
          if (lsm6dso_xl_data_rate_set(&(pObj->Ctx), LSM6DSO_XL_ODR_OFF) != LSM6DSO_OK)
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	3320      	adds	r3, #32
 800370a:	2100      	movs	r1, #0
 800370c:	4618      	mov	r0, r3
 800370e:	f001 f815 	bl	800473c <lsm6dso_xl_data_rate_set>
 8003712:	4603      	mov	r3, r0
 8003714:	2b00      	cmp	r3, #0
 8003716:	d002      	beq.n	800371e <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x7e>
          {
            return LSM6DSO_ERROR;
 8003718:	f04f 33ff 	mov.w	r3, #4294967295
 800371c:	e154      	b.n	80039c8 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
          }
        }

        val1.xl_ulp_en = 0;
 800371e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8003722:	f36f 13c7 	bfc	r3, #7, #1
 8003726:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
        if (lsm6dso_write_reg(&(pObj->Ctx), LSM6DSO_CTRL5_C, (uint8_t *)&val1, 1) != LSM6DSO_OK)
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	f103 0020 	add.w	r0, r3, #32
 8003730:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8003734:	2301      	movs	r3, #1
 8003736:	2114      	movs	r1, #20
 8003738:	f000 ff8a 	bl	8004650 <lsm6dso_write_reg>
 800373c:	4603      	mov	r3, r0
 800373e:	2b00      	cmp	r3, #0
 8003740:	d002      	beq.n	8003748 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0xa8>
        {
          return LSM6DSO_ERROR;
 8003742:	f04f 33ff 	mov.w	r3, #4294967295
 8003746:	e13f      	b.n	80039c8 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
        }
      }

      if (lsm6dso_read_reg(&(pObj->Ctx), LSM6DSO_CTRL6_C, (uint8_t *)&val2, 1) != LSM6DSO_OK)
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	f103 0020 	add.w	r0, r3, #32
 800374e:	f107 0220 	add.w	r2, r7, #32
 8003752:	2301      	movs	r3, #1
 8003754:	2115      	movs	r1, #21
 8003756:	f000 ff63 	bl	8004620 <lsm6dso_read_reg>
 800375a:	4603      	mov	r3, r0
 800375c:	2b00      	cmp	r3, #0
 800375e:	d002      	beq.n	8003766 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0xc6>
      {
        return LSM6DSO_ERROR;
 8003760:	f04f 33ff 	mov.w	r3, #4294967295
 8003764:	e130      	b.n	80039c8 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
      }

      if (val2.xl_hm_mode != 0U)
 8003766:	f897 3020 	ldrb.w	r3, [r7, #32]
 800376a:	f003 0310 	and.w	r3, r3, #16
 800376e:	b2db      	uxtb	r3, r3
 8003770:	2b00      	cmp	r3, #0
 8003772:	d014      	beq.n	800379e <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0xfe>
      {
        val2.xl_hm_mode = 0U;
 8003774:	f897 3020 	ldrb.w	r3, [r7, #32]
 8003778:	f36f 1304 	bfc	r3, #4, #1
 800377c:	f887 3020 	strb.w	r3, [r7, #32]
        if (lsm6dso_write_reg(&(pObj->Ctx), LSM6DSO_CTRL6_C, (uint8_t *)&val2, 1) != LSM6DSO_OK)
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	f103 0020 	add.w	r0, r3, #32
 8003786:	f107 0220 	add.w	r2, r7, #32
 800378a:	2301      	movs	r3, #1
 800378c:	2115      	movs	r1, #21
 800378e:	f000 ff5f 	bl	8004650 <lsm6dso_write_reg>
 8003792:	4603      	mov	r3, r0
 8003794:	2b00      	cmp	r3, #0
 8003796:	d002      	beq.n	800379e <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0xfe>
        {
          return LSM6DSO_ERROR;
 8003798:	f04f 33ff 	mov.w	r3, #4294967295
 800379c:	e114      	b.n	80039c8 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
        }
      }

      /* ODR should be at least 12.5Hz */
      if (newOdr < 12.5f)
 800379e:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 80037a2:	eeb2 7a09 	vmov.f32	s14, #41	; 0x41480000  12.5
 80037a6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80037aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80037ae:	d400      	bmi.n	80037b2 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x112>
      {
        newOdr = 12.5f;
      }
      break;
 80037b0:	e0f0      	b.n	8003994 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2f4>
        newOdr = 12.5f;
 80037b2:	4b87      	ldr	r3, [pc, #540]	; (80039d0 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x330>)
 80037b4:	62bb      	str	r3, [r7, #40]	; 0x28
 80037b6:	e0ed      	b.n	8003994 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2f4>
      /* We must uncheck Ultra Low Power bit if it is enabled */
      /* and check the Low Power bit if it is unchecked       */
      lsm6dso_ctrl5_c_t val1;
      lsm6dso_ctrl6_c_t val2;

      if (lsm6dso_read_reg(&(pObj->Ctx), LSM6DSO_CTRL5_C, (uint8_t *)&val1, 1) != LSM6DSO_OK)
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	f103 0020 	add.w	r0, r3, #32
 80037be:	f107 021c 	add.w	r2, r7, #28
 80037c2:	2301      	movs	r3, #1
 80037c4:	2114      	movs	r1, #20
 80037c6:	f000 ff2b 	bl	8004620 <lsm6dso_read_reg>
 80037ca:	4603      	mov	r3, r0
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d002      	beq.n	80037d6 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x136>
      {
        return LSM6DSO_ERROR;
 80037d0:	f04f 33ff 	mov.w	r3, #4294967295
 80037d4:	e0f8      	b.n	80039c8 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
      }

      if (val1.xl_ulp_en != 0U)
 80037d6:	7f3b      	ldrb	r3, [r7, #28]
 80037d8:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80037dc:	b2db      	uxtb	r3, r3
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d023      	beq.n	800382a <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x18a>
      {
        /* Power off the accelerometer */
        if (pObj->acc_is_enabled == 1U)
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80037e8:	2b01      	cmp	r3, #1
 80037ea:	d10b      	bne.n	8003804 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x164>
        {
          if (lsm6dso_xl_data_rate_set(&(pObj->Ctx), LSM6DSO_XL_ODR_OFF) != LSM6DSO_OK)
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	3320      	adds	r3, #32
 80037f0:	2100      	movs	r1, #0
 80037f2:	4618      	mov	r0, r3
 80037f4:	f000 ffa2 	bl	800473c <lsm6dso_xl_data_rate_set>
 80037f8:	4603      	mov	r3, r0
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d002      	beq.n	8003804 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x164>
          {
            return LSM6DSO_ERROR;
 80037fe:	f04f 33ff 	mov.w	r3, #4294967295
 8003802:	e0e1      	b.n	80039c8 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
          }
        }

        val1.xl_ulp_en = 0;
 8003804:	7f3b      	ldrb	r3, [r7, #28]
 8003806:	f36f 13c7 	bfc	r3, #7, #1
 800380a:	773b      	strb	r3, [r7, #28]
        if (lsm6dso_write_reg(&(pObj->Ctx), LSM6DSO_CTRL5_C, (uint8_t *)&val1, 1) != LSM6DSO_OK)
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	f103 0020 	add.w	r0, r3, #32
 8003812:	f107 021c 	add.w	r2, r7, #28
 8003816:	2301      	movs	r3, #1
 8003818:	2114      	movs	r1, #20
 800381a:	f000 ff19 	bl	8004650 <lsm6dso_write_reg>
 800381e:	4603      	mov	r3, r0
 8003820:	2b00      	cmp	r3, #0
 8003822:	d002      	beq.n	800382a <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x18a>
        {
          return LSM6DSO_ERROR;
 8003824:	f04f 33ff 	mov.w	r3, #4294967295
 8003828:	e0ce      	b.n	80039c8 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
        }
      }

      if (lsm6dso_read_reg(&(pObj->Ctx), LSM6DSO_CTRL6_C, (uint8_t *)&val2, 1) != LSM6DSO_OK)
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	f103 0020 	add.w	r0, r3, #32
 8003830:	f107 0218 	add.w	r2, r7, #24
 8003834:	2301      	movs	r3, #1
 8003836:	2115      	movs	r1, #21
 8003838:	f000 fef2 	bl	8004620 <lsm6dso_read_reg>
 800383c:	4603      	mov	r3, r0
 800383e:	2b00      	cmp	r3, #0
 8003840:	d002      	beq.n	8003848 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x1a8>
      {
        return LSM6DSO_ERROR;
 8003842:	f04f 33ff 	mov.w	r3, #4294967295
 8003846:	e0bf      	b.n	80039c8 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
      }

      if (val2.xl_hm_mode == 0U)
 8003848:	7e3b      	ldrb	r3, [r7, #24]
 800384a:	f003 0310 	and.w	r3, r3, #16
 800384e:	b2db      	uxtb	r3, r3
 8003850:	2b00      	cmp	r3, #0
 8003852:	d112      	bne.n	800387a <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x1da>
      {
        val2.xl_hm_mode = 1U;
 8003854:	7e3b      	ldrb	r3, [r7, #24]
 8003856:	f043 0310 	orr.w	r3, r3, #16
 800385a:	763b      	strb	r3, [r7, #24]
        if (lsm6dso_write_reg(&(pObj->Ctx), LSM6DSO_CTRL6_C, (uint8_t *)&val2, 1) != LSM6DSO_OK)
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	f103 0020 	add.w	r0, r3, #32
 8003862:	f107 0218 	add.w	r2, r7, #24
 8003866:	2301      	movs	r3, #1
 8003868:	2115      	movs	r1, #21
 800386a:	f000 fef1 	bl	8004650 <lsm6dso_write_reg>
 800386e:	4603      	mov	r3, r0
 8003870:	2b00      	cmp	r3, #0
 8003872:	d002      	beq.n	800387a <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x1da>
        {
          return LSM6DSO_ERROR;
 8003874:	f04f 33ff 	mov.w	r3, #4294967295
 8003878:	e0a6      	b.n	80039c8 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
        }
      }

      /* Now we need to limit the ODR to 208 Hz if it is higher */
      if (newOdr > 208.0f)
 800387a:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800387e:	ed9f 7a55 	vldr	s14, [pc, #340]	; 80039d4 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x334>
 8003882:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003886:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800388a:	dc00      	bgt.n	800388e <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x1ee>
      {
        newOdr = 208.0f;
      }
      break;
 800388c:	e082      	b.n	8003994 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2f4>
        newOdr = 208.0f;
 800388e:	4b52      	ldr	r3, [pc, #328]	; (80039d8 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x338>)
 8003890:	62bb      	str	r3, [r7, #40]	; 0x28
 8003892:	e07f      	b.n	8003994 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2f4>
      /* and check the Ultra Low Power bit if it is unchecked             */
      /* We must switch off gyro otherwise Ultra Low Power does not work  */
      lsm6dso_ctrl5_c_t val1;
      lsm6dso_ctrl6_c_t val2;

      if (lsm6dso_read_reg(&(pObj->Ctx), LSM6DSO_CTRL6_C, (uint8_t *)&val2, 1) != LSM6DSO_OK)
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	f103 0020 	add.w	r0, r3, #32
 800389a:	f107 0210 	add.w	r2, r7, #16
 800389e:	2301      	movs	r3, #1
 80038a0:	2115      	movs	r1, #21
 80038a2:	f000 febd 	bl	8004620 <lsm6dso_read_reg>
 80038a6:	4603      	mov	r3, r0
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d002      	beq.n	80038b2 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x212>
      {
        return LSM6DSO_ERROR;
 80038ac:	f04f 33ff 	mov.w	r3, #4294967295
 80038b0:	e08a      	b.n	80039c8 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
      }

      if (val2.xl_hm_mode != 0U)
 80038b2:	7c3b      	ldrb	r3, [r7, #16]
 80038b4:	f003 0310 	and.w	r3, r3, #16
 80038b8:	b2db      	uxtb	r3, r3
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d012      	beq.n	80038e4 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x244>
      {
        val2.xl_hm_mode = 0U;
 80038be:	7c3b      	ldrb	r3, [r7, #16]
 80038c0:	f36f 1304 	bfc	r3, #4, #1
 80038c4:	743b      	strb	r3, [r7, #16]
        if (lsm6dso_write_reg(&(pObj->Ctx), LSM6DSO_CTRL6_C, (uint8_t *)&val2, 1) != LSM6DSO_OK)
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	f103 0020 	add.w	r0, r3, #32
 80038cc:	f107 0210 	add.w	r2, r7, #16
 80038d0:	2301      	movs	r3, #1
 80038d2:	2115      	movs	r1, #21
 80038d4:	f000 febc 	bl	8004650 <lsm6dso_write_reg>
 80038d8:	4603      	mov	r3, r0
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d002      	beq.n	80038e4 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x244>
        {
          return LSM6DSO_ERROR;
 80038de:	f04f 33ff 	mov.w	r3, #4294967295
 80038e2:	e071      	b.n	80039c8 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
        }
      }

      /* Disable Gyro */
      if (pObj->gyro_is_enabled == 1U)
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 80038ea:	2b01      	cmp	r3, #1
 80038ec:	d108      	bne.n	8003900 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x260>
      {
        if (LSM6DSO_GYRO_Disable(pObj) != LSM6DSO_OK)
 80038ee:	68f8      	ldr	r0, [r7, #12]
 80038f0:	f000 f979 	bl	8003be6 <LSM6DSO_GYRO_Disable>
 80038f4:	4603      	mov	r3, r0
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d002      	beq.n	8003900 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x260>
        {
          return LSM6DSO_ERROR;
 80038fa:	f04f 33ff 	mov.w	r3, #4294967295
 80038fe:	e063      	b.n	80039c8 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
        }
      }

      if (lsm6dso_read_reg(&(pObj->Ctx), LSM6DSO_CTRL5_C, (uint8_t *)&val1, 1) != LSM6DSO_OK)
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	f103 0020 	add.w	r0, r3, #32
 8003906:	f107 0214 	add.w	r2, r7, #20
 800390a:	2301      	movs	r3, #1
 800390c:	2114      	movs	r1, #20
 800390e:	f000 fe87 	bl	8004620 <lsm6dso_read_reg>
 8003912:	4603      	mov	r3, r0
 8003914:	2b00      	cmp	r3, #0
 8003916:	d002      	beq.n	800391e <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x27e>
      {
        return LSM6DSO_ERROR;
 8003918:	f04f 33ff 	mov.w	r3, #4294967295
 800391c:	e054      	b.n	80039c8 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
      }

      if (val1.xl_ulp_en == 0U)
 800391e:	7d3b      	ldrb	r3, [r7, #20]
 8003920:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8003924:	b2db      	uxtb	r3, r3
 8003926:	2b00      	cmp	r3, #0
 8003928:	d123      	bne.n	8003972 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2d2>
      {
        /* Power off the accelerometer */
        if (pObj->acc_is_enabled == 1U)
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8003930:	2b01      	cmp	r3, #1
 8003932:	d10b      	bne.n	800394c <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2ac>
        {
          if (lsm6dso_xl_data_rate_set(&(pObj->Ctx), LSM6DSO_XL_ODR_OFF) != LSM6DSO_OK)
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	3320      	adds	r3, #32
 8003938:	2100      	movs	r1, #0
 800393a:	4618      	mov	r0, r3
 800393c:	f000 fefe 	bl	800473c <lsm6dso_xl_data_rate_set>
 8003940:	4603      	mov	r3, r0
 8003942:	2b00      	cmp	r3, #0
 8003944:	d002      	beq.n	800394c <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2ac>
          {
            return LSM6DSO_ERROR;
 8003946:	f04f 33ff 	mov.w	r3, #4294967295
 800394a:	e03d      	b.n	80039c8 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
          }
        }

        val1.xl_ulp_en = 1U;
 800394c:	7d3b      	ldrb	r3, [r7, #20]
 800394e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003952:	753b      	strb	r3, [r7, #20]
        if (lsm6dso_write_reg(&(pObj->Ctx), LSM6DSO_CTRL5_C, (uint8_t *)&val1, 1) != LSM6DSO_OK)
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	f103 0020 	add.w	r0, r3, #32
 800395a:	f107 0214 	add.w	r2, r7, #20
 800395e:	2301      	movs	r3, #1
 8003960:	2114      	movs	r1, #20
 8003962:	f000 fe75 	bl	8004650 <lsm6dso_write_reg>
 8003966:	4603      	mov	r3, r0
 8003968:	2b00      	cmp	r3, #0
 800396a:	d002      	beq.n	8003972 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2d2>
        {
          return LSM6DSO_ERROR;
 800396c:	f04f 33ff 	mov.w	r3, #4294967295
 8003970:	e02a      	b.n	80039c8 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
        }
      }

      /* Now we need to limit the ODR to 208 Hz if it is higher */
      if (newOdr > 208.0f)
 8003972:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8003976:	ed9f 7a17 	vldr	s14, [pc, #92]	; 80039d4 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x334>
 800397a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800397e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003982:	dc00      	bgt.n	8003986 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2e6>
      {
        newOdr = 208.0f;
      }
      break;
 8003984:	e006      	b.n	8003994 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2f4>
        newOdr = 208.0f;
 8003986:	4b14      	ldr	r3, [pc, #80]	; (80039d8 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x338>)
 8003988:	62bb      	str	r3, [r7, #40]	; 0x28
 800398a:	e003      	b.n	8003994 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2f4>
    }
    default:
      ret = LSM6DSO_ERROR;
 800398c:	f04f 33ff 	mov.w	r3, #4294967295
 8003990:	62fb      	str	r3, [r7, #44]	; 0x2c
      break;
 8003992:	bf00      	nop
  }

  if (ret == LSM6DSO_ERROR)
 8003994:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003996:	f1b3 3fff 	cmp.w	r3, #4294967295
 800399a:	d102      	bne.n	80039a2 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x302>
  {
    return LSM6DSO_ERROR;
 800399c:	f04f 33ff 	mov.w	r3, #4294967295
 80039a0:	e012      	b.n	80039c8 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
  }

  if (pObj->acc_is_enabled == 1U)
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80039a8:	2b01      	cmp	r3, #1
 80039aa:	d106      	bne.n	80039ba <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x31a>
  {
    ret = LSM6DSO_ACC_SetOutputDataRate_When_Enabled(pObj, newOdr);
 80039ac:	ed97 0a0a 	vldr	s0, [r7, #40]	; 0x28
 80039b0:	68f8      	ldr	r0, [r7, #12]
 80039b2:	f000 fbc9 	bl	8004148 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled>
 80039b6:	62f8      	str	r0, [r7, #44]	; 0x2c
 80039b8:	e005      	b.n	80039c6 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x326>
  }
  else
  {
    ret = LSM6DSO_ACC_SetOutputDataRate_When_Disabled(pObj, newOdr);
 80039ba:	ed97 0a0a 	vldr	s0, [r7, #40]	; 0x28
 80039be:	68f8      	ldr	r0, [r7, #12]
 80039c0:	f000 fc5a 	bl	8004278 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled>
 80039c4:	62f8      	str	r0, [r7, #44]	; 0x2c
  }

  return ret;
 80039c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 80039c8:	4618      	mov	r0, r3
 80039ca:	3730      	adds	r7, #48	; 0x30
 80039cc:	46bd      	mov	sp, r7
 80039ce:	bd80      	pop	{r7, pc}
 80039d0:	41480000 	.word	0x41480000
 80039d4:	43500000 	.word	0x43500000
 80039d8:	43500000 	.word	0x43500000

080039dc <LSM6DSO_ACC_GetFullScale>:
  * @param  pObj the device pObj
  * @param  FullScale pointer where the full scale is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_ACC_GetFullScale(LSM6DSO_Object_t *pObj, int32_t *FullScale)
{
 80039dc:	b580      	push	{r7, lr}
 80039de:	b084      	sub	sp, #16
 80039e0:	af00      	add	r7, sp, #0
 80039e2:	6078      	str	r0, [r7, #4]
 80039e4:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSO_OK;
 80039e6:	2300      	movs	r3, #0
 80039e8:	60fb      	str	r3, [r7, #12]
  lsm6dso_fs_xl_t fs_low_level;

  /* Read actual full scale selection from sensor. */
  if (lsm6dso_xl_full_scale_get(&(pObj->Ctx), &fs_low_level) != LSM6DSO_OK)
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	3320      	adds	r3, #32
 80039ee:	f107 020b 	add.w	r2, r7, #11
 80039f2:	4611      	mov	r1, r2
 80039f4:	4618      	mov	r0, r3
 80039f6:	f000 fe69 	bl	80046cc <lsm6dso_xl_full_scale_get>
 80039fa:	4603      	mov	r3, r0
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d002      	beq.n	8003a06 <LSM6DSO_ACC_GetFullScale+0x2a>
  {
    return LSM6DSO_ERROR;
 8003a00:	f04f 33ff 	mov.w	r3, #4294967295
 8003a04:	e023      	b.n	8003a4e <LSM6DSO_ACC_GetFullScale+0x72>
  }

  switch (fs_low_level)
 8003a06:	7afb      	ldrb	r3, [r7, #11]
 8003a08:	2b03      	cmp	r3, #3
 8003a0a:	d81b      	bhi.n	8003a44 <LSM6DSO_ACC_GetFullScale+0x68>
 8003a0c:	a201      	add	r2, pc, #4	; (adr r2, 8003a14 <LSM6DSO_ACC_GetFullScale+0x38>)
 8003a0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a12:	bf00      	nop
 8003a14:	08003a25 	.word	0x08003a25
 8003a18:	08003a3d 	.word	0x08003a3d
 8003a1c:	08003a2d 	.word	0x08003a2d
 8003a20:	08003a35 	.word	0x08003a35
  {
    case LSM6DSO_2g:
      *FullScale =  2;
 8003a24:	683b      	ldr	r3, [r7, #0]
 8003a26:	2202      	movs	r2, #2
 8003a28:	601a      	str	r2, [r3, #0]
      break;
 8003a2a:	e00f      	b.n	8003a4c <LSM6DSO_ACC_GetFullScale+0x70>

    case LSM6DSO_4g:
      *FullScale =  4;
 8003a2c:	683b      	ldr	r3, [r7, #0]
 8003a2e:	2204      	movs	r2, #4
 8003a30:	601a      	str	r2, [r3, #0]
      break;
 8003a32:	e00b      	b.n	8003a4c <LSM6DSO_ACC_GetFullScale+0x70>

    case LSM6DSO_8g:
      *FullScale =  8;
 8003a34:	683b      	ldr	r3, [r7, #0]
 8003a36:	2208      	movs	r2, #8
 8003a38:	601a      	str	r2, [r3, #0]
      break;
 8003a3a:	e007      	b.n	8003a4c <LSM6DSO_ACC_GetFullScale+0x70>

    case LSM6DSO_16g:
      *FullScale = 16;
 8003a3c:	683b      	ldr	r3, [r7, #0]
 8003a3e:	2210      	movs	r2, #16
 8003a40:	601a      	str	r2, [r3, #0]
      break;
 8003a42:	e003      	b.n	8003a4c <LSM6DSO_ACC_GetFullScale+0x70>

    default:
      ret = LSM6DSO_ERROR;
 8003a44:	f04f 33ff 	mov.w	r3, #4294967295
 8003a48:	60fb      	str	r3, [r7, #12]
      break;
 8003a4a:	bf00      	nop
  }

  return ret;
 8003a4c:	68fb      	ldr	r3, [r7, #12]
}
 8003a4e:	4618      	mov	r0, r3
 8003a50:	3710      	adds	r7, #16
 8003a52:	46bd      	mov	sp, r7
 8003a54:	bd80      	pop	{r7, pc}
 8003a56:	bf00      	nop

08003a58 <LSM6DSO_ACC_SetFullScale>:
  * @param  pObj the device pObj
  * @param  FullScale the functional full scale to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_ACC_SetFullScale(LSM6DSO_Object_t *pObj, int32_t FullScale)
{
 8003a58:	b580      	push	{r7, lr}
 8003a5a:	b084      	sub	sp, #16
 8003a5c:	af00      	add	r7, sp, #0
 8003a5e:	6078      	str	r0, [r7, #4]
 8003a60:	6039      	str	r1, [r7, #0]
  lsm6dso_fs_xl_t new_fs;

  /* Seems like MISRA C-2012 rule 14.3a violation but only from single file statical analysis point of view because
     the parameter passed to the function is not known at the moment of analysis */
  new_fs = (FullScale <= 2) ? LSM6DSO_2g
           : (FullScale <= 4) ? LSM6DSO_4g
 8003a62:	683b      	ldr	r3, [r7, #0]
 8003a64:	2b02      	cmp	r3, #2
 8003a66:	dd0b      	ble.n	8003a80 <LSM6DSO_ACC_SetFullScale+0x28>
 8003a68:	683b      	ldr	r3, [r7, #0]
 8003a6a:	2b04      	cmp	r3, #4
 8003a6c:	dd06      	ble.n	8003a7c <LSM6DSO_ACC_SetFullScale+0x24>
 8003a6e:	683b      	ldr	r3, [r7, #0]
 8003a70:	2b08      	cmp	r3, #8
 8003a72:	dc01      	bgt.n	8003a78 <LSM6DSO_ACC_SetFullScale+0x20>
 8003a74:	2303      	movs	r3, #3
 8003a76:	e004      	b.n	8003a82 <LSM6DSO_ACC_SetFullScale+0x2a>
 8003a78:	2301      	movs	r3, #1
 8003a7a:	e002      	b.n	8003a82 <LSM6DSO_ACC_SetFullScale+0x2a>
 8003a7c:	2302      	movs	r3, #2
 8003a7e:	e000      	b.n	8003a82 <LSM6DSO_ACC_SetFullScale+0x2a>
 8003a80:	2300      	movs	r3, #0
  new_fs = (FullScale <= 2) ? LSM6DSO_2g
 8003a82:	73fb      	strb	r3, [r7, #15]
           : (FullScale <= 8) ? LSM6DSO_8g
           :                    LSM6DSO_16g;

  if (lsm6dso_xl_full_scale_set(&(pObj->Ctx), new_fs) != LSM6DSO_OK)
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	3320      	adds	r3, #32
 8003a88:	7bfa      	ldrb	r2, [r7, #15]
 8003a8a:	4611      	mov	r1, r2
 8003a8c:	4618      	mov	r0, r3
 8003a8e:	f000 fdf7 	bl	8004680 <lsm6dso_xl_full_scale_set>
 8003a92:	4603      	mov	r3, r0
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d002      	beq.n	8003a9e <LSM6DSO_ACC_SetFullScale+0x46>
  {
    return LSM6DSO_ERROR;
 8003a98:	f04f 33ff 	mov.w	r3, #4294967295
 8003a9c:	e000      	b.n	8003aa0 <LSM6DSO_ACC_SetFullScale+0x48>
  }

  return LSM6DSO_OK;
 8003a9e:	2300      	movs	r3, #0
}
 8003aa0:	4618      	mov	r0, r3
 8003aa2:	3710      	adds	r7, #16
 8003aa4:	46bd      	mov	sp, r7
 8003aa6:	bd80      	pop	{r7, pc}

08003aa8 <LSM6DSO_ACC_GetAxesRaw>:
  * @param  pObj the device pObj
  * @param  Value pointer where the raw values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_ACC_GetAxesRaw(LSM6DSO_Object_t *pObj, LSM6DSO_AxesRaw_t *Value)
{
 8003aa8:	b580      	push	{r7, lr}
 8003aaa:	b084      	sub	sp, #16
 8003aac:	af00      	add	r7, sp, #0
 8003aae:	6078      	str	r0, [r7, #4]
 8003ab0:	6039      	str	r1, [r7, #0]
  lsm6dso_axis3bit16_t data_raw;

  /* Read raw data values. */
  if (lsm6dso_acceleration_raw_get(&(pObj->Ctx), data_raw.i16bit) != LSM6DSO_OK)
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	3320      	adds	r3, #32
 8003ab6:	f107 0208 	add.w	r2, r7, #8
 8003aba:	4611      	mov	r1, r2
 8003abc:	4618      	mov	r0, r3
 8003abe:	f001 f9d8 	bl	8004e72 <lsm6dso_acceleration_raw_get>
 8003ac2:	4603      	mov	r3, r0
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d002      	beq.n	8003ace <LSM6DSO_ACC_GetAxesRaw+0x26>
  {
    return LSM6DSO_ERROR;
 8003ac8:	f04f 33ff 	mov.w	r3, #4294967295
 8003acc:	e00c      	b.n	8003ae8 <LSM6DSO_ACC_GetAxesRaw+0x40>
  }

  /* Format the data. */
  Value->x = data_raw.i16bit[0];
 8003ace:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8003ad2:	683b      	ldr	r3, [r7, #0]
 8003ad4:	801a      	strh	r2, [r3, #0]
  Value->y = data_raw.i16bit[1];
 8003ad6:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8003ada:	683b      	ldr	r3, [r7, #0]
 8003adc:	805a      	strh	r2, [r3, #2]
  Value->z = data_raw.i16bit[2];
 8003ade:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8003ae2:	683b      	ldr	r3, [r7, #0]
 8003ae4:	809a      	strh	r2, [r3, #4]

  return LSM6DSO_OK;
 8003ae6:	2300      	movs	r3, #0
}
 8003ae8:	4618      	mov	r0, r3
 8003aea:	3710      	adds	r7, #16
 8003aec:	46bd      	mov	sp, r7
 8003aee:	bd80      	pop	{r7, pc}

08003af0 <LSM6DSO_ACC_GetAxes>:
  * @param  pObj the device pObj
  * @param  Acceleration pointer where the values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_ACC_GetAxes(LSM6DSO_Object_t *pObj, LSM6DSO_Axes_t *Acceleration)
{
 8003af0:	b580      	push	{r7, lr}
 8003af2:	b086      	sub	sp, #24
 8003af4:	af00      	add	r7, sp, #0
 8003af6:	6078      	str	r0, [r7, #4]
 8003af8:	6039      	str	r1, [r7, #0]
  lsm6dso_axis3bit16_t data_raw;
  float_t sensitivity = 0.0f;
 8003afa:	f04f 0300 	mov.w	r3, #0
 8003afe:	60fb      	str	r3, [r7, #12]

  /* Read raw data values. */
  if (lsm6dso_acceleration_raw_get(&(pObj->Ctx), data_raw.i16bit) != LSM6DSO_OK)
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	3320      	adds	r3, #32
 8003b04:	f107 0210 	add.w	r2, r7, #16
 8003b08:	4611      	mov	r1, r2
 8003b0a:	4618      	mov	r0, r3
 8003b0c:	f001 f9b1 	bl	8004e72 <lsm6dso_acceleration_raw_get>
 8003b10:	4603      	mov	r3, r0
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d002      	beq.n	8003b1c <LSM6DSO_ACC_GetAxes+0x2c>
  {
    return LSM6DSO_ERROR;
 8003b16:	f04f 33ff 	mov.w	r3, #4294967295
 8003b1a:	e03c      	b.n	8003b96 <LSM6DSO_ACC_GetAxes+0xa6>
  }

  /* Get LSM6DSO actual sensitivity. */
  if (LSM6DSO_ACC_GetSensitivity(pObj, &sensitivity) != LSM6DSO_OK)
 8003b1c:	f107 030c 	add.w	r3, r7, #12
 8003b20:	4619      	mov	r1, r3
 8003b22:	6878      	ldr	r0, [r7, #4]
 8003b24:	f7ff fce0 	bl	80034e8 <LSM6DSO_ACC_GetSensitivity>
 8003b28:	4603      	mov	r3, r0
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d002      	beq.n	8003b34 <LSM6DSO_ACC_GetAxes+0x44>
  {
    return LSM6DSO_ERROR;
 8003b2e:	f04f 33ff 	mov.w	r3, #4294967295
 8003b32:	e030      	b.n	8003b96 <LSM6DSO_ACC_GetAxes+0xa6>
  }

  /* Calculate the data. */
  Acceleration->x = (int32_t)((float_t)((float_t)data_raw.i16bit[0] * sensitivity));
 8003b34:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8003b38:	ee07 3a90 	vmov	s15, r3
 8003b3c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003b40:	edd7 7a03 	vldr	s15, [r7, #12]
 8003b44:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003b48:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003b4c:	ee17 2a90 	vmov	r2, s15
 8003b50:	683b      	ldr	r3, [r7, #0]
 8003b52:	601a      	str	r2, [r3, #0]
  Acceleration->y = (int32_t)((float_t)((float_t)data_raw.i16bit[1] * sensitivity));
 8003b54:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8003b58:	ee07 3a90 	vmov	s15, r3
 8003b5c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003b60:	edd7 7a03 	vldr	s15, [r7, #12]
 8003b64:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003b68:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003b6c:	ee17 2a90 	vmov	r2, s15
 8003b70:	683b      	ldr	r3, [r7, #0]
 8003b72:	605a      	str	r2, [r3, #4]
  Acceleration->z = (int32_t)((float_t)((float_t)data_raw.i16bit[2] * sensitivity));
 8003b74:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8003b78:	ee07 3a90 	vmov	s15, r3
 8003b7c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003b80:	edd7 7a03 	vldr	s15, [r7, #12]
 8003b84:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003b88:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003b8c:	ee17 2a90 	vmov	r2, s15
 8003b90:	683b      	ldr	r3, [r7, #0]
 8003b92:	609a      	str	r2, [r3, #8]

  return LSM6DSO_OK;
 8003b94:	2300      	movs	r3, #0
}
 8003b96:	4618      	mov	r0, r3
 8003b98:	3718      	adds	r7, #24
 8003b9a:	46bd      	mov	sp, r7
 8003b9c:	bd80      	pop	{r7, pc}

08003b9e <LSM6DSO_GYRO_Enable>:
  * @brief  Enable the LSM6DSO gyroscope sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_GYRO_Enable(LSM6DSO_Object_t *pObj)
{
 8003b9e:	b580      	push	{r7, lr}
 8003ba0:	b082      	sub	sp, #8
 8003ba2:	af00      	add	r7, sp, #0
 8003ba4:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->gyro_is_enabled == 1U)
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8003bac:	2b01      	cmp	r3, #1
 8003bae:	d101      	bne.n	8003bb4 <LSM6DSO_GYRO_Enable+0x16>
  {
    return LSM6DSO_OK;
 8003bb0:	2300      	movs	r3, #0
 8003bb2:	e014      	b.n	8003bde <LSM6DSO_GYRO_Enable+0x40>
  }

  /* Output data rate selection. */
  if (lsm6dso_gy_data_rate_set(&(pObj->Ctx), pObj->gyro_odr) != LSM6DSO_OK)
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	f103 0220 	add.w	r2, r3, #32
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003bc0:	4619      	mov	r1, r3
 8003bc2:	4610      	mov	r0, r2
 8003bc4:	f000 ff86 	bl	8004ad4 <lsm6dso_gy_data_rate_set>
 8003bc8:	4603      	mov	r3, r0
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d002      	beq.n	8003bd4 <LSM6DSO_GYRO_Enable+0x36>
  {
    return LSM6DSO_ERROR;
 8003bce:	f04f 33ff 	mov.w	r3, #4294967295
 8003bd2:	e004      	b.n	8003bde <LSM6DSO_GYRO_Enable+0x40>
  }

  pObj->gyro_is_enabled = 1;
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	2201      	movs	r2, #1
 8003bd8:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32

  return LSM6DSO_OK;
 8003bdc:	2300      	movs	r3, #0
}
 8003bde:	4618      	mov	r0, r3
 8003be0:	3708      	adds	r7, #8
 8003be2:	46bd      	mov	sp, r7
 8003be4:	bd80      	pop	{r7, pc}

08003be6 <LSM6DSO_GYRO_Disable>:
  * @brief  Disable the LSM6DSO gyroscope sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_GYRO_Disable(LSM6DSO_Object_t *pObj)
{
 8003be6:	b580      	push	{r7, lr}
 8003be8:	b082      	sub	sp, #8
 8003bea:	af00      	add	r7, sp, #0
 8003bec:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->gyro_is_enabled == 0U)
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d101      	bne.n	8003bfc <LSM6DSO_GYRO_Disable+0x16>
  {
    return LSM6DSO_OK;
 8003bf8:	2300      	movs	r3, #0
 8003bfa:	e01f      	b.n	8003c3c <LSM6DSO_GYRO_Disable+0x56>
  }

  /* Get current output data rate. */
  if (lsm6dso_gy_data_rate_get(&(pObj->Ctx), &pObj->gyro_odr) != LSM6DSO_OK)
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	f103 0220 	add.w	r2, r3, #32
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	3334      	adds	r3, #52	; 0x34
 8003c06:	4619      	mov	r1, r3
 8003c08:	4610      	mov	r0, r2
 8003c0a:	f001 f85f 	bl	8004ccc <lsm6dso_gy_data_rate_get>
 8003c0e:	4603      	mov	r3, r0
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d002      	beq.n	8003c1a <LSM6DSO_GYRO_Disable+0x34>
  {
    return LSM6DSO_ERROR;
 8003c14:	f04f 33ff 	mov.w	r3, #4294967295
 8003c18:	e010      	b.n	8003c3c <LSM6DSO_GYRO_Disable+0x56>
  }

  /* Output data rate selection - power down. */
  if (lsm6dso_gy_data_rate_set(&(pObj->Ctx), LSM6DSO_GY_ODR_OFF) != LSM6DSO_OK)
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	3320      	adds	r3, #32
 8003c1e:	2100      	movs	r1, #0
 8003c20:	4618      	mov	r0, r3
 8003c22:	f000 ff57 	bl	8004ad4 <lsm6dso_gy_data_rate_set>
 8003c26:	4603      	mov	r3, r0
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d002      	beq.n	8003c32 <LSM6DSO_GYRO_Disable+0x4c>
  {
    return LSM6DSO_ERROR;
 8003c2c:	f04f 33ff 	mov.w	r3, #4294967295
 8003c30:	e004      	b.n	8003c3c <LSM6DSO_GYRO_Disable+0x56>
  }

  pObj->gyro_is_enabled = 0;
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	2200      	movs	r2, #0
 8003c36:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32

  return LSM6DSO_OK;
 8003c3a:	2300      	movs	r3, #0
}
 8003c3c:	4618      	mov	r0, r3
 8003c3e:	3708      	adds	r7, #8
 8003c40:	46bd      	mov	sp, r7
 8003c42:	bd80      	pop	{r7, pc}

08003c44 <LSM6DSO_GYRO_GetSensitivity>:
  * @param  pObj the device pObj
  * @param  Sensitivity pointer
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_GYRO_GetSensitivity(LSM6DSO_Object_t *pObj, float_t *Sensitivity)
{
 8003c44:	b580      	push	{r7, lr}
 8003c46:	b084      	sub	sp, #16
 8003c48:	af00      	add	r7, sp, #0
 8003c4a:	6078      	str	r0, [r7, #4]
 8003c4c:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSO_OK;
 8003c4e:	2300      	movs	r3, #0
 8003c50:	60fb      	str	r3, [r7, #12]
  lsm6dso_fs_g_t full_scale;

  /* Read actual full scale selection from sensor. */
  if (lsm6dso_gy_full_scale_get(&(pObj->Ctx), &full_scale) != LSM6DSO_OK)
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	3320      	adds	r3, #32
 8003c56:	f107 020b 	add.w	r2, r7, #11
 8003c5a:	4611      	mov	r1, r2
 8003c5c:	4618      	mov	r0, r3
 8003c5e:	f000 fef7 	bl	8004a50 <lsm6dso_gy_full_scale_get>
 8003c62:	4603      	mov	r3, r0
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d002      	beq.n	8003c6e <LSM6DSO_GYRO_GetSensitivity+0x2a>
  {
    return LSM6DSO_ERROR;
 8003c68:	f04f 33ff 	mov.w	r3, #4294967295
 8003c6c:	e02d      	b.n	8003cca <LSM6DSO_GYRO_GetSensitivity+0x86>
  }

  /* Store the sensitivity based on actual full scale. */
  switch (full_scale)
 8003c6e:	7afb      	ldrb	r3, [r7, #11]
 8003c70:	2b06      	cmp	r3, #6
 8003c72:	d825      	bhi.n	8003cc0 <LSM6DSO_GYRO_GetSensitivity+0x7c>
 8003c74:	a201      	add	r2, pc, #4	; (adr r2, 8003c7c <LSM6DSO_GYRO_GetSensitivity+0x38>)
 8003c76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c7a:	bf00      	nop
 8003c7c:	08003ca1 	.word	0x08003ca1
 8003c80:	08003c99 	.word	0x08003c99
 8003c84:	08003ca9 	.word	0x08003ca9
 8003c88:	08003cc1 	.word	0x08003cc1
 8003c8c:	08003cb1 	.word	0x08003cb1
 8003c90:	08003cc1 	.word	0x08003cc1
 8003c94:	08003cb9 	.word	0x08003cb9
  {
    case LSM6DSO_125dps:
      *Sensitivity = LSM6DSO_GYRO_SENSITIVITY_FS_125DPS;
 8003c98:	683b      	ldr	r3, [r7, #0]
 8003c9a:	4a0e      	ldr	r2, [pc, #56]	; (8003cd4 <LSM6DSO_GYRO_GetSensitivity+0x90>)
 8003c9c:	601a      	str	r2, [r3, #0]
      break;
 8003c9e:	e013      	b.n	8003cc8 <LSM6DSO_GYRO_GetSensitivity+0x84>

    case LSM6DSO_250dps:
      *Sensitivity = LSM6DSO_GYRO_SENSITIVITY_FS_250DPS;
 8003ca0:	683b      	ldr	r3, [r7, #0]
 8003ca2:	4a0d      	ldr	r2, [pc, #52]	; (8003cd8 <LSM6DSO_GYRO_GetSensitivity+0x94>)
 8003ca4:	601a      	str	r2, [r3, #0]
      break;
 8003ca6:	e00f      	b.n	8003cc8 <LSM6DSO_GYRO_GetSensitivity+0x84>

    case LSM6DSO_500dps:
      *Sensitivity = LSM6DSO_GYRO_SENSITIVITY_FS_500DPS;
 8003ca8:	683b      	ldr	r3, [r7, #0]
 8003caa:	4a0c      	ldr	r2, [pc, #48]	; (8003cdc <LSM6DSO_GYRO_GetSensitivity+0x98>)
 8003cac:	601a      	str	r2, [r3, #0]
      break;
 8003cae:	e00b      	b.n	8003cc8 <LSM6DSO_GYRO_GetSensitivity+0x84>

    case LSM6DSO_1000dps:
      *Sensitivity = LSM6DSO_GYRO_SENSITIVITY_FS_1000DPS;
 8003cb0:	683b      	ldr	r3, [r7, #0]
 8003cb2:	4a0b      	ldr	r2, [pc, #44]	; (8003ce0 <LSM6DSO_GYRO_GetSensitivity+0x9c>)
 8003cb4:	601a      	str	r2, [r3, #0]
      break;
 8003cb6:	e007      	b.n	8003cc8 <LSM6DSO_GYRO_GetSensitivity+0x84>

    case LSM6DSO_2000dps:
      *Sensitivity = LSM6DSO_GYRO_SENSITIVITY_FS_2000DPS;
 8003cb8:	683b      	ldr	r3, [r7, #0]
 8003cba:	4a0a      	ldr	r2, [pc, #40]	; (8003ce4 <LSM6DSO_GYRO_GetSensitivity+0xa0>)
 8003cbc:	601a      	str	r2, [r3, #0]
      break;
 8003cbe:	e003      	b.n	8003cc8 <LSM6DSO_GYRO_GetSensitivity+0x84>

    default:
      ret = LSM6DSO_ERROR;
 8003cc0:	f04f 33ff 	mov.w	r3, #4294967295
 8003cc4:	60fb      	str	r3, [r7, #12]
      break;
 8003cc6:	bf00      	nop
  }

  return ret;
 8003cc8:	68fb      	ldr	r3, [r7, #12]
}
 8003cca:	4618      	mov	r0, r3
 8003ccc:	3710      	adds	r7, #16
 8003cce:	46bd      	mov	sp, r7
 8003cd0:	bd80      	pop	{r7, pc}
 8003cd2:	bf00      	nop
 8003cd4:	408c0000 	.word	0x408c0000
 8003cd8:	410c0000 	.word	0x410c0000
 8003cdc:	418c0000 	.word	0x418c0000
 8003ce0:	420c0000 	.word	0x420c0000
 8003ce4:	428c0000 	.word	0x428c0000

08003ce8 <LSM6DSO_GYRO_GetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr pointer where the output data rate is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_GYRO_GetOutputDataRate(LSM6DSO_Object_t *pObj, float_t *Odr)
{
 8003ce8:	b580      	push	{r7, lr}
 8003cea:	b084      	sub	sp, #16
 8003cec:	af00      	add	r7, sp, #0
 8003cee:	6078      	str	r0, [r7, #4]
 8003cf0:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSO_OK;
 8003cf2:	2300      	movs	r3, #0
 8003cf4:	60fb      	str	r3, [r7, #12]
  lsm6dso_odr_g_t odr_low_level;

  /* Get current output data rate. */
  if (lsm6dso_gy_data_rate_get(&(pObj->Ctx), &odr_low_level) != LSM6DSO_OK)
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	3320      	adds	r3, #32
 8003cfa:	f107 020b 	add.w	r2, r7, #11
 8003cfe:	4611      	mov	r1, r2
 8003d00:	4618      	mov	r0, r3
 8003d02:	f000 ffe3 	bl	8004ccc <lsm6dso_gy_data_rate_get>
 8003d06:	4603      	mov	r3, r0
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d002      	beq.n	8003d12 <LSM6DSO_GYRO_GetOutputDataRate+0x2a>
  {
    return LSM6DSO_ERROR;
 8003d0c:	f04f 33ff 	mov.w	r3, #4294967295
 8003d10:	e04e      	b.n	8003db0 <LSM6DSO_GYRO_GetOutputDataRate+0xc8>
  }

  switch (odr_low_level)
 8003d12:	7afb      	ldrb	r3, [r7, #11]
 8003d14:	2b0a      	cmp	r3, #10
 8003d16:	d846      	bhi.n	8003da6 <LSM6DSO_GYRO_GetOutputDataRate+0xbe>
 8003d18:	a201      	add	r2, pc, #4	; (adr r2, 8003d20 <LSM6DSO_GYRO_GetOutputDataRate+0x38>)
 8003d1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d1e:	bf00      	nop
 8003d20:	08003d4d 	.word	0x08003d4d
 8003d24:	08003d57 	.word	0x08003d57
 8003d28:	08003d5f 	.word	0x08003d5f
 8003d2c:	08003d67 	.word	0x08003d67
 8003d30:	08003d6f 	.word	0x08003d6f
 8003d34:	08003d77 	.word	0x08003d77
 8003d38:	08003d7f 	.word	0x08003d7f
 8003d3c:	08003d87 	.word	0x08003d87
 8003d40:	08003d8f 	.word	0x08003d8f
 8003d44:	08003d97 	.word	0x08003d97
 8003d48:	08003d9f 	.word	0x08003d9f
  {
    case LSM6DSO_GY_ODR_OFF:
      *Odr = 0.0f;
 8003d4c:	683b      	ldr	r3, [r7, #0]
 8003d4e:	f04f 0200 	mov.w	r2, #0
 8003d52:	601a      	str	r2, [r3, #0]
      break;
 8003d54:	e02b      	b.n	8003dae <LSM6DSO_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSO_GY_ODR_12Hz5:
      *Odr = 12.5f;
 8003d56:	683b      	ldr	r3, [r7, #0]
 8003d58:	4a17      	ldr	r2, [pc, #92]	; (8003db8 <LSM6DSO_GYRO_GetOutputDataRate+0xd0>)
 8003d5a:	601a      	str	r2, [r3, #0]
      break;
 8003d5c:	e027      	b.n	8003dae <LSM6DSO_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSO_GY_ODR_26Hz:
      *Odr = 26.0f;
 8003d5e:	683b      	ldr	r3, [r7, #0]
 8003d60:	4a16      	ldr	r2, [pc, #88]	; (8003dbc <LSM6DSO_GYRO_GetOutputDataRate+0xd4>)
 8003d62:	601a      	str	r2, [r3, #0]
      break;
 8003d64:	e023      	b.n	8003dae <LSM6DSO_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSO_GY_ODR_52Hz:
      *Odr = 52.0f;
 8003d66:	683b      	ldr	r3, [r7, #0]
 8003d68:	4a15      	ldr	r2, [pc, #84]	; (8003dc0 <LSM6DSO_GYRO_GetOutputDataRate+0xd8>)
 8003d6a:	601a      	str	r2, [r3, #0]
      break;
 8003d6c:	e01f      	b.n	8003dae <LSM6DSO_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSO_GY_ODR_104Hz:
      *Odr = 104.0f;
 8003d6e:	683b      	ldr	r3, [r7, #0]
 8003d70:	4a14      	ldr	r2, [pc, #80]	; (8003dc4 <LSM6DSO_GYRO_GetOutputDataRate+0xdc>)
 8003d72:	601a      	str	r2, [r3, #0]
      break;
 8003d74:	e01b      	b.n	8003dae <LSM6DSO_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSO_GY_ODR_208Hz:
      *Odr = 208.0f;
 8003d76:	683b      	ldr	r3, [r7, #0]
 8003d78:	4a13      	ldr	r2, [pc, #76]	; (8003dc8 <LSM6DSO_GYRO_GetOutputDataRate+0xe0>)
 8003d7a:	601a      	str	r2, [r3, #0]
      break;
 8003d7c:	e017      	b.n	8003dae <LSM6DSO_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSO_GY_ODR_417Hz:
      *Odr = 417.0f;
 8003d7e:	683b      	ldr	r3, [r7, #0]
 8003d80:	4a12      	ldr	r2, [pc, #72]	; (8003dcc <LSM6DSO_GYRO_GetOutputDataRate+0xe4>)
 8003d82:	601a      	str	r2, [r3, #0]
      break;
 8003d84:	e013      	b.n	8003dae <LSM6DSO_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSO_GY_ODR_833Hz:
      *Odr = 833.0f;
 8003d86:	683b      	ldr	r3, [r7, #0]
 8003d88:	4a11      	ldr	r2, [pc, #68]	; (8003dd0 <LSM6DSO_GYRO_GetOutputDataRate+0xe8>)
 8003d8a:	601a      	str	r2, [r3, #0]
      break;
 8003d8c:	e00f      	b.n	8003dae <LSM6DSO_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSO_GY_ODR_1667Hz:
      *Odr = 1667.0f;
 8003d8e:	683b      	ldr	r3, [r7, #0]
 8003d90:	4a10      	ldr	r2, [pc, #64]	; (8003dd4 <LSM6DSO_GYRO_GetOutputDataRate+0xec>)
 8003d92:	601a      	str	r2, [r3, #0]
      break;
 8003d94:	e00b      	b.n	8003dae <LSM6DSO_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSO_GY_ODR_3333Hz:
      *Odr = 3333.0f;
 8003d96:	683b      	ldr	r3, [r7, #0]
 8003d98:	4a0f      	ldr	r2, [pc, #60]	; (8003dd8 <LSM6DSO_GYRO_GetOutputDataRate+0xf0>)
 8003d9a:	601a      	str	r2, [r3, #0]
      break;
 8003d9c:	e007      	b.n	8003dae <LSM6DSO_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSO_GY_ODR_6667Hz:
      *Odr = 6667.0f;
 8003d9e:	683b      	ldr	r3, [r7, #0]
 8003da0:	4a0e      	ldr	r2, [pc, #56]	; (8003ddc <LSM6DSO_GYRO_GetOutputDataRate+0xf4>)
 8003da2:	601a      	str	r2, [r3, #0]
      break;
 8003da4:	e003      	b.n	8003dae <LSM6DSO_GYRO_GetOutputDataRate+0xc6>

    default:
      ret = LSM6DSO_ERROR;
 8003da6:	f04f 33ff 	mov.w	r3, #4294967295
 8003daa:	60fb      	str	r3, [r7, #12]
      break;
 8003dac:	bf00      	nop
  }

  return ret;
 8003dae:	68fb      	ldr	r3, [r7, #12]
}
 8003db0:	4618      	mov	r0, r3
 8003db2:	3710      	adds	r7, #16
 8003db4:	46bd      	mov	sp, r7
 8003db6:	bd80      	pop	{r7, pc}
 8003db8:	41480000 	.word	0x41480000
 8003dbc:	41d00000 	.word	0x41d00000
 8003dc0:	42500000 	.word	0x42500000
 8003dc4:	42d00000 	.word	0x42d00000
 8003dc8:	43500000 	.word	0x43500000
 8003dcc:	43d08000 	.word	0x43d08000
 8003dd0:	44504000 	.word	0x44504000
 8003dd4:	44d06000 	.word	0x44d06000
 8003dd8:	45505000 	.word	0x45505000
 8003ddc:	45d05800 	.word	0x45d05800

08003de0 <LSM6DSO_GYRO_SetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_GYRO_SetOutputDataRate(LSM6DSO_Object_t *pObj, float_t Odr)
{
 8003de0:	b580      	push	{r7, lr}
 8003de2:	b082      	sub	sp, #8
 8003de4:	af00      	add	r7, sp, #0
 8003de6:	6078      	str	r0, [r7, #4]
 8003de8:	ed87 0a00 	vstr	s0, [r7]
  return LSM6DSO_GYRO_SetOutputDataRate_With_Mode(pObj, Odr, LSM6DSO_GYRO_HIGH_PERFORMANCE_MODE);
 8003dec:	2100      	movs	r1, #0
 8003dee:	ed97 0a00 	vldr	s0, [r7]
 8003df2:	6878      	ldr	r0, [r7, #4]
 8003df4:	f000 f806 	bl	8003e04 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode>
 8003df8:	4603      	mov	r3, r0
}
 8003dfa:	4618      	mov	r0, r3
 8003dfc:	3708      	adds	r7, #8
 8003dfe:	46bd      	mov	sp, r7
 8003e00:	bd80      	pop	{r7, pc}
	...

08003e04 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode>:
  * @param  Mode the gyroscope operating mode
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_GYRO_SetOutputDataRate_With_Mode(LSM6DSO_Object_t *pObj, float_t Odr,
                                                 LSM6DSO_GYRO_Operating_Mode_t Mode)
{
 8003e04:	b580      	push	{r7, lr}
 8003e06:	b088      	sub	sp, #32
 8003e08:	af00      	add	r7, sp, #0
 8003e0a:	60f8      	str	r0, [r7, #12]
 8003e0c:	ed87 0a02 	vstr	s0, [r7, #8]
 8003e10:	460b      	mov	r3, r1
 8003e12:	71fb      	strb	r3, [r7, #7]
  int32_t ret = LSM6DSO_OK;
 8003e14:	2300      	movs	r3, #0
 8003e16:	61fb      	str	r3, [r7, #28]
  float_t newOdr = Odr;
 8003e18:	68bb      	ldr	r3, [r7, #8]
 8003e1a:	61bb      	str	r3, [r7, #24]

  switch (Mode)
 8003e1c:	79fb      	ldrb	r3, [r7, #7]
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d002      	beq.n	8003e28 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x24>
 8003e22:	2b01      	cmp	r3, #1
 8003e24:	d028      	beq.n	8003e78 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x74>
 8003e26:	e05c      	b.n	8003ee2 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0xde>
    case LSM6DSO_GYRO_HIGH_PERFORMANCE_MODE:
    {
      /* We must uncheck Low Power bit if it is enabled */
      lsm6dso_ctrl7_g_t val1;

      if (lsm6dso_read_reg(&(pObj->Ctx), LSM6DSO_CTRL7_G, (uint8_t *)&val1, 1) != LSM6DSO_OK)
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	f103 0020 	add.w	r0, r3, #32
 8003e2e:	f107 0214 	add.w	r2, r7, #20
 8003e32:	2301      	movs	r3, #1
 8003e34:	2116      	movs	r1, #22
 8003e36:	f000 fbf3 	bl	8004620 <lsm6dso_read_reg>
 8003e3a:	4603      	mov	r3, r0
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d002      	beq.n	8003e46 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x42>
      {
        return LSM6DSO_ERROR;
 8003e40:	f04f 33ff 	mov.w	r3, #4294967295
 8003e44:	e06c      	b.n	8003f20 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x11c>
      }

      if (val1.g_hm_mode != 0U)
 8003e46:	7d3b      	ldrb	r3, [r7, #20]
 8003e48:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8003e4c:	b2db      	uxtb	r3, r3
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d04b      	beq.n	8003eea <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0xe6>
      {
        val1.g_hm_mode = 0U;
 8003e52:	7d3b      	ldrb	r3, [r7, #20]
 8003e54:	f36f 13c7 	bfc	r3, #7, #1
 8003e58:	753b      	strb	r3, [r7, #20]
        if (lsm6dso_write_reg(&(pObj->Ctx), LSM6DSO_CTRL7_G, (uint8_t *)&val1, 1) != LSM6DSO_OK)
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	f103 0020 	add.w	r0, r3, #32
 8003e60:	f107 0214 	add.w	r2, r7, #20
 8003e64:	2301      	movs	r3, #1
 8003e66:	2116      	movs	r1, #22
 8003e68:	f000 fbf2 	bl	8004650 <lsm6dso_write_reg>
 8003e6c:	4603      	mov	r3, r0
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d03b      	beq.n	8003eea <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0xe6>
        {
          return LSM6DSO_ERROR;
 8003e72:	f04f 33ff 	mov.w	r3, #4294967295
 8003e76:	e053      	b.n	8003f20 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x11c>
    case LSM6DSO_GYRO_LOW_POWER_NORMAL_MODE:
    {
      /* We must check the Low Power bit if it is unchecked */
      lsm6dso_ctrl7_g_t val1;

      if (lsm6dso_read_reg(&(pObj->Ctx), LSM6DSO_CTRL7_G, (uint8_t *)&val1, 1) != LSM6DSO_OK)
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	f103 0020 	add.w	r0, r3, #32
 8003e7e:	f107 0210 	add.w	r2, r7, #16
 8003e82:	2301      	movs	r3, #1
 8003e84:	2116      	movs	r1, #22
 8003e86:	f000 fbcb 	bl	8004620 <lsm6dso_read_reg>
 8003e8a:	4603      	mov	r3, r0
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	d002      	beq.n	8003e96 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x92>
      {
        return LSM6DSO_ERROR;
 8003e90:	f04f 33ff 	mov.w	r3, #4294967295
 8003e94:	e044      	b.n	8003f20 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x11c>
      }

      if (val1.g_hm_mode == 0U)
 8003e96:	7c3b      	ldrb	r3, [r7, #16]
 8003e98:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8003e9c:	b2db      	uxtb	r3, r3
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d112      	bne.n	8003ec8 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0xc4>
      {
        val1.g_hm_mode = 1U;
 8003ea2:	7c3b      	ldrb	r3, [r7, #16]
 8003ea4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003ea8:	743b      	strb	r3, [r7, #16]
        if (lsm6dso_write_reg(&(pObj->Ctx), LSM6DSO_CTRL7_G, (uint8_t *)&val1, 1) != LSM6DSO_OK)
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	f103 0020 	add.w	r0, r3, #32
 8003eb0:	f107 0210 	add.w	r2, r7, #16
 8003eb4:	2301      	movs	r3, #1
 8003eb6:	2116      	movs	r1, #22
 8003eb8:	f000 fbca 	bl	8004650 <lsm6dso_write_reg>
 8003ebc:	4603      	mov	r3, r0
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d002      	beq.n	8003ec8 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0xc4>
        {
          return LSM6DSO_ERROR;
 8003ec2:	f04f 33ff 	mov.w	r3, #4294967295
 8003ec6:	e02b      	b.n	8003f20 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x11c>
        }
      }

      /* Now we need to limit the ODR to 208 Hz if it is higher */
      if (newOdr > 208.0f)
 8003ec8:	edd7 7a06 	vldr	s15, [r7, #24]
 8003ecc:	ed9f 7a16 	vldr	s14, [pc, #88]	; 8003f28 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x124>
 8003ed0:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003ed4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003ed8:	dc00      	bgt.n	8003edc <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0xd8>
      {
        newOdr = 208.0f;
      }
      break;
 8003eda:	e007      	b.n	8003eec <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0xe8>
        newOdr = 208.0f;
 8003edc:	4b13      	ldr	r3, [pc, #76]	; (8003f2c <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x128>)
 8003ede:	61bb      	str	r3, [r7, #24]
 8003ee0:	e004      	b.n	8003eec <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0xe8>
    }
    default:
      ret = LSM6DSO_ERROR;
 8003ee2:	f04f 33ff 	mov.w	r3, #4294967295
 8003ee6:	61fb      	str	r3, [r7, #28]
      break;
 8003ee8:	e000      	b.n	8003eec <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0xe8>
      break;
 8003eea:	bf00      	nop
  }

  if (ret == LSM6DSO_ERROR)
 8003eec:	69fb      	ldr	r3, [r7, #28]
 8003eee:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ef2:	d102      	bne.n	8003efa <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0xf6>
  {
    return LSM6DSO_ERROR;
 8003ef4:	f04f 33ff 	mov.w	r3, #4294967295
 8003ef8:	e012      	b.n	8003f20 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x11c>
  }

  if (pObj->gyro_is_enabled == 1U)
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8003f00:	2b01      	cmp	r3, #1
 8003f02:	d106      	bne.n	8003f12 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x10e>
  {
    ret = LSM6DSO_GYRO_SetOutputDataRate_When_Enabled(pObj, newOdr);
 8003f04:	ed97 0a06 	vldr	s0, [r7, #24]
 8003f08:	68f8      	ldr	r0, [r7, #12]
 8003f0a:	f000 fa45 	bl	8004398 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled>
 8003f0e:	61f8      	str	r0, [r7, #28]
 8003f10:	e005      	b.n	8003f1e <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x11a>
  }
  else
  {
    ret = LSM6DSO_GYRO_SetOutputDataRate_When_Disabled(pObj, newOdr);
 8003f12:	ed97 0a06 	vldr	s0, [r7, #24]
 8003f16:	68f8      	ldr	r0, [r7, #12]
 8003f18:	f000 faca 	bl	80044b0 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled>
 8003f1c:	61f8      	str	r0, [r7, #28]
  }

  return ret;
 8003f1e:	69fb      	ldr	r3, [r7, #28]
}
 8003f20:	4618      	mov	r0, r3
 8003f22:	3720      	adds	r7, #32
 8003f24:	46bd      	mov	sp, r7
 8003f26:	bd80      	pop	{r7, pc}
 8003f28:	43500000 	.word	0x43500000
 8003f2c:	43500000 	.word	0x43500000

08003f30 <LSM6DSO_GYRO_GetFullScale>:
  * @param  pObj the device pObj
  * @param  FullScale pointer where the full scale is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_GYRO_GetFullScale(LSM6DSO_Object_t *pObj, int32_t  *FullScale)
{
 8003f30:	b580      	push	{r7, lr}
 8003f32:	b084      	sub	sp, #16
 8003f34:	af00      	add	r7, sp, #0
 8003f36:	6078      	str	r0, [r7, #4]
 8003f38:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSO_OK;
 8003f3a:	2300      	movs	r3, #0
 8003f3c:	60fb      	str	r3, [r7, #12]
  lsm6dso_fs_g_t fs_low_level;

  /* Read actual full scale selection from sensor. */
  if (lsm6dso_gy_full_scale_get(&(pObj->Ctx), &fs_low_level) != LSM6DSO_OK)
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	3320      	adds	r3, #32
 8003f42:	f107 020b 	add.w	r2, r7, #11
 8003f46:	4611      	mov	r1, r2
 8003f48:	4618      	mov	r0, r3
 8003f4a:	f000 fd81 	bl	8004a50 <lsm6dso_gy_full_scale_get>
 8003f4e:	4603      	mov	r3, r0
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d002      	beq.n	8003f5a <LSM6DSO_GYRO_GetFullScale+0x2a>
  {
    return LSM6DSO_ERROR;
 8003f54:	f04f 33ff 	mov.w	r3, #4294967295
 8003f58:	e030      	b.n	8003fbc <LSM6DSO_GYRO_GetFullScale+0x8c>
  }

  switch (fs_low_level)
 8003f5a:	7afb      	ldrb	r3, [r7, #11]
 8003f5c:	2b06      	cmp	r3, #6
 8003f5e:	d828      	bhi.n	8003fb2 <LSM6DSO_GYRO_GetFullScale+0x82>
 8003f60:	a201      	add	r2, pc, #4	; (adr r2, 8003f68 <LSM6DSO_GYRO_GetFullScale+0x38>)
 8003f62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f66:	bf00      	nop
 8003f68:	08003f8d 	.word	0x08003f8d
 8003f6c:	08003f85 	.word	0x08003f85
 8003f70:	08003f95 	.word	0x08003f95
 8003f74:	08003fb3 	.word	0x08003fb3
 8003f78:	08003f9f 	.word	0x08003f9f
 8003f7c:	08003fb3 	.word	0x08003fb3
 8003f80:	08003fa9 	.word	0x08003fa9
  {
    case LSM6DSO_125dps:
      *FullScale =  125;
 8003f84:	683b      	ldr	r3, [r7, #0]
 8003f86:	227d      	movs	r2, #125	; 0x7d
 8003f88:	601a      	str	r2, [r3, #0]
      break;
 8003f8a:	e016      	b.n	8003fba <LSM6DSO_GYRO_GetFullScale+0x8a>

    case LSM6DSO_250dps:
      *FullScale =  250;
 8003f8c:	683b      	ldr	r3, [r7, #0]
 8003f8e:	22fa      	movs	r2, #250	; 0xfa
 8003f90:	601a      	str	r2, [r3, #0]
      break;
 8003f92:	e012      	b.n	8003fba <LSM6DSO_GYRO_GetFullScale+0x8a>

    case LSM6DSO_500dps:
      *FullScale =  500;
 8003f94:	683b      	ldr	r3, [r7, #0]
 8003f96:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8003f9a:	601a      	str	r2, [r3, #0]
      break;
 8003f9c:	e00d      	b.n	8003fba <LSM6DSO_GYRO_GetFullScale+0x8a>

    case LSM6DSO_1000dps:
      *FullScale = 1000;
 8003f9e:	683b      	ldr	r3, [r7, #0]
 8003fa0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003fa4:	601a      	str	r2, [r3, #0]
      break;
 8003fa6:	e008      	b.n	8003fba <LSM6DSO_GYRO_GetFullScale+0x8a>

    case LSM6DSO_2000dps:
      *FullScale = 2000;
 8003fa8:	683b      	ldr	r3, [r7, #0]
 8003faa:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8003fae:	601a      	str	r2, [r3, #0]
      break;
 8003fb0:	e003      	b.n	8003fba <LSM6DSO_GYRO_GetFullScale+0x8a>

    default:
      ret = LSM6DSO_ERROR;
 8003fb2:	f04f 33ff 	mov.w	r3, #4294967295
 8003fb6:	60fb      	str	r3, [r7, #12]
      break;
 8003fb8:	bf00      	nop
  }

  return ret;
 8003fba:	68fb      	ldr	r3, [r7, #12]
}
 8003fbc:	4618      	mov	r0, r3
 8003fbe:	3710      	adds	r7, #16
 8003fc0:	46bd      	mov	sp, r7
 8003fc2:	bd80      	pop	{r7, pc}

08003fc4 <LSM6DSO_GYRO_SetFullScale>:
  * @param  pObj the device pObj
  * @param  FullScale the functional full scale to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_GYRO_SetFullScale(LSM6DSO_Object_t *pObj, int32_t FullScale)
{
 8003fc4:	b580      	push	{r7, lr}
 8003fc6:	b084      	sub	sp, #16
 8003fc8:	af00      	add	r7, sp, #0
 8003fca:	6078      	str	r0, [r7, #4]
 8003fcc:	6039      	str	r1, [r7, #0]
  lsm6dso_fs_g_t new_fs;

  new_fs = (FullScale <= 125)  ? LSM6DSO_125dps
           : (FullScale <= 250)  ? LSM6DSO_250dps
 8003fce:	683b      	ldr	r3, [r7, #0]
 8003fd0:	2b7d      	cmp	r3, #125	; 0x7d
 8003fd2:	dd12      	ble.n	8003ffa <LSM6DSO_GYRO_SetFullScale+0x36>
 8003fd4:	683b      	ldr	r3, [r7, #0]
 8003fd6:	2bfa      	cmp	r3, #250	; 0xfa
 8003fd8:	dd0d      	ble.n	8003ff6 <LSM6DSO_GYRO_SetFullScale+0x32>
 8003fda:	683b      	ldr	r3, [r7, #0]
 8003fdc:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8003fe0:	dd07      	ble.n	8003ff2 <LSM6DSO_GYRO_SetFullScale+0x2e>
 8003fe2:	683b      	ldr	r3, [r7, #0]
 8003fe4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003fe8:	dc01      	bgt.n	8003fee <LSM6DSO_GYRO_SetFullScale+0x2a>
 8003fea:	2304      	movs	r3, #4
 8003fec:	e006      	b.n	8003ffc <LSM6DSO_GYRO_SetFullScale+0x38>
 8003fee:	2306      	movs	r3, #6
 8003ff0:	e004      	b.n	8003ffc <LSM6DSO_GYRO_SetFullScale+0x38>
 8003ff2:	2302      	movs	r3, #2
 8003ff4:	e002      	b.n	8003ffc <LSM6DSO_GYRO_SetFullScale+0x38>
 8003ff6:	2300      	movs	r3, #0
 8003ff8:	e000      	b.n	8003ffc <LSM6DSO_GYRO_SetFullScale+0x38>
 8003ffa:	2301      	movs	r3, #1
  new_fs = (FullScale <= 125)  ? LSM6DSO_125dps
 8003ffc:	73fb      	strb	r3, [r7, #15]
           : (FullScale <= 500)  ? LSM6DSO_500dps
           : (FullScale <= 1000) ? LSM6DSO_1000dps
           :                       LSM6DSO_2000dps;

  if (lsm6dso_gy_full_scale_set(&(pObj->Ctx), new_fs) != LSM6DSO_OK)
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	3320      	adds	r3, #32
 8004002:	7bfa      	ldrb	r2, [r7, #15]
 8004004:	4611      	mov	r1, r2
 8004006:	4618      	mov	r0, r3
 8004008:	f000 fcfc 	bl	8004a04 <lsm6dso_gy_full_scale_set>
 800400c:	4603      	mov	r3, r0
 800400e:	2b00      	cmp	r3, #0
 8004010:	d002      	beq.n	8004018 <LSM6DSO_GYRO_SetFullScale+0x54>
  {
    return LSM6DSO_ERROR;
 8004012:	f04f 33ff 	mov.w	r3, #4294967295
 8004016:	e000      	b.n	800401a <LSM6DSO_GYRO_SetFullScale+0x56>
  }

  return LSM6DSO_OK;
 8004018:	2300      	movs	r3, #0
}
 800401a:	4618      	mov	r0, r3
 800401c:	3710      	adds	r7, #16
 800401e:	46bd      	mov	sp, r7
 8004020:	bd80      	pop	{r7, pc}

08004022 <LSM6DSO_GYRO_GetAxesRaw>:
  * @param  pObj the device pObj
  * @param  Value pointer where the raw values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_GYRO_GetAxesRaw(LSM6DSO_Object_t *pObj, LSM6DSO_AxesRaw_t *Value)
{
 8004022:	b580      	push	{r7, lr}
 8004024:	b084      	sub	sp, #16
 8004026:	af00      	add	r7, sp, #0
 8004028:	6078      	str	r0, [r7, #4]
 800402a:	6039      	str	r1, [r7, #0]
  lsm6dso_axis3bit16_t data_raw;

  /* Read raw data values. */
  if (lsm6dso_angular_rate_raw_get(&(pObj->Ctx), data_raw.i16bit) != LSM6DSO_OK)
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	3320      	adds	r3, #32
 8004030:	f107 0208 	add.w	r2, r7, #8
 8004034:	4611      	mov	r1, r2
 8004036:	4618      	mov	r0, r3
 8004038:	f000 fed0 	bl	8004ddc <lsm6dso_angular_rate_raw_get>
 800403c:	4603      	mov	r3, r0
 800403e:	2b00      	cmp	r3, #0
 8004040:	d002      	beq.n	8004048 <LSM6DSO_GYRO_GetAxesRaw+0x26>
  {
    return LSM6DSO_ERROR;
 8004042:	f04f 33ff 	mov.w	r3, #4294967295
 8004046:	e00c      	b.n	8004062 <LSM6DSO_GYRO_GetAxesRaw+0x40>
  }

  /* Format the data. */
  Value->x = data_raw.i16bit[0];
 8004048:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 800404c:	683b      	ldr	r3, [r7, #0]
 800404e:	801a      	strh	r2, [r3, #0]
  Value->y = data_raw.i16bit[1];
 8004050:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8004054:	683b      	ldr	r3, [r7, #0]
 8004056:	805a      	strh	r2, [r3, #2]
  Value->z = data_raw.i16bit[2];
 8004058:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 800405c:	683b      	ldr	r3, [r7, #0]
 800405e:	809a      	strh	r2, [r3, #4]

  return LSM6DSO_OK;
 8004060:	2300      	movs	r3, #0
}
 8004062:	4618      	mov	r0, r3
 8004064:	3710      	adds	r7, #16
 8004066:	46bd      	mov	sp, r7
 8004068:	bd80      	pop	{r7, pc}

0800406a <LSM6DSO_GYRO_GetAxes>:
  * @param  pObj the device pObj
  * @param  AngularRate pointer where the values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_GYRO_GetAxes(LSM6DSO_Object_t *pObj, LSM6DSO_Axes_t *AngularRate)
{
 800406a:	b580      	push	{r7, lr}
 800406c:	b086      	sub	sp, #24
 800406e:	af00      	add	r7, sp, #0
 8004070:	6078      	str	r0, [r7, #4]
 8004072:	6039      	str	r1, [r7, #0]
  lsm6dso_axis3bit16_t data_raw;
  float_t sensitivity;

  /* Read raw data values. */
  if (lsm6dso_angular_rate_raw_get(&(pObj->Ctx), data_raw.i16bit) != LSM6DSO_OK)
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	3320      	adds	r3, #32
 8004078:	f107 0210 	add.w	r2, r7, #16
 800407c:	4611      	mov	r1, r2
 800407e:	4618      	mov	r0, r3
 8004080:	f000 feac 	bl	8004ddc <lsm6dso_angular_rate_raw_get>
 8004084:	4603      	mov	r3, r0
 8004086:	2b00      	cmp	r3, #0
 8004088:	d002      	beq.n	8004090 <LSM6DSO_GYRO_GetAxes+0x26>
  {
    return LSM6DSO_ERROR;
 800408a:	f04f 33ff 	mov.w	r3, #4294967295
 800408e:	e03c      	b.n	800410a <LSM6DSO_GYRO_GetAxes+0xa0>
  }

  /* Get LSM6DSO actual sensitivity. */
  if (LSM6DSO_GYRO_GetSensitivity(pObj, &sensitivity) != LSM6DSO_OK)
 8004090:	f107 030c 	add.w	r3, r7, #12
 8004094:	4619      	mov	r1, r3
 8004096:	6878      	ldr	r0, [r7, #4]
 8004098:	f7ff fdd4 	bl	8003c44 <LSM6DSO_GYRO_GetSensitivity>
 800409c:	4603      	mov	r3, r0
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d002      	beq.n	80040a8 <LSM6DSO_GYRO_GetAxes+0x3e>
  {
    return LSM6DSO_ERROR;
 80040a2:	f04f 33ff 	mov.w	r3, #4294967295
 80040a6:	e030      	b.n	800410a <LSM6DSO_GYRO_GetAxes+0xa0>
  }

  /* Calculate the data. */
  AngularRate->x = (int32_t)((float_t)((float_t)data_raw.i16bit[0] * sensitivity));
 80040a8:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80040ac:	ee07 3a90 	vmov	s15, r3
 80040b0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80040b4:	edd7 7a03 	vldr	s15, [r7, #12]
 80040b8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80040bc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80040c0:	ee17 2a90 	vmov	r2, s15
 80040c4:	683b      	ldr	r3, [r7, #0]
 80040c6:	601a      	str	r2, [r3, #0]
  AngularRate->y = (int32_t)((float_t)((float_t)data_raw.i16bit[1] * sensitivity));
 80040c8:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80040cc:	ee07 3a90 	vmov	s15, r3
 80040d0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80040d4:	edd7 7a03 	vldr	s15, [r7, #12]
 80040d8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80040dc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80040e0:	ee17 2a90 	vmov	r2, s15
 80040e4:	683b      	ldr	r3, [r7, #0]
 80040e6:	605a      	str	r2, [r3, #4]
  AngularRate->z = (int32_t)((float_t)((float_t)data_raw.i16bit[2] * sensitivity));
 80040e8:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80040ec:	ee07 3a90 	vmov	s15, r3
 80040f0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80040f4:	edd7 7a03 	vldr	s15, [r7, #12]
 80040f8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80040fc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004100:	ee17 2a90 	vmov	r2, s15
 8004104:	683b      	ldr	r3, [r7, #0]
 8004106:	609a      	str	r2, [r3, #8]

  return LSM6DSO_OK;
 8004108:	2300      	movs	r3, #0
}
 800410a:	4618      	mov	r0, r3
 800410c:	3718      	adds	r7, #24
 800410e:	46bd      	mov	sp, r7
 8004110:	bd80      	pop	{r7, pc}

08004112 <LSM6DSO_Write_Reg>:
  * @param  Reg address to be written
  * @param  Data value to be written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_Write_Reg(LSM6DSO_Object_t *pObj, uint8_t Reg, uint8_t Data)
{
 8004112:	b580      	push	{r7, lr}
 8004114:	b082      	sub	sp, #8
 8004116:	af00      	add	r7, sp, #0
 8004118:	6078      	str	r0, [r7, #4]
 800411a:	460b      	mov	r3, r1
 800411c:	70fb      	strb	r3, [r7, #3]
 800411e:	4613      	mov	r3, r2
 8004120:	70bb      	strb	r3, [r7, #2]
  if (lsm6dso_write_reg(&(pObj->Ctx), Reg, &Data, 1) != LSM6DSO_OK)
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	f103 0020 	add.w	r0, r3, #32
 8004128:	1cba      	adds	r2, r7, #2
 800412a:	78f9      	ldrb	r1, [r7, #3]
 800412c:	2301      	movs	r3, #1
 800412e:	f000 fa8f 	bl	8004650 <lsm6dso_write_reg>
 8004132:	4603      	mov	r3, r0
 8004134:	2b00      	cmp	r3, #0
 8004136:	d002      	beq.n	800413e <LSM6DSO_Write_Reg+0x2c>
  {
    return LSM6DSO_ERROR;
 8004138:	f04f 33ff 	mov.w	r3, #4294967295
 800413c:	e000      	b.n	8004140 <LSM6DSO_Write_Reg+0x2e>
  }

  return LSM6DSO_OK;
 800413e:	2300      	movs	r3, #0
}
 8004140:	4618      	mov	r0, r3
 8004142:	3708      	adds	r7, #8
 8004144:	46bd      	mov	sp, r7
 8004146:	bd80      	pop	{r7, pc}

08004148 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled>:
  * @param  pObj the device pObj
  * @param  Odr the functional output data rate to be set
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LSM6DSO_ACC_SetOutputDataRate_When_Enabled(LSM6DSO_Object_t *pObj, float_t Odr)
{
 8004148:	b580      	push	{r7, lr}
 800414a:	b084      	sub	sp, #16
 800414c:	af00      	add	r7, sp, #0
 800414e:	6078      	str	r0, [r7, #4]
 8004150:	ed87 0a00 	vstr	s0, [r7]
  lsm6dso_odr_xl_t new_odr;

  new_odr = (Odr <=    1.6f) ? LSM6DSO_XL_ODR_1Hz6
            : (Odr <=   12.5f) ? LSM6DSO_XL_ODR_12Hz5
 8004154:	edd7 7a00 	vldr	s15, [r7]
 8004158:	ed9f 7a3f 	vldr	s14, [pc, #252]	; 8004258 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x110>
 800415c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004160:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004164:	d801      	bhi.n	800416a <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x22>
 8004166:	230b      	movs	r3, #11
 8004168:	e063      	b.n	8004232 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xea>
 800416a:	edd7 7a00 	vldr	s15, [r7]
 800416e:	eeb2 7a09 	vmov.f32	s14, #41	; 0x41480000  12.5
 8004172:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004176:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800417a:	d801      	bhi.n	8004180 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x38>
 800417c:	2301      	movs	r3, #1
 800417e:	e058      	b.n	8004232 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xea>
 8004180:	edd7 7a00 	vldr	s15, [r7]
 8004184:	eeb3 7a0a 	vmov.f32	s14, #58	; 0x41d00000  26.0
 8004188:	eef4 7ac7 	vcmpe.f32	s15, s14
 800418c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004190:	d801      	bhi.n	8004196 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x4e>
 8004192:	2302      	movs	r3, #2
 8004194:	e04d      	b.n	8004232 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xea>
 8004196:	edd7 7a00 	vldr	s15, [r7]
 800419a:	ed9f 7a30 	vldr	s14, [pc, #192]	; 800425c <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x114>
 800419e:	eef4 7ac7 	vcmpe.f32	s15, s14
 80041a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80041a6:	d801      	bhi.n	80041ac <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x64>
 80041a8:	2303      	movs	r3, #3
 80041aa:	e042      	b.n	8004232 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xea>
 80041ac:	edd7 7a00 	vldr	s15, [r7]
 80041b0:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 8004260 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x118>
 80041b4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80041b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80041bc:	d801      	bhi.n	80041c2 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x7a>
 80041be:	2304      	movs	r3, #4
 80041c0:	e037      	b.n	8004232 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xea>
 80041c2:	edd7 7a00 	vldr	s15, [r7]
 80041c6:	ed9f 7a27 	vldr	s14, [pc, #156]	; 8004264 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x11c>
 80041ca:	eef4 7ac7 	vcmpe.f32	s15, s14
 80041ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80041d2:	d801      	bhi.n	80041d8 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x90>
 80041d4:	2305      	movs	r3, #5
 80041d6:	e02c      	b.n	8004232 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xea>
 80041d8:	edd7 7a00 	vldr	s15, [r7]
 80041dc:	ed9f 7a22 	vldr	s14, [pc, #136]	; 8004268 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x120>
 80041e0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80041e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80041e8:	d801      	bhi.n	80041ee <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xa6>
 80041ea:	2306      	movs	r3, #6
 80041ec:	e021      	b.n	8004232 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xea>
 80041ee:	edd7 7a00 	vldr	s15, [r7]
 80041f2:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 800426c <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x124>
 80041f6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80041fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80041fe:	d801      	bhi.n	8004204 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xbc>
 8004200:	2307      	movs	r3, #7
 8004202:	e016      	b.n	8004232 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xea>
 8004204:	edd7 7a00 	vldr	s15, [r7]
 8004208:	ed9f 7a19 	vldr	s14, [pc, #100]	; 8004270 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x128>
 800420c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004210:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004214:	d801      	bhi.n	800421a <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xd2>
 8004216:	2308      	movs	r3, #8
 8004218:	e00b      	b.n	8004232 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xea>
 800421a:	edd7 7a00 	vldr	s15, [r7]
 800421e:	ed9f 7a15 	vldr	s14, [pc, #84]	; 8004274 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x12c>
 8004222:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004226:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800422a:	d801      	bhi.n	8004230 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xe8>
 800422c:	2309      	movs	r3, #9
 800422e:	e000      	b.n	8004232 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xea>
 8004230:	230a      	movs	r3, #10
  new_odr = (Odr <=    1.6f) ? LSM6DSO_XL_ODR_1Hz6
 8004232:	73fb      	strb	r3, [r7, #15]
            : (Odr <= 1667.0f) ? LSM6DSO_XL_ODR_1667Hz
            : (Odr <= 3333.0f) ? LSM6DSO_XL_ODR_3333Hz
            :                    LSM6DSO_XL_ODR_6667Hz;

  /* Output data rate selection. */
  if (lsm6dso_xl_data_rate_set(&(pObj->Ctx), new_odr) != LSM6DSO_OK)
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	3320      	adds	r3, #32
 8004238:	7bfa      	ldrb	r2, [r7, #15]
 800423a:	4611      	mov	r1, r2
 800423c:	4618      	mov	r0, r3
 800423e:	f000 fa7d 	bl	800473c <lsm6dso_xl_data_rate_set>
 8004242:	4603      	mov	r3, r0
 8004244:	2b00      	cmp	r3, #0
 8004246:	d002      	beq.n	800424e <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x106>
  {
    return LSM6DSO_ERROR;
 8004248:	f04f 33ff 	mov.w	r3, #4294967295
 800424c:	e000      	b.n	8004250 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x108>
  }

  return LSM6DSO_OK;
 800424e:	2300      	movs	r3, #0
}
 8004250:	4618      	mov	r0, r3
 8004252:	3710      	adds	r7, #16
 8004254:	46bd      	mov	sp, r7
 8004256:	bd80      	pop	{r7, pc}
 8004258:	3fcccccd 	.word	0x3fcccccd
 800425c:	42500000 	.word	0x42500000
 8004260:	42d00000 	.word	0x42d00000
 8004264:	43500000 	.word	0x43500000
 8004268:	43d08000 	.word	0x43d08000
 800426c:	44504000 	.word	0x44504000
 8004270:	44d06000 	.word	0x44d06000
 8004274:	45505000 	.word	0x45505000

08004278 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled>:
  * @param  pObj the device pObj
  * @param  Odr the functional output data rate to be set
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LSM6DSO_ACC_SetOutputDataRate_When_Disabled(LSM6DSO_Object_t *pObj, float_t Odr)
{
 8004278:	b480      	push	{r7}
 800427a:	b083      	sub	sp, #12
 800427c:	af00      	add	r7, sp, #0
 800427e:	6078      	str	r0, [r7, #4]
 8004280:	ed87 0a00 	vstr	s0, [r7]
  pObj->acc_odr = (Odr <=    1.6f) ? LSM6DSO_XL_ODR_1Hz6
                  : (Odr <=   12.5f) ? LSM6DSO_XL_ODR_12Hz5
 8004284:	edd7 7a00 	vldr	s15, [r7]
 8004288:	ed9f 7a3b 	vldr	s14, [pc, #236]	; 8004378 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x100>
 800428c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004290:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004294:	d801      	bhi.n	800429a <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x22>
 8004296:	230b      	movs	r3, #11
 8004298:	e063      	b.n	8004362 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xea>
 800429a:	edd7 7a00 	vldr	s15, [r7]
 800429e:	eeb2 7a09 	vmov.f32	s14, #41	; 0x41480000  12.5
 80042a2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80042a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80042aa:	d801      	bhi.n	80042b0 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x38>
 80042ac:	2301      	movs	r3, #1
 80042ae:	e058      	b.n	8004362 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xea>
 80042b0:	edd7 7a00 	vldr	s15, [r7]
 80042b4:	eeb3 7a0a 	vmov.f32	s14, #58	; 0x41d00000  26.0
 80042b8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80042bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80042c0:	d801      	bhi.n	80042c6 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x4e>
 80042c2:	2302      	movs	r3, #2
 80042c4:	e04d      	b.n	8004362 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xea>
 80042c6:	edd7 7a00 	vldr	s15, [r7]
 80042ca:	ed9f 7a2c 	vldr	s14, [pc, #176]	; 800437c <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x104>
 80042ce:	eef4 7ac7 	vcmpe.f32	s15, s14
 80042d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80042d6:	d801      	bhi.n	80042dc <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x64>
 80042d8:	2303      	movs	r3, #3
 80042da:	e042      	b.n	8004362 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xea>
 80042dc:	edd7 7a00 	vldr	s15, [r7]
 80042e0:	ed9f 7a27 	vldr	s14, [pc, #156]	; 8004380 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x108>
 80042e4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80042e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80042ec:	d801      	bhi.n	80042f2 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x7a>
 80042ee:	2304      	movs	r3, #4
 80042f0:	e037      	b.n	8004362 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xea>
 80042f2:	edd7 7a00 	vldr	s15, [r7]
 80042f6:	ed9f 7a23 	vldr	s14, [pc, #140]	; 8004384 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x10c>
 80042fa:	eef4 7ac7 	vcmpe.f32	s15, s14
 80042fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004302:	d801      	bhi.n	8004308 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x90>
 8004304:	2305      	movs	r3, #5
 8004306:	e02c      	b.n	8004362 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xea>
 8004308:	edd7 7a00 	vldr	s15, [r7]
 800430c:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 8004388 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x110>
 8004310:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004314:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004318:	d801      	bhi.n	800431e <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xa6>
 800431a:	2306      	movs	r3, #6
 800431c:	e021      	b.n	8004362 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xea>
 800431e:	edd7 7a00 	vldr	s15, [r7]
 8004322:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 800438c <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x114>
 8004326:	eef4 7ac7 	vcmpe.f32	s15, s14
 800432a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800432e:	d801      	bhi.n	8004334 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xbc>
 8004330:	2307      	movs	r3, #7
 8004332:	e016      	b.n	8004362 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xea>
 8004334:	edd7 7a00 	vldr	s15, [r7]
 8004338:	ed9f 7a15 	vldr	s14, [pc, #84]	; 8004390 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x118>
 800433c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004340:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004344:	d801      	bhi.n	800434a <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xd2>
 8004346:	2308      	movs	r3, #8
 8004348:	e00b      	b.n	8004362 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xea>
 800434a:	edd7 7a00 	vldr	s15, [r7]
 800434e:	ed9f 7a11 	vldr	s14, [pc, #68]	; 8004394 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x11c>
 8004352:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004356:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800435a:	d801      	bhi.n	8004360 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xe8>
 800435c:	2309      	movs	r3, #9
 800435e:	e000      	b.n	8004362 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xea>
 8004360:	230a      	movs	r3, #10
  pObj->acc_odr = (Odr <=    1.6f) ? LSM6DSO_XL_ODR_1Hz6
 8004362:	687a      	ldr	r2, [r7, #4]
 8004364:	f882 3033 	strb.w	r3, [r2, #51]	; 0x33
                  : (Odr <=  833.0f) ? LSM6DSO_XL_ODR_833Hz
                  : (Odr <= 1667.0f) ? LSM6DSO_XL_ODR_1667Hz
                  : (Odr <= 3333.0f) ? LSM6DSO_XL_ODR_3333Hz
                  :                    LSM6DSO_XL_ODR_6667Hz;

  return LSM6DSO_OK;
 8004368:	2300      	movs	r3, #0
}
 800436a:	4618      	mov	r0, r3
 800436c:	370c      	adds	r7, #12
 800436e:	46bd      	mov	sp, r7
 8004370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004374:	4770      	bx	lr
 8004376:	bf00      	nop
 8004378:	3fcccccd 	.word	0x3fcccccd
 800437c:	42500000 	.word	0x42500000
 8004380:	42d00000 	.word	0x42d00000
 8004384:	43500000 	.word	0x43500000
 8004388:	43d08000 	.word	0x43d08000
 800438c:	44504000 	.word	0x44504000
 8004390:	44d06000 	.word	0x44d06000
 8004394:	45505000 	.word	0x45505000

08004398 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled>:
  * @param  pObj the device pObj
  * @param  Odr the functional output data rate to be set
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LSM6DSO_GYRO_SetOutputDataRate_When_Enabled(LSM6DSO_Object_t *pObj, float_t Odr)
{
 8004398:	b580      	push	{r7, lr}
 800439a:	b084      	sub	sp, #16
 800439c:	af00      	add	r7, sp, #0
 800439e:	6078      	str	r0, [r7, #4]
 80043a0:	ed87 0a00 	vstr	s0, [r7]
  lsm6dso_odr_g_t new_odr;

  new_odr = (Odr <=   12.5f) ? LSM6DSO_GY_ODR_12Hz5
            : (Odr <=   26.0f) ? LSM6DSO_GY_ODR_26Hz
 80043a4:	edd7 7a00 	vldr	s15, [r7]
 80043a8:	eeb2 7a09 	vmov.f32	s14, #41	; 0x41480000  12.5
 80043ac:	eef4 7ac7 	vcmpe.f32	s15, s14
 80043b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80043b4:	d801      	bhi.n	80043ba <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x22>
 80043b6:	2301      	movs	r3, #1
 80043b8:	e058      	b.n	800446c <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 80043ba:	edd7 7a00 	vldr	s15, [r7]
 80043be:	eeb3 7a0a 	vmov.f32	s14, #58	; 0x41d00000  26.0
 80043c2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80043c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80043ca:	d801      	bhi.n	80043d0 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x38>
 80043cc:	2302      	movs	r3, #2
 80043ce:	e04d      	b.n	800446c <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 80043d0:	edd7 7a00 	vldr	s15, [r7]
 80043d4:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 8004494 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xfc>
 80043d8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80043dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80043e0:	d801      	bhi.n	80043e6 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x4e>
 80043e2:	2303      	movs	r3, #3
 80043e4:	e042      	b.n	800446c <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 80043e6:	edd7 7a00 	vldr	s15, [r7]
 80043ea:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 8004498 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x100>
 80043ee:	eef4 7ac7 	vcmpe.f32	s15, s14
 80043f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80043f6:	d801      	bhi.n	80043fc <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x64>
 80043f8:	2304      	movs	r3, #4
 80043fa:	e037      	b.n	800446c <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 80043fc:	edd7 7a00 	vldr	s15, [r7]
 8004400:	ed9f 7a26 	vldr	s14, [pc, #152]	; 800449c <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x104>
 8004404:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004408:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800440c:	d801      	bhi.n	8004412 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x7a>
 800440e:	2305      	movs	r3, #5
 8004410:	e02c      	b.n	800446c <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 8004412:	edd7 7a00 	vldr	s15, [r7]
 8004416:	ed9f 7a22 	vldr	s14, [pc, #136]	; 80044a0 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x108>
 800441a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800441e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004422:	d801      	bhi.n	8004428 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x90>
 8004424:	2306      	movs	r3, #6
 8004426:	e021      	b.n	800446c <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 8004428:	edd7 7a00 	vldr	s15, [r7]
 800442c:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 80044a4 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x10c>
 8004430:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004434:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004438:	d801      	bhi.n	800443e <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xa6>
 800443a:	2307      	movs	r3, #7
 800443c:	e016      	b.n	800446c <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 800443e:	edd7 7a00 	vldr	s15, [r7]
 8004442:	ed9f 7a19 	vldr	s14, [pc, #100]	; 80044a8 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x110>
 8004446:	eef4 7ac7 	vcmpe.f32	s15, s14
 800444a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800444e:	d801      	bhi.n	8004454 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xbc>
 8004450:	2308      	movs	r3, #8
 8004452:	e00b      	b.n	800446c <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 8004454:	edd7 7a00 	vldr	s15, [r7]
 8004458:	ed9f 7a14 	vldr	s14, [pc, #80]	; 80044ac <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x114>
 800445c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004460:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004464:	d801      	bhi.n	800446a <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xd2>
 8004466:	2309      	movs	r3, #9
 8004468:	e000      	b.n	800446c <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 800446a:	230a      	movs	r3, #10
  new_odr = (Odr <=   12.5f) ? LSM6DSO_GY_ODR_12Hz5
 800446c:	73fb      	strb	r3, [r7, #15]
            : (Odr <= 1667.0f) ? LSM6DSO_GY_ODR_1667Hz
            : (Odr <= 3333.0f) ? LSM6DSO_GY_ODR_3333Hz
            :                    LSM6DSO_GY_ODR_6667Hz;

  /* Output data rate selection. */
  if (lsm6dso_gy_data_rate_set(&(pObj->Ctx), new_odr) != LSM6DSO_OK)
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	3320      	adds	r3, #32
 8004472:	7bfa      	ldrb	r2, [r7, #15]
 8004474:	4611      	mov	r1, r2
 8004476:	4618      	mov	r0, r3
 8004478:	f000 fb2c 	bl	8004ad4 <lsm6dso_gy_data_rate_set>
 800447c:	4603      	mov	r3, r0
 800447e:	2b00      	cmp	r3, #0
 8004480:	d002      	beq.n	8004488 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xf0>
  {
    return LSM6DSO_ERROR;
 8004482:	f04f 33ff 	mov.w	r3, #4294967295
 8004486:	e000      	b.n	800448a <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xf2>
  }

  return LSM6DSO_OK;
 8004488:	2300      	movs	r3, #0
}
 800448a:	4618      	mov	r0, r3
 800448c:	3710      	adds	r7, #16
 800448e:	46bd      	mov	sp, r7
 8004490:	bd80      	pop	{r7, pc}
 8004492:	bf00      	nop
 8004494:	42500000 	.word	0x42500000
 8004498:	42d00000 	.word	0x42d00000
 800449c:	43500000 	.word	0x43500000
 80044a0:	43d08000 	.word	0x43d08000
 80044a4:	44504000 	.word	0x44504000
 80044a8:	44d06000 	.word	0x44d06000
 80044ac:	45505000 	.word	0x45505000

080044b0 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled>:
  * @param  pObj the device pObj
  * @param  Odr the functional output data rate to be set
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LSM6DSO_GYRO_SetOutputDataRate_When_Disabled(LSM6DSO_Object_t *pObj, float_t Odr)
{
 80044b0:	b480      	push	{r7}
 80044b2:	b083      	sub	sp, #12
 80044b4:	af00      	add	r7, sp, #0
 80044b6:	6078      	str	r0, [r7, #4]
 80044b8:	ed87 0a00 	vstr	s0, [r7]
  pObj->gyro_odr = (Odr <=   12.5f) ? LSM6DSO_GY_ODR_12Hz5
                   : (Odr <=   26.0f) ? LSM6DSO_GY_ODR_26Hz
 80044bc:	edd7 7a00 	vldr	s15, [r7]
 80044c0:	eeb2 7a09 	vmov.f32	s14, #41	; 0x41480000  12.5
 80044c4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80044c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80044cc:	d801      	bhi.n	80044d2 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0x22>
 80044ce:	2301      	movs	r3, #1
 80044d0:	e058      	b.n	8004584 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 80044d2:	edd7 7a00 	vldr	s15, [r7]
 80044d6:	eeb3 7a0a 	vmov.f32	s14, #58	; 0x41d00000  26.0
 80044da:	eef4 7ac7 	vcmpe.f32	s15, s14
 80044de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80044e2:	d801      	bhi.n	80044e8 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0x38>
 80044e4:	2302      	movs	r3, #2
 80044e6:	e04d      	b.n	8004584 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 80044e8:	edd7 7a00 	vldr	s15, [r7]
 80044ec:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 8004598 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xe8>
 80044f0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80044f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80044f8:	d801      	bhi.n	80044fe <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0x4e>
 80044fa:	2303      	movs	r3, #3
 80044fc:	e042      	b.n	8004584 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 80044fe:	edd7 7a00 	vldr	s15, [r7]
 8004502:	ed9f 7a26 	vldr	s14, [pc, #152]	; 800459c <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xec>
 8004506:	eef4 7ac7 	vcmpe.f32	s15, s14
 800450a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800450e:	d801      	bhi.n	8004514 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0x64>
 8004510:	2304      	movs	r3, #4
 8004512:	e037      	b.n	8004584 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 8004514:	edd7 7a00 	vldr	s15, [r7]
 8004518:	ed9f 7a21 	vldr	s14, [pc, #132]	; 80045a0 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xf0>
 800451c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004520:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004524:	d801      	bhi.n	800452a <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0x7a>
 8004526:	2305      	movs	r3, #5
 8004528:	e02c      	b.n	8004584 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 800452a:	edd7 7a00 	vldr	s15, [r7]
 800452e:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 80045a4 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xf4>
 8004532:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004536:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800453a:	d801      	bhi.n	8004540 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0x90>
 800453c:	2306      	movs	r3, #6
 800453e:	e021      	b.n	8004584 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 8004540:	edd7 7a00 	vldr	s15, [r7]
 8004544:	ed9f 7a18 	vldr	s14, [pc, #96]	; 80045a8 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xf8>
 8004548:	eef4 7ac7 	vcmpe.f32	s15, s14
 800454c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004550:	d801      	bhi.n	8004556 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xa6>
 8004552:	2307      	movs	r3, #7
 8004554:	e016      	b.n	8004584 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 8004556:	edd7 7a00 	vldr	s15, [r7]
 800455a:	ed9f 7a14 	vldr	s14, [pc, #80]	; 80045ac <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xfc>
 800455e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004562:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004566:	d801      	bhi.n	800456c <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xbc>
 8004568:	2308      	movs	r3, #8
 800456a:	e00b      	b.n	8004584 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 800456c:	edd7 7a00 	vldr	s15, [r7]
 8004570:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 80045b0 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0x100>
 8004574:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004578:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800457c:	d801      	bhi.n	8004582 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xd2>
 800457e:	2309      	movs	r3, #9
 8004580:	e000      	b.n	8004584 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 8004582:	230a      	movs	r3, #10
  pObj->gyro_odr = (Odr <=   12.5f) ? LSM6DSO_GY_ODR_12Hz5
 8004584:	687a      	ldr	r2, [r7, #4]
 8004586:	f882 3034 	strb.w	r3, [r2, #52]	; 0x34
                   : (Odr <=  833.0f) ? LSM6DSO_GY_ODR_833Hz
                   : (Odr <= 1667.0f) ? LSM6DSO_GY_ODR_1667Hz
                   : (Odr <= 3333.0f) ? LSM6DSO_GY_ODR_3333Hz
                   :                    LSM6DSO_GY_ODR_6667Hz;

  return LSM6DSO_OK;
 800458a:	2300      	movs	r3, #0
}
 800458c:	4618      	mov	r0, r3
 800458e:	370c      	adds	r7, #12
 8004590:	46bd      	mov	sp, r7
 8004592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004596:	4770      	bx	lr
 8004598:	42500000 	.word	0x42500000
 800459c:	42d00000 	.word	0x42d00000
 80045a0:	43500000 	.word	0x43500000
 80045a4:	43d08000 	.word	0x43d08000
 80045a8:	44504000 	.word	0x44504000
 80045ac:	44d06000 	.word	0x44d06000
 80045b0:	45505000 	.word	0x45505000

080045b4 <ReadRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t ReadRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 80045b4:	b590      	push	{r4, r7, lr}
 80045b6:	b087      	sub	sp, #28
 80045b8:	af00      	add	r7, sp, #0
 80045ba:	60f8      	str	r0, [r7, #12]
 80045bc:	607a      	str	r2, [r7, #4]
 80045be:	461a      	mov	r2, r3
 80045c0:	460b      	mov	r3, r1
 80045c2:	72fb      	strb	r3, [r7, #11]
 80045c4:	4613      	mov	r3, r2
 80045c6:	813b      	strh	r3, [r7, #8]
  LSM6DSO_Object_t *pObj = (LSM6DSO_Object_t *)Handle;
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	617b      	str	r3, [r7, #20]

  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 80045cc:	697b      	ldr	r3, [r7, #20]
 80045ce:	695c      	ldr	r4, [r3, #20]
 80045d0:	697b      	ldr	r3, [r7, #20]
 80045d2:	7b1b      	ldrb	r3, [r3, #12]
 80045d4:	b298      	uxth	r0, r3
 80045d6:	7afb      	ldrb	r3, [r7, #11]
 80045d8:	b299      	uxth	r1, r3
 80045da:	893b      	ldrh	r3, [r7, #8]
 80045dc:	687a      	ldr	r2, [r7, #4]
 80045de:	47a0      	blx	r4
 80045e0:	4603      	mov	r3, r0
}
 80045e2:	4618      	mov	r0, r3
 80045e4:	371c      	adds	r7, #28
 80045e6:	46bd      	mov	sp, r7
 80045e8:	bd90      	pop	{r4, r7, pc}

080045ea <WriteRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t WriteRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 80045ea:	b590      	push	{r4, r7, lr}
 80045ec:	b087      	sub	sp, #28
 80045ee:	af00      	add	r7, sp, #0
 80045f0:	60f8      	str	r0, [r7, #12]
 80045f2:	607a      	str	r2, [r7, #4]
 80045f4:	461a      	mov	r2, r3
 80045f6:	460b      	mov	r3, r1
 80045f8:	72fb      	strb	r3, [r7, #11]
 80045fa:	4613      	mov	r3, r2
 80045fc:	813b      	strh	r3, [r7, #8]
  LSM6DSO_Object_t *pObj = (LSM6DSO_Object_t *)Handle;
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	617b      	str	r3, [r7, #20]

  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 8004602:	697b      	ldr	r3, [r7, #20]
 8004604:	691c      	ldr	r4, [r3, #16]
 8004606:	697b      	ldr	r3, [r7, #20]
 8004608:	7b1b      	ldrb	r3, [r3, #12]
 800460a:	b298      	uxth	r0, r3
 800460c:	7afb      	ldrb	r3, [r7, #11]
 800460e:	b299      	uxth	r1, r3
 8004610:	893b      	ldrh	r3, [r7, #8]
 8004612:	687a      	ldr	r2, [r7, #4]
 8004614:	47a0      	blx	r4
 8004616:	4603      	mov	r3, r0
}
 8004618:	4618      	mov	r0, r3
 800461a:	371c      	adds	r7, #28
 800461c:	46bd      	mov	sp, r7
 800461e:	bd90      	pop	{r4, r7, pc}

08004620 <lsm6dso_read_reg>:
  *
  */
int32_t __weak lsm6dso_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                                uint8_t *data,
                                uint16_t len)
{
 8004620:	b590      	push	{r4, r7, lr}
 8004622:	b087      	sub	sp, #28
 8004624:	af00      	add	r7, sp, #0
 8004626:	60f8      	str	r0, [r7, #12]
 8004628:	607a      	str	r2, [r7, #4]
 800462a:	461a      	mov	r2, r3
 800462c:	460b      	mov	r3, r1
 800462e:	72fb      	strb	r3, [r7, #11]
 8004630:	4613      	mov	r3, r2
 8004632:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	685c      	ldr	r4, [r3, #4]
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	68d8      	ldr	r0, [r3, #12]
 800463c:	893b      	ldrh	r3, [r7, #8]
 800463e:	7af9      	ldrb	r1, [r7, #11]
 8004640:	687a      	ldr	r2, [r7, #4]
 8004642:	47a0      	blx	r4
 8004644:	6178      	str	r0, [r7, #20]

  return ret;
 8004646:	697b      	ldr	r3, [r7, #20]
}
 8004648:	4618      	mov	r0, r3
 800464a:	371c      	adds	r7, #28
 800464c:	46bd      	mov	sp, r7
 800464e:	bd90      	pop	{r4, r7, pc}

08004650 <lsm6dso_write_reg>:
  *
  */
int32_t __weak lsm6dso_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                                 uint8_t *data,
                                 uint16_t len)
{
 8004650:	b590      	push	{r4, r7, lr}
 8004652:	b087      	sub	sp, #28
 8004654:	af00      	add	r7, sp, #0
 8004656:	60f8      	str	r0, [r7, #12]
 8004658:	607a      	str	r2, [r7, #4]
 800465a:	461a      	mov	r2, r3
 800465c:	460b      	mov	r3, r1
 800465e:	72fb      	strb	r3, [r7, #11]
 8004660:	4613      	mov	r3, r2
 8004662:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	681c      	ldr	r4, [r3, #0]
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	68d8      	ldr	r0, [r3, #12]
 800466c:	893b      	ldrh	r3, [r7, #8]
 800466e:	7af9      	ldrb	r1, [r7, #11]
 8004670:	687a      	ldr	r2, [r7, #4]
 8004672:	47a0      	blx	r4
 8004674:	6178      	str	r0, [r7, #20]

  return ret;
 8004676:	697b      	ldr	r3, [r7, #20]
}
 8004678:	4618      	mov	r0, r3
 800467a:	371c      	adds	r7, #28
 800467c:	46bd      	mov	sp, r7
 800467e:	bd90      	pop	{r4, r7, pc}

08004680 <lsm6dso_xl_full_scale_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_xl_full_scale_set(stmdev_ctx_t *ctx,
                                  lsm6dso_fs_xl_t val)
{
 8004680:	b580      	push	{r7, lr}
 8004682:	b084      	sub	sp, #16
 8004684:	af00      	add	r7, sp, #0
 8004686:	6078      	str	r0, [r7, #4]
 8004688:	460b      	mov	r3, r1
 800468a:	70fb      	strb	r3, [r7, #3]
  lsm6dso_ctrl1_xl_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL1_XL, (uint8_t *)&reg, 1);
 800468c:	f107 0208 	add.w	r2, r7, #8
 8004690:	2301      	movs	r3, #1
 8004692:	2110      	movs	r1, #16
 8004694:	6878      	ldr	r0, [r7, #4]
 8004696:	f7ff ffc3 	bl	8004620 <lsm6dso_read_reg>
 800469a:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d10f      	bne.n	80046c2 <lsm6dso_xl_full_scale_set+0x42>
  {
    reg.fs_xl = (uint8_t) val;
 80046a2:	78fb      	ldrb	r3, [r7, #3]
 80046a4:	f003 0303 	and.w	r3, r3, #3
 80046a8:	b2da      	uxtb	r2, r3
 80046aa:	7a3b      	ldrb	r3, [r7, #8]
 80046ac:	f362 0383 	bfi	r3, r2, #2, #2
 80046b0:	723b      	strb	r3, [r7, #8]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL1_XL, (uint8_t *)&reg, 1);
 80046b2:	f107 0208 	add.w	r2, r7, #8
 80046b6:	2301      	movs	r3, #1
 80046b8:	2110      	movs	r1, #16
 80046ba:	6878      	ldr	r0, [r7, #4]
 80046bc:	f7ff ffc8 	bl	8004650 <lsm6dso_write_reg>
 80046c0:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80046c2:	68fb      	ldr	r3, [r7, #12]
}
 80046c4:	4618      	mov	r0, r3
 80046c6:	3710      	adds	r7, #16
 80046c8:	46bd      	mov	sp, r7
 80046ca:	bd80      	pop	{r7, pc}

080046cc <lsm6dso_xl_full_scale_get>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_xl_full_scale_get(stmdev_ctx_t *ctx,
                                  lsm6dso_fs_xl_t *val)
{
 80046cc:	b580      	push	{r7, lr}
 80046ce:	b084      	sub	sp, #16
 80046d0:	af00      	add	r7, sp, #0
 80046d2:	6078      	str	r0, [r7, #4]
 80046d4:	6039      	str	r1, [r7, #0]
  lsm6dso_ctrl1_xl_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL1_XL, (uint8_t *)&reg, 1);
 80046d6:	f107 0208 	add.w	r2, r7, #8
 80046da:	2301      	movs	r3, #1
 80046dc:	2110      	movs	r1, #16
 80046de:	6878      	ldr	r0, [r7, #4]
 80046e0:	f7ff ff9e 	bl	8004620 <lsm6dso_read_reg>
 80046e4:	60f8      	str	r0, [r7, #12]

  switch (reg.fs_xl)
 80046e6:	7a3b      	ldrb	r3, [r7, #8]
 80046e8:	f3c3 0381 	ubfx	r3, r3, #2, #2
 80046ec:	b2db      	uxtb	r3, r3
 80046ee:	2b03      	cmp	r3, #3
 80046f0:	d81a      	bhi.n	8004728 <lsm6dso_xl_full_scale_get+0x5c>
 80046f2:	a201      	add	r2, pc, #4	; (adr r2, 80046f8 <lsm6dso_xl_full_scale_get+0x2c>)
 80046f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80046f8:	08004709 	.word	0x08004709
 80046fc:	08004711 	.word	0x08004711
 8004700:	08004719 	.word	0x08004719
 8004704:	08004721 	.word	0x08004721
  {
    case LSM6DSO_2g:
      *val = LSM6DSO_2g;
 8004708:	683b      	ldr	r3, [r7, #0]
 800470a:	2200      	movs	r2, #0
 800470c:	701a      	strb	r2, [r3, #0]
      break;
 800470e:	e00f      	b.n	8004730 <lsm6dso_xl_full_scale_get+0x64>

    case LSM6DSO_16g:
      *val = LSM6DSO_16g;
 8004710:	683b      	ldr	r3, [r7, #0]
 8004712:	2201      	movs	r2, #1
 8004714:	701a      	strb	r2, [r3, #0]
      break;
 8004716:	e00b      	b.n	8004730 <lsm6dso_xl_full_scale_get+0x64>

    case LSM6DSO_4g:
      *val = LSM6DSO_4g;
 8004718:	683b      	ldr	r3, [r7, #0]
 800471a:	2202      	movs	r2, #2
 800471c:	701a      	strb	r2, [r3, #0]
      break;
 800471e:	e007      	b.n	8004730 <lsm6dso_xl_full_scale_get+0x64>

    case LSM6DSO_8g:
      *val = LSM6DSO_8g;
 8004720:	683b      	ldr	r3, [r7, #0]
 8004722:	2203      	movs	r2, #3
 8004724:	701a      	strb	r2, [r3, #0]
      break;
 8004726:	e003      	b.n	8004730 <lsm6dso_xl_full_scale_get+0x64>

    default:
      *val = LSM6DSO_2g;
 8004728:	683b      	ldr	r3, [r7, #0]
 800472a:	2200      	movs	r2, #0
 800472c:	701a      	strb	r2, [r3, #0]
      break;
 800472e:	bf00      	nop
  }

  return ret;
 8004730:	68fb      	ldr	r3, [r7, #12]
}
 8004732:	4618      	mov	r0, r3
 8004734:	3710      	adds	r7, #16
 8004736:	46bd      	mov	sp, r7
 8004738:	bd80      	pop	{r7, pc}
 800473a:	bf00      	nop

0800473c <lsm6dso_xl_data_rate_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_xl_data_rate_set(stmdev_ctx_t *ctx,
                                 lsm6dso_odr_xl_t val)
{
 800473c:	b580      	push	{r7, lr}
 800473e:	b086      	sub	sp, #24
 8004740:	af00      	add	r7, sp, #0
 8004742:	6078      	str	r0, [r7, #4]
 8004744:	460b      	mov	r3, r1
 8004746:	70fb      	strb	r3, [r7, #3]
  lsm6dso_odr_xl_t odr_xl =  val;
 8004748:	78fb      	ldrb	r3, [r7, #3]
 800474a:	75fb      	strb	r3, [r7, #23]
  lsm6dso_fsm_odr_t fsm_odr;
  lsm6dso_ctrl1_xl_t reg;
  int32_t ret;

  /* Check the Finite State Machine data rate constraints */
  ret =  lsm6dso_fsm_enable_get(ctx, &fsm_enable);
 800474c:	f107 030c 	add.w	r3, r7, #12
 8004750:	4619      	mov	r1, r3
 8004752:	6878      	ldr	r0, [r7, #4]
 8004754:	f000 fca1 	bl	800509a <lsm6dso_fsm_enable_get>
 8004758:	6138      	str	r0, [r7, #16]

  if (ret == 0)
 800475a:	693b      	ldr	r3, [r7, #16]
 800475c:	2b00      	cmp	r3, #0
 800475e:	f040 80c4 	bne.w	80048ea <lsm6dso_xl_data_rate_set+0x1ae>
  {
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
 8004762:	7b3b      	ldrb	r3, [r7, #12]
 8004764:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8004768:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm2_en  |
 800476a:	7b3b      	ldrb	r3, [r7, #12]
 800476c:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8004770:	b2db      	uxtb	r3, r3
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
 8004772:	4313      	orrs	r3, r2
 8004774:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm3_en  |
 8004776:	7b3b      	ldrb	r3, [r7, #12]
 8004778:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800477c:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm2_en  |
 800477e:	4313      	orrs	r3, r2
 8004780:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm4_en  |
 8004782:	7b3b      	ldrb	r3, [r7, #12]
 8004784:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8004788:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm3_en  |
 800478a:	4313      	orrs	r3, r2
 800478c:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm5_en  |
 800478e:	7b3b      	ldrb	r3, [r7, #12]
 8004790:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8004794:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm4_en  |
 8004796:	4313      	orrs	r3, r2
 8004798:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm6_en  |
 800479a:	7b3b      	ldrb	r3, [r7, #12]
 800479c:	f3c3 1340 	ubfx	r3, r3, #5, #1
 80047a0:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm5_en  |
 80047a2:	4313      	orrs	r3, r2
 80047a4:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm7_en  |
 80047a6:	7b3b      	ldrb	r3, [r7, #12]
 80047a8:	f3c3 1380 	ubfx	r3, r3, #6, #1
 80047ac:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm6_en  |
 80047ae:	4313      	orrs	r3, r2
 80047b0:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm8_en  |
 80047b2:	7b3b      	ldrb	r3, [r7, #12]
 80047b4:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 80047b8:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm7_en  |
 80047ba:	4313      	orrs	r3, r2
 80047bc:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm9_en  |
 80047be:	7b7b      	ldrb	r3, [r7, #13]
 80047c0:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80047c4:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm8_en  |
 80047c6:	4313      	orrs	r3, r2
 80047c8:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm10_en |
 80047ca:	7b7b      	ldrb	r3, [r7, #13]
 80047cc:	f3c3 0340 	ubfx	r3, r3, #1, #1
 80047d0:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm9_en  |
 80047d2:	4313      	orrs	r3, r2
 80047d4:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm11_en |
 80047d6:	7b7b      	ldrb	r3, [r7, #13]
 80047d8:	f3c3 0380 	ubfx	r3, r3, #2, #1
 80047dc:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm10_en |
 80047de:	4313      	orrs	r3, r2
 80047e0:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm12_en |
 80047e2:	7b7b      	ldrb	r3, [r7, #13]
 80047e4:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80047e8:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm11_en |
 80047ea:	4313      	orrs	r3, r2
 80047ec:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm13_en |
 80047ee:	7b7b      	ldrb	r3, [r7, #13]
 80047f0:	f3c3 1300 	ubfx	r3, r3, #4, #1
 80047f4:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm12_en |
 80047f6:	4313      	orrs	r3, r2
 80047f8:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm14_en |
 80047fa:	7b7b      	ldrb	r3, [r7, #13]
 80047fc:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8004800:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm13_en |
 8004802:	4313      	orrs	r3, r2
 8004804:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm15_en |
 8004806:	7b7b      	ldrb	r3, [r7, #13]
 8004808:	f3c3 1380 	ubfx	r3, r3, #6, #1
 800480c:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm14_en |
 800480e:	4313      	orrs	r3, r2
 8004810:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm16_en) == PROPERTY_ENABLE)
 8004812:	7b7b      	ldrb	r3, [r7, #13]
 8004814:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8004818:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm15_en |
 800481a:	4313      	orrs	r3, r2
 800481c:	b2db      	uxtb	r3, r3
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
 800481e:	2b01      	cmp	r3, #1
 8004820:	d163      	bne.n	80048ea <lsm6dso_xl_data_rate_set+0x1ae>
    {
      ret =  lsm6dso_fsm_data_rate_get(ctx, &fsm_odr);
 8004822:	f107 030b 	add.w	r3, r7, #11
 8004826:	4619      	mov	r1, r3
 8004828:	6878      	ldr	r0, [r7, #4]
 800482a:	f000 fc57 	bl	80050dc <lsm6dso_fsm_data_rate_get>
 800482e:	6138      	str	r0, [r7, #16]

      if (ret == 0)
 8004830:	693b      	ldr	r3, [r7, #16]
 8004832:	2b00      	cmp	r3, #0
 8004834:	d159      	bne.n	80048ea <lsm6dso_xl_data_rate_set+0x1ae>
      {
        switch (fsm_odr)
 8004836:	7afb      	ldrb	r3, [r7, #11]
 8004838:	2b03      	cmp	r3, #3
 800483a:	d853      	bhi.n	80048e4 <lsm6dso_xl_data_rate_set+0x1a8>
 800483c:	a201      	add	r2, pc, #4	; (adr r2, 8004844 <lsm6dso_xl_data_rate_set+0x108>)
 800483e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004842:	bf00      	nop
 8004844:	08004855 	.word	0x08004855
 8004848:	08004867 	.word	0x08004867
 800484c:	08004885 	.word	0x08004885
 8004850:	080048af 	.word	0x080048af
        {
          case LSM6DSO_ODR_FSM_12Hz5:
            if (val == LSM6DSO_XL_ODR_OFF)
 8004854:	78fb      	ldrb	r3, [r7, #3]
 8004856:	2b00      	cmp	r3, #0
 8004858:	d102      	bne.n	8004860 <lsm6dso_xl_data_rate_set+0x124>
            {
              odr_xl = LSM6DSO_XL_ODR_12Hz5;
 800485a:	2301      	movs	r3, #1
 800485c:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_xl = val;
            }

            break;
 800485e:	e045      	b.n	80048ec <lsm6dso_xl_data_rate_set+0x1b0>
              odr_xl = val;
 8004860:	78fb      	ldrb	r3, [r7, #3]
 8004862:	75fb      	strb	r3, [r7, #23]
            break;
 8004864:	e042      	b.n	80048ec <lsm6dso_xl_data_rate_set+0x1b0>

          case LSM6DSO_ODR_FSM_26Hz:
            if (val == LSM6DSO_XL_ODR_OFF)
 8004866:	78fb      	ldrb	r3, [r7, #3]
 8004868:	2b00      	cmp	r3, #0
 800486a:	d102      	bne.n	8004872 <lsm6dso_xl_data_rate_set+0x136>
            {
              odr_xl = LSM6DSO_XL_ODR_26Hz;
 800486c:	2302      	movs	r3, #2
 800486e:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_xl = val;
            }

            break;
 8004870:	e03c      	b.n	80048ec <lsm6dso_xl_data_rate_set+0x1b0>
            else if (val == LSM6DSO_XL_ODR_12Hz5)
 8004872:	78fb      	ldrb	r3, [r7, #3]
 8004874:	2b01      	cmp	r3, #1
 8004876:	d102      	bne.n	800487e <lsm6dso_xl_data_rate_set+0x142>
              odr_xl = LSM6DSO_XL_ODR_26Hz;
 8004878:	2302      	movs	r3, #2
 800487a:	75fb      	strb	r3, [r7, #23]
            break;
 800487c:	e036      	b.n	80048ec <lsm6dso_xl_data_rate_set+0x1b0>
              odr_xl = val;
 800487e:	78fb      	ldrb	r3, [r7, #3]
 8004880:	75fb      	strb	r3, [r7, #23]
            break;
 8004882:	e033      	b.n	80048ec <lsm6dso_xl_data_rate_set+0x1b0>

          case LSM6DSO_ODR_FSM_52Hz:
            if (val == LSM6DSO_XL_ODR_OFF)
 8004884:	78fb      	ldrb	r3, [r7, #3]
 8004886:	2b00      	cmp	r3, #0
 8004888:	d102      	bne.n	8004890 <lsm6dso_xl_data_rate_set+0x154>
            {
              odr_xl = LSM6DSO_XL_ODR_52Hz;
 800488a:	2303      	movs	r3, #3
 800488c:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_xl = val;
            }

            break;
 800488e:	e02d      	b.n	80048ec <lsm6dso_xl_data_rate_set+0x1b0>
            else if (val == LSM6DSO_XL_ODR_12Hz5)
 8004890:	78fb      	ldrb	r3, [r7, #3]
 8004892:	2b01      	cmp	r3, #1
 8004894:	d102      	bne.n	800489c <lsm6dso_xl_data_rate_set+0x160>
              odr_xl = LSM6DSO_XL_ODR_52Hz;
 8004896:	2303      	movs	r3, #3
 8004898:	75fb      	strb	r3, [r7, #23]
            break;
 800489a:	e027      	b.n	80048ec <lsm6dso_xl_data_rate_set+0x1b0>
            else if (val == LSM6DSO_XL_ODR_26Hz)
 800489c:	78fb      	ldrb	r3, [r7, #3]
 800489e:	2b02      	cmp	r3, #2
 80048a0:	d102      	bne.n	80048a8 <lsm6dso_xl_data_rate_set+0x16c>
              odr_xl = LSM6DSO_XL_ODR_52Hz;
 80048a2:	2303      	movs	r3, #3
 80048a4:	75fb      	strb	r3, [r7, #23]
            break;
 80048a6:	e021      	b.n	80048ec <lsm6dso_xl_data_rate_set+0x1b0>
              odr_xl = val;
 80048a8:	78fb      	ldrb	r3, [r7, #3]
 80048aa:	75fb      	strb	r3, [r7, #23]
            break;
 80048ac:	e01e      	b.n	80048ec <lsm6dso_xl_data_rate_set+0x1b0>

          case LSM6DSO_ODR_FSM_104Hz:
            if (val == LSM6DSO_XL_ODR_OFF)
 80048ae:	78fb      	ldrb	r3, [r7, #3]
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	d102      	bne.n	80048ba <lsm6dso_xl_data_rate_set+0x17e>
            {
              odr_xl = LSM6DSO_XL_ODR_104Hz;
 80048b4:	2304      	movs	r3, #4
 80048b6:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_xl = val;
            }

            break;
 80048b8:	e018      	b.n	80048ec <lsm6dso_xl_data_rate_set+0x1b0>
            else if (val == LSM6DSO_XL_ODR_12Hz5)
 80048ba:	78fb      	ldrb	r3, [r7, #3]
 80048bc:	2b01      	cmp	r3, #1
 80048be:	d102      	bne.n	80048c6 <lsm6dso_xl_data_rate_set+0x18a>
              odr_xl = LSM6DSO_XL_ODR_104Hz;
 80048c0:	2304      	movs	r3, #4
 80048c2:	75fb      	strb	r3, [r7, #23]
            break;
 80048c4:	e012      	b.n	80048ec <lsm6dso_xl_data_rate_set+0x1b0>
            else if (val == LSM6DSO_XL_ODR_26Hz)
 80048c6:	78fb      	ldrb	r3, [r7, #3]
 80048c8:	2b02      	cmp	r3, #2
 80048ca:	d102      	bne.n	80048d2 <lsm6dso_xl_data_rate_set+0x196>
              odr_xl = LSM6DSO_XL_ODR_104Hz;
 80048cc:	2304      	movs	r3, #4
 80048ce:	75fb      	strb	r3, [r7, #23]
            break;
 80048d0:	e00c      	b.n	80048ec <lsm6dso_xl_data_rate_set+0x1b0>
            else if (val == LSM6DSO_XL_ODR_52Hz)
 80048d2:	78fb      	ldrb	r3, [r7, #3]
 80048d4:	2b03      	cmp	r3, #3
 80048d6:	d102      	bne.n	80048de <lsm6dso_xl_data_rate_set+0x1a2>
              odr_xl = LSM6DSO_XL_ODR_104Hz;
 80048d8:	2304      	movs	r3, #4
 80048da:	75fb      	strb	r3, [r7, #23]
            break;
 80048dc:	e006      	b.n	80048ec <lsm6dso_xl_data_rate_set+0x1b0>
              odr_xl = val;
 80048de:	78fb      	ldrb	r3, [r7, #3]
 80048e0:	75fb      	strb	r3, [r7, #23]
            break;
 80048e2:	e003      	b.n	80048ec <lsm6dso_xl_data_rate_set+0x1b0>

          default:
            odr_xl = val;
 80048e4:	78fb      	ldrb	r3, [r7, #3]
 80048e6:	75fb      	strb	r3, [r7, #23]
            break;
 80048e8:	e000      	b.n	80048ec <lsm6dso_xl_data_rate_set+0x1b0>
        }
      }
 80048ea:	bf00      	nop
    }
  }

  if (ret == 0)
 80048ec:	693b      	ldr	r3, [r7, #16]
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d107      	bne.n	8004902 <lsm6dso_xl_data_rate_set+0x1c6>
  {
    ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL1_XL, (uint8_t *)&reg, 1);
 80048f2:	f107 0208 	add.w	r2, r7, #8
 80048f6:	2301      	movs	r3, #1
 80048f8:	2110      	movs	r1, #16
 80048fa:	6878      	ldr	r0, [r7, #4]
 80048fc:	f7ff fe90 	bl	8004620 <lsm6dso_read_reg>
 8004900:	6138      	str	r0, [r7, #16]
  }

  if (ret == 0)
 8004902:	693b      	ldr	r3, [r7, #16]
 8004904:	2b00      	cmp	r3, #0
 8004906:	d10f      	bne.n	8004928 <lsm6dso_xl_data_rate_set+0x1ec>
  {
    reg.odr_xl = (uint8_t) odr_xl;
 8004908:	7dfb      	ldrb	r3, [r7, #23]
 800490a:	f003 030f 	and.w	r3, r3, #15
 800490e:	b2da      	uxtb	r2, r3
 8004910:	7a3b      	ldrb	r3, [r7, #8]
 8004912:	f362 1307 	bfi	r3, r2, #4, #4
 8004916:	723b      	strb	r3, [r7, #8]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL1_XL, (uint8_t *)&reg, 1);
 8004918:	f107 0208 	add.w	r2, r7, #8
 800491c:	2301      	movs	r3, #1
 800491e:	2110      	movs	r1, #16
 8004920:	6878      	ldr	r0, [r7, #4]
 8004922:	f7ff fe95 	bl	8004650 <lsm6dso_write_reg>
 8004926:	6138      	str	r0, [r7, #16]
  }

  return ret;
 8004928:	693b      	ldr	r3, [r7, #16]
}
 800492a:	4618      	mov	r0, r3
 800492c:	3718      	adds	r7, #24
 800492e:	46bd      	mov	sp, r7
 8004930:	bd80      	pop	{r7, pc}
 8004932:	bf00      	nop

08004934 <lsm6dso_xl_data_rate_get>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_xl_data_rate_get(stmdev_ctx_t *ctx,
                                 lsm6dso_odr_xl_t *val)
{
 8004934:	b580      	push	{r7, lr}
 8004936:	b084      	sub	sp, #16
 8004938:	af00      	add	r7, sp, #0
 800493a:	6078      	str	r0, [r7, #4]
 800493c:	6039      	str	r1, [r7, #0]
  lsm6dso_ctrl1_xl_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL1_XL, (uint8_t *)&reg, 1);
 800493e:	f107 0208 	add.w	r2, r7, #8
 8004942:	2301      	movs	r3, #1
 8004944:	2110      	movs	r1, #16
 8004946:	6878      	ldr	r0, [r7, #4]
 8004948:	f7ff fe6a 	bl	8004620 <lsm6dso_read_reg>
 800494c:	60f8      	str	r0, [r7, #12]

  switch (reg.odr_xl)
 800494e:	7a3b      	ldrb	r3, [r7, #8]
 8004950:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8004954:	b2db      	uxtb	r3, r3
 8004956:	2b0b      	cmp	r3, #11
 8004958:	d84a      	bhi.n	80049f0 <lsm6dso_xl_data_rate_get+0xbc>
 800495a:	a201      	add	r2, pc, #4	; (adr r2, 8004960 <lsm6dso_xl_data_rate_get+0x2c>)
 800495c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004960:	08004991 	.word	0x08004991
 8004964:	08004999 	.word	0x08004999
 8004968:	080049a1 	.word	0x080049a1
 800496c:	080049a9 	.word	0x080049a9
 8004970:	080049b1 	.word	0x080049b1
 8004974:	080049b9 	.word	0x080049b9
 8004978:	080049c1 	.word	0x080049c1
 800497c:	080049c9 	.word	0x080049c9
 8004980:	080049d1 	.word	0x080049d1
 8004984:	080049d9 	.word	0x080049d9
 8004988:	080049e1 	.word	0x080049e1
 800498c:	080049e9 	.word	0x080049e9
  {
    case LSM6DSO_XL_ODR_OFF:
      *val = LSM6DSO_XL_ODR_OFF;
 8004990:	683b      	ldr	r3, [r7, #0]
 8004992:	2200      	movs	r2, #0
 8004994:	701a      	strb	r2, [r3, #0]
      break;
 8004996:	e02f      	b.n	80049f8 <lsm6dso_xl_data_rate_get+0xc4>

    case LSM6DSO_XL_ODR_12Hz5:
      *val = LSM6DSO_XL_ODR_12Hz5;
 8004998:	683b      	ldr	r3, [r7, #0]
 800499a:	2201      	movs	r2, #1
 800499c:	701a      	strb	r2, [r3, #0]
      break;
 800499e:	e02b      	b.n	80049f8 <lsm6dso_xl_data_rate_get+0xc4>

    case LSM6DSO_XL_ODR_26Hz:
      *val = LSM6DSO_XL_ODR_26Hz;
 80049a0:	683b      	ldr	r3, [r7, #0]
 80049a2:	2202      	movs	r2, #2
 80049a4:	701a      	strb	r2, [r3, #0]
      break;
 80049a6:	e027      	b.n	80049f8 <lsm6dso_xl_data_rate_get+0xc4>

    case LSM6DSO_XL_ODR_52Hz:
      *val = LSM6DSO_XL_ODR_52Hz;
 80049a8:	683b      	ldr	r3, [r7, #0]
 80049aa:	2203      	movs	r2, #3
 80049ac:	701a      	strb	r2, [r3, #0]
      break;
 80049ae:	e023      	b.n	80049f8 <lsm6dso_xl_data_rate_get+0xc4>

    case LSM6DSO_XL_ODR_104Hz:
      *val = LSM6DSO_XL_ODR_104Hz;
 80049b0:	683b      	ldr	r3, [r7, #0]
 80049b2:	2204      	movs	r2, #4
 80049b4:	701a      	strb	r2, [r3, #0]
      break;
 80049b6:	e01f      	b.n	80049f8 <lsm6dso_xl_data_rate_get+0xc4>

    case LSM6DSO_XL_ODR_208Hz:
      *val = LSM6DSO_XL_ODR_208Hz;
 80049b8:	683b      	ldr	r3, [r7, #0]
 80049ba:	2205      	movs	r2, #5
 80049bc:	701a      	strb	r2, [r3, #0]
      break;
 80049be:	e01b      	b.n	80049f8 <lsm6dso_xl_data_rate_get+0xc4>

    case LSM6DSO_XL_ODR_417Hz:
      *val = LSM6DSO_XL_ODR_417Hz;
 80049c0:	683b      	ldr	r3, [r7, #0]
 80049c2:	2206      	movs	r2, #6
 80049c4:	701a      	strb	r2, [r3, #0]
      break;
 80049c6:	e017      	b.n	80049f8 <lsm6dso_xl_data_rate_get+0xc4>

    case LSM6DSO_XL_ODR_833Hz:
      *val = LSM6DSO_XL_ODR_833Hz;
 80049c8:	683b      	ldr	r3, [r7, #0]
 80049ca:	2207      	movs	r2, #7
 80049cc:	701a      	strb	r2, [r3, #0]
      break;
 80049ce:	e013      	b.n	80049f8 <lsm6dso_xl_data_rate_get+0xc4>

    case LSM6DSO_XL_ODR_1667Hz:
      *val = LSM6DSO_XL_ODR_1667Hz;
 80049d0:	683b      	ldr	r3, [r7, #0]
 80049d2:	2208      	movs	r2, #8
 80049d4:	701a      	strb	r2, [r3, #0]
      break;
 80049d6:	e00f      	b.n	80049f8 <lsm6dso_xl_data_rate_get+0xc4>

    case LSM6DSO_XL_ODR_3333Hz:
      *val = LSM6DSO_XL_ODR_3333Hz;
 80049d8:	683b      	ldr	r3, [r7, #0]
 80049da:	2209      	movs	r2, #9
 80049dc:	701a      	strb	r2, [r3, #0]
      break;
 80049de:	e00b      	b.n	80049f8 <lsm6dso_xl_data_rate_get+0xc4>

    case LSM6DSO_XL_ODR_6667Hz:
      *val = LSM6DSO_XL_ODR_6667Hz;
 80049e0:	683b      	ldr	r3, [r7, #0]
 80049e2:	220a      	movs	r2, #10
 80049e4:	701a      	strb	r2, [r3, #0]
      break;
 80049e6:	e007      	b.n	80049f8 <lsm6dso_xl_data_rate_get+0xc4>

    case LSM6DSO_XL_ODR_1Hz6:
      *val = LSM6DSO_XL_ODR_1Hz6;
 80049e8:	683b      	ldr	r3, [r7, #0]
 80049ea:	220b      	movs	r2, #11
 80049ec:	701a      	strb	r2, [r3, #0]
      break;
 80049ee:	e003      	b.n	80049f8 <lsm6dso_xl_data_rate_get+0xc4>

    default:
      *val = LSM6DSO_XL_ODR_OFF;
 80049f0:	683b      	ldr	r3, [r7, #0]
 80049f2:	2200      	movs	r2, #0
 80049f4:	701a      	strb	r2, [r3, #0]
      break;
 80049f6:	bf00      	nop
  }

  return ret;
 80049f8:	68fb      	ldr	r3, [r7, #12]
}
 80049fa:	4618      	mov	r0, r3
 80049fc:	3710      	adds	r7, #16
 80049fe:	46bd      	mov	sp, r7
 8004a00:	bd80      	pop	{r7, pc}
 8004a02:	bf00      	nop

08004a04 <lsm6dso_gy_full_scale_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_gy_full_scale_set(stmdev_ctx_t *ctx,
                                  lsm6dso_fs_g_t val)
{
 8004a04:	b580      	push	{r7, lr}
 8004a06:	b084      	sub	sp, #16
 8004a08:	af00      	add	r7, sp, #0
 8004a0a:	6078      	str	r0, [r7, #4]
 8004a0c:	460b      	mov	r3, r1
 8004a0e:	70fb      	strb	r3, [r7, #3]
  lsm6dso_ctrl2_g_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL2_G, (uint8_t *)&reg, 1);
 8004a10:	f107 0208 	add.w	r2, r7, #8
 8004a14:	2301      	movs	r3, #1
 8004a16:	2111      	movs	r1, #17
 8004a18:	6878      	ldr	r0, [r7, #4]
 8004a1a:	f7ff fe01 	bl	8004620 <lsm6dso_read_reg>
 8004a1e:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d10f      	bne.n	8004a46 <lsm6dso_gy_full_scale_set+0x42>
  {
    reg.fs_g = (uint8_t) val;
 8004a26:	78fb      	ldrb	r3, [r7, #3]
 8004a28:	f003 0307 	and.w	r3, r3, #7
 8004a2c:	b2da      	uxtb	r2, r3
 8004a2e:	7a3b      	ldrb	r3, [r7, #8]
 8004a30:	f362 0343 	bfi	r3, r2, #1, #3
 8004a34:	723b      	strb	r3, [r7, #8]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL2_G, (uint8_t *)&reg, 1);
 8004a36:	f107 0208 	add.w	r2, r7, #8
 8004a3a:	2301      	movs	r3, #1
 8004a3c:	2111      	movs	r1, #17
 8004a3e:	6878      	ldr	r0, [r7, #4]
 8004a40:	f7ff fe06 	bl	8004650 <lsm6dso_write_reg>
 8004a44:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8004a46:	68fb      	ldr	r3, [r7, #12]
}
 8004a48:	4618      	mov	r0, r3
 8004a4a:	3710      	adds	r7, #16
 8004a4c:	46bd      	mov	sp, r7
 8004a4e:	bd80      	pop	{r7, pc}

08004a50 <lsm6dso_gy_full_scale_get>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_gy_full_scale_get(stmdev_ctx_t *ctx,
                                  lsm6dso_fs_g_t *val)
{
 8004a50:	b580      	push	{r7, lr}
 8004a52:	b084      	sub	sp, #16
 8004a54:	af00      	add	r7, sp, #0
 8004a56:	6078      	str	r0, [r7, #4]
 8004a58:	6039      	str	r1, [r7, #0]
  lsm6dso_ctrl2_g_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL2_G, (uint8_t *)&reg, 1);
 8004a5a:	f107 0208 	add.w	r2, r7, #8
 8004a5e:	2301      	movs	r3, #1
 8004a60:	2111      	movs	r1, #17
 8004a62:	6878      	ldr	r0, [r7, #4]
 8004a64:	f7ff fddc 	bl	8004620 <lsm6dso_read_reg>
 8004a68:	60f8      	str	r0, [r7, #12]

  switch (reg.fs_g)
 8004a6a:	7a3b      	ldrb	r3, [r7, #8]
 8004a6c:	f3c3 0342 	ubfx	r3, r3, #1, #3
 8004a70:	b2db      	uxtb	r3, r3
 8004a72:	2b06      	cmp	r3, #6
 8004a74:	d824      	bhi.n	8004ac0 <lsm6dso_gy_full_scale_get+0x70>
 8004a76:	a201      	add	r2, pc, #4	; (adr r2, 8004a7c <lsm6dso_gy_full_scale_get+0x2c>)
 8004a78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a7c:	08004a99 	.word	0x08004a99
 8004a80:	08004aa1 	.word	0x08004aa1
 8004a84:	08004aa9 	.word	0x08004aa9
 8004a88:	08004ac1 	.word	0x08004ac1
 8004a8c:	08004ab1 	.word	0x08004ab1
 8004a90:	08004ac1 	.word	0x08004ac1
 8004a94:	08004ab9 	.word	0x08004ab9
  {
    case LSM6DSO_250dps:
      *val = LSM6DSO_250dps;
 8004a98:	683b      	ldr	r3, [r7, #0]
 8004a9a:	2200      	movs	r2, #0
 8004a9c:	701a      	strb	r2, [r3, #0]
      break;
 8004a9e:	e013      	b.n	8004ac8 <lsm6dso_gy_full_scale_get+0x78>

    case LSM6DSO_125dps:
      *val = LSM6DSO_125dps;
 8004aa0:	683b      	ldr	r3, [r7, #0]
 8004aa2:	2201      	movs	r2, #1
 8004aa4:	701a      	strb	r2, [r3, #0]
      break;
 8004aa6:	e00f      	b.n	8004ac8 <lsm6dso_gy_full_scale_get+0x78>

    case LSM6DSO_500dps:
      *val = LSM6DSO_500dps;
 8004aa8:	683b      	ldr	r3, [r7, #0]
 8004aaa:	2202      	movs	r2, #2
 8004aac:	701a      	strb	r2, [r3, #0]
      break;
 8004aae:	e00b      	b.n	8004ac8 <lsm6dso_gy_full_scale_get+0x78>

    case LSM6DSO_1000dps:
      *val = LSM6DSO_1000dps;
 8004ab0:	683b      	ldr	r3, [r7, #0]
 8004ab2:	2204      	movs	r2, #4
 8004ab4:	701a      	strb	r2, [r3, #0]
      break;
 8004ab6:	e007      	b.n	8004ac8 <lsm6dso_gy_full_scale_get+0x78>

    case LSM6DSO_2000dps:
      *val = LSM6DSO_2000dps;
 8004ab8:	683b      	ldr	r3, [r7, #0]
 8004aba:	2206      	movs	r2, #6
 8004abc:	701a      	strb	r2, [r3, #0]
      break;
 8004abe:	e003      	b.n	8004ac8 <lsm6dso_gy_full_scale_get+0x78>

    default:
      *val = LSM6DSO_250dps;
 8004ac0:	683b      	ldr	r3, [r7, #0]
 8004ac2:	2200      	movs	r2, #0
 8004ac4:	701a      	strb	r2, [r3, #0]
      break;
 8004ac6:	bf00      	nop
  }

  return ret;
 8004ac8:	68fb      	ldr	r3, [r7, #12]
}
 8004aca:	4618      	mov	r0, r3
 8004acc:	3710      	adds	r7, #16
 8004ace:	46bd      	mov	sp, r7
 8004ad0:	bd80      	pop	{r7, pc}
 8004ad2:	bf00      	nop

08004ad4 <lsm6dso_gy_data_rate_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_gy_data_rate_set(stmdev_ctx_t *ctx,
                                 lsm6dso_odr_g_t val)
{
 8004ad4:	b580      	push	{r7, lr}
 8004ad6:	b086      	sub	sp, #24
 8004ad8:	af00      	add	r7, sp, #0
 8004ada:	6078      	str	r0, [r7, #4]
 8004adc:	460b      	mov	r3, r1
 8004ade:	70fb      	strb	r3, [r7, #3]
  lsm6dso_odr_g_t odr_gy =  val;
 8004ae0:	78fb      	ldrb	r3, [r7, #3]
 8004ae2:	75fb      	strb	r3, [r7, #23]
  lsm6dso_fsm_odr_t fsm_odr;
  lsm6dso_ctrl2_g_t reg;
  int32_t ret;

  /* Check the Finite State Machine data rate constraints */
  ret =  lsm6dso_fsm_enable_get(ctx, &fsm_enable);
 8004ae4:	f107 030c 	add.w	r3, r7, #12
 8004ae8:	4619      	mov	r1, r3
 8004aea:	6878      	ldr	r0, [r7, #4]
 8004aec:	f000 fad5 	bl	800509a <lsm6dso_fsm_enable_get>
 8004af0:	6138      	str	r0, [r7, #16]

  if (ret == 0)
 8004af2:	693b      	ldr	r3, [r7, #16]
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	f040 80c4 	bne.w	8004c82 <lsm6dso_gy_data_rate_set+0x1ae>
  {
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
 8004afa:	7b3b      	ldrb	r3, [r7, #12]
 8004afc:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8004b00:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm2_en  |
 8004b02:	7b3b      	ldrb	r3, [r7, #12]
 8004b04:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8004b08:	b2db      	uxtb	r3, r3
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
 8004b0a:	4313      	orrs	r3, r2
 8004b0c:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm3_en  |
 8004b0e:	7b3b      	ldrb	r3, [r7, #12]
 8004b10:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8004b14:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm2_en  |
 8004b16:	4313      	orrs	r3, r2
 8004b18:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm4_en  |
 8004b1a:	7b3b      	ldrb	r3, [r7, #12]
 8004b1c:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8004b20:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm3_en  |
 8004b22:	4313      	orrs	r3, r2
 8004b24:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm5_en  |
 8004b26:	7b3b      	ldrb	r3, [r7, #12]
 8004b28:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8004b2c:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm4_en  |
 8004b2e:	4313      	orrs	r3, r2
 8004b30:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm6_en  |
 8004b32:	7b3b      	ldrb	r3, [r7, #12]
 8004b34:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8004b38:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm5_en  |
 8004b3a:	4313      	orrs	r3, r2
 8004b3c:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm7_en  |
 8004b3e:	7b3b      	ldrb	r3, [r7, #12]
 8004b40:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8004b44:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm6_en  |
 8004b46:	4313      	orrs	r3, r2
 8004b48:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm8_en  |
 8004b4a:	7b3b      	ldrb	r3, [r7, #12]
 8004b4c:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8004b50:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm7_en  |
 8004b52:	4313      	orrs	r3, r2
 8004b54:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm9_en  |
 8004b56:	7b7b      	ldrb	r3, [r7, #13]
 8004b58:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8004b5c:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm8_en  |
 8004b5e:	4313      	orrs	r3, r2
 8004b60:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm10_en |
 8004b62:	7b7b      	ldrb	r3, [r7, #13]
 8004b64:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8004b68:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm9_en  |
 8004b6a:	4313      	orrs	r3, r2
 8004b6c:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm11_en |
 8004b6e:	7b7b      	ldrb	r3, [r7, #13]
 8004b70:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8004b74:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm10_en |
 8004b76:	4313      	orrs	r3, r2
 8004b78:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm12_en |
 8004b7a:	7b7b      	ldrb	r3, [r7, #13]
 8004b7c:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8004b80:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm11_en |
 8004b82:	4313      	orrs	r3, r2
 8004b84:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm13_en |
 8004b86:	7b7b      	ldrb	r3, [r7, #13]
 8004b88:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8004b8c:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm12_en |
 8004b8e:	4313      	orrs	r3, r2
 8004b90:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm14_en |
 8004b92:	7b7b      	ldrb	r3, [r7, #13]
 8004b94:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8004b98:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm13_en |
 8004b9a:	4313      	orrs	r3, r2
 8004b9c:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm15_en |
 8004b9e:	7b7b      	ldrb	r3, [r7, #13]
 8004ba0:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8004ba4:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm14_en |
 8004ba6:	4313      	orrs	r3, r2
 8004ba8:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm16_en) == PROPERTY_ENABLE)
 8004baa:	7b7b      	ldrb	r3, [r7, #13]
 8004bac:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8004bb0:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm15_en |
 8004bb2:	4313      	orrs	r3, r2
 8004bb4:	b2db      	uxtb	r3, r3
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
 8004bb6:	2b01      	cmp	r3, #1
 8004bb8:	d163      	bne.n	8004c82 <lsm6dso_gy_data_rate_set+0x1ae>
    {
      ret =  lsm6dso_fsm_data_rate_get(ctx, &fsm_odr);
 8004bba:	f107 030b 	add.w	r3, r7, #11
 8004bbe:	4619      	mov	r1, r3
 8004bc0:	6878      	ldr	r0, [r7, #4]
 8004bc2:	f000 fa8b 	bl	80050dc <lsm6dso_fsm_data_rate_get>
 8004bc6:	6138      	str	r0, [r7, #16]

      if (ret == 0)
 8004bc8:	693b      	ldr	r3, [r7, #16]
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d159      	bne.n	8004c82 <lsm6dso_gy_data_rate_set+0x1ae>
      {
        switch (fsm_odr)
 8004bce:	7afb      	ldrb	r3, [r7, #11]
 8004bd0:	2b03      	cmp	r3, #3
 8004bd2:	d853      	bhi.n	8004c7c <lsm6dso_gy_data_rate_set+0x1a8>
 8004bd4:	a201      	add	r2, pc, #4	; (adr r2, 8004bdc <lsm6dso_gy_data_rate_set+0x108>)
 8004bd6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004bda:	bf00      	nop
 8004bdc:	08004bed 	.word	0x08004bed
 8004be0:	08004bff 	.word	0x08004bff
 8004be4:	08004c1d 	.word	0x08004c1d
 8004be8:	08004c47 	.word	0x08004c47
        {
          case LSM6DSO_ODR_FSM_12Hz5:
            if (val == LSM6DSO_GY_ODR_OFF)
 8004bec:	78fb      	ldrb	r3, [r7, #3]
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d102      	bne.n	8004bf8 <lsm6dso_gy_data_rate_set+0x124>
            {
              odr_gy = LSM6DSO_GY_ODR_12Hz5;
 8004bf2:	2301      	movs	r3, #1
 8004bf4:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_gy = val;
            }

            break;
 8004bf6:	e045      	b.n	8004c84 <lsm6dso_gy_data_rate_set+0x1b0>
              odr_gy = val;
 8004bf8:	78fb      	ldrb	r3, [r7, #3]
 8004bfa:	75fb      	strb	r3, [r7, #23]
            break;
 8004bfc:	e042      	b.n	8004c84 <lsm6dso_gy_data_rate_set+0x1b0>

          case LSM6DSO_ODR_FSM_26Hz:
            if (val == LSM6DSO_GY_ODR_OFF)
 8004bfe:	78fb      	ldrb	r3, [r7, #3]
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	d102      	bne.n	8004c0a <lsm6dso_gy_data_rate_set+0x136>
            {
              odr_gy = LSM6DSO_GY_ODR_26Hz;
 8004c04:	2302      	movs	r3, #2
 8004c06:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_gy = val;
            }

            break;
 8004c08:	e03c      	b.n	8004c84 <lsm6dso_gy_data_rate_set+0x1b0>
            else if (val == LSM6DSO_GY_ODR_12Hz5)
 8004c0a:	78fb      	ldrb	r3, [r7, #3]
 8004c0c:	2b01      	cmp	r3, #1
 8004c0e:	d102      	bne.n	8004c16 <lsm6dso_gy_data_rate_set+0x142>
              odr_gy = LSM6DSO_GY_ODR_26Hz;
 8004c10:	2302      	movs	r3, #2
 8004c12:	75fb      	strb	r3, [r7, #23]
            break;
 8004c14:	e036      	b.n	8004c84 <lsm6dso_gy_data_rate_set+0x1b0>
              odr_gy = val;
 8004c16:	78fb      	ldrb	r3, [r7, #3]
 8004c18:	75fb      	strb	r3, [r7, #23]
            break;
 8004c1a:	e033      	b.n	8004c84 <lsm6dso_gy_data_rate_set+0x1b0>

          case LSM6DSO_ODR_FSM_52Hz:
            if (val == LSM6DSO_GY_ODR_OFF)
 8004c1c:	78fb      	ldrb	r3, [r7, #3]
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d102      	bne.n	8004c28 <lsm6dso_gy_data_rate_set+0x154>
            {
              odr_gy = LSM6DSO_GY_ODR_52Hz;
 8004c22:	2303      	movs	r3, #3
 8004c24:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_gy = val;
            }

            break;
 8004c26:	e02d      	b.n	8004c84 <lsm6dso_gy_data_rate_set+0x1b0>
            else if (val == LSM6DSO_GY_ODR_12Hz5)
 8004c28:	78fb      	ldrb	r3, [r7, #3]
 8004c2a:	2b01      	cmp	r3, #1
 8004c2c:	d102      	bne.n	8004c34 <lsm6dso_gy_data_rate_set+0x160>
              odr_gy = LSM6DSO_GY_ODR_52Hz;
 8004c2e:	2303      	movs	r3, #3
 8004c30:	75fb      	strb	r3, [r7, #23]
            break;
 8004c32:	e027      	b.n	8004c84 <lsm6dso_gy_data_rate_set+0x1b0>
            else if (val == LSM6DSO_GY_ODR_26Hz)
 8004c34:	78fb      	ldrb	r3, [r7, #3]
 8004c36:	2b02      	cmp	r3, #2
 8004c38:	d102      	bne.n	8004c40 <lsm6dso_gy_data_rate_set+0x16c>
              odr_gy = LSM6DSO_GY_ODR_52Hz;
 8004c3a:	2303      	movs	r3, #3
 8004c3c:	75fb      	strb	r3, [r7, #23]
            break;
 8004c3e:	e021      	b.n	8004c84 <lsm6dso_gy_data_rate_set+0x1b0>
              odr_gy = val;
 8004c40:	78fb      	ldrb	r3, [r7, #3]
 8004c42:	75fb      	strb	r3, [r7, #23]
            break;
 8004c44:	e01e      	b.n	8004c84 <lsm6dso_gy_data_rate_set+0x1b0>

          case LSM6DSO_ODR_FSM_104Hz:
            if (val == LSM6DSO_GY_ODR_OFF)
 8004c46:	78fb      	ldrb	r3, [r7, #3]
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	d102      	bne.n	8004c52 <lsm6dso_gy_data_rate_set+0x17e>
            {
              odr_gy = LSM6DSO_GY_ODR_104Hz;
 8004c4c:	2304      	movs	r3, #4
 8004c4e:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_gy = val;
            }

            break;
 8004c50:	e018      	b.n	8004c84 <lsm6dso_gy_data_rate_set+0x1b0>
            else if (val == LSM6DSO_GY_ODR_12Hz5)
 8004c52:	78fb      	ldrb	r3, [r7, #3]
 8004c54:	2b01      	cmp	r3, #1
 8004c56:	d102      	bne.n	8004c5e <lsm6dso_gy_data_rate_set+0x18a>
              odr_gy = LSM6DSO_GY_ODR_104Hz;
 8004c58:	2304      	movs	r3, #4
 8004c5a:	75fb      	strb	r3, [r7, #23]
            break;
 8004c5c:	e012      	b.n	8004c84 <lsm6dso_gy_data_rate_set+0x1b0>
            else if (val == LSM6DSO_GY_ODR_26Hz)
 8004c5e:	78fb      	ldrb	r3, [r7, #3]
 8004c60:	2b02      	cmp	r3, #2
 8004c62:	d102      	bne.n	8004c6a <lsm6dso_gy_data_rate_set+0x196>
              odr_gy = LSM6DSO_GY_ODR_104Hz;
 8004c64:	2304      	movs	r3, #4
 8004c66:	75fb      	strb	r3, [r7, #23]
            break;
 8004c68:	e00c      	b.n	8004c84 <lsm6dso_gy_data_rate_set+0x1b0>
            else if (val == LSM6DSO_GY_ODR_52Hz)
 8004c6a:	78fb      	ldrb	r3, [r7, #3]
 8004c6c:	2b03      	cmp	r3, #3
 8004c6e:	d102      	bne.n	8004c76 <lsm6dso_gy_data_rate_set+0x1a2>
              odr_gy = LSM6DSO_GY_ODR_104Hz;
 8004c70:	2304      	movs	r3, #4
 8004c72:	75fb      	strb	r3, [r7, #23]
            break;
 8004c74:	e006      	b.n	8004c84 <lsm6dso_gy_data_rate_set+0x1b0>
              odr_gy = val;
 8004c76:	78fb      	ldrb	r3, [r7, #3]
 8004c78:	75fb      	strb	r3, [r7, #23]
            break;
 8004c7a:	e003      	b.n	8004c84 <lsm6dso_gy_data_rate_set+0x1b0>

          default:
            odr_gy = val;
 8004c7c:	78fb      	ldrb	r3, [r7, #3]
 8004c7e:	75fb      	strb	r3, [r7, #23]
            break;
 8004c80:	e000      	b.n	8004c84 <lsm6dso_gy_data_rate_set+0x1b0>
        }
      }
 8004c82:	bf00      	nop
    }
  }

  if (ret == 0)
 8004c84:	693b      	ldr	r3, [r7, #16]
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d107      	bne.n	8004c9a <lsm6dso_gy_data_rate_set+0x1c6>
  {
    ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL2_G, (uint8_t *)&reg, 1);
 8004c8a:	f107 0208 	add.w	r2, r7, #8
 8004c8e:	2301      	movs	r3, #1
 8004c90:	2111      	movs	r1, #17
 8004c92:	6878      	ldr	r0, [r7, #4]
 8004c94:	f7ff fcc4 	bl	8004620 <lsm6dso_read_reg>
 8004c98:	6138      	str	r0, [r7, #16]
  }

  if (ret == 0)
 8004c9a:	693b      	ldr	r3, [r7, #16]
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	d10f      	bne.n	8004cc0 <lsm6dso_gy_data_rate_set+0x1ec>
  {
    reg.odr_g = (uint8_t) odr_gy;
 8004ca0:	7dfb      	ldrb	r3, [r7, #23]
 8004ca2:	f003 030f 	and.w	r3, r3, #15
 8004ca6:	b2da      	uxtb	r2, r3
 8004ca8:	7a3b      	ldrb	r3, [r7, #8]
 8004caa:	f362 1307 	bfi	r3, r2, #4, #4
 8004cae:	723b      	strb	r3, [r7, #8]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL2_G, (uint8_t *)&reg, 1);
 8004cb0:	f107 0208 	add.w	r2, r7, #8
 8004cb4:	2301      	movs	r3, #1
 8004cb6:	2111      	movs	r1, #17
 8004cb8:	6878      	ldr	r0, [r7, #4]
 8004cba:	f7ff fcc9 	bl	8004650 <lsm6dso_write_reg>
 8004cbe:	6138      	str	r0, [r7, #16]
  }

  return ret;
 8004cc0:	693b      	ldr	r3, [r7, #16]
}
 8004cc2:	4618      	mov	r0, r3
 8004cc4:	3718      	adds	r7, #24
 8004cc6:	46bd      	mov	sp, r7
 8004cc8:	bd80      	pop	{r7, pc}
 8004cca:	bf00      	nop

08004ccc <lsm6dso_gy_data_rate_get>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_gy_data_rate_get(stmdev_ctx_t *ctx,
                                 lsm6dso_odr_g_t *val)
{
 8004ccc:	b580      	push	{r7, lr}
 8004cce:	b084      	sub	sp, #16
 8004cd0:	af00      	add	r7, sp, #0
 8004cd2:	6078      	str	r0, [r7, #4]
 8004cd4:	6039      	str	r1, [r7, #0]
  lsm6dso_ctrl2_g_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL2_G, (uint8_t *)&reg, 1);
 8004cd6:	f107 0208 	add.w	r2, r7, #8
 8004cda:	2301      	movs	r3, #1
 8004cdc:	2111      	movs	r1, #17
 8004cde:	6878      	ldr	r0, [r7, #4]
 8004ce0:	f7ff fc9e 	bl	8004620 <lsm6dso_read_reg>
 8004ce4:	60f8      	str	r0, [r7, #12]

  switch (reg.odr_g)
 8004ce6:	7a3b      	ldrb	r3, [r7, #8]
 8004ce8:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8004cec:	b2db      	uxtb	r3, r3
 8004cee:	2b0a      	cmp	r3, #10
 8004cf0:	d844      	bhi.n	8004d7c <lsm6dso_gy_data_rate_get+0xb0>
 8004cf2:	a201      	add	r2, pc, #4	; (adr r2, 8004cf8 <lsm6dso_gy_data_rate_get+0x2c>)
 8004cf4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004cf8:	08004d25 	.word	0x08004d25
 8004cfc:	08004d2d 	.word	0x08004d2d
 8004d00:	08004d35 	.word	0x08004d35
 8004d04:	08004d3d 	.word	0x08004d3d
 8004d08:	08004d45 	.word	0x08004d45
 8004d0c:	08004d4d 	.word	0x08004d4d
 8004d10:	08004d55 	.word	0x08004d55
 8004d14:	08004d5d 	.word	0x08004d5d
 8004d18:	08004d65 	.word	0x08004d65
 8004d1c:	08004d6d 	.word	0x08004d6d
 8004d20:	08004d75 	.word	0x08004d75
  {
    case LSM6DSO_GY_ODR_OFF:
      *val = LSM6DSO_GY_ODR_OFF;
 8004d24:	683b      	ldr	r3, [r7, #0]
 8004d26:	2200      	movs	r2, #0
 8004d28:	701a      	strb	r2, [r3, #0]
      break;
 8004d2a:	e02b      	b.n	8004d84 <lsm6dso_gy_data_rate_get+0xb8>

    case LSM6DSO_GY_ODR_12Hz5:
      *val = LSM6DSO_GY_ODR_12Hz5;
 8004d2c:	683b      	ldr	r3, [r7, #0]
 8004d2e:	2201      	movs	r2, #1
 8004d30:	701a      	strb	r2, [r3, #0]
      break;
 8004d32:	e027      	b.n	8004d84 <lsm6dso_gy_data_rate_get+0xb8>

    case LSM6DSO_GY_ODR_26Hz:
      *val = LSM6DSO_GY_ODR_26Hz;
 8004d34:	683b      	ldr	r3, [r7, #0]
 8004d36:	2202      	movs	r2, #2
 8004d38:	701a      	strb	r2, [r3, #0]
      break;
 8004d3a:	e023      	b.n	8004d84 <lsm6dso_gy_data_rate_get+0xb8>

    case LSM6DSO_GY_ODR_52Hz:
      *val = LSM6DSO_GY_ODR_52Hz;
 8004d3c:	683b      	ldr	r3, [r7, #0]
 8004d3e:	2203      	movs	r2, #3
 8004d40:	701a      	strb	r2, [r3, #0]
      break;
 8004d42:	e01f      	b.n	8004d84 <lsm6dso_gy_data_rate_get+0xb8>

    case LSM6DSO_GY_ODR_104Hz:
      *val = LSM6DSO_GY_ODR_104Hz;
 8004d44:	683b      	ldr	r3, [r7, #0]
 8004d46:	2204      	movs	r2, #4
 8004d48:	701a      	strb	r2, [r3, #0]
      break;
 8004d4a:	e01b      	b.n	8004d84 <lsm6dso_gy_data_rate_get+0xb8>

    case LSM6DSO_GY_ODR_208Hz:
      *val = LSM6DSO_GY_ODR_208Hz;
 8004d4c:	683b      	ldr	r3, [r7, #0]
 8004d4e:	2205      	movs	r2, #5
 8004d50:	701a      	strb	r2, [r3, #0]
      break;
 8004d52:	e017      	b.n	8004d84 <lsm6dso_gy_data_rate_get+0xb8>

    case LSM6DSO_GY_ODR_417Hz:
      *val = LSM6DSO_GY_ODR_417Hz;
 8004d54:	683b      	ldr	r3, [r7, #0]
 8004d56:	2206      	movs	r2, #6
 8004d58:	701a      	strb	r2, [r3, #0]
      break;
 8004d5a:	e013      	b.n	8004d84 <lsm6dso_gy_data_rate_get+0xb8>

    case LSM6DSO_GY_ODR_833Hz:
      *val = LSM6DSO_GY_ODR_833Hz;
 8004d5c:	683b      	ldr	r3, [r7, #0]
 8004d5e:	2207      	movs	r2, #7
 8004d60:	701a      	strb	r2, [r3, #0]
      break;
 8004d62:	e00f      	b.n	8004d84 <lsm6dso_gy_data_rate_get+0xb8>

    case LSM6DSO_GY_ODR_1667Hz:
      *val = LSM6DSO_GY_ODR_1667Hz;
 8004d64:	683b      	ldr	r3, [r7, #0]
 8004d66:	2208      	movs	r2, #8
 8004d68:	701a      	strb	r2, [r3, #0]
      break;
 8004d6a:	e00b      	b.n	8004d84 <lsm6dso_gy_data_rate_get+0xb8>

    case LSM6DSO_GY_ODR_3333Hz:
      *val = LSM6DSO_GY_ODR_3333Hz;
 8004d6c:	683b      	ldr	r3, [r7, #0]
 8004d6e:	2209      	movs	r2, #9
 8004d70:	701a      	strb	r2, [r3, #0]
      break;
 8004d72:	e007      	b.n	8004d84 <lsm6dso_gy_data_rate_get+0xb8>

    case LSM6DSO_GY_ODR_6667Hz:
      *val = LSM6DSO_GY_ODR_6667Hz;
 8004d74:	683b      	ldr	r3, [r7, #0]
 8004d76:	220a      	movs	r2, #10
 8004d78:	701a      	strb	r2, [r3, #0]
      break;
 8004d7a:	e003      	b.n	8004d84 <lsm6dso_gy_data_rate_get+0xb8>

    default:
      *val = LSM6DSO_GY_ODR_OFF;
 8004d7c:	683b      	ldr	r3, [r7, #0]
 8004d7e:	2200      	movs	r2, #0
 8004d80:	701a      	strb	r2, [r3, #0]
      break;
 8004d82:	bf00      	nop
  }

  return ret;
 8004d84:	68fb      	ldr	r3, [r7, #12]
}
 8004d86:	4618      	mov	r0, r3
 8004d88:	3710      	adds	r7, #16
 8004d8a:	46bd      	mov	sp, r7
 8004d8c:	bd80      	pop	{r7, pc}
 8004d8e:	bf00      	nop

08004d90 <lsm6dso_block_data_update_set>:
  * @param  val      change the values of bdu in reg CTRL3_C
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8004d90:	b580      	push	{r7, lr}
 8004d92:	b084      	sub	sp, #16
 8004d94:	af00      	add	r7, sp, #0
 8004d96:	6078      	str	r0, [r7, #4]
 8004d98:	460b      	mov	r3, r1
 8004d9a:	70fb      	strb	r3, [r7, #3]
  lsm6dso_ctrl3_c_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL3_C, (uint8_t *)&reg, 1);
 8004d9c:	f107 0208 	add.w	r2, r7, #8
 8004da0:	2301      	movs	r3, #1
 8004da2:	2112      	movs	r1, #18
 8004da4:	6878      	ldr	r0, [r7, #4]
 8004da6:	f7ff fc3b 	bl	8004620 <lsm6dso_read_reg>
 8004daa:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d10f      	bne.n	8004dd2 <lsm6dso_block_data_update_set+0x42>
  {
    reg.bdu = val;
 8004db2:	78fb      	ldrb	r3, [r7, #3]
 8004db4:	f003 0301 	and.w	r3, r3, #1
 8004db8:	b2da      	uxtb	r2, r3
 8004dba:	7a3b      	ldrb	r3, [r7, #8]
 8004dbc:	f362 1386 	bfi	r3, r2, #6, #1
 8004dc0:	723b      	strb	r3, [r7, #8]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL3_C, (uint8_t *)&reg, 1);
 8004dc2:	f107 0208 	add.w	r2, r7, #8
 8004dc6:	2301      	movs	r3, #1
 8004dc8:	2112      	movs	r1, #18
 8004dca:	6878      	ldr	r0, [r7, #4]
 8004dcc:	f7ff fc40 	bl	8004650 <lsm6dso_write_reg>
 8004dd0:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8004dd2:	68fb      	ldr	r3, [r7, #12]
}
 8004dd4:	4618      	mov	r0, r3
 8004dd6:	3710      	adds	r7, #16
 8004dd8:	46bd      	mov	sp, r7
 8004dda:	bd80      	pop	{r7, pc}

08004ddc <lsm6dso_angular_rate_raw_get>:
  * @param  buff     buffer that stores data read
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_angular_rate_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 8004ddc:	b580      	push	{r7, lr}
 8004dde:	b086      	sub	sp, #24
 8004de0:	af00      	add	r7, sp, #0
 8004de2:	6078      	str	r0, [r7, #4]
 8004de4:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_OUTX_L_G, buff, 6);
 8004de6:	f107 020c 	add.w	r2, r7, #12
 8004dea:	2306      	movs	r3, #6
 8004dec:	2122      	movs	r1, #34	; 0x22
 8004dee:	6878      	ldr	r0, [r7, #4]
 8004df0:	f7ff fc16 	bl	8004620 <lsm6dso_read_reg>
 8004df4:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 8004df6:	7b7b      	ldrb	r3, [r7, #13]
 8004df8:	b21a      	sxth	r2, r3
 8004dfa:	683b      	ldr	r3, [r7, #0]
 8004dfc:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 8004dfe:	683b      	ldr	r3, [r7, #0]
 8004e00:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004e04:	b29b      	uxth	r3, r3
 8004e06:	021b      	lsls	r3, r3, #8
 8004e08:	b29a      	uxth	r2, r3
 8004e0a:	7b3b      	ldrb	r3, [r7, #12]
 8004e0c:	b29b      	uxth	r3, r3
 8004e0e:	4413      	add	r3, r2
 8004e10:	b29b      	uxth	r3, r3
 8004e12:	b21a      	sxth	r2, r3
 8004e14:	683b      	ldr	r3, [r7, #0]
 8004e16:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 8004e18:	7bfa      	ldrb	r2, [r7, #15]
 8004e1a:	683b      	ldr	r3, [r7, #0]
 8004e1c:	3302      	adds	r3, #2
 8004e1e:	b212      	sxth	r2, r2
 8004e20:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 8004e22:	683b      	ldr	r3, [r7, #0]
 8004e24:	3302      	adds	r3, #2
 8004e26:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004e2a:	b29b      	uxth	r3, r3
 8004e2c:	021b      	lsls	r3, r3, #8
 8004e2e:	b29a      	uxth	r2, r3
 8004e30:	7bbb      	ldrb	r3, [r7, #14]
 8004e32:	b29b      	uxth	r3, r3
 8004e34:	4413      	add	r3, r2
 8004e36:	b29a      	uxth	r2, r3
 8004e38:	683b      	ldr	r3, [r7, #0]
 8004e3a:	3302      	adds	r3, #2
 8004e3c:	b212      	sxth	r2, r2
 8004e3e:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 8004e40:	7c7a      	ldrb	r2, [r7, #17]
 8004e42:	683b      	ldr	r3, [r7, #0]
 8004e44:	3304      	adds	r3, #4
 8004e46:	b212      	sxth	r2, r2
 8004e48:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 8004e4a:	683b      	ldr	r3, [r7, #0]
 8004e4c:	3304      	adds	r3, #4
 8004e4e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004e52:	b29b      	uxth	r3, r3
 8004e54:	021b      	lsls	r3, r3, #8
 8004e56:	b29a      	uxth	r2, r3
 8004e58:	7c3b      	ldrb	r3, [r7, #16]
 8004e5a:	b29b      	uxth	r3, r3
 8004e5c:	4413      	add	r3, r2
 8004e5e:	b29a      	uxth	r2, r3
 8004e60:	683b      	ldr	r3, [r7, #0]
 8004e62:	3304      	adds	r3, #4
 8004e64:	b212      	sxth	r2, r2
 8004e66:	801a      	strh	r2, [r3, #0]

  return ret;
 8004e68:	697b      	ldr	r3, [r7, #20]
}
 8004e6a:	4618      	mov	r0, r3
 8004e6c:	3718      	adds	r7, #24
 8004e6e:	46bd      	mov	sp, r7
 8004e70:	bd80      	pop	{r7, pc}

08004e72 <lsm6dso_acceleration_raw_get>:
  * @param  buff     buffer that stores data read
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_acceleration_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 8004e72:	b580      	push	{r7, lr}
 8004e74:	b086      	sub	sp, #24
 8004e76:	af00      	add	r7, sp, #0
 8004e78:	6078      	str	r0, [r7, #4]
 8004e7a:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_OUTX_L_A, buff, 6);
 8004e7c:	f107 020c 	add.w	r2, r7, #12
 8004e80:	2306      	movs	r3, #6
 8004e82:	2128      	movs	r1, #40	; 0x28
 8004e84:	6878      	ldr	r0, [r7, #4]
 8004e86:	f7ff fbcb 	bl	8004620 <lsm6dso_read_reg>
 8004e8a:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 8004e8c:	7b7b      	ldrb	r3, [r7, #13]
 8004e8e:	b21a      	sxth	r2, r3
 8004e90:	683b      	ldr	r3, [r7, #0]
 8004e92:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 8004e94:	683b      	ldr	r3, [r7, #0]
 8004e96:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004e9a:	b29b      	uxth	r3, r3
 8004e9c:	021b      	lsls	r3, r3, #8
 8004e9e:	b29a      	uxth	r2, r3
 8004ea0:	7b3b      	ldrb	r3, [r7, #12]
 8004ea2:	b29b      	uxth	r3, r3
 8004ea4:	4413      	add	r3, r2
 8004ea6:	b29b      	uxth	r3, r3
 8004ea8:	b21a      	sxth	r2, r3
 8004eaa:	683b      	ldr	r3, [r7, #0]
 8004eac:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 8004eae:	7bfa      	ldrb	r2, [r7, #15]
 8004eb0:	683b      	ldr	r3, [r7, #0]
 8004eb2:	3302      	adds	r3, #2
 8004eb4:	b212      	sxth	r2, r2
 8004eb6:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 8004eb8:	683b      	ldr	r3, [r7, #0]
 8004eba:	3302      	adds	r3, #2
 8004ebc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004ec0:	b29b      	uxth	r3, r3
 8004ec2:	021b      	lsls	r3, r3, #8
 8004ec4:	b29a      	uxth	r2, r3
 8004ec6:	7bbb      	ldrb	r3, [r7, #14]
 8004ec8:	b29b      	uxth	r3, r3
 8004eca:	4413      	add	r3, r2
 8004ecc:	b29a      	uxth	r2, r3
 8004ece:	683b      	ldr	r3, [r7, #0]
 8004ed0:	3302      	adds	r3, #2
 8004ed2:	b212      	sxth	r2, r2
 8004ed4:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 8004ed6:	7c7a      	ldrb	r2, [r7, #17]
 8004ed8:	683b      	ldr	r3, [r7, #0]
 8004eda:	3304      	adds	r3, #4
 8004edc:	b212      	sxth	r2, r2
 8004ede:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 8004ee0:	683b      	ldr	r3, [r7, #0]
 8004ee2:	3304      	adds	r3, #4
 8004ee4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004ee8:	b29b      	uxth	r3, r3
 8004eea:	021b      	lsls	r3, r3, #8
 8004eec:	b29a      	uxth	r2, r3
 8004eee:	7c3b      	ldrb	r3, [r7, #16]
 8004ef0:	b29b      	uxth	r3, r3
 8004ef2:	4413      	add	r3, r2
 8004ef4:	b29a      	uxth	r2, r3
 8004ef6:	683b      	ldr	r3, [r7, #0]
 8004ef8:	3304      	adds	r3, #4
 8004efa:	b212      	sxth	r2, r2
 8004efc:	801a      	strh	r2, [r3, #0]

  return ret;
 8004efe:	697b      	ldr	r3, [r7, #20]
}
 8004f00:	4618      	mov	r0, r3
 8004f02:	3718      	adds	r7, #24
 8004f04:	46bd      	mov	sp, r7
 8004f06:	bd80      	pop	{r7, pc}

08004f08 <lsm6dso_mem_bank_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_mem_bank_set(stmdev_ctx_t *ctx,
                             lsm6dso_reg_access_t val)
{
 8004f08:	b580      	push	{r7, lr}
 8004f0a:	b084      	sub	sp, #16
 8004f0c:	af00      	add	r7, sp, #0
 8004f0e:	6078      	str	r0, [r7, #4]
 8004f10:	460b      	mov	r3, r1
 8004f12:	70fb      	strb	r3, [r7, #3]
  lsm6dso_func_cfg_access_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_FUNC_CFG_ACCESS, (uint8_t *)&reg, 1);
 8004f14:	f107 0208 	add.w	r2, r7, #8
 8004f18:	2301      	movs	r3, #1
 8004f1a:	2101      	movs	r1, #1
 8004f1c:	6878      	ldr	r0, [r7, #4]
 8004f1e:	f7ff fb7f 	bl	8004620 <lsm6dso_read_reg>
 8004f22:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	d10f      	bne.n	8004f4a <lsm6dso_mem_bank_set+0x42>
  {
    reg.reg_access = (uint8_t)val;
 8004f2a:	78fb      	ldrb	r3, [r7, #3]
 8004f2c:	f003 0303 	and.w	r3, r3, #3
 8004f30:	b2da      	uxtb	r2, r3
 8004f32:	7a3b      	ldrb	r3, [r7, #8]
 8004f34:	f362 1387 	bfi	r3, r2, #6, #2
 8004f38:	723b      	strb	r3, [r7, #8]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_FUNC_CFG_ACCESS, (uint8_t *)&reg, 1);
 8004f3a:	f107 0208 	add.w	r2, r7, #8
 8004f3e:	2301      	movs	r3, #1
 8004f40:	2101      	movs	r1, #1
 8004f42:	6878      	ldr	r0, [r7, #4]
 8004f44:	f7ff fb84 	bl	8004650 <lsm6dso_write_reg>
 8004f48:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8004f4a:	68fb      	ldr	r3, [r7, #12]
}
 8004f4c:	4618      	mov	r0, r3
 8004f4e:	3710      	adds	r7, #16
 8004f50:	46bd      	mov	sp, r7
 8004f52:	bd80      	pop	{r7, pc}

08004f54 <lsm6dso_device_id_get>:
  * @param  buff     buffer that stores data read
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 8004f54:	b580      	push	{r7, lr}
 8004f56:	b084      	sub	sp, #16
 8004f58:	af00      	add	r7, sp, #0
 8004f5a:	6078      	str	r0, [r7, #4]
 8004f5c:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_WHO_AM_I, buff, 1);
 8004f5e:	2301      	movs	r3, #1
 8004f60:	683a      	ldr	r2, [r7, #0]
 8004f62:	210f      	movs	r1, #15
 8004f64:	6878      	ldr	r0, [r7, #4]
 8004f66:	f7ff fb5b 	bl	8004620 <lsm6dso_read_reg>
 8004f6a:	60f8      	str	r0, [r7, #12]

  return ret;
 8004f6c:	68fb      	ldr	r3, [r7, #12]
}
 8004f6e:	4618      	mov	r0, r3
 8004f70:	3710      	adds	r7, #16
 8004f72:	46bd      	mov	sp, r7
 8004f74:	bd80      	pop	{r7, pc}

08004f76 <lsm6dso_auto_increment_set>:
  * @param  val      change the values of if_inc in reg CTRL3_C
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_auto_increment_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8004f76:	b580      	push	{r7, lr}
 8004f78:	b084      	sub	sp, #16
 8004f7a:	af00      	add	r7, sp, #0
 8004f7c:	6078      	str	r0, [r7, #4]
 8004f7e:	460b      	mov	r3, r1
 8004f80:	70fb      	strb	r3, [r7, #3]
  lsm6dso_ctrl3_c_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL3_C, (uint8_t *)&reg, 1);
 8004f82:	f107 0208 	add.w	r2, r7, #8
 8004f86:	2301      	movs	r3, #1
 8004f88:	2112      	movs	r1, #18
 8004f8a:	6878      	ldr	r0, [r7, #4]
 8004f8c:	f7ff fb48 	bl	8004620 <lsm6dso_read_reg>
 8004f90:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	d10f      	bne.n	8004fb8 <lsm6dso_auto_increment_set+0x42>
  {
    reg.if_inc = val;
 8004f98:	78fb      	ldrb	r3, [r7, #3]
 8004f9a:	f003 0301 	and.w	r3, r3, #1
 8004f9e:	b2da      	uxtb	r2, r3
 8004fa0:	7a3b      	ldrb	r3, [r7, #8]
 8004fa2:	f362 0382 	bfi	r3, r2, #2, #1
 8004fa6:	723b      	strb	r3, [r7, #8]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL3_C, (uint8_t *)&reg, 1);
 8004fa8:	f107 0208 	add.w	r2, r7, #8
 8004fac:	2301      	movs	r3, #1
 8004fae:	2112      	movs	r1, #18
 8004fb0:	6878      	ldr	r0, [r7, #4]
 8004fb2:	f7ff fb4d 	bl	8004650 <lsm6dso_write_reg>
 8004fb6:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8004fb8:	68fb      	ldr	r3, [r7, #12]
}
 8004fba:	4618      	mov	r0, r3
 8004fbc:	3710      	adds	r7, #16
 8004fbe:	46bd      	mov	sp, r7
 8004fc0:	bd80      	pop	{r7, pc}

08004fc2 <lsm6dso_i3c_disable_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_i3c_disable_set(stmdev_ctx_t *ctx,
                                lsm6dso_i3c_disable_t val)
{
 8004fc2:	b580      	push	{r7, lr}
 8004fc4:	b086      	sub	sp, #24
 8004fc6:	af00      	add	r7, sp, #0
 8004fc8:	6078      	str	r0, [r7, #4]
 8004fca:	460b      	mov	r3, r1
 8004fcc:	70fb      	strb	r3, [r7, #3]
  lsm6dso_i3c_bus_avb_t i3c_bus_avb;
  lsm6dso_ctrl9_xl_t ctrl9_xl;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL9_XL, (uint8_t *)&ctrl9_xl, 1);
 8004fce:	f107 020c 	add.w	r2, r7, #12
 8004fd2:	2301      	movs	r3, #1
 8004fd4:	2118      	movs	r1, #24
 8004fd6:	6878      	ldr	r0, [r7, #4]
 8004fd8:	f7ff fb22 	bl	8004620 <lsm6dso_read_reg>
 8004fdc:	6178      	str	r0, [r7, #20]

  if (ret == 0)
 8004fde:	697b      	ldr	r3, [r7, #20]
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	d111      	bne.n	8005008 <lsm6dso_i3c_disable_set+0x46>
  {
    ctrl9_xl.i3c_disable = ((uint8_t)val & 0x80U) >> 7;
 8004fe4:	78fb      	ldrb	r3, [r7, #3]
 8004fe6:	09db      	lsrs	r3, r3, #7
 8004fe8:	b2db      	uxtb	r3, r3
 8004fea:	f003 0301 	and.w	r3, r3, #1
 8004fee:	b2da      	uxtb	r2, r3
 8004ff0:	7b3b      	ldrb	r3, [r7, #12]
 8004ff2:	f362 0341 	bfi	r3, r2, #1, #1
 8004ff6:	733b      	strb	r3, [r7, #12]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL9_XL, (uint8_t *)&ctrl9_xl, 1);
 8004ff8:	f107 020c 	add.w	r2, r7, #12
 8004ffc:	2301      	movs	r3, #1
 8004ffe:	2118      	movs	r1, #24
 8005000:	6878      	ldr	r0, [r7, #4]
 8005002:	f7ff fb25 	bl	8004650 <lsm6dso_write_reg>
 8005006:	6178      	str	r0, [r7, #20]
  }

  if (ret == 0)
 8005008:	697b      	ldr	r3, [r7, #20]
 800500a:	2b00      	cmp	r3, #0
 800500c:	d107      	bne.n	800501e <lsm6dso_i3c_disable_set+0x5c>
  {
    ret = lsm6dso_read_reg(ctx, LSM6DSO_I3C_BUS_AVB,
 800500e:	f107 0210 	add.w	r2, r7, #16
 8005012:	2301      	movs	r3, #1
 8005014:	2162      	movs	r1, #98	; 0x62
 8005016:	6878      	ldr	r0, [r7, #4]
 8005018:	f7ff fb02 	bl	8004620 <lsm6dso_read_reg>
 800501c:	6178      	str	r0, [r7, #20]
                           (uint8_t *)&i3c_bus_avb, 1);
  }

  if (ret == 0)
 800501e:	697b      	ldr	r3, [r7, #20]
 8005020:	2b00      	cmp	r3, #0
 8005022:	d10f      	bne.n	8005044 <lsm6dso_i3c_disable_set+0x82>
  {
    i3c_bus_avb.i3c_bus_avb_sel = (uint8_t)val & 0x03U;
 8005024:	78fb      	ldrb	r3, [r7, #3]
 8005026:	f003 0303 	and.w	r3, r3, #3
 800502a:	b2da      	uxtb	r2, r3
 800502c:	7c3b      	ldrb	r3, [r7, #16]
 800502e:	f362 03c4 	bfi	r3, r2, #3, #2
 8005032:	743b      	strb	r3, [r7, #16]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_I3C_BUS_AVB,
 8005034:	f107 0210 	add.w	r2, r7, #16
 8005038:	2301      	movs	r3, #1
 800503a:	2162      	movs	r1, #98	; 0x62
 800503c:	6878      	ldr	r0, [r7, #4]
 800503e:	f7ff fb07 	bl	8004650 <lsm6dso_write_reg>
 8005042:	6178      	str	r0, [r7, #20]
                            (uint8_t *)&i3c_bus_avb, 1);
  }

  return ret;
 8005044:	697b      	ldr	r3, [r7, #20]
}
 8005046:	4618      	mov	r0, r3
 8005048:	3718      	adds	r7, #24
 800504a:	46bd      	mov	sp, r7
 800504c:	bd80      	pop	{r7, pc}

0800504e <lsm6dso_fifo_mode_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_fifo_mode_set(stmdev_ctx_t *ctx,
                              lsm6dso_fifo_mode_t val)
{
 800504e:	b580      	push	{r7, lr}
 8005050:	b084      	sub	sp, #16
 8005052:	af00      	add	r7, sp, #0
 8005054:	6078      	str	r0, [r7, #4]
 8005056:	460b      	mov	r3, r1
 8005058:	70fb      	strb	r3, [r7, #3]
  lsm6dso_fifo_ctrl4_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_FIFO_CTRL4, (uint8_t *)&reg, 1);
 800505a:	f107 0208 	add.w	r2, r7, #8
 800505e:	2301      	movs	r3, #1
 8005060:	210a      	movs	r1, #10
 8005062:	6878      	ldr	r0, [r7, #4]
 8005064:	f7ff fadc 	bl	8004620 <lsm6dso_read_reg>
 8005068:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	2b00      	cmp	r3, #0
 800506e:	d10f      	bne.n	8005090 <lsm6dso_fifo_mode_set+0x42>
  {
    reg.fifo_mode = (uint8_t)val;
 8005070:	78fb      	ldrb	r3, [r7, #3]
 8005072:	f003 0307 	and.w	r3, r3, #7
 8005076:	b2da      	uxtb	r2, r3
 8005078:	7a3b      	ldrb	r3, [r7, #8]
 800507a:	f362 0302 	bfi	r3, r2, #0, #3
 800507e:	723b      	strb	r3, [r7, #8]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_FIFO_CTRL4, (uint8_t *)&reg, 1);
 8005080:	f107 0208 	add.w	r2, r7, #8
 8005084:	2301      	movs	r3, #1
 8005086:	210a      	movs	r1, #10
 8005088:	6878      	ldr	r0, [r7, #4]
 800508a:	f7ff fae1 	bl	8004650 <lsm6dso_write_reg>
 800508e:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8005090:	68fb      	ldr	r3, [r7, #12]
}
 8005092:	4618      	mov	r0, r3
 8005094:	3710      	adds	r7, #16
 8005096:	46bd      	mov	sp, r7
 8005098:	bd80      	pop	{r7, pc}

0800509a <lsm6dso_fsm_enable_get>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_fsm_enable_get(stmdev_ctx_t *ctx,
                               lsm6dso_emb_fsm_enable_t *val)
{
 800509a:	b580      	push	{r7, lr}
 800509c:	b084      	sub	sp, #16
 800509e:	af00      	add	r7, sp, #0
 80050a0:	6078      	str	r0, [r7, #4]
 80050a2:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = lsm6dso_mem_bank_set(ctx, LSM6DSO_EMBEDDED_FUNC_BANK);
 80050a4:	2102      	movs	r1, #2
 80050a6:	6878      	ldr	r0, [r7, #4]
 80050a8:	f7ff ff2e 	bl	8004f08 <lsm6dso_mem_bank_set>
 80050ac:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	d106      	bne.n	80050c2 <lsm6dso_fsm_enable_get+0x28>
  {
    ret = lsm6dso_read_reg(ctx, LSM6DSO_FSM_ENABLE_A, (uint8_t *) val, 2);
 80050b4:	2302      	movs	r3, #2
 80050b6:	683a      	ldr	r2, [r7, #0]
 80050b8:	2146      	movs	r1, #70	; 0x46
 80050ba:	6878      	ldr	r0, [r7, #4]
 80050bc:	f7ff fab0 	bl	8004620 <lsm6dso_read_reg>
 80050c0:	60f8      	str	r0, [r7, #12]
  }

  if (ret == 0)
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	d104      	bne.n	80050d2 <lsm6dso_fsm_enable_get+0x38>
  {
    ret = lsm6dso_mem_bank_set(ctx, LSM6DSO_USER_BANK);
 80050c8:	2100      	movs	r1, #0
 80050ca:	6878      	ldr	r0, [r7, #4]
 80050cc:	f7ff ff1c 	bl	8004f08 <lsm6dso_mem_bank_set>
 80050d0:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80050d2:	68fb      	ldr	r3, [r7, #12]
}
 80050d4:	4618      	mov	r0, r3
 80050d6:	3710      	adds	r7, #16
 80050d8:	46bd      	mov	sp, r7
 80050da:	bd80      	pop	{r7, pc}

080050dc <lsm6dso_fsm_data_rate_get>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_fsm_data_rate_get(stmdev_ctx_t *ctx,
                                  lsm6dso_fsm_odr_t *val)
{
 80050dc:	b580      	push	{r7, lr}
 80050de:	b084      	sub	sp, #16
 80050e0:	af00      	add	r7, sp, #0
 80050e2:	6078      	str	r0, [r7, #4]
 80050e4:	6039      	str	r1, [r7, #0]
  lsm6dso_emb_func_odr_cfg_b_t reg;
  int32_t ret;

  ret = lsm6dso_mem_bank_set(ctx, LSM6DSO_EMBEDDED_FUNC_BANK);
 80050e6:	2102      	movs	r1, #2
 80050e8:	6878      	ldr	r0, [r7, #4]
 80050ea:	f7ff ff0d 	bl	8004f08 <lsm6dso_mem_bank_set>
 80050ee:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	d107      	bne.n	8005106 <lsm6dso_fsm_data_rate_get+0x2a>
  {
    ret = lsm6dso_read_reg(ctx, LSM6DSO_EMB_FUNC_ODR_CFG_B,
 80050f6:	f107 0208 	add.w	r2, r7, #8
 80050fa:	2301      	movs	r3, #1
 80050fc:	215f      	movs	r1, #95	; 0x5f
 80050fe:	6878      	ldr	r0, [r7, #4]
 8005100:	f7ff fa8e 	bl	8004620 <lsm6dso_read_reg>
 8005104:	60f8      	str	r0, [r7, #12]
                           (uint8_t *)&reg, 1);
  }

  if (ret == 0)
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	2b00      	cmp	r3, #0
 800510a:	d12a      	bne.n	8005162 <lsm6dso_fsm_data_rate_get+0x86>
  {
    switch (reg.fsm_odr)
 800510c:	7a3b      	ldrb	r3, [r7, #8]
 800510e:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8005112:	b2db      	uxtb	r3, r3
 8005114:	2b03      	cmp	r3, #3
 8005116:	d81b      	bhi.n	8005150 <lsm6dso_fsm_data_rate_get+0x74>
 8005118:	a201      	add	r2, pc, #4	; (adr r2, 8005120 <lsm6dso_fsm_data_rate_get+0x44>)
 800511a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800511e:	bf00      	nop
 8005120:	08005131 	.word	0x08005131
 8005124:	08005139 	.word	0x08005139
 8005128:	08005141 	.word	0x08005141
 800512c:	08005149 	.word	0x08005149
    {
      case LSM6DSO_ODR_FSM_12Hz5:
        *val = LSM6DSO_ODR_FSM_12Hz5;
 8005130:	683b      	ldr	r3, [r7, #0]
 8005132:	2200      	movs	r2, #0
 8005134:	701a      	strb	r2, [r3, #0]
        break;
 8005136:	e00f      	b.n	8005158 <lsm6dso_fsm_data_rate_get+0x7c>

      case LSM6DSO_ODR_FSM_26Hz:
        *val = LSM6DSO_ODR_FSM_26Hz;
 8005138:	683b      	ldr	r3, [r7, #0]
 800513a:	2201      	movs	r2, #1
 800513c:	701a      	strb	r2, [r3, #0]
        break;
 800513e:	e00b      	b.n	8005158 <lsm6dso_fsm_data_rate_get+0x7c>

      case LSM6DSO_ODR_FSM_52Hz:
        *val = LSM6DSO_ODR_FSM_52Hz;
 8005140:	683b      	ldr	r3, [r7, #0]
 8005142:	2202      	movs	r2, #2
 8005144:	701a      	strb	r2, [r3, #0]
        break;
 8005146:	e007      	b.n	8005158 <lsm6dso_fsm_data_rate_get+0x7c>

      case LSM6DSO_ODR_FSM_104Hz:
        *val = LSM6DSO_ODR_FSM_104Hz;
 8005148:	683b      	ldr	r3, [r7, #0]
 800514a:	2203      	movs	r2, #3
 800514c:	701a      	strb	r2, [r3, #0]
        break;
 800514e:	e003      	b.n	8005158 <lsm6dso_fsm_data_rate_get+0x7c>

      default:
        *val = LSM6DSO_ODR_FSM_12Hz5;
 8005150:	683b      	ldr	r3, [r7, #0]
 8005152:	2200      	movs	r2, #0
 8005154:	701a      	strb	r2, [r3, #0]
        break;
 8005156:	bf00      	nop
    }

    ret = lsm6dso_mem_bank_set(ctx, LSM6DSO_USER_BANK);
 8005158:	2100      	movs	r1, #0
 800515a:	6878      	ldr	r0, [r7, #4]
 800515c:	f7ff fed4 	bl	8004f08 <lsm6dso_mem_bank_set>
 8005160:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8005162:	68fb      	ldr	r3, [r7, #12]
}
 8005164:	4618      	mov	r0, r3
 8005166:	3710      	adds	r7, #16
 8005168:	46bd      	mov	sp, r7
 800516a:	bd80      	pop	{r7, pc}

0800516c <IKS01A3_MOTION_SENSOR_Init>:
  *         - MOTION_ACCELERO for instance 1
  *         - MOTION_MAGNETO for instance 2
  * @retval BSP status
  */
int32_t IKS01A3_MOTION_SENSOR_Init(uint32_t Instance, uint32_t Functions)
{
 800516c:	b580      	push	{r7, lr}
 800516e:	b08e      	sub	sp, #56	; 0x38
 8005170:	af00      	add	r7, sp, #0
 8005172:	6078      	str	r0, [r7, #4]
 8005174:	6039      	str	r1, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
 8005176:	2300      	movs	r3, #0
 8005178:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t function = MOTION_GYRO;
 800517a:	2301      	movs	r3, #1
 800517c:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t i;
  uint32_t component_functions = 0;
 800517e:	2300      	movs	r3, #0
 8005180:	62bb      	str	r3, [r7, #40]	; 0x28
  IKS01A3_MOTION_SENSOR_Capabilities_t cap;

  switch (Instance)
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	2b02      	cmp	r3, #2
 8005186:	d06e      	beq.n	8005266 <IKS01A3_MOTION_SENSOR_Init+0xfa>
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	2b02      	cmp	r3, #2
 800518c:	f200 809d 	bhi.w	80052ca <IKS01A3_MOTION_SENSOR_Init+0x15e>
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	2b00      	cmp	r3, #0
 8005194:	d003      	beq.n	800519e <IKS01A3_MOTION_SENSOR_Init+0x32>
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	2b01      	cmp	r3, #1
 800519a:	d032      	beq.n	8005202 <IKS01A3_MOTION_SENSOR_Init+0x96>
 800519c:	e095      	b.n	80052ca <IKS01A3_MOTION_SENSOR_Init+0x15e>
  {
#if (USE_IKS01A3_MOTION_SENSOR_LSM6DSO_0 == 1)
    case IKS01A3_LSM6DSO_0:
      if (LSM6DSO_0_Probe(Functions) != BSP_ERROR_NONE)
 800519e:	6838      	ldr	r0, [r7, #0]
 80051a0:	f000 f966 	bl	8005470 <LSM6DSO_0_Probe>
 80051a4:	4603      	mov	r3, r0
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	d002      	beq.n	80051b0 <IKS01A3_MOTION_SENSOR_Init+0x44>
      {
        return BSP_ERROR_NO_INIT;
 80051aa:	f04f 33ff 	mov.w	r3, #4294967295
 80051ae:	e0cc      	b.n	800534a <IKS01A3_MOTION_SENSOR_Init+0x1de>
      }
      if (MotionDrv[Instance]->GetCapabilities(MotionCompObj[Instance], (void *)&cap) != BSP_ERROR_NONE)
 80051b0:	4a68      	ldr	r2, [pc, #416]	; (8005354 <IKS01A3_MOTION_SENSOR_Init+0x1e8>)
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80051b8:	68db      	ldr	r3, [r3, #12]
 80051ba:	4967      	ldr	r1, [pc, #412]	; (8005358 <IKS01A3_MOTION_SENSOR_Init+0x1ec>)
 80051bc:	687a      	ldr	r2, [r7, #4]
 80051be:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80051c2:	f107 010c 	add.w	r1, r7, #12
 80051c6:	4610      	mov	r0, r2
 80051c8:	4798      	blx	r3
 80051ca:	4603      	mov	r3, r0
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	d002      	beq.n	80051d6 <IKS01A3_MOTION_SENSOR_Init+0x6a>
      {
        return BSP_ERROR_UNKNOWN_COMPONENT;
 80051d0:	f06f 0306 	mvn.w	r3, #6
 80051d4:	e0b9      	b.n	800534a <IKS01A3_MOTION_SENSOR_Init+0x1de>
      }
      if (cap.Acc == 1U)
 80051d6:	7b3b      	ldrb	r3, [r7, #12]
 80051d8:	2b01      	cmp	r3, #1
 80051da:	d103      	bne.n	80051e4 <IKS01A3_MOTION_SENSOR_Init+0x78>
      {
        component_functions |= MOTION_ACCELERO;
 80051dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051de:	f043 0302 	orr.w	r3, r3, #2
 80051e2:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      if (cap.Gyro == 1U)
 80051e4:	7b7b      	ldrb	r3, [r7, #13]
 80051e6:	2b01      	cmp	r3, #1
 80051e8:	d103      	bne.n	80051f2 <IKS01A3_MOTION_SENSOR_Init+0x86>
      {
        component_functions |= MOTION_GYRO;
 80051ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051ec:	f043 0301 	orr.w	r3, r3, #1
 80051f0:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      if (cap.Magneto == 1U)
 80051f2:	7bbb      	ldrb	r3, [r7, #14]
 80051f4:	2b01      	cmp	r3, #1
 80051f6:	d16c      	bne.n	80052d2 <IKS01A3_MOTION_SENSOR_Init+0x166>
      {
        component_functions |= MOTION_MAGNETO;
 80051f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051fa:	f043 0304 	orr.w	r3, r3, #4
 80051fe:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      break;
 8005200:	e067      	b.n	80052d2 <IKS01A3_MOTION_SENSOR_Init+0x166>
#endif

#if (USE_IKS01A3_MOTION_SENSOR_LIS2DW12_0 == 1)
    case IKS01A3_LIS2DW12_0:
      if (LIS2DW12_0_Probe(Functions) != BSP_ERROR_NONE)
 8005202:	6838      	ldr	r0, [r7, #0]
 8005204:	f000 f9f4 	bl	80055f0 <LIS2DW12_0_Probe>
 8005208:	4603      	mov	r3, r0
 800520a:	2b00      	cmp	r3, #0
 800520c:	d002      	beq.n	8005214 <IKS01A3_MOTION_SENSOR_Init+0xa8>
      {
        return BSP_ERROR_NO_INIT;
 800520e:	f04f 33ff 	mov.w	r3, #4294967295
 8005212:	e09a      	b.n	800534a <IKS01A3_MOTION_SENSOR_Init+0x1de>
      }
      if (MotionDrv[Instance]->GetCapabilities(MotionCompObj[Instance], (void *)&cap) != BSP_ERROR_NONE)
 8005214:	4a4f      	ldr	r2, [pc, #316]	; (8005354 <IKS01A3_MOTION_SENSOR_Init+0x1e8>)
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800521c:	68db      	ldr	r3, [r3, #12]
 800521e:	494e      	ldr	r1, [pc, #312]	; (8005358 <IKS01A3_MOTION_SENSOR_Init+0x1ec>)
 8005220:	687a      	ldr	r2, [r7, #4]
 8005222:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8005226:	f107 010c 	add.w	r1, r7, #12
 800522a:	4610      	mov	r0, r2
 800522c:	4798      	blx	r3
 800522e:	4603      	mov	r3, r0
 8005230:	2b00      	cmp	r3, #0
 8005232:	d002      	beq.n	800523a <IKS01A3_MOTION_SENSOR_Init+0xce>
      {
        return BSP_ERROR_UNKNOWN_COMPONENT;
 8005234:	f06f 0306 	mvn.w	r3, #6
 8005238:	e087      	b.n	800534a <IKS01A3_MOTION_SENSOR_Init+0x1de>
      }
      if (cap.Acc == 1U)
 800523a:	7b3b      	ldrb	r3, [r7, #12]
 800523c:	2b01      	cmp	r3, #1
 800523e:	d103      	bne.n	8005248 <IKS01A3_MOTION_SENSOR_Init+0xdc>
      {
        component_functions |= MOTION_ACCELERO;
 8005240:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005242:	f043 0302 	orr.w	r3, r3, #2
 8005246:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      if (cap.Gyro == 1U)
 8005248:	7b7b      	ldrb	r3, [r7, #13]
 800524a:	2b01      	cmp	r3, #1
 800524c:	d103      	bne.n	8005256 <IKS01A3_MOTION_SENSOR_Init+0xea>
      {
        component_functions |= MOTION_GYRO;
 800524e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005250:	f043 0301 	orr.w	r3, r3, #1
 8005254:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      if (cap.Magneto == 1U)
 8005256:	7bbb      	ldrb	r3, [r7, #14]
 8005258:	2b01      	cmp	r3, #1
 800525a:	d13c      	bne.n	80052d6 <IKS01A3_MOTION_SENSOR_Init+0x16a>
      {
        component_functions |= MOTION_MAGNETO;
 800525c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800525e:	f043 0304 	orr.w	r3, r3, #4
 8005262:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      break;
 8005264:	e037      	b.n	80052d6 <IKS01A3_MOTION_SENSOR_Init+0x16a>
#endif

#if (USE_IKS01A3_MOTION_SENSOR_LIS2MDL_0 == 1)
    case IKS01A3_LIS2MDL_0:
      if (LIS2MDL_0_Probe(Functions) != BSP_ERROR_NONE)
 8005266:	6838      	ldr	r0, [r7, #0]
 8005268:	f000 fa6a 	bl	8005740 <LIS2MDL_0_Probe>
 800526c:	4603      	mov	r3, r0
 800526e:	2b00      	cmp	r3, #0
 8005270:	d002      	beq.n	8005278 <IKS01A3_MOTION_SENSOR_Init+0x10c>
      {
        return BSP_ERROR_NO_INIT;
 8005272:	f04f 33ff 	mov.w	r3, #4294967295
 8005276:	e068      	b.n	800534a <IKS01A3_MOTION_SENSOR_Init+0x1de>
      }
      if (MotionDrv[Instance]->GetCapabilities(MotionCompObj[Instance], (void *)&cap) != BSP_ERROR_NONE)
 8005278:	4a36      	ldr	r2, [pc, #216]	; (8005354 <IKS01A3_MOTION_SENSOR_Init+0x1e8>)
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005280:	68db      	ldr	r3, [r3, #12]
 8005282:	4935      	ldr	r1, [pc, #212]	; (8005358 <IKS01A3_MOTION_SENSOR_Init+0x1ec>)
 8005284:	687a      	ldr	r2, [r7, #4]
 8005286:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800528a:	f107 010c 	add.w	r1, r7, #12
 800528e:	4610      	mov	r0, r2
 8005290:	4798      	blx	r3
 8005292:	4603      	mov	r3, r0
 8005294:	2b00      	cmp	r3, #0
 8005296:	d002      	beq.n	800529e <IKS01A3_MOTION_SENSOR_Init+0x132>
      {
        return BSP_ERROR_UNKNOWN_COMPONENT;
 8005298:	f06f 0306 	mvn.w	r3, #6
 800529c:	e055      	b.n	800534a <IKS01A3_MOTION_SENSOR_Init+0x1de>
      }
      if (cap.Acc == 1U)
 800529e:	7b3b      	ldrb	r3, [r7, #12]
 80052a0:	2b01      	cmp	r3, #1
 80052a2:	d103      	bne.n	80052ac <IKS01A3_MOTION_SENSOR_Init+0x140>
      {
        component_functions |= MOTION_ACCELERO;
 80052a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052a6:	f043 0302 	orr.w	r3, r3, #2
 80052aa:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      if (cap.Gyro == 1U)
 80052ac:	7b7b      	ldrb	r3, [r7, #13]
 80052ae:	2b01      	cmp	r3, #1
 80052b0:	d103      	bne.n	80052ba <IKS01A3_MOTION_SENSOR_Init+0x14e>
      {
        component_functions |= MOTION_GYRO;
 80052b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052b4:	f043 0301 	orr.w	r3, r3, #1
 80052b8:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      if (cap.Magneto == 1U)
 80052ba:	7bbb      	ldrb	r3, [r7, #14]
 80052bc:	2b01      	cmp	r3, #1
 80052be:	d10c      	bne.n	80052da <IKS01A3_MOTION_SENSOR_Init+0x16e>
      {
        component_functions |= MOTION_MAGNETO;
 80052c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052c2:	f043 0304 	orr.w	r3, r3, #4
 80052c6:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      break;
 80052c8:	e007      	b.n	80052da <IKS01A3_MOTION_SENSOR_Init+0x16e>
      }
      break;
#endif

    default:
      ret = BSP_ERROR_WRONG_PARAM;
 80052ca:	f06f 0301 	mvn.w	r3, #1
 80052ce:	637b      	str	r3, [r7, #52]	; 0x34
      break;
 80052d0:	e004      	b.n	80052dc <IKS01A3_MOTION_SENSOR_Init+0x170>
      break;
 80052d2:	bf00      	nop
 80052d4:	e002      	b.n	80052dc <IKS01A3_MOTION_SENSOR_Init+0x170>
      break;
 80052d6:	bf00      	nop
 80052d8:	e000      	b.n	80052dc <IKS01A3_MOTION_SENSOR_Init+0x170>
      break;
 80052da:	bf00      	nop
  }

  if (ret != BSP_ERROR_NONE)
 80052dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80052de:	2b00      	cmp	r3, #0
 80052e0:	d001      	beq.n	80052e6 <IKS01A3_MOTION_SENSOR_Init+0x17a>
  {
    return ret;
 80052e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80052e4:	e031      	b.n	800534a <IKS01A3_MOTION_SENSOR_Init+0x1de>
  }

  for (i = 0; i < IKS01A3_MOTION_FUNCTIONS_NBR; i++)
 80052e6:	2300      	movs	r3, #0
 80052e8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80052ea:	e02a      	b.n	8005342 <IKS01A3_MOTION_SENSOR_Init+0x1d6>
  {
    if (((Functions & function) == function) && ((component_functions & function) == function))
 80052ec:	683a      	ldr	r2, [r7, #0]
 80052ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052f0:	4013      	ands	r3, r2
 80052f2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80052f4:	429a      	cmp	r2, r3
 80052f6:	d11e      	bne.n	8005336 <IKS01A3_MOTION_SENSOR_Init+0x1ca>
 80052f8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80052fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052fc:	4013      	ands	r3, r2
 80052fe:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005300:	429a      	cmp	r2, r3
 8005302:	d118      	bne.n	8005336 <IKS01A3_MOTION_SENSOR_Init+0x1ca>
    {
      if (MotionFuncDrv[Instance][FunctionIndex[function]]->Enable(MotionCompObj[Instance]) != BSP_ERROR_NONE)
 8005304:	4a15      	ldr	r2, [pc, #84]	; (800535c <IKS01A3_MOTION_SENSOR_Init+0x1f0>)
 8005306:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005308:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800530c:	4814      	ldr	r0, [pc, #80]	; (8005360 <IKS01A3_MOTION_SENSOR_Init+0x1f4>)
 800530e:	687a      	ldr	r2, [r7, #4]
 8005310:	4613      	mov	r3, r2
 8005312:	005b      	lsls	r3, r3, #1
 8005314:	4413      	add	r3, r2
 8005316:	440b      	add	r3, r1
 8005318:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	490e      	ldr	r1, [pc, #56]	; (8005358 <IKS01A3_MOTION_SENSOR_Init+0x1ec>)
 8005320:	687a      	ldr	r2, [r7, #4]
 8005322:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8005326:	4610      	mov	r0, r2
 8005328:	4798      	blx	r3
 800532a:	4603      	mov	r3, r0
 800532c:	2b00      	cmp	r3, #0
 800532e:	d002      	beq.n	8005336 <IKS01A3_MOTION_SENSOR_Init+0x1ca>
      {
        return BSP_ERROR_COMPONENT_FAILURE;
 8005330:	f06f 0304 	mvn.w	r3, #4
 8005334:	e009      	b.n	800534a <IKS01A3_MOTION_SENSOR_Init+0x1de>
      }
    }
    function = function << 1;
 8005336:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005338:	005b      	lsls	r3, r3, #1
 800533a:	633b      	str	r3, [r7, #48]	; 0x30
  for (i = 0; i < IKS01A3_MOTION_FUNCTIONS_NBR; i++)
 800533c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800533e:	3301      	adds	r3, #1
 8005340:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005342:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005344:	2b02      	cmp	r3, #2
 8005346:	d9d1      	bls.n	80052ec <IKS01A3_MOTION_SENSOR_Init+0x180>
  }

  return ret;
 8005348:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800534a:	4618      	mov	r0, r3
 800534c:	3738      	adds	r7, #56	; 0x38
 800534e:	46bd      	mov	sp, r7
 8005350:	bd80      	pop	{r7, pc}
 8005352:	bf00      	nop
 8005354:	200001a0 	.word	0x200001a0
 8005358:	20000170 	.word	0x20000170
 800535c:	200000c4 	.word	0x200000c4
 8005360:	2000017c 	.word	0x2000017c

08005364 <IKS01A3_MOTION_SENSOR_Enable>:
  *         - MOTION_ACCELERO for instance 1
  *         - MOTION_MAGNETO for instance 2
  * @retval BSP status
  */
int32_t IKS01A3_MOTION_SENSOR_Enable(uint32_t Instance, uint32_t Function)
{
 8005364:	b580      	push	{r7, lr}
 8005366:	b084      	sub	sp, #16
 8005368:	af00      	add	r7, sp, #0
 800536a:	6078      	str	r0, [r7, #4]
 800536c:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (Instance >= IKS01A3_MOTION_INSTANCES_NBR)
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	2b02      	cmp	r3, #2
 8005372:	d903      	bls.n	800537c <IKS01A3_MOTION_SENSOR_Enable+0x18>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8005374:	f06f 0301 	mvn.w	r3, #1
 8005378:	60fb      	str	r3, [r7, #12]
 800537a:	e028      	b.n	80053ce <IKS01A3_MOTION_SENSOR_Enable+0x6a>
  }
  else
  {
    if ((MotionCtx[Instance].Functions & Function) == Function)
 800537c:	4a16      	ldr	r2, [pc, #88]	; (80053d8 <IKS01A3_MOTION_SENSOR_Enable+0x74>)
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8005384:	683b      	ldr	r3, [r7, #0]
 8005386:	4013      	ands	r3, r2
 8005388:	683a      	ldr	r2, [r7, #0]
 800538a:	429a      	cmp	r2, r3
 800538c:	d11c      	bne.n	80053c8 <IKS01A3_MOTION_SENSOR_Enable+0x64>
    {
      if (MotionFuncDrv[Instance][FunctionIndex[Function]]->Enable(MotionCompObj[Instance]) != BSP_ERROR_NONE)
 800538e:	4a13      	ldr	r2, [pc, #76]	; (80053dc <IKS01A3_MOTION_SENSOR_Enable+0x78>)
 8005390:	683b      	ldr	r3, [r7, #0]
 8005392:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8005396:	4812      	ldr	r0, [pc, #72]	; (80053e0 <IKS01A3_MOTION_SENSOR_Enable+0x7c>)
 8005398:	687a      	ldr	r2, [r7, #4]
 800539a:	4613      	mov	r3, r2
 800539c:	005b      	lsls	r3, r3, #1
 800539e:	4413      	add	r3, r2
 80053a0:	440b      	add	r3, r1
 80053a2:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	490e      	ldr	r1, [pc, #56]	; (80053e4 <IKS01A3_MOTION_SENSOR_Enable+0x80>)
 80053aa:	687a      	ldr	r2, [r7, #4]
 80053ac:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80053b0:	4610      	mov	r0, r2
 80053b2:	4798      	blx	r3
 80053b4:	4603      	mov	r3, r0
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	d003      	beq.n	80053c2 <IKS01A3_MOTION_SENSOR_Enable+0x5e>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 80053ba:	f06f 0304 	mvn.w	r3, #4
 80053be:	60fb      	str	r3, [r7, #12]
 80053c0:	e005      	b.n	80053ce <IKS01A3_MOTION_SENSOR_Enable+0x6a>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 80053c2:	2300      	movs	r3, #0
 80053c4:	60fb      	str	r3, [r7, #12]
 80053c6:	e002      	b.n	80053ce <IKS01A3_MOTION_SENSOR_Enable+0x6a>
      }
    }
    else
    {
      ret = BSP_ERROR_WRONG_PARAM;
 80053c8:	f06f 0301 	mvn.w	r3, #1
 80053cc:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 80053ce:	68fb      	ldr	r3, [r7, #12]
}
 80053d0:	4618      	mov	r0, r3
 80053d2:	3710      	adds	r7, #16
 80053d4:	46bd      	mov	sp, r7
 80053d6:	bd80      	pop	{r7, pc}
 80053d8:	200001ac 	.word	0x200001ac
 80053dc:	200000c4 	.word	0x200000c4
 80053e0:	2000017c 	.word	0x2000017c
 80053e4:	20000170 	.word	0x20000170

080053e8 <IKS01A3_MOTION_SENSOR_GetAxes>:
  *         - MOTION_MAGNETO for instance 2
  * @param  Axes pointer to axes data structure
  * @retval BSP status
  */
int32_t IKS01A3_MOTION_SENSOR_GetAxes(uint32_t Instance, uint32_t Function, IKS01A3_MOTION_SENSOR_Axes_t *Axes)
{
 80053e8:	b580      	push	{r7, lr}
 80053ea:	b086      	sub	sp, #24
 80053ec:	af00      	add	r7, sp, #0
 80053ee:	60f8      	str	r0, [r7, #12]
 80053f0:	60b9      	str	r1, [r7, #8]
 80053f2:	607a      	str	r2, [r7, #4]
  int32_t ret;

  if (Instance >= IKS01A3_MOTION_INSTANCES_NBR)
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	2b02      	cmp	r3, #2
 80053f8:	d903      	bls.n	8005402 <IKS01A3_MOTION_SENSOR_GetAxes+0x1a>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 80053fa:	f06f 0301 	mvn.w	r3, #1
 80053fe:	617b      	str	r3, [r7, #20]
 8005400:	e029      	b.n	8005456 <IKS01A3_MOTION_SENSOR_GetAxes+0x6e>
  }
  else
  {
    if ((MotionCtx[Instance].Functions & Function) == Function)
 8005402:	4a17      	ldr	r2, [pc, #92]	; (8005460 <IKS01A3_MOTION_SENSOR_GetAxes+0x78>)
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800540a:	68bb      	ldr	r3, [r7, #8]
 800540c:	4013      	ands	r3, r2
 800540e:	68ba      	ldr	r2, [r7, #8]
 8005410:	429a      	cmp	r2, r3
 8005412:	d11d      	bne.n	8005450 <IKS01A3_MOTION_SENSOR_GetAxes+0x68>
    {
      if (MotionFuncDrv[Instance][FunctionIndex[Function]]->GetAxes(MotionCompObj[Instance], Axes) != BSP_ERROR_NONE)
 8005414:	4a13      	ldr	r2, [pc, #76]	; (8005464 <IKS01A3_MOTION_SENSOR_GetAxes+0x7c>)
 8005416:	68bb      	ldr	r3, [r7, #8]
 8005418:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800541c:	4812      	ldr	r0, [pc, #72]	; (8005468 <IKS01A3_MOTION_SENSOR_GetAxes+0x80>)
 800541e:	68fa      	ldr	r2, [r7, #12]
 8005420:	4613      	mov	r3, r2
 8005422:	005b      	lsls	r3, r3, #1
 8005424:	4413      	add	r3, r2
 8005426:	440b      	add	r3, r1
 8005428:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 800542c:	69db      	ldr	r3, [r3, #28]
 800542e:	490f      	ldr	r1, [pc, #60]	; (800546c <IKS01A3_MOTION_SENSOR_GetAxes+0x84>)
 8005430:	68fa      	ldr	r2, [r7, #12]
 8005432:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8005436:	6879      	ldr	r1, [r7, #4]
 8005438:	4610      	mov	r0, r2
 800543a:	4798      	blx	r3
 800543c:	4603      	mov	r3, r0
 800543e:	2b00      	cmp	r3, #0
 8005440:	d003      	beq.n	800544a <IKS01A3_MOTION_SENSOR_GetAxes+0x62>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8005442:	f06f 0304 	mvn.w	r3, #4
 8005446:	617b      	str	r3, [r7, #20]
 8005448:	e005      	b.n	8005456 <IKS01A3_MOTION_SENSOR_GetAxes+0x6e>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 800544a:	2300      	movs	r3, #0
 800544c:	617b      	str	r3, [r7, #20]
 800544e:	e002      	b.n	8005456 <IKS01A3_MOTION_SENSOR_GetAxes+0x6e>
      }
    }
    else
    {
      ret = BSP_ERROR_WRONG_PARAM;
 8005450:	f06f 0301 	mvn.w	r3, #1
 8005454:	617b      	str	r3, [r7, #20]
    }
  }

  return ret;
 8005456:	697b      	ldr	r3, [r7, #20]
}
 8005458:	4618      	mov	r0, r3
 800545a:	3718      	adds	r7, #24
 800545c:	46bd      	mov	sp, r7
 800545e:	bd80      	pop	{r7, pc}
 8005460:	200001ac 	.word	0x200001ac
 8005464:	200000c4 	.word	0x200000c4
 8005468:	2000017c 	.word	0x2000017c
 800546c:	20000170 	.word	0x20000170

08005470 <LSM6DSO_0_Probe>:
/**
  * @brief  Register Bus IOs for instance 0 if component ID is OK
  * @retval BSP status
  */
static int32_t LSM6DSO_0_Probe(uint32_t Functions)
{
 8005470:	b580      	push	{r7, lr}
 8005472:	b094      	sub	sp, #80	; 0x50
 8005474:	af00      	add	r7, sp, #0
 8005476:	6078      	str	r0, [r7, #4]
  LSM6DSO_IO_t            io_ctx;
  uint8_t                 id;
  static LSM6DSO_Object_t lsm6dso_obj_0;
  LSM6DSO_Capabilities_t  cap;
  int32_t ret = BSP_ERROR_NONE;
 8005478:	2300      	movs	r3, #0
 800547a:	64fb      	str	r3, [r7, #76]	; 0x4c

  /* Configure the accelero driver */
  io_ctx.BusType     = LSM6DSO_I2C_BUS; /* I2C */
 800547c:	2300      	movs	r3, #0
 800547e:	637b      	str	r3, [r7, #52]	; 0x34
  io_ctx.Address     = LSM6DSO_I2C_ADD_H;
 8005480:	23d7      	movs	r3, #215	; 0xd7
 8005482:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  io_ctx.Init        = IKS01A3_I2C_Init;
 8005486:	4b4b      	ldr	r3, [pc, #300]	; (80055b4 <LSM6DSO_0_Probe+0x144>)
 8005488:	62fb      	str	r3, [r7, #44]	; 0x2c
  io_ctx.DeInit      = IKS01A3_I2C_DeInit;
 800548a:	4b4b      	ldr	r3, [pc, #300]	; (80055b8 <LSM6DSO_0_Probe+0x148>)
 800548c:	633b      	str	r3, [r7, #48]	; 0x30
  io_ctx.ReadReg     = IKS01A3_I2C_ReadReg;
 800548e:	4b4b      	ldr	r3, [pc, #300]	; (80055bc <LSM6DSO_0_Probe+0x14c>)
 8005490:	643b      	str	r3, [r7, #64]	; 0x40
  io_ctx.WriteReg    = IKS01A3_I2C_WriteReg;
 8005492:	4b4b      	ldr	r3, [pc, #300]	; (80055c0 <LSM6DSO_0_Probe+0x150>)
 8005494:	63fb      	str	r3, [r7, #60]	; 0x3c
  io_ctx.GetTick     = IKS01A3_GetTick;
 8005496:	4b4b      	ldr	r3, [pc, #300]	; (80055c4 <LSM6DSO_0_Probe+0x154>)
 8005498:	647b      	str	r3, [r7, #68]	; 0x44
  io_ctx.Delay       = IKS01A3_Delay;
 800549a:	4b4b      	ldr	r3, [pc, #300]	; (80055c8 <LSM6DSO_0_Probe+0x158>)
 800549c:	64bb      	str	r3, [r7, #72]	; 0x48

  if (LSM6DSO_RegisterBusIO(&lsm6dso_obj_0, &io_ctx) != LSM6DSO_OK)
 800549e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80054a2:	4619      	mov	r1, r3
 80054a4:	4849      	ldr	r0, [pc, #292]	; (80055cc <LSM6DSO_0_Probe+0x15c>)
 80054a6:	f7fd fe81 	bl	80031ac <LSM6DSO_RegisterBusIO>
 80054aa:	4603      	mov	r3, r0
 80054ac:	2b00      	cmp	r3, #0
 80054ae:	d003      	beq.n	80054b8 <LSM6DSO_0_Probe+0x48>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 80054b0:	f06f 0306 	mvn.w	r3, #6
 80054b4:	64fb      	str	r3, [r7, #76]	; 0x4c
 80054b6:	e077      	b.n	80055a8 <LSM6DSO_0_Probe+0x138>
  }
  else if (LSM6DSO_ReadID(&lsm6dso_obj_0, &id) != LSM6DSO_OK)
 80054b8:	f107 032b 	add.w	r3, r7, #43	; 0x2b
 80054bc:	4619      	mov	r1, r3
 80054be:	4843      	ldr	r0, [pc, #268]	; (80055cc <LSM6DSO_0_Probe+0x15c>)
 80054c0:	f7fd ff7a 	bl	80033b8 <LSM6DSO_ReadID>
 80054c4:	4603      	mov	r3, r0
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	d003      	beq.n	80054d2 <LSM6DSO_0_Probe+0x62>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 80054ca:	f06f 0306 	mvn.w	r3, #6
 80054ce:	64fb      	str	r3, [r7, #76]	; 0x4c
 80054d0:	e06a      	b.n	80055a8 <LSM6DSO_0_Probe+0x138>
  }
  else if (id != LSM6DSO_ID)
 80054d2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80054d6:	2b6c      	cmp	r3, #108	; 0x6c
 80054d8:	d003      	beq.n	80054e2 <LSM6DSO_0_Probe+0x72>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 80054da:	f06f 0306 	mvn.w	r3, #6
 80054de:	64fb      	str	r3, [r7, #76]	; 0x4c
 80054e0:	e062      	b.n	80055a8 <LSM6DSO_0_Probe+0x138>
  }
  else
  {
    (void)LSM6DSO_GetCapabilities(&lsm6dso_obj_0, &cap);
 80054e2:	f107 030c 	add.w	r3, r7, #12
 80054e6:	4619      	mov	r1, r3
 80054e8:	4838      	ldr	r0, [pc, #224]	; (80055cc <LSM6DSO_0_Probe+0x15c>)
 80054ea:	f7fd ff7b 	bl	80033e4 <LSM6DSO_GetCapabilities>
    MotionCtx[IKS01A3_LSM6DSO_0].Functions = ((uint32_t)cap.Gyro) | ((uint32_t)cap.Acc << 1) | ((uint32_t)cap.Magneto << 2);
 80054ee:	7b7b      	ldrb	r3, [r7, #13]
 80054f0:	461a      	mov	r2, r3
 80054f2:	7b3b      	ldrb	r3, [r7, #12]
 80054f4:	005b      	lsls	r3, r3, #1
 80054f6:	431a      	orrs	r2, r3
 80054f8:	7bbb      	ldrb	r3, [r7, #14]
 80054fa:	009b      	lsls	r3, r3, #2
 80054fc:	4313      	orrs	r3, r2
 80054fe:	4a34      	ldr	r2, [pc, #208]	; (80055d0 <LSM6DSO_0_Probe+0x160>)
 8005500:	6013      	str	r3, [r2, #0]

    MotionCompObj[IKS01A3_LSM6DSO_0] = &lsm6dso_obj_0;
 8005502:	4b34      	ldr	r3, [pc, #208]	; (80055d4 <LSM6DSO_0_Probe+0x164>)
 8005504:	4a31      	ldr	r2, [pc, #196]	; (80055cc <LSM6DSO_0_Probe+0x15c>)
 8005506:	601a      	str	r2, [r3, #0]
    /* The second cast (void *) is added to bypass Misra R11.3 rule */
    MotionDrv[IKS01A3_LSM6DSO_0] = (MOTION_SENSOR_CommonDrv_t *)(void *)&LSM6DSO_COMMON_Driver;
 8005508:	4b33      	ldr	r3, [pc, #204]	; (80055d8 <LSM6DSO_0_Probe+0x168>)
 800550a:	4a34      	ldr	r2, [pc, #208]	; (80055dc <LSM6DSO_0_Probe+0x16c>)
 800550c:	601a      	str	r2, [r3, #0]

    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_GYRO) == MOTION_GYRO) && (cap.Gyro == 1U))
 800550e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005510:	2b00      	cmp	r3, #0
 8005512:	d11d      	bne.n	8005550 <LSM6DSO_0_Probe+0xe0>
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	f003 0301 	and.w	r3, r3, #1
 800551a:	2b00      	cmp	r3, #0
 800551c:	d018      	beq.n	8005550 <LSM6DSO_0_Probe+0xe0>
 800551e:	7b7b      	ldrb	r3, [r7, #13]
 8005520:	2b01      	cmp	r3, #1
 8005522:	d115      	bne.n	8005550 <LSM6DSO_0_Probe+0xe0>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      MotionFuncDrv[IKS01A3_LSM6DSO_0][FunctionIndex[MOTION_GYRO]] = (MOTION_SENSOR_FuncDrv_t *)(void *)&LSM6DSO_GYRO_Driver;
 8005524:	4b2e      	ldr	r3, [pc, #184]	; (80055e0 <LSM6DSO_0_Probe+0x170>)
 8005526:	685b      	ldr	r3, [r3, #4]
 8005528:	4a2e      	ldr	r2, [pc, #184]	; (80055e4 <LSM6DSO_0_Probe+0x174>)
 800552a:	492f      	ldr	r1, [pc, #188]	; (80055e8 <LSM6DSO_0_Probe+0x178>)
 800552c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

      if (MotionDrv[IKS01A3_LSM6DSO_0]->Init(MotionCompObj[IKS01A3_LSM6DSO_0]) != LSM6DSO_OK)
 8005530:	4b29      	ldr	r3, [pc, #164]	; (80055d8 <LSM6DSO_0_Probe+0x168>)
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	4a27      	ldr	r2, [pc, #156]	; (80055d4 <LSM6DSO_0_Probe+0x164>)
 8005538:	6812      	ldr	r2, [r2, #0]
 800553a:	4610      	mov	r0, r2
 800553c:	4798      	blx	r3
 800553e:	4603      	mov	r3, r0
 8005540:	2b00      	cmp	r3, #0
 8005542:	d003      	beq.n	800554c <LSM6DSO_0_Probe+0xdc>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8005544:	f06f 0304 	mvn.w	r3, #4
 8005548:	64fb      	str	r3, [r7, #76]	; 0x4c
 800554a:	e001      	b.n	8005550 <LSM6DSO_0_Probe+0xe0>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 800554c:	2300      	movs	r3, #0
 800554e:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_ACCELERO) == MOTION_ACCELERO) && (cap.Acc == 1U))
 8005550:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005552:	2b00      	cmp	r3, #0
 8005554:	d11d      	bne.n	8005592 <LSM6DSO_0_Probe+0x122>
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	f003 0302 	and.w	r3, r3, #2
 800555c:	2b00      	cmp	r3, #0
 800555e:	d018      	beq.n	8005592 <LSM6DSO_0_Probe+0x122>
 8005560:	7b3b      	ldrb	r3, [r7, #12]
 8005562:	2b01      	cmp	r3, #1
 8005564:	d115      	bne.n	8005592 <LSM6DSO_0_Probe+0x122>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      MotionFuncDrv[IKS01A3_LSM6DSO_0][FunctionIndex[MOTION_ACCELERO]] = (MOTION_SENSOR_FuncDrv_t *)(
 8005566:	4b1e      	ldr	r3, [pc, #120]	; (80055e0 <LSM6DSO_0_Probe+0x170>)
 8005568:	689b      	ldr	r3, [r3, #8]
 800556a:	4a1e      	ldr	r2, [pc, #120]	; (80055e4 <LSM6DSO_0_Probe+0x174>)
 800556c:	491f      	ldr	r1, [pc, #124]	; (80055ec <LSM6DSO_0_Probe+0x17c>)
 800556e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                                                                           void *)&LSM6DSO_ACC_Driver;

      if (MotionDrv[IKS01A3_LSM6DSO_0]->Init(MotionCompObj[IKS01A3_LSM6DSO_0]) != LSM6DSO_OK)
 8005572:	4b19      	ldr	r3, [pc, #100]	; (80055d8 <LSM6DSO_0_Probe+0x168>)
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	4a16      	ldr	r2, [pc, #88]	; (80055d4 <LSM6DSO_0_Probe+0x164>)
 800557a:	6812      	ldr	r2, [r2, #0]
 800557c:	4610      	mov	r0, r2
 800557e:	4798      	blx	r3
 8005580:	4603      	mov	r3, r0
 8005582:	2b00      	cmp	r3, #0
 8005584:	d003      	beq.n	800558e <LSM6DSO_0_Probe+0x11e>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8005586:	f06f 0304 	mvn.w	r3, #4
 800558a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800558c:	e001      	b.n	8005592 <LSM6DSO_0_Probe+0x122>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 800558e:	2300      	movs	r3, #0
 8005590:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_MAGNETO) == MOTION_MAGNETO))
 8005592:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005594:	2b00      	cmp	r3, #0
 8005596:	d107      	bne.n	80055a8 <LSM6DSO_0_Probe+0x138>
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	f003 0304 	and.w	r3, r3, #4
 800559e:	2b00      	cmp	r3, #0
 80055a0:	d002      	beq.n	80055a8 <LSM6DSO_0_Probe+0x138>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 80055a2:	f06f 0304 	mvn.w	r3, #4
 80055a6:	64fb      	str	r3, [r7, #76]	; 0x4c
    }
  }
  return ret;
 80055a8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
}
 80055aa:	4618      	mov	r0, r3
 80055ac:	3750      	adds	r7, #80	; 0x50
 80055ae:	46bd      	mov	sp, r7
 80055b0:	bd80      	pop	{r7, pc}
 80055b2:	bf00      	nop
 80055b4:	080007c1 	.word	0x080007c1
 80055b8:	08000825 	.word	0x08000825
 80055bc:	080008d9 	.word	0x080008d9
 80055c0:	08000875 	.word	0x08000875
 80055c4:	0800093d 	.word	0x0800093d
 80055c8:	08005975 	.word	0x08005975
 80055cc:	200001b8 	.word	0x200001b8
 80055d0:	200001ac 	.word	0x200001ac
 80055d4:	20000170 	.word	0x20000170
 80055d8:	200001a0 	.word	0x200001a0
 80055dc:	2000006c 	.word	0x2000006c
 80055e0:	200000c4 	.word	0x200000c4
 80055e4:	2000017c 	.word	0x2000017c
 80055e8:	200000a0 	.word	0x200000a0
 80055ec:	2000007c 	.word	0x2000007c

080055f0 <LIS2DW12_0_Probe>:
/**
  * @brief  Register Bus IOs for instance 1 if component ID is OK
  * @retval BSP status
  */
static int32_t LIS2DW12_0_Probe(uint32_t Functions)
{
 80055f0:	b580      	push	{r7, lr}
 80055f2:	b094      	sub	sp, #80	; 0x50
 80055f4:	af00      	add	r7, sp, #0
 80055f6:	6078      	str	r0, [r7, #4]
  LIS2DW12_IO_t            io_ctx;
  uint8_t                  id;
  static LIS2DW12_Object_t lis2dw12_obj_0;
  LIS2DW12_Capabilities_t  cap;
  int32_t ret = BSP_ERROR_NONE;
 80055f8:	2300      	movs	r3, #0
 80055fa:	64fb      	str	r3, [r7, #76]	; 0x4c

  /* Configure the accelero driver */
  io_ctx.BusType     = LIS2DW12_I2C_BUS; /* I2C */
 80055fc:	2300      	movs	r3, #0
 80055fe:	637b      	str	r3, [r7, #52]	; 0x34
  io_ctx.Address     = LIS2DW12_I2C_ADD_H;
 8005600:	2333      	movs	r3, #51	; 0x33
 8005602:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  io_ctx.Init        = IKS01A3_I2C_Init;
 8005606:	4b40      	ldr	r3, [pc, #256]	; (8005708 <LIS2DW12_0_Probe+0x118>)
 8005608:	62fb      	str	r3, [r7, #44]	; 0x2c
  io_ctx.DeInit      = IKS01A3_I2C_DeInit;
 800560a:	4b40      	ldr	r3, [pc, #256]	; (800570c <LIS2DW12_0_Probe+0x11c>)
 800560c:	633b      	str	r3, [r7, #48]	; 0x30
  io_ctx.ReadReg     = IKS01A3_I2C_ReadReg;
 800560e:	4b40      	ldr	r3, [pc, #256]	; (8005710 <LIS2DW12_0_Probe+0x120>)
 8005610:	643b      	str	r3, [r7, #64]	; 0x40
  io_ctx.WriteReg    = IKS01A3_I2C_WriteReg;
 8005612:	4b40      	ldr	r3, [pc, #256]	; (8005714 <LIS2DW12_0_Probe+0x124>)
 8005614:	63fb      	str	r3, [r7, #60]	; 0x3c
  io_ctx.GetTick     = IKS01A3_GetTick;
 8005616:	4b40      	ldr	r3, [pc, #256]	; (8005718 <LIS2DW12_0_Probe+0x128>)
 8005618:	647b      	str	r3, [r7, #68]	; 0x44
  io_ctx.Delay       = IKS01A3_Delay;
 800561a:	4b40      	ldr	r3, [pc, #256]	; (800571c <LIS2DW12_0_Probe+0x12c>)
 800561c:	64bb      	str	r3, [r7, #72]	; 0x48

  if (LIS2DW12_RegisterBusIO(&lis2dw12_obj_0, &io_ctx) != LIS2DW12_OK)
 800561e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8005622:	4619      	mov	r1, r3
 8005624:	483e      	ldr	r0, [pc, #248]	; (8005720 <LIS2DW12_0_Probe+0x130>)
 8005626:	f7fb fa67 	bl	8000af8 <LIS2DW12_RegisterBusIO>
 800562a:	4603      	mov	r3, r0
 800562c:	2b00      	cmp	r3, #0
 800562e:	d003      	beq.n	8005638 <LIS2DW12_0_Probe+0x48>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8005630:	f06f 0306 	mvn.w	r3, #6
 8005634:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005636:	e062      	b.n	80056fe <LIS2DW12_0_Probe+0x10e>
  }
  else if (LIS2DW12_ReadID(&lis2dw12_obj_0, &id) != LIS2DW12_OK)
 8005638:	f107 032b 	add.w	r3, r7, #43	; 0x2b
 800563c:	4619      	mov	r1, r3
 800563e:	4838      	ldr	r0, [pc, #224]	; (8005720 <LIS2DW12_0_Probe+0x130>)
 8005640:	f7fb fb48 	bl	8000cd4 <LIS2DW12_ReadID>
 8005644:	4603      	mov	r3, r0
 8005646:	2b00      	cmp	r3, #0
 8005648:	d003      	beq.n	8005652 <LIS2DW12_0_Probe+0x62>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800564a:	f06f 0306 	mvn.w	r3, #6
 800564e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005650:	e055      	b.n	80056fe <LIS2DW12_0_Probe+0x10e>
  }
  else if (id != LIS2DW12_ID)
 8005652:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8005656:	2b44      	cmp	r3, #68	; 0x44
 8005658:	d003      	beq.n	8005662 <LIS2DW12_0_Probe+0x72>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800565a:	f06f 0306 	mvn.w	r3, #6
 800565e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005660:	e04d      	b.n	80056fe <LIS2DW12_0_Probe+0x10e>
  }
  else
  {
    (void)LIS2DW12_GetCapabilities(&lis2dw12_obj_0, &cap);
 8005662:	f107 030c 	add.w	r3, r7, #12
 8005666:	4619      	mov	r1, r3
 8005668:	482d      	ldr	r0, [pc, #180]	; (8005720 <LIS2DW12_0_Probe+0x130>)
 800566a:	f7fb fb49 	bl	8000d00 <LIS2DW12_GetCapabilities>
    MotionCtx[IKS01A3_LIS2DW12_0].Functions = ((uint32_t)cap.Gyro) | ((uint32_t)cap.Acc << 1) | ((uint32_t)cap.Magneto << 2);
 800566e:	7b7b      	ldrb	r3, [r7, #13]
 8005670:	461a      	mov	r2, r3
 8005672:	7b3b      	ldrb	r3, [r7, #12]
 8005674:	005b      	lsls	r3, r3, #1
 8005676:	431a      	orrs	r2, r3
 8005678:	7bbb      	ldrb	r3, [r7, #14]
 800567a:	009b      	lsls	r3, r3, #2
 800567c:	4313      	orrs	r3, r2
 800567e:	4a29      	ldr	r2, [pc, #164]	; (8005724 <LIS2DW12_0_Probe+0x134>)
 8005680:	6053      	str	r3, [r2, #4]

    MotionCompObj[IKS01A3_LIS2DW12_0] = &lis2dw12_obj_0;
 8005682:	4b29      	ldr	r3, [pc, #164]	; (8005728 <LIS2DW12_0_Probe+0x138>)
 8005684:	4a26      	ldr	r2, [pc, #152]	; (8005720 <LIS2DW12_0_Probe+0x130>)
 8005686:	605a      	str	r2, [r3, #4]
    /* The second cast (void *) is added to bypass Misra R11.3 rule */
    MotionDrv[IKS01A3_LIS2DW12_0] = (MOTION_SENSOR_CommonDrv_t *)(void *)&LIS2DW12_COMMON_Driver;
 8005688:	4b28      	ldr	r3, [pc, #160]	; (800572c <LIS2DW12_0_Probe+0x13c>)
 800568a:	4a29      	ldr	r2, [pc, #164]	; (8005730 <LIS2DW12_0_Probe+0x140>)
 800568c:	605a      	str	r2, [r3, #4]

    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_ACCELERO) == MOTION_ACCELERO) && (cap.Acc == 1U))
 800568e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005690:	2b00      	cmp	r3, #0
 8005692:	d11e      	bne.n	80056d2 <LIS2DW12_0_Probe+0xe2>
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	f003 0302 	and.w	r3, r3, #2
 800569a:	2b00      	cmp	r3, #0
 800569c:	d019      	beq.n	80056d2 <LIS2DW12_0_Probe+0xe2>
 800569e:	7b3b      	ldrb	r3, [r7, #12]
 80056a0:	2b01      	cmp	r3, #1
 80056a2:	d116      	bne.n	80056d2 <LIS2DW12_0_Probe+0xe2>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      MotionFuncDrv[IKS01A3_LIS2DW12_0][FunctionIndex[MOTION_ACCELERO]] = (MOTION_SENSOR_FuncDrv_t *)(
 80056a4:	4b23      	ldr	r3, [pc, #140]	; (8005734 <LIS2DW12_0_Probe+0x144>)
 80056a6:	689b      	ldr	r3, [r3, #8]
 80056a8:	4a23      	ldr	r2, [pc, #140]	; (8005738 <LIS2DW12_0_Probe+0x148>)
 80056aa:	3303      	adds	r3, #3
 80056ac:	4923      	ldr	r1, [pc, #140]	; (800573c <LIS2DW12_0_Probe+0x14c>)
 80056ae:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                                                                            void *)&LIS2DW12_ACC_Driver;

      if (MotionDrv[IKS01A3_LIS2DW12_0]->Init(MotionCompObj[IKS01A3_LIS2DW12_0]) != LIS2DW12_OK)
 80056b2:	4b1e      	ldr	r3, [pc, #120]	; (800572c <LIS2DW12_0_Probe+0x13c>)
 80056b4:	685b      	ldr	r3, [r3, #4]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	4a1b      	ldr	r2, [pc, #108]	; (8005728 <LIS2DW12_0_Probe+0x138>)
 80056ba:	6852      	ldr	r2, [r2, #4]
 80056bc:	4610      	mov	r0, r2
 80056be:	4798      	blx	r3
 80056c0:	4603      	mov	r3, r0
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	d003      	beq.n	80056ce <LIS2DW12_0_Probe+0xde>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 80056c6:	f06f 0304 	mvn.w	r3, #4
 80056ca:	64fb      	str	r3, [r7, #76]	; 0x4c
 80056cc:	e001      	b.n	80056d2 <LIS2DW12_0_Probe+0xe2>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 80056ce:	2300      	movs	r3, #0
 80056d0:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_GYRO) == MOTION_GYRO))
 80056d2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	d107      	bne.n	80056e8 <LIS2DW12_0_Probe+0xf8>
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	f003 0301 	and.w	r3, r3, #1
 80056de:	2b00      	cmp	r3, #0
 80056e0:	d002      	beq.n	80056e8 <LIS2DW12_0_Probe+0xf8>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 80056e2:	f06f 0304 	mvn.w	r3, #4
 80056e6:	64fb      	str	r3, [r7, #76]	; 0x4c
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_MAGNETO) == MOTION_MAGNETO))
 80056e8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	d107      	bne.n	80056fe <LIS2DW12_0_Probe+0x10e>
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	f003 0304 	and.w	r3, r3, #4
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	d002      	beq.n	80056fe <LIS2DW12_0_Probe+0x10e>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 80056f8:	f06f 0304 	mvn.w	r3, #4
 80056fc:	64fb      	str	r3, [r7, #76]	; 0x4c
    }
  }
  return ret;
 80056fe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
}
 8005700:	4618      	mov	r0, r3
 8005702:	3750      	adds	r7, #80	; 0x50
 8005704:	46bd      	mov	sp, r7
 8005706:	bd80      	pop	{r7, pc}
 8005708:	080007c1 	.word	0x080007c1
 800570c:	08000825 	.word	0x08000825
 8005710:	080008d9 	.word	0x080008d9
 8005714:	08000875 	.word	0x08000875
 8005718:	0800093d 	.word	0x0800093d
 800571c:	08005975 	.word	0x08005975
 8005720:	200001f0 	.word	0x200001f0
 8005724:	200001ac 	.word	0x200001ac
 8005728:	20000170 	.word	0x20000170
 800572c:	200001a0 	.word	0x200001a0
 8005730:	20000004 	.word	0x20000004
 8005734:	200000c4 	.word	0x200000c4
 8005738:	2000017c 	.word	0x2000017c
 800573c:	20000014 	.word	0x20000014

08005740 <LIS2MDL_0_Probe>:
/**
  * @brief  Register Bus IOs for instance 1 if component ID is OK
  * @retval BSP status
  */
static int32_t LIS2MDL_0_Probe(uint32_t Functions)
{
 8005740:	b580      	push	{r7, lr}
 8005742:	b094      	sub	sp, #80	; 0x50
 8005744:	af00      	add	r7, sp, #0
 8005746:	6078      	str	r0, [r7, #4]
  LIS2MDL_IO_t            io_ctx;
  uint8_t                 id;
  static LIS2MDL_Object_t lis2mdl_obj_0;
  LIS2MDL_Capabilities_t  cap;
  int32_t                 ret = BSP_ERROR_NONE;
 8005748:	2300      	movs	r3, #0
 800574a:	64fb      	str	r3, [r7, #76]	; 0x4c

  /* Configure the accelero driver */
  io_ctx.BusType     = LIS2MDL_I2C_BUS; /* I2C */
 800574c:	2300      	movs	r3, #0
 800574e:	637b      	str	r3, [r7, #52]	; 0x34
  io_ctx.Address     = LIS2MDL_I2C_ADD;
 8005750:	233d      	movs	r3, #61	; 0x3d
 8005752:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  io_ctx.Init        = IKS01A3_I2C_Init;
 8005756:	4b40      	ldr	r3, [pc, #256]	; (8005858 <LIS2MDL_0_Probe+0x118>)
 8005758:	62fb      	str	r3, [r7, #44]	; 0x2c
  io_ctx.DeInit      = IKS01A3_I2C_DeInit;
 800575a:	4b40      	ldr	r3, [pc, #256]	; (800585c <LIS2MDL_0_Probe+0x11c>)
 800575c:	633b      	str	r3, [r7, #48]	; 0x30
  io_ctx.ReadReg     = IKS01A3_I2C_ReadReg;
 800575e:	4b40      	ldr	r3, [pc, #256]	; (8005860 <LIS2MDL_0_Probe+0x120>)
 8005760:	643b      	str	r3, [r7, #64]	; 0x40
  io_ctx.WriteReg    = IKS01A3_I2C_WriteReg;
 8005762:	4b40      	ldr	r3, [pc, #256]	; (8005864 <LIS2MDL_0_Probe+0x124>)
 8005764:	63fb      	str	r3, [r7, #60]	; 0x3c
  io_ctx.GetTick     = IKS01A3_GetTick;
 8005766:	4b40      	ldr	r3, [pc, #256]	; (8005868 <LIS2MDL_0_Probe+0x128>)
 8005768:	647b      	str	r3, [r7, #68]	; 0x44
  io_ctx.Delay       = IKS01A3_Delay;
 800576a:	4b40      	ldr	r3, [pc, #256]	; (800586c <LIS2MDL_0_Probe+0x12c>)
 800576c:	64bb      	str	r3, [r7, #72]	; 0x48

  if (LIS2MDL_RegisterBusIO(&lis2mdl_obj_0, &io_ctx) != LIS2MDL_OK)
 800576e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8005772:	4619      	mov	r1, r3
 8005774:	483e      	ldr	r0, [pc, #248]	; (8005870 <LIS2MDL_0_Probe+0x130>)
 8005776:	f7fc fd13 	bl	80021a0 <LIS2MDL_RegisterBusIO>
 800577a:	4603      	mov	r3, r0
 800577c:	2b00      	cmp	r3, #0
 800577e:	d003      	beq.n	8005788 <LIS2MDL_0_Probe+0x48>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8005780:	f06f 0306 	mvn.w	r3, #6
 8005784:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005786:	e062      	b.n	800584e <LIS2MDL_0_Probe+0x10e>
  }
  else if (LIS2MDL_ReadID(&lis2mdl_obj_0, &id) != LIS2MDL_OK)
 8005788:	f107 032b 	add.w	r3, r7, #43	; 0x2b
 800578c:	4619      	mov	r1, r3
 800578e:	4838      	ldr	r0, [pc, #224]	; (8005870 <LIS2MDL_0_Probe+0x130>)
 8005790:	f7fc fe22 	bl	80023d8 <LIS2MDL_ReadID>
 8005794:	4603      	mov	r3, r0
 8005796:	2b00      	cmp	r3, #0
 8005798:	d003      	beq.n	80057a2 <LIS2MDL_0_Probe+0x62>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800579a:	f06f 0306 	mvn.w	r3, #6
 800579e:	64fb      	str	r3, [r7, #76]	; 0x4c
 80057a0:	e055      	b.n	800584e <LIS2MDL_0_Probe+0x10e>
  }
  else if (id != LIS2MDL_ID)
 80057a2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80057a6:	2b40      	cmp	r3, #64	; 0x40
 80057a8:	d003      	beq.n	80057b2 <LIS2MDL_0_Probe+0x72>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 80057aa:	f06f 0306 	mvn.w	r3, #6
 80057ae:	64fb      	str	r3, [r7, #76]	; 0x4c
 80057b0:	e04d      	b.n	800584e <LIS2MDL_0_Probe+0x10e>
  }
  else
  {
    (void)LIS2MDL_GetCapabilities(&lis2mdl_obj_0, &cap);
 80057b2:	f107 030c 	add.w	r3, r7, #12
 80057b6:	4619      	mov	r1, r3
 80057b8:	482d      	ldr	r0, [pc, #180]	; (8005870 <LIS2MDL_0_Probe+0x130>)
 80057ba:	f7fc fe33 	bl	8002424 <LIS2MDL_GetCapabilities>
    MotionCtx[IKS01A3_LIS2MDL_0].Functions = ((uint32_t)cap.Gyro) | ((uint32_t)cap.Acc << 1) | ((uint32_t)cap.Magneto << 2);
 80057be:	7b7b      	ldrb	r3, [r7, #13]
 80057c0:	461a      	mov	r2, r3
 80057c2:	7b3b      	ldrb	r3, [r7, #12]
 80057c4:	005b      	lsls	r3, r3, #1
 80057c6:	431a      	orrs	r2, r3
 80057c8:	7bbb      	ldrb	r3, [r7, #14]
 80057ca:	009b      	lsls	r3, r3, #2
 80057cc:	4313      	orrs	r3, r2
 80057ce:	4a29      	ldr	r2, [pc, #164]	; (8005874 <LIS2MDL_0_Probe+0x134>)
 80057d0:	6093      	str	r3, [r2, #8]

    MotionCompObj[IKS01A3_LIS2MDL_0] = &lis2mdl_obj_0;
 80057d2:	4b29      	ldr	r3, [pc, #164]	; (8005878 <LIS2MDL_0_Probe+0x138>)
 80057d4:	4a26      	ldr	r2, [pc, #152]	; (8005870 <LIS2MDL_0_Probe+0x130>)
 80057d6:	609a      	str	r2, [r3, #8]
    /* The second cast (void *) is added to bypass Misra R11.3 rule */
    MotionDrv[IKS01A3_LIS2MDL_0] = (MOTION_SENSOR_CommonDrv_t *)(void *)&LIS2MDL_COMMON_Driver;
 80057d8:	4b28      	ldr	r3, [pc, #160]	; (800587c <LIS2MDL_0_Probe+0x13c>)
 80057da:	4a29      	ldr	r2, [pc, #164]	; (8005880 <LIS2MDL_0_Probe+0x140>)
 80057dc:	609a      	str	r2, [r3, #8]

    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_MAGNETO) == MOTION_MAGNETO) && (cap.Magneto == 1U))
 80057de:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80057e0:	2b00      	cmp	r3, #0
 80057e2:	d11e      	bne.n	8005822 <LIS2MDL_0_Probe+0xe2>
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	f003 0304 	and.w	r3, r3, #4
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	d019      	beq.n	8005822 <LIS2MDL_0_Probe+0xe2>
 80057ee:	7bbb      	ldrb	r3, [r7, #14]
 80057f0:	2b01      	cmp	r3, #1
 80057f2:	d116      	bne.n	8005822 <LIS2MDL_0_Probe+0xe2>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      MotionFuncDrv[IKS01A3_LIS2MDL_0][FunctionIndex[MOTION_MAGNETO]] = (MOTION_SENSOR_FuncDrv_t *)(
 80057f4:	4b23      	ldr	r3, [pc, #140]	; (8005884 <LIS2MDL_0_Probe+0x144>)
 80057f6:	691b      	ldr	r3, [r3, #16]
 80057f8:	4a23      	ldr	r2, [pc, #140]	; (8005888 <LIS2MDL_0_Probe+0x148>)
 80057fa:	3306      	adds	r3, #6
 80057fc:	4923      	ldr	r1, [pc, #140]	; (800588c <LIS2MDL_0_Probe+0x14c>)
 80057fe:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                                                                          void *)&LIS2MDL_MAG_Driver;

      if (MotionDrv[IKS01A3_LIS2MDL_0]->Init(MotionCompObj[IKS01A3_LIS2MDL_0]) != LIS2MDL_OK)
 8005802:	4b1e      	ldr	r3, [pc, #120]	; (800587c <LIS2MDL_0_Probe+0x13c>)
 8005804:	689b      	ldr	r3, [r3, #8]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	4a1b      	ldr	r2, [pc, #108]	; (8005878 <LIS2MDL_0_Probe+0x138>)
 800580a:	6892      	ldr	r2, [r2, #8]
 800580c:	4610      	mov	r0, r2
 800580e:	4798      	blx	r3
 8005810:	4603      	mov	r3, r0
 8005812:	2b00      	cmp	r3, #0
 8005814:	d003      	beq.n	800581e <LIS2MDL_0_Probe+0xde>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8005816:	f06f 0304 	mvn.w	r3, #4
 800581a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800581c:	e001      	b.n	8005822 <LIS2MDL_0_Probe+0xe2>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 800581e:	2300      	movs	r3, #0
 8005820:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_ACCELERO) == MOTION_ACCELERO))
 8005822:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005824:	2b00      	cmp	r3, #0
 8005826:	d107      	bne.n	8005838 <LIS2MDL_0_Probe+0xf8>
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	f003 0302 	and.w	r3, r3, #2
 800582e:	2b00      	cmp	r3, #0
 8005830:	d002      	beq.n	8005838 <LIS2MDL_0_Probe+0xf8>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8005832:	f06f 0304 	mvn.w	r3, #4
 8005836:	64fb      	str	r3, [r7, #76]	; 0x4c
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_GYRO) == MOTION_GYRO))
 8005838:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800583a:	2b00      	cmp	r3, #0
 800583c:	d107      	bne.n	800584e <LIS2MDL_0_Probe+0x10e>
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	f003 0301 	and.w	r3, r3, #1
 8005844:	2b00      	cmp	r3, #0
 8005846:	d002      	beq.n	800584e <LIS2MDL_0_Probe+0x10e>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8005848:	f06f 0304 	mvn.w	r3, #4
 800584c:	64fb      	str	r3, [r7, #76]	; 0x4c
    }
  }
  return ret;
 800584e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
}
 8005850:	4618      	mov	r0, r3
 8005852:	3750      	adds	r7, #80	; 0x50
 8005854:	46bd      	mov	sp, r7
 8005856:	bd80      	pop	{r7, pc}
 8005858:	080007c1 	.word	0x080007c1
 800585c:	08000825 	.word	0x08000825
 8005860:	080008d9 	.word	0x080008d9
 8005864:	08000875 	.word	0x08000875
 8005868:	0800093d 	.word	0x0800093d
 800586c:	08005975 	.word	0x08005975
 8005870:	2000022c 	.word	0x2000022c
 8005874:	200001ac 	.word	0x200001ac
 8005878:	20000170 	.word	0x20000170
 800587c:	200001a0 	.word	0x200001a0
 8005880:	20000038 	.word	0x20000038
 8005884:	200000c4 	.word	0x200000c4
 8005888:	2000017c 	.word	0x2000017c
 800588c:	20000048 	.word	0x20000048

08005890 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005890:	b580      	push	{r7, lr}
 8005892:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8005894:	4b0e      	ldr	r3, [pc, #56]	; (80058d0 <HAL_Init+0x40>)
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	4a0d      	ldr	r2, [pc, #52]	; (80058d0 <HAL_Init+0x40>)
 800589a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800589e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80058a0:	4b0b      	ldr	r3, [pc, #44]	; (80058d0 <HAL_Init+0x40>)
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	4a0a      	ldr	r2, [pc, #40]	; (80058d0 <HAL_Init+0x40>)
 80058a6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80058aa:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80058ac:	4b08      	ldr	r3, [pc, #32]	; (80058d0 <HAL_Init+0x40>)
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	4a07      	ldr	r2, [pc, #28]	; (80058d0 <HAL_Init+0x40>)
 80058b2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80058b6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80058b8:	2003      	movs	r0, #3
 80058ba:	f000 f94f 	bl	8005b5c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80058be:	2000      	movs	r0, #0
 80058c0:	f000 f808 	bl	80058d4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80058c4:	f7fa ff16 	bl	80006f4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80058c8:	2300      	movs	r3, #0
}
 80058ca:	4618      	mov	r0, r3
 80058cc:	bd80      	pop	{r7, pc}
 80058ce:	bf00      	nop
 80058d0:	40023c00 	.word	0x40023c00

080058d4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80058d4:	b580      	push	{r7, lr}
 80058d6:	b082      	sub	sp, #8
 80058d8:	af00      	add	r7, sp, #0
 80058da:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80058dc:	4b12      	ldr	r3, [pc, #72]	; (8005928 <HAL_InitTick+0x54>)
 80058de:	681a      	ldr	r2, [r3, #0]
 80058e0:	4b12      	ldr	r3, [pc, #72]	; (800592c <HAL_InitTick+0x58>)
 80058e2:	781b      	ldrb	r3, [r3, #0]
 80058e4:	4619      	mov	r1, r3
 80058e6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80058ea:	fbb3 f3f1 	udiv	r3, r3, r1
 80058ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80058f2:	4618      	mov	r0, r3
 80058f4:	f000 f967 	bl	8005bc6 <HAL_SYSTICK_Config>
 80058f8:	4603      	mov	r3, r0
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	d001      	beq.n	8005902 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80058fe:	2301      	movs	r3, #1
 8005900:	e00e      	b.n	8005920 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	2b0f      	cmp	r3, #15
 8005906:	d80a      	bhi.n	800591e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8005908:	2200      	movs	r2, #0
 800590a:	6879      	ldr	r1, [r7, #4]
 800590c:	f04f 30ff 	mov.w	r0, #4294967295
 8005910:	f000 f92f 	bl	8005b72 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8005914:	4a06      	ldr	r2, [pc, #24]	; (8005930 <HAL_InitTick+0x5c>)
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800591a:	2300      	movs	r3, #0
 800591c:	e000      	b.n	8005920 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800591e:	2301      	movs	r3, #1
}
 8005920:	4618      	mov	r0, r3
 8005922:	3708      	adds	r7, #8
 8005924:	46bd      	mov	sp, r7
 8005926:	bd80      	pop	{r7, pc}
 8005928:	20000000 	.word	0x20000000
 800592c:	200000e4 	.word	0x200000e4
 8005930:	200000e0 	.word	0x200000e0

08005934 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005934:	b480      	push	{r7}
 8005936:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8005938:	4b06      	ldr	r3, [pc, #24]	; (8005954 <HAL_IncTick+0x20>)
 800593a:	781b      	ldrb	r3, [r3, #0]
 800593c:	461a      	mov	r2, r3
 800593e:	4b06      	ldr	r3, [pc, #24]	; (8005958 <HAL_IncTick+0x24>)
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	4413      	add	r3, r2
 8005944:	4a04      	ldr	r2, [pc, #16]	; (8005958 <HAL_IncTick+0x24>)
 8005946:	6013      	str	r3, [r2, #0]
}
 8005948:	bf00      	nop
 800594a:	46bd      	mov	sp, r7
 800594c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005950:	4770      	bx	lr
 8005952:	bf00      	nop
 8005954:	200000e4 	.word	0x200000e4
 8005958:	20000260 	.word	0x20000260

0800595c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800595c:	b480      	push	{r7}
 800595e:	af00      	add	r7, sp, #0
  return uwTick;
 8005960:	4b03      	ldr	r3, [pc, #12]	; (8005970 <HAL_GetTick+0x14>)
 8005962:	681b      	ldr	r3, [r3, #0]
}
 8005964:	4618      	mov	r0, r3
 8005966:	46bd      	mov	sp, r7
 8005968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800596c:	4770      	bx	lr
 800596e:	bf00      	nop
 8005970:	20000260 	.word	0x20000260

08005974 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8005974:	b580      	push	{r7, lr}
 8005976:	b084      	sub	sp, #16
 8005978:	af00      	add	r7, sp, #0
 800597a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800597c:	f7ff ffee 	bl	800595c <HAL_GetTick>
 8005980:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8005986:	68fb      	ldr	r3, [r7, #12]
 8005988:	f1b3 3fff 	cmp.w	r3, #4294967295
 800598c:	d005      	beq.n	800599a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800598e:	4b0a      	ldr	r3, [pc, #40]	; (80059b8 <HAL_Delay+0x44>)
 8005990:	781b      	ldrb	r3, [r3, #0]
 8005992:	461a      	mov	r2, r3
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	4413      	add	r3, r2
 8005998:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800599a:	bf00      	nop
 800599c:	f7ff ffde 	bl	800595c <HAL_GetTick>
 80059a0:	4602      	mov	r2, r0
 80059a2:	68bb      	ldr	r3, [r7, #8]
 80059a4:	1ad3      	subs	r3, r2, r3
 80059a6:	68fa      	ldr	r2, [r7, #12]
 80059a8:	429a      	cmp	r2, r3
 80059aa:	d8f7      	bhi.n	800599c <HAL_Delay+0x28>
  {
  }
}
 80059ac:	bf00      	nop
 80059ae:	bf00      	nop
 80059b0:	3710      	adds	r7, #16
 80059b2:	46bd      	mov	sp, r7
 80059b4:	bd80      	pop	{r7, pc}
 80059b6:	bf00      	nop
 80059b8:	200000e4 	.word	0x200000e4

080059bc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80059bc:	b480      	push	{r7}
 80059be:	b085      	sub	sp, #20
 80059c0:	af00      	add	r7, sp, #0
 80059c2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	f003 0307 	and.w	r3, r3, #7
 80059ca:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80059cc:	4b0c      	ldr	r3, [pc, #48]	; (8005a00 <__NVIC_SetPriorityGrouping+0x44>)
 80059ce:	68db      	ldr	r3, [r3, #12]
 80059d0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80059d2:	68ba      	ldr	r2, [r7, #8]
 80059d4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80059d8:	4013      	ands	r3, r2
 80059da:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80059e0:	68bb      	ldr	r3, [r7, #8]
 80059e2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80059e4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80059e8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80059ec:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80059ee:	4a04      	ldr	r2, [pc, #16]	; (8005a00 <__NVIC_SetPriorityGrouping+0x44>)
 80059f0:	68bb      	ldr	r3, [r7, #8]
 80059f2:	60d3      	str	r3, [r2, #12]
}
 80059f4:	bf00      	nop
 80059f6:	3714      	adds	r7, #20
 80059f8:	46bd      	mov	sp, r7
 80059fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059fe:	4770      	bx	lr
 8005a00:	e000ed00 	.word	0xe000ed00

08005a04 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005a04:	b480      	push	{r7}
 8005a06:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005a08:	4b04      	ldr	r3, [pc, #16]	; (8005a1c <__NVIC_GetPriorityGrouping+0x18>)
 8005a0a:	68db      	ldr	r3, [r3, #12]
 8005a0c:	0a1b      	lsrs	r3, r3, #8
 8005a0e:	f003 0307 	and.w	r3, r3, #7
}
 8005a12:	4618      	mov	r0, r3
 8005a14:	46bd      	mov	sp, r7
 8005a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a1a:	4770      	bx	lr
 8005a1c:	e000ed00 	.word	0xe000ed00

08005a20 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005a20:	b480      	push	{r7}
 8005a22:	b083      	sub	sp, #12
 8005a24:	af00      	add	r7, sp, #0
 8005a26:	4603      	mov	r3, r0
 8005a28:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005a2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	db0b      	blt.n	8005a4a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005a32:	79fb      	ldrb	r3, [r7, #7]
 8005a34:	f003 021f 	and.w	r2, r3, #31
 8005a38:	4907      	ldr	r1, [pc, #28]	; (8005a58 <__NVIC_EnableIRQ+0x38>)
 8005a3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005a3e:	095b      	lsrs	r3, r3, #5
 8005a40:	2001      	movs	r0, #1
 8005a42:	fa00 f202 	lsl.w	r2, r0, r2
 8005a46:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8005a4a:	bf00      	nop
 8005a4c:	370c      	adds	r7, #12
 8005a4e:	46bd      	mov	sp, r7
 8005a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a54:	4770      	bx	lr
 8005a56:	bf00      	nop
 8005a58:	e000e100 	.word	0xe000e100

08005a5c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005a5c:	b480      	push	{r7}
 8005a5e:	b083      	sub	sp, #12
 8005a60:	af00      	add	r7, sp, #0
 8005a62:	4603      	mov	r3, r0
 8005a64:	6039      	str	r1, [r7, #0]
 8005a66:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005a68:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005a6c:	2b00      	cmp	r3, #0
 8005a6e:	db0a      	blt.n	8005a86 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005a70:	683b      	ldr	r3, [r7, #0]
 8005a72:	b2da      	uxtb	r2, r3
 8005a74:	490c      	ldr	r1, [pc, #48]	; (8005aa8 <__NVIC_SetPriority+0x4c>)
 8005a76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005a7a:	0112      	lsls	r2, r2, #4
 8005a7c:	b2d2      	uxtb	r2, r2
 8005a7e:	440b      	add	r3, r1
 8005a80:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005a84:	e00a      	b.n	8005a9c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005a86:	683b      	ldr	r3, [r7, #0]
 8005a88:	b2da      	uxtb	r2, r3
 8005a8a:	4908      	ldr	r1, [pc, #32]	; (8005aac <__NVIC_SetPriority+0x50>)
 8005a8c:	79fb      	ldrb	r3, [r7, #7]
 8005a8e:	f003 030f 	and.w	r3, r3, #15
 8005a92:	3b04      	subs	r3, #4
 8005a94:	0112      	lsls	r2, r2, #4
 8005a96:	b2d2      	uxtb	r2, r2
 8005a98:	440b      	add	r3, r1
 8005a9a:	761a      	strb	r2, [r3, #24]
}
 8005a9c:	bf00      	nop
 8005a9e:	370c      	adds	r7, #12
 8005aa0:	46bd      	mov	sp, r7
 8005aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aa6:	4770      	bx	lr
 8005aa8:	e000e100 	.word	0xe000e100
 8005aac:	e000ed00 	.word	0xe000ed00

08005ab0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005ab0:	b480      	push	{r7}
 8005ab2:	b089      	sub	sp, #36	; 0x24
 8005ab4:	af00      	add	r7, sp, #0
 8005ab6:	60f8      	str	r0, [r7, #12]
 8005ab8:	60b9      	str	r1, [r7, #8]
 8005aba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	f003 0307 	and.w	r3, r3, #7
 8005ac2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005ac4:	69fb      	ldr	r3, [r7, #28]
 8005ac6:	f1c3 0307 	rsb	r3, r3, #7
 8005aca:	2b04      	cmp	r3, #4
 8005acc:	bf28      	it	cs
 8005ace:	2304      	movcs	r3, #4
 8005ad0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005ad2:	69fb      	ldr	r3, [r7, #28]
 8005ad4:	3304      	adds	r3, #4
 8005ad6:	2b06      	cmp	r3, #6
 8005ad8:	d902      	bls.n	8005ae0 <NVIC_EncodePriority+0x30>
 8005ada:	69fb      	ldr	r3, [r7, #28]
 8005adc:	3b03      	subs	r3, #3
 8005ade:	e000      	b.n	8005ae2 <NVIC_EncodePriority+0x32>
 8005ae0:	2300      	movs	r3, #0
 8005ae2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005ae4:	f04f 32ff 	mov.w	r2, #4294967295
 8005ae8:	69bb      	ldr	r3, [r7, #24]
 8005aea:	fa02 f303 	lsl.w	r3, r2, r3
 8005aee:	43da      	mvns	r2, r3
 8005af0:	68bb      	ldr	r3, [r7, #8]
 8005af2:	401a      	ands	r2, r3
 8005af4:	697b      	ldr	r3, [r7, #20]
 8005af6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005af8:	f04f 31ff 	mov.w	r1, #4294967295
 8005afc:	697b      	ldr	r3, [r7, #20]
 8005afe:	fa01 f303 	lsl.w	r3, r1, r3
 8005b02:	43d9      	mvns	r1, r3
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005b08:	4313      	orrs	r3, r2
         );
}
 8005b0a:	4618      	mov	r0, r3
 8005b0c:	3724      	adds	r7, #36	; 0x24
 8005b0e:	46bd      	mov	sp, r7
 8005b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b14:	4770      	bx	lr
	...

08005b18 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005b18:	b580      	push	{r7, lr}
 8005b1a:	b082      	sub	sp, #8
 8005b1c:	af00      	add	r7, sp, #0
 8005b1e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	3b01      	subs	r3, #1
 8005b24:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005b28:	d301      	bcc.n	8005b2e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8005b2a:	2301      	movs	r3, #1
 8005b2c:	e00f      	b.n	8005b4e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005b2e:	4a0a      	ldr	r2, [pc, #40]	; (8005b58 <SysTick_Config+0x40>)
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	3b01      	subs	r3, #1
 8005b34:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8005b36:	210f      	movs	r1, #15
 8005b38:	f04f 30ff 	mov.w	r0, #4294967295
 8005b3c:	f7ff ff8e 	bl	8005a5c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005b40:	4b05      	ldr	r3, [pc, #20]	; (8005b58 <SysTick_Config+0x40>)
 8005b42:	2200      	movs	r2, #0
 8005b44:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005b46:	4b04      	ldr	r3, [pc, #16]	; (8005b58 <SysTick_Config+0x40>)
 8005b48:	2207      	movs	r2, #7
 8005b4a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005b4c:	2300      	movs	r3, #0
}
 8005b4e:	4618      	mov	r0, r3
 8005b50:	3708      	adds	r7, #8
 8005b52:	46bd      	mov	sp, r7
 8005b54:	bd80      	pop	{r7, pc}
 8005b56:	bf00      	nop
 8005b58:	e000e010 	.word	0xe000e010

08005b5c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005b5c:	b580      	push	{r7, lr}
 8005b5e:	b082      	sub	sp, #8
 8005b60:	af00      	add	r7, sp, #0
 8005b62:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005b64:	6878      	ldr	r0, [r7, #4]
 8005b66:	f7ff ff29 	bl	80059bc <__NVIC_SetPriorityGrouping>
}
 8005b6a:	bf00      	nop
 8005b6c:	3708      	adds	r7, #8
 8005b6e:	46bd      	mov	sp, r7
 8005b70:	bd80      	pop	{r7, pc}

08005b72 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8005b72:	b580      	push	{r7, lr}
 8005b74:	b086      	sub	sp, #24
 8005b76:	af00      	add	r7, sp, #0
 8005b78:	4603      	mov	r3, r0
 8005b7a:	60b9      	str	r1, [r7, #8]
 8005b7c:	607a      	str	r2, [r7, #4]
 8005b7e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8005b80:	2300      	movs	r3, #0
 8005b82:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8005b84:	f7ff ff3e 	bl	8005a04 <__NVIC_GetPriorityGrouping>
 8005b88:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005b8a:	687a      	ldr	r2, [r7, #4]
 8005b8c:	68b9      	ldr	r1, [r7, #8]
 8005b8e:	6978      	ldr	r0, [r7, #20]
 8005b90:	f7ff ff8e 	bl	8005ab0 <NVIC_EncodePriority>
 8005b94:	4602      	mov	r2, r0
 8005b96:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005b9a:	4611      	mov	r1, r2
 8005b9c:	4618      	mov	r0, r3
 8005b9e:	f7ff ff5d 	bl	8005a5c <__NVIC_SetPriority>
}
 8005ba2:	bf00      	nop
 8005ba4:	3718      	adds	r7, #24
 8005ba6:	46bd      	mov	sp, r7
 8005ba8:	bd80      	pop	{r7, pc}

08005baa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005baa:	b580      	push	{r7, lr}
 8005bac:	b082      	sub	sp, #8
 8005bae:	af00      	add	r7, sp, #0
 8005bb0:	4603      	mov	r3, r0
 8005bb2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005bb4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005bb8:	4618      	mov	r0, r3
 8005bba:	f7ff ff31 	bl	8005a20 <__NVIC_EnableIRQ>
}
 8005bbe:	bf00      	nop
 8005bc0:	3708      	adds	r7, #8
 8005bc2:	46bd      	mov	sp, r7
 8005bc4:	bd80      	pop	{r7, pc}

08005bc6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005bc6:	b580      	push	{r7, lr}
 8005bc8:	b082      	sub	sp, #8
 8005bca:	af00      	add	r7, sp, #0
 8005bcc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8005bce:	6878      	ldr	r0, [r7, #4]
 8005bd0:	f7ff ffa2 	bl	8005b18 <SysTick_Config>
 8005bd4:	4603      	mov	r3, r0
}
 8005bd6:	4618      	mov	r0, r3
 8005bd8:	3708      	adds	r7, #8
 8005bda:	46bd      	mov	sp, r7
 8005bdc:	bd80      	pop	{r7, pc}
	...

08005be0 <HAL_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  hexti Exti handle.
  * @retval none.
  */
void HAL_EXTI_IRQHandler(EXTI_HandleTypeDef *hexti)
{
 8005be0:	b580      	push	{r7, lr}
 8005be2:	b084      	sub	sp, #16
 8005be4:	af00      	add	r7, sp, #0
 8005be6:	6078      	str	r0, [r7, #4]
  uint32_t regval;
  uint32_t maskline;

  /* Compute line mask */
  maskline = (1uL << (hexti->Line & EXTI_PIN_MASK));
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	f003 031f 	and.w	r3, r3, #31
 8005bf0:	2201      	movs	r2, #1
 8005bf2:	fa02 f303 	lsl.w	r3, r2, r3
 8005bf6:	60fb      	str	r3, [r7, #12]

  /* Get pending bit  */
  regval = (EXTI->PR & maskline);
 8005bf8:	4b0a      	ldr	r3, [pc, #40]	; (8005c24 <HAL_EXTI_IRQHandler+0x44>)
 8005bfa:	695b      	ldr	r3, [r3, #20]
 8005bfc:	68fa      	ldr	r2, [r7, #12]
 8005bfe:	4013      	ands	r3, r2
 8005c00:	60bb      	str	r3, [r7, #8]
  if (regval != 0x00u)
 8005c02:	68bb      	ldr	r3, [r7, #8]
 8005c04:	2b00      	cmp	r3, #0
 8005c06:	d009      	beq.n	8005c1c <HAL_EXTI_IRQHandler+0x3c>
  {
    /* Clear pending bit */
    EXTI->PR = maskline;
 8005c08:	4a06      	ldr	r2, [pc, #24]	; (8005c24 <HAL_EXTI_IRQHandler+0x44>)
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	6153      	str	r3, [r2, #20]

    /* Call callback */
    if (hexti->PendingCallback != NULL)
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	685b      	ldr	r3, [r3, #4]
 8005c12:	2b00      	cmp	r3, #0
 8005c14:	d002      	beq.n	8005c1c <HAL_EXTI_IRQHandler+0x3c>
    {
      hexti->PendingCallback();
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	685b      	ldr	r3, [r3, #4]
 8005c1a:	4798      	blx	r3
    }
  }
}
 8005c1c:	bf00      	nop
 8005c1e:	3710      	adds	r7, #16
 8005c20:	46bd      	mov	sp, r7
 8005c22:	bd80      	pop	{r7, pc}
 8005c24:	40013c00 	.word	0x40013c00

08005c28 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005c28:	b480      	push	{r7}
 8005c2a:	b089      	sub	sp, #36	; 0x24
 8005c2c:	af00      	add	r7, sp, #0
 8005c2e:	6078      	str	r0, [r7, #4]
 8005c30:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8005c32:	2300      	movs	r3, #0
 8005c34:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8005c36:	2300      	movs	r3, #0
 8005c38:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8005c3a:	2300      	movs	r3, #0
 8005c3c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005c3e:	2300      	movs	r3, #0
 8005c40:	61fb      	str	r3, [r7, #28]
 8005c42:	e159      	b.n	8005ef8 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8005c44:	2201      	movs	r2, #1
 8005c46:	69fb      	ldr	r3, [r7, #28]
 8005c48:	fa02 f303 	lsl.w	r3, r2, r3
 8005c4c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8005c4e:	683b      	ldr	r3, [r7, #0]
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	697a      	ldr	r2, [r7, #20]
 8005c54:	4013      	ands	r3, r2
 8005c56:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8005c58:	693a      	ldr	r2, [r7, #16]
 8005c5a:	697b      	ldr	r3, [r7, #20]
 8005c5c:	429a      	cmp	r2, r3
 8005c5e:	f040 8148 	bne.w	8005ef2 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8005c62:	683b      	ldr	r3, [r7, #0]
 8005c64:	685b      	ldr	r3, [r3, #4]
 8005c66:	f003 0303 	and.w	r3, r3, #3
 8005c6a:	2b01      	cmp	r3, #1
 8005c6c:	d005      	beq.n	8005c7a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005c6e:	683b      	ldr	r3, [r7, #0]
 8005c70:	685b      	ldr	r3, [r3, #4]
 8005c72:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8005c76:	2b02      	cmp	r3, #2
 8005c78:	d130      	bne.n	8005cdc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	689b      	ldr	r3, [r3, #8]
 8005c7e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8005c80:	69fb      	ldr	r3, [r7, #28]
 8005c82:	005b      	lsls	r3, r3, #1
 8005c84:	2203      	movs	r2, #3
 8005c86:	fa02 f303 	lsl.w	r3, r2, r3
 8005c8a:	43db      	mvns	r3, r3
 8005c8c:	69ba      	ldr	r2, [r7, #24]
 8005c8e:	4013      	ands	r3, r2
 8005c90:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005c92:	683b      	ldr	r3, [r7, #0]
 8005c94:	68da      	ldr	r2, [r3, #12]
 8005c96:	69fb      	ldr	r3, [r7, #28]
 8005c98:	005b      	lsls	r3, r3, #1
 8005c9a:	fa02 f303 	lsl.w	r3, r2, r3
 8005c9e:	69ba      	ldr	r2, [r7, #24]
 8005ca0:	4313      	orrs	r3, r2
 8005ca2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	69ba      	ldr	r2, [r7, #24]
 8005ca8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	685b      	ldr	r3, [r3, #4]
 8005cae:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005cb0:	2201      	movs	r2, #1
 8005cb2:	69fb      	ldr	r3, [r7, #28]
 8005cb4:	fa02 f303 	lsl.w	r3, r2, r3
 8005cb8:	43db      	mvns	r3, r3
 8005cba:	69ba      	ldr	r2, [r7, #24]
 8005cbc:	4013      	ands	r3, r2
 8005cbe:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005cc0:	683b      	ldr	r3, [r7, #0]
 8005cc2:	685b      	ldr	r3, [r3, #4]
 8005cc4:	091b      	lsrs	r3, r3, #4
 8005cc6:	f003 0201 	and.w	r2, r3, #1
 8005cca:	69fb      	ldr	r3, [r7, #28]
 8005ccc:	fa02 f303 	lsl.w	r3, r2, r3
 8005cd0:	69ba      	ldr	r2, [r7, #24]
 8005cd2:	4313      	orrs	r3, r2
 8005cd4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	69ba      	ldr	r2, [r7, #24]
 8005cda:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005cdc:	683b      	ldr	r3, [r7, #0]
 8005cde:	685b      	ldr	r3, [r3, #4]
 8005ce0:	f003 0303 	and.w	r3, r3, #3
 8005ce4:	2b03      	cmp	r3, #3
 8005ce6:	d017      	beq.n	8005d18 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	68db      	ldr	r3, [r3, #12]
 8005cec:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8005cee:	69fb      	ldr	r3, [r7, #28]
 8005cf0:	005b      	lsls	r3, r3, #1
 8005cf2:	2203      	movs	r2, #3
 8005cf4:	fa02 f303 	lsl.w	r3, r2, r3
 8005cf8:	43db      	mvns	r3, r3
 8005cfa:	69ba      	ldr	r2, [r7, #24]
 8005cfc:	4013      	ands	r3, r2
 8005cfe:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005d00:	683b      	ldr	r3, [r7, #0]
 8005d02:	689a      	ldr	r2, [r3, #8]
 8005d04:	69fb      	ldr	r3, [r7, #28]
 8005d06:	005b      	lsls	r3, r3, #1
 8005d08:	fa02 f303 	lsl.w	r3, r2, r3
 8005d0c:	69ba      	ldr	r2, [r7, #24]
 8005d0e:	4313      	orrs	r3, r2
 8005d10:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	69ba      	ldr	r2, [r7, #24]
 8005d16:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005d18:	683b      	ldr	r3, [r7, #0]
 8005d1a:	685b      	ldr	r3, [r3, #4]
 8005d1c:	f003 0303 	and.w	r3, r3, #3
 8005d20:	2b02      	cmp	r3, #2
 8005d22:	d123      	bne.n	8005d6c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005d24:	69fb      	ldr	r3, [r7, #28]
 8005d26:	08da      	lsrs	r2, r3, #3
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	3208      	adds	r2, #8
 8005d2c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005d30:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8005d32:	69fb      	ldr	r3, [r7, #28]
 8005d34:	f003 0307 	and.w	r3, r3, #7
 8005d38:	009b      	lsls	r3, r3, #2
 8005d3a:	220f      	movs	r2, #15
 8005d3c:	fa02 f303 	lsl.w	r3, r2, r3
 8005d40:	43db      	mvns	r3, r3
 8005d42:	69ba      	ldr	r2, [r7, #24]
 8005d44:	4013      	ands	r3, r2
 8005d46:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8005d48:	683b      	ldr	r3, [r7, #0]
 8005d4a:	691a      	ldr	r2, [r3, #16]
 8005d4c:	69fb      	ldr	r3, [r7, #28]
 8005d4e:	f003 0307 	and.w	r3, r3, #7
 8005d52:	009b      	lsls	r3, r3, #2
 8005d54:	fa02 f303 	lsl.w	r3, r2, r3
 8005d58:	69ba      	ldr	r2, [r7, #24]
 8005d5a:	4313      	orrs	r3, r2
 8005d5c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8005d5e:	69fb      	ldr	r3, [r7, #28]
 8005d60:	08da      	lsrs	r2, r3, #3
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	3208      	adds	r2, #8
 8005d66:	69b9      	ldr	r1, [r7, #24]
 8005d68:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8005d72:	69fb      	ldr	r3, [r7, #28]
 8005d74:	005b      	lsls	r3, r3, #1
 8005d76:	2203      	movs	r2, #3
 8005d78:	fa02 f303 	lsl.w	r3, r2, r3
 8005d7c:	43db      	mvns	r3, r3
 8005d7e:	69ba      	ldr	r2, [r7, #24]
 8005d80:	4013      	ands	r3, r2
 8005d82:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005d84:	683b      	ldr	r3, [r7, #0]
 8005d86:	685b      	ldr	r3, [r3, #4]
 8005d88:	f003 0203 	and.w	r2, r3, #3
 8005d8c:	69fb      	ldr	r3, [r7, #28]
 8005d8e:	005b      	lsls	r3, r3, #1
 8005d90:	fa02 f303 	lsl.w	r3, r2, r3
 8005d94:	69ba      	ldr	r2, [r7, #24]
 8005d96:	4313      	orrs	r3, r2
 8005d98:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	69ba      	ldr	r2, [r7, #24]
 8005d9e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8005da0:	683b      	ldr	r3, [r7, #0]
 8005da2:	685b      	ldr	r3, [r3, #4]
 8005da4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005da8:	2b00      	cmp	r3, #0
 8005daa:	f000 80a2 	beq.w	8005ef2 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005dae:	2300      	movs	r3, #0
 8005db0:	60fb      	str	r3, [r7, #12]
 8005db2:	4b57      	ldr	r3, [pc, #348]	; (8005f10 <HAL_GPIO_Init+0x2e8>)
 8005db4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005db6:	4a56      	ldr	r2, [pc, #344]	; (8005f10 <HAL_GPIO_Init+0x2e8>)
 8005db8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005dbc:	6453      	str	r3, [r2, #68]	; 0x44
 8005dbe:	4b54      	ldr	r3, [pc, #336]	; (8005f10 <HAL_GPIO_Init+0x2e8>)
 8005dc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005dc2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005dc6:	60fb      	str	r3, [r7, #12]
 8005dc8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005dca:	4a52      	ldr	r2, [pc, #328]	; (8005f14 <HAL_GPIO_Init+0x2ec>)
 8005dcc:	69fb      	ldr	r3, [r7, #28]
 8005dce:	089b      	lsrs	r3, r3, #2
 8005dd0:	3302      	adds	r3, #2
 8005dd2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005dd6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8005dd8:	69fb      	ldr	r3, [r7, #28]
 8005dda:	f003 0303 	and.w	r3, r3, #3
 8005dde:	009b      	lsls	r3, r3, #2
 8005de0:	220f      	movs	r2, #15
 8005de2:	fa02 f303 	lsl.w	r3, r2, r3
 8005de6:	43db      	mvns	r3, r3
 8005de8:	69ba      	ldr	r2, [r7, #24]
 8005dea:	4013      	ands	r3, r2
 8005dec:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	4a49      	ldr	r2, [pc, #292]	; (8005f18 <HAL_GPIO_Init+0x2f0>)
 8005df2:	4293      	cmp	r3, r2
 8005df4:	d019      	beq.n	8005e2a <HAL_GPIO_Init+0x202>
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	4a48      	ldr	r2, [pc, #288]	; (8005f1c <HAL_GPIO_Init+0x2f4>)
 8005dfa:	4293      	cmp	r3, r2
 8005dfc:	d013      	beq.n	8005e26 <HAL_GPIO_Init+0x1fe>
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	4a47      	ldr	r2, [pc, #284]	; (8005f20 <HAL_GPIO_Init+0x2f8>)
 8005e02:	4293      	cmp	r3, r2
 8005e04:	d00d      	beq.n	8005e22 <HAL_GPIO_Init+0x1fa>
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	4a46      	ldr	r2, [pc, #280]	; (8005f24 <HAL_GPIO_Init+0x2fc>)
 8005e0a:	4293      	cmp	r3, r2
 8005e0c:	d007      	beq.n	8005e1e <HAL_GPIO_Init+0x1f6>
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	4a45      	ldr	r2, [pc, #276]	; (8005f28 <HAL_GPIO_Init+0x300>)
 8005e12:	4293      	cmp	r3, r2
 8005e14:	d101      	bne.n	8005e1a <HAL_GPIO_Init+0x1f2>
 8005e16:	2304      	movs	r3, #4
 8005e18:	e008      	b.n	8005e2c <HAL_GPIO_Init+0x204>
 8005e1a:	2307      	movs	r3, #7
 8005e1c:	e006      	b.n	8005e2c <HAL_GPIO_Init+0x204>
 8005e1e:	2303      	movs	r3, #3
 8005e20:	e004      	b.n	8005e2c <HAL_GPIO_Init+0x204>
 8005e22:	2302      	movs	r3, #2
 8005e24:	e002      	b.n	8005e2c <HAL_GPIO_Init+0x204>
 8005e26:	2301      	movs	r3, #1
 8005e28:	e000      	b.n	8005e2c <HAL_GPIO_Init+0x204>
 8005e2a:	2300      	movs	r3, #0
 8005e2c:	69fa      	ldr	r2, [r7, #28]
 8005e2e:	f002 0203 	and.w	r2, r2, #3
 8005e32:	0092      	lsls	r2, r2, #2
 8005e34:	4093      	lsls	r3, r2
 8005e36:	69ba      	ldr	r2, [r7, #24]
 8005e38:	4313      	orrs	r3, r2
 8005e3a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005e3c:	4935      	ldr	r1, [pc, #212]	; (8005f14 <HAL_GPIO_Init+0x2ec>)
 8005e3e:	69fb      	ldr	r3, [r7, #28]
 8005e40:	089b      	lsrs	r3, r3, #2
 8005e42:	3302      	adds	r3, #2
 8005e44:	69ba      	ldr	r2, [r7, #24]
 8005e46:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8005e4a:	4b38      	ldr	r3, [pc, #224]	; (8005f2c <HAL_GPIO_Init+0x304>)
 8005e4c:	689b      	ldr	r3, [r3, #8]
 8005e4e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005e50:	693b      	ldr	r3, [r7, #16]
 8005e52:	43db      	mvns	r3, r3
 8005e54:	69ba      	ldr	r2, [r7, #24]
 8005e56:	4013      	ands	r3, r2
 8005e58:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005e5a:	683b      	ldr	r3, [r7, #0]
 8005e5c:	685b      	ldr	r3, [r3, #4]
 8005e5e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005e62:	2b00      	cmp	r3, #0
 8005e64:	d003      	beq.n	8005e6e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8005e66:	69ba      	ldr	r2, [r7, #24]
 8005e68:	693b      	ldr	r3, [r7, #16]
 8005e6a:	4313      	orrs	r3, r2
 8005e6c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8005e6e:	4a2f      	ldr	r2, [pc, #188]	; (8005f2c <HAL_GPIO_Init+0x304>)
 8005e70:	69bb      	ldr	r3, [r7, #24]
 8005e72:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8005e74:	4b2d      	ldr	r3, [pc, #180]	; (8005f2c <HAL_GPIO_Init+0x304>)
 8005e76:	68db      	ldr	r3, [r3, #12]
 8005e78:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005e7a:	693b      	ldr	r3, [r7, #16]
 8005e7c:	43db      	mvns	r3, r3
 8005e7e:	69ba      	ldr	r2, [r7, #24]
 8005e80:	4013      	ands	r3, r2
 8005e82:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005e84:	683b      	ldr	r3, [r7, #0]
 8005e86:	685b      	ldr	r3, [r3, #4]
 8005e88:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005e8c:	2b00      	cmp	r3, #0
 8005e8e:	d003      	beq.n	8005e98 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8005e90:	69ba      	ldr	r2, [r7, #24]
 8005e92:	693b      	ldr	r3, [r7, #16]
 8005e94:	4313      	orrs	r3, r2
 8005e96:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8005e98:	4a24      	ldr	r2, [pc, #144]	; (8005f2c <HAL_GPIO_Init+0x304>)
 8005e9a:	69bb      	ldr	r3, [r7, #24]
 8005e9c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8005e9e:	4b23      	ldr	r3, [pc, #140]	; (8005f2c <HAL_GPIO_Init+0x304>)
 8005ea0:	685b      	ldr	r3, [r3, #4]
 8005ea2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005ea4:	693b      	ldr	r3, [r7, #16]
 8005ea6:	43db      	mvns	r3, r3
 8005ea8:	69ba      	ldr	r2, [r7, #24]
 8005eaa:	4013      	ands	r3, r2
 8005eac:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005eae:	683b      	ldr	r3, [r7, #0]
 8005eb0:	685b      	ldr	r3, [r3, #4]
 8005eb2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005eb6:	2b00      	cmp	r3, #0
 8005eb8:	d003      	beq.n	8005ec2 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8005eba:	69ba      	ldr	r2, [r7, #24]
 8005ebc:	693b      	ldr	r3, [r7, #16]
 8005ebe:	4313      	orrs	r3, r2
 8005ec0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8005ec2:	4a1a      	ldr	r2, [pc, #104]	; (8005f2c <HAL_GPIO_Init+0x304>)
 8005ec4:	69bb      	ldr	r3, [r7, #24]
 8005ec6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005ec8:	4b18      	ldr	r3, [pc, #96]	; (8005f2c <HAL_GPIO_Init+0x304>)
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005ece:	693b      	ldr	r3, [r7, #16]
 8005ed0:	43db      	mvns	r3, r3
 8005ed2:	69ba      	ldr	r2, [r7, #24]
 8005ed4:	4013      	ands	r3, r2
 8005ed6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005ed8:	683b      	ldr	r3, [r7, #0]
 8005eda:	685b      	ldr	r3, [r3, #4]
 8005edc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005ee0:	2b00      	cmp	r3, #0
 8005ee2:	d003      	beq.n	8005eec <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8005ee4:	69ba      	ldr	r2, [r7, #24]
 8005ee6:	693b      	ldr	r3, [r7, #16]
 8005ee8:	4313      	orrs	r3, r2
 8005eea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8005eec:	4a0f      	ldr	r2, [pc, #60]	; (8005f2c <HAL_GPIO_Init+0x304>)
 8005eee:	69bb      	ldr	r3, [r7, #24]
 8005ef0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005ef2:	69fb      	ldr	r3, [r7, #28]
 8005ef4:	3301      	adds	r3, #1
 8005ef6:	61fb      	str	r3, [r7, #28]
 8005ef8:	69fb      	ldr	r3, [r7, #28]
 8005efa:	2b0f      	cmp	r3, #15
 8005efc:	f67f aea2 	bls.w	8005c44 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8005f00:	bf00      	nop
 8005f02:	bf00      	nop
 8005f04:	3724      	adds	r7, #36	; 0x24
 8005f06:	46bd      	mov	sp, r7
 8005f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f0c:	4770      	bx	lr
 8005f0e:	bf00      	nop
 8005f10:	40023800 	.word	0x40023800
 8005f14:	40013800 	.word	0x40013800
 8005f18:	40020000 	.word	0x40020000
 8005f1c:	40020400 	.word	0x40020400
 8005f20:	40020800 	.word	0x40020800
 8005f24:	40020c00 	.word	0x40020c00
 8005f28:	40021000 	.word	0x40021000
 8005f2c:	40013c00 	.word	0x40013c00

08005f30 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8005f30:	b480      	push	{r7}
 8005f32:	b087      	sub	sp, #28
 8005f34:	af00      	add	r7, sp, #0
 8005f36:	6078      	str	r0, [r7, #4]
 8005f38:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8005f3a:	2300      	movs	r3, #0
 8005f3c:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 8005f3e:	2300      	movs	r3, #0
 8005f40:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 8005f42:	2300      	movs	r3, #0
 8005f44:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005f46:	2300      	movs	r3, #0
 8005f48:	617b      	str	r3, [r7, #20]
 8005f4a:	e0bb      	b.n	80060c4 <HAL_GPIO_DeInit+0x194>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8005f4c:	2201      	movs	r2, #1
 8005f4e:	697b      	ldr	r3, [r7, #20]
 8005f50:	fa02 f303 	lsl.w	r3, r2, r3
 8005f54:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 8005f56:	683a      	ldr	r2, [r7, #0]
 8005f58:	693b      	ldr	r3, [r7, #16]
 8005f5a:	4013      	ands	r3, r2
 8005f5c:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 8005f5e:	68fa      	ldr	r2, [r7, #12]
 8005f60:	693b      	ldr	r3, [r7, #16]
 8005f62:	429a      	cmp	r2, r3
 8005f64:	f040 80ab 	bne.w	80060be <HAL_GPIO_DeInit+0x18e>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 8005f68:	4a5c      	ldr	r2, [pc, #368]	; (80060dc <HAL_GPIO_DeInit+0x1ac>)
 8005f6a:	697b      	ldr	r3, [r7, #20]
 8005f6c:	089b      	lsrs	r3, r3, #2
 8005f6e:	3302      	adds	r3, #2
 8005f70:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005f74:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 8005f76:	697b      	ldr	r3, [r7, #20]
 8005f78:	f003 0303 	and.w	r3, r3, #3
 8005f7c:	009b      	lsls	r3, r3, #2
 8005f7e:	220f      	movs	r2, #15
 8005f80:	fa02 f303 	lsl.w	r3, r2, r3
 8005f84:	68ba      	ldr	r2, [r7, #8]
 8005f86:	4013      	ands	r3, r2
 8005f88:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	4a54      	ldr	r2, [pc, #336]	; (80060e0 <HAL_GPIO_DeInit+0x1b0>)
 8005f8e:	4293      	cmp	r3, r2
 8005f90:	d019      	beq.n	8005fc6 <HAL_GPIO_DeInit+0x96>
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	4a53      	ldr	r2, [pc, #332]	; (80060e4 <HAL_GPIO_DeInit+0x1b4>)
 8005f96:	4293      	cmp	r3, r2
 8005f98:	d013      	beq.n	8005fc2 <HAL_GPIO_DeInit+0x92>
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	4a52      	ldr	r2, [pc, #328]	; (80060e8 <HAL_GPIO_DeInit+0x1b8>)
 8005f9e:	4293      	cmp	r3, r2
 8005fa0:	d00d      	beq.n	8005fbe <HAL_GPIO_DeInit+0x8e>
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	4a51      	ldr	r2, [pc, #324]	; (80060ec <HAL_GPIO_DeInit+0x1bc>)
 8005fa6:	4293      	cmp	r3, r2
 8005fa8:	d007      	beq.n	8005fba <HAL_GPIO_DeInit+0x8a>
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	4a50      	ldr	r2, [pc, #320]	; (80060f0 <HAL_GPIO_DeInit+0x1c0>)
 8005fae:	4293      	cmp	r3, r2
 8005fb0:	d101      	bne.n	8005fb6 <HAL_GPIO_DeInit+0x86>
 8005fb2:	2304      	movs	r3, #4
 8005fb4:	e008      	b.n	8005fc8 <HAL_GPIO_DeInit+0x98>
 8005fb6:	2307      	movs	r3, #7
 8005fb8:	e006      	b.n	8005fc8 <HAL_GPIO_DeInit+0x98>
 8005fba:	2303      	movs	r3, #3
 8005fbc:	e004      	b.n	8005fc8 <HAL_GPIO_DeInit+0x98>
 8005fbe:	2302      	movs	r3, #2
 8005fc0:	e002      	b.n	8005fc8 <HAL_GPIO_DeInit+0x98>
 8005fc2:	2301      	movs	r3, #1
 8005fc4:	e000      	b.n	8005fc8 <HAL_GPIO_DeInit+0x98>
 8005fc6:	2300      	movs	r3, #0
 8005fc8:	697a      	ldr	r2, [r7, #20]
 8005fca:	f002 0203 	and.w	r2, r2, #3
 8005fce:	0092      	lsls	r2, r2, #2
 8005fd0:	4093      	lsls	r3, r2
 8005fd2:	68ba      	ldr	r2, [r7, #8]
 8005fd4:	429a      	cmp	r2, r3
 8005fd6:	d132      	bne.n	800603e <HAL_GPIO_DeInit+0x10e>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8005fd8:	4b46      	ldr	r3, [pc, #280]	; (80060f4 <HAL_GPIO_DeInit+0x1c4>)
 8005fda:	681a      	ldr	r2, [r3, #0]
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	43db      	mvns	r3, r3
 8005fe0:	4944      	ldr	r1, [pc, #272]	; (80060f4 <HAL_GPIO_DeInit+0x1c4>)
 8005fe2:	4013      	ands	r3, r2
 8005fe4:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8005fe6:	4b43      	ldr	r3, [pc, #268]	; (80060f4 <HAL_GPIO_DeInit+0x1c4>)
 8005fe8:	685a      	ldr	r2, [r3, #4]
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	43db      	mvns	r3, r3
 8005fee:	4941      	ldr	r1, [pc, #260]	; (80060f4 <HAL_GPIO_DeInit+0x1c4>)
 8005ff0:	4013      	ands	r3, r2
 8005ff2:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8005ff4:	4b3f      	ldr	r3, [pc, #252]	; (80060f4 <HAL_GPIO_DeInit+0x1c4>)
 8005ff6:	68da      	ldr	r2, [r3, #12]
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	43db      	mvns	r3, r3
 8005ffc:	493d      	ldr	r1, [pc, #244]	; (80060f4 <HAL_GPIO_DeInit+0x1c4>)
 8005ffe:	4013      	ands	r3, r2
 8006000:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8006002:	4b3c      	ldr	r3, [pc, #240]	; (80060f4 <HAL_GPIO_DeInit+0x1c4>)
 8006004:	689a      	ldr	r2, [r3, #8]
 8006006:	68fb      	ldr	r3, [r7, #12]
 8006008:	43db      	mvns	r3, r3
 800600a:	493a      	ldr	r1, [pc, #232]	; (80060f4 <HAL_GPIO_DeInit+0x1c4>)
 800600c:	4013      	ands	r3, r2
 800600e:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 8006010:	697b      	ldr	r3, [r7, #20]
 8006012:	f003 0303 	and.w	r3, r3, #3
 8006016:	009b      	lsls	r3, r3, #2
 8006018:	220f      	movs	r2, #15
 800601a:	fa02 f303 	lsl.w	r3, r2, r3
 800601e:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8006020:	4a2e      	ldr	r2, [pc, #184]	; (80060dc <HAL_GPIO_DeInit+0x1ac>)
 8006022:	697b      	ldr	r3, [r7, #20]
 8006024:	089b      	lsrs	r3, r3, #2
 8006026:	3302      	adds	r3, #2
 8006028:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800602c:	68bb      	ldr	r3, [r7, #8]
 800602e:	43da      	mvns	r2, r3
 8006030:	482a      	ldr	r0, [pc, #168]	; (80060dc <HAL_GPIO_DeInit+0x1ac>)
 8006032:	697b      	ldr	r3, [r7, #20]
 8006034:	089b      	lsrs	r3, r3, #2
 8006036:	400a      	ands	r2, r1
 8006038:	3302      	adds	r3, #2
 800603a:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	681a      	ldr	r2, [r3, #0]
 8006042:	697b      	ldr	r3, [r7, #20]
 8006044:	005b      	lsls	r3, r3, #1
 8006046:	2103      	movs	r1, #3
 8006048:	fa01 f303 	lsl.w	r3, r1, r3
 800604c:	43db      	mvns	r3, r3
 800604e:	401a      	ands	r2, r3
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8006054:	697b      	ldr	r3, [r7, #20]
 8006056:	08da      	lsrs	r2, r3, #3
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	3208      	adds	r2, #8
 800605c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006060:	697b      	ldr	r3, [r7, #20]
 8006062:	f003 0307 	and.w	r3, r3, #7
 8006066:	009b      	lsls	r3, r3, #2
 8006068:	220f      	movs	r2, #15
 800606a:	fa02 f303 	lsl.w	r3, r2, r3
 800606e:	43db      	mvns	r3, r3
 8006070:	697a      	ldr	r2, [r7, #20]
 8006072:	08d2      	lsrs	r2, r2, #3
 8006074:	4019      	ands	r1, r3
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	3208      	adds	r2, #8
 800607a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	68da      	ldr	r2, [r3, #12]
 8006082:	697b      	ldr	r3, [r7, #20]
 8006084:	005b      	lsls	r3, r3, #1
 8006086:	2103      	movs	r1, #3
 8006088:	fa01 f303 	lsl.w	r3, r1, r3
 800608c:	43db      	mvns	r3, r3
 800608e:	401a      	ands	r2, r3
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	685a      	ldr	r2, [r3, #4]
 8006098:	2101      	movs	r1, #1
 800609a:	697b      	ldr	r3, [r7, #20]
 800609c:	fa01 f303 	lsl.w	r3, r1, r3
 80060a0:	43db      	mvns	r3, r3
 80060a2:	401a      	ands	r2, r3
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	689a      	ldr	r2, [r3, #8]
 80060ac:	697b      	ldr	r3, [r7, #20]
 80060ae:	005b      	lsls	r3, r3, #1
 80060b0:	2103      	movs	r1, #3
 80060b2:	fa01 f303 	lsl.w	r3, r1, r3
 80060b6:	43db      	mvns	r3, r3
 80060b8:	401a      	ands	r2, r3
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80060be:	697b      	ldr	r3, [r7, #20]
 80060c0:	3301      	adds	r3, #1
 80060c2:	617b      	str	r3, [r7, #20]
 80060c4:	697b      	ldr	r3, [r7, #20]
 80060c6:	2b0f      	cmp	r3, #15
 80060c8:	f67f af40 	bls.w	8005f4c <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 80060cc:	bf00      	nop
 80060ce:	bf00      	nop
 80060d0:	371c      	adds	r7, #28
 80060d2:	46bd      	mov	sp, r7
 80060d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060d8:	4770      	bx	lr
 80060da:	bf00      	nop
 80060dc:	40013800 	.word	0x40013800
 80060e0:	40020000 	.word	0x40020000
 80060e4:	40020400 	.word	0x40020400
 80060e8:	40020800 	.word	0x40020800
 80060ec:	40020c00 	.word	0x40020c00
 80060f0:	40021000 	.word	0x40021000
 80060f4:	40013c00 	.word	0x40013c00

080060f8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80060f8:	b480      	push	{r7}
 80060fa:	b083      	sub	sp, #12
 80060fc:	af00      	add	r7, sp, #0
 80060fe:	6078      	str	r0, [r7, #4]
 8006100:	460b      	mov	r3, r1
 8006102:	807b      	strh	r3, [r7, #2]
 8006104:	4613      	mov	r3, r2
 8006106:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8006108:	787b      	ldrb	r3, [r7, #1]
 800610a:	2b00      	cmp	r3, #0
 800610c:	d003      	beq.n	8006116 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800610e:	887a      	ldrh	r2, [r7, #2]
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8006114:	e003      	b.n	800611e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8006116:	887b      	ldrh	r3, [r7, #2]
 8006118:	041a      	lsls	r2, r3, #16
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	619a      	str	r2, [r3, #24]
}
 800611e:	bf00      	nop
 8006120:	370c      	adds	r7, #12
 8006122:	46bd      	mov	sp, r7
 8006124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006128:	4770      	bx	lr
	...

0800612c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800612c:	b580      	push	{r7, lr}
 800612e:	b084      	sub	sp, #16
 8006130:	af00      	add	r7, sp, #0
 8006132:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	2b00      	cmp	r3, #0
 8006138:	d101      	bne.n	800613e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800613a:	2301      	movs	r3, #1
 800613c:	e12b      	b.n	8006396 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006144:	b2db      	uxtb	r3, r3
 8006146:	2b00      	cmp	r3, #0
 8006148:	d106      	bne.n	8006158 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	2200      	movs	r2, #0
 800614e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8006152:	6878      	ldr	r0, [r7, #4]
 8006154:	f000 f95d 	bl	8006412 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	2224      	movs	r2, #36	; 0x24
 800615c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	681a      	ldr	r2, [r3, #0]
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	f022 0201 	bic.w	r2, r2, #1
 800616e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	681a      	ldr	r2, [r3, #0]
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800617e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	681a      	ldr	r2, [r3, #0]
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800618e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8006190:	f001 fc5a 	bl	8007a48 <HAL_RCC_GetPCLK1Freq>
 8006194:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	685b      	ldr	r3, [r3, #4]
 800619a:	4a81      	ldr	r2, [pc, #516]	; (80063a0 <HAL_I2C_Init+0x274>)
 800619c:	4293      	cmp	r3, r2
 800619e:	d807      	bhi.n	80061b0 <HAL_I2C_Init+0x84>
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	4a80      	ldr	r2, [pc, #512]	; (80063a4 <HAL_I2C_Init+0x278>)
 80061a4:	4293      	cmp	r3, r2
 80061a6:	bf94      	ite	ls
 80061a8:	2301      	movls	r3, #1
 80061aa:	2300      	movhi	r3, #0
 80061ac:	b2db      	uxtb	r3, r3
 80061ae:	e006      	b.n	80061be <HAL_I2C_Init+0x92>
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	4a7d      	ldr	r2, [pc, #500]	; (80063a8 <HAL_I2C_Init+0x27c>)
 80061b4:	4293      	cmp	r3, r2
 80061b6:	bf94      	ite	ls
 80061b8:	2301      	movls	r3, #1
 80061ba:	2300      	movhi	r3, #0
 80061bc:	b2db      	uxtb	r3, r3
 80061be:	2b00      	cmp	r3, #0
 80061c0:	d001      	beq.n	80061c6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80061c2:	2301      	movs	r3, #1
 80061c4:	e0e7      	b.n	8006396 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80061c6:	68fb      	ldr	r3, [r7, #12]
 80061c8:	4a78      	ldr	r2, [pc, #480]	; (80063ac <HAL_I2C_Init+0x280>)
 80061ca:	fba2 2303 	umull	r2, r3, r2, r3
 80061ce:	0c9b      	lsrs	r3, r3, #18
 80061d0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	685b      	ldr	r3, [r3, #4]
 80061d8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	68ba      	ldr	r2, [r7, #8]
 80061e2:	430a      	orrs	r2, r1
 80061e4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	6a1b      	ldr	r3, [r3, #32]
 80061ec:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	685b      	ldr	r3, [r3, #4]
 80061f4:	4a6a      	ldr	r2, [pc, #424]	; (80063a0 <HAL_I2C_Init+0x274>)
 80061f6:	4293      	cmp	r3, r2
 80061f8:	d802      	bhi.n	8006200 <HAL_I2C_Init+0xd4>
 80061fa:	68bb      	ldr	r3, [r7, #8]
 80061fc:	3301      	adds	r3, #1
 80061fe:	e009      	b.n	8006214 <HAL_I2C_Init+0xe8>
 8006200:	68bb      	ldr	r3, [r7, #8]
 8006202:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8006206:	fb02 f303 	mul.w	r3, r2, r3
 800620a:	4a69      	ldr	r2, [pc, #420]	; (80063b0 <HAL_I2C_Init+0x284>)
 800620c:	fba2 2303 	umull	r2, r3, r2, r3
 8006210:	099b      	lsrs	r3, r3, #6
 8006212:	3301      	adds	r3, #1
 8006214:	687a      	ldr	r2, [r7, #4]
 8006216:	6812      	ldr	r2, [r2, #0]
 8006218:	430b      	orrs	r3, r1
 800621a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	69db      	ldr	r3, [r3, #28]
 8006222:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8006226:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	685b      	ldr	r3, [r3, #4]
 800622e:	495c      	ldr	r1, [pc, #368]	; (80063a0 <HAL_I2C_Init+0x274>)
 8006230:	428b      	cmp	r3, r1
 8006232:	d819      	bhi.n	8006268 <HAL_I2C_Init+0x13c>
 8006234:	68fb      	ldr	r3, [r7, #12]
 8006236:	1e59      	subs	r1, r3, #1
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	685b      	ldr	r3, [r3, #4]
 800623c:	005b      	lsls	r3, r3, #1
 800623e:	fbb1 f3f3 	udiv	r3, r1, r3
 8006242:	1c59      	adds	r1, r3, #1
 8006244:	f640 73fc 	movw	r3, #4092	; 0xffc
 8006248:	400b      	ands	r3, r1
 800624a:	2b00      	cmp	r3, #0
 800624c:	d00a      	beq.n	8006264 <HAL_I2C_Init+0x138>
 800624e:	68fb      	ldr	r3, [r7, #12]
 8006250:	1e59      	subs	r1, r3, #1
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	685b      	ldr	r3, [r3, #4]
 8006256:	005b      	lsls	r3, r3, #1
 8006258:	fbb1 f3f3 	udiv	r3, r1, r3
 800625c:	3301      	adds	r3, #1
 800625e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006262:	e051      	b.n	8006308 <HAL_I2C_Init+0x1dc>
 8006264:	2304      	movs	r3, #4
 8006266:	e04f      	b.n	8006308 <HAL_I2C_Init+0x1dc>
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	689b      	ldr	r3, [r3, #8]
 800626c:	2b00      	cmp	r3, #0
 800626e:	d111      	bne.n	8006294 <HAL_I2C_Init+0x168>
 8006270:	68fb      	ldr	r3, [r7, #12]
 8006272:	1e58      	subs	r0, r3, #1
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	6859      	ldr	r1, [r3, #4]
 8006278:	460b      	mov	r3, r1
 800627a:	005b      	lsls	r3, r3, #1
 800627c:	440b      	add	r3, r1
 800627e:	fbb0 f3f3 	udiv	r3, r0, r3
 8006282:	3301      	adds	r3, #1
 8006284:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006288:	2b00      	cmp	r3, #0
 800628a:	bf0c      	ite	eq
 800628c:	2301      	moveq	r3, #1
 800628e:	2300      	movne	r3, #0
 8006290:	b2db      	uxtb	r3, r3
 8006292:	e012      	b.n	80062ba <HAL_I2C_Init+0x18e>
 8006294:	68fb      	ldr	r3, [r7, #12]
 8006296:	1e58      	subs	r0, r3, #1
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	6859      	ldr	r1, [r3, #4]
 800629c:	460b      	mov	r3, r1
 800629e:	009b      	lsls	r3, r3, #2
 80062a0:	440b      	add	r3, r1
 80062a2:	0099      	lsls	r1, r3, #2
 80062a4:	440b      	add	r3, r1
 80062a6:	fbb0 f3f3 	udiv	r3, r0, r3
 80062aa:	3301      	adds	r3, #1
 80062ac:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80062b0:	2b00      	cmp	r3, #0
 80062b2:	bf0c      	ite	eq
 80062b4:	2301      	moveq	r3, #1
 80062b6:	2300      	movne	r3, #0
 80062b8:	b2db      	uxtb	r3, r3
 80062ba:	2b00      	cmp	r3, #0
 80062bc:	d001      	beq.n	80062c2 <HAL_I2C_Init+0x196>
 80062be:	2301      	movs	r3, #1
 80062c0:	e022      	b.n	8006308 <HAL_I2C_Init+0x1dc>
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	689b      	ldr	r3, [r3, #8]
 80062c6:	2b00      	cmp	r3, #0
 80062c8:	d10e      	bne.n	80062e8 <HAL_I2C_Init+0x1bc>
 80062ca:	68fb      	ldr	r3, [r7, #12]
 80062cc:	1e58      	subs	r0, r3, #1
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	6859      	ldr	r1, [r3, #4]
 80062d2:	460b      	mov	r3, r1
 80062d4:	005b      	lsls	r3, r3, #1
 80062d6:	440b      	add	r3, r1
 80062d8:	fbb0 f3f3 	udiv	r3, r0, r3
 80062dc:	3301      	adds	r3, #1
 80062de:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80062e2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80062e6:	e00f      	b.n	8006308 <HAL_I2C_Init+0x1dc>
 80062e8:	68fb      	ldr	r3, [r7, #12]
 80062ea:	1e58      	subs	r0, r3, #1
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	6859      	ldr	r1, [r3, #4]
 80062f0:	460b      	mov	r3, r1
 80062f2:	009b      	lsls	r3, r3, #2
 80062f4:	440b      	add	r3, r1
 80062f6:	0099      	lsls	r1, r3, #2
 80062f8:	440b      	add	r3, r1
 80062fa:	fbb0 f3f3 	udiv	r3, r0, r3
 80062fe:	3301      	adds	r3, #1
 8006300:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006304:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006308:	6879      	ldr	r1, [r7, #4]
 800630a:	6809      	ldr	r1, [r1, #0]
 800630c:	4313      	orrs	r3, r2
 800630e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	69da      	ldr	r2, [r3, #28]
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	6a1b      	ldr	r3, [r3, #32]
 8006322:	431a      	orrs	r2, r3
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	430a      	orrs	r2, r1
 800632a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	689b      	ldr	r3, [r3, #8]
 8006332:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8006336:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800633a:	687a      	ldr	r2, [r7, #4]
 800633c:	6911      	ldr	r1, [r2, #16]
 800633e:	687a      	ldr	r2, [r7, #4]
 8006340:	68d2      	ldr	r2, [r2, #12]
 8006342:	4311      	orrs	r1, r2
 8006344:	687a      	ldr	r2, [r7, #4]
 8006346:	6812      	ldr	r2, [r2, #0]
 8006348:	430b      	orrs	r3, r1
 800634a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	68db      	ldr	r3, [r3, #12]
 8006352:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	695a      	ldr	r2, [r3, #20]
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	699b      	ldr	r3, [r3, #24]
 800635e:	431a      	orrs	r2, r3
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	430a      	orrs	r2, r1
 8006366:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	681a      	ldr	r2, [r3, #0]
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	f042 0201 	orr.w	r2, r2, #1
 8006376:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	2200      	movs	r2, #0
 800637c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	2220      	movs	r2, #32
 8006382:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	2200      	movs	r2, #0
 800638a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	2200      	movs	r2, #0
 8006390:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8006394:	2300      	movs	r3, #0
}
 8006396:	4618      	mov	r0, r3
 8006398:	3710      	adds	r7, #16
 800639a:	46bd      	mov	sp, r7
 800639c:	bd80      	pop	{r7, pc}
 800639e:	bf00      	nop
 80063a0:	000186a0 	.word	0x000186a0
 80063a4:	001e847f 	.word	0x001e847f
 80063a8:	003d08ff 	.word	0x003d08ff
 80063ac:	431bde83 	.word	0x431bde83
 80063b0:	10624dd3 	.word	0x10624dd3

080063b4 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 80063b4:	b580      	push	{r7, lr}
 80063b6:	b082      	sub	sp, #8
 80063b8:	af00      	add	r7, sp, #0
 80063ba:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	2b00      	cmp	r3, #0
 80063c0:	d101      	bne.n	80063c6 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 80063c2:	2301      	movs	r3, #1
 80063c4:	e021      	b.n	800640a <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	2224      	movs	r2, #36	; 0x24
 80063ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	681a      	ldr	r2, [r3, #0]
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	f022 0201 	bic.w	r2, r2, #1
 80063dc:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 80063de:	6878      	ldr	r0, [r7, #4]
 80063e0:	f000 f821 	bl	8006426 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	2200      	movs	r2, #0
 80063e8:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State         = HAL_I2C_STATE_RESET;
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	2200      	movs	r2, #0
 80063ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	2200      	movs	r2, #0
 80063f6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	2200      	movs	r2, #0
 80063fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	2200      	movs	r2, #0
 8006404:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006408:	2300      	movs	r3, #0
}
 800640a:	4618      	mov	r0, r3
 800640c:	3708      	adds	r7, #8
 800640e:	46bd      	mov	sp, r7
 8006410:	bd80      	pop	{r7, pc}

08006412 <HAL_I2C_MspInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspInit(I2C_HandleTypeDef *hi2c)
{
 8006412:	b480      	push	{r7}
 8006414:	b083      	sub	sp, #12
 8006416:	af00      	add	r7, sp, #0
 8006418:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspInit could be implemented in the user file
   */
}
 800641a:	bf00      	nop
 800641c:	370c      	adds	r7, #12
 800641e:	46bd      	mov	sp, r7
 8006420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006424:	4770      	bx	lr

08006426 <HAL_I2C_MspDeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspDeInit(I2C_HandleTypeDef *hi2c)
{
 8006426:	b480      	push	{r7}
 8006428:	b083      	sub	sp, #12
 800642a:	af00      	add	r7, sp, #0
 800642c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspDeInit could be implemented in the user file
   */
}
 800642e:	bf00      	nop
 8006430:	370c      	adds	r7, #12
 8006432:	46bd      	mov	sp, r7
 8006434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006438:	4770      	bx	lr
	...

0800643c <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800643c:	b580      	push	{r7, lr}
 800643e:	b088      	sub	sp, #32
 8006440:	af02      	add	r7, sp, #8
 8006442:	60f8      	str	r0, [r7, #12]
 8006444:	4608      	mov	r0, r1
 8006446:	4611      	mov	r1, r2
 8006448:	461a      	mov	r2, r3
 800644a:	4603      	mov	r3, r0
 800644c:	817b      	strh	r3, [r7, #10]
 800644e:	460b      	mov	r3, r1
 8006450:	813b      	strh	r3, [r7, #8]
 8006452:	4613      	mov	r3, r2
 8006454:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8006456:	f7ff fa81 	bl	800595c <HAL_GetTick>
 800645a:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800645c:	68fb      	ldr	r3, [r7, #12]
 800645e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006462:	b2db      	uxtb	r3, r3
 8006464:	2b20      	cmp	r3, #32
 8006466:	f040 80d9 	bne.w	800661c <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800646a:	697b      	ldr	r3, [r7, #20]
 800646c:	9300      	str	r3, [sp, #0]
 800646e:	2319      	movs	r3, #25
 8006470:	2201      	movs	r2, #1
 8006472:	496d      	ldr	r1, [pc, #436]	; (8006628 <HAL_I2C_Mem_Write+0x1ec>)
 8006474:	68f8      	ldr	r0, [r7, #12]
 8006476:	f000 fc99 	bl	8006dac <I2C_WaitOnFlagUntilTimeout>
 800647a:	4603      	mov	r3, r0
 800647c:	2b00      	cmp	r3, #0
 800647e:	d001      	beq.n	8006484 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8006480:	2302      	movs	r3, #2
 8006482:	e0cc      	b.n	800661e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006484:	68fb      	ldr	r3, [r7, #12]
 8006486:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800648a:	2b01      	cmp	r3, #1
 800648c:	d101      	bne.n	8006492 <HAL_I2C_Mem_Write+0x56>
 800648e:	2302      	movs	r3, #2
 8006490:	e0c5      	b.n	800661e <HAL_I2C_Mem_Write+0x1e2>
 8006492:	68fb      	ldr	r3, [r7, #12]
 8006494:	2201      	movs	r2, #1
 8006496:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800649a:	68fb      	ldr	r3, [r7, #12]
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	f003 0301 	and.w	r3, r3, #1
 80064a4:	2b01      	cmp	r3, #1
 80064a6:	d007      	beq.n	80064b8 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80064a8:	68fb      	ldr	r3, [r7, #12]
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	681a      	ldr	r2, [r3, #0]
 80064ae:	68fb      	ldr	r3, [r7, #12]
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	f042 0201 	orr.w	r2, r2, #1
 80064b6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80064b8:	68fb      	ldr	r3, [r7, #12]
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	681a      	ldr	r2, [r3, #0]
 80064be:	68fb      	ldr	r3, [r7, #12]
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80064c6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80064c8:	68fb      	ldr	r3, [r7, #12]
 80064ca:	2221      	movs	r2, #33	; 0x21
 80064cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80064d0:	68fb      	ldr	r3, [r7, #12]
 80064d2:	2240      	movs	r2, #64	; 0x40
 80064d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80064d8:	68fb      	ldr	r3, [r7, #12]
 80064da:	2200      	movs	r2, #0
 80064dc:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80064de:	68fb      	ldr	r3, [r7, #12]
 80064e0:	6a3a      	ldr	r2, [r7, #32]
 80064e2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80064e4:	68fb      	ldr	r3, [r7, #12]
 80064e6:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80064e8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80064ea:	68fb      	ldr	r3, [r7, #12]
 80064ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80064ee:	b29a      	uxth	r2, r3
 80064f0:	68fb      	ldr	r3, [r7, #12]
 80064f2:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80064f4:	68fb      	ldr	r3, [r7, #12]
 80064f6:	4a4d      	ldr	r2, [pc, #308]	; (800662c <HAL_I2C_Mem_Write+0x1f0>)
 80064f8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80064fa:	88f8      	ldrh	r0, [r7, #6]
 80064fc:	893a      	ldrh	r2, [r7, #8]
 80064fe:	8979      	ldrh	r1, [r7, #10]
 8006500:	697b      	ldr	r3, [r7, #20]
 8006502:	9301      	str	r3, [sp, #4]
 8006504:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006506:	9300      	str	r3, [sp, #0]
 8006508:	4603      	mov	r3, r0
 800650a:	68f8      	ldr	r0, [r7, #12]
 800650c:	f000 fad0 	bl	8006ab0 <I2C_RequestMemoryWrite>
 8006510:	4603      	mov	r3, r0
 8006512:	2b00      	cmp	r3, #0
 8006514:	d052      	beq.n	80065bc <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8006516:	2301      	movs	r3, #1
 8006518:	e081      	b.n	800661e <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800651a:	697a      	ldr	r2, [r7, #20]
 800651c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800651e:	68f8      	ldr	r0, [r7, #12]
 8006520:	f000 fd1a 	bl	8006f58 <I2C_WaitOnTXEFlagUntilTimeout>
 8006524:	4603      	mov	r3, r0
 8006526:	2b00      	cmp	r3, #0
 8006528:	d00d      	beq.n	8006546 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800652a:	68fb      	ldr	r3, [r7, #12]
 800652c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800652e:	2b04      	cmp	r3, #4
 8006530:	d107      	bne.n	8006542 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006532:	68fb      	ldr	r3, [r7, #12]
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	681a      	ldr	r2, [r3, #0]
 8006538:	68fb      	ldr	r3, [r7, #12]
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006540:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8006542:	2301      	movs	r3, #1
 8006544:	e06b      	b.n	800661e <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006546:	68fb      	ldr	r3, [r7, #12]
 8006548:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800654a:	781a      	ldrb	r2, [r3, #0]
 800654c:	68fb      	ldr	r3, [r7, #12]
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006552:	68fb      	ldr	r3, [r7, #12]
 8006554:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006556:	1c5a      	adds	r2, r3, #1
 8006558:	68fb      	ldr	r3, [r7, #12]
 800655a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 800655c:	68fb      	ldr	r3, [r7, #12]
 800655e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006560:	3b01      	subs	r3, #1
 8006562:	b29a      	uxth	r2, r3
 8006564:	68fb      	ldr	r3, [r7, #12]
 8006566:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8006568:	68fb      	ldr	r3, [r7, #12]
 800656a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800656c:	b29b      	uxth	r3, r3
 800656e:	3b01      	subs	r3, #1
 8006570:	b29a      	uxth	r2, r3
 8006572:	68fb      	ldr	r3, [r7, #12]
 8006574:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8006576:	68fb      	ldr	r3, [r7, #12]
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	695b      	ldr	r3, [r3, #20]
 800657c:	f003 0304 	and.w	r3, r3, #4
 8006580:	2b04      	cmp	r3, #4
 8006582:	d11b      	bne.n	80065bc <HAL_I2C_Mem_Write+0x180>
 8006584:	68fb      	ldr	r3, [r7, #12]
 8006586:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006588:	2b00      	cmp	r3, #0
 800658a:	d017      	beq.n	80065bc <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800658c:	68fb      	ldr	r3, [r7, #12]
 800658e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006590:	781a      	ldrb	r2, [r3, #0]
 8006592:	68fb      	ldr	r3, [r7, #12]
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8006598:	68fb      	ldr	r3, [r7, #12]
 800659a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800659c:	1c5a      	adds	r2, r3, #1
 800659e:	68fb      	ldr	r3, [r7, #12]
 80065a0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80065a2:	68fb      	ldr	r3, [r7, #12]
 80065a4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80065a6:	3b01      	subs	r3, #1
 80065a8:	b29a      	uxth	r2, r3
 80065aa:	68fb      	ldr	r3, [r7, #12]
 80065ac:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80065ae:	68fb      	ldr	r3, [r7, #12]
 80065b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80065b2:	b29b      	uxth	r3, r3
 80065b4:	3b01      	subs	r3, #1
 80065b6:	b29a      	uxth	r2, r3
 80065b8:	68fb      	ldr	r3, [r7, #12]
 80065ba:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80065bc:	68fb      	ldr	r3, [r7, #12]
 80065be:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80065c0:	2b00      	cmp	r3, #0
 80065c2:	d1aa      	bne.n	800651a <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80065c4:	697a      	ldr	r2, [r7, #20]
 80065c6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80065c8:	68f8      	ldr	r0, [r7, #12]
 80065ca:	f000 fd06 	bl	8006fda <I2C_WaitOnBTFFlagUntilTimeout>
 80065ce:	4603      	mov	r3, r0
 80065d0:	2b00      	cmp	r3, #0
 80065d2:	d00d      	beq.n	80065f0 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80065d4:	68fb      	ldr	r3, [r7, #12]
 80065d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065d8:	2b04      	cmp	r3, #4
 80065da:	d107      	bne.n	80065ec <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80065dc:	68fb      	ldr	r3, [r7, #12]
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	681a      	ldr	r2, [r3, #0]
 80065e2:	68fb      	ldr	r3, [r7, #12]
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80065ea:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80065ec:	2301      	movs	r3, #1
 80065ee:	e016      	b.n	800661e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80065f0:	68fb      	ldr	r3, [r7, #12]
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	681a      	ldr	r2, [r3, #0]
 80065f6:	68fb      	ldr	r3, [r7, #12]
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80065fe:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006600:	68fb      	ldr	r3, [r7, #12]
 8006602:	2220      	movs	r2, #32
 8006604:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006608:	68fb      	ldr	r3, [r7, #12]
 800660a:	2200      	movs	r2, #0
 800660c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006610:	68fb      	ldr	r3, [r7, #12]
 8006612:	2200      	movs	r2, #0
 8006614:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8006618:	2300      	movs	r3, #0
 800661a:	e000      	b.n	800661e <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 800661c:	2302      	movs	r3, #2
  }
}
 800661e:	4618      	mov	r0, r3
 8006620:	3718      	adds	r7, #24
 8006622:	46bd      	mov	sp, r7
 8006624:	bd80      	pop	{r7, pc}
 8006626:	bf00      	nop
 8006628:	00100002 	.word	0x00100002
 800662c:	ffff0000 	.word	0xffff0000

08006630 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006630:	b580      	push	{r7, lr}
 8006632:	b08c      	sub	sp, #48	; 0x30
 8006634:	af02      	add	r7, sp, #8
 8006636:	60f8      	str	r0, [r7, #12]
 8006638:	4608      	mov	r0, r1
 800663a:	4611      	mov	r1, r2
 800663c:	461a      	mov	r2, r3
 800663e:	4603      	mov	r3, r0
 8006640:	817b      	strh	r3, [r7, #10]
 8006642:	460b      	mov	r3, r1
 8006644:	813b      	strh	r3, [r7, #8]
 8006646:	4613      	mov	r3, r2
 8006648:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800664a:	f7ff f987 	bl	800595c <HAL_GetTick>
 800664e:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006650:	68fb      	ldr	r3, [r7, #12]
 8006652:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006656:	b2db      	uxtb	r3, r3
 8006658:	2b20      	cmp	r3, #32
 800665a:	f040 8208 	bne.w	8006a6e <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800665e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006660:	9300      	str	r3, [sp, #0]
 8006662:	2319      	movs	r3, #25
 8006664:	2201      	movs	r2, #1
 8006666:	497b      	ldr	r1, [pc, #492]	; (8006854 <HAL_I2C_Mem_Read+0x224>)
 8006668:	68f8      	ldr	r0, [r7, #12]
 800666a:	f000 fb9f 	bl	8006dac <I2C_WaitOnFlagUntilTimeout>
 800666e:	4603      	mov	r3, r0
 8006670:	2b00      	cmp	r3, #0
 8006672:	d001      	beq.n	8006678 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8006674:	2302      	movs	r3, #2
 8006676:	e1fb      	b.n	8006a70 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006678:	68fb      	ldr	r3, [r7, #12]
 800667a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800667e:	2b01      	cmp	r3, #1
 8006680:	d101      	bne.n	8006686 <HAL_I2C_Mem_Read+0x56>
 8006682:	2302      	movs	r3, #2
 8006684:	e1f4      	b.n	8006a70 <HAL_I2C_Mem_Read+0x440>
 8006686:	68fb      	ldr	r3, [r7, #12]
 8006688:	2201      	movs	r2, #1
 800668a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800668e:	68fb      	ldr	r3, [r7, #12]
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	f003 0301 	and.w	r3, r3, #1
 8006698:	2b01      	cmp	r3, #1
 800669a:	d007      	beq.n	80066ac <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800669c:	68fb      	ldr	r3, [r7, #12]
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	681a      	ldr	r2, [r3, #0]
 80066a2:	68fb      	ldr	r3, [r7, #12]
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	f042 0201 	orr.w	r2, r2, #1
 80066aa:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80066ac:	68fb      	ldr	r3, [r7, #12]
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	681a      	ldr	r2, [r3, #0]
 80066b2:	68fb      	ldr	r3, [r7, #12]
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80066ba:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80066bc:	68fb      	ldr	r3, [r7, #12]
 80066be:	2222      	movs	r2, #34	; 0x22
 80066c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80066c4:	68fb      	ldr	r3, [r7, #12]
 80066c6:	2240      	movs	r2, #64	; 0x40
 80066c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80066cc:	68fb      	ldr	r3, [r7, #12]
 80066ce:	2200      	movs	r2, #0
 80066d0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80066d2:	68fb      	ldr	r3, [r7, #12]
 80066d4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80066d6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80066d8:	68fb      	ldr	r3, [r7, #12]
 80066da:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 80066dc:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80066de:	68fb      	ldr	r3, [r7, #12]
 80066e0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80066e2:	b29a      	uxth	r2, r3
 80066e4:	68fb      	ldr	r3, [r7, #12]
 80066e6:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80066e8:	68fb      	ldr	r3, [r7, #12]
 80066ea:	4a5b      	ldr	r2, [pc, #364]	; (8006858 <HAL_I2C_Mem_Read+0x228>)
 80066ec:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80066ee:	88f8      	ldrh	r0, [r7, #6]
 80066f0:	893a      	ldrh	r2, [r7, #8]
 80066f2:	8979      	ldrh	r1, [r7, #10]
 80066f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066f6:	9301      	str	r3, [sp, #4]
 80066f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80066fa:	9300      	str	r3, [sp, #0]
 80066fc:	4603      	mov	r3, r0
 80066fe:	68f8      	ldr	r0, [r7, #12]
 8006700:	f000 fa6c 	bl	8006bdc <I2C_RequestMemoryRead>
 8006704:	4603      	mov	r3, r0
 8006706:	2b00      	cmp	r3, #0
 8006708:	d001      	beq.n	800670e <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 800670a:	2301      	movs	r3, #1
 800670c:	e1b0      	b.n	8006a70 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 800670e:	68fb      	ldr	r3, [r7, #12]
 8006710:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006712:	2b00      	cmp	r3, #0
 8006714:	d113      	bne.n	800673e <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006716:	2300      	movs	r3, #0
 8006718:	623b      	str	r3, [r7, #32]
 800671a:	68fb      	ldr	r3, [r7, #12]
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	695b      	ldr	r3, [r3, #20]
 8006720:	623b      	str	r3, [r7, #32]
 8006722:	68fb      	ldr	r3, [r7, #12]
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	699b      	ldr	r3, [r3, #24]
 8006728:	623b      	str	r3, [r7, #32]
 800672a:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800672c:	68fb      	ldr	r3, [r7, #12]
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	681a      	ldr	r2, [r3, #0]
 8006732:	68fb      	ldr	r3, [r7, #12]
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800673a:	601a      	str	r2, [r3, #0]
 800673c:	e184      	b.n	8006a48 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 800673e:	68fb      	ldr	r3, [r7, #12]
 8006740:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006742:	2b01      	cmp	r3, #1
 8006744:	d11b      	bne.n	800677e <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006746:	68fb      	ldr	r3, [r7, #12]
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	681a      	ldr	r2, [r3, #0]
 800674c:	68fb      	ldr	r3, [r7, #12]
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006754:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006756:	2300      	movs	r3, #0
 8006758:	61fb      	str	r3, [r7, #28]
 800675a:	68fb      	ldr	r3, [r7, #12]
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	695b      	ldr	r3, [r3, #20]
 8006760:	61fb      	str	r3, [r7, #28]
 8006762:	68fb      	ldr	r3, [r7, #12]
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	699b      	ldr	r3, [r3, #24]
 8006768:	61fb      	str	r3, [r7, #28]
 800676a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800676c:	68fb      	ldr	r3, [r7, #12]
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	681a      	ldr	r2, [r3, #0]
 8006772:	68fb      	ldr	r3, [r7, #12]
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800677a:	601a      	str	r2, [r3, #0]
 800677c:	e164      	b.n	8006a48 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 800677e:	68fb      	ldr	r3, [r7, #12]
 8006780:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006782:	2b02      	cmp	r3, #2
 8006784:	d11b      	bne.n	80067be <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006786:	68fb      	ldr	r3, [r7, #12]
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	681a      	ldr	r2, [r3, #0]
 800678c:	68fb      	ldr	r3, [r7, #12]
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006794:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006796:	68fb      	ldr	r3, [r7, #12]
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	681a      	ldr	r2, [r3, #0]
 800679c:	68fb      	ldr	r3, [r7, #12]
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80067a4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80067a6:	2300      	movs	r3, #0
 80067a8:	61bb      	str	r3, [r7, #24]
 80067aa:	68fb      	ldr	r3, [r7, #12]
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	695b      	ldr	r3, [r3, #20]
 80067b0:	61bb      	str	r3, [r7, #24]
 80067b2:	68fb      	ldr	r3, [r7, #12]
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	699b      	ldr	r3, [r3, #24]
 80067b8:	61bb      	str	r3, [r7, #24]
 80067ba:	69bb      	ldr	r3, [r7, #24]
 80067bc:	e144      	b.n	8006a48 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80067be:	2300      	movs	r3, #0
 80067c0:	617b      	str	r3, [r7, #20]
 80067c2:	68fb      	ldr	r3, [r7, #12]
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	695b      	ldr	r3, [r3, #20]
 80067c8:	617b      	str	r3, [r7, #20]
 80067ca:	68fb      	ldr	r3, [r7, #12]
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	699b      	ldr	r3, [r3, #24]
 80067d0:	617b      	str	r3, [r7, #20]
 80067d2:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80067d4:	e138      	b.n	8006a48 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 80067d6:	68fb      	ldr	r3, [r7, #12]
 80067d8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80067da:	2b03      	cmp	r3, #3
 80067dc:	f200 80f1 	bhi.w	80069c2 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80067e0:	68fb      	ldr	r3, [r7, #12]
 80067e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80067e4:	2b01      	cmp	r3, #1
 80067e6:	d123      	bne.n	8006830 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80067e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80067ea:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80067ec:	68f8      	ldr	r0, [r7, #12]
 80067ee:	f000 fc35 	bl	800705c <I2C_WaitOnRXNEFlagUntilTimeout>
 80067f2:	4603      	mov	r3, r0
 80067f4:	2b00      	cmp	r3, #0
 80067f6:	d001      	beq.n	80067fc <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 80067f8:	2301      	movs	r3, #1
 80067fa:	e139      	b.n	8006a70 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80067fc:	68fb      	ldr	r3, [r7, #12]
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	691a      	ldr	r2, [r3, #16]
 8006802:	68fb      	ldr	r3, [r7, #12]
 8006804:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006806:	b2d2      	uxtb	r2, r2
 8006808:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800680a:	68fb      	ldr	r3, [r7, #12]
 800680c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800680e:	1c5a      	adds	r2, r3, #1
 8006810:	68fb      	ldr	r3, [r7, #12]
 8006812:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006814:	68fb      	ldr	r3, [r7, #12]
 8006816:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006818:	3b01      	subs	r3, #1
 800681a:	b29a      	uxth	r2, r3
 800681c:	68fb      	ldr	r3, [r7, #12]
 800681e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006820:	68fb      	ldr	r3, [r7, #12]
 8006822:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006824:	b29b      	uxth	r3, r3
 8006826:	3b01      	subs	r3, #1
 8006828:	b29a      	uxth	r2, r3
 800682a:	68fb      	ldr	r3, [r7, #12]
 800682c:	855a      	strh	r2, [r3, #42]	; 0x2a
 800682e:	e10b      	b.n	8006a48 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8006830:	68fb      	ldr	r3, [r7, #12]
 8006832:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006834:	2b02      	cmp	r3, #2
 8006836:	d14e      	bne.n	80068d6 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006838:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800683a:	9300      	str	r3, [sp, #0]
 800683c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800683e:	2200      	movs	r2, #0
 8006840:	4906      	ldr	r1, [pc, #24]	; (800685c <HAL_I2C_Mem_Read+0x22c>)
 8006842:	68f8      	ldr	r0, [r7, #12]
 8006844:	f000 fab2 	bl	8006dac <I2C_WaitOnFlagUntilTimeout>
 8006848:	4603      	mov	r3, r0
 800684a:	2b00      	cmp	r3, #0
 800684c:	d008      	beq.n	8006860 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 800684e:	2301      	movs	r3, #1
 8006850:	e10e      	b.n	8006a70 <HAL_I2C_Mem_Read+0x440>
 8006852:	bf00      	nop
 8006854:	00100002 	.word	0x00100002
 8006858:	ffff0000 	.word	0xffff0000
 800685c:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006860:	68fb      	ldr	r3, [r7, #12]
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	681a      	ldr	r2, [r3, #0]
 8006866:	68fb      	ldr	r3, [r7, #12]
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800686e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006870:	68fb      	ldr	r3, [r7, #12]
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	691a      	ldr	r2, [r3, #16]
 8006876:	68fb      	ldr	r3, [r7, #12]
 8006878:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800687a:	b2d2      	uxtb	r2, r2
 800687c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800687e:	68fb      	ldr	r3, [r7, #12]
 8006880:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006882:	1c5a      	adds	r2, r3, #1
 8006884:	68fb      	ldr	r3, [r7, #12]
 8006886:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006888:	68fb      	ldr	r3, [r7, #12]
 800688a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800688c:	3b01      	subs	r3, #1
 800688e:	b29a      	uxth	r2, r3
 8006890:	68fb      	ldr	r3, [r7, #12]
 8006892:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006894:	68fb      	ldr	r3, [r7, #12]
 8006896:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006898:	b29b      	uxth	r3, r3
 800689a:	3b01      	subs	r3, #1
 800689c:	b29a      	uxth	r2, r3
 800689e:	68fb      	ldr	r3, [r7, #12]
 80068a0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80068a2:	68fb      	ldr	r3, [r7, #12]
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	691a      	ldr	r2, [r3, #16]
 80068a8:	68fb      	ldr	r3, [r7, #12]
 80068aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068ac:	b2d2      	uxtb	r2, r2
 80068ae:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80068b0:	68fb      	ldr	r3, [r7, #12]
 80068b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068b4:	1c5a      	adds	r2, r3, #1
 80068b6:	68fb      	ldr	r3, [r7, #12]
 80068b8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80068ba:	68fb      	ldr	r3, [r7, #12]
 80068bc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80068be:	3b01      	subs	r3, #1
 80068c0:	b29a      	uxth	r2, r3
 80068c2:	68fb      	ldr	r3, [r7, #12]
 80068c4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80068c6:	68fb      	ldr	r3, [r7, #12]
 80068c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80068ca:	b29b      	uxth	r3, r3
 80068cc:	3b01      	subs	r3, #1
 80068ce:	b29a      	uxth	r2, r3
 80068d0:	68fb      	ldr	r3, [r7, #12]
 80068d2:	855a      	strh	r2, [r3, #42]	; 0x2a
 80068d4:	e0b8      	b.n	8006a48 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80068d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068d8:	9300      	str	r3, [sp, #0]
 80068da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80068dc:	2200      	movs	r2, #0
 80068de:	4966      	ldr	r1, [pc, #408]	; (8006a78 <HAL_I2C_Mem_Read+0x448>)
 80068e0:	68f8      	ldr	r0, [r7, #12]
 80068e2:	f000 fa63 	bl	8006dac <I2C_WaitOnFlagUntilTimeout>
 80068e6:	4603      	mov	r3, r0
 80068e8:	2b00      	cmp	r3, #0
 80068ea:	d001      	beq.n	80068f0 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 80068ec:	2301      	movs	r3, #1
 80068ee:	e0bf      	b.n	8006a70 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80068f0:	68fb      	ldr	r3, [r7, #12]
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	681a      	ldr	r2, [r3, #0]
 80068f6:	68fb      	ldr	r3, [r7, #12]
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80068fe:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006900:	68fb      	ldr	r3, [r7, #12]
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	691a      	ldr	r2, [r3, #16]
 8006906:	68fb      	ldr	r3, [r7, #12]
 8006908:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800690a:	b2d2      	uxtb	r2, r2
 800690c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800690e:	68fb      	ldr	r3, [r7, #12]
 8006910:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006912:	1c5a      	adds	r2, r3, #1
 8006914:	68fb      	ldr	r3, [r7, #12]
 8006916:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006918:	68fb      	ldr	r3, [r7, #12]
 800691a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800691c:	3b01      	subs	r3, #1
 800691e:	b29a      	uxth	r2, r3
 8006920:	68fb      	ldr	r3, [r7, #12]
 8006922:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006924:	68fb      	ldr	r3, [r7, #12]
 8006926:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006928:	b29b      	uxth	r3, r3
 800692a:	3b01      	subs	r3, #1
 800692c:	b29a      	uxth	r2, r3
 800692e:	68fb      	ldr	r3, [r7, #12]
 8006930:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006932:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006934:	9300      	str	r3, [sp, #0]
 8006936:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006938:	2200      	movs	r2, #0
 800693a:	494f      	ldr	r1, [pc, #316]	; (8006a78 <HAL_I2C_Mem_Read+0x448>)
 800693c:	68f8      	ldr	r0, [r7, #12]
 800693e:	f000 fa35 	bl	8006dac <I2C_WaitOnFlagUntilTimeout>
 8006942:	4603      	mov	r3, r0
 8006944:	2b00      	cmp	r3, #0
 8006946:	d001      	beq.n	800694c <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8006948:	2301      	movs	r3, #1
 800694a:	e091      	b.n	8006a70 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800694c:	68fb      	ldr	r3, [r7, #12]
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	681a      	ldr	r2, [r3, #0]
 8006952:	68fb      	ldr	r3, [r7, #12]
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800695a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800695c:	68fb      	ldr	r3, [r7, #12]
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	691a      	ldr	r2, [r3, #16]
 8006962:	68fb      	ldr	r3, [r7, #12]
 8006964:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006966:	b2d2      	uxtb	r2, r2
 8006968:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800696a:	68fb      	ldr	r3, [r7, #12]
 800696c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800696e:	1c5a      	adds	r2, r3, #1
 8006970:	68fb      	ldr	r3, [r7, #12]
 8006972:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006974:	68fb      	ldr	r3, [r7, #12]
 8006976:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006978:	3b01      	subs	r3, #1
 800697a:	b29a      	uxth	r2, r3
 800697c:	68fb      	ldr	r3, [r7, #12]
 800697e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006980:	68fb      	ldr	r3, [r7, #12]
 8006982:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006984:	b29b      	uxth	r3, r3
 8006986:	3b01      	subs	r3, #1
 8006988:	b29a      	uxth	r2, r3
 800698a:	68fb      	ldr	r3, [r7, #12]
 800698c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800698e:	68fb      	ldr	r3, [r7, #12]
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	691a      	ldr	r2, [r3, #16]
 8006994:	68fb      	ldr	r3, [r7, #12]
 8006996:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006998:	b2d2      	uxtb	r2, r2
 800699a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800699c:	68fb      	ldr	r3, [r7, #12]
 800699e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069a0:	1c5a      	adds	r2, r3, #1
 80069a2:	68fb      	ldr	r3, [r7, #12]
 80069a4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80069a6:	68fb      	ldr	r3, [r7, #12]
 80069a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80069aa:	3b01      	subs	r3, #1
 80069ac:	b29a      	uxth	r2, r3
 80069ae:	68fb      	ldr	r3, [r7, #12]
 80069b0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80069b2:	68fb      	ldr	r3, [r7, #12]
 80069b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80069b6:	b29b      	uxth	r3, r3
 80069b8:	3b01      	subs	r3, #1
 80069ba:	b29a      	uxth	r2, r3
 80069bc:	68fb      	ldr	r3, [r7, #12]
 80069be:	855a      	strh	r2, [r3, #42]	; 0x2a
 80069c0:	e042      	b.n	8006a48 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80069c2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80069c4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80069c6:	68f8      	ldr	r0, [r7, #12]
 80069c8:	f000 fb48 	bl	800705c <I2C_WaitOnRXNEFlagUntilTimeout>
 80069cc:	4603      	mov	r3, r0
 80069ce:	2b00      	cmp	r3, #0
 80069d0:	d001      	beq.n	80069d6 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 80069d2:	2301      	movs	r3, #1
 80069d4:	e04c      	b.n	8006a70 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80069d6:	68fb      	ldr	r3, [r7, #12]
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	691a      	ldr	r2, [r3, #16]
 80069dc:	68fb      	ldr	r3, [r7, #12]
 80069de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069e0:	b2d2      	uxtb	r2, r2
 80069e2:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80069e4:	68fb      	ldr	r3, [r7, #12]
 80069e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069e8:	1c5a      	adds	r2, r3, #1
 80069ea:	68fb      	ldr	r3, [r7, #12]
 80069ec:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80069ee:	68fb      	ldr	r3, [r7, #12]
 80069f0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80069f2:	3b01      	subs	r3, #1
 80069f4:	b29a      	uxth	r2, r3
 80069f6:	68fb      	ldr	r3, [r7, #12]
 80069f8:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80069fa:	68fb      	ldr	r3, [r7, #12]
 80069fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80069fe:	b29b      	uxth	r3, r3
 8006a00:	3b01      	subs	r3, #1
 8006a02:	b29a      	uxth	r2, r3
 8006a04:	68fb      	ldr	r3, [r7, #12]
 8006a06:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8006a08:	68fb      	ldr	r3, [r7, #12]
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	695b      	ldr	r3, [r3, #20]
 8006a0e:	f003 0304 	and.w	r3, r3, #4
 8006a12:	2b04      	cmp	r3, #4
 8006a14:	d118      	bne.n	8006a48 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006a16:	68fb      	ldr	r3, [r7, #12]
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	691a      	ldr	r2, [r3, #16]
 8006a1c:	68fb      	ldr	r3, [r7, #12]
 8006a1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a20:	b2d2      	uxtb	r2, r2
 8006a22:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006a24:	68fb      	ldr	r3, [r7, #12]
 8006a26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a28:	1c5a      	adds	r2, r3, #1
 8006a2a:	68fb      	ldr	r3, [r7, #12]
 8006a2c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006a2e:	68fb      	ldr	r3, [r7, #12]
 8006a30:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006a32:	3b01      	subs	r3, #1
 8006a34:	b29a      	uxth	r2, r3
 8006a36:	68fb      	ldr	r3, [r7, #12]
 8006a38:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006a3a:	68fb      	ldr	r3, [r7, #12]
 8006a3c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006a3e:	b29b      	uxth	r3, r3
 8006a40:	3b01      	subs	r3, #1
 8006a42:	b29a      	uxth	r2, r3
 8006a44:	68fb      	ldr	r3, [r7, #12]
 8006a46:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8006a48:	68fb      	ldr	r3, [r7, #12]
 8006a4a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006a4c:	2b00      	cmp	r3, #0
 8006a4e:	f47f aec2 	bne.w	80067d6 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8006a52:	68fb      	ldr	r3, [r7, #12]
 8006a54:	2220      	movs	r2, #32
 8006a56:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006a5a:	68fb      	ldr	r3, [r7, #12]
 8006a5c:	2200      	movs	r2, #0
 8006a5e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006a62:	68fb      	ldr	r3, [r7, #12]
 8006a64:	2200      	movs	r2, #0
 8006a66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8006a6a:	2300      	movs	r3, #0
 8006a6c:	e000      	b.n	8006a70 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8006a6e:	2302      	movs	r3, #2
  }
}
 8006a70:	4618      	mov	r0, r3
 8006a72:	3728      	adds	r7, #40	; 0x28
 8006a74:	46bd      	mov	sp, r7
 8006a76:	bd80      	pop	{r7, pc}
 8006a78:	00010004 	.word	0x00010004

08006a7c <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 8006a7c:	b480      	push	{r7}
 8006a7e:	b083      	sub	sp, #12
 8006a80:	af00      	add	r7, sp, #0
 8006a82:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006a8a:	b2db      	uxtb	r3, r3
}
 8006a8c:	4618      	mov	r0, r3
 8006a8e:	370c      	adds	r7, #12
 8006a90:	46bd      	mov	sp, r7
 8006a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a96:	4770      	bx	lr

08006a98 <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(I2C_HandleTypeDef *hi2c)
{
 8006a98:	b480      	push	{r7}
 8006a9a:	b083      	sub	sp, #12
 8006a9c:	af00      	add	r7, sp, #0
 8006a9e:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8006aa4:	4618      	mov	r0, r3
 8006aa6:	370c      	adds	r7, #12
 8006aa8:	46bd      	mov	sp, r7
 8006aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aae:	4770      	bx	lr

08006ab0 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8006ab0:	b580      	push	{r7, lr}
 8006ab2:	b088      	sub	sp, #32
 8006ab4:	af02      	add	r7, sp, #8
 8006ab6:	60f8      	str	r0, [r7, #12]
 8006ab8:	4608      	mov	r0, r1
 8006aba:	4611      	mov	r1, r2
 8006abc:	461a      	mov	r2, r3
 8006abe:	4603      	mov	r3, r0
 8006ac0:	817b      	strh	r3, [r7, #10]
 8006ac2:	460b      	mov	r3, r1
 8006ac4:	813b      	strh	r3, [r7, #8]
 8006ac6:	4613      	mov	r3, r2
 8006ac8:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006aca:	68fb      	ldr	r3, [r7, #12]
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	681a      	ldr	r2, [r3, #0]
 8006ad0:	68fb      	ldr	r3, [r7, #12]
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006ad8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006ada:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006adc:	9300      	str	r3, [sp, #0]
 8006ade:	6a3b      	ldr	r3, [r7, #32]
 8006ae0:	2200      	movs	r2, #0
 8006ae2:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8006ae6:	68f8      	ldr	r0, [r7, #12]
 8006ae8:	f000 f960 	bl	8006dac <I2C_WaitOnFlagUntilTimeout>
 8006aec:	4603      	mov	r3, r0
 8006aee:	2b00      	cmp	r3, #0
 8006af0:	d00d      	beq.n	8006b0e <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006af2:	68fb      	ldr	r3, [r7, #12]
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006afc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006b00:	d103      	bne.n	8006b0a <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006b02:	68fb      	ldr	r3, [r7, #12]
 8006b04:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006b08:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8006b0a:	2303      	movs	r3, #3
 8006b0c:	e05f      	b.n	8006bce <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8006b0e:	897b      	ldrh	r3, [r7, #10]
 8006b10:	b2db      	uxtb	r3, r3
 8006b12:	461a      	mov	r2, r3
 8006b14:	68fb      	ldr	r3, [r7, #12]
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8006b1c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006b1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b20:	6a3a      	ldr	r2, [r7, #32]
 8006b22:	492d      	ldr	r1, [pc, #180]	; (8006bd8 <I2C_RequestMemoryWrite+0x128>)
 8006b24:	68f8      	ldr	r0, [r7, #12]
 8006b26:	f000 f998 	bl	8006e5a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006b2a:	4603      	mov	r3, r0
 8006b2c:	2b00      	cmp	r3, #0
 8006b2e:	d001      	beq.n	8006b34 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8006b30:	2301      	movs	r3, #1
 8006b32:	e04c      	b.n	8006bce <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006b34:	2300      	movs	r3, #0
 8006b36:	617b      	str	r3, [r7, #20]
 8006b38:	68fb      	ldr	r3, [r7, #12]
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	695b      	ldr	r3, [r3, #20]
 8006b3e:	617b      	str	r3, [r7, #20]
 8006b40:	68fb      	ldr	r3, [r7, #12]
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	699b      	ldr	r3, [r3, #24]
 8006b46:	617b      	str	r3, [r7, #20]
 8006b48:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006b4a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006b4c:	6a39      	ldr	r1, [r7, #32]
 8006b4e:	68f8      	ldr	r0, [r7, #12]
 8006b50:	f000 fa02 	bl	8006f58 <I2C_WaitOnTXEFlagUntilTimeout>
 8006b54:	4603      	mov	r3, r0
 8006b56:	2b00      	cmp	r3, #0
 8006b58:	d00d      	beq.n	8006b76 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006b5a:	68fb      	ldr	r3, [r7, #12]
 8006b5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b5e:	2b04      	cmp	r3, #4
 8006b60:	d107      	bne.n	8006b72 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006b62:	68fb      	ldr	r3, [r7, #12]
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	681a      	ldr	r2, [r3, #0]
 8006b68:	68fb      	ldr	r3, [r7, #12]
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006b70:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8006b72:	2301      	movs	r3, #1
 8006b74:	e02b      	b.n	8006bce <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006b76:	88fb      	ldrh	r3, [r7, #6]
 8006b78:	2b01      	cmp	r3, #1
 8006b7a:	d105      	bne.n	8006b88 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006b7c:	893b      	ldrh	r3, [r7, #8]
 8006b7e:	b2da      	uxtb	r2, r3
 8006b80:	68fb      	ldr	r3, [r7, #12]
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	611a      	str	r2, [r3, #16]
 8006b86:	e021      	b.n	8006bcc <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8006b88:	893b      	ldrh	r3, [r7, #8]
 8006b8a:	0a1b      	lsrs	r3, r3, #8
 8006b8c:	b29b      	uxth	r3, r3
 8006b8e:	b2da      	uxtb	r2, r3
 8006b90:	68fb      	ldr	r3, [r7, #12]
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006b96:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006b98:	6a39      	ldr	r1, [r7, #32]
 8006b9a:	68f8      	ldr	r0, [r7, #12]
 8006b9c:	f000 f9dc 	bl	8006f58 <I2C_WaitOnTXEFlagUntilTimeout>
 8006ba0:	4603      	mov	r3, r0
 8006ba2:	2b00      	cmp	r3, #0
 8006ba4:	d00d      	beq.n	8006bc2 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006ba6:	68fb      	ldr	r3, [r7, #12]
 8006ba8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006baa:	2b04      	cmp	r3, #4
 8006bac:	d107      	bne.n	8006bbe <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006bae:	68fb      	ldr	r3, [r7, #12]
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	681a      	ldr	r2, [r3, #0]
 8006bb4:	68fb      	ldr	r3, [r7, #12]
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006bbc:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8006bbe:	2301      	movs	r3, #1
 8006bc0:	e005      	b.n	8006bce <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006bc2:	893b      	ldrh	r3, [r7, #8]
 8006bc4:	b2da      	uxtb	r2, r3
 8006bc6:	68fb      	ldr	r3, [r7, #12]
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8006bcc:	2300      	movs	r3, #0
}
 8006bce:	4618      	mov	r0, r3
 8006bd0:	3718      	adds	r7, #24
 8006bd2:	46bd      	mov	sp, r7
 8006bd4:	bd80      	pop	{r7, pc}
 8006bd6:	bf00      	nop
 8006bd8:	00010002 	.word	0x00010002

08006bdc <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8006bdc:	b580      	push	{r7, lr}
 8006bde:	b088      	sub	sp, #32
 8006be0:	af02      	add	r7, sp, #8
 8006be2:	60f8      	str	r0, [r7, #12]
 8006be4:	4608      	mov	r0, r1
 8006be6:	4611      	mov	r1, r2
 8006be8:	461a      	mov	r2, r3
 8006bea:	4603      	mov	r3, r0
 8006bec:	817b      	strh	r3, [r7, #10]
 8006bee:	460b      	mov	r3, r1
 8006bf0:	813b      	strh	r3, [r7, #8]
 8006bf2:	4613      	mov	r3, r2
 8006bf4:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006bf6:	68fb      	ldr	r3, [r7, #12]
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	681a      	ldr	r2, [r3, #0]
 8006bfc:	68fb      	ldr	r3, [r7, #12]
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006c04:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006c06:	68fb      	ldr	r3, [r7, #12]
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	681a      	ldr	r2, [r3, #0]
 8006c0c:	68fb      	ldr	r3, [r7, #12]
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006c14:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006c16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c18:	9300      	str	r3, [sp, #0]
 8006c1a:	6a3b      	ldr	r3, [r7, #32]
 8006c1c:	2200      	movs	r2, #0
 8006c1e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8006c22:	68f8      	ldr	r0, [r7, #12]
 8006c24:	f000 f8c2 	bl	8006dac <I2C_WaitOnFlagUntilTimeout>
 8006c28:	4603      	mov	r3, r0
 8006c2a:	2b00      	cmp	r3, #0
 8006c2c:	d00d      	beq.n	8006c4a <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006c2e:	68fb      	ldr	r3, [r7, #12]
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006c38:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006c3c:	d103      	bne.n	8006c46 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006c3e:	68fb      	ldr	r3, [r7, #12]
 8006c40:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006c44:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8006c46:	2303      	movs	r3, #3
 8006c48:	e0aa      	b.n	8006da0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8006c4a:	897b      	ldrh	r3, [r7, #10]
 8006c4c:	b2db      	uxtb	r3, r3
 8006c4e:	461a      	mov	r2, r3
 8006c50:	68fb      	ldr	r3, [r7, #12]
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8006c58:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006c5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c5c:	6a3a      	ldr	r2, [r7, #32]
 8006c5e:	4952      	ldr	r1, [pc, #328]	; (8006da8 <I2C_RequestMemoryRead+0x1cc>)
 8006c60:	68f8      	ldr	r0, [r7, #12]
 8006c62:	f000 f8fa 	bl	8006e5a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006c66:	4603      	mov	r3, r0
 8006c68:	2b00      	cmp	r3, #0
 8006c6a:	d001      	beq.n	8006c70 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8006c6c:	2301      	movs	r3, #1
 8006c6e:	e097      	b.n	8006da0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006c70:	2300      	movs	r3, #0
 8006c72:	617b      	str	r3, [r7, #20]
 8006c74:	68fb      	ldr	r3, [r7, #12]
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	695b      	ldr	r3, [r3, #20]
 8006c7a:	617b      	str	r3, [r7, #20]
 8006c7c:	68fb      	ldr	r3, [r7, #12]
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	699b      	ldr	r3, [r3, #24]
 8006c82:	617b      	str	r3, [r7, #20]
 8006c84:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006c86:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006c88:	6a39      	ldr	r1, [r7, #32]
 8006c8a:	68f8      	ldr	r0, [r7, #12]
 8006c8c:	f000 f964 	bl	8006f58 <I2C_WaitOnTXEFlagUntilTimeout>
 8006c90:	4603      	mov	r3, r0
 8006c92:	2b00      	cmp	r3, #0
 8006c94:	d00d      	beq.n	8006cb2 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006c96:	68fb      	ldr	r3, [r7, #12]
 8006c98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c9a:	2b04      	cmp	r3, #4
 8006c9c:	d107      	bne.n	8006cae <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006c9e:	68fb      	ldr	r3, [r7, #12]
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	681a      	ldr	r2, [r3, #0]
 8006ca4:	68fb      	ldr	r3, [r7, #12]
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006cac:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8006cae:	2301      	movs	r3, #1
 8006cb0:	e076      	b.n	8006da0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006cb2:	88fb      	ldrh	r3, [r7, #6]
 8006cb4:	2b01      	cmp	r3, #1
 8006cb6:	d105      	bne.n	8006cc4 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006cb8:	893b      	ldrh	r3, [r7, #8]
 8006cba:	b2da      	uxtb	r2, r3
 8006cbc:	68fb      	ldr	r3, [r7, #12]
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	611a      	str	r2, [r3, #16]
 8006cc2:	e021      	b.n	8006d08 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8006cc4:	893b      	ldrh	r3, [r7, #8]
 8006cc6:	0a1b      	lsrs	r3, r3, #8
 8006cc8:	b29b      	uxth	r3, r3
 8006cca:	b2da      	uxtb	r2, r3
 8006ccc:	68fb      	ldr	r3, [r7, #12]
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006cd2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006cd4:	6a39      	ldr	r1, [r7, #32]
 8006cd6:	68f8      	ldr	r0, [r7, #12]
 8006cd8:	f000 f93e 	bl	8006f58 <I2C_WaitOnTXEFlagUntilTimeout>
 8006cdc:	4603      	mov	r3, r0
 8006cde:	2b00      	cmp	r3, #0
 8006ce0:	d00d      	beq.n	8006cfe <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006ce2:	68fb      	ldr	r3, [r7, #12]
 8006ce4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ce6:	2b04      	cmp	r3, #4
 8006ce8:	d107      	bne.n	8006cfa <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006cea:	68fb      	ldr	r3, [r7, #12]
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	681a      	ldr	r2, [r3, #0]
 8006cf0:	68fb      	ldr	r3, [r7, #12]
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006cf8:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8006cfa:	2301      	movs	r3, #1
 8006cfc:	e050      	b.n	8006da0 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006cfe:	893b      	ldrh	r3, [r7, #8]
 8006d00:	b2da      	uxtb	r2, r3
 8006d02:	68fb      	ldr	r3, [r7, #12]
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006d08:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006d0a:	6a39      	ldr	r1, [r7, #32]
 8006d0c:	68f8      	ldr	r0, [r7, #12]
 8006d0e:	f000 f923 	bl	8006f58 <I2C_WaitOnTXEFlagUntilTimeout>
 8006d12:	4603      	mov	r3, r0
 8006d14:	2b00      	cmp	r3, #0
 8006d16:	d00d      	beq.n	8006d34 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006d18:	68fb      	ldr	r3, [r7, #12]
 8006d1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d1c:	2b04      	cmp	r3, #4
 8006d1e:	d107      	bne.n	8006d30 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006d20:	68fb      	ldr	r3, [r7, #12]
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	681a      	ldr	r2, [r3, #0]
 8006d26:	68fb      	ldr	r3, [r7, #12]
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006d2e:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8006d30:	2301      	movs	r3, #1
 8006d32:	e035      	b.n	8006da0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006d34:	68fb      	ldr	r3, [r7, #12]
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	681a      	ldr	r2, [r3, #0]
 8006d3a:	68fb      	ldr	r3, [r7, #12]
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006d42:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006d44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d46:	9300      	str	r3, [sp, #0]
 8006d48:	6a3b      	ldr	r3, [r7, #32]
 8006d4a:	2200      	movs	r2, #0
 8006d4c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8006d50:	68f8      	ldr	r0, [r7, #12]
 8006d52:	f000 f82b 	bl	8006dac <I2C_WaitOnFlagUntilTimeout>
 8006d56:	4603      	mov	r3, r0
 8006d58:	2b00      	cmp	r3, #0
 8006d5a:	d00d      	beq.n	8006d78 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006d5c:	68fb      	ldr	r3, [r7, #12]
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	681b      	ldr	r3, [r3, #0]
 8006d62:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006d66:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006d6a:	d103      	bne.n	8006d74 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006d6c:	68fb      	ldr	r3, [r7, #12]
 8006d6e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006d72:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8006d74:	2303      	movs	r3, #3
 8006d76:	e013      	b.n	8006da0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8006d78:	897b      	ldrh	r3, [r7, #10]
 8006d7a:	b2db      	uxtb	r3, r3
 8006d7c:	f043 0301 	orr.w	r3, r3, #1
 8006d80:	b2da      	uxtb	r2, r3
 8006d82:	68fb      	ldr	r3, [r7, #12]
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006d88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d8a:	6a3a      	ldr	r2, [r7, #32]
 8006d8c:	4906      	ldr	r1, [pc, #24]	; (8006da8 <I2C_RequestMemoryRead+0x1cc>)
 8006d8e:	68f8      	ldr	r0, [r7, #12]
 8006d90:	f000 f863 	bl	8006e5a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006d94:	4603      	mov	r3, r0
 8006d96:	2b00      	cmp	r3, #0
 8006d98:	d001      	beq.n	8006d9e <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8006d9a:	2301      	movs	r3, #1
 8006d9c:	e000      	b.n	8006da0 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8006d9e:	2300      	movs	r3, #0
}
 8006da0:	4618      	mov	r0, r3
 8006da2:	3718      	adds	r7, #24
 8006da4:	46bd      	mov	sp, r7
 8006da6:	bd80      	pop	{r7, pc}
 8006da8:	00010002 	.word	0x00010002

08006dac <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8006dac:	b580      	push	{r7, lr}
 8006dae:	b084      	sub	sp, #16
 8006db0:	af00      	add	r7, sp, #0
 8006db2:	60f8      	str	r0, [r7, #12]
 8006db4:	60b9      	str	r1, [r7, #8]
 8006db6:	603b      	str	r3, [r7, #0]
 8006db8:	4613      	mov	r3, r2
 8006dba:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006dbc:	e025      	b.n	8006e0a <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006dbe:	683b      	ldr	r3, [r7, #0]
 8006dc0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006dc4:	d021      	beq.n	8006e0a <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006dc6:	f7fe fdc9 	bl	800595c <HAL_GetTick>
 8006dca:	4602      	mov	r2, r0
 8006dcc:	69bb      	ldr	r3, [r7, #24]
 8006dce:	1ad3      	subs	r3, r2, r3
 8006dd0:	683a      	ldr	r2, [r7, #0]
 8006dd2:	429a      	cmp	r2, r3
 8006dd4:	d302      	bcc.n	8006ddc <I2C_WaitOnFlagUntilTimeout+0x30>
 8006dd6:	683b      	ldr	r3, [r7, #0]
 8006dd8:	2b00      	cmp	r3, #0
 8006dda:	d116      	bne.n	8006e0a <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8006ddc:	68fb      	ldr	r3, [r7, #12]
 8006dde:	2200      	movs	r2, #0
 8006de0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8006de2:	68fb      	ldr	r3, [r7, #12]
 8006de4:	2220      	movs	r2, #32
 8006de6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8006dea:	68fb      	ldr	r3, [r7, #12]
 8006dec:	2200      	movs	r2, #0
 8006dee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8006df2:	68fb      	ldr	r3, [r7, #12]
 8006df4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006df6:	f043 0220 	orr.w	r2, r3, #32
 8006dfa:	68fb      	ldr	r3, [r7, #12]
 8006dfc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006dfe:	68fb      	ldr	r3, [r7, #12]
 8006e00:	2200      	movs	r2, #0
 8006e02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006e06:	2301      	movs	r3, #1
 8006e08:	e023      	b.n	8006e52 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006e0a:	68bb      	ldr	r3, [r7, #8]
 8006e0c:	0c1b      	lsrs	r3, r3, #16
 8006e0e:	b2db      	uxtb	r3, r3
 8006e10:	2b01      	cmp	r3, #1
 8006e12:	d10d      	bne.n	8006e30 <I2C_WaitOnFlagUntilTimeout+0x84>
 8006e14:	68fb      	ldr	r3, [r7, #12]
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	695b      	ldr	r3, [r3, #20]
 8006e1a:	43da      	mvns	r2, r3
 8006e1c:	68bb      	ldr	r3, [r7, #8]
 8006e1e:	4013      	ands	r3, r2
 8006e20:	b29b      	uxth	r3, r3
 8006e22:	2b00      	cmp	r3, #0
 8006e24:	bf0c      	ite	eq
 8006e26:	2301      	moveq	r3, #1
 8006e28:	2300      	movne	r3, #0
 8006e2a:	b2db      	uxtb	r3, r3
 8006e2c:	461a      	mov	r2, r3
 8006e2e:	e00c      	b.n	8006e4a <I2C_WaitOnFlagUntilTimeout+0x9e>
 8006e30:	68fb      	ldr	r3, [r7, #12]
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	699b      	ldr	r3, [r3, #24]
 8006e36:	43da      	mvns	r2, r3
 8006e38:	68bb      	ldr	r3, [r7, #8]
 8006e3a:	4013      	ands	r3, r2
 8006e3c:	b29b      	uxth	r3, r3
 8006e3e:	2b00      	cmp	r3, #0
 8006e40:	bf0c      	ite	eq
 8006e42:	2301      	moveq	r3, #1
 8006e44:	2300      	movne	r3, #0
 8006e46:	b2db      	uxtb	r3, r3
 8006e48:	461a      	mov	r2, r3
 8006e4a:	79fb      	ldrb	r3, [r7, #7]
 8006e4c:	429a      	cmp	r2, r3
 8006e4e:	d0b6      	beq.n	8006dbe <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006e50:	2300      	movs	r3, #0
}
 8006e52:	4618      	mov	r0, r3
 8006e54:	3710      	adds	r7, #16
 8006e56:	46bd      	mov	sp, r7
 8006e58:	bd80      	pop	{r7, pc}

08006e5a <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8006e5a:	b580      	push	{r7, lr}
 8006e5c:	b084      	sub	sp, #16
 8006e5e:	af00      	add	r7, sp, #0
 8006e60:	60f8      	str	r0, [r7, #12]
 8006e62:	60b9      	str	r1, [r7, #8]
 8006e64:	607a      	str	r2, [r7, #4]
 8006e66:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006e68:	e051      	b.n	8006f0e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006e6a:	68fb      	ldr	r3, [r7, #12]
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	695b      	ldr	r3, [r3, #20]
 8006e70:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006e74:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006e78:	d123      	bne.n	8006ec2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006e7a:	68fb      	ldr	r3, [r7, #12]
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	681a      	ldr	r2, [r3, #0]
 8006e80:	68fb      	ldr	r3, [r7, #12]
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006e88:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006e8a:	68fb      	ldr	r3, [r7, #12]
 8006e8c:	681b      	ldr	r3, [r3, #0]
 8006e8e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006e92:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8006e94:	68fb      	ldr	r3, [r7, #12]
 8006e96:	2200      	movs	r2, #0
 8006e98:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006e9a:	68fb      	ldr	r3, [r7, #12]
 8006e9c:	2220      	movs	r2, #32
 8006e9e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006ea2:	68fb      	ldr	r3, [r7, #12]
 8006ea4:	2200      	movs	r2, #0
 8006ea6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006eaa:	68fb      	ldr	r3, [r7, #12]
 8006eac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006eae:	f043 0204 	orr.w	r2, r3, #4
 8006eb2:	68fb      	ldr	r3, [r7, #12]
 8006eb4:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006eb6:	68fb      	ldr	r3, [r7, #12]
 8006eb8:	2200      	movs	r2, #0
 8006eba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8006ebe:	2301      	movs	r3, #1
 8006ec0:	e046      	b.n	8006f50 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ec8:	d021      	beq.n	8006f0e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006eca:	f7fe fd47 	bl	800595c <HAL_GetTick>
 8006ece:	4602      	mov	r2, r0
 8006ed0:	683b      	ldr	r3, [r7, #0]
 8006ed2:	1ad3      	subs	r3, r2, r3
 8006ed4:	687a      	ldr	r2, [r7, #4]
 8006ed6:	429a      	cmp	r2, r3
 8006ed8:	d302      	bcc.n	8006ee0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	2b00      	cmp	r3, #0
 8006ede:	d116      	bne.n	8006f0e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006ee0:	68fb      	ldr	r3, [r7, #12]
 8006ee2:	2200      	movs	r2, #0
 8006ee4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006ee6:	68fb      	ldr	r3, [r7, #12]
 8006ee8:	2220      	movs	r2, #32
 8006eea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006eee:	68fb      	ldr	r3, [r7, #12]
 8006ef0:	2200      	movs	r2, #0
 8006ef2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006ef6:	68fb      	ldr	r3, [r7, #12]
 8006ef8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006efa:	f043 0220 	orr.w	r2, r3, #32
 8006efe:	68fb      	ldr	r3, [r7, #12]
 8006f00:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006f02:	68fb      	ldr	r3, [r7, #12]
 8006f04:	2200      	movs	r2, #0
 8006f06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006f0a:	2301      	movs	r3, #1
 8006f0c:	e020      	b.n	8006f50 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006f0e:	68bb      	ldr	r3, [r7, #8]
 8006f10:	0c1b      	lsrs	r3, r3, #16
 8006f12:	b2db      	uxtb	r3, r3
 8006f14:	2b01      	cmp	r3, #1
 8006f16:	d10c      	bne.n	8006f32 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8006f18:	68fb      	ldr	r3, [r7, #12]
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	695b      	ldr	r3, [r3, #20]
 8006f1e:	43da      	mvns	r2, r3
 8006f20:	68bb      	ldr	r3, [r7, #8]
 8006f22:	4013      	ands	r3, r2
 8006f24:	b29b      	uxth	r3, r3
 8006f26:	2b00      	cmp	r3, #0
 8006f28:	bf14      	ite	ne
 8006f2a:	2301      	movne	r3, #1
 8006f2c:	2300      	moveq	r3, #0
 8006f2e:	b2db      	uxtb	r3, r3
 8006f30:	e00b      	b.n	8006f4a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8006f32:	68fb      	ldr	r3, [r7, #12]
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	699b      	ldr	r3, [r3, #24]
 8006f38:	43da      	mvns	r2, r3
 8006f3a:	68bb      	ldr	r3, [r7, #8]
 8006f3c:	4013      	ands	r3, r2
 8006f3e:	b29b      	uxth	r3, r3
 8006f40:	2b00      	cmp	r3, #0
 8006f42:	bf14      	ite	ne
 8006f44:	2301      	movne	r3, #1
 8006f46:	2300      	moveq	r3, #0
 8006f48:	b2db      	uxtb	r3, r3
 8006f4a:	2b00      	cmp	r3, #0
 8006f4c:	d18d      	bne.n	8006e6a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8006f4e:	2300      	movs	r3, #0
}
 8006f50:	4618      	mov	r0, r3
 8006f52:	3710      	adds	r7, #16
 8006f54:	46bd      	mov	sp, r7
 8006f56:	bd80      	pop	{r7, pc}

08006f58 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006f58:	b580      	push	{r7, lr}
 8006f5a:	b084      	sub	sp, #16
 8006f5c:	af00      	add	r7, sp, #0
 8006f5e:	60f8      	str	r0, [r7, #12]
 8006f60:	60b9      	str	r1, [r7, #8]
 8006f62:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006f64:	e02d      	b.n	8006fc2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8006f66:	68f8      	ldr	r0, [r7, #12]
 8006f68:	f000 f8ce 	bl	8007108 <I2C_IsAcknowledgeFailed>
 8006f6c:	4603      	mov	r3, r0
 8006f6e:	2b00      	cmp	r3, #0
 8006f70:	d001      	beq.n	8006f76 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8006f72:	2301      	movs	r3, #1
 8006f74:	e02d      	b.n	8006fd2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006f76:	68bb      	ldr	r3, [r7, #8]
 8006f78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f7c:	d021      	beq.n	8006fc2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006f7e:	f7fe fced 	bl	800595c <HAL_GetTick>
 8006f82:	4602      	mov	r2, r0
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	1ad3      	subs	r3, r2, r3
 8006f88:	68ba      	ldr	r2, [r7, #8]
 8006f8a:	429a      	cmp	r2, r3
 8006f8c:	d302      	bcc.n	8006f94 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8006f8e:	68bb      	ldr	r3, [r7, #8]
 8006f90:	2b00      	cmp	r3, #0
 8006f92:	d116      	bne.n	8006fc2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006f94:	68fb      	ldr	r3, [r7, #12]
 8006f96:	2200      	movs	r2, #0
 8006f98:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006f9a:	68fb      	ldr	r3, [r7, #12]
 8006f9c:	2220      	movs	r2, #32
 8006f9e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006fa2:	68fb      	ldr	r3, [r7, #12]
 8006fa4:	2200      	movs	r2, #0
 8006fa6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006faa:	68fb      	ldr	r3, [r7, #12]
 8006fac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006fae:	f043 0220 	orr.w	r2, r3, #32
 8006fb2:	68fb      	ldr	r3, [r7, #12]
 8006fb4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006fb6:	68fb      	ldr	r3, [r7, #12]
 8006fb8:	2200      	movs	r2, #0
 8006fba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006fbe:	2301      	movs	r3, #1
 8006fc0:	e007      	b.n	8006fd2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006fc2:	68fb      	ldr	r3, [r7, #12]
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	695b      	ldr	r3, [r3, #20]
 8006fc8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006fcc:	2b80      	cmp	r3, #128	; 0x80
 8006fce:	d1ca      	bne.n	8006f66 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006fd0:	2300      	movs	r3, #0
}
 8006fd2:	4618      	mov	r0, r3
 8006fd4:	3710      	adds	r7, #16
 8006fd6:	46bd      	mov	sp, r7
 8006fd8:	bd80      	pop	{r7, pc}

08006fda <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006fda:	b580      	push	{r7, lr}
 8006fdc:	b084      	sub	sp, #16
 8006fde:	af00      	add	r7, sp, #0
 8006fe0:	60f8      	str	r0, [r7, #12]
 8006fe2:	60b9      	str	r1, [r7, #8]
 8006fe4:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006fe6:	e02d      	b.n	8007044 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8006fe8:	68f8      	ldr	r0, [r7, #12]
 8006fea:	f000 f88d 	bl	8007108 <I2C_IsAcknowledgeFailed>
 8006fee:	4603      	mov	r3, r0
 8006ff0:	2b00      	cmp	r3, #0
 8006ff2:	d001      	beq.n	8006ff8 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8006ff4:	2301      	movs	r3, #1
 8006ff6:	e02d      	b.n	8007054 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006ff8:	68bb      	ldr	r3, [r7, #8]
 8006ffa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ffe:	d021      	beq.n	8007044 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007000:	f7fe fcac 	bl	800595c <HAL_GetTick>
 8007004:	4602      	mov	r2, r0
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	1ad3      	subs	r3, r2, r3
 800700a:	68ba      	ldr	r2, [r7, #8]
 800700c:	429a      	cmp	r2, r3
 800700e:	d302      	bcc.n	8007016 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8007010:	68bb      	ldr	r3, [r7, #8]
 8007012:	2b00      	cmp	r3, #0
 8007014:	d116      	bne.n	8007044 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8007016:	68fb      	ldr	r3, [r7, #12]
 8007018:	2200      	movs	r2, #0
 800701a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800701c:	68fb      	ldr	r3, [r7, #12]
 800701e:	2220      	movs	r2, #32
 8007020:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007024:	68fb      	ldr	r3, [r7, #12]
 8007026:	2200      	movs	r2, #0
 8007028:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800702c:	68fb      	ldr	r3, [r7, #12]
 800702e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007030:	f043 0220 	orr.w	r2, r3, #32
 8007034:	68fb      	ldr	r3, [r7, #12]
 8007036:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007038:	68fb      	ldr	r3, [r7, #12]
 800703a:	2200      	movs	r2, #0
 800703c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8007040:	2301      	movs	r3, #1
 8007042:	e007      	b.n	8007054 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8007044:	68fb      	ldr	r3, [r7, #12]
 8007046:	681b      	ldr	r3, [r3, #0]
 8007048:	695b      	ldr	r3, [r3, #20]
 800704a:	f003 0304 	and.w	r3, r3, #4
 800704e:	2b04      	cmp	r3, #4
 8007050:	d1ca      	bne.n	8006fe8 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8007052:	2300      	movs	r3, #0
}
 8007054:	4618      	mov	r0, r3
 8007056:	3710      	adds	r7, #16
 8007058:	46bd      	mov	sp, r7
 800705a:	bd80      	pop	{r7, pc}

0800705c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800705c:	b580      	push	{r7, lr}
 800705e:	b084      	sub	sp, #16
 8007060:	af00      	add	r7, sp, #0
 8007062:	60f8      	str	r0, [r7, #12]
 8007064:	60b9      	str	r1, [r7, #8]
 8007066:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8007068:	e042      	b.n	80070f0 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800706a:	68fb      	ldr	r3, [r7, #12]
 800706c:	681b      	ldr	r3, [r3, #0]
 800706e:	695b      	ldr	r3, [r3, #20]
 8007070:	f003 0310 	and.w	r3, r3, #16
 8007074:	2b10      	cmp	r3, #16
 8007076:	d119      	bne.n	80070ac <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007078:	68fb      	ldr	r3, [r7, #12]
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	f06f 0210 	mvn.w	r2, #16
 8007080:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8007082:	68fb      	ldr	r3, [r7, #12]
 8007084:	2200      	movs	r2, #0
 8007086:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8007088:	68fb      	ldr	r3, [r7, #12]
 800708a:	2220      	movs	r2, #32
 800708c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007090:	68fb      	ldr	r3, [r7, #12]
 8007092:	2200      	movs	r2, #0
 8007094:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8007098:	68fb      	ldr	r3, [r7, #12]
 800709a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800709c:	68fb      	ldr	r3, [r7, #12]
 800709e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80070a0:	68fb      	ldr	r3, [r7, #12]
 80070a2:	2200      	movs	r2, #0
 80070a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80070a8:	2301      	movs	r3, #1
 80070aa:	e029      	b.n	8007100 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80070ac:	f7fe fc56 	bl	800595c <HAL_GetTick>
 80070b0:	4602      	mov	r2, r0
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	1ad3      	subs	r3, r2, r3
 80070b6:	68ba      	ldr	r2, [r7, #8]
 80070b8:	429a      	cmp	r2, r3
 80070ba:	d302      	bcc.n	80070c2 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80070bc:	68bb      	ldr	r3, [r7, #8]
 80070be:	2b00      	cmp	r3, #0
 80070c0:	d116      	bne.n	80070f0 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 80070c2:	68fb      	ldr	r3, [r7, #12]
 80070c4:	2200      	movs	r2, #0
 80070c6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80070c8:	68fb      	ldr	r3, [r7, #12]
 80070ca:	2220      	movs	r2, #32
 80070cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80070d0:	68fb      	ldr	r3, [r7, #12]
 80070d2:	2200      	movs	r2, #0
 80070d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80070d8:	68fb      	ldr	r3, [r7, #12]
 80070da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070dc:	f043 0220 	orr.w	r2, r3, #32
 80070e0:	68fb      	ldr	r3, [r7, #12]
 80070e2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80070e4:	68fb      	ldr	r3, [r7, #12]
 80070e6:	2200      	movs	r2, #0
 80070e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80070ec:	2301      	movs	r3, #1
 80070ee:	e007      	b.n	8007100 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80070f0:	68fb      	ldr	r3, [r7, #12]
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	695b      	ldr	r3, [r3, #20]
 80070f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80070fa:	2b40      	cmp	r3, #64	; 0x40
 80070fc:	d1b5      	bne.n	800706a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80070fe:	2300      	movs	r3, #0
}
 8007100:	4618      	mov	r0, r3
 8007102:	3710      	adds	r7, #16
 8007104:	46bd      	mov	sp, r7
 8007106:	bd80      	pop	{r7, pc}

08007108 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8007108:	b480      	push	{r7}
 800710a:	b083      	sub	sp, #12
 800710c:	af00      	add	r7, sp, #0
 800710e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	695b      	ldr	r3, [r3, #20]
 8007116:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800711a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800711e:	d11b      	bne.n	8007158 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	681b      	ldr	r3, [r3, #0]
 8007124:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8007128:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	2200      	movs	r2, #0
 800712e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	2220      	movs	r2, #32
 8007134:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	2200      	movs	r2, #0
 800713c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007144:	f043 0204 	orr.w	r2, r3, #4
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	2200      	movs	r2, #0
 8007150:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8007154:	2301      	movs	r3, #1
 8007156:	e000      	b.n	800715a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8007158:	2300      	movs	r3, #0
}
 800715a:	4618      	mov	r0, r3
 800715c:	370c      	adds	r7, #12
 800715e:	46bd      	mov	sp, r7
 8007160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007164:	4770      	bx	lr
	...

08007168 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007168:	b580      	push	{r7, lr}
 800716a:	b086      	sub	sp, #24
 800716c:	af00      	add	r7, sp, #0
 800716e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	2b00      	cmp	r3, #0
 8007174:	d101      	bne.n	800717a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8007176:	2301      	movs	r3, #1
 8007178:	e267      	b.n	800764a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	f003 0301 	and.w	r3, r3, #1
 8007182:	2b00      	cmp	r3, #0
 8007184:	d075      	beq.n	8007272 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8007186:	4b88      	ldr	r3, [pc, #544]	; (80073a8 <HAL_RCC_OscConfig+0x240>)
 8007188:	689b      	ldr	r3, [r3, #8]
 800718a:	f003 030c 	and.w	r3, r3, #12
 800718e:	2b04      	cmp	r3, #4
 8007190:	d00c      	beq.n	80071ac <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007192:	4b85      	ldr	r3, [pc, #532]	; (80073a8 <HAL_RCC_OscConfig+0x240>)
 8007194:	689b      	ldr	r3, [r3, #8]
 8007196:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800719a:	2b08      	cmp	r3, #8
 800719c:	d112      	bne.n	80071c4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800719e:	4b82      	ldr	r3, [pc, #520]	; (80073a8 <HAL_RCC_OscConfig+0x240>)
 80071a0:	685b      	ldr	r3, [r3, #4]
 80071a2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80071a6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80071aa:	d10b      	bne.n	80071c4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80071ac:	4b7e      	ldr	r3, [pc, #504]	; (80073a8 <HAL_RCC_OscConfig+0x240>)
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80071b4:	2b00      	cmp	r3, #0
 80071b6:	d05b      	beq.n	8007270 <HAL_RCC_OscConfig+0x108>
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	685b      	ldr	r3, [r3, #4]
 80071bc:	2b00      	cmp	r3, #0
 80071be:	d157      	bne.n	8007270 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80071c0:	2301      	movs	r3, #1
 80071c2:	e242      	b.n	800764a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	685b      	ldr	r3, [r3, #4]
 80071c8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80071cc:	d106      	bne.n	80071dc <HAL_RCC_OscConfig+0x74>
 80071ce:	4b76      	ldr	r3, [pc, #472]	; (80073a8 <HAL_RCC_OscConfig+0x240>)
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	4a75      	ldr	r2, [pc, #468]	; (80073a8 <HAL_RCC_OscConfig+0x240>)
 80071d4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80071d8:	6013      	str	r3, [r2, #0]
 80071da:	e01d      	b.n	8007218 <HAL_RCC_OscConfig+0xb0>
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	685b      	ldr	r3, [r3, #4]
 80071e0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80071e4:	d10c      	bne.n	8007200 <HAL_RCC_OscConfig+0x98>
 80071e6:	4b70      	ldr	r3, [pc, #448]	; (80073a8 <HAL_RCC_OscConfig+0x240>)
 80071e8:	681b      	ldr	r3, [r3, #0]
 80071ea:	4a6f      	ldr	r2, [pc, #444]	; (80073a8 <HAL_RCC_OscConfig+0x240>)
 80071ec:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80071f0:	6013      	str	r3, [r2, #0]
 80071f2:	4b6d      	ldr	r3, [pc, #436]	; (80073a8 <HAL_RCC_OscConfig+0x240>)
 80071f4:	681b      	ldr	r3, [r3, #0]
 80071f6:	4a6c      	ldr	r2, [pc, #432]	; (80073a8 <HAL_RCC_OscConfig+0x240>)
 80071f8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80071fc:	6013      	str	r3, [r2, #0]
 80071fe:	e00b      	b.n	8007218 <HAL_RCC_OscConfig+0xb0>
 8007200:	4b69      	ldr	r3, [pc, #420]	; (80073a8 <HAL_RCC_OscConfig+0x240>)
 8007202:	681b      	ldr	r3, [r3, #0]
 8007204:	4a68      	ldr	r2, [pc, #416]	; (80073a8 <HAL_RCC_OscConfig+0x240>)
 8007206:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800720a:	6013      	str	r3, [r2, #0]
 800720c:	4b66      	ldr	r3, [pc, #408]	; (80073a8 <HAL_RCC_OscConfig+0x240>)
 800720e:	681b      	ldr	r3, [r3, #0]
 8007210:	4a65      	ldr	r2, [pc, #404]	; (80073a8 <HAL_RCC_OscConfig+0x240>)
 8007212:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007216:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	685b      	ldr	r3, [r3, #4]
 800721c:	2b00      	cmp	r3, #0
 800721e:	d013      	beq.n	8007248 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007220:	f7fe fb9c 	bl	800595c <HAL_GetTick>
 8007224:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007226:	e008      	b.n	800723a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007228:	f7fe fb98 	bl	800595c <HAL_GetTick>
 800722c:	4602      	mov	r2, r0
 800722e:	693b      	ldr	r3, [r7, #16]
 8007230:	1ad3      	subs	r3, r2, r3
 8007232:	2b64      	cmp	r3, #100	; 0x64
 8007234:	d901      	bls.n	800723a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8007236:	2303      	movs	r3, #3
 8007238:	e207      	b.n	800764a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800723a:	4b5b      	ldr	r3, [pc, #364]	; (80073a8 <HAL_RCC_OscConfig+0x240>)
 800723c:	681b      	ldr	r3, [r3, #0]
 800723e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007242:	2b00      	cmp	r3, #0
 8007244:	d0f0      	beq.n	8007228 <HAL_RCC_OscConfig+0xc0>
 8007246:	e014      	b.n	8007272 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007248:	f7fe fb88 	bl	800595c <HAL_GetTick>
 800724c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800724e:	e008      	b.n	8007262 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007250:	f7fe fb84 	bl	800595c <HAL_GetTick>
 8007254:	4602      	mov	r2, r0
 8007256:	693b      	ldr	r3, [r7, #16]
 8007258:	1ad3      	subs	r3, r2, r3
 800725a:	2b64      	cmp	r3, #100	; 0x64
 800725c:	d901      	bls.n	8007262 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800725e:	2303      	movs	r3, #3
 8007260:	e1f3      	b.n	800764a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007262:	4b51      	ldr	r3, [pc, #324]	; (80073a8 <HAL_RCC_OscConfig+0x240>)
 8007264:	681b      	ldr	r3, [r3, #0]
 8007266:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800726a:	2b00      	cmp	r3, #0
 800726c:	d1f0      	bne.n	8007250 <HAL_RCC_OscConfig+0xe8>
 800726e:	e000      	b.n	8007272 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007270:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	681b      	ldr	r3, [r3, #0]
 8007276:	f003 0302 	and.w	r3, r3, #2
 800727a:	2b00      	cmp	r3, #0
 800727c:	d063      	beq.n	8007346 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800727e:	4b4a      	ldr	r3, [pc, #296]	; (80073a8 <HAL_RCC_OscConfig+0x240>)
 8007280:	689b      	ldr	r3, [r3, #8]
 8007282:	f003 030c 	and.w	r3, r3, #12
 8007286:	2b00      	cmp	r3, #0
 8007288:	d00b      	beq.n	80072a2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800728a:	4b47      	ldr	r3, [pc, #284]	; (80073a8 <HAL_RCC_OscConfig+0x240>)
 800728c:	689b      	ldr	r3, [r3, #8]
 800728e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8007292:	2b08      	cmp	r3, #8
 8007294:	d11c      	bne.n	80072d0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007296:	4b44      	ldr	r3, [pc, #272]	; (80073a8 <HAL_RCC_OscConfig+0x240>)
 8007298:	685b      	ldr	r3, [r3, #4]
 800729a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800729e:	2b00      	cmp	r3, #0
 80072a0:	d116      	bne.n	80072d0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80072a2:	4b41      	ldr	r3, [pc, #260]	; (80073a8 <HAL_RCC_OscConfig+0x240>)
 80072a4:	681b      	ldr	r3, [r3, #0]
 80072a6:	f003 0302 	and.w	r3, r3, #2
 80072aa:	2b00      	cmp	r3, #0
 80072ac:	d005      	beq.n	80072ba <HAL_RCC_OscConfig+0x152>
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	68db      	ldr	r3, [r3, #12]
 80072b2:	2b01      	cmp	r3, #1
 80072b4:	d001      	beq.n	80072ba <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80072b6:	2301      	movs	r3, #1
 80072b8:	e1c7      	b.n	800764a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80072ba:	4b3b      	ldr	r3, [pc, #236]	; (80073a8 <HAL_RCC_OscConfig+0x240>)
 80072bc:	681b      	ldr	r3, [r3, #0]
 80072be:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	691b      	ldr	r3, [r3, #16]
 80072c6:	00db      	lsls	r3, r3, #3
 80072c8:	4937      	ldr	r1, [pc, #220]	; (80073a8 <HAL_RCC_OscConfig+0x240>)
 80072ca:	4313      	orrs	r3, r2
 80072cc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80072ce:	e03a      	b.n	8007346 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	68db      	ldr	r3, [r3, #12]
 80072d4:	2b00      	cmp	r3, #0
 80072d6:	d020      	beq.n	800731a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80072d8:	4b34      	ldr	r3, [pc, #208]	; (80073ac <HAL_RCC_OscConfig+0x244>)
 80072da:	2201      	movs	r2, #1
 80072dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80072de:	f7fe fb3d 	bl	800595c <HAL_GetTick>
 80072e2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80072e4:	e008      	b.n	80072f8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80072e6:	f7fe fb39 	bl	800595c <HAL_GetTick>
 80072ea:	4602      	mov	r2, r0
 80072ec:	693b      	ldr	r3, [r7, #16]
 80072ee:	1ad3      	subs	r3, r2, r3
 80072f0:	2b02      	cmp	r3, #2
 80072f2:	d901      	bls.n	80072f8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80072f4:	2303      	movs	r3, #3
 80072f6:	e1a8      	b.n	800764a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80072f8:	4b2b      	ldr	r3, [pc, #172]	; (80073a8 <HAL_RCC_OscConfig+0x240>)
 80072fa:	681b      	ldr	r3, [r3, #0]
 80072fc:	f003 0302 	and.w	r3, r3, #2
 8007300:	2b00      	cmp	r3, #0
 8007302:	d0f0      	beq.n	80072e6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007304:	4b28      	ldr	r3, [pc, #160]	; (80073a8 <HAL_RCC_OscConfig+0x240>)
 8007306:	681b      	ldr	r3, [r3, #0]
 8007308:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	691b      	ldr	r3, [r3, #16]
 8007310:	00db      	lsls	r3, r3, #3
 8007312:	4925      	ldr	r1, [pc, #148]	; (80073a8 <HAL_RCC_OscConfig+0x240>)
 8007314:	4313      	orrs	r3, r2
 8007316:	600b      	str	r3, [r1, #0]
 8007318:	e015      	b.n	8007346 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800731a:	4b24      	ldr	r3, [pc, #144]	; (80073ac <HAL_RCC_OscConfig+0x244>)
 800731c:	2200      	movs	r2, #0
 800731e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007320:	f7fe fb1c 	bl	800595c <HAL_GetTick>
 8007324:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007326:	e008      	b.n	800733a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007328:	f7fe fb18 	bl	800595c <HAL_GetTick>
 800732c:	4602      	mov	r2, r0
 800732e:	693b      	ldr	r3, [r7, #16]
 8007330:	1ad3      	subs	r3, r2, r3
 8007332:	2b02      	cmp	r3, #2
 8007334:	d901      	bls.n	800733a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8007336:	2303      	movs	r3, #3
 8007338:	e187      	b.n	800764a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800733a:	4b1b      	ldr	r3, [pc, #108]	; (80073a8 <HAL_RCC_OscConfig+0x240>)
 800733c:	681b      	ldr	r3, [r3, #0]
 800733e:	f003 0302 	and.w	r3, r3, #2
 8007342:	2b00      	cmp	r3, #0
 8007344:	d1f0      	bne.n	8007328 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	681b      	ldr	r3, [r3, #0]
 800734a:	f003 0308 	and.w	r3, r3, #8
 800734e:	2b00      	cmp	r3, #0
 8007350:	d036      	beq.n	80073c0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	695b      	ldr	r3, [r3, #20]
 8007356:	2b00      	cmp	r3, #0
 8007358:	d016      	beq.n	8007388 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800735a:	4b15      	ldr	r3, [pc, #84]	; (80073b0 <HAL_RCC_OscConfig+0x248>)
 800735c:	2201      	movs	r2, #1
 800735e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007360:	f7fe fafc 	bl	800595c <HAL_GetTick>
 8007364:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007366:	e008      	b.n	800737a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007368:	f7fe faf8 	bl	800595c <HAL_GetTick>
 800736c:	4602      	mov	r2, r0
 800736e:	693b      	ldr	r3, [r7, #16]
 8007370:	1ad3      	subs	r3, r2, r3
 8007372:	2b02      	cmp	r3, #2
 8007374:	d901      	bls.n	800737a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8007376:	2303      	movs	r3, #3
 8007378:	e167      	b.n	800764a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800737a:	4b0b      	ldr	r3, [pc, #44]	; (80073a8 <HAL_RCC_OscConfig+0x240>)
 800737c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800737e:	f003 0302 	and.w	r3, r3, #2
 8007382:	2b00      	cmp	r3, #0
 8007384:	d0f0      	beq.n	8007368 <HAL_RCC_OscConfig+0x200>
 8007386:	e01b      	b.n	80073c0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007388:	4b09      	ldr	r3, [pc, #36]	; (80073b0 <HAL_RCC_OscConfig+0x248>)
 800738a:	2200      	movs	r2, #0
 800738c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800738e:	f7fe fae5 	bl	800595c <HAL_GetTick>
 8007392:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007394:	e00e      	b.n	80073b4 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007396:	f7fe fae1 	bl	800595c <HAL_GetTick>
 800739a:	4602      	mov	r2, r0
 800739c:	693b      	ldr	r3, [r7, #16]
 800739e:	1ad3      	subs	r3, r2, r3
 80073a0:	2b02      	cmp	r3, #2
 80073a2:	d907      	bls.n	80073b4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80073a4:	2303      	movs	r3, #3
 80073a6:	e150      	b.n	800764a <HAL_RCC_OscConfig+0x4e2>
 80073a8:	40023800 	.word	0x40023800
 80073ac:	42470000 	.word	0x42470000
 80073b0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80073b4:	4b88      	ldr	r3, [pc, #544]	; (80075d8 <HAL_RCC_OscConfig+0x470>)
 80073b6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80073b8:	f003 0302 	and.w	r3, r3, #2
 80073bc:	2b00      	cmp	r3, #0
 80073be:	d1ea      	bne.n	8007396 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	f003 0304 	and.w	r3, r3, #4
 80073c8:	2b00      	cmp	r3, #0
 80073ca:	f000 8097 	beq.w	80074fc <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80073ce:	2300      	movs	r3, #0
 80073d0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80073d2:	4b81      	ldr	r3, [pc, #516]	; (80075d8 <HAL_RCC_OscConfig+0x470>)
 80073d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80073da:	2b00      	cmp	r3, #0
 80073dc:	d10f      	bne.n	80073fe <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80073de:	2300      	movs	r3, #0
 80073e0:	60bb      	str	r3, [r7, #8]
 80073e2:	4b7d      	ldr	r3, [pc, #500]	; (80075d8 <HAL_RCC_OscConfig+0x470>)
 80073e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073e6:	4a7c      	ldr	r2, [pc, #496]	; (80075d8 <HAL_RCC_OscConfig+0x470>)
 80073e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80073ec:	6413      	str	r3, [r2, #64]	; 0x40
 80073ee:	4b7a      	ldr	r3, [pc, #488]	; (80075d8 <HAL_RCC_OscConfig+0x470>)
 80073f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80073f6:	60bb      	str	r3, [r7, #8]
 80073f8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80073fa:	2301      	movs	r3, #1
 80073fc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80073fe:	4b77      	ldr	r3, [pc, #476]	; (80075dc <HAL_RCC_OscConfig+0x474>)
 8007400:	681b      	ldr	r3, [r3, #0]
 8007402:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007406:	2b00      	cmp	r3, #0
 8007408:	d118      	bne.n	800743c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800740a:	4b74      	ldr	r3, [pc, #464]	; (80075dc <HAL_RCC_OscConfig+0x474>)
 800740c:	681b      	ldr	r3, [r3, #0]
 800740e:	4a73      	ldr	r2, [pc, #460]	; (80075dc <HAL_RCC_OscConfig+0x474>)
 8007410:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007414:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007416:	f7fe faa1 	bl	800595c <HAL_GetTick>
 800741a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800741c:	e008      	b.n	8007430 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800741e:	f7fe fa9d 	bl	800595c <HAL_GetTick>
 8007422:	4602      	mov	r2, r0
 8007424:	693b      	ldr	r3, [r7, #16]
 8007426:	1ad3      	subs	r3, r2, r3
 8007428:	2b02      	cmp	r3, #2
 800742a:	d901      	bls.n	8007430 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800742c:	2303      	movs	r3, #3
 800742e:	e10c      	b.n	800764a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007430:	4b6a      	ldr	r3, [pc, #424]	; (80075dc <HAL_RCC_OscConfig+0x474>)
 8007432:	681b      	ldr	r3, [r3, #0]
 8007434:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007438:	2b00      	cmp	r3, #0
 800743a:	d0f0      	beq.n	800741e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	689b      	ldr	r3, [r3, #8]
 8007440:	2b01      	cmp	r3, #1
 8007442:	d106      	bne.n	8007452 <HAL_RCC_OscConfig+0x2ea>
 8007444:	4b64      	ldr	r3, [pc, #400]	; (80075d8 <HAL_RCC_OscConfig+0x470>)
 8007446:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007448:	4a63      	ldr	r2, [pc, #396]	; (80075d8 <HAL_RCC_OscConfig+0x470>)
 800744a:	f043 0301 	orr.w	r3, r3, #1
 800744e:	6713      	str	r3, [r2, #112]	; 0x70
 8007450:	e01c      	b.n	800748c <HAL_RCC_OscConfig+0x324>
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	689b      	ldr	r3, [r3, #8]
 8007456:	2b05      	cmp	r3, #5
 8007458:	d10c      	bne.n	8007474 <HAL_RCC_OscConfig+0x30c>
 800745a:	4b5f      	ldr	r3, [pc, #380]	; (80075d8 <HAL_RCC_OscConfig+0x470>)
 800745c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800745e:	4a5e      	ldr	r2, [pc, #376]	; (80075d8 <HAL_RCC_OscConfig+0x470>)
 8007460:	f043 0304 	orr.w	r3, r3, #4
 8007464:	6713      	str	r3, [r2, #112]	; 0x70
 8007466:	4b5c      	ldr	r3, [pc, #368]	; (80075d8 <HAL_RCC_OscConfig+0x470>)
 8007468:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800746a:	4a5b      	ldr	r2, [pc, #364]	; (80075d8 <HAL_RCC_OscConfig+0x470>)
 800746c:	f043 0301 	orr.w	r3, r3, #1
 8007470:	6713      	str	r3, [r2, #112]	; 0x70
 8007472:	e00b      	b.n	800748c <HAL_RCC_OscConfig+0x324>
 8007474:	4b58      	ldr	r3, [pc, #352]	; (80075d8 <HAL_RCC_OscConfig+0x470>)
 8007476:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007478:	4a57      	ldr	r2, [pc, #348]	; (80075d8 <HAL_RCC_OscConfig+0x470>)
 800747a:	f023 0301 	bic.w	r3, r3, #1
 800747e:	6713      	str	r3, [r2, #112]	; 0x70
 8007480:	4b55      	ldr	r3, [pc, #340]	; (80075d8 <HAL_RCC_OscConfig+0x470>)
 8007482:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007484:	4a54      	ldr	r2, [pc, #336]	; (80075d8 <HAL_RCC_OscConfig+0x470>)
 8007486:	f023 0304 	bic.w	r3, r3, #4
 800748a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	689b      	ldr	r3, [r3, #8]
 8007490:	2b00      	cmp	r3, #0
 8007492:	d015      	beq.n	80074c0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007494:	f7fe fa62 	bl	800595c <HAL_GetTick>
 8007498:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800749a:	e00a      	b.n	80074b2 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800749c:	f7fe fa5e 	bl	800595c <HAL_GetTick>
 80074a0:	4602      	mov	r2, r0
 80074a2:	693b      	ldr	r3, [r7, #16]
 80074a4:	1ad3      	subs	r3, r2, r3
 80074a6:	f241 3288 	movw	r2, #5000	; 0x1388
 80074aa:	4293      	cmp	r3, r2
 80074ac:	d901      	bls.n	80074b2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80074ae:	2303      	movs	r3, #3
 80074b0:	e0cb      	b.n	800764a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80074b2:	4b49      	ldr	r3, [pc, #292]	; (80075d8 <HAL_RCC_OscConfig+0x470>)
 80074b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80074b6:	f003 0302 	and.w	r3, r3, #2
 80074ba:	2b00      	cmp	r3, #0
 80074bc:	d0ee      	beq.n	800749c <HAL_RCC_OscConfig+0x334>
 80074be:	e014      	b.n	80074ea <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80074c0:	f7fe fa4c 	bl	800595c <HAL_GetTick>
 80074c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80074c6:	e00a      	b.n	80074de <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80074c8:	f7fe fa48 	bl	800595c <HAL_GetTick>
 80074cc:	4602      	mov	r2, r0
 80074ce:	693b      	ldr	r3, [r7, #16]
 80074d0:	1ad3      	subs	r3, r2, r3
 80074d2:	f241 3288 	movw	r2, #5000	; 0x1388
 80074d6:	4293      	cmp	r3, r2
 80074d8:	d901      	bls.n	80074de <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80074da:	2303      	movs	r3, #3
 80074dc:	e0b5      	b.n	800764a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80074de:	4b3e      	ldr	r3, [pc, #248]	; (80075d8 <HAL_RCC_OscConfig+0x470>)
 80074e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80074e2:	f003 0302 	and.w	r3, r3, #2
 80074e6:	2b00      	cmp	r3, #0
 80074e8:	d1ee      	bne.n	80074c8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80074ea:	7dfb      	ldrb	r3, [r7, #23]
 80074ec:	2b01      	cmp	r3, #1
 80074ee:	d105      	bne.n	80074fc <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80074f0:	4b39      	ldr	r3, [pc, #228]	; (80075d8 <HAL_RCC_OscConfig+0x470>)
 80074f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074f4:	4a38      	ldr	r2, [pc, #224]	; (80075d8 <HAL_RCC_OscConfig+0x470>)
 80074f6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80074fa:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	699b      	ldr	r3, [r3, #24]
 8007500:	2b00      	cmp	r3, #0
 8007502:	f000 80a1 	beq.w	8007648 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8007506:	4b34      	ldr	r3, [pc, #208]	; (80075d8 <HAL_RCC_OscConfig+0x470>)
 8007508:	689b      	ldr	r3, [r3, #8]
 800750a:	f003 030c 	and.w	r3, r3, #12
 800750e:	2b08      	cmp	r3, #8
 8007510:	d05c      	beq.n	80075cc <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	699b      	ldr	r3, [r3, #24]
 8007516:	2b02      	cmp	r3, #2
 8007518:	d141      	bne.n	800759e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800751a:	4b31      	ldr	r3, [pc, #196]	; (80075e0 <HAL_RCC_OscConfig+0x478>)
 800751c:	2200      	movs	r2, #0
 800751e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007520:	f7fe fa1c 	bl	800595c <HAL_GetTick>
 8007524:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007526:	e008      	b.n	800753a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007528:	f7fe fa18 	bl	800595c <HAL_GetTick>
 800752c:	4602      	mov	r2, r0
 800752e:	693b      	ldr	r3, [r7, #16]
 8007530:	1ad3      	subs	r3, r2, r3
 8007532:	2b02      	cmp	r3, #2
 8007534:	d901      	bls.n	800753a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8007536:	2303      	movs	r3, #3
 8007538:	e087      	b.n	800764a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800753a:	4b27      	ldr	r3, [pc, #156]	; (80075d8 <HAL_RCC_OscConfig+0x470>)
 800753c:	681b      	ldr	r3, [r3, #0]
 800753e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007542:	2b00      	cmp	r3, #0
 8007544:	d1f0      	bne.n	8007528 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	69da      	ldr	r2, [r3, #28]
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	6a1b      	ldr	r3, [r3, #32]
 800754e:	431a      	orrs	r2, r3
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007554:	019b      	lsls	r3, r3, #6
 8007556:	431a      	orrs	r2, r3
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800755c:	085b      	lsrs	r3, r3, #1
 800755e:	3b01      	subs	r3, #1
 8007560:	041b      	lsls	r3, r3, #16
 8007562:	431a      	orrs	r2, r3
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007568:	061b      	lsls	r3, r3, #24
 800756a:	491b      	ldr	r1, [pc, #108]	; (80075d8 <HAL_RCC_OscConfig+0x470>)
 800756c:	4313      	orrs	r3, r2
 800756e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007570:	4b1b      	ldr	r3, [pc, #108]	; (80075e0 <HAL_RCC_OscConfig+0x478>)
 8007572:	2201      	movs	r2, #1
 8007574:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007576:	f7fe f9f1 	bl	800595c <HAL_GetTick>
 800757a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800757c:	e008      	b.n	8007590 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800757e:	f7fe f9ed 	bl	800595c <HAL_GetTick>
 8007582:	4602      	mov	r2, r0
 8007584:	693b      	ldr	r3, [r7, #16]
 8007586:	1ad3      	subs	r3, r2, r3
 8007588:	2b02      	cmp	r3, #2
 800758a:	d901      	bls.n	8007590 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800758c:	2303      	movs	r3, #3
 800758e:	e05c      	b.n	800764a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007590:	4b11      	ldr	r3, [pc, #68]	; (80075d8 <HAL_RCC_OscConfig+0x470>)
 8007592:	681b      	ldr	r3, [r3, #0]
 8007594:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007598:	2b00      	cmp	r3, #0
 800759a:	d0f0      	beq.n	800757e <HAL_RCC_OscConfig+0x416>
 800759c:	e054      	b.n	8007648 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800759e:	4b10      	ldr	r3, [pc, #64]	; (80075e0 <HAL_RCC_OscConfig+0x478>)
 80075a0:	2200      	movs	r2, #0
 80075a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80075a4:	f7fe f9da 	bl	800595c <HAL_GetTick>
 80075a8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80075aa:	e008      	b.n	80075be <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80075ac:	f7fe f9d6 	bl	800595c <HAL_GetTick>
 80075b0:	4602      	mov	r2, r0
 80075b2:	693b      	ldr	r3, [r7, #16]
 80075b4:	1ad3      	subs	r3, r2, r3
 80075b6:	2b02      	cmp	r3, #2
 80075b8:	d901      	bls.n	80075be <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80075ba:	2303      	movs	r3, #3
 80075bc:	e045      	b.n	800764a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80075be:	4b06      	ldr	r3, [pc, #24]	; (80075d8 <HAL_RCC_OscConfig+0x470>)
 80075c0:	681b      	ldr	r3, [r3, #0]
 80075c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80075c6:	2b00      	cmp	r3, #0
 80075c8:	d1f0      	bne.n	80075ac <HAL_RCC_OscConfig+0x444>
 80075ca:	e03d      	b.n	8007648 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	699b      	ldr	r3, [r3, #24]
 80075d0:	2b01      	cmp	r3, #1
 80075d2:	d107      	bne.n	80075e4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80075d4:	2301      	movs	r3, #1
 80075d6:	e038      	b.n	800764a <HAL_RCC_OscConfig+0x4e2>
 80075d8:	40023800 	.word	0x40023800
 80075dc:	40007000 	.word	0x40007000
 80075e0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80075e4:	4b1b      	ldr	r3, [pc, #108]	; (8007654 <HAL_RCC_OscConfig+0x4ec>)
 80075e6:	685b      	ldr	r3, [r3, #4]
 80075e8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	699b      	ldr	r3, [r3, #24]
 80075ee:	2b01      	cmp	r3, #1
 80075f0:	d028      	beq.n	8007644 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80075f2:	68fb      	ldr	r3, [r7, #12]
 80075f4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80075fc:	429a      	cmp	r2, r3
 80075fe:	d121      	bne.n	8007644 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007600:	68fb      	ldr	r3, [r7, #12]
 8007602:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800760a:	429a      	cmp	r2, r3
 800760c:	d11a      	bne.n	8007644 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800760e:	68fa      	ldr	r2, [r7, #12]
 8007610:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8007614:	4013      	ands	r3, r2
 8007616:	687a      	ldr	r2, [r7, #4]
 8007618:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800761a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800761c:	4293      	cmp	r3, r2
 800761e:	d111      	bne.n	8007644 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007620:	68fb      	ldr	r3, [r7, #12]
 8007622:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800762a:	085b      	lsrs	r3, r3, #1
 800762c:	3b01      	subs	r3, #1
 800762e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8007630:	429a      	cmp	r2, r3
 8007632:	d107      	bne.n	8007644 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8007634:	68fb      	ldr	r3, [r7, #12]
 8007636:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800763e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007640:	429a      	cmp	r2, r3
 8007642:	d001      	beq.n	8007648 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8007644:	2301      	movs	r3, #1
 8007646:	e000      	b.n	800764a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8007648:	2300      	movs	r3, #0
}
 800764a:	4618      	mov	r0, r3
 800764c:	3718      	adds	r7, #24
 800764e:	46bd      	mov	sp, r7
 8007650:	bd80      	pop	{r7, pc}
 8007652:	bf00      	nop
 8007654:	40023800 	.word	0x40023800

08007658 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007658:	b580      	push	{r7, lr}
 800765a:	b084      	sub	sp, #16
 800765c:	af00      	add	r7, sp, #0
 800765e:	6078      	str	r0, [r7, #4]
 8007660:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	2b00      	cmp	r3, #0
 8007666:	d101      	bne.n	800766c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007668:	2301      	movs	r3, #1
 800766a:	e0cc      	b.n	8007806 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800766c:	4b68      	ldr	r3, [pc, #416]	; (8007810 <HAL_RCC_ClockConfig+0x1b8>)
 800766e:	681b      	ldr	r3, [r3, #0]
 8007670:	f003 0307 	and.w	r3, r3, #7
 8007674:	683a      	ldr	r2, [r7, #0]
 8007676:	429a      	cmp	r2, r3
 8007678:	d90c      	bls.n	8007694 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800767a:	4b65      	ldr	r3, [pc, #404]	; (8007810 <HAL_RCC_ClockConfig+0x1b8>)
 800767c:	683a      	ldr	r2, [r7, #0]
 800767e:	b2d2      	uxtb	r2, r2
 8007680:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007682:	4b63      	ldr	r3, [pc, #396]	; (8007810 <HAL_RCC_ClockConfig+0x1b8>)
 8007684:	681b      	ldr	r3, [r3, #0]
 8007686:	f003 0307 	and.w	r3, r3, #7
 800768a:	683a      	ldr	r2, [r7, #0]
 800768c:	429a      	cmp	r2, r3
 800768e:	d001      	beq.n	8007694 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8007690:	2301      	movs	r3, #1
 8007692:	e0b8      	b.n	8007806 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	681b      	ldr	r3, [r3, #0]
 8007698:	f003 0302 	and.w	r3, r3, #2
 800769c:	2b00      	cmp	r3, #0
 800769e:	d020      	beq.n	80076e2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	681b      	ldr	r3, [r3, #0]
 80076a4:	f003 0304 	and.w	r3, r3, #4
 80076a8:	2b00      	cmp	r3, #0
 80076aa:	d005      	beq.n	80076b8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80076ac:	4b59      	ldr	r3, [pc, #356]	; (8007814 <HAL_RCC_ClockConfig+0x1bc>)
 80076ae:	689b      	ldr	r3, [r3, #8]
 80076b0:	4a58      	ldr	r2, [pc, #352]	; (8007814 <HAL_RCC_ClockConfig+0x1bc>)
 80076b2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80076b6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	681b      	ldr	r3, [r3, #0]
 80076bc:	f003 0308 	and.w	r3, r3, #8
 80076c0:	2b00      	cmp	r3, #0
 80076c2:	d005      	beq.n	80076d0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80076c4:	4b53      	ldr	r3, [pc, #332]	; (8007814 <HAL_RCC_ClockConfig+0x1bc>)
 80076c6:	689b      	ldr	r3, [r3, #8]
 80076c8:	4a52      	ldr	r2, [pc, #328]	; (8007814 <HAL_RCC_ClockConfig+0x1bc>)
 80076ca:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80076ce:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80076d0:	4b50      	ldr	r3, [pc, #320]	; (8007814 <HAL_RCC_ClockConfig+0x1bc>)
 80076d2:	689b      	ldr	r3, [r3, #8]
 80076d4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	689b      	ldr	r3, [r3, #8]
 80076dc:	494d      	ldr	r1, [pc, #308]	; (8007814 <HAL_RCC_ClockConfig+0x1bc>)
 80076de:	4313      	orrs	r3, r2
 80076e0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	681b      	ldr	r3, [r3, #0]
 80076e6:	f003 0301 	and.w	r3, r3, #1
 80076ea:	2b00      	cmp	r3, #0
 80076ec:	d044      	beq.n	8007778 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	685b      	ldr	r3, [r3, #4]
 80076f2:	2b01      	cmp	r3, #1
 80076f4:	d107      	bne.n	8007706 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80076f6:	4b47      	ldr	r3, [pc, #284]	; (8007814 <HAL_RCC_ClockConfig+0x1bc>)
 80076f8:	681b      	ldr	r3, [r3, #0]
 80076fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80076fe:	2b00      	cmp	r3, #0
 8007700:	d119      	bne.n	8007736 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007702:	2301      	movs	r3, #1
 8007704:	e07f      	b.n	8007806 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	685b      	ldr	r3, [r3, #4]
 800770a:	2b02      	cmp	r3, #2
 800770c:	d003      	beq.n	8007716 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007712:	2b03      	cmp	r3, #3
 8007714:	d107      	bne.n	8007726 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007716:	4b3f      	ldr	r3, [pc, #252]	; (8007814 <HAL_RCC_ClockConfig+0x1bc>)
 8007718:	681b      	ldr	r3, [r3, #0]
 800771a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800771e:	2b00      	cmp	r3, #0
 8007720:	d109      	bne.n	8007736 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007722:	2301      	movs	r3, #1
 8007724:	e06f      	b.n	8007806 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007726:	4b3b      	ldr	r3, [pc, #236]	; (8007814 <HAL_RCC_ClockConfig+0x1bc>)
 8007728:	681b      	ldr	r3, [r3, #0]
 800772a:	f003 0302 	and.w	r3, r3, #2
 800772e:	2b00      	cmp	r3, #0
 8007730:	d101      	bne.n	8007736 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007732:	2301      	movs	r3, #1
 8007734:	e067      	b.n	8007806 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8007736:	4b37      	ldr	r3, [pc, #220]	; (8007814 <HAL_RCC_ClockConfig+0x1bc>)
 8007738:	689b      	ldr	r3, [r3, #8]
 800773a:	f023 0203 	bic.w	r2, r3, #3
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	685b      	ldr	r3, [r3, #4]
 8007742:	4934      	ldr	r1, [pc, #208]	; (8007814 <HAL_RCC_ClockConfig+0x1bc>)
 8007744:	4313      	orrs	r3, r2
 8007746:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8007748:	f7fe f908 	bl	800595c <HAL_GetTick>
 800774c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800774e:	e00a      	b.n	8007766 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007750:	f7fe f904 	bl	800595c <HAL_GetTick>
 8007754:	4602      	mov	r2, r0
 8007756:	68fb      	ldr	r3, [r7, #12]
 8007758:	1ad3      	subs	r3, r2, r3
 800775a:	f241 3288 	movw	r2, #5000	; 0x1388
 800775e:	4293      	cmp	r3, r2
 8007760:	d901      	bls.n	8007766 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8007762:	2303      	movs	r3, #3
 8007764:	e04f      	b.n	8007806 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007766:	4b2b      	ldr	r3, [pc, #172]	; (8007814 <HAL_RCC_ClockConfig+0x1bc>)
 8007768:	689b      	ldr	r3, [r3, #8]
 800776a:	f003 020c 	and.w	r2, r3, #12
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	685b      	ldr	r3, [r3, #4]
 8007772:	009b      	lsls	r3, r3, #2
 8007774:	429a      	cmp	r2, r3
 8007776:	d1eb      	bne.n	8007750 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8007778:	4b25      	ldr	r3, [pc, #148]	; (8007810 <HAL_RCC_ClockConfig+0x1b8>)
 800777a:	681b      	ldr	r3, [r3, #0]
 800777c:	f003 0307 	and.w	r3, r3, #7
 8007780:	683a      	ldr	r2, [r7, #0]
 8007782:	429a      	cmp	r2, r3
 8007784:	d20c      	bcs.n	80077a0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007786:	4b22      	ldr	r3, [pc, #136]	; (8007810 <HAL_RCC_ClockConfig+0x1b8>)
 8007788:	683a      	ldr	r2, [r7, #0]
 800778a:	b2d2      	uxtb	r2, r2
 800778c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800778e:	4b20      	ldr	r3, [pc, #128]	; (8007810 <HAL_RCC_ClockConfig+0x1b8>)
 8007790:	681b      	ldr	r3, [r3, #0]
 8007792:	f003 0307 	and.w	r3, r3, #7
 8007796:	683a      	ldr	r2, [r7, #0]
 8007798:	429a      	cmp	r2, r3
 800779a:	d001      	beq.n	80077a0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800779c:	2301      	movs	r3, #1
 800779e:	e032      	b.n	8007806 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	681b      	ldr	r3, [r3, #0]
 80077a4:	f003 0304 	and.w	r3, r3, #4
 80077a8:	2b00      	cmp	r3, #0
 80077aa:	d008      	beq.n	80077be <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80077ac:	4b19      	ldr	r3, [pc, #100]	; (8007814 <HAL_RCC_ClockConfig+0x1bc>)
 80077ae:	689b      	ldr	r3, [r3, #8]
 80077b0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	68db      	ldr	r3, [r3, #12]
 80077b8:	4916      	ldr	r1, [pc, #88]	; (8007814 <HAL_RCC_ClockConfig+0x1bc>)
 80077ba:	4313      	orrs	r3, r2
 80077bc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	681b      	ldr	r3, [r3, #0]
 80077c2:	f003 0308 	and.w	r3, r3, #8
 80077c6:	2b00      	cmp	r3, #0
 80077c8:	d009      	beq.n	80077de <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80077ca:	4b12      	ldr	r3, [pc, #72]	; (8007814 <HAL_RCC_ClockConfig+0x1bc>)
 80077cc:	689b      	ldr	r3, [r3, #8]
 80077ce:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	691b      	ldr	r3, [r3, #16]
 80077d6:	00db      	lsls	r3, r3, #3
 80077d8:	490e      	ldr	r1, [pc, #56]	; (8007814 <HAL_RCC_ClockConfig+0x1bc>)
 80077da:	4313      	orrs	r3, r2
 80077dc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80077de:	f000 f821 	bl	8007824 <HAL_RCC_GetSysClockFreq>
 80077e2:	4602      	mov	r2, r0
 80077e4:	4b0b      	ldr	r3, [pc, #44]	; (8007814 <HAL_RCC_ClockConfig+0x1bc>)
 80077e6:	689b      	ldr	r3, [r3, #8]
 80077e8:	091b      	lsrs	r3, r3, #4
 80077ea:	f003 030f 	and.w	r3, r3, #15
 80077ee:	490a      	ldr	r1, [pc, #40]	; (8007818 <HAL_RCC_ClockConfig+0x1c0>)
 80077f0:	5ccb      	ldrb	r3, [r1, r3]
 80077f2:	fa22 f303 	lsr.w	r3, r2, r3
 80077f6:	4a09      	ldr	r2, [pc, #36]	; (800781c <HAL_RCC_ClockConfig+0x1c4>)
 80077f8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80077fa:	4b09      	ldr	r3, [pc, #36]	; (8007820 <HAL_RCC_ClockConfig+0x1c8>)
 80077fc:	681b      	ldr	r3, [r3, #0]
 80077fe:	4618      	mov	r0, r3
 8007800:	f7fe f868 	bl	80058d4 <HAL_InitTick>

  return HAL_OK;
 8007804:	2300      	movs	r3, #0
}
 8007806:	4618      	mov	r0, r3
 8007808:	3710      	adds	r7, #16
 800780a:	46bd      	mov	sp, r7
 800780c:	bd80      	pop	{r7, pc}
 800780e:	bf00      	nop
 8007810:	40023c00 	.word	0x40023c00
 8007814:	40023800 	.word	0x40023800
 8007818:	08007ae0 	.word	0x08007ae0
 800781c:	20000000 	.word	0x20000000
 8007820:	200000e0 	.word	0x200000e0

08007824 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007824:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007828:	b094      	sub	sp, #80	; 0x50
 800782a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800782c:	2300      	movs	r3, #0
 800782e:	647b      	str	r3, [r7, #68]	; 0x44
 8007830:	2300      	movs	r3, #0
 8007832:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007834:	2300      	movs	r3, #0
 8007836:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8007838:	2300      	movs	r3, #0
 800783a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800783c:	4b79      	ldr	r3, [pc, #484]	; (8007a24 <HAL_RCC_GetSysClockFreq+0x200>)
 800783e:	689b      	ldr	r3, [r3, #8]
 8007840:	f003 030c 	and.w	r3, r3, #12
 8007844:	2b08      	cmp	r3, #8
 8007846:	d00d      	beq.n	8007864 <HAL_RCC_GetSysClockFreq+0x40>
 8007848:	2b08      	cmp	r3, #8
 800784a:	f200 80e1 	bhi.w	8007a10 <HAL_RCC_GetSysClockFreq+0x1ec>
 800784e:	2b00      	cmp	r3, #0
 8007850:	d002      	beq.n	8007858 <HAL_RCC_GetSysClockFreq+0x34>
 8007852:	2b04      	cmp	r3, #4
 8007854:	d003      	beq.n	800785e <HAL_RCC_GetSysClockFreq+0x3a>
 8007856:	e0db      	b.n	8007a10 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8007858:	4b73      	ldr	r3, [pc, #460]	; (8007a28 <HAL_RCC_GetSysClockFreq+0x204>)
 800785a:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 800785c:	e0db      	b.n	8007a16 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800785e:	4b73      	ldr	r3, [pc, #460]	; (8007a2c <HAL_RCC_GetSysClockFreq+0x208>)
 8007860:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8007862:	e0d8      	b.n	8007a16 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8007864:	4b6f      	ldr	r3, [pc, #444]	; (8007a24 <HAL_RCC_GetSysClockFreq+0x200>)
 8007866:	685b      	ldr	r3, [r3, #4]
 8007868:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800786c:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800786e:	4b6d      	ldr	r3, [pc, #436]	; (8007a24 <HAL_RCC_GetSysClockFreq+0x200>)
 8007870:	685b      	ldr	r3, [r3, #4]
 8007872:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007876:	2b00      	cmp	r3, #0
 8007878:	d063      	beq.n	8007942 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800787a:	4b6a      	ldr	r3, [pc, #424]	; (8007a24 <HAL_RCC_GetSysClockFreq+0x200>)
 800787c:	685b      	ldr	r3, [r3, #4]
 800787e:	099b      	lsrs	r3, r3, #6
 8007880:	2200      	movs	r2, #0
 8007882:	63bb      	str	r3, [r7, #56]	; 0x38
 8007884:	63fa      	str	r2, [r7, #60]	; 0x3c
 8007886:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007888:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800788c:	633b      	str	r3, [r7, #48]	; 0x30
 800788e:	2300      	movs	r3, #0
 8007890:	637b      	str	r3, [r7, #52]	; 0x34
 8007892:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8007896:	4622      	mov	r2, r4
 8007898:	462b      	mov	r3, r5
 800789a:	f04f 0000 	mov.w	r0, #0
 800789e:	f04f 0100 	mov.w	r1, #0
 80078a2:	0159      	lsls	r1, r3, #5
 80078a4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80078a8:	0150      	lsls	r0, r2, #5
 80078aa:	4602      	mov	r2, r0
 80078ac:	460b      	mov	r3, r1
 80078ae:	4621      	mov	r1, r4
 80078b0:	1a51      	subs	r1, r2, r1
 80078b2:	6139      	str	r1, [r7, #16]
 80078b4:	4629      	mov	r1, r5
 80078b6:	eb63 0301 	sbc.w	r3, r3, r1
 80078ba:	617b      	str	r3, [r7, #20]
 80078bc:	f04f 0200 	mov.w	r2, #0
 80078c0:	f04f 0300 	mov.w	r3, #0
 80078c4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80078c8:	4659      	mov	r1, fp
 80078ca:	018b      	lsls	r3, r1, #6
 80078cc:	4651      	mov	r1, sl
 80078ce:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80078d2:	4651      	mov	r1, sl
 80078d4:	018a      	lsls	r2, r1, #6
 80078d6:	4651      	mov	r1, sl
 80078d8:	ebb2 0801 	subs.w	r8, r2, r1
 80078dc:	4659      	mov	r1, fp
 80078de:	eb63 0901 	sbc.w	r9, r3, r1
 80078e2:	f04f 0200 	mov.w	r2, #0
 80078e6:	f04f 0300 	mov.w	r3, #0
 80078ea:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80078ee:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80078f2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80078f6:	4690      	mov	r8, r2
 80078f8:	4699      	mov	r9, r3
 80078fa:	4623      	mov	r3, r4
 80078fc:	eb18 0303 	adds.w	r3, r8, r3
 8007900:	60bb      	str	r3, [r7, #8]
 8007902:	462b      	mov	r3, r5
 8007904:	eb49 0303 	adc.w	r3, r9, r3
 8007908:	60fb      	str	r3, [r7, #12]
 800790a:	f04f 0200 	mov.w	r2, #0
 800790e:	f04f 0300 	mov.w	r3, #0
 8007912:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8007916:	4629      	mov	r1, r5
 8007918:	024b      	lsls	r3, r1, #9
 800791a:	4621      	mov	r1, r4
 800791c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8007920:	4621      	mov	r1, r4
 8007922:	024a      	lsls	r2, r1, #9
 8007924:	4610      	mov	r0, r2
 8007926:	4619      	mov	r1, r3
 8007928:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800792a:	2200      	movs	r2, #0
 800792c:	62bb      	str	r3, [r7, #40]	; 0x28
 800792e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007930:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8007934:	f7f8 fc4e 	bl	80001d4 <__aeabi_uldivmod>
 8007938:	4602      	mov	r2, r0
 800793a:	460b      	mov	r3, r1
 800793c:	4613      	mov	r3, r2
 800793e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007940:	e058      	b.n	80079f4 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007942:	4b38      	ldr	r3, [pc, #224]	; (8007a24 <HAL_RCC_GetSysClockFreq+0x200>)
 8007944:	685b      	ldr	r3, [r3, #4]
 8007946:	099b      	lsrs	r3, r3, #6
 8007948:	2200      	movs	r2, #0
 800794a:	4618      	mov	r0, r3
 800794c:	4611      	mov	r1, r2
 800794e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8007952:	623b      	str	r3, [r7, #32]
 8007954:	2300      	movs	r3, #0
 8007956:	627b      	str	r3, [r7, #36]	; 0x24
 8007958:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800795c:	4642      	mov	r2, r8
 800795e:	464b      	mov	r3, r9
 8007960:	f04f 0000 	mov.w	r0, #0
 8007964:	f04f 0100 	mov.w	r1, #0
 8007968:	0159      	lsls	r1, r3, #5
 800796a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800796e:	0150      	lsls	r0, r2, #5
 8007970:	4602      	mov	r2, r0
 8007972:	460b      	mov	r3, r1
 8007974:	4641      	mov	r1, r8
 8007976:	ebb2 0a01 	subs.w	sl, r2, r1
 800797a:	4649      	mov	r1, r9
 800797c:	eb63 0b01 	sbc.w	fp, r3, r1
 8007980:	f04f 0200 	mov.w	r2, #0
 8007984:	f04f 0300 	mov.w	r3, #0
 8007988:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800798c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8007990:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8007994:	ebb2 040a 	subs.w	r4, r2, sl
 8007998:	eb63 050b 	sbc.w	r5, r3, fp
 800799c:	f04f 0200 	mov.w	r2, #0
 80079a0:	f04f 0300 	mov.w	r3, #0
 80079a4:	00eb      	lsls	r3, r5, #3
 80079a6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80079aa:	00e2      	lsls	r2, r4, #3
 80079ac:	4614      	mov	r4, r2
 80079ae:	461d      	mov	r5, r3
 80079b0:	4643      	mov	r3, r8
 80079b2:	18e3      	adds	r3, r4, r3
 80079b4:	603b      	str	r3, [r7, #0]
 80079b6:	464b      	mov	r3, r9
 80079b8:	eb45 0303 	adc.w	r3, r5, r3
 80079bc:	607b      	str	r3, [r7, #4]
 80079be:	f04f 0200 	mov.w	r2, #0
 80079c2:	f04f 0300 	mov.w	r3, #0
 80079c6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80079ca:	4629      	mov	r1, r5
 80079cc:	028b      	lsls	r3, r1, #10
 80079ce:	4621      	mov	r1, r4
 80079d0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80079d4:	4621      	mov	r1, r4
 80079d6:	028a      	lsls	r2, r1, #10
 80079d8:	4610      	mov	r0, r2
 80079da:	4619      	mov	r1, r3
 80079dc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80079de:	2200      	movs	r2, #0
 80079e0:	61bb      	str	r3, [r7, #24]
 80079e2:	61fa      	str	r2, [r7, #28]
 80079e4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80079e8:	f7f8 fbf4 	bl	80001d4 <__aeabi_uldivmod>
 80079ec:	4602      	mov	r2, r0
 80079ee:	460b      	mov	r3, r1
 80079f0:	4613      	mov	r3, r2
 80079f2:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80079f4:	4b0b      	ldr	r3, [pc, #44]	; (8007a24 <HAL_RCC_GetSysClockFreq+0x200>)
 80079f6:	685b      	ldr	r3, [r3, #4]
 80079f8:	0c1b      	lsrs	r3, r3, #16
 80079fa:	f003 0303 	and.w	r3, r3, #3
 80079fe:	3301      	adds	r3, #1
 8007a00:	005b      	lsls	r3, r3, #1
 8007a02:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8007a04:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007a06:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007a08:	fbb2 f3f3 	udiv	r3, r2, r3
 8007a0c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8007a0e:	e002      	b.n	8007a16 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8007a10:	4b05      	ldr	r3, [pc, #20]	; (8007a28 <HAL_RCC_GetSysClockFreq+0x204>)
 8007a12:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8007a14:	bf00      	nop
    }
  }
  return sysclockfreq;
 8007a16:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8007a18:	4618      	mov	r0, r3
 8007a1a:	3750      	adds	r7, #80	; 0x50
 8007a1c:	46bd      	mov	sp, r7
 8007a1e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007a22:	bf00      	nop
 8007a24:	40023800 	.word	0x40023800
 8007a28:	00f42400 	.word	0x00f42400
 8007a2c:	007a1200 	.word	0x007a1200

08007a30 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007a30:	b480      	push	{r7}
 8007a32:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007a34:	4b03      	ldr	r3, [pc, #12]	; (8007a44 <HAL_RCC_GetHCLKFreq+0x14>)
 8007a36:	681b      	ldr	r3, [r3, #0]
}
 8007a38:	4618      	mov	r0, r3
 8007a3a:	46bd      	mov	sp, r7
 8007a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a40:	4770      	bx	lr
 8007a42:	bf00      	nop
 8007a44:	20000000 	.word	0x20000000

08007a48 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007a48:	b580      	push	{r7, lr}
 8007a4a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8007a4c:	f7ff fff0 	bl	8007a30 <HAL_RCC_GetHCLKFreq>
 8007a50:	4602      	mov	r2, r0
 8007a52:	4b05      	ldr	r3, [pc, #20]	; (8007a68 <HAL_RCC_GetPCLK1Freq+0x20>)
 8007a54:	689b      	ldr	r3, [r3, #8]
 8007a56:	0a9b      	lsrs	r3, r3, #10
 8007a58:	f003 0307 	and.w	r3, r3, #7
 8007a5c:	4903      	ldr	r1, [pc, #12]	; (8007a6c <HAL_RCC_GetPCLK1Freq+0x24>)
 8007a5e:	5ccb      	ldrb	r3, [r1, r3]
 8007a60:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007a64:	4618      	mov	r0, r3
 8007a66:	bd80      	pop	{r7, pc}
 8007a68:	40023800 	.word	0x40023800
 8007a6c:	08007af0 	.word	0x08007af0

08007a70 <__libc_init_array>:
 8007a70:	b570      	push	{r4, r5, r6, lr}
 8007a72:	4d0d      	ldr	r5, [pc, #52]	; (8007aa8 <__libc_init_array+0x38>)
 8007a74:	4c0d      	ldr	r4, [pc, #52]	; (8007aac <__libc_init_array+0x3c>)
 8007a76:	1b64      	subs	r4, r4, r5
 8007a78:	10a4      	asrs	r4, r4, #2
 8007a7a:	2600      	movs	r6, #0
 8007a7c:	42a6      	cmp	r6, r4
 8007a7e:	d109      	bne.n	8007a94 <__libc_init_array+0x24>
 8007a80:	4d0b      	ldr	r5, [pc, #44]	; (8007ab0 <__libc_init_array+0x40>)
 8007a82:	4c0c      	ldr	r4, [pc, #48]	; (8007ab4 <__libc_init_array+0x44>)
 8007a84:	f000 f820 	bl	8007ac8 <_init>
 8007a88:	1b64      	subs	r4, r4, r5
 8007a8a:	10a4      	asrs	r4, r4, #2
 8007a8c:	2600      	movs	r6, #0
 8007a8e:	42a6      	cmp	r6, r4
 8007a90:	d105      	bne.n	8007a9e <__libc_init_array+0x2e>
 8007a92:	bd70      	pop	{r4, r5, r6, pc}
 8007a94:	f855 3b04 	ldr.w	r3, [r5], #4
 8007a98:	4798      	blx	r3
 8007a9a:	3601      	adds	r6, #1
 8007a9c:	e7ee      	b.n	8007a7c <__libc_init_array+0xc>
 8007a9e:	f855 3b04 	ldr.w	r3, [r5], #4
 8007aa2:	4798      	blx	r3
 8007aa4:	3601      	adds	r6, #1
 8007aa6:	e7f2      	b.n	8007a8e <__libc_init_array+0x1e>
 8007aa8:	08007b00 	.word	0x08007b00
 8007aac:	08007b00 	.word	0x08007b00
 8007ab0:	08007b00 	.word	0x08007b00
 8007ab4:	08007b04 	.word	0x08007b04

08007ab8 <memset>:
 8007ab8:	4402      	add	r2, r0
 8007aba:	4603      	mov	r3, r0
 8007abc:	4293      	cmp	r3, r2
 8007abe:	d100      	bne.n	8007ac2 <memset+0xa>
 8007ac0:	4770      	bx	lr
 8007ac2:	f803 1b01 	strb.w	r1, [r3], #1
 8007ac6:	e7f9      	b.n	8007abc <memset+0x4>

08007ac8 <_init>:
 8007ac8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007aca:	bf00      	nop
 8007acc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007ace:	bc08      	pop	{r3}
 8007ad0:	469e      	mov	lr, r3
 8007ad2:	4770      	bx	lr

08007ad4 <_fini>:
 8007ad4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007ad6:	bf00      	nop
 8007ad8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007ada:	bc08      	pop	{r3}
 8007adc:	469e      	mov	lr, r3
 8007ade:	4770      	bx	lr
