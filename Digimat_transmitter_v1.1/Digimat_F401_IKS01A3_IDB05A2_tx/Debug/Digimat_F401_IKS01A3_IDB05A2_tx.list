
Digimat_F401_IKS01A3_IDB05A2_tx.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d994  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000194  0800db34  0800db34  0001db34  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800dcc8  0800dcc8  0002015c  2**0
                  CONTENTS
  4 .ARM          00000008  0800dcc8  0800dcc8  0001dcc8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800dcd0  0800dcd0  0002015c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800dcd0  0800dcd0  0001dcd0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800dcd4  0800dcd4  0001dcd4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000015c  20000000  0800dcd8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000694  2000015c  0800de34  0002015c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200007f0  0800de34  000207f0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002015c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00036154  00000000  00000000  0002018c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000047c3  00000000  00000000  000562e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000029a0  00000000  00000000  0005aaa8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000027f0  00000000  00000000  0005d448  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001e504  00000000  00000000  0005fc38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00027742  00000000  00000000  0007e13c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000aa6c2  00000000  00000000  000a587e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0014ff40  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000bcc0  00000000  00000000  0014ff90  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000015c 	.word	0x2000015c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800db1c 	.word	0x0800db1c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000160 	.word	0x20000160
 80001dc:	0800db1c 	.word	0x0800db1c

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_d2f>:
 8000608:	ea4f 0241 	mov.w	r2, r1, lsl #1
 800060c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000610:	bf24      	itt	cs
 8000612:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000616:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 800061a:	d90d      	bls.n	8000638 <__aeabi_d2f+0x30>
 800061c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000620:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000624:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000628:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 800062c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000630:	bf08      	it	eq
 8000632:	f020 0001 	biceq.w	r0, r0, #1
 8000636:	4770      	bx	lr
 8000638:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 800063c:	d121      	bne.n	8000682 <__aeabi_d2f+0x7a>
 800063e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000642:	bfbc      	itt	lt
 8000644:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000648:	4770      	bxlt	lr
 800064a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800064e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000652:	f1c2 0218 	rsb	r2, r2, #24
 8000656:	f1c2 0c20 	rsb	ip, r2, #32
 800065a:	fa10 f30c 	lsls.w	r3, r0, ip
 800065e:	fa20 f002 	lsr.w	r0, r0, r2
 8000662:	bf18      	it	ne
 8000664:	f040 0001 	orrne.w	r0, r0, #1
 8000668:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800066c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000670:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000674:	ea40 000c 	orr.w	r0, r0, ip
 8000678:	fa23 f302 	lsr.w	r3, r3, r2
 800067c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000680:	e7cc      	b.n	800061c <__aeabi_d2f+0x14>
 8000682:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000686:	d107      	bne.n	8000698 <__aeabi_d2f+0x90>
 8000688:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 800068c:	bf1e      	ittt	ne
 800068e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000692:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000696:	4770      	bxne	lr
 8000698:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 800069c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80006a0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80006a4:	4770      	bx	lr
 80006a6:	bf00      	nop

080006a8 <__aeabi_uldivmod>:
 80006a8:	b953      	cbnz	r3, 80006c0 <__aeabi_uldivmod+0x18>
 80006aa:	b94a      	cbnz	r2, 80006c0 <__aeabi_uldivmod+0x18>
 80006ac:	2900      	cmp	r1, #0
 80006ae:	bf08      	it	eq
 80006b0:	2800      	cmpeq	r0, #0
 80006b2:	bf1c      	itt	ne
 80006b4:	f04f 31ff 	movne.w	r1, #4294967295
 80006b8:	f04f 30ff 	movne.w	r0, #4294967295
 80006bc:	f000 b974 	b.w	80009a8 <__aeabi_idiv0>
 80006c0:	f1ad 0c08 	sub.w	ip, sp, #8
 80006c4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80006c8:	f000 f806 	bl	80006d8 <__udivmoddi4>
 80006cc:	f8dd e004 	ldr.w	lr, [sp, #4]
 80006d0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80006d4:	b004      	add	sp, #16
 80006d6:	4770      	bx	lr

080006d8 <__udivmoddi4>:
 80006d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80006dc:	9d08      	ldr	r5, [sp, #32]
 80006de:	4604      	mov	r4, r0
 80006e0:	468e      	mov	lr, r1
 80006e2:	2b00      	cmp	r3, #0
 80006e4:	d14d      	bne.n	8000782 <__udivmoddi4+0xaa>
 80006e6:	428a      	cmp	r2, r1
 80006e8:	4694      	mov	ip, r2
 80006ea:	d969      	bls.n	80007c0 <__udivmoddi4+0xe8>
 80006ec:	fab2 f282 	clz	r2, r2
 80006f0:	b152      	cbz	r2, 8000708 <__udivmoddi4+0x30>
 80006f2:	fa01 f302 	lsl.w	r3, r1, r2
 80006f6:	f1c2 0120 	rsb	r1, r2, #32
 80006fa:	fa20 f101 	lsr.w	r1, r0, r1
 80006fe:	fa0c fc02 	lsl.w	ip, ip, r2
 8000702:	ea41 0e03 	orr.w	lr, r1, r3
 8000706:	4094      	lsls	r4, r2
 8000708:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800070c:	0c21      	lsrs	r1, r4, #16
 800070e:	fbbe f6f8 	udiv	r6, lr, r8
 8000712:	fa1f f78c 	uxth.w	r7, ip
 8000716:	fb08 e316 	mls	r3, r8, r6, lr
 800071a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800071e:	fb06 f107 	mul.w	r1, r6, r7
 8000722:	4299      	cmp	r1, r3
 8000724:	d90a      	bls.n	800073c <__udivmoddi4+0x64>
 8000726:	eb1c 0303 	adds.w	r3, ip, r3
 800072a:	f106 30ff 	add.w	r0, r6, #4294967295
 800072e:	f080 811f 	bcs.w	8000970 <__udivmoddi4+0x298>
 8000732:	4299      	cmp	r1, r3
 8000734:	f240 811c 	bls.w	8000970 <__udivmoddi4+0x298>
 8000738:	3e02      	subs	r6, #2
 800073a:	4463      	add	r3, ip
 800073c:	1a5b      	subs	r3, r3, r1
 800073e:	b2a4      	uxth	r4, r4
 8000740:	fbb3 f0f8 	udiv	r0, r3, r8
 8000744:	fb08 3310 	mls	r3, r8, r0, r3
 8000748:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800074c:	fb00 f707 	mul.w	r7, r0, r7
 8000750:	42a7      	cmp	r7, r4
 8000752:	d90a      	bls.n	800076a <__udivmoddi4+0x92>
 8000754:	eb1c 0404 	adds.w	r4, ip, r4
 8000758:	f100 33ff 	add.w	r3, r0, #4294967295
 800075c:	f080 810a 	bcs.w	8000974 <__udivmoddi4+0x29c>
 8000760:	42a7      	cmp	r7, r4
 8000762:	f240 8107 	bls.w	8000974 <__udivmoddi4+0x29c>
 8000766:	4464      	add	r4, ip
 8000768:	3802      	subs	r0, #2
 800076a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800076e:	1be4      	subs	r4, r4, r7
 8000770:	2600      	movs	r6, #0
 8000772:	b11d      	cbz	r5, 800077c <__udivmoddi4+0xa4>
 8000774:	40d4      	lsrs	r4, r2
 8000776:	2300      	movs	r3, #0
 8000778:	e9c5 4300 	strd	r4, r3, [r5]
 800077c:	4631      	mov	r1, r6
 800077e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000782:	428b      	cmp	r3, r1
 8000784:	d909      	bls.n	800079a <__udivmoddi4+0xc2>
 8000786:	2d00      	cmp	r5, #0
 8000788:	f000 80ef 	beq.w	800096a <__udivmoddi4+0x292>
 800078c:	2600      	movs	r6, #0
 800078e:	e9c5 0100 	strd	r0, r1, [r5]
 8000792:	4630      	mov	r0, r6
 8000794:	4631      	mov	r1, r6
 8000796:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800079a:	fab3 f683 	clz	r6, r3
 800079e:	2e00      	cmp	r6, #0
 80007a0:	d14a      	bne.n	8000838 <__udivmoddi4+0x160>
 80007a2:	428b      	cmp	r3, r1
 80007a4:	d302      	bcc.n	80007ac <__udivmoddi4+0xd4>
 80007a6:	4282      	cmp	r2, r0
 80007a8:	f200 80f9 	bhi.w	800099e <__udivmoddi4+0x2c6>
 80007ac:	1a84      	subs	r4, r0, r2
 80007ae:	eb61 0303 	sbc.w	r3, r1, r3
 80007b2:	2001      	movs	r0, #1
 80007b4:	469e      	mov	lr, r3
 80007b6:	2d00      	cmp	r5, #0
 80007b8:	d0e0      	beq.n	800077c <__udivmoddi4+0xa4>
 80007ba:	e9c5 4e00 	strd	r4, lr, [r5]
 80007be:	e7dd      	b.n	800077c <__udivmoddi4+0xa4>
 80007c0:	b902      	cbnz	r2, 80007c4 <__udivmoddi4+0xec>
 80007c2:	deff      	udf	#255	; 0xff
 80007c4:	fab2 f282 	clz	r2, r2
 80007c8:	2a00      	cmp	r2, #0
 80007ca:	f040 8092 	bne.w	80008f2 <__udivmoddi4+0x21a>
 80007ce:	eba1 010c 	sub.w	r1, r1, ip
 80007d2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80007d6:	fa1f fe8c 	uxth.w	lr, ip
 80007da:	2601      	movs	r6, #1
 80007dc:	0c20      	lsrs	r0, r4, #16
 80007de:	fbb1 f3f7 	udiv	r3, r1, r7
 80007e2:	fb07 1113 	mls	r1, r7, r3, r1
 80007e6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80007ea:	fb0e f003 	mul.w	r0, lr, r3
 80007ee:	4288      	cmp	r0, r1
 80007f0:	d908      	bls.n	8000804 <__udivmoddi4+0x12c>
 80007f2:	eb1c 0101 	adds.w	r1, ip, r1
 80007f6:	f103 38ff 	add.w	r8, r3, #4294967295
 80007fa:	d202      	bcs.n	8000802 <__udivmoddi4+0x12a>
 80007fc:	4288      	cmp	r0, r1
 80007fe:	f200 80cb 	bhi.w	8000998 <__udivmoddi4+0x2c0>
 8000802:	4643      	mov	r3, r8
 8000804:	1a09      	subs	r1, r1, r0
 8000806:	b2a4      	uxth	r4, r4
 8000808:	fbb1 f0f7 	udiv	r0, r1, r7
 800080c:	fb07 1110 	mls	r1, r7, r0, r1
 8000810:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000814:	fb0e fe00 	mul.w	lr, lr, r0
 8000818:	45a6      	cmp	lr, r4
 800081a:	d908      	bls.n	800082e <__udivmoddi4+0x156>
 800081c:	eb1c 0404 	adds.w	r4, ip, r4
 8000820:	f100 31ff 	add.w	r1, r0, #4294967295
 8000824:	d202      	bcs.n	800082c <__udivmoddi4+0x154>
 8000826:	45a6      	cmp	lr, r4
 8000828:	f200 80bb 	bhi.w	80009a2 <__udivmoddi4+0x2ca>
 800082c:	4608      	mov	r0, r1
 800082e:	eba4 040e 	sub.w	r4, r4, lr
 8000832:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000836:	e79c      	b.n	8000772 <__udivmoddi4+0x9a>
 8000838:	f1c6 0720 	rsb	r7, r6, #32
 800083c:	40b3      	lsls	r3, r6
 800083e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000842:	ea4c 0c03 	orr.w	ip, ip, r3
 8000846:	fa20 f407 	lsr.w	r4, r0, r7
 800084a:	fa01 f306 	lsl.w	r3, r1, r6
 800084e:	431c      	orrs	r4, r3
 8000850:	40f9      	lsrs	r1, r7
 8000852:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000856:	fa00 f306 	lsl.w	r3, r0, r6
 800085a:	fbb1 f8f9 	udiv	r8, r1, r9
 800085e:	0c20      	lsrs	r0, r4, #16
 8000860:	fa1f fe8c 	uxth.w	lr, ip
 8000864:	fb09 1118 	mls	r1, r9, r8, r1
 8000868:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800086c:	fb08 f00e 	mul.w	r0, r8, lr
 8000870:	4288      	cmp	r0, r1
 8000872:	fa02 f206 	lsl.w	r2, r2, r6
 8000876:	d90b      	bls.n	8000890 <__udivmoddi4+0x1b8>
 8000878:	eb1c 0101 	adds.w	r1, ip, r1
 800087c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000880:	f080 8088 	bcs.w	8000994 <__udivmoddi4+0x2bc>
 8000884:	4288      	cmp	r0, r1
 8000886:	f240 8085 	bls.w	8000994 <__udivmoddi4+0x2bc>
 800088a:	f1a8 0802 	sub.w	r8, r8, #2
 800088e:	4461      	add	r1, ip
 8000890:	1a09      	subs	r1, r1, r0
 8000892:	b2a4      	uxth	r4, r4
 8000894:	fbb1 f0f9 	udiv	r0, r1, r9
 8000898:	fb09 1110 	mls	r1, r9, r0, r1
 800089c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80008a0:	fb00 fe0e 	mul.w	lr, r0, lr
 80008a4:	458e      	cmp	lr, r1
 80008a6:	d908      	bls.n	80008ba <__udivmoddi4+0x1e2>
 80008a8:	eb1c 0101 	adds.w	r1, ip, r1
 80008ac:	f100 34ff 	add.w	r4, r0, #4294967295
 80008b0:	d26c      	bcs.n	800098c <__udivmoddi4+0x2b4>
 80008b2:	458e      	cmp	lr, r1
 80008b4:	d96a      	bls.n	800098c <__udivmoddi4+0x2b4>
 80008b6:	3802      	subs	r0, #2
 80008b8:	4461      	add	r1, ip
 80008ba:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80008be:	fba0 9402 	umull	r9, r4, r0, r2
 80008c2:	eba1 010e 	sub.w	r1, r1, lr
 80008c6:	42a1      	cmp	r1, r4
 80008c8:	46c8      	mov	r8, r9
 80008ca:	46a6      	mov	lr, r4
 80008cc:	d356      	bcc.n	800097c <__udivmoddi4+0x2a4>
 80008ce:	d053      	beq.n	8000978 <__udivmoddi4+0x2a0>
 80008d0:	b15d      	cbz	r5, 80008ea <__udivmoddi4+0x212>
 80008d2:	ebb3 0208 	subs.w	r2, r3, r8
 80008d6:	eb61 010e 	sbc.w	r1, r1, lr
 80008da:	fa01 f707 	lsl.w	r7, r1, r7
 80008de:	fa22 f306 	lsr.w	r3, r2, r6
 80008e2:	40f1      	lsrs	r1, r6
 80008e4:	431f      	orrs	r7, r3
 80008e6:	e9c5 7100 	strd	r7, r1, [r5]
 80008ea:	2600      	movs	r6, #0
 80008ec:	4631      	mov	r1, r6
 80008ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80008f2:	f1c2 0320 	rsb	r3, r2, #32
 80008f6:	40d8      	lsrs	r0, r3
 80008f8:	fa0c fc02 	lsl.w	ip, ip, r2
 80008fc:	fa21 f303 	lsr.w	r3, r1, r3
 8000900:	4091      	lsls	r1, r2
 8000902:	4301      	orrs	r1, r0
 8000904:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000908:	fa1f fe8c 	uxth.w	lr, ip
 800090c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000910:	fb07 3610 	mls	r6, r7, r0, r3
 8000914:	0c0b      	lsrs	r3, r1, #16
 8000916:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800091a:	fb00 f60e 	mul.w	r6, r0, lr
 800091e:	429e      	cmp	r6, r3
 8000920:	fa04 f402 	lsl.w	r4, r4, r2
 8000924:	d908      	bls.n	8000938 <__udivmoddi4+0x260>
 8000926:	eb1c 0303 	adds.w	r3, ip, r3
 800092a:	f100 38ff 	add.w	r8, r0, #4294967295
 800092e:	d22f      	bcs.n	8000990 <__udivmoddi4+0x2b8>
 8000930:	429e      	cmp	r6, r3
 8000932:	d92d      	bls.n	8000990 <__udivmoddi4+0x2b8>
 8000934:	3802      	subs	r0, #2
 8000936:	4463      	add	r3, ip
 8000938:	1b9b      	subs	r3, r3, r6
 800093a:	b289      	uxth	r1, r1
 800093c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000940:	fb07 3316 	mls	r3, r7, r6, r3
 8000944:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000948:	fb06 f30e 	mul.w	r3, r6, lr
 800094c:	428b      	cmp	r3, r1
 800094e:	d908      	bls.n	8000962 <__udivmoddi4+0x28a>
 8000950:	eb1c 0101 	adds.w	r1, ip, r1
 8000954:	f106 38ff 	add.w	r8, r6, #4294967295
 8000958:	d216      	bcs.n	8000988 <__udivmoddi4+0x2b0>
 800095a:	428b      	cmp	r3, r1
 800095c:	d914      	bls.n	8000988 <__udivmoddi4+0x2b0>
 800095e:	3e02      	subs	r6, #2
 8000960:	4461      	add	r1, ip
 8000962:	1ac9      	subs	r1, r1, r3
 8000964:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000968:	e738      	b.n	80007dc <__udivmoddi4+0x104>
 800096a:	462e      	mov	r6, r5
 800096c:	4628      	mov	r0, r5
 800096e:	e705      	b.n	800077c <__udivmoddi4+0xa4>
 8000970:	4606      	mov	r6, r0
 8000972:	e6e3      	b.n	800073c <__udivmoddi4+0x64>
 8000974:	4618      	mov	r0, r3
 8000976:	e6f8      	b.n	800076a <__udivmoddi4+0x92>
 8000978:	454b      	cmp	r3, r9
 800097a:	d2a9      	bcs.n	80008d0 <__udivmoddi4+0x1f8>
 800097c:	ebb9 0802 	subs.w	r8, r9, r2
 8000980:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000984:	3801      	subs	r0, #1
 8000986:	e7a3      	b.n	80008d0 <__udivmoddi4+0x1f8>
 8000988:	4646      	mov	r6, r8
 800098a:	e7ea      	b.n	8000962 <__udivmoddi4+0x28a>
 800098c:	4620      	mov	r0, r4
 800098e:	e794      	b.n	80008ba <__udivmoddi4+0x1e2>
 8000990:	4640      	mov	r0, r8
 8000992:	e7d1      	b.n	8000938 <__udivmoddi4+0x260>
 8000994:	46d0      	mov	r8, sl
 8000996:	e77b      	b.n	8000890 <__udivmoddi4+0x1b8>
 8000998:	3b02      	subs	r3, #2
 800099a:	4461      	add	r1, ip
 800099c:	e732      	b.n	8000804 <__udivmoddi4+0x12c>
 800099e:	4630      	mov	r0, r6
 80009a0:	e709      	b.n	80007b6 <__udivmoddi4+0xde>
 80009a2:	4464      	add	r4, ip
 80009a4:	3802      	subs	r0, #2
 80009a6:	e742      	b.n	800082e <__udivmoddi4+0x156>

080009a8 <__aeabi_idiv0>:
 80009a8:	4770      	bx	lr
 80009aa:	bf00      	nop

080009ac <MX_BlueNRG_MS_Init>:
  PRINT_CSV("%02ld:%02ld:%02ld.%03ld", (long)(ms/(60*60*1000)%24), (long)(ms/(60*1000)%60), (long)((ms/1000)%60), (long)(ms%1000));
}
#endif

void MX_BlueNRG_MS_Init(void)
{
 80009ac:	b5b0      	push	{r4, r5, r7, lr}
 80009ae:	b08a      	sub	sp, #40	; 0x28
 80009b0:	af04      	add	r7, sp, #16
  /* USER CODE BEGIN BlueNRG_MS_Init_PreTreatment */

  /* USER CODE END BlueNRG_MS_Init_PreTreatment */

  /* Initialize the peripherals and the BLE Stack */
  const char *name = "BlueNRG";
 80009b2:	4b4c      	ldr	r3, [pc, #304]	; (8000ae4 <MX_BlueNRG_MS_Init+0x138>)
 80009b4:	617b      	str	r3, [r7, #20]
  uint8_t  bdaddr_len_out;
  uint8_t  hwVersion;
  uint16_t fwVersion;
  int ret;

  User_Init();
 80009b6:	f000 f8a9 	bl	8000b0c <User_Init>

  /* Get the User Button initial state */
  user_button_init_state = BSP_PB_GetState(BUTTON_KEY);
 80009ba:	2000      	movs	r0, #0
 80009bc:	f007 fd1a 	bl	80083f4 <BSP_PB_GetState>
 80009c0:	4603      	mov	r3, r0
 80009c2:	b2da      	uxtb	r2, r3
 80009c4:	4b48      	ldr	r3, [pc, #288]	; (8000ae8 <MX_BlueNRG_MS_Init+0x13c>)
 80009c6:	701a      	strb	r2, [r3, #0]

  hci_init(user_notify, NULL);
 80009c8:	2100      	movs	r1, #0
 80009ca:	4848      	ldr	r0, [pc, #288]	; (8000aec <MX_BlueNRG_MS_Init+0x140>)
 80009cc:	f00b fcf4 	bl	800c3b8 <hci_init>

  /* get the BlueNRG HW and FW versions */
  getBlueNRGVersion(&hwVersion, &fwVersion);
 80009d0:	1dba      	adds	r2, r7, #6
 80009d2:	f107 0308 	add.w	r3, r7, #8
 80009d6:	4611      	mov	r1, r2
 80009d8:	4618      	mov	r0, r3
 80009da:	f00b fb61 	bl	800c0a0 <getBlueNRGVersion>
   * Reset BlueNRG again otherwise we won't
   * be able to change its MAC address.
   * aci_hal_write_config_data() must be the first
   * command after reset otherwise it will fail.
   */
  hci_reset();
 80009de:	f00b fba3 	bl	800c128 <hci_reset>
  HAL_Delay(100);
 80009e2:	2064      	movs	r0, #100	; 0x64
 80009e4:	f007 feaa 	bl	800873c <HAL_Delay>

  PRINTF("HWver %d\nFWver %d\n", hwVersion, fwVersion);
  if (hwVersion > 0x30) { /* X-NUCLEO-IDB05A1 expansion board is used */
 80009e8:	7a3b      	ldrb	r3, [r7, #8]
 80009ea:	2b30      	cmp	r3, #48	; 0x30
 80009ec:	d902      	bls.n	80009f4 <MX_BlueNRG_MS_Init+0x48>
    bnrg_expansion_board = IDB05A1;
 80009ee:	4b40      	ldr	r3, [pc, #256]	; (8000af0 <MX_BlueNRG_MS_Init+0x144>)
 80009f0:	2201      	movs	r2, #1
 80009f2:	701a      	strb	r2, [r3, #0]
  }

  ret = aci_hal_read_config_data(CONFIG_DATA_RANDOM_ADDRESS, BDADDR_SIZE, &bdaddr_len_out, bdaddr);
 80009f4:	f107 0209 	add.w	r2, r7, #9
 80009f8:	4b3e      	ldr	r3, [pc, #248]	; (8000af4 <MX_BlueNRG_MS_Init+0x148>)
 80009fa:	2106      	movs	r1, #6
 80009fc:	2080      	movs	r0, #128	; 0x80
 80009fe:	f00b fac9 	bl	800bf94 <aci_hal_read_config_data>
 8000a02:	4603      	mov	r3, r0
 8000a04:	613b      	str	r3, [r7, #16]

  if (ret) {
    PRINTF("Read Static Random address failed.\n");
  }

  if ((bdaddr[5] & 0xC0) != 0xC0) {
 8000a06:	4b3b      	ldr	r3, [pc, #236]	; (8000af4 <MX_BlueNRG_MS_Init+0x148>)
 8000a08:	795b      	ldrb	r3, [r3, #5]
 8000a0a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8000a0e:	2bc0      	cmp	r3, #192	; 0xc0
 8000a10:	d000      	beq.n	8000a14 <MX_BlueNRG_MS_Init+0x68>
    PRINTF("Static Random address not well formed.\n");
    while(1);
 8000a12:	e7fe      	b.n	8000a12 <MX_BlueNRG_MS_Init+0x66>
  }

  /* GATT Init */
  ret = aci_gatt_init();
 8000a14:	f00b f88a 	bl	800bb2c <aci_gatt_init>
 8000a18:	4603      	mov	r3, r0
 8000a1a:	613b      	str	r3, [r7, #16]
  if(ret){
    PRINTF("GATT_Init failed.\n");
  }

  /* GAP Init */
  if (bnrg_expansion_board == IDB05A1) {
 8000a1c:	4b34      	ldr	r3, [pc, #208]	; (8000af0 <MX_BlueNRG_MS_Init+0x144>)
 8000a1e:	781b      	ldrb	r3, [r3, #0]
 8000a20:	2b01      	cmp	r3, #1
 8000a22:	d110      	bne.n	8000a46 <MX_BlueNRG_MS_Init+0x9a>
    ret = aci_gap_init_IDB05A1(GAP_PERIPHERAL_ROLE_IDB05A1, 0, 0x07, &service_handle, &dev_name_char_handle, &appearance_char_handle);
 8000a24:	f107 020e 	add.w	r2, r7, #14
 8000a28:	f107 030a 	add.w	r3, r7, #10
 8000a2c:	9301      	str	r3, [sp, #4]
 8000a2e:	f107 030c 	add.w	r3, r7, #12
 8000a32:	9300      	str	r3, [sp, #0]
 8000a34:	4613      	mov	r3, r2
 8000a36:	2207      	movs	r2, #7
 8000a38:	2100      	movs	r1, #0
 8000a3a:	2001      	movs	r0, #1
 8000a3c:	f00a fe4a 	bl	800b6d4 <aci_gap_init_IDB05A1>
 8000a40:	4603      	mov	r3, r0
 8000a42:	613b      	str	r3, [r7, #16]
 8000a44:	e00a      	b.n	8000a5c <MX_BlueNRG_MS_Init+0xb0>
  }
  else {
    ret = aci_gap_init_IDB04A1(GAP_PERIPHERAL_ROLE_IDB04A1, &service_handle, &dev_name_char_handle, &appearance_char_handle);
 8000a46:	f107 030a 	add.w	r3, r7, #10
 8000a4a:	f107 020c 	add.w	r2, r7, #12
 8000a4e:	f107 010e 	add.w	r1, r7, #14
 8000a52:	2001      	movs	r0, #1
 8000a54:	f00a fe8e 	bl	800b774 <aci_gap_init_IDB04A1>
 8000a58:	4603      	mov	r3, r0
 8000a5a:	613b      	str	r3, [r7, #16]
  if (ret != BLE_STATUS_SUCCESS) {
    PRINTF("GAP_Init failed.\n");
  }

  /* Update device name */
  ret = aci_gatt_update_char_value(service_handle, dev_name_char_handle, 0,
 8000a5c:	89fc      	ldrh	r4, [r7, #14]
 8000a5e:	89bd      	ldrh	r5, [r7, #12]
                                   strlen(name), (uint8_t *)name);
 8000a60:	6978      	ldr	r0, [r7, #20]
 8000a62:	f7ff fbbd 	bl	80001e0 <strlen>
 8000a66:	4603      	mov	r3, r0
  ret = aci_gatt_update_char_value(service_handle, dev_name_char_handle, 0,
 8000a68:	b2da      	uxtb	r2, r3
 8000a6a:	697b      	ldr	r3, [r7, #20]
 8000a6c:	9300      	str	r3, [sp, #0]
 8000a6e:	4613      	mov	r3, r2
 8000a70:	2200      	movs	r2, #0
 8000a72:	4629      	mov	r1, r5
 8000a74:	4620      	mov	r0, r4
 8000a76:	f00b f9d0 	bl	800be1a <aci_gatt_update_char_value>
 8000a7a:	4603      	mov	r3, r0
 8000a7c:	613b      	str	r3, [r7, #16]
  if (ret) {
 8000a7e:	693b      	ldr	r3, [r7, #16]
 8000a80:	2b00      	cmp	r3, #0
 8000a82:	d000      	beq.n	8000a86 <MX_BlueNRG_MS_Init+0xda>
    PRINTF("aci_gatt_update_char_value failed.\n");
    while(1);
 8000a84:	e7fe      	b.n	8000a84 <MX_BlueNRG_MS_Init+0xd8>
  }

  ret = aci_gap_set_auth_requirement(MITM_PROTECTION_REQUIRED,
 8000a86:	2301      	movs	r3, #1
 8000a88:	9303      	str	r3, [sp, #12]
 8000a8a:	4b1b      	ldr	r3, [pc, #108]	; (8000af8 <MX_BlueNRG_MS_Init+0x14c>)
 8000a8c:	9302      	str	r3, [sp, #8]
 8000a8e:	2300      	movs	r3, #0
 8000a90:	9301      	str	r3, [sp, #4]
 8000a92:	2310      	movs	r3, #16
 8000a94:	9300      	str	r3, [sp, #0]
 8000a96:	2307      	movs	r3, #7
 8000a98:	2200      	movs	r2, #0
 8000a9a:	2100      	movs	r1, #0
 8000a9c:	2001      	movs	r0, #1
 8000a9e:	f00a ff9d 	bl	800b9dc <aci_gap_set_auth_requirement>
 8000aa2:	4603      	mov	r3, r0
 8000aa4:	613b      	str	r3, [r7, #16]
                                     7,
                                     16,
                                     USE_FIXED_PIN_FOR_PAIRING,
                                     123456,
                                     BONDING);
  if (ret) {
 8000aa6:	693b      	ldr	r3, [r7, #16]
 8000aa8:	2b00      	cmp	r3, #0
 8000aaa:	d000      	beq.n	8000aae <MX_BlueNRG_MS_Init+0x102>
    PRINTF("aci_gap_set_authentication_requirement failed.\n");
    while(1);
 8000aac:	e7fe      	b.n	8000aac <MX_BlueNRG_MS_Init+0x100>
  }

  PRINTF("BLE Stack Initialized\n");

  ret = Add_HWServW2ST_Service();
 8000aae:	f001 fa8b 	bl	8001fc8 <Add_HWServW2ST_Service>
 8000ab2:	4603      	mov	r3, r0
 8000ab4:	613b      	str	r3, [r7, #16]
  if(ret == BLE_STATUS_SUCCESS) {
 8000ab6:	693b      	ldr	r3, [r7, #16]
 8000ab8:	2b00      	cmp	r3, #0
 8000aba:	d000      	beq.n	8000abe <MX_BlueNRG_MS_Init+0x112>
    PRINTF("BlueMS HW service added successfully.\n");
  } else {
    PRINTF("Error while adding BlueMS HW service: 0x%02x\r\n", ret);
    while(1);
 8000abc:	e7fe      	b.n	8000abc <MX_BlueNRG_MS_Init+0x110>
  }

  ret = Add_SWServW2ST_Service();
 8000abe:	f001 fb55 	bl	800216c <Add_SWServW2ST_Service>
 8000ac2:	4603      	mov	r3, r0
 8000ac4:	613b      	str	r3, [r7, #16]
  if(ret == BLE_STATUS_SUCCESS) {
 8000ac6:	693b      	ldr	r3, [r7, #16]
 8000ac8:	2b00      	cmp	r3, #0
 8000aca:	d000      	beq.n	8000ace <MX_BlueNRG_MS_Init+0x122>
     PRINTF("BlueMS SW service added successfully.\n");
  } else {
     PRINTF("Error while adding BlueMS HW service: 0x%02x\r\n", ret);
     while(1);
 8000acc:	e7fe      	b.n	8000acc <MX_BlueNRG_MS_Init+0x120>
  }

  /* Set output power level */
  ret = aci_hal_set_tx_power_level(1,4);
 8000ace:	2104      	movs	r1, #4
 8000ad0:	2001      	movs	r0, #1
 8000ad2:	f00b fab4 	bl	800c03e <aci_hal_set_tx_power_level>
 8000ad6:	4603      	mov	r3, r0
 8000ad8:	613b      	str	r3, [r7, #16]

  /* USER CODE BEGIN BlueNRG_MS_Init_PostTreatment */

  /* USER CODE END BlueNRG_MS_Init_PostTreatment */
}
 8000ada:	bf00      	nop
 8000adc:	3718      	adds	r7, #24
 8000ade:	46bd      	mov	sp, r7
 8000ae0:	bdb0      	pop	{r4, r5, r7, pc}
 8000ae2:	bf00      	nop
 8000ae4:	0800db34 	.word	0x0800db34
 8000ae8:	20000000 	.word	0x20000000
 8000aec:	08002731 	.word	0x08002731
 8000af0:	20000178 	.word	0x20000178
 8000af4:	2000017c 	.word	0x2000017c
 8000af8:	0001e240 	.word	0x0001e240

08000afc <MX_BlueNRG_MS_Process>:

/*
 * BlueNRG-MS background task
 */
void MX_BlueNRG_MS_Process(void)
{
 8000afc:	b580      	push	{r7, lr}
 8000afe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BlueNRG_MS_Process_PreTreatment */

  /* USER CODE END BlueNRG_MS_Process_PreTreatment */

  User_Process();
 8000b00:	f000 f812 	bl	8000b28 <User_Process>
  hci_user_evt_proc();
 8000b04:	f00b fdd4 	bl	800c6b0 <hci_user_evt_proc>

  /* USER CODE BEGIN BlueNRG_MS_Process_PostTreatment */

  /* USER CODE END BlueNRG_MS_Process_PostTreatment */
}
 8000b08:	bf00      	nop
 8000b0a:	bd80      	pop	{r7, pc}

08000b0c <User_Init>:
 *
 * @param  None
 * @retval None
 */
static void User_Init(void)
{
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	af00      	add	r7, sp, #0
  BSP_PB_Init(BUTTON_KEY, BUTTON_MODE_EXTI);
 8000b10:	2101      	movs	r1, #1
 8000b12:	2000      	movs	r0, #0
 8000b14:	f007 fc1a 	bl	800834c <BSP_PB_Init>
  BSP_LED_Init(LED2);
 8000b18:	2000      	movs	r0, #0
 8000b1a:	f007 fbad 	bl	8008278 <BSP_LED_Init>

  BSP_COM_Init(COM1);
 8000b1e:	2000      	movs	r0, #0
 8000b20:	f007 fcca 	bl	80084b8 <BSP_COM_Init>
}
 8000b24:	bf00      	nop
 8000b26:	bd80      	pop	{r7, pc}

08000b28 <User_Process>:
 *
 * @param  None
 * @retval None
 */
static void User_Process(void)
{
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	b082      	sub	sp, #8
 8000b2c:	af00      	add	r7, sp, #0
  float data_t;
  float data_p;
  static uint32_t counter = 0;

  if (set_connectable)
 8000b2e:	4b2b      	ldr	r3, [pc, #172]	; (8000bdc <User_Process+0xb4>)
 8000b30:	781b      	ldrb	r3, [r3, #0]
 8000b32:	b2db      	uxtb	r3, r3
 8000b34:	2b00      	cmp	r3, #0
 8000b36:	d004      	beq.n	8000b42 <User_Process+0x1a>
  {
    Set_DeviceConnectable();
 8000b38:	f001 fd86 	bl	8002648 <Set_DeviceConnectable>
    set_connectable = FALSE;
 8000b3c:	4b27      	ldr	r3, [pc, #156]	; (8000bdc <User_Process+0xb4>)
 8000b3e:	2200      	movs	r2, #0
 8000b40:	701a      	strb	r2, [r3, #0]
    while (BSP_PB_GetState(BUTTON_KEY) == !user_button_init_state);

    /* Debouncing */
    HAL_Delay(50);
#endif
    BSP_LED_Toggle(LED2);
 8000b42:	2000      	movs	r0, #0
 8000b44:	f007 fbaa 	bl	800829c <BSP_LED_Toggle>

    if (connected)
 8000b48:	4b25      	ldr	r3, [pc, #148]	; (8000be0 <User_Process+0xb8>)
 8000b4a:	681b      	ldr	r3, [r3, #0]
 8000b4c:	2b00      	cmp	r3, #0
 8000b4e:	d041      	beq.n	8000bd4 <User_Process+0xac>
    {
      /* Set a random seed */
      srand(HAL_GetTick());
 8000b50:	f007 fde8 	bl	8008724 <HAL_GetTick>
 8000b54:	4603      	mov	r3, r0
 8000b56:	4618      	mov	r0, r3
 8000b58:	f00b ff7a 	bl	800ca50 <srand>

      /* Update emulated Environmental data */
      Set_Random_Environmental_Values(&data_t, &data_p);
 8000b5c:	463a      	mov	r2, r7
 8000b5e:	1d3b      	adds	r3, r7, #4
 8000b60:	4611      	mov	r1, r2
 8000b62:	4618      	mov	r0, r3
 8000b64:	f000 f848 	bl	8000bf8 <Set_Random_Environmental_Values>
      BlueMS_Environmental_Update((int32_t)(data_p *100), (int16_t)(data_t * 10));
 8000b68:	edd7 7a00 	vldr	s15, [r7]
 8000b6c:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 8000be4 <User_Process+0xbc>
 8000b70:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000b74:	eefd 6ae7 	vcvt.s32.f32	s13, s15
 8000b78:	edd7 7a01 	vldr	s15, [r7, #4]
 8000b7c:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8000b80:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000b84:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000b88:	ee17 3a90 	vmov	r3, s15
 8000b8c:	b21b      	sxth	r3, r3
 8000b8e:	4619      	mov	r1, r3
 8000b90:	ee16 0a90 	vmov	r0, s13
 8000b94:	f001 fd12 	bl	80025bc <BlueMS_Environmental_Update>

      /* Update emulated Acceleration, Gyroscope and Sensor Fusion data */
      Set_Random_Motion_Values(counter);
 8000b98:	4b13      	ldr	r3, [pc, #76]	; (8000be8 <User_Process+0xc0>)
 8000b9a:	681b      	ldr	r3, [r3, #0]
 8000b9c:	4618      	mov	r0, r3
 8000b9e:	f000 f8ab 	bl	8000cf8 <Set_Random_Motion_Values>
      Acc_Update(&misure_accelerometro, &g_axes, &misure_accelerometro);
 8000ba2:	4a12      	ldr	r2, [pc, #72]	; (8000bec <User_Process+0xc4>)
 8000ba4:	4912      	ldr	r1, [pc, #72]	; (8000bf0 <User_Process+0xc8>)
 8000ba6:	4811      	ldr	r0, [pc, #68]	; (8000bec <User_Process+0xc4>)
 8000ba8:	f001 fb70 	bl	800228c <Acc_Update>
      Quat_Update(&q_axes);
 8000bac:	4811      	ldr	r0, [pc, #68]	; (8000bf4 <User_Process+0xcc>)
 8000bae:	f001 fbf7 	bl	80023a0 <Quat_Update>

      counter ++;
 8000bb2:	4b0d      	ldr	r3, [pc, #52]	; (8000be8 <User_Process+0xc0>)
 8000bb4:	681b      	ldr	r3, [r3, #0]
 8000bb6:	3301      	adds	r3, #1
 8000bb8:	4a0b      	ldr	r2, [pc, #44]	; (8000be8 <User_Process+0xc0>)
 8000bba:	6013      	str	r3, [r2, #0]
      if (counter == 40) {
 8000bbc:	4b0a      	ldr	r3, [pc, #40]	; (8000be8 <User_Process+0xc0>)
 8000bbe:	681b      	ldr	r3, [r3, #0]
 8000bc0:	2b28      	cmp	r3, #40	; 0x28
 8000bc2:	d104      	bne.n	8000bce <User_Process+0xa6>
        counter = 0;
 8000bc4:	4b08      	ldr	r3, [pc, #32]	; (8000be8 <User_Process+0xc0>)
 8000bc6:	2200      	movs	r2, #0
 8000bc8:	601a      	str	r2, [r3, #0]
        Reset_Motion_Values();
 8000bca:	f001 f903 	bl	8001dd4 <Reset_Motion_Values>
      }
#if !USE_BUTTON
      HAL_Delay(10); /* wait 1 sec before sending new data */
 8000bce:	200a      	movs	r0, #10
 8000bd0:	f007 fdb4 	bl	800873c <HAL_Delay>
#if USE_BUTTON
    /* Reset the User Button flag */
    user_button_pressed = 0;
  }
#endif
}
 8000bd4:	bf00      	nop
 8000bd6:	3708      	adds	r7, #8
 8000bd8:	46bd      	mov	sp, r7
 8000bda:	bd80      	pop	{r7, pc}
 8000bdc:	20000001 	.word	0x20000001
 8000be0:	200001b8 	.word	0x200001b8
 8000be4:	42c80000 	.word	0x42c80000
 8000be8:	20000184 	.word	0x20000184
 8000bec:	200002f4 	.word	0x200002f4
 8000bf0:	200001c8 	.word	0x200001c8
 8000bf4:	200001e0 	.word	0x200001e0

08000bf8 <Set_Random_Environmental_Values>:
 * @param  float pointer to temperature data
 * @param  float pointer to pressure data
 * @retval None
 */
static void Set_Random_Environmental_Values(float *data_t, float *data_p)
{
 8000bf8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8000bfc:	b084      	sub	sp, #16
 8000bfe:	af00      	add	r7, sp, #0
 8000c00:	60f8      	str	r0, [r7, #12]
 8000c02:	60b9      	str	r1, [r7, #8]
  *data_t = 27.0 + ((uint64_t)rand()*5)/RAND_MAX;     /* T sensor emulation */
 8000c04:	f00b ff52 	bl	800caac <rand>
 8000c08:	4603      	mov	r3, r0
 8000c0a:	17da      	asrs	r2, r3, #31
 8000c0c:	469a      	mov	sl, r3
 8000c0e:	4693      	mov	fp, r2
 8000c10:	4652      	mov	r2, sl
 8000c12:	465b      	mov	r3, fp
 8000c14:	f04f 0000 	mov.w	r0, #0
 8000c18:	f04f 0100 	mov.w	r1, #0
 8000c1c:	0099      	lsls	r1, r3, #2
 8000c1e:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 8000c22:	0090      	lsls	r0, r2, #2
 8000c24:	4602      	mov	r2, r0
 8000c26:	460b      	mov	r3, r1
 8000c28:	eb12 010a 	adds.w	r1, r2, sl
 8000c2c:	6039      	str	r1, [r7, #0]
 8000c2e:	eb43 030b 	adc.w	r3, r3, fp
 8000c32:	607b      	str	r3, [r7, #4]
 8000c34:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8000c38:	f04f 0300 	mov.w	r3, #0
 8000c3c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8000c40:	f7ff fd32 	bl	80006a8 <__aeabi_uldivmod>
 8000c44:	4602      	mov	r2, r0
 8000c46:	460b      	mov	r3, r1
 8000c48:	4610      	mov	r0, r2
 8000c4a:	4619      	mov	r1, r3
 8000c4c:	f7ff fca6 	bl	800059c <__aeabi_ul2d>
 8000c50:	f04f 0200 	mov.w	r2, #0
 8000c54:	4b26      	ldr	r3, [pc, #152]	; (8000cf0 <Set_Random_Environmental_Values+0xf8>)
 8000c56:	f7ff fb21 	bl	800029c <__adddf3>
 8000c5a:	4602      	mov	r2, r0
 8000c5c:	460b      	mov	r3, r1
 8000c5e:	4610      	mov	r0, r2
 8000c60:	4619      	mov	r1, r3
 8000c62:	f7ff fcd1 	bl	8000608 <__aeabi_d2f>
 8000c66:	4602      	mov	r2, r0
 8000c68:	68fb      	ldr	r3, [r7, #12]
 8000c6a:	601a      	str	r2, [r3, #0]
  *data_p = 1000.0 + ((uint64_t)rand()*80)/RAND_MAX; /* P sensor emulation */
 8000c6c:	f00b ff1e 	bl	800caac <rand>
 8000c70:	4603      	mov	r3, r0
 8000c72:	17da      	asrs	r2, r3, #31
 8000c74:	4698      	mov	r8, r3
 8000c76:	4691      	mov	r9, r2
 8000c78:	4642      	mov	r2, r8
 8000c7a:	464b      	mov	r3, r9
 8000c7c:	f04f 0000 	mov.w	r0, #0
 8000c80:	f04f 0100 	mov.w	r1, #0
 8000c84:	0099      	lsls	r1, r3, #2
 8000c86:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 8000c8a:	0090      	lsls	r0, r2, #2
 8000c8c:	4602      	mov	r2, r0
 8000c8e:	460b      	mov	r3, r1
 8000c90:	eb12 0408 	adds.w	r4, r2, r8
 8000c94:	eb43 0509 	adc.w	r5, r3, r9
 8000c98:	f04f 0200 	mov.w	r2, #0
 8000c9c:	f04f 0300 	mov.w	r3, #0
 8000ca0:	012b      	lsls	r3, r5, #4
 8000ca2:	ea43 7314 	orr.w	r3, r3, r4, lsr #28
 8000ca6:	0122      	lsls	r2, r4, #4
 8000ca8:	4614      	mov	r4, r2
 8000caa:	461d      	mov	r5, r3
 8000cac:	4620      	mov	r0, r4
 8000cae:	4629      	mov	r1, r5
 8000cb0:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8000cb4:	f04f 0300 	mov.w	r3, #0
 8000cb8:	f7ff fcf6 	bl	80006a8 <__aeabi_uldivmod>
 8000cbc:	4602      	mov	r2, r0
 8000cbe:	460b      	mov	r3, r1
 8000cc0:	4610      	mov	r0, r2
 8000cc2:	4619      	mov	r1, r3
 8000cc4:	f7ff fc6a 	bl	800059c <__aeabi_ul2d>
 8000cc8:	f04f 0200 	mov.w	r2, #0
 8000ccc:	4b09      	ldr	r3, [pc, #36]	; (8000cf4 <Set_Random_Environmental_Values+0xfc>)
 8000cce:	f7ff fae5 	bl	800029c <__adddf3>
 8000cd2:	4602      	mov	r2, r0
 8000cd4:	460b      	mov	r3, r1
 8000cd6:	4610      	mov	r0, r2
 8000cd8:	4619      	mov	r1, r3
 8000cda:	f7ff fc95 	bl	8000608 <__aeabi_d2f>
 8000cde:	4602      	mov	r2, r0
 8000ce0:	68bb      	ldr	r3, [r7, #8]
 8000ce2:	601a      	str	r2, [r3, #0]
}
 8000ce4:	bf00      	nop
 8000ce6:	3710      	adds	r7, #16
 8000ce8:	46bd      	mov	sp, r7
 8000cea:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8000cee:	bf00      	nop
 8000cf0:	403b0000 	.word	0x403b0000
 8000cf4:	408f4000 	.word	0x408f4000

08000cf8 <Set_Random_Motion_Values>:
 * @brief  Set random values for all motion sensor data
 * @param  uint32_t counter for changing the rotation direction
 * @retval None
 */
static void Set_Random_Motion_Values(uint32_t cnt)
{
 8000cf8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8000cfc:	f5ad 7d7a 	sub.w	sp, sp, #1000	; 0x3e8
 8000d00:	af00      	add	r7, sp, #0
 8000d02:	f8c7 03e4 	str.w	r0, [r7, #996]	; 0x3e4
  /* Update Acceleration, Gyroscope and Sensor Fusion data */
  if (cnt < 20) {
 8000d06:	f8d7 33e4 	ldr.w	r3, [r7, #996]	; 0x3e4
 8000d0a:	2b13      	cmp	r3, #19
 8000d0c:	f200 8426 	bhi.w	800155c <Set_Random_Motion_Values+0x864>
    x_axes.AXIS_X +=  (10  + ((uint64_t)rand()*3*cnt)/RAND_MAX);
 8000d10:	f00b fecc 	bl	800caac <rand>
 8000d14:	4603      	mov	r3, r0
 8000d16:	17da      	asrs	r2, r3, #31
 8000d18:	f8c7 3328 	str.w	r3, [r7, #808]	; 0x328
 8000d1c:	f8c7 232c 	str.w	r2, [r7, #812]	; 0x32c
 8000d20:	f8d7 33e4 	ldr.w	r3, [r7, #996]	; 0x3e4
 8000d24:	2200      	movs	r2, #0
 8000d26:	f8c7 3320 	str.w	r3, [r7, #800]	; 0x320
 8000d2a:	f8c7 2324 	str.w	r2, [r7, #804]	; 0x324
 8000d2e:	e9d7 45ca 	ldrd	r4, r5, [r7, #808]	; 0x328
 8000d32:	462b      	mov	r3, r5
 8000d34:	e9d7 abc8 	ldrd	sl, fp, [r7, #800]	; 0x320
 8000d38:	4652      	mov	r2, sl
 8000d3a:	fb02 f203 	mul.w	r2, r2, r3
 8000d3e:	465b      	mov	r3, fp
 8000d40:	4621      	mov	r1, r4
 8000d42:	fb01 f303 	mul.w	r3, r1, r3
 8000d46:	4413      	add	r3, r2
 8000d48:	4622      	mov	r2, r4
 8000d4a:	4651      	mov	r1, sl
 8000d4c:	fba2 8901 	umull	r8, r9, r2, r1
 8000d50:	444b      	add	r3, r9
 8000d52:	4699      	mov	r9, r3
 8000d54:	4642      	mov	r2, r8
 8000d56:	464b      	mov	r3, r9
 8000d58:	1891      	adds	r1, r2, r2
 8000d5a:	66b9      	str	r1, [r7, #104]	; 0x68
 8000d5c:	415b      	adcs	r3, r3
 8000d5e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8000d60:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 8000d64:	eb12 0108 	adds.w	r1, r2, r8
 8000d68:	f8c7 1318 	str.w	r1, [r7, #792]	; 0x318
 8000d6c:	eb43 0309 	adc.w	r3, r3, r9
 8000d70:	f8c7 331c 	str.w	r3, [r7, #796]	; 0x31c
 8000d74:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8000d78:	f04f 0300 	mov.w	r3, #0
 8000d7c:	e9d7 01c6 	ldrd	r0, r1, [r7, #792]	; 0x318
 8000d80:	f7ff fc92 	bl	80006a8 <__aeabi_uldivmod>
 8000d84:	4602      	mov	r2, r0
 8000d86:	460b      	mov	r3, r1
 8000d88:	f112 010a 	adds.w	r1, r2, #10
 8000d8c:	f8c7 10c8 	str.w	r1, [r7, #200]	; 0xc8
 8000d90:	f143 0300 	adc.w	r3, r3, #0
 8000d94:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8000d98:	4bec      	ldr	r3, [pc, #944]	; (800114c <Set_Random_Motion_Values+0x454>)
 8000d9a:	681b      	ldr	r3, [r3, #0]
 8000d9c:	461a      	mov	r2, r3
 8000d9e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8000da2:	4413      	add	r3, r2
 8000da4:	461a      	mov	r2, r3
 8000da6:	4be9      	ldr	r3, [pc, #932]	; (800114c <Set_Random_Motion_Values+0x454>)
 8000da8:	601a      	str	r2, [r3, #0]
    x_axes.AXIS_Y += -(10  + ((uint64_t)rand()*5*cnt)/RAND_MAX);
 8000daa:	f00b fe7f 	bl	800caac <rand>
 8000dae:	4603      	mov	r3, r0
 8000db0:	17da      	asrs	r2, r3, #31
 8000db2:	f8c7 3310 	str.w	r3, [r7, #784]	; 0x310
 8000db6:	f8c7 2314 	str.w	r2, [r7, #788]	; 0x314
 8000dba:	f8d7 33e4 	ldr.w	r3, [r7, #996]	; 0x3e4
 8000dbe:	2200      	movs	r2, #0
 8000dc0:	f8c7 3308 	str.w	r3, [r7, #776]	; 0x308
 8000dc4:	f8c7 230c 	str.w	r2, [r7, #780]	; 0x30c
 8000dc8:	e9d7 45c4 	ldrd	r4, r5, [r7, #784]	; 0x310
 8000dcc:	462b      	mov	r3, r5
 8000dce:	e9d7 89c2 	ldrd	r8, r9, [r7, #776]	; 0x308
 8000dd2:	4642      	mov	r2, r8
 8000dd4:	fb02 f203 	mul.w	r2, r2, r3
 8000dd8:	464b      	mov	r3, r9
 8000dda:	4621      	mov	r1, r4
 8000ddc:	fb01 f303 	mul.w	r3, r1, r3
 8000de0:	4413      	add	r3, r2
 8000de2:	4622      	mov	r2, r4
 8000de4:	4641      	mov	r1, r8
 8000de6:	fba2 1201 	umull	r1, r2, r2, r1
 8000dea:	f8c7 23dc 	str.w	r2, [r7, #988]	; 0x3dc
 8000dee:	460a      	mov	r2, r1
 8000df0:	f8c7 23d8 	str.w	r2, [r7, #984]	; 0x3d8
 8000df4:	f8d7 23dc 	ldr.w	r2, [r7, #988]	; 0x3dc
 8000df8:	4413      	add	r3, r2
 8000dfa:	f8c7 33dc 	str.w	r3, [r7, #988]	; 0x3dc
 8000dfe:	e9d7 45f6 	ldrd	r4, r5, [r7, #984]	; 0x3d8
 8000e02:	4622      	mov	r2, r4
 8000e04:	462b      	mov	r3, r5
 8000e06:	f04f 0000 	mov.w	r0, #0
 8000e0a:	f04f 0100 	mov.w	r1, #0
 8000e0e:	0099      	lsls	r1, r3, #2
 8000e10:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 8000e14:	0090      	lsls	r0, r2, #2
 8000e16:	4602      	mov	r2, r0
 8000e18:	460b      	mov	r3, r1
 8000e1a:	4621      	mov	r1, r4
 8000e1c:	1851      	adds	r1, r2, r1
 8000e1e:	f8c7 1300 	str.w	r1, [r7, #768]	; 0x300
 8000e22:	4629      	mov	r1, r5
 8000e24:	eb43 0101 	adc.w	r1, r3, r1
 8000e28:	f8c7 1304 	str.w	r1, [r7, #772]	; 0x304
 8000e2c:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8000e30:	f04f 0300 	mov.w	r3, #0
 8000e34:	e9d7 01c0 	ldrd	r0, r1, [r7, #768]	; 0x300
 8000e38:	f7ff fc36 	bl	80006a8 <__aeabi_uldivmod>
 8000e3c:	4602      	mov	r2, r0
 8000e3e:	460b      	mov	r3, r1
 8000e40:	f06f 0009 	mvn.w	r0, #9
 8000e44:	f04f 31ff 	mov.w	r1, #4294967295
 8000e48:	1a80      	subs	r0, r0, r2
 8000e4a:	f8c7 00c0 	str.w	r0, [r7, #192]	; 0xc0
 8000e4e:	eb61 0303 	sbc.w	r3, r1, r3
 8000e52:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8000e56:	4bbd      	ldr	r3, [pc, #756]	; (800114c <Set_Random_Motion_Values+0x454>)
 8000e58:	685b      	ldr	r3, [r3, #4]
 8000e5a:	461a      	mov	r2, r3
 8000e5c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8000e60:	4413      	add	r3, r2
 8000e62:	461a      	mov	r2, r3
 8000e64:	4bb9      	ldr	r3, [pc, #740]	; (800114c <Set_Random_Motion_Values+0x454>)
 8000e66:	605a      	str	r2, [r3, #4]
    x_axes.AXIS_Z +=  (10  + ((uint64_t)rand()*7*cnt)/RAND_MAX);
 8000e68:	f00b fe20 	bl	800caac <rand>
 8000e6c:	4603      	mov	r3, r0
 8000e6e:	17da      	asrs	r2, r3, #31
 8000e70:	f8c7 32f8 	str.w	r3, [r7, #760]	; 0x2f8
 8000e74:	f8c7 22fc 	str.w	r2, [r7, #764]	; 0x2fc
 8000e78:	f8d7 33e4 	ldr.w	r3, [r7, #996]	; 0x3e4
 8000e7c:	2200      	movs	r2, #0
 8000e7e:	f8c7 32f0 	str.w	r3, [r7, #752]	; 0x2f0
 8000e82:	f8c7 22f4 	str.w	r2, [r7, #756]	; 0x2f4
 8000e86:	e9d7 45be 	ldrd	r4, r5, [r7, #760]	; 0x2f8
 8000e8a:	462b      	mov	r3, r5
 8000e8c:	e9d7 89bc 	ldrd	r8, r9, [r7, #752]	; 0x2f0
 8000e90:	4642      	mov	r2, r8
 8000e92:	fb02 f203 	mul.w	r2, r2, r3
 8000e96:	464b      	mov	r3, r9
 8000e98:	4621      	mov	r1, r4
 8000e9a:	fb01 f303 	mul.w	r3, r1, r3
 8000e9e:	4413      	add	r3, r2
 8000ea0:	4622      	mov	r2, r4
 8000ea2:	4641      	mov	r1, r8
 8000ea4:	fba2 1201 	umull	r1, r2, r2, r1
 8000ea8:	f8c7 23d4 	str.w	r2, [r7, #980]	; 0x3d4
 8000eac:	460a      	mov	r2, r1
 8000eae:	f8c7 23d0 	str.w	r2, [r7, #976]	; 0x3d0
 8000eb2:	f8d7 23d4 	ldr.w	r2, [r7, #980]	; 0x3d4
 8000eb6:	4413      	add	r3, r2
 8000eb8:	f8c7 33d4 	str.w	r3, [r7, #980]	; 0x3d4
 8000ebc:	e9d7 45f4 	ldrd	r4, r5, [r7, #976]	; 0x3d0
 8000ec0:	4622      	mov	r2, r4
 8000ec2:	462b      	mov	r3, r5
 8000ec4:	f04f 0000 	mov.w	r0, #0
 8000ec8:	f04f 0100 	mov.w	r1, #0
 8000ecc:	00d9      	lsls	r1, r3, #3
 8000ece:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8000ed2:	00d0      	lsls	r0, r2, #3
 8000ed4:	4602      	mov	r2, r0
 8000ed6:	460b      	mov	r3, r1
 8000ed8:	4621      	mov	r1, r4
 8000eda:	1a51      	subs	r1, r2, r1
 8000edc:	f8c7 12e8 	str.w	r1, [r7, #744]	; 0x2e8
 8000ee0:	4629      	mov	r1, r5
 8000ee2:	eb63 0301 	sbc.w	r3, r3, r1
 8000ee6:	f8c7 32ec 	str.w	r3, [r7, #748]	; 0x2ec
 8000eea:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8000eee:	f04f 0300 	mov.w	r3, #0
 8000ef2:	e9d7 01ba 	ldrd	r0, r1, [r7, #744]	; 0x2e8
 8000ef6:	f7ff fbd7 	bl	80006a8 <__aeabi_uldivmod>
 8000efa:	4602      	mov	r2, r0
 8000efc:	460b      	mov	r3, r1
 8000efe:	f112 010a 	adds.w	r1, r2, #10
 8000f02:	f8c7 10b8 	str.w	r1, [r7, #184]	; 0xb8
 8000f06:	f143 0300 	adc.w	r3, r3, #0
 8000f0a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8000f0e:	4b8f      	ldr	r3, [pc, #572]	; (800114c <Set_Random_Motion_Values+0x454>)
 8000f10:	689b      	ldr	r3, [r3, #8]
 8000f12:	461a      	mov	r2, r3
 8000f14:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8000f18:	4413      	add	r3, r2
 8000f1a:	461a      	mov	r2, r3
 8000f1c:	4b8b      	ldr	r3, [pc, #556]	; (800114c <Set_Random_Motion_Values+0x454>)
 8000f1e:	609a      	str	r2, [r3, #8]
    g_axes.AXIS_X +=  (100 + ((uint64_t)rand()*2*cnt)/RAND_MAX);
 8000f20:	f00b fdc4 	bl	800caac <rand>
 8000f24:	4603      	mov	r3, r0
 8000f26:	17da      	asrs	r2, r3, #31
 8000f28:	f8c7 32e0 	str.w	r3, [r7, #736]	; 0x2e0
 8000f2c:	f8c7 22e4 	str.w	r2, [r7, #740]	; 0x2e4
 8000f30:	f8d7 33e4 	ldr.w	r3, [r7, #996]	; 0x3e4
 8000f34:	2200      	movs	r2, #0
 8000f36:	f8c7 32d8 	str.w	r3, [r7, #728]	; 0x2d8
 8000f3a:	f8c7 22dc 	str.w	r2, [r7, #732]	; 0x2dc
 8000f3e:	e9d7 45b8 	ldrd	r4, r5, [r7, #736]	; 0x2e0
 8000f42:	462b      	mov	r3, r5
 8000f44:	e9d7 89b6 	ldrd	r8, r9, [r7, #728]	; 0x2d8
 8000f48:	4642      	mov	r2, r8
 8000f4a:	fb02 f203 	mul.w	r2, r2, r3
 8000f4e:	464b      	mov	r3, r9
 8000f50:	4621      	mov	r1, r4
 8000f52:	fb01 f303 	mul.w	r3, r1, r3
 8000f56:	4413      	add	r3, r2
 8000f58:	4622      	mov	r2, r4
 8000f5a:	4641      	mov	r1, r8
 8000f5c:	fba2 1201 	umull	r1, r2, r2, r1
 8000f60:	f8c7 23cc 	str.w	r2, [r7, #972]	; 0x3cc
 8000f64:	460a      	mov	r2, r1
 8000f66:	f8c7 23c8 	str.w	r2, [r7, #968]	; 0x3c8
 8000f6a:	f8d7 23cc 	ldr.w	r2, [r7, #972]	; 0x3cc
 8000f6e:	4413      	add	r3, r2
 8000f70:	f8c7 33cc 	str.w	r3, [r7, #972]	; 0x3cc
 8000f74:	e9d7 12f2 	ldrd	r1, r2, [r7, #968]	; 0x3c8
 8000f78:	460b      	mov	r3, r1
 8000f7a:	18db      	adds	r3, r3, r3
 8000f7c:	663b      	str	r3, [r7, #96]	; 0x60
 8000f7e:	4613      	mov	r3, r2
 8000f80:	eb42 0303 	adc.w	r3, r2, r3
 8000f84:	667b      	str	r3, [r7, #100]	; 0x64
 8000f86:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8000f8a:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8000f8e:	f04f 0300 	mov.w	r3, #0
 8000f92:	f7ff fb89 	bl	80006a8 <__aeabi_uldivmod>
 8000f96:	4602      	mov	r2, r0
 8000f98:	460b      	mov	r3, r1
 8000f9a:	f112 0164 	adds.w	r1, r2, #100	; 0x64
 8000f9e:	f8c7 10b0 	str.w	r1, [r7, #176]	; 0xb0
 8000fa2:	f143 0300 	adc.w	r3, r3, #0
 8000fa6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8000faa:	4b69      	ldr	r3, [pc, #420]	; (8001150 <Set_Random_Motion_Values+0x458>)
 8000fac:	681b      	ldr	r3, [r3, #0]
 8000fae:	461a      	mov	r2, r3
 8000fb0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8000fb4:	4413      	add	r3, r2
 8000fb6:	461a      	mov	r2, r3
 8000fb8:	4b65      	ldr	r3, [pc, #404]	; (8001150 <Set_Random_Motion_Values+0x458>)
 8000fba:	601a      	str	r2, [r3, #0]
    g_axes.AXIS_Y += -(100 + ((uint64_t)rand()*4*cnt)/RAND_MAX);
 8000fbc:	f00b fd76 	bl	800caac <rand>
 8000fc0:	4603      	mov	r3, r0
 8000fc2:	17da      	asrs	r2, r3, #31
 8000fc4:	f8c7 32d0 	str.w	r3, [r7, #720]	; 0x2d0
 8000fc8:	f8c7 22d4 	str.w	r2, [r7, #724]	; 0x2d4
 8000fcc:	f8d7 33e4 	ldr.w	r3, [r7, #996]	; 0x3e4
 8000fd0:	2200      	movs	r2, #0
 8000fd2:	f8c7 32c8 	str.w	r3, [r7, #712]	; 0x2c8
 8000fd6:	f8c7 22cc 	str.w	r2, [r7, #716]	; 0x2cc
 8000fda:	e9d7 45b4 	ldrd	r4, r5, [r7, #720]	; 0x2d0
 8000fde:	462b      	mov	r3, r5
 8000fe0:	e9d7 89b2 	ldrd	r8, r9, [r7, #712]	; 0x2c8
 8000fe4:	4642      	mov	r2, r8
 8000fe6:	fb02 f203 	mul.w	r2, r2, r3
 8000fea:	464b      	mov	r3, r9
 8000fec:	4621      	mov	r1, r4
 8000fee:	fb01 f303 	mul.w	r3, r1, r3
 8000ff2:	4413      	add	r3, r2
 8000ff4:	4622      	mov	r2, r4
 8000ff6:	4641      	mov	r1, r8
 8000ff8:	fba2 1201 	umull	r1, r2, r2, r1
 8000ffc:	f8c7 23c4 	str.w	r2, [r7, #964]	; 0x3c4
 8001000:	460a      	mov	r2, r1
 8001002:	f8c7 23c0 	str.w	r2, [r7, #960]	; 0x3c0
 8001006:	f8d7 23c4 	ldr.w	r2, [r7, #964]	; 0x3c4
 800100a:	4413      	add	r3, r2
 800100c:	f8c7 33c4 	str.w	r3, [r7, #964]	; 0x3c4
 8001010:	f04f 0000 	mov.w	r0, #0
 8001014:	f04f 0100 	mov.w	r1, #0
 8001018:	e9d7 45f0 	ldrd	r4, r5, [r7, #960]	; 0x3c0
 800101c:	462b      	mov	r3, r5
 800101e:	0099      	lsls	r1, r3, #2
 8001020:	4623      	mov	r3, r4
 8001022:	ea41 7193 	orr.w	r1, r1, r3, lsr #30
 8001026:	4623      	mov	r3, r4
 8001028:	0098      	lsls	r0, r3, #2
 800102a:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 800102e:	f04f 0300 	mov.w	r3, #0
 8001032:	f7ff fb39 	bl	80006a8 <__aeabi_uldivmod>
 8001036:	4602      	mov	r2, r0
 8001038:	460b      	mov	r3, r1
 800103a:	f06f 0063 	mvn.w	r0, #99	; 0x63
 800103e:	f04f 31ff 	mov.w	r1, #4294967295
 8001042:	1a80      	subs	r0, r0, r2
 8001044:	f8c7 00a8 	str.w	r0, [r7, #168]	; 0xa8
 8001048:	eb61 0303 	sbc.w	r3, r1, r3
 800104c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8001050:	4b3f      	ldr	r3, [pc, #252]	; (8001150 <Set_Random_Motion_Values+0x458>)
 8001052:	685b      	ldr	r3, [r3, #4]
 8001054:	461a      	mov	r2, r3
 8001056:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800105a:	4413      	add	r3, r2
 800105c:	461a      	mov	r2, r3
 800105e:	4b3c      	ldr	r3, [pc, #240]	; (8001150 <Set_Random_Motion_Values+0x458>)
 8001060:	605a      	str	r2, [r3, #4]
    g_axes.AXIS_Z +=  (100 + ((uint64_t)rand()*6*cnt)/RAND_MAX);
 8001062:	f00b fd23 	bl	800caac <rand>
 8001066:	4603      	mov	r3, r0
 8001068:	17da      	asrs	r2, r3, #31
 800106a:	f8c7 32c0 	str.w	r3, [r7, #704]	; 0x2c0
 800106e:	f8c7 22c4 	str.w	r2, [r7, #708]	; 0x2c4
 8001072:	f8d7 33e4 	ldr.w	r3, [r7, #996]	; 0x3e4
 8001076:	2200      	movs	r2, #0
 8001078:	f8c7 32b8 	str.w	r3, [r7, #696]	; 0x2b8
 800107c:	f8c7 22bc 	str.w	r2, [r7, #700]	; 0x2bc
 8001080:	e9d7 45b0 	ldrd	r4, r5, [r7, #704]	; 0x2c0
 8001084:	462b      	mov	r3, r5
 8001086:	e9d7 89ae 	ldrd	r8, r9, [r7, #696]	; 0x2b8
 800108a:	4642      	mov	r2, r8
 800108c:	fb02 f203 	mul.w	r2, r2, r3
 8001090:	464b      	mov	r3, r9
 8001092:	4621      	mov	r1, r4
 8001094:	fb01 f303 	mul.w	r3, r1, r3
 8001098:	4413      	add	r3, r2
 800109a:	4622      	mov	r2, r4
 800109c:	4641      	mov	r1, r8
 800109e:	fba2 1201 	umull	r1, r2, r2, r1
 80010a2:	f8c7 23bc 	str.w	r2, [r7, #956]	; 0x3bc
 80010a6:	460a      	mov	r2, r1
 80010a8:	f8c7 23b8 	str.w	r2, [r7, #952]	; 0x3b8
 80010ac:	f8d7 23bc 	ldr.w	r2, [r7, #956]	; 0x3bc
 80010b0:	4413      	add	r3, r2
 80010b2:	f8c7 33bc 	str.w	r3, [r7, #956]	; 0x3bc
 80010b6:	e9d7 45ee 	ldrd	r4, r5, [r7, #952]	; 0x3b8
 80010ba:	4622      	mov	r2, r4
 80010bc:	462b      	mov	r3, r5
 80010be:	1891      	adds	r1, r2, r2
 80010c0:	65b9      	str	r1, [r7, #88]	; 0x58
 80010c2:	415b      	adcs	r3, r3
 80010c4:	65fb      	str	r3, [r7, #92]	; 0x5c
 80010c6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80010ca:	4621      	mov	r1, r4
 80010cc:	1851      	adds	r1, r2, r1
 80010ce:	6539      	str	r1, [r7, #80]	; 0x50
 80010d0:	4629      	mov	r1, r5
 80010d2:	eb43 0101 	adc.w	r1, r3, r1
 80010d6:	6579      	str	r1, [r7, #84]	; 0x54
 80010d8:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 80010dc:	460b      	mov	r3, r1
 80010de:	18db      	adds	r3, r3, r3
 80010e0:	64bb      	str	r3, [r7, #72]	; 0x48
 80010e2:	4613      	mov	r3, r2
 80010e4:	eb42 0303 	adc.w	r3, r2, r3
 80010e8:	64fb      	str	r3, [r7, #76]	; 0x4c
 80010ea:	e9d7 3412 	ldrd	r3, r4, [r7, #72]	; 0x48
 80010ee:	4618      	mov	r0, r3
 80010f0:	4621      	mov	r1, r4
 80010f2:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 80010f6:	f04f 0300 	mov.w	r3, #0
 80010fa:	f7ff fad5 	bl	80006a8 <__aeabi_uldivmod>
 80010fe:	4602      	mov	r2, r0
 8001100:	460b      	mov	r3, r1
 8001102:	f112 0164 	adds.w	r1, r2, #100	; 0x64
 8001106:	f8c7 10a0 	str.w	r1, [r7, #160]	; 0xa0
 800110a:	f143 0300 	adc.w	r3, r3, #0
 800110e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8001112:	4b0f      	ldr	r3, [pc, #60]	; (8001150 <Set_Random_Motion_Values+0x458>)
 8001114:	689b      	ldr	r3, [r3, #8]
 8001116:	461a      	mov	r2, r3
 8001118:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800111c:	4413      	add	r3, r2
 800111e:	461a      	mov	r2, r3
 8001120:	4b0b      	ldr	r3, [pc, #44]	; (8001150 <Set_Random_Motion_Values+0x458>)
 8001122:	609a      	str	r2, [r3, #8]
    m_axes.AXIS_X +=  (3  + ((uint64_t)rand()*3*cnt)/RAND_MAX);
 8001124:	f00b fcc2 	bl	800caac <rand>
 8001128:	4603      	mov	r3, r0
 800112a:	17da      	asrs	r2, r3, #31
 800112c:	f8c7 32b0 	str.w	r3, [r7, #688]	; 0x2b0
 8001130:	f8c7 22b4 	str.w	r2, [r7, #692]	; 0x2b4
 8001134:	f8d7 33e4 	ldr.w	r3, [r7, #996]	; 0x3e4
 8001138:	2200      	movs	r2, #0
 800113a:	f8c7 32a8 	str.w	r3, [r7, #680]	; 0x2a8
 800113e:	f8c7 22ac 	str.w	r2, [r7, #684]	; 0x2ac
 8001142:	e9d7 45ac 	ldrd	r4, r5, [r7, #688]	; 0x2b0
 8001146:	462b      	mov	r3, r5
 8001148:	e004      	b.n	8001154 <Set_Random_Motion_Values+0x45c>
 800114a:	bf00      	nop
 800114c:	200001bc 	.word	0x200001bc
 8001150:	200001c8 	.word	0x200001c8
 8001154:	e9d7 89aa 	ldrd	r8, r9, [r7, #680]	; 0x2a8
 8001158:	4642      	mov	r2, r8
 800115a:	fb02 f203 	mul.w	r2, r2, r3
 800115e:	464b      	mov	r3, r9
 8001160:	4621      	mov	r1, r4
 8001162:	fb01 f303 	mul.w	r3, r1, r3
 8001166:	4413      	add	r3, r2
 8001168:	4622      	mov	r2, r4
 800116a:	4641      	mov	r1, r8
 800116c:	fba2 1201 	umull	r1, r2, r2, r1
 8001170:	f8c7 23b4 	str.w	r2, [r7, #948]	; 0x3b4
 8001174:	460a      	mov	r2, r1
 8001176:	f8c7 23b0 	str.w	r2, [r7, #944]	; 0x3b0
 800117a:	f8d7 23b4 	ldr.w	r2, [r7, #948]	; 0x3b4
 800117e:	4413      	add	r3, r2
 8001180:	f8c7 33b4 	str.w	r3, [r7, #948]	; 0x3b4
 8001184:	e9d7 45ec 	ldrd	r4, r5, [r7, #944]	; 0x3b0
 8001188:	4622      	mov	r2, r4
 800118a:	462b      	mov	r3, r5
 800118c:	1891      	adds	r1, r2, r2
 800118e:	6439      	str	r1, [r7, #64]	; 0x40
 8001190:	415b      	adcs	r3, r3
 8001192:	647b      	str	r3, [r7, #68]	; 0x44
 8001194:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8001198:	4621      	mov	r1, r4
 800119a:	1851      	adds	r1, r2, r1
 800119c:	f8c7 12a0 	str.w	r1, [r7, #672]	; 0x2a0
 80011a0:	4629      	mov	r1, r5
 80011a2:	eb43 0101 	adc.w	r1, r3, r1
 80011a6:	f8c7 12a4 	str.w	r1, [r7, #676]	; 0x2a4
 80011aa:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 80011ae:	f04f 0300 	mov.w	r3, #0
 80011b2:	e9d7 01a8 	ldrd	r0, r1, [r7, #672]	; 0x2a0
 80011b6:	f7ff fa77 	bl	80006a8 <__aeabi_uldivmod>
 80011ba:	4602      	mov	r2, r0
 80011bc:	460b      	mov	r3, r1
 80011be:	1cd1      	adds	r1, r2, #3
 80011c0:	f8c7 1098 	str.w	r1, [r7, #152]	; 0x98
 80011c4:	f143 0300 	adc.w	r3, r3, #0
 80011c8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80011cc:	4be1      	ldr	r3, [pc, #900]	; (8001554 <Set_Random_Motion_Values+0x85c>)
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	461a      	mov	r2, r3
 80011d2:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80011d6:	4413      	add	r3, r2
 80011d8:	461a      	mov	r2, r3
 80011da:	4bde      	ldr	r3, [pc, #888]	; (8001554 <Set_Random_Motion_Values+0x85c>)
 80011dc:	601a      	str	r2, [r3, #0]
    m_axes.AXIS_Y += -(3  + ((uint64_t)rand()*4*cnt)/RAND_MAX);
 80011de:	f00b fc65 	bl	800caac <rand>
 80011e2:	4603      	mov	r3, r0
 80011e4:	17da      	asrs	r2, r3, #31
 80011e6:	f8c7 3298 	str.w	r3, [r7, #664]	; 0x298
 80011ea:	f8c7 229c 	str.w	r2, [r7, #668]	; 0x29c
 80011ee:	f8d7 33e4 	ldr.w	r3, [r7, #996]	; 0x3e4
 80011f2:	2200      	movs	r2, #0
 80011f4:	f8c7 3290 	str.w	r3, [r7, #656]	; 0x290
 80011f8:	f8c7 2294 	str.w	r2, [r7, #660]	; 0x294
 80011fc:	e9d7 45a6 	ldrd	r4, r5, [r7, #664]	; 0x298
 8001200:	462b      	mov	r3, r5
 8001202:	e9d7 89a4 	ldrd	r8, r9, [r7, #656]	; 0x290
 8001206:	4642      	mov	r2, r8
 8001208:	fb02 f203 	mul.w	r2, r2, r3
 800120c:	464b      	mov	r3, r9
 800120e:	4621      	mov	r1, r4
 8001210:	fb01 f303 	mul.w	r3, r1, r3
 8001214:	4413      	add	r3, r2
 8001216:	4622      	mov	r2, r4
 8001218:	4641      	mov	r1, r8
 800121a:	fba2 1201 	umull	r1, r2, r2, r1
 800121e:	f8c7 23ac 	str.w	r2, [r7, #940]	; 0x3ac
 8001222:	460a      	mov	r2, r1
 8001224:	f8c7 23a8 	str.w	r2, [r7, #936]	; 0x3a8
 8001228:	f8d7 23ac 	ldr.w	r2, [r7, #940]	; 0x3ac
 800122c:	4413      	add	r3, r2
 800122e:	f8c7 33ac 	str.w	r3, [r7, #940]	; 0x3ac
 8001232:	f04f 0000 	mov.w	r0, #0
 8001236:	f04f 0100 	mov.w	r1, #0
 800123a:	e9d7 45ea 	ldrd	r4, r5, [r7, #936]	; 0x3a8
 800123e:	462b      	mov	r3, r5
 8001240:	0099      	lsls	r1, r3, #2
 8001242:	4623      	mov	r3, r4
 8001244:	ea41 7193 	orr.w	r1, r1, r3, lsr #30
 8001248:	4623      	mov	r3, r4
 800124a:	0098      	lsls	r0, r3, #2
 800124c:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8001250:	f04f 0300 	mov.w	r3, #0
 8001254:	f7ff fa28 	bl	80006a8 <__aeabi_uldivmod>
 8001258:	4602      	mov	r2, r0
 800125a:	460b      	mov	r3, r1
 800125c:	f06f 0002 	mvn.w	r0, #2
 8001260:	f04f 31ff 	mov.w	r1, #4294967295
 8001264:	1a80      	subs	r0, r0, r2
 8001266:	f8c7 0090 	str.w	r0, [r7, #144]	; 0x90
 800126a:	eb61 0303 	sbc.w	r3, r1, r3
 800126e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8001272:	4bb8      	ldr	r3, [pc, #736]	; (8001554 <Set_Random_Motion_Values+0x85c>)
 8001274:	685b      	ldr	r3, [r3, #4]
 8001276:	461a      	mov	r2, r3
 8001278:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800127c:	4413      	add	r3, r2
 800127e:	461a      	mov	r2, r3
 8001280:	4bb4      	ldr	r3, [pc, #720]	; (8001554 <Set_Random_Motion_Values+0x85c>)
 8001282:	605a      	str	r2, [r3, #4]
    m_axes.AXIS_Z +=  (3  + ((uint64_t)rand()*5*cnt)/RAND_MAX);
 8001284:	f00b fc12 	bl	800caac <rand>
 8001288:	4603      	mov	r3, r0
 800128a:	17da      	asrs	r2, r3, #31
 800128c:	f8c7 3288 	str.w	r3, [r7, #648]	; 0x288
 8001290:	f8c7 228c 	str.w	r2, [r7, #652]	; 0x28c
 8001294:	f8d7 33e4 	ldr.w	r3, [r7, #996]	; 0x3e4
 8001298:	2200      	movs	r2, #0
 800129a:	f8c7 3280 	str.w	r3, [r7, #640]	; 0x280
 800129e:	f8c7 2284 	str.w	r2, [r7, #644]	; 0x284
 80012a2:	e9d7 45a2 	ldrd	r4, r5, [r7, #648]	; 0x288
 80012a6:	462b      	mov	r3, r5
 80012a8:	e9d7 89a0 	ldrd	r8, r9, [r7, #640]	; 0x280
 80012ac:	4642      	mov	r2, r8
 80012ae:	fb02 f203 	mul.w	r2, r2, r3
 80012b2:	464b      	mov	r3, r9
 80012b4:	4621      	mov	r1, r4
 80012b6:	fb01 f303 	mul.w	r3, r1, r3
 80012ba:	4413      	add	r3, r2
 80012bc:	4622      	mov	r2, r4
 80012be:	4641      	mov	r1, r8
 80012c0:	fba2 1201 	umull	r1, r2, r2, r1
 80012c4:	f8c7 23a4 	str.w	r2, [r7, #932]	; 0x3a4
 80012c8:	460a      	mov	r2, r1
 80012ca:	f8c7 23a0 	str.w	r2, [r7, #928]	; 0x3a0
 80012ce:	f8d7 23a4 	ldr.w	r2, [r7, #932]	; 0x3a4
 80012d2:	4413      	add	r3, r2
 80012d4:	f8c7 33a4 	str.w	r3, [r7, #932]	; 0x3a4
 80012d8:	e9d7 45e8 	ldrd	r4, r5, [r7, #928]	; 0x3a0
 80012dc:	4622      	mov	r2, r4
 80012de:	462b      	mov	r3, r5
 80012e0:	f04f 0000 	mov.w	r0, #0
 80012e4:	f04f 0100 	mov.w	r1, #0
 80012e8:	0099      	lsls	r1, r3, #2
 80012ea:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 80012ee:	0090      	lsls	r0, r2, #2
 80012f0:	4602      	mov	r2, r0
 80012f2:	460b      	mov	r3, r1
 80012f4:	4621      	mov	r1, r4
 80012f6:	1851      	adds	r1, r2, r1
 80012f8:	f8c7 1278 	str.w	r1, [r7, #632]	; 0x278
 80012fc:	4629      	mov	r1, r5
 80012fe:	eb43 0101 	adc.w	r1, r3, r1
 8001302:	f8c7 127c 	str.w	r1, [r7, #636]	; 0x27c
 8001306:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 800130a:	f04f 0300 	mov.w	r3, #0
 800130e:	e9d7 019e 	ldrd	r0, r1, [r7, #632]	; 0x278
 8001312:	f7ff f9c9 	bl	80006a8 <__aeabi_uldivmod>
 8001316:	4602      	mov	r2, r0
 8001318:	460b      	mov	r3, r1
 800131a:	1cd1      	adds	r1, r2, #3
 800131c:	f8c7 1088 	str.w	r1, [r7, #136]	; 0x88
 8001320:	f143 0300 	adc.w	r3, r3, #0
 8001324:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8001328:	4b8a      	ldr	r3, [pc, #552]	; (8001554 <Set_Random_Motion_Values+0x85c>)
 800132a:	689b      	ldr	r3, [r3, #8]
 800132c:	461a      	mov	r2, r3
 800132e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001332:	4413      	add	r3, r2
 8001334:	461a      	mov	r2, r3
 8001336:	4b87      	ldr	r3, [pc, #540]	; (8001554 <Set_Random_Motion_Values+0x85c>)
 8001338:	609a      	str	r2, [r3, #8]

    q_axes.AXIS_X -= (100  + ((uint64_t)rand()*3*cnt)/RAND_MAX);
 800133a:	f00b fbb7 	bl	800caac <rand>
 800133e:	4603      	mov	r3, r0
 8001340:	17da      	asrs	r2, r3, #31
 8001342:	f8c7 3270 	str.w	r3, [r7, #624]	; 0x270
 8001346:	f8c7 2274 	str.w	r2, [r7, #628]	; 0x274
 800134a:	f8d7 33e4 	ldr.w	r3, [r7, #996]	; 0x3e4
 800134e:	2200      	movs	r2, #0
 8001350:	f8c7 3268 	str.w	r3, [r7, #616]	; 0x268
 8001354:	f8c7 226c 	str.w	r2, [r7, #620]	; 0x26c
 8001358:	e9d7 459c 	ldrd	r4, r5, [r7, #624]	; 0x270
 800135c:	462b      	mov	r3, r5
 800135e:	e9d7 899a 	ldrd	r8, r9, [r7, #616]	; 0x268
 8001362:	4642      	mov	r2, r8
 8001364:	fb02 f203 	mul.w	r2, r2, r3
 8001368:	464b      	mov	r3, r9
 800136a:	4621      	mov	r1, r4
 800136c:	fb01 f303 	mul.w	r3, r1, r3
 8001370:	4413      	add	r3, r2
 8001372:	4622      	mov	r2, r4
 8001374:	4641      	mov	r1, r8
 8001376:	fba2 1201 	umull	r1, r2, r2, r1
 800137a:	f8c7 239c 	str.w	r2, [r7, #924]	; 0x39c
 800137e:	460a      	mov	r2, r1
 8001380:	f8c7 2398 	str.w	r2, [r7, #920]	; 0x398
 8001384:	f8d7 239c 	ldr.w	r2, [r7, #924]	; 0x39c
 8001388:	4413      	add	r3, r2
 800138a:	f8c7 339c 	str.w	r3, [r7, #924]	; 0x39c
 800138e:	e9d7 45e6 	ldrd	r4, r5, [r7, #920]	; 0x398
 8001392:	4622      	mov	r2, r4
 8001394:	462b      	mov	r3, r5
 8001396:	1891      	adds	r1, r2, r2
 8001398:	63b9      	str	r1, [r7, #56]	; 0x38
 800139a:	415b      	adcs	r3, r3
 800139c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800139e:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80013a2:	4621      	mov	r1, r4
 80013a4:	1851      	adds	r1, r2, r1
 80013a6:	f8c7 1260 	str.w	r1, [r7, #608]	; 0x260
 80013aa:	4629      	mov	r1, r5
 80013ac:	eb43 0101 	adc.w	r1, r3, r1
 80013b0:	f8c7 1264 	str.w	r1, [r7, #612]	; 0x264
 80013b4:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 80013b8:	f04f 0300 	mov.w	r3, #0
 80013bc:	e9d7 0198 	ldrd	r0, r1, [r7, #608]	; 0x260
 80013c0:	f7ff f972 	bl	80006a8 <__aeabi_uldivmod>
 80013c4:	4602      	mov	r2, r0
 80013c6:	460b      	mov	r3, r1
 80013c8:	f112 0164 	adds.w	r1, r2, #100	; 0x64
 80013cc:	f8c7 1080 	str.w	r1, [r7, #128]	; 0x80
 80013d0:	f143 0300 	adc.w	r3, r3, #0
 80013d4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80013d8:	4b5f      	ldr	r3, [pc, #380]	; (8001558 <Set_Random_Motion_Values+0x860>)
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	461a      	mov	r2, r3
 80013de:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80013e2:	1ad3      	subs	r3, r2, r3
 80013e4:	461a      	mov	r2, r3
 80013e6:	4b5c      	ldr	r3, [pc, #368]	; (8001558 <Set_Random_Motion_Values+0x860>)
 80013e8:	601a      	str	r2, [r3, #0]
    q_axes.AXIS_Y += (100  + ((uint64_t)rand()*5*cnt)/RAND_MAX);
 80013ea:	f00b fb5f 	bl	800caac <rand>
 80013ee:	4603      	mov	r3, r0
 80013f0:	17da      	asrs	r2, r3, #31
 80013f2:	f8c7 3258 	str.w	r3, [r7, #600]	; 0x258
 80013f6:	f8c7 225c 	str.w	r2, [r7, #604]	; 0x25c
 80013fa:	f8d7 33e4 	ldr.w	r3, [r7, #996]	; 0x3e4
 80013fe:	2200      	movs	r2, #0
 8001400:	f8c7 3250 	str.w	r3, [r7, #592]	; 0x250
 8001404:	f8c7 2254 	str.w	r2, [r7, #596]	; 0x254
 8001408:	e9d7 4596 	ldrd	r4, r5, [r7, #600]	; 0x258
 800140c:	462b      	mov	r3, r5
 800140e:	e9d7 8994 	ldrd	r8, r9, [r7, #592]	; 0x250
 8001412:	4642      	mov	r2, r8
 8001414:	fb02 f203 	mul.w	r2, r2, r3
 8001418:	464b      	mov	r3, r9
 800141a:	4621      	mov	r1, r4
 800141c:	fb01 f303 	mul.w	r3, r1, r3
 8001420:	4413      	add	r3, r2
 8001422:	4622      	mov	r2, r4
 8001424:	4641      	mov	r1, r8
 8001426:	fba2 1201 	umull	r1, r2, r2, r1
 800142a:	f8c7 2394 	str.w	r2, [r7, #916]	; 0x394
 800142e:	460a      	mov	r2, r1
 8001430:	f8c7 2390 	str.w	r2, [r7, #912]	; 0x390
 8001434:	f8d7 2394 	ldr.w	r2, [r7, #916]	; 0x394
 8001438:	4413      	add	r3, r2
 800143a:	f8c7 3394 	str.w	r3, [r7, #916]	; 0x394
 800143e:	e9d7 45e4 	ldrd	r4, r5, [r7, #912]	; 0x390
 8001442:	4622      	mov	r2, r4
 8001444:	462b      	mov	r3, r5
 8001446:	f04f 0000 	mov.w	r0, #0
 800144a:	f04f 0100 	mov.w	r1, #0
 800144e:	0099      	lsls	r1, r3, #2
 8001450:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 8001454:	0090      	lsls	r0, r2, #2
 8001456:	4602      	mov	r2, r0
 8001458:	460b      	mov	r3, r1
 800145a:	4621      	mov	r1, r4
 800145c:	1851      	adds	r1, r2, r1
 800145e:	f8c7 1248 	str.w	r1, [r7, #584]	; 0x248
 8001462:	4629      	mov	r1, r5
 8001464:	eb43 0101 	adc.w	r1, r3, r1
 8001468:	f8c7 124c 	str.w	r1, [r7, #588]	; 0x24c
 800146c:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8001470:	f04f 0300 	mov.w	r3, #0
 8001474:	e9d7 0192 	ldrd	r0, r1, [r7, #584]	; 0x248
 8001478:	f7ff f916 	bl	80006a8 <__aeabi_uldivmod>
 800147c:	4602      	mov	r2, r0
 800147e:	460b      	mov	r3, r1
 8001480:	f112 0164 	adds.w	r1, r2, #100	; 0x64
 8001484:	67b9      	str	r1, [r7, #120]	; 0x78
 8001486:	f143 0300 	adc.w	r3, r3, #0
 800148a:	67fb      	str	r3, [r7, #124]	; 0x7c
 800148c:	4b32      	ldr	r3, [pc, #200]	; (8001558 <Set_Random_Motion_Values+0x860>)
 800148e:	685b      	ldr	r3, [r3, #4]
 8001490:	461a      	mov	r2, r3
 8001492:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001494:	4413      	add	r3, r2
 8001496:	461a      	mov	r2, r3
 8001498:	4b2f      	ldr	r3, [pc, #188]	; (8001558 <Set_Random_Motion_Values+0x860>)
 800149a:	605a      	str	r2, [r3, #4]
    q_axes.AXIS_Z -= (100  + ((uint64_t)rand()*7*cnt)/RAND_MAX);
 800149c:	f00b fb06 	bl	800caac <rand>
 80014a0:	4603      	mov	r3, r0
 80014a2:	17da      	asrs	r2, r3, #31
 80014a4:	f8c7 3240 	str.w	r3, [r7, #576]	; 0x240
 80014a8:	f8c7 2244 	str.w	r2, [r7, #580]	; 0x244
 80014ac:	f8d7 33e4 	ldr.w	r3, [r7, #996]	; 0x3e4
 80014b0:	2200      	movs	r2, #0
 80014b2:	f8c7 3238 	str.w	r3, [r7, #568]	; 0x238
 80014b6:	f8c7 223c 	str.w	r2, [r7, #572]	; 0x23c
 80014ba:	e9d7 4590 	ldrd	r4, r5, [r7, #576]	; 0x240
 80014be:	462b      	mov	r3, r5
 80014c0:	e9d7 898e 	ldrd	r8, r9, [r7, #568]	; 0x238
 80014c4:	4642      	mov	r2, r8
 80014c6:	fb02 f203 	mul.w	r2, r2, r3
 80014ca:	464b      	mov	r3, r9
 80014cc:	4621      	mov	r1, r4
 80014ce:	fb01 f303 	mul.w	r3, r1, r3
 80014d2:	4413      	add	r3, r2
 80014d4:	4622      	mov	r2, r4
 80014d6:	4641      	mov	r1, r8
 80014d8:	fba2 1201 	umull	r1, r2, r2, r1
 80014dc:	f8c7 238c 	str.w	r2, [r7, #908]	; 0x38c
 80014e0:	460a      	mov	r2, r1
 80014e2:	f8c7 2388 	str.w	r2, [r7, #904]	; 0x388
 80014e6:	f8d7 238c 	ldr.w	r2, [r7, #908]	; 0x38c
 80014ea:	4413      	add	r3, r2
 80014ec:	f8c7 338c 	str.w	r3, [r7, #908]	; 0x38c
 80014f0:	e9d7 45e2 	ldrd	r4, r5, [r7, #904]	; 0x388
 80014f4:	4622      	mov	r2, r4
 80014f6:	462b      	mov	r3, r5
 80014f8:	f04f 0000 	mov.w	r0, #0
 80014fc:	f04f 0100 	mov.w	r1, #0
 8001500:	00d9      	lsls	r1, r3, #3
 8001502:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001506:	00d0      	lsls	r0, r2, #3
 8001508:	4602      	mov	r2, r0
 800150a:	460b      	mov	r3, r1
 800150c:	4621      	mov	r1, r4
 800150e:	1a51      	subs	r1, r2, r1
 8001510:	f8c7 1230 	str.w	r1, [r7, #560]	; 0x230
 8001514:	4629      	mov	r1, r5
 8001516:	eb63 0301 	sbc.w	r3, r3, r1
 800151a:	f8c7 3234 	str.w	r3, [r7, #564]	; 0x234
 800151e:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8001522:	f04f 0300 	mov.w	r3, #0
 8001526:	e9d7 018c 	ldrd	r0, r1, [r7, #560]	; 0x230
 800152a:	f7ff f8bd 	bl	80006a8 <__aeabi_uldivmod>
 800152e:	4602      	mov	r2, r0
 8001530:	460b      	mov	r3, r1
 8001532:	f112 0164 	adds.w	r1, r2, #100	; 0x64
 8001536:	6739      	str	r1, [r7, #112]	; 0x70
 8001538:	f143 0300 	adc.w	r3, r3, #0
 800153c:	677b      	str	r3, [r7, #116]	; 0x74
 800153e:	4b06      	ldr	r3, [pc, #24]	; (8001558 <Set_Random_Motion_Values+0x860>)
 8001540:	689b      	ldr	r3, [r3, #8]
 8001542:	461a      	mov	r2, r3
 8001544:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001546:	1ad3      	subs	r3, r2, r3
 8001548:	461a      	mov	r2, r3
 800154a:	4b03      	ldr	r3, [pc, #12]	; (8001558 <Set_Random_Motion_Values+0x860>)
 800154c:	609a      	str	r2, [r3, #8]
    q_axes.AXIS_X += (200 + ((uint64_t)rand()*7*cnt)/RAND_MAX);
    q_axes.AXIS_Y -= (150 + ((uint64_t)rand()*3*cnt)/RAND_MAX);
    q_axes.AXIS_Z += (10  + ((uint64_t)rand()*5*cnt)/RAND_MAX);
  }

}
 800154e:	f000 bc37 	b.w	8001dc0 <Set_Random_Motion_Values+0x10c8>
 8001552:	bf00      	nop
 8001554:	200001d4 	.word	0x200001d4
 8001558:	200001e0 	.word	0x200001e0
    x_axes.AXIS_X += -(10  + ((uint64_t)rand()*3*cnt)/RAND_MAX);
 800155c:	f00b faa6 	bl	800caac <rand>
 8001560:	4603      	mov	r3, r0
 8001562:	17da      	asrs	r2, r3, #31
 8001564:	f8c7 3228 	str.w	r3, [r7, #552]	; 0x228
 8001568:	f8c7 222c 	str.w	r2, [r7, #556]	; 0x22c
 800156c:	f8d7 33e4 	ldr.w	r3, [r7, #996]	; 0x3e4
 8001570:	2200      	movs	r2, #0
 8001572:	469a      	mov	sl, r3
 8001574:	4693      	mov	fp, r2
 8001576:	e9d7 018a 	ldrd	r0, r1, [r7, #552]	; 0x228
 800157a:	460b      	mov	r3, r1
 800157c:	fb0a f203 	mul.w	r2, sl, r3
 8001580:	4603      	mov	r3, r0
 8001582:	fb03 f30b 	mul.w	r3, r3, fp
 8001586:	4413      	add	r3, r2
 8001588:	4602      	mov	r2, r0
 800158a:	fba2 450a 	umull	r4, r5, r2, sl
 800158e:	442b      	add	r3, r5
 8001590:	461d      	mov	r5, r3
 8001592:	4622      	mov	r2, r4
 8001594:	462b      	mov	r3, r5
 8001596:	1891      	adds	r1, r2, r2
 8001598:	6339      	str	r1, [r7, #48]	; 0x30
 800159a:	415b      	adcs	r3, r3
 800159c:	637b      	str	r3, [r7, #52]	; 0x34
 800159e:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80015a2:	1911      	adds	r1, r2, r4
 80015a4:	f8c7 1220 	str.w	r1, [r7, #544]	; 0x220
 80015a8:	416b      	adcs	r3, r5
 80015aa:	f8c7 3224 	str.w	r3, [r7, #548]	; 0x224
 80015ae:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 80015b2:	f04f 0300 	mov.w	r3, #0
 80015b6:	e9d7 0188 	ldrd	r0, r1, [r7, #544]	; 0x220
 80015ba:	f7ff f875 	bl	80006a8 <__aeabi_uldivmod>
 80015be:	4602      	mov	r2, r0
 80015c0:	460b      	mov	r3, r1
 80015c2:	f06f 0009 	mvn.w	r0, #9
 80015c6:	f04f 31ff 	mov.w	r1, #4294967295
 80015ca:	1a80      	subs	r0, r0, r2
 80015cc:	f8c7 0128 	str.w	r0, [r7, #296]	; 0x128
 80015d0:	eb61 0303 	sbc.w	r3, r1, r3
 80015d4:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 80015d8:	4beb      	ldr	r3, [pc, #940]	; (8001988 <Set_Random_Motion_Values+0xc90>)
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	461a      	mov	r2, r3
 80015de:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80015e2:	4413      	add	r3, r2
 80015e4:	461a      	mov	r2, r3
 80015e6:	4be8      	ldr	r3, [pc, #928]	; (8001988 <Set_Random_Motion_Values+0xc90>)
 80015e8:	601a      	str	r2, [r3, #0]
    x_axes.AXIS_Y +=  (10  + ((uint64_t)rand()*5*cnt)/RAND_MAX);
 80015ea:	f00b fa5f 	bl	800caac <rand>
 80015ee:	4603      	mov	r3, r0
 80015f0:	17da      	asrs	r2, r3, #31
 80015f2:	f8c7 3218 	str.w	r3, [r7, #536]	; 0x218
 80015f6:	f8c7 221c 	str.w	r2, [r7, #540]	; 0x21c
 80015fa:	f8d7 33e4 	ldr.w	r3, [r7, #996]	; 0x3e4
 80015fe:	2200      	movs	r2, #0
 8001600:	f8c7 3210 	str.w	r3, [r7, #528]	; 0x210
 8001604:	f8c7 2214 	str.w	r2, [r7, #532]	; 0x214
 8001608:	e9d7 4586 	ldrd	r4, r5, [r7, #536]	; 0x218
 800160c:	462b      	mov	r3, r5
 800160e:	e9d7 8984 	ldrd	r8, r9, [r7, #528]	; 0x210
 8001612:	4642      	mov	r2, r8
 8001614:	fb02 f203 	mul.w	r2, r2, r3
 8001618:	464b      	mov	r3, r9
 800161a:	4621      	mov	r1, r4
 800161c:	fb01 f303 	mul.w	r3, r1, r3
 8001620:	4413      	add	r3, r2
 8001622:	4622      	mov	r2, r4
 8001624:	4641      	mov	r1, r8
 8001626:	fba2 1201 	umull	r1, r2, r2, r1
 800162a:	f8c7 2384 	str.w	r2, [r7, #900]	; 0x384
 800162e:	460a      	mov	r2, r1
 8001630:	f8c7 2380 	str.w	r2, [r7, #896]	; 0x380
 8001634:	f8d7 2384 	ldr.w	r2, [r7, #900]	; 0x384
 8001638:	4413      	add	r3, r2
 800163a:	f8c7 3384 	str.w	r3, [r7, #900]	; 0x384
 800163e:	e9d7 45e0 	ldrd	r4, r5, [r7, #896]	; 0x380
 8001642:	4622      	mov	r2, r4
 8001644:	462b      	mov	r3, r5
 8001646:	f04f 0000 	mov.w	r0, #0
 800164a:	f04f 0100 	mov.w	r1, #0
 800164e:	0099      	lsls	r1, r3, #2
 8001650:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 8001654:	0090      	lsls	r0, r2, #2
 8001656:	4602      	mov	r2, r0
 8001658:	460b      	mov	r3, r1
 800165a:	4621      	mov	r1, r4
 800165c:	1851      	adds	r1, r2, r1
 800165e:	f8c7 1208 	str.w	r1, [r7, #520]	; 0x208
 8001662:	4629      	mov	r1, r5
 8001664:	eb43 0101 	adc.w	r1, r3, r1
 8001668:	f8c7 120c 	str.w	r1, [r7, #524]	; 0x20c
 800166c:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8001670:	f04f 0300 	mov.w	r3, #0
 8001674:	e9d7 0182 	ldrd	r0, r1, [r7, #520]	; 0x208
 8001678:	f7ff f816 	bl	80006a8 <__aeabi_uldivmod>
 800167c:	4602      	mov	r2, r0
 800167e:	460b      	mov	r3, r1
 8001680:	f112 010a 	adds.w	r1, r2, #10
 8001684:	f8c7 1120 	str.w	r1, [r7, #288]	; 0x120
 8001688:	f143 0300 	adc.w	r3, r3, #0
 800168c:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8001690:	4bbd      	ldr	r3, [pc, #756]	; (8001988 <Set_Random_Motion_Values+0xc90>)
 8001692:	685b      	ldr	r3, [r3, #4]
 8001694:	461a      	mov	r2, r3
 8001696:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800169a:	4413      	add	r3, r2
 800169c:	461a      	mov	r2, r3
 800169e:	4bba      	ldr	r3, [pc, #744]	; (8001988 <Set_Random_Motion_Values+0xc90>)
 80016a0:	605a      	str	r2, [r3, #4]
    x_axes.AXIS_Z += -(10  + ((uint64_t)rand()*7*cnt)/RAND_MAX);
 80016a2:	f00b fa03 	bl	800caac <rand>
 80016a6:	4603      	mov	r3, r0
 80016a8:	17da      	asrs	r2, r3, #31
 80016aa:	f8c7 3200 	str.w	r3, [r7, #512]	; 0x200
 80016ae:	f8c7 2204 	str.w	r2, [r7, #516]	; 0x204
 80016b2:	f8d7 33e4 	ldr.w	r3, [r7, #996]	; 0x3e4
 80016b6:	2200      	movs	r2, #0
 80016b8:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
 80016bc:	f8c7 21fc 	str.w	r2, [r7, #508]	; 0x1fc
 80016c0:	e9d7 4580 	ldrd	r4, r5, [r7, #512]	; 0x200
 80016c4:	462b      	mov	r3, r5
 80016c6:	e9d7 897e 	ldrd	r8, r9, [r7, #504]	; 0x1f8
 80016ca:	4642      	mov	r2, r8
 80016cc:	fb02 f203 	mul.w	r2, r2, r3
 80016d0:	464b      	mov	r3, r9
 80016d2:	4621      	mov	r1, r4
 80016d4:	fb01 f303 	mul.w	r3, r1, r3
 80016d8:	4413      	add	r3, r2
 80016da:	4622      	mov	r2, r4
 80016dc:	4641      	mov	r1, r8
 80016de:	fba2 1201 	umull	r1, r2, r2, r1
 80016e2:	f8c7 237c 	str.w	r2, [r7, #892]	; 0x37c
 80016e6:	460a      	mov	r2, r1
 80016e8:	f8c7 2378 	str.w	r2, [r7, #888]	; 0x378
 80016ec:	f8d7 237c 	ldr.w	r2, [r7, #892]	; 0x37c
 80016f0:	4413      	add	r3, r2
 80016f2:	f8c7 337c 	str.w	r3, [r7, #892]	; 0x37c
 80016f6:	e9d7 45de 	ldrd	r4, r5, [r7, #888]	; 0x378
 80016fa:	4622      	mov	r2, r4
 80016fc:	462b      	mov	r3, r5
 80016fe:	f04f 0000 	mov.w	r0, #0
 8001702:	f04f 0100 	mov.w	r1, #0
 8001706:	00d9      	lsls	r1, r3, #3
 8001708:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800170c:	00d0      	lsls	r0, r2, #3
 800170e:	4602      	mov	r2, r0
 8001710:	460b      	mov	r3, r1
 8001712:	4621      	mov	r1, r4
 8001714:	1a51      	subs	r1, r2, r1
 8001716:	f8c7 11f0 	str.w	r1, [r7, #496]	; 0x1f0
 800171a:	4629      	mov	r1, r5
 800171c:	eb63 0301 	sbc.w	r3, r3, r1
 8001720:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
 8001724:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8001728:	f04f 0300 	mov.w	r3, #0
 800172c:	e9d7 017c 	ldrd	r0, r1, [r7, #496]	; 0x1f0
 8001730:	f7fe ffba 	bl	80006a8 <__aeabi_uldivmod>
 8001734:	4602      	mov	r2, r0
 8001736:	460b      	mov	r3, r1
 8001738:	f06f 0009 	mvn.w	r0, #9
 800173c:	f04f 31ff 	mov.w	r1, #4294967295
 8001740:	1a80      	subs	r0, r0, r2
 8001742:	f8c7 0118 	str.w	r0, [r7, #280]	; 0x118
 8001746:	eb61 0303 	sbc.w	r3, r1, r3
 800174a:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 800174e:	4b8e      	ldr	r3, [pc, #568]	; (8001988 <Set_Random_Motion_Values+0xc90>)
 8001750:	689b      	ldr	r3, [r3, #8]
 8001752:	461a      	mov	r2, r3
 8001754:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8001758:	4413      	add	r3, r2
 800175a:	461a      	mov	r2, r3
 800175c:	4b8a      	ldr	r3, [pc, #552]	; (8001988 <Set_Random_Motion_Values+0xc90>)
 800175e:	609a      	str	r2, [r3, #8]
    g_axes.AXIS_X += -(100 + ((uint64_t)rand()*2*cnt)/RAND_MAX);
 8001760:	f00b f9a4 	bl	800caac <rand>
 8001764:	4603      	mov	r3, r0
 8001766:	17da      	asrs	r2, r3, #31
 8001768:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 800176c:	f8c7 21ec 	str.w	r2, [r7, #492]	; 0x1ec
 8001770:	f8d7 33e4 	ldr.w	r3, [r7, #996]	; 0x3e4
 8001774:	2200      	movs	r2, #0
 8001776:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 800177a:	f8c7 21e4 	str.w	r2, [r7, #484]	; 0x1e4
 800177e:	e9d7 457a 	ldrd	r4, r5, [r7, #488]	; 0x1e8
 8001782:	462b      	mov	r3, r5
 8001784:	e9d7 8978 	ldrd	r8, r9, [r7, #480]	; 0x1e0
 8001788:	4642      	mov	r2, r8
 800178a:	fb02 f203 	mul.w	r2, r2, r3
 800178e:	464b      	mov	r3, r9
 8001790:	4621      	mov	r1, r4
 8001792:	fb01 f303 	mul.w	r3, r1, r3
 8001796:	4413      	add	r3, r2
 8001798:	4622      	mov	r2, r4
 800179a:	4641      	mov	r1, r8
 800179c:	fba2 1201 	umull	r1, r2, r2, r1
 80017a0:	f8c7 2374 	str.w	r2, [r7, #884]	; 0x374
 80017a4:	460a      	mov	r2, r1
 80017a6:	f8c7 2370 	str.w	r2, [r7, #880]	; 0x370
 80017aa:	f8d7 2374 	ldr.w	r2, [r7, #884]	; 0x374
 80017ae:	4413      	add	r3, r2
 80017b0:	f8c7 3374 	str.w	r3, [r7, #884]	; 0x374
 80017b4:	e9d7 12dc 	ldrd	r1, r2, [r7, #880]	; 0x370
 80017b8:	460b      	mov	r3, r1
 80017ba:	18db      	adds	r3, r3, r3
 80017bc:	62bb      	str	r3, [r7, #40]	; 0x28
 80017be:	4613      	mov	r3, r2
 80017c0:	eb42 0303 	adc.w	r3, r2, r3
 80017c4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80017c6:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80017ca:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 80017ce:	f04f 0300 	mov.w	r3, #0
 80017d2:	f7fe ff69 	bl	80006a8 <__aeabi_uldivmod>
 80017d6:	4602      	mov	r2, r0
 80017d8:	460b      	mov	r3, r1
 80017da:	f06f 0063 	mvn.w	r0, #99	; 0x63
 80017de:	f04f 31ff 	mov.w	r1, #4294967295
 80017e2:	1a80      	subs	r0, r0, r2
 80017e4:	f8c7 0110 	str.w	r0, [r7, #272]	; 0x110
 80017e8:	eb61 0303 	sbc.w	r3, r1, r3
 80017ec:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 80017f0:	4b66      	ldr	r3, [pc, #408]	; (800198c <Set_Random_Motion_Values+0xc94>)
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	461a      	mov	r2, r3
 80017f6:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80017fa:	4413      	add	r3, r2
 80017fc:	461a      	mov	r2, r3
 80017fe:	4b63      	ldr	r3, [pc, #396]	; (800198c <Set_Random_Motion_Values+0xc94>)
 8001800:	601a      	str	r2, [r3, #0]
    g_axes.AXIS_Y +=  (100 + ((uint64_t)rand()*4*cnt)/RAND_MAX);
 8001802:	f00b f953 	bl	800caac <rand>
 8001806:	4603      	mov	r3, r0
 8001808:	17da      	asrs	r2, r3, #31
 800180a:	f8c7 31d8 	str.w	r3, [r7, #472]	; 0x1d8
 800180e:	f8c7 21dc 	str.w	r2, [r7, #476]	; 0x1dc
 8001812:	f8d7 33e4 	ldr.w	r3, [r7, #996]	; 0x3e4
 8001816:	2200      	movs	r2, #0
 8001818:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
 800181c:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
 8001820:	e9d7 4576 	ldrd	r4, r5, [r7, #472]	; 0x1d8
 8001824:	462b      	mov	r3, r5
 8001826:	e9d7 8974 	ldrd	r8, r9, [r7, #464]	; 0x1d0
 800182a:	4642      	mov	r2, r8
 800182c:	fb02 f203 	mul.w	r2, r2, r3
 8001830:	464b      	mov	r3, r9
 8001832:	4621      	mov	r1, r4
 8001834:	fb01 f303 	mul.w	r3, r1, r3
 8001838:	4413      	add	r3, r2
 800183a:	4622      	mov	r2, r4
 800183c:	4641      	mov	r1, r8
 800183e:	fba2 1201 	umull	r1, r2, r2, r1
 8001842:	f8c7 236c 	str.w	r2, [r7, #876]	; 0x36c
 8001846:	460a      	mov	r2, r1
 8001848:	f8c7 2368 	str.w	r2, [r7, #872]	; 0x368
 800184c:	f8d7 236c 	ldr.w	r2, [r7, #876]	; 0x36c
 8001850:	4413      	add	r3, r2
 8001852:	f8c7 336c 	str.w	r3, [r7, #876]	; 0x36c
 8001856:	f04f 0000 	mov.w	r0, #0
 800185a:	f04f 0100 	mov.w	r1, #0
 800185e:	e9d7 45da 	ldrd	r4, r5, [r7, #872]	; 0x368
 8001862:	462b      	mov	r3, r5
 8001864:	0099      	lsls	r1, r3, #2
 8001866:	4623      	mov	r3, r4
 8001868:	ea41 7193 	orr.w	r1, r1, r3, lsr #30
 800186c:	4623      	mov	r3, r4
 800186e:	0098      	lsls	r0, r3, #2
 8001870:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8001874:	f04f 0300 	mov.w	r3, #0
 8001878:	f7fe ff16 	bl	80006a8 <__aeabi_uldivmod>
 800187c:	4602      	mov	r2, r0
 800187e:	460b      	mov	r3, r1
 8001880:	f112 0164 	adds.w	r1, r2, #100	; 0x64
 8001884:	f8c7 1108 	str.w	r1, [r7, #264]	; 0x108
 8001888:	f143 0300 	adc.w	r3, r3, #0
 800188c:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8001890:	4b3e      	ldr	r3, [pc, #248]	; (800198c <Set_Random_Motion_Values+0xc94>)
 8001892:	685b      	ldr	r3, [r3, #4]
 8001894:	461a      	mov	r2, r3
 8001896:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800189a:	4413      	add	r3, r2
 800189c:	461a      	mov	r2, r3
 800189e:	4b3b      	ldr	r3, [pc, #236]	; (800198c <Set_Random_Motion_Values+0xc94>)
 80018a0:	605a      	str	r2, [r3, #4]
    g_axes.AXIS_Z += -(100 + ((uint64_t)rand()*6*cnt)/RAND_MAX);
 80018a2:	f00b f903 	bl	800caac <rand>
 80018a6:	4603      	mov	r3, r0
 80018a8:	17da      	asrs	r2, r3, #31
 80018aa:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 80018ae:	f8c7 21cc 	str.w	r2, [r7, #460]	; 0x1cc
 80018b2:	f8d7 33e4 	ldr.w	r3, [r7, #996]	; 0x3e4
 80018b6:	2200      	movs	r2, #0
 80018b8:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 80018bc:	f8c7 21c4 	str.w	r2, [r7, #452]	; 0x1c4
 80018c0:	e9d7 4572 	ldrd	r4, r5, [r7, #456]	; 0x1c8
 80018c4:	462b      	mov	r3, r5
 80018c6:	e9d7 8970 	ldrd	r8, r9, [r7, #448]	; 0x1c0
 80018ca:	4642      	mov	r2, r8
 80018cc:	fb02 f203 	mul.w	r2, r2, r3
 80018d0:	464b      	mov	r3, r9
 80018d2:	4621      	mov	r1, r4
 80018d4:	fb01 f303 	mul.w	r3, r1, r3
 80018d8:	4413      	add	r3, r2
 80018da:	4622      	mov	r2, r4
 80018dc:	4641      	mov	r1, r8
 80018de:	fba2 1201 	umull	r1, r2, r2, r1
 80018e2:	f8c7 2364 	str.w	r2, [r7, #868]	; 0x364
 80018e6:	460a      	mov	r2, r1
 80018e8:	f8c7 2360 	str.w	r2, [r7, #864]	; 0x360
 80018ec:	f8d7 2364 	ldr.w	r2, [r7, #868]	; 0x364
 80018f0:	4413      	add	r3, r2
 80018f2:	f8c7 3364 	str.w	r3, [r7, #868]	; 0x364
 80018f6:	e9d7 45d8 	ldrd	r4, r5, [r7, #864]	; 0x360
 80018fa:	4622      	mov	r2, r4
 80018fc:	462b      	mov	r3, r5
 80018fe:	1891      	adds	r1, r2, r2
 8001900:	6239      	str	r1, [r7, #32]
 8001902:	415b      	adcs	r3, r3
 8001904:	627b      	str	r3, [r7, #36]	; 0x24
 8001906:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800190a:	4621      	mov	r1, r4
 800190c:	1851      	adds	r1, r2, r1
 800190e:	61b9      	str	r1, [r7, #24]
 8001910:	4629      	mov	r1, r5
 8001912:	eb43 0101 	adc.w	r1, r3, r1
 8001916:	61f9      	str	r1, [r7, #28]
 8001918:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800191c:	460b      	mov	r3, r1
 800191e:	18db      	adds	r3, r3, r3
 8001920:	613b      	str	r3, [r7, #16]
 8001922:	4613      	mov	r3, r2
 8001924:	eb42 0303 	adc.w	r3, r2, r3
 8001928:	617b      	str	r3, [r7, #20]
 800192a:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 800192e:	4618      	mov	r0, r3
 8001930:	4621      	mov	r1, r4
 8001932:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8001936:	f04f 0300 	mov.w	r3, #0
 800193a:	f7fe feb5 	bl	80006a8 <__aeabi_uldivmod>
 800193e:	4602      	mov	r2, r0
 8001940:	460b      	mov	r3, r1
 8001942:	f06f 0063 	mvn.w	r0, #99	; 0x63
 8001946:	f04f 31ff 	mov.w	r1, #4294967295
 800194a:	1a80      	subs	r0, r0, r2
 800194c:	f8c7 0100 	str.w	r0, [r7, #256]	; 0x100
 8001950:	eb61 0303 	sbc.w	r3, r1, r3
 8001954:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8001958:	4b0c      	ldr	r3, [pc, #48]	; (800198c <Set_Random_Motion_Values+0xc94>)
 800195a:	689b      	ldr	r3, [r3, #8]
 800195c:	461a      	mov	r2, r3
 800195e:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8001962:	4413      	add	r3, r2
 8001964:	461a      	mov	r2, r3
 8001966:	4b09      	ldr	r3, [pc, #36]	; (800198c <Set_Random_Motion_Values+0xc94>)
 8001968:	609a      	str	r2, [r3, #8]
    m_axes.AXIS_X += -(3  + ((uint64_t)rand()*7*cnt)/RAND_MAX);
 800196a:	f00b f89f 	bl	800caac <rand>
 800196e:	4603      	mov	r3, r0
 8001970:	17da      	asrs	r2, r3, #31
 8001972:	f8c7 31b8 	str.w	r3, [r7, #440]	; 0x1b8
 8001976:	f8c7 21bc 	str.w	r2, [r7, #444]	; 0x1bc
 800197a:	f8d7 33e4 	ldr.w	r3, [r7, #996]	; 0x3e4
 800197e:	2200      	movs	r2, #0
 8001980:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
 8001984:	e004      	b.n	8001990 <Set_Random_Motion_Values+0xc98>
 8001986:	bf00      	nop
 8001988:	200001bc 	.word	0x200001bc
 800198c:	200001c8 	.word	0x200001c8
 8001990:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
 8001994:	e9d7 456e 	ldrd	r4, r5, [r7, #440]	; 0x1b8
 8001998:	462b      	mov	r3, r5
 800199a:	e9d7 896c 	ldrd	r8, r9, [r7, #432]	; 0x1b0
 800199e:	4642      	mov	r2, r8
 80019a0:	fb02 f203 	mul.w	r2, r2, r3
 80019a4:	464b      	mov	r3, r9
 80019a6:	4621      	mov	r1, r4
 80019a8:	fb01 f303 	mul.w	r3, r1, r3
 80019ac:	4413      	add	r3, r2
 80019ae:	4622      	mov	r2, r4
 80019b0:	4641      	mov	r1, r8
 80019b2:	fba2 1201 	umull	r1, r2, r2, r1
 80019b6:	f8c7 235c 	str.w	r2, [r7, #860]	; 0x35c
 80019ba:	460a      	mov	r2, r1
 80019bc:	f8c7 2358 	str.w	r2, [r7, #856]	; 0x358
 80019c0:	f8d7 235c 	ldr.w	r2, [r7, #860]	; 0x35c
 80019c4:	4413      	add	r3, r2
 80019c6:	f8c7 335c 	str.w	r3, [r7, #860]	; 0x35c
 80019ca:	e9d7 45d6 	ldrd	r4, r5, [r7, #856]	; 0x358
 80019ce:	4622      	mov	r2, r4
 80019d0:	462b      	mov	r3, r5
 80019d2:	f04f 0000 	mov.w	r0, #0
 80019d6:	f04f 0100 	mov.w	r1, #0
 80019da:	00d9      	lsls	r1, r3, #3
 80019dc:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80019e0:	00d0      	lsls	r0, r2, #3
 80019e2:	4602      	mov	r2, r0
 80019e4:	460b      	mov	r3, r1
 80019e6:	4621      	mov	r1, r4
 80019e8:	1a51      	subs	r1, r2, r1
 80019ea:	f8c7 11a8 	str.w	r1, [r7, #424]	; 0x1a8
 80019ee:	4629      	mov	r1, r5
 80019f0:	eb63 0301 	sbc.w	r3, r3, r1
 80019f4:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
 80019f8:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 80019fc:	f04f 0300 	mov.w	r3, #0
 8001a00:	e9d7 016a 	ldrd	r0, r1, [r7, #424]	; 0x1a8
 8001a04:	f7fe fe50 	bl	80006a8 <__aeabi_uldivmod>
 8001a08:	4602      	mov	r2, r0
 8001a0a:	460b      	mov	r3, r1
 8001a0c:	f06f 0002 	mvn.w	r0, #2
 8001a10:	f04f 31ff 	mov.w	r1, #4294967295
 8001a14:	1a80      	subs	r0, r0, r2
 8001a16:	f8c7 00f8 	str.w	r0, [r7, #248]	; 0xf8
 8001a1a:	eb61 0303 	sbc.w	r3, r1, r3
 8001a1e:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8001a22:	4bea      	ldr	r3, [pc, #936]	; (8001dcc <Set_Random_Motion_Values+0x10d4>)
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	461a      	mov	r2, r3
 8001a28:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8001a2c:	4413      	add	r3, r2
 8001a2e:	461a      	mov	r2, r3
 8001a30:	4be6      	ldr	r3, [pc, #920]	; (8001dcc <Set_Random_Motion_Values+0x10d4>)
 8001a32:	601a      	str	r2, [r3, #0]
    m_axes.AXIS_Y +=  (3  + ((uint64_t)rand()*9*cnt)/RAND_MAX);
 8001a34:	f00b f83a 	bl	800caac <rand>
 8001a38:	4603      	mov	r3, r0
 8001a3a:	17da      	asrs	r2, r3, #31
 8001a3c:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8001a40:	f8c7 21a4 	str.w	r2, [r7, #420]	; 0x1a4
 8001a44:	f8d7 33e4 	ldr.w	r3, [r7, #996]	; 0x3e4
 8001a48:	2200      	movs	r2, #0
 8001a4a:	f8c7 3198 	str.w	r3, [r7, #408]	; 0x198
 8001a4e:	f8c7 219c 	str.w	r2, [r7, #412]	; 0x19c
 8001a52:	e9d7 4568 	ldrd	r4, r5, [r7, #416]	; 0x1a0
 8001a56:	462b      	mov	r3, r5
 8001a58:	e9d7 8966 	ldrd	r8, r9, [r7, #408]	; 0x198
 8001a5c:	4642      	mov	r2, r8
 8001a5e:	fb02 f203 	mul.w	r2, r2, r3
 8001a62:	464b      	mov	r3, r9
 8001a64:	4621      	mov	r1, r4
 8001a66:	fb01 f303 	mul.w	r3, r1, r3
 8001a6a:	4413      	add	r3, r2
 8001a6c:	4622      	mov	r2, r4
 8001a6e:	4641      	mov	r1, r8
 8001a70:	fba2 1201 	umull	r1, r2, r2, r1
 8001a74:	f8c7 2354 	str.w	r2, [r7, #852]	; 0x354
 8001a78:	460a      	mov	r2, r1
 8001a7a:	f8c7 2350 	str.w	r2, [r7, #848]	; 0x350
 8001a7e:	f8d7 2354 	ldr.w	r2, [r7, #852]	; 0x354
 8001a82:	4413      	add	r3, r2
 8001a84:	f8c7 3354 	str.w	r3, [r7, #852]	; 0x354
 8001a88:	e9d7 45d4 	ldrd	r4, r5, [r7, #848]	; 0x350
 8001a8c:	4622      	mov	r2, r4
 8001a8e:	462b      	mov	r3, r5
 8001a90:	f04f 0000 	mov.w	r0, #0
 8001a94:	f04f 0100 	mov.w	r1, #0
 8001a98:	00d9      	lsls	r1, r3, #3
 8001a9a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001a9e:	00d0      	lsls	r0, r2, #3
 8001aa0:	4602      	mov	r2, r0
 8001aa2:	460b      	mov	r3, r1
 8001aa4:	4621      	mov	r1, r4
 8001aa6:	1851      	adds	r1, r2, r1
 8001aa8:	f8c7 1190 	str.w	r1, [r7, #400]	; 0x190
 8001aac:	4629      	mov	r1, r5
 8001aae:	eb43 0101 	adc.w	r1, r3, r1
 8001ab2:	f8c7 1194 	str.w	r1, [r7, #404]	; 0x194
 8001ab6:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8001aba:	f04f 0300 	mov.w	r3, #0
 8001abe:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 8001ac2:	f7fe fdf1 	bl	80006a8 <__aeabi_uldivmod>
 8001ac6:	4602      	mov	r2, r0
 8001ac8:	460b      	mov	r3, r1
 8001aca:	1cd1      	adds	r1, r2, #3
 8001acc:	f8c7 10f0 	str.w	r1, [r7, #240]	; 0xf0
 8001ad0:	f143 0300 	adc.w	r3, r3, #0
 8001ad4:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8001ad8:	4bbc      	ldr	r3, [pc, #752]	; (8001dcc <Set_Random_Motion_Values+0x10d4>)
 8001ada:	685b      	ldr	r3, [r3, #4]
 8001adc:	461a      	mov	r2, r3
 8001ade:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8001ae2:	4413      	add	r3, r2
 8001ae4:	461a      	mov	r2, r3
 8001ae6:	4bb9      	ldr	r3, [pc, #740]	; (8001dcc <Set_Random_Motion_Values+0x10d4>)
 8001ae8:	605a      	str	r2, [r3, #4]
    m_axes.AXIS_Z += -(3  + ((uint64_t)rand()*3*cnt)/RAND_MAX);
 8001aea:	f00a ffdf 	bl	800caac <rand>
 8001aee:	4603      	mov	r3, r0
 8001af0:	17da      	asrs	r2, r3, #31
 8001af2:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 8001af6:	f8c7 218c 	str.w	r2, [r7, #396]	; 0x18c
 8001afa:	f8d7 33e4 	ldr.w	r3, [r7, #996]	; 0x3e4
 8001afe:	2200      	movs	r2, #0
 8001b00:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8001b04:	f8c7 2184 	str.w	r2, [r7, #388]	; 0x184
 8001b08:	e9d7 4562 	ldrd	r4, r5, [r7, #392]	; 0x188
 8001b0c:	462b      	mov	r3, r5
 8001b0e:	e9d7 8960 	ldrd	r8, r9, [r7, #384]	; 0x180
 8001b12:	4642      	mov	r2, r8
 8001b14:	fb02 f203 	mul.w	r2, r2, r3
 8001b18:	464b      	mov	r3, r9
 8001b1a:	4621      	mov	r1, r4
 8001b1c:	fb01 f303 	mul.w	r3, r1, r3
 8001b20:	4413      	add	r3, r2
 8001b22:	4622      	mov	r2, r4
 8001b24:	4641      	mov	r1, r8
 8001b26:	fba2 1201 	umull	r1, r2, r2, r1
 8001b2a:	f8c7 234c 	str.w	r2, [r7, #844]	; 0x34c
 8001b2e:	460a      	mov	r2, r1
 8001b30:	f8c7 2348 	str.w	r2, [r7, #840]	; 0x348
 8001b34:	f8d7 234c 	ldr.w	r2, [r7, #844]	; 0x34c
 8001b38:	4413      	add	r3, r2
 8001b3a:	f8c7 334c 	str.w	r3, [r7, #844]	; 0x34c
 8001b3e:	e9d7 45d2 	ldrd	r4, r5, [r7, #840]	; 0x348
 8001b42:	4622      	mov	r2, r4
 8001b44:	462b      	mov	r3, r5
 8001b46:	1891      	adds	r1, r2, r2
 8001b48:	60b9      	str	r1, [r7, #8]
 8001b4a:	415b      	adcs	r3, r3
 8001b4c:	60fb      	str	r3, [r7, #12]
 8001b4e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001b52:	4621      	mov	r1, r4
 8001b54:	1851      	adds	r1, r2, r1
 8001b56:	f8c7 1178 	str.w	r1, [r7, #376]	; 0x178
 8001b5a:	4629      	mov	r1, r5
 8001b5c:	eb43 0101 	adc.w	r1, r3, r1
 8001b60:	f8c7 117c 	str.w	r1, [r7, #380]	; 0x17c
 8001b64:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8001b68:	f04f 0300 	mov.w	r3, #0
 8001b6c:	e9d7 015e 	ldrd	r0, r1, [r7, #376]	; 0x178
 8001b70:	f7fe fd9a 	bl	80006a8 <__aeabi_uldivmod>
 8001b74:	4602      	mov	r2, r0
 8001b76:	460b      	mov	r3, r1
 8001b78:	f06f 0002 	mvn.w	r0, #2
 8001b7c:	f04f 31ff 	mov.w	r1, #4294967295
 8001b80:	1a80      	subs	r0, r0, r2
 8001b82:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
 8001b86:	eb61 0303 	sbc.w	r3, r1, r3
 8001b8a:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8001b8e:	4b8f      	ldr	r3, [pc, #572]	; (8001dcc <Set_Random_Motion_Values+0x10d4>)
 8001b90:	689b      	ldr	r3, [r3, #8]
 8001b92:	461a      	mov	r2, r3
 8001b94:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8001b98:	4413      	add	r3, r2
 8001b9a:	461a      	mov	r2, r3
 8001b9c:	4b8b      	ldr	r3, [pc, #556]	; (8001dcc <Set_Random_Motion_Values+0x10d4>)
 8001b9e:	609a      	str	r2, [r3, #8]
    q_axes.AXIS_X += (200 + ((uint64_t)rand()*7*cnt)/RAND_MAX);
 8001ba0:	f00a ff84 	bl	800caac <rand>
 8001ba4:	4603      	mov	r3, r0
 8001ba6:	17da      	asrs	r2, r3, #31
 8001ba8:	f8c7 3170 	str.w	r3, [r7, #368]	; 0x170
 8001bac:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
 8001bb0:	f8d7 33e4 	ldr.w	r3, [r7, #996]	; 0x3e4
 8001bb4:	2200      	movs	r2, #0
 8001bb6:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
 8001bba:	f8c7 216c 	str.w	r2, [r7, #364]	; 0x16c
 8001bbe:	e9d7 455c 	ldrd	r4, r5, [r7, #368]	; 0x170
 8001bc2:	462b      	mov	r3, r5
 8001bc4:	e9d7 895a 	ldrd	r8, r9, [r7, #360]	; 0x168
 8001bc8:	4642      	mov	r2, r8
 8001bca:	fb02 f203 	mul.w	r2, r2, r3
 8001bce:	464b      	mov	r3, r9
 8001bd0:	4621      	mov	r1, r4
 8001bd2:	fb01 f303 	mul.w	r3, r1, r3
 8001bd6:	4413      	add	r3, r2
 8001bd8:	4622      	mov	r2, r4
 8001bda:	4641      	mov	r1, r8
 8001bdc:	fba2 1201 	umull	r1, r2, r2, r1
 8001be0:	f8c7 2344 	str.w	r2, [r7, #836]	; 0x344
 8001be4:	460a      	mov	r2, r1
 8001be6:	f8c7 2340 	str.w	r2, [r7, #832]	; 0x340
 8001bea:	f8d7 2344 	ldr.w	r2, [r7, #836]	; 0x344
 8001bee:	4413      	add	r3, r2
 8001bf0:	f8c7 3344 	str.w	r3, [r7, #836]	; 0x344
 8001bf4:	e9d7 45d0 	ldrd	r4, r5, [r7, #832]	; 0x340
 8001bf8:	4622      	mov	r2, r4
 8001bfa:	462b      	mov	r3, r5
 8001bfc:	f04f 0000 	mov.w	r0, #0
 8001c00:	f04f 0100 	mov.w	r1, #0
 8001c04:	00d9      	lsls	r1, r3, #3
 8001c06:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001c0a:	00d0      	lsls	r0, r2, #3
 8001c0c:	4602      	mov	r2, r0
 8001c0e:	460b      	mov	r3, r1
 8001c10:	4621      	mov	r1, r4
 8001c12:	1a51      	subs	r1, r2, r1
 8001c14:	f8c7 1160 	str.w	r1, [r7, #352]	; 0x160
 8001c18:	4629      	mov	r1, r5
 8001c1a:	eb63 0301 	sbc.w	r3, r3, r1
 8001c1e:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
 8001c22:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8001c26:	f04f 0300 	mov.w	r3, #0
 8001c2a:	e9d7 0158 	ldrd	r0, r1, [r7, #352]	; 0x160
 8001c2e:	f7fe fd3b 	bl	80006a8 <__aeabi_uldivmod>
 8001c32:	4602      	mov	r2, r0
 8001c34:	460b      	mov	r3, r1
 8001c36:	f112 01c8 	adds.w	r1, r2, #200	; 0xc8
 8001c3a:	f8c7 10e0 	str.w	r1, [r7, #224]	; 0xe0
 8001c3e:	f143 0300 	adc.w	r3, r3, #0
 8001c42:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8001c46:	4b62      	ldr	r3, [pc, #392]	; (8001dd0 <Set_Random_Motion_Values+0x10d8>)
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	461a      	mov	r2, r3
 8001c4c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8001c50:	4413      	add	r3, r2
 8001c52:	461a      	mov	r2, r3
 8001c54:	4b5e      	ldr	r3, [pc, #376]	; (8001dd0 <Set_Random_Motion_Values+0x10d8>)
 8001c56:	601a      	str	r2, [r3, #0]
    q_axes.AXIS_Y -= (150 + ((uint64_t)rand()*3*cnt)/RAND_MAX);
 8001c58:	f00a ff28 	bl	800caac <rand>
 8001c5c:	4603      	mov	r3, r0
 8001c5e:	17da      	asrs	r2, r3, #31
 8001c60:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 8001c64:	f8c7 215c 	str.w	r2, [r7, #348]	; 0x15c
 8001c68:	f8d7 33e4 	ldr.w	r3, [r7, #996]	; 0x3e4
 8001c6c:	2200      	movs	r2, #0
 8001c6e:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8001c72:	f8c7 2154 	str.w	r2, [r7, #340]	; 0x154
 8001c76:	e9d7 4556 	ldrd	r4, r5, [r7, #344]	; 0x158
 8001c7a:	462b      	mov	r3, r5
 8001c7c:	e9d7 8954 	ldrd	r8, r9, [r7, #336]	; 0x150
 8001c80:	4642      	mov	r2, r8
 8001c82:	fb02 f203 	mul.w	r2, r2, r3
 8001c86:	464b      	mov	r3, r9
 8001c88:	4621      	mov	r1, r4
 8001c8a:	fb01 f303 	mul.w	r3, r1, r3
 8001c8e:	4413      	add	r3, r2
 8001c90:	4622      	mov	r2, r4
 8001c92:	4641      	mov	r1, r8
 8001c94:	fba2 1201 	umull	r1, r2, r2, r1
 8001c98:	f8c7 233c 	str.w	r2, [r7, #828]	; 0x33c
 8001c9c:	460a      	mov	r2, r1
 8001c9e:	f8c7 2338 	str.w	r2, [r7, #824]	; 0x338
 8001ca2:	f8d7 233c 	ldr.w	r2, [r7, #828]	; 0x33c
 8001ca6:	4413      	add	r3, r2
 8001ca8:	f8c7 333c 	str.w	r3, [r7, #828]	; 0x33c
 8001cac:	e9d7 45ce 	ldrd	r4, r5, [r7, #824]	; 0x338
 8001cb0:	4622      	mov	r2, r4
 8001cb2:	462b      	mov	r3, r5
 8001cb4:	1891      	adds	r1, r2, r2
 8001cb6:	6039      	str	r1, [r7, #0]
 8001cb8:	415b      	adcs	r3, r3
 8001cba:	607b      	str	r3, [r7, #4]
 8001cbc:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001cc0:	4621      	mov	r1, r4
 8001cc2:	1851      	adds	r1, r2, r1
 8001cc4:	f8c7 1148 	str.w	r1, [r7, #328]	; 0x148
 8001cc8:	4629      	mov	r1, r5
 8001cca:	eb43 0101 	adc.w	r1, r3, r1
 8001cce:	f8c7 114c 	str.w	r1, [r7, #332]	; 0x14c
 8001cd2:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8001cd6:	f04f 0300 	mov.w	r3, #0
 8001cda:	e9d7 0152 	ldrd	r0, r1, [r7, #328]	; 0x148
 8001cde:	f7fe fce3 	bl	80006a8 <__aeabi_uldivmod>
 8001ce2:	4602      	mov	r2, r0
 8001ce4:	460b      	mov	r3, r1
 8001ce6:	f112 0196 	adds.w	r1, r2, #150	; 0x96
 8001cea:	f8c7 10d8 	str.w	r1, [r7, #216]	; 0xd8
 8001cee:	f143 0300 	adc.w	r3, r3, #0
 8001cf2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8001cf6:	4b36      	ldr	r3, [pc, #216]	; (8001dd0 <Set_Random_Motion_Values+0x10d8>)
 8001cf8:	685b      	ldr	r3, [r3, #4]
 8001cfa:	461a      	mov	r2, r3
 8001cfc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8001d00:	1ad3      	subs	r3, r2, r3
 8001d02:	461a      	mov	r2, r3
 8001d04:	4b32      	ldr	r3, [pc, #200]	; (8001dd0 <Set_Random_Motion_Values+0x10d8>)
 8001d06:	605a      	str	r2, [r3, #4]
    q_axes.AXIS_Z += (10  + ((uint64_t)rand()*5*cnt)/RAND_MAX);
 8001d08:	f00a fed0 	bl	800caac <rand>
 8001d0c:	4603      	mov	r3, r0
 8001d0e:	17da      	asrs	r2, r3, #31
 8001d10:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
 8001d14:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
 8001d18:	f8d7 33e4 	ldr.w	r3, [r7, #996]	; 0x3e4
 8001d1c:	2200      	movs	r2, #0
 8001d1e:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
 8001d22:	f8c7 213c 	str.w	r2, [r7, #316]	; 0x13c
 8001d26:	e9d7 4550 	ldrd	r4, r5, [r7, #320]	; 0x140
 8001d2a:	462b      	mov	r3, r5
 8001d2c:	e9d7 894e 	ldrd	r8, r9, [r7, #312]	; 0x138
 8001d30:	4642      	mov	r2, r8
 8001d32:	fb02 f203 	mul.w	r2, r2, r3
 8001d36:	464b      	mov	r3, r9
 8001d38:	4621      	mov	r1, r4
 8001d3a:	fb01 f303 	mul.w	r3, r1, r3
 8001d3e:	4413      	add	r3, r2
 8001d40:	4622      	mov	r2, r4
 8001d42:	4641      	mov	r1, r8
 8001d44:	fba2 1201 	umull	r1, r2, r2, r1
 8001d48:	f8c7 2334 	str.w	r2, [r7, #820]	; 0x334
 8001d4c:	460a      	mov	r2, r1
 8001d4e:	f8c7 2330 	str.w	r2, [r7, #816]	; 0x330
 8001d52:	f8d7 2334 	ldr.w	r2, [r7, #820]	; 0x334
 8001d56:	4413      	add	r3, r2
 8001d58:	f8c7 3334 	str.w	r3, [r7, #820]	; 0x334
 8001d5c:	e9d7 45cc 	ldrd	r4, r5, [r7, #816]	; 0x330
 8001d60:	4622      	mov	r2, r4
 8001d62:	462b      	mov	r3, r5
 8001d64:	f04f 0000 	mov.w	r0, #0
 8001d68:	f04f 0100 	mov.w	r1, #0
 8001d6c:	0099      	lsls	r1, r3, #2
 8001d6e:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 8001d72:	0090      	lsls	r0, r2, #2
 8001d74:	4602      	mov	r2, r0
 8001d76:	460b      	mov	r3, r1
 8001d78:	4621      	mov	r1, r4
 8001d7a:	1851      	adds	r1, r2, r1
 8001d7c:	f8c7 1130 	str.w	r1, [r7, #304]	; 0x130
 8001d80:	4629      	mov	r1, r5
 8001d82:	eb43 0101 	adc.w	r1, r3, r1
 8001d86:	f8c7 1134 	str.w	r1, [r7, #308]	; 0x134
 8001d8a:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8001d8e:	f04f 0300 	mov.w	r3, #0
 8001d92:	e9d7 014c 	ldrd	r0, r1, [r7, #304]	; 0x130
 8001d96:	f7fe fc87 	bl	80006a8 <__aeabi_uldivmod>
 8001d9a:	4602      	mov	r2, r0
 8001d9c:	460b      	mov	r3, r1
 8001d9e:	f112 010a 	adds.w	r1, r2, #10
 8001da2:	f8c7 10d0 	str.w	r1, [r7, #208]	; 0xd0
 8001da6:	f143 0300 	adc.w	r3, r3, #0
 8001daa:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8001dae:	4b08      	ldr	r3, [pc, #32]	; (8001dd0 <Set_Random_Motion_Values+0x10d8>)
 8001db0:	689b      	ldr	r3, [r3, #8]
 8001db2:	461a      	mov	r2, r3
 8001db4:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8001db8:	4413      	add	r3, r2
 8001dba:	461a      	mov	r2, r3
 8001dbc:	4b04      	ldr	r3, [pc, #16]	; (8001dd0 <Set_Random_Motion_Values+0x10d8>)
 8001dbe:	609a      	str	r2, [r3, #8]
}
 8001dc0:	bf00      	nop
 8001dc2:	f507 777a 	add.w	r7, r7, #1000	; 0x3e8
 8001dc6:	46bd      	mov	sp, r7
 8001dc8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001dcc:	200001d4 	.word	0x200001d4
 8001dd0:	200001e0 	.word	0x200001e0

08001dd4 <Reset_Motion_Values>:
 * @brief  Reset values for all motion sensor data
 * @param  None
 * @retval None
 */
static void Reset_Motion_Values(void)
{
 8001dd4:	b480      	push	{r7}
 8001dd6:	af00      	add	r7, sp, #0
  x_axes.AXIS_X = (x_axes.AXIS_X)%2000 == 0 ? -x_axes.AXIS_X : 10;
 8001dd8:	4b6e      	ldr	r3, [pc, #440]	; (8001f94 <Reset_Motion_Values+0x1c0>)
 8001dda:	681a      	ldr	r2, [r3, #0]
 8001ddc:	4b6e      	ldr	r3, [pc, #440]	; (8001f98 <Reset_Motion_Values+0x1c4>)
 8001dde:	fb83 1302 	smull	r1, r3, r3, r2
 8001de2:	11d9      	asrs	r1, r3, #7
 8001de4:	17d3      	asrs	r3, r2, #31
 8001de6:	1acb      	subs	r3, r1, r3
 8001de8:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8001dec:	fb01 f303 	mul.w	r3, r1, r3
 8001df0:	1ad3      	subs	r3, r2, r3
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d103      	bne.n	8001dfe <Reset_Motion_Values+0x2a>
 8001df6:	4b67      	ldr	r3, [pc, #412]	; (8001f94 <Reset_Motion_Values+0x1c0>)
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	425b      	negs	r3, r3
 8001dfc:	e000      	b.n	8001e00 <Reset_Motion_Values+0x2c>
 8001dfe:	230a      	movs	r3, #10
 8001e00:	4a64      	ldr	r2, [pc, #400]	; (8001f94 <Reset_Motion_Values+0x1c0>)
 8001e02:	6013      	str	r3, [r2, #0]
  x_axes.AXIS_Y = (x_axes.AXIS_Y)%2000 == 0 ? -x_axes.AXIS_Y : -10;
 8001e04:	4b63      	ldr	r3, [pc, #396]	; (8001f94 <Reset_Motion_Values+0x1c0>)
 8001e06:	685a      	ldr	r2, [r3, #4]
 8001e08:	4b63      	ldr	r3, [pc, #396]	; (8001f98 <Reset_Motion_Values+0x1c4>)
 8001e0a:	fb83 1302 	smull	r1, r3, r3, r2
 8001e0e:	11d9      	asrs	r1, r3, #7
 8001e10:	17d3      	asrs	r3, r2, #31
 8001e12:	1acb      	subs	r3, r1, r3
 8001e14:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8001e18:	fb01 f303 	mul.w	r3, r1, r3
 8001e1c:	1ad3      	subs	r3, r2, r3
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d103      	bne.n	8001e2a <Reset_Motion_Values+0x56>
 8001e22:	4b5c      	ldr	r3, [pc, #368]	; (8001f94 <Reset_Motion_Values+0x1c0>)
 8001e24:	685b      	ldr	r3, [r3, #4]
 8001e26:	425b      	negs	r3, r3
 8001e28:	e001      	b.n	8001e2e <Reset_Motion_Values+0x5a>
 8001e2a:	f06f 0309 	mvn.w	r3, #9
 8001e2e:	4a59      	ldr	r2, [pc, #356]	; (8001f94 <Reset_Motion_Values+0x1c0>)
 8001e30:	6053      	str	r3, [r2, #4]
  x_axes.AXIS_Z = (x_axes.AXIS_Z)%2000 == 0 ? -x_axes.AXIS_Z : 10;
 8001e32:	4b58      	ldr	r3, [pc, #352]	; (8001f94 <Reset_Motion_Values+0x1c0>)
 8001e34:	689a      	ldr	r2, [r3, #8]
 8001e36:	4b58      	ldr	r3, [pc, #352]	; (8001f98 <Reset_Motion_Values+0x1c4>)
 8001e38:	fb83 1302 	smull	r1, r3, r3, r2
 8001e3c:	11d9      	asrs	r1, r3, #7
 8001e3e:	17d3      	asrs	r3, r2, #31
 8001e40:	1acb      	subs	r3, r1, r3
 8001e42:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8001e46:	fb01 f303 	mul.w	r3, r1, r3
 8001e4a:	1ad3      	subs	r3, r2, r3
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d103      	bne.n	8001e58 <Reset_Motion_Values+0x84>
 8001e50:	4b50      	ldr	r3, [pc, #320]	; (8001f94 <Reset_Motion_Values+0x1c0>)
 8001e52:	689b      	ldr	r3, [r3, #8]
 8001e54:	425b      	negs	r3, r3
 8001e56:	e000      	b.n	8001e5a <Reset_Motion_Values+0x86>
 8001e58:	230a      	movs	r3, #10
 8001e5a:	4a4e      	ldr	r2, [pc, #312]	; (8001f94 <Reset_Motion_Values+0x1c0>)
 8001e5c:	6093      	str	r3, [r2, #8]
  g_axes.AXIS_X = (g_axes.AXIS_X)%2000 == 0 ? -g_axes.AXIS_X : 100;
 8001e5e:	4b4f      	ldr	r3, [pc, #316]	; (8001f9c <Reset_Motion_Values+0x1c8>)
 8001e60:	681a      	ldr	r2, [r3, #0]
 8001e62:	4b4d      	ldr	r3, [pc, #308]	; (8001f98 <Reset_Motion_Values+0x1c4>)
 8001e64:	fb83 1302 	smull	r1, r3, r3, r2
 8001e68:	11d9      	asrs	r1, r3, #7
 8001e6a:	17d3      	asrs	r3, r2, #31
 8001e6c:	1acb      	subs	r3, r1, r3
 8001e6e:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8001e72:	fb01 f303 	mul.w	r3, r1, r3
 8001e76:	1ad3      	subs	r3, r2, r3
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d103      	bne.n	8001e84 <Reset_Motion_Values+0xb0>
 8001e7c:	4b47      	ldr	r3, [pc, #284]	; (8001f9c <Reset_Motion_Values+0x1c8>)
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	425b      	negs	r3, r3
 8001e82:	e000      	b.n	8001e86 <Reset_Motion_Values+0xb2>
 8001e84:	2364      	movs	r3, #100	; 0x64
 8001e86:	4a45      	ldr	r2, [pc, #276]	; (8001f9c <Reset_Motion_Values+0x1c8>)
 8001e88:	6013      	str	r3, [r2, #0]
  g_axes.AXIS_Y = (g_axes.AXIS_Y)%2000 == 0 ? -g_axes.AXIS_Y : -100;
 8001e8a:	4b44      	ldr	r3, [pc, #272]	; (8001f9c <Reset_Motion_Values+0x1c8>)
 8001e8c:	685a      	ldr	r2, [r3, #4]
 8001e8e:	4b42      	ldr	r3, [pc, #264]	; (8001f98 <Reset_Motion_Values+0x1c4>)
 8001e90:	fb83 1302 	smull	r1, r3, r3, r2
 8001e94:	11d9      	asrs	r1, r3, #7
 8001e96:	17d3      	asrs	r3, r2, #31
 8001e98:	1acb      	subs	r3, r1, r3
 8001e9a:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8001e9e:	fb01 f303 	mul.w	r3, r1, r3
 8001ea2:	1ad3      	subs	r3, r2, r3
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d103      	bne.n	8001eb0 <Reset_Motion_Values+0xdc>
 8001ea8:	4b3c      	ldr	r3, [pc, #240]	; (8001f9c <Reset_Motion_Values+0x1c8>)
 8001eaa:	685b      	ldr	r3, [r3, #4]
 8001eac:	425b      	negs	r3, r3
 8001eae:	e001      	b.n	8001eb4 <Reset_Motion_Values+0xe0>
 8001eb0:	f06f 0363 	mvn.w	r3, #99	; 0x63
 8001eb4:	4a39      	ldr	r2, [pc, #228]	; (8001f9c <Reset_Motion_Values+0x1c8>)
 8001eb6:	6053      	str	r3, [r2, #4]
  g_axes.AXIS_Z = (g_axes.AXIS_Z)%2000 == 0 ? -g_axes.AXIS_Z : 100;
 8001eb8:	4b38      	ldr	r3, [pc, #224]	; (8001f9c <Reset_Motion_Values+0x1c8>)
 8001eba:	689a      	ldr	r2, [r3, #8]
 8001ebc:	4b36      	ldr	r3, [pc, #216]	; (8001f98 <Reset_Motion_Values+0x1c4>)
 8001ebe:	fb83 1302 	smull	r1, r3, r3, r2
 8001ec2:	11d9      	asrs	r1, r3, #7
 8001ec4:	17d3      	asrs	r3, r2, #31
 8001ec6:	1acb      	subs	r3, r1, r3
 8001ec8:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8001ecc:	fb01 f303 	mul.w	r3, r1, r3
 8001ed0:	1ad3      	subs	r3, r2, r3
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d103      	bne.n	8001ede <Reset_Motion_Values+0x10a>
 8001ed6:	4b31      	ldr	r3, [pc, #196]	; (8001f9c <Reset_Motion_Values+0x1c8>)
 8001ed8:	689b      	ldr	r3, [r3, #8]
 8001eda:	425b      	negs	r3, r3
 8001edc:	e000      	b.n	8001ee0 <Reset_Motion_Values+0x10c>
 8001ede:	2364      	movs	r3, #100	; 0x64
 8001ee0:	4a2e      	ldr	r2, [pc, #184]	; (8001f9c <Reset_Motion_Values+0x1c8>)
 8001ee2:	6093      	str	r3, [r2, #8]
  m_axes.AXIS_X = (g_axes.AXIS_X)%2000 == 0 ? -m_axes.AXIS_X : 3;
 8001ee4:	4b2d      	ldr	r3, [pc, #180]	; (8001f9c <Reset_Motion_Values+0x1c8>)
 8001ee6:	681a      	ldr	r2, [r3, #0]
 8001ee8:	4b2b      	ldr	r3, [pc, #172]	; (8001f98 <Reset_Motion_Values+0x1c4>)
 8001eea:	fb83 1302 	smull	r1, r3, r3, r2
 8001eee:	11d9      	asrs	r1, r3, #7
 8001ef0:	17d3      	asrs	r3, r2, #31
 8001ef2:	1acb      	subs	r3, r1, r3
 8001ef4:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8001ef8:	fb01 f303 	mul.w	r3, r1, r3
 8001efc:	1ad3      	subs	r3, r2, r3
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d103      	bne.n	8001f0a <Reset_Motion_Values+0x136>
 8001f02:	4b27      	ldr	r3, [pc, #156]	; (8001fa0 <Reset_Motion_Values+0x1cc>)
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	425b      	negs	r3, r3
 8001f08:	e000      	b.n	8001f0c <Reset_Motion_Values+0x138>
 8001f0a:	2303      	movs	r3, #3
 8001f0c:	4a24      	ldr	r2, [pc, #144]	; (8001fa0 <Reset_Motion_Values+0x1cc>)
 8001f0e:	6013      	str	r3, [r2, #0]
  m_axes.AXIS_Y = (g_axes.AXIS_Y)%2000 == 0 ? -m_axes.AXIS_Y : -3;
 8001f10:	4b22      	ldr	r3, [pc, #136]	; (8001f9c <Reset_Motion_Values+0x1c8>)
 8001f12:	685a      	ldr	r2, [r3, #4]
 8001f14:	4b20      	ldr	r3, [pc, #128]	; (8001f98 <Reset_Motion_Values+0x1c4>)
 8001f16:	fb83 1302 	smull	r1, r3, r3, r2
 8001f1a:	11d9      	asrs	r1, r3, #7
 8001f1c:	17d3      	asrs	r3, r2, #31
 8001f1e:	1acb      	subs	r3, r1, r3
 8001f20:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8001f24:	fb01 f303 	mul.w	r3, r1, r3
 8001f28:	1ad3      	subs	r3, r2, r3
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d103      	bne.n	8001f36 <Reset_Motion_Values+0x162>
 8001f2e:	4b1c      	ldr	r3, [pc, #112]	; (8001fa0 <Reset_Motion_Values+0x1cc>)
 8001f30:	685b      	ldr	r3, [r3, #4]
 8001f32:	425b      	negs	r3, r3
 8001f34:	e001      	b.n	8001f3a <Reset_Motion_Values+0x166>
 8001f36:	f06f 0302 	mvn.w	r3, #2
 8001f3a:	4a19      	ldr	r2, [pc, #100]	; (8001fa0 <Reset_Motion_Values+0x1cc>)
 8001f3c:	6053      	str	r3, [r2, #4]
  m_axes.AXIS_Z = (g_axes.AXIS_Z)%2000 == 0 ? -m_axes.AXIS_Z : 3;
 8001f3e:	4b17      	ldr	r3, [pc, #92]	; (8001f9c <Reset_Motion_Values+0x1c8>)
 8001f40:	689a      	ldr	r2, [r3, #8]
 8001f42:	4b15      	ldr	r3, [pc, #84]	; (8001f98 <Reset_Motion_Values+0x1c4>)
 8001f44:	fb83 1302 	smull	r1, r3, r3, r2
 8001f48:	11d9      	asrs	r1, r3, #7
 8001f4a:	17d3      	asrs	r3, r2, #31
 8001f4c:	1acb      	subs	r3, r1, r3
 8001f4e:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8001f52:	fb01 f303 	mul.w	r3, r1, r3
 8001f56:	1ad3      	subs	r3, r2, r3
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d103      	bne.n	8001f64 <Reset_Motion_Values+0x190>
 8001f5c:	4b10      	ldr	r3, [pc, #64]	; (8001fa0 <Reset_Motion_Values+0x1cc>)
 8001f5e:	689b      	ldr	r3, [r3, #8]
 8001f60:	425b      	negs	r3, r3
 8001f62:	e000      	b.n	8001f66 <Reset_Motion_Values+0x192>
 8001f64:	2303      	movs	r3, #3
 8001f66:	4a0e      	ldr	r2, [pc, #56]	; (8001fa0 <Reset_Motion_Values+0x1cc>)
 8001f68:	6093      	str	r3, [r2, #8]
  q_axes.AXIS_X = -q_axes.AXIS_X;
 8001f6a:	4b0e      	ldr	r3, [pc, #56]	; (8001fa4 <Reset_Motion_Values+0x1d0>)
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	425b      	negs	r3, r3
 8001f70:	4a0c      	ldr	r2, [pc, #48]	; (8001fa4 <Reset_Motion_Values+0x1d0>)
 8001f72:	6013      	str	r3, [r2, #0]
  q_axes.AXIS_Y = -q_axes.AXIS_Y;
 8001f74:	4b0b      	ldr	r3, [pc, #44]	; (8001fa4 <Reset_Motion_Values+0x1d0>)
 8001f76:	685b      	ldr	r3, [r3, #4]
 8001f78:	425b      	negs	r3, r3
 8001f7a:	4a0a      	ldr	r2, [pc, #40]	; (8001fa4 <Reset_Motion_Values+0x1d0>)
 8001f7c:	6053      	str	r3, [r2, #4]
  q_axes.AXIS_Z = -q_axes.AXIS_Z;
 8001f7e:	4b09      	ldr	r3, [pc, #36]	; (8001fa4 <Reset_Motion_Values+0x1d0>)
 8001f80:	689b      	ldr	r3, [r3, #8]
 8001f82:	425b      	negs	r3, r3
 8001f84:	4a07      	ldr	r2, [pc, #28]	; (8001fa4 <Reset_Motion_Values+0x1d0>)
 8001f86:	6093      	str	r3, [r2, #8]
}
 8001f88:	bf00      	nop
 8001f8a:	46bd      	mov	sp, r7
 8001f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f90:	4770      	bx	lr
 8001f92:	bf00      	nop
 8001f94:	200001bc 	.word	0x200001bc
 8001f98:	10624dd3 	.word	0x10624dd3
 8001f9c:	200001c8 	.word	0x200001c8
 8001fa0:	200001d4 	.word	0x200001d4
 8001fa4:	200001e0 	.word	0x200001e0

08001fa8 <BSP_PB_Callback>:
  * @brief  BSP Push Button callback
  * @param  Button Specifies the pin connected EXTI line
  * @retval None.
  */
void BSP_PB_Callback(Button_TypeDef Button)
{
 8001fa8:	b480      	push	{r7}
 8001faa:	b083      	sub	sp, #12
 8001fac:	af00      	add	r7, sp, #0
 8001fae:	4603      	mov	r3, r0
 8001fb0:	71fb      	strb	r3, [r7, #7]
  /* Set the User Button flag */
  user_button_pressed = 1;
 8001fb2:	4b04      	ldr	r3, [pc, #16]	; (8001fc4 <BSP_PB_Callback+0x1c>)
 8001fb4:	2201      	movs	r2, #1
 8001fb6:	701a      	strb	r2, [r3, #0]
}
 8001fb8:	bf00      	nop
 8001fba:	370c      	adds	r7, #12
 8001fbc:	46bd      	mov	sp, r7
 8001fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc2:	4770      	bx	lr
 8001fc4:	20000182 	.word	0x20000182

08001fc8 <Add_HWServW2ST_Service>:
 * @brief  Add the 'HW' service (and the Environmental and AccGyr characteristics).
 * @param  None
 * @retval tBleStatus Status
 */
tBleStatus Add_HWServW2ST_Service(void)
{
 8001fc8:	b590      	push	{r4, r7, lr}
 8001fca:	b08d      	sub	sp, #52	; 0x34
 8001fcc:	af06      	add	r7, sp, #24
  tBleStatus ret;
  uint8_t uuid[16];

  /* Add_HWServW2ST_Service */
  COPY_HW_SENS_W2ST_SERVICE_UUID(uuid);
 8001fce:	231b      	movs	r3, #27
 8001fd0:	713b      	strb	r3, [r7, #4]
 8001fd2:	23c5      	movs	r3, #197	; 0xc5
 8001fd4:	717b      	strb	r3, [r7, #5]
 8001fd6:	23d5      	movs	r3, #213	; 0xd5
 8001fd8:	71bb      	strb	r3, [r7, #6]
 8001fda:	23a5      	movs	r3, #165	; 0xa5
 8001fdc:	71fb      	strb	r3, [r7, #7]
 8001fde:	2302      	movs	r3, #2
 8001fe0:	723b      	strb	r3, [r7, #8]
 8001fe2:	2300      	movs	r3, #0
 8001fe4:	727b      	strb	r3, [r7, #9]
 8001fe6:	23b4      	movs	r3, #180	; 0xb4
 8001fe8:	72bb      	strb	r3, [r7, #10]
 8001fea:	239a      	movs	r3, #154	; 0x9a
 8001fec:	72fb      	strb	r3, [r7, #11]
 8001fee:	23e1      	movs	r3, #225	; 0xe1
 8001ff0:	733b      	strb	r3, [r7, #12]
 8001ff2:	2311      	movs	r3, #17
 8001ff4:	737b      	strb	r3, [r7, #13]
 8001ff6:	2301      	movs	r3, #1
 8001ff8:	73bb      	strb	r3, [r7, #14]
 8001ffa:	2300      	movs	r3, #0
 8001ffc:	73fb      	strb	r3, [r7, #15]
 8001ffe:	2300      	movs	r3, #0
 8002000:	743b      	strb	r3, [r7, #16]
 8002002:	2300      	movs	r3, #0
 8002004:	747b      	strb	r3, [r7, #17]
 8002006:	2300      	movs	r3, #0
 8002008:	74bb      	strb	r3, [r7, #18]
 800200a:	2300      	movs	r3, #0
 800200c:	74fb      	strb	r3, [r7, #19]
  BLUENRG_memcpy(&service_uuid.Service_UUID_128, uuid, 16);
 800200e:	4b52      	ldr	r3, [pc, #328]	; (8002158 <Add_HWServW2ST_Service+0x190>)
 8002010:	461c      	mov	r4, r3
 8002012:	1d3b      	adds	r3, r7, #4
 8002014:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002016:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  ret = aci_gatt_add_serv(UUID_TYPE_128, service_uuid.Service_UUID_128, PRIMARY_SERVICE,
 800201a:	4b50      	ldr	r3, [pc, #320]	; (800215c <Add_HWServW2ST_Service+0x194>)
 800201c:	9300      	str	r3, [sp, #0]
 800201e:	2310      	movs	r3, #16
 8002020:	2201      	movs	r2, #1
 8002022:	494d      	ldr	r1, [pc, #308]	; (8002158 <Add_HWServW2ST_Service+0x190>)
 8002024:	2002      	movs	r0, #2
 8002026:	f009 fda4 	bl	800bb72 <aci_gatt_add_serv>
 800202a:	4603      	mov	r3, r0
 800202c:	75fb      	strb	r3, [r7, #23]
                          1+3*5, &HWServW2STHandle);
  if (ret != BLE_STATUS_SUCCESS)
 800202e:	7dfb      	ldrb	r3, [r7, #23]
 8002030:	2b00      	cmp	r3, #0
 8002032:	d001      	beq.n	8002038 <Add_HWServW2ST_Service+0x70>
    return BLE_STATUS_ERROR;
 8002034:	2347      	movs	r3, #71	; 0x47
 8002036:	e08a      	b.n	800214e <Add_HWServW2ST_Service+0x186>

  /* Fill the Environmental BLE Characteristc */
  COPY_ENVIRONMENTAL_W2ST_CHAR_UUID(uuid);
 8002038:	231b      	movs	r3, #27
 800203a:	713b      	strb	r3, [r7, #4]
 800203c:	23c5      	movs	r3, #197	; 0xc5
 800203e:	717b      	strb	r3, [r7, #5]
 8002040:	23d5      	movs	r3, #213	; 0xd5
 8002042:	71bb      	strb	r3, [r7, #6]
 8002044:	23a5      	movs	r3, #165	; 0xa5
 8002046:	71fb      	strb	r3, [r7, #7]
 8002048:	2302      	movs	r3, #2
 800204a:	723b      	strb	r3, [r7, #8]
 800204c:	2300      	movs	r3, #0
 800204e:	727b      	strb	r3, [r7, #9]
 8002050:	2336      	movs	r3, #54	; 0x36
 8002052:	72bb      	strb	r3, [r7, #10]
 8002054:	23ac      	movs	r3, #172	; 0xac
 8002056:	72fb      	strb	r3, [r7, #11]
 8002058:	23e1      	movs	r3, #225	; 0xe1
 800205a:	733b      	strb	r3, [r7, #12]
 800205c:	2311      	movs	r3, #17
 800205e:	737b      	strb	r3, [r7, #13]
 8002060:	2301      	movs	r3, #1
 8002062:	73bb      	strb	r3, [r7, #14]
 8002064:	2300      	movs	r3, #0
 8002066:	73fb      	strb	r3, [r7, #15]
 8002068:	2300      	movs	r3, #0
 800206a:	743b      	strb	r3, [r7, #16]
 800206c:	2300      	movs	r3, #0
 800206e:	747b      	strb	r3, [r7, #17]
 8002070:	2300      	movs	r3, #0
 8002072:	74bb      	strb	r3, [r7, #18]
 8002074:	2300      	movs	r3, #0
 8002076:	74fb      	strb	r3, [r7, #19]
  uuid[14] |= 0x04; /* One Temperature value*/
 8002078:	7cbb      	ldrb	r3, [r7, #18]
 800207a:	f043 0304 	orr.w	r3, r3, #4
 800207e:	b2db      	uxtb	r3, r3
 8002080:	74bb      	strb	r3, [r7, #18]
  uuid[14] |= 0x10; /* Pressure value*/
 8002082:	7cbb      	ldrb	r3, [r7, #18]
 8002084:	f043 0310 	orr.w	r3, r3, #16
 8002088:	b2db      	uxtb	r3, r3
 800208a:	74bb      	strb	r3, [r7, #18]
  BLUENRG_memcpy(&char_uuid.Char_UUID_128, uuid, 16);
 800208c:	4b34      	ldr	r3, [pc, #208]	; (8002160 <Add_HWServW2ST_Service+0x198>)
 800208e:	461c      	mov	r4, r3
 8002090:	1d3b      	adds	r3, r7, #4
 8002092:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002094:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  ret =  aci_gatt_add_char(HWServW2STHandle, UUID_TYPE_128, char_uuid.Char_UUID_128,
 8002098:	4b30      	ldr	r3, [pc, #192]	; (800215c <Add_HWServW2ST_Service+0x194>)
 800209a:	8818      	ldrh	r0, [r3, #0]
 800209c:	4b31      	ldr	r3, [pc, #196]	; (8002164 <Add_HWServW2ST_Service+0x19c>)
 800209e:	9305      	str	r3, [sp, #20]
 80020a0:	2300      	movs	r3, #0
 80020a2:	9304      	str	r3, [sp, #16]
 80020a4:	2310      	movs	r3, #16
 80020a6:	9303      	str	r3, [sp, #12]
 80020a8:	2304      	movs	r3, #4
 80020aa:	9302      	str	r3, [sp, #8]
 80020ac:	2300      	movs	r3, #0
 80020ae:	9301      	str	r3, [sp, #4]
 80020b0:	2312      	movs	r3, #18
 80020b2:	9300      	str	r3, [sp, #0]
 80020b4:	2308      	movs	r3, #8
 80020b6:	4a2a      	ldr	r2, [pc, #168]	; (8002160 <Add_HWServW2ST_Service+0x198>)
 80020b8:	2102      	movs	r1, #2
 80020ba:	f009 fde3 	bl	800bc84 <aci_gatt_add_char>
 80020be:	4603      	mov	r3, r0
 80020c0:	75fb      	strb	r3, [r7, #23]
                           2+2+4,
                           CHAR_PROP_NOTIFY|CHAR_PROP_READ,
                           ATTR_PERMISSION_NONE,
                           GATT_NOTIFY_READ_REQ_AND_WAIT_FOR_APPL_RESP,
                           16, 0, &EnvironmentalCharHandle);
  if (ret != BLE_STATUS_SUCCESS)
 80020c2:	7dfb      	ldrb	r3, [r7, #23]
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d001      	beq.n	80020cc <Add_HWServW2ST_Service+0x104>
    return BLE_STATUS_ERROR;
 80020c8:	2347      	movs	r3, #71	; 0x47
 80020ca:	e040      	b.n	800214e <Add_HWServW2ST_Service+0x186>

  /* Fill the AccGyroMag BLE Characteristc */
  COPY_ACC_GYRO_MAG_W2ST_CHAR_UUID(uuid);
 80020cc:	231b      	movs	r3, #27
 80020ce:	713b      	strb	r3, [r7, #4]
 80020d0:	23c5      	movs	r3, #197	; 0xc5
 80020d2:	717b      	strb	r3, [r7, #5]
 80020d4:	23d5      	movs	r3, #213	; 0xd5
 80020d6:	71bb      	strb	r3, [r7, #6]
 80020d8:	23a5      	movs	r3, #165	; 0xa5
 80020da:	71fb      	strb	r3, [r7, #7]
 80020dc:	2302      	movs	r3, #2
 80020de:	723b      	strb	r3, [r7, #8]
 80020e0:	2300      	movs	r3, #0
 80020e2:	727b      	strb	r3, [r7, #9]
 80020e4:	2336      	movs	r3, #54	; 0x36
 80020e6:	72bb      	strb	r3, [r7, #10]
 80020e8:	23ac      	movs	r3, #172	; 0xac
 80020ea:	72fb      	strb	r3, [r7, #11]
 80020ec:	23e1      	movs	r3, #225	; 0xe1
 80020ee:	733b      	strb	r3, [r7, #12]
 80020f0:	2311      	movs	r3, #17
 80020f2:	737b      	strb	r3, [r7, #13]
 80020f4:	2301      	movs	r3, #1
 80020f6:	73bb      	strb	r3, [r7, #14]
 80020f8:	2300      	movs	r3, #0
 80020fa:	73fb      	strb	r3, [r7, #15]
 80020fc:	2300      	movs	r3, #0
 80020fe:	743b      	strb	r3, [r7, #16]
 8002100:	2300      	movs	r3, #0
 8002102:	747b      	strb	r3, [r7, #17]
 8002104:	23e0      	movs	r3, #224	; 0xe0
 8002106:	74bb      	strb	r3, [r7, #18]
 8002108:	2300      	movs	r3, #0
 800210a:	74fb      	strb	r3, [r7, #19]
  BLUENRG_memcpy(&char_uuid.Char_UUID_128, uuid, 16);
 800210c:	4b14      	ldr	r3, [pc, #80]	; (8002160 <Add_HWServW2ST_Service+0x198>)
 800210e:	461c      	mov	r4, r3
 8002110:	1d3b      	adds	r3, r7, #4
 8002112:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002114:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  ret =  aci_gatt_add_char(HWServW2STHandle, UUID_TYPE_128, char_uuid.Char_UUID_128,
 8002118:	4b10      	ldr	r3, [pc, #64]	; (800215c <Add_HWServW2ST_Service+0x194>)
 800211a:	8818      	ldrh	r0, [r3, #0]
 800211c:	4b12      	ldr	r3, [pc, #72]	; (8002168 <Add_HWServW2ST_Service+0x1a0>)
 800211e:	9305      	str	r3, [sp, #20]
 8002120:	2300      	movs	r3, #0
 8002122:	9304      	str	r3, [sp, #16]
 8002124:	2310      	movs	r3, #16
 8002126:	9303      	str	r3, [sp, #12]
 8002128:	2304      	movs	r3, #4
 800212a:	9302      	str	r3, [sp, #8]
 800212c:	2300      	movs	r3, #0
 800212e:	9301      	str	r3, [sp, #4]
 8002130:	2310      	movs	r3, #16
 8002132:	9300      	str	r3, [sp, #0]
 8002134:	2314      	movs	r3, #20
 8002136:	4a0a      	ldr	r2, [pc, #40]	; (8002160 <Add_HWServW2ST_Service+0x198>)
 8002138:	2102      	movs	r1, #2
 800213a:	f009 fda3 	bl	800bc84 <aci_gatt_add_char>
 800213e:	4603      	mov	r3, r0
 8002140:	75fb      	strb	r3, [r7, #23]
                           2+3*3*2,
                           CHAR_PROP_NOTIFY,
                           ATTR_PERMISSION_NONE,
                           GATT_NOTIFY_READ_REQ_AND_WAIT_FOR_APPL_RESP,
                           16, 0, &AccGyroMagCharHandle);
  if (ret != BLE_STATUS_SUCCESS)
 8002142:	7dfb      	ldrb	r3, [r7, #23]
 8002144:	2b00      	cmp	r3, #0
 8002146:	d001      	beq.n	800214c <Add_HWServW2ST_Service+0x184>
    return BLE_STATUS_ERROR;
 8002148:	2347      	movs	r3, #71	; 0x47
 800214a:	e000      	b.n	800214e <Add_HWServW2ST_Service+0x186>

  return BLE_STATUS_SUCCESS;
 800214c:	2300      	movs	r3, #0
}
 800214e:	4618      	mov	r0, r3
 8002150:	371c      	adds	r7, #28
 8002152:	46bd      	mov	sp, r7
 8002154:	bd90      	pop	{r4, r7, pc}
 8002156:	bf00      	nop
 8002158:	20000194 	.word	0x20000194
 800215c:	20000188 	.word	0x20000188
 8002160:	200001a4 	.word	0x200001a4
 8002164:	2000018a 	.word	0x2000018a
 8002168:	2000018c 	.word	0x2000018c

0800216c <Add_SWServW2ST_Service>:
 * @brief  Add the SW Feature service using a vendor specific profile
 * @param  None
 * @retval tBleStatus Status
 */
tBleStatus Add_SWServW2ST_Service(void)
{
 800216c:	b590      	push	{r4, r7, lr}
 800216e:	b08d      	sub	sp, #52	; 0x34
 8002170:	af06      	add	r7, sp, #24
  tBleStatus ret;
  int32_t NumberOfRecords=1;
 8002172:	2301      	movs	r3, #1
 8002174:	617b      	str	r3, [r7, #20]
  uint8_t uuid[16];

  COPY_SW_SENS_W2ST_SERVICE_UUID(uuid);
 8002176:	231b      	movs	r3, #27
 8002178:	703b      	strb	r3, [r7, #0]
 800217a:	23c5      	movs	r3, #197	; 0xc5
 800217c:	707b      	strb	r3, [r7, #1]
 800217e:	23d5      	movs	r3, #213	; 0xd5
 8002180:	70bb      	strb	r3, [r7, #2]
 8002182:	23a5      	movs	r3, #165	; 0xa5
 8002184:	70fb      	strb	r3, [r7, #3]
 8002186:	2302      	movs	r3, #2
 8002188:	713b      	strb	r3, [r7, #4]
 800218a:	2300      	movs	r3, #0
 800218c:	717b      	strb	r3, [r7, #5]
 800218e:	23b4      	movs	r3, #180	; 0xb4
 8002190:	71bb      	strb	r3, [r7, #6]
 8002192:	239a      	movs	r3, #154	; 0x9a
 8002194:	71fb      	strb	r3, [r7, #7]
 8002196:	23e1      	movs	r3, #225	; 0xe1
 8002198:	723b      	strb	r3, [r7, #8]
 800219a:	2311      	movs	r3, #17
 800219c:	727b      	strb	r3, [r7, #9]
 800219e:	2302      	movs	r3, #2
 80021a0:	72bb      	strb	r3, [r7, #10]
 80021a2:	2300      	movs	r3, #0
 80021a4:	72fb      	strb	r3, [r7, #11]
 80021a6:	2300      	movs	r3, #0
 80021a8:	733b      	strb	r3, [r7, #12]
 80021aa:	2300      	movs	r3, #0
 80021ac:	737b      	strb	r3, [r7, #13]
 80021ae:	2300      	movs	r3, #0
 80021b0:	73bb      	strb	r3, [r7, #14]
 80021b2:	2300      	movs	r3, #0
 80021b4:	73fb      	strb	r3, [r7, #15]
  BLUENRG_memcpy(&service_uuid.Service_UUID_128, uuid, 16);
 80021b6:	4b31      	ldr	r3, [pc, #196]	; (800227c <Add_SWServW2ST_Service+0x110>)
 80021b8:	461c      	mov	r4, r3
 80021ba:	463b      	mov	r3, r7
 80021bc:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80021be:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  ret = aci_gatt_add_serv(UUID_TYPE_128, service_uuid.Service_UUID_128, PRIMARY_SERVICE,
 80021c2:	697b      	ldr	r3, [r7, #20]
 80021c4:	b2db      	uxtb	r3, r3
 80021c6:	461a      	mov	r2, r3
 80021c8:	0052      	lsls	r2, r2, #1
 80021ca:	4413      	add	r3, r2
 80021cc:	b2db      	uxtb	r3, r3
 80021ce:	3301      	adds	r3, #1
 80021d0:	b2db      	uxtb	r3, r3
 80021d2:	4a2b      	ldr	r2, [pc, #172]	; (8002280 <Add_SWServW2ST_Service+0x114>)
 80021d4:	9200      	str	r2, [sp, #0]
 80021d6:	2201      	movs	r2, #1
 80021d8:	4928      	ldr	r1, [pc, #160]	; (800227c <Add_SWServW2ST_Service+0x110>)
 80021da:	2002      	movs	r0, #2
 80021dc:	f009 fcc9 	bl	800bb72 <aci_gatt_add_serv>
 80021e0:	4603      	mov	r3, r0
 80021e2:	74fb      	strb	r3, [r7, #19]
                          1+3*NumberOfRecords, &SWServW2STHandle);

  if (ret != BLE_STATUS_SUCCESS) {
 80021e4:	7cfb      	ldrb	r3, [r7, #19]
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d13f      	bne.n	800226a <Add_SWServW2ST_Service+0xfe>
    goto fail;
  }

  COPY_QUATERNIONS_W2ST_CHAR_UUID(uuid);
 80021ea:	231b      	movs	r3, #27
 80021ec:	703b      	strb	r3, [r7, #0]
 80021ee:	23c5      	movs	r3, #197	; 0xc5
 80021f0:	707b      	strb	r3, [r7, #1]
 80021f2:	23d5      	movs	r3, #213	; 0xd5
 80021f4:	70bb      	strb	r3, [r7, #2]
 80021f6:	23a5      	movs	r3, #165	; 0xa5
 80021f8:	70fb      	strb	r3, [r7, #3]
 80021fa:	2302      	movs	r3, #2
 80021fc:	713b      	strb	r3, [r7, #4]
 80021fe:	2300      	movs	r3, #0
 8002200:	717b      	strb	r3, [r7, #5]
 8002202:	2336      	movs	r3, #54	; 0x36
 8002204:	71bb      	strb	r3, [r7, #6]
 8002206:	23ac      	movs	r3, #172	; 0xac
 8002208:	71fb      	strb	r3, [r7, #7]
 800220a:	23e1      	movs	r3, #225	; 0xe1
 800220c:	723b      	strb	r3, [r7, #8]
 800220e:	2311      	movs	r3, #17
 8002210:	727b      	strb	r3, [r7, #9]
 8002212:	2301      	movs	r3, #1
 8002214:	72bb      	strb	r3, [r7, #10]
 8002216:	2300      	movs	r3, #0
 8002218:	72fb      	strb	r3, [r7, #11]
 800221a:	2300      	movs	r3, #0
 800221c:	733b      	strb	r3, [r7, #12]
 800221e:	2301      	movs	r3, #1
 8002220:	737b      	strb	r3, [r7, #13]
 8002222:	2300      	movs	r3, #0
 8002224:	73bb      	strb	r3, [r7, #14]
 8002226:	2300      	movs	r3, #0
 8002228:	73fb      	strb	r3, [r7, #15]
  BLUENRG_memcpy(&char_uuid.Char_UUID_128, uuid, 16);
 800222a:	4b16      	ldr	r3, [pc, #88]	; (8002284 <Add_SWServW2ST_Service+0x118>)
 800222c:	461c      	mov	r4, r3
 800222e:	463b      	mov	r3, r7
 8002230:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002232:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  ret =  aci_gatt_add_char(SWServW2STHandle, UUID_TYPE_128, char_uuid.Char_UUID_128,
 8002236:	4b12      	ldr	r3, [pc, #72]	; (8002280 <Add_SWServW2ST_Service+0x114>)
 8002238:	8818      	ldrh	r0, [r3, #0]
 800223a:	4b13      	ldr	r3, [pc, #76]	; (8002288 <Add_SWServW2ST_Service+0x11c>)
 800223c:	9305      	str	r3, [sp, #20]
 800223e:	2300      	movs	r3, #0
 8002240:	9304      	str	r3, [sp, #16]
 8002242:	2310      	movs	r3, #16
 8002244:	9303      	str	r3, [sp, #12]
 8002246:	2304      	movs	r3, #4
 8002248:	9302      	str	r3, [sp, #8]
 800224a:	2300      	movs	r3, #0
 800224c:	9301      	str	r3, [sp, #4]
 800224e:	2310      	movs	r3, #16
 8002250:	9300      	str	r3, [sp, #0]
 8002252:	2308      	movs	r3, #8
 8002254:	4a0b      	ldr	r2, [pc, #44]	; (8002284 <Add_SWServW2ST_Service+0x118>)
 8002256:	2102      	movs	r1, #2
 8002258:	f009 fd14 	bl	800bc84 <aci_gatt_add_char>
 800225c:	4603      	mov	r3, r0
 800225e:	74fb      	strb	r3, [r7, #19]
                           CHAR_PROP_NOTIFY,
                           ATTR_PERMISSION_NONE,
                           GATT_NOTIFY_READ_REQ_AND_WAIT_FOR_APPL_RESP,
                           16, 0, &QuaternionsCharHandle);

  if (ret != BLE_STATUS_SUCCESS) {
 8002260:	7cfb      	ldrb	r3, [r7, #19]
 8002262:	2b00      	cmp	r3, #0
 8002264:	d103      	bne.n	800226e <Add_SWServW2ST_Service+0x102>
    goto fail;
  }

  return BLE_STATUS_SUCCESS;
 8002266:	2300      	movs	r3, #0
 8002268:	e003      	b.n	8002272 <Add_SWServW2ST_Service+0x106>
    goto fail;
 800226a:	bf00      	nop
 800226c:	e000      	b.n	8002270 <Add_SWServW2ST_Service+0x104>
    goto fail;
 800226e:	bf00      	nop

fail:
  return BLE_STATUS_ERROR;
 8002270:	2347      	movs	r3, #71	; 0x47
}
 8002272:	4618      	mov	r0, r3
 8002274:	371c      	adds	r7, #28
 8002276:	46bd      	mov	sp, r7
 8002278:	bd90      	pop	{r4, r7, pc}
 800227a:	bf00      	nop
 800227c:	20000194 	.word	0x20000194
 8002280:	2000018e 	.word	0x2000018e
 8002284:	200001a4 	.word	0x200001a4
 8002288:	20000190 	.word	0x20000190

0800228c <Acc_Update>:
 * @brief  Update acceleration characteristic value
 * @param  AxesRaw_t structure containing acceleration value in mg.
 * @retval tBleStatus Status
 */
tBleStatus Acc_Update(AxesRaw_t *x_axes, AxesRaw_t *g_axes, AxesRaw_t *m_axes)
{
 800228c:	b580      	push	{r7, lr}
 800228e:	b08c      	sub	sp, #48	; 0x30
 8002290:	af02      	add	r7, sp, #8
 8002292:	60f8      	str	r0, [r7, #12]
 8002294:	60b9      	str	r1, [r7, #8]
 8002296:	607a      	str	r2, [r7, #4]
  uint8_t buff[2+2*3*3];
  tBleStatus ret;

  HOST_TO_LE_16(buff,(HAL_GetTick()>>3));
 8002298:	f006 fa44 	bl	8008724 <HAL_GetTick>
 800229c:	4603      	mov	r3, r0
 800229e:	08db      	lsrs	r3, r3, #3
 80022a0:	b2db      	uxtb	r3, r3
 80022a2:	743b      	strb	r3, [r7, #16]
 80022a4:	f006 fa3e 	bl	8008724 <HAL_GetTick>
 80022a8:	4603      	mov	r3, r0
 80022aa:	0adb      	lsrs	r3, r3, #11
 80022ac:	b2db      	uxtb	r3, r3
 80022ae:	747b      	strb	r3, [r7, #17]

  HOST_TO_LE_16(buff+2,-x_axes->AXIS_Y);
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	685b      	ldr	r3, [r3, #4]
 80022b4:	b2db      	uxtb	r3, r3
 80022b6:	425b      	negs	r3, r3
 80022b8:	b2db      	uxtb	r3, r3
 80022ba:	74bb      	strb	r3, [r7, #18]
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	685b      	ldr	r3, [r3, #4]
 80022c0:	425b      	negs	r3, r3
 80022c2:	121b      	asrs	r3, r3, #8
 80022c4:	b2db      	uxtb	r3, r3
 80022c6:	74fb      	strb	r3, [r7, #19]
  HOST_TO_LE_16(buff+4, x_axes->AXIS_X);
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	b2db      	uxtb	r3, r3
 80022ce:	753b      	strb	r3, [r7, #20]
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	121b      	asrs	r3, r3, #8
 80022d6:	b2db      	uxtb	r3, r3
 80022d8:	757b      	strb	r3, [r7, #21]
  HOST_TO_LE_16(buff+6,-x_axes->AXIS_Z);
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	689b      	ldr	r3, [r3, #8]
 80022de:	b2db      	uxtb	r3, r3
 80022e0:	425b      	negs	r3, r3
 80022e2:	b2db      	uxtb	r3, r3
 80022e4:	75bb      	strb	r3, [r7, #22]
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	689b      	ldr	r3, [r3, #8]
 80022ea:	425b      	negs	r3, r3
 80022ec:	121b      	asrs	r3, r3, #8
 80022ee:	b2db      	uxtb	r3, r3
 80022f0:	75fb      	strb	r3, [r7, #23]

  HOST_TO_LE_16(buff+8,g_axes->AXIS_Y);
 80022f2:	68bb      	ldr	r3, [r7, #8]
 80022f4:	685b      	ldr	r3, [r3, #4]
 80022f6:	b2db      	uxtb	r3, r3
 80022f8:	763b      	strb	r3, [r7, #24]
 80022fa:	68bb      	ldr	r3, [r7, #8]
 80022fc:	685b      	ldr	r3, [r3, #4]
 80022fe:	121b      	asrs	r3, r3, #8
 8002300:	b2db      	uxtb	r3, r3
 8002302:	767b      	strb	r3, [r7, #25]
  HOST_TO_LE_16(buff+10,g_axes->AXIS_X);
 8002304:	68bb      	ldr	r3, [r7, #8]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	b2db      	uxtb	r3, r3
 800230a:	76bb      	strb	r3, [r7, #26]
 800230c:	68bb      	ldr	r3, [r7, #8]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	121b      	asrs	r3, r3, #8
 8002312:	b2db      	uxtb	r3, r3
 8002314:	76fb      	strb	r3, [r7, #27]
  HOST_TO_LE_16(buff+12,g_axes->AXIS_Z);
 8002316:	68bb      	ldr	r3, [r7, #8]
 8002318:	689b      	ldr	r3, [r3, #8]
 800231a:	b2db      	uxtb	r3, r3
 800231c:	773b      	strb	r3, [r7, #28]
 800231e:	68bb      	ldr	r3, [r7, #8]
 8002320:	689b      	ldr	r3, [r3, #8]
 8002322:	121b      	asrs	r3, r3, #8
 8002324:	b2db      	uxtb	r3, r3
 8002326:	777b      	strb	r3, [r7, #29]

  HOST_TO_LE_16(buff+14,m_axes->AXIS_Y);
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	685b      	ldr	r3, [r3, #4]
 800232c:	b2db      	uxtb	r3, r3
 800232e:	77bb      	strb	r3, [r7, #30]
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	685b      	ldr	r3, [r3, #4]
 8002334:	121b      	asrs	r3, r3, #8
 8002336:	b2db      	uxtb	r3, r3
 8002338:	77fb      	strb	r3, [r7, #31]
  HOST_TO_LE_16(buff+16,m_axes->AXIS_X);
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	b2db      	uxtb	r3, r3
 8002340:	f887 3020 	strb.w	r3, [r7, #32]
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	121b      	asrs	r3, r3, #8
 800234a:	b2db      	uxtb	r3, r3
 800234c:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
  HOST_TO_LE_16(buff+18,m_axes->AXIS_Z);
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	689b      	ldr	r3, [r3, #8]
 8002354:	b2db      	uxtb	r3, r3
 8002356:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	689b      	ldr	r3, [r3, #8]
 800235e:	121b      	asrs	r3, r3, #8
 8002360:	b2db      	uxtb	r3, r3
 8002362:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  ret = aci_gatt_update_char_value(HWServW2STHandle, AccGyroMagCharHandle,
 8002366:	4b0c      	ldr	r3, [pc, #48]	; (8002398 <Acc_Update+0x10c>)
 8002368:	8818      	ldrh	r0, [r3, #0]
 800236a:	4b0c      	ldr	r3, [pc, #48]	; (800239c <Acc_Update+0x110>)
 800236c:	8819      	ldrh	r1, [r3, #0]
 800236e:	f107 0310 	add.w	r3, r7, #16
 8002372:	9300      	str	r3, [sp, #0]
 8002374:	2314      	movs	r3, #20
 8002376:	2200      	movs	r2, #0
 8002378:	f009 fd4f 	bl	800be1a <aci_gatt_update_char_value>
 800237c:	4603      	mov	r3, r0
 800237e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				   0, 2+2*3*3, buff);
  if (ret != BLE_STATUS_SUCCESS){
 8002382:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002386:	2b00      	cmp	r3, #0
 8002388:	d001      	beq.n	800238e <Acc_Update+0x102>
    PRINTF("Error while updating Acceleration characteristic: 0x%02X\n",ret) ;
    return BLE_STATUS_ERROR ;
 800238a:	2347      	movs	r3, #71	; 0x47
 800238c:	e000      	b.n	8002390 <Acc_Update+0x104>
  }

  return BLE_STATUS_SUCCESS;
 800238e:	2300      	movs	r3, #0
}
 8002390:	4618      	mov	r0, r3
 8002392:	3728      	adds	r7, #40	; 0x28
 8002394:	46bd      	mov	sp, r7
 8002396:	bd80      	pop	{r7, pc}
 8002398:	20000188 	.word	0x20000188
 800239c:	2000018c 	.word	0x2000018c

080023a0 <Quat_Update>:
 * @brief  Update quaternions characteristic value
 * @param  SensorAxes_t *data Structure containing the quaterions
 * @retval tBleStatus      Status
 */
tBleStatus Quat_Update(AxesRaw_t *data)
{
 80023a0:	b580      	push	{r7, lr}
 80023a2:	b088      	sub	sp, #32
 80023a4:	af02      	add	r7, sp, #8
 80023a6:	6078      	str	r0, [r7, #4]
  tBleStatus ret;
  uint8_t buff[2+6*SEND_N_QUATERNIONS];

  HOST_TO_LE_16(buff,(HAL_GetTick()>>3));
 80023a8:	f006 f9bc 	bl	8008724 <HAL_GetTick>
 80023ac:	4603      	mov	r3, r0
 80023ae:	08db      	lsrs	r3, r3, #3
 80023b0:	b2db      	uxtb	r3, r3
 80023b2:	733b      	strb	r3, [r7, #12]
 80023b4:	f006 f9b6 	bl	8008724 <HAL_GetTick>
 80023b8:	4603      	mov	r3, r0
 80023ba:	0adb      	lsrs	r3, r3, #11
 80023bc:	b2db      	uxtb	r3, r3
 80023be:	737b      	strb	r3, [r7, #13]

#if SEND_N_QUATERNIONS == 1
  HOST_TO_LE_16(buff+2,data[0].AXIS_X);
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	b2db      	uxtb	r3, r3
 80023c6:	73bb      	strb	r3, [r7, #14]
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	121b      	asrs	r3, r3, #8
 80023ce:	b2db      	uxtb	r3, r3
 80023d0:	73fb      	strb	r3, [r7, #15]
  HOST_TO_LE_16(buff+4,data[0].AXIS_Y);
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	685b      	ldr	r3, [r3, #4]
 80023d6:	b2db      	uxtb	r3, r3
 80023d8:	743b      	strb	r3, [r7, #16]
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	685b      	ldr	r3, [r3, #4]
 80023de:	121b      	asrs	r3, r3, #8
 80023e0:	b2db      	uxtb	r3, r3
 80023e2:	747b      	strb	r3, [r7, #17]
  HOST_TO_LE_16(buff+6,data[0].AXIS_Z);
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	689b      	ldr	r3, [r3, #8]
 80023e8:	b2db      	uxtb	r3, r3
 80023ea:	74bb      	strb	r3, [r7, #18]
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	689b      	ldr	r3, [r3, #8]
 80023f0:	121b      	asrs	r3, r3, #8
 80023f2:	b2db      	uxtb	r3, r3
 80023f4:	74fb      	strb	r3, [r7, #19]
  HOST_TO_LE_16(buff+18,data[2].AXIS_Z);
#else
#error SEND_N_QUATERNIONS could be only 1,2,3
#endif

  ret = aci_gatt_update_char_value(SWServW2STHandle, QuaternionsCharHandle,
 80023f6:	4b0b      	ldr	r3, [pc, #44]	; (8002424 <Quat_Update+0x84>)
 80023f8:	8818      	ldrh	r0, [r3, #0]
 80023fa:	4b0b      	ldr	r3, [pc, #44]	; (8002428 <Quat_Update+0x88>)
 80023fc:	8819      	ldrh	r1, [r3, #0]
 80023fe:	f107 030c 	add.w	r3, r7, #12
 8002402:	9300      	str	r3, [sp, #0]
 8002404:	2308      	movs	r3, #8
 8002406:	2200      	movs	r2, #0
 8002408:	f009 fd07 	bl	800be1a <aci_gatt_update_char_value>
 800240c:	4603      	mov	r3, r0
 800240e:	75fb      	strb	r3, [r7, #23]
				   0, 2+6*SEND_N_QUATERNIONS, buff);
  if (ret != BLE_STATUS_SUCCESS){
 8002410:	7dfb      	ldrb	r3, [r7, #23]
 8002412:	2b00      	cmp	r3, #0
 8002414:	d001      	beq.n	800241a <Quat_Update+0x7a>
    PRINTF("Error while updating Sensor Fusion characteristic: 0x%02X\n",ret) ;
    return BLE_STATUS_ERROR ;
 8002416:	2347      	movs	r3, #71	; 0x47
 8002418:	e000      	b.n	800241c <Quat_Update+0x7c>
  }

  return BLE_STATUS_SUCCESS;
 800241a:	2300      	movs	r3, #0
}
 800241c:	4618      	mov	r0, r3
 800241e:	3718      	adds	r7, #24
 8002420:	46bd      	mov	sp, r7
 8002422:	bd80      	pop	{r7, pc}
 8002424:	2000018e 	.word	0x2000018e
 8002428:	20000190 	.word	0x20000190

0800242c <Read_Request_CB>:
* Description    : Update the sensor values.
* Input          : Handle of the characteristic to update.
* Return         : None.
*******************************************************************************/
void Read_Request_CB(uint16_t handle)
{
 800242c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002430:	b08e      	sub	sp, #56	; 0x38
 8002432:	af00      	add	r7, sp, #0
 8002434:	4603      	mov	r3, r0
 8002436:	84fb      	strh	r3, [r7, #38]	; 0x26
  tBleStatus ret;

  if(handle == AccGyroMagCharHandle + 1)
 8002438:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800243a:	4b57      	ldr	r3, [pc, #348]	; (8002598 <Read_Request_CB+0x16c>)
 800243c:	881b      	ldrh	r3, [r3, #0]
 800243e:	3301      	adds	r3, #1
 8002440:	429a      	cmp	r2, r3
 8002442:	d105      	bne.n	8002450 <Read_Request_CB+0x24>
  {
    Acc_Update(&x_axes, &g_axes, &m_axes);
 8002444:	4a55      	ldr	r2, [pc, #340]	; (800259c <Read_Request_CB+0x170>)
 8002446:	4956      	ldr	r1, [pc, #344]	; (80025a0 <Read_Request_CB+0x174>)
 8002448:	4856      	ldr	r0, [pc, #344]	; (80025a4 <Read_Request_CB+0x178>)
 800244a:	f7ff ff1f 	bl	800228c <Acc_Update>
 800244e:	e091      	b.n	8002574 <Read_Request_CB+0x148>
  }
  else if (handle == EnvironmentalCharHandle + 1)
 8002450:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8002452:	4b55      	ldr	r3, [pc, #340]	; (80025a8 <Read_Request_CB+0x17c>)
 8002454:	881b      	ldrh	r3, [r3, #0]
 8002456:	3301      	adds	r3, #1
 8002458:	429a      	cmp	r2, r3
 800245a:	f040 808b 	bne.w	8002574 <Read_Request_CB+0x148>
  {
    float data_t, data_p;
    data_t = 27.0 + ((uint64_t)rand()*5)/RAND_MAX; //T sensor emulation
 800245e:	f00a fb25 	bl	800caac <rand>
 8002462:	4603      	mov	r3, r0
 8002464:	17da      	asrs	r2, r3, #31
 8002466:	61bb      	str	r3, [r7, #24]
 8002468:	61fa      	str	r2, [r7, #28]
 800246a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800246e:	f04f 0000 	mov.w	r0, #0
 8002472:	f04f 0100 	mov.w	r1, #0
 8002476:	0099      	lsls	r1, r3, #2
 8002478:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 800247c:	0090      	lsls	r0, r2, #2
 800247e:	4602      	mov	r2, r0
 8002480:	460b      	mov	r3, r1
 8002482:	69b9      	ldr	r1, [r7, #24]
 8002484:	1851      	adds	r1, r2, r1
 8002486:	6139      	str	r1, [r7, #16]
 8002488:	69f9      	ldr	r1, [r7, #28]
 800248a:	eb43 0101 	adc.w	r1, r3, r1
 800248e:	6179      	str	r1, [r7, #20]
 8002490:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8002494:	f04f 0300 	mov.w	r3, #0
 8002498:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800249c:	f7fe f904 	bl	80006a8 <__aeabi_uldivmod>
 80024a0:	4602      	mov	r2, r0
 80024a2:	460b      	mov	r3, r1
 80024a4:	4610      	mov	r0, r2
 80024a6:	4619      	mov	r1, r3
 80024a8:	f7fe f878 	bl	800059c <__aeabi_ul2d>
 80024ac:	f04f 0200 	mov.w	r2, #0
 80024b0:	4b3e      	ldr	r3, [pc, #248]	; (80025ac <Read_Request_CB+0x180>)
 80024b2:	f7fd fef3 	bl	800029c <__adddf3>
 80024b6:	4602      	mov	r2, r0
 80024b8:	460b      	mov	r3, r1
 80024ba:	4610      	mov	r0, r2
 80024bc:	4619      	mov	r1, r3
 80024be:	f7fe f8a3 	bl	8000608 <__aeabi_d2f>
 80024c2:	4603      	mov	r3, r0
 80024c4:	637b      	str	r3, [r7, #52]	; 0x34
    data_p = 1000.0 + ((uint64_t)rand()*100)/RAND_MAX; //P sensor emulation
 80024c6:	f00a faf1 	bl	800caac <rand>
 80024ca:	4603      	mov	r3, r0
 80024cc:	17da      	asrs	r2, r3, #31
 80024ce:	4698      	mov	r8, r3
 80024d0:	4691      	mov	r9, r2
 80024d2:	4642      	mov	r2, r8
 80024d4:	464b      	mov	r3, r9
 80024d6:	1891      	adds	r1, r2, r2
 80024d8:	6039      	str	r1, [r7, #0]
 80024da:	415b      	adcs	r3, r3
 80024dc:	607b      	str	r3, [r7, #4]
 80024de:	e9d7 2300 	ldrd	r2, r3, [r7]
 80024e2:	eb12 0408 	adds.w	r4, r2, r8
 80024e6:	eb43 0509 	adc.w	r5, r3, r9
 80024ea:	f04f 0200 	mov.w	r2, #0
 80024ee:	f04f 0300 	mov.w	r3, #0
 80024f2:	016b      	lsls	r3, r5, #5
 80024f4:	ea43 63d4 	orr.w	r3, r3, r4, lsr #27
 80024f8:	0162      	lsls	r2, r4, #5
 80024fa:	eb14 0a02 	adds.w	sl, r4, r2
 80024fe:	eb45 0b03 	adc.w	fp, r5, r3
 8002502:	eb1a 0308 	adds.w	r3, sl, r8
 8002506:	60bb      	str	r3, [r7, #8]
 8002508:	eb4b 0309 	adc.w	r3, fp, r9
 800250c:	60fb      	str	r3, [r7, #12]
 800250e:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8002512:	f04f 0300 	mov.w	r3, #0
 8002516:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800251a:	f7fe f8c5 	bl	80006a8 <__aeabi_uldivmod>
 800251e:	4602      	mov	r2, r0
 8002520:	460b      	mov	r3, r1
 8002522:	4610      	mov	r0, r2
 8002524:	4619      	mov	r1, r3
 8002526:	f7fe f839 	bl	800059c <__aeabi_ul2d>
 800252a:	f04f 0200 	mov.w	r2, #0
 800252e:	4b20      	ldr	r3, [pc, #128]	; (80025b0 <Read_Request_CB+0x184>)
 8002530:	f7fd feb4 	bl	800029c <__adddf3>
 8002534:	4602      	mov	r2, r0
 8002536:	460b      	mov	r3, r1
 8002538:	4610      	mov	r0, r2
 800253a:	4619      	mov	r1, r3
 800253c:	f7fe f864 	bl	8000608 <__aeabi_d2f>
 8002540:	4603      	mov	r3, r0
 8002542:	633b      	str	r3, [r7, #48]	; 0x30
    BlueMS_Environmental_Update((int32_t)(data_p *100), (int16_t)(data_t * 10));
 8002544:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8002548:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 80025b4 <Read_Request_CB+0x188>
 800254c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002550:	eefd 6ae7 	vcvt.s32.f32	s13, s15
 8002554:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8002558:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 800255c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002560:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002564:	ee17 3a90 	vmov	r3, s15
 8002568:	b21b      	sxth	r3, r3
 800256a:	4619      	mov	r1, r3
 800256c:	ee16 0a90 	vmov	r0, s13
 8002570:	f000 f824 	bl	80025bc <BlueMS_Environmental_Update>
  }

  if(connection_handle !=0)
 8002574:	4b10      	ldr	r3, [pc, #64]	; (80025b8 <Read_Request_CB+0x18c>)
 8002576:	881b      	ldrh	r3, [r3, #0]
 8002578:	2b00      	cmp	r3, #0
 800257a:	d007      	beq.n	800258c <Read_Request_CB+0x160>
  {
    ret = aci_gatt_allow_read(connection_handle);
 800257c:	4b0e      	ldr	r3, [pc, #56]	; (80025b8 <Read_Request_CB+0x18c>)
 800257e:	881b      	ldrh	r3, [r3, #0]
 8002580:	4618      	mov	r0, r3
 8002582:	f009 fcda 	bl	800bf3a <aci_gatt_allow_read>
 8002586:	4603      	mov	r3, r0
 8002588:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (ret != BLE_STATUS_SUCCESS)
    {
      PRINTF("aci_gatt_allow_read() failed: 0x%02x\r\n", ret);
    }
  }
}
 800258c:	bf00      	nop
 800258e:	3738      	adds	r7, #56	; 0x38
 8002590:	46bd      	mov	sp, r7
 8002592:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002596:	bf00      	nop
 8002598:	2000018c 	.word	0x2000018c
 800259c:	200001d4 	.word	0x200001d4
 80025a0:	200001c8 	.word	0x200001c8
 80025a4:	200001bc 	.word	0x200001bc
 80025a8:	2000018a 	.word	0x2000018a
 80025ac:	403b0000 	.word	0x403b0000
 80025b0:	408f4000 	.word	0x408f4000
 80025b4:	42c80000 	.word	0x42c80000
 80025b8:	200001b4 	.word	0x200001b4

080025bc <BlueMS_Environmental_Update>:

tBleStatus BlueMS_Environmental_Update(int32_t press, int16_t temp)
{
 80025bc:	b580      	push	{r7, lr}
 80025be:	b088      	sub	sp, #32
 80025c0:	af02      	add	r7, sp, #8
 80025c2:	6078      	str	r0, [r7, #4]
 80025c4:	460b      	mov	r3, r1
 80025c6:	807b      	strh	r3, [r7, #2]
  tBleStatus ret;
  uint8_t buff[8];
  HOST_TO_LE_16(buff, HAL_GetTick()>>3);
 80025c8:	f006 f8ac 	bl	8008724 <HAL_GetTick>
 80025cc:	4603      	mov	r3, r0
 80025ce:	08db      	lsrs	r3, r3, #3
 80025d0:	b2db      	uxtb	r3, r3
 80025d2:	733b      	strb	r3, [r7, #12]
 80025d4:	f006 f8a6 	bl	8008724 <HAL_GetTick>
 80025d8:	4603      	mov	r3, r0
 80025da:	0adb      	lsrs	r3, r3, #11
 80025dc:	b2db      	uxtb	r3, r3
 80025de:	737b      	strb	r3, [r7, #13]

  HOST_TO_LE_32(buff+2,press);
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	b2db      	uxtb	r3, r3
 80025e4:	73bb      	strb	r3, [r7, #14]
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	121b      	asrs	r3, r3, #8
 80025ea:	b2db      	uxtb	r3, r3
 80025ec:	73fb      	strb	r3, [r7, #15]
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	141b      	asrs	r3, r3, #16
 80025f2:	b2db      	uxtb	r3, r3
 80025f4:	743b      	strb	r3, [r7, #16]
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	161b      	asrs	r3, r3, #24
 80025fa:	b2db      	uxtb	r3, r3
 80025fc:	747b      	strb	r3, [r7, #17]
  HOST_TO_LE_16(buff+6,temp);
 80025fe:	887b      	ldrh	r3, [r7, #2]
 8002600:	b2db      	uxtb	r3, r3
 8002602:	74bb      	strb	r3, [r7, #18]
 8002604:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8002608:	121b      	asrs	r3, r3, #8
 800260a:	b21b      	sxth	r3, r3
 800260c:	b2db      	uxtb	r3, r3
 800260e:	74fb      	strb	r3, [r7, #19]

  ret = aci_gatt_update_char_value(HWServW2STHandle, EnvironmentalCharHandle,
 8002610:	4b0b      	ldr	r3, [pc, #44]	; (8002640 <BlueMS_Environmental_Update+0x84>)
 8002612:	8818      	ldrh	r0, [r3, #0]
 8002614:	4b0b      	ldr	r3, [pc, #44]	; (8002644 <BlueMS_Environmental_Update+0x88>)
 8002616:	8819      	ldrh	r1, [r3, #0]
 8002618:	f107 030c 	add.w	r3, r7, #12
 800261c:	9300      	str	r3, [sp, #0]
 800261e:	2308      	movs	r3, #8
 8002620:	2200      	movs	r2, #0
 8002622:	f009 fbfa 	bl	800be1a <aci_gatt_update_char_value>
 8002626:	4603      	mov	r3, r0
 8002628:	75fb      	strb	r3, [r7, #23]
                                   0, 8, buff);

  if (ret != BLE_STATUS_SUCCESS){
 800262a:	7dfb      	ldrb	r3, [r7, #23]
 800262c:	2b00      	cmp	r3, #0
 800262e:	d001      	beq.n	8002634 <BlueMS_Environmental_Update+0x78>
    PRINTF("Error while updating TEMP characteristic: 0x%04X\n",ret) ;
    return BLE_STATUS_ERROR ;
 8002630:	2347      	movs	r3, #71	; 0x47
 8002632:	e000      	b.n	8002636 <BlueMS_Environmental_Update+0x7a>
  }

  return BLE_STATUS_SUCCESS;
 8002634:	2300      	movs	r3, #0
}
 8002636:	4618      	mov	r0, r3
 8002638:	3718      	adds	r7, #24
 800263a:	46bd      	mov	sp, r7
 800263c:	bd80      	pop	{r7, pc}
 800263e:	bf00      	nop
 8002640:	20000188 	.word	0x20000188
 8002644:	2000018a 	.word	0x2000018a

08002648 <Set_DeviceConnectable>:
 * Input          : None.
 * Output         : None.
 * Return         : None.
 *******************************************************************************/
void Set_DeviceConnectable(void)
{
 8002648:	b580      	push	{r7, lr}
 800264a:	b092      	sub	sp, #72	; 0x48
 800264c:	af08      	add	r7, sp, #32
  uint8_t ret;
  const char local_name[] = {AD_TYPE_COMPLETE_LOCAL_NAME,SENSOR_DEMO_NAME};
 800264e:	4a36      	ldr	r2, [pc, #216]	; (8002728 <Set_DeviceConnectable+0xe0>)
 8002650:	f107 031c 	add.w	r3, r7, #28
 8002654:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002658:	e883 0003 	stmia.w	r3, {r0, r1}

  uint8_t manuf_data[26] = {
 800265c:	2302      	movs	r3, #2
 800265e:	703b      	strb	r3, [r7, #0]
 8002660:	230a      	movs	r3, #10
 8002662:	707b      	strb	r3, [r7, #1]
 8002664:	2300      	movs	r3, #0
 8002666:	70bb      	strb	r3, [r7, #2]
 8002668:	2308      	movs	r3, #8
 800266a:	70fb      	strb	r3, [r7, #3]
 800266c:	2309      	movs	r3, #9
 800266e:	713b      	strb	r3, [r7, #4]
 8002670:	2342      	movs	r3, #66	; 0x42
 8002672:	717b      	strb	r3, [r7, #5]
 8002674:	236c      	movs	r3, #108	; 0x6c
 8002676:	71bb      	strb	r3, [r7, #6]
 8002678:	2375      	movs	r3, #117	; 0x75
 800267a:	71fb      	strb	r3, [r7, #7]
 800267c:	2365      	movs	r3, #101	; 0x65
 800267e:	723b      	strb	r3, [r7, #8]
 8002680:	234e      	movs	r3, #78	; 0x4e
 8002682:	727b      	strb	r3, [r7, #9]
 8002684:	2352      	movs	r3, #82	; 0x52
 8002686:	72bb      	strb	r3, [r7, #10]
 8002688:	2347      	movs	r3, #71	; 0x47
 800268a:	72fb      	strb	r3, [r7, #11]
 800268c:	230d      	movs	r3, #13
 800268e:	733b      	strb	r3, [r7, #12]
 8002690:	23ff      	movs	r3, #255	; 0xff
 8002692:	737b      	strb	r3, [r7, #13]
 8002694:	2301      	movs	r3, #1
 8002696:	73bb      	strb	r3, [r7, #14]
 8002698:	2380      	movs	r3, #128	; 0x80
 800269a:	73fb      	strb	r3, [r7, #15]
 800269c:	2300      	movs	r3, #0
 800269e:	743b      	strb	r3, [r7, #16]
 80026a0:	23f4      	movs	r3, #244	; 0xf4
 80026a2:	747b      	strb	r3, [r7, #17]
 80026a4:	2300      	movs	r3, #0
 80026a6:	74bb      	strb	r3, [r7, #18]
 80026a8:	2300      	movs	r3, #0
 80026aa:	74fb      	strb	r3, [r7, #19]
    0x80,
    0x00,
    0xF4, /* ACC+Gyro+Mag 0xE0 | 0x04 Temp | 0x10 Pressure */
    0x00, /*  */
    0x00, /*  */
    bdaddr[5], /* BLE MAC start -MSB first- */
 80026ac:	4b1f      	ldr	r3, [pc, #124]	; (800272c <Set_DeviceConnectable+0xe4>)
 80026ae:	795b      	ldrb	r3, [r3, #5]
  uint8_t manuf_data[26] = {
 80026b0:	753b      	strb	r3, [r7, #20]
    bdaddr[4],
 80026b2:	4b1e      	ldr	r3, [pc, #120]	; (800272c <Set_DeviceConnectable+0xe4>)
 80026b4:	791b      	ldrb	r3, [r3, #4]
  uint8_t manuf_data[26] = {
 80026b6:	757b      	strb	r3, [r7, #21]
    bdaddr[3],
 80026b8:	4b1c      	ldr	r3, [pc, #112]	; (800272c <Set_DeviceConnectable+0xe4>)
 80026ba:	78db      	ldrb	r3, [r3, #3]
  uint8_t manuf_data[26] = {
 80026bc:	75bb      	strb	r3, [r7, #22]
    bdaddr[2],
 80026be:	4b1b      	ldr	r3, [pc, #108]	; (800272c <Set_DeviceConnectable+0xe4>)
 80026c0:	789b      	ldrb	r3, [r3, #2]
  uint8_t manuf_data[26] = {
 80026c2:	75fb      	strb	r3, [r7, #23]
    bdaddr[1],
 80026c4:	4b19      	ldr	r3, [pc, #100]	; (800272c <Set_DeviceConnectable+0xe4>)
 80026c6:	785b      	ldrb	r3, [r3, #1]
  uint8_t manuf_data[26] = {
 80026c8:	763b      	strb	r3, [r7, #24]
    bdaddr[0]  /* BLE MAC stop */
 80026ca:	4b18      	ldr	r3, [pc, #96]	; (800272c <Set_DeviceConnectable+0xe4>)
 80026cc:	781b      	ldrb	r3, [r3, #0]
  uint8_t manuf_data[26] = {
 80026ce:	767b      	strb	r3, [r7, #25]
  };

  manuf_data[18] |= 0x01; /* Sensor Fusion */
 80026d0:	7cbb      	ldrb	r3, [r7, #18]
 80026d2:	f043 0301 	orr.w	r3, r3, #1
 80026d6:	b2db      	uxtb	r3, r3
 80026d8:	74bb      	strb	r3, [r7, #18]

  hci_le_set_scan_resp_data(0, NULL);
 80026da:	2100      	movs	r1, #0
 80026dc:	2000      	movs	r0, #0
 80026de:	f009 fd8f 	bl	800c200 <hci_le_set_scan_resp_data>

  PRINTF("Set General Discoverable Mode.\n");

  ret = aci_gap_set_discoverable(ADV_DATA_TYPE,
 80026e2:	2300      	movs	r3, #0
 80026e4:	9306      	str	r3, [sp, #24]
 80026e6:	2300      	movs	r3, #0
 80026e8:	9305      	str	r3, [sp, #20]
 80026ea:	2300      	movs	r3, #0
 80026ec:	9304      	str	r3, [sp, #16]
 80026ee:	2300      	movs	r3, #0
 80026f0:	9303      	str	r3, [sp, #12]
 80026f2:	f107 031c 	add.w	r3, r7, #28
 80026f6:	9302      	str	r3, [sp, #8]
 80026f8:	2308      	movs	r3, #8
 80026fa:	9301      	str	r3, [sp, #4]
 80026fc:	2300      	movs	r3, #0
 80026fe:	9300      	str	r3, [sp, #0]
 8002700:	2301      	movs	r3, #1
 8002702:	f44f 62f0 	mov.w	r2, #1920	; 0x780
 8002706:	f44f 61c8 	mov.w	r1, #1600	; 0x640
 800270a:	2000      	movs	r0, #0
 800270c:	f009 f87c 	bl	800b808 <aci_gap_set_discoverable>
 8002710:	4603      	mov	r3, r0
 8002712:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
                                (ADV_INTERVAL_MIN_MS*1000)/625,(ADV_INTERVAL_MAX_MS*1000)/625,
                                 STATIC_RANDOM_ADDR, NO_WHITE_LIST_USE,
                                 sizeof(local_name), local_name, 0, NULL, 0, 0);

  aci_gap_update_adv_data(26, manuf_data);
 8002716:	463b      	mov	r3, r7
 8002718:	4619      	mov	r1, r3
 800271a:	201a      	movs	r0, #26
 800271c:	f009 f9b5 	bl	800ba8a <aci_gap_update_adv_data>
  {
    PRINTF("aci_gap_set_discoverable() failed: 0x%02x\r\n", ret);
  }
  else
    PRINTF("aci_gap_set_discoverable() --> SUCCESS\r\n");
}
 8002720:	bf00      	nop
 8002722:	3728      	adds	r7, #40	; 0x28
 8002724:	46bd      	mov	sp, r7
 8002726:	bd80      	pop	{r7, pc}
 8002728:	0800db3c 	.word	0x0800db3c
 800272c:	2000017c 	.word	0x2000017c

08002730 <user_notify>:
 *         parsed.
 * @param  void* Pointer to the ACI packet
 * @retval None
 */
void user_notify(void * pData)
{
 8002730:	b580      	push	{r7, lr}
 8002732:	b088      	sub	sp, #32
 8002734:	af00      	add	r7, sp, #0
 8002736:	6078      	str	r0, [r7, #4]
  hci_uart_pckt *hci_pckt = pData;
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	61fb      	str	r3, [r7, #28]
  /* obtain event packet */
  hci_event_pckt *event_pckt = (hci_event_pckt*)hci_pckt->data;
 800273c:	69fb      	ldr	r3, [r7, #28]
 800273e:	3301      	adds	r3, #1
 8002740:	61bb      	str	r3, [r7, #24]

  if(hci_pckt->type != HCI_EVENT_PKT)
 8002742:	69fb      	ldr	r3, [r7, #28]
 8002744:	781b      	ldrb	r3, [r3, #0]
 8002746:	2b04      	cmp	r3, #4
 8002748:	d139      	bne.n	80027be <user_notify+0x8e>
    return;

  switch(event_pckt->evt){
 800274a:	69bb      	ldr	r3, [r7, #24]
 800274c:	781b      	ldrb	r3, [r3, #0]
 800274e:	2bff      	cmp	r3, #255	; 0xff
 8002750:	d01f      	beq.n	8002792 <user_notify+0x62>
 8002752:	2bff      	cmp	r3, #255	; 0xff
 8002754:	dc38      	bgt.n	80027c8 <user_notify+0x98>
 8002756:	2b05      	cmp	r3, #5
 8002758:	d002      	beq.n	8002760 <user_notify+0x30>
 800275a:	2b3e      	cmp	r3, #62	; 0x3e
 800275c:	d003      	beq.n	8002766 <user_notify+0x36>
 800275e:	e033      	b.n	80027c8 <user_notify+0x98>

  case EVT_DISCONN_COMPLETE:
    {
      GAP_DisconnectionComplete_CB();
 8002760:	f000 f836 	bl	80027d0 <GAP_DisconnectionComplete_CB>
    }
    break;
 8002764:	e030      	b.n	80027c8 <user_notify+0x98>

  case EVT_LE_META_EVENT:
    {
      evt_le_meta_event *evt = (void *)event_pckt->data;
 8002766:	69bb      	ldr	r3, [r7, #24]
 8002768:	3302      	adds	r3, #2
 800276a:	60fb      	str	r3, [r7, #12]

      switch(evt->subevent){
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	781b      	ldrb	r3, [r3, #0]
 8002770:	2b01      	cmp	r3, #1
 8002772:	d126      	bne.n	80027c2 <user_notify+0x92>
      case EVT_LE_CONN_COMPLETE:
        {
          evt_le_connection_complete *cc = (void *)evt->data;
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	3301      	adds	r3, #1
 8002778:	60bb      	str	r3, [r7, #8]
          GAP_ConnectionComplete_CB(cc->peer_bdaddr, cc->handle);
 800277a:	68bb      	ldr	r3, [r7, #8]
 800277c:	1d5a      	adds	r2, r3, #5
 800277e:	68bb      	ldr	r3, [r7, #8]
 8002780:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8002784:	b29b      	uxth	r3, r3
 8002786:	4619      	mov	r1, r3
 8002788:	4610      	mov	r0, r2
 800278a:	f000 f837 	bl	80027fc <GAP_ConnectionComplete_CB>
        }
        break;
 800278e:	bf00      	nop
      }
    }
    break;
 8002790:	e017      	b.n	80027c2 <user_notify+0x92>

  case EVT_VENDOR:
    {
      evt_blue_aci *blue_evt = (void*)event_pckt->data;
 8002792:	69bb      	ldr	r3, [r7, #24]
 8002794:	3302      	adds	r3, #2
 8002796:	617b      	str	r3, [r7, #20]
      switch(blue_evt->ecode){
 8002798:	697b      	ldr	r3, [r7, #20]
 800279a:	881b      	ldrh	r3, [r3, #0]
 800279c:	b29b      	uxth	r3, r3
 800279e:	461a      	mov	r2, r3
 80027a0:	f640 4314 	movw	r3, #3092	; 0xc14
 80027a4:	429a      	cmp	r2, r3
 80027a6:	d10e      	bne.n	80027c6 <user_notify+0x96>

      case EVT_BLUE_GATT_READ_PERMIT_REQ:
        {
          evt_gatt_read_permit_req *pr = (void*)blue_evt->data;
 80027a8:	697b      	ldr	r3, [r7, #20]
 80027aa:	3302      	adds	r3, #2
 80027ac:	613b      	str	r3, [r7, #16]
          Read_Request_CB(pr->attr_handle);
 80027ae:	693b      	ldr	r3, [r7, #16]
 80027b0:	885b      	ldrh	r3, [r3, #2]
 80027b2:	b29b      	uxth	r3, r3
 80027b4:	4618      	mov	r0, r3
 80027b6:	f7ff fe39 	bl	800242c <Read_Request_CB>
        }
        break;
 80027ba:	bf00      	nop
      }

    }
    break;
 80027bc:	e003      	b.n	80027c6 <user_notify+0x96>
    return;
 80027be:	bf00      	nop
 80027c0:	e002      	b.n	80027c8 <user_notify+0x98>
    break;
 80027c2:	bf00      	nop
 80027c4:	e000      	b.n	80027c8 <user_notify+0x98>
    break;
 80027c6:	bf00      	nop
  }
}
 80027c8:	3720      	adds	r7, #32
 80027ca:	46bd      	mov	sp, r7
 80027cc:	bd80      	pop	{r7, pc}
	...

080027d0 <GAP_DisconnectionComplete_CB>:
 * @brief  This function is called when the peer device gets disconnected.
 * @param  None
 * @retval None
 */
void GAP_DisconnectionComplete_CB(void)
{
 80027d0:	b480      	push	{r7}
 80027d2:	af00      	add	r7, sp, #0
  connected = FALSE;
 80027d4:	4b06      	ldr	r3, [pc, #24]	; (80027f0 <GAP_DisconnectionComplete_CB+0x20>)
 80027d6:	2200      	movs	r2, #0
 80027d8:	601a      	str	r2, [r3, #0]
  PRINTF("Disconnected\n");
  /* Make the device connectable again. */
  set_connectable = TRUE;
 80027da:	4b06      	ldr	r3, [pc, #24]	; (80027f4 <GAP_DisconnectionComplete_CB+0x24>)
 80027dc:	2201      	movs	r2, #1
 80027de:	701a      	strb	r2, [r3, #0]
  notification_enabled = FALSE;
 80027e0:	4b05      	ldr	r3, [pc, #20]	; (80027f8 <GAP_DisconnectionComplete_CB+0x28>)
 80027e2:	2200      	movs	r2, #0
 80027e4:	701a      	strb	r2, [r3, #0]
}
 80027e6:	bf00      	nop
 80027e8:	46bd      	mov	sp, r7
 80027ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ee:	4770      	bx	lr
 80027f0:	200001b8 	.word	0x200001b8
 80027f4:	20000001 	.word	0x20000001
 80027f8:	200001b6 	.word	0x200001b6

080027fc <GAP_ConnectionComplete_CB>:
 * @param  uint8_t Address of peer device
 * @param  uint16_t Connection handle
 * @retval None
 */
void GAP_ConnectionComplete_CB(uint8_t addr[6], uint16_t handle)
{
 80027fc:	b480      	push	{r7}
 80027fe:	b085      	sub	sp, #20
 8002800:	af00      	add	r7, sp, #0
 8002802:	6078      	str	r0, [r7, #4]
 8002804:	460b      	mov	r3, r1
 8002806:	807b      	strh	r3, [r7, #2]
  connected = TRUE;
 8002808:	4b0a      	ldr	r3, [pc, #40]	; (8002834 <GAP_ConnectionComplete_CB+0x38>)
 800280a:	2201      	movs	r2, #1
 800280c:	601a      	str	r2, [r3, #0]
  connection_handle = handle;
 800280e:	4a0a      	ldr	r2, [pc, #40]	; (8002838 <GAP_ConnectionComplete_CB+0x3c>)
 8002810:	887b      	ldrh	r3, [r7, #2]
 8002812:	8013      	strh	r3, [r2, #0]

  PRINTF("Connected to device:");
  for(uint32_t i = 5; i > 0; i--){
 8002814:	2305      	movs	r3, #5
 8002816:	60fb      	str	r3, [r7, #12]
 8002818:	e002      	b.n	8002820 <GAP_ConnectionComplete_CB+0x24>
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	3b01      	subs	r3, #1
 800281e:	60fb      	str	r3, [r7, #12]
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	2b00      	cmp	r3, #0
 8002824:	d1f9      	bne.n	800281a <GAP_ConnectionComplete_CB+0x1e>
    PRINTF("%02X-", addr[i]);
  }
  PRINTF("%02X\n", addr[0]);
}
 8002826:	bf00      	nop
 8002828:	bf00      	nop
 800282a:	3714      	adds	r7, #20
 800282c:	46bd      	mov	sp, r7
 800282e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002832:	4770      	bx	lr
 8002834:	200001b8 	.word	0x200001b8
 8002838:	200001b4 	.word	0x200001b4

0800283c <HCI_TL_SPI_Init>:
 *
 * @param  void* Pointer to configuration struct
 * @retval int32_t Status
 */
int32_t HCI_TL_SPI_Init(void* pConf)
{
 800283c:	b580      	push	{r7, lr}
 800283e:	b088      	sub	sp, #32
 8002840:	af00      	add	r7, sp, #0
 8002842:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;

  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002844:	2300      	movs	r3, #0
 8002846:	60bb      	str	r3, [r7, #8]
 8002848:	4b1e      	ldr	r3, [pc, #120]	; (80028c4 <HCI_TL_SPI_Init+0x88>)
 800284a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800284c:	4a1d      	ldr	r2, [pc, #116]	; (80028c4 <HCI_TL_SPI_Init+0x88>)
 800284e:	f043 0301 	orr.w	r3, r3, #1
 8002852:	6313      	str	r3, [r2, #48]	; 0x30
 8002854:	4b1b      	ldr	r3, [pc, #108]	; (80028c4 <HCI_TL_SPI_Init+0x88>)
 8002856:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002858:	f003 0301 	and.w	r3, r3, #1
 800285c:	60bb      	str	r3, [r7, #8]
 800285e:	68bb      	ldr	r3, [r7, #8]

  /* Configure EXTI Line */
  GPIO_InitStruct.Pin = HCI_TL_SPI_EXTI_PIN;
 8002860:	2301      	movs	r3, #1
 8002862:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002864:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8002868:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800286a:	2300      	movs	r3, #0
 800286c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(HCI_TL_SPI_EXTI_PORT, &GPIO_InitStruct);
 800286e:	f107 030c 	add.w	r3, r7, #12
 8002872:	4619      	mov	r1, r3
 8002874:	4814      	ldr	r0, [pc, #80]	; (80028c8 <HCI_TL_SPI_Init+0x8c>)
 8002876:	f006 f8e9 	bl	8008a4c <HAL_GPIO_Init>

  /* Configure RESET Line */
  GPIO_InitStruct.Pin =  HCI_TL_RST_PIN ;
 800287a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800287e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002880:	2301      	movs	r3, #1
 8002882:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002884:	2300      	movs	r3, #0
 8002886:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002888:	2300      	movs	r3, #0
 800288a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(HCI_TL_RST_PORT, &GPIO_InitStruct);
 800288c:	f107 030c 	add.w	r3, r7, #12
 8002890:	4619      	mov	r1, r3
 8002892:	480d      	ldr	r0, [pc, #52]	; (80028c8 <HCI_TL_SPI_Init+0x8c>)
 8002894:	f006 f8da 	bl	8008a4c <HAL_GPIO_Init>

  /* Configure CS */
  GPIO_InitStruct.Pin = HCI_TL_SPI_CS_PIN ;
 8002898:	2302      	movs	r3, #2
 800289a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800289c:	2301      	movs	r3, #1
 800289e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028a0:	2300      	movs	r3, #0
 80028a2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028a4:	2300      	movs	r3, #0
 80028a6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(HCI_TL_SPI_CS_PORT, &GPIO_InitStruct);
 80028a8:	f107 030c 	add.w	r3, r7, #12
 80028ac:	4619      	mov	r1, r3
 80028ae:	4806      	ldr	r0, [pc, #24]	; (80028c8 <HCI_TL_SPI_Init+0x8c>)
 80028b0:	f006 f8cc 	bl	8008a4c <HAL_GPIO_Init>

  return BSP_SPI1_Init();
 80028b4:	f000 fabe 	bl	8002e34 <BSP_SPI1_Init>
 80028b8:	4603      	mov	r3, r0
}
 80028ba:	4618      	mov	r0, r3
 80028bc:	3720      	adds	r7, #32
 80028be:	46bd      	mov	sp, r7
 80028c0:	bd80      	pop	{r7, pc}
 80028c2:	bf00      	nop
 80028c4:	40023800 	.word	0x40023800
 80028c8:	40020000 	.word	0x40020000

080028cc <HCI_TL_SPI_DeInit>:
 *
 * @param  None
 * @retval int32_t 0
 */
int32_t HCI_TL_SPI_DeInit(void)
{
 80028cc:	b580      	push	{r7, lr}
 80028ce:	af00      	add	r7, sp, #0
  HAL_GPIO_DeInit(HCI_TL_SPI_EXTI_PORT, HCI_TL_SPI_EXTI_PIN);
 80028d0:	2101      	movs	r1, #1
 80028d2:	4807      	ldr	r0, [pc, #28]	; (80028f0 <HCI_TL_SPI_DeInit+0x24>)
 80028d4:	f006 fa3e 	bl	8008d54 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN);
 80028d8:	2102      	movs	r1, #2
 80028da:	4805      	ldr	r0, [pc, #20]	; (80028f0 <HCI_TL_SPI_DeInit+0x24>)
 80028dc:	f006 fa3a 	bl	8008d54 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(HCI_TL_RST_PORT, HCI_TL_RST_PIN);
 80028e0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80028e4:	4802      	ldr	r0, [pc, #8]	; (80028f0 <HCI_TL_SPI_DeInit+0x24>)
 80028e6:	f006 fa35 	bl	8008d54 <HAL_GPIO_DeInit>
  return 0;
 80028ea:	2300      	movs	r3, #0
}
 80028ec:	4618      	mov	r0, r3
 80028ee:	bd80      	pop	{r7, pc}
 80028f0:	40020000 	.word	0x40020000

080028f4 <HCI_TL_SPI_Reset>:
 *
 * @param  None
 * @retval int32_t 0
 */
int32_t HCI_TL_SPI_Reset(void)
{
 80028f4:	b580      	push	{r7, lr}
 80028f6:	af00      	add	r7, sp, #0
  // Deselect CS PIN for BlueNRG to avoid spurious commands
  HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_SET);
 80028f8:	2201      	movs	r2, #1
 80028fa:	2102      	movs	r1, #2
 80028fc:	480b      	ldr	r0, [pc, #44]	; (800292c <HCI_TL_SPI_Reset+0x38>)
 80028fe:	f006 fb25 	bl	8008f4c <HAL_GPIO_WritePin>

  HAL_GPIO_WritePin(HCI_TL_RST_PORT, HCI_TL_RST_PIN, GPIO_PIN_RESET);
 8002902:	2200      	movs	r2, #0
 8002904:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002908:	4808      	ldr	r0, [pc, #32]	; (800292c <HCI_TL_SPI_Reset+0x38>)
 800290a:	f006 fb1f 	bl	8008f4c <HAL_GPIO_WritePin>
  HAL_Delay(5);
 800290e:	2005      	movs	r0, #5
 8002910:	f005 ff14 	bl	800873c <HAL_Delay>
  HAL_GPIO_WritePin(HCI_TL_RST_PORT, HCI_TL_RST_PIN, GPIO_PIN_SET);
 8002914:	2201      	movs	r2, #1
 8002916:	f44f 7180 	mov.w	r1, #256	; 0x100
 800291a:	4804      	ldr	r0, [pc, #16]	; (800292c <HCI_TL_SPI_Reset+0x38>)
 800291c:	f006 fb16 	bl	8008f4c <HAL_GPIO_WritePin>
  HAL_Delay(5);
 8002920:	2005      	movs	r0, #5
 8002922:	f005 ff0b 	bl	800873c <HAL_Delay>
  return 0;
 8002926:	2300      	movs	r3, #0
}
 8002928:	4618      	mov	r0, r3
 800292a:	bd80      	pop	{r7, pc}
 800292c:	40020000 	.word	0x40020000

08002930 <HCI_TL_SPI_Receive>:
 * @param  buffer : Buffer where data from SPI are stored
 * @param  size   : Buffer size
 * @retval int32_t: Number of read bytes
 */
int32_t HCI_TL_SPI_Receive(uint8_t* buffer, uint16_t size)
{
 8002930:	b580      	push	{r7, lr}
 8002932:	b088      	sub	sp, #32
 8002934:	af00      	add	r7, sp, #0
 8002936:	6078      	str	r0, [r7, #4]
 8002938:	460b      	mov	r3, r1
 800293a:	807b      	strh	r3, [r7, #2]
  uint16_t byte_count;
  uint8_t len = 0;
 800293c:	2300      	movs	r3, #0
 800293e:	777b      	strb	r3, [r7, #29]
  uint8_t char_ff = 0xff;
 8002940:	23ff      	movs	r3, #255	; 0xff
 8002942:	773b      	strb	r3, [r7, #28]
  volatile uint8_t read_char;

  uint8_t header_master[HEADER_SIZE] = {0x0b, 0x00, 0x00, 0x00, 0x00};
 8002944:	4a25      	ldr	r2, [pc, #148]	; (80029dc <HCI_TL_SPI_Receive+0xac>)
 8002946:	f107 0314 	add.w	r3, r7, #20
 800294a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800294e:	6018      	str	r0, [r3, #0]
 8002950:	3304      	adds	r3, #4
 8002952:	7019      	strb	r1, [r3, #0]
  uint8_t header_slave[HEADER_SIZE];

  /* CS reset */
  HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_RESET);
 8002954:	2200      	movs	r2, #0
 8002956:	2102      	movs	r1, #2
 8002958:	4821      	ldr	r0, [pc, #132]	; (80029e0 <HCI_TL_SPI_Receive+0xb0>)
 800295a:	f006 faf7 	bl	8008f4c <HAL_GPIO_WritePin>

  /* Read the header */
  BSP_SPI1_SendRecv(header_master, header_slave, HEADER_SIZE);
 800295e:	f107 010c 	add.w	r1, r7, #12
 8002962:	f107 0314 	add.w	r3, r7, #20
 8002966:	2205      	movs	r2, #5
 8002968:	4618      	mov	r0, r3
 800296a:	f000 fa93 	bl	8002e94 <BSP_SPI1_SendRecv>

  if(header_slave[0] == 0x02)
 800296e:	7b3b      	ldrb	r3, [r7, #12]
 8002970:	2b02      	cmp	r3, #2
 8002972:	d129      	bne.n	80029c8 <HCI_TL_SPI_Receive+0x98>
  {
    /* device is ready */
    byte_count = (header_slave[4] << 8)| header_slave[3];
 8002974:	7c3b      	ldrb	r3, [r7, #16]
 8002976:	021b      	lsls	r3, r3, #8
 8002978:	b21a      	sxth	r2, r3
 800297a:	7bfb      	ldrb	r3, [r7, #15]
 800297c:	b21b      	sxth	r3, r3
 800297e:	4313      	orrs	r3, r2
 8002980:	b21b      	sxth	r3, r3
 8002982:	83fb      	strh	r3, [r7, #30]

    if(byte_count > 0)
 8002984:	8bfb      	ldrh	r3, [r7, #30]
 8002986:	2b00      	cmp	r3, #0
 8002988:	d01e      	beq.n	80029c8 <HCI_TL_SPI_Receive+0x98>
    {
      /* avoid to read more data than the size of the buffer */
      if (byte_count > size){
 800298a:	8bfa      	ldrh	r2, [r7, #30]
 800298c:	887b      	ldrh	r3, [r7, #2]
 800298e:	429a      	cmp	r2, r3
 8002990:	d901      	bls.n	8002996 <HCI_TL_SPI_Receive+0x66>
        byte_count = size;
 8002992:	887b      	ldrh	r3, [r7, #2]
 8002994:	83fb      	strh	r3, [r7, #30]
      }

      for(len = 0; len < byte_count; len++)
 8002996:	2300      	movs	r3, #0
 8002998:	777b      	strb	r3, [r7, #29]
 800299a:	e010      	b.n	80029be <HCI_TL_SPI_Receive+0x8e>
      {
        BSP_SPI1_SendRecv(&char_ff, (uint8_t*)&read_char, 1);
 800299c:	f107 011b 	add.w	r1, r7, #27
 80029a0:	f107 031c 	add.w	r3, r7, #28
 80029a4:	2201      	movs	r2, #1
 80029a6:	4618      	mov	r0, r3
 80029a8:	f000 fa74 	bl	8002e94 <BSP_SPI1_SendRecv>
        buffer[len] = read_char;
 80029ac:	7f7b      	ldrb	r3, [r7, #29]
 80029ae:	687a      	ldr	r2, [r7, #4]
 80029b0:	4413      	add	r3, r2
 80029b2:	7efa      	ldrb	r2, [r7, #27]
 80029b4:	b2d2      	uxtb	r2, r2
 80029b6:	701a      	strb	r2, [r3, #0]
      for(len = 0; len < byte_count; len++)
 80029b8:	7f7b      	ldrb	r3, [r7, #29]
 80029ba:	3301      	adds	r3, #1
 80029bc:	777b      	strb	r3, [r7, #29]
 80029be:	7f7b      	ldrb	r3, [r7, #29]
 80029c0:	b29b      	uxth	r3, r3
 80029c2:	8bfa      	ldrh	r2, [r7, #30]
 80029c4:	429a      	cmp	r2, r3
 80029c6:	d8e9      	bhi.n	800299c <HCI_TL_SPI_Receive+0x6c>
      }
    }
  }
  /* Release CS line */
  HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_SET);
 80029c8:	2201      	movs	r2, #1
 80029ca:	2102      	movs	r1, #2
 80029cc:	4804      	ldr	r0, [pc, #16]	; (80029e0 <HCI_TL_SPI_Receive+0xb0>)
 80029ce:	f006 fabd 	bl	8008f4c <HAL_GPIO_WritePin>
    }
    PRINT_CSV("\n");
  }
#endif

  return len;
 80029d2:	7f7b      	ldrb	r3, [r7, #29]
}
 80029d4:	4618      	mov	r0, r3
 80029d6:	3720      	adds	r7, #32
 80029d8:	46bd      	mov	sp, r7
 80029da:	bd80      	pop	{r7, pc}
 80029dc:	0800db44 	.word	0x0800db44
 80029e0:	40020000 	.word	0x40020000

080029e4 <HCI_TL_SPI_Send>:
 * @param  buffer : data buffer to be written
 * @param  size   : size of first data buffer to be written
 * @retval int32_t: Number of read bytes
 */
int32_t HCI_TL_SPI_Send(uint8_t* buffer, uint16_t size)
{
 80029e4:	b580      	push	{r7, lr}
 80029e6:	b088      	sub	sp, #32
 80029e8:	af00      	add	r7, sp, #0
 80029ea:	6078      	str	r0, [r7, #4]
 80029ec:	460b      	mov	r3, r1
 80029ee:	807b      	strh	r3, [r7, #2]
  int32_t result;

  uint8_t header_master[HEADER_SIZE] = {0x0a, 0x00, 0x00, 0x00, 0x00};
 80029f0:	4a23      	ldr	r2, [pc, #140]	; (8002a80 <HCI_TL_SPI_Send+0x9c>)
 80029f2:	f107 0310 	add.w	r3, r7, #16
 80029f6:	e892 0003 	ldmia.w	r2, {r0, r1}
 80029fa:	6018      	str	r0, [r3, #0]
 80029fc:	3304      	adds	r3, #4
 80029fe:	7019      	strb	r1, [r3, #0]
  uint8_t header_slave[HEADER_SIZE];

  static uint8_t read_char_buf[MAX_BUFFER_SIZE];
  uint32_t tickstart = HAL_GetTick();
 8002a00:	f005 fe90 	bl	8008724 <HAL_GetTick>
 8002a04:	61b8      	str	r0, [r7, #24]

  do
  {
    result = 0;
 8002a06:	2300      	movs	r3, #0
 8002a08:	61fb      	str	r3, [r7, #28]

    /* CS reset */
    HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_RESET);
 8002a0a:	2200      	movs	r2, #0
 8002a0c:	2102      	movs	r1, #2
 8002a0e:	481d      	ldr	r0, [pc, #116]	; (8002a84 <HCI_TL_SPI_Send+0xa0>)
 8002a10:	f006 fa9c 	bl	8008f4c <HAL_GPIO_WritePin>

    /* Read header */
    BSP_SPI1_SendRecv(header_master, header_slave, HEADER_SIZE);
 8002a14:	f107 0108 	add.w	r1, r7, #8
 8002a18:	f107 0310 	add.w	r3, r7, #16
 8002a1c:	2205      	movs	r2, #5
 8002a1e:	4618      	mov	r0, r3
 8002a20:	f000 fa38 	bl	8002e94 <BSP_SPI1_SendRecv>

    if(header_slave[0] == 0x02)
 8002a24:	7a3b      	ldrb	r3, [r7, #8]
 8002a26:	2b02      	cmp	r3, #2
 8002a28:	d10f      	bne.n	8002a4a <HCI_TL_SPI_Send+0x66>
    {
      /* SPI is ready */
      if(header_slave[1] >= size)
 8002a2a:	7a7b      	ldrb	r3, [r7, #9]
 8002a2c:	b29b      	uxth	r3, r3
 8002a2e:	887a      	ldrh	r2, [r7, #2]
 8002a30:	429a      	cmp	r2, r3
 8002a32:	d806      	bhi.n	8002a42 <HCI_TL_SPI_Send+0x5e>
      {
        BSP_SPI1_SendRecv(buffer, read_char_buf, size);
 8002a34:	887b      	ldrh	r3, [r7, #2]
 8002a36:	461a      	mov	r2, r3
 8002a38:	4913      	ldr	r1, [pc, #76]	; (8002a88 <HCI_TL_SPI_Send+0xa4>)
 8002a3a:	6878      	ldr	r0, [r7, #4]
 8002a3c:	f000 fa2a 	bl	8002e94 <BSP_SPI1_SendRecv>
 8002a40:	e006      	b.n	8002a50 <HCI_TL_SPI_Send+0x6c>
      }
      else
      {
        /* Buffer is too small */
        result = -2;
 8002a42:	f06f 0301 	mvn.w	r3, #1
 8002a46:	61fb      	str	r3, [r7, #28]
 8002a48:	e002      	b.n	8002a50 <HCI_TL_SPI_Send+0x6c>
      }
    } else {
      /* SPI is not ready */
      result = -1;
 8002a4a:	f04f 33ff 	mov.w	r3, #4294967295
 8002a4e:	61fb      	str	r3, [r7, #28]
    }

    /* Release CS line */
    HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_SET);
 8002a50:	2201      	movs	r2, #1
 8002a52:	2102      	movs	r1, #2
 8002a54:	480b      	ldr	r0, [pc, #44]	; (8002a84 <HCI_TL_SPI_Send+0xa0>)
 8002a56:	f006 fa79 	bl	8008f4c <HAL_GPIO_WritePin>

    if((HAL_GetTick() - tickstart) > TIMEOUT_DURATION)
 8002a5a:	f005 fe63 	bl	8008724 <HAL_GetTick>
 8002a5e:	4602      	mov	r2, r0
 8002a60:	69bb      	ldr	r3, [r7, #24]
 8002a62:	1ad3      	subs	r3, r2, r3
 8002a64:	2b0f      	cmp	r3, #15
 8002a66:	d903      	bls.n	8002a70 <HCI_TL_SPI_Send+0x8c>
    {
      result = -3;
 8002a68:	f06f 0302 	mvn.w	r3, #2
 8002a6c:	61fb      	str	r3, [r7, #28]
      break;
 8002a6e:	e002      	b.n	8002a76 <HCI_TL_SPI_Send+0x92>
    }
  } while(result < 0);
 8002a70:	69fb      	ldr	r3, [r7, #28]
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	dbc7      	blt.n	8002a06 <HCI_TL_SPI_Send+0x22>

  return result;
 8002a76:	69fb      	ldr	r3, [r7, #28]
}
 8002a78:	4618      	mov	r0, r3
 8002a7a:	3720      	adds	r7, #32
 8002a7c:	46bd      	mov	sp, r7
 8002a7e:	bd80      	pop	{r7, pc}
 8002a80:	0800db4c 	.word	0x0800db4c
 8002a84:	40020000 	.word	0x40020000
 8002a88:	200001f4 	.word	0x200001f4

08002a8c <IsDataAvailable>:
 *
 * @param  None
 * @retval int32_t: 1 if data are present, 0 otherwise
 */
static int32_t IsDataAvailable(void)
{
 8002a8c:	b580      	push	{r7, lr}
 8002a8e:	af00      	add	r7, sp, #0
  return (HAL_GPIO_ReadPin(HCI_TL_SPI_EXTI_PORT, HCI_TL_SPI_EXTI_PIN) == GPIO_PIN_SET);
 8002a90:	2101      	movs	r1, #1
 8002a92:	4805      	ldr	r0, [pc, #20]	; (8002aa8 <IsDataAvailable+0x1c>)
 8002a94:	f006 fa42 	bl	8008f1c <HAL_GPIO_ReadPin>
 8002a98:	4603      	mov	r3, r0
 8002a9a:	2b01      	cmp	r3, #1
 8002a9c:	bf0c      	ite	eq
 8002a9e:	2301      	moveq	r3, #1
 8002aa0:	2300      	movne	r3, #0
 8002aa2:	b2db      	uxtb	r3, r3
}
 8002aa4:	4618      	mov	r0, r3
 8002aa6:	bd80      	pop	{r7, pc}
 8002aa8:	40020000 	.word	0x40020000

08002aac <hci_tl_lowlevel_init>:
 *
 * @param  None
 * @retval None
 */
void hci_tl_lowlevel_init(void)
{
 8002aac:	b580      	push	{r7, lr}
 8002aae:	b088      	sub	sp, #32
 8002ab0:	af00      	add	r7, sp, #0

  /* USER CODE END hci_tl_lowlevel_init 1 */
  tHciIO fops;

  /* Register IO bus services */
  fops.Init    = HCI_TL_SPI_Init;
 8002ab2:	4b13      	ldr	r3, [pc, #76]	; (8002b00 <hci_tl_lowlevel_init+0x54>)
 8002ab4:	607b      	str	r3, [r7, #4]
  fops.DeInit  = HCI_TL_SPI_DeInit;
 8002ab6:	4b13      	ldr	r3, [pc, #76]	; (8002b04 <hci_tl_lowlevel_init+0x58>)
 8002ab8:	60bb      	str	r3, [r7, #8]
  fops.Send    = HCI_TL_SPI_Send;
 8002aba:	4b13      	ldr	r3, [pc, #76]	; (8002b08 <hci_tl_lowlevel_init+0x5c>)
 8002abc:	617b      	str	r3, [r7, #20]
  fops.Receive = HCI_TL_SPI_Receive;
 8002abe:	4b13      	ldr	r3, [pc, #76]	; (8002b0c <hci_tl_lowlevel_init+0x60>)
 8002ac0:	613b      	str	r3, [r7, #16]
  fops.Reset   = HCI_TL_SPI_Reset;
 8002ac2:	4b13      	ldr	r3, [pc, #76]	; (8002b10 <hci_tl_lowlevel_init+0x64>)
 8002ac4:	60fb      	str	r3, [r7, #12]
  fops.GetTick = BSP_GetTick;
 8002ac6:	4b13      	ldr	r3, [pc, #76]	; (8002b14 <hci_tl_lowlevel_init+0x68>)
 8002ac8:	61fb      	str	r3, [r7, #28]

  hci_register_io_bus (&fops);
 8002aca:	1d3b      	adds	r3, r7, #4
 8002acc:	4618      	mov	r0, r3
 8002ace:	f009 fcb5 	bl	800c43c <hci_register_io_bus>
  /* USER CODE BEGIN hci_tl_lowlevel_init 2 */

  /* USER CODE END hci_tl_lowlevel_init 2 */

  /* Register event irq handler */
  HAL_EXTI_GetHandle(&hexti0, EXTI_LINE_0);
 8002ad2:	f04f 61c0 	mov.w	r1, #100663296	; 0x6000000
 8002ad6:	4810      	ldr	r0, [pc, #64]	; (8002b18 <hci_tl_lowlevel_init+0x6c>)
 8002ad8:	f005 ff7f 	bl	80089da <HAL_EXTI_GetHandle>
  HAL_EXTI_RegisterCallback(&hexti0, HAL_EXTI_COMMON_CB_ID, hci_tl_lowlevel_isr);
 8002adc:	4a0f      	ldr	r2, [pc, #60]	; (8002b1c <hci_tl_lowlevel_init+0x70>)
 8002ade:	2100      	movs	r1, #0
 8002ae0:	480d      	ldr	r0, [pc, #52]	; (8002b18 <hci_tl_lowlevel_init+0x6c>)
 8002ae2:	f005 ff60 	bl	80089a6 <HAL_EXTI_RegisterCallback>
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8002ae6:	2200      	movs	r2, #0
 8002ae8:	2100      	movs	r1, #0
 8002aea:	2006      	movs	r0, #6
 8002aec:	f005 ff25 	bl	800893a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8002af0:	2006      	movs	r0, #6
 8002af2:	f005 ff3e 	bl	8008972 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN hci_tl_lowlevel_init 3 */

  /* USER CODE END hci_tl_lowlevel_init 3 */

}
 8002af6:	bf00      	nop
 8002af8:	3720      	adds	r7, #32
 8002afa:	46bd      	mov	sp, r7
 8002afc:	bd80      	pop	{r7, pc}
 8002afe:	bf00      	nop
 8002b00:	0800283d 	.word	0x0800283d
 8002b04:	080028cd 	.word	0x080028cd
 8002b08:	080029e5 	.word	0x080029e5
 8002b0c:	08002931 	.word	0x08002931
 8002b10:	080028f5 	.word	0x080028f5
 8002b14:	08003051 	.word	0x08003051
 8002b18:	200001ec 	.word	0x200001ec
 8002b1c:	08002b21 	.word	0x08002b21

08002b20 <hci_tl_lowlevel_isr>:
  *
  * @param  None
  * @retval None
  */
void hci_tl_lowlevel_isr(void)
{
 8002b20:	b580      	push	{r7, lr}
 8002b22:	af00      	add	r7, sp, #0
  /* Call hci_notify_asynch_evt() */
  while(IsDataAvailable())
 8002b24:	e005      	b.n	8002b32 <hci_tl_lowlevel_isr+0x12>
  {
    if (hci_notify_asynch_evt(NULL))
 8002b26:	2000      	movs	r0, #0
 8002b28:	f009 fdee 	bl	800c708 <hci_notify_asynch_evt>
 8002b2c:	4603      	mov	r3, r0
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d105      	bne.n	8002b3e <hci_tl_lowlevel_isr+0x1e>
  while(IsDataAvailable())
 8002b32:	f7ff ffab 	bl	8002a8c <IsDataAvailable>
 8002b36:	4603      	mov	r3, r0
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d1f4      	bne.n	8002b26 <hci_tl_lowlevel_isr+0x6>
 8002b3c:	e000      	b.n	8002b40 <hci_tl_lowlevel_isr+0x20>
    {
      return;
 8002b3e:	bf00      	nop
  }

  /* USER CODE BEGIN hci_tl_lowlevel_isr */

  /* USER CODE END hci_tl_lowlevel_isr */
}
 8002b40:	bd80      	pop	{r7, pc}
	...

08002b44 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002b44:	b580      	push	{r7, lr}
 8002b46:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002b48:	f005 fd86 	bl	8008658 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002b4c:	f000 f81c 	bl	8002b88 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002b50:	f000 f886 	bl	8002c60 <MX_GPIO_Init>
  MX_BlueNRG_MS_Init();
 8002b54:	f7fd ff2a 	bl	80009ac <MX_BlueNRG_MS_Init>
  /* USER CODE BEGIN 2 */

  if (IKS01A3_MOTION_SENSOR_Init(IKS01A3_LSM6DSO_0, MOTION_ACCELERO)==HAL_OK){
 8002b58:	2102      	movs	r1, #2
 8002b5a:	2000      	movs	r0, #0
 8002b5c:	f004 fffa 	bl	8007b54 <IKS01A3_MOTION_SENSOR_Init>
 8002b60:	4603      	mov	r3, r0
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d103      	bne.n	8002b6e <main+0x2a>
	  IKS01A3_MOTION_SENSOR_Enable(IKS01A3_LSM6DSO_0, MOTION_ACCELERO);
 8002b66:	2102      	movs	r1, #2
 8002b68:	2000      	movs	r0, #0
 8002b6a:	f005 f8ef 	bl	8007d4c <IKS01A3_MOTION_SENSOR_Enable>
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */

  MX_BlueNRG_MS_Process();
 8002b6e:	f7fd ffc5 	bl	8000afc <MX_BlueNRG_MS_Process>
    /* USER CODE BEGIN 3 */


  IKS01A3_MOTION_SENSOR_GetAxes(IKS01A3_LSM6DSO_0, MOTION_ACCELERO, &misure_accelerometro);
 8002b72:	4a04      	ldr	r2, [pc, #16]	; (8002b84 <main+0x40>)
 8002b74:	2102      	movs	r1, #2
 8002b76:	2000      	movs	r0, #0
 8002b78:	f005 f92a 	bl	8007dd0 <IKS01A3_MOTION_SENSOR_GetAxes>
  HAL_Delay(1);
 8002b7c:	2001      	movs	r0, #1
 8002b7e:	f005 fddd 	bl	800873c <HAL_Delay>
  MX_BlueNRG_MS_Process();
 8002b82:	e7f4      	b.n	8002b6e <main+0x2a>
 8002b84:	200002f4 	.word	0x200002f4

08002b88 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002b88:	b580      	push	{r7, lr}
 8002b8a:	b094      	sub	sp, #80	; 0x50
 8002b8c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002b8e:	f107 0320 	add.w	r3, r7, #32
 8002b92:	2230      	movs	r2, #48	; 0x30
 8002b94:	2100      	movs	r1, #0
 8002b96:	4618      	mov	r0, r3
 8002b98:	f009 ff52 	bl	800ca40 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002b9c:	f107 030c 	add.w	r3, r7, #12
 8002ba0:	2200      	movs	r2, #0
 8002ba2:	601a      	str	r2, [r3, #0]
 8002ba4:	605a      	str	r2, [r3, #4]
 8002ba6:	609a      	str	r2, [r3, #8]
 8002ba8:	60da      	str	r2, [r3, #12]
 8002baa:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002bac:	2300      	movs	r3, #0
 8002bae:	60bb      	str	r3, [r7, #8]
 8002bb0:	4b29      	ldr	r3, [pc, #164]	; (8002c58 <SystemClock_Config+0xd0>)
 8002bb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bb4:	4a28      	ldr	r2, [pc, #160]	; (8002c58 <SystemClock_Config+0xd0>)
 8002bb6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002bba:	6413      	str	r3, [r2, #64]	; 0x40
 8002bbc:	4b26      	ldr	r3, [pc, #152]	; (8002c58 <SystemClock_Config+0xd0>)
 8002bbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bc0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002bc4:	60bb      	str	r3, [r7, #8]
 8002bc6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8002bc8:	2300      	movs	r3, #0
 8002bca:	607b      	str	r3, [r7, #4]
 8002bcc:	4b23      	ldr	r3, [pc, #140]	; (8002c5c <SystemClock_Config+0xd4>)
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8002bd4:	4a21      	ldr	r2, [pc, #132]	; (8002c5c <SystemClock_Config+0xd4>)
 8002bd6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002bda:	6013      	str	r3, [r2, #0]
 8002bdc:	4b1f      	ldr	r3, [pc, #124]	; (8002c5c <SystemClock_Config+0xd4>)
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002be4:	607b      	str	r3, [r7, #4]
 8002be6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002be8:	2302      	movs	r3, #2
 8002bea:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002bec:	2301      	movs	r3, #1
 8002bee:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002bf0:	2310      	movs	r3, #16
 8002bf2:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002bf4:	2302      	movs	r3, #2
 8002bf6:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002bf8:	2300      	movs	r3, #0
 8002bfa:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8002bfc:	2310      	movs	r3, #16
 8002bfe:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8002c00:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8002c04:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8002c06:	2304      	movs	r3, #4
 8002c08:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8002c0a:	2307      	movs	r3, #7
 8002c0c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002c0e:	f107 0320 	add.w	r3, r7, #32
 8002c12:	4618      	mov	r0, r3
 8002c14:	f007 f9ec 	bl	8009ff0 <HAL_RCC_OscConfig>
 8002c18:	4603      	mov	r3, r0
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d001      	beq.n	8002c22 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8002c1e:	f000 f89d 	bl	8002d5c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002c22:	230f      	movs	r3, #15
 8002c24:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002c26:	2302      	movs	r3, #2
 8002c28:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002c2a:	2300      	movs	r3, #0
 8002c2c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002c2e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002c32:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002c34:	2300      	movs	r3, #0
 8002c36:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002c38:	f107 030c 	add.w	r3, r7, #12
 8002c3c:	2102      	movs	r1, #2
 8002c3e:	4618      	mov	r0, r3
 8002c40:	f007 fc4e 	bl	800a4e0 <HAL_RCC_ClockConfig>
 8002c44:	4603      	mov	r3, r0
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d001      	beq.n	8002c4e <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8002c4a:	f000 f887 	bl	8002d5c <Error_Handler>
  }
}
 8002c4e:	bf00      	nop
 8002c50:	3750      	adds	r7, #80	; 0x50
 8002c52:	46bd      	mov	sp, r7
 8002c54:	bd80      	pop	{r7, pc}
 8002c56:	bf00      	nop
 8002c58:	40023800 	.word	0x40023800
 8002c5c:	40007000 	.word	0x40007000

08002c60 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002c60:	b580      	push	{r7, lr}
 8002c62:	b08a      	sub	sp, #40	; 0x28
 8002c64:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c66:	f107 0314 	add.w	r3, r7, #20
 8002c6a:	2200      	movs	r2, #0
 8002c6c:	601a      	str	r2, [r3, #0]
 8002c6e:	605a      	str	r2, [r3, #4]
 8002c70:	609a      	str	r2, [r3, #8]
 8002c72:	60da      	str	r2, [r3, #12]
 8002c74:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002c76:	2300      	movs	r3, #0
 8002c78:	613b      	str	r3, [r7, #16]
 8002c7a:	4b36      	ldr	r3, [pc, #216]	; (8002d54 <MX_GPIO_Init+0xf4>)
 8002c7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c7e:	4a35      	ldr	r2, [pc, #212]	; (8002d54 <MX_GPIO_Init+0xf4>)
 8002c80:	f043 0304 	orr.w	r3, r3, #4
 8002c84:	6313      	str	r3, [r2, #48]	; 0x30
 8002c86:	4b33      	ldr	r3, [pc, #204]	; (8002d54 <MX_GPIO_Init+0xf4>)
 8002c88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c8a:	f003 0304 	and.w	r3, r3, #4
 8002c8e:	613b      	str	r3, [r7, #16]
 8002c90:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002c92:	2300      	movs	r3, #0
 8002c94:	60fb      	str	r3, [r7, #12]
 8002c96:	4b2f      	ldr	r3, [pc, #188]	; (8002d54 <MX_GPIO_Init+0xf4>)
 8002c98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c9a:	4a2e      	ldr	r2, [pc, #184]	; (8002d54 <MX_GPIO_Init+0xf4>)
 8002c9c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002ca0:	6313      	str	r3, [r2, #48]	; 0x30
 8002ca2:	4b2c      	ldr	r3, [pc, #176]	; (8002d54 <MX_GPIO_Init+0xf4>)
 8002ca4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ca6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002caa:	60fb      	str	r3, [r7, #12]
 8002cac:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002cae:	2300      	movs	r3, #0
 8002cb0:	60bb      	str	r3, [r7, #8]
 8002cb2:	4b28      	ldr	r3, [pc, #160]	; (8002d54 <MX_GPIO_Init+0xf4>)
 8002cb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cb6:	4a27      	ldr	r2, [pc, #156]	; (8002d54 <MX_GPIO_Init+0xf4>)
 8002cb8:	f043 0301 	orr.w	r3, r3, #1
 8002cbc:	6313      	str	r3, [r2, #48]	; 0x30
 8002cbe:	4b25      	ldr	r3, [pc, #148]	; (8002d54 <MX_GPIO_Init+0xf4>)
 8002cc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cc2:	f003 0301 	and.w	r3, r3, #1
 8002cc6:	60bb      	str	r3, [r7, #8]
 8002cc8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002cca:	2300      	movs	r3, #0
 8002ccc:	607b      	str	r3, [r7, #4]
 8002cce:	4b21      	ldr	r3, [pc, #132]	; (8002d54 <MX_GPIO_Init+0xf4>)
 8002cd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cd2:	4a20      	ldr	r2, [pc, #128]	; (8002d54 <MX_GPIO_Init+0xf4>)
 8002cd4:	f043 0302 	orr.w	r3, r3, #2
 8002cd8:	6313      	str	r3, [r2, #48]	; 0x30
 8002cda:	4b1e      	ldr	r3, [pc, #120]	; (8002d54 <MX_GPIO_Init+0xf4>)
 8002cdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cde:	f003 0302 	and.w	r3, r3, #2
 8002ce2:	607b      	str	r3, [r7, #4]
 8002ce4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1|GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);
 8002ce6:	2200      	movs	r2, #0
 8002ce8:	f240 3102 	movw	r1, #770	; 0x302
 8002cec:	481a      	ldr	r0, [pc, #104]	; (8002d58 <MX_GPIO_Init+0xf8>)
 8002cee:	f006 f92d 	bl	8008f4c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002cf2:	2301      	movs	r3, #1
 8002cf4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002cf6:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8002cfa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cfc:	2300      	movs	r3, #0
 8002cfe:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002d00:	f107 0314 	add.w	r3, r7, #20
 8002d04:	4619      	mov	r1, r3
 8002d06:	4814      	ldr	r0, [pc, #80]	; (8002d58 <MX_GPIO_Init+0xf8>)
 8002d08:	f005 fea0 	bl	8008a4c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA8 PA9 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_8|GPIO_PIN_9;
 8002d0c:	f240 3302 	movw	r3, #770	; 0x302
 8002d10:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002d12:	2301      	movs	r3, #1
 8002d14:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d16:	2300      	movs	r3, #0
 8002d18:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d1a:	2300      	movs	r3, #0
 8002d1c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002d1e:	f107 0314 	add.w	r3, r7, #20
 8002d22:	4619      	mov	r1, r3
 8002d24:	480c      	ldr	r0, [pc, #48]	; (8002d58 <MX_GPIO_Init+0xf8>)
 8002d26:	f005 fe91 	bl	8008a4c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8002d2a:	2200      	movs	r2, #0
 8002d2c:	2100      	movs	r1, #0
 8002d2e:	2006      	movs	r0, #6
 8002d30:	f005 fe03 	bl	800893a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8002d34:	2006      	movs	r0, #6
 8002d36:	f005 fe1c 	bl	8008972 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8002d3a:	2200      	movs	r2, #0
 8002d3c:	2100      	movs	r1, #0
 8002d3e:	2028      	movs	r0, #40	; 0x28
 8002d40:	f005 fdfb 	bl	800893a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8002d44:	2028      	movs	r0, #40	; 0x28
 8002d46:	f005 fe14 	bl	8008972 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002d4a:	bf00      	nop
 8002d4c:	3728      	adds	r7, #40	; 0x28
 8002d4e:	46bd      	mov	sp, r7
 8002d50:	bd80      	pop	{r7, pc}
 8002d52:	bf00      	nop
 8002d54:	40023800 	.word	0x40023800
 8002d58:	40020000 	.word	0x40020000

08002d5c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002d5c:	b480      	push	{r7}
 8002d5e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002d60:	b672      	cpsid	i
}
 8002d62:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002d64:	e7fe      	b.n	8002d64 <Error_Handler+0x8>
	...

08002d68 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002d68:	b580      	push	{r7, lr}
 8002d6a:	b082      	sub	sp, #8
 8002d6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002d6e:	2300      	movs	r3, #0
 8002d70:	607b      	str	r3, [r7, #4]
 8002d72:	4b10      	ldr	r3, [pc, #64]	; (8002db4 <HAL_MspInit+0x4c>)
 8002d74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d76:	4a0f      	ldr	r2, [pc, #60]	; (8002db4 <HAL_MspInit+0x4c>)
 8002d78:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002d7c:	6453      	str	r3, [r2, #68]	; 0x44
 8002d7e:	4b0d      	ldr	r3, [pc, #52]	; (8002db4 <HAL_MspInit+0x4c>)
 8002d80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d82:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002d86:	607b      	str	r3, [r7, #4]
 8002d88:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002d8a:	2300      	movs	r3, #0
 8002d8c:	603b      	str	r3, [r7, #0]
 8002d8e:	4b09      	ldr	r3, [pc, #36]	; (8002db4 <HAL_MspInit+0x4c>)
 8002d90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d92:	4a08      	ldr	r2, [pc, #32]	; (8002db4 <HAL_MspInit+0x4c>)
 8002d94:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002d98:	6413      	str	r3, [r2, #64]	; 0x40
 8002d9a:	4b06      	ldr	r3, [pc, #24]	; (8002db4 <HAL_MspInit+0x4c>)
 8002d9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d9e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002da2:	603b      	str	r3, [r7, #0]
 8002da4:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8002da6:	2007      	movs	r0, #7
 8002da8:	f005 fdbc 	bl	8008924 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002dac:	bf00      	nop
 8002dae:	3708      	adds	r7, #8
 8002db0:	46bd      	mov	sp, r7
 8002db2:	bd80      	pop	{r7, pc}
 8002db4:	40023800 	.word	0x40023800

08002db8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002db8:	b480      	push	{r7}
 8002dba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002dbc:	e7fe      	b.n	8002dbc <NMI_Handler+0x4>

08002dbe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002dbe:	b480      	push	{r7}
 8002dc0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002dc2:	e7fe      	b.n	8002dc2 <HardFault_Handler+0x4>

08002dc4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002dc4:	b480      	push	{r7}
 8002dc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002dc8:	e7fe      	b.n	8002dc8 <MemManage_Handler+0x4>

08002dca <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002dca:	b480      	push	{r7}
 8002dcc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002dce:	e7fe      	b.n	8002dce <BusFault_Handler+0x4>

08002dd0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002dd0:	b480      	push	{r7}
 8002dd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002dd4:	e7fe      	b.n	8002dd4 <UsageFault_Handler+0x4>

08002dd6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002dd6:	b480      	push	{r7}
 8002dd8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002dda:	bf00      	nop
 8002ddc:	46bd      	mov	sp, r7
 8002dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de2:	4770      	bx	lr

08002de4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002de4:	b480      	push	{r7}
 8002de6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002de8:	bf00      	nop
 8002dea:	46bd      	mov	sp, r7
 8002dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df0:	4770      	bx	lr

08002df2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002df2:	b480      	push	{r7}
 8002df4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002df6:	bf00      	nop
 8002df8:	46bd      	mov	sp, r7
 8002dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dfe:	4770      	bx	lr

08002e00 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002e00:	b580      	push	{r7, lr}
 8002e02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002e04:	f005 fc7a 	bl	80086fc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002e08:	bf00      	nop
 8002e0a:	bd80      	pop	{r7, pc}

08002e0c <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8002e0c:	b580      	push	{r7, lr}
 8002e0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_EXTI_IRQHandler(&H_EXTI_0);
 8002e10:	4802      	ldr	r0, [pc, #8]	; (8002e1c <EXTI0_IRQHandler+0x10>)
 8002e12:	f005 fdf7 	bl	8008a04 <HAL_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8002e16:	bf00      	nop
 8002e18:	bd80      	pop	{r7, pc}
 8002e1a:	bf00      	nop
 8002e1c:	200001ec 	.word	0x200001ec

08002e20 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002e20:	b580      	push	{r7, lr}
 8002e22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_EXTI_IRQHandler(&H_EXTI_13);
 8002e24:	4802      	ldr	r0, [pc, #8]	; (8002e30 <EXTI15_10_IRQHandler+0x10>)
 8002e26:	f005 fded 	bl	8008a04 <HAL_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002e2a:	bf00      	nop
 8002e2c:	bd80      	pop	{r7, pc}
 8002e2e:	bf00      	nop
 8002e30:	200000e4 	.word	0x200000e4

08002e34 <BSP_SPI1_Init>:
/**
  * @brief  Initializes SPI HAL.
  * @retval BSP status
  */
int32_t BSP_SPI1_Init(void)
{
 8002e34:	b580      	push	{r7, lr}
 8002e36:	b082      	sub	sp, #8
 8002e38:	af00      	add	r7, sp, #0
  int32_t ret = BSP_ERROR_NONE;
 8002e3a:	2300      	movs	r3, #0
 8002e3c:	607b      	str	r3, [r7, #4]

  hspi1.Instance  = SPI1;
 8002e3e:	4b12      	ldr	r3, [pc, #72]	; (8002e88 <BSP_SPI1_Init+0x54>)
 8002e40:	4a12      	ldr	r2, [pc, #72]	; (8002e8c <BSP_SPI1_Init+0x58>)
 8002e42:	601a      	str	r2, [r3, #0]

  if(SPI1InitCounter++ == 0)
 8002e44:	4b12      	ldr	r3, [pc, #72]	; (8002e90 <BSP_SPI1_Init+0x5c>)
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	1c5a      	adds	r2, r3, #1
 8002e4a:	4911      	ldr	r1, [pc, #68]	; (8002e90 <BSP_SPI1_Init+0x5c>)
 8002e4c:	600a      	str	r2, [r1, #0]
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d114      	bne.n	8002e7c <BSP_SPI1_Init+0x48>
  {
    if (HAL_SPI_GetState(&hspi1) == HAL_SPI_STATE_RESET)
 8002e52:	480d      	ldr	r0, [pc, #52]	; (8002e88 <BSP_SPI1_Init+0x54>)
 8002e54:	f007 ff99 	bl	800ad8a <HAL_SPI_GetState>
 8002e58:	4603      	mov	r3, r0
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d10e      	bne.n	8002e7c <BSP_SPI1_Init+0x48>
    {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 0U)
        /* Init the SPI Msp */
        SPI1_MspInit(&hspi1);
 8002e5e:	480a      	ldr	r0, [pc, #40]	; (8002e88 <BSP_SPI1_Init+0x54>)
 8002e60:	f000 f93a 	bl	80030d8 <SPI1_MspInit>
            {
                return BSP_ERROR_MSP_FAILURE;
            }
        }
#endif
        if(ret == BSP_ERROR_NONE)
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d108      	bne.n	8002e7c <BSP_SPI1_Init+0x48>
        {
            /* Init the SPI */
            if (MX_SPI1_Init(&hspi1) != HAL_OK)
 8002e6a:	4807      	ldr	r0, [pc, #28]	; (8002e88 <BSP_SPI1_Init+0x54>)
 8002e6c:	f000 f8f8 	bl	8003060 <MX_SPI1_Init>
 8002e70:	4603      	mov	r3, r0
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d002      	beq.n	8002e7c <BSP_SPI1_Init+0x48>
            {
                ret = BSP_ERROR_BUS_FAILURE;
 8002e76:	f06f 0307 	mvn.w	r3, #7
 8002e7a:	607b      	str	r3, [r7, #4]
            }
        }
    }
  }

  return ret;
 8002e7c:	687b      	ldr	r3, [r7, #4]
}
 8002e7e:	4618      	mov	r0, r3
 8002e80:	3708      	adds	r7, #8
 8002e82:	46bd      	mov	sp, r7
 8002e84:	bd80      	pop	{r7, pc}
 8002e86:	bf00      	nop
 8002e88:	20000300 	.word	0x20000300
 8002e8c:	40013000 	.word	0x40013000
 8002e90:	200003ac 	.word	0x200003ac

08002e94 <BSP_SPI1_SendRecv>:
  * @param  pData: Pointer to data buffer to send/receive
  * @param  Length: Length of data in byte
  * @retval BSP status
  */
int32_t BSP_SPI1_SendRecv(uint8_t *pTxData, uint8_t *pRxData, uint16_t Length)
{
 8002e94:	b580      	push	{r7, lr}
 8002e96:	b088      	sub	sp, #32
 8002e98:	af02      	add	r7, sp, #8
 8002e9a:	60f8      	str	r0, [r7, #12]
 8002e9c:	60b9      	str	r1, [r7, #8]
 8002e9e:	4613      	mov	r3, r2
 8002ea0:	80fb      	strh	r3, [r7, #6]
  int32_t ret = BSP_ERROR_NONE;
 8002ea2:	2300      	movs	r3, #0
 8002ea4:	617b      	str	r3, [r7, #20]

  if(HAL_SPI_TransmitReceive(&hspi1, pTxData, pRxData, Length, BUS_SPI1_POLL_TIMEOUT) != HAL_OK)
 8002ea6:	88fb      	ldrh	r3, [r7, #6]
 8002ea8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002eac:	9200      	str	r2, [sp, #0]
 8002eae:	68ba      	ldr	r2, [r7, #8]
 8002eb0:	68f9      	ldr	r1, [r7, #12]
 8002eb2:	4807      	ldr	r0, [pc, #28]	; (8002ed0 <BSP_SPI1_SendRecv+0x3c>)
 8002eb4:	f007 fdc7 	bl	800aa46 <HAL_SPI_TransmitReceive>
 8002eb8:	4603      	mov	r3, r0
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d002      	beq.n	8002ec4 <BSP_SPI1_SendRecv+0x30>
  {
      ret = BSP_ERROR_UNKNOWN_FAILURE;
 8002ebe:	f06f 0305 	mvn.w	r3, #5
 8002ec2:	617b      	str	r3, [r7, #20]
  }
  return ret;
 8002ec4:	697b      	ldr	r3, [r7, #20]
}
 8002ec6:	4618      	mov	r0, r3
 8002ec8:	3718      	adds	r7, #24
 8002eca:	46bd      	mov	sp, r7
 8002ecc:	bd80      	pop	{r7, pc}
 8002ece:	bf00      	nop
 8002ed0:	20000300 	.word	0x20000300

08002ed4 <BSP_I2C1_Init>:
/**
  * @brief  Initialize I2C HAL
  * @retval BSP status
  */
int32_t BSP_I2C1_Init(void)
{
 8002ed4:	b580      	push	{r7, lr}
 8002ed6:	b082      	sub	sp, #8
 8002ed8:	af00      	add	r7, sp, #0

  int32_t ret = BSP_ERROR_NONE;
 8002eda:	2300      	movs	r3, #0
 8002edc:	607b      	str	r3, [r7, #4]

  hi2c1.Instance  = I2C1;
 8002ede:	4b13      	ldr	r3, [pc, #76]	; (8002f2c <BSP_I2C1_Init+0x58>)
 8002ee0:	4a13      	ldr	r2, [pc, #76]	; (8002f30 <BSP_I2C1_Init+0x5c>)
 8002ee2:	601a      	str	r2, [r3, #0]

  if(I2C1InitCounter++ == 0)
 8002ee4:	4b13      	ldr	r3, [pc, #76]	; (8002f34 <BSP_I2C1_Init+0x60>)
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	1c5a      	adds	r2, r3, #1
 8002eea:	4912      	ldr	r1, [pc, #72]	; (8002f34 <BSP_I2C1_Init+0x60>)
 8002eec:	600a      	str	r2, [r1, #0]
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d117      	bne.n	8002f22 <BSP_I2C1_Init+0x4e>
  {
    if (HAL_I2C_GetState(&hi2c1) == HAL_I2C_STATE_RESET)
 8002ef2:	480e      	ldr	r0, [pc, #56]	; (8002f2c <BSP_I2C1_Init+0x58>)
 8002ef4:	f006 fd06 	bl	8009904 <HAL_I2C_GetState>
 8002ef8:	4603      	mov	r3, r0
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d111      	bne.n	8002f22 <BSP_I2C1_Init+0x4e>
    {
    #if (USE_HAL_I2C_REGISTER_CALLBACKS == 0U)
      /* Init the I2C Msp */
      I2C1_MspInit(&hi2c1);
 8002efe:	480b      	ldr	r0, [pc, #44]	; (8002f2c <BSP_I2C1_Init+0x58>)
 8002f00:	f000 f986 	bl	8003210 <I2C1_MspInit>
        {
          return BSP_ERROR_MSP_FAILURE;
        }
      }
    #endif
      if(ret == BSP_ERROR_NONE)
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d10b      	bne.n	8002f22 <BSP_I2C1_Init+0x4e>
      {
        /* Init the I2C */
        if(MX_I2C1_Init(&hi2c1) != HAL_OK)
 8002f0a:	4808      	ldr	r0, [pc, #32]	; (8002f2c <BSP_I2C1_Init+0x58>)
 8002f0c:	f000 f94c 	bl	80031a8 <MX_I2C1_Init>
 8002f10:	4603      	mov	r3, r0
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d003      	beq.n	8002f1e <BSP_I2C1_Init+0x4a>
        {
          ret = BSP_ERROR_BUS_FAILURE;
 8002f16:	f06f 0307 	mvn.w	r3, #7
 8002f1a:	607b      	str	r3, [r7, #4]
 8002f1c:	e001      	b.n	8002f22 <BSP_I2C1_Init+0x4e>
        }
        else
        {
          ret = BSP_ERROR_NONE;
 8002f1e:	2300      	movs	r3, #0
 8002f20:	607b      	str	r3, [r7, #4]
        }
      }
    }
  }
  return ret;
 8002f22:	687b      	ldr	r3, [r7, #4]
}
 8002f24:	4618      	mov	r0, r3
 8002f26:	3708      	adds	r7, #8
 8002f28:	46bd      	mov	sp, r7
 8002f2a:	bd80      	pop	{r7, pc}
 8002f2c:	20000358 	.word	0x20000358
 8002f30:	40005400 	.word	0x40005400
 8002f34:	200003b0 	.word	0x200003b0

08002f38 <BSP_I2C1_DeInit>:
/**
  * @brief  DeInitialize I2C HAL.
  * @retval BSP status
  */
int32_t BSP_I2C1_DeInit(void)
{
 8002f38:	b580      	push	{r7, lr}
 8002f3a:	b082      	sub	sp, #8
 8002f3c:	af00      	add	r7, sp, #0
  int32_t ret = BSP_ERROR_NONE;
 8002f3e:	2300      	movs	r3, #0
 8002f40:	607b      	str	r3, [r7, #4]

  if (I2C1InitCounter > 0)
 8002f42:	4b0f      	ldr	r3, [pc, #60]	; (8002f80 <BSP_I2C1_DeInit+0x48>)
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d014      	beq.n	8002f74 <BSP_I2C1_DeInit+0x3c>
  {
    if (--I2C1InitCounter == 0)
 8002f4a:	4b0d      	ldr	r3, [pc, #52]	; (8002f80 <BSP_I2C1_DeInit+0x48>)
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	3b01      	subs	r3, #1
 8002f50:	4a0b      	ldr	r2, [pc, #44]	; (8002f80 <BSP_I2C1_DeInit+0x48>)
 8002f52:	6013      	str	r3, [r2, #0]
 8002f54:	4b0a      	ldr	r3, [pc, #40]	; (8002f80 <BSP_I2C1_DeInit+0x48>)
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d10b      	bne.n	8002f74 <BSP_I2C1_DeInit+0x3c>
    {
  #if (USE_HAL_I2C_REGISTER_CALLBACKS == 0U)
      /* DeInit the I2C */
      I2C1_MspDeInit(&hi2c1);
 8002f5c:	4809      	ldr	r0, [pc, #36]	; (8002f84 <BSP_I2C1_DeInit+0x4c>)
 8002f5e:	f000 f9a1 	bl	80032a4 <I2C1_MspDeInit>
  #endif
      /* DeInit the I2C */
      if (HAL_I2C_DeInit(&hi2c1) != HAL_OK)
 8002f62:	4808      	ldr	r0, [pc, #32]	; (8002f84 <BSP_I2C1_DeInit+0x4c>)
 8002f64:	f006 f96a 	bl	800923c <HAL_I2C_DeInit>
 8002f68:	4603      	mov	r3, r0
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d002      	beq.n	8002f74 <BSP_I2C1_DeInit+0x3c>
      {
        ret = BSP_ERROR_BUS_FAILURE;
 8002f6e:	f06f 0307 	mvn.w	r3, #7
 8002f72:	607b      	str	r3, [r7, #4]
      }
    }
  }
  return ret;
 8002f74:	687b      	ldr	r3, [r7, #4]
}
 8002f76:	4618      	mov	r0, r3
 8002f78:	3708      	adds	r7, #8
 8002f7a:	46bd      	mov	sp, r7
 8002f7c:	bd80      	pop	{r7, pc}
 8002f7e:	bf00      	nop
 8002f80:	200003b0 	.word	0x200003b0
 8002f84:	20000358 	.word	0x20000358

08002f88 <BSP_I2C1_WriteReg>:
  * @param  Length Data Length
  * @retval BSP status
  */

int32_t BSP_I2C1_WriteReg(uint16_t DevAddr, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 8002f88:	b580      	push	{r7, lr}
 8002f8a:	b08a      	sub	sp, #40	; 0x28
 8002f8c:	af04      	add	r7, sp, #16
 8002f8e:	60ba      	str	r2, [r7, #8]
 8002f90:	461a      	mov	r2, r3
 8002f92:	4603      	mov	r3, r0
 8002f94:	81fb      	strh	r3, [r7, #14]
 8002f96:	460b      	mov	r3, r1
 8002f98:	81bb      	strh	r3, [r7, #12]
 8002f9a:	4613      	mov	r3, r2
 8002f9c:	80fb      	strh	r3, [r7, #6]
  int32_t ret = BSP_ERROR_NONE;
 8002f9e:	2300      	movs	r3, #0
 8002fa0:	617b      	str	r3, [r7, #20]

  if (HAL_I2C_Mem_Write(&hi2c1, DevAddr,Reg, I2C_MEMADD_SIZE_8BIT,pData, Length, BUS_I2C1_POLL_TIMEOUT) != HAL_OK)
 8002fa2:	89ba      	ldrh	r2, [r7, #12]
 8002fa4:	89f9      	ldrh	r1, [r7, #14]
 8002fa6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002faa:	9302      	str	r3, [sp, #8]
 8002fac:	88fb      	ldrh	r3, [r7, #6]
 8002fae:	9301      	str	r3, [sp, #4]
 8002fb0:	68bb      	ldr	r3, [r7, #8]
 8002fb2:	9300      	str	r3, [sp, #0]
 8002fb4:	2301      	movs	r3, #1
 8002fb6:	480c      	ldr	r0, [pc, #48]	; (8002fe8 <BSP_I2C1_WriteReg+0x60>)
 8002fb8:	f006 f984 	bl	80092c4 <HAL_I2C_Mem_Write>
 8002fbc:	4603      	mov	r3, r0
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d00c      	beq.n	8002fdc <BSP_I2C1_WriteReg+0x54>
  {
    if (HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF)
 8002fc2:	4809      	ldr	r0, [pc, #36]	; (8002fe8 <BSP_I2C1_WriteReg+0x60>)
 8002fc4:	f006 fcac 	bl	8009920 <HAL_I2C_GetError>
 8002fc8:	4603      	mov	r3, r0
 8002fca:	2b04      	cmp	r3, #4
 8002fcc:	d103      	bne.n	8002fd6 <BSP_I2C1_WriteReg+0x4e>
    {
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 8002fce:	f06f 0365 	mvn.w	r3, #101	; 0x65
 8002fd2:	617b      	str	r3, [r7, #20]
 8002fd4:	e002      	b.n	8002fdc <BSP_I2C1_WriteReg+0x54>
    }
    else
    {
      ret =  BSP_ERROR_PERIPH_FAILURE;
 8002fd6:	f06f 0303 	mvn.w	r3, #3
 8002fda:	617b      	str	r3, [r7, #20]
    }
  }
  return ret;
 8002fdc:	697b      	ldr	r3, [r7, #20]
}
 8002fde:	4618      	mov	r0, r3
 8002fe0:	3718      	adds	r7, #24
 8002fe2:	46bd      	mov	sp, r7
 8002fe4:	bd80      	pop	{r7, pc}
 8002fe6:	bf00      	nop
 8002fe8:	20000358 	.word	0x20000358

08002fec <BSP_I2C1_ReadReg>:
  * @param  pData  Pointer to data buffer to read
  * @param  Length Data Length
  * @retval BSP status
  */
int32_t  BSP_I2C1_ReadReg(uint16_t DevAddr, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 8002fec:	b580      	push	{r7, lr}
 8002fee:	b08a      	sub	sp, #40	; 0x28
 8002ff0:	af04      	add	r7, sp, #16
 8002ff2:	60ba      	str	r2, [r7, #8]
 8002ff4:	461a      	mov	r2, r3
 8002ff6:	4603      	mov	r3, r0
 8002ff8:	81fb      	strh	r3, [r7, #14]
 8002ffa:	460b      	mov	r3, r1
 8002ffc:	81bb      	strh	r3, [r7, #12]
 8002ffe:	4613      	mov	r3, r2
 8003000:	80fb      	strh	r3, [r7, #6]
  int32_t ret = BSP_ERROR_NONE;
 8003002:	2300      	movs	r3, #0
 8003004:	617b      	str	r3, [r7, #20]

  if (HAL_I2C_Mem_Read(&hi2c1, DevAddr, Reg, I2C_MEMADD_SIZE_8BIT, pData, Length, BUS_I2C1_POLL_TIMEOUT) != HAL_OK)
 8003006:	89ba      	ldrh	r2, [r7, #12]
 8003008:	89f9      	ldrh	r1, [r7, #14]
 800300a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800300e:	9302      	str	r3, [sp, #8]
 8003010:	88fb      	ldrh	r3, [r7, #6]
 8003012:	9301      	str	r3, [sp, #4]
 8003014:	68bb      	ldr	r3, [r7, #8]
 8003016:	9300      	str	r3, [sp, #0]
 8003018:	2301      	movs	r3, #1
 800301a:	480c      	ldr	r0, [pc, #48]	; (800304c <BSP_I2C1_ReadReg+0x60>)
 800301c:	f006 fa4c 	bl	80094b8 <HAL_I2C_Mem_Read>
 8003020:	4603      	mov	r3, r0
 8003022:	2b00      	cmp	r3, #0
 8003024:	d00c      	beq.n	8003040 <BSP_I2C1_ReadReg+0x54>
  {
    if (HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF)
 8003026:	4809      	ldr	r0, [pc, #36]	; (800304c <BSP_I2C1_ReadReg+0x60>)
 8003028:	f006 fc7a 	bl	8009920 <HAL_I2C_GetError>
 800302c:	4603      	mov	r3, r0
 800302e:	2b04      	cmp	r3, #4
 8003030:	d103      	bne.n	800303a <BSP_I2C1_ReadReg+0x4e>
    {
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 8003032:	f06f 0365 	mvn.w	r3, #101	; 0x65
 8003036:	617b      	str	r3, [r7, #20]
 8003038:	e002      	b.n	8003040 <BSP_I2C1_ReadReg+0x54>
    }
    else
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 800303a:	f06f 0303 	mvn.w	r3, #3
 800303e:	617b      	str	r3, [r7, #20]
    }
  }
  return ret;
 8003040:	697b      	ldr	r3, [r7, #20]
}
 8003042:	4618      	mov	r0, r3
 8003044:	3718      	adds	r7, #24
 8003046:	46bd      	mov	sp, r7
 8003048:	bd80      	pop	{r7, pc}
 800304a:	bf00      	nop
 800304c:	20000358 	.word	0x20000358

08003050 <BSP_GetTick>:

/**
  * @brief  Return system tick in ms
  * @retval Current HAL time base time stamp
  */
int32_t BSP_GetTick(void) {
 8003050:	b580      	push	{r7, lr}
 8003052:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8003054:	f005 fb66 	bl	8008724 <HAL_GetTick>
 8003058:	4603      	mov	r3, r0
}
 800305a:	4618      	mov	r0, r3
 800305c:	bd80      	pop	{r7, pc}
	...

08003060 <MX_SPI1_Init>:

/* SPI1 init function */

__weak HAL_StatusTypeDef MX_SPI1_Init(SPI_HandleTypeDef* hspi)
{
 8003060:	b580      	push	{r7, lr}
 8003062:	b084      	sub	sp, #16
 8003064:	af00      	add	r7, sp, #0
 8003066:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8003068:	2300      	movs	r3, #0
 800306a:	73fb      	strb	r3, [r7, #15]

  hspi->Instance = SPI1;
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	4a19      	ldr	r2, [pc, #100]	; (80030d4 <MX_SPI1_Init+0x74>)
 8003070:	601a      	str	r2, [r3, #0]
  hspi->Init.Mode = SPI_MODE_MASTER;
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	f44f 7282 	mov.w	r2, #260	; 0x104
 8003078:	605a      	str	r2, [r3, #4]
  hspi->Init.Direction = SPI_DIRECTION_2LINES;
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	2200      	movs	r2, #0
 800307e:	609a      	str	r2, [r3, #8]
  hspi->Init.DataSize = SPI_DATASIZE_8BIT;
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	2200      	movs	r2, #0
 8003084:	60da      	str	r2, [r3, #12]
  hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	2200      	movs	r2, #0
 800308a:	611a      	str	r2, [r3, #16]
  hspi->Init.CLKPhase = SPI_PHASE_1EDGE;
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	2200      	movs	r2, #0
 8003090:	615a      	str	r2, [r3, #20]
  hspi->Init.NSS = SPI_NSS_SOFT;
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003098:	619a      	str	r2, [r3, #24]
  hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	2218      	movs	r2, #24
 800309e:	61da      	str	r2, [r3, #28]
  hspi->Init.FirstBit = SPI_FIRSTBIT_MSB;
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	2200      	movs	r2, #0
 80030a4:	621a      	str	r2, [r3, #32]
  hspi->Init.TIMode = SPI_TIMODE_DISABLE;
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	2200      	movs	r2, #0
 80030aa:	625a      	str	r2, [r3, #36]	; 0x24
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	2200      	movs	r2, #0
 80030b0:	629a      	str	r2, [r3, #40]	; 0x28
  hspi->Init.CRCPolynomial = 10;
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	220a      	movs	r2, #10
 80030b6:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(hspi) != HAL_OK)
 80030b8:	6878      	ldr	r0, [r7, #4]
 80030ba:	f007 fc31 	bl	800a920 <HAL_SPI_Init>
 80030be:	4603      	mov	r3, r0
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d001      	beq.n	80030c8 <MX_SPI1_Init+0x68>
  {
    ret = HAL_ERROR;
 80030c4:	2301      	movs	r3, #1
 80030c6:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 80030c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80030ca:	4618      	mov	r0, r3
 80030cc:	3710      	adds	r7, #16
 80030ce:	46bd      	mov	sp, r7
 80030d0:	bd80      	pop	{r7, pc}
 80030d2:	bf00      	nop
 80030d4:	40013000 	.word	0x40013000

080030d8 <SPI1_MspInit>:

static void SPI1_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80030d8:	b580      	push	{r7, lr}
 80030da:	b08a      	sub	sp, #40	; 0x28
 80030dc:	af00      	add	r7, sp, #0
 80030de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80030e0:	2300      	movs	r3, #0
 80030e2:	613b      	str	r3, [r7, #16]
 80030e4:	4b2d      	ldr	r3, [pc, #180]	; (800319c <SPI1_MspInit+0xc4>)
 80030e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030e8:	4a2c      	ldr	r2, [pc, #176]	; (800319c <SPI1_MspInit+0xc4>)
 80030ea:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80030ee:	6453      	str	r3, [r2, #68]	; 0x44
 80030f0:	4b2a      	ldr	r3, [pc, #168]	; (800319c <SPI1_MspInit+0xc4>)
 80030f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030f4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80030f8:	613b      	str	r3, [r7, #16]
 80030fa:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80030fc:	2300      	movs	r3, #0
 80030fe:	60fb      	str	r3, [r7, #12]
 8003100:	4b26      	ldr	r3, [pc, #152]	; (800319c <SPI1_MspInit+0xc4>)
 8003102:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003104:	4a25      	ldr	r2, [pc, #148]	; (800319c <SPI1_MspInit+0xc4>)
 8003106:	f043 0301 	orr.w	r3, r3, #1
 800310a:	6313      	str	r3, [r2, #48]	; 0x30
 800310c:	4b23      	ldr	r3, [pc, #140]	; (800319c <SPI1_MspInit+0xc4>)
 800310e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003110:	f003 0301 	and.w	r3, r3, #1
 8003114:	60fb      	str	r3, [r7, #12]
 8003116:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003118:	2300      	movs	r3, #0
 800311a:	60bb      	str	r3, [r7, #8]
 800311c:	4b1f      	ldr	r3, [pc, #124]	; (800319c <SPI1_MspInit+0xc4>)
 800311e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003120:	4a1e      	ldr	r2, [pc, #120]	; (800319c <SPI1_MspInit+0xc4>)
 8003122:	f043 0302 	orr.w	r3, r3, #2
 8003126:	6313      	str	r3, [r2, #48]	; 0x30
 8003128:	4b1c      	ldr	r3, [pc, #112]	; (800319c <SPI1_MspInit+0xc4>)
 800312a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800312c:	f003 0302 	and.w	r3, r3, #2
 8003130:	60bb      	str	r3, [r7, #8]
 8003132:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    PB3     ------> SPI1_SCK
    */
    GPIO_InitStruct.Pin = BUS_SPI1_MISO_GPIO_PIN;
 8003134:	2340      	movs	r3, #64	; 0x40
 8003136:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003138:	2302      	movs	r3, #2
 800313a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800313c:	2300      	movs	r3, #0
 800313e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003140:	2303      	movs	r3, #3
 8003142:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_SPI1_MISO_GPIO_AF;
 8003144:	2305      	movs	r3, #5
 8003146:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(BUS_SPI1_MISO_GPIO_PORT, &GPIO_InitStruct);
 8003148:	f107 0314 	add.w	r3, r7, #20
 800314c:	4619      	mov	r1, r3
 800314e:	4814      	ldr	r0, [pc, #80]	; (80031a0 <SPI1_MspInit+0xc8>)
 8003150:	f005 fc7c 	bl	8008a4c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BUS_SPI1_MOSI_GPIO_PIN;
 8003154:	2380      	movs	r3, #128	; 0x80
 8003156:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003158:	2302      	movs	r3, #2
 800315a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800315c:	2300      	movs	r3, #0
 800315e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003160:	2303      	movs	r3, #3
 8003162:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_SPI1_MOSI_GPIO_AF;
 8003164:	2305      	movs	r3, #5
 8003166:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(BUS_SPI1_MOSI_GPIO_PORT, &GPIO_InitStruct);
 8003168:	f107 0314 	add.w	r3, r7, #20
 800316c:	4619      	mov	r1, r3
 800316e:	480c      	ldr	r0, [pc, #48]	; (80031a0 <SPI1_MspInit+0xc8>)
 8003170:	f005 fc6c 	bl	8008a4c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BUS_SPI1_SCK_GPIO_PIN;
 8003174:	2308      	movs	r3, #8
 8003176:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003178:	2302      	movs	r3, #2
 800317a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800317c:	2300      	movs	r3, #0
 800317e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003180:	2303      	movs	r3, #3
 8003182:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_SPI1_SCK_GPIO_AF;
 8003184:	2305      	movs	r3, #5
 8003186:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(BUS_SPI1_SCK_GPIO_PORT, &GPIO_InitStruct);
 8003188:	f107 0314 	add.w	r3, r7, #20
 800318c:	4619      	mov	r1, r3
 800318e:	4805      	ldr	r0, [pc, #20]	; (80031a4 <SPI1_MspInit+0xcc>)
 8003190:	f005 fc5c 	bl	8008a4c <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
}
 8003194:	bf00      	nop
 8003196:	3728      	adds	r7, #40	; 0x28
 8003198:	46bd      	mov	sp, r7
 800319a:	bd80      	pop	{r7, pc}
 800319c:	40023800 	.word	0x40023800
 80031a0:	40020000 	.word	0x40020000
 80031a4:	40020400 	.word	0x40020400

080031a8 <MX_I2C1_Init>:
}

/* I2C1 init function */

__weak HAL_StatusTypeDef MX_I2C1_Init(I2C_HandleTypeDef* hi2c)
{
 80031a8:	b580      	push	{r7, lr}
 80031aa:	b084      	sub	sp, #16
 80031ac:	af00      	add	r7, sp, #0
 80031ae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 80031b0:	2300      	movs	r3, #0
 80031b2:	73fb      	strb	r3, [r7, #15]

  hi2c->Instance = I2C1;
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	4a14      	ldr	r2, [pc, #80]	; (8003208 <MX_I2C1_Init+0x60>)
 80031b8:	601a      	str	r2, [r3, #0]
  hi2c->Init.ClockSpeed = 100000;
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	4a13      	ldr	r2, [pc, #76]	; (800320c <MX_I2C1_Init+0x64>)
 80031be:	605a      	str	r2, [r3, #4]
  hi2c->Init.DutyCycle = I2C_DUTYCYCLE_2;
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	2200      	movs	r2, #0
 80031c4:	609a      	str	r2, [r3, #8]
  hi2c->Init.OwnAddress1 = 0;
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	2200      	movs	r2, #0
 80031ca:	60da      	str	r2, [r3, #12]
  hi2c->Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80031d2:	611a      	str	r2, [r3, #16]
  hi2c->Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	2200      	movs	r2, #0
 80031d8:	615a      	str	r2, [r3, #20]
  hi2c->Init.OwnAddress2 = 0;
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	2200      	movs	r2, #0
 80031de:	619a      	str	r2, [r3, #24]
  hi2c->Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	2200      	movs	r2, #0
 80031e4:	61da      	str	r2, [r3, #28]
  hi2c->Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	2200      	movs	r2, #0
 80031ea:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(hi2c) != HAL_OK)
 80031ec:	6878      	ldr	r0, [r7, #4]
 80031ee:	f005 fee1 	bl	8008fb4 <HAL_I2C_Init>
 80031f2:	4603      	mov	r3, r0
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d001      	beq.n	80031fc <MX_I2C1_Init+0x54>
  {
    ret = HAL_ERROR;
 80031f8:	2301      	movs	r3, #1
 80031fa:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 80031fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80031fe:	4618      	mov	r0, r3
 8003200:	3710      	adds	r7, #16
 8003202:	46bd      	mov	sp, r7
 8003204:	bd80      	pop	{r7, pc}
 8003206:	bf00      	nop
 8003208:	40005400 	.word	0x40005400
 800320c:	000186a0 	.word	0x000186a0

08003210 <I2C1_MspInit>:

static void I2C1_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8003210:	b580      	push	{r7, lr}
 8003212:	b08a      	sub	sp, #40	; 0x28
 8003214:	af00      	add	r7, sp, #0
 8003216:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003218:	2300      	movs	r3, #0
 800321a:	613b      	str	r3, [r7, #16]
 800321c:	4b1f      	ldr	r3, [pc, #124]	; (800329c <I2C1_MspInit+0x8c>)
 800321e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003220:	4a1e      	ldr	r2, [pc, #120]	; (800329c <I2C1_MspInit+0x8c>)
 8003222:	f043 0302 	orr.w	r3, r3, #2
 8003226:	6313      	str	r3, [r2, #48]	; 0x30
 8003228:	4b1c      	ldr	r3, [pc, #112]	; (800329c <I2C1_MspInit+0x8c>)
 800322a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800322c:	f003 0302 	and.w	r3, r3, #2
 8003230:	613b      	str	r3, [r7, #16]
 8003232:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = BUS_I2C1_SCL_GPIO_PIN;
 8003234:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003238:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800323a:	2312      	movs	r3, #18
 800323c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800323e:	2300      	movs	r3, #0
 8003240:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003242:	2303      	movs	r3, #3
 8003244:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_I2C1_SCL_GPIO_AF;
 8003246:	2304      	movs	r3, #4
 8003248:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(BUS_I2C1_SCL_GPIO_PORT, &GPIO_InitStruct);
 800324a:	f107 0314 	add.w	r3, r7, #20
 800324e:	4619      	mov	r1, r3
 8003250:	4813      	ldr	r0, [pc, #76]	; (80032a0 <I2C1_MspInit+0x90>)
 8003252:	f005 fbfb 	bl	8008a4c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BUS_I2C1_SDA_GPIO_PIN;
 8003256:	f44f 7300 	mov.w	r3, #512	; 0x200
 800325a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800325c:	2312      	movs	r3, #18
 800325e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003260:	2300      	movs	r3, #0
 8003262:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003264:	2303      	movs	r3, #3
 8003266:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_I2C1_SDA_GPIO_AF;
 8003268:	2304      	movs	r3, #4
 800326a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(BUS_I2C1_SDA_GPIO_PORT, &GPIO_InitStruct);
 800326c:	f107 0314 	add.w	r3, r7, #20
 8003270:	4619      	mov	r1, r3
 8003272:	480b      	ldr	r0, [pc, #44]	; (80032a0 <I2C1_MspInit+0x90>)
 8003274:	f005 fbea 	bl	8008a4c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003278:	2300      	movs	r3, #0
 800327a:	60fb      	str	r3, [r7, #12]
 800327c:	4b07      	ldr	r3, [pc, #28]	; (800329c <I2C1_MspInit+0x8c>)
 800327e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003280:	4a06      	ldr	r2, [pc, #24]	; (800329c <I2C1_MspInit+0x8c>)
 8003282:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003286:	6413      	str	r3, [r2, #64]	; 0x40
 8003288:	4b04      	ldr	r3, [pc, #16]	; (800329c <I2C1_MspInit+0x8c>)
 800328a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800328c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003290:	60fb      	str	r3, [r7, #12]
 8003292:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
}
 8003294:	bf00      	nop
 8003296:	3728      	adds	r7, #40	; 0x28
 8003298:	46bd      	mov	sp, r7
 800329a:	bd80      	pop	{r7, pc}
 800329c:	40023800 	.word	0x40023800
 80032a0:	40020400 	.word	0x40020400

080032a4 <I2C1_MspDeInit>:

static void I2C1_MspDeInit(I2C_HandleTypeDef* i2cHandle)
{
 80032a4:	b580      	push	{r7, lr}
 80032a6:	b082      	sub	sp, #8
 80032a8:	af00      	add	r7, sp, #0
 80032aa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 80032ac:	4b09      	ldr	r3, [pc, #36]	; (80032d4 <I2C1_MspDeInit+0x30>)
 80032ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032b0:	4a08      	ldr	r2, [pc, #32]	; (80032d4 <I2C1_MspDeInit+0x30>)
 80032b2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80032b6:	6413      	str	r3, [r2, #64]	; 0x40

    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(BUS_I2C1_SCL_GPIO_PORT, BUS_I2C1_SCL_GPIO_PIN);
 80032b8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80032bc:	4806      	ldr	r0, [pc, #24]	; (80032d8 <I2C1_MspDeInit+0x34>)
 80032be:	f005 fd49 	bl	8008d54 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(BUS_I2C1_SDA_GPIO_PORT, BUS_I2C1_SDA_GPIO_PIN);
 80032c2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80032c6:	4804      	ldr	r0, [pc, #16]	; (80032d8 <I2C1_MspDeInit+0x34>)
 80032c8:	f005 fd44 	bl	8008d54 <HAL_GPIO_DeInit>

  /* USER CODE BEGIN I2C1_MspDeInit 1 */

  /* USER CODE END I2C1_MspDeInit 1 */
}
 80032cc:	bf00      	nop
 80032ce:	3708      	adds	r7, #8
 80032d0:	46bd      	mov	sp, r7
 80032d2:	bd80      	pop	{r7, pc}
 80032d4:	40023800 	.word	0x40023800
 80032d8:	40020400 	.word	0x40020400

080032dc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80032dc:	b480      	push	{r7}
 80032de:	af00      	add	r7, sp, #0
  return 1;
 80032e0:	2301      	movs	r3, #1
}
 80032e2:	4618      	mov	r0, r3
 80032e4:	46bd      	mov	sp, r7
 80032e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ea:	4770      	bx	lr

080032ec <_kill>:

int _kill(int pid, int sig)
{
 80032ec:	b580      	push	{r7, lr}
 80032ee:	b082      	sub	sp, #8
 80032f0:	af00      	add	r7, sp, #0
 80032f2:	6078      	str	r0, [r7, #4]
 80032f4:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80032f6:	f009 fb6b 	bl	800c9d0 <__errno>
 80032fa:	4603      	mov	r3, r0
 80032fc:	2216      	movs	r2, #22
 80032fe:	601a      	str	r2, [r3, #0]
  return -1;
 8003300:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003304:	4618      	mov	r0, r3
 8003306:	3708      	adds	r7, #8
 8003308:	46bd      	mov	sp, r7
 800330a:	bd80      	pop	{r7, pc}

0800330c <_exit>:

void _exit (int status)
{
 800330c:	b580      	push	{r7, lr}
 800330e:	b082      	sub	sp, #8
 8003310:	af00      	add	r7, sp, #0
 8003312:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8003314:	f04f 31ff 	mov.w	r1, #4294967295
 8003318:	6878      	ldr	r0, [r7, #4]
 800331a:	f7ff ffe7 	bl	80032ec <_kill>
  while (1) {}    /* Make sure we hang here */
 800331e:	e7fe      	b.n	800331e <_exit+0x12>

08003320 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003320:	b580      	push	{r7, lr}
 8003322:	b086      	sub	sp, #24
 8003324:	af00      	add	r7, sp, #0
 8003326:	60f8      	str	r0, [r7, #12]
 8003328:	60b9      	str	r1, [r7, #8]
 800332a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800332c:	2300      	movs	r3, #0
 800332e:	617b      	str	r3, [r7, #20]
 8003330:	e00a      	b.n	8003348 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8003332:	f3af 8000 	nop.w
 8003336:	4601      	mov	r1, r0
 8003338:	68bb      	ldr	r3, [r7, #8]
 800333a:	1c5a      	adds	r2, r3, #1
 800333c:	60ba      	str	r2, [r7, #8]
 800333e:	b2ca      	uxtb	r2, r1
 8003340:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003342:	697b      	ldr	r3, [r7, #20]
 8003344:	3301      	adds	r3, #1
 8003346:	617b      	str	r3, [r7, #20]
 8003348:	697a      	ldr	r2, [r7, #20]
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	429a      	cmp	r2, r3
 800334e:	dbf0      	blt.n	8003332 <_read+0x12>
  }

  return len;
 8003350:	687b      	ldr	r3, [r7, #4]
}
 8003352:	4618      	mov	r0, r3
 8003354:	3718      	adds	r7, #24
 8003356:	46bd      	mov	sp, r7
 8003358:	bd80      	pop	{r7, pc}

0800335a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800335a:	b580      	push	{r7, lr}
 800335c:	b086      	sub	sp, #24
 800335e:	af00      	add	r7, sp, #0
 8003360:	60f8      	str	r0, [r7, #12]
 8003362:	60b9      	str	r1, [r7, #8]
 8003364:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003366:	2300      	movs	r3, #0
 8003368:	617b      	str	r3, [r7, #20]
 800336a:	e009      	b.n	8003380 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800336c:	68bb      	ldr	r3, [r7, #8]
 800336e:	1c5a      	adds	r2, r3, #1
 8003370:	60ba      	str	r2, [r7, #8]
 8003372:	781b      	ldrb	r3, [r3, #0]
 8003374:	4618      	mov	r0, r3
 8003376:	f005 f90b 	bl	8008590 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800337a:	697b      	ldr	r3, [r7, #20]
 800337c:	3301      	adds	r3, #1
 800337e:	617b      	str	r3, [r7, #20]
 8003380:	697a      	ldr	r2, [r7, #20]
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	429a      	cmp	r2, r3
 8003386:	dbf1      	blt.n	800336c <_write+0x12>
  }
  return len;
 8003388:	687b      	ldr	r3, [r7, #4]
}
 800338a:	4618      	mov	r0, r3
 800338c:	3718      	adds	r7, #24
 800338e:	46bd      	mov	sp, r7
 8003390:	bd80      	pop	{r7, pc}

08003392 <_close>:

int _close(int file)
{
 8003392:	b480      	push	{r7}
 8003394:	b083      	sub	sp, #12
 8003396:	af00      	add	r7, sp, #0
 8003398:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800339a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800339e:	4618      	mov	r0, r3
 80033a0:	370c      	adds	r7, #12
 80033a2:	46bd      	mov	sp, r7
 80033a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033a8:	4770      	bx	lr

080033aa <_fstat>:


int _fstat(int file, struct stat *st)
{
 80033aa:	b480      	push	{r7}
 80033ac:	b083      	sub	sp, #12
 80033ae:	af00      	add	r7, sp, #0
 80033b0:	6078      	str	r0, [r7, #4]
 80033b2:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80033b4:	683b      	ldr	r3, [r7, #0]
 80033b6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80033ba:	605a      	str	r2, [r3, #4]
  return 0;
 80033bc:	2300      	movs	r3, #0
}
 80033be:	4618      	mov	r0, r3
 80033c0:	370c      	adds	r7, #12
 80033c2:	46bd      	mov	sp, r7
 80033c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033c8:	4770      	bx	lr

080033ca <_isatty>:

int _isatty(int file)
{
 80033ca:	b480      	push	{r7}
 80033cc:	b083      	sub	sp, #12
 80033ce:	af00      	add	r7, sp, #0
 80033d0:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80033d2:	2301      	movs	r3, #1
}
 80033d4:	4618      	mov	r0, r3
 80033d6:	370c      	adds	r7, #12
 80033d8:	46bd      	mov	sp, r7
 80033da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033de:	4770      	bx	lr

080033e0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80033e0:	b480      	push	{r7}
 80033e2:	b085      	sub	sp, #20
 80033e4:	af00      	add	r7, sp, #0
 80033e6:	60f8      	str	r0, [r7, #12]
 80033e8:	60b9      	str	r1, [r7, #8]
 80033ea:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80033ec:	2300      	movs	r3, #0
}
 80033ee:	4618      	mov	r0, r3
 80033f0:	3714      	adds	r7, #20
 80033f2:	46bd      	mov	sp, r7
 80033f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033f8:	4770      	bx	lr
	...

080033fc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80033fc:	b580      	push	{r7, lr}
 80033fe:	b086      	sub	sp, #24
 8003400:	af00      	add	r7, sp, #0
 8003402:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003404:	4a14      	ldr	r2, [pc, #80]	; (8003458 <_sbrk+0x5c>)
 8003406:	4b15      	ldr	r3, [pc, #84]	; (800345c <_sbrk+0x60>)
 8003408:	1ad3      	subs	r3, r2, r3
 800340a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800340c:	697b      	ldr	r3, [r7, #20]
 800340e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003410:	4b13      	ldr	r3, [pc, #76]	; (8003460 <_sbrk+0x64>)
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	2b00      	cmp	r3, #0
 8003416:	d102      	bne.n	800341e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003418:	4b11      	ldr	r3, [pc, #68]	; (8003460 <_sbrk+0x64>)
 800341a:	4a12      	ldr	r2, [pc, #72]	; (8003464 <_sbrk+0x68>)
 800341c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800341e:	4b10      	ldr	r3, [pc, #64]	; (8003460 <_sbrk+0x64>)
 8003420:	681a      	ldr	r2, [r3, #0]
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	4413      	add	r3, r2
 8003426:	693a      	ldr	r2, [r7, #16]
 8003428:	429a      	cmp	r2, r3
 800342a:	d207      	bcs.n	800343c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800342c:	f009 fad0 	bl	800c9d0 <__errno>
 8003430:	4603      	mov	r3, r0
 8003432:	220c      	movs	r2, #12
 8003434:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003436:	f04f 33ff 	mov.w	r3, #4294967295
 800343a:	e009      	b.n	8003450 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800343c:	4b08      	ldr	r3, [pc, #32]	; (8003460 <_sbrk+0x64>)
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003442:	4b07      	ldr	r3, [pc, #28]	; (8003460 <_sbrk+0x64>)
 8003444:	681a      	ldr	r2, [r3, #0]
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	4413      	add	r3, r2
 800344a:	4a05      	ldr	r2, [pc, #20]	; (8003460 <_sbrk+0x64>)
 800344c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800344e:	68fb      	ldr	r3, [r7, #12]
}
 8003450:	4618      	mov	r0, r3
 8003452:	3718      	adds	r7, #24
 8003454:	46bd      	mov	sp, r7
 8003456:	bd80      	pop	{r7, pc}
 8003458:	20018000 	.word	0x20018000
 800345c:	00000400 	.word	0x00000400
 8003460:	200003b4 	.word	0x200003b4
 8003464:	200007f0 	.word	0x200007f0

08003468 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003468:	b480      	push	{r7}
 800346a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800346c:	4b06      	ldr	r3, [pc, #24]	; (8003488 <SystemInit+0x20>)
 800346e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003472:	4a05      	ldr	r2, [pc, #20]	; (8003488 <SystemInit+0x20>)
 8003474:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003478:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800347c:	bf00      	nop
 800347e:	46bd      	mov	sp, r7
 8003480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003484:	4770      	bx	lr
 8003486:	bf00      	nop
 8003488:	e000ed00 	.word	0xe000ed00

0800348c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 800348c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80034c4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003490:	480d      	ldr	r0, [pc, #52]	; (80034c8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8003492:	490e      	ldr	r1, [pc, #56]	; (80034cc <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8003494:	4a0e      	ldr	r2, [pc, #56]	; (80034d0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8003496:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003498:	e002      	b.n	80034a0 <LoopCopyDataInit>

0800349a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800349a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800349c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800349e:	3304      	adds	r3, #4

080034a0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80034a0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80034a2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80034a4:	d3f9      	bcc.n	800349a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80034a6:	4a0b      	ldr	r2, [pc, #44]	; (80034d4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80034a8:	4c0b      	ldr	r4, [pc, #44]	; (80034d8 <LoopFillZerobss+0x26>)
  movs r3, #0
 80034aa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80034ac:	e001      	b.n	80034b2 <LoopFillZerobss>

080034ae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80034ae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80034b0:	3204      	adds	r2, #4

080034b2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80034b2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80034b4:	d3fb      	bcc.n	80034ae <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80034b6:	f7ff ffd7 	bl	8003468 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80034ba:	f009 fa8f 	bl	800c9dc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80034be:	f7ff fb41 	bl	8002b44 <main>
  bx  lr    
 80034c2:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80034c4:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80034c8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80034cc:	2000015c 	.word	0x2000015c
  ldr r2, =_sidata
 80034d0:	0800dcd8 	.word	0x0800dcd8
  ldr r2, =_sbss
 80034d4:	2000015c 	.word	0x2000015c
  ldr r4, =_ebss
 80034d8:	200007f0 	.word	0x200007f0

080034dc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80034dc:	e7fe      	b.n	80034dc <ADC_IRQHandler>
	...

080034e0 <LIS2DW12_RegisterBusIO>:
  * @brief  Register Component Bus IO operations
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DW12_RegisterBusIO(LIS2DW12_Object_t *pObj, LIS2DW12_IO_t *pIO)
{
 80034e0:	b580      	push	{r7, lr}
 80034e2:	b084      	sub	sp, #16
 80034e4:	af00      	add	r7, sp, #0
 80034e6:	6078      	str	r0, [r7, #4]
 80034e8:	6039      	str	r1, [r7, #0]
  int32_t ret = LIS2DW12_OK;
 80034ea:	2300      	movs	r3, #0
 80034ec:	60fb      	str	r3, [r7, #12]

  if (pObj == NULL)
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d103      	bne.n	80034fc <LIS2DW12_RegisterBusIO+0x1c>
  {
    ret = LIS2DW12_ERROR;
 80034f4:	f04f 33ff 	mov.w	r3, #4294967295
 80034f8:	60fb      	str	r3, [r7, #12]
 80034fa:	e051      	b.n	80035a0 <LIS2DW12_RegisterBusIO+0xc0>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 80034fc:	683b      	ldr	r3, [r7, #0]
 80034fe:	681a      	ldr	r2, [r3, #0]
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 8003504:	683b      	ldr	r3, [r7, #0]
 8003506:	685a      	ldr	r2, [r3, #4]
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	605a      	str	r2, [r3, #4]
    pObj->IO.BusType   = pIO->BusType;
 800350c:	683b      	ldr	r3, [r7, #0]
 800350e:	689a      	ldr	r2, [r3, #8]
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	609a      	str	r2, [r3, #8]
    pObj->IO.Address   = pIO->Address;
 8003514:	683b      	ldr	r3, [r7, #0]
 8003516:	7b1a      	ldrb	r2, [r3, #12]
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	731a      	strb	r2, [r3, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 800351c:	683b      	ldr	r3, [r7, #0]
 800351e:	691a      	ldr	r2, [r3, #16]
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	611a      	str	r2, [r3, #16]
    pObj->IO.ReadReg   = pIO->ReadReg;
 8003524:	683b      	ldr	r3, [r7, #0]
 8003526:	695a      	ldr	r2, [r3, #20]
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	615a      	str	r2, [r3, #20]
    pObj->IO.GetTick   = pIO->GetTick;
 800352c:	683b      	ldr	r3, [r7, #0]
 800352e:	699a      	ldr	r2, [r3, #24]
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	619a      	str	r2, [r3, #24]

    pObj->Ctx.read_reg  = ReadRegWrap;
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	4a1d      	ldr	r2, [pc, #116]	; (80035ac <LIS2DW12_RegisterBusIO+0xcc>)
 8003538:	625a      	str	r2, [r3, #36]	; 0x24
    pObj->Ctx.write_reg = WriteRegWrap;
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	4a1c      	ldr	r2, [pc, #112]	; (80035b0 <LIS2DW12_RegisterBusIO+0xd0>)
 800353e:	621a      	str	r2, [r3, #32]
    pObj->Ctx.mdelay    = pIO->Delay;
 8003540:	683b      	ldr	r3, [r7, #0]
 8003542:	69da      	ldr	r2, [r3, #28]
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	629a      	str	r2, [r3, #40]	; 0x28
    pObj->Ctx.handle   = pObj;
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	687a      	ldr	r2, [r7, #4]
 800354c:	62da      	str	r2, [r3, #44]	; 0x2c

    if (pObj->IO.Init == NULL)
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	2b00      	cmp	r3, #0
 8003554:	d103      	bne.n	800355e <LIS2DW12_RegisterBusIO+0x7e>
    {
      ret = LIS2DW12_ERROR;
 8003556:	f04f 33ff 	mov.w	r3, #4294967295
 800355a:	60fb      	str	r3, [r7, #12]
 800355c:	e020      	b.n	80035a0 <LIS2DW12_RegisterBusIO+0xc0>
    }
    else if (pObj->IO.Init() != LIS2DW12_OK)
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	4798      	blx	r3
 8003564:	4603      	mov	r3, r0
 8003566:	2b00      	cmp	r3, #0
 8003568:	d003      	beq.n	8003572 <LIS2DW12_RegisterBusIO+0x92>
    {
      ret = LIS2DW12_ERROR;
 800356a:	f04f 33ff 	mov.w	r3, #4294967295
 800356e:	60fb      	str	r3, [r7, #12]
 8003570:	e016      	b.n	80035a0 <LIS2DW12_RegisterBusIO+0xc0>
    }
    else
    {
      if (pObj->IO.BusType == LIS2DW12_SPI_3WIRES_BUS) /* SPI 3-Wires */
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	689b      	ldr	r3, [r3, #8]
 8003576:	2b02      	cmp	r3, #2
 8003578:	d112      	bne.n	80035a0 <LIS2DW12_RegisterBusIO+0xc0>
      {
        /* Enable the SPI 3-Wires support only the first time */
        if (pObj->is_initialized == 0U)
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003580:	2b00      	cmp	r3, #0
 8003582:	d10d      	bne.n	80035a0 <LIS2DW12_RegisterBusIO+0xc0>
        {
          /* Enable SPI 3-Wires on the component */
          uint8_t data = 0x05;
 8003584:	2305      	movs	r3, #5
 8003586:	72fb      	strb	r3, [r7, #11]

          if (LIS2DW12_Write_Reg(pObj, LIS2DW12_CTRL2, data) != LIS2DW12_OK)
 8003588:	7afb      	ldrb	r3, [r7, #11]
 800358a:	461a      	mov	r2, r3
 800358c:	2121      	movs	r1, #33	; 0x21
 800358e:	6878      	ldr	r0, [r7, #4]
 8003590:	f000 fd87 	bl	80040a2 <LIS2DW12_Write_Reg>
 8003594:	4603      	mov	r3, r0
 8003596:	2b00      	cmp	r3, #0
 8003598:	d002      	beq.n	80035a0 <LIS2DW12_RegisterBusIO+0xc0>
          {
            ret = LIS2DW12_ERROR;
 800359a:	f04f 33ff 	mov.w	r3, #4294967295
 800359e:	60fb      	str	r3, [r7, #12]
        }
      }
    }
  }

  return ret;
 80035a0:	68fb      	ldr	r3, [r7, #12]
}
 80035a2:	4618      	mov	r0, r3
 80035a4:	3710      	adds	r7, #16
 80035a6:	46bd      	mov	sp, r7
 80035a8:	bd80      	pop	{r7, pc}
 80035aa:	bf00      	nop
 80035ac:	08004435 	.word	0x08004435
 80035b0:	0800446b 	.word	0x0800446b

080035b4 <LIS2DW12_Init>:
  * @brief  Initialize the LIS2DW12 sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DW12_Init(LIS2DW12_Object_t *pObj)
{
 80035b4:	b580      	push	{r7, lr}
 80035b6:	b082      	sub	sp, #8
 80035b8:	af00      	add	r7, sp, #0
 80035ba:	6078      	str	r0, [r7, #4]
  /* Enable register address automatically incremented during a multiple byte
  access with a serial interface. */
  if (lis2dw12_auto_increment_set(&(pObj->Ctx), PROPERTY_ENABLE) != LIS2DW12_OK)
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	3320      	adds	r3, #32
 80035c0:	2101      	movs	r1, #1
 80035c2:	4618      	mov	r0, r3
 80035c4:	f001 fa94 	bl	8004af0 <lis2dw12_auto_increment_set>
 80035c8:	4603      	mov	r3, r0
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d002      	beq.n	80035d4 <LIS2DW12_Init+0x20>
  {
    return LIS2DW12_ERROR;
 80035ce:	f04f 33ff 	mov.w	r3, #4294967295
 80035d2:	e04b      	b.n	800366c <LIS2DW12_Init+0xb8>
  }

  /* Enable BDU */
  if (lis2dw12_block_data_update_set(&(pObj->Ctx), PROPERTY_ENABLE) != LIS2DW12_OK)
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	3320      	adds	r3, #32
 80035d8:	2101      	movs	r1, #1
 80035da:	4618      	mov	r0, r3
 80035dc:	f001 f9a8 	bl	8004930 <lis2dw12_block_data_update_set>
 80035e0:	4603      	mov	r3, r0
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d002      	beq.n	80035ec <LIS2DW12_Init+0x38>
  {
    return LIS2DW12_ERROR;
 80035e6:	f04f 33ff 	mov.w	r3, #4294967295
 80035ea:	e03f      	b.n	800366c <LIS2DW12_Init+0xb8>
  }

  /* FIFO mode selection */
  if (lis2dw12_fifo_mode_set(&(pObj->Ctx), LIS2DW12_BYPASS_MODE) != LIS2DW12_OK)
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	3320      	adds	r3, #32
 80035f0:	2100      	movs	r1, #0
 80035f2:	4618      	mov	r0, r3
 80035f4:	f001 faa2 	bl	8004b3c <lis2dw12_fifo_mode_set>
 80035f8:	4603      	mov	r3, r0
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d002      	beq.n	8003604 <LIS2DW12_Init+0x50>
  {
    return LIS2DW12_ERROR;
 80035fe:	f04f 33ff 	mov.w	r3, #4294967295
 8003602:	e033      	b.n	800366c <LIS2DW12_Init+0xb8>
  }

  /* Power mode selection */
  if (lis2dw12_power_mode_set(&(pObj->Ctx), LIS2DW12_HIGH_PERFORMANCE) != LIS2DW12_OK)
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	3320      	adds	r3, #32
 8003608:	2104      	movs	r1, #4
 800360a:	4618      	mov	r0, r3
 800360c:	f000 ff78 	bl	8004500 <lis2dw12_power_mode_set>
 8003610:	4603      	mov	r3, r0
 8003612:	2b00      	cmp	r3, #0
 8003614:	d002      	beq.n	800361c <LIS2DW12_Init+0x68>
  {
    return LIS2DW12_ERROR;
 8003616:	f04f 33ff 	mov.w	r3, #4294967295
 800361a:	e027      	b.n	800366c <LIS2DW12_Init+0xb8>
  }

  /* Select default output data rate. */
  pObj->acc_odr = 100.0f;
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	4a15      	ldr	r2, [pc, #84]	; (8003674 <LIS2DW12_Init+0xc0>)
 8003620:	635a      	str	r2, [r3, #52]	; 0x34
  /* Select default operating mode. */
  pObj->acc_operating_mode = LIS2DW12_HIGH_PERFORMANCE_MODE;
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	2200      	movs	r2, #0
 8003626:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  /* Select default low noise (disabled). */
  pObj->acc_low_noise = LIS2DW12_LOW_NOISE_DISABLE;
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	2200      	movs	r2, #0
 800362e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Output data rate selection - power down. */
  if (lis2dw12_data_rate_set(&(pObj->Ctx), LIS2DW12_XL_ODR_OFF) != LIS2DW12_OK)
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	3320      	adds	r3, #32
 8003636:	2100      	movs	r1, #0
 8003638:	4618      	mov	r0, r3
 800363a:	f001 f869 	bl	8004710 <lis2dw12_data_rate_set>
 800363e:	4603      	mov	r3, r0
 8003640:	2b00      	cmp	r3, #0
 8003642:	d002      	beq.n	800364a <LIS2DW12_Init+0x96>
  {
    return LIS2DW12_ERROR;
 8003644:	f04f 33ff 	mov.w	r3, #4294967295
 8003648:	e010      	b.n	800366c <LIS2DW12_Init+0xb8>
  }

  /* Full scale selection. */
  if (lis2dw12_full_scale_set(&(pObj->Ctx), LIS2DW12_2g) != LIS2DW12_OK)
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	3320      	adds	r3, #32
 800364e:	2100      	movs	r1, #0
 8003650:	4618      	mov	r0, r3
 8003652:	f001 f993 	bl	800497c <lis2dw12_full_scale_set>
 8003656:	4603      	mov	r3, r0
 8003658:	2b00      	cmp	r3, #0
 800365a:	d002      	beq.n	8003662 <LIS2DW12_Init+0xae>
  {
    return LIS2DW12_ERROR;
 800365c:	f04f 33ff 	mov.w	r3, #4294967295
 8003660:	e004      	b.n	800366c <LIS2DW12_Init+0xb8>
  }

  pObj->is_initialized = 1;
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	2201      	movs	r2, #1
 8003666:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return LIS2DW12_OK;
 800366a:	2300      	movs	r3, #0
}
 800366c:	4618      	mov	r0, r3
 800366e:	3708      	adds	r7, #8
 8003670:	46bd      	mov	sp, r7
 8003672:	bd80      	pop	{r7, pc}
 8003674:	42c80000 	.word	0x42c80000

08003678 <LIS2DW12_DeInit>:
  * @brief  Deinitialize the LIS2DW12 sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DW12_DeInit(LIS2DW12_Object_t *pObj)
{
 8003678:	b580      	push	{r7, lr}
 800367a:	b082      	sub	sp, #8
 800367c:	af00      	add	r7, sp, #0
 800367e:	6078      	str	r0, [r7, #4]
  /* Disable the component */
  if (LIS2DW12_ACC_Disable(pObj) != LIS2DW12_OK)
 8003680:	6878      	ldr	r0, [r7, #4]
 8003682:	f000 f888 	bl	8003796 <LIS2DW12_ACC_Disable>
 8003686:	4603      	mov	r3, r0
 8003688:	2b00      	cmp	r3, #0
 800368a:	d002      	beq.n	8003692 <LIS2DW12_DeInit+0x1a>
  {
    return LIS2DW12_ERROR;
 800368c:	f04f 33ff 	mov.w	r3, #4294967295
 8003690:	e010      	b.n	80036b4 <LIS2DW12_DeInit+0x3c>
  }

  /* Reset output data rate. */
  pObj->acc_odr = 0.0f;
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	f04f 0200 	mov.w	r2, #0
 8003698:	635a      	str	r2, [r3, #52]	; 0x34
  /* Reset operating mode to default value. */
  pObj->acc_operating_mode = LIS2DW12_HIGH_PERFORMANCE_MODE;
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	2200      	movs	r2, #0
 800369e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  /* Reset low noise to default value (disabled). */
  pObj->acc_low_noise = LIS2DW12_LOW_NOISE_DISABLE;
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	2200      	movs	r2, #0
 80036a6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  pObj->is_initialized = 0;
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	2200      	movs	r2, #0
 80036ae:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return LIS2DW12_OK;
 80036b2:	2300      	movs	r3, #0
}
 80036b4:	4618      	mov	r0, r3
 80036b6:	3708      	adds	r7, #8
 80036b8:	46bd      	mov	sp, r7
 80036ba:	bd80      	pop	{r7, pc}

080036bc <LIS2DW12_ReadID>:
  * @param  pObj the device pObj
  * @param  Id the WHO_AM_I value
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DW12_ReadID(LIS2DW12_Object_t *pObj, uint8_t *Id)
{
 80036bc:	b580      	push	{r7, lr}
 80036be:	b082      	sub	sp, #8
 80036c0:	af00      	add	r7, sp, #0
 80036c2:	6078      	str	r0, [r7, #4]
 80036c4:	6039      	str	r1, [r7, #0]
  if (lis2dw12_device_id_get(&(pObj->Ctx), Id) != LIS2DW12_OK)
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	3320      	adds	r3, #32
 80036ca:	6839      	ldr	r1, [r7, #0]
 80036cc:	4618      	mov	r0, r3
 80036ce:	f001 f9fe 	bl	8004ace <lis2dw12_device_id_get>
 80036d2:	4603      	mov	r3, r0
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d002      	beq.n	80036de <LIS2DW12_ReadID+0x22>
  {
    return LIS2DW12_ERROR;
 80036d8:	f04f 33ff 	mov.w	r3, #4294967295
 80036dc:	e000      	b.n	80036e0 <LIS2DW12_ReadID+0x24>
  }

  return LIS2DW12_OK;
 80036de:	2300      	movs	r3, #0
}
 80036e0:	4618      	mov	r0, r3
 80036e2:	3708      	adds	r7, #8
 80036e4:	46bd      	mov	sp, r7
 80036e6:	bd80      	pop	{r7, pc}

080036e8 <LIS2DW12_GetCapabilities>:
  * @param  pObj Component object pointer
  * @param  Capabilities pointer to LIS2DW12 sensor capabilities
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DW12_GetCapabilities(LIS2DW12_Object_t *pObj, LIS2DW12_Capabilities_t *Capabilities)
{
 80036e8:	b480      	push	{r7}
 80036ea:	b083      	sub	sp, #12
 80036ec:	af00      	add	r7, sp, #0
 80036ee:	6078      	str	r0, [r7, #4]
 80036f0:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  Capabilities->Acc          = 1;
 80036f2:	683b      	ldr	r3, [r7, #0]
 80036f4:	2201      	movs	r2, #1
 80036f6:	701a      	strb	r2, [r3, #0]
  Capabilities->Gyro         = 0;
 80036f8:	683b      	ldr	r3, [r7, #0]
 80036fa:	2200      	movs	r2, #0
 80036fc:	705a      	strb	r2, [r3, #1]
  Capabilities->Magneto      = 0;
 80036fe:	683b      	ldr	r3, [r7, #0]
 8003700:	2200      	movs	r2, #0
 8003702:	709a      	strb	r2, [r3, #2]
  Capabilities->LowPower     = 0;
 8003704:	683b      	ldr	r3, [r7, #0]
 8003706:	2200      	movs	r2, #0
 8003708:	70da      	strb	r2, [r3, #3]
  Capabilities->GyroMaxFS    = 0;
 800370a:	683b      	ldr	r3, [r7, #0]
 800370c:	2200      	movs	r2, #0
 800370e:	605a      	str	r2, [r3, #4]
  Capabilities->AccMaxFS     = 16;
 8003710:	683b      	ldr	r3, [r7, #0]
 8003712:	2210      	movs	r2, #16
 8003714:	609a      	str	r2, [r3, #8]
  Capabilities->MagMaxFS     = 0;
 8003716:	683b      	ldr	r3, [r7, #0]
 8003718:	2200      	movs	r2, #0
 800371a:	60da      	str	r2, [r3, #12]
  Capabilities->GyroMaxOdr   = 0.0f;
 800371c:	683b      	ldr	r3, [r7, #0]
 800371e:	f04f 0200 	mov.w	r2, #0
 8003722:	611a      	str	r2, [r3, #16]
  Capabilities->AccMaxOdr    = 1600.0f;
 8003724:	683b      	ldr	r3, [r7, #0]
 8003726:	4a06      	ldr	r2, [pc, #24]	; (8003740 <LIS2DW12_GetCapabilities+0x58>)
 8003728:	615a      	str	r2, [r3, #20]
  Capabilities->MagMaxOdr    = 0.0f;
 800372a:	683b      	ldr	r3, [r7, #0]
 800372c:	f04f 0200 	mov.w	r2, #0
 8003730:	619a      	str	r2, [r3, #24]
  return LIS2DW12_OK;
 8003732:	2300      	movs	r3, #0
}
 8003734:	4618      	mov	r0, r3
 8003736:	370c      	adds	r7, #12
 8003738:	46bd      	mov	sp, r7
 800373a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800373e:	4770      	bx	lr
 8003740:	44c80000 	.word	0x44c80000

08003744 <LIS2DW12_ACC_Enable>:
  * @brief  Enable the LIS2DW12 accelerometer sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DW12_ACC_Enable(LIS2DW12_Object_t *pObj)
{
 8003744:	b580      	push	{r7, lr}
 8003746:	b082      	sub	sp, #8
 8003748:	af00      	add	r7, sp, #0
 800374a:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->acc_is_enabled == 1U)
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8003752:	2b01      	cmp	r3, #1
 8003754:	d101      	bne.n	800375a <LIS2DW12_ACC_Enable+0x16>
  {
    return LIS2DW12_OK;
 8003756:	2300      	movs	r3, #0
 8003758:	e019      	b.n	800378e <LIS2DW12_ACC_Enable+0x4a>
  }

  /* Output data rate selection. */
  if (LIS2DW12_ACC_SetOutputDataRate_When_Enabled(pObj, pObj->acc_odr, pObj->acc_operating_mode,
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	f893 1038 	ldrb.w	r1, [r3, #56]	; 0x38
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800376c:	461a      	mov	r2, r3
 800376e:	eeb0 0a67 	vmov.f32	s0, s15
 8003772:	6878      	ldr	r0, [r7, #4]
 8003774:	f000 fcb0 	bl	80040d8 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled>
 8003778:	4603      	mov	r3, r0
 800377a:	2b00      	cmp	r3, #0
 800377c:	d002      	beq.n	8003784 <LIS2DW12_ACC_Enable+0x40>
                                                  pObj->acc_low_noise) != LIS2DW12_OK)
  {
    return LIS2DW12_ERROR;
 800377e:	f04f 33ff 	mov.w	r3, #4294967295
 8003782:	e004      	b.n	800378e <LIS2DW12_ACC_Enable+0x4a>
  }

  pObj->acc_is_enabled = 1;
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	2201      	movs	r2, #1
 8003788:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

  return LIS2DW12_OK;
 800378c:	2300      	movs	r3, #0
}
 800378e:	4618      	mov	r0, r3
 8003790:	3708      	adds	r7, #8
 8003792:	46bd      	mov	sp, r7
 8003794:	bd80      	pop	{r7, pc}

08003796 <LIS2DW12_ACC_Disable>:
  * @brief  Disable the LIS2DW12 accelerometer sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DW12_ACC_Disable(LIS2DW12_Object_t *pObj)
{
 8003796:	b580      	push	{r7, lr}
 8003798:	b082      	sub	sp, #8
 800379a:	af00      	add	r7, sp, #0
 800379c:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->acc_is_enabled == 0U)
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d101      	bne.n	80037ac <LIS2DW12_ACC_Disable+0x16>
  {
    return LIS2DW12_OK;
 80037a8:	2300      	movs	r3, #0
 80037aa:	e010      	b.n	80037ce <LIS2DW12_ACC_Disable+0x38>
  }

  /* Output data rate selection - power down. */
  if (lis2dw12_data_rate_set(&(pObj->Ctx), LIS2DW12_XL_ODR_OFF) != LIS2DW12_OK)
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	3320      	adds	r3, #32
 80037b0:	2100      	movs	r1, #0
 80037b2:	4618      	mov	r0, r3
 80037b4:	f000 ffac 	bl	8004710 <lis2dw12_data_rate_set>
 80037b8:	4603      	mov	r3, r0
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d002      	beq.n	80037c4 <LIS2DW12_ACC_Disable+0x2e>
  {
    return LIS2DW12_ERROR;
 80037be:	f04f 33ff 	mov.w	r3, #4294967295
 80037c2:	e004      	b.n	80037ce <LIS2DW12_ACC_Disable+0x38>
  }

  pObj->acc_is_enabled = 0;
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	2200      	movs	r2, #0
 80037c8:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

  return LIS2DW12_OK;
 80037cc:	2300      	movs	r3, #0
}
 80037ce:	4618      	mov	r0, r3
 80037d0:	3708      	adds	r7, #8
 80037d2:	46bd      	mov	sp, r7
 80037d4:	bd80      	pop	{r7, pc}
	...

080037d8 <LIS2DW12_ACC_GetSensitivity>:
  * @param  pObj the device pObj
  * @param  Sensitivity pointer
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DW12_ACC_GetSensitivity(LIS2DW12_Object_t *pObj, float *Sensitivity)
{
 80037d8:	b580      	push	{r7, lr}
 80037da:	b084      	sub	sp, #16
 80037dc:	af00      	add	r7, sp, #0
 80037de:	6078      	str	r0, [r7, #4]
 80037e0:	6039      	str	r1, [r7, #0]
  int32_t ret = LIS2DW12_OK;
 80037e2:	2300      	movs	r3, #0
 80037e4:	60fb      	str	r3, [r7, #12]
  lis2dw12_fs_t full_scale;
  lis2dw12_mode_t mode;

  /* Read actual full scale selection from sensor. */
  if (lis2dw12_full_scale_get(&(pObj->Ctx), &full_scale) != LIS2DW12_OK)
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	3320      	adds	r3, #32
 80037ea:	f107 020b 	add.w	r2, r7, #11
 80037ee:	4611      	mov	r1, r2
 80037f0:	4618      	mov	r0, r3
 80037f2:	f001 f8e9 	bl	80049c8 <lis2dw12_full_scale_get>
 80037f6:	4603      	mov	r3, r0
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d002      	beq.n	8003802 <LIS2DW12_ACC_GetSensitivity+0x2a>
  {
    return LIS2DW12_ERROR;
 80037fc:	f04f 33ff 	mov.w	r3, #4294967295
 8003800:	e0a0      	b.n	8003944 <LIS2DW12_ACC_GetSensitivity+0x16c>
  }

  /* Read actual power mode selection from sensor. */
  if (lis2dw12_power_mode_get(&(pObj->Ctx), &mode) != LIS2DW12_OK)
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	3320      	adds	r3, #32
 8003806:	f107 020a 	add.w	r2, r7, #10
 800380a:	4611      	mov	r1, r2
 800380c:	4618      	mov	r0, r3
 800380e:	f000 fec5 	bl	800459c <lis2dw12_power_mode_get>
 8003812:	4603      	mov	r3, r0
 8003814:	2b00      	cmp	r3, #0
 8003816:	d002      	beq.n	800381e <LIS2DW12_ACC_GetSensitivity+0x46>
  {
    return LIS2DW12_ERROR;
 8003818:	f04f 33ff 	mov.w	r3, #4294967295
 800381c:	e092      	b.n	8003944 <LIS2DW12_ACC_GetSensitivity+0x16c>
  }

  switch (mode)
 800381e:	7abb      	ldrb	r3, [r7, #10]
 8003820:	2b1b      	cmp	r3, #27
 8003822:	f200 8087 	bhi.w	8003934 <LIS2DW12_ACC_GetSensitivity+0x15c>
 8003826:	a201      	add	r2, pc, #4	; (adr r2, 800382c <LIS2DW12_ACC_GetSensitivity+0x54>)
 8003828:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800382c:	0800389d 	.word	0x0800389d
 8003830:	080038e9 	.word	0x080038e9
 8003834:	080038e9 	.word	0x080038e9
 8003838:	080038e9 	.word	0x080038e9
 800383c:	080038e9 	.word	0x080038e9
 8003840:	08003935 	.word	0x08003935
 8003844:	08003935 	.word	0x08003935
 8003848:	08003935 	.word	0x08003935
 800384c:	0800389d 	.word	0x0800389d
 8003850:	080038e9 	.word	0x080038e9
 8003854:	080038e9 	.word	0x080038e9
 8003858:	080038e9 	.word	0x080038e9
 800385c:	08003935 	.word	0x08003935
 8003860:	08003935 	.word	0x08003935
 8003864:	08003935 	.word	0x08003935
 8003868:	08003935 	.word	0x08003935
 800386c:	0800389d 	.word	0x0800389d
 8003870:	080038e9 	.word	0x080038e9
 8003874:	080038e9 	.word	0x080038e9
 8003878:	080038e9 	.word	0x080038e9
 800387c:	080038e9 	.word	0x080038e9
 8003880:	08003935 	.word	0x08003935
 8003884:	08003935 	.word	0x08003935
 8003888:	08003935 	.word	0x08003935
 800388c:	0800389d 	.word	0x0800389d
 8003890:	080038e9 	.word	0x080038e9
 8003894:	080038e9 	.word	0x080038e9
 8003898:	080038e9 	.word	0x080038e9
  {
    case LIS2DW12_CONT_LOW_PWR_12bit:
    case LIS2DW12_SINGLE_LOW_PWR_12bit:
    case LIS2DW12_CONT_LOW_PWR_LOW_NOISE_12bit:
    case LIS2DW12_SINGLE_LOW_LOW_NOISE_PWR_12bit:
      switch (full_scale)
 800389c:	7afb      	ldrb	r3, [r7, #11]
 800389e:	2b03      	cmp	r3, #3
 80038a0:	d81a      	bhi.n	80038d8 <LIS2DW12_ACC_GetSensitivity+0x100>
 80038a2:	a201      	add	r2, pc, #4	; (adr r2, 80038a8 <LIS2DW12_ACC_GetSensitivity+0xd0>)
 80038a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80038a8:	080038b9 	.word	0x080038b9
 80038ac:	080038c1 	.word	0x080038c1
 80038b0:	080038c9 	.word	0x080038c9
 80038b4:	080038d1 	.word	0x080038d1
      {
        case LIS2DW12_2g:
          *Sensitivity = LIS2DW12_ACC_SENSITIVITY_FOR_FS_2G_LOPOW1_MODE;
 80038b8:	683b      	ldr	r3, [r7, #0]
 80038ba:	4a24      	ldr	r2, [pc, #144]	; (800394c <LIS2DW12_ACC_GetSensitivity+0x174>)
 80038bc:	601a      	str	r2, [r3, #0]
          break;
 80038be:	e012      	b.n	80038e6 <LIS2DW12_ACC_GetSensitivity+0x10e>

        case LIS2DW12_4g:
          *Sensitivity = LIS2DW12_ACC_SENSITIVITY_FOR_FS_4G_LOPOW1_MODE;
 80038c0:	683b      	ldr	r3, [r7, #0]
 80038c2:	4a23      	ldr	r2, [pc, #140]	; (8003950 <LIS2DW12_ACC_GetSensitivity+0x178>)
 80038c4:	601a      	str	r2, [r3, #0]
          break;
 80038c6:	e00e      	b.n	80038e6 <LIS2DW12_ACC_GetSensitivity+0x10e>

        case LIS2DW12_8g:
          *Sensitivity = LIS2DW12_ACC_SENSITIVITY_FOR_FS_8G_LOPOW1_MODE;
 80038c8:	683b      	ldr	r3, [r7, #0]
 80038ca:	4a22      	ldr	r2, [pc, #136]	; (8003954 <LIS2DW12_ACC_GetSensitivity+0x17c>)
 80038cc:	601a      	str	r2, [r3, #0]
          break;
 80038ce:	e00a      	b.n	80038e6 <LIS2DW12_ACC_GetSensitivity+0x10e>

        case LIS2DW12_16g:
          *Sensitivity = LIS2DW12_ACC_SENSITIVITY_FOR_FS_16G_LOPOW1_MODE;
 80038d0:	683b      	ldr	r3, [r7, #0]
 80038d2:	4a21      	ldr	r2, [pc, #132]	; (8003958 <LIS2DW12_ACC_GetSensitivity+0x180>)
 80038d4:	601a      	str	r2, [r3, #0]
          break;
 80038d6:	e006      	b.n	80038e6 <LIS2DW12_ACC_GetSensitivity+0x10e>

        default:
          *Sensitivity = -1.0f;
 80038d8:	683b      	ldr	r3, [r7, #0]
 80038da:	4a20      	ldr	r2, [pc, #128]	; (800395c <LIS2DW12_ACC_GetSensitivity+0x184>)
 80038dc:	601a      	str	r2, [r3, #0]
          ret = LIS2DW12_ERROR;
 80038de:	f04f 33ff 	mov.w	r3, #4294967295
 80038e2:	60fb      	str	r3, [r7, #12]
          break;
 80038e4:	bf00      	nop
      }
      break;
 80038e6:	e02c      	b.n	8003942 <LIS2DW12_ACC_GetSensitivity+0x16a>
    case LIS2DW12_CONT_LOW_PWR_LOW_NOISE_3:
    case LIS2DW12_CONT_LOW_PWR_LOW_NOISE_2:
    case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_4:
    case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_3:
    case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_2:
      switch (full_scale)
 80038e8:	7afb      	ldrb	r3, [r7, #11]
 80038ea:	2b03      	cmp	r3, #3
 80038ec:	d81a      	bhi.n	8003924 <LIS2DW12_ACC_GetSensitivity+0x14c>
 80038ee:	a201      	add	r2, pc, #4	; (adr r2, 80038f4 <LIS2DW12_ACC_GetSensitivity+0x11c>)
 80038f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80038f4:	08003905 	.word	0x08003905
 80038f8:	0800390d 	.word	0x0800390d
 80038fc:	08003915 	.word	0x08003915
 8003900:	0800391d 	.word	0x0800391d
      {
        case LIS2DW12_2g:
          *Sensitivity = LIS2DW12_ACC_SENSITIVITY_FOR_FS_2G_OTHER_MODES;
 8003904:	683b      	ldr	r3, [r7, #0]
 8003906:	4a16      	ldr	r2, [pc, #88]	; (8003960 <LIS2DW12_ACC_GetSensitivity+0x188>)
 8003908:	601a      	str	r2, [r3, #0]
          break;
 800390a:	e012      	b.n	8003932 <LIS2DW12_ACC_GetSensitivity+0x15a>

        case LIS2DW12_4g:
          *Sensitivity = LIS2DW12_ACC_SENSITIVITY_FOR_FS_4G_OTHER_MODES;
 800390c:	683b      	ldr	r3, [r7, #0]
 800390e:	4a15      	ldr	r2, [pc, #84]	; (8003964 <LIS2DW12_ACC_GetSensitivity+0x18c>)
 8003910:	601a      	str	r2, [r3, #0]
          break;
 8003912:	e00e      	b.n	8003932 <LIS2DW12_ACC_GetSensitivity+0x15a>

        case LIS2DW12_8g:
          *Sensitivity = LIS2DW12_ACC_SENSITIVITY_FOR_FS_8G_OTHER_MODES;
 8003914:	683b      	ldr	r3, [r7, #0]
 8003916:	4a0d      	ldr	r2, [pc, #52]	; (800394c <LIS2DW12_ACC_GetSensitivity+0x174>)
 8003918:	601a      	str	r2, [r3, #0]
          break;
 800391a:	e00a      	b.n	8003932 <LIS2DW12_ACC_GetSensitivity+0x15a>

        case LIS2DW12_16g:
          *Sensitivity = LIS2DW12_ACC_SENSITIVITY_FOR_FS_16G_OTHER_MODES;
 800391c:	683b      	ldr	r3, [r7, #0]
 800391e:	4a0c      	ldr	r2, [pc, #48]	; (8003950 <LIS2DW12_ACC_GetSensitivity+0x178>)
 8003920:	601a      	str	r2, [r3, #0]
          break;
 8003922:	e006      	b.n	8003932 <LIS2DW12_ACC_GetSensitivity+0x15a>

        default:
          *Sensitivity = -1.0f;
 8003924:	683b      	ldr	r3, [r7, #0]
 8003926:	4a0d      	ldr	r2, [pc, #52]	; (800395c <LIS2DW12_ACC_GetSensitivity+0x184>)
 8003928:	601a      	str	r2, [r3, #0]
          ret = LIS2DW12_ERROR;
 800392a:	f04f 33ff 	mov.w	r3, #4294967295
 800392e:	60fb      	str	r3, [r7, #12]
          break;
 8003930:	bf00      	nop
      }
      break;
 8003932:	e006      	b.n	8003942 <LIS2DW12_ACC_GetSensitivity+0x16a>

    default:
      *Sensitivity = -1.0f;
 8003934:	683b      	ldr	r3, [r7, #0]
 8003936:	4a09      	ldr	r2, [pc, #36]	; (800395c <LIS2DW12_ACC_GetSensitivity+0x184>)
 8003938:	601a      	str	r2, [r3, #0]
      ret = LIS2DW12_ERROR;
 800393a:	f04f 33ff 	mov.w	r3, #4294967295
 800393e:	60fb      	str	r3, [r7, #12]
      break;
 8003940:	bf00      	nop
  }

  return ret;
 8003942:	68fb      	ldr	r3, [r7, #12]
}
 8003944:	4618      	mov	r0, r3
 8003946:	3710      	adds	r7, #16
 8003948:	46bd      	mov	sp, r7
 800394a:	bd80      	pop	{r7, pc}
 800394c:	3f79db23 	.word	0x3f79db23
 8003950:	3ff9db23 	.word	0x3ff9db23
 8003954:	4079db23 	.word	0x4079db23
 8003958:	40f9db23 	.word	0x40f9db23
 800395c:	bf800000 	.word	0xbf800000
 8003960:	3e79db23 	.word	0x3e79db23
 8003964:	3ef9db23 	.word	0x3ef9db23

08003968 <LIS2DW12_ACC_GetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr pointer where the output data rate is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DW12_ACC_GetOutputDataRate(LIS2DW12_Object_t *pObj, float *Odr)
{
 8003968:	b580      	push	{r7, lr}
 800396a:	b084      	sub	sp, #16
 800396c:	af00      	add	r7, sp, #0
 800396e:	6078      	str	r0, [r7, #4]
 8003970:	6039      	str	r1, [r7, #0]
  int32_t ret = LIS2DW12_OK;
 8003972:	2300      	movs	r3, #0
 8003974:	60fb      	str	r3, [r7, #12]
  lis2dw12_odr_t odr_low_level;
  lis2dw12_mode_t mode;

  /* Get current output data rate. */
  if (lis2dw12_data_rate_get(&(pObj->Ctx), &odr_low_level) != LIS2DW12_OK)
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	3320      	adds	r3, #32
 800397a:	f107 020b 	add.w	r2, r7, #11
 800397e:	4611      	mov	r1, r2
 8003980:	4618      	mov	r0, r3
 8003982:	f000 ff0b 	bl	800479c <lis2dw12_data_rate_get>
 8003986:	4603      	mov	r3, r0
 8003988:	2b00      	cmp	r3, #0
 800398a:	d002      	beq.n	8003992 <LIS2DW12_ACC_GetOutputDataRate+0x2a>
  {
    return LIS2DW12_ERROR;
 800398c:	f04f 33ff 	mov.w	r3, #4294967295
 8003990:	e1d4      	b.n	8003d3c <LIS2DW12_ACC_GetOutputDataRate+0x3d4>
  }

  /* Read actual power mode selection from sensor. */
  if (lis2dw12_power_mode_get(&(pObj->Ctx), &mode) != LIS2DW12_OK)
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	3320      	adds	r3, #32
 8003996:	f107 020a 	add.w	r2, r7, #10
 800399a:	4611      	mov	r1, r2
 800399c:	4618      	mov	r0, r3
 800399e:	f000 fdfd 	bl	800459c <lis2dw12_power_mode_get>
 80039a2:	4603      	mov	r3, r0
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d002      	beq.n	80039ae <LIS2DW12_ACC_GetOutputDataRate+0x46>
  {
    return LIS2DW12_ERROR;
 80039a8:	f04f 33ff 	mov.w	r3, #4294967295
 80039ac:	e1c6      	b.n	8003d3c <LIS2DW12_ACC_GetOutputDataRate+0x3d4>
  }

  switch (odr_low_level)
 80039ae:	7afb      	ldrb	r3, [r7, #11]
 80039b0:	2b32      	cmp	r3, #50	; 0x32
 80039b2:	f200 81bb 	bhi.w	8003d2c <LIS2DW12_ACC_GetOutputDataRate+0x3c4>
 80039b6:	a201      	add	r2, pc, #4	; (adr r2, 80039bc <LIS2DW12_ACC_GetOutputDataRate+0x54>)
 80039b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80039bc:	08003a89 	.word	0x08003a89
 80039c0:	08003a93 	.word	0x08003a93
 80039c4:	08003b31 	.word	0x08003b31
 80039c8:	08003b39 	.word	0x08003b39
 80039cc:	08003b41 	.word	0x08003b41
 80039d0:	08003b49 	.word	0x08003b49
 80039d4:	08003b51 	.word	0x08003b51
 80039d8:	08003b59 	.word	0x08003b59
 80039dc:	08003bf5 	.word	0x08003bf5
 80039e0:	08003c91 	.word	0x08003c91
 80039e4:	08003d2d 	.word	0x08003d2d
 80039e8:	08003d2d 	.word	0x08003d2d
 80039ec:	08003d2d 	.word	0x08003d2d
 80039f0:	08003d2d 	.word	0x08003d2d
 80039f4:	08003d2d 	.word	0x08003d2d
 80039f8:	08003d2d 	.word	0x08003d2d
 80039fc:	08003d2d 	.word	0x08003d2d
 8003a00:	08003d2d 	.word	0x08003d2d
 8003a04:	08003a89 	.word	0x08003a89
 8003a08:	08003d2d 	.word	0x08003d2d
 8003a0c:	08003d2d 	.word	0x08003d2d
 8003a10:	08003d2d 	.word	0x08003d2d
 8003a14:	08003d2d 	.word	0x08003d2d
 8003a18:	08003d2d 	.word	0x08003d2d
 8003a1c:	08003d2d 	.word	0x08003d2d
 8003a20:	08003d2d 	.word	0x08003d2d
 8003a24:	08003d2d 	.word	0x08003d2d
 8003a28:	08003d2d 	.word	0x08003d2d
 8003a2c:	08003d2d 	.word	0x08003d2d
 8003a30:	08003d2d 	.word	0x08003d2d
 8003a34:	08003d2d 	.word	0x08003d2d
 8003a38:	08003d2d 	.word	0x08003d2d
 8003a3c:	08003d2d 	.word	0x08003d2d
 8003a40:	08003d2d 	.word	0x08003d2d
 8003a44:	08003d2d 	.word	0x08003d2d
 8003a48:	08003d2d 	.word	0x08003d2d
 8003a4c:	08003d2d 	.word	0x08003d2d
 8003a50:	08003d2d 	.word	0x08003d2d
 8003a54:	08003d2d 	.word	0x08003d2d
 8003a58:	08003d2d 	.word	0x08003d2d
 8003a5c:	08003d2d 	.word	0x08003d2d
 8003a60:	08003d2d 	.word	0x08003d2d
 8003a64:	08003d2d 	.word	0x08003d2d
 8003a68:	08003d2d 	.word	0x08003d2d
 8003a6c:	08003d2d 	.word	0x08003d2d
 8003a70:	08003d2d 	.word	0x08003d2d
 8003a74:	08003d2d 	.word	0x08003d2d
 8003a78:	08003d2d 	.word	0x08003d2d
 8003a7c:	08003d2d 	.word	0x08003d2d
 8003a80:	08003d2d 	.word	0x08003d2d
 8003a84:	08003a89 	.word	0x08003a89
  {
    case LIS2DW12_XL_ODR_OFF:
    case LIS2DW12_XL_SET_SW_TRIG:
    case LIS2DW12_XL_SET_PIN_TRIG:
      *Odr = 0.0f;
 8003a88:	683b      	ldr	r3, [r7, #0]
 8003a8a:	f04f 0200 	mov.w	r2, #0
 8003a8e:	601a      	str	r2, [r3, #0]
      break;
 8003a90:	e153      	b.n	8003d3a <LIS2DW12_ACC_GetOutputDataRate+0x3d2>

    case LIS2DW12_XL_ODR_1Hz6_LP_ONLY:
      switch (mode)
 8003a92:	7abb      	ldrb	r3, [r7, #10]
 8003a94:	2b1b      	cmp	r3, #27
 8003a96:	d843      	bhi.n	8003b20 <LIS2DW12_ACC_GetOutputDataRate+0x1b8>
 8003a98:	a201      	add	r2, pc, #4	; (adr r2, 8003aa0 <LIS2DW12_ACC_GetOutputDataRate+0x138>)
 8003a9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a9e:	bf00      	nop
 8003aa0:	08003b19 	.word	0x08003b19
 8003aa4:	08003b19 	.word	0x08003b19
 8003aa8:	08003b19 	.word	0x08003b19
 8003aac:	08003b19 	.word	0x08003b19
 8003ab0:	08003b11 	.word	0x08003b11
 8003ab4:	08003b21 	.word	0x08003b21
 8003ab8:	08003b21 	.word	0x08003b21
 8003abc:	08003b21 	.word	0x08003b21
 8003ac0:	08003b19 	.word	0x08003b19
 8003ac4:	08003b19 	.word	0x08003b19
 8003ac8:	08003b19 	.word	0x08003b19
 8003acc:	08003b19 	.word	0x08003b19
 8003ad0:	08003b21 	.word	0x08003b21
 8003ad4:	08003b21 	.word	0x08003b21
 8003ad8:	08003b21 	.word	0x08003b21
 8003adc:	08003b21 	.word	0x08003b21
 8003ae0:	08003b19 	.word	0x08003b19
 8003ae4:	08003b19 	.word	0x08003b19
 8003ae8:	08003b19 	.word	0x08003b19
 8003aec:	08003b19 	.word	0x08003b19
 8003af0:	08003b11 	.word	0x08003b11
 8003af4:	08003b21 	.word	0x08003b21
 8003af8:	08003b21 	.word	0x08003b21
 8003afc:	08003b21 	.word	0x08003b21
 8003b00:	08003b19 	.word	0x08003b19
 8003b04:	08003b19 	.word	0x08003b19
 8003b08:	08003b19 	.word	0x08003b19
 8003b0c:	08003b19 	.word	0x08003b19
      {
        case LIS2DW12_HIGH_PERFORMANCE:
        case LIS2DW12_HIGH_PERFORMANCE_LOW_NOISE:
          *Odr = 12.5f;
 8003b10:	683b      	ldr	r3, [r7, #0]
 8003b12:	4a8c      	ldr	r2, [pc, #560]	; (8003d44 <LIS2DW12_ACC_GetOutputDataRate+0x3dc>)
 8003b14:	601a      	str	r2, [r3, #0]
          break;
 8003b16:	e00a      	b.n	8003b2e <LIS2DW12_ACC_GetOutputDataRate+0x1c6>
        case LIS2DW12_CONT_LOW_PWR_LOW_NOISE_12bit:
        case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_4:
        case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_3:
        case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_2:
        case LIS2DW12_SINGLE_LOW_LOW_NOISE_PWR_12bit:
          *Odr = 1.6f;
 8003b18:	683b      	ldr	r3, [r7, #0]
 8003b1a:	4a8b      	ldr	r2, [pc, #556]	; (8003d48 <LIS2DW12_ACC_GetOutputDataRate+0x3e0>)
 8003b1c:	601a      	str	r2, [r3, #0]
          break;
 8003b1e:	e006      	b.n	8003b2e <LIS2DW12_ACC_GetOutputDataRate+0x1c6>

        default:
          *Odr = -1.0f;
 8003b20:	683b      	ldr	r3, [r7, #0]
 8003b22:	4a8a      	ldr	r2, [pc, #552]	; (8003d4c <LIS2DW12_ACC_GetOutputDataRate+0x3e4>)
 8003b24:	601a      	str	r2, [r3, #0]
          ret = LIS2DW12_ERROR;
 8003b26:	f04f 33ff 	mov.w	r3, #4294967295
 8003b2a:	60fb      	str	r3, [r7, #12]
          break;
 8003b2c:	bf00      	nop
      }
      break;
 8003b2e:	e104      	b.n	8003d3a <LIS2DW12_ACC_GetOutputDataRate+0x3d2>

    case LIS2DW12_XL_ODR_12Hz5:
      *Odr = 12.5f;
 8003b30:	683b      	ldr	r3, [r7, #0]
 8003b32:	4a84      	ldr	r2, [pc, #528]	; (8003d44 <LIS2DW12_ACC_GetOutputDataRate+0x3dc>)
 8003b34:	601a      	str	r2, [r3, #0]
      break;
 8003b36:	e100      	b.n	8003d3a <LIS2DW12_ACC_GetOutputDataRate+0x3d2>

    case LIS2DW12_XL_ODR_25Hz:
      *Odr = 25.0f;
 8003b38:	683b      	ldr	r3, [r7, #0]
 8003b3a:	4a85      	ldr	r2, [pc, #532]	; (8003d50 <LIS2DW12_ACC_GetOutputDataRate+0x3e8>)
 8003b3c:	601a      	str	r2, [r3, #0]
      break;
 8003b3e:	e0fc      	b.n	8003d3a <LIS2DW12_ACC_GetOutputDataRate+0x3d2>

    case LIS2DW12_XL_ODR_50Hz:
      *Odr = 50.0f;
 8003b40:	683b      	ldr	r3, [r7, #0]
 8003b42:	4a84      	ldr	r2, [pc, #528]	; (8003d54 <LIS2DW12_ACC_GetOutputDataRate+0x3ec>)
 8003b44:	601a      	str	r2, [r3, #0]
      break;
 8003b46:	e0f8      	b.n	8003d3a <LIS2DW12_ACC_GetOutputDataRate+0x3d2>

    case LIS2DW12_XL_ODR_100Hz:
      *Odr = 100.0f;
 8003b48:	683b      	ldr	r3, [r7, #0]
 8003b4a:	4a83      	ldr	r2, [pc, #524]	; (8003d58 <LIS2DW12_ACC_GetOutputDataRate+0x3f0>)
 8003b4c:	601a      	str	r2, [r3, #0]
      break;
 8003b4e:	e0f4      	b.n	8003d3a <LIS2DW12_ACC_GetOutputDataRate+0x3d2>

    case LIS2DW12_XL_ODR_200Hz:
      *Odr = 200.0f;
 8003b50:	683b      	ldr	r3, [r7, #0]
 8003b52:	4a82      	ldr	r2, [pc, #520]	; (8003d5c <LIS2DW12_ACC_GetOutputDataRate+0x3f4>)
 8003b54:	601a      	str	r2, [r3, #0]
      break;
 8003b56:	e0f0      	b.n	8003d3a <LIS2DW12_ACC_GetOutputDataRate+0x3d2>

    case LIS2DW12_XL_ODR_400Hz:
      switch (mode)
 8003b58:	7abb      	ldrb	r3, [r7, #10]
 8003b5a:	2b1b      	cmp	r3, #27
 8003b5c:	d842      	bhi.n	8003be4 <LIS2DW12_ACC_GetOutputDataRate+0x27c>
 8003b5e:	a201      	add	r2, pc, #4	; (adr r2, 8003b64 <LIS2DW12_ACC_GetOutputDataRate+0x1fc>)
 8003b60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b64:	08003bdd 	.word	0x08003bdd
 8003b68:	08003bdd 	.word	0x08003bdd
 8003b6c:	08003bdd 	.word	0x08003bdd
 8003b70:	08003bdd 	.word	0x08003bdd
 8003b74:	08003bd5 	.word	0x08003bd5
 8003b78:	08003be5 	.word	0x08003be5
 8003b7c:	08003be5 	.word	0x08003be5
 8003b80:	08003be5 	.word	0x08003be5
 8003b84:	08003bdd 	.word	0x08003bdd
 8003b88:	08003bdd 	.word	0x08003bdd
 8003b8c:	08003bdd 	.word	0x08003bdd
 8003b90:	08003bdd 	.word	0x08003bdd
 8003b94:	08003be5 	.word	0x08003be5
 8003b98:	08003be5 	.word	0x08003be5
 8003b9c:	08003be5 	.word	0x08003be5
 8003ba0:	08003be5 	.word	0x08003be5
 8003ba4:	08003bdd 	.word	0x08003bdd
 8003ba8:	08003bdd 	.word	0x08003bdd
 8003bac:	08003bdd 	.word	0x08003bdd
 8003bb0:	08003bdd 	.word	0x08003bdd
 8003bb4:	08003bd5 	.word	0x08003bd5
 8003bb8:	08003be5 	.word	0x08003be5
 8003bbc:	08003be5 	.word	0x08003be5
 8003bc0:	08003be5 	.word	0x08003be5
 8003bc4:	08003bdd 	.word	0x08003bdd
 8003bc8:	08003bdd 	.word	0x08003bdd
 8003bcc:	08003bdd 	.word	0x08003bdd
 8003bd0:	08003bdd 	.word	0x08003bdd
      {
        case LIS2DW12_HIGH_PERFORMANCE:
        case LIS2DW12_HIGH_PERFORMANCE_LOW_NOISE:
          *Odr = 400.0f;
 8003bd4:	683b      	ldr	r3, [r7, #0]
 8003bd6:	4a62      	ldr	r2, [pc, #392]	; (8003d60 <LIS2DW12_ACC_GetOutputDataRate+0x3f8>)
 8003bd8:	601a      	str	r2, [r3, #0]
          break;
 8003bda:	e00a      	b.n	8003bf2 <LIS2DW12_ACC_GetOutputDataRate+0x28a>
        case LIS2DW12_CONT_LOW_PWR_LOW_NOISE_12bit:
        case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_4:
        case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_3:
        case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_2:
        case LIS2DW12_SINGLE_LOW_LOW_NOISE_PWR_12bit:
          *Odr = 200.0f;
 8003bdc:	683b      	ldr	r3, [r7, #0]
 8003bde:	4a5f      	ldr	r2, [pc, #380]	; (8003d5c <LIS2DW12_ACC_GetOutputDataRate+0x3f4>)
 8003be0:	601a      	str	r2, [r3, #0]
          break;
 8003be2:	e006      	b.n	8003bf2 <LIS2DW12_ACC_GetOutputDataRate+0x28a>

        default:
          *Odr = -1.0f;
 8003be4:	683b      	ldr	r3, [r7, #0]
 8003be6:	4a59      	ldr	r2, [pc, #356]	; (8003d4c <LIS2DW12_ACC_GetOutputDataRate+0x3e4>)
 8003be8:	601a      	str	r2, [r3, #0]
          ret = LIS2DW12_ERROR;
 8003bea:	f04f 33ff 	mov.w	r3, #4294967295
 8003bee:	60fb      	str	r3, [r7, #12]
          break;
 8003bf0:	bf00      	nop
      }
      break;
 8003bf2:	e0a2      	b.n	8003d3a <LIS2DW12_ACC_GetOutputDataRate+0x3d2>

    case LIS2DW12_XL_ODR_800Hz:
      switch (mode)
 8003bf4:	7abb      	ldrb	r3, [r7, #10]
 8003bf6:	2b1b      	cmp	r3, #27
 8003bf8:	d842      	bhi.n	8003c80 <LIS2DW12_ACC_GetOutputDataRate+0x318>
 8003bfa:	a201      	add	r2, pc, #4	; (adr r2, 8003c00 <LIS2DW12_ACC_GetOutputDataRate+0x298>)
 8003bfc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c00:	08003c79 	.word	0x08003c79
 8003c04:	08003c79 	.word	0x08003c79
 8003c08:	08003c79 	.word	0x08003c79
 8003c0c:	08003c79 	.word	0x08003c79
 8003c10:	08003c71 	.word	0x08003c71
 8003c14:	08003c81 	.word	0x08003c81
 8003c18:	08003c81 	.word	0x08003c81
 8003c1c:	08003c81 	.word	0x08003c81
 8003c20:	08003c79 	.word	0x08003c79
 8003c24:	08003c79 	.word	0x08003c79
 8003c28:	08003c79 	.word	0x08003c79
 8003c2c:	08003c79 	.word	0x08003c79
 8003c30:	08003c81 	.word	0x08003c81
 8003c34:	08003c81 	.word	0x08003c81
 8003c38:	08003c81 	.word	0x08003c81
 8003c3c:	08003c81 	.word	0x08003c81
 8003c40:	08003c79 	.word	0x08003c79
 8003c44:	08003c79 	.word	0x08003c79
 8003c48:	08003c79 	.word	0x08003c79
 8003c4c:	08003c79 	.word	0x08003c79
 8003c50:	08003c71 	.word	0x08003c71
 8003c54:	08003c81 	.word	0x08003c81
 8003c58:	08003c81 	.word	0x08003c81
 8003c5c:	08003c81 	.word	0x08003c81
 8003c60:	08003c79 	.word	0x08003c79
 8003c64:	08003c79 	.word	0x08003c79
 8003c68:	08003c79 	.word	0x08003c79
 8003c6c:	08003c79 	.word	0x08003c79
      {
        case LIS2DW12_HIGH_PERFORMANCE:
        case LIS2DW12_HIGH_PERFORMANCE_LOW_NOISE:
          *Odr = 800.0f;
 8003c70:	683b      	ldr	r3, [r7, #0]
 8003c72:	4a3c      	ldr	r2, [pc, #240]	; (8003d64 <LIS2DW12_ACC_GetOutputDataRate+0x3fc>)
 8003c74:	601a      	str	r2, [r3, #0]
          break;
 8003c76:	e00a      	b.n	8003c8e <LIS2DW12_ACC_GetOutputDataRate+0x326>
        case LIS2DW12_CONT_LOW_PWR_LOW_NOISE_12bit:
        case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_4:
        case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_3:
        case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_2:
        case LIS2DW12_SINGLE_LOW_LOW_NOISE_PWR_12bit:
          *Odr = 200.0f;
 8003c78:	683b      	ldr	r3, [r7, #0]
 8003c7a:	4a38      	ldr	r2, [pc, #224]	; (8003d5c <LIS2DW12_ACC_GetOutputDataRate+0x3f4>)
 8003c7c:	601a      	str	r2, [r3, #0]
          break;
 8003c7e:	e006      	b.n	8003c8e <LIS2DW12_ACC_GetOutputDataRate+0x326>

        default:
          *Odr = -1.0f;
 8003c80:	683b      	ldr	r3, [r7, #0]
 8003c82:	4a32      	ldr	r2, [pc, #200]	; (8003d4c <LIS2DW12_ACC_GetOutputDataRate+0x3e4>)
 8003c84:	601a      	str	r2, [r3, #0]
          ret = LIS2DW12_ERROR;
 8003c86:	f04f 33ff 	mov.w	r3, #4294967295
 8003c8a:	60fb      	str	r3, [r7, #12]
          break;
 8003c8c:	bf00      	nop
      }
      break;
 8003c8e:	e054      	b.n	8003d3a <LIS2DW12_ACC_GetOutputDataRate+0x3d2>

    case LIS2DW12_XL_ODR_1k6Hz:
      switch (mode)
 8003c90:	7abb      	ldrb	r3, [r7, #10]
 8003c92:	2b1b      	cmp	r3, #27
 8003c94:	d842      	bhi.n	8003d1c <LIS2DW12_ACC_GetOutputDataRate+0x3b4>
 8003c96:	a201      	add	r2, pc, #4	; (adr r2, 8003c9c <LIS2DW12_ACC_GetOutputDataRate+0x334>)
 8003c98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c9c:	08003d15 	.word	0x08003d15
 8003ca0:	08003d15 	.word	0x08003d15
 8003ca4:	08003d15 	.word	0x08003d15
 8003ca8:	08003d15 	.word	0x08003d15
 8003cac:	08003d0d 	.word	0x08003d0d
 8003cb0:	08003d1d 	.word	0x08003d1d
 8003cb4:	08003d1d 	.word	0x08003d1d
 8003cb8:	08003d1d 	.word	0x08003d1d
 8003cbc:	08003d15 	.word	0x08003d15
 8003cc0:	08003d15 	.word	0x08003d15
 8003cc4:	08003d15 	.word	0x08003d15
 8003cc8:	08003d15 	.word	0x08003d15
 8003ccc:	08003d1d 	.word	0x08003d1d
 8003cd0:	08003d1d 	.word	0x08003d1d
 8003cd4:	08003d1d 	.word	0x08003d1d
 8003cd8:	08003d1d 	.word	0x08003d1d
 8003cdc:	08003d15 	.word	0x08003d15
 8003ce0:	08003d15 	.word	0x08003d15
 8003ce4:	08003d15 	.word	0x08003d15
 8003ce8:	08003d15 	.word	0x08003d15
 8003cec:	08003d0d 	.word	0x08003d0d
 8003cf0:	08003d1d 	.word	0x08003d1d
 8003cf4:	08003d1d 	.word	0x08003d1d
 8003cf8:	08003d1d 	.word	0x08003d1d
 8003cfc:	08003d15 	.word	0x08003d15
 8003d00:	08003d15 	.word	0x08003d15
 8003d04:	08003d15 	.word	0x08003d15
 8003d08:	08003d15 	.word	0x08003d15
      {
        case LIS2DW12_HIGH_PERFORMANCE:
        case LIS2DW12_HIGH_PERFORMANCE_LOW_NOISE:
          *Odr = 1600.0f;
 8003d0c:	683b      	ldr	r3, [r7, #0]
 8003d0e:	4a16      	ldr	r2, [pc, #88]	; (8003d68 <LIS2DW12_ACC_GetOutputDataRate+0x400>)
 8003d10:	601a      	str	r2, [r3, #0]
          break;
 8003d12:	e00a      	b.n	8003d2a <LIS2DW12_ACC_GetOutputDataRate+0x3c2>
        case LIS2DW12_CONT_LOW_PWR_LOW_NOISE_12bit:
        case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_4:
        case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_3:
        case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_2:
        case LIS2DW12_SINGLE_LOW_LOW_NOISE_PWR_12bit:
          *Odr = 200.0f;
 8003d14:	683b      	ldr	r3, [r7, #0]
 8003d16:	4a11      	ldr	r2, [pc, #68]	; (8003d5c <LIS2DW12_ACC_GetOutputDataRate+0x3f4>)
 8003d18:	601a      	str	r2, [r3, #0]
          break;
 8003d1a:	e006      	b.n	8003d2a <LIS2DW12_ACC_GetOutputDataRate+0x3c2>

        default:
          *Odr = -1.0f;
 8003d1c:	683b      	ldr	r3, [r7, #0]
 8003d1e:	4a0b      	ldr	r2, [pc, #44]	; (8003d4c <LIS2DW12_ACC_GetOutputDataRate+0x3e4>)
 8003d20:	601a      	str	r2, [r3, #0]
          ret = LIS2DW12_ERROR;
 8003d22:	f04f 33ff 	mov.w	r3, #4294967295
 8003d26:	60fb      	str	r3, [r7, #12]
          break;
 8003d28:	bf00      	nop
      }
      break;
 8003d2a:	e006      	b.n	8003d3a <LIS2DW12_ACC_GetOutputDataRate+0x3d2>

    default:
      *Odr = -1.0f;
 8003d2c:	683b      	ldr	r3, [r7, #0]
 8003d2e:	4a07      	ldr	r2, [pc, #28]	; (8003d4c <LIS2DW12_ACC_GetOutputDataRate+0x3e4>)
 8003d30:	601a      	str	r2, [r3, #0]
      ret = LIS2DW12_ERROR;
 8003d32:	f04f 33ff 	mov.w	r3, #4294967295
 8003d36:	60fb      	str	r3, [r7, #12]
      break;
 8003d38:	bf00      	nop
  }

  return ret;
 8003d3a:	68fb      	ldr	r3, [r7, #12]
}
 8003d3c:	4618      	mov	r0, r3
 8003d3e:	3710      	adds	r7, #16
 8003d40:	46bd      	mov	sp, r7
 8003d42:	bd80      	pop	{r7, pc}
 8003d44:	41480000 	.word	0x41480000
 8003d48:	3fcccccd 	.word	0x3fcccccd
 8003d4c:	bf800000 	.word	0xbf800000
 8003d50:	41c80000 	.word	0x41c80000
 8003d54:	42480000 	.word	0x42480000
 8003d58:	42c80000 	.word	0x42c80000
 8003d5c:	43480000 	.word	0x43480000
 8003d60:	43c80000 	.word	0x43c80000
 8003d64:	44480000 	.word	0x44480000
 8003d68:	44c80000 	.word	0x44c80000

08003d6c <LIS2DW12_ACC_SetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DW12_ACC_SetOutputDataRate(LIS2DW12_Object_t *pObj, float Odr)
{
 8003d6c:	b580      	push	{r7, lr}
 8003d6e:	b082      	sub	sp, #8
 8003d70:	af00      	add	r7, sp, #0
 8003d72:	6078      	str	r0, [r7, #4]
 8003d74:	ed87 0a00 	vstr	s0, [r7]
  /* By default we use High Performance mode and Low Noise disabled */
  return LIS2DW12_ACC_SetOutputDataRate_With_Mode(pObj, Odr, LIS2DW12_HIGH_PERFORMANCE_MODE, LIS2DW12_LOW_NOISE_DISABLE);
 8003d78:	2200      	movs	r2, #0
 8003d7a:	2100      	movs	r1, #0
 8003d7c:	ed97 0a00 	vldr	s0, [r7]
 8003d80:	6878      	ldr	r0, [r7, #4]
 8003d82:	f000 f805 	bl	8003d90 <LIS2DW12_ACC_SetOutputDataRate_With_Mode>
 8003d86:	4603      	mov	r3, r0
}
 8003d88:	4618      	mov	r0, r3
 8003d8a:	3708      	adds	r7, #8
 8003d8c:	46bd      	mov	sp, r7
 8003d8e:	bd80      	pop	{r7, pc}

08003d90 <LIS2DW12_ACC_SetOutputDataRate_With_Mode>:
  * @param  Noise the low noise option
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DW12_ACC_SetOutputDataRate_With_Mode(LIS2DW12_Object_t *pObj, float Odr, LIS2DW12_Operating_Mode_t Mode,
                                                 LIS2DW12_Low_Noise_t Noise)
{
 8003d90:	b580      	push	{r7, lr}
 8003d92:	b084      	sub	sp, #16
 8003d94:	af00      	add	r7, sp, #0
 8003d96:	60f8      	str	r0, [r7, #12]
 8003d98:	ed87 0a02 	vstr	s0, [r7, #8]
 8003d9c:	460b      	mov	r3, r1
 8003d9e:	71fb      	strb	r3, [r7, #7]
 8003da0:	4613      	mov	r3, r2
 8003da2:	71bb      	strb	r3, [r7, #6]
  /* Check if the component is enabled */
  if (pObj->acc_is_enabled == 1U)
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8003daa:	2b01      	cmp	r3, #1
 8003dac:	d109      	bne.n	8003dc2 <LIS2DW12_ACC_SetOutputDataRate_With_Mode+0x32>
  {
    return LIS2DW12_ACC_SetOutputDataRate_When_Enabled(pObj, Odr, Mode, Noise);
 8003dae:	79ba      	ldrb	r2, [r7, #6]
 8003db0:	79fb      	ldrb	r3, [r7, #7]
 8003db2:	4619      	mov	r1, r3
 8003db4:	ed97 0a02 	vldr	s0, [r7, #8]
 8003db8:	68f8      	ldr	r0, [r7, #12]
 8003dba:	f000 f98d 	bl	80040d8 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled>
 8003dbe:	4603      	mov	r3, r0
 8003dc0:	e008      	b.n	8003dd4 <LIS2DW12_ACC_SetOutputDataRate_With_Mode+0x44>
  }
  else
  {
    return LIS2DW12_ACC_SetOutputDataRate_When_Disabled(pObj, Odr, Mode, Noise);
 8003dc2:	79ba      	ldrb	r2, [r7, #6]
 8003dc4:	79fb      	ldrb	r3, [r7, #7]
 8003dc6:	4619      	mov	r1, r3
 8003dc8:	ed97 0a02 	vldr	s0, [r7, #8]
 8003dcc:	68f8      	ldr	r0, [r7, #12]
 8003dce:	f000 fa9f 	bl	8004310 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled>
 8003dd2:	4603      	mov	r3, r0
  }
}
 8003dd4:	4618      	mov	r0, r3
 8003dd6:	3710      	adds	r7, #16
 8003dd8:	46bd      	mov	sp, r7
 8003dda:	bd80      	pop	{r7, pc}

08003ddc <LIS2DW12_ACC_GetFullScale>:
  * @param  pObj the device pObj
  * @param  FullScale pointer where the full scale is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DW12_ACC_GetFullScale(LIS2DW12_Object_t *pObj, int32_t *FullScale)
{
 8003ddc:	b580      	push	{r7, lr}
 8003dde:	b084      	sub	sp, #16
 8003de0:	af00      	add	r7, sp, #0
 8003de2:	6078      	str	r0, [r7, #4]
 8003de4:	6039      	str	r1, [r7, #0]
  int32_t ret = LIS2DW12_OK;
 8003de6:	2300      	movs	r3, #0
 8003de8:	60fb      	str	r3, [r7, #12]
  lis2dw12_fs_t fs_low_level;

  /* Read actual full scale selection from sensor. */
  if (lis2dw12_full_scale_get(&(pObj->Ctx), &fs_low_level) != LIS2DW12_OK)
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	3320      	adds	r3, #32
 8003dee:	f107 020b 	add.w	r2, r7, #11
 8003df2:	4611      	mov	r1, r2
 8003df4:	4618      	mov	r0, r3
 8003df6:	f000 fde7 	bl	80049c8 <lis2dw12_full_scale_get>
 8003dfa:	4603      	mov	r3, r0
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d002      	beq.n	8003e06 <LIS2DW12_ACC_GetFullScale+0x2a>
  {
    return LIS2DW12_ERROR;
 8003e00:	f04f 33ff 	mov.w	r3, #4294967295
 8003e04:	e027      	b.n	8003e56 <LIS2DW12_ACC_GetFullScale+0x7a>
  }

  switch (fs_low_level)
 8003e06:	7afb      	ldrb	r3, [r7, #11]
 8003e08:	2b03      	cmp	r3, #3
 8003e0a:	d81b      	bhi.n	8003e44 <LIS2DW12_ACC_GetFullScale+0x68>
 8003e0c:	a201      	add	r2, pc, #4	; (adr r2, 8003e14 <LIS2DW12_ACC_GetFullScale+0x38>)
 8003e0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e12:	bf00      	nop
 8003e14:	08003e25 	.word	0x08003e25
 8003e18:	08003e2d 	.word	0x08003e2d
 8003e1c:	08003e35 	.word	0x08003e35
 8003e20:	08003e3d 	.word	0x08003e3d
  {
    case LIS2DW12_2g:
      *FullScale =  2;
 8003e24:	683b      	ldr	r3, [r7, #0]
 8003e26:	2202      	movs	r2, #2
 8003e28:	601a      	str	r2, [r3, #0]
      break;
 8003e2a:	e013      	b.n	8003e54 <LIS2DW12_ACC_GetFullScale+0x78>

    case LIS2DW12_4g:
      *FullScale =  4;
 8003e2c:	683b      	ldr	r3, [r7, #0]
 8003e2e:	2204      	movs	r2, #4
 8003e30:	601a      	str	r2, [r3, #0]
      break;
 8003e32:	e00f      	b.n	8003e54 <LIS2DW12_ACC_GetFullScale+0x78>

    case LIS2DW12_8g:
      *FullScale =  8;
 8003e34:	683b      	ldr	r3, [r7, #0]
 8003e36:	2208      	movs	r2, #8
 8003e38:	601a      	str	r2, [r3, #0]
      break;
 8003e3a:	e00b      	b.n	8003e54 <LIS2DW12_ACC_GetFullScale+0x78>

    case LIS2DW12_16g:
      *FullScale = 16;
 8003e3c:	683b      	ldr	r3, [r7, #0]
 8003e3e:	2210      	movs	r2, #16
 8003e40:	601a      	str	r2, [r3, #0]
      break;
 8003e42:	e007      	b.n	8003e54 <LIS2DW12_ACC_GetFullScale+0x78>

    default:
      *FullScale = -1;
 8003e44:	683b      	ldr	r3, [r7, #0]
 8003e46:	f04f 32ff 	mov.w	r2, #4294967295
 8003e4a:	601a      	str	r2, [r3, #0]
      ret = LIS2DW12_ERROR;
 8003e4c:	f04f 33ff 	mov.w	r3, #4294967295
 8003e50:	60fb      	str	r3, [r7, #12]
      break;
 8003e52:	bf00      	nop
  }

  return ret;
 8003e54:	68fb      	ldr	r3, [r7, #12]
}
 8003e56:	4618      	mov	r0, r3
 8003e58:	3710      	adds	r7, #16
 8003e5a:	46bd      	mov	sp, r7
 8003e5c:	bd80      	pop	{r7, pc}
 8003e5e:	bf00      	nop

08003e60 <LIS2DW12_ACC_SetFullScale>:
  * @param  pObj the device pObj
  * @param  FullScale the functional full scale to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DW12_ACC_SetFullScale(LIS2DW12_Object_t *pObj, int32_t FullScale)
{
 8003e60:	b580      	push	{r7, lr}
 8003e62:	b084      	sub	sp, #16
 8003e64:	af00      	add	r7, sp, #0
 8003e66:	6078      	str	r0, [r7, #4]
 8003e68:	6039      	str	r1, [r7, #0]
  lis2dw12_fs_t new_fs;

  /* Seems like MISRA C-2012 rule 14.3a violation but only from single file statical analysis point of view because
     the parameter passed to the function is not known at the moment of analysis */
  new_fs = (FullScale <= 2) ? LIS2DW12_2g
           : (FullScale <= 4) ? LIS2DW12_4g
 8003e6a:	683b      	ldr	r3, [r7, #0]
 8003e6c:	2b02      	cmp	r3, #2
 8003e6e:	dd0b      	ble.n	8003e88 <LIS2DW12_ACC_SetFullScale+0x28>
 8003e70:	683b      	ldr	r3, [r7, #0]
 8003e72:	2b04      	cmp	r3, #4
 8003e74:	dd06      	ble.n	8003e84 <LIS2DW12_ACC_SetFullScale+0x24>
 8003e76:	683b      	ldr	r3, [r7, #0]
 8003e78:	2b08      	cmp	r3, #8
 8003e7a:	dc01      	bgt.n	8003e80 <LIS2DW12_ACC_SetFullScale+0x20>
 8003e7c:	2302      	movs	r3, #2
 8003e7e:	e004      	b.n	8003e8a <LIS2DW12_ACC_SetFullScale+0x2a>
 8003e80:	2303      	movs	r3, #3
 8003e82:	e002      	b.n	8003e8a <LIS2DW12_ACC_SetFullScale+0x2a>
 8003e84:	2301      	movs	r3, #1
 8003e86:	e000      	b.n	8003e8a <LIS2DW12_ACC_SetFullScale+0x2a>
 8003e88:	2300      	movs	r3, #0
  new_fs = (FullScale <= 2) ? LIS2DW12_2g
 8003e8a:	73fb      	strb	r3, [r7, #15]
           : (FullScale <= 8) ? LIS2DW12_8g
           :                    LIS2DW12_16g;

  if (lis2dw12_full_scale_set(&(pObj->Ctx), new_fs) != LIS2DW12_OK)
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	3320      	adds	r3, #32
 8003e90:	7bfa      	ldrb	r2, [r7, #15]
 8003e92:	4611      	mov	r1, r2
 8003e94:	4618      	mov	r0, r3
 8003e96:	f000 fd71 	bl	800497c <lis2dw12_full_scale_set>
 8003e9a:	4603      	mov	r3, r0
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d002      	beq.n	8003ea6 <LIS2DW12_ACC_SetFullScale+0x46>
  {
    return LIS2DW12_ERROR;
 8003ea0:	f04f 33ff 	mov.w	r3, #4294967295
 8003ea4:	e000      	b.n	8003ea8 <LIS2DW12_ACC_SetFullScale+0x48>
  }

  return LIS2DW12_OK;
 8003ea6:	2300      	movs	r3, #0
}
 8003ea8:	4618      	mov	r0, r3
 8003eaa:	3710      	adds	r7, #16
 8003eac:	46bd      	mov	sp, r7
 8003eae:	bd80      	pop	{r7, pc}

08003eb0 <LIS2DW12_ACC_GetAxesRaw>:
  * @param  pObj the device pObj
  * @param  Value pointer where the raw values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DW12_ACC_GetAxesRaw(LIS2DW12_Object_t *pObj, LIS2DW12_AxesRaw_t *Value)
{
 8003eb0:	b580      	push	{r7, lr}
 8003eb2:	b086      	sub	sp, #24
 8003eb4:	af00      	add	r7, sp, #0
 8003eb6:	6078      	str	r0, [r7, #4]
 8003eb8:	6039      	str	r1, [r7, #0]
  lis2dw12_axis3bit16_t data_raw;
  lis2dw12_mode_t mode;
  int32_t ret = LIS2DW12_OK;
 8003eba:	2300      	movs	r3, #0
 8003ebc:	617b      	str	r3, [r7, #20]

  /* Read actual power mode selection from sensor. */
  if (lis2dw12_power_mode_get(&(pObj->Ctx), &mode) != LIS2DW12_OK)
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	3320      	adds	r3, #32
 8003ec2:	f107 020b 	add.w	r2, r7, #11
 8003ec6:	4611      	mov	r1, r2
 8003ec8:	4618      	mov	r0, r3
 8003eca:	f000 fb67 	bl	800459c <lis2dw12_power_mode_get>
 8003ece:	4603      	mov	r3, r0
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d002      	beq.n	8003eda <LIS2DW12_ACC_GetAxesRaw+0x2a>
  {
    return LIS2DW12_ERROR;
 8003ed4:	f04f 33ff 	mov.w	r3, #4294967295
 8003ed8:	e089      	b.n	8003fee <LIS2DW12_ACC_GetAxesRaw+0x13e>
  }

  /* Read raw data values. */
  if (lis2dw12_acceleration_raw_get(&(pObj->Ctx), data_raw.i16bit) != LIS2DW12_OK)
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	3320      	adds	r3, #32
 8003ede:	f107 020c 	add.w	r2, r7, #12
 8003ee2:	4611      	mov	r1, r2
 8003ee4:	4618      	mov	r0, r3
 8003ee6:	f000 fda7 	bl	8004a38 <lis2dw12_acceleration_raw_get>
 8003eea:	4603      	mov	r3, r0
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d002      	beq.n	8003ef6 <LIS2DW12_ACC_GetAxesRaw+0x46>
  {
    return LIS2DW12_ERROR;
 8003ef0:	f04f 33ff 	mov.w	r3, #4294967295
 8003ef4:	e07b      	b.n	8003fee <LIS2DW12_ACC_GetAxesRaw+0x13e>
  }

  switch (mode)
 8003ef6:	7afb      	ldrb	r3, [r7, #11]
 8003ef8:	2b1b      	cmp	r3, #27
 8003efa:	d873      	bhi.n	8003fe4 <LIS2DW12_ACC_GetAxesRaw+0x134>
 8003efc:	a201      	add	r2, pc, #4	; (adr r2, 8003f04 <LIS2DW12_ACC_GetAxesRaw+0x54>)
 8003efe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f02:	bf00      	nop
 8003f04:	08003f75 	.word	0x08003f75
 8003f08:	08003fad 	.word	0x08003fad
 8003f0c:	08003fad 	.word	0x08003fad
 8003f10:	08003fad 	.word	0x08003fad
 8003f14:	08003fad 	.word	0x08003fad
 8003f18:	08003fe5 	.word	0x08003fe5
 8003f1c:	08003fe5 	.word	0x08003fe5
 8003f20:	08003fe5 	.word	0x08003fe5
 8003f24:	08003f75 	.word	0x08003f75
 8003f28:	08003fad 	.word	0x08003fad
 8003f2c:	08003fad 	.word	0x08003fad
 8003f30:	08003fad 	.word	0x08003fad
 8003f34:	08003fe5 	.word	0x08003fe5
 8003f38:	08003fe5 	.word	0x08003fe5
 8003f3c:	08003fe5 	.word	0x08003fe5
 8003f40:	08003fe5 	.word	0x08003fe5
 8003f44:	08003f75 	.word	0x08003f75
 8003f48:	08003fad 	.word	0x08003fad
 8003f4c:	08003fad 	.word	0x08003fad
 8003f50:	08003fad 	.word	0x08003fad
 8003f54:	08003fad 	.word	0x08003fad
 8003f58:	08003fe5 	.word	0x08003fe5
 8003f5c:	08003fe5 	.word	0x08003fe5
 8003f60:	08003fe5 	.word	0x08003fe5
 8003f64:	08003f75 	.word	0x08003f75
 8003f68:	08003fad 	.word	0x08003fad
 8003f6c:	08003fad 	.word	0x08003fad
 8003f70:	08003fad 	.word	0x08003fad
    case LIS2DW12_CONT_LOW_PWR_12bit:
    case LIS2DW12_SINGLE_LOW_PWR_12bit:
    case LIS2DW12_CONT_LOW_PWR_LOW_NOISE_12bit:
    case LIS2DW12_SINGLE_LOW_LOW_NOISE_PWR_12bit:
      /* Data format 12 bits. */
      Value->x = (data_raw.i16bit[0] / 16);
 8003f74:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	da00      	bge.n	8003f7e <LIS2DW12_ACC_GetAxesRaw+0xce>
 8003f7c:	330f      	adds	r3, #15
 8003f7e:	111b      	asrs	r3, r3, #4
 8003f80:	b21a      	sxth	r2, r3
 8003f82:	683b      	ldr	r3, [r7, #0]
 8003f84:	801a      	strh	r2, [r3, #0]
      Value->y = (data_raw.i16bit[1] / 16);
 8003f86:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	da00      	bge.n	8003f90 <LIS2DW12_ACC_GetAxesRaw+0xe0>
 8003f8e:	330f      	adds	r3, #15
 8003f90:	111b      	asrs	r3, r3, #4
 8003f92:	b21a      	sxth	r2, r3
 8003f94:	683b      	ldr	r3, [r7, #0]
 8003f96:	805a      	strh	r2, [r3, #2]
      Value->z = (data_raw.i16bit[2] / 16);
 8003f98:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	da00      	bge.n	8003fa2 <LIS2DW12_ACC_GetAxesRaw+0xf2>
 8003fa0:	330f      	adds	r3, #15
 8003fa2:	111b      	asrs	r3, r3, #4
 8003fa4:	b21a      	sxth	r2, r3
 8003fa6:	683b      	ldr	r3, [r7, #0]
 8003fa8:	809a      	strh	r2, [r3, #4]
      break;
 8003faa:	e01f      	b.n	8003fec <LIS2DW12_ACC_GetAxesRaw+0x13c>
    case LIS2DW12_CONT_LOW_PWR_LOW_NOISE_2:
    case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_4:
    case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_3:
    case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_2:
      /* Data format 14 bits. */
      Value->x = (data_raw.i16bit[0] / 4);
 8003fac:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	da00      	bge.n	8003fb6 <LIS2DW12_ACC_GetAxesRaw+0x106>
 8003fb4:	3303      	adds	r3, #3
 8003fb6:	109b      	asrs	r3, r3, #2
 8003fb8:	b21a      	sxth	r2, r3
 8003fba:	683b      	ldr	r3, [r7, #0]
 8003fbc:	801a      	strh	r2, [r3, #0]
      Value->y = (data_raw.i16bit[1] / 4);
 8003fbe:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	da00      	bge.n	8003fc8 <LIS2DW12_ACC_GetAxesRaw+0x118>
 8003fc6:	3303      	adds	r3, #3
 8003fc8:	109b      	asrs	r3, r3, #2
 8003fca:	b21a      	sxth	r2, r3
 8003fcc:	683b      	ldr	r3, [r7, #0]
 8003fce:	805a      	strh	r2, [r3, #2]
      Value->z = (data_raw.i16bit[2] / 4);
 8003fd0:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	da00      	bge.n	8003fda <LIS2DW12_ACC_GetAxesRaw+0x12a>
 8003fd8:	3303      	adds	r3, #3
 8003fda:	109b      	asrs	r3, r3, #2
 8003fdc:	b21a      	sxth	r2, r3
 8003fde:	683b      	ldr	r3, [r7, #0]
 8003fe0:	809a      	strh	r2, [r3, #4]
      break;
 8003fe2:	e003      	b.n	8003fec <LIS2DW12_ACC_GetAxesRaw+0x13c>

    default:
      ret = LIS2DW12_ERROR;
 8003fe4:	f04f 33ff 	mov.w	r3, #4294967295
 8003fe8:	617b      	str	r3, [r7, #20]
      break;
 8003fea:	bf00      	nop
  }

  return ret;
 8003fec:	697b      	ldr	r3, [r7, #20]
}
 8003fee:	4618      	mov	r0, r3
 8003ff0:	3718      	adds	r7, #24
 8003ff2:	46bd      	mov	sp, r7
 8003ff4:	bd80      	pop	{r7, pc}
 8003ff6:	bf00      	nop

08003ff8 <LIS2DW12_ACC_GetAxes>:
  * @param  pObj the device pObj
  * @param  Acceleration pointer where the values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DW12_ACC_GetAxes(LIS2DW12_Object_t *pObj, LIS2DW12_Axes_t *Acceleration)
{
 8003ff8:	b580      	push	{r7, lr}
 8003ffa:	b086      	sub	sp, #24
 8003ffc:	af00      	add	r7, sp, #0
 8003ffe:	6078      	str	r0, [r7, #4]
 8004000:	6039      	str	r1, [r7, #0]
  LIS2DW12_AxesRaw_t data_raw;
  float sensitivity = 0.0f;
 8004002:	f04f 0300 	mov.w	r3, #0
 8004006:	60fb      	str	r3, [r7, #12]

  /* Read raw data values. */
  if (LIS2DW12_ACC_GetAxesRaw(pObj, &data_raw) != LIS2DW12_OK)
 8004008:	f107 0310 	add.w	r3, r7, #16
 800400c:	4619      	mov	r1, r3
 800400e:	6878      	ldr	r0, [r7, #4]
 8004010:	f7ff ff4e 	bl	8003eb0 <LIS2DW12_ACC_GetAxesRaw>
 8004014:	4603      	mov	r3, r0
 8004016:	2b00      	cmp	r3, #0
 8004018:	d002      	beq.n	8004020 <LIS2DW12_ACC_GetAxes+0x28>
  {
    return LIS2DW12_ERROR;
 800401a:	f04f 33ff 	mov.w	r3, #4294967295
 800401e:	e03c      	b.n	800409a <LIS2DW12_ACC_GetAxes+0xa2>
  }

  /* Get LIS2DW12 actual sensitivity. */
  if (LIS2DW12_ACC_GetSensitivity(pObj, &sensitivity) != LIS2DW12_OK)
 8004020:	f107 030c 	add.w	r3, r7, #12
 8004024:	4619      	mov	r1, r3
 8004026:	6878      	ldr	r0, [r7, #4]
 8004028:	f7ff fbd6 	bl	80037d8 <LIS2DW12_ACC_GetSensitivity>
 800402c:	4603      	mov	r3, r0
 800402e:	2b00      	cmp	r3, #0
 8004030:	d002      	beq.n	8004038 <LIS2DW12_ACC_GetAxes+0x40>
  {
    return LIS2DW12_ERROR;
 8004032:	f04f 33ff 	mov.w	r3, #4294967295
 8004036:	e030      	b.n	800409a <LIS2DW12_ACC_GetAxes+0xa2>
  }

  /* Calculate the data. */
  Acceleration->x = (int32_t)((float)((float)data_raw.x * sensitivity));
 8004038:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800403c:	ee07 3a90 	vmov	s15, r3
 8004040:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004044:	edd7 7a03 	vldr	s15, [r7, #12]
 8004048:	ee67 7a27 	vmul.f32	s15, s14, s15
 800404c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004050:	ee17 2a90 	vmov	r2, s15
 8004054:	683b      	ldr	r3, [r7, #0]
 8004056:	601a      	str	r2, [r3, #0]
  Acceleration->y = (int32_t)((float)((float)data_raw.y * sensitivity));
 8004058:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800405c:	ee07 3a90 	vmov	s15, r3
 8004060:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004064:	edd7 7a03 	vldr	s15, [r7, #12]
 8004068:	ee67 7a27 	vmul.f32	s15, s14, s15
 800406c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004070:	ee17 2a90 	vmov	r2, s15
 8004074:	683b      	ldr	r3, [r7, #0]
 8004076:	605a      	str	r2, [r3, #4]
  Acceleration->z = (int32_t)((float)((float)data_raw.z * sensitivity));
 8004078:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800407c:	ee07 3a90 	vmov	s15, r3
 8004080:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004084:	edd7 7a03 	vldr	s15, [r7, #12]
 8004088:	ee67 7a27 	vmul.f32	s15, s14, s15
 800408c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004090:	ee17 2a90 	vmov	r2, s15
 8004094:	683b      	ldr	r3, [r7, #0]
 8004096:	609a      	str	r2, [r3, #8]

  return LIS2DW12_OK;
 8004098:	2300      	movs	r3, #0
}
 800409a:	4618      	mov	r0, r3
 800409c:	3718      	adds	r7, #24
 800409e:	46bd      	mov	sp, r7
 80040a0:	bd80      	pop	{r7, pc}

080040a2 <LIS2DW12_Write_Reg>:
  * @param  Reg address to be written
  * @param  Data value to be written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DW12_Write_Reg(LIS2DW12_Object_t *pObj, uint8_t Reg, uint8_t Data)
{
 80040a2:	b580      	push	{r7, lr}
 80040a4:	b082      	sub	sp, #8
 80040a6:	af00      	add	r7, sp, #0
 80040a8:	6078      	str	r0, [r7, #4]
 80040aa:	460b      	mov	r3, r1
 80040ac:	70fb      	strb	r3, [r7, #3]
 80040ae:	4613      	mov	r3, r2
 80040b0:	70bb      	strb	r3, [r7, #2]
  if (lis2dw12_write_reg(&(pObj->Ctx), Reg, &Data, 1) != LIS2DW12_OK)
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	f103 0020 	add.w	r0, r3, #32
 80040b8:	1cba      	adds	r2, r7, #2
 80040ba:	78f9      	ldrb	r1, [r7, #3]
 80040bc:	2301      	movs	r3, #1
 80040be:	f000 fa07 	bl	80044d0 <lis2dw12_write_reg>
 80040c2:	4603      	mov	r3, r0
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d002      	beq.n	80040ce <LIS2DW12_Write_Reg+0x2c>
  {
    return LIS2DW12_ERROR;
 80040c8:	f04f 33ff 	mov.w	r3, #4294967295
 80040cc:	e000      	b.n	80040d0 <LIS2DW12_Write_Reg+0x2e>
  }

  return LIS2DW12_OK;
 80040ce:	2300      	movs	r3, #0
}
 80040d0:	4618      	mov	r0, r3
 80040d2:	3708      	adds	r7, #8
 80040d4:	46bd      	mov	sp, r7
 80040d6:	bd80      	pop	{r7, pc}

080040d8 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled>:
  * @param  Noise the low noise option
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LIS2DW12_ACC_SetOutputDataRate_When_Enabled(LIS2DW12_Object_t *pObj, float Odr,
                                                           LIS2DW12_Operating_Mode_t Mode, LIS2DW12_Low_Noise_t Noise)
{
 80040d8:	b580      	push	{r7, lr}
 80040da:	b086      	sub	sp, #24
 80040dc:	af00      	add	r7, sp, #0
 80040de:	60f8      	str	r0, [r7, #12]
 80040e0:	ed87 0a02 	vstr	s0, [r7, #8]
 80040e4:	460b      	mov	r3, r1
 80040e6:	71fb      	strb	r3, [r7, #7]
 80040e8:	4613      	mov	r3, r2
 80040ea:	71bb      	strb	r3, [r7, #6]
  lis2dw12_odr_t new_odr;
  lis2dw12_mode_t new_power_mode;

  switch (Mode)
 80040ec:	79fb      	ldrb	r3, [r7, #7]
 80040ee:	3b01      	subs	r3, #1
 80040f0:	2b03      	cmp	r3, #3
 80040f2:	d80b      	bhi.n	800410c <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x34>
 80040f4:	a201      	add	r2, pc, #4	; (adr r2, 80040fc <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x24>)
 80040f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80040fa:	bf00      	nop
 80040fc:	08004139 	.word	0x08004139
 8004100:	08004165 	.word	0x08004165
 8004104:	08004191 	.word	0x08004191
 8004108:	080041bd 	.word	0x080041bd
  {
    case LIS2DW12_HIGH_PERFORMANCE_MODE:
    default:
      switch (Noise)
 800410c:	79bb      	ldrb	r3, [r7, #6]
 800410e:	2b01      	cmp	r3, #1
 8004110:	d002      	beq.n	8004118 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x40>
      {
        case LIS2DW12_LOW_NOISE_DISABLE:
        default:
          new_power_mode = LIS2DW12_HIGH_PERFORMANCE;
 8004112:	2304      	movs	r3, #4
 8004114:	75fb      	strb	r3, [r7, #23]
          break;
 8004116:	e002      	b.n	800411e <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x46>
        case LIS2DW12_LOW_NOISE_ENABLE:
          new_power_mode = LIS2DW12_HIGH_PERFORMANCE_LOW_NOISE;
 8004118:	2314      	movs	r3, #20
 800411a:	75fb      	strb	r3, [r7, #23]
          break;
 800411c:	bf00      	nop
      }

      /* If High Performance mode minimum ODR is 12.5Hz */
      if (Odr < 12.5f)
 800411e:	edd7 7a02 	vldr	s15, [r7, #8]
 8004122:	eeb2 7a09 	vmov.f32	s14, #41	; 0x41480000  12.5
 8004126:	eef4 7ac7 	vcmpe.f32	s15, s14
 800412a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800412e:	d400      	bmi.n	8004132 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x5a>
      {
        Odr = 12.5f;
      }
      break;
 8004130:	e05a      	b.n	80041e8 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x110>
        Odr = 12.5f;
 8004132:	4b6f      	ldr	r3, [pc, #444]	; (80042f0 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x218>)
 8004134:	60bb      	str	r3, [r7, #8]
      break;
 8004136:	e057      	b.n	80041e8 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x110>
    case LIS2DW12_LOW_POWER_MODE4:
      switch (Noise)
 8004138:	79bb      	ldrb	r3, [r7, #6]
 800413a:	2b01      	cmp	r3, #1
 800413c:	d002      	beq.n	8004144 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x6c>
      {
        case LIS2DW12_LOW_NOISE_DISABLE:
        default:
          new_power_mode = LIS2DW12_CONT_LOW_PWR_4;
 800413e:	2303      	movs	r3, #3
 8004140:	75fb      	strb	r3, [r7, #23]
          break;
 8004142:	e002      	b.n	800414a <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x72>
        case LIS2DW12_LOW_NOISE_ENABLE:
          new_power_mode = LIS2DW12_CONT_LOW_PWR_LOW_NOISE_4;
 8004144:	2313      	movs	r3, #19
 8004146:	75fb      	strb	r3, [r7, #23]
          break;
 8004148:	bf00      	nop
      }

      /* If Low Power mode maximum ODR is 200Hz */
      if (Odr > 200.0f)
 800414a:	edd7 7a02 	vldr	s15, [r7, #8]
 800414e:	ed9f 7a69 	vldr	s14, [pc, #420]	; 80042f4 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x21c>
 8004152:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004156:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800415a:	dc00      	bgt.n	800415e <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x86>
      {
        Odr = 200.0f;
      }
      break;
 800415c:	e044      	b.n	80041e8 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x110>
        Odr = 200.0f;
 800415e:	4b66      	ldr	r3, [pc, #408]	; (80042f8 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x220>)
 8004160:	60bb      	str	r3, [r7, #8]
      break;
 8004162:	e041      	b.n	80041e8 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x110>
    case LIS2DW12_LOW_POWER_MODE3:
      switch (Noise)
 8004164:	79bb      	ldrb	r3, [r7, #6]
 8004166:	2b01      	cmp	r3, #1
 8004168:	d002      	beq.n	8004170 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x98>
      {
        case LIS2DW12_LOW_NOISE_DISABLE:
        default:
          new_power_mode = LIS2DW12_CONT_LOW_PWR_3;
 800416a:	2302      	movs	r3, #2
 800416c:	75fb      	strb	r3, [r7, #23]
          break;
 800416e:	e002      	b.n	8004176 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x9e>
        case LIS2DW12_LOW_NOISE_ENABLE:
          new_power_mode = LIS2DW12_CONT_LOW_PWR_LOW_NOISE_3;
 8004170:	2312      	movs	r3, #18
 8004172:	75fb      	strb	r3, [r7, #23]
          break;
 8004174:	bf00      	nop
      }

      /* If Low Power mode maximum ODR is 200Hz */
      if (Odr > 200.0f)
 8004176:	edd7 7a02 	vldr	s15, [r7, #8]
 800417a:	ed9f 7a5e 	vldr	s14, [pc, #376]	; 80042f4 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x21c>
 800417e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004182:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004186:	dc00      	bgt.n	800418a <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0xb2>
      {
        Odr = 200.0f;
      }
      break;
 8004188:	e02e      	b.n	80041e8 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x110>
        Odr = 200.0f;
 800418a:	4b5b      	ldr	r3, [pc, #364]	; (80042f8 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x220>)
 800418c:	60bb      	str	r3, [r7, #8]
      break;
 800418e:	e02b      	b.n	80041e8 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x110>
    case LIS2DW12_LOW_POWER_MODE2:
      switch (Noise)
 8004190:	79bb      	ldrb	r3, [r7, #6]
 8004192:	2b01      	cmp	r3, #1
 8004194:	d002      	beq.n	800419c <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0xc4>
      {
        case LIS2DW12_LOW_NOISE_DISABLE:
        default:
          new_power_mode = LIS2DW12_CONT_LOW_PWR_2;
 8004196:	2301      	movs	r3, #1
 8004198:	75fb      	strb	r3, [r7, #23]
          break;
 800419a:	e002      	b.n	80041a2 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0xca>
        case LIS2DW12_LOW_NOISE_ENABLE:
          new_power_mode = LIS2DW12_CONT_LOW_PWR_LOW_NOISE_2;
 800419c:	2311      	movs	r3, #17
 800419e:	75fb      	strb	r3, [r7, #23]
          break;
 80041a0:	bf00      	nop
      }

      /* If Low Power mode maximum ODR is 200Hz */
      if (Odr > 200.0f)
 80041a2:	edd7 7a02 	vldr	s15, [r7, #8]
 80041a6:	ed9f 7a53 	vldr	s14, [pc, #332]	; 80042f4 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x21c>
 80041aa:	eef4 7ac7 	vcmpe.f32	s15, s14
 80041ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80041b2:	dc00      	bgt.n	80041b6 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0xde>
      {
        Odr = 200.0f;
      }
      break;
 80041b4:	e018      	b.n	80041e8 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x110>
        Odr = 200.0f;
 80041b6:	4b50      	ldr	r3, [pc, #320]	; (80042f8 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x220>)
 80041b8:	60bb      	str	r3, [r7, #8]
      break;
 80041ba:	e015      	b.n	80041e8 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x110>
    case LIS2DW12_LOW_POWER_MODE1:
      switch (Noise)
 80041bc:	79bb      	ldrb	r3, [r7, #6]
 80041be:	2b01      	cmp	r3, #1
 80041c0:	d002      	beq.n	80041c8 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0xf0>
      {
        case LIS2DW12_LOW_NOISE_DISABLE:
        default:
          new_power_mode = LIS2DW12_CONT_LOW_PWR_12bit;
 80041c2:	2300      	movs	r3, #0
 80041c4:	75fb      	strb	r3, [r7, #23]
          break;
 80041c6:	e002      	b.n	80041ce <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0xf6>
        case LIS2DW12_LOW_NOISE_ENABLE:
          new_power_mode = LIS2DW12_CONT_LOW_PWR_LOW_NOISE_12bit;
 80041c8:	2310      	movs	r3, #16
 80041ca:	75fb      	strb	r3, [r7, #23]
          break;
 80041cc:	bf00      	nop
      }

      /* If Low Power mode maximum ODR is 200Hz */
      if (Odr > 200.0f)
 80041ce:	edd7 7a02 	vldr	s15, [r7, #8]
 80041d2:	ed9f 7a48 	vldr	s14, [pc, #288]	; 80042f4 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x21c>
 80041d6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80041da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80041de:	dc00      	bgt.n	80041e2 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x10a>
      {
        Odr = 200.0f;
      }
      break;
 80041e0:	e001      	b.n	80041e6 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x10e>
        Odr = 200.0f;
 80041e2:	4b45      	ldr	r3, [pc, #276]	; (80042f8 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x220>)
 80041e4:	60bb      	str	r3, [r7, #8]
      break;
 80041e6:	bf00      	nop
  }

  new_odr = (Odr <=    1.6f) ? LIS2DW12_XL_ODR_1Hz6_LP_ONLY
            : (Odr <=   12.5f) ? LIS2DW12_XL_ODR_12Hz5
 80041e8:	edd7 7a02 	vldr	s15, [r7, #8]
 80041ec:	ed9f 7a43 	vldr	s14, [pc, #268]	; 80042fc <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x224>
 80041f0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80041f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80041f8:	d801      	bhi.n	80041fe <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x126>
 80041fa:	2301      	movs	r3, #1
 80041fc:	e04d      	b.n	800429a <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x1c2>
 80041fe:	edd7 7a02 	vldr	s15, [r7, #8]
 8004202:	eeb2 7a09 	vmov.f32	s14, #41	; 0x41480000  12.5
 8004206:	eef4 7ac7 	vcmpe.f32	s15, s14
 800420a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800420e:	d801      	bhi.n	8004214 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x13c>
 8004210:	2302      	movs	r3, #2
 8004212:	e042      	b.n	800429a <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x1c2>
 8004214:	edd7 7a02 	vldr	s15, [r7, #8]
 8004218:	eeb3 7a09 	vmov.f32	s14, #57	; 0x41c80000  25.0
 800421c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004220:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004224:	d801      	bhi.n	800422a <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x152>
 8004226:	2303      	movs	r3, #3
 8004228:	e037      	b.n	800429a <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x1c2>
 800422a:	edd7 7a02 	vldr	s15, [r7, #8]
 800422e:	ed9f 7a34 	vldr	s14, [pc, #208]	; 8004300 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x228>
 8004232:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004236:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800423a:	d801      	bhi.n	8004240 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x168>
 800423c:	2304      	movs	r3, #4
 800423e:	e02c      	b.n	800429a <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x1c2>
 8004240:	edd7 7a02 	vldr	s15, [r7, #8]
 8004244:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 8004304 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x22c>
 8004248:	eef4 7ac7 	vcmpe.f32	s15, s14
 800424c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004250:	d801      	bhi.n	8004256 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x17e>
 8004252:	2305      	movs	r3, #5
 8004254:	e021      	b.n	800429a <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x1c2>
 8004256:	edd7 7a02 	vldr	s15, [r7, #8]
 800425a:	ed9f 7a26 	vldr	s14, [pc, #152]	; 80042f4 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x21c>
 800425e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004262:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004266:	d801      	bhi.n	800426c <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x194>
 8004268:	2306      	movs	r3, #6
 800426a:	e016      	b.n	800429a <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x1c2>
 800426c:	edd7 7a02 	vldr	s15, [r7, #8]
 8004270:	ed9f 7a25 	vldr	s14, [pc, #148]	; 8004308 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x230>
 8004274:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004278:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800427c:	d801      	bhi.n	8004282 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x1aa>
 800427e:	2307      	movs	r3, #7
 8004280:	e00b      	b.n	800429a <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x1c2>
 8004282:	edd7 7a02 	vldr	s15, [r7, #8]
 8004286:	ed9f 7a21 	vldr	s14, [pc, #132]	; 800430c <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x234>
 800428a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800428e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004292:	d801      	bhi.n	8004298 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x1c0>
 8004294:	2308      	movs	r3, #8
 8004296:	e000      	b.n	800429a <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x1c2>
 8004298:	2309      	movs	r3, #9
  new_odr = (Odr <=    1.6f) ? LIS2DW12_XL_ODR_1Hz6_LP_ONLY
 800429a:	75bb      	strb	r3, [r7, #22]
            : (Odr <=  400.0f) ? LIS2DW12_XL_ODR_400Hz
            : (Odr <=  800.0f) ? LIS2DW12_XL_ODR_800Hz
            :                    LIS2DW12_XL_ODR_1k6Hz;

  /* Output data rate selection. */
  if (lis2dw12_data_rate_set(&(pObj->Ctx), new_odr) != LIS2DW12_OK)
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	3320      	adds	r3, #32
 80042a0:	7dba      	ldrb	r2, [r7, #22]
 80042a2:	4611      	mov	r1, r2
 80042a4:	4618      	mov	r0, r3
 80042a6:	f000 fa33 	bl	8004710 <lis2dw12_data_rate_set>
 80042aa:	4603      	mov	r3, r0
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d002      	beq.n	80042b6 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x1de>
  {
    return LIS2DW12_ERROR;
 80042b0:	f04f 33ff 	mov.w	r3, #4294967295
 80042b4:	e018      	b.n	80042e8 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x210>
  }

  /* Power mode selection. */
  if (lis2dw12_power_mode_set(&(pObj->Ctx), new_power_mode) != LIS2DW12_OK)
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	3320      	adds	r3, #32
 80042ba:	7dfa      	ldrb	r2, [r7, #23]
 80042bc:	4611      	mov	r1, r2
 80042be:	4618      	mov	r0, r3
 80042c0:	f000 f91e 	bl	8004500 <lis2dw12_power_mode_set>
 80042c4:	4603      	mov	r3, r0
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d002      	beq.n	80042d0 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x1f8>
  {
    return LIS2DW12_ERROR;
 80042ca:	f04f 33ff 	mov.w	r3, #4294967295
 80042ce:	e00b      	b.n	80042e8 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x210>
  }

  /* Store the current Odr, Mode and Noise values */
  pObj->acc_odr = Odr;
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	68ba      	ldr	r2, [r7, #8]
 80042d4:	635a      	str	r2, [r3, #52]	; 0x34
  pObj->acc_operating_mode = Mode;
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	79fa      	ldrb	r2, [r7, #7]
 80042da:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  pObj->acc_low_noise = Noise;
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	79ba      	ldrb	r2, [r7, #6]
 80042e2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return LIS2DW12_OK;
 80042e6:	2300      	movs	r3, #0
}
 80042e8:	4618      	mov	r0, r3
 80042ea:	3718      	adds	r7, #24
 80042ec:	46bd      	mov	sp, r7
 80042ee:	bd80      	pop	{r7, pc}
 80042f0:	41480000 	.word	0x41480000
 80042f4:	43480000 	.word	0x43480000
 80042f8:	43480000 	.word	0x43480000
 80042fc:	3fcccccd 	.word	0x3fcccccd
 8004300:	42480000 	.word	0x42480000
 8004304:	42c80000 	.word	0x42c80000
 8004308:	43c80000 	.word	0x43c80000
 800430c:	44480000 	.word	0x44480000

08004310 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled>:
  * @param  Noise the low noise option
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LIS2DW12_ACC_SetOutputDataRate_When_Disabled(LIS2DW12_Object_t *pObj, float Odr,
                                                            LIS2DW12_Operating_Mode_t Mode, LIS2DW12_Low_Noise_t Noise)
{
 8004310:	b480      	push	{r7}
 8004312:	b085      	sub	sp, #20
 8004314:	af00      	add	r7, sp, #0
 8004316:	60f8      	str	r0, [r7, #12]
 8004318:	ed87 0a02 	vstr	s0, [r7, #8]
 800431c:	460b      	mov	r3, r1
 800431e:	71fb      	strb	r3, [r7, #7]
 8004320:	4613      	mov	r3, r2
 8004322:	71bb      	strb	r3, [r7, #6]
  /* Store the new Odr, Mode and Noise values */
  pObj->acc_operating_mode = Mode;
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	79fa      	ldrb	r2, [r7, #7]
 8004328:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  pObj->acc_low_noise = Noise;
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	79ba      	ldrb	r2, [r7, #6]
 8004330:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  pObj->acc_odr = (Odr <=    1.6f) ?    1.6f
                  : (Odr <=   12.5f) ?   12.5f
 8004334:	edd7 7a02 	vldr	s15, [r7, #8]
 8004338:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 80043f8 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xe8>
 800433c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004340:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004344:	d801      	bhi.n	800434a <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0x3a>
 8004346:	4b2d      	ldr	r3, [pc, #180]	; (80043fc <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xec>)
 8004348:	e04d      	b.n	80043e6 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xd6>
                  : (Odr <=   25.0f) ?   25.0f
 800434a:	edd7 7a02 	vldr	s15, [r7, #8]
 800434e:	eeb2 7a09 	vmov.f32	s14, #41	; 0x41480000  12.5
 8004352:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004356:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800435a:	d801      	bhi.n	8004360 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0x50>
 800435c:	4b28      	ldr	r3, [pc, #160]	; (8004400 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xf0>)
 800435e:	e042      	b.n	80043e6 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xd6>
                  : (Odr <=   50.0f) ?   50.0f
 8004360:	edd7 7a02 	vldr	s15, [r7, #8]
 8004364:	eeb3 7a09 	vmov.f32	s14, #57	; 0x41c80000  25.0
 8004368:	eef4 7ac7 	vcmpe.f32	s15, s14
 800436c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004370:	d801      	bhi.n	8004376 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0x66>
 8004372:	4b24      	ldr	r3, [pc, #144]	; (8004404 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xf4>)
 8004374:	e037      	b.n	80043e6 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xd6>
                  : (Odr <=  100.0f) ?  100.0f
 8004376:	edd7 7a02 	vldr	s15, [r7, #8]
 800437a:	ed9f 7a23 	vldr	s14, [pc, #140]	; 8004408 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xf8>
 800437e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004382:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004386:	d801      	bhi.n	800438c <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0x7c>
 8004388:	4b20      	ldr	r3, [pc, #128]	; (800440c <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xfc>)
 800438a:	e02c      	b.n	80043e6 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xd6>
                  : (Odr <=  200.0f) ?  200.0f
 800438c:	edd7 7a02 	vldr	s15, [r7, #8]
 8004390:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 8004410 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0x100>
 8004394:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004398:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800439c:	d801      	bhi.n	80043a2 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0x92>
 800439e:	4b1d      	ldr	r3, [pc, #116]	; (8004414 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0x104>)
 80043a0:	e021      	b.n	80043e6 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xd6>
                  : (Odr <=  400.0f) ?  400.0f
 80043a2:	edd7 7a02 	vldr	s15, [r7, #8]
 80043a6:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 8004418 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0x108>
 80043aa:	eef4 7ac7 	vcmpe.f32	s15, s14
 80043ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80043b2:	d801      	bhi.n	80043b8 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xa8>
 80043b4:	4b19      	ldr	r3, [pc, #100]	; (800441c <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0x10c>)
 80043b6:	e016      	b.n	80043e6 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xd6>
                  : (Odr <=  800.0f) ?  800.0f
 80043b8:	edd7 7a02 	vldr	s15, [r7, #8]
 80043bc:	ed9f 7a18 	vldr	s14, [pc, #96]	; 8004420 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0x110>
 80043c0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80043c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80043c8:	d801      	bhi.n	80043ce <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xbe>
 80043ca:	4b16      	ldr	r3, [pc, #88]	; (8004424 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0x114>)
 80043cc:	e00b      	b.n	80043e6 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xd6>
                  :                    1600.0f;
 80043ce:	edd7 7a02 	vldr	s15, [r7, #8]
 80043d2:	ed9f 7a15 	vldr	s14, [pc, #84]	; 8004428 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0x118>
 80043d6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80043da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80043de:	d801      	bhi.n	80043e4 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xd4>
 80043e0:	4b12      	ldr	r3, [pc, #72]	; (800442c <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0x11c>)
 80043e2:	e000      	b.n	80043e6 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xd6>
 80043e4:	4b12      	ldr	r3, [pc, #72]	; (8004430 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0x120>)
  pObj->acc_odr = (Odr <=    1.6f) ?    1.6f
 80043e6:	68fa      	ldr	r2, [r7, #12]
 80043e8:	6353      	str	r3, [r2, #52]	; 0x34

  return LIS2DW12_OK;
 80043ea:	2300      	movs	r3, #0
}
 80043ec:	4618      	mov	r0, r3
 80043ee:	3714      	adds	r7, #20
 80043f0:	46bd      	mov	sp, r7
 80043f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043f6:	4770      	bx	lr
 80043f8:	3fcccccd 	.word	0x3fcccccd
 80043fc:	3fcccccd 	.word	0x3fcccccd
 8004400:	41480000 	.word	0x41480000
 8004404:	41c80000 	.word	0x41c80000
 8004408:	42480000 	.word	0x42480000
 800440c:	42480000 	.word	0x42480000
 8004410:	42c80000 	.word	0x42c80000
 8004414:	42c80000 	.word	0x42c80000
 8004418:	43480000 	.word	0x43480000
 800441c:	43480000 	.word	0x43480000
 8004420:	43c80000 	.word	0x43c80000
 8004424:	43c80000 	.word	0x43c80000
 8004428:	44480000 	.word	0x44480000
 800442c:	44480000 	.word	0x44480000
 8004430:	44c80000 	.word	0x44c80000

08004434 <ReadRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t ReadRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8004434:	b590      	push	{r4, r7, lr}
 8004436:	b087      	sub	sp, #28
 8004438:	af00      	add	r7, sp, #0
 800443a:	60f8      	str	r0, [r7, #12]
 800443c:	607a      	str	r2, [r7, #4]
 800443e:	461a      	mov	r2, r3
 8004440:	460b      	mov	r3, r1
 8004442:	72fb      	strb	r3, [r7, #11]
 8004444:	4613      	mov	r3, r2
 8004446:	813b      	strh	r3, [r7, #8]
  LIS2DW12_Object_t *pObj = (LIS2DW12_Object_t *)Handle;
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	617b      	str	r3, [r7, #20]

  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 800444c:	697b      	ldr	r3, [r7, #20]
 800444e:	695c      	ldr	r4, [r3, #20]
 8004450:	697b      	ldr	r3, [r7, #20]
 8004452:	7b1b      	ldrb	r3, [r3, #12]
 8004454:	b298      	uxth	r0, r3
 8004456:	7afb      	ldrb	r3, [r7, #11]
 8004458:	b299      	uxth	r1, r3
 800445a:	893b      	ldrh	r3, [r7, #8]
 800445c:	687a      	ldr	r2, [r7, #4]
 800445e:	47a0      	blx	r4
 8004460:	4603      	mov	r3, r0
}
 8004462:	4618      	mov	r0, r3
 8004464:	371c      	adds	r7, #28
 8004466:	46bd      	mov	sp, r7
 8004468:	bd90      	pop	{r4, r7, pc}

0800446a <WriteRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t WriteRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 800446a:	b590      	push	{r4, r7, lr}
 800446c:	b087      	sub	sp, #28
 800446e:	af00      	add	r7, sp, #0
 8004470:	60f8      	str	r0, [r7, #12]
 8004472:	607a      	str	r2, [r7, #4]
 8004474:	461a      	mov	r2, r3
 8004476:	460b      	mov	r3, r1
 8004478:	72fb      	strb	r3, [r7, #11]
 800447a:	4613      	mov	r3, r2
 800447c:	813b      	strh	r3, [r7, #8]
  LIS2DW12_Object_t *pObj = (LIS2DW12_Object_t *)Handle;
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	617b      	str	r3, [r7, #20]

  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 8004482:	697b      	ldr	r3, [r7, #20]
 8004484:	691c      	ldr	r4, [r3, #16]
 8004486:	697b      	ldr	r3, [r7, #20]
 8004488:	7b1b      	ldrb	r3, [r3, #12]
 800448a:	b298      	uxth	r0, r3
 800448c:	7afb      	ldrb	r3, [r7, #11]
 800448e:	b299      	uxth	r1, r3
 8004490:	893b      	ldrh	r3, [r7, #8]
 8004492:	687a      	ldr	r2, [r7, #4]
 8004494:	47a0      	blx	r4
 8004496:	4603      	mov	r3, r0
}
 8004498:	4618      	mov	r0, r3
 800449a:	371c      	adds	r7, #28
 800449c:	46bd      	mov	sp, r7
 800449e:	bd90      	pop	{r4, r7, pc}

080044a0 <lis2dw12_read_reg>:
  *
  */
int32_t lis2dw12_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                          uint8_t *data,
                          uint16_t len)
{
 80044a0:	b590      	push	{r4, r7, lr}
 80044a2:	b087      	sub	sp, #28
 80044a4:	af00      	add	r7, sp, #0
 80044a6:	60f8      	str	r0, [r7, #12]
 80044a8:	607a      	str	r2, [r7, #4]
 80044aa:	461a      	mov	r2, r3
 80044ac:	460b      	mov	r3, r1
 80044ae:	72fb      	strb	r3, [r7, #11]
 80044b0:	4613      	mov	r3, r2
 80044b2:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	685c      	ldr	r4, [r3, #4]
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	68d8      	ldr	r0, [r3, #12]
 80044bc:	893b      	ldrh	r3, [r7, #8]
 80044be:	7af9      	ldrb	r1, [r7, #11]
 80044c0:	687a      	ldr	r2, [r7, #4]
 80044c2:	47a0      	blx	r4
 80044c4:	6178      	str	r0, [r7, #20]

  return ret;
 80044c6:	697b      	ldr	r3, [r7, #20]
}
 80044c8:	4618      	mov	r0, r3
 80044ca:	371c      	adds	r7, #28
 80044cc:	46bd      	mov	sp, r7
 80044ce:	bd90      	pop	{r4, r7, pc}

080044d0 <lis2dw12_write_reg>:
  *
  */
int32_t lis2dw12_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                           uint8_t *data,
                           uint16_t len)
{
 80044d0:	b590      	push	{r4, r7, lr}
 80044d2:	b087      	sub	sp, #28
 80044d4:	af00      	add	r7, sp, #0
 80044d6:	60f8      	str	r0, [r7, #12]
 80044d8:	607a      	str	r2, [r7, #4]
 80044da:	461a      	mov	r2, r3
 80044dc:	460b      	mov	r3, r1
 80044de:	72fb      	strb	r3, [r7, #11]
 80044e0:	4613      	mov	r3, r2
 80044e2:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	681c      	ldr	r4, [r3, #0]
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	68d8      	ldr	r0, [r3, #12]
 80044ec:	893b      	ldrh	r3, [r7, #8]
 80044ee:	7af9      	ldrb	r1, [r7, #11]
 80044f0:	687a      	ldr	r2, [r7, #4]
 80044f2:	47a0      	blx	r4
 80044f4:	6178      	str	r0, [r7, #20]

  return ret;
 80044f6:	697b      	ldr	r3, [r7, #20]
}
 80044f8:	4618      	mov	r0, r3
 80044fa:	371c      	adds	r7, #28
 80044fc:	46bd      	mov	sp, r7
 80044fe:	bd90      	pop	{r4, r7, pc}

08004500 <lis2dw12_power_mode_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_power_mode_set(stmdev_ctx_t *ctx,
                                lis2dw12_mode_t val)
{
 8004500:	b580      	push	{r7, lr}
 8004502:	b086      	sub	sp, #24
 8004504:	af00      	add	r7, sp, #0
 8004506:	6078      	str	r0, [r7, #4]
 8004508:	460b      	mov	r3, r1
 800450a:	70fb      	strb	r3, [r7, #3]
  lis2dw12_ctrl1_t ctrl1;
  lis2dw12_ctrl6_t ctrl6;
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL1, (uint8_t *) &ctrl1, 1);
 800450c:	f107 0210 	add.w	r2, r7, #16
 8004510:	2301      	movs	r3, #1
 8004512:	2120      	movs	r1, #32
 8004514:	6878      	ldr	r0, [r7, #4]
 8004516:	f7ff ffc3 	bl	80044a0 <lis2dw12_read_reg>
 800451a:	6178      	str	r0, [r7, #20]

  if (ret == 0)
 800451c:	697b      	ldr	r3, [r7, #20]
 800451e:	2b00      	cmp	r3, #0
 8004520:	d118      	bne.n	8004554 <lis2dw12_power_mode_set+0x54>
  {
    ctrl1.mode = ((uint8_t) val & 0x0CU) >> 2;
 8004522:	78fb      	ldrb	r3, [r7, #3]
 8004524:	089b      	lsrs	r3, r3, #2
 8004526:	f003 0303 	and.w	r3, r3, #3
 800452a:	b2da      	uxtb	r2, r3
 800452c:	7c3b      	ldrb	r3, [r7, #16]
 800452e:	f362 0383 	bfi	r3, r2, #2, #2
 8004532:	743b      	strb	r3, [r7, #16]
    ctrl1.lp_mode = (uint8_t) val & 0x03U ;
 8004534:	78fb      	ldrb	r3, [r7, #3]
 8004536:	f003 0303 	and.w	r3, r3, #3
 800453a:	b2da      	uxtb	r2, r3
 800453c:	7c3b      	ldrb	r3, [r7, #16]
 800453e:	f362 0301 	bfi	r3, r2, #0, #2
 8004542:	743b      	strb	r3, [r7, #16]
    ret = lis2dw12_write_reg(ctx, LIS2DW12_CTRL1, (uint8_t *) &ctrl1, 1);
 8004544:	f107 0210 	add.w	r2, r7, #16
 8004548:	2301      	movs	r3, #1
 800454a:	2120      	movs	r1, #32
 800454c:	6878      	ldr	r0, [r7, #4]
 800454e:	f7ff ffbf 	bl	80044d0 <lis2dw12_write_reg>
 8004552:	6178      	str	r0, [r7, #20]
  }

  if (ret == 0)
 8004554:	697b      	ldr	r3, [r7, #20]
 8004556:	2b00      	cmp	r3, #0
 8004558:	d107      	bne.n	800456a <lis2dw12_power_mode_set+0x6a>
  {
    ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL6, (uint8_t *) &ctrl6, 1);
 800455a:	f107 020c 	add.w	r2, r7, #12
 800455e:	2301      	movs	r3, #1
 8004560:	2125      	movs	r1, #37	; 0x25
 8004562:	6878      	ldr	r0, [r7, #4]
 8004564:	f7ff ff9c 	bl	80044a0 <lis2dw12_read_reg>
 8004568:	6178      	str	r0, [r7, #20]
  }

  if (ret == 0)
 800456a:	697b      	ldr	r3, [r7, #20]
 800456c:	2b00      	cmp	r3, #0
 800456e:	d110      	bne.n	8004592 <lis2dw12_power_mode_set+0x92>
  {
    ctrl6.low_noise = ((uint8_t) val & 0x10U) >> 4;
 8004570:	78fb      	ldrb	r3, [r7, #3]
 8004572:	091b      	lsrs	r3, r3, #4
 8004574:	f003 0301 	and.w	r3, r3, #1
 8004578:	b2da      	uxtb	r2, r3
 800457a:	7b3b      	ldrb	r3, [r7, #12]
 800457c:	f362 0382 	bfi	r3, r2, #2, #1
 8004580:	733b      	strb	r3, [r7, #12]
    ret = lis2dw12_write_reg(ctx, LIS2DW12_CTRL6, (uint8_t *) &ctrl6, 1);
 8004582:	f107 020c 	add.w	r2, r7, #12
 8004586:	2301      	movs	r3, #1
 8004588:	2125      	movs	r1, #37	; 0x25
 800458a:	6878      	ldr	r0, [r7, #4]
 800458c:	f7ff ffa0 	bl	80044d0 <lis2dw12_write_reg>
 8004590:	6178      	str	r0, [r7, #20]
  }

  return ret;
 8004592:	697b      	ldr	r3, [r7, #20]
}
 8004594:	4618      	mov	r0, r3
 8004596:	3718      	adds	r7, #24
 8004598:	46bd      	mov	sp, r7
 800459a:	bd80      	pop	{r7, pc}

0800459c <lis2dw12_power_mode_get>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_power_mode_get(stmdev_ctx_t *ctx,
                                lis2dw12_mode_t *val)
{
 800459c:	b580      	push	{r7, lr}
 800459e:	b086      	sub	sp, #24
 80045a0:	af00      	add	r7, sp, #0
 80045a2:	6078      	str	r0, [r7, #4]
 80045a4:	6039      	str	r1, [r7, #0]
  lis2dw12_ctrl1_t ctrl1;
  lis2dw12_ctrl6_t ctrl6;
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL1, (uint8_t *) &ctrl1, 1);
 80045a6:	f107 0210 	add.w	r2, r7, #16
 80045aa:	2301      	movs	r3, #1
 80045ac:	2120      	movs	r1, #32
 80045ae:	6878      	ldr	r0, [r7, #4]
 80045b0:	f7ff ff76 	bl	80044a0 <lis2dw12_read_reg>
 80045b4:	6178      	str	r0, [r7, #20]

  if (ret == 0)
 80045b6:	697b      	ldr	r3, [r7, #20]
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	f040 80a3 	bne.w	8004704 <lis2dw12_power_mode_get+0x168>
  {
    ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL6, (uint8_t *) &ctrl6, 1);
 80045be:	f107 020c 	add.w	r2, r7, #12
 80045c2:	2301      	movs	r3, #1
 80045c4:	2125      	movs	r1, #37	; 0x25
 80045c6:	6878      	ldr	r0, [r7, #4]
 80045c8:	f7ff ff6a 	bl	80044a0 <lis2dw12_read_reg>
 80045cc:	6178      	str	r0, [r7, #20]

    switch (((ctrl6.low_noise << 4) + (ctrl1.mode << 2) +
 80045ce:	7b3b      	ldrb	r3, [r7, #12]
 80045d0:	f3c3 0380 	ubfx	r3, r3, #2, #1
 80045d4:	b2db      	uxtb	r3, r3
 80045d6:	011a      	lsls	r2, r3, #4
 80045d8:	7c3b      	ldrb	r3, [r7, #16]
 80045da:	f3c3 0381 	ubfx	r3, r3, #2, #2
 80045de:	b2db      	uxtb	r3, r3
 80045e0:	009b      	lsls	r3, r3, #2
 80045e2:	4413      	add	r3, r2
             ctrl1.lp_mode))
 80045e4:	7c3a      	ldrb	r2, [r7, #16]
 80045e6:	f3c2 0201 	ubfx	r2, r2, #0, #2
 80045ea:	b2d2      	uxtb	r2, r2
    switch (((ctrl6.low_noise << 4) + (ctrl1.mode << 2) +
 80045ec:	4413      	add	r3, r2
 80045ee:	2b1b      	cmp	r3, #27
 80045f0:	f200 8084 	bhi.w	80046fc <lis2dw12_power_mode_get+0x160>
 80045f4:	a201      	add	r2, pc, #4	; (adr r2, 80045fc <lis2dw12_power_mode_get+0x60>)
 80045f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045fa:	bf00      	nop
 80045fc:	0800468d 	.word	0x0800468d
 8004600:	08004685 	.word	0x08004685
 8004604:	0800467d 	.word	0x0800467d
 8004608:	08004675 	.word	0x08004675
 800460c:	0800466d 	.word	0x0800466d
 8004610:	080046fd 	.word	0x080046fd
 8004614:	080046fd 	.word	0x080046fd
 8004618:	080046fd 	.word	0x080046fd
 800461c:	080046ad 	.word	0x080046ad
 8004620:	080046a5 	.word	0x080046a5
 8004624:	0800469d 	.word	0x0800469d
 8004628:	08004695 	.word	0x08004695
 800462c:	080046fd 	.word	0x080046fd
 8004630:	080046fd 	.word	0x080046fd
 8004634:	080046fd 	.word	0x080046fd
 8004638:	080046fd 	.word	0x080046fd
 800463c:	080046d5 	.word	0x080046d5
 8004640:	080046cd 	.word	0x080046cd
 8004644:	080046c5 	.word	0x080046c5
 8004648:	080046bd 	.word	0x080046bd
 800464c:	080046b5 	.word	0x080046b5
 8004650:	080046fd 	.word	0x080046fd
 8004654:	080046fd 	.word	0x080046fd
 8004658:	080046fd 	.word	0x080046fd
 800465c:	080046f5 	.word	0x080046f5
 8004660:	080046ed 	.word	0x080046ed
 8004664:	080046e5 	.word	0x080046e5
 8004668:	080046dd 	.word	0x080046dd
    {
      case LIS2DW12_HIGH_PERFORMANCE:
        *val = LIS2DW12_HIGH_PERFORMANCE;
 800466c:	683b      	ldr	r3, [r7, #0]
 800466e:	2204      	movs	r2, #4
 8004670:	701a      	strb	r2, [r3, #0]
        break;
 8004672:	e048      	b.n	8004706 <lis2dw12_power_mode_get+0x16a>

      case LIS2DW12_CONT_LOW_PWR_4:
        *val = LIS2DW12_CONT_LOW_PWR_4;
 8004674:	683b      	ldr	r3, [r7, #0]
 8004676:	2203      	movs	r2, #3
 8004678:	701a      	strb	r2, [r3, #0]
        break;
 800467a:	e044      	b.n	8004706 <lis2dw12_power_mode_get+0x16a>

      case LIS2DW12_CONT_LOW_PWR_3:
        *val = LIS2DW12_CONT_LOW_PWR_3;
 800467c:	683b      	ldr	r3, [r7, #0]
 800467e:	2202      	movs	r2, #2
 8004680:	701a      	strb	r2, [r3, #0]
        break;
 8004682:	e040      	b.n	8004706 <lis2dw12_power_mode_get+0x16a>

      case LIS2DW12_CONT_LOW_PWR_2:
        *val = LIS2DW12_CONT_LOW_PWR_2;
 8004684:	683b      	ldr	r3, [r7, #0]
 8004686:	2201      	movs	r2, #1
 8004688:	701a      	strb	r2, [r3, #0]
        break;
 800468a:	e03c      	b.n	8004706 <lis2dw12_power_mode_get+0x16a>

      case LIS2DW12_CONT_LOW_PWR_12bit:
        *val = LIS2DW12_CONT_LOW_PWR_12bit;
 800468c:	683b      	ldr	r3, [r7, #0]
 800468e:	2200      	movs	r2, #0
 8004690:	701a      	strb	r2, [r3, #0]
        break;
 8004692:	e038      	b.n	8004706 <lis2dw12_power_mode_get+0x16a>

      case LIS2DW12_SINGLE_LOW_PWR_4:
        *val = LIS2DW12_SINGLE_LOW_PWR_4;
 8004694:	683b      	ldr	r3, [r7, #0]
 8004696:	220b      	movs	r2, #11
 8004698:	701a      	strb	r2, [r3, #0]
        break;
 800469a:	e034      	b.n	8004706 <lis2dw12_power_mode_get+0x16a>

      case LIS2DW12_SINGLE_LOW_PWR_3:
        *val = LIS2DW12_SINGLE_LOW_PWR_3;
 800469c:	683b      	ldr	r3, [r7, #0]
 800469e:	220a      	movs	r2, #10
 80046a0:	701a      	strb	r2, [r3, #0]
        break;
 80046a2:	e030      	b.n	8004706 <lis2dw12_power_mode_get+0x16a>

      case LIS2DW12_SINGLE_LOW_PWR_2:
        *val = LIS2DW12_SINGLE_LOW_PWR_2;
 80046a4:	683b      	ldr	r3, [r7, #0]
 80046a6:	2209      	movs	r2, #9
 80046a8:	701a      	strb	r2, [r3, #0]
        break;
 80046aa:	e02c      	b.n	8004706 <lis2dw12_power_mode_get+0x16a>

      case LIS2DW12_SINGLE_LOW_PWR_12bit:
        *val = LIS2DW12_SINGLE_LOW_PWR_12bit;
 80046ac:	683b      	ldr	r3, [r7, #0]
 80046ae:	2208      	movs	r2, #8
 80046b0:	701a      	strb	r2, [r3, #0]
        break;
 80046b2:	e028      	b.n	8004706 <lis2dw12_power_mode_get+0x16a>

      case LIS2DW12_HIGH_PERFORMANCE_LOW_NOISE:
        *val = LIS2DW12_HIGH_PERFORMANCE_LOW_NOISE;
 80046b4:	683b      	ldr	r3, [r7, #0]
 80046b6:	2214      	movs	r2, #20
 80046b8:	701a      	strb	r2, [r3, #0]
        break;
 80046ba:	e024      	b.n	8004706 <lis2dw12_power_mode_get+0x16a>

      case LIS2DW12_CONT_LOW_PWR_LOW_NOISE_4:
        *val = LIS2DW12_CONT_LOW_PWR_LOW_NOISE_4;
 80046bc:	683b      	ldr	r3, [r7, #0]
 80046be:	2213      	movs	r2, #19
 80046c0:	701a      	strb	r2, [r3, #0]
        break;
 80046c2:	e020      	b.n	8004706 <lis2dw12_power_mode_get+0x16a>

      case LIS2DW12_CONT_LOW_PWR_LOW_NOISE_3:
        *val = LIS2DW12_CONT_LOW_PWR_LOW_NOISE_3;
 80046c4:	683b      	ldr	r3, [r7, #0]
 80046c6:	2212      	movs	r2, #18
 80046c8:	701a      	strb	r2, [r3, #0]
        break;
 80046ca:	e01c      	b.n	8004706 <lis2dw12_power_mode_get+0x16a>

      case LIS2DW12_CONT_LOW_PWR_LOW_NOISE_2:
        *val = LIS2DW12_CONT_LOW_PWR_LOW_NOISE_2;
 80046cc:	683b      	ldr	r3, [r7, #0]
 80046ce:	2211      	movs	r2, #17
 80046d0:	701a      	strb	r2, [r3, #0]
        break;
 80046d2:	e018      	b.n	8004706 <lis2dw12_power_mode_get+0x16a>

      case LIS2DW12_CONT_LOW_PWR_LOW_NOISE_12bit:
        *val = LIS2DW12_CONT_LOW_PWR_LOW_NOISE_12bit;
 80046d4:	683b      	ldr	r3, [r7, #0]
 80046d6:	2210      	movs	r2, #16
 80046d8:	701a      	strb	r2, [r3, #0]
        break;
 80046da:	e014      	b.n	8004706 <lis2dw12_power_mode_get+0x16a>

      case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_4:
        *val = LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_4;
 80046dc:	683b      	ldr	r3, [r7, #0]
 80046de:	221b      	movs	r2, #27
 80046e0:	701a      	strb	r2, [r3, #0]
        break;
 80046e2:	e010      	b.n	8004706 <lis2dw12_power_mode_get+0x16a>

      case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_3:
        *val = LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_3;
 80046e4:	683b      	ldr	r3, [r7, #0]
 80046e6:	221a      	movs	r2, #26
 80046e8:	701a      	strb	r2, [r3, #0]
        break;
 80046ea:	e00c      	b.n	8004706 <lis2dw12_power_mode_get+0x16a>

      case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_2:
        *val = LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_2;
 80046ec:	683b      	ldr	r3, [r7, #0]
 80046ee:	2219      	movs	r2, #25
 80046f0:	701a      	strb	r2, [r3, #0]
        break;
 80046f2:	e008      	b.n	8004706 <lis2dw12_power_mode_get+0x16a>

      case LIS2DW12_SINGLE_LOW_LOW_NOISE_PWR_12bit:
        *val = LIS2DW12_SINGLE_LOW_LOW_NOISE_PWR_12bit;
 80046f4:	683b      	ldr	r3, [r7, #0]
 80046f6:	2218      	movs	r2, #24
 80046f8:	701a      	strb	r2, [r3, #0]
        break;
 80046fa:	e004      	b.n	8004706 <lis2dw12_power_mode_get+0x16a>

      default:
        *val = LIS2DW12_HIGH_PERFORMANCE;
 80046fc:	683b      	ldr	r3, [r7, #0]
 80046fe:	2204      	movs	r2, #4
 8004700:	701a      	strb	r2, [r3, #0]
        break;
 8004702:	e000      	b.n	8004706 <lis2dw12_power_mode_get+0x16a>
    }
  }
 8004704:	bf00      	nop

  return ret;
 8004706:	697b      	ldr	r3, [r7, #20]
}
 8004708:	4618      	mov	r0, r3
 800470a:	3718      	adds	r7, #24
 800470c:	46bd      	mov	sp, r7
 800470e:	bd80      	pop	{r7, pc}

08004710 <lis2dw12_data_rate_set>:
  * @param  val      change the values of odr in reg CTRL1
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_data_rate_set(stmdev_ctx_t *ctx, lis2dw12_odr_t val)
{
 8004710:	b580      	push	{r7, lr}
 8004712:	b086      	sub	sp, #24
 8004714:	af00      	add	r7, sp, #0
 8004716:	6078      	str	r0, [r7, #4]
 8004718:	460b      	mov	r3, r1
 800471a:	70fb      	strb	r3, [r7, #3]
  lis2dw12_ctrl1_t ctrl1;
  lis2dw12_ctrl3_t ctrl3;
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL1, (uint8_t *) &ctrl1, 1);
 800471c:	f107 0210 	add.w	r2, r7, #16
 8004720:	2301      	movs	r3, #1
 8004722:	2120      	movs	r1, #32
 8004724:	6878      	ldr	r0, [r7, #4]
 8004726:	f7ff febb 	bl	80044a0 <lis2dw12_read_reg>
 800472a:	6178      	str	r0, [r7, #20]

  if (ret == 0)
 800472c:	697b      	ldr	r3, [r7, #20]
 800472e:	2b00      	cmp	r3, #0
 8004730:	d10f      	bne.n	8004752 <lis2dw12_data_rate_set+0x42>
  {
    ctrl1.odr = (uint8_t) val;
 8004732:	78fb      	ldrb	r3, [r7, #3]
 8004734:	f003 030f 	and.w	r3, r3, #15
 8004738:	b2da      	uxtb	r2, r3
 800473a:	7c3b      	ldrb	r3, [r7, #16]
 800473c:	f362 1307 	bfi	r3, r2, #4, #4
 8004740:	743b      	strb	r3, [r7, #16]
    ret = lis2dw12_write_reg(ctx, LIS2DW12_CTRL1, (uint8_t *) &ctrl1, 1);
 8004742:	f107 0210 	add.w	r2, r7, #16
 8004746:	2301      	movs	r3, #1
 8004748:	2120      	movs	r1, #32
 800474a:	6878      	ldr	r0, [r7, #4]
 800474c:	f7ff fec0 	bl	80044d0 <lis2dw12_write_reg>
 8004750:	6178      	str	r0, [r7, #20]
  }

  if (ret == 0)
 8004752:	697b      	ldr	r3, [r7, #20]
 8004754:	2b00      	cmp	r3, #0
 8004756:	d107      	bne.n	8004768 <lis2dw12_data_rate_set+0x58>
  {
    ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL3, (uint8_t *) &ctrl3, 1);
 8004758:	f107 020c 	add.w	r2, r7, #12
 800475c:	2301      	movs	r3, #1
 800475e:	2122      	movs	r1, #34	; 0x22
 8004760:	6878      	ldr	r0, [r7, #4]
 8004762:	f7ff fe9d 	bl	80044a0 <lis2dw12_read_reg>
 8004766:	6178      	str	r0, [r7, #20]
  }

  if (ret == 0)
 8004768:	697b      	ldr	r3, [r7, #20]
 800476a:	2b00      	cmp	r3, #0
 800476c:	d110      	bne.n	8004790 <lis2dw12_data_rate_set+0x80>
  {
    ctrl3.slp_mode = ((uint8_t) val & 0x30U) >> 4;
 800476e:	78fb      	ldrb	r3, [r7, #3]
 8004770:	091b      	lsrs	r3, r3, #4
 8004772:	f003 0303 	and.w	r3, r3, #3
 8004776:	b2da      	uxtb	r2, r3
 8004778:	7b3b      	ldrb	r3, [r7, #12]
 800477a:	f362 0301 	bfi	r3, r2, #0, #2
 800477e:	733b      	strb	r3, [r7, #12]
    ret = lis2dw12_write_reg(ctx, LIS2DW12_CTRL3, (uint8_t *) &ctrl3, 1);
 8004780:	f107 020c 	add.w	r2, r7, #12
 8004784:	2301      	movs	r3, #1
 8004786:	2122      	movs	r1, #34	; 0x22
 8004788:	6878      	ldr	r0, [r7, #4]
 800478a:	f7ff fea1 	bl	80044d0 <lis2dw12_write_reg>
 800478e:	6178      	str	r0, [r7, #20]
  }

  return ret;
 8004790:	697b      	ldr	r3, [r7, #20]
}
 8004792:	4618      	mov	r0, r3
 8004794:	3718      	adds	r7, #24
 8004796:	46bd      	mov	sp, r7
 8004798:	bd80      	pop	{r7, pc}
	...

0800479c <lis2dw12_data_rate_get>:
  * @param  val      Get the values of odr in reg CTRL1
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_data_rate_get(stmdev_ctx_t *ctx, lis2dw12_odr_t *val)
{
 800479c:	b580      	push	{r7, lr}
 800479e:	b086      	sub	sp, #24
 80047a0:	af00      	add	r7, sp, #0
 80047a2:	6078      	str	r0, [r7, #4]
 80047a4:	6039      	str	r1, [r7, #0]
  lis2dw12_ctrl1_t ctrl1;
  lis2dw12_ctrl3_t ctrl3;
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL1, (uint8_t *) &ctrl1, 1);
 80047a6:	f107 0210 	add.w	r2, r7, #16
 80047aa:	2301      	movs	r3, #1
 80047ac:	2120      	movs	r1, #32
 80047ae:	6878      	ldr	r0, [r7, #4]
 80047b0:	f7ff fe76 	bl	80044a0 <lis2dw12_read_reg>
 80047b4:	6178      	str	r0, [r7, #20]

  if (ret == 0)
 80047b6:	697b      	ldr	r3, [r7, #20]
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	f040 80b3 	bne.w	8004924 <lis2dw12_data_rate_get+0x188>
  {
    ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL3, (uint8_t *) &ctrl3, 1);
 80047be:	f107 020c 	add.w	r2, r7, #12
 80047c2:	2301      	movs	r3, #1
 80047c4:	2122      	movs	r1, #34	; 0x22
 80047c6:	6878      	ldr	r0, [r7, #4]
 80047c8:	f7ff fe6a 	bl	80044a0 <lis2dw12_read_reg>
 80047cc:	6178      	str	r0, [r7, #20]

    switch ((ctrl3.slp_mode << 4) + ctrl1.odr)
 80047ce:	7b3b      	ldrb	r3, [r7, #12]
 80047d0:	f3c3 0301 	ubfx	r3, r3, #0, #2
 80047d4:	b2db      	uxtb	r3, r3
 80047d6:	011b      	lsls	r3, r3, #4
 80047d8:	7c3a      	ldrb	r2, [r7, #16]
 80047da:	f3c2 1203 	ubfx	r2, r2, #4, #4
 80047de:	b2d2      	uxtb	r2, r2
 80047e0:	4413      	add	r3, r2
 80047e2:	2b32      	cmp	r3, #50	; 0x32
 80047e4:	f200 809a 	bhi.w	800491c <lis2dw12_data_rate_get+0x180>
 80047e8:	a201      	add	r2, pc, #4	; (adr r2, 80047f0 <lis2dw12_data_rate_get+0x54>)
 80047ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80047ee:	bf00      	nop
 80047f0:	080048bd 	.word	0x080048bd
 80047f4:	080048c5 	.word	0x080048c5
 80047f8:	080048cd 	.word	0x080048cd
 80047fc:	080048d5 	.word	0x080048d5
 8004800:	080048dd 	.word	0x080048dd
 8004804:	080048e5 	.word	0x080048e5
 8004808:	080048ed 	.word	0x080048ed
 800480c:	080048f5 	.word	0x080048f5
 8004810:	080048fd 	.word	0x080048fd
 8004814:	08004905 	.word	0x08004905
 8004818:	0800491d 	.word	0x0800491d
 800481c:	0800491d 	.word	0x0800491d
 8004820:	0800491d 	.word	0x0800491d
 8004824:	0800491d 	.word	0x0800491d
 8004828:	0800491d 	.word	0x0800491d
 800482c:	0800491d 	.word	0x0800491d
 8004830:	0800491d 	.word	0x0800491d
 8004834:	0800491d 	.word	0x0800491d
 8004838:	08004915 	.word	0x08004915
 800483c:	0800491d 	.word	0x0800491d
 8004840:	0800491d 	.word	0x0800491d
 8004844:	0800491d 	.word	0x0800491d
 8004848:	0800491d 	.word	0x0800491d
 800484c:	0800491d 	.word	0x0800491d
 8004850:	0800491d 	.word	0x0800491d
 8004854:	0800491d 	.word	0x0800491d
 8004858:	0800491d 	.word	0x0800491d
 800485c:	0800491d 	.word	0x0800491d
 8004860:	0800491d 	.word	0x0800491d
 8004864:	0800491d 	.word	0x0800491d
 8004868:	0800491d 	.word	0x0800491d
 800486c:	0800491d 	.word	0x0800491d
 8004870:	0800491d 	.word	0x0800491d
 8004874:	0800491d 	.word	0x0800491d
 8004878:	0800491d 	.word	0x0800491d
 800487c:	0800491d 	.word	0x0800491d
 8004880:	0800491d 	.word	0x0800491d
 8004884:	0800491d 	.word	0x0800491d
 8004888:	0800491d 	.word	0x0800491d
 800488c:	0800491d 	.word	0x0800491d
 8004890:	0800491d 	.word	0x0800491d
 8004894:	0800491d 	.word	0x0800491d
 8004898:	0800491d 	.word	0x0800491d
 800489c:	0800491d 	.word	0x0800491d
 80048a0:	0800491d 	.word	0x0800491d
 80048a4:	0800491d 	.word	0x0800491d
 80048a8:	0800491d 	.word	0x0800491d
 80048ac:	0800491d 	.word	0x0800491d
 80048b0:	0800491d 	.word	0x0800491d
 80048b4:	0800491d 	.word	0x0800491d
 80048b8:	0800490d 	.word	0x0800490d
    {
      case LIS2DW12_XL_ODR_OFF:
        *val = LIS2DW12_XL_ODR_OFF;
 80048bc:	683b      	ldr	r3, [r7, #0]
 80048be:	2200      	movs	r2, #0
 80048c0:	701a      	strb	r2, [r3, #0]
        break;
 80048c2:	e030      	b.n	8004926 <lis2dw12_data_rate_get+0x18a>

      case LIS2DW12_XL_ODR_1Hz6_LP_ONLY:
        *val = LIS2DW12_XL_ODR_1Hz6_LP_ONLY;
 80048c4:	683b      	ldr	r3, [r7, #0]
 80048c6:	2201      	movs	r2, #1
 80048c8:	701a      	strb	r2, [r3, #0]
        break;
 80048ca:	e02c      	b.n	8004926 <lis2dw12_data_rate_get+0x18a>

      case LIS2DW12_XL_ODR_12Hz5:
        *val = LIS2DW12_XL_ODR_12Hz5;
 80048cc:	683b      	ldr	r3, [r7, #0]
 80048ce:	2202      	movs	r2, #2
 80048d0:	701a      	strb	r2, [r3, #0]
        break;
 80048d2:	e028      	b.n	8004926 <lis2dw12_data_rate_get+0x18a>

      case LIS2DW12_XL_ODR_25Hz:
        *val = LIS2DW12_XL_ODR_25Hz;
 80048d4:	683b      	ldr	r3, [r7, #0]
 80048d6:	2203      	movs	r2, #3
 80048d8:	701a      	strb	r2, [r3, #0]
        break;
 80048da:	e024      	b.n	8004926 <lis2dw12_data_rate_get+0x18a>

      case LIS2DW12_XL_ODR_50Hz:
        *val = LIS2DW12_XL_ODR_50Hz;
 80048dc:	683b      	ldr	r3, [r7, #0]
 80048de:	2204      	movs	r2, #4
 80048e0:	701a      	strb	r2, [r3, #0]
        break;
 80048e2:	e020      	b.n	8004926 <lis2dw12_data_rate_get+0x18a>

      case LIS2DW12_XL_ODR_100Hz:
        *val = LIS2DW12_XL_ODR_100Hz;
 80048e4:	683b      	ldr	r3, [r7, #0]
 80048e6:	2205      	movs	r2, #5
 80048e8:	701a      	strb	r2, [r3, #0]
        break;
 80048ea:	e01c      	b.n	8004926 <lis2dw12_data_rate_get+0x18a>

      case LIS2DW12_XL_ODR_200Hz:
        *val = LIS2DW12_XL_ODR_200Hz;
 80048ec:	683b      	ldr	r3, [r7, #0]
 80048ee:	2206      	movs	r2, #6
 80048f0:	701a      	strb	r2, [r3, #0]
        break;
 80048f2:	e018      	b.n	8004926 <lis2dw12_data_rate_get+0x18a>

      case LIS2DW12_XL_ODR_400Hz:
        *val = LIS2DW12_XL_ODR_400Hz;
 80048f4:	683b      	ldr	r3, [r7, #0]
 80048f6:	2207      	movs	r2, #7
 80048f8:	701a      	strb	r2, [r3, #0]
        break;
 80048fa:	e014      	b.n	8004926 <lis2dw12_data_rate_get+0x18a>

      case LIS2DW12_XL_ODR_800Hz:
        *val = LIS2DW12_XL_ODR_800Hz;
 80048fc:	683b      	ldr	r3, [r7, #0]
 80048fe:	2208      	movs	r2, #8
 8004900:	701a      	strb	r2, [r3, #0]
        break;
 8004902:	e010      	b.n	8004926 <lis2dw12_data_rate_get+0x18a>

      case LIS2DW12_XL_ODR_1k6Hz:
        *val = LIS2DW12_XL_ODR_1k6Hz;
 8004904:	683b      	ldr	r3, [r7, #0]
 8004906:	2209      	movs	r2, #9
 8004908:	701a      	strb	r2, [r3, #0]
        break;
 800490a:	e00c      	b.n	8004926 <lis2dw12_data_rate_get+0x18a>

      case LIS2DW12_XL_SET_SW_TRIG:
        *val = LIS2DW12_XL_SET_SW_TRIG;
 800490c:	683b      	ldr	r3, [r7, #0]
 800490e:	2232      	movs	r2, #50	; 0x32
 8004910:	701a      	strb	r2, [r3, #0]
        break;
 8004912:	e008      	b.n	8004926 <lis2dw12_data_rate_get+0x18a>

      case LIS2DW12_XL_SET_PIN_TRIG:
        *val = LIS2DW12_XL_SET_PIN_TRIG;
 8004914:	683b      	ldr	r3, [r7, #0]
 8004916:	2212      	movs	r2, #18
 8004918:	701a      	strb	r2, [r3, #0]
        break;
 800491a:	e004      	b.n	8004926 <lis2dw12_data_rate_get+0x18a>

      default:
        *val = LIS2DW12_XL_ODR_OFF;
 800491c:	683b      	ldr	r3, [r7, #0]
 800491e:	2200      	movs	r2, #0
 8004920:	701a      	strb	r2, [r3, #0]
        break;
 8004922:	e000      	b.n	8004926 <lis2dw12_data_rate_get+0x18a>
    }
  }
 8004924:	bf00      	nop

  return ret;
 8004926:	697b      	ldr	r3, [r7, #20]
}
 8004928:	4618      	mov	r0, r3
 800492a:	3718      	adds	r7, #24
 800492c:	46bd      	mov	sp, r7
 800492e:	bd80      	pop	{r7, pc}

08004930 <lis2dw12_block_data_update_set>:
  * @param  val      change the values of bdu in reg CTRL2
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8004930:	b580      	push	{r7, lr}
 8004932:	b084      	sub	sp, #16
 8004934:	af00      	add	r7, sp, #0
 8004936:	6078      	str	r0, [r7, #4]
 8004938:	460b      	mov	r3, r1
 800493a:	70fb      	strb	r3, [r7, #3]
  lis2dw12_ctrl2_t reg;
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL2, (uint8_t *) &reg, 1);
 800493c:	f107 0208 	add.w	r2, r7, #8
 8004940:	2301      	movs	r3, #1
 8004942:	2121      	movs	r1, #33	; 0x21
 8004944:	6878      	ldr	r0, [r7, #4]
 8004946:	f7ff fdab 	bl	80044a0 <lis2dw12_read_reg>
 800494a:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	2b00      	cmp	r3, #0
 8004950:	d10f      	bne.n	8004972 <lis2dw12_block_data_update_set+0x42>
  {
    reg.bdu = val;
 8004952:	78fb      	ldrb	r3, [r7, #3]
 8004954:	f003 0301 	and.w	r3, r3, #1
 8004958:	b2da      	uxtb	r2, r3
 800495a:	7a3b      	ldrb	r3, [r7, #8]
 800495c:	f362 03c3 	bfi	r3, r2, #3, #1
 8004960:	723b      	strb	r3, [r7, #8]
    ret = lis2dw12_write_reg(ctx, LIS2DW12_CTRL2, (uint8_t *) &reg, 1);
 8004962:	f107 0208 	add.w	r2, r7, #8
 8004966:	2301      	movs	r3, #1
 8004968:	2121      	movs	r1, #33	; 0x21
 800496a:	6878      	ldr	r0, [r7, #4]
 800496c:	f7ff fdb0 	bl	80044d0 <lis2dw12_write_reg>
 8004970:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8004972:	68fb      	ldr	r3, [r7, #12]
}
 8004974:	4618      	mov	r0, r3
 8004976:	3710      	adds	r7, #16
 8004978:	46bd      	mov	sp, r7
 800497a:	bd80      	pop	{r7, pc}

0800497c <lis2dw12_full_scale_set>:
  * @param  val      change the values of fs in reg CTRL6
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_full_scale_set(stmdev_ctx_t *ctx, lis2dw12_fs_t val)
{
 800497c:	b580      	push	{r7, lr}
 800497e:	b084      	sub	sp, #16
 8004980:	af00      	add	r7, sp, #0
 8004982:	6078      	str	r0, [r7, #4]
 8004984:	460b      	mov	r3, r1
 8004986:	70fb      	strb	r3, [r7, #3]
  lis2dw12_ctrl6_t reg;
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL6, (uint8_t *) &reg, 1);
 8004988:	f107 0208 	add.w	r2, r7, #8
 800498c:	2301      	movs	r3, #1
 800498e:	2125      	movs	r1, #37	; 0x25
 8004990:	6878      	ldr	r0, [r7, #4]
 8004992:	f7ff fd85 	bl	80044a0 <lis2dw12_read_reg>
 8004996:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	2b00      	cmp	r3, #0
 800499c:	d10f      	bne.n	80049be <lis2dw12_full_scale_set+0x42>
  {
    reg.fs = (uint8_t) val;
 800499e:	78fb      	ldrb	r3, [r7, #3]
 80049a0:	f003 0303 	and.w	r3, r3, #3
 80049a4:	b2da      	uxtb	r2, r3
 80049a6:	7a3b      	ldrb	r3, [r7, #8]
 80049a8:	f362 1305 	bfi	r3, r2, #4, #2
 80049ac:	723b      	strb	r3, [r7, #8]
    ret = lis2dw12_write_reg(ctx, LIS2DW12_CTRL6, (uint8_t *) &reg, 1);
 80049ae:	f107 0208 	add.w	r2, r7, #8
 80049b2:	2301      	movs	r3, #1
 80049b4:	2125      	movs	r1, #37	; 0x25
 80049b6:	6878      	ldr	r0, [r7, #4]
 80049b8:	f7ff fd8a 	bl	80044d0 <lis2dw12_write_reg>
 80049bc:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80049be:	68fb      	ldr	r3, [r7, #12]
}
 80049c0:	4618      	mov	r0, r3
 80049c2:	3710      	adds	r7, #16
 80049c4:	46bd      	mov	sp, r7
 80049c6:	bd80      	pop	{r7, pc}

080049c8 <lis2dw12_full_scale_get>:
  * @param  val      Get the values of fs in reg CTRL6
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_full_scale_get(stmdev_ctx_t *ctx, lis2dw12_fs_t *val)
{
 80049c8:	b580      	push	{r7, lr}
 80049ca:	b084      	sub	sp, #16
 80049cc:	af00      	add	r7, sp, #0
 80049ce:	6078      	str	r0, [r7, #4]
 80049d0:	6039      	str	r1, [r7, #0]
  lis2dw12_ctrl6_t reg;
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL6, (uint8_t *) &reg, 1);
 80049d2:	f107 0208 	add.w	r2, r7, #8
 80049d6:	2301      	movs	r3, #1
 80049d8:	2125      	movs	r1, #37	; 0x25
 80049da:	6878      	ldr	r0, [r7, #4]
 80049dc:	f7ff fd60 	bl	80044a0 <lis2dw12_read_reg>
 80049e0:	60f8      	str	r0, [r7, #12]

  switch (reg.fs)
 80049e2:	7a3b      	ldrb	r3, [r7, #8]
 80049e4:	f3c3 1301 	ubfx	r3, r3, #4, #2
 80049e8:	b2db      	uxtb	r3, r3
 80049ea:	2b03      	cmp	r3, #3
 80049ec:	d81a      	bhi.n	8004a24 <lis2dw12_full_scale_get+0x5c>
 80049ee:	a201      	add	r2, pc, #4	; (adr r2, 80049f4 <lis2dw12_full_scale_get+0x2c>)
 80049f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80049f4:	08004a05 	.word	0x08004a05
 80049f8:	08004a0d 	.word	0x08004a0d
 80049fc:	08004a15 	.word	0x08004a15
 8004a00:	08004a1d 	.word	0x08004a1d
  {
    case LIS2DW12_2g:
      *val = LIS2DW12_2g;
 8004a04:	683b      	ldr	r3, [r7, #0]
 8004a06:	2200      	movs	r2, #0
 8004a08:	701a      	strb	r2, [r3, #0]
      break;
 8004a0a:	e00f      	b.n	8004a2c <lis2dw12_full_scale_get+0x64>

    case LIS2DW12_4g:
      *val = LIS2DW12_4g;
 8004a0c:	683b      	ldr	r3, [r7, #0]
 8004a0e:	2201      	movs	r2, #1
 8004a10:	701a      	strb	r2, [r3, #0]
      break;
 8004a12:	e00b      	b.n	8004a2c <lis2dw12_full_scale_get+0x64>

    case LIS2DW12_8g:
      *val = LIS2DW12_8g;
 8004a14:	683b      	ldr	r3, [r7, #0]
 8004a16:	2202      	movs	r2, #2
 8004a18:	701a      	strb	r2, [r3, #0]
      break;
 8004a1a:	e007      	b.n	8004a2c <lis2dw12_full_scale_get+0x64>

    case LIS2DW12_16g:
      *val = LIS2DW12_16g;
 8004a1c:	683b      	ldr	r3, [r7, #0]
 8004a1e:	2203      	movs	r2, #3
 8004a20:	701a      	strb	r2, [r3, #0]
      break;
 8004a22:	e003      	b.n	8004a2c <lis2dw12_full_scale_get+0x64>

    default:
      *val = LIS2DW12_2g;
 8004a24:	683b      	ldr	r3, [r7, #0]
 8004a26:	2200      	movs	r2, #0
 8004a28:	701a      	strb	r2, [r3, #0]
      break;
 8004a2a:	bf00      	nop
  }

  return ret;
 8004a2c:	68fb      	ldr	r3, [r7, #12]
}
 8004a2e:	4618      	mov	r0, r3
 8004a30:	3710      	adds	r7, #16
 8004a32:	46bd      	mov	sp, r7
 8004a34:	bd80      	pop	{r7, pc}
 8004a36:	bf00      	nop

08004a38 <lis2dw12_acceleration_raw_get>:
  * @param  val      buffer that stores data read
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_acceleration_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 8004a38:	b580      	push	{r7, lr}
 8004a3a:	b086      	sub	sp, #24
 8004a3c:	af00      	add	r7, sp, #0
 8004a3e:	6078      	str	r0, [r7, #4]
 8004a40:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_OUT_X_L, buff, 6);
 8004a42:	f107 020c 	add.w	r2, r7, #12
 8004a46:	2306      	movs	r3, #6
 8004a48:	2128      	movs	r1, #40	; 0x28
 8004a4a:	6878      	ldr	r0, [r7, #4]
 8004a4c:	f7ff fd28 	bl	80044a0 <lis2dw12_read_reg>
 8004a50:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 8004a52:	7b7b      	ldrb	r3, [r7, #13]
 8004a54:	b21a      	sxth	r2, r3
 8004a56:	683b      	ldr	r3, [r7, #0]
 8004a58:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 8004a5a:	683b      	ldr	r3, [r7, #0]
 8004a5c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004a60:	b29b      	uxth	r3, r3
 8004a62:	021b      	lsls	r3, r3, #8
 8004a64:	b29a      	uxth	r2, r3
 8004a66:	7b3b      	ldrb	r3, [r7, #12]
 8004a68:	b29b      	uxth	r3, r3
 8004a6a:	4413      	add	r3, r2
 8004a6c:	b29b      	uxth	r3, r3
 8004a6e:	b21a      	sxth	r2, r3
 8004a70:	683b      	ldr	r3, [r7, #0]
 8004a72:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 8004a74:	7bfa      	ldrb	r2, [r7, #15]
 8004a76:	683b      	ldr	r3, [r7, #0]
 8004a78:	3302      	adds	r3, #2
 8004a7a:	b212      	sxth	r2, r2
 8004a7c:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 8004a7e:	683b      	ldr	r3, [r7, #0]
 8004a80:	3302      	adds	r3, #2
 8004a82:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004a86:	b29b      	uxth	r3, r3
 8004a88:	021b      	lsls	r3, r3, #8
 8004a8a:	b29a      	uxth	r2, r3
 8004a8c:	7bbb      	ldrb	r3, [r7, #14]
 8004a8e:	b29b      	uxth	r3, r3
 8004a90:	4413      	add	r3, r2
 8004a92:	b29a      	uxth	r2, r3
 8004a94:	683b      	ldr	r3, [r7, #0]
 8004a96:	3302      	adds	r3, #2
 8004a98:	b212      	sxth	r2, r2
 8004a9a:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 8004a9c:	7c7a      	ldrb	r2, [r7, #17]
 8004a9e:	683b      	ldr	r3, [r7, #0]
 8004aa0:	3304      	adds	r3, #4
 8004aa2:	b212      	sxth	r2, r2
 8004aa4:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 8004aa6:	683b      	ldr	r3, [r7, #0]
 8004aa8:	3304      	adds	r3, #4
 8004aaa:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004aae:	b29b      	uxth	r3, r3
 8004ab0:	021b      	lsls	r3, r3, #8
 8004ab2:	b29a      	uxth	r2, r3
 8004ab4:	7c3b      	ldrb	r3, [r7, #16]
 8004ab6:	b29b      	uxth	r3, r3
 8004ab8:	4413      	add	r3, r2
 8004aba:	b29a      	uxth	r2, r3
 8004abc:	683b      	ldr	r3, [r7, #0]
 8004abe:	3304      	adds	r3, #4
 8004ac0:	b212      	sxth	r2, r2
 8004ac2:	801a      	strh	r2, [r3, #0]

  return ret;
 8004ac4:	697b      	ldr	r3, [r7, #20]
}
 8004ac6:	4618      	mov	r0, r3
 8004ac8:	3718      	adds	r7, #24
 8004aca:	46bd      	mov	sp, r7
 8004acc:	bd80      	pop	{r7, pc}

08004ace <lis2dw12_device_id_get>:
  * @param  buff     buffer that stores data read
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 8004ace:	b580      	push	{r7, lr}
 8004ad0:	b084      	sub	sp, #16
 8004ad2:	af00      	add	r7, sp, #0
 8004ad4:	6078      	str	r0, [r7, #4]
 8004ad6:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_WHO_AM_I, buff, 1);
 8004ad8:	2301      	movs	r3, #1
 8004ada:	683a      	ldr	r2, [r7, #0]
 8004adc:	210f      	movs	r1, #15
 8004ade:	6878      	ldr	r0, [r7, #4]
 8004ae0:	f7ff fcde 	bl	80044a0 <lis2dw12_read_reg>
 8004ae4:	60f8      	str	r0, [r7, #12]

  return ret;
 8004ae6:	68fb      	ldr	r3, [r7, #12]
}
 8004ae8:	4618      	mov	r0, r3
 8004aea:	3710      	adds	r7, #16
 8004aec:	46bd      	mov	sp, r7
 8004aee:	bd80      	pop	{r7, pc}

08004af0 <lis2dw12_auto_increment_set>:
  * @param  val      change the values of if_add_inc in reg CTRL2
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_auto_increment_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8004af0:	b580      	push	{r7, lr}
 8004af2:	b084      	sub	sp, #16
 8004af4:	af00      	add	r7, sp, #0
 8004af6:	6078      	str	r0, [r7, #4]
 8004af8:	460b      	mov	r3, r1
 8004afa:	70fb      	strb	r3, [r7, #3]
  lis2dw12_ctrl2_t reg;
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL2, (uint8_t *) &reg, 1);
 8004afc:	f107 0208 	add.w	r2, r7, #8
 8004b00:	2301      	movs	r3, #1
 8004b02:	2121      	movs	r1, #33	; 0x21
 8004b04:	6878      	ldr	r0, [r7, #4]
 8004b06:	f7ff fccb 	bl	80044a0 <lis2dw12_read_reg>
 8004b0a:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	d10f      	bne.n	8004b32 <lis2dw12_auto_increment_set+0x42>
  {
    reg.if_add_inc = val;
 8004b12:	78fb      	ldrb	r3, [r7, #3]
 8004b14:	f003 0301 	and.w	r3, r3, #1
 8004b18:	b2da      	uxtb	r2, r3
 8004b1a:	7a3b      	ldrb	r3, [r7, #8]
 8004b1c:	f362 0382 	bfi	r3, r2, #2, #1
 8004b20:	723b      	strb	r3, [r7, #8]
    ret = lis2dw12_write_reg(ctx, LIS2DW12_CTRL2, (uint8_t *) &reg, 1);
 8004b22:	f107 0208 	add.w	r2, r7, #8
 8004b26:	2301      	movs	r3, #1
 8004b28:	2121      	movs	r1, #33	; 0x21
 8004b2a:	6878      	ldr	r0, [r7, #4]
 8004b2c:	f7ff fcd0 	bl	80044d0 <lis2dw12_write_reg>
 8004b30:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8004b32:	68fb      	ldr	r3, [r7, #12]
}
 8004b34:	4618      	mov	r0, r3
 8004b36:	3710      	adds	r7, #16
 8004b38:	46bd      	mov	sp, r7
 8004b3a:	bd80      	pop	{r7, pc}

08004b3c <lis2dw12_fifo_mode_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_fifo_mode_set(stmdev_ctx_t *ctx,
                               lis2dw12_fmode_t val)
{
 8004b3c:	b580      	push	{r7, lr}
 8004b3e:	b084      	sub	sp, #16
 8004b40:	af00      	add	r7, sp, #0
 8004b42:	6078      	str	r0, [r7, #4]
 8004b44:	460b      	mov	r3, r1
 8004b46:	70fb      	strb	r3, [r7, #3]
  lis2dw12_fifo_ctrl_t reg;
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_FIFO_CTRL, (uint8_t *) &reg, 1);
 8004b48:	f107 0208 	add.w	r2, r7, #8
 8004b4c:	2301      	movs	r3, #1
 8004b4e:	212e      	movs	r1, #46	; 0x2e
 8004b50:	6878      	ldr	r0, [r7, #4]
 8004b52:	f7ff fca5 	bl	80044a0 <lis2dw12_read_reg>
 8004b56:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d10f      	bne.n	8004b7e <lis2dw12_fifo_mode_set+0x42>
  {
    reg.fmode = (uint8_t) val;
 8004b5e:	78fb      	ldrb	r3, [r7, #3]
 8004b60:	f003 0307 	and.w	r3, r3, #7
 8004b64:	b2da      	uxtb	r2, r3
 8004b66:	7a3b      	ldrb	r3, [r7, #8]
 8004b68:	f362 1347 	bfi	r3, r2, #5, #3
 8004b6c:	723b      	strb	r3, [r7, #8]
    ret = lis2dw12_write_reg(ctx, LIS2DW12_FIFO_CTRL, (uint8_t *) &reg, 1);
 8004b6e:	f107 0208 	add.w	r2, r7, #8
 8004b72:	2301      	movs	r3, #1
 8004b74:	212e      	movs	r1, #46	; 0x2e
 8004b76:	6878      	ldr	r0, [r7, #4]
 8004b78:	f7ff fcaa 	bl	80044d0 <lis2dw12_write_reg>
 8004b7c:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8004b7e:	68fb      	ldr	r3, [r7, #12]
}
 8004b80:	4618      	mov	r0, r3
 8004b82:	3710      	adds	r7, #16
 8004b84:	46bd      	mov	sp, r7
 8004b86:	bd80      	pop	{r7, pc}

08004b88 <LIS2MDL_RegisterBusIO>:
  * @brief  Register Component Bus IO operations
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_RegisterBusIO(LIS2MDL_Object_t *pObj, LIS2MDL_IO_t *pIO)
{
 8004b88:	b580      	push	{r7, lr}
 8004b8a:	b084      	sub	sp, #16
 8004b8c:	af00      	add	r7, sp, #0
 8004b8e:	6078      	str	r0, [r7, #4]
 8004b90:	6039      	str	r1, [r7, #0]
  int32_t ret = LIS2MDL_OK;
 8004b92:	2300      	movs	r3, #0
 8004b94:	60fb      	str	r3, [r7, #12]

  if (pObj == NULL)
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	d103      	bne.n	8004ba4 <LIS2MDL_RegisterBusIO+0x1c>
  {
    ret = LIS2MDL_ERROR;
 8004b9c:	f04f 33ff 	mov.w	r3, #4294967295
 8004ba0:	60fb      	str	r3, [r7, #12]
 8004ba2:	e067      	b.n	8004c74 <LIS2MDL_RegisterBusIO+0xec>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 8004ba4:	683b      	ldr	r3, [r7, #0]
 8004ba6:	681a      	ldr	r2, [r3, #0]
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 8004bac:	683b      	ldr	r3, [r7, #0]
 8004bae:	685a      	ldr	r2, [r3, #4]
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	605a      	str	r2, [r3, #4]
    pObj->IO.BusType   = pIO->BusType;
 8004bb4:	683b      	ldr	r3, [r7, #0]
 8004bb6:	689a      	ldr	r2, [r3, #8]
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	609a      	str	r2, [r3, #8]
    pObj->IO.Address   = pIO->Address;
 8004bbc:	683b      	ldr	r3, [r7, #0]
 8004bbe:	7b1a      	ldrb	r2, [r3, #12]
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	731a      	strb	r2, [r3, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 8004bc4:	683b      	ldr	r3, [r7, #0]
 8004bc6:	691a      	ldr	r2, [r3, #16]
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	611a      	str	r2, [r3, #16]
    pObj->IO.ReadReg   = pIO->ReadReg;
 8004bcc:	683b      	ldr	r3, [r7, #0]
 8004bce:	695a      	ldr	r2, [r3, #20]
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	615a      	str	r2, [r3, #20]
    pObj->IO.GetTick   = pIO->GetTick;
 8004bd4:	683b      	ldr	r3, [r7, #0]
 8004bd6:	699a      	ldr	r2, [r3, #24]
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	619a      	str	r2, [r3, #24]

    pObj->Ctx.read_reg  = ReadMagRegWrap;
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	4a28      	ldr	r2, [pc, #160]	; (8004c80 <LIS2MDL_RegisterBusIO+0xf8>)
 8004be0:	625a      	str	r2, [r3, #36]	; 0x24
    pObj->Ctx.write_reg = WriteMagRegWrap;
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	4a27      	ldr	r2, [pc, #156]	; (8004c84 <LIS2MDL_RegisterBusIO+0xfc>)
 8004be6:	621a      	str	r2, [r3, #32]
    pObj->Ctx.mdelay    = pIO->Delay;
 8004be8:	683b      	ldr	r3, [r7, #0]
 8004bea:	69da      	ldr	r2, [r3, #28]
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	629a      	str	r2, [r3, #40]	; 0x28
    pObj->Ctx.handle    = pObj;
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	687a      	ldr	r2, [r7, #4]
 8004bf4:	62da      	str	r2, [r3, #44]	; 0x2c

    if (pObj->IO.Init == NULL)
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d103      	bne.n	8004c06 <LIS2MDL_RegisterBusIO+0x7e>
    {
      ret = LIS2MDL_ERROR;
 8004bfe:	f04f 33ff 	mov.w	r3, #4294967295
 8004c02:	60fb      	str	r3, [r7, #12]
 8004c04:	e036      	b.n	8004c74 <LIS2MDL_RegisterBusIO+0xec>
    }
    else if (pObj->IO.Init() != LIS2MDL_OK)
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	4798      	blx	r3
 8004c0c:	4603      	mov	r3, r0
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d003      	beq.n	8004c1a <LIS2MDL_RegisterBusIO+0x92>
    {
      ret = LIS2MDL_ERROR;
 8004c12:	f04f 33ff 	mov.w	r3, #4294967295
 8004c16:	60fb      	str	r3, [r7, #12]
 8004c18:	e02c      	b.n	8004c74 <LIS2MDL_RegisterBusIO+0xec>
    }
    else
    {
      if (pObj->IO.BusType != LIS2MDL_I2C_BUS) /* If the bus type is not I2C */
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	689b      	ldr	r3, [r3, #8]
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d028      	beq.n	8004c74 <LIS2MDL_RegisterBusIO+0xec>
      {
        /* Disable I2C interface support and enable eventually SPI 4-Wires only the first time */
        if (pObj->is_initialized == 0U)
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	d123      	bne.n	8004c74 <LIS2MDL_RegisterBusIO+0xec>
        {
          if (pObj->IO.BusType == LIS2MDL_SPI_4WIRES_BUS) /* SPI 4-Wires */
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	689b      	ldr	r3, [r3, #8]
 8004c30:	2b01      	cmp	r3, #1
 8004c32:	d10d      	bne.n	8004c50 <LIS2MDL_RegisterBusIO+0xc8>
          {
            /* Enable SPI 4-Wires and disable I2C support on the component */
            uint8_t data = 0x34;
 8004c34:	2334      	movs	r3, #52	; 0x34
 8004c36:	72fb      	strb	r3, [r7, #11]

            if (LIS2MDL_Write_Reg(pObj, LIS2MDL_CFG_REG_C, data) != LIS2MDL_OK)
 8004c38:	7afb      	ldrb	r3, [r7, #11]
 8004c3a:	461a      	mov	r2, r3
 8004c3c:	2162      	movs	r1, #98	; 0x62
 8004c3e:	6878      	ldr	r0, [r7, #4]
 8004c40:	f000 fb1b 	bl	800527a <LIS2MDL_Write_Reg>
 8004c44:	4603      	mov	r3, r0
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d014      	beq.n	8004c74 <LIS2MDL_RegisterBusIO+0xec>
            {
              return LIS2MDL_ERROR;
 8004c4a:	f04f 33ff 	mov.w	r3, #4294967295
 8004c4e:	e012      	b.n	8004c76 <LIS2MDL_RegisterBusIO+0xee>
            }
          }
          else if (pObj->IO.BusType == LSM6DSOX_SENSORHUB_LIS2MDL_I2C_BUS) /* LSM6DSOX SensorHub with LIS2MDL example */
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	689b      	ldr	r3, [r3, #8]
 8004c54:	2b03      	cmp	r3, #3
 8004c56:	d101      	bne.n	8004c5c <LIS2MDL_RegisterBusIO+0xd4>
          {
            /* Do nothing, just keep I2C support on the component */
            return ret;
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	e00c      	b.n	8004c76 <LIS2MDL_RegisterBusIO+0xee>
          }
          else
          {
            /* Disable I2C interface on the component */
            if (lis2mdl_i2c_interface_set(&(pObj->Ctx), LIS2MDL_I2C_DISABLE) != LIS2MDL_OK)
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	3320      	adds	r3, #32
 8004c60:	2101      	movs	r1, #1
 8004c62:	4618      	mov	r0, r3
 8004c64:	f000 ff70 	bl	8005b48 <lis2mdl_i2c_interface_set>
 8004c68:	4603      	mov	r3, r0
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d002      	beq.n	8004c74 <LIS2MDL_RegisterBusIO+0xec>
            {
              return LIS2MDL_ERROR;
 8004c6e:	f04f 33ff 	mov.w	r3, #4294967295
 8004c72:	e000      	b.n	8004c76 <LIS2MDL_RegisterBusIO+0xee>
        }
      }
    }
  }

  return ret;
 8004c74:	68fb      	ldr	r3, [r7, #12]
}
 8004c76:	4618      	mov	r0, r3
 8004c78:	3710      	adds	r7, #16
 8004c7a:	46bd      	mov	sp, r7
 8004c7c:	bd80      	pop	{r7, pc}
 8004c7e:	bf00      	nop
 8004c80:	080052d1 	.word	0x080052d1
 8004c84:	08005353 	.word	0x08005353

08004c88 <LIS2MDL_Init>:
  * @brief  Initialize the LIS2MDL sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_Init(LIS2MDL_Object_t *pObj)
{
 8004c88:	b580      	push	{r7, lr}
 8004c8a:	b084      	sub	sp, #16
 8004c8c:	af00      	add	r7, sp, #0
 8004c8e:	6078      	str	r0, [r7, #4]
  lis2mdl_cfg_reg_a_t reg_a;
  lis2mdl_cfg_reg_c_t reg_c;

  if (pObj->IO.BusType == LSM6DSOX_SENSORHUB_LIS2MDL_I2C_BUS) /* LSM6DSOX SensorHub with LIS2MDL example */
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	689b      	ldr	r3, [r3, #8]
 8004c94:	2b03      	cmp	r3, #3
 8004c96:	d144      	bne.n	8004d22 <LIS2MDL_Init+0x9a>
  {
    /* Read configuration from CFG_REG_C & CFG_REG_A regs */
    if (LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData(pObj, LIS2MDL_CFG_REG_C, (uint8_t *)&reg_c, 1) != LIS2MDL_OK)
 8004c98:	f107 0208 	add.w	r2, r7, #8
 8004c9c:	2301      	movs	r3, #1
 8004c9e:	2162      	movs	r1, #98	; 0x62
 8004ca0:	6878      	ldr	r0, [r7, #4]
 8004ca2:	f000 fb97 	bl	80053d4 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData>
 8004ca6:	4603      	mov	r3, r0
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	d002      	beq.n	8004cb2 <LIS2MDL_Init+0x2a>
    {
      return LIS2MDL_ERROR;
 8004cac:	f04f 33ff 	mov.w	r3, #4294967295
 8004cb0:	e06c      	b.n	8004d8c <LIS2MDL_Init+0x104>
    }
    if (LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData(pObj, LIS2MDL_CFG_REG_A, (uint8_t *)&reg_a, 1) != LIS2MDL_OK)
 8004cb2:	f107 020c 	add.w	r2, r7, #12
 8004cb6:	2301      	movs	r3, #1
 8004cb8:	2160      	movs	r1, #96	; 0x60
 8004cba:	6878      	ldr	r0, [r7, #4]
 8004cbc:	f000 fb8a 	bl	80053d4 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData>
 8004cc0:	4603      	mov	r3, r0
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d002      	beq.n	8004ccc <LIS2MDL_Init+0x44>
    {
      return LIS2MDL_ERROR;
 8004cc6:	f04f 33ff 	mov.w	r3, #4294967295
 8004cca:	e05f      	b.n	8004d8c <LIS2MDL_Init+0x104>
    }

    /* Enable BDU */
    reg_c.bdu = PROPERTY_ENABLE;
 8004ccc:	7a3b      	ldrb	r3, [r7, #8]
 8004cce:	f043 0310 	orr.w	r3, r3, #16
 8004cd2:	723b      	strb	r3, [r7, #8]

    /* Self Test disabled. */
    reg_c.self_test = PROPERTY_DISABLE;
 8004cd4:	7a3b      	ldrb	r3, [r7, #8]
 8004cd6:	f36f 0341 	bfc	r3, #1, #1
 8004cda:	723b      	strb	r3, [r7, #8]

    /* Operating mode selection - power down */
    reg_a.md = LIS2MDL_POWER_DOWN;
 8004cdc:	7b3b      	ldrb	r3, [r7, #12]
 8004cde:	2202      	movs	r2, #2
 8004ce0:	f362 0301 	bfi	r3, r2, #0, #2
 8004ce4:	733b      	strb	r3, [r7, #12]

    /* Output data rate selection */
    reg_a.odr = LIS2MDL_ODR_100Hz;
 8004ce6:	7b3b      	ldrb	r3, [r7, #12]
 8004ce8:	f043 030c 	orr.w	r3, r3, #12
 8004cec:	733b      	strb	r3, [r7, #12]

    /* Write configuration to CFG_REG_C & CFG_REG_A regs */
    if (LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData(pObj, LIS2MDL_CFG_REG_C, (uint8_t *)&reg_c, 1) != LIS2MDL_OK)
 8004cee:	f107 0208 	add.w	r2, r7, #8
 8004cf2:	2301      	movs	r3, #1
 8004cf4:	2162      	movs	r1, #98	; 0x62
 8004cf6:	6878      	ldr	r0, [r7, #4]
 8004cf8:	f000 fcab 	bl	8005652 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData>
 8004cfc:	4603      	mov	r3, r0
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d002      	beq.n	8004d08 <LIS2MDL_Init+0x80>
    {
      return LIS2MDL_ERROR;
 8004d02:	f04f 33ff 	mov.w	r3, #4294967295
 8004d06:	e041      	b.n	8004d8c <LIS2MDL_Init+0x104>
    }
    if (LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData(pObj, LIS2MDL_CFG_REG_A, (uint8_t *)&reg_a, 1) != LIS2MDL_OK)
 8004d08:	f107 020c 	add.w	r2, r7, #12
 8004d0c:	2301      	movs	r3, #1
 8004d0e:	2160      	movs	r1, #96	; 0x60
 8004d10:	6878      	ldr	r0, [r7, #4]
 8004d12:	f000 fc9e 	bl	8005652 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData>
 8004d16:	4603      	mov	r3, r0
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	d032      	beq.n	8004d82 <LIS2MDL_Init+0xfa>
    {
      return LIS2MDL_ERROR;
 8004d1c:	f04f 33ff 	mov.w	r3, #4294967295
 8004d20:	e034      	b.n	8004d8c <LIS2MDL_Init+0x104>
    }
  }
  else
  {
    /* Enable BDU */
    if (lis2mdl_block_data_update_set(&(pObj->Ctx), PROPERTY_ENABLE) != LIS2MDL_OK)
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	3320      	adds	r3, #32
 8004d26:	2101      	movs	r1, #1
 8004d28:	4618      	mov	r0, r3
 8004d2a:	f000 fe65 	bl	80059f8 <lis2mdl_block_data_update_set>
 8004d2e:	4603      	mov	r3, r0
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	d002      	beq.n	8004d3a <LIS2MDL_Init+0xb2>
    {
      return LIS2MDL_ERROR;
 8004d34:	f04f 33ff 	mov.w	r3, #4294967295
 8004d38:	e028      	b.n	8004d8c <LIS2MDL_Init+0x104>
    }

    /* Operating mode selection - power down */
    if (lis2mdl_operating_mode_set(&(pObj->Ctx), LIS2MDL_POWER_DOWN) != LIS2MDL_OK)
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	3320      	adds	r3, #32
 8004d3e:	2102      	movs	r1, #2
 8004d40:	4618      	mov	r0, r3
 8004d42:	f000 fdd4 	bl	80058ee <lis2mdl_operating_mode_set>
 8004d46:	4603      	mov	r3, r0
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	d002      	beq.n	8004d52 <LIS2MDL_Init+0xca>
    {
      return LIS2MDL_ERROR;
 8004d4c:	f04f 33ff 	mov.w	r3, #4294967295
 8004d50:	e01c      	b.n	8004d8c <LIS2MDL_Init+0x104>
    }

    /* Output data rate selection */
    if (lis2mdl_data_rate_set(&(pObj->Ctx), LIS2MDL_ODR_100Hz) != LIS2MDL_OK)
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	3320      	adds	r3, #32
 8004d56:	2103      	movs	r1, #3
 8004d58:	4618      	mov	r0, r3
 8004d5a:	f000 fdee 	bl	800593a <lis2mdl_data_rate_set>
 8004d5e:	4603      	mov	r3, r0
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	d002      	beq.n	8004d6a <LIS2MDL_Init+0xe2>
    {
      return LIS2MDL_ERROR;
 8004d64:	f04f 33ff 	mov.w	r3, #4294967295
 8004d68:	e010      	b.n	8004d8c <LIS2MDL_Init+0x104>
    }

    /* Self Test disabled. */
    if (lis2mdl_self_test_set(&(pObj->Ctx), PROPERTY_DISABLE) != LIS2MDL_OK)
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	3320      	adds	r3, #32
 8004d6e:	2100      	movs	r1, #0
 8004d70:	4618      	mov	r0, r3
 8004d72:	f000 fec3 	bl	8005afc <lis2mdl_self_test_set>
 8004d76:	4603      	mov	r3, r0
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	d002      	beq.n	8004d82 <LIS2MDL_Init+0xfa>
    {
      return LIS2MDL_ERROR;
 8004d7c:	f04f 33ff 	mov.w	r3, #4294967295
 8004d80:	e004      	b.n	8004d8c <LIS2MDL_Init+0x104>
    }
  }

  pObj->is_initialized = 1;
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	2201      	movs	r2, #1
 8004d86:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return LIS2MDL_OK;
 8004d8a:	2300      	movs	r3, #0
}
 8004d8c:	4618      	mov	r0, r3
 8004d8e:	3710      	adds	r7, #16
 8004d90:	46bd      	mov	sp, r7
 8004d92:	bd80      	pop	{r7, pc}

08004d94 <LIS2MDL_DeInit>:
  * @brief  Deinitialize the LIS2MDL magnetometer sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_DeInit(LIS2MDL_Object_t *pObj)
{
 8004d94:	b580      	push	{r7, lr}
 8004d96:	b082      	sub	sp, #8
 8004d98:	af00      	add	r7, sp, #0
 8004d9a:	6078      	str	r0, [r7, #4]
  /* Disable the component */
  if (LIS2MDL_MAG_Disable(pObj) != LIS2MDL_OK)
 8004d9c:	6878      	ldr	r0, [r7, #4]
 8004d9e:	f000 f8a5 	bl	8004eec <LIS2MDL_MAG_Disable>
 8004da2:	4603      	mov	r3, r0
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	d002      	beq.n	8004dae <LIS2MDL_DeInit+0x1a>
  {
    return LIS2MDL_ERROR;
 8004da8:	f04f 33ff 	mov.w	r3, #4294967295
 8004dac:	e004      	b.n	8004db8 <LIS2MDL_DeInit+0x24>
  }

  pObj->is_initialized = 0;
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	2200      	movs	r2, #0
 8004db2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return LIS2MDL_OK;
 8004db6:	2300      	movs	r3, #0
}
 8004db8:	4618      	mov	r0, r3
 8004dba:	3708      	adds	r7, #8
 8004dbc:	46bd      	mov	sp, r7
 8004dbe:	bd80      	pop	{r7, pc}

08004dc0 <LIS2MDL_ReadID>:
  * @param  pObj the device pObj
  * @param  Id the WHO_AM_I value
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_ReadID(LIS2MDL_Object_t *pObj, uint8_t *Id)
{
 8004dc0:	b580      	push	{r7, lr}
 8004dc2:	b082      	sub	sp, #8
 8004dc4:	af00      	add	r7, sp, #0
 8004dc6:	6078      	str	r0, [r7, #4]
 8004dc8:	6039      	str	r1, [r7, #0]
  if (pObj->IO.BusType == LSM6DSOX_SENSORHUB_LIS2MDL_I2C_BUS) /* LSM6DSOX SensorHub with LIS2MDL example */
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	689b      	ldr	r3, [r3, #8]
 8004dce:	2b03      	cmp	r3, #3
 8004dd0:	d10b      	bne.n	8004dea <LIS2MDL_ReadID+0x2a>
  {
    if (LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData(pObj, LIS2MDL_WHO_AM_I, Id, 1) != LIS2MDL_OK)
 8004dd2:	2301      	movs	r3, #1
 8004dd4:	683a      	ldr	r2, [r7, #0]
 8004dd6:	214f      	movs	r1, #79	; 0x4f
 8004dd8:	6878      	ldr	r0, [r7, #4]
 8004dda:	f000 fafb 	bl	80053d4 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData>
 8004dde:	4603      	mov	r3, r0
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	d00e      	beq.n	8004e02 <LIS2MDL_ReadID+0x42>
    {
      return LIS2MDL_ERROR;
 8004de4:	f04f 33ff 	mov.w	r3, #4294967295
 8004de8:	e00c      	b.n	8004e04 <LIS2MDL_ReadID+0x44>
    }
  }
  else
  {
    if (lis2mdl_device_id_get(&(pObj->Ctx), Id) != LIS2MDL_OK)
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	3320      	adds	r3, #32
 8004dee:	6839      	ldr	r1, [r7, #0]
 8004df0:	4618      	mov	r0, r3
 8004df2:	f000 fe72 	bl	8005ada <lis2mdl_device_id_get>
 8004df6:	4603      	mov	r3, r0
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	d002      	beq.n	8004e02 <LIS2MDL_ReadID+0x42>
    {
      return LIS2MDL_ERROR;
 8004dfc:	f04f 33ff 	mov.w	r3, #4294967295
 8004e00:	e000      	b.n	8004e04 <LIS2MDL_ReadID+0x44>
    }
  }

  return LIS2MDL_OK;
 8004e02:	2300      	movs	r3, #0
}
 8004e04:	4618      	mov	r0, r3
 8004e06:	3708      	adds	r7, #8
 8004e08:	46bd      	mov	sp, r7
 8004e0a:	bd80      	pop	{r7, pc}

08004e0c <LIS2MDL_GetCapabilities>:
  * @param  pObj Component object pointer
  * @param  Capabilities pointer to LIS2MDL magnetometer sensor capabilities
  * @retval Component status
  */
int32_t LIS2MDL_GetCapabilities(LIS2MDL_Object_t *pObj, LIS2MDL_Capabilities_t *Capabilities)
{
 8004e0c:	b480      	push	{r7}
 8004e0e:	b083      	sub	sp, #12
 8004e10:	af00      	add	r7, sp, #0
 8004e12:	6078      	str	r0, [r7, #4]
 8004e14:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  Capabilities->Acc          = 0;
 8004e16:	683b      	ldr	r3, [r7, #0]
 8004e18:	2200      	movs	r2, #0
 8004e1a:	701a      	strb	r2, [r3, #0]
  Capabilities->Gyro         = 0;
 8004e1c:	683b      	ldr	r3, [r7, #0]
 8004e1e:	2200      	movs	r2, #0
 8004e20:	705a      	strb	r2, [r3, #1]
  Capabilities->Magneto      = 1;
 8004e22:	683b      	ldr	r3, [r7, #0]
 8004e24:	2201      	movs	r2, #1
 8004e26:	709a      	strb	r2, [r3, #2]
  Capabilities->LowPower     = 0;
 8004e28:	683b      	ldr	r3, [r7, #0]
 8004e2a:	2200      	movs	r2, #0
 8004e2c:	70da      	strb	r2, [r3, #3]
  Capabilities->GyroMaxFS    = 0;
 8004e2e:	683b      	ldr	r3, [r7, #0]
 8004e30:	2200      	movs	r2, #0
 8004e32:	605a      	str	r2, [r3, #4]
  Capabilities->AccMaxFS     = 0;
 8004e34:	683b      	ldr	r3, [r7, #0]
 8004e36:	2200      	movs	r2, #0
 8004e38:	609a      	str	r2, [r3, #8]
  Capabilities->MagMaxFS     = 50;
 8004e3a:	683b      	ldr	r3, [r7, #0]
 8004e3c:	2232      	movs	r2, #50	; 0x32
 8004e3e:	60da      	str	r2, [r3, #12]
  Capabilities->GyroMaxOdr   = 0.0f;
 8004e40:	683b      	ldr	r3, [r7, #0]
 8004e42:	f04f 0200 	mov.w	r2, #0
 8004e46:	611a      	str	r2, [r3, #16]
  Capabilities->AccMaxOdr    = 0.0f;
 8004e48:	683b      	ldr	r3, [r7, #0]
 8004e4a:	f04f 0200 	mov.w	r2, #0
 8004e4e:	615a      	str	r2, [r3, #20]
  Capabilities->MagMaxOdr    = 100.0f;
 8004e50:	683b      	ldr	r3, [r7, #0]
 8004e52:	4a04      	ldr	r2, [pc, #16]	; (8004e64 <LIS2MDL_GetCapabilities+0x58>)
 8004e54:	619a      	str	r2, [r3, #24]
  return LIS2MDL_OK;
 8004e56:	2300      	movs	r3, #0
}
 8004e58:	4618      	mov	r0, r3
 8004e5a:	370c      	adds	r7, #12
 8004e5c:	46bd      	mov	sp, r7
 8004e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e62:	4770      	bx	lr
 8004e64:	42c80000 	.word	0x42c80000

08004e68 <LIS2MDL_MAG_Enable>:
  * @brief Enable the LIS2MDL magnetometer sensor
  * @param pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_MAG_Enable(LIS2MDL_Object_t *pObj)
{
 8004e68:	b580      	push	{r7, lr}
 8004e6a:	b084      	sub	sp, #16
 8004e6c:	af00      	add	r7, sp, #0
 8004e6e:	6078      	str	r0, [r7, #4]
  lis2mdl_cfg_reg_a_t reg_a;

  /* Check if the component is already enabled */
  if (pObj->mag_is_enabled == 1U)
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8004e76:	2b01      	cmp	r3, #1
 8004e78:	d101      	bne.n	8004e7e <LIS2MDL_MAG_Enable+0x16>
  {
    return LIS2MDL_OK;
 8004e7a:	2300      	movs	r3, #0
 8004e7c:	e032      	b.n	8004ee4 <LIS2MDL_MAG_Enable+0x7c>
  }

  if (pObj->IO.BusType == LSM6DSOX_SENSORHUB_LIS2MDL_I2C_BUS) /* LSM6DSOX SensorHub with LIS2MDL example */
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	689b      	ldr	r3, [r3, #8]
 8004e82:	2b03      	cmp	r3, #3
 8004e84:	d11d      	bne.n	8004ec2 <LIS2MDL_MAG_Enable+0x5a>
  {
    /* Read configuration from CFG_REG_A reg */
    if (LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData(pObj, LIS2MDL_CFG_REG_A, (uint8_t *)&reg_a, 1) != LIS2MDL_OK)
 8004e86:	f107 020c 	add.w	r2, r7, #12
 8004e8a:	2301      	movs	r3, #1
 8004e8c:	2160      	movs	r1, #96	; 0x60
 8004e8e:	6878      	ldr	r0, [r7, #4]
 8004e90:	f000 faa0 	bl	80053d4 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData>
 8004e94:	4603      	mov	r3, r0
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d002      	beq.n	8004ea0 <LIS2MDL_MAG_Enable+0x38>
    {
      return LIS2MDL_ERROR;
 8004e9a:	f04f 33ff 	mov.w	r3, #4294967295
 8004e9e:	e021      	b.n	8004ee4 <LIS2MDL_MAG_Enable+0x7c>
    }

    /* Operation mode selection. */
    reg_a.md = LIS2MDL_CONTINUOUS_MODE;
 8004ea0:	7b3b      	ldrb	r3, [r7, #12]
 8004ea2:	f36f 0301 	bfc	r3, #0, #2
 8004ea6:	733b      	strb	r3, [r7, #12]

    /* Write configuration to CFG_REG_A reg */
    if (LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData(pObj, LIS2MDL_CFG_REG_A, (uint8_t *)&reg_a, 1) != LIS2MDL_OK)
 8004ea8:	f107 020c 	add.w	r2, r7, #12
 8004eac:	2301      	movs	r3, #1
 8004eae:	2160      	movs	r1, #96	; 0x60
 8004eb0:	6878      	ldr	r0, [r7, #4]
 8004eb2:	f000 fbce 	bl	8005652 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData>
 8004eb6:	4603      	mov	r3, r0
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	d00e      	beq.n	8004eda <LIS2MDL_MAG_Enable+0x72>
    {
      return LIS2MDL_ERROR;
 8004ebc:	f04f 33ff 	mov.w	r3, #4294967295
 8004ec0:	e010      	b.n	8004ee4 <LIS2MDL_MAG_Enable+0x7c>
    }
  }
  else
  {
    /* Operation mode selection. */
    if (lis2mdl_operating_mode_set(&(pObj->Ctx), LIS2MDL_CONTINUOUS_MODE) != LIS2MDL_OK)
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	3320      	adds	r3, #32
 8004ec6:	2100      	movs	r1, #0
 8004ec8:	4618      	mov	r0, r3
 8004eca:	f000 fd10 	bl	80058ee <lis2mdl_operating_mode_set>
 8004ece:	4603      	mov	r3, r0
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	d002      	beq.n	8004eda <LIS2MDL_MAG_Enable+0x72>
    {
      return LIS2MDL_ERROR;
 8004ed4:	f04f 33ff 	mov.w	r3, #4294967295
 8004ed8:	e004      	b.n	8004ee4 <LIS2MDL_MAG_Enable+0x7c>
    }
  }

  pObj->mag_is_enabled = 1;
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	2201      	movs	r2, #1
 8004ede:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

  return LIS2MDL_OK;
 8004ee2:	2300      	movs	r3, #0
}
 8004ee4:	4618      	mov	r0, r3
 8004ee6:	3710      	adds	r7, #16
 8004ee8:	46bd      	mov	sp, r7
 8004eea:	bd80      	pop	{r7, pc}

08004eec <LIS2MDL_MAG_Disable>:
  * @brief Disable the LIS2MDL magnetometer sensor
  * @param pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_MAG_Disable(LIS2MDL_Object_t *pObj)
{
 8004eec:	b580      	push	{r7, lr}
 8004eee:	b084      	sub	sp, #16
 8004ef0:	af00      	add	r7, sp, #0
 8004ef2:	6078      	str	r0, [r7, #4]
  lis2mdl_cfg_reg_a_t reg_a;

  /* Check if the component is already disabled */
  if (pObj->mag_is_enabled == 0U)
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d101      	bne.n	8004f02 <LIS2MDL_MAG_Disable+0x16>
  {
    return LIS2MDL_OK;
 8004efe:	2300      	movs	r3, #0
 8004f00:	e033      	b.n	8004f6a <LIS2MDL_MAG_Disable+0x7e>
  }

  if (pObj->IO.BusType == LSM6DSOX_SENSORHUB_LIS2MDL_I2C_BUS) /* LSM6DSOX SensorHub with LIS2MDL example */
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	689b      	ldr	r3, [r3, #8]
 8004f06:	2b03      	cmp	r3, #3
 8004f08:	d11e      	bne.n	8004f48 <LIS2MDL_MAG_Disable+0x5c>
  {
    /* Read configuration from CFG_REG_A reg */
    if (LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData(pObj, LIS2MDL_CFG_REG_A, (uint8_t *)&reg_a, 1) != LIS2MDL_OK)
 8004f0a:	f107 020c 	add.w	r2, r7, #12
 8004f0e:	2301      	movs	r3, #1
 8004f10:	2160      	movs	r1, #96	; 0x60
 8004f12:	6878      	ldr	r0, [r7, #4]
 8004f14:	f000 fa5e 	bl	80053d4 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData>
 8004f18:	4603      	mov	r3, r0
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d002      	beq.n	8004f24 <LIS2MDL_MAG_Disable+0x38>
    {
      return LIS2MDL_ERROR;
 8004f1e:	f04f 33ff 	mov.w	r3, #4294967295
 8004f22:	e022      	b.n	8004f6a <LIS2MDL_MAG_Disable+0x7e>
    }

    /* Operation mode selection. */
    reg_a.md = LIS2MDL_POWER_DOWN;
 8004f24:	7b3b      	ldrb	r3, [r7, #12]
 8004f26:	2202      	movs	r2, #2
 8004f28:	f362 0301 	bfi	r3, r2, #0, #2
 8004f2c:	733b      	strb	r3, [r7, #12]

    /* Write configuration to CFG_REG_A reg */
    if (LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData(pObj, LIS2MDL_CFG_REG_A, (uint8_t *)&reg_a, 1) != LIS2MDL_OK)
 8004f2e:	f107 020c 	add.w	r2, r7, #12
 8004f32:	2301      	movs	r3, #1
 8004f34:	2160      	movs	r1, #96	; 0x60
 8004f36:	6878      	ldr	r0, [r7, #4]
 8004f38:	f000 fb8b 	bl	8005652 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData>
 8004f3c:	4603      	mov	r3, r0
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d00e      	beq.n	8004f60 <LIS2MDL_MAG_Disable+0x74>
    {
      return LIS2MDL_ERROR;
 8004f42:	f04f 33ff 	mov.w	r3, #4294967295
 8004f46:	e010      	b.n	8004f6a <LIS2MDL_MAG_Disable+0x7e>
    }
  }
  else
  {
    /* Operation mode selection. */
    if (lis2mdl_operating_mode_set(&(pObj->Ctx), LIS2MDL_POWER_DOWN) != LIS2MDL_OK)
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	3320      	adds	r3, #32
 8004f4c:	2102      	movs	r1, #2
 8004f4e:	4618      	mov	r0, r3
 8004f50:	f000 fccd 	bl	80058ee <lis2mdl_operating_mode_set>
 8004f54:	4603      	mov	r3, r0
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d002      	beq.n	8004f60 <LIS2MDL_MAG_Disable+0x74>
    {
      return LIS2MDL_ERROR;
 8004f5a:	f04f 33ff 	mov.w	r3, #4294967295
 8004f5e:	e004      	b.n	8004f6a <LIS2MDL_MAG_Disable+0x7e>
    }
  }

  pObj->mag_is_enabled = 0;
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	2200      	movs	r2, #0
 8004f64:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

  return LIS2MDL_OK;
 8004f68:	2300      	movs	r3, #0
}
 8004f6a:	4618      	mov	r0, r3
 8004f6c:	3710      	adds	r7, #16
 8004f6e:	46bd      	mov	sp, r7
 8004f70:	bd80      	pop	{r7, pc}

08004f72 <LIS2MDL_MAG_GetSensitivity>:
  * @param  pObj the device pObj
  * @param  Sensitivity pointer
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_MAG_GetSensitivity(LIS2MDL_Object_t *pObj, float *Sensitivity)
{
 8004f72:	b480      	push	{r7}
 8004f74:	b083      	sub	sp, #12
 8004f76:	af00      	add	r7, sp, #0
 8004f78:	6078      	str	r0, [r7, #4]
 8004f7a:	6039      	str	r1, [r7, #0]
  *Sensitivity = LIS2MDL_MAG_SENSITIVITY_FS_50GAUSS;
 8004f7c:	683b      	ldr	r3, [r7, #0]
 8004f7e:	f04f 527f 	mov.w	r2, #1069547520	; 0x3fc00000
 8004f82:	601a      	str	r2, [r3, #0]

  return LIS2MDL_OK;
 8004f84:	2300      	movs	r3, #0
}
 8004f86:	4618      	mov	r0, r3
 8004f88:	370c      	adds	r7, #12
 8004f8a:	46bd      	mov	sp, r7
 8004f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f90:	4770      	bx	lr
	...

08004f94 <LIS2MDL_MAG_GetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr pointer where the output data rate is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_MAG_GetOutputDataRate(LIS2MDL_Object_t *pObj, float *Odr)
{
 8004f94:	b580      	push	{r7, lr}
 8004f96:	b084      	sub	sp, #16
 8004f98:	af00      	add	r7, sp, #0
 8004f9a:	6078      	str	r0, [r7, #4]
 8004f9c:	6039      	str	r1, [r7, #0]
  int32_t ret = LIS2MDL_OK;
 8004f9e:	2300      	movs	r3, #0
 8004fa0:	60fb      	str	r3, [r7, #12]
  lis2mdl_odr_t odr_low_level;

  /* Get current output data rate. */
  if (lis2mdl_data_rate_get(&(pObj->Ctx), &odr_low_level) != LIS2MDL_OK)
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	3320      	adds	r3, #32
 8004fa6:	f107 020b 	add.w	r2, r7, #11
 8004faa:	4611      	mov	r1, r2
 8004fac:	4618      	mov	r0, r3
 8004fae:	f000 fceb 	bl	8005988 <lis2mdl_data_rate_get>
 8004fb2:	4603      	mov	r3, r0
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	d002      	beq.n	8004fbe <LIS2MDL_MAG_GetOutputDataRate+0x2a>
  {
    return LIS2MDL_ERROR;
 8004fb8:	f04f 33ff 	mov.w	r3, #4294967295
 8004fbc:	e023      	b.n	8005006 <LIS2MDL_MAG_GetOutputDataRate+0x72>
  }

  switch (odr_low_level)
 8004fbe:	7afb      	ldrb	r3, [r7, #11]
 8004fc0:	2b03      	cmp	r3, #3
 8004fc2:	d81b      	bhi.n	8004ffc <LIS2MDL_MAG_GetOutputDataRate+0x68>
 8004fc4:	a201      	add	r2, pc, #4	; (adr r2, 8004fcc <LIS2MDL_MAG_GetOutputDataRate+0x38>)
 8004fc6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004fca:	bf00      	nop
 8004fcc:	08004fdd 	.word	0x08004fdd
 8004fd0:	08004fe5 	.word	0x08004fe5
 8004fd4:	08004fed 	.word	0x08004fed
 8004fd8:	08004ff5 	.word	0x08004ff5
  {
    case LIS2MDL_ODR_10Hz:
      *Odr = 10.0f;
 8004fdc:	683b      	ldr	r3, [r7, #0]
 8004fde:	4a0c      	ldr	r2, [pc, #48]	; (8005010 <LIS2MDL_MAG_GetOutputDataRate+0x7c>)
 8004fe0:	601a      	str	r2, [r3, #0]
      break;
 8004fe2:	e00f      	b.n	8005004 <LIS2MDL_MAG_GetOutputDataRate+0x70>

    case LIS2MDL_ODR_20Hz:
      *Odr = 20.0f;
 8004fe4:	683b      	ldr	r3, [r7, #0]
 8004fe6:	4a0b      	ldr	r2, [pc, #44]	; (8005014 <LIS2MDL_MAG_GetOutputDataRate+0x80>)
 8004fe8:	601a      	str	r2, [r3, #0]
      break;
 8004fea:	e00b      	b.n	8005004 <LIS2MDL_MAG_GetOutputDataRate+0x70>

    case LIS2MDL_ODR_50Hz:
      *Odr = 50.0f;
 8004fec:	683b      	ldr	r3, [r7, #0]
 8004fee:	4a0a      	ldr	r2, [pc, #40]	; (8005018 <LIS2MDL_MAG_GetOutputDataRate+0x84>)
 8004ff0:	601a      	str	r2, [r3, #0]
      break;
 8004ff2:	e007      	b.n	8005004 <LIS2MDL_MAG_GetOutputDataRate+0x70>

    case LIS2MDL_ODR_100Hz:
      *Odr = 100.0f;
 8004ff4:	683b      	ldr	r3, [r7, #0]
 8004ff6:	4a09      	ldr	r2, [pc, #36]	; (800501c <LIS2MDL_MAG_GetOutputDataRate+0x88>)
 8004ff8:	601a      	str	r2, [r3, #0]
      break;
 8004ffa:	e003      	b.n	8005004 <LIS2MDL_MAG_GetOutputDataRate+0x70>

    default:
      ret = LIS2MDL_ERROR;
 8004ffc:	f04f 33ff 	mov.w	r3, #4294967295
 8005000:	60fb      	str	r3, [r7, #12]
      break;
 8005002:	bf00      	nop
  }

  return ret;
 8005004:	68fb      	ldr	r3, [r7, #12]
}
 8005006:	4618      	mov	r0, r3
 8005008:	3710      	adds	r7, #16
 800500a:	46bd      	mov	sp, r7
 800500c:	bd80      	pop	{r7, pc}
 800500e:	bf00      	nop
 8005010:	41200000 	.word	0x41200000
 8005014:	41a00000 	.word	0x41a00000
 8005018:	42480000 	.word	0x42480000
 800501c:	42c80000 	.word	0x42c80000

08005020 <LIS2MDL_MAG_SetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_MAG_SetOutputDataRate(LIS2MDL_Object_t *pObj, float Odr)
{
 8005020:	b580      	push	{r7, lr}
 8005022:	b084      	sub	sp, #16
 8005024:	af00      	add	r7, sp, #0
 8005026:	6078      	str	r0, [r7, #4]
 8005028:	ed87 0a00 	vstr	s0, [r7]
  lis2mdl_odr_t new_odr;
  lis2mdl_cfg_reg_a_t reg_a;

  new_odr = (Odr <= 10.000f) ? LIS2MDL_ODR_10Hz
            : (Odr <= 20.000f) ? LIS2MDL_ODR_20Hz
 800502c:	edd7 7a00 	vldr	s15, [r7]
 8005030:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8005034:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005038:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800503c:	d801      	bhi.n	8005042 <LIS2MDL_MAG_SetOutputDataRate+0x22>
 800503e:	2300      	movs	r3, #0
 8005040:	e016      	b.n	8005070 <LIS2MDL_MAG_SetOutputDataRate+0x50>
 8005042:	edd7 7a00 	vldr	s15, [r7]
 8005046:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 800504a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800504e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005052:	d801      	bhi.n	8005058 <LIS2MDL_MAG_SetOutputDataRate+0x38>
 8005054:	2301      	movs	r3, #1
 8005056:	e00b      	b.n	8005070 <LIS2MDL_MAG_SetOutputDataRate+0x50>
 8005058:	edd7 7a00 	vldr	s15, [r7]
 800505c:	ed9f 7a21 	vldr	s14, [pc, #132]	; 80050e4 <LIS2MDL_MAG_SetOutputDataRate+0xc4>
 8005060:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005064:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005068:	d801      	bhi.n	800506e <LIS2MDL_MAG_SetOutputDataRate+0x4e>
 800506a:	2302      	movs	r3, #2
 800506c:	e000      	b.n	8005070 <LIS2MDL_MAG_SetOutputDataRate+0x50>
 800506e:	2303      	movs	r3, #3
  new_odr = (Odr <= 10.000f) ? LIS2MDL_ODR_10Hz
 8005070:	73fb      	strb	r3, [r7, #15]
            : (Odr <= 50.000f) ? LIS2MDL_ODR_50Hz
            :                    LIS2MDL_ODR_100Hz;

  if (pObj->IO.BusType == LSM6DSOX_SENSORHUB_LIS2MDL_I2C_BUS) /* LSM6DSOX SensorHub with LIS2MDL example */
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	689b      	ldr	r3, [r3, #8]
 8005076:	2b03      	cmp	r3, #3
 8005078:	d121      	bne.n	80050be <LIS2MDL_MAG_SetOutputDataRate+0x9e>
  {
    /* Read configuration from CFG_REG_A reg */
    if (LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData(pObj, LIS2MDL_CFG_REG_A, (uint8_t *)&reg_a, 1) != LIS2MDL_OK)
 800507a:	f107 020c 	add.w	r2, r7, #12
 800507e:	2301      	movs	r3, #1
 8005080:	2160      	movs	r1, #96	; 0x60
 8005082:	6878      	ldr	r0, [r7, #4]
 8005084:	f000 f9a6 	bl	80053d4 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData>
 8005088:	4603      	mov	r3, r0
 800508a:	2b00      	cmp	r3, #0
 800508c:	d002      	beq.n	8005094 <LIS2MDL_MAG_SetOutputDataRate+0x74>
    {
      return LIS2MDL_ERROR;
 800508e:	f04f 33ff 	mov.w	r3, #4294967295
 8005092:	e022      	b.n	80050da <LIS2MDL_MAG_SetOutputDataRate+0xba>
    }

    /* Output data rate selection */
    reg_a.odr = new_odr;
 8005094:	7bfb      	ldrb	r3, [r7, #15]
 8005096:	f003 0303 	and.w	r3, r3, #3
 800509a:	b2da      	uxtb	r2, r3
 800509c:	7b3b      	ldrb	r3, [r7, #12]
 800509e:	f362 0383 	bfi	r3, r2, #2, #2
 80050a2:	733b      	strb	r3, [r7, #12]

    /* Write configuration to CFG_REG_A reg */
    if (LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData(pObj, LIS2MDL_CFG_REG_A, (uint8_t *)&reg_a, 1) != LIS2MDL_OK)
 80050a4:	f107 020c 	add.w	r2, r7, #12
 80050a8:	2301      	movs	r3, #1
 80050aa:	2160      	movs	r1, #96	; 0x60
 80050ac:	6878      	ldr	r0, [r7, #4]
 80050ae:	f000 fad0 	bl	8005652 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData>
 80050b2:	4603      	mov	r3, r0
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	d00f      	beq.n	80050d8 <LIS2MDL_MAG_SetOutputDataRate+0xb8>
    {
      return LIS2MDL_ERROR;
 80050b8:	f04f 33ff 	mov.w	r3, #4294967295
 80050bc:	e00d      	b.n	80050da <LIS2MDL_MAG_SetOutputDataRate+0xba>
    }
  }
  else
  {
    if (lis2mdl_data_rate_set(&(pObj->Ctx), new_odr) != LIS2MDL_OK)
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	3320      	adds	r3, #32
 80050c2:	7bfa      	ldrb	r2, [r7, #15]
 80050c4:	4611      	mov	r1, r2
 80050c6:	4618      	mov	r0, r3
 80050c8:	f000 fc37 	bl	800593a <lis2mdl_data_rate_set>
 80050cc:	4603      	mov	r3, r0
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d002      	beq.n	80050d8 <LIS2MDL_MAG_SetOutputDataRate+0xb8>
    {
      return LIS2MDL_ERROR;
 80050d2:	f04f 33ff 	mov.w	r3, #4294967295
 80050d6:	e000      	b.n	80050da <LIS2MDL_MAG_SetOutputDataRate+0xba>
    }
  }

  return LIS2MDL_OK;
 80050d8:	2300      	movs	r3, #0
}
 80050da:	4618      	mov	r0, r3
 80050dc:	3710      	adds	r7, #16
 80050de:	46bd      	mov	sp, r7
 80050e0:	bd80      	pop	{r7, pc}
 80050e2:	bf00      	nop
 80050e4:	42480000 	.word	0x42480000

080050e8 <LIS2MDL_MAG_GetFullScale>:
  * @param  pObj the device pObj
  * @param  FullScale pointer where the full scale is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_MAG_GetFullScale(LIS2MDL_Object_t *pObj, int32_t *FullScale)
{
 80050e8:	b480      	push	{r7}
 80050ea:	b083      	sub	sp, #12
 80050ec:	af00      	add	r7, sp, #0
 80050ee:	6078      	str	r0, [r7, #4]
 80050f0:	6039      	str	r1, [r7, #0]
  *FullScale = 50;
 80050f2:	683b      	ldr	r3, [r7, #0]
 80050f4:	2232      	movs	r2, #50	; 0x32
 80050f6:	601a      	str	r2, [r3, #0]

  return LIS2MDL_OK;
 80050f8:	2300      	movs	r3, #0
}
 80050fa:	4618      	mov	r0, r3
 80050fc:	370c      	adds	r7, #12
 80050fe:	46bd      	mov	sp, r7
 8005100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005104:	4770      	bx	lr

08005106 <LIS2MDL_MAG_SetFullScale>:
  * @param  pObj the device pObj
  * @param  FullScale the functional full scale to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_MAG_SetFullScale(LIS2MDL_Object_t *pObj, int32_t FullScale)
{
 8005106:	b480      	push	{r7}
 8005108:	b083      	sub	sp, #12
 800510a:	af00      	add	r7, sp, #0
 800510c:	6078      	str	r0, [r7, #4]
 800510e:	6039      	str	r1, [r7, #0]
  return LIS2MDL_OK;
 8005110:	2300      	movs	r3, #0
}
 8005112:	4618      	mov	r0, r3
 8005114:	370c      	adds	r7, #12
 8005116:	46bd      	mov	sp, r7
 8005118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800511c:	4770      	bx	lr

0800511e <LIS2MDL_MAG_GetAxesRaw>:
  * @param  pObj the device pObj
  * @param  Value pointer where the raw values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_MAG_GetAxesRaw(LIS2MDL_Object_t *pObj, LIS2MDL_AxesRaw_t *Value)
{
 800511e:	b580      	push	{r7, lr}
 8005120:	b084      	sub	sp, #16
 8005122:	af00      	add	r7, sp, #0
 8005124:	6078      	str	r0, [r7, #4]
 8005126:	6039      	str	r1, [r7, #0]
  lis2mdl_axis3bit16_t data_raw;

  /* Read raw data values. */
  if (lis2mdl_magnetic_raw_get(&(pObj->Ctx), data_raw.i16bit) != LIS2MDL_OK)
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	3320      	adds	r3, #32
 800512c:	f107 0208 	add.w	r2, r7, #8
 8005130:	4611      	mov	r1, r2
 8005132:	4618      	mov	r0, r3
 8005134:	f000 fc86 	bl	8005a44 <lis2mdl_magnetic_raw_get>
 8005138:	4603      	mov	r3, r0
 800513a:	2b00      	cmp	r3, #0
 800513c:	d002      	beq.n	8005144 <LIS2MDL_MAG_GetAxesRaw+0x26>
  {
    return LIS2MDL_ERROR;
 800513e:	f04f 33ff 	mov.w	r3, #4294967295
 8005142:	e00c      	b.n	800515e <LIS2MDL_MAG_GetAxesRaw+0x40>
  }

  /* Format the data. */
  Value->x = data_raw.i16bit[0];
 8005144:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8005148:	683b      	ldr	r3, [r7, #0]
 800514a:	801a      	strh	r2, [r3, #0]
  Value->y = data_raw.i16bit[1];
 800514c:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8005150:	683b      	ldr	r3, [r7, #0]
 8005152:	805a      	strh	r2, [r3, #2]
  Value->z = data_raw.i16bit[2];
 8005154:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8005158:	683b      	ldr	r3, [r7, #0]
 800515a:	809a      	strh	r2, [r3, #4]

  return LIS2MDL_OK;
 800515c:	2300      	movs	r3, #0
}
 800515e:	4618      	mov	r0, r3
 8005160:	3710      	adds	r7, #16
 8005162:	46bd      	mov	sp, r7
 8005164:	bd80      	pop	{r7, pc}

08005166 <LIS2MDL_MAG_GetAxes>:
  * @param  pObj the device pObj
  * @param  MagneticField pointer where the values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_MAG_GetAxes(LIS2MDL_Object_t *pObj, LIS2MDL_Axes_t *MagneticField)
{
 8005166:	b580      	push	{r7, lr}
 8005168:	b088      	sub	sp, #32
 800516a:	af00      	add	r7, sp, #0
 800516c:	6078      	str	r0, [r7, #4]
 800516e:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  lis2mdl_axis3bit16_t data_raw;
  float sensitivity;

  if (pObj->IO.BusType == LSM6DSOX_SENSORHUB_LIS2MDL_I2C_BUS) /* LSM6DSOX SensorHub with LIS2MDL example */
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	689b      	ldr	r3, [r3, #8]
 8005174:	2b03      	cmp	r3, #3
 8005176:	d137      	bne.n	80051e8 <LIS2MDL_MAG_GetAxes+0x82>
  {
    /* Read raw data values. */
    if (LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData(pObj, LIS2MDL_OUTX_L_REG, buff, 6) != LIS2MDL_OK)
 8005178:	f107 0218 	add.w	r2, r7, #24
 800517c:	2306      	movs	r3, #6
 800517e:	2168      	movs	r1, #104	; 0x68
 8005180:	6878      	ldr	r0, [r7, #4]
 8005182:	f000 f927 	bl	80053d4 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData>
 8005186:	4603      	mov	r3, r0
 8005188:	2b00      	cmp	r3, #0
 800518a:	d002      	beq.n	8005192 <LIS2MDL_MAG_GetAxes+0x2c>
    {
      return LIS2MDL_ERROR;
 800518c:	f04f 33ff 	mov.w	r3, #4294967295
 8005190:	e06f      	b.n	8005272 <LIS2MDL_MAG_GetAxes+0x10c>
    }
    data_raw.i16bit[0] = (int16_t)buff[1];
 8005192:	7e7b      	ldrb	r3, [r7, #25]
 8005194:	b21b      	sxth	r3, r3
 8005196:	823b      	strh	r3, [r7, #16]
    data_raw.i16bit[0] = (data_raw.i16bit[0] * 256) + (int16_t)buff[0];
 8005198:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800519c:	b29b      	uxth	r3, r3
 800519e:	021b      	lsls	r3, r3, #8
 80051a0:	b29a      	uxth	r2, r3
 80051a2:	7e3b      	ldrb	r3, [r7, #24]
 80051a4:	b29b      	uxth	r3, r3
 80051a6:	4413      	add	r3, r2
 80051a8:	b29b      	uxth	r3, r3
 80051aa:	b21b      	sxth	r3, r3
 80051ac:	823b      	strh	r3, [r7, #16]
    data_raw.i16bit[1] = (int16_t)buff[3];
 80051ae:	7efb      	ldrb	r3, [r7, #27]
 80051b0:	b21b      	sxth	r3, r3
 80051b2:	827b      	strh	r3, [r7, #18]
    data_raw.i16bit[1] = (data_raw.i16bit[1] * 256) + (int16_t)buff[2];
 80051b4:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80051b8:	b29b      	uxth	r3, r3
 80051ba:	021b      	lsls	r3, r3, #8
 80051bc:	b29a      	uxth	r2, r3
 80051be:	7ebb      	ldrb	r3, [r7, #26]
 80051c0:	b29b      	uxth	r3, r3
 80051c2:	4413      	add	r3, r2
 80051c4:	b29b      	uxth	r3, r3
 80051c6:	b21b      	sxth	r3, r3
 80051c8:	827b      	strh	r3, [r7, #18]
    data_raw.i16bit[2] = (int16_t)buff[5];
 80051ca:	7f7b      	ldrb	r3, [r7, #29]
 80051cc:	b21b      	sxth	r3, r3
 80051ce:	82bb      	strh	r3, [r7, #20]
    data_raw.i16bit[2] = (data_raw.i16bit[2] * 256) + (int16_t)buff[4];
 80051d0:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80051d4:	b29b      	uxth	r3, r3
 80051d6:	021b      	lsls	r3, r3, #8
 80051d8:	b29a      	uxth	r2, r3
 80051da:	7f3b      	ldrb	r3, [r7, #28]
 80051dc:	b29b      	uxth	r3, r3
 80051de:	4413      	add	r3, r2
 80051e0:	b29b      	uxth	r3, r3
 80051e2:	b21b      	sxth	r3, r3
 80051e4:	82bb      	strh	r3, [r7, #20]
 80051e6:	e00d      	b.n	8005204 <LIS2MDL_MAG_GetAxes+0x9e>
  }
  else
  {
    /* Read raw data values. */
    if (lis2mdl_magnetic_raw_get(&(pObj->Ctx), data_raw.i16bit) != LIS2MDL_OK)
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	3320      	adds	r3, #32
 80051ec:	f107 0210 	add.w	r2, r7, #16
 80051f0:	4611      	mov	r1, r2
 80051f2:	4618      	mov	r0, r3
 80051f4:	f000 fc26 	bl	8005a44 <lis2mdl_magnetic_raw_get>
 80051f8:	4603      	mov	r3, r0
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d002      	beq.n	8005204 <LIS2MDL_MAG_GetAxes+0x9e>
    {
      return LIS2MDL_ERROR;
 80051fe:	f04f 33ff 	mov.w	r3, #4294967295
 8005202:	e036      	b.n	8005272 <LIS2MDL_MAG_GetAxes+0x10c>
    }
  }

  /* Get LIS2MDL actual sensitivity. */
  (void)LIS2MDL_MAG_GetSensitivity(pObj, &sensitivity);
 8005204:	f107 030c 	add.w	r3, r7, #12
 8005208:	4619      	mov	r1, r3
 800520a:	6878      	ldr	r0, [r7, #4]
 800520c:	f7ff feb1 	bl	8004f72 <LIS2MDL_MAG_GetSensitivity>

  /* Calculate the data. */
  MagneticField->x = (int32_t)((float)((float)data_raw.i16bit[0] * sensitivity));
 8005210:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8005214:	ee07 3a90 	vmov	s15, r3
 8005218:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800521c:	edd7 7a03 	vldr	s15, [r7, #12]
 8005220:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005224:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005228:	ee17 2a90 	vmov	r2, s15
 800522c:	683b      	ldr	r3, [r7, #0]
 800522e:	601a      	str	r2, [r3, #0]
  MagneticField->y = (int32_t)((float)((float)data_raw.i16bit[1] * sensitivity));
 8005230:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8005234:	ee07 3a90 	vmov	s15, r3
 8005238:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800523c:	edd7 7a03 	vldr	s15, [r7, #12]
 8005240:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005244:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005248:	ee17 2a90 	vmov	r2, s15
 800524c:	683b      	ldr	r3, [r7, #0]
 800524e:	605a      	str	r2, [r3, #4]
  MagneticField->z = (int32_t)((float)((float)data_raw.i16bit[2] * sensitivity));
 8005250:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8005254:	ee07 3a90 	vmov	s15, r3
 8005258:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800525c:	edd7 7a03 	vldr	s15, [r7, #12]
 8005260:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005264:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005268:	ee17 2a90 	vmov	r2, s15
 800526c:	683b      	ldr	r3, [r7, #0]
 800526e:	609a      	str	r2, [r3, #8]

  return LIS2MDL_OK;
 8005270:	2300      	movs	r3, #0
}
 8005272:	4618      	mov	r0, r3
 8005274:	3720      	adds	r7, #32
 8005276:	46bd      	mov	sp, r7
 8005278:	bd80      	pop	{r7, pc}

0800527a <LIS2MDL_Write_Reg>:
  * @param  Reg address to be written
  * @param  Data value to be written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_Write_Reg(LIS2MDL_Object_t *pObj, uint8_t Reg, uint8_t Data)
{
 800527a:	b580      	push	{r7, lr}
 800527c:	b082      	sub	sp, #8
 800527e:	af00      	add	r7, sp, #0
 8005280:	6078      	str	r0, [r7, #4]
 8005282:	460b      	mov	r3, r1
 8005284:	70fb      	strb	r3, [r7, #3]
 8005286:	4613      	mov	r3, r2
 8005288:	70bb      	strb	r3, [r7, #2]
  if (pObj->IO.BusType == LSM6DSOX_SENSORHUB_LIS2MDL_I2C_BUS) /* LSM6DSOX SensorHub with LIS2MDL example */
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	689b      	ldr	r3, [r3, #8]
 800528e:	2b03      	cmp	r3, #3
 8005290:	d10b      	bne.n	80052aa <LIS2MDL_Write_Reg+0x30>
  {
    if (LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData(pObj, Reg, (uint8_t *)&Data, 1) != LIS2MDL_OK)
 8005292:	1cba      	adds	r2, r7, #2
 8005294:	78f9      	ldrb	r1, [r7, #3]
 8005296:	2301      	movs	r3, #1
 8005298:	6878      	ldr	r0, [r7, #4]
 800529a:	f000 f9da 	bl	8005652 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData>
 800529e:	4603      	mov	r3, r0
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	d010      	beq.n	80052c6 <LIS2MDL_Write_Reg+0x4c>
    {
      return LIS2MDL_ERROR;
 80052a4:	f04f 33ff 	mov.w	r3, #4294967295
 80052a8:	e00e      	b.n	80052c8 <LIS2MDL_Write_Reg+0x4e>
    }
  }
  else
  {
    if (lis2mdl_write_reg(&(pObj->Ctx), Reg, &Data, 1) != LIS2MDL_OK)
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	f103 0020 	add.w	r0, r3, #32
 80052b0:	1cba      	adds	r2, r7, #2
 80052b2:	78f9      	ldrb	r1, [r7, #3]
 80052b4:	2301      	movs	r3, #1
 80052b6:	f000 fb02 	bl	80058be <lis2mdl_write_reg>
 80052ba:	4603      	mov	r3, r0
 80052bc:	2b00      	cmp	r3, #0
 80052be:	d002      	beq.n	80052c6 <LIS2MDL_Write_Reg+0x4c>
    {
      return LIS2MDL_ERROR;
 80052c0:	f04f 33ff 	mov.w	r3, #4294967295
 80052c4:	e000      	b.n	80052c8 <LIS2MDL_Write_Reg+0x4e>
    }
  }

  return LIS2MDL_OK;
 80052c6:	2300      	movs	r3, #0
}
 80052c8:	4618      	mov	r0, r3
 80052ca:	3708      	adds	r7, #8
 80052cc:	46bd      	mov	sp, r7
 80052ce:	bd80      	pop	{r7, pc}

080052d0 <ReadMagRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t ReadMagRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 80052d0:	b590      	push	{r4, r7, lr}
 80052d2:	b087      	sub	sp, #28
 80052d4:	af00      	add	r7, sp, #0
 80052d6:	60f8      	str	r0, [r7, #12]
 80052d8:	607a      	str	r2, [r7, #4]
 80052da:	461a      	mov	r2, r3
 80052dc:	460b      	mov	r3, r1
 80052de:	72fb      	strb	r3, [r7, #11]
 80052e0:	4613      	mov	r3, r2
 80052e2:	813b      	strh	r3, [r7, #8]
  LIS2MDL_Object_t *pObj = (LIS2MDL_Object_t *)Handle;
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	617b      	str	r3, [r7, #20]

  if (pObj->IO.BusType == LIS2MDL_I2C_BUS) /* I2C */
 80052e8:	697b      	ldr	r3, [r7, #20]
 80052ea:	689b      	ldr	r3, [r3, #8]
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	d10e      	bne.n	800530e <ReadMagRegWrap+0x3e>
  {
    /* Enable Multi-byte read */
    return pObj->IO.ReadReg(pObj->IO.Address, (Reg | 0x80U), pData, Length);
 80052f0:	697b      	ldr	r3, [r7, #20]
 80052f2:	695c      	ldr	r4, [r3, #20]
 80052f4:	697b      	ldr	r3, [r7, #20]
 80052f6:	7b1b      	ldrb	r3, [r3, #12]
 80052f8:	b298      	uxth	r0, r3
 80052fa:	7afb      	ldrb	r3, [r7, #11]
 80052fc:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005300:	b2db      	uxtb	r3, r3
 8005302:	b299      	uxth	r1, r3
 8005304:	893b      	ldrh	r3, [r7, #8]
 8005306:	687a      	ldr	r2, [r7, #4]
 8005308:	47a0      	blx	r4
 800530a:	4603      	mov	r3, r0
 800530c:	e01d      	b.n	800534a <ReadMagRegWrap+0x7a>
  }
  else if (pObj->IO.BusType == LSM6DSOX_SENSORHUB_LIS2MDL_I2C_BUS) /* LSM6DSOX SensorHub with LIS2MDL example */
 800530e:	697b      	ldr	r3, [r7, #20]
 8005310:	689b      	ldr	r3, [r3, #8]
 8005312:	2b03      	cmp	r3, #3
 8005314:	d10b      	bne.n	800532e <ReadMagRegWrap+0x5e>
  {
    return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 8005316:	697b      	ldr	r3, [r7, #20]
 8005318:	695c      	ldr	r4, [r3, #20]
 800531a:	697b      	ldr	r3, [r7, #20]
 800531c:	7b1b      	ldrb	r3, [r3, #12]
 800531e:	b298      	uxth	r0, r3
 8005320:	7afb      	ldrb	r3, [r7, #11]
 8005322:	b299      	uxth	r1, r3
 8005324:	893b      	ldrh	r3, [r7, #8]
 8005326:	687a      	ldr	r2, [r7, #4]
 8005328:	47a0      	blx	r4
 800532a:	4603      	mov	r3, r0
 800532c:	e00d      	b.n	800534a <ReadMagRegWrap+0x7a>
  }
  else   /* SPI 3-Wires or SPI 4-Wires */
  {
    /* Enable Multi-byte read */
    return pObj->IO.ReadReg(pObj->IO.Address, (Reg | 0x40U), pData, Length);
 800532e:	697b      	ldr	r3, [r7, #20]
 8005330:	695c      	ldr	r4, [r3, #20]
 8005332:	697b      	ldr	r3, [r7, #20]
 8005334:	7b1b      	ldrb	r3, [r3, #12]
 8005336:	b298      	uxth	r0, r3
 8005338:	7afb      	ldrb	r3, [r7, #11]
 800533a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800533e:	b2db      	uxtb	r3, r3
 8005340:	b299      	uxth	r1, r3
 8005342:	893b      	ldrh	r3, [r7, #8]
 8005344:	687a      	ldr	r2, [r7, #4]
 8005346:	47a0      	blx	r4
 8005348:	4603      	mov	r3, r0
  }
}
 800534a:	4618      	mov	r0, r3
 800534c:	371c      	adds	r7, #28
 800534e:	46bd      	mov	sp, r7
 8005350:	bd90      	pop	{r4, r7, pc}

08005352 <WriteMagRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t WriteMagRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8005352:	b590      	push	{r4, r7, lr}
 8005354:	b087      	sub	sp, #28
 8005356:	af00      	add	r7, sp, #0
 8005358:	60f8      	str	r0, [r7, #12]
 800535a:	607a      	str	r2, [r7, #4]
 800535c:	461a      	mov	r2, r3
 800535e:	460b      	mov	r3, r1
 8005360:	72fb      	strb	r3, [r7, #11]
 8005362:	4613      	mov	r3, r2
 8005364:	813b      	strh	r3, [r7, #8]
  LIS2MDL_Object_t *pObj = (LIS2MDL_Object_t *)Handle;
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	617b      	str	r3, [r7, #20]

  if (pObj->IO.BusType == LIS2MDL_I2C_BUS) /* I2C */
 800536a:	697b      	ldr	r3, [r7, #20]
 800536c:	689b      	ldr	r3, [r3, #8]
 800536e:	2b00      	cmp	r3, #0
 8005370:	d10e      	bne.n	8005390 <WriteMagRegWrap+0x3e>
  {
    /* Enable Multi-byte write */
    return pObj->IO.WriteReg(pObj->IO.Address, (Reg | 0x80U), pData, Length);
 8005372:	697b      	ldr	r3, [r7, #20]
 8005374:	691c      	ldr	r4, [r3, #16]
 8005376:	697b      	ldr	r3, [r7, #20]
 8005378:	7b1b      	ldrb	r3, [r3, #12]
 800537a:	b298      	uxth	r0, r3
 800537c:	7afb      	ldrb	r3, [r7, #11]
 800537e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005382:	b2db      	uxtb	r3, r3
 8005384:	b299      	uxth	r1, r3
 8005386:	893b      	ldrh	r3, [r7, #8]
 8005388:	687a      	ldr	r2, [r7, #4]
 800538a:	47a0      	blx	r4
 800538c:	4603      	mov	r3, r0
 800538e:	e01d      	b.n	80053cc <WriteMagRegWrap+0x7a>
  }
  else if (pObj->IO.BusType == LSM6DSOX_SENSORHUB_LIS2MDL_I2C_BUS) /* LSM6DSOX SensorHub with LIS2MDL example */
 8005390:	697b      	ldr	r3, [r7, #20]
 8005392:	689b      	ldr	r3, [r3, #8]
 8005394:	2b03      	cmp	r3, #3
 8005396:	d10b      	bne.n	80053b0 <WriteMagRegWrap+0x5e>
  {
    return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 8005398:	697b      	ldr	r3, [r7, #20]
 800539a:	691c      	ldr	r4, [r3, #16]
 800539c:	697b      	ldr	r3, [r7, #20]
 800539e:	7b1b      	ldrb	r3, [r3, #12]
 80053a0:	b298      	uxth	r0, r3
 80053a2:	7afb      	ldrb	r3, [r7, #11]
 80053a4:	b299      	uxth	r1, r3
 80053a6:	893b      	ldrh	r3, [r7, #8]
 80053a8:	687a      	ldr	r2, [r7, #4]
 80053aa:	47a0      	blx	r4
 80053ac:	4603      	mov	r3, r0
 80053ae:	e00d      	b.n	80053cc <WriteMagRegWrap+0x7a>
  }
  else   /* SPI 3-Wires or SPI 4-Wires */
  {
    /* Enable Multi-byte write */
    return pObj->IO.WriteReg(pObj->IO.Address, (Reg | 0x40U), pData, Length);
 80053b0:	697b      	ldr	r3, [r7, #20]
 80053b2:	691c      	ldr	r4, [r3, #16]
 80053b4:	697b      	ldr	r3, [r7, #20]
 80053b6:	7b1b      	ldrb	r3, [r3, #12]
 80053b8:	b298      	uxth	r0, r3
 80053ba:	7afb      	ldrb	r3, [r7, #11]
 80053bc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80053c0:	b2db      	uxtb	r3, r3
 80053c2:	b299      	uxth	r1, r3
 80053c4:	893b      	ldrh	r3, [r7, #8]
 80053c6:	687a      	ldr	r2, [r7, #4]
 80053c8:	47a0      	blx	r4
 80053ca:	4603      	mov	r3, r0
  }
}
 80053cc:	4618      	mov	r0, r3
 80053ce:	371c      	adds	r7, #28
 80053d0:	46bd      	mov	sp, r7
 80053d2:	bd90      	pop	{r4, r7, pc}

080053d4 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData>:
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData(LIS2MDL_Object_t *pObj, uint8_t Reg, uint8_t *pData,
                                                     uint16_t Length)
{
 80053d4:	b580      	push	{r7, lr}
 80053d6:	b08c      	sub	sp, #48	; 0x30
 80053d8:	af00      	add	r7, sp, #0
 80053da:	60f8      	str	r0, [r7, #12]
 80053dc:	607a      	str	r2, [r7, #4]
 80053de:	461a      	mov	r2, r3
 80053e0:	460b      	mov	r3, r1
 80053e2:	72fb      	strb	r3, [r7, #11]
 80053e4:	4613      	mov	r3, r2
 80053e6:	813b      	strh	r3, [r7, #8]
  uint8_t lsm6dsox_func_cfg_access = 0x01U;
 80053e8:	2301      	movs	r3, #1
 80053ea:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  uint8_t shub_reg_access_en = 0x40U;
 80053ee:	2340      	movs	r3, #64	; 0x40
 80053f0:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
  uint8_t shub_reg_access_dis = 0x00U;
 80053f4:	2300      	movs	r3, #0
 80053f6:	f887 3020 	strb.w	r3, [r7, #32]
  uint8_t ext_sens_addr_read = LIS2MDL_I2C_ADD | 0x01U;
 80053fa:	233d      	movs	r3, #61	; 0x3d
 80053fc:	77fb      	strb	r3, [r7, #31]
  uint8_t slv0_add = 0x15U;
 80053fe:	2315      	movs	r3, #21
 8005400:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
  uint8_t slv0_subadd = 0x16U;
 8005404:	2316      	movs	r3, #22
 8005406:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  uint8_t slave0_config = 0x17U;
 800540a:	2317      	movs	r3, #23
 800540c:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  uint8_t master_config = 0x14U;
 8005410:	2314      	movs	r3, #20
 8005412:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
  uint8_t write_once_i2c_en = 0x44U;
 8005416:	2344      	movs	r3, #68	; 0x44
 8005418:	77bb      	strb	r3, [r7, #30]
  uint8_t sensor_hub_1 = 0x02U;
 800541a:	2302      	movs	r3, #2
 800541c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  uint8_t status_master_mainpage = 0x39U;
 8005420:	2339      	movs	r3, #57	; 0x39
 8005422:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
  uint8_t sens_hub_endop = 0x01U;
 8005426:	2301      	movs	r3, #1
 8005428:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
  uint8_t lsm6dsox_outx_h_a = 0x29U;
 800542c:	2329      	movs	r3, #41	; 0x29
 800542e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint8_t lsm6dsox_status_reg = 0x1EU;
 8005432:	231e      	movs	r3, #30
 8005434:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  uint8_t xlda = 0x01U;
 8005438:	2301      	movs	r3, #1
 800543a:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  uint8_t len = (uint8_t)Length;
 800543e:	893b      	ldrh	r3, [r7, #8]
 8005440:	b2db      	uxtb	r3, r3
 8005442:	777b      	strb	r3, [r7, #29]
  uint8_t lsm6dsox_ctrl1_xl = 0x10U;
 8005444:	2310      	movs	r3, #16
 8005446:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  uint8_t lsm6dsox_xl_prev_odr;
  uint8_t lsm6dsox_xl_odr_off = 0x00U;
 800544a:	2300      	movs	r3, #0
 800544c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint8_t lsm6dsox_xl_odr_104hz = 0x40U;
 8005450:	2340      	movs	r3, #64	; 0x40
 8005452:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  uint8_t data;
  uint8_t data_array[6];

  /* Enable access to sensor hub registers */
  if (lis2mdl_write_reg(&(pObj->Ctx), lsm6dsox_func_cfg_access, &shub_reg_access_en, 1) != LIS2MDL_OK)
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	f103 0020 	add.w	r0, r3, #32
 800545c:	f107 0221 	add.w	r2, r7, #33	; 0x21
 8005460:	f897 102f 	ldrb.w	r1, [r7, #47]	; 0x2f
 8005464:	2301      	movs	r3, #1
 8005466:	f000 fa2a 	bl	80058be <lis2mdl_write_reg>
 800546a:	4603      	mov	r3, r0
 800546c:	2b00      	cmp	r3, #0
 800546e:	d002      	beq.n	8005476 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0xa2>
  {
    return LIS2MDL_ERROR;
 8005470:	f04f 33ff 	mov.w	r3, #4294967295
 8005474:	e0e9      	b.n	800564a <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
  }

  /* Configure external device address, Enable read operation (rw_0 = 1) */
  if (lis2mdl_write_reg(&(pObj->Ctx), slv0_add, &ext_sens_addr_read, 1) != LIS2MDL_OK)
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	f103 0020 	add.w	r0, r3, #32
 800547c:	f107 021f 	add.w	r2, r7, #31
 8005480:	f897 102e 	ldrb.w	r1, [r7, #46]	; 0x2e
 8005484:	2301      	movs	r3, #1
 8005486:	f000 fa1a 	bl	80058be <lis2mdl_write_reg>
 800548a:	4603      	mov	r3, r0
 800548c:	2b00      	cmp	r3, #0
 800548e:	d002      	beq.n	8005496 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0xc2>
  {
    return LIS2MDL_ERROR;
 8005490:	f04f 33ff 	mov.w	r3, #4294967295
 8005494:	e0d9      	b.n	800564a <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
  }

  /* Configure address of the LIS2MDL register to be read */
  if (lis2mdl_write_reg(&(pObj->Ctx), slv0_subadd, &Reg, 1) != LIS2MDL_OK)
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	f103 0020 	add.w	r0, r3, #32
 800549c:	f107 020b 	add.w	r2, r7, #11
 80054a0:	f897 102d 	ldrb.w	r1, [r7, #45]	; 0x2d
 80054a4:	2301      	movs	r3, #1
 80054a6:	f000 fa0a 	bl	80058be <lis2mdl_write_reg>
 80054aa:	4603      	mov	r3, r0
 80054ac:	2b00      	cmp	r3, #0
 80054ae:	d002      	beq.n	80054b6 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0xe2>
  {
    return LIS2MDL_ERROR;
 80054b0:	f04f 33ff 	mov.w	r3, #4294967295
 80054b4:	e0c9      	b.n	800564a <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
  }

  /* Read required number of bytes (up to 6), SHUB_ODR = 104 Hz */
  if (lis2mdl_write_reg(&(pObj->Ctx), slave0_config, &len, 1) != LIS2MDL_OK)
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	f103 0020 	add.w	r0, r3, #32
 80054bc:	f107 021d 	add.w	r2, r7, #29
 80054c0:	f897 102c 	ldrb.w	r1, [r7, #44]	; 0x2c
 80054c4:	2301      	movs	r3, #1
 80054c6:	f000 f9fa 	bl	80058be <lis2mdl_write_reg>
 80054ca:	4603      	mov	r3, r0
 80054cc:	2b00      	cmp	r3, #0
 80054ce:	d002      	beq.n	80054d6 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x102>
  {
    return LIS2MDL_ERROR;
 80054d0:	f04f 33ff 	mov.w	r3, #4294967295
 80054d4:	e0b9      	b.n	800564a <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
  }

  /* WRITE_ONCE is mandatory for read, I2C master enabled using slave 0, I2C pull-ups disabled */
  if (lis2mdl_write_reg(&(pObj->Ctx), master_config, &write_once_i2c_en, 1) != LIS2MDL_OK)
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	f103 0020 	add.w	r0, r3, #32
 80054dc:	f107 021e 	add.w	r2, r7, #30
 80054e0:	f897 102b 	ldrb.w	r1, [r7, #43]	; 0x2b
 80054e4:	2301      	movs	r3, #1
 80054e6:	f000 f9ea 	bl	80058be <lis2mdl_write_reg>
 80054ea:	4603      	mov	r3, r0
 80054ec:	2b00      	cmp	r3, #0
 80054ee:	d002      	beq.n	80054f6 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x122>
  {
    return LIS2MDL_ERROR;
 80054f0:	f04f 33ff 	mov.w	r3, #4294967295
 80054f4:	e0a9      	b.n	800564a <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
  }

  /* Disable access to sensor hub registers */
  if (lis2mdl_write_reg(&(pObj->Ctx), lsm6dsox_func_cfg_access, &shub_reg_access_dis, 1) != LIS2MDL_OK)
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	f103 0020 	add.w	r0, r3, #32
 80054fc:	f107 0220 	add.w	r2, r7, #32
 8005500:	f897 102f 	ldrb.w	r1, [r7, #47]	; 0x2f
 8005504:	2301      	movs	r3, #1
 8005506:	f000 f9da 	bl	80058be <lis2mdl_write_reg>
 800550a:	4603      	mov	r3, r0
 800550c:	2b00      	cmp	r3, #0
 800550e:	d002      	beq.n	8005516 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x142>
  {
    return LIS2MDL_ERROR;
 8005510:	f04f 33ff 	mov.w	r3, #4294967295
 8005514:	e099      	b.n	800564a <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
  }

  /* Read LSM6DSOX ODR */
  if (lis2mdl_read_reg(&(pObj->Ctx), lsm6dsox_ctrl1_xl, &lsm6dsox_xl_prev_odr, 1) != LIS2MDL_OK)
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	f103 0020 	add.w	r0, r3, #32
 800551c:	f107 021c 	add.w	r2, r7, #28
 8005520:	f897 1024 	ldrb.w	r1, [r7, #36]	; 0x24
 8005524:	2301      	movs	r3, #1
 8005526:	f000 f9b2 	bl	800588e <lis2mdl_read_reg>
 800552a:	4603      	mov	r3, r0
 800552c:	2b00      	cmp	r3, #0
 800552e:	d002      	beq.n	8005536 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x162>
  {
    return LIS2MDL_ERROR;
 8005530:	f04f 33ff 	mov.w	r3, #4294967295
 8005534:	e089      	b.n	800564a <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
  }

  /* Set XL_ODR_104HZ if the accelerometer is disabled */
  if (lsm6dsox_xl_prev_odr == lsm6dsox_xl_odr_off)
 8005536:	7f3b      	ldrb	r3, [r7, #28]
 8005538:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 800553c:	429a      	cmp	r2, r3
 800553e:	d102      	bne.n	8005546 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x172>
  {
    lsm6dsox_xl_prev_odr = lsm6dsox_xl_odr_104hz;
 8005540:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8005544:	773b      	strb	r3, [r7, #28]
  }

  /* Enable accelerometer to trigger Sensor Hub operation */
  if (lis2mdl_write_reg(&(pObj->Ctx), lsm6dsox_ctrl1_xl, &lsm6dsox_xl_prev_odr, 1) != LIS2MDL_OK)
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	f103 0020 	add.w	r0, r3, #32
 800554c:	f107 021c 	add.w	r2, r7, #28
 8005550:	f897 1024 	ldrb.w	r1, [r7, #36]	; 0x24
 8005554:	2301      	movs	r3, #1
 8005556:	f000 f9b2 	bl	80058be <lis2mdl_write_reg>
 800555a:	4603      	mov	r3, r0
 800555c:	2b00      	cmp	r3, #0
 800555e:	d002      	beq.n	8005566 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x192>
  {
    return LIS2MDL_ERROR;
 8005560:	f04f 33ff 	mov.w	r3, #4294967295
 8005564:	e071      	b.n	800564a <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
  }

  /* Read ACC data starting from LSM6DSOX OUTX_H_A register to clear accelerometer data-ready XLDA */
  if (lis2mdl_read_reg(&(pObj->Ctx), lsm6dsox_outx_h_a, data_array, 6) != LIS2MDL_OK)
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	f103 0020 	add.w	r0, r3, #32
 800556c:	f107 0214 	add.w	r2, r7, #20
 8005570:	f897 1027 	ldrb.w	r1, [r7, #39]	; 0x27
 8005574:	2306      	movs	r3, #6
 8005576:	f000 f98a 	bl	800588e <lis2mdl_read_reg>
 800557a:	4603      	mov	r3, r0
 800557c:	2b00      	cmp	r3, #0
 800557e:	d002      	beq.n	8005586 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x1b2>
  {
    return LIS2MDL_ERROR;
 8005580:	f04f 33ff 	mov.w	r3, #4294967295
 8005584:	e061      	b.n	800564a <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
  }

  /* Poll LSM6DSOX LSM6DSOX_STATUS_REG until XLDA = 1 (Wait for sensor hub trigger) */
  do
  {
    if (lis2mdl_read_reg(&(pObj->Ctx), lsm6dsox_status_reg, &data, 1) != LIS2MDL_OK)
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	f103 0020 	add.w	r0, r3, #32
 800558c:	f107 021b 	add.w	r2, r7, #27
 8005590:	f897 1026 	ldrb.w	r1, [r7, #38]	; 0x26
 8005594:	2301      	movs	r3, #1
 8005596:	f000 f97a 	bl	800588e <lis2mdl_read_reg>
 800559a:	4603      	mov	r3, r0
 800559c:	2b00      	cmp	r3, #0
 800559e:	d002      	beq.n	80055a6 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x1d2>
    {
      return LIS2MDL_ERROR;
 80055a0:	f04f 33ff 	mov.w	r3, #4294967295
 80055a4:	e051      	b.n	800564a <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
    }
  } while ((data & xlda) != xlda);
 80055a6:	7efa      	ldrb	r2, [r7, #27]
 80055a8:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80055ac:	4013      	ands	r3, r2
 80055ae:	b2db      	uxtb	r3, r3
 80055b0:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
 80055b4:	429a      	cmp	r2, r3
 80055b6:	d1e6      	bne.n	8005586 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x1b2>

  /* Poll LSM6DSOX SensorHub SENS_HUB_ENDOP bit in STATUS_MASTER_MAINPAGE reg until the end of SW write operations */
  do
  {
    if (lis2mdl_read_reg(&(pObj->Ctx), status_master_mainpage, &data, 1) != LIS2MDL_OK)
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	f103 0020 	add.w	r0, r3, #32
 80055be:	f107 021b 	add.w	r2, r7, #27
 80055c2:	f897 1029 	ldrb.w	r1, [r7, #41]	; 0x29
 80055c6:	2301      	movs	r3, #1
 80055c8:	f000 f961 	bl	800588e <lis2mdl_read_reg>
 80055cc:	4603      	mov	r3, r0
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	d002      	beq.n	80055d8 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x204>
    {
      return LIS2MDL_ERROR;
 80055d2:	f04f 33ff 	mov.w	r3, #4294967295
 80055d6:	e038      	b.n	800564a <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
    }
  } while ((data & sens_hub_endop) != sens_hub_endop);
 80055d8:	7efa      	ldrb	r2, [r7, #27]
 80055da:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80055de:	4013      	ands	r3, r2
 80055e0:	b2db      	uxtb	r3, r3
 80055e2:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 80055e6:	429a      	cmp	r2, r3
 80055e8:	d1e6      	bne.n	80055b8 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x1e4>

  /* Enable access to sensor hub registers */
  if (lis2mdl_write_reg(&(pObj->Ctx), lsm6dsox_func_cfg_access, &shub_reg_access_en, 1) != LIS2MDL_OK)
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	f103 0020 	add.w	r0, r3, #32
 80055f0:	f107 0221 	add.w	r2, r7, #33	; 0x21
 80055f4:	f897 102f 	ldrb.w	r1, [r7, #47]	; 0x2f
 80055f8:	2301      	movs	r3, #1
 80055fa:	f000 f960 	bl	80058be <lis2mdl_write_reg>
 80055fe:	4603      	mov	r3, r0
 8005600:	2b00      	cmp	r3, #0
 8005602:	d002      	beq.n	800560a <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x236>
  {
    return LIS2MDL_ERROR;
 8005604:	f04f 33ff 	mov.w	r3, #4294967295
 8005608:	e01f      	b.n	800564a <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
  }

  /* Read data from LSM6DSOX SensorHub regs containing values from required LIS2MDL regs */
  if (lis2mdl_read_reg(&(pObj->Ctx), sensor_hub_1, pData, Length) != LIS2MDL_OK)
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	f103 0020 	add.w	r0, r3, #32
 8005610:	893b      	ldrh	r3, [r7, #8]
 8005612:	f897 102a 	ldrb.w	r1, [r7, #42]	; 0x2a
 8005616:	687a      	ldr	r2, [r7, #4]
 8005618:	f000 f939 	bl	800588e <lis2mdl_read_reg>
 800561c:	4603      	mov	r3, r0
 800561e:	2b00      	cmp	r3, #0
 8005620:	d002      	beq.n	8005628 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x254>
  {
    return LIS2MDL_ERROR;
 8005622:	f04f 33ff 	mov.w	r3, #4294967295
 8005626:	e010      	b.n	800564a <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
  }

  /* Disable access to sensor hub registers */
  if (lis2mdl_write_reg(&(pObj->Ctx), lsm6dsox_func_cfg_access, &shub_reg_access_dis, 1) != LIS2MDL_OK)
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	f103 0020 	add.w	r0, r3, #32
 800562e:	f107 0220 	add.w	r2, r7, #32
 8005632:	f897 102f 	ldrb.w	r1, [r7, #47]	; 0x2f
 8005636:	2301      	movs	r3, #1
 8005638:	f000 f941 	bl	80058be <lis2mdl_write_reg>
 800563c:	4603      	mov	r3, r0
 800563e:	2b00      	cmp	r3, #0
 8005640:	d002      	beq.n	8005648 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x274>
  {
    return LIS2MDL_ERROR;
 8005642:	f04f 33ff 	mov.w	r3, #4294967295
 8005646:	e000      	b.n	800564a <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
  }

  return LIS2MDL_OK;
 8005648:	2300      	movs	r3, #0
}
 800564a:	4618      	mov	r0, r3
 800564c:	3730      	adds	r7, #48	; 0x30
 800564e:	46bd      	mov	sp, r7
 8005650:	bd80      	pop	{r7, pc}

08005652 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData>:
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData(LIS2MDL_Object_t *pObj, uint8_t Reg, uint8_t *pData,
                                                      uint16_t Length)
{
 8005652:	b580      	push	{r7, lr}
 8005654:	b08c      	sub	sp, #48	; 0x30
 8005656:	af00      	add	r7, sp, #0
 8005658:	60f8      	str	r0, [r7, #12]
 800565a:	607a      	str	r2, [r7, #4]
 800565c:	461a      	mov	r2, r3
 800565e:	460b      	mov	r3, r1
 8005660:	72fb      	strb	r3, [r7, #11]
 8005662:	4613      	mov	r3, r2
 8005664:	813b      	strh	r3, [r7, #8]
  uint8_t lsm6dsox_func_cfg_access = 0x01U;
 8005666:	2301      	movs	r3, #1
 8005668:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  uint8_t shub_reg_access_en = 0x40U;
 800566c:	2340      	movs	r3, #64	; 0x40
 800566e:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
  uint8_t shub_reg_access_dis = 0x00U;
 8005672:	2300      	movs	r3, #0
 8005674:	f887 3020 	strb.w	r3, [r7, #32]
  uint8_t ext_sens_addr_write = LIS2MDL_I2C_ADD & 0xFEU;
 8005678:	233c      	movs	r3, #60	; 0x3c
 800567a:	77fb      	strb	r3, [r7, #31]
  uint8_t slv0_add = 0x15U;
 800567c:	2315      	movs	r3, #21
 800567e:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
  uint8_t slv0_subadd = 0x16U;
 8005682:	2316      	movs	r3, #22
 8005684:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  uint8_t slave0_config = 0x17U;
 8005688:	2317      	movs	r3, #23
 800568a:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  uint8_t shub_odr_104 = 0x00U;
 800568e:	2300      	movs	r3, #0
 8005690:	77bb      	strb	r3, [r7, #30]
  uint8_t master_config = 0x14U;
 8005692:	2314      	movs	r3, #20
 8005694:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
  uint8_t write_once_i2c_en = 0x44U;
 8005698:	2344      	movs	r3, #68	; 0x44
 800569a:	777b      	strb	r3, [r7, #29]
  uint8_t status_master_mainpage = 0x39U;
 800569c:	2339      	movs	r3, #57	; 0x39
 800569e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  uint8_t wr_once_done = 0x80U;
 80056a2:	2380      	movs	r3, #128	; 0x80
 80056a4:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
  uint8_t lsm6dsox_outx_h_a = 0x29U;
 80056a8:	2329      	movs	r3, #41	; 0x29
 80056aa:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
  uint8_t lsm6dsox_status_reg = 0x1EU;
 80056ae:	231e      	movs	r3, #30
 80056b0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint8_t xlda = 0x01U;
 80056b4:	2301      	movs	r3, #1
 80056b6:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  uint8_t lsm6dsox_ctrl1_xl = 0x10U;
 80056ba:	2310      	movs	r3, #16
 80056bc:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  uint8_t lsm6dsox_xl_prev_odr;
  uint8_t lsm6dsox_xl_odr_off = 0x00U;
 80056c0:	2300      	movs	r3, #0
 80056c2:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  uint8_t lsm6dsox_xl_odr_104hz = 0x40U;
 80056c6:	2340      	movs	r3, #64	; 0x40
 80056c8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint8_t datawrite_slv0 = 0x0EU;
 80056cc:	230e      	movs	r3, #14
 80056ce:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  uint8_t data;
  uint8_t data_array[6];

  /* Enable access to sensor hub registers */
  if (lis2mdl_write_reg(&(pObj->Ctx), lsm6dsox_func_cfg_access, &shub_reg_access_en, 1) != LIS2MDL_OK)
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	f103 0020 	add.w	r0, r3, #32
 80056d8:	f107 0221 	add.w	r2, r7, #33	; 0x21
 80056dc:	f897 102f 	ldrb.w	r1, [r7, #47]	; 0x2f
 80056e0:	2301      	movs	r3, #1
 80056e2:	f000 f8ec 	bl	80058be <lis2mdl_write_reg>
 80056e6:	4603      	mov	r3, r0
 80056e8:	2b00      	cmp	r3, #0
 80056ea:	d002      	beq.n	80056f2 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0xa0>
  {
    return LIS2MDL_ERROR;
 80056ec:	f04f 33ff 	mov.w	r3, #4294967295
 80056f0:	e0c9      	b.n	8005886 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x234>
  }

  /* Configure external device address, Enable write operation (rw_0 = 0) */
  if (lis2mdl_write_reg(&(pObj->Ctx), slv0_add, &ext_sens_addr_write, 1) != LIS2MDL_OK)
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	f103 0020 	add.w	r0, r3, #32
 80056f8:	f107 021f 	add.w	r2, r7, #31
 80056fc:	f897 102e 	ldrb.w	r1, [r7, #46]	; 0x2e
 8005700:	2301      	movs	r3, #1
 8005702:	f000 f8dc 	bl	80058be <lis2mdl_write_reg>
 8005706:	4603      	mov	r3, r0
 8005708:	2b00      	cmp	r3, #0
 800570a:	d002      	beq.n	8005712 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0xc0>
  {
    return LIS2MDL_ERROR;
 800570c:	f04f 33ff 	mov.w	r3, #4294967295
 8005710:	e0b9      	b.n	8005886 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x234>
  }

  /* Configure address of the LIS2MDL register to be written to */
  if (lis2mdl_write_reg(&(pObj->Ctx), slv0_subadd, &Reg, 1) != LIS2MDL_OK)
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	f103 0020 	add.w	r0, r3, #32
 8005718:	f107 020b 	add.w	r2, r7, #11
 800571c:	f897 102d 	ldrb.w	r1, [r7, #45]	; 0x2d
 8005720:	2301      	movs	r3, #1
 8005722:	f000 f8cc 	bl	80058be <lis2mdl_write_reg>
 8005726:	4603      	mov	r3, r0
 8005728:	2b00      	cmp	r3, #0
 800572a:	d002      	beq.n	8005732 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0xe0>
  {
    return LIS2MDL_ERROR;
 800572c:	f04f 33ff 	mov.w	r3, #4294967295
 8005730:	e0a9      	b.n	8005886 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x234>
  }

  /* Set SHUB_ODR = 104 Hz */
  if (lis2mdl_write_reg(&(pObj->Ctx), slave0_config, &shub_odr_104, 1) != LIS2MDL_OK)
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	f103 0020 	add.w	r0, r3, #32
 8005738:	f107 021e 	add.w	r2, r7, #30
 800573c:	f897 102c 	ldrb.w	r1, [r7, #44]	; 0x2c
 8005740:	2301      	movs	r3, #1
 8005742:	f000 f8bc 	bl	80058be <lis2mdl_write_reg>
 8005746:	4603      	mov	r3, r0
 8005748:	2b00      	cmp	r3, #0
 800574a:	d002      	beq.n	8005752 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x100>
  {
    return LIS2MDL_ERROR;
 800574c:	f04f 33ff 	mov.w	r3, #4294967295
 8005750:	e099      	b.n	8005886 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x234>
  }

  /* Store data to be written to LIS2MDL in LSM6DSOX SH reg */
  if (lis2mdl_write_reg(&(pObj->Ctx), datawrite_slv0, pData, 1) != LIS2MDL_OK)
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	f103 0020 	add.w	r0, r3, #32
 8005758:	f897 1022 	ldrb.w	r1, [r7, #34]	; 0x22
 800575c:	2301      	movs	r3, #1
 800575e:	687a      	ldr	r2, [r7, #4]
 8005760:	f000 f8ad 	bl	80058be <lis2mdl_write_reg>
 8005764:	4603      	mov	r3, r0
 8005766:	2b00      	cmp	r3, #0
 8005768:	d002      	beq.n	8005770 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x11e>
  {
    return LIS2MDL_ERROR;
 800576a:	f04f 33ff 	mov.w	r3, #4294967295
 800576e:	e08a      	b.n	8005886 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x234>
  }

  /* WRITE_ONCE enabled for single write, I2C master enabled using slave 0, I2C pull-ups disabled */
  if (lis2mdl_write_reg(&(pObj->Ctx), master_config, &write_once_i2c_en, 1) != LIS2MDL_OK)
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	f103 0020 	add.w	r0, r3, #32
 8005776:	f107 021d 	add.w	r2, r7, #29
 800577a:	f897 102b 	ldrb.w	r1, [r7, #43]	; 0x2b
 800577e:	2301      	movs	r3, #1
 8005780:	f000 f89d 	bl	80058be <lis2mdl_write_reg>
 8005784:	4603      	mov	r3, r0
 8005786:	2b00      	cmp	r3, #0
 8005788:	d002      	beq.n	8005790 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x13e>
  {
    return LIS2MDL_ERROR;
 800578a:	f04f 33ff 	mov.w	r3, #4294967295
 800578e:	e07a      	b.n	8005886 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x234>
  }

  /* Disable access to sensor hub registers */
  if (lis2mdl_write_reg(&(pObj->Ctx), lsm6dsox_func_cfg_access, &shub_reg_access_dis, 1) != LIS2MDL_OK)
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	f103 0020 	add.w	r0, r3, #32
 8005796:	f107 0220 	add.w	r2, r7, #32
 800579a:	f897 102f 	ldrb.w	r1, [r7, #47]	; 0x2f
 800579e:	2301      	movs	r3, #1
 80057a0:	f000 f88d 	bl	80058be <lis2mdl_write_reg>
 80057a4:	4603      	mov	r3, r0
 80057a6:	2b00      	cmp	r3, #0
 80057a8:	d002      	beq.n	80057b0 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x15e>
  {
    return LIS2MDL_ERROR;
 80057aa:	f04f 33ff 	mov.w	r3, #4294967295
 80057ae:	e06a      	b.n	8005886 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x234>
  }

  /* Read LSM6DSOX ODR */
  if (lis2mdl_read_reg(&(pObj->Ctx), lsm6dsox_ctrl1_xl, &lsm6dsox_xl_prev_odr, 1) != LIS2MDL_OK)
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	f103 0020 	add.w	r0, r3, #32
 80057b6:	f107 021c 	add.w	r2, r7, #28
 80057ba:	f897 1025 	ldrb.w	r1, [r7, #37]	; 0x25
 80057be:	2301      	movs	r3, #1
 80057c0:	f000 f865 	bl	800588e <lis2mdl_read_reg>
 80057c4:	4603      	mov	r3, r0
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	d002      	beq.n	80057d0 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x17e>
  {
    return LIS2MDL_ERROR;
 80057ca:	f04f 33ff 	mov.w	r3, #4294967295
 80057ce:	e05a      	b.n	8005886 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x234>
  }

  /* Set XL_ODR_104HZ if the accelerometer is disabled */
  if (lsm6dsox_xl_prev_odr == lsm6dsox_xl_odr_off)
 80057d0:	7f3b      	ldrb	r3, [r7, #28]
 80057d2:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 80057d6:	429a      	cmp	r2, r3
 80057d8:	d102      	bne.n	80057e0 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x18e>
  {
    lsm6dsox_xl_prev_odr = lsm6dsox_xl_odr_104hz;
 80057da:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80057de:	773b      	strb	r3, [r7, #28]
  }

  /* Enable accelerometer to trigger Sensor Hub operation */
  if (lis2mdl_write_reg(&(pObj->Ctx), lsm6dsox_ctrl1_xl, &lsm6dsox_xl_prev_odr, 1) != LIS2MDL_OK)
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	f103 0020 	add.w	r0, r3, #32
 80057e6:	f107 021c 	add.w	r2, r7, #28
 80057ea:	f897 1025 	ldrb.w	r1, [r7, #37]	; 0x25
 80057ee:	2301      	movs	r3, #1
 80057f0:	f000 f865 	bl	80058be <lis2mdl_write_reg>
 80057f4:	4603      	mov	r3, r0
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	d002      	beq.n	8005800 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x1ae>
  {
    return LIS2MDL_ERROR;
 80057fa:	f04f 33ff 	mov.w	r3, #4294967295
 80057fe:	e042      	b.n	8005886 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x234>
  }

  /* Read ACC data starting from LSM6DSOX OUTX_H_A register to clear accelerometer data-ready XLDA */
  if (lis2mdl_read_reg(&(pObj->Ctx), lsm6dsox_outx_h_a, data_array, 6) != LIS2MDL_OK)
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	f103 0020 	add.w	r0, r3, #32
 8005806:	f107 0214 	add.w	r2, r7, #20
 800580a:	f897 1028 	ldrb.w	r1, [r7, #40]	; 0x28
 800580e:	2306      	movs	r3, #6
 8005810:	f000 f83d 	bl	800588e <lis2mdl_read_reg>
 8005814:	4603      	mov	r3, r0
 8005816:	2b00      	cmp	r3, #0
 8005818:	d002      	beq.n	8005820 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x1ce>
  {
    return LIS2MDL_ERROR;
 800581a:	f04f 33ff 	mov.w	r3, #4294967295
 800581e:	e032      	b.n	8005886 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x234>
  }

  /* Poll LSM6DSOX LSM6DSOX_STATUS_REG until XLDA = 1 (Wait for sensor hub trigger) */
  do
  {
    if (lis2mdl_read_reg(&(pObj->Ctx), lsm6dsox_status_reg, &data, 1) != LIS2MDL_OK)
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	f103 0020 	add.w	r0, r3, #32
 8005826:	f107 021b 	add.w	r2, r7, #27
 800582a:	f897 1027 	ldrb.w	r1, [r7, #39]	; 0x27
 800582e:	2301      	movs	r3, #1
 8005830:	f000 f82d 	bl	800588e <lis2mdl_read_reg>
 8005834:	4603      	mov	r3, r0
 8005836:	2b00      	cmp	r3, #0
 8005838:	d002      	beq.n	8005840 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x1ee>
    {
      return LIS2MDL_ERROR;
 800583a:	f04f 33ff 	mov.w	r3, #4294967295
 800583e:	e022      	b.n	8005886 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x234>
    }
  } while ((data & xlda) != xlda);
 8005840:	7efa      	ldrb	r2, [r7, #27]
 8005842:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8005846:	4013      	ands	r3, r2
 8005848:	b2db      	uxtb	r3, r3
 800584a:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800584e:	429a      	cmp	r2, r3
 8005850:	d1e6      	bne.n	8005820 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x1ce>

  /* Poll LSM6DSOX SensorHub WR_ONCE_DONE bit in STATUS_MASTER_MAINPAGE reg until the end of SW write operations */
  do
  {
    if (lis2mdl_read_reg(&(pObj->Ctx), status_master_mainpage, &data, 1) != LIS2MDL_OK)
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	f103 0020 	add.w	r0, r3, #32
 8005858:	f107 021b 	add.w	r2, r7, #27
 800585c:	f897 102a 	ldrb.w	r1, [r7, #42]	; 0x2a
 8005860:	2301      	movs	r3, #1
 8005862:	f000 f814 	bl	800588e <lis2mdl_read_reg>
 8005866:	4603      	mov	r3, r0
 8005868:	2b00      	cmp	r3, #0
 800586a:	d002      	beq.n	8005872 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x220>
    {
      return LIS2MDL_ERROR;
 800586c:	f04f 33ff 	mov.w	r3, #4294967295
 8005870:	e009      	b.n	8005886 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x234>
    }
  } while ((data & wr_once_done) != wr_once_done);
 8005872:	7efa      	ldrb	r2, [r7, #27]
 8005874:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8005878:	4013      	ands	r3, r2
 800587a:	b2db      	uxtb	r3, r3
 800587c:	f897 2029 	ldrb.w	r2, [r7, #41]	; 0x29
 8005880:	429a      	cmp	r2, r3
 8005882:	d1e6      	bne.n	8005852 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x200>

  return LIS2MDL_OK;
 8005884:	2300      	movs	r3, #0
}
 8005886:	4618      	mov	r0, r3
 8005888:	3730      	adds	r7, #48	; 0x30
 800588a:	46bd      	mov	sp, r7
 800588c:	bd80      	pop	{r7, pc}

0800588e <lis2mdl_read_reg>:
  *
  */
int32_t lis2mdl_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                         uint8_t *data,
                         uint16_t len)
{
 800588e:	b590      	push	{r4, r7, lr}
 8005890:	b087      	sub	sp, #28
 8005892:	af00      	add	r7, sp, #0
 8005894:	60f8      	str	r0, [r7, #12]
 8005896:	607a      	str	r2, [r7, #4]
 8005898:	461a      	mov	r2, r3
 800589a:	460b      	mov	r3, r1
 800589c:	72fb      	strb	r3, [r7, #11]
 800589e:	4613      	mov	r3, r2
 80058a0:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	685c      	ldr	r4, [r3, #4]
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	68d8      	ldr	r0, [r3, #12]
 80058aa:	893b      	ldrh	r3, [r7, #8]
 80058ac:	7af9      	ldrb	r1, [r7, #11]
 80058ae:	687a      	ldr	r2, [r7, #4]
 80058b0:	47a0      	blx	r4
 80058b2:	6178      	str	r0, [r7, #20]

  return ret;
 80058b4:	697b      	ldr	r3, [r7, #20]
}
 80058b6:	4618      	mov	r0, r3
 80058b8:	371c      	adds	r7, #28
 80058ba:	46bd      	mov	sp, r7
 80058bc:	bd90      	pop	{r4, r7, pc}

080058be <lis2mdl_write_reg>:
  *
  */
int32_t lis2mdl_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                          uint8_t *data,
                          uint16_t len)
{
 80058be:	b590      	push	{r4, r7, lr}
 80058c0:	b087      	sub	sp, #28
 80058c2:	af00      	add	r7, sp, #0
 80058c4:	60f8      	str	r0, [r7, #12]
 80058c6:	607a      	str	r2, [r7, #4]
 80058c8:	461a      	mov	r2, r3
 80058ca:	460b      	mov	r3, r1
 80058cc:	72fb      	strb	r3, [r7, #11]
 80058ce:	4613      	mov	r3, r2
 80058d0:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	681c      	ldr	r4, [r3, #0]
 80058d6:	68fb      	ldr	r3, [r7, #12]
 80058d8:	68d8      	ldr	r0, [r3, #12]
 80058da:	893b      	ldrh	r3, [r7, #8]
 80058dc:	7af9      	ldrb	r1, [r7, #11]
 80058de:	687a      	ldr	r2, [r7, #4]
 80058e0:	47a0      	blx	r4
 80058e2:	6178      	str	r0, [r7, #20]

  return ret;
 80058e4:	697b      	ldr	r3, [r7, #20]
}
 80058e6:	4618      	mov	r0, r3
 80058e8:	371c      	adds	r7, #28
 80058ea:	46bd      	mov	sp, r7
 80058ec:	bd90      	pop	{r4, r7, pc}

080058ee <lis2mdl_operating_mode_set>:
  * @retval        interface status.(MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2mdl_operating_mode_set(stmdev_ctx_t *ctx,
                                   lis2mdl_md_t val)
{
 80058ee:	b580      	push	{r7, lr}
 80058f0:	b084      	sub	sp, #16
 80058f2:	af00      	add	r7, sp, #0
 80058f4:	6078      	str	r0, [r7, #4]
 80058f6:	460b      	mov	r3, r1
 80058f8:	70fb      	strb	r3, [r7, #3]
  lis2mdl_cfg_reg_a_t reg;
  int32_t ret;

  ret = lis2mdl_read_reg(ctx, LIS2MDL_CFG_REG_A, (uint8_t *)&reg, 1);
 80058fa:	f107 0208 	add.w	r2, r7, #8
 80058fe:	2301      	movs	r3, #1
 8005900:	2160      	movs	r1, #96	; 0x60
 8005902:	6878      	ldr	r0, [r7, #4]
 8005904:	f7ff ffc3 	bl	800588e <lis2mdl_read_reg>
 8005908:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	2b00      	cmp	r3, #0
 800590e:	d10f      	bne.n	8005930 <lis2mdl_operating_mode_set+0x42>
  {
    reg.md = (uint8_t)val;
 8005910:	78fb      	ldrb	r3, [r7, #3]
 8005912:	f003 0303 	and.w	r3, r3, #3
 8005916:	b2da      	uxtb	r2, r3
 8005918:	7a3b      	ldrb	r3, [r7, #8]
 800591a:	f362 0301 	bfi	r3, r2, #0, #2
 800591e:	723b      	strb	r3, [r7, #8]
    ret = lis2mdl_write_reg(ctx, LIS2MDL_CFG_REG_A, (uint8_t *)&reg, 1);
 8005920:	f107 0208 	add.w	r2, r7, #8
 8005924:	2301      	movs	r3, #1
 8005926:	2160      	movs	r1, #96	; 0x60
 8005928:	6878      	ldr	r0, [r7, #4]
 800592a:	f7ff ffc8 	bl	80058be <lis2mdl_write_reg>
 800592e:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8005930:	68fb      	ldr	r3, [r7, #12]
}
 8005932:	4618      	mov	r0, r3
 8005934:	3710      	adds	r7, #16
 8005936:	46bd      	mov	sp, r7
 8005938:	bd80      	pop	{r7, pc}

0800593a <lis2mdl_data_rate_set>:
  * @param  val   change the values of odr in reg CFG_REG_A
  * @retval       interface status.(MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2mdl_data_rate_set(stmdev_ctx_t *ctx, lis2mdl_odr_t val)
{
 800593a:	b580      	push	{r7, lr}
 800593c:	b084      	sub	sp, #16
 800593e:	af00      	add	r7, sp, #0
 8005940:	6078      	str	r0, [r7, #4]
 8005942:	460b      	mov	r3, r1
 8005944:	70fb      	strb	r3, [r7, #3]
  lis2mdl_cfg_reg_a_t reg;
  int32_t ret;

  ret = lis2mdl_read_reg(ctx, LIS2MDL_CFG_REG_A, (uint8_t *)&reg, 1);
 8005946:	f107 0208 	add.w	r2, r7, #8
 800594a:	2301      	movs	r3, #1
 800594c:	2160      	movs	r1, #96	; 0x60
 800594e:	6878      	ldr	r0, [r7, #4]
 8005950:	f7ff ff9d 	bl	800588e <lis2mdl_read_reg>
 8005954:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	2b00      	cmp	r3, #0
 800595a:	d10f      	bne.n	800597c <lis2mdl_data_rate_set+0x42>
  {
    reg.odr = (uint8_t)val;
 800595c:	78fb      	ldrb	r3, [r7, #3]
 800595e:	f003 0303 	and.w	r3, r3, #3
 8005962:	b2da      	uxtb	r2, r3
 8005964:	7a3b      	ldrb	r3, [r7, #8]
 8005966:	f362 0383 	bfi	r3, r2, #2, #2
 800596a:	723b      	strb	r3, [r7, #8]
    ret = lis2mdl_write_reg(ctx, LIS2MDL_CFG_REG_A, (uint8_t *)&reg, 1);
 800596c:	f107 0208 	add.w	r2, r7, #8
 8005970:	2301      	movs	r3, #1
 8005972:	2160      	movs	r1, #96	; 0x60
 8005974:	6878      	ldr	r0, [r7, #4]
 8005976:	f7ff ffa2 	bl	80058be <lis2mdl_write_reg>
 800597a:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 800597c:	68fb      	ldr	r3, [r7, #12]
}
 800597e:	4618      	mov	r0, r3
 8005980:	3710      	adds	r7, #16
 8005982:	46bd      	mov	sp, r7
 8005984:	bd80      	pop	{r7, pc}
	...

08005988 <lis2mdl_data_rate_get>:
  * @param  val   Get the values of odr in reg CFG_REG_A.(ptr)
  * @retval       interface status.(MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2mdl_data_rate_get(stmdev_ctx_t *ctx, lis2mdl_odr_t *val)
{
 8005988:	b580      	push	{r7, lr}
 800598a:	b084      	sub	sp, #16
 800598c:	af00      	add	r7, sp, #0
 800598e:	6078      	str	r0, [r7, #4]
 8005990:	6039      	str	r1, [r7, #0]
  lis2mdl_cfg_reg_a_t reg;
  int32_t ret;

  ret = lis2mdl_read_reg(ctx, LIS2MDL_CFG_REG_A, (uint8_t *)&reg, 1);
 8005992:	f107 0208 	add.w	r2, r7, #8
 8005996:	2301      	movs	r3, #1
 8005998:	2160      	movs	r1, #96	; 0x60
 800599a:	6878      	ldr	r0, [r7, #4]
 800599c:	f7ff ff77 	bl	800588e <lis2mdl_read_reg>
 80059a0:	60f8      	str	r0, [r7, #12]

  switch (reg.odr)
 80059a2:	7a3b      	ldrb	r3, [r7, #8]
 80059a4:	f3c3 0381 	ubfx	r3, r3, #2, #2
 80059a8:	b2db      	uxtb	r3, r3
 80059aa:	2b03      	cmp	r3, #3
 80059ac:	d81a      	bhi.n	80059e4 <lis2mdl_data_rate_get+0x5c>
 80059ae:	a201      	add	r2, pc, #4	; (adr r2, 80059b4 <lis2mdl_data_rate_get+0x2c>)
 80059b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80059b4:	080059c5 	.word	0x080059c5
 80059b8:	080059cd 	.word	0x080059cd
 80059bc:	080059d5 	.word	0x080059d5
 80059c0:	080059dd 	.word	0x080059dd
  {
    case LIS2MDL_ODR_10Hz:
      *val = LIS2MDL_ODR_10Hz;
 80059c4:	683b      	ldr	r3, [r7, #0]
 80059c6:	2200      	movs	r2, #0
 80059c8:	701a      	strb	r2, [r3, #0]
      break;
 80059ca:	e00f      	b.n	80059ec <lis2mdl_data_rate_get+0x64>

    case LIS2MDL_ODR_20Hz:
      *val = LIS2MDL_ODR_20Hz;
 80059cc:	683b      	ldr	r3, [r7, #0]
 80059ce:	2201      	movs	r2, #1
 80059d0:	701a      	strb	r2, [r3, #0]
      break;
 80059d2:	e00b      	b.n	80059ec <lis2mdl_data_rate_get+0x64>

    case LIS2MDL_ODR_50Hz:
      *val = LIS2MDL_ODR_50Hz;
 80059d4:	683b      	ldr	r3, [r7, #0]
 80059d6:	2202      	movs	r2, #2
 80059d8:	701a      	strb	r2, [r3, #0]
      break;
 80059da:	e007      	b.n	80059ec <lis2mdl_data_rate_get+0x64>

    case LIS2MDL_ODR_100Hz:
      *val = LIS2MDL_ODR_100Hz;
 80059dc:	683b      	ldr	r3, [r7, #0]
 80059de:	2203      	movs	r2, #3
 80059e0:	701a      	strb	r2, [r3, #0]
      break;
 80059e2:	e003      	b.n	80059ec <lis2mdl_data_rate_get+0x64>

    default:
      *val = LIS2MDL_ODR_10Hz;
 80059e4:	683b      	ldr	r3, [r7, #0]
 80059e6:	2200      	movs	r2, #0
 80059e8:	701a      	strb	r2, [r3, #0]
      break;
 80059ea:	bf00      	nop
  }

  return ret;
 80059ec:	68fb      	ldr	r3, [r7, #12]
}
 80059ee:	4618      	mov	r0, r3
 80059f0:	3710      	adds	r7, #16
 80059f2:	46bd      	mov	sp, r7
 80059f4:	bd80      	pop	{r7, pc}
 80059f6:	bf00      	nop

080059f8 <lis2mdl_block_data_update_set>:
  * @param  val   change the values of bdu in reg CFG_REG_C
  * @retval       interface status.(MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2mdl_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
 80059f8:	b580      	push	{r7, lr}
 80059fa:	b084      	sub	sp, #16
 80059fc:	af00      	add	r7, sp, #0
 80059fe:	6078      	str	r0, [r7, #4]
 8005a00:	460b      	mov	r3, r1
 8005a02:	70fb      	strb	r3, [r7, #3]
  lis2mdl_cfg_reg_c_t reg;
  int32_t ret;

  ret = lis2mdl_read_reg(ctx, LIS2MDL_CFG_REG_C, (uint8_t *)&reg, 1);
 8005a04:	f107 0208 	add.w	r2, r7, #8
 8005a08:	2301      	movs	r3, #1
 8005a0a:	2162      	movs	r1, #98	; 0x62
 8005a0c:	6878      	ldr	r0, [r7, #4]
 8005a0e:	f7ff ff3e 	bl	800588e <lis2mdl_read_reg>
 8005a12:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	d10f      	bne.n	8005a3a <lis2mdl_block_data_update_set+0x42>
  {
    reg.bdu = val;
 8005a1a:	78fb      	ldrb	r3, [r7, #3]
 8005a1c:	f003 0301 	and.w	r3, r3, #1
 8005a20:	b2da      	uxtb	r2, r3
 8005a22:	7a3b      	ldrb	r3, [r7, #8]
 8005a24:	f362 1304 	bfi	r3, r2, #4, #1
 8005a28:	723b      	strb	r3, [r7, #8]
    ret = lis2mdl_write_reg(ctx, LIS2MDL_CFG_REG_C, (uint8_t *)&reg, 1);
 8005a2a:	f107 0208 	add.w	r2, r7, #8
 8005a2e:	2301      	movs	r3, #1
 8005a30:	2162      	movs	r1, #98	; 0x62
 8005a32:	6878      	ldr	r0, [r7, #4]
 8005a34:	f7ff ff43 	bl	80058be <lis2mdl_write_reg>
 8005a38:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8005a3a:	68fb      	ldr	r3, [r7, #12]
}
 8005a3c:	4618      	mov	r0, r3
 8005a3e:	3710      	adds	r7, #16
 8005a40:	46bd      	mov	sp, r7
 8005a42:	bd80      	pop	{r7, pc}

08005a44 <lis2mdl_magnetic_raw_get>:
  * @param  buff  that stores data read
  * @retval       interface status.(MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2mdl_magnetic_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 8005a44:	b580      	push	{r7, lr}
 8005a46:	b086      	sub	sp, #24
 8005a48:	af00      	add	r7, sp, #0
 8005a4a:	6078      	str	r0, [r7, #4]
 8005a4c:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;

  ret = lis2mdl_read_reg(ctx, LIS2MDL_OUTX_L_REG, buff, 6);
 8005a4e:	f107 020c 	add.w	r2, r7, #12
 8005a52:	2306      	movs	r3, #6
 8005a54:	2168      	movs	r1, #104	; 0x68
 8005a56:	6878      	ldr	r0, [r7, #4]
 8005a58:	f7ff ff19 	bl	800588e <lis2mdl_read_reg>
 8005a5c:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 8005a5e:	7b7b      	ldrb	r3, [r7, #13]
 8005a60:	b21a      	sxth	r2, r3
 8005a62:	683b      	ldr	r3, [r7, #0]
 8005a64:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 8005a66:	683b      	ldr	r3, [r7, #0]
 8005a68:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005a6c:	b29b      	uxth	r3, r3
 8005a6e:	021b      	lsls	r3, r3, #8
 8005a70:	b29a      	uxth	r2, r3
 8005a72:	7b3b      	ldrb	r3, [r7, #12]
 8005a74:	b29b      	uxth	r3, r3
 8005a76:	4413      	add	r3, r2
 8005a78:	b29b      	uxth	r3, r3
 8005a7a:	b21a      	sxth	r2, r3
 8005a7c:	683b      	ldr	r3, [r7, #0]
 8005a7e:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 8005a80:	7bfa      	ldrb	r2, [r7, #15]
 8005a82:	683b      	ldr	r3, [r7, #0]
 8005a84:	3302      	adds	r3, #2
 8005a86:	b212      	sxth	r2, r2
 8005a88:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 8005a8a:	683b      	ldr	r3, [r7, #0]
 8005a8c:	3302      	adds	r3, #2
 8005a8e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005a92:	b29b      	uxth	r3, r3
 8005a94:	021b      	lsls	r3, r3, #8
 8005a96:	b29a      	uxth	r2, r3
 8005a98:	7bbb      	ldrb	r3, [r7, #14]
 8005a9a:	b29b      	uxth	r3, r3
 8005a9c:	4413      	add	r3, r2
 8005a9e:	b29a      	uxth	r2, r3
 8005aa0:	683b      	ldr	r3, [r7, #0]
 8005aa2:	3302      	adds	r3, #2
 8005aa4:	b212      	sxth	r2, r2
 8005aa6:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 8005aa8:	7c7a      	ldrb	r2, [r7, #17]
 8005aaa:	683b      	ldr	r3, [r7, #0]
 8005aac:	3304      	adds	r3, #4
 8005aae:	b212      	sxth	r2, r2
 8005ab0:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 8005ab2:	683b      	ldr	r3, [r7, #0]
 8005ab4:	3304      	adds	r3, #4
 8005ab6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005aba:	b29b      	uxth	r3, r3
 8005abc:	021b      	lsls	r3, r3, #8
 8005abe:	b29a      	uxth	r2, r3
 8005ac0:	7c3b      	ldrb	r3, [r7, #16]
 8005ac2:	b29b      	uxth	r3, r3
 8005ac4:	4413      	add	r3, r2
 8005ac6:	b29a      	uxth	r2, r3
 8005ac8:	683b      	ldr	r3, [r7, #0]
 8005aca:	3304      	adds	r3, #4
 8005acc:	b212      	sxth	r2, r2
 8005ace:	801a      	strh	r2, [r3, #0]

  return ret;
 8005ad0:	697b      	ldr	r3, [r7, #20]
}
 8005ad2:	4618      	mov	r0, r3
 8005ad4:	3718      	adds	r7, #24
 8005ad6:	46bd      	mov	sp, r7
 8005ad8:	bd80      	pop	{r7, pc}

08005ada <lis2mdl_device_id_get>:
  * @param  buff  that stores data read
  * @retval       interface status.(MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2mdl_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 8005ada:	b580      	push	{r7, lr}
 8005adc:	b084      	sub	sp, #16
 8005ade:	af00      	add	r7, sp, #0
 8005ae0:	6078      	str	r0, [r7, #4]
 8005ae2:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = lis2mdl_read_reg(ctx, LIS2MDL_WHO_AM_I, buff, 1);
 8005ae4:	2301      	movs	r3, #1
 8005ae6:	683a      	ldr	r2, [r7, #0]
 8005ae8:	214f      	movs	r1, #79	; 0x4f
 8005aea:	6878      	ldr	r0, [r7, #4]
 8005aec:	f7ff fecf 	bl	800588e <lis2mdl_read_reg>
 8005af0:	60f8      	str	r0, [r7, #12]

  return ret;
 8005af2:	68fb      	ldr	r3, [r7, #12]
}
 8005af4:	4618      	mov	r0, r3
 8005af6:	3710      	adds	r7, #16
 8005af8:	46bd      	mov	sp, r7
 8005afa:	bd80      	pop	{r7, pc}

08005afc <lis2mdl_self_test_set>:
  * @param  val   change the values of self_test in reg CFG_REG_C
  * @retval       interface status.(MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2mdl_self_test_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8005afc:	b580      	push	{r7, lr}
 8005afe:	b084      	sub	sp, #16
 8005b00:	af00      	add	r7, sp, #0
 8005b02:	6078      	str	r0, [r7, #4]
 8005b04:	460b      	mov	r3, r1
 8005b06:	70fb      	strb	r3, [r7, #3]
  lis2mdl_cfg_reg_c_t reg;
  int32_t ret;

  ret = lis2mdl_read_reg(ctx, LIS2MDL_CFG_REG_C, (uint8_t *)&reg, 1);
 8005b08:	f107 0208 	add.w	r2, r7, #8
 8005b0c:	2301      	movs	r3, #1
 8005b0e:	2162      	movs	r1, #98	; 0x62
 8005b10:	6878      	ldr	r0, [r7, #4]
 8005b12:	f7ff febc 	bl	800588e <lis2mdl_read_reg>
 8005b16:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	2b00      	cmp	r3, #0
 8005b1c:	d10f      	bne.n	8005b3e <lis2mdl_self_test_set+0x42>
  {
    reg.self_test = val;
 8005b1e:	78fb      	ldrb	r3, [r7, #3]
 8005b20:	f003 0301 	and.w	r3, r3, #1
 8005b24:	b2da      	uxtb	r2, r3
 8005b26:	7a3b      	ldrb	r3, [r7, #8]
 8005b28:	f362 0341 	bfi	r3, r2, #1, #1
 8005b2c:	723b      	strb	r3, [r7, #8]
    ret = lis2mdl_write_reg(ctx, LIS2MDL_CFG_REG_C, (uint8_t *)&reg, 1);
 8005b2e:	f107 0208 	add.w	r2, r7, #8
 8005b32:	2301      	movs	r3, #1
 8005b34:	2162      	movs	r1, #98	; 0x62
 8005b36:	6878      	ldr	r0, [r7, #4]
 8005b38:	f7ff fec1 	bl	80058be <lis2mdl_write_reg>
 8005b3c:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8005b3e:	68fb      	ldr	r3, [r7, #12]
}
 8005b40:	4618      	mov	r0, r3
 8005b42:	3710      	adds	r7, #16
 8005b44:	46bd      	mov	sp, r7
 8005b46:	bd80      	pop	{r7, pc}

08005b48 <lis2mdl_i2c_interface_set>:
  * @retval       interface status.(MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2mdl_i2c_interface_set(stmdev_ctx_t *ctx,
                                  lis2mdl_i2c_dis_t val)
{
 8005b48:	b580      	push	{r7, lr}
 8005b4a:	b084      	sub	sp, #16
 8005b4c:	af00      	add	r7, sp, #0
 8005b4e:	6078      	str	r0, [r7, #4]
 8005b50:	460b      	mov	r3, r1
 8005b52:	70fb      	strb	r3, [r7, #3]
  lis2mdl_cfg_reg_c_t reg;
  int32_t ret;

  ret = lis2mdl_read_reg(ctx, LIS2MDL_CFG_REG_C, (uint8_t *)&reg, 1);
 8005b54:	f107 0208 	add.w	r2, r7, #8
 8005b58:	2301      	movs	r3, #1
 8005b5a:	2162      	movs	r1, #98	; 0x62
 8005b5c:	6878      	ldr	r0, [r7, #4]
 8005b5e:	f7ff fe96 	bl	800588e <lis2mdl_read_reg>
 8005b62:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	2b00      	cmp	r3, #0
 8005b68:	d10f      	bne.n	8005b8a <lis2mdl_i2c_interface_set+0x42>
  {
    reg.i2c_dis = (uint8_t)val;
 8005b6a:	78fb      	ldrb	r3, [r7, #3]
 8005b6c:	f003 0301 	and.w	r3, r3, #1
 8005b70:	b2da      	uxtb	r2, r3
 8005b72:	7a3b      	ldrb	r3, [r7, #8]
 8005b74:	f362 1345 	bfi	r3, r2, #5, #1
 8005b78:	723b      	strb	r3, [r7, #8]
    ret = lis2mdl_write_reg(ctx, LIS2MDL_CFG_REG_C, (uint8_t *)&reg, 1);
 8005b7a:	f107 0208 	add.w	r2, r7, #8
 8005b7e:	2301      	movs	r3, #1
 8005b80:	2162      	movs	r1, #98	; 0x62
 8005b82:	6878      	ldr	r0, [r7, #4]
 8005b84:	f7ff fe9b 	bl	80058be <lis2mdl_write_reg>
 8005b88:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8005b8a:	68fb      	ldr	r3, [r7, #12]
}
 8005b8c:	4618      	mov	r0, r3
 8005b8e:	3710      	adds	r7, #16
 8005b90:	46bd      	mov	sp, r7
 8005b92:	bd80      	pop	{r7, pc}

08005b94 <LSM6DSO_RegisterBusIO>:
  * @brief  Register Component Bus IO operations
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_RegisterBusIO(LSM6DSO_Object_t *pObj, LSM6DSO_IO_t *pIO)
{
 8005b94:	b580      	push	{r7, lr}
 8005b96:	b084      	sub	sp, #16
 8005b98:	af00      	add	r7, sp, #0
 8005b9a:	6078      	str	r0, [r7, #4]
 8005b9c:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSO_OK;
 8005b9e:	2300      	movs	r3, #0
 8005ba0:	60fb      	str	r3, [r7, #12]

  if (pObj == NULL)
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	2b00      	cmp	r3, #0
 8005ba6:	d103      	bne.n	8005bb0 <LSM6DSO_RegisterBusIO+0x1c>
  {
    ret = LSM6DSO_ERROR;
 8005ba8:	f04f 33ff 	mov.w	r3, #4294967295
 8005bac:	60fb      	str	r3, [r7, #12]
 8005bae:	e051      	b.n	8005c54 <LSM6DSO_RegisterBusIO+0xc0>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 8005bb0:	683b      	ldr	r3, [r7, #0]
 8005bb2:	681a      	ldr	r2, [r3, #0]
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 8005bb8:	683b      	ldr	r3, [r7, #0]
 8005bba:	685a      	ldr	r2, [r3, #4]
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	605a      	str	r2, [r3, #4]
    pObj->IO.BusType   = pIO->BusType;
 8005bc0:	683b      	ldr	r3, [r7, #0]
 8005bc2:	689a      	ldr	r2, [r3, #8]
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	609a      	str	r2, [r3, #8]
    pObj->IO.Address   = pIO->Address;
 8005bc8:	683b      	ldr	r3, [r7, #0]
 8005bca:	7b1a      	ldrb	r2, [r3, #12]
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	731a      	strb	r2, [r3, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 8005bd0:	683b      	ldr	r3, [r7, #0]
 8005bd2:	691a      	ldr	r2, [r3, #16]
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	611a      	str	r2, [r3, #16]
    pObj->IO.ReadReg   = pIO->ReadReg;
 8005bd8:	683b      	ldr	r3, [r7, #0]
 8005bda:	695a      	ldr	r2, [r3, #20]
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	615a      	str	r2, [r3, #20]
    pObj->IO.GetTick   = pIO->GetTick;
 8005be0:	683b      	ldr	r3, [r7, #0]
 8005be2:	699a      	ldr	r2, [r3, #24]
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	619a      	str	r2, [r3, #24]

    pObj->Ctx.read_reg  = ReadRegWrap;
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	4a1d      	ldr	r2, [pc, #116]	; (8005c60 <LSM6DSO_RegisterBusIO+0xcc>)
 8005bec:	625a      	str	r2, [r3, #36]	; 0x24
    pObj->Ctx.write_reg = WriteRegWrap;
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	4a1c      	ldr	r2, [pc, #112]	; (8005c64 <LSM6DSO_RegisterBusIO+0xd0>)
 8005bf2:	621a      	str	r2, [r3, #32]
    pObj->Ctx.mdelay    = pIO->Delay;
 8005bf4:	683b      	ldr	r3, [r7, #0]
 8005bf6:	69da      	ldr	r2, [r3, #28]
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	629a      	str	r2, [r3, #40]	; 0x28
    pObj->Ctx.handle   = pObj;
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	687a      	ldr	r2, [r7, #4]
 8005c00:	62da      	str	r2, [r3, #44]	; 0x2c

    if (pObj->IO.Init == NULL)
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	2b00      	cmp	r3, #0
 8005c08:	d103      	bne.n	8005c12 <LSM6DSO_RegisterBusIO+0x7e>
    {
      ret = LSM6DSO_ERROR;
 8005c0a:	f04f 33ff 	mov.w	r3, #4294967295
 8005c0e:	60fb      	str	r3, [r7, #12]
 8005c10:	e020      	b.n	8005c54 <LSM6DSO_RegisterBusIO+0xc0>
    }
    else if (pObj->IO.Init() != LSM6DSO_OK)
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	4798      	blx	r3
 8005c18:	4603      	mov	r3, r0
 8005c1a:	2b00      	cmp	r3, #0
 8005c1c:	d003      	beq.n	8005c26 <LSM6DSO_RegisterBusIO+0x92>
    {
      ret = LSM6DSO_ERROR;
 8005c1e:	f04f 33ff 	mov.w	r3, #4294967295
 8005c22:	60fb      	str	r3, [r7, #12]
 8005c24:	e016      	b.n	8005c54 <LSM6DSO_RegisterBusIO+0xc0>
    }
    else
    {
      if (pObj->IO.BusType == LSM6DSO_SPI_3WIRES_BUS) /* SPI 3-Wires */
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	689b      	ldr	r3, [r3, #8]
 8005c2a:	2b02      	cmp	r3, #2
 8005c2c:	d112      	bne.n	8005c54 <LSM6DSO_RegisterBusIO+0xc0>
      {
        /* Enable the SPI 3-Wires support only the first time */
        if (pObj->is_initialized == 0U)
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005c34:	2b00      	cmp	r3, #0
 8005c36:	d10d      	bne.n	8005c54 <LSM6DSO_RegisterBusIO+0xc0>
        {
          /* Enable SPI 3-Wires on the component */
          uint8_t data = 0x0C;
 8005c38:	230c      	movs	r3, #12
 8005c3a:	72fb      	strb	r3, [r7, #11]

          if (LSM6DSO_Write_Reg(pObj, LSM6DSO_CTRL3_C, data) != LSM6DSO_OK)
 8005c3c:	7afb      	ldrb	r3, [r7, #11]
 8005c3e:	461a      	mov	r2, r3
 8005c40:	2112      	movs	r1, #18
 8005c42:	6878      	ldr	r0, [r7, #4]
 8005c44:	f000 ff59 	bl	8006afa <LSM6DSO_Write_Reg>
 8005c48:	4603      	mov	r3, r0
 8005c4a:	2b00      	cmp	r3, #0
 8005c4c:	d002      	beq.n	8005c54 <LSM6DSO_RegisterBusIO+0xc0>
          {
            ret = LSM6DSO_ERROR;
 8005c4e:	f04f 33ff 	mov.w	r3, #4294967295
 8005c52:	60fb      	str	r3, [r7, #12]
        }
      }
    }
  }

  return ret;
 8005c54:	68fb      	ldr	r3, [r7, #12]
}
 8005c56:	4618      	mov	r0, r3
 8005c58:	3710      	adds	r7, #16
 8005c5a:	46bd      	mov	sp, r7
 8005c5c:	bd80      	pop	{r7, pc}
 8005c5e:	bf00      	nop
 8005c60:	08006f9d 	.word	0x08006f9d
 8005c64:	08006fd3 	.word	0x08006fd3

08005c68 <LSM6DSO_Init>:
  * @brief  Initialize the LSM6DSO sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_Init(LSM6DSO_Object_t *pObj)
{
 8005c68:	b580      	push	{r7, lr}
 8005c6a:	b082      	sub	sp, #8
 8005c6c:	af00      	add	r7, sp, #0
 8005c6e:	6078      	str	r0, [r7, #4]
  /* Disable I3C */
  if (lsm6dso_i3c_disable_set(&(pObj->Ctx), LSM6DSO_I3C_DISABLE) != LSM6DSO_OK)
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	3320      	adds	r3, #32
 8005c74:	2180      	movs	r1, #128	; 0x80
 8005c76:	4618      	mov	r0, r3
 8005c78:	f001 fe97 	bl	80079aa <lsm6dso_i3c_disable_set>
 8005c7c:	4603      	mov	r3, r0
 8005c7e:	2b00      	cmp	r3, #0
 8005c80:	d002      	beq.n	8005c88 <LSM6DSO_Init+0x20>
  {
    return LSM6DSO_ERROR;
 8005c82:	f04f 33ff 	mov.w	r3, #4294967295
 8005c86:	e060      	b.n	8005d4a <LSM6DSO_Init+0xe2>
  }

  /* Enable register address automatically incremented during a multiple byte
  access with a serial interface. */
  if (lsm6dso_auto_increment_set(&(pObj->Ctx), PROPERTY_ENABLE) != LSM6DSO_OK)
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	3320      	adds	r3, #32
 8005c8c:	2101      	movs	r1, #1
 8005c8e:	4618      	mov	r0, r3
 8005c90:	f001 fe65 	bl	800795e <lsm6dso_auto_increment_set>
 8005c94:	4603      	mov	r3, r0
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	d002      	beq.n	8005ca0 <LSM6DSO_Init+0x38>
  {
    return LSM6DSO_ERROR;
 8005c9a:	f04f 33ff 	mov.w	r3, #4294967295
 8005c9e:	e054      	b.n	8005d4a <LSM6DSO_Init+0xe2>
  }

  /* Enable BDU */
  if (lsm6dso_block_data_update_set(&(pObj->Ctx), PROPERTY_ENABLE) != LSM6DSO_OK)
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	3320      	adds	r3, #32
 8005ca4:	2101      	movs	r1, #1
 8005ca6:	4618      	mov	r0, r3
 8005ca8:	f001 fd66 	bl	8007778 <lsm6dso_block_data_update_set>
 8005cac:	4603      	mov	r3, r0
 8005cae:	2b00      	cmp	r3, #0
 8005cb0:	d002      	beq.n	8005cb8 <LSM6DSO_Init+0x50>
  {
    return LSM6DSO_ERROR;
 8005cb2:	f04f 33ff 	mov.w	r3, #4294967295
 8005cb6:	e048      	b.n	8005d4a <LSM6DSO_Init+0xe2>
  }

  /* FIFO mode selection */
  if (lsm6dso_fifo_mode_set(&(pObj->Ctx), LSM6DSO_BYPASS_MODE) != LSM6DSO_OK)
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	3320      	adds	r3, #32
 8005cbc:	2100      	movs	r1, #0
 8005cbe:	4618      	mov	r0, r3
 8005cc0:	f001 feb9 	bl	8007a36 <lsm6dso_fifo_mode_set>
 8005cc4:	4603      	mov	r3, r0
 8005cc6:	2b00      	cmp	r3, #0
 8005cc8:	d002      	beq.n	8005cd0 <LSM6DSO_Init+0x68>
  {
    return LSM6DSO_ERROR;
 8005cca:	f04f 33ff 	mov.w	r3, #4294967295
 8005cce:	e03c      	b.n	8005d4a <LSM6DSO_Init+0xe2>
  }

  /* Select default output data rate. */
  pObj->acc_odr = LSM6DSO_XL_ODR_104Hz;
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	2204      	movs	r2, #4
 8005cd4:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33

  /* Output data rate selection - power down. */
  if (lsm6dso_xl_data_rate_set(&(pObj->Ctx), LSM6DSO_XL_ODR_OFF) != LSM6DSO_OK)
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	3320      	adds	r3, #32
 8005cdc:	2100      	movs	r1, #0
 8005cde:	4618      	mov	r0, r3
 8005ce0:	f001 fa20 	bl	8007124 <lsm6dso_xl_data_rate_set>
 8005ce4:	4603      	mov	r3, r0
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	d002      	beq.n	8005cf0 <LSM6DSO_Init+0x88>
  {
    return LSM6DSO_ERROR;
 8005cea:	f04f 33ff 	mov.w	r3, #4294967295
 8005cee:	e02c      	b.n	8005d4a <LSM6DSO_Init+0xe2>
  }

  /* Full scale selection. */
  if (lsm6dso_xl_full_scale_set(&(pObj->Ctx), LSM6DSO_2g) != LSM6DSO_OK)
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	3320      	adds	r3, #32
 8005cf4:	2100      	movs	r1, #0
 8005cf6:	4618      	mov	r0, r3
 8005cf8:	f001 f9b6 	bl	8007068 <lsm6dso_xl_full_scale_set>
 8005cfc:	4603      	mov	r3, r0
 8005cfe:	2b00      	cmp	r3, #0
 8005d00:	d002      	beq.n	8005d08 <LSM6DSO_Init+0xa0>
  {
    return LSM6DSO_ERROR;
 8005d02:	f04f 33ff 	mov.w	r3, #4294967295
 8005d06:	e020      	b.n	8005d4a <LSM6DSO_Init+0xe2>
  }

  /* Select default output data rate. */
  pObj->gyro_odr = LSM6DSO_GY_ODR_104Hz;
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	2204      	movs	r2, #4
 8005d0c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Output data rate selection - power down. */
  if (lsm6dso_gy_data_rate_set(&(pObj->Ctx), LSM6DSO_GY_ODR_OFF) != LSM6DSO_OK)
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	3320      	adds	r3, #32
 8005d14:	2100      	movs	r1, #0
 8005d16:	4618      	mov	r0, r3
 8005d18:	f001 fbd0 	bl	80074bc <lsm6dso_gy_data_rate_set>
 8005d1c:	4603      	mov	r3, r0
 8005d1e:	2b00      	cmp	r3, #0
 8005d20:	d002      	beq.n	8005d28 <LSM6DSO_Init+0xc0>
  {
    return LSM6DSO_ERROR;
 8005d22:	f04f 33ff 	mov.w	r3, #4294967295
 8005d26:	e010      	b.n	8005d4a <LSM6DSO_Init+0xe2>
  }

  /* Full scale selection. */
  if (lsm6dso_gy_full_scale_set(&(pObj->Ctx), LSM6DSO_2000dps) != LSM6DSO_OK)
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	3320      	adds	r3, #32
 8005d2c:	2106      	movs	r1, #6
 8005d2e:	4618      	mov	r0, r3
 8005d30:	f001 fb5c 	bl	80073ec <lsm6dso_gy_full_scale_set>
 8005d34:	4603      	mov	r3, r0
 8005d36:	2b00      	cmp	r3, #0
 8005d38:	d002      	beq.n	8005d40 <LSM6DSO_Init+0xd8>
  {
    return LSM6DSO_ERROR;
 8005d3a:	f04f 33ff 	mov.w	r3, #4294967295
 8005d3e:	e004      	b.n	8005d4a <LSM6DSO_Init+0xe2>
  }

  pObj->is_initialized = 1;
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	2201      	movs	r2, #1
 8005d44:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return LSM6DSO_OK;
 8005d48:	2300      	movs	r3, #0
}
 8005d4a:	4618      	mov	r0, r3
 8005d4c:	3708      	adds	r7, #8
 8005d4e:	46bd      	mov	sp, r7
 8005d50:	bd80      	pop	{r7, pc}

08005d52 <LSM6DSO_DeInit>:
  * @brief  Deinitialize the LSM6DSO sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_DeInit(LSM6DSO_Object_t *pObj)
{
 8005d52:	b580      	push	{r7, lr}
 8005d54:	b082      	sub	sp, #8
 8005d56:	af00      	add	r7, sp, #0
 8005d58:	6078      	str	r0, [r7, #4]
  /* Disable the component */
  if (LSM6DSO_ACC_Disable(pObj) != LSM6DSO_OK)
 8005d5a:	6878      	ldr	r0, [r7, #4]
 8005d5c:	f000 f888 	bl	8005e70 <LSM6DSO_ACC_Disable>
 8005d60:	4603      	mov	r3, r0
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	d002      	beq.n	8005d6c <LSM6DSO_DeInit+0x1a>
  {
    return LSM6DSO_ERROR;
 8005d66:	f04f 33ff 	mov.w	r3, #4294967295
 8005d6a:	e015      	b.n	8005d98 <LSM6DSO_DeInit+0x46>
  }

  if (LSM6DSO_GYRO_Disable(pObj) != LSM6DSO_OK)
 8005d6c:	6878      	ldr	r0, [r7, #4]
 8005d6e:	f000 fc2e 	bl	80065ce <LSM6DSO_GYRO_Disable>
 8005d72:	4603      	mov	r3, r0
 8005d74:	2b00      	cmp	r3, #0
 8005d76:	d002      	beq.n	8005d7e <LSM6DSO_DeInit+0x2c>
  {
    return LSM6DSO_ERROR;
 8005d78:	f04f 33ff 	mov.w	r3, #4294967295
 8005d7c:	e00c      	b.n	8005d98 <LSM6DSO_DeInit+0x46>
  }

  /* Reset output data rate. */
  pObj->acc_odr = LSM6DSO_XL_ODR_OFF;
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	2200      	movs	r2, #0
 8005d82:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
  pObj->gyro_odr = LSM6DSO_GY_ODR_OFF;
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	2200      	movs	r2, #0
 8005d8a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  pObj->is_initialized = 0;
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	2200      	movs	r2, #0
 8005d92:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return LSM6DSO_OK;
 8005d96:	2300      	movs	r3, #0
}
 8005d98:	4618      	mov	r0, r3
 8005d9a:	3708      	adds	r7, #8
 8005d9c:	46bd      	mov	sp, r7
 8005d9e:	bd80      	pop	{r7, pc}

08005da0 <LSM6DSO_ReadID>:
  * @param  pObj the device pObj
  * @param  Id the WHO_AM_I value
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_ReadID(LSM6DSO_Object_t *pObj, uint8_t *Id)
{
 8005da0:	b580      	push	{r7, lr}
 8005da2:	b082      	sub	sp, #8
 8005da4:	af00      	add	r7, sp, #0
 8005da6:	6078      	str	r0, [r7, #4]
 8005da8:	6039      	str	r1, [r7, #0]
  if (lsm6dso_device_id_get(&(pObj->Ctx), Id) != LSM6DSO_OK)
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	3320      	adds	r3, #32
 8005dae:	6839      	ldr	r1, [r7, #0]
 8005db0:	4618      	mov	r0, r3
 8005db2:	f001 fdc3 	bl	800793c <lsm6dso_device_id_get>
 8005db6:	4603      	mov	r3, r0
 8005db8:	2b00      	cmp	r3, #0
 8005dba:	d002      	beq.n	8005dc2 <LSM6DSO_ReadID+0x22>
  {
    return LSM6DSO_ERROR;
 8005dbc:	f04f 33ff 	mov.w	r3, #4294967295
 8005dc0:	e000      	b.n	8005dc4 <LSM6DSO_ReadID+0x24>
  }

  return LSM6DSO_OK;
 8005dc2:	2300      	movs	r3, #0
}
 8005dc4:	4618      	mov	r0, r3
 8005dc6:	3708      	adds	r7, #8
 8005dc8:	46bd      	mov	sp, r7
 8005dca:	bd80      	pop	{r7, pc}

08005dcc <LSM6DSO_GetCapabilities>:
  * @param  pObj Component object pointer
  * @param  Capabilities pointer to LSM6DSO sensor capabilities
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_GetCapabilities(LSM6DSO_Object_t *pObj, LSM6DSO_Capabilities_t *Capabilities)
{
 8005dcc:	b480      	push	{r7}
 8005dce:	b083      	sub	sp, #12
 8005dd0:	af00      	add	r7, sp, #0
 8005dd2:	6078      	str	r0, [r7, #4]
 8005dd4:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  Capabilities->Acc          = 1;
 8005dd6:	683b      	ldr	r3, [r7, #0]
 8005dd8:	2201      	movs	r2, #1
 8005dda:	701a      	strb	r2, [r3, #0]
  Capabilities->Gyro         = 1;
 8005ddc:	683b      	ldr	r3, [r7, #0]
 8005dde:	2201      	movs	r2, #1
 8005de0:	705a      	strb	r2, [r3, #1]
  Capabilities->Magneto      = 0;
 8005de2:	683b      	ldr	r3, [r7, #0]
 8005de4:	2200      	movs	r2, #0
 8005de6:	709a      	strb	r2, [r3, #2]
  Capabilities->LowPower     = 0;
 8005de8:	683b      	ldr	r3, [r7, #0]
 8005dea:	2200      	movs	r2, #0
 8005dec:	70da      	strb	r2, [r3, #3]
  Capabilities->GyroMaxFS    = 2000;
 8005dee:	683b      	ldr	r3, [r7, #0]
 8005df0:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8005df4:	605a      	str	r2, [r3, #4]
  Capabilities->AccMaxFS     = 16;
 8005df6:	683b      	ldr	r3, [r7, #0]
 8005df8:	2210      	movs	r2, #16
 8005dfa:	609a      	str	r2, [r3, #8]
  Capabilities->MagMaxFS     = 0;
 8005dfc:	683b      	ldr	r3, [r7, #0]
 8005dfe:	2200      	movs	r2, #0
 8005e00:	60da      	str	r2, [r3, #12]
  Capabilities->GyroMaxOdr   = 6660.0f;
 8005e02:	683b      	ldr	r3, [r7, #0]
 8005e04:	4a07      	ldr	r2, [pc, #28]	; (8005e24 <LSM6DSO_GetCapabilities+0x58>)
 8005e06:	611a      	str	r2, [r3, #16]
  Capabilities->AccMaxOdr    = 6660.0f;
 8005e08:	683b      	ldr	r3, [r7, #0]
 8005e0a:	4a06      	ldr	r2, [pc, #24]	; (8005e24 <LSM6DSO_GetCapabilities+0x58>)
 8005e0c:	615a      	str	r2, [r3, #20]
  Capabilities->MagMaxOdr    = 0.0f;
 8005e0e:	683b      	ldr	r3, [r7, #0]
 8005e10:	f04f 0200 	mov.w	r2, #0
 8005e14:	619a      	str	r2, [r3, #24]
  return LSM6DSO_OK;
 8005e16:	2300      	movs	r3, #0
}
 8005e18:	4618      	mov	r0, r3
 8005e1a:	370c      	adds	r7, #12
 8005e1c:	46bd      	mov	sp, r7
 8005e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e22:	4770      	bx	lr
 8005e24:	45d02000 	.word	0x45d02000

08005e28 <LSM6DSO_ACC_Enable>:
  * @brief  Enable the LSM6DSO accelerometer sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_ACC_Enable(LSM6DSO_Object_t *pObj)
{
 8005e28:	b580      	push	{r7, lr}
 8005e2a:	b082      	sub	sp, #8
 8005e2c:	af00      	add	r7, sp, #0
 8005e2e:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->acc_is_enabled == 1U)
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8005e36:	2b01      	cmp	r3, #1
 8005e38:	d101      	bne.n	8005e3e <LSM6DSO_ACC_Enable+0x16>
  {
    return LSM6DSO_OK;
 8005e3a:	2300      	movs	r3, #0
 8005e3c:	e014      	b.n	8005e68 <LSM6DSO_ACC_Enable+0x40>
  }

  /* Output data rate selection. */
  if (lsm6dso_xl_data_rate_set(&(pObj->Ctx), pObj->acc_odr) != LSM6DSO_OK)
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	f103 0220 	add.w	r2, r3, #32
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 8005e4a:	4619      	mov	r1, r3
 8005e4c:	4610      	mov	r0, r2
 8005e4e:	f001 f969 	bl	8007124 <lsm6dso_xl_data_rate_set>
 8005e52:	4603      	mov	r3, r0
 8005e54:	2b00      	cmp	r3, #0
 8005e56:	d002      	beq.n	8005e5e <LSM6DSO_ACC_Enable+0x36>
  {
    return LSM6DSO_ERROR;
 8005e58:	f04f 33ff 	mov.w	r3, #4294967295
 8005e5c:	e004      	b.n	8005e68 <LSM6DSO_ACC_Enable+0x40>
  }

  pObj->acc_is_enabled = 1;
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	2201      	movs	r2, #1
 8005e62:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

  return LSM6DSO_OK;
 8005e66:	2300      	movs	r3, #0
}
 8005e68:	4618      	mov	r0, r3
 8005e6a:	3708      	adds	r7, #8
 8005e6c:	46bd      	mov	sp, r7
 8005e6e:	bd80      	pop	{r7, pc}

08005e70 <LSM6DSO_ACC_Disable>:
  * @brief  Disable the LSM6DSO accelerometer sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_ACC_Disable(LSM6DSO_Object_t *pObj)
{
 8005e70:	b580      	push	{r7, lr}
 8005e72:	b082      	sub	sp, #8
 8005e74:	af00      	add	r7, sp, #0
 8005e76:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->acc_is_enabled == 0U)
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8005e7e:	2b00      	cmp	r3, #0
 8005e80:	d101      	bne.n	8005e86 <LSM6DSO_ACC_Disable+0x16>
  {
    return LSM6DSO_OK;
 8005e82:	2300      	movs	r3, #0
 8005e84:	e01f      	b.n	8005ec6 <LSM6DSO_ACC_Disable+0x56>
  }

  /* Get current output data rate. */
  if (lsm6dso_xl_data_rate_get(&(pObj->Ctx), &pObj->acc_odr) != LSM6DSO_OK)
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	f103 0220 	add.w	r2, r3, #32
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	3333      	adds	r3, #51	; 0x33
 8005e90:	4619      	mov	r1, r3
 8005e92:	4610      	mov	r0, r2
 8005e94:	f001 fa42 	bl	800731c <lsm6dso_xl_data_rate_get>
 8005e98:	4603      	mov	r3, r0
 8005e9a:	2b00      	cmp	r3, #0
 8005e9c:	d002      	beq.n	8005ea4 <LSM6DSO_ACC_Disable+0x34>
  {
    return LSM6DSO_ERROR;
 8005e9e:	f04f 33ff 	mov.w	r3, #4294967295
 8005ea2:	e010      	b.n	8005ec6 <LSM6DSO_ACC_Disable+0x56>
  }

  /* Output data rate selection - power down. */
  if (lsm6dso_xl_data_rate_set(&(pObj->Ctx), LSM6DSO_XL_ODR_OFF) != LSM6DSO_OK)
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	3320      	adds	r3, #32
 8005ea8:	2100      	movs	r1, #0
 8005eaa:	4618      	mov	r0, r3
 8005eac:	f001 f93a 	bl	8007124 <lsm6dso_xl_data_rate_set>
 8005eb0:	4603      	mov	r3, r0
 8005eb2:	2b00      	cmp	r3, #0
 8005eb4:	d002      	beq.n	8005ebc <LSM6DSO_ACC_Disable+0x4c>
  {
    return LSM6DSO_ERROR;
 8005eb6:	f04f 33ff 	mov.w	r3, #4294967295
 8005eba:	e004      	b.n	8005ec6 <LSM6DSO_ACC_Disable+0x56>
  }

  pObj->acc_is_enabled = 0;
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	2200      	movs	r2, #0
 8005ec0:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

  return LSM6DSO_OK;
 8005ec4:	2300      	movs	r3, #0
}
 8005ec6:	4618      	mov	r0, r3
 8005ec8:	3708      	adds	r7, #8
 8005eca:	46bd      	mov	sp, r7
 8005ecc:	bd80      	pop	{r7, pc}
	...

08005ed0 <LSM6DSO_ACC_GetSensitivity>:
  * @param  pObj the device pObj
  * @param  Sensitivity pointer
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_ACC_GetSensitivity(LSM6DSO_Object_t *pObj, float_t *Sensitivity)
{
 8005ed0:	b580      	push	{r7, lr}
 8005ed2:	b084      	sub	sp, #16
 8005ed4:	af00      	add	r7, sp, #0
 8005ed6:	6078      	str	r0, [r7, #4]
 8005ed8:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSO_OK;
 8005eda:	2300      	movs	r3, #0
 8005edc:	60fb      	str	r3, [r7, #12]
  lsm6dso_fs_xl_t full_scale;

  /* Read actual full scale selection from sensor. */
  if (lsm6dso_xl_full_scale_get(&(pObj->Ctx), &full_scale) != LSM6DSO_OK)
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	3320      	adds	r3, #32
 8005ee2:	f107 020b 	add.w	r2, r7, #11
 8005ee6:	4611      	mov	r1, r2
 8005ee8:	4618      	mov	r0, r3
 8005eea:	f001 f8e3 	bl	80070b4 <lsm6dso_xl_full_scale_get>
 8005eee:	4603      	mov	r3, r0
 8005ef0:	2b00      	cmp	r3, #0
 8005ef2:	d002      	beq.n	8005efa <LSM6DSO_ACC_GetSensitivity+0x2a>
  {
    return LSM6DSO_ERROR;
 8005ef4:	f04f 33ff 	mov.w	r3, #4294967295
 8005ef8:	e023      	b.n	8005f42 <LSM6DSO_ACC_GetSensitivity+0x72>
  }

  /* Store the Sensitivity based on actual full scale. */
  switch (full_scale)
 8005efa:	7afb      	ldrb	r3, [r7, #11]
 8005efc:	2b03      	cmp	r3, #3
 8005efe:	d81b      	bhi.n	8005f38 <LSM6DSO_ACC_GetSensitivity+0x68>
 8005f00:	a201      	add	r2, pc, #4	; (adr r2, 8005f08 <LSM6DSO_ACC_GetSensitivity+0x38>)
 8005f02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f06:	bf00      	nop
 8005f08:	08005f19 	.word	0x08005f19
 8005f0c:	08005f31 	.word	0x08005f31
 8005f10:	08005f21 	.word	0x08005f21
 8005f14:	08005f29 	.word	0x08005f29
  {
    case LSM6DSO_2g:
      *Sensitivity = LSM6DSO_ACC_SENSITIVITY_FS_2G;
 8005f18:	683b      	ldr	r3, [r7, #0]
 8005f1a:	4a0c      	ldr	r2, [pc, #48]	; (8005f4c <LSM6DSO_ACC_GetSensitivity+0x7c>)
 8005f1c:	601a      	str	r2, [r3, #0]
      break;
 8005f1e:	e00f      	b.n	8005f40 <LSM6DSO_ACC_GetSensitivity+0x70>

    case LSM6DSO_4g:
      *Sensitivity = LSM6DSO_ACC_SENSITIVITY_FS_4G;
 8005f20:	683b      	ldr	r3, [r7, #0]
 8005f22:	4a0b      	ldr	r2, [pc, #44]	; (8005f50 <LSM6DSO_ACC_GetSensitivity+0x80>)
 8005f24:	601a      	str	r2, [r3, #0]
      break;
 8005f26:	e00b      	b.n	8005f40 <LSM6DSO_ACC_GetSensitivity+0x70>

    case LSM6DSO_8g:
      *Sensitivity = LSM6DSO_ACC_SENSITIVITY_FS_8G;
 8005f28:	683b      	ldr	r3, [r7, #0]
 8005f2a:	4a0a      	ldr	r2, [pc, #40]	; (8005f54 <LSM6DSO_ACC_GetSensitivity+0x84>)
 8005f2c:	601a      	str	r2, [r3, #0]
      break;
 8005f2e:	e007      	b.n	8005f40 <LSM6DSO_ACC_GetSensitivity+0x70>

    case LSM6DSO_16g:
      *Sensitivity = LSM6DSO_ACC_SENSITIVITY_FS_16G;
 8005f30:	683b      	ldr	r3, [r7, #0]
 8005f32:	4a09      	ldr	r2, [pc, #36]	; (8005f58 <LSM6DSO_ACC_GetSensitivity+0x88>)
 8005f34:	601a      	str	r2, [r3, #0]
      break;
 8005f36:	e003      	b.n	8005f40 <LSM6DSO_ACC_GetSensitivity+0x70>

    default:
      ret = LSM6DSO_ERROR;
 8005f38:	f04f 33ff 	mov.w	r3, #4294967295
 8005f3c:	60fb      	str	r3, [r7, #12]
      break;
 8005f3e:	bf00      	nop
  }

  return ret;
 8005f40:	68fb      	ldr	r3, [r7, #12]
}
 8005f42:	4618      	mov	r0, r3
 8005f44:	3710      	adds	r7, #16
 8005f46:	46bd      	mov	sp, r7
 8005f48:	bd80      	pop	{r7, pc}
 8005f4a:	bf00      	nop
 8005f4c:	3d79db23 	.word	0x3d79db23
 8005f50:	3df9db23 	.word	0x3df9db23
 8005f54:	3e79db23 	.word	0x3e79db23
 8005f58:	3ef9db23 	.word	0x3ef9db23

08005f5c <LSM6DSO_ACC_GetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr pointer where the output data rate is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_ACC_GetOutputDataRate(LSM6DSO_Object_t *pObj, float_t *Odr)
{
 8005f5c:	b580      	push	{r7, lr}
 8005f5e:	b084      	sub	sp, #16
 8005f60:	af00      	add	r7, sp, #0
 8005f62:	6078      	str	r0, [r7, #4]
 8005f64:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSO_OK;
 8005f66:	2300      	movs	r3, #0
 8005f68:	60fb      	str	r3, [r7, #12]
  lsm6dso_odr_xl_t odr_low_level;

  /* Get current output data rate. */
  if (lsm6dso_xl_data_rate_get(&(pObj->Ctx), &odr_low_level) != LSM6DSO_OK)
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	3320      	adds	r3, #32
 8005f6e:	f107 020b 	add.w	r2, r7, #11
 8005f72:	4611      	mov	r1, r2
 8005f74:	4618      	mov	r0, r3
 8005f76:	f001 f9d1 	bl	800731c <lsm6dso_xl_data_rate_get>
 8005f7a:	4603      	mov	r3, r0
 8005f7c:	2b00      	cmp	r3, #0
 8005f7e:	d002      	beq.n	8005f86 <LSM6DSO_ACC_GetOutputDataRate+0x2a>
  {
    return LSM6DSO_ERROR;
 8005f80:	f04f 33ff 	mov.w	r3, #4294967295
 8005f84:	e054      	b.n	8006030 <LSM6DSO_ACC_GetOutputDataRate+0xd4>
  }

  switch (odr_low_level)
 8005f86:	7afb      	ldrb	r3, [r7, #11]
 8005f88:	2b0b      	cmp	r3, #11
 8005f8a:	d84c      	bhi.n	8006026 <LSM6DSO_ACC_GetOutputDataRate+0xca>
 8005f8c:	a201      	add	r2, pc, #4	; (adr r2, 8005f94 <LSM6DSO_ACC_GetOutputDataRate+0x38>)
 8005f8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f92:	bf00      	nop
 8005f94:	08005fc5 	.word	0x08005fc5
 8005f98:	08005fd7 	.word	0x08005fd7
 8005f9c:	08005fdf 	.word	0x08005fdf
 8005fa0:	08005fe7 	.word	0x08005fe7
 8005fa4:	08005fef 	.word	0x08005fef
 8005fa8:	08005ff7 	.word	0x08005ff7
 8005fac:	08005fff 	.word	0x08005fff
 8005fb0:	08006007 	.word	0x08006007
 8005fb4:	0800600f 	.word	0x0800600f
 8005fb8:	08006017 	.word	0x08006017
 8005fbc:	0800601f 	.word	0x0800601f
 8005fc0:	08005fcf 	.word	0x08005fcf
  {
    case LSM6DSO_XL_ODR_OFF:
      *Odr = 0.0f;
 8005fc4:	683b      	ldr	r3, [r7, #0]
 8005fc6:	f04f 0200 	mov.w	r2, #0
 8005fca:	601a      	str	r2, [r3, #0]
      break;
 8005fcc:	e02f      	b.n	800602e <LSM6DSO_ACC_GetOutputDataRate+0xd2>

    case LSM6DSO_XL_ODR_1Hz6:
      *Odr = 1.6f;
 8005fce:	683b      	ldr	r3, [r7, #0]
 8005fd0:	4a19      	ldr	r2, [pc, #100]	; (8006038 <LSM6DSO_ACC_GetOutputDataRate+0xdc>)
 8005fd2:	601a      	str	r2, [r3, #0]
      break;
 8005fd4:	e02b      	b.n	800602e <LSM6DSO_ACC_GetOutputDataRate+0xd2>

    case LSM6DSO_XL_ODR_12Hz5:
      *Odr = 12.5f;
 8005fd6:	683b      	ldr	r3, [r7, #0]
 8005fd8:	4a18      	ldr	r2, [pc, #96]	; (800603c <LSM6DSO_ACC_GetOutputDataRate+0xe0>)
 8005fda:	601a      	str	r2, [r3, #0]
      break;
 8005fdc:	e027      	b.n	800602e <LSM6DSO_ACC_GetOutputDataRate+0xd2>

    case LSM6DSO_XL_ODR_26Hz:
      *Odr = 26.0f;
 8005fde:	683b      	ldr	r3, [r7, #0]
 8005fe0:	4a17      	ldr	r2, [pc, #92]	; (8006040 <LSM6DSO_ACC_GetOutputDataRate+0xe4>)
 8005fe2:	601a      	str	r2, [r3, #0]
      break;
 8005fe4:	e023      	b.n	800602e <LSM6DSO_ACC_GetOutputDataRate+0xd2>

    case LSM6DSO_XL_ODR_52Hz:
      *Odr = 52.0f;
 8005fe6:	683b      	ldr	r3, [r7, #0]
 8005fe8:	4a16      	ldr	r2, [pc, #88]	; (8006044 <LSM6DSO_ACC_GetOutputDataRate+0xe8>)
 8005fea:	601a      	str	r2, [r3, #0]
      break;
 8005fec:	e01f      	b.n	800602e <LSM6DSO_ACC_GetOutputDataRate+0xd2>

    case LSM6DSO_XL_ODR_104Hz:
      *Odr = 104.0f;
 8005fee:	683b      	ldr	r3, [r7, #0]
 8005ff0:	4a15      	ldr	r2, [pc, #84]	; (8006048 <LSM6DSO_ACC_GetOutputDataRate+0xec>)
 8005ff2:	601a      	str	r2, [r3, #0]
      break;
 8005ff4:	e01b      	b.n	800602e <LSM6DSO_ACC_GetOutputDataRate+0xd2>

    case LSM6DSO_XL_ODR_208Hz:
      *Odr = 208.0f;
 8005ff6:	683b      	ldr	r3, [r7, #0]
 8005ff8:	4a14      	ldr	r2, [pc, #80]	; (800604c <LSM6DSO_ACC_GetOutputDataRate+0xf0>)
 8005ffa:	601a      	str	r2, [r3, #0]
      break;
 8005ffc:	e017      	b.n	800602e <LSM6DSO_ACC_GetOutputDataRate+0xd2>

    case LSM6DSO_XL_ODR_417Hz:
      *Odr = 417.0f;
 8005ffe:	683b      	ldr	r3, [r7, #0]
 8006000:	4a13      	ldr	r2, [pc, #76]	; (8006050 <LSM6DSO_ACC_GetOutputDataRate+0xf4>)
 8006002:	601a      	str	r2, [r3, #0]
      break;
 8006004:	e013      	b.n	800602e <LSM6DSO_ACC_GetOutputDataRate+0xd2>

    case LSM6DSO_XL_ODR_833Hz:
      *Odr = 833.0f;
 8006006:	683b      	ldr	r3, [r7, #0]
 8006008:	4a12      	ldr	r2, [pc, #72]	; (8006054 <LSM6DSO_ACC_GetOutputDataRate+0xf8>)
 800600a:	601a      	str	r2, [r3, #0]
      break;
 800600c:	e00f      	b.n	800602e <LSM6DSO_ACC_GetOutputDataRate+0xd2>

    case LSM6DSO_XL_ODR_1667Hz:
      *Odr = 1667.0f;
 800600e:	683b      	ldr	r3, [r7, #0]
 8006010:	4a11      	ldr	r2, [pc, #68]	; (8006058 <LSM6DSO_ACC_GetOutputDataRate+0xfc>)
 8006012:	601a      	str	r2, [r3, #0]
      break;
 8006014:	e00b      	b.n	800602e <LSM6DSO_ACC_GetOutputDataRate+0xd2>

    case LSM6DSO_XL_ODR_3333Hz:
      *Odr = 3333.0f;
 8006016:	683b      	ldr	r3, [r7, #0]
 8006018:	4a10      	ldr	r2, [pc, #64]	; (800605c <LSM6DSO_ACC_GetOutputDataRate+0x100>)
 800601a:	601a      	str	r2, [r3, #0]
      break;
 800601c:	e007      	b.n	800602e <LSM6DSO_ACC_GetOutputDataRate+0xd2>

    case LSM6DSO_XL_ODR_6667Hz:
      *Odr = 6667.0f;
 800601e:	683b      	ldr	r3, [r7, #0]
 8006020:	4a0f      	ldr	r2, [pc, #60]	; (8006060 <LSM6DSO_ACC_GetOutputDataRate+0x104>)
 8006022:	601a      	str	r2, [r3, #0]
      break;
 8006024:	e003      	b.n	800602e <LSM6DSO_ACC_GetOutputDataRate+0xd2>

    default:
      ret = LSM6DSO_ERROR;
 8006026:	f04f 33ff 	mov.w	r3, #4294967295
 800602a:	60fb      	str	r3, [r7, #12]
      break;
 800602c:	bf00      	nop
  }

  return ret;
 800602e:	68fb      	ldr	r3, [r7, #12]
}
 8006030:	4618      	mov	r0, r3
 8006032:	3710      	adds	r7, #16
 8006034:	46bd      	mov	sp, r7
 8006036:	bd80      	pop	{r7, pc}
 8006038:	3fcccccd 	.word	0x3fcccccd
 800603c:	41480000 	.word	0x41480000
 8006040:	41d00000 	.word	0x41d00000
 8006044:	42500000 	.word	0x42500000
 8006048:	42d00000 	.word	0x42d00000
 800604c:	43500000 	.word	0x43500000
 8006050:	43d08000 	.word	0x43d08000
 8006054:	44504000 	.word	0x44504000
 8006058:	44d06000 	.word	0x44d06000
 800605c:	45505000 	.word	0x45505000
 8006060:	45d05800 	.word	0x45d05800

08006064 <LSM6DSO_ACC_SetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_ACC_SetOutputDataRate(LSM6DSO_Object_t *pObj, float_t Odr)
{
 8006064:	b580      	push	{r7, lr}
 8006066:	b082      	sub	sp, #8
 8006068:	af00      	add	r7, sp, #0
 800606a:	6078      	str	r0, [r7, #4]
 800606c:	ed87 0a00 	vstr	s0, [r7]
  return LSM6DSO_ACC_SetOutputDataRate_With_Mode(pObj, Odr, LSM6DSO_ACC_HIGH_PERFORMANCE_MODE);
 8006070:	2100      	movs	r1, #0
 8006072:	ed97 0a00 	vldr	s0, [r7]
 8006076:	6878      	ldr	r0, [r7, #4]
 8006078:	f000 f806 	bl	8006088 <LSM6DSO_ACC_SetOutputDataRate_With_Mode>
 800607c:	4603      	mov	r3, r0
}
 800607e:	4618      	mov	r0, r3
 8006080:	3708      	adds	r7, #8
 8006082:	46bd      	mov	sp, r7
 8006084:	bd80      	pop	{r7, pc}
	...

08006088 <LSM6DSO_ACC_SetOutputDataRate_With_Mode>:
  * @param  Mode the accelerometer operating mode
  * @note   This function switches off the gyroscope if Ultra Low Power Mode is set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_ACC_SetOutputDataRate_With_Mode(LSM6DSO_Object_t *pObj, float_t Odr, LSM6DSO_ACC_Operating_Mode_t Mode)
{
 8006088:	b580      	push	{r7, lr}
 800608a:	b08c      	sub	sp, #48	; 0x30
 800608c:	af00      	add	r7, sp, #0
 800608e:	60f8      	str	r0, [r7, #12]
 8006090:	ed87 0a02 	vstr	s0, [r7, #8]
 8006094:	460b      	mov	r3, r1
 8006096:	71fb      	strb	r3, [r7, #7]
  int32_t ret = LSM6DSO_OK;
 8006098:	2300      	movs	r3, #0
 800609a:	62fb      	str	r3, [r7, #44]	; 0x2c
  float_t newOdr = Odr;
 800609c:	68bb      	ldr	r3, [r7, #8]
 800609e:	62bb      	str	r3, [r7, #40]	; 0x28

  switch (Mode)
 80060a0:	79fb      	ldrb	r3, [r7, #7]
 80060a2:	2b02      	cmp	r3, #2
 80060a4:	f000 80ea 	beq.w	800627c <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x1f4>
 80060a8:	2b02      	cmp	r3, #2
 80060aa:	f300 8163 	bgt.w	8006374 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2ec>
 80060ae:	2b00      	cmp	r3, #0
 80060b0:	d002      	beq.n	80060b8 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x30>
 80060b2:	2b01      	cmp	r3, #1
 80060b4:	d074      	beq.n	80061a0 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x118>
 80060b6:	e15d      	b.n	8006374 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2ec>
    {
      /* We must uncheck Low Power and Ultra Low Power bits if they are enabled */
      lsm6dso_ctrl5_c_t val1;
      lsm6dso_ctrl6_c_t val2;

      if (lsm6dso_read_reg(&(pObj->Ctx), LSM6DSO_CTRL5_C, (uint8_t *)&val1, 1) != LSM6DSO_OK)
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	f103 0020 	add.w	r0, r3, #32
 80060be:	f107 0224 	add.w	r2, r7, #36	; 0x24
 80060c2:	2301      	movs	r3, #1
 80060c4:	2114      	movs	r1, #20
 80060c6:	f000 ff9f 	bl	8007008 <lsm6dso_read_reg>
 80060ca:	4603      	mov	r3, r0
 80060cc:	2b00      	cmp	r3, #0
 80060ce:	d002      	beq.n	80060d6 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x4e>
      {
        return LSM6DSO_ERROR;
 80060d0:	f04f 33ff 	mov.w	r3, #4294967295
 80060d4:	e16c      	b.n	80063b0 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
      }

      if (val1.xl_ulp_en != 0U)
 80060d6:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80060da:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80060de:	b2db      	uxtb	r3, r3
 80060e0:	2b00      	cmp	r3, #0
 80060e2:	d025      	beq.n	8006130 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0xa8>
      {
        /* Power off the accelerometer */
        if (pObj->acc_is_enabled == 1U)
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80060ea:	2b01      	cmp	r3, #1
 80060ec:	d10b      	bne.n	8006106 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x7e>
        {
          if (lsm6dso_xl_data_rate_set(&(pObj->Ctx), LSM6DSO_XL_ODR_OFF) != LSM6DSO_OK)
 80060ee:	68fb      	ldr	r3, [r7, #12]
 80060f0:	3320      	adds	r3, #32
 80060f2:	2100      	movs	r1, #0
 80060f4:	4618      	mov	r0, r3
 80060f6:	f001 f815 	bl	8007124 <lsm6dso_xl_data_rate_set>
 80060fa:	4603      	mov	r3, r0
 80060fc:	2b00      	cmp	r3, #0
 80060fe:	d002      	beq.n	8006106 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x7e>
          {
            return LSM6DSO_ERROR;
 8006100:	f04f 33ff 	mov.w	r3, #4294967295
 8006104:	e154      	b.n	80063b0 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
          }
        }

        val1.xl_ulp_en = 0;
 8006106:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800610a:	f36f 13c7 	bfc	r3, #7, #1
 800610e:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
        if (lsm6dso_write_reg(&(pObj->Ctx), LSM6DSO_CTRL5_C, (uint8_t *)&val1, 1) != LSM6DSO_OK)
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	f103 0020 	add.w	r0, r3, #32
 8006118:	f107 0224 	add.w	r2, r7, #36	; 0x24
 800611c:	2301      	movs	r3, #1
 800611e:	2114      	movs	r1, #20
 8006120:	f000 ff8a 	bl	8007038 <lsm6dso_write_reg>
 8006124:	4603      	mov	r3, r0
 8006126:	2b00      	cmp	r3, #0
 8006128:	d002      	beq.n	8006130 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0xa8>
        {
          return LSM6DSO_ERROR;
 800612a:	f04f 33ff 	mov.w	r3, #4294967295
 800612e:	e13f      	b.n	80063b0 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
        }
      }

      if (lsm6dso_read_reg(&(pObj->Ctx), LSM6DSO_CTRL6_C, (uint8_t *)&val2, 1) != LSM6DSO_OK)
 8006130:	68fb      	ldr	r3, [r7, #12]
 8006132:	f103 0020 	add.w	r0, r3, #32
 8006136:	f107 0220 	add.w	r2, r7, #32
 800613a:	2301      	movs	r3, #1
 800613c:	2115      	movs	r1, #21
 800613e:	f000 ff63 	bl	8007008 <lsm6dso_read_reg>
 8006142:	4603      	mov	r3, r0
 8006144:	2b00      	cmp	r3, #0
 8006146:	d002      	beq.n	800614e <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0xc6>
      {
        return LSM6DSO_ERROR;
 8006148:	f04f 33ff 	mov.w	r3, #4294967295
 800614c:	e130      	b.n	80063b0 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
      }

      if (val2.xl_hm_mode != 0U)
 800614e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8006152:	f003 0310 	and.w	r3, r3, #16
 8006156:	b2db      	uxtb	r3, r3
 8006158:	2b00      	cmp	r3, #0
 800615a:	d014      	beq.n	8006186 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0xfe>
      {
        val2.xl_hm_mode = 0U;
 800615c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8006160:	f36f 1304 	bfc	r3, #4, #1
 8006164:	f887 3020 	strb.w	r3, [r7, #32]
        if (lsm6dso_write_reg(&(pObj->Ctx), LSM6DSO_CTRL6_C, (uint8_t *)&val2, 1) != LSM6DSO_OK)
 8006168:	68fb      	ldr	r3, [r7, #12]
 800616a:	f103 0020 	add.w	r0, r3, #32
 800616e:	f107 0220 	add.w	r2, r7, #32
 8006172:	2301      	movs	r3, #1
 8006174:	2115      	movs	r1, #21
 8006176:	f000 ff5f 	bl	8007038 <lsm6dso_write_reg>
 800617a:	4603      	mov	r3, r0
 800617c:	2b00      	cmp	r3, #0
 800617e:	d002      	beq.n	8006186 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0xfe>
        {
          return LSM6DSO_ERROR;
 8006180:	f04f 33ff 	mov.w	r3, #4294967295
 8006184:	e114      	b.n	80063b0 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
        }
      }

      /* ODR should be at least 12.5Hz */
      if (newOdr < 12.5f)
 8006186:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800618a:	eeb2 7a09 	vmov.f32	s14, #41	; 0x41480000  12.5
 800618e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006192:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006196:	d400      	bmi.n	800619a <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x112>
      {
        newOdr = 12.5f;
      }
      break;
 8006198:	e0f0      	b.n	800637c <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2f4>
        newOdr = 12.5f;
 800619a:	4b87      	ldr	r3, [pc, #540]	; (80063b8 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x330>)
 800619c:	62bb      	str	r3, [r7, #40]	; 0x28
 800619e:	e0ed      	b.n	800637c <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2f4>
      /* We must uncheck Ultra Low Power bit if it is enabled */
      /* and check the Low Power bit if it is unchecked       */
      lsm6dso_ctrl5_c_t val1;
      lsm6dso_ctrl6_c_t val2;

      if (lsm6dso_read_reg(&(pObj->Ctx), LSM6DSO_CTRL5_C, (uint8_t *)&val1, 1) != LSM6DSO_OK)
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	f103 0020 	add.w	r0, r3, #32
 80061a6:	f107 021c 	add.w	r2, r7, #28
 80061aa:	2301      	movs	r3, #1
 80061ac:	2114      	movs	r1, #20
 80061ae:	f000 ff2b 	bl	8007008 <lsm6dso_read_reg>
 80061b2:	4603      	mov	r3, r0
 80061b4:	2b00      	cmp	r3, #0
 80061b6:	d002      	beq.n	80061be <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x136>
      {
        return LSM6DSO_ERROR;
 80061b8:	f04f 33ff 	mov.w	r3, #4294967295
 80061bc:	e0f8      	b.n	80063b0 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
      }

      if (val1.xl_ulp_en != 0U)
 80061be:	7f3b      	ldrb	r3, [r7, #28]
 80061c0:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80061c4:	b2db      	uxtb	r3, r3
 80061c6:	2b00      	cmp	r3, #0
 80061c8:	d023      	beq.n	8006212 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x18a>
      {
        /* Power off the accelerometer */
        if (pObj->acc_is_enabled == 1U)
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80061d0:	2b01      	cmp	r3, #1
 80061d2:	d10b      	bne.n	80061ec <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x164>
        {
          if (lsm6dso_xl_data_rate_set(&(pObj->Ctx), LSM6DSO_XL_ODR_OFF) != LSM6DSO_OK)
 80061d4:	68fb      	ldr	r3, [r7, #12]
 80061d6:	3320      	adds	r3, #32
 80061d8:	2100      	movs	r1, #0
 80061da:	4618      	mov	r0, r3
 80061dc:	f000 ffa2 	bl	8007124 <lsm6dso_xl_data_rate_set>
 80061e0:	4603      	mov	r3, r0
 80061e2:	2b00      	cmp	r3, #0
 80061e4:	d002      	beq.n	80061ec <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x164>
          {
            return LSM6DSO_ERROR;
 80061e6:	f04f 33ff 	mov.w	r3, #4294967295
 80061ea:	e0e1      	b.n	80063b0 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
          }
        }

        val1.xl_ulp_en = 0;
 80061ec:	7f3b      	ldrb	r3, [r7, #28]
 80061ee:	f36f 13c7 	bfc	r3, #7, #1
 80061f2:	773b      	strb	r3, [r7, #28]
        if (lsm6dso_write_reg(&(pObj->Ctx), LSM6DSO_CTRL5_C, (uint8_t *)&val1, 1) != LSM6DSO_OK)
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	f103 0020 	add.w	r0, r3, #32
 80061fa:	f107 021c 	add.w	r2, r7, #28
 80061fe:	2301      	movs	r3, #1
 8006200:	2114      	movs	r1, #20
 8006202:	f000 ff19 	bl	8007038 <lsm6dso_write_reg>
 8006206:	4603      	mov	r3, r0
 8006208:	2b00      	cmp	r3, #0
 800620a:	d002      	beq.n	8006212 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x18a>
        {
          return LSM6DSO_ERROR;
 800620c:	f04f 33ff 	mov.w	r3, #4294967295
 8006210:	e0ce      	b.n	80063b0 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
        }
      }

      if (lsm6dso_read_reg(&(pObj->Ctx), LSM6DSO_CTRL6_C, (uint8_t *)&val2, 1) != LSM6DSO_OK)
 8006212:	68fb      	ldr	r3, [r7, #12]
 8006214:	f103 0020 	add.w	r0, r3, #32
 8006218:	f107 0218 	add.w	r2, r7, #24
 800621c:	2301      	movs	r3, #1
 800621e:	2115      	movs	r1, #21
 8006220:	f000 fef2 	bl	8007008 <lsm6dso_read_reg>
 8006224:	4603      	mov	r3, r0
 8006226:	2b00      	cmp	r3, #0
 8006228:	d002      	beq.n	8006230 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x1a8>
      {
        return LSM6DSO_ERROR;
 800622a:	f04f 33ff 	mov.w	r3, #4294967295
 800622e:	e0bf      	b.n	80063b0 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
      }

      if (val2.xl_hm_mode == 0U)
 8006230:	7e3b      	ldrb	r3, [r7, #24]
 8006232:	f003 0310 	and.w	r3, r3, #16
 8006236:	b2db      	uxtb	r3, r3
 8006238:	2b00      	cmp	r3, #0
 800623a:	d112      	bne.n	8006262 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x1da>
      {
        val2.xl_hm_mode = 1U;
 800623c:	7e3b      	ldrb	r3, [r7, #24]
 800623e:	f043 0310 	orr.w	r3, r3, #16
 8006242:	763b      	strb	r3, [r7, #24]
        if (lsm6dso_write_reg(&(pObj->Ctx), LSM6DSO_CTRL6_C, (uint8_t *)&val2, 1) != LSM6DSO_OK)
 8006244:	68fb      	ldr	r3, [r7, #12]
 8006246:	f103 0020 	add.w	r0, r3, #32
 800624a:	f107 0218 	add.w	r2, r7, #24
 800624e:	2301      	movs	r3, #1
 8006250:	2115      	movs	r1, #21
 8006252:	f000 fef1 	bl	8007038 <lsm6dso_write_reg>
 8006256:	4603      	mov	r3, r0
 8006258:	2b00      	cmp	r3, #0
 800625a:	d002      	beq.n	8006262 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x1da>
        {
          return LSM6DSO_ERROR;
 800625c:	f04f 33ff 	mov.w	r3, #4294967295
 8006260:	e0a6      	b.n	80063b0 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
        }
      }

      /* Now we need to limit the ODR to 208 Hz if it is higher */
      if (newOdr > 208.0f)
 8006262:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8006266:	ed9f 7a55 	vldr	s14, [pc, #340]	; 80063bc <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x334>
 800626a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800626e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006272:	dc00      	bgt.n	8006276 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x1ee>
      {
        newOdr = 208.0f;
      }
      break;
 8006274:	e082      	b.n	800637c <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2f4>
        newOdr = 208.0f;
 8006276:	4b52      	ldr	r3, [pc, #328]	; (80063c0 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x338>)
 8006278:	62bb      	str	r3, [r7, #40]	; 0x28
 800627a:	e07f      	b.n	800637c <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2f4>
      /* and check the Ultra Low Power bit if it is unchecked             */
      /* We must switch off gyro otherwise Ultra Low Power does not work  */
      lsm6dso_ctrl5_c_t val1;
      lsm6dso_ctrl6_c_t val2;

      if (lsm6dso_read_reg(&(pObj->Ctx), LSM6DSO_CTRL6_C, (uint8_t *)&val2, 1) != LSM6DSO_OK)
 800627c:	68fb      	ldr	r3, [r7, #12]
 800627e:	f103 0020 	add.w	r0, r3, #32
 8006282:	f107 0210 	add.w	r2, r7, #16
 8006286:	2301      	movs	r3, #1
 8006288:	2115      	movs	r1, #21
 800628a:	f000 febd 	bl	8007008 <lsm6dso_read_reg>
 800628e:	4603      	mov	r3, r0
 8006290:	2b00      	cmp	r3, #0
 8006292:	d002      	beq.n	800629a <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x212>
      {
        return LSM6DSO_ERROR;
 8006294:	f04f 33ff 	mov.w	r3, #4294967295
 8006298:	e08a      	b.n	80063b0 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
      }

      if (val2.xl_hm_mode != 0U)
 800629a:	7c3b      	ldrb	r3, [r7, #16]
 800629c:	f003 0310 	and.w	r3, r3, #16
 80062a0:	b2db      	uxtb	r3, r3
 80062a2:	2b00      	cmp	r3, #0
 80062a4:	d012      	beq.n	80062cc <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x244>
      {
        val2.xl_hm_mode = 0U;
 80062a6:	7c3b      	ldrb	r3, [r7, #16]
 80062a8:	f36f 1304 	bfc	r3, #4, #1
 80062ac:	743b      	strb	r3, [r7, #16]
        if (lsm6dso_write_reg(&(pObj->Ctx), LSM6DSO_CTRL6_C, (uint8_t *)&val2, 1) != LSM6DSO_OK)
 80062ae:	68fb      	ldr	r3, [r7, #12]
 80062b0:	f103 0020 	add.w	r0, r3, #32
 80062b4:	f107 0210 	add.w	r2, r7, #16
 80062b8:	2301      	movs	r3, #1
 80062ba:	2115      	movs	r1, #21
 80062bc:	f000 febc 	bl	8007038 <lsm6dso_write_reg>
 80062c0:	4603      	mov	r3, r0
 80062c2:	2b00      	cmp	r3, #0
 80062c4:	d002      	beq.n	80062cc <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x244>
        {
          return LSM6DSO_ERROR;
 80062c6:	f04f 33ff 	mov.w	r3, #4294967295
 80062ca:	e071      	b.n	80063b0 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
        }
      }

      /* Disable Gyro */
      if (pObj->gyro_is_enabled == 1U)
 80062cc:	68fb      	ldr	r3, [r7, #12]
 80062ce:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 80062d2:	2b01      	cmp	r3, #1
 80062d4:	d108      	bne.n	80062e8 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x260>
      {
        if (LSM6DSO_GYRO_Disable(pObj) != LSM6DSO_OK)
 80062d6:	68f8      	ldr	r0, [r7, #12]
 80062d8:	f000 f979 	bl	80065ce <LSM6DSO_GYRO_Disable>
 80062dc:	4603      	mov	r3, r0
 80062de:	2b00      	cmp	r3, #0
 80062e0:	d002      	beq.n	80062e8 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x260>
        {
          return LSM6DSO_ERROR;
 80062e2:	f04f 33ff 	mov.w	r3, #4294967295
 80062e6:	e063      	b.n	80063b0 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
        }
      }

      if (lsm6dso_read_reg(&(pObj->Ctx), LSM6DSO_CTRL5_C, (uint8_t *)&val1, 1) != LSM6DSO_OK)
 80062e8:	68fb      	ldr	r3, [r7, #12]
 80062ea:	f103 0020 	add.w	r0, r3, #32
 80062ee:	f107 0214 	add.w	r2, r7, #20
 80062f2:	2301      	movs	r3, #1
 80062f4:	2114      	movs	r1, #20
 80062f6:	f000 fe87 	bl	8007008 <lsm6dso_read_reg>
 80062fa:	4603      	mov	r3, r0
 80062fc:	2b00      	cmp	r3, #0
 80062fe:	d002      	beq.n	8006306 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x27e>
      {
        return LSM6DSO_ERROR;
 8006300:	f04f 33ff 	mov.w	r3, #4294967295
 8006304:	e054      	b.n	80063b0 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
      }

      if (val1.xl_ulp_en == 0U)
 8006306:	7d3b      	ldrb	r3, [r7, #20]
 8006308:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800630c:	b2db      	uxtb	r3, r3
 800630e:	2b00      	cmp	r3, #0
 8006310:	d123      	bne.n	800635a <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2d2>
      {
        /* Power off the accelerometer */
        if (pObj->acc_is_enabled == 1U)
 8006312:	68fb      	ldr	r3, [r7, #12]
 8006314:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8006318:	2b01      	cmp	r3, #1
 800631a:	d10b      	bne.n	8006334 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2ac>
        {
          if (lsm6dso_xl_data_rate_set(&(pObj->Ctx), LSM6DSO_XL_ODR_OFF) != LSM6DSO_OK)
 800631c:	68fb      	ldr	r3, [r7, #12]
 800631e:	3320      	adds	r3, #32
 8006320:	2100      	movs	r1, #0
 8006322:	4618      	mov	r0, r3
 8006324:	f000 fefe 	bl	8007124 <lsm6dso_xl_data_rate_set>
 8006328:	4603      	mov	r3, r0
 800632a:	2b00      	cmp	r3, #0
 800632c:	d002      	beq.n	8006334 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2ac>
          {
            return LSM6DSO_ERROR;
 800632e:	f04f 33ff 	mov.w	r3, #4294967295
 8006332:	e03d      	b.n	80063b0 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
          }
        }

        val1.xl_ulp_en = 1U;
 8006334:	7d3b      	ldrb	r3, [r7, #20]
 8006336:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800633a:	753b      	strb	r3, [r7, #20]
        if (lsm6dso_write_reg(&(pObj->Ctx), LSM6DSO_CTRL5_C, (uint8_t *)&val1, 1) != LSM6DSO_OK)
 800633c:	68fb      	ldr	r3, [r7, #12]
 800633e:	f103 0020 	add.w	r0, r3, #32
 8006342:	f107 0214 	add.w	r2, r7, #20
 8006346:	2301      	movs	r3, #1
 8006348:	2114      	movs	r1, #20
 800634a:	f000 fe75 	bl	8007038 <lsm6dso_write_reg>
 800634e:	4603      	mov	r3, r0
 8006350:	2b00      	cmp	r3, #0
 8006352:	d002      	beq.n	800635a <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2d2>
        {
          return LSM6DSO_ERROR;
 8006354:	f04f 33ff 	mov.w	r3, #4294967295
 8006358:	e02a      	b.n	80063b0 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
        }
      }

      /* Now we need to limit the ODR to 208 Hz if it is higher */
      if (newOdr > 208.0f)
 800635a:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800635e:	ed9f 7a17 	vldr	s14, [pc, #92]	; 80063bc <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x334>
 8006362:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006366:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800636a:	dc00      	bgt.n	800636e <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2e6>
      {
        newOdr = 208.0f;
      }
      break;
 800636c:	e006      	b.n	800637c <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2f4>
        newOdr = 208.0f;
 800636e:	4b14      	ldr	r3, [pc, #80]	; (80063c0 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x338>)
 8006370:	62bb      	str	r3, [r7, #40]	; 0x28
 8006372:	e003      	b.n	800637c <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2f4>
    }
    default:
      ret = LSM6DSO_ERROR;
 8006374:	f04f 33ff 	mov.w	r3, #4294967295
 8006378:	62fb      	str	r3, [r7, #44]	; 0x2c
      break;
 800637a:	bf00      	nop
  }

  if (ret == LSM6DSO_ERROR)
 800637c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800637e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006382:	d102      	bne.n	800638a <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x302>
  {
    return LSM6DSO_ERROR;
 8006384:	f04f 33ff 	mov.w	r3, #4294967295
 8006388:	e012      	b.n	80063b0 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
  }

  if (pObj->acc_is_enabled == 1U)
 800638a:	68fb      	ldr	r3, [r7, #12]
 800638c:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8006390:	2b01      	cmp	r3, #1
 8006392:	d106      	bne.n	80063a2 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x31a>
  {
    ret = LSM6DSO_ACC_SetOutputDataRate_When_Enabled(pObj, newOdr);
 8006394:	ed97 0a0a 	vldr	s0, [r7, #40]	; 0x28
 8006398:	68f8      	ldr	r0, [r7, #12]
 800639a:	f000 fbc9 	bl	8006b30 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled>
 800639e:	62f8      	str	r0, [r7, #44]	; 0x2c
 80063a0:	e005      	b.n	80063ae <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x326>
  }
  else
  {
    ret = LSM6DSO_ACC_SetOutputDataRate_When_Disabled(pObj, newOdr);
 80063a2:	ed97 0a0a 	vldr	s0, [r7, #40]	; 0x28
 80063a6:	68f8      	ldr	r0, [r7, #12]
 80063a8:	f000 fc5a 	bl	8006c60 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled>
 80063ac:	62f8      	str	r0, [r7, #44]	; 0x2c
  }

  return ret;
 80063ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 80063b0:	4618      	mov	r0, r3
 80063b2:	3730      	adds	r7, #48	; 0x30
 80063b4:	46bd      	mov	sp, r7
 80063b6:	bd80      	pop	{r7, pc}
 80063b8:	41480000 	.word	0x41480000
 80063bc:	43500000 	.word	0x43500000
 80063c0:	43500000 	.word	0x43500000

080063c4 <LSM6DSO_ACC_GetFullScale>:
  * @param  pObj the device pObj
  * @param  FullScale pointer where the full scale is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_ACC_GetFullScale(LSM6DSO_Object_t *pObj, int32_t *FullScale)
{
 80063c4:	b580      	push	{r7, lr}
 80063c6:	b084      	sub	sp, #16
 80063c8:	af00      	add	r7, sp, #0
 80063ca:	6078      	str	r0, [r7, #4]
 80063cc:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSO_OK;
 80063ce:	2300      	movs	r3, #0
 80063d0:	60fb      	str	r3, [r7, #12]
  lsm6dso_fs_xl_t fs_low_level;

  /* Read actual full scale selection from sensor. */
  if (lsm6dso_xl_full_scale_get(&(pObj->Ctx), &fs_low_level) != LSM6DSO_OK)
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	3320      	adds	r3, #32
 80063d6:	f107 020b 	add.w	r2, r7, #11
 80063da:	4611      	mov	r1, r2
 80063dc:	4618      	mov	r0, r3
 80063de:	f000 fe69 	bl	80070b4 <lsm6dso_xl_full_scale_get>
 80063e2:	4603      	mov	r3, r0
 80063e4:	2b00      	cmp	r3, #0
 80063e6:	d002      	beq.n	80063ee <LSM6DSO_ACC_GetFullScale+0x2a>
  {
    return LSM6DSO_ERROR;
 80063e8:	f04f 33ff 	mov.w	r3, #4294967295
 80063ec:	e023      	b.n	8006436 <LSM6DSO_ACC_GetFullScale+0x72>
  }

  switch (fs_low_level)
 80063ee:	7afb      	ldrb	r3, [r7, #11]
 80063f0:	2b03      	cmp	r3, #3
 80063f2:	d81b      	bhi.n	800642c <LSM6DSO_ACC_GetFullScale+0x68>
 80063f4:	a201      	add	r2, pc, #4	; (adr r2, 80063fc <LSM6DSO_ACC_GetFullScale+0x38>)
 80063f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80063fa:	bf00      	nop
 80063fc:	0800640d 	.word	0x0800640d
 8006400:	08006425 	.word	0x08006425
 8006404:	08006415 	.word	0x08006415
 8006408:	0800641d 	.word	0x0800641d
  {
    case LSM6DSO_2g:
      *FullScale =  2;
 800640c:	683b      	ldr	r3, [r7, #0]
 800640e:	2202      	movs	r2, #2
 8006410:	601a      	str	r2, [r3, #0]
      break;
 8006412:	e00f      	b.n	8006434 <LSM6DSO_ACC_GetFullScale+0x70>

    case LSM6DSO_4g:
      *FullScale =  4;
 8006414:	683b      	ldr	r3, [r7, #0]
 8006416:	2204      	movs	r2, #4
 8006418:	601a      	str	r2, [r3, #0]
      break;
 800641a:	e00b      	b.n	8006434 <LSM6DSO_ACC_GetFullScale+0x70>

    case LSM6DSO_8g:
      *FullScale =  8;
 800641c:	683b      	ldr	r3, [r7, #0]
 800641e:	2208      	movs	r2, #8
 8006420:	601a      	str	r2, [r3, #0]
      break;
 8006422:	e007      	b.n	8006434 <LSM6DSO_ACC_GetFullScale+0x70>

    case LSM6DSO_16g:
      *FullScale = 16;
 8006424:	683b      	ldr	r3, [r7, #0]
 8006426:	2210      	movs	r2, #16
 8006428:	601a      	str	r2, [r3, #0]
      break;
 800642a:	e003      	b.n	8006434 <LSM6DSO_ACC_GetFullScale+0x70>

    default:
      ret = LSM6DSO_ERROR;
 800642c:	f04f 33ff 	mov.w	r3, #4294967295
 8006430:	60fb      	str	r3, [r7, #12]
      break;
 8006432:	bf00      	nop
  }

  return ret;
 8006434:	68fb      	ldr	r3, [r7, #12]
}
 8006436:	4618      	mov	r0, r3
 8006438:	3710      	adds	r7, #16
 800643a:	46bd      	mov	sp, r7
 800643c:	bd80      	pop	{r7, pc}
 800643e:	bf00      	nop

08006440 <LSM6DSO_ACC_SetFullScale>:
  * @param  pObj the device pObj
  * @param  FullScale the functional full scale to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_ACC_SetFullScale(LSM6DSO_Object_t *pObj, int32_t FullScale)
{
 8006440:	b580      	push	{r7, lr}
 8006442:	b084      	sub	sp, #16
 8006444:	af00      	add	r7, sp, #0
 8006446:	6078      	str	r0, [r7, #4]
 8006448:	6039      	str	r1, [r7, #0]
  lsm6dso_fs_xl_t new_fs;

  /* Seems like MISRA C-2012 rule 14.3a violation but only from single file statical analysis point of view because
     the parameter passed to the function is not known at the moment of analysis */
  new_fs = (FullScale <= 2) ? LSM6DSO_2g
           : (FullScale <= 4) ? LSM6DSO_4g
 800644a:	683b      	ldr	r3, [r7, #0]
 800644c:	2b02      	cmp	r3, #2
 800644e:	dd0b      	ble.n	8006468 <LSM6DSO_ACC_SetFullScale+0x28>
 8006450:	683b      	ldr	r3, [r7, #0]
 8006452:	2b04      	cmp	r3, #4
 8006454:	dd06      	ble.n	8006464 <LSM6DSO_ACC_SetFullScale+0x24>
 8006456:	683b      	ldr	r3, [r7, #0]
 8006458:	2b08      	cmp	r3, #8
 800645a:	dc01      	bgt.n	8006460 <LSM6DSO_ACC_SetFullScale+0x20>
 800645c:	2303      	movs	r3, #3
 800645e:	e004      	b.n	800646a <LSM6DSO_ACC_SetFullScale+0x2a>
 8006460:	2301      	movs	r3, #1
 8006462:	e002      	b.n	800646a <LSM6DSO_ACC_SetFullScale+0x2a>
 8006464:	2302      	movs	r3, #2
 8006466:	e000      	b.n	800646a <LSM6DSO_ACC_SetFullScale+0x2a>
 8006468:	2300      	movs	r3, #0
  new_fs = (FullScale <= 2) ? LSM6DSO_2g
 800646a:	73fb      	strb	r3, [r7, #15]
           : (FullScale <= 8) ? LSM6DSO_8g
           :                    LSM6DSO_16g;

  if (lsm6dso_xl_full_scale_set(&(pObj->Ctx), new_fs) != LSM6DSO_OK)
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	3320      	adds	r3, #32
 8006470:	7bfa      	ldrb	r2, [r7, #15]
 8006472:	4611      	mov	r1, r2
 8006474:	4618      	mov	r0, r3
 8006476:	f000 fdf7 	bl	8007068 <lsm6dso_xl_full_scale_set>
 800647a:	4603      	mov	r3, r0
 800647c:	2b00      	cmp	r3, #0
 800647e:	d002      	beq.n	8006486 <LSM6DSO_ACC_SetFullScale+0x46>
  {
    return LSM6DSO_ERROR;
 8006480:	f04f 33ff 	mov.w	r3, #4294967295
 8006484:	e000      	b.n	8006488 <LSM6DSO_ACC_SetFullScale+0x48>
  }

  return LSM6DSO_OK;
 8006486:	2300      	movs	r3, #0
}
 8006488:	4618      	mov	r0, r3
 800648a:	3710      	adds	r7, #16
 800648c:	46bd      	mov	sp, r7
 800648e:	bd80      	pop	{r7, pc}

08006490 <LSM6DSO_ACC_GetAxesRaw>:
  * @param  pObj the device pObj
  * @param  Value pointer where the raw values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_ACC_GetAxesRaw(LSM6DSO_Object_t *pObj, LSM6DSO_AxesRaw_t *Value)
{
 8006490:	b580      	push	{r7, lr}
 8006492:	b084      	sub	sp, #16
 8006494:	af00      	add	r7, sp, #0
 8006496:	6078      	str	r0, [r7, #4]
 8006498:	6039      	str	r1, [r7, #0]
  lsm6dso_axis3bit16_t data_raw;

  /* Read raw data values. */
  if (lsm6dso_acceleration_raw_get(&(pObj->Ctx), data_raw.i16bit) != LSM6DSO_OK)
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	3320      	adds	r3, #32
 800649e:	f107 0208 	add.w	r2, r7, #8
 80064a2:	4611      	mov	r1, r2
 80064a4:	4618      	mov	r0, r3
 80064a6:	f001 f9d8 	bl	800785a <lsm6dso_acceleration_raw_get>
 80064aa:	4603      	mov	r3, r0
 80064ac:	2b00      	cmp	r3, #0
 80064ae:	d002      	beq.n	80064b6 <LSM6DSO_ACC_GetAxesRaw+0x26>
  {
    return LSM6DSO_ERROR;
 80064b0:	f04f 33ff 	mov.w	r3, #4294967295
 80064b4:	e00c      	b.n	80064d0 <LSM6DSO_ACC_GetAxesRaw+0x40>
  }

  /* Format the data. */
  Value->x = data_raw.i16bit[0];
 80064b6:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 80064ba:	683b      	ldr	r3, [r7, #0]
 80064bc:	801a      	strh	r2, [r3, #0]
  Value->y = data_raw.i16bit[1];
 80064be:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 80064c2:	683b      	ldr	r3, [r7, #0]
 80064c4:	805a      	strh	r2, [r3, #2]
  Value->z = data_raw.i16bit[2];
 80064c6:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 80064ca:	683b      	ldr	r3, [r7, #0]
 80064cc:	809a      	strh	r2, [r3, #4]

  return LSM6DSO_OK;
 80064ce:	2300      	movs	r3, #0
}
 80064d0:	4618      	mov	r0, r3
 80064d2:	3710      	adds	r7, #16
 80064d4:	46bd      	mov	sp, r7
 80064d6:	bd80      	pop	{r7, pc}

080064d8 <LSM6DSO_ACC_GetAxes>:
  * @param  pObj the device pObj
  * @param  Acceleration pointer where the values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_ACC_GetAxes(LSM6DSO_Object_t *pObj, LSM6DSO_Axes_t *Acceleration)
{
 80064d8:	b580      	push	{r7, lr}
 80064da:	b086      	sub	sp, #24
 80064dc:	af00      	add	r7, sp, #0
 80064de:	6078      	str	r0, [r7, #4]
 80064e0:	6039      	str	r1, [r7, #0]
  lsm6dso_axis3bit16_t data_raw;
  float_t sensitivity = 0.0f;
 80064e2:	f04f 0300 	mov.w	r3, #0
 80064e6:	60fb      	str	r3, [r7, #12]

  /* Read raw data values. */
  if (lsm6dso_acceleration_raw_get(&(pObj->Ctx), data_raw.i16bit) != LSM6DSO_OK)
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	3320      	adds	r3, #32
 80064ec:	f107 0210 	add.w	r2, r7, #16
 80064f0:	4611      	mov	r1, r2
 80064f2:	4618      	mov	r0, r3
 80064f4:	f001 f9b1 	bl	800785a <lsm6dso_acceleration_raw_get>
 80064f8:	4603      	mov	r3, r0
 80064fa:	2b00      	cmp	r3, #0
 80064fc:	d002      	beq.n	8006504 <LSM6DSO_ACC_GetAxes+0x2c>
  {
    return LSM6DSO_ERROR;
 80064fe:	f04f 33ff 	mov.w	r3, #4294967295
 8006502:	e03c      	b.n	800657e <LSM6DSO_ACC_GetAxes+0xa6>
  }

  /* Get LSM6DSO actual sensitivity. */
  if (LSM6DSO_ACC_GetSensitivity(pObj, &sensitivity) != LSM6DSO_OK)
 8006504:	f107 030c 	add.w	r3, r7, #12
 8006508:	4619      	mov	r1, r3
 800650a:	6878      	ldr	r0, [r7, #4]
 800650c:	f7ff fce0 	bl	8005ed0 <LSM6DSO_ACC_GetSensitivity>
 8006510:	4603      	mov	r3, r0
 8006512:	2b00      	cmp	r3, #0
 8006514:	d002      	beq.n	800651c <LSM6DSO_ACC_GetAxes+0x44>
  {
    return LSM6DSO_ERROR;
 8006516:	f04f 33ff 	mov.w	r3, #4294967295
 800651a:	e030      	b.n	800657e <LSM6DSO_ACC_GetAxes+0xa6>
  }

  /* Calculate the data. */
  Acceleration->x = (int32_t)((float_t)((float_t)data_raw.i16bit[0] * sensitivity));
 800651c:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8006520:	ee07 3a90 	vmov	s15, r3
 8006524:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006528:	edd7 7a03 	vldr	s15, [r7, #12]
 800652c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006530:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006534:	ee17 2a90 	vmov	r2, s15
 8006538:	683b      	ldr	r3, [r7, #0]
 800653a:	601a      	str	r2, [r3, #0]
  Acceleration->y = (int32_t)((float_t)((float_t)data_raw.i16bit[1] * sensitivity));
 800653c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8006540:	ee07 3a90 	vmov	s15, r3
 8006544:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006548:	edd7 7a03 	vldr	s15, [r7, #12]
 800654c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006550:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006554:	ee17 2a90 	vmov	r2, s15
 8006558:	683b      	ldr	r3, [r7, #0]
 800655a:	605a      	str	r2, [r3, #4]
  Acceleration->z = (int32_t)((float_t)((float_t)data_raw.i16bit[2] * sensitivity));
 800655c:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8006560:	ee07 3a90 	vmov	s15, r3
 8006564:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006568:	edd7 7a03 	vldr	s15, [r7, #12]
 800656c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006570:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006574:	ee17 2a90 	vmov	r2, s15
 8006578:	683b      	ldr	r3, [r7, #0]
 800657a:	609a      	str	r2, [r3, #8]

  return LSM6DSO_OK;
 800657c:	2300      	movs	r3, #0
}
 800657e:	4618      	mov	r0, r3
 8006580:	3718      	adds	r7, #24
 8006582:	46bd      	mov	sp, r7
 8006584:	bd80      	pop	{r7, pc}

08006586 <LSM6DSO_GYRO_Enable>:
  * @brief  Enable the LSM6DSO gyroscope sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_GYRO_Enable(LSM6DSO_Object_t *pObj)
{
 8006586:	b580      	push	{r7, lr}
 8006588:	b082      	sub	sp, #8
 800658a:	af00      	add	r7, sp, #0
 800658c:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->gyro_is_enabled == 1U)
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8006594:	2b01      	cmp	r3, #1
 8006596:	d101      	bne.n	800659c <LSM6DSO_GYRO_Enable+0x16>
  {
    return LSM6DSO_OK;
 8006598:	2300      	movs	r3, #0
 800659a:	e014      	b.n	80065c6 <LSM6DSO_GYRO_Enable+0x40>
  }

  /* Output data rate selection. */
  if (lsm6dso_gy_data_rate_set(&(pObj->Ctx), pObj->gyro_odr) != LSM6DSO_OK)
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	f103 0220 	add.w	r2, r3, #32
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80065a8:	4619      	mov	r1, r3
 80065aa:	4610      	mov	r0, r2
 80065ac:	f000 ff86 	bl	80074bc <lsm6dso_gy_data_rate_set>
 80065b0:	4603      	mov	r3, r0
 80065b2:	2b00      	cmp	r3, #0
 80065b4:	d002      	beq.n	80065bc <LSM6DSO_GYRO_Enable+0x36>
  {
    return LSM6DSO_ERROR;
 80065b6:	f04f 33ff 	mov.w	r3, #4294967295
 80065ba:	e004      	b.n	80065c6 <LSM6DSO_GYRO_Enable+0x40>
  }

  pObj->gyro_is_enabled = 1;
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	2201      	movs	r2, #1
 80065c0:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32

  return LSM6DSO_OK;
 80065c4:	2300      	movs	r3, #0
}
 80065c6:	4618      	mov	r0, r3
 80065c8:	3708      	adds	r7, #8
 80065ca:	46bd      	mov	sp, r7
 80065cc:	bd80      	pop	{r7, pc}

080065ce <LSM6DSO_GYRO_Disable>:
  * @brief  Disable the LSM6DSO gyroscope sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_GYRO_Disable(LSM6DSO_Object_t *pObj)
{
 80065ce:	b580      	push	{r7, lr}
 80065d0:	b082      	sub	sp, #8
 80065d2:	af00      	add	r7, sp, #0
 80065d4:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->gyro_is_enabled == 0U)
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 80065dc:	2b00      	cmp	r3, #0
 80065de:	d101      	bne.n	80065e4 <LSM6DSO_GYRO_Disable+0x16>
  {
    return LSM6DSO_OK;
 80065e0:	2300      	movs	r3, #0
 80065e2:	e01f      	b.n	8006624 <LSM6DSO_GYRO_Disable+0x56>
  }

  /* Get current output data rate. */
  if (lsm6dso_gy_data_rate_get(&(pObj->Ctx), &pObj->gyro_odr) != LSM6DSO_OK)
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	f103 0220 	add.w	r2, r3, #32
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	3334      	adds	r3, #52	; 0x34
 80065ee:	4619      	mov	r1, r3
 80065f0:	4610      	mov	r0, r2
 80065f2:	f001 f85f 	bl	80076b4 <lsm6dso_gy_data_rate_get>
 80065f6:	4603      	mov	r3, r0
 80065f8:	2b00      	cmp	r3, #0
 80065fa:	d002      	beq.n	8006602 <LSM6DSO_GYRO_Disable+0x34>
  {
    return LSM6DSO_ERROR;
 80065fc:	f04f 33ff 	mov.w	r3, #4294967295
 8006600:	e010      	b.n	8006624 <LSM6DSO_GYRO_Disable+0x56>
  }

  /* Output data rate selection - power down. */
  if (lsm6dso_gy_data_rate_set(&(pObj->Ctx), LSM6DSO_GY_ODR_OFF) != LSM6DSO_OK)
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	3320      	adds	r3, #32
 8006606:	2100      	movs	r1, #0
 8006608:	4618      	mov	r0, r3
 800660a:	f000 ff57 	bl	80074bc <lsm6dso_gy_data_rate_set>
 800660e:	4603      	mov	r3, r0
 8006610:	2b00      	cmp	r3, #0
 8006612:	d002      	beq.n	800661a <LSM6DSO_GYRO_Disable+0x4c>
  {
    return LSM6DSO_ERROR;
 8006614:	f04f 33ff 	mov.w	r3, #4294967295
 8006618:	e004      	b.n	8006624 <LSM6DSO_GYRO_Disable+0x56>
  }

  pObj->gyro_is_enabled = 0;
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	2200      	movs	r2, #0
 800661e:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32

  return LSM6DSO_OK;
 8006622:	2300      	movs	r3, #0
}
 8006624:	4618      	mov	r0, r3
 8006626:	3708      	adds	r7, #8
 8006628:	46bd      	mov	sp, r7
 800662a:	bd80      	pop	{r7, pc}

0800662c <LSM6DSO_GYRO_GetSensitivity>:
  * @param  pObj the device pObj
  * @param  Sensitivity pointer
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_GYRO_GetSensitivity(LSM6DSO_Object_t *pObj, float_t *Sensitivity)
{
 800662c:	b580      	push	{r7, lr}
 800662e:	b084      	sub	sp, #16
 8006630:	af00      	add	r7, sp, #0
 8006632:	6078      	str	r0, [r7, #4]
 8006634:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSO_OK;
 8006636:	2300      	movs	r3, #0
 8006638:	60fb      	str	r3, [r7, #12]
  lsm6dso_fs_g_t full_scale;

  /* Read actual full scale selection from sensor. */
  if (lsm6dso_gy_full_scale_get(&(pObj->Ctx), &full_scale) != LSM6DSO_OK)
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	3320      	adds	r3, #32
 800663e:	f107 020b 	add.w	r2, r7, #11
 8006642:	4611      	mov	r1, r2
 8006644:	4618      	mov	r0, r3
 8006646:	f000 fef7 	bl	8007438 <lsm6dso_gy_full_scale_get>
 800664a:	4603      	mov	r3, r0
 800664c:	2b00      	cmp	r3, #0
 800664e:	d002      	beq.n	8006656 <LSM6DSO_GYRO_GetSensitivity+0x2a>
  {
    return LSM6DSO_ERROR;
 8006650:	f04f 33ff 	mov.w	r3, #4294967295
 8006654:	e02d      	b.n	80066b2 <LSM6DSO_GYRO_GetSensitivity+0x86>
  }

  /* Store the sensitivity based on actual full scale. */
  switch (full_scale)
 8006656:	7afb      	ldrb	r3, [r7, #11]
 8006658:	2b06      	cmp	r3, #6
 800665a:	d825      	bhi.n	80066a8 <LSM6DSO_GYRO_GetSensitivity+0x7c>
 800665c:	a201      	add	r2, pc, #4	; (adr r2, 8006664 <LSM6DSO_GYRO_GetSensitivity+0x38>)
 800665e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006662:	bf00      	nop
 8006664:	08006689 	.word	0x08006689
 8006668:	08006681 	.word	0x08006681
 800666c:	08006691 	.word	0x08006691
 8006670:	080066a9 	.word	0x080066a9
 8006674:	08006699 	.word	0x08006699
 8006678:	080066a9 	.word	0x080066a9
 800667c:	080066a1 	.word	0x080066a1
  {
    case LSM6DSO_125dps:
      *Sensitivity = LSM6DSO_GYRO_SENSITIVITY_FS_125DPS;
 8006680:	683b      	ldr	r3, [r7, #0]
 8006682:	4a0e      	ldr	r2, [pc, #56]	; (80066bc <LSM6DSO_GYRO_GetSensitivity+0x90>)
 8006684:	601a      	str	r2, [r3, #0]
      break;
 8006686:	e013      	b.n	80066b0 <LSM6DSO_GYRO_GetSensitivity+0x84>

    case LSM6DSO_250dps:
      *Sensitivity = LSM6DSO_GYRO_SENSITIVITY_FS_250DPS;
 8006688:	683b      	ldr	r3, [r7, #0]
 800668a:	4a0d      	ldr	r2, [pc, #52]	; (80066c0 <LSM6DSO_GYRO_GetSensitivity+0x94>)
 800668c:	601a      	str	r2, [r3, #0]
      break;
 800668e:	e00f      	b.n	80066b0 <LSM6DSO_GYRO_GetSensitivity+0x84>

    case LSM6DSO_500dps:
      *Sensitivity = LSM6DSO_GYRO_SENSITIVITY_FS_500DPS;
 8006690:	683b      	ldr	r3, [r7, #0]
 8006692:	4a0c      	ldr	r2, [pc, #48]	; (80066c4 <LSM6DSO_GYRO_GetSensitivity+0x98>)
 8006694:	601a      	str	r2, [r3, #0]
      break;
 8006696:	e00b      	b.n	80066b0 <LSM6DSO_GYRO_GetSensitivity+0x84>

    case LSM6DSO_1000dps:
      *Sensitivity = LSM6DSO_GYRO_SENSITIVITY_FS_1000DPS;
 8006698:	683b      	ldr	r3, [r7, #0]
 800669a:	4a0b      	ldr	r2, [pc, #44]	; (80066c8 <LSM6DSO_GYRO_GetSensitivity+0x9c>)
 800669c:	601a      	str	r2, [r3, #0]
      break;
 800669e:	e007      	b.n	80066b0 <LSM6DSO_GYRO_GetSensitivity+0x84>

    case LSM6DSO_2000dps:
      *Sensitivity = LSM6DSO_GYRO_SENSITIVITY_FS_2000DPS;
 80066a0:	683b      	ldr	r3, [r7, #0]
 80066a2:	4a0a      	ldr	r2, [pc, #40]	; (80066cc <LSM6DSO_GYRO_GetSensitivity+0xa0>)
 80066a4:	601a      	str	r2, [r3, #0]
      break;
 80066a6:	e003      	b.n	80066b0 <LSM6DSO_GYRO_GetSensitivity+0x84>

    default:
      ret = LSM6DSO_ERROR;
 80066a8:	f04f 33ff 	mov.w	r3, #4294967295
 80066ac:	60fb      	str	r3, [r7, #12]
      break;
 80066ae:	bf00      	nop
  }

  return ret;
 80066b0:	68fb      	ldr	r3, [r7, #12]
}
 80066b2:	4618      	mov	r0, r3
 80066b4:	3710      	adds	r7, #16
 80066b6:	46bd      	mov	sp, r7
 80066b8:	bd80      	pop	{r7, pc}
 80066ba:	bf00      	nop
 80066bc:	408c0000 	.word	0x408c0000
 80066c0:	410c0000 	.word	0x410c0000
 80066c4:	418c0000 	.word	0x418c0000
 80066c8:	420c0000 	.word	0x420c0000
 80066cc:	428c0000 	.word	0x428c0000

080066d0 <LSM6DSO_GYRO_GetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr pointer where the output data rate is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_GYRO_GetOutputDataRate(LSM6DSO_Object_t *pObj, float_t *Odr)
{
 80066d0:	b580      	push	{r7, lr}
 80066d2:	b084      	sub	sp, #16
 80066d4:	af00      	add	r7, sp, #0
 80066d6:	6078      	str	r0, [r7, #4]
 80066d8:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSO_OK;
 80066da:	2300      	movs	r3, #0
 80066dc:	60fb      	str	r3, [r7, #12]
  lsm6dso_odr_g_t odr_low_level;

  /* Get current output data rate. */
  if (lsm6dso_gy_data_rate_get(&(pObj->Ctx), &odr_low_level) != LSM6DSO_OK)
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	3320      	adds	r3, #32
 80066e2:	f107 020b 	add.w	r2, r7, #11
 80066e6:	4611      	mov	r1, r2
 80066e8:	4618      	mov	r0, r3
 80066ea:	f000 ffe3 	bl	80076b4 <lsm6dso_gy_data_rate_get>
 80066ee:	4603      	mov	r3, r0
 80066f0:	2b00      	cmp	r3, #0
 80066f2:	d002      	beq.n	80066fa <LSM6DSO_GYRO_GetOutputDataRate+0x2a>
  {
    return LSM6DSO_ERROR;
 80066f4:	f04f 33ff 	mov.w	r3, #4294967295
 80066f8:	e04e      	b.n	8006798 <LSM6DSO_GYRO_GetOutputDataRate+0xc8>
  }

  switch (odr_low_level)
 80066fa:	7afb      	ldrb	r3, [r7, #11]
 80066fc:	2b0a      	cmp	r3, #10
 80066fe:	d846      	bhi.n	800678e <LSM6DSO_GYRO_GetOutputDataRate+0xbe>
 8006700:	a201      	add	r2, pc, #4	; (adr r2, 8006708 <LSM6DSO_GYRO_GetOutputDataRate+0x38>)
 8006702:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006706:	bf00      	nop
 8006708:	08006735 	.word	0x08006735
 800670c:	0800673f 	.word	0x0800673f
 8006710:	08006747 	.word	0x08006747
 8006714:	0800674f 	.word	0x0800674f
 8006718:	08006757 	.word	0x08006757
 800671c:	0800675f 	.word	0x0800675f
 8006720:	08006767 	.word	0x08006767
 8006724:	0800676f 	.word	0x0800676f
 8006728:	08006777 	.word	0x08006777
 800672c:	0800677f 	.word	0x0800677f
 8006730:	08006787 	.word	0x08006787
  {
    case LSM6DSO_GY_ODR_OFF:
      *Odr = 0.0f;
 8006734:	683b      	ldr	r3, [r7, #0]
 8006736:	f04f 0200 	mov.w	r2, #0
 800673a:	601a      	str	r2, [r3, #0]
      break;
 800673c:	e02b      	b.n	8006796 <LSM6DSO_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSO_GY_ODR_12Hz5:
      *Odr = 12.5f;
 800673e:	683b      	ldr	r3, [r7, #0]
 8006740:	4a17      	ldr	r2, [pc, #92]	; (80067a0 <LSM6DSO_GYRO_GetOutputDataRate+0xd0>)
 8006742:	601a      	str	r2, [r3, #0]
      break;
 8006744:	e027      	b.n	8006796 <LSM6DSO_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSO_GY_ODR_26Hz:
      *Odr = 26.0f;
 8006746:	683b      	ldr	r3, [r7, #0]
 8006748:	4a16      	ldr	r2, [pc, #88]	; (80067a4 <LSM6DSO_GYRO_GetOutputDataRate+0xd4>)
 800674a:	601a      	str	r2, [r3, #0]
      break;
 800674c:	e023      	b.n	8006796 <LSM6DSO_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSO_GY_ODR_52Hz:
      *Odr = 52.0f;
 800674e:	683b      	ldr	r3, [r7, #0]
 8006750:	4a15      	ldr	r2, [pc, #84]	; (80067a8 <LSM6DSO_GYRO_GetOutputDataRate+0xd8>)
 8006752:	601a      	str	r2, [r3, #0]
      break;
 8006754:	e01f      	b.n	8006796 <LSM6DSO_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSO_GY_ODR_104Hz:
      *Odr = 104.0f;
 8006756:	683b      	ldr	r3, [r7, #0]
 8006758:	4a14      	ldr	r2, [pc, #80]	; (80067ac <LSM6DSO_GYRO_GetOutputDataRate+0xdc>)
 800675a:	601a      	str	r2, [r3, #0]
      break;
 800675c:	e01b      	b.n	8006796 <LSM6DSO_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSO_GY_ODR_208Hz:
      *Odr = 208.0f;
 800675e:	683b      	ldr	r3, [r7, #0]
 8006760:	4a13      	ldr	r2, [pc, #76]	; (80067b0 <LSM6DSO_GYRO_GetOutputDataRate+0xe0>)
 8006762:	601a      	str	r2, [r3, #0]
      break;
 8006764:	e017      	b.n	8006796 <LSM6DSO_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSO_GY_ODR_417Hz:
      *Odr = 417.0f;
 8006766:	683b      	ldr	r3, [r7, #0]
 8006768:	4a12      	ldr	r2, [pc, #72]	; (80067b4 <LSM6DSO_GYRO_GetOutputDataRate+0xe4>)
 800676a:	601a      	str	r2, [r3, #0]
      break;
 800676c:	e013      	b.n	8006796 <LSM6DSO_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSO_GY_ODR_833Hz:
      *Odr = 833.0f;
 800676e:	683b      	ldr	r3, [r7, #0]
 8006770:	4a11      	ldr	r2, [pc, #68]	; (80067b8 <LSM6DSO_GYRO_GetOutputDataRate+0xe8>)
 8006772:	601a      	str	r2, [r3, #0]
      break;
 8006774:	e00f      	b.n	8006796 <LSM6DSO_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSO_GY_ODR_1667Hz:
      *Odr = 1667.0f;
 8006776:	683b      	ldr	r3, [r7, #0]
 8006778:	4a10      	ldr	r2, [pc, #64]	; (80067bc <LSM6DSO_GYRO_GetOutputDataRate+0xec>)
 800677a:	601a      	str	r2, [r3, #0]
      break;
 800677c:	e00b      	b.n	8006796 <LSM6DSO_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSO_GY_ODR_3333Hz:
      *Odr = 3333.0f;
 800677e:	683b      	ldr	r3, [r7, #0]
 8006780:	4a0f      	ldr	r2, [pc, #60]	; (80067c0 <LSM6DSO_GYRO_GetOutputDataRate+0xf0>)
 8006782:	601a      	str	r2, [r3, #0]
      break;
 8006784:	e007      	b.n	8006796 <LSM6DSO_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSO_GY_ODR_6667Hz:
      *Odr = 6667.0f;
 8006786:	683b      	ldr	r3, [r7, #0]
 8006788:	4a0e      	ldr	r2, [pc, #56]	; (80067c4 <LSM6DSO_GYRO_GetOutputDataRate+0xf4>)
 800678a:	601a      	str	r2, [r3, #0]
      break;
 800678c:	e003      	b.n	8006796 <LSM6DSO_GYRO_GetOutputDataRate+0xc6>

    default:
      ret = LSM6DSO_ERROR;
 800678e:	f04f 33ff 	mov.w	r3, #4294967295
 8006792:	60fb      	str	r3, [r7, #12]
      break;
 8006794:	bf00      	nop
  }

  return ret;
 8006796:	68fb      	ldr	r3, [r7, #12]
}
 8006798:	4618      	mov	r0, r3
 800679a:	3710      	adds	r7, #16
 800679c:	46bd      	mov	sp, r7
 800679e:	bd80      	pop	{r7, pc}
 80067a0:	41480000 	.word	0x41480000
 80067a4:	41d00000 	.word	0x41d00000
 80067a8:	42500000 	.word	0x42500000
 80067ac:	42d00000 	.word	0x42d00000
 80067b0:	43500000 	.word	0x43500000
 80067b4:	43d08000 	.word	0x43d08000
 80067b8:	44504000 	.word	0x44504000
 80067bc:	44d06000 	.word	0x44d06000
 80067c0:	45505000 	.word	0x45505000
 80067c4:	45d05800 	.word	0x45d05800

080067c8 <LSM6DSO_GYRO_SetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_GYRO_SetOutputDataRate(LSM6DSO_Object_t *pObj, float_t Odr)
{
 80067c8:	b580      	push	{r7, lr}
 80067ca:	b082      	sub	sp, #8
 80067cc:	af00      	add	r7, sp, #0
 80067ce:	6078      	str	r0, [r7, #4]
 80067d0:	ed87 0a00 	vstr	s0, [r7]
  return LSM6DSO_GYRO_SetOutputDataRate_With_Mode(pObj, Odr, LSM6DSO_GYRO_HIGH_PERFORMANCE_MODE);
 80067d4:	2100      	movs	r1, #0
 80067d6:	ed97 0a00 	vldr	s0, [r7]
 80067da:	6878      	ldr	r0, [r7, #4]
 80067dc:	f000 f806 	bl	80067ec <LSM6DSO_GYRO_SetOutputDataRate_With_Mode>
 80067e0:	4603      	mov	r3, r0
}
 80067e2:	4618      	mov	r0, r3
 80067e4:	3708      	adds	r7, #8
 80067e6:	46bd      	mov	sp, r7
 80067e8:	bd80      	pop	{r7, pc}
	...

080067ec <LSM6DSO_GYRO_SetOutputDataRate_With_Mode>:
  * @param  Mode the gyroscope operating mode
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_GYRO_SetOutputDataRate_With_Mode(LSM6DSO_Object_t *pObj, float_t Odr,
                                                 LSM6DSO_GYRO_Operating_Mode_t Mode)
{
 80067ec:	b580      	push	{r7, lr}
 80067ee:	b088      	sub	sp, #32
 80067f0:	af00      	add	r7, sp, #0
 80067f2:	60f8      	str	r0, [r7, #12]
 80067f4:	ed87 0a02 	vstr	s0, [r7, #8]
 80067f8:	460b      	mov	r3, r1
 80067fa:	71fb      	strb	r3, [r7, #7]
  int32_t ret = LSM6DSO_OK;
 80067fc:	2300      	movs	r3, #0
 80067fe:	61fb      	str	r3, [r7, #28]
  float_t newOdr = Odr;
 8006800:	68bb      	ldr	r3, [r7, #8]
 8006802:	61bb      	str	r3, [r7, #24]

  switch (Mode)
 8006804:	79fb      	ldrb	r3, [r7, #7]
 8006806:	2b00      	cmp	r3, #0
 8006808:	d002      	beq.n	8006810 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x24>
 800680a:	2b01      	cmp	r3, #1
 800680c:	d028      	beq.n	8006860 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x74>
 800680e:	e05c      	b.n	80068ca <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0xde>
    case LSM6DSO_GYRO_HIGH_PERFORMANCE_MODE:
    {
      /* We must uncheck Low Power bit if it is enabled */
      lsm6dso_ctrl7_g_t val1;

      if (lsm6dso_read_reg(&(pObj->Ctx), LSM6DSO_CTRL7_G, (uint8_t *)&val1, 1) != LSM6DSO_OK)
 8006810:	68fb      	ldr	r3, [r7, #12]
 8006812:	f103 0020 	add.w	r0, r3, #32
 8006816:	f107 0214 	add.w	r2, r7, #20
 800681a:	2301      	movs	r3, #1
 800681c:	2116      	movs	r1, #22
 800681e:	f000 fbf3 	bl	8007008 <lsm6dso_read_reg>
 8006822:	4603      	mov	r3, r0
 8006824:	2b00      	cmp	r3, #0
 8006826:	d002      	beq.n	800682e <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x42>
      {
        return LSM6DSO_ERROR;
 8006828:	f04f 33ff 	mov.w	r3, #4294967295
 800682c:	e06c      	b.n	8006908 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x11c>
      }

      if (val1.g_hm_mode != 0U)
 800682e:	7d3b      	ldrb	r3, [r7, #20]
 8006830:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8006834:	b2db      	uxtb	r3, r3
 8006836:	2b00      	cmp	r3, #0
 8006838:	d04b      	beq.n	80068d2 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0xe6>
      {
        val1.g_hm_mode = 0U;
 800683a:	7d3b      	ldrb	r3, [r7, #20]
 800683c:	f36f 13c7 	bfc	r3, #7, #1
 8006840:	753b      	strb	r3, [r7, #20]
        if (lsm6dso_write_reg(&(pObj->Ctx), LSM6DSO_CTRL7_G, (uint8_t *)&val1, 1) != LSM6DSO_OK)
 8006842:	68fb      	ldr	r3, [r7, #12]
 8006844:	f103 0020 	add.w	r0, r3, #32
 8006848:	f107 0214 	add.w	r2, r7, #20
 800684c:	2301      	movs	r3, #1
 800684e:	2116      	movs	r1, #22
 8006850:	f000 fbf2 	bl	8007038 <lsm6dso_write_reg>
 8006854:	4603      	mov	r3, r0
 8006856:	2b00      	cmp	r3, #0
 8006858:	d03b      	beq.n	80068d2 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0xe6>
        {
          return LSM6DSO_ERROR;
 800685a:	f04f 33ff 	mov.w	r3, #4294967295
 800685e:	e053      	b.n	8006908 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x11c>
    case LSM6DSO_GYRO_LOW_POWER_NORMAL_MODE:
    {
      /* We must check the Low Power bit if it is unchecked */
      lsm6dso_ctrl7_g_t val1;

      if (lsm6dso_read_reg(&(pObj->Ctx), LSM6DSO_CTRL7_G, (uint8_t *)&val1, 1) != LSM6DSO_OK)
 8006860:	68fb      	ldr	r3, [r7, #12]
 8006862:	f103 0020 	add.w	r0, r3, #32
 8006866:	f107 0210 	add.w	r2, r7, #16
 800686a:	2301      	movs	r3, #1
 800686c:	2116      	movs	r1, #22
 800686e:	f000 fbcb 	bl	8007008 <lsm6dso_read_reg>
 8006872:	4603      	mov	r3, r0
 8006874:	2b00      	cmp	r3, #0
 8006876:	d002      	beq.n	800687e <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x92>
      {
        return LSM6DSO_ERROR;
 8006878:	f04f 33ff 	mov.w	r3, #4294967295
 800687c:	e044      	b.n	8006908 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x11c>
      }

      if (val1.g_hm_mode == 0U)
 800687e:	7c3b      	ldrb	r3, [r7, #16]
 8006880:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8006884:	b2db      	uxtb	r3, r3
 8006886:	2b00      	cmp	r3, #0
 8006888:	d112      	bne.n	80068b0 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0xc4>
      {
        val1.g_hm_mode = 1U;
 800688a:	7c3b      	ldrb	r3, [r7, #16]
 800688c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006890:	743b      	strb	r3, [r7, #16]
        if (lsm6dso_write_reg(&(pObj->Ctx), LSM6DSO_CTRL7_G, (uint8_t *)&val1, 1) != LSM6DSO_OK)
 8006892:	68fb      	ldr	r3, [r7, #12]
 8006894:	f103 0020 	add.w	r0, r3, #32
 8006898:	f107 0210 	add.w	r2, r7, #16
 800689c:	2301      	movs	r3, #1
 800689e:	2116      	movs	r1, #22
 80068a0:	f000 fbca 	bl	8007038 <lsm6dso_write_reg>
 80068a4:	4603      	mov	r3, r0
 80068a6:	2b00      	cmp	r3, #0
 80068a8:	d002      	beq.n	80068b0 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0xc4>
        {
          return LSM6DSO_ERROR;
 80068aa:	f04f 33ff 	mov.w	r3, #4294967295
 80068ae:	e02b      	b.n	8006908 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x11c>
        }
      }

      /* Now we need to limit the ODR to 208 Hz if it is higher */
      if (newOdr > 208.0f)
 80068b0:	edd7 7a06 	vldr	s15, [r7, #24]
 80068b4:	ed9f 7a16 	vldr	s14, [pc, #88]	; 8006910 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x124>
 80068b8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80068bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80068c0:	dc00      	bgt.n	80068c4 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0xd8>
      {
        newOdr = 208.0f;
      }
      break;
 80068c2:	e007      	b.n	80068d4 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0xe8>
        newOdr = 208.0f;
 80068c4:	4b13      	ldr	r3, [pc, #76]	; (8006914 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x128>)
 80068c6:	61bb      	str	r3, [r7, #24]
 80068c8:	e004      	b.n	80068d4 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0xe8>
    }
    default:
      ret = LSM6DSO_ERROR;
 80068ca:	f04f 33ff 	mov.w	r3, #4294967295
 80068ce:	61fb      	str	r3, [r7, #28]
      break;
 80068d0:	e000      	b.n	80068d4 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0xe8>
      break;
 80068d2:	bf00      	nop
  }

  if (ret == LSM6DSO_ERROR)
 80068d4:	69fb      	ldr	r3, [r7, #28]
 80068d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80068da:	d102      	bne.n	80068e2 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0xf6>
  {
    return LSM6DSO_ERROR;
 80068dc:	f04f 33ff 	mov.w	r3, #4294967295
 80068e0:	e012      	b.n	8006908 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x11c>
  }

  if (pObj->gyro_is_enabled == 1U)
 80068e2:	68fb      	ldr	r3, [r7, #12]
 80068e4:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 80068e8:	2b01      	cmp	r3, #1
 80068ea:	d106      	bne.n	80068fa <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x10e>
  {
    ret = LSM6DSO_GYRO_SetOutputDataRate_When_Enabled(pObj, newOdr);
 80068ec:	ed97 0a06 	vldr	s0, [r7, #24]
 80068f0:	68f8      	ldr	r0, [r7, #12]
 80068f2:	f000 fa45 	bl	8006d80 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled>
 80068f6:	61f8      	str	r0, [r7, #28]
 80068f8:	e005      	b.n	8006906 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x11a>
  }
  else
  {
    ret = LSM6DSO_GYRO_SetOutputDataRate_When_Disabled(pObj, newOdr);
 80068fa:	ed97 0a06 	vldr	s0, [r7, #24]
 80068fe:	68f8      	ldr	r0, [r7, #12]
 8006900:	f000 faca 	bl	8006e98 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled>
 8006904:	61f8      	str	r0, [r7, #28]
  }

  return ret;
 8006906:	69fb      	ldr	r3, [r7, #28]
}
 8006908:	4618      	mov	r0, r3
 800690a:	3720      	adds	r7, #32
 800690c:	46bd      	mov	sp, r7
 800690e:	bd80      	pop	{r7, pc}
 8006910:	43500000 	.word	0x43500000
 8006914:	43500000 	.word	0x43500000

08006918 <LSM6DSO_GYRO_GetFullScale>:
  * @param  pObj the device pObj
  * @param  FullScale pointer where the full scale is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_GYRO_GetFullScale(LSM6DSO_Object_t *pObj, int32_t  *FullScale)
{
 8006918:	b580      	push	{r7, lr}
 800691a:	b084      	sub	sp, #16
 800691c:	af00      	add	r7, sp, #0
 800691e:	6078      	str	r0, [r7, #4]
 8006920:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSO_OK;
 8006922:	2300      	movs	r3, #0
 8006924:	60fb      	str	r3, [r7, #12]
  lsm6dso_fs_g_t fs_low_level;

  /* Read actual full scale selection from sensor. */
  if (lsm6dso_gy_full_scale_get(&(pObj->Ctx), &fs_low_level) != LSM6DSO_OK)
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	3320      	adds	r3, #32
 800692a:	f107 020b 	add.w	r2, r7, #11
 800692e:	4611      	mov	r1, r2
 8006930:	4618      	mov	r0, r3
 8006932:	f000 fd81 	bl	8007438 <lsm6dso_gy_full_scale_get>
 8006936:	4603      	mov	r3, r0
 8006938:	2b00      	cmp	r3, #0
 800693a:	d002      	beq.n	8006942 <LSM6DSO_GYRO_GetFullScale+0x2a>
  {
    return LSM6DSO_ERROR;
 800693c:	f04f 33ff 	mov.w	r3, #4294967295
 8006940:	e030      	b.n	80069a4 <LSM6DSO_GYRO_GetFullScale+0x8c>
  }

  switch (fs_low_level)
 8006942:	7afb      	ldrb	r3, [r7, #11]
 8006944:	2b06      	cmp	r3, #6
 8006946:	d828      	bhi.n	800699a <LSM6DSO_GYRO_GetFullScale+0x82>
 8006948:	a201      	add	r2, pc, #4	; (adr r2, 8006950 <LSM6DSO_GYRO_GetFullScale+0x38>)
 800694a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800694e:	bf00      	nop
 8006950:	08006975 	.word	0x08006975
 8006954:	0800696d 	.word	0x0800696d
 8006958:	0800697d 	.word	0x0800697d
 800695c:	0800699b 	.word	0x0800699b
 8006960:	08006987 	.word	0x08006987
 8006964:	0800699b 	.word	0x0800699b
 8006968:	08006991 	.word	0x08006991
  {
    case LSM6DSO_125dps:
      *FullScale =  125;
 800696c:	683b      	ldr	r3, [r7, #0]
 800696e:	227d      	movs	r2, #125	; 0x7d
 8006970:	601a      	str	r2, [r3, #0]
      break;
 8006972:	e016      	b.n	80069a2 <LSM6DSO_GYRO_GetFullScale+0x8a>

    case LSM6DSO_250dps:
      *FullScale =  250;
 8006974:	683b      	ldr	r3, [r7, #0]
 8006976:	22fa      	movs	r2, #250	; 0xfa
 8006978:	601a      	str	r2, [r3, #0]
      break;
 800697a:	e012      	b.n	80069a2 <LSM6DSO_GYRO_GetFullScale+0x8a>

    case LSM6DSO_500dps:
      *FullScale =  500;
 800697c:	683b      	ldr	r3, [r7, #0]
 800697e:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8006982:	601a      	str	r2, [r3, #0]
      break;
 8006984:	e00d      	b.n	80069a2 <LSM6DSO_GYRO_GetFullScale+0x8a>

    case LSM6DSO_1000dps:
      *FullScale = 1000;
 8006986:	683b      	ldr	r3, [r7, #0]
 8006988:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800698c:	601a      	str	r2, [r3, #0]
      break;
 800698e:	e008      	b.n	80069a2 <LSM6DSO_GYRO_GetFullScale+0x8a>

    case LSM6DSO_2000dps:
      *FullScale = 2000;
 8006990:	683b      	ldr	r3, [r7, #0]
 8006992:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8006996:	601a      	str	r2, [r3, #0]
      break;
 8006998:	e003      	b.n	80069a2 <LSM6DSO_GYRO_GetFullScale+0x8a>

    default:
      ret = LSM6DSO_ERROR;
 800699a:	f04f 33ff 	mov.w	r3, #4294967295
 800699e:	60fb      	str	r3, [r7, #12]
      break;
 80069a0:	bf00      	nop
  }

  return ret;
 80069a2:	68fb      	ldr	r3, [r7, #12]
}
 80069a4:	4618      	mov	r0, r3
 80069a6:	3710      	adds	r7, #16
 80069a8:	46bd      	mov	sp, r7
 80069aa:	bd80      	pop	{r7, pc}

080069ac <LSM6DSO_GYRO_SetFullScale>:
  * @param  pObj the device pObj
  * @param  FullScale the functional full scale to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_GYRO_SetFullScale(LSM6DSO_Object_t *pObj, int32_t FullScale)
{
 80069ac:	b580      	push	{r7, lr}
 80069ae:	b084      	sub	sp, #16
 80069b0:	af00      	add	r7, sp, #0
 80069b2:	6078      	str	r0, [r7, #4]
 80069b4:	6039      	str	r1, [r7, #0]
  lsm6dso_fs_g_t new_fs;

  new_fs = (FullScale <= 125)  ? LSM6DSO_125dps
           : (FullScale <= 250)  ? LSM6DSO_250dps
 80069b6:	683b      	ldr	r3, [r7, #0]
 80069b8:	2b7d      	cmp	r3, #125	; 0x7d
 80069ba:	dd12      	ble.n	80069e2 <LSM6DSO_GYRO_SetFullScale+0x36>
 80069bc:	683b      	ldr	r3, [r7, #0]
 80069be:	2bfa      	cmp	r3, #250	; 0xfa
 80069c0:	dd0d      	ble.n	80069de <LSM6DSO_GYRO_SetFullScale+0x32>
 80069c2:	683b      	ldr	r3, [r7, #0]
 80069c4:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80069c8:	dd07      	ble.n	80069da <LSM6DSO_GYRO_SetFullScale+0x2e>
 80069ca:	683b      	ldr	r3, [r7, #0]
 80069cc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80069d0:	dc01      	bgt.n	80069d6 <LSM6DSO_GYRO_SetFullScale+0x2a>
 80069d2:	2304      	movs	r3, #4
 80069d4:	e006      	b.n	80069e4 <LSM6DSO_GYRO_SetFullScale+0x38>
 80069d6:	2306      	movs	r3, #6
 80069d8:	e004      	b.n	80069e4 <LSM6DSO_GYRO_SetFullScale+0x38>
 80069da:	2302      	movs	r3, #2
 80069dc:	e002      	b.n	80069e4 <LSM6DSO_GYRO_SetFullScale+0x38>
 80069de:	2300      	movs	r3, #0
 80069e0:	e000      	b.n	80069e4 <LSM6DSO_GYRO_SetFullScale+0x38>
 80069e2:	2301      	movs	r3, #1
  new_fs = (FullScale <= 125)  ? LSM6DSO_125dps
 80069e4:	73fb      	strb	r3, [r7, #15]
           : (FullScale <= 500)  ? LSM6DSO_500dps
           : (FullScale <= 1000) ? LSM6DSO_1000dps
           :                       LSM6DSO_2000dps;

  if (lsm6dso_gy_full_scale_set(&(pObj->Ctx), new_fs) != LSM6DSO_OK)
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	3320      	adds	r3, #32
 80069ea:	7bfa      	ldrb	r2, [r7, #15]
 80069ec:	4611      	mov	r1, r2
 80069ee:	4618      	mov	r0, r3
 80069f0:	f000 fcfc 	bl	80073ec <lsm6dso_gy_full_scale_set>
 80069f4:	4603      	mov	r3, r0
 80069f6:	2b00      	cmp	r3, #0
 80069f8:	d002      	beq.n	8006a00 <LSM6DSO_GYRO_SetFullScale+0x54>
  {
    return LSM6DSO_ERROR;
 80069fa:	f04f 33ff 	mov.w	r3, #4294967295
 80069fe:	e000      	b.n	8006a02 <LSM6DSO_GYRO_SetFullScale+0x56>
  }

  return LSM6DSO_OK;
 8006a00:	2300      	movs	r3, #0
}
 8006a02:	4618      	mov	r0, r3
 8006a04:	3710      	adds	r7, #16
 8006a06:	46bd      	mov	sp, r7
 8006a08:	bd80      	pop	{r7, pc}

08006a0a <LSM6DSO_GYRO_GetAxesRaw>:
  * @param  pObj the device pObj
  * @param  Value pointer where the raw values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_GYRO_GetAxesRaw(LSM6DSO_Object_t *pObj, LSM6DSO_AxesRaw_t *Value)
{
 8006a0a:	b580      	push	{r7, lr}
 8006a0c:	b084      	sub	sp, #16
 8006a0e:	af00      	add	r7, sp, #0
 8006a10:	6078      	str	r0, [r7, #4]
 8006a12:	6039      	str	r1, [r7, #0]
  lsm6dso_axis3bit16_t data_raw;

  /* Read raw data values. */
  if (lsm6dso_angular_rate_raw_get(&(pObj->Ctx), data_raw.i16bit) != LSM6DSO_OK)
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	3320      	adds	r3, #32
 8006a18:	f107 0208 	add.w	r2, r7, #8
 8006a1c:	4611      	mov	r1, r2
 8006a1e:	4618      	mov	r0, r3
 8006a20:	f000 fed0 	bl	80077c4 <lsm6dso_angular_rate_raw_get>
 8006a24:	4603      	mov	r3, r0
 8006a26:	2b00      	cmp	r3, #0
 8006a28:	d002      	beq.n	8006a30 <LSM6DSO_GYRO_GetAxesRaw+0x26>
  {
    return LSM6DSO_ERROR;
 8006a2a:	f04f 33ff 	mov.w	r3, #4294967295
 8006a2e:	e00c      	b.n	8006a4a <LSM6DSO_GYRO_GetAxesRaw+0x40>
  }

  /* Format the data. */
  Value->x = data_raw.i16bit[0];
 8006a30:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8006a34:	683b      	ldr	r3, [r7, #0]
 8006a36:	801a      	strh	r2, [r3, #0]
  Value->y = data_raw.i16bit[1];
 8006a38:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8006a3c:	683b      	ldr	r3, [r7, #0]
 8006a3e:	805a      	strh	r2, [r3, #2]
  Value->z = data_raw.i16bit[2];
 8006a40:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8006a44:	683b      	ldr	r3, [r7, #0]
 8006a46:	809a      	strh	r2, [r3, #4]

  return LSM6DSO_OK;
 8006a48:	2300      	movs	r3, #0
}
 8006a4a:	4618      	mov	r0, r3
 8006a4c:	3710      	adds	r7, #16
 8006a4e:	46bd      	mov	sp, r7
 8006a50:	bd80      	pop	{r7, pc}

08006a52 <LSM6DSO_GYRO_GetAxes>:
  * @param  pObj the device pObj
  * @param  AngularRate pointer where the values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_GYRO_GetAxes(LSM6DSO_Object_t *pObj, LSM6DSO_Axes_t *AngularRate)
{
 8006a52:	b580      	push	{r7, lr}
 8006a54:	b086      	sub	sp, #24
 8006a56:	af00      	add	r7, sp, #0
 8006a58:	6078      	str	r0, [r7, #4]
 8006a5a:	6039      	str	r1, [r7, #0]
  lsm6dso_axis3bit16_t data_raw;
  float_t sensitivity;

  /* Read raw data values. */
  if (lsm6dso_angular_rate_raw_get(&(pObj->Ctx), data_raw.i16bit) != LSM6DSO_OK)
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	3320      	adds	r3, #32
 8006a60:	f107 0210 	add.w	r2, r7, #16
 8006a64:	4611      	mov	r1, r2
 8006a66:	4618      	mov	r0, r3
 8006a68:	f000 feac 	bl	80077c4 <lsm6dso_angular_rate_raw_get>
 8006a6c:	4603      	mov	r3, r0
 8006a6e:	2b00      	cmp	r3, #0
 8006a70:	d002      	beq.n	8006a78 <LSM6DSO_GYRO_GetAxes+0x26>
  {
    return LSM6DSO_ERROR;
 8006a72:	f04f 33ff 	mov.w	r3, #4294967295
 8006a76:	e03c      	b.n	8006af2 <LSM6DSO_GYRO_GetAxes+0xa0>
  }

  /* Get LSM6DSO actual sensitivity. */
  if (LSM6DSO_GYRO_GetSensitivity(pObj, &sensitivity) != LSM6DSO_OK)
 8006a78:	f107 030c 	add.w	r3, r7, #12
 8006a7c:	4619      	mov	r1, r3
 8006a7e:	6878      	ldr	r0, [r7, #4]
 8006a80:	f7ff fdd4 	bl	800662c <LSM6DSO_GYRO_GetSensitivity>
 8006a84:	4603      	mov	r3, r0
 8006a86:	2b00      	cmp	r3, #0
 8006a88:	d002      	beq.n	8006a90 <LSM6DSO_GYRO_GetAxes+0x3e>
  {
    return LSM6DSO_ERROR;
 8006a8a:	f04f 33ff 	mov.w	r3, #4294967295
 8006a8e:	e030      	b.n	8006af2 <LSM6DSO_GYRO_GetAxes+0xa0>
  }

  /* Calculate the data. */
  AngularRate->x = (int32_t)((float_t)((float_t)data_raw.i16bit[0] * sensitivity));
 8006a90:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8006a94:	ee07 3a90 	vmov	s15, r3
 8006a98:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006a9c:	edd7 7a03 	vldr	s15, [r7, #12]
 8006aa0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006aa4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006aa8:	ee17 2a90 	vmov	r2, s15
 8006aac:	683b      	ldr	r3, [r7, #0]
 8006aae:	601a      	str	r2, [r3, #0]
  AngularRate->y = (int32_t)((float_t)((float_t)data_raw.i16bit[1] * sensitivity));
 8006ab0:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8006ab4:	ee07 3a90 	vmov	s15, r3
 8006ab8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006abc:	edd7 7a03 	vldr	s15, [r7, #12]
 8006ac0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006ac4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006ac8:	ee17 2a90 	vmov	r2, s15
 8006acc:	683b      	ldr	r3, [r7, #0]
 8006ace:	605a      	str	r2, [r3, #4]
  AngularRate->z = (int32_t)((float_t)((float_t)data_raw.i16bit[2] * sensitivity));
 8006ad0:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8006ad4:	ee07 3a90 	vmov	s15, r3
 8006ad8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006adc:	edd7 7a03 	vldr	s15, [r7, #12]
 8006ae0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006ae4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006ae8:	ee17 2a90 	vmov	r2, s15
 8006aec:	683b      	ldr	r3, [r7, #0]
 8006aee:	609a      	str	r2, [r3, #8]

  return LSM6DSO_OK;
 8006af0:	2300      	movs	r3, #0
}
 8006af2:	4618      	mov	r0, r3
 8006af4:	3718      	adds	r7, #24
 8006af6:	46bd      	mov	sp, r7
 8006af8:	bd80      	pop	{r7, pc}

08006afa <LSM6DSO_Write_Reg>:
  * @param  Reg address to be written
  * @param  Data value to be written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_Write_Reg(LSM6DSO_Object_t *pObj, uint8_t Reg, uint8_t Data)
{
 8006afa:	b580      	push	{r7, lr}
 8006afc:	b082      	sub	sp, #8
 8006afe:	af00      	add	r7, sp, #0
 8006b00:	6078      	str	r0, [r7, #4]
 8006b02:	460b      	mov	r3, r1
 8006b04:	70fb      	strb	r3, [r7, #3]
 8006b06:	4613      	mov	r3, r2
 8006b08:	70bb      	strb	r3, [r7, #2]
  if (lsm6dso_write_reg(&(pObj->Ctx), Reg, &Data, 1) != LSM6DSO_OK)
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	f103 0020 	add.w	r0, r3, #32
 8006b10:	1cba      	adds	r2, r7, #2
 8006b12:	78f9      	ldrb	r1, [r7, #3]
 8006b14:	2301      	movs	r3, #1
 8006b16:	f000 fa8f 	bl	8007038 <lsm6dso_write_reg>
 8006b1a:	4603      	mov	r3, r0
 8006b1c:	2b00      	cmp	r3, #0
 8006b1e:	d002      	beq.n	8006b26 <LSM6DSO_Write_Reg+0x2c>
  {
    return LSM6DSO_ERROR;
 8006b20:	f04f 33ff 	mov.w	r3, #4294967295
 8006b24:	e000      	b.n	8006b28 <LSM6DSO_Write_Reg+0x2e>
  }

  return LSM6DSO_OK;
 8006b26:	2300      	movs	r3, #0
}
 8006b28:	4618      	mov	r0, r3
 8006b2a:	3708      	adds	r7, #8
 8006b2c:	46bd      	mov	sp, r7
 8006b2e:	bd80      	pop	{r7, pc}

08006b30 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled>:
  * @param  pObj the device pObj
  * @param  Odr the functional output data rate to be set
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LSM6DSO_ACC_SetOutputDataRate_When_Enabled(LSM6DSO_Object_t *pObj, float_t Odr)
{
 8006b30:	b580      	push	{r7, lr}
 8006b32:	b084      	sub	sp, #16
 8006b34:	af00      	add	r7, sp, #0
 8006b36:	6078      	str	r0, [r7, #4]
 8006b38:	ed87 0a00 	vstr	s0, [r7]
  lsm6dso_odr_xl_t new_odr;

  new_odr = (Odr <=    1.6f) ? LSM6DSO_XL_ODR_1Hz6
            : (Odr <=   12.5f) ? LSM6DSO_XL_ODR_12Hz5
 8006b3c:	edd7 7a00 	vldr	s15, [r7]
 8006b40:	ed9f 7a3f 	vldr	s14, [pc, #252]	; 8006c40 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x110>
 8006b44:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006b48:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006b4c:	d801      	bhi.n	8006b52 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x22>
 8006b4e:	230b      	movs	r3, #11
 8006b50:	e063      	b.n	8006c1a <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xea>
 8006b52:	edd7 7a00 	vldr	s15, [r7]
 8006b56:	eeb2 7a09 	vmov.f32	s14, #41	; 0x41480000  12.5
 8006b5a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006b5e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006b62:	d801      	bhi.n	8006b68 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x38>
 8006b64:	2301      	movs	r3, #1
 8006b66:	e058      	b.n	8006c1a <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xea>
 8006b68:	edd7 7a00 	vldr	s15, [r7]
 8006b6c:	eeb3 7a0a 	vmov.f32	s14, #58	; 0x41d00000  26.0
 8006b70:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006b74:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006b78:	d801      	bhi.n	8006b7e <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x4e>
 8006b7a:	2302      	movs	r3, #2
 8006b7c:	e04d      	b.n	8006c1a <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xea>
 8006b7e:	edd7 7a00 	vldr	s15, [r7]
 8006b82:	ed9f 7a30 	vldr	s14, [pc, #192]	; 8006c44 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x114>
 8006b86:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006b8a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006b8e:	d801      	bhi.n	8006b94 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x64>
 8006b90:	2303      	movs	r3, #3
 8006b92:	e042      	b.n	8006c1a <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xea>
 8006b94:	edd7 7a00 	vldr	s15, [r7]
 8006b98:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 8006c48 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x118>
 8006b9c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006ba0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006ba4:	d801      	bhi.n	8006baa <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x7a>
 8006ba6:	2304      	movs	r3, #4
 8006ba8:	e037      	b.n	8006c1a <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xea>
 8006baa:	edd7 7a00 	vldr	s15, [r7]
 8006bae:	ed9f 7a27 	vldr	s14, [pc, #156]	; 8006c4c <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x11c>
 8006bb2:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006bb6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006bba:	d801      	bhi.n	8006bc0 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x90>
 8006bbc:	2305      	movs	r3, #5
 8006bbe:	e02c      	b.n	8006c1a <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xea>
 8006bc0:	edd7 7a00 	vldr	s15, [r7]
 8006bc4:	ed9f 7a22 	vldr	s14, [pc, #136]	; 8006c50 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x120>
 8006bc8:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006bcc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006bd0:	d801      	bhi.n	8006bd6 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xa6>
 8006bd2:	2306      	movs	r3, #6
 8006bd4:	e021      	b.n	8006c1a <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xea>
 8006bd6:	edd7 7a00 	vldr	s15, [r7]
 8006bda:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 8006c54 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x124>
 8006bde:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006be2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006be6:	d801      	bhi.n	8006bec <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xbc>
 8006be8:	2307      	movs	r3, #7
 8006bea:	e016      	b.n	8006c1a <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xea>
 8006bec:	edd7 7a00 	vldr	s15, [r7]
 8006bf0:	ed9f 7a19 	vldr	s14, [pc, #100]	; 8006c58 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x128>
 8006bf4:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006bf8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006bfc:	d801      	bhi.n	8006c02 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xd2>
 8006bfe:	2308      	movs	r3, #8
 8006c00:	e00b      	b.n	8006c1a <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xea>
 8006c02:	edd7 7a00 	vldr	s15, [r7]
 8006c06:	ed9f 7a15 	vldr	s14, [pc, #84]	; 8006c5c <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x12c>
 8006c0a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006c0e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006c12:	d801      	bhi.n	8006c18 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xe8>
 8006c14:	2309      	movs	r3, #9
 8006c16:	e000      	b.n	8006c1a <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xea>
 8006c18:	230a      	movs	r3, #10
  new_odr = (Odr <=    1.6f) ? LSM6DSO_XL_ODR_1Hz6
 8006c1a:	73fb      	strb	r3, [r7, #15]
            : (Odr <= 1667.0f) ? LSM6DSO_XL_ODR_1667Hz
            : (Odr <= 3333.0f) ? LSM6DSO_XL_ODR_3333Hz
            :                    LSM6DSO_XL_ODR_6667Hz;

  /* Output data rate selection. */
  if (lsm6dso_xl_data_rate_set(&(pObj->Ctx), new_odr) != LSM6DSO_OK)
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	3320      	adds	r3, #32
 8006c20:	7bfa      	ldrb	r2, [r7, #15]
 8006c22:	4611      	mov	r1, r2
 8006c24:	4618      	mov	r0, r3
 8006c26:	f000 fa7d 	bl	8007124 <lsm6dso_xl_data_rate_set>
 8006c2a:	4603      	mov	r3, r0
 8006c2c:	2b00      	cmp	r3, #0
 8006c2e:	d002      	beq.n	8006c36 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x106>
  {
    return LSM6DSO_ERROR;
 8006c30:	f04f 33ff 	mov.w	r3, #4294967295
 8006c34:	e000      	b.n	8006c38 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x108>
  }

  return LSM6DSO_OK;
 8006c36:	2300      	movs	r3, #0
}
 8006c38:	4618      	mov	r0, r3
 8006c3a:	3710      	adds	r7, #16
 8006c3c:	46bd      	mov	sp, r7
 8006c3e:	bd80      	pop	{r7, pc}
 8006c40:	3fcccccd 	.word	0x3fcccccd
 8006c44:	42500000 	.word	0x42500000
 8006c48:	42d00000 	.word	0x42d00000
 8006c4c:	43500000 	.word	0x43500000
 8006c50:	43d08000 	.word	0x43d08000
 8006c54:	44504000 	.word	0x44504000
 8006c58:	44d06000 	.word	0x44d06000
 8006c5c:	45505000 	.word	0x45505000

08006c60 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled>:
  * @param  pObj the device pObj
  * @param  Odr the functional output data rate to be set
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LSM6DSO_ACC_SetOutputDataRate_When_Disabled(LSM6DSO_Object_t *pObj, float_t Odr)
{
 8006c60:	b480      	push	{r7}
 8006c62:	b083      	sub	sp, #12
 8006c64:	af00      	add	r7, sp, #0
 8006c66:	6078      	str	r0, [r7, #4]
 8006c68:	ed87 0a00 	vstr	s0, [r7]
  pObj->acc_odr = (Odr <=    1.6f) ? LSM6DSO_XL_ODR_1Hz6
                  : (Odr <=   12.5f) ? LSM6DSO_XL_ODR_12Hz5
 8006c6c:	edd7 7a00 	vldr	s15, [r7]
 8006c70:	ed9f 7a3b 	vldr	s14, [pc, #236]	; 8006d60 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x100>
 8006c74:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006c78:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006c7c:	d801      	bhi.n	8006c82 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x22>
 8006c7e:	230b      	movs	r3, #11
 8006c80:	e063      	b.n	8006d4a <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xea>
 8006c82:	edd7 7a00 	vldr	s15, [r7]
 8006c86:	eeb2 7a09 	vmov.f32	s14, #41	; 0x41480000  12.5
 8006c8a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006c8e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006c92:	d801      	bhi.n	8006c98 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x38>
 8006c94:	2301      	movs	r3, #1
 8006c96:	e058      	b.n	8006d4a <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xea>
 8006c98:	edd7 7a00 	vldr	s15, [r7]
 8006c9c:	eeb3 7a0a 	vmov.f32	s14, #58	; 0x41d00000  26.0
 8006ca0:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006ca4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006ca8:	d801      	bhi.n	8006cae <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x4e>
 8006caa:	2302      	movs	r3, #2
 8006cac:	e04d      	b.n	8006d4a <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xea>
 8006cae:	edd7 7a00 	vldr	s15, [r7]
 8006cb2:	ed9f 7a2c 	vldr	s14, [pc, #176]	; 8006d64 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x104>
 8006cb6:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006cba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006cbe:	d801      	bhi.n	8006cc4 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x64>
 8006cc0:	2303      	movs	r3, #3
 8006cc2:	e042      	b.n	8006d4a <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xea>
 8006cc4:	edd7 7a00 	vldr	s15, [r7]
 8006cc8:	ed9f 7a27 	vldr	s14, [pc, #156]	; 8006d68 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x108>
 8006ccc:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006cd0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006cd4:	d801      	bhi.n	8006cda <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x7a>
 8006cd6:	2304      	movs	r3, #4
 8006cd8:	e037      	b.n	8006d4a <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xea>
 8006cda:	edd7 7a00 	vldr	s15, [r7]
 8006cde:	ed9f 7a23 	vldr	s14, [pc, #140]	; 8006d6c <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x10c>
 8006ce2:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006ce6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006cea:	d801      	bhi.n	8006cf0 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x90>
 8006cec:	2305      	movs	r3, #5
 8006cee:	e02c      	b.n	8006d4a <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xea>
 8006cf0:	edd7 7a00 	vldr	s15, [r7]
 8006cf4:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 8006d70 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x110>
 8006cf8:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006cfc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006d00:	d801      	bhi.n	8006d06 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xa6>
 8006d02:	2306      	movs	r3, #6
 8006d04:	e021      	b.n	8006d4a <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xea>
 8006d06:	edd7 7a00 	vldr	s15, [r7]
 8006d0a:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 8006d74 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x114>
 8006d0e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006d12:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006d16:	d801      	bhi.n	8006d1c <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xbc>
 8006d18:	2307      	movs	r3, #7
 8006d1a:	e016      	b.n	8006d4a <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xea>
 8006d1c:	edd7 7a00 	vldr	s15, [r7]
 8006d20:	ed9f 7a15 	vldr	s14, [pc, #84]	; 8006d78 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x118>
 8006d24:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006d28:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006d2c:	d801      	bhi.n	8006d32 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xd2>
 8006d2e:	2308      	movs	r3, #8
 8006d30:	e00b      	b.n	8006d4a <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xea>
 8006d32:	edd7 7a00 	vldr	s15, [r7]
 8006d36:	ed9f 7a11 	vldr	s14, [pc, #68]	; 8006d7c <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x11c>
 8006d3a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006d3e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006d42:	d801      	bhi.n	8006d48 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xe8>
 8006d44:	2309      	movs	r3, #9
 8006d46:	e000      	b.n	8006d4a <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xea>
 8006d48:	230a      	movs	r3, #10
  pObj->acc_odr = (Odr <=    1.6f) ? LSM6DSO_XL_ODR_1Hz6
 8006d4a:	687a      	ldr	r2, [r7, #4]
 8006d4c:	f882 3033 	strb.w	r3, [r2, #51]	; 0x33
                  : (Odr <=  833.0f) ? LSM6DSO_XL_ODR_833Hz
                  : (Odr <= 1667.0f) ? LSM6DSO_XL_ODR_1667Hz
                  : (Odr <= 3333.0f) ? LSM6DSO_XL_ODR_3333Hz
                  :                    LSM6DSO_XL_ODR_6667Hz;

  return LSM6DSO_OK;
 8006d50:	2300      	movs	r3, #0
}
 8006d52:	4618      	mov	r0, r3
 8006d54:	370c      	adds	r7, #12
 8006d56:	46bd      	mov	sp, r7
 8006d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d5c:	4770      	bx	lr
 8006d5e:	bf00      	nop
 8006d60:	3fcccccd 	.word	0x3fcccccd
 8006d64:	42500000 	.word	0x42500000
 8006d68:	42d00000 	.word	0x42d00000
 8006d6c:	43500000 	.word	0x43500000
 8006d70:	43d08000 	.word	0x43d08000
 8006d74:	44504000 	.word	0x44504000
 8006d78:	44d06000 	.word	0x44d06000
 8006d7c:	45505000 	.word	0x45505000

08006d80 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled>:
  * @param  pObj the device pObj
  * @param  Odr the functional output data rate to be set
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LSM6DSO_GYRO_SetOutputDataRate_When_Enabled(LSM6DSO_Object_t *pObj, float_t Odr)
{
 8006d80:	b580      	push	{r7, lr}
 8006d82:	b084      	sub	sp, #16
 8006d84:	af00      	add	r7, sp, #0
 8006d86:	6078      	str	r0, [r7, #4]
 8006d88:	ed87 0a00 	vstr	s0, [r7]
  lsm6dso_odr_g_t new_odr;

  new_odr = (Odr <=   12.5f) ? LSM6DSO_GY_ODR_12Hz5
            : (Odr <=   26.0f) ? LSM6DSO_GY_ODR_26Hz
 8006d8c:	edd7 7a00 	vldr	s15, [r7]
 8006d90:	eeb2 7a09 	vmov.f32	s14, #41	; 0x41480000  12.5
 8006d94:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006d98:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006d9c:	d801      	bhi.n	8006da2 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x22>
 8006d9e:	2301      	movs	r3, #1
 8006da0:	e058      	b.n	8006e54 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 8006da2:	edd7 7a00 	vldr	s15, [r7]
 8006da6:	eeb3 7a0a 	vmov.f32	s14, #58	; 0x41d00000  26.0
 8006daa:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006dae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006db2:	d801      	bhi.n	8006db8 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x38>
 8006db4:	2302      	movs	r3, #2
 8006db6:	e04d      	b.n	8006e54 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 8006db8:	edd7 7a00 	vldr	s15, [r7]
 8006dbc:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 8006e7c <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xfc>
 8006dc0:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006dc4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006dc8:	d801      	bhi.n	8006dce <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x4e>
 8006dca:	2303      	movs	r3, #3
 8006dcc:	e042      	b.n	8006e54 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 8006dce:	edd7 7a00 	vldr	s15, [r7]
 8006dd2:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 8006e80 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x100>
 8006dd6:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006dda:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006dde:	d801      	bhi.n	8006de4 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x64>
 8006de0:	2304      	movs	r3, #4
 8006de2:	e037      	b.n	8006e54 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 8006de4:	edd7 7a00 	vldr	s15, [r7]
 8006de8:	ed9f 7a26 	vldr	s14, [pc, #152]	; 8006e84 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x104>
 8006dec:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006df0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006df4:	d801      	bhi.n	8006dfa <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x7a>
 8006df6:	2305      	movs	r3, #5
 8006df8:	e02c      	b.n	8006e54 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 8006dfa:	edd7 7a00 	vldr	s15, [r7]
 8006dfe:	ed9f 7a22 	vldr	s14, [pc, #136]	; 8006e88 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x108>
 8006e02:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006e06:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006e0a:	d801      	bhi.n	8006e10 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x90>
 8006e0c:	2306      	movs	r3, #6
 8006e0e:	e021      	b.n	8006e54 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 8006e10:	edd7 7a00 	vldr	s15, [r7]
 8006e14:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 8006e8c <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x10c>
 8006e18:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006e1c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006e20:	d801      	bhi.n	8006e26 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xa6>
 8006e22:	2307      	movs	r3, #7
 8006e24:	e016      	b.n	8006e54 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 8006e26:	edd7 7a00 	vldr	s15, [r7]
 8006e2a:	ed9f 7a19 	vldr	s14, [pc, #100]	; 8006e90 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x110>
 8006e2e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006e32:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006e36:	d801      	bhi.n	8006e3c <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xbc>
 8006e38:	2308      	movs	r3, #8
 8006e3a:	e00b      	b.n	8006e54 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 8006e3c:	edd7 7a00 	vldr	s15, [r7]
 8006e40:	ed9f 7a14 	vldr	s14, [pc, #80]	; 8006e94 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x114>
 8006e44:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006e48:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006e4c:	d801      	bhi.n	8006e52 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xd2>
 8006e4e:	2309      	movs	r3, #9
 8006e50:	e000      	b.n	8006e54 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 8006e52:	230a      	movs	r3, #10
  new_odr = (Odr <=   12.5f) ? LSM6DSO_GY_ODR_12Hz5
 8006e54:	73fb      	strb	r3, [r7, #15]
            : (Odr <= 1667.0f) ? LSM6DSO_GY_ODR_1667Hz
            : (Odr <= 3333.0f) ? LSM6DSO_GY_ODR_3333Hz
            :                    LSM6DSO_GY_ODR_6667Hz;

  /* Output data rate selection. */
  if (lsm6dso_gy_data_rate_set(&(pObj->Ctx), new_odr) != LSM6DSO_OK)
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	3320      	adds	r3, #32
 8006e5a:	7bfa      	ldrb	r2, [r7, #15]
 8006e5c:	4611      	mov	r1, r2
 8006e5e:	4618      	mov	r0, r3
 8006e60:	f000 fb2c 	bl	80074bc <lsm6dso_gy_data_rate_set>
 8006e64:	4603      	mov	r3, r0
 8006e66:	2b00      	cmp	r3, #0
 8006e68:	d002      	beq.n	8006e70 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xf0>
  {
    return LSM6DSO_ERROR;
 8006e6a:	f04f 33ff 	mov.w	r3, #4294967295
 8006e6e:	e000      	b.n	8006e72 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xf2>
  }

  return LSM6DSO_OK;
 8006e70:	2300      	movs	r3, #0
}
 8006e72:	4618      	mov	r0, r3
 8006e74:	3710      	adds	r7, #16
 8006e76:	46bd      	mov	sp, r7
 8006e78:	bd80      	pop	{r7, pc}
 8006e7a:	bf00      	nop
 8006e7c:	42500000 	.word	0x42500000
 8006e80:	42d00000 	.word	0x42d00000
 8006e84:	43500000 	.word	0x43500000
 8006e88:	43d08000 	.word	0x43d08000
 8006e8c:	44504000 	.word	0x44504000
 8006e90:	44d06000 	.word	0x44d06000
 8006e94:	45505000 	.word	0x45505000

08006e98 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled>:
  * @param  pObj the device pObj
  * @param  Odr the functional output data rate to be set
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LSM6DSO_GYRO_SetOutputDataRate_When_Disabled(LSM6DSO_Object_t *pObj, float_t Odr)
{
 8006e98:	b480      	push	{r7}
 8006e9a:	b083      	sub	sp, #12
 8006e9c:	af00      	add	r7, sp, #0
 8006e9e:	6078      	str	r0, [r7, #4]
 8006ea0:	ed87 0a00 	vstr	s0, [r7]
  pObj->gyro_odr = (Odr <=   12.5f) ? LSM6DSO_GY_ODR_12Hz5
                   : (Odr <=   26.0f) ? LSM6DSO_GY_ODR_26Hz
 8006ea4:	edd7 7a00 	vldr	s15, [r7]
 8006ea8:	eeb2 7a09 	vmov.f32	s14, #41	; 0x41480000  12.5
 8006eac:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006eb0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006eb4:	d801      	bhi.n	8006eba <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0x22>
 8006eb6:	2301      	movs	r3, #1
 8006eb8:	e058      	b.n	8006f6c <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 8006eba:	edd7 7a00 	vldr	s15, [r7]
 8006ebe:	eeb3 7a0a 	vmov.f32	s14, #58	; 0x41d00000  26.0
 8006ec2:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006ec6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006eca:	d801      	bhi.n	8006ed0 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0x38>
 8006ecc:	2302      	movs	r3, #2
 8006ece:	e04d      	b.n	8006f6c <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 8006ed0:	edd7 7a00 	vldr	s15, [r7]
 8006ed4:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 8006f80 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xe8>
 8006ed8:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006edc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006ee0:	d801      	bhi.n	8006ee6 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0x4e>
 8006ee2:	2303      	movs	r3, #3
 8006ee4:	e042      	b.n	8006f6c <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 8006ee6:	edd7 7a00 	vldr	s15, [r7]
 8006eea:	ed9f 7a26 	vldr	s14, [pc, #152]	; 8006f84 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xec>
 8006eee:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006ef2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006ef6:	d801      	bhi.n	8006efc <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0x64>
 8006ef8:	2304      	movs	r3, #4
 8006efa:	e037      	b.n	8006f6c <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 8006efc:	edd7 7a00 	vldr	s15, [r7]
 8006f00:	ed9f 7a21 	vldr	s14, [pc, #132]	; 8006f88 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xf0>
 8006f04:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006f08:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006f0c:	d801      	bhi.n	8006f12 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0x7a>
 8006f0e:	2305      	movs	r3, #5
 8006f10:	e02c      	b.n	8006f6c <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 8006f12:	edd7 7a00 	vldr	s15, [r7]
 8006f16:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 8006f8c <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xf4>
 8006f1a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006f1e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006f22:	d801      	bhi.n	8006f28 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0x90>
 8006f24:	2306      	movs	r3, #6
 8006f26:	e021      	b.n	8006f6c <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 8006f28:	edd7 7a00 	vldr	s15, [r7]
 8006f2c:	ed9f 7a18 	vldr	s14, [pc, #96]	; 8006f90 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xf8>
 8006f30:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006f34:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006f38:	d801      	bhi.n	8006f3e <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xa6>
 8006f3a:	2307      	movs	r3, #7
 8006f3c:	e016      	b.n	8006f6c <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 8006f3e:	edd7 7a00 	vldr	s15, [r7]
 8006f42:	ed9f 7a14 	vldr	s14, [pc, #80]	; 8006f94 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xfc>
 8006f46:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006f4a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006f4e:	d801      	bhi.n	8006f54 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xbc>
 8006f50:	2308      	movs	r3, #8
 8006f52:	e00b      	b.n	8006f6c <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 8006f54:	edd7 7a00 	vldr	s15, [r7]
 8006f58:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 8006f98 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0x100>
 8006f5c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006f60:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006f64:	d801      	bhi.n	8006f6a <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xd2>
 8006f66:	2309      	movs	r3, #9
 8006f68:	e000      	b.n	8006f6c <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 8006f6a:	230a      	movs	r3, #10
  pObj->gyro_odr = (Odr <=   12.5f) ? LSM6DSO_GY_ODR_12Hz5
 8006f6c:	687a      	ldr	r2, [r7, #4]
 8006f6e:	f882 3034 	strb.w	r3, [r2, #52]	; 0x34
                   : (Odr <=  833.0f) ? LSM6DSO_GY_ODR_833Hz
                   : (Odr <= 1667.0f) ? LSM6DSO_GY_ODR_1667Hz
                   : (Odr <= 3333.0f) ? LSM6DSO_GY_ODR_3333Hz
                   :                    LSM6DSO_GY_ODR_6667Hz;

  return LSM6DSO_OK;
 8006f72:	2300      	movs	r3, #0
}
 8006f74:	4618      	mov	r0, r3
 8006f76:	370c      	adds	r7, #12
 8006f78:	46bd      	mov	sp, r7
 8006f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f7e:	4770      	bx	lr
 8006f80:	42500000 	.word	0x42500000
 8006f84:	42d00000 	.word	0x42d00000
 8006f88:	43500000 	.word	0x43500000
 8006f8c:	43d08000 	.word	0x43d08000
 8006f90:	44504000 	.word	0x44504000
 8006f94:	44d06000 	.word	0x44d06000
 8006f98:	45505000 	.word	0x45505000

08006f9c <ReadRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t ReadRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8006f9c:	b590      	push	{r4, r7, lr}
 8006f9e:	b087      	sub	sp, #28
 8006fa0:	af00      	add	r7, sp, #0
 8006fa2:	60f8      	str	r0, [r7, #12]
 8006fa4:	607a      	str	r2, [r7, #4]
 8006fa6:	461a      	mov	r2, r3
 8006fa8:	460b      	mov	r3, r1
 8006faa:	72fb      	strb	r3, [r7, #11]
 8006fac:	4613      	mov	r3, r2
 8006fae:	813b      	strh	r3, [r7, #8]
  LSM6DSO_Object_t *pObj = (LSM6DSO_Object_t *)Handle;
 8006fb0:	68fb      	ldr	r3, [r7, #12]
 8006fb2:	617b      	str	r3, [r7, #20]

  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 8006fb4:	697b      	ldr	r3, [r7, #20]
 8006fb6:	695c      	ldr	r4, [r3, #20]
 8006fb8:	697b      	ldr	r3, [r7, #20]
 8006fba:	7b1b      	ldrb	r3, [r3, #12]
 8006fbc:	b298      	uxth	r0, r3
 8006fbe:	7afb      	ldrb	r3, [r7, #11]
 8006fc0:	b299      	uxth	r1, r3
 8006fc2:	893b      	ldrh	r3, [r7, #8]
 8006fc4:	687a      	ldr	r2, [r7, #4]
 8006fc6:	47a0      	blx	r4
 8006fc8:	4603      	mov	r3, r0
}
 8006fca:	4618      	mov	r0, r3
 8006fcc:	371c      	adds	r7, #28
 8006fce:	46bd      	mov	sp, r7
 8006fd0:	bd90      	pop	{r4, r7, pc}

08006fd2 <WriteRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t WriteRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8006fd2:	b590      	push	{r4, r7, lr}
 8006fd4:	b087      	sub	sp, #28
 8006fd6:	af00      	add	r7, sp, #0
 8006fd8:	60f8      	str	r0, [r7, #12]
 8006fda:	607a      	str	r2, [r7, #4]
 8006fdc:	461a      	mov	r2, r3
 8006fde:	460b      	mov	r3, r1
 8006fe0:	72fb      	strb	r3, [r7, #11]
 8006fe2:	4613      	mov	r3, r2
 8006fe4:	813b      	strh	r3, [r7, #8]
  LSM6DSO_Object_t *pObj = (LSM6DSO_Object_t *)Handle;
 8006fe6:	68fb      	ldr	r3, [r7, #12]
 8006fe8:	617b      	str	r3, [r7, #20]

  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 8006fea:	697b      	ldr	r3, [r7, #20]
 8006fec:	691c      	ldr	r4, [r3, #16]
 8006fee:	697b      	ldr	r3, [r7, #20]
 8006ff0:	7b1b      	ldrb	r3, [r3, #12]
 8006ff2:	b298      	uxth	r0, r3
 8006ff4:	7afb      	ldrb	r3, [r7, #11]
 8006ff6:	b299      	uxth	r1, r3
 8006ff8:	893b      	ldrh	r3, [r7, #8]
 8006ffa:	687a      	ldr	r2, [r7, #4]
 8006ffc:	47a0      	blx	r4
 8006ffe:	4603      	mov	r3, r0
}
 8007000:	4618      	mov	r0, r3
 8007002:	371c      	adds	r7, #28
 8007004:	46bd      	mov	sp, r7
 8007006:	bd90      	pop	{r4, r7, pc}

08007008 <lsm6dso_read_reg>:
  *
  */
int32_t __weak lsm6dso_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                                uint8_t *data,
                                uint16_t len)
{
 8007008:	b590      	push	{r4, r7, lr}
 800700a:	b087      	sub	sp, #28
 800700c:	af00      	add	r7, sp, #0
 800700e:	60f8      	str	r0, [r7, #12]
 8007010:	607a      	str	r2, [r7, #4]
 8007012:	461a      	mov	r2, r3
 8007014:	460b      	mov	r3, r1
 8007016:	72fb      	strb	r3, [r7, #11]
 8007018:	4613      	mov	r3, r2
 800701a:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 800701c:	68fb      	ldr	r3, [r7, #12]
 800701e:	685c      	ldr	r4, [r3, #4]
 8007020:	68fb      	ldr	r3, [r7, #12]
 8007022:	68d8      	ldr	r0, [r3, #12]
 8007024:	893b      	ldrh	r3, [r7, #8]
 8007026:	7af9      	ldrb	r1, [r7, #11]
 8007028:	687a      	ldr	r2, [r7, #4]
 800702a:	47a0      	blx	r4
 800702c:	6178      	str	r0, [r7, #20]

  return ret;
 800702e:	697b      	ldr	r3, [r7, #20]
}
 8007030:	4618      	mov	r0, r3
 8007032:	371c      	adds	r7, #28
 8007034:	46bd      	mov	sp, r7
 8007036:	bd90      	pop	{r4, r7, pc}

08007038 <lsm6dso_write_reg>:
  *
  */
int32_t __weak lsm6dso_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                                 uint8_t *data,
                                 uint16_t len)
{
 8007038:	b590      	push	{r4, r7, lr}
 800703a:	b087      	sub	sp, #28
 800703c:	af00      	add	r7, sp, #0
 800703e:	60f8      	str	r0, [r7, #12]
 8007040:	607a      	str	r2, [r7, #4]
 8007042:	461a      	mov	r2, r3
 8007044:	460b      	mov	r3, r1
 8007046:	72fb      	strb	r3, [r7, #11]
 8007048:	4613      	mov	r3, r2
 800704a:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 800704c:	68fb      	ldr	r3, [r7, #12]
 800704e:	681c      	ldr	r4, [r3, #0]
 8007050:	68fb      	ldr	r3, [r7, #12]
 8007052:	68d8      	ldr	r0, [r3, #12]
 8007054:	893b      	ldrh	r3, [r7, #8]
 8007056:	7af9      	ldrb	r1, [r7, #11]
 8007058:	687a      	ldr	r2, [r7, #4]
 800705a:	47a0      	blx	r4
 800705c:	6178      	str	r0, [r7, #20]

  return ret;
 800705e:	697b      	ldr	r3, [r7, #20]
}
 8007060:	4618      	mov	r0, r3
 8007062:	371c      	adds	r7, #28
 8007064:	46bd      	mov	sp, r7
 8007066:	bd90      	pop	{r4, r7, pc}

08007068 <lsm6dso_xl_full_scale_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_xl_full_scale_set(stmdev_ctx_t *ctx,
                                  lsm6dso_fs_xl_t val)
{
 8007068:	b580      	push	{r7, lr}
 800706a:	b084      	sub	sp, #16
 800706c:	af00      	add	r7, sp, #0
 800706e:	6078      	str	r0, [r7, #4]
 8007070:	460b      	mov	r3, r1
 8007072:	70fb      	strb	r3, [r7, #3]
  lsm6dso_ctrl1_xl_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL1_XL, (uint8_t *)&reg, 1);
 8007074:	f107 0208 	add.w	r2, r7, #8
 8007078:	2301      	movs	r3, #1
 800707a:	2110      	movs	r1, #16
 800707c:	6878      	ldr	r0, [r7, #4]
 800707e:	f7ff ffc3 	bl	8007008 <lsm6dso_read_reg>
 8007082:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8007084:	68fb      	ldr	r3, [r7, #12]
 8007086:	2b00      	cmp	r3, #0
 8007088:	d10f      	bne.n	80070aa <lsm6dso_xl_full_scale_set+0x42>
  {
    reg.fs_xl = (uint8_t) val;
 800708a:	78fb      	ldrb	r3, [r7, #3]
 800708c:	f003 0303 	and.w	r3, r3, #3
 8007090:	b2da      	uxtb	r2, r3
 8007092:	7a3b      	ldrb	r3, [r7, #8]
 8007094:	f362 0383 	bfi	r3, r2, #2, #2
 8007098:	723b      	strb	r3, [r7, #8]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL1_XL, (uint8_t *)&reg, 1);
 800709a:	f107 0208 	add.w	r2, r7, #8
 800709e:	2301      	movs	r3, #1
 80070a0:	2110      	movs	r1, #16
 80070a2:	6878      	ldr	r0, [r7, #4]
 80070a4:	f7ff ffc8 	bl	8007038 <lsm6dso_write_reg>
 80070a8:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80070aa:	68fb      	ldr	r3, [r7, #12]
}
 80070ac:	4618      	mov	r0, r3
 80070ae:	3710      	adds	r7, #16
 80070b0:	46bd      	mov	sp, r7
 80070b2:	bd80      	pop	{r7, pc}

080070b4 <lsm6dso_xl_full_scale_get>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_xl_full_scale_get(stmdev_ctx_t *ctx,
                                  lsm6dso_fs_xl_t *val)
{
 80070b4:	b580      	push	{r7, lr}
 80070b6:	b084      	sub	sp, #16
 80070b8:	af00      	add	r7, sp, #0
 80070ba:	6078      	str	r0, [r7, #4]
 80070bc:	6039      	str	r1, [r7, #0]
  lsm6dso_ctrl1_xl_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL1_XL, (uint8_t *)&reg, 1);
 80070be:	f107 0208 	add.w	r2, r7, #8
 80070c2:	2301      	movs	r3, #1
 80070c4:	2110      	movs	r1, #16
 80070c6:	6878      	ldr	r0, [r7, #4]
 80070c8:	f7ff ff9e 	bl	8007008 <lsm6dso_read_reg>
 80070cc:	60f8      	str	r0, [r7, #12]

  switch (reg.fs_xl)
 80070ce:	7a3b      	ldrb	r3, [r7, #8]
 80070d0:	f3c3 0381 	ubfx	r3, r3, #2, #2
 80070d4:	b2db      	uxtb	r3, r3
 80070d6:	2b03      	cmp	r3, #3
 80070d8:	d81a      	bhi.n	8007110 <lsm6dso_xl_full_scale_get+0x5c>
 80070da:	a201      	add	r2, pc, #4	; (adr r2, 80070e0 <lsm6dso_xl_full_scale_get+0x2c>)
 80070dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80070e0:	080070f1 	.word	0x080070f1
 80070e4:	080070f9 	.word	0x080070f9
 80070e8:	08007101 	.word	0x08007101
 80070ec:	08007109 	.word	0x08007109
  {
    case LSM6DSO_2g:
      *val = LSM6DSO_2g;
 80070f0:	683b      	ldr	r3, [r7, #0]
 80070f2:	2200      	movs	r2, #0
 80070f4:	701a      	strb	r2, [r3, #0]
      break;
 80070f6:	e00f      	b.n	8007118 <lsm6dso_xl_full_scale_get+0x64>

    case LSM6DSO_16g:
      *val = LSM6DSO_16g;
 80070f8:	683b      	ldr	r3, [r7, #0]
 80070fa:	2201      	movs	r2, #1
 80070fc:	701a      	strb	r2, [r3, #0]
      break;
 80070fe:	e00b      	b.n	8007118 <lsm6dso_xl_full_scale_get+0x64>

    case LSM6DSO_4g:
      *val = LSM6DSO_4g;
 8007100:	683b      	ldr	r3, [r7, #0]
 8007102:	2202      	movs	r2, #2
 8007104:	701a      	strb	r2, [r3, #0]
      break;
 8007106:	e007      	b.n	8007118 <lsm6dso_xl_full_scale_get+0x64>

    case LSM6DSO_8g:
      *val = LSM6DSO_8g;
 8007108:	683b      	ldr	r3, [r7, #0]
 800710a:	2203      	movs	r2, #3
 800710c:	701a      	strb	r2, [r3, #0]
      break;
 800710e:	e003      	b.n	8007118 <lsm6dso_xl_full_scale_get+0x64>

    default:
      *val = LSM6DSO_2g;
 8007110:	683b      	ldr	r3, [r7, #0]
 8007112:	2200      	movs	r2, #0
 8007114:	701a      	strb	r2, [r3, #0]
      break;
 8007116:	bf00      	nop
  }

  return ret;
 8007118:	68fb      	ldr	r3, [r7, #12]
}
 800711a:	4618      	mov	r0, r3
 800711c:	3710      	adds	r7, #16
 800711e:	46bd      	mov	sp, r7
 8007120:	bd80      	pop	{r7, pc}
 8007122:	bf00      	nop

08007124 <lsm6dso_xl_data_rate_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_xl_data_rate_set(stmdev_ctx_t *ctx,
                                 lsm6dso_odr_xl_t val)
{
 8007124:	b580      	push	{r7, lr}
 8007126:	b086      	sub	sp, #24
 8007128:	af00      	add	r7, sp, #0
 800712a:	6078      	str	r0, [r7, #4]
 800712c:	460b      	mov	r3, r1
 800712e:	70fb      	strb	r3, [r7, #3]
  lsm6dso_odr_xl_t odr_xl =  val;
 8007130:	78fb      	ldrb	r3, [r7, #3]
 8007132:	75fb      	strb	r3, [r7, #23]
  lsm6dso_fsm_odr_t fsm_odr;
  lsm6dso_ctrl1_xl_t reg;
  int32_t ret;

  /* Check the Finite State Machine data rate constraints */
  ret =  lsm6dso_fsm_enable_get(ctx, &fsm_enable);
 8007134:	f107 030c 	add.w	r3, r7, #12
 8007138:	4619      	mov	r1, r3
 800713a:	6878      	ldr	r0, [r7, #4]
 800713c:	f000 fca1 	bl	8007a82 <lsm6dso_fsm_enable_get>
 8007140:	6138      	str	r0, [r7, #16]

  if (ret == 0)
 8007142:	693b      	ldr	r3, [r7, #16]
 8007144:	2b00      	cmp	r3, #0
 8007146:	f040 80c4 	bne.w	80072d2 <lsm6dso_xl_data_rate_set+0x1ae>
  {
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
 800714a:	7b3b      	ldrb	r3, [r7, #12]
 800714c:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8007150:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm2_en  |
 8007152:	7b3b      	ldrb	r3, [r7, #12]
 8007154:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8007158:	b2db      	uxtb	r3, r3
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
 800715a:	4313      	orrs	r3, r2
 800715c:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm3_en  |
 800715e:	7b3b      	ldrb	r3, [r7, #12]
 8007160:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8007164:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm2_en  |
 8007166:	4313      	orrs	r3, r2
 8007168:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm4_en  |
 800716a:	7b3b      	ldrb	r3, [r7, #12]
 800716c:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8007170:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm3_en  |
 8007172:	4313      	orrs	r3, r2
 8007174:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm5_en  |
 8007176:	7b3b      	ldrb	r3, [r7, #12]
 8007178:	f3c3 1300 	ubfx	r3, r3, #4, #1
 800717c:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm4_en  |
 800717e:	4313      	orrs	r3, r2
 8007180:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm6_en  |
 8007182:	7b3b      	ldrb	r3, [r7, #12]
 8007184:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8007188:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm5_en  |
 800718a:	4313      	orrs	r3, r2
 800718c:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm7_en  |
 800718e:	7b3b      	ldrb	r3, [r7, #12]
 8007190:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8007194:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm6_en  |
 8007196:	4313      	orrs	r3, r2
 8007198:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm8_en  |
 800719a:	7b3b      	ldrb	r3, [r7, #12]
 800719c:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 80071a0:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm7_en  |
 80071a2:	4313      	orrs	r3, r2
 80071a4:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm9_en  |
 80071a6:	7b7b      	ldrb	r3, [r7, #13]
 80071a8:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80071ac:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm8_en  |
 80071ae:	4313      	orrs	r3, r2
 80071b0:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm10_en |
 80071b2:	7b7b      	ldrb	r3, [r7, #13]
 80071b4:	f3c3 0340 	ubfx	r3, r3, #1, #1
 80071b8:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm9_en  |
 80071ba:	4313      	orrs	r3, r2
 80071bc:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm11_en |
 80071be:	7b7b      	ldrb	r3, [r7, #13]
 80071c0:	f3c3 0380 	ubfx	r3, r3, #2, #1
 80071c4:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm10_en |
 80071c6:	4313      	orrs	r3, r2
 80071c8:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm12_en |
 80071ca:	7b7b      	ldrb	r3, [r7, #13]
 80071cc:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80071d0:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm11_en |
 80071d2:	4313      	orrs	r3, r2
 80071d4:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm13_en |
 80071d6:	7b7b      	ldrb	r3, [r7, #13]
 80071d8:	f3c3 1300 	ubfx	r3, r3, #4, #1
 80071dc:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm12_en |
 80071de:	4313      	orrs	r3, r2
 80071e0:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm14_en |
 80071e2:	7b7b      	ldrb	r3, [r7, #13]
 80071e4:	f3c3 1340 	ubfx	r3, r3, #5, #1
 80071e8:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm13_en |
 80071ea:	4313      	orrs	r3, r2
 80071ec:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm15_en |
 80071ee:	7b7b      	ldrb	r3, [r7, #13]
 80071f0:	f3c3 1380 	ubfx	r3, r3, #6, #1
 80071f4:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm14_en |
 80071f6:	4313      	orrs	r3, r2
 80071f8:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm16_en) == PROPERTY_ENABLE)
 80071fa:	7b7b      	ldrb	r3, [r7, #13]
 80071fc:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8007200:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm15_en |
 8007202:	4313      	orrs	r3, r2
 8007204:	b2db      	uxtb	r3, r3
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
 8007206:	2b01      	cmp	r3, #1
 8007208:	d163      	bne.n	80072d2 <lsm6dso_xl_data_rate_set+0x1ae>
    {
      ret =  lsm6dso_fsm_data_rate_get(ctx, &fsm_odr);
 800720a:	f107 030b 	add.w	r3, r7, #11
 800720e:	4619      	mov	r1, r3
 8007210:	6878      	ldr	r0, [r7, #4]
 8007212:	f000 fc57 	bl	8007ac4 <lsm6dso_fsm_data_rate_get>
 8007216:	6138      	str	r0, [r7, #16]

      if (ret == 0)
 8007218:	693b      	ldr	r3, [r7, #16]
 800721a:	2b00      	cmp	r3, #0
 800721c:	d159      	bne.n	80072d2 <lsm6dso_xl_data_rate_set+0x1ae>
      {
        switch (fsm_odr)
 800721e:	7afb      	ldrb	r3, [r7, #11]
 8007220:	2b03      	cmp	r3, #3
 8007222:	d853      	bhi.n	80072cc <lsm6dso_xl_data_rate_set+0x1a8>
 8007224:	a201      	add	r2, pc, #4	; (adr r2, 800722c <lsm6dso_xl_data_rate_set+0x108>)
 8007226:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800722a:	bf00      	nop
 800722c:	0800723d 	.word	0x0800723d
 8007230:	0800724f 	.word	0x0800724f
 8007234:	0800726d 	.word	0x0800726d
 8007238:	08007297 	.word	0x08007297
        {
          case LSM6DSO_ODR_FSM_12Hz5:
            if (val == LSM6DSO_XL_ODR_OFF)
 800723c:	78fb      	ldrb	r3, [r7, #3]
 800723e:	2b00      	cmp	r3, #0
 8007240:	d102      	bne.n	8007248 <lsm6dso_xl_data_rate_set+0x124>
            {
              odr_xl = LSM6DSO_XL_ODR_12Hz5;
 8007242:	2301      	movs	r3, #1
 8007244:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_xl = val;
            }

            break;
 8007246:	e045      	b.n	80072d4 <lsm6dso_xl_data_rate_set+0x1b0>
              odr_xl = val;
 8007248:	78fb      	ldrb	r3, [r7, #3]
 800724a:	75fb      	strb	r3, [r7, #23]
            break;
 800724c:	e042      	b.n	80072d4 <lsm6dso_xl_data_rate_set+0x1b0>

          case LSM6DSO_ODR_FSM_26Hz:
            if (val == LSM6DSO_XL_ODR_OFF)
 800724e:	78fb      	ldrb	r3, [r7, #3]
 8007250:	2b00      	cmp	r3, #0
 8007252:	d102      	bne.n	800725a <lsm6dso_xl_data_rate_set+0x136>
            {
              odr_xl = LSM6DSO_XL_ODR_26Hz;
 8007254:	2302      	movs	r3, #2
 8007256:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_xl = val;
            }

            break;
 8007258:	e03c      	b.n	80072d4 <lsm6dso_xl_data_rate_set+0x1b0>
            else if (val == LSM6DSO_XL_ODR_12Hz5)
 800725a:	78fb      	ldrb	r3, [r7, #3]
 800725c:	2b01      	cmp	r3, #1
 800725e:	d102      	bne.n	8007266 <lsm6dso_xl_data_rate_set+0x142>
              odr_xl = LSM6DSO_XL_ODR_26Hz;
 8007260:	2302      	movs	r3, #2
 8007262:	75fb      	strb	r3, [r7, #23]
            break;
 8007264:	e036      	b.n	80072d4 <lsm6dso_xl_data_rate_set+0x1b0>
              odr_xl = val;
 8007266:	78fb      	ldrb	r3, [r7, #3]
 8007268:	75fb      	strb	r3, [r7, #23]
            break;
 800726a:	e033      	b.n	80072d4 <lsm6dso_xl_data_rate_set+0x1b0>

          case LSM6DSO_ODR_FSM_52Hz:
            if (val == LSM6DSO_XL_ODR_OFF)
 800726c:	78fb      	ldrb	r3, [r7, #3]
 800726e:	2b00      	cmp	r3, #0
 8007270:	d102      	bne.n	8007278 <lsm6dso_xl_data_rate_set+0x154>
            {
              odr_xl = LSM6DSO_XL_ODR_52Hz;
 8007272:	2303      	movs	r3, #3
 8007274:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_xl = val;
            }

            break;
 8007276:	e02d      	b.n	80072d4 <lsm6dso_xl_data_rate_set+0x1b0>
            else if (val == LSM6DSO_XL_ODR_12Hz5)
 8007278:	78fb      	ldrb	r3, [r7, #3]
 800727a:	2b01      	cmp	r3, #1
 800727c:	d102      	bne.n	8007284 <lsm6dso_xl_data_rate_set+0x160>
              odr_xl = LSM6DSO_XL_ODR_52Hz;
 800727e:	2303      	movs	r3, #3
 8007280:	75fb      	strb	r3, [r7, #23]
            break;
 8007282:	e027      	b.n	80072d4 <lsm6dso_xl_data_rate_set+0x1b0>
            else if (val == LSM6DSO_XL_ODR_26Hz)
 8007284:	78fb      	ldrb	r3, [r7, #3]
 8007286:	2b02      	cmp	r3, #2
 8007288:	d102      	bne.n	8007290 <lsm6dso_xl_data_rate_set+0x16c>
              odr_xl = LSM6DSO_XL_ODR_52Hz;
 800728a:	2303      	movs	r3, #3
 800728c:	75fb      	strb	r3, [r7, #23]
            break;
 800728e:	e021      	b.n	80072d4 <lsm6dso_xl_data_rate_set+0x1b0>
              odr_xl = val;
 8007290:	78fb      	ldrb	r3, [r7, #3]
 8007292:	75fb      	strb	r3, [r7, #23]
            break;
 8007294:	e01e      	b.n	80072d4 <lsm6dso_xl_data_rate_set+0x1b0>

          case LSM6DSO_ODR_FSM_104Hz:
            if (val == LSM6DSO_XL_ODR_OFF)
 8007296:	78fb      	ldrb	r3, [r7, #3]
 8007298:	2b00      	cmp	r3, #0
 800729a:	d102      	bne.n	80072a2 <lsm6dso_xl_data_rate_set+0x17e>
            {
              odr_xl = LSM6DSO_XL_ODR_104Hz;
 800729c:	2304      	movs	r3, #4
 800729e:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_xl = val;
            }

            break;
 80072a0:	e018      	b.n	80072d4 <lsm6dso_xl_data_rate_set+0x1b0>
            else if (val == LSM6DSO_XL_ODR_12Hz5)
 80072a2:	78fb      	ldrb	r3, [r7, #3]
 80072a4:	2b01      	cmp	r3, #1
 80072a6:	d102      	bne.n	80072ae <lsm6dso_xl_data_rate_set+0x18a>
              odr_xl = LSM6DSO_XL_ODR_104Hz;
 80072a8:	2304      	movs	r3, #4
 80072aa:	75fb      	strb	r3, [r7, #23]
            break;
 80072ac:	e012      	b.n	80072d4 <lsm6dso_xl_data_rate_set+0x1b0>
            else if (val == LSM6DSO_XL_ODR_26Hz)
 80072ae:	78fb      	ldrb	r3, [r7, #3]
 80072b0:	2b02      	cmp	r3, #2
 80072b2:	d102      	bne.n	80072ba <lsm6dso_xl_data_rate_set+0x196>
              odr_xl = LSM6DSO_XL_ODR_104Hz;
 80072b4:	2304      	movs	r3, #4
 80072b6:	75fb      	strb	r3, [r7, #23]
            break;
 80072b8:	e00c      	b.n	80072d4 <lsm6dso_xl_data_rate_set+0x1b0>
            else if (val == LSM6DSO_XL_ODR_52Hz)
 80072ba:	78fb      	ldrb	r3, [r7, #3]
 80072bc:	2b03      	cmp	r3, #3
 80072be:	d102      	bne.n	80072c6 <lsm6dso_xl_data_rate_set+0x1a2>
              odr_xl = LSM6DSO_XL_ODR_104Hz;
 80072c0:	2304      	movs	r3, #4
 80072c2:	75fb      	strb	r3, [r7, #23]
            break;
 80072c4:	e006      	b.n	80072d4 <lsm6dso_xl_data_rate_set+0x1b0>
              odr_xl = val;
 80072c6:	78fb      	ldrb	r3, [r7, #3]
 80072c8:	75fb      	strb	r3, [r7, #23]
            break;
 80072ca:	e003      	b.n	80072d4 <lsm6dso_xl_data_rate_set+0x1b0>

          default:
            odr_xl = val;
 80072cc:	78fb      	ldrb	r3, [r7, #3]
 80072ce:	75fb      	strb	r3, [r7, #23]
            break;
 80072d0:	e000      	b.n	80072d4 <lsm6dso_xl_data_rate_set+0x1b0>
        }
      }
 80072d2:	bf00      	nop
    }
  }

  if (ret == 0)
 80072d4:	693b      	ldr	r3, [r7, #16]
 80072d6:	2b00      	cmp	r3, #0
 80072d8:	d107      	bne.n	80072ea <lsm6dso_xl_data_rate_set+0x1c6>
  {
    ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL1_XL, (uint8_t *)&reg, 1);
 80072da:	f107 0208 	add.w	r2, r7, #8
 80072de:	2301      	movs	r3, #1
 80072e0:	2110      	movs	r1, #16
 80072e2:	6878      	ldr	r0, [r7, #4]
 80072e4:	f7ff fe90 	bl	8007008 <lsm6dso_read_reg>
 80072e8:	6138      	str	r0, [r7, #16]
  }

  if (ret == 0)
 80072ea:	693b      	ldr	r3, [r7, #16]
 80072ec:	2b00      	cmp	r3, #0
 80072ee:	d10f      	bne.n	8007310 <lsm6dso_xl_data_rate_set+0x1ec>
  {
    reg.odr_xl = (uint8_t) odr_xl;
 80072f0:	7dfb      	ldrb	r3, [r7, #23]
 80072f2:	f003 030f 	and.w	r3, r3, #15
 80072f6:	b2da      	uxtb	r2, r3
 80072f8:	7a3b      	ldrb	r3, [r7, #8]
 80072fa:	f362 1307 	bfi	r3, r2, #4, #4
 80072fe:	723b      	strb	r3, [r7, #8]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL1_XL, (uint8_t *)&reg, 1);
 8007300:	f107 0208 	add.w	r2, r7, #8
 8007304:	2301      	movs	r3, #1
 8007306:	2110      	movs	r1, #16
 8007308:	6878      	ldr	r0, [r7, #4]
 800730a:	f7ff fe95 	bl	8007038 <lsm6dso_write_reg>
 800730e:	6138      	str	r0, [r7, #16]
  }

  return ret;
 8007310:	693b      	ldr	r3, [r7, #16]
}
 8007312:	4618      	mov	r0, r3
 8007314:	3718      	adds	r7, #24
 8007316:	46bd      	mov	sp, r7
 8007318:	bd80      	pop	{r7, pc}
 800731a:	bf00      	nop

0800731c <lsm6dso_xl_data_rate_get>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_xl_data_rate_get(stmdev_ctx_t *ctx,
                                 lsm6dso_odr_xl_t *val)
{
 800731c:	b580      	push	{r7, lr}
 800731e:	b084      	sub	sp, #16
 8007320:	af00      	add	r7, sp, #0
 8007322:	6078      	str	r0, [r7, #4]
 8007324:	6039      	str	r1, [r7, #0]
  lsm6dso_ctrl1_xl_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL1_XL, (uint8_t *)&reg, 1);
 8007326:	f107 0208 	add.w	r2, r7, #8
 800732a:	2301      	movs	r3, #1
 800732c:	2110      	movs	r1, #16
 800732e:	6878      	ldr	r0, [r7, #4]
 8007330:	f7ff fe6a 	bl	8007008 <lsm6dso_read_reg>
 8007334:	60f8      	str	r0, [r7, #12]

  switch (reg.odr_xl)
 8007336:	7a3b      	ldrb	r3, [r7, #8]
 8007338:	f3c3 1303 	ubfx	r3, r3, #4, #4
 800733c:	b2db      	uxtb	r3, r3
 800733e:	2b0b      	cmp	r3, #11
 8007340:	d84a      	bhi.n	80073d8 <lsm6dso_xl_data_rate_get+0xbc>
 8007342:	a201      	add	r2, pc, #4	; (adr r2, 8007348 <lsm6dso_xl_data_rate_get+0x2c>)
 8007344:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007348:	08007379 	.word	0x08007379
 800734c:	08007381 	.word	0x08007381
 8007350:	08007389 	.word	0x08007389
 8007354:	08007391 	.word	0x08007391
 8007358:	08007399 	.word	0x08007399
 800735c:	080073a1 	.word	0x080073a1
 8007360:	080073a9 	.word	0x080073a9
 8007364:	080073b1 	.word	0x080073b1
 8007368:	080073b9 	.word	0x080073b9
 800736c:	080073c1 	.word	0x080073c1
 8007370:	080073c9 	.word	0x080073c9
 8007374:	080073d1 	.word	0x080073d1
  {
    case LSM6DSO_XL_ODR_OFF:
      *val = LSM6DSO_XL_ODR_OFF;
 8007378:	683b      	ldr	r3, [r7, #0]
 800737a:	2200      	movs	r2, #0
 800737c:	701a      	strb	r2, [r3, #0]
      break;
 800737e:	e02f      	b.n	80073e0 <lsm6dso_xl_data_rate_get+0xc4>

    case LSM6DSO_XL_ODR_12Hz5:
      *val = LSM6DSO_XL_ODR_12Hz5;
 8007380:	683b      	ldr	r3, [r7, #0]
 8007382:	2201      	movs	r2, #1
 8007384:	701a      	strb	r2, [r3, #0]
      break;
 8007386:	e02b      	b.n	80073e0 <lsm6dso_xl_data_rate_get+0xc4>

    case LSM6DSO_XL_ODR_26Hz:
      *val = LSM6DSO_XL_ODR_26Hz;
 8007388:	683b      	ldr	r3, [r7, #0]
 800738a:	2202      	movs	r2, #2
 800738c:	701a      	strb	r2, [r3, #0]
      break;
 800738e:	e027      	b.n	80073e0 <lsm6dso_xl_data_rate_get+0xc4>

    case LSM6DSO_XL_ODR_52Hz:
      *val = LSM6DSO_XL_ODR_52Hz;
 8007390:	683b      	ldr	r3, [r7, #0]
 8007392:	2203      	movs	r2, #3
 8007394:	701a      	strb	r2, [r3, #0]
      break;
 8007396:	e023      	b.n	80073e0 <lsm6dso_xl_data_rate_get+0xc4>

    case LSM6DSO_XL_ODR_104Hz:
      *val = LSM6DSO_XL_ODR_104Hz;
 8007398:	683b      	ldr	r3, [r7, #0]
 800739a:	2204      	movs	r2, #4
 800739c:	701a      	strb	r2, [r3, #0]
      break;
 800739e:	e01f      	b.n	80073e0 <lsm6dso_xl_data_rate_get+0xc4>

    case LSM6DSO_XL_ODR_208Hz:
      *val = LSM6DSO_XL_ODR_208Hz;
 80073a0:	683b      	ldr	r3, [r7, #0]
 80073a2:	2205      	movs	r2, #5
 80073a4:	701a      	strb	r2, [r3, #0]
      break;
 80073a6:	e01b      	b.n	80073e0 <lsm6dso_xl_data_rate_get+0xc4>

    case LSM6DSO_XL_ODR_417Hz:
      *val = LSM6DSO_XL_ODR_417Hz;
 80073a8:	683b      	ldr	r3, [r7, #0]
 80073aa:	2206      	movs	r2, #6
 80073ac:	701a      	strb	r2, [r3, #0]
      break;
 80073ae:	e017      	b.n	80073e0 <lsm6dso_xl_data_rate_get+0xc4>

    case LSM6DSO_XL_ODR_833Hz:
      *val = LSM6DSO_XL_ODR_833Hz;
 80073b0:	683b      	ldr	r3, [r7, #0]
 80073b2:	2207      	movs	r2, #7
 80073b4:	701a      	strb	r2, [r3, #0]
      break;
 80073b6:	e013      	b.n	80073e0 <lsm6dso_xl_data_rate_get+0xc4>

    case LSM6DSO_XL_ODR_1667Hz:
      *val = LSM6DSO_XL_ODR_1667Hz;
 80073b8:	683b      	ldr	r3, [r7, #0]
 80073ba:	2208      	movs	r2, #8
 80073bc:	701a      	strb	r2, [r3, #0]
      break;
 80073be:	e00f      	b.n	80073e0 <lsm6dso_xl_data_rate_get+0xc4>

    case LSM6DSO_XL_ODR_3333Hz:
      *val = LSM6DSO_XL_ODR_3333Hz;
 80073c0:	683b      	ldr	r3, [r7, #0]
 80073c2:	2209      	movs	r2, #9
 80073c4:	701a      	strb	r2, [r3, #0]
      break;
 80073c6:	e00b      	b.n	80073e0 <lsm6dso_xl_data_rate_get+0xc4>

    case LSM6DSO_XL_ODR_6667Hz:
      *val = LSM6DSO_XL_ODR_6667Hz;
 80073c8:	683b      	ldr	r3, [r7, #0]
 80073ca:	220a      	movs	r2, #10
 80073cc:	701a      	strb	r2, [r3, #0]
      break;
 80073ce:	e007      	b.n	80073e0 <lsm6dso_xl_data_rate_get+0xc4>

    case LSM6DSO_XL_ODR_1Hz6:
      *val = LSM6DSO_XL_ODR_1Hz6;
 80073d0:	683b      	ldr	r3, [r7, #0]
 80073d2:	220b      	movs	r2, #11
 80073d4:	701a      	strb	r2, [r3, #0]
      break;
 80073d6:	e003      	b.n	80073e0 <lsm6dso_xl_data_rate_get+0xc4>

    default:
      *val = LSM6DSO_XL_ODR_OFF;
 80073d8:	683b      	ldr	r3, [r7, #0]
 80073da:	2200      	movs	r2, #0
 80073dc:	701a      	strb	r2, [r3, #0]
      break;
 80073de:	bf00      	nop
  }

  return ret;
 80073e0:	68fb      	ldr	r3, [r7, #12]
}
 80073e2:	4618      	mov	r0, r3
 80073e4:	3710      	adds	r7, #16
 80073e6:	46bd      	mov	sp, r7
 80073e8:	bd80      	pop	{r7, pc}
 80073ea:	bf00      	nop

080073ec <lsm6dso_gy_full_scale_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_gy_full_scale_set(stmdev_ctx_t *ctx,
                                  lsm6dso_fs_g_t val)
{
 80073ec:	b580      	push	{r7, lr}
 80073ee:	b084      	sub	sp, #16
 80073f0:	af00      	add	r7, sp, #0
 80073f2:	6078      	str	r0, [r7, #4]
 80073f4:	460b      	mov	r3, r1
 80073f6:	70fb      	strb	r3, [r7, #3]
  lsm6dso_ctrl2_g_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL2_G, (uint8_t *)&reg, 1);
 80073f8:	f107 0208 	add.w	r2, r7, #8
 80073fc:	2301      	movs	r3, #1
 80073fe:	2111      	movs	r1, #17
 8007400:	6878      	ldr	r0, [r7, #4]
 8007402:	f7ff fe01 	bl	8007008 <lsm6dso_read_reg>
 8007406:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8007408:	68fb      	ldr	r3, [r7, #12]
 800740a:	2b00      	cmp	r3, #0
 800740c:	d10f      	bne.n	800742e <lsm6dso_gy_full_scale_set+0x42>
  {
    reg.fs_g = (uint8_t) val;
 800740e:	78fb      	ldrb	r3, [r7, #3]
 8007410:	f003 0307 	and.w	r3, r3, #7
 8007414:	b2da      	uxtb	r2, r3
 8007416:	7a3b      	ldrb	r3, [r7, #8]
 8007418:	f362 0343 	bfi	r3, r2, #1, #3
 800741c:	723b      	strb	r3, [r7, #8]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL2_G, (uint8_t *)&reg, 1);
 800741e:	f107 0208 	add.w	r2, r7, #8
 8007422:	2301      	movs	r3, #1
 8007424:	2111      	movs	r1, #17
 8007426:	6878      	ldr	r0, [r7, #4]
 8007428:	f7ff fe06 	bl	8007038 <lsm6dso_write_reg>
 800742c:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 800742e:	68fb      	ldr	r3, [r7, #12]
}
 8007430:	4618      	mov	r0, r3
 8007432:	3710      	adds	r7, #16
 8007434:	46bd      	mov	sp, r7
 8007436:	bd80      	pop	{r7, pc}

08007438 <lsm6dso_gy_full_scale_get>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_gy_full_scale_get(stmdev_ctx_t *ctx,
                                  lsm6dso_fs_g_t *val)
{
 8007438:	b580      	push	{r7, lr}
 800743a:	b084      	sub	sp, #16
 800743c:	af00      	add	r7, sp, #0
 800743e:	6078      	str	r0, [r7, #4]
 8007440:	6039      	str	r1, [r7, #0]
  lsm6dso_ctrl2_g_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL2_G, (uint8_t *)&reg, 1);
 8007442:	f107 0208 	add.w	r2, r7, #8
 8007446:	2301      	movs	r3, #1
 8007448:	2111      	movs	r1, #17
 800744a:	6878      	ldr	r0, [r7, #4]
 800744c:	f7ff fddc 	bl	8007008 <lsm6dso_read_reg>
 8007450:	60f8      	str	r0, [r7, #12]

  switch (reg.fs_g)
 8007452:	7a3b      	ldrb	r3, [r7, #8]
 8007454:	f3c3 0342 	ubfx	r3, r3, #1, #3
 8007458:	b2db      	uxtb	r3, r3
 800745a:	2b06      	cmp	r3, #6
 800745c:	d824      	bhi.n	80074a8 <lsm6dso_gy_full_scale_get+0x70>
 800745e:	a201      	add	r2, pc, #4	; (adr r2, 8007464 <lsm6dso_gy_full_scale_get+0x2c>)
 8007460:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007464:	08007481 	.word	0x08007481
 8007468:	08007489 	.word	0x08007489
 800746c:	08007491 	.word	0x08007491
 8007470:	080074a9 	.word	0x080074a9
 8007474:	08007499 	.word	0x08007499
 8007478:	080074a9 	.word	0x080074a9
 800747c:	080074a1 	.word	0x080074a1
  {
    case LSM6DSO_250dps:
      *val = LSM6DSO_250dps;
 8007480:	683b      	ldr	r3, [r7, #0]
 8007482:	2200      	movs	r2, #0
 8007484:	701a      	strb	r2, [r3, #0]
      break;
 8007486:	e013      	b.n	80074b0 <lsm6dso_gy_full_scale_get+0x78>

    case LSM6DSO_125dps:
      *val = LSM6DSO_125dps;
 8007488:	683b      	ldr	r3, [r7, #0]
 800748a:	2201      	movs	r2, #1
 800748c:	701a      	strb	r2, [r3, #0]
      break;
 800748e:	e00f      	b.n	80074b0 <lsm6dso_gy_full_scale_get+0x78>

    case LSM6DSO_500dps:
      *val = LSM6DSO_500dps;
 8007490:	683b      	ldr	r3, [r7, #0]
 8007492:	2202      	movs	r2, #2
 8007494:	701a      	strb	r2, [r3, #0]
      break;
 8007496:	e00b      	b.n	80074b0 <lsm6dso_gy_full_scale_get+0x78>

    case LSM6DSO_1000dps:
      *val = LSM6DSO_1000dps;
 8007498:	683b      	ldr	r3, [r7, #0]
 800749a:	2204      	movs	r2, #4
 800749c:	701a      	strb	r2, [r3, #0]
      break;
 800749e:	e007      	b.n	80074b0 <lsm6dso_gy_full_scale_get+0x78>

    case LSM6DSO_2000dps:
      *val = LSM6DSO_2000dps;
 80074a0:	683b      	ldr	r3, [r7, #0]
 80074a2:	2206      	movs	r2, #6
 80074a4:	701a      	strb	r2, [r3, #0]
      break;
 80074a6:	e003      	b.n	80074b0 <lsm6dso_gy_full_scale_get+0x78>

    default:
      *val = LSM6DSO_250dps;
 80074a8:	683b      	ldr	r3, [r7, #0]
 80074aa:	2200      	movs	r2, #0
 80074ac:	701a      	strb	r2, [r3, #0]
      break;
 80074ae:	bf00      	nop
  }

  return ret;
 80074b0:	68fb      	ldr	r3, [r7, #12]
}
 80074b2:	4618      	mov	r0, r3
 80074b4:	3710      	adds	r7, #16
 80074b6:	46bd      	mov	sp, r7
 80074b8:	bd80      	pop	{r7, pc}
 80074ba:	bf00      	nop

080074bc <lsm6dso_gy_data_rate_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_gy_data_rate_set(stmdev_ctx_t *ctx,
                                 lsm6dso_odr_g_t val)
{
 80074bc:	b580      	push	{r7, lr}
 80074be:	b086      	sub	sp, #24
 80074c0:	af00      	add	r7, sp, #0
 80074c2:	6078      	str	r0, [r7, #4]
 80074c4:	460b      	mov	r3, r1
 80074c6:	70fb      	strb	r3, [r7, #3]
  lsm6dso_odr_g_t odr_gy =  val;
 80074c8:	78fb      	ldrb	r3, [r7, #3]
 80074ca:	75fb      	strb	r3, [r7, #23]
  lsm6dso_fsm_odr_t fsm_odr;
  lsm6dso_ctrl2_g_t reg;
  int32_t ret;

  /* Check the Finite State Machine data rate constraints */
  ret =  lsm6dso_fsm_enable_get(ctx, &fsm_enable);
 80074cc:	f107 030c 	add.w	r3, r7, #12
 80074d0:	4619      	mov	r1, r3
 80074d2:	6878      	ldr	r0, [r7, #4]
 80074d4:	f000 fad5 	bl	8007a82 <lsm6dso_fsm_enable_get>
 80074d8:	6138      	str	r0, [r7, #16]

  if (ret == 0)
 80074da:	693b      	ldr	r3, [r7, #16]
 80074dc:	2b00      	cmp	r3, #0
 80074de:	f040 80c4 	bne.w	800766a <lsm6dso_gy_data_rate_set+0x1ae>
  {
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
 80074e2:	7b3b      	ldrb	r3, [r7, #12]
 80074e4:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80074e8:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm2_en  |
 80074ea:	7b3b      	ldrb	r3, [r7, #12]
 80074ec:	f3c3 0340 	ubfx	r3, r3, #1, #1
 80074f0:	b2db      	uxtb	r3, r3
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
 80074f2:	4313      	orrs	r3, r2
 80074f4:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm3_en  |
 80074f6:	7b3b      	ldrb	r3, [r7, #12]
 80074f8:	f3c3 0380 	ubfx	r3, r3, #2, #1
 80074fc:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm2_en  |
 80074fe:	4313      	orrs	r3, r2
 8007500:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm4_en  |
 8007502:	7b3b      	ldrb	r3, [r7, #12]
 8007504:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8007508:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm3_en  |
 800750a:	4313      	orrs	r3, r2
 800750c:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm5_en  |
 800750e:	7b3b      	ldrb	r3, [r7, #12]
 8007510:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8007514:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm4_en  |
 8007516:	4313      	orrs	r3, r2
 8007518:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm6_en  |
 800751a:	7b3b      	ldrb	r3, [r7, #12]
 800751c:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8007520:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm5_en  |
 8007522:	4313      	orrs	r3, r2
 8007524:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm7_en  |
 8007526:	7b3b      	ldrb	r3, [r7, #12]
 8007528:	f3c3 1380 	ubfx	r3, r3, #6, #1
 800752c:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm6_en  |
 800752e:	4313      	orrs	r3, r2
 8007530:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm8_en  |
 8007532:	7b3b      	ldrb	r3, [r7, #12]
 8007534:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8007538:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm7_en  |
 800753a:	4313      	orrs	r3, r2
 800753c:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm9_en  |
 800753e:	7b7b      	ldrb	r3, [r7, #13]
 8007540:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8007544:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm8_en  |
 8007546:	4313      	orrs	r3, r2
 8007548:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm10_en |
 800754a:	7b7b      	ldrb	r3, [r7, #13]
 800754c:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8007550:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm9_en  |
 8007552:	4313      	orrs	r3, r2
 8007554:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm11_en |
 8007556:	7b7b      	ldrb	r3, [r7, #13]
 8007558:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800755c:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm10_en |
 800755e:	4313      	orrs	r3, r2
 8007560:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm12_en |
 8007562:	7b7b      	ldrb	r3, [r7, #13]
 8007564:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8007568:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm11_en |
 800756a:	4313      	orrs	r3, r2
 800756c:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm13_en |
 800756e:	7b7b      	ldrb	r3, [r7, #13]
 8007570:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8007574:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm12_en |
 8007576:	4313      	orrs	r3, r2
 8007578:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm14_en |
 800757a:	7b7b      	ldrb	r3, [r7, #13]
 800757c:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8007580:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm13_en |
 8007582:	4313      	orrs	r3, r2
 8007584:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm15_en |
 8007586:	7b7b      	ldrb	r3, [r7, #13]
 8007588:	f3c3 1380 	ubfx	r3, r3, #6, #1
 800758c:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm14_en |
 800758e:	4313      	orrs	r3, r2
 8007590:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm16_en) == PROPERTY_ENABLE)
 8007592:	7b7b      	ldrb	r3, [r7, #13]
 8007594:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8007598:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm15_en |
 800759a:	4313      	orrs	r3, r2
 800759c:	b2db      	uxtb	r3, r3
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
 800759e:	2b01      	cmp	r3, #1
 80075a0:	d163      	bne.n	800766a <lsm6dso_gy_data_rate_set+0x1ae>
    {
      ret =  lsm6dso_fsm_data_rate_get(ctx, &fsm_odr);
 80075a2:	f107 030b 	add.w	r3, r7, #11
 80075a6:	4619      	mov	r1, r3
 80075a8:	6878      	ldr	r0, [r7, #4]
 80075aa:	f000 fa8b 	bl	8007ac4 <lsm6dso_fsm_data_rate_get>
 80075ae:	6138      	str	r0, [r7, #16]

      if (ret == 0)
 80075b0:	693b      	ldr	r3, [r7, #16]
 80075b2:	2b00      	cmp	r3, #0
 80075b4:	d159      	bne.n	800766a <lsm6dso_gy_data_rate_set+0x1ae>
      {
        switch (fsm_odr)
 80075b6:	7afb      	ldrb	r3, [r7, #11]
 80075b8:	2b03      	cmp	r3, #3
 80075ba:	d853      	bhi.n	8007664 <lsm6dso_gy_data_rate_set+0x1a8>
 80075bc:	a201      	add	r2, pc, #4	; (adr r2, 80075c4 <lsm6dso_gy_data_rate_set+0x108>)
 80075be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80075c2:	bf00      	nop
 80075c4:	080075d5 	.word	0x080075d5
 80075c8:	080075e7 	.word	0x080075e7
 80075cc:	08007605 	.word	0x08007605
 80075d0:	0800762f 	.word	0x0800762f
        {
          case LSM6DSO_ODR_FSM_12Hz5:
            if (val == LSM6DSO_GY_ODR_OFF)
 80075d4:	78fb      	ldrb	r3, [r7, #3]
 80075d6:	2b00      	cmp	r3, #0
 80075d8:	d102      	bne.n	80075e0 <lsm6dso_gy_data_rate_set+0x124>
            {
              odr_gy = LSM6DSO_GY_ODR_12Hz5;
 80075da:	2301      	movs	r3, #1
 80075dc:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_gy = val;
            }

            break;
 80075de:	e045      	b.n	800766c <lsm6dso_gy_data_rate_set+0x1b0>
              odr_gy = val;
 80075e0:	78fb      	ldrb	r3, [r7, #3]
 80075e2:	75fb      	strb	r3, [r7, #23]
            break;
 80075e4:	e042      	b.n	800766c <lsm6dso_gy_data_rate_set+0x1b0>

          case LSM6DSO_ODR_FSM_26Hz:
            if (val == LSM6DSO_GY_ODR_OFF)
 80075e6:	78fb      	ldrb	r3, [r7, #3]
 80075e8:	2b00      	cmp	r3, #0
 80075ea:	d102      	bne.n	80075f2 <lsm6dso_gy_data_rate_set+0x136>
            {
              odr_gy = LSM6DSO_GY_ODR_26Hz;
 80075ec:	2302      	movs	r3, #2
 80075ee:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_gy = val;
            }

            break;
 80075f0:	e03c      	b.n	800766c <lsm6dso_gy_data_rate_set+0x1b0>
            else if (val == LSM6DSO_GY_ODR_12Hz5)
 80075f2:	78fb      	ldrb	r3, [r7, #3]
 80075f4:	2b01      	cmp	r3, #1
 80075f6:	d102      	bne.n	80075fe <lsm6dso_gy_data_rate_set+0x142>
              odr_gy = LSM6DSO_GY_ODR_26Hz;
 80075f8:	2302      	movs	r3, #2
 80075fa:	75fb      	strb	r3, [r7, #23]
            break;
 80075fc:	e036      	b.n	800766c <lsm6dso_gy_data_rate_set+0x1b0>
              odr_gy = val;
 80075fe:	78fb      	ldrb	r3, [r7, #3]
 8007600:	75fb      	strb	r3, [r7, #23]
            break;
 8007602:	e033      	b.n	800766c <lsm6dso_gy_data_rate_set+0x1b0>

          case LSM6DSO_ODR_FSM_52Hz:
            if (val == LSM6DSO_GY_ODR_OFF)
 8007604:	78fb      	ldrb	r3, [r7, #3]
 8007606:	2b00      	cmp	r3, #0
 8007608:	d102      	bne.n	8007610 <lsm6dso_gy_data_rate_set+0x154>
            {
              odr_gy = LSM6DSO_GY_ODR_52Hz;
 800760a:	2303      	movs	r3, #3
 800760c:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_gy = val;
            }

            break;
 800760e:	e02d      	b.n	800766c <lsm6dso_gy_data_rate_set+0x1b0>
            else if (val == LSM6DSO_GY_ODR_12Hz5)
 8007610:	78fb      	ldrb	r3, [r7, #3]
 8007612:	2b01      	cmp	r3, #1
 8007614:	d102      	bne.n	800761c <lsm6dso_gy_data_rate_set+0x160>
              odr_gy = LSM6DSO_GY_ODR_52Hz;
 8007616:	2303      	movs	r3, #3
 8007618:	75fb      	strb	r3, [r7, #23]
            break;
 800761a:	e027      	b.n	800766c <lsm6dso_gy_data_rate_set+0x1b0>
            else if (val == LSM6DSO_GY_ODR_26Hz)
 800761c:	78fb      	ldrb	r3, [r7, #3]
 800761e:	2b02      	cmp	r3, #2
 8007620:	d102      	bne.n	8007628 <lsm6dso_gy_data_rate_set+0x16c>
              odr_gy = LSM6DSO_GY_ODR_52Hz;
 8007622:	2303      	movs	r3, #3
 8007624:	75fb      	strb	r3, [r7, #23]
            break;
 8007626:	e021      	b.n	800766c <lsm6dso_gy_data_rate_set+0x1b0>
              odr_gy = val;
 8007628:	78fb      	ldrb	r3, [r7, #3]
 800762a:	75fb      	strb	r3, [r7, #23]
            break;
 800762c:	e01e      	b.n	800766c <lsm6dso_gy_data_rate_set+0x1b0>

          case LSM6DSO_ODR_FSM_104Hz:
            if (val == LSM6DSO_GY_ODR_OFF)
 800762e:	78fb      	ldrb	r3, [r7, #3]
 8007630:	2b00      	cmp	r3, #0
 8007632:	d102      	bne.n	800763a <lsm6dso_gy_data_rate_set+0x17e>
            {
              odr_gy = LSM6DSO_GY_ODR_104Hz;
 8007634:	2304      	movs	r3, #4
 8007636:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_gy = val;
            }

            break;
 8007638:	e018      	b.n	800766c <lsm6dso_gy_data_rate_set+0x1b0>
            else if (val == LSM6DSO_GY_ODR_12Hz5)
 800763a:	78fb      	ldrb	r3, [r7, #3]
 800763c:	2b01      	cmp	r3, #1
 800763e:	d102      	bne.n	8007646 <lsm6dso_gy_data_rate_set+0x18a>
              odr_gy = LSM6DSO_GY_ODR_104Hz;
 8007640:	2304      	movs	r3, #4
 8007642:	75fb      	strb	r3, [r7, #23]
            break;
 8007644:	e012      	b.n	800766c <lsm6dso_gy_data_rate_set+0x1b0>
            else if (val == LSM6DSO_GY_ODR_26Hz)
 8007646:	78fb      	ldrb	r3, [r7, #3]
 8007648:	2b02      	cmp	r3, #2
 800764a:	d102      	bne.n	8007652 <lsm6dso_gy_data_rate_set+0x196>
              odr_gy = LSM6DSO_GY_ODR_104Hz;
 800764c:	2304      	movs	r3, #4
 800764e:	75fb      	strb	r3, [r7, #23]
            break;
 8007650:	e00c      	b.n	800766c <lsm6dso_gy_data_rate_set+0x1b0>
            else if (val == LSM6DSO_GY_ODR_52Hz)
 8007652:	78fb      	ldrb	r3, [r7, #3]
 8007654:	2b03      	cmp	r3, #3
 8007656:	d102      	bne.n	800765e <lsm6dso_gy_data_rate_set+0x1a2>
              odr_gy = LSM6DSO_GY_ODR_104Hz;
 8007658:	2304      	movs	r3, #4
 800765a:	75fb      	strb	r3, [r7, #23]
            break;
 800765c:	e006      	b.n	800766c <lsm6dso_gy_data_rate_set+0x1b0>
              odr_gy = val;
 800765e:	78fb      	ldrb	r3, [r7, #3]
 8007660:	75fb      	strb	r3, [r7, #23]
            break;
 8007662:	e003      	b.n	800766c <lsm6dso_gy_data_rate_set+0x1b0>

          default:
            odr_gy = val;
 8007664:	78fb      	ldrb	r3, [r7, #3]
 8007666:	75fb      	strb	r3, [r7, #23]
            break;
 8007668:	e000      	b.n	800766c <lsm6dso_gy_data_rate_set+0x1b0>
        }
      }
 800766a:	bf00      	nop
    }
  }

  if (ret == 0)
 800766c:	693b      	ldr	r3, [r7, #16]
 800766e:	2b00      	cmp	r3, #0
 8007670:	d107      	bne.n	8007682 <lsm6dso_gy_data_rate_set+0x1c6>
  {
    ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL2_G, (uint8_t *)&reg, 1);
 8007672:	f107 0208 	add.w	r2, r7, #8
 8007676:	2301      	movs	r3, #1
 8007678:	2111      	movs	r1, #17
 800767a:	6878      	ldr	r0, [r7, #4]
 800767c:	f7ff fcc4 	bl	8007008 <lsm6dso_read_reg>
 8007680:	6138      	str	r0, [r7, #16]
  }

  if (ret == 0)
 8007682:	693b      	ldr	r3, [r7, #16]
 8007684:	2b00      	cmp	r3, #0
 8007686:	d10f      	bne.n	80076a8 <lsm6dso_gy_data_rate_set+0x1ec>
  {
    reg.odr_g = (uint8_t) odr_gy;
 8007688:	7dfb      	ldrb	r3, [r7, #23]
 800768a:	f003 030f 	and.w	r3, r3, #15
 800768e:	b2da      	uxtb	r2, r3
 8007690:	7a3b      	ldrb	r3, [r7, #8]
 8007692:	f362 1307 	bfi	r3, r2, #4, #4
 8007696:	723b      	strb	r3, [r7, #8]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL2_G, (uint8_t *)&reg, 1);
 8007698:	f107 0208 	add.w	r2, r7, #8
 800769c:	2301      	movs	r3, #1
 800769e:	2111      	movs	r1, #17
 80076a0:	6878      	ldr	r0, [r7, #4]
 80076a2:	f7ff fcc9 	bl	8007038 <lsm6dso_write_reg>
 80076a6:	6138      	str	r0, [r7, #16]
  }

  return ret;
 80076a8:	693b      	ldr	r3, [r7, #16]
}
 80076aa:	4618      	mov	r0, r3
 80076ac:	3718      	adds	r7, #24
 80076ae:	46bd      	mov	sp, r7
 80076b0:	bd80      	pop	{r7, pc}
 80076b2:	bf00      	nop

080076b4 <lsm6dso_gy_data_rate_get>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_gy_data_rate_get(stmdev_ctx_t *ctx,
                                 lsm6dso_odr_g_t *val)
{
 80076b4:	b580      	push	{r7, lr}
 80076b6:	b084      	sub	sp, #16
 80076b8:	af00      	add	r7, sp, #0
 80076ba:	6078      	str	r0, [r7, #4]
 80076bc:	6039      	str	r1, [r7, #0]
  lsm6dso_ctrl2_g_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL2_G, (uint8_t *)&reg, 1);
 80076be:	f107 0208 	add.w	r2, r7, #8
 80076c2:	2301      	movs	r3, #1
 80076c4:	2111      	movs	r1, #17
 80076c6:	6878      	ldr	r0, [r7, #4]
 80076c8:	f7ff fc9e 	bl	8007008 <lsm6dso_read_reg>
 80076cc:	60f8      	str	r0, [r7, #12]

  switch (reg.odr_g)
 80076ce:	7a3b      	ldrb	r3, [r7, #8]
 80076d0:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80076d4:	b2db      	uxtb	r3, r3
 80076d6:	2b0a      	cmp	r3, #10
 80076d8:	d844      	bhi.n	8007764 <lsm6dso_gy_data_rate_get+0xb0>
 80076da:	a201      	add	r2, pc, #4	; (adr r2, 80076e0 <lsm6dso_gy_data_rate_get+0x2c>)
 80076dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80076e0:	0800770d 	.word	0x0800770d
 80076e4:	08007715 	.word	0x08007715
 80076e8:	0800771d 	.word	0x0800771d
 80076ec:	08007725 	.word	0x08007725
 80076f0:	0800772d 	.word	0x0800772d
 80076f4:	08007735 	.word	0x08007735
 80076f8:	0800773d 	.word	0x0800773d
 80076fc:	08007745 	.word	0x08007745
 8007700:	0800774d 	.word	0x0800774d
 8007704:	08007755 	.word	0x08007755
 8007708:	0800775d 	.word	0x0800775d
  {
    case LSM6DSO_GY_ODR_OFF:
      *val = LSM6DSO_GY_ODR_OFF;
 800770c:	683b      	ldr	r3, [r7, #0]
 800770e:	2200      	movs	r2, #0
 8007710:	701a      	strb	r2, [r3, #0]
      break;
 8007712:	e02b      	b.n	800776c <lsm6dso_gy_data_rate_get+0xb8>

    case LSM6DSO_GY_ODR_12Hz5:
      *val = LSM6DSO_GY_ODR_12Hz5;
 8007714:	683b      	ldr	r3, [r7, #0]
 8007716:	2201      	movs	r2, #1
 8007718:	701a      	strb	r2, [r3, #0]
      break;
 800771a:	e027      	b.n	800776c <lsm6dso_gy_data_rate_get+0xb8>

    case LSM6DSO_GY_ODR_26Hz:
      *val = LSM6DSO_GY_ODR_26Hz;
 800771c:	683b      	ldr	r3, [r7, #0]
 800771e:	2202      	movs	r2, #2
 8007720:	701a      	strb	r2, [r3, #0]
      break;
 8007722:	e023      	b.n	800776c <lsm6dso_gy_data_rate_get+0xb8>

    case LSM6DSO_GY_ODR_52Hz:
      *val = LSM6DSO_GY_ODR_52Hz;
 8007724:	683b      	ldr	r3, [r7, #0]
 8007726:	2203      	movs	r2, #3
 8007728:	701a      	strb	r2, [r3, #0]
      break;
 800772a:	e01f      	b.n	800776c <lsm6dso_gy_data_rate_get+0xb8>

    case LSM6DSO_GY_ODR_104Hz:
      *val = LSM6DSO_GY_ODR_104Hz;
 800772c:	683b      	ldr	r3, [r7, #0]
 800772e:	2204      	movs	r2, #4
 8007730:	701a      	strb	r2, [r3, #0]
      break;
 8007732:	e01b      	b.n	800776c <lsm6dso_gy_data_rate_get+0xb8>

    case LSM6DSO_GY_ODR_208Hz:
      *val = LSM6DSO_GY_ODR_208Hz;
 8007734:	683b      	ldr	r3, [r7, #0]
 8007736:	2205      	movs	r2, #5
 8007738:	701a      	strb	r2, [r3, #0]
      break;
 800773a:	e017      	b.n	800776c <lsm6dso_gy_data_rate_get+0xb8>

    case LSM6DSO_GY_ODR_417Hz:
      *val = LSM6DSO_GY_ODR_417Hz;
 800773c:	683b      	ldr	r3, [r7, #0]
 800773e:	2206      	movs	r2, #6
 8007740:	701a      	strb	r2, [r3, #0]
      break;
 8007742:	e013      	b.n	800776c <lsm6dso_gy_data_rate_get+0xb8>

    case LSM6DSO_GY_ODR_833Hz:
      *val = LSM6DSO_GY_ODR_833Hz;
 8007744:	683b      	ldr	r3, [r7, #0]
 8007746:	2207      	movs	r2, #7
 8007748:	701a      	strb	r2, [r3, #0]
      break;
 800774a:	e00f      	b.n	800776c <lsm6dso_gy_data_rate_get+0xb8>

    case LSM6DSO_GY_ODR_1667Hz:
      *val = LSM6DSO_GY_ODR_1667Hz;
 800774c:	683b      	ldr	r3, [r7, #0]
 800774e:	2208      	movs	r2, #8
 8007750:	701a      	strb	r2, [r3, #0]
      break;
 8007752:	e00b      	b.n	800776c <lsm6dso_gy_data_rate_get+0xb8>

    case LSM6DSO_GY_ODR_3333Hz:
      *val = LSM6DSO_GY_ODR_3333Hz;
 8007754:	683b      	ldr	r3, [r7, #0]
 8007756:	2209      	movs	r2, #9
 8007758:	701a      	strb	r2, [r3, #0]
      break;
 800775a:	e007      	b.n	800776c <lsm6dso_gy_data_rate_get+0xb8>

    case LSM6DSO_GY_ODR_6667Hz:
      *val = LSM6DSO_GY_ODR_6667Hz;
 800775c:	683b      	ldr	r3, [r7, #0]
 800775e:	220a      	movs	r2, #10
 8007760:	701a      	strb	r2, [r3, #0]
      break;
 8007762:	e003      	b.n	800776c <lsm6dso_gy_data_rate_get+0xb8>

    default:
      *val = LSM6DSO_GY_ODR_OFF;
 8007764:	683b      	ldr	r3, [r7, #0]
 8007766:	2200      	movs	r2, #0
 8007768:	701a      	strb	r2, [r3, #0]
      break;
 800776a:	bf00      	nop
  }

  return ret;
 800776c:	68fb      	ldr	r3, [r7, #12]
}
 800776e:	4618      	mov	r0, r3
 8007770:	3710      	adds	r7, #16
 8007772:	46bd      	mov	sp, r7
 8007774:	bd80      	pop	{r7, pc}
 8007776:	bf00      	nop

08007778 <lsm6dso_block_data_update_set>:
  * @param  val      change the values of bdu in reg CTRL3_C
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8007778:	b580      	push	{r7, lr}
 800777a:	b084      	sub	sp, #16
 800777c:	af00      	add	r7, sp, #0
 800777e:	6078      	str	r0, [r7, #4]
 8007780:	460b      	mov	r3, r1
 8007782:	70fb      	strb	r3, [r7, #3]
  lsm6dso_ctrl3_c_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL3_C, (uint8_t *)&reg, 1);
 8007784:	f107 0208 	add.w	r2, r7, #8
 8007788:	2301      	movs	r3, #1
 800778a:	2112      	movs	r1, #18
 800778c:	6878      	ldr	r0, [r7, #4]
 800778e:	f7ff fc3b 	bl	8007008 <lsm6dso_read_reg>
 8007792:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8007794:	68fb      	ldr	r3, [r7, #12]
 8007796:	2b00      	cmp	r3, #0
 8007798:	d10f      	bne.n	80077ba <lsm6dso_block_data_update_set+0x42>
  {
    reg.bdu = val;
 800779a:	78fb      	ldrb	r3, [r7, #3]
 800779c:	f003 0301 	and.w	r3, r3, #1
 80077a0:	b2da      	uxtb	r2, r3
 80077a2:	7a3b      	ldrb	r3, [r7, #8]
 80077a4:	f362 1386 	bfi	r3, r2, #6, #1
 80077a8:	723b      	strb	r3, [r7, #8]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL3_C, (uint8_t *)&reg, 1);
 80077aa:	f107 0208 	add.w	r2, r7, #8
 80077ae:	2301      	movs	r3, #1
 80077b0:	2112      	movs	r1, #18
 80077b2:	6878      	ldr	r0, [r7, #4]
 80077b4:	f7ff fc40 	bl	8007038 <lsm6dso_write_reg>
 80077b8:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80077ba:	68fb      	ldr	r3, [r7, #12]
}
 80077bc:	4618      	mov	r0, r3
 80077be:	3710      	adds	r7, #16
 80077c0:	46bd      	mov	sp, r7
 80077c2:	bd80      	pop	{r7, pc}

080077c4 <lsm6dso_angular_rate_raw_get>:
  * @param  buff     buffer that stores data read
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_angular_rate_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 80077c4:	b580      	push	{r7, lr}
 80077c6:	b086      	sub	sp, #24
 80077c8:	af00      	add	r7, sp, #0
 80077ca:	6078      	str	r0, [r7, #4]
 80077cc:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_OUTX_L_G, buff, 6);
 80077ce:	f107 020c 	add.w	r2, r7, #12
 80077d2:	2306      	movs	r3, #6
 80077d4:	2122      	movs	r1, #34	; 0x22
 80077d6:	6878      	ldr	r0, [r7, #4]
 80077d8:	f7ff fc16 	bl	8007008 <lsm6dso_read_reg>
 80077dc:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 80077de:	7b7b      	ldrb	r3, [r7, #13]
 80077e0:	b21a      	sxth	r2, r3
 80077e2:	683b      	ldr	r3, [r7, #0]
 80077e4:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 80077e6:	683b      	ldr	r3, [r7, #0]
 80077e8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80077ec:	b29b      	uxth	r3, r3
 80077ee:	021b      	lsls	r3, r3, #8
 80077f0:	b29a      	uxth	r2, r3
 80077f2:	7b3b      	ldrb	r3, [r7, #12]
 80077f4:	b29b      	uxth	r3, r3
 80077f6:	4413      	add	r3, r2
 80077f8:	b29b      	uxth	r3, r3
 80077fa:	b21a      	sxth	r2, r3
 80077fc:	683b      	ldr	r3, [r7, #0]
 80077fe:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 8007800:	7bfa      	ldrb	r2, [r7, #15]
 8007802:	683b      	ldr	r3, [r7, #0]
 8007804:	3302      	adds	r3, #2
 8007806:	b212      	sxth	r2, r2
 8007808:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 800780a:	683b      	ldr	r3, [r7, #0]
 800780c:	3302      	adds	r3, #2
 800780e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007812:	b29b      	uxth	r3, r3
 8007814:	021b      	lsls	r3, r3, #8
 8007816:	b29a      	uxth	r2, r3
 8007818:	7bbb      	ldrb	r3, [r7, #14]
 800781a:	b29b      	uxth	r3, r3
 800781c:	4413      	add	r3, r2
 800781e:	b29a      	uxth	r2, r3
 8007820:	683b      	ldr	r3, [r7, #0]
 8007822:	3302      	adds	r3, #2
 8007824:	b212      	sxth	r2, r2
 8007826:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 8007828:	7c7a      	ldrb	r2, [r7, #17]
 800782a:	683b      	ldr	r3, [r7, #0]
 800782c:	3304      	adds	r3, #4
 800782e:	b212      	sxth	r2, r2
 8007830:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 8007832:	683b      	ldr	r3, [r7, #0]
 8007834:	3304      	adds	r3, #4
 8007836:	f9b3 3000 	ldrsh.w	r3, [r3]
 800783a:	b29b      	uxth	r3, r3
 800783c:	021b      	lsls	r3, r3, #8
 800783e:	b29a      	uxth	r2, r3
 8007840:	7c3b      	ldrb	r3, [r7, #16]
 8007842:	b29b      	uxth	r3, r3
 8007844:	4413      	add	r3, r2
 8007846:	b29a      	uxth	r2, r3
 8007848:	683b      	ldr	r3, [r7, #0]
 800784a:	3304      	adds	r3, #4
 800784c:	b212      	sxth	r2, r2
 800784e:	801a      	strh	r2, [r3, #0]

  return ret;
 8007850:	697b      	ldr	r3, [r7, #20]
}
 8007852:	4618      	mov	r0, r3
 8007854:	3718      	adds	r7, #24
 8007856:	46bd      	mov	sp, r7
 8007858:	bd80      	pop	{r7, pc}

0800785a <lsm6dso_acceleration_raw_get>:
  * @param  buff     buffer that stores data read
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_acceleration_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 800785a:	b580      	push	{r7, lr}
 800785c:	b086      	sub	sp, #24
 800785e:	af00      	add	r7, sp, #0
 8007860:	6078      	str	r0, [r7, #4]
 8007862:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_OUTX_L_A, buff, 6);
 8007864:	f107 020c 	add.w	r2, r7, #12
 8007868:	2306      	movs	r3, #6
 800786a:	2128      	movs	r1, #40	; 0x28
 800786c:	6878      	ldr	r0, [r7, #4]
 800786e:	f7ff fbcb 	bl	8007008 <lsm6dso_read_reg>
 8007872:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 8007874:	7b7b      	ldrb	r3, [r7, #13]
 8007876:	b21a      	sxth	r2, r3
 8007878:	683b      	ldr	r3, [r7, #0]
 800787a:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 800787c:	683b      	ldr	r3, [r7, #0]
 800787e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007882:	b29b      	uxth	r3, r3
 8007884:	021b      	lsls	r3, r3, #8
 8007886:	b29a      	uxth	r2, r3
 8007888:	7b3b      	ldrb	r3, [r7, #12]
 800788a:	b29b      	uxth	r3, r3
 800788c:	4413      	add	r3, r2
 800788e:	b29b      	uxth	r3, r3
 8007890:	b21a      	sxth	r2, r3
 8007892:	683b      	ldr	r3, [r7, #0]
 8007894:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 8007896:	7bfa      	ldrb	r2, [r7, #15]
 8007898:	683b      	ldr	r3, [r7, #0]
 800789a:	3302      	adds	r3, #2
 800789c:	b212      	sxth	r2, r2
 800789e:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 80078a0:	683b      	ldr	r3, [r7, #0]
 80078a2:	3302      	adds	r3, #2
 80078a4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80078a8:	b29b      	uxth	r3, r3
 80078aa:	021b      	lsls	r3, r3, #8
 80078ac:	b29a      	uxth	r2, r3
 80078ae:	7bbb      	ldrb	r3, [r7, #14]
 80078b0:	b29b      	uxth	r3, r3
 80078b2:	4413      	add	r3, r2
 80078b4:	b29a      	uxth	r2, r3
 80078b6:	683b      	ldr	r3, [r7, #0]
 80078b8:	3302      	adds	r3, #2
 80078ba:	b212      	sxth	r2, r2
 80078bc:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 80078be:	7c7a      	ldrb	r2, [r7, #17]
 80078c0:	683b      	ldr	r3, [r7, #0]
 80078c2:	3304      	adds	r3, #4
 80078c4:	b212      	sxth	r2, r2
 80078c6:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 80078c8:	683b      	ldr	r3, [r7, #0]
 80078ca:	3304      	adds	r3, #4
 80078cc:	f9b3 3000 	ldrsh.w	r3, [r3]
 80078d0:	b29b      	uxth	r3, r3
 80078d2:	021b      	lsls	r3, r3, #8
 80078d4:	b29a      	uxth	r2, r3
 80078d6:	7c3b      	ldrb	r3, [r7, #16]
 80078d8:	b29b      	uxth	r3, r3
 80078da:	4413      	add	r3, r2
 80078dc:	b29a      	uxth	r2, r3
 80078de:	683b      	ldr	r3, [r7, #0]
 80078e0:	3304      	adds	r3, #4
 80078e2:	b212      	sxth	r2, r2
 80078e4:	801a      	strh	r2, [r3, #0]

  return ret;
 80078e6:	697b      	ldr	r3, [r7, #20]
}
 80078e8:	4618      	mov	r0, r3
 80078ea:	3718      	adds	r7, #24
 80078ec:	46bd      	mov	sp, r7
 80078ee:	bd80      	pop	{r7, pc}

080078f0 <lsm6dso_mem_bank_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_mem_bank_set(stmdev_ctx_t *ctx,
                             lsm6dso_reg_access_t val)
{
 80078f0:	b580      	push	{r7, lr}
 80078f2:	b084      	sub	sp, #16
 80078f4:	af00      	add	r7, sp, #0
 80078f6:	6078      	str	r0, [r7, #4]
 80078f8:	460b      	mov	r3, r1
 80078fa:	70fb      	strb	r3, [r7, #3]
  lsm6dso_func_cfg_access_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_FUNC_CFG_ACCESS, (uint8_t *)&reg, 1);
 80078fc:	f107 0208 	add.w	r2, r7, #8
 8007900:	2301      	movs	r3, #1
 8007902:	2101      	movs	r1, #1
 8007904:	6878      	ldr	r0, [r7, #4]
 8007906:	f7ff fb7f 	bl	8007008 <lsm6dso_read_reg>
 800790a:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 800790c:	68fb      	ldr	r3, [r7, #12]
 800790e:	2b00      	cmp	r3, #0
 8007910:	d10f      	bne.n	8007932 <lsm6dso_mem_bank_set+0x42>
  {
    reg.reg_access = (uint8_t)val;
 8007912:	78fb      	ldrb	r3, [r7, #3]
 8007914:	f003 0303 	and.w	r3, r3, #3
 8007918:	b2da      	uxtb	r2, r3
 800791a:	7a3b      	ldrb	r3, [r7, #8]
 800791c:	f362 1387 	bfi	r3, r2, #6, #2
 8007920:	723b      	strb	r3, [r7, #8]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_FUNC_CFG_ACCESS, (uint8_t *)&reg, 1);
 8007922:	f107 0208 	add.w	r2, r7, #8
 8007926:	2301      	movs	r3, #1
 8007928:	2101      	movs	r1, #1
 800792a:	6878      	ldr	r0, [r7, #4]
 800792c:	f7ff fb84 	bl	8007038 <lsm6dso_write_reg>
 8007930:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8007932:	68fb      	ldr	r3, [r7, #12]
}
 8007934:	4618      	mov	r0, r3
 8007936:	3710      	adds	r7, #16
 8007938:	46bd      	mov	sp, r7
 800793a:	bd80      	pop	{r7, pc}

0800793c <lsm6dso_device_id_get>:
  * @param  buff     buffer that stores data read
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 800793c:	b580      	push	{r7, lr}
 800793e:	b084      	sub	sp, #16
 8007940:	af00      	add	r7, sp, #0
 8007942:	6078      	str	r0, [r7, #4]
 8007944:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_WHO_AM_I, buff, 1);
 8007946:	2301      	movs	r3, #1
 8007948:	683a      	ldr	r2, [r7, #0]
 800794a:	210f      	movs	r1, #15
 800794c:	6878      	ldr	r0, [r7, #4]
 800794e:	f7ff fb5b 	bl	8007008 <lsm6dso_read_reg>
 8007952:	60f8      	str	r0, [r7, #12]

  return ret;
 8007954:	68fb      	ldr	r3, [r7, #12]
}
 8007956:	4618      	mov	r0, r3
 8007958:	3710      	adds	r7, #16
 800795a:	46bd      	mov	sp, r7
 800795c:	bd80      	pop	{r7, pc}

0800795e <lsm6dso_auto_increment_set>:
  * @param  val      change the values of if_inc in reg CTRL3_C
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_auto_increment_set(stmdev_ctx_t *ctx, uint8_t val)
{
 800795e:	b580      	push	{r7, lr}
 8007960:	b084      	sub	sp, #16
 8007962:	af00      	add	r7, sp, #0
 8007964:	6078      	str	r0, [r7, #4]
 8007966:	460b      	mov	r3, r1
 8007968:	70fb      	strb	r3, [r7, #3]
  lsm6dso_ctrl3_c_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL3_C, (uint8_t *)&reg, 1);
 800796a:	f107 0208 	add.w	r2, r7, #8
 800796e:	2301      	movs	r3, #1
 8007970:	2112      	movs	r1, #18
 8007972:	6878      	ldr	r0, [r7, #4]
 8007974:	f7ff fb48 	bl	8007008 <lsm6dso_read_reg>
 8007978:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 800797a:	68fb      	ldr	r3, [r7, #12]
 800797c:	2b00      	cmp	r3, #0
 800797e:	d10f      	bne.n	80079a0 <lsm6dso_auto_increment_set+0x42>
  {
    reg.if_inc = val;
 8007980:	78fb      	ldrb	r3, [r7, #3]
 8007982:	f003 0301 	and.w	r3, r3, #1
 8007986:	b2da      	uxtb	r2, r3
 8007988:	7a3b      	ldrb	r3, [r7, #8]
 800798a:	f362 0382 	bfi	r3, r2, #2, #1
 800798e:	723b      	strb	r3, [r7, #8]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL3_C, (uint8_t *)&reg, 1);
 8007990:	f107 0208 	add.w	r2, r7, #8
 8007994:	2301      	movs	r3, #1
 8007996:	2112      	movs	r1, #18
 8007998:	6878      	ldr	r0, [r7, #4]
 800799a:	f7ff fb4d 	bl	8007038 <lsm6dso_write_reg>
 800799e:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80079a0:	68fb      	ldr	r3, [r7, #12]
}
 80079a2:	4618      	mov	r0, r3
 80079a4:	3710      	adds	r7, #16
 80079a6:	46bd      	mov	sp, r7
 80079a8:	bd80      	pop	{r7, pc}

080079aa <lsm6dso_i3c_disable_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_i3c_disable_set(stmdev_ctx_t *ctx,
                                lsm6dso_i3c_disable_t val)
{
 80079aa:	b580      	push	{r7, lr}
 80079ac:	b086      	sub	sp, #24
 80079ae:	af00      	add	r7, sp, #0
 80079b0:	6078      	str	r0, [r7, #4]
 80079b2:	460b      	mov	r3, r1
 80079b4:	70fb      	strb	r3, [r7, #3]
  lsm6dso_i3c_bus_avb_t i3c_bus_avb;
  lsm6dso_ctrl9_xl_t ctrl9_xl;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL9_XL, (uint8_t *)&ctrl9_xl, 1);
 80079b6:	f107 020c 	add.w	r2, r7, #12
 80079ba:	2301      	movs	r3, #1
 80079bc:	2118      	movs	r1, #24
 80079be:	6878      	ldr	r0, [r7, #4]
 80079c0:	f7ff fb22 	bl	8007008 <lsm6dso_read_reg>
 80079c4:	6178      	str	r0, [r7, #20]

  if (ret == 0)
 80079c6:	697b      	ldr	r3, [r7, #20]
 80079c8:	2b00      	cmp	r3, #0
 80079ca:	d111      	bne.n	80079f0 <lsm6dso_i3c_disable_set+0x46>
  {
    ctrl9_xl.i3c_disable = ((uint8_t)val & 0x80U) >> 7;
 80079cc:	78fb      	ldrb	r3, [r7, #3]
 80079ce:	09db      	lsrs	r3, r3, #7
 80079d0:	b2db      	uxtb	r3, r3
 80079d2:	f003 0301 	and.w	r3, r3, #1
 80079d6:	b2da      	uxtb	r2, r3
 80079d8:	7b3b      	ldrb	r3, [r7, #12]
 80079da:	f362 0341 	bfi	r3, r2, #1, #1
 80079de:	733b      	strb	r3, [r7, #12]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL9_XL, (uint8_t *)&ctrl9_xl, 1);
 80079e0:	f107 020c 	add.w	r2, r7, #12
 80079e4:	2301      	movs	r3, #1
 80079e6:	2118      	movs	r1, #24
 80079e8:	6878      	ldr	r0, [r7, #4]
 80079ea:	f7ff fb25 	bl	8007038 <lsm6dso_write_reg>
 80079ee:	6178      	str	r0, [r7, #20]
  }

  if (ret == 0)
 80079f0:	697b      	ldr	r3, [r7, #20]
 80079f2:	2b00      	cmp	r3, #0
 80079f4:	d107      	bne.n	8007a06 <lsm6dso_i3c_disable_set+0x5c>
  {
    ret = lsm6dso_read_reg(ctx, LSM6DSO_I3C_BUS_AVB,
 80079f6:	f107 0210 	add.w	r2, r7, #16
 80079fa:	2301      	movs	r3, #1
 80079fc:	2162      	movs	r1, #98	; 0x62
 80079fe:	6878      	ldr	r0, [r7, #4]
 8007a00:	f7ff fb02 	bl	8007008 <lsm6dso_read_reg>
 8007a04:	6178      	str	r0, [r7, #20]
                           (uint8_t *)&i3c_bus_avb, 1);
  }

  if (ret == 0)
 8007a06:	697b      	ldr	r3, [r7, #20]
 8007a08:	2b00      	cmp	r3, #0
 8007a0a:	d10f      	bne.n	8007a2c <lsm6dso_i3c_disable_set+0x82>
  {
    i3c_bus_avb.i3c_bus_avb_sel = (uint8_t)val & 0x03U;
 8007a0c:	78fb      	ldrb	r3, [r7, #3]
 8007a0e:	f003 0303 	and.w	r3, r3, #3
 8007a12:	b2da      	uxtb	r2, r3
 8007a14:	7c3b      	ldrb	r3, [r7, #16]
 8007a16:	f362 03c4 	bfi	r3, r2, #3, #2
 8007a1a:	743b      	strb	r3, [r7, #16]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_I3C_BUS_AVB,
 8007a1c:	f107 0210 	add.w	r2, r7, #16
 8007a20:	2301      	movs	r3, #1
 8007a22:	2162      	movs	r1, #98	; 0x62
 8007a24:	6878      	ldr	r0, [r7, #4]
 8007a26:	f7ff fb07 	bl	8007038 <lsm6dso_write_reg>
 8007a2a:	6178      	str	r0, [r7, #20]
                            (uint8_t *)&i3c_bus_avb, 1);
  }

  return ret;
 8007a2c:	697b      	ldr	r3, [r7, #20]
}
 8007a2e:	4618      	mov	r0, r3
 8007a30:	3718      	adds	r7, #24
 8007a32:	46bd      	mov	sp, r7
 8007a34:	bd80      	pop	{r7, pc}

08007a36 <lsm6dso_fifo_mode_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_fifo_mode_set(stmdev_ctx_t *ctx,
                              lsm6dso_fifo_mode_t val)
{
 8007a36:	b580      	push	{r7, lr}
 8007a38:	b084      	sub	sp, #16
 8007a3a:	af00      	add	r7, sp, #0
 8007a3c:	6078      	str	r0, [r7, #4]
 8007a3e:	460b      	mov	r3, r1
 8007a40:	70fb      	strb	r3, [r7, #3]
  lsm6dso_fifo_ctrl4_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_FIFO_CTRL4, (uint8_t *)&reg, 1);
 8007a42:	f107 0208 	add.w	r2, r7, #8
 8007a46:	2301      	movs	r3, #1
 8007a48:	210a      	movs	r1, #10
 8007a4a:	6878      	ldr	r0, [r7, #4]
 8007a4c:	f7ff fadc 	bl	8007008 <lsm6dso_read_reg>
 8007a50:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8007a52:	68fb      	ldr	r3, [r7, #12]
 8007a54:	2b00      	cmp	r3, #0
 8007a56:	d10f      	bne.n	8007a78 <lsm6dso_fifo_mode_set+0x42>
  {
    reg.fifo_mode = (uint8_t)val;
 8007a58:	78fb      	ldrb	r3, [r7, #3]
 8007a5a:	f003 0307 	and.w	r3, r3, #7
 8007a5e:	b2da      	uxtb	r2, r3
 8007a60:	7a3b      	ldrb	r3, [r7, #8]
 8007a62:	f362 0302 	bfi	r3, r2, #0, #3
 8007a66:	723b      	strb	r3, [r7, #8]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_FIFO_CTRL4, (uint8_t *)&reg, 1);
 8007a68:	f107 0208 	add.w	r2, r7, #8
 8007a6c:	2301      	movs	r3, #1
 8007a6e:	210a      	movs	r1, #10
 8007a70:	6878      	ldr	r0, [r7, #4]
 8007a72:	f7ff fae1 	bl	8007038 <lsm6dso_write_reg>
 8007a76:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8007a78:	68fb      	ldr	r3, [r7, #12]
}
 8007a7a:	4618      	mov	r0, r3
 8007a7c:	3710      	adds	r7, #16
 8007a7e:	46bd      	mov	sp, r7
 8007a80:	bd80      	pop	{r7, pc}

08007a82 <lsm6dso_fsm_enable_get>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_fsm_enable_get(stmdev_ctx_t *ctx,
                               lsm6dso_emb_fsm_enable_t *val)
{
 8007a82:	b580      	push	{r7, lr}
 8007a84:	b084      	sub	sp, #16
 8007a86:	af00      	add	r7, sp, #0
 8007a88:	6078      	str	r0, [r7, #4]
 8007a8a:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = lsm6dso_mem_bank_set(ctx, LSM6DSO_EMBEDDED_FUNC_BANK);
 8007a8c:	2102      	movs	r1, #2
 8007a8e:	6878      	ldr	r0, [r7, #4]
 8007a90:	f7ff ff2e 	bl	80078f0 <lsm6dso_mem_bank_set>
 8007a94:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8007a96:	68fb      	ldr	r3, [r7, #12]
 8007a98:	2b00      	cmp	r3, #0
 8007a9a:	d106      	bne.n	8007aaa <lsm6dso_fsm_enable_get+0x28>
  {
    ret = lsm6dso_read_reg(ctx, LSM6DSO_FSM_ENABLE_A, (uint8_t *) val, 2);
 8007a9c:	2302      	movs	r3, #2
 8007a9e:	683a      	ldr	r2, [r7, #0]
 8007aa0:	2146      	movs	r1, #70	; 0x46
 8007aa2:	6878      	ldr	r0, [r7, #4]
 8007aa4:	f7ff fab0 	bl	8007008 <lsm6dso_read_reg>
 8007aa8:	60f8      	str	r0, [r7, #12]
  }

  if (ret == 0)
 8007aaa:	68fb      	ldr	r3, [r7, #12]
 8007aac:	2b00      	cmp	r3, #0
 8007aae:	d104      	bne.n	8007aba <lsm6dso_fsm_enable_get+0x38>
  {
    ret = lsm6dso_mem_bank_set(ctx, LSM6DSO_USER_BANK);
 8007ab0:	2100      	movs	r1, #0
 8007ab2:	6878      	ldr	r0, [r7, #4]
 8007ab4:	f7ff ff1c 	bl	80078f0 <lsm6dso_mem_bank_set>
 8007ab8:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8007aba:	68fb      	ldr	r3, [r7, #12]
}
 8007abc:	4618      	mov	r0, r3
 8007abe:	3710      	adds	r7, #16
 8007ac0:	46bd      	mov	sp, r7
 8007ac2:	bd80      	pop	{r7, pc}

08007ac4 <lsm6dso_fsm_data_rate_get>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_fsm_data_rate_get(stmdev_ctx_t *ctx,
                                  lsm6dso_fsm_odr_t *val)
{
 8007ac4:	b580      	push	{r7, lr}
 8007ac6:	b084      	sub	sp, #16
 8007ac8:	af00      	add	r7, sp, #0
 8007aca:	6078      	str	r0, [r7, #4]
 8007acc:	6039      	str	r1, [r7, #0]
  lsm6dso_emb_func_odr_cfg_b_t reg;
  int32_t ret;

  ret = lsm6dso_mem_bank_set(ctx, LSM6DSO_EMBEDDED_FUNC_BANK);
 8007ace:	2102      	movs	r1, #2
 8007ad0:	6878      	ldr	r0, [r7, #4]
 8007ad2:	f7ff ff0d 	bl	80078f0 <lsm6dso_mem_bank_set>
 8007ad6:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8007ad8:	68fb      	ldr	r3, [r7, #12]
 8007ada:	2b00      	cmp	r3, #0
 8007adc:	d107      	bne.n	8007aee <lsm6dso_fsm_data_rate_get+0x2a>
  {
    ret = lsm6dso_read_reg(ctx, LSM6DSO_EMB_FUNC_ODR_CFG_B,
 8007ade:	f107 0208 	add.w	r2, r7, #8
 8007ae2:	2301      	movs	r3, #1
 8007ae4:	215f      	movs	r1, #95	; 0x5f
 8007ae6:	6878      	ldr	r0, [r7, #4]
 8007ae8:	f7ff fa8e 	bl	8007008 <lsm6dso_read_reg>
 8007aec:	60f8      	str	r0, [r7, #12]
                           (uint8_t *)&reg, 1);
  }

  if (ret == 0)
 8007aee:	68fb      	ldr	r3, [r7, #12]
 8007af0:	2b00      	cmp	r3, #0
 8007af2:	d12a      	bne.n	8007b4a <lsm6dso_fsm_data_rate_get+0x86>
  {
    switch (reg.fsm_odr)
 8007af4:	7a3b      	ldrb	r3, [r7, #8]
 8007af6:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8007afa:	b2db      	uxtb	r3, r3
 8007afc:	2b03      	cmp	r3, #3
 8007afe:	d81b      	bhi.n	8007b38 <lsm6dso_fsm_data_rate_get+0x74>
 8007b00:	a201      	add	r2, pc, #4	; (adr r2, 8007b08 <lsm6dso_fsm_data_rate_get+0x44>)
 8007b02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b06:	bf00      	nop
 8007b08:	08007b19 	.word	0x08007b19
 8007b0c:	08007b21 	.word	0x08007b21
 8007b10:	08007b29 	.word	0x08007b29
 8007b14:	08007b31 	.word	0x08007b31
    {
      case LSM6DSO_ODR_FSM_12Hz5:
        *val = LSM6DSO_ODR_FSM_12Hz5;
 8007b18:	683b      	ldr	r3, [r7, #0]
 8007b1a:	2200      	movs	r2, #0
 8007b1c:	701a      	strb	r2, [r3, #0]
        break;
 8007b1e:	e00f      	b.n	8007b40 <lsm6dso_fsm_data_rate_get+0x7c>

      case LSM6DSO_ODR_FSM_26Hz:
        *val = LSM6DSO_ODR_FSM_26Hz;
 8007b20:	683b      	ldr	r3, [r7, #0]
 8007b22:	2201      	movs	r2, #1
 8007b24:	701a      	strb	r2, [r3, #0]
        break;
 8007b26:	e00b      	b.n	8007b40 <lsm6dso_fsm_data_rate_get+0x7c>

      case LSM6DSO_ODR_FSM_52Hz:
        *val = LSM6DSO_ODR_FSM_52Hz;
 8007b28:	683b      	ldr	r3, [r7, #0]
 8007b2a:	2202      	movs	r2, #2
 8007b2c:	701a      	strb	r2, [r3, #0]
        break;
 8007b2e:	e007      	b.n	8007b40 <lsm6dso_fsm_data_rate_get+0x7c>

      case LSM6DSO_ODR_FSM_104Hz:
        *val = LSM6DSO_ODR_FSM_104Hz;
 8007b30:	683b      	ldr	r3, [r7, #0]
 8007b32:	2203      	movs	r2, #3
 8007b34:	701a      	strb	r2, [r3, #0]
        break;
 8007b36:	e003      	b.n	8007b40 <lsm6dso_fsm_data_rate_get+0x7c>

      default:
        *val = LSM6DSO_ODR_FSM_12Hz5;
 8007b38:	683b      	ldr	r3, [r7, #0]
 8007b3a:	2200      	movs	r2, #0
 8007b3c:	701a      	strb	r2, [r3, #0]
        break;
 8007b3e:	bf00      	nop
    }

    ret = lsm6dso_mem_bank_set(ctx, LSM6DSO_USER_BANK);
 8007b40:	2100      	movs	r1, #0
 8007b42:	6878      	ldr	r0, [r7, #4]
 8007b44:	f7ff fed4 	bl	80078f0 <lsm6dso_mem_bank_set>
 8007b48:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8007b4a:	68fb      	ldr	r3, [r7, #12]
}
 8007b4c:	4618      	mov	r0, r3
 8007b4e:	3710      	adds	r7, #16
 8007b50:	46bd      	mov	sp, r7
 8007b52:	bd80      	pop	{r7, pc}

08007b54 <IKS01A3_MOTION_SENSOR_Init>:
  *         - MOTION_ACCELERO for instance 1
  *         - MOTION_MAGNETO for instance 2
  * @retval BSP status
  */
int32_t IKS01A3_MOTION_SENSOR_Init(uint32_t Instance, uint32_t Functions)
{
 8007b54:	b580      	push	{r7, lr}
 8007b56:	b08e      	sub	sp, #56	; 0x38
 8007b58:	af00      	add	r7, sp, #0
 8007b5a:	6078      	str	r0, [r7, #4]
 8007b5c:	6039      	str	r1, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
 8007b5e:	2300      	movs	r3, #0
 8007b60:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t function = MOTION_GYRO;
 8007b62:	2301      	movs	r3, #1
 8007b64:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t i;
  uint32_t component_functions = 0;
 8007b66:	2300      	movs	r3, #0
 8007b68:	62bb      	str	r3, [r7, #40]	; 0x28
  IKS01A3_MOTION_SENSOR_Capabilities_t cap;

  switch (Instance)
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	2b02      	cmp	r3, #2
 8007b6e:	d06e      	beq.n	8007c4e <IKS01A3_MOTION_SENSOR_Init+0xfa>
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	2b02      	cmp	r3, #2
 8007b74:	f200 809d 	bhi.w	8007cb2 <IKS01A3_MOTION_SENSOR_Init+0x15e>
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	2b00      	cmp	r3, #0
 8007b7c:	d003      	beq.n	8007b86 <IKS01A3_MOTION_SENSOR_Init+0x32>
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	2b01      	cmp	r3, #1
 8007b82:	d032      	beq.n	8007bea <IKS01A3_MOTION_SENSOR_Init+0x96>
 8007b84:	e095      	b.n	8007cb2 <IKS01A3_MOTION_SENSOR_Init+0x15e>
  {
#if (USE_IKS01A3_MOTION_SENSOR_LSM6DSO_0 == 1)
    case IKS01A3_LSM6DSO_0:
      if (LSM6DSO_0_Probe(Functions) != BSP_ERROR_NONE)
 8007b86:	6838      	ldr	r0, [r7, #0]
 8007b88:	f000 f966 	bl	8007e58 <LSM6DSO_0_Probe>
 8007b8c:	4603      	mov	r3, r0
 8007b8e:	2b00      	cmp	r3, #0
 8007b90:	d002      	beq.n	8007b98 <IKS01A3_MOTION_SENSOR_Init+0x44>
      {
        return BSP_ERROR_NO_INIT;
 8007b92:	f04f 33ff 	mov.w	r3, #4294967295
 8007b96:	e0cc      	b.n	8007d32 <IKS01A3_MOTION_SENSOR_Init+0x1de>
      }
      if (MotionDrv[Instance]->GetCapabilities(MotionCompObj[Instance], (void *)&cap) != BSP_ERROR_NONE)
 8007b98:	4a68      	ldr	r2, [pc, #416]	; (8007d3c <IKS01A3_MOTION_SENSOR_Init+0x1e8>)
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007ba0:	68db      	ldr	r3, [r3, #12]
 8007ba2:	4967      	ldr	r1, [pc, #412]	; (8007d40 <IKS01A3_MOTION_SENSOR_Init+0x1ec>)
 8007ba4:	687a      	ldr	r2, [r7, #4]
 8007ba6:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8007baa:	f107 010c 	add.w	r1, r7, #12
 8007bae:	4610      	mov	r0, r2
 8007bb0:	4798      	blx	r3
 8007bb2:	4603      	mov	r3, r0
 8007bb4:	2b00      	cmp	r3, #0
 8007bb6:	d002      	beq.n	8007bbe <IKS01A3_MOTION_SENSOR_Init+0x6a>
      {
        return BSP_ERROR_UNKNOWN_COMPONENT;
 8007bb8:	f06f 0306 	mvn.w	r3, #6
 8007bbc:	e0b9      	b.n	8007d32 <IKS01A3_MOTION_SENSOR_Init+0x1de>
      }
      if (cap.Acc == 1U)
 8007bbe:	7b3b      	ldrb	r3, [r7, #12]
 8007bc0:	2b01      	cmp	r3, #1
 8007bc2:	d103      	bne.n	8007bcc <IKS01A3_MOTION_SENSOR_Init+0x78>
      {
        component_functions |= MOTION_ACCELERO;
 8007bc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007bc6:	f043 0302 	orr.w	r3, r3, #2
 8007bca:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      if (cap.Gyro == 1U)
 8007bcc:	7b7b      	ldrb	r3, [r7, #13]
 8007bce:	2b01      	cmp	r3, #1
 8007bd0:	d103      	bne.n	8007bda <IKS01A3_MOTION_SENSOR_Init+0x86>
      {
        component_functions |= MOTION_GYRO;
 8007bd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007bd4:	f043 0301 	orr.w	r3, r3, #1
 8007bd8:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      if (cap.Magneto == 1U)
 8007bda:	7bbb      	ldrb	r3, [r7, #14]
 8007bdc:	2b01      	cmp	r3, #1
 8007bde:	d16c      	bne.n	8007cba <IKS01A3_MOTION_SENSOR_Init+0x166>
      {
        component_functions |= MOTION_MAGNETO;
 8007be0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007be2:	f043 0304 	orr.w	r3, r3, #4
 8007be6:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      break;
 8007be8:	e067      	b.n	8007cba <IKS01A3_MOTION_SENSOR_Init+0x166>
#endif

#if (USE_IKS01A3_MOTION_SENSOR_LIS2DW12_0 == 1)
    case IKS01A3_LIS2DW12_0:
      if (LIS2DW12_0_Probe(Functions) != BSP_ERROR_NONE)
 8007bea:	6838      	ldr	r0, [r7, #0]
 8007bec:	f000 f9f4 	bl	8007fd8 <LIS2DW12_0_Probe>
 8007bf0:	4603      	mov	r3, r0
 8007bf2:	2b00      	cmp	r3, #0
 8007bf4:	d002      	beq.n	8007bfc <IKS01A3_MOTION_SENSOR_Init+0xa8>
      {
        return BSP_ERROR_NO_INIT;
 8007bf6:	f04f 33ff 	mov.w	r3, #4294967295
 8007bfa:	e09a      	b.n	8007d32 <IKS01A3_MOTION_SENSOR_Init+0x1de>
      }
      if (MotionDrv[Instance]->GetCapabilities(MotionCompObj[Instance], (void *)&cap) != BSP_ERROR_NONE)
 8007bfc:	4a4f      	ldr	r2, [pc, #316]	; (8007d3c <IKS01A3_MOTION_SENSOR_Init+0x1e8>)
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007c04:	68db      	ldr	r3, [r3, #12]
 8007c06:	494e      	ldr	r1, [pc, #312]	; (8007d40 <IKS01A3_MOTION_SENSOR_Init+0x1ec>)
 8007c08:	687a      	ldr	r2, [r7, #4]
 8007c0a:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8007c0e:	f107 010c 	add.w	r1, r7, #12
 8007c12:	4610      	mov	r0, r2
 8007c14:	4798      	blx	r3
 8007c16:	4603      	mov	r3, r0
 8007c18:	2b00      	cmp	r3, #0
 8007c1a:	d002      	beq.n	8007c22 <IKS01A3_MOTION_SENSOR_Init+0xce>
      {
        return BSP_ERROR_UNKNOWN_COMPONENT;
 8007c1c:	f06f 0306 	mvn.w	r3, #6
 8007c20:	e087      	b.n	8007d32 <IKS01A3_MOTION_SENSOR_Init+0x1de>
      }
      if (cap.Acc == 1U)
 8007c22:	7b3b      	ldrb	r3, [r7, #12]
 8007c24:	2b01      	cmp	r3, #1
 8007c26:	d103      	bne.n	8007c30 <IKS01A3_MOTION_SENSOR_Init+0xdc>
      {
        component_functions |= MOTION_ACCELERO;
 8007c28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c2a:	f043 0302 	orr.w	r3, r3, #2
 8007c2e:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      if (cap.Gyro == 1U)
 8007c30:	7b7b      	ldrb	r3, [r7, #13]
 8007c32:	2b01      	cmp	r3, #1
 8007c34:	d103      	bne.n	8007c3e <IKS01A3_MOTION_SENSOR_Init+0xea>
      {
        component_functions |= MOTION_GYRO;
 8007c36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c38:	f043 0301 	orr.w	r3, r3, #1
 8007c3c:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      if (cap.Magneto == 1U)
 8007c3e:	7bbb      	ldrb	r3, [r7, #14]
 8007c40:	2b01      	cmp	r3, #1
 8007c42:	d13c      	bne.n	8007cbe <IKS01A3_MOTION_SENSOR_Init+0x16a>
      {
        component_functions |= MOTION_MAGNETO;
 8007c44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c46:	f043 0304 	orr.w	r3, r3, #4
 8007c4a:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      break;
 8007c4c:	e037      	b.n	8007cbe <IKS01A3_MOTION_SENSOR_Init+0x16a>
#endif

#if (USE_IKS01A3_MOTION_SENSOR_LIS2MDL_0 == 1)
    case IKS01A3_LIS2MDL_0:
      if (LIS2MDL_0_Probe(Functions) != BSP_ERROR_NONE)
 8007c4e:	6838      	ldr	r0, [r7, #0]
 8007c50:	f000 fa6a 	bl	8008128 <LIS2MDL_0_Probe>
 8007c54:	4603      	mov	r3, r0
 8007c56:	2b00      	cmp	r3, #0
 8007c58:	d002      	beq.n	8007c60 <IKS01A3_MOTION_SENSOR_Init+0x10c>
      {
        return BSP_ERROR_NO_INIT;
 8007c5a:	f04f 33ff 	mov.w	r3, #4294967295
 8007c5e:	e068      	b.n	8007d32 <IKS01A3_MOTION_SENSOR_Init+0x1de>
      }
      if (MotionDrv[Instance]->GetCapabilities(MotionCompObj[Instance], (void *)&cap) != BSP_ERROR_NONE)
 8007c60:	4a36      	ldr	r2, [pc, #216]	; (8007d3c <IKS01A3_MOTION_SENSOR_Init+0x1e8>)
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007c68:	68db      	ldr	r3, [r3, #12]
 8007c6a:	4935      	ldr	r1, [pc, #212]	; (8007d40 <IKS01A3_MOTION_SENSOR_Init+0x1ec>)
 8007c6c:	687a      	ldr	r2, [r7, #4]
 8007c6e:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8007c72:	f107 010c 	add.w	r1, r7, #12
 8007c76:	4610      	mov	r0, r2
 8007c78:	4798      	blx	r3
 8007c7a:	4603      	mov	r3, r0
 8007c7c:	2b00      	cmp	r3, #0
 8007c7e:	d002      	beq.n	8007c86 <IKS01A3_MOTION_SENSOR_Init+0x132>
      {
        return BSP_ERROR_UNKNOWN_COMPONENT;
 8007c80:	f06f 0306 	mvn.w	r3, #6
 8007c84:	e055      	b.n	8007d32 <IKS01A3_MOTION_SENSOR_Init+0x1de>
      }
      if (cap.Acc == 1U)
 8007c86:	7b3b      	ldrb	r3, [r7, #12]
 8007c88:	2b01      	cmp	r3, #1
 8007c8a:	d103      	bne.n	8007c94 <IKS01A3_MOTION_SENSOR_Init+0x140>
      {
        component_functions |= MOTION_ACCELERO;
 8007c8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c8e:	f043 0302 	orr.w	r3, r3, #2
 8007c92:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      if (cap.Gyro == 1U)
 8007c94:	7b7b      	ldrb	r3, [r7, #13]
 8007c96:	2b01      	cmp	r3, #1
 8007c98:	d103      	bne.n	8007ca2 <IKS01A3_MOTION_SENSOR_Init+0x14e>
      {
        component_functions |= MOTION_GYRO;
 8007c9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c9c:	f043 0301 	orr.w	r3, r3, #1
 8007ca0:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      if (cap.Magneto == 1U)
 8007ca2:	7bbb      	ldrb	r3, [r7, #14]
 8007ca4:	2b01      	cmp	r3, #1
 8007ca6:	d10c      	bne.n	8007cc2 <IKS01A3_MOTION_SENSOR_Init+0x16e>
      {
        component_functions |= MOTION_MAGNETO;
 8007ca8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007caa:	f043 0304 	orr.w	r3, r3, #4
 8007cae:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      break;
 8007cb0:	e007      	b.n	8007cc2 <IKS01A3_MOTION_SENSOR_Init+0x16e>
      }
      break;
#endif

    default:
      ret = BSP_ERROR_WRONG_PARAM;
 8007cb2:	f06f 0301 	mvn.w	r3, #1
 8007cb6:	637b      	str	r3, [r7, #52]	; 0x34
      break;
 8007cb8:	e004      	b.n	8007cc4 <IKS01A3_MOTION_SENSOR_Init+0x170>
      break;
 8007cba:	bf00      	nop
 8007cbc:	e002      	b.n	8007cc4 <IKS01A3_MOTION_SENSOR_Init+0x170>
      break;
 8007cbe:	bf00      	nop
 8007cc0:	e000      	b.n	8007cc4 <IKS01A3_MOTION_SENSOR_Init+0x170>
      break;
 8007cc2:	bf00      	nop
  }

  if (ret != BSP_ERROR_NONE)
 8007cc4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007cc6:	2b00      	cmp	r3, #0
 8007cc8:	d001      	beq.n	8007cce <IKS01A3_MOTION_SENSOR_Init+0x17a>
  {
    return ret;
 8007cca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007ccc:	e031      	b.n	8007d32 <IKS01A3_MOTION_SENSOR_Init+0x1de>
  }

  for (i = 0; i < IKS01A3_MOTION_FUNCTIONS_NBR; i++)
 8007cce:	2300      	movs	r3, #0
 8007cd0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007cd2:	e02a      	b.n	8007d2a <IKS01A3_MOTION_SENSOR_Init+0x1d6>
  {
    if (((Functions & function) == function) && ((component_functions & function) == function))
 8007cd4:	683a      	ldr	r2, [r7, #0]
 8007cd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007cd8:	4013      	ands	r3, r2
 8007cda:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007cdc:	429a      	cmp	r2, r3
 8007cde:	d11e      	bne.n	8007d1e <IKS01A3_MOTION_SENSOR_Init+0x1ca>
 8007ce0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007ce2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ce4:	4013      	ands	r3, r2
 8007ce6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007ce8:	429a      	cmp	r2, r3
 8007cea:	d118      	bne.n	8007d1e <IKS01A3_MOTION_SENSOR_Init+0x1ca>
    {
      if (MotionFuncDrv[Instance][FunctionIndex[function]]->Enable(MotionCompObj[Instance]) != BSP_ERROR_NONE)
 8007cec:	4a15      	ldr	r2, [pc, #84]	; (8007d44 <IKS01A3_MOTION_SENSOR_Init+0x1f0>)
 8007cee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007cf0:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8007cf4:	4814      	ldr	r0, [pc, #80]	; (8007d48 <IKS01A3_MOTION_SENSOR_Init+0x1f4>)
 8007cf6:	687a      	ldr	r2, [r7, #4]
 8007cf8:	4613      	mov	r3, r2
 8007cfa:	005b      	lsls	r3, r3, #1
 8007cfc:	4413      	add	r3, r2
 8007cfe:	440b      	add	r3, r1
 8007d00:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8007d04:	681b      	ldr	r3, [r3, #0]
 8007d06:	490e      	ldr	r1, [pc, #56]	; (8007d40 <IKS01A3_MOTION_SENSOR_Init+0x1ec>)
 8007d08:	687a      	ldr	r2, [r7, #4]
 8007d0a:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8007d0e:	4610      	mov	r0, r2
 8007d10:	4798      	blx	r3
 8007d12:	4603      	mov	r3, r0
 8007d14:	2b00      	cmp	r3, #0
 8007d16:	d002      	beq.n	8007d1e <IKS01A3_MOTION_SENSOR_Init+0x1ca>
      {
        return BSP_ERROR_COMPONENT_FAILURE;
 8007d18:	f06f 0304 	mvn.w	r3, #4
 8007d1c:	e009      	b.n	8007d32 <IKS01A3_MOTION_SENSOR_Init+0x1de>
      }
    }
    function = function << 1;
 8007d1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d20:	005b      	lsls	r3, r3, #1
 8007d22:	633b      	str	r3, [r7, #48]	; 0x30
  for (i = 0; i < IKS01A3_MOTION_FUNCTIONS_NBR; i++)
 8007d24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d26:	3301      	adds	r3, #1
 8007d28:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007d2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d2c:	2b02      	cmp	r3, #2
 8007d2e:	d9d1      	bls.n	8007cd4 <IKS01A3_MOTION_SENSOR_Init+0x180>
  }

  return ret;
 8007d30:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8007d32:	4618      	mov	r0, r3
 8007d34:	3738      	adds	r7, #56	; 0x38
 8007d36:	46bd      	mov	sp, r7
 8007d38:	bd80      	pop	{r7, pc}
 8007d3a:	bf00      	nop
 8007d3c:	200003e8 	.word	0x200003e8
 8007d40:	200003b8 	.word	0x200003b8
 8007d44:	200000c8 	.word	0x200000c8
 8007d48:	200003c4 	.word	0x200003c4

08007d4c <IKS01A3_MOTION_SENSOR_Enable>:
  *         - MOTION_ACCELERO for instance 1
  *         - MOTION_MAGNETO for instance 2
  * @retval BSP status
  */
int32_t IKS01A3_MOTION_SENSOR_Enable(uint32_t Instance, uint32_t Function)
{
 8007d4c:	b580      	push	{r7, lr}
 8007d4e:	b084      	sub	sp, #16
 8007d50:	af00      	add	r7, sp, #0
 8007d52:	6078      	str	r0, [r7, #4]
 8007d54:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (Instance >= IKS01A3_MOTION_INSTANCES_NBR)
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	2b02      	cmp	r3, #2
 8007d5a:	d903      	bls.n	8007d64 <IKS01A3_MOTION_SENSOR_Enable+0x18>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8007d5c:	f06f 0301 	mvn.w	r3, #1
 8007d60:	60fb      	str	r3, [r7, #12]
 8007d62:	e028      	b.n	8007db6 <IKS01A3_MOTION_SENSOR_Enable+0x6a>
  }
  else
  {
    if ((MotionCtx[Instance].Functions & Function) == Function)
 8007d64:	4a16      	ldr	r2, [pc, #88]	; (8007dc0 <IKS01A3_MOTION_SENSOR_Enable+0x74>)
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8007d6c:	683b      	ldr	r3, [r7, #0]
 8007d6e:	4013      	ands	r3, r2
 8007d70:	683a      	ldr	r2, [r7, #0]
 8007d72:	429a      	cmp	r2, r3
 8007d74:	d11c      	bne.n	8007db0 <IKS01A3_MOTION_SENSOR_Enable+0x64>
    {
      if (MotionFuncDrv[Instance][FunctionIndex[Function]]->Enable(MotionCompObj[Instance]) != BSP_ERROR_NONE)
 8007d76:	4a13      	ldr	r2, [pc, #76]	; (8007dc4 <IKS01A3_MOTION_SENSOR_Enable+0x78>)
 8007d78:	683b      	ldr	r3, [r7, #0]
 8007d7a:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8007d7e:	4812      	ldr	r0, [pc, #72]	; (8007dc8 <IKS01A3_MOTION_SENSOR_Enable+0x7c>)
 8007d80:	687a      	ldr	r2, [r7, #4]
 8007d82:	4613      	mov	r3, r2
 8007d84:	005b      	lsls	r3, r3, #1
 8007d86:	4413      	add	r3, r2
 8007d88:	440b      	add	r3, r1
 8007d8a:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8007d8e:	681b      	ldr	r3, [r3, #0]
 8007d90:	490e      	ldr	r1, [pc, #56]	; (8007dcc <IKS01A3_MOTION_SENSOR_Enable+0x80>)
 8007d92:	687a      	ldr	r2, [r7, #4]
 8007d94:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8007d98:	4610      	mov	r0, r2
 8007d9a:	4798      	blx	r3
 8007d9c:	4603      	mov	r3, r0
 8007d9e:	2b00      	cmp	r3, #0
 8007da0:	d003      	beq.n	8007daa <IKS01A3_MOTION_SENSOR_Enable+0x5e>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8007da2:	f06f 0304 	mvn.w	r3, #4
 8007da6:	60fb      	str	r3, [r7, #12]
 8007da8:	e005      	b.n	8007db6 <IKS01A3_MOTION_SENSOR_Enable+0x6a>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 8007daa:	2300      	movs	r3, #0
 8007dac:	60fb      	str	r3, [r7, #12]
 8007dae:	e002      	b.n	8007db6 <IKS01A3_MOTION_SENSOR_Enable+0x6a>
      }
    }
    else
    {
      ret = BSP_ERROR_WRONG_PARAM;
 8007db0:	f06f 0301 	mvn.w	r3, #1
 8007db4:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 8007db6:	68fb      	ldr	r3, [r7, #12]
}
 8007db8:	4618      	mov	r0, r3
 8007dba:	3710      	adds	r7, #16
 8007dbc:	46bd      	mov	sp, r7
 8007dbe:	bd80      	pop	{r7, pc}
 8007dc0:	200003f4 	.word	0x200003f4
 8007dc4:	200000c8 	.word	0x200000c8
 8007dc8:	200003c4 	.word	0x200003c4
 8007dcc:	200003b8 	.word	0x200003b8

08007dd0 <IKS01A3_MOTION_SENSOR_GetAxes>:
  *         - MOTION_MAGNETO for instance 2
  * @param  Axes pointer to axes data structure
  * @retval BSP status
  */
int32_t IKS01A3_MOTION_SENSOR_GetAxes(uint32_t Instance, uint32_t Function, IKS01A3_MOTION_SENSOR_Axes_t *Axes)
{
 8007dd0:	b580      	push	{r7, lr}
 8007dd2:	b086      	sub	sp, #24
 8007dd4:	af00      	add	r7, sp, #0
 8007dd6:	60f8      	str	r0, [r7, #12]
 8007dd8:	60b9      	str	r1, [r7, #8]
 8007dda:	607a      	str	r2, [r7, #4]
  int32_t ret;

  if (Instance >= IKS01A3_MOTION_INSTANCES_NBR)
 8007ddc:	68fb      	ldr	r3, [r7, #12]
 8007dde:	2b02      	cmp	r3, #2
 8007de0:	d903      	bls.n	8007dea <IKS01A3_MOTION_SENSOR_GetAxes+0x1a>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8007de2:	f06f 0301 	mvn.w	r3, #1
 8007de6:	617b      	str	r3, [r7, #20]
 8007de8:	e029      	b.n	8007e3e <IKS01A3_MOTION_SENSOR_GetAxes+0x6e>
  }
  else
  {
    if ((MotionCtx[Instance].Functions & Function) == Function)
 8007dea:	4a17      	ldr	r2, [pc, #92]	; (8007e48 <IKS01A3_MOTION_SENSOR_GetAxes+0x78>)
 8007dec:	68fb      	ldr	r3, [r7, #12]
 8007dee:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8007df2:	68bb      	ldr	r3, [r7, #8]
 8007df4:	4013      	ands	r3, r2
 8007df6:	68ba      	ldr	r2, [r7, #8]
 8007df8:	429a      	cmp	r2, r3
 8007dfa:	d11d      	bne.n	8007e38 <IKS01A3_MOTION_SENSOR_GetAxes+0x68>
    {
      if (MotionFuncDrv[Instance][FunctionIndex[Function]]->GetAxes(MotionCompObj[Instance], Axes) != BSP_ERROR_NONE)
 8007dfc:	4a13      	ldr	r2, [pc, #76]	; (8007e4c <IKS01A3_MOTION_SENSOR_GetAxes+0x7c>)
 8007dfe:	68bb      	ldr	r3, [r7, #8]
 8007e00:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8007e04:	4812      	ldr	r0, [pc, #72]	; (8007e50 <IKS01A3_MOTION_SENSOR_GetAxes+0x80>)
 8007e06:	68fa      	ldr	r2, [r7, #12]
 8007e08:	4613      	mov	r3, r2
 8007e0a:	005b      	lsls	r3, r3, #1
 8007e0c:	4413      	add	r3, r2
 8007e0e:	440b      	add	r3, r1
 8007e10:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8007e14:	69db      	ldr	r3, [r3, #28]
 8007e16:	490f      	ldr	r1, [pc, #60]	; (8007e54 <IKS01A3_MOTION_SENSOR_GetAxes+0x84>)
 8007e18:	68fa      	ldr	r2, [r7, #12]
 8007e1a:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8007e1e:	6879      	ldr	r1, [r7, #4]
 8007e20:	4610      	mov	r0, r2
 8007e22:	4798      	blx	r3
 8007e24:	4603      	mov	r3, r0
 8007e26:	2b00      	cmp	r3, #0
 8007e28:	d003      	beq.n	8007e32 <IKS01A3_MOTION_SENSOR_GetAxes+0x62>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8007e2a:	f06f 0304 	mvn.w	r3, #4
 8007e2e:	617b      	str	r3, [r7, #20]
 8007e30:	e005      	b.n	8007e3e <IKS01A3_MOTION_SENSOR_GetAxes+0x6e>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 8007e32:	2300      	movs	r3, #0
 8007e34:	617b      	str	r3, [r7, #20]
 8007e36:	e002      	b.n	8007e3e <IKS01A3_MOTION_SENSOR_GetAxes+0x6e>
      }
    }
    else
    {
      ret = BSP_ERROR_WRONG_PARAM;
 8007e38:	f06f 0301 	mvn.w	r3, #1
 8007e3c:	617b      	str	r3, [r7, #20]
    }
  }

  return ret;
 8007e3e:	697b      	ldr	r3, [r7, #20]
}
 8007e40:	4618      	mov	r0, r3
 8007e42:	3718      	adds	r7, #24
 8007e44:	46bd      	mov	sp, r7
 8007e46:	bd80      	pop	{r7, pc}
 8007e48:	200003f4 	.word	0x200003f4
 8007e4c:	200000c8 	.word	0x200000c8
 8007e50:	200003c4 	.word	0x200003c4
 8007e54:	200003b8 	.word	0x200003b8

08007e58 <LSM6DSO_0_Probe>:
/**
  * @brief  Register Bus IOs for instance 0 if component ID is OK
  * @retval BSP status
  */
static int32_t LSM6DSO_0_Probe(uint32_t Functions)
{
 8007e58:	b580      	push	{r7, lr}
 8007e5a:	b094      	sub	sp, #80	; 0x50
 8007e5c:	af00      	add	r7, sp, #0
 8007e5e:	6078      	str	r0, [r7, #4]
  LSM6DSO_IO_t            io_ctx;
  uint8_t                 id;
  static LSM6DSO_Object_t lsm6dso_obj_0;
  LSM6DSO_Capabilities_t  cap;
  int32_t ret = BSP_ERROR_NONE;
 8007e60:	2300      	movs	r3, #0
 8007e62:	64fb      	str	r3, [r7, #76]	; 0x4c

  /* Configure the accelero driver */
  io_ctx.BusType     = LSM6DSO_I2C_BUS; /* I2C */
 8007e64:	2300      	movs	r3, #0
 8007e66:	637b      	str	r3, [r7, #52]	; 0x34
  io_ctx.Address     = LSM6DSO_I2C_ADD_H;
 8007e68:	23d7      	movs	r3, #215	; 0xd7
 8007e6a:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  io_ctx.Init        = IKS01A3_I2C_Init;
 8007e6e:	4b4b      	ldr	r3, [pc, #300]	; (8007f9c <LSM6DSO_0_Probe+0x144>)
 8007e70:	62fb      	str	r3, [r7, #44]	; 0x2c
  io_ctx.DeInit      = IKS01A3_I2C_DeInit;
 8007e72:	4b4b      	ldr	r3, [pc, #300]	; (8007fa0 <LSM6DSO_0_Probe+0x148>)
 8007e74:	633b      	str	r3, [r7, #48]	; 0x30
  io_ctx.ReadReg     = IKS01A3_I2C_ReadReg;
 8007e76:	4b4b      	ldr	r3, [pc, #300]	; (8007fa4 <LSM6DSO_0_Probe+0x14c>)
 8007e78:	643b      	str	r3, [r7, #64]	; 0x40
  io_ctx.WriteReg    = IKS01A3_I2C_WriteReg;
 8007e7a:	4b4b      	ldr	r3, [pc, #300]	; (8007fa8 <LSM6DSO_0_Probe+0x150>)
 8007e7c:	63fb      	str	r3, [r7, #60]	; 0x3c
  io_ctx.GetTick     = IKS01A3_GetTick;
 8007e7e:	4b4b      	ldr	r3, [pc, #300]	; (8007fac <LSM6DSO_0_Probe+0x154>)
 8007e80:	647b      	str	r3, [r7, #68]	; 0x44
  io_ctx.Delay       = IKS01A3_Delay;
 8007e82:	4b4b      	ldr	r3, [pc, #300]	; (8007fb0 <LSM6DSO_0_Probe+0x158>)
 8007e84:	64bb      	str	r3, [r7, #72]	; 0x48

  if (LSM6DSO_RegisterBusIO(&lsm6dso_obj_0, &io_ctx) != LSM6DSO_OK)
 8007e86:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8007e8a:	4619      	mov	r1, r3
 8007e8c:	4849      	ldr	r0, [pc, #292]	; (8007fb4 <LSM6DSO_0_Probe+0x15c>)
 8007e8e:	f7fd fe81 	bl	8005b94 <LSM6DSO_RegisterBusIO>
 8007e92:	4603      	mov	r3, r0
 8007e94:	2b00      	cmp	r3, #0
 8007e96:	d003      	beq.n	8007ea0 <LSM6DSO_0_Probe+0x48>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8007e98:	f06f 0306 	mvn.w	r3, #6
 8007e9c:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007e9e:	e077      	b.n	8007f90 <LSM6DSO_0_Probe+0x138>
  }
  else if (LSM6DSO_ReadID(&lsm6dso_obj_0, &id) != LSM6DSO_OK)
 8007ea0:	f107 032b 	add.w	r3, r7, #43	; 0x2b
 8007ea4:	4619      	mov	r1, r3
 8007ea6:	4843      	ldr	r0, [pc, #268]	; (8007fb4 <LSM6DSO_0_Probe+0x15c>)
 8007ea8:	f7fd ff7a 	bl	8005da0 <LSM6DSO_ReadID>
 8007eac:	4603      	mov	r3, r0
 8007eae:	2b00      	cmp	r3, #0
 8007eb0:	d003      	beq.n	8007eba <LSM6DSO_0_Probe+0x62>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8007eb2:	f06f 0306 	mvn.w	r3, #6
 8007eb6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007eb8:	e06a      	b.n	8007f90 <LSM6DSO_0_Probe+0x138>
  }
  else if (id != LSM6DSO_ID)
 8007eba:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8007ebe:	2b6c      	cmp	r3, #108	; 0x6c
 8007ec0:	d003      	beq.n	8007eca <LSM6DSO_0_Probe+0x72>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8007ec2:	f06f 0306 	mvn.w	r3, #6
 8007ec6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007ec8:	e062      	b.n	8007f90 <LSM6DSO_0_Probe+0x138>
  }
  else
  {
    (void)LSM6DSO_GetCapabilities(&lsm6dso_obj_0, &cap);
 8007eca:	f107 030c 	add.w	r3, r7, #12
 8007ece:	4619      	mov	r1, r3
 8007ed0:	4838      	ldr	r0, [pc, #224]	; (8007fb4 <LSM6DSO_0_Probe+0x15c>)
 8007ed2:	f7fd ff7b 	bl	8005dcc <LSM6DSO_GetCapabilities>
    MotionCtx[IKS01A3_LSM6DSO_0].Functions = ((uint32_t)cap.Gyro) | ((uint32_t)cap.Acc << 1) | ((uint32_t)cap.Magneto << 2);
 8007ed6:	7b7b      	ldrb	r3, [r7, #13]
 8007ed8:	461a      	mov	r2, r3
 8007eda:	7b3b      	ldrb	r3, [r7, #12]
 8007edc:	005b      	lsls	r3, r3, #1
 8007ede:	431a      	orrs	r2, r3
 8007ee0:	7bbb      	ldrb	r3, [r7, #14]
 8007ee2:	009b      	lsls	r3, r3, #2
 8007ee4:	4313      	orrs	r3, r2
 8007ee6:	4a34      	ldr	r2, [pc, #208]	; (8007fb8 <LSM6DSO_0_Probe+0x160>)
 8007ee8:	6013      	str	r3, [r2, #0]

    MotionCompObj[IKS01A3_LSM6DSO_0] = &lsm6dso_obj_0;
 8007eea:	4b34      	ldr	r3, [pc, #208]	; (8007fbc <LSM6DSO_0_Probe+0x164>)
 8007eec:	4a31      	ldr	r2, [pc, #196]	; (8007fb4 <LSM6DSO_0_Probe+0x15c>)
 8007eee:	601a      	str	r2, [r3, #0]
    /* The second cast (void *) is added to bypass Misra R11.3 rule */
    MotionDrv[IKS01A3_LSM6DSO_0] = (MOTION_SENSOR_CommonDrv_t *)(void *)&LSM6DSO_COMMON_Driver;
 8007ef0:	4b33      	ldr	r3, [pc, #204]	; (8007fc0 <LSM6DSO_0_Probe+0x168>)
 8007ef2:	4a34      	ldr	r2, [pc, #208]	; (8007fc4 <LSM6DSO_0_Probe+0x16c>)
 8007ef4:	601a      	str	r2, [r3, #0]

    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_GYRO) == MOTION_GYRO) && (cap.Gyro == 1U))
 8007ef6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007ef8:	2b00      	cmp	r3, #0
 8007efa:	d11d      	bne.n	8007f38 <LSM6DSO_0_Probe+0xe0>
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	f003 0301 	and.w	r3, r3, #1
 8007f02:	2b00      	cmp	r3, #0
 8007f04:	d018      	beq.n	8007f38 <LSM6DSO_0_Probe+0xe0>
 8007f06:	7b7b      	ldrb	r3, [r7, #13]
 8007f08:	2b01      	cmp	r3, #1
 8007f0a:	d115      	bne.n	8007f38 <LSM6DSO_0_Probe+0xe0>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      MotionFuncDrv[IKS01A3_LSM6DSO_0][FunctionIndex[MOTION_GYRO]] = (MOTION_SENSOR_FuncDrv_t *)(void *)&LSM6DSO_GYRO_Driver;
 8007f0c:	4b2e      	ldr	r3, [pc, #184]	; (8007fc8 <LSM6DSO_0_Probe+0x170>)
 8007f0e:	685b      	ldr	r3, [r3, #4]
 8007f10:	4a2e      	ldr	r2, [pc, #184]	; (8007fcc <LSM6DSO_0_Probe+0x174>)
 8007f12:	492f      	ldr	r1, [pc, #188]	; (8007fd0 <LSM6DSO_0_Probe+0x178>)
 8007f14:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

      if (MotionDrv[IKS01A3_LSM6DSO_0]->Init(MotionCompObj[IKS01A3_LSM6DSO_0]) != LSM6DSO_OK)
 8007f18:	4b29      	ldr	r3, [pc, #164]	; (8007fc0 <LSM6DSO_0_Probe+0x168>)
 8007f1a:	681b      	ldr	r3, [r3, #0]
 8007f1c:	681b      	ldr	r3, [r3, #0]
 8007f1e:	4a27      	ldr	r2, [pc, #156]	; (8007fbc <LSM6DSO_0_Probe+0x164>)
 8007f20:	6812      	ldr	r2, [r2, #0]
 8007f22:	4610      	mov	r0, r2
 8007f24:	4798      	blx	r3
 8007f26:	4603      	mov	r3, r0
 8007f28:	2b00      	cmp	r3, #0
 8007f2a:	d003      	beq.n	8007f34 <LSM6DSO_0_Probe+0xdc>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8007f2c:	f06f 0304 	mvn.w	r3, #4
 8007f30:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007f32:	e001      	b.n	8007f38 <LSM6DSO_0_Probe+0xe0>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 8007f34:	2300      	movs	r3, #0
 8007f36:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_ACCELERO) == MOTION_ACCELERO) && (cap.Acc == 1U))
 8007f38:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007f3a:	2b00      	cmp	r3, #0
 8007f3c:	d11d      	bne.n	8007f7a <LSM6DSO_0_Probe+0x122>
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	f003 0302 	and.w	r3, r3, #2
 8007f44:	2b00      	cmp	r3, #0
 8007f46:	d018      	beq.n	8007f7a <LSM6DSO_0_Probe+0x122>
 8007f48:	7b3b      	ldrb	r3, [r7, #12]
 8007f4a:	2b01      	cmp	r3, #1
 8007f4c:	d115      	bne.n	8007f7a <LSM6DSO_0_Probe+0x122>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      MotionFuncDrv[IKS01A3_LSM6DSO_0][FunctionIndex[MOTION_ACCELERO]] = (MOTION_SENSOR_FuncDrv_t *)(
 8007f4e:	4b1e      	ldr	r3, [pc, #120]	; (8007fc8 <LSM6DSO_0_Probe+0x170>)
 8007f50:	689b      	ldr	r3, [r3, #8]
 8007f52:	4a1e      	ldr	r2, [pc, #120]	; (8007fcc <LSM6DSO_0_Probe+0x174>)
 8007f54:	491f      	ldr	r1, [pc, #124]	; (8007fd4 <LSM6DSO_0_Probe+0x17c>)
 8007f56:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                                                                           void *)&LSM6DSO_ACC_Driver;

      if (MotionDrv[IKS01A3_LSM6DSO_0]->Init(MotionCompObj[IKS01A3_LSM6DSO_0]) != LSM6DSO_OK)
 8007f5a:	4b19      	ldr	r3, [pc, #100]	; (8007fc0 <LSM6DSO_0_Probe+0x168>)
 8007f5c:	681b      	ldr	r3, [r3, #0]
 8007f5e:	681b      	ldr	r3, [r3, #0]
 8007f60:	4a16      	ldr	r2, [pc, #88]	; (8007fbc <LSM6DSO_0_Probe+0x164>)
 8007f62:	6812      	ldr	r2, [r2, #0]
 8007f64:	4610      	mov	r0, r2
 8007f66:	4798      	blx	r3
 8007f68:	4603      	mov	r3, r0
 8007f6a:	2b00      	cmp	r3, #0
 8007f6c:	d003      	beq.n	8007f76 <LSM6DSO_0_Probe+0x11e>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8007f6e:	f06f 0304 	mvn.w	r3, #4
 8007f72:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007f74:	e001      	b.n	8007f7a <LSM6DSO_0_Probe+0x122>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 8007f76:	2300      	movs	r3, #0
 8007f78:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_MAGNETO) == MOTION_MAGNETO))
 8007f7a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007f7c:	2b00      	cmp	r3, #0
 8007f7e:	d107      	bne.n	8007f90 <LSM6DSO_0_Probe+0x138>
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	f003 0304 	and.w	r3, r3, #4
 8007f86:	2b00      	cmp	r3, #0
 8007f88:	d002      	beq.n	8007f90 <LSM6DSO_0_Probe+0x138>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8007f8a:	f06f 0304 	mvn.w	r3, #4
 8007f8e:	64fb      	str	r3, [r7, #76]	; 0x4c
    }
  }
  return ret;
 8007f90:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
}
 8007f92:	4618      	mov	r0, r3
 8007f94:	3750      	adds	r7, #80	; 0x50
 8007f96:	46bd      	mov	sp, r7
 8007f98:	bd80      	pop	{r7, pc}
 8007f9a:	bf00      	nop
 8007f9c:	08002ed5 	.word	0x08002ed5
 8007fa0:	08002f39 	.word	0x08002f39
 8007fa4:	08002fed 	.word	0x08002fed
 8007fa8:	08002f89 	.word	0x08002f89
 8007fac:	08003051 	.word	0x08003051
 8007fb0:	0800873d 	.word	0x0800873d
 8007fb4:	20000400 	.word	0x20000400
 8007fb8:	200003f4 	.word	0x200003f4
 8007fbc:	200003b8 	.word	0x200003b8
 8007fc0:	200003e8 	.word	0x200003e8
 8007fc4:	20000070 	.word	0x20000070
 8007fc8:	200000c8 	.word	0x200000c8
 8007fcc:	200003c4 	.word	0x200003c4
 8007fd0:	200000a4 	.word	0x200000a4
 8007fd4:	20000080 	.word	0x20000080

08007fd8 <LIS2DW12_0_Probe>:
/**
  * @brief  Register Bus IOs for instance 1 if component ID is OK
  * @retval BSP status
  */
static int32_t LIS2DW12_0_Probe(uint32_t Functions)
{
 8007fd8:	b580      	push	{r7, lr}
 8007fda:	b094      	sub	sp, #80	; 0x50
 8007fdc:	af00      	add	r7, sp, #0
 8007fde:	6078      	str	r0, [r7, #4]
  LIS2DW12_IO_t            io_ctx;
  uint8_t                  id;
  static LIS2DW12_Object_t lis2dw12_obj_0;
  LIS2DW12_Capabilities_t  cap;
  int32_t ret = BSP_ERROR_NONE;
 8007fe0:	2300      	movs	r3, #0
 8007fe2:	64fb      	str	r3, [r7, #76]	; 0x4c

  /* Configure the accelero driver */
  io_ctx.BusType     = LIS2DW12_I2C_BUS; /* I2C */
 8007fe4:	2300      	movs	r3, #0
 8007fe6:	637b      	str	r3, [r7, #52]	; 0x34
  io_ctx.Address     = LIS2DW12_I2C_ADD_H;
 8007fe8:	2333      	movs	r3, #51	; 0x33
 8007fea:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  io_ctx.Init        = IKS01A3_I2C_Init;
 8007fee:	4b40      	ldr	r3, [pc, #256]	; (80080f0 <LIS2DW12_0_Probe+0x118>)
 8007ff0:	62fb      	str	r3, [r7, #44]	; 0x2c
  io_ctx.DeInit      = IKS01A3_I2C_DeInit;
 8007ff2:	4b40      	ldr	r3, [pc, #256]	; (80080f4 <LIS2DW12_0_Probe+0x11c>)
 8007ff4:	633b      	str	r3, [r7, #48]	; 0x30
  io_ctx.ReadReg     = IKS01A3_I2C_ReadReg;
 8007ff6:	4b40      	ldr	r3, [pc, #256]	; (80080f8 <LIS2DW12_0_Probe+0x120>)
 8007ff8:	643b      	str	r3, [r7, #64]	; 0x40
  io_ctx.WriteReg    = IKS01A3_I2C_WriteReg;
 8007ffa:	4b40      	ldr	r3, [pc, #256]	; (80080fc <LIS2DW12_0_Probe+0x124>)
 8007ffc:	63fb      	str	r3, [r7, #60]	; 0x3c
  io_ctx.GetTick     = IKS01A3_GetTick;
 8007ffe:	4b40      	ldr	r3, [pc, #256]	; (8008100 <LIS2DW12_0_Probe+0x128>)
 8008000:	647b      	str	r3, [r7, #68]	; 0x44
  io_ctx.Delay       = IKS01A3_Delay;
 8008002:	4b40      	ldr	r3, [pc, #256]	; (8008104 <LIS2DW12_0_Probe+0x12c>)
 8008004:	64bb      	str	r3, [r7, #72]	; 0x48

  if (LIS2DW12_RegisterBusIO(&lis2dw12_obj_0, &io_ctx) != LIS2DW12_OK)
 8008006:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800800a:	4619      	mov	r1, r3
 800800c:	483e      	ldr	r0, [pc, #248]	; (8008108 <LIS2DW12_0_Probe+0x130>)
 800800e:	f7fb fa67 	bl	80034e0 <LIS2DW12_RegisterBusIO>
 8008012:	4603      	mov	r3, r0
 8008014:	2b00      	cmp	r3, #0
 8008016:	d003      	beq.n	8008020 <LIS2DW12_0_Probe+0x48>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8008018:	f06f 0306 	mvn.w	r3, #6
 800801c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800801e:	e062      	b.n	80080e6 <LIS2DW12_0_Probe+0x10e>
  }
  else if (LIS2DW12_ReadID(&lis2dw12_obj_0, &id) != LIS2DW12_OK)
 8008020:	f107 032b 	add.w	r3, r7, #43	; 0x2b
 8008024:	4619      	mov	r1, r3
 8008026:	4838      	ldr	r0, [pc, #224]	; (8008108 <LIS2DW12_0_Probe+0x130>)
 8008028:	f7fb fb48 	bl	80036bc <LIS2DW12_ReadID>
 800802c:	4603      	mov	r3, r0
 800802e:	2b00      	cmp	r3, #0
 8008030:	d003      	beq.n	800803a <LIS2DW12_0_Probe+0x62>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8008032:	f06f 0306 	mvn.w	r3, #6
 8008036:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008038:	e055      	b.n	80080e6 <LIS2DW12_0_Probe+0x10e>
  }
  else if (id != LIS2DW12_ID)
 800803a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800803e:	2b44      	cmp	r3, #68	; 0x44
 8008040:	d003      	beq.n	800804a <LIS2DW12_0_Probe+0x72>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8008042:	f06f 0306 	mvn.w	r3, #6
 8008046:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008048:	e04d      	b.n	80080e6 <LIS2DW12_0_Probe+0x10e>
  }
  else
  {
    (void)LIS2DW12_GetCapabilities(&lis2dw12_obj_0, &cap);
 800804a:	f107 030c 	add.w	r3, r7, #12
 800804e:	4619      	mov	r1, r3
 8008050:	482d      	ldr	r0, [pc, #180]	; (8008108 <LIS2DW12_0_Probe+0x130>)
 8008052:	f7fb fb49 	bl	80036e8 <LIS2DW12_GetCapabilities>
    MotionCtx[IKS01A3_LIS2DW12_0].Functions = ((uint32_t)cap.Gyro) | ((uint32_t)cap.Acc << 1) | ((uint32_t)cap.Magneto << 2);
 8008056:	7b7b      	ldrb	r3, [r7, #13]
 8008058:	461a      	mov	r2, r3
 800805a:	7b3b      	ldrb	r3, [r7, #12]
 800805c:	005b      	lsls	r3, r3, #1
 800805e:	431a      	orrs	r2, r3
 8008060:	7bbb      	ldrb	r3, [r7, #14]
 8008062:	009b      	lsls	r3, r3, #2
 8008064:	4313      	orrs	r3, r2
 8008066:	4a29      	ldr	r2, [pc, #164]	; (800810c <LIS2DW12_0_Probe+0x134>)
 8008068:	6053      	str	r3, [r2, #4]

    MotionCompObj[IKS01A3_LIS2DW12_0] = &lis2dw12_obj_0;
 800806a:	4b29      	ldr	r3, [pc, #164]	; (8008110 <LIS2DW12_0_Probe+0x138>)
 800806c:	4a26      	ldr	r2, [pc, #152]	; (8008108 <LIS2DW12_0_Probe+0x130>)
 800806e:	605a      	str	r2, [r3, #4]
    /* The second cast (void *) is added to bypass Misra R11.3 rule */
    MotionDrv[IKS01A3_LIS2DW12_0] = (MOTION_SENSOR_CommonDrv_t *)(void *)&LIS2DW12_COMMON_Driver;
 8008070:	4b28      	ldr	r3, [pc, #160]	; (8008114 <LIS2DW12_0_Probe+0x13c>)
 8008072:	4a29      	ldr	r2, [pc, #164]	; (8008118 <LIS2DW12_0_Probe+0x140>)
 8008074:	605a      	str	r2, [r3, #4]

    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_ACCELERO) == MOTION_ACCELERO) && (cap.Acc == 1U))
 8008076:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008078:	2b00      	cmp	r3, #0
 800807a:	d11e      	bne.n	80080ba <LIS2DW12_0_Probe+0xe2>
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	f003 0302 	and.w	r3, r3, #2
 8008082:	2b00      	cmp	r3, #0
 8008084:	d019      	beq.n	80080ba <LIS2DW12_0_Probe+0xe2>
 8008086:	7b3b      	ldrb	r3, [r7, #12]
 8008088:	2b01      	cmp	r3, #1
 800808a:	d116      	bne.n	80080ba <LIS2DW12_0_Probe+0xe2>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      MotionFuncDrv[IKS01A3_LIS2DW12_0][FunctionIndex[MOTION_ACCELERO]] = (MOTION_SENSOR_FuncDrv_t *)(
 800808c:	4b23      	ldr	r3, [pc, #140]	; (800811c <LIS2DW12_0_Probe+0x144>)
 800808e:	689b      	ldr	r3, [r3, #8]
 8008090:	4a23      	ldr	r2, [pc, #140]	; (8008120 <LIS2DW12_0_Probe+0x148>)
 8008092:	3303      	adds	r3, #3
 8008094:	4923      	ldr	r1, [pc, #140]	; (8008124 <LIS2DW12_0_Probe+0x14c>)
 8008096:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                                                                            void *)&LIS2DW12_ACC_Driver;

      if (MotionDrv[IKS01A3_LIS2DW12_0]->Init(MotionCompObj[IKS01A3_LIS2DW12_0]) != LIS2DW12_OK)
 800809a:	4b1e      	ldr	r3, [pc, #120]	; (8008114 <LIS2DW12_0_Probe+0x13c>)
 800809c:	685b      	ldr	r3, [r3, #4]
 800809e:	681b      	ldr	r3, [r3, #0]
 80080a0:	4a1b      	ldr	r2, [pc, #108]	; (8008110 <LIS2DW12_0_Probe+0x138>)
 80080a2:	6852      	ldr	r2, [r2, #4]
 80080a4:	4610      	mov	r0, r2
 80080a6:	4798      	blx	r3
 80080a8:	4603      	mov	r3, r0
 80080aa:	2b00      	cmp	r3, #0
 80080ac:	d003      	beq.n	80080b6 <LIS2DW12_0_Probe+0xde>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 80080ae:	f06f 0304 	mvn.w	r3, #4
 80080b2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80080b4:	e001      	b.n	80080ba <LIS2DW12_0_Probe+0xe2>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 80080b6:	2300      	movs	r3, #0
 80080b8:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_GYRO) == MOTION_GYRO))
 80080ba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80080bc:	2b00      	cmp	r3, #0
 80080be:	d107      	bne.n	80080d0 <LIS2DW12_0_Probe+0xf8>
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	f003 0301 	and.w	r3, r3, #1
 80080c6:	2b00      	cmp	r3, #0
 80080c8:	d002      	beq.n	80080d0 <LIS2DW12_0_Probe+0xf8>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 80080ca:	f06f 0304 	mvn.w	r3, #4
 80080ce:	64fb      	str	r3, [r7, #76]	; 0x4c
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_MAGNETO) == MOTION_MAGNETO))
 80080d0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80080d2:	2b00      	cmp	r3, #0
 80080d4:	d107      	bne.n	80080e6 <LIS2DW12_0_Probe+0x10e>
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	f003 0304 	and.w	r3, r3, #4
 80080dc:	2b00      	cmp	r3, #0
 80080de:	d002      	beq.n	80080e6 <LIS2DW12_0_Probe+0x10e>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 80080e0:	f06f 0304 	mvn.w	r3, #4
 80080e4:	64fb      	str	r3, [r7, #76]	; 0x4c
    }
  }
  return ret;
 80080e6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
}
 80080e8:	4618      	mov	r0, r3
 80080ea:	3750      	adds	r7, #80	; 0x50
 80080ec:	46bd      	mov	sp, r7
 80080ee:	bd80      	pop	{r7, pc}
 80080f0:	08002ed5 	.word	0x08002ed5
 80080f4:	08002f39 	.word	0x08002f39
 80080f8:	08002fed 	.word	0x08002fed
 80080fc:	08002f89 	.word	0x08002f89
 8008100:	08003051 	.word	0x08003051
 8008104:	0800873d 	.word	0x0800873d
 8008108:	20000438 	.word	0x20000438
 800810c:	200003f4 	.word	0x200003f4
 8008110:	200003b8 	.word	0x200003b8
 8008114:	200003e8 	.word	0x200003e8
 8008118:	20000008 	.word	0x20000008
 800811c:	200000c8 	.word	0x200000c8
 8008120:	200003c4 	.word	0x200003c4
 8008124:	20000018 	.word	0x20000018

08008128 <LIS2MDL_0_Probe>:
/**
  * @brief  Register Bus IOs for instance 1 if component ID is OK
  * @retval BSP status
  */
static int32_t LIS2MDL_0_Probe(uint32_t Functions)
{
 8008128:	b580      	push	{r7, lr}
 800812a:	b094      	sub	sp, #80	; 0x50
 800812c:	af00      	add	r7, sp, #0
 800812e:	6078      	str	r0, [r7, #4]
  LIS2MDL_IO_t            io_ctx;
  uint8_t                 id;
  static LIS2MDL_Object_t lis2mdl_obj_0;
  LIS2MDL_Capabilities_t  cap;
  int32_t                 ret = BSP_ERROR_NONE;
 8008130:	2300      	movs	r3, #0
 8008132:	64fb      	str	r3, [r7, #76]	; 0x4c

  /* Configure the accelero driver */
  io_ctx.BusType     = LIS2MDL_I2C_BUS; /* I2C */
 8008134:	2300      	movs	r3, #0
 8008136:	637b      	str	r3, [r7, #52]	; 0x34
  io_ctx.Address     = LIS2MDL_I2C_ADD;
 8008138:	233d      	movs	r3, #61	; 0x3d
 800813a:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  io_ctx.Init        = IKS01A3_I2C_Init;
 800813e:	4b40      	ldr	r3, [pc, #256]	; (8008240 <LIS2MDL_0_Probe+0x118>)
 8008140:	62fb      	str	r3, [r7, #44]	; 0x2c
  io_ctx.DeInit      = IKS01A3_I2C_DeInit;
 8008142:	4b40      	ldr	r3, [pc, #256]	; (8008244 <LIS2MDL_0_Probe+0x11c>)
 8008144:	633b      	str	r3, [r7, #48]	; 0x30
  io_ctx.ReadReg     = IKS01A3_I2C_ReadReg;
 8008146:	4b40      	ldr	r3, [pc, #256]	; (8008248 <LIS2MDL_0_Probe+0x120>)
 8008148:	643b      	str	r3, [r7, #64]	; 0x40
  io_ctx.WriteReg    = IKS01A3_I2C_WriteReg;
 800814a:	4b40      	ldr	r3, [pc, #256]	; (800824c <LIS2MDL_0_Probe+0x124>)
 800814c:	63fb      	str	r3, [r7, #60]	; 0x3c
  io_ctx.GetTick     = IKS01A3_GetTick;
 800814e:	4b40      	ldr	r3, [pc, #256]	; (8008250 <LIS2MDL_0_Probe+0x128>)
 8008150:	647b      	str	r3, [r7, #68]	; 0x44
  io_ctx.Delay       = IKS01A3_Delay;
 8008152:	4b40      	ldr	r3, [pc, #256]	; (8008254 <LIS2MDL_0_Probe+0x12c>)
 8008154:	64bb      	str	r3, [r7, #72]	; 0x48

  if (LIS2MDL_RegisterBusIO(&lis2mdl_obj_0, &io_ctx) != LIS2MDL_OK)
 8008156:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800815a:	4619      	mov	r1, r3
 800815c:	483e      	ldr	r0, [pc, #248]	; (8008258 <LIS2MDL_0_Probe+0x130>)
 800815e:	f7fc fd13 	bl	8004b88 <LIS2MDL_RegisterBusIO>
 8008162:	4603      	mov	r3, r0
 8008164:	2b00      	cmp	r3, #0
 8008166:	d003      	beq.n	8008170 <LIS2MDL_0_Probe+0x48>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8008168:	f06f 0306 	mvn.w	r3, #6
 800816c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800816e:	e062      	b.n	8008236 <LIS2MDL_0_Probe+0x10e>
  }
  else if (LIS2MDL_ReadID(&lis2mdl_obj_0, &id) != LIS2MDL_OK)
 8008170:	f107 032b 	add.w	r3, r7, #43	; 0x2b
 8008174:	4619      	mov	r1, r3
 8008176:	4838      	ldr	r0, [pc, #224]	; (8008258 <LIS2MDL_0_Probe+0x130>)
 8008178:	f7fc fe22 	bl	8004dc0 <LIS2MDL_ReadID>
 800817c:	4603      	mov	r3, r0
 800817e:	2b00      	cmp	r3, #0
 8008180:	d003      	beq.n	800818a <LIS2MDL_0_Probe+0x62>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8008182:	f06f 0306 	mvn.w	r3, #6
 8008186:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008188:	e055      	b.n	8008236 <LIS2MDL_0_Probe+0x10e>
  }
  else if (id != LIS2MDL_ID)
 800818a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800818e:	2b40      	cmp	r3, #64	; 0x40
 8008190:	d003      	beq.n	800819a <LIS2MDL_0_Probe+0x72>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8008192:	f06f 0306 	mvn.w	r3, #6
 8008196:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008198:	e04d      	b.n	8008236 <LIS2MDL_0_Probe+0x10e>
  }
  else
  {
    (void)LIS2MDL_GetCapabilities(&lis2mdl_obj_0, &cap);
 800819a:	f107 030c 	add.w	r3, r7, #12
 800819e:	4619      	mov	r1, r3
 80081a0:	482d      	ldr	r0, [pc, #180]	; (8008258 <LIS2MDL_0_Probe+0x130>)
 80081a2:	f7fc fe33 	bl	8004e0c <LIS2MDL_GetCapabilities>
    MotionCtx[IKS01A3_LIS2MDL_0].Functions = ((uint32_t)cap.Gyro) | ((uint32_t)cap.Acc << 1) | ((uint32_t)cap.Magneto << 2);
 80081a6:	7b7b      	ldrb	r3, [r7, #13]
 80081a8:	461a      	mov	r2, r3
 80081aa:	7b3b      	ldrb	r3, [r7, #12]
 80081ac:	005b      	lsls	r3, r3, #1
 80081ae:	431a      	orrs	r2, r3
 80081b0:	7bbb      	ldrb	r3, [r7, #14]
 80081b2:	009b      	lsls	r3, r3, #2
 80081b4:	4313      	orrs	r3, r2
 80081b6:	4a29      	ldr	r2, [pc, #164]	; (800825c <LIS2MDL_0_Probe+0x134>)
 80081b8:	6093      	str	r3, [r2, #8]

    MotionCompObj[IKS01A3_LIS2MDL_0] = &lis2mdl_obj_0;
 80081ba:	4b29      	ldr	r3, [pc, #164]	; (8008260 <LIS2MDL_0_Probe+0x138>)
 80081bc:	4a26      	ldr	r2, [pc, #152]	; (8008258 <LIS2MDL_0_Probe+0x130>)
 80081be:	609a      	str	r2, [r3, #8]
    /* The second cast (void *) is added to bypass Misra R11.3 rule */
    MotionDrv[IKS01A3_LIS2MDL_0] = (MOTION_SENSOR_CommonDrv_t *)(void *)&LIS2MDL_COMMON_Driver;
 80081c0:	4b28      	ldr	r3, [pc, #160]	; (8008264 <LIS2MDL_0_Probe+0x13c>)
 80081c2:	4a29      	ldr	r2, [pc, #164]	; (8008268 <LIS2MDL_0_Probe+0x140>)
 80081c4:	609a      	str	r2, [r3, #8]

    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_MAGNETO) == MOTION_MAGNETO) && (cap.Magneto == 1U))
 80081c6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80081c8:	2b00      	cmp	r3, #0
 80081ca:	d11e      	bne.n	800820a <LIS2MDL_0_Probe+0xe2>
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	f003 0304 	and.w	r3, r3, #4
 80081d2:	2b00      	cmp	r3, #0
 80081d4:	d019      	beq.n	800820a <LIS2MDL_0_Probe+0xe2>
 80081d6:	7bbb      	ldrb	r3, [r7, #14]
 80081d8:	2b01      	cmp	r3, #1
 80081da:	d116      	bne.n	800820a <LIS2MDL_0_Probe+0xe2>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      MotionFuncDrv[IKS01A3_LIS2MDL_0][FunctionIndex[MOTION_MAGNETO]] = (MOTION_SENSOR_FuncDrv_t *)(
 80081dc:	4b23      	ldr	r3, [pc, #140]	; (800826c <LIS2MDL_0_Probe+0x144>)
 80081de:	691b      	ldr	r3, [r3, #16]
 80081e0:	4a23      	ldr	r2, [pc, #140]	; (8008270 <LIS2MDL_0_Probe+0x148>)
 80081e2:	3306      	adds	r3, #6
 80081e4:	4923      	ldr	r1, [pc, #140]	; (8008274 <LIS2MDL_0_Probe+0x14c>)
 80081e6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                                                                          void *)&LIS2MDL_MAG_Driver;

      if (MotionDrv[IKS01A3_LIS2MDL_0]->Init(MotionCompObj[IKS01A3_LIS2MDL_0]) != LIS2MDL_OK)
 80081ea:	4b1e      	ldr	r3, [pc, #120]	; (8008264 <LIS2MDL_0_Probe+0x13c>)
 80081ec:	689b      	ldr	r3, [r3, #8]
 80081ee:	681b      	ldr	r3, [r3, #0]
 80081f0:	4a1b      	ldr	r2, [pc, #108]	; (8008260 <LIS2MDL_0_Probe+0x138>)
 80081f2:	6892      	ldr	r2, [r2, #8]
 80081f4:	4610      	mov	r0, r2
 80081f6:	4798      	blx	r3
 80081f8:	4603      	mov	r3, r0
 80081fa:	2b00      	cmp	r3, #0
 80081fc:	d003      	beq.n	8008206 <LIS2MDL_0_Probe+0xde>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 80081fe:	f06f 0304 	mvn.w	r3, #4
 8008202:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008204:	e001      	b.n	800820a <LIS2MDL_0_Probe+0xe2>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 8008206:	2300      	movs	r3, #0
 8008208:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_ACCELERO) == MOTION_ACCELERO))
 800820a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800820c:	2b00      	cmp	r3, #0
 800820e:	d107      	bne.n	8008220 <LIS2MDL_0_Probe+0xf8>
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	f003 0302 	and.w	r3, r3, #2
 8008216:	2b00      	cmp	r3, #0
 8008218:	d002      	beq.n	8008220 <LIS2MDL_0_Probe+0xf8>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 800821a:	f06f 0304 	mvn.w	r3, #4
 800821e:	64fb      	str	r3, [r7, #76]	; 0x4c
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_GYRO) == MOTION_GYRO))
 8008220:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008222:	2b00      	cmp	r3, #0
 8008224:	d107      	bne.n	8008236 <LIS2MDL_0_Probe+0x10e>
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	f003 0301 	and.w	r3, r3, #1
 800822c:	2b00      	cmp	r3, #0
 800822e:	d002      	beq.n	8008236 <LIS2MDL_0_Probe+0x10e>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8008230:	f06f 0304 	mvn.w	r3, #4
 8008234:	64fb      	str	r3, [r7, #76]	; 0x4c
    }
  }
  return ret;
 8008236:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
}
 8008238:	4618      	mov	r0, r3
 800823a:	3750      	adds	r7, #80	; 0x50
 800823c:	46bd      	mov	sp, r7
 800823e:	bd80      	pop	{r7, pc}
 8008240:	08002ed5 	.word	0x08002ed5
 8008244:	08002f39 	.word	0x08002f39
 8008248:	08002fed 	.word	0x08002fed
 800824c:	08002f89 	.word	0x08002f89
 8008250:	08003051 	.word	0x08003051
 8008254:	0800873d 	.word	0x0800873d
 8008258:	20000474 	.word	0x20000474
 800825c:	200003f4 	.word	0x200003f4
 8008260:	200003b8 	.word	0x200003b8
 8008264:	200003e8 	.word	0x200003e8
 8008268:	2000003c 	.word	0x2000003c
 800826c:	200000c8 	.word	0x200000c8
 8008270:	200003c4 	.word	0x200003c4
 8008274:	2000004c 	.word	0x2000004c

08008278 <BSP_LED_Init>:
 *              This parameter can be one of the following values:
 *              @arg  LED2, LED4, ...
 * @retval HAL status
 */
int32_t BSP_LED_Init(Led_TypeDef Led)
{
 8008278:	b580      	push	{r7, lr}
 800827a:	b082      	sub	sp, #8
 800827c:	af00      	add	r7, sp, #0
 800827e:	4603      	mov	r3, r0
 8008280:	71fb      	strb	r3, [r7, #7]
  static const BSP_LED_GPIO_Init LedGpioInit[LEDn] = {LED_USER_GPIO_Init};
  LedGpioInit[Led]();
 8008282:	79fb      	ldrb	r3, [r7, #7]
 8008284:	4a04      	ldr	r2, [pc, #16]	; (8008298 <BSP_LED_Init+0x20>)
 8008286:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800828a:	4798      	blx	r3
  return BSP_ERROR_NONE;
 800828c:	2300      	movs	r3, #0
}
 800828e:	4618      	mov	r0, r3
 8008290:	3708      	adds	r7, #8
 8008292:	46bd      	mov	sp, r7
 8008294:	bd80      	pop	{r7, pc}
 8008296:	bf00      	nop
 8008298:	0800db6c 	.word	0x0800db6c

0800829c <BSP_LED_Toggle>:
 *              @arg  LED3
 *              @arg  LED4
 * @retval HAL status
 */
int32_t BSP_LED_Toggle(Led_TypeDef Led)
{
 800829c:	b580      	push	{r7, lr}
 800829e:	b082      	sub	sp, #8
 80082a0:	af00      	add	r7, sp, #0
 80082a2:	4603      	mov	r3, r0
 80082a4:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_TogglePin(LED_PORT[Led], LED_PIN[Led]);
 80082a6:	79fb      	ldrb	r3, [r7, #7]
 80082a8:	4a06      	ldr	r2, [pc, #24]	; (80082c4 <BSP_LED_Toggle+0x28>)
 80082aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80082ae:	2220      	movs	r2, #32
 80082b0:	4611      	mov	r1, r2
 80082b2:	4618      	mov	r0, r3
 80082b4:	f000 fe63 	bl	8008f7e <HAL_GPIO_TogglePin>

  return BSP_ERROR_NONE;
 80082b8:	2300      	movs	r3, #0
}
 80082ba:	4618      	mov	r0, r3
 80082bc:	3708      	adds	r7, #8
 80082be:	46bd      	mov	sp, r7
 80082c0:	bd80      	pop	{r7, pc}
 80082c2:	bf00      	nop
 80082c4:	200000dc 	.word	0x200000dc

080082c8 <LED_USER_GPIO_Init>:
}
/**
  * @brief
  * @retval None
  */
static void LED_USER_GPIO_Init(void) {
 80082c8:	b580      	push	{r7, lr}
 80082ca:	b088      	sub	sp, #32
 80082cc:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80082ce:	2300      	movs	r3, #0
 80082d0:	60bb      	str	r3, [r7, #8]
 80082d2:	4b1c      	ldr	r3, [pc, #112]	; (8008344 <LED_USER_GPIO_Init+0x7c>)
 80082d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80082d6:	4a1b      	ldr	r2, [pc, #108]	; (8008344 <LED_USER_GPIO_Init+0x7c>)
 80082d8:	f043 0301 	orr.w	r3, r3, #1
 80082dc:	6313      	str	r3, [r2, #48]	; 0x30
 80082de:	4b19      	ldr	r3, [pc, #100]	; (8008344 <LED_USER_GPIO_Init+0x7c>)
 80082e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80082e2:	f003 0301 	and.w	r3, r3, #1
 80082e6:	60bb      	str	r3, [r7, #8]
 80082e8:	68bb      	ldr	r3, [r7, #8]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80082ea:	f107 030c 	add.w	r3, r7, #12
 80082ee:	2200      	movs	r2, #0
 80082f0:	601a      	str	r2, [r3, #0]
 80082f2:	605a      	str	r2, [r3, #4]
 80082f4:	609a      	str	r2, [r3, #8]
 80082f6:	60da      	str	r2, [r3, #12]
 80082f8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80082fa:	2300      	movs	r3, #0
 80082fc:	607b      	str	r3, [r7, #4]
 80082fe:	4b11      	ldr	r3, [pc, #68]	; (8008344 <LED_USER_GPIO_Init+0x7c>)
 8008300:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008302:	4a10      	ldr	r2, [pc, #64]	; (8008344 <LED_USER_GPIO_Init+0x7c>)
 8008304:	f043 0301 	orr.w	r3, r3, #1
 8008308:	6313      	str	r3, [r2, #48]	; 0x30
 800830a:	4b0e      	ldr	r3, [pc, #56]	; (8008344 <LED_USER_GPIO_Init+0x7c>)
 800830c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800830e:	f003 0301 	and.w	r3, r3, #1
 8008312:	607b      	str	r3, [r7, #4]
 8008314:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BUS_BSP_LED_GPIO_PORT, BUS_BSP_LED_GPIO_PIN, GPIO_PIN_RESET);
 8008316:	2200      	movs	r2, #0
 8008318:	2120      	movs	r1, #32
 800831a:	480b      	ldr	r0, [pc, #44]	; (8008348 <LED_USER_GPIO_Init+0x80>)
 800831c:	f000 fe16 	bl	8008f4c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PTPIN */
  GPIO_InitStruct.Pin = BUS_BSP_LED_GPIO_PIN;
 8008320:	2320      	movs	r3, #32
 8008322:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8008324:	2301      	movs	r3, #1
 8008326:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008328:	2300      	movs	r3, #0
 800832a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800832c:	2300      	movs	r3, #0
 800832e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(BUS_BSP_LED_GPIO_PORT, &GPIO_InitStruct);
 8008330:	f107 030c 	add.w	r3, r7, #12
 8008334:	4619      	mov	r1, r3
 8008336:	4804      	ldr	r0, [pc, #16]	; (8008348 <LED_USER_GPIO_Init+0x80>)
 8008338:	f000 fb88 	bl	8008a4c <HAL_GPIO_Init>

}
 800833c:	bf00      	nop
 800833e:	3720      	adds	r7, #32
 8008340:	46bd      	mov	sp, r7
 8008342:	bd80      	pop	{r7, pc}
 8008344:	40023800 	.word	0x40023800
 8008348:	40020000 	.word	0x40020000

0800834c <BSP_PB_Init>:
  *                    @arg  BUTTON_MODE_EXTI: Button will be connected to EXTI line
  *                                            with interrupt generation capability
  * @retval BSP status
  */
int32_t BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 800834c:	b580      	push	{r7, lr}
 800834e:	b084      	sub	sp, #16
 8008350:	af00      	add	r7, sp, #0
 8008352:	4603      	mov	r3, r0
 8008354:	460a      	mov	r2, r1
 8008356:	71fb      	strb	r3, [r7, #7]
 8008358:	4613      	mov	r3, r2
 800835a:	71bb      	strb	r3, [r7, #6]
  int32_t ret = BSP_ERROR_NONE;
 800835c:	2300      	movs	r3, #0
 800835e:	60fb      	str	r3, [r7, #12]
  static const BSP_EXTI_LineCallback ButtonCallback[BUTTONn] ={BUTTON_USER_EXTI_Callback};
  static const uint32_t  BSP_BUTTON_PRIO [BUTTONn] ={BSP_BUTTON_USER_IT_PRIORITY};
  static const uint32_t BUTTON_EXTI_LINE[BUTTONn] ={USER_BUTTON_EXTI_LINE};
  static const BSP_BUTTON_GPIO_Init ButtonGpioInit[BUTTONn] = {BUTTON_USER_GPIO_Init};

  ButtonGpioInit[Button]();
 8008360:	79fb      	ldrb	r3, [r7, #7]
 8008362:	4a1f      	ldr	r2, [pc, #124]	; (80083e0 <BSP_PB_Init+0x94>)
 8008364:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008368:	4798      	blx	r3

  if (ButtonMode == BUTTON_MODE_EXTI)
 800836a:	79bb      	ldrb	r3, [r7, #6]
 800836c:	2b01      	cmp	r3, #1
 800836e:	d132      	bne.n	80083d6 <BSP_PB_Init+0x8a>
  {
    if(HAL_EXTI_GetHandle(&hpb_exti[Button], BUTTON_EXTI_LINE[Button]) != HAL_OK)
 8008370:	79fb      	ldrb	r3, [r7, #7]
 8008372:	00db      	lsls	r3, r3, #3
 8008374:	4a1b      	ldr	r2, [pc, #108]	; (80083e4 <BSP_PB_Init+0x98>)
 8008376:	441a      	add	r2, r3
 8008378:	79fb      	ldrb	r3, [r7, #7]
 800837a:	491b      	ldr	r1, [pc, #108]	; (80083e8 <BSP_PB_Init+0x9c>)
 800837c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8008380:	4619      	mov	r1, r3
 8008382:	4610      	mov	r0, r2
 8008384:	f000 fb29 	bl	80089da <HAL_EXTI_GetHandle>
 8008388:	4603      	mov	r3, r0
 800838a:	2b00      	cmp	r3, #0
 800838c:	d003      	beq.n	8008396 <BSP_PB_Init+0x4a>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 800838e:	f06f 0303 	mvn.w	r3, #3
 8008392:	60fb      	str	r3, [r7, #12]
 8008394:	e01f      	b.n	80083d6 <BSP_PB_Init+0x8a>
    }
    else if (HAL_EXTI_RegisterCallback(&hpb_exti[Button],  HAL_EXTI_COMMON_CB_ID, ButtonCallback[Button]) != HAL_OK)
 8008396:	79fb      	ldrb	r3, [r7, #7]
 8008398:	00db      	lsls	r3, r3, #3
 800839a:	4a12      	ldr	r2, [pc, #72]	; (80083e4 <BSP_PB_Init+0x98>)
 800839c:	1898      	adds	r0, r3, r2
 800839e:	79fb      	ldrb	r3, [r7, #7]
 80083a0:	4a12      	ldr	r2, [pc, #72]	; (80083ec <BSP_PB_Init+0xa0>)
 80083a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80083a6:	461a      	mov	r2, r3
 80083a8:	2100      	movs	r1, #0
 80083aa:	f000 fafc 	bl	80089a6 <HAL_EXTI_RegisterCallback>
 80083ae:	4603      	mov	r3, r0
 80083b0:	2b00      	cmp	r3, #0
 80083b2:	d003      	beq.n	80083bc <BSP_PB_Init+0x70>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 80083b4:	f06f 0303 	mvn.w	r3, #3
 80083b8:	60fb      	str	r3, [r7, #12]
 80083ba:	e00c      	b.n	80083d6 <BSP_PB_Init+0x8a>
    }
	else
    {
      /* Enable and set Button EXTI Interrupt to the lowest priority */
      HAL_NVIC_SetPriority((BUTTON_IRQn[Button]), BSP_BUTTON_PRIO[Button], 0x00);
 80083bc:	2028      	movs	r0, #40	; 0x28
 80083be:	79fb      	ldrb	r3, [r7, #7]
 80083c0:	4a0b      	ldr	r2, [pc, #44]	; (80083f0 <BSP_PB_Init+0xa4>)
 80083c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80083c6:	2200      	movs	r2, #0
 80083c8:	4619      	mov	r1, r3
 80083ca:	f000 fab6 	bl	800893a <HAL_NVIC_SetPriority>
      HAL_NVIC_EnableIRQ((BUTTON_IRQn[Button]));
 80083ce:	2328      	movs	r3, #40	; 0x28
 80083d0:	4618      	mov	r0, r3
 80083d2:	f000 face 	bl	8008972 <HAL_NVIC_EnableIRQ>
    }
  }

  return ret;
 80083d6:	68fb      	ldr	r3, [r7, #12]
}
 80083d8:	4618      	mov	r0, r3
 80083da:	3710      	adds	r7, #16
 80083dc:	46bd      	mov	sp, r7
 80083de:	bd80      	pop	{r7, pc}
 80083e0:	0800db70 	.word	0x0800db70
 80083e4:	200000e4 	.word	0x200000e4
 80083e8:	0800db74 	.word	0x0800db74
 80083ec:	0800db78 	.word	0x0800db78
 80083f0:	0800db7c 	.word	0x0800db7c

080083f4 <BSP_PB_GetState>:
 *                This parameter can be one of the following values:
 *                @arg  BUTTON_USER
 * @retval The Button GPIO pin value (GPIO_PIN_RESET = button pressed)
 */
int32_t BSP_PB_GetState(Button_TypeDef Button)
{
 80083f4:	b580      	push	{r7, lr}
 80083f6:	b082      	sub	sp, #8
 80083f8:	af00      	add	r7, sp, #0
 80083fa:	4603      	mov	r3, r0
 80083fc:	71fb      	strb	r3, [r7, #7]
  return (int32_t)(HAL_GPIO_ReadPin(BUTTON_PORT[Button], BUTTON_PIN[Button]) == GPIO_PIN_RESET);
 80083fe:	79fb      	ldrb	r3, [r7, #7]
 8008400:	4a09      	ldr	r2, [pc, #36]	; (8008428 <BSP_PB_GetState+0x34>)
 8008402:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008406:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800840a:	4611      	mov	r1, r2
 800840c:	4618      	mov	r0, r3
 800840e:	f000 fd85 	bl	8008f1c <HAL_GPIO_ReadPin>
 8008412:	4603      	mov	r3, r0
 8008414:	2b00      	cmp	r3, #0
 8008416:	bf0c      	ite	eq
 8008418:	2301      	moveq	r3, #1
 800841a:	2300      	movne	r3, #0
 800841c:	b2db      	uxtb	r3, r3
}
 800841e:	4618      	mov	r0, r3
 8008420:	3708      	adds	r7, #8
 8008422:	46bd      	mov	sp, r7
 8008424:	bd80      	pop	{r7, pc}
 8008426:	bf00      	nop
 8008428:	200000e0 	.word	0x200000e0

0800842c <BUTTON_USER_EXTI_Callback>:
/**
  * @brief  User EXTI line detection callbacks.
  * @retval None
  */
static void BUTTON_USER_EXTI_Callback(void)
{
 800842c:	b580      	push	{r7, lr}
 800842e:	af00      	add	r7, sp, #0
  BSP_PB_Callback(BUTTON_USER);
 8008430:	2000      	movs	r0, #0
 8008432:	f7f9 fdb9 	bl	8001fa8 <BSP_PB_Callback>
}
 8008436:	bf00      	nop
 8008438:	bd80      	pop	{r7, pc}
	...

0800843c <BUTTON_USER_GPIO_Init>:

/**
  * @brief
  * @retval None
  */
static void BUTTON_USER_GPIO_Init(void) {
 800843c:	b580      	push	{r7, lr}
 800843e:	b088      	sub	sp, #32
 8008440:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8008442:	2300      	movs	r3, #0
 8008444:	60bb      	str	r3, [r7, #8]
 8008446:	4b1a      	ldr	r3, [pc, #104]	; (80084b0 <BUTTON_USER_GPIO_Init+0x74>)
 8008448:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800844a:	4a19      	ldr	r2, [pc, #100]	; (80084b0 <BUTTON_USER_GPIO_Init+0x74>)
 800844c:	f043 0304 	orr.w	r3, r3, #4
 8008450:	6313      	str	r3, [r2, #48]	; 0x30
 8008452:	4b17      	ldr	r3, [pc, #92]	; (80084b0 <BUTTON_USER_GPIO_Init+0x74>)
 8008454:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008456:	f003 0304 	and.w	r3, r3, #4
 800845a:	60bb      	str	r3, [r7, #8]
 800845c:	68bb      	ldr	r3, [r7, #8]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800845e:	f107 030c 	add.w	r3, r7, #12
 8008462:	2200      	movs	r2, #0
 8008464:	601a      	str	r2, [r3, #0]
 8008466:	605a      	str	r2, [r3, #4]
 8008468:	609a      	str	r2, [r3, #8]
 800846a:	60da      	str	r2, [r3, #12]
 800846c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800846e:	2300      	movs	r3, #0
 8008470:	607b      	str	r3, [r7, #4]
 8008472:	4b0f      	ldr	r3, [pc, #60]	; (80084b0 <BUTTON_USER_GPIO_Init+0x74>)
 8008474:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008476:	4a0e      	ldr	r2, [pc, #56]	; (80084b0 <BUTTON_USER_GPIO_Init+0x74>)
 8008478:	f043 0304 	orr.w	r3, r3, #4
 800847c:	6313      	str	r3, [r2, #48]	; 0x30
 800847e:	4b0c      	ldr	r3, [pc, #48]	; (80084b0 <BUTTON_USER_GPIO_Init+0x74>)
 8008480:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008482:	f003 0304 	and.w	r3, r3, #4
 8008486:	607b      	str	r3, [r7, #4]
 8008488:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : PTPIN */
  GPIO_InitStruct.Pin = BUS_BSP_BUTTON_GPIO_PIN;
 800848a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800848e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8008490:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8008494:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008496:	2300      	movs	r3, #0
 8008498:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(BUS_BSP_BUTTON_GPIO_PORT, &GPIO_InitStruct);
 800849a:	f107 030c 	add.w	r3, r7, #12
 800849e:	4619      	mov	r1, r3
 80084a0:	4804      	ldr	r0, [pc, #16]	; (80084b4 <BUTTON_USER_GPIO_Init+0x78>)
 80084a2:	f000 fad3 	bl	8008a4c <HAL_GPIO_Init>

}
 80084a6:	bf00      	nop
 80084a8:	3720      	adds	r7, #32
 80084aa:	46bd      	mov	sp, r7
 80084ac:	bd80      	pop	{r7, pc}
 80084ae:	bf00      	nop
 80084b0:	40023800 	.word	0x40023800
 80084b4:	40020800 	.word	0x40020800

080084b8 <BSP_COM_Init>:
 * @param  UART_Init: Pointer to a UART_HandleTypeDef structure that contains the
 *                    configuration information for the specified USART peripheral.
 * @retval BSP error code
 */
int32_t BSP_COM_Init(COM_TypeDef COM)
{
 80084b8:	b580      	push	{r7, lr}
 80084ba:	b084      	sub	sp, #16
 80084bc:	af00      	add	r7, sp, #0
 80084be:	4603      	mov	r3, r0
 80084c0:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 80084c2:	2300      	movs	r3, #0
 80084c4:	60fb      	str	r3, [r7, #12]

  if(COM > COMn)
 80084c6:	79fb      	ldrb	r3, [r7, #7]
 80084c8:	2b01      	cmp	r3, #1
 80084ca:	d903      	bls.n	80084d4 <BSP_COM_Init+0x1c>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 80084cc:	f06f 0301 	mvn.w	r3, #1
 80084d0:	60fb      	str	r3, [r7, #12]
 80084d2:	e025      	b.n	8008520 <BSP_COM_Init+0x68>
  }
  else
  {
     hcom_uart[COM].Instance = COM_USART[COM];
 80084d4:	79fb      	ldrb	r3, [r7, #7]
 80084d6:	79fa      	ldrb	r2, [r7, #7]
 80084d8:	4914      	ldr	r1, [pc, #80]	; (800852c <BSP_COM_Init+0x74>)
 80084da:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 80084de:	4814      	ldr	r0, [pc, #80]	; (8008530 <BSP_COM_Init+0x78>)
 80084e0:	4613      	mov	r3, r2
 80084e2:	011b      	lsls	r3, r3, #4
 80084e4:	4413      	add	r3, r2
 80084e6:	009b      	lsls	r3, r3, #2
 80084e8:	4403      	add	r3, r0
 80084ea:	6019      	str	r1, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 0U)
    /* Init the UART Msp */
    USART2_MspInit(&hcom_uart[COM]);
 80084ec:	79fa      	ldrb	r2, [r7, #7]
 80084ee:	4613      	mov	r3, r2
 80084f0:	011b      	lsls	r3, r3, #4
 80084f2:	4413      	add	r3, r2
 80084f4:	009b      	lsls	r3, r3, #2
 80084f6:	4a0e      	ldr	r2, [pc, #56]	; (8008530 <BSP_COM_Init+0x78>)
 80084f8:	4413      	add	r3, r2
 80084fa:	4618      	mov	r0, r3
 80084fc:	f000 f864 	bl	80085c8 <USART2_MspInit>
      {
        return BSP_ERROR_MSP_FAILURE;
      }
    }
#endif
    if (MX_USART2_UART_Init(&hcom_uart[COM]))
 8008500:	79fa      	ldrb	r2, [r7, #7]
 8008502:	4613      	mov	r3, r2
 8008504:	011b      	lsls	r3, r3, #4
 8008506:	4413      	add	r3, r2
 8008508:	009b      	lsls	r3, r3, #2
 800850a:	4a09      	ldr	r2, [pc, #36]	; (8008530 <BSP_COM_Init+0x78>)
 800850c:	4413      	add	r3, r2
 800850e:	4618      	mov	r0, r3
 8008510:	f000 f810 	bl	8008534 <MX_USART2_UART_Init>
 8008514:	4603      	mov	r3, r0
 8008516:	2b00      	cmp	r3, #0
 8008518:	d002      	beq.n	8008520 <BSP_COM_Init+0x68>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 800851a:	f06f 0303 	mvn.w	r3, #3
 800851e:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 8008520:	68fb      	ldr	r3, [r7, #12]
}
 8008522:	4618      	mov	r0, r3
 8008524:	3710      	adds	r7, #16
 8008526:	46bd      	mov	sp, r7
 8008528:	bd80      	pop	{r7, pc}
 800852a:	bf00      	nop
 800852c:	200000ec 	.word	0x200000ec
 8008530:	200004a8 	.word	0x200004a8

08008534 <MX_USART2_UART_Init>:
 */

/* USART2 init function */

__weak HAL_StatusTypeDef MX_USART2_UART_Init(UART_HandleTypeDef* huart)
{
 8008534:	b580      	push	{r7, lr}
 8008536:	b084      	sub	sp, #16
 8008538:	af00      	add	r7, sp, #0
 800853a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 800853c:	2300      	movs	r3, #0
 800853e:	73fb      	strb	r3, [r7, #15]

  huart->Instance = USART2;
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	4a12      	ldr	r2, [pc, #72]	; (800858c <MX_USART2_UART_Init+0x58>)
 8008544:	601a      	str	r2, [r3, #0]
  huart->Init.BaudRate = 115200;
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800854c:	605a      	str	r2, [r3, #4]
  huart->Init.WordLength = UART_WORDLENGTH_8B;
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	2200      	movs	r2, #0
 8008552:	609a      	str	r2, [r3, #8]
  huart->Init.StopBits = UART_STOPBITS_1;
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	2200      	movs	r2, #0
 8008558:	60da      	str	r2, [r3, #12]
  huart->Init.Parity = UART_PARITY_NONE;
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	2200      	movs	r2, #0
 800855e:	611a      	str	r2, [r3, #16]
  huart->Init.Mode = UART_MODE_TX_RX;
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	220c      	movs	r2, #12
 8008564:	615a      	str	r2, [r3, #20]
  huart->Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	2200      	movs	r2, #0
 800856a:	619a      	str	r2, [r3, #24]
  huart->Init.OverSampling = UART_OVERSAMPLING_16;
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	2200      	movs	r2, #0
 8008570:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(huart) != HAL_OK)
 8008572:	6878      	ldr	r0, [r7, #4]
 8008574:	f002 fce2 	bl	800af3c <HAL_UART_Init>
 8008578:	4603      	mov	r3, r0
 800857a:	2b00      	cmp	r3, #0
 800857c:	d001      	beq.n	8008582 <MX_USART2_UART_Init+0x4e>
  {
    ret = HAL_ERROR;
 800857e:	2301      	movs	r3, #1
 8008580:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8008582:	7bfb      	ldrb	r3, [r7, #15]
}
 8008584:	4618      	mov	r0, r3
 8008586:	3710      	adds	r7, #16
 8008588:	46bd      	mov	sp, r7
 800858a:	bd80      	pop	{r7, pc}
 800858c:	40004400 	.word	0x40004400

08008590 <__io_putchar>:
  (void)HAL_UART_Transmit(&hcom_uart[COM_ActiveLogPort], (uint8_t *)&ch, 1, COM_POLL_TIMEOUT);
  return ch;
}
#else /* For GCC Toolchains */
int __io_putchar (int ch)
{
 8008590:	b580      	push	{r7, lr}
 8008592:	b082      	sub	sp, #8
 8008594:	af00      	add	r7, sp, #0
 8008596:	6078      	str	r0, [r7, #4]
  (void)HAL_UART_Transmit(&hcom_uart[COM_ActiveLogPort], (uint8_t *)&ch, 1, COM_POLL_TIMEOUT);
 8008598:	4b09      	ldr	r3, [pc, #36]	; (80085c0 <__io_putchar+0x30>)
 800859a:	781b      	ldrb	r3, [r3, #0]
 800859c:	461a      	mov	r2, r3
 800859e:	4613      	mov	r3, r2
 80085a0:	011b      	lsls	r3, r3, #4
 80085a2:	4413      	add	r3, r2
 80085a4:	009b      	lsls	r3, r3, #2
 80085a6:	4a07      	ldr	r2, [pc, #28]	; (80085c4 <__io_putchar+0x34>)
 80085a8:	1898      	adds	r0, r3, r2
 80085aa:	1d39      	adds	r1, r7, #4
 80085ac:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80085b0:	2201      	movs	r2, #1
 80085b2:	f002 fd1a 	bl	800afea <HAL_UART_Transmit>
  return ch;
 80085b6:	687b      	ldr	r3, [r7, #4]
}
 80085b8:	4618      	mov	r0, r3
 80085ba:	3708      	adds	r7, #8
 80085bc:	46bd      	mov	sp, r7
 80085be:	bd80      	pop	{r7, pc}
 80085c0:	200004ec 	.word	0x200004ec
 80085c4:	200004a8 	.word	0x200004a8

080085c8 <USART2_MspInit>:
 * @param  huart USART2 handle
 * @retval None
 */

static void USART2_MspInit(UART_HandleTypeDef* uartHandle)
{
 80085c8:	b580      	push	{r7, lr}
 80085ca:	b08a      	sub	sp, #40	; 0x28
 80085cc:	af00      	add	r7, sp, #0
 80085ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_USART2_CLK_ENABLE();
 80085d0:	2300      	movs	r3, #0
 80085d2:	613b      	str	r3, [r7, #16]
 80085d4:	4b1e      	ldr	r3, [pc, #120]	; (8008650 <USART2_MspInit+0x88>)
 80085d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80085d8:	4a1d      	ldr	r2, [pc, #116]	; (8008650 <USART2_MspInit+0x88>)
 80085da:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80085de:	6413      	str	r3, [r2, #64]	; 0x40
 80085e0:	4b1b      	ldr	r3, [pc, #108]	; (8008650 <USART2_MspInit+0x88>)
 80085e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80085e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80085e8:	613b      	str	r3, [r7, #16]
 80085ea:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80085ec:	2300      	movs	r3, #0
 80085ee:	60fb      	str	r3, [r7, #12]
 80085f0:	4b17      	ldr	r3, [pc, #92]	; (8008650 <USART2_MspInit+0x88>)
 80085f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80085f4:	4a16      	ldr	r2, [pc, #88]	; (8008650 <USART2_MspInit+0x88>)
 80085f6:	f043 0301 	orr.w	r3, r3, #1
 80085fa:	6313      	str	r3, [r2, #48]	; 0x30
 80085fc:	4b14      	ldr	r3, [pc, #80]	; (8008650 <USART2_MspInit+0x88>)
 80085fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008600:	f003 0301 	and.w	r3, r3, #1
 8008604:	60fb      	str	r3, [r7, #12]
 8008606:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = BUS_USART2_TX_GPIO_PIN;
 8008608:	2304      	movs	r3, #4
 800860a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800860c:	2302      	movs	r3, #2
 800860e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008610:	2300      	movs	r3, #0
 8008612:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008614:	2300      	movs	r3, #0
 8008616:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_USART2_TX_GPIO_AF;
 8008618:	2307      	movs	r3, #7
 800861a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(BUS_USART2_TX_GPIO_PORT, &GPIO_InitStruct);
 800861c:	f107 0314 	add.w	r3, r7, #20
 8008620:	4619      	mov	r1, r3
 8008622:	480c      	ldr	r0, [pc, #48]	; (8008654 <USART2_MspInit+0x8c>)
 8008624:	f000 fa12 	bl	8008a4c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BUS_USART2_RX_GPIO_PIN;
 8008628:	2308      	movs	r3, #8
 800862a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800862c:	2302      	movs	r3, #2
 800862e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008630:	2300      	movs	r3, #0
 8008632:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008634:	2300      	movs	r3, #0
 8008636:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_USART2_RX_GPIO_AF;
 8008638:	2307      	movs	r3, #7
 800863a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(BUS_USART2_RX_GPIO_PORT, &GPIO_InitStruct);
 800863c:	f107 0314 	add.w	r3, r7, #20
 8008640:	4619      	mov	r1, r3
 8008642:	4804      	ldr	r0, [pc, #16]	; (8008654 <USART2_MspInit+0x8c>)
 8008644:	f000 fa02 	bl	8008a4c <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
}
 8008648:	bf00      	nop
 800864a:	3728      	adds	r7, #40	; 0x28
 800864c:	46bd      	mov	sp, r7
 800864e:	bd80      	pop	{r7, pc}
 8008650:	40023800 	.word	0x40023800
 8008654:	40020000 	.word	0x40020000

08008658 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8008658:	b580      	push	{r7, lr}
 800865a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800865c:	4b0e      	ldr	r3, [pc, #56]	; (8008698 <HAL_Init+0x40>)
 800865e:	681b      	ldr	r3, [r3, #0]
 8008660:	4a0d      	ldr	r2, [pc, #52]	; (8008698 <HAL_Init+0x40>)
 8008662:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8008666:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8008668:	4b0b      	ldr	r3, [pc, #44]	; (8008698 <HAL_Init+0x40>)
 800866a:	681b      	ldr	r3, [r3, #0]
 800866c:	4a0a      	ldr	r2, [pc, #40]	; (8008698 <HAL_Init+0x40>)
 800866e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8008672:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8008674:	4b08      	ldr	r3, [pc, #32]	; (8008698 <HAL_Init+0x40>)
 8008676:	681b      	ldr	r3, [r3, #0]
 8008678:	4a07      	ldr	r2, [pc, #28]	; (8008698 <HAL_Init+0x40>)
 800867a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800867e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8008680:	2003      	movs	r0, #3
 8008682:	f000 f94f 	bl	8008924 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8008686:	2000      	movs	r0, #0
 8008688:	f000 f808 	bl	800869c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800868c:	f7fa fb6c 	bl	8002d68 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8008690:	2300      	movs	r3, #0
}
 8008692:	4618      	mov	r0, r3
 8008694:	bd80      	pop	{r7, pc}
 8008696:	bf00      	nop
 8008698:	40023c00 	.word	0x40023c00

0800869c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800869c:	b580      	push	{r7, lr}
 800869e:	b082      	sub	sp, #8
 80086a0:	af00      	add	r7, sp, #0
 80086a2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80086a4:	4b12      	ldr	r3, [pc, #72]	; (80086f0 <HAL_InitTick+0x54>)
 80086a6:	681a      	ldr	r2, [r3, #0]
 80086a8:	4b12      	ldr	r3, [pc, #72]	; (80086f4 <HAL_InitTick+0x58>)
 80086aa:	781b      	ldrb	r3, [r3, #0]
 80086ac:	4619      	mov	r1, r3
 80086ae:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80086b2:	fbb3 f3f1 	udiv	r3, r3, r1
 80086b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80086ba:	4618      	mov	r0, r3
 80086bc:	f000 f967 	bl	800898e <HAL_SYSTICK_Config>
 80086c0:	4603      	mov	r3, r0
 80086c2:	2b00      	cmp	r3, #0
 80086c4:	d001      	beq.n	80086ca <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80086c6:	2301      	movs	r3, #1
 80086c8:	e00e      	b.n	80086e8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	2b0f      	cmp	r3, #15
 80086ce:	d80a      	bhi.n	80086e6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80086d0:	2200      	movs	r2, #0
 80086d2:	6879      	ldr	r1, [r7, #4]
 80086d4:	f04f 30ff 	mov.w	r0, #4294967295
 80086d8:	f000 f92f 	bl	800893a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80086dc:	4a06      	ldr	r2, [pc, #24]	; (80086f8 <HAL_InitTick+0x5c>)
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80086e2:	2300      	movs	r3, #0
 80086e4:	e000      	b.n	80086e8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80086e6:	2301      	movs	r3, #1
}
 80086e8:	4618      	mov	r0, r3
 80086ea:	3708      	adds	r7, #8
 80086ec:	46bd      	mov	sp, r7
 80086ee:	bd80      	pop	{r7, pc}
 80086f0:	20000004 	.word	0x20000004
 80086f4:	200000f4 	.word	0x200000f4
 80086f8:	200000f0 	.word	0x200000f0

080086fc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80086fc:	b480      	push	{r7}
 80086fe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8008700:	4b06      	ldr	r3, [pc, #24]	; (800871c <HAL_IncTick+0x20>)
 8008702:	781b      	ldrb	r3, [r3, #0]
 8008704:	461a      	mov	r2, r3
 8008706:	4b06      	ldr	r3, [pc, #24]	; (8008720 <HAL_IncTick+0x24>)
 8008708:	681b      	ldr	r3, [r3, #0]
 800870a:	4413      	add	r3, r2
 800870c:	4a04      	ldr	r2, [pc, #16]	; (8008720 <HAL_IncTick+0x24>)
 800870e:	6013      	str	r3, [r2, #0]
}
 8008710:	bf00      	nop
 8008712:	46bd      	mov	sp, r7
 8008714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008718:	4770      	bx	lr
 800871a:	bf00      	nop
 800871c:	200000f4 	.word	0x200000f4
 8008720:	200004f0 	.word	0x200004f0

08008724 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8008724:	b480      	push	{r7}
 8008726:	af00      	add	r7, sp, #0
  return uwTick;
 8008728:	4b03      	ldr	r3, [pc, #12]	; (8008738 <HAL_GetTick+0x14>)
 800872a:	681b      	ldr	r3, [r3, #0]
}
 800872c:	4618      	mov	r0, r3
 800872e:	46bd      	mov	sp, r7
 8008730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008734:	4770      	bx	lr
 8008736:	bf00      	nop
 8008738:	200004f0 	.word	0x200004f0

0800873c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800873c:	b580      	push	{r7, lr}
 800873e:	b084      	sub	sp, #16
 8008740:	af00      	add	r7, sp, #0
 8008742:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8008744:	f7ff ffee 	bl	8008724 <HAL_GetTick>
 8008748:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800874e:	68fb      	ldr	r3, [r7, #12]
 8008750:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008754:	d005      	beq.n	8008762 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8008756:	4b0a      	ldr	r3, [pc, #40]	; (8008780 <HAL_Delay+0x44>)
 8008758:	781b      	ldrb	r3, [r3, #0]
 800875a:	461a      	mov	r2, r3
 800875c:	68fb      	ldr	r3, [r7, #12]
 800875e:	4413      	add	r3, r2
 8008760:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8008762:	bf00      	nop
 8008764:	f7ff ffde 	bl	8008724 <HAL_GetTick>
 8008768:	4602      	mov	r2, r0
 800876a:	68bb      	ldr	r3, [r7, #8]
 800876c:	1ad3      	subs	r3, r2, r3
 800876e:	68fa      	ldr	r2, [r7, #12]
 8008770:	429a      	cmp	r2, r3
 8008772:	d8f7      	bhi.n	8008764 <HAL_Delay+0x28>
  {
  }
}
 8008774:	bf00      	nop
 8008776:	bf00      	nop
 8008778:	3710      	adds	r7, #16
 800877a:	46bd      	mov	sp, r7
 800877c:	bd80      	pop	{r7, pc}
 800877e:	bf00      	nop
 8008780:	200000f4 	.word	0x200000f4

08008784 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8008784:	b480      	push	{r7}
 8008786:	b085      	sub	sp, #20
 8008788:	af00      	add	r7, sp, #0
 800878a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	f003 0307 	and.w	r3, r3, #7
 8008792:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8008794:	4b0c      	ldr	r3, [pc, #48]	; (80087c8 <__NVIC_SetPriorityGrouping+0x44>)
 8008796:	68db      	ldr	r3, [r3, #12]
 8008798:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800879a:	68ba      	ldr	r2, [r7, #8]
 800879c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80087a0:	4013      	ands	r3, r2
 80087a2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80087a4:	68fb      	ldr	r3, [r7, #12]
 80087a6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80087a8:	68bb      	ldr	r3, [r7, #8]
 80087aa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80087ac:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80087b0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80087b4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80087b6:	4a04      	ldr	r2, [pc, #16]	; (80087c8 <__NVIC_SetPriorityGrouping+0x44>)
 80087b8:	68bb      	ldr	r3, [r7, #8]
 80087ba:	60d3      	str	r3, [r2, #12]
}
 80087bc:	bf00      	nop
 80087be:	3714      	adds	r7, #20
 80087c0:	46bd      	mov	sp, r7
 80087c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087c6:	4770      	bx	lr
 80087c8:	e000ed00 	.word	0xe000ed00

080087cc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80087cc:	b480      	push	{r7}
 80087ce:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80087d0:	4b04      	ldr	r3, [pc, #16]	; (80087e4 <__NVIC_GetPriorityGrouping+0x18>)
 80087d2:	68db      	ldr	r3, [r3, #12]
 80087d4:	0a1b      	lsrs	r3, r3, #8
 80087d6:	f003 0307 	and.w	r3, r3, #7
}
 80087da:	4618      	mov	r0, r3
 80087dc:	46bd      	mov	sp, r7
 80087de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087e2:	4770      	bx	lr
 80087e4:	e000ed00 	.word	0xe000ed00

080087e8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80087e8:	b480      	push	{r7}
 80087ea:	b083      	sub	sp, #12
 80087ec:	af00      	add	r7, sp, #0
 80087ee:	4603      	mov	r3, r0
 80087f0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80087f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80087f6:	2b00      	cmp	r3, #0
 80087f8:	db0b      	blt.n	8008812 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80087fa:	79fb      	ldrb	r3, [r7, #7]
 80087fc:	f003 021f 	and.w	r2, r3, #31
 8008800:	4907      	ldr	r1, [pc, #28]	; (8008820 <__NVIC_EnableIRQ+0x38>)
 8008802:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008806:	095b      	lsrs	r3, r3, #5
 8008808:	2001      	movs	r0, #1
 800880a:	fa00 f202 	lsl.w	r2, r0, r2
 800880e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8008812:	bf00      	nop
 8008814:	370c      	adds	r7, #12
 8008816:	46bd      	mov	sp, r7
 8008818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800881c:	4770      	bx	lr
 800881e:	bf00      	nop
 8008820:	e000e100 	.word	0xe000e100

08008824 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8008824:	b480      	push	{r7}
 8008826:	b083      	sub	sp, #12
 8008828:	af00      	add	r7, sp, #0
 800882a:	4603      	mov	r3, r0
 800882c:	6039      	str	r1, [r7, #0]
 800882e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8008830:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008834:	2b00      	cmp	r3, #0
 8008836:	db0a      	blt.n	800884e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008838:	683b      	ldr	r3, [r7, #0]
 800883a:	b2da      	uxtb	r2, r3
 800883c:	490c      	ldr	r1, [pc, #48]	; (8008870 <__NVIC_SetPriority+0x4c>)
 800883e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008842:	0112      	lsls	r2, r2, #4
 8008844:	b2d2      	uxtb	r2, r2
 8008846:	440b      	add	r3, r1
 8008848:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800884c:	e00a      	b.n	8008864 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800884e:	683b      	ldr	r3, [r7, #0]
 8008850:	b2da      	uxtb	r2, r3
 8008852:	4908      	ldr	r1, [pc, #32]	; (8008874 <__NVIC_SetPriority+0x50>)
 8008854:	79fb      	ldrb	r3, [r7, #7]
 8008856:	f003 030f 	and.w	r3, r3, #15
 800885a:	3b04      	subs	r3, #4
 800885c:	0112      	lsls	r2, r2, #4
 800885e:	b2d2      	uxtb	r2, r2
 8008860:	440b      	add	r3, r1
 8008862:	761a      	strb	r2, [r3, #24]
}
 8008864:	bf00      	nop
 8008866:	370c      	adds	r7, #12
 8008868:	46bd      	mov	sp, r7
 800886a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800886e:	4770      	bx	lr
 8008870:	e000e100 	.word	0xe000e100
 8008874:	e000ed00 	.word	0xe000ed00

08008878 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8008878:	b480      	push	{r7}
 800887a:	b089      	sub	sp, #36	; 0x24
 800887c:	af00      	add	r7, sp, #0
 800887e:	60f8      	str	r0, [r7, #12]
 8008880:	60b9      	str	r1, [r7, #8]
 8008882:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8008884:	68fb      	ldr	r3, [r7, #12]
 8008886:	f003 0307 	and.w	r3, r3, #7
 800888a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800888c:	69fb      	ldr	r3, [r7, #28]
 800888e:	f1c3 0307 	rsb	r3, r3, #7
 8008892:	2b04      	cmp	r3, #4
 8008894:	bf28      	it	cs
 8008896:	2304      	movcs	r3, #4
 8008898:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800889a:	69fb      	ldr	r3, [r7, #28]
 800889c:	3304      	adds	r3, #4
 800889e:	2b06      	cmp	r3, #6
 80088a0:	d902      	bls.n	80088a8 <NVIC_EncodePriority+0x30>
 80088a2:	69fb      	ldr	r3, [r7, #28]
 80088a4:	3b03      	subs	r3, #3
 80088a6:	e000      	b.n	80088aa <NVIC_EncodePriority+0x32>
 80088a8:	2300      	movs	r3, #0
 80088aa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80088ac:	f04f 32ff 	mov.w	r2, #4294967295
 80088b0:	69bb      	ldr	r3, [r7, #24]
 80088b2:	fa02 f303 	lsl.w	r3, r2, r3
 80088b6:	43da      	mvns	r2, r3
 80088b8:	68bb      	ldr	r3, [r7, #8]
 80088ba:	401a      	ands	r2, r3
 80088bc:	697b      	ldr	r3, [r7, #20]
 80088be:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80088c0:	f04f 31ff 	mov.w	r1, #4294967295
 80088c4:	697b      	ldr	r3, [r7, #20]
 80088c6:	fa01 f303 	lsl.w	r3, r1, r3
 80088ca:	43d9      	mvns	r1, r3
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80088d0:	4313      	orrs	r3, r2
         );
}
 80088d2:	4618      	mov	r0, r3
 80088d4:	3724      	adds	r7, #36	; 0x24
 80088d6:	46bd      	mov	sp, r7
 80088d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088dc:	4770      	bx	lr
	...

080088e0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80088e0:	b580      	push	{r7, lr}
 80088e2:	b082      	sub	sp, #8
 80088e4:	af00      	add	r7, sp, #0
 80088e6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	3b01      	subs	r3, #1
 80088ec:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80088f0:	d301      	bcc.n	80088f6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80088f2:	2301      	movs	r3, #1
 80088f4:	e00f      	b.n	8008916 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80088f6:	4a0a      	ldr	r2, [pc, #40]	; (8008920 <SysTick_Config+0x40>)
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	3b01      	subs	r3, #1
 80088fc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80088fe:	210f      	movs	r1, #15
 8008900:	f04f 30ff 	mov.w	r0, #4294967295
 8008904:	f7ff ff8e 	bl	8008824 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8008908:	4b05      	ldr	r3, [pc, #20]	; (8008920 <SysTick_Config+0x40>)
 800890a:	2200      	movs	r2, #0
 800890c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800890e:	4b04      	ldr	r3, [pc, #16]	; (8008920 <SysTick_Config+0x40>)
 8008910:	2207      	movs	r2, #7
 8008912:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8008914:	2300      	movs	r3, #0
}
 8008916:	4618      	mov	r0, r3
 8008918:	3708      	adds	r7, #8
 800891a:	46bd      	mov	sp, r7
 800891c:	bd80      	pop	{r7, pc}
 800891e:	bf00      	nop
 8008920:	e000e010 	.word	0xe000e010

08008924 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8008924:	b580      	push	{r7, lr}
 8008926:	b082      	sub	sp, #8
 8008928:	af00      	add	r7, sp, #0
 800892a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800892c:	6878      	ldr	r0, [r7, #4]
 800892e:	f7ff ff29 	bl	8008784 <__NVIC_SetPriorityGrouping>
}
 8008932:	bf00      	nop
 8008934:	3708      	adds	r7, #8
 8008936:	46bd      	mov	sp, r7
 8008938:	bd80      	pop	{r7, pc}

0800893a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800893a:	b580      	push	{r7, lr}
 800893c:	b086      	sub	sp, #24
 800893e:	af00      	add	r7, sp, #0
 8008940:	4603      	mov	r3, r0
 8008942:	60b9      	str	r1, [r7, #8]
 8008944:	607a      	str	r2, [r7, #4]
 8008946:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8008948:	2300      	movs	r3, #0
 800894a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800894c:	f7ff ff3e 	bl	80087cc <__NVIC_GetPriorityGrouping>
 8008950:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8008952:	687a      	ldr	r2, [r7, #4]
 8008954:	68b9      	ldr	r1, [r7, #8]
 8008956:	6978      	ldr	r0, [r7, #20]
 8008958:	f7ff ff8e 	bl	8008878 <NVIC_EncodePriority>
 800895c:	4602      	mov	r2, r0
 800895e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008962:	4611      	mov	r1, r2
 8008964:	4618      	mov	r0, r3
 8008966:	f7ff ff5d 	bl	8008824 <__NVIC_SetPriority>
}
 800896a:	bf00      	nop
 800896c:	3718      	adds	r7, #24
 800896e:	46bd      	mov	sp, r7
 8008970:	bd80      	pop	{r7, pc}

08008972 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8008972:	b580      	push	{r7, lr}
 8008974:	b082      	sub	sp, #8
 8008976:	af00      	add	r7, sp, #0
 8008978:	4603      	mov	r3, r0
 800897a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800897c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008980:	4618      	mov	r0, r3
 8008982:	f7ff ff31 	bl	80087e8 <__NVIC_EnableIRQ>
}
 8008986:	bf00      	nop
 8008988:	3708      	adds	r7, #8
 800898a:	46bd      	mov	sp, r7
 800898c:	bd80      	pop	{r7, pc}

0800898e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800898e:	b580      	push	{r7, lr}
 8008990:	b082      	sub	sp, #8
 8008992:	af00      	add	r7, sp, #0
 8008994:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8008996:	6878      	ldr	r0, [r7, #4]
 8008998:	f7ff ffa2 	bl	80088e0 <SysTick_Config>
 800899c:	4603      	mov	r3, r0
}
 800899e:	4618      	mov	r0, r3
 80089a0:	3708      	adds	r7, #8
 80089a2:	46bd      	mov	sp, r7
 80089a4:	bd80      	pop	{r7, pc}

080089a6 <HAL_EXTI_RegisterCallback>:
  *         This parameter can be one of @arg @ref EXTI_CallbackIDTypeDef values.
  * @param  pPendingCbfn function pointer to be stored as callback.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_RegisterCallback(EXTI_HandleTypeDef *hexti, EXTI_CallbackIDTypeDef CallbackID, void (*pPendingCbfn)(void))
{
 80089a6:	b480      	push	{r7}
 80089a8:	b087      	sub	sp, #28
 80089aa:	af00      	add	r7, sp, #0
 80089ac:	60f8      	str	r0, [r7, #12]
 80089ae:	460b      	mov	r3, r1
 80089b0:	607a      	str	r2, [r7, #4]
 80089b2:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 80089b4:	2300      	movs	r3, #0
 80089b6:	75fb      	strb	r3, [r7, #23]

  switch (CallbackID)
 80089b8:	7afb      	ldrb	r3, [r7, #11]
 80089ba:	2b00      	cmp	r3, #0
 80089bc:	d103      	bne.n	80089c6 <HAL_EXTI_RegisterCallback+0x20>
  {
    case  HAL_EXTI_COMMON_CB_ID:
      hexti->PendingCallback = pPendingCbfn;
 80089be:	68fb      	ldr	r3, [r7, #12]
 80089c0:	687a      	ldr	r2, [r7, #4]
 80089c2:	605a      	str	r2, [r3, #4]
      break;
 80089c4:	e002      	b.n	80089cc <HAL_EXTI_RegisterCallback+0x26>

    default:
      status = HAL_ERROR;
 80089c6:	2301      	movs	r3, #1
 80089c8:	75fb      	strb	r3, [r7, #23]
      break;
 80089ca:	bf00      	nop
  }

  return status;
 80089cc:	7dfb      	ldrb	r3, [r7, #23]
}
 80089ce:	4618      	mov	r0, r3
 80089d0:	371c      	adds	r7, #28
 80089d2:	46bd      	mov	sp, r7
 80089d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089d8:	4770      	bx	lr

080089da <HAL_EXTI_GetHandle>:
  * @param  ExtiLine Exti line number.
  *         This parameter can be from 0 to @ref EXTI_LINE_NB.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_GetHandle(EXTI_HandleTypeDef *hexti, uint32_t ExtiLine)
{
 80089da:	b480      	push	{r7}
 80089dc:	b083      	sub	sp, #12
 80089de:	af00      	add	r7, sp, #0
 80089e0:	6078      	str	r0, [r7, #4]
 80089e2:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(ExtiLine));

  /* Check null pointer */
  if (hexti == NULL)
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	2b00      	cmp	r3, #0
 80089e8:	d101      	bne.n	80089ee <HAL_EXTI_GetHandle+0x14>
  {
    return HAL_ERROR;
 80089ea:	2301      	movs	r3, #1
 80089ec:	e003      	b.n	80089f6 <HAL_EXTI_GetHandle+0x1c>
  }
  else
  {
    /* Store line number as handle private field */
    hexti->Line = ExtiLine;
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	683a      	ldr	r2, [r7, #0]
 80089f2:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 80089f4:	2300      	movs	r3, #0
  }
}
 80089f6:	4618      	mov	r0, r3
 80089f8:	370c      	adds	r7, #12
 80089fa:	46bd      	mov	sp, r7
 80089fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a00:	4770      	bx	lr
	...

08008a04 <HAL_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  hexti Exti handle.
  * @retval none.
  */
void HAL_EXTI_IRQHandler(EXTI_HandleTypeDef *hexti)
{
 8008a04:	b580      	push	{r7, lr}
 8008a06:	b084      	sub	sp, #16
 8008a08:	af00      	add	r7, sp, #0
 8008a0a:	6078      	str	r0, [r7, #4]
  uint32_t regval;
  uint32_t maskline;

  /* Compute line mask */
  maskline = (1uL << (hexti->Line & EXTI_PIN_MASK));
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	681b      	ldr	r3, [r3, #0]
 8008a10:	f003 031f 	and.w	r3, r3, #31
 8008a14:	2201      	movs	r2, #1
 8008a16:	fa02 f303 	lsl.w	r3, r2, r3
 8008a1a:	60fb      	str	r3, [r7, #12]

  /* Get pending bit  */
  regval = (EXTI->PR & maskline);
 8008a1c:	4b0a      	ldr	r3, [pc, #40]	; (8008a48 <HAL_EXTI_IRQHandler+0x44>)
 8008a1e:	695b      	ldr	r3, [r3, #20]
 8008a20:	68fa      	ldr	r2, [r7, #12]
 8008a22:	4013      	ands	r3, r2
 8008a24:	60bb      	str	r3, [r7, #8]
  if (regval != 0x00u)
 8008a26:	68bb      	ldr	r3, [r7, #8]
 8008a28:	2b00      	cmp	r3, #0
 8008a2a:	d009      	beq.n	8008a40 <HAL_EXTI_IRQHandler+0x3c>
  {
    /* Clear pending bit */
    EXTI->PR = maskline;
 8008a2c:	4a06      	ldr	r2, [pc, #24]	; (8008a48 <HAL_EXTI_IRQHandler+0x44>)
 8008a2e:	68fb      	ldr	r3, [r7, #12]
 8008a30:	6153      	str	r3, [r2, #20]

    /* Call callback */
    if (hexti->PendingCallback != NULL)
 8008a32:	687b      	ldr	r3, [r7, #4]
 8008a34:	685b      	ldr	r3, [r3, #4]
 8008a36:	2b00      	cmp	r3, #0
 8008a38:	d002      	beq.n	8008a40 <HAL_EXTI_IRQHandler+0x3c>
    {
      hexti->PendingCallback();
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	685b      	ldr	r3, [r3, #4]
 8008a3e:	4798      	blx	r3
    }
  }
}
 8008a40:	bf00      	nop
 8008a42:	3710      	adds	r7, #16
 8008a44:	46bd      	mov	sp, r7
 8008a46:	bd80      	pop	{r7, pc}
 8008a48:	40013c00 	.word	0x40013c00

08008a4c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8008a4c:	b480      	push	{r7}
 8008a4e:	b089      	sub	sp, #36	; 0x24
 8008a50:	af00      	add	r7, sp, #0
 8008a52:	6078      	str	r0, [r7, #4]
 8008a54:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8008a56:	2300      	movs	r3, #0
 8008a58:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8008a5a:	2300      	movs	r3, #0
 8008a5c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8008a5e:	2300      	movs	r3, #0
 8008a60:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8008a62:	2300      	movs	r3, #0
 8008a64:	61fb      	str	r3, [r7, #28]
 8008a66:	e159      	b.n	8008d1c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8008a68:	2201      	movs	r2, #1
 8008a6a:	69fb      	ldr	r3, [r7, #28]
 8008a6c:	fa02 f303 	lsl.w	r3, r2, r3
 8008a70:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8008a72:	683b      	ldr	r3, [r7, #0]
 8008a74:	681b      	ldr	r3, [r3, #0]
 8008a76:	697a      	ldr	r2, [r7, #20]
 8008a78:	4013      	ands	r3, r2
 8008a7a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8008a7c:	693a      	ldr	r2, [r7, #16]
 8008a7e:	697b      	ldr	r3, [r7, #20]
 8008a80:	429a      	cmp	r2, r3
 8008a82:	f040 8148 	bne.w	8008d16 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8008a86:	683b      	ldr	r3, [r7, #0]
 8008a88:	685b      	ldr	r3, [r3, #4]
 8008a8a:	f003 0303 	and.w	r3, r3, #3
 8008a8e:	2b01      	cmp	r3, #1
 8008a90:	d005      	beq.n	8008a9e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8008a92:	683b      	ldr	r3, [r7, #0]
 8008a94:	685b      	ldr	r3, [r3, #4]
 8008a96:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8008a9a:	2b02      	cmp	r3, #2
 8008a9c:	d130      	bne.n	8008b00 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	689b      	ldr	r3, [r3, #8]
 8008aa2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8008aa4:	69fb      	ldr	r3, [r7, #28]
 8008aa6:	005b      	lsls	r3, r3, #1
 8008aa8:	2203      	movs	r2, #3
 8008aaa:	fa02 f303 	lsl.w	r3, r2, r3
 8008aae:	43db      	mvns	r3, r3
 8008ab0:	69ba      	ldr	r2, [r7, #24]
 8008ab2:	4013      	ands	r3, r2
 8008ab4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8008ab6:	683b      	ldr	r3, [r7, #0]
 8008ab8:	68da      	ldr	r2, [r3, #12]
 8008aba:	69fb      	ldr	r3, [r7, #28]
 8008abc:	005b      	lsls	r3, r3, #1
 8008abe:	fa02 f303 	lsl.w	r3, r2, r3
 8008ac2:	69ba      	ldr	r2, [r7, #24]
 8008ac4:	4313      	orrs	r3, r2
 8008ac6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	69ba      	ldr	r2, [r7, #24]
 8008acc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	685b      	ldr	r3, [r3, #4]
 8008ad2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8008ad4:	2201      	movs	r2, #1
 8008ad6:	69fb      	ldr	r3, [r7, #28]
 8008ad8:	fa02 f303 	lsl.w	r3, r2, r3
 8008adc:	43db      	mvns	r3, r3
 8008ade:	69ba      	ldr	r2, [r7, #24]
 8008ae0:	4013      	ands	r3, r2
 8008ae2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8008ae4:	683b      	ldr	r3, [r7, #0]
 8008ae6:	685b      	ldr	r3, [r3, #4]
 8008ae8:	091b      	lsrs	r3, r3, #4
 8008aea:	f003 0201 	and.w	r2, r3, #1
 8008aee:	69fb      	ldr	r3, [r7, #28]
 8008af0:	fa02 f303 	lsl.w	r3, r2, r3
 8008af4:	69ba      	ldr	r2, [r7, #24]
 8008af6:	4313      	orrs	r3, r2
 8008af8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	69ba      	ldr	r2, [r7, #24]
 8008afe:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8008b00:	683b      	ldr	r3, [r7, #0]
 8008b02:	685b      	ldr	r3, [r3, #4]
 8008b04:	f003 0303 	and.w	r3, r3, #3
 8008b08:	2b03      	cmp	r3, #3
 8008b0a:	d017      	beq.n	8008b3c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	68db      	ldr	r3, [r3, #12]
 8008b10:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8008b12:	69fb      	ldr	r3, [r7, #28]
 8008b14:	005b      	lsls	r3, r3, #1
 8008b16:	2203      	movs	r2, #3
 8008b18:	fa02 f303 	lsl.w	r3, r2, r3
 8008b1c:	43db      	mvns	r3, r3
 8008b1e:	69ba      	ldr	r2, [r7, #24]
 8008b20:	4013      	ands	r3, r2
 8008b22:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8008b24:	683b      	ldr	r3, [r7, #0]
 8008b26:	689a      	ldr	r2, [r3, #8]
 8008b28:	69fb      	ldr	r3, [r7, #28]
 8008b2a:	005b      	lsls	r3, r3, #1
 8008b2c:	fa02 f303 	lsl.w	r3, r2, r3
 8008b30:	69ba      	ldr	r2, [r7, #24]
 8008b32:	4313      	orrs	r3, r2
 8008b34:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	69ba      	ldr	r2, [r7, #24]
 8008b3a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8008b3c:	683b      	ldr	r3, [r7, #0]
 8008b3e:	685b      	ldr	r3, [r3, #4]
 8008b40:	f003 0303 	and.w	r3, r3, #3
 8008b44:	2b02      	cmp	r3, #2
 8008b46:	d123      	bne.n	8008b90 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8008b48:	69fb      	ldr	r3, [r7, #28]
 8008b4a:	08da      	lsrs	r2, r3, #3
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	3208      	adds	r2, #8
 8008b50:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008b54:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8008b56:	69fb      	ldr	r3, [r7, #28]
 8008b58:	f003 0307 	and.w	r3, r3, #7
 8008b5c:	009b      	lsls	r3, r3, #2
 8008b5e:	220f      	movs	r2, #15
 8008b60:	fa02 f303 	lsl.w	r3, r2, r3
 8008b64:	43db      	mvns	r3, r3
 8008b66:	69ba      	ldr	r2, [r7, #24]
 8008b68:	4013      	ands	r3, r2
 8008b6a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8008b6c:	683b      	ldr	r3, [r7, #0]
 8008b6e:	691a      	ldr	r2, [r3, #16]
 8008b70:	69fb      	ldr	r3, [r7, #28]
 8008b72:	f003 0307 	and.w	r3, r3, #7
 8008b76:	009b      	lsls	r3, r3, #2
 8008b78:	fa02 f303 	lsl.w	r3, r2, r3
 8008b7c:	69ba      	ldr	r2, [r7, #24]
 8008b7e:	4313      	orrs	r3, r2
 8008b80:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8008b82:	69fb      	ldr	r3, [r7, #28]
 8008b84:	08da      	lsrs	r2, r3, #3
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	3208      	adds	r2, #8
 8008b8a:	69b9      	ldr	r1, [r7, #24]
 8008b8c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	681b      	ldr	r3, [r3, #0]
 8008b94:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8008b96:	69fb      	ldr	r3, [r7, #28]
 8008b98:	005b      	lsls	r3, r3, #1
 8008b9a:	2203      	movs	r2, #3
 8008b9c:	fa02 f303 	lsl.w	r3, r2, r3
 8008ba0:	43db      	mvns	r3, r3
 8008ba2:	69ba      	ldr	r2, [r7, #24]
 8008ba4:	4013      	ands	r3, r2
 8008ba6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8008ba8:	683b      	ldr	r3, [r7, #0]
 8008baa:	685b      	ldr	r3, [r3, #4]
 8008bac:	f003 0203 	and.w	r2, r3, #3
 8008bb0:	69fb      	ldr	r3, [r7, #28]
 8008bb2:	005b      	lsls	r3, r3, #1
 8008bb4:	fa02 f303 	lsl.w	r3, r2, r3
 8008bb8:	69ba      	ldr	r2, [r7, #24]
 8008bba:	4313      	orrs	r3, r2
 8008bbc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	69ba      	ldr	r2, [r7, #24]
 8008bc2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8008bc4:	683b      	ldr	r3, [r7, #0]
 8008bc6:	685b      	ldr	r3, [r3, #4]
 8008bc8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8008bcc:	2b00      	cmp	r3, #0
 8008bce:	f000 80a2 	beq.w	8008d16 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8008bd2:	2300      	movs	r3, #0
 8008bd4:	60fb      	str	r3, [r7, #12]
 8008bd6:	4b57      	ldr	r3, [pc, #348]	; (8008d34 <HAL_GPIO_Init+0x2e8>)
 8008bd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008bda:	4a56      	ldr	r2, [pc, #344]	; (8008d34 <HAL_GPIO_Init+0x2e8>)
 8008bdc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8008be0:	6453      	str	r3, [r2, #68]	; 0x44
 8008be2:	4b54      	ldr	r3, [pc, #336]	; (8008d34 <HAL_GPIO_Init+0x2e8>)
 8008be4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008be6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008bea:	60fb      	str	r3, [r7, #12]
 8008bec:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8008bee:	4a52      	ldr	r2, [pc, #328]	; (8008d38 <HAL_GPIO_Init+0x2ec>)
 8008bf0:	69fb      	ldr	r3, [r7, #28]
 8008bf2:	089b      	lsrs	r3, r3, #2
 8008bf4:	3302      	adds	r3, #2
 8008bf6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008bfa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8008bfc:	69fb      	ldr	r3, [r7, #28]
 8008bfe:	f003 0303 	and.w	r3, r3, #3
 8008c02:	009b      	lsls	r3, r3, #2
 8008c04:	220f      	movs	r2, #15
 8008c06:	fa02 f303 	lsl.w	r3, r2, r3
 8008c0a:	43db      	mvns	r3, r3
 8008c0c:	69ba      	ldr	r2, [r7, #24]
 8008c0e:	4013      	ands	r3, r2
 8008c10:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8008c12:	687b      	ldr	r3, [r7, #4]
 8008c14:	4a49      	ldr	r2, [pc, #292]	; (8008d3c <HAL_GPIO_Init+0x2f0>)
 8008c16:	4293      	cmp	r3, r2
 8008c18:	d019      	beq.n	8008c4e <HAL_GPIO_Init+0x202>
 8008c1a:	687b      	ldr	r3, [r7, #4]
 8008c1c:	4a48      	ldr	r2, [pc, #288]	; (8008d40 <HAL_GPIO_Init+0x2f4>)
 8008c1e:	4293      	cmp	r3, r2
 8008c20:	d013      	beq.n	8008c4a <HAL_GPIO_Init+0x1fe>
 8008c22:	687b      	ldr	r3, [r7, #4]
 8008c24:	4a47      	ldr	r2, [pc, #284]	; (8008d44 <HAL_GPIO_Init+0x2f8>)
 8008c26:	4293      	cmp	r3, r2
 8008c28:	d00d      	beq.n	8008c46 <HAL_GPIO_Init+0x1fa>
 8008c2a:	687b      	ldr	r3, [r7, #4]
 8008c2c:	4a46      	ldr	r2, [pc, #280]	; (8008d48 <HAL_GPIO_Init+0x2fc>)
 8008c2e:	4293      	cmp	r3, r2
 8008c30:	d007      	beq.n	8008c42 <HAL_GPIO_Init+0x1f6>
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	4a45      	ldr	r2, [pc, #276]	; (8008d4c <HAL_GPIO_Init+0x300>)
 8008c36:	4293      	cmp	r3, r2
 8008c38:	d101      	bne.n	8008c3e <HAL_GPIO_Init+0x1f2>
 8008c3a:	2304      	movs	r3, #4
 8008c3c:	e008      	b.n	8008c50 <HAL_GPIO_Init+0x204>
 8008c3e:	2307      	movs	r3, #7
 8008c40:	e006      	b.n	8008c50 <HAL_GPIO_Init+0x204>
 8008c42:	2303      	movs	r3, #3
 8008c44:	e004      	b.n	8008c50 <HAL_GPIO_Init+0x204>
 8008c46:	2302      	movs	r3, #2
 8008c48:	e002      	b.n	8008c50 <HAL_GPIO_Init+0x204>
 8008c4a:	2301      	movs	r3, #1
 8008c4c:	e000      	b.n	8008c50 <HAL_GPIO_Init+0x204>
 8008c4e:	2300      	movs	r3, #0
 8008c50:	69fa      	ldr	r2, [r7, #28]
 8008c52:	f002 0203 	and.w	r2, r2, #3
 8008c56:	0092      	lsls	r2, r2, #2
 8008c58:	4093      	lsls	r3, r2
 8008c5a:	69ba      	ldr	r2, [r7, #24]
 8008c5c:	4313      	orrs	r3, r2
 8008c5e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8008c60:	4935      	ldr	r1, [pc, #212]	; (8008d38 <HAL_GPIO_Init+0x2ec>)
 8008c62:	69fb      	ldr	r3, [r7, #28]
 8008c64:	089b      	lsrs	r3, r3, #2
 8008c66:	3302      	adds	r3, #2
 8008c68:	69ba      	ldr	r2, [r7, #24]
 8008c6a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8008c6e:	4b38      	ldr	r3, [pc, #224]	; (8008d50 <HAL_GPIO_Init+0x304>)
 8008c70:	689b      	ldr	r3, [r3, #8]
 8008c72:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8008c74:	693b      	ldr	r3, [r7, #16]
 8008c76:	43db      	mvns	r3, r3
 8008c78:	69ba      	ldr	r2, [r7, #24]
 8008c7a:	4013      	ands	r3, r2
 8008c7c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8008c7e:	683b      	ldr	r3, [r7, #0]
 8008c80:	685b      	ldr	r3, [r3, #4]
 8008c82:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008c86:	2b00      	cmp	r3, #0
 8008c88:	d003      	beq.n	8008c92 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8008c8a:	69ba      	ldr	r2, [r7, #24]
 8008c8c:	693b      	ldr	r3, [r7, #16]
 8008c8e:	4313      	orrs	r3, r2
 8008c90:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8008c92:	4a2f      	ldr	r2, [pc, #188]	; (8008d50 <HAL_GPIO_Init+0x304>)
 8008c94:	69bb      	ldr	r3, [r7, #24]
 8008c96:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8008c98:	4b2d      	ldr	r3, [pc, #180]	; (8008d50 <HAL_GPIO_Init+0x304>)
 8008c9a:	68db      	ldr	r3, [r3, #12]
 8008c9c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8008c9e:	693b      	ldr	r3, [r7, #16]
 8008ca0:	43db      	mvns	r3, r3
 8008ca2:	69ba      	ldr	r2, [r7, #24]
 8008ca4:	4013      	ands	r3, r2
 8008ca6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8008ca8:	683b      	ldr	r3, [r7, #0]
 8008caa:	685b      	ldr	r3, [r3, #4]
 8008cac:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008cb0:	2b00      	cmp	r3, #0
 8008cb2:	d003      	beq.n	8008cbc <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8008cb4:	69ba      	ldr	r2, [r7, #24]
 8008cb6:	693b      	ldr	r3, [r7, #16]
 8008cb8:	4313      	orrs	r3, r2
 8008cba:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8008cbc:	4a24      	ldr	r2, [pc, #144]	; (8008d50 <HAL_GPIO_Init+0x304>)
 8008cbe:	69bb      	ldr	r3, [r7, #24]
 8008cc0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8008cc2:	4b23      	ldr	r3, [pc, #140]	; (8008d50 <HAL_GPIO_Init+0x304>)
 8008cc4:	685b      	ldr	r3, [r3, #4]
 8008cc6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8008cc8:	693b      	ldr	r3, [r7, #16]
 8008cca:	43db      	mvns	r3, r3
 8008ccc:	69ba      	ldr	r2, [r7, #24]
 8008cce:	4013      	ands	r3, r2
 8008cd0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8008cd2:	683b      	ldr	r3, [r7, #0]
 8008cd4:	685b      	ldr	r3, [r3, #4]
 8008cd6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008cda:	2b00      	cmp	r3, #0
 8008cdc:	d003      	beq.n	8008ce6 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8008cde:	69ba      	ldr	r2, [r7, #24]
 8008ce0:	693b      	ldr	r3, [r7, #16]
 8008ce2:	4313      	orrs	r3, r2
 8008ce4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8008ce6:	4a1a      	ldr	r2, [pc, #104]	; (8008d50 <HAL_GPIO_Init+0x304>)
 8008ce8:	69bb      	ldr	r3, [r7, #24]
 8008cea:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8008cec:	4b18      	ldr	r3, [pc, #96]	; (8008d50 <HAL_GPIO_Init+0x304>)
 8008cee:	681b      	ldr	r3, [r3, #0]
 8008cf0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8008cf2:	693b      	ldr	r3, [r7, #16]
 8008cf4:	43db      	mvns	r3, r3
 8008cf6:	69ba      	ldr	r2, [r7, #24]
 8008cf8:	4013      	ands	r3, r2
 8008cfa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8008cfc:	683b      	ldr	r3, [r7, #0]
 8008cfe:	685b      	ldr	r3, [r3, #4]
 8008d00:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008d04:	2b00      	cmp	r3, #0
 8008d06:	d003      	beq.n	8008d10 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8008d08:	69ba      	ldr	r2, [r7, #24]
 8008d0a:	693b      	ldr	r3, [r7, #16]
 8008d0c:	4313      	orrs	r3, r2
 8008d0e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8008d10:	4a0f      	ldr	r2, [pc, #60]	; (8008d50 <HAL_GPIO_Init+0x304>)
 8008d12:	69bb      	ldr	r3, [r7, #24]
 8008d14:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8008d16:	69fb      	ldr	r3, [r7, #28]
 8008d18:	3301      	adds	r3, #1
 8008d1a:	61fb      	str	r3, [r7, #28]
 8008d1c:	69fb      	ldr	r3, [r7, #28]
 8008d1e:	2b0f      	cmp	r3, #15
 8008d20:	f67f aea2 	bls.w	8008a68 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8008d24:	bf00      	nop
 8008d26:	bf00      	nop
 8008d28:	3724      	adds	r7, #36	; 0x24
 8008d2a:	46bd      	mov	sp, r7
 8008d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d30:	4770      	bx	lr
 8008d32:	bf00      	nop
 8008d34:	40023800 	.word	0x40023800
 8008d38:	40013800 	.word	0x40013800
 8008d3c:	40020000 	.word	0x40020000
 8008d40:	40020400 	.word	0x40020400
 8008d44:	40020800 	.word	0x40020800
 8008d48:	40020c00 	.word	0x40020c00
 8008d4c:	40021000 	.word	0x40021000
 8008d50:	40013c00 	.word	0x40013c00

08008d54 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8008d54:	b480      	push	{r7}
 8008d56:	b087      	sub	sp, #28
 8008d58:	af00      	add	r7, sp, #0
 8008d5a:	6078      	str	r0, [r7, #4]
 8008d5c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8008d5e:	2300      	movs	r3, #0
 8008d60:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 8008d62:	2300      	movs	r3, #0
 8008d64:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 8008d66:	2300      	movs	r3, #0
 8008d68:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8008d6a:	2300      	movs	r3, #0
 8008d6c:	617b      	str	r3, [r7, #20]
 8008d6e:	e0bb      	b.n	8008ee8 <HAL_GPIO_DeInit+0x194>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8008d70:	2201      	movs	r2, #1
 8008d72:	697b      	ldr	r3, [r7, #20]
 8008d74:	fa02 f303 	lsl.w	r3, r2, r3
 8008d78:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 8008d7a:	683a      	ldr	r2, [r7, #0]
 8008d7c:	693b      	ldr	r3, [r7, #16]
 8008d7e:	4013      	ands	r3, r2
 8008d80:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 8008d82:	68fa      	ldr	r2, [r7, #12]
 8008d84:	693b      	ldr	r3, [r7, #16]
 8008d86:	429a      	cmp	r2, r3
 8008d88:	f040 80ab 	bne.w	8008ee2 <HAL_GPIO_DeInit+0x18e>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 8008d8c:	4a5c      	ldr	r2, [pc, #368]	; (8008f00 <HAL_GPIO_DeInit+0x1ac>)
 8008d8e:	697b      	ldr	r3, [r7, #20]
 8008d90:	089b      	lsrs	r3, r3, #2
 8008d92:	3302      	adds	r3, #2
 8008d94:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008d98:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 8008d9a:	697b      	ldr	r3, [r7, #20]
 8008d9c:	f003 0303 	and.w	r3, r3, #3
 8008da0:	009b      	lsls	r3, r3, #2
 8008da2:	220f      	movs	r2, #15
 8008da4:	fa02 f303 	lsl.w	r3, r2, r3
 8008da8:	68ba      	ldr	r2, [r7, #8]
 8008daa:	4013      	ands	r3, r2
 8008dac:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 8008dae:	687b      	ldr	r3, [r7, #4]
 8008db0:	4a54      	ldr	r2, [pc, #336]	; (8008f04 <HAL_GPIO_DeInit+0x1b0>)
 8008db2:	4293      	cmp	r3, r2
 8008db4:	d019      	beq.n	8008dea <HAL_GPIO_DeInit+0x96>
 8008db6:	687b      	ldr	r3, [r7, #4]
 8008db8:	4a53      	ldr	r2, [pc, #332]	; (8008f08 <HAL_GPIO_DeInit+0x1b4>)
 8008dba:	4293      	cmp	r3, r2
 8008dbc:	d013      	beq.n	8008de6 <HAL_GPIO_DeInit+0x92>
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	4a52      	ldr	r2, [pc, #328]	; (8008f0c <HAL_GPIO_DeInit+0x1b8>)
 8008dc2:	4293      	cmp	r3, r2
 8008dc4:	d00d      	beq.n	8008de2 <HAL_GPIO_DeInit+0x8e>
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	4a51      	ldr	r2, [pc, #324]	; (8008f10 <HAL_GPIO_DeInit+0x1bc>)
 8008dca:	4293      	cmp	r3, r2
 8008dcc:	d007      	beq.n	8008dde <HAL_GPIO_DeInit+0x8a>
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	4a50      	ldr	r2, [pc, #320]	; (8008f14 <HAL_GPIO_DeInit+0x1c0>)
 8008dd2:	4293      	cmp	r3, r2
 8008dd4:	d101      	bne.n	8008dda <HAL_GPIO_DeInit+0x86>
 8008dd6:	2304      	movs	r3, #4
 8008dd8:	e008      	b.n	8008dec <HAL_GPIO_DeInit+0x98>
 8008dda:	2307      	movs	r3, #7
 8008ddc:	e006      	b.n	8008dec <HAL_GPIO_DeInit+0x98>
 8008dde:	2303      	movs	r3, #3
 8008de0:	e004      	b.n	8008dec <HAL_GPIO_DeInit+0x98>
 8008de2:	2302      	movs	r3, #2
 8008de4:	e002      	b.n	8008dec <HAL_GPIO_DeInit+0x98>
 8008de6:	2301      	movs	r3, #1
 8008de8:	e000      	b.n	8008dec <HAL_GPIO_DeInit+0x98>
 8008dea:	2300      	movs	r3, #0
 8008dec:	697a      	ldr	r2, [r7, #20]
 8008dee:	f002 0203 	and.w	r2, r2, #3
 8008df2:	0092      	lsls	r2, r2, #2
 8008df4:	4093      	lsls	r3, r2
 8008df6:	68ba      	ldr	r2, [r7, #8]
 8008df8:	429a      	cmp	r2, r3
 8008dfa:	d132      	bne.n	8008e62 <HAL_GPIO_DeInit+0x10e>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8008dfc:	4b46      	ldr	r3, [pc, #280]	; (8008f18 <HAL_GPIO_DeInit+0x1c4>)
 8008dfe:	681a      	ldr	r2, [r3, #0]
 8008e00:	68fb      	ldr	r3, [r7, #12]
 8008e02:	43db      	mvns	r3, r3
 8008e04:	4944      	ldr	r1, [pc, #272]	; (8008f18 <HAL_GPIO_DeInit+0x1c4>)
 8008e06:	4013      	ands	r3, r2
 8008e08:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8008e0a:	4b43      	ldr	r3, [pc, #268]	; (8008f18 <HAL_GPIO_DeInit+0x1c4>)
 8008e0c:	685a      	ldr	r2, [r3, #4]
 8008e0e:	68fb      	ldr	r3, [r7, #12]
 8008e10:	43db      	mvns	r3, r3
 8008e12:	4941      	ldr	r1, [pc, #260]	; (8008f18 <HAL_GPIO_DeInit+0x1c4>)
 8008e14:	4013      	ands	r3, r2
 8008e16:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8008e18:	4b3f      	ldr	r3, [pc, #252]	; (8008f18 <HAL_GPIO_DeInit+0x1c4>)
 8008e1a:	68da      	ldr	r2, [r3, #12]
 8008e1c:	68fb      	ldr	r3, [r7, #12]
 8008e1e:	43db      	mvns	r3, r3
 8008e20:	493d      	ldr	r1, [pc, #244]	; (8008f18 <HAL_GPIO_DeInit+0x1c4>)
 8008e22:	4013      	ands	r3, r2
 8008e24:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8008e26:	4b3c      	ldr	r3, [pc, #240]	; (8008f18 <HAL_GPIO_DeInit+0x1c4>)
 8008e28:	689a      	ldr	r2, [r3, #8]
 8008e2a:	68fb      	ldr	r3, [r7, #12]
 8008e2c:	43db      	mvns	r3, r3
 8008e2e:	493a      	ldr	r1, [pc, #232]	; (8008f18 <HAL_GPIO_DeInit+0x1c4>)
 8008e30:	4013      	ands	r3, r2
 8008e32:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 8008e34:	697b      	ldr	r3, [r7, #20]
 8008e36:	f003 0303 	and.w	r3, r3, #3
 8008e3a:	009b      	lsls	r3, r3, #2
 8008e3c:	220f      	movs	r2, #15
 8008e3e:	fa02 f303 	lsl.w	r3, r2, r3
 8008e42:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8008e44:	4a2e      	ldr	r2, [pc, #184]	; (8008f00 <HAL_GPIO_DeInit+0x1ac>)
 8008e46:	697b      	ldr	r3, [r7, #20]
 8008e48:	089b      	lsrs	r3, r3, #2
 8008e4a:	3302      	adds	r3, #2
 8008e4c:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8008e50:	68bb      	ldr	r3, [r7, #8]
 8008e52:	43da      	mvns	r2, r3
 8008e54:	482a      	ldr	r0, [pc, #168]	; (8008f00 <HAL_GPIO_DeInit+0x1ac>)
 8008e56:	697b      	ldr	r3, [r7, #20]
 8008e58:	089b      	lsrs	r3, r3, #2
 8008e5a:	400a      	ands	r2, r1
 8008e5c:	3302      	adds	r3, #2
 8008e5e:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8008e62:	687b      	ldr	r3, [r7, #4]
 8008e64:	681a      	ldr	r2, [r3, #0]
 8008e66:	697b      	ldr	r3, [r7, #20]
 8008e68:	005b      	lsls	r3, r3, #1
 8008e6a:	2103      	movs	r1, #3
 8008e6c:	fa01 f303 	lsl.w	r3, r1, r3
 8008e70:	43db      	mvns	r3, r3
 8008e72:	401a      	ands	r2, r3
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8008e78:	697b      	ldr	r3, [r7, #20]
 8008e7a:	08da      	lsrs	r2, r3, #3
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	3208      	adds	r2, #8
 8008e80:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008e84:	697b      	ldr	r3, [r7, #20]
 8008e86:	f003 0307 	and.w	r3, r3, #7
 8008e8a:	009b      	lsls	r3, r3, #2
 8008e8c:	220f      	movs	r2, #15
 8008e8e:	fa02 f303 	lsl.w	r3, r2, r3
 8008e92:	43db      	mvns	r3, r3
 8008e94:	697a      	ldr	r2, [r7, #20]
 8008e96:	08d2      	lsrs	r2, r2, #3
 8008e98:	4019      	ands	r1, r3
 8008e9a:	687b      	ldr	r3, [r7, #4]
 8008e9c:	3208      	adds	r2, #8
 8008e9e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8008ea2:	687b      	ldr	r3, [r7, #4]
 8008ea4:	68da      	ldr	r2, [r3, #12]
 8008ea6:	697b      	ldr	r3, [r7, #20]
 8008ea8:	005b      	lsls	r3, r3, #1
 8008eaa:	2103      	movs	r1, #3
 8008eac:	fa01 f303 	lsl.w	r3, r1, r3
 8008eb0:	43db      	mvns	r3, r3
 8008eb2:	401a      	ands	r2, r3
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	685a      	ldr	r2, [r3, #4]
 8008ebc:	2101      	movs	r1, #1
 8008ebe:	697b      	ldr	r3, [r7, #20]
 8008ec0:	fa01 f303 	lsl.w	r3, r1, r3
 8008ec4:	43db      	mvns	r3, r3
 8008ec6:	401a      	ands	r2, r3
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	689a      	ldr	r2, [r3, #8]
 8008ed0:	697b      	ldr	r3, [r7, #20]
 8008ed2:	005b      	lsls	r3, r3, #1
 8008ed4:	2103      	movs	r1, #3
 8008ed6:	fa01 f303 	lsl.w	r3, r1, r3
 8008eda:	43db      	mvns	r3, r3
 8008edc:	401a      	ands	r2, r3
 8008ede:	687b      	ldr	r3, [r7, #4]
 8008ee0:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8008ee2:	697b      	ldr	r3, [r7, #20]
 8008ee4:	3301      	adds	r3, #1
 8008ee6:	617b      	str	r3, [r7, #20]
 8008ee8:	697b      	ldr	r3, [r7, #20]
 8008eea:	2b0f      	cmp	r3, #15
 8008eec:	f67f af40 	bls.w	8008d70 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8008ef0:	bf00      	nop
 8008ef2:	bf00      	nop
 8008ef4:	371c      	adds	r7, #28
 8008ef6:	46bd      	mov	sp, r7
 8008ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008efc:	4770      	bx	lr
 8008efe:	bf00      	nop
 8008f00:	40013800 	.word	0x40013800
 8008f04:	40020000 	.word	0x40020000
 8008f08:	40020400 	.word	0x40020400
 8008f0c:	40020800 	.word	0x40020800
 8008f10:	40020c00 	.word	0x40020c00
 8008f14:	40021000 	.word	0x40021000
 8008f18:	40013c00 	.word	0x40013c00

08008f1c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8008f1c:	b480      	push	{r7}
 8008f1e:	b085      	sub	sp, #20
 8008f20:	af00      	add	r7, sp, #0
 8008f22:	6078      	str	r0, [r7, #4]
 8008f24:	460b      	mov	r3, r1
 8008f26:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	691a      	ldr	r2, [r3, #16]
 8008f2c:	887b      	ldrh	r3, [r7, #2]
 8008f2e:	4013      	ands	r3, r2
 8008f30:	2b00      	cmp	r3, #0
 8008f32:	d002      	beq.n	8008f3a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8008f34:	2301      	movs	r3, #1
 8008f36:	73fb      	strb	r3, [r7, #15]
 8008f38:	e001      	b.n	8008f3e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8008f3a:	2300      	movs	r3, #0
 8008f3c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8008f3e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008f40:	4618      	mov	r0, r3
 8008f42:	3714      	adds	r7, #20
 8008f44:	46bd      	mov	sp, r7
 8008f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f4a:	4770      	bx	lr

08008f4c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8008f4c:	b480      	push	{r7}
 8008f4e:	b083      	sub	sp, #12
 8008f50:	af00      	add	r7, sp, #0
 8008f52:	6078      	str	r0, [r7, #4]
 8008f54:	460b      	mov	r3, r1
 8008f56:	807b      	strh	r3, [r7, #2]
 8008f58:	4613      	mov	r3, r2
 8008f5a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8008f5c:	787b      	ldrb	r3, [r7, #1]
 8008f5e:	2b00      	cmp	r3, #0
 8008f60:	d003      	beq.n	8008f6a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8008f62:	887a      	ldrh	r2, [r7, #2]
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8008f68:	e003      	b.n	8008f72 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8008f6a:	887b      	ldrh	r3, [r7, #2]
 8008f6c:	041a      	lsls	r2, r3, #16
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	619a      	str	r2, [r3, #24]
}
 8008f72:	bf00      	nop
 8008f74:	370c      	adds	r7, #12
 8008f76:	46bd      	mov	sp, r7
 8008f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f7c:	4770      	bx	lr

08008f7e <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8008f7e:	b480      	push	{r7}
 8008f80:	b085      	sub	sp, #20
 8008f82:	af00      	add	r7, sp, #0
 8008f84:	6078      	str	r0, [r7, #4]
 8008f86:	460b      	mov	r3, r1
 8008f88:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8008f8a:	687b      	ldr	r3, [r7, #4]
 8008f8c:	695b      	ldr	r3, [r3, #20]
 8008f8e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8008f90:	887a      	ldrh	r2, [r7, #2]
 8008f92:	68fb      	ldr	r3, [r7, #12]
 8008f94:	4013      	ands	r3, r2
 8008f96:	041a      	lsls	r2, r3, #16
 8008f98:	68fb      	ldr	r3, [r7, #12]
 8008f9a:	43d9      	mvns	r1, r3
 8008f9c:	887b      	ldrh	r3, [r7, #2]
 8008f9e:	400b      	ands	r3, r1
 8008fa0:	431a      	orrs	r2, r3
 8008fa2:	687b      	ldr	r3, [r7, #4]
 8008fa4:	619a      	str	r2, [r3, #24]
}
 8008fa6:	bf00      	nop
 8008fa8:	3714      	adds	r7, #20
 8008faa:	46bd      	mov	sp, r7
 8008fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fb0:	4770      	bx	lr
	...

08008fb4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8008fb4:	b580      	push	{r7, lr}
 8008fb6:	b084      	sub	sp, #16
 8008fb8:	af00      	add	r7, sp, #0
 8008fba:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	2b00      	cmp	r3, #0
 8008fc0:	d101      	bne.n	8008fc6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8008fc2:	2301      	movs	r3, #1
 8008fc4:	e12b      	b.n	800921e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008fcc:	b2db      	uxtb	r3, r3
 8008fce:	2b00      	cmp	r3, #0
 8008fd0:	d106      	bne.n	8008fe0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8008fd2:	687b      	ldr	r3, [r7, #4]
 8008fd4:	2200      	movs	r2, #0
 8008fd6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8008fda:	6878      	ldr	r0, [r7, #4]
 8008fdc:	f000 f95d 	bl	800929a <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	2224      	movs	r2, #36	; 0x24
 8008fe4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	681b      	ldr	r3, [r3, #0]
 8008fec:	681a      	ldr	r2, [r3, #0]
 8008fee:	687b      	ldr	r3, [r7, #4]
 8008ff0:	681b      	ldr	r3, [r3, #0]
 8008ff2:	f022 0201 	bic.w	r2, r2, #1
 8008ff6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	681b      	ldr	r3, [r3, #0]
 8008ffc:	681a      	ldr	r2, [r3, #0]
 8008ffe:	687b      	ldr	r3, [r7, #4]
 8009000:	681b      	ldr	r3, [r3, #0]
 8009002:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8009006:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	681b      	ldr	r3, [r3, #0]
 800900c:	681a      	ldr	r2, [r3, #0]
 800900e:	687b      	ldr	r3, [r7, #4]
 8009010:	681b      	ldr	r3, [r3, #0]
 8009012:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8009016:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8009018:	f001 fc5a 	bl	800a8d0 <HAL_RCC_GetPCLK1Freq>
 800901c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800901e:	687b      	ldr	r3, [r7, #4]
 8009020:	685b      	ldr	r3, [r3, #4]
 8009022:	4a81      	ldr	r2, [pc, #516]	; (8009228 <HAL_I2C_Init+0x274>)
 8009024:	4293      	cmp	r3, r2
 8009026:	d807      	bhi.n	8009038 <HAL_I2C_Init+0x84>
 8009028:	68fb      	ldr	r3, [r7, #12]
 800902a:	4a80      	ldr	r2, [pc, #512]	; (800922c <HAL_I2C_Init+0x278>)
 800902c:	4293      	cmp	r3, r2
 800902e:	bf94      	ite	ls
 8009030:	2301      	movls	r3, #1
 8009032:	2300      	movhi	r3, #0
 8009034:	b2db      	uxtb	r3, r3
 8009036:	e006      	b.n	8009046 <HAL_I2C_Init+0x92>
 8009038:	68fb      	ldr	r3, [r7, #12]
 800903a:	4a7d      	ldr	r2, [pc, #500]	; (8009230 <HAL_I2C_Init+0x27c>)
 800903c:	4293      	cmp	r3, r2
 800903e:	bf94      	ite	ls
 8009040:	2301      	movls	r3, #1
 8009042:	2300      	movhi	r3, #0
 8009044:	b2db      	uxtb	r3, r3
 8009046:	2b00      	cmp	r3, #0
 8009048:	d001      	beq.n	800904e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800904a:	2301      	movs	r3, #1
 800904c:	e0e7      	b.n	800921e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800904e:	68fb      	ldr	r3, [r7, #12]
 8009050:	4a78      	ldr	r2, [pc, #480]	; (8009234 <HAL_I2C_Init+0x280>)
 8009052:	fba2 2303 	umull	r2, r3, r2, r3
 8009056:	0c9b      	lsrs	r3, r3, #18
 8009058:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	681b      	ldr	r3, [r3, #0]
 800905e:	685b      	ldr	r3, [r3, #4]
 8009060:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8009064:	687b      	ldr	r3, [r7, #4]
 8009066:	681b      	ldr	r3, [r3, #0]
 8009068:	68ba      	ldr	r2, [r7, #8]
 800906a:	430a      	orrs	r2, r1
 800906c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800906e:	687b      	ldr	r3, [r7, #4]
 8009070:	681b      	ldr	r3, [r3, #0]
 8009072:	6a1b      	ldr	r3, [r3, #32]
 8009074:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	685b      	ldr	r3, [r3, #4]
 800907c:	4a6a      	ldr	r2, [pc, #424]	; (8009228 <HAL_I2C_Init+0x274>)
 800907e:	4293      	cmp	r3, r2
 8009080:	d802      	bhi.n	8009088 <HAL_I2C_Init+0xd4>
 8009082:	68bb      	ldr	r3, [r7, #8]
 8009084:	3301      	adds	r3, #1
 8009086:	e009      	b.n	800909c <HAL_I2C_Init+0xe8>
 8009088:	68bb      	ldr	r3, [r7, #8]
 800908a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800908e:	fb02 f303 	mul.w	r3, r2, r3
 8009092:	4a69      	ldr	r2, [pc, #420]	; (8009238 <HAL_I2C_Init+0x284>)
 8009094:	fba2 2303 	umull	r2, r3, r2, r3
 8009098:	099b      	lsrs	r3, r3, #6
 800909a:	3301      	adds	r3, #1
 800909c:	687a      	ldr	r2, [r7, #4]
 800909e:	6812      	ldr	r2, [r2, #0]
 80090a0:	430b      	orrs	r3, r1
 80090a2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	681b      	ldr	r3, [r3, #0]
 80090a8:	69db      	ldr	r3, [r3, #28]
 80090aa:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80090ae:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80090b2:	687b      	ldr	r3, [r7, #4]
 80090b4:	685b      	ldr	r3, [r3, #4]
 80090b6:	495c      	ldr	r1, [pc, #368]	; (8009228 <HAL_I2C_Init+0x274>)
 80090b8:	428b      	cmp	r3, r1
 80090ba:	d819      	bhi.n	80090f0 <HAL_I2C_Init+0x13c>
 80090bc:	68fb      	ldr	r3, [r7, #12]
 80090be:	1e59      	subs	r1, r3, #1
 80090c0:	687b      	ldr	r3, [r7, #4]
 80090c2:	685b      	ldr	r3, [r3, #4]
 80090c4:	005b      	lsls	r3, r3, #1
 80090c6:	fbb1 f3f3 	udiv	r3, r1, r3
 80090ca:	1c59      	adds	r1, r3, #1
 80090cc:	f640 73fc 	movw	r3, #4092	; 0xffc
 80090d0:	400b      	ands	r3, r1
 80090d2:	2b00      	cmp	r3, #0
 80090d4:	d00a      	beq.n	80090ec <HAL_I2C_Init+0x138>
 80090d6:	68fb      	ldr	r3, [r7, #12]
 80090d8:	1e59      	subs	r1, r3, #1
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	685b      	ldr	r3, [r3, #4]
 80090de:	005b      	lsls	r3, r3, #1
 80090e0:	fbb1 f3f3 	udiv	r3, r1, r3
 80090e4:	3301      	adds	r3, #1
 80090e6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80090ea:	e051      	b.n	8009190 <HAL_I2C_Init+0x1dc>
 80090ec:	2304      	movs	r3, #4
 80090ee:	e04f      	b.n	8009190 <HAL_I2C_Init+0x1dc>
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	689b      	ldr	r3, [r3, #8]
 80090f4:	2b00      	cmp	r3, #0
 80090f6:	d111      	bne.n	800911c <HAL_I2C_Init+0x168>
 80090f8:	68fb      	ldr	r3, [r7, #12]
 80090fa:	1e58      	subs	r0, r3, #1
 80090fc:	687b      	ldr	r3, [r7, #4]
 80090fe:	6859      	ldr	r1, [r3, #4]
 8009100:	460b      	mov	r3, r1
 8009102:	005b      	lsls	r3, r3, #1
 8009104:	440b      	add	r3, r1
 8009106:	fbb0 f3f3 	udiv	r3, r0, r3
 800910a:	3301      	adds	r3, #1
 800910c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009110:	2b00      	cmp	r3, #0
 8009112:	bf0c      	ite	eq
 8009114:	2301      	moveq	r3, #1
 8009116:	2300      	movne	r3, #0
 8009118:	b2db      	uxtb	r3, r3
 800911a:	e012      	b.n	8009142 <HAL_I2C_Init+0x18e>
 800911c:	68fb      	ldr	r3, [r7, #12]
 800911e:	1e58      	subs	r0, r3, #1
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	6859      	ldr	r1, [r3, #4]
 8009124:	460b      	mov	r3, r1
 8009126:	009b      	lsls	r3, r3, #2
 8009128:	440b      	add	r3, r1
 800912a:	0099      	lsls	r1, r3, #2
 800912c:	440b      	add	r3, r1
 800912e:	fbb0 f3f3 	udiv	r3, r0, r3
 8009132:	3301      	adds	r3, #1
 8009134:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009138:	2b00      	cmp	r3, #0
 800913a:	bf0c      	ite	eq
 800913c:	2301      	moveq	r3, #1
 800913e:	2300      	movne	r3, #0
 8009140:	b2db      	uxtb	r3, r3
 8009142:	2b00      	cmp	r3, #0
 8009144:	d001      	beq.n	800914a <HAL_I2C_Init+0x196>
 8009146:	2301      	movs	r3, #1
 8009148:	e022      	b.n	8009190 <HAL_I2C_Init+0x1dc>
 800914a:	687b      	ldr	r3, [r7, #4]
 800914c:	689b      	ldr	r3, [r3, #8]
 800914e:	2b00      	cmp	r3, #0
 8009150:	d10e      	bne.n	8009170 <HAL_I2C_Init+0x1bc>
 8009152:	68fb      	ldr	r3, [r7, #12]
 8009154:	1e58      	subs	r0, r3, #1
 8009156:	687b      	ldr	r3, [r7, #4]
 8009158:	6859      	ldr	r1, [r3, #4]
 800915a:	460b      	mov	r3, r1
 800915c:	005b      	lsls	r3, r3, #1
 800915e:	440b      	add	r3, r1
 8009160:	fbb0 f3f3 	udiv	r3, r0, r3
 8009164:	3301      	adds	r3, #1
 8009166:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800916a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800916e:	e00f      	b.n	8009190 <HAL_I2C_Init+0x1dc>
 8009170:	68fb      	ldr	r3, [r7, #12]
 8009172:	1e58      	subs	r0, r3, #1
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	6859      	ldr	r1, [r3, #4]
 8009178:	460b      	mov	r3, r1
 800917a:	009b      	lsls	r3, r3, #2
 800917c:	440b      	add	r3, r1
 800917e:	0099      	lsls	r1, r3, #2
 8009180:	440b      	add	r3, r1
 8009182:	fbb0 f3f3 	udiv	r3, r0, r3
 8009186:	3301      	adds	r3, #1
 8009188:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800918c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8009190:	6879      	ldr	r1, [r7, #4]
 8009192:	6809      	ldr	r1, [r1, #0]
 8009194:	4313      	orrs	r3, r2
 8009196:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8009198:	687b      	ldr	r3, [r7, #4]
 800919a:	681b      	ldr	r3, [r3, #0]
 800919c:	681b      	ldr	r3, [r3, #0]
 800919e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80091a2:	687b      	ldr	r3, [r7, #4]
 80091a4:	69da      	ldr	r2, [r3, #28]
 80091a6:	687b      	ldr	r3, [r7, #4]
 80091a8:	6a1b      	ldr	r3, [r3, #32]
 80091aa:	431a      	orrs	r2, r3
 80091ac:	687b      	ldr	r3, [r7, #4]
 80091ae:	681b      	ldr	r3, [r3, #0]
 80091b0:	430a      	orrs	r2, r1
 80091b2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80091b4:	687b      	ldr	r3, [r7, #4]
 80091b6:	681b      	ldr	r3, [r3, #0]
 80091b8:	689b      	ldr	r3, [r3, #8]
 80091ba:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80091be:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80091c2:	687a      	ldr	r2, [r7, #4]
 80091c4:	6911      	ldr	r1, [r2, #16]
 80091c6:	687a      	ldr	r2, [r7, #4]
 80091c8:	68d2      	ldr	r2, [r2, #12]
 80091ca:	4311      	orrs	r1, r2
 80091cc:	687a      	ldr	r2, [r7, #4]
 80091ce:	6812      	ldr	r2, [r2, #0]
 80091d0:	430b      	orrs	r3, r1
 80091d2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80091d4:	687b      	ldr	r3, [r7, #4]
 80091d6:	681b      	ldr	r3, [r3, #0]
 80091d8:	68db      	ldr	r3, [r3, #12]
 80091da:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80091de:	687b      	ldr	r3, [r7, #4]
 80091e0:	695a      	ldr	r2, [r3, #20]
 80091e2:	687b      	ldr	r3, [r7, #4]
 80091e4:	699b      	ldr	r3, [r3, #24]
 80091e6:	431a      	orrs	r2, r3
 80091e8:	687b      	ldr	r3, [r7, #4]
 80091ea:	681b      	ldr	r3, [r3, #0]
 80091ec:	430a      	orrs	r2, r1
 80091ee:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	681b      	ldr	r3, [r3, #0]
 80091f4:	681a      	ldr	r2, [r3, #0]
 80091f6:	687b      	ldr	r3, [r7, #4]
 80091f8:	681b      	ldr	r3, [r3, #0]
 80091fa:	f042 0201 	orr.w	r2, r2, #1
 80091fe:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009200:	687b      	ldr	r3, [r7, #4]
 8009202:	2200      	movs	r2, #0
 8009204:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8009206:	687b      	ldr	r3, [r7, #4]
 8009208:	2220      	movs	r2, #32
 800920a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800920e:	687b      	ldr	r3, [r7, #4]
 8009210:	2200      	movs	r2, #0
 8009212:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8009214:	687b      	ldr	r3, [r7, #4]
 8009216:	2200      	movs	r2, #0
 8009218:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800921c:	2300      	movs	r3, #0
}
 800921e:	4618      	mov	r0, r3
 8009220:	3710      	adds	r7, #16
 8009222:	46bd      	mov	sp, r7
 8009224:	bd80      	pop	{r7, pc}
 8009226:	bf00      	nop
 8009228:	000186a0 	.word	0x000186a0
 800922c:	001e847f 	.word	0x001e847f
 8009230:	003d08ff 	.word	0x003d08ff
 8009234:	431bde83 	.word	0x431bde83
 8009238:	10624dd3 	.word	0x10624dd3

0800923c <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 800923c:	b580      	push	{r7, lr}
 800923e:	b082      	sub	sp, #8
 8009240:	af00      	add	r7, sp, #0
 8009242:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8009244:	687b      	ldr	r3, [r7, #4]
 8009246:	2b00      	cmp	r3, #0
 8009248:	d101      	bne.n	800924e <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 800924a:	2301      	movs	r3, #1
 800924c:	e021      	b.n	8009292 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 800924e:	687b      	ldr	r3, [r7, #4]
 8009250:	2224      	movs	r2, #36	; 0x24
 8009252:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8009256:	687b      	ldr	r3, [r7, #4]
 8009258:	681b      	ldr	r3, [r3, #0]
 800925a:	681a      	ldr	r2, [r3, #0]
 800925c:	687b      	ldr	r3, [r7, #4]
 800925e:	681b      	ldr	r3, [r3, #0]
 8009260:	f022 0201 	bic.w	r2, r2, #1
 8009264:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8009266:	6878      	ldr	r0, [r7, #4]
 8009268:	f000 f821 	bl	80092ae <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 800926c:	687b      	ldr	r3, [r7, #4]
 800926e:	2200      	movs	r2, #0
 8009270:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State         = HAL_I2C_STATE_RESET;
 8009272:	687b      	ldr	r3, [r7, #4]
 8009274:	2200      	movs	r2, #0
 8009276:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800927a:	687b      	ldr	r3, [r7, #4]
 800927c:	2200      	movs	r2, #0
 800927e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	2200      	movs	r2, #0
 8009284:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8009288:	687b      	ldr	r3, [r7, #4]
 800928a:	2200      	movs	r2, #0
 800928c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009290:	2300      	movs	r3, #0
}
 8009292:	4618      	mov	r0, r3
 8009294:	3708      	adds	r7, #8
 8009296:	46bd      	mov	sp, r7
 8009298:	bd80      	pop	{r7, pc}

0800929a <HAL_I2C_MspInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspInit(I2C_HandleTypeDef *hi2c)
{
 800929a:	b480      	push	{r7}
 800929c:	b083      	sub	sp, #12
 800929e:	af00      	add	r7, sp, #0
 80092a0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspInit could be implemented in the user file
   */
}
 80092a2:	bf00      	nop
 80092a4:	370c      	adds	r7, #12
 80092a6:	46bd      	mov	sp, r7
 80092a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092ac:	4770      	bx	lr

080092ae <HAL_I2C_MspDeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspDeInit(I2C_HandleTypeDef *hi2c)
{
 80092ae:	b480      	push	{r7}
 80092b0:	b083      	sub	sp, #12
 80092b2:	af00      	add	r7, sp, #0
 80092b4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspDeInit could be implemented in the user file
   */
}
 80092b6:	bf00      	nop
 80092b8:	370c      	adds	r7, #12
 80092ba:	46bd      	mov	sp, r7
 80092bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092c0:	4770      	bx	lr
	...

080092c4 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80092c4:	b580      	push	{r7, lr}
 80092c6:	b088      	sub	sp, #32
 80092c8:	af02      	add	r7, sp, #8
 80092ca:	60f8      	str	r0, [r7, #12]
 80092cc:	4608      	mov	r0, r1
 80092ce:	4611      	mov	r1, r2
 80092d0:	461a      	mov	r2, r3
 80092d2:	4603      	mov	r3, r0
 80092d4:	817b      	strh	r3, [r7, #10]
 80092d6:	460b      	mov	r3, r1
 80092d8:	813b      	strh	r3, [r7, #8]
 80092da:	4613      	mov	r3, r2
 80092dc:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80092de:	f7ff fa21 	bl	8008724 <HAL_GetTick>
 80092e2:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80092e4:	68fb      	ldr	r3, [r7, #12]
 80092e6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80092ea:	b2db      	uxtb	r3, r3
 80092ec:	2b20      	cmp	r3, #32
 80092ee:	f040 80d9 	bne.w	80094a4 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80092f2:	697b      	ldr	r3, [r7, #20]
 80092f4:	9300      	str	r3, [sp, #0]
 80092f6:	2319      	movs	r3, #25
 80092f8:	2201      	movs	r2, #1
 80092fa:	496d      	ldr	r1, [pc, #436]	; (80094b0 <HAL_I2C_Mem_Write+0x1ec>)
 80092fc:	68f8      	ldr	r0, [r7, #12]
 80092fe:	f000 fc99 	bl	8009c34 <I2C_WaitOnFlagUntilTimeout>
 8009302:	4603      	mov	r3, r0
 8009304:	2b00      	cmp	r3, #0
 8009306:	d001      	beq.n	800930c <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8009308:	2302      	movs	r3, #2
 800930a:	e0cc      	b.n	80094a6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800930c:	68fb      	ldr	r3, [r7, #12]
 800930e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009312:	2b01      	cmp	r3, #1
 8009314:	d101      	bne.n	800931a <HAL_I2C_Mem_Write+0x56>
 8009316:	2302      	movs	r3, #2
 8009318:	e0c5      	b.n	80094a6 <HAL_I2C_Mem_Write+0x1e2>
 800931a:	68fb      	ldr	r3, [r7, #12]
 800931c:	2201      	movs	r2, #1
 800931e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8009322:	68fb      	ldr	r3, [r7, #12]
 8009324:	681b      	ldr	r3, [r3, #0]
 8009326:	681b      	ldr	r3, [r3, #0]
 8009328:	f003 0301 	and.w	r3, r3, #1
 800932c:	2b01      	cmp	r3, #1
 800932e:	d007      	beq.n	8009340 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8009330:	68fb      	ldr	r3, [r7, #12]
 8009332:	681b      	ldr	r3, [r3, #0]
 8009334:	681a      	ldr	r2, [r3, #0]
 8009336:	68fb      	ldr	r3, [r7, #12]
 8009338:	681b      	ldr	r3, [r3, #0]
 800933a:	f042 0201 	orr.w	r2, r2, #1
 800933e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8009340:	68fb      	ldr	r3, [r7, #12]
 8009342:	681b      	ldr	r3, [r3, #0]
 8009344:	681a      	ldr	r2, [r3, #0]
 8009346:	68fb      	ldr	r3, [r7, #12]
 8009348:	681b      	ldr	r3, [r3, #0]
 800934a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800934e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8009350:	68fb      	ldr	r3, [r7, #12]
 8009352:	2221      	movs	r2, #33	; 0x21
 8009354:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8009358:	68fb      	ldr	r3, [r7, #12]
 800935a:	2240      	movs	r2, #64	; 0x40
 800935c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009360:	68fb      	ldr	r3, [r7, #12]
 8009362:	2200      	movs	r2, #0
 8009364:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8009366:	68fb      	ldr	r3, [r7, #12]
 8009368:	6a3a      	ldr	r2, [r7, #32]
 800936a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800936c:	68fb      	ldr	r3, [r7, #12]
 800936e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8009370:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8009372:	68fb      	ldr	r3, [r7, #12]
 8009374:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009376:	b29a      	uxth	r2, r3
 8009378:	68fb      	ldr	r3, [r7, #12]
 800937a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800937c:	68fb      	ldr	r3, [r7, #12]
 800937e:	4a4d      	ldr	r2, [pc, #308]	; (80094b4 <HAL_I2C_Mem_Write+0x1f0>)
 8009380:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8009382:	88f8      	ldrh	r0, [r7, #6]
 8009384:	893a      	ldrh	r2, [r7, #8]
 8009386:	8979      	ldrh	r1, [r7, #10]
 8009388:	697b      	ldr	r3, [r7, #20]
 800938a:	9301      	str	r3, [sp, #4]
 800938c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800938e:	9300      	str	r3, [sp, #0]
 8009390:	4603      	mov	r3, r0
 8009392:	68f8      	ldr	r0, [r7, #12]
 8009394:	f000 fad0 	bl	8009938 <I2C_RequestMemoryWrite>
 8009398:	4603      	mov	r3, r0
 800939a:	2b00      	cmp	r3, #0
 800939c:	d052      	beq.n	8009444 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800939e:	2301      	movs	r3, #1
 80093a0:	e081      	b.n	80094a6 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80093a2:	697a      	ldr	r2, [r7, #20]
 80093a4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80093a6:	68f8      	ldr	r0, [r7, #12]
 80093a8:	f000 fd1a 	bl	8009de0 <I2C_WaitOnTXEFlagUntilTimeout>
 80093ac:	4603      	mov	r3, r0
 80093ae:	2b00      	cmp	r3, #0
 80093b0:	d00d      	beq.n	80093ce <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80093b2:	68fb      	ldr	r3, [r7, #12]
 80093b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80093b6:	2b04      	cmp	r3, #4
 80093b8:	d107      	bne.n	80093ca <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80093ba:	68fb      	ldr	r3, [r7, #12]
 80093bc:	681b      	ldr	r3, [r3, #0]
 80093be:	681a      	ldr	r2, [r3, #0]
 80093c0:	68fb      	ldr	r3, [r7, #12]
 80093c2:	681b      	ldr	r3, [r3, #0]
 80093c4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80093c8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80093ca:	2301      	movs	r3, #1
 80093cc:	e06b      	b.n	80094a6 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80093ce:	68fb      	ldr	r3, [r7, #12]
 80093d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80093d2:	781a      	ldrb	r2, [r3, #0]
 80093d4:	68fb      	ldr	r3, [r7, #12]
 80093d6:	681b      	ldr	r3, [r3, #0]
 80093d8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80093da:	68fb      	ldr	r3, [r7, #12]
 80093dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80093de:	1c5a      	adds	r2, r3, #1
 80093e0:	68fb      	ldr	r3, [r7, #12]
 80093e2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 80093e4:	68fb      	ldr	r3, [r7, #12]
 80093e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80093e8:	3b01      	subs	r3, #1
 80093ea:	b29a      	uxth	r2, r3
 80093ec:	68fb      	ldr	r3, [r7, #12]
 80093ee:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80093f0:	68fb      	ldr	r3, [r7, #12]
 80093f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80093f4:	b29b      	uxth	r3, r3
 80093f6:	3b01      	subs	r3, #1
 80093f8:	b29a      	uxth	r2, r3
 80093fa:	68fb      	ldr	r3, [r7, #12]
 80093fc:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80093fe:	68fb      	ldr	r3, [r7, #12]
 8009400:	681b      	ldr	r3, [r3, #0]
 8009402:	695b      	ldr	r3, [r3, #20]
 8009404:	f003 0304 	and.w	r3, r3, #4
 8009408:	2b04      	cmp	r3, #4
 800940a:	d11b      	bne.n	8009444 <HAL_I2C_Mem_Write+0x180>
 800940c:	68fb      	ldr	r3, [r7, #12]
 800940e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009410:	2b00      	cmp	r3, #0
 8009412:	d017      	beq.n	8009444 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8009414:	68fb      	ldr	r3, [r7, #12]
 8009416:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009418:	781a      	ldrb	r2, [r3, #0]
 800941a:	68fb      	ldr	r3, [r7, #12]
 800941c:	681b      	ldr	r3, [r3, #0]
 800941e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8009420:	68fb      	ldr	r3, [r7, #12]
 8009422:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009424:	1c5a      	adds	r2, r3, #1
 8009426:	68fb      	ldr	r3, [r7, #12]
 8009428:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800942a:	68fb      	ldr	r3, [r7, #12]
 800942c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800942e:	3b01      	subs	r3, #1
 8009430:	b29a      	uxth	r2, r3
 8009432:	68fb      	ldr	r3, [r7, #12]
 8009434:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8009436:	68fb      	ldr	r3, [r7, #12]
 8009438:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800943a:	b29b      	uxth	r3, r3
 800943c:	3b01      	subs	r3, #1
 800943e:	b29a      	uxth	r2, r3
 8009440:	68fb      	ldr	r3, [r7, #12]
 8009442:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8009444:	68fb      	ldr	r3, [r7, #12]
 8009446:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009448:	2b00      	cmp	r3, #0
 800944a:	d1aa      	bne.n	80093a2 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800944c:	697a      	ldr	r2, [r7, #20]
 800944e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009450:	68f8      	ldr	r0, [r7, #12]
 8009452:	f000 fd06 	bl	8009e62 <I2C_WaitOnBTFFlagUntilTimeout>
 8009456:	4603      	mov	r3, r0
 8009458:	2b00      	cmp	r3, #0
 800945a:	d00d      	beq.n	8009478 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800945c:	68fb      	ldr	r3, [r7, #12]
 800945e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009460:	2b04      	cmp	r3, #4
 8009462:	d107      	bne.n	8009474 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009464:	68fb      	ldr	r3, [r7, #12]
 8009466:	681b      	ldr	r3, [r3, #0]
 8009468:	681a      	ldr	r2, [r3, #0]
 800946a:	68fb      	ldr	r3, [r7, #12]
 800946c:	681b      	ldr	r3, [r3, #0]
 800946e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009472:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8009474:	2301      	movs	r3, #1
 8009476:	e016      	b.n	80094a6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009478:	68fb      	ldr	r3, [r7, #12]
 800947a:	681b      	ldr	r3, [r3, #0]
 800947c:	681a      	ldr	r2, [r3, #0]
 800947e:	68fb      	ldr	r3, [r7, #12]
 8009480:	681b      	ldr	r3, [r3, #0]
 8009482:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009486:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8009488:	68fb      	ldr	r3, [r7, #12]
 800948a:	2220      	movs	r2, #32
 800948c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8009490:	68fb      	ldr	r3, [r7, #12]
 8009492:	2200      	movs	r2, #0
 8009494:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009498:	68fb      	ldr	r3, [r7, #12]
 800949a:	2200      	movs	r2, #0
 800949c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80094a0:	2300      	movs	r3, #0
 80094a2:	e000      	b.n	80094a6 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80094a4:	2302      	movs	r3, #2
  }
}
 80094a6:	4618      	mov	r0, r3
 80094a8:	3718      	adds	r7, #24
 80094aa:	46bd      	mov	sp, r7
 80094ac:	bd80      	pop	{r7, pc}
 80094ae:	bf00      	nop
 80094b0:	00100002 	.word	0x00100002
 80094b4:	ffff0000 	.word	0xffff0000

080094b8 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80094b8:	b580      	push	{r7, lr}
 80094ba:	b08c      	sub	sp, #48	; 0x30
 80094bc:	af02      	add	r7, sp, #8
 80094be:	60f8      	str	r0, [r7, #12]
 80094c0:	4608      	mov	r0, r1
 80094c2:	4611      	mov	r1, r2
 80094c4:	461a      	mov	r2, r3
 80094c6:	4603      	mov	r3, r0
 80094c8:	817b      	strh	r3, [r7, #10]
 80094ca:	460b      	mov	r3, r1
 80094cc:	813b      	strh	r3, [r7, #8]
 80094ce:	4613      	mov	r3, r2
 80094d0:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80094d2:	f7ff f927 	bl	8008724 <HAL_GetTick>
 80094d6:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80094d8:	68fb      	ldr	r3, [r7, #12]
 80094da:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80094de:	b2db      	uxtb	r3, r3
 80094e0:	2b20      	cmp	r3, #32
 80094e2:	f040 8208 	bne.w	80098f6 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80094e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80094e8:	9300      	str	r3, [sp, #0]
 80094ea:	2319      	movs	r3, #25
 80094ec:	2201      	movs	r2, #1
 80094ee:	497b      	ldr	r1, [pc, #492]	; (80096dc <HAL_I2C_Mem_Read+0x224>)
 80094f0:	68f8      	ldr	r0, [r7, #12]
 80094f2:	f000 fb9f 	bl	8009c34 <I2C_WaitOnFlagUntilTimeout>
 80094f6:	4603      	mov	r3, r0
 80094f8:	2b00      	cmp	r3, #0
 80094fa:	d001      	beq.n	8009500 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 80094fc:	2302      	movs	r3, #2
 80094fe:	e1fb      	b.n	80098f8 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009500:	68fb      	ldr	r3, [r7, #12]
 8009502:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009506:	2b01      	cmp	r3, #1
 8009508:	d101      	bne.n	800950e <HAL_I2C_Mem_Read+0x56>
 800950a:	2302      	movs	r3, #2
 800950c:	e1f4      	b.n	80098f8 <HAL_I2C_Mem_Read+0x440>
 800950e:	68fb      	ldr	r3, [r7, #12]
 8009510:	2201      	movs	r2, #1
 8009512:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8009516:	68fb      	ldr	r3, [r7, #12]
 8009518:	681b      	ldr	r3, [r3, #0]
 800951a:	681b      	ldr	r3, [r3, #0]
 800951c:	f003 0301 	and.w	r3, r3, #1
 8009520:	2b01      	cmp	r3, #1
 8009522:	d007      	beq.n	8009534 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8009524:	68fb      	ldr	r3, [r7, #12]
 8009526:	681b      	ldr	r3, [r3, #0]
 8009528:	681a      	ldr	r2, [r3, #0]
 800952a:	68fb      	ldr	r3, [r7, #12]
 800952c:	681b      	ldr	r3, [r3, #0]
 800952e:	f042 0201 	orr.w	r2, r2, #1
 8009532:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8009534:	68fb      	ldr	r3, [r7, #12]
 8009536:	681b      	ldr	r3, [r3, #0]
 8009538:	681a      	ldr	r2, [r3, #0]
 800953a:	68fb      	ldr	r3, [r7, #12]
 800953c:	681b      	ldr	r3, [r3, #0]
 800953e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8009542:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8009544:	68fb      	ldr	r3, [r7, #12]
 8009546:	2222      	movs	r2, #34	; 0x22
 8009548:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800954c:	68fb      	ldr	r3, [r7, #12]
 800954e:	2240      	movs	r2, #64	; 0x40
 8009550:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009554:	68fb      	ldr	r3, [r7, #12]
 8009556:	2200      	movs	r2, #0
 8009558:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800955a:	68fb      	ldr	r3, [r7, #12]
 800955c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800955e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8009560:	68fb      	ldr	r3, [r7, #12]
 8009562:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8009564:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8009566:	68fb      	ldr	r3, [r7, #12]
 8009568:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800956a:	b29a      	uxth	r2, r3
 800956c:	68fb      	ldr	r3, [r7, #12]
 800956e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8009570:	68fb      	ldr	r3, [r7, #12]
 8009572:	4a5b      	ldr	r2, [pc, #364]	; (80096e0 <HAL_I2C_Mem_Read+0x228>)
 8009574:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8009576:	88f8      	ldrh	r0, [r7, #6]
 8009578:	893a      	ldrh	r2, [r7, #8]
 800957a:	8979      	ldrh	r1, [r7, #10]
 800957c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800957e:	9301      	str	r3, [sp, #4]
 8009580:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009582:	9300      	str	r3, [sp, #0]
 8009584:	4603      	mov	r3, r0
 8009586:	68f8      	ldr	r0, [r7, #12]
 8009588:	f000 fa6c 	bl	8009a64 <I2C_RequestMemoryRead>
 800958c:	4603      	mov	r3, r0
 800958e:	2b00      	cmp	r3, #0
 8009590:	d001      	beq.n	8009596 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8009592:	2301      	movs	r3, #1
 8009594:	e1b0      	b.n	80098f8 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8009596:	68fb      	ldr	r3, [r7, #12]
 8009598:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800959a:	2b00      	cmp	r3, #0
 800959c:	d113      	bne.n	80095c6 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800959e:	2300      	movs	r3, #0
 80095a0:	623b      	str	r3, [r7, #32]
 80095a2:	68fb      	ldr	r3, [r7, #12]
 80095a4:	681b      	ldr	r3, [r3, #0]
 80095a6:	695b      	ldr	r3, [r3, #20]
 80095a8:	623b      	str	r3, [r7, #32]
 80095aa:	68fb      	ldr	r3, [r7, #12]
 80095ac:	681b      	ldr	r3, [r3, #0]
 80095ae:	699b      	ldr	r3, [r3, #24]
 80095b0:	623b      	str	r3, [r7, #32]
 80095b2:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80095b4:	68fb      	ldr	r3, [r7, #12]
 80095b6:	681b      	ldr	r3, [r3, #0]
 80095b8:	681a      	ldr	r2, [r3, #0]
 80095ba:	68fb      	ldr	r3, [r7, #12]
 80095bc:	681b      	ldr	r3, [r3, #0]
 80095be:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80095c2:	601a      	str	r2, [r3, #0]
 80095c4:	e184      	b.n	80098d0 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 80095c6:	68fb      	ldr	r3, [r7, #12]
 80095c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80095ca:	2b01      	cmp	r3, #1
 80095cc:	d11b      	bne.n	8009606 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80095ce:	68fb      	ldr	r3, [r7, #12]
 80095d0:	681b      	ldr	r3, [r3, #0]
 80095d2:	681a      	ldr	r2, [r3, #0]
 80095d4:	68fb      	ldr	r3, [r7, #12]
 80095d6:	681b      	ldr	r3, [r3, #0]
 80095d8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80095dc:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80095de:	2300      	movs	r3, #0
 80095e0:	61fb      	str	r3, [r7, #28]
 80095e2:	68fb      	ldr	r3, [r7, #12]
 80095e4:	681b      	ldr	r3, [r3, #0]
 80095e6:	695b      	ldr	r3, [r3, #20]
 80095e8:	61fb      	str	r3, [r7, #28]
 80095ea:	68fb      	ldr	r3, [r7, #12]
 80095ec:	681b      	ldr	r3, [r3, #0]
 80095ee:	699b      	ldr	r3, [r3, #24]
 80095f0:	61fb      	str	r3, [r7, #28]
 80095f2:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80095f4:	68fb      	ldr	r3, [r7, #12]
 80095f6:	681b      	ldr	r3, [r3, #0]
 80095f8:	681a      	ldr	r2, [r3, #0]
 80095fa:	68fb      	ldr	r3, [r7, #12]
 80095fc:	681b      	ldr	r3, [r3, #0]
 80095fe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009602:	601a      	str	r2, [r3, #0]
 8009604:	e164      	b.n	80098d0 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8009606:	68fb      	ldr	r3, [r7, #12]
 8009608:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800960a:	2b02      	cmp	r3, #2
 800960c:	d11b      	bne.n	8009646 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800960e:	68fb      	ldr	r3, [r7, #12]
 8009610:	681b      	ldr	r3, [r3, #0]
 8009612:	681a      	ldr	r2, [r3, #0]
 8009614:	68fb      	ldr	r3, [r7, #12]
 8009616:	681b      	ldr	r3, [r3, #0]
 8009618:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800961c:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800961e:	68fb      	ldr	r3, [r7, #12]
 8009620:	681b      	ldr	r3, [r3, #0]
 8009622:	681a      	ldr	r2, [r3, #0]
 8009624:	68fb      	ldr	r3, [r7, #12]
 8009626:	681b      	ldr	r3, [r3, #0]
 8009628:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800962c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800962e:	2300      	movs	r3, #0
 8009630:	61bb      	str	r3, [r7, #24]
 8009632:	68fb      	ldr	r3, [r7, #12]
 8009634:	681b      	ldr	r3, [r3, #0]
 8009636:	695b      	ldr	r3, [r3, #20]
 8009638:	61bb      	str	r3, [r7, #24]
 800963a:	68fb      	ldr	r3, [r7, #12]
 800963c:	681b      	ldr	r3, [r3, #0]
 800963e:	699b      	ldr	r3, [r3, #24]
 8009640:	61bb      	str	r3, [r7, #24]
 8009642:	69bb      	ldr	r3, [r7, #24]
 8009644:	e144      	b.n	80098d0 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009646:	2300      	movs	r3, #0
 8009648:	617b      	str	r3, [r7, #20]
 800964a:	68fb      	ldr	r3, [r7, #12]
 800964c:	681b      	ldr	r3, [r3, #0]
 800964e:	695b      	ldr	r3, [r3, #20]
 8009650:	617b      	str	r3, [r7, #20]
 8009652:	68fb      	ldr	r3, [r7, #12]
 8009654:	681b      	ldr	r3, [r3, #0]
 8009656:	699b      	ldr	r3, [r3, #24]
 8009658:	617b      	str	r3, [r7, #20]
 800965a:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 800965c:	e138      	b.n	80098d0 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 800965e:	68fb      	ldr	r3, [r7, #12]
 8009660:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009662:	2b03      	cmp	r3, #3
 8009664:	f200 80f1 	bhi.w	800984a <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8009668:	68fb      	ldr	r3, [r7, #12]
 800966a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800966c:	2b01      	cmp	r3, #1
 800966e:	d123      	bne.n	80096b8 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009670:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009672:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8009674:	68f8      	ldr	r0, [r7, #12]
 8009676:	f000 fc35 	bl	8009ee4 <I2C_WaitOnRXNEFlagUntilTimeout>
 800967a:	4603      	mov	r3, r0
 800967c:	2b00      	cmp	r3, #0
 800967e:	d001      	beq.n	8009684 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8009680:	2301      	movs	r3, #1
 8009682:	e139      	b.n	80098f8 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009684:	68fb      	ldr	r3, [r7, #12]
 8009686:	681b      	ldr	r3, [r3, #0]
 8009688:	691a      	ldr	r2, [r3, #16]
 800968a:	68fb      	ldr	r3, [r7, #12]
 800968c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800968e:	b2d2      	uxtb	r2, r2
 8009690:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009692:	68fb      	ldr	r3, [r7, #12]
 8009694:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009696:	1c5a      	adds	r2, r3, #1
 8009698:	68fb      	ldr	r3, [r7, #12]
 800969a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800969c:	68fb      	ldr	r3, [r7, #12]
 800969e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80096a0:	3b01      	subs	r3, #1
 80096a2:	b29a      	uxth	r2, r3
 80096a4:	68fb      	ldr	r3, [r7, #12]
 80096a6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80096a8:	68fb      	ldr	r3, [r7, #12]
 80096aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80096ac:	b29b      	uxth	r3, r3
 80096ae:	3b01      	subs	r3, #1
 80096b0:	b29a      	uxth	r2, r3
 80096b2:	68fb      	ldr	r3, [r7, #12]
 80096b4:	855a      	strh	r2, [r3, #42]	; 0x2a
 80096b6:	e10b      	b.n	80098d0 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80096b8:	68fb      	ldr	r3, [r7, #12]
 80096ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80096bc:	2b02      	cmp	r3, #2
 80096be:	d14e      	bne.n	800975e <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80096c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80096c2:	9300      	str	r3, [sp, #0]
 80096c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80096c6:	2200      	movs	r2, #0
 80096c8:	4906      	ldr	r1, [pc, #24]	; (80096e4 <HAL_I2C_Mem_Read+0x22c>)
 80096ca:	68f8      	ldr	r0, [r7, #12]
 80096cc:	f000 fab2 	bl	8009c34 <I2C_WaitOnFlagUntilTimeout>
 80096d0:	4603      	mov	r3, r0
 80096d2:	2b00      	cmp	r3, #0
 80096d4:	d008      	beq.n	80096e8 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 80096d6:	2301      	movs	r3, #1
 80096d8:	e10e      	b.n	80098f8 <HAL_I2C_Mem_Read+0x440>
 80096da:	bf00      	nop
 80096dc:	00100002 	.word	0x00100002
 80096e0:	ffff0000 	.word	0xffff0000
 80096e4:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80096e8:	68fb      	ldr	r3, [r7, #12]
 80096ea:	681b      	ldr	r3, [r3, #0]
 80096ec:	681a      	ldr	r2, [r3, #0]
 80096ee:	68fb      	ldr	r3, [r7, #12]
 80096f0:	681b      	ldr	r3, [r3, #0]
 80096f2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80096f6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80096f8:	68fb      	ldr	r3, [r7, #12]
 80096fa:	681b      	ldr	r3, [r3, #0]
 80096fc:	691a      	ldr	r2, [r3, #16]
 80096fe:	68fb      	ldr	r3, [r7, #12]
 8009700:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009702:	b2d2      	uxtb	r2, r2
 8009704:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009706:	68fb      	ldr	r3, [r7, #12]
 8009708:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800970a:	1c5a      	adds	r2, r3, #1
 800970c:	68fb      	ldr	r3, [r7, #12]
 800970e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009710:	68fb      	ldr	r3, [r7, #12]
 8009712:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009714:	3b01      	subs	r3, #1
 8009716:	b29a      	uxth	r2, r3
 8009718:	68fb      	ldr	r3, [r7, #12]
 800971a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800971c:	68fb      	ldr	r3, [r7, #12]
 800971e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009720:	b29b      	uxth	r3, r3
 8009722:	3b01      	subs	r3, #1
 8009724:	b29a      	uxth	r2, r3
 8009726:	68fb      	ldr	r3, [r7, #12]
 8009728:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800972a:	68fb      	ldr	r3, [r7, #12]
 800972c:	681b      	ldr	r3, [r3, #0]
 800972e:	691a      	ldr	r2, [r3, #16]
 8009730:	68fb      	ldr	r3, [r7, #12]
 8009732:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009734:	b2d2      	uxtb	r2, r2
 8009736:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009738:	68fb      	ldr	r3, [r7, #12]
 800973a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800973c:	1c5a      	adds	r2, r3, #1
 800973e:	68fb      	ldr	r3, [r7, #12]
 8009740:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009742:	68fb      	ldr	r3, [r7, #12]
 8009744:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009746:	3b01      	subs	r3, #1
 8009748:	b29a      	uxth	r2, r3
 800974a:	68fb      	ldr	r3, [r7, #12]
 800974c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800974e:	68fb      	ldr	r3, [r7, #12]
 8009750:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009752:	b29b      	uxth	r3, r3
 8009754:	3b01      	subs	r3, #1
 8009756:	b29a      	uxth	r2, r3
 8009758:	68fb      	ldr	r3, [r7, #12]
 800975a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800975c:	e0b8      	b.n	80098d0 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800975e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009760:	9300      	str	r3, [sp, #0]
 8009762:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009764:	2200      	movs	r2, #0
 8009766:	4966      	ldr	r1, [pc, #408]	; (8009900 <HAL_I2C_Mem_Read+0x448>)
 8009768:	68f8      	ldr	r0, [r7, #12]
 800976a:	f000 fa63 	bl	8009c34 <I2C_WaitOnFlagUntilTimeout>
 800976e:	4603      	mov	r3, r0
 8009770:	2b00      	cmp	r3, #0
 8009772:	d001      	beq.n	8009778 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8009774:	2301      	movs	r3, #1
 8009776:	e0bf      	b.n	80098f8 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009778:	68fb      	ldr	r3, [r7, #12]
 800977a:	681b      	ldr	r3, [r3, #0]
 800977c:	681a      	ldr	r2, [r3, #0]
 800977e:	68fb      	ldr	r3, [r7, #12]
 8009780:	681b      	ldr	r3, [r3, #0]
 8009782:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009786:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009788:	68fb      	ldr	r3, [r7, #12]
 800978a:	681b      	ldr	r3, [r3, #0]
 800978c:	691a      	ldr	r2, [r3, #16]
 800978e:	68fb      	ldr	r3, [r7, #12]
 8009790:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009792:	b2d2      	uxtb	r2, r2
 8009794:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009796:	68fb      	ldr	r3, [r7, #12]
 8009798:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800979a:	1c5a      	adds	r2, r3, #1
 800979c:	68fb      	ldr	r3, [r7, #12]
 800979e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80097a0:	68fb      	ldr	r3, [r7, #12]
 80097a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80097a4:	3b01      	subs	r3, #1
 80097a6:	b29a      	uxth	r2, r3
 80097a8:	68fb      	ldr	r3, [r7, #12]
 80097aa:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80097ac:	68fb      	ldr	r3, [r7, #12]
 80097ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80097b0:	b29b      	uxth	r3, r3
 80097b2:	3b01      	subs	r3, #1
 80097b4:	b29a      	uxth	r2, r3
 80097b6:	68fb      	ldr	r3, [r7, #12]
 80097b8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80097ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097bc:	9300      	str	r3, [sp, #0]
 80097be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80097c0:	2200      	movs	r2, #0
 80097c2:	494f      	ldr	r1, [pc, #316]	; (8009900 <HAL_I2C_Mem_Read+0x448>)
 80097c4:	68f8      	ldr	r0, [r7, #12]
 80097c6:	f000 fa35 	bl	8009c34 <I2C_WaitOnFlagUntilTimeout>
 80097ca:	4603      	mov	r3, r0
 80097cc:	2b00      	cmp	r3, #0
 80097ce:	d001      	beq.n	80097d4 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 80097d0:	2301      	movs	r3, #1
 80097d2:	e091      	b.n	80098f8 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80097d4:	68fb      	ldr	r3, [r7, #12]
 80097d6:	681b      	ldr	r3, [r3, #0]
 80097d8:	681a      	ldr	r2, [r3, #0]
 80097da:	68fb      	ldr	r3, [r7, #12]
 80097dc:	681b      	ldr	r3, [r3, #0]
 80097de:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80097e2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80097e4:	68fb      	ldr	r3, [r7, #12]
 80097e6:	681b      	ldr	r3, [r3, #0]
 80097e8:	691a      	ldr	r2, [r3, #16]
 80097ea:	68fb      	ldr	r3, [r7, #12]
 80097ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80097ee:	b2d2      	uxtb	r2, r2
 80097f0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80097f2:	68fb      	ldr	r3, [r7, #12]
 80097f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80097f6:	1c5a      	adds	r2, r3, #1
 80097f8:	68fb      	ldr	r3, [r7, #12]
 80097fa:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80097fc:	68fb      	ldr	r3, [r7, #12]
 80097fe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009800:	3b01      	subs	r3, #1
 8009802:	b29a      	uxth	r2, r3
 8009804:	68fb      	ldr	r3, [r7, #12]
 8009806:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8009808:	68fb      	ldr	r3, [r7, #12]
 800980a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800980c:	b29b      	uxth	r3, r3
 800980e:	3b01      	subs	r3, #1
 8009810:	b29a      	uxth	r2, r3
 8009812:	68fb      	ldr	r3, [r7, #12]
 8009814:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009816:	68fb      	ldr	r3, [r7, #12]
 8009818:	681b      	ldr	r3, [r3, #0]
 800981a:	691a      	ldr	r2, [r3, #16]
 800981c:	68fb      	ldr	r3, [r7, #12]
 800981e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009820:	b2d2      	uxtb	r2, r2
 8009822:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009824:	68fb      	ldr	r3, [r7, #12]
 8009826:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009828:	1c5a      	adds	r2, r3, #1
 800982a:	68fb      	ldr	r3, [r7, #12]
 800982c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800982e:	68fb      	ldr	r3, [r7, #12]
 8009830:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009832:	3b01      	subs	r3, #1
 8009834:	b29a      	uxth	r2, r3
 8009836:	68fb      	ldr	r3, [r7, #12]
 8009838:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800983a:	68fb      	ldr	r3, [r7, #12]
 800983c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800983e:	b29b      	uxth	r3, r3
 8009840:	3b01      	subs	r3, #1
 8009842:	b29a      	uxth	r2, r3
 8009844:	68fb      	ldr	r3, [r7, #12]
 8009846:	855a      	strh	r2, [r3, #42]	; 0x2a
 8009848:	e042      	b.n	80098d0 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800984a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800984c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800984e:	68f8      	ldr	r0, [r7, #12]
 8009850:	f000 fb48 	bl	8009ee4 <I2C_WaitOnRXNEFlagUntilTimeout>
 8009854:	4603      	mov	r3, r0
 8009856:	2b00      	cmp	r3, #0
 8009858:	d001      	beq.n	800985e <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 800985a:	2301      	movs	r3, #1
 800985c:	e04c      	b.n	80098f8 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800985e:	68fb      	ldr	r3, [r7, #12]
 8009860:	681b      	ldr	r3, [r3, #0]
 8009862:	691a      	ldr	r2, [r3, #16]
 8009864:	68fb      	ldr	r3, [r7, #12]
 8009866:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009868:	b2d2      	uxtb	r2, r2
 800986a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800986c:	68fb      	ldr	r3, [r7, #12]
 800986e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009870:	1c5a      	adds	r2, r3, #1
 8009872:	68fb      	ldr	r3, [r7, #12]
 8009874:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8009876:	68fb      	ldr	r3, [r7, #12]
 8009878:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800987a:	3b01      	subs	r3, #1
 800987c:	b29a      	uxth	r2, r3
 800987e:	68fb      	ldr	r3, [r7, #12]
 8009880:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8009882:	68fb      	ldr	r3, [r7, #12]
 8009884:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009886:	b29b      	uxth	r3, r3
 8009888:	3b01      	subs	r3, #1
 800988a:	b29a      	uxth	r2, r3
 800988c:	68fb      	ldr	r3, [r7, #12]
 800988e:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8009890:	68fb      	ldr	r3, [r7, #12]
 8009892:	681b      	ldr	r3, [r3, #0]
 8009894:	695b      	ldr	r3, [r3, #20]
 8009896:	f003 0304 	and.w	r3, r3, #4
 800989a:	2b04      	cmp	r3, #4
 800989c:	d118      	bne.n	80098d0 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800989e:	68fb      	ldr	r3, [r7, #12]
 80098a0:	681b      	ldr	r3, [r3, #0]
 80098a2:	691a      	ldr	r2, [r3, #16]
 80098a4:	68fb      	ldr	r3, [r7, #12]
 80098a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80098a8:	b2d2      	uxtb	r2, r2
 80098aa:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80098ac:	68fb      	ldr	r3, [r7, #12]
 80098ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80098b0:	1c5a      	adds	r2, r3, #1
 80098b2:	68fb      	ldr	r3, [r7, #12]
 80098b4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80098b6:	68fb      	ldr	r3, [r7, #12]
 80098b8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80098ba:	3b01      	subs	r3, #1
 80098bc:	b29a      	uxth	r2, r3
 80098be:	68fb      	ldr	r3, [r7, #12]
 80098c0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80098c2:	68fb      	ldr	r3, [r7, #12]
 80098c4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80098c6:	b29b      	uxth	r3, r3
 80098c8:	3b01      	subs	r3, #1
 80098ca:	b29a      	uxth	r2, r3
 80098cc:	68fb      	ldr	r3, [r7, #12]
 80098ce:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80098d0:	68fb      	ldr	r3, [r7, #12]
 80098d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80098d4:	2b00      	cmp	r3, #0
 80098d6:	f47f aec2 	bne.w	800965e <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80098da:	68fb      	ldr	r3, [r7, #12]
 80098dc:	2220      	movs	r2, #32
 80098de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80098e2:	68fb      	ldr	r3, [r7, #12]
 80098e4:	2200      	movs	r2, #0
 80098e6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80098ea:	68fb      	ldr	r3, [r7, #12]
 80098ec:	2200      	movs	r2, #0
 80098ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80098f2:	2300      	movs	r3, #0
 80098f4:	e000      	b.n	80098f8 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 80098f6:	2302      	movs	r3, #2
  }
}
 80098f8:	4618      	mov	r0, r3
 80098fa:	3728      	adds	r7, #40	; 0x28
 80098fc:	46bd      	mov	sp, r7
 80098fe:	bd80      	pop	{r7, pc}
 8009900:	00010004 	.word	0x00010004

08009904 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 8009904:	b480      	push	{r7}
 8009906:	b083      	sub	sp, #12
 8009908:	af00      	add	r7, sp, #0
 800990a:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 800990c:	687b      	ldr	r3, [r7, #4]
 800990e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009912:	b2db      	uxtb	r3, r3
}
 8009914:	4618      	mov	r0, r3
 8009916:	370c      	adds	r7, #12
 8009918:	46bd      	mov	sp, r7
 800991a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800991e:	4770      	bx	lr

08009920 <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(I2C_HandleTypeDef *hi2c)
{
 8009920:	b480      	push	{r7}
 8009922:	b083      	sub	sp, #12
 8009924:	af00      	add	r7, sp, #0
 8009926:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 8009928:	687b      	ldr	r3, [r7, #4]
 800992a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 800992c:	4618      	mov	r0, r3
 800992e:	370c      	adds	r7, #12
 8009930:	46bd      	mov	sp, r7
 8009932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009936:	4770      	bx	lr

08009938 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8009938:	b580      	push	{r7, lr}
 800993a:	b088      	sub	sp, #32
 800993c:	af02      	add	r7, sp, #8
 800993e:	60f8      	str	r0, [r7, #12]
 8009940:	4608      	mov	r0, r1
 8009942:	4611      	mov	r1, r2
 8009944:	461a      	mov	r2, r3
 8009946:	4603      	mov	r3, r0
 8009948:	817b      	strh	r3, [r7, #10]
 800994a:	460b      	mov	r3, r1
 800994c:	813b      	strh	r3, [r7, #8]
 800994e:	4613      	mov	r3, r2
 8009950:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8009952:	68fb      	ldr	r3, [r7, #12]
 8009954:	681b      	ldr	r3, [r3, #0]
 8009956:	681a      	ldr	r2, [r3, #0]
 8009958:	68fb      	ldr	r3, [r7, #12]
 800995a:	681b      	ldr	r3, [r3, #0]
 800995c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009960:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8009962:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009964:	9300      	str	r3, [sp, #0]
 8009966:	6a3b      	ldr	r3, [r7, #32]
 8009968:	2200      	movs	r2, #0
 800996a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800996e:	68f8      	ldr	r0, [r7, #12]
 8009970:	f000 f960 	bl	8009c34 <I2C_WaitOnFlagUntilTimeout>
 8009974:	4603      	mov	r3, r0
 8009976:	2b00      	cmp	r3, #0
 8009978:	d00d      	beq.n	8009996 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800997a:	68fb      	ldr	r3, [r7, #12]
 800997c:	681b      	ldr	r3, [r3, #0]
 800997e:	681b      	ldr	r3, [r3, #0]
 8009980:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009984:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009988:	d103      	bne.n	8009992 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800998a:	68fb      	ldr	r3, [r7, #12]
 800998c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009990:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8009992:	2303      	movs	r3, #3
 8009994:	e05f      	b.n	8009a56 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8009996:	897b      	ldrh	r3, [r7, #10]
 8009998:	b2db      	uxtb	r3, r3
 800999a:	461a      	mov	r2, r3
 800999c:	68fb      	ldr	r3, [r7, #12]
 800999e:	681b      	ldr	r3, [r3, #0]
 80099a0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80099a4:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80099a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099a8:	6a3a      	ldr	r2, [r7, #32]
 80099aa:	492d      	ldr	r1, [pc, #180]	; (8009a60 <I2C_RequestMemoryWrite+0x128>)
 80099ac:	68f8      	ldr	r0, [r7, #12]
 80099ae:	f000 f998 	bl	8009ce2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80099b2:	4603      	mov	r3, r0
 80099b4:	2b00      	cmp	r3, #0
 80099b6:	d001      	beq.n	80099bc <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80099b8:	2301      	movs	r3, #1
 80099ba:	e04c      	b.n	8009a56 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80099bc:	2300      	movs	r3, #0
 80099be:	617b      	str	r3, [r7, #20]
 80099c0:	68fb      	ldr	r3, [r7, #12]
 80099c2:	681b      	ldr	r3, [r3, #0]
 80099c4:	695b      	ldr	r3, [r3, #20]
 80099c6:	617b      	str	r3, [r7, #20]
 80099c8:	68fb      	ldr	r3, [r7, #12]
 80099ca:	681b      	ldr	r3, [r3, #0]
 80099cc:	699b      	ldr	r3, [r3, #24]
 80099ce:	617b      	str	r3, [r7, #20]
 80099d0:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80099d2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80099d4:	6a39      	ldr	r1, [r7, #32]
 80099d6:	68f8      	ldr	r0, [r7, #12]
 80099d8:	f000 fa02 	bl	8009de0 <I2C_WaitOnTXEFlagUntilTimeout>
 80099dc:	4603      	mov	r3, r0
 80099de:	2b00      	cmp	r3, #0
 80099e0:	d00d      	beq.n	80099fe <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80099e2:	68fb      	ldr	r3, [r7, #12]
 80099e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80099e6:	2b04      	cmp	r3, #4
 80099e8:	d107      	bne.n	80099fa <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80099ea:	68fb      	ldr	r3, [r7, #12]
 80099ec:	681b      	ldr	r3, [r3, #0]
 80099ee:	681a      	ldr	r2, [r3, #0]
 80099f0:	68fb      	ldr	r3, [r7, #12]
 80099f2:	681b      	ldr	r3, [r3, #0]
 80099f4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80099f8:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80099fa:	2301      	movs	r3, #1
 80099fc:	e02b      	b.n	8009a56 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80099fe:	88fb      	ldrh	r3, [r7, #6]
 8009a00:	2b01      	cmp	r3, #1
 8009a02:	d105      	bne.n	8009a10 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8009a04:	893b      	ldrh	r3, [r7, #8]
 8009a06:	b2da      	uxtb	r2, r3
 8009a08:	68fb      	ldr	r3, [r7, #12]
 8009a0a:	681b      	ldr	r3, [r3, #0]
 8009a0c:	611a      	str	r2, [r3, #16]
 8009a0e:	e021      	b.n	8009a54 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8009a10:	893b      	ldrh	r3, [r7, #8]
 8009a12:	0a1b      	lsrs	r3, r3, #8
 8009a14:	b29b      	uxth	r3, r3
 8009a16:	b2da      	uxtb	r2, r3
 8009a18:	68fb      	ldr	r3, [r7, #12]
 8009a1a:	681b      	ldr	r3, [r3, #0]
 8009a1c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8009a1e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009a20:	6a39      	ldr	r1, [r7, #32]
 8009a22:	68f8      	ldr	r0, [r7, #12]
 8009a24:	f000 f9dc 	bl	8009de0 <I2C_WaitOnTXEFlagUntilTimeout>
 8009a28:	4603      	mov	r3, r0
 8009a2a:	2b00      	cmp	r3, #0
 8009a2c:	d00d      	beq.n	8009a4a <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8009a2e:	68fb      	ldr	r3, [r7, #12]
 8009a30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009a32:	2b04      	cmp	r3, #4
 8009a34:	d107      	bne.n	8009a46 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009a36:	68fb      	ldr	r3, [r7, #12]
 8009a38:	681b      	ldr	r3, [r3, #0]
 8009a3a:	681a      	ldr	r2, [r3, #0]
 8009a3c:	68fb      	ldr	r3, [r7, #12]
 8009a3e:	681b      	ldr	r3, [r3, #0]
 8009a40:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009a44:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8009a46:	2301      	movs	r3, #1
 8009a48:	e005      	b.n	8009a56 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8009a4a:	893b      	ldrh	r3, [r7, #8]
 8009a4c:	b2da      	uxtb	r2, r3
 8009a4e:	68fb      	ldr	r3, [r7, #12]
 8009a50:	681b      	ldr	r3, [r3, #0]
 8009a52:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8009a54:	2300      	movs	r3, #0
}
 8009a56:	4618      	mov	r0, r3
 8009a58:	3718      	adds	r7, #24
 8009a5a:	46bd      	mov	sp, r7
 8009a5c:	bd80      	pop	{r7, pc}
 8009a5e:	bf00      	nop
 8009a60:	00010002 	.word	0x00010002

08009a64 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8009a64:	b580      	push	{r7, lr}
 8009a66:	b088      	sub	sp, #32
 8009a68:	af02      	add	r7, sp, #8
 8009a6a:	60f8      	str	r0, [r7, #12]
 8009a6c:	4608      	mov	r0, r1
 8009a6e:	4611      	mov	r1, r2
 8009a70:	461a      	mov	r2, r3
 8009a72:	4603      	mov	r3, r0
 8009a74:	817b      	strh	r3, [r7, #10]
 8009a76:	460b      	mov	r3, r1
 8009a78:	813b      	strh	r3, [r7, #8]
 8009a7a:	4613      	mov	r3, r2
 8009a7c:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009a7e:	68fb      	ldr	r3, [r7, #12]
 8009a80:	681b      	ldr	r3, [r3, #0]
 8009a82:	681a      	ldr	r2, [r3, #0]
 8009a84:	68fb      	ldr	r3, [r7, #12]
 8009a86:	681b      	ldr	r3, [r3, #0]
 8009a88:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8009a8c:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8009a8e:	68fb      	ldr	r3, [r7, #12]
 8009a90:	681b      	ldr	r3, [r3, #0]
 8009a92:	681a      	ldr	r2, [r3, #0]
 8009a94:	68fb      	ldr	r3, [r7, #12]
 8009a96:	681b      	ldr	r3, [r3, #0]
 8009a98:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009a9c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8009a9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009aa0:	9300      	str	r3, [sp, #0]
 8009aa2:	6a3b      	ldr	r3, [r7, #32]
 8009aa4:	2200      	movs	r2, #0
 8009aa6:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8009aaa:	68f8      	ldr	r0, [r7, #12]
 8009aac:	f000 f8c2 	bl	8009c34 <I2C_WaitOnFlagUntilTimeout>
 8009ab0:	4603      	mov	r3, r0
 8009ab2:	2b00      	cmp	r3, #0
 8009ab4:	d00d      	beq.n	8009ad2 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8009ab6:	68fb      	ldr	r3, [r7, #12]
 8009ab8:	681b      	ldr	r3, [r3, #0]
 8009aba:	681b      	ldr	r3, [r3, #0]
 8009abc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009ac0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009ac4:	d103      	bne.n	8009ace <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8009ac6:	68fb      	ldr	r3, [r7, #12]
 8009ac8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009acc:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8009ace:	2303      	movs	r3, #3
 8009ad0:	e0aa      	b.n	8009c28 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8009ad2:	897b      	ldrh	r3, [r7, #10]
 8009ad4:	b2db      	uxtb	r3, r3
 8009ad6:	461a      	mov	r2, r3
 8009ad8:	68fb      	ldr	r3, [r7, #12]
 8009ada:	681b      	ldr	r3, [r3, #0]
 8009adc:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8009ae0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8009ae2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ae4:	6a3a      	ldr	r2, [r7, #32]
 8009ae6:	4952      	ldr	r1, [pc, #328]	; (8009c30 <I2C_RequestMemoryRead+0x1cc>)
 8009ae8:	68f8      	ldr	r0, [r7, #12]
 8009aea:	f000 f8fa 	bl	8009ce2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8009aee:	4603      	mov	r3, r0
 8009af0:	2b00      	cmp	r3, #0
 8009af2:	d001      	beq.n	8009af8 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8009af4:	2301      	movs	r3, #1
 8009af6:	e097      	b.n	8009c28 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009af8:	2300      	movs	r3, #0
 8009afa:	617b      	str	r3, [r7, #20]
 8009afc:	68fb      	ldr	r3, [r7, #12]
 8009afe:	681b      	ldr	r3, [r3, #0]
 8009b00:	695b      	ldr	r3, [r3, #20]
 8009b02:	617b      	str	r3, [r7, #20]
 8009b04:	68fb      	ldr	r3, [r7, #12]
 8009b06:	681b      	ldr	r3, [r3, #0]
 8009b08:	699b      	ldr	r3, [r3, #24]
 8009b0a:	617b      	str	r3, [r7, #20]
 8009b0c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8009b0e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009b10:	6a39      	ldr	r1, [r7, #32]
 8009b12:	68f8      	ldr	r0, [r7, #12]
 8009b14:	f000 f964 	bl	8009de0 <I2C_WaitOnTXEFlagUntilTimeout>
 8009b18:	4603      	mov	r3, r0
 8009b1a:	2b00      	cmp	r3, #0
 8009b1c:	d00d      	beq.n	8009b3a <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8009b1e:	68fb      	ldr	r3, [r7, #12]
 8009b20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009b22:	2b04      	cmp	r3, #4
 8009b24:	d107      	bne.n	8009b36 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009b26:	68fb      	ldr	r3, [r7, #12]
 8009b28:	681b      	ldr	r3, [r3, #0]
 8009b2a:	681a      	ldr	r2, [r3, #0]
 8009b2c:	68fb      	ldr	r3, [r7, #12]
 8009b2e:	681b      	ldr	r3, [r3, #0]
 8009b30:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009b34:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8009b36:	2301      	movs	r3, #1
 8009b38:	e076      	b.n	8009c28 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8009b3a:	88fb      	ldrh	r3, [r7, #6]
 8009b3c:	2b01      	cmp	r3, #1
 8009b3e:	d105      	bne.n	8009b4c <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8009b40:	893b      	ldrh	r3, [r7, #8]
 8009b42:	b2da      	uxtb	r2, r3
 8009b44:	68fb      	ldr	r3, [r7, #12]
 8009b46:	681b      	ldr	r3, [r3, #0]
 8009b48:	611a      	str	r2, [r3, #16]
 8009b4a:	e021      	b.n	8009b90 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8009b4c:	893b      	ldrh	r3, [r7, #8]
 8009b4e:	0a1b      	lsrs	r3, r3, #8
 8009b50:	b29b      	uxth	r3, r3
 8009b52:	b2da      	uxtb	r2, r3
 8009b54:	68fb      	ldr	r3, [r7, #12]
 8009b56:	681b      	ldr	r3, [r3, #0]
 8009b58:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8009b5a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009b5c:	6a39      	ldr	r1, [r7, #32]
 8009b5e:	68f8      	ldr	r0, [r7, #12]
 8009b60:	f000 f93e 	bl	8009de0 <I2C_WaitOnTXEFlagUntilTimeout>
 8009b64:	4603      	mov	r3, r0
 8009b66:	2b00      	cmp	r3, #0
 8009b68:	d00d      	beq.n	8009b86 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8009b6a:	68fb      	ldr	r3, [r7, #12]
 8009b6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009b6e:	2b04      	cmp	r3, #4
 8009b70:	d107      	bne.n	8009b82 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009b72:	68fb      	ldr	r3, [r7, #12]
 8009b74:	681b      	ldr	r3, [r3, #0]
 8009b76:	681a      	ldr	r2, [r3, #0]
 8009b78:	68fb      	ldr	r3, [r7, #12]
 8009b7a:	681b      	ldr	r3, [r3, #0]
 8009b7c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009b80:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8009b82:	2301      	movs	r3, #1
 8009b84:	e050      	b.n	8009c28 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8009b86:	893b      	ldrh	r3, [r7, #8]
 8009b88:	b2da      	uxtb	r2, r3
 8009b8a:	68fb      	ldr	r3, [r7, #12]
 8009b8c:	681b      	ldr	r3, [r3, #0]
 8009b8e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8009b90:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009b92:	6a39      	ldr	r1, [r7, #32]
 8009b94:	68f8      	ldr	r0, [r7, #12]
 8009b96:	f000 f923 	bl	8009de0 <I2C_WaitOnTXEFlagUntilTimeout>
 8009b9a:	4603      	mov	r3, r0
 8009b9c:	2b00      	cmp	r3, #0
 8009b9e:	d00d      	beq.n	8009bbc <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8009ba0:	68fb      	ldr	r3, [r7, #12]
 8009ba2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009ba4:	2b04      	cmp	r3, #4
 8009ba6:	d107      	bne.n	8009bb8 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009ba8:	68fb      	ldr	r3, [r7, #12]
 8009baa:	681b      	ldr	r3, [r3, #0]
 8009bac:	681a      	ldr	r2, [r3, #0]
 8009bae:	68fb      	ldr	r3, [r7, #12]
 8009bb0:	681b      	ldr	r3, [r3, #0]
 8009bb2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009bb6:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8009bb8:	2301      	movs	r3, #1
 8009bba:	e035      	b.n	8009c28 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8009bbc:	68fb      	ldr	r3, [r7, #12]
 8009bbe:	681b      	ldr	r3, [r3, #0]
 8009bc0:	681a      	ldr	r2, [r3, #0]
 8009bc2:	68fb      	ldr	r3, [r7, #12]
 8009bc4:	681b      	ldr	r3, [r3, #0]
 8009bc6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009bca:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8009bcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009bce:	9300      	str	r3, [sp, #0]
 8009bd0:	6a3b      	ldr	r3, [r7, #32]
 8009bd2:	2200      	movs	r2, #0
 8009bd4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8009bd8:	68f8      	ldr	r0, [r7, #12]
 8009bda:	f000 f82b 	bl	8009c34 <I2C_WaitOnFlagUntilTimeout>
 8009bde:	4603      	mov	r3, r0
 8009be0:	2b00      	cmp	r3, #0
 8009be2:	d00d      	beq.n	8009c00 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8009be4:	68fb      	ldr	r3, [r7, #12]
 8009be6:	681b      	ldr	r3, [r3, #0]
 8009be8:	681b      	ldr	r3, [r3, #0]
 8009bea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009bee:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009bf2:	d103      	bne.n	8009bfc <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8009bf4:	68fb      	ldr	r3, [r7, #12]
 8009bf6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009bfa:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8009bfc:	2303      	movs	r3, #3
 8009bfe:	e013      	b.n	8009c28 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8009c00:	897b      	ldrh	r3, [r7, #10]
 8009c02:	b2db      	uxtb	r3, r3
 8009c04:	f043 0301 	orr.w	r3, r3, #1
 8009c08:	b2da      	uxtb	r2, r3
 8009c0a:	68fb      	ldr	r3, [r7, #12]
 8009c0c:	681b      	ldr	r3, [r3, #0]
 8009c0e:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8009c10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c12:	6a3a      	ldr	r2, [r7, #32]
 8009c14:	4906      	ldr	r1, [pc, #24]	; (8009c30 <I2C_RequestMemoryRead+0x1cc>)
 8009c16:	68f8      	ldr	r0, [r7, #12]
 8009c18:	f000 f863 	bl	8009ce2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8009c1c:	4603      	mov	r3, r0
 8009c1e:	2b00      	cmp	r3, #0
 8009c20:	d001      	beq.n	8009c26 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8009c22:	2301      	movs	r3, #1
 8009c24:	e000      	b.n	8009c28 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8009c26:	2300      	movs	r3, #0
}
 8009c28:	4618      	mov	r0, r3
 8009c2a:	3718      	adds	r7, #24
 8009c2c:	46bd      	mov	sp, r7
 8009c2e:	bd80      	pop	{r7, pc}
 8009c30:	00010002 	.word	0x00010002

08009c34 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8009c34:	b580      	push	{r7, lr}
 8009c36:	b084      	sub	sp, #16
 8009c38:	af00      	add	r7, sp, #0
 8009c3a:	60f8      	str	r0, [r7, #12]
 8009c3c:	60b9      	str	r1, [r7, #8]
 8009c3e:	603b      	str	r3, [r7, #0]
 8009c40:	4613      	mov	r3, r2
 8009c42:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8009c44:	e025      	b.n	8009c92 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009c46:	683b      	ldr	r3, [r7, #0]
 8009c48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009c4c:	d021      	beq.n	8009c92 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009c4e:	f7fe fd69 	bl	8008724 <HAL_GetTick>
 8009c52:	4602      	mov	r2, r0
 8009c54:	69bb      	ldr	r3, [r7, #24]
 8009c56:	1ad3      	subs	r3, r2, r3
 8009c58:	683a      	ldr	r2, [r7, #0]
 8009c5a:	429a      	cmp	r2, r3
 8009c5c:	d302      	bcc.n	8009c64 <I2C_WaitOnFlagUntilTimeout+0x30>
 8009c5e:	683b      	ldr	r3, [r7, #0]
 8009c60:	2b00      	cmp	r3, #0
 8009c62:	d116      	bne.n	8009c92 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8009c64:	68fb      	ldr	r3, [r7, #12]
 8009c66:	2200      	movs	r2, #0
 8009c68:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8009c6a:	68fb      	ldr	r3, [r7, #12]
 8009c6c:	2220      	movs	r2, #32
 8009c6e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8009c72:	68fb      	ldr	r3, [r7, #12]
 8009c74:	2200      	movs	r2, #0
 8009c76:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8009c7a:	68fb      	ldr	r3, [r7, #12]
 8009c7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009c7e:	f043 0220 	orr.w	r2, r3, #32
 8009c82:	68fb      	ldr	r3, [r7, #12]
 8009c84:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8009c86:	68fb      	ldr	r3, [r7, #12]
 8009c88:	2200      	movs	r2, #0
 8009c8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8009c8e:	2301      	movs	r3, #1
 8009c90:	e023      	b.n	8009cda <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8009c92:	68bb      	ldr	r3, [r7, #8]
 8009c94:	0c1b      	lsrs	r3, r3, #16
 8009c96:	b2db      	uxtb	r3, r3
 8009c98:	2b01      	cmp	r3, #1
 8009c9a:	d10d      	bne.n	8009cb8 <I2C_WaitOnFlagUntilTimeout+0x84>
 8009c9c:	68fb      	ldr	r3, [r7, #12]
 8009c9e:	681b      	ldr	r3, [r3, #0]
 8009ca0:	695b      	ldr	r3, [r3, #20]
 8009ca2:	43da      	mvns	r2, r3
 8009ca4:	68bb      	ldr	r3, [r7, #8]
 8009ca6:	4013      	ands	r3, r2
 8009ca8:	b29b      	uxth	r3, r3
 8009caa:	2b00      	cmp	r3, #0
 8009cac:	bf0c      	ite	eq
 8009cae:	2301      	moveq	r3, #1
 8009cb0:	2300      	movne	r3, #0
 8009cb2:	b2db      	uxtb	r3, r3
 8009cb4:	461a      	mov	r2, r3
 8009cb6:	e00c      	b.n	8009cd2 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8009cb8:	68fb      	ldr	r3, [r7, #12]
 8009cba:	681b      	ldr	r3, [r3, #0]
 8009cbc:	699b      	ldr	r3, [r3, #24]
 8009cbe:	43da      	mvns	r2, r3
 8009cc0:	68bb      	ldr	r3, [r7, #8]
 8009cc2:	4013      	ands	r3, r2
 8009cc4:	b29b      	uxth	r3, r3
 8009cc6:	2b00      	cmp	r3, #0
 8009cc8:	bf0c      	ite	eq
 8009cca:	2301      	moveq	r3, #1
 8009ccc:	2300      	movne	r3, #0
 8009cce:	b2db      	uxtb	r3, r3
 8009cd0:	461a      	mov	r2, r3
 8009cd2:	79fb      	ldrb	r3, [r7, #7]
 8009cd4:	429a      	cmp	r2, r3
 8009cd6:	d0b6      	beq.n	8009c46 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8009cd8:	2300      	movs	r3, #0
}
 8009cda:	4618      	mov	r0, r3
 8009cdc:	3710      	adds	r7, #16
 8009cde:	46bd      	mov	sp, r7
 8009ce0:	bd80      	pop	{r7, pc}

08009ce2 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8009ce2:	b580      	push	{r7, lr}
 8009ce4:	b084      	sub	sp, #16
 8009ce6:	af00      	add	r7, sp, #0
 8009ce8:	60f8      	str	r0, [r7, #12]
 8009cea:	60b9      	str	r1, [r7, #8]
 8009cec:	607a      	str	r2, [r7, #4]
 8009cee:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8009cf0:	e051      	b.n	8009d96 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8009cf2:	68fb      	ldr	r3, [r7, #12]
 8009cf4:	681b      	ldr	r3, [r3, #0]
 8009cf6:	695b      	ldr	r3, [r3, #20]
 8009cf8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009cfc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009d00:	d123      	bne.n	8009d4a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009d02:	68fb      	ldr	r3, [r7, #12]
 8009d04:	681b      	ldr	r3, [r3, #0]
 8009d06:	681a      	ldr	r2, [r3, #0]
 8009d08:	68fb      	ldr	r3, [r7, #12]
 8009d0a:	681b      	ldr	r3, [r3, #0]
 8009d0c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009d10:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009d12:	68fb      	ldr	r3, [r7, #12]
 8009d14:	681b      	ldr	r3, [r3, #0]
 8009d16:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8009d1a:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8009d1c:	68fb      	ldr	r3, [r7, #12]
 8009d1e:	2200      	movs	r2, #0
 8009d20:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8009d22:	68fb      	ldr	r3, [r7, #12]
 8009d24:	2220      	movs	r2, #32
 8009d26:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009d2a:	68fb      	ldr	r3, [r7, #12]
 8009d2c:	2200      	movs	r2, #0
 8009d2e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8009d32:	68fb      	ldr	r3, [r7, #12]
 8009d34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009d36:	f043 0204 	orr.w	r2, r3, #4
 8009d3a:	68fb      	ldr	r3, [r7, #12]
 8009d3c:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8009d3e:	68fb      	ldr	r3, [r7, #12]
 8009d40:	2200      	movs	r2, #0
 8009d42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8009d46:	2301      	movs	r3, #1
 8009d48:	e046      	b.n	8009dd8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009d4a:	687b      	ldr	r3, [r7, #4]
 8009d4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009d50:	d021      	beq.n	8009d96 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009d52:	f7fe fce7 	bl	8008724 <HAL_GetTick>
 8009d56:	4602      	mov	r2, r0
 8009d58:	683b      	ldr	r3, [r7, #0]
 8009d5a:	1ad3      	subs	r3, r2, r3
 8009d5c:	687a      	ldr	r2, [r7, #4]
 8009d5e:	429a      	cmp	r2, r3
 8009d60:	d302      	bcc.n	8009d68 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8009d62:	687b      	ldr	r3, [r7, #4]
 8009d64:	2b00      	cmp	r3, #0
 8009d66:	d116      	bne.n	8009d96 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8009d68:	68fb      	ldr	r3, [r7, #12]
 8009d6a:	2200      	movs	r2, #0
 8009d6c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8009d6e:	68fb      	ldr	r3, [r7, #12]
 8009d70:	2220      	movs	r2, #32
 8009d72:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009d76:	68fb      	ldr	r3, [r7, #12]
 8009d78:	2200      	movs	r2, #0
 8009d7a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8009d7e:	68fb      	ldr	r3, [r7, #12]
 8009d80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009d82:	f043 0220 	orr.w	r2, r3, #32
 8009d86:	68fb      	ldr	r3, [r7, #12]
 8009d88:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8009d8a:	68fb      	ldr	r3, [r7, #12]
 8009d8c:	2200      	movs	r2, #0
 8009d8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8009d92:	2301      	movs	r3, #1
 8009d94:	e020      	b.n	8009dd8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8009d96:	68bb      	ldr	r3, [r7, #8]
 8009d98:	0c1b      	lsrs	r3, r3, #16
 8009d9a:	b2db      	uxtb	r3, r3
 8009d9c:	2b01      	cmp	r3, #1
 8009d9e:	d10c      	bne.n	8009dba <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8009da0:	68fb      	ldr	r3, [r7, #12]
 8009da2:	681b      	ldr	r3, [r3, #0]
 8009da4:	695b      	ldr	r3, [r3, #20]
 8009da6:	43da      	mvns	r2, r3
 8009da8:	68bb      	ldr	r3, [r7, #8]
 8009daa:	4013      	ands	r3, r2
 8009dac:	b29b      	uxth	r3, r3
 8009dae:	2b00      	cmp	r3, #0
 8009db0:	bf14      	ite	ne
 8009db2:	2301      	movne	r3, #1
 8009db4:	2300      	moveq	r3, #0
 8009db6:	b2db      	uxtb	r3, r3
 8009db8:	e00b      	b.n	8009dd2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8009dba:	68fb      	ldr	r3, [r7, #12]
 8009dbc:	681b      	ldr	r3, [r3, #0]
 8009dbe:	699b      	ldr	r3, [r3, #24]
 8009dc0:	43da      	mvns	r2, r3
 8009dc2:	68bb      	ldr	r3, [r7, #8]
 8009dc4:	4013      	ands	r3, r2
 8009dc6:	b29b      	uxth	r3, r3
 8009dc8:	2b00      	cmp	r3, #0
 8009dca:	bf14      	ite	ne
 8009dcc:	2301      	movne	r3, #1
 8009dce:	2300      	moveq	r3, #0
 8009dd0:	b2db      	uxtb	r3, r3
 8009dd2:	2b00      	cmp	r3, #0
 8009dd4:	d18d      	bne.n	8009cf2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8009dd6:	2300      	movs	r3, #0
}
 8009dd8:	4618      	mov	r0, r3
 8009dda:	3710      	adds	r7, #16
 8009ddc:	46bd      	mov	sp, r7
 8009dde:	bd80      	pop	{r7, pc}

08009de0 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8009de0:	b580      	push	{r7, lr}
 8009de2:	b084      	sub	sp, #16
 8009de4:	af00      	add	r7, sp, #0
 8009de6:	60f8      	str	r0, [r7, #12]
 8009de8:	60b9      	str	r1, [r7, #8]
 8009dea:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8009dec:	e02d      	b.n	8009e4a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8009dee:	68f8      	ldr	r0, [r7, #12]
 8009df0:	f000 f8ce 	bl	8009f90 <I2C_IsAcknowledgeFailed>
 8009df4:	4603      	mov	r3, r0
 8009df6:	2b00      	cmp	r3, #0
 8009df8:	d001      	beq.n	8009dfe <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8009dfa:	2301      	movs	r3, #1
 8009dfc:	e02d      	b.n	8009e5a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009dfe:	68bb      	ldr	r3, [r7, #8]
 8009e00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009e04:	d021      	beq.n	8009e4a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009e06:	f7fe fc8d 	bl	8008724 <HAL_GetTick>
 8009e0a:	4602      	mov	r2, r0
 8009e0c:	687b      	ldr	r3, [r7, #4]
 8009e0e:	1ad3      	subs	r3, r2, r3
 8009e10:	68ba      	ldr	r2, [r7, #8]
 8009e12:	429a      	cmp	r2, r3
 8009e14:	d302      	bcc.n	8009e1c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8009e16:	68bb      	ldr	r3, [r7, #8]
 8009e18:	2b00      	cmp	r3, #0
 8009e1a:	d116      	bne.n	8009e4a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8009e1c:	68fb      	ldr	r3, [r7, #12]
 8009e1e:	2200      	movs	r2, #0
 8009e20:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8009e22:	68fb      	ldr	r3, [r7, #12]
 8009e24:	2220      	movs	r2, #32
 8009e26:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009e2a:	68fb      	ldr	r3, [r7, #12]
 8009e2c:	2200      	movs	r2, #0
 8009e2e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8009e32:	68fb      	ldr	r3, [r7, #12]
 8009e34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009e36:	f043 0220 	orr.w	r2, r3, #32
 8009e3a:	68fb      	ldr	r3, [r7, #12]
 8009e3c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8009e3e:	68fb      	ldr	r3, [r7, #12]
 8009e40:	2200      	movs	r2, #0
 8009e42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8009e46:	2301      	movs	r3, #1
 8009e48:	e007      	b.n	8009e5a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8009e4a:	68fb      	ldr	r3, [r7, #12]
 8009e4c:	681b      	ldr	r3, [r3, #0]
 8009e4e:	695b      	ldr	r3, [r3, #20]
 8009e50:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009e54:	2b80      	cmp	r3, #128	; 0x80
 8009e56:	d1ca      	bne.n	8009dee <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8009e58:	2300      	movs	r3, #0
}
 8009e5a:	4618      	mov	r0, r3
 8009e5c:	3710      	adds	r7, #16
 8009e5e:	46bd      	mov	sp, r7
 8009e60:	bd80      	pop	{r7, pc}

08009e62 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8009e62:	b580      	push	{r7, lr}
 8009e64:	b084      	sub	sp, #16
 8009e66:	af00      	add	r7, sp, #0
 8009e68:	60f8      	str	r0, [r7, #12]
 8009e6a:	60b9      	str	r1, [r7, #8]
 8009e6c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8009e6e:	e02d      	b.n	8009ecc <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8009e70:	68f8      	ldr	r0, [r7, #12]
 8009e72:	f000 f88d 	bl	8009f90 <I2C_IsAcknowledgeFailed>
 8009e76:	4603      	mov	r3, r0
 8009e78:	2b00      	cmp	r3, #0
 8009e7a:	d001      	beq.n	8009e80 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8009e7c:	2301      	movs	r3, #1
 8009e7e:	e02d      	b.n	8009edc <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009e80:	68bb      	ldr	r3, [r7, #8]
 8009e82:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009e86:	d021      	beq.n	8009ecc <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009e88:	f7fe fc4c 	bl	8008724 <HAL_GetTick>
 8009e8c:	4602      	mov	r2, r0
 8009e8e:	687b      	ldr	r3, [r7, #4]
 8009e90:	1ad3      	subs	r3, r2, r3
 8009e92:	68ba      	ldr	r2, [r7, #8]
 8009e94:	429a      	cmp	r2, r3
 8009e96:	d302      	bcc.n	8009e9e <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8009e98:	68bb      	ldr	r3, [r7, #8]
 8009e9a:	2b00      	cmp	r3, #0
 8009e9c:	d116      	bne.n	8009ecc <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8009e9e:	68fb      	ldr	r3, [r7, #12]
 8009ea0:	2200      	movs	r2, #0
 8009ea2:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8009ea4:	68fb      	ldr	r3, [r7, #12]
 8009ea6:	2220      	movs	r2, #32
 8009ea8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009eac:	68fb      	ldr	r3, [r7, #12]
 8009eae:	2200      	movs	r2, #0
 8009eb0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8009eb4:	68fb      	ldr	r3, [r7, #12]
 8009eb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009eb8:	f043 0220 	orr.w	r2, r3, #32
 8009ebc:	68fb      	ldr	r3, [r7, #12]
 8009ebe:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8009ec0:	68fb      	ldr	r3, [r7, #12]
 8009ec2:	2200      	movs	r2, #0
 8009ec4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8009ec8:	2301      	movs	r3, #1
 8009eca:	e007      	b.n	8009edc <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8009ecc:	68fb      	ldr	r3, [r7, #12]
 8009ece:	681b      	ldr	r3, [r3, #0]
 8009ed0:	695b      	ldr	r3, [r3, #20]
 8009ed2:	f003 0304 	and.w	r3, r3, #4
 8009ed6:	2b04      	cmp	r3, #4
 8009ed8:	d1ca      	bne.n	8009e70 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8009eda:	2300      	movs	r3, #0
}
 8009edc:	4618      	mov	r0, r3
 8009ede:	3710      	adds	r7, #16
 8009ee0:	46bd      	mov	sp, r7
 8009ee2:	bd80      	pop	{r7, pc}

08009ee4 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8009ee4:	b580      	push	{r7, lr}
 8009ee6:	b084      	sub	sp, #16
 8009ee8:	af00      	add	r7, sp, #0
 8009eea:	60f8      	str	r0, [r7, #12]
 8009eec:	60b9      	str	r1, [r7, #8]
 8009eee:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8009ef0:	e042      	b.n	8009f78 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8009ef2:	68fb      	ldr	r3, [r7, #12]
 8009ef4:	681b      	ldr	r3, [r3, #0]
 8009ef6:	695b      	ldr	r3, [r3, #20]
 8009ef8:	f003 0310 	and.w	r3, r3, #16
 8009efc:	2b10      	cmp	r3, #16
 8009efe:	d119      	bne.n	8009f34 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8009f00:	68fb      	ldr	r3, [r7, #12]
 8009f02:	681b      	ldr	r3, [r3, #0]
 8009f04:	f06f 0210 	mvn.w	r2, #16
 8009f08:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8009f0a:	68fb      	ldr	r3, [r7, #12]
 8009f0c:	2200      	movs	r2, #0
 8009f0e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8009f10:	68fb      	ldr	r3, [r7, #12]
 8009f12:	2220      	movs	r2, #32
 8009f14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009f18:	68fb      	ldr	r3, [r7, #12]
 8009f1a:	2200      	movs	r2, #0
 8009f1c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8009f20:	68fb      	ldr	r3, [r7, #12]
 8009f22:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8009f24:	68fb      	ldr	r3, [r7, #12]
 8009f26:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8009f28:	68fb      	ldr	r3, [r7, #12]
 8009f2a:	2200      	movs	r2, #0
 8009f2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8009f30:	2301      	movs	r3, #1
 8009f32:	e029      	b.n	8009f88 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009f34:	f7fe fbf6 	bl	8008724 <HAL_GetTick>
 8009f38:	4602      	mov	r2, r0
 8009f3a:	687b      	ldr	r3, [r7, #4]
 8009f3c:	1ad3      	subs	r3, r2, r3
 8009f3e:	68ba      	ldr	r2, [r7, #8]
 8009f40:	429a      	cmp	r2, r3
 8009f42:	d302      	bcc.n	8009f4a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8009f44:	68bb      	ldr	r3, [r7, #8]
 8009f46:	2b00      	cmp	r3, #0
 8009f48:	d116      	bne.n	8009f78 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8009f4a:	68fb      	ldr	r3, [r7, #12]
 8009f4c:	2200      	movs	r2, #0
 8009f4e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8009f50:	68fb      	ldr	r3, [r7, #12]
 8009f52:	2220      	movs	r2, #32
 8009f54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009f58:	68fb      	ldr	r3, [r7, #12]
 8009f5a:	2200      	movs	r2, #0
 8009f5c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8009f60:	68fb      	ldr	r3, [r7, #12]
 8009f62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009f64:	f043 0220 	orr.w	r2, r3, #32
 8009f68:	68fb      	ldr	r3, [r7, #12]
 8009f6a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8009f6c:	68fb      	ldr	r3, [r7, #12]
 8009f6e:	2200      	movs	r2, #0
 8009f70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8009f74:	2301      	movs	r3, #1
 8009f76:	e007      	b.n	8009f88 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8009f78:	68fb      	ldr	r3, [r7, #12]
 8009f7a:	681b      	ldr	r3, [r3, #0]
 8009f7c:	695b      	ldr	r3, [r3, #20]
 8009f7e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009f82:	2b40      	cmp	r3, #64	; 0x40
 8009f84:	d1b5      	bne.n	8009ef2 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8009f86:	2300      	movs	r3, #0
}
 8009f88:	4618      	mov	r0, r3
 8009f8a:	3710      	adds	r7, #16
 8009f8c:	46bd      	mov	sp, r7
 8009f8e:	bd80      	pop	{r7, pc}

08009f90 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8009f90:	b480      	push	{r7}
 8009f92:	b083      	sub	sp, #12
 8009f94:	af00      	add	r7, sp, #0
 8009f96:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8009f98:	687b      	ldr	r3, [r7, #4]
 8009f9a:	681b      	ldr	r3, [r3, #0]
 8009f9c:	695b      	ldr	r3, [r3, #20]
 8009f9e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009fa2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009fa6:	d11b      	bne.n	8009fe0 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009fa8:	687b      	ldr	r3, [r7, #4]
 8009faa:	681b      	ldr	r3, [r3, #0]
 8009fac:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8009fb0:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8009fb2:	687b      	ldr	r3, [r7, #4]
 8009fb4:	2200      	movs	r2, #0
 8009fb6:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8009fb8:	687b      	ldr	r3, [r7, #4]
 8009fba:	2220      	movs	r2, #32
 8009fbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009fc0:	687b      	ldr	r3, [r7, #4]
 8009fc2:	2200      	movs	r2, #0
 8009fc4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8009fc8:	687b      	ldr	r3, [r7, #4]
 8009fca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009fcc:	f043 0204 	orr.w	r2, r3, #4
 8009fd0:	687b      	ldr	r3, [r7, #4]
 8009fd2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009fd4:	687b      	ldr	r3, [r7, #4]
 8009fd6:	2200      	movs	r2, #0
 8009fd8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8009fdc:	2301      	movs	r3, #1
 8009fde:	e000      	b.n	8009fe2 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8009fe0:	2300      	movs	r3, #0
}
 8009fe2:	4618      	mov	r0, r3
 8009fe4:	370c      	adds	r7, #12
 8009fe6:	46bd      	mov	sp, r7
 8009fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fec:	4770      	bx	lr
	...

08009ff0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8009ff0:	b580      	push	{r7, lr}
 8009ff2:	b086      	sub	sp, #24
 8009ff4:	af00      	add	r7, sp, #0
 8009ff6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8009ff8:	687b      	ldr	r3, [r7, #4]
 8009ffa:	2b00      	cmp	r3, #0
 8009ffc:	d101      	bne.n	800a002 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8009ffe:	2301      	movs	r3, #1
 800a000:	e267      	b.n	800a4d2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800a002:	687b      	ldr	r3, [r7, #4]
 800a004:	681b      	ldr	r3, [r3, #0]
 800a006:	f003 0301 	and.w	r3, r3, #1
 800a00a:	2b00      	cmp	r3, #0
 800a00c:	d075      	beq.n	800a0fa <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800a00e:	4b88      	ldr	r3, [pc, #544]	; (800a230 <HAL_RCC_OscConfig+0x240>)
 800a010:	689b      	ldr	r3, [r3, #8]
 800a012:	f003 030c 	and.w	r3, r3, #12
 800a016:	2b04      	cmp	r3, #4
 800a018:	d00c      	beq.n	800a034 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800a01a:	4b85      	ldr	r3, [pc, #532]	; (800a230 <HAL_RCC_OscConfig+0x240>)
 800a01c:	689b      	ldr	r3, [r3, #8]
 800a01e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800a022:	2b08      	cmp	r3, #8
 800a024:	d112      	bne.n	800a04c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800a026:	4b82      	ldr	r3, [pc, #520]	; (800a230 <HAL_RCC_OscConfig+0x240>)
 800a028:	685b      	ldr	r3, [r3, #4]
 800a02a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a02e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800a032:	d10b      	bne.n	800a04c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a034:	4b7e      	ldr	r3, [pc, #504]	; (800a230 <HAL_RCC_OscConfig+0x240>)
 800a036:	681b      	ldr	r3, [r3, #0]
 800a038:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a03c:	2b00      	cmp	r3, #0
 800a03e:	d05b      	beq.n	800a0f8 <HAL_RCC_OscConfig+0x108>
 800a040:	687b      	ldr	r3, [r7, #4]
 800a042:	685b      	ldr	r3, [r3, #4]
 800a044:	2b00      	cmp	r3, #0
 800a046:	d157      	bne.n	800a0f8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800a048:	2301      	movs	r3, #1
 800a04a:	e242      	b.n	800a4d2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800a04c:	687b      	ldr	r3, [r7, #4]
 800a04e:	685b      	ldr	r3, [r3, #4]
 800a050:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a054:	d106      	bne.n	800a064 <HAL_RCC_OscConfig+0x74>
 800a056:	4b76      	ldr	r3, [pc, #472]	; (800a230 <HAL_RCC_OscConfig+0x240>)
 800a058:	681b      	ldr	r3, [r3, #0]
 800a05a:	4a75      	ldr	r2, [pc, #468]	; (800a230 <HAL_RCC_OscConfig+0x240>)
 800a05c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a060:	6013      	str	r3, [r2, #0]
 800a062:	e01d      	b.n	800a0a0 <HAL_RCC_OscConfig+0xb0>
 800a064:	687b      	ldr	r3, [r7, #4]
 800a066:	685b      	ldr	r3, [r3, #4]
 800a068:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800a06c:	d10c      	bne.n	800a088 <HAL_RCC_OscConfig+0x98>
 800a06e:	4b70      	ldr	r3, [pc, #448]	; (800a230 <HAL_RCC_OscConfig+0x240>)
 800a070:	681b      	ldr	r3, [r3, #0]
 800a072:	4a6f      	ldr	r2, [pc, #444]	; (800a230 <HAL_RCC_OscConfig+0x240>)
 800a074:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800a078:	6013      	str	r3, [r2, #0]
 800a07a:	4b6d      	ldr	r3, [pc, #436]	; (800a230 <HAL_RCC_OscConfig+0x240>)
 800a07c:	681b      	ldr	r3, [r3, #0]
 800a07e:	4a6c      	ldr	r2, [pc, #432]	; (800a230 <HAL_RCC_OscConfig+0x240>)
 800a080:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a084:	6013      	str	r3, [r2, #0]
 800a086:	e00b      	b.n	800a0a0 <HAL_RCC_OscConfig+0xb0>
 800a088:	4b69      	ldr	r3, [pc, #420]	; (800a230 <HAL_RCC_OscConfig+0x240>)
 800a08a:	681b      	ldr	r3, [r3, #0]
 800a08c:	4a68      	ldr	r2, [pc, #416]	; (800a230 <HAL_RCC_OscConfig+0x240>)
 800a08e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a092:	6013      	str	r3, [r2, #0]
 800a094:	4b66      	ldr	r3, [pc, #408]	; (800a230 <HAL_RCC_OscConfig+0x240>)
 800a096:	681b      	ldr	r3, [r3, #0]
 800a098:	4a65      	ldr	r2, [pc, #404]	; (800a230 <HAL_RCC_OscConfig+0x240>)
 800a09a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800a09e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800a0a0:	687b      	ldr	r3, [r7, #4]
 800a0a2:	685b      	ldr	r3, [r3, #4]
 800a0a4:	2b00      	cmp	r3, #0
 800a0a6:	d013      	beq.n	800a0d0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a0a8:	f7fe fb3c 	bl	8008724 <HAL_GetTick>
 800a0ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800a0ae:	e008      	b.n	800a0c2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800a0b0:	f7fe fb38 	bl	8008724 <HAL_GetTick>
 800a0b4:	4602      	mov	r2, r0
 800a0b6:	693b      	ldr	r3, [r7, #16]
 800a0b8:	1ad3      	subs	r3, r2, r3
 800a0ba:	2b64      	cmp	r3, #100	; 0x64
 800a0bc:	d901      	bls.n	800a0c2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800a0be:	2303      	movs	r3, #3
 800a0c0:	e207      	b.n	800a4d2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800a0c2:	4b5b      	ldr	r3, [pc, #364]	; (800a230 <HAL_RCC_OscConfig+0x240>)
 800a0c4:	681b      	ldr	r3, [r3, #0]
 800a0c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a0ca:	2b00      	cmp	r3, #0
 800a0cc:	d0f0      	beq.n	800a0b0 <HAL_RCC_OscConfig+0xc0>
 800a0ce:	e014      	b.n	800a0fa <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a0d0:	f7fe fb28 	bl	8008724 <HAL_GetTick>
 800a0d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800a0d6:	e008      	b.n	800a0ea <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800a0d8:	f7fe fb24 	bl	8008724 <HAL_GetTick>
 800a0dc:	4602      	mov	r2, r0
 800a0de:	693b      	ldr	r3, [r7, #16]
 800a0e0:	1ad3      	subs	r3, r2, r3
 800a0e2:	2b64      	cmp	r3, #100	; 0x64
 800a0e4:	d901      	bls.n	800a0ea <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800a0e6:	2303      	movs	r3, #3
 800a0e8:	e1f3      	b.n	800a4d2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800a0ea:	4b51      	ldr	r3, [pc, #324]	; (800a230 <HAL_RCC_OscConfig+0x240>)
 800a0ec:	681b      	ldr	r3, [r3, #0]
 800a0ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a0f2:	2b00      	cmp	r3, #0
 800a0f4:	d1f0      	bne.n	800a0d8 <HAL_RCC_OscConfig+0xe8>
 800a0f6:	e000      	b.n	800a0fa <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a0f8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800a0fa:	687b      	ldr	r3, [r7, #4]
 800a0fc:	681b      	ldr	r3, [r3, #0]
 800a0fe:	f003 0302 	and.w	r3, r3, #2
 800a102:	2b00      	cmp	r3, #0
 800a104:	d063      	beq.n	800a1ce <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800a106:	4b4a      	ldr	r3, [pc, #296]	; (800a230 <HAL_RCC_OscConfig+0x240>)
 800a108:	689b      	ldr	r3, [r3, #8]
 800a10a:	f003 030c 	and.w	r3, r3, #12
 800a10e:	2b00      	cmp	r3, #0
 800a110:	d00b      	beq.n	800a12a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800a112:	4b47      	ldr	r3, [pc, #284]	; (800a230 <HAL_RCC_OscConfig+0x240>)
 800a114:	689b      	ldr	r3, [r3, #8]
 800a116:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800a11a:	2b08      	cmp	r3, #8
 800a11c:	d11c      	bne.n	800a158 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800a11e:	4b44      	ldr	r3, [pc, #272]	; (800a230 <HAL_RCC_OscConfig+0x240>)
 800a120:	685b      	ldr	r3, [r3, #4]
 800a122:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a126:	2b00      	cmp	r3, #0
 800a128:	d116      	bne.n	800a158 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800a12a:	4b41      	ldr	r3, [pc, #260]	; (800a230 <HAL_RCC_OscConfig+0x240>)
 800a12c:	681b      	ldr	r3, [r3, #0]
 800a12e:	f003 0302 	and.w	r3, r3, #2
 800a132:	2b00      	cmp	r3, #0
 800a134:	d005      	beq.n	800a142 <HAL_RCC_OscConfig+0x152>
 800a136:	687b      	ldr	r3, [r7, #4]
 800a138:	68db      	ldr	r3, [r3, #12]
 800a13a:	2b01      	cmp	r3, #1
 800a13c:	d001      	beq.n	800a142 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800a13e:	2301      	movs	r3, #1
 800a140:	e1c7      	b.n	800a4d2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a142:	4b3b      	ldr	r3, [pc, #236]	; (800a230 <HAL_RCC_OscConfig+0x240>)
 800a144:	681b      	ldr	r3, [r3, #0]
 800a146:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800a14a:	687b      	ldr	r3, [r7, #4]
 800a14c:	691b      	ldr	r3, [r3, #16]
 800a14e:	00db      	lsls	r3, r3, #3
 800a150:	4937      	ldr	r1, [pc, #220]	; (800a230 <HAL_RCC_OscConfig+0x240>)
 800a152:	4313      	orrs	r3, r2
 800a154:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800a156:	e03a      	b.n	800a1ce <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800a158:	687b      	ldr	r3, [r7, #4]
 800a15a:	68db      	ldr	r3, [r3, #12]
 800a15c:	2b00      	cmp	r3, #0
 800a15e:	d020      	beq.n	800a1a2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800a160:	4b34      	ldr	r3, [pc, #208]	; (800a234 <HAL_RCC_OscConfig+0x244>)
 800a162:	2201      	movs	r2, #1
 800a164:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a166:	f7fe fadd 	bl	8008724 <HAL_GetTick>
 800a16a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800a16c:	e008      	b.n	800a180 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800a16e:	f7fe fad9 	bl	8008724 <HAL_GetTick>
 800a172:	4602      	mov	r2, r0
 800a174:	693b      	ldr	r3, [r7, #16]
 800a176:	1ad3      	subs	r3, r2, r3
 800a178:	2b02      	cmp	r3, #2
 800a17a:	d901      	bls.n	800a180 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800a17c:	2303      	movs	r3, #3
 800a17e:	e1a8      	b.n	800a4d2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800a180:	4b2b      	ldr	r3, [pc, #172]	; (800a230 <HAL_RCC_OscConfig+0x240>)
 800a182:	681b      	ldr	r3, [r3, #0]
 800a184:	f003 0302 	and.w	r3, r3, #2
 800a188:	2b00      	cmp	r3, #0
 800a18a:	d0f0      	beq.n	800a16e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a18c:	4b28      	ldr	r3, [pc, #160]	; (800a230 <HAL_RCC_OscConfig+0x240>)
 800a18e:	681b      	ldr	r3, [r3, #0]
 800a190:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800a194:	687b      	ldr	r3, [r7, #4]
 800a196:	691b      	ldr	r3, [r3, #16]
 800a198:	00db      	lsls	r3, r3, #3
 800a19a:	4925      	ldr	r1, [pc, #148]	; (800a230 <HAL_RCC_OscConfig+0x240>)
 800a19c:	4313      	orrs	r3, r2
 800a19e:	600b      	str	r3, [r1, #0]
 800a1a0:	e015      	b.n	800a1ce <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800a1a2:	4b24      	ldr	r3, [pc, #144]	; (800a234 <HAL_RCC_OscConfig+0x244>)
 800a1a4:	2200      	movs	r2, #0
 800a1a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a1a8:	f7fe fabc 	bl	8008724 <HAL_GetTick>
 800a1ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800a1ae:	e008      	b.n	800a1c2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800a1b0:	f7fe fab8 	bl	8008724 <HAL_GetTick>
 800a1b4:	4602      	mov	r2, r0
 800a1b6:	693b      	ldr	r3, [r7, #16]
 800a1b8:	1ad3      	subs	r3, r2, r3
 800a1ba:	2b02      	cmp	r3, #2
 800a1bc:	d901      	bls.n	800a1c2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800a1be:	2303      	movs	r3, #3
 800a1c0:	e187      	b.n	800a4d2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800a1c2:	4b1b      	ldr	r3, [pc, #108]	; (800a230 <HAL_RCC_OscConfig+0x240>)
 800a1c4:	681b      	ldr	r3, [r3, #0]
 800a1c6:	f003 0302 	and.w	r3, r3, #2
 800a1ca:	2b00      	cmp	r3, #0
 800a1cc:	d1f0      	bne.n	800a1b0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800a1ce:	687b      	ldr	r3, [r7, #4]
 800a1d0:	681b      	ldr	r3, [r3, #0]
 800a1d2:	f003 0308 	and.w	r3, r3, #8
 800a1d6:	2b00      	cmp	r3, #0
 800a1d8:	d036      	beq.n	800a248 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800a1da:	687b      	ldr	r3, [r7, #4]
 800a1dc:	695b      	ldr	r3, [r3, #20]
 800a1de:	2b00      	cmp	r3, #0
 800a1e0:	d016      	beq.n	800a210 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800a1e2:	4b15      	ldr	r3, [pc, #84]	; (800a238 <HAL_RCC_OscConfig+0x248>)
 800a1e4:	2201      	movs	r2, #1
 800a1e6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a1e8:	f7fe fa9c 	bl	8008724 <HAL_GetTick>
 800a1ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800a1ee:	e008      	b.n	800a202 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800a1f0:	f7fe fa98 	bl	8008724 <HAL_GetTick>
 800a1f4:	4602      	mov	r2, r0
 800a1f6:	693b      	ldr	r3, [r7, #16]
 800a1f8:	1ad3      	subs	r3, r2, r3
 800a1fa:	2b02      	cmp	r3, #2
 800a1fc:	d901      	bls.n	800a202 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800a1fe:	2303      	movs	r3, #3
 800a200:	e167      	b.n	800a4d2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800a202:	4b0b      	ldr	r3, [pc, #44]	; (800a230 <HAL_RCC_OscConfig+0x240>)
 800a204:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a206:	f003 0302 	and.w	r3, r3, #2
 800a20a:	2b00      	cmp	r3, #0
 800a20c:	d0f0      	beq.n	800a1f0 <HAL_RCC_OscConfig+0x200>
 800a20e:	e01b      	b.n	800a248 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800a210:	4b09      	ldr	r3, [pc, #36]	; (800a238 <HAL_RCC_OscConfig+0x248>)
 800a212:	2200      	movs	r2, #0
 800a214:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800a216:	f7fe fa85 	bl	8008724 <HAL_GetTick>
 800a21a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800a21c:	e00e      	b.n	800a23c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800a21e:	f7fe fa81 	bl	8008724 <HAL_GetTick>
 800a222:	4602      	mov	r2, r0
 800a224:	693b      	ldr	r3, [r7, #16]
 800a226:	1ad3      	subs	r3, r2, r3
 800a228:	2b02      	cmp	r3, #2
 800a22a:	d907      	bls.n	800a23c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800a22c:	2303      	movs	r3, #3
 800a22e:	e150      	b.n	800a4d2 <HAL_RCC_OscConfig+0x4e2>
 800a230:	40023800 	.word	0x40023800
 800a234:	42470000 	.word	0x42470000
 800a238:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800a23c:	4b88      	ldr	r3, [pc, #544]	; (800a460 <HAL_RCC_OscConfig+0x470>)
 800a23e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a240:	f003 0302 	and.w	r3, r3, #2
 800a244:	2b00      	cmp	r3, #0
 800a246:	d1ea      	bne.n	800a21e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800a248:	687b      	ldr	r3, [r7, #4]
 800a24a:	681b      	ldr	r3, [r3, #0]
 800a24c:	f003 0304 	and.w	r3, r3, #4
 800a250:	2b00      	cmp	r3, #0
 800a252:	f000 8097 	beq.w	800a384 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800a256:	2300      	movs	r3, #0
 800a258:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800a25a:	4b81      	ldr	r3, [pc, #516]	; (800a460 <HAL_RCC_OscConfig+0x470>)
 800a25c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a25e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a262:	2b00      	cmp	r3, #0
 800a264:	d10f      	bne.n	800a286 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800a266:	2300      	movs	r3, #0
 800a268:	60bb      	str	r3, [r7, #8]
 800a26a:	4b7d      	ldr	r3, [pc, #500]	; (800a460 <HAL_RCC_OscConfig+0x470>)
 800a26c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a26e:	4a7c      	ldr	r2, [pc, #496]	; (800a460 <HAL_RCC_OscConfig+0x470>)
 800a270:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a274:	6413      	str	r3, [r2, #64]	; 0x40
 800a276:	4b7a      	ldr	r3, [pc, #488]	; (800a460 <HAL_RCC_OscConfig+0x470>)
 800a278:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a27a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a27e:	60bb      	str	r3, [r7, #8]
 800a280:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800a282:	2301      	movs	r3, #1
 800a284:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800a286:	4b77      	ldr	r3, [pc, #476]	; (800a464 <HAL_RCC_OscConfig+0x474>)
 800a288:	681b      	ldr	r3, [r3, #0]
 800a28a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a28e:	2b00      	cmp	r3, #0
 800a290:	d118      	bne.n	800a2c4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800a292:	4b74      	ldr	r3, [pc, #464]	; (800a464 <HAL_RCC_OscConfig+0x474>)
 800a294:	681b      	ldr	r3, [r3, #0]
 800a296:	4a73      	ldr	r2, [pc, #460]	; (800a464 <HAL_RCC_OscConfig+0x474>)
 800a298:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a29c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800a29e:	f7fe fa41 	bl	8008724 <HAL_GetTick>
 800a2a2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800a2a4:	e008      	b.n	800a2b8 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800a2a6:	f7fe fa3d 	bl	8008724 <HAL_GetTick>
 800a2aa:	4602      	mov	r2, r0
 800a2ac:	693b      	ldr	r3, [r7, #16]
 800a2ae:	1ad3      	subs	r3, r2, r3
 800a2b0:	2b02      	cmp	r3, #2
 800a2b2:	d901      	bls.n	800a2b8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800a2b4:	2303      	movs	r3, #3
 800a2b6:	e10c      	b.n	800a4d2 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800a2b8:	4b6a      	ldr	r3, [pc, #424]	; (800a464 <HAL_RCC_OscConfig+0x474>)
 800a2ba:	681b      	ldr	r3, [r3, #0]
 800a2bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a2c0:	2b00      	cmp	r3, #0
 800a2c2:	d0f0      	beq.n	800a2a6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800a2c4:	687b      	ldr	r3, [r7, #4]
 800a2c6:	689b      	ldr	r3, [r3, #8]
 800a2c8:	2b01      	cmp	r3, #1
 800a2ca:	d106      	bne.n	800a2da <HAL_RCC_OscConfig+0x2ea>
 800a2cc:	4b64      	ldr	r3, [pc, #400]	; (800a460 <HAL_RCC_OscConfig+0x470>)
 800a2ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a2d0:	4a63      	ldr	r2, [pc, #396]	; (800a460 <HAL_RCC_OscConfig+0x470>)
 800a2d2:	f043 0301 	orr.w	r3, r3, #1
 800a2d6:	6713      	str	r3, [r2, #112]	; 0x70
 800a2d8:	e01c      	b.n	800a314 <HAL_RCC_OscConfig+0x324>
 800a2da:	687b      	ldr	r3, [r7, #4]
 800a2dc:	689b      	ldr	r3, [r3, #8]
 800a2de:	2b05      	cmp	r3, #5
 800a2e0:	d10c      	bne.n	800a2fc <HAL_RCC_OscConfig+0x30c>
 800a2e2:	4b5f      	ldr	r3, [pc, #380]	; (800a460 <HAL_RCC_OscConfig+0x470>)
 800a2e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a2e6:	4a5e      	ldr	r2, [pc, #376]	; (800a460 <HAL_RCC_OscConfig+0x470>)
 800a2e8:	f043 0304 	orr.w	r3, r3, #4
 800a2ec:	6713      	str	r3, [r2, #112]	; 0x70
 800a2ee:	4b5c      	ldr	r3, [pc, #368]	; (800a460 <HAL_RCC_OscConfig+0x470>)
 800a2f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a2f2:	4a5b      	ldr	r2, [pc, #364]	; (800a460 <HAL_RCC_OscConfig+0x470>)
 800a2f4:	f043 0301 	orr.w	r3, r3, #1
 800a2f8:	6713      	str	r3, [r2, #112]	; 0x70
 800a2fa:	e00b      	b.n	800a314 <HAL_RCC_OscConfig+0x324>
 800a2fc:	4b58      	ldr	r3, [pc, #352]	; (800a460 <HAL_RCC_OscConfig+0x470>)
 800a2fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a300:	4a57      	ldr	r2, [pc, #348]	; (800a460 <HAL_RCC_OscConfig+0x470>)
 800a302:	f023 0301 	bic.w	r3, r3, #1
 800a306:	6713      	str	r3, [r2, #112]	; 0x70
 800a308:	4b55      	ldr	r3, [pc, #340]	; (800a460 <HAL_RCC_OscConfig+0x470>)
 800a30a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a30c:	4a54      	ldr	r2, [pc, #336]	; (800a460 <HAL_RCC_OscConfig+0x470>)
 800a30e:	f023 0304 	bic.w	r3, r3, #4
 800a312:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800a314:	687b      	ldr	r3, [r7, #4]
 800a316:	689b      	ldr	r3, [r3, #8]
 800a318:	2b00      	cmp	r3, #0
 800a31a:	d015      	beq.n	800a348 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a31c:	f7fe fa02 	bl	8008724 <HAL_GetTick>
 800a320:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800a322:	e00a      	b.n	800a33a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800a324:	f7fe f9fe 	bl	8008724 <HAL_GetTick>
 800a328:	4602      	mov	r2, r0
 800a32a:	693b      	ldr	r3, [r7, #16]
 800a32c:	1ad3      	subs	r3, r2, r3
 800a32e:	f241 3288 	movw	r2, #5000	; 0x1388
 800a332:	4293      	cmp	r3, r2
 800a334:	d901      	bls.n	800a33a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800a336:	2303      	movs	r3, #3
 800a338:	e0cb      	b.n	800a4d2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800a33a:	4b49      	ldr	r3, [pc, #292]	; (800a460 <HAL_RCC_OscConfig+0x470>)
 800a33c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a33e:	f003 0302 	and.w	r3, r3, #2
 800a342:	2b00      	cmp	r3, #0
 800a344:	d0ee      	beq.n	800a324 <HAL_RCC_OscConfig+0x334>
 800a346:	e014      	b.n	800a372 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800a348:	f7fe f9ec 	bl	8008724 <HAL_GetTick>
 800a34c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800a34e:	e00a      	b.n	800a366 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800a350:	f7fe f9e8 	bl	8008724 <HAL_GetTick>
 800a354:	4602      	mov	r2, r0
 800a356:	693b      	ldr	r3, [r7, #16]
 800a358:	1ad3      	subs	r3, r2, r3
 800a35a:	f241 3288 	movw	r2, #5000	; 0x1388
 800a35e:	4293      	cmp	r3, r2
 800a360:	d901      	bls.n	800a366 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800a362:	2303      	movs	r3, #3
 800a364:	e0b5      	b.n	800a4d2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800a366:	4b3e      	ldr	r3, [pc, #248]	; (800a460 <HAL_RCC_OscConfig+0x470>)
 800a368:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a36a:	f003 0302 	and.w	r3, r3, #2
 800a36e:	2b00      	cmp	r3, #0
 800a370:	d1ee      	bne.n	800a350 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800a372:	7dfb      	ldrb	r3, [r7, #23]
 800a374:	2b01      	cmp	r3, #1
 800a376:	d105      	bne.n	800a384 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800a378:	4b39      	ldr	r3, [pc, #228]	; (800a460 <HAL_RCC_OscConfig+0x470>)
 800a37a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a37c:	4a38      	ldr	r2, [pc, #224]	; (800a460 <HAL_RCC_OscConfig+0x470>)
 800a37e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800a382:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800a384:	687b      	ldr	r3, [r7, #4]
 800a386:	699b      	ldr	r3, [r3, #24]
 800a388:	2b00      	cmp	r3, #0
 800a38a:	f000 80a1 	beq.w	800a4d0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800a38e:	4b34      	ldr	r3, [pc, #208]	; (800a460 <HAL_RCC_OscConfig+0x470>)
 800a390:	689b      	ldr	r3, [r3, #8]
 800a392:	f003 030c 	and.w	r3, r3, #12
 800a396:	2b08      	cmp	r3, #8
 800a398:	d05c      	beq.n	800a454 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800a39a:	687b      	ldr	r3, [r7, #4]
 800a39c:	699b      	ldr	r3, [r3, #24]
 800a39e:	2b02      	cmp	r3, #2
 800a3a0:	d141      	bne.n	800a426 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800a3a2:	4b31      	ldr	r3, [pc, #196]	; (800a468 <HAL_RCC_OscConfig+0x478>)
 800a3a4:	2200      	movs	r2, #0
 800a3a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a3a8:	f7fe f9bc 	bl	8008724 <HAL_GetTick>
 800a3ac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800a3ae:	e008      	b.n	800a3c2 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800a3b0:	f7fe f9b8 	bl	8008724 <HAL_GetTick>
 800a3b4:	4602      	mov	r2, r0
 800a3b6:	693b      	ldr	r3, [r7, #16]
 800a3b8:	1ad3      	subs	r3, r2, r3
 800a3ba:	2b02      	cmp	r3, #2
 800a3bc:	d901      	bls.n	800a3c2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800a3be:	2303      	movs	r3, #3
 800a3c0:	e087      	b.n	800a4d2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800a3c2:	4b27      	ldr	r3, [pc, #156]	; (800a460 <HAL_RCC_OscConfig+0x470>)
 800a3c4:	681b      	ldr	r3, [r3, #0]
 800a3c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a3ca:	2b00      	cmp	r3, #0
 800a3cc:	d1f0      	bne.n	800a3b0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800a3ce:	687b      	ldr	r3, [r7, #4]
 800a3d0:	69da      	ldr	r2, [r3, #28]
 800a3d2:	687b      	ldr	r3, [r7, #4]
 800a3d4:	6a1b      	ldr	r3, [r3, #32]
 800a3d6:	431a      	orrs	r2, r3
 800a3d8:	687b      	ldr	r3, [r7, #4]
 800a3da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a3dc:	019b      	lsls	r3, r3, #6
 800a3de:	431a      	orrs	r2, r3
 800a3e0:	687b      	ldr	r3, [r7, #4]
 800a3e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a3e4:	085b      	lsrs	r3, r3, #1
 800a3e6:	3b01      	subs	r3, #1
 800a3e8:	041b      	lsls	r3, r3, #16
 800a3ea:	431a      	orrs	r2, r3
 800a3ec:	687b      	ldr	r3, [r7, #4]
 800a3ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a3f0:	061b      	lsls	r3, r3, #24
 800a3f2:	491b      	ldr	r1, [pc, #108]	; (800a460 <HAL_RCC_OscConfig+0x470>)
 800a3f4:	4313      	orrs	r3, r2
 800a3f6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800a3f8:	4b1b      	ldr	r3, [pc, #108]	; (800a468 <HAL_RCC_OscConfig+0x478>)
 800a3fa:	2201      	movs	r2, #1
 800a3fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a3fe:	f7fe f991 	bl	8008724 <HAL_GetTick>
 800a402:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800a404:	e008      	b.n	800a418 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800a406:	f7fe f98d 	bl	8008724 <HAL_GetTick>
 800a40a:	4602      	mov	r2, r0
 800a40c:	693b      	ldr	r3, [r7, #16]
 800a40e:	1ad3      	subs	r3, r2, r3
 800a410:	2b02      	cmp	r3, #2
 800a412:	d901      	bls.n	800a418 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800a414:	2303      	movs	r3, #3
 800a416:	e05c      	b.n	800a4d2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800a418:	4b11      	ldr	r3, [pc, #68]	; (800a460 <HAL_RCC_OscConfig+0x470>)
 800a41a:	681b      	ldr	r3, [r3, #0]
 800a41c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a420:	2b00      	cmp	r3, #0
 800a422:	d0f0      	beq.n	800a406 <HAL_RCC_OscConfig+0x416>
 800a424:	e054      	b.n	800a4d0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800a426:	4b10      	ldr	r3, [pc, #64]	; (800a468 <HAL_RCC_OscConfig+0x478>)
 800a428:	2200      	movs	r2, #0
 800a42a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a42c:	f7fe f97a 	bl	8008724 <HAL_GetTick>
 800a430:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800a432:	e008      	b.n	800a446 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800a434:	f7fe f976 	bl	8008724 <HAL_GetTick>
 800a438:	4602      	mov	r2, r0
 800a43a:	693b      	ldr	r3, [r7, #16]
 800a43c:	1ad3      	subs	r3, r2, r3
 800a43e:	2b02      	cmp	r3, #2
 800a440:	d901      	bls.n	800a446 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800a442:	2303      	movs	r3, #3
 800a444:	e045      	b.n	800a4d2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800a446:	4b06      	ldr	r3, [pc, #24]	; (800a460 <HAL_RCC_OscConfig+0x470>)
 800a448:	681b      	ldr	r3, [r3, #0]
 800a44a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a44e:	2b00      	cmp	r3, #0
 800a450:	d1f0      	bne.n	800a434 <HAL_RCC_OscConfig+0x444>
 800a452:	e03d      	b.n	800a4d0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800a454:	687b      	ldr	r3, [r7, #4]
 800a456:	699b      	ldr	r3, [r3, #24]
 800a458:	2b01      	cmp	r3, #1
 800a45a:	d107      	bne.n	800a46c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800a45c:	2301      	movs	r3, #1
 800a45e:	e038      	b.n	800a4d2 <HAL_RCC_OscConfig+0x4e2>
 800a460:	40023800 	.word	0x40023800
 800a464:	40007000 	.word	0x40007000
 800a468:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800a46c:	4b1b      	ldr	r3, [pc, #108]	; (800a4dc <HAL_RCC_OscConfig+0x4ec>)
 800a46e:	685b      	ldr	r3, [r3, #4]
 800a470:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800a472:	687b      	ldr	r3, [r7, #4]
 800a474:	699b      	ldr	r3, [r3, #24]
 800a476:	2b01      	cmp	r3, #1
 800a478:	d028      	beq.n	800a4cc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800a47a:	68fb      	ldr	r3, [r7, #12]
 800a47c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800a480:	687b      	ldr	r3, [r7, #4]
 800a482:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800a484:	429a      	cmp	r2, r3
 800a486:	d121      	bne.n	800a4cc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800a488:	68fb      	ldr	r3, [r7, #12]
 800a48a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800a48e:	687b      	ldr	r3, [r7, #4]
 800a490:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800a492:	429a      	cmp	r2, r3
 800a494:	d11a      	bne.n	800a4cc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800a496:	68fa      	ldr	r2, [r7, #12]
 800a498:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800a49c:	4013      	ands	r3, r2
 800a49e:	687a      	ldr	r2, [r7, #4]
 800a4a0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800a4a2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800a4a4:	4293      	cmp	r3, r2
 800a4a6:	d111      	bne.n	800a4cc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800a4a8:	68fb      	ldr	r3, [r7, #12]
 800a4aa:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800a4ae:	687b      	ldr	r3, [r7, #4]
 800a4b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a4b2:	085b      	lsrs	r3, r3, #1
 800a4b4:	3b01      	subs	r3, #1
 800a4b6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800a4b8:	429a      	cmp	r2, r3
 800a4ba:	d107      	bne.n	800a4cc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800a4bc:	68fb      	ldr	r3, [r7, #12]
 800a4be:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800a4c2:	687b      	ldr	r3, [r7, #4]
 800a4c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a4c6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800a4c8:	429a      	cmp	r2, r3
 800a4ca:	d001      	beq.n	800a4d0 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800a4cc:	2301      	movs	r3, #1
 800a4ce:	e000      	b.n	800a4d2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800a4d0:	2300      	movs	r3, #0
}
 800a4d2:	4618      	mov	r0, r3
 800a4d4:	3718      	adds	r7, #24
 800a4d6:	46bd      	mov	sp, r7
 800a4d8:	bd80      	pop	{r7, pc}
 800a4da:	bf00      	nop
 800a4dc:	40023800 	.word	0x40023800

0800a4e0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800a4e0:	b580      	push	{r7, lr}
 800a4e2:	b084      	sub	sp, #16
 800a4e4:	af00      	add	r7, sp, #0
 800a4e6:	6078      	str	r0, [r7, #4]
 800a4e8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800a4ea:	687b      	ldr	r3, [r7, #4]
 800a4ec:	2b00      	cmp	r3, #0
 800a4ee:	d101      	bne.n	800a4f4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800a4f0:	2301      	movs	r3, #1
 800a4f2:	e0cc      	b.n	800a68e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800a4f4:	4b68      	ldr	r3, [pc, #416]	; (800a698 <HAL_RCC_ClockConfig+0x1b8>)
 800a4f6:	681b      	ldr	r3, [r3, #0]
 800a4f8:	f003 0307 	and.w	r3, r3, #7
 800a4fc:	683a      	ldr	r2, [r7, #0]
 800a4fe:	429a      	cmp	r2, r3
 800a500:	d90c      	bls.n	800a51c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a502:	4b65      	ldr	r3, [pc, #404]	; (800a698 <HAL_RCC_ClockConfig+0x1b8>)
 800a504:	683a      	ldr	r2, [r7, #0]
 800a506:	b2d2      	uxtb	r2, r2
 800a508:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800a50a:	4b63      	ldr	r3, [pc, #396]	; (800a698 <HAL_RCC_ClockConfig+0x1b8>)
 800a50c:	681b      	ldr	r3, [r3, #0]
 800a50e:	f003 0307 	and.w	r3, r3, #7
 800a512:	683a      	ldr	r2, [r7, #0]
 800a514:	429a      	cmp	r2, r3
 800a516:	d001      	beq.n	800a51c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800a518:	2301      	movs	r3, #1
 800a51a:	e0b8      	b.n	800a68e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800a51c:	687b      	ldr	r3, [r7, #4]
 800a51e:	681b      	ldr	r3, [r3, #0]
 800a520:	f003 0302 	and.w	r3, r3, #2
 800a524:	2b00      	cmp	r3, #0
 800a526:	d020      	beq.n	800a56a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a528:	687b      	ldr	r3, [r7, #4]
 800a52a:	681b      	ldr	r3, [r3, #0]
 800a52c:	f003 0304 	and.w	r3, r3, #4
 800a530:	2b00      	cmp	r3, #0
 800a532:	d005      	beq.n	800a540 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800a534:	4b59      	ldr	r3, [pc, #356]	; (800a69c <HAL_RCC_ClockConfig+0x1bc>)
 800a536:	689b      	ldr	r3, [r3, #8]
 800a538:	4a58      	ldr	r2, [pc, #352]	; (800a69c <HAL_RCC_ClockConfig+0x1bc>)
 800a53a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800a53e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a540:	687b      	ldr	r3, [r7, #4]
 800a542:	681b      	ldr	r3, [r3, #0]
 800a544:	f003 0308 	and.w	r3, r3, #8
 800a548:	2b00      	cmp	r3, #0
 800a54a:	d005      	beq.n	800a558 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800a54c:	4b53      	ldr	r3, [pc, #332]	; (800a69c <HAL_RCC_ClockConfig+0x1bc>)
 800a54e:	689b      	ldr	r3, [r3, #8]
 800a550:	4a52      	ldr	r2, [pc, #328]	; (800a69c <HAL_RCC_ClockConfig+0x1bc>)
 800a552:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800a556:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800a558:	4b50      	ldr	r3, [pc, #320]	; (800a69c <HAL_RCC_ClockConfig+0x1bc>)
 800a55a:	689b      	ldr	r3, [r3, #8]
 800a55c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800a560:	687b      	ldr	r3, [r7, #4]
 800a562:	689b      	ldr	r3, [r3, #8]
 800a564:	494d      	ldr	r1, [pc, #308]	; (800a69c <HAL_RCC_ClockConfig+0x1bc>)
 800a566:	4313      	orrs	r3, r2
 800a568:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800a56a:	687b      	ldr	r3, [r7, #4]
 800a56c:	681b      	ldr	r3, [r3, #0]
 800a56e:	f003 0301 	and.w	r3, r3, #1
 800a572:	2b00      	cmp	r3, #0
 800a574:	d044      	beq.n	800a600 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800a576:	687b      	ldr	r3, [r7, #4]
 800a578:	685b      	ldr	r3, [r3, #4]
 800a57a:	2b01      	cmp	r3, #1
 800a57c:	d107      	bne.n	800a58e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800a57e:	4b47      	ldr	r3, [pc, #284]	; (800a69c <HAL_RCC_ClockConfig+0x1bc>)
 800a580:	681b      	ldr	r3, [r3, #0]
 800a582:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a586:	2b00      	cmp	r3, #0
 800a588:	d119      	bne.n	800a5be <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800a58a:	2301      	movs	r3, #1
 800a58c:	e07f      	b.n	800a68e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800a58e:	687b      	ldr	r3, [r7, #4]
 800a590:	685b      	ldr	r3, [r3, #4]
 800a592:	2b02      	cmp	r3, #2
 800a594:	d003      	beq.n	800a59e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800a596:	687b      	ldr	r3, [r7, #4]
 800a598:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800a59a:	2b03      	cmp	r3, #3
 800a59c:	d107      	bne.n	800a5ae <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800a59e:	4b3f      	ldr	r3, [pc, #252]	; (800a69c <HAL_RCC_ClockConfig+0x1bc>)
 800a5a0:	681b      	ldr	r3, [r3, #0]
 800a5a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a5a6:	2b00      	cmp	r3, #0
 800a5a8:	d109      	bne.n	800a5be <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800a5aa:	2301      	movs	r3, #1
 800a5ac:	e06f      	b.n	800a68e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800a5ae:	4b3b      	ldr	r3, [pc, #236]	; (800a69c <HAL_RCC_ClockConfig+0x1bc>)
 800a5b0:	681b      	ldr	r3, [r3, #0]
 800a5b2:	f003 0302 	and.w	r3, r3, #2
 800a5b6:	2b00      	cmp	r3, #0
 800a5b8:	d101      	bne.n	800a5be <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800a5ba:	2301      	movs	r3, #1
 800a5bc:	e067      	b.n	800a68e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800a5be:	4b37      	ldr	r3, [pc, #220]	; (800a69c <HAL_RCC_ClockConfig+0x1bc>)
 800a5c0:	689b      	ldr	r3, [r3, #8]
 800a5c2:	f023 0203 	bic.w	r2, r3, #3
 800a5c6:	687b      	ldr	r3, [r7, #4]
 800a5c8:	685b      	ldr	r3, [r3, #4]
 800a5ca:	4934      	ldr	r1, [pc, #208]	; (800a69c <HAL_RCC_ClockConfig+0x1bc>)
 800a5cc:	4313      	orrs	r3, r2
 800a5ce:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800a5d0:	f7fe f8a8 	bl	8008724 <HAL_GetTick>
 800a5d4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a5d6:	e00a      	b.n	800a5ee <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800a5d8:	f7fe f8a4 	bl	8008724 <HAL_GetTick>
 800a5dc:	4602      	mov	r2, r0
 800a5de:	68fb      	ldr	r3, [r7, #12]
 800a5e0:	1ad3      	subs	r3, r2, r3
 800a5e2:	f241 3288 	movw	r2, #5000	; 0x1388
 800a5e6:	4293      	cmp	r3, r2
 800a5e8:	d901      	bls.n	800a5ee <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800a5ea:	2303      	movs	r3, #3
 800a5ec:	e04f      	b.n	800a68e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a5ee:	4b2b      	ldr	r3, [pc, #172]	; (800a69c <HAL_RCC_ClockConfig+0x1bc>)
 800a5f0:	689b      	ldr	r3, [r3, #8]
 800a5f2:	f003 020c 	and.w	r2, r3, #12
 800a5f6:	687b      	ldr	r3, [r7, #4]
 800a5f8:	685b      	ldr	r3, [r3, #4]
 800a5fa:	009b      	lsls	r3, r3, #2
 800a5fc:	429a      	cmp	r2, r3
 800a5fe:	d1eb      	bne.n	800a5d8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800a600:	4b25      	ldr	r3, [pc, #148]	; (800a698 <HAL_RCC_ClockConfig+0x1b8>)
 800a602:	681b      	ldr	r3, [r3, #0]
 800a604:	f003 0307 	and.w	r3, r3, #7
 800a608:	683a      	ldr	r2, [r7, #0]
 800a60a:	429a      	cmp	r2, r3
 800a60c:	d20c      	bcs.n	800a628 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a60e:	4b22      	ldr	r3, [pc, #136]	; (800a698 <HAL_RCC_ClockConfig+0x1b8>)
 800a610:	683a      	ldr	r2, [r7, #0]
 800a612:	b2d2      	uxtb	r2, r2
 800a614:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800a616:	4b20      	ldr	r3, [pc, #128]	; (800a698 <HAL_RCC_ClockConfig+0x1b8>)
 800a618:	681b      	ldr	r3, [r3, #0]
 800a61a:	f003 0307 	and.w	r3, r3, #7
 800a61e:	683a      	ldr	r2, [r7, #0]
 800a620:	429a      	cmp	r2, r3
 800a622:	d001      	beq.n	800a628 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800a624:	2301      	movs	r3, #1
 800a626:	e032      	b.n	800a68e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a628:	687b      	ldr	r3, [r7, #4]
 800a62a:	681b      	ldr	r3, [r3, #0]
 800a62c:	f003 0304 	and.w	r3, r3, #4
 800a630:	2b00      	cmp	r3, #0
 800a632:	d008      	beq.n	800a646 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800a634:	4b19      	ldr	r3, [pc, #100]	; (800a69c <HAL_RCC_ClockConfig+0x1bc>)
 800a636:	689b      	ldr	r3, [r3, #8]
 800a638:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800a63c:	687b      	ldr	r3, [r7, #4]
 800a63e:	68db      	ldr	r3, [r3, #12]
 800a640:	4916      	ldr	r1, [pc, #88]	; (800a69c <HAL_RCC_ClockConfig+0x1bc>)
 800a642:	4313      	orrs	r3, r2
 800a644:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a646:	687b      	ldr	r3, [r7, #4]
 800a648:	681b      	ldr	r3, [r3, #0]
 800a64a:	f003 0308 	and.w	r3, r3, #8
 800a64e:	2b00      	cmp	r3, #0
 800a650:	d009      	beq.n	800a666 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800a652:	4b12      	ldr	r3, [pc, #72]	; (800a69c <HAL_RCC_ClockConfig+0x1bc>)
 800a654:	689b      	ldr	r3, [r3, #8]
 800a656:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800a65a:	687b      	ldr	r3, [r7, #4]
 800a65c:	691b      	ldr	r3, [r3, #16]
 800a65e:	00db      	lsls	r3, r3, #3
 800a660:	490e      	ldr	r1, [pc, #56]	; (800a69c <HAL_RCC_ClockConfig+0x1bc>)
 800a662:	4313      	orrs	r3, r2
 800a664:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800a666:	f000 f821 	bl	800a6ac <HAL_RCC_GetSysClockFreq>
 800a66a:	4602      	mov	r2, r0
 800a66c:	4b0b      	ldr	r3, [pc, #44]	; (800a69c <HAL_RCC_ClockConfig+0x1bc>)
 800a66e:	689b      	ldr	r3, [r3, #8]
 800a670:	091b      	lsrs	r3, r3, #4
 800a672:	f003 030f 	and.w	r3, r3, #15
 800a676:	490a      	ldr	r1, [pc, #40]	; (800a6a0 <HAL_RCC_ClockConfig+0x1c0>)
 800a678:	5ccb      	ldrb	r3, [r1, r3]
 800a67a:	fa22 f303 	lsr.w	r3, r2, r3
 800a67e:	4a09      	ldr	r2, [pc, #36]	; (800a6a4 <HAL_RCC_ClockConfig+0x1c4>)
 800a680:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800a682:	4b09      	ldr	r3, [pc, #36]	; (800a6a8 <HAL_RCC_ClockConfig+0x1c8>)
 800a684:	681b      	ldr	r3, [r3, #0]
 800a686:	4618      	mov	r0, r3
 800a688:	f7fe f808 	bl	800869c <HAL_InitTick>

  return HAL_OK;
 800a68c:	2300      	movs	r3, #0
}
 800a68e:	4618      	mov	r0, r3
 800a690:	3710      	adds	r7, #16
 800a692:	46bd      	mov	sp, r7
 800a694:	bd80      	pop	{r7, pc}
 800a696:	bf00      	nop
 800a698:	40023c00 	.word	0x40023c00
 800a69c:	40023800 	.word	0x40023800
 800a6a0:	0800db54 	.word	0x0800db54
 800a6a4:	20000004 	.word	0x20000004
 800a6a8:	200000f0 	.word	0x200000f0

0800a6ac <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800a6ac:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800a6b0:	b094      	sub	sp, #80	; 0x50
 800a6b2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800a6b4:	2300      	movs	r3, #0
 800a6b6:	647b      	str	r3, [r7, #68]	; 0x44
 800a6b8:	2300      	movs	r3, #0
 800a6ba:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a6bc:	2300      	movs	r3, #0
 800a6be:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 800a6c0:	2300      	movs	r3, #0
 800a6c2:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800a6c4:	4b79      	ldr	r3, [pc, #484]	; (800a8ac <HAL_RCC_GetSysClockFreq+0x200>)
 800a6c6:	689b      	ldr	r3, [r3, #8]
 800a6c8:	f003 030c 	and.w	r3, r3, #12
 800a6cc:	2b08      	cmp	r3, #8
 800a6ce:	d00d      	beq.n	800a6ec <HAL_RCC_GetSysClockFreq+0x40>
 800a6d0:	2b08      	cmp	r3, #8
 800a6d2:	f200 80e1 	bhi.w	800a898 <HAL_RCC_GetSysClockFreq+0x1ec>
 800a6d6:	2b00      	cmp	r3, #0
 800a6d8:	d002      	beq.n	800a6e0 <HAL_RCC_GetSysClockFreq+0x34>
 800a6da:	2b04      	cmp	r3, #4
 800a6dc:	d003      	beq.n	800a6e6 <HAL_RCC_GetSysClockFreq+0x3a>
 800a6de:	e0db      	b.n	800a898 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800a6e0:	4b73      	ldr	r3, [pc, #460]	; (800a8b0 <HAL_RCC_GetSysClockFreq+0x204>)
 800a6e2:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 800a6e4:	e0db      	b.n	800a89e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800a6e6:	4b73      	ldr	r3, [pc, #460]	; (800a8b4 <HAL_RCC_GetSysClockFreq+0x208>)
 800a6e8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800a6ea:	e0d8      	b.n	800a89e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800a6ec:	4b6f      	ldr	r3, [pc, #444]	; (800a8ac <HAL_RCC_GetSysClockFreq+0x200>)
 800a6ee:	685b      	ldr	r3, [r3, #4]
 800a6f0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a6f4:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800a6f6:	4b6d      	ldr	r3, [pc, #436]	; (800a8ac <HAL_RCC_GetSysClockFreq+0x200>)
 800a6f8:	685b      	ldr	r3, [r3, #4]
 800a6fa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a6fe:	2b00      	cmp	r3, #0
 800a700:	d063      	beq.n	800a7ca <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800a702:	4b6a      	ldr	r3, [pc, #424]	; (800a8ac <HAL_RCC_GetSysClockFreq+0x200>)
 800a704:	685b      	ldr	r3, [r3, #4]
 800a706:	099b      	lsrs	r3, r3, #6
 800a708:	2200      	movs	r2, #0
 800a70a:	63bb      	str	r3, [r7, #56]	; 0x38
 800a70c:	63fa      	str	r2, [r7, #60]	; 0x3c
 800a70e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a710:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a714:	633b      	str	r3, [r7, #48]	; 0x30
 800a716:	2300      	movs	r3, #0
 800a718:	637b      	str	r3, [r7, #52]	; 0x34
 800a71a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800a71e:	4622      	mov	r2, r4
 800a720:	462b      	mov	r3, r5
 800a722:	f04f 0000 	mov.w	r0, #0
 800a726:	f04f 0100 	mov.w	r1, #0
 800a72a:	0159      	lsls	r1, r3, #5
 800a72c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800a730:	0150      	lsls	r0, r2, #5
 800a732:	4602      	mov	r2, r0
 800a734:	460b      	mov	r3, r1
 800a736:	4621      	mov	r1, r4
 800a738:	1a51      	subs	r1, r2, r1
 800a73a:	6139      	str	r1, [r7, #16]
 800a73c:	4629      	mov	r1, r5
 800a73e:	eb63 0301 	sbc.w	r3, r3, r1
 800a742:	617b      	str	r3, [r7, #20]
 800a744:	f04f 0200 	mov.w	r2, #0
 800a748:	f04f 0300 	mov.w	r3, #0
 800a74c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800a750:	4659      	mov	r1, fp
 800a752:	018b      	lsls	r3, r1, #6
 800a754:	4651      	mov	r1, sl
 800a756:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800a75a:	4651      	mov	r1, sl
 800a75c:	018a      	lsls	r2, r1, #6
 800a75e:	4651      	mov	r1, sl
 800a760:	ebb2 0801 	subs.w	r8, r2, r1
 800a764:	4659      	mov	r1, fp
 800a766:	eb63 0901 	sbc.w	r9, r3, r1
 800a76a:	f04f 0200 	mov.w	r2, #0
 800a76e:	f04f 0300 	mov.w	r3, #0
 800a772:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800a776:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800a77a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800a77e:	4690      	mov	r8, r2
 800a780:	4699      	mov	r9, r3
 800a782:	4623      	mov	r3, r4
 800a784:	eb18 0303 	adds.w	r3, r8, r3
 800a788:	60bb      	str	r3, [r7, #8]
 800a78a:	462b      	mov	r3, r5
 800a78c:	eb49 0303 	adc.w	r3, r9, r3
 800a790:	60fb      	str	r3, [r7, #12]
 800a792:	f04f 0200 	mov.w	r2, #0
 800a796:	f04f 0300 	mov.w	r3, #0
 800a79a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800a79e:	4629      	mov	r1, r5
 800a7a0:	024b      	lsls	r3, r1, #9
 800a7a2:	4621      	mov	r1, r4
 800a7a4:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800a7a8:	4621      	mov	r1, r4
 800a7aa:	024a      	lsls	r2, r1, #9
 800a7ac:	4610      	mov	r0, r2
 800a7ae:	4619      	mov	r1, r3
 800a7b0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a7b2:	2200      	movs	r2, #0
 800a7b4:	62bb      	str	r3, [r7, #40]	; 0x28
 800a7b6:	62fa      	str	r2, [r7, #44]	; 0x2c
 800a7b8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800a7bc:	f7f5 ff74 	bl	80006a8 <__aeabi_uldivmod>
 800a7c0:	4602      	mov	r2, r0
 800a7c2:	460b      	mov	r3, r1
 800a7c4:	4613      	mov	r3, r2
 800a7c6:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a7c8:	e058      	b.n	800a87c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800a7ca:	4b38      	ldr	r3, [pc, #224]	; (800a8ac <HAL_RCC_GetSysClockFreq+0x200>)
 800a7cc:	685b      	ldr	r3, [r3, #4]
 800a7ce:	099b      	lsrs	r3, r3, #6
 800a7d0:	2200      	movs	r2, #0
 800a7d2:	4618      	mov	r0, r3
 800a7d4:	4611      	mov	r1, r2
 800a7d6:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800a7da:	623b      	str	r3, [r7, #32]
 800a7dc:	2300      	movs	r3, #0
 800a7de:	627b      	str	r3, [r7, #36]	; 0x24
 800a7e0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800a7e4:	4642      	mov	r2, r8
 800a7e6:	464b      	mov	r3, r9
 800a7e8:	f04f 0000 	mov.w	r0, #0
 800a7ec:	f04f 0100 	mov.w	r1, #0
 800a7f0:	0159      	lsls	r1, r3, #5
 800a7f2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800a7f6:	0150      	lsls	r0, r2, #5
 800a7f8:	4602      	mov	r2, r0
 800a7fa:	460b      	mov	r3, r1
 800a7fc:	4641      	mov	r1, r8
 800a7fe:	ebb2 0a01 	subs.w	sl, r2, r1
 800a802:	4649      	mov	r1, r9
 800a804:	eb63 0b01 	sbc.w	fp, r3, r1
 800a808:	f04f 0200 	mov.w	r2, #0
 800a80c:	f04f 0300 	mov.w	r3, #0
 800a810:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800a814:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800a818:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800a81c:	ebb2 040a 	subs.w	r4, r2, sl
 800a820:	eb63 050b 	sbc.w	r5, r3, fp
 800a824:	f04f 0200 	mov.w	r2, #0
 800a828:	f04f 0300 	mov.w	r3, #0
 800a82c:	00eb      	lsls	r3, r5, #3
 800a82e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800a832:	00e2      	lsls	r2, r4, #3
 800a834:	4614      	mov	r4, r2
 800a836:	461d      	mov	r5, r3
 800a838:	4643      	mov	r3, r8
 800a83a:	18e3      	adds	r3, r4, r3
 800a83c:	603b      	str	r3, [r7, #0]
 800a83e:	464b      	mov	r3, r9
 800a840:	eb45 0303 	adc.w	r3, r5, r3
 800a844:	607b      	str	r3, [r7, #4]
 800a846:	f04f 0200 	mov.w	r2, #0
 800a84a:	f04f 0300 	mov.w	r3, #0
 800a84e:	e9d7 4500 	ldrd	r4, r5, [r7]
 800a852:	4629      	mov	r1, r5
 800a854:	028b      	lsls	r3, r1, #10
 800a856:	4621      	mov	r1, r4
 800a858:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800a85c:	4621      	mov	r1, r4
 800a85e:	028a      	lsls	r2, r1, #10
 800a860:	4610      	mov	r0, r2
 800a862:	4619      	mov	r1, r3
 800a864:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a866:	2200      	movs	r2, #0
 800a868:	61bb      	str	r3, [r7, #24]
 800a86a:	61fa      	str	r2, [r7, #28]
 800a86c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800a870:	f7f5 ff1a 	bl	80006a8 <__aeabi_uldivmod>
 800a874:	4602      	mov	r2, r0
 800a876:	460b      	mov	r3, r1
 800a878:	4613      	mov	r3, r2
 800a87a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800a87c:	4b0b      	ldr	r3, [pc, #44]	; (800a8ac <HAL_RCC_GetSysClockFreq+0x200>)
 800a87e:	685b      	ldr	r3, [r3, #4]
 800a880:	0c1b      	lsrs	r3, r3, #16
 800a882:	f003 0303 	and.w	r3, r3, #3
 800a886:	3301      	adds	r3, #1
 800a888:	005b      	lsls	r3, r3, #1
 800a88a:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 800a88c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800a88e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a890:	fbb2 f3f3 	udiv	r3, r2, r3
 800a894:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800a896:	e002      	b.n	800a89e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800a898:	4b05      	ldr	r3, [pc, #20]	; (800a8b0 <HAL_RCC_GetSysClockFreq+0x204>)
 800a89a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800a89c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800a89e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 800a8a0:	4618      	mov	r0, r3
 800a8a2:	3750      	adds	r7, #80	; 0x50
 800a8a4:	46bd      	mov	sp, r7
 800a8a6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800a8aa:	bf00      	nop
 800a8ac:	40023800 	.word	0x40023800
 800a8b0:	00f42400 	.word	0x00f42400
 800a8b4:	007a1200 	.word	0x007a1200

0800a8b8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800a8b8:	b480      	push	{r7}
 800a8ba:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800a8bc:	4b03      	ldr	r3, [pc, #12]	; (800a8cc <HAL_RCC_GetHCLKFreq+0x14>)
 800a8be:	681b      	ldr	r3, [r3, #0]
}
 800a8c0:	4618      	mov	r0, r3
 800a8c2:	46bd      	mov	sp, r7
 800a8c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8c8:	4770      	bx	lr
 800a8ca:	bf00      	nop
 800a8cc:	20000004 	.word	0x20000004

0800a8d0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800a8d0:	b580      	push	{r7, lr}
 800a8d2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800a8d4:	f7ff fff0 	bl	800a8b8 <HAL_RCC_GetHCLKFreq>
 800a8d8:	4602      	mov	r2, r0
 800a8da:	4b05      	ldr	r3, [pc, #20]	; (800a8f0 <HAL_RCC_GetPCLK1Freq+0x20>)
 800a8dc:	689b      	ldr	r3, [r3, #8]
 800a8de:	0a9b      	lsrs	r3, r3, #10
 800a8e0:	f003 0307 	and.w	r3, r3, #7
 800a8e4:	4903      	ldr	r1, [pc, #12]	; (800a8f4 <HAL_RCC_GetPCLK1Freq+0x24>)
 800a8e6:	5ccb      	ldrb	r3, [r1, r3]
 800a8e8:	fa22 f303 	lsr.w	r3, r2, r3
}
 800a8ec:	4618      	mov	r0, r3
 800a8ee:	bd80      	pop	{r7, pc}
 800a8f0:	40023800 	.word	0x40023800
 800a8f4:	0800db64 	.word	0x0800db64

0800a8f8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800a8f8:	b580      	push	{r7, lr}
 800a8fa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800a8fc:	f7ff ffdc 	bl	800a8b8 <HAL_RCC_GetHCLKFreq>
 800a900:	4602      	mov	r2, r0
 800a902:	4b05      	ldr	r3, [pc, #20]	; (800a918 <HAL_RCC_GetPCLK2Freq+0x20>)
 800a904:	689b      	ldr	r3, [r3, #8]
 800a906:	0b5b      	lsrs	r3, r3, #13
 800a908:	f003 0307 	and.w	r3, r3, #7
 800a90c:	4903      	ldr	r1, [pc, #12]	; (800a91c <HAL_RCC_GetPCLK2Freq+0x24>)
 800a90e:	5ccb      	ldrb	r3, [r1, r3]
 800a910:	fa22 f303 	lsr.w	r3, r2, r3
}
 800a914:	4618      	mov	r0, r3
 800a916:	bd80      	pop	{r7, pc}
 800a918:	40023800 	.word	0x40023800
 800a91c:	0800db64 	.word	0x0800db64

0800a920 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800a920:	b580      	push	{r7, lr}
 800a922:	b082      	sub	sp, #8
 800a924:	af00      	add	r7, sp, #0
 800a926:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800a928:	687b      	ldr	r3, [r7, #4]
 800a92a:	2b00      	cmp	r3, #0
 800a92c:	d101      	bne.n	800a932 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800a92e:	2301      	movs	r3, #1
 800a930:	e07b      	b.n	800aa2a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800a932:	687b      	ldr	r3, [r7, #4]
 800a934:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a936:	2b00      	cmp	r3, #0
 800a938:	d108      	bne.n	800a94c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800a93a:	687b      	ldr	r3, [r7, #4]
 800a93c:	685b      	ldr	r3, [r3, #4]
 800a93e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800a942:	d009      	beq.n	800a958 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800a944:	687b      	ldr	r3, [r7, #4]
 800a946:	2200      	movs	r2, #0
 800a948:	61da      	str	r2, [r3, #28]
 800a94a:	e005      	b.n	800a958 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800a94c:	687b      	ldr	r3, [r7, #4]
 800a94e:	2200      	movs	r2, #0
 800a950:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800a952:	687b      	ldr	r3, [r7, #4]
 800a954:	2200      	movs	r2, #0
 800a956:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800a958:	687b      	ldr	r3, [r7, #4]
 800a95a:	2200      	movs	r2, #0
 800a95c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800a95e:	687b      	ldr	r3, [r7, #4]
 800a960:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800a964:	b2db      	uxtb	r3, r3
 800a966:	2b00      	cmp	r3, #0
 800a968:	d106      	bne.n	800a978 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800a96a:	687b      	ldr	r3, [r7, #4]
 800a96c:	2200      	movs	r2, #0
 800a96e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800a972:	6878      	ldr	r0, [r7, #4]
 800a974:	f000 f85d 	bl	800aa32 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800a978:	687b      	ldr	r3, [r7, #4]
 800a97a:	2202      	movs	r2, #2
 800a97c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800a980:	687b      	ldr	r3, [r7, #4]
 800a982:	681b      	ldr	r3, [r3, #0]
 800a984:	681a      	ldr	r2, [r3, #0]
 800a986:	687b      	ldr	r3, [r7, #4]
 800a988:	681b      	ldr	r3, [r3, #0]
 800a98a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a98e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800a990:	687b      	ldr	r3, [r7, #4]
 800a992:	685b      	ldr	r3, [r3, #4]
 800a994:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800a998:	687b      	ldr	r3, [r7, #4]
 800a99a:	689b      	ldr	r3, [r3, #8]
 800a99c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800a9a0:	431a      	orrs	r2, r3
 800a9a2:	687b      	ldr	r3, [r7, #4]
 800a9a4:	68db      	ldr	r3, [r3, #12]
 800a9a6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a9aa:	431a      	orrs	r2, r3
 800a9ac:	687b      	ldr	r3, [r7, #4]
 800a9ae:	691b      	ldr	r3, [r3, #16]
 800a9b0:	f003 0302 	and.w	r3, r3, #2
 800a9b4:	431a      	orrs	r2, r3
 800a9b6:	687b      	ldr	r3, [r7, #4]
 800a9b8:	695b      	ldr	r3, [r3, #20]
 800a9ba:	f003 0301 	and.w	r3, r3, #1
 800a9be:	431a      	orrs	r2, r3
 800a9c0:	687b      	ldr	r3, [r7, #4]
 800a9c2:	699b      	ldr	r3, [r3, #24]
 800a9c4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800a9c8:	431a      	orrs	r2, r3
 800a9ca:	687b      	ldr	r3, [r7, #4]
 800a9cc:	69db      	ldr	r3, [r3, #28]
 800a9ce:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a9d2:	431a      	orrs	r2, r3
 800a9d4:	687b      	ldr	r3, [r7, #4]
 800a9d6:	6a1b      	ldr	r3, [r3, #32]
 800a9d8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a9dc:	ea42 0103 	orr.w	r1, r2, r3
 800a9e0:	687b      	ldr	r3, [r7, #4]
 800a9e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a9e4:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800a9e8:	687b      	ldr	r3, [r7, #4]
 800a9ea:	681b      	ldr	r3, [r3, #0]
 800a9ec:	430a      	orrs	r2, r1
 800a9ee:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800a9f0:	687b      	ldr	r3, [r7, #4]
 800a9f2:	699b      	ldr	r3, [r3, #24]
 800a9f4:	0c1b      	lsrs	r3, r3, #16
 800a9f6:	f003 0104 	and.w	r1, r3, #4
 800a9fa:	687b      	ldr	r3, [r7, #4]
 800a9fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a9fe:	f003 0210 	and.w	r2, r3, #16
 800aa02:	687b      	ldr	r3, [r7, #4]
 800aa04:	681b      	ldr	r3, [r3, #0]
 800aa06:	430a      	orrs	r2, r1
 800aa08:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800aa0a:	687b      	ldr	r3, [r7, #4]
 800aa0c:	681b      	ldr	r3, [r3, #0]
 800aa0e:	69da      	ldr	r2, [r3, #28]
 800aa10:	687b      	ldr	r3, [r7, #4]
 800aa12:	681b      	ldr	r3, [r3, #0]
 800aa14:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800aa18:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800aa1a:	687b      	ldr	r3, [r7, #4]
 800aa1c:	2200      	movs	r2, #0
 800aa1e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800aa20:	687b      	ldr	r3, [r7, #4]
 800aa22:	2201      	movs	r2, #1
 800aa24:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800aa28:	2300      	movs	r3, #0
}
 800aa2a:	4618      	mov	r0, r3
 800aa2c:	3708      	adds	r7, #8
 800aa2e:	46bd      	mov	sp, r7
 800aa30:	bd80      	pop	{r7, pc}

0800aa32 <HAL_SPI_MspInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_MspInit(SPI_HandleTypeDef *hspi)
{
 800aa32:	b480      	push	{r7}
 800aa34:	b083      	sub	sp, #12
 800aa36:	af00      	add	r7, sp, #0
 800aa38:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_MspInit should be implemented in the user file
   */
}
 800aa3a:	bf00      	nop
 800aa3c:	370c      	adds	r7, #12
 800aa3e:	46bd      	mov	sp, r7
 800aa40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa44:	4770      	bx	lr

0800aa46 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800aa46:	b580      	push	{r7, lr}
 800aa48:	b08c      	sub	sp, #48	; 0x30
 800aa4a:	af00      	add	r7, sp, #0
 800aa4c:	60f8      	str	r0, [r7, #12]
 800aa4e:	60b9      	str	r1, [r7, #8]
 800aa50:	607a      	str	r2, [r7, #4]
 800aa52:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800aa54:	2301      	movs	r3, #1
 800aa56:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800aa58:	2300      	movs	r3, #0
 800aa5a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800aa5e:	68fb      	ldr	r3, [r7, #12]
 800aa60:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800aa64:	2b01      	cmp	r3, #1
 800aa66:	d101      	bne.n	800aa6c <HAL_SPI_TransmitReceive+0x26>
 800aa68:	2302      	movs	r3, #2
 800aa6a:	e18a      	b.n	800ad82 <HAL_SPI_TransmitReceive+0x33c>
 800aa6c:	68fb      	ldr	r3, [r7, #12]
 800aa6e:	2201      	movs	r2, #1
 800aa70:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800aa74:	f7fd fe56 	bl	8008724 <HAL_GetTick>
 800aa78:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800aa7a:	68fb      	ldr	r3, [r7, #12]
 800aa7c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800aa80:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 800aa84:	68fb      	ldr	r3, [r7, #12]
 800aa86:	685b      	ldr	r3, [r3, #4]
 800aa88:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800aa8a:	887b      	ldrh	r3, [r7, #2]
 800aa8c:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800aa8e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800aa92:	2b01      	cmp	r3, #1
 800aa94:	d00f      	beq.n	800aab6 <HAL_SPI_TransmitReceive+0x70>
 800aa96:	69fb      	ldr	r3, [r7, #28]
 800aa98:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800aa9c:	d107      	bne.n	800aaae <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800aa9e:	68fb      	ldr	r3, [r7, #12]
 800aaa0:	689b      	ldr	r3, [r3, #8]
 800aaa2:	2b00      	cmp	r3, #0
 800aaa4:	d103      	bne.n	800aaae <HAL_SPI_TransmitReceive+0x68>
 800aaa6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800aaaa:	2b04      	cmp	r3, #4
 800aaac:	d003      	beq.n	800aab6 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 800aaae:	2302      	movs	r3, #2
 800aab0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800aab4:	e15b      	b.n	800ad6e <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800aab6:	68bb      	ldr	r3, [r7, #8]
 800aab8:	2b00      	cmp	r3, #0
 800aaba:	d005      	beq.n	800aac8 <HAL_SPI_TransmitReceive+0x82>
 800aabc:	687b      	ldr	r3, [r7, #4]
 800aabe:	2b00      	cmp	r3, #0
 800aac0:	d002      	beq.n	800aac8 <HAL_SPI_TransmitReceive+0x82>
 800aac2:	887b      	ldrh	r3, [r7, #2]
 800aac4:	2b00      	cmp	r3, #0
 800aac6:	d103      	bne.n	800aad0 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800aac8:	2301      	movs	r3, #1
 800aaca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800aace:	e14e      	b.n	800ad6e <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800aad0:	68fb      	ldr	r3, [r7, #12]
 800aad2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800aad6:	b2db      	uxtb	r3, r3
 800aad8:	2b04      	cmp	r3, #4
 800aada:	d003      	beq.n	800aae4 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800aadc:	68fb      	ldr	r3, [r7, #12]
 800aade:	2205      	movs	r2, #5
 800aae0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800aae4:	68fb      	ldr	r3, [r7, #12]
 800aae6:	2200      	movs	r2, #0
 800aae8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800aaea:	68fb      	ldr	r3, [r7, #12]
 800aaec:	687a      	ldr	r2, [r7, #4]
 800aaee:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800aaf0:	68fb      	ldr	r3, [r7, #12]
 800aaf2:	887a      	ldrh	r2, [r7, #2]
 800aaf4:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800aaf6:	68fb      	ldr	r3, [r7, #12]
 800aaf8:	887a      	ldrh	r2, [r7, #2]
 800aafa:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800aafc:	68fb      	ldr	r3, [r7, #12]
 800aafe:	68ba      	ldr	r2, [r7, #8]
 800ab00:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800ab02:	68fb      	ldr	r3, [r7, #12]
 800ab04:	887a      	ldrh	r2, [r7, #2]
 800ab06:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800ab08:	68fb      	ldr	r3, [r7, #12]
 800ab0a:	887a      	ldrh	r2, [r7, #2]
 800ab0c:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800ab0e:	68fb      	ldr	r3, [r7, #12]
 800ab10:	2200      	movs	r2, #0
 800ab12:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800ab14:	68fb      	ldr	r3, [r7, #12]
 800ab16:	2200      	movs	r2, #0
 800ab18:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800ab1a:	68fb      	ldr	r3, [r7, #12]
 800ab1c:	681b      	ldr	r3, [r3, #0]
 800ab1e:	681b      	ldr	r3, [r3, #0]
 800ab20:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ab24:	2b40      	cmp	r3, #64	; 0x40
 800ab26:	d007      	beq.n	800ab38 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800ab28:	68fb      	ldr	r3, [r7, #12]
 800ab2a:	681b      	ldr	r3, [r3, #0]
 800ab2c:	681a      	ldr	r2, [r3, #0]
 800ab2e:	68fb      	ldr	r3, [r7, #12]
 800ab30:	681b      	ldr	r3, [r3, #0]
 800ab32:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800ab36:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800ab38:	68fb      	ldr	r3, [r7, #12]
 800ab3a:	68db      	ldr	r3, [r3, #12]
 800ab3c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800ab40:	d178      	bne.n	800ac34 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800ab42:	68fb      	ldr	r3, [r7, #12]
 800ab44:	685b      	ldr	r3, [r3, #4]
 800ab46:	2b00      	cmp	r3, #0
 800ab48:	d002      	beq.n	800ab50 <HAL_SPI_TransmitReceive+0x10a>
 800ab4a:	8b7b      	ldrh	r3, [r7, #26]
 800ab4c:	2b01      	cmp	r3, #1
 800ab4e:	d166      	bne.n	800ac1e <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800ab50:	68fb      	ldr	r3, [r7, #12]
 800ab52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ab54:	881a      	ldrh	r2, [r3, #0]
 800ab56:	68fb      	ldr	r3, [r7, #12]
 800ab58:	681b      	ldr	r3, [r3, #0]
 800ab5a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800ab5c:	68fb      	ldr	r3, [r7, #12]
 800ab5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ab60:	1c9a      	adds	r2, r3, #2
 800ab62:	68fb      	ldr	r3, [r7, #12]
 800ab64:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800ab66:	68fb      	ldr	r3, [r7, #12]
 800ab68:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800ab6a:	b29b      	uxth	r3, r3
 800ab6c:	3b01      	subs	r3, #1
 800ab6e:	b29a      	uxth	r2, r3
 800ab70:	68fb      	ldr	r3, [r7, #12]
 800ab72:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800ab74:	e053      	b.n	800ac1e <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800ab76:	68fb      	ldr	r3, [r7, #12]
 800ab78:	681b      	ldr	r3, [r3, #0]
 800ab7a:	689b      	ldr	r3, [r3, #8]
 800ab7c:	f003 0302 	and.w	r3, r3, #2
 800ab80:	2b02      	cmp	r3, #2
 800ab82:	d11b      	bne.n	800abbc <HAL_SPI_TransmitReceive+0x176>
 800ab84:	68fb      	ldr	r3, [r7, #12]
 800ab86:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800ab88:	b29b      	uxth	r3, r3
 800ab8a:	2b00      	cmp	r3, #0
 800ab8c:	d016      	beq.n	800abbc <HAL_SPI_TransmitReceive+0x176>
 800ab8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ab90:	2b01      	cmp	r3, #1
 800ab92:	d113      	bne.n	800abbc <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800ab94:	68fb      	ldr	r3, [r7, #12]
 800ab96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ab98:	881a      	ldrh	r2, [r3, #0]
 800ab9a:	68fb      	ldr	r3, [r7, #12]
 800ab9c:	681b      	ldr	r3, [r3, #0]
 800ab9e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800aba0:	68fb      	ldr	r3, [r7, #12]
 800aba2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aba4:	1c9a      	adds	r2, r3, #2
 800aba6:	68fb      	ldr	r3, [r7, #12]
 800aba8:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800abaa:	68fb      	ldr	r3, [r7, #12]
 800abac:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800abae:	b29b      	uxth	r3, r3
 800abb0:	3b01      	subs	r3, #1
 800abb2:	b29a      	uxth	r2, r3
 800abb4:	68fb      	ldr	r3, [r7, #12]
 800abb6:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800abb8:	2300      	movs	r3, #0
 800abba:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800abbc:	68fb      	ldr	r3, [r7, #12]
 800abbe:	681b      	ldr	r3, [r3, #0]
 800abc0:	689b      	ldr	r3, [r3, #8]
 800abc2:	f003 0301 	and.w	r3, r3, #1
 800abc6:	2b01      	cmp	r3, #1
 800abc8:	d119      	bne.n	800abfe <HAL_SPI_TransmitReceive+0x1b8>
 800abca:	68fb      	ldr	r3, [r7, #12]
 800abcc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800abce:	b29b      	uxth	r3, r3
 800abd0:	2b00      	cmp	r3, #0
 800abd2:	d014      	beq.n	800abfe <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800abd4:	68fb      	ldr	r3, [r7, #12]
 800abd6:	681b      	ldr	r3, [r3, #0]
 800abd8:	68da      	ldr	r2, [r3, #12]
 800abda:	68fb      	ldr	r3, [r7, #12]
 800abdc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800abde:	b292      	uxth	r2, r2
 800abe0:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800abe2:	68fb      	ldr	r3, [r7, #12]
 800abe4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800abe6:	1c9a      	adds	r2, r3, #2
 800abe8:	68fb      	ldr	r3, [r7, #12]
 800abea:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800abec:	68fb      	ldr	r3, [r7, #12]
 800abee:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800abf0:	b29b      	uxth	r3, r3
 800abf2:	3b01      	subs	r3, #1
 800abf4:	b29a      	uxth	r2, r3
 800abf6:	68fb      	ldr	r3, [r7, #12]
 800abf8:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800abfa:	2301      	movs	r3, #1
 800abfc:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800abfe:	f7fd fd91 	bl	8008724 <HAL_GetTick>
 800ac02:	4602      	mov	r2, r0
 800ac04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac06:	1ad3      	subs	r3, r2, r3
 800ac08:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ac0a:	429a      	cmp	r2, r3
 800ac0c:	d807      	bhi.n	800ac1e <HAL_SPI_TransmitReceive+0x1d8>
 800ac0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ac10:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ac14:	d003      	beq.n	800ac1e <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 800ac16:	2303      	movs	r3, #3
 800ac18:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800ac1c:	e0a7      	b.n	800ad6e <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800ac1e:	68fb      	ldr	r3, [r7, #12]
 800ac20:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800ac22:	b29b      	uxth	r3, r3
 800ac24:	2b00      	cmp	r3, #0
 800ac26:	d1a6      	bne.n	800ab76 <HAL_SPI_TransmitReceive+0x130>
 800ac28:	68fb      	ldr	r3, [r7, #12]
 800ac2a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800ac2c:	b29b      	uxth	r3, r3
 800ac2e:	2b00      	cmp	r3, #0
 800ac30:	d1a1      	bne.n	800ab76 <HAL_SPI_TransmitReceive+0x130>
 800ac32:	e07c      	b.n	800ad2e <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800ac34:	68fb      	ldr	r3, [r7, #12]
 800ac36:	685b      	ldr	r3, [r3, #4]
 800ac38:	2b00      	cmp	r3, #0
 800ac3a:	d002      	beq.n	800ac42 <HAL_SPI_TransmitReceive+0x1fc>
 800ac3c:	8b7b      	ldrh	r3, [r7, #26]
 800ac3e:	2b01      	cmp	r3, #1
 800ac40:	d16b      	bne.n	800ad1a <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800ac42:	68fb      	ldr	r3, [r7, #12]
 800ac44:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ac46:	68fb      	ldr	r3, [r7, #12]
 800ac48:	681b      	ldr	r3, [r3, #0]
 800ac4a:	330c      	adds	r3, #12
 800ac4c:	7812      	ldrb	r2, [r2, #0]
 800ac4e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800ac50:	68fb      	ldr	r3, [r7, #12]
 800ac52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ac54:	1c5a      	adds	r2, r3, #1
 800ac56:	68fb      	ldr	r3, [r7, #12]
 800ac58:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800ac5a:	68fb      	ldr	r3, [r7, #12]
 800ac5c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800ac5e:	b29b      	uxth	r3, r3
 800ac60:	3b01      	subs	r3, #1
 800ac62:	b29a      	uxth	r2, r3
 800ac64:	68fb      	ldr	r3, [r7, #12]
 800ac66:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800ac68:	e057      	b.n	800ad1a <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800ac6a:	68fb      	ldr	r3, [r7, #12]
 800ac6c:	681b      	ldr	r3, [r3, #0]
 800ac6e:	689b      	ldr	r3, [r3, #8]
 800ac70:	f003 0302 	and.w	r3, r3, #2
 800ac74:	2b02      	cmp	r3, #2
 800ac76:	d11c      	bne.n	800acb2 <HAL_SPI_TransmitReceive+0x26c>
 800ac78:	68fb      	ldr	r3, [r7, #12]
 800ac7a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800ac7c:	b29b      	uxth	r3, r3
 800ac7e:	2b00      	cmp	r3, #0
 800ac80:	d017      	beq.n	800acb2 <HAL_SPI_TransmitReceive+0x26c>
 800ac82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ac84:	2b01      	cmp	r3, #1
 800ac86:	d114      	bne.n	800acb2 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800ac88:	68fb      	ldr	r3, [r7, #12]
 800ac8a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ac8c:	68fb      	ldr	r3, [r7, #12]
 800ac8e:	681b      	ldr	r3, [r3, #0]
 800ac90:	330c      	adds	r3, #12
 800ac92:	7812      	ldrb	r2, [r2, #0]
 800ac94:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800ac96:	68fb      	ldr	r3, [r7, #12]
 800ac98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ac9a:	1c5a      	adds	r2, r3, #1
 800ac9c:	68fb      	ldr	r3, [r7, #12]
 800ac9e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800aca0:	68fb      	ldr	r3, [r7, #12]
 800aca2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800aca4:	b29b      	uxth	r3, r3
 800aca6:	3b01      	subs	r3, #1
 800aca8:	b29a      	uxth	r2, r3
 800acaa:	68fb      	ldr	r3, [r7, #12]
 800acac:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800acae:	2300      	movs	r3, #0
 800acb0:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800acb2:	68fb      	ldr	r3, [r7, #12]
 800acb4:	681b      	ldr	r3, [r3, #0]
 800acb6:	689b      	ldr	r3, [r3, #8]
 800acb8:	f003 0301 	and.w	r3, r3, #1
 800acbc:	2b01      	cmp	r3, #1
 800acbe:	d119      	bne.n	800acf4 <HAL_SPI_TransmitReceive+0x2ae>
 800acc0:	68fb      	ldr	r3, [r7, #12]
 800acc2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800acc4:	b29b      	uxth	r3, r3
 800acc6:	2b00      	cmp	r3, #0
 800acc8:	d014      	beq.n	800acf4 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800acca:	68fb      	ldr	r3, [r7, #12]
 800accc:	681b      	ldr	r3, [r3, #0]
 800acce:	68da      	ldr	r2, [r3, #12]
 800acd0:	68fb      	ldr	r3, [r7, #12]
 800acd2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800acd4:	b2d2      	uxtb	r2, r2
 800acd6:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800acd8:	68fb      	ldr	r3, [r7, #12]
 800acda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800acdc:	1c5a      	adds	r2, r3, #1
 800acde:	68fb      	ldr	r3, [r7, #12]
 800ace0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800ace2:	68fb      	ldr	r3, [r7, #12]
 800ace4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800ace6:	b29b      	uxth	r3, r3
 800ace8:	3b01      	subs	r3, #1
 800acea:	b29a      	uxth	r2, r3
 800acec:	68fb      	ldr	r3, [r7, #12]
 800acee:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800acf0:	2301      	movs	r3, #1
 800acf2:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800acf4:	f7fd fd16 	bl	8008724 <HAL_GetTick>
 800acf8:	4602      	mov	r2, r0
 800acfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800acfc:	1ad3      	subs	r3, r2, r3
 800acfe:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ad00:	429a      	cmp	r2, r3
 800ad02:	d803      	bhi.n	800ad0c <HAL_SPI_TransmitReceive+0x2c6>
 800ad04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad06:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ad0a:	d102      	bne.n	800ad12 <HAL_SPI_TransmitReceive+0x2cc>
 800ad0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad0e:	2b00      	cmp	r3, #0
 800ad10:	d103      	bne.n	800ad1a <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 800ad12:	2303      	movs	r3, #3
 800ad14:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800ad18:	e029      	b.n	800ad6e <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800ad1a:	68fb      	ldr	r3, [r7, #12]
 800ad1c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800ad1e:	b29b      	uxth	r3, r3
 800ad20:	2b00      	cmp	r3, #0
 800ad22:	d1a2      	bne.n	800ac6a <HAL_SPI_TransmitReceive+0x224>
 800ad24:	68fb      	ldr	r3, [r7, #12]
 800ad26:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800ad28:	b29b      	uxth	r3, r3
 800ad2a:	2b00      	cmp	r3, #0
 800ad2c:	d19d      	bne.n	800ac6a <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800ad2e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ad30:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800ad32:	68f8      	ldr	r0, [r7, #12]
 800ad34:	f000 f8c0 	bl	800aeb8 <SPI_EndRxTxTransaction>
 800ad38:	4603      	mov	r3, r0
 800ad3a:	2b00      	cmp	r3, #0
 800ad3c:	d006      	beq.n	800ad4c <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 800ad3e:	2301      	movs	r3, #1
 800ad40:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800ad44:	68fb      	ldr	r3, [r7, #12]
 800ad46:	2220      	movs	r2, #32
 800ad48:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800ad4a:	e010      	b.n	800ad6e <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800ad4c:	68fb      	ldr	r3, [r7, #12]
 800ad4e:	689b      	ldr	r3, [r3, #8]
 800ad50:	2b00      	cmp	r3, #0
 800ad52:	d10b      	bne.n	800ad6c <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800ad54:	2300      	movs	r3, #0
 800ad56:	617b      	str	r3, [r7, #20]
 800ad58:	68fb      	ldr	r3, [r7, #12]
 800ad5a:	681b      	ldr	r3, [r3, #0]
 800ad5c:	68db      	ldr	r3, [r3, #12]
 800ad5e:	617b      	str	r3, [r7, #20]
 800ad60:	68fb      	ldr	r3, [r7, #12]
 800ad62:	681b      	ldr	r3, [r3, #0]
 800ad64:	689b      	ldr	r3, [r3, #8]
 800ad66:	617b      	str	r3, [r7, #20]
 800ad68:	697b      	ldr	r3, [r7, #20]
 800ad6a:	e000      	b.n	800ad6e <HAL_SPI_TransmitReceive+0x328>
  }

error :
 800ad6c:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800ad6e:	68fb      	ldr	r3, [r7, #12]
 800ad70:	2201      	movs	r2, #1
 800ad72:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800ad76:	68fb      	ldr	r3, [r7, #12]
 800ad78:	2200      	movs	r2, #0
 800ad7a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800ad7e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800ad82:	4618      	mov	r0, r3
 800ad84:	3730      	adds	r7, #48	; 0x30
 800ad86:	46bd      	mov	sp, r7
 800ad88:	bd80      	pop	{r7, pc}

0800ad8a <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 800ad8a:	b480      	push	{r7}
 800ad8c:	b083      	sub	sp, #12
 800ad8e:	af00      	add	r7, sp, #0
 800ad90:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 800ad92:	687b      	ldr	r3, [r7, #4]
 800ad94:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800ad98:	b2db      	uxtb	r3, r3
}
 800ad9a:	4618      	mov	r0, r3
 800ad9c:	370c      	adds	r7, #12
 800ad9e:	46bd      	mov	sp, r7
 800ada0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ada4:	4770      	bx	lr
	...

0800ada8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800ada8:	b580      	push	{r7, lr}
 800adaa:	b088      	sub	sp, #32
 800adac:	af00      	add	r7, sp, #0
 800adae:	60f8      	str	r0, [r7, #12]
 800adb0:	60b9      	str	r1, [r7, #8]
 800adb2:	603b      	str	r3, [r7, #0]
 800adb4:	4613      	mov	r3, r2
 800adb6:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800adb8:	f7fd fcb4 	bl	8008724 <HAL_GetTick>
 800adbc:	4602      	mov	r2, r0
 800adbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800adc0:	1a9b      	subs	r3, r3, r2
 800adc2:	683a      	ldr	r2, [r7, #0]
 800adc4:	4413      	add	r3, r2
 800adc6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800adc8:	f7fd fcac 	bl	8008724 <HAL_GetTick>
 800adcc:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800adce:	4b39      	ldr	r3, [pc, #228]	; (800aeb4 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800add0:	681b      	ldr	r3, [r3, #0]
 800add2:	015b      	lsls	r3, r3, #5
 800add4:	0d1b      	lsrs	r3, r3, #20
 800add6:	69fa      	ldr	r2, [r7, #28]
 800add8:	fb02 f303 	mul.w	r3, r2, r3
 800addc:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800adde:	e054      	b.n	800ae8a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800ade0:	683b      	ldr	r3, [r7, #0]
 800ade2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ade6:	d050      	beq.n	800ae8a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800ade8:	f7fd fc9c 	bl	8008724 <HAL_GetTick>
 800adec:	4602      	mov	r2, r0
 800adee:	69bb      	ldr	r3, [r7, #24]
 800adf0:	1ad3      	subs	r3, r2, r3
 800adf2:	69fa      	ldr	r2, [r7, #28]
 800adf4:	429a      	cmp	r2, r3
 800adf6:	d902      	bls.n	800adfe <SPI_WaitFlagStateUntilTimeout+0x56>
 800adf8:	69fb      	ldr	r3, [r7, #28]
 800adfa:	2b00      	cmp	r3, #0
 800adfc:	d13d      	bne.n	800ae7a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800adfe:	68fb      	ldr	r3, [r7, #12]
 800ae00:	681b      	ldr	r3, [r3, #0]
 800ae02:	685a      	ldr	r2, [r3, #4]
 800ae04:	68fb      	ldr	r3, [r7, #12]
 800ae06:	681b      	ldr	r3, [r3, #0]
 800ae08:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800ae0c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800ae0e:	68fb      	ldr	r3, [r7, #12]
 800ae10:	685b      	ldr	r3, [r3, #4]
 800ae12:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800ae16:	d111      	bne.n	800ae3c <SPI_WaitFlagStateUntilTimeout+0x94>
 800ae18:	68fb      	ldr	r3, [r7, #12]
 800ae1a:	689b      	ldr	r3, [r3, #8]
 800ae1c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ae20:	d004      	beq.n	800ae2c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800ae22:	68fb      	ldr	r3, [r7, #12]
 800ae24:	689b      	ldr	r3, [r3, #8]
 800ae26:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ae2a:	d107      	bne.n	800ae3c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800ae2c:	68fb      	ldr	r3, [r7, #12]
 800ae2e:	681b      	ldr	r3, [r3, #0]
 800ae30:	681a      	ldr	r2, [r3, #0]
 800ae32:	68fb      	ldr	r3, [r7, #12]
 800ae34:	681b      	ldr	r3, [r3, #0]
 800ae36:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800ae3a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800ae3c:	68fb      	ldr	r3, [r7, #12]
 800ae3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ae40:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ae44:	d10f      	bne.n	800ae66 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800ae46:	68fb      	ldr	r3, [r7, #12]
 800ae48:	681b      	ldr	r3, [r3, #0]
 800ae4a:	681a      	ldr	r2, [r3, #0]
 800ae4c:	68fb      	ldr	r3, [r7, #12]
 800ae4e:	681b      	ldr	r3, [r3, #0]
 800ae50:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800ae54:	601a      	str	r2, [r3, #0]
 800ae56:	68fb      	ldr	r3, [r7, #12]
 800ae58:	681b      	ldr	r3, [r3, #0]
 800ae5a:	681a      	ldr	r2, [r3, #0]
 800ae5c:	68fb      	ldr	r3, [r7, #12]
 800ae5e:	681b      	ldr	r3, [r3, #0]
 800ae60:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800ae64:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800ae66:	68fb      	ldr	r3, [r7, #12]
 800ae68:	2201      	movs	r2, #1
 800ae6a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800ae6e:	68fb      	ldr	r3, [r7, #12]
 800ae70:	2200      	movs	r2, #0
 800ae72:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800ae76:	2303      	movs	r3, #3
 800ae78:	e017      	b.n	800aeaa <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800ae7a:	697b      	ldr	r3, [r7, #20]
 800ae7c:	2b00      	cmp	r3, #0
 800ae7e:	d101      	bne.n	800ae84 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800ae80:	2300      	movs	r3, #0
 800ae82:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800ae84:	697b      	ldr	r3, [r7, #20]
 800ae86:	3b01      	subs	r3, #1
 800ae88:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800ae8a:	68fb      	ldr	r3, [r7, #12]
 800ae8c:	681b      	ldr	r3, [r3, #0]
 800ae8e:	689a      	ldr	r2, [r3, #8]
 800ae90:	68bb      	ldr	r3, [r7, #8]
 800ae92:	4013      	ands	r3, r2
 800ae94:	68ba      	ldr	r2, [r7, #8]
 800ae96:	429a      	cmp	r2, r3
 800ae98:	bf0c      	ite	eq
 800ae9a:	2301      	moveq	r3, #1
 800ae9c:	2300      	movne	r3, #0
 800ae9e:	b2db      	uxtb	r3, r3
 800aea0:	461a      	mov	r2, r3
 800aea2:	79fb      	ldrb	r3, [r7, #7]
 800aea4:	429a      	cmp	r2, r3
 800aea6:	d19b      	bne.n	800ade0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800aea8:	2300      	movs	r3, #0
}
 800aeaa:	4618      	mov	r0, r3
 800aeac:	3720      	adds	r7, #32
 800aeae:	46bd      	mov	sp, r7
 800aeb0:	bd80      	pop	{r7, pc}
 800aeb2:	bf00      	nop
 800aeb4:	20000004 	.word	0x20000004

0800aeb8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800aeb8:	b580      	push	{r7, lr}
 800aeba:	b088      	sub	sp, #32
 800aebc:	af02      	add	r7, sp, #8
 800aebe:	60f8      	str	r0, [r7, #12]
 800aec0:	60b9      	str	r1, [r7, #8]
 800aec2:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800aec4:	4b1b      	ldr	r3, [pc, #108]	; (800af34 <SPI_EndRxTxTransaction+0x7c>)
 800aec6:	681b      	ldr	r3, [r3, #0]
 800aec8:	4a1b      	ldr	r2, [pc, #108]	; (800af38 <SPI_EndRxTxTransaction+0x80>)
 800aeca:	fba2 2303 	umull	r2, r3, r2, r3
 800aece:	0d5b      	lsrs	r3, r3, #21
 800aed0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800aed4:	fb02 f303 	mul.w	r3, r2, r3
 800aed8:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800aeda:	68fb      	ldr	r3, [r7, #12]
 800aedc:	685b      	ldr	r3, [r3, #4]
 800aede:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800aee2:	d112      	bne.n	800af0a <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800aee4:	687b      	ldr	r3, [r7, #4]
 800aee6:	9300      	str	r3, [sp, #0]
 800aee8:	68bb      	ldr	r3, [r7, #8]
 800aeea:	2200      	movs	r2, #0
 800aeec:	2180      	movs	r1, #128	; 0x80
 800aeee:	68f8      	ldr	r0, [r7, #12]
 800aef0:	f7ff ff5a 	bl	800ada8 <SPI_WaitFlagStateUntilTimeout>
 800aef4:	4603      	mov	r3, r0
 800aef6:	2b00      	cmp	r3, #0
 800aef8:	d016      	beq.n	800af28 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800aefa:	68fb      	ldr	r3, [r7, #12]
 800aefc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800aefe:	f043 0220 	orr.w	r2, r3, #32
 800af02:	68fb      	ldr	r3, [r7, #12]
 800af04:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800af06:	2303      	movs	r3, #3
 800af08:	e00f      	b.n	800af2a <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800af0a:	697b      	ldr	r3, [r7, #20]
 800af0c:	2b00      	cmp	r3, #0
 800af0e:	d00a      	beq.n	800af26 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 800af10:	697b      	ldr	r3, [r7, #20]
 800af12:	3b01      	subs	r3, #1
 800af14:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800af16:	68fb      	ldr	r3, [r7, #12]
 800af18:	681b      	ldr	r3, [r3, #0]
 800af1a:	689b      	ldr	r3, [r3, #8]
 800af1c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800af20:	2b80      	cmp	r3, #128	; 0x80
 800af22:	d0f2      	beq.n	800af0a <SPI_EndRxTxTransaction+0x52>
 800af24:	e000      	b.n	800af28 <SPI_EndRxTxTransaction+0x70>
        break;
 800af26:	bf00      	nop
  }

  return HAL_OK;
 800af28:	2300      	movs	r3, #0
}
 800af2a:	4618      	mov	r0, r3
 800af2c:	3718      	adds	r7, #24
 800af2e:	46bd      	mov	sp, r7
 800af30:	bd80      	pop	{r7, pc}
 800af32:	bf00      	nop
 800af34:	20000004 	.word	0x20000004
 800af38:	165e9f81 	.word	0x165e9f81

0800af3c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800af3c:	b580      	push	{r7, lr}
 800af3e:	b082      	sub	sp, #8
 800af40:	af00      	add	r7, sp, #0
 800af42:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800af44:	687b      	ldr	r3, [r7, #4]
 800af46:	2b00      	cmp	r3, #0
 800af48:	d101      	bne.n	800af4e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800af4a:	2301      	movs	r3, #1
 800af4c:	e03f      	b.n	800afce <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800af4e:	687b      	ldr	r3, [r7, #4]
 800af50:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800af54:	b2db      	uxtb	r3, r3
 800af56:	2b00      	cmp	r3, #0
 800af58:	d106      	bne.n	800af68 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800af5a:	687b      	ldr	r3, [r7, #4]
 800af5c:	2200      	movs	r2, #0
 800af5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800af62:	6878      	ldr	r0, [r7, #4]
 800af64:	f000 f837 	bl	800afd6 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800af68:	687b      	ldr	r3, [r7, #4]
 800af6a:	2224      	movs	r2, #36	; 0x24
 800af6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800af70:	687b      	ldr	r3, [r7, #4]
 800af72:	681b      	ldr	r3, [r3, #0]
 800af74:	68da      	ldr	r2, [r3, #12]
 800af76:	687b      	ldr	r3, [r7, #4]
 800af78:	681b      	ldr	r3, [r3, #0]
 800af7a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800af7e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800af80:	6878      	ldr	r0, [r7, #4]
 800af82:	f000 f933 	bl	800b1ec <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800af86:	687b      	ldr	r3, [r7, #4]
 800af88:	681b      	ldr	r3, [r3, #0]
 800af8a:	691a      	ldr	r2, [r3, #16]
 800af8c:	687b      	ldr	r3, [r7, #4]
 800af8e:	681b      	ldr	r3, [r3, #0]
 800af90:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800af94:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800af96:	687b      	ldr	r3, [r7, #4]
 800af98:	681b      	ldr	r3, [r3, #0]
 800af9a:	695a      	ldr	r2, [r3, #20]
 800af9c:	687b      	ldr	r3, [r7, #4]
 800af9e:	681b      	ldr	r3, [r3, #0]
 800afa0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800afa4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800afa6:	687b      	ldr	r3, [r7, #4]
 800afa8:	681b      	ldr	r3, [r3, #0]
 800afaa:	68da      	ldr	r2, [r3, #12]
 800afac:	687b      	ldr	r3, [r7, #4]
 800afae:	681b      	ldr	r3, [r3, #0]
 800afb0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800afb4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800afb6:	687b      	ldr	r3, [r7, #4]
 800afb8:	2200      	movs	r2, #0
 800afba:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800afbc:	687b      	ldr	r3, [r7, #4]
 800afbe:	2220      	movs	r2, #32
 800afc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800afc4:	687b      	ldr	r3, [r7, #4]
 800afc6:	2220      	movs	r2, #32
 800afc8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800afcc:	2300      	movs	r3, #0
}
 800afce:	4618      	mov	r0, r3
 800afd0:	3708      	adds	r7, #8
 800afd2:	46bd      	mov	sp, r7
 800afd4:	bd80      	pop	{r7, pc}

0800afd6 <HAL_UART_MspInit>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 800afd6:	b480      	push	{r7}
 800afd8:	b083      	sub	sp, #12
 800afda:	af00      	add	r7, sp, #0
 800afdc:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_MspInit could be implemented in the user file
   */
}
 800afde:	bf00      	nop
 800afe0:	370c      	adds	r7, #12
 800afe2:	46bd      	mov	sp, r7
 800afe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afe8:	4770      	bx	lr

0800afea <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800afea:	b580      	push	{r7, lr}
 800afec:	b08a      	sub	sp, #40	; 0x28
 800afee:	af02      	add	r7, sp, #8
 800aff0:	60f8      	str	r0, [r7, #12]
 800aff2:	60b9      	str	r1, [r7, #8]
 800aff4:	603b      	str	r3, [r7, #0]
 800aff6:	4613      	mov	r3, r2
 800aff8:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800affa:	2300      	movs	r3, #0
 800affc:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800affe:	68fb      	ldr	r3, [r7, #12]
 800b000:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b004:	b2db      	uxtb	r3, r3
 800b006:	2b20      	cmp	r3, #32
 800b008:	d17c      	bne.n	800b104 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800b00a:	68bb      	ldr	r3, [r7, #8]
 800b00c:	2b00      	cmp	r3, #0
 800b00e:	d002      	beq.n	800b016 <HAL_UART_Transmit+0x2c>
 800b010:	88fb      	ldrh	r3, [r7, #6]
 800b012:	2b00      	cmp	r3, #0
 800b014:	d101      	bne.n	800b01a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800b016:	2301      	movs	r3, #1
 800b018:	e075      	b.n	800b106 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800b01a:	68fb      	ldr	r3, [r7, #12]
 800b01c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b020:	2b01      	cmp	r3, #1
 800b022:	d101      	bne.n	800b028 <HAL_UART_Transmit+0x3e>
 800b024:	2302      	movs	r3, #2
 800b026:	e06e      	b.n	800b106 <HAL_UART_Transmit+0x11c>
 800b028:	68fb      	ldr	r3, [r7, #12]
 800b02a:	2201      	movs	r2, #1
 800b02c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b030:	68fb      	ldr	r3, [r7, #12]
 800b032:	2200      	movs	r2, #0
 800b034:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800b036:	68fb      	ldr	r3, [r7, #12]
 800b038:	2221      	movs	r2, #33	; 0x21
 800b03a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800b03e:	f7fd fb71 	bl	8008724 <HAL_GetTick>
 800b042:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800b044:	68fb      	ldr	r3, [r7, #12]
 800b046:	88fa      	ldrh	r2, [r7, #6]
 800b048:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800b04a:	68fb      	ldr	r3, [r7, #12]
 800b04c:	88fa      	ldrh	r2, [r7, #6]
 800b04e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b050:	68fb      	ldr	r3, [r7, #12]
 800b052:	689b      	ldr	r3, [r3, #8]
 800b054:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b058:	d108      	bne.n	800b06c <HAL_UART_Transmit+0x82>
 800b05a:	68fb      	ldr	r3, [r7, #12]
 800b05c:	691b      	ldr	r3, [r3, #16]
 800b05e:	2b00      	cmp	r3, #0
 800b060:	d104      	bne.n	800b06c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800b062:	2300      	movs	r3, #0
 800b064:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800b066:	68bb      	ldr	r3, [r7, #8]
 800b068:	61bb      	str	r3, [r7, #24]
 800b06a:	e003      	b.n	800b074 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800b06c:	68bb      	ldr	r3, [r7, #8]
 800b06e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800b070:	2300      	movs	r3, #0
 800b072:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800b074:	68fb      	ldr	r3, [r7, #12]
 800b076:	2200      	movs	r2, #0
 800b078:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800b07c:	e02a      	b.n	800b0d4 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800b07e:	683b      	ldr	r3, [r7, #0]
 800b080:	9300      	str	r3, [sp, #0]
 800b082:	697b      	ldr	r3, [r7, #20]
 800b084:	2200      	movs	r2, #0
 800b086:	2180      	movs	r1, #128	; 0x80
 800b088:	68f8      	ldr	r0, [r7, #12]
 800b08a:	f000 f840 	bl	800b10e <UART_WaitOnFlagUntilTimeout>
 800b08e:	4603      	mov	r3, r0
 800b090:	2b00      	cmp	r3, #0
 800b092:	d001      	beq.n	800b098 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800b094:	2303      	movs	r3, #3
 800b096:	e036      	b.n	800b106 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800b098:	69fb      	ldr	r3, [r7, #28]
 800b09a:	2b00      	cmp	r3, #0
 800b09c:	d10b      	bne.n	800b0b6 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800b09e:	69bb      	ldr	r3, [r7, #24]
 800b0a0:	881b      	ldrh	r3, [r3, #0]
 800b0a2:	461a      	mov	r2, r3
 800b0a4:	68fb      	ldr	r3, [r7, #12]
 800b0a6:	681b      	ldr	r3, [r3, #0]
 800b0a8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800b0ac:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800b0ae:	69bb      	ldr	r3, [r7, #24]
 800b0b0:	3302      	adds	r3, #2
 800b0b2:	61bb      	str	r3, [r7, #24]
 800b0b4:	e007      	b.n	800b0c6 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800b0b6:	69fb      	ldr	r3, [r7, #28]
 800b0b8:	781a      	ldrb	r2, [r3, #0]
 800b0ba:	68fb      	ldr	r3, [r7, #12]
 800b0bc:	681b      	ldr	r3, [r3, #0]
 800b0be:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800b0c0:	69fb      	ldr	r3, [r7, #28]
 800b0c2:	3301      	adds	r3, #1
 800b0c4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800b0c6:	68fb      	ldr	r3, [r7, #12]
 800b0c8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800b0ca:	b29b      	uxth	r3, r3
 800b0cc:	3b01      	subs	r3, #1
 800b0ce:	b29a      	uxth	r2, r3
 800b0d0:	68fb      	ldr	r3, [r7, #12]
 800b0d2:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800b0d4:	68fb      	ldr	r3, [r7, #12]
 800b0d6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800b0d8:	b29b      	uxth	r3, r3
 800b0da:	2b00      	cmp	r3, #0
 800b0dc:	d1cf      	bne.n	800b07e <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800b0de:	683b      	ldr	r3, [r7, #0]
 800b0e0:	9300      	str	r3, [sp, #0]
 800b0e2:	697b      	ldr	r3, [r7, #20]
 800b0e4:	2200      	movs	r2, #0
 800b0e6:	2140      	movs	r1, #64	; 0x40
 800b0e8:	68f8      	ldr	r0, [r7, #12]
 800b0ea:	f000 f810 	bl	800b10e <UART_WaitOnFlagUntilTimeout>
 800b0ee:	4603      	mov	r3, r0
 800b0f0:	2b00      	cmp	r3, #0
 800b0f2:	d001      	beq.n	800b0f8 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800b0f4:	2303      	movs	r3, #3
 800b0f6:	e006      	b.n	800b106 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800b0f8:	68fb      	ldr	r3, [r7, #12]
 800b0fa:	2220      	movs	r2, #32
 800b0fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800b100:	2300      	movs	r3, #0
 800b102:	e000      	b.n	800b106 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800b104:	2302      	movs	r3, #2
  }
}
 800b106:	4618      	mov	r0, r3
 800b108:	3720      	adds	r7, #32
 800b10a:	46bd      	mov	sp, r7
 800b10c:	bd80      	pop	{r7, pc}

0800b10e <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800b10e:	b580      	push	{r7, lr}
 800b110:	b090      	sub	sp, #64	; 0x40
 800b112:	af00      	add	r7, sp, #0
 800b114:	60f8      	str	r0, [r7, #12]
 800b116:	60b9      	str	r1, [r7, #8]
 800b118:	603b      	str	r3, [r7, #0]
 800b11a:	4613      	mov	r3, r2
 800b11c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b11e:	e050      	b.n	800b1c2 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b120:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b122:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b126:	d04c      	beq.n	800b1c2 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800b128:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b12a:	2b00      	cmp	r3, #0
 800b12c:	d007      	beq.n	800b13e <UART_WaitOnFlagUntilTimeout+0x30>
 800b12e:	f7fd faf9 	bl	8008724 <HAL_GetTick>
 800b132:	4602      	mov	r2, r0
 800b134:	683b      	ldr	r3, [r7, #0]
 800b136:	1ad3      	subs	r3, r2, r3
 800b138:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b13a:	429a      	cmp	r2, r3
 800b13c:	d241      	bcs.n	800b1c2 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800b13e:	68fb      	ldr	r3, [r7, #12]
 800b140:	681b      	ldr	r3, [r3, #0]
 800b142:	330c      	adds	r3, #12
 800b144:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b146:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b148:	e853 3f00 	ldrex	r3, [r3]
 800b14c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800b14e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b150:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800b154:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b156:	68fb      	ldr	r3, [r7, #12]
 800b158:	681b      	ldr	r3, [r3, #0]
 800b15a:	330c      	adds	r3, #12
 800b15c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800b15e:	637a      	str	r2, [r7, #52]	; 0x34
 800b160:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b162:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800b164:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b166:	e841 2300 	strex	r3, r2, [r1]
 800b16a:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800b16c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b16e:	2b00      	cmp	r3, #0
 800b170:	d1e5      	bne.n	800b13e <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b172:	68fb      	ldr	r3, [r7, #12]
 800b174:	681b      	ldr	r3, [r3, #0]
 800b176:	3314      	adds	r3, #20
 800b178:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b17a:	697b      	ldr	r3, [r7, #20]
 800b17c:	e853 3f00 	ldrex	r3, [r3]
 800b180:	613b      	str	r3, [r7, #16]
   return(result);
 800b182:	693b      	ldr	r3, [r7, #16]
 800b184:	f023 0301 	bic.w	r3, r3, #1
 800b188:	63bb      	str	r3, [r7, #56]	; 0x38
 800b18a:	68fb      	ldr	r3, [r7, #12]
 800b18c:	681b      	ldr	r3, [r3, #0]
 800b18e:	3314      	adds	r3, #20
 800b190:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b192:	623a      	str	r2, [r7, #32]
 800b194:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b196:	69f9      	ldr	r1, [r7, #28]
 800b198:	6a3a      	ldr	r2, [r7, #32]
 800b19a:	e841 2300 	strex	r3, r2, [r1]
 800b19e:	61bb      	str	r3, [r7, #24]
   return(result);
 800b1a0:	69bb      	ldr	r3, [r7, #24]
 800b1a2:	2b00      	cmp	r3, #0
 800b1a4:	d1e5      	bne.n	800b172 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800b1a6:	68fb      	ldr	r3, [r7, #12]
 800b1a8:	2220      	movs	r2, #32
 800b1aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800b1ae:	68fb      	ldr	r3, [r7, #12]
 800b1b0:	2220      	movs	r2, #32
 800b1b2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800b1b6:	68fb      	ldr	r3, [r7, #12]
 800b1b8:	2200      	movs	r2, #0
 800b1ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800b1be:	2303      	movs	r3, #3
 800b1c0:	e00f      	b.n	800b1e2 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b1c2:	68fb      	ldr	r3, [r7, #12]
 800b1c4:	681b      	ldr	r3, [r3, #0]
 800b1c6:	681a      	ldr	r2, [r3, #0]
 800b1c8:	68bb      	ldr	r3, [r7, #8]
 800b1ca:	4013      	ands	r3, r2
 800b1cc:	68ba      	ldr	r2, [r7, #8]
 800b1ce:	429a      	cmp	r2, r3
 800b1d0:	bf0c      	ite	eq
 800b1d2:	2301      	moveq	r3, #1
 800b1d4:	2300      	movne	r3, #0
 800b1d6:	b2db      	uxtb	r3, r3
 800b1d8:	461a      	mov	r2, r3
 800b1da:	79fb      	ldrb	r3, [r7, #7]
 800b1dc:	429a      	cmp	r2, r3
 800b1de:	d09f      	beq.n	800b120 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800b1e0:	2300      	movs	r3, #0
}
 800b1e2:	4618      	mov	r0, r3
 800b1e4:	3740      	adds	r7, #64	; 0x40
 800b1e6:	46bd      	mov	sp, r7
 800b1e8:	bd80      	pop	{r7, pc}
	...

0800b1ec <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800b1ec:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800b1f0:	b0c0      	sub	sp, #256	; 0x100
 800b1f2:	af00      	add	r7, sp, #0
 800b1f4:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800b1f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b1fc:	681b      	ldr	r3, [r3, #0]
 800b1fe:	691b      	ldr	r3, [r3, #16]
 800b200:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800b204:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b208:	68d9      	ldr	r1, [r3, #12]
 800b20a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b20e:	681a      	ldr	r2, [r3, #0]
 800b210:	ea40 0301 	orr.w	r3, r0, r1
 800b214:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800b216:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b21a:	689a      	ldr	r2, [r3, #8]
 800b21c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b220:	691b      	ldr	r3, [r3, #16]
 800b222:	431a      	orrs	r2, r3
 800b224:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b228:	695b      	ldr	r3, [r3, #20]
 800b22a:	431a      	orrs	r2, r3
 800b22c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b230:	69db      	ldr	r3, [r3, #28]
 800b232:	4313      	orrs	r3, r2
 800b234:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800b238:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b23c:	681b      	ldr	r3, [r3, #0]
 800b23e:	68db      	ldr	r3, [r3, #12]
 800b240:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800b244:	f021 010c 	bic.w	r1, r1, #12
 800b248:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b24c:	681a      	ldr	r2, [r3, #0]
 800b24e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800b252:	430b      	orrs	r3, r1
 800b254:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800b256:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b25a:	681b      	ldr	r3, [r3, #0]
 800b25c:	695b      	ldr	r3, [r3, #20]
 800b25e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800b262:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b266:	6999      	ldr	r1, [r3, #24]
 800b268:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b26c:	681a      	ldr	r2, [r3, #0]
 800b26e:	ea40 0301 	orr.w	r3, r0, r1
 800b272:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800b274:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b278:	681a      	ldr	r2, [r3, #0]
 800b27a:	4b8f      	ldr	r3, [pc, #572]	; (800b4b8 <UART_SetConfig+0x2cc>)
 800b27c:	429a      	cmp	r2, r3
 800b27e:	d005      	beq.n	800b28c <UART_SetConfig+0xa0>
 800b280:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b284:	681a      	ldr	r2, [r3, #0]
 800b286:	4b8d      	ldr	r3, [pc, #564]	; (800b4bc <UART_SetConfig+0x2d0>)
 800b288:	429a      	cmp	r2, r3
 800b28a:	d104      	bne.n	800b296 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800b28c:	f7ff fb34 	bl	800a8f8 <HAL_RCC_GetPCLK2Freq>
 800b290:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800b294:	e003      	b.n	800b29e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800b296:	f7ff fb1b 	bl	800a8d0 <HAL_RCC_GetPCLK1Freq>
 800b29a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800b29e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b2a2:	69db      	ldr	r3, [r3, #28]
 800b2a4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b2a8:	f040 810c 	bne.w	800b4c4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800b2ac:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b2b0:	2200      	movs	r2, #0
 800b2b2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800b2b6:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800b2ba:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800b2be:	4622      	mov	r2, r4
 800b2c0:	462b      	mov	r3, r5
 800b2c2:	1891      	adds	r1, r2, r2
 800b2c4:	65b9      	str	r1, [r7, #88]	; 0x58
 800b2c6:	415b      	adcs	r3, r3
 800b2c8:	65fb      	str	r3, [r7, #92]	; 0x5c
 800b2ca:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800b2ce:	4621      	mov	r1, r4
 800b2d0:	eb12 0801 	adds.w	r8, r2, r1
 800b2d4:	4629      	mov	r1, r5
 800b2d6:	eb43 0901 	adc.w	r9, r3, r1
 800b2da:	f04f 0200 	mov.w	r2, #0
 800b2de:	f04f 0300 	mov.w	r3, #0
 800b2e2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800b2e6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800b2ea:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800b2ee:	4690      	mov	r8, r2
 800b2f0:	4699      	mov	r9, r3
 800b2f2:	4623      	mov	r3, r4
 800b2f4:	eb18 0303 	adds.w	r3, r8, r3
 800b2f8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800b2fc:	462b      	mov	r3, r5
 800b2fe:	eb49 0303 	adc.w	r3, r9, r3
 800b302:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800b306:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b30a:	685b      	ldr	r3, [r3, #4]
 800b30c:	2200      	movs	r2, #0
 800b30e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800b312:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800b316:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800b31a:	460b      	mov	r3, r1
 800b31c:	18db      	adds	r3, r3, r3
 800b31e:	653b      	str	r3, [r7, #80]	; 0x50
 800b320:	4613      	mov	r3, r2
 800b322:	eb42 0303 	adc.w	r3, r2, r3
 800b326:	657b      	str	r3, [r7, #84]	; 0x54
 800b328:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800b32c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800b330:	f7f5 f9ba 	bl	80006a8 <__aeabi_uldivmod>
 800b334:	4602      	mov	r2, r0
 800b336:	460b      	mov	r3, r1
 800b338:	4b61      	ldr	r3, [pc, #388]	; (800b4c0 <UART_SetConfig+0x2d4>)
 800b33a:	fba3 2302 	umull	r2, r3, r3, r2
 800b33e:	095b      	lsrs	r3, r3, #5
 800b340:	011c      	lsls	r4, r3, #4
 800b342:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b346:	2200      	movs	r2, #0
 800b348:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800b34c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800b350:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800b354:	4642      	mov	r2, r8
 800b356:	464b      	mov	r3, r9
 800b358:	1891      	adds	r1, r2, r2
 800b35a:	64b9      	str	r1, [r7, #72]	; 0x48
 800b35c:	415b      	adcs	r3, r3
 800b35e:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b360:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800b364:	4641      	mov	r1, r8
 800b366:	eb12 0a01 	adds.w	sl, r2, r1
 800b36a:	4649      	mov	r1, r9
 800b36c:	eb43 0b01 	adc.w	fp, r3, r1
 800b370:	f04f 0200 	mov.w	r2, #0
 800b374:	f04f 0300 	mov.w	r3, #0
 800b378:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800b37c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800b380:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800b384:	4692      	mov	sl, r2
 800b386:	469b      	mov	fp, r3
 800b388:	4643      	mov	r3, r8
 800b38a:	eb1a 0303 	adds.w	r3, sl, r3
 800b38e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800b392:	464b      	mov	r3, r9
 800b394:	eb4b 0303 	adc.w	r3, fp, r3
 800b398:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800b39c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b3a0:	685b      	ldr	r3, [r3, #4]
 800b3a2:	2200      	movs	r2, #0
 800b3a4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800b3a8:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800b3ac:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800b3b0:	460b      	mov	r3, r1
 800b3b2:	18db      	adds	r3, r3, r3
 800b3b4:	643b      	str	r3, [r7, #64]	; 0x40
 800b3b6:	4613      	mov	r3, r2
 800b3b8:	eb42 0303 	adc.w	r3, r2, r3
 800b3bc:	647b      	str	r3, [r7, #68]	; 0x44
 800b3be:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800b3c2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800b3c6:	f7f5 f96f 	bl	80006a8 <__aeabi_uldivmod>
 800b3ca:	4602      	mov	r2, r0
 800b3cc:	460b      	mov	r3, r1
 800b3ce:	4611      	mov	r1, r2
 800b3d0:	4b3b      	ldr	r3, [pc, #236]	; (800b4c0 <UART_SetConfig+0x2d4>)
 800b3d2:	fba3 2301 	umull	r2, r3, r3, r1
 800b3d6:	095b      	lsrs	r3, r3, #5
 800b3d8:	2264      	movs	r2, #100	; 0x64
 800b3da:	fb02 f303 	mul.w	r3, r2, r3
 800b3de:	1acb      	subs	r3, r1, r3
 800b3e0:	00db      	lsls	r3, r3, #3
 800b3e2:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800b3e6:	4b36      	ldr	r3, [pc, #216]	; (800b4c0 <UART_SetConfig+0x2d4>)
 800b3e8:	fba3 2302 	umull	r2, r3, r3, r2
 800b3ec:	095b      	lsrs	r3, r3, #5
 800b3ee:	005b      	lsls	r3, r3, #1
 800b3f0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800b3f4:	441c      	add	r4, r3
 800b3f6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b3fa:	2200      	movs	r2, #0
 800b3fc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800b400:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800b404:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800b408:	4642      	mov	r2, r8
 800b40a:	464b      	mov	r3, r9
 800b40c:	1891      	adds	r1, r2, r2
 800b40e:	63b9      	str	r1, [r7, #56]	; 0x38
 800b410:	415b      	adcs	r3, r3
 800b412:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b414:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800b418:	4641      	mov	r1, r8
 800b41a:	1851      	adds	r1, r2, r1
 800b41c:	6339      	str	r1, [r7, #48]	; 0x30
 800b41e:	4649      	mov	r1, r9
 800b420:	414b      	adcs	r3, r1
 800b422:	637b      	str	r3, [r7, #52]	; 0x34
 800b424:	f04f 0200 	mov.w	r2, #0
 800b428:	f04f 0300 	mov.w	r3, #0
 800b42c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800b430:	4659      	mov	r1, fp
 800b432:	00cb      	lsls	r3, r1, #3
 800b434:	4651      	mov	r1, sl
 800b436:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800b43a:	4651      	mov	r1, sl
 800b43c:	00ca      	lsls	r2, r1, #3
 800b43e:	4610      	mov	r0, r2
 800b440:	4619      	mov	r1, r3
 800b442:	4603      	mov	r3, r0
 800b444:	4642      	mov	r2, r8
 800b446:	189b      	adds	r3, r3, r2
 800b448:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800b44c:	464b      	mov	r3, r9
 800b44e:	460a      	mov	r2, r1
 800b450:	eb42 0303 	adc.w	r3, r2, r3
 800b454:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800b458:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b45c:	685b      	ldr	r3, [r3, #4]
 800b45e:	2200      	movs	r2, #0
 800b460:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800b464:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800b468:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800b46c:	460b      	mov	r3, r1
 800b46e:	18db      	adds	r3, r3, r3
 800b470:	62bb      	str	r3, [r7, #40]	; 0x28
 800b472:	4613      	mov	r3, r2
 800b474:	eb42 0303 	adc.w	r3, r2, r3
 800b478:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b47a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800b47e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800b482:	f7f5 f911 	bl	80006a8 <__aeabi_uldivmod>
 800b486:	4602      	mov	r2, r0
 800b488:	460b      	mov	r3, r1
 800b48a:	4b0d      	ldr	r3, [pc, #52]	; (800b4c0 <UART_SetConfig+0x2d4>)
 800b48c:	fba3 1302 	umull	r1, r3, r3, r2
 800b490:	095b      	lsrs	r3, r3, #5
 800b492:	2164      	movs	r1, #100	; 0x64
 800b494:	fb01 f303 	mul.w	r3, r1, r3
 800b498:	1ad3      	subs	r3, r2, r3
 800b49a:	00db      	lsls	r3, r3, #3
 800b49c:	3332      	adds	r3, #50	; 0x32
 800b49e:	4a08      	ldr	r2, [pc, #32]	; (800b4c0 <UART_SetConfig+0x2d4>)
 800b4a0:	fba2 2303 	umull	r2, r3, r2, r3
 800b4a4:	095b      	lsrs	r3, r3, #5
 800b4a6:	f003 0207 	and.w	r2, r3, #7
 800b4aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b4ae:	681b      	ldr	r3, [r3, #0]
 800b4b0:	4422      	add	r2, r4
 800b4b2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800b4b4:	e105      	b.n	800b6c2 <UART_SetConfig+0x4d6>
 800b4b6:	bf00      	nop
 800b4b8:	40011000 	.word	0x40011000
 800b4bc:	40011400 	.word	0x40011400
 800b4c0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800b4c4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b4c8:	2200      	movs	r2, #0
 800b4ca:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800b4ce:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800b4d2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800b4d6:	4642      	mov	r2, r8
 800b4d8:	464b      	mov	r3, r9
 800b4da:	1891      	adds	r1, r2, r2
 800b4dc:	6239      	str	r1, [r7, #32]
 800b4de:	415b      	adcs	r3, r3
 800b4e0:	627b      	str	r3, [r7, #36]	; 0x24
 800b4e2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800b4e6:	4641      	mov	r1, r8
 800b4e8:	1854      	adds	r4, r2, r1
 800b4ea:	4649      	mov	r1, r9
 800b4ec:	eb43 0501 	adc.w	r5, r3, r1
 800b4f0:	f04f 0200 	mov.w	r2, #0
 800b4f4:	f04f 0300 	mov.w	r3, #0
 800b4f8:	00eb      	lsls	r3, r5, #3
 800b4fa:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800b4fe:	00e2      	lsls	r2, r4, #3
 800b500:	4614      	mov	r4, r2
 800b502:	461d      	mov	r5, r3
 800b504:	4643      	mov	r3, r8
 800b506:	18e3      	adds	r3, r4, r3
 800b508:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800b50c:	464b      	mov	r3, r9
 800b50e:	eb45 0303 	adc.w	r3, r5, r3
 800b512:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800b516:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b51a:	685b      	ldr	r3, [r3, #4]
 800b51c:	2200      	movs	r2, #0
 800b51e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800b522:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800b526:	f04f 0200 	mov.w	r2, #0
 800b52a:	f04f 0300 	mov.w	r3, #0
 800b52e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800b532:	4629      	mov	r1, r5
 800b534:	008b      	lsls	r3, r1, #2
 800b536:	4621      	mov	r1, r4
 800b538:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800b53c:	4621      	mov	r1, r4
 800b53e:	008a      	lsls	r2, r1, #2
 800b540:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800b544:	f7f5 f8b0 	bl	80006a8 <__aeabi_uldivmod>
 800b548:	4602      	mov	r2, r0
 800b54a:	460b      	mov	r3, r1
 800b54c:	4b60      	ldr	r3, [pc, #384]	; (800b6d0 <UART_SetConfig+0x4e4>)
 800b54e:	fba3 2302 	umull	r2, r3, r3, r2
 800b552:	095b      	lsrs	r3, r3, #5
 800b554:	011c      	lsls	r4, r3, #4
 800b556:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b55a:	2200      	movs	r2, #0
 800b55c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800b560:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800b564:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800b568:	4642      	mov	r2, r8
 800b56a:	464b      	mov	r3, r9
 800b56c:	1891      	adds	r1, r2, r2
 800b56e:	61b9      	str	r1, [r7, #24]
 800b570:	415b      	adcs	r3, r3
 800b572:	61fb      	str	r3, [r7, #28]
 800b574:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800b578:	4641      	mov	r1, r8
 800b57a:	1851      	adds	r1, r2, r1
 800b57c:	6139      	str	r1, [r7, #16]
 800b57e:	4649      	mov	r1, r9
 800b580:	414b      	adcs	r3, r1
 800b582:	617b      	str	r3, [r7, #20]
 800b584:	f04f 0200 	mov.w	r2, #0
 800b588:	f04f 0300 	mov.w	r3, #0
 800b58c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800b590:	4659      	mov	r1, fp
 800b592:	00cb      	lsls	r3, r1, #3
 800b594:	4651      	mov	r1, sl
 800b596:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800b59a:	4651      	mov	r1, sl
 800b59c:	00ca      	lsls	r2, r1, #3
 800b59e:	4610      	mov	r0, r2
 800b5a0:	4619      	mov	r1, r3
 800b5a2:	4603      	mov	r3, r0
 800b5a4:	4642      	mov	r2, r8
 800b5a6:	189b      	adds	r3, r3, r2
 800b5a8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800b5ac:	464b      	mov	r3, r9
 800b5ae:	460a      	mov	r2, r1
 800b5b0:	eb42 0303 	adc.w	r3, r2, r3
 800b5b4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800b5b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b5bc:	685b      	ldr	r3, [r3, #4]
 800b5be:	2200      	movs	r2, #0
 800b5c0:	67bb      	str	r3, [r7, #120]	; 0x78
 800b5c2:	67fa      	str	r2, [r7, #124]	; 0x7c
 800b5c4:	f04f 0200 	mov.w	r2, #0
 800b5c8:	f04f 0300 	mov.w	r3, #0
 800b5cc:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800b5d0:	4649      	mov	r1, r9
 800b5d2:	008b      	lsls	r3, r1, #2
 800b5d4:	4641      	mov	r1, r8
 800b5d6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800b5da:	4641      	mov	r1, r8
 800b5dc:	008a      	lsls	r2, r1, #2
 800b5de:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800b5e2:	f7f5 f861 	bl	80006a8 <__aeabi_uldivmod>
 800b5e6:	4602      	mov	r2, r0
 800b5e8:	460b      	mov	r3, r1
 800b5ea:	4b39      	ldr	r3, [pc, #228]	; (800b6d0 <UART_SetConfig+0x4e4>)
 800b5ec:	fba3 1302 	umull	r1, r3, r3, r2
 800b5f0:	095b      	lsrs	r3, r3, #5
 800b5f2:	2164      	movs	r1, #100	; 0x64
 800b5f4:	fb01 f303 	mul.w	r3, r1, r3
 800b5f8:	1ad3      	subs	r3, r2, r3
 800b5fa:	011b      	lsls	r3, r3, #4
 800b5fc:	3332      	adds	r3, #50	; 0x32
 800b5fe:	4a34      	ldr	r2, [pc, #208]	; (800b6d0 <UART_SetConfig+0x4e4>)
 800b600:	fba2 2303 	umull	r2, r3, r2, r3
 800b604:	095b      	lsrs	r3, r3, #5
 800b606:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800b60a:	441c      	add	r4, r3
 800b60c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b610:	2200      	movs	r2, #0
 800b612:	673b      	str	r3, [r7, #112]	; 0x70
 800b614:	677a      	str	r2, [r7, #116]	; 0x74
 800b616:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800b61a:	4642      	mov	r2, r8
 800b61c:	464b      	mov	r3, r9
 800b61e:	1891      	adds	r1, r2, r2
 800b620:	60b9      	str	r1, [r7, #8]
 800b622:	415b      	adcs	r3, r3
 800b624:	60fb      	str	r3, [r7, #12]
 800b626:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800b62a:	4641      	mov	r1, r8
 800b62c:	1851      	adds	r1, r2, r1
 800b62e:	6039      	str	r1, [r7, #0]
 800b630:	4649      	mov	r1, r9
 800b632:	414b      	adcs	r3, r1
 800b634:	607b      	str	r3, [r7, #4]
 800b636:	f04f 0200 	mov.w	r2, #0
 800b63a:	f04f 0300 	mov.w	r3, #0
 800b63e:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800b642:	4659      	mov	r1, fp
 800b644:	00cb      	lsls	r3, r1, #3
 800b646:	4651      	mov	r1, sl
 800b648:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800b64c:	4651      	mov	r1, sl
 800b64e:	00ca      	lsls	r2, r1, #3
 800b650:	4610      	mov	r0, r2
 800b652:	4619      	mov	r1, r3
 800b654:	4603      	mov	r3, r0
 800b656:	4642      	mov	r2, r8
 800b658:	189b      	adds	r3, r3, r2
 800b65a:	66bb      	str	r3, [r7, #104]	; 0x68
 800b65c:	464b      	mov	r3, r9
 800b65e:	460a      	mov	r2, r1
 800b660:	eb42 0303 	adc.w	r3, r2, r3
 800b664:	66fb      	str	r3, [r7, #108]	; 0x6c
 800b666:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b66a:	685b      	ldr	r3, [r3, #4]
 800b66c:	2200      	movs	r2, #0
 800b66e:	663b      	str	r3, [r7, #96]	; 0x60
 800b670:	667a      	str	r2, [r7, #100]	; 0x64
 800b672:	f04f 0200 	mov.w	r2, #0
 800b676:	f04f 0300 	mov.w	r3, #0
 800b67a:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800b67e:	4649      	mov	r1, r9
 800b680:	008b      	lsls	r3, r1, #2
 800b682:	4641      	mov	r1, r8
 800b684:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800b688:	4641      	mov	r1, r8
 800b68a:	008a      	lsls	r2, r1, #2
 800b68c:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800b690:	f7f5 f80a 	bl	80006a8 <__aeabi_uldivmod>
 800b694:	4602      	mov	r2, r0
 800b696:	460b      	mov	r3, r1
 800b698:	4b0d      	ldr	r3, [pc, #52]	; (800b6d0 <UART_SetConfig+0x4e4>)
 800b69a:	fba3 1302 	umull	r1, r3, r3, r2
 800b69e:	095b      	lsrs	r3, r3, #5
 800b6a0:	2164      	movs	r1, #100	; 0x64
 800b6a2:	fb01 f303 	mul.w	r3, r1, r3
 800b6a6:	1ad3      	subs	r3, r2, r3
 800b6a8:	011b      	lsls	r3, r3, #4
 800b6aa:	3332      	adds	r3, #50	; 0x32
 800b6ac:	4a08      	ldr	r2, [pc, #32]	; (800b6d0 <UART_SetConfig+0x4e4>)
 800b6ae:	fba2 2303 	umull	r2, r3, r2, r3
 800b6b2:	095b      	lsrs	r3, r3, #5
 800b6b4:	f003 020f 	and.w	r2, r3, #15
 800b6b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b6bc:	681b      	ldr	r3, [r3, #0]
 800b6be:	4422      	add	r2, r4
 800b6c0:	609a      	str	r2, [r3, #8]
}
 800b6c2:	bf00      	nop
 800b6c4:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800b6c8:	46bd      	mov	sp, r7
 800b6ca:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800b6ce:	bf00      	nop
 800b6d0:	51eb851f 	.word	0x51eb851f

0800b6d4 <aci_gap_init_IDB05A1>:

#define MIN(a,b)            ((a) < (b) )? (a) : (b)
#define MAX(a,b)            ((a) > (b) )? (a) : (b)

tBleStatus aci_gap_init_IDB05A1(uint8_t role, uint8_t privacy_enabled, uint8_t device_name_char_len, uint16_t* service_handle, uint16_t* dev_name_char_handle, uint16_t* appearance_char_handle)
{
 800b6d4:	b580      	push	{r7, lr}
 800b6d6:	b08c      	sub	sp, #48	; 0x30
 800b6d8:	af00      	add	r7, sp, #0
 800b6da:	603b      	str	r3, [r7, #0]
 800b6dc:	4603      	mov	r3, r0
 800b6de:	71fb      	strb	r3, [r7, #7]
 800b6e0:	460b      	mov	r3, r1
 800b6e2:	71bb      	strb	r3, [r7, #6]
 800b6e4:	4613      	mov	r3, r2
 800b6e6:	717b      	strb	r3, [r7, #5]
  struct hci_request rq;
  gap_init_cp_IDB05A1 cp;
  gap_init_rp resp;
 
  cp.role = role;
 800b6e8:	79fb      	ldrb	r3, [r7, #7]
 800b6ea:	753b      	strb	r3, [r7, #20]
  cp.privacy_enabled = privacy_enabled;
 800b6ec:	79bb      	ldrb	r3, [r7, #6]
 800b6ee:	757b      	strb	r3, [r7, #21]
  cp.device_name_char_len = device_name_char_len;
 800b6f0:	797b      	ldrb	r3, [r7, #5]
 800b6f2:	75bb      	strb	r3, [r7, #22]
    
  BLUENRG_memset(&resp, 0, sizeof(resp));
 800b6f4:	f107 030c 	add.w	r3, r7, #12
 800b6f8:	2207      	movs	r2, #7
 800b6fa:	2100      	movs	r1, #0
 800b6fc:	4618      	mov	r0, r3
 800b6fe:	f001 f99f 	bl	800ca40 <memset>
  
  BLUENRG_memset(&rq, 0, sizeof(rq));
 800b702:	f107 0318 	add.w	r3, r7, #24
 800b706:	2218      	movs	r2, #24
 800b708:	2100      	movs	r1, #0
 800b70a:	4618      	mov	r0, r3
 800b70c:	f001 f998 	bl	800ca40 <memset>
  rq.ogf = OGF_VENDOR_CMD;
 800b710:	233f      	movs	r3, #63	; 0x3f
 800b712:	833b      	strh	r3, [r7, #24]
  rq.ocf = OCF_GAP_INIT;
 800b714:	238a      	movs	r3, #138	; 0x8a
 800b716:	837b      	strh	r3, [r7, #26]
  rq.cparam = &cp;
 800b718:	f107 0314 	add.w	r3, r7, #20
 800b71c:	623b      	str	r3, [r7, #32]
  rq.clen = sizeof(cp);
 800b71e:	2303      	movs	r3, #3
 800b720:	627b      	str	r3, [r7, #36]	; 0x24
  rq.rparam = &resp;
 800b722:	f107 030c 	add.w	r3, r7, #12
 800b726:	62bb      	str	r3, [r7, #40]	; 0x28
  rq.rlen = GAP_INIT_RP_SIZE;
 800b728:	2307      	movs	r3, #7
 800b72a:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  if (hci_send_req(&rq, FALSE) < 0)
 800b72c:	f107 0318 	add.w	r3, r7, #24
 800b730:	2100      	movs	r1, #0
 800b732:	4618      	mov	r0, r3
 800b734:	f000 fea2 	bl	800c47c <hci_send_req>
 800b738:	4603      	mov	r3, r0
 800b73a:	2b00      	cmp	r3, #0
 800b73c:	da01      	bge.n	800b742 <aci_gap_init_IDB05A1+0x6e>
    return BLE_STATUS_TIMEOUT;
 800b73e:	23ff      	movs	r3, #255	; 0xff
 800b740:	e014      	b.n	800b76c <aci_gap_init_IDB05A1+0x98>
  
  if (resp.status) {
 800b742:	7b3b      	ldrb	r3, [r7, #12]
 800b744:	2b00      	cmp	r3, #0
 800b746:	d001      	beq.n	800b74c <aci_gap_init_IDB05A1+0x78>
    return resp.status;
 800b748:	7b3b      	ldrb	r3, [r7, #12]
 800b74a:	e00f      	b.n	800b76c <aci_gap_init_IDB05A1+0x98>
  }
  
  *service_handle = btohs(resp.service_handle);
 800b74c:	f8b7 300d 	ldrh.w	r3, [r7, #13]
 800b750:	b29a      	uxth	r2, r3
 800b752:	683b      	ldr	r3, [r7, #0]
 800b754:	801a      	strh	r2, [r3, #0]
  *dev_name_char_handle = btohs(resp.dev_name_char_handle);
 800b756:	f8b7 300f 	ldrh.w	r3, [r7, #15]
 800b75a:	b29a      	uxth	r2, r3
 800b75c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b75e:	801a      	strh	r2, [r3, #0]
  *appearance_char_handle = btohs(resp.appearance_char_handle);
 800b760:	f8b7 3011 	ldrh.w	r3, [r7, #17]
 800b764:	b29a      	uxth	r2, r3
 800b766:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b768:	801a      	strh	r2, [r3, #0]
  
  return 0;
 800b76a:	2300      	movs	r3, #0
}
 800b76c:	4618      	mov	r0, r3
 800b76e:	3730      	adds	r7, #48	; 0x30
 800b770:	46bd      	mov	sp, r7
 800b772:	bd80      	pop	{r7, pc}

0800b774 <aci_gap_init_IDB04A1>:

tBleStatus aci_gap_init_IDB04A1(uint8_t role, uint16_t* service_handle, uint16_t* dev_name_char_handle, uint16_t* appearance_char_handle)
{
 800b774:	b580      	push	{r7, lr}
 800b776:	b08e      	sub	sp, #56	; 0x38
 800b778:	af00      	add	r7, sp, #0
 800b77a:	60b9      	str	r1, [r7, #8]
 800b77c:	607a      	str	r2, [r7, #4]
 800b77e:	603b      	str	r3, [r7, #0]
 800b780:	4603      	mov	r3, r0
 800b782:	73fb      	strb	r3, [r7, #15]
  struct hci_request rq;
  gap_init_cp_IDB04A1 cp;
  gap_init_rp resp;

  cp.role = role;
 800b784:	7bfb      	ldrb	r3, [r7, #15]
 800b786:	773b      	strb	r3, [r7, #28]
    
  BLUENRG_memset(&resp, 0, sizeof(resp));
 800b788:	f107 0314 	add.w	r3, r7, #20
 800b78c:	2207      	movs	r2, #7
 800b78e:	2100      	movs	r1, #0
 800b790:	4618      	mov	r0, r3
 800b792:	f001 f955 	bl	800ca40 <memset>
  
  BLUENRG_memset(&rq, 0, sizeof(rq));
 800b796:	f107 0320 	add.w	r3, r7, #32
 800b79a:	2218      	movs	r2, #24
 800b79c:	2100      	movs	r1, #0
 800b79e:	4618      	mov	r0, r3
 800b7a0:	f001 f94e 	bl	800ca40 <memset>
  rq.ogf = OGF_VENDOR_CMD;
 800b7a4:	233f      	movs	r3, #63	; 0x3f
 800b7a6:	843b      	strh	r3, [r7, #32]
  rq.ocf = OCF_GAP_INIT;
 800b7a8:	238a      	movs	r3, #138	; 0x8a
 800b7aa:	847b      	strh	r3, [r7, #34]	; 0x22
  rq.cparam = &cp;
 800b7ac:	f107 031c 	add.w	r3, r7, #28
 800b7b0:	62bb      	str	r3, [r7, #40]	; 0x28
  rq.clen = sizeof(cp);
 800b7b2:	2301      	movs	r3, #1
 800b7b4:	62fb      	str	r3, [r7, #44]	; 0x2c
  rq.rparam = &resp;
 800b7b6:	f107 0314 	add.w	r3, r7, #20
 800b7ba:	633b      	str	r3, [r7, #48]	; 0x30
  rq.rlen = GAP_INIT_RP_SIZE;
 800b7bc:	2307      	movs	r3, #7
 800b7be:	637b      	str	r3, [r7, #52]	; 0x34
  
  if (hci_send_req(&rq, FALSE) < 0)
 800b7c0:	f107 0320 	add.w	r3, r7, #32
 800b7c4:	2100      	movs	r1, #0
 800b7c6:	4618      	mov	r0, r3
 800b7c8:	f000 fe58 	bl	800c47c <hci_send_req>
 800b7cc:	4603      	mov	r3, r0
 800b7ce:	2b00      	cmp	r3, #0
 800b7d0:	da01      	bge.n	800b7d6 <aci_gap_init_IDB04A1+0x62>
    return BLE_STATUS_TIMEOUT;
 800b7d2:	23ff      	movs	r3, #255	; 0xff
 800b7d4:	e014      	b.n	800b800 <aci_gap_init_IDB04A1+0x8c>
  
  if (resp.status) {
 800b7d6:	7d3b      	ldrb	r3, [r7, #20]
 800b7d8:	2b00      	cmp	r3, #0
 800b7da:	d001      	beq.n	800b7e0 <aci_gap_init_IDB04A1+0x6c>
    return resp.status;
 800b7dc:	7d3b      	ldrb	r3, [r7, #20]
 800b7de:	e00f      	b.n	800b800 <aci_gap_init_IDB04A1+0x8c>
  }
  
  *service_handle = btohs(resp.service_handle);
 800b7e0:	f8b7 3015 	ldrh.w	r3, [r7, #21]
 800b7e4:	b29a      	uxth	r2, r3
 800b7e6:	68bb      	ldr	r3, [r7, #8]
 800b7e8:	801a      	strh	r2, [r3, #0]
  *dev_name_char_handle = btohs(resp.dev_name_char_handle);
 800b7ea:	f8b7 3017 	ldrh.w	r3, [r7, #23]
 800b7ee:	b29a      	uxth	r2, r3
 800b7f0:	687b      	ldr	r3, [r7, #4]
 800b7f2:	801a      	strh	r2, [r3, #0]
  *appearance_char_handle = btohs(resp.appearance_char_handle);
 800b7f4:	f8b7 3019 	ldrh.w	r3, [r7, #25]
 800b7f8:	b29a      	uxth	r2, r3
 800b7fa:	683b      	ldr	r3, [r7, #0]
 800b7fc:	801a      	strh	r2, [r3, #0]
  
  return 0;
 800b7fe:	2300      	movs	r3, #0
}
 800b800:	4618      	mov	r0, r3
 800b802:	3738      	adds	r7, #56	; 0x38
 800b804:	46bd      	mov	sp, r7
 800b806:	bd80      	pop	{r7, pc}

0800b808 <aci_gap_set_discoverable>:

tBleStatus aci_gap_set_discoverable(uint8_t AdvType, uint16_t AdvIntervMin, uint16_t AdvIntervMax,
                             uint8_t OwnAddrType, uint8_t AdvFilterPolicy, uint8_t LocalNameLen,
                             const char *LocalName, uint8_t ServiceUUIDLen, uint8_t* ServiceUUIDList,
                             uint16_t SlaveConnIntervMin, uint16_t SlaveConnIntervMax)
{
 800b808:	b590      	push	{r4, r7, lr}
 800b80a:	b095      	sub	sp, #84	; 0x54
 800b80c:	af00      	add	r7, sp, #0
 800b80e:	4604      	mov	r4, r0
 800b810:	4608      	mov	r0, r1
 800b812:	4611      	mov	r1, r2
 800b814:	461a      	mov	r2, r3
 800b816:	4623      	mov	r3, r4
 800b818:	71fb      	strb	r3, [r7, #7]
 800b81a:	4603      	mov	r3, r0
 800b81c:	80bb      	strh	r3, [r7, #4]
 800b81e:	460b      	mov	r3, r1
 800b820:	807b      	strh	r3, [r7, #2]
 800b822:	4613      	mov	r3, r2
 800b824:	71bb      	strb	r3, [r7, #6]
  struct hci_request rq;
  uint8_t status;    
  uint8_t buffer[40];
  uint8_t indx = 0;
 800b826:	2300      	movs	r3, #0
 800b828:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  
  if ((LocalNameLen+ServiceUUIDLen+14) > sizeof(buffer))
 800b82c:	f897 2064 	ldrb.w	r2, [r7, #100]	; 0x64
 800b830:	f897 306c 	ldrb.w	r3, [r7, #108]	; 0x6c
 800b834:	4413      	add	r3, r2
 800b836:	330e      	adds	r3, #14
 800b838:	2b28      	cmp	r3, #40	; 0x28
 800b83a:	d901      	bls.n	800b840 <aci_gap_set_discoverable+0x38>
    return BLE_STATUS_INVALID_PARAMS;
 800b83c:	2342      	movs	r3, #66	; 0x42
 800b83e:	e0c9      	b.n	800b9d4 <aci_gap_set_discoverable+0x1cc>

  buffer[indx] = AdvType;
 800b840:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800b844:	3350      	adds	r3, #80	; 0x50
 800b846:	443b      	add	r3, r7
 800b848:	79fa      	ldrb	r2, [r7, #7]
 800b84a:	f803 2c48 	strb.w	r2, [r3, #-72]
  indx++;
 800b84e:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800b852:	3301      	adds	r3, #1
 800b854:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  
  AdvIntervMin = htobs(AdvIntervMin);
 800b858:	88bb      	ldrh	r3, [r7, #4]
 800b85a:	80bb      	strh	r3, [r7, #4]
  BLUENRG_memcpy(buffer + indx, &AdvIntervMin, 2);
 800b85c:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800b860:	f107 0208 	add.w	r2, r7, #8
 800b864:	4413      	add	r3, r2
 800b866:	88ba      	ldrh	r2, [r7, #4]
 800b868:	801a      	strh	r2, [r3, #0]
  indx +=  2;
 800b86a:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800b86e:	3302      	adds	r3, #2
 800b870:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
    
  AdvIntervMax = htobs(AdvIntervMax);
 800b874:	887b      	ldrh	r3, [r7, #2]
 800b876:	807b      	strh	r3, [r7, #2]
  BLUENRG_memcpy(buffer + indx, &AdvIntervMax, 2);
 800b878:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800b87c:	f107 0208 	add.w	r2, r7, #8
 800b880:	4413      	add	r3, r2
 800b882:	887a      	ldrh	r2, [r7, #2]
 800b884:	801a      	strh	r2, [r3, #0]
  indx +=  2;
 800b886:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800b88a:	3302      	adds	r3, #2
 800b88c:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
    
  buffer[indx] = OwnAddrType;
 800b890:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800b894:	3350      	adds	r3, #80	; 0x50
 800b896:	443b      	add	r3, r7
 800b898:	79ba      	ldrb	r2, [r7, #6]
 800b89a:	f803 2c48 	strb.w	r2, [r3, #-72]
  indx++;
 800b89e:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800b8a2:	3301      	adds	r3, #1
 800b8a4:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
    
  buffer[indx] = AdvFilterPolicy;
 800b8a8:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800b8ac:	3350      	adds	r3, #80	; 0x50
 800b8ae:	443b      	add	r3, r7
 800b8b0:	f897 2060 	ldrb.w	r2, [r7, #96]	; 0x60
 800b8b4:	f803 2c48 	strb.w	r2, [r3, #-72]
  indx++;
 800b8b8:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800b8bc:	3301      	adds	r3, #1
 800b8be:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
    
  buffer[indx] = LocalNameLen;
 800b8c2:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800b8c6:	3350      	adds	r3, #80	; 0x50
 800b8c8:	443b      	add	r3, r7
 800b8ca:	f897 2064 	ldrb.w	r2, [r7, #100]	; 0x64
 800b8ce:	f803 2c48 	strb.w	r2, [r3, #-72]
  indx++;
 800b8d2:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800b8d6:	3301      	adds	r3, #1
 800b8d8:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
    
  BLUENRG_memcpy(buffer + indx, LocalName, LocalNameLen);
 800b8dc:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800b8e0:	f107 0208 	add.w	r2, r7, #8
 800b8e4:	4413      	add	r3, r2
 800b8e6:	f897 2064 	ldrb.w	r2, [r7, #100]	; 0x64
 800b8ea:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800b8ec:	4618      	mov	r0, r3
 800b8ee:	f001 f899 	bl	800ca24 <memcpy>
  indx +=  LocalNameLen;
 800b8f2:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 800b8f6:	f897 3064 	ldrb.w	r3, [r7, #100]	; 0x64
 800b8fa:	4413      	add	r3, r2
 800b8fc:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  
  buffer[indx] = ServiceUUIDLen;
 800b900:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800b904:	3350      	adds	r3, #80	; 0x50
 800b906:	443b      	add	r3, r7
 800b908:	f897 206c 	ldrb.w	r2, [r7, #108]	; 0x6c
 800b90c:	f803 2c48 	strb.w	r2, [r3, #-72]
  indx++;
 800b910:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800b914:	3301      	adds	r3, #1
 800b916:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

  BLUENRG_memcpy(buffer + indx, ServiceUUIDList, ServiceUUIDLen);
 800b91a:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800b91e:	f107 0208 	add.w	r2, r7, #8
 800b922:	4413      	add	r3, r2
 800b924:	f897 206c 	ldrb.w	r2, [r7, #108]	; 0x6c
 800b928:	6f39      	ldr	r1, [r7, #112]	; 0x70
 800b92a:	4618      	mov	r0, r3
 800b92c:	f001 f87a 	bl	800ca24 <memcpy>
  indx +=  ServiceUUIDLen;  
 800b930:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 800b934:	f897 306c 	ldrb.w	r3, [r7, #108]	; 0x6c
 800b938:	4413      	add	r3, r2
 800b93a:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

  SlaveConnIntervMin = htobs(SlaveConnIntervMin);
 800b93e:	f8b7 3074 	ldrh.w	r3, [r7, #116]	; 0x74
 800b942:	f8a7 3074 	strh.w	r3, [r7, #116]	; 0x74
  BLUENRG_memcpy(buffer + indx, &SlaveConnIntervMin, 2);
 800b946:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800b94a:	f107 0208 	add.w	r2, r7, #8
 800b94e:	4413      	add	r3, r2
 800b950:	f8b7 2074 	ldrh.w	r2, [r7, #116]	; 0x74
 800b954:	801a      	strh	r2, [r3, #0]
  indx +=  2;
 800b956:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800b95a:	3302      	adds	r3, #2
 800b95c:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  
  SlaveConnIntervMax = htobs(SlaveConnIntervMax);
 800b960:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 800b964:	f8a7 3078 	strh.w	r3, [r7, #120]	; 0x78
  BLUENRG_memcpy(buffer + indx, &SlaveConnIntervMax, 2);
 800b968:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800b96c:	f107 0208 	add.w	r2, r7, #8
 800b970:	4413      	add	r3, r2
 800b972:	f8b7 2078 	ldrh.w	r2, [r7, #120]	; 0x78
 800b976:	801a      	strh	r2, [r3, #0]
  indx +=  2;    
 800b978:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800b97c:	3302      	adds	r3, #2
 800b97e:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

  BLUENRG_memset(&rq, 0, sizeof(rq));
 800b982:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800b986:	2218      	movs	r2, #24
 800b988:	2100      	movs	r1, #0
 800b98a:	4618      	mov	r0, r3
 800b98c:	f001 f858 	bl	800ca40 <memset>
  rq.ogf = OGF_VENDOR_CMD;
 800b990:	233f      	movs	r3, #63	; 0x3f
 800b992:	86bb      	strh	r3, [r7, #52]	; 0x34
  rq.ocf = OCF_GAP_SET_DISCOVERABLE;
 800b994:	2383      	movs	r3, #131	; 0x83
 800b996:	86fb      	strh	r3, [r7, #54]	; 0x36
  rq.cparam = (void *)buffer;
 800b998:	f107 0308 	add.w	r3, r7, #8
 800b99c:	63fb      	str	r3, [r7, #60]	; 0x3c
  rq.clen = indx;
 800b99e:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800b9a2:	643b      	str	r3, [r7, #64]	; 0x40
  rq.rparam = &status;
 800b9a4:	f107 0333 	add.w	r3, r7, #51	; 0x33
 800b9a8:	647b      	str	r3, [r7, #68]	; 0x44
  rq.rlen = 1;
 800b9aa:	2301      	movs	r3, #1
 800b9ac:	64bb      	str	r3, [r7, #72]	; 0x48

  if (hci_send_req(&rq, FALSE) < 0)
 800b9ae:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800b9b2:	2100      	movs	r1, #0
 800b9b4:	4618      	mov	r0, r3
 800b9b6:	f000 fd61 	bl	800c47c <hci_send_req>
 800b9ba:	4603      	mov	r3, r0
 800b9bc:	2b00      	cmp	r3, #0
 800b9be:	da01      	bge.n	800b9c4 <aci_gap_set_discoverable+0x1bc>
    return BLE_STATUS_TIMEOUT;
 800b9c0:	23ff      	movs	r3, #255	; 0xff
 800b9c2:	e007      	b.n	800b9d4 <aci_gap_set_discoverable+0x1cc>

  if (status) {
 800b9c4:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800b9c8:	2b00      	cmp	r3, #0
 800b9ca:	d002      	beq.n	800b9d2 <aci_gap_set_discoverable+0x1ca>
    return status;
 800b9cc:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800b9d0:	e000      	b.n	800b9d4 <aci_gap_set_discoverable+0x1cc>
  }

  return 0;
 800b9d2:	2300      	movs	r3, #0
}
 800b9d4:	4618      	mov	r0, r3
 800b9d6:	3754      	adds	r7, #84	; 0x54
 800b9d8:	46bd      	mov	sp, r7
 800b9da:	bd90      	pop	{r4, r7, pc}

0800b9dc <aci_gap_set_auth_requirement>:
                                        uint8_t min_encryption_key_size,
                                        uint8_t max_encryption_key_size,
                                        uint8_t use_fixed_pin,
                                        uint32_t fixed_pin,
                                        uint8_t bonding_mode)
{
 800b9dc:	b590      	push	{r4, r7, lr}
 800b9de:	b091      	sub	sp, #68	; 0x44
 800b9e0:	af00      	add	r7, sp, #0
 800b9e2:	603a      	str	r2, [r7, #0]
 800b9e4:	461a      	mov	r2, r3
 800b9e6:	4603      	mov	r3, r0
 800b9e8:	71fb      	strb	r3, [r7, #7]
 800b9ea:	460b      	mov	r3, r1
 800b9ec:	71bb      	strb	r3, [r7, #6]
 800b9ee:	4613      	mov	r3, r2
 800b9f0:	717b      	strb	r3, [r7, #5]
  struct hci_request rq;
  gap_set_auth_requirement_cp cp;    
  uint8_t status;
    
  cp.mitm_mode = mitm_mode;
 800b9f2:	79fb      	ldrb	r3, [r7, #7]
 800b9f4:	733b      	strb	r3, [r7, #12]
  cp.oob_enable = oob_enable;
 800b9f6:	79bb      	ldrb	r3, [r7, #6]
 800b9f8:	737b      	strb	r3, [r7, #13]
  /* FIX: check on oob_enable introduced to fix issue in projects for Cortex-M33 */
  if (oob_enable) {
 800b9fa:	79bb      	ldrb	r3, [r7, #6]
 800b9fc:	2b00      	cmp	r3, #0
 800b9fe:	d00a      	beq.n	800ba16 <aci_gap_set_auth_requirement+0x3a>
    BLUENRG_memcpy(cp.oob_data, oob_data, 16);
 800ba00:	683a      	ldr	r2, [r7, #0]
 800ba02:	f107 030e 	add.w	r3, r7, #14
 800ba06:	6814      	ldr	r4, [r2, #0]
 800ba08:	6850      	ldr	r0, [r2, #4]
 800ba0a:	6891      	ldr	r1, [r2, #8]
 800ba0c:	68d2      	ldr	r2, [r2, #12]
 800ba0e:	601c      	str	r4, [r3, #0]
 800ba10:	6058      	str	r0, [r3, #4]
 800ba12:	6099      	str	r1, [r3, #8]
 800ba14:	60da      	str	r2, [r3, #12]
  }
  cp.min_encryption_key_size = min_encryption_key_size;
 800ba16:	797b      	ldrb	r3, [r7, #5]
 800ba18:	77bb      	strb	r3, [r7, #30]
  cp.max_encryption_key_size = max_encryption_key_size;
 800ba1a:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
 800ba1e:	77fb      	strb	r3, [r7, #31]
  cp.use_fixed_pin = use_fixed_pin;
 800ba20:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 800ba24:	f887 3020 	strb.w	r3, [r7, #32]
  cp.fixed_pin = htobl(fixed_pin);
 800ba28:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800ba2a:	f8c7 3021 	str.w	r3, [r7, #33]	; 0x21
  cp.bonding_mode = bonding_mode;
 800ba2e:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 800ba32:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

  BLUENRG_memset(&rq, 0, sizeof(rq));
 800ba36:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800ba3a:	2218      	movs	r2, #24
 800ba3c:	2100      	movs	r1, #0
 800ba3e:	4618      	mov	r0, r3
 800ba40:	f000 fffe 	bl	800ca40 <memset>
  rq.ogf = OGF_VENDOR_CMD;
 800ba44:	233f      	movs	r3, #63	; 0x3f
 800ba46:	853b      	strh	r3, [r7, #40]	; 0x28
  rq.ocf = OCF_GAP_SET_AUTH_REQUIREMENT;
 800ba48:	2386      	movs	r3, #134	; 0x86
 800ba4a:	857b      	strh	r3, [r7, #42]	; 0x2a
  rq.cparam = &cp;
 800ba4c:	f107 030c 	add.w	r3, r7, #12
 800ba50:	633b      	str	r3, [r7, #48]	; 0x30
  rq.clen = sizeof(cp);
 800ba52:	231a      	movs	r3, #26
 800ba54:	637b      	str	r3, [r7, #52]	; 0x34
  rq.rparam = &status;
 800ba56:	f107 030b 	add.w	r3, r7, #11
 800ba5a:	63bb      	str	r3, [r7, #56]	; 0x38
  rq.rlen = 1;
 800ba5c:	2301      	movs	r3, #1
 800ba5e:	63fb      	str	r3, [r7, #60]	; 0x3c

  if (hci_send_req(&rq, FALSE) < 0)
 800ba60:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800ba64:	2100      	movs	r1, #0
 800ba66:	4618      	mov	r0, r3
 800ba68:	f000 fd08 	bl	800c47c <hci_send_req>
 800ba6c:	4603      	mov	r3, r0
 800ba6e:	2b00      	cmp	r3, #0
 800ba70:	da01      	bge.n	800ba76 <aci_gap_set_auth_requirement+0x9a>
    return BLE_STATUS_TIMEOUT;
 800ba72:	23ff      	movs	r3, #255	; 0xff
 800ba74:	e005      	b.n	800ba82 <aci_gap_set_auth_requirement+0xa6>

  if (status) {
 800ba76:	7afb      	ldrb	r3, [r7, #11]
 800ba78:	2b00      	cmp	r3, #0
 800ba7a:	d001      	beq.n	800ba80 <aci_gap_set_auth_requirement+0xa4>
    return status;
 800ba7c:	7afb      	ldrb	r3, [r7, #11]
 800ba7e:	e000      	b.n	800ba82 <aci_gap_set_auth_requirement+0xa6>
  }
    
  return 0;
 800ba80:	2300      	movs	r3, #0
}
 800ba82:	4618      	mov	r0, r3
 800ba84:	3744      	adds	r7, #68	; 0x44
 800ba86:	46bd      	mov	sp, r7
 800ba88:	bd90      	pop	{r4, r7, pc}

0800ba8a <aci_gap_update_adv_data>:
  return status;

}

tBleStatus aci_gap_update_adv_data(uint8_t AdvLen, const uint8_t *AdvData)
{
 800ba8a:	b580      	push	{r7, lr}
 800ba8c:	b092      	sub	sp, #72	; 0x48
 800ba8e:	af00      	add	r7, sp, #0
 800ba90:	4603      	mov	r3, r0
 800ba92:	6039      	str	r1, [r7, #0]
 800ba94:	71fb      	strb	r3, [r7, #7]
  struct hci_request rq;
  uint8_t status;
  uint8_t buffer[32];
  uint8_t indx = 0;
 800ba96:	2300      	movs	r3, #0
 800ba98:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  if (AdvLen > (sizeof(buffer)-1))
 800ba9c:	79fb      	ldrb	r3, [r7, #7]
 800ba9e:	2b1f      	cmp	r3, #31
 800baa0:	d901      	bls.n	800baa6 <aci_gap_update_adv_data+0x1c>
    return BLE_STATUS_INVALID_PARAMS;
 800baa2:	2342      	movs	r3, #66	; 0x42
 800baa4:	e03e      	b.n	800bb24 <aci_gap_update_adv_data+0x9a>

  buffer[indx] = AdvLen;
 800baa6:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800baaa:	3348      	adds	r3, #72	; 0x48
 800baac:	443b      	add	r3, r7
 800baae:	79fa      	ldrb	r2, [r7, #7]
 800bab0:	f803 2c40 	strb.w	r2, [r3, #-64]
  indx++;
 800bab4:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800bab8:	3301      	adds	r3, #1
 800baba:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  BLUENRG_memcpy(buffer + indx, AdvData, AdvLen);
 800babe:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800bac2:	f107 0208 	add.w	r2, r7, #8
 800bac6:	4413      	add	r3, r2
 800bac8:	79fa      	ldrb	r2, [r7, #7]
 800baca:	6839      	ldr	r1, [r7, #0]
 800bacc:	4618      	mov	r0, r3
 800bace:	f000 ffa9 	bl	800ca24 <memcpy>
  indx +=  AdvLen;
 800bad2:	f897 2047 	ldrb.w	r2, [r7, #71]	; 0x47
 800bad6:	79fb      	ldrb	r3, [r7, #7]
 800bad8:	4413      	add	r3, r2
 800bada:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  BLUENRG_memset(&rq, 0, sizeof(rq));
 800bade:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800bae2:	2218      	movs	r2, #24
 800bae4:	2100      	movs	r1, #0
 800bae6:	4618      	mov	r0, r3
 800bae8:	f000 ffaa 	bl	800ca40 <memset>
  rq.ogf = OGF_VENDOR_CMD;
 800baec:	233f      	movs	r3, #63	; 0x3f
 800baee:	85bb      	strh	r3, [r7, #44]	; 0x2c
  rq.ocf = OCF_GAP_UPDATE_ADV_DATA;
 800baf0:	238e      	movs	r3, #142	; 0x8e
 800baf2:	85fb      	strh	r3, [r7, #46]	; 0x2e
  rq.cparam = (void *)buffer;
 800baf4:	f107 0308 	add.w	r3, r7, #8
 800baf8:	637b      	str	r3, [r7, #52]	; 0x34
  rq.clen = indx;
 800bafa:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800bafe:	63bb      	str	r3, [r7, #56]	; 0x38
  rq.rparam = &status;
 800bb00:	f107 032b 	add.w	r3, r7, #43	; 0x2b
 800bb04:	63fb      	str	r3, [r7, #60]	; 0x3c
  rq.rlen = 1;
 800bb06:	2301      	movs	r3, #1
 800bb08:	643b      	str	r3, [r7, #64]	; 0x40
    
  if (hci_send_req(&rq, FALSE) < 0)
 800bb0a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800bb0e:	2100      	movs	r1, #0
 800bb10:	4618      	mov	r0, r3
 800bb12:	f000 fcb3 	bl	800c47c <hci_send_req>
 800bb16:	4603      	mov	r3, r0
 800bb18:	2b00      	cmp	r3, #0
 800bb1a:	da01      	bge.n	800bb20 <aci_gap_update_adv_data+0x96>
    return BLE_STATUS_TIMEOUT;
 800bb1c:	23ff      	movs	r3, #255	; 0xff
 800bb1e:	e001      	b.n	800bb24 <aci_gap_update_adv_data+0x9a>
    
  return status;
 800bb20:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800bb24:	4618      	mov	r0, r3
 800bb26:	3748      	adds	r7, #72	; 0x48
 800bb28:	46bd      	mov	sp, r7
 800bb2a:	bd80      	pop	{r7, pc}

0800bb2c <aci_gatt_init>:
#define MIN(a,b)            ((a) < (b) )? (a) : (b)
#define MAX(a,b)            ((a) > (b) )? (a) : (b)


tBleStatus aci_gatt_init(void)
{
 800bb2c:	b580      	push	{r7, lr}
 800bb2e:	b088      	sub	sp, #32
 800bb30:	af00      	add	r7, sp, #0
  struct hci_request rq;
  uint8_t status;

  BLUENRG_memset(&rq, 0, sizeof(rq));
 800bb32:	f107 0308 	add.w	r3, r7, #8
 800bb36:	2218      	movs	r2, #24
 800bb38:	2100      	movs	r1, #0
 800bb3a:	4618      	mov	r0, r3
 800bb3c:	f000 ff80 	bl	800ca40 <memset>
  rq.ogf = OGF_VENDOR_CMD;
 800bb40:	233f      	movs	r3, #63	; 0x3f
 800bb42:	813b      	strh	r3, [r7, #8]
  rq.ocf = OCF_GATT_INIT;
 800bb44:	f240 1301 	movw	r3, #257	; 0x101
 800bb48:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 800bb4a:	1dfb      	adds	r3, r7, #7
 800bb4c:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 800bb4e:	2301      	movs	r3, #1
 800bb50:	61fb      	str	r3, [r7, #28]

  if (hci_send_req(&rq, FALSE) < 0)
 800bb52:	f107 0308 	add.w	r3, r7, #8
 800bb56:	2100      	movs	r1, #0
 800bb58:	4618      	mov	r0, r3
 800bb5a:	f000 fc8f 	bl	800c47c <hci_send_req>
 800bb5e:	4603      	mov	r3, r0
 800bb60:	2b00      	cmp	r3, #0
 800bb62:	da01      	bge.n	800bb68 <aci_gatt_init+0x3c>
    return BLE_STATUS_TIMEOUT;
 800bb64:	23ff      	movs	r3, #255	; 0xff
 800bb66:	e000      	b.n	800bb6a <aci_gatt_init+0x3e>

  return status;
 800bb68:	79fb      	ldrb	r3, [r7, #7]
}
 800bb6a:	4618      	mov	r0, r3
 800bb6c:	3720      	adds	r7, #32
 800bb6e:	46bd      	mov	sp, r7
 800bb70:	bd80      	pop	{r7, pc}

0800bb72 <aci_gatt_add_serv>:

tBleStatus aci_gatt_add_serv(uint8_t service_uuid_type, const uint8_t* service_uuid, uint8_t service_type, uint8_t max_attr_records, uint16_t *serviceHandle)
{
 800bb72:	b580      	push	{r7, lr}
 800bb74:	b090      	sub	sp, #64	; 0x40
 800bb76:	af00      	add	r7, sp, #0
 800bb78:	6039      	str	r1, [r7, #0]
 800bb7a:	4611      	mov	r1, r2
 800bb7c:	461a      	mov	r2, r3
 800bb7e:	4603      	mov	r3, r0
 800bb80:	71fb      	strb	r3, [r7, #7]
 800bb82:	460b      	mov	r3, r1
 800bb84:	71bb      	strb	r3, [r7, #6]
 800bb86:	4613      	mov	r3, r2
 800bb88:	717b      	strb	r3, [r7, #5]
  struct hci_request rq;
  gatt_add_serv_rp resp;    
  uint8_t buffer[19];
  uint8_t uuid_len;
  uint8_t indx = 0;
 800bb8a:	2300      	movs	r3, #0
 800bb8c:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
    
  buffer[indx] = service_uuid_type;
 800bb90:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 800bb94:	3340      	adds	r3, #64	; 0x40
 800bb96:	443b      	add	r3, r7
 800bb98:	79fa      	ldrb	r2, [r7, #7]
 800bb9a:	f803 2c34 	strb.w	r2, [r3, #-52]
  indx++;
 800bb9e:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 800bba2:	3301      	adds	r3, #1
 800bba4:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
    
  if(service_uuid_type == UUID_TYPE_16){
 800bba8:	79fb      	ldrb	r3, [r7, #7]
 800bbaa:	2b01      	cmp	r3, #1
 800bbac:	d103      	bne.n	800bbb6 <aci_gatt_add_serv+0x44>
    uuid_len = 2;
 800bbae:	2302      	movs	r3, #2
 800bbb0:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 800bbb4:	e002      	b.n	800bbbc <aci_gatt_add_serv+0x4a>
  }
  else {
    uuid_len = 16;
 800bbb6:	2310      	movs	r3, #16
 800bbb8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  }        
  BLUENRG_memcpy(buffer + indx, service_uuid, uuid_len);
 800bbbc:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 800bbc0:	f107 020c 	add.w	r2, r7, #12
 800bbc4:	4413      	add	r3, r2
 800bbc6:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 800bbca:	6839      	ldr	r1, [r7, #0]
 800bbcc:	4618      	mov	r0, r3
 800bbce:	f000 ff29 	bl	800ca24 <memcpy>
  indx +=  uuid_len;
 800bbd2:	f897 203e 	ldrb.w	r2, [r7, #62]	; 0x3e
 800bbd6:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800bbda:	4413      	add	r3, r2
 800bbdc:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
    
  buffer[indx] = service_type;
 800bbe0:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 800bbe4:	3340      	adds	r3, #64	; 0x40
 800bbe6:	443b      	add	r3, r7
 800bbe8:	79ba      	ldrb	r2, [r7, #6]
 800bbea:	f803 2c34 	strb.w	r2, [r3, #-52]
  indx++;
 800bbee:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 800bbf2:	3301      	adds	r3, #1
 800bbf4:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
    
  buffer[indx] = max_attr_records;
 800bbf8:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 800bbfc:	3340      	adds	r3, #64	; 0x40
 800bbfe:	443b      	add	r3, r7
 800bc00:	797a      	ldrb	r2, [r7, #5]
 800bc02:	f803 2c34 	strb.w	r2, [r3, #-52]
  indx++;
 800bc06:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 800bc0a:	3301      	adds	r3, #1
 800bc0c:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
    
    
  BLUENRG_memset(&resp, 0, sizeof(resp));
 800bc10:	f107 0320 	add.w	r3, r7, #32
 800bc14:	2203      	movs	r2, #3
 800bc16:	2100      	movs	r1, #0
 800bc18:	4618      	mov	r0, r3
 800bc1a:	f000 ff11 	bl	800ca40 <memset>

  BLUENRG_memset(&rq, 0, sizeof(rq));
 800bc1e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800bc22:	2218      	movs	r2, #24
 800bc24:	2100      	movs	r1, #0
 800bc26:	4618      	mov	r0, r3
 800bc28:	f000 ff0a 	bl	800ca40 <memset>
  rq.ogf = OGF_VENDOR_CMD;
 800bc2c:	233f      	movs	r3, #63	; 0x3f
 800bc2e:	84bb      	strh	r3, [r7, #36]	; 0x24
  rq.ocf = OCF_GATT_ADD_SERV;
 800bc30:	f44f 7381 	mov.w	r3, #258	; 0x102
 800bc34:	84fb      	strh	r3, [r7, #38]	; 0x26
  rq.cparam = (void *)buffer;
 800bc36:	f107 030c 	add.w	r3, r7, #12
 800bc3a:	62fb      	str	r3, [r7, #44]	; 0x2c
  rq.clen = indx;
 800bc3c:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 800bc40:	633b      	str	r3, [r7, #48]	; 0x30
  rq.rparam = &resp;
 800bc42:	f107 0320 	add.w	r3, r7, #32
 800bc46:	637b      	str	r3, [r7, #52]	; 0x34
  rq.rlen = GATT_ADD_SERV_RP_SIZE;
 800bc48:	2303      	movs	r3, #3
 800bc4a:	63bb      	str	r3, [r7, #56]	; 0x38

  if (hci_send_req(&rq, FALSE) < 0)
 800bc4c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800bc50:	2100      	movs	r1, #0
 800bc52:	4618      	mov	r0, r3
 800bc54:	f000 fc12 	bl	800c47c <hci_send_req>
 800bc58:	4603      	mov	r3, r0
 800bc5a:	2b00      	cmp	r3, #0
 800bc5c:	da01      	bge.n	800bc62 <aci_gatt_add_serv+0xf0>
    return BLE_STATUS_TIMEOUT;
 800bc5e:	23ff      	movs	r3, #255	; 0xff
 800bc60:	e00c      	b.n	800bc7c <aci_gatt_add_serv+0x10a>

  if (resp.status) {
 800bc62:	f897 3020 	ldrb.w	r3, [r7, #32]
 800bc66:	2b00      	cmp	r3, #0
 800bc68:	d002      	beq.n	800bc70 <aci_gatt_add_serv+0xfe>
    return resp.status;
 800bc6a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800bc6e:	e005      	b.n	800bc7c <aci_gatt_add_serv+0x10a>
  }
    
  *serviceHandle = btohs(resp.handle);
 800bc70:	f8b7 3021 	ldrh.w	r3, [r7, #33]	; 0x21
 800bc74:	b29a      	uxth	r2, r3
 800bc76:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800bc78:	801a      	strh	r2, [r3, #0]

  return 0;
 800bc7a:	2300      	movs	r3, #0
}
 800bc7c:	4618      	mov	r0, r3
 800bc7e:	3740      	adds	r7, #64	; 0x40
 800bc80:	46bd      	mov	sp, r7
 800bc82:	bd80      	pop	{r7, pc}

0800bc84 <aci_gatt_add_char>:
			     uint8_t secPermissions,
			     uint8_t gattEvtMask,
			     uint8_t encryKeySize,
			     uint8_t isVariable,
			     uint16_t* charHandle)                     
{
 800bc84:	b580      	push	{r7, lr}
 800bc86:	b092      	sub	sp, #72	; 0x48
 800bc88:	af00      	add	r7, sp, #0
 800bc8a:	603a      	str	r2, [r7, #0]
 800bc8c:	461a      	mov	r2, r3
 800bc8e:	4603      	mov	r3, r0
 800bc90:	80fb      	strh	r3, [r7, #6]
 800bc92:	460b      	mov	r3, r1
 800bc94:	717b      	strb	r3, [r7, #5]
 800bc96:	4613      	mov	r3, r2
 800bc98:	713b      	strb	r3, [r7, #4]
  struct hci_request rq;
  gatt_add_serv_rp resp;
  uint8_t buffer[25];
  uint8_t uuid_len;
  uint8_t indx = 0;
 800bc9a:	2300      	movs	r3, #0
 800bc9c:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
    
  serviceHandle = htobs(serviceHandle);
 800bca0:	88fb      	ldrh	r3, [r7, #6]
 800bca2:	80fb      	strh	r3, [r7, #6]
  BLUENRG_memcpy(buffer + indx, &serviceHandle, 2);
 800bca4:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 800bca8:	f107 020c 	add.w	r2, r7, #12
 800bcac:	4413      	add	r3, r2
 800bcae:	88fa      	ldrh	r2, [r7, #6]
 800bcb0:	801a      	strh	r2, [r3, #0]
  indx += 2;
 800bcb2:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 800bcb6:	3302      	adds	r3, #2
 800bcb8:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
    
  buffer[indx] = charUuidType;
 800bcbc:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 800bcc0:	3348      	adds	r3, #72	; 0x48
 800bcc2:	443b      	add	r3, r7
 800bcc4:	797a      	ldrb	r2, [r7, #5]
 800bcc6:	f803 2c3c 	strb.w	r2, [r3, #-60]
  indx++;
 800bcca:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 800bcce:	3301      	adds	r3, #1
 800bcd0:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
    
  if(charUuidType == UUID_TYPE_16){
 800bcd4:	797b      	ldrb	r3, [r7, #5]
 800bcd6:	2b01      	cmp	r3, #1
 800bcd8:	d103      	bne.n	800bce2 <aci_gatt_add_char+0x5e>
    uuid_len = 2;
 800bcda:	2302      	movs	r3, #2
 800bcdc:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 800bce0:	e002      	b.n	800bce8 <aci_gatt_add_char+0x64>
  }
  else {
    uuid_len = 16;
 800bce2:	2310      	movs	r3, #16
 800bce4:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  }        
  BLUENRG_memcpy(buffer + indx, charUuid, uuid_len);
 800bce8:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 800bcec:	f107 020c 	add.w	r2, r7, #12
 800bcf0:	4413      	add	r3, r2
 800bcf2:	f897 2047 	ldrb.w	r2, [r7, #71]	; 0x47
 800bcf6:	6839      	ldr	r1, [r7, #0]
 800bcf8:	4618      	mov	r0, r3
 800bcfa:	f000 fe93 	bl	800ca24 <memcpy>
  indx +=  uuid_len;
 800bcfe:	f897 2046 	ldrb.w	r2, [r7, #70]	; 0x46
 800bd02:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800bd06:	4413      	add	r3, r2
 800bd08:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
    
  buffer[indx] = charValueLen;
 800bd0c:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 800bd10:	3348      	adds	r3, #72	; 0x48
 800bd12:	443b      	add	r3, r7
 800bd14:	793a      	ldrb	r2, [r7, #4]
 800bd16:	f803 2c3c 	strb.w	r2, [r3, #-60]
  indx++;
 800bd1a:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 800bd1e:	3301      	adds	r3, #1
 800bd20:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
    
  buffer[indx] = charProperties;
 800bd24:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 800bd28:	3348      	adds	r3, #72	; 0x48
 800bd2a:	443b      	add	r3, r7
 800bd2c:	f897 2050 	ldrb.w	r2, [r7, #80]	; 0x50
 800bd30:	f803 2c3c 	strb.w	r2, [r3, #-60]
  indx++;
 800bd34:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 800bd38:	3301      	adds	r3, #1
 800bd3a:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
    
  buffer[indx] = secPermissions;
 800bd3e:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 800bd42:	3348      	adds	r3, #72	; 0x48
 800bd44:	443b      	add	r3, r7
 800bd46:	f897 2054 	ldrb.w	r2, [r7, #84]	; 0x54
 800bd4a:	f803 2c3c 	strb.w	r2, [r3, #-60]
  indx++;
 800bd4e:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 800bd52:	3301      	adds	r3, #1
 800bd54:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
    
  buffer[indx] = gattEvtMask;
 800bd58:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 800bd5c:	3348      	adds	r3, #72	; 0x48
 800bd5e:	443b      	add	r3, r7
 800bd60:	f897 2058 	ldrb.w	r2, [r7, #88]	; 0x58
 800bd64:	f803 2c3c 	strb.w	r2, [r3, #-60]
  indx++;
 800bd68:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 800bd6c:	3301      	adds	r3, #1
 800bd6e:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
    
  buffer[indx] = encryKeySize;
 800bd72:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 800bd76:	3348      	adds	r3, #72	; 0x48
 800bd78:	443b      	add	r3, r7
 800bd7a:	f897 205c 	ldrb.w	r2, [r7, #92]	; 0x5c
 800bd7e:	f803 2c3c 	strb.w	r2, [r3, #-60]
  indx++;
 800bd82:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 800bd86:	3301      	adds	r3, #1
 800bd88:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
    
  buffer[indx] = isVariable;
 800bd8c:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 800bd90:	3348      	adds	r3, #72	; 0x48
 800bd92:	443b      	add	r3, r7
 800bd94:	f897 2060 	ldrb.w	r2, [r7, #96]	; 0x60
 800bd98:	f803 2c3c 	strb.w	r2, [r3, #-60]
  indx++;
 800bd9c:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 800bda0:	3301      	adds	r3, #1
 800bda2:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
    
  BLUENRG_memset(&resp, 0, sizeof(resp));
 800bda6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800bdaa:	2203      	movs	r2, #3
 800bdac:	2100      	movs	r1, #0
 800bdae:	4618      	mov	r0, r3
 800bdb0:	f000 fe46 	bl	800ca40 <memset>

  BLUENRG_memset(&rq, 0, sizeof(rq));
 800bdb4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800bdb8:	2218      	movs	r2, #24
 800bdba:	2100      	movs	r1, #0
 800bdbc:	4618      	mov	r0, r3
 800bdbe:	f000 fe3f 	bl	800ca40 <memset>
  rq.ogf = OGF_VENDOR_CMD;
 800bdc2:	233f      	movs	r3, #63	; 0x3f
 800bdc4:	85bb      	strh	r3, [r7, #44]	; 0x2c
  rq.ocf = OCF_GATT_ADD_CHAR;
 800bdc6:	f44f 7382 	mov.w	r3, #260	; 0x104
 800bdca:	85fb      	strh	r3, [r7, #46]	; 0x2e
  rq.cparam = (void *)buffer;
 800bdcc:	f107 030c 	add.w	r3, r7, #12
 800bdd0:	637b      	str	r3, [r7, #52]	; 0x34
  rq.clen = indx;
 800bdd2:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 800bdd6:	63bb      	str	r3, [r7, #56]	; 0x38
  rq.rparam = &resp;
 800bdd8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800bddc:	63fb      	str	r3, [r7, #60]	; 0x3c
  rq.rlen = GATT_ADD_CHAR_RP_SIZE;
 800bdde:	2303      	movs	r3, #3
 800bde0:	643b      	str	r3, [r7, #64]	; 0x40

  if (hci_send_req(&rq, FALSE) < 0)
 800bde2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800bde6:	2100      	movs	r1, #0
 800bde8:	4618      	mov	r0, r3
 800bdea:	f000 fb47 	bl	800c47c <hci_send_req>
 800bdee:	4603      	mov	r3, r0
 800bdf0:	2b00      	cmp	r3, #0
 800bdf2:	da01      	bge.n	800bdf8 <aci_gatt_add_char+0x174>
    return BLE_STATUS_TIMEOUT;
 800bdf4:	23ff      	movs	r3, #255	; 0xff
 800bdf6:	e00c      	b.n	800be12 <aci_gatt_add_char+0x18e>

  if (resp.status) {
 800bdf8:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800bdfc:	2b00      	cmp	r3, #0
 800bdfe:	d002      	beq.n	800be06 <aci_gatt_add_char+0x182>
    return resp.status;
 800be00:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800be04:	e005      	b.n	800be12 <aci_gatt_add_char+0x18e>
  }
    
  *charHandle = btohs(resp.handle);
 800be06:	f8b7 3029 	ldrh.w	r3, [r7, #41]	; 0x29
 800be0a:	b29a      	uxth	r2, r3
 800be0c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800be0e:	801a      	strh	r2, [r3, #0]

  return 0;
 800be10:	2300      	movs	r3, #0
}
 800be12:	4618      	mov	r0, r3
 800be14:	3748      	adds	r7, #72	; 0x48
 800be16:	46bd      	mov	sp, r7
 800be18:	bd80      	pop	{r7, pc}

0800be1a <aci_gatt_update_char_value>:
tBleStatus aci_gatt_update_char_value(uint16_t servHandle, 
				      uint16_t charHandle,
				      uint8_t charValOffset,
				      uint8_t charValueLen,   
                                      const void *charValue)
{
 800be1a:	b590      	push	{r4, r7, lr}
 800be1c:	b0ab      	sub	sp, #172	; 0xac
 800be1e:	af00      	add	r7, sp, #0
 800be20:	4604      	mov	r4, r0
 800be22:	4608      	mov	r0, r1
 800be24:	4611      	mov	r1, r2
 800be26:	461a      	mov	r2, r3
 800be28:	4623      	mov	r3, r4
 800be2a:	80fb      	strh	r3, [r7, #6]
 800be2c:	4603      	mov	r3, r0
 800be2e:	80bb      	strh	r3, [r7, #4]
 800be30:	460b      	mov	r3, r1
 800be32:	70fb      	strb	r3, [r7, #3]
 800be34:	4613      	mov	r3, r2
 800be36:	70bb      	strb	r3, [r7, #2]
  struct hci_request rq;
  uint8_t status;
  uint8_t buffer[HCI_MAX_PAYLOAD_SIZE];
  uint8_t indx = 0;
 800be38:	2300      	movs	r3, #0
 800be3a:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
    
  if ((charValueLen+6) > HCI_MAX_PAYLOAD_SIZE)
 800be3e:	78bb      	ldrb	r3, [r7, #2]
 800be40:	2b7a      	cmp	r3, #122	; 0x7a
 800be42:	d901      	bls.n	800be48 <aci_gatt_update_char_value+0x2e>
    return BLE_STATUS_INVALID_PARAMS;
 800be44:	2342      	movs	r3, #66	; 0x42
 800be46:	e074      	b.n	800bf32 <aci_gatt_update_char_value+0x118>

  servHandle = htobs(servHandle);
 800be48:	88fb      	ldrh	r3, [r7, #6]
 800be4a:	80fb      	strh	r3, [r7, #6]
  BLUENRG_memcpy(buffer + indx, &servHandle, 2);
 800be4c:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 800be50:	f107 0208 	add.w	r2, r7, #8
 800be54:	4413      	add	r3, r2
 800be56:	88fa      	ldrh	r2, [r7, #6]
 800be58:	801a      	strh	r2, [r3, #0]
  indx += 2;
 800be5a:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 800be5e:	3302      	adds	r3, #2
 800be60:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
    
  charHandle = htobs(charHandle);
 800be64:	88bb      	ldrh	r3, [r7, #4]
 800be66:	80bb      	strh	r3, [r7, #4]
  BLUENRG_memcpy(buffer + indx, &charHandle, 2);
 800be68:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 800be6c:	f107 0208 	add.w	r2, r7, #8
 800be70:	4413      	add	r3, r2
 800be72:	88ba      	ldrh	r2, [r7, #4]
 800be74:	801a      	strh	r2, [r3, #0]
  indx += 2;
 800be76:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 800be7a:	3302      	adds	r3, #2
 800be7c:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
    
  buffer[indx] = charValOffset;
 800be80:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 800be84:	33a8      	adds	r3, #168	; 0xa8
 800be86:	443b      	add	r3, r7
 800be88:	78fa      	ldrb	r2, [r7, #3]
 800be8a:	f803 2ca0 	strb.w	r2, [r3, #-160]
  indx++;
 800be8e:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 800be92:	3301      	adds	r3, #1
 800be94:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
    
  buffer[indx] = charValueLen;
 800be98:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 800be9c:	33a8      	adds	r3, #168	; 0xa8
 800be9e:	443b      	add	r3, r7
 800bea0:	78ba      	ldrb	r2, [r7, #2]
 800bea2:	f803 2ca0 	strb.w	r2, [r3, #-160]
  indx++;
 800bea6:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 800beaa:	3301      	adds	r3, #1
 800beac:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
        
  BLUENRG_memcpy(buffer + indx, charValue, charValueLen);
 800beb0:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 800beb4:	f107 0208 	add.w	r2, r7, #8
 800beb8:	4413      	add	r3, r2
 800beba:	78ba      	ldrb	r2, [r7, #2]
 800bebc:	f8d7 10b8 	ldr.w	r1, [r7, #184]	; 0xb8
 800bec0:	4618      	mov	r0, r3
 800bec2:	f000 fdaf 	bl	800ca24 <memcpy>
  indx +=  charValueLen;
 800bec6:	f897 20a7 	ldrb.w	r2, [r7, #167]	; 0xa7
 800beca:	78bb      	ldrb	r3, [r7, #2]
 800becc:	4413      	add	r3, r2
 800bece:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7

  BLUENRG_memset(&rq, 0, sizeof(rq));
 800bed2:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800bed6:	2218      	movs	r2, #24
 800bed8:	2100      	movs	r1, #0
 800beda:	4618      	mov	r0, r3
 800bedc:	f000 fdb0 	bl	800ca40 <memset>
  rq.ogf = OGF_VENDOR_CMD;
 800bee0:	233f      	movs	r3, #63	; 0x3f
 800bee2:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
  rq.ocf = OCF_GATT_UPD_CHAR_VAL;
 800bee6:	f44f 7383 	mov.w	r3, #262	; 0x106
 800beea:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
  rq.cparam = (void *)buffer;
 800beee:	f107 0308 	add.w	r3, r7, #8
 800bef2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  rq.clen = indx;
 800bef6:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 800befa:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  rq.rparam = &status;
 800befe:	f107 038b 	add.w	r3, r7, #139	; 0x8b
 800bf02:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  rq.rlen = 1;
 800bf06:	2301      	movs	r3, #1
 800bf08:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

  if (hci_send_req(&rq, FALSE) < 0)
 800bf0c:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800bf10:	2100      	movs	r1, #0
 800bf12:	4618      	mov	r0, r3
 800bf14:	f000 fab2 	bl	800c47c <hci_send_req>
 800bf18:	4603      	mov	r3, r0
 800bf1a:	2b00      	cmp	r3, #0
 800bf1c:	da01      	bge.n	800bf22 <aci_gatt_update_char_value+0x108>
    return BLE_STATUS_TIMEOUT;
 800bf1e:	23ff      	movs	r3, #255	; 0xff
 800bf20:	e007      	b.n	800bf32 <aci_gatt_update_char_value+0x118>

  if (status) {
 800bf22:	f897 308b 	ldrb.w	r3, [r7, #139]	; 0x8b
 800bf26:	2b00      	cmp	r3, #0
 800bf28:	d002      	beq.n	800bf30 <aci_gatt_update_char_value+0x116>
    return status;
 800bf2a:	f897 308b 	ldrb.w	r3, [r7, #139]	; 0x8b
 800bf2e:	e000      	b.n	800bf32 <aci_gatt_update_char_value+0x118>
  }

  return 0;
 800bf30:	2300      	movs	r3, #0
}
 800bf32:	4618      	mov	r0, r3
 800bf34:	37ac      	adds	r7, #172	; 0xac
 800bf36:	46bd      	mov	sp, r7
 800bf38:	bd90      	pop	{r4, r7, pc}

0800bf3a <aci_gatt_allow_read>:

  return 0;
}

tBleStatus aci_gatt_allow_read(uint16_t conn_handle)
{
 800bf3a:	b580      	push	{r7, lr}
 800bf3c:	b08a      	sub	sp, #40	; 0x28
 800bf3e:	af00      	add	r7, sp, #0
 800bf40:	4603      	mov	r3, r0
 800bf42:	80fb      	strh	r3, [r7, #6]
    struct hci_request rq;
    gatt_allow_read_cp cp;
    uint8_t status;
    
    cp.conn_handle = htobs(conn_handle);
 800bf44:	88fb      	ldrh	r3, [r7, #6]
 800bf46:	81bb      	strh	r3, [r7, #12]

    BLUENRG_memset(&rq, 0, sizeof(rq));
 800bf48:	f107 0310 	add.w	r3, r7, #16
 800bf4c:	2218      	movs	r2, #24
 800bf4e:	2100      	movs	r1, #0
 800bf50:	4618      	mov	r0, r3
 800bf52:	f000 fd75 	bl	800ca40 <memset>
    rq.ogf = OGF_VENDOR_CMD;
 800bf56:	233f      	movs	r3, #63	; 0x3f
 800bf58:	823b      	strh	r3, [r7, #16]
    rq.ocf = OCF_GATT_ALLOW_READ;
 800bf5a:	f240 1327 	movw	r3, #295	; 0x127
 800bf5e:	827b      	strh	r3, [r7, #18]
    rq.cparam = &cp;
 800bf60:	f107 030c 	add.w	r3, r7, #12
 800bf64:	61bb      	str	r3, [r7, #24]
    rq.clen = GATT_ALLOW_READ_CP_SIZE;
 800bf66:	2302      	movs	r3, #2
 800bf68:	61fb      	str	r3, [r7, #28]
    rq.rparam = &status;
 800bf6a:	f107 030b 	add.w	r3, r7, #11
 800bf6e:	623b      	str	r3, [r7, #32]
    rq.rlen = 1;
 800bf70:	2301      	movs	r3, #1
 800bf72:	627b      	str	r3, [r7, #36]	; 0x24

    if (hci_send_req(&rq, FALSE) < 0)
 800bf74:	f107 0310 	add.w	r3, r7, #16
 800bf78:	2100      	movs	r1, #0
 800bf7a:	4618      	mov	r0, r3
 800bf7c:	f000 fa7e 	bl	800c47c <hci_send_req>
 800bf80:	4603      	mov	r3, r0
 800bf82:	2b00      	cmp	r3, #0
 800bf84:	da01      	bge.n	800bf8a <aci_gatt_allow_read+0x50>
      return BLE_STATUS_TIMEOUT;
 800bf86:	23ff      	movs	r3, #255	; 0xff
 800bf88:	e000      	b.n	800bf8c <aci_gatt_allow_read+0x52>

    return status;
 800bf8a:	7afb      	ldrb	r3, [r7, #11]
}
 800bf8c:	4618      	mov	r0, r3
 800bf8e:	3728      	adds	r7, #40	; 0x28
 800bf90:	46bd      	mov	sp, r7
 800bf92:	bd80      	pop	{r7, pc}

0800bf94 <aci_hal_read_config_data>:

  return status;
}

tBleStatus aci_hal_read_config_data(uint8_t offset, uint16_t data_len, uint8_t *data_len_out_p, uint8_t *data)
{
 800bf94:	b580      	push	{r7, lr}
 800bf96:	b0ac      	sub	sp, #176	; 0xb0
 800bf98:	af00      	add	r7, sp, #0
 800bf9a:	60ba      	str	r2, [r7, #8]
 800bf9c:	607b      	str	r3, [r7, #4]
 800bf9e:	4603      	mov	r3, r0
 800bfa0:	73fb      	strb	r3, [r7, #15]
 800bfa2:	460b      	mov	r3, r1
 800bfa4:	81bb      	strh	r3, [r7, #12]
  struct hci_request rq;
  hal_read_config_data_cp cp;
  hal_read_config_data_rp rp;
  
  cp.offset = offset;
 800bfa6:	7bfb      	ldrb	r3, [r7, #15]
 800bfa8:	f887 3094 	strb.w	r3, [r7, #148]	; 0x94
  
  BLUENRG_memset(&rq, 0, sizeof(rq));
 800bfac:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800bfb0:	2218      	movs	r2, #24
 800bfb2:	2100      	movs	r1, #0
 800bfb4:	4618      	mov	r0, r3
 800bfb6:	f000 fd43 	bl	800ca40 <memset>
  rq.ogf = OGF_VENDOR_CMD;
 800bfba:	233f      	movs	r3, #63	; 0x3f
 800bfbc:	f8a7 3098 	strh.w	r3, [r7, #152]	; 0x98
  rq.ocf = OCF_HAL_READ_CONFIG_DATA;
 800bfc0:	230d      	movs	r3, #13
 800bfc2:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
  rq.cparam = &cp;
 800bfc6:	f107 0394 	add.w	r3, r7, #148	; 0x94
 800bfca:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  rq.clen = sizeof(cp);
 800bfce:	2301      	movs	r3, #1
 800bfd0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  rq.rparam = &rp;
 800bfd4:	f107 0314 	add.w	r3, r7, #20
 800bfd8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  rq.rlen = sizeof(rp);
 800bfdc:	2380      	movs	r3, #128	; 0x80
 800bfde:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  
  if (hci_send_req(&rq, FALSE) < 0)
 800bfe2:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800bfe6:	2100      	movs	r1, #0
 800bfe8:	4618      	mov	r0, r3
 800bfea:	f000 fa47 	bl	800c47c <hci_send_req>
 800bfee:	4603      	mov	r3, r0
 800bff0:	2b00      	cmp	r3, #0
 800bff2:	da01      	bge.n	800bff8 <aci_hal_read_config_data+0x64>
    return BLE_STATUS_TIMEOUT;
 800bff4:	23ff      	movs	r3, #255	; 0xff
 800bff6:	e01e      	b.n	800c036 <aci_hal_read_config_data+0xa2>
  
  if(rp.status)
 800bff8:	7d3b      	ldrb	r3, [r7, #20]
 800bffa:	2b00      	cmp	r3, #0
 800bffc:	d001      	beq.n	800c002 <aci_hal_read_config_data+0x6e>
    return rp.status;
 800bffe:	7d3b      	ldrb	r3, [r7, #20]
 800c000:	e019      	b.n	800c036 <aci_hal_read_config_data+0xa2>
  
  *data_len_out_p = rq.rlen-1;
 800c002:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800c006:	b2db      	uxtb	r3, r3
 800c008:	3b01      	subs	r3, #1
 800c00a:	b2da      	uxtb	r2, r3
 800c00c:	68bb      	ldr	r3, [r7, #8]
 800c00e:	701a      	strb	r2, [r3, #0]
  
  BLUENRG_memcpy(data, rp.data, MIN(data_len, *data_len_out_p));
 800c010:	68bb      	ldr	r3, [r7, #8]
 800c012:	781b      	ldrb	r3, [r3, #0]
 800c014:	b29b      	uxth	r3, r3
 800c016:	89ba      	ldrh	r2, [r7, #12]
 800c018:	429a      	cmp	r2, r3
 800c01a:	d201      	bcs.n	800c020 <aci_hal_read_config_data+0x8c>
 800c01c:	89ba      	ldrh	r2, [r7, #12]
 800c01e:	e002      	b.n	800c026 <aci_hal_read_config_data+0x92>
 800c020:	68bb      	ldr	r3, [r7, #8]
 800c022:	781b      	ldrb	r3, [r3, #0]
 800c024:	461a      	mov	r2, r3
 800c026:	f107 0314 	add.w	r3, r7, #20
 800c02a:	3301      	adds	r3, #1
 800c02c:	4619      	mov	r1, r3
 800c02e:	6878      	ldr	r0, [r7, #4]
 800c030:	f000 fcf8 	bl	800ca24 <memcpy>
  
  return 0;
 800c034:	2300      	movs	r3, #0
}
 800c036:	4618      	mov	r0, r3
 800c038:	37b0      	adds	r7, #176	; 0xb0
 800c03a:	46bd      	mov	sp, r7
 800c03c:	bd80      	pop	{r7, pc}

0800c03e <aci_hal_set_tx_power_level>:

tBleStatus aci_hal_set_tx_power_level(uint8_t en_high_power, uint8_t pa_level)
{
 800c03e:	b580      	push	{r7, lr}
 800c040:	b08a      	sub	sp, #40	; 0x28
 800c042:	af00      	add	r7, sp, #0
 800c044:	4603      	mov	r3, r0
 800c046:	460a      	mov	r2, r1
 800c048:	71fb      	strb	r3, [r7, #7]
 800c04a:	4613      	mov	r3, r2
 800c04c:	71bb      	strb	r3, [r7, #6]
  struct hci_request rq;
  hal_set_tx_power_level_cp cp;    
  uint8_t status;
    
  cp.en_high_power = en_high_power;
 800c04e:	79fb      	ldrb	r3, [r7, #7]
 800c050:	733b      	strb	r3, [r7, #12]
  cp.pa_level = pa_level;
 800c052:	79bb      	ldrb	r3, [r7, #6]
 800c054:	737b      	strb	r3, [r7, #13]

  BLUENRG_memset(&rq, 0, sizeof(rq));
 800c056:	f107 0310 	add.w	r3, r7, #16
 800c05a:	2218      	movs	r2, #24
 800c05c:	2100      	movs	r1, #0
 800c05e:	4618      	mov	r0, r3
 800c060:	f000 fcee 	bl	800ca40 <memset>
  rq.ogf = OGF_VENDOR_CMD;
 800c064:	233f      	movs	r3, #63	; 0x3f
 800c066:	823b      	strh	r3, [r7, #16]
  rq.ocf = OCF_HAL_SET_TX_POWER_LEVEL;
 800c068:	230f      	movs	r3, #15
 800c06a:	827b      	strh	r3, [r7, #18]
  rq.cparam = &cp;
 800c06c:	f107 030c 	add.w	r3, r7, #12
 800c070:	61bb      	str	r3, [r7, #24]
  rq.clen = HAL_SET_TX_POWER_LEVEL_CP_SIZE;
 800c072:	2302      	movs	r3, #2
 800c074:	61fb      	str	r3, [r7, #28]
  rq.rparam = &status;
 800c076:	f107 030b 	add.w	r3, r7, #11
 800c07a:	623b      	str	r3, [r7, #32]
  rq.rlen = 1;
 800c07c:	2301      	movs	r3, #1
 800c07e:	627b      	str	r3, [r7, #36]	; 0x24

  if (hci_send_req(&rq, FALSE) < 0)
 800c080:	f107 0310 	add.w	r3, r7, #16
 800c084:	2100      	movs	r1, #0
 800c086:	4618      	mov	r0, r3
 800c088:	f000 f9f8 	bl	800c47c <hci_send_req>
 800c08c:	4603      	mov	r3, r0
 800c08e:	2b00      	cmp	r3, #0
 800c090:	da01      	bge.n	800c096 <aci_hal_set_tx_power_level+0x58>
    return BLE_STATUS_TIMEOUT;
 800c092:	23ff      	movs	r3, #255	; 0xff
 800c094:	e000      	b.n	800c098 <aci_hal_set_tx_power_level+0x5a>

  return status;
 800c096:	7afb      	ldrb	r3, [r7, #11]
}
 800c098:	4618      	mov	r0, r3
 800c09a:	3728      	adds	r7, #40	; 0x28
 800c09c:	46bd      	mov	sp, r7
 800c09e:	bd80      	pop	{r7, pc}

0800c0a0 <getBlueNRGVersion>:
#include "hci.h"
#include "hci_le.h"
#include "string.h"

uint8_t getBlueNRGVersion(uint8_t *hwVersion, uint16_t *fwVersion)
{
 800c0a0:	b590      	push	{r4, r7, lr}
 800c0a2:	b089      	sub	sp, #36	; 0x24
 800c0a4:	af02      	add	r7, sp, #8
 800c0a6:	6078      	str	r0, [r7, #4]
 800c0a8:	6039      	str	r1, [r7, #0]
  uint8_t status;
  uint8_t hci_version, lmp_pal_version;
  uint16_t hci_revision, manufacturer_name, lmp_pal_subversion;

  status = hci_le_read_local_version(&hci_version, &hci_revision, &lmp_pal_version, 
 800c0aa:	f107 0410 	add.w	r4, r7, #16
 800c0ae:	f107 0215 	add.w	r2, r7, #21
 800c0b2:	f107 0112 	add.w	r1, r7, #18
 800c0b6:	f107 0016 	add.w	r0, r7, #22
 800c0ba:	f107 030e 	add.w	r3, r7, #14
 800c0be:	9300      	str	r3, [sp, #0]
 800c0c0:	4623      	mov	r3, r4
 800c0c2:	f000 f853 	bl	800c16c <hci_le_read_local_version>
 800c0c6:	4603      	mov	r3, r0
 800c0c8:	75fb      	strb	r3, [r7, #23]
                                     &manufacturer_name, &lmp_pal_subversion);

  if (status == BLE_STATUS_SUCCESS) {
 800c0ca:	7dfb      	ldrb	r3, [r7, #23]
 800c0cc:	2b00      	cmp	r3, #0
 800c0ce:	d126      	bne.n	800c11e <getBlueNRGVersion+0x7e>
    *hwVersion = hci_revision >> 8;
 800c0d0:	8a7b      	ldrh	r3, [r7, #18]
 800c0d2:	0a1b      	lsrs	r3, r3, #8
 800c0d4:	b29b      	uxth	r3, r3
 800c0d6:	b2da      	uxtb	r2, r3
 800c0d8:	687b      	ldr	r3, [r7, #4]
 800c0da:	701a      	strb	r2, [r3, #0]
    *fwVersion = (hci_revision & 0xFF) << 8;              // Major Version Number
 800c0dc:	8a7b      	ldrh	r3, [r7, #18]
 800c0de:	021b      	lsls	r3, r3, #8
 800c0e0:	b29a      	uxth	r2, r3
 800c0e2:	683b      	ldr	r3, [r7, #0]
 800c0e4:	801a      	strh	r2, [r3, #0]
    *fwVersion |= ((lmp_pal_subversion >> 4) & 0xF) << 4; // Minor Version Number
 800c0e6:	683b      	ldr	r3, [r7, #0]
 800c0e8:	881b      	ldrh	r3, [r3, #0]
 800c0ea:	b21a      	sxth	r2, r3
 800c0ec:	89fb      	ldrh	r3, [r7, #14]
 800c0ee:	091b      	lsrs	r3, r3, #4
 800c0f0:	b29b      	uxth	r3, r3
 800c0f2:	011b      	lsls	r3, r3, #4
 800c0f4:	b21b      	sxth	r3, r3
 800c0f6:	b2db      	uxtb	r3, r3
 800c0f8:	b21b      	sxth	r3, r3
 800c0fa:	4313      	orrs	r3, r2
 800c0fc:	b21b      	sxth	r3, r3
 800c0fe:	b29a      	uxth	r2, r3
 800c100:	683b      	ldr	r3, [r7, #0]
 800c102:	801a      	strh	r2, [r3, #0]
    *fwVersion |= lmp_pal_subversion & 0xF;               // Patch Version Number
 800c104:	683b      	ldr	r3, [r7, #0]
 800c106:	881b      	ldrh	r3, [r3, #0]
 800c108:	b21a      	sxth	r2, r3
 800c10a:	89fb      	ldrh	r3, [r7, #14]
 800c10c:	b21b      	sxth	r3, r3
 800c10e:	f003 030f 	and.w	r3, r3, #15
 800c112:	b21b      	sxth	r3, r3
 800c114:	4313      	orrs	r3, r2
 800c116:	b21b      	sxth	r3, r3
 800c118:	b29a      	uxth	r2, r3
 800c11a:	683b      	ldr	r3, [r7, #0]
 800c11c:	801a      	strh	r2, [r3, #0]
  }
  return status;
 800c11e:	7dfb      	ldrb	r3, [r7, #23]
}
 800c120:	4618      	mov	r0, r3
 800c122:	371c      	adds	r7, #28
 800c124:	46bd      	mov	sp, r7
 800c126:	bd90      	pop	{r4, r7, pc}

0800c128 <hci_reset>:

#define MIN(a,b)            ((a) < (b) )? (a) : (b)
#define MAX(a,b)            ((a) > (b) )? (a) : (b)

int hci_reset(void)
{
 800c128:	b580      	push	{r7, lr}
 800c12a:	b088      	sub	sp, #32
 800c12c:	af00      	add	r7, sp, #0
  struct hci_request rq;
  uint8_t status;
  
  BLUENRG_memset(&rq, 0, sizeof(rq));
 800c12e:	f107 0308 	add.w	r3, r7, #8
 800c132:	2218      	movs	r2, #24
 800c134:	2100      	movs	r1, #0
 800c136:	4618      	mov	r0, r3
 800c138:	f000 fc82 	bl	800ca40 <memset>
  rq.ogf = OGF_HOST_CTL;
 800c13c:	2303      	movs	r3, #3
 800c13e:	813b      	strh	r3, [r7, #8]
  rq.ocf = OCF_RESET;
 800c140:	2303      	movs	r3, #3
 800c142:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 800c144:	1dfb      	adds	r3, r7, #7
 800c146:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 800c148:	2301      	movs	r3, #1
 800c14a:	61fb      	str	r3, [r7, #28]
  
  if (hci_send_req(&rq, FALSE) < 0)
 800c14c:	f107 0308 	add.w	r3, r7, #8
 800c150:	2100      	movs	r1, #0
 800c152:	4618      	mov	r0, r3
 800c154:	f000 f992 	bl	800c47c <hci_send_req>
 800c158:	4603      	mov	r3, r0
 800c15a:	2b00      	cmp	r3, #0
 800c15c:	da01      	bge.n	800c162 <hci_reset+0x3a>
    return BLE_STATUS_TIMEOUT;
 800c15e:	23ff      	movs	r3, #255	; 0xff
 800c160:	e000      	b.n	800c164 <hci_reset+0x3c>
  
  return status;  
 800c162:	79fb      	ldrb	r3, [r7, #7]
}
 800c164:	4618      	mov	r0, r3
 800c166:	3720      	adds	r7, #32
 800c168:	46bd      	mov	sp, r7
 800c16a:	bd80      	pop	{r7, pc}

0800c16c <hci_le_read_local_version>:
  return status;  
}

int hci_le_read_local_version(uint8_t *hci_version, uint16_t *hci_revision, uint8_t *lmp_pal_version, 
                              uint16_t *manufacturer_name, uint16_t *lmp_pal_subversion)
{
 800c16c:	b580      	push	{r7, lr}
 800c16e:	b08e      	sub	sp, #56	; 0x38
 800c170:	af00      	add	r7, sp, #0
 800c172:	60f8      	str	r0, [r7, #12]
 800c174:	60b9      	str	r1, [r7, #8]
 800c176:	607a      	str	r2, [r7, #4]
 800c178:	603b      	str	r3, [r7, #0]
  struct hci_request rq;
  read_local_version_rp resp;
  
  BLUENRG_memset(&resp, 0, sizeof(resp));
 800c17a:	f107 0314 	add.w	r3, r7, #20
 800c17e:	2209      	movs	r2, #9
 800c180:	2100      	movs	r1, #0
 800c182:	4618      	mov	r0, r3
 800c184:	f000 fc5c 	bl	800ca40 <memset>
  
  BLUENRG_memset(&rq, 0, sizeof(rq));
 800c188:	f107 0320 	add.w	r3, r7, #32
 800c18c:	2218      	movs	r2, #24
 800c18e:	2100      	movs	r1, #0
 800c190:	4618      	mov	r0, r3
 800c192:	f000 fc55 	bl	800ca40 <memset>
  rq.ogf = OGF_INFO_PARAM;
 800c196:	2304      	movs	r3, #4
 800c198:	843b      	strh	r3, [r7, #32]
  rq.ocf = OCF_READ_LOCAL_VERSION;
 800c19a:	2301      	movs	r3, #1
 800c19c:	847b      	strh	r3, [r7, #34]	; 0x22
  rq.cparam = NULL;
 800c19e:	2300      	movs	r3, #0
 800c1a0:	62bb      	str	r3, [r7, #40]	; 0x28
  rq.clen = 0;
 800c1a2:	2300      	movs	r3, #0
 800c1a4:	62fb      	str	r3, [r7, #44]	; 0x2c
  rq.rparam = &resp;
 800c1a6:	f107 0314 	add.w	r3, r7, #20
 800c1aa:	633b      	str	r3, [r7, #48]	; 0x30
  rq.rlen = READ_LOCAL_VERSION_RP_SIZE;
 800c1ac:	2309      	movs	r3, #9
 800c1ae:	637b      	str	r3, [r7, #52]	; 0x34
  
  if (hci_send_req(&rq, FALSE) < 0)
 800c1b0:	f107 0320 	add.w	r3, r7, #32
 800c1b4:	2100      	movs	r1, #0
 800c1b6:	4618      	mov	r0, r3
 800c1b8:	f000 f960 	bl	800c47c <hci_send_req>
 800c1bc:	4603      	mov	r3, r0
 800c1be:	2b00      	cmp	r3, #0
 800c1c0:	da01      	bge.n	800c1c6 <hci_le_read_local_version+0x5a>
    return BLE_STATUS_TIMEOUT;
 800c1c2:	23ff      	movs	r3, #255	; 0xff
 800c1c4:	e018      	b.n	800c1f8 <hci_le_read_local_version+0x8c>
  
  if (resp.status) {
 800c1c6:	7d3b      	ldrb	r3, [r7, #20]
 800c1c8:	2b00      	cmp	r3, #0
 800c1ca:	d001      	beq.n	800c1d0 <hci_le_read_local_version+0x64>
    return resp.status;
 800c1cc:	7d3b      	ldrb	r3, [r7, #20]
 800c1ce:	e013      	b.n	800c1f8 <hci_le_read_local_version+0x8c>
  }
  
  
  *hci_version = resp.hci_version;
 800c1d0:	7d7a      	ldrb	r2, [r7, #21]
 800c1d2:	68fb      	ldr	r3, [r7, #12]
 800c1d4:	701a      	strb	r2, [r3, #0]
  *hci_revision =  btohs(resp.hci_revision);
 800c1d6:	8afa      	ldrh	r2, [r7, #22]
 800c1d8:	68bb      	ldr	r3, [r7, #8]
 800c1da:	801a      	strh	r2, [r3, #0]
  *lmp_pal_version = resp.lmp_pal_version;
 800c1dc:	7e3a      	ldrb	r2, [r7, #24]
 800c1de:	687b      	ldr	r3, [r7, #4]
 800c1e0:	701a      	strb	r2, [r3, #0]
  *manufacturer_name = btohs(resp.manufacturer_name);
 800c1e2:	f8b7 3019 	ldrh.w	r3, [r7, #25]
 800c1e6:	b29a      	uxth	r2, r3
 800c1e8:	683b      	ldr	r3, [r7, #0]
 800c1ea:	801a      	strh	r2, [r3, #0]
  *lmp_pal_subversion = btohs(resp.lmp_pal_subversion);
 800c1ec:	f8b7 301b 	ldrh.w	r3, [r7, #27]
 800c1f0:	b29a      	uxth	r2, r3
 800c1f2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c1f4:	801a      	strh	r2, [r3, #0]
  
  return 0;
 800c1f6:	2300      	movs	r3, #0
}
 800c1f8:	4618      	mov	r0, r3
 800c1fa:	3738      	adds	r7, #56	; 0x38
 800c1fc:	46bd      	mov	sp, r7
 800c1fe:	bd80      	pop	{r7, pc}

0800c200 <hci_le_set_scan_resp_data>:
  
  return 0;
}

int hci_le_set_scan_resp_data(uint8_t length, const uint8_t data[])
{
 800c200:	b580      	push	{r7, lr}
 800c202:	b092      	sub	sp, #72	; 0x48
 800c204:	af00      	add	r7, sp, #0
 800c206:	4603      	mov	r3, r0
 800c208:	6039      	str	r1, [r7, #0]
 800c20a:	71fb      	strb	r3, [r7, #7]
  struct hci_request rq;
  le_set_scan_response_data_cp scan_resp_cp;
  uint8_t status;
  
  BLUENRG_memset(&scan_resp_cp, 0, sizeof(scan_resp_cp));
 800c20c:	f107 0310 	add.w	r3, r7, #16
 800c210:	2220      	movs	r2, #32
 800c212:	2100      	movs	r1, #0
 800c214:	4618      	mov	r0, r3
 800c216:	f000 fc13 	bl	800ca40 <memset>
  scan_resp_cp.length = length;
 800c21a:	79fb      	ldrb	r3, [r7, #7]
 800c21c:	743b      	strb	r3, [r7, #16]
  BLUENRG_memcpy(scan_resp_cp.data, data, MIN(31,length));
 800c21e:	79fb      	ldrb	r3, [r7, #7]
 800c220:	2b1f      	cmp	r3, #31
 800c222:	bf28      	it	cs
 800c224:	231f      	movcs	r3, #31
 800c226:	b2db      	uxtb	r3, r3
 800c228:	461a      	mov	r2, r3
 800c22a:	f107 0310 	add.w	r3, r7, #16
 800c22e:	3301      	adds	r3, #1
 800c230:	6839      	ldr	r1, [r7, #0]
 800c232:	4618      	mov	r0, r3
 800c234:	f000 fbf6 	bl	800ca24 <memcpy>
  
  BLUENRG_memset(&rq, 0, sizeof(rq));
 800c238:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800c23c:	2218      	movs	r2, #24
 800c23e:	2100      	movs	r1, #0
 800c240:	4618      	mov	r0, r3
 800c242:	f000 fbfd 	bl	800ca40 <memset>
  rq.ogf = OGF_LE_CTL;
 800c246:	2308      	movs	r3, #8
 800c248:	863b      	strh	r3, [r7, #48]	; 0x30
  rq.ocf = OCF_LE_SET_SCAN_RESPONSE_DATA;
 800c24a:	2309      	movs	r3, #9
 800c24c:	867b      	strh	r3, [r7, #50]	; 0x32
  rq.cparam = &scan_resp_cp;
 800c24e:	f107 0310 	add.w	r3, r7, #16
 800c252:	63bb      	str	r3, [r7, #56]	; 0x38
  rq.clen = LE_SET_SCAN_RESPONSE_DATA_CP_SIZE;
 800c254:	2320      	movs	r3, #32
 800c256:	63fb      	str	r3, [r7, #60]	; 0x3c
  rq.rparam = &status;
 800c258:	f107 030f 	add.w	r3, r7, #15
 800c25c:	643b      	str	r3, [r7, #64]	; 0x40
  rq.rlen = 1;
 800c25e:	2301      	movs	r3, #1
 800c260:	647b      	str	r3, [r7, #68]	; 0x44
  
  if (hci_send_req(&rq, FALSE) < 0)
 800c262:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800c266:	2100      	movs	r1, #0
 800c268:	4618      	mov	r0, r3
 800c26a:	f000 f907 	bl	800c47c <hci_send_req>
 800c26e:	4603      	mov	r3, r0
 800c270:	2b00      	cmp	r3, #0
 800c272:	da01      	bge.n	800c278 <hci_le_set_scan_resp_data+0x78>
    return BLE_STATUS_TIMEOUT;
 800c274:	23ff      	movs	r3, #255	; 0xff
 800c276:	e000      	b.n	800c27a <hci_le_set_scan_resp_data+0x7a>
  
  return status;
 800c278:	7bfb      	ldrb	r3, [r7, #15]
}
 800c27a:	4618      	mov	r0, r3
 800c27c:	3748      	adds	r7, #72	; 0x48
 800c27e:	46bd      	mov	sp, r7
 800c280:	bd80      	pop	{r7, pc}

0800c282 <verify_packet>:
  *
  * @param  hciReadPacket The HCI data packet
  * @retval 0: valid packet, 1: incorrect packet, 2: wrong length (packet truncated or too long)
  */
static int verify_packet(const tHciDataPacket * hciReadPacket)
{
 800c282:	b480      	push	{r7}
 800c284:	b085      	sub	sp, #20
 800c286:	af00      	add	r7, sp, #0
 800c288:	6078      	str	r0, [r7, #4]
  const uint8_t *hci_pckt = hciReadPacket->dataBuff;
 800c28a:	687b      	ldr	r3, [r7, #4]
 800c28c:	3308      	adds	r3, #8
 800c28e:	60fb      	str	r3, [r7, #12]
  
  if (hci_pckt[HCI_PCK_TYPE_OFFSET] != HCI_EVENT_PKT)
 800c290:	68fb      	ldr	r3, [r7, #12]
 800c292:	781b      	ldrb	r3, [r3, #0]
 800c294:	2b04      	cmp	r3, #4
 800c296:	d001      	beq.n	800c29c <verify_packet+0x1a>
    return 1; /* Incorrect type */
 800c298:	2301      	movs	r3, #1
 800c29a:	e00c      	b.n	800c2b6 <verify_packet+0x34>
  
  if (hci_pckt[EVENT_PARAMETER_TOT_LEN_OFFSET] != hciReadPacket->data_len - (1+HCI_EVENT_HDR_SIZE))
 800c29c:	68fb      	ldr	r3, [r7, #12]
 800c29e:	3302      	adds	r3, #2
 800c2a0:	781b      	ldrb	r3, [r3, #0]
 800c2a2:	461a      	mov	r2, r3
 800c2a4:	687b      	ldr	r3, [r7, #4]
 800c2a6:	f893 3088 	ldrb.w	r3, [r3, #136]	; 0x88
 800c2aa:	3b03      	subs	r3, #3
 800c2ac:	429a      	cmp	r2, r3
 800c2ae:	d001      	beq.n	800c2b4 <verify_packet+0x32>
    return 2; /* Wrong length (packet truncated or too long) */
 800c2b0:	2302      	movs	r3, #2
 800c2b2:	e000      	b.n	800c2b6 <verify_packet+0x34>
  
  return 0;      
 800c2b4:	2300      	movs	r3, #0
}
 800c2b6:	4618      	mov	r0, r3
 800c2b8:	3714      	adds	r7, #20
 800c2ba:	46bd      	mov	sp, r7
 800c2bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2c0:	4770      	bx	lr
	...

0800c2c4 <send_cmd>:
  * @param  plen The HCI command length
  * @param  param The HCI command parameters
  * @retval None
  */
static void send_cmd(uint16_t ogf, uint16_t ocf, uint8_t plen, void *param)
{
 800c2c4:	b580      	push	{r7, lr}
 800c2c6:	b0a6      	sub	sp, #152	; 0x98
 800c2c8:	af00      	add	r7, sp, #0
 800c2ca:	607b      	str	r3, [r7, #4]
 800c2cc:	4603      	mov	r3, r0
 800c2ce:	81fb      	strh	r3, [r7, #14]
 800c2d0:	460b      	mov	r3, r1
 800c2d2:	81bb      	strh	r3, [r7, #12]
 800c2d4:	4613      	mov	r3, r2
 800c2d6:	72fb      	strb	r3, [r7, #11]
  uint8_t payload[HCI_MAX_PAYLOAD_SIZE];  
  hci_command_hdr hc;
  
  hc.opcode = htobs(cmd_opcode_pack(ogf, ocf));
 800c2d8:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800c2dc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800c2e0:	b21a      	sxth	r2, r3
 800c2e2:	89fb      	ldrh	r3, [r7, #14]
 800c2e4:	029b      	lsls	r3, r3, #10
 800c2e6:	b21b      	sxth	r3, r3
 800c2e8:	4313      	orrs	r3, r2
 800c2ea:	b21b      	sxth	r3, r3
 800c2ec:	b29b      	uxth	r3, r3
 800c2ee:	82bb      	strh	r3, [r7, #20]
  hc.plen = plen;
 800c2f0:	7afb      	ldrb	r3, [r7, #11]
 800c2f2:	75bb      	strb	r3, [r7, #22]

  payload[0] = HCI_COMMAND_PKT;
 800c2f4:	2301      	movs	r3, #1
 800c2f6:	763b      	strb	r3, [r7, #24]
  BLUENRG_memcpy(payload + 1, &hc, sizeof(hc));
 800c2f8:	f107 0318 	add.w	r3, r7, #24
 800c2fc:	3301      	adds	r3, #1
 800c2fe:	461a      	mov	r2, r3
 800c300:	f107 0314 	add.w	r3, r7, #20
 800c304:	8819      	ldrh	r1, [r3, #0]
 800c306:	789b      	ldrb	r3, [r3, #2]
 800c308:	8011      	strh	r1, [r2, #0]
 800c30a:	7093      	strb	r3, [r2, #2]
  BLUENRG_memcpy(payload + HCI_HDR_SIZE + HCI_COMMAND_HDR_SIZE, param, plen);
 800c30c:	f107 0318 	add.w	r3, r7, #24
 800c310:	3304      	adds	r3, #4
 800c312:	7afa      	ldrb	r2, [r7, #11]
 800c314:	6879      	ldr	r1, [r7, #4]
 800c316:	4618      	mov	r0, r3
 800c318:	f000 fb84 	bl	800ca24 <memcpy>
  
  if (hciContext.io.Send)
 800c31c:	4b08      	ldr	r3, [pc, #32]	; (800c340 <send_cmd+0x7c>)
 800c31e:	691b      	ldr	r3, [r3, #16]
 800c320:	2b00      	cmp	r3, #0
 800c322:	d009      	beq.n	800c338 <send_cmd+0x74>
  {
    hciContext.io.Send (payload, HCI_HDR_SIZE + HCI_COMMAND_HDR_SIZE + plen);
 800c324:	4b06      	ldr	r3, [pc, #24]	; (800c340 <send_cmd+0x7c>)
 800c326:	691b      	ldr	r3, [r3, #16]
 800c328:	7afa      	ldrb	r2, [r7, #11]
 800c32a:	b292      	uxth	r2, r2
 800c32c:	3204      	adds	r2, #4
 800c32e:	b291      	uxth	r1, r2
 800c330:	f107 0218 	add.w	r2, r7, #24
 800c334:	4610      	mov	r0, r2
 800c336:	4798      	blx	r3
  }
}
 800c338:	bf00      	nop
 800c33a:	3798      	adds	r7, #152	; 0x98
 800c33c:	46bd      	mov	sp, r7
 800c33e:	bd80      	pop	{r7, pc}
 800c340:	200007c0 	.word	0x200007c0

0800c344 <move_list>:
  * @param  dest_list
  * @param  src_list
  * @retval None
  */
static void move_list(tListNode * dest_list, tListNode * src_list)
{
 800c344:	b580      	push	{r7, lr}
 800c346:	b084      	sub	sp, #16
 800c348:	af00      	add	r7, sp, #0
 800c34a:	6078      	str	r0, [r7, #4]
 800c34c:	6039      	str	r1, [r7, #0]
  pListNode tmp_node;
  
  while (!list_is_empty(src_list))
 800c34e:	e00a      	b.n	800c366 <move_list+0x22>
  {
    list_remove_tail(src_list, &tmp_node);
 800c350:	f107 030c 	add.w	r3, r7, #12
 800c354:	4619      	mov	r1, r3
 800c356:	6838      	ldr	r0, [r7, #0]
 800c358:	f000 faea 	bl	800c930 <list_remove_tail>
    list_insert_head(dest_list, tmp_node);
 800c35c:	68fb      	ldr	r3, [r7, #12]
 800c35e:	4619      	mov	r1, r3
 800c360:	6878      	ldr	r0, [r7, #4]
 800c362:	f000 fa51 	bl	800c808 <list_insert_head>
  while (!list_is_empty(src_list))
 800c366:	6838      	ldr	r0, [r7, #0]
 800c368:	f000 fa2c 	bl	800c7c4 <list_is_empty>
 800c36c:	4603      	mov	r3, r0
 800c36e:	2b00      	cmp	r3, #0
 800c370:	d0ee      	beq.n	800c350 <move_list+0xc>
  }
}
 800c372:	bf00      	nop
 800c374:	bf00      	nop
 800c376:	3710      	adds	r7, #16
 800c378:	46bd      	mov	sp, r7
 800c37a:	bd80      	pop	{r7, pc}

0800c37c <free_event_list>:
  *
  * @param  None
  * @retval None
  */
static void free_event_list(void)
{
 800c37c:	b580      	push	{r7, lr}
 800c37e:	b082      	sub	sp, #8
 800c380:	af00      	add	r7, sp, #0
  tHciDataPacket * pckt;

  while(list_get_size(&hciReadPktPool) < HCI_READ_PACKET_NUM_MAX/2){
 800c382:	e009      	b.n	800c398 <free_event_list+0x1c>
    list_remove_head(&hciReadPktRxQueue, (tListNode **)&pckt);    
 800c384:	1d3b      	adds	r3, r7, #4
 800c386:	4619      	mov	r1, r3
 800c388:	4809      	ldr	r0, [pc, #36]	; (800c3b0 <free_event_list+0x34>)
 800c38a:	f000 faaa 	bl	800c8e2 <list_remove_head>
    list_insert_tail(&hciReadPktPool, (tListNode *)pckt);
 800c38e:	687b      	ldr	r3, [r7, #4]
 800c390:	4619      	mov	r1, r3
 800c392:	4808      	ldr	r0, [pc, #32]	; (800c3b4 <free_event_list+0x38>)
 800c394:	f000 fa5e 	bl	800c854 <list_insert_tail>
  while(list_get_size(&hciReadPktPool) < HCI_READ_PACKET_NUM_MAX/2){
 800c398:	4806      	ldr	r0, [pc, #24]	; (800c3b4 <free_event_list+0x38>)
 800c39a:	f000 faf0 	bl	800c97e <list_get_size>
 800c39e:	4603      	mov	r3, r0
 800c3a0:	2b01      	cmp	r3, #1
 800c3a2:	ddef      	ble.n	800c384 <free_event_list+0x8>
  }
}
 800c3a4:	bf00      	nop
 800c3a6:	bf00      	nop
 800c3a8:	3708      	adds	r7, #8
 800c3aa:	46bd      	mov	sp, r7
 800c3ac:	bd80      	pop	{r7, pc}
 800c3ae:	bf00      	nop
 800c3b0:	200004fc 	.word	0x200004fc
 800c3b4:	200004f4 	.word	0x200004f4

0800c3b8 <hci_init>:

/********************** HCI Transport layer functions *****************************/

void hci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 800c3b8:	b580      	push	{r7, lr}
 800c3ba:	b084      	sub	sp, #16
 800c3bc:	af00      	add	r7, sp, #0
 800c3be:	6078      	str	r0, [r7, #4]
 800c3c0:	6039      	str	r1, [r7, #0]
  uint8_t index;

  if(UserEvtRx != NULL)
 800c3c2:	687b      	ldr	r3, [r7, #4]
 800c3c4:	2b00      	cmp	r3, #0
 800c3c6:	d002      	beq.n	800c3ce <hci_init+0x16>
  {
    hciContext.UserEvtRx = UserEvtRx;
 800c3c8:	4a18      	ldr	r2, [pc, #96]	; (800c42c <hci_init+0x74>)
 800c3ca:	687b      	ldr	r3, [r7, #4]
 800c3cc:	61d3      	str	r3, [r2, #28]
  }
  
  /* Initialize list heads of ready and free hci data packet queues */
  list_init_head(&hciReadPktPool);
 800c3ce:	4818      	ldr	r0, [pc, #96]	; (800c430 <hci_init+0x78>)
 800c3d0:	f000 f9e8 	bl	800c7a4 <list_init_head>
  list_init_head(&hciReadPktRxQueue);
 800c3d4:	4817      	ldr	r0, [pc, #92]	; (800c434 <hci_init+0x7c>)
 800c3d6:	f000 f9e5 	bl	800c7a4 <list_init_head>

  /* Initialize TL BLE layer */
  hci_tl_lowlevel_init();
 800c3da:	f7f6 fb67 	bl	8002aac <hci_tl_lowlevel_init>
    
  /* Initialize the queue of free hci data packets */
  for (index = 0; index < HCI_READ_PACKET_NUM_MAX; index++)
 800c3de:	2300      	movs	r3, #0
 800c3e0:	73fb      	strb	r3, [r7, #15]
 800c3e2:	e00c      	b.n	800c3fe <hci_init+0x46>
  {
    list_insert_tail(&hciReadPktPool, (tListNode *)&hciReadPacketBuffer[index]);
 800c3e4:	7bfb      	ldrb	r3, [r7, #15]
 800c3e6:	228c      	movs	r2, #140	; 0x8c
 800c3e8:	fb02 f303 	mul.w	r3, r2, r3
 800c3ec:	4a12      	ldr	r2, [pc, #72]	; (800c438 <hci_init+0x80>)
 800c3ee:	4413      	add	r3, r2
 800c3f0:	4619      	mov	r1, r3
 800c3f2:	480f      	ldr	r0, [pc, #60]	; (800c430 <hci_init+0x78>)
 800c3f4:	f000 fa2e 	bl	800c854 <list_insert_tail>
  for (index = 0; index < HCI_READ_PACKET_NUM_MAX; index++)
 800c3f8:	7bfb      	ldrb	r3, [r7, #15]
 800c3fa:	3301      	adds	r3, #1
 800c3fc:	73fb      	strb	r3, [r7, #15]
 800c3fe:	7bfb      	ldrb	r3, [r7, #15]
 800c400:	2b04      	cmp	r3, #4
 800c402:	d9ef      	bls.n	800c3e4 <hci_init+0x2c>
  } 
  
  /* Initialize low level driver */
  if (hciContext.io.Init)  hciContext.io.Init(NULL);
 800c404:	4b09      	ldr	r3, [pc, #36]	; (800c42c <hci_init+0x74>)
 800c406:	681b      	ldr	r3, [r3, #0]
 800c408:	2b00      	cmp	r3, #0
 800c40a:	d003      	beq.n	800c414 <hci_init+0x5c>
 800c40c:	4b07      	ldr	r3, [pc, #28]	; (800c42c <hci_init+0x74>)
 800c40e:	681b      	ldr	r3, [r3, #0]
 800c410:	2000      	movs	r0, #0
 800c412:	4798      	blx	r3
  if (hciContext.io.Reset) hciContext.io.Reset();
 800c414:	4b05      	ldr	r3, [pc, #20]	; (800c42c <hci_init+0x74>)
 800c416:	689b      	ldr	r3, [r3, #8]
 800c418:	2b00      	cmp	r3, #0
 800c41a:	d002      	beq.n	800c422 <hci_init+0x6a>
 800c41c:	4b03      	ldr	r3, [pc, #12]	; (800c42c <hci_init+0x74>)
 800c41e:	689b      	ldr	r3, [r3, #8]
 800c420:	4798      	blx	r3
}
 800c422:	bf00      	nop
 800c424:	3710      	adds	r7, #16
 800c426:	46bd      	mov	sp, r7
 800c428:	bd80      	pop	{r7, pc}
 800c42a:	bf00      	nop
 800c42c:	200007c0 	.word	0x200007c0
 800c430:	200004f4 	.word	0x200004f4
 800c434:	200004fc 	.word	0x200004fc
 800c438:	20000504 	.word	0x20000504

0800c43c <hci_register_io_bus>:

void hci_register_io_bus(tHciIO* fops)
{
 800c43c:	b480      	push	{r7}
 800c43e:	b083      	sub	sp, #12
 800c440:	af00      	add	r7, sp, #0
 800c442:	6078      	str	r0, [r7, #4]
  /* Register bus function */
  hciContext.io.Init    = fops->Init; 
 800c444:	687b      	ldr	r3, [r7, #4]
 800c446:	681b      	ldr	r3, [r3, #0]
 800c448:	4a0b      	ldr	r2, [pc, #44]	; (800c478 <hci_register_io_bus+0x3c>)
 800c44a:	6013      	str	r3, [r2, #0]
  hciContext.io.Receive = fops->Receive;  
 800c44c:	687b      	ldr	r3, [r7, #4]
 800c44e:	68db      	ldr	r3, [r3, #12]
 800c450:	4a09      	ldr	r2, [pc, #36]	; (800c478 <hci_register_io_bus+0x3c>)
 800c452:	60d3      	str	r3, [r2, #12]
  hciContext.io.Send    = fops->Send;
 800c454:	687b      	ldr	r3, [r7, #4]
 800c456:	691b      	ldr	r3, [r3, #16]
 800c458:	4a07      	ldr	r2, [pc, #28]	; (800c478 <hci_register_io_bus+0x3c>)
 800c45a:	6113      	str	r3, [r2, #16]
  hciContext.io.GetTick = fops->GetTick;
 800c45c:	687b      	ldr	r3, [r7, #4]
 800c45e:	699b      	ldr	r3, [r3, #24]
 800c460:	4a05      	ldr	r2, [pc, #20]	; (800c478 <hci_register_io_bus+0x3c>)
 800c462:	6193      	str	r3, [r2, #24]
  hciContext.io.Reset   = fops->Reset;
 800c464:	687b      	ldr	r3, [r7, #4]
 800c466:	689b      	ldr	r3, [r3, #8]
 800c468:	4a03      	ldr	r2, [pc, #12]	; (800c478 <hci_register_io_bus+0x3c>)
 800c46a:	6093      	str	r3, [r2, #8]
}
 800c46c:	bf00      	nop
 800c46e:	370c      	adds	r7, #12
 800c470:	46bd      	mov	sp, r7
 800c472:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c476:	4770      	bx	lr
 800c478:	200007c0 	.word	0x200007c0

0800c47c <hci_send_req>:

int hci_send_req(struct hci_request* r, BOOL async)
{
 800c47c:	b580      	push	{r7, lr}
 800c47e:	b08e      	sub	sp, #56	; 0x38
 800c480:	af00      	add	r7, sp, #0
 800c482:	6078      	str	r0, [r7, #4]
 800c484:	460b      	mov	r3, r1
 800c486:	70fb      	strb	r3, [r7, #3]
  uint8_t *ptr;
  uint16_t opcode = htobs(cmd_opcode_pack(r->ogf, r->ocf));
 800c488:	687b      	ldr	r3, [r7, #4]
 800c48a:	885b      	ldrh	r3, [r3, #2]
 800c48c:	b21b      	sxth	r3, r3
 800c48e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800c492:	b21a      	sxth	r2, r3
 800c494:	687b      	ldr	r3, [r7, #4]
 800c496:	881b      	ldrh	r3, [r3, #0]
 800c498:	029b      	lsls	r3, r3, #10
 800c49a:	b21b      	sxth	r3, r3
 800c49c:	4313      	orrs	r3, r2
 800c49e:	b21b      	sxth	r3, r3
 800c4a0:	86fb      	strh	r3, [r7, #54]	; 0x36
  hci_event_pckt *event_pckt;
  hci_uart_pckt *hci_hdr;

  tHciDataPacket * hciReadPacket = NULL;
 800c4a2:	2300      	movs	r3, #0
 800c4a4:	613b      	str	r3, [r7, #16]
  tListNode hciTempQueue;
  
  list_init_head(&hciTempQueue);
 800c4a6:	f107 0308 	add.w	r3, r7, #8
 800c4aa:	4618      	mov	r0, r3
 800c4ac:	f000 f97a 	bl	800c7a4 <list_init_head>

  free_event_list();
 800c4b0:	f7ff ff64 	bl	800c37c <free_event_list>
  
  send_cmd(r->ogf, r->ocf, r->clen, r->cparam);
 800c4b4:	687b      	ldr	r3, [r7, #4]
 800c4b6:	8818      	ldrh	r0, [r3, #0]
 800c4b8:	687b      	ldr	r3, [r7, #4]
 800c4ba:	8859      	ldrh	r1, [r3, #2]
 800c4bc:	687b      	ldr	r3, [r7, #4]
 800c4be:	68db      	ldr	r3, [r3, #12]
 800c4c0:	b2da      	uxtb	r2, r3
 800c4c2:	687b      	ldr	r3, [r7, #4]
 800c4c4:	689b      	ldr	r3, [r3, #8]
 800c4c6:	f7ff fefd 	bl	800c2c4 <send_cmd>
  
  if (async)
 800c4ca:	78fb      	ldrb	r3, [r7, #3]
 800c4cc:	2b00      	cmp	r3, #0
 800c4ce:	d001      	beq.n	800c4d4 <hci_send_req+0x58>
  {
    return 0;
 800c4d0:	2300      	movs	r3, #0
 800c4d2:	e0e5      	b.n	800c6a0 <hci_send_req+0x224>
    evt_cmd_complete  *cc;
    evt_cmd_status    *cs;
    evt_le_meta_event *me;
    uint32_t len;
    
    uint32_t tickstart = HAL_GetTick();
 800c4d4:	f7fc f926 	bl	8008724 <HAL_GetTick>
 800c4d8:	6338      	str	r0, [r7, #48]	; 0x30
      
    while (1)
    {
      if ((HAL_GetTick() - tickstart) > HCI_DEFAULT_TIMEOUT_MS)
 800c4da:	f7fc f923 	bl	8008724 <HAL_GetTick>
 800c4de:	4602      	mov	r2, r0
 800c4e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c4e2:	1ad3      	subs	r3, r2, r3
 800c4e4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800c4e8:	f200 80b6 	bhi.w	800c658 <hci_send_req+0x1dc>
      {
        goto failed;
      }
      
      if (!list_is_empty(&hciReadPktRxQueue)) 
 800c4ec:	486e      	ldr	r0, [pc, #440]	; (800c6a8 <hci_send_req+0x22c>)
 800c4ee:	f000 f969 	bl	800c7c4 <list_is_empty>
 800c4f2:	4603      	mov	r3, r0
 800c4f4:	2b00      	cmp	r3, #0
 800c4f6:	d000      	beq.n	800c4fa <hci_send_req+0x7e>
      if ((HAL_GetTick() - tickstart) > HCI_DEFAULT_TIMEOUT_MS)
 800c4f8:	e7ef      	b.n	800c4da <hci_send_req+0x5e>
      {
        break;
 800c4fa:	bf00      	nop
      }
    }
    
    /* Extract packet from HCI event queue. */
    list_remove_head(&hciReadPktRxQueue, (tListNode **)&hciReadPacket);    
 800c4fc:	f107 0310 	add.w	r3, r7, #16
 800c500:	4619      	mov	r1, r3
 800c502:	4869      	ldr	r0, [pc, #420]	; (800c6a8 <hci_send_req+0x22c>)
 800c504:	f000 f9ed 	bl	800c8e2 <list_remove_head>
    
    hci_hdr = (void *)hciReadPacket->dataBuff;
 800c508:	693b      	ldr	r3, [r7, #16]
 800c50a:	3308      	adds	r3, #8
 800c50c:	62fb      	str	r3, [r7, #44]	; 0x2c

    if (hci_hdr->type == HCI_EVENT_PKT)
 800c50e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c510:	781b      	ldrb	r3, [r3, #0]
 800c512:	2b04      	cmp	r3, #4
 800c514:	d17b      	bne.n	800c60e <hci_send_req+0x192>
    {
      event_pckt = (void *)(hci_hdr->data);
 800c516:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c518:	3301      	adds	r3, #1
 800c51a:	62bb      	str	r3, [r7, #40]	; 0x28
    
      ptr = hciReadPacket->dataBuff + (1 + HCI_EVENT_HDR_SIZE);
 800c51c:	693b      	ldr	r3, [r7, #16]
 800c51e:	3308      	adds	r3, #8
 800c520:	3303      	adds	r3, #3
 800c522:	627b      	str	r3, [r7, #36]	; 0x24
      len = hciReadPacket->data_len - (1 + HCI_EVENT_HDR_SIZE);
 800c524:	693b      	ldr	r3, [r7, #16]
 800c526:	f893 3088 	ldrb.w	r3, [r3, #136]	; 0x88
 800c52a:	3b03      	subs	r3, #3
 800c52c:	623b      	str	r3, [r7, #32]
    
      switch (event_pckt->evt) 
 800c52e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c530:	781b      	ldrb	r3, [r3, #0]
 800c532:	2b3e      	cmp	r3, #62	; 0x3e
 800c534:	d04d      	beq.n	800c5d2 <hci_send_req+0x156>
 800c536:	2b3e      	cmp	r3, #62	; 0x3e
 800c538:	dc6b      	bgt.n	800c612 <hci_send_req+0x196>
 800c53a:	2b10      	cmp	r3, #16
 800c53c:	f000 808e 	beq.w	800c65c <hci_send_req+0x1e0>
 800c540:	2b10      	cmp	r3, #16
 800c542:	dc66      	bgt.n	800c612 <hci_send_req+0x196>
 800c544:	2b0e      	cmp	r3, #14
 800c546:	d024      	beq.n	800c592 <hci_send_req+0x116>
 800c548:	2b0f      	cmp	r3, #15
 800c54a:	d162      	bne.n	800c612 <hci_send_req+0x196>
      {      
      case EVT_CMD_STATUS:
        cs = (void *) ptr;
 800c54c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c54e:	61bb      	str	r3, [r7, #24]
        
        if (cs->opcode != opcode)
 800c550:	69bb      	ldr	r3, [r7, #24]
 800c552:	885b      	ldrh	r3, [r3, #2]
 800c554:	b29b      	uxth	r3, r3
 800c556:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800c558:	429a      	cmp	r2, r3
 800c55a:	f040 8081 	bne.w	800c660 <hci_send_req+0x1e4>
          goto failed;
        
        if (r->event != EVT_CMD_STATUS) {
 800c55e:	687b      	ldr	r3, [r7, #4]
 800c560:	685b      	ldr	r3, [r3, #4]
 800c562:	2b0f      	cmp	r3, #15
 800c564:	d004      	beq.n	800c570 <hci_send_req+0xf4>
          if (cs->status) {
 800c566:	69bb      	ldr	r3, [r7, #24]
 800c568:	781b      	ldrb	r3, [r3, #0]
 800c56a:	2b00      	cmp	r3, #0
 800c56c:	d053      	beq.n	800c616 <hci_send_req+0x19a>
            goto failed;
 800c56e:	e07a      	b.n	800c666 <hci_send_req+0x1ea>
          }
          break;
        }

        r->rlen = MIN(len, r->rlen);
 800c570:	687b      	ldr	r3, [r7, #4]
 800c572:	695a      	ldr	r2, [r3, #20]
 800c574:	6a3b      	ldr	r3, [r7, #32]
 800c576:	429a      	cmp	r2, r3
 800c578:	bf28      	it	cs
 800c57a:	461a      	movcs	r2, r3
 800c57c:	687b      	ldr	r3, [r7, #4]
 800c57e:	615a      	str	r2, [r3, #20]
        BLUENRG_memcpy(r->rparam, ptr, r->rlen);
 800c580:	687b      	ldr	r3, [r7, #4]
 800c582:	6918      	ldr	r0, [r3, #16]
 800c584:	687b      	ldr	r3, [r7, #4]
 800c586:	695b      	ldr	r3, [r3, #20]
 800c588:	461a      	mov	r2, r3
 800c58a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800c58c:	f000 fa4a 	bl	800ca24 <memcpy>
        goto done;
 800c590:	e07a      	b.n	800c688 <hci_send_req+0x20c>
      
      case EVT_CMD_COMPLETE:
        cc = (void *) ptr;
 800c592:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c594:	617b      	str	r3, [r7, #20]
      
        if (cc->opcode != opcode)
 800c596:	697b      	ldr	r3, [r7, #20]
 800c598:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800c59c:	b29b      	uxth	r3, r3
 800c59e:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800c5a0:	429a      	cmp	r2, r3
 800c5a2:	d15f      	bne.n	800c664 <hci_send_req+0x1e8>
          goto failed;
      
        ptr += EVT_CMD_COMPLETE_SIZE;
 800c5a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c5a6:	3303      	adds	r3, #3
 800c5a8:	627b      	str	r3, [r7, #36]	; 0x24
        len -= EVT_CMD_COMPLETE_SIZE;
 800c5aa:	6a3b      	ldr	r3, [r7, #32]
 800c5ac:	3b03      	subs	r3, #3
 800c5ae:	623b      	str	r3, [r7, #32]
      
        r->rlen = MIN(len, r->rlen);
 800c5b0:	687b      	ldr	r3, [r7, #4]
 800c5b2:	695a      	ldr	r2, [r3, #20]
 800c5b4:	6a3b      	ldr	r3, [r7, #32]
 800c5b6:	429a      	cmp	r2, r3
 800c5b8:	bf28      	it	cs
 800c5ba:	461a      	movcs	r2, r3
 800c5bc:	687b      	ldr	r3, [r7, #4]
 800c5be:	615a      	str	r2, [r3, #20]
        BLUENRG_memcpy(r->rparam, ptr, r->rlen);
 800c5c0:	687b      	ldr	r3, [r7, #4]
 800c5c2:	6918      	ldr	r0, [r3, #16]
 800c5c4:	687b      	ldr	r3, [r7, #4]
 800c5c6:	695b      	ldr	r3, [r3, #20]
 800c5c8:	461a      	mov	r2, r3
 800c5ca:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800c5cc:	f000 fa2a 	bl	800ca24 <memcpy>
        goto done;
 800c5d0:	e05a      	b.n	800c688 <hci_send_req+0x20c>
      
      case EVT_LE_META_EVENT:
        me = (void *) ptr;
 800c5d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c5d4:	61fb      	str	r3, [r7, #28]
      
        if (me->subevent != r->event)
 800c5d6:	69fb      	ldr	r3, [r7, #28]
 800c5d8:	781b      	ldrb	r3, [r3, #0]
 800c5da:	461a      	mov	r2, r3
 800c5dc:	687b      	ldr	r3, [r7, #4]
 800c5de:	685b      	ldr	r3, [r3, #4]
 800c5e0:	429a      	cmp	r2, r3
 800c5e2:	d11a      	bne.n	800c61a <hci_send_req+0x19e>
          break;
      
        len -= 1;
 800c5e4:	6a3b      	ldr	r3, [r7, #32]
 800c5e6:	3b01      	subs	r3, #1
 800c5e8:	623b      	str	r3, [r7, #32]
        r->rlen = MIN(len, r->rlen);
 800c5ea:	687b      	ldr	r3, [r7, #4]
 800c5ec:	695a      	ldr	r2, [r3, #20]
 800c5ee:	6a3b      	ldr	r3, [r7, #32]
 800c5f0:	429a      	cmp	r2, r3
 800c5f2:	bf28      	it	cs
 800c5f4:	461a      	movcs	r2, r3
 800c5f6:	687b      	ldr	r3, [r7, #4]
 800c5f8:	615a      	str	r2, [r3, #20]
        BLUENRG_memcpy(r->rparam, me->data, r->rlen);
 800c5fa:	687b      	ldr	r3, [r7, #4]
 800c5fc:	6918      	ldr	r0, [r3, #16]
 800c5fe:	69fb      	ldr	r3, [r7, #28]
 800c600:	1c59      	adds	r1, r3, #1
 800c602:	687b      	ldr	r3, [r7, #4]
 800c604:	695b      	ldr	r3, [r3, #20]
 800c606:	461a      	mov	r2, r3
 800c608:	f000 fa0c 	bl	800ca24 <memcpy>
        goto done;
 800c60c:	e03c      	b.n	800c688 <hci_send_req+0x20c>
        goto failed;
      
      default:      
        break;
      }
    }
 800c60e:	bf00      	nop
 800c610:	e004      	b.n	800c61c <hci_send_req+0x1a0>
        break;
 800c612:	bf00      	nop
 800c614:	e002      	b.n	800c61c <hci_send_req+0x1a0>
          break;
 800c616:	bf00      	nop
 800c618:	e000      	b.n	800c61c <hci_send_req+0x1a0>
          break;
 800c61a:	bf00      	nop
    
    /* If there are no more packets to be processed, be sure there is at list one
       packet in the pool to process the expected event.
       If no free packets are available, discard the processed event and insert it
       into the pool. */
    if (list_is_empty(&hciReadPktPool) && list_is_empty(&hciReadPktRxQueue)) {
 800c61c:	4823      	ldr	r0, [pc, #140]	; (800c6ac <hci_send_req+0x230>)
 800c61e:	f000 f8d1 	bl	800c7c4 <list_is_empty>
 800c622:	4603      	mov	r3, r0
 800c624:	2b00      	cmp	r3, #0
 800c626:	d00d      	beq.n	800c644 <hci_send_req+0x1c8>
 800c628:	481f      	ldr	r0, [pc, #124]	; (800c6a8 <hci_send_req+0x22c>)
 800c62a:	f000 f8cb 	bl	800c7c4 <list_is_empty>
 800c62e:	4603      	mov	r3, r0
 800c630:	2b00      	cmp	r3, #0
 800c632:	d007      	beq.n	800c644 <hci_send_req+0x1c8>
      list_insert_tail(&hciReadPktPool, (tListNode *)hciReadPacket);
 800c634:	693b      	ldr	r3, [r7, #16]
 800c636:	4619      	mov	r1, r3
 800c638:	481c      	ldr	r0, [pc, #112]	; (800c6ac <hci_send_req+0x230>)
 800c63a:	f000 f90b 	bl	800c854 <list_insert_tail>
      hciReadPacket=NULL;
 800c63e:	2300      	movs	r3, #0
 800c640:	613b      	str	r3, [r7, #16]
 800c642:	e008      	b.n	800c656 <hci_send_req+0x1da>
    else {
      /* Insert the packet in a different queue. These packets will be
      inserted back in the main queue just before exiting from send_req(), so that
      these events can be processed by the application.
    */
    list_insert_tail(&hciTempQueue, (tListNode *)hciReadPacket);
 800c644:	693a      	ldr	r2, [r7, #16]
 800c646:	f107 0308 	add.w	r3, r7, #8
 800c64a:	4611      	mov	r1, r2
 800c64c:	4618      	mov	r0, r3
 800c64e:	f000 f901 	bl	800c854 <list_insert_tail>
      hciReadPacket=NULL;
 800c652:	2300      	movs	r3, #0
 800c654:	613b      	str	r3, [r7, #16]
  {
 800c656:	e73d      	b.n	800c4d4 <hci_send_req+0x58>
        goto failed;
 800c658:	bf00      	nop
 800c65a:	e004      	b.n	800c666 <hci_send_req+0x1ea>
        goto failed;
 800c65c:	bf00      	nop
 800c65e:	e002      	b.n	800c666 <hci_send_req+0x1ea>
          goto failed;
 800c660:	bf00      	nop
 800c662:	e000      	b.n	800c666 <hci_send_req+0x1ea>
          goto failed;
 800c664:	bf00      	nop
    }
  }
  
failed: 
  if (hciReadPacket!=NULL) {
 800c666:	693b      	ldr	r3, [r7, #16]
 800c668:	2b00      	cmp	r3, #0
 800c66a:	d004      	beq.n	800c676 <hci_send_req+0x1fa>
    list_insert_head(&hciReadPktPool, (tListNode *)hciReadPacket);
 800c66c:	693b      	ldr	r3, [r7, #16]
 800c66e:	4619      	mov	r1, r3
 800c670:	480e      	ldr	r0, [pc, #56]	; (800c6ac <hci_send_req+0x230>)
 800c672:	f000 f8c9 	bl	800c808 <list_insert_head>
  }
  move_list(&hciReadPktRxQueue, &hciTempQueue);
 800c676:	f107 0308 	add.w	r3, r7, #8
 800c67a:	4619      	mov	r1, r3
 800c67c:	480a      	ldr	r0, [pc, #40]	; (800c6a8 <hci_send_req+0x22c>)
 800c67e:	f7ff fe61 	bl	800c344 <move_list>

  return -1;
 800c682:	f04f 33ff 	mov.w	r3, #4294967295
 800c686:	e00b      	b.n	800c6a0 <hci_send_req+0x224>
  
done:
  /* Insert the packet back into the pool.*/
  list_insert_head(&hciReadPktPool, (tListNode *)hciReadPacket); 
 800c688:	693b      	ldr	r3, [r7, #16]
 800c68a:	4619      	mov	r1, r3
 800c68c:	4807      	ldr	r0, [pc, #28]	; (800c6ac <hci_send_req+0x230>)
 800c68e:	f000 f8bb 	bl	800c808 <list_insert_head>
  move_list(&hciReadPktRxQueue, &hciTempQueue);
 800c692:	f107 0308 	add.w	r3, r7, #8
 800c696:	4619      	mov	r1, r3
 800c698:	4803      	ldr	r0, [pc, #12]	; (800c6a8 <hci_send_req+0x22c>)
 800c69a:	f7ff fe53 	bl	800c344 <move_list>

  return 0;
 800c69e:	2300      	movs	r3, #0
}
 800c6a0:	4618      	mov	r0, r3
 800c6a2:	3738      	adds	r7, #56	; 0x38
 800c6a4:	46bd      	mov	sp, r7
 800c6a6:	bd80      	pop	{r7, pc}
 800c6a8:	200004fc 	.word	0x200004fc
 800c6ac:	200004f4 	.word	0x200004f4

0800c6b0 <hci_user_evt_proc>:

void hci_user_evt_proc(void)
{
 800c6b0:	b580      	push	{r7, lr}
 800c6b2:	b082      	sub	sp, #8
 800c6b4:	af00      	add	r7, sp, #0
  tHciDataPacket * hciReadPacket = NULL;
 800c6b6:	2300      	movs	r3, #0
 800c6b8:	607b      	str	r3, [r7, #4]
     
  /* process any pending events read */
  while (list_is_empty(&hciReadPktRxQueue) == FALSE)
 800c6ba:	e013      	b.n	800c6e4 <hci_user_evt_proc+0x34>
  {
    list_remove_head (&hciReadPktRxQueue, (tListNode **)&hciReadPacket);
 800c6bc:	1d3b      	adds	r3, r7, #4
 800c6be:	4619      	mov	r1, r3
 800c6c0:	480e      	ldr	r0, [pc, #56]	; (800c6fc <hci_user_evt_proc+0x4c>)
 800c6c2:	f000 f90e 	bl	800c8e2 <list_remove_head>

    if (hciContext.UserEvtRx != NULL)
 800c6c6:	4b0e      	ldr	r3, [pc, #56]	; (800c700 <hci_user_evt_proc+0x50>)
 800c6c8:	69db      	ldr	r3, [r3, #28]
 800c6ca:	2b00      	cmp	r3, #0
 800c6cc:	d005      	beq.n	800c6da <hci_user_evt_proc+0x2a>
    {
      hciContext.UserEvtRx(hciReadPacket->dataBuff);
 800c6ce:	4b0c      	ldr	r3, [pc, #48]	; (800c700 <hci_user_evt_proc+0x50>)
 800c6d0:	69db      	ldr	r3, [r3, #28]
 800c6d2:	687a      	ldr	r2, [r7, #4]
 800c6d4:	3208      	adds	r2, #8
 800c6d6:	4610      	mov	r0, r2
 800c6d8:	4798      	blx	r3
    }

    list_insert_tail(&hciReadPktPool, (tListNode *)hciReadPacket);
 800c6da:	687b      	ldr	r3, [r7, #4]
 800c6dc:	4619      	mov	r1, r3
 800c6de:	4809      	ldr	r0, [pc, #36]	; (800c704 <hci_user_evt_proc+0x54>)
 800c6e0:	f000 f8b8 	bl	800c854 <list_insert_tail>
  while (list_is_empty(&hciReadPktRxQueue) == FALSE)
 800c6e4:	4805      	ldr	r0, [pc, #20]	; (800c6fc <hci_user_evt_proc+0x4c>)
 800c6e6:	f000 f86d 	bl	800c7c4 <list_is_empty>
 800c6ea:	4603      	mov	r3, r0
 800c6ec:	2b00      	cmp	r3, #0
 800c6ee:	d0e5      	beq.n	800c6bc <hci_user_evt_proc+0xc>
  }
}
 800c6f0:	bf00      	nop
 800c6f2:	bf00      	nop
 800c6f4:	3708      	adds	r7, #8
 800c6f6:	46bd      	mov	sp, r7
 800c6f8:	bd80      	pop	{r7, pc}
 800c6fa:	bf00      	nop
 800c6fc:	200004fc 	.word	0x200004fc
 800c700:	200007c0 	.word	0x200007c0
 800c704:	200004f4 	.word	0x200004f4

0800c708 <hci_notify_asynch_evt>:

int32_t hci_notify_asynch_evt(void* pdata)
{
 800c708:	b580      	push	{r7, lr}
 800c70a:	b086      	sub	sp, #24
 800c70c:	af00      	add	r7, sp, #0
 800c70e:	6078      	str	r0, [r7, #4]
  tHciDataPacket * hciReadPacket = NULL;
 800c710:	2300      	movs	r3, #0
 800c712:	60fb      	str	r3, [r7, #12]
  uint8_t data_len;
  
  int32_t ret = 0;
 800c714:	2300      	movs	r3, #0
 800c716:	617b      	str	r3, [r7, #20]
  
  if (list_is_empty (&hciReadPktPool) == FALSE)
 800c718:	481f      	ldr	r0, [pc, #124]	; (800c798 <hci_notify_asynch_evt+0x90>)
 800c71a:	f000 f853 	bl	800c7c4 <list_is_empty>
 800c71e:	4603      	mov	r3, r0
 800c720:	2b00      	cmp	r3, #0
 800c722:	d132      	bne.n	800c78a <hci_notify_asynch_evt+0x82>
  {
    /* Queuing a packet to read */
    list_remove_head (&hciReadPktPool, (tListNode **)&hciReadPacket);
 800c724:	f107 030c 	add.w	r3, r7, #12
 800c728:	4619      	mov	r1, r3
 800c72a:	481b      	ldr	r0, [pc, #108]	; (800c798 <hci_notify_asynch_evt+0x90>)
 800c72c:	f000 f8d9 	bl	800c8e2 <list_remove_head>
    
    if (hciContext.io.Receive)
 800c730:	4b1a      	ldr	r3, [pc, #104]	; (800c79c <hci_notify_asynch_evt+0x94>)
 800c732:	68db      	ldr	r3, [r3, #12]
 800c734:	2b00      	cmp	r3, #0
 800c736:	d02a      	beq.n	800c78e <hci_notify_asynch_evt+0x86>
    {
      data_len = hciContext.io.Receive(hciReadPacket->dataBuff, HCI_READ_PACKET_SIZE);
 800c738:	4b18      	ldr	r3, [pc, #96]	; (800c79c <hci_notify_asynch_evt+0x94>)
 800c73a:	68db      	ldr	r3, [r3, #12]
 800c73c:	68fa      	ldr	r2, [r7, #12]
 800c73e:	3208      	adds	r2, #8
 800c740:	2180      	movs	r1, #128	; 0x80
 800c742:	4610      	mov	r0, r2
 800c744:	4798      	blx	r3
 800c746:	4603      	mov	r3, r0
 800c748:	74fb      	strb	r3, [r7, #19]
      if (data_len > 0)
 800c74a:	7cfb      	ldrb	r3, [r7, #19]
 800c74c:	2b00      	cmp	r3, #0
 800c74e:	d016      	beq.n	800c77e <hci_notify_asynch_evt+0x76>
      {                    
        hciReadPacket->data_len = data_len;
 800c750:	68fb      	ldr	r3, [r7, #12]
 800c752:	7cfa      	ldrb	r2, [r7, #19]
 800c754:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
        if (verify_packet(hciReadPacket) == 0)
 800c758:	68fb      	ldr	r3, [r7, #12]
 800c75a:	4618      	mov	r0, r3
 800c75c:	f7ff fd91 	bl	800c282 <verify_packet>
 800c760:	4603      	mov	r3, r0
 800c762:	2b00      	cmp	r3, #0
 800c764:	d105      	bne.n	800c772 <hci_notify_asynch_evt+0x6a>
          list_insert_tail(&hciReadPktRxQueue, (tListNode *)hciReadPacket);
 800c766:	68fb      	ldr	r3, [r7, #12]
 800c768:	4619      	mov	r1, r3
 800c76a:	480d      	ldr	r0, [pc, #52]	; (800c7a0 <hci_notify_asynch_evt+0x98>)
 800c76c:	f000 f872 	bl	800c854 <list_insert_tail>
 800c770:	e00d      	b.n	800c78e <hci_notify_asynch_evt+0x86>
        else
          list_insert_head(&hciReadPktPool, (tListNode *)hciReadPacket);          
 800c772:	68fb      	ldr	r3, [r7, #12]
 800c774:	4619      	mov	r1, r3
 800c776:	4808      	ldr	r0, [pc, #32]	; (800c798 <hci_notify_asynch_evt+0x90>)
 800c778:	f000 f846 	bl	800c808 <list_insert_head>
 800c77c:	e007      	b.n	800c78e <hci_notify_asynch_evt+0x86>
      }
      else 
      {
        /* Insert the packet back into the pool*/
        list_insert_head(&hciReadPktPool, (tListNode *)hciReadPacket);
 800c77e:	68fb      	ldr	r3, [r7, #12]
 800c780:	4619      	mov	r1, r3
 800c782:	4805      	ldr	r0, [pc, #20]	; (800c798 <hci_notify_asynch_evt+0x90>)
 800c784:	f000 f840 	bl	800c808 <list_insert_head>
 800c788:	e001      	b.n	800c78e <hci_notify_asynch_evt+0x86>
      }
    }
  }
  else 
  {
    ret = 1;
 800c78a:	2301      	movs	r3, #1
 800c78c:	617b      	str	r3, [r7, #20]
  }
  return ret;
 800c78e:	697b      	ldr	r3, [r7, #20]

}
 800c790:	4618      	mov	r0, r3
 800c792:	3718      	adds	r7, #24
 800c794:	46bd      	mov	sp, r7
 800c796:	bd80      	pop	{r7, pc}
 800c798:	200004f4 	.word	0x200004f4
 800c79c:	200007c0 	.word	0x200007c0
 800c7a0:	200004fc 	.word	0x200004fc

0800c7a4 <list_init_head>:

/******************************************************************************
 * Function Definitions 
******************************************************************************/
void list_init_head (tListNode * listHead)
{
 800c7a4:	b480      	push	{r7}
 800c7a6:	b083      	sub	sp, #12
 800c7a8:	af00      	add	r7, sp, #0
 800c7aa:	6078      	str	r0, [r7, #4]
  listHead->next = listHead;
 800c7ac:	687b      	ldr	r3, [r7, #4]
 800c7ae:	687a      	ldr	r2, [r7, #4]
 800c7b0:	601a      	str	r2, [r3, #0]
  listHead->prev = listHead;	
 800c7b2:	687b      	ldr	r3, [r7, #4]
 800c7b4:	687a      	ldr	r2, [r7, #4]
 800c7b6:	605a      	str	r2, [r3, #4]
}
 800c7b8:	bf00      	nop
 800c7ba:	370c      	adds	r7, #12
 800c7bc:	46bd      	mov	sp, r7
 800c7be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7c2:	4770      	bx	lr

0800c7c4 <list_is_empty>:

uint8_t list_is_empty (tListNode * listHead)
{
 800c7c4:	b480      	push	{r7}
 800c7c6:	b087      	sub	sp, #28
 800c7c8:	af00      	add	r7, sp, #0
 800c7ca:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800c7cc:	f3ef 8310 	mrs	r3, PRIMASK
 800c7d0:	60fb      	str	r3, [r7, #12]
  return(result);
 800c7d2:	68fb      	ldr	r3, [r7, #12]
  uint8_t return_value;
  
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800c7d4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 800c7d6:	b672      	cpsid	i
}
 800c7d8:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
   
  if(listHead->next == listHead)
 800c7da:	687b      	ldr	r3, [r7, #4]
 800c7dc:	681b      	ldr	r3, [r3, #0]
 800c7de:	687a      	ldr	r2, [r7, #4]
 800c7e0:	429a      	cmp	r2, r3
 800c7e2:	d102      	bne.n	800c7ea <list_is_empty+0x26>
  {
    return_value = 1;
 800c7e4:	2301      	movs	r3, #1
 800c7e6:	75fb      	strb	r3, [r7, #23]
 800c7e8:	e001      	b.n	800c7ee <list_is_empty+0x2a>
  }
  else
  {
    return_value = 0;
 800c7ea:	2300      	movs	r3, #0
 800c7ec:	75fb      	strb	r3, [r7, #23]
 800c7ee:	693b      	ldr	r3, [r7, #16]
 800c7f0:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c7f2:	68bb      	ldr	r3, [r7, #8]
 800c7f4:	f383 8810 	msr	PRIMASK, r3
}
 800c7f8:	bf00      	nop
  }
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
  
  return return_value;
 800c7fa:	7dfb      	ldrb	r3, [r7, #23]
}
 800c7fc:	4618      	mov	r0, r3
 800c7fe:	371c      	adds	r7, #28
 800c800:	46bd      	mov	sp, r7
 800c802:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c806:	4770      	bx	lr

0800c808 <list_insert_head>:

void list_insert_head (tListNode * listHead, tListNode * node)
{
 800c808:	b480      	push	{r7}
 800c80a:	b087      	sub	sp, #28
 800c80c:	af00      	add	r7, sp, #0
 800c80e:	6078      	str	r0, [r7, #4]
 800c810:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800c812:	f3ef 8310 	mrs	r3, PRIMASK
 800c816:	60fb      	str	r3, [r7, #12]
  return(result);
 800c818:	68fb      	ldr	r3, [r7, #12]
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800c81a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800c81c:	b672      	cpsid	i
}
 800c81e:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  
  node->next = listHead->next;
 800c820:	687b      	ldr	r3, [r7, #4]
 800c822:	681a      	ldr	r2, [r3, #0]
 800c824:	683b      	ldr	r3, [r7, #0]
 800c826:	601a      	str	r2, [r3, #0]
  node->prev = listHead;
 800c828:	683b      	ldr	r3, [r7, #0]
 800c82a:	687a      	ldr	r2, [r7, #4]
 800c82c:	605a      	str	r2, [r3, #4]
  listHead->next = node;
 800c82e:	687b      	ldr	r3, [r7, #4]
 800c830:	683a      	ldr	r2, [r7, #0]
 800c832:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node;
 800c834:	683b      	ldr	r3, [r7, #0]
 800c836:	681b      	ldr	r3, [r3, #0]
 800c838:	683a      	ldr	r2, [r7, #0]
 800c83a:	605a      	str	r2, [r3, #4]
 800c83c:	697b      	ldr	r3, [r7, #20]
 800c83e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c840:	693b      	ldr	r3, [r7, #16]
 800c842:	f383 8810 	msr	PRIMASK, r3
}
 800c846:	bf00      	nop
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}
 800c848:	bf00      	nop
 800c84a:	371c      	adds	r7, #28
 800c84c:	46bd      	mov	sp, r7
 800c84e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c852:	4770      	bx	lr

0800c854 <list_insert_tail>:

void list_insert_tail (tListNode * listHead, tListNode * node)
{
 800c854:	b480      	push	{r7}
 800c856:	b087      	sub	sp, #28
 800c858:	af00      	add	r7, sp, #0
 800c85a:	6078      	str	r0, [r7, #4]
 800c85c:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800c85e:	f3ef 8310 	mrs	r3, PRIMASK
 800c862:	60fb      	str	r3, [r7, #12]
  return(result);
 800c864:	68fb      	ldr	r3, [r7, #12]
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800c866:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800c868:	b672      	cpsid	i
}
 800c86a:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  
  node->next = listHead;
 800c86c:	683b      	ldr	r3, [r7, #0]
 800c86e:	687a      	ldr	r2, [r7, #4]
 800c870:	601a      	str	r2, [r3, #0]
  node->prev = listHead->prev;
 800c872:	687b      	ldr	r3, [r7, #4]
 800c874:	685a      	ldr	r2, [r3, #4]
 800c876:	683b      	ldr	r3, [r7, #0]
 800c878:	605a      	str	r2, [r3, #4]
  listHead->prev = node;
 800c87a:	687b      	ldr	r3, [r7, #4]
 800c87c:	683a      	ldr	r2, [r7, #0]
 800c87e:	605a      	str	r2, [r3, #4]
  (node->prev)->next = node;
 800c880:	683b      	ldr	r3, [r7, #0]
 800c882:	685b      	ldr	r3, [r3, #4]
 800c884:	683a      	ldr	r2, [r7, #0]
 800c886:	601a      	str	r2, [r3, #0]
 800c888:	697b      	ldr	r3, [r7, #20]
 800c88a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c88c:	693b      	ldr	r3, [r7, #16]
 800c88e:	f383 8810 	msr	PRIMASK, r3
}
 800c892:	bf00      	nop
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}
 800c894:	bf00      	nop
 800c896:	371c      	adds	r7, #28
 800c898:	46bd      	mov	sp, r7
 800c89a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c89e:	4770      	bx	lr

0800c8a0 <list_remove_node>:

void list_remove_node (tListNode * node)
{
 800c8a0:	b480      	push	{r7}
 800c8a2:	b087      	sub	sp, #28
 800c8a4:	af00      	add	r7, sp, #0
 800c8a6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800c8a8:	f3ef 8310 	mrs	r3, PRIMASK
 800c8ac:	60fb      	str	r3, [r7, #12]
  return(result);
 800c8ae:	68fb      	ldr	r3, [r7, #12]
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800c8b0:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800c8b2:	b672      	cpsid	i
}
 800c8b4:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  
  (node->prev)->next = node->next;
 800c8b6:	687b      	ldr	r3, [r7, #4]
 800c8b8:	685b      	ldr	r3, [r3, #4]
 800c8ba:	687a      	ldr	r2, [r7, #4]
 800c8bc:	6812      	ldr	r2, [r2, #0]
 800c8be:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node->prev;
 800c8c0:	687b      	ldr	r3, [r7, #4]
 800c8c2:	681b      	ldr	r3, [r3, #0]
 800c8c4:	687a      	ldr	r2, [r7, #4]
 800c8c6:	6852      	ldr	r2, [r2, #4]
 800c8c8:	605a      	str	r2, [r3, #4]
 800c8ca:	697b      	ldr	r3, [r7, #20]
 800c8cc:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c8ce:	693b      	ldr	r3, [r7, #16]
 800c8d0:	f383 8810 	msr	PRIMASK, r3
}
 800c8d4:	bf00      	nop
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}
 800c8d6:	bf00      	nop
 800c8d8:	371c      	adds	r7, #28
 800c8da:	46bd      	mov	sp, r7
 800c8dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8e0:	4770      	bx	lr

0800c8e2 <list_remove_head>:

void list_remove_head (tListNode * listHead, tListNode ** node )
{
 800c8e2:	b580      	push	{r7, lr}
 800c8e4:	b086      	sub	sp, #24
 800c8e6:	af00      	add	r7, sp, #0
 800c8e8:	6078      	str	r0, [r7, #4]
 800c8ea:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800c8ec:	f3ef 8310 	mrs	r3, PRIMASK
 800c8f0:	60fb      	str	r3, [r7, #12]
  return(result);
 800c8f2:	68fb      	ldr	r3, [r7, #12]
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800c8f4:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800c8f6:	b672      	cpsid	i
}
 800c8f8:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  
  *node = listHead->next;
 800c8fa:	687b      	ldr	r3, [r7, #4]
 800c8fc:	681a      	ldr	r2, [r3, #0]
 800c8fe:	683b      	ldr	r3, [r7, #0]
 800c900:	601a      	str	r2, [r3, #0]
  list_remove_node (listHead->next);
 800c902:	687b      	ldr	r3, [r7, #4]
 800c904:	681b      	ldr	r3, [r3, #0]
 800c906:	4618      	mov	r0, r3
 800c908:	f7ff ffca 	bl	800c8a0 <list_remove_node>
  (*node)->next = NULL;
 800c90c:	683b      	ldr	r3, [r7, #0]
 800c90e:	681b      	ldr	r3, [r3, #0]
 800c910:	2200      	movs	r2, #0
 800c912:	601a      	str	r2, [r3, #0]
  (*node)->prev = NULL;
 800c914:	683b      	ldr	r3, [r7, #0]
 800c916:	681b      	ldr	r3, [r3, #0]
 800c918:	2200      	movs	r2, #0
 800c91a:	605a      	str	r2, [r3, #4]
 800c91c:	697b      	ldr	r3, [r7, #20]
 800c91e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c920:	693b      	ldr	r3, [r7, #16]
 800c922:	f383 8810 	msr	PRIMASK, r3
}
 800c926:	bf00      	nop
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}
 800c928:	bf00      	nop
 800c92a:	3718      	adds	r7, #24
 800c92c:	46bd      	mov	sp, r7
 800c92e:	bd80      	pop	{r7, pc}

0800c930 <list_remove_tail>:

void list_remove_tail (tListNode * listHead, tListNode ** node )
{
 800c930:	b580      	push	{r7, lr}
 800c932:	b086      	sub	sp, #24
 800c934:	af00      	add	r7, sp, #0
 800c936:	6078      	str	r0, [r7, #4]
 800c938:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800c93a:	f3ef 8310 	mrs	r3, PRIMASK
 800c93e:	60fb      	str	r3, [r7, #12]
  return(result);
 800c940:	68fb      	ldr	r3, [r7, #12]
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800c942:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800c944:	b672      	cpsid	i
}
 800c946:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  
  *node = listHead->prev;
 800c948:	687b      	ldr	r3, [r7, #4]
 800c94a:	685a      	ldr	r2, [r3, #4]
 800c94c:	683b      	ldr	r3, [r7, #0]
 800c94e:	601a      	str	r2, [r3, #0]
  list_remove_node (listHead->prev);
 800c950:	687b      	ldr	r3, [r7, #4]
 800c952:	685b      	ldr	r3, [r3, #4]
 800c954:	4618      	mov	r0, r3
 800c956:	f7ff ffa3 	bl	800c8a0 <list_remove_node>
  (*node)->next = NULL;
 800c95a:	683b      	ldr	r3, [r7, #0]
 800c95c:	681b      	ldr	r3, [r3, #0]
 800c95e:	2200      	movs	r2, #0
 800c960:	601a      	str	r2, [r3, #0]
  (*node)->prev = NULL;
 800c962:	683b      	ldr	r3, [r7, #0]
 800c964:	681b      	ldr	r3, [r3, #0]
 800c966:	2200      	movs	r2, #0
 800c968:	605a      	str	r2, [r3, #4]
 800c96a:	697b      	ldr	r3, [r7, #20]
 800c96c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c96e:	693b      	ldr	r3, [r7, #16]
 800c970:	f383 8810 	msr	PRIMASK, r3
}
 800c974:	bf00      	nop
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}
 800c976:	bf00      	nop
 800c978:	3718      	adds	r7, #24
 800c97a:	46bd      	mov	sp, r7
 800c97c:	bd80      	pop	{r7, pc}

0800c97e <list_get_size>:
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}

int list_get_size (tListNode * listHead)
{
 800c97e:	b480      	push	{r7}
 800c980:	b089      	sub	sp, #36	; 0x24
 800c982:	af00      	add	r7, sp, #0
 800c984:	6078      	str	r0, [r7, #4]
  int size = 0;
 800c986:	2300      	movs	r3, #0
 800c988:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800c98a:	f3ef 8310 	mrs	r3, PRIMASK
 800c98e:	613b      	str	r3, [r7, #16]
  return(result);
 800c990:	693b      	ldr	r3, [r7, #16]
  tListNode * temp;

  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800c992:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800c994:	b672      	cpsid	i
}
 800c996:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  temp = listHead->next;
 800c998:	687b      	ldr	r3, [r7, #4]
 800c99a:	681b      	ldr	r3, [r3, #0]
 800c99c:	61bb      	str	r3, [r7, #24]
  while (temp != listHead)
 800c99e:	e005      	b.n	800c9ac <list_get_size+0x2e>
  {
    size++;
 800c9a0:	69fb      	ldr	r3, [r7, #28]
 800c9a2:	3301      	adds	r3, #1
 800c9a4:	61fb      	str	r3, [r7, #28]
    temp = temp->next;		
 800c9a6:	69bb      	ldr	r3, [r7, #24]
 800c9a8:	681b      	ldr	r3, [r3, #0]
 800c9aa:	61bb      	str	r3, [r7, #24]
  while (temp != listHead)
 800c9ac:	69ba      	ldr	r2, [r7, #24]
 800c9ae:	687b      	ldr	r3, [r7, #4]
 800c9b0:	429a      	cmp	r2, r3
 800c9b2:	d1f5      	bne.n	800c9a0 <list_get_size+0x22>
 800c9b4:	697b      	ldr	r3, [r7, #20]
 800c9b6:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c9b8:	68fb      	ldr	r3, [r7, #12]
 800c9ba:	f383 8810 	msr	PRIMASK, r3
}
 800c9be:	bf00      	nop
  }
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
  
  return (size);
 800c9c0:	69fb      	ldr	r3, [r7, #28]
}
 800c9c2:	4618      	mov	r0, r3
 800c9c4:	3724      	adds	r7, #36	; 0x24
 800c9c6:	46bd      	mov	sp, r7
 800c9c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9cc:	4770      	bx	lr
	...

0800c9d0 <__errno>:
 800c9d0:	4b01      	ldr	r3, [pc, #4]	; (800c9d8 <__errno+0x8>)
 800c9d2:	6818      	ldr	r0, [r3, #0]
 800c9d4:	4770      	bx	lr
 800c9d6:	bf00      	nop
 800c9d8:	200000f8 	.word	0x200000f8

0800c9dc <__libc_init_array>:
 800c9dc:	b570      	push	{r4, r5, r6, lr}
 800c9de:	4d0d      	ldr	r5, [pc, #52]	; (800ca14 <__libc_init_array+0x38>)
 800c9e0:	4c0d      	ldr	r4, [pc, #52]	; (800ca18 <__libc_init_array+0x3c>)
 800c9e2:	1b64      	subs	r4, r4, r5
 800c9e4:	10a4      	asrs	r4, r4, #2
 800c9e6:	2600      	movs	r6, #0
 800c9e8:	42a6      	cmp	r6, r4
 800c9ea:	d109      	bne.n	800ca00 <__libc_init_array+0x24>
 800c9ec:	4d0b      	ldr	r5, [pc, #44]	; (800ca1c <__libc_init_array+0x40>)
 800c9ee:	4c0c      	ldr	r4, [pc, #48]	; (800ca20 <__libc_init_array+0x44>)
 800c9f0:	f001 f894 	bl	800db1c <_init>
 800c9f4:	1b64      	subs	r4, r4, r5
 800c9f6:	10a4      	asrs	r4, r4, #2
 800c9f8:	2600      	movs	r6, #0
 800c9fa:	42a6      	cmp	r6, r4
 800c9fc:	d105      	bne.n	800ca0a <__libc_init_array+0x2e>
 800c9fe:	bd70      	pop	{r4, r5, r6, pc}
 800ca00:	f855 3b04 	ldr.w	r3, [r5], #4
 800ca04:	4798      	blx	r3
 800ca06:	3601      	adds	r6, #1
 800ca08:	e7ee      	b.n	800c9e8 <__libc_init_array+0xc>
 800ca0a:	f855 3b04 	ldr.w	r3, [r5], #4
 800ca0e:	4798      	blx	r3
 800ca10:	3601      	adds	r6, #1
 800ca12:	e7f2      	b.n	800c9fa <__libc_init_array+0x1e>
 800ca14:	0800dcd0 	.word	0x0800dcd0
 800ca18:	0800dcd0 	.word	0x0800dcd0
 800ca1c:	0800dcd0 	.word	0x0800dcd0
 800ca20:	0800dcd4 	.word	0x0800dcd4

0800ca24 <memcpy>:
 800ca24:	440a      	add	r2, r1
 800ca26:	4291      	cmp	r1, r2
 800ca28:	f100 33ff 	add.w	r3, r0, #4294967295
 800ca2c:	d100      	bne.n	800ca30 <memcpy+0xc>
 800ca2e:	4770      	bx	lr
 800ca30:	b510      	push	{r4, lr}
 800ca32:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ca36:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ca3a:	4291      	cmp	r1, r2
 800ca3c:	d1f9      	bne.n	800ca32 <memcpy+0xe>
 800ca3e:	bd10      	pop	{r4, pc}

0800ca40 <memset>:
 800ca40:	4402      	add	r2, r0
 800ca42:	4603      	mov	r3, r0
 800ca44:	4293      	cmp	r3, r2
 800ca46:	d100      	bne.n	800ca4a <memset+0xa>
 800ca48:	4770      	bx	lr
 800ca4a:	f803 1b01 	strb.w	r1, [r3], #1
 800ca4e:	e7f9      	b.n	800ca44 <memset+0x4>

0800ca50 <srand>:
 800ca50:	b538      	push	{r3, r4, r5, lr}
 800ca52:	4b10      	ldr	r3, [pc, #64]	; (800ca94 <srand+0x44>)
 800ca54:	681d      	ldr	r5, [r3, #0]
 800ca56:	6bab      	ldr	r3, [r5, #56]	; 0x38
 800ca58:	4604      	mov	r4, r0
 800ca5a:	b9b3      	cbnz	r3, 800ca8a <srand+0x3a>
 800ca5c:	2018      	movs	r0, #24
 800ca5e:	f000 f893 	bl	800cb88 <malloc>
 800ca62:	4602      	mov	r2, r0
 800ca64:	63a8      	str	r0, [r5, #56]	; 0x38
 800ca66:	b920      	cbnz	r0, 800ca72 <srand+0x22>
 800ca68:	4b0b      	ldr	r3, [pc, #44]	; (800ca98 <srand+0x48>)
 800ca6a:	480c      	ldr	r0, [pc, #48]	; (800ca9c <srand+0x4c>)
 800ca6c:	2142      	movs	r1, #66	; 0x42
 800ca6e:	f000 f85b 	bl	800cb28 <__assert_func>
 800ca72:	490b      	ldr	r1, [pc, #44]	; (800caa0 <srand+0x50>)
 800ca74:	4b0b      	ldr	r3, [pc, #44]	; (800caa4 <srand+0x54>)
 800ca76:	e9c0 1300 	strd	r1, r3, [r0]
 800ca7a:	4b0b      	ldr	r3, [pc, #44]	; (800caa8 <srand+0x58>)
 800ca7c:	6083      	str	r3, [r0, #8]
 800ca7e:	230b      	movs	r3, #11
 800ca80:	8183      	strh	r3, [r0, #12]
 800ca82:	2100      	movs	r1, #0
 800ca84:	2001      	movs	r0, #1
 800ca86:	e9c2 0104 	strd	r0, r1, [r2, #16]
 800ca8a:	6bab      	ldr	r3, [r5, #56]	; 0x38
 800ca8c:	2200      	movs	r2, #0
 800ca8e:	611c      	str	r4, [r3, #16]
 800ca90:	615a      	str	r2, [r3, #20]
 800ca92:	bd38      	pop	{r3, r4, r5, pc}
 800ca94:	200000f8 	.word	0x200000f8
 800ca98:	0800db84 	.word	0x0800db84
 800ca9c:	0800db9b 	.word	0x0800db9b
 800caa0:	abcd330e 	.word	0xabcd330e
 800caa4:	e66d1234 	.word	0xe66d1234
 800caa8:	0005deec 	.word	0x0005deec

0800caac <rand>:
 800caac:	4b16      	ldr	r3, [pc, #88]	; (800cb08 <rand+0x5c>)
 800caae:	b510      	push	{r4, lr}
 800cab0:	681c      	ldr	r4, [r3, #0]
 800cab2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800cab4:	b9b3      	cbnz	r3, 800cae4 <rand+0x38>
 800cab6:	2018      	movs	r0, #24
 800cab8:	f000 f866 	bl	800cb88 <malloc>
 800cabc:	63a0      	str	r0, [r4, #56]	; 0x38
 800cabe:	b928      	cbnz	r0, 800cacc <rand+0x20>
 800cac0:	4602      	mov	r2, r0
 800cac2:	4b12      	ldr	r3, [pc, #72]	; (800cb0c <rand+0x60>)
 800cac4:	4812      	ldr	r0, [pc, #72]	; (800cb10 <rand+0x64>)
 800cac6:	214e      	movs	r1, #78	; 0x4e
 800cac8:	f000 f82e 	bl	800cb28 <__assert_func>
 800cacc:	4a11      	ldr	r2, [pc, #68]	; (800cb14 <rand+0x68>)
 800cace:	4b12      	ldr	r3, [pc, #72]	; (800cb18 <rand+0x6c>)
 800cad0:	e9c0 2300 	strd	r2, r3, [r0]
 800cad4:	4b11      	ldr	r3, [pc, #68]	; (800cb1c <rand+0x70>)
 800cad6:	6083      	str	r3, [r0, #8]
 800cad8:	230b      	movs	r3, #11
 800cada:	8183      	strh	r3, [r0, #12]
 800cadc:	2201      	movs	r2, #1
 800cade:	2300      	movs	r3, #0
 800cae0:	e9c0 2304 	strd	r2, r3, [r0, #16]
 800cae4:	6ba4      	ldr	r4, [r4, #56]	; 0x38
 800cae6:	4a0e      	ldr	r2, [pc, #56]	; (800cb20 <rand+0x74>)
 800cae8:	6920      	ldr	r0, [r4, #16]
 800caea:	6963      	ldr	r3, [r4, #20]
 800caec:	490d      	ldr	r1, [pc, #52]	; (800cb24 <rand+0x78>)
 800caee:	4342      	muls	r2, r0
 800caf0:	fb01 2203 	mla	r2, r1, r3, r2
 800caf4:	fba0 0101 	umull	r0, r1, r0, r1
 800caf8:	1c43      	adds	r3, r0, #1
 800cafa:	eb42 0001 	adc.w	r0, r2, r1
 800cafe:	e9c4 3004 	strd	r3, r0, [r4, #16]
 800cb02:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 800cb06:	bd10      	pop	{r4, pc}
 800cb08:	200000f8 	.word	0x200000f8
 800cb0c:	0800db84 	.word	0x0800db84
 800cb10:	0800db9b 	.word	0x0800db9b
 800cb14:	abcd330e 	.word	0xabcd330e
 800cb18:	e66d1234 	.word	0xe66d1234
 800cb1c:	0005deec 	.word	0x0005deec
 800cb20:	5851f42d 	.word	0x5851f42d
 800cb24:	4c957f2d 	.word	0x4c957f2d

0800cb28 <__assert_func>:
 800cb28:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800cb2a:	4614      	mov	r4, r2
 800cb2c:	461a      	mov	r2, r3
 800cb2e:	4b09      	ldr	r3, [pc, #36]	; (800cb54 <__assert_func+0x2c>)
 800cb30:	681b      	ldr	r3, [r3, #0]
 800cb32:	4605      	mov	r5, r0
 800cb34:	68d8      	ldr	r0, [r3, #12]
 800cb36:	b14c      	cbz	r4, 800cb4c <__assert_func+0x24>
 800cb38:	4b07      	ldr	r3, [pc, #28]	; (800cb58 <__assert_func+0x30>)
 800cb3a:	9100      	str	r1, [sp, #0]
 800cb3c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800cb40:	4906      	ldr	r1, [pc, #24]	; (800cb5c <__assert_func+0x34>)
 800cb42:	462b      	mov	r3, r5
 800cb44:	f000 f80e 	bl	800cb64 <fiprintf>
 800cb48:	f000 fcc4 	bl	800d4d4 <abort>
 800cb4c:	4b04      	ldr	r3, [pc, #16]	; (800cb60 <__assert_func+0x38>)
 800cb4e:	461c      	mov	r4, r3
 800cb50:	e7f3      	b.n	800cb3a <__assert_func+0x12>
 800cb52:	bf00      	nop
 800cb54:	200000f8 	.word	0x200000f8
 800cb58:	0800dbf6 	.word	0x0800dbf6
 800cb5c:	0800dc03 	.word	0x0800dc03
 800cb60:	0800dc31 	.word	0x0800dc31

0800cb64 <fiprintf>:
 800cb64:	b40e      	push	{r1, r2, r3}
 800cb66:	b503      	push	{r0, r1, lr}
 800cb68:	4601      	mov	r1, r0
 800cb6a:	ab03      	add	r3, sp, #12
 800cb6c:	4805      	ldr	r0, [pc, #20]	; (800cb84 <fiprintf+0x20>)
 800cb6e:	f853 2b04 	ldr.w	r2, [r3], #4
 800cb72:	6800      	ldr	r0, [r0, #0]
 800cb74:	9301      	str	r3, [sp, #4]
 800cb76:	f000 f919 	bl	800cdac <_vfiprintf_r>
 800cb7a:	b002      	add	sp, #8
 800cb7c:	f85d eb04 	ldr.w	lr, [sp], #4
 800cb80:	b003      	add	sp, #12
 800cb82:	4770      	bx	lr
 800cb84:	200000f8 	.word	0x200000f8

0800cb88 <malloc>:
 800cb88:	4b02      	ldr	r3, [pc, #8]	; (800cb94 <malloc+0xc>)
 800cb8a:	4601      	mov	r1, r0
 800cb8c:	6818      	ldr	r0, [r3, #0]
 800cb8e:	f000 b86f 	b.w	800cc70 <_malloc_r>
 800cb92:	bf00      	nop
 800cb94:	200000f8 	.word	0x200000f8

0800cb98 <_free_r>:
 800cb98:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800cb9a:	2900      	cmp	r1, #0
 800cb9c:	d044      	beq.n	800cc28 <_free_r+0x90>
 800cb9e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800cba2:	9001      	str	r0, [sp, #4]
 800cba4:	2b00      	cmp	r3, #0
 800cba6:	f1a1 0404 	sub.w	r4, r1, #4
 800cbaa:	bfb8      	it	lt
 800cbac:	18e4      	addlt	r4, r4, r3
 800cbae:	f000 feb9 	bl	800d924 <__malloc_lock>
 800cbb2:	4a1e      	ldr	r2, [pc, #120]	; (800cc2c <_free_r+0x94>)
 800cbb4:	9801      	ldr	r0, [sp, #4]
 800cbb6:	6813      	ldr	r3, [r2, #0]
 800cbb8:	b933      	cbnz	r3, 800cbc8 <_free_r+0x30>
 800cbba:	6063      	str	r3, [r4, #4]
 800cbbc:	6014      	str	r4, [r2, #0]
 800cbbe:	b003      	add	sp, #12
 800cbc0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800cbc4:	f000 beb4 	b.w	800d930 <__malloc_unlock>
 800cbc8:	42a3      	cmp	r3, r4
 800cbca:	d908      	bls.n	800cbde <_free_r+0x46>
 800cbcc:	6825      	ldr	r5, [r4, #0]
 800cbce:	1961      	adds	r1, r4, r5
 800cbd0:	428b      	cmp	r3, r1
 800cbd2:	bf01      	itttt	eq
 800cbd4:	6819      	ldreq	r1, [r3, #0]
 800cbd6:	685b      	ldreq	r3, [r3, #4]
 800cbd8:	1949      	addeq	r1, r1, r5
 800cbda:	6021      	streq	r1, [r4, #0]
 800cbdc:	e7ed      	b.n	800cbba <_free_r+0x22>
 800cbde:	461a      	mov	r2, r3
 800cbe0:	685b      	ldr	r3, [r3, #4]
 800cbe2:	b10b      	cbz	r3, 800cbe8 <_free_r+0x50>
 800cbe4:	42a3      	cmp	r3, r4
 800cbe6:	d9fa      	bls.n	800cbde <_free_r+0x46>
 800cbe8:	6811      	ldr	r1, [r2, #0]
 800cbea:	1855      	adds	r5, r2, r1
 800cbec:	42a5      	cmp	r5, r4
 800cbee:	d10b      	bne.n	800cc08 <_free_r+0x70>
 800cbf0:	6824      	ldr	r4, [r4, #0]
 800cbf2:	4421      	add	r1, r4
 800cbf4:	1854      	adds	r4, r2, r1
 800cbf6:	42a3      	cmp	r3, r4
 800cbf8:	6011      	str	r1, [r2, #0]
 800cbfa:	d1e0      	bne.n	800cbbe <_free_r+0x26>
 800cbfc:	681c      	ldr	r4, [r3, #0]
 800cbfe:	685b      	ldr	r3, [r3, #4]
 800cc00:	6053      	str	r3, [r2, #4]
 800cc02:	4421      	add	r1, r4
 800cc04:	6011      	str	r1, [r2, #0]
 800cc06:	e7da      	b.n	800cbbe <_free_r+0x26>
 800cc08:	d902      	bls.n	800cc10 <_free_r+0x78>
 800cc0a:	230c      	movs	r3, #12
 800cc0c:	6003      	str	r3, [r0, #0]
 800cc0e:	e7d6      	b.n	800cbbe <_free_r+0x26>
 800cc10:	6825      	ldr	r5, [r4, #0]
 800cc12:	1961      	adds	r1, r4, r5
 800cc14:	428b      	cmp	r3, r1
 800cc16:	bf04      	itt	eq
 800cc18:	6819      	ldreq	r1, [r3, #0]
 800cc1a:	685b      	ldreq	r3, [r3, #4]
 800cc1c:	6063      	str	r3, [r4, #4]
 800cc1e:	bf04      	itt	eq
 800cc20:	1949      	addeq	r1, r1, r5
 800cc22:	6021      	streq	r1, [r4, #0]
 800cc24:	6054      	str	r4, [r2, #4]
 800cc26:	e7ca      	b.n	800cbbe <_free_r+0x26>
 800cc28:	b003      	add	sp, #12
 800cc2a:	bd30      	pop	{r4, r5, pc}
 800cc2c:	200007e0 	.word	0x200007e0

0800cc30 <sbrk_aligned>:
 800cc30:	b570      	push	{r4, r5, r6, lr}
 800cc32:	4e0e      	ldr	r6, [pc, #56]	; (800cc6c <sbrk_aligned+0x3c>)
 800cc34:	460c      	mov	r4, r1
 800cc36:	6831      	ldr	r1, [r6, #0]
 800cc38:	4605      	mov	r5, r0
 800cc3a:	b911      	cbnz	r1, 800cc42 <sbrk_aligned+0x12>
 800cc3c:	f000 fb7a 	bl	800d334 <_sbrk_r>
 800cc40:	6030      	str	r0, [r6, #0]
 800cc42:	4621      	mov	r1, r4
 800cc44:	4628      	mov	r0, r5
 800cc46:	f000 fb75 	bl	800d334 <_sbrk_r>
 800cc4a:	1c43      	adds	r3, r0, #1
 800cc4c:	d00a      	beq.n	800cc64 <sbrk_aligned+0x34>
 800cc4e:	1cc4      	adds	r4, r0, #3
 800cc50:	f024 0403 	bic.w	r4, r4, #3
 800cc54:	42a0      	cmp	r0, r4
 800cc56:	d007      	beq.n	800cc68 <sbrk_aligned+0x38>
 800cc58:	1a21      	subs	r1, r4, r0
 800cc5a:	4628      	mov	r0, r5
 800cc5c:	f000 fb6a 	bl	800d334 <_sbrk_r>
 800cc60:	3001      	adds	r0, #1
 800cc62:	d101      	bne.n	800cc68 <sbrk_aligned+0x38>
 800cc64:	f04f 34ff 	mov.w	r4, #4294967295
 800cc68:	4620      	mov	r0, r4
 800cc6a:	bd70      	pop	{r4, r5, r6, pc}
 800cc6c:	200007e4 	.word	0x200007e4

0800cc70 <_malloc_r>:
 800cc70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cc74:	1ccd      	adds	r5, r1, #3
 800cc76:	f025 0503 	bic.w	r5, r5, #3
 800cc7a:	3508      	adds	r5, #8
 800cc7c:	2d0c      	cmp	r5, #12
 800cc7e:	bf38      	it	cc
 800cc80:	250c      	movcc	r5, #12
 800cc82:	2d00      	cmp	r5, #0
 800cc84:	4607      	mov	r7, r0
 800cc86:	db01      	blt.n	800cc8c <_malloc_r+0x1c>
 800cc88:	42a9      	cmp	r1, r5
 800cc8a:	d905      	bls.n	800cc98 <_malloc_r+0x28>
 800cc8c:	230c      	movs	r3, #12
 800cc8e:	603b      	str	r3, [r7, #0]
 800cc90:	2600      	movs	r6, #0
 800cc92:	4630      	mov	r0, r6
 800cc94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cc98:	4e2e      	ldr	r6, [pc, #184]	; (800cd54 <_malloc_r+0xe4>)
 800cc9a:	f000 fe43 	bl	800d924 <__malloc_lock>
 800cc9e:	6833      	ldr	r3, [r6, #0]
 800cca0:	461c      	mov	r4, r3
 800cca2:	bb34      	cbnz	r4, 800ccf2 <_malloc_r+0x82>
 800cca4:	4629      	mov	r1, r5
 800cca6:	4638      	mov	r0, r7
 800cca8:	f7ff ffc2 	bl	800cc30 <sbrk_aligned>
 800ccac:	1c43      	adds	r3, r0, #1
 800ccae:	4604      	mov	r4, r0
 800ccb0:	d14d      	bne.n	800cd4e <_malloc_r+0xde>
 800ccb2:	6834      	ldr	r4, [r6, #0]
 800ccb4:	4626      	mov	r6, r4
 800ccb6:	2e00      	cmp	r6, #0
 800ccb8:	d140      	bne.n	800cd3c <_malloc_r+0xcc>
 800ccba:	6823      	ldr	r3, [r4, #0]
 800ccbc:	4631      	mov	r1, r6
 800ccbe:	4638      	mov	r0, r7
 800ccc0:	eb04 0803 	add.w	r8, r4, r3
 800ccc4:	f000 fb36 	bl	800d334 <_sbrk_r>
 800ccc8:	4580      	cmp	r8, r0
 800ccca:	d13a      	bne.n	800cd42 <_malloc_r+0xd2>
 800cccc:	6821      	ldr	r1, [r4, #0]
 800ccce:	3503      	adds	r5, #3
 800ccd0:	1a6d      	subs	r5, r5, r1
 800ccd2:	f025 0503 	bic.w	r5, r5, #3
 800ccd6:	3508      	adds	r5, #8
 800ccd8:	2d0c      	cmp	r5, #12
 800ccda:	bf38      	it	cc
 800ccdc:	250c      	movcc	r5, #12
 800ccde:	4629      	mov	r1, r5
 800cce0:	4638      	mov	r0, r7
 800cce2:	f7ff ffa5 	bl	800cc30 <sbrk_aligned>
 800cce6:	3001      	adds	r0, #1
 800cce8:	d02b      	beq.n	800cd42 <_malloc_r+0xd2>
 800ccea:	6823      	ldr	r3, [r4, #0]
 800ccec:	442b      	add	r3, r5
 800ccee:	6023      	str	r3, [r4, #0]
 800ccf0:	e00e      	b.n	800cd10 <_malloc_r+0xa0>
 800ccf2:	6822      	ldr	r2, [r4, #0]
 800ccf4:	1b52      	subs	r2, r2, r5
 800ccf6:	d41e      	bmi.n	800cd36 <_malloc_r+0xc6>
 800ccf8:	2a0b      	cmp	r2, #11
 800ccfa:	d916      	bls.n	800cd2a <_malloc_r+0xba>
 800ccfc:	1961      	adds	r1, r4, r5
 800ccfe:	42a3      	cmp	r3, r4
 800cd00:	6025      	str	r5, [r4, #0]
 800cd02:	bf18      	it	ne
 800cd04:	6059      	strne	r1, [r3, #4]
 800cd06:	6863      	ldr	r3, [r4, #4]
 800cd08:	bf08      	it	eq
 800cd0a:	6031      	streq	r1, [r6, #0]
 800cd0c:	5162      	str	r2, [r4, r5]
 800cd0e:	604b      	str	r3, [r1, #4]
 800cd10:	4638      	mov	r0, r7
 800cd12:	f104 060b 	add.w	r6, r4, #11
 800cd16:	f000 fe0b 	bl	800d930 <__malloc_unlock>
 800cd1a:	f026 0607 	bic.w	r6, r6, #7
 800cd1e:	1d23      	adds	r3, r4, #4
 800cd20:	1af2      	subs	r2, r6, r3
 800cd22:	d0b6      	beq.n	800cc92 <_malloc_r+0x22>
 800cd24:	1b9b      	subs	r3, r3, r6
 800cd26:	50a3      	str	r3, [r4, r2]
 800cd28:	e7b3      	b.n	800cc92 <_malloc_r+0x22>
 800cd2a:	6862      	ldr	r2, [r4, #4]
 800cd2c:	42a3      	cmp	r3, r4
 800cd2e:	bf0c      	ite	eq
 800cd30:	6032      	streq	r2, [r6, #0]
 800cd32:	605a      	strne	r2, [r3, #4]
 800cd34:	e7ec      	b.n	800cd10 <_malloc_r+0xa0>
 800cd36:	4623      	mov	r3, r4
 800cd38:	6864      	ldr	r4, [r4, #4]
 800cd3a:	e7b2      	b.n	800cca2 <_malloc_r+0x32>
 800cd3c:	4634      	mov	r4, r6
 800cd3e:	6876      	ldr	r6, [r6, #4]
 800cd40:	e7b9      	b.n	800ccb6 <_malloc_r+0x46>
 800cd42:	230c      	movs	r3, #12
 800cd44:	603b      	str	r3, [r7, #0]
 800cd46:	4638      	mov	r0, r7
 800cd48:	f000 fdf2 	bl	800d930 <__malloc_unlock>
 800cd4c:	e7a1      	b.n	800cc92 <_malloc_r+0x22>
 800cd4e:	6025      	str	r5, [r4, #0]
 800cd50:	e7de      	b.n	800cd10 <_malloc_r+0xa0>
 800cd52:	bf00      	nop
 800cd54:	200007e0 	.word	0x200007e0

0800cd58 <__sfputc_r>:
 800cd58:	6893      	ldr	r3, [r2, #8]
 800cd5a:	3b01      	subs	r3, #1
 800cd5c:	2b00      	cmp	r3, #0
 800cd5e:	b410      	push	{r4}
 800cd60:	6093      	str	r3, [r2, #8]
 800cd62:	da08      	bge.n	800cd76 <__sfputc_r+0x1e>
 800cd64:	6994      	ldr	r4, [r2, #24]
 800cd66:	42a3      	cmp	r3, r4
 800cd68:	db01      	blt.n	800cd6e <__sfputc_r+0x16>
 800cd6a:	290a      	cmp	r1, #10
 800cd6c:	d103      	bne.n	800cd76 <__sfputc_r+0x1e>
 800cd6e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800cd72:	f000 baef 	b.w	800d354 <__swbuf_r>
 800cd76:	6813      	ldr	r3, [r2, #0]
 800cd78:	1c58      	adds	r0, r3, #1
 800cd7a:	6010      	str	r0, [r2, #0]
 800cd7c:	7019      	strb	r1, [r3, #0]
 800cd7e:	4608      	mov	r0, r1
 800cd80:	f85d 4b04 	ldr.w	r4, [sp], #4
 800cd84:	4770      	bx	lr

0800cd86 <__sfputs_r>:
 800cd86:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cd88:	4606      	mov	r6, r0
 800cd8a:	460f      	mov	r7, r1
 800cd8c:	4614      	mov	r4, r2
 800cd8e:	18d5      	adds	r5, r2, r3
 800cd90:	42ac      	cmp	r4, r5
 800cd92:	d101      	bne.n	800cd98 <__sfputs_r+0x12>
 800cd94:	2000      	movs	r0, #0
 800cd96:	e007      	b.n	800cda8 <__sfputs_r+0x22>
 800cd98:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cd9c:	463a      	mov	r2, r7
 800cd9e:	4630      	mov	r0, r6
 800cda0:	f7ff ffda 	bl	800cd58 <__sfputc_r>
 800cda4:	1c43      	adds	r3, r0, #1
 800cda6:	d1f3      	bne.n	800cd90 <__sfputs_r+0xa>
 800cda8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800cdac <_vfiprintf_r>:
 800cdac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cdb0:	460d      	mov	r5, r1
 800cdb2:	b09d      	sub	sp, #116	; 0x74
 800cdb4:	4614      	mov	r4, r2
 800cdb6:	4698      	mov	r8, r3
 800cdb8:	4606      	mov	r6, r0
 800cdba:	b118      	cbz	r0, 800cdc4 <_vfiprintf_r+0x18>
 800cdbc:	6983      	ldr	r3, [r0, #24]
 800cdbe:	b90b      	cbnz	r3, 800cdc4 <_vfiprintf_r+0x18>
 800cdc0:	f000 fcaa 	bl	800d718 <__sinit>
 800cdc4:	4b89      	ldr	r3, [pc, #548]	; (800cfec <_vfiprintf_r+0x240>)
 800cdc6:	429d      	cmp	r5, r3
 800cdc8:	d11b      	bne.n	800ce02 <_vfiprintf_r+0x56>
 800cdca:	6875      	ldr	r5, [r6, #4]
 800cdcc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800cdce:	07d9      	lsls	r1, r3, #31
 800cdd0:	d405      	bmi.n	800cdde <_vfiprintf_r+0x32>
 800cdd2:	89ab      	ldrh	r3, [r5, #12]
 800cdd4:	059a      	lsls	r2, r3, #22
 800cdd6:	d402      	bmi.n	800cdde <_vfiprintf_r+0x32>
 800cdd8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800cdda:	f000 fd3b 	bl	800d854 <__retarget_lock_acquire_recursive>
 800cdde:	89ab      	ldrh	r3, [r5, #12]
 800cde0:	071b      	lsls	r3, r3, #28
 800cde2:	d501      	bpl.n	800cde8 <_vfiprintf_r+0x3c>
 800cde4:	692b      	ldr	r3, [r5, #16]
 800cde6:	b9eb      	cbnz	r3, 800ce24 <_vfiprintf_r+0x78>
 800cde8:	4629      	mov	r1, r5
 800cdea:	4630      	mov	r0, r6
 800cdec:	f000 fb04 	bl	800d3f8 <__swsetup_r>
 800cdf0:	b1c0      	cbz	r0, 800ce24 <_vfiprintf_r+0x78>
 800cdf2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800cdf4:	07dc      	lsls	r4, r3, #31
 800cdf6:	d50e      	bpl.n	800ce16 <_vfiprintf_r+0x6a>
 800cdf8:	f04f 30ff 	mov.w	r0, #4294967295
 800cdfc:	b01d      	add	sp, #116	; 0x74
 800cdfe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ce02:	4b7b      	ldr	r3, [pc, #492]	; (800cff0 <_vfiprintf_r+0x244>)
 800ce04:	429d      	cmp	r5, r3
 800ce06:	d101      	bne.n	800ce0c <_vfiprintf_r+0x60>
 800ce08:	68b5      	ldr	r5, [r6, #8]
 800ce0a:	e7df      	b.n	800cdcc <_vfiprintf_r+0x20>
 800ce0c:	4b79      	ldr	r3, [pc, #484]	; (800cff4 <_vfiprintf_r+0x248>)
 800ce0e:	429d      	cmp	r5, r3
 800ce10:	bf08      	it	eq
 800ce12:	68f5      	ldreq	r5, [r6, #12]
 800ce14:	e7da      	b.n	800cdcc <_vfiprintf_r+0x20>
 800ce16:	89ab      	ldrh	r3, [r5, #12]
 800ce18:	0598      	lsls	r0, r3, #22
 800ce1a:	d4ed      	bmi.n	800cdf8 <_vfiprintf_r+0x4c>
 800ce1c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ce1e:	f000 fd1a 	bl	800d856 <__retarget_lock_release_recursive>
 800ce22:	e7e9      	b.n	800cdf8 <_vfiprintf_r+0x4c>
 800ce24:	2300      	movs	r3, #0
 800ce26:	9309      	str	r3, [sp, #36]	; 0x24
 800ce28:	2320      	movs	r3, #32
 800ce2a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ce2e:	f8cd 800c 	str.w	r8, [sp, #12]
 800ce32:	2330      	movs	r3, #48	; 0x30
 800ce34:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800cff8 <_vfiprintf_r+0x24c>
 800ce38:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800ce3c:	f04f 0901 	mov.w	r9, #1
 800ce40:	4623      	mov	r3, r4
 800ce42:	469a      	mov	sl, r3
 800ce44:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ce48:	b10a      	cbz	r2, 800ce4e <_vfiprintf_r+0xa2>
 800ce4a:	2a25      	cmp	r2, #37	; 0x25
 800ce4c:	d1f9      	bne.n	800ce42 <_vfiprintf_r+0x96>
 800ce4e:	ebba 0b04 	subs.w	fp, sl, r4
 800ce52:	d00b      	beq.n	800ce6c <_vfiprintf_r+0xc0>
 800ce54:	465b      	mov	r3, fp
 800ce56:	4622      	mov	r2, r4
 800ce58:	4629      	mov	r1, r5
 800ce5a:	4630      	mov	r0, r6
 800ce5c:	f7ff ff93 	bl	800cd86 <__sfputs_r>
 800ce60:	3001      	adds	r0, #1
 800ce62:	f000 80aa 	beq.w	800cfba <_vfiprintf_r+0x20e>
 800ce66:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ce68:	445a      	add	r2, fp
 800ce6a:	9209      	str	r2, [sp, #36]	; 0x24
 800ce6c:	f89a 3000 	ldrb.w	r3, [sl]
 800ce70:	2b00      	cmp	r3, #0
 800ce72:	f000 80a2 	beq.w	800cfba <_vfiprintf_r+0x20e>
 800ce76:	2300      	movs	r3, #0
 800ce78:	f04f 32ff 	mov.w	r2, #4294967295
 800ce7c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ce80:	f10a 0a01 	add.w	sl, sl, #1
 800ce84:	9304      	str	r3, [sp, #16]
 800ce86:	9307      	str	r3, [sp, #28]
 800ce88:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800ce8c:	931a      	str	r3, [sp, #104]	; 0x68
 800ce8e:	4654      	mov	r4, sl
 800ce90:	2205      	movs	r2, #5
 800ce92:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ce96:	4858      	ldr	r0, [pc, #352]	; (800cff8 <_vfiprintf_r+0x24c>)
 800ce98:	f7f3 f9aa 	bl	80001f0 <memchr>
 800ce9c:	9a04      	ldr	r2, [sp, #16]
 800ce9e:	b9d8      	cbnz	r0, 800ced8 <_vfiprintf_r+0x12c>
 800cea0:	06d1      	lsls	r1, r2, #27
 800cea2:	bf44      	itt	mi
 800cea4:	2320      	movmi	r3, #32
 800cea6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ceaa:	0713      	lsls	r3, r2, #28
 800ceac:	bf44      	itt	mi
 800ceae:	232b      	movmi	r3, #43	; 0x2b
 800ceb0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ceb4:	f89a 3000 	ldrb.w	r3, [sl]
 800ceb8:	2b2a      	cmp	r3, #42	; 0x2a
 800ceba:	d015      	beq.n	800cee8 <_vfiprintf_r+0x13c>
 800cebc:	9a07      	ldr	r2, [sp, #28]
 800cebe:	4654      	mov	r4, sl
 800cec0:	2000      	movs	r0, #0
 800cec2:	f04f 0c0a 	mov.w	ip, #10
 800cec6:	4621      	mov	r1, r4
 800cec8:	f811 3b01 	ldrb.w	r3, [r1], #1
 800cecc:	3b30      	subs	r3, #48	; 0x30
 800cece:	2b09      	cmp	r3, #9
 800ced0:	d94e      	bls.n	800cf70 <_vfiprintf_r+0x1c4>
 800ced2:	b1b0      	cbz	r0, 800cf02 <_vfiprintf_r+0x156>
 800ced4:	9207      	str	r2, [sp, #28]
 800ced6:	e014      	b.n	800cf02 <_vfiprintf_r+0x156>
 800ced8:	eba0 0308 	sub.w	r3, r0, r8
 800cedc:	fa09 f303 	lsl.w	r3, r9, r3
 800cee0:	4313      	orrs	r3, r2
 800cee2:	9304      	str	r3, [sp, #16]
 800cee4:	46a2      	mov	sl, r4
 800cee6:	e7d2      	b.n	800ce8e <_vfiprintf_r+0xe2>
 800cee8:	9b03      	ldr	r3, [sp, #12]
 800ceea:	1d19      	adds	r1, r3, #4
 800ceec:	681b      	ldr	r3, [r3, #0]
 800ceee:	9103      	str	r1, [sp, #12]
 800cef0:	2b00      	cmp	r3, #0
 800cef2:	bfbb      	ittet	lt
 800cef4:	425b      	neglt	r3, r3
 800cef6:	f042 0202 	orrlt.w	r2, r2, #2
 800cefa:	9307      	strge	r3, [sp, #28]
 800cefc:	9307      	strlt	r3, [sp, #28]
 800cefe:	bfb8      	it	lt
 800cf00:	9204      	strlt	r2, [sp, #16]
 800cf02:	7823      	ldrb	r3, [r4, #0]
 800cf04:	2b2e      	cmp	r3, #46	; 0x2e
 800cf06:	d10c      	bne.n	800cf22 <_vfiprintf_r+0x176>
 800cf08:	7863      	ldrb	r3, [r4, #1]
 800cf0a:	2b2a      	cmp	r3, #42	; 0x2a
 800cf0c:	d135      	bne.n	800cf7a <_vfiprintf_r+0x1ce>
 800cf0e:	9b03      	ldr	r3, [sp, #12]
 800cf10:	1d1a      	adds	r2, r3, #4
 800cf12:	681b      	ldr	r3, [r3, #0]
 800cf14:	9203      	str	r2, [sp, #12]
 800cf16:	2b00      	cmp	r3, #0
 800cf18:	bfb8      	it	lt
 800cf1a:	f04f 33ff 	movlt.w	r3, #4294967295
 800cf1e:	3402      	adds	r4, #2
 800cf20:	9305      	str	r3, [sp, #20]
 800cf22:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800d008 <_vfiprintf_r+0x25c>
 800cf26:	7821      	ldrb	r1, [r4, #0]
 800cf28:	2203      	movs	r2, #3
 800cf2a:	4650      	mov	r0, sl
 800cf2c:	f7f3 f960 	bl	80001f0 <memchr>
 800cf30:	b140      	cbz	r0, 800cf44 <_vfiprintf_r+0x198>
 800cf32:	2340      	movs	r3, #64	; 0x40
 800cf34:	eba0 000a 	sub.w	r0, r0, sl
 800cf38:	fa03 f000 	lsl.w	r0, r3, r0
 800cf3c:	9b04      	ldr	r3, [sp, #16]
 800cf3e:	4303      	orrs	r3, r0
 800cf40:	3401      	adds	r4, #1
 800cf42:	9304      	str	r3, [sp, #16]
 800cf44:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cf48:	482c      	ldr	r0, [pc, #176]	; (800cffc <_vfiprintf_r+0x250>)
 800cf4a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800cf4e:	2206      	movs	r2, #6
 800cf50:	f7f3 f94e 	bl	80001f0 <memchr>
 800cf54:	2800      	cmp	r0, #0
 800cf56:	d03f      	beq.n	800cfd8 <_vfiprintf_r+0x22c>
 800cf58:	4b29      	ldr	r3, [pc, #164]	; (800d000 <_vfiprintf_r+0x254>)
 800cf5a:	bb1b      	cbnz	r3, 800cfa4 <_vfiprintf_r+0x1f8>
 800cf5c:	9b03      	ldr	r3, [sp, #12]
 800cf5e:	3307      	adds	r3, #7
 800cf60:	f023 0307 	bic.w	r3, r3, #7
 800cf64:	3308      	adds	r3, #8
 800cf66:	9303      	str	r3, [sp, #12]
 800cf68:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cf6a:	443b      	add	r3, r7
 800cf6c:	9309      	str	r3, [sp, #36]	; 0x24
 800cf6e:	e767      	b.n	800ce40 <_vfiprintf_r+0x94>
 800cf70:	fb0c 3202 	mla	r2, ip, r2, r3
 800cf74:	460c      	mov	r4, r1
 800cf76:	2001      	movs	r0, #1
 800cf78:	e7a5      	b.n	800cec6 <_vfiprintf_r+0x11a>
 800cf7a:	2300      	movs	r3, #0
 800cf7c:	3401      	adds	r4, #1
 800cf7e:	9305      	str	r3, [sp, #20]
 800cf80:	4619      	mov	r1, r3
 800cf82:	f04f 0c0a 	mov.w	ip, #10
 800cf86:	4620      	mov	r0, r4
 800cf88:	f810 2b01 	ldrb.w	r2, [r0], #1
 800cf8c:	3a30      	subs	r2, #48	; 0x30
 800cf8e:	2a09      	cmp	r2, #9
 800cf90:	d903      	bls.n	800cf9a <_vfiprintf_r+0x1ee>
 800cf92:	2b00      	cmp	r3, #0
 800cf94:	d0c5      	beq.n	800cf22 <_vfiprintf_r+0x176>
 800cf96:	9105      	str	r1, [sp, #20]
 800cf98:	e7c3      	b.n	800cf22 <_vfiprintf_r+0x176>
 800cf9a:	fb0c 2101 	mla	r1, ip, r1, r2
 800cf9e:	4604      	mov	r4, r0
 800cfa0:	2301      	movs	r3, #1
 800cfa2:	e7f0      	b.n	800cf86 <_vfiprintf_r+0x1da>
 800cfa4:	ab03      	add	r3, sp, #12
 800cfa6:	9300      	str	r3, [sp, #0]
 800cfa8:	462a      	mov	r2, r5
 800cfaa:	4b16      	ldr	r3, [pc, #88]	; (800d004 <_vfiprintf_r+0x258>)
 800cfac:	a904      	add	r1, sp, #16
 800cfae:	4630      	mov	r0, r6
 800cfb0:	f3af 8000 	nop.w
 800cfb4:	4607      	mov	r7, r0
 800cfb6:	1c78      	adds	r0, r7, #1
 800cfb8:	d1d6      	bne.n	800cf68 <_vfiprintf_r+0x1bc>
 800cfba:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800cfbc:	07d9      	lsls	r1, r3, #31
 800cfbe:	d405      	bmi.n	800cfcc <_vfiprintf_r+0x220>
 800cfc0:	89ab      	ldrh	r3, [r5, #12]
 800cfc2:	059a      	lsls	r2, r3, #22
 800cfc4:	d402      	bmi.n	800cfcc <_vfiprintf_r+0x220>
 800cfc6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800cfc8:	f000 fc45 	bl	800d856 <__retarget_lock_release_recursive>
 800cfcc:	89ab      	ldrh	r3, [r5, #12]
 800cfce:	065b      	lsls	r3, r3, #25
 800cfd0:	f53f af12 	bmi.w	800cdf8 <_vfiprintf_r+0x4c>
 800cfd4:	9809      	ldr	r0, [sp, #36]	; 0x24
 800cfd6:	e711      	b.n	800cdfc <_vfiprintf_r+0x50>
 800cfd8:	ab03      	add	r3, sp, #12
 800cfda:	9300      	str	r3, [sp, #0]
 800cfdc:	462a      	mov	r2, r5
 800cfde:	4b09      	ldr	r3, [pc, #36]	; (800d004 <_vfiprintf_r+0x258>)
 800cfe0:	a904      	add	r1, sp, #16
 800cfe2:	4630      	mov	r0, r6
 800cfe4:	f000 f880 	bl	800d0e8 <_printf_i>
 800cfe8:	e7e4      	b.n	800cfb4 <_vfiprintf_r+0x208>
 800cfea:	bf00      	nop
 800cfec:	0800dc88 	.word	0x0800dc88
 800cff0:	0800dca8 	.word	0x0800dca8
 800cff4:	0800dc68 	.word	0x0800dc68
 800cff8:	0800dc32 	.word	0x0800dc32
 800cffc:	0800dc3c 	.word	0x0800dc3c
 800d000:	00000000 	.word	0x00000000
 800d004:	0800cd87 	.word	0x0800cd87
 800d008:	0800dc38 	.word	0x0800dc38

0800d00c <_printf_common>:
 800d00c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d010:	4616      	mov	r6, r2
 800d012:	4699      	mov	r9, r3
 800d014:	688a      	ldr	r2, [r1, #8]
 800d016:	690b      	ldr	r3, [r1, #16]
 800d018:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800d01c:	4293      	cmp	r3, r2
 800d01e:	bfb8      	it	lt
 800d020:	4613      	movlt	r3, r2
 800d022:	6033      	str	r3, [r6, #0]
 800d024:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800d028:	4607      	mov	r7, r0
 800d02a:	460c      	mov	r4, r1
 800d02c:	b10a      	cbz	r2, 800d032 <_printf_common+0x26>
 800d02e:	3301      	adds	r3, #1
 800d030:	6033      	str	r3, [r6, #0]
 800d032:	6823      	ldr	r3, [r4, #0]
 800d034:	0699      	lsls	r1, r3, #26
 800d036:	bf42      	ittt	mi
 800d038:	6833      	ldrmi	r3, [r6, #0]
 800d03a:	3302      	addmi	r3, #2
 800d03c:	6033      	strmi	r3, [r6, #0]
 800d03e:	6825      	ldr	r5, [r4, #0]
 800d040:	f015 0506 	ands.w	r5, r5, #6
 800d044:	d106      	bne.n	800d054 <_printf_common+0x48>
 800d046:	f104 0a19 	add.w	sl, r4, #25
 800d04a:	68e3      	ldr	r3, [r4, #12]
 800d04c:	6832      	ldr	r2, [r6, #0]
 800d04e:	1a9b      	subs	r3, r3, r2
 800d050:	42ab      	cmp	r3, r5
 800d052:	dc26      	bgt.n	800d0a2 <_printf_common+0x96>
 800d054:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800d058:	1e13      	subs	r3, r2, #0
 800d05a:	6822      	ldr	r2, [r4, #0]
 800d05c:	bf18      	it	ne
 800d05e:	2301      	movne	r3, #1
 800d060:	0692      	lsls	r2, r2, #26
 800d062:	d42b      	bmi.n	800d0bc <_printf_common+0xb0>
 800d064:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800d068:	4649      	mov	r1, r9
 800d06a:	4638      	mov	r0, r7
 800d06c:	47c0      	blx	r8
 800d06e:	3001      	adds	r0, #1
 800d070:	d01e      	beq.n	800d0b0 <_printf_common+0xa4>
 800d072:	6823      	ldr	r3, [r4, #0]
 800d074:	68e5      	ldr	r5, [r4, #12]
 800d076:	6832      	ldr	r2, [r6, #0]
 800d078:	f003 0306 	and.w	r3, r3, #6
 800d07c:	2b04      	cmp	r3, #4
 800d07e:	bf08      	it	eq
 800d080:	1aad      	subeq	r5, r5, r2
 800d082:	68a3      	ldr	r3, [r4, #8]
 800d084:	6922      	ldr	r2, [r4, #16]
 800d086:	bf0c      	ite	eq
 800d088:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800d08c:	2500      	movne	r5, #0
 800d08e:	4293      	cmp	r3, r2
 800d090:	bfc4      	itt	gt
 800d092:	1a9b      	subgt	r3, r3, r2
 800d094:	18ed      	addgt	r5, r5, r3
 800d096:	2600      	movs	r6, #0
 800d098:	341a      	adds	r4, #26
 800d09a:	42b5      	cmp	r5, r6
 800d09c:	d11a      	bne.n	800d0d4 <_printf_common+0xc8>
 800d09e:	2000      	movs	r0, #0
 800d0a0:	e008      	b.n	800d0b4 <_printf_common+0xa8>
 800d0a2:	2301      	movs	r3, #1
 800d0a4:	4652      	mov	r2, sl
 800d0a6:	4649      	mov	r1, r9
 800d0a8:	4638      	mov	r0, r7
 800d0aa:	47c0      	blx	r8
 800d0ac:	3001      	adds	r0, #1
 800d0ae:	d103      	bne.n	800d0b8 <_printf_common+0xac>
 800d0b0:	f04f 30ff 	mov.w	r0, #4294967295
 800d0b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d0b8:	3501      	adds	r5, #1
 800d0ba:	e7c6      	b.n	800d04a <_printf_common+0x3e>
 800d0bc:	18e1      	adds	r1, r4, r3
 800d0be:	1c5a      	adds	r2, r3, #1
 800d0c0:	2030      	movs	r0, #48	; 0x30
 800d0c2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800d0c6:	4422      	add	r2, r4
 800d0c8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800d0cc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800d0d0:	3302      	adds	r3, #2
 800d0d2:	e7c7      	b.n	800d064 <_printf_common+0x58>
 800d0d4:	2301      	movs	r3, #1
 800d0d6:	4622      	mov	r2, r4
 800d0d8:	4649      	mov	r1, r9
 800d0da:	4638      	mov	r0, r7
 800d0dc:	47c0      	blx	r8
 800d0de:	3001      	adds	r0, #1
 800d0e0:	d0e6      	beq.n	800d0b0 <_printf_common+0xa4>
 800d0e2:	3601      	adds	r6, #1
 800d0e4:	e7d9      	b.n	800d09a <_printf_common+0x8e>
	...

0800d0e8 <_printf_i>:
 800d0e8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800d0ec:	7e0f      	ldrb	r7, [r1, #24]
 800d0ee:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800d0f0:	2f78      	cmp	r7, #120	; 0x78
 800d0f2:	4691      	mov	r9, r2
 800d0f4:	4680      	mov	r8, r0
 800d0f6:	460c      	mov	r4, r1
 800d0f8:	469a      	mov	sl, r3
 800d0fa:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800d0fe:	d807      	bhi.n	800d110 <_printf_i+0x28>
 800d100:	2f62      	cmp	r7, #98	; 0x62
 800d102:	d80a      	bhi.n	800d11a <_printf_i+0x32>
 800d104:	2f00      	cmp	r7, #0
 800d106:	f000 80d8 	beq.w	800d2ba <_printf_i+0x1d2>
 800d10a:	2f58      	cmp	r7, #88	; 0x58
 800d10c:	f000 80a3 	beq.w	800d256 <_printf_i+0x16e>
 800d110:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800d114:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800d118:	e03a      	b.n	800d190 <_printf_i+0xa8>
 800d11a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800d11e:	2b15      	cmp	r3, #21
 800d120:	d8f6      	bhi.n	800d110 <_printf_i+0x28>
 800d122:	a101      	add	r1, pc, #4	; (adr r1, 800d128 <_printf_i+0x40>)
 800d124:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800d128:	0800d181 	.word	0x0800d181
 800d12c:	0800d195 	.word	0x0800d195
 800d130:	0800d111 	.word	0x0800d111
 800d134:	0800d111 	.word	0x0800d111
 800d138:	0800d111 	.word	0x0800d111
 800d13c:	0800d111 	.word	0x0800d111
 800d140:	0800d195 	.word	0x0800d195
 800d144:	0800d111 	.word	0x0800d111
 800d148:	0800d111 	.word	0x0800d111
 800d14c:	0800d111 	.word	0x0800d111
 800d150:	0800d111 	.word	0x0800d111
 800d154:	0800d2a1 	.word	0x0800d2a1
 800d158:	0800d1c5 	.word	0x0800d1c5
 800d15c:	0800d283 	.word	0x0800d283
 800d160:	0800d111 	.word	0x0800d111
 800d164:	0800d111 	.word	0x0800d111
 800d168:	0800d2c3 	.word	0x0800d2c3
 800d16c:	0800d111 	.word	0x0800d111
 800d170:	0800d1c5 	.word	0x0800d1c5
 800d174:	0800d111 	.word	0x0800d111
 800d178:	0800d111 	.word	0x0800d111
 800d17c:	0800d28b 	.word	0x0800d28b
 800d180:	682b      	ldr	r3, [r5, #0]
 800d182:	1d1a      	adds	r2, r3, #4
 800d184:	681b      	ldr	r3, [r3, #0]
 800d186:	602a      	str	r2, [r5, #0]
 800d188:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800d18c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800d190:	2301      	movs	r3, #1
 800d192:	e0a3      	b.n	800d2dc <_printf_i+0x1f4>
 800d194:	6820      	ldr	r0, [r4, #0]
 800d196:	6829      	ldr	r1, [r5, #0]
 800d198:	0606      	lsls	r6, r0, #24
 800d19a:	f101 0304 	add.w	r3, r1, #4
 800d19e:	d50a      	bpl.n	800d1b6 <_printf_i+0xce>
 800d1a0:	680e      	ldr	r6, [r1, #0]
 800d1a2:	602b      	str	r3, [r5, #0]
 800d1a4:	2e00      	cmp	r6, #0
 800d1a6:	da03      	bge.n	800d1b0 <_printf_i+0xc8>
 800d1a8:	232d      	movs	r3, #45	; 0x2d
 800d1aa:	4276      	negs	r6, r6
 800d1ac:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d1b0:	485e      	ldr	r0, [pc, #376]	; (800d32c <_printf_i+0x244>)
 800d1b2:	230a      	movs	r3, #10
 800d1b4:	e019      	b.n	800d1ea <_printf_i+0x102>
 800d1b6:	680e      	ldr	r6, [r1, #0]
 800d1b8:	602b      	str	r3, [r5, #0]
 800d1ba:	f010 0f40 	tst.w	r0, #64	; 0x40
 800d1be:	bf18      	it	ne
 800d1c0:	b236      	sxthne	r6, r6
 800d1c2:	e7ef      	b.n	800d1a4 <_printf_i+0xbc>
 800d1c4:	682b      	ldr	r3, [r5, #0]
 800d1c6:	6820      	ldr	r0, [r4, #0]
 800d1c8:	1d19      	adds	r1, r3, #4
 800d1ca:	6029      	str	r1, [r5, #0]
 800d1cc:	0601      	lsls	r1, r0, #24
 800d1ce:	d501      	bpl.n	800d1d4 <_printf_i+0xec>
 800d1d0:	681e      	ldr	r6, [r3, #0]
 800d1d2:	e002      	b.n	800d1da <_printf_i+0xf2>
 800d1d4:	0646      	lsls	r6, r0, #25
 800d1d6:	d5fb      	bpl.n	800d1d0 <_printf_i+0xe8>
 800d1d8:	881e      	ldrh	r6, [r3, #0]
 800d1da:	4854      	ldr	r0, [pc, #336]	; (800d32c <_printf_i+0x244>)
 800d1dc:	2f6f      	cmp	r7, #111	; 0x6f
 800d1de:	bf0c      	ite	eq
 800d1e0:	2308      	moveq	r3, #8
 800d1e2:	230a      	movne	r3, #10
 800d1e4:	2100      	movs	r1, #0
 800d1e6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800d1ea:	6865      	ldr	r5, [r4, #4]
 800d1ec:	60a5      	str	r5, [r4, #8]
 800d1ee:	2d00      	cmp	r5, #0
 800d1f0:	bfa2      	ittt	ge
 800d1f2:	6821      	ldrge	r1, [r4, #0]
 800d1f4:	f021 0104 	bicge.w	r1, r1, #4
 800d1f8:	6021      	strge	r1, [r4, #0]
 800d1fa:	b90e      	cbnz	r6, 800d200 <_printf_i+0x118>
 800d1fc:	2d00      	cmp	r5, #0
 800d1fe:	d04d      	beq.n	800d29c <_printf_i+0x1b4>
 800d200:	4615      	mov	r5, r2
 800d202:	fbb6 f1f3 	udiv	r1, r6, r3
 800d206:	fb03 6711 	mls	r7, r3, r1, r6
 800d20a:	5dc7      	ldrb	r7, [r0, r7]
 800d20c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800d210:	4637      	mov	r7, r6
 800d212:	42bb      	cmp	r3, r7
 800d214:	460e      	mov	r6, r1
 800d216:	d9f4      	bls.n	800d202 <_printf_i+0x11a>
 800d218:	2b08      	cmp	r3, #8
 800d21a:	d10b      	bne.n	800d234 <_printf_i+0x14c>
 800d21c:	6823      	ldr	r3, [r4, #0]
 800d21e:	07de      	lsls	r6, r3, #31
 800d220:	d508      	bpl.n	800d234 <_printf_i+0x14c>
 800d222:	6923      	ldr	r3, [r4, #16]
 800d224:	6861      	ldr	r1, [r4, #4]
 800d226:	4299      	cmp	r1, r3
 800d228:	bfde      	ittt	le
 800d22a:	2330      	movle	r3, #48	; 0x30
 800d22c:	f805 3c01 	strble.w	r3, [r5, #-1]
 800d230:	f105 35ff 	addle.w	r5, r5, #4294967295
 800d234:	1b52      	subs	r2, r2, r5
 800d236:	6122      	str	r2, [r4, #16]
 800d238:	f8cd a000 	str.w	sl, [sp]
 800d23c:	464b      	mov	r3, r9
 800d23e:	aa03      	add	r2, sp, #12
 800d240:	4621      	mov	r1, r4
 800d242:	4640      	mov	r0, r8
 800d244:	f7ff fee2 	bl	800d00c <_printf_common>
 800d248:	3001      	adds	r0, #1
 800d24a:	d14c      	bne.n	800d2e6 <_printf_i+0x1fe>
 800d24c:	f04f 30ff 	mov.w	r0, #4294967295
 800d250:	b004      	add	sp, #16
 800d252:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d256:	4835      	ldr	r0, [pc, #212]	; (800d32c <_printf_i+0x244>)
 800d258:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800d25c:	6829      	ldr	r1, [r5, #0]
 800d25e:	6823      	ldr	r3, [r4, #0]
 800d260:	f851 6b04 	ldr.w	r6, [r1], #4
 800d264:	6029      	str	r1, [r5, #0]
 800d266:	061d      	lsls	r5, r3, #24
 800d268:	d514      	bpl.n	800d294 <_printf_i+0x1ac>
 800d26a:	07df      	lsls	r7, r3, #31
 800d26c:	bf44      	itt	mi
 800d26e:	f043 0320 	orrmi.w	r3, r3, #32
 800d272:	6023      	strmi	r3, [r4, #0]
 800d274:	b91e      	cbnz	r6, 800d27e <_printf_i+0x196>
 800d276:	6823      	ldr	r3, [r4, #0]
 800d278:	f023 0320 	bic.w	r3, r3, #32
 800d27c:	6023      	str	r3, [r4, #0]
 800d27e:	2310      	movs	r3, #16
 800d280:	e7b0      	b.n	800d1e4 <_printf_i+0xfc>
 800d282:	6823      	ldr	r3, [r4, #0]
 800d284:	f043 0320 	orr.w	r3, r3, #32
 800d288:	6023      	str	r3, [r4, #0]
 800d28a:	2378      	movs	r3, #120	; 0x78
 800d28c:	4828      	ldr	r0, [pc, #160]	; (800d330 <_printf_i+0x248>)
 800d28e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800d292:	e7e3      	b.n	800d25c <_printf_i+0x174>
 800d294:	0659      	lsls	r1, r3, #25
 800d296:	bf48      	it	mi
 800d298:	b2b6      	uxthmi	r6, r6
 800d29a:	e7e6      	b.n	800d26a <_printf_i+0x182>
 800d29c:	4615      	mov	r5, r2
 800d29e:	e7bb      	b.n	800d218 <_printf_i+0x130>
 800d2a0:	682b      	ldr	r3, [r5, #0]
 800d2a2:	6826      	ldr	r6, [r4, #0]
 800d2a4:	6961      	ldr	r1, [r4, #20]
 800d2a6:	1d18      	adds	r0, r3, #4
 800d2a8:	6028      	str	r0, [r5, #0]
 800d2aa:	0635      	lsls	r5, r6, #24
 800d2ac:	681b      	ldr	r3, [r3, #0]
 800d2ae:	d501      	bpl.n	800d2b4 <_printf_i+0x1cc>
 800d2b0:	6019      	str	r1, [r3, #0]
 800d2b2:	e002      	b.n	800d2ba <_printf_i+0x1d2>
 800d2b4:	0670      	lsls	r0, r6, #25
 800d2b6:	d5fb      	bpl.n	800d2b0 <_printf_i+0x1c8>
 800d2b8:	8019      	strh	r1, [r3, #0]
 800d2ba:	2300      	movs	r3, #0
 800d2bc:	6123      	str	r3, [r4, #16]
 800d2be:	4615      	mov	r5, r2
 800d2c0:	e7ba      	b.n	800d238 <_printf_i+0x150>
 800d2c2:	682b      	ldr	r3, [r5, #0]
 800d2c4:	1d1a      	adds	r2, r3, #4
 800d2c6:	602a      	str	r2, [r5, #0]
 800d2c8:	681d      	ldr	r5, [r3, #0]
 800d2ca:	6862      	ldr	r2, [r4, #4]
 800d2cc:	2100      	movs	r1, #0
 800d2ce:	4628      	mov	r0, r5
 800d2d0:	f7f2 ff8e 	bl	80001f0 <memchr>
 800d2d4:	b108      	cbz	r0, 800d2da <_printf_i+0x1f2>
 800d2d6:	1b40      	subs	r0, r0, r5
 800d2d8:	6060      	str	r0, [r4, #4]
 800d2da:	6863      	ldr	r3, [r4, #4]
 800d2dc:	6123      	str	r3, [r4, #16]
 800d2de:	2300      	movs	r3, #0
 800d2e0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d2e4:	e7a8      	b.n	800d238 <_printf_i+0x150>
 800d2e6:	6923      	ldr	r3, [r4, #16]
 800d2e8:	462a      	mov	r2, r5
 800d2ea:	4649      	mov	r1, r9
 800d2ec:	4640      	mov	r0, r8
 800d2ee:	47d0      	blx	sl
 800d2f0:	3001      	adds	r0, #1
 800d2f2:	d0ab      	beq.n	800d24c <_printf_i+0x164>
 800d2f4:	6823      	ldr	r3, [r4, #0]
 800d2f6:	079b      	lsls	r3, r3, #30
 800d2f8:	d413      	bmi.n	800d322 <_printf_i+0x23a>
 800d2fa:	68e0      	ldr	r0, [r4, #12]
 800d2fc:	9b03      	ldr	r3, [sp, #12]
 800d2fe:	4298      	cmp	r0, r3
 800d300:	bfb8      	it	lt
 800d302:	4618      	movlt	r0, r3
 800d304:	e7a4      	b.n	800d250 <_printf_i+0x168>
 800d306:	2301      	movs	r3, #1
 800d308:	4632      	mov	r2, r6
 800d30a:	4649      	mov	r1, r9
 800d30c:	4640      	mov	r0, r8
 800d30e:	47d0      	blx	sl
 800d310:	3001      	adds	r0, #1
 800d312:	d09b      	beq.n	800d24c <_printf_i+0x164>
 800d314:	3501      	adds	r5, #1
 800d316:	68e3      	ldr	r3, [r4, #12]
 800d318:	9903      	ldr	r1, [sp, #12]
 800d31a:	1a5b      	subs	r3, r3, r1
 800d31c:	42ab      	cmp	r3, r5
 800d31e:	dcf2      	bgt.n	800d306 <_printf_i+0x21e>
 800d320:	e7eb      	b.n	800d2fa <_printf_i+0x212>
 800d322:	2500      	movs	r5, #0
 800d324:	f104 0619 	add.w	r6, r4, #25
 800d328:	e7f5      	b.n	800d316 <_printf_i+0x22e>
 800d32a:	bf00      	nop
 800d32c:	0800dc43 	.word	0x0800dc43
 800d330:	0800dc54 	.word	0x0800dc54

0800d334 <_sbrk_r>:
 800d334:	b538      	push	{r3, r4, r5, lr}
 800d336:	4d06      	ldr	r5, [pc, #24]	; (800d350 <_sbrk_r+0x1c>)
 800d338:	2300      	movs	r3, #0
 800d33a:	4604      	mov	r4, r0
 800d33c:	4608      	mov	r0, r1
 800d33e:	602b      	str	r3, [r5, #0]
 800d340:	f7f6 f85c 	bl	80033fc <_sbrk>
 800d344:	1c43      	adds	r3, r0, #1
 800d346:	d102      	bne.n	800d34e <_sbrk_r+0x1a>
 800d348:	682b      	ldr	r3, [r5, #0]
 800d34a:	b103      	cbz	r3, 800d34e <_sbrk_r+0x1a>
 800d34c:	6023      	str	r3, [r4, #0]
 800d34e:	bd38      	pop	{r3, r4, r5, pc}
 800d350:	200007ec 	.word	0x200007ec

0800d354 <__swbuf_r>:
 800d354:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d356:	460e      	mov	r6, r1
 800d358:	4614      	mov	r4, r2
 800d35a:	4605      	mov	r5, r0
 800d35c:	b118      	cbz	r0, 800d366 <__swbuf_r+0x12>
 800d35e:	6983      	ldr	r3, [r0, #24]
 800d360:	b90b      	cbnz	r3, 800d366 <__swbuf_r+0x12>
 800d362:	f000 f9d9 	bl	800d718 <__sinit>
 800d366:	4b21      	ldr	r3, [pc, #132]	; (800d3ec <__swbuf_r+0x98>)
 800d368:	429c      	cmp	r4, r3
 800d36a:	d12b      	bne.n	800d3c4 <__swbuf_r+0x70>
 800d36c:	686c      	ldr	r4, [r5, #4]
 800d36e:	69a3      	ldr	r3, [r4, #24]
 800d370:	60a3      	str	r3, [r4, #8]
 800d372:	89a3      	ldrh	r3, [r4, #12]
 800d374:	071a      	lsls	r2, r3, #28
 800d376:	d52f      	bpl.n	800d3d8 <__swbuf_r+0x84>
 800d378:	6923      	ldr	r3, [r4, #16]
 800d37a:	b36b      	cbz	r3, 800d3d8 <__swbuf_r+0x84>
 800d37c:	6923      	ldr	r3, [r4, #16]
 800d37e:	6820      	ldr	r0, [r4, #0]
 800d380:	1ac0      	subs	r0, r0, r3
 800d382:	6963      	ldr	r3, [r4, #20]
 800d384:	b2f6      	uxtb	r6, r6
 800d386:	4283      	cmp	r3, r0
 800d388:	4637      	mov	r7, r6
 800d38a:	dc04      	bgt.n	800d396 <__swbuf_r+0x42>
 800d38c:	4621      	mov	r1, r4
 800d38e:	4628      	mov	r0, r5
 800d390:	f000 f92e 	bl	800d5f0 <_fflush_r>
 800d394:	bb30      	cbnz	r0, 800d3e4 <__swbuf_r+0x90>
 800d396:	68a3      	ldr	r3, [r4, #8]
 800d398:	3b01      	subs	r3, #1
 800d39a:	60a3      	str	r3, [r4, #8]
 800d39c:	6823      	ldr	r3, [r4, #0]
 800d39e:	1c5a      	adds	r2, r3, #1
 800d3a0:	6022      	str	r2, [r4, #0]
 800d3a2:	701e      	strb	r6, [r3, #0]
 800d3a4:	6963      	ldr	r3, [r4, #20]
 800d3a6:	3001      	adds	r0, #1
 800d3a8:	4283      	cmp	r3, r0
 800d3aa:	d004      	beq.n	800d3b6 <__swbuf_r+0x62>
 800d3ac:	89a3      	ldrh	r3, [r4, #12]
 800d3ae:	07db      	lsls	r3, r3, #31
 800d3b0:	d506      	bpl.n	800d3c0 <__swbuf_r+0x6c>
 800d3b2:	2e0a      	cmp	r6, #10
 800d3b4:	d104      	bne.n	800d3c0 <__swbuf_r+0x6c>
 800d3b6:	4621      	mov	r1, r4
 800d3b8:	4628      	mov	r0, r5
 800d3ba:	f000 f919 	bl	800d5f0 <_fflush_r>
 800d3be:	b988      	cbnz	r0, 800d3e4 <__swbuf_r+0x90>
 800d3c0:	4638      	mov	r0, r7
 800d3c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d3c4:	4b0a      	ldr	r3, [pc, #40]	; (800d3f0 <__swbuf_r+0x9c>)
 800d3c6:	429c      	cmp	r4, r3
 800d3c8:	d101      	bne.n	800d3ce <__swbuf_r+0x7a>
 800d3ca:	68ac      	ldr	r4, [r5, #8]
 800d3cc:	e7cf      	b.n	800d36e <__swbuf_r+0x1a>
 800d3ce:	4b09      	ldr	r3, [pc, #36]	; (800d3f4 <__swbuf_r+0xa0>)
 800d3d0:	429c      	cmp	r4, r3
 800d3d2:	bf08      	it	eq
 800d3d4:	68ec      	ldreq	r4, [r5, #12]
 800d3d6:	e7ca      	b.n	800d36e <__swbuf_r+0x1a>
 800d3d8:	4621      	mov	r1, r4
 800d3da:	4628      	mov	r0, r5
 800d3dc:	f000 f80c 	bl	800d3f8 <__swsetup_r>
 800d3e0:	2800      	cmp	r0, #0
 800d3e2:	d0cb      	beq.n	800d37c <__swbuf_r+0x28>
 800d3e4:	f04f 37ff 	mov.w	r7, #4294967295
 800d3e8:	e7ea      	b.n	800d3c0 <__swbuf_r+0x6c>
 800d3ea:	bf00      	nop
 800d3ec:	0800dc88 	.word	0x0800dc88
 800d3f0:	0800dca8 	.word	0x0800dca8
 800d3f4:	0800dc68 	.word	0x0800dc68

0800d3f8 <__swsetup_r>:
 800d3f8:	4b32      	ldr	r3, [pc, #200]	; (800d4c4 <__swsetup_r+0xcc>)
 800d3fa:	b570      	push	{r4, r5, r6, lr}
 800d3fc:	681d      	ldr	r5, [r3, #0]
 800d3fe:	4606      	mov	r6, r0
 800d400:	460c      	mov	r4, r1
 800d402:	b125      	cbz	r5, 800d40e <__swsetup_r+0x16>
 800d404:	69ab      	ldr	r3, [r5, #24]
 800d406:	b913      	cbnz	r3, 800d40e <__swsetup_r+0x16>
 800d408:	4628      	mov	r0, r5
 800d40a:	f000 f985 	bl	800d718 <__sinit>
 800d40e:	4b2e      	ldr	r3, [pc, #184]	; (800d4c8 <__swsetup_r+0xd0>)
 800d410:	429c      	cmp	r4, r3
 800d412:	d10f      	bne.n	800d434 <__swsetup_r+0x3c>
 800d414:	686c      	ldr	r4, [r5, #4]
 800d416:	89a3      	ldrh	r3, [r4, #12]
 800d418:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800d41c:	0719      	lsls	r1, r3, #28
 800d41e:	d42c      	bmi.n	800d47a <__swsetup_r+0x82>
 800d420:	06dd      	lsls	r5, r3, #27
 800d422:	d411      	bmi.n	800d448 <__swsetup_r+0x50>
 800d424:	2309      	movs	r3, #9
 800d426:	6033      	str	r3, [r6, #0]
 800d428:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800d42c:	81a3      	strh	r3, [r4, #12]
 800d42e:	f04f 30ff 	mov.w	r0, #4294967295
 800d432:	e03e      	b.n	800d4b2 <__swsetup_r+0xba>
 800d434:	4b25      	ldr	r3, [pc, #148]	; (800d4cc <__swsetup_r+0xd4>)
 800d436:	429c      	cmp	r4, r3
 800d438:	d101      	bne.n	800d43e <__swsetup_r+0x46>
 800d43a:	68ac      	ldr	r4, [r5, #8]
 800d43c:	e7eb      	b.n	800d416 <__swsetup_r+0x1e>
 800d43e:	4b24      	ldr	r3, [pc, #144]	; (800d4d0 <__swsetup_r+0xd8>)
 800d440:	429c      	cmp	r4, r3
 800d442:	bf08      	it	eq
 800d444:	68ec      	ldreq	r4, [r5, #12]
 800d446:	e7e6      	b.n	800d416 <__swsetup_r+0x1e>
 800d448:	0758      	lsls	r0, r3, #29
 800d44a:	d512      	bpl.n	800d472 <__swsetup_r+0x7a>
 800d44c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d44e:	b141      	cbz	r1, 800d462 <__swsetup_r+0x6a>
 800d450:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d454:	4299      	cmp	r1, r3
 800d456:	d002      	beq.n	800d45e <__swsetup_r+0x66>
 800d458:	4630      	mov	r0, r6
 800d45a:	f7ff fb9d 	bl	800cb98 <_free_r>
 800d45e:	2300      	movs	r3, #0
 800d460:	6363      	str	r3, [r4, #52]	; 0x34
 800d462:	89a3      	ldrh	r3, [r4, #12]
 800d464:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800d468:	81a3      	strh	r3, [r4, #12]
 800d46a:	2300      	movs	r3, #0
 800d46c:	6063      	str	r3, [r4, #4]
 800d46e:	6923      	ldr	r3, [r4, #16]
 800d470:	6023      	str	r3, [r4, #0]
 800d472:	89a3      	ldrh	r3, [r4, #12]
 800d474:	f043 0308 	orr.w	r3, r3, #8
 800d478:	81a3      	strh	r3, [r4, #12]
 800d47a:	6923      	ldr	r3, [r4, #16]
 800d47c:	b94b      	cbnz	r3, 800d492 <__swsetup_r+0x9a>
 800d47e:	89a3      	ldrh	r3, [r4, #12]
 800d480:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800d484:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d488:	d003      	beq.n	800d492 <__swsetup_r+0x9a>
 800d48a:	4621      	mov	r1, r4
 800d48c:	4630      	mov	r0, r6
 800d48e:	f000 fa09 	bl	800d8a4 <__smakebuf_r>
 800d492:	89a0      	ldrh	r0, [r4, #12]
 800d494:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800d498:	f010 0301 	ands.w	r3, r0, #1
 800d49c:	d00a      	beq.n	800d4b4 <__swsetup_r+0xbc>
 800d49e:	2300      	movs	r3, #0
 800d4a0:	60a3      	str	r3, [r4, #8]
 800d4a2:	6963      	ldr	r3, [r4, #20]
 800d4a4:	425b      	negs	r3, r3
 800d4a6:	61a3      	str	r3, [r4, #24]
 800d4a8:	6923      	ldr	r3, [r4, #16]
 800d4aa:	b943      	cbnz	r3, 800d4be <__swsetup_r+0xc6>
 800d4ac:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800d4b0:	d1ba      	bne.n	800d428 <__swsetup_r+0x30>
 800d4b2:	bd70      	pop	{r4, r5, r6, pc}
 800d4b4:	0781      	lsls	r1, r0, #30
 800d4b6:	bf58      	it	pl
 800d4b8:	6963      	ldrpl	r3, [r4, #20]
 800d4ba:	60a3      	str	r3, [r4, #8]
 800d4bc:	e7f4      	b.n	800d4a8 <__swsetup_r+0xb0>
 800d4be:	2000      	movs	r0, #0
 800d4c0:	e7f7      	b.n	800d4b2 <__swsetup_r+0xba>
 800d4c2:	bf00      	nop
 800d4c4:	200000f8 	.word	0x200000f8
 800d4c8:	0800dc88 	.word	0x0800dc88
 800d4cc:	0800dca8 	.word	0x0800dca8
 800d4d0:	0800dc68 	.word	0x0800dc68

0800d4d4 <abort>:
 800d4d4:	b508      	push	{r3, lr}
 800d4d6:	2006      	movs	r0, #6
 800d4d8:	f000 fa58 	bl	800d98c <raise>
 800d4dc:	2001      	movs	r0, #1
 800d4de:	f7f5 ff15 	bl	800330c <_exit>
	...

0800d4e4 <__sflush_r>:
 800d4e4:	898a      	ldrh	r2, [r1, #12]
 800d4e6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d4ea:	4605      	mov	r5, r0
 800d4ec:	0710      	lsls	r0, r2, #28
 800d4ee:	460c      	mov	r4, r1
 800d4f0:	d458      	bmi.n	800d5a4 <__sflush_r+0xc0>
 800d4f2:	684b      	ldr	r3, [r1, #4]
 800d4f4:	2b00      	cmp	r3, #0
 800d4f6:	dc05      	bgt.n	800d504 <__sflush_r+0x20>
 800d4f8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800d4fa:	2b00      	cmp	r3, #0
 800d4fc:	dc02      	bgt.n	800d504 <__sflush_r+0x20>
 800d4fe:	2000      	movs	r0, #0
 800d500:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d504:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800d506:	2e00      	cmp	r6, #0
 800d508:	d0f9      	beq.n	800d4fe <__sflush_r+0x1a>
 800d50a:	2300      	movs	r3, #0
 800d50c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800d510:	682f      	ldr	r7, [r5, #0]
 800d512:	602b      	str	r3, [r5, #0]
 800d514:	d032      	beq.n	800d57c <__sflush_r+0x98>
 800d516:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800d518:	89a3      	ldrh	r3, [r4, #12]
 800d51a:	075a      	lsls	r2, r3, #29
 800d51c:	d505      	bpl.n	800d52a <__sflush_r+0x46>
 800d51e:	6863      	ldr	r3, [r4, #4]
 800d520:	1ac0      	subs	r0, r0, r3
 800d522:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800d524:	b10b      	cbz	r3, 800d52a <__sflush_r+0x46>
 800d526:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800d528:	1ac0      	subs	r0, r0, r3
 800d52a:	2300      	movs	r3, #0
 800d52c:	4602      	mov	r2, r0
 800d52e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800d530:	6a21      	ldr	r1, [r4, #32]
 800d532:	4628      	mov	r0, r5
 800d534:	47b0      	blx	r6
 800d536:	1c43      	adds	r3, r0, #1
 800d538:	89a3      	ldrh	r3, [r4, #12]
 800d53a:	d106      	bne.n	800d54a <__sflush_r+0x66>
 800d53c:	6829      	ldr	r1, [r5, #0]
 800d53e:	291d      	cmp	r1, #29
 800d540:	d82c      	bhi.n	800d59c <__sflush_r+0xb8>
 800d542:	4a2a      	ldr	r2, [pc, #168]	; (800d5ec <__sflush_r+0x108>)
 800d544:	40ca      	lsrs	r2, r1
 800d546:	07d6      	lsls	r6, r2, #31
 800d548:	d528      	bpl.n	800d59c <__sflush_r+0xb8>
 800d54a:	2200      	movs	r2, #0
 800d54c:	6062      	str	r2, [r4, #4]
 800d54e:	04d9      	lsls	r1, r3, #19
 800d550:	6922      	ldr	r2, [r4, #16]
 800d552:	6022      	str	r2, [r4, #0]
 800d554:	d504      	bpl.n	800d560 <__sflush_r+0x7c>
 800d556:	1c42      	adds	r2, r0, #1
 800d558:	d101      	bne.n	800d55e <__sflush_r+0x7a>
 800d55a:	682b      	ldr	r3, [r5, #0]
 800d55c:	b903      	cbnz	r3, 800d560 <__sflush_r+0x7c>
 800d55e:	6560      	str	r0, [r4, #84]	; 0x54
 800d560:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d562:	602f      	str	r7, [r5, #0]
 800d564:	2900      	cmp	r1, #0
 800d566:	d0ca      	beq.n	800d4fe <__sflush_r+0x1a>
 800d568:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d56c:	4299      	cmp	r1, r3
 800d56e:	d002      	beq.n	800d576 <__sflush_r+0x92>
 800d570:	4628      	mov	r0, r5
 800d572:	f7ff fb11 	bl	800cb98 <_free_r>
 800d576:	2000      	movs	r0, #0
 800d578:	6360      	str	r0, [r4, #52]	; 0x34
 800d57a:	e7c1      	b.n	800d500 <__sflush_r+0x1c>
 800d57c:	6a21      	ldr	r1, [r4, #32]
 800d57e:	2301      	movs	r3, #1
 800d580:	4628      	mov	r0, r5
 800d582:	47b0      	blx	r6
 800d584:	1c41      	adds	r1, r0, #1
 800d586:	d1c7      	bne.n	800d518 <__sflush_r+0x34>
 800d588:	682b      	ldr	r3, [r5, #0]
 800d58a:	2b00      	cmp	r3, #0
 800d58c:	d0c4      	beq.n	800d518 <__sflush_r+0x34>
 800d58e:	2b1d      	cmp	r3, #29
 800d590:	d001      	beq.n	800d596 <__sflush_r+0xb2>
 800d592:	2b16      	cmp	r3, #22
 800d594:	d101      	bne.n	800d59a <__sflush_r+0xb6>
 800d596:	602f      	str	r7, [r5, #0]
 800d598:	e7b1      	b.n	800d4fe <__sflush_r+0x1a>
 800d59a:	89a3      	ldrh	r3, [r4, #12]
 800d59c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d5a0:	81a3      	strh	r3, [r4, #12]
 800d5a2:	e7ad      	b.n	800d500 <__sflush_r+0x1c>
 800d5a4:	690f      	ldr	r7, [r1, #16]
 800d5a6:	2f00      	cmp	r7, #0
 800d5a8:	d0a9      	beq.n	800d4fe <__sflush_r+0x1a>
 800d5aa:	0793      	lsls	r3, r2, #30
 800d5ac:	680e      	ldr	r6, [r1, #0]
 800d5ae:	bf08      	it	eq
 800d5b0:	694b      	ldreq	r3, [r1, #20]
 800d5b2:	600f      	str	r7, [r1, #0]
 800d5b4:	bf18      	it	ne
 800d5b6:	2300      	movne	r3, #0
 800d5b8:	eba6 0807 	sub.w	r8, r6, r7
 800d5bc:	608b      	str	r3, [r1, #8]
 800d5be:	f1b8 0f00 	cmp.w	r8, #0
 800d5c2:	dd9c      	ble.n	800d4fe <__sflush_r+0x1a>
 800d5c4:	6a21      	ldr	r1, [r4, #32]
 800d5c6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800d5c8:	4643      	mov	r3, r8
 800d5ca:	463a      	mov	r2, r7
 800d5cc:	4628      	mov	r0, r5
 800d5ce:	47b0      	blx	r6
 800d5d0:	2800      	cmp	r0, #0
 800d5d2:	dc06      	bgt.n	800d5e2 <__sflush_r+0xfe>
 800d5d4:	89a3      	ldrh	r3, [r4, #12]
 800d5d6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d5da:	81a3      	strh	r3, [r4, #12]
 800d5dc:	f04f 30ff 	mov.w	r0, #4294967295
 800d5e0:	e78e      	b.n	800d500 <__sflush_r+0x1c>
 800d5e2:	4407      	add	r7, r0
 800d5e4:	eba8 0800 	sub.w	r8, r8, r0
 800d5e8:	e7e9      	b.n	800d5be <__sflush_r+0xda>
 800d5ea:	bf00      	nop
 800d5ec:	20400001 	.word	0x20400001

0800d5f0 <_fflush_r>:
 800d5f0:	b538      	push	{r3, r4, r5, lr}
 800d5f2:	690b      	ldr	r3, [r1, #16]
 800d5f4:	4605      	mov	r5, r0
 800d5f6:	460c      	mov	r4, r1
 800d5f8:	b913      	cbnz	r3, 800d600 <_fflush_r+0x10>
 800d5fa:	2500      	movs	r5, #0
 800d5fc:	4628      	mov	r0, r5
 800d5fe:	bd38      	pop	{r3, r4, r5, pc}
 800d600:	b118      	cbz	r0, 800d60a <_fflush_r+0x1a>
 800d602:	6983      	ldr	r3, [r0, #24]
 800d604:	b90b      	cbnz	r3, 800d60a <_fflush_r+0x1a>
 800d606:	f000 f887 	bl	800d718 <__sinit>
 800d60a:	4b14      	ldr	r3, [pc, #80]	; (800d65c <_fflush_r+0x6c>)
 800d60c:	429c      	cmp	r4, r3
 800d60e:	d11b      	bne.n	800d648 <_fflush_r+0x58>
 800d610:	686c      	ldr	r4, [r5, #4]
 800d612:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d616:	2b00      	cmp	r3, #0
 800d618:	d0ef      	beq.n	800d5fa <_fflush_r+0xa>
 800d61a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800d61c:	07d0      	lsls	r0, r2, #31
 800d61e:	d404      	bmi.n	800d62a <_fflush_r+0x3a>
 800d620:	0599      	lsls	r1, r3, #22
 800d622:	d402      	bmi.n	800d62a <_fflush_r+0x3a>
 800d624:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d626:	f000 f915 	bl	800d854 <__retarget_lock_acquire_recursive>
 800d62a:	4628      	mov	r0, r5
 800d62c:	4621      	mov	r1, r4
 800d62e:	f7ff ff59 	bl	800d4e4 <__sflush_r>
 800d632:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800d634:	07da      	lsls	r2, r3, #31
 800d636:	4605      	mov	r5, r0
 800d638:	d4e0      	bmi.n	800d5fc <_fflush_r+0xc>
 800d63a:	89a3      	ldrh	r3, [r4, #12]
 800d63c:	059b      	lsls	r3, r3, #22
 800d63e:	d4dd      	bmi.n	800d5fc <_fflush_r+0xc>
 800d640:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d642:	f000 f908 	bl	800d856 <__retarget_lock_release_recursive>
 800d646:	e7d9      	b.n	800d5fc <_fflush_r+0xc>
 800d648:	4b05      	ldr	r3, [pc, #20]	; (800d660 <_fflush_r+0x70>)
 800d64a:	429c      	cmp	r4, r3
 800d64c:	d101      	bne.n	800d652 <_fflush_r+0x62>
 800d64e:	68ac      	ldr	r4, [r5, #8]
 800d650:	e7df      	b.n	800d612 <_fflush_r+0x22>
 800d652:	4b04      	ldr	r3, [pc, #16]	; (800d664 <_fflush_r+0x74>)
 800d654:	429c      	cmp	r4, r3
 800d656:	bf08      	it	eq
 800d658:	68ec      	ldreq	r4, [r5, #12]
 800d65a:	e7da      	b.n	800d612 <_fflush_r+0x22>
 800d65c:	0800dc88 	.word	0x0800dc88
 800d660:	0800dca8 	.word	0x0800dca8
 800d664:	0800dc68 	.word	0x0800dc68

0800d668 <std>:
 800d668:	2300      	movs	r3, #0
 800d66a:	b510      	push	{r4, lr}
 800d66c:	4604      	mov	r4, r0
 800d66e:	e9c0 3300 	strd	r3, r3, [r0]
 800d672:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800d676:	6083      	str	r3, [r0, #8]
 800d678:	8181      	strh	r1, [r0, #12]
 800d67a:	6643      	str	r3, [r0, #100]	; 0x64
 800d67c:	81c2      	strh	r2, [r0, #14]
 800d67e:	6183      	str	r3, [r0, #24]
 800d680:	4619      	mov	r1, r3
 800d682:	2208      	movs	r2, #8
 800d684:	305c      	adds	r0, #92	; 0x5c
 800d686:	f7ff f9db 	bl	800ca40 <memset>
 800d68a:	4b05      	ldr	r3, [pc, #20]	; (800d6a0 <std+0x38>)
 800d68c:	6263      	str	r3, [r4, #36]	; 0x24
 800d68e:	4b05      	ldr	r3, [pc, #20]	; (800d6a4 <std+0x3c>)
 800d690:	62a3      	str	r3, [r4, #40]	; 0x28
 800d692:	4b05      	ldr	r3, [pc, #20]	; (800d6a8 <std+0x40>)
 800d694:	62e3      	str	r3, [r4, #44]	; 0x2c
 800d696:	4b05      	ldr	r3, [pc, #20]	; (800d6ac <std+0x44>)
 800d698:	6224      	str	r4, [r4, #32]
 800d69a:	6323      	str	r3, [r4, #48]	; 0x30
 800d69c:	bd10      	pop	{r4, pc}
 800d69e:	bf00      	nop
 800d6a0:	0800d9c5 	.word	0x0800d9c5
 800d6a4:	0800d9e7 	.word	0x0800d9e7
 800d6a8:	0800da1f 	.word	0x0800da1f
 800d6ac:	0800da43 	.word	0x0800da43

0800d6b0 <_cleanup_r>:
 800d6b0:	4901      	ldr	r1, [pc, #4]	; (800d6b8 <_cleanup_r+0x8>)
 800d6b2:	f000 b8af 	b.w	800d814 <_fwalk_reent>
 800d6b6:	bf00      	nop
 800d6b8:	0800d5f1 	.word	0x0800d5f1

0800d6bc <__sfmoreglue>:
 800d6bc:	b570      	push	{r4, r5, r6, lr}
 800d6be:	2268      	movs	r2, #104	; 0x68
 800d6c0:	1e4d      	subs	r5, r1, #1
 800d6c2:	4355      	muls	r5, r2
 800d6c4:	460e      	mov	r6, r1
 800d6c6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800d6ca:	f7ff fad1 	bl	800cc70 <_malloc_r>
 800d6ce:	4604      	mov	r4, r0
 800d6d0:	b140      	cbz	r0, 800d6e4 <__sfmoreglue+0x28>
 800d6d2:	2100      	movs	r1, #0
 800d6d4:	e9c0 1600 	strd	r1, r6, [r0]
 800d6d8:	300c      	adds	r0, #12
 800d6da:	60a0      	str	r0, [r4, #8]
 800d6dc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800d6e0:	f7ff f9ae 	bl	800ca40 <memset>
 800d6e4:	4620      	mov	r0, r4
 800d6e6:	bd70      	pop	{r4, r5, r6, pc}

0800d6e8 <__sfp_lock_acquire>:
 800d6e8:	4801      	ldr	r0, [pc, #4]	; (800d6f0 <__sfp_lock_acquire+0x8>)
 800d6ea:	f000 b8b3 	b.w	800d854 <__retarget_lock_acquire_recursive>
 800d6ee:	bf00      	nop
 800d6f0:	200007e9 	.word	0x200007e9

0800d6f4 <__sfp_lock_release>:
 800d6f4:	4801      	ldr	r0, [pc, #4]	; (800d6fc <__sfp_lock_release+0x8>)
 800d6f6:	f000 b8ae 	b.w	800d856 <__retarget_lock_release_recursive>
 800d6fa:	bf00      	nop
 800d6fc:	200007e9 	.word	0x200007e9

0800d700 <__sinit_lock_acquire>:
 800d700:	4801      	ldr	r0, [pc, #4]	; (800d708 <__sinit_lock_acquire+0x8>)
 800d702:	f000 b8a7 	b.w	800d854 <__retarget_lock_acquire_recursive>
 800d706:	bf00      	nop
 800d708:	200007ea 	.word	0x200007ea

0800d70c <__sinit_lock_release>:
 800d70c:	4801      	ldr	r0, [pc, #4]	; (800d714 <__sinit_lock_release+0x8>)
 800d70e:	f000 b8a2 	b.w	800d856 <__retarget_lock_release_recursive>
 800d712:	bf00      	nop
 800d714:	200007ea 	.word	0x200007ea

0800d718 <__sinit>:
 800d718:	b510      	push	{r4, lr}
 800d71a:	4604      	mov	r4, r0
 800d71c:	f7ff fff0 	bl	800d700 <__sinit_lock_acquire>
 800d720:	69a3      	ldr	r3, [r4, #24]
 800d722:	b11b      	cbz	r3, 800d72c <__sinit+0x14>
 800d724:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d728:	f7ff bff0 	b.w	800d70c <__sinit_lock_release>
 800d72c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800d730:	6523      	str	r3, [r4, #80]	; 0x50
 800d732:	4b13      	ldr	r3, [pc, #76]	; (800d780 <__sinit+0x68>)
 800d734:	4a13      	ldr	r2, [pc, #76]	; (800d784 <__sinit+0x6c>)
 800d736:	681b      	ldr	r3, [r3, #0]
 800d738:	62a2      	str	r2, [r4, #40]	; 0x28
 800d73a:	42a3      	cmp	r3, r4
 800d73c:	bf04      	itt	eq
 800d73e:	2301      	moveq	r3, #1
 800d740:	61a3      	streq	r3, [r4, #24]
 800d742:	4620      	mov	r0, r4
 800d744:	f000 f820 	bl	800d788 <__sfp>
 800d748:	6060      	str	r0, [r4, #4]
 800d74a:	4620      	mov	r0, r4
 800d74c:	f000 f81c 	bl	800d788 <__sfp>
 800d750:	60a0      	str	r0, [r4, #8]
 800d752:	4620      	mov	r0, r4
 800d754:	f000 f818 	bl	800d788 <__sfp>
 800d758:	2200      	movs	r2, #0
 800d75a:	60e0      	str	r0, [r4, #12]
 800d75c:	2104      	movs	r1, #4
 800d75e:	6860      	ldr	r0, [r4, #4]
 800d760:	f7ff ff82 	bl	800d668 <std>
 800d764:	68a0      	ldr	r0, [r4, #8]
 800d766:	2201      	movs	r2, #1
 800d768:	2109      	movs	r1, #9
 800d76a:	f7ff ff7d 	bl	800d668 <std>
 800d76e:	68e0      	ldr	r0, [r4, #12]
 800d770:	2202      	movs	r2, #2
 800d772:	2112      	movs	r1, #18
 800d774:	f7ff ff78 	bl	800d668 <std>
 800d778:	2301      	movs	r3, #1
 800d77a:	61a3      	str	r3, [r4, #24]
 800d77c:	e7d2      	b.n	800d724 <__sinit+0xc>
 800d77e:	bf00      	nop
 800d780:	0800db80 	.word	0x0800db80
 800d784:	0800d6b1 	.word	0x0800d6b1

0800d788 <__sfp>:
 800d788:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d78a:	4607      	mov	r7, r0
 800d78c:	f7ff ffac 	bl	800d6e8 <__sfp_lock_acquire>
 800d790:	4b1e      	ldr	r3, [pc, #120]	; (800d80c <__sfp+0x84>)
 800d792:	681e      	ldr	r6, [r3, #0]
 800d794:	69b3      	ldr	r3, [r6, #24]
 800d796:	b913      	cbnz	r3, 800d79e <__sfp+0x16>
 800d798:	4630      	mov	r0, r6
 800d79a:	f7ff ffbd 	bl	800d718 <__sinit>
 800d79e:	3648      	adds	r6, #72	; 0x48
 800d7a0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800d7a4:	3b01      	subs	r3, #1
 800d7a6:	d503      	bpl.n	800d7b0 <__sfp+0x28>
 800d7a8:	6833      	ldr	r3, [r6, #0]
 800d7aa:	b30b      	cbz	r3, 800d7f0 <__sfp+0x68>
 800d7ac:	6836      	ldr	r6, [r6, #0]
 800d7ae:	e7f7      	b.n	800d7a0 <__sfp+0x18>
 800d7b0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800d7b4:	b9d5      	cbnz	r5, 800d7ec <__sfp+0x64>
 800d7b6:	4b16      	ldr	r3, [pc, #88]	; (800d810 <__sfp+0x88>)
 800d7b8:	60e3      	str	r3, [r4, #12]
 800d7ba:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800d7be:	6665      	str	r5, [r4, #100]	; 0x64
 800d7c0:	f000 f847 	bl	800d852 <__retarget_lock_init_recursive>
 800d7c4:	f7ff ff96 	bl	800d6f4 <__sfp_lock_release>
 800d7c8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800d7cc:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800d7d0:	6025      	str	r5, [r4, #0]
 800d7d2:	61a5      	str	r5, [r4, #24]
 800d7d4:	2208      	movs	r2, #8
 800d7d6:	4629      	mov	r1, r5
 800d7d8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800d7dc:	f7ff f930 	bl	800ca40 <memset>
 800d7e0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800d7e4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800d7e8:	4620      	mov	r0, r4
 800d7ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d7ec:	3468      	adds	r4, #104	; 0x68
 800d7ee:	e7d9      	b.n	800d7a4 <__sfp+0x1c>
 800d7f0:	2104      	movs	r1, #4
 800d7f2:	4638      	mov	r0, r7
 800d7f4:	f7ff ff62 	bl	800d6bc <__sfmoreglue>
 800d7f8:	4604      	mov	r4, r0
 800d7fa:	6030      	str	r0, [r6, #0]
 800d7fc:	2800      	cmp	r0, #0
 800d7fe:	d1d5      	bne.n	800d7ac <__sfp+0x24>
 800d800:	f7ff ff78 	bl	800d6f4 <__sfp_lock_release>
 800d804:	230c      	movs	r3, #12
 800d806:	603b      	str	r3, [r7, #0]
 800d808:	e7ee      	b.n	800d7e8 <__sfp+0x60>
 800d80a:	bf00      	nop
 800d80c:	0800db80 	.word	0x0800db80
 800d810:	ffff0001 	.word	0xffff0001

0800d814 <_fwalk_reent>:
 800d814:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d818:	4606      	mov	r6, r0
 800d81a:	4688      	mov	r8, r1
 800d81c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800d820:	2700      	movs	r7, #0
 800d822:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800d826:	f1b9 0901 	subs.w	r9, r9, #1
 800d82a:	d505      	bpl.n	800d838 <_fwalk_reent+0x24>
 800d82c:	6824      	ldr	r4, [r4, #0]
 800d82e:	2c00      	cmp	r4, #0
 800d830:	d1f7      	bne.n	800d822 <_fwalk_reent+0xe>
 800d832:	4638      	mov	r0, r7
 800d834:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d838:	89ab      	ldrh	r3, [r5, #12]
 800d83a:	2b01      	cmp	r3, #1
 800d83c:	d907      	bls.n	800d84e <_fwalk_reent+0x3a>
 800d83e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800d842:	3301      	adds	r3, #1
 800d844:	d003      	beq.n	800d84e <_fwalk_reent+0x3a>
 800d846:	4629      	mov	r1, r5
 800d848:	4630      	mov	r0, r6
 800d84a:	47c0      	blx	r8
 800d84c:	4307      	orrs	r7, r0
 800d84e:	3568      	adds	r5, #104	; 0x68
 800d850:	e7e9      	b.n	800d826 <_fwalk_reent+0x12>

0800d852 <__retarget_lock_init_recursive>:
 800d852:	4770      	bx	lr

0800d854 <__retarget_lock_acquire_recursive>:
 800d854:	4770      	bx	lr

0800d856 <__retarget_lock_release_recursive>:
 800d856:	4770      	bx	lr

0800d858 <__swhatbuf_r>:
 800d858:	b570      	push	{r4, r5, r6, lr}
 800d85a:	460e      	mov	r6, r1
 800d85c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d860:	2900      	cmp	r1, #0
 800d862:	b096      	sub	sp, #88	; 0x58
 800d864:	4614      	mov	r4, r2
 800d866:	461d      	mov	r5, r3
 800d868:	da08      	bge.n	800d87c <__swhatbuf_r+0x24>
 800d86a:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800d86e:	2200      	movs	r2, #0
 800d870:	602a      	str	r2, [r5, #0]
 800d872:	061a      	lsls	r2, r3, #24
 800d874:	d410      	bmi.n	800d898 <__swhatbuf_r+0x40>
 800d876:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d87a:	e00e      	b.n	800d89a <__swhatbuf_r+0x42>
 800d87c:	466a      	mov	r2, sp
 800d87e:	f000 f907 	bl	800da90 <_fstat_r>
 800d882:	2800      	cmp	r0, #0
 800d884:	dbf1      	blt.n	800d86a <__swhatbuf_r+0x12>
 800d886:	9a01      	ldr	r2, [sp, #4]
 800d888:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800d88c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800d890:	425a      	negs	r2, r3
 800d892:	415a      	adcs	r2, r3
 800d894:	602a      	str	r2, [r5, #0]
 800d896:	e7ee      	b.n	800d876 <__swhatbuf_r+0x1e>
 800d898:	2340      	movs	r3, #64	; 0x40
 800d89a:	2000      	movs	r0, #0
 800d89c:	6023      	str	r3, [r4, #0]
 800d89e:	b016      	add	sp, #88	; 0x58
 800d8a0:	bd70      	pop	{r4, r5, r6, pc}
	...

0800d8a4 <__smakebuf_r>:
 800d8a4:	898b      	ldrh	r3, [r1, #12]
 800d8a6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800d8a8:	079d      	lsls	r5, r3, #30
 800d8aa:	4606      	mov	r6, r0
 800d8ac:	460c      	mov	r4, r1
 800d8ae:	d507      	bpl.n	800d8c0 <__smakebuf_r+0x1c>
 800d8b0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800d8b4:	6023      	str	r3, [r4, #0]
 800d8b6:	6123      	str	r3, [r4, #16]
 800d8b8:	2301      	movs	r3, #1
 800d8ba:	6163      	str	r3, [r4, #20]
 800d8bc:	b002      	add	sp, #8
 800d8be:	bd70      	pop	{r4, r5, r6, pc}
 800d8c0:	ab01      	add	r3, sp, #4
 800d8c2:	466a      	mov	r2, sp
 800d8c4:	f7ff ffc8 	bl	800d858 <__swhatbuf_r>
 800d8c8:	9900      	ldr	r1, [sp, #0]
 800d8ca:	4605      	mov	r5, r0
 800d8cc:	4630      	mov	r0, r6
 800d8ce:	f7ff f9cf 	bl	800cc70 <_malloc_r>
 800d8d2:	b948      	cbnz	r0, 800d8e8 <__smakebuf_r+0x44>
 800d8d4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d8d8:	059a      	lsls	r2, r3, #22
 800d8da:	d4ef      	bmi.n	800d8bc <__smakebuf_r+0x18>
 800d8dc:	f023 0303 	bic.w	r3, r3, #3
 800d8e0:	f043 0302 	orr.w	r3, r3, #2
 800d8e4:	81a3      	strh	r3, [r4, #12]
 800d8e6:	e7e3      	b.n	800d8b0 <__smakebuf_r+0xc>
 800d8e8:	4b0d      	ldr	r3, [pc, #52]	; (800d920 <__smakebuf_r+0x7c>)
 800d8ea:	62b3      	str	r3, [r6, #40]	; 0x28
 800d8ec:	89a3      	ldrh	r3, [r4, #12]
 800d8ee:	6020      	str	r0, [r4, #0]
 800d8f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d8f4:	81a3      	strh	r3, [r4, #12]
 800d8f6:	9b00      	ldr	r3, [sp, #0]
 800d8f8:	6163      	str	r3, [r4, #20]
 800d8fa:	9b01      	ldr	r3, [sp, #4]
 800d8fc:	6120      	str	r0, [r4, #16]
 800d8fe:	b15b      	cbz	r3, 800d918 <__smakebuf_r+0x74>
 800d900:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d904:	4630      	mov	r0, r6
 800d906:	f000 f8d5 	bl	800dab4 <_isatty_r>
 800d90a:	b128      	cbz	r0, 800d918 <__smakebuf_r+0x74>
 800d90c:	89a3      	ldrh	r3, [r4, #12]
 800d90e:	f023 0303 	bic.w	r3, r3, #3
 800d912:	f043 0301 	orr.w	r3, r3, #1
 800d916:	81a3      	strh	r3, [r4, #12]
 800d918:	89a0      	ldrh	r0, [r4, #12]
 800d91a:	4305      	orrs	r5, r0
 800d91c:	81a5      	strh	r5, [r4, #12]
 800d91e:	e7cd      	b.n	800d8bc <__smakebuf_r+0x18>
 800d920:	0800d6b1 	.word	0x0800d6b1

0800d924 <__malloc_lock>:
 800d924:	4801      	ldr	r0, [pc, #4]	; (800d92c <__malloc_lock+0x8>)
 800d926:	f7ff bf95 	b.w	800d854 <__retarget_lock_acquire_recursive>
 800d92a:	bf00      	nop
 800d92c:	200007e8 	.word	0x200007e8

0800d930 <__malloc_unlock>:
 800d930:	4801      	ldr	r0, [pc, #4]	; (800d938 <__malloc_unlock+0x8>)
 800d932:	f7ff bf90 	b.w	800d856 <__retarget_lock_release_recursive>
 800d936:	bf00      	nop
 800d938:	200007e8 	.word	0x200007e8

0800d93c <_raise_r>:
 800d93c:	291f      	cmp	r1, #31
 800d93e:	b538      	push	{r3, r4, r5, lr}
 800d940:	4604      	mov	r4, r0
 800d942:	460d      	mov	r5, r1
 800d944:	d904      	bls.n	800d950 <_raise_r+0x14>
 800d946:	2316      	movs	r3, #22
 800d948:	6003      	str	r3, [r0, #0]
 800d94a:	f04f 30ff 	mov.w	r0, #4294967295
 800d94e:	bd38      	pop	{r3, r4, r5, pc}
 800d950:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800d952:	b112      	cbz	r2, 800d95a <_raise_r+0x1e>
 800d954:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800d958:	b94b      	cbnz	r3, 800d96e <_raise_r+0x32>
 800d95a:	4620      	mov	r0, r4
 800d95c:	f000 f830 	bl	800d9c0 <_getpid_r>
 800d960:	462a      	mov	r2, r5
 800d962:	4601      	mov	r1, r0
 800d964:	4620      	mov	r0, r4
 800d966:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d96a:	f000 b817 	b.w	800d99c <_kill_r>
 800d96e:	2b01      	cmp	r3, #1
 800d970:	d00a      	beq.n	800d988 <_raise_r+0x4c>
 800d972:	1c59      	adds	r1, r3, #1
 800d974:	d103      	bne.n	800d97e <_raise_r+0x42>
 800d976:	2316      	movs	r3, #22
 800d978:	6003      	str	r3, [r0, #0]
 800d97a:	2001      	movs	r0, #1
 800d97c:	e7e7      	b.n	800d94e <_raise_r+0x12>
 800d97e:	2400      	movs	r4, #0
 800d980:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800d984:	4628      	mov	r0, r5
 800d986:	4798      	blx	r3
 800d988:	2000      	movs	r0, #0
 800d98a:	e7e0      	b.n	800d94e <_raise_r+0x12>

0800d98c <raise>:
 800d98c:	4b02      	ldr	r3, [pc, #8]	; (800d998 <raise+0xc>)
 800d98e:	4601      	mov	r1, r0
 800d990:	6818      	ldr	r0, [r3, #0]
 800d992:	f7ff bfd3 	b.w	800d93c <_raise_r>
 800d996:	bf00      	nop
 800d998:	200000f8 	.word	0x200000f8

0800d99c <_kill_r>:
 800d99c:	b538      	push	{r3, r4, r5, lr}
 800d99e:	4d07      	ldr	r5, [pc, #28]	; (800d9bc <_kill_r+0x20>)
 800d9a0:	2300      	movs	r3, #0
 800d9a2:	4604      	mov	r4, r0
 800d9a4:	4608      	mov	r0, r1
 800d9a6:	4611      	mov	r1, r2
 800d9a8:	602b      	str	r3, [r5, #0]
 800d9aa:	f7f5 fc9f 	bl	80032ec <_kill>
 800d9ae:	1c43      	adds	r3, r0, #1
 800d9b0:	d102      	bne.n	800d9b8 <_kill_r+0x1c>
 800d9b2:	682b      	ldr	r3, [r5, #0]
 800d9b4:	b103      	cbz	r3, 800d9b8 <_kill_r+0x1c>
 800d9b6:	6023      	str	r3, [r4, #0]
 800d9b8:	bd38      	pop	{r3, r4, r5, pc}
 800d9ba:	bf00      	nop
 800d9bc:	200007ec 	.word	0x200007ec

0800d9c0 <_getpid_r>:
 800d9c0:	f7f5 bc8c 	b.w	80032dc <_getpid>

0800d9c4 <__sread>:
 800d9c4:	b510      	push	{r4, lr}
 800d9c6:	460c      	mov	r4, r1
 800d9c8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d9cc:	f000 f894 	bl	800daf8 <_read_r>
 800d9d0:	2800      	cmp	r0, #0
 800d9d2:	bfab      	itete	ge
 800d9d4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800d9d6:	89a3      	ldrhlt	r3, [r4, #12]
 800d9d8:	181b      	addge	r3, r3, r0
 800d9da:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800d9de:	bfac      	ite	ge
 800d9e0:	6563      	strge	r3, [r4, #84]	; 0x54
 800d9e2:	81a3      	strhlt	r3, [r4, #12]
 800d9e4:	bd10      	pop	{r4, pc}

0800d9e6 <__swrite>:
 800d9e6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d9ea:	461f      	mov	r7, r3
 800d9ec:	898b      	ldrh	r3, [r1, #12]
 800d9ee:	05db      	lsls	r3, r3, #23
 800d9f0:	4605      	mov	r5, r0
 800d9f2:	460c      	mov	r4, r1
 800d9f4:	4616      	mov	r6, r2
 800d9f6:	d505      	bpl.n	800da04 <__swrite+0x1e>
 800d9f8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d9fc:	2302      	movs	r3, #2
 800d9fe:	2200      	movs	r2, #0
 800da00:	f000 f868 	bl	800dad4 <_lseek_r>
 800da04:	89a3      	ldrh	r3, [r4, #12]
 800da06:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800da0a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800da0e:	81a3      	strh	r3, [r4, #12]
 800da10:	4632      	mov	r2, r6
 800da12:	463b      	mov	r3, r7
 800da14:	4628      	mov	r0, r5
 800da16:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800da1a:	f000 b817 	b.w	800da4c <_write_r>

0800da1e <__sseek>:
 800da1e:	b510      	push	{r4, lr}
 800da20:	460c      	mov	r4, r1
 800da22:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800da26:	f000 f855 	bl	800dad4 <_lseek_r>
 800da2a:	1c43      	adds	r3, r0, #1
 800da2c:	89a3      	ldrh	r3, [r4, #12]
 800da2e:	bf15      	itete	ne
 800da30:	6560      	strne	r0, [r4, #84]	; 0x54
 800da32:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800da36:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800da3a:	81a3      	strheq	r3, [r4, #12]
 800da3c:	bf18      	it	ne
 800da3e:	81a3      	strhne	r3, [r4, #12]
 800da40:	bd10      	pop	{r4, pc}

0800da42 <__sclose>:
 800da42:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800da46:	f000 b813 	b.w	800da70 <_close_r>
	...

0800da4c <_write_r>:
 800da4c:	b538      	push	{r3, r4, r5, lr}
 800da4e:	4d07      	ldr	r5, [pc, #28]	; (800da6c <_write_r+0x20>)
 800da50:	4604      	mov	r4, r0
 800da52:	4608      	mov	r0, r1
 800da54:	4611      	mov	r1, r2
 800da56:	2200      	movs	r2, #0
 800da58:	602a      	str	r2, [r5, #0]
 800da5a:	461a      	mov	r2, r3
 800da5c:	f7f5 fc7d 	bl	800335a <_write>
 800da60:	1c43      	adds	r3, r0, #1
 800da62:	d102      	bne.n	800da6a <_write_r+0x1e>
 800da64:	682b      	ldr	r3, [r5, #0]
 800da66:	b103      	cbz	r3, 800da6a <_write_r+0x1e>
 800da68:	6023      	str	r3, [r4, #0]
 800da6a:	bd38      	pop	{r3, r4, r5, pc}
 800da6c:	200007ec 	.word	0x200007ec

0800da70 <_close_r>:
 800da70:	b538      	push	{r3, r4, r5, lr}
 800da72:	4d06      	ldr	r5, [pc, #24]	; (800da8c <_close_r+0x1c>)
 800da74:	2300      	movs	r3, #0
 800da76:	4604      	mov	r4, r0
 800da78:	4608      	mov	r0, r1
 800da7a:	602b      	str	r3, [r5, #0]
 800da7c:	f7f5 fc89 	bl	8003392 <_close>
 800da80:	1c43      	adds	r3, r0, #1
 800da82:	d102      	bne.n	800da8a <_close_r+0x1a>
 800da84:	682b      	ldr	r3, [r5, #0]
 800da86:	b103      	cbz	r3, 800da8a <_close_r+0x1a>
 800da88:	6023      	str	r3, [r4, #0]
 800da8a:	bd38      	pop	{r3, r4, r5, pc}
 800da8c:	200007ec 	.word	0x200007ec

0800da90 <_fstat_r>:
 800da90:	b538      	push	{r3, r4, r5, lr}
 800da92:	4d07      	ldr	r5, [pc, #28]	; (800dab0 <_fstat_r+0x20>)
 800da94:	2300      	movs	r3, #0
 800da96:	4604      	mov	r4, r0
 800da98:	4608      	mov	r0, r1
 800da9a:	4611      	mov	r1, r2
 800da9c:	602b      	str	r3, [r5, #0]
 800da9e:	f7f5 fc84 	bl	80033aa <_fstat>
 800daa2:	1c43      	adds	r3, r0, #1
 800daa4:	d102      	bne.n	800daac <_fstat_r+0x1c>
 800daa6:	682b      	ldr	r3, [r5, #0]
 800daa8:	b103      	cbz	r3, 800daac <_fstat_r+0x1c>
 800daaa:	6023      	str	r3, [r4, #0]
 800daac:	bd38      	pop	{r3, r4, r5, pc}
 800daae:	bf00      	nop
 800dab0:	200007ec 	.word	0x200007ec

0800dab4 <_isatty_r>:
 800dab4:	b538      	push	{r3, r4, r5, lr}
 800dab6:	4d06      	ldr	r5, [pc, #24]	; (800dad0 <_isatty_r+0x1c>)
 800dab8:	2300      	movs	r3, #0
 800daba:	4604      	mov	r4, r0
 800dabc:	4608      	mov	r0, r1
 800dabe:	602b      	str	r3, [r5, #0]
 800dac0:	f7f5 fc83 	bl	80033ca <_isatty>
 800dac4:	1c43      	adds	r3, r0, #1
 800dac6:	d102      	bne.n	800dace <_isatty_r+0x1a>
 800dac8:	682b      	ldr	r3, [r5, #0]
 800daca:	b103      	cbz	r3, 800dace <_isatty_r+0x1a>
 800dacc:	6023      	str	r3, [r4, #0]
 800dace:	bd38      	pop	{r3, r4, r5, pc}
 800dad0:	200007ec 	.word	0x200007ec

0800dad4 <_lseek_r>:
 800dad4:	b538      	push	{r3, r4, r5, lr}
 800dad6:	4d07      	ldr	r5, [pc, #28]	; (800daf4 <_lseek_r+0x20>)
 800dad8:	4604      	mov	r4, r0
 800dada:	4608      	mov	r0, r1
 800dadc:	4611      	mov	r1, r2
 800dade:	2200      	movs	r2, #0
 800dae0:	602a      	str	r2, [r5, #0]
 800dae2:	461a      	mov	r2, r3
 800dae4:	f7f5 fc7c 	bl	80033e0 <_lseek>
 800dae8:	1c43      	adds	r3, r0, #1
 800daea:	d102      	bne.n	800daf2 <_lseek_r+0x1e>
 800daec:	682b      	ldr	r3, [r5, #0]
 800daee:	b103      	cbz	r3, 800daf2 <_lseek_r+0x1e>
 800daf0:	6023      	str	r3, [r4, #0]
 800daf2:	bd38      	pop	{r3, r4, r5, pc}
 800daf4:	200007ec 	.word	0x200007ec

0800daf8 <_read_r>:
 800daf8:	b538      	push	{r3, r4, r5, lr}
 800dafa:	4d07      	ldr	r5, [pc, #28]	; (800db18 <_read_r+0x20>)
 800dafc:	4604      	mov	r4, r0
 800dafe:	4608      	mov	r0, r1
 800db00:	4611      	mov	r1, r2
 800db02:	2200      	movs	r2, #0
 800db04:	602a      	str	r2, [r5, #0]
 800db06:	461a      	mov	r2, r3
 800db08:	f7f5 fc0a 	bl	8003320 <_read>
 800db0c:	1c43      	adds	r3, r0, #1
 800db0e:	d102      	bne.n	800db16 <_read_r+0x1e>
 800db10:	682b      	ldr	r3, [r5, #0]
 800db12:	b103      	cbz	r3, 800db16 <_read_r+0x1e>
 800db14:	6023      	str	r3, [r4, #0]
 800db16:	bd38      	pop	{r3, r4, r5, pc}
 800db18:	200007ec 	.word	0x200007ec

0800db1c <_init>:
 800db1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800db1e:	bf00      	nop
 800db20:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800db22:	bc08      	pop	{r3}
 800db24:	469e      	mov	lr, r3
 800db26:	4770      	bx	lr

0800db28 <_fini>:
 800db28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800db2a:	bf00      	nop
 800db2c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800db2e:	bc08      	pop	{r3}
 800db30:	469e      	mov	lr, r3
 800db32:	4770      	bx	lr
