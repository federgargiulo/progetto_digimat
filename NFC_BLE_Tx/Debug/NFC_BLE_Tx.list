
NFC_BLE_Tx.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006378  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002d4  08006518  08006518  00016518  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080067ec  080067ec  00020088  2**0
                  CONTENTS
  4 .ARM          00000008  080067ec  080067ec  000167ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080067f4  080067f4  00020088  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080067f4  080067f4  000167f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080067f8  080067f8  000167f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000088  20000000  080067fc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004e8  20000088  08006884  00020088  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000570  08006884  00020570  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020088  2**0
                  CONTENTS, READONLY
 12 .debug_info   00014dff  00000000  00000000  000200b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003156  00000000  00000000  00034eb7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001080  00000000  00000000  00038010  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000f48  00000000  00000000  00039090  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001afab  00000000  00000000  00039fd8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00015499  00000000  00000000  00054f83  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009278d  00000000  00000000  0006a41c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000fcba9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004b00  00000000  00000000  000fcbfc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000088 	.word	0x20000088
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08006500 	.word	0x08006500

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000008c 	.word	0x2000008c
 80001dc:	08006500 	.word	0x08006500

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b974 	b.w	8000580 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468e      	mov	lr, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d14d      	bne.n	800035a <__udivmoddi4+0xaa>
 80002be:	428a      	cmp	r2, r1
 80002c0:	4694      	mov	ip, r2
 80002c2:	d969      	bls.n	8000398 <__udivmoddi4+0xe8>
 80002c4:	fab2 f282 	clz	r2, r2
 80002c8:	b152      	cbz	r2, 80002e0 <__udivmoddi4+0x30>
 80002ca:	fa01 f302 	lsl.w	r3, r1, r2
 80002ce:	f1c2 0120 	rsb	r1, r2, #32
 80002d2:	fa20 f101 	lsr.w	r1, r0, r1
 80002d6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002da:	ea41 0e03 	orr.w	lr, r1, r3
 80002de:	4094      	lsls	r4, r2
 80002e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e4:	0c21      	lsrs	r1, r4, #16
 80002e6:	fbbe f6f8 	udiv	r6, lr, r8
 80002ea:	fa1f f78c 	uxth.w	r7, ip
 80002ee:	fb08 e316 	mls	r3, r8, r6, lr
 80002f2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002f6:	fb06 f107 	mul.w	r1, r6, r7
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f106 30ff 	add.w	r0, r6, #4294967295
 8000306:	f080 811f 	bcs.w	8000548 <__udivmoddi4+0x298>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 811c 	bls.w	8000548 <__udivmoddi4+0x298>
 8000310:	3e02      	subs	r6, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a5b      	subs	r3, r3, r1
 8000316:	b2a4      	uxth	r4, r4
 8000318:	fbb3 f0f8 	udiv	r0, r3, r8
 800031c:	fb08 3310 	mls	r3, r8, r0, r3
 8000320:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000324:	fb00 f707 	mul.w	r7, r0, r7
 8000328:	42a7      	cmp	r7, r4
 800032a:	d90a      	bls.n	8000342 <__udivmoddi4+0x92>
 800032c:	eb1c 0404 	adds.w	r4, ip, r4
 8000330:	f100 33ff 	add.w	r3, r0, #4294967295
 8000334:	f080 810a 	bcs.w	800054c <__udivmoddi4+0x29c>
 8000338:	42a7      	cmp	r7, r4
 800033a:	f240 8107 	bls.w	800054c <__udivmoddi4+0x29c>
 800033e:	4464      	add	r4, ip
 8000340:	3802      	subs	r0, #2
 8000342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000346:	1be4      	subs	r4, r4, r7
 8000348:	2600      	movs	r6, #0
 800034a:	b11d      	cbz	r5, 8000354 <__udivmoddi4+0xa4>
 800034c:	40d4      	lsrs	r4, r2
 800034e:	2300      	movs	r3, #0
 8000350:	e9c5 4300 	strd	r4, r3, [r5]
 8000354:	4631      	mov	r1, r6
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d909      	bls.n	8000372 <__udivmoddi4+0xc2>
 800035e:	2d00      	cmp	r5, #0
 8000360:	f000 80ef 	beq.w	8000542 <__udivmoddi4+0x292>
 8000364:	2600      	movs	r6, #0
 8000366:	e9c5 0100 	strd	r0, r1, [r5]
 800036a:	4630      	mov	r0, r6
 800036c:	4631      	mov	r1, r6
 800036e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000372:	fab3 f683 	clz	r6, r3
 8000376:	2e00      	cmp	r6, #0
 8000378:	d14a      	bne.n	8000410 <__udivmoddi4+0x160>
 800037a:	428b      	cmp	r3, r1
 800037c:	d302      	bcc.n	8000384 <__udivmoddi4+0xd4>
 800037e:	4282      	cmp	r2, r0
 8000380:	f200 80f9 	bhi.w	8000576 <__udivmoddi4+0x2c6>
 8000384:	1a84      	subs	r4, r0, r2
 8000386:	eb61 0303 	sbc.w	r3, r1, r3
 800038a:	2001      	movs	r0, #1
 800038c:	469e      	mov	lr, r3
 800038e:	2d00      	cmp	r5, #0
 8000390:	d0e0      	beq.n	8000354 <__udivmoddi4+0xa4>
 8000392:	e9c5 4e00 	strd	r4, lr, [r5]
 8000396:	e7dd      	b.n	8000354 <__udivmoddi4+0xa4>
 8000398:	b902      	cbnz	r2, 800039c <__udivmoddi4+0xec>
 800039a:	deff      	udf	#255	; 0xff
 800039c:	fab2 f282 	clz	r2, r2
 80003a0:	2a00      	cmp	r2, #0
 80003a2:	f040 8092 	bne.w	80004ca <__udivmoddi4+0x21a>
 80003a6:	eba1 010c 	sub.w	r1, r1, ip
 80003aa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ae:	fa1f fe8c 	uxth.w	lr, ip
 80003b2:	2601      	movs	r6, #1
 80003b4:	0c20      	lsrs	r0, r4, #16
 80003b6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ba:	fb07 1113 	mls	r1, r7, r3, r1
 80003be:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c2:	fb0e f003 	mul.w	r0, lr, r3
 80003c6:	4288      	cmp	r0, r1
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x12c>
 80003ca:	eb1c 0101 	adds.w	r1, ip, r1
 80003ce:	f103 38ff 	add.w	r8, r3, #4294967295
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x12a>
 80003d4:	4288      	cmp	r0, r1
 80003d6:	f200 80cb 	bhi.w	8000570 <__udivmoddi4+0x2c0>
 80003da:	4643      	mov	r3, r8
 80003dc:	1a09      	subs	r1, r1, r0
 80003de:	b2a4      	uxth	r4, r4
 80003e0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003e4:	fb07 1110 	mls	r1, r7, r0, r1
 80003e8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003ec:	fb0e fe00 	mul.w	lr, lr, r0
 80003f0:	45a6      	cmp	lr, r4
 80003f2:	d908      	bls.n	8000406 <__udivmoddi4+0x156>
 80003f4:	eb1c 0404 	adds.w	r4, ip, r4
 80003f8:	f100 31ff 	add.w	r1, r0, #4294967295
 80003fc:	d202      	bcs.n	8000404 <__udivmoddi4+0x154>
 80003fe:	45a6      	cmp	lr, r4
 8000400:	f200 80bb 	bhi.w	800057a <__udivmoddi4+0x2ca>
 8000404:	4608      	mov	r0, r1
 8000406:	eba4 040e 	sub.w	r4, r4, lr
 800040a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800040e:	e79c      	b.n	800034a <__udivmoddi4+0x9a>
 8000410:	f1c6 0720 	rsb	r7, r6, #32
 8000414:	40b3      	lsls	r3, r6
 8000416:	fa22 fc07 	lsr.w	ip, r2, r7
 800041a:	ea4c 0c03 	orr.w	ip, ip, r3
 800041e:	fa20 f407 	lsr.w	r4, r0, r7
 8000422:	fa01 f306 	lsl.w	r3, r1, r6
 8000426:	431c      	orrs	r4, r3
 8000428:	40f9      	lsrs	r1, r7
 800042a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800042e:	fa00 f306 	lsl.w	r3, r0, r6
 8000432:	fbb1 f8f9 	udiv	r8, r1, r9
 8000436:	0c20      	lsrs	r0, r4, #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fb09 1118 	mls	r1, r9, r8, r1
 8000440:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000444:	fb08 f00e 	mul.w	r0, r8, lr
 8000448:	4288      	cmp	r0, r1
 800044a:	fa02 f206 	lsl.w	r2, r2, r6
 800044e:	d90b      	bls.n	8000468 <__udivmoddi4+0x1b8>
 8000450:	eb1c 0101 	adds.w	r1, ip, r1
 8000454:	f108 3aff 	add.w	sl, r8, #4294967295
 8000458:	f080 8088 	bcs.w	800056c <__udivmoddi4+0x2bc>
 800045c:	4288      	cmp	r0, r1
 800045e:	f240 8085 	bls.w	800056c <__udivmoddi4+0x2bc>
 8000462:	f1a8 0802 	sub.w	r8, r8, #2
 8000466:	4461      	add	r1, ip
 8000468:	1a09      	subs	r1, r1, r0
 800046a:	b2a4      	uxth	r4, r4
 800046c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000470:	fb09 1110 	mls	r1, r9, r0, r1
 8000474:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000478:	fb00 fe0e 	mul.w	lr, r0, lr
 800047c:	458e      	cmp	lr, r1
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x1e2>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f100 34ff 	add.w	r4, r0, #4294967295
 8000488:	d26c      	bcs.n	8000564 <__udivmoddi4+0x2b4>
 800048a:	458e      	cmp	lr, r1
 800048c:	d96a      	bls.n	8000564 <__udivmoddi4+0x2b4>
 800048e:	3802      	subs	r0, #2
 8000490:	4461      	add	r1, ip
 8000492:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000496:	fba0 9402 	umull	r9, r4, r0, r2
 800049a:	eba1 010e 	sub.w	r1, r1, lr
 800049e:	42a1      	cmp	r1, r4
 80004a0:	46c8      	mov	r8, r9
 80004a2:	46a6      	mov	lr, r4
 80004a4:	d356      	bcc.n	8000554 <__udivmoddi4+0x2a4>
 80004a6:	d053      	beq.n	8000550 <__udivmoddi4+0x2a0>
 80004a8:	b15d      	cbz	r5, 80004c2 <__udivmoddi4+0x212>
 80004aa:	ebb3 0208 	subs.w	r2, r3, r8
 80004ae:	eb61 010e 	sbc.w	r1, r1, lr
 80004b2:	fa01 f707 	lsl.w	r7, r1, r7
 80004b6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ba:	40f1      	lsrs	r1, r6
 80004bc:	431f      	orrs	r7, r3
 80004be:	e9c5 7100 	strd	r7, r1, [r5]
 80004c2:	2600      	movs	r6, #0
 80004c4:	4631      	mov	r1, r6
 80004c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ca:	f1c2 0320 	rsb	r3, r2, #32
 80004ce:	40d8      	lsrs	r0, r3
 80004d0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d4:	fa21 f303 	lsr.w	r3, r1, r3
 80004d8:	4091      	lsls	r1, r2
 80004da:	4301      	orrs	r1, r0
 80004dc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004e0:	fa1f fe8c 	uxth.w	lr, ip
 80004e4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004e8:	fb07 3610 	mls	r6, r7, r0, r3
 80004ec:	0c0b      	lsrs	r3, r1, #16
 80004ee:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004f2:	fb00 f60e 	mul.w	r6, r0, lr
 80004f6:	429e      	cmp	r6, r3
 80004f8:	fa04 f402 	lsl.w	r4, r4, r2
 80004fc:	d908      	bls.n	8000510 <__udivmoddi4+0x260>
 80004fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000502:	f100 38ff 	add.w	r8, r0, #4294967295
 8000506:	d22f      	bcs.n	8000568 <__udivmoddi4+0x2b8>
 8000508:	429e      	cmp	r6, r3
 800050a:	d92d      	bls.n	8000568 <__udivmoddi4+0x2b8>
 800050c:	3802      	subs	r0, #2
 800050e:	4463      	add	r3, ip
 8000510:	1b9b      	subs	r3, r3, r6
 8000512:	b289      	uxth	r1, r1
 8000514:	fbb3 f6f7 	udiv	r6, r3, r7
 8000518:	fb07 3316 	mls	r3, r7, r6, r3
 800051c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000520:	fb06 f30e 	mul.w	r3, r6, lr
 8000524:	428b      	cmp	r3, r1
 8000526:	d908      	bls.n	800053a <__udivmoddi4+0x28a>
 8000528:	eb1c 0101 	adds.w	r1, ip, r1
 800052c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000530:	d216      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000532:	428b      	cmp	r3, r1
 8000534:	d914      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000536:	3e02      	subs	r6, #2
 8000538:	4461      	add	r1, ip
 800053a:	1ac9      	subs	r1, r1, r3
 800053c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000540:	e738      	b.n	80003b4 <__udivmoddi4+0x104>
 8000542:	462e      	mov	r6, r5
 8000544:	4628      	mov	r0, r5
 8000546:	e705      	b.n	8000354 <__udivmoddi4+0xa4>
 8000548:	4606      	mov	r6, r0
 800054a:	e6e3      	b.n	8000314 <__udivmoddi4+0x64>
 800054c:	4618      	mov	r0, r3
 800054e:	e6f8      	b.n	8000342 <__udivmoddi4+0x92>
 8000550:	454b      	cmp	r3, r9
 8000552:	d2a9      	bcs.n	80004a8 <__udivmoddi4+0x1f8>
 8000554:	ebb9 0802 	subs.w	r8, r9, r2
 8000558:	eb64 0e0c 	sbc.w	lr, r4, ip
 800055c:	3801      	subs	r0, #1
 800055e:	e7a3      	b.n	80004a8 <__udivmoddi4+0x1f8>
 8000560:	4646      	mov	r6, r8
 8000562:	e7ea      	b.n	800053a <__udivmoddi4+0x28a>
 8000564:	4620      	mov	r0, r4
 8000566:	e794      	b.n	8000492 <__udivmoddi4+0x1e2>
 8000568:	4640      	mov	r0, r8
 800056a:	e7d1      	b.n	8000510 <__udivmoddi4+0x260>
 800056c:	46d0      	mov	r8, sl
 800056e:	e77b      	b.n	8000468 <__udivmoddi4+0x1b8>
 8000570:	3b02      	subs	r3, #2
 8000572:	4461      	add	r1, ip
 8000574:	e732      	b.n	80003dc <__udivmoddi4+0x12c>
 8000576:	4630      	mov	r0, r6
 8000578:	e709      	b.n	800038e <__udivmoddi4+0xde>
 800057a:	4464      	add	r4, ip
 800057c:	3802      	subs	r0, #2
 800057e:	e742      	b.n	8000406 <__udivmoddi4+0x156>

08000580 <__aeabi_idiv0>:
 8000580:	4770      	bx	lr
 8000582:	bf00      	nop

08000584 <MX_BlueNRG_MS_Init>:
  PRINT_CSV("%02ld:%02ld:%02ld.%03ld", (long)(ms/(60*60*1000)%24), (long)(ms/(60*1000)%60), (long)((ms/1000)%60), (long)(ms%1000));
}
#endif

void MX_BlueNRG_MS_Init(void)
{
 8000584:	b580      	push	{r7, lr}
 8000586:	b08e      	sub	sp, #56	; 0x38
 8000588:	af04      	add	r7, sp, #16
  /* USER CODE BEGIN BlueNRG_MS_Init_PreTreatment */

  /* USER CODE END BlueNRG_MS_Init_PreTreatment */

  /* Initialize the peripherals and the BLE Stack */
  uint8_t CLIENT_BDADDR[] = {0xbb, 0x00, 0x00, 0xE1, 0x80, 0x02};
 800058a:	4a73      	ldr	r2, [pc, #460]	; (8000758 <MX_BlueNRG_MS_Init+0x1d4>)
 800058c:	f107 031c 	add.w	r3, r7, #28
 8000590:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000594:	6018      	str	r0, [r3, #0]
 8000596:	3304      	adds	r3, #4
 8000598:	8019      	strh	r1, [r3, #0]
  uint8_t SERVER_BDADDR[] = {0xaa, 0x00, 0x00, 0xE1, 0x80, 0x02};
 800059a:	4a70      	ldr	r2, [pc, #448]	; (800075c <MX_BlueNRG_MS_Init+0x1d8>)
 800059c:	f107 0314 	add.w	r3, r7, #20
 80005a0:	e892 0003 	ldmia.w	r2, {r0, r1}
 80005a4:	6018      	str	r0, [r3, #0]
 80005a6:	3304      	adds	r3, #4
 80005a8:	8019      	strh	r1, [r3, #0]

  uint8_t  hwVersion;
  uint16_t fwVersion;
  int ret;

  User_Init();
 80005aa:	f000 f8fd 	bl	80007a8 <User_Init>

  /* Get the User Button initial state */
  user_button_init_state = BSP_PB_GetState(BUTTON_KEY);
 80005ae:	2000      	movs	r0, #0
 80005b0:	f001 faec 	bl	8001b8c <BSP_PB_GetState>
 80005b4:	4603      	mov	r3, r0
 80005b6:	b2da      	uxtb	r2, r3
 80005b8:	4b69      	ldr	r3, [pc, #420]	; (8000760 <MX_BlueNRG_MS_Init+0x1dc>)
 80005ba:	701a      	strb	r2, [r3, #0]

  hci_init(user_notify, NULL);
 80005bc:	2100      	movs	r1, #0
 80005be:	4869      	ldr	r0, [pc, #420]	; (8000764 <MX_BlueNRG_MS_Init+0x1e0>)
 80005c0:	f004 fbdc 	bl	8004d7c <hci_init>

  /* get the BlueNRG HW and FW versions */
  getBlueNRGVersion(&hwVersion, &fwVersion);
 80005c4:	1cba      	adds	r2, r7, #2
 80005c6:	1d7b      	adds	r3, r7, #5
 80005c8:	4611      	mov	r1, r2
 80005ca:	4618      	mov	r0, r3
 80005cc:	f004 fa4a 	bl	8004a64 <getBlueNRGVersion>
   * Reset BlueNRG again otherwise we won't
   * be able to change its MAC address.
   * aci_hal_write_config_data() must be the first
   * command after reset otherwise it will fail.
   */
  hci_reset();
 80005d0:	f004 fa8c 	bl	8004aec <hci_reset>

  HAL_Delay(100);
 80005d4:	2064      	movs	r0, #100	; 0x64
 80005d6:	f001 fc7d 	bl	8001ed4 <HAL_Delay>

  printf("HWver %d, FWver %d\n", hwVersion, fwVersion);
 80005da:	797b      	ldrb	r3, [r7, #5]
 80005dc:	4619      	mov	r1, r3
 80005de:	887b      	ldrh	r3, [r7, #2]
 80005e0:	461a      	mov	r2, r3
 80005e2:	4861      	ldr	r0, [pc, #388]	; (8000768 <MX_BlueNRG_MS_Init+0x1e4>)
 80005e4:	f005 f9c4 	bl	8005970 <iprintf>

  if (hwVersion > 0x30) { /* X-NUCLEO-IDB05A1 expansion board is used */
 80005e8:	797b      	ldrb	r3, [r7, #5]
 80005ea:	2b30      	cmp	r3, #48	; 0x30
 80005ec:	d902      	bls.n	80005f4 <MX_BlueNRG_MS_Init+0x70>
    bnrg_expansion_board = IDB05A1;
 80005ee:	4b5f      	ldr	r3, [pc, #380]	; (800076c <MX_BlueNRG_MS_Init+0x1e8>)
 80005f0:	2201      	movs	r2, #1
 80005f2:	701a      	strb	r2, [r3, #0]
  }

  if (BLE_Role == CLIENT) {
 80005f4:	4b5e      	ldr	r3, [pc, #376]	; (8000770 <MX_BlueNRG_MS_Init+0x1ec>)
 80005f6:	781b      	ldrb	r3, [r3, #0]
 80005f8:	2b00      	cmp	r3, #0
 80005fa:	d109      	bne.n	8000610 <MX_BlueNRG_MS_Init+0x8c>
    BLUENRG_memcpy(bdaddr, CLIENT_BDADDR, sizeof(CLIENT_BDADDR));
 80005fc:	f107 030c 	add.w	r3, r7, #12
 8000600:	f107 021c 	add.w	r2, r7, #28
 8000604:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000608:	6018      	str	r0, [r3, #0]
 800060a:	3304      	adds	r3, #4
 800060c:	8019      	strh	r1, [r3, #0]
 800060e:	e008      	b.n	8000622 <MX_BlueNRG_MS_Init+0x9e>
  } else {
    BLUENRG_memcpy(bdaddr, SERVER_BDADDR, sizeof(SERVER_BDADDR));
 8000610:	f107 030c 	add.w	r3, r7, #12
 8000614:	f107 0214 	add.w	r2, r7, #20
 8000618:	e892 0003 	ldmia.w	r2, {r0, r1}
 800061c:	6018      	str	r0, [r3, #0]
 800061e:	3304      	adds	r3, #4
 8000620:	8019      	strh	r1, [r3, #0]
  }

  ret = aci_hal_write_config_data(CONFIG_DATA_PUBADDR_OFFSET,
 8000622:	f107 030c 	add.w	r3, r7, #12
 8000626:	461a      	mov	r2, r3
 8000628:	2106      	movs	r1, #6
 800062a:	2000      	movs	r0, #0
 800062c:	f004 f984 	bl	8004938 <aci_hal_write_config_data>
 8000630:	4603      	mov	r3, r0
 8000632:	627b      	str	r3, [r7, #36]	; 0x24
                                  CONFIG_DATA_PUBADDR_LEN,
                                  bdaddr);
  if (ret) {
 8000634:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000636:	2b00      	cmp	r3, #0
 8000638:	d003      	beq.n	8000642 <MX_BlueNRG_MS_Init+0xbe>
    printf("Setting BD_ADDR failed 0x%02x.\n", ret);
 800063a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800063c:	484d      	ldr	r0, [pc, #308]	; (8000774 <MX_BlueNRG_MS_Init+0x1f0>)
 800063e:	f005 f997 	bl	8005970 <iprintf>
  }

  ret = aci_gatt_init();
 8000642:	f003 fe24 	bl	800428e <aci_gatt_init>
 8000646:	4603      	mov	r3, r0
 8000648:	627b      	str	r3, [r7, #36]	; 0x24
  if (ret) {
 800064a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800064c:	2b00      	cmp	r3, #0
 800064e:	d002      	beq.n	8000656 <MX_BlueNRG_MS_Init+0xd2>
    printf("GATT_Init failed.\n");
 8000650:	4849      	ldr	r0, [pc, #292]	; (8000778 <MX_BlueNRG_MS_Init+0x1f4>)
 8000652:	f005 fa29 	bl	8005aa8 <puts>
  }

  if (BLE_Role == SERVER) {
 8000656:	4b46      	ldr	r3, [pc, #280]	; (8000770 <MX_BlueNRG_MS_Init+0x1ec>)
 8000658:	781b      	ldrb	r3, [r3, #0]
 800065a:	2b01      	cmp	r3, #1
 800065c:	d11e      	bne.n	800069c <MX_BlueNRG_MS_Init+0x118>
    if (bnrg_expansion_board == IDB05A1) {
 800065e:	4b43      	ldr	r3, [pc, #268]	; (800076c <MX_BlueNRG_MS_Init+0x1e8>)
 8000660:	781b      	ldrb	r3, [r3, #0]
 8000662:	2b01      	cmp	r3, #1
 8000664:	d10f      	bne.n	8000686 <MX_BlueNRG_MS_Init+0x102>
      ret = aci_gap_init_IDB05A1(GAP_PERIPHERAL_ROLE_IDB05A1, 0, 0x07, &service_handle, &dev_name_char_handle, &appearance_char_handle);
 8000666:	f107 020a 	add.w	r2, r7, #10
 800066a:	1dbb      	adds	r3, r7, #6
 800066c:	9301      	str	r3, [sp, #4]
 800066e:	f107 0308 	add.w	r3, r7, #8
 8000672:	9300      	str	r3, [sp, #0]
 8000674:	4613      	mov	r3, r2
 8000676:	2207      	movs	r2, #7
 8000678:	2100      	movs	r1, #0
 800067a:	2001      	movs	r0, #1
 800067c:	f003 fbd8 	bl	8003e30 <aci_gap_init_IDB05A1>
 8000680:	4603      	mov	r3, r0
 8000682:	627b      	str	r3, [r7, #36]	; 0x24
 8000684:	e028      	b.n	80006d8 <MX_BlueNRG_MS_Init+0x154>
    }
    else {
      ret = aci_gap_init_IDB04A1(GAP_PERIPHERAL_ROLE_IDB04A1, &service_handle, &dev_name_char_handle, &appearance_char_handle);
 8000686:	1dbb      	adds	r3, r7, #6
 8000688:	f107 0208 	add.w	r2, r7, #8
 800068c:	f107 010a 	add.w	r1, r7, #10
 8000690:	2001      	movs	r0, #1
 8000692:	f003 fc1d 	bl	8003ed0 <aci_gap_init_IDB04A1>
 8000696:	4603      	mov	r3, r0
 8000698:	627b      	str	r3, [r7, #36]	; 0x24
 800069a:	e01d      	b.n	80006d8 <MX_BlueNRG_MS_Init+0x154>
    }
  }
  else {
    if (bnrg_expansion_board == IDB05A1) {
 800069c:	4b33      	ldr	r3, [pc, #204]	; (800076c <MX_BlueNRG_MS_Init+0x1e8>)
 800069e:	781b      	ldrb	r3, [r3, #0]
 80006a0:	2b01      	cmp	r3, #1
 80006a2:	d10f      	bne.n	80006c4 <MX_BlueNRG_MS_Init+0x140>
      ret = aci_gap_init_IDB05A1(GAP_CENTRAL_ROLE_IDB05A1, 0, 0x07, &service_handle, &dev_name_char_handle, &appearance_char_handle);
 80006a4:	f107 020a 	add.w	r2, r7, #10
 80006a8:	1dbb      	adds	r3, r7, #6
 80006aa:	9301      	str	r3, [sp, #4]
 80006ac:	f107 0308 	add.w	r3, r7, #8
 80006b0:	9300      	str	r3, [sp, #0]
 80006b2:	4613      	mov	r3, r2
 80006b4:	2207      	movs	r2, #7
 80006b6:	2100      	movs	r1, #0
 80006b8:	2004      	movs	r0, #4
 80006ba:	f003 fbb9 	bl	8003e30 <aci_gap_init_IDB05A1>
 80006be:	4603      	mov	r3, r0
 80006c0:	627b      	str	r3, [r7, #36]	; 0x24
 80006c2:	e009      	b.n	80006d8 <MX_BlueNRG_MS_Init+0x154>
    }
    else {
      ret = aci_gap_init_IDB04A1(GAP_CENTRAL_ROLE_IDB04A1, &service_handle, &dev_name_char_handle, &appearance_char_handle);
 80006c4:	1dbb      	adds	r3, r7, #6
 80006c6:	f107 0208 	add.w	r2, r7, #8
 80006ca:	f107 010a 	add.w	r1, r7, #10
 80006ce:	2003      	movs	r0, #3
 80006d0:	f003 fbfe 	bl	8003ed0 <aci_gap_init_IDB04A1>
 80006d4:	4603      	mov	r3, r0
 80006d6:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }

  if (ret != BLE_STATUS_SUCCESS) {
 80006d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80006da:	2b00      	cmp	r3, #0
 80006dc:	d002      	beq.n	80006e4 <MX_BlueNRG_MS_Init+0x160>
    printf("GAP_Init failed.\n");
 80006de:	4827      	ldr	r0, [pc, #156]	; (800077c <MX_BlueNRG_MS_Init+0x1f8>)
 80006e0:	f005 f9e2 	bl	8005aa8 <puts>
  }

  ret = aci_gap_set_auth_requirement(MITM_PROTECTION_REQUIRED,
 80006e4:	2301      	movs	r3, #1
 80006e6:	9303      	str	r3, [sp, #12]
 80006e8:	4b25      	ldr	r3, [pc, #148]	; (8000780 <MX_BlueNRG_MS_Init+0x1fc>)
 80006ea:	9302      	str	r3, [sp, #8]
 80006ec:	2300      	movs	r3, #0
 80006ee:	9301      	str	r3, [sp, #4]
 80006f0:	2310      	movs	r3, #16
 80006f2:	9300      	str	r3, [sp, #0]
 80006f4:	2307      	movs	r3, #7
 80006f6:	2200      	movs	r2, #0
 80006f8:	2100      	movs	r1, #0
 80006fa:	2001      	movs	r0, #1
 80006fc:	f003 fd1c 	bl	8004138 <aci_gap_set_auth_requirement>
 8000700:	4603      	mov	r3, r0
 8000702:	627b      	str	r3, [r7, #36]	; 0x24
                                     7,
                                     16,
                                     USE_FIXED_PIN_FOR_PAIRING,
                                     123456,
                                     BONDING);
  if (ret == BLE_STATUS_SUCCESS) {
 8000704:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000706:	2b00      	cmp	r3, #0
 8000708:	d102      	bne.n	8000710 <MX_BlueNRG_MS_Init+0x18c>
    printf("BLE Stack Initialized.\n");
 800070a:	481e      	ldr	r0, [pc, #120]	; (8000784 <MX_BlueNRG_MS_Init+0x200>)
 800070c:	f005 f9cc 	bl	8005aa8 <puts>
  }

  if (BLE_Role == SERVER) {
 8000710:	4b17      	ldr	r3, [pc, #92]	; (8000770 <MX_BlueNRG_MS_Init+0x1ec>)
 8000712:	781b      	ldrb	r3, [r3, #0]
 8000714:	2b01      	cmp	r3, #1
 8000716:	d111      	bne.n	800073c <MX_BlueNRG_MS_Init+0x1b8>
    printf("SERVER: BLE Stack Initialized\n");
 8000718:	481b      	ldr	r0, [pc, #108]	; (8000788 <MX_BlueNRG_MS_Init+0x204>)
 800071a:	f005 f9c5 	bl	8005aa8 <puts>
    ret = Add_Sample_Service();
 800071e:	f000 f8f1 	bl	8000904 <Add_Sample_Service>
 8000722:	4603      	mov	r3, r0
 8000724:	627b      	str	r3, [r7, #36]	; 0x24

    if (ret == BLE_STATUS_SUCCESS)
 8000726:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000728:	2b00      	cmp	r3, #0
 800072a:	d103      	bne.n	8000734 <MX_BlueNRG_MS_Init+0x1b0>
      printf("Service added successfully.\n");
 800072c:	4817      	ldr	r0, [pc, #92]	; (800078c <MX_BlueNRG_MS_Init+0x208>)
 800072e:	f005 f9bb 	bl	8005aa8 <puts>
 8000732:	e006      	b.n	8000742 <MX_BlueNRG_MS_Init+0x1be>
    else
      printf("Error while adding service.\n");
 8000734:	4816      	ldr	r0, [pc, #88]	; (8000790 <MX_BlueNRG_MS_Init+0x20c>)
 8000736:	f005 f9b7 	bl	8005aa8 <puts>
 800073a:	e002      	b.n	8000742 <MX_BlueNRG_MS_Init+0x1be>

  } else {
    printf("CLIENT: BLE Stack Initialized\n");
 800073c:	4815      	ldr	r0, [pc, #84]	; (8000794 <MX_BlueNRG_MS_Init+0x210>)
 800073e:	f005 f9b3 	bl	8005aa8 <puts>
  }

  /* Set output power level */
  ret = aci_hal_set_tx_power_level(1,4);
 8000742:	2104      	movs	r1, #4
 8000744:	2001      	movs	r0, #1
 8000746:	f004 f95c 	bl	8004a02 <aci_hal_set_tx_power_level>
 800074a:	4603      	mov	r3, r0
 800074c:	627b      	str	r3, [r7, #36]	; 0x24

  /* USER CODE BEGIN BlueNRG_MS_Init_PostTreatment */

  /* USER CODE END BlueNRG_MS_Init_PostTreatment */
}
 800074e:	bf00      	nop
 8000750:	3728      	adds	r7, #40	; 0x28
 8000752:	46bd      	mov	sp, r7
 8000754:	bd80      	pop	{r7, pc}
 8000756:	bf00      	nop
 8000758:	08006604 	.word	0x08006604
 800075c:	0800660c 	.word	0x0800660c
 8000760:	20000000 	.word	0x20000000
 8000764:	08000dad 	.word	0x08000dad
 8000768:	08006518 	.word	0x08006518
 800076c:	200000a4 	.word	0x200000a4
 8000770:	20000001 	.word	0x20000001
 8000774:	0800652c 	.word	0x0800652c
 8000778:	0800654c 	.word	0x0800654c
 800077c:	08006560 	.word	0x08006560
 8000780:	0001e240 	.word	0x0001e240
 8000784:	08006574 	.word	0x08006574
 8000788:	0800658c 	.word	0x0800658c
 800078c:	080065ac 	.word	0x080065ac
 8000790:	080065c8 	.word	0x080065c8
 8000794:	080065e4 	.word	0x080065e4

08000798 <MX_BlueNRG_MS_Process>:

/*
 * BlueNRG-MS background task
 */
void MX_BlueNRG_MS_Process(void)
{
 8000798:	b580      	push	{r7, lr}
 800079a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BlueNRG_MS_Process_PreTreatment */

  /* USER CODE END BlueNRG_MS_Process_PreTreatment */

  User_Process();
 800079c:	f000 f812 	bl	80007c4 <User_Process>
  hci_user_evt_proc();
 80007a0:	f004 fc68 	bl	8005074 <hci_user_evt_proc>

  /* USER CODE BEGIN BlueNRG_MS_Process_PostTreatment */

  /* USER CODE END BlueNRG_MS_Process_PostTreatment */
}
 80007a4:	bf00      	nop
 80007a6:	bd80      	pop	{r7, pc}

080007a8 <User_Init>:
 *
 * @param  None
 * @retval None
 */
static void User_Init(void)
{
 80007a8:	b580      	push	{r7, lr}
 80007aa:	af00      	add	r7, sp, #0
  BSP_PB_Init(BUTTON_KEY, BUTTON_MODE_EXTI);
 80007ac:	2101      	movs	r1, #1
 80007ae:	2000      	movs	r0, #0
 80007b0:	f001 f998 	bl	8001ae4 <BSP_PB_Init>
  BSP_LED_Init(LED2);
 80007b4:	2000      	movs	r0, #0
 80007b6:	f001 f8ff 	bl	80019b8 <BSP_LED_Init>

  BSP_COM_Init(COM1);
 80007ba:	2000      	movs	r0, #0
 80007bc:	f001 fa48 	bl	8001c50 <BSP_COM_Init>
}
 80007c0:	bf00      	nop
 80007c2:	bd80      	pop	{r7, pc}

080007c4 <User_Process>:
 *
 * @param  None
 * @retval None
 */
static void User_Process(void)
{
 80007c4:	b5b0      	push	{r4, r5, r7, lr}
 80007c6:	b086      	sub	sp, #24
 80007c8:	af00      	add	r7, sp, #0
  if (set_connectable)
 80007ca:	4b3d      	ldr	r3, [pc, #244]	; (80008c0 <User_Process+0xfc>)
 80007cc:	781b      	ldrb	r3, [r3, #0]
 80007ce:	b2db      	uxtb	r3, r3
 80007d0:	2b00      	cmp	r3, #0
 80007d2:	d00b      	beq.n	80007ec <User_Process+0x28>
  {
    /* Establish connection with remote device */
    Make_Connection();
 80007d4:	f000 f908 	bl	80009e8 <Make_Connection>
    set_connectable = FALSE;
 80007d8:	4b39      	ldr	r3, [pc, #228]	; (80008c0 <User_Process+0xfc>)
 80007da:	2200      	movs	r2, #0
 80007dc:	701a      	strb	r2, [r3, #0]
    user_button_init_state = BSP_PB_GetState(BUTTON_KEY);
 80007de:	2000      	movs	r0, #0
 80007e0:	f001 f9d4 	bl	8001b8c <BSP_PB_GetState>
 80007e4:	4603      	mov	r3, r0
 80007e6:	b2da      	uxtb	r2, r3
 80007e8:	4b36      	ldr	r3, [pc, #216]	; (80008c4 <User_Process+0x100>)
 80007ea:	701a      	strb	r2, [r3, #0]
  }

  if (BLE_Role == CLIENT)
 80007ec:	4b36      	ldr	r3, [pc, #216]	; (80008c8 <User_Process+0x104>)
 80007ee:	781b      	ldrb	r3, [r3, #0]
 80007f0:	2b00      	cmp	r3, #0
 80007f2:	d12e      	bne.n	8000852 <User_Process+0x8e>
  {
    /* Start TX handle Characteristic dynamic discovery if not yet done */
    if (connected && !end_read_tx_char_handle){
 80007f4:	4b35      	ldr	r3, [pc, #212]	; (80008cc <User_Process+0x108>)
 80007f6:	681b      	ldr	r3, [r3, #0]
 80007f8:	2b00      	cmp	r3, #0
 80007fa:	d007      	beq.n	800080c <User_Process+0x48>
 80007fc:	4b34      	ldr	r3, [pc, #208]	; (80008d0 <User_Process+0x10c>)
 80007fe:	781b      	ldrb	r3, [r3, #0]
 8000800:	b2db      	uxtb	r3, r3
 8000802:	2b00      	cmp	r3, #0
 8000804:	d102      	bne.n	800080c <User_Process+0x48>
      startReadTXCharHandle();
 8000806:	f000 f959 	bl	8000abc <startReadTXCharHandle>
 800080a:	e00a      	b.n	8000822 <User_Process+0x5e>
    }
    /* Start RX handle Characteristic dynamic discovery if not yet done */
    else if (connected && !end_read_rx_char_handle){
 800080c:	4b2f      	ldr	r3, [pc, #188]	; (80008cc <User_Process+0x108>)
 800080e:	681b      	ldr	r3, [r3, #0]
 8000810:	2b00      	cmp	r3, #0
 8000812:	d006      	beq.n	8000822 <User_Process+0x5e>
 8000814:	4b2f      	ldr	r3, [pc, #188]	; (80008d4 <User_Process+0x110>)
 8000816:	781b      	ldrb	r3, [r3, #0]
 8000818:	b2db      	uxtb	r3, r3
 800081a:	2b00      	cmp	r3, #0
 800081c:	d101      	bne.n	8000822 <User_Process+0x5e>
      startReadRXCharHandle();
 800081e:	f000 f973 	bl	8000b08 <startReadRXCharHandle>
    }

    if (connected && end_read_tx_char_handle && end_read_rx_char_handle && !notification_enabled)
 8000822:	4b2a      	ldr	r3, [pc, #168]	; (80008cc <User_Process+0x108>)
 8000824:	681b      	ldr	r3, [r3, #0]
 8000826:	2b00      	cmp	r3, #0
 8000828:	d013      	beq.n	8000852 <User_Process+0x8e>
 800082a:	4b29      	ldr	r3, [pc, #164]	; (80008d0 <User_Process+0x10c>)
 800082c:	781b      	ldrb	r3, [r3, #0]
 800082e:	b2db      	uxtb	r3, r3
 8000830:	2b00      	cmp	r3, #0
 8000832:	d00e      	beq.n	8000852 <User_Process+0x8e>
 8000834:	4b27      	ldr	r3, [pc, #156]	; (80008d4 <User_Process+0x110>)
 8000836:	781b      	ldrb	r3, [r3, #0]
 8000838:	b2db      	uxtb	r3, r3
 800083a:	2b00      	cmp	r3, #0
 800083c:	d009      	beq.n	8000852 <User_Process+0x8e>
 800083e:	4b26      	ldr	r3, [pc, #152]	; (80008d8 <User_Process+0x114>)
 8000840:	781b      	ldrb	r3, [r3, #0]
 8000842:	b2db      	uxtb	r3, r3
 8000844:	2b00      	cmp	r3, #0
 8000846:	d104      	bne.n	8000852 <User_Process+0x8e>
    {
      BSP_LED_Off(LED2); //end of the connection and chars discovery phase
 8000848:	2000      	movs	r0, #0
 800084a:	f001 f8dd 	bl	8001a08 <BSP_LED_Off>
      enableNotification();
 800084e:	f000 f9d7 	bl	8000c00 <enableNotification>
    }
  }

  /* Check if the User Button has been pushed */
  if (user_button_pressed)
 8000852:	4b22      	ldr	r3, [pc, #136]	; (80008dc <User_Process+0x118>)
 8000854:	781b      	ldrb	r3, [r3, #0]
 8000856:	b2db      	uxtb	r3, r3
 8000858:	2b00      	cmp	r3, #0
 800085a:	d02c      	beq.n	80008b6 <User_Process+0xf2>
  {
    /* Debouncing */
    HAL_Delay(50);
 800085c:	2032      	movs	r0, #50	; 0x32
 800085e:	f001 fb39 	bl	8001ed4 <HAL_Delay>

    /* Wait until the User Button is released */
    while (BSP_PB_GetState(BUTTON_KEY) == !user_button_init_state);
 8000862:	bf00      	nop
 8000864:	2000      	movs	r0, #0
 8000866:	f001 f991 	bl	8001b8c <BSP_PB_GetState>
 800086a:	4602      	mov	r2, r0
 800086c:	4b15      	ldr	r3, [pc, #84]	; (80008c4 <User_Process+0x100>)
 800086e:	781b      	ldrb	r3, [r3, #0]
 8000870:	b2db      	uxtb	r3, r3
 8000872:	2b00      	cmp	r3, #0
 8000874:	bf0c      	ite	eq
 8000876:	2301      	moveq	r3, #1
 8000878:	2300      	movne	r3, #0
 800087a:	b2db      	uxtb	r3, r3
 800087c:	429a      	cmp	r2, r3
 800087e:	d0f1      	beq.n	8000864 <User_Process+0xa0>

    /* Debouncing */
    HAL_Delay(50);
 8000880:	2032      	movs	r0, #50	; 0x32
 8000882:	f001 fb27 	bl	8001ed4 <HAL_Delay>

    if (connected && notification_enabled)
 8000886:	4b11      	ldr	r3, [pc, #68]	; (80008cc <User_Process+0x108>)
 8000888:	681b      	ldr	r3, [r3, #0]
 800088a:	2b00      	cmp	r3, #0
 800088c:	d010      	beq.n	80008b0 <User_Process+0xec>
 800088e:	4b12      	ldr	r3, [pc, #72]	; (80008d8 <User_Process+0x114>)
 8000890:	781b      	ldrb	r3, [r3, #0]
 8000892:	b2db      	uxtb	r3, r3
 8000894:	2b00      	cmp	r3, #0
 8000896:	d00b      	beq.n	80008b0 <User_Process+0xec>
    {
      /* Send a toggle command to the remote device */
      uint8_t data[20] = {'0','1','2','3','4','5','6','7','8','9','A','B','C','D','E','F','G','H','I','J'};
 8000898:	4b11      	ldr	r3, [pc, #68]	; (80008e0 <User_Process+0x11c>)
 800089a:	1d3c      	adds	r4, r7, #4
 800089c:	461d      	mov	r5, r3
 800089e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80008a0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80008a2:	682b      	ldr	r3, [r5, #0]
 80008a4:	6023      	str	r3, [r4, #0]
      sendData(data, sizeof(data));
 80008a6:	1d3b      	adds	r3, r7, #4
 80008a8:	2114      	movs	r1, #20
 80008aa:	4618      	mov	r0, r3
 80008ac:	f000 f978 	bl	8000ba0 <sendData>
                                * is called in main().
                                * E.g. it can be enabled for debugging. */
    }

    /* Reset the User Button flag */
    user_button_pressed = 0;
 80008b0:	4b0a      	ldr	r3, [pc, #40]	; (80008dc <User_Process+0x118>)
 80008b2:	2200      	movs	r2, #0
 80008b4:	701a      	strb	r2, [r3, #0]
  }
}
 80008b6:	bf00      	nop
 80008b8:	3718      	adds	r7, #24
 80008ba:	46bd      	mov	sp, r7
 80008bc:	bdb0      	pop	{r4, r5, r7, pc}
 80008be:	bf00      	nop
 80008c0:	20000002 	.word	0x20000002
 80008c4:	20000000 	.word	0x20000000
 80008c8:	20000001 	.word	0x20000001
 80008cc:	200000a8 	.word	0x200000a8
 80008d0:	200000b1 	.word	0x200000b1
 80008d4:	200000b2 	.word	0x200000b2
 80008d8:	200000ae 	.word	0x200000ae
 80008dc:	200000a5 	.word	0x200000a5
 80008e0:	08006614 	.word	0x08006614

080008e4 <BSP_PB_Callback>:
  * @brief  BSP Push Button callback
  * @param  Button Specifies the pin connected EXTI line
  * @retval None.
  */
void BSP_PB_Callback(Button_TypeDef Button)
{
 80008e4:	b480      	push	{r7}
 80008e6:	b083      	sub	sp, #12
 80008e8:	af00      	add	r7, sp, #0
 80008ea:	4603      	mov	r3, r0
 80008ec:	71fb      	strb	r3, [r7, #7]
  /* Set the User Button flag */
  user_button_pressed = 1;
 80008ee:	4b04      	ldr	r3, [pc, #16]	; (8000900 <BSP_PB_Callback+0x1c>)
 80008f0:	2201      	movs	r2, #1
 80008f2:	701a      	strb	r2, [r3, #0]
}
 80008f4:	bf00      	nop
 80008f6:	370c      	adds	r7, #12
 80008f8:	46bd      	mov	sp, r7
 80008fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008fe:	4770      	bx	lr
 8000900:	200000a5 	.word	0x200000a5

08000904 <Add_Sample_Service>:
 * @brief  Add a sample service using a vendor specific profile
 * @param  None
 * @retval Status
 */
tBleStatus Add_Sample_Service(void)
{
 8000904:	b590      	push	{r4, r7, lr}
 8000906:	b095      	sub	sp, #84	; 0x54
 8000908:	af06      	add	r7, sp, #24
  D973F2E0-B19E-11E2-9E96-0800200C9A66
  D973F2E1-B19E-11E2-9E96-0800200C9A66
  D973F2E2-B19E-11E2-9E96-0800200C9A66
  */

  const uint8_t service_uuid[16] = {0x66,0x9a,0x0c,0x20,0x00,0x08,0x96,0x9e,0xe2,0x11,0x9e,0xb1,0xe0,0xf2,0x73,0xd9};
 800090a:	4b31      	ldr	r3, [pc, #196]	; (80009d0 <Add_Sample_Service+0xcc>)
 800090c:	f107 0424 	add.w	r4, r7, #36	; 0x24
 8000910:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000912:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  const uint8_t charUuidTX[16] = {0x66,0x9a,0x0c,0x20,0x00,0x08,0x96,0x9e,0xe2,0x11,0x9e,0xb1,0xe1,0xf2,0x73,0xd9};
 8000916:	4b2f      	ldr	r3, [pc, #188]	; (80009d4 <Add_Sample_Service+0xd0>)
 8000918:	f107 0414 	add.w	r4, r7, #20
 800091c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800091e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  const uint8_t charUuidRX[16] = {0x66,0x9a,0x0c,0x20,0x00,0x08,0x96,0x9e,0xe2,0x11,0x9e,0xb1,0xe2,0xf2,0x73,0xd9};
 8000922:	4b2d      	ldr	r3, [pc, #180]	; (80009d8 <Add_Sample_Service+0xd4>)
 8000924:	1d3c      	adds	r4, r7, #4
 8000926:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000928:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

  ret = aci_gatt_add_serv(UUID_TYPE_128, service_uuid, PRIMARY_SERVICE, 7, &sampleServHandle); /* original is 9?? */
 800092c:	f107 0124 	add.w	r1, r7, #36	; 0x24
 8000930:	4b2a      	ldr	r3, [pc, #168]	; (80009dc <Add_Sample_Service+0xd8>)
 8000932:	9300      	str	r3, [sp, #0]
 8000934:	2307      	movs	r3, #7
 8000936:	2201      	movs	r2, #1
 8000938:	2002      	movs	r0, #2
 800093a:	f003 fccb 	bl	80042d4 <aci_gatt_add_serv>
 800093e:	4603      	mov	r3, r0
 8000940:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  if (ret != BLE_STATUS_SUCCESS) goto fail;
 8000944:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8000948:	2b00      	cmp	r3, #0
 800094a:	d136      	bne.n	80009ba <Add_Sample_Service+0xb6>

  ret =  aci_gatt_add_char(sampleServHandle, UUID_TYPE_128, charUuidTX, 20, CHAR_PROP_NOTIFY, ATTR_PERMISSION_NONE, 0,
 800094c:	4b23      	ldr	r3, [pc, #140]	; (80009dc <Add_Sample_Service+0xd8>)
 800094e:	8818      	ldrh	r0, [r3, #0]
 8000950:	f107 0214 	add.w	r2, r7, #20
 8000954:	4b22      	ldr	r3, [pc, #136]	; (80009e0 <Add_Sample_Service+0xdc>)
 8000956:	9305      	str	r3, [sp, #20]
 8000958:	2301      	movs	r3, #1
 800095a:	9304      	str	r3, [sp, #16]
 800095c:	2310      	movs	r3, #16
 800095e:	9303      	str	r3, [sp, #12]
 8000960:	2300      	movs	r3, #0
 8000962:	9302      	str	r3, [sp, #8]
 8000964:	2300      	movs	r3, #0
 8000966:	9301      	str	r3, [sp, #4]
 8000968:	2310      	movs	r3, #16
 800096a:	9300      	str	r3, [sp, #0]
 800096c:	2314      	movs	r3, #20
 800096e:	2102      	movs	r1, #2
 8000970:	f003 fd39 	bl	80043e6 <aci_gatt_add_char>
 8000974:	4603      	mov	r3, r0
 8000976:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
                           16, 1, &TXCharHandle);
  if (ret != BLE_STATUS_SUCCESS) goto fail;
 800097a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800097e:	2b00      	cmp	r3, #0
 8000980:	d11d      	bne.n	80009be <Add_Sample_Service+0xba>

  ret =  aci_gatt_add_char(sampleServHandle, UUID_TYPE_128, charUuidRX, 20, CHAR_PROP_WRITE|CHAR_PROP_WRITE_WITHOUT_RESP, ATTR_PERMISSION_NONE, GATT_NOTIFY_ATTRIBUTE_WRITE,
 8000982:	4b16      	ldr	r3, [pc, #88]	; (80009dc <Add_Sample_Service+0xd8>)
 8000984:	8818      	ldrh	r0, [r3, #0]
 8000986:	1d3a      	adds	r2, r7, #4
 8000988:	4b16      	ldr	r3, [pc, #88]	; (80009e4 <Add_Sample_Service+0xe0>)
 800098a:	9305      	str	r3, [sp, #20]
 800098c:	2301      	movs	r3, #1
 800098e:	9304      	str	r3, [sp, #16]
 8000990:	2310      	movs	r3, #16
 8000992:	9303      	str	r3, [sp, #12]
 8000994:	2301      	movs	r3, #1
 8000996:	9302      	str	r3, [sp, #8]
 8000998:	2300      	movs	r3, #0
 800099a:	9301      	str	r3, [sp, #4]
 800099c:	230c      	movs	r3, #12
 800099e:	9300      	str	r3, [sp, #0]
 80009a0:	2314      	movs	r3, #20
 80009a2:	2102      	movs	r1, #2
 80009a4:	f003 fd1f 	bl	80043e6 <aci_gatt_add_char>
 80009a8:	4603      	mov	r3, r0
 80009aa:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
                           16, 1, &RXCharHandle);
  if (ret != BLE_STATUS_SUCCESS) goto fail;
 80009ae:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80009b2:	2b00      	cmp	r3, #0
 80009b4:	d105      	bne.n	80009c2 <Add_Sample_Service+0xbe>

  PRINTF("Sample Service added.\nTX Char Handle %04X, RX Char Handle %04X\n", TXCharHandle, RXCharHandle);
  return BLE_STATUS_SUCCESS;
 80009b6:	2300      	movs	r3, #0
 80009b8:	e005      	b.n	80009c6 <Add_Sample_Service+0xc2>
  if (ret != BLE_STATUS_SUCCESS) goto fail;
 80009ba:	bf00      	nop
 80009bc:	e002      	b.n	80009c4 <Add_Sample_Service+0xc0>
  if (ret != BLE_STATUS_SUCCESS) goto fail;
 80009be:	bf00      	nop
 80009c0:	e000      	b.n	80009c4 <Add_Sample_Service+0xc0>
  if (ret != BLE_STATUS_SUCCESS) goto fail;
 80009c2:	bf00      	nop

fail:
  PRINTF("Error while adding Sample Service.\n");
  return BLE_STATUS_ERROR ;
 80009c4:	2347      	movs	r3, #71	; 0x47
}
 80009c6:	4618      	mov	r0, r3
 80009c8:	373c      	adds	r7, #60	; 0x3c
 80009ca:	46bd      	mov	sp, r7
 80009cc:	bd90      	pop	{r4, r7, pc}
 80009ce:	bf00      	nop
 80009d0:	08006628 	.word	0x08006628
 80009d4:	08006638 	.word	0x08006638
 80009d8:	08006648 	.word	0x08006648
 80009dc:	200000b8 	.word	0x200000b8
 80009e0:	200000ba 	.word	0x200000ba
 80009e4:	200000bc 	.word	0x200000bc

080009e8 <Make_Connection>:
 * @brief  Make the device connectable
 * @param  None
 * @retval None
 */
void Make_Connection(void)
{
 80009e8:	b590      	push	{r4, r7, lr}
 80009ea:	b08f      	sub	sp, #60	; 0x3c
 80009ec:	af08      	add	r7, sp, #32
  tBleStatus ret;

  if(BLE_Role == CLIENT) {
 80009ee:	4b2e      	ldr	r3, [pc, #184]	; (8000aa8 <Make_Connection+0xc0>)
 80009f0:	781b      	ldrb	r3, [r3, #0]
 80009f2:	2b00      	cmp	r3, #0
 80009f4:	d132      	bne.n	8000a5c <Make_Connection+0x74>

    printf("Client Create Connection\n");
 80009f6:	482d      	ldr	r0, [pc, #180]	; (8000aac <Make_Connection+0xc4>)
 80009f8:	f005 f856 	bl	8005aa8 <puts>
    tBDAddr bdaddr = {0xaa, 0x00, 0x00, 0xE1, 0x80, 0x02};
 80009fc:	4a2c      	ldr	r2, [pc, #176]	; (8000ab0 <Make_Connection+0xc8>)
 80009fe:	f107 0310 	add.w	r3, r7, #16
 8000a02:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000a06:	6018      	str	r0, [r3, #0]
 8000a08:	3304      	adds	r3, #4
 8000a0a:	8019      	strh	r1, [r3, #0]

    BSP_LED_On(LED2); //To indicate the start of the connection and discovery phase
 8000a0c:	2000      	movs	r0, #0
 8000a0e:	f000 ffe5 	bl	80019dc <BSP_LED_On>

    /*
    Scan_Interval, Scan_Window, Peer_Address_Type, Peer_Address, Own_Address_Type, Conn_Interval_Min,
    Conn_Interval_Max, Conn_Latency, Supervision_Timeout, Conn_Len_Min, Conn_Len_Max
    */
    ret = aci_gap_create_connection(SCAN_P, SCAN_L, PUBLIC_ADDR, bdaddr, PUBLIC_ADDR, CONN_P1, CONN_P2, 0,
 8000a12:	f107 0310 	add.w	r3, r7, #16
 8000a16:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8000a1a:	9206      	str	r2, [sp, #24]
 8000a1c:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8000a20:	9205      	str	r2, [sp, #20]
 8000a22:	223c      	movs	r2, #60	; 0x3c
 8000a24:	9204      	str	r2, [sp, #16]
 8000a26:	2200      	movs	r2, #0
 8000a28:	9203      	str	r2, [sp, #12]
 8000a2a:	2228      	movs	r2, #40	; 0x28
 8000a2c:	9202      	str	r2, [sp, #8]
 8000a2e:	2228      	movs	r2, #40	; 0x28
 8000a30:	9201      	str	r2, [sp, #4]
 8000a32:	2200      	movs	r2, #0
 8000a34:	9200      	str	r2, [sp, #0]
 8000a36:	2200      	movs	r2, #0
 8000a38:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000a3c:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8000a40:	f003 fbd1 	bl	80041e6 <aci_gap_create_connection>
 8000a44:	4603      	mov	r3, r0
 8000a46:	75fb      	strb	r3, [r7, #23]
                                    SUPERV_TIMEOUT, CONN_L1 , CONN_L2);

    if (ret != 0){
 8000a48:	7dfb      	ldrb	r3, [r7, #23]
 8000a4a:	2b00      	cmp	r3, #0
 8000a4c:	d027      	beq.n	8000a9e <Make_Connection+0xb6>
      printf("Error while starting connection.\n");
 8000a4e:	4819      	ldr	r0, [pc, #100]	; (8000ab4 <Make_Connection+0xcc>)
 8000a50:	f005 f82a 	bl	8005aa8 <puts>
      HAL_Delay(100);
 8000a54:	2064      	movs	r0, #100	; 0x64
 8000a56:	f001 fa3d 	bl	8001ed4 <HAL_Delay>
    */
    ret = aci_gap_set_discoverable(ADV_DATA_TYPE, ADV_INTERV_MIN, ADV_INTERV_MAX, PUBLIC_ADDR,
                                   NO_WHITE_LIST_USE, 13, local_name, 0, NULL, 0, 0);
    PRINTF("%d\n",ret);
  }
}
 8000a5a:	e020      	b.n	8000a9e <Make_Connection+0xb6>
    const char local_name[] = {AD_TYPE_COMPLETE_LOCAL_NAME,'B','l','u','e','N','R','G','_','C','h','a','t'};
 8000a5c:	4b16      	ldr	r3, [pc, #88]	; (8000ab8 <Make_Connection+0xd0>)
 8000a5e:	463c      	mov	r4, r7
 8000a60:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000a62:	c407      	stmia	r4!, {r0, r1, r2}
 8000a64:	7023      	strb	r3, [r4, #0]
    hci_le_set_scan_resp_data(0,NULL);
 8000a66:	2100      	movs	r1, #0
 8000a68:	2000      	movs	r0, #0
 8000a6a:	f004 f8ab 	bl	8004bc4 <hci_le_set_scan_resp_data>
    ret = aci_gap_set_discoverable(ADV_DATA_TYPE, ADV_INTERV_MIN, ADV_INTERV_MAX, PUBLIC_ADDR,
 8000a6e:	2300      	movs	r3, #0
 8000a70:	9306      	str	r3, [sp, #24]
 8000a72:	2300      	movs	r3, #0
 8000a74:	9305      	str	r3, [sp, #20]
 8000a76:	2300      	movs	r3, #0
 8000a78:	9304      	str	r3, [sp, #16]
 8000a7a:	2300      	movs	r3, #0
 8000a7c:	9303      	str	r3, [sp, #12]
 8000a7e:	463b      	mov	r3, r7
 8000a80:	9302      	str	r3, [sp, #8]
 8000a82:	230d      	movs	r3, #13
 8000a84:	9301      	str	r3, [sp, #4]
 8000a86:	2300      	movs	r3, #0
 8000a88:	9300      	str	r3, [sp, #0]
 8000a8a:	2300      	movs	r3, #0
 8000a8c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000a90:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000a94:	2000      	movs	r0, #0
 8000a96:	f003 fa65 	bl	8003f64 <aci_gap_set_discoverable>
 8000a9a:	4603      	mov	r3, r0
 8000a9c:	75fb      	strb	r3, [r7, #23]
}
 8000a9e:	bf00      	nop
 8000aa0:	371c      	adds	r7, #28
 8000aa2:	46bd      	mov	sp, r7
 8000aa4:	bd90      	pop	{r4, r7, pc}
 8000aa6:	bf00      	nop
 8000aa8:	20000001 	.word	0x20000001
 8000aac:	08006658 	.word	0x08006658
 8000ab0:	08006698 	.word	0x08006698
 8000ab4:	08006674 	.word	0x08006674
 8000ab8:	080066a0 	.word	0x080066a0

08000abc <startReadTXCharHandle>:
 * @brief  Discovery TX characteristic handle by UUID 128 bits
 * @param  None
 * @retval None
 */
void startReadTXCharHandle(void)
{
 8000abc:	b590      	push	{r4, r7, lr}
 8000abe:	b087      	sub	sp, #28
 8000ac0:	af02      	add	r7, sp, #8
  if (!start_read_tx_char_handle)
 8000ac2:	4b0e      	ldr	r3, [pc, #56]	; (8000afc <startReadTXCharHandle+0x40>)
 8000ac4:	781b      	ldrb	r3, [r3, #0]
 8000ac6:	b2db      	uxtb	r3, r3
 8000ac8:	2b00      	cmp	r3, #0
 8000aca:	d112      	bne.n	8000af2 <startReadTXCharHandle+0x36>
  {
    PRINTF("Start reading TX Char Handle\n");

    const uint8_t charUuid128_TX[16] = {0x66,0x9a,0x0c,0x20,0x00,0x08,0x96,0x9e,0xe2,0x11,0x9e,0xb1,0xe1,0xf2,0x73,0xd9};
 8000acc:	4b0c      	ldr	r3, [pc, #48]	; (8000b00 <startReadTXCharHandle+0x44>)
 8000ace:	463c      	mov	r4, r7
 8000ad0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000ad2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    aci_gatt_disc_charac_by_uuid(connection_handle, 0x0001, 0xFFFF, UUID_TYPE_128, charUuid128_TX);
 8000ad6:	4b0b      	ldr	r3, [pc, #44]	; (8000b04 <startReadTXCharHandle+0x48>)
 8000ad8:	881b      	ldrh	r3, [r3, #0]
 8000ada:	b298      	uxth	r0, r3
 8000adc:	463b      	mov	r3, r7
 8000ade:	9300      	str	r3, [sp, #0]
 8000ae0:	2302      	movs	r3, #2
 8000ae2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000ae6:	2101      	movs	r1, #1
 8000ae8:	f003 fdd8 	bl	800469c <aci_gatt_disc_charac_by_uuid>
    start_read_tx_char_handle = TRUE;
 8000aec:	4b03      	ldr	r3, [pc, #12]	; (8000afc <startReadTXCharHandle+0x40>)
 8000aee:	2201      	movs	r2, #1
 8000af0:	701a      	strb	r2, [r3, #0]
  }
}
 8000af2:	bf00      	nop
 8000af4:	3714      	adds	r7, #20
 8000af6:	46bd      	mov	sp, r7
 8000af8:	bd90      	pop	{r4, r7, pc}
 8000afa:	bf00      	nop
 8000afc:	200000af 	.word	0x200000af
 8000b00:	08006638 	.word	0x08006638
 8000b04:	200000ac 	.word	0x200000ac

08000b08 <startReadRXCharHandle>:
 * @brief  Discovery RX characteristic handle by UUID 128 bits
 * @param  None
 * @retval None
 */
void startReadRXCharHandle(void)
{
 8000b08:	b590      	push	{r4, r7, lr}
 8000b0a:	b087      	sub	sp, #28
 8000b0c:	af02      	add	r7, sp, #8
  if (!start_read_rx_char_handle)
 8000b0e:	4b0e      	ldr	r3, [pc, #56]	; (8000b48 <startReadRXCharHandle+0x40>)
 8000b10:	781b      	ldrb	r3, [r3, #0]
 8000b12:	b2db      	uxtb	r3, r3
 8000b14:	2b00      	cmp	r3, #0
 8000b16:	d112      	bne.n	8000b3e <startReadRXCharHandle+0x36>
  {
    PRINTF("Start reading RX Char Handle\n");

    const uint8_t charUuid128_RX[16] = {0x66,0x9a,0x0c,0x20,0x00,0x08,0x96,0x9e,0xe2,0x11,0x9e,0xb1,0xe2,0xf2,0x73,0xd9};
 8000b18:	4b0c      	ldr	r3, [pc, #48]	; (8000b4c <startReadRXCharHandle+0x44>)
 8000b1a:	463c      	mov	r4, r7
 8000b1c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000b1e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    aci_gatt_disc_charac_by_uuid(connection_handle, 0x0001, 0xFFFF, UUID_TYPE_128, charUuid128_RX);
 8000b22:	4b0b      	ldr	r3, [pc, #44]	; (8000b50 <startReadRXCharHandle+0x48>)
 8000b24:	881b      	ldrh	r3, [r3, #0]
 8000b26:	b298      	uxth	r0, r3
 8000b28:	463b      	mov	r3, r7
 8000b2a:	9300      	str	r3, [sp, #0]
 8000b2c:	2302      	movs	r3, #2
 8000b2e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000b32:	2101      	movs	r1, #1
 8000b34:	f003 fdb2 	bl	800469c <aci_gatt_disc_charac_by_uuid>
    start_read_rx_char_handle = TRUE;
 8000b38:	4b03      	ldr	r3, [pc, #12]	; (8000b48 <startReadRXCharHandle+0x40>)
 8000b3a:	2201      	movs	r2, #1
 8000b3c:	701a      	strb	r2, [r3, #0]
  }
}
 8000b3e:	bf00      	nop
 8000b40:	3714      	adds	r7, #20
 8000b42:	46bd      	mov	sp, r7
 8000b44:	bd90      	pop	{r4, r7, pc}
 8000b46:	bf00      	nop
 8000b48:	200000b0 	.word	0x200000b0
 8000b4c:	08006648 	.word	0x08006648
 8000b50:	200000ac 	.word	0x200000ac

08000b54 <receiveData>:
 * @param  data_buffer : pointer to store in received data
 * @param  Nb_bytes : number of bytes to be received
 * @retval None
 */
void receiveData(uint8_t* data_buffer, uint8_t Nb_bytes)
{
 8000b54:	b580      	push	{r7, lr}
 8000b56:	b084      	sub	sp, #16
 8000b58:	af00      	add	r7, sp, #0
 8000b5a:	6078      	str	r0, [r7, #4]
 8000b5c:	460b      	mov	r3, r1
 8000b5e:	70fb      	strb	r3, [r7, #3]
  BSP_LED_Toggle(LED2);
 8000b60:	2000      	movs	r0, #0
 8000b62:	f000 ff67 	bl	8001a34 <BSP_LED_Toggle>

  for(int i = 0; i < Nb_bytes; i++) {
 8000b66:	2300      	movs	r3, #0
 8000b68:	60fb      	str	r3, [r7, #12]
 8000b6a:	e009      	b.n	8000b80 <receiveData+0x2c>
    printf("%c", data_buffer[i]);
 8000b6c:	68fb      	ldr	r3, [r7, #12]
 8000b6e:	687a      	ldr	r2, [r7, #4]
 8000b70:	4413      	add	r3, r2
 8000b72:	781b      	ldrb	r3, [r3, #0]
 8000b74:	4618      	mov	r0, r3
 8000b76:	f004 ff13 	bl	80059a0 <putchar>
  for(int i = 0; i < Nb_bytes; i++) {
 8000b7a:	68fb      	ldr	r3, [r7, #12]
 8000b7c:	3301      	adds	r3, #1
 8000b7e:	60fb      	str	r3, [r7, #12]
 8000b80:	78fb      	ldrb	r3, [r7, #3]
 8000b82:	68fa      	ldr	r2, [r7, #12]
 8000b84:	429a      	cmp	r2, r3
 8000b86:	dbf1      	blt.n	8000b6c <receiveData+0x18>
  }
  fflush(stdout);
 8000b88:	4b04      	ldr	r3, [pc, #16]	; (8000b9c <receiveData+0x48>)
 8000b8a:	681b      	ldr	r3, [r3, #0]
 8000b8c:	689b      	ldr	r3, [r3, #8]
 8000b8e:	4618      	mov	r0, r3
 8000b90:	f004 fcc8 	bl	8005524 <fflush>
}
 8000b94:	bf00      	nop
 8000b96:	3710      	adds	r7, #16
 8000b98:	46bd      	mov	sp, r7
 8000b9a:	bd80      	pop	{r7, pc}
 8000b9c:	20000024 	.word	0x20000024

08000ba0 <sendData>:
 * @param  data_buffer : pointer to data to be sent
 * @param  Nb_bytes : number of bytes to send
 * @retval None
 */
void sendData(uint8_t* data_buffer, uint8_t Nb_bytes)
{
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	b084      	sub	sp, #16
 8000ba4:	af02      	add	r7, sp, #8
 8000ba6:	6078      	str	r0, [r7, #4]
 8000ba8:	460b      	mov	r3, r1
 8000baa:	70fb      	strb	r3, [r7, #3]
  if(BLE_Role == SERVER) {
 8000bac:	4b0f      	ldr	r3, [pc, #60]	; (8000bec <sendData+0x4c>)
 8000bae:	781b      	ldrb	r3, [r3, #0]
 8000bb0:	2b01      	cmp	r3, #1
 8000bb2:	d10b      	bne.n	8000bcc <sendData+0x2c>
    aci_gatt_update_char_value(sampleServHandle,TXCharHandle, 0, Nb_bytes, data_buffer);
 8000bb4:	4b0e      	ldr	r3, [pc, #56]	; (8000bf0 <sendData+0x50>)
 8000bb6:	8818      	ldrh	r0, [r3, #0]
 8000bb8:	4b0e      	ldr	r3, [pc, #56]	; (8000bf4 <sendData+0x54>)
 8000bba:	8819      	ldrh	r1, [r3, #0]
 8000bbc:	78fa      	ldrb	r2, [r7, #3]
 8000bbe:	687b      	ldr	r3, [r7, #4]
 8000bc0:	9300      	str	r3, [sp, #0]
 8000bc2:	4613      	mov	r3, r2
 8000bc4:	2200      	movs	r2, #0
 8000bc6:	f003 fcd9 	bl	800457c <aci_gatt_update_char_value>
  }
  else {
    aci_gatt_write_without_response(connection_handle, rx_handle+1, Nb_bytes, data_buffer);
  }
}
 8000bca:	e00a      	b.n	8000be2 <sendData+0x42>
    aci_gatt_write_without_response(connection_handle, rx_handle+1, Nb_bytes, data_buffer);
 8000bcc:	4b0a      	ldr	r3, [pc, #40]	; (8000bf8 <sendData+0x58>)
 8000bce:	881b      	ldrh	r3, [r3, #0]
 8000bd0:	b298      	uxth	r0, r3
 8000bd2:	4b0a      	ldr	r3, [pc, #40]	; (8000bfc <sendData+0x5c>)
 8000bd4:	881b      	ldrh	r3, [r3, #0]
 8000bd6:	3301      	adds	r3, #1
 8000bd8:	b299      	uxth	r1, r3
 8000bda:	78fa      	ldrb	r2, [r7, #3]
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	f003 fe66 	bl	80048ae <aci_gatt_write_without_response>
}
 8000be2:	bf00      	nop
 8000be4:	3708      	adds	r7, #8
 8000be6:	46bd      	mov	sp, r7
 8000be8:	bd80      	pop	{r7, pc}
 8000bea:	bf00      	nop
 8000bec:	20000001 	.word	0x20000001
 8000bf0:	200000b8 	.word	0x200000b8
 8000bf4:	200000ba 	.word	0x200000ba
 8000bf8:	200000ac 	.word	0x200000ac
 8000bfc:	200000b6 	.word	0x200000b6

08000c00 <enableNotification>:
 * @brief  Enable notification
 * @param  None
 * @retval None
 */
void enableNotification(void)
{
 8000c00:	b580      	push	{r7, lr}
 8000c02:	b082      	sub	sp, #8
 8000c04:	af00      	add	r7, sp, #0
  uint8_t client_char_conf_data[] = {0x01, 0x00}; // Enable notifications
 8000c06:	2301      	movs	r3, #1
 8000c08:	803b      	strh	r3, [r7, #0]

  uint32_t tickstart = HAL_GetTick();
 8000c0a:	f001 f957 	bl	8001ebc <HAL_GetTick>
 8000c0e:	6078      	str	r0, [r7, #4]

  while(aci_gatt_write_charac_descriptor(connection_handle, tx_handle+2, 2, client_char_conf_data)==BLE_STATUS_NOT_ALLOWED){
 8000c10:	e008      	b.n	8000c24 <enableNotification+0x24>
    /* Radio is busy */
    if ((HAL_GetTick() - tickstart) > (10*HCI_DEFAULT_TIMEOUT_MS)) break;
 8000c12:	f001 f953 	bl	8001ebc <HAL_GetTick>
 8000c16:	4602      	mov	r2, r0
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	1ad3      	subs	r3, r2, r3
 8000c1c:	f242 7210 	movw	r2, #10000	; 0x2710
 8000c20:	4293      	cmp	r3, r2
 8000c22:	d80e      	bhi.n	8000c42 <enableNotification+0x42>
  while(aci_gatt_write_charac_descriptor(connection_handle, tx_handle+2, 2, client_char_conf_data)==BLE_STATUS_NOT_ALLOWED){
 8000c24:	4b0b      	ldr	r3, [pc, #44]	; (8000c54 <enableNotification+0x54>)
 8000c26:	881b      	ldrh	r3, [r3, #0]
 8000c28:	b298      	uxth	r0, r3
 8000c2a:	4b0b      	ldr	r3, [pc, #44]	; (8000c58 <enableNotification+0x58>)
 8000c2c:	881b      	ldrh	r3, [r3, #0]
 8000c2e:	3302      	adds	r3, #2
 8000c30:	b299      	uxth	r1, r3
 8000c32:	463b      	mov	r3, r7
 8000c34:	2202      	movs	r2, #2
 8000c36:	f003 fdbf 	bl	80047b8 <aci_gatt_write_charac_descriptor>
 8000c3a:	4603      	mov	r3, r0
 8000c3c:	2b46      	cmp	r3, #70	; 0x46
 8000c3e:	d0e8      	beq.n	8000c12 <enableNotification+0x12>
 8000c40:	e000      	b.n	8000c44 <enableNotification+0x44>
    if ((HAL_GetTick() - tickstart) > (10*HCI_DEFAULT_TIMEOUT_MS)) break;
 8000c42:	bf00      	nop
  }
  notification_enabled = TRUE;
 8000c44:	4b05      	ldr	r3, [pc, #20]	; (8000c5c <enableNotification+0x5c>)
 8000c46:	2201      	movs	r2, #1
 8000c48:	701a      	strb	r2, [r3, #0]
}
 8000c4a:	bf00      	nop
 8000c4c:	3708      	adds	r7, #8
 8000c4e:	46bd      	mov	sp, r7
 8000c50:	bd80      	pop	{r7, pc}
 8000c52:	bf00      	nop
 8000c54:	200000ac 	.word	0x200000ac
 8000c58:	200000b4 	.word	0x200000b4
 8000c5c:	200000ae 	.word	0x200000ae

08000c60 <Attribute_Modified_CB>:
 * @param  data_length : size of the modified attribute data
 * @param  att_data : pointer to the modified attribute data
 * @retval None
 */
void Attribute_Modified_CB(uint16_t handle, uint8_t data_length, uint8_t *att_data)
{
 8000c60:	b580      	push	{r7, lr}
 8000c62:	b082      	sub	sp, #8
 8000c64:	af00      	add	r7, sp, #0
 8000c66:	4603      	mov	r3, r0
 8000c68:	603a      	str	r2, [r7, #0]
 8000c6a:	80fb      	strh	r3, [r7, #6]
 8000c6c:	460b      	mov	r3, r1
 8000c6e:	717b      	strb	r3, [r7, #5]
  if(handle == RXCharHandle + 1){
 8000c70:	88fa      	ldrh	r2, [r7, #6]
 8000c72:	4b0e      	ldr	r3, [pc, #56]	; (8000cac <Attribute_Modified_CB+0x4c>)
 8000c74:	881b      	ldrh	r3, [r3, #0]
 8000c76:	3301      	adds	r3, #1
 8000c78:	429a      	cmp	r2, r3
 8000c7a:	d105      	bne.n	8000c88 <Attribute_Modified_CB+0x28>
    receiveData(att_data, data_length);
 8000c7c:	797b      	ldrb	r3, [r7, #5]
 8000c7e:	4619      	mov	r1, r3
 8000c80:	6838      	ldr	r0, [r7, #0]
 8000c82:	f7ff ff67 	bl	8000b54 <receiveData>
  } else if (handle == TXCharHandle + 2) {
    if(att_data[0] == 0x01)
      notification_enabled = TRUE;
  }
}
 8000c86:	e00c      	b.n	8000ca2 <Attribute_Modified_CB+0x42>
  } else if (handle == TXCharHandle + 2) {
 8000c88:	88fa      	ldrh	r2, [r7, #6]
 8000c8a:	4b09      	ldr	r3, [pc, #36]	; (8000cb0 <Attribute_Modified_CB+0x50>)
 8000c8c:	881b      	ldrh	r3, [r3, #0]
 8000c8e:	3302      	adds	r3, #2
 8000c90:	429a      	cmp	r2, r3
 8000c92:	d106      	bne.n	8000ca2 <Attribute_Modified_CB+0x42>
    if(att_data[0] == 0x01)
 8000c94:	683b      	ldr	r3, [r7, #0]
 8000c96:	781b      	ldrb	r3, [r3, #0]
 8000c98:	2b01      	cmp	r3, #1
 8000c9a:	d102      	bne.n	8000ca2 <Attribute_Modified_CB+0x42>
      notification_enabled = TRUE;
 8000c9c:	4b05      	ldr	r3, [pc, #20]	; (8000cb4 <Attribute_Modified_CB+0x54>)
 8000c9e:	2201      	movs	r2, #1
 8000ca0:	701a      	strb	r2, [r3, #0]
}
 8000ca2:	bf00      	nop
 8000ca4:	3708      	adds	r7, #8
 8000ca6:	46bd      	mov	sp, r7
 8000ca8:	bd80      	pop	{r7, pc}
 8000caa:	bf00      	nop
 8000cac:	200000bc 	.word	0x200000bc
 8000cb0:	200000ba 	.word	0x200000ba
 8000cb4:	200000ae 	.word	0x200000ae

08000cb8 <GAP_ConnectionComplete_CB>:
 * @param  addr : Address of peer device
 * @param  handle : Connection handle
 * @retval None
 */
void GAP_ConnectionComplete_CB(uint8_t addr[6], uint16_t handle)
{
 8000cb8:	b580      	push	{r7, lr}
 8000cba:	b084      	sub	sp, #16
 8000cbc:	af00      	add	r7, sp, #0
 8000cbe:	6078      	str	r0, [r7, #4]
 8000cc0:	460b      	mov	r3, r1
 8000cc2:	807b      	strh	r3, [r7, #2]
  connected = TRUE;
 8000cc4:	4b11      	ldr	r3, [pc, #68]	; (8000d0c <GAP_ConnectionComplete_CB+0x54>)
 8000cc6:	2201      	movs	r2, #1
 8000cc8:	601a      	str	r2, [r3, #0]
  connection_handle = handle;
 8000cca:	4a11      	ldr	r2, [pc, #68]	; (8000d10 <GAP_ConnectionComplete_CB+0x58>)
 8000ccc:	887b      	ldrh	r3, [r7, #2]
 8000cce:	8013      	strh	r3, [r2, #0]

  printf("Connected to device:");
 8000cd0:	4810      	ldr	r0, [pc, #64]	; (8000d14 <GAP_ConnectionComplete_CB+0x5c>)
 8000cd2:	f004 fe4d 	bl	8005970 <iprintf>
  for(int i = 5; i > 0; i--){
 8000cd6:	2305      	movs	r3, #5
 8000cd8:	60fb      	str	r3, [r7, #12]
 8000cda:	e00a      	b.n	8000cf2 <GAP_ConnectionComplete_CB+0x3a>
    printf("%02X-", addr[i]);
 8000cdc:	68fb      	ldr	r3, [r7, #12]
 8000cde:	687a      	ldr	r2, [r7, #4]
 8000ce0:	4413      	add	r3, r2
 8000ce2:	781b      	ldrb	r3, [r3, #0]
 8000ce4:	4619      	mov	r1, r3
 8000ce6:	480c      	ldr	r0, [pc, #48]	; (8000d18 <GAP_ConnectionComplete_CB+0x60>)
 8000ce8:	f004 fe42 	bl	8005970 <iprintf>
  for(int i = 5; i > 0; i--){
 8000cec:	68fb      	ldr	r3, [r7, #12]
 8000cee:	3b01      	subs	r3, #1
 8000cf0:	60fb      	str	r3, [r7, #12]
 8000cf2:	68fb      	ldr	r3, [r7, #12]
 8000cf4:	2b00      	cmp	r3, #0
 8000cf6:	dcf1      	bgt.n	8000cdc <GAP_ConnectionComplete_CB+0x24>
  }
  printf("%02X\n", addr[0]);
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	781b      	ldrb	r3, [r3, #0]
 8000cfc:	4619      	mov	r1, r3
 8000cfe:	4807      	ldr	r0, [pc, #28]	; (8000d1c <GAP_ConnectionComplete_CB+0x64>)
 8000d00:	f004 fe36 	bl	8005970 <iprintf>
}
 8000d04:	bf00      	nop
 8000d06:	3710      	adds	r7, #16
 8000d08:	46bd      	mov	sp, r7
 8000d0a:	bd80      	pop	{r7, pc}
 8000d0c:	200000a8 	.word	0x200000a8
 8000d10:	200000ac 	.word	0x200000ac
 8000d14:	080066b0 	.word	0x080066b0
 8000d18:	080066c8 	.word	0x080066c8
 8000d1c:	080066d0 	.word	0x080066d0

08000d20 <GAP_DisconnectionComplete_CB>:
 * @brief  This function is called when the peer device get disconnected.
 * @param  None
 * @retval None
 */
void GAP_DisconnectionComplete_CB(void)
{
 8000d20:	b580      	push	{r7, lr}
 8000d22:	af00      	add	r7, sp, #0
  connected = FALSE;
 8000d24:	4b0c      	ldr	r3, [pc, #48]	; (8000d58 <GAP_DisconnectionComplete_CB+0x38>)
 8000d26:	2200      	movs	r2, #0
 8000d28:	601a      	str	r2, [r3, #0]

  printf("Disconnected\n");
 8000d2a:	480c      	ldr	r0, [pc, #48]	; (8000d5c <GAP_DisconnectionComplete_CB+0x3c>)
 8000d2c:	f004 febc 	bl	8005aa8 <puts>
  /* Make the device connectable again. */
  set_connectable = TRUE;
 8000d30:	4b0b      	ldr	r3, [pc, #44]	; (8000d60 <GAP_DisconnectionComplete_CB+0x40>)
 8000d32:	2201      	movs	r2, #1
 8000d34:	701a      	strb	r2, [r3, #0]
  notification_enabled = FALSE;
 8000d36:	4b0b      	ldr	r3, [pc, #44]	; (8000d64 <GAP_DisconnectionComplete_CB+0x44>)
 8000d38:	2200      	movs	r2, #0
 8000d3a:	701a      	strb	r2, [r3, #0]
  start_read_tx_char_handle = FALSE;
 8000d3c:	4b0a      	ldr	r3, [pc, #40]	; (8000d68 <GAP_DisconnectionComplete_CB+0x48>)
 8000d3e:	2200      	movs	r2, #0
 8000d40:	701a      	strb	r2, [r3, #0]
  start_read_rx_char_handle = FALSE;
 8000d42:	4b0a      	ldr	r3, [pc, #40]	; (8000d6c <GAP_DisconnectionComplete_CB+0x4c>)
 8000d44:	2200      	movs	r2, #0
 8000d46:	701a      	strb	r2, [r3, #0]
  end_read_tx_char_handle = FALSE;
 8000d48:	4b09      	ldr	r3, [pc, #36]	; (8000d70 <GAP_DisconnectionComplete_CB+0x50>)
 8000d4a:	2200      	movs	r2, #0
 8000d4c:	701a      	strb	r2, [r3, #0]
  end_read_rx_char_handle = FALSE;
 8000d4e:	4b09      	ldr	r3, [pc, #36]	; (8000d74 <GAP_DisconnectionComplete_CB+0x54>)
 8000d50:	2200      	movs	r2, #0
 8000d52:	701a      	strb	r2, [r3, #0]
}
 8000d54:	bf00      	nop
 8000d56:	bd80      	pop	{r7, pc}
 8000d58:	200000a8 	.word	0x200000a8
 8000d5c:	080066d8 	.word	0x080066d8
 8000d60:	20000002 	.word	0x20000002
 8000d64:	200000ae 	.word	0x200000ae
 8000d68:	200000af 	.word	0x200000af
 8000d6c:	200000b0 	.word	0x200000b0
 8000d70:	200000b1 	.word	0x200000b1
 8000d74:	200000b2 	.word	0x200000b2

08000d78 <GATT_Notification_CB>:
 * @param  attr_len    Length of attribute value in the notification
 * @param  attr_value  Attribute value in the notification
 * @retval None
 */
void GATT_Notification_CB(uint16_t attr_handle, uint8_t attr_len, uint8_t *attr_value)
{
 8000d78:	b580      	push	{r7, lr}
 8000d7a:	b082      	sub	sp, #8
 8000d7c:	af00      	add	r7, sp, #0
 8000d7e:	4603      	mov	r3, r0
 8000d80:	603a      	str	r2, [r7, #0]
 8000d82:	80fb      	strh	r3, [r7, #6]
 8000d84:	460b      	mov	r3, r1
 8000d86:	717b      	strb	r3, [r7, #5]
  if (attr_handle == tx_handle+1) {
 8000d88:	88fa      	ldrh	r2, [r7, #6]
 8000d8a:	4b07      	ldr	r3, [pc, #28]	; (8000da8 <GATT_Notification_CB+0x30>)
 8000d8c:	881b      	ldrh	r3, [r3, #0]
 8000d8e:	3301      	adds	r3, #1
 8000d90:	429a      	cmp	r2, r3
 8000d92:	d104      	bne.n	8000d9e <GATT_Notification_CB+0x26>
    receiveData(attr_value, attr_len);
 8000d94:	797b      	ldrb	r3, [r7, #5]
 8000d96:	4619      	mov	r1, r3
 8000d98:	6838      	ldr	r0, [r7, #0]
 8000d9a:	f7ff fedb 	bl	8000b54 <receiveData>
  }
}
 8000d9e:	bf00      	nop
 8000da0:	3708      	adds	r7, #8
 8000da2:	46bd      	mov	sp, r7
 8000da4:	bd80      	pop	{r7, pc}
 8000da6:	bf00      	nop
 8000da8:	200000b4 	.word	0x200000b4

08000dac <user_notify>:
 *         parsed.
 * @param  pData  Pointer to the ACI packet
 * @retval None
 */
void user_notify(void * pData)
{
 8000dac:	b580      	push	{r7, lr}
 8000dae:	b08c      	sub	sp, #48	; 0x30
 8000db0:	af00      	add	r7, sp, #0
 8000db2:	6078      	str	r0, [r7, #4]
  hci_uart_pckt *hci_pckt = pData;
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* obtain event packet */
  hci_event_pckt *event_pckt = (hci_event_pckt*)hci_pckt->data;
 8000db8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000dba:	3301      	adds	r3, #1
 8000dbc:	62bb      	str	r3, [r7, #40]	; 0x28

  if(hci_pckt->type != HCI_EVENT_PKT)
 8000dbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000dc0:	781b      	ldrb	r3, [r3, #0]
 8000dc2:	2b04      	cmp	r3, #4
 8000dc4:	f040 80e2 	bne.w	8000f8c <user_notify+0x1e0>
    return;

  switch(event_pckt->evt){
 8000dc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000dca:	781b      	ldrb	r3, [r3, #0]
 8000dcc:	2bff      	cmp	r3, #255	; 0xff
 8000dce:	d021      	beq.n	8000e14 <user_notify+0x68>
 8000dd0:	2bff      	cmp	r3, #255	; 0xff
 8000dd2:	f300 80e0 	bgt.w	8000f96 <user_notify+0x1ea>
 8000dd6:	2b05      	cmp	r3, #5
 8000dd8:	d002      	beq.n	8000de0 <user_notify+0x34>
 8000dda:	2b3e      	cmp	r3, #62	; 0x3e
 8000ddc:	d003      	beq.n	8000de6 <user_notify+0x3a>
 8000dde:	e0da      	b.n	8000f96 <user_notify+0x1ea>

  case EVT_DISCONN_COMPLETE:
    {
      GAP_DisconnectionComplete_CB();
 8000de0:	f7ff ff9e 	bl	8000d20 <GAP_DisconnectionComplete_CB>
    }
    break;
 8000de4:	e0d7      	b.n	8000f96 <user_notify+0x1ea>

  case EVT_LE_META_EVENT:
    {
      evt_le_meta_event *evt = (void *)event_pckt->data;
 8000de6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000de8:	3302      	adds	r3, #2
 8000dea:	613b      	str	r3, [r7, #16]

      switch(evt->subevent){
 8000dec:	693b      	ldr	r3, [r7, #16]
 8000dee:	781b      	ldrb	r3, [r3, #0]
 8000df0:	2b01      	cmp	r3, #1
 8000df2:	f040 80cd 	bne.w	8000f90 <user_notify+0x1e4>
      case EVT_LE_CONN_COMPLETE:
        {
          evt_le_connection_complete *cc = (void *)evt->data;
 8000df6:	693b      	ldr	r3, [r7, #16]
 8000df8:	3301      	adds	r3, #1
 8000dfa:	60fb      	str	r3, [r7, #12]
          GAP_ConnectionComplete_CB(cc->peer_bdaddr, cc->handle);
 8000dfc:	68fb      	ldr	r3, [r7, #12]
 8000dfe:	1d5a      	adds	r2, r3, #5
 8000e00:	68fb      	ldr	r3, [r7, #12]
 8000e02:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8000e06:	b29b      	uxth	r3, r3
 8000e08:	4619      	mov	r1, r3
 8000e0a:	4610      	mov	r0, r2
 8000e0c:	f7ff ff54 	bl	8000cb8 <GAP_ConnectionComplete_CB>
        }
        break;
 8000e10:	bf00      	nop
      }
    }
    break;
 8000e12:	e0bd      	b.n	8000f90 <user_notify+0x1e4>

  case EVT_VENDOR:
    {
      evt_blue_aci *blue_evt = (void*)event_pckt->data;
 8000e14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000e16:	3302      	adds	r3, #2
 8000e18:	627b      	str	r3, [r7, #36]	; 0x24
      switch(blue_evt->ecode){
 8000e1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e1c:	881b      	ldrh	r3, [r3, #0]
 8000e1e:	b29b      	uxth	r3, r3
 8000e20:	f6a3 4301 	subw	r3, r3, #3073	; 0xc01
 8000e24:	2b11      	cmp	r3, #17
 8000e26:	f200 80b5 	bhi.w	8000f94 <user_notify+0x1e8>
 8000e2a:	a201      	add	r2, pc, #4	; (adr r2, 8000e30 <user_notify+0x84>)
 8000e2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e30:	08000e79 	.word	0x08000e79
 8000e34:	08000f95 	.word	0x08000f95
 8000e38:	08000f95 	.word	0x08000f95
 8000e3c:	08000f95 	.word	0x08000f95
 8000e40:	08000f95 	.word	0x08000f95
 8000e44:	08000f95 	.word	0x08000f95
 8000e48:	08000f95 	.word	0x08000f95
 8000e4c:	08000f95 	.word	0x08000f95
 8000e50:	08000f95 	.word	0x08000f95
 8000e54:	08000f95 	.word	0x08000f95
 8000e58:	08000f95 	.word	0x08000f95
 8000e5c:	08000f95 	.word	0x08000f95
 8000e60:	08000f95 	.word	0x08000f95
 8000e64:	08000f95 	.word	0x08000f95
 8000e68:	08000eb9 	.word	0x08000eb9
 8000e6c:	08000f45 	.word	0x08000f45
 8000e70:	08000f95 	.word	0x08000f95
 8000e74:	08000edb 	.word	0x08000edb

      case EVT_BLUE_GATT_ATTRIBUTE_MODIFIED:
        {
          if (bnrg_expansion_board == IDB05A1) {
 8000e78:	4b48      	ldr	r3, [pc, #288]	; (8000f9c <user_notify+0x1f0>)
 8000e7a:	781b      	ldrb	r3, [r3, #0]
 8000e7c:	2b01      	cmp	r3, #1
 8000e7e:	d10d      	bne.n	8000e9c <user_notify+0xf0>
            evt_gatt_attr_modified_IDB05A1 *evt = (evt_gatt_attr_modified_IDB05A1*)blue_evt->data;
 8000e80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e82:	3302      	adds	r3, #2
 8000e84:	617b      	str	r3, [r7, #20]
            Attribute_Modified_CB(evt->attr_handle, evt->data_length, evt->att_data);
 8000e86:	697b      	ldr	r3, [r7, #20]
 8000e88:	885b      	ldrh	r3, [r3, #2]
 8000e8a:	b298      	uxth	r0, r3
 8000e8c:	697b      	ldr	r3, [r7, #20]
 8000e8e:	7919      	ldrb	r1, [r3, #4]
 8000e90:	697b      	ldr	r3, [r7, #20]
 8000e92:	3307      	adds	r3, #7
 8000e94:	461a      	mov	r2, r3
 8000e96:	f7ff fee3 	bl	8000c60 <Attribute_Modified_CB>
            evt_gatt_attr_modified_IDB04A1 *evt = (evt_gatt_attr_modified_IDB04A1*)blue_evt->data;
            Attribute_Modified_CB(evt->attr_handle, evt->data_length, evt->att_data);
          }

        }
        break;
 8000e9a:	e076      	b.n	8000f8a <user_notify+0x1de>
            evt_gatt_attr_modified_IDB04A1 *evt = (evt_gatt_attr_modified_IDB04A1*)blue_evt->data;
 8000e9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e9e:	3302      	adds	r3, #2
 8000ea0:	61bb      	str	r3, [r7, #24]
            Attribute_Modified_CB(evt->attr_handle, evt->data_length, evt->att_data);
 8000ea2:	69bb      	ldr	r3, [r7, #24]
 8000ea4:	885b      	ldrh	r3, [r3, #2]
 8000ea6:	b298      	uxth	r0, r3
 8000ea8:	69bb      	ldr	r3, [r7, #24]
 8000eaa:	7919      	ldrb	r1, [r3, #4]
 8000eac:	69bb      	ldr	r3, [r7, #24]
 8000eae:	3305      	adds	r3, #5
 8000eb0:	461a      	mov	r2, r3
 8000eb2:	f7ff fed5 	bl	8000c60 <Attribute_Modified_CB>
        break;
 8000eb6:	e068      	b.n	8000f8a <user_notify+0x1de>
      case EVT_BLUE_GATT_NOTIFICATION:
        {
          evt_gatt_attr_notification *evt = (evt_gatt_attr_notification*)blue_evt->data;
 8000eb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000eba:	3302      	adds	r3, #2
 8000ebc:	61fb      	str	r3, [r7, #28]
          GATT_Notification_CB(evt->attr_handle, evt->event_data_length - 2, evt->attr_value);
 8000ebe:	69fb      	ldr	r3, [r7, #28]
 8000ec0:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 8000ec4:	b298      	uxth	r0, r3
 8000ec6:	69fb      	ldr	r3, [r7, #28]
 8000ec8:	789b      	ldrb	r3, [r3, #2]
 8000eca:	3b02      	subs	r3, #2
 8000ecc:	b2d9      	uxtb	r1, r3
 8000ece:	69fb      	ldr	r3, [r7, #28]
 8000ed0:	3305      	adds	r3, #5
 8000ed2:	461a      	mov	r2, r3
 8000ed4:	f7ff ff50 	bl	8000d78 <GATT_Notification_CB>
        }
        break;
 8000ed8:	e057      	b.n	8000f8a <user_notify+0x1de>
      case EVT_BLUE_GATT_DISC_READ_CHAR_BY_UUID_RESP:
        if(BLE_Role == CLIENT) {
 8000eda:	4b31      	ldr	r3, [pc, #196]	; (8000fa0 <user_notify+0x1f4>)
 8000edc:	781b      	ldrb	r3, [r3, #0]
 8000ede:	2b00      	cmp	r3, #0
 8000ee0:	d150      	bne.n	8000f84 <user_notify+0x1d8>
          PRINTF("EVT_BLUE_GATT_DISC_READ_CHAR_BY_UUID_RESP\n");

          evt_gatt_disc_read_char_by_uuid_resp *resp = (void*)blue_evt->data;
 8000ee2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ee4:	3302      	adds	r3, #2
 8000ee6:	623b      	str	r3, [r7, #32]

          if (start_read_tx_char_handle && !end_read_tx_char_handle)
 8000ee8:	4b2e      	ldr	r3, [pc, #184]	; (8000fa4 <user_notify+0x1f8>)
 8000eea:	781b      	ldrb	r3, [r3, #0]
 8000eec:	b2db      	uxtb	r3, r3
 8000eee:	2b00      	cmp	r3, #0
 8000ef0:	d011      	beq.n	8000f16 <user_notify+0x16a>
 8000ef2:	4b2d      	ldr	r3, [pc, #180]	; (8000fa8 <user_notify+0x1fc>)
 8000ef4:	781b      	ldrb	r3, [r3, #0]
 8000ef6:	b2db      	uxtb	r3, r3
 8000ef8:	2b00      	cmp	r3, #0
 8000efa:	d10c      	bne.n	8000f16 <user_notify+0x16a>
          {
            tx_handle = resp->attr_handle;
 8000efc:	6a3b      	ldr	r3, [r7, #32]
 8000efe:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 8000f02:	b29a      	uxth	r2, r3
 8000f04:	4b29      	ldr	r3, [pc, #164]	; (8000fac <user_notify+0x200>)
 8000f06:	801a      	strh	r2, [r3, #0]
            printf("TX Char Handle %04X\n", tx_handle);
 8000f08:	4b28      	ldr	r3, [pc, #160]	; (8000fac <user_notify+0x200>)
 8000f0a:	881b      	ldrh	r3, [r3, #0]
 8000f0c:	4619      	mov	r1, r3
 8000f0e:	4828      	ldr	r0, [pc, #160]	; (8000fb0 <user_notify+0x204>)
 8000f10:	f004 fd2e 	bl	8005970 <iprintf>
          {
            rx_handle = resp->attr_handle;
            printf("RX Char Handle %04X\n", rx_handle);
          }
        }
        break;
 8000f14:	e036      	b.n	8000f84 <user_notify+0x1d8>
          else if (start_read_rx_char_handle && !end_read_rx_char_handle)
 8000f16:	4b27      	ldr	r3, [pc, #156]	; (8000fb4 <user_notify+0x208>)
 8000f18:	781b      	ldrb	r3, [r3, #0]
 8000f1a:	b2db      	uxtb	r3, r3
 8000f1c:	2b00      	cmp	r3, #0
 8000f1e:	d031      	beq.n	8000f84 <user_notify+0x1d8>
 8000f20:	4b25      	ldr	r3, [pc, #148]	; (8000fb8 <user_notify+0x20c>)
 8000f22:	781b      	ldrb	r3, [r3, #0]
 8000f24:	b2db      	uxtb	r3, r3
 8000f26:	2b00      	cmp	r3, #0
 8000f28:	d12c      	bne.n	8000f84 <user_notify+0x1d8>
            rx_handle = resp->attr_handle;
 8000f2a:	6a3b      	ldr	r3, [r7, #32]
 8000f2c:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 8000f30:	b29a      	uxth	r2, r3
 8000f32:	4b22      	ldr	r3, [pc, #136]	; (8000fbc <user_notify+0x210>)
 8000f34:	801a      	strh	r2, [r3, #0]
            printf("RX Char Handle %04X\n", rx_handle);
 8000f36:	4b21      	ldr	r3, [pc, #132]	; (8000fbc <user_notify+0x210>)
 8000f38:	881b      	ldrh	r3, [r3, #0]
 8000f3a:	4619      	mov	r1, r3
 8000f3c:	4820      	ldr	r0, [pc, #128]	; (8000fc0 <user_notify+0x214>)
 8000f3e:	f004 fd17 	bl	8005970 <iprintf>
        break;
 8000f42:	e01f      	b.n	8000f84 <user_notify+0x1d8>

      case EVT_BLUE_GATT_PROCEDURE_COMPLETE:
        if(BLE_Role == CLIENT) {
 8000f44:	4b16      	ldr	r3, [pc, #88]	; (8000fa0 <user_notify+0x1f4>)
 8000f46:	781b      	ldrb	r3, [r3, #0]
 8000f48:	2b00      	cmp	r3, #0
 8000f4a:	d11d      	bne.n	8000f88 <user_notify+0x1dc>
          /* Wait for gatt procedure complete event trigger related to Discovery Charac by UUID */
          //evt_gatt_procedure_complete *pr = (void*)blue_evt->data;

          if (start_read_tx_char_handle && !end_read_tx_char_handle)
 8000f4c:	4b15      	ldr	r3, [pc, #84]	; (8000fa4 <user_notify+0x1f8>)
 8000f4e:	781b      	ldrb	r3, [r3, #0]
 8000f50:	b2db      	uxtb	r3, r3
 8000f52:	2b00      	cmp	r3, #0
 8000f54:	d008      	beq.n	8000f68 <user_notify+0x1bc>
 8000f56:	4b14      	ldr	r3, [pc, #80]	; (8000fa8 <user_notify+0x1fc>)
 8000f58:	781b      	ldrb	r3, [r3, #0]
 8000f5a:	b2db      	uxtb	r3, r3
 8000f5c:	2b00      	cmp	r3, #0
 8000f5e:	d103      	bne.n	8000f68 <user_notify+0x1bc>
          {
            end_read_tx_char_handle = TRUE;
 8000f60:	4b11      	ldr	r3, [pc, #68]	; (8000fa8 <user_notify+0x1fc>)
 8000f62:	2201      	movs	r2, #1
 8000f64:	701a      	strb	r2, [r3, #0]
          else if (start_read_rx_char_handle && !end_read_rx_char_handle)
          {
            end_read_rx_char_handle = TRUE;
          }
        }
        break;
 8000f66:	e00f      	b.n	8000f88 <user_notify+0x1dc>
          else if (start_read_rx_char_handle && !end_read_rx_char_handle)
 8000f68:	4b12      	ldr	r3, [pc, #72]	; (8000fb4 <user_notify+0x208>)
 8000f6a:	781b      	ldrb	r3, [r3, #0]
 8000f6c:	b2db      	uxtb	r3, r3
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	d00a      	beq.n	8000f88 <user_notify+0x1dc>
 8000f72:	4b11      	ldr	r3, [pc, #68]	; (8000fb8 <user_notify+0x20c>)
 8000f74:	781b      	ldrb	r3, [r3, #0]
 8000f76:	b2db      	uxtb	r3, r3
 8000f78:	2b00      	cmp	r3, #0
 8000f7a:	d105      	bne.n	8000f88 <user_notify+0x1dc>
            end_read_rx_char_handle = TRUE;
 8000f7c:	4b0e      	ldr	r3, [pc, #56]	; (8000fb8 <user_notify+0x20c>)
 8000f7e:	2201      	movs	r2, #1
 8000f80:	701a      	strb	r2, [r3, #0]
        break;
 8000f82:	e001      	b.n	8000f88 <user_notify+0x1dc>
        break;
 8000f84:	bf00      	nop
 8000f86:	e005      	b.n	8000f94 <user_notify+0x1e8>
        break;
 8000f88:	bf00      	nop
      }
    }
    break;
 8000f8a:	e003      	b.n	8000f94 <user_notify+0x1e8>
    return;
 8000f8c:	bf00      	nop
 8000f8e:	e002      	b.n	8000f96 <user_notify+0x1ea>
    break;
 8000f90:	bf00      	nop
 8000f92:	e000      	b.n	8000f96 <user_notify+0x1ea>
    break;
 8000f94:	bf00      	nop
  }
}
 8000f96:	3730      	adds	r7, #48	; 0x30
 8000f98:	46bd      	mov	sp, r7
 8000f9a:	bd80      	pop	{r7, pc}
 8000f9c:	200000a4 	.word	0x200000a4
 8000fa0:	20000001 	.word	0x20000001
 8000fa4:	200000af 	.word	0x200000af
 8000fa8:	200000b1 	.word	0x200000b1
 8000fac:	200000b4 	.word	0x200000b4
 8000fb0:	080066e8 	.word	0x080066e8
 8000fb4:	200000b0 	.word	0x200000b0
 8000fb8:	200000b2 	.word	0x200000b2
 8000fbc:	200000b6 	.word	0x200000b6
 8000fc0:	08006700 	.word	0x08006700

08000fc4 <HCI_TL_SPI_Init>:
 *
 * @param  void* Pointer to configuration struct
 * @retval int32_t Status
 */
int32_t HCI_TL_SPI_Init(void* pConf)
{
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	b088      	sub	sp, #32
 8000fc8:	af00      	add	r7, sp, #0
 8000fca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;

  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fcc:	2300      	movs	r3, #0
 8000fce:	60bb      	str	r3, [r7, #8]
 8000fd0:	4b1e      	ldr	r3, [pc, #120]	; (800104c <HCI_TL_SPI_Init+0x88>)
 8000fd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fd4:	4a1d      	ldr	r2, [pc, #116]	; (800104c <HCI_TL_SPI_Init+0x88>)
 8000fd6:	f043 0301 	orr.w	r3, r3, #1
 8000fda:	6313      	str	r3, [r2, #48]	; 0x30
 8000fdc:	4b1b      	ldr	r3, [pc, #108]	; (800104c <HCI_TL_SPI_Init+0x88>)
 8000fde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fe0:	f003 0301 	and.w	r3, r3, #1
 8000fe4:	60bb      	str	r3, [r7, #8]
 8000fe6:	68bb      	ldr	r3, [r7, #8]

  /* Configure EXTI Line */
  GPIO_InitStruct.Pin = HCI_TL_SPI_EXTI_PIN;
 8000fe8:	2301      	movs	r3, #1
 8000fea:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000fec:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000ff0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ff2:	2300      	movs	r3, #0
 8000ff4:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(HCI_TL_SPI_EXTI_PORT, &GPIO_InitStruct);
 8000ff6:	f107 030c 	add.w	r3, r7, #12
 8000ffa:	4619      	mov	r1, r3
 8000ffc:	4814      	ldr	r0, [pc, #80]	; (8001050 <HCI_TL_SPI_Init+0x8c>)
 8000ffe:	f001 f8f1 	bl	80021e4 <HAL_GPIO_Init>

  /* Configure RESET Line */
  GPIO_InitStruct.Pin =  HCI_TL_RST_PIN ;
 8001002:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001006:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001008:	2301      	movs	r3, #1
 800100a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800100c:	2300      	movs	r3, #0
 800100e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001010:	2300      	movs	r3, #0
 8001012:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(HCI_TL_RST_PORT, &GPIO_InitStruct);
 8001014:	f107 030c 	add.w	r3, r7, #12
 8001018:	4619      	mov	r1, r3
 800101a:	480d      	ldr	r0, [pc, #52]	; (8001050 <HCI_TL_SPI_Init+0x8c>)
 800101c:	f001 f8e2 	bl	80021e4 <HAL_GPIO_Init>

  /* Configure CS */
  GPIO_InitStruct.Pin = HCI_TL_SPI_CS_PIN ;
 8001020:	2302      	movs	r3, #2
 8001022:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001024:	2301      	movs	r3, #1
 8001026:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001028:	2300      	movs	r3, #0
 800102a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800102c:	2300      	movs	r3, #0
 800102e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(HCI_TL_SPI_CS_PORT, &GPIO_InitStruct);
 8001030:	f107 030c 	add.w	r3, r7, #12
 8001034:	4619      	mov	r1, r3
 8001036:	4806      	ldr	r0, [pc, #24]	; (8001050 <HCI_TL_SPI_Init+0x8c>)
 8001038:	f001 f8d4 	bl	80021e4 <HAL_GPIO_Init>

  return BSP_SPI1_Init();
 800103c:	f000 fae0 	bl	8001600 <BSP_SPI1_Init>
 8001040:	4603      	mov	r3, r0
}
 8001042:	4618      	mov	r0, r3
 8001044:	3720      	adds	r7, #32
 8001046:	46bd      	mov	sp, r7
 8001048:	bd80      	pop	{r7, pc}
 800104a:	bf00      	nop
 800104c:	40023800 	.word	0x40023800
 8001050:	40020000 	.word	0x40020000

08001054 <HCI_TL_SPI_DeInit>:
 *
 * @param  None
 * @retval int32_t 0
 */
int32_t HCI_TL_SPI_DeInit(void)
{
 8001054:	b580      	push	{r7, lr}
 8001056:	af00      	add	r7, sp, #0
  HAL_GPIO_DeInit(HCI_TL_SPI_EXTI_PORT, HCI_TL_SPI_EXTI_PIN);
 8001058:	2101      	movs	r1, #1
 800105a:	4807      	ldr	r0, [pc, #28]	; (8001078 <HCI_TL_SPI_DeInit+0x24>)
 800105c:	f001 fa46 	bl	80024ec <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN);
 8001060:	2102      	movs	r1, #2
 8001062:	4805      	ldr	r0, [pc, #20]	; (8001078 <HCI_TL_SPI_DeInit+0x24>)
 8001064:	f001 fa42 	bl	80024ec <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(HCI_TL_RST_PORT, HCI_TL_RST_PIN);
 8001068:	f44f 7180 	mov.w	r1, #256	; 0x100
 800106c:	4802      	ldr	r0, [pc, #8]	; (8001078 <HCI_TL_SPI_DeInit+0x24>)
 800106e:	f001 fa3d 	bl	80024ec <HAL_GPIO_DeInit>
  return 0;
 8001072:	2300      	movs	r3, #0
}
 8001074:	4618      	mov	r0, r3
 8001076:	bd80      	pop	{r7, pc}
 8001078:	40020000 	.word	0x40020000

0800107c <HCI_TL_SPI_Reset>:
 *
 * @param  None
 * @retval int32_t 0
 */
int32_t HCI_TL_SPI_Reset(void)
{
 800107c:	b580      	push	{r7, lr}
 800107e:	af00      	add	r7, sp, #0
  // Deselect CS PIN for BlueNRG to avoid spurious commands
  HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_SET);
 8001080:	2201      	movs	r2, #1
 8001082:	2102      	movs	r1, #2
 8001084:	480b      	ldr	r0, [pc, #44]	; (80010b4 <HCI_TL_SPI_Reset+0x38>)
 8001086:	f001 fb2d 	bl	80026e4 <HAL_GPIO_WritePin>

  HAL_GPIO_WritePin(HCI_TL_RST_PORT, HCI_TL_RST_PIN, GPIO_PIN_RESET);
 800108a:	2200      	movs	r2, #0
 800108c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001090:	4808      	ldr	r0, [pc, #32]	; (80010b4 <HCI_TL_SPI_Reset+0x38>)
 8001092:	f001 fb27 	bl	80026e4 <HAL_GPIO_WritePin>
  HAL_Delay(5);
 8001096:	2005      	movs	r0, #5
 8001098:	f000 ff1c 	bl	8001ed4 <HAL_Delay>
  HAL_GPIO_WritePin(HCI_TL_RST_PORT, HCI_TL_RST_PIN, GPIO_PIN_SET);
 800109c:	2201      	movs	r2, #1
 800109e:	f44f 7180 	mov.w	r1, #256	; 0x100
 80010a2:	4804      	ldr	r0, [pc, #16]	; (80010b4 <HCI_TL_SPI_Reset+0x38>)
 80010a4:	f001 fb1e 	bl	80026e4 <HAL_GPIO_WritePin>
  HAL_Delay(5);
 80010a8:	2005      	movs	r0, #5
 80010aa:	f000 ff13 	bl	8001ed4 <HAL_Delay>
  return 0;
 80010ae:	2300      	movs	r3, #0
}
 80010b0:	4618      	mov	r0, r3
 80010b2:	bd80      	pop	{r7, pc}
 80010b4:	40020000 	.word	0x40020000

080010b8 <HCI_TL_SPI_Receive>:
 * @param  buffer : Buffer where data from SPI are stored
 * @param  size   : Buffer size
 * @retval int32_t: Number of read bytes
 */
int32_t HCI_TL_SPI_Receive(uint8_t* buffer, uint16_t size)
{
 80010b8:	b580      	push	{r7, lr}
 80010ba:	b088      	sub	sp, #32
 80010bc:	af00      	add	r7, sp, #0
 80010be:	6078      	str	r0, [r7, #4]
 80010c0:	460b      	mov	r3, r1
 80010c2:	807b      	strh	r3, [r7, #2]
  uint16_t byte_count;
  uint8_t len = 0;
 80010c4:	2300      	movs	r3, #0
 80010c6:	777b      	strb	r3, [r7, #29]
  uint8_t char_ff = 0xff;
 80010c8:	23ff      	movs	r3, #255	; 0xff
 80010ca:	773b      	strb	r3, [r7, #28]
  volatile uint8_t read_char;

  uint8_t header_master[HEADER_SIZE] = {0x0b, 0x00, 0x00, 0x00, 0x00};
 80010cc:	4a25      	ldr	r2, [pc, #148]	; (8001164 <HCI_TL_SPI_Receive+0xac>)
 80010ce:	f107 0314 	add.w	r3, r7, #20
 80010d2:	e892 0003 	ldmia.w	r2, {r0, r1}
 80010d6:	6018      	str	r0, [r3, #0]
 80010d8:	3304      	adds	r3, #4
 80010da:	7019      	strb	r1, [r3, #0]
  uint8_t header_slave[HEADER_SIZE];

  /* CS reset */
  HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_RESET);
 80010dc:	2200      	movs	r2, #0
 80010de:	2102      	movs	r1, #2
 80010e0:	4821      	ldr	r0, [pc, #132]	; (8001168 <HCI_TL_SPI_Receive+0xb0>)
 80010e2:	f001 faff 	bl	80026e4 <HAL_GPIO_WritePin>

  /* Read the header */
  BSP_SPI1_SendRecv(header_master, header_slave, HEADER_SIZE);
 80010e6:	f107 010c 	add.w	r1, r7, #12
 80010ea:	f107 0314 	add.w	r3, r7, #20
 80010ee:	2205      	movs	r2, #5
 80010f0:	4618      	mov	r0, r3
 80010f2:	f000 fab5 	bl	8001660 <BSP_SPI1_SendRecv>

  if(header_slave[0] == 0x02)
 80010f6:	7b3b      	ldrb	r3, [r7, #12]
 80010f8:	2b02      	cmp	r3, #2
 80010fa:	d129      	bne.n	8001150 <HCI_TL_SPI_Receive+0x98>
  {
    /* device is ready */
    byte_count = (header_slave[4] << 8)| header_slave[3];
 80010fc:	7c3b      	ldrb	r3, [r7, #16]
 80010fe:	021b      	lsls	r3, r3, #8
 8001100:	b21a      	sxth	r2, r3
 8001102:	7bfb      	ldrb	r3, [r7, #15]
 8001104:	b21b      	sxth	r3, r3
 8001106:	4313      	orrs	r3, r2
 8001108:	b21b      	sxth	r3, r3
 800110a:	83fb      	strh	r3, [r7, #30]

    if(byte_count > 0)
 800110c:	8bfb      	ldrh	r3, [r7, #30]
 800110e:	2b00      	cmp	r3, #0
 8001110:	d01e      	beq.n	8001150 <HCI_TL_SPI_Receive+0x98>
    {
      /* avoid to read more data than the size of the buffer */
      if (byte_count > size){
 8001112:	8bfa      	ldrh	r2, [r7, #30]
 8001114:	887b      	ldrh	r3, [r7, #2]
 8001116:	429a      	cmp	r2, r3
 8001118:	d901      	bls.n	800111e <HCI_TL_SPI_Receive+0x66>
        byte_count = size;
 800111a:	887b      	ldrh	r3, [r7, #2]
 800111c:	83fb      	strh	r3, [r7, #30]
      }

      for(len = 0; len < byte_count; len++)
 800111e:	2300      	movs	r3, #0
 8001120:	777b      	strb	r3, [r7, #29]
 8001122:	e010      	b.n	8001146 <HCI_TL_SPI_Receive+0x8e>
      {
        BSP_SPI1_SendRecv(&char_ff, (uint8_t*)&read_char, 1);
 8001124:	f107 011b 	add.w	r1, r7, #27
 8001128:	f107 031c 	add.w	r3, r7, #28
 800112c:	2201      	movs	r2, #1
 800112e:	4618      	mov	r0, r3
 8001130:	f000 fa96 	bl	8001660 <BSP_SPI1_SendRecv>
        buffer[len] = read_char;
 8001134:	7f7b      	ldrb	r3, [r7, #29]
 8001136:	687a      	ldr	r2, [r7, #4]
 8001138:	4413      	add	r3, r2
 800113a:	7efa      	ldrb	r2, [r7, #27]
 800113c:	b2d2      	uxtb	r2, r2
 800113e:	701a      	strb	r2, [r3, #0]
      for(len = 0; len < byte_count; len++)
 8001140:	7f7b      	ldrb	r3, [r7, #29]
 8001142:	3301      	adds	r3, #1
 8001144:	777b      	strb	r3, [r7, #29]
 8001146:	7f7b      	ldrb	r3, [r7, #29]
 8001148:	b29b      	uxth	r3, r3
 800114a:	8bfa      	ldrh	r2, [r7, #30]
 800114c:	429a      	cmp	r2, r3
 800114e:	d8e9      	bhi.n	8001124 <HCI_TL_SPI_Receive+0x6c>
      }
    }
  }
  /* Release CS line */
  HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_SET);
 8001150:	2201      	movs	r2, #1
 8001152:	2102      	movs	r1, #2
 8001154:	4804      	ldr	r0, [pc, #16]	; (8001168 <HCI_TL_SPI_Receive+0xb0>)
 8001156:	f001 fac5 	bl	80026e4 <HAL_GPIO_WritePin>
    }
    PRINT_CSV("\n");
  }
#endif

  return len;
 800115a:	7f7b      	ldrb	r3, [r7, #29]
}
 800115c:	4618      	mov	r0, r3
 800115e:	3720      	adds	r7, #32
 8001160:	46bd      	mov	sp, r7
 8001162:	bd80      	pop	{r7, pc}
 8001164:	08006718 	.word	0x08006718
 8001168:	40020000 	.word	0x40020000

0800116c <HCI_TL_SPI_Send>:
 * @param  buffer : data buffer to be written
 * @param  size   : size of first data buffer to be written
 * @retval int32_t: Number of read bytes
 */
int32_t HCI_TL_SPI_Send(uint8_t* buffer, uint16_t size)
{
 800116c:	b580      	push	{r7, lr}
 800116e:	b088      	sub	sp, #32
 8001170:	af00      	add	r7, sp, #0
 8001172:	6078      	str	r0, [r7, #4]
 8001174:	460b      	mov	r3, r1
 8001176:	807b      	strh	r3, [r7, #2]
  int32_t result;

  uint8_t header_master[HEADER_SIZE] = {0x0a, 0x00, 0x00, 0x00, 0x00};
 8001178:	4a23      	ldr	r2, [pc, #140]	; (8001208 <HCI_TL_SPI_Send+0x9c>)
 800117a:	f107 0310 	add.w	r3, r7, #16
 800117e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001182:	6018      	str	r0, [r3, #0]
 8001184:	3304      	adds	r3, #4
 8001186:	7019      	strb	r1, [r3, #0]
  uint8_t header_slave[HEADER_SIZE];

  static uint8_t read_char_buf[MAX_BUFFER_SIZE];
  uint32_t tickstart = HAL_GetTick();
 8001188:	f000 fe98 	bl	8001ebc <HAL_GetTick>
 800118c:	61b8      	str	r0, [r7, #24]

  do
  {
    result = 0;
 800118e:	2300      	movs	r3, #0
 8001190:	61fb      	str	r3, [r7, #28]

    /* CS reset */
    HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_RESET);
 8001192:	2200      	movs	r2, #0
 8001194:	2102      	movs	r1, #2
 8001196:	481d      	ldr	r0, [pc, #116]	; (800120c <HCI_TL_SPI_Send+0xa0>)
 8001198:	f001 faa4 	bl	80026e4 <HAL_GPIO_WritePin>

    /* Read header */
    BSP_SPI1_SendRecv(header_master, header_slave, HEADER_SIZE);
 800119c:	f107 0108 	add.w	r1, r7, #8
 80011a0:	f107 0310 	add.w	r3, r7, #16
 80011a4:	2205      	movs	r2, #5
 80011a6:	4618      	mov	r0, r3
 80011a8:	f000 fa5a 	bl	8001660 <BSP_SPI1_SendRecv>

    if(header_slave[0] == 0x02)
 80011ac:	7a3b      	ldrb	r3, [r7, #8]
 80011ae:	2b02      	cmp	r3, #2
 80011b0:	d10f      	bne.n	80011d2 <HCI_TL_SPI_Send+0x66>
    {
      /* SPI is ready */
      if(header_slave[1] >= size)
 80011b2:	7a7b      	ldrb	r3, [r7, #9]
 80011b4:	b29b      	uxth	r3, r3
 80011b6:	887a      	ldrh	r2, [r7, #2]
 80011b8:	429a      	cmp	r2, r3
 80011ba:	d806      	bhi.n	80011ca <HCI_TL_SPI_Send+0x5e>
      {
        BSP_SPI1_SendRecv(buffer, read_char_buf, size);
 80011bc:	887b      	ldrh	r3, [r7, #2]
 80011be:	461a      	mov	r2, r3
 80011c0:	4913      	ldr	r1, [pc, #76]	; (8001210 <HCI_TL_SPI_Send+0xa4>)
 80011c2:	6878      	ldr	r0, [r7, #4]
 80011c4:	f000 fa4c 	bl	8001660 <BSP_SPI1_SendRecv>
 80011c8:	e006      	b.n	80011d8 <HCI_TL_SPI_Send+0x6c>
      }
      else
      {
        /* Buffer is too small */
        result = -2;
 80011ca:	f06f 0301 	mvn.w	r3, #1
 80011ce:	61fb      	str	r3, [r7, #28]
 80011d0:	e002      	b.n	80011d8 <HCI_TL_SPI_Send+0x6c>
      }
    } else {
      /* SPI is not ready */
      result = -1;
 80011d2:	f04f 33ff 	mov.w	r3, #4294967295
 80011d6:	61fb      	str	r3, [r7, #28]
    }

    /* Release CS line */
    HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_SET);
 80011d8:	2201      	movs	r2, #1
 80011da:	2102      	movs	r1, #2
 80011dc:	480b      	ldr	r0, [pc, #44]	; (800120c <HCI_TL_SPI_Send+0xa0>)
 80011de:	f001 fa81 	bl	80026e4 <HAL_GPIO_WritePin>

    if((HAL_GetTick() - tickstart) > TIMEOUT_DURATION)
 80011e2:	f000 fe6b 	bl	8001ebc <HAL_GetTick>
 80011e6:	4602      	mov	r2, r0
 80011e8:	69bb      	ldr	r3, [r7, #24]
 80011ea:	1ad3      	subs	r3, r2, r3
 80011ec:	2b0f      	cmp	r3, #15
 80011ee:	d903      	bls.n	80011f8 <HCI_TL_SPI_Send+0x8c>
    {
      result = -3;
 80011f0:	f06f 0302 	mvn.w	r3, #2
 80011f4:	61fb      	str	r3, [r7, #28]
      break;
 80011f6:	e002      	b.n	80011fe <HCI_TL_SPI_Send+0x92>
    }
  } while(result < 0);
 80011f8:	69fb      	ldr	r3, [r7, #28]
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	dbc7      	blt.n	800118e <HCI_TL_SPI_Send+0x22>

  return result;
 80011fe:	69fb      	ldr	r3, [r7, #28]
}
 8001200:	4618      	mov	r0, r3
 8001202:	3720      	adds	r7, #32
 8001204:	46bd      	mov	sp, r7
 8001206:	bd80      	pop	{r7, pc}
 8001208:	08006720 	.word	0x08006720
 800120c:	40020000 	.word	0x40020000
 8001210:	200000c8 	.word	0x200000c8

08001214 <IsDataAvailable>:
 *
 * @param  None
 * @retval int32_t: 1 if data are present, 0 otherwise
 */
static int32_t IsDataAvailable(void)
{
 8001214:	b580      	push	{r7, lr}
 8001216:	af00      	add	r7, sp, #0
  return (HAL_GPIO_ReadPin(HCI_TL_SPI_EXTI_PORT, HCI_TL_SPI_EXTI_PIN) == GPIO_PIN_SET);
 8001218:	2101      	movs	r1, #1
 800121a:	4805      	ldr	r0, [pc, #20]	; (8001230 <IsDataAvailable+0x1c>)
 800121c:	f001 fa4a 	bl	80026b4 <HAL_GPIO_ReadPin>
 8001220:	4603      	mov	r3, r0
 8001222:	2b01      	cmp	r3, #1
 8001224:	bf0c      	ite	eq
 8001226:	2301      	moveq	r3, #1
 8001228:	2300      	movne	r3, #0
 800122a:	b2db      	uxtb	r3, r3
}
 800122c:	4618      	mov	r0, r3
 800122e:	bd80      	pop	{r7, pc}
 8001230:	40020000 	.word	0x40020000

08001234 <hci_tl_lowlevel_init>:
 *
 * @param  None
 * @retval None
 */
void hci_tl_lowlevel_init(void)
{
 8001234:	b580      	push	{r7, lr}
 8001236:	b088      	sub	sp, #32
 8001238:	af00      	add	r7, sp, #0

  /* USER CODE END hci_tl_lowlevel_init 1 */
  tHciIO fops;

  /* Register IO bus services */
  fops.Init    = HCI_TL_SPI_Init;
 800123a:	4b13      	ldr	r3, [pc, #76]	; (8001288 <hci_tl_lowlevel_init+0x54>)
 800123c:	607b      	str	r3, [r7, #4]
  fops.DeInit  = HCI_TL_SPI_DeInit;
 800123e:	4b13      	ldr	r3, [pc, #76]	; (800128c <hci_tl_lowlevel_init+0x58>)
 8001240:	60bb      	str	r3, [r7, #8]
  fops.Send    = HCI_TL_SPI_Send;
 8001242:	4b13      	ldr	r3, [pc, #76]	; (8001290 <hci_tl_lowlevel_init+0x5c>)
 8001244:	617b      	str	r3, [r7, #20]
  fops.Receive = HCI_TL_SPI_Receive;
 8001246:	4b13      	ldr	r3, [pc, #76]	; (8001294 <hci_tl_lowlevel_init+0x60>)
 8001248:	613b      	str	r3, [r7, #16]
  fops.Reset   = HCI_TL_SPI_Reset;
 800124a:	4b13      	ldr	r3, [pc, #76]	; (8001298 <hci_tl_lowlevel_init+0x64>)
 800124c:	60fb      	str	r3, [r7, #12]
  fops.GetTick = BSP_GetTick;
 800124e:	4b13      	ldr	r3, [pc, #76]	; (800129c <hci_tl_lowlevel_init+0x68>)
 8001250:	61fb      	str	r3, [r7, #28]

  hci_register_io_bus (&fops);
 8001252:	1d3b      	adds	r3, r7, #4
 8001254:	4618      	mov	r0, r3
 8001256:	f003 fdd3 	bl	8004e00 <hci_register_io_bus>
  /* USER CODE BEGIN hci_tl_lowlevel_init 2 */

  /* USER CODE END hci_tl_lowlevel_init 2 */

  /* Register event irq handler */
  HAL_EXTI_GetHandle(&hexti0, EXTI_LINE_0);
 800125a:	f04f 61c0 	mov.w	r1, #100663296	; 0x6000000
 800125e:	4810      	ldr	r0, [pc, #64]	; (80012a0 <hci_tl_lowlevel_init+0x6c>)
 8001260:	f000 ff87 	bl	8002172 <HAL_EXTI_GetHandle>
  HAL_EXTI_RegisterCallback(&hexti0, HAL_EXTI_COMMON_CB_ID, hci_tl_lowlevel_isr);
 8001264:	4a0f      	ldr	r2, [pc, #60]	; (80012a4 <hci_tl_lowlevel_init+0x70>)
 8001266:	2100      	movs	r1, #0
 8001268:	480d      	ldr	r0, [pc, #52]	; (80012a0 <hci_tl_lowlevel_init+0x6c>)
 800126a:	f000 ff68 	bl	800213e <HAL_EXTI_RegisterCallback>
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 800126e:	2200      	movs	r2, #0
 8001270:	2100      	movs	r1, #0
 8001272:	2006      	movs	r0, #6
 8001274:	f000 ff2d 	bl	80020d2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8001278:	2006      	movs	r0, #6
 800127a:	f000 ff46 	bl	800210a <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN hci_tl_lowlevel_init 3 */

  /* USER CODE END hci_tl_lowlevel_init 3 */

}
 800127e:	bf00      	nop
 8001280:	3720      	adds	r7, #32
 8001282:	46bd      	mov	sp, r7
 8001284:	bd80      	pop	{r7, pc}
 8001286:	bf00      	nop
 8001288:	08000fc5 	.word	0x08000fc5
 800128c:	08001055 	.word	0x08001055
 8001290:	0800116d 	.word	0x0800116d
 8001294:	080010b9 	.word	0x080010b9
 8001298:	0800107d 	.word	0x0800107d
 800129c:	080016a1 	.word	0x080016a1
 80012a0:	200000c0 	.word	0x200000c0
 80012a4:	080012a9 	.word	0x080012a9

080012a8 <hci_tl_lowlevel_isr>:
  *
  * @param  None
  * @retval None
  */
void hci_tl_lowlevel_isr(void)
{
 80012a8:	b580      	push	{r7, lr}
 80012aa:	af00      	add	r7, sp, #0
  /* Call hci_notify_asynch_evt() */
  while(IsDataAvailable())
 80012ac:	e005      	b.n	80012ba <hci_tl_lowlevel_isr+0x12>
  {
    if (hci_notify_asynch_evt(NULL))
 80012ae:	2000      	movs	r0, #0
 80012b0:	f003 ff0c 	bl	80050cc <hci_notify_asynch_evt>
 80012b4:	4603      	mov	r3, r0
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d105      	bne.n	80012c6 <hci_tl_lowlevel_isr+0x1e>
  while(IsDataAvailable())
 80012ba:	f7ff ffab 	bl	8001214 <IsDataAvailable>
 80012be:	4603      	mov	r3, r0
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d1f4      	bne.n	80012ae <hci_tl_lowlevel_isr+0x6>
 80012c4:	e000      	b.n	80012c8 <hci_tl_lowlevel_isr+0x20>
    {
      return;
 80012c6:	bf00      	nop
  }

  /* USER CODE BEGIN hci_tl_lowlevel_isr */

  /* USER CODE END hci_tl_lowlevel_isr */
}
 80012c8:	bd80      	pop	{r7, pc}

080012ca <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80012ca:	b580      	push	{r7, lr}
 80012cc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80012ce:	f000 fd8f 	bl	8001df0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80012d2:	f000 f807 	bl	80012e4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80012d6:	f000 f871 	bl	80013bc <MX_GPIO_Init>
  MX_BlueNRG_MS_Init();
 80012da:	f7ff f953 	bl	8000584 <MX_BlueNRG_MS_Init>
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */

  MX_BlueNRG_MS_Process();
 80012de:	f7ff fa5b 	bl	8000798 <MX_BlueNRG_MS_Process>
 80012e2:	e7fc      	b.n	80012de <main+0x14>

080012e4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80012e4:	b580      	push	{r7, lr}
 80012e6:	b094      	sub	sp, #80	; 0x50
 80012e8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80012ea:	f107 0320 	add.w	r3, r7, #32
 80012ee:	2230      	movs	r2, #48	; 0x30
 80012f0:	2100      	movs	r1, #0
 80012f2:	4618      	mov	r0, r3
 80012f4:	f004 fa53 	bl	800579e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80012f8:	f107 030c 	add.w	r3, r7, #12
 80012fc:	2200      	movs	r2, #0
 80012fe:	601a      	str	r2, [r3, #0]
 8001300:	605a      	str	r2, [r3, #4]
 8001302:	609a      	str	r2, [r3, #8]
 8001304:	60da      	str	r2, [r3, #12]
 8001306:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001308:	2300      	movs	r3, #0
 800130a:	60bb      	str	r3, [r7, #8]
 800130c:	4b29      	ldr	r3, [pc, #164]	; (80013b4 <SystemClock_Config+0xd0>)
 800130e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001310:	4a28      	ldr	r2, [pc, #160]	; (80013b4 <SystemClock_Config+0xd0>)
 8001312:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001316:	6413      	str	r3, [r2, #64]	; 0x40
 8001318:	4b26      	ldr	r3, [pc, #152]	; (80013b4 <SystemClock_Config+0xd0>)
 800131a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800131c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001320:	60bb      	str	r3, [r7, #8]
 8001322:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8001324:	2300      	movs	r3, #0
 8001326:	607b      	str	r3, [r7, #4]
 8001328:	4b23      	ldr	r3, [pc, #140]	; (80013b8 <SystemClock_Config+0xd4>)
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001330:	4a21      	ldr	r2, [pc, #132]	; (80013b8 <SystemClock_Config+0xd4>)
 8001332:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001336:	6013      	str	r3, [r2, #0]
 8001338:	4b1f      	ldr	r3, [pc, #124]	; (80013b8 <SystemClock_Config+0xd4>)
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001340:	607b      	str	r3, [r7, #4]
 8001342:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001344:	2302      	movs	r3, #2
 8001346:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001348:	2301      	movs	r3, #1
 800134a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800134c:	2310      	movs	r3, #16
 800134e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001350:	2302      	movs	r3, #2
 8001352:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001354:	2300      	movs	r3, #0
 8001356:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8001358:	2310      	movs	r3, #16
 800135a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 800135c:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8001360:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8001362:	2304      	movs	r3, #4
 8001364:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001366:	2307      	movs	r3, #7
 8001368:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800136a:	f107 0320 	add.w	r3, r7, #32
 800136e:	4618      	mov	r0, r3
 8001370:	f001 f9ec 	bl	800274c <HAL_RCC_OscConfig>
 8001374:	4603      	mov	r3, r0
 8001376:	2b00      	cmp	r3, #0
 8001378:	d001      	beq.n	800137e <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800137a:	f000 f8d5 	bl	8001528 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800137e:	230f      	movs	r3, #15
 8001380:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001382:	2302      	movs	r3, #2
 8001384:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001386:	2300      	movs	r3, #0
 8001388:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800138a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800138e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001390:	2300      	movs	r3, #0
 8001392:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001394:	f107 030c 	add.w	r3, r7, #12
 8001398:	2102      	movs	r1, #2
 800139a:	4618      	mov	r0, r3
 800139c:	f001 fc4e 	bl	8002c3c <HAL_RCC_ClockConfig>
 80013a0:	4603      	mov	r3, r0
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d001      	beq.n	80013aa <SystemClock_Config+0xc6>
  {
    Error_Handler();
 80013a6:	f000 f8bf 	bl	8001528 <Error_Handler>
  }
}
 80013aa:	bf00      	nop
 80013ac:	3750      	adds	r7, #80	; 0x50
 80013ae:	46bd      	mov	sp, r7
 80013b0:	bd80      	pop	{r7, pc}
 80013b2:	bf00      	nop
 80013b4:	40023800 	.word	0x40023800
 80013b8:	40007000 	.word	0x40007000

080013bc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80013bc:	b580      	push	{r7, lr}
 80013be:	b08a      	sub	sp, #40	; 0x28
 80013c0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013c2:	f107 0314 	add.w	r3, r7, #20
 80013c6:	2200      	movs	r2, #0
 80013c8:	601a      	str	r2, [r3, #0]
 80013ca:	605a      	str	r2, [r3, #4]
 80013cc:	609a      	str	r2, [r3, #8]
 80013ce:	60da      	str	r2, [r3, #12]
 80013d0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80013d2:	2300      	movs	r3, #0
 80013d4:	613b      	str	r3, [r7, #16]
 80013d6:	4b50      	ldr	r3, [pc, #320]	; (8001518 <MX_GPIO_Init+0x15c>)
 80013d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013da:	4a4f      	ldr	r2, [pc, #316]	; (8001518 <MX_GPIO_Init+0x15c>)
 80013dc:	f043 0304 	orr.w	r3, r3, #4
 80013e0:	6313      	str	r3, [r2, #48]	; 0x30
 80013e2:	4b4d      	ldr	r3, [pc, #308]	; (8001518 <MX_GPIO_Init+0x15c>)
 80013e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013e6:	f003 0304 	and.w	r3, r3, #4
 80013ea:	613b      	str	r3, [r7, #16]
 80013ec:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80013ee:	2300      	movs	r3, #0
 80013f0:	60fb      	str	r3, [r7, #12]
 80013f2:	4b49      	ldr	r3, [pc, #292]	; (8001518 <MX_GPIO_Init+0x15c>)
 80013f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013f6:	4a48      	ldr	r2, [pc, #288]	; (8001518 <MX_GPIO_Init+0x15c>)
 80013f8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80013fc:	6313      	str	r3, [r2, #48]	; 0x30
 80013fe:	4b46      	ldr	r3, [pc, #280]	; (8001518 <MX_GPIO_Init+0x15c>)
 8001400:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001402:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001406:	60fb      	str	r3, [r7, #12]
 8001408:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800140a:	2300      	movs	r3, #0
 800140c:	60bb      	str	r3, [r7, #8]
 800140e:	4b42      	ldr	r3, [pc, #264]	; (8001518 <MX_GPIO_Init+0x15c>)
 8001410:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001412:	4a41      	ldr	r2, [pc, #260]	; (8001518 <MX_GPIO_Init+0x15c>)
 8001414:	f043 0301 	orr.w	r3, r3, #1
 8001418:	6313      	str	r3, [r2, #48]	; 0x30
 800141a:	4b3f      	ldr	r3, [pc, #252]	; (8001518 <MX_GPIO_Init+0x15c>)
 800141c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800141e:	f003 0301 	and.w	r3, r3, #1
 8001422:	60bb      	str	r3, [r7, #8]
 8001424:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001426:	2300      	movs	r3, #0
 8001428:	607b      	str	r3, [r7, #4]
 800142a:	4b3b      	ldr	r3, [pc, #236]	; (8001518 <MX_GPIO_Init+0x15c>)
 800142c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800142e:	4a3a      	ldr	r2, [pc, #232]	; (8001518 <MX_GPIO_Init+0x15c>)
 8001430:	f043 0302 	orr.w	r3, r3, #2
 8001434:	6313      	str	r3, [r2, #48]	; 0x30
 8001436:	4b38      	ldr	r3, [pc, #224]	; (8001518 <MX_GPIO_Init+0x15c>)
 8001438:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800143a:	f003 0302 	and.w	r3, r3, #2
 800143e:	607b      	str	r3, [r7, #4]
 8001440:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1|GPIO_PIN_8|nIRQ_IN_Pin, GPIO_PIN_RESET);
 8001442:	2200      	movs	r2, #0
 8001444:	f240 3102 	movw	r1, #770	; 0x302
 8001448:	4834      	ldr	r0, [pc, #208]	; (800151c <MX_GPIO_Init+0x160>)
 800144a:	f001 f94b 	bl	80026e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED2_Pin|LED3_Pin|LED4_Pin|nSPI_SS_Pin, GPIO_PIN_RESET);
 800144e:	2200      	movs	r2, #0
 8001450:	f44f 618e 	mov.w	r1, #1136	; 0x470
 8001454:	4832      	ldr	r0, [pc, #200]	; (8001520 <MX_GPIO_Init+0x164>)
 8001456:	f001 f945 	bl	80026e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SSI_0_GPIO_Port, SSI_0_Pin, GPIO_PIN_RESET);
 800145a:	2200      	movs	r2, #0
 800145c:	2180      	movs	r1, #128	; 0x80
 800145e:	4831      	ldr	r0, [pc, #196]	; (8001524 <MX_GPIO_Init+0x168>)
 8001460:	f001 f940 	bl	80026e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001464:	2301      	movs	r3, #1
 8001466:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001468:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800146c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800146e:	2300      	movs	r3, #0
 8001470:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001472:	f107 0314 	add.w	r3, r7, #20
 8001476:	4619      	mov	r1, r3
 8001478:	4828      	ldr	r0, [pc, #160]	; (800151c <MX_GPIO_Init+0x160>)
 800147a:	f000 feb3 	bl	80021e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA8 nIRQ_IN_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_8|nIRQ_IN_Pin;
 800147e:	f240 3302 	movw	r3, #770	; 0x302
 8001482:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001484:	2301      	movs	r3, #1
 8001486:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001488:	2300      	movs	r3, #0
 800148a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800148c:	2300      	movs	r3, #0
 800148e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001490:	f107 0314 	add.w	r3, r7, #20
 8001494:	4619      	mov	r1, r3
 8001496:	4821      	ldr	r0, [pc, #132]	; (800151c <MX_GPIO_Init+0x160>)
 8001498:	f000 fea4 	bl	80021e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED2_Pin LED3_Pin LED4_Pin nSPI_SS_Pin */
  GPIO_InitStruct.Pin = LED2_Pin|LED3_Pin|LED4_Pin|nSPI_SS_Pin;
 800149c:	f44f 638e 	mov.w	r3, #1136	; 0x470
 80014a0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014a2:	2301      	movs	r3, #1
 80014a4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014a6:	2300      	movs	r3, #0
 80014a8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014aa:	2300      	movs	r3, #0
 80014ac:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014ae:	f107 0314 	add.w	r3, r7, #20
 80014b2:	4619      	mov	r1, r3
 80014b4:	481a      	ldr	r0, [pc, #104]	; (8001520 <MX_GPIO_Init+0x164>)
 80014b6:	f000 fe95 	bl	80021e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : SSI_0_Pin */
  GPIO_InitStruct.Pin = SSI_0_Pin;
 80014ba:	2380      	movs	r3, #128	; 0x80
 80014bc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014be:	2301      	movs	r3, #1
 80014c0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014c2:	2300      	movs	r3, #0
 80014c4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014c6:	2300      	movs	r3, #0
 80014c8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SSI_0_GPIO_Port, &GPIO_InitStruct);
 80014ca:	f107 0314 	add.w	r3, r7, #20
 80014ce:	4619      	mov	r1, r3
 80014d0:	4814      	ldr	r0, [pc, #80]	; (8001524 <MX_GPIO_Init+0x168>)
 80014d2:	f000 fe87 	bl	80021e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : nIRQ_OUT_Pin */
  GPIO_InitStruct.Pin = nIRQ_OUT_Pin;
 80014d6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80014da:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80014dc:	2300      	movs	r3, #0
 80014de:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014e0:	2300      	movs	r3, #0
 80014e2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(nIRQ_OUT_GPIO_Port, &GPIO_InitStruct);
 80014e4:	f107 0314 	add.w	r3, r7, #20
 80014e8:	4619      	mov	r1, r3
 80014ea:	480c      	ldr	r0, [pc, #48]	; (800151c <MX_GPIO_Init+0x160>)
 80014ec:	f000 fe7a 	bl	80021e4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 80014f0:	2200      	movs	r2, #0
 80014f2:	2100      	movs	r1, #0
 80014f4:	2006      	movs	r0, #6
 80014f6:	f000 fdec 	bl	80020d2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80014fa:	2006      	movs	r0, #6
 80014fc:	f000 fe05 	bl	800210a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001500:	2200      	movs	r2, #0
 8001502:	2100      	movs	r1, #0
 8001504:	2028      	movs	r0, #40	; 0x28
 8001506:	f000 fde4 	bl	80020d2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800150a:	2028      	movs	r0, #40	; 0x28
 800150c:	f000 fdfd 	bl	800210a <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001510:	bf00      	nop
 8001512:	3728      	adds	r7, #40	; 0x28
 8001514:	46bd      	mov	sp, r7
 8001516:	bd80      	pop	{r7, pc}
 8001518:	40023800 	.word	0x40023800
 800151c:	40020000 	.word	0x40020000
 8001520:	40020400 	.word	0x40020400
 8001524:	40020800 	.word	0x40020800

08001528 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001528:	b480      	push	{r7}
 800152a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800152c:	b672      	cpsid	i
}
 800152e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001530:	e7fe      	b.n	8001530 <Error_Handler+0x8>
	...

08001534 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001534:	b580      	push	{r7, lr}
 8001536:	b082      	sub	sp, #8
 8001538:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800153a:	2300      	movs	r3, #0
 800153c:	607b      	str	r3, [r7, #4]
 800153e:	4b10      	ldr	r3, [pc, #64]	; (8001580 <HAL_MspInit+0x4c>)
 8001540:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001542:	4a0f      	ldr	r2, [pc, #60]	; (8001580 <HAL_MspInit+0x4c>)
 8001544:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001548:	6453      	str	r3, [r2, #68]	; 0x44
 800154a:	4b0d      	ldr	r3, [pc, #52]	; (8001580 <HAL_MspInit+0x4c>)
 800154c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800154e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001552:	607b      	str	r3, [r7, #4]
 8001554:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001556:	2300      	movs	r3, #0
 8001558:	603b      	str	r3, [r7, #0]
 800155a:	4b09      	ldr	r3, [pc, #36]	; (8001580 <HAL_MspInit+0x4c>)
 800155c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800155e:	4a08      	ldr	r2, [pc, #32]	; (8001580 <HAL_MspInit+0x4c>)
 8001560:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001564:	6413      	str	r3, [r2, #64]	; 0x40
 8001566:	4b06      	ldr	r3, [pc, #24]	; (8001580 <HAL_MspInit+0x4c>)
 8001568:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800156a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800156e:	603b      	str	r3, [r7, #0]
 8001570:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001572:	2007      	movs	r0, #7
 8001574:	f000 fda2 	bl	80020bc <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001578:	bf00      	nop
 800157a:	3708      	adds	r7, #8
 800157c:	46bd      	mov	sp, r7
 800157e:	bd80      	pop	{r7, pc}
 8001580:	40023800 	.word	0x40023800

08001584 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001584:	b480      	push	{r7}
 8001586:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001588:	e7fe      	b.n	8001588 <NMI_Handler+0x4>

0800158a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800158a:	b480      	push	{r7}
 800158c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800158e:	e7fe      	b.n	800158e <HardFault_Handler+0x4>

08001590 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001590:	b480      	push	{r7}
 8001592:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001594:	e7fe      	b.n	8001594 <MemManage_Handler+0x4>

08001596 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001596:	b480      	push	{r7}
 8001598:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800159a:	e7fe      	b.n	800159a <BusFault_Handler+0x4>

0800159c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800159c:	b480      	push	{r7}
 800159e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80015a0:	e7fe      	b.n	80015a0 <UsageFault_Handler+0x4>

080015a2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80015a2:	b480      	push	{r7}
 80015a4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80015a6:	bf00      	nop
 80015a8:	46bd      	mov	sp, r7
 80015aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ae:	4770      	bx	lr

080015b0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80015b0:	b480      	push	{r7}
 80015b2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80015b4:	bf00      	nop
 80015b6:	46bd      	mov	sp, r7
 80015b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015bc:	4770      	bx	lr

080015be <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80015be:	b480      	push	{r7}
 80015c0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80015c2:	bf00      	nop
 80015c4:	46bd      	mov	sp, r7
 80015c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ca:	4770      	bx	lr

080015cc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80015cc:	b580      	push	{r7, lr}
 80015ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80015d0:	f000 fc60 	bl	8001e94 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80015d4:	bf00      	nop
 80015d6:	bd80      	pop	{r7, pc}

080015d8 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 80015d8:	b580      	push	{r7, lr}
 80015da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_EXTI_IRQHandler(&H_EXTI_0);
 80015dc:	4802      	ldr	r0, [pc, #8]	; (80015e8 <EXTI0_IRQHandler+0x10>)
 80015de:	f000 fddd 	bl	800219c <HAL_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 80015e2:	bf00      	nop
 80015e4:	bd80      	pop	{r7, pc}
 80015e6:	bf00      	nop
 80015e8:	200000c0 	.word	0x200000c0

080015ec <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80015ec:	b580      	push	{r7, lr}
 80015ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_EXTI_IRQHandler(&H_EXTI_13);
 80015f0:	4802      	ldr	r0, [pc, #8]	; (80015fc <EXTI15_10_IRQHandler+0x10>)
 80015f2:	f000 fdd3 	bl	800219c <HAL_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80015f6:	bf00      	nop
 80015f8:	bd80      	pop	{r7, pc}
 80015fa:	bf00      	nop
 80015fc:	20000010 	.word	0x20000010

08001600 <BSP_SPI1_Init>:
/**
  * @brief  Initializes SPI HAL.
  * @retval BSP status
  */
int32_t BSP_SPI1_Init(void)
{
 8001600:	b580      	push	{r7, lr}
 8001602:	b082      	sub	sp, #8
 8001604:	af00      	add	r7, sp, #0
  int32_t ret = BSP_ERROR_NONE;
 8001606:	2300      	movs	r3, #0
 8001608:	607b      	str	r3, [r7, #4]

  hspi1.Instance  = SPI1;
 800160a:	4b12      	ldr	r3, [pc, #72]	; (8001654 <BSP_SPI1_Init+0x54>)
 800160c:	4a12      	ldr	r2, [pc, #72]	; (8001658 <BSP_SPI1_Init+0x58>)
 800160e:	601a      	str	r2, [r3, #0]

  if(SPI1InitCounter++ == 0)
 8001610:	4b12      	ldr	r3, [pc, #72]	; (800165c <BSP_SPI1_Init+0x5c>)
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	1c5a      	adds	r2, r3, #1
 8001616:	4911      	ldr	r1, [pc, #68]	; (800165c <BSP_SPI1_Init+0x5c>)
 8001618:	600a      	str	r2, [r1, #0]
 800161a:	2b00      	cmp	r3, #0
 800161c:	d114      	bne.n	8001648 <BSP_SPI1_Init+0x48>
  {
    if (HAL_SPI_GetState(&hspi1) == HAL_SPI_STATE_RESET)
 800161e:	480d      	ldr	r0, [pc, #52]	; (8001654 <BSP_SPI1_Init+0x54>)
 8001620:	f001 ff61 	bl	80034e6 <HAL_SPI_GetState>
 8001624:	4603      	mov	r3, r0
 8001626:	2b00      	cmp	r3, #0
 8001628:	d10e      	bne.n	8001648 <BSP_SPI1_Init+0x48>
    {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 0U)
        /* Init the SPI Msp */
        SPI1_MspInit(&hspi1);
 800162a:	480a      	ldr	r0, [pc, #40]	; (8001654 <BSP_SPI1_Init+0x54>)
 800162c:	f000 f87c 	bl	8001728 <SPI1_MspInit>
            {
                return BSP_ERROR_MSP_FAILURE;
            }
        }
#endif
        if(ret == BSP_ERROR_NONE)
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	2b00      	cmp	r3, #0
 8001634:	d108      	bne.n	8001648 <BSP_SPI1_Init+0x48>
        {
            /* Init the SPI */
            if (MX_SPI1_Init(&hspi1) != HAL_OK)
 8001636:	4807      	ldr	r0, [pc, #28]	; (8001654 <BSP_SPI1_Init+0x54>)
 8001638:	f000 f83a 	bl	80016b0 <MX_SPI1_Init>
 800163c:	4603      	mov	r3, r0
 800163e:	2b00      	cmp	r3, #0
 8001640:	d002      	beq.n	8001648 <BSP_SPI1_Init+0x48>
            {
                ret = BSP_ERROR_BUS_FAILURE;
 8001642:	f06f 0307 	mvn.w	r3, #7
 8001646:	607b      	str	r3, [r7, #4]
            }
        }
    }
  }

  return ret;
 8001648:	687b      	ldr	r3, [r7, #4]
}
 800164a:	4618      	mov	r0, r3
 800164c:	3708      	adds	r7, #8
 800164e:	46bd      	mov	sp, r7
 8001650:	bd80      	pop	{r7, pc}
 8001652:	bf00      	nop
 8001654:	200001c8 	.word	0x200001c8
 8001658:	40013000 	.word	0x40013000
 800165c:	20000220 	.word	0x20000220

08001660 <BSP_SPI1_SendRecv>:
  * @param  pData: Pointer to data buffer to send/receive
  * @param  Length: Length of data in byte
  * @retval BSP status
  */
int32_t BSP_SPI1_SendRecv(uint8_t *pTxData, uint8_t *pRxData, uint16_t Length)
{
 8001660:	b580      	push	{r7, lr}
 8001662:	b088      	sub	sp, #32
 8001664:	af02      	add	r7, sp, #8
 8001666:	60f8      	str	r0, [r7, #12]
 8001668:	60b9      	str	r1, [r7, #8]
 800166a:	4613      	mov	r3, r2
 800166c:	80fb      	strh	r3, [r7, #6]
  int32_t ret = BSP_ERROR_NONE;
 800166e:	2300      	movs	r3, #0
 8001670:	617b      	str	r3, [r7, #20]

  if(HAL_SPI_TransmitReceive(&hspi1, pTxData, pRxData, Length, BUS_SPI1_POLL_TIMEOUT) != HAL_OK)
 8001672:	88fb      	ldrh	r3, [r7, #6]
 8001674:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001678:	9200      	str	r2, [sp, #0]
 800167a:	68ba      	ldr	r2, [r7, #8]
 800167c:	68f9      	ldr	r1, [r7, #12]
 800167e:	4807      	ldr	r0, [pc, #28]	; (800169c <BSP_SPI1_SendRecv+0x3c>)
 8001680:	f001 fd8f 	bl	80031a2 <HAL_SPI_TransmitReceive>
 8001684:	4603      	mov	r3, r0
 8001686:	2b00      	cmp	r3, #0
 8001688:	d002      	beq.n	8001690 <BSP_SPI1_SendRecv+0x30>
  {
      ret = BSP_ERROR_UNKNOWN_FAILURE;
 800168a:	f06f 0305 	mvn.w	r3, #5
 800168e:	617b      	str	r3, [r7, #20]
  }
  return ret;
 8001690:	697b      	ldr	r3, [r7, #20]
}
 8001692:	4618      	mov	r0, r3
 8001694:	3718      	adds	r7, #24
 8001696:	46bd      	mov	sp, r7
 8001698:	bd80      	pop	{r7, pc}
 800169a:	bf00      	nop
 800169c:	200001c8 	.word	0x200001c8

080016a0 <BSP_GetTick>:

/**
  * @brief  Return system tick in ms
  * @retval Current HAL time base time stamp
  */
int32_t BSP_GetTick(void) {
 80016a0:	b580      	push	{r7, lr}
 80016a2:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 80016a4:	f000 fc0a 	bl	8001ebc <HAL_GetTick>
 80016a8:	4603      	mov	r3, r0
}
 80016aa:	4618      	mov	r0, r3
 80016ac:	bd80      	pop	{r7, pc}
	...

080016b0 <MX_SPI1_Init>:

/* SPI1 init function */

__weak HAL_StatusTypeDef MX_SPI1_Init(SPI_HandleTypeDef* hspi)
{
 80016b0:	b580      	push	{r7, lr}
 80016b2:	b084      	sub	sp, #16
 80016b4:	af00      	add	r7, sp, #0
 80016b6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 80016b8:	2300      	movs	r3, #0
 80016ba:	73fb      	strb	r3, [r7, #15]

  hspi->Instance = SPI1;
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	4a19      	ldr	r2, [pc, #100]	; (8001724 <MX_SPI1_Init+0x74>)
 80016c0:	601a      	str	r2, [r3, #0]
  hspi->Init.Mode = SPI_MODE_MASTER;
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	f44f 7282 	mov.w	r2, #260	; 0x104
 80016c8:	605a      	str	r2, [r3, #4]
  hspi->Init.Direction = SPI_DIRECTION_2LINES;
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	2200      	movs	r2, #0
 80016ce:	609a      	str	r2, [r3, #8]
  hspi->Init.DataSize = SPI_DATASIZE_8BIT;
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	2200      	movs	r2, #0
 80016d4:	60da      	str	r2, [r3, #12]
  hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	2200      	movs	r2, #0
 80016da:	611a      	str	r2, [r3, #16]
  hspi->Init.CLKPhase = SPI_PHASE_1EDGE;
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	2200      	movs	r2, #0
 80016e0:	615a      	str	r2, [r3, #20]
  hspi->Init.NSS = SPI_NSS_SOFT;
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80016e8:	619a      	str	r2, [r3, #24]
  hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	2220      	movs	r2, #32
 80016ee:	61da      	str	r2, [r3, #28]
  hspi->Init.FirstBit = SPI_FIRSTBIT_MSB;
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	2200      	movs	r2, #0
 80016f4:	621a      	str	r2, [r3, #32]
  hspi->Init.TIMode = SPI_TIMODE_DISABLE;
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	2200      	movs	r2, #0
 80016fa:	625a      	str	r2, [r3, #36]	; 0x24
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	2200      	movs	r2, #0
 8001700:	629a      	str	r2, [r3, #40]	; 0x28
  hspi->Init.CRCPolynomial = 10;
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	220a      	movs	r2, #10
 8001706:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(hspi) != HAL_OK)
 8001708:	6878      	ldr	r0, [r7, #4]
 800170a:	f001 fcb7 	bl	800307c <HAL_SPI_Init>
 800170e:	4603      	mov	r3, r0
 8001710:	2b00      	cmp	r3, #0
 8001712:	d001      	beq.n	8001718 <MX_SPI1_Init+0x68>
  {
    ret = HAL_ERROR;
 8001714:	2301      	movs	r3, #1
 8001716:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8001718:	7bfb      	ldrb	r3, [r7, #15]
}
 800171a:	4618      	mov	r0, r3
 800171c:	3710      	adds	r7, #16
 800171e:	46bd      	mov	sp, r7
 8001720:	bd80      	pop	{r7, pc}
 8001722:	bf00      	nop
 8001724:	40013000 	.word	0x40013000

08001728 <SPI1_MspInit>:

static void SPI1_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001728:	b580      	push	{r7, lr}
 800172a:	b08a      	sub	sp, #40	; 0x28
 800172c:	af00      	add	r7, sp, #0
 800172e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001730:	2300      	movs	r3, #0
 8001732:	613b      	str	r3, [r7, #16]
 8001734:	4b2d      	ldr	r3, [pc, #180]	; (80017ec <SPI1_MspInit+0xc4>)
 8001736:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001738:	4a2c      	ldr	r2, [pc, #176]	; (80017ec <SPI1_MspInit+0xc4>)
 800173a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800173e:	6453      	str	r3, [r2, #68]	; 0x44
 8001740:	4b2a      	ldr	r3, [pc, #168]	; (80017ec <SPI1_MspInit+0xc4>)
 8001742:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001744:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001748:	613b      	str	r3, [r7, #16]
 800174a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800174c:	2300      	movs	r3, #0
 800174e:	60fb      	str	r3, [r7, #12]
 8001750:	4b26      	ldr	r3, [pc, #152]	; (80017ec <SPI1_MspInit+0xc4>)
 8001752:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001754:	4a25      	ldr	r2, [pc, #148]	; (80017ec <SPI1_MspInit+0xc4>)
 8001756:	f043 0301 	orr.w	r3, r3, #1
 800175a:	6313      	str	r3, [r2, #48]	; 0x30
 800175c:	4b23      	ldr	r3, [pc, #140]	; (80017ec <SPI1_MspInit+0xc4>)
 800175e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001760:	f003 0301 	and.w	r3, r3, #1
 8001764:	60fb      	str	r3, [r7, #12]
 8001766:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001768:	2300      	movs	r3, #0
 800176a:	60bb      	str	r3, [r7, #8]
 800176c:	4b1f      	ldr	r3, [pc, #124]	; (80017ec <SPI1_MspInit+0xc4>)
 800176e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001770:	4a1e      	ldr	r2, [pc, #120]	; (80017ec <SPI1_MspInit+0xc4>)
 8001772:	f043 0302 	orr.w	r3, r3, #2
 8001776:	6313      	str	r3, [r2, #48]	; 0x30
 8001778:	4b1c      	ldr	r3, [pc, #112]	; (80017ec <SPI1_MspInit+0xc4>)
 800177a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800177c:	f003 0302 	and.w	r3, r3, #2
 8001780:	60bb      	str	r3, [r7, #8]
 8001782:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    PB3     ------> SPI1_SCK
    */
    GPIO_InitStruct.Pin = BUS_SPI1_MISO_GPIO_PIN;
 8001784:	2340      	movs	r3, #64	; 0x40
 8001786:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001788:	2302      	movs	r3, #2
 800178a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800178c:	2300      	movs	r3, #0
 800178e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001790:	2303      	movs	r3, #3
 8001792:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_SPI1_MISO_GPIO_AF;
 8001794:	2305      	movs	r3, #5
 8001796:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(BUS_SPI1_MISO_GPIO_PORT, &GPIO_InitStruct);
 8001798:	f107 0314 	add.w	r3, r7, #20
 800179c:	4619      	mov	r1, r3
 800179e:	4814      	ldr	r0, [pc, #80]	; (80017f0 <SPI1_MspInit+0xc8>)
 80017a0:	f000 fd20 	bl	80021e4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BUS_SPI1_MOSI_GPIO_PIN;
 80017a4:	2380      	movs	r3, #128	; 0x80
 80017a6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017a8:	2302      	movs	r3, #2
 80017aa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017ac:	2300      	movs	r3, #0
 80017ae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017b0:	2303      	movs	r3, #3
 80017b2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_SPI1_MOSI_GPIO_AF;
 80017b4:	2305      	movs	r3, #5
 80017b6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(BUS_SPI1_MOSI_GPIO_PORT, &GPIO_InitStruct);
 80017b8:	f107 0314 	add.w	r3, r7, #20
 80017bc:	4619      	mov	r1, r3
 80017be:	480c      	ldr	r0, [pc, #48]	; (80017f0 <SPI1_MspInit+0xc8>)
 80017c0:	f000 fd10 	bl	80021e4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BUS_SPI1_SCK_GPIO_PIN;
 80017c4:	2308      	movs	r3, #8
 80017c6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017c8:	2302      	movs	r3, #2
 80017ca:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017cc:	2300      	movs	r3, #0
 80017ce:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017d0:	2303      	movs	r3, #3
 80017d2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_SPI1_SCK_GPIO_AF;
 80017d4:	2305      	movs	r3, #5
 80017d6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(BUS_SPI1_SCK_GPIO_PORT, &GPIO_InitStruct);
 80017d8:	f107 0314 	add.w	r3, r7, #20
 80017dc:	4619      	mov	r1, r3
 80017de:	4805      	ldr	r0, [pc, #20]	; (80017f4 <SPI1_MspInit+0xcc>)
 80017e0:	f000 fd00 	bl	80021e4 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
}
 80017e4:	bf00      	nop
 80017e6:	3728      	adds	r7, #40	; 0x28
 80017e8:	46bd      	mov	sp, r7
 80017ea:	bd80      	pop	{r7, pc}
 80017ec:	40023800 	.word	0x40023800
 80017f0:	40020000 	.word	0x40020000
 80017f4:	40020400 	.word	0x40020400

080017f8 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80017f8:	b580      	push	{r7, lr}
 80017fa:	b086      	sub	sp, #24
 80017fc:	af00      	add	r7, sp, #0
 80017fe:	60f8      	str	r0, [r7, #12]
 8001800:	60b9      	str	r1, [r7, #8]
 8001802:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001804:	2300      	movs	r3, #0
 8001806:	617b      	str	r3, [r7, #20]
 8001808:	e00a      	b.n	8001820 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800180a:	f3af 8000 	nop.w
 800180e:	4601      	mov	r1, r0
 8001810:	68bb      	ldr	r3, [r7, #8]
 8001812:	1c5a      	adds	r2, r3, #1
 8001814:	60ba      	str	r2, [r7, #8]
 8001816:	b2ca      	uxtb	r2, r1
 8001818:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800181a:	697b      	ldr	r3, [r7, #20]
 800181c:	3301      	adds	r3, #1
 800181e:	617b      	str	r3, [r7, #20]
 8001820:	697a      	ldr	r2, [r7, #20]
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	429a      	cmp	r2, r3
 8001826:	dbf0      	blt.n	800180a <_read+0x12>
  }

  return len;
 8001828:	687b      	ldr	r3, [r7, #4]
}
 800182a:	4618      	mov	r0, r3
 800182c:	3718      	adds	r7, #24
 800182e:	46bd      	mov	sp, r7
 8001830:	bd80      	pop	{r7, pc}

08001832 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001832:	b580      	push	{r7, lr}
 8001834:	b086      	sub	sp, #24
 8001836:	af00      	add	r7, sp, #0
 8001838:	60f8      	str	r0, [r7, #12]
 800183a:	60b9      	str	r1, [r7, #8]
 800183c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800183e:	2300      	movs	r3, #0
 8001840:	617b      	str	r3, [r7, #20]
 8001842:	e009      	b.n	8001858 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001844:	68bb      	ldr	r3, [r7, #8]
 8001846:	1c5a      	adds	r2, r3, #1
 8001848:	60ba      	str	r2, [r7, #8]
 800184a:	781b      	ldrb	r3, [r3, #0]
 800184c:	4618      	mov	r0, r3
 800184e:	f000 fa6b 	bl	8001d28 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001852:	697b      	ldr	r3, [r7, #20]
 8001854:	3301      	adds	r3, #1
 8001856:	617b      	str	r3, [r7, #20]
 8001858:	697a      	ldr	r2, [r7, #20]
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	429a      	cmp	r2, r3
 800185e:	dbf1      	blt.n	8001844 <_write+0x12>
  }
  return len;
 8001860:	687b      	ldr	r3, [r7, #4]
}
 8001862:	4618      	mov	r0, r3
 8001864:	3718      	adds	r7, #24
 8001866:	46bd      	mov	sp, r7
 8001868:	bd80      	pop	{r7, pc}

0800186a <_close>:

int _close(int file)
{
 800186a:	b480      	push	{r7}
 800186c:	b083      	sub	sp, #12
 800186e:	af00      	add	r7, sp, #0
 8001870:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001872:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001876:	4618      	mov	r0, r3
 8001878:	370c      	adds	r7, #12
 800187a:	46bd      	mov	sp, r7
 800187c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001880:	4770      	bx	lr

08001882 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001882:	b480      	push	{r7}
 8001884:	b083      	sub	sp, #12
 8001886:	af00      	add	r7, sp, #0
 8001888:	6078      	str	r0, [r7, #4]
 800188a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800188c:	683b      	ldr	r3, [r7, #0]
 800188e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001892:	605a      	str	r2, [r3, #4]
  return 0;
 8001894:	2300      	movs	r3, #0
}
 8001896:	4618      	mov	r0, r3
 8001898:	370c      	adds	r7, #12
 800189a:	46bd      	mov	sp, r7
 800189c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a0:	4770      	bx	lr

080018a2 <_isatty>:

int _isatty(int file)
{
 80018a2:	b480      	push	{r7}
 80018a4:	b083      	sub	sp, #12
 80018a6:	af00      	add	r7, sp, #0
 80018a8:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80018aa:	2301      	movs	r3, #1
}
 80018ac:	4618      	mov	r0, r3
 80018ae:	370c      	adds	r7, #12
 80018b0:	46bd      	mov	sp, r7
 80018b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b6:	4770      	bx	lr

080018b8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80018b8:	b480      	push	{r7}
 80018ba:	b085      	sub	sp, #20
 80018bc:	af00      	add	r7, sp, #0
 80018be:	60f8      	str	r0, [r7, #12]
 80018c0:	60b9      	str	r1, [r7, #8]
 80018c2:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80018c4:	2300      	movs	r3, #0
}
 80018c6:	4618      	mov	r0, r3
 80018c8:	3714      	adds	r7, #20
 80018ca:	46bd      	mov	sp, r7
 80018cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d0:	4770      	bx	lr
	...

080018d4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80018d4:	b580      	push	{r7, lr}
 80018d6:	b086      	sub	sp, #24
 80018d8:	af00      	add	r7, sp, #0
 80018da:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80018dc:	4a14      	ldr	r2, [pc, #80]	; (8001930 <_sbrk+0x5c>)
 80018de:	4b15      	ldr	r3, [pc, #84]	; (8001934 <_sbrk+0x60>)
 80018e0:	1ad3      	subs	r3, r2, r3
 80018e2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80018e4:	697b      	ldr	r3, [r7, #20]
 80018e6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80018e8:	4b13      	ldr	r3, [pc, #76]	; (8001938 <_sbrk+0x64>)
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d102      	bne.n	80018f6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80018f0:	4b11      	ldr	r3, [pc, #68]	; (8001938 <_sbrk+0x64>)
 80018f2:	4a12      	ldr	r2, [pc, #72]	; (800193c <_sbrk+0x68>)
 80018f4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80018f6:	4b10      	ldr	r3, [pc, #64]	; (8001938 <_sbrk+0x64>)
 80018f8:	681a      	ldr	r2, [r3, #0]
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	4413      	add	r3, r2
 80018fe:	693a      	ldr	r2, [r7, #16]
 8001900:	429a      	cmp	r2, r3
 8001902:	d207      	bcs.n	8001914 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001904:	f003 fd46 	bl	8005394 <__errno>
 8001908:	4603      	mov	r3, r0
 800190a:	220c      	movs	r2, #12
 800190c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800190e:	f04f 33ff 	mov.w	r3, #4294967295
 8001912:	e009      	b.n	8001928 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001914:	4b08      	ldr	r3, [pc, #32]	; (8001938 <_sbrk+0x64>)
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800191a:	4b07      	ldr	r3, [pc, #28]	; (8001938 <_sbrk+0x64>)
 800191c:	681a      	ldr	r2, [r3, #0]
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	4413      	add	r3, r2
 8001922:	4a05      	ldr	r2, [pc, #20]	; (8001938 <_sbrk+0x64>)
 8001924:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001926:	68fb      	ldr	r3, [r7, #12]
}
 8001928:	4618      	mov	r0, r3
 800192a:	3718      	adds	r7, #24
 800192c:	46bd      	mov	sp, r7
 800192e:	bd80      	pop	{r7, pc}
 8001930:	20018000 	.word	0x20018000
 8001934:	00000400 	.word	0x00000400
 8001938:	20000224 	.word	0x20000224
 800193c:	20000570 	.word	0x20000570

08001940 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001940:	b480      	push	{r7}
 8001942:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001944:	4b06      	ldr	r3, [pc, #24]	; (8001960 <SystemInit+0x20>)
 8001946:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800194a:	4a05      	ldr	r2, [pc, #20]	; (8001960 <SystemInit+0x20>)
 800194c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001950:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001954:	bf00      	nop
 8001956:	46bd      	mov	sp, r7
 8001958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800195c:	4770      	bx	lr
 800195e:	bf00      	nop
 8001960:	e000ed00 	.word	0xe000ed00

08001964 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001964:	f8df d034 	ldr.w	sp, [pc, #52]	; 800199c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001968:	480d      	ldr	r0, [pc, #52]	; (80019a0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800196a:	490e      	ldr	r1, [pc, #56]	; (80019a4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800196c:	4a0e      	ldr	r2, [pc, #56]	; (80019a8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800196e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001970:	e002      	b.n	8001978 <LoopCopyDataInit>

08001972 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001972:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001974:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001976:	3304      	adds	r3, #4

08001978 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001978:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800197a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800197c:	d3f9      	bcc.n	8001972 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800197e:	4a0b      	ldr	r2, [pc, #44]	; (80019ac <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001980:	4c0b      	ldr	r4, [pc, #44]	; (80019b0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001982:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001984:	e001      	b.n	800198a <LoopFillZerobss>

08001986 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001986:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001988:	3204      	adds	r2, #4

0800198a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800198a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800198c:	d3fb      	bcc.n	8001986 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800198e:	f7ff ffd7 	bl	8001940 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001992:	f003 fecf 	bl	8005734 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001996:	f7ff fc98 	bl	80012ca <main>
  bx  lr    
 800199a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 800199c:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80019a0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80019a4:	20000088 	.word	0x20000088
  ldr r2, =_sidata
 80019a8:	080067fc 	.word	0x080067fc
  ldr r2, =_sbss
 80019ac:	20000088 	.word	0x20000088
  ldr r4, =_ebss
 80019b0:	20000570 	.word	0x20000570

080019b4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80019b4:	e7fe      	b.n	80019b4 <ADC_IRQHandler>
	...

080019b8 <BSP_LED_Init>:
 *              This parameter can be one of the following values:
 *              @arg  LED2, LED4, ...
 * @retval HAL status
 */
int32_t BSP_LED_Init(Led_TypeDef Led)
{
 80019b8:	b580      	push	{r7, lr}
 80019ba:	b082      	sub	sp, #8
 80019bc:	af00      	add	r7, sp, #0
 80019be:	4603      	mov	r3, r0
 80019c0:	71fb      	strb	r3, [r7, #7]
  static const BSP_LED_GPIO_Init LedGpioInit[LEDn] = {LED_USER_GPIO_Init};
  LedGpioInit[Led]();
 80019c2:	79fb      	ldrb	r3, [r7, #7]
 80019c4:	4a04      	ldr	r2, [pc, #16]	; (80019d8 <BSP_LED_Init+0x20>)
 80019c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80019ca:	4798      	blx	r3
  return BSP_ERROR_NONE;
 80019cc:	2300      	movs	r3, #0
}
 80019ce:	4618      	mov	r0, r3
 80019d0:	3708      	adds	r7, #8
 80019d2:	46bd      	mov	sp, r7
 80019d4:	bd80      	pop	{r7, pc}
 80019d6:	bf00      	nop
 80019d8:	08006740 	.word	0x08006740

080019dc <BSP_LED_On>:
 *              @arg  LED3
 *              @arg  LED4
 * @retval HAL status
 */
int32_t BSP_LED_On(Led_TypeDef Led)
{
 80019dc:	b580      	push	{r7, lr}
 80019de:	b082      	sub	sp, #8
 80019e0:	af00      	add	r7, sp, #0
 80019e2:	4603      	mov	r3, r0
 80019e4:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(LED_PORT [Led], LED_PIN [Led], GPIO_PIN_SET);
 80019e6:	79fb      	ldrb	r3, [r7, #7]
 80019e8:	4a06      	ldr	r2, [pc, #24]	; (8001a04 <BSP_LED_On+0x28>)
 80019ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80019ee:	2120      	movs	r1, #32
 80019f0:	2201      	movs	r2, #1
 80019f2:	4618      	mov	r0, r3
 80019f4:	f000 fe76 	bl	80026e4 <HAL_GPIO_WritePin>

  return BSP_ERROR_NONE;
 80019f8:	2300      	movs	r3, #0
}
 80019fa:	4618      	mov	r0, r3
 80019fc:	3708      	adds	r7, #8
 80019fe:	46bd      	mov	sp, r7
 8001a00:	bd80      	pop	{r7, pc}
 8001a02:	bf00      	nop
 8001a04:	20000008 	.word	0x20000008

08001a08 <BSP_LED_Off>:
 *              @arg  LED3
 *              @arg  LED4
 * @retval HAL status
 */
int32_t BSP_LED_Off(Led_TypeDef Led)
{
 8001a08:	b580      	push	{r7, lr}
 8001a0a:	b082      	sub	sp, #8
 8001a0c:	af00      	add	r7, sp, #0
 8001a0e:	4603      	mov	r3, r0
 8001a10:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(LED_PORT [Led], LED_PIN [Led], GPIO_PIN_RESET);
 8001a12:	79fb      	ldrb	r3, [r7, #7]
 8001a14:	4a06      	ldr	r2, [pc, #24]	; (8001a30 <BSP_LED_Off+0x28>)
 8001a16:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a1a:	2120      	movs	r1, #32
 8001a1c:	2200      	movs	r2, #0
 8001a1e:	4618      	mov	r0, r3
 8001a20:	f000 fe60 	bl	80026e4 <HAL_GPIO_WritePin>

  return BSP_ERROR_NONE;
 8001a24:	2300      	movs	r3, #0
}
 8001a26:	4618      	mov	r0, r3
 8001a28:	3708      	adds	r7, #8
 8001a2a:	46bd      	mov	sp, r7
 8001a2c:	bd80      	pop	{r7, pc}
 8001a2e:	bf00      	nop
 8001a30:	20000008 	.word	0x20000008

08001a34 <BSP_LED_Toggle>:
 *              @arg  LED3
 *              @arg  LED4
 * @retval HAL status
 */
int32_t BSP_LED_Toggle(Led_TypeDef Led)
{
 8001a34:	b580      	push	{r7, lr}
 8001a36:	b082      	sub	sp, #8
 8001a38:	af00      	add	r7, sp, #0
 8001a3a:	4603      	mov	r3, r0
 8001a3c:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_TogglePin(LED_PORT[Led], LED_PIN[Led]);
 8001a3e:	79fb      	ldrb	r3, [r7, #7]
 8001a40:	4a06      	ldr	r2, [pc, #24]	; (8001a5c <BSP_LED_Toggle+0x28>)
 8001a42:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a46:	2220      	movs	r2, #32
 8001a48:	4611      	mov	r1, r2
 8001a4a:	4618      	mov	r0, r3
 8001a4c:	f000 fe63 	bl	8002716 <HAL_GPIO_TogglePin>

  return BSP_ERROR_NONE;
 8001a50:	2300      	movs	r3, #0
}
 8001a52:	4618      	mov	r0, r3
 8001a54:	3708      	adds	r7, #8
 8001a56:	46bd      	mov	sp, r7
 8001a58:	bd80      	pop	{r7, pc}
 8001a5a:	bf00      	nop
 8001a5c:	20000008 	.word	0x20000008

08001a60 <LED_USER_GPIO_Init>:
}
/**
  * @brief
  * @retval None
  */
static void LED_USER_GPIO_Init(void) {
 8001a60:	b580      	push	{r7, lr}
 8001a62:	b088      	sub	sp, #32
 8001a64:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a66:	2300      	movs	r3, #0
 8001a68:	60bb      	str	r3, [r7, #8]
 8001a6a:	4b1c      	ldr	r3, [pc, #112]	; (8001adc <LED_USER_GPIO_Init+0x7c>)
 8001a6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a6e:	4a1b      	ldr	r2, [pc, #108]	; (8001adc <LED_USER_GPIO_Init+0x7c>)
 8001a70:	f043 0301 	orr.w	r3, r3, #1
 8001a74:	6313      	str	r3, [r2, #48]	; 0x30
 8001a76:	4b19      	ldr	r3, [pc, #100]	; (8001adc <LED_USER_GPIO_Init+0x7c>)
 8001a78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a7a:	f003 0301 	and.w	r3, r3, #1
 8001a7e:	60bb      	str	r3, [r7, #8]
 8001a80:	68bb      	ldr	r3, [r7, #8]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a82:	f107 030c 	add.w	r3, r7, #12
 8001a86:	2200      	movs	r2, #0
 8001a88:	601a      	str	r2, [r3, #0]
 8001a8a:	605a      	str	r2, [r3, #4]
 8001a8c:	609a      	str	r2, [r3, #8]
 8001a8e:	60da      	str	r2, [r3, #12]
 8001a90:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a92:	2300      	movs	r3, #0
 8001a94:	607b      	str	r3, [r7, #4]
 8001a96:	4b11      	ldr	r3, [pc, #68]	; (8001adc <LED_USER_GPIO_Init+0x7c>)
 8001a98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a9a:	4a10      	ldr	r2, [pc, #64]	; (8001adc <LED_USER_GPIO_Init+0x7c>)
 8001a9c:	f043 0301 	orr.w	r3, r3, #1
 8001aa0:	6313      	str	r3, [r2, #48]	; 0x30
 8001aa2:	4b0e      	ldr	r3, [pc, #56]	; (8001adc <LED_USER_GPIO_Init+0x7c>)
 8001aa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aa6:	f003 0301 	and.w	r3, r3, #1
 8001aaa:	607b      	str	r3, [r7, #4]
 8001aac:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BUS_BSP_LED_GPIO_PORT, BUS_BSP_LED_GPIO_PIN, GPIO_PIN_RESET);
 8001aae:	2200      	movs	r2, #0
 8001ab0:	2120      	movs	r1, #32
 8001ab2:	480b      	ldr	r0, [pc, #44]	; (8001ae0 <LED_USER_GPIO_Init+0x80>)
 8001ab4:	f000 fe16 	bl	80026e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PTPIN */
  GPIO_InitStruct.Pin = BUS_BSP_LED_GPIO_PIN;
 8001ab8:	2320      	movs	r3, #32
 8001aba:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001abc:	2301      	movs	r3, #1
 8001abe:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ac0:	2300      	movs	r3, #0
 8001ac2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ac4:	2300      	movs	r3, #0
 8001ac6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(BUS_BSP_LED_GPIO_PORT, &GPIO_InitStruct);
 8001ac8:	f107 030c 	add.w	r3, r7, #12
 8001acc:	4619      	mov	r1, r3
 8001ace:	4804      	ldr	r0, [pc, #16]	; (8001ae0 <LED_USER_GPIO_Init+0x80>)
 8001ad0:	f000 fb88 	bl	80021e4 <HAL_GPIO_Init>

}
 8001ad4:	bf00      	nop
 8001ad6:	3720      	adds	r7, #32
 8001ad8:	46bd      	mov	sp, r7
 8001ada:	bd80      	pop	{r7, pc}
 8001adc:	40023800 	.word	0x40023800
 8001ae0:	40020000 	.word	0x40020000

08001ae4 <BSP_PB_Init>:
  *                    @arg  BUTTON_MODE_EXTI: Button will be connected to EXTI line
  *                                            with interrupt generation capability
  * @retval BSP status
  */
int32_t BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 8001ae4:	b580      	push	{r7, lr}
 8001ae6:	b084      	sub	sp, #16
 8001ae8:	af00      	add	r7, sp, #0
 8001aea:	4603      	mov	r3, r0
 8001aec:	460a      	mov	r2, r1
 8001aee:	71fb      	strb	r3, [r7, #7]
 8001af0:	4613      	mov	r3, r2
 8001af2:	71bb      	strb	r3, [r7, #6]
  int32_t ret = BSP_ERROR_NONE;
 8001af4:	2300      	movs	r3, #0
 8001af6:	60fb      	str	r3, [r7, #12]
  static const BSP_EXTI_LineCallback ButtonCallback[BUTTONn] ={BUTTON_USER_EXTI_Callback};
  static const uint32_t  BSP_BUTTON_PRIO [BUTTONn] ={BSP_BUTTON_USER_IT_PRIORITY};
  static const uint32_t BUTTON_EXTI_LINE[BUTTONn] ={USER_BUTTON_EXTI_LINE};
  static const BSP_BUTTON_GPIO_Init ButtonGpioInit[BUTTONn] = {BUTTON_USER_GPIO_Init};

  ButtonGpioInit[Button]();
 8001af8:	79fb      	ldrb	r3, [r7, #7]
 8001afa:	4a1f      	ldr	r2, [pc, #124]	; (8001b78 <BSP_PB_Init+0x94>)
 8001afc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b00:	4798      	blx	r3

  if (ButtonMode == BUTTON_MODE_EXTI)
 8001b02:	79bb      	ldrb	r3, [r7, #6]
 8001b04:	2b01      	cmp	r3, #1
 8001b06:	d132      	bne.n	8001b6e <BSP_PB_Init+0x8a>
  {
    if(HAL_EXTI_GetHandle(&hpb_exti[Button], BUTTON_EXTI_LINE[Button]) != HAL_OK)
 8001b08:	79fb      	ldrb	r3, [r7, #7]
 8001b0a:	00db      	lsls	r3, r3, #3
 8001b0c:	4a1b      	ldr	r2, [pc, #108]	; (8001b7c <BSP_PB_Init+0x98>)
 8001b0e:	441a      	add	r2, r3
 8001b10:	79fb      	ldrb	r3, [r7, #7]
 8001b12:	491b      	ldr	r1, [pc, #108]	; (8001b80 <BSP_PB_Init+0x9c>)
 8001b14:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001b18:	4619      	mov	r1, r3
 8001b1a:	4610      	mov	r0, r2
 8001b1c:	f000 fb29 	bl	8002172 <HAL_EXTI_GetHandle>
 8001b20:	4603      	mov	r3, r0
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d003      	beq.n	8001b2e <BSP_PB_Init+0x4a>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 8001b26:	f06f 0303 	mvn.w	r3, #3
 8001b2a:	60fb      	str	r3, [r7, #12]
 8001b2c:	e01f      	b.n	8001b6e <BSP_PB_Init+0x8a>
    }
    else if (HAL_EXTI_RegisterCallback(&hpb_exti[Button],  HAL_EXTI_COMMON_CB_ID, ButtonCallback[Button]) != HAL_OK)
 8001b2e:	79fb      	ldrb	r3, [r7, #7]
 8001b30:	00db      	lsls	r3, r3, #3
 8001b32:	4a12      	ldr	r2, [pc, #72]	; (8001b7c <BSP_PB_Init+0x98>)
 8001b34:	1898      	adds	r0, r3, r2
 8001b36:	79fb      	ldrb	r3, [r7, #7]
 8001b38:	4a12      	ldr	r2, [pc, #72]	; (8001b84 <BSP_PB_Init+0xa0>)
 8001b3a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b3e:	461a      	mov	r2, r3
 8001b40:	2100      	movs	r1, #0
 8001b42:	f000 fafc 	bl	800213e <HAL_EXTI_RegisterCallback>
 8001b46:	4603      	mov	r3, r0
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d003      	beq.n	8001b54 <BSP_PB_Init+0x70>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 8001b4c:	f06f 0303 	mvn.w	r3, #3
 8001b50:	60fb      	str	r3, [r7, #12]
 8001b52:	e00c      	b.n	8001b6e <BSP_PB_Init+0x8a>
    }
	else
    {
      /* Enable and set Button EXTI Interrupt to the lowest priority */
      HAL_NVIC_SetPriority((BUTTON_IRQn[Button]), BSP_BUTTON_PRIO[Button], 0x00);
 8001b54:	2028      	movs	r0, #40	; 0x28
 8001b56:	79fb      	ldrb	r3, [r7, #7]
 8001b58:	4a0b      	ldr	r2, [pc, #44]	; (8001b88 <BSP_PB_Init+0xa4>)
 8001b5a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b5e:	2200      	movs	r2, #0
 8001b60:	4619      	mov	r1, r3
 8001b62:	f000 fab6 	bl	80020d2 <HAL_NVIC_SetPriority>
      HAL_NVIC_EnableIRQ((BUTTON_IRQn[Button]));
 8001b66:	2328      	movs	r3, #40	; 0x28
 8001b68:	4618      	mov	r0, r3
 8001b6a:	f000 face 	bl	800210a <HAL_NVIC_EnableIRQ>
    }
  }

  return ret;
 8001b6e:	68fb      	ldr	r3, [r7, #12]
}
 8001b70:	4618      	mov	r0, r3
 8001b72:	3710      	adds	r7, #16
 8001b74:	46bd      	mov	sp, r7
 8001b76:	bd80      	pop	{r7, pc}
 8001b78:	08006744 	.word	0x08006744
 8001b7c:	20000010 	.word	0x20000010
 8001b80:	08006748 	.word	0x08006748
 8001b84:	0800674c 	.word	0x0800674c
 8001b88:	08006750 	.word	0x08006750

08001b8c <BSP_PB_GetState>:
 *                This parameter can be one of the following values:
 *                @arg  BUTTON_USER
 * @retval The Button GPIO pin value (GPIO_PIN_RESET = button pressed)
 */
int32_t BSP_PB_GetState(Button_TypeDef Button)
{
 8001b8c:	b580      	push	{r7, lr}
 8001b8e:	b082      	sub	sp, #8
 8001b90:	af00      	add	r7, sp, #0
 8001b92:	4603      	mov	r3, r0
 8001b94:	71fb      	strb	r3, [r7, #7]
  return (int32_t)(HAL_GPIO_ReadPin(BUTTON_PORT[Button], BUTTON_PIN[Button]) == GPIO_PIN_RESET);
 8001b96:	79fb      	ldrb	r3, [r7, #7]
 8001b98:	4a09      	ldr	r2, [pc, #36]	; (8001bc0 <BSP_PB_GetState+0x34>)
 8001b9a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b9e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001ba2:	4611      	mov	r1, r2
 8001ba4:	4618      	mov	r0, r3
 8001ba6:	f000 fd85 	bl	80026b4 <HAL_GPIO_ReadPin>
 8001baa:	4603      	mov	r3, r0
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	bf0c      	ite	eq
 8001bb0:	2301      	moveq	r3, #1
 8001bb2:	2300      	movne	r3, #0
 8001bb4:	b2db      	uxtb	r3, r3
}
 8001bb6:	4618      	mov	r0, r3
 8001bb8:	3708      	adds	r7, #8
 8001bba:	46bd      	mov	sp, r7
 8001bbc:	bd80      	pop	{r7, pc}
 8001bbe:	bf00      	nop
 8001bc0:	2000000c 	.word	0x2000000c

08001bc4 <BUTTON_USER_EXTI_Callback>:
/**
  * @brief  User EXTI line detection callbacks.
  * @retval None
  */
static void BUTTON_USER_EXTI_Callback(void)
{
 8001bc4:	b580      	push	{r7, lr}
 8001bc6:	af00      	add	r7, sp, #0
  BSP_PB_Callback(BUTTON_USER);
 8001bc8:	2000      	movs	r0, #0
 8001bca:	f7fe fe8b 	bl	80008e4 <BSP_PB_Callback>
}
 8001bce:	bf00      	nop
 8001bd0:	bd80      	pop	{r7, pc}
	...

08001bd4 <BUTTON_USER_GPIO_Init>:

/**
  * @brief
  * @retval None
  */
static void BUTTON_USER_GPIO_Init(void) {
 8001bd4:	b580      	push	{r7, lr}
 8001bd6:	b088      	sub	sp, #32
 8001bd8:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001bda:	2300      	movs	r3, #0
 8001bdc:	60bb      	str	r3, [r7, #8]
 8001bde:	4b1a      	ldr	r3, [pc, #104]	; (8001c48 <BUTTON_USER_GPIO_Init+0x74>)
 8001be0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001be2:	4a19      	ldr	r2, [pc, #100]	; (8001c48 <BUTTON_USER_GPIO_Init+0x74>)
 8001be4:	f043 0304 	orr.w	r3, r3, #4
 8001be8:	6313      	str	r3, [r2, #48]	; 0x30
 8001bea:	4b17      	ldr	r3, [pc, #92]	; (8001c48 <BUTTON_USER_GPIO_Init+0x74>)
 8001bec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bee:	f003 0304 	and.w	r3, r3, #4
 8001bf2:	60bb      	str	r3, [r7, #8]
 8001bf4:	68bb      	ldr	r3, [r7, #8]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bf6:	f107 030c 	add.w	r3, r7, #12
 8001bfa:	2200      	movs	r2, #0
 8001bfc:	601a      	str	r2, [r3, #0]
 8001bfe:	605a      	str	r2, [r3, #4]
 8001c00:	609a      	str	r2, [r3, #8]
 8001c02:	60da      	str	r2, [r3, #12]
 8001c04:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001c06:	2300      	movs	r3, #0
 8001c08:	607b      	str	r3, [r7, #4]
 8001c0a:	4b0f      	ldr	r3, [pc, #60]	; (8001c48 <BUTTON_USER_GPIO_Init+0x74>)
 8001c0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c0e:	4a0e      	ldr	r2, [pc, #56]	; (8001c48 <BUTTON_USER_GPIO_Init+0x74>)
 8001c10:	f043 0304 	orr.w	r3, r3, #4
 8001c14:	6313      	str	r3, [r2, #48]	; 0x30
 8001c16:	4b0c      	ldr	r3, [pc, #48]	; (8001c48 <BUTTON_USER_GPIO_Init+0x74>)
 8001c18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c1a:	f003 0304 	and.w	r3, r3, #4
 8001c1e:	607b      	str	r3, [r7, #4]
 8001c20:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : PTPIN */
  GPIO_InitStruct.Pin = BUS_BSP_BUTTON_GPIO_PIN;
 8001c22:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001c26:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001c28:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001c2c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c2e:	2300      	movs	r3, #0
 8001c30:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(BUS_BSP_BUTTON_GPIO_PORT, &GPIO_InitStruct);
 8001c32:	f107 030c 	add.w	r3, r7, #12
 8001c36:	4619      	mov	r1, r3
 8001c38:	4804      	ldr	r0, [pc, #16]	; (8001c4c <BUTTON_USER_GPIO_Init+0x78>)
 8001c3a:	f000 fad3 	bl	80021e4 <HAL_GPIO_Init>

}
 8001c3e:	bf00      	nop
 8001c40:	3720      	adds	r7, #32
 8001c42:	46bd      	mov	sp, r7
 8001c44:	bd80      	pop	{r7, pc}
 8001c46:	bf00      	nop
 8001c48:	40023800 	.word	0x40023800
 8001c4c:	40020800 	.word	0x40020800

08001c50 <BSP_COM_Init>:
 * @param  UART_Init: Pointer to a UART_HandleTypeDef structure that contains the
 *                    configuration information for the specified USART peripheral.
 * @retval BSP error code
 */
int32_t BSP_COM_Init(COM_TypeDef COM)
{
 8001c50:	b580      	push	{r7, lr}
 8001c52:	b084      	sub	sp, #16
 8001c54:	af00      	add	r7, sp, #0
 8001c56:	4603      	mov	r3, r0
 8001c58:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 8001c5a:	2300      	movs	r3, #0
 8001c5c:	60fb      	str	r3, [r7, #12]

  if(COM > COMn)
 8001c5e:	79fb      	ldrb	r3, [r7, #7]
 8001c60:	2b01      	cmp	r3, #1
 8001c62:	d903      	bls.n	8001c6c <BSP_COM_Init+0x1c>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8001c64:	f06f 0301 	mvn.w	r3, #1
 8001c68:	60fb      	str	r3, [r7, #12]
 8001c6a:	e025      	b.n	8001cb8 <BSP_COM_Init+0x68>
  }
  else
  {
     hcom_uart[COM].Instance = COM_USART[COM];
 8001c6c:	79fb      	ldrb	r3, [r7, #7]
 8001c6e:	79fa      	ldrb	r2, [r7, #7]
 8001c70:	4914      	ldr	r1, [pc, #80]	; (8001cc4 <BSP_COM_Init+0x74>)
 8001c72:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8001c76:	4814      	ldr	r0, [pc, #80]	; (8001cc8 <BSP_COM_Init+0x78>)
 8001c78:	4613      	mov	r3, r2
 8001c7a:	011b      	lsls	r3, r3, #4
 8001c7c:	4413      	add	r3, r2
 8001c7e:	009b      	lsls	r3, r3, #2
 8001c80:	4403      	add	r3, r0
 8001c82:	6019      	str	r1, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 0U)
    /* Init the UART Msp */
    USART2_MspInit(&hcom_uart[COM]);
 8001c84:	79fa      	ldrb	r2, [r7, #7]
 8001c86:	4613      	mov	r3, r2
 8001c88:	011b      	lsls	r3, r3, #4
 8001c8a:	4413      	add	r3, r2
 8001c8c:	009b      	lsls	r3, r3, #2
 8001c8e:	4a0e      	ldr	r2, [pc, #56]	; (8001cc8 <BSP_COM_Init+0x78>)
 8001c90:	4413      	add	r3, r2
 8001c92:	4618      	mov	r0, r3
 8001c94:	f000 f864 	bl	8001d60 <USART2_MspInit>
      {
        return BSP_ERROR_MSP_FAILURE;
      }
    }
#endif
    if (MX_USART2_UART_Init(&hcom_uart[COM]))
 8001c98:	79fa      	ldrb	r2, [r7, #7]
 8001c9a:	4613      	mov	r3, r2
 8001c9c:	011b      	lsls	r3, r3, #4
 8001c9e:	4413      	add	r3, r2
 8001ca0:	009b      	lsls	r3, r3, #2
 8001ca2:	4a09      	ldr	r2, [pc, #36]	; (8001cc8 <BSP_COM_Init+0x78>)
 8001ca4:	4413      	add	r3, r2
 8001ca6:	4618      	mov	r0, r3
 8001ca8:	f000 f810 	bl	8001ccc <MX_USART2_UART_Init>
 8001cac:	4603      	mov	r3, r0
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d002      	beq.n	8001cb8 <BSP_COM_Init+0x68>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 8001cb2:	f06f 0303 	mvn.w	r3, #3
 8001cb6:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 8001cb8:	68fb      	ldr	r3, [r7, #12]
}
 8001cba:	4618      	mov	r0, r3
 8001cbc:	3710      	adds	r7, #16
 8001cbe:	46bd      	mov	sp, r7
 8001cc0:	bd80      	pop	{r7, pc}
 8001cc2:	bf00      	nop
 8001cc4:	20000018 	.word	0x20000018
 8001cc8:	20000228 	.word	0x20000228

08001ccc <MX_USART2_UART_Init>:
 */

/* USART2 init function */

__weak HAL_StatusTypeDef MX_USART2_UART_Init(UART_HandleTypeDef* huart)
{
 8001ccc:	b580      	push	{r7, lr}
 8001cce:	b084      	sub	sp, #16
 8001cd0:	af00      	add	r7, sp, #0
 8001cd2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8001cd4:	2300      	movs	r3, #0
 8001cd6:	73fb      	strb	r3, [r7, #15]

  huart->Instance = USART2;
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	4a12      	ldr	r2, [pc, #72]	; (8001d24 <MX_USART2_UART_Init+0x58>)
 8001cdc:	601a      	str	r2, [r3, #0]
  huart->Init.BaudRate = 115200;
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001ce4:	605a      	str	r2, [r3, #4]
  huart->Init.WordLength = UART_WORDLENGTH_8B;
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	2200      	movs	r2, #0
 8001cea:	609a      	str	r2, [r3, #8]
  huart->Init.StopBits = UART_STOPBITS_1;
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	2200      	movs	r2, #0
 8001cf0:	60da      	str	r2, [r3, #12]
  huart->Init.Parity = UART_PARITY_NONE;
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	2200      	movs	r2, #0
 8001cf6:	611a      	str	r2, [r3, #16]
  huart->Init.Mode = UART_MODE_TX_RX;
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	220c      	movs	r2, #12
 8001cfc:	615a      	str	r2, [r3, #20]
  huart->Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	2200      	movs	r2, #0
 8001d02:	619a      	str	r2, [r3, #24]
  huart->Init.OverSampling = UART_OVERSAMPLING_16;
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	2200      	movs	r2, #0
 8001d08:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(huart) != HAL_OK)
 8001d0a:	6878      	ldr	r0, [r7, #4]
 8001d0c:	f001 fcc4 	bl	8003698 <HAL_UART_Init>
 8001d10:	4603      	mov	r3, r0
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d001      	beq.n	8001d1a <MX_USART2_UART_Init+0x4e>
  {
    ret = HAL_ERROR;
 8001d16:	2301      	movs	r3, #1
 8001d18:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8001d1a:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d1c:	4618      	mov	r0, r3
 8001d1e:	3710      	adds	r7, #16
 8001d20:	46bd      	mov	sp, r7
 8001d22:	bd80      	pop	{r7, pc}
 8001d24:	40004400 	.word	0x40004400

08001d28 <__io_putchar>:
  (void)HAL_UART_Transmit(&hcom_uart[COM_ActiveLogPort], (uint8_t *)&ch, 1, COM_POLL_TIMEOUT);
  return ch;
}
#else /* For GCC Toolchains */
int __io_putchar (int ch)
{
 8001d28:	b580      	push	{r7, lr}
 8001d2a:	b082      	sub	sp, #8
 8001d2c:	af00      	add	r7, sp, #0
 8001d2e:	6078      	str	r0, [r7, #4]
  (void)HAL_UART_Transmit(&hcom_uart[COM_ActiveLogPort], (uint8_t *)&ch, 1, COM_POLL_TIMEOUT);
 8001d30:	4b09      	ldr	r3, [pc, #36]	; (8001d58 <__io_putchar+0x30>)
 8001d32:	781b      	ldrb	r3, [r3, #0]
 8001d34:	461a      	mov	r2, r3
 8001d36:	4613      	mov	r3, r2
 8001d38:	011b      	lsls	r3, r3, #4
 8001d3a:	4413      	add	r3, r2
 8001d3c:	009b      	lsls	r3, r3, #2
 8001d3e:	4a07      	ldr	r2, [pc, #28]	; (8001d5c <__io_putchar+0x34>)
 8001d40:	1898      	adds	r0, r3, r2
 8001d42:	1d39      	adds	r1, r7, #4
 8001d44:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001d48:	2201      	movs	r2, #1
 8001d4a:	f001 fcfc 	bl	8003746 <HAL_UART_Transmit>
  return ch;
 8001d4e:	687b      	ldr	r3, [r7, #4]
}
 8001d50:	4618      	mov	r0, r3
 8001d52:	3708      	adds	r7, #8
 8001d54:	46bd      	mov	sp, r7
 8001d56:	bd80      	pop	{r7, pc}
 8001d58:	2000026c 	.word	0x2000026c
 8001d5c:	20000228 	.word	0x20000228

08001d60 <USART2_MspInit>:
 * @param  huart USART2 handle
 * @retval None
 */

static void USART2_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001d60:	b580      	push	{r7, lr}
 8001d62:	b08a      	sub	sp, #40	; 0x28
 8001d64:	af00      	add	r7, sp, #0
 8001d66:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001d68:	2300      	movs	r3, #0
 8001d6a:	613b      	str	r3, [r7, #16]
 8001d6c:	4b1e      	ldr	r3, [pc, #120]	; (8001de8 <USART2_MspInit+0x88>)
 8001d6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d70:	4a1d      	ldr	r2, [pc, #116]	; (8001de8 <USART2_MspInit+0x88>)
 8001d72:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001d76:	6413      	str	r3, [r2, #64]	; 0x40
 8001d78:	4b1b      	ldr	r3, [pc, #108]	; (8001de8 <USART2_MspInit+0x88>)
 8001d7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d7c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d80:	613b      	str	r3, [r7, #16]
 8001d82:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d84:	2300      	movs	r3, #0
 8001d86:	60fb      	str	r3, [r7, #12]
 8001d88:	4b17      	ldr	r3, [pc, #92]	; (8001de8 <USART2_MspInit+0x88>)
 8001d8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d8c:	4a16      	ldr	r2, [pc, #88]	; (8001de8 <USART2_MspInit+0x88>)
 8001d8e:	f043 0301 	orr.w	r3, r3, #1
 8001d92:	6313      	str	r3, [r2, #48]	; 0x30
 8001d94:	4b14      	ldr	r3, [pc, #80]	; (8001de8 <USART2_MspInit+0x88>)
 8001d96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d98:	f003 0301 	and.w	r3, r3, #1
 8001d9c:	60fb      	str	r3, [r7, #12]
 8001d9e:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = BUS_USART2_TX_GPIO_PIN;
 8001da0:	2304      	movs	r3, #4
 8001da2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001da4:	2302      	movs	r3, #2
 8001da6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001da8:	2300      	movs	r3, #0
 8001daa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001dac:	2300      	movs	r3, #0
 8001dae:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_USART2_TX_GPIO_AF;
 8001db0:	2307      	movs	r3, #7
 8001db2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(BUS_USART2_TX_GPIO_PORT, &GPIO_InitStruct);
 8001db4:	f107 0314 	add.w	r3, r7, #20
 8001db8:	4619      	mov	r1, r3
 8001dba:	480c      	ldr	r0, [pc, #48]	; (8001dec <USART2_MspInit+0x8c>)
 8001dbc:	f000 fa12 	bl	80021e4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BUS_USART2_RX_GPIO_PIN;
 8001dc0:	2308      	movs	r3, #8
 8001dc2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dc4:	2302      	movs	r3, #2
 8001dc6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dc8:	2300      	movs	r3, #0
 8001dca:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001dcc:	2300      	movs	r3, #0
 8001dce:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_USART2_RX_GPIO_AF;
 8001dd0:	2307      	movs	r3, #7
 8001dd2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(BUS_USART2_RX_GPIO_PORT, &GPIO_InitStruct);
 8001dd4:	f107 0314 	add.w	r3, r7, #20
 8001dd8:	4619      	mov	r1, r3
 8001dda:	4804      	ldr	r0, [pc, #16]	; (8001dec <USART2_MspInit+0x8c>)
 8001ddc:	f000 fa02 	bl	80021e4 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
}
 8001de0:	bf00      	nop
 8001de2:	3728      	adds	r7, #40	; 0x28
 8001de4:	46bd      	mov	sp, r7
 8001de6:	bd80      	pop	{r7, pc}
 8001de8:	40023800 	.word	0x40023800
 8001dec:	40020000 	.word	0x40020000

08001df0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001df0:	b580      	push	{r7, lr}
 8001df2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001df4:	4b0e      	ldr	r3, [pc, #56]	; (8001e30 <HAL_Init+0x40>)
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	4a0d      	ldr	r2, [pc, #52]	; (8001e30 <HAL_Init+0x40>)
 8001dfa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001dfe:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001e00:	4b0b      	ldr	r3, [pc, #44]	; (8001e30 <HAL_Init+0x40>)
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	4a0a      	ldr	r2, [pc, #40]	; (8001e30 <HAL_Init+0x40>)
 8001e06:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001e0a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001e0c:	4b08      	ldr	r3, [pc, #32]	; (8001e30 <HAL_Init+0x40>)
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	4a07      	ldr	r2, [pc, #28]	; (8001e30 <HAL_Init+0x40>)
 8001e12:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e16:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001e18:	2003      	movs	r0, #3
 8001e1a:	f000 f94f 	bl	80020bc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001e1e:	2000      	movs	r0, #0
 8001e20:	f000 f808 	bl	8001e34 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001e24:	f7ff fb86 	bl	8001534 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001e28:	2300      	movs	r3, #0
}
 8001e2a:	4618      	mov	r0, r3
 8001e2c:	bd80      	pop	{r7, pc}
 8001e2e:	bf00      	nop
 8001e30:	40023c00 	.word	0x40023c00

08001e34 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001e34:	b580      	push	{r7, lr}
 8001e36:	b082      	sub	sp, #8
 8001e38:	af00      	add	r7, sp, #0
 8001e3a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001e3c:	4b12      	ldr	r3, [pc, #72]	; (8001e88 <HAL_InitTick+0x54>)
 8001e3e:	681a      	ldr	r2, [r3, #0]
 8001e40:	4b12      	ldr	r3, [pc, #72]	; (8001e8c <HAL_InitTick+0x58>)
 8001e42:	781b      	ldrb	r3, [r3, #0]
 8001e44:	4619      	mov	r1, r3
 8001e46:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001e4a:	fbb3 f3f1 	udiv	r3, r3, r1
 8001e4e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e52:	4618      	mov	r0, r3
 8001e54:	f000 f967 	bl	8002126 <HAL_SYSTICK_Config>
 8001e58:	4603      	mov	r3, r0
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d001      	beq.n	8001e62 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001e5e:	2301      	movs	r3, #1
 8001e60:	e00e      	b.n	8001e80 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	2b0f      	cmp	r3, #15
 8001e66:	d80a      	bhi.n	8001e7e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001e68:	2200      	movs	r2, #0
 8001e6a:	6879      	ldr	r1, [r7, #4]
 8001e6c:	f04f 30ff 	mov.w	r0, #4294967295
 8001e70:	f000 f92f 	bl	80020d2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001e74:	4a06      	ldr	r2, [pc, #24]	; (8001e90 <HAL_InitTick+0x5c>)
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001e7a:	2300      	movs	r3, #0
 8001e7c:	e000      	b.n	8001e80 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001e7e:	2301      	movs	r3, #1
}
 8001e80:	4618      	mov	r0, r3
 8001e82:	3708      	adds	r7, #8
 8001e84:	46bd      	mov	sp, r7
 8001e86:	bd80      	pop	{r7, pc}
 8001e88:	20000004 	.word	0x20000004
 8001e8c:	20000020 	.word	0x20000020
 8001e90:	2000001c 	.word	0x2000001c

08001e94 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001e94:	b480      	push	{r7}
 8001e96:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001e98:	4b06      	ldr	r3, [pc, #24]	; (8001eb4 <HAL_IncTick+0x20>)
 8001e9a:	781b      	ldrb	r3, [r3, #0]
 8001e9c:	461a      	mov	r2, r3
 8001e9e:	4b06      	ldr	r3, [pc, #24]	; (8001eb8 <HAL_IncTick+0x24>)
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	4413      	add	r3, r2
 8001ea4:	4a04      	ldr	r2, [pc, #16]	; (8001eb8 <HAL_IncTick+0x24>)
 8001ea6:	6013      	str	r3, [r2, #0]
}
 8001ea8:	bf00      	nop
 8001eaa:	46bd      	mov	sp, r7
 8001eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb0:	4770      	bx	lr
 8001eb2:	bf00      	nop
 8001eb4:	20000020 	.word	0x20000020
 8001eb8:	20000270 	.word	0x20000270

08001ebc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001ebc:	b480      	push	{r7}
 8001ebe:	af00      	add	r7, sp, #0
  return uwTick;
 8001ec0:	4b03      	ldr	r3, [pc, #12]	; (8001ed0 <HAL_GetTick+0x14>)
 8001ec2:	681b      	ldr	r3, [r3, #0]
}
 8001ec4:	4618      	mov	r0, r3
 8001ec6:	46bd      	mov	sp, r7
 8001ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ecc:	4770      	bx	lr
 8001ece:	bf00      	nop
 8001ed0:	20000270 	.word	0x20000270

08001ed4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001ed4:	b580      	push	{r7, lr}
 8001ed6:	b084      	sub	sp, #16
 8001ed8:	af00      	add	r7, sp, #0
 8001eda:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001edc:	f7ff ffee 	bl	8001ebc <HAL_GetTick>
 8001ee0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001eec:	d005      	beq.n	8001efa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001eee:	4b0a      	ldr	r3, [pc, #40]	; (8001f18 <HAL_Delay+0x44>)
 8001ef0:	781b      	ldrb	r3, [r3, #0]
 8001ef2:	461a      	mov	r2, r3
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	4413      	add	r3, r2
 8001ef8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001efa:	bf00      	nop
 8001efc:	f7ff ffde 	bl	8001ebc <HAL_GetTick>
 8001f00:	4602      	mov	r2, r0
 8001f02:	68bb      	ldr	r3, [r7, #8]
 8001f04:	1ad3      	subs	r3, r2, r3
 8001f06:	68fa      	ldr	r2, [r7, #12]
 8001f08:	429a      	cmp	r2, r3
 8001f0a:	d8f7      	bhi.n	8001efc <HAL_Delay+0x28>
  {
  }
}
 8001f0c:	bf00      	nop
 8001f0e:	bf00      	nop
 8001f10:	3710      	adds	r7, #16
 8001f12:	46bd      	mov	sp, r7
 8001f14:	bd80      	pop	{r7, pc}
 8001f16:	bf00      	nop
 8001f18:	20000020 	.word	0x20000020

08001f1c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f1c:	b480      	push	{r7}
 8001f1e:	b085      	sub	sp, #20
 8001f20:	af00      	add	r7, sp, #0
 8001f22:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	f003 0307 	and.w	r3, r3, #7
 8001f2a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001f2c:	4b0c      	ldr	r3, [pc, #48]	; (8001f60 <__NVIC_SetPriorityGrouping+0x44>)
 8001f2e:	68db      	ldr	r3, [r3, #12]
 8001f30:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001f32:	68ba      	ldr	r2, [r7, #8]
 8001f34:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001f38:	4013      	ands	r3, r2
 8001f3a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001f40:	68bb      	ldr	r3, [r7, #8]
 8001f42:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001f44:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001f48:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001f4c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001f4e:	4a04      	ldr	r2, [pc, #16]	; (8001f60 <__NVIC_SetPriorityGrouping+0x44>)
 8001f50:	68bb      	ldr	r3, [r7, #8]
 8001f52:	60d3      	str	r3, [r2, #12]
}
 8001f54:	bf00      	nop
 8001f56:	3714      	adds	r7, #20
 8001f58:	46bd      	mov	sp, r7
 8001f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f5e:	4770      	bx	lr
 8001f60:	e000ed00 	.word	0xe000ed00

08001f64 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001f64:	b480      	push	{r7}
 8001f66:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001f68:	4b04      	ldr	r3, [pc, #16]	; (8001f7c <__NVIC_GetPriorityGrouping+0x18>)
 8001f6a:	68db      	ldr	r3, [r3, #12]
 8001f6c:	0a1b      	lsrs	r3, r3, #8
 8001f6e:	f003 0307 	and.w	r3, r3, #7
}
 8001f72:	4618      	mov	r0, r3
 8001f74:	46bd      	mov	sp, r7
 8001f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f7a:	4770      	bx	lr
 8001f7c:	e000ed00 	.word	0xe000ed00

08001f80 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f80:	b480      	push	{r7}
 8001f82:	b083      	sub	sp, #12
 8001f84:	af00      	add	r7, sp, #0
 8001f86:	4603      	mov	r3, r0
 8001f88:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	db0b      	blt.n	8001faa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001f92:	79fb      	ldrb	r3, [r7, #7]
 8001f94:	f003 021f 	and.w	r2, r3, #31
 8001f98:	4907      	ldr	r1, [pc, #28]	; (8001fb8 <__NVIC_EnableIRQ+0x38>)
 8001f9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f9e:	095b      	lsrs	r3, r3, #5
 8001fa0:	2001      	movs	r0, #1
 8001fa2:	fa00 f202 	lsl.w	r2, r0, r2
 8001fa6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001faa:	bf00      	nop
 8001fac:	370c      	adds	r7, #12
 8001fae:	46bd      	mov	sp, r7
 8001fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb4:	4770      	bx	lr
 8001fb6:	bf00      	nop
 8001fb8:	e000e100 	.word	0xe000e100

08001fbc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001fbc:	b480      	push	{r7}
 8001fbe:	b083      	sub	sp, #12
 8001fc0:	af00      	add	r7, sp, #0
 8001fc2:	4603      	mov	r3, r0
 8001fc4:	6039      	str	r1, [r7, #0]
 8001fc6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001fc8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	db0a      	blt.n	8001fe6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001fd0:	683b      	ldr	r3, [r7, #0]
 8001fd2:	b2da      	uxtb	r2, r3
 8001fd4:	490c      	ldr	r1, [pc, #48]	; (8002008 <__NVIC_SetPriority+0x4c>)
 8001fd6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fda:	0112      	lsls	r2, r2, #4
 8001fdc:	b2d2      	uxtb	r2, r2
 8001fde:	440b      	add	r3, r1
 8001fe0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001fe4:	e00a      	b.n	8001ffc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001fe6:	683b      	ldr	r3, [r7, #0]
 8001fe8:	b2da      	uxtb	r2, r3
 8001fea:	4908      	ldr	r1, [pc, #32]	; (800200c <__NVIC_SetPriority+0x50>)
 8001fec:	79fb      	ldrb	r3, [r7, #7]
 8001fee:	f003 030f 	and.w	r3, r3, #15
 8001ff2:	3b04      	subs	r3, #4
 8001ff4:	0112      	lsls	r2, r2, #4
 8001ff6:	b2d2      	uxtb	r2, r2
 8001ff8:	440b      	add	r3, r1
 8001ffa:	761a      	strb	r2, [r3, #24]
}
 8001ffc:	bf00      	nop
 8001ffe:	370c      	adds	r7, #12
 8002000:	46bd      	mov	sp, r7
 8002002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002006:	4770      	bx	lr
 8002008:	e000e100 	.word	0xe000e100
 800200c:	e000ed00 	.word	0xe000ed00

08002010 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002010:	b480      	push	{r7}
 8002012:	b089      	sub	sp, #36	; 0x24
 8002014:	af00      	add	r7, sp, #0
 8002016:	60f8      	str	r0, [r7, #12]
 8002018:	60b9      	str	r1, [r7, #8]
 800201a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	f003 0307 	and.w	r3, r3, #7
 8002022:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002024:	69fb      	ldr	r3, [r7, #28]
 8002026:	f1c3 0307 	rsb	r3, r3, #7
 800202a:	2b04      	cmp	r3, #4
 800202c:	bf28      	it	cs
 800202e:	2304      	movcs	r3, #4
 8002030:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002032:	69fb      	ldr	r3, [r7, #28]
 8002034:	3304      	adds	r3, #4
 8002036:	2b06      	cmp	r3, #6
 8002038:	d902      	bls.n	8002040 <NVIC_EncodePriority+0x30>
 800203a:	69fb      	ldr	r3, [r7, #28]
 800203c:	3b03      	subs	r3, #3
 800203e:	e000      	b.n	8002042 <NVIC_EncodePriority+0x32>
 8002040:	2300      	movs	r3, #0
 8002042:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002044:	f04f 32ff 	mov.w	r2, #4294967295
 8002048:	69bb      	ldr	r3, [r7, #24]
 800204a:	fa02 f303 	lsl.w	r3, r2, r3
 800204e:	43da      	mvns	r2, r3
 8002050:	68bb      	ldr	r3, [r7, #8]
 8002052:	401a      	ands	r2, r3
 8002054:	697b      	ldr	r3, [r7, #20]
 8002056:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002058:	f04f 31ff 	mov.w	r1, #4294967295
 800205c:	697b      	ldr	r3, [r7, #20]
 800205e:	fa01 f303 	lsl.w	r3, r1, r3
 8002062:	43d9      	mvns	r1, r3
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002068:	4313      	orrs	r3, r2
         );
}
 800206a:	4618      	mov	r0, r3
 800206c:	3724      	adds	r7, #36	; 0x24
 800206e:	46bd      	mov	sp, r7
 8002070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002074:	4770      	bx	lr
	...

08002078 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002078:	b580      	push	{r7, lr}
 800207a:	b082      	sub	sp, #8
 800207c:	af00      	add	r7, sp, #0
 800207e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	3b01      	subs	r3, #1
 8002084:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002088:	d301      	bcc.n	800208e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800208a:	2301      	movs	r3, #1
 800208c:	e00f      	b.n	80020ae <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800208e:	4a0a      	ldr	r2, [pc, #40]	; (80020b8 <SysTick_Config+0x40>)
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	3b01      	subs	r3, #1
 8002094:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002096:	210f      	movs	r1, #15
 8002098:	f04f 30ff 	mov.w	r0, #4294967295
 800209c:	f7ff ff8e 	bl	8001fbc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80020a0:	4b05      	ldr	r3, [pc, #20]	; (80020b8 <SysTick_Config+0x40>)
 80020a2:	2200      	movs	r2, #0
 80020a4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80020a6:	4b04      	ldr	r3, [pc, #16]	; (80020b8 <SysTick_Config+0x40>)
 80020a8:	2207      	movs	r2, #7
 80020aa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80020ac:	2300      	movs	r3, #0
}
 80020ae:	4618      	mov	r0, r3
 80020b0:	3708      	adds	r7, #8
 80020b2:	46bd      	mov	sp, r7
 80020b4:	bd80      	pop	{r7, pc}
 80020b6:	bf00      	nop
 80020b8:	e000e010 	.word	0xe000e010

080020bc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80020bc:	b580      	push	{r7, lr}
 80020be:	b082      	sub	sp, #8
 80020c0:	af00      	add	r7, sp, #0
 80020c2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80020c4:	6878      	ldr	r0, [r7, #4]
 80020c6:	f7ff ff29 	bl	8001f1c <__NVIC_SetPriorityGrouping>
}
 80020ca:	bf00      	nop
 80020cc:	3708      	adds	r7, #8
 80020ce:	46bd      	mov	sp, r7
 80020d0:	bd80      	pop	{r7, pc}

080020d2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80020d2:	b580      	push	{r7, lr}
 80020d4:	b086      	sub	sp, #24
 80020d6:	af00      	add	r7, sp, #0
 80020d8:	4603      	mov	r3, r0
 80020da:	60b9      	str	r1, [r7, #8]
 80020dc:	607a      	str	r2, [r7, #4]
 80020de:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80020e0:	2300      	movs	r3, #0
 80020e2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80020e4:	f7ff ff3e 	bl	8001f64 <__NVIC_GetPriorityGrouping>
 80020e8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80020ea:	687a      	ldr	r2, [r7, #4]
 80020ec:	68b9      	ldr	r1, [r7, #8]
 80020ee:	6978      	ldr	r0, [r7, #20]
 80020f0:	f7ff ff8e 	bl	8002010 <NVIC_EncodePriority>
 80020f4:	4602      	mov	r2, r0
 80020f6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80020fa:	4611      	mov	r1, r2
 80020fc:	4618      	mov	r0, r3
 80020fe:	f7ff ff5d 	bl	8001fbc <__NVIC_SetPriority>
}
 8002102:	bf00      	nop
 8002104:	3718      	adds	r7, #24
 8002106:	46bd      	mov	sp, r7
 8002108:	bd80      	pop	{r7, pc}

0800210a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800210a:	b580      	push	{r7, lr}
 800210c:	b082      	sub	sp, #8
 800210e:	af00      	add	r7, sp, #0
 8002110:	4603      	mov	r3, r0
 8002112:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002114:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002118:	4618      	mov	r0, r3
 800211a:	f7ff ff31 	bl	8001f80 <__NVIC_EnableIRQ>
}
 800211e:	bf00      	nop
 8002120:	3708      	adds	r7, #8
 8002122:	46bd      	mov	sp, r7
 8002124:	bd80      	pop	{r7, pc}

08002126 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002126:	b580      	push	{r7, lr}
 8002128:	b082      	sub	sp, #8
 800212a:	af00      	add	r7, sp, #0
 800212c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800212e:	6878      	ldr	r0, [r7, #4]
 8002130:	f7ff ffa2 	bl	8002078 <SysTick_Config>
 8002134:	4603      	mov	r3, r0
}
 8002136:	4618      	mov	r0, r3
 8002138:	3708      	adds	r7, #8
 800213a:	46bd      	mov	sp, r7
 800213c:	bd80      	pop	{r7, pc}

0800213e <HAL_EXTI_RegisterCallback>:
  *         This parameter can be one of @arg @ref EXTI_CallbackIDTypeDef values.
  * @param  pPendingCbfn function pointer to be stored as callback.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_RegisterCallback(EXTI_HandleTypeDef *hexti, EXTI_CallbackIDTypeDef CallbackID, void (*pPendingCbfn)(void))
{
 800213e:	b480      	push	{r7}
 8002140:	b087      	sub	sp, #28
 8002142:	af00      	add	r7, sp, #0
 8002144:	60f8      	str	r0, [r7, #12]
 8002146:	460b      	mov	r3, r1
 8002148:	607a      	str	r2, [r7, #4]
 800214a:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 800214c:	2300      	movs	r3, #0
 800214e:	75fb      	strb	r3, [r7, #23]

  switch (CallbackID)
 8002150:	7afb      	ldrb	r3, [r7, #11]
 8002152:	2b00      	cmp	r3, #0
 8002154:	d103      	bne.n	800215e <HAL_EXTI_RegisterCallback+0x20>
  {
    case  HAL_EXTI_COMMON_CB_ID:
      hexti->PendingCallback = pPendingCbfn;
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	687a      	ldr	r2, [r7, #4]
 800215a:	605a      	str	r2, [r3, #4]
      break;
 800215c:	e002      	b.n	8002164 <HAL_EXTI_RegisterCallback+0x26>

    default:
      status = HAL_ERROR;
 800215e:	2301      	movs	r3, #1
 8002160:	75fb      	strb	r3, [r7, #23]
      break;
 8002162:	bf00      	nop
  }

  return status;
 8002164:	7dfb      	ldrb	r3, [r7, #23]
}
 8002166:	4618      	mov	r0, r3
 8002168:	371c      	adds	r7, #28
 800216a:	46bd      	mov	sp, r7
 800216c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002170:	4770      	bx	lr

08002172 <HAL_EXTI_GetHandle>:
  * @param  ExtiLine Exti line number.
  *         This parameter can be from 0 to @ref EXTI_LINE_NB.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_GetHandle(EXTI_HandleTypeDef *hexti, uint32_t ExtiLine)
{
 8002172:	b480      	push	{r7}
 8002174:	b083      	sub	sp, #12
 8002176:	af00      	add	r7, sp, #0
 8002178:	6078      	str	r0, [r7, #4]
 800217a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(ExtiLine));

  /* Check null pointer */
  if (hexti == NULL)
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	2b00      	cmp	r3, #0
 8002180:	d101      	bne.n	8002186 <HAL_EXTI_GetHandle+0x14>
  {
    return HAL_ERROR;
 8002182:	2301      	movs	r3, #1
 8002184:	e003      	b.n	800218e <HAL_EXTI_GetHandle+0x1c>
  }
  else
  {
    /* Store line number as handle private field */
    hexti->Line = ExtiLine;
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	683a      	ldr	r2, [r7, #0]
 800218a:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 800218c:	2300      	movs	r3, #0
  }
}
 800218e:	4618      	mov	r0, r3
 8002190:	370c      	adds	r7, #12
 8002192:	46bd      	mov	sp, r7
 8002194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002198:	4770      	bx	lr
	...

0800219c <HAL_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  hexti Exti handle.
  * @retval none.
  */
void HAL_EXTI_IRQHandler(EXTI_HandleTypeDef *hexti)
{
 800219c:	b580      	push	{r7, lr}
 800219e:	b084      	sub	sp, #16
 80021a0:	af00      	add	r7, sp, #0
 80021a2:	6078      	str	r0, [r7, #4]
  uint32_t regval;
  uint32_t maskline;

  /* Compute line mask */
  maskline = (1uL << (hexti->Line & EXTI_PIN_MASK));
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	f003 031f 	and.w	r3, r3, #31
 80021ac:	2201      	movs	r2, #1
 80021ae:	fa02 f303 	lsl.w	r3, r2, r3
 80021b2:	60fb      	str	r3, [r7, #12]

  /* Get pending bit  */
  regval = (EXTI->PR & maskline);
 80021b4:	4b0a      	ldr	r3, [pc, #40]	; (80021e0 <HAL_EXTI_IRQHandler+0x44>)
 80021b6:	695b      	ldr	r3, [r3, #20]
 80021b8:	68fa      	ldr	r2, [r7, #12]
 80021ba:	4013      	ands	r3, r2
 80021bc:	60bb      	str	r3, [r7, #8]
  if (regval != 0x00u)
 80021be:	68bb      	ldr	r3, [r7, #8]
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d009      	beq.n	80021d8 <HAL_EXTI_IRQHandler+0x3c>
  {
    /* Clear pending bit */
    EXTI->PR = maskline;
 80021c4:	4a06      	ldr	r2, [pc, #24]	; (80021e0 <HAL_EXTI_IRQHandler+0x44>)
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	6153      	str	r3, [r2, #20]

    /* Call callback */
    if (hexti->PendingCallback != NULL)
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	685b      	ldr	r3, [r3, #4]
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d002      	beq.n	80021d8 <HAL_EXTI_IRQHandler+0x3c>
    {
      hexti->PendingCallback();
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	685b      	ldr	r3, [r3, #4]
 80021d6:	4798      	blx	r3
    }
  }
}
 80021d8:	bf00      	nop
 80021da:	3710      	adds	r7, #16
 80021dc:	46bd      	mov	sp, r7
 80021de:	bd80      	pop	{r7, pc}
 80021e0:	40013c00 	.word	0x40013c00

080021e4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80021e4:	b480      	push	{r7}
 80021e6:	b089      	sub	sp, #36	; 0x24
 80021e8:	af00      	add	r7, sp, #0
 80021ea:	6078      	str	r0, [r7, #4]
 80021ec:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80021ee:	2300      	movs	r3, #0
 80021f0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80021f2:	2300      	movs	r3, #0
 80021f4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80021f6:	2300      	movs	r3, #0
 80021f8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80021fa:	2300      	movs	r3, #0
 80021fc:	61fb      	str	r3, [r7, #28]
 80021fe:	e159      	b.n	80024b4 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002200:	2201      	movs	r2, #1
 8002202:	69fb      	ldr	r3, [r7, #28]
 8002204:	fa02 f303 	lsl.w	r3, r2, r3
 8002208:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800220a:	683b      	ldr	r3, [r7, #0]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	697a      	ldr	r2, [r7, #20]
 8002210:	4013      	ands	r3, r2
 8002212:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002214:	693a      	ldr	r2, [r7, #16]
 8002216:	697b      	ldr	r3, [r7, #20]
 8002218:	429a      	cmp	r2, r3
 800221a:	f040 8148 	bne.w	80024ae <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800221e:	683b      	ldr	r3, [r7, #0]
 8002220:	685b      	ldr	r3, [r3, #4]
 8002222:	f003 0303 	and.w	r3, r3, #3
 8002226:	2b01      	cmp	r3, #1
 8002228:	d005      	beq.n	8002236 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800222a:	683b      	ldr	r3, [r7, #0]
 800222c:	685b      	ldr	r3, [r3, #4]
 800222e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002232:	2b02      	cmp	r3, #2
 8002234:	d130      	bne.n	8002298 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	689b      	ldr	r3, [r3, #8]
 800223a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800223c:	69fb      	ldr	r3, [r7, #28]
 800223e:	005b      	lsls	r3, r3, #1
 8002240:	2203      	movs	r2, #3
 8002242:	fa02 f303 	lsl.w	r3, r2, r3
 8002246:	43db      	mvns	r3, r3
 8002248:	69ba      	ldr	r2, [r7, #24]
 800224a:	4013      	ands	r3, r2
 800224c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800224e:	683b      	ldr	r3, [r7, #0]
 8002250:	68da      	ldr	r2, [r3, #12]
 8002252:	69fb      	ldr	r3, [r7, #28]
 8002254:	005b      	lsls	r3, r3, #1
 8002256:	fa02 f303 	lsl.w	r3, r2, r3
 800225a:	69ba      	ldr	r2, [r7, #24]
 800225c:	4313      	orrs	r3, r2
 800225e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	69ba      	ldr	r2, [r7, #24]
 8002264:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	685b      	ldr	r3, [r3, #4]
 800226a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800226c:	2201      	movs	r2, #1
 800226e:	69fb      	ldr	r3, [r7, #28]
 8002270:	fa02 f303 	lsl.w	r3, r2, r3
 8002274:	43db      	mvns	r3, r3
 8002276:	69ba      	ldr	r2, [r7, #24]
 8002278:	4013      	ands	r3, r2
 800227a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800227c:	683b      	ldr	r3, [r7, #0]
 800227e:	685b      	ldr	r3, [r3, #4]
 8002280:	091b      	lsrs	r3, r3, #4
 8002282:	f003 0201 	and.w	r2, r3, #1
 8002286:	69fb      	ldr	r3, [r7, #28]
 8002288:	fa02 f303 	lsl.w	r3, r2, r3
 800228c:	69ba      	ldr	r2, [r7, #24]
 800228e:	4313      	orrs	r3, r2
 8002290:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	69ba      	ldr	r2, [r7, #24]
 8002296:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002298:	683b      	ldr	r3, [r7, #0]
 800229a:	685b      	ldr	r3, [r3, #4]
 800229c:	f003 0303 	and.w	r3, r3, #3
 80022a0:	2b03      	cmp	r3, #3
 80022a2:	d017      	beq.n	80022d4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	68db      	ldr	r3, [r3, #12]
 80022a8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80022aa:	69fb      	ldr	r3, [r7, #28]
 80022ac:	005b      	lsls	r3, r3, #1
 80022ae:	2203      	movs	r2, #3
 80022b0:	fa02 f303 	lsl.w	r3, r2, r3
 80022b4:	43db      	mvns	r3, r3
 80022b6:	69ba      	ldr	r2, [r7, #24]
 80022b8:	4013      	ands	r3, r2
 80022ba:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80022bc:	683b      	ldr	r3, [r7, #0]
 80022be:	689a      	ldr	r2, [r3, #8]
 80022c0:	69fb      	ldr	r3, [r7, #28]
 80022c2:	005b      	lsls	r3, r3, #1
 80022c4:	fa02 f303 	lsl.w	r3, r2, r3
 80022c8:	69ba      	ldr	r2, [r7, #24]
 80022ca:	4313      	orrs	r3, r2
 80022cc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	69ba      	ldr	r2, [r7, #24]
 80022d2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80022d4:	683b      	ldr	r3, [r7, #0]
 80022d6:	685b      	ldr	r3, [r3, #4]
 80022d8:	f003 0303 	and.w	r3, r3, #3
 80022dc:	2b02      	cmp	r3, #2
 80022de:	d123      	bne.n	8002328 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80022e0:	69fb      	ldr	r3, [r7, #28]
 80022e2:	08da      	lsrs	r2, r3, #3
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	3208      	adds	r2, #8
 80022e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80022ec:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80022ee:	69fb      	ldr	r3, [r7, #28]
 80022f0:	f003 0307 	and.w	r3, r3, #7
 80022f4:	009b      	lsls	r3, r3, #2
 80022f6:	220f      	movs	r2, #15
 80022f8:	fa02 f303 	lsl.w	r3, r2, r3
 80022fc:	43db      	mvns	r3, r3
 80022fe:	69ba      	ldr	r2, [r7, #24]
 8002300:	4013      	ands	r3, r2
 8002302:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002304:	683b      	ldr	r3, [r7, #0]
 8002306:	691a      	ldr	r2, [r3, #16]
 8002308:	69fb      	ldr	r3, [r7, #28]
 800230a:	f003 0307 	and.w	r3, r3, #7
 800230e:	009b      	lsls	r3, r3, #2
 8002310:	fa02 f303 	lsl.w	r3, r2, r3
 8002314:	69ba      	ldr	r2, [r7, #24]
 8002316:	4313      	orrs	r3, r2
 8002318:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800231a:	69fb      	ldr	r3, [r7, #28]
 800231c:	08da      	lsrs	r2, r3, #3
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	3208      	adds	r2, #8
 8002322:	69b9      	ldr	r1, [r7, #24]
 8002324:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800232e:	69fb      	ldr	r3, [r7, #28]
 8002330:	005b      	lsls	r3, r3, #1
 8002332:	2203      	movs	r2, #3
 8002334:	fa02 f303 	lsl.w	r3, r2, r3
 8002338:	43db      	mvns	r3, r3
 800233a:	69ba      	ldr	r2, [r7, #24]
 800233c:	4013      	ands	r3, r2
 800233e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002340:	683b      	ldr	r3, [r7, #0]
 8002342:	685b      	ldr	r3, [r3, #4]
 8002344:	f003 0203 	and.w	r2, r3, #3
 8002348:	69fb      	ldr	r3, [r7, #28]
 800234a:	005b      	lsls	r3, r3, #1
 800234c:	fa02 f303 	lsl.w	r3, r2, r3
 8002350:	69ba      	ldr	r2, [r7, #24]
 8002352:	4313      	orrs	r3, r2
 8002354:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	69ba      	ldr	r2, [r7, #24]
 800235a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800235c:	683b      	ldr	r3, [r7, #0]
 800235e:	685b      	ldr	r3, [r3, #4]
 8002360:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002364:	2b00      	cmp	r3, #0
 8002366:	f000 80a2 	beq.w	80024ae <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800236a:	2300      	movs	r3, #0
 800236c:	60fb      	str	r3, [r7, #12]
 800236e:	4b57      	ldr	r3, [pc, #348]	; (80024cc <HAL_GPIO_Init+0x2e8>)
 8002370:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002372:	4a56      	ldr	r2, [pc, #344]	; (80024cc <HAL_GPIO_Init+0x2e8>)
 8002374:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002378:	6453      	str	r3, [r2, #68]	; 0x44
 800237a:	4b54      	ldr	r3, [pc, #336]	; (80024cc <HAL_GPIO_Init+0x2e8>)
 800237c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800237e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002382:	60fb      	str	r3, [r7, #12]
 8002384:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002386:	4a52      	ldr	r2, [pc, #328]	; (80024d0 <HAL_GPIO_Init+0x2ec>)
 8002388:	69fb      	ldr	r3, [r7, #28]
 800238a:	089b      	lsrs	r3, r3, #2
 800238c:	3302      	adds	r3, #2
 800238e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002392:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002394:	69fb      	ldr	r3, [r7, #28]
 8002396:	f003 0303 	and.w	r3, r3, #3
 800239a:	009b      	lsls	r3, r3, #2
 800239c:	220f      	movs	r2, #15
 800239e:	fa02 f303 	lsl.w	r3, r2, r3
 80023a2:	43db      	mvns	r3, r3
 80023a4:	69ba      	ldr	r2, [r7, #24]
 80023a6:	4013      	ands	r3, r2
 80023a8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	4a49      	ldr	r2, [pc, #292]	; (80024d4 <HAL_GPIO_Init+0x2f0>)
 80023ae:	4293      	cmp	r3, r2
 80023b0:	d019      	beq.n	80023e6 <HAL_GPIO_Init+0x202>
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	4a48      	ldr	r2, [pc, #288]	; (80024d8 <HAL_GPIO_Init+0x2f4>)
 80023b6:	4293      	cmp	r3, r2
 80023b8:	d013      	beq.n	80023e2 <HAL_GPIO_Init+0x1fe>
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	4a47      	ldr	r2, [pc, #284]	; (80024dc <HAL_GPIO_Init+0x2f8>)
 80023be:	4293      	cmp	r3, r2
 80023c0:	d00d      	beq.n	80023de <HAL_GPIO_Init+0x1fa>
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	4a46      	ldr	r2, [pc, #280]	; (80024e0 <HAL_GPIO_Init+0x2fc>)
 80023c6:	4293      	cmp	r3, r2
 80023c8:	d007      	beq.n	80023da <HAL_GPIO_Init+0x1f6>
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	4a45      	ldr	r2, [pc, #276]	; (80024e4 <HAL_GPIO_Init+0x300>)
 80023ce:	4293      	cmp	r3, r2
 80023d0:	d101      	bne.n	80023d6 <HAL_GPIO_Init+0x1f2>
 80023d2:	2304      	movs	r3, #4
 80023d4:	e008      	b.n	80023e8 <HAL_GPIO_Init+0x204>
 80023d6:	2307      	movs	r3, #7
 80023d8:	e006      	b.n	80023e8 <HAL_GPIO_Init+0x204>
 80023da:	2303      	movs	r3, #3
 80023dc:	e004      	b.n	80023e8 <HAL_GPIO_Init+0x204>
 80023de:	2302      	movs	r3, #2
 80023e0:	e002      	b.n	80023e8 <HAL_GPIO_Init+0x204>
 80023e2:	2301      	movs	r3, #1
 80023e4:	e000      	b.n	80023e8 <HAL_GPIO_Init+0x204>
 80023e6:	2300      	movs	r3, #0
 80023e8:	69fa      	ldr	r2, [r7, #28]
 80023ea:	f002 0203 	and.w	r2, r2, #3
 80023ee:	0092      	lsls	r2, r2, #2
 80023f0:	4093      	lsls	r3, r2
 80023f2:	69ba      	ldr	r2, [r7, #24]
 80023f4:	4313      	orrs	r3, r2
 80023f6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80023f8:	4935      	ldr	r1, [pc, #212]	; (80024d0 <HAL_GPIO_Init+0x2ec>)
 80023fa:	69fb      	ldr	r3, [r7, #28]
 80023fc:	089b      	lsrs	r3, r3, #2
 80023fe:	3302      	adds	r3, #2
 8002400:	69ba      	ldr	r2, [r7, #24]
 8002402:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002406:	4b38      	ldr	r3, [pc, #224]	; (80024e8 <HAL_GPIO_Init+0x304>)
 8002408:	689b      	ldr	r3, [r3, #8]
 800240a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800240c:	693b      	ldr	r3, [r7, #16]
 800240e:	43db      	mvns	r3, r3
 8002410:	69ba      	ldr	r2, [r7, #24]
 8002412:	4013      	ands	r3, r2
 8002414:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002416:	683b      	ldr	r3, [r7, #0]
 8002418:	685b      	ldr	r3, [r3, #4]
 800241a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800241e:	2b00      	cmp	r3, #0
 8002420:	d003      	beq.n	800242a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002422:	69ba      	ldr	r2, [r7, #24]
 8002424:	693b      	ldr	r3, [r7, #16]
 8002426:	4313      	orrs	r3, r2
 8002428:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800242a:	4a2f      	ldr	r2, [pc, #188]	; (80024e8 <HAL_GPIO_Init+0x304>)
 800242c:	69bb      	ldr	r3, [r7, #24]
 800242e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002430:	4b2d      	ldr	r3, [pc, #180]	; (80024e8 <HAL_GPIO_Init+0x304>)
 8002432:	68db      	ldr	r3, [r3, #12]
 8002434:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002436:	693b      	ldr	r3, [r7, #16]
 8002438:	43db      	mvns	r3, r3
 800243a:	69ba      	ldr	r2, [r7, #24]
 800243c:	4013      	ands	r3, r2
 800243e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002440:	683b      	ldr	r3, [r7, #0]
 8002442:	685b      	ldr	r3, [r3, #4]
 8002444:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002448:	2b00      	cmp	r3, #0
 800244a:	d003      	beq.n	8002454 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 800244c:	69ba      	ldr	r2, [r7, #24]
 800244e:	693b      	ldr	r3, [r7, #16]
 8002450:	4313      	orrs	r3, r2
 8002452:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002454:	4a24      	ldr	r2, [pc, #144]	; (80024e8 <HAL_GPIO_Init+0x304>)
 8002456:	69bb      	ldr	r3, [r7, #24]
 8002458:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800245a:	4b23      	ldr	r3, [pc, #140]	; (80024e8 <HAL_GPIO_Init+0x304>)
 800245c:	685b      	ldr	r3, [r3, #4]
 800245e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002460:	693b      	ldr	r3, [r7, #16]
 8002462:	43db      	mvns	r3, r3
 8002464:	69ba      	ldr	r2, [r7, #24]
 8002466:	4013      	ands	r3, r2
 8002468:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800246a:	683b      	ldr	r3, [r7, #0]
 800246c:	685b      	ldr	r3, [r3, #4]
 800246e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002472:	2b00      	cmp	r3, #0
 8002474:	d003      	beq.n	800247e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002476:	69ba      	ldr	r2, [r7, #24]
 8002478:	693b      	ldr	r3, [r7, #16]
 800247a:	4313      	orrs	r3, r2
 800247c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800247e:	4a1a      	ldr	r2, [pc, #104]	; (80024e8 <HAL_GPIO_Init+0x304>)
 8002480:	69bb      	ldr	r3, [r7, #24]
 8002482:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002484:	4b18      	ldr	r3, [pc, #96]	; (80024e8 <HAL_GPIO_Init+0x304>)
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800248a:	693b      	ldr	r3, [r7, #16]
 800248c:	43db      	mvns	r3, r3
 800248e:	69ba      	ldr	r2, [r7, #24]
 8002490:	4013      	ands	r3, r2
 8002492:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002494:	683b      	ldr	r3, [r7, #0]
 8002496:	685b      	ldr	r3, [r3, #4]
 8002498:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800249c:	2b00      	cmp	r3, #0
 800249e:	d003      	beq.n	80024a8 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80024a0:	69ba      	ldr	r2, [r7, #24]
 80024a2:	693b      	ldr	r3, [r7, #16]
 80024a4:	4313      	orrs	r3, r2
 80024a6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80024a8:	4a0f      	ldr	r2, [pc, #60]	; (80024e8 <HAL_GPIO_Init+0x304>)
 80024aa:	69bb      	ldr	r3, [r7, #24]
 80024ac:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80024ae:	69fb      	ldr	r3, [r7, #28]
 80024b0:	3301      	adds	r3, #1
 80024b2:	61fb      	str	r3, [r7, #28]
 80024b4:	69fb      	ldr	r3, [r7, #28]
 80024b6:	2b0f      	cmp	r3, #15
 80024b8:	f67f aea2 	bls.w	8002200 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80024bc:	bf00      	nop
 80024be:	bf00      	nop
 80024c0:	3724      	adds	r7, #36	; 0x24
 80024c2:	46bd      	mov	sp, r7
 80024c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c8:	4770      	bx	lr
 80024ca:	bf00      	nop
 80024cc:	40023800 	.word	0x40023800
 80024d0:	40013800 	.word	0x40013800
 80024d4:	40020000 	.word	0x40020000
 80024d8:	40020400 	.word	0x40020400
 80024dc:	40020800 	.word	0x40020800
 80024e0:	40020c00 	.word	0x40020c00
 80024e4:	40021000 	.word	0x40021000
 80024e8:	40013c00 	.word	0x40013c00

080024ec <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80024ec:	b480      	push	{r7}
 80024ee:	b087      	sub	sp, #28
 80024f0:	af00      	add	r7, sp, #0
 80024f2:	6078      	str	r0, [r7, #4]
 80024f4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80024f6:	2300      	movs	r3, #0
 80024f8:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 80024fa:	2300      	movs	r3, #0
 80024fc:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 80024fe:	2300      	movs	r3, #0
 8002500:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002502:	2300      	movs	r3, #0
 8002504:	617b      	str	r3, [r7, #20]
 8002506:	e0bb      	b.n	8002680 <HAL_GPIO_DeInit+0x194>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002508:	2201      	movs	r2, #1
 800250a:	697b      	ldr	r3, [r7, #20]
 800250c:	fa02 f303 	lsl.w	r3, r2, r3
 8002510:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 8002512:	683a      	ldr	r2, [r7, #0]
 8002514:	693b      	ldr	r3, [r7, #16]
 8002516:	4013      	ands	r3, r2
 8002518:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 800251a:	68fa      	ldr	r2, [r7, #12]
 800251c:	693b      	ldr	r3, [r7, #16]
 800251e:	429a      	cmp	r2, r3
 8002520:	f040 80ab 	bne.w	800267a <HAL_GPIO_DeInit+0x18e>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 8002524:	4a5c      	ldr	r2, [pc, #368]	; (8002698 <HAL_GPIO_DeInit+0x1ac>)
 8002526:	697b      	ldr	r3, [r7, #20]
 8002528:	089b      	lsrs	r3, r3, #2
 800252a:	3302      	adds	r3, #2
 800252c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002530:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 8002532:	697b      	ldr	r3, [r7, #20]
 8002534:	f003 0303 	and.w	r3, r3, #3
 8002538:	009b      	lsls	r3, r3, #2
 800253a:	220f      	movs	r2, #15
 800253c:	fa02 f303 	lsl.w	r3, r2, r3
 8002540:	68ba      	ldr	r2, [r7, #8]
 8002542:	4013      	ands	r3, r2
 8002544:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	4a54      	ldr	r2, [pc, #336]	; (800269c <HAL_GPIO_DeInit+0x1b0>)
 800254a:	4293      	cmp	r3, r2
 800254c:	d019      	beq.n	8002582 <HAL_GPIO_DeInit+0x96>
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	4a53      	ldr	r2, [pc, #332]	; (80026a0 <HAL_GPIO_DeInit+0x1b4>)
 8002552:	4293      	cmp	r3, r2
 8002554:	d013      	beq.n	800257e <HAL_GPIO_DeInit+0x92>
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	4a52      	ldr	r2, [pc, #328]	; (80026a4 <HAL_GPIO_DeInit+0x1b8>)
 800255a:	4293      	cmp	r3, r2
 800255c:	d00d      	beq.n	800257a <HAL_GPIO_DeInit+0x8e>
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	4a51      	ldr	r2, [pc, #324]	; (80026a8 <HAL_GPIO_DeInit+0x1bc>)
 8002562:	4293      	cmp	r3, r2
 8002564:	d007      	beq.n	8002576 <HAL_GPIO_DeInit+0x8a>
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	4a50      	ldr	r2, [pc, #320]	; (80026ac <HAL_GPIO_DeInit+0x1c0>)
 800256a:	4293      	cmp	r3, r2
 800256c:	d101      	bne.n	8002572 <HAL_GPIO_DeInit+0x86>
 800256e:	2304      	movs	r3, #4
 8002570:	e008      	b.n	8002584 <HAL_GPIO_DeInit+0x98>
 8002572:	2307      	movs	r3, #7
 8002574:	e006      	b.n	8002584 <HAL_GPIO_DeInit+0x98>
 8002576:	2303      	movs	r3, #3
 8002578:	e004      	b.n	8002584 <HAL_GPIO_DeInit+0x98>
 800257a:	2302      	movs	r3, #2
 800257c:	e002      	b.n	8002584 <HAL_GPIO_DeInit+0x98>
 800257e:	2301      	movs	r3, #1
 8002580:	e000      	b.n	8002584 <HAL_GPIO_DeInit+0x98>
 8002582:	2300      	movs	r3, #0
 8002584:	697a      	ldr	r2, [r7, #20]
 8002586:	f002 0203 	and.w	r2, r2, #3
 800258a:	0092      	lsls	r2, r2, #2
 800258c:	4093      	lsls	r3, r2
 800258e:	68ba      	ldr	r2, [r7, #8]
 8002590:	429a      	cmp	r2, r3
 8002592:	d132      	bne.n	80025fa <HAL_GPIO_DeInit+0x10e>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8002594:	4b46      	ldr	r3, [pc, #280]	; (80026b0 <HAL_GPIO_DeInit+0x1c4>)
 8002596:	681a      	ldr	r2, [r3, #0]
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	43db      	mvns	r3, r3
 800259c:	4944      	ldr	r1, [pc, #272]	; (80026b0 <HAL_GPIO_DeInit+0x1c4>)
 800259e:	4013      	ands	r3, r2
 80025a0:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 80025a2:	4b43      	ldr	r3, [pc, #268]	; (80026b0 <HAL_GPIO_DeInit+0x1c4>)
 80025a4:	685a      	ldr	r2, [r3, #4]
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	43db      	mvns	r3, r3
 80025aa:	4941      	ldr	r1, [pc, #260]	; (80026b0 <HAL_GPIO_DeInit+0x1c4>)
 80025ac:	4013      	ands	r3, r2
 80025ae:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 80025b0:	4b3f      	ldr	r3, [pc, #252]	; (80026b0 <HAL_GPIO_DeInit+0x1c4>)
 80025b2:	68da      	ldr	r2, [r3, #12]
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	43db      	mvns	r3, r3
 80025b8:	493d      	ldr	r1, [pc, #244]	; (80026b0 <HAL_GPIO_DeInit+0x1c4>)
 80025ba:	4013      	ands	r3, r2
 80025bc:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 80025be:	4b3c      	ldr	r3, [pc, #240]	; (80026b0 <HAL_GPIO_DeInit+0x1c4>)
 80025c0:	689a      	ldr	r2, [r3, #8]
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	43db      	mvns	r3, r3
 80025c6:	493a      	ldr	r1, [pc, #232]	; (80026b0 <HAL_GPIO_DeInit+0x1c4>)
 80025c8:	4013      	ands	r3, r2
 80025ca:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 80025cc:	697b      	ldr	r3, [r7, #20]
 80025ce:	f003 0303 	and.w	r3, r3, #3
 80025d2:	009b      	lsls	r3, r3, #2
 80025d4:	220f      	movs	r2, #15
 80025d6:	fa02 f303 	lsl.w	r3, r2, r3
 80025da:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 80025dc:	4a2e      	ldr	r2, [pc, #184]	; (8002698 <HAL_GPIO_DeInit+0x1ac>)
 80025de:	697b      	ldr	r3, [r7, #20]
 80025e0:	089b      	lsrs	r3, r3, #2
 80025e2:	3302      	adds	r3, #2
 80025e4:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80025e8:	68bb      	ldr	r3, [r7, #8]
 80025ea:	43da      	mvns	r2, r3
 80025ec:	482a      	ldr	r0, [pc, #168]	; (8002698 <HAL_GPIO_DeInit+0x1ac>)
 80025ee:	697b      	ldr	r3, [r7, #20]
 80025f0:	089b      	lsrs	r3, r3, #2
 80025f2:	400a      	ands	r2, r1
 80025f4:	3302      	adds	r3, #2
 80025f6:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681a      	ldr	r2, [r3, #0]
 80025fe:	697b      	ldr	r3, [r7, #20]
 8002600:	005b      	lsls	r3, r3, #1
 8002602:	2103      	movs	r1, #3
 8002604:	fa01 f303 	lsl.w	r3, r1, r3
 8002608:	43db      	mvns	r3, r3
 800260a:	401a      	ands	r2, r3
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002610:	697b      	ldr	r3, [r7, #20]
 8002612:	08da      	lsrs	r2, r3, #3
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	3208      	adds	r2, #8
 8002618:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800261c:	697b      	ldr	r3, [r7, #20]
 800261e:	f003 0307 	and.w	r3, r3, #7
 8002622:	009b      	lsls	r3, r3, #2
 8002624:	220f      	movs	r2, #15
 8002626:	fa02 f303 	lsl.w	r3, r2, r3
 800262a:	43db      	mvns	r3, r3
 800262c:	697a      	ldr	r2, [r7, #20]
 800262e:	08d2      	lsrs	r2, r2, #3
 8002630:	4019      	ands	r1, r3
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	3208      	adds	r2, #8
 8002636:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	68da      	ldr	r2, [r3, #12]
 800263e:	697b      	ldr	r3, [r7, #20]
 8002640:	005b      	lsls	r3, r3, #1
 8002642:	2103      	movs	r1, #3
 8002644:	fa01 f303 	lsl.w	r3, r1, r3
 8002648:	43db      	mvns	r3, r3
 800264a:	401a      	ands	r2, r3
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	685a      	ldr	r2, [r3, #4]
 8002654:	2101      	movs	r1, #1
 8002656:	697b      	ldr	r3, [r7, #20]
 8002658:	fa01 f303 	lsl.w	r3, r1, r3
 800265c:	43db      	mvns	r3, r3
 800265e:	401a      	ands	r2, r3
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	689a      	ldr	r2, [r3, #8]
 8002668:	697b      	ldr	r3, [r7, #20]
 800266a:	005b      	lsls	r3, r3, #1
 800266c:	2103      	movs	r1, #3
 800266e:	fa01 f303 	lsl.w	r3, r1, r3
 8002672:	43db      	mvns	r3, r3
 8002674:	401a      	ands	r2, r3
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800267a:	697b      	ldr	r3, [r7, #20]
 800267c:	3301      	adds	r3, #1
 800267e:	617b      	str	r3, [r7, #20]
 8002680:	697b      	ldr	r3, [r7, #20]
 8002682:	2b0f      	cmp	r3, #15
 8002684:	f67f af40 	bls.w	8002508 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8002688:	bf00      	nop
 800268a:	bf00      	nop
 800268c:	371c      	adds	r7, #28
 800268e:	46bd      	mov	sp, r7
 8002690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002694:	4770      	bx	lr
 8002696:	bf00      	nop
 8002698:	40013800 	.word	0x40013800
 800269c:	40020000 	.word	0x40020000
 80026a0:	40020400 	.word	0x40020400
 80026a4:	40020800 	.word	0x40020800
 80026a8:	40020c00 	.word	0x40020c00
 80026ac:	40021000 	.word	0x40021000
 80026b0:	40013c00 	.word	0x40013c00

080026b4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80026b4:	b480      	push	{r7}
 80026b6:	b085      	sub	sp, #20
 80026b8:	af00      	add	r7, sp, #0
 80026ba:	6078      	str	r0, [r7, #4]
 80026bc:	460b      	mov	r3, r1
 80026be:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	691a      	ldr	r2, [r3, #16]
 80026c4:	887b      	ldrh	r3, [r7, #2]
 80026c6:	4013      	ands	r3, r2
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d002      	beq.n	80026d2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80026cc:	2301      	movs	r3, #1
 80026ce:	73fb      	strb	r3, [r7, #15]
 80026d0:	e001      	b.n	80026d6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80026d2:	2300      	movs	r3, #0
 80026d4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80026d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80026d8:	4618      	mov	r0, r3
 80026da:	3714      	adds	r7, #20
 80026dc:	46bd      	mov	sp, r7
 80026de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e2:	4770      	bx	lr

080026e4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80026e4:	b480      	push	{r7}
 80026e6:	b083      	sub	sp, #12
 80026e8:	af00      	add	r7, sp, #0
 80026ea:	6078      	str	r0, [r7, #4]
 80026ec:	460b      	mov	r3, r1
 80026ee:	807b      	strh	r3, [r7, #2]
 80026f0:	4613      	mov	r3, r2
 80026f2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80026f4:	787b      	ldrb	r3, [r7, #1]
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d003      	beq.n	8002702 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80026fa:	887a      	ldrh	r2, [r7, #2]
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002700:	e003      	b.n	800270a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002702:	887b      	ldrh	r3, [r7, #2]
 8002704:	041a      	lsls	r2, r3, #16
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	619a      	str	r2, [r3, #24]
}
 800270a:	bf00      	nop
 800270c:	370c      	adds	r7, #12
 800270e:	46bd      	mov	sp, r7
 8002710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002714:	4770      	bx	lr

08002716 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002716:	b480      	push	{r7}
 8002718:	b085      	sub	sp, #20
 800271a:	af00      	add	r7, sp, #0
 800271c:	6078      	str	r0, [r7, #4]
 800271e:	460b      	mov	r3, r1
 8002720:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	695b      	ldr	r3, [r3, #20]
 8002726:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002728:	887a      	ldrh	r2, [r7, #2]
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	4013      	ands	r3, r2
 800272e:	041a      	lsls	r2, r3, #16
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	43d9      	mvns	r1, r3
 8002734:	887b      	ldrh	r3, [r7, #2]
 8002736:	400b      	ands	r3, r1
 8002738:	431a      	orrs	r2, r3
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	619a      	str	r2, [r3, #24]
}
 800273e:	bf00      	nop
 8002740:	3714      	adds	r7, #20
 8002742:	46bd      	mov	sp, r7
 8002744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002748:	4770      	bx	lr
	...

0800274c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800274c:	b580      	push	{r7, lr}
 800274e:	b086      	sub	sp, #24
 8002750:	af00      	add	r7, sp, #0
 8002752:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	2b00      	cmp	r3, #0
 8002758:	d101      	bne.n	800275e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800275a:	2301      	movs	r3, #1
 800275c:	e267      	b.n	8002c2e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	f003 0301 	and.w	r3, r3, #1
 8002766:	2b00      	cmp	r3, #0
 8002768:	d075      	beq.n	8002856 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800276a:	4b88      	ldr	r3, [pc, #544]	; (800298c <HAL_RCC_OscConfig+0x240>)
 800276c:	689b      	ldr	r3, [r3, #8]
 800276e:	f003 030c 	and.w	r3, r3, #12
 8002772:	2b04      	cmp	r3, #4
 8002774:	d00c      	beq.n	8002790 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002776:	4b85      	ldr	r3, [pc, #532]	; (800298c <HAL_RCC_OscConfig+0x240>)
 8002778:	689b      	ldr	r3, [r3, #8]
 800277a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800277e:	2b08      	cmp	r3, #8
 8002780:	d112      	bne.n	80027a8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002782:	4b82      	ldr	r3, [pc, #520]	; (800298c <HAL_RCC_OscConfig+0x240>)
 8002784:	685b      	ldr	r3, [r3, #4]
 8002786:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800278a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800278e:	d10b      	bne.n	80027a8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002790:	4b7e      	ldr	r3, [pc, #504]	; (800298c <HAL_RCC_OscConfig+0x240>)
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002798:	2b00      	cmp	r3, #0
 800279a:	d05b      	beq.n	8002854 <HAL_RCC_OscConfig+0x108>
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	685b      	ldr	r3, [r3, #4]
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d157      	bne.n	8002854 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80027a4:	2301      	movs	r3, #1
 80027a6:	e242      	b.n	8002c2e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	685b      	ldr	r3, [r3, #4]
 80027ac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80027b0:	d106      	bne.n	80027c0 <HAL_RCC_OscConfig+0x74>
 80027b2:	4b76      	ldr	r3, [pc, #472]	; (800298c <HAL_RCC_OscConfig+0x240>)
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	4a75      	ldr	r2, [pc, #468]	; (800298c <HAL_RCC_OscConfig+0x240>)
 80027b8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80027bc:	6013      	str	r3, [r2, #0]
 80027be:	e01d      	b.n	80027fc <HAL_RCC_OscConfig+0xb0>
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	685b      	ldr	r3, [r3, #4]
 80027c4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80027c8:	d10c      	bne.n	80027e4 <HAL_RCC_OscConfig+0x98>
 80027ca:	4b70      	ldr	r3, [pc, #448]	; (800298c <HAL_RCC_OscConfig+0x240>)
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	4a6f      	ldr	r2, [pc, #444]	; (800298c <HAL_RCC_OscConfig+0x240>)
 80027d0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80027d4:	6013      	str	r3, [r2, #0]
 80027d6:	4b6d      	ldr	r3, [pc, #436]	; (800298c <HAL_RCC_OscConfig+0x240>)
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	4a6c      	ldr	r2, [pc, #432]	; (800298c <HAL_RCC_OscConfig+0x240>)
 80027dc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80027e0:	6013      	str	r3, [r2, #0]
 80027e2:	e00b      	b.n	80027fc <HAL_RCC_OscConfig+0xb0>
 80027e4:	4b69      	ldr	r3, [pc, #420]	; (800298c <HAL_RCC_OscConfig+0x240>)
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	4a68      	ldr	r2, [pc, #416]	; (800298c <HAL_RCC_OscConfig+0x240>)
 80027ea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80027ee:	6013      	str	r3, [r2, #0]
 80027f0:	4b66      	ldr	r3, [pc, #408]	; (800298c <HAL_RCC_OscConfig+0x240>)
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	4a65      	ldr	r2, [pc, #404]	; (800298c <HAL_RCC_OscConfig+0x240>)
 80027f6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80027fa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	685b      	ldr	r3, [r3, #4]
 8002800:	2b00      	cmp	r3, #0
 8002802:	d013      	beq.n	800282c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002804:	f7ff fb5a 	bl	8001ebc <HAL_GetTick>
 8002808:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800280a:	e008      	b.n	800281e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800280c:	f7ff fb56 	bl	8001ebc <HAL_GetTick>
 8002810:	4602      	mov	r2, r0
 8002812:	693b      	ldr	r3, [r7, #16]
 8002814:	1ad3      	subs	r3, r2, r3
 8002816:	2b64      	cmp	r3, #100	; 0x64
 8002818:	d901      	bls.n	800281e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800281a:	2303      	movs	r3, #3
 800281c:	e207      	b.n	8002c2e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800281e:	4b5b      	ldr	r3, [pc, #364]	; (800298c <HAL_RCC_OscConfig+0x240>)
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002826:	2b00      	cmp	r3, #0
 8002828:	d0f0      	beq.n	800280c <HAL_RCC_OscConfig+0xc0>
 800282a:	e014      	b.n	8002856 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800282c:	f7ff fb46 	bl	8001ebc <HAL_GetTick>
 8002830:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002832:	e008      	b.n	8002846 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002834:	f7ff fb42 	bl	8001ebc <HAL_GetTick>
 8002838:	4602      	mov	r2, r0
 800283a:	693b      	ldr	r3, [r7, #16]
 800283c:	1ad3      	subs	r3, r2, r3
 800283e:	2b64      	cmp	r3, #100	; 0x64
 8002840:	d901      	bls.n	8002846 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002842:	2303      	movs	r3, #3
 8002844:	e1f3      	b.n	8002c2e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002846:	4b51      	ldr	r3, [pc, #324]	; (800298c <HAL_RCC_OscConfig+0x240>)
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800284e:	2b00      	cmp	r3, #0
 8002850:	d1f0      	bne.n	8002834 <HAL_RCC_OscConfig+0xe8>
 8002852:	e000      	b.n	8002856 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002854:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	f003 0302 	and.w	r3, r3, #2
 800285e:	2b00      	cmp	r3, #0
 8002860:	d063      	beq.n	800292a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002862:	4b4a      	ldr	r3, [pc, #296]	; (800298c <HAL_RCC_OscConfig+0x240>)
 8002864:	689b      	ldr	r3, [r3, #8]
 8002866:	f003 030c 	and.w	r3, r3, #12
 800286a:	2b00      	cmp	r3, #0
 800286c:	d00b      	beq.n	8002886 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800286e:	4b47      	ldr	r3, [pc, #284]	; (800298c <HAL_RCC_OscConfig+0x240>)
 8002870:	689b      	ldr	r3, [r3, #8]
 8002872:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002876:	2b08      	cmp	r3, #8
 8002878:	d11c      	bne.n	80028b4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800287a:	4b44      	ldr	r3, [pc, #272]	; (800298c <HAL_RCC_OscConfig+0x240>)
 800287c:	685b      	ldr	r3, [r3, #4]
 800287e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002882:	2b00      	cmp	r3, #0
 8002884:	d116      	bne.n	80028b4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002886:	4b41      	ldr	r3, [pc, #260]	; (800298c <HAL_RCC_OscConfig+0x240>)
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	f003 0302 	and.w	r3, r3, #2
 800288e:	2b00      	cmp	r3, #0
 8002890:	d005      	beq.n	800289e <HAL_RCC_OscConfig+0x152>
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	68db      	ldr	r3, [r3, #12]
 8002896:	2b01      	cmp	r3, #1
 8002898:	d001      	beq.n	800289e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800289a:	2301      	movs	r3, #1
 800289c:	e1c7      	b.n	8002c2e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800289e:	4b3b      	ldr	r3, [pc, #236]	; (800298c <HAL_RCC_OscConfig+0x240>)
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	691b      	ldr	r3, [r3, #16]
 80028aa:	00db      	lsls	r3, r3, #3
 80028ac:	4937      	ldr	r1, [pc, #220]	; (800298c <HAL_RCC_OscConfig+0x240>)
 80028ae:	4313      	orrs	r3, r2
 80028b0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80028b2:	e03a      	b.n	800292a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	68db      	ldr	r3, [r3, #12]
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d020      	beq.n	80028fe <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80028bc:	4b34      	ldr	r3, [pc, #208]	; (8002990 <HAL_RCC_OscConfig+0x244>)
 80028be:	2201      	movs	r2, #1
 80028c0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028c2:	f7ff fafb 	bl	8001ebc <HAL_GetTick>
 80028c6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80028c8:	e008      	b.n	80028dc <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80028ca:	f7ff faf7 	bl	8001ebc <HAL_GetTick>
 80028ce:	4602      	mov	r2, r0
 80028d0:	693b      	ldr	r3, [r7, #16]
 80028d2:	1ad3      	subs	r3, r2, r3
 80028d4:	2b02      	cmp	r3, #2
 80028d6:	d901      	bls.n	80028dc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80028d8:	2303      	movs	r3, #3
 80028da:	e1a8      	b.n	8002c2e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80028dc:	4b2b      	ldr	r3, [pc, #172]	; (800298c <HAL_RCC_OscConfig+0x240>)
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	f003 0302 	and.w	r3, r3, #2
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d0f0      	beq.n	80028ca <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80028e8:	4b28      	ldr	r3, [pc, #160]	; (800298c <HAL_RCC_OscConfig+0x240>)
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	691b      	ldr	r3, [r3, #16]
 80028f4:	00db      	lsls	r3, r3, #3
 80028f6:	4925      	ldr	r1, [pc, #148]	; (800298c <HAL_RCC_OscConfig+0x240>)
 80028f8:	4313      	orrs	r3, r2
 80028fa:	600b      	str	r3, [r1, #0]
 80028fc:	e015      	b.n	800292a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80028fe:	4b24      	ldr	r3, [pc, #144]	; (8002990 <HAL_RCC_OscConfig+0x244>)
 8002900:	2200      	movs	r2, #0
 8002902:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002904:	f7ff fada 	bl	8001ebc <HAL_GetTick>
 8002908:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800290a:	e008      	b.n	800291e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800290c:	f7ff fad6 	bl	8001ebc <HAL_GetTick>
 8002910:	4602      	mov	r2, r0
 8002912:	693b      	ldr	r3, [r7, #16]
 8002914:	1ad3      	subs	r3, r2, r3
 8002916:	2b02      	cmp	r3, #2
 8002918:	d901      	bls.n	800291e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800291a:	2303      	movs	r3, #3
 800291c:	e187      	b.n	8002c2e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800291e:	4b1b      	ldr	r3, [pc, #108]	; (800298c <HAL_RCC_OscConfig+0x240>)
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	f003 0302 	and.w	r3, r3, #2
 8002926:	2b00      	cmp	r3, #0
 8002928:	d1f0      	bne.n	800290c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	f003 0308 	and.w	r3, r3, #8
 8002932:	2b00      	cmp	r3, #0
 8002934:	d036      	beq.n	80029a4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	695b      	ldr	r3, [r3, #20]
 800293a:	2b00      	cmp	r3, #0
 800293c:	d016      	beq.n	800296c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800293e:	4b15      	ldr	r3, [pc, #84]	; (8002994 <HAL_RCC_OscConfig+0x248>)
 8002940:	2201      	movs	r2, #1
 8002942:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002944:	f7ff faba 	bl	8001ebc <HAL_GetTick>
 8002948:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800294a:	e008      	b.n	800295e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800294c:	f7ff fab6 	bl	8001ebc <HAL_GetTick>
 8002950:	4602      	mov	r2, r0
 8002952:	693b      	ldr	r3, [r7, #16]
 8002954:	1ad3      	subs	r3, r2, r3
 8002956:	2b02      	cmp	r3, #2
 8002958:	d901      	bls.n	800295e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800295a:	2303      	movs	r3, #3
 800295c:	e167      	b.n	8002c2e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800295e:	4b0b      	ldr	r3, [pc, #44]	; (800298c <HAL_RCC_OscConfig+0x240>)
 8002960:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002962:	f003 0302 	and.w	r3, r3, #2
 8002966:	2b00      	cmp	r3, #0
 8002968:	d0f0      	beq.n	800294c <HAL_RCC_OscConfig+0x200>
 800296a:	e01b      	b.n	80029a4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800296c:	4b09      	ldr	r3, [pc, #36]	; (8002994 <HAL_RCC_OscConfig+0x248>)
 800296e:	2200      	movs	r2, #0
 8002970:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002972:	f7ff faa3 	bl	8001ebc <HAL_GetTick>
 8002976:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002978:	e00e      	b.n	8002998 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800297a:	f7ff fa9f 	bl	8001ebc <HAL_GetTick>
 800297e:	4602      	mov	r2, r0
 8002980:	693b      	ldr	r3, [r7, #16]
 8002982:	1ad3      	subs	r3, r2, r3
 8002984:	2b02      	cmp	r3, #2
 8002986:	d907      	bls.n	8002998 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002988:	2303      	movs	r3, #3
 800298a:	e150      	b.n	8002c2e <HAL_RCC_OscConfig+0x4e2>
 800298c:	40023800 	.word	0x40023800
 8002990:	42470000 	.word	0x42470000
 8002994:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002998:	4b88      	ldr	r3, [pc, #544]	; (8002bbc <HAL_RCC_OscConfig+0x470>)
 800299a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800299c:	f003 0302 	and.w	r3, r3, #2
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d1ea      	bne.n	800297a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	f003 0304 	and.w	r3, r3, #4
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	f000 8097 	beq.w	8002ae0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80029b2:	2300      	movs	r3, #0
 80029b4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80029b6:	4b81      	ldr	r3, [pc, #516]	; (8002bbc <HAL_RCC_OscConfig+0x470>)
 80029b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d10f      	bne.n	80029e2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80029c2:	2300      	movs	r3, #0
 80029c4:	60bb      	str	r3, [r7, #8]
 80029c6:	4b7d      	ldr	r3, [pc, #500]	; (8002bbc <HAL_RCC_OscConfig+0x470>)
 80029c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029ca:	4a7c      	ldr	r2, [pc, #496]	; (8002bbc <HAL_RCC_OscConfig+0x470>)
 80029cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80029d0:	6413      	str	r3, [r2, #64]	; 0x40
 80029d2:	4b7a      	ldr	r3, [pc, #488]	; (8002bbc <HAL_RCC_OscConfig+0x470>)
 80029d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80029da:	60bb      	str	r3, [r7, #8]
 80029dc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80029de:	2301      	movs	r3, #1
 80029e0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80029e2:	4b77      	ldr	r3, [pc, #476]	; (8002bc0 <HAL_RCC_OscConfig+0x474>)
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d118      	bne.n	8002a20 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80029ee:	4b74      	ldr	r3, [pc, #464]	; (8002bc0 <HAL_RCC_OscConfig+0x474>)
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	4a73      	ldr	r2, [pc, #460]	; (8002bc0 <HAL_RCC_OscConfig+0x474>)
 80029f4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80029f8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80029fa:	f7ff fa5f 	bl	8001ebc <HAL_GetTick>
 80029fe:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a00:	e008      	b.n	8002a14 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002a02:	f7ff fa5b 	bl	8001ebc <HAL_GetTick>
 8002a06:	4602      	mov	r2, r0
 8002a08:	693b      	ldr	r3, [r7, #16]
 8002a0a:	1ad3      	subs	r3, r2, r3
 8002a0c:	2b02      	cmp	r3, #2
 8002a0e:	d901      	bls.n	8002a14 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002a10:	2303      	movs	r3, #3
 8002a12:	e10c      	b.n	8002c2e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a14:	4b6a      	ldr	r3, [pc, #424]	; (8002bc0 <HAL_RCC_OscConfig+0x474>)
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d0f0      	beq.n	8002a02 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	689b      	ldr	r3, [r3, #8]
 8002a24:	2b01      	cmp	r3, #1
 8002a26:	d106      	bne.n	8002a36 <HAL_RCC_OscConfig+0x2ea>
 8002a28:	4b64      	ldr	r3, [pc, #400]	; (8002bbc <HAL_RCC_OscConfig+0x470>)
 8002a2a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a2c:	4a63      	ldr	r2, [pc, #396]	; (8002bbc <HAL_RCC_OscConfig+0x470>)
 8002a2e:	f043 0301 	orr.w	r3, r3, #1
 8002a32:	6713      	str	r3, [r2, #112]	; 0x70
 8002a34:	e01c      	b.n	8002a70 <HAL_RCC_OscConfig+0x324>
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	689b      	ldr	r3, [r3, #8]
 8002a3a:	2b05      	cmp	r3, #5
 8002a3c:	d10c      	bne.n	8002a58 <HAL_RCC_OscConfig+0x30c>
 8002a3e:	4b5f      	ldr	r3, [pc, #380]	; (8002bbc <HAL_RCC_OscConfig+0x470>)
 8002a40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a42:	4a5e      	ldr	r2, [pc, #376]	; (8002bbc <HAL_RCC_OscConfig+0x470>)
 8002a44:	f043 0304 	orr.w	r3, r3, #4
 8002a48:	6713      	str	r3, [r2, #112]	; 0x70
 8002a4a:	4b5c      	ldr	r3, [pc, #368]	; (8002bbc <HAL_RCC_OscConfig+0x470>)
 8002a4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a4e:	4a5b      	ldr	r2, [pc, #364]	; (8002bbc <HAL_RCC_OscConfig+0x470>)
 8002a50:	f043 0301 	orr.w	r3, r3, #1
 8002a54:	6713      	str	r3, [r2, #112]	; 0x70
 8002a56:	e00b      	b.n	8002a70 <HAL_RCC_OscConfig+0x324>
 8002a58:	4b58      	ldr	r3, [pc, #352]	; (8002bbc <HAL_RCC_OscConfig+0x470>)
 8002a5a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a5c:	4a57      	ldr	r2, [pc, #348]	; (8002bbc <HAL_RCC_OscConfig+0x470>)
 8002a5e:	f023 0301 	bic.w	r3, r3, #1
 8002a62:	6713      	str	r3, [r2, #112]	; 0x70
 8002a64:	4b55      	ldr	r3, [pc, #340]	; (8002bbc <HAL_RCC_OscConfig+0x470>)
 8002a66:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a68:	4a54      	ldr	r2, [pc, #336]	; (8002bbc <HAL_RCC_OscConfig+0x470>)
 8002a6a:	f023 0304 	bic.w	r3, r3, #4
 8002a6e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	689b      	ldr	r3, [r3, #8]
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d015      	beq.n	8002aa4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a78:	f7ff fa20 	bl	8001ebc <HAL_GetTick>
 8002a7c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a7e:	e00a      	b.n	8002a96 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002a80:	f7ff fa1c 	bl	8001ebc <HAL_GetTick>
 8002a84:	4602      	mov	r2, r0
 8002a86:	693b      	ldr	r3, [r7, #16]
 8002a88:	1ad3      	subs	r3, r2, r3
 8002a8a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a8e:	4293      	cmp	r3, r2
 8002a90:	d901      	bls.n	8002a96 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002a92:	2303      	movs	r3, #3
 8002a94:	e0cb      	b.n	8002c2e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a96:	4b49      	ldr	r3, [pc, #292]	; (8002bbc <HAL_RCC_OscConfig+0x470>)
 8002a98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a9a:	f003 0302 	and.w	r3, r3, #2
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d0ee      	beq.n	8002a80 <HAL_RCC_OscConfig+0x334>
 8002aa2:	e014      	b.n	8002ace <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002aa4:	f7ff fa0a 	bl	8001ebc <HAL_GetTick>
 8002aa8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002aaa:	e00a      	b.n	8002ac2 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002aac:	f7ff fa06 	bl	8001ebc <HAL_GetTick>
 8002ab0:	4602      	mov	r2, r0
 8002ab2:	693b      	ldr	r3, [r7, #16]
 8002ab4:	1ad3      	subs	r3, r2, r3
 8002ab6:	f241 3288 	movw	r2, #5000	; 0x1388
 8002aba:	4293      	cmp	r3, r2
 8002abc:	d901      	bls.n	8002ac2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002abe:	2303      	movs	r3, #3
 8002ac0:	e0b5      	b.n	8002c2e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002ac2:	4b3e      	ldr	r3, [pc, #248]	; (8002bbc <HAL_RCC_OscConfig+0x470>)
 8002ac4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ac6:	f003 0302 	and.w	r3, r3, #2
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d1ee      	bne.n	8002aac <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002ace:	7dfb      	ldrb	r3, [r7, #23]
 8002ad0:	2b01      	cmp	r3, #1
 8002ad2:	d105      	bne.n	8002ae0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002ad4:	4b39      	ldr	r3, [pc, #228]	; (8002bbc <HAL_RCC_OscConfig+0x470>)
 8002ad6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ad8:	4a38      	ldr	r2, [pc, #224]	; (8002bbc <HAL_RCC_OscConfig+0x470>)
 8002ada:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002ade:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	699b      	ldr	r3, [r3, #24]
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	f000 80a1 	beq.w	8002c2c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002aea:	4b34      	ldr	r3, [pc, #208]	; (8002bbc <HAL_RCC_OscConfig+0x470>)
 8002aec:	689b      	ldr	r3, [r3, #8]
 8002aee:	f003 030c 	and.w	r3, r3, #12
 8002af2:	2b08      	cmp	r3, #8
 8002af4:	d05c      	beq.n	8002bb0 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	699b      	ldr	r3, [r3, #24]
 8002afa:	2b02      	cmp	r3, #2
 8002afc:	d141      	bne.n	8002b82 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002afe:	4b31      	ldr	r3, [pc, #196]	; (8002bc4 <HAL_RCC_OscConfig+0x478>)
 8002b00:	2200      	movs	r2, #0
 8002b02:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b04:	f7ff f9da 	bl	8001ebc <HAL_GetTick>
 8002b08:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002b0a:	e008      	b.n	8002b1e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002b0c:	f7ff f9d6 	bl	8001ebc <HAL_GetTick>
 8002b10:	4602      	mov	r2, r0
 8002b12:	693b      	ldr	r3, [r7, #16]
 8002b14:	1ad3      	subs	r3, r2, r3
 8002b16:	2b02      	cmp	r3, #2
 8002b18:	d901      	bls.n	8002b1e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002b1a:	2303      	movs	r3, #3
 8002b1c:	e087      	b.n	8002c2e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002b1e:	4b27      	ldr	r3, [pc, #156]	; (8002bbc <HAL_RCC_OscConfig+0x470>)
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d1f0      	bne.n	8002b0c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	69da      	ldr	r2, [r3, #28]
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	6a1b      	ldr	r3, [r3, #32]
 8002b32:	431a      	orrs	r2, r3
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b38:	019b      	lsls	r3, r3, #6
 8002b3a:	431a      	orrs	r2, r3
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b40:	085b      	lsrs	r3, r3, #1
 8002b42:	3b01      	subs	r3, #1
 8002b44:	041b      	lsls	r3, r3, #16
 8002b46:	431a      	orrs	r2, r3
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b4c:	061b      	lsls	r3, r3, #24
 8002b4e:	491b      	ldr	r1, [pc, #108]	; (8002bbc <HAL_RCC_OscConfig+0x470>)
 8002b50:	4313      	orrs	r3, r2
 8002b52:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002b54:	4b1b      	ldr	r3, [pc, #108]	; (8002bc4 <HAL_RCC_OscConfig+0x478>)
 8002b56:	2201      	movs	r2, #1
 8002b58:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b5a:	f7ff f9af 	bl	8001ebc <HAL_GetTick>
 8002b5e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002b60:	e008      	b.n	8002b74 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002b62:	f7ff f9ab 	bl	8001ebc <HAL_GetTick>
 8002b66:	4602      	mov	r2, r0
 8002b68:	693b      	ldr	r3, [r7, #16]
 8002b6a:	1ad3      	subs	r3, r2, r3
 8002b6c:	2b02      	cmp	r3, #2
 8002b6e:	d901      	bls.n	8002b74 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002b70:	2303      	movs	r3, #3
 8002b72:	e05c      	b.n	8002c2e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002b74:	4b11      	ldr	r3, [pc, #68]	; (8002bbc <HAL_RCC_OscConfig+0x470>)
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d0f0      	beq.n	8002b62 <HAL_RCC_OscConfig+0x416>
 8002b80:	e054      	b.n	8002c2c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b82:	4b10      	ldr	r3, [pc, #64]	; (8002bc4 <HAL_RCC_OscConfig+0x478>)
 8002b84:	2200      	movs	r2, #0
 8002b86:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b88:	f7ff f998 	bl	8001ebc <HAL_GetTick>
 8002b8c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002b8e:	e008      	b.n	8002ba2 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002b90:	f7ff f994 	bl	8001ebc <HAL_GetTick>
 8002b94:	4602      	mov	r2, r0
 8002b96:	693b      	ldr	r3, [r7, #16]
 8002b98:	1ad3      	subs	r3, r2, r3
 8002b9a:	2b02      	cmp	r3, #2
 8002b9c:	d901      	bls.n	8002ba2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002b9e:	2303      	movs	r3, #3
 8002ba0:	e045      	b.n	8002c2e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002ba2:	4b06      	ldr	r3, [pc, #24]	; (8002bbc <HAL_RCC_OscConfig+0x470>)
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d1f0      	bne.n	8002b90 <HAL_RCC_OscConfig+0x444>
 8002bae:	e03d      	b.n	8002c2c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	699b      	ldr	r3, [r3, #24]
 8002bb4:	2b01      	cmp	r3, #1
 8002bb6:	d107      	bne.n	8002bc8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002bb8:	2301      	movs	r3, #1
 8002bba:	e038      	b.n	8002c2e <HAL_RCC_OscConfig+0x4e2>
 8002bbc:	40023800 	.word	0x40023800
 8002bc0:	40007000 	.word	0x40007000
 8002bc4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002bc8:	4b1b      	ldr	r3, [pc, #108]	; (8002c38 <HAL_RCC_OscConfig+0x4ec>)
 8002bca:	685b      	ldr	r3, [r3, #4]
 8002bcc:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	699b      	ldr	r3, [r3, #24]
 8002bd2:	2b01      	cmp	r3, #1
 8002bd4:	d028      	beq.n	8002c28 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002be0:	429a      	cmp	r2, r3
 8002be2:	d121      	bne.n	8002c28 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002bee:	429a      	cmp	r2, r3
 8002bf0:	d11a      	bne.n	8002c28 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002bf2:	68fa      	ldr	r2, [r7, #12]
 8002bf4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002bf8:	4013      	ands	r3, r2
 8002bfa:	687a      	ldr	r2, [r7, #4]
 8002bfc:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002bfe:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002c00:	4293      	cmp	r3, r2
 8002c02:	d111      	bne.n	8002c28 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c0e:	085b      	lsrs	r3, r3, #1
 8002c10:	3b01      	subs	r3, #1
 8002c12:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002c14:	429a      	cmp	r2, r3
 8002c16:	d107      	bne.n	8002c28 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c22:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002c24:	429a      	cmp	r2, r3
 8002c26:	d001      	beq.n	8002c2c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002c28:	2301      	movs	r3, #1
 8002c2a:	e000      	b.n	8002c2e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002c2c:	2300      	movs	r3, #0
}
 8002c2e:	4618      	mov	r0, r3
 8002c30:	3718      	adds	r7, #24
 8002c32:	46bd      	mov	sp, r7
 8002c34:	bd80      	pop	{r7, pc}
 8002c36:	bf00      	nop
 8002c38:	40023800 	.word	0x40023800

08002c3c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002c3c:	b580      	push	{r7, lr}
 8002c3e:	b084      	sub	sp, #16
 8002c40:	af00      	add	r7, sp, #0
 8002c42:	6078      	str	r0, [r7, #4]
 8002c44:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d101      	bne.n	8002c50 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002c4c:	2301      	movs	r3, #1
 8002c4e:	e0cc      	b.n	8002dea <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002c50:	4b68      	ldr	r3, [pc, #416]	; (8002df4 <HAL_RCC_ClockConfig+0x1b8>)
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	f003 0307 	and.w	r3, r3, #7
 8002c58:	683a      	ldr	r2, [r7, #0]
 8002c5a:	429a      	cmp	r2, r3
 8002c5c:	d90c      	bls.n	8002c78 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c5e:	4b65      	ldr	r3, [pc, #404]	; (8002df4 <HAL_RCC_ClockConfig+0x1b8>)
 8002c60:	683a      	ldr	r2, [r7, #0]
 8002c62:	b2d2      	uxtb	r2, r2
 8002c64:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c66:	4b63      	ldr	r3, [pc, #396]	; (8002df4 <HAL_RCC_ClockConfig+0x1b8>)
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	f003 0307 	and.w	r3, r3, #7
 8002c6e:	683a      	ldr	r2, [r7, #0]
 8002c70:	429a      	cmp	r2, r3
 8002c72:	d001      	beq.n	8002c78 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002c74:	2301      	movs	r3, #1
 8002c76:	e0b8      	b.n	8002dea <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	f003 0302 	and.w	r3, r3, #2
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d020      	beq.n	8002cc6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	f003 0304 	and.w	r3, r3, #4
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d005      	beq.n	8002c9c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002c90:	4b59      	ldr	r3, [pc, #356]	; (8002df8 <HAL_RCC_ClockConfig+0x1bc>)
 8002c92:	689b      	ldr	r3, [r3, #8]
 8002c94:	4a58      	ldr	r2, [pc, #352]	; (8002df8 <HAL_RCC_ClockConfig+0x1bc>)
 8002c96:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002c9a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	f003 0308 	and.w	r3, r3, #8
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d005      	beq.n	8002cb4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002ca8:	4b53      	ldr	r3, [pc, #332]	; (8002df8 <HAL_RCC_ClockConfig+0x1bc>)
 8002caa:	689b      	ldr	r3, [r3, #8]
 8002cac:	4a52      	ldr	r2, [pc, #328]	; (8002df8 <HAL_RCC_ClockConfig+0x1bc>)
 8002cae:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002cb2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002cb4:	4b50      	ldr	r3, [pc, #320]	; (8002df8 <HAL_RCC_ClockConfig+0x1bc>)
 8002cb6:	689b      	ldr	r3, [r3, #8]
 8002cb8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	689b      	ldr	r3, [r3, #8]
 8002cc0:	494d      	ldr	r1, [pc, #308]	; (8002df8 <HAL_RCC_ClockConfig+0x1bc>)
 8002cc2:	4313      	orrs	r3, r2
 8002cc4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	f003 0301 	and.w	r3, r3, #1
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d044      	beq.n	8002d5c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	685b      	ldr	r3, [r3, #4]
 8002cd6:	2b01      	cmp	r3, #1
 8002cd8:	d107      	bne.n	8002cea <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002cda:	4b47      	ldr	r3, [pc, #284]	; (8002df8 <HAL_RCC_ClockConfig+0x1bc>)
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d119      	bne.n	8002d1a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002ce6:	2301      	movs	r3, #1
 8002ce8:	e07f      	b.n	8002dea <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	685b      	ldr	r3, [r3, #4]
 8002cee:	2b02      	cmp	r3, #2
 8002cf0:	d003      	beq.n	8002cfa <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002cf6:	2b03      	cmp	r3, #3
 8002cf8:	d107      	bne.n	8002d0a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002cfa:	4b3f      	ldr	r3, [pc, #252]	; (8002df8 <HAL_RCC_ClockConfig+0x1bc>)
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d109      	bne.n	8002d1a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002d06:	2301      	movs	r3, #1
 8002d08:	e06f      	b.n	8002dea <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d0a:	4b3b      	ldr	r3, [pc, #236]	; (8002df8 <HAL_RCC_ClockConfig+0x1bc>)
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	f003 0302 	and.w	r3, r3, #2
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d101      	bne.n	8002d1a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002d16:	2301      	movs	r3, #1
 8002d18:	e067      	b.n	8002dea <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002d1a:	4b37      	ldr	r3, [pc, #220]	; (8002df8 <HAL_RCC_ClockConfig+0x1bc>)
 8002d1c:	689b      	ldr	r3, [r3, #8]
 8002d1e:	f023 0203 	bic.w	r2, r3, #3
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	685b      	ldr	r3, [r3, #4]
 8002d26:	4934      	ldr	r1, [pc, #208]	; (8002df8 <HAL_RCC_ClockConfig+0x1bc>)
 8002d28:	4313      	orrs	r3, r2
 8002d2a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002d2c:	f7ff f8c6 	bl	8001ebc <HAL_GetTick>
 8002d30:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d32:	e00a      	b.n	8002d4a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002d34:	f7ff f8c2 	bl	8001ebc <HAL_GetTick>
 8002d38:	4602      	mov	r2, r0
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	1ad3      	subs	r3, r2, r3
 8002d3e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d42:	4293      	cmp	r3, r2
 8002d44:	d901      	bls.n	8002d4a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002d46:	2303      	movs	r3, #3
 8002d48:	e04f      	b.n	8002dea <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d4a:	4b2b      	ldr	r3, [pc, #172]	; (8002df8 <HAL_RCC_ClockConfig+0x1bc>)
 8002d4c:	689b      	ldr	r3, [r3, #8]
 8002d4e:	f003 020c 	and.w	r2, r3, #12
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	685b      	ldr	r3, [r3, #4]
 8002d56:	009b      	lsls	r3, r3, #2
 8002d58:	429a      	cmp	r2, r3
 8002d5a:	d1eb      	bne.n	8002d34 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002d5c:	4b25      	ldr	r3, [pc, #148]	; (8002df4 <HAL_RCC_ClockConfig+0x1b8>)
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	f003 0307 	and.w	r3, r3, #7
 8002d64:	683a      	ldr	r2, [r7, #0]
 8002d66:	429a      	cmp	r2, r3
 8002d68:	d20c      	bcs.n	8002d84 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d6a:	4b22      	ldr	r3, [pc, #136]	; (8002df4 <HAL_RCC_ClockConfig+0x1b8>)
 8002d6c:	683a      	ldr	r2, [r7, #0]
 8002d6e:	b2d2      	uxtb	r2, r2
 8002d70:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d72:	4b20      	ldr	r3, [pc, #128]	; (8002df4 <HAL_RCC_ClockConfig+0x1b8>)
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	f003 0307 	and.w	r3, r3, #7
 8002d7a:	683a      	ldr	r2, [r7, #0]
 8002d7c:	429a      	cmp	r2, r3
 8002d7e:	d001      	beq.n	8002d84 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002d80:	2301      	movs	r3, #1
 8002d82:	e032      	b.n	8002dea <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	f003 0304 	and.w	r3, r3, #4
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d008      	beq.n	8002da2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002d90:	4b19      	ldr	r3, [pc, #100]	; (8002df8 <HAL_RCC_ClockConfig+0x1bc>)
 8002d92:	689b      	ldr	r3, [r3, #8]
 8002d94:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	68db      	ldr	r3, [r3, #12]
 8002d9c:	4916      	ldr	r1, [pc, #88]	; (8002df8 <HAL_RCC_ClockConfig+0x1bc>)
 8002d9e:	4313      	orrs	r3, r2
 8002da0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	f003 0308 	and.w	r3, r3, #8
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d009      	beq.n	8002dc2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002dae:	4b12      	ldr	r3, [pc, #72]	; (8002df8 <HAL_RCC_ClockConfig+0x1bc>)
 8002db0:	689b      	ldr	r3, [r3, #8]
 8002db2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	691b      	ldr	r3, [r3, #16]
 8002dba:	00db      	lsls	r3, r3, #3
 8002dbc:	490e      	ldr	r1, [pc, #56]	; (8002df8 <HAL_RCC_ClockConfig+0x1bc>)
 8002dbe:	4313      	orrs	r3, r2
 8002dc0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002dc2:	f000 f821 	bl	8002e08 <HAL_RCC_GetSysClockFreq>
 8002dc6:	4602      	mov	r2, r0
 8002dc8:	4b0b      	ldr	r3, [pc, #44]	; (8002df8 <HAL_RCC_ClockConfig+0x1bc>)
 8002dca:	689b      	ldr	r3, [r3, #8]
 8002dcc:	091b      	lsrs	r3, r3, #4
 8002dce:	f003 030f 	and.w	r3, r3, #15
 8002dd2:	490a      	ldr	r1, [pc, #40]	; (8002dfc <HAL_RCC_ClockConfig+0x1c0>)
 8002dd4:	5ccb      	ldrb	r3, [r1, r3]
 8002dd6:	fa22 f303 	lsr.w	r3, r2, r3
 8002dda:	4a09      	ldr	r2, [pc, #36]	; (8002e00 <HAL_RCC_ClockConfig+0x1c4>)
 8002ddc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002dde:	4b09      	ldr	r3, [pc, #36]	; (8002e04 <HAL_RCC_ClockConfig+0x1c8>)
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	4618      	mov	r0, r3
 8002de4:	f7ff f826 	bl	8001e34 <HAL_InitTick>

  return HAL_OK;
 8002de8:	2300      	movs	r3, #0
}
 8002dea:	4618      	mov	r0, r3
 8002dec:	3710      	adds	r7, #16
 8002dee:	46bd      	mov	sp, r7
 8002df0:	bd80      	pop	{r7, pc}
 8002df2:	bf00      	nop
 8002df4:	40023c00 	.word	0x40023c00
 8002df8:	40023800 	.word	0x40023800
 8002dfc:	08006728 	.word	0x08006728
 8002e00:	20000004 	.word	0x20000004
 8002e04:	2000001c 	.word	0x2000001c

08002e08 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002e08:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002e0c:	b094      	sub	sp, #80	; 0x50
 8002e0e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002e10:	2300      	movs	r3, #0
 8002e12:	647b      	str	r3, [r7, #68]	; 0x44
 8002e14:	2300      	movs	r3, #0
 8002e16:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002e18:	2300      	movs	r3, #0
 8002e1a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8002e1c:	2300      	movs	r3, #0
 8002e1e:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002e20:	4b79      	ldr	r3, [pc, #484]	; (8003008 <HAL_RCC_GetSysClockFreq+0x200>)
 8002e22:	689b      	ldr	r3, [r3, #8]
 8002e24:	f003 030c 	and.w	r3, r3, #12
 8002e28:	2b08      	cmp	r3, #8
 8002e2a:	d00d      	beq.n	8002e48 <HAL_RCC_GetSysClockFreq+0x40>
 8002e2c:	2b08      	cmp	r3, #8
 8002e2e:	f200 80e1 	bhi.w	8002ff4 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d002      	beq.n	8002e3c <HAL_RCC_GetSysClockFreq+0x34>
 8002e36:	2b04      	cmp	r3, #4
 8002e38:	d003      	beq.n	8002e42 <HAL_RCC_GetSysClockFreq+0x3a>
 8002e3a:	e0db      	b.n	8002ff4 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002e3c:	4b73      	ldr	r3, [pc, #460]	; (800300c <HAL_RCC_GetSysClockFreq+0x204>)
 8002e3e:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8002e40:	e0db      	b.n	8002ffa <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002e42:	4b73      	ldr	r3, [pc, #460]	; (8003010 <HAL_RCC_GetSysClockFreq+0x208>)
 8002e44:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002e46:	e0d8      	b.n	8002ffa <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002e48:	4b6f      	ldr	r3, [pc, #444]	; (8003008 <HAL_RCC_GetSysClockFreq+0x200>)
 8002e4a:	685b      	ldr	r3, [r3, #4]
 8002e4c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002e50:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002e52:	4b6d      	ldr	r3, [pc, #436]	; (8003008 <HAL_RCC_GetSysClockFreq+0x200>)
 8002e54:	685b      	ldr	r3, [r3, #4]
 8002e56:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d063      	beq.n	8002f26 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002e5e:	4b6a      	ldr	r3, [pc, #424]	; (8003008 <HAL_RCC_GetSysClockFreq+0x200>)
 8002e60:	685b      	ldr	r3, [r3, #4]
 8002e62:	099b      	lsrs	r3, r3, #6
 8002e64:	2200      	movs	r2, #0
 8002e66:	63bb      	str	r3, [r7, #56]	; 0x38
 8002e68:	63fa      	str	r2, [r7, #60]	; 0x3c
 8002e6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e6c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002e70:	633b      	str	r3, [r7, #48]	; 0x30
 8002e72:	2300      	movs	r3, #0
 8002e74:	637b      	str	r3, [r7, #52]	; 0x34
 8002e76:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002e7a:	4622      	mov	r2, r4
 8002e7c:	462b      	mov	r3, r5
 8002e7e:	f04f 0000 	mov.w	r0, #0
 8002e82:	f04f 0100 	mov.w	r1, #0
 8002e86:	0159      	lsls	r1, r3, #5
 8002e88:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002e8c:	0150      	lsls	r0, r2, #5
 8002e8e:	4602      	mov	r2, r0
 8002e90:	460b      	mov	r3, r1
 8002e92:	4621      	mov	r1, r4
 8002e94:	1a51      	subs	r1, r2, r1
 8002e96:	6139      	str	r1, [r7, #16]
 8002e98:	4629      	mov	r1, r5
 8002e9a:	eb63 0301 	sbc.w	r3, r3, r1
 8002e9e:	617b      	str	r3, [r7, #20]
 8002ea0:	f04f 0200 	mov.w	r2, #0
 8002ea4:	f04f 0300 	mov.w	r3, #0
 8002ea8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002eac:	4659      	mov	r1, fp
 8002eae:	018b      	lsls	r3, r1, #6
 8002eb0:	4651      	mov	r1, sl
 8002eb2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002eb6:	4651      	mov	r1, sl
 8002eb8:	018a      	lsls	r2, r1, #6
 8002eba:	4651      	mov	r1, sl
 8002ebc:	ebb2 0801 	subs.w	r8, r2, r1
 8002ec0:	4659      	mov	r1, fp
 8002ec2:	eb63 0901 	sbc.w	r9, r3, r1
 8002ec6:	f04f 0200 	mov.w	r2, #0
 8002eca:	f04f 0300 	mov.w	r3, #0
 8002ece:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002ed2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002ed6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002eda:	4690      	mov	r8, r2
 8002edc:	4699      	mov	r9, r3
 8002ede:	4623      	mov	r3, r4
 8002ee0:	eb18 0303 	adds.w	r3, r8, r3
 8002ee4:	60bb      	str	r3, [r7, #8]
 8002ee6:	462b      	mov	r3, r5
 8002ee8:	eb49 0303 	adc.w	r3, r9, r3
 8002eec:	60fb      	str	r3, [r7, #12]
 8002eee:	f04f 0200 	mov.w	r2, #0
 8002ef2:	f04f 0300 	mov.w	r3, #0
 8002ef6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002efa:	4629      	mov	r1, r5
 8002efc:	024b      	lsls	r3, r1, #9
 8002efe:	4621      	mov	r1, r4
 8002f00:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002f04:	4621      	mov	r1, r4
 8002f06:	024a      	lsls	r2, r1, #9
 8002f08:	4610      	mov	r0, r2
 8002f0a:	4619      	mov	r1, r3
 8002f0c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002f0e:	2200      	movs	r2, #0
 8002f10:	62bb      	str	r3, [r7, #40]	; 0x28
 8002f12:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002f14:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002f18:	f7fd f9b2 	bl	8000280 <__aeabi_uldivmod>
 8002f1c:	4602      	mov	r2, r0
 8002f1e:	460b      	mov	r3, r1
 8002f20:	4613      	mov	r3, r2
 8002f22:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002f24:	e058      	b.n	8002fd8 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002f26:	4b38      	ldr	r3, [pc, #224]	; (8003008 <HAL_RCC_GetSysClockFreq+0x200>)
 8002f28:	685b      	ldr	r3, [r3, #4]
 8002f2a:	099b      	lsrs	r3, r3, #6
 8002f2c:	2200      	movs	r2, #0
 8002f2e:	4618      	mov	r0, r3
 8002f30:	4611      	mov	r1, r2
 8002f32:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002f36:	623b      	str	r3, [r7, #32]
 8002f38:	2300      	movs	r3, #0
 8002f3a:	627b      	str	r3, [r7, #36]	; 0x24
 8002f3c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002f40:	4642      	mov	r2, r8
 8002f42:	464b      	mov	r3, r9
 8002f44:	f04f 0000 	mov.w	r0, #0
 8002f48:	f04f 0100 	mov.w	r1, #0
 8002f4c:	0159      	lsls	r1, r3, #5
 8002f4e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002f52:	0150      	lsls	r0, r2, #5
 8002f54:	4602      	mov	r2, r0
 8002f56:	460b      	mov	r3, r1
 8002f58:	4641      	mov	r1, r8
 8002f5a:	ebb2 0a01 	subs.w	sl, r2, r1
 8002f5e:	4649      	mov	r1, r9
 8002f60:	eb63 0b01 	sbc.w	fp, r3, r1
 8002f64:	f04f 0200 	mov.w	r2, #0
 8002f68:	f04f 0300 	mov.w	r3, #0
 8002f6c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002f70:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002f74:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002f78:	ebb2 040a 	subs.w	r4, r2, sl
 8002f7c:	eb63 050b 	sbc.w	r5, r3, fp
 8002f80:	f04f 0200 	mov.w	r2, #0
 8002f84:	f04f 0300 	mov.w	r3, #0
 8002f88:	00eb      	lsls	r3, r5, #3
 8002f8a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002f8e:	00e2      	lsls	r2, r4, #3
 8002f90:	4614      	mov	r4, r2
 8002f92:	461d      	mov	r5, r3
 8002f94:	4643      	mov	r3, r8
 8002f96:	18e3      	adds	r3, r4, r3
 8002f98:	603b      	str	r3, [r7, #0]
 8002f9a:	464b      	mov	r3, r9
 8002f9c:	eb45 0303 	adc.w	r3, r5, r3
 8002fa0:	607b      	str	r3, [r7, #4]
 8002fa2:	f04f 0200 	mov.w	r2, #0
 8002fa6:	f04f 0300 	mov.w	r3, #0
 8002faa:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002fae:	4629      	mov	r1, r5
 8002fb0:	028b      	lsls	r3, r1, #10
 8002fb2:	4621      	mov	r1, r4
 8002fb4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002fb8:	4621      	mov	r1, r4
 8002fba:	028a      	lsls	r2, r1, #10
 8002fbc:	4610      	mov	r0, r2
 8002fbe:	4619      	mov	r1, r3
 8002fc0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002fc2:	2200      	movs	r2, #0
 8002fc4:	61bb      	str	r3, [r7, #24]
 8002fc6:	61fa      	str	r2, [r7, #28]
 8002fc8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002fcc:	f7fd f958 	bl	8000280 <__aeabi_uldivmod>
 8002fd0:	4602      	mov	r2, r0
 8002fd2:	460b      	mov	r3, r1
 8002fd4:	4613      	mov	r3, r2
 8002fd6:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002fd8:	4b0b      	ldr	r3, [pc, #44]	; (8003008 <HAL_RCC_GetSysClockFreq+0x200>)
 8002fda:	685b      	ldr	r3, [r3, #4]
 8002fdc:	0c1b      	lsrs	r3, r3, #16
 8002fde:	f003 0303 	and.w	r3, r3, #3
 8002fe2:	3301      	adds	r3, #1
 8002fe4:	005b      	lsls	r3, r3, #1
 8002fe6:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8002fe8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002fea:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002fec:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ff0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002ff2:	e002      	b.n	8002ffa <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002ff4:	4b05      	ldr	r3, [pc, #20]	; (800300c <HAL_RCC_GetSysClockFreq+0x204>)
 8002ff6:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002ff8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002ffa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8002ffc:	4618      	mov	r0, r3
 8002ffe:	3750      	adds	r7, #80	; 0x50
 8003000:	46bd      	mov	sp, r7
 8003002:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003006:	bf00      	nop
 8003008:	40023800 	.word	0x40023800
 800300c:	00f42400 	.word	0x00f42400
 8003010:	007a1200 	.word	0x007a1200

08003014 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003014:	b480      	push	{r7}
 8003016:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003018:	4b03      	ldr	r3, [pc, #12]	; (8003028 <HAL_RCC_GetHCLKFreq+0x14>)
 800301a:	681b      	ldr	r3, [r3, #0]
}
 800301c:	4618      	mov	r0, r3
 800301e:	46bd      	mov	sp, r7
 8003020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003024:	4770      	bx	lr
 8003026:	bf00      	nop
 8003028:	20000004 	.word	0x20000004

0800302c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800302c:	b580      	push	{r7, lr}
 800302e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003030:	f7ff fff0 	bl	8003014 <HAL_RCC_GetHCLKFreq>
 8003034:	4602      	mov	r2, r0
 8003036:	4b05      	ldr	r3, [pc, #20]	; (800304c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003038:	689b      	ldr	r3, [r3, #8]
 800303a:	0a9b      	lsrs	r3, r3, #10
 800303c:	f003 0307 	and.w	r3, r3, #7
 8003040:	4903      	ldr	r1, [pc, #12]	; (8003050 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003042:	5ccb      	ldrb	r3, [r1, r3]
 8003044:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003048:	4618      	mov	r0, r3
 800304a:	bd80      	pop	{r7, pc}
 800304c:	40023800 	.word	0x40023800
 8003050:	08006738 	.word	0x08006738

08003054 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003054:	b580      	push	{r7, lr}
 8003056:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003058:	f7ff ffdc 	bl	8003014 <HAL_RCC_GetHCLKFreq>
 800305c:	4602      	mov	r2, r0
 800305e:	4b05      	ldr	r3, [pc, #20]	; (8003074 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003060:	689b      	ldr	r3, [r3, #8]
 8003062:	0b5b      	lsrs	r3, r3, #13
 8003064:	f003 0307 	and.w	r3, r3, #7
 8003068:	4903      	ldr	r1, [pc, #12]	; (8003078 <HAL_RCC_GetPCLK2Freq+0x24>)
 800306a:	5ccb      	ldrb	r3, [r1, r3]
 800306c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003070:	4618      	mov	r0, r3
 8003072:	bd80      	pop	{r7, pc}
 8003074:	40023800 	.word	0x40023800
 8003078:	08006738 	.word	0x08006738

0800307c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800307c:	b580      	push	{r7, lr}
 800307e:	b082      	sub	sp, #8
 8003080:	af00      	add	r7, sp, #0
 8003082:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	2b00      	cmp	r3, #0
 8003088:	d101      	bne.n	800308e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800308a:	2301      	movs	r3, #1
 800308c:	e07b      	b.n	8003186 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003092:	2b00      	cmp	r3, #0
 8003094:	d108      	bne.n	80030a8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	685b      	ldr	r3, [r3, #4]
 800309a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800309e:	d009      	beq.n	80030b4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	2200      	movs	r2, #0
 80030a4:	61da      	str	r2, [r3, #28]
 80030a6:	e005      	b.n	80030b4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	2200      	movs	r2, #0
 80030ac:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	2200      	movs	r2, #0
 80030b2:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	2200      	movs	r2, #0
 80030b8:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80030c0:	b2db      	uxtb	r3, r3
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d106      	bne.n	80030d4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	2200      	movs	r2, #0
 80030ca:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80030ce:	6878      	ldr	r0, [r7, #4]
 80030d0:	f000 f85d 	bl	800318e <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	2202      	movs	r2, #2
 80030d8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	681a      	ldr	r2, [r3, #0]
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80030ea:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	685b      	ldr	r3, [r3, #4]
 80030f0:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	689b      	ldr	r3, [r3, #8]
 80030f8:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80030fc:	431a      	orrs	r2, r3
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	68db      	ldr	r3, [r3, #12]
 8003102:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003106:	431a      	orrs	r2, r3
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	691b      	ldr	r3, [r3, #16]
 800310c:	f003 0302 	and.w	r3, r3, #2
 8003110:	431a      	orrs	r2, r3
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	695b      	ldr	r3, [r3, #20]
 8003116:	f003 0301 	and.w	r3, r3, #1
 800311a:	431a      	orrs	r2, r3
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	699b      	ldr	r3, [r3, #24]
 8003120:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003124:	431a      	orrs	r2, r3
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	69db      	ldr	r3, [r3, #28]
 800312a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800312e:	431a      	orrs	r2, r3
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	6a1b      	ldr	r3, [r3, #32]
 8003134:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003138:	ea42 0103 	orr.w	r1, r2, r3
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003140:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	430a      	orrs	r2, r1
 800314a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	699b      	ldr	r3, [r3, #24]
 8003150:	0c1b      	lsrs	r3, r3, #16
 8003152:	f003 0104 	and.w	r1, r3, #4
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800315a:	f003 0210 	and.w	r2, r3, #16
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	430a      	orrs	r2, r1
 8003164:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	69da      	ldr	r2, [r3, #28]
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003174:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	2200      	movs	r2, #0
 800317a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	2201      	movs	r2, #1
 8003180:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8003184:	2300      	movs	r3, #0
}
 8003186:	4618      	mov	r0, r3
 8003188:	3708      	adds	r7, #8
 800318a:	46bd      	mov	sp, r7
 800318c:	bd80      	pop	{r7, pc}

0800318e <HAL_SPI_MspInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_MspInit(SPI_HandleTypeDef *hspi)
{
 800318e:	b480      	push	{r7}
 8003190:	b083      	sub	sp, #12
 8003192:	af00      	add	r7, sp, #0
 8003194:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_MspInit should be implemented in the user file
   */
}
 8003196:	bf00      	nop
 8003198:	370c      	adds	r7, #12
 800319a:	46bd      	mov	sp, r7
 800319c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031a0:	4770      	bx	lr

080031a2 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80031a2:	b580      	push	{r7, lr}
 80031a4:	b08c      	sub	sp, #48	; 0x30
 80031a6:	af00      	add	r7, sp, #0
 80031a8:	60f8      	str	r0, [r7, #12]
 80031aa:	60b9      	str	r1, [r7, #8]
 80031ac:	607a      	str	r2, [r7, #4]
 80031ae:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80031b0:	2301      	movs	r3, #1
 80031b2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80031b4:	2300      	movs	r3, #0
 80031b6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80031c0:	2b01      	cmp	r3, #1
 80031c2:	d101      	bne.n	80031c8 <HAL_SPI_TransmitReceive+0x26>
 80031c4:	2302      	movs	r3, #2
 80031c6:	e18a      	b.n	80034de <HAL_SPI_TransmitReceive+0x33c>
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	2201      	movs	r2, #1
 80031cc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80031d0:	f7fe fe74 	bl	8001ebc <HAL_GetTick>
 80031d4:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80031dc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	685b      	ldr	r3, [r3, #4]
 80031e4:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80031e6:	887b      	ldrh	r3, [r7, #2]
 80031e8:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80031ea:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80031ee:	2b01      	cmp	r3, #1
 80031f0:	d00f      	beq.n	8003212 <HAL_SPI_TransmitReceive+0x70>
 80031f2:	69fb      	ldr	r3, [r7, #28]
 80031f4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80031f8:	d107      	bne.n	800320a <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	689b      	ldr	r3, [r3, #8]
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d103      	bne.n	800320a <HAL_SPI_TransmitReceive+0x68>
 8003202:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003206:	2b04      	cmp	r3, #4
 8003208:	d003      	beq.n	8003212 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 800320a:	2302      	movs	r3, #2
 800320c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8003210:	e15b      	b.n	80034ca <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003212:	68bb      	ldr	r3, [r7, #8]
 8003214:	2b00      	cmp	r3, #0
 8003216:	d005      	beq.n	8003224 <HAL_SPI_TransmitReceive+0x82>
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	2b00      	cmp	r3, #0
 800321c:	d002      	beq.n	8003224 <HAL_SPI_TransmitReceive+0x82>
 800321e:	887b      	ldrh	r3, [r7, #2]
 8003220:	2b00      	cmp	r3, #0
 8003222:	d103      	bne.n	800322c <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8003224:	2301      	movs	r3, #1
 8003226:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800322a:	e14e      	b.n	80034ca <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003232:	b2db      	uxtb	r3, r3
 8003234:	2b04      	cmp	r3, #4
 8003236:	d003      	beq.n	8003240 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	2205      	movs	r2, #5
 800323c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	2200      	movs	r2, #0
 8003244:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	687a      	ldr	r2, [r7, #4]
 800324a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	887a      	ldrh	r2, [r7, #2]
 8003250:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	887a      	ldrh	r2, [r7, #2]
 8003256:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	68ba      	ldr	r2, [r7, #8]
 800325c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	887a      	ldrh	r2, [r7, #2]
 8003262:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	887a      	ldrh	r2, [r7, #2]
 8003268:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	2200      	movs	r2, #0
 800326e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	2200      	movs	r2, #0
 8003274:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003280:	2b40      	cmp	r3, #64	; 0x40
 8003282:	d007      	beq.n	8003294 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	681a      	ldr	r2, [r3, #0]
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003292:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	68db      	ldr	r3, [r3, #12]
 8003298:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800329c:	d178      	bne.n	8003390 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	685b      	ldr	r3, [r3, #4]
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d002      	beq.n	80032ac <HAL_SPI_TransmitReceive+0x10a>
 80032a6:	8b7b      	ldrh	r3, [r7, #26]
 80032a8:	2b01      	cmp	r3, #1
 80032aa:	d166      	bne.n	800337a <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032b0:	881a      	ldrh	r2, [r3, #0]
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032bc:	1c9a      	adds	r2, r3, #2
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80032c6:	b29b      	uxth	r3, r3
 80032c8:	3b01      	subs	r3, #1
 80032ca:	b29a      	uxth	r2, r3
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80032d0:	e053      	b.n	800337a <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	689b      	ldr	r3, [r3, #8]
 80032d8:	f003 0302 	and.w	r3, r3, #2
 80032dc:	2b02      	cmp	r3, #2
 80032de:	d11b      	bne.n	8003318 <HAL_SPI_TransmitReceive+0x176>
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80032e4:	b29b      	uxth	r3, r3
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d016      	beq.n	8003318 <HAL_SPI_TransmitReceive+0x176>
 80032ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80032ec:	2b01      	cmp	r3, #1
 80032ee:	d113      	bne.n	8003318 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032f4:	881a      	ldrh	r2, [r3, #0]
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003300:	1c9a      	adds	r2, r3, #2
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800330a:	b29b      	uxth	r3, r3
 800330c:	3b01      	subs	r3, #1
 800330e:	b29a      	uxth	r2, r3
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003314:	2300      	movs	r3, #0
 8003316:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	689b      	ldr	r3, [r3, #8]
 800331e:	f003 0301 	and.w	r3, r3, #1
 8003322:	2b01      	cmp	r3, #1
 8003324:	d119      	bne.n	800335a <HAL_SPI_TransmitReceive+0x1b8>
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800332a:	b29b      	uxth	r3, r3
 800332c:	2b00      	cmp	r3, #0
 800332e:	d014      	beq.n	800335a <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	68da      	ldr	r2, [r3, #12]
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800333a:	b292      	uxth	r2, r2
 800333c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003342:	1c9a      	adds	r2, r3, #2
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800334c:	b29b      	uxth	r3, r3
 800334e:	3b01      	subs	r3, #1
 8003350:	b29a      	uxth	r2, r3
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003356:	2301      	movs	r3, #1
 8003358:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800335a:	f7fe fdaf 	bl	8001ebc <HAL_GetTick>
 800335e:	4602      	mov	r2, r0
 8003360:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003362:	1ad3      	subs	r3, r2, r3
 8003364:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003366:	429a      	cmp	r2, r3
 8003368:	d807      	bhi.n	800337a <HAL_SPI_TransmitReceive+0x1d8>
 800336a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800336c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003370:	d003      	beq.n	800337a <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8003372:	2303      	movs	r3, #3
 8003374:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8003378:	e0a7      	b.n	80034ca <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800337e:	b29b      	uxth	r3, r3
 8003380:	2b00      	cmp	r3, #0
 8003382:	d1a6      	bne.n	80032d2 <HAL_SPI_TransmitReceive+0x130>
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003388:	b29b      	uxth	r3, r3
 800338a:	2b00      	cmp	r3, #0
 800338c:	d1a1      	bne.n	80032d2 <HAL_SPI_TransmitReceive+0x130>
 800338e:	e07c      	b.n	800348a <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	685b      	ldr	r3, [r3, #4]
 8003394:	2b00      	cmp	r3, #0
 8003396:	d002      	beq.n	800339e <HAL_SPI_TransmitReceive+0x1fc>
 8003398:	8b7b      	ldrh	r3, [r7, #26]
 800339a:	2b01      	cmp	r3, #1
 800339c:	d16b      	bne.n	8003476 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	330c      	adds	r3, #12
 80033a8:	7812      	ldrb	r2, [r2, #0]
 80033aa:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033b0:	1c5a      	adds	r2, r3, #1
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80033ba:	b29b      	uxth	r3, r3
 80033bc:	3b01      	subs	r3, #1
 80033be:	b29a      	uxth	r2, r3
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80033c4:	e057      	b.n	8003476 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	689b      	ldr	r3, [r3, #8]
 80033cc:	f003 0302 	and.w	r3, r3, #2
 80033d0:	2b02      	cmp	r3, #2
 80033d2:	d11c      	bne.n	800340e <HAL_SPI_TransmitReceive+0x26c>
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80033d8:	b29b      	uxth	r3, r3
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d017      	beq.n	800340e <HAL_SPI_TransmitReceive+0x26c>
 80033de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80033e0:	2b01      	cmp	r3, #1
 80033e2:	d114      	bne.n	800340e <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	330c      	adds	r3, #12
 80033ee:	7812      	ldrb	r2, [r2, #0]
 80033f0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033f6:	1c5a      	adds	r2, r3, #1
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003400:	b29b      	uxth	r3, r3
 8003402:	3b01      	subs	r3, #1
 8003404:	b29a      	uxth	r2, r3
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800340a:	2300      	movs	r3, #0
 800340c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	689b      	ldr	r3, [r3, #8]
 8003414:	f003 0301 	and.w	r3, r3, #1
 8003418:	2b01      	cmp	r3, #1
 800341a:	d119      	bne.n	8003450 <HAL_SPI_TransmitReceive+0x2ae>
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003420:	b29b      	uxth	r3, r3
 8003422:	2b00      	cmp	r3, #0
 8003424:	d014      	beq.n	8003450 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	68da      	ldr	r2, [r3, #12]
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003430:	b2d2      	uxtb	r2, r2
 8003432:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003438:	1c5a      	adds	r2, r3, #1
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003442:	b29b      	uxth	r3, r3
 8003444:	3b01      	subs	r3, #1
 8003446:	b29a      	uxth	r2, r3
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800344c:	2301      	movs	r3, #1
 800344e:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003450:	f7fe fd34 	bl	8001ebc <HAL_GetTick>
 8003454:	4602      	mov	r2, r0
 8003456:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003458:	1ad3      	subs	r3, r2, r3
 800345a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800345c:	429a      	cmp	r2, r3
 800345e:	d803      	bhi.n	8003468 <HAL_SPI_TransmitReceive+0x2c6>
 8003460:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003462:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003466:	d102      	bne.n	800346e <HAL_SPI_TransmitReceive+0x2cc>
 8003468:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800346a:	2b00      	cmp	r3, #0
 800346c:	d103      	bne.n	8003476 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 800346e:	2303      	movs	r3, #3
 8003470:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8003474:	e029      	b.n	80034ca <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800347a:	b29b      	uxth	r3, r3
 800347c:	2b00      	cmp	r3, #0
 800347e:	d1a2      	bne.n	80033c6 <HAL_SPI_TransmitReceive+0x224>
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003484:	b29b      	uxth	r3, r3
 8003486:	2b00      	cmp	r3, #0
 8003488:	d19d      	bne.n	80033c6 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800348a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800348c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800348e:	68f8      	ldr	r0, [r7, #12]
 8003490:	f000 f8c0 	bl	8003614 <SPI_EndRxTxTransaction>
 8003494:	4603      	mov	r3, r0
 8003496:	2b00      	cmp	r3, #0
 8003498:	d006      	beq.n	80034a8 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 800349a:	2301      	movs	r3, #1
 800349c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	2220      	movs	r2, #32
 80034a4:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 80034a6:	e010      	b.n	80034ca <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	689b      	ldr	r3, [r3, #8]
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d10b      	bne.n	80034c8 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80034b0:	2300      	movs	r3, #0
 80034b2:	617b      	str	r3, [r7, #20]
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	68db      	ldr	r3, [r3, #12]
 80034ba:	617b      	str	r3, [r7, #20]
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	689b      	ldr	r3, [r3, #8]
 80034c2:	617b      	str	r3, [r7, #20]
 80034c4:	697b      	ldr	r3, [r7, #20]
 80034c6:	e000      	b.n	80034ca <HAL_SPI_TransmitReceive+0x328>
  }

error :
 80034c8:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	2201      	movs	r2, #1
 80034ce:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	2200      	movs	r2, #0
 80034d6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80034da:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80034de:	4618      	mov	r0, r3
 80034e0:	3730      	adds	r7, #48	; 0x30
 80034e2:	46bd      	mov	sp, r7
 80034e4:	bd80      	pop	{r7, pc}

080034e6 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 80034e6:	b480      	push	{r7}
 80034e8:	b083      	sub	sp, #12
 80034ea:	af00      	add	r7, sp, #0
 80034ec:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80034f4:	b2db      	uxtb	r3, r3
}
 80034f6:	4618      	mov	r0, r3
 80034f8:	370c      	adds	r7, #12
 80034fa:	46bd      	mov	sp, r7
 80034fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003500:	4770      	bx	lr
	...

08003504 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003504:	b580      	push	{r7, lr}
 8003506:	b088      	sub	sp, #32
 8003508:	af00      	add	r7, sp, #0
 800350a:	60f8      	str	r0, [r7, #12]
 800350c:	60b9      	str	r1, [r7, #8]
 800350e:	603b      	str	r3, [r7, #0]
 8003510:	4613      	mov	r3, r2
 8003512:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003514:	f7fe fcd2 	bl	8001ebc <HAL_GetTick>
 8003518:	4602      	mov	r2, r0
 800351a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800351c:	1a9b      	subs	r3, r3, r2
 800351e:	683a      	ldr	r2, [r7, #0]
 8003520:	4413      	add	r3, r2
 8003522:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003524:	f7fe fcca 	bl	8001ebc <HAL_GetTick>
 8003528:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800352a:	4b39      	ldr	r3, [pc, #228]	; (8003610 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	015b      	lsls	r3, r3, #5
 8003530:	0d1b      	lsrs	r3, r3, #20
 8003532:	69fa      	ldr	r2, [r7, #28]
 8003534:	fb02 f303 	mul.w	r3, r2, r3
 8003538:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800353a:	e054      	b.n	80035e6 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800353c:	683b      	ldr	r3, [r7, #0]
 800353e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003542:	d050      	beq.n	80035e6 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003544:	f7fe fcba 	bl	8001ebc <HAL_GetTick>
 8003548:	4602      	mov	r2, r0
 800354a:	69bb      	ldr	r3, [r7, #24]
 800354c:	1ad3      	subs	r3, r2, r3
 800354e:	69fa      	ldr	r2, [r7, #28]
 8003550:	429a      	cmp	r2, r3
 8003552:	d902      	bls.n	800355a <SPI_WaitFlagStateUntilTimeout+0x56>
 8003554:	69fb      	ldr	r3, [r7, #28]
 8003556:	2b00      	cmp	r3, #0
 8003558:	d13d      	bne.n	80035d6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	685a      	ldr	r2, [r3, #4]
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003568:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	685b      	ldr	r3, [r3, #4]
 800356e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003572:	d111      	bne.n	8003598 <SPI_WaitFlagStateUntilTimeout+0x94>
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	689b      	ldr	r3, [r3, #8]
 8003578:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800357c:	d004      	beq.n	8003588 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	689b      	ldr	r3, [r3, #8]
 8003582:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003586:	d107      	bne.n	8003598 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	681a      	ldr	r2, [r3, #0]
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003596:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800359c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80035a0:	d10f      	bne.n	80035c2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	681a      	ldr	r2, [r3, #0]
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80035b0:	601a      	str	r2, [r3, #0]
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	681a      	ldr	r2, [r3, #0]
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80035c0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	2201      	movs	r2, #1
 80035c6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	2200      	movs	r2, #0
 80035ce:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80035d2:	2303      	movs	r3, #3
 80035d4:	e017      	b.n	8003606 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80035d6:	697b      	ldr	r3, [r7, #20]
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d101      	bne.n	80035e0 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80035dc:	2300      	movs	r3, #0
 80035de:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80035e0:	697b      	ldr	r3, [r7, #20]
 80035e2:	3b01      	subs	r3, #1
 80035e4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	689a      	ldr	r2, [r3, #8]
 80035ec:	68bb      	ldr	r3, [r7, #8]
 80035ee:	4013      	ands	r3, r2
 80035f0:	68ba      	ldr	r2, [r7, #8]
 80035f2:	429a      	cmp	r2, r3
 80035f4:	bf0c      	ite	eq
 80035f6:	2301      	moveq	r3, #1
 80035f8:	2300      	movne	r3, #0
 80035fa:	b2db      	uxtb	r3, r3
 80035fc:	461a      	mov	r2, r3
 80035fe:	79fb      	ldrb	r3, [r7, #7]
 8003600:	429a      	cmp	r2, r3
 8003602:	d19b      	bne.n	800353c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003604:	2300      	movs	r3, #0
}
 8003606:	4618      	mov	r0, r3
 8003608:	3720      	adds	r7, #32
 800360a:	46bd      	mov	sp, r7
 800360c:	bd80      	pop	{r7, pc}
 800360e:	bf00      	nop
 8003610:	20000004 	.word	0x20000004

08003614 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003614:	b580      	push	{r7, lr}
 8003616:	b088      	sub	sp, #32
 8003618:	af02      	add	r7, sp, #8
 800361a:	60f8      	str	r0, [r7, #12]
 800361c:	60b9      	str	r1, [r7, #8]
 800361e:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8003620:	4b1b      	ldr	r3, [pc, #108]	; (8003690 <SPI_EndRxTxTransaction+0x7c>)
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	4a1b      	ldr	r2, [pc, #108]	; (8003694 <SPI_EndRxTxTransaction+0x80>)
 8003626:	fba2 2303 	umull	r2, r3, r2, r3
 800362a:	0d5b      	lsrs	r3, r3, #21
 800362c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003630:	fb02 f303 	mul.w	r3, r2, r3
 8003634:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	685b      	ldr	r3, [r3, #4]
 800363a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800363e:	d112      	bne.n	8003666 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	9300      	str	r3, [sp, #0]
 8003644:	68bb      	ldr	r3, [r7, #8]
 8003646:	2200      	movs	r2, #0
 8003648:	2180      	movs	r1, #128	; 0x80
 800364a:	68f8      	ldr	r0, [r7, #12]
 800364c:	f7ff ff5a 	bl	8003504 <SPI_WaitFlagStateUntilTimeout>
 8003650:	4603      	mov	r3, r0
 8003652:	2b00      	cmp	r3, #0
 8003654:	d016      	beq.n	8003684 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800365a:	f043 0220 	orr.w	r2, r3, #32
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8003662:	2303      	movs	r3, #3
 8003664:	e00f      	b.n	8003686 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8003666:	697b      	ldr	r3, [r7, #20]
 8003668:	2b00      	cmp	r3, #0
 800366a:	d00a      	beq.n	8003682 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 800366c:	697b      	ldr	r3, [r7, #20]
 800366e:	3b01      	subs	r3, #1
 8003670:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	689b      	ldr	r3, [r3, #8]
 8003678:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800367c:	2b80      	cmp	r3, #128	; 0x80
 800367e:	d0f2      	beq.n	8003666 <SPI_EndRxTxTransaction+0x52>
 8003680:	e000      	b.n	8003684 <SPI_EndRxTxTransaction+0x70>
        break;
 8003682:	bf00      	nop
  }

  return HAL_OK;
 8003684:	2300      	movs	r3, #0
}
 8003686:	4618      	mov	r0, r3
 8003688:	3718      	adds	r7, #24
 800368a:	46bd      	mov	sp, r7
 800368c:	bd80      	pop	{r7, pc}
 800368e:	bf00      	nop
 8003690:	20000004 	.word	0x20000004
 8003694:	165e9f81 	.word	0x165e9f81

08003698 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003698:	b580      	push	{r7, lr}
 800369a:	b082      	sub	sp, #8
 800369c:	af00      	add	r7, sp, #0
 800369e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d101      	bne.n	80036aa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80036a6:	2301      	movs	r3, #1
 80036a8:	e03f      	b.n	800372a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80036b0:	b2db      	uxtb	r3, r3
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d106      	bne.n	80036c4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	2200      	movs	r2, #0
 80036ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80036be:	6878      	ldr	r0, [r7, #4]
 80036c0:	f000 f837 	bl	8003732 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	2224      	movs	r2, #36	; 0x24
 80036c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	68da      	ldr	r2, [r3, #12]
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80036da:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80036dc:	6878      	ldr	r0, [r7, #4]
 80036de:	f000 f933 	bl	8003948 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	691a      	ldr	r2, [r3, #16]
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80036f0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	695a      	ldr	r2, [r3, #20]
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003700:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	68da      	ldr	r2, [r3, #12]
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003710:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	2200      	movs	r2, #0
 8003716:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	2220      	movs	r2, #32
 800371c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	2220      	movs	r2, #32
 8003724:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003728:	2300      	movs	r3, #0
}
 800372a:	4618      	mov	r0, r3
 800372c:	3708      	adds	r7, #8
 800372e:	46bd      	mov	sp, r7
 8003730:	bd80      	pop	{r7, pc}

08003732 <HAL_UART_MspInit>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 8003732:	b480      	push	{r7}
 8003734:	b083      	sub	sp, #12
 8003736:	af00      	add	r7, sp, #0
 8003738:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_MspInit could be implemented in the user file
   */
}
 800373a:	bf00      	nop
 800373c:	370c      	adds	r7, #12
 800373e:	46bd      	mov	sp, r7
 8003740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003744:	4770      	bx	lr

08003746 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003746:	b580      	push	{r7, lr}
 8003748:	b08a      	sub	sp, #40	; 0x28
 800374a:	af02      	add	r7, sp, #8
 800374c:	60f8      	str	r0, [r7, #12]
 800374e:	60b9      	str	r1, [r7, #8]
 8003750:	603b      	str	r3, [r7, #0]
 8003752:	4613      	mov	r3, r2
 8003754:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003756:	2300      	movs	r3, #0
 8003758:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003760:	b2db      	uxtb	r3, r3
 8003762:	2b20      	cmp	r3, #32
 8003764:	d17c      	bne.n	8003860 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003766:	68bb      	ldr	r3, [r7, #8]
 8003768:	2b00      	cmp	r3, #0
 800376a:	d002      	beq.n	8003772 <HAL_UART_Transmit+0x2c>
 800376c:	88fb      	ldrh	r3, [r7, #6]
 800376e:	2b00      	cmp	r3, #0
 8003770:	d101      	bne.n	8003776 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003772:	2301      	movs	r3, #1
 8003774:	e075      	b.n	8003862 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800377c:	2b01      	cmp	r3, #1
 800377e:	d101      	bne.n	8003784 <HAL_UART_Transmit+0x3e>
 8003780:	2302      	movs	r3, #2
 8003782:	e06e      	b.n	8003862 <HAL_UART_Transmit+0x11c>
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	2201      	movs	r2, #1
 8003788:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	2200      	movs	r2, #0
 8003790:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	2221      	movs	r2, #33	; 0x21
 8003796:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800379a:	f7fe fb8f 	bl	8001ebc <HAL_GetTick>
 800379e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	88fa      	ldrh	r2, [r7, #6]
 80037a4:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	88fa      	ldrh	r2, [r7, #6]
 80037aa:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	689b      	ldr	r3, [r3, #8]
 80037b0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80037b4:	d108      	bne.n	80037c8 <HAL_UART_Transmit+0x82>
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	691b      	ldr	r3, [r3, #16]
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d104      	bne.n	80037c8 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80037be:	2300      	movs	r3, #0
 80037c0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80037c2:	68bb      	ldr	r3, [r7, #8]
 80037c4:	61bb      	str	r3, [r7, #24]
 80037c6:	e003      	b.n	80037d0 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80037c8:	68bb      	ldr	r3, [r7, #8]
 80037ca:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80037cc:	2300      	movs	r3, #0
 80037ce:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	2200      	movs	r2, #0
 80037d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80037d8:	e02a      	b.n	8003830 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80037da:	683b      	ldr	r3, [r7, #0]
 80037dc:	9300      	str	r3, [sp, #0]
 80037de:	697b      	ldr	r3, [r7, #20]
 80037e0:	2200      	movs	r2, #0
 80037e2:	2180      	movs	r1, #128	; 0x80
 80037e4:	68f8      	ldr	r0, [r7, #12]
 80037e6:	f000 f840 	bl	800386a <UART_WaitOnFlagUntilTimeout>
 80037ea:	4603      	mov	r3, r0
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d001      	beq.n	80037f4 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80037f0:	2303      	movs	r3, #3
 80037f2:	e036      	b.n	8003862 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80037f4:	69fb      	ldr	r3, [r7, #28]
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d10b      	bne.n	8003812 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80037fa:	69bb      	ldr	r3, [r7, #24]
 80037fc:	881b      	ldrh	r3, [r3, #0]
 80037fe:	461a      	mov	r2, r3
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003808:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800380a:	69bb      	ldr	r3, [r7, #24]
 800380c:	3302      	adds	r3, #2
 800380e:	61bb      	str	r3, [r7, #24]
 8003810:	e007      	b.n	8003822 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003812:	69fb      	ldr	r3, [r7, #28]
 8003814:	781a      	ldrb	r2, [r3, #0]
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800381c:	69fb      	ldr	r3, [r7, #28]
 800381e:	3301      	adds	r3, #1
 8003820:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003826:	b29b      	uxth	r3, r3
 8003828:	3b01      	subs	r3, #1
 800382a:	b29a      	uxth	r2, r3
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003834:	b29b      	uxth	r3, r3
 8003836:	2b00      	cmp	r3, #0
 8003838:	d1cf      	bne.n	80037da <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800383a:	683b      	ldr	r3, [r7, #0]
 800383c:	9300      	str	r3, [sp, #0]
 800383e:	697b      	ldr	r3, [r7, #20]
 8003840:	2200      	movs	r2, #0
 8003842:	2140      	movs	r1, #64	; 0x40
 8003844:	68f8      	ldr	r0, [r7, #12]
 8003846:	f000 f810 	bl	800386a <UART_WaitOnFlagUntilTimeout>
 800384a:	4603      	mov	r3, r0
 800384c:	2b00      	cmp	r3, #0
 800384e:	d001      	beq.n	8003854 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8003850:	2303      	movs	r3, #3
 8003852:	e006      	b.n	8003862 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	2220      	movs	r2, #32
 8003858:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800385c:	2300      	movs	r3, #0
 800385e:	e000      	b.n	8003862 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8003860:	2302      	movs	r3, #2
  }
}
 8003862:	4618      	mov	r0, r3
 8003864:	3720      	adds	r7, #32
 8003866:	46bd      	mov	sp, r7
 8003868:	bd80      	pop	{r7, pc}

0800386a <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800386a:	b580      	push	{r7, lr}
 800386c:	b090      	sub	sp, #64	; 0x40
 800386e:	af00      	add	r7, sp, #0
 8003870:	60f8      	str	r0, [r7, #12]
 8003872:	60b9      	str	r1, [r7, #8]
 8003874:	603b      	str	r3, [r7, #0]
 8003876:	4613      	mov	r3, r2
 8003878:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800387a:	e050      	b.n	800391e <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800387c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800387e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003882:	d04c      	beq.n	800391e <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003884:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003886:	2b00      	cmp	r3, #0
 8003888:	d007      	beq.n	800389a <UART_WaitOnFlagUntilTimeout+0x30>
 800388a:	f7fe fb17 	bl	8001ebc <HAL_GetTick>
 800388e:	4602      	mov	r2, r0
 8003890:	683b      	ldr	r3, [r7, #0]
 8003892:	1ad3      	subs	r3, r2, r3
 8003894:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003896:	429a      	cmp	r2, r3
 8003898:	d241      	bcs.n	800391e <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	330c      	adds	r3, #12
 80038a0:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038a4:	e853 3f00 	ldrex	r3, [r3]
 80038a8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80038aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038ac:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80038b0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	330c      	adds	r3, #12
 80038b8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80038ba:	637a      	str	r2, [r7, #52]	; 0x34
 80038bc:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038be:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80038c0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80038c2:	e841 2300 	strex	r3, r2, [r1]
 80038c6:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80038c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d1e5      	bne.n	800389a <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	3314      	adds	r3, #20
 80038d4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038d6:	697b      	ldr	r3, [r7, #20]
 80038d8:	e853 3f00 	ldrex	r3, [r3]
 80038dc:	613b      	str	r3, [r7, #16]
   return(result);
 80038de:	693b      	ldr	r3, [r7, #16]
 80038e0:	f023 0301 	bic.w	r3, r3, #1
 80038e4:	63bb      	str	r3, [r7, #56]	; 0x38
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	3314      	adds	r3, #20
 80038ec:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80038ee:	623a      	str	r2, [r7, #32]
 80038f0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038f2:	69f9      	ldr	r1, [r7, #28]
 80038f4:	6a3a      	ldr	r2, [r7, #32]
 80038f6:	e841 2300 	strex	r3, r2, [r1]
 80038fa:	61bb      	str	r3, [r7, #24]
   return(result);
 80038fc:	69bb      	ldr	r3, [r7, #24]
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d1e5      	bne.n	80038ce <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	2220      	movs	r2, #32
 8003906:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	2220      	movs	r2, #32
 800390e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	2200      	movs	r2, #0
 8003916:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800391a:	2303      	movs	r3, #3
 800391c:	e00f      	b.n	800393e <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	681a      	ldr	r2, [r3, #0]
 8003924:	68bb      	ldr	r3, [r7, #8]
 8003926:	4013      	ands	r3, r2
 8003928:	68ba      	ldr	r2, [r7, #8]
 800392a:	429a      	cmp	r2, r3
 800392c:	bf0c      	ite	eq
 800392e:	2301      	moveq	r3, #1
 8003930:	2300      	movne	r3, #0
 8003932:	b2db      	uxtb	r3, r3
 8003934:	461a      	mov	r2, r3
 8003936:	79fb      	ldrb	r3, [r7, #7]
 8003938:	429a      	cmp	r2, r3
 800393a:	d09f      	beq.n	800387c <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800393c:	2300      	movs	r3, #0
}
 800393e:	4618      	mov	r0, r3
 8003940:	3740      	adds	r7, #64	; 0x40
 8003942:	46bd      	mov	sp, r7
 8003944:	bd80      	pop	{r7, pc}
	...

08003948 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003948:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800394c:	b0c0      	sub	sp, #256	; 0x100
 800394e:	af00      	add	r7, sp, #0
 8003950:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003954:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	691b      	ldr	r3, [r3, #16]
 800395c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003960:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003964:	68d9      	ldr	r1, [r3, #12]
 8003966:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800396a:	681a      	ldr	r2, [r3, #0]
 800396c:	ea40 0301 	orr.w	r3, r0, r1
 8003970:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003972:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003976:	689a      	ldr	r2, [r3, #8]
 8003978:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800397c:	691b      	ldr	r3, [r3, #16]
 800397e:	431a      	orrs	r2, r3
 8003980:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003984:	695b      	ldr	r3, [r3, #20]
 8003986:	431a      	orrs	r2, r3
 8003988:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800398c:	69db      	ldr	r3, [r3, #28]
 800398e:	4313      	orrs	r3, r2
 8003990:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003994:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	68db      	ldr	r3, [r3, #12]
 800399c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80039a0:	f021 010c 	bic.w	r1, r1, #12
 80039a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80039a8:	681a      	ldr	r2, [r3, #0]
 80039aa:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80039ae:	430b      	orrs	r3, r1
 80039b0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80039b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	695b      	ldr	r3, [r3, #20]
 80039ba:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80039be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80039c2:	6999      	ldr	r1, [r3, #24]
 80039c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80039c8:	681a      	ldr	r2, [r3, #0]
 80039ca:	ea40 0301 	orr.w	r3, r0, r1
 80039ce:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80039d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80039d4:	681a      	ldr	r2, [r3, #0]
 80039d6:	4b8f      	ldr	r3, [pc, #572]	; (8003c14 <UART_SetConfig+0x2cc>)
 80039d8:	429a      	cmp	r2, r3
 80039da:	d005      	beq.n	80039e8 <UART_SetConfig+0xa0>
 80039dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80039e0:	681a      	ldr	r2, [r3, #0]
 80039e2:	4b8d      	ldr	r3, [pc, #564]	; (8003c18 <UART_SetConfig+0x2d0>)
 80039e4:	429a      	cmp	r2, r3
 80039e6:	d104      	bne.n	80039f2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80039e8:	f7ff fb34 	bl	8003054 <HAL_RCC_GetPCLK2Freq>
 80039ec:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80039f0:	e003      	b.n	80039fa <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80039f2:	f7ff fb1b 	bl	800302c <HAL_RCC_GetPCLK1Freq>
 80039f6:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80039fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80039fe:	69db      	ldr	r3, [r3, #28]
 8003a00:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003a04:	f040 810c 	bne.w	8003c20 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003a08:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003a0c:	2200      	movs	r2, #0
 8003a0e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8003a12:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8003a16:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8003a1a:	4622      	mov	r2, r4
 8003a1c:	462b      	mov	r3, r5
 8003a1e:	1891      	adds	r1, r2, r2
 8003a20:	65b9      	str	r1, [r7, #88]	; 0x58
 8003a22:	415b      	adcs	r3, r3
 8003a24:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003a26:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003a2a:	4621      	mov	r1, r4
 8003a2c:	eb12 0801 	adds.w	r8, r2, r1
 8003a30:	4629      	mov	r1, r5
 8003a32:	eb43 0901 	adc.w	r9, r3, r1
 8003a36:	f04f 0200 	mov.w	r2, #0
 8003a3a:	f04f 0300 	mov.w	r3, #0
 8003a3e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003a42:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003a46:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003a4a:	4690      	mov	r8, r2
 8003a4c:	4699      	mov	r9, r3
 8003a4e:	4623      	mov	r3, r4
 8003a50:	eb18 0303 	adds.w	r3, r8, r3
 8003a54:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8003a58:	462b      	mov	r3, r5
 8003a5a:	eb49 0303 	adc.w	r3, r9, r3
 8003a5e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8003a62:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003a66:	685b      	ldr	r3, [r3, #4]
 8003a68:	2200      	movs	r2, #0
 8003a6a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8003a6e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8003a72:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8003a76:	460b      	mov	r3, r1
 8003a78:	18db      	adds	r3, r3, r3
 8003a7a:	653b      	str	r3, [r7, #80]	; 0x50
 8003a7c:	4613      	mov	r3, r2
 8003a7e:	eb42 0303 	adc.w	r3, r2, r3
 8003a82:	657b      	str	r3, [r7, #84]	; 0x54
 8003a84:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8003a88:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8003a8c:	f7fc fbf8 	bl	8000280 <__aeabi_uldivmod>
 8003a90:	4602      	mov	r2, r0
 8003a92:	460b      	mov	r3, r1
 8003a94:	4b61      	ldr	r3, [pc, #388]	; (8003c1c <UART_SetConfig+0x2d4>)
 8003a96:	fba3 2302 	umull	r2, r3, r3, r2
 8003a9a:	095b      	lsrs	r3, r3, #5
 8003a9c:	011c      	lsls	r4, r3, #4
 8003a9e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003aa2:	2200      	movs	r2, #0
 8003aa4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003aa8:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8003aac:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8003ab0:	4642      	mov	r2, r8
 8003ab2:	464b      	mov	r3, r9
 8003ab4:	1891      	adds	r1, r2, r2
 8003ab6:	64b9      	str	r1, [r7, #72]	; 0x48
 8003ab8:	415b      	adcs	r3, r3
 8003aba:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003abc:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003ac0:	4641      	mov	r1, r8
 8003ac2:	eb12 0a01 	adds.w	sl, r2, r1
 8003ac6:	4649      	mov	r1, r9
 8003ac8:	eb43 0b01 	adc.w	fp, r3, r1
 8003acc:	f04f 0200 	mov.w	r2, #0
 8003ad0:	f04f 0300 	mov.w	r3, #0
 8003ad4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003ad8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003adc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003ae0:	4692      	mov	sl, r2
 8003ae2:	469b      	mov	fp, r3
 8003ae4:	4643      	mov	r3, r8
 8003ae6:	eb1a 0303 	adds.w	r3, sl, r3
 8003aea:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003aee:	464b      	mov	r3, r9
 8003af0:	eb4b 0303 	adc.w	r3, fp, r3
 8003af4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003af8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003afc:	685b      	ldr	r3, [r3, #4]
 8003afe:	2200      	movs	r2, #0
 8003b00:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003b04:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8003b08:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8003b0c:	460b      	mov	r3, r1
 8003b0e:	18db      	adds	r3, r3, r3
 8003b10:	643b      	str	r3, [r7, #64]	; 0x40
 8003b12:	4613      	mov	r3, r2
 8003b14:	eb42 0303 	adc.w	r3, r2, r3
 8003b18:	647b      	str	r3, [r7, #68]	; 0x44
 8003b1a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003b1e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8003b22:	f7fc fbad 	bl	8000280 <__aeabi_uldivmod>
 8003b26:	4602      	mov	r2, r0
 8003b28:	460b      	mov	r3, r1
 8003b2a:	4611      	mov	r1, r2
 8003b2c:	4b3b      	ldr	r3, [pc, #236]	; (8003c1c <UART_SetConfig+0x2d4>)
 8003b2e:	fba3 2301 	umull	r2, r3, r3, r1
 8003b32:	095b      	lsrs	r3, r3, #5
 8003b34:	2264      	movs	r2, #100	; 0x64
 8003b36:	fb02 f303 	mul.w	r3, r2, r3
 8003b3a:	1acb      	subs	r3, r1, r3
 8003b3c:	00db      	lsls	r3, r3, #3
 8003b3e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8003b42:	4b36      	ldr	r3, [pc, #216]	; (8003c1c <UART_SetConfig+0x2d4>)
 8003b44:	fba3 2302 	umull	r2, r3, r3, r2
 8003b48:	095b      	lsrs	r3, r3, #5
 8003b4a:	005b      	lsls	r3, r3, #1
 8003b4c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003b50:	441c      	add	r4, r3
 8003b52:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003b56:	2200      	movs	r2, #0
 8003b58:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003b5c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8003b60:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8003b64:	4642      	mov	r2, r8
 8003b66:	464b      	mov	r3, r9
 8003b68:	1891      	adds	r1, r2, r2
 8003b6a:	63b9      	str	r1, [r7, #56]	; 0x38
 8003b6c:	415b      	adcs	r3, r3
 8003b6e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003b70:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003b74:	4641      	mov	r1, r8
 8003b76:	1851      	adds	r1, r2, r1
 8003b78:	6339      	str	r1, [r7, #48]	; 0x30
 8003b7a:	4649      	mov	r1, r9
 8003b7c:	414b      	adcs	r3, r1
 8003b7e:	637b      	str	r3, [r7, #52]	; 0x34
 8003b80:	f04f 0200 	mov.w	r2, #0
 8003b84:	f04f 0300 	mov.w	r3, #0
 8003b88:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8003b8c:	4659      	mov	r1, fp
 8003b8e:	00cb      	lsls	r3, r1, #3
 8003b90:	4651      	mov	r1, sl
 8003b92:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003b96:	4651      	mov	r1, sl
 8003b98:	00ca      	lsls	r2, r1, #3
 8003b9a:	4610      	mov	r0, r2
 8003b9c:	4619      	mov	r1, r3
 8003b9e:	4603      	mov	r3, r0
 8003ba0:	4642      	mov	r2, r8
 8003ba2:	189b      	adds	r3, r3, r2
 8003ba4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003ba8:	464b      	mov	r3, r9
 8003baa:	460a      	mov	r2, r1
 8003bac:	eb42 0303 	adc.w	r3, r2, r3
 8003bb0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003bb4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003bb8:	685b      	ldr	r3, [r3, #4]
 8003bba:	2200      	movs	r2, #0
 8003bbc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003bc0:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8003bc4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8003bc8:	460b      	mov	r3, r1
 8003bca:	18db      	adds	r3, r3, r3
 8003bcc:	62bb      	str	r3, [r7, #40]	; 0x28
 8003bce:	4613      	mov	r3, r2
 8003bd0:	eb42 0303 	adc.w	r3, r2, r3
 8003bd4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003bd6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003bda:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8003bde:	f7fc fb4f 	bl	8000280 <__aeabi_uldivmod>
 8003be2:	4602      	mov	r2, r0
 8003be4:	460b      	mov	r3, r1
 8003be6:	4b0d      	ldr	r3, [pc, #52]	; (8003c1c <UART_SetConfig+0x2d4>)
 8003be8:	fba3 1302 	umull	r1, r3, r3, r2
 8003bec:	095b      	lsrs	r3, r3, #5
 8003bee:	2164      	movs	r1, #100	; 0x64
 8003bf0:	fb01 f303 	mul.w	r3, r1, r3
 8003bf4:	1ad3      	subs	r3, r2, r3
 8003bf6:	00db      	lsls	r3, r3, #3
 8003bf8:	3332      	adds	r3, #50	; 0x32
 8003bfa:	4a08      	ldr	r2, [pc, #32]	; (8003c1c <UART_SetConfig+0x2d4>)
 8003bfc:	fba2 2303 	umull	r2, r3, r2, r3
 8003c00:	095b      	lsrs	r3, r3, #5
 8003c02:	f003 0207 	and.w	r2, r3, #7
 8003c06:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	4422      	add	r2, r4
 8003c0e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003c10:	e105      	b.n	8003e1e <UART_SetConfig+0x4d6>
 8003c12:	bf00      	nop
 8003c14:	40011000 	.word	0x40011000
 8003c18:	40011400 	.word	0x40011400
 8003c1c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003c20:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003c24:	2200      	movs	r2, #0
 8003c26:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8003c2a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8003c2e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8003c32:	4642      	mov	r2, r8
 8003c34:	464b      	mov	r3, r9
 8003c36:	1891      	adds	r1, r2, r2
 8003c38:	6239      	str	r1, [r7, #32]
 8003c3a:	415b      	adcs	r3, r3
 8003c3c:	627b      	str	r3, [r7, #36]	; 0x24
 8003c3e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003c42:	4641      	mov	r1, r8
 8003c44:	1854      	adds	r4, r2, r1
 8003c46:	4649      	mov	r1, r9
 8003c48:	eb43 0501 	adc.w	r5, r3, r1
 8003c4c:	f04f 0200 	mov.w	r2, #0
 8003c50:	f04f 0300 	mov.w	r3, #0
 8003c54:	00eb      	lsls	r3, r5, #3
 8003c56:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003c5a:	00e2      	lsls	r2, r4, #3
 8003c5c:	4614      	mov	r4, r2
 8003c5e:	461d      	mov	r5, r3
 8003c60:	4643      	mov	r3, r8
 8003c62:	18e3      	adds	r3, r4, r3
 8003c64:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003c68:	464b      	mov	r3, r9
 8003c6a:	eb45 0303 	adc.w	r3, r5, r3
 8003c6e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8003c72:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c76:	685b      	ldr	r3, [r3, #4]
 8003c78:	2200      	movs	r2, #0
 8003c7a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003c7e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003c82:	f04f 0200 	mov.w	r2, #0
 8003c86:	f04f 0300 	mov.w	r3, #0
 8003c8a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8003c8e:	4629      	mov	r1, r5
 8003c90:	008b      	lsls	r3, r1, #2
 8003c92:	4621      	mov	r1, r4
 8003c94:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003c98:	4621      	mov	r1, r4
 8003c9a:	008a      	lsls	r2, r1, #2
 8003c9c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8003ca0:	f7fc faee 	bl	8000280 <__aeabi_uldivmod>
 8003ca4:	4602      	mov	r2, r0
 8003ca6:	460b      	mov	r3, r1
 8003ca8:	4b60      	ldr	r3, [pc, #384]	; (8003e2c <UART_SetConfig+0x4e4>)
 8003caa:	fba3 2302 	umull	r2, r3, r3, r2
 8003cae:	095b      	lsrs	r3, r3, #5
 8003cb0:	011c      	lsls	r4, r3, #4
 8003cb2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003cb6:	2200      	movs	r2, #0
 8003cb8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003cbc:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8003cc0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8003cc4:	4642      	mov	r2, r8
 8003cc6:	464b      	mov	r3, r9
 8003cc8:	1891      	adds	r1, r2, r2
 8003cca:	61b9      	str	r1, [r7, #24]
 8003ccc:	415b      	adcs	r3, r3
 8003cce:	61fb      	str	r3, [r7, #28]
 8003cd0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003cd4:	4641      	mov	r1, r8
 8003cd6:	1851      	adds	r1, r2, r1
 8003cd8:	6139      	str	r1, [r7, #16]
 8003cda:	4649      	mov	r1, r9
 8003cdc:	414b      	adcs	r3, r1
 8003cde:	617b      	str	r3, [r7, #20]
 8003ce0:	f04f 0200 	mov.w	r2, #0
 8003ce4:	f04f 0300 	mov.w	r3, #0
 8003ce8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003cec:	4659      	mov	r1, fp
 8003cee:	00cb      	lsls	r3, r1, #3
 8003cf0:	4651      	mov	r1, sl
 8003cf2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003cf6:	4651      	mov	r1, sl
 8003cf8:	00ca      	lsls	r2, r1, #3
 8003cfa:	4610      	mov	r0, r2
 8003cfc:	4619      	mov	r1, r3
 8003cfe:	4603      	mov	r3, r0
 8003d00:	4642      	mov	r2, r8
 8003d02:	189b      	adds	r3, r3, r2
 8003d04:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003d08:	464b      	mov	r3, r9
 8003d0a:	460a      	mov	r2, r1
 8003d0c:	eb42 0303 	adc.w	r3, r2, r3
 8003d10:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003d14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d18:	685b      	ldr	r3, [r3, #4]
 8003d1a:	2200      	movs	r2, #0
 8003d1c:	67bb      	str	r3, [r7, #120]	; 0x78
 8003d1e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8003d20:	f04f 0200 	mov.w	r2, #0
 8003d24:	f04f 0300 	mov.w	r3, #0
 8003d28:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8003d2c:	4649      	mov	r1, r9
 8003d2e:	008b      	lsls	r3, r1, #2
 8003d30:	4641      	mov	r1, r8
 8003d32:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003d36:	4641      	mov	r1, r8
 8003d38:	008a      	lsls	r2, r1, #2
 8003d3a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8003d3e:	f7fc fa9f 	bl	8000280 <__aeabi_uldivmod>
 8003d42:	4602      	mov	r2, r0
 8003d44:	460b      	mov	r3, r1
 8003d46:	4b39      	ldr	r3, [pc, #228]	; (8003e2c <UART_SetConfig+0x4e4>)
 8003d48:	fba3 1302 	umull	r1, r3, r3, r2
 8003d4c:	095b      	lsrs	r3, r3, #5
 8003d4e:	2164      	movs	r1, #100	; 0x64
 8003d50:	fb01 f303 	mul.w	r3, r1, r3
 8003d54:	1ad3      	subs	r3, r2, r3
 8003d56:	011b      	lsls	r3, r3, #4
 8003d58:	3332      	adds	r3, #50	; 0x32
 8003d5a:	4a34      	ldr	r2, [pc, #208]	; (8003e2c <UART_SetConfig+0x4e4>)
 8003d5c:	fba2 2303 	umull	r2, r3, r2, r3
 8003d60:	095b      	lsrs	r3, r3, #5
 8003d62:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003d66:	441c      	add	r4, r3
 8003d68:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003d6c:	2200      	movs	r2, #0
 8003d6e:	673b      	str	r3, [r7, #112]	; 0x70
 8003d70:	677a      	str	r2, [r7, #116]	; 0x74
 8003d72:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8003d76:	4642      	mov	r2, r8
 8003d78:	464b      	mov	r3, r9
 8003d7a:	1891      	adds	r1, r2, r2
 8003d7c:	60b9      	str	r1, [r7, #8]
 8003d7e:	415b      	adcs	r3, r3
 8003d80:	60fb      	str	r3, [r7, #12]
 8003d82:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003d86:	4641      	mov	r1, r8
 8003d88:	1851      	adds	r1, r2, r1
 8003d8a:	6039      	str	r1, [r7, #0]
 8003d8c:	4649      	mov	r1, r9
 8003d8e:	414b      	adcs	r3, r1
 8003d90:	607b      	str	r3, [r7, #4]
 8003d92:	f04f 0200 	mov.w	r2, #0
 8003d96:	f04f 0300 	mov.w	r3, #0
 8003d9a:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003d9e:	4659      	mov	r1, fp
 8003da0:	00cb      	lsls	r3, r1, #3
 8003da2:	4651      	mov	r1, sl
 8003da4:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003da8:	4651      	mov	r1, sl
 8003daa:	00ca      	lsls	r2, r1, #3
 8003dac:	4610      	mov	r0, r2
 8003dae:	4619      	mov	r1, r3
 8003db0:	4603      	mov	r3, r0
 8003db2:	4642      	mov	r2, r8
 8003db4:	189b      	adds	r3, r3, r2
 8003db6:	66bb      	str	r3, [r7, #104]	; 0x68
 8003db8:	464b      	mov	r3, r9
 8003dba:	460a      	mov	r2, r1
 8003dbc:	eb42 0303 	adc.w	r3, r2, r3
 8003dc0:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003dc2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003dc6:	685b      	ldr	r3, [r3, #4]
 8003dc8:	2200      	movs	r2, #0
 8003dca:	663b      	str	r3, [r7, #96]	; 0x60
 8003dcc:	667a      	str	r2, [r7, #100]	; 0x64
 8003dce:	f04f 0200 	mov.w	r2, #0
 8003dd2:	f04f 0300 	mov.w	r3, #0
 8003dd6:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8003dda:	4649      	mov	r1, r9
 8003ddc:	008b      	lsls	r3, r1, #2
 8003dde:	4641      	mov	r1, r8
 8003de0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003de4:	4641      	mov	r1, r8
 8003de6:	008a      	lsls	r2, r1, #2
 8003de8:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8003dec:	f7fc fa48 	bl	8000280 <__aeabi_uldivmod>
 8003df0:	4602      	mov	r2, r0
 8003df2:	460b      	mov	r3, r1
 8003df4:	4b0d      	ldr	r3, [pc, #52]	; (8003e2c <UART_SetConfig+0x4e4>)
 8003df6:	fba3 1302 	umull	r1, r3, r3, r2
 8003dfa:	095b      	lsrs	r3, r3, #5
 8003dfc:	2164      	movs	r1, #100	; 0x64
 8003dfe:	fb01 f303 	mul.w	r3, r1, r3
 8003e02:	1ad3      	subs	r3, r2, r3
 8003e04:	011b      	lsls	r3, r3, #4
 8003e06:	3332      	adds	r3, #50	; 0x32
 8003e08:	4a08      	ldr	r2, [pc, #32]	; (8003e2c <UART_SetConfig+0x4e4>)
 8003e0a:	fba2 2303 	umull	r2, r3, r2, r3
 8003e0e:	095b      	lsrs	r3, r3, #5
 8003e10:	f003 020f 	and.w	r2, r3, #15
 8003e14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	4422      	add	r2, r4
 8003e1c:	609a      	str	r2, [r3, #8]
}
 8003e1e:	bf00      	nop
 8003e20:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8003e24:	46bd      	mov	sp, r7
 8003e26:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003e2a:	bf00      	nop
 8003e2c:	51eb851f 	.word	0x51eb851f

08003e30 <aci_gap_init_IDB05A1>:

#define MIN(a,b)            ((a) < (b) )? (a) : (b)
#define MAX(a,b)            ((a) > (b) )? (a) : (b)

tBleStatus aci_gap_init_IDB05A1(uint8_t role, uint8_t privacy_enabled, uint8_t device_name_char_len, uint16_t* service_handle, uint16_t* dev_name_char_handle, uint16_t* appearance_char_handle)
{
 8003e30:	b580      	push	{r7, lr}
 8003e32:	b08c      	sub	sp, #48	; 0x30
 8003e34:	af00      	add	r7, sp, #0
 8003e36:	603b      	str	r3, [r7, #0]
 8003e38:	4603      	mov	r3, r0
 8003e3a:	71fb      	strb	r3, [r7, #7]
 8003e3c:	460b      	mov	r3, r1
 8003e3e:	71bb      	strb	r3, [r7, #6]
 8003e40:	4613      	mov	r3, r2
 8003e42:	717b      	strb	r3, [r7, #5]
  struct hci_request rq;
  gap_init_cp_IDB05A1 cp;
  gap_init_rp resp;
 
  cp.role = role;
 8003e44:	79fb      	ldrb	r3, [r7, #7]
 8003e46:	753b      	strb	r3, [r7, #20]
  cp.privacy_enabled = privacy_enabled;
 8003e48:	79bb      	ldrb	r3, [r7, #6]
 8003e4a:	757b      	strb	r3, [r7, #21]
  cp.device_name_char_len = device_name_char_len;
 8003e4c:	797b      	ldrb	r3, [r7, #5]
 8003e4e:	75bb      	strb	r3, [r7, #22]
    
  BLUENRG_memset(&resp, 0, sizeof(resp));
 8003e50:	f107 030c 	add.w	r3, r7, #12
 8003e54:	2207      	movs	r2, #7
 8003e56:	2100      	movs	r1, #0
 8003e58:	4618      	mov	r0, r3
 8003e5a:	f001 fca0 	bl	800579e <memset>
  
  BLUENRG_memset(&rq, 0, sizeof(rq));
 8003e5e:	f107 0318 	add.w	r3, r7, #24
 8003e62:	2218      	movs	r2, #24
 8003e64:	2100      	movs	r1, #0
 8003e66:	4618      	mov	r0, r3
 8003e68:	f001 fc99 	bl	800579e <memset>
  rq.ogf = OGF_VENDOR_CMD;
 8003e6c:	233f      	movs	r3, #63	; 0x3f
 8003e6e:	833b      	strh	r3, [r7, #24]
  rq.ocf = OCF_GAP_INIT;
 8003e70:	238a      	movs	r3, #138	; 0x8a
 8003e72:	837b      	strh	r3, [r7, #26]
  rq.cparam = &cp;
 8003e74:	f107 0314 	add.w	r3, r7, #20
 8003e78:	623b      	str	r3, [r7, #32]
  rq.clen = sizeof(cp);
 8003e7a:	2303      	movs	r3, #3
 8003e7c:	627b      	str	r3, [r7, #36]	; 0x24
  rq.rparam = &resp;
 8003e7e:	f107 030c 	add.w	r3, r7, #12
 8003e82:	62bb      	str	r3, [r7, #40]	; 0x28
  rq.rlen = GAP_INIT_RP_SIZE;
 8003e84:	2307      	movs	r3, #7
 8003e86:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  if (hci_send_req(&rq, FALSE) < 0)
 8003e88:	f107 0318 	add.w	r3, r7, #24
 8003e8c:	2100      	movs	r1, #0
 8003e8e:	4618      	mov	r0, r3
 8003e90:	f000 ffd6 	bl	8004e40 <hci_send_req>
 8003e94:	4603      	mov	r3, r0
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	da01      	bge.n	8003e9e <aci_gap_init_IDB05A1+0x6e>
    return BLE_STATUS_TIMEOUT;
 8003e9a:	23ff      	movs	r3, #255	; 0xff
 8003e9c:	e014      	b.n	8003ec8 <aci_gap_init_IDB05A1+0x98>
  
  if (resp.status) {
 8003e9e:	7b3b      	ldrb	r3, [r7, #12]
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d001      	beq.n	8003ea8 <aci_gap_init_IDB05A1+0x78>
    return resp.status;
 8003ea4:	7b3b      	ldrb	r3, [r7, #12]
 8003ea6:	e00f      	b.n	8003ec8 <aci_gap_init_IDB05A1+0x98>
  }
  
  *service_handle = btohs(resp.service_handle);
 8003ea8:	f8b7 300d 	ldrh.w	r3, [r7, #13]
 8003eac:	b29a      	uxth	r2, r3
 8003eae:	683b      	ldr	r3, [r7, #0]
 8003eb0:	801a      	strh	r2, [r3, #0]
  *dev_name_char_handle = btohs(resp.dev_name_char_handle);
 8003eb2:	f8b7 300f 	ldrh.w	r3, [r7, #15]
 8003eb6:	b29a      	uxth	r2, r3
 8003eb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003eba:	801a      	strh	r2, [r3, #0]
  *appearance_char_handle = btohs(resp.appearance_char_handle);
 8003ebc:	f8b7 3011 	ldrh.w	r3, [r7, #17]
 8003ec0:	b29a      	uxth	r2, r3
 8003ec2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003ec4:	801a      	strh	r2, [r3, #0]
  
  return 0;
 8003ec6:	2300      	movs	r3, #0
}
 8003ec8:	4618      	mov	r0, r3
 8003eca:	3730      	adds	r7, #48	; 0x30
 8003ecc:	46bd      	mov	sp, r7
 8003ece:	bd80      	pop	{r7, pc}

08003ed0 <aci_gap_init_IDB04A1>:

tBleStatus aci_gap_init_IDB04A1(uint8_t role, uint16_t* service_handle, uint16_t* dev_name_char_handle, uint16_t* appearance_char_handle)
{
 8003ed0:	b580      	push	{r7, lr}
 8003ed2:	b08e      	sub	sp, #56	; 0x38
 8003ed4:	af00      	add	r7, sp, #0
 8003ed6:	60b9      	str	r1, [r7, #8]
 8003ed8:	607a      	str	r2, [r7, #4]
 8003eda:	603b      	str	r3, [r7, #0]
 8003edc:	4603      	mov	r3, r0
 8003ede:	73fb      	strb	r3, [r7, #15]
  struct hci_request rq;
  gap_init_cp_IDB04A1 cp;
  gap_init_rp resp;

  cp.role = role;
 8003ee0:	7bfb      	ldrb	r3, [r7, #15]
 8003ee2:	773b      	strb	r3, [r7, #28]
    
  BLUENRG_memset(&resp, 0, sizeof(resp));
 8003ee4:	f107 0314 	add.w	r3, r7, #20
 8003ee8:	2207      	movs	r2, #7
 8003eea:	2100      	movs	r1, #0
 8003eec:	4618      	mov	r0, r3
 8003eee:	f001 fc56 	bl	800579e <memset>
  
  BLUENRG_memset(&rq, 0, sizeof(rq));
 8003ef2:	f107 0320 	add.w	r3, r7, #32
 8003ef6:	2218      	movs	r2, #24
 8003ef8:	2100      	movs	r1, #0
 8003efa:	4618      	mov	r0, r3
 8003efc:	f001 fc4f 	bl	800579e <memset>
  rq.ogf = OGF_VENDOR_CMD;
 8003f00:	233f      	movs	r3, #63	; 0x3f
 8003f02:	843b      	strh	r3, [r7, #32]
  rq.ocf = OCF_GAP_INIT;
 8003f04:	238a      	movs	r3, #138	; 0x8a
 8003f06:	847b      	strh	r3, [r7, #34]	; 0x22
  rq.cparam = &cp;
 8003f08:	f107 031c 	add.w	r3, r7, #28
 8003f0c:	62bb      	str	r3, [r7, #40]	; 0x28
  rq.clen = sizeof(cp);
 8003f0e:	2301      	movs	r3, #1
 8003f10:	62fb      	str	r3, [r7, #44]	; 0x2c
  rq.rparam = &resp;
 8003f12:	f107 0314 	add.w	r3, r7, #20
 8003f16:	633b      	str	r3, [r7, #48]	; 0x30
  rq.rlen = GAP_INIT_RP_SIZE;
 8003f18:	2307      	movs	r3, #7
 8003f1a:	637b      	str	r3, [r7, #52]	; 0x34
  
  if (hci_send_req(&rq, FALSE) < 0)
 8003f1c:	f107 0320 	add.w	r3, r7, #32
 8003f20:	2100      	movs	r1, #0
 8003f22:	4618      	mov	r0, r3
 8003f24:	f000 ff8c 	bl	8004e40 <hci_send_req>
 8003f28:	4603      	mov	r3, r0
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	da01      	bge.n	8003f32 <aci_gap_init_IDB04A1+0x62>
    return BLE_STATUS_TIMEOUT;
 8003f2e:	23ff      	movs	r3, #255	; 0xff
 8003f30:	e014      	b.n	8003f5c <aci_gap_init_IDB04A1+0x8c>
  
  if (resp.status) {
 8003f32:	7d3b      	ldrb	r3, [r7, #20]
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d001      	beq.n	8003f3c <aci_gap_init_IDB04A1+0x6c>
    return resp.status;
 8003f38:	7d3b      	ldrb	r3, [r7, #20]
 8003f3a:	e00f      	b.n	8003f5c <aci_gap_init_IDB04A1+0x8c>
  }
  
  *service_handle = btohs(resp.service_handle);
 8003f3c:	f8b7 3015 	ldrh.w	r3, [r7, #21]
 8003f40:	b29a      	uxth	r2, r3
 8003f42:	68bb      	ldr	r3, [r7, #8]
 8003f44:	801a      	strh	r2, [r3, #0]
  *dev_name_char_handle = btohs(resp.dev_name_char_handle);
 8003f46:	f8b7 3017 	ldrh.w	r3, [r7, #23]
 8003f4a:	b29a      	uxth	r2, r3
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	801a      	strh	r2, [r3, #0]
  *appearance_char_handle = btohs(resp.appearance_char_handle);
 8003f50:	f8b7 3019 	ldrh.w	r3, [r7, #25]
 8003f54:	b29a      	uxth	r2, r3
 8003f56:	683b      	ldr	r3, [r7, #0]
 8003f58:	801a      	strh	r2, [r3, #0]
  
  return 0;
 8003f5a:	2300      	movs	r3, #0
}
 8003f5c:	4618      	mov	r0, r3
 8003f5e:	3738      	adds	r7, #56	; 0x38
 8003f60:	46bd      	mov	sp, r7
 8003f62:	bd80      	pop	{r7, pc}

08003f64 <aci_gap_set_discoverable>:

tBleStatus aci_gap_set_discoverable(uint8_t AdvType, uint16_t AdvIntervMin, uint16_t AdvIntervMax,
                             uint8_t OwnAddrType, uint8_t AdvFilterPolicy, uint8_t LocalNameLen,
                             const char *LocalName, uint8_t ServiceUUIDLen, uint8_t* ServiceUUIDList,
                             uint16_t SlaveConnIntervMin, uint16_t SlaveConnIntervMax)
{
 8003f64:	b590      	push	{r4, r7, lr}
 8003f66:	b095      	sub	sp, #84	; 0x54
 8003f68:	af00      	add	r7, sp, #0
 8003f6a:	4604      	mov	r4, r0
 8003f6c:	4608      	mov	r0, r1
 8003f6e:	4611      	mov	r1, r2
 8003f70:	461a      	mov	r2, r3
 8003f72:	4623      	mov	r3, r4
 8003f74:	71fb      	strb	r3, [r7, #7]
 8003f76:	4603      	mov	r3, r0
 8003f78:	80bb      	strh	r3, [r7, #4]
 8003f7a:	460b      	mov	r3, r1
 8003f7c:	807b      	strh	r3, [r7, #2]
 8003f7e:	4613      	mov	r3, r2
 8003f80:	71bb      	strb	r3, [r7, #6]
  struct hci_request rq;
  uint8_t status;    
  uint8_t buffer[40];
  uint8_t indx = 0;
 8003f82:	2300      	movs	r3, #0
 8003f84:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  
  if ((LocalNameLen+ServiceUUIDLen+14) > sizeof(buffer))
 8003f88:	f897 2064 	ldrb.w	r2, [r7, #100]	; 0x64
 8003f8c:	f897 306c 	ldrb.w	r3, [r7, #108]	; 0x6c
 8003f90:	4413      	add	r3, r2
 8003f92:	330e      	adds	r3, #14
 8003f94:	2b28      	cmp	r3, #40	; 0x28
 8003f96:	d901      	bls.n	8003f9c <aci_gap_set_discoverable+0x38>
    return BLE_STATUS_INVALID_PARAMS;
 8003f98:	2342      	movs	r3, #66	; 0x42
 8003f9a:	e0c9      	b.n	8004130 <aci_gap_set_discoverable+0x1cc>

  buffer[indx] = AdvType;
 8003f9c:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8003fa0:	3350      	adds	r3, #80	; 0x50
 8003fa2:	443b      	add	r3, r7
 8003fa4:	79fa      	ldrb	r2, [r7, #7]
 8003fa6:	f803 2c48 	strb.w	r2, [r3, #-72]
  indx++;
 8003faa:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8003fae:	3301      	adds	r3, #1
 8003fb0:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  
  AdvIntervMin = htobs(AdvIntervMin);
 8003fb4:	88bb      	ldrh	r3, [r7, #4]
 8003fb6:	80bb      	strh	r3, [r7, #4]
  BLUENRG_memcpy(buffer + indx, &AdvIntervMin, 2);
 8003fb8:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8003fbc:	f107 0208 	add.w	r2, r7, #8
 8003fc0:	4413      	add	r3, r2
 8003fc2:	88ba      	ldrh	r2, [r7, #4]
 8003fc4:	801a      	strh	r2, [r3, #0]
  indx +=  2;
 8003fc6:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8003fca:	3302      	adds	r3, #2
 8003fcc:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
    
  AdvIntervMax = htobs(AdvIntervMax);
 8003fd0:	887b      	ldrh	r3, [r7, #2]
 8003fd2:	807b      	strh	r3, [r7, #2]
  BLUENRG_memcpy(buffer + indx, &AdvIntervMax, 2);
 8003fd4:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8003fd8:	f107 0208 	add.w	r2, r7, #8
 8003fdc:	4413      	add	r3, r2
 8003fde:	887a      	ldrh	r2, [r7, #2]
 8003fe0:	801a      	strh	r2, [r3, #0]
  indx +=  2;
 8003fe2:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8003fe6:	3302      	adds	r3, #2
 8003fe8:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
    
  buffer[indx] = OwnAddrType;
 8003fec:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8003ff0:	3350      	adds	r3, #80	; 0x50
 8003ff2:	443b      	add	r3, r7
 8003ff4:	79ba      	ldrb	r2, [r7, #6]
 8003ff6:	f803 2c48 	strb.w	r2, [r3, #-72]
  indx++;
 8003ffa:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8003ffe:	3301      	adds	r3, #1
 8004000:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
    
  buffer[indx] = AdvFilterPolicy;
 8004004:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8004008:	3350      	adds	r3, #80	; 0x50
 800400a:	443b      	add	r3, r7
 800400c:	f897 2060 	ldrb.w	r2, [r7, #96]	; 0x60
 8004010:	f803 2c48 	strb.w	r2, [r3, #-72]
  indx++;
 8004014:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8004018:	3301      	adds	r3, #1
 800401a:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
    
  buffer[indx] = LocalNameLen;
 800401e:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8004022:	3350      	adds	r3, #80	; 0x50
 8004024:	443b      	add	r3, r7
 8004026:	f897 2064 	ldrb.w	r2, [r7, #100]	; 0x64
 800402a:	f803 2c48 	strb.w	r2, [r3, #-72]
  indx++;
 800402e:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8004032:	3301      	adds	r3, #1
 8004034:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
    
  BLUENRG_memcpy(buffer + indx, LocalName, LocalNameLen);
 8004038:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800403c:	f107 0208 	add.w	r2, r7, #8
 8004040:	4413      	add	r3, r2
 8004042:	f897 2064 	ldrb.w	r2, [r7, #100]	; 0x64
 8004046:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8004048:	4618      	mov	r0, r3
 800404a:	f001 fb9a 	bl	8005782 <memcpy>
  indx +=  LocalNameLen;
 800404e:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 8004052:	f897 3064 	ldrb.w	r3, [r7, #100]	; 0x64
 8004056:	4413      	add	r3, r2
 8004058:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  
  buffer[indx] = ServiceUUIDLen;
 800405c:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8004060:	3350      	adds	r3, #80	; 0x50
 8004062:	443b      	add	r3, r7
 8004064:	f897 206c 	ldrb.w	r2, [r7, #108]	; 0x6c
 8004068:	f803 2c48 	strb.w	r2, [r3, #-72]
  indx++;
 800406c:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8004070:	3301      	adds	r3, #1
 8004072:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

  BLUENRG_memcpy(buffer + indx, ServiceUUIDList, ServiceUUIDLen);
 8004076:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800407a:	f107 0208 	add.w	r2, r7, #8
 800407e:	4413      	add	r3, r2
 8004080:	f897 206c 	ldrb.w	r2, [r7, #108]	; 0x6c
 8004084:	6f39      	ldr	r1, [r7, #112]	; 0x70
 8004086:	4618      	mov	r0, r3
 8004088:	f001 fb7b 	bl	8005782 <memcpy>
  indx +=  ServiceUUIDLen;  
 800408c:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 8004090:	f897 306c 	ldrb.w	r3, [r7, #108]	; 0x6c
 8004094:	4413      	add	r3, r2
 8004096:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

  SlaveConnIntervMin = htobs(SlaveConnIntervMin);
 800409a:	f8b7 3074 	ldrh.w	r3, [r7, #116]	; 0x74
 800409e:	f8a7 3074 	strh.w	r3, [r7, #116]	; 0x74
  BLUENRG_memcpy(buffer + indx, &SlaveConnIntervMin, 2);
 80040a2:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80040a6:	f107 0208 	add.w	r2, r7, #8
 80040aa:	4413      	add	r3, r2
 80040ac:	f8b7 2074 	ldrh.w	r2, [r7, #116]	; 0x74
 80040b0:	801a      	strh	r2, [r3, #0]
  indx +=  2;
 80040b2:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80040b6:	3302      	adds	r3, #2
 80040b8:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  
  SlaveConnIntervMax = htobs(SlaveConnIntervMax);
 80040bc:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 80040c0:	f8a7 3078 	strh.w	r3, [r7, #120]	; 0x78
  BLUENRG_memcpy(buffer + indx, &SlaveConnIntervMax, 2);
 80040c4:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80040c8:	f107 0208 	add.w	r2, r7, #8
 80040cc:	4413      	add	r3, r2
 80040ce:	f8b7 2078 	ldrh.w	r2, [r7, #120]	; 0x78
 80040d2:	801a      	strh	r2, [r3, #0]
  indx +=  2;    
 80040d4:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80040d8:	3302      	adds	r3, #2
 80040da:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

  BLUENRG_memset(&rq, 0, sizeof(rq));
 80040de:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80040e2:	2218      	movs	r2, #24
 80040e4:	2100      	movs	r1, #0
 80040e6:	4618      	mov	r0, r3
 80040e8:	f001 fb59 	bl	800579e <memset>
  rq.ogf = OGF_VENDOR_CMD;
 80040ec:	233f      	movs	r3, #63	; 0x3f
 80040ee:	86bb      	strh	r3, [r7, #52]	; 0x34
  rq.ocf = OCF_GAP_SET_DISCOVERABLE;
 80040f0:	2383      	movs	r3, #131	; 0x83
 80040f2:	86fb      	strh	r3, [r7, #54]	; 0x36
  rq.cparam = (void *)buffer;
 80040f4:	f107 0308 	add.w	r3, r7, #8
 80040f8:	63fb      	str	r3, [r7, #60]	; 0x3c
  rq.clen = indx;
 80040fa:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80040fe:	643b      	str	r3, [r7, #64]	; 0x40
  rq.rparam = &status;
 8004100:	f107 0333 	add.w	r3, r7, #51	; 0x33
 8004104:	647b      	str	r3, [r7, #68]	; 0x44
  rq.rlen = 1;
 8004106:	2301      	movs	r3, #1
 8004108:	64bb      	str	r3, [r7, #72]	; 0x48

  if (hci_send_req(&rq, FALSE) < 0)
 800410a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800410e:	2100      	movs	r1, #0
 8004110:	4618      	mov	r0, r3
 8004112:	f000 fe95 	bl	8004e40 <hci_send_req>
 8004116:	4603      	mov	r3, r0
 8004118:	2b00      	cmp	r3, #0
 800411a:	da01      	bge.n	8004120 <aci_gap_set_discoverable+0x1bc>
    return BLE_STATUS_TIMEOUT;
 800411c:	23ff      	movs	r3, #255	; 0xff
 800411e:	e007      	b.n	8004130 <aci_gap_set_discoverable+0x1cc>

  if (status) {
 8004120:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8004124:	2b00      	cmp	r3, #0
 8004126:	d002      	beq.n	800412e <aci_gap_set_discoverable+0x1ca>
    return status;
 8004128:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800412c:	e000      	b.n	8004130 <aci_gap_set_discoverable+0x1cc>
  }

  return 0;
 800412e:	2300      	movs	r3, #0
}
 8004130:	4618      	mov	r0, r3
 8004132:	3754      	adds	r7, #84	; 0x54
 8004134:	46bd      	mov	sp, r7
 8004136:	bd90      	pop	{r4, r7, pc}

08004138 <aci_gap_set_auth_requirement>:
                                        uint8_t min_encryption_key_size,
                                        uint8_t max_encryption_key_size,
                                        uint8_t use_fixed_pin,
                                        uint32_t fixed_pin,
                                        uint8_t bonding_mode)
{
 8004138:	b590      	push	{r4, r7, lr}
 800413a:	b091      	sub	sp, #68	; 0x44
 800413c:	af00      	add	r7, sp, #0
 800413e:	603a      	str	r2, [r7, #0]
 8004140:	461a      	mov	r2, r3
 8004142:	4603      	mov	r3, r0
 8004144:	71fb      	strb	r3, [r7, #7]
 8004146:	460b      	mov	r3, r1
 8004148:	71bb      	strb	r3, [r7, #6]
 800414a:	4613      	mov	r3, r2
 800414c:	717b      	strb	r3, [r7, #5]
  struct hci_request rq;
  gap_set_auth_requirement_cp cp;    
  uint8_t status;
    
  cp.mitm_mode = mitm_mode;
 800414e:	79fb      	ldrb	r3, [r7, #7]
 8004150:	733b      	strb	r3, [r7, #12]
  cp.oob_enable = oob_enable;
 8004152:	79bb      	ldrb	r3, [r7, #6]
 8004154:	737b      	strb	r3, [r7, #13]
  /* FIX: check on oob_enable introduced to fix issue in projects for Cortex-M33 */
  if (oob_enable) {
 8004156:	79bb      	ldrb	r3, [r7, #6]
 8004158:	2b00      	cmp	r3, #0
 800415a:	d00a      	beq.n	8004172 <aci_gap_set_auth_requirement+0x3a>
    BLUENRG_memcpy(cp.oob_data, oob_data, 16);
 800415c:	683a      	ldr	r2, [r7, #0]
 800415e:	f107 030e 	add.w	r3, r7, #14
 8004162:	6814      	ldr	r4, [r2, #0]
 8004164:	6850      	ldr	r0, [r2, #4]
 8004166:	6891      	ldr	r1, [r2, #8]
 8004168:	68d2      	ldr	r2, [r2, #12]
 800416a:	601c      	str	r4, [r3, #0]
 800416c:	6058      	str	r0, [r3, #4]
 800416e:	6099      	str	r1, [r3, #8]
 8004170:	60da      	str	r2, [r3, #12]
  }
  cp.min_encryption_key_size = min_encryption_key_size;
 8004172:	797b      	ldrb	r3, [r7, #5]
 8004174:	77bb      	strb	r3, [r7, #30]
  cp.max_encryption_key_size = max_encryption_key_size;
 8004176:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
 800417a:	77fb      	strb	r3, [r7, #31]
  cp.use_fixed_pin = use_fixed_pin;
 800417c:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 8004180:	f887 3020 	strb.w	r3, [r7, #32]
  cp.fixed_pin = htobl(fixed_pin);
 8004184:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004186:	f8c7 3021 	str.w	r3, [r7, #33]	; 0x21
  cp.bonding_mode = bonding_mode;
 800418a:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 800418e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

  BLUENRG_memset(&rq, 0, sizeof(rq));
 8004192:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004196:	2218      	movs	r2, #24
 8004198:	2100      	movs	r1, #0
 800419a:	4618      	mov	r0, r3
 800419c:	f001 faff 	bl	800579e <memset>
  rq.ogf = OGF_VENDOR_CMD;
 80041a0:	233f      	movs	r3, #63	; 0x3f
 80041a2:	853b      	strh	r3, [r7, #40]	; 0x28
  rq.ocf = OCF_GAP_SET_AUTH_REQUIREMENT;
 80041a4:	2386      	movs	r3, #134	; 0x86
 80041a6:	857b      	strh	r3, [r7, #42]	; 0x2a
  rq.cparam = &cp;
 80041a8:	f107 030c 	add.w	r3, r7, #12
 80041ac:	633b      	str	r3, [r7, #48]	; 0x30
  rq.clen = sizeof(cp);
 80041ae:	231a      	movs	r3, #26
 80041b0:	637b      	str	r3, [r7, #52]	; 0x34
  rq.rparam = &status;
 80041b2:	f107 030b 	add.w	r3, r7, #11
 80041b6:	63bb      	str	r3, [r7, #56]	; 0x38
  rq.rlen = 1;
 80041b8:	2301      	movs	r3, #1
 80041ba:	63fb      	str	r3, [r7, #60]	; 0x3c

  if (hci_send_req(&rq, FALSE) < 0)
 80041bc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80041c0:	2100      	movs	r1, #0
 80041c2:	4618      	mov	r0, r3
 80041c4:	f000 fe3c 	bl	8004e40 <hci_send_req>
 80041c8:	4603      	mov	r3, r0
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	da01      	bge.n	80041d2 <aci_gap_set_auth_requirement+0x9a>
    return BLE_STATUS_TIMEOUT;
 80041ce:	23ff      	movs	r3, #255	; 0xff
 80041d0:	e005      	b.n	80041de <aci_gap_set_auth_requirement+0xa6>

  if (status) {
 80041d2:	7afb      	ldrb	r3, [r7, #11]
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d001      	beq.n	80041dc <aci_gap_set_auth_requirement+0xa4>
    return status;
 80041d8:	7afb      	ldrb	r3, [r7, #11]
 80041da:	e000      	b.n	80041de <aci_gap_set_auth_requirement+0xa6>
  }
    
  return 0;
 80041dc:	2300      	movs	r3, #0
}
 80041de:	4618      	mov	r0, r3
 80041e0:	3744      	adds	r7, #68	; 0x44
 80041e2:	46bd      	mov	sp, r7
 80041e4:	bd90      	pop	{r4, r7, pc}

080041e6 <aci_gap_create_connection>:
				     uint8_t peer_bdaddr_type, tBDAddr peer_bdaddr,	
				     uint8_t own_bdaddr_type, uint16_t conn_min_interval,	
				     uint16_t conn_max_interval, uint16_t conn_latency,	
				     uint16_t supervision_timeout, uint16_t min_conn_length, 
				     uint16_t max_conn_length)
{
 80041e6:	b580      	push	{r7, lr}
 80041e8:	b092      	sub	sp, #72	; 0x48
 80041ea:	af00      	add	r7, sp, #0
 80041ec:	607b      	str	r3, [r7, #4]
 80041ee:	4603      	mov	r3, r0
 80041f0:	81fb      	strh	r3, [r7, #14]
 80041f2:	460b      	mov	r3, r1
 80041f4:	81bb      	strh	r3, [r7, #12]
 80041f6:	4613      	mov	r3, r2
 80041f8:	72fb      	strb	r3, [r7, #11]
  struct hci_request rq;
  gap_create_connection_cp cp;
  uint8_t status;  

  cp.scanInterval = htobs(scanInterval);
 80041fa:	89fb      	ldrh	r3, [r7, #14]
 80041fc:	833b      	strh	r3, [r7, #24]
  cp.scanWindow = htobs(scanWindow);
 80041fe:	89bb      	ldrh	r3, [r7, #12]
 8004200:	837b      	strh	r3, [r7, #26]
  cp.peer_bdaddr_type = peer_bdaddr_type;
 8004202:	7afb      	ldrb	r3, [r7, #11]
 8004204:	773b      	strb	r3, [r7, #28]
  BLUENRG_memcpy(cp.peer_bdaddr, peer_bdaddr, 6);
 8004206:	687a      	ldr	r2, [r7, #4]
 8004208:	f107 031d 	add.w	r3, r7, #29
 800420c:	6811      	ldr	r1, [r2, #0]
 800420e:	6019      	str	r1, [r3, #0]
 8004210:	8892      	ldrh	r2, [r2, #4]
 8004212:	809a      	strh	r2, [r3, #4]
  cp.own_bdaddr_type = own_bdaddr_type;
 8004214:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
 8004218:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  cp.conn_min_interval = htobs(conn_min_interval);
 800421c:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8004220:	84bb      	strh	r3, [r7, #36]	; 0x24
  cp.conn_max_interval = htobs(conn_max_interval);
 8004222:	f8b7 3058 	ldrh.w	r3, [r7, #88]	; 0x58
 8004226:	84fb      	strh	r3, [r7, #38]	; 0x26
  cp.conn_latency = htobs(conn_latency);
 8004228:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 800422c:	853b      	strh	r3, [r7, #40]	; 0x28
  cp.supervision_timeout = htobs(supervision_timeout);
 800422e:	f8b7 3060 	ldrh.w	r3, [r7, #96]	; 0x60
 8004232:	857b      	strh	r3, [r7, #42]	; 0x2a
  cp.min_conn_length = htobs(min_conn_length);
 8004234:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8004238:	85bb      	strh	r3, [r7, #44]	; 0x2c
  cp.max_conn_length = htobs(max_conn_length);
 800423a:	f8b7 3068 	ldrh.w	r3, [r7, #104]	; 0x68
 800423e:	85fb      	strh	r3, [r7, #46]	; 0x2e

  BLUENRG_memset(&rq, 0, sizeof(rq));
 8004240:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8004244:	2218      	movs	r2, #24
 8004246:	2100      	movs	r1, #0
 8004248:	4618      	mov	r0, r3
 800424a:	f001 faa8 	bl	800579e <memset>
  rq.ogf = OGF_VENDOR_CMD;
 800424e:	233f      	movs	r3, #63	; 0x3f
 8004250:	863b      	strh	r3, [r7, #48]	; 0x30
  rq.ocf = OCF_GAP_CREATE_CONNECTION;
 8004252:	239c      	movs	r3, #156	; 0x9c
 8004254:	867b      	strh	r3, [r7, #50]	; 0x32
  rq.cparam = &cp;
 8004256:	f107 0318 	add.w	r3, r7, #24
 800425a:	63bb      	str	r3, [r7, #56]	; 0x38
  rq.clen = sizeof(cp);
 800425c:	2318      	movs	r3, #24
 800425e:	63fb      	str	r3, [r7, #60]	; 0x3c
  rq.event = EVT_CMD_STATUS;
 8004260:	230f      	movs	r3, #15
 8004262:	637b      	str	r3, [r7, #52]	; 0x34
  rq.rparam = &status;
 8004264:	f107 0317 	add.w	r3, r7, #23
 8004268:	643b      	str	r3, [r7, #64]	; 0x40
  rq.rlen = 1;
 800426a:	2301      	movs	r3, #1
 800426c:	647b      	str	r3, [r7, #68]	; 0x44
  
  if (hci_send_req(&rq, FALSE) < 0)
 800426e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8004272:	2100      	movs	r1, #0
 8004274:	4618      	mov	r0, r3
 8004276:	f000 fde3 	bl	8004e40 <hci_send_req>
 800427a:	4603      	mov	r3, r0
 800427c:	2b00      	cmp	r3, #0
 800427e:	da01      	bge.n	8004284 <aci_gap_create_connection+0x9e>
    return BLE_STATUS_TIMEOUT;
 8004280:	23ff      	movs	r3, #255	; 0xff
 8004282:	e000      	b.n	8004286 <aci_gap_create_connection+0xa0>

  return status;
 8004284:	7dfb      	ldrb	r3, [r7, #23]
}
 8004286:	4618      	mov	r0, r3
 8004288:	3748      	adds	r7, #72	; 0x48
 800428a:	46bd      	mov	sp, r7
 800428c:	bd80      	pop	{r7, pc}

0800428e <aci_gatt_init>:
#define MIN(a,b)            ((a) < (b) )? (a) : (b)
#define MAX(a,b)            ((a) > (b) )? (a) : (b)


tBleStatus aci_gatt_init(void)
{
 800428e:	b580      	push	{r7, lr}
 8004290:	b088      	sub	sp, #32
 8004292:	af00      	add	r7, sp, #0
  struct hci_request rq;
  uint8_t status;

  BLUENRG_memset(&rq, 0, sizeof(rq));
 8004294:	f107 0308 	add.w	r3, r7, #8
 8004298:	2218      	movs	r2, #24
 800429a:	2100      	movs	r1, #0
 800429c:	4618      	mov	r0, r3
 800429e:	f001 fa7e 	bl	800579e <memset>
  rq.ogf = OGF_VENDOR_CMD;
 80042a2:	233f      	movs	r3, #63	; 0x3f
 80042a4:	813b      	strh	r3, [r7, #8]
  rq.ocf = OCF_GATT_INIT;
 80042a6:	f240 1301 	movw	r3, #257	; 0x101
 80042aa:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 80042ac:	1dfb      	adds	r3, r7, #7
 80042ae:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 80042b0:	2301      	movs	r3, #1
 80042b2:	61fb      	str	r3, [r7, #28]

  if (hci_send_req(&rq, FALSE) < 0)
 80042b4:	f107 0308 	add.w	r3, r7, #8
 80042b8:	2100      	movs	r1, #0
 80042ba:	4618      	mov	r0, r3
 80042bc:	f000 fdc0 	bl	8004e40 <hci_send_req>
 80042c0:	4603      	mov	r3, r0
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	da01      	bge.n	80042ca <aci_gatt_init+0x3c>
    return BLE_STATUS_TIMEOUT;
 80042c6:	23ff      	movs	r3, #255	; 0xff
 80042c8:	e000      	b.n	80042cc <aci_gatt_init+0x3e>

  return status;
 80042ca:	79fb      	ldrb	r3, [r7, #7]
}
 80042cc:	4618      	mov	r0, r3
 80042ce:	3720      	adds	r7, #32
 80042d0:	46bd      	mov	sp, r7
 80042d2:	bd80      	pop	{r7, pc}

080042d4 <aci_gatt_add_serv>:

tBleStatus aci_gatt_add_serv(uint8_t service_uuid_type, const uint8_t* service_uuid, uint8_t service_type, uint8_t max_attr_records, uint16_t *serviceHandle)
{
 80042d4:	b580      	push	{r7, lr}
 80042d6:	b090      	sub	sp, #64	; 0x40
 80042d8:	af00      	add	r7, sp, #0
 80042da:	6039      	str	r1, [r7, #0]
 80042dc:	4611      	mov	r1, r2
 80042de:	461a      	mov	r2, r3
 80042e0:	4603      	mov	r3, r0
 80042e2:	71fb      	strb	r3, [r7, #7]
 80042e4:	460b      	mov	r3, r1
 80042e6:	71bb      	strb	r3, [r7, #6]
 80042e8:	4613      	mov	r3, r2
 80042ea:	717b      	strb	r3, [r7, #5]
  struct hci_request rq;
  gatt_add_serv_rp resp;    
  uint8_t buffer[19];
  uint8_t uuid_len;
  uint8_t indx = 0;
 80042ec:	2300      	movs	r3, #0
 80042ee:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
    
  buffer[indx] = service_uuid_type;
 80042f2:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 80042f6:	3340      	adds	r3, #64	; 0x40
 80042f8:	443b      	add	r3, r7
 80042fa:	79fa      	ldrb	r2, [r7, #7]
 80042fc:	f803 2c34 	strb.w	r2, [r3, #-52]
  indx++;
 8004300:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8004304:	3301      	adds	r3, #1
 8004306:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
    
  if(service_uuid_type == UUID_TYPE_16){
 800430a:	79fb      	ldrb	r3, [r7, #7]
 800430c:	2b01      	cmp	r3, #1
 800430e:	d103      	bne.n	8004318 <aci_gatt_add_serv+0x44>
    uuid_len = 2;
 8004310:	2302      	movs	r3, #2
 8004312:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8004316:	e002      	b.n	800431e <aci_gatt_add_serv+0x4a>
  }
  else {
    uuid_len = 16;
 8004318:	2310      	movs	r3, #16
 800431a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  }        
  BLUENRG_memcpy(buffer + indx, service_uuid, uuid_len);
 800431e:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8004322:	f107 020c 	add.w	r2, r7, #12
 8004326:	4413      	add	r3, r2
 8004328:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 800432c:	6839      	ldr	r1, [r7, #0]
 800432e:	4618      	mov	r0, r3
 8004330:	f001 fa27 	bl	8005782 <memcpy>
  indx +=  uuid_len;
 8004334:	f897 203e 	ldrb.w	r2, [r7, #62]	; 0x3e
 8004338:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800433c:	4413      	add	r3, r2
 800433e:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
    
  buffer[indx] = service_type;
 8004342:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8004346:	3340      	adds	r3, #64	; 0x40
 8004348:	443b      	add	r3, r7
 800434a:	79ba      	ldrb	r2, [r7, #6]
 800434c:	f803 2c34 	strb.w	r2, [r3, #-52]
  indx++;
 8004350:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8004354:	3301      	adds	r3, #1
 8004356:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
    
  buffer[indx] = max_attr_records;
 800435a:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 800435e:	3340      	adds	r3, #64	; 0x40
 8004360:	443b      	add	r3, r7
 8004362:	797a      	ldrb	r2, [r7, #5]
 8004364:	f803 2c34 	strb.w	r2, [r3, #-52]
  indx++;
 8004368:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 800436c:	3301      	adds	r3, #1
 800436e:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
    
    
  BLUENRG_memset(&resp, 0, sizeof(resp));
 8004372:	f107 0320 	add.w	r3, r7, #32
 8004376:	2203      	movs	r2, #3
 8004378:	2100      	movs	r1, #0
 800437a:	4618      	mov	r0, r3
 800437c:	f001 fa0f 	bl	800579e <memset>

  BLUENRG_memset(&rq, 0, sizeof(rq));
 8004380:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004384:	2218      	movs	r2, #24
 8004386:	2100      	movs	r1, #0
 8004388:	4618      	mov	r0, r3
 800438a:	f001 fa08 	bl	800579e <memset>
  rq.ogf = OGF_VENDOR_CMD;
 800438e:	233f      	movs	r3, #63	; 0x3f
 8004390:	84bb      	strh	r3, [r7, #36]	; 0x24
  rq.ocf = OCF_GATT_ADD_SERV;
 8004392:	f44f 7381 	mov.w	r3, #258	; 0x102
 8004396:	84fb      	strh	r3, [r7, #38]	; 0x26
  rq.cparam = (void *)buffer;
 8004398:	f107 030c 	add.w	r3, r7, #12
 800439c:	62fb      	str	r3, [r7, #44]	; 0x2c
  rq.clen = indx;
 800439e:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 80043a2:	633b      	str	r3, [r7, #48]	; 0x30
  rq.rparam = &resp;
 80043a4:	f107 0320 	add.w	r3, r7, #32
 80043a8:	637b      	str	r3, [r7, #52]	; 0x34
  rq.rlen = GATT_ADD_SERV_RP_SIZE;
 80043aa:	2303      	movs	r3, #3
 80043ac:	63bb      	str	r3, [r7, #56]	; 0x38

  if (hci_send_req(&rq, FALSE) < 0)
 80043ae:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80043b2:	2100      	movs	r1, #0
 80043b4:	4618      	mov	r0, r3
 80043b6:	f000 fd43 	bl	8004e40 <hci_send_req>
 80043ba:	4603      	mov	r3, r0
 80043bc:	2b00      	cmp	r3, #0
 80043be:	da01      	bge.n	80043c4 <aci_gatt_add_serv+0xf0>
    return BLE_STATUS_TIMEOUT;
 80043c0:	23ff      	movs	r3, #255	; 0xff
 80043c2:	e00c      	b.n	80043de <aci_gatt_add_serv+0x10a>

  if (resp.status) {
 80043c4:	f897 3020 	ldrb.w	r3, [r7, #32]
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d002      	beq.n	80043d2 <aci_gatt_add_serv+0xfe>
    return resp.status;
 80043cc:	f897 3020 	ldrb.w	r3, [r7, #32]
 80043d0:	e005      	b.n	80043de <aci_gatt_add_serv+0x10a>
  }
    
  *serviceHandle = btohs(resp.handle);
 80043d2:	f8b7 3021 	ldrh.w	r3, [r7, #33]	; 0x21
 80043d6:	b29a      	uxth	r2, r3
 80043d8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80043da:	801a      	strh	r2, [r3, #0]

  return 0;
 80043dc:	2300      	movs	r3, #0
}
 80043de:	4618      	mov	r0, r3
 80043e0:	3740      	adds	r7, #64	; 0x40
 80043e2:	46bd      	mov	sp, r7
 80043e4:	bd80      	pop	{r7, pc}

080043e6 <aci_gatt_add_char>:
			     uint8_t secPermissions,
			     uint8_t gattEvtMask,
			     uint8_t encryKeySize,
			     uint8_t isVariable,
			     uint16_t* charHandle)                     
{
 80043e6:	b580      	push	{r7, lr}
 80043e8:	b092      	sub	sp, #72	; 0x48
 80043ea:	af00      	add	r7, sp, #0
 80043ec:	603a      	str	r2, [r7, #0]
 80043ee:	461a      	mov	r2, r3
 80043f0:	4603      	mov	r3, r0
 80043f2:	80fb      	strh	r3, [r7, #6]
 80043f4:	460b      	mov	r3, r1
 80043f6:	717b      	strb	r3, [r7, #5]
 80043f8:	4613      	mov	r3, r2
 80043fa:	713b      	strb	r3, [r7, #4]
  struct hci_request rq;
  gatt_add_serv_rp resp;
  uint8_t buffer[25];
  uint8_t uuid_len;
  uint8_t indx = 0;
 80043fc:	2300      	movs	r3, #0
 80043fe:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
    
  serviceHandle = htobs(serviceHandle);
 8004402:	88fb      	ldrh	r3, [r7, #6]
 8004404:	80fb      	strh	r3, [r7, #6]
  BLUENRG_memcpy(buffer + indx, &serviceHandle, 2);
 8004406:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 800440a:	f107 020c 	add.w	r2, r7, #12
 800440e:	4413      	add	r3, r2
 8004410:	88fa      	ldrh	r2, [r7, #6]
 8004412:	801a      	strh	r2, [r3, #0]
  indx += 2;
 8004414:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8004418:	3302      	adds	r3, #2
 800441a:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
    
  buffer[indx] = charUuidType;
 800441e:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8004422:	3348      	adds	r3, #72	; 0x48
 8004424:	443b      	add	r3, r7
 8004426:	797a      	ldrb	r2, [r7, #5]
 8004428:	f803 2c3c 	strb.w	r2, [r3, #-60]
  indx++;
 800442c:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8004430:	3301      	adds	r3, #1
 8004432:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
    
  if(charUuidType == UUID_TYPE_16){
 8004436:	797b      	ldrb	r3, [r7, #5]
 8004438:	2b01      	cmp	r3, #1
 800443a:	d103      	bne.n	8004444 <aci_gatt_add_char+0x5e>
    uuid_len = 2;
 800443c:	2302      	movs	r3, #2
 800443e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8004442:	e002      	b.n	800444a <aci_gatt_add_char+0x64>
  }
  else {
    uuid_len = 16;
 8004444:	2310      	movs	r3, #16
 8004446:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  }        
  BLUENRG_memcpy(buffer + indx, charUuid, uuid_len);
 800444a:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 800444e:	f107 020c 	add.w	r2, r7, #12
 8004452:	4413      	add	r3, r2
 8004454:	f897 2047 	ldrb.w	r2, [r7, #71]	; 0x47
 8004458:	6839      	ldr	r1, [r7, #0]
 800445a:	4618      	mov	r0, r3
 800445c:	f001 f991 	bl	8005782 <memcpy>
  indx +=  uuid_len;
 8004460:	f897 2046 	ldrb.w	r2, [r7, #70]	; 0x46
 8004464:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8004468:	4413      	add	r3, r2
 800446a:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
    
  buffer[indx] = charValueLen;
 800446e:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8004472:	3348      	adds	r3, #72	; 0x48
 8004474:	443b      	add	r3, r7
 8004476:	793a      	ldrb	r2, [r7, #4]
 8004478:	f803 2c3c 	strb.w	r2, [r3, #-60]
  indx++;
 800447c:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8004480:	3301      	adds	r3, #1
 8004482:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
    
  buffer[indx] = charProperties;
 8004486:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 800448a:	3348      	adds	r3, #72	; 0x48
 800448c:	443b      	add	r3, r7
 800448e:	f897 2050 	ldrb.w	r2, [r7, #80]	; 0x50
 8004492:	f803 2c3c 	strb.w	r2, [r3, #-60]
  indx++;
 8004496:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 800449a:	3301      	adds	r3, #1
 800449c:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
    
  buffer[indx] = secPermissions;
 80044a0:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 80044a4:	3348      	adds	r3, #72	; 0x48
 80044a6:	443b      	add	r3, r7
 80044a8:	f897 2054 	ldrb.w	r2, [r7, #84]	; 0x54
 80044ac:	f803 2c3c 	strb.w	r2, [r3, #-60]
  indx++;
 80044b0:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 80044b4:	3301      	adds	r3, #1
 80044b6:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
    
  buffer[indx] = gattEvtMask;
 80044ba:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 80044be:	3348      	adds	r3, #72	; 0x48
 80044c0:	443b      	add	r3, r7
 80044c2:	f897 2058 	ldrb.w	r2, [r7, #88]	; 0x58
 80044c6:	f803 2c3c 	strb.w	r2, [r3, #-60]
  indx++;
 80044ca:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 80044ce:	3301      	adds	r3, #1
 80044d0:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
    
  buffer[indx] = encryKeySize;
 80044d4:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 80044d8:	3348      	adds	r3, #72	; 0x48
 80044da:	443b      	add	r3, r7
 80044dc:	f897 205c 	ldrb.w	r2, [r7, #92]	; 0x5c
 80044e0:	f803 2c3c 	strb.w	r2, [r3, #-60]
  indx++;
 80044e4:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 80044e8:	3301      	adds	r3, #1
 80044ea:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
    
  buffer[indx] = isVariable;
 80044ee:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 80044f2:	3348      	adds	r3, #72	; 0x48
 80044f4:	443b      	add	r3, r7
 80044f6:	f897 2060 	ldrb.w	r2, [r7, #96]	; 0x60
 80044fa:	f803 2c3c 	strb.w	r2, [r3, #-60]
  indx++;
 80044fe:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8004502:	3301      	adds	r3, #1
 8004504:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
    
  BLUENRG_memset(&resp, 0, sizeof(resp));
 8004508:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800450c:	2203      	movs	r2, #3
 800450e:	2100      	movs	r1, #0
 8004510:	4618      	mov	r0, r3
 8004512:	f001 f944 	bl	800579e <memset>

  BLUENRG_memset(&rq, 0, sizeof(rq));
 8004516:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800451a:	2218      	movs	r2, #24
 800451c:	2100      	movs	r1, #0
 800451e:	4618      	mov	r0, r3
 8004520:	f001 f93d 	bl	800579e <memset>
  rq.ogf = OGF_VENDOR_CMD;
 8004524:	233f      	movs	r3, #63	; 0x3f
 8004526:	85bb      	strh	r3, [r7, #44]	; 0x2c
  rq.ocf = OCF_GATT_ADD_CHAR;
 8004528:	f44f 7382 	mov.w	r3, #260	; 0x104
 800452c:	85fb      	strh	r3, [r7, #46]	; 0x2e
  rq.cparam = (void *)buffer;
 800452e:	f107 030c 	add.w	r3, r7, #12
 8004532:	637b      	str	r3, [r7, #52]	; 0x34
  rq.clen = indx;
 8004534:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8004538:	63bb      	str	r3, [r7, #56]	; 0x38
  rq.rparam = &resp;
 800453a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800453e:	63fb      	str	r3, [r7, #60]	; 0x3c
  rq.rlen = GATT_ADD_CHAR_RP_SIZE;
 8004540:	2303      	movs	r3, #3
 8004542:	643b      	str	r3, [r7, #64]	; 0x40

  if (hci_send_req(&rq, FALSE) < 0)
 8004544:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004548:	2100      	movs	r1, #0
 800454a:	4618      	mov	r0, r3
 800454c:	f000 fc78 	bl	8004e40 <hci_send_req>
 8004550:	4603      	mov	r3, r0
 8004552:	2b00      	cmp	r3, #0
 8004554:	da01      	bge.n	800455a <aci_gatt_add_char+0x174>
    return BLE_STATUS_TIMEOUT;
 8004556:	23ff      	movs	r3, #255	; 0xff
 8004558:	e00c      	b.n	8004574 <aci_gatt_add_char+0x18e>

  if (resp.status) {
 800455a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800455e:	2b00      	cmp	r3, #0
 8004560:	d002      	beq.n	8004568 <aci_gatt_add_char+0x182>
    return resp.status;
 8004562:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004566:	e005      	b.n	8004574 <aci_gatt_add_char+0x18e>
  }
    
  *charHandle = btohs(resp.handle);
 8004568:	f8b7 3029 	ldrh.w	r3, [r7, #41]	; 0x29
 800456c:	b29a      	uxth	r2, r3
 800456e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004570:	801a      	strh	r2, [r3, #0]

  return 0;
 8004572:	2300      	movs	r3, #0
}
 8004574:	4618      	mov	r0, r3
 8004576:	3748      	adds	r7, #72	; 0x48
 8004578:	46bd      	mov	sp, r7
 800457a:	bd80      	pop	{r7, pc}

0800457c <aci_gatt_update_char_value>:
tBleStatus aci_gatt_update_char_value(uint16_t servHandle, 
				      uint16_t charHandle,
				      uint8_t charValOffset,
				      uint8_t charValueLen,   
                                      const void *charValue)
{
 800457c:	b590      	push	{r4, r7, lr}
 800457e:	b0ab      	sub	sp, #172	; 0xac
 8004580:	af00      	add	r7, sp, #0
 8004582:	4604      	mov	r4, r0
 8004584:	4608      	mov	r0, r1
 8004586:	4611      	mov	r1, r2
 8004588:	461a      	mov	r2, r3
 800458a:	4623      	mov	r3, r4
 800458c:	80fb      	strh	r3, [r7, #6]
 800458e:	4603      	mov	r3, r0
 8004590:	80bb      	strh	r3, [r7, #4]
 8004592:	460b      	mov	r3, r1
 8004594:	70fb      	strb	r3, [r7, #3]
 8004596:	4613      	mov	r3, r2
 8004598:	70bb      	strb	r3, [r7, #2]
  struct hci_request rq;
  uint8_t status;
  uint8_t buffer[HCI_MAX_PAYLOAD_SIZE];
  uint8_t indx = 0;
 800459a:	2300      	movs	r3, #0
 800459c:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
    
  if ((charValueLen+6) > HCI_MAX_PAYLOAD_SIZE)
 80045a0:	78bb      	ldrb	r3, [r7, #2]
 80045a2:	2b7a      	cmp	r3, #122	; 0x7a
 80045a4:	d901      	bls.n	80045aa <aci_gatt_update_char_value+0x2e>
    return BLE_STATUS_INVALID_PARAMS;
 80045a6:	2342      	movs	r3, #66	; 0x42
 80045a8:	e074      	b.n	8004694 <aci_gatt_update_char_value+0x118>

  servHandle = htobs(servHandle);
 80045aa:	88fb      	ldrh	r3, [r7, #6]
 80045ac:	80fb      	strh	r3, [r7, #6]
  BLUENRG_memcpy(buffer + indx, &servHandle, 2);
 80045ae:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 80045b2:	f107 0208 	add.w	r2, r7, #8
 80045b6:	4413      	add	r3, r2
 80045b8:	88fa      	ldrh	r2, [r7, #6]
 80045ba:	801a      	strh	r2, [r3, #0]
  indx += 2;
 80045bc:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 80045c0:	3302      	adds	r3, #2
 80045c2:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
    
  charHandle = htobs(charHandle);
 80045c6:	88bb      	ldrh	r3, [r7, #4]
 80045c8:	80bb      	strh	r3, [r7, #4]
  BLUENRG_memcpy(buffer + indx, &charHandle, 2);
 80045ca:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 80045ce:	f107 0208 	add.w	r2, r7, #8
 80045d2:	4413      	add	r3, r2
 80045d4:	88ba      	ldrh	r2, [r7, #4]
 80045d6:	801a      	strh	r2, [r3, #0]
  indx += 2;
 80045d8:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 80045dc:	3302      	adds	r3, #2
 80045de:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
    
  buffer[indx] = charValOffset;
 80045e2:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 80045e6:	33a8      	adds	r3, #168	; 0xa8
 80045e8:	443b      	add	r3, r7
 80045ea:	78fa      	ldrb	r2, [r7, #3]
 80045ec:	f803 2ca0 	strb.w	r2, [r3, #-160]
  indx++;
 80045f0:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 80045f4:	3301      	adds	r3, #1
 80045f6:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
    
  buffer[indx] = charValueLen;
 80045fa:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 80045fe:	33a8      	adds	r3, #168	; 0xa8
 8004600:	443b      	add	r3, r7
 8004602:	78ba      	ldrb	r2, [r7, #2]
 8004604:	f803 2ca0 	strb.w	r2, [r3, #-160]
  indx++;
 8004608:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 800460c:	3301      	adds	r3, #1
 800460e:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
        
  BLUENRG_memcpy(buffer + indx, charValue, charValueLen);
 8004612:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 8004616:	f107 0208 	add.w	r2, r7, #8
 800461a:	4413      	add	r3, r2
 800461c:	78ba      	ldrb	r2, [r7, #2]
 800461e:	f8d7 10b8 	ldr.w	r1, [r7, #184]	; 0xb8
 8004622:	4618      	mov	r0, r3
 8004624:	f001 f8ad 	bl	8005782 <memcpy>
  indx +=  charValueLen;
 8004628:	f897 20a7 	ldrb.w	r2, [r7, #167]	; 0xa7
 800462c:	78bb      	ldrb	r3, [r7, #2]
 800462e:	4413      	add	r3, r2
 8004630:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7

  BLUENRG_memset(&rq, 0, sizeof(rq));
 8004634:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8004638:	2218      	movs	r2, #24
 800463a:	2100      	movs	r1, #0
 800463c:	4618      	mov	r0, r3
 800463e:	f001 f8ae 	bl	800579e <memset>
  rq.ogf = OGF_VENDOR_CMD;
 8004642:	233f      	movs	r3, #63	; 0x3f
 8004644:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
  rq.ocf = OCF_GATT_UPD_CHAR_VAL;
 8004648:	f44f 7383 	mov.w	r3, #262	; 0x106
 800464c:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
  rq.cparam = (void *)buffer;
 8004650:	f107 0308 	add.w	r3, r7, #8
 8004654:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  rq.clen = indx;
 8004658:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 800465c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  rq.rparam = &status;
 8004660:	f107 038b 	add.w	r3, r7, #139	; 0x8b
 8004664:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  rq.rlen = 1;
 8004668:	2301      	movs	r3, #1
 800466a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

  if (hci_send_req(&rq, FALSE) < 0)
 800466e:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8004672:	2100      	movs	r1, #0
 8004674:	4618      	mov	r0, r3
 8004676:	f000 fbe3 	bl	8004e40 <hci_send_req>
 800467a:	4603      	mov	r3, r0
 800467c:	2b00      	cmp	r3, #0
 800467e:	da01      	bge.n	8004684 <aci_gatt_update_char_value+0x108>
    return BLE_STATUS_TIMEOUT;
 8004680:	23ff      	movs	r3, #255	; 0xff
 8004682:	e007      	b.n	8004694 <aci_gatt_update_char_value+0x118>

  if (status) {
 8004684:	f897 308b 	ldrb.w	r3, [r7, #139]	; 0x8b
 8004688:	2b00      	cmp	r3, #0
 800468a:	d002      	beq.n	8004692 <aci_gatt_update_char_value+0x116>
    return status;
 800468c:	f897 308b 	ldrb.w	r3, [r7, #139]	; 0x8b
 8004690:	e000      	b.n	8004694 <aci_gatt_update_char_value+0x118>
  }

  return 0;
 8004692:	2300      	movs	r3, #0
}
 8004694:	4618      	mov	r0, r3
 8004696:	37ac      	adds	r7, #172	; 0xac
 8004698:	46bd      	mov	sp, r7
 800469a:	bd90      	pop	{r4, r7, pc}

0800469c <aci_gatt_disc_charac_by_uuid>:
}

tBleStatus aci_gatt_disc_charac_by_uuid(uint16_t conn_handle, uint16_t start_handle,
				                     uint16_t end_handle, uint8_t charUuidType,
                                                     const uint8_t* charUuid)
{
 800469c:	b590      	push	{r4, r7, lr}
 800469e:	b091      	sub	sp, #68	; 0x44
 80046a0:	af00      	add	r7, sp, #0
 80046a2:	4604      	mov	r4, r0
 80046a4:	4608      	mov	r0, r1
 80046a6:	4611      	mov	r1, r2
 80046a8:	461a      	mov	r2, r3
 80046aa:	4623      	mov	r3, r4
 80046ac:	80fb      	strh	r3, [r7, #6]
 80046ae:	4603      	mov	r3, r0
 80046b0:	80bb      	strh	r3, [r7, #4]
 80046b2:	460b      	mov	r3, r1
 80046b4:	807b      	strh	r3, [r7, #2]
 80046b6:	4613      	mov	r3, r2
 80046b8:	707b      	strb	r3, [r7, #1]
  struct hci_request rq;
  uint8_t status;
  
  uint8_t buffer[23];
  uint8_t uuid_len;
  uint8_t indx = 0;
 80046ba:	2300      	movs	r3, #0
 80046bc:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
    
  conn_handle = htobs(conn_handle);
 80046c0:	88fb      	ldrh	r3, [r7, #6]
 80046c2:	80fb      	strh	r3, [r7, #6]
  BLUENRG_memcpy(buffer + indx, &conn_handle, 2);
 80046c4:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 80046c8:	f107 020c 	add.w	r2, r7, #12
 80046cc:	4413      	add	r3, r2
 80046ce:	88fa      	ldrh	r2, [r7, #6]
 80046d0:	801a      	strh	r2, [r3, #0]
  indx += 2;
 80046d2:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 80046d6:	3302      	adds	r3, #2
 80046d8:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
    
  start_handle = htobs(start_handle);
 80046dc:	88bb      	ldrh	r3, [r7, #4]
 80046de:	80bb      	strh	r3, [r7, #4]
  BLUENRG_memcpy(buffer + indx, &start_handle, 2);
 80046e0:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 80046e4:	f107 020c 	add.w	r2, r7, #12
 80046e8:	4413      	add	r3, r2
 80046ea:	88ba      	ldrh	r2, [r7, #4]
 80046ec:	801a      	strh	r2, [r3, #0]
  indx += 2;
 80046ee:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 80046f2:	3302      	adds	r3, #2
 80046f4:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  
  end_handle = htobs(end_handle);
 80046f8:	887b      	ldrh	r3, [r7, #2]
 80046fa:	807b      	strh	r3, [r7, #2]
  BLUENRG_memcpy(buffer + indx, &end_handle, 2);
 80046fc:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8004700:	f107 020c 	add.w	r2, r7, #12
 8004704:	4413      	add	r3, r2
 8004706:	887a      	ldrh	r2, [r7, #2]
 8004708:	801a      	strh	r2, [r3, #0]
  indx += 2;
 800470a:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 800470e:	3302      	adds	r3, #2
 8004710:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  
  buffer[indx] = charUuidType;
 8004714:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8004718:	3340      	adds	r3, #64	; 0x40
 800471a:	443b      	add	r3, r7
 800471c:	787a      	ldrb	r2, [r7, #1]
 800471e:	f803 2c34 	strb.w	r2, [r3, #-52]
  indx++;
 8004722:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8004726:	3301      	adds	r3, #1
 8004728:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
    
  if(charUuidType == 0x01){
 800472c:	787b      	ldrb	r3, [r7, #1]
 800472e:	2b01      	cmp	r3, #1
 8004730:	d103      	bne.n	800473a <aci_gatt_disc_charac_by_uuid+0x9e>
    uuid_len = 2;
 8004732:	2302      	movs	r3, #2
 8004734:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8004738:	e002      	b.n	8004740 <aci_gatt_disc_charac_by_uuid+0xa4>
  }
  else {
    uuid_len = 16;
 800473a:	2310      	movs	r3, #16
 800473c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  }        
  BLUENRG_memcpy(buffer + indx, charUuid, uuid_len);
 8004740:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8004744:	f107 020c 	add.w	r2, r7, #12
 8004748:	4413      	add	r3, r2
 800474a:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 800474e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8004750:	4618      	mov	r0, r3
 8004752:	f001 f816 	bl	8005782 <memcpy>
  indx +=  uuid_len;
 8004756:	f897 203e 	ldrb.w	r2, [r7, #62]	; 0x3e
 800475a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800475e:	4413      	add	r3, r2
 8004760:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e

  BLUENRG_memset(&rq, 0, sizeof(rq));
 8004764:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004768:	2218      	movs	r2, #24
 800476a:	2100      	movs	r1, #0
 800476c:	4618      	mov	r0, r3
 800476e:	f001 f816 	bl	800579e <memset>
  rq.ogf = OGF_VENDOR_CMD;
 8004772:	233f      	movs	r3, #63	; 0x3f
 8004774:	84bb      	strh	r3, [r7, #36]	; 0x24
  rq.ocf = OCF_GATT_DISC_CHARAC_BY_UUID;
 8004776:	f44f 738b 	mov.w	r3, #278	; 0x116
 800477a:	84fb      	strh	r3, [r7, #38]	; 0x26
  rq.cparam = (void *)buffer;
 800477c:	f107 030c 	add.w	r3, r7, #12
 8004780:	62fb      	str	r3, [r7, #44]	; 0x2c
  rq.clen = indx;
 8004782:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8004786:	633b      	str	r3, [r7, #48]	; 0x30
  rq.event = EVT_CMD_STATUS;
 8004788:	230f      	movs	r3, #15
 800478a:	62bb      	str	r3, [r7, #40]	; 0x28
  rq.rparam = &status;
 800478c:	f107 0323 	add.w	r3, r7, #35	; 0x23
 8004790:	637b      	str	r3, [r7, #52]	; 0x34
  rq.rlen = 1;
 8004792:	2301      	movs	r3, #1
 8004794:	63bb      	str	r3, [r7, #56]	; 0x38

  if (hci_send_req(&rq, FALSE) < 0)
 8004796:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800479a:	2100      	movs	r1, #0
 800479c:	4618      	mov	r0, r3
 800479e:	f000 fb4f 	bl	8004e40 <hci_send_req>
 80047a2:	4603      	mov	r3, r0
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	da01      	bge.n	80047ac <aci_gatt_disc_charac_by_uuid+0x110>
    return BLE_STATUS_TIMEOUT;
 80047a8:	23ff      	movs	r3, #255	; 0xff
 80047aa:	e001      	b.n	80047b0 <aci_gatt_disc_charac_by_uuid+0x114>

  return status;
 80047ac:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 80047b0:	4618      	mov	r0, r3
 80047b2:	3744      	adds	r7, #68	; 0x44
 80047b4:	46bd      	mov	sp, r7
 80047b6:	bd90      	pop	{r4, r7, pc}

080047b8 <aci_gatt_write_charac_descriptor>:
  return status;
}

tBleStatus aci_gatt_write_charac_descriptor(uint16_t conn_handle, uint16_t attr_handle, 
					   uint8_t value_len, uint8_t *attr_value)
{
 80047b8:	b580      	push	{r7, lr}
 80047ba:	b0ac      	sub	sp, #176	; 0xb0
 80047bc:	af00      	add	r7, sp, #0
 80047be:	607b      	str	r3, [r7, #4]
 80047c0:	4603      	mov	r3, r0
 80047c2:	81fb      	strh	r3, [r7, #14]
 80047c4:	460b      	mov	r3, r1
 80047c6:	81bb      	strh	r3, [r7, #12]
 80047c8:	4613      	mov	r3, r2
 80047ca:	72fb      	strb	r3, [r7, #11]
  struct hci_request rq;
  uint8_t status;
  uint8_t buffer[HCI_MAX_PAYLOAD_SIZE];
  uint8_t indx = 0;
 80047cc:	2300      	movs	r3, #0
 80047ce:	f887 30af 	strb.w	r3, [r7, #175]	; 0xaf
    
  if ((value_len+5) > HCI_MAX_PAYLOAD_SIZE)
 80047d2:	7afb      	ldrb	r3, [r7, #11]
 80047d4:	2b7b      	cmp	r3, #123	; 0x7b
 80047d6:	d901      	bls.n	80047dc <aci_gatt_write_charac_descriptor+0x24>
    return BLE_STATUS_INVALID_PARAMS;
 80047d8:	2342      	movs	r3, #66	; 0x42
 80047da:	e064      	b.n	80048a6 <aci_gatt_write_charac_descriptor+0xee>

  conn_handle = htobs(conn_handle);
 80047dc:	89fb      	ldrh	r3, [r7, #14]
 80047de:	81fb      	strh	r3, [r7, #14]
  BLUENRG_memcpy(buffer + indx, &conn_handle, 2);
 80047e0:	f897 30af 	ldrb.w	r3, [r7, #175]	; 0xaf
 80047e4:	f107 0210 	add.w	r2, r7, #16
 80047e8:	4413      	add	r3, r2
 80047ea:	89fa      	ldrh	r2, [r7, #14]
 80047ec:	801a      	strh	r2, [r3, #0]
  indx += 2;
 80047ee:	f897 30af 	ldrb.w	r3, [r7, #175]	; 0xaf
 80047f2:	3302      	adds	r3, #2
 80047f4:	f887 30af 	strb.w	r3, [r7, #175]	; 0xaf
    
  attr_handle = htobs(attr_handle);
 80047f8:	89bb      	ldrh	r3, [r7, #12]
 80047fa:	81bb      	strh	r3, [r7, #12]
  BLUENRG_memcpy(buffer + indx, &attr_handle, 2);
 80047fc:	f897 30af 	ldrb.w	r3, [r7, #175]	; 0xaf
 8004800:	f107 0210 	add.w	r2, r7, #16
 8004804:	4413      	add	r3, r2
 8004806:	89ba      	ldrh	r2, [r7, #12]
 8004808:	801a      	strh	r2, [r3, #0]
  indx += 2;
 800480a:	f897 30af 	ldrb.w	r3, [r7, #175]	; 0xaf
 800480e:	3302      	adds	r3, #2
 8004810:	f887 30af 	strb.w	r3, [r7, #175]	; 0xaf

  buffer[indx] = value_len;
 8004814:	f897 30af 	ldrb.w	r3, [r7, #175]	; 0xaf
 8004818:	33b0      	adds	r3, #176	; 0xb0
 800481a:	443b      	add	r3, r7
 800481c:	7afa      	ldrb	r2, [r7, #11]
 800481e:	f803 2ca0 	strb.w	r2, [r3, #-160]
  indx++;
 8004822:	f897 30af 	ldrb.w	r3, [r7, #175]	; 0xaf
 8004826:	3301      	adds	r3, #1
 8004828:	f887 30af 	strb.w	r3, [r7, #175]	; 0xaf
        
  BLUENRG_memcpy(buffer + indx, attr_value, value_len);
 800482c:	f897 30af 	ldrb.w	r3, [r7, #175]	; 0xaf
 8004830:	f107 0210 	add.w	r2, r7, #16
 8004834:	4413      	add	r3, r2
 8004836:	7afa      	ldrb	r2, [r7, #11]
 8004838:	6879      	ldr	r1, [r7, #4]
 800483a:	4618      	mov	r0, r3
 800483c:	f000 ffa1 	bl	8005782 <memcpy>
  indx +=  value_len;
 8004840:	f897 20af 	ldrb.w	r2, [r7, #175]	; 0xaf
 8004844:	7afb      	ldrb	r3, [r7, #11]
 8004846:	4413      	add	r3, r2
 8004848:	f887 30af 	strb.w	r3, [r7, #175]	; 0xaf

  BLUENRG_memset(&rq, 0, sizeof(rq));
 800484c:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8004850:	2218      	movs	r2, #24
 8004852:	2100      	movs	r1, #0
 8004854:	4618      	mov	r0, r3
 8004856:	f000 ffa2 	bl	800579e <memset>
  rq.ogf = OGF_VENDOR_CMD;
 800485a:	233f      	movs	r3, #63	; 0x3f
 800485c:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94
  rq.ocf = OCF_GATT_WRITE_CHAR_DESCRIPTOR;
 8004860:	f240 1321 	movw	r3, #289	; 0x121
 8004864:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96
  rq.cparam = (void *)buffer;
 8004868:	f107 0310 	add.w	r3, r7, #16
 800486c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  rq.clen = indx;
 8004870:	f897 30af 	ldrb.w	r3, [r7, #175]	; 0xaf
 8004874:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  rq.event = EVT_CMD_STATUS; 
 8004878:	230f      	movs	r3, #15
 800487a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  rq.rparam = &status;
 800487e:	f107 0393 	add.w	r3, r7, #147	; 0x93
 8004882:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  rq.rlen = 1;
 8004886:	2301      	movs	r3, #1
 8004888:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  if (hci_send_req(&rq, FALSE) < 0)
 800488c:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8004890:	2100      	movs	r1, #0
 8004892:	4618      	mov	r0, r3
 8004894:	f000 fad4 	bl	8004e40 <hci_send_req>
 8004898:	4603      	mov	r3, r0
 800489a:	2b00      	cmp	r3, #0
 800489c:	da01      	bge.n	80048a2 <aci_gatt_write_charac_descriptor+0xea>
    return BLE_STATUS_TIMEOUT;
 800489e:	23ff      	movs	r3, #255	; 0xff
 80048a0:	e001      	b.n	80048a6 <aci_gatt_write_charac_descriptor+0xee>

  return status;
 80048a2:	f897 3093 	ldrb.w	r3, [r7, #147]	; 0x93
}
 80048a6:	4618      	mov	r0, r3
 80048a8:	37b0      	adds	r7, #176	; 0xb0
 80048aa:	46bd      	mov	sp, r7
 80048ac:	bd80      	pop	{r7, pc}

080048ae <aci_gatt_write_without_response>:
  return status;
}

tBleStatus aci_gatt_write_without_response(uint16_t conn_handle, uint16_t attr_handle,
                                              uint8_t val_len, const uint8_t* attr_val)
{
 80048ae:	b580      	push	{r7, lr}
 80048b0:	b092      	sub	sp, #72	; 0x48
 80048b2:	af00      	add	r7, sp, #0
 80048b4:	607b      	str	r3, [r7, #4]
 80048b6:	4603      	mov	r3, r0
 80048b8:	81fb      	strh	r3, [r7, #14]
 80048ba:	460b      	mov	r3, r1
 80048bc:	81bb      	strh	r3, [r7, #12]
 80048be:	4613      	mov	r3, r2
 80048c0:	72fb      	strb	r3, [r7, #11]
  struct hci_request rq;
  uint8_t status;
  gatt_write_without_resp_cp cp;
  
  if(val_len > sizeof(cp.attr_val))
 80048c2:	7afb      	ldrb	r3, [r7, #11]
 80048c4:	2b14      	cmp	r3, #20
 80048c6:	d901      	bls.n	80048cc <aci_gatt_write_without_response+0x1e>
    return BLE_STATUS_INVALID_PARAMS;
 80048c8:	2342      	movs	r3, #66	; 0x42
 80048ca:	e031      	b.n	8004930 <aci_gatt_write_without_response+0x82>

  cp.conn_handle = htobs(conn_handle);
 80048cc:	89fb      	ldrh	r3, [r7, #14]
 80048ce:	82bb      	strh	r3, [r7, #20]
  cp.attr_handle = htobs(attr_handle);
 80048d0:	89bb      	ldrh	r3, [r7, #12]
 80048d2:	82fb      	strh	r3, [r7, #22]
  cp.val_len = val_len;
 80048d4:	7afb      	ldrb	r3, [r7, #11]
 80048d6:	763b      	strb	r3, [r7, #24]
  BLUENRG_memcpy(cp.attr_val, attr_val, val_len);
 80048d8:	7afa      	ldrb	r2, [r7, #11]
 80048da:	f107 0314 	add.w	r3, r7, #20
 80048de:	3305      	adds	r3, #5
 80048e0:	6879      	ldr	r1, [r7, #4]
 80048e2:	4618      	mov	r0, r3
 80048e4:	f000 ff4d 	bl	8005782 <memcpy>

  BLUENRG_memset(&rq, 0, sizeof(rq));
 80048e8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80048ec:	2218      	movs	r2, #24
 80048ee:	2100      	movs	r1, #0
 80048f0:	4618      	mov	r0, r3
 80048f2:	f000 ff54 	bl	800579e <memset>
  rq.ogf = OGF_VENDOR_CMD;
 80048f6:	233f      	movs	r3, #63	; 0x3f
 80048f8:	863b      	strh	r3, [r7, #48]	; 0x30
  rq.ocf = OCF_GATT_WRITE_WITHOUT_RESPONSE;
 80048fa:	f240 1323 	movw	r3, #291	; 0x123
 80048fe:	867b      	strh	r3, [r7, #50]	; 0x32
  rq.cparam = &cp;
 8004900:	f107 0314 	add.w	r3, r7, #20
 8004904:	63bb      	str	r3, [r7, #56]	; 0x38
  rq.clen = GATT_WRITE_WITHOUT_RESPONSE_CP_SIZE + val_len; 
 8004906:	7afb      	ldrb	r3, [r7, #11]
 8004908:	3305      	adds	r3, #5
 800490a:	63fb      	str	r3, [r7, #60]	; 0x3c
  rq.rparam = &status;
 800490c:	f107 032f 	add.w	r3, r7, #47	; 0x2f
 8004910:	643b      	str	r3, [r7, #64]	; 0x40
  rq.rlen = 1;
 8004912:	2301      	movs	r3, #1
 8004914:	647b      	str	r3, [r7, #68]	; 0x44

  if (hci_send_req(&rq, FALSE) < 0)
 8004916:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800491a:	2100      	movs	r1, #0
 800491c:	4618      	mov	r0, r3
 800491e:	f000 fa8f 	bl	8004e40 <hci_send_req>
 8004922:	4603      	mov	r3, r0
 8004924:	2b00      	cmp	r3, #0
 8004926:	da01      	bge.n	800492c <aci_gatt_write_without_response+0x7e>
    return BLE_STATUS_TIMEOUT;
 8004928:	23ff      	movs	r3, #255	; 0xff
 800492a:	e001      	b.n	8004930 <aci_gatt_write_without_response+0x82>

  return status;
 800492c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8004930:	4618      	mov	r0, r3
 8004932:	3748      	adds	r7, #72	; 0x48
 8004934:	46bd      	mov	sp, r7
 8004936:	bd80      	pop	{r7, pc}

08004938 <aci_hal_write_config_data>:
}

tBleStatus aci_hal_write_config_data(uint8_t offset, 
                                    uint8_t len,
                                    const uint8_t *val)
{
 8004938:	b580      	push	{r7, lr}
 800493a:	b0aa      	sub	sp, #168	; 0xa8
 800493c:	af00      	add	r7, sp, #0
 800493e:	4603      	mov	r3, r0
 8004940:	603a      	str	r2, [r7, #0]
 8004942:	71fb      	strb	r3, [r7, #7]
 8004944:	460b      	mov	r3, r1
 8004946:	71bb      	strb	r3, [r7, #6]
  struct hci_request rq;
  uint8_t status;
  uint8_t buffer[HCI_MAX_PAYLOAD_SIZE];
  uint8_t indx = 0;
 8004948:	2300      	movs	r3, #0
 800494a:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
    
  if ((len+2) > HCI_MAX_PAYLOAD_SIZE)
 800494e:	79bb      	ldrb	r3, [r7, #6]
 8004950:	2b7e      	cmp	r3, #126	; 0x7e
 8004952:	d901      	bls.n	8004958 <aci_hal_write_config_data+0x20>
    return BLE_STATUS_INVALID_PARAMS;
 8004954:	2342      	movs	r3, #66	; 0x42
 8004956:	e050      	b.n	80049fa <aci_hal_write_config_data+0xc2>

  buffer[indx] = offset;
 8004958:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 800495c:	33a8      	adds	r3, #168	; 0xa8
 800495e:	443b      	add	r3, r7
 8004960:	79fa      	ldrb	r2, [r7, #7]
 8004962:	f803 2ca0 	strb.w	r2, [r3, #-160]
  indx++;
 8004966:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 800496a:	3301      	adds	r3, #1
 800496c:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
    
  buffer[indx] = len;
 8004970:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 8004974:	33a8      	adds	r3, #168	; 0xa8
 8004976:	443b      	add	r3, r7
 8004978:	79ba      	ldrb	r2, [r7, #6]
 800497a:	f803 2ca0 	strb.w	r2, [r3, #-160]
  indx++;
 800497e:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 8004982:	3301      	adds	r3, #1
 8004984:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
        
  BLUENRG_memcpy(buffer + indx, val, len);
 8004988:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 800498c:	f107 0208 	add.w	r2, r7, #8
 8004990:	4413      	add	r3, r2
 8004992:	79ba      	ldrb	r2, [r7, #6]
 8004994:	6839      	ldr	r1, [r7, #0]
 8004996:	4618      	mov	r0, r3
 8004998:	f000 fef3 	bl	8005782 <memcpy>
  indx +=  len;
 800499c:	f897 20a7 	ldrb.w	r2, [r7, #167]	; 0xa7
 80049a0:	79bb      	ldrb	r3, [r7, #6]
 80049a2:	4413      	add	r3, r2
 80049a4:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7

  BLUENRG_memset(&rq, 0, sizeof(rq));
 80049a8:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80049ac:	2218      	movs	r2, #24
 80049ae:	2100      	movs	r1, #0
 80049b0:	4618      	mov	r0, r3
 80049b2:	f000 fef4 	bl	800579e <memset>
  rq.ogf = OGF_VENDOR_CMD;
 80049b6:	233f      	movs	r3, #63	; 0x3f
 80049b8:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
  rq.ocf = OCF_HAL_WRITE_CONFIG_DATA;
 80049bc:	230c      	movs	r3, #12
 80049be:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
  rq.cparam = (void *)buffer;
 80049c2:	f107 0308 	add.w	r3, r7, #8
 80049c6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  rq.clen = indx;
 80049ca:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 80049ce:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  rq.rparam = &status;
 80049d2:	f107 038b 	add.w	r3, r7, #139	; 0x8b
 80049d6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  rq.rlen = 1;
 80049da:	2301      	movs	r3, #1
 80049dc:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

  if (hci_send_req(&rq, FALSE) < 0)
 80049e0:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80049e4:	2100      	movs	r1, #0
 80049e6:	4618      	mov	r0, r3
 80049e8:	f000 fa2a 	bl	8004e40 <hci_send_req>
 80049ec:	4603      	mov	r3, r0
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	da01      	bge.n	80049f6 <aci_hal_write_config_data+0xbe>
    return BLE_STATUS_TIMEOUT;
 80049f2:	23ff      	movs	r3, #255	; 0xff
 80049f4:	e001      	b.n	80049fa <aci_hal_write_config_data+0xc2>

  return status;
 80049f6:	f897 308b 	ldrb.w	r3, [r7, #139]	; 0x8b
}
 80049fa:	4618      	mov	r0, r3
 80049fc:	37a8      	adds	r7, #168	; 0xa8
 80049fe:	46bd      	mov	sp, r7
 8004a00:	bd80      	pop	{r7, pc}

08004a02 <aci_hal_set_tx_power_level>:
  
  return 0;
}

tBleStatus aci_hal_set_tx_power_level(uint8_t en_high_power, uint8_t pa_level)
{
 8004a02:	b580      	push	{r7, lr}
 8004a04:	b08a      	sub	sp, #40	; 0x28
 8004a06:	af00      	add	r7, sp, #0
 8004a08:	4603      	mov	r3, r0
 8004a0a:	460a      	mov	r2, r1
 8004a0c:	71fb      	strb	r3, [r7, #7]
 8004a0e:	4613      	mov	r3, r2
 8004a10:	71bb      	strb	r3, [r7, #6]
  struct hci_request rq;
  hal_set_tx_power_level_cp cp;    
  uint8_t status;
    
  cp.en_high_power = en_high_power;
 8004a12:	79fb      	ldrb	r3, [r7, #7]
 8004a14:	733b      	strb	r3, [r7, #12]
  cp.pa_level = pa_level;
 8004a16:	79bb      	ldrb	r3, [r7, #6]
 8004a18:	737b      	strb	r3, [r7, #13]

  BLUENRG_memset(&rq, 0, sizeof(rq));
 8004a1a:	f107 0310 	add.w	r3, r7, #16
 8004a1e:	2218      	movs	r2, #24
 8004a20:	2100      	movs	r1, #0
 8004a22:	4618      	mov	r0, r3
 8004a24:	f000 febb 	bl	800579e <memset>
  rq.ogf = OGF_VENDOR_CMD;
 8004a28:	233f      	movs	r3, #63	; 0x3f
 8004a2a:	823b      	strh	r3, [r7, #16]
  rq.ocf = OCF_HAL_SET_TX_POWER_LEVEL;
 8004a2c:	230f      	movs	r3, #15
 8004a2e:	827b      	strh	r3, [r7, #18]
  rq.cparam = &cp;
 8004a30:	f107 030c 	add.w	r3, r7, #12
 8004a34:	61bb      	str	r3, [r7, #24]
  rq.clen = HAL_SET_TX_POWER_LEVEL_CP_SIZE;
 8004a36:	2302      	movs	r3, #2
 8004a38:	61fb      	str	r3, [r7, #28]
  rq.rparam = &status;
 8004a3a:	f107 030b 	add.w	r3, r7, #11
 8004a3e:	623b      	str	r3, [r7, #32]
  rq.rlen = 1;
 8004a40:	2301      	movs	r3, #1
 8004a42:	627b      	str	r3, [r7, #36]	; 0x24

  if (hci_send_req(&rq, FALSE) < 0)
 8004a44:	f107 0310 	add.w	r3, r7, #16
 8004a48:	2100      	movs	r1, #0
 8004a4a:	4618      	mov	r0, r3
 8004a4c:	f000 f9f8 	bl	8004e40 <hci_send_req>
 8004a50:	4603      	mov	r3, r0
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	da01      	bge.n	8004a5a <aci_hal_set_tx_power_level+0x58>
    return BLE_STATUS_TIMEOUT;
 8004a56:	23ff      	movs	r3, #255	; 0xff
 8004a58:	e000      	b.n	8004a5c <aci_hal_set_tx_power_level+0x5a>

  return status;
 8004a5a:	7afb      	ldrb	r3, [r7, #11]
}
 8004a5c:	4618      	mov	r0, r3
 8004a5e:	3728      	adds	r7, #40	; 0x28
 8004a60:	46bd      	mov	sp, r7
 8004a62:	bd80      	pop	{r7, pc}

08004a64 <getBlueNRGVersion>:
#include "hci.h"
#include "hci_le.h"
#include "string.h"

uint8_t getBlueNRGVersion(uint8_t *hwVersion, uint16_t *fwVersion)
{
 8004a64:	b590      	push	{r4, r7, lr}
 8004a66:	b089      	sub	sp, #36	; 0x24
 8004a68:	af02      	add	r7, sp, #8
 8004a6a:	6078      	str	r0, [r7, #4]
 8004a6c:	6039      	str	r1, [r7, #0]
  uint8_t status;
  uint8_t hci_version, lmp_pal_version;
  uint16_t hci_revision, manufacturer_name, lmp_pal_subversion;

  status = hci_le_read_local_version(&hci_version, &hci_revision, &lmp_pal_version, 
 8004a6e:	f107 0410 	add.w	r4, r7, #16
 8004a72:	f107 0215 	add.w	r2, r7, #21
 8004a76:	f107 0112 	add.w	r1, r7, #18
 8004a7a:	f107 0016 	add.w	r0, r7, #22
 8004a7e:	f107 030e 	add.w	r3, r7, #14
 8004a82:	9300      	str	r3, [sp, #0]
 8004a84:	4623      	mov	r3, r4
 8004a86:	f000 f853 	bl	8004b30 <hci_le_read_local_version>
 8004a8a:	4603      	mov	r3, r0
 8004a8c:	75fb      	strb	r3, [r7, #23]
                                     &manufacturer_name, &lmp_pal_subversion);

  if (status == BLE_STATUS_SUCCESS) {
 8004a8e:	7dfb      	ldrb	r3, [r7, #23]
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	d126      	bne.n	8004ae2 <getBlueNRGVersion+0x7e>
    *hwVersion = hci_revision >> 8;
 8004a94:	8a7b      	ldrh	r3, [r7, #18]
 8004a96:	0a1b      	lsrs	r3, r3, #8
 8004a98:	b29b      	uxth	r3, r3
 8004a9a:	b2da      	uxtb	r2, r3
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	701a      	strb	r2, [r3, #0]
    *fwVersion = (hci_revision & 0xFF) << 8;              // Major Version Number
 8004aa0:	8a7b      	ldrh	r3, [r7, #18]
 8004aa2:	021b      	lsls	r3, r3, #8
 8004aa4:	b29a      	uxth	r2, r3
 8004aa6:	683b      	ldr	r3, [r7, #0]
 8004aa8:	801a      	strh	r2, [r3, #0]
    *fwVersion |= ((lmp_pal_subversion >> 4) & 0xF) << 4; // Minor Version Number
 8004aaa:	683b      	ldr	r3, [r7, #0]
 8004aac:	881b      	ldrh	r3, [r3, #0]
 8004aae:	b21a      	sxth	r2, r3
 8004ab0:	89fb      	ldrh	r3, [r7, #14]
 8004ab2:	091b      	lsrs	r3, r3, #4
 8004ab4:	b29b      	uxth	r3, r3
 8004ab6:	011b      	lsls	r3, r3, #4
 8004ab8:	b21b      	sxth	r3, r3
 8004aba:	b2db      	uxtb	r3, r3
 8004abc:	b21b      	sxth	r3, r3
 8004abe:	4313      	orrs	r3, r2
 8004ac0:	b21b      	sxth	r3, r3
 8004ac2:	b29a      	uxth	r2, r3
 8004ac4:	683b      	ldr	r3, [r7, #0]
 8004ac6:	801a      	strh	r2, [r3, #0]
    *fwVersion |= lmp_pal_subversion & 0xF;               // Patch Version Number
 8004ac8:	683b      	ldr	r3, [r7, #0]
 8004aca:	881b      	ldrh	r3, [r3, #0]
 8004acc:	b21a      	sxth	r2, r3
 8004ace:	89fb      	ldrh	r3, [r7, #14]
 8004ad0:	b21b      	sxth	r3, r3
 8004ad2:	f003 030f 	and.w	r3, r3, #15
 8004ad6:	b21b      	sxth	r3, r3
 8004ad8:	4313      	orrs	r3, r2
 8004ada:	b21b      	sxth	r3, r3
 8004adc:	b29a      	uxth	r2, r3
 8004ade:	683b      	ldr	r3, [r7, #0]
 8004ae0:	801a      	strh	r2, [r3, #0]
  }
  return status;
 8004ae2:	7dfb      	ldrb	r3, [r7, #23]
}
 8004ae4:	4618      	mov	r0, r3
 8004ae6:	371c      	adds	r7, #28
 8004ae8:	46bd      	mov	sp, r7
 8004aea:	bd90      	pop	{r4, r7, pc}

08004aec <hci_reset>:

#define MIN(a,b)            ((a) < (b) )? (a) : (b)
#define MAX(a,b)            ((a) > (b) )? (a) : (b)

int hci_reset(void)
{
 8004aec:	b580      	push	{r7, lr}
 8004aee:	b088      	sub	sp, #32
 8004af0:	af00      	add	r7, sp, #0
  struct hci_request rq;
  uint8_t status;
  
  BLUENRG_memset(&rq, 0, sizeof(rq));
 8004af2:	f107 0308 	add.w	r3, r7, #8
 8004af6:	2218      	movs	r2, #24
 8004af8:	2100      	movs	r1, #0
 8004afa:	4618      	mov	r0, r3
 8004afc:	f000 fe4f 	bl	800579e <memset>
  rq.ogf = OGF_HOST_CTL;
 8004b00:	2303      	movs	r3, #3
 8004b02:	813b      	strh	r3, [r7, #8]
  rq.ocf = OCF_RESET;
 8004b04:	2303      	movs	r3, #3
 8004b06:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 8004b08:	1dfb      	adds	r3, r7, #7
 8004b0a:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 8004b0c:	2301      	movs	r3, #1
 8004b0e:	61fb      	str	r3, [r7, #28]
  
  if (hci_send_req(&rq, FALSE) < 0)
 8004b10:	f107 0308 	add.w	r3, r7, #8
 8004b14:	2100      	movs	r1, #0
 8004b16:	4618      	mov	r0, r3
 8004b18:	f000 f992 	bl	8004e40 <hci_send_req>
 8004b1c:	4603      	mov	r3, r0
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	da01      	bge.n	8004b26 <hci_reset+0x3a>
    return BLE_STATUS_TIMEOUT;
 8004b22:	23ff      	movs	r3, #255	; 0xff
 8004b24:	e000      	b.n	8004b28 <hci_reset+0x3c>
  
  return status;  
 8004b26:	79fb      	ldrb	r3, [r7, #7]
}
 8004b28:	4618      	mov	r0, r3
 8004b2a:	3720      	adds	r7, #32
 8004b2c:	46bd      	mov	sp, r7
 8004b2e:	bd80      	pop	{r7, pc}

08004b30 <hci_le_read_local_version>:
  return status;  
}

int hci_le_read_local_version(uint8_t *hci_version, uint16_t *hci_revision, uint8_t *lmp_pal_version, 
                              uint16_t *manufacturer_name, uint16_t *lmp_pal_subversion)
{
 8004b30:	b580      	push	{r7, lr}
 8004b32:	b08e      	sub	sp, #56	; 0x38
 8004b34:	af00      	add	r7, sp, #0
 8004b36:	60f8      	str	r0, [r7, #12]
 8004b38:	60b9      	str	r1, [r7, #8]
 8004b3a:	607a      	str	r2, [r7, #4]
 8004b3c:	603b      	str	r3, [r7, #0]
  struct hci_request rq;
  read_local_version_rp resp;
  
  BLUENRG_memset(&resp, 0, sizeof(resp));
 8004b3e:	f107 0314 	add.w	r3, r7, #20
 8004b42:	2209      	movs	r2, #9
 8004b44:	2100      	movs	r1, #0
 8004b46:	4618      	mov	r0, r3
 8004b48:	f000 fe29 	bl	800579e <memset>
  
  BLUENRG_memset(&rq, 0, sizeof(rq));
 8004b4c:	f107 0320 	add.w	r3, r7, #32
 8004b50:	2218      	movs	r2, #24
 8004b52:	2100      	movs	r1, #0
 8004b54:	4618      	mov	r0, r3
 8004b56:	f000 fe22 	bl	800579e <memset>
  rq.ogf = OGF_INFO_PARAM;
 8004b5a:	2304      	movs	r3, #4
 8004b5c:	843b      	strh	r3, [r7, #32]
  rq.ocf = OCF_READ_LOCAL_VERSION;
 8004b5e:	2301      	movs	r3, #1
 8004b60:	847b      	strh	r3, [r7, #34]	; 0x22
  rq.cparam = NULL;
 8004b62:	2300      	movs	r3, #0
 8004b64:	62bb      	str	r3, [r7, #40]	; 0x28
  rq.clen = 0;
 8004b66:	2300      	movs	r3, #0
 8004b68:	62fb      	str	r3, [r7, #44]	; 0x2c
  rq.rparam = &resp;
 8004b6a:	f107 0314 	add.w	r3, r7, #20
 8004b6e:	633b      	str	r3, [r7, #48]	; 0x30
  rq.rlen = READ_LOCAL_VERSION_RP_SIZE;
 8004b70:	2309      	movs	r3, #9
 8004b72:	637b      	str	r3, [r7, #52]	; 0x34
  
  if (hci_send_req(&rq, FALSE) < 0)
 8004b74:	f107 0320 	add.w	r3, r7, #32
 8004b78:	2100      	movs	r1, #0
 8004b7a:	4618      	mov	r0, r3
 8004b7c:	f000 f960 	bl	8004e40 <hci_send_req>
 8004b80:	4603      	mov	r3, r0
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	da01      	bge.n	8004b8a <hci_le_read_local_version+0x5a>
    return BLE_STATUS_TIMEOUT;
 8004b86:	23ff      	movs	r3, #255	; 0xff
 8004b88:	e018      	b.n	8004bbc <hci_le_read_local_version+0x8c>
  
  if (resp.status) {
 8004b8a:	7d3b      	ldrb	r3, [r7, #20]
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d001      	beq.n	8004b94 <hci_le_read_local_version+0x64>
    return resp.status;
 8004b90:	7d3b      	ldrb	r3, [r7, #20]
 8004b92:	e013      	b.n	8004bbc <hci_le_read_local_version+0x8c>
  }
  
  
  *hci_version = resp.hci_version;
 8004b94:	7d7a      	ldrb	r2, [r7, #21]
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	701a      	strb	r2, [r3, #0]
  *hci_revision =  btohs(resp.hci_revision);
 8004b9a:	8afa      	ldrh	r2, [r7, #22]
 8004b9c:	68bb      	ldr	r3, [r7, #8]
 8004b9e:	801a      	strh	r2, [r3, #0]
  *lmp_pal_version = resp.lmp_pal_version;
 8004ba0:	7e3a      	ldrb	r2, [r7, #24]
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	701a      	strb	r2, [r3, #0]
  *manufacturer_name = btohs(resp.manufacturer_name);
 8004ba6:	f8b7 3019 	ldrh.w	r3, [r7, #25]
 8004baa:	b29a      	uxth	r2, r3
 8004bac:	683b      	ldr	r3, [r7, #0]
 8004bae:	801a      	strh	r2, [r3, #0]
  *lmp_pal_subversion = btohs(resp.lmp_pal_subversion);
 8004bb0:	f8b7 301b 	ldrh.w	r3, [r7, #27]
 8004bb4:	b29a      	uxth	r2, r3
 8004bb6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004bb8:	801a      	strh	r2, [r3, #0]
  
  return 0;
 8004bba:	2300      	movs	r3, #0
}
 8004bbc:	4618      	mov	r0, r3
 8004bbe:	3738      	adds	r7, #56	; 0x38
 8004bc0:	46bd      	mov	sp, r7
 8004bc2:	bd80      	pop	{r7, pc}

08004bc4 <hci_le_set_scan_resp_data>:
  
  return 0;
}

int hci_le_set_scan_resp_data(uint8_t length, const uint8_t data[])
{
 8004bc4:	b580      	push	{r7, lr}
 8004bc6:	b092      	sub	sp, #72	; 0x48
 8004bc8:	af00      	add	r7, sp, #0
 8004bca:	4603      	mov	r3, r0
 8004bcc:	6039      	str	r1, [r7, #0]
 8004bce:	71fb      	strb	r3, [r7, #7]
  struct hci_request rq;
  le_set_scan_response_data_cp scan_resp_cp;
  uint8_t status;
  
  BLUENRG_memset(&scan_resp_cp, 0, sizeof(scan_resp_cp));
 8004bd0:	f107 0310 	add.w	r3, r7, #16
 8004bd4:	2220      	movs	r2, #32
 8004bd6:	2100      	movs	r1, #0
 8004bd8:	4618      	mov	r0, r3
 8004bda:	f000 fde0 	bl	800579e <memset>
  scan_resp_cp.length = length;
 8004bde:	79fb      	ldrb	r3, [r7, #7]
 8004be0:	743b      	strb	r3, [r7, #16]
  BLUENRG_memcpy(scan_resp_cp.data, data, MIN(31,length));
 8004be2:	79fb      	ldrb	r3, [r7, #7]
 8004be4:	2b1f      	cmp	r3, #31
 8004be6:	bf28      	it	cs
 8004be8:	231f      	movcs	r3, #31
 8004bea:	b2db      	uxtb	r3, r3
 8004bec:	461a      	mov	r2, r3
 8004bee:	f107 0310 	add.w	r3, r7, #16
 8004bf2:	3301      	adds	r3, #1
 8004bf4:	6839      	ldr	r1, [r7, #0]
 8004bf6:	4618      	mov	r0, r3
 8004bf8:	f000 fdc3 	bl	8005782 <memcpy>
  
  BLUENRG_memset(&rq, 0, sizeof(rq));
 8004bfc:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8004c00:	2218      	movs	r2, #24
 8004c02:	2100      	movs	r1, #0
 8004c04:	4618      	mov	r0, r3
 8004c06:	f000 fdca 	bl	800579e <memset>
  rq.ogf = OGF_LE_CTL;
 8004c0a:	2308      	movs	r3, #8
 8004c0c:	863b      	strh	r3, [r7, #48]	; 0x30
  rq.ocf = OCF_LE_SET_SCAN_RESPONSE_DATA;
 8004c0e:	2309      	movs	r3, #9
 8004c10:	867b      	strh	r3, [r7, #50]	; 0x32
  rq.cparam = &scan_resp_cp;
 8004c12:	f107 0310 	add.w	r3, r7, #16
 8004c16:	63bb      	str	r3, [r7, #56]	; 0x38
  rq.clen = LE_SET_SCAN_RESPONSE_DATA_CP_SIZE;
 8004c18:	2320      	movs	r3, #32
 8004c1a:	63fb      	str	r3, [r7, #60]	; 0x3c
  rq.rparam = &status;
 8004c1c:	f107 030f 	add.w	r3, r7, #15
 8004c20:	643b      	str	r3, [r7, #64]	; 0x40
  rq.rlen = 1;
 8004c22:	2301      	movs	r3, #1
 8004c24:	647b      	str	r3, [r7, #68]	; 0x44
  
  if (hci_send_req(&rq, FALSE) < 0)
 8004c26:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8004c2a:	2100      	movs	r1, #0
 8004c2c:	4618      	mov	r0, r3
 8004c2e:	f000 f907 	bl	8004e40 <hci_send_req>
 8004c32:	4603      	mov	r3, r0
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	da01      	bge.n	8004c3c <hci_le_set_scan_resp_data+0x78>
    return BLE_STATUS_TIMEOUT;
 8004c38:	23ff      	movs	r3, #255	; 0xff
 8004c3a:	e000      	b.n	8004c3e <hci_le_set_scan_resp_data+0x7a>
  
  return status;
 8004c3c:	7bfb      	ldrb	r3, [r7, #15]
}
 8004c3e:	4618      	mov	r0, r3
 8004c40:	3748      	adds	r7, #72	; 0x48
 8004c42:	46bd      	mov	sp, r7
 8004c44:	bd80      	pop	{r7, pc}

08004c46 <verify_packet>:
  *
  * @param  hciReadPacket The HCI data packet
  * @retval 0: valid packet, 1: incorrect packet, 2: wrong length (packet truncated or too long)
  */
static int verify_packet(const tHciDataPacket * hciReadPacket)
{
 8004c46:	b480      	push	{r7}
 8004c48:	b085      	sub	sp, #20
 8004c4a:	af00      	add	r7, sp, #0
 8004c4c:	6078      	str	r0, [r7, #4]
  const uint8_t *hci_pckt = hciReadPacket->dataBuff;
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	3308      	adds	r3, #8
 8004c52:	60fb      	str	r3, [r7, #12]
  
  if (hci_pckt[HCI_PCK_TYPE_OFFSET] != HCI_EVENT_PKT)
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	781b      	ldrb	r3, [r3, #0]
 8004c58:	2b04      	cmp	r3, #4
 8004c5a:	d001      	beq.n	8004c60 <verify_packet+0x1a>
    return 1; /* Incorrect type */
 8004c5c:	2301      	movs	r3, #1
 8004c5e:	e00c      	b.n	8004c7a <verify_packet+0x34>
  
  if (hci_pckt[EVENT_PARAMETER_TOT_LEN_OFFSET] != hciReadPacket->data_len - (1+HCI_EVENT_HDR_SIZE))
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	3302      	adds	r3, #2
 8004c64:	781b      	ldrb	r3, [r3, #0]
 8004c66:	461a      	mov	r2, r3
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	f893 3088 	ldrb.w	r3, [r3, #136]	; 0x88
 8004c6e:	3b03      	subs	r3, #3
 8004c70:	429a      	cmp	r2, r3
 8004c72:	d001      	beq.n	8004c78 <verify_packet+0x32>
    return 2; /* Wrong length (packet truncated or too long) */
 8004c74:	2302      	movs	r3, #2
 8004c76:	e000      	b.n	8004c7a <verify_packet+0x34>
  
  return 0;      
 8004c78:	2300      	movs	r3, #0
}
 8004c7a:	4618      	mov	r0, r3
 8004c7c:	3714      	adds	r7, #20
 8004c7e:	46bd      	mov	sp, r7
 8004c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c84:	4770      	bx	lr
	...

08004c88 <send_cmd>:
  * @param  plen The HCI command length
  * @param  param The HCI command parameters
  * @retval None
  */
static void send_cmd(uint16_t ogf, uint16_t ocf, uint8_t plen, void *param)
{
 8004c88:	b580      	push	{r7, lr}
 8004c8a:	b0a6      	sub	sp, #152	; 0x98
 8004c8c:	af00      	add	r7, sp, #0
 8004c8e:	607b      	str	r3, [r7, #4]
 8004c90:	4603      	mov	r3, r0
 8004c92:	81fb      	strh	r3, [r7, #14]
 8004c94:	460b      	mov	r3, r1
 8004c96:	81bb      	strh	r3, [r7, #12]
 8004c98:	4613      	mov	r3, r2
 8004c9a:	72fb      	strb	r3, [r7, #11]
  uint8_t payload[HCI_MAX_PAYLOAD_SIZE];  
  hci_command_hdr hc;
  
  hc.opcode = htobs(cmd_opcode_pack(ogf, ocf));
 8004c9c:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8004ca0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004ca4:	b21a      	sxth	r2, r3
 8004ca6:	89fb      	ldrh	r3, [r7, #14]
 8004ca8:	029b      	lsls	r3, r3, #10
 8004caa:	b21b      	sxth	r3, r3
 8004cac:	4313      	orrs	r3, r2
 8004cae:	b21b      	sxth	r3, r3
 8004cb0:	b29b      	uxth	r3, r3
 8004cb2:	82bb      	strh	r3, [r7, #20]
  hc.plen = plen;
 8004cb4:	7afb      	ldrb	r3, [r7, #11]
 8004cb6:	75bb      	strb	r3, [r7, #22]

  payload[0] = HCI_COMMAND_PKT;
 8004cb8:	2301      	movs	r3, #1
 8004cba:	763b      	strb	r3, [r7, #24]
  BLUENRG_memcpy(payload + 1, &hc, sizeof(hc));
 8004cbc:	f107 0318 	add.w	r3, r7, #24
 8004cc0:	3301      	adds	r3, #1
 8004cc2:	461a      	mov	r2, r3
 8004cc4:	f107 0314 	add.w	r3, r7, #20
 8004cc8:	8819      	ldrh	r1, [r3, #0]
 8004cca:	789b      	ldrb	r3, [r3, #2]
 8004ccc:	8011      	strh	r1, [r2, #0]
 8004cce:	7093      	strb	r3, [r2, #2]
  BLUENRG_memcpy(payload + HCI_HDR_SIZE + HCI_COMMAND_HDR_SIZE, param, plen);
 8004cd0:	f107 0318 	add.w	r3, r7, #24
 8004cd4:	3304      	adds	r3, #4
 8004cd6:	7afa      	ldrb	r2, [r7, #11]
 8004cd8:	6879      	ldr	r1, [r7, #4]
 8004cda:	4618      	mov	r0, r3
 8004cdc:	f000 fd51 	bl	8005782 <memcpy>
  
  if (hciContext.io.Send)
 8004ce0:	4b08      	ldr	r3, [pc, #32]	; (8004d04 <send_cmd+0x7c>)
 8004ce2:	691b      	ldr	r3, [r3, #16]
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	d009      	beq.n	8004cfc <send_cmd+0x74>
  {
    hciContext.io.Send (payload, HCI_HDR_SIZE + HCI_COMMAND_HDR_SIZE + plen);
 8004ce8:	4b06      	ldr	r3, [pc, #24]	; (8004d04 <send_cmd+0x7c>)
 8004cea:	691b      	ldr	r3, [r3, #16]
 8004cec:	7afa      	ldrb	r2, [r7, #11]
 8004cee:	b292      	uxth	r2, r2
 8004cf0:	3204      	adds	r2, #4
 8004cf2:	b291      	uxth	r1, r2
 8004cf4:	f107 0218 	add.w	r2, r7, #24
 8004cf8:	4610      	mov	r0, r2
 8004cfa:	4798      	blx	r3
  }
}
 8004cfc:	bf00      	nop
 8004cfe:	3798      	adds	r7, #152	; 0x98
 8004d00:	46bd      	mov	sp, r7
 8004d02:	bd80      	pop	{r7, pc}
 8004d04:	20000540 	.word	0x20000540

08004d08 <move_list>:
  * @param  dest_list
  * @param  src_list
  * @retval None
  */
static void move_list(tListNode * dest_list, tListNode * src_list)
{
 8004d08:	b580      	push	{r7, lr}
 8004d0a:	b084      	sub	sp, #16
 8004d0c:	af00      	add	r7, sp, #0
 8004d0e:	6078      	str	r0, [r7, #4]
 8004d10:	6039      	str	r1, [r7, #0]
  pListNode tmp_node;
  
  while (!list_is_empty(src_list))
 8004d12:	e00a      	b.n	8004d2a <move_list+0x22>
  {
    list_remove_tail(src_list, &tmp_node);
 8004d14:	f107 030c 	add.w	r3, r7, #12
 8004d18:	4619      	mov	r1, r3
 8004d1a:	6838      	ldr	r0, [r7, #0]
 8004d1c:	f000 faea 	bl	80052f4 <list_remove_tail>
    list_insert_head(dest_list, tmp_node);
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	4619      	mov	r1, r3
 8004d24:	6878      	ldr	r0, [r7, #4]
 8004d26:	f000 fa51 	bl	80051cc <list_insert_head>
  while (!list_is_empty(src_list))
 8004d2a:	6838      	ldr	r0, [r7, #0]
 8004d2c:	f000 fa2c 	bl	8005188 <list_is_empty>
 8004d30:	4603      	mov	r3, r0
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d0ee      	beq.n	8004d14 <move_list+0xc>
  }
}
 8004d36:	bf00      	nop
 8004d38:	bf00      	nop
 8004d3a:	3710      	adds	r7, #16
 8004d3c:	46bd      	mov	sp, r7
 8004d3e:	bd80      	pop	{r7, pc}

08004d40 <free_event_list>:
  *
  * @param  None
  * @retval None
  */
static void free_event_list(void)
{
 8004d40:	b580      	push	{r7, lr}
 8004d42:	b082      	sub	sp, #8
 8004d44:	af00      	add	r7, sp, #0
  tHciDataPacket * pckt;

  while(list_get_size(&hciReadPktPool) < HCI_READ_PACKET_NUM_MAX/2){
 8004d46:	e009      	b.n	8004d5c <free_event_list+0x1c>
    list_remove_head(&hciReadPktRxQueue, (tListNode **)&pckt);    
 8004d48:	1d3b      	adds	r3, r7, #4
 8004d4a:	4619      	mov	r1, r3
 8004d4c:	4809      	ldr	r0, [pc, #36]	; (8004d74 <free_event_list+0x34>)
 8004d4e:	f000 faaa 	bl	80052a6 <list_remove_head>
    list_insert_tail(&hciReadPktPool, (tListNode *)pckt);
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	4619      	mov	r1, r3
 8004d56:	4808      	ldr	r0, [pc, #32]	; (8004d78 <free_event_list+0x38>)
 8004d58:	f000 fa5e 	bl	8005218 <list_insert_tail>
  while(list_get_size(&hciReadPktPool) < HCI_READ_PACKET_NUM_MAX/2){
 8004d5c:	4806      	ldr	r0, [pc, #24]	; (8004d78 <free_event_list+0x38>)
 8004d5e:	f000 faf0 	bl	8005342 <list_get_size>
 8004d62:	4603      	mov	r3, r0
 8004d64:	2b01      	cmp	r3, #1
 8004d66:	ddef      	ble.n	8004d48 <free_event_list+0x8>
  }
}
 8004d68:	bf00      	nop
 8004d6a:	bf00      	nop
 8004d6c:	3708      	adds	r7, #8
 8004d6e:	46bd      	mov	sp, r7
 8004d70:	bd80      	pop	{r7, pc}
 8004d72:	bf00      	nop
 8004d74:	2000027c 	.word	0x2000027c
 8004d78:	20000274 	.word	0x20000274

08004d7c <hci_init>:

/********************** HCI Transport layer functions *****************************/

void hci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 8004d7c:	b580      	push	{r7, lr}
 8004d7e:	b084      	sub	sp, #16
 8004d80:	af00      	add	r7, sp, #0
 8004d82:	6078      	str	r0, [r7, #4]
 8004d84:	6039      	str	r1, [r7, #0]
  uint8_t index;

  if(UserEvtRx != NULL)
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d002      	beq.n	8004d92 <hci_init+0x16>
  {
    hciContext.UserEvtRx = UserEvtRx;
 8004d8c:	4a18      	ldr	r2, [pc, #96]	; (8004df0 <hci_init+0x74>)
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	61d3      	str	r3, [r2, #28]
  }
  
  /* Initialize list heads of ready and free hci data packet queues */
  list_init_head(&hciReadPktPool);
 8004d92:	4818      	ldr	r0, [pc, #96]	; (8004df4 <hci_init+0x78>)
 8004d94:	f000 f9e8 	bl	8005168 <list_init_head>
  list_init_head(&hciReadPktRxQueue);
 8004d98:	4817      	ldr	r0, [pc, #92]	; (8004df8 <hci_init+0x7c>)
 8004d9a:	f000 f9e5 	bl	8005168 <list_init_head>

  /* Initialize TL BLE layer */
  hci_tl_lowlevel_init();
 8004d9e:	f7fc fa49 	bl	8001234 <hci_tl_lowlevel_init>
    
  /* Initialize the queue of free hci data packets */
  for (index = 0; index < HCI_READ_PACKET_NUM_MAX; index++)
 8004da2:	2300      	movs	r3, #0
 8004da4:	73fb      	strb	r3, [r7, #15]
 8004da6:	e00c      	b.n	8004dc2 <hci_init+0x46>
  {
    list_insert_tail(&hciReadPktPool, (tListNode *)&hciReadPacketBuffer[index]);
 8004da8:	7bfb      	ldrb	r3, [r7, #15]
 8004daa:	228c      	movs	r2, #140	; 0x8c
 8004dac:	fb02 f303 	mul.w	r3, r2, r3
 8004db0:	4a12      	ldr	r2, [pc, #72]	; (8004dfc <hci_init+0x80>)
 8004db2:	4413      	add	r3, r2
 8004db4:	4619      	mov	r1, r3
 8004db6:	480f      	ldr	r0, [pc, #60]	; (8004df4 <hci_init+0x78>)
 8004db8:	f000 fa2e 	bl	8005218 <list_insert_tail>
  for (index = 0; index < HCI_READ_PACKET_NUM_MAX; index++)
 8004dbc:	7bfb      	ldrb	r3, [r7, #15]
 8004dbe:	3301      	adds	r3, #1
 8004dc0:	73fb      	strb	r3, [r7, #15]
 8004dc2:	7bfb      	ldrb	r3, [r7, #15]
 8004dc4:	2b04      	cmp	r3, #4
 8004dc6:	d9ef      	bls.n	8004da8 <hci_init+0x2c>
  } 
  
  /* Initialize low level driver */
  if (hciContext.io.Init)  hciContext.io.Init(NULL);
 8004dc8:	4b09      	ldr	r3, [pc, #36]	; (8004df0 <hci_init+0x74>)
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	d003      	beq.n	8004dd8 <hci_init+0x5c>
 8004dd0:	4b07      	ldr	r3, [pc, #28]	; (8004df0 <hci_init+0x74>)
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	2000      	movs	r0, #0
 8004dd6:	4798      	blx	r3
  if (hciContext.io.Reset) hciContext.io.Reset();
 8004dd8:	4b05      	ldr	r3, [pc, #20]	; (8004df0 <hci_init+0x74>)
 8004dda:	689b      	ldr	r3, [r3, #8]
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	d002      	beq.n	8004de6 <hci_init+0x6a>
 8004de0:	4b03      	ldr	r3, [pc, #12]	; (8004df0 <hci_init+0x74>)
 8004de2:	689b      	ldr	r3, [r3, #8]
 8004de4:	4798      	blx	r3
}
 8004de6:	bf00      	nop
 8004de8:	3710      	adds	r7, #16
 8004dea:	46bd      	mov	sp, r7
 8004dec:	bd80      	pop	{r7, pc}
 8004dee:	bf00      	nop
 8004df0:	20000540 	.word	0x20000540
 8004df4:	20000274 	.word	0x20000274
 8004df8:	2000027c 	.word	0x2000027c
 8004dfc:	20000284 	.word	0x20000284

08004e00 <hci_register_io_bus>:

void hci_register_io_bus(tHciIO* fops)
{
 8004e00:	b480      	push	{r7}
 8004e02:	b083      	sub	sp, #12
 8004e04:	af00      	add	r7, sp, #0
 8004e06:	6078      	str	r0, [r7, #4]
  /* Register bus function */
  hciContext.io.Init    = fops->Init; 
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	4a0b      	ldr	r2, [pc, #44]	; (8004e3c <hci_register_io_bus+0x3c>)
 8004e0e:	6013      	str	r3, [r2, #0]
  hciContext.io.Receive = fops->Receive;  
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	68db      	ldr	r3, [r3, #12]
 8004e14:	4a09      	ldr	r2, [pc, #36]	; (8004e3c <hci_register_io_bus+0x3c>)
 8004e16:	60d3      	str	r3, [r2, #12]
  hciContext.io.Send    = fops->Send;
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	691b      	ldr	r3, [r3, #16]
 8004e1c:	4a07      	ldr	r2, [pc, #28]	; (8004e3c <hci_register_io_bus+0x3c>)
 8004e1e:	6113      	str	r3, [r2, #16]
  hciContext.io.GetTick = fops->GetTick;
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	699b      	ldr	r3, [r3, #24]
 8004e24:	4a05      	ldr	r2, [pc, #20]	; (8004e3c <hci_register_io_bus+0x3c>)
 8004e26:	6193      	str	r3, [r2, #24]
  hciContext.io.Reset   = fops->Reset;
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	689b      	ldr	r3, [r3, #8]
 8004e2c:	4a03      	ldr	r2, [pc, #12]	; (8004e3c <hci_register_io_bus+0x3c>)
 8004e2e:	6093      	str	r3, [r2, #8]
}
 8004e30:	bf00      	nop
 8004e32:	370c      	adds	r7, #12
 8004e34:	46bd      	mov	sp, r7
 8004e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e3a:	4770      	bx	lr
 8004e3c:	20000540 	.word	0x20000540

08004e40 <hci_send_req>:

int hci_send_req(struct hci_request* r, BOOL async)
{
 8004e40:	b580      	push	{r7, lr}
 8004e42:	b08e      	sub	sp, #56	; 0x38
 8004e44:	af00      	add	r7, sp, #0
 8004e46:	6078      	str	r0, [r7, #4]
 8004e48:	460b      	mov	r3, r1
 8004e4a:	70fb      	strb	r3, [r7, #3]
  uint8_t *ptr;
  uint16_t opcode = htobs(cmd_opcode_pack(r->ogf, r->ocf));
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	885b      	ldrh	r3, [r3, #2]
 8004e50:	b21b      	sxth	r3, r3
 8004e52:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004e56:	b21a      	sxth	r2, r3
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	881b      	ldrh	r3, [r3, #0]
 8004e5c:	029b      	lsls	r3, r3, #10
 8004e5e:	b21b      	sxth	r3, r3
 8004e60:	4313      	orrs	r3, r2
 8004e62:	b21b      	sxth	r3, r3
 8004e64:	86fb      	strh	r3, [r7, #54]	; 0x36
  hci_event_pckt *event_pckt;
  hci_uart_pckt *hci_hdr;

  tHciDataPacket * hciReadPacket = NULL;
 8004e66:	2300      	movs	r3, #0
 8004e68:	613b      	str	r3, [r7, #16]
  tListNode hciTempQueue;
  
  list_init_head(&hciTempQueue);
 8004e6a:	f107 0308 	add.w	r3, r7, #8
 8004e6e:	4618      	mov	r0, r3
 8004e70:	f000 f97a 	bl	8005168 <list_init_head>

  free_event_list();
 8004e74:	f7ff ff64 	bl	8004d40 <free_event_list>
  
  send_cmd(r->ogf, r->ocf, r->clen, r->cparam);
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	8818      	ldrh	r0, [r3, #0]
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	8859      	ldrh	r1, [r3, #2]
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	68db      	ldr	r3, [r3, #12]
 8004e84:	b2da      	uxtb	r2, r3
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	689b      	ldr	r3, [r3, #8]
 8004e8a:	f7ff fefd 	bl	8004c88 <send_cmd>
  
  if (async)
 8004e8e:	78fb      	ldrb	r3, [r7, #3]
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	d001      	beq.n	8004e98 <hci_send_req+0x58>
  {
    return 0;
 8004e94:	2300      	movs	r3, #0
 8004e96:	e0e5      	b.n	8005064 <hci_send_req+0x224>
    evt_cmd_complete  *cc;
    evt_cmd_status    *cs;
    evt_le_meta_event *me;
    uint32_t len;
    
    uint32_t tickstart = HAL_GetTick();
 8004e98:	f7fd f810 	bl	8001ebc <HAL_GetTick>
 8004e9c:	6338      	str	r0, [r7, #48]	; 0x30
      
    while (1)
    {
      if ((HAL_GetTick() - tickstart) > HCI_DEFAULT_TIMEOUT_MS)
 8004e9e:	f7fd f80d 	bl	8001ebc <HAL_GetTick>
 8004ea2:	4602      	mov	r2, r0
 8004ea4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ea6:	1ad3      	subs	r3, r2, r3
 8004ea8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004eac:	f200 80b6 	bhi.w	800501c <hci_send_req+0x1dc>
      {
        goto failed;
      }
      
      if (!list_is_empty(&hciReadPktRxQueue)) 
 8004eb0:	486e      	ldr	r0, [pc, #440]	; (800506c <hci_send_req+0x22c>)
 8004eb2:	f000 f969 	bl	8005188 <list_is_empty>
 8004eb6:	4603      	mov	r3, r0
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	d000      	beq.n	8004ebe <hci_send_req+0x7e>
      if ((HAL_GetTick() - tickstart) > HCI_DEFAULT_TIMEOUT_MS)
 8004ebc:	e7ef      	b.n	8004e9e <hci_send_req+0x5e>
      {
        break;
 8004ebe:	bf00      	nop
      }
    }
    
    /* Extract packet from HCI event queue. */
    list_remove_head(&hciReadPktRxQueue, (tListNode **)&hciReadPacket);    
 8004ec0:	f107 0310 	add.w	r3, r7, #16
 8004ec4:	4619      	mov	r1, r3
 8004ec6:	4869      	ldr	r0, [pc, #420]	; (800506c <hci_send_req+0x22c>)
 8004ec8:	f000 f9ed 	bl	80052a6 <list_remove_head>
    
    hci_hdr = (void *)hciReadPacket->dataBuff;
 8004ecc:	693b      	ldr	r3, [r7, #16]
 8004ece:	3308      	adds	r3, #8
 8004ed0:	62fb      	str	r3, [r7, #44]	; 0x2c

    if (hci_hdr->type == HCI_EVENT_PKT)
 8004ed2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ed4:	781b      	ldrb	r3, [r3, #0]
 8004ed6:	2b04      	cmp	r3, #4
 8004ed8:	d17b      	bne.n	8004fd2 <hci_send_req+0x192>
    {
      event_pckt = (void *)(hci_hdr->data);
 8004eda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004edc:	3301      	adds	r3, #1
 8004ede:	62bb      	str	r3, [r7, #40]	; 0x28
    
      ptr = hciReadPacket->dataBuff + (1 + HCI_EVENT_HDR_SIZE);
 8004ee0:	693b      	ldr	r3, [r7, #16]
 8004ee2:	3308      	adds	r3, #8
 8004ee4:	3303      	adds	r3, #3
 8004ee6:	627b      	str	r3, [r7, #36]	; 0x24
      len = hciReadPacket->data_len - (1 + HCI_EVENT_HDR_SIZE);
 8004ee8:	693b      	ldr	r3, [r7, #16]
 8004eea:	f893 3088 	ldrb.w	r3, [r3, #136]	; 0x88
 8004eee:	3b03      	subs	r3, #3
 8004ef0:	623b      	str	r3, [r7, #32]
    
      switch (event_pckt->evt) 
 8004ef2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ef4:	781b      	ldrb	r3, [r3, #0]
 8004ef6:	2b3e      	cmp	r3, #62	; 0x3e
 8004ef8:	d04d      	beq.n	8004f96 <hci_send_req+0x156>
 8004efa:	2b3e      	cmp	r3, #62	; 0x3e
 8004efc:	dc6b      	bgt.n	8004fd6 <hci_send_req+0x196>
 8004efe:	2b10      	cmp	r3, #16
 8004f00:	f000 808e 	beq.w	8005020 <hci_send_req+0x1e0>
 8004f04:	2b10      	cmp	r3, #16
 8004f06:	dc66      	bgt.n	8004fd6 <hci_send_req+0x196>
 8004f08:	2b0e      	cmp	r3, #14
 8004f0a:	d024      	beq.n	8004f56 <hci_send_req+0x116>
 8004f0c:	2b0f      	cmp	r3, #15
 8004f0e:	d162      	bne.n	8004fd6 <hci_send_req+0x196>
      {      
      case EVT_CMD_STATUS:
        cs = (void *) ptr;
 8004f10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f12:	61bb      	str	r3, [r7, #24]
        
        if (cs->opcode != opcode)
 8004f14:	69bb      	ldr	r3, [r7, #24]
 8004f16:	885b      	ldrh	r3, [r3, #2]
 8004f18:	b29b      	uxth	r3, r3
 8004f1a:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8004f1c:	429a      	cmp	r2, r3
 8004f1e:	f040 8081 	bne.w	8005024 <hci_send_req+0x1e4>
          goto failed;
        
        if (r->event != EVT_CMD_STATUS) {
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	685b      	ldr	r3, [r3, #4]
 8004f26:	2b0f      	cmp	r3, #15
 8004f28:	d004      	beq.n	8004f34 <hci_send_req+0xf4>
          if (cs->status) {
 8004f2a:	69bb      	ldr	r3, [r7, #24]
 8004f2c:	781b      	ldrb	r3, [r3, #0]
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d053      	beq.n	8004fda <hci_send_req+0x19a>
            goto failed;
 8004f32:	e07a      	b.n	800502a <hci_send_req+0x1ea>
          }
          break;
        }

        r->rlen = MIN(len, r->rlen);
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	695a      	ldr	r2, [r3, #20]
 8004f38:	6a3b      	ldr	r3, [r7, #32]
 8004f3a:	429a      	cmp	r2, r3
 8004f3c:	bf28      	it	cs
 8004f3e:	461a      	movcs	r2, r3
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	615a      	str	r2, [r3, #20]
        BLUENRG_memcpy(r->rparam, ptr, r->rlen);
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	6918      	ldr	r0, [r3, #16]
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	695b      	ldr	r3, [r3, #20]
 8004f4c:	461a      	mov	r2, r3
 8004f4e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004f50:	f000 fc17 	bl	8005782 <memcpy>
        goto done;
 8004f54:	e07a      	b.n	800504c <hci_send_req+0x20c>
      
      case EVT_CMD_COMPLETE:
        cc = (void *) ptr;
 8004f56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f58:	617b      	str	r3, [r7, #20]
      
        if (cc->opcode != opcode)
 8004f5a:	697b      	ldr	r3, [r7, #20]
 8004f5c:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8004f60:	b29b      	uxth	r3, r3
 8004f62:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8004f64:	429a      	cmp	r2, r3
 8004f66:	d15f      	bne.n	8005028 <hci_send_req+0x1e8>
          goto failed;
      
        ptr += EVT_CMD_COMPLETE_SIZE;
 8004f68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f6a:	3303      	adds	r3, #3
 8004f6c:	627b      	str	r3, [r7, #36]	; 0x24
        len -= EVT_CMD_COMPLETE_SIZE;
 8004f6e:	6a3b      	ldr	r3, [r7, #32]
 8004f70:	3b03      	subs	r3, #3
 8004f72:	623b      	str	r3, [r7, #32]
      
        r->rlen = MIN(len, r->rlen);
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	695a      	ldr	r2, [r3, #20]
 8004f78:	6a3b      	ldr	r3, [r7, #32]
 8004f7a:	429a      	cmp	r2, r3
 8004f7c:	bf28      	it	cs
 8004f7e:	461a      	movcs	r2, r3
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	615a      	str	r2, [r3, #20]
        BLUENRG_memcpy(r->rparam, ptr, r->rlen);
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	6918      	ldr	r0, [r3, #16]
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	695b      	ldr	r3, [r3, #20]
 8004f8c:	461a      	mov	r2, r3
 8004f8e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004f90:	f000 fbf7 	bl	8005782 <memcpy>
        goto done;
 8004f94:	e05a      	b.n	800504c <hci_send_req+0x20c>
      
      case EVT_LE_META_EVENT:
        me = (void *) ptr;
 8004f96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f98:	61fb      	str	r3, [r7, #28]
      
        if (me->subevent != r->event)
 8004f9a:	69fb      	ldr	r3, [r7, #28]
 8004f9c:	781b      	ldrb	r3, [r3, #0]
 8004f9e:	461a      	mov	r2, r3
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	685b      	ldr	r3, [r3, #4]
 8004fa4:	429a      	cmp	r2, r3
 8004fa6:	d11a      	bne.n	8004fde <hci_send_req+0x19e>
          break;
      
        len -= 1;
 8004fa8:	6a3b      	ldr	r3, [r7, #32]
 8004faa:	3b01      	subs	r3, #1
 8004fac:	623b      	str	r3, [r7, #32]
        r->rlen = MIN(len, r->rlen);
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	695a      	ldr	r2, [r3, #20]
 8004fb2:	6a3b      	ldr	r3, [r7, #32]
 8004fb4:	429a      	cmp	r2, r3
 8004fb6:	bf28      	it	cs
 8004fb8:	461a      	movcs	r2, r3
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	615a      	str	r2, [r3, #20]
        BLUENRG_memcpy(r->rparam, me->data, r->rlen);
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	6918      	ldr	r0, [r3, #16]
 8004fc2:	69fb      	ldr	r3, [r7, #28]
 8004fc4:	1c59      	adds	r1, r3, #1
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	695b      	ldr	r3, [r3, #20]
 8004fca:	461a      	mov	r2, r3
 8004fcc:	f000 fbd9 	bl	8005782 <memcpy>
        goto done;
 8004fd0:	e03c      	b.n	800504c <hci_send_req+0x20c>
        goto failed;
      
      default:      
        break;
      }
    }
 8004fd2:	bf00      	nop
 8004fd4:	e004      	b.n	8004fe0 <hci_send_req+0x1a0>
        break;
 8004fd6:	bf00      	nop
 8004fd8:	e002      	b.n	8004fe0 <hci_send_req+0x1a0>
          break;
 8004fda:	bf00      	nop
 8004fdc:	e000      	b.n	8004fe0 <hci_send_req+0x1a0>
          break;
 8004fde:	bf00      	nop
    
    /* If there are no more packets to be processed, be sure there is at list one
       packet in the pool to process the expected event.
       If no free packets are available, discard the processed event and insert it
       into the pool. */
    if (list_is_empty(&hciReadPktPool) && list_is_empty(&hciReadPktRxQueue)) {
 8004fe0:	4823      	ldr	r0, [pc, #140]	; (8005070 <hci_send_req+0x230>)
 8004fe2:	f000 f8d1 	bl	8005188 <list_is_empty>
 8004fe6:	4603      	mov	r3, r0
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	d00d      	beq.n	8005008 <hci_send_req+0x1c8>
 8004fec:	481f      	ldr	r0, [pc, #124]	; (800506c <hci_send_req+0x22c>)
 8004fee:	f000 f8cb 	bl	8005188 <list_is_empty>
 8004ff2:	4603      	mov	r3, r0
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	d007      	beq.n	8005008 <hci_send_req+0x1c8>
      list_insert_tail(&hciReadPktPool, (tListNode *)hciReadPacket);
 8004ff8:	693b      	ldr	r3, [r7, #16]
 8004ffa:	4619      	mov	r1, r3
 8004ffc:	481c      	ldr	r0, [pc, #112]	; (8005070 <hci_send_req+0x230>)
 8004ffe:	f000 f90b 	bl	8005218 <list_insert_tail>
      hciReadPacket=NULL;
 8005002:	2300      	movs	r3, #0
 8005004:	613b      	str	r3, [r7, #16]
 8005006:	e008      	b.n	800501a <hci_send_req+0x1da>
    else {
      /* Insert the packet in a different queue. These packets will be
      inserted back in the main queue just before exiting from send_req(), so that
      these events can be processed by the application.
    */
    list_insert_tail(&hciTempQueue, (tListNode *)hciReadPacket);
 8005008:	693a      	ldr	r2, [r7, #16]
 800500a:	f107 0308 	add.w	r3, r7, #8
 800500e:	4611      	mov	r1, r2
 8005010:	4618      	mov	r0, r3
 8005012:	f000 f901 	bl	8005218 <list_insert_tail>
      hciReadPacket=NULL;
 8005016:	2300      	movs	r3, #0
 8005018:	613b      	str	r3, [r7, #16]
  {
 800501a:	e73d      	b.n	8004e98 <hci_send_req+0x58>
        goto failed;
 800501c:	bf00      	nop
 800501e:	e004      	b.n	800502a <hci_send_req+0x1ea>
        goto failed;
 8005020:	bf00      	nop
 8005022:	e002      	b.n	800502a <hci_send_req+0x1ea>
          goto failed;
 8005024:	bf00      	nop
 8005026:	e000      	b.n	800502a <hci_send_req+0x1ea>
          goto failed;
 8005028:	bf00      	nop
    }
  }
  
failed: 
  if (hciReadPacket!=NULL) {
 800502a:	693b      	ldr	r3, [r7, #16]
 800502c:	2b00      	cmp	r3, #0
 800502e:	d004      	beq.n	800503a <hci_send_req+0x1fa>
    list_insert_head(&hciReadPktPool, (tListNode *)hciReadPacket);
 8005030:	693b      	ldr	r3, [r7, #16]
 8005032:	4619      	mov	r1, r3
 8005034:	480e      	ldr	r0, [pc, #56]	; (8005070 <hci_send_req+0x230>)
 8005036:	f000 f8c9 	bl	80051cc <list_insert_head>
  }
  move_list(&hciReadPktRxQueue, &hciTempQueue);
 800503a:	f107 0308 	add.w	r3, r7, #8
 800503e:	4619      	mov	r1, r3
 8005040:	480a      	ldr	r0, [pc, #40]	; (800506c <hci_send_req+0x22c>)
 8005042:	f7ff fe61 	bl	8004d08 <move_list>

  return -1;
 8005046:	f04f 33ff 	mov.w	r3, #4294967295
 800504a:	e00b      	b.n	8005064 <hci_send_req+0x224>
  
done:
  /* Insert the packet back into the pool.*/
  list_insert_head(&hciReadPktPool, (tListNode *)hciReadPacket); 
 800504c:	693b      	ldr	r3, [r7, #16]
 800504e:	4619      	mov	r1, r3
 8005050:	4807      	ldr	r0, [pc, #28]	; (8005070 <hci_send_req+0x230>)
 8005052:	f000 f8bb 	bl	80051cc <list_insert_head>
  move_list(&hciReadPktRxQueue, &hciTempQueue);
 8005056:	f107 0308 	add.w	r3, r7, #8
 800505a:	4619      	mov	r1, r3
 800505c:	4803      	ldr	r0, [pc, #12]	; (800506c <hci_send_req+0x22c>)
 800505e:	f7ff fe53 	bl	8004d08 <move_list>

  return 0;
 8005062:	2300      	movs	r3, #0
}
 8005064:	4618      	mov	r0, r3
 8005066:	3738      	adds	r7, #56	; 0x38
 8005068:	46bd      	mov	sp, r7
 800506a:	bd80      	pop	{r7, pc}
 800506c:	2000027c 	.word	0x2000027c
 8005070:	20000274 	.word	0x20000274

08005074 <hci_user_evt_proc>:

void hci_user_evt_proc(void)
{
 8005074:	b580      	push	{r7, lr}
 8005076:	b082      	sub	sp, #8
 8005078:	af00      	add	r7, sp, #0
  tHciDataPacket * hciReadPacket = NULL;
 800507a:	2300      	movs	r3, #0
 800507c:	607b      	str	r3, [r7, #4]
     
  /* process any pending events read */
  while (list_is_empty(&hciReadPktRxQueue) == FALSE)
 800507e:	e013      	b.n	80050a8 <hci_user_evt_proc+0x34>
  {
    list_remove_head (&hciReadPktRxQueue, (tListNode **)&hciReadPacket);
 8005080:	1d3b      	adds	r3, r7, #4
 8005082:	4619      	mov	r1, r3
 8005084:	480e      	ldr	r0, [pc, #56]	; (80050c0 <hci_user_evt_proc+0x4c>)
 8005086:	f000 f90e 	bl	80052a6 <list_remove_head>

    if (hciContext.UserEvtRx != NULL)
 800508a:	4b0e      	ldr	r3, [pc, #56]	; (80050c4 <hci_user_evt_proc+0x50>)
 800508c:	69db      	ldr	r3, [r3, #28]
 800508e:	2b00      	cmp	r3, #0
 8005090:	d005      	beq.n	800509e <hci_user_evt_proc+0x2a>
    {
      hciContext.UserEvtRx(hciReadPacket->dataBuff);
 8005092:	4b0c      	ldr	r3, [pc, #48]	; (80050c4 <hci_user_evt_proc+0x50>)
 8005094:	69db      	ldr	r3, [r3, #28]
 8005096:	687a      	ldr	r2, [r7, #4]
 8005098:	3208      	adds	r2, #8
 800509a:	4610      	mov	r0, r2
 800509c:	4798      	blx	r3
    }

    list_insert_tail(&hciReadPktPool, (tListNode *)hciReadPacket);
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	4619      	mov	r1, r3
 80050a2:	4809      	ldr	r0, [pc, #36]	; (80050c8 <hci_user_evt_proc+0x54>)
 80050a4:	f000 f8b8 	bl	8005218 <list_insert_tail>
  while (list_is_empty(&hciReadPktRxQueue) == FALSE)
 80050a8:	4805      	ldr	r0, [pc, #20]	; (80050c0 <hci_user_evt_proc+0x4c>)
 80050aa:	f000 f86d 	bl	8005188 <list_is_empty>
 80050ae:	4603      	mov	r3, r0
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	d0e5      	beq.n	8005080 <hci_user_evt_proc+0xc>
  }
}
 80050b4:	bf00      	nop
 80050b6:	bf00      	nop
 80050b8:	3708      	adds	r7, #8
 80050ba:	46bd      	mov	sp, r7
 80050bc:	bd80      	pop	{r7, pc}
 80050be:	bf00      	nop
 80050c0:	2000027c 	.word	0x2000027c
 80050c4:	20000540 	.word	0x20000540
 80050c8:	20000274 	.word	0x20000274

080050cc <hci_notify_asynch_evt>:

int32_t hci_notify_asynch_evt(void* pdata)
{
 80050cc:	b580      	push	{r7, lr}
 80050ce:	b086      	sub	sp, #24
 80050d0:	af00      	add	r7, sp, #0
 80050d2:	6078      	str	r0, [r7, #4]
  tHciDataPacket * hciReadPacket = NULL;
 80050d4:	2300      	movs	r3, #0
 80050d6:	60fb      	str	r3, [r7, #12]
  uint8_t data_len;
  
  int32_t ret = 0;
 80050d8:	2300      	movs	r3, #0
 80050da:	617b      	str	r3, [r7, #20]
  
  if (list_is_empty (&hciReadPktPool) == FALSE)
 80050dc:	481f      	ldr	r0, [pc, #124]	; (800515c <hci_notify_asynch_evt+0x90>)
 80050de:	f000 f853 	bl	8005188 <list_is_empty>
 80050e2:	4603      	mov	r3, r0
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	d132      	bne.n	800514e <hci_notify_asynch_evt+0x82>
  {
    /* Queuing a packet to read */
    list_remove_head (&hciReadPktPool, (tListNode **)&hciReadPacket);
 80050e8:	f107 030c 	add.w	r3, r7, #12
 80050ec:	4619      	mov	r1, r3
 80050ee:	481b      	ldr	r0, [pc, #108]	; (800515c <hci_notify_asynch_evt+0x90>)
 80050f0:	f000 f8d9 	bl	80052a6 <list_remove_head>
    
    if (hciContext.io.Receive)
 80050f4:	4b1a      	ldr	r3, [pc, #104]	; (8005160 <hci_notify_asynch_evt+0x94>)
 80050f6:	68db      	ldr	r3, [r3, #12]
 80050f8:	2b00      	cmp	r3, #0
 80050fa:	d02a      	beq.n	8005152 <hci_notify_asynch_evt+0x86>
    {
      data_len = hciContext.io.Receive(hciReadPacket->dataBuff, HCI_READ_PACKET_SIZE);
 80050fc:	4b18      	ldr	r3, [pc, #96]	; (8005160 <hci_notify_asynch_evt+0x94>)
 80050fe:	68db      	ldr	r3, [r3, #12]
 8005100:	68fa      	ldr	r2, [r7, #12]
 8005102:	3208      	adds	r2, #8
 8005104:	2180      	movs	r1, #128	; 0x80
 8005106:	4610      	mov	r0, r2
 8005108:	4798      	blx	r3
 800510a:	4603      	mov	r3, r0
 800510c:	74fb      	strb	r3, [r7, #19]
      if (data_len > 0)
 800510e:	7cfb      	ldrb	r3, [r7, #19]
 8005110:	2b00      	cmp	r3, #0
 8005112:	d016      	beq.n	8005142 <hci_notify_asynch_evt+0x76>
      {                    
        hciReadPacket->data_len = data_len;
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	7cfa      	ldrb	r2, [r7, #19]
 8005118:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
        if (verify_packet(hciReadPacket) == 0)
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	4618      	mov	r0, r3
 8005120:	f7ff fd91 	bl	8004c46 <verify_packet>
 8005124:	4603      	mov	r3, r0
 8005126:	2b00      	cmp	r3, #0
 8005128:	d105      	bne.n	8005136 <hci_notify_asynch_evt+0x6a>
          list_insert_tail(&hciReadPktRxQueue, (tListNode *)hciReadPacket);
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	4619      	mov	r1, r3
 800512e:	480d      	ldr	r0, [pc, #52]	; (8005164 <hci_notify_asynch_evt+0x98>)
 8005130:	f000 f872 	bl	8005218 <list_insert_tail>
 8005134:	e00d      	b.n	8005152 <hci_notify_asynch_evt+0x86>
        else
          list_insert_head(&hciReadPktPool, (tListNode *)hciReadPacket);          
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	4619      	mov	r1, r3
 800513a:	4808      	ldr	r0, [pc, #32]	; (800515c <hci_notify_asynch_evt+0x90>)
 800513c:	f000 f846 	bl	80051cc <list_insert_head>
 8005140:	e007      	b.n	8005152 <hci_notify_asynch_evt+0x86>
      }
      else 
      {
        /* Insert the packet back into the pool*/
        list_insert_head(&hciReadPktPool, (tListNode *)hciReadPacket);
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	4619      	mov	r1, r3
 8005146:	4805      	ldr	r0, [pc, #20]	; (800515c <hci_notify_asynch_evt+0x90>)
 8005148:	f000 f840 	bl	80051cc <list_insert_head>
 800514c:	e001      	b.n	8005152 <hci_notify_asynch_evt+0x86>
      }
    }
  }
  else 
  {
    ret = 1;
 800514e:	2301      	movs	r3, #1
 8005150:	617b      	str	r3, [r7, #20]
  }
  return ret;
 8005152:	697b      	ldr	r3, [r7, #20]

}
 8005154:	4618      	mov	r0, r3
 8005156:	3718      	adds	r7, #24
 8005158:	46bd      	mov	sp, r7
 800515a:	bd80      	pop	{r7, pc}
 800515c:	20000274 	.word	0x20000274
 8005160:	20000540 	.word	0x20000540
 8005164:	2000027c 	.word	0x2000027c

08005168 <list_init_head>:

/******************************************************************************
 * Function Definitions 
******************************************************************************/
void list_init_head (tListNode * listHead)
{
 8005168:	b480      	push	{r7}
 800516a:	b083      	sub	sp, #12
 800516c:	af00      	add	r7, sp, #0
 800516e:	6078      	str	r0, [r7, #4]
  listHead->next = listHead;
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	687a      	ldr	r2, [r7, #4]
 8005174:	601a      	str	r2, [r3, #0]
  listHead->prev = listHead;	
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	687a      	ldr	r2, [r7, #4]
 800517a:	605a      	str	r2, [r3, #4]
}
 800517c:	bf00      	nop
 800517e:	370c      	adds	r7, #12
 8005180:	46bd      	mov	sp, r7
 8005182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005186:	4770      	bx	lr

08005188 <list_is_empty>:

uint8_t list_is_empty (tListNode * listHead)
{
 8005188:	b480      	push	{r7}
 800518a:	b087      	sub	sp, #28
 800518c:	af00      	add	r7, sp, #0
 800518e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005190:	f3ef 8310 	mrs	r3, PRIMASK
 8005194:	60fb      	str	r3, [r7, #12]
  return(result);
 8005196:	68fb      	ldr	r3, [r7, #12]
  uint8_t return_value;
  
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8005198:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 800519a:	b672      	cpsid	i
}
 800519c:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
   
  if(listHead->next == listHead)
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	687a      	ldr	r2, [r7, #4]
 80051a4:	429a      	cmp	r2, r3
 80051a6:	d102      	bne.n	80051ae <list_is_empty+0x26>
  {
    return_value = 1;
 80051a8:	2301      	movs	r3, #1
 80051aa:	75fb      	strb	r3, [r7, #23]
 80051ac:	e001      	b.n	80051b2 <list_is_empty+0x2a>
  }
  else
  {
    return_value = 0;
 80051ae:	2300      	movs	r3, #0
 80051b0:	75fb      	strb	r3, [r7, #23]
 80051b2:	693b      	ldr	r3, [r7, #16]
 80051b4:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80051b6:	68bb      	ldr	r3, [r7, #8]
 80051b8:	f383 8810 	msr	PRIMASK, r3
}
 80051bc:	bf00      	nop
  }
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
  
  return return_value;
 80051be:	7dfb      	ldrb	r3, [r7, #23]
}
 80051c0:	4618      	mov	r0, r3
 80051c2:	371c      	adds	r7, #28
 80051c4:	46bd      	mov	sp, r7
 80051c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ca:	4770      	bx	lr

080051cc <list_insert_head>:

void list_insert_head (tListNode * listHead, tListNode * node)
{
 80051cc:	b480      	push	{r7}
 80051ce:	b087      	sub	sp, #28
 80051d0:	af00      	add	r7, sp, #0
 80051d2:	6078      	str	r0, [r7, #4]
 80051d4:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80051d6:	f3ef 8310 	mrs	r3, PRIMASK
 80051da:	60fb      	str	r3, [r7, #12]
  return(result);
 80051dc:	68fb      	ldr	r3, [r7, #12]
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 80051de:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80051e0:	b672      	cpsid	i
}
 80051e2:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  
  node->next = listHead->next;
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	681a      	ldr	r2, [r3, #0]
 80051e8:	683b      	ldr	r3, [r7, #0]
 80051ea:	601a      	str	r2, [r3, #0]
  node->prev = listHead;
 80051ec:	683b      	ldr	r3, [r7, #0]
 80051ee:	687a      	ldr	r2, [r7, #4]
 80051f0:	605a      	str	r2, [r3, #4]
  listHead->next = node;
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	683a      	ldr	r2, [r7, #0]
 80051f6:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node;
 80051f8:	683b      	ldr	r3, [r7, #0]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	683a      	ldr	r2, [r7, #0]
 80051fe:	605a      	str	r2, [r3, #4]
 8005200:	697b      	ldr	r3, [r7, #20]
 8005202:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005204:	693b      	ldr	r3, [r7, #16]
 8005206:	f383 8810 	msr	PRIMASK, r3
}
 800520a:	bf00      	nop
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}
 800520c:	bf00      	nop
 800520e:	371c      	adds	r7, #28
 8005210:	46bd      	mov	sp, r7
 8005212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005216:	4770      	bx	lr

08005218 <list_insert_tail>:

void list_insert_tail (tListNode * listHead, tListNode * node)
{
 8005218:	b480      	push	{r7}
 800521a:	b087      	sub	sp, #28
 800521c:	af00      	add	r7, sp, #0
 800521e:	6078      	str	r0, [r7, #4]
 8005220:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005222:	f3ef 8310 	mrs	r3, PRIMASK
 8005226:	60fb      	str	r3, [r7, #12]
  return(result);
 8005228:	68fb      	ldr	r3, [r7, #12]
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800522a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800522c:	b672      	cpsid	i
}
 800522e:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  
  node->next = listHead;
 8005230:	683b      	ldr	r3, [r7, #0]
 8005232:	687a      	ldr	r2, [r7, #4]
 8005234:	601a      	str	r2, [r3, #0]
  node->prev = listHead->prev;
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	685a      	ldr	r2, [r3, #4]
 800523a:	683b      	ldr	r3, [r7, #0]
 800523c:	605a      	str	r2, [r3, #4]
  listHead->prev = node;
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	683a      	ldr	r2, [r7, #0]
 8005242:	605a      	str	r2, [r3, #4]
  (node->prev)->next = node;
 8005244:	683b      	ldr	r3, [r7, #0]
 8005246:	685b      	ldr	r3, [r3, #4]
 8005248:	683a      	ldr	r2, [r7, #0]
 800524a:	601a      	str	r2, [r3, #0]
 800524c:	697b      	ldr	r3, [r7, #20]
 800524e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005250:	693b      	ldr	r3, [r7, #16]
 8005252:	f383 8810 	msr	PRIMASK, r3
}
 8005256:	bf00      	nop
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}
 8005258:	bf00      	nop
 800525a:	371c      	adds	r7, #28
 800525c:	46bd      	mov	sp, r7
 800525e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005262:	4770      	bx	lr

08005264 <list_remove_node>:

void list_remove_node (tListNode * node)
{
 8005264:	b480      	push	{r7}
 8005266:	b087      	sub	sp, #28
 8005268:	af00      	add	r7, sp, #0
 800526a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800526c:	f3ef 8310 	mrs	r3, PRIMASK
 8005270:	60fb      	str	r3, [r7, #12]
  return(result);
 8005272:	68fb      	ldr	r3, [r7, #12]
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8005274:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8005276:	b672      	cpsid	i
}
 8005278:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  
  (node->prev)->next = node->next;
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	685b      	ldr	r3, [r3, #4]
 800527e:	687a      	ldr	r2, [r7, #4]
 8005280:	6812      	ldr	r2, [r2, #0]
 8005282:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node->prev;
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	687a      	ldr	r2, [r7, #4]
 800528a:	6852      	ldr	r2, [r2, #4]
 800528c:	605a      	str	r2, [r3, #4]
 800528e:	697b      	ldr	r3, [r7, #20]
 8005290:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005292:	693b      	ldr	r3, [r7, #16]
 8005294:	f383 8810 	msr	PRIMASK, r3
}
 8005298:	bf00      	nop
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}
 800529a:	bf00      	nop
 800529c:	371c      	adds	r7, #28
 800529e:	46bd      	mov	sp, r7
 80052a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052a4:	4770      	bx	lr

080052a6 <list_remove_head>:

void list_remove_head (tListNode * listHead, tListNode ** node )
{
 80052a6:	b580      	push	{r7, lr}
 80052a8:	b086      	sub	sp, #24
 80052aa:	af00      	add	r7, sp, #0
 80052ac:	6078      	str	r0, [r7, #4]
 80052ae:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80052b0:	f3ef 8310 	mrs	r3, PRIMASK
 80052b4:	60fb      	str	r3, [r7, #12]
  return(result);
 80052b6:	68fb      	ldr	r3, [r7, #12]
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 80052b8:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80052ba:	b672      	cpsid	i
}
 80052bc:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  
  *node = listHead->next;
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	681a      	ldr	r2, [r3, #0]
 80052c2:	683b      	ldr	r3, [r7, #0]
 80052c4:	601a      	str	r2, [r3, #0]
  list_remove_node (listHead->next);
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	4618      	mov	r0, r3
 80052cc:	f7ff ffca 	bl	8005264 <list_remove_node>
  (*node)->next = NULL;
 80052d0:	683b      	ldr	r3, [r7, #0]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	2200      	movs	r2, #0
 80052d6:	601a      	str	r2, [r3, #0]
  (*node)->prev = NULL;
 80052d8:	683b      	ldr	r3, [r7, #0]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	2200      	movs	r2, #0
 80052de:	605a      	str	r2, [r3, #4]
 80052e0:	697b      	ldr	r3, [r7, #20]
 80052e2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80052e4:	693b      	ldr	r3, [r7, #16]
 80052e6:	f383 8810 	msr	PRIMASK, r3
}
 80052ea:	bf00      	nop
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}
 80052ec:	bf00      	nop
 80052ee:	3718      	adds	r7, #24
 80052f0:	46bd      	mov	sp, r7
 80052f2:	bd80      	pop	{r7, pc}

080052f4 <list_remove_tail>:

void list_remove_tail (tListNode * listHead, tListNode ** node )
{
 80052f4:	b580      	push	{r7, lr}
 80052f6:	b086      	sub	sp, #24
 80052f8:	af00      	add	r7, sp, #0
 80052fa:	6078      	str	r0, [r7, #4]
 80052fc:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80052fe:	f3ef 8310 	mrs	r3, PRIMASK
 8005302:	60fb      	str	r3, [r7, #12]
  return(result);
 8005304:	68fb      	ldr	r3, [r7, #12]
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8005306:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8005308:	b672      	cpsid	i
}
 800530a:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  
  *node = listHead->prev;
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	685a      	ldr	r2, [r3, #4]
 8005310:	683b      	ldr	r3, [r7, #0]
 8005312:	601a      	str	r2, [r3, #0]
  list_remove_node (listHead->prev);
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	685b      	ldr	r3, [r3, #4]
 8005318:	4618      	mov	r0, r3
 800531a:	f7ff ffa3 	bl	8005264 <list_remove_node>
  (*node)->next = NULL;
 800531e:	683b      	ldr	r3, [r7, #0]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	2200      	movs	r2, #0
 8005324:	601a      	str	r2, [r3, #0]
  (*node)->prev = NULL;
 8005326:	683b      	ldr	r3, [r7, #0]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	2200      	movs	r2, #0
 800532c:	605a      	str	r2, [r3, #4]
 800532e:	697b      	ldr	r3, [r7, #20]
 8005330:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005332:	693b      	ldr	r3, [r7, #16]
 8005334:	f383 8810 	msr	PRIMASK, r3
}
 8005338:	bf00      	nop
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}
 800533a:	bf00      	nop
 800533c:	3718      	adds	r7, #24
 800533e:	46bd      	mov	sp, r7
 8005340:	bd80      	pop	{r7, pc}

08005342 <list_get_size>:
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}

int list_get_size (tListNode * listHead)
{
 8005342:	b480      	push	{r7}
 8005344:	b089      	sub	sp, #36	; 0x24
 8005346:	af00      	add	r7, sp, #0
 8005348:	6078      	str	r0, [r7, #4]
  int size = 0;
 800534a:	2300      	movs	r3, #0
 800534c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800534e:	f3ef 8310 	mrs	r3, PRIMASK
 8005352:	613b      	str	r3, [r7, #16]
  return(result);
 8005354:	693b      	ldr	r3, [r7, #16]
  tListNode * temp;

  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8005356:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8005358:	b672      	cpsid	i
}
 800535a:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  temp = listHead->next;
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	61bb      	str	r3, [r7, #24]
  while (temp != listHead)
 8005362:	e005      	b.n	8005370 <list_get_size+0x2e>
  {
    size++;
 8005364:	69fb      	ldr	r3, [r7, #28]
 8005366:	3301      	adds	r3, #1
 8005368:	61fb      	str	r3, [r7, #28]
    temp = temp->next;		
 800536a:	69bb      	ldr	r3, [r7, #24]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	61bb      	str	r3, [r7, #24]
  while (temp != listHead)
 8005370:	69ba      	ldr	r2, [r7, #24]
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	429a      	cmp	r2, r3
 8005376:	d1f5      	bne.n	8005364 <list_get_size+0x22>
 8005378:	697b      	ldr	r3, [r7, #20]
 800537a:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	f383 8810 	msr	PRIMASK, r3
}
 8005382:	bf00      	nop
  }
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
  
  return (size);
 8005384:	69fb      	ldr	r3, [r7, #28]
}
 8005386:	4618      	mov	r0, r3
 8005388:	3724      	adds	r7, #36	; 0x24
 800538a:	46bd      	mov	sp, r7
 800538c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005390:	4770      	bx	lr
	...

08005394 <__errno>:
 8005394:	4b01      	ldr	r3, [pc, #4]	; (800539c <__errno+0x8>)
 8005396:	6818      	ldr	r0, [r3, #0]
 8005398:	4770      	bx	lr
 800539a:	bf00      	nop
 800539c:	20000024 	.word	0x20000024

080053a0 <__sflush_r>:
 80053a0:	898a      	ldrh	r2, [r1, #12]
 80053a2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80053a6:	4605      	mov	r5, r0
 80053a8:	0710      	lsls	r0, r2, #28
 80053aa:	460c      	mov	r4, r1
 80053ac:	d458      	bmi.n	8005460 <__sflush_r+0xc0>
 80053ae:	684b      	ldr	r3, [r1, #4]
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	dc05      	bgt.n	80053c0 <__sflush_r+0x20>
 80053b4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	dc02      	bgt.n	80053c0 <__sflush_r+0x20>
 80053ba:	2000      	movs	r0, #0
 80053bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80053c0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80053c2:	2e00      	cmp	r6, #0
 80053c4:	d0f9      	beq.n	80053ba <__sflush_r+0x1a>
 80053c6:	2300      	movs	r3, #0
 80053c8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80053cc:	682f      	ldr	r7, [r5, #0]
 80053ce:	602b      	str	r3, [r5, #0]
 80053d0:	d032      	beq.n	8005438 <__sflush_r+0x98>
 80053d2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80053d4:	89a3      	ldrh	r3, [r4, #12]
 80053d6:	075a      	lsls	r2, r3, #29
 80053d8:	d505      	bpl.n	80053e6 <__sflush_r+0x46>
 80053da:	6863      	ldr	r3, [r4, #4]
 80053dc:	1ac0      	subs	r0, r0, r3
 80053de:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80053e0:	b10b      	cbz	r3, 80053e6 <__sflush_r+0x46>
 80053e2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80053e4:	1ac0      	subs	r0, r0, r3
 80053e6:	2300      	movs	r3, #0
 80053e8:	4602      	mov	r2, r0
 80053ea:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80053ec:	6a21      	ldr	r1, [r4, #32]
 80053ee:	4628      	mov	r0, r5
 80053f0:	47b0      	blx	r6
 80053f2:	1c43      	adds	r3, r0, #1
 80053f4:	89a3      	ldrh	r3, [r4, #12]
 80053f6:	d106      	bne.n	8005406 <__sflush_r+0x66>
 80053f8:	6829      	ldr	r1, [r5, #0]
 80053fa:	291d      	cmp	r1, #29
 80053fc:	d82c      	bhi.n	8005458 <__sflush_r+0xb8>
 80053fe:	4a2a      	ldr	r2, [pc, #168]	; (80054a8 <__sflush_r+0x108>)
 8005400:	40ca      	lsrs	r2, r1
 8005402:	07d6      	lsls	r6, r2, #31
 8005404:	d528      	bpl.n	8005458 <__sflush_r+0xb8>
 8005406:	2200      	movs	r2, #0
 8005408:	6062      	str	r2, [r4, #4]
 800540a:	04d9      	lsls	r1, r3, #19
 800540c:	6922      	ldr	r2, [r4, #16]
 800540e:	6022      	str	r2, [r4, #0]
 8005410:	d504      	bpl.n	800541c <__sflush_r+0x7c>
 8005412:	1c42      	adds	r2, r0, #1
 8005414:	d101      	bne.n	800541a <__sflush_r+0x7a>
 8005416:	682b      	ldr	r3, [r5, #0]
 8005418:	b903      	cbnz	r3, 800541c <__sflush_r+0x7c>
 800541a:	6560      	str	r0, [r4, #84]	; 0x54
 800541c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800541e:	602f      	str	r7, [r5, #0]
 8005420:	2900      	cmp	r1, #0
 8005422:	d0ca      	beq.n	80053ba <__sflush_r+0x1a>
 8005424:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005428:	4299      	cmp	r1, r3
 800542a:	d002      	beq.n	8005432 <__sflush_r+0x92>
 800542c:	4628      	mov	r0, r5
 800542e:	f000 f9bf 	bl	80057b0 <_free_r>
 8005432:	2000      	movs	r0, #0
 8005434:	6360      	str	r0, [r4, #52]	; 0x34
 8005436:	e7c1      	b.n	80053bc <__sflush_r+0x1c>
 8005438:	6a21      	ldr	r1, [r4, #32]
 800543a:	2301      	movs	r3, #1
 800543c:	4628      	mov	r0, r5
 800543e:	47b0      	blx	r6
 8005440:	1c41      	adds	r1, r0, #1
 8005442:	d1c7      	bne.n	80053d4 <__sflush_r+0x34>
 8005444:	682b      	ldr	r3, [r5, #0]
 8005446:	2b00      	cmp	r3, #0
 8005448:	d0c4      	beq.n	80053d4 <__sflush_r+0x34>
 800544a:	2b1d      	cmp	r3, #29
 800544c:	d001      	beq.n	8005452 <__sflush_r+0xb2>
 800544e:	2b16      	cmp	r3, #22
 8005450:	d101      	bne.n	8005456 <__sflush_r+0xb6>
 8005452:	602f      	str	r7, [r5, #0]
 8005454:	e7b1      	b.n	80053ba <__sflush_r+0x1a>
 8005456:	89a3      	ldrh	r3, [r4, #12]
 8005458:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800545c:	81a3      	strh	r3, [r4, #12]
 800545e:	e7ad      	b.n	80053bc <__sflush_r+0x1c>
 8005460:	690f      	ldr	r7, [r1, #16]
 8005462:	2f00      	cmp	r7, #0
 8005464:	d0a9      	beq.n	80053ba <__sflush_r+0x1a>
 8005466:	0793      	lsls	r3, r2, #30
 8005468:	680e      	ldr	r6, [r1, #0]
 800546a:	bf08      	it	eq
 800546c:	694b      	ldreq	r3, [r1, #20]
 800546e:	600f      	str	r7, [r1, #0]
 8005470:	bf18      	it	ne
 8005472:	2300      	movne	r3, #0
 8005474:	eba6 0807 	sub.w	r8, r6, r7
 8005478:	608b      	str	r3, [r1, #8]
 800547a:	f1b8 0f00 	cmp.w	r8, #0
 800547e:	dd9c      	ble.n	80053ba <__sflush_r+0x1a>
 8005480:	6a21      	ldr	r1, [r4, #32]
 8005482:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8005484:	4643      	mov	r3, r8
 8005486:	463a      	mov	r2, r7
 8005488:	4628      	mov	r0, r5
 800548a:	47b0      	blx	r6
 800548c:	2800      	cmp	r0, #0
 800548e:	dc06      	bgt.n	800549e <__sflush_r+0xfe>
 8005490:	89a3      	ldrh	r3, [r4, #12]
 8005492:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005496:	81a3      	strh	r3, [r4, #12]
 8005498:	f04f 30ff 	mov.w	r0, #4294967295
 800549c:	e78e      	b.n	80053bc <__sflush_r+0x1c>
 800549e:	4407      	add	r7, r0
 80054a0:	eba8 0800 	sub.w	r8, r8, r0
 80054a4:	e7e9      	b.n	800547a <__sflush_r+0xda>
 80054a6:	bf00      	nop
 80054a8:	20400001 	.word	0x20400001

080054ac <_fflush_r>:
 80054ac:	b538      	push	{r3, r4, r5, lr}
 80054ae:	690b      	ldr	r3, [r1, #16]
 80054b0:	4605      	mov	r5, r0
 80054b2:	460c      	mov	r4, r1
 80054b4:	b913      	cbnz	r3, 80054bc <_fflush_r+0x10>
 80054b6:	2500      	movs	r5, #0
 80054b8:	4628      	mov	r0, r5
 80054ba:	bd38      	pop	{r3, r4, r5, pc}
 80054bc:	b118      	cbz	r0, 80054c6 <_fflush_r+0x1a>
 80054be:	6983      	ldr	r3, [r0, #24]
 80054c0:	b90b      	cbnz	r3, 80054c6 <_fflush_r+0x1a>
 80054c2:	f000 f899 	bl	80055f8 <__sinit>
 80054c6:	4b14      	ldr	r3, [pc, #80]	; (8005518 <_fflush_r+0x6c>)
 80054c8:	429c      	cmp	r4, r3
 80054ca:	d11b      	bne.n	8005504 <_fflush_r+0x58>
 80054cc:	686c      	ldr	r4, [r5, #4]
 80054ce:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	d0ef      	beq.n	80054b6 <_fflush_r+0xa>
 80054d6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80054d8:	07d0      	lsls	r0, r2, #31
 80054da:	d404      	bmi.n	80054e6 <_fflush_r+0x3a>
 80054dc:	0599      	lsls	r1, r3, #22
 80054de:	d402      	bmi.n	80054e6 <_fflush_r+0x3a>
 80054e0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80054e2:	f000 f94c 	bl	800577e <__retarget_lock_acquire_recursive>
 80054e6:	4628      	mov	r0, r5
 80054e8:	4621      	mov	r1, r4
 80054ea:	f7ff ff59 	bl	80053a0 <__sflush_r>
 80054ee:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80054f0:	07da      	lsls	r2, r3, #31
 80054f2:	4605      	mov	r5, r0
 80054f4:	d4e0      	bmi.n	80054b8 <_fflush_r+0xc>
 80054f6:	89a3      	ldrh	r3, [r4, #12]
 80054f8:	059b      	lsls	r3, r3, #22
 80054fa:	d4dd      	bmi.n	80054b8 <_fflush_r+0xc>
 80054fc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80054fe:	f000 f93f 	bl	8005780 <__retarget_lock_release_recursive>
 8005502:	e7d9      	b.n	80054b8 <_fflush_r+0xc>
 8005504:	4b05      	ldr	r3, [pc, #20]	; (800551c <_fflush_r+0x70>)
 8005506:	429c      	cmp	r4, r3
 8005508:	d101      	bne.n	800550e <_fflush_r+0x62>
 800550a:	68ac      	ldr	r4, [r5, #8]
 800550c:	e7df      	b.n	80054ce <_fflush_r+0x22>
 800550e:	4b04      	ldr	r3, [pc, #16]	; (8005520 <_fflush_r+0x74>)
 8005510:	429c      	cmp	r4, r3
 8005512:	bf08      	it	eq
 8005514:	68ec      	ldreq	r4, [r5, #12]
 8005516:	e7da      	b.n	80054ce <_fflush_r+0x22>
 8005518:	08006774 	.word	0x08006774
 800551c:	08006794 	.word	0x08006794
 8005520:	08006754 	.word	0x08006754

08005524 <fflush>:
 8005524:	4601      	mov	r1, r0
 8005526:	b920      	cbnz	r0, 8005532 <fflush+0xe>
 8005528:	4b04      	ldr	r3, [pc, #16]	; (800553c <fflush+0x18>)
 800552a:	4905      	ldr	r1, [pc, #20]	; (8005540 <fflush+0x1c>)
 800552c:	6818      	ldr	r0, [r3, #0]
 800552e:	f000 b8e1 	b.w	80056f4 <_fwalk_reent>
 8005532:	4b04      	ldr	r3, [pc, #16]	; (8005544 <fflush+0x20>)
 8005534:	6818      	ldr	r0, [r3, #0]
 8005536:	f7ff bfb9 	b.w	80054ac <_fflush_r>
 800553a:	bf00      	nop
 800553c:	080067b4 	.word	0x080067b4
 8005540:	080054ad 	.word	0x080054ad
 8005544:	20000024 	.word	0x20000024

08005548 <std>:
 8005548:	2300      	movs	r3, #0
 800554a:	b510      	push	{r4, lr}
 800554c:	4604      	mov	r4, r0
 800554e:	e9c0 3300 	strd	r3, r3, [r0]
 8005552:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005556:	6083      	str	r3, [r0, #8]
 8005558:	8181      	strh	r1, [r0, #12]
 800555a:	6643      	str	r3, [r0, #100]	; 0x64
 800555c:	81c2      	strh	r2, [r0, #14]
 800555e:	6183      	str	r3, [r0, #24]
 8005560:	4619      	mov	r1, r3
 8005562:	2208      	movs	r2, #8
 8005564:	305c      	adds	r0, #92	; 0x5c
 8005566:	f000 f91a 	bl	800579e <memset>
 800556a:	4b05      	ldr	r3, [pc, #20]	; (8005580 <std+0x38>)
 800556c:	6263      	str	r3, [r4, #36]	; 0x24
 800556e:	4b05      	ldr	r3, [pc, #20]	; (8005584 <std+0x3c>)
 8005570:	62a3      	str	r3, [r4, #40]	; 0x28
 8005572:	4b05      	ldr	r3, [pc, #20]	; (8005588 <std+0x40>)
 8005574:	62e3      	str	r3, [r4, #44]	; 0x2c
 8005576:	4b05      	ldr	r3, [pc, #20]	; (800558c <std+0x44>)
 8005578:	6224      	str	r4, [r4, #32]
 800557a:	6323      	str	r3, [r4, #48]	; 0x30
 800557c:	bd10      	pop	{r4, pc}
 800557e:	bf00      	nop
 8005580:	08005ad9 	.word	0x08005ad9
 8005584:	08005afb 	.word	0x08005afb
 8005588:	08005b33 	.word	0x08005b33
 800558c:	08005b57 	.word	0x08005b57

08005590 <_cleanup_r>:
 8005590:	4901      	ldr	r1, [pc, #4]	; (8005598 <_cleanup_r+0x8>)
 8005592:	f000 b8af 	b.w	80056f4 <_fwalk_reent>
 8005596:	bf00      	nop
 8005598:	080054ad 	.word	0x080054ad

0800559c <__sfmoreglue>:
 800559c:	b570      	push	{r4, r5, r6, lr}
 800559e:	2268      	movs	r2, #104	; 0x68
 80055a0:	1e4d      	subs	r5, r1, #1
 80055a2:	4355      	muls	r5, r2
 80055a4:	460e      	mov	r6, r1
 80055a6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80055aa:	f000 f96d 	bl	8005888 <_malloc_r>
 80055ae:	4604      	mov	r4, r0
 80055b0:	b140      	cbz	r0, 80055c4 <__sfmoreglue+0x28>
 80055b2:	2100      	movs	r1, #0
 80055b4:	e9c0 1600 	strd	r1, r6, [r0]
 80055b8:	300c      	adds	r0, #12
 80055ba:	60a0      	str	r0, [r4, #8]
 80055bc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80055c0:	f000 f8ed 	bl	800579e <memset>
 80055c4:	4620      	mov	r0, r4
 80055c6:	bd70      	pop	{r4, r5, r6, pc}

080055c8 <__sfp_lock_acquire>:
 80055c8:	4801      	ldr	r0, [pc, #4]	; (80055d0 <__sfp_lock_acquire+0x8>)
 80055ca:	f000 b8d8 	b.w	800577e <__retarget_lock_acquire_recursive>
 80055ce:	bf00      	nop
 80055d0:	20000561 	.word	0x20000561

080055d4 <__sfp_lock_release>:
 80055d4:	4801      	ldr	r0, [pc, #4]	; (80055dc <__sfp_lock_release+0x8>)
 80055d6:	f000 b8d3 	b.w	8005780 <__retarget_lock_release_recursive>
 80055da:	bf00      	nop
 80055dc:	20000561 	.word	0x20000561

080055e0 <__sinit_lock_acquire>:
 80055e0:	4801      	ldr	r0, [pc, #4]	; (80055e8 <__sinit_lock_acquire+0x8>)
 80055e2:	f000 b8cc 	b.w	800577e <__retarget_lock_acquire_recursive>
 80055e6:	bf00      	nop
 80055e8:	20000562 	.word	0x20000562

080055ec <__sinit_lock_release>:
 80055ec:	4801      	ldr	r0, [pc, #4]	; (80055f4 <__sinit_lock_release+0x8>)
 80055ee:	f000 b8c7 	b.w	8005780 <__retarget_lock_release_recursive>
 80055f2:	bf00      	nop
 80055f4:	20000562 	.word	0x20000562

080055f8 <__sinit>:
 80055f8:	b510      	push	{r4, lr}
 80055fa:	4604      	mov	r4, r0
 80055fc:	f7ff fff0 	bl	80055e0 <__sinit_lock_acquire>
 8005600:	69a3      	ldr	r3, [r4, #24]
 8005602:	b11b      	cbz	r3, 800560c <__sinit+0x14>
 8005604:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005608:	f7ff bff0 	b.w	80055ec <__sinit_lock_release>
 800560c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8005610:	6523      	str	r3, [r4, #80]	; 0x50
 8005612:	4b13      	ldr	r3, [pc, #76]	; (8005660 <__sinit+0x68>)
 8005614:	4a13      	ldr	r2, [pc, #76]	; (8005664 <__sinit+0x6c>)
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	62a2      	str	r2, [r4, #40]	; 0x28
 800561a:	42a3      	cmp	r3, r4
 800561c:	bf04      	itt	eq
 800561e:	2301      	moveq	r3, #1
 8005620:	61a3      	streq	r3, [r4, #24]
 8005622:	4620      	mov	r0, r4
 8005624:	f000 f820 	bl	8005668 <__sfp>
 8005628:	6060      	str	r0, [r4, #4]
 800562a:	4620      	mov	r0, r4
 800562c:	f000 f81c 	bl	8005668 <__sfp>
 8005630:	60a0      	str	r0, [r4, #8]
 8005632:	4620      	mov	r0, r4
 8005634:	f000 f818 	bl	8005668 <__sfp>
 8005638:	2200      	movs	r2, #0
 800563a:	60e0      	str	r0, [r4, #12]
 800563c:	2104      	movs	r1, #4
 800563e:	6860      	ldr	r0, [r4, #4]
 8005640:	f7ff ff82 	bl	8005548 <std>
 8005644:	68a0      	ldr	r0, [r4, #8]
 8005646:	2201      	movs	r2, #1
 8005648:	2109      	movs	r1, #9
 800564a:	f7ff ff7d 	bl	8005548 <std>
 800564e:	68e0      	ldr	r0, [r4, #12]
 8005650:	2202      	movs	r2, #2
 8005652:	2112      	movs	r1, #18
 8005654:	f7ff ff78 	bl	8005548 <std>
 8005658:	2301      	movs	r3, #1
 800565a:	61a3      	str	r3, [r4, #24]
 800565c:	e7d2      	b.n	8005604 <__sinit+0xc>
 800565e:	bf00      	nop
 8005660:	080067b4 	.word	0x080067b4
 8005664:	08005591 	.word	0x08005591

08005668 <__sfp>:
 8005668:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800566a:	4607      	mov	r7, r0
 800566c:	f7ff ffac 	bl	80055c8 <__sfp_lock_acquire>
 8005670:	4b1e      	ldr	r3, [pc, #120]	; (80056ec <__sfp+0x84>)
 8005672:	681e      	ldr	r6, [r3, #0]
 8005674:	69b3      	ldr	r3, [r6, #24]
 8005676:	b913      	cbnz	r3, 800567e <__sfp+0x16>
 8005678:	4630      	mov	r0, r6
 800567a:	f7ff ffbd 	bl	80055f8 <__sinit>
 800567e:	3648      	adds	r6, #72	; 0x48
 8005680:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8005684:	3b01      	subs	r3, #1
 8005686:	d503      	bpl.n	8005690 <__sfp+0x28>
 8005688:	6833      	ldr	r3, [r6, #0]
 800568a:	b30b      	cbz	r3, 80056d0 <__sfp+0x68>
 800568c:	6836      	ldr	r6, [r6, #0]
 800568e:	e7f7      	b.n	8005680 <__sfp+0x18>
 8005690:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8005694:	b9d5      	cbnz	r5, 80056cc <__sfp+0x64>
 8005696:	4b16      	ldr	r3, [pc, #88]	; (80056f0 <__sfp+0x88>)
 8005698:	60e3      	str	r3, [r4, #12]
 800569a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800569e:	6665      	str	r5, [r4, #100]	; 0x64
 80056a0:	f000 f86c 	bl	800577c <__retarget_lock_init_recursive>
 80056a4:	f7ff ff96 	bl	80055d4 <__sfp_lock_release>
 80056a8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80056ac:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80056b0:	6025      	str	r5, [r4, #0]
 80056b2:	61a5      	str	r5, [r4, #24]
 80056b4:	2208      	movs	r2, #8
 80056b6:	4629      	mov	r1, r5
 80056b8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80056bc:	f000 f86f 	bl	800579e <memset>
 80056c0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80056c4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80056c8:	4620      	mov	r0, r4
 80056ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80056cc:	3468      	adds	r4, #104	; 0x68
 80056ce:	e7d9      	b.n	8005684 <__sfp+0x1c>
 80056d0:	2104      	movs	r1, #4
 80056d2:	4638      	mov	r0, r7
 80056d4:	f7ff ff62 	bl	800559c <__sfmoreglue>
 80056d8:	4604      	mov	r4, r0
 80056da:	6030      	str	r0, [r6, #0]
 80056dc:	2800      	cmp	r0, #0
 80056de:	d1d5      	bne.n	800568c <__sfp+0x24>
 80056e0:	f7ff ff78 	bl	80055d4 <__sfp_lock_release>
 80056e4:	230c      	movs	r3, #12
 80056e6:	603b      	str	r3, [r7, #0]
 80056e8:	e7ee      	b.n	80056c8 <__sfp+0x60>
 80056ea:	bf00      	nop
 80056ec:	080067b4 	.word	0x080067b4
 80056f0:	ffff0001 	.word	0xffff0001

080056f4 <_fwalk_reent>:
 80056f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80056f8:	4606      	mov	r6, r0
 80056fa:	4688      	mov	r8, r1
 80056fc:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8005700:	2700      	movs	r7, #0
 8005702:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005706:	f1b9 0901 	subs.w	r9, r9, #1
 800570a:	d505      	bpl.n	8005718 <_fwalk_reent+0x24>
 800570c:	6824      	ldr	r4, [r4, #0]
 800570e:	2c00      	cmp	r4, #0
 8005710:	d1f7      	bne.n	8005702 <_fwalk_reent+0xe>
 8005712:	4638      	mov	r0, r7
 8005714:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005718:	89ab      	ldrh	r3, [r5, #12]
 800571a:	2b01      	cmp	r3, #1
 800571c:	d907      	bls.n	800572e <_fwalk_reent+0x3a>
 800571e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005722:	3301      	adds	r3, #1
 8005724:	d003      	beq.n	800572e <_fwalk_reent+0x3a>
 8005726:	4629      	mov	r1, r5
 8005728:	4630      	mov	r0, r6
 800572a:	47c0      	blx	r8
 800572c:	4307      	orrs	r7, r0
 800572e:	3568      	adds	r5, #104	; 0x68
 8005730:	e7e9      	b.n	8005706 <_fwalk_reent+0x12>
	...

08005734 <__libc_init_array>:
 8005734:	b570      	push	{r4, r5, r6, lr}
 8005736:	4d0d      	ldr	r5, [pc, #52]	; (800576c <__libc_init_array+0x38>)
 8005738:	4c0d      	ldr	r4, [pc, #52]	; (8005770 <__libc_init_array+0x3c>)
 800573a:	1b64      	subs	r4, r4, r5
 800573c:	10a4      	asrs	r4, r4, #2
 800573e:	2600      	movs	r6, #0
 8005740:	42a6      	cmp	r6, r4
 8005742:	d109      	bne.n	8005758 <__libc_init_array+0x24>
 8005744:	4d0b      	ldr	r5, [pc, #44]	; (8005774 <__libc_init_array+0x40>)
 8005746:	4c0c      	ldr	r4, [pc, #48]	; (8005778 <__libc_init_array+0x44>)
 8005748:	f000 feda 	bl	8006500 <_init>
 800574c:	1b64      	subs	r4, r4, r5
 800574e:	10a4      	asrs	r4, r4, #2
 8005750:	2600      	movs	r6, #0
 8005752:	42a6      	cmp	r6, r4
 8005754:	d105      	bne.n	8005762 <__libc_init_array+0x2e>
 8005756:	bd70      	pop	{r4, r5, r6, pc}
 8005758:	f855 3b04 	ldr.w	r3, [r5], #4
 800575c:	4798      	blx	r3
 800575e:	3601      	adds	r6, #1
 8005760:	e7ee      	b.n	8005740 <__libc_init_array+0xc>
 8005762:	f855 3b04 	ldr.w	r3, [r5], #4
 8005766:	4798      	blx	r3
 8005768:	3601      	adds	r6, #1
 800576a:	e7f2      	b.n	8005752 <__libc_init_array+0x1e>
 800576c:	080067f4 	.word	0x080067f4
 8005770:	080067f4 	.word	0x080067f4
 8005774:	080067f4 	.word	0x080067f4
 8005778:	080067f8 	.word	0x080067f8

0800577c <__retarget_lock_init_recursive>:
 800577c:	4770      	bx	lr

0800577e <__retarget_lock_acquire_recursive>:
 800577e:	4770      	bx	lr

08005780 <__retarget_lock_release_recursive>:
 8005780:	4770      	bx	lr

08005782 <memcpy>:
 8005782:	440a      	add	r2, r1
 8005784:	4291      	cmp	r1, r2
 8005786:	f100 33ff 	add.w	r3, r0, #4294967295
 800578a:	d100      	bne.n	800578e <memcpy+0xc>
 800578c:	4770      	bx	lr
 800578e:	b510      	push	{r4, lr}
 8005790:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005794:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005798:	4291      	cmp	r1, r2
 800579a:	d1f9      	bne.n	8005790 <memcpy+0xe>
 800579c:	bd10      	pop	{r4, pc}

0800579e <memset>:
 800579e:	4402      	add	r2, r0
 80057a0:	4603      	mov	r3, r0
 80057a2:	4293      	cmp	r3, r2
 80057a4:	d100      	bne.n	80057a8 <memset+0xa>
 80057a6:	4770      	bx	lr
 80057a8:	f803 1b01 	strb.w	r1, [r3], #1
 80057ac:	e7f9      	b.n	80057a2 <memset+0x4>
	...

080057b0 <_free_r>:
 80057b0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80057b2:	2900      	cmp	r1, #0
 80057b4:	d044      	beq.n	8005840 <_free_r+0x90>
 80057b6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80057ba:	9001      	str	r0, [sp, #4]
 80057bc:	2b00      	cmp	r3, #0
 80057be:	f1a1 0404 	sub.w	r4, r1, #4
 80057c2:	bfb8      	it	lt
 80057c4:	18e4      	addlt	r4, r4, r3
 80057c6:	f000 fb25 	bl	8005e14 <__malloc_lock>
 80057ca:	4a1e      	ldr	r2, [pc, #120]	; (8005844 <_free_r+0x94>)
 80057cc:	9801      	ldr	r0, [sp, #4]
 80057ce:	6813      	ldr	r3, [r2, #0]
 80057d0:	b933      	cbnz	r3, 80057e0 <_free_r+0x30>
 80057d2:	6063      	str	r3, [r4, #4]
 80057d4:	6014      	str	r4, [r2, #0]
 80057d6:	b003      	add	sp, #12
 80057d8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80057dc:	f000 bb20 	b.w	8005e20 <__malloc_unlock>
 80057e0:	42a3      	cmp	r3, r4
 80057e2:	d908      	bls.n	80057f6 <_free_r+0x46>
 80057e4:	6825      	ldr	r5, [r4, #0]
 80057e6:	1961      	adds	r1, r4, r5
 80057e8:	428b      	cmp	r3, r1
 80057ea:	bf01      	itttt	eq
 80057ec:	6819      	ldreq	r1, [r3, #0]
 80057ee:	685b      	ldreq	r3, [r3, #4]
 80057f0:	1949      	addeq	r1, r1, r5
 80057f2:	6021      	streq	r1, [r4, #0]
 80057f4:	e7ed      	b.n	80057d2 <_free_r+0x22>
 80057f6:	461a      	mov	r2, r3
 80057f8:	685b      	ldr	r3, [r3, #4]
 80057fa:	b10b      	cbz	r3, 8005800 <_free_r+0x50>
 80057fc:	42a3      	cmp	r3, r4
 80057fe:	d9fa      	bls.n	80057f6 <_free_r+0x46>
 8005800:	6811      	ldr	r1, [r2, #0]
 8005802:	1855      	adds	r5, r2, r1
 8005804:	42a5      	cmp	r5, r4
 8005806:	d10b      	bne.n	8005820 <_free_r+0x70>
 8005808:	6824      	ldr	r4, [r4, #0]
 800580a:	4421      	add	r1, r4
 800580c:	1854      	adds	r4, r2, r1
 800580e:	42a3      	cmp	r3, r4
 8005810:	6011      	str	r1, [r2, #0]
 8005812:	d1e0      	bne.n	80057d6 <_free_r+0x26>
 8005814:	681c      	ldr	r4, [r3, #0]
 8005816:	685b      	ldr	r3, [r3, #4]
 8005818:	6053      	str	r3, [r2, #4]
 800581a:	4421      	add	r1, r4
 800581c:	6011      	str	r1, [r2, #0]
 800581e:	e7da      	b.n	80057d6 <_free_r+0x26>
 8005820:	d902      	bls.n	8005828 <_free_r+0x78>
 8005822:	230c      	movs	r3, #12
 8005824:	6003      	str	r3, [r0, #0]
 8005826:	e7d6      	b.n	80057d6 <_free_r+0x26>
 8005828:	6825      	ldr	r5, [r4, #0]
 800582a:	1961      	adds	r1, r4, r5
 800582c:	428b      	cmp	r3, r1
 800582e:	bf04      	itt	eq
 8005830:	6819      	ldreq	r1, [r3, #0]
 8005832:	685b      	ldreq	r3, [r3, #4]
 8005834:	6063      	str	r3, [r4, #4]
 8005836:	bf04      	itt	eq
 8005838:	1949      	addeq	r1, r1, r5
 800583a:	6021      	streq	r1, [r4, #0]
 800583c:	6054      	str	r4, [r2, #4]
 800583e:	e7ca      	b.n	80057d6 <_free_r+0x26>
 8005840:	b003      	add	sp, #12
 8005842:	bd30      	pop	{r4, r5, pc}
 8005844:	20000564 	.word	0x20000564

08005848 <sbrk_aligned>:
 8005848:	b570      	push	{r4, r5, r6, lr}
 800584a:	4e0e      	ldr	r6, [pc, #56]	; (8005884 <sbrk_aligned+0x3c>)
 800584c:	460c      	mov	r4, r1
 800584e:	6831      	ldr	r1, [r6, #0]
 8005850:	4605      	mov	r5, r0
 8005852:	b911      	cbnz	r1, 800585a <sbrk_aligned+0x12>
 8005854:	f000 f930 	bl	8005ab8 <_sbrk_r>
 8005858:	6030      	str	r0, [r6, #0]
 800585a:	4621      	mov	r1, r4
 800585c:	4628      	mov	r0, r5
 800585e:	f000 f92b 	bl	8005ab8 <_sbrk_r>
 8005862:	1c43      	adds	r3, r0, #1
 8005864:	d00a      	beq.n	800587c <sbrk_aligned+0x34>
 8005866:	1cc4      	adds	r4, r0, #3
 8005868:	f024 0403 	bic.w	r4, r4, #3
 800586c:	42a0      	cmp	r0, r4
 800586e:	d007      	beq.n	8005880 <sbrk_aligned+0x38>
 8005870:	1a21      	subs	r1, r4, r0
 8005872:	4628      	mov	r0, r5
 8005874:	f000 f920 	bl	8005ab8 <_sbrk_r>
 8005878:	3001      	adds	r0, #1
 800587a:	d101      	bne.n	8005880 <sbrk_aligned+0x38>
 800587c:	f04f 34ff 	mov.w	r4, #4294967295
 8005880:	4620      	mov	r0, r4
 8005882:	bd70      	pop	{r4, r5, r6, pc}
 8005884:	20000568 	.word	0x20000568

08005888 <_malloc_r>:
 8005888:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800588c:	1ccd      	adds	r5, r1, #3
 800588e:	f025 0503 	bic.w	r5, r5, #3
 8005892:	3508      	adds	r5, #8
 8005894:	2d0c      	cmp	r5, #12
 8005896:	bf38      	it	cc
 8005898:	250c      	movcc	r5, #12
 800589a:	2d00      	cmp	r5, #0
 800589c:	4607      	mov	r7, r0
 800589e:	db01      	blt.n	80058a4 <_malloc_r+0x1c>
 80058a0:	42a9      	cmp	r1, r5
 80058a2:	d905      	bls.n	80058b0 <_malloc_r+0x28>
 80058a4:	230c      	movs	r3, #12
 80058a6:	603b      	str	r3, [r7, #0]
 80058a8:	2600      	movs	r6, #0
 80058aa:	4630      	mov	r0, r6
 80058ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80058b0:	4e2e      	ldr	r6, [pc, #184]	; (800596c <_malloc_r+0xe4>)
 80058b2:	f000 faaf 	bl	8005e14 <__malloc_lock>
 80058b6:	6833      	ldr	r3, [r6, #0]
 80058b8:	461c      	mov	r4, r3
 80058ba:	bb34      	cbnz	r4, 800590a <_malloc_r+0x82>
 80058bc:	4629      	mov	r1, r5
 80058be:	4638      	mov	r0, r7
 80058c0:	f7ff ffc2 	bl	8005848 <sbrk_aligned>
 80058c4:	1c43      	adds	r3, r0, #1
 80058c6:	4604      	mov	r4, r0
 80058c8:	d14d      	bne.n	8005966 <_malloc_r+0xde>
 80058ca:	6834      	ldr	r4, [r6, #0]
 80058cc:	4626      	mov	r6, r4
 80058ce:	2e00      	cmp	r6, #0
 80058d0:	d140      	bne.n	8005954 <_malloc_r+0xcc>
 80058d2:	6823      	ldr	r3, [r4, #0]
 80058d4:	4631      	mov	r1, r6
 80058d6:	4638      	mov	r0, r7
 80058d8:	eb04 0803 	add.w	r8, r4, r3
 80058dc:	f000 f8ec 	bl	8005ab8 <_sbrk_r>
 80058e0:	4580      	cmp	r8, r0
 80058e2:	d13a      	bne.n	800595a <_malloc_r+0xd2>
 80058e4:	6821      	ldr	r1, [r4, #0]
 80058e6:	3503      	adds	r5, #3
 80058e8:	1a6d      	subs	r5, r5, r1
 80058ea:	f025 0503 	bic.w	r5, r5, #3
 80058ee:	3508      	adds	r5, #8
 80058f0:	2d0c      	cmp	r5, #12
 80058f2:	bf38      	it	cc
 80058f4:	250c      	movcc	r5, #12
 80058f6:	4629      	mov	r1, r5
 80058f8:	4638      	mov	r0, r7
 80058fa:	f7ff ffa5 	bl	8005848 <sbrk_aligned>
 80058fe:	3001      	adds	r0, #1
 8005900:	d02b      	beq.n	800595a <_malloc_r+0xd2>
 8005902:	6823      	ldr	r3, [r4, #0]
 8005904:	442b      	add	r3, r5
 8005906:	6023      	str	r3, [r4, #0]
 8005908:	e00e      	b.n	8005928 <_malloc_r+0xa0>
 800590a:	6822      	ldr	r2, [r4, #0]
 800590c:	1b52      	subs	r2, r2, r5
 800590e:	d41e      	bmi.n	800594e <_malloc_r+0xc6>
 8005910:	2a0b      	cmp	r2, #11
 8005912:	d916      	bls.n	8005942 <_malloc_r+0xba>
 8005914:	1961      	adds	r1, r4, r5
 8005916:	42a3      	cmp	r3, r4
 8005918:	6025      	str	r5, [r4, #0]
 800591a:	bf18      	it	ne
 800591c:	6059      	strne	r1, [r3, #4]
 800591e:	6863      	ldr	r3, [r4, #4]
 8005920:	bf08      	it	eq
 8005922:	6031      	streq	r1, [r6, #0]
 8005924:	5162      	str	r2, [r4, r5]
 8005926:	604b      	str	r3, [r1, #4]
 8005928:	4638      	mov	r0, r7
 800592a:	f104 060b 	add.w	r6, r4, #11
 800592e:	f000 fa77 	bl	8005e20 <__malloc_unlock>
 8005932:	f026 0607 	bic.w	r6, r6, #7
 8005936:	1d23      	adds	r3, r4, #4
 8005938:	1af2      	subs	r2, r6, r3
 800593a:	d0b6      	beq.n	80058aa <_malloc_r+0x22>
 800593c:	1b9b      	subs	r3, r3, r6
 800593e:	50a3      	str	r3, [r4, r2]
 8005940:	e7b3      	b.n	80058aa <_malloc_r+0x22>
 8005942:	6862      	ldr	r2, [r4, #4]
 8005944:	42a3      	cmp	r3, r4
 8005946:	bf0c      	ite	eq
 8005948:	6032      	streq	r2, [r6, #0]
 800594a:	605a      	strne	r2, [r3, #4]
 800594c:	e7ec      	b.n	8005928 <_malloc_r+0xa0>
 800594e:	4623      	mov	r3, r4
 8005950:	6864      	ldr	r4, [r4, #4]
 8005952:	e7b2      	b.n	80058ba <_malloc_r+0x32>
 8005954:	4634      	mov	r4, r6
 8005956:	6876      	ldr	r6, [r6, #4]
 8005958:	e7b9      	b.n	80058ce <_malloc_r+0x46>
 800595a:	230c      	movs	r3, #12
 800595c:	603b      	str	r3, [r7, #0]
 800595e:	4638      	mov	r0, r7
 8005960:	f000 fa5e 	bl	8005e20 <__malloc_unlock>
 8005964:	e7a1      	b.n	80058aa <_malloc_r+0x22>
 8005966:	6025      	str	r5, [r4, #0]
 8005968:	e7de      	b.n	8005928 <_malloc_r+0xa0>
 800596a:	bf00      	nop
 800596c:	20000564 	.word	0x20000564

08005970 <iprintf>:
 8005970:	b40f      	push	{r0, r1, r2, r3}
 8005972:	4b0a      	ldr	r3, [pc, #40]	; (800599c <iprintf+0x2c>)
 8005974:	b513      	push	{r0, r1, r4, lr}
 8005976:	681c      	ldr	r4, [r3, #0]
 8005978:	b124      	cbz	r4, 8005984 <iprintf+0x14>
 800597a:	69a3      	ldr	r3, [r4, #24]
 800597c:	b913      	cbnz	r3, 8005984 <iprintf+0x14>
 800597e:	4620      	mov	r0, r4
 8005980:	f7ff fe3a 	bl	80055f8 <__sinit>
 8005984:	ab05      	add	r3, sp, #20
 8005986:	9a04      	ldr	r2, [sp, #16]
 8005988:	68a1      	ldr	r1, [r4, #8]
 800598a:	9301      	str	r3, [sp, #4]
 800598c:	4620      	mov	r0, r4
 800598e:	f000 fa77 	bl	8005e80 <_vfiprintf_r>
 8005992:	b002      	add	sp, #8
 8005994:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005998:	b004      	add	sp, #16
 800599a:	4770      	bx	lr
 800599c:	20000024 	.word	0x20000024

080059a0 <putchar>:
 80059a0:	4b09      	ldr	r3, [pc, #36]	; (80059c8 <putchar+0x28>)
 80059a2:	b513      	push	{r0, r1, r4, lr}
 80059a4:	681c      	ldr	r4, [r3, #0]
 80059a6:	4601      	mov	r1, r0
 80059a8:	b134      	cbz	r4, 80059b8 <putchar+0x18>
 80059aa:	69a3      	ldr	r3, [r4, #24]
 80059ac:	b923      	cbnz	r3, 80059b8 <putchar+0x18>
 80059ae:	9001      	str	r0, [sp, #4]
 80059b0:	4620      	mov	r0, r4
 80059b2:	f7ff fe21 	bl	80055f8 <__sinit>
 80059b6:	9901      	ldr	r1, [sp, #4]
 80059b8:	68a2      	ldr	r2, [r4, #8]
 80059ba:	4620      	mov	r0, r4
 80059bc:	b002      	add	sp, #8
 80059be:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80059c2:	f000 bd21 	b.w	8006408 <_putc_r>
 80059c6:	bf00      	nop
 80059c8:	20000024 	.word	0x20000024

080059cc <_puts_r>:
 80059cc:	b570      	push	{r4, r5, r6, lr}
 80059ce:	460e      	mov	r6, r1
 80059d0:	4605      	mov	r5, r0
 80059d2:	b118      	cbz	r0, 80059dc <_puts_r+0x10>
 80059d4:	6983      	ldr	r3, [r0, #24]
 80059d6:	b90b      	cbnz	r3, 80059dc <_puts_r+0x10>
 80059d8:	f7ff fe0e 	bl	80055f8 <__sinit>
 80059dc:	69ab      	ldr	r3, [r5, #24]
 80059de:	68ac      	ldr	r4, [r5, #8]
 80059e0:	b913      	cbnz	r3, 80059e8 <_puts_r+0x1c>
 80059e2:	4628      	mov	r0, r5
 80059e4:	f7ff fe08 	bl	80055f8 <__sinit>
 80059e8:	4b2c      	ldr	r3, [pc, #176]	; (8005a9c <_puts_r+0xd0>)
 80059ea:	429c      	cmp	r4, r3
 80059ec:	d120      	bne.n	8005a30 <_puts_r+0x64>
 80059ee:	686c      	ldr	r4, [r5, #4]
 80059f0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80059f2:	07db      	lsls	r3, r3, #31
 80059f4:	d405      	bmi.n	8005a02 <_puts_r+0x36>
 80059f6:	89a3      	ldrh	r3, [r4, #12]
 80059f8:	0598      	lsls	r0, r3, #22
 80059fa:	d402      	bmi.n	8005a02 <_puts_r+0x36>
 80059fc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80059fe:	f7ff febe 	bl	800577e <__retarget_lock_acquire_recursive>
 8005a02:	89a3      	ldrh	r3, [r4, #12]
 8005a04:	0719      	lsls	r1, r3, #28
 8005a06:	d51d      	bpl.n	8005a44 <_puts_r+0x78>
 8005a08:	6923      	ldr	r3, [r4, #16]
 8005a0a:	b1db      	cbz	r3, 8005a44 <_puts_r+0x78>
 8005a0c:	3e01      	subs	r6, #1
 8005a0e:	68a3      	ldr	r3, [r4, #8]
 8005a10:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8005a14:	3b01      	subs	r3, #1
 8005a16:	60a3      	str	r3, [r4, #8]
 8005a18:	bb39      	cbnz	r1, 8005a6a <_puts_r+0x9e>
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	da38      	bge.n	8005a90 <_puts_r+0xc4>
 8005a1e:	4622      	mov	r2, r4
 8005a20:	210a      	movs	r1, #10
 8005a22:	4628      	mov	r0, r5
 8005a24:	f000 f89c 	bl	8005b60 <__swbuf_r>
 8005a28:	3001      	adds	r0, #1
 8005a2a:	d011      	beq.n	8005a50 <_puts_r+0x84>
 8005a2c:	250a      	movs	r5, #10
 8005a2e:	e011      	b.n	8005a54 <_puts_r+0x88>
 8005a30:	4b1b      	ldr	r3, [pc, #108]	; (8005aa0 <_puts_r+0xd4>)
 8005a32:	429c      	cmp	r4, r3
 8005a34:	d101      	bne.n	8005a3a <_puts_r+0x6e>
 8005a36:	68ac      	ldr	r4, [r5, #8]
 8005a38:	e7da      	b.n	80059f0 <_puts_r+0x24>
 8005a3a:	4b1a      	ldr	r3, [pc, #104]	; (8005aa4 <_puts_r+0xd8>)
 8005a3c:	429c      	cmp	r4, r3
 8005a3e:	bf08      	it	eq
 8005a40:	68ec      	ldreq	r4, [r5, #12]
 8005a42:	e7d5      	b.n	80059f0 <_puts_r+0x24>
 8005a44:	4621      	mov	r1, r4
 8005a46:	4628      	mov	r0, r5
 8005a48:	f000 f8ee 	bl	8005c28 <__swsetup_r>
 8005a4c:	2800      	cmp	r0, #0
 8005a4e:	d0dd      	beq.n	8005a0c <_puts_r+0x40>
 8005a50:	f04f 35ff 	mov.w	r5, #4294967295
 8005a54:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005a56:	07da      	lsls	r2, r3, #31
 8005a58:	d405      	bmi.n	8005a66 <_puts_r+0x9a>
 8005a5a:	89a3      	ldrh	r3, [r4, #12]
 8005a5c:	059b      	lsls	r3, r3, #22
 8005a5e:	d402      	bmi.n	8005a66 <_puts_r+0x9a>
 8005a60:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005a62:	f7ff fe8d 	bl	8005780 <__retarget_lock_release_recursive>
 8005a66:	4628      	mov	r0, r5
 8005a68:	bd70      	pop	{r4, r5, r6, pc}
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	da04      	bge.n	8005a78 <_puts_r+0xac>
 8005a6e:	69a2      	ldr	r2, [r4, #24]
 8005a70:	429a      	cmp	r2, r3
 8005a72:	dc06      	bgt.n	8005a82 <_puts_r+0xb6>
 8005a74:	290a      	cmp	r1, #10
 8005a76:	d004      	beq.n	8005a82 <_puts_r+0xb6>
 8005a78:	6823      	ldr	r3, [r4, #0]
 8005a7a:	1c5a      	adds	r2, r3, #1
 8005a7c:	6022      	str	r2, [r4, #0]
 8005a7e:	7019      	strb	r1, [r3, #0]
 8005a80:	e7c5      	b.n	8005a0e <_puts_r+0x42>
 8005a82:	4622      	mov	r2, r4
 8005a84:	4628      	mov	r0, r5
 8005a86:	f000 f86b 	bl	8005b60 <__swbuf_r>
 8005a8a:	3001      	adds	r0, #1
 8005a8c:	d1bf      	bne.n	8005a0e <_puts_r+0x42>
 8005a8e:	e7df      	b.n	8005a50 <_puts_r+0x84>
 8005a90:	6823      	ldr	r3, [r4, #0]
 8005a92:	250a      	movs	r5, #10
 8005a94:	1c5a      	adds	r2, r3, #1
 8005a96:	6022      	str	r2, [r4, #0]
 8005a98:	701d      	strb	r5, [r3, #0]
 8005a9a:	e7db      	b.n	8005a54 <_puts_r+0x88>
 8005a9c:	08006774 	.word	0x08006774
 8005aa0:	08006794 	.word	0x08006794
 8005aa4:	08006754 	.word	0x08006754

08005aa8 <puts>:
 8005aa8:	4b02      	ldr	r3, [pc, #8]	; (8005ab4 <puts+0xc>)
 8005aaa:	4601      	mov	r1, r0
 8005aac:	6818      	ldr	r0, [r3, #0]
 8005aae:	f7ff bf8d 	b.w	80059cc <_puts_r>
 8005ab2:	bf00      	nop
 8005ab4:	20000024 	.word	0x20000024

08005ab8 <_sbrk_r>:
 8005ab8:	b538      	push	{r3, r4, r5, lr}
 8005aba:	4d06      	ldr	r5, [pc, #24]	; (8005ad4 <_sbrk_r+0x1c>)
 8005abc:	2300      	movs	r3, #0
 8005abe:	4604      	mov	r4, r0
 8005ac0:	4608      	mov	r0, r1
 8005ac2:	602b      	str	r3, [r5, #0]
 8005ac4:	f7fb ff06 	bl	80018d4 <_sbrk>
 8005ac8:	1c43      	adds	r3, r0, #1
 8005aca:	d102      	bne.n	8005ad2 <_sbrk_r+0x1a>
 8005acc:	682b      	ldr	r3, [r5, #0]
 8005ace:	b103      	cbz	r3, 8005ad2 <_sbrk_r+0x1a>
 8005ad0:	6023      	str	r3, [r4, #0]
 8005ad2:	bd38      	pop	{r3, r4, r5, pc}
 8005ad4:	2000056c 	.word	0x2000056c

08005ad8 <__sread>:
 8005ad8:	b510      	push	{r4, lr}
 8005ada:	460c      	mov	r4, r1
 8005adc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005ae0:	f000 fcda 	bl	8006498 <_read_r>
 8005ae4:	2800      	cmp	r0, #0
 8005ae6:	bfab      	itete	ge
 8005ae8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8005aea:	89a3      	ldrhlt	r3, [r4, #12]
 8005aec:	181b      	addge	r3, r3, r0
 8005aee:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8005af2:	bfac      	ite	ge
 8005af4:	6563      	strge	r3, [r4, #84]	; 0x54
 8005af6:	81a3      	strhlt	r3, [r4, #12]
 8005af8:	bd10      	pop	{r4, pc}

08005afa <__swrite>:
 8005afa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005afe:	461f      	mov	r7, r3
 8005b00:	898b      	ldrh	r3, [r1, #12]
 8005b02:	05db      	lsls	r3, r3, #23
 8005b04:	4605      	mov	r5, r0
 8005b06:	460c      	mov	r4, r1
 8005b08:	4616      	mov	r6, r2
 8005b0a:	d505      	bpl.n	8005b18 <__swrite+0x1e>
 8005b0c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005b10:	2302      	movs	r3, #2
 8005b12:	2200      	movs	r2, #0
 8005b14:	f000 f906 	bl	8005d24 <_lseek_r>
 8005b18:	89a3      	ldrh	r3, [r4, #12]
 8005b1a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005b1e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005b22:	81a3      	strh	r3, [r4, #12]
 8005b24:	4632      	mov	r2, r6
 8005b26:	463b      	mov	r3, r7
 8005b28:	4628      	mov	r0, r5
 8005b2a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005b2e:	f000 b869 	b.w	8005c04 <_write_r>

08005b32 <__sseek>:
 8005b32:	b510      	push	{r4, lr}
 8005b34:	460c      	mov	r4, r1
 8005b36:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005b3a:	f000 f8f3 	bl	8005d24 <_lseek_r>
 8005b3e:	1c43      	adds	r3, r0, #1
 8005b40:	89a3      	ldrh	r3, [r4, #12]
 8005b42:	bf15      	itete	ne
 8005b44:	6560      	strne	r0, [r4, #84]	; 0x54
 8005b46:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8005b4a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8005b4e:	81a3      	strheq	r3, [r4, #12]
 8005b50:	bf18      	it	ne
 8005b52:	81a3      	strhne	r3, [r4, #12]
 8005b54:	bd10      	pop	{r4, pc}

08005b56 <__sclose>:
 8005b56:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005b5a:	f000 b8d3 	b.w	8005d04 <_close_r>
	...

08005b60 <__swbuf_r>:
 8005b60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005b62:	460e      	mov	r6, r1
 8005b64:	4614      	mov	r4, r2
 8005b66:	4605      	mov	r5, r0
 8005b68:	b118      	cbz	r0, 8005b72 <__swbuf_r+0x12>
 8005b6a:	6983      	ldr	r3, [r0, #24]
 8005b6c:	b90b      	cbnz	r3, 8005b72 <__swbuf_r+0x12>
 8005b6e:	f7ff fd43 	bl	80055f8 <__sinit>
 8005b72:	4b21      	ldr	r3, [pc, #132]	; (8005bf8 <__swbuf_r+0x98>)
 8005b74:	429c      	cmp	r4, r3
 8005b76:	d12b      	bne.n	8005bd0 <__swbuf_r+0x70>
 8005b78:	686c      	ldr	r4, [r5, #4]
 8005b7a:	69a3      	ldr	r3, [r4, #24]
 8005b7c:	60a3      	str	r3, [r4, #8]
 8005b7e:	89a3      	ldrh	r3, [r4, #12]
 8005b80:	071a      	lsls	r2, r3, #28
 8005b82:	d52f      	bpl.n	8005be4 <__swbuf_r+0x84>
 8005b84:	6923      	ldr	r3, [r4, #16]
 8005b86:	b36b      	cbz	r3, 8005be4 <__swbuf_r+0x84>
 8005b88:	6923      	ldr	r3, [r4, #16]
 8005b8a:	6820      	ldr	r0, [r4, #0]
 8005b8c:	1ac0      	subs	r0, r0, r3
 8005b8e:	6963      	ldr	r3, [r4, #20]
 8005b90:	b2f6      	uxtb	r6, r6
 8005b92:	4283      	cmp	r3, r0
 8005b94:	4637      	mov	r7, r6
 8005b96:	dc04      	bgt.n	8005ba2 <__swbuf_r+0x42>
 8005b98:	4621      	mov	r1, r4
 8005b9a:	4628      	mov	r0, r5
 8005b9c:	f7ff fc86 	bl	80054ac <_fflush_r>
 8005ba0:	bb30      	cbnz	r0, 8005bf0 <__swbuf_r+0x90>
 8005ba2:	68a3      	ldr	r3, [r4, #8]
 8005ba4:	3b01      	subs	r3, #1
 8005ba6:	60a3      	str	r3, [r4, #8]
 8005ba8:	6823      	ldr	r3, [r4, #0]
 8005baa:	1c5a      	adds	r2, r3, #1
 8005bac:	6022      	str	r2, [r4, #0]
 8005bae:	701e      	strb	r6, [r3, #0]
 8005bb0:	6963      	ldr	r3, [r4, #20]
 8005bb2:	3001      	adds	r0, #1
 8005bb4:	4283      	cmp	r3, r0
 8005bb6:	d004      	beq.n	8005bc2 <__swbuf_r+0x62>
 8005bb8:	89a3      	ldrh	r3, [r4, #12]
 8005bba:	07db      	lsls	r3, r3, #31
 8005bbc:	d506      	bpl.n	8005bcc <__swbuf_r+0x6c>
 8005bbe:	2e0a      	cmp	r6, #10
 8005bc0:	d104      	bne.n	8005bcc <__swbuf_r+0x6c>
 8005bc2:	4621      	mov	r1, r4
 8005bc4:	4628      	mov	r0, r5
 8005bc6:	f7ff fc71 	bl	80054ac <_fflush_r>
 8005bca:	b988      	cbnz	r0, 8005bf0 <__swbuf_r+0x90>
 8005bcc:	4638      	mov	r0, r7
 8005bce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005bd0:	4b0a      	ldr	r3, [pc, #40]	; (8005bfc <__swbuf_r+0x9c>)
 8005bd2:	429c      	cmp	r4, r3
 8005bd4:	d101      	bne.n	8005bda <__swbuf_r+0x7a>
 8005bd6:	68ac      	ldr	r4, [r5, #8]
 8005bd8:	e7cf      	b.n	8005b7a <__swbuf_r+0x1a>
 8005bda:	4b09      	ldr	r3, [pc, #36]	; (8005c00 <__swbuf_r+0xa0>)
 8005bdc:	429c      	cmp	r4, r3
 8005bde:	bf08      	it	eq
 8005be0:	68ec      	ldreq	r4, [r5, #12]
 8005be2:	e7ca      	b.n	8005b7a <__swbuf_r+0x1a>
 8005be4:	4621      	mov	r1, r4
 8005be6:	4628      	mov	r0, r5
 8005be8:	f000 f81e 	bl	8005c28 <__swsetup_r>
 8005bec:	2800      	cmp	r0, #0
 8005bee:	d0cb      	beq.n	8005b88 <__swbuf_r+0x28>
 8005bf0:	f04f 37ff 	mov.w	r7, #4294967295
 8005bf4:	e7ea      	b.n	8005bcc <__swbuf_r+0x6c>
 8005bf6:	bf00      	nop
 8005bf8:	08006774 	.word	0x08006774
 8005bfc:	08006794 	.word	0x08006794
 8005c00:	08006754 	.word	0x08006754

08005c04 <_write_r>:
 8005c04:	b538      	push	{r3, r4, r5, lr}
 8005c06:	4d07      	ldr	r5, [pc, #28]	; (8005c24 <_write_r+0x20>)
 8005c08:	4604      	mov	r4, r0
 8005c0a:	4608      	mov	r0, r1
 8005c0c:	4611      	mov	r1, r2
 8005c0e:	2200      	movs	r2, #0
 8005c10:	602a      	str	r2, [r5, #0]
 8005c12:	461a      	mov	r2, r3
 8005c14:	f7fb fe0d 	bl	8001832 <_write>
 8005c18:	1c43      	adds	r3, r0, #1
 8005c1a:	d102      	bne.n	8005c22 <_write_r+0x1e>
 8005c1c:	682b      	ldr	r3, [r5, #0]
 8005c1e:	b103      	cbz	r3, 8005c22 <_write_r+0x1e>
 8005c20:	6023      	str	r3, [r4, #0]
 8005c22:	bd38      	pop	{r3, r4, r5, pc}
 8005c24:	2000056c 	.word	0x2000056c

08005c28 <__swsetup_r>:
 8005c28:	4b32      	ldr	r3, [pc, #200]	; (8005cf4 <__swsetup_r+0xcc>)
 8005c2a:	b570      	push	{r4, r5, r6, lr}
 8005c2c:	681d      	ldr	r5, [r3, #0]
 8005c2e:	4606      	mov	r6, r0
 8005c30:	460c      	mov	r4, r1
 8005c32:	b125      	cbz	r5, 8005c3e <__swsetup_r+0x16>
 8005c34:	69ab      	ldr	r3, [r5, #24]
 8005c36:	b913      	cbnz	r3, 8005c3e <__swsetup_r+0x16>
 8005c38:	4628      	mov	r0, r5
 8005c3a:	f7ff fcdd 	bl	80055f8 <__sinit>
 8005c3e:	4b2e      	ldr	r3, [pc, #184]	; (8005cf8 <__swsetup_r+0xd0>)
 8005c40:	429c      	cmp	r4, r3
 8005c42:	d10f      	bne.n	8005c64 <__swsetup_r+0x3c>
 8005c44:	686c      	ldr	r4, [r5, #4]
 8005c46:	89a3      	ldrh	r3, [r4, #12]
 8005c48:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005c4c:	0719      	lsls	r1, r3, #28
 8005c4e:	d42c      	bmi.n	8005caa <__swsetup_r+0x82>
 8005c50:	06dd      	lsls	r5, r3, #27
 8005c52:	d411      	bmi.n	8005c78 <__swsetup_r+0x50>
 8005c54:	2309      	movs	r3, #9
 8005c56:	6033      	str	r3, [r6, #0]
 8005c58:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8005c5c:	81a3      	strh	r3, [r4, #12]
 8005c5e:	f04f 30ff 	mov.w	r0, #4294967295
 8005c62:	e03e      	b.n	8005ce2 <__swsetup_r+0xba>
 8005c64:	4b25      	ldr	r3, [pc, #148]	; (8005cfc <__swsetup_r+0xd4>)
 8005c66:	429c      	cmp	r4, r3
 8005c68:	d101      	bne.n	8005c6e <__swsetup_r+0x46>
 8005c6a:	68ac      	ldr	r4, [r5, #8]
 8005c6c:	e7eb      	b.n	8005c46 <__swsetup_r+0x1e>
 8005c6e:	4b24      	ldr	r3, [pc, #144]	; (8005d00 <__swsetup_r+0xd8>)
 8005c70:	429c      	cmp	r4, r3
 8005c72:	bf08      	it	eq
 8005c74:	68ec      	ldreq	r4, [r5, #12]
 8005c76:	e7e6      	b.n	8005c46 <__swsetup_r+0x1e>
 8005c78:	0758      	lsls	r0, r3, #29
 8005c7a:	d512      	bpl.n	8005ca2 <__swsetup_r+0x7a>
 8005c7c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005c7e:	b141      	cbz	r1, 8005c92 <__swsetup_r+0x6a>
 8005c80:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005c84:	4299      	cmp	r1, r3
 8005c86:	d002      	beq.n	8005c8e <__swsetup_r+0x66>
 8005c88:	4630      	mov	r0, r6
 8005c8a:	f7ff fd91 	bl	80057b0 <_free_r>
 8005c8e:	2300      	movs	r3, #0
 8005c90:	6363      	str	r3, [r4, #52]	; 0x34
 8005c92:	89a3      	ldrh	r3, [r4, #12]
 8005c94:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8005c98:	81a3      	strh	r3, [r4, #12]
 8005c9a:	2300      	movs	r3, #0
 8005c9c:	6063      	str	r3, [r4, #4]
 8005c9e:	6923      	ldr	r3, [r4, #16]
 8005ca0:	6023      	str	r3, [r4, #0]
 8005ca2:	89a3      	ldrh	r3, [r4, #12]
 8005ca4:	f043 0308 	orr.w	r3, r3, #8
 8005ca8:	81a3      	strh	r3, [r4, #12]
 8005caa:	6923      	ldr	r3, [r4, #16]
 8005cac:	b94b      	cbnz	r3, 8005cc2 <__swsetup_r+0x9a>
 8005cae:	89a3      	ldrh	r3, [r4, #12]
 8005cb0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8005cb4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005cb8:	d003      	beq.n	8005cc2 <__swsetup_r+0x9a>
 8005cba:	4621      	mov	r1, r4
 8005cbc:	4630      	mov	r0, r6
 8005cbe:	f000 f869 	bl	8005d94 <__smakebuf_r>
 8005cc2:	89a0      	ldrh	r0, [r4, #12]
 8005cc4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005cc8:	f010 0301 	ands.w	r3, r0, #1
 8005ccc:	d00a      	beq.n	8005ce4 <__swsetup_r+0xbc>
 8005cce:	2300      	movs	r3, #0
 8005cd0:	60a3      	str	r3, [r4, #8]
 8005cd2:	6963      	ldr	r3, [r4, #20]
 8005cd4:	425b      	negs	r3, r3
 8005cd6:	61a3      	str	r3, [r4, #24]
 8005cd8:	6923      	ldr	r3, [r4, #16]
 8005cda:	b943      	cbnz	r3, 8005cee <__swsetup_r+0xc6>
 8005cdc:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8005ce0:	d1ba      	bne.n	8005c58 <__swsetup_r+0x30>
 8005ce2:	bd70      	pop	{r4, r5, r6, pc}
 8005ce4:	0781      	lsls	r1, r0, #30
 8005ce6:	bf58      	it	pl
 8005ce8:	6963      	ldrpl	r3, [r4, #20]
 8005cea:	60a3      	str	r3, [r4, #8]
 8005cec:	e7f4      	b.n	8005cd8 <__swsetup_r+0xb0>
 8005cee:	2000      	movs	r0, #0
 8005cf0:	e7f7      	b.n	8005ce2 <__swsetup_r+0xba>
 8005cf2:	bf00      	nop
 8005cf4:	20000024 	.word	0x20000024
 8005cf8:	08006774 	.word	0x08006774
 8005cfc:	08006794 	.word	0x08006794
 8005d00:	08006754 	.word	0x08006754

08005d04 <_close_r>:
 8005d04:	b538      	push	{r3, r4, r5, lr}
 8005d06:	4d06      	ldr	r5, [pc, #24]	; (8005d20 <_close_r+0x1c>)
 8005d08:	2300      	movs	r3, #0
 8005d0a:	4604      	mov	r4, r0
 8005d0c:	4608      	mov	r0, r1
 8005d0e:	602b      	str	r3, [r5, #0]
 8005d10:	f7fb fdab 	bl	800186a <_close>
 8005d14:	1c43      	adds	r3, r0, #1
 8005d16:	d102      	bne.n	8005d1e <_close_r+0x1a>
 8005d18:	682b      	ldr	r3, [r5, #0]
 8005d1a:	b103      	cbz	r3, 8005d1e <_close_r+0x1a>
 8005d1c:	6023      	str	r3, [r4, #0]
 8005d1e:	bd38      	pop	{r3, r4, r5, pc}
 8005d20:	2000056c 	.word	0x2000056c

08005d24 <_lseek_r>:
 8005d24:	b538      	push	{r3, r4, r5, lr}
 8005d26:	4d07      	ldr	r5, [pc, #28]	; (8005d44 <_lseek_r+0x20>)
 8005d28:	4604      	mov	r4, r0
 8005d2a:	4608      	mov	r0, r1
 8005d2c:	4611      	mov	r1, r2
 8005d2e:	2200      	movs	r2, #0
 8005d30:	602a      	str	r2, [r5, #0]
 8005d32:	461a      	mov	r2, r3
 8005d34:	f7fb fdc0 	bl	80018b8 <_lseek>
 8005d38:	1c43      	adds	r3, r0, #1
 8005d3a:	d102      	bne.n	8005d42 <_lseek_r+0x1e>
 8005d3c:	682b      	ldr	r3, [r5, #0]
 8005d3e:	b103      	cbz	r3, 8005d42 <_lseek_r+0x1e>
 8005d40:	6023      	str	r3, [r4, #0]
 8005d42:	bd38      	pop	{r3, r4, r5, pc}
 8005d44:	2000056c 	.word	0x2000056c

08005d48 <__swhatbuf_r>:
 8005d48:	b570      	push	{r4, r5, r6, lr}
 8005d4a:	460e      	mov	r6, r1
 8005d4c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005d50:	2900      	cmp	r1, #0
 8005d52:	b096      	sub	sp, #88	; 0x58
 8005d54:	4614      	mov	r4, r2
 8005d56:	461d      	mov	r5, r3
 8005d58:	da08      	bge.n	8005d6c <__swhatbuf_r+0x24>
 8005d5a:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8005d5e:	2200      	movs	r2, #0
 8005d60:	602a      	str	r2, [r5, #0]
 8005d62:	061a      	lsls	r2, r3, #24
 8005d64:	d410      	bmi.n	8005d88 <__swhatbuf_r+0x40>
 8005d66:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005d6a:	e00e      	b.n	8005d8a <__swhatbuf_r+0x42>
 8005d6c:	466a      	mov	r2, sp
 8005d6e:	f000 fba5 	bl	80064bc <_fstat_r>
 8005d72:	2800      	cmp	r0, #0
 8005d74:	dbf1      	blt.n	8005d5a <__swhatbuf_r+0x12>
 8005d76:	9a01      	ldr	r2, [sp, #4]
 8005d78:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8005d7c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8005d80:	425a      	negs	r2, r3
 8005d82:	415a      	adcs	r2, r3
 8005d84:	602a      	str	r2, [r5, #0]
 8005d86:	e7ee      	b.n	8005d66 <__swhatbuf_r+0x1e>
 8005d88:	2340      	movs	r3, #64	; 0x40
 8005d8a:	2000      	movs	r0, #0
 8005d8c:	6023      	str	r3, [r4, #0]
 8005d8e:	b016      	add	sp, #88	; 0x58
 8005d90:	bd70      	pop	{r4, r5, r6, pc}
	...

08005d94 <__smakebuf_r>:
 8005d94:	898b      	ldrh	r3, [r1, #12]
 8005d96:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005d98:	079d      	lsls	r5, r3, #30
 8005d9a:	4606      	mov	r6, r0
 8005d9c:	460c      	mov	r4, r1
 8005d9e:	d507      	bpl.n	8005db0 <__smakebuf_r+0x1c>
 8005da0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8005da4:	6023      	str	r3, [r4, #0]
 8005da6:	6123      	str	r3, [r4, #16]
 8005da8:	2301      	movs	r3, #1
 8005daa:	6163      	str	r3, [r4, #20]
 8005dac:	b002      	add	sp, #8
 8005dae:	bd70      	pop	{r4, r5, r6, pc}
 8005db0:	ab01      	add	r3, sp, #4
 8005db2:	466a      	mov	r2, sp
 8005db4:	f7ff ffc8 	bl	8005d48 <__swhatbuf_r>
 8005db8:	9900      	ldr	r1, [sp, #0]
 8005dba:	4605      	mov	r5, r0
 8005dbc:	4630      	mov	r0, r6
 8005dbe:	f7ff fd63 	bl	8005888 <_malloc_r>
 8005dc2:	b948      	cbnz	r0, 8005dd8 <__smakebuf_r+0x44>
 8005dc4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005dc8:	059a      	lsls	r2, r3, #22
 8005dca:	d4ef      	bmi.n	8005dac <__smakebuf_r+0x18>
 8005dcc:	f023 0303 	bic.w	r3, r3, #3
 8005dd0:	f043 0302 	orr.w	r3, r3, #2
 8005dd4:	81a3      	strh	r3, [r4, #12]
 8005dd6:	e7e3      	b.n	8005da0 <__smakebuf_r+0xc>
 8005dd8:	4b0d      	ldr	r3, [pc, #52]	; (8005e10 <__smakebuf_r+0x7c>)
 8005dda:	62b3      	str	r3, [r6, #40]	; 0x28
 8005ddc:	89a3      	ldrh	r3, [r4, #12]
 8005dde:	6020      	str	r0, [r4, #0]
 8005de0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005de4:	81a3      	strh	r3, [r4, #12]
 8005de6:	9b00      	ldr	r3, [sp, #0]
 8005de8:	6163      	str	r3, [r4, #20]
 8005dea:	9b01      	ldr	r3, [sp, #4]
 8005dec:	6120      	str	r0, [r4, #16]
 8005dee:	b15b      	cbz	r3, 8005e08 <__smakebuf_r+0x74>
 8005df0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005df4:	4630      	mov	r0, r6
 8005df6:	f000 fb73 	bl	80064e0 <_isatty_r>
 8005dfa:	b128      	cbz	r0, 8005e08 <__smakebuf_r+0x74>
 8005dfc:	89a3      	ldrh	r3, [r4, #12]
 8005dfe:	f023 0303 	bic.w	r3, r3, #3
 8005e02:	f043 0301 	orr.w	r3, r3, #1
 8005e06:	81a3      	strh	r3, [r4, #12]
 8005e08:	89a0      	ldrh	r0, [r4, #12]
 8005e0a:	4305      	orrs	r5, r0
 8005e0c:	81a5      	strh	r5, [r4, #12]
 8005e0e:	e7cd      	b.n	8005dac <__smakebuf_r+0x18>
 8005e10:	08005591 	.word	0x08005591

08005e14 <__malloc_lock>:
 8005e14:	4801      	ldr	r0, [pc, #4]	; (8005e1c <__malloc_lock+0x8>)
 8005e16:	f7ff bcb2 	b.w	800577e <__retarget_lock_acquire_recursive>
 8005e1a:	bf00      	nop
 8005e1c:	20000560 	.word	0x20000560

08005e20 <__malloc_unlock>:
 8005e20:	4801      	ldr	r0, [pc, #4]	; (8005e28 <__malloc_unlock+0x8>)
 8005e22:	f7ff bcad 	b.w	8005780 <__retarget_lock_release_recursive>
 8005e26:	bf00      	nop
 8005e28:	20000560 	.word	0x20000560

08005e2c <__sfputc_r>:
 8005e2c:	6893      	ldr	r3, [r2, #8]
 8005e2e:	3b01      	subs	r3, #1
 8005e30:	2b00      	cmp	r3, #0
 8005e32:	b410      	push	{r4}
 8005e34:	6093      	str	r3, [r2, #8]
 8005e36:	da08      	bge.n	8005e4a <__sfputc_r+0x1e>
 8005e38:	6994      	ldr	r4, [r2, #24]
 8005e3a:	42a3      	cmp	r3, r4
 8005e3c:	db01      	blt.n	8005e42 <__sfputc_r+0x16>
 8005e3e:	290a      	cmp	r1, #10
 8005e40:	d103      	bne.n	8005e4a <__sfputc_r+0x1e>
 8005e42:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005e46:	f7ff be8b 	b.w	8005b60 <__swbuf_r>
 8005e4a:	6813      	ldr	r3, [r2, #0]
 8005e4c:	1c58      	adds	r0, r3, #1
 8005e4e:	6010      	str	r0, [r2, #0]
 8005e50:	7019      	strb	r1, [r3, #0]
 8005e52:	4608      	mov	r0, r1
 8005e54:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005e58:	4770      	bx	lr

08005e5a <__sfputs_r>:
 8005e5a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005e5c:	4606      	mov	r6, r0
 8005e5e:	460f      	mov	r7, r1
 8005e60:	4614      	mov	r4, r2
 8005e62:	18d5      	adds	r5, r2, r3
 8005e64:	42ac      	cmp	r4, r5
 8005e66:	d101      	bne.n	8005e6c <__sfputs_r+0x12>
 8005e68:	2000      	movs	r0, #0
 8005e6a:	e007      	b.n	8005e7c <__sfputs_r+0x22>
 8005e6c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005e70:	463a      	mov	r2, r7
 8005e72:	4630      	mov	r0, r6
 8005e74:	f7ff ffda 	bl	8005e2c <__sfputc_r>
 8005e78:	1c43      	adds	r3, r0, #1
 8005e7a:	d1f3      	bne.n	8005e64 <__sfputs_r+0xa>
 8005e7c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005e80 <_vfiprintf_r>:
 8005e80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005e84:	460d      	mov	r5, r1
 8005e86:	b09d      	sub	sp, #116	; 0x74
 8005e88:	4614      	mov	r4, r2
 8005e8a:	4698      	mov	r8, r3
 8005e8c:	4606      	mov	r6, r0
 8005e8e:	b118      	cbz	r0, 8005e98 <_vfiprintf_r+0x18>
 8005e90:	6983      	ldr	r3, [r0, #24]
 8005e92:	b90b      	cbnz	r3, 8005e98 <_vfiprintf_r+0x18>
 8005e94:	f7ff fbb0 	bl	80055f8 <__sinit>
 8005e98:	4b89      	ldr	r3, [pc, #548]	; (80060c0 <_vfiprintf_r+0x240>)
 8005e9a:	429d      	cmp	r5, r3
 8005e9c:	d11b      	bne.n	8005ed6 <_vfiprintf_r+0x56>
 8005e9e:	6875      	ldr	r5, [r6, #4]
 8005ea0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005ea2:	07d9      	lsls	r1, r3, #31
 8005ea4:	d405      	bmi.n	8005eb2 <_vfiprintf_r+0x32>
 8005ea6:	89ab      	ldrh	r3, [r5, #12]
 8005ea8:	059a      	lsls	r2, r3, #22
 8005eaa:	d402      	bmi.n	8005eb2 <_vfiprintf_r+0x32>
 8005eac:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005eae:	f7ff fc66 	bl	800577e <__retarget_lock_acquire_recursive>
 8005eb2:	89ab      	ldrh	r3, [r5, #12]
 8005eb4:	071b      	lsls	r3, r3, #28
 8005eb6:	d501      	bpl.n	8005ebc <_vfiprintf_r+0x3c>
 8005eb8:	692b      	ldr	r3, [r5, #16]
 8005eba:	b9eb      	cbnz	r3, 8005ef8 <_vfiprintf_r+0x78>
 8005ebc:	4629      	mov	r1, r5
 8005ebe:	4630      	mov	r0, r6
 8005ec0:	f7ff feb2 	bl	8005c28 <__swsetup_r>
 8005ec4:	b1c0      	cbz	r0, 8005ef8 <_vfiprintf_r+0x78>
 8005ec6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005ec8:	07dc      	lsls	r4, r3, #31
 8005eca:	d50e      	bpl.n	8005eea <_vfiprintf_r+0x6a>
 8005ecc:	f04f 30ff 	mov.w	r0, #4294967295
 8005ed0:	b01d      	add	sp, #116	; 0x74
 8005ed2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005ed6:	4b7b      	ldr	r3, [pc, #492]	; (80060c4 <_vfiprintf_r+0x244>)
 8005ed8:	429d      	cmp	r5, r3
 8005eda:	d101      	bne.n	8005ee0 <_vfiprintf_r+0x60>
 8005edc:	68b5      	ldr	r5, [r6, #8]
 8005ede:	e7df      	b.n	8005ea0 <_vfiprintf_r+0x20>
 8005ee0:	4b79      	ldr	r3, [pc, #484]	; (80060c8 <_vfiprintf_r+0x248>)
 8005ee2:	429d      	cmp	r5, r3
 8005ee4:	bf08      	it	eq
 8005ee6:	68f5      	ldreq	r5, [r6, #12]
 8005ee8:	e7da      	b.n	8005ea0 <_vfiprintf_r+0x20>
 8005eea:	89ab      	ldrh	r3, [r5, #12]
 8005eec:	0598      	lsls	r0, r3, #22
 8005eee:	d4ed      	bmi.n	8005ecc <_vfiprintf_r+0x4c>
 8005ef0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005ef2:	f7ff fc45 	bl	8005780 <__retarget_lock_release_recursive>
 8005ef6:	e7e9      	b.n	8005ecc <_vfiprintf_r+0x4c>
 8005ef8:	2300      	movs	r3, #0
 8005efa:	9309      	str	r3, [sp, #36]	; 0x24
 8005efc:	2320      	movs	r3, #32
 8005efe:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005f02:	f8cd 800c 	str.w	r8, [sp, #12]
 8005f06:	2330      	movs	r3, #48	; 0x30
 8005f08:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80060cc <_vfiprintf_r+0x24c>
 8005f0c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005f10:	f04f 0901 	mov.w	r9, #1
 8005f14:	4623      	mov	r3, r4
 8005f16:	469a      	mov	sl, r3
 8005f18:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005f1c:	b10a      	cbz	r2, 8005f22 <_vfiprintf_r+0xa2>
 8005f1e:	2a25      	cmp	r2, #37	; 0x25
 8005f20:	d1f9      	bne.n	8005f16 <_vfiprintf_r+0x96>
 8005f22:	ebba 0b04 	subs.w	fp, sl, r4
 8005f26:	d00b      	beq.n	8005f40 <_vfiprintf_r+0xc0>
 8005f28:	465b      	mov	r3, fp
 8005f2a:	4622      	mov	r2, r4
 8005f2c:	4629      	mov	r1, r5
 8005f2e:	4630      	mov	r0, r6
 8005f30:	f7ff ff93 	bl	8005e5a <__sfputs_r>
 8005f34:	3001      	adds	r0, #1
 8005f36:	f000 80aa 	beq.w	800608e <_vfiprintf_r+0x20e>
 8005f3a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005f3c:	445a      	add	r2, fp
 8005f3e:	9209      	str	r2, [sp, #36]	; 0x24
 8005f40:	f89a 3000 	ldrb.w	r3, [sl]
 8005f44:	2b00      	cmp	r3, #0
 8005f46:	f000 80a2 	beq.w	800608e <_vfiprintf_r+0x20e>
 8005f4a:	2300      	movs	r3, #0
 8005f4c:	f04f 32ff 	mov.w	r2, #4294967295
 8005f50:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005f54:	f10a 0a01 	add.w	sl, sl, #1
 8005f58:	9304      	str	r3, [sp, #16]
 8005f5a:	9307      	str	r3, [sp, #28]
 8005f5c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005f60:	931a      	str	r3, [sp, #104]	; 0x68
 8005f62:	4654      	mov	r4, sl
 8005f64:	2205      	movs	r2, #5
 8005f66:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005f6a:	4858      	ldr	r0, [pc, #352]	; (80060cc <_vfiprintf_r+0x24c>)
 8005f6c:	f7fa f938 	bl	80001e0 <memchr>
 8005f70:	9a04      	ldr	r2, [sp, #16]
 8005f72:	b9d8      	cbnz	r0, 8005fac <_vfiprintf_r+0x12c>
 8005f74:	06d1      	lsls	r1, r2, #27
 8005f76:	bf44      	itt	mi
 8005f78:	2320      	movmi	r3, #32
 8005f7a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005f7e:	0713      	lsls	r3, r2, #28
 8005f80:	bf44      	itt	mi
 8005f82:	232b      	movmi	r3, #43	; 0x2b
 8005f84:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005f88:	f89a 3000 	ldrb.w	r3, [sl]
 8005f8c:	2b2a      	cmp	r3, #42	; 0x2a
 8005f8e:	d015      	beq.n	8005fbc <_vfiprintf_r+0x13c>
 8005f90:	9a07      	ldr	r2, [sp, #28]
 8005f92:	4654      	mov	r4, sl
 8005f94:	2000      	movs	r0, #0
 8005f96:	f04f 0c0a 	mov.w	ip, #10
 8005f9a:	4621      	mov	r1, r4
 8005f9c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005fa0:	3b30      	subs	r3, #48	; 0x30
 8005fa2:	2b09      	cmp	r3, #9
 8005fa4:	d94e      	bls.n	8006044 <_vfiprintf_r+0x1c4>
 8005fa6:	b1b0      	cbz	r0, 8005fd6 <_vfiprintf_r+0x156>
 8005fa8:	9207      	str	r2, [sp, #28]
 8005faa:	e014      	b.n	8005fd6 <_vfiprintf_r+0x156>
 8005fac:	eba0 0308 	sub.w	r3, r0, r8
 8005fb0:	fa09 f303 	lsl.w	r3, r9, r3
 8005fb4:	4313      	orrs	r3, r2
 8005fb6:	9304      	str	r3, [sp, #16]
 8005fb8:	46a2      	mov	sl, r4
 8005fba:	e7d2      	b.n	8005f62 <_vfiprintf_r+0xe2>
 8005fbc:	9b03      	ldr	r3, [sp, #12]
 8005fbe:	1d19      	adds	r1, r3, #4
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	9103      	str	r1, [sp, #12]
 8005fc4:	2b00      	cmp	r3, #0
 8005fc6:	bfbb      	ittet	lt
 8005fc8:	425b      	neglt	r3, r3
 8005fca:	f042 0202 	orrlt.w	r2, r2, #2
 8005fce:	9307      	strge	r3, [sp, #28]
 8005fd0:	9307      	strlt	r3, [sp, #28]
 8005fd2:	bfb8      	it	lt
 8005fd4:	9204      	strlt	r2, [sp, #16]
 8005fd6:	7823      	ldrb	r3, [r4, #0]
 8005fd8:	2b2e      	cmp	r3, #46	; 0x2e
 8005fda:	d10c      	bne.n	8005ff6 <_vfiprintf_r+0x176>
 8005fdc:	7863      	ldrb	r3, [r4, #1]
 8005fde:	2b2a      	cmp	r3, #42	; 0x2a
 8005fe0:	d135      	bne.n	800604e <_vfiprintf_r+0x1ce>
 8005fe2:	9b03      	ldr	r3, [sp, #12]
 8005fe4:	1d1a      	adds	r2, r3, #4
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	9203      	str	r2, [sp, #12]
 8005fea:	2b00      	cmp	r3, #0
 8005fec:	bfb8      	it	lt
 8005fee:	f04f 33ff 	movlt.w	r3, #4294967295
 8005ff2:	3402      	adds	r4, #2
 8005ff4:	9305      	str	r3, [sp, #20]
 8005ff6:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80060dc <_vfiprintf_r+0x25c>
 8005ffa:	7821      	ldrb	r1, [r4, #0]
 8005ffc:	2203      	movs	r2, #3
 8005ffe:	4650      	mov	r0, sl
 8006000:	f7fa f8ee 	bl	80001e0 <memchr>
 8006004:	b140      	cbz	r0, 8006018 <_vfiprintf_r+0x198>
 8006006:	2340      	movs	r3, #64	; 0x40
 8006008:	eba0 000a 	sub.w	r0, r0, sl
 800600c:	fa03 f000 	lsl.w	r0, r3, r0
 8006010:	9b04      	ldr	r3, [sp, #16]
 8006012:	4303      	orrs	r3, r0
 8006014:	3401      	adds	r4, #1
 8006016:	9304      	str	r3, [sp, #16]
 8006018:	f814 1b01 	ldrb.w	r1, [r4], #1
 800601c:	482c      	ldr	r0, [pc, #176]	; (80060d0 <_vfiprintf_r+0x250>)
 800601e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006022:	2206      	movs	r2, #6
 8006024:	f7fa f8dc 	bl	80001e0 <memchr>
 8006028:	2800      	cmp	r0, #0
 800602a:	d03f      	beq.n	80060ac <_vfiprintf_r+0x22c>
 800602c:	4b29      	ldr	r3, [pc, #164]	; (80060d4 <_vfiprintf_r+0x254>)
 800602e:	bb1b      	cbnz	r3, 8006078 <_vfiprintf_r+0x1f8>
 8006030:	9b03      	ldr	r3, [sp, #12]
 8006032:	3307      	adds	r3, #7
 8006034:	f023 0307 	bic.w	r3, r3, #7
 8006038:	3308      	adds	r3, #8
 800603a:	9303      	str	r3, [sp, #12]
 800603c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800603e:	443b      	add	r3, r7
 8006040:	9309      	str	r3, [sp, #36]	; 0x24
 8006042:	e767      	b.n	8005f14 <_vfiprintf_r+0x94>
 8006044:	fb0c 3202 	mla	r2, ip, r2, r3
 8006048:	460c      	mov	r4, r1
 800604a:	2001      	movs	r0, #1
 800604c:	e7a5      	b.n	8005f9a <_vfiprintf_r+0x11a>
 800604e:	2300      	movs	r3, #0
 8006050:	3401      	adds	r4, #1
 8006052:	9305      	str	r3, [sp, #20]
 8006054:	4619      	mov	r1, r3
 8006056:	f04f 0c0a 	mov.w	ip, #10
 800605a:	4620      	mov	r0, r4
 800605c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006060:	3a30      	subs	r2, #48	; 0x30
 8006062:	2a09      	cmp	r2, #9
 8006064:	d903      	bls.n	800606e <_vfiprintf_r+0x1ee>
 8006066:	2b00      	cmp	r3, #0
 8006068:	d0c5      	beq.n	8005ff6 <_vfiprintf_r+0x176>
 800606a:	9105      	str	r1, [sp, #20]
 800606c:	e7c3      	b.n	8005ff6 <_vfiprintf_r+0x176>
 800606e:	fb0c 2101 	mla	r1, ip, r1, r2
 8006072:	4604      	mov	r4, r0
 8006074:	2301      	movs	r3, #1
 8006076:	e7f0      	b.n	800605a <_vfiprintf_r+0x1da>
 8006078:	ab03      	add	r3, sp, #12
 800607a:	9300      	str	r3, [sp, #0]
 800607c:	462a      	mov	r2, r5
 800607e:	4b16      	ldr	r3, [pc, #88]	; (80060d8 <_vfiprintf_r+0x258>)
 8006080:	a904      	add	r1, sp, #16
 8006082:	4630      	mov	r0, r6
 8006084:	f3af 8000 	nop.w
 8006088:	4607      	mov	r7, r0
 800608a:	1c78      	adds	r0, r7, #1
 800608c:	d1d6      	bne.n	800603c <_vfiprintf_r+0x1bc>
 800608e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006090:	07d9      	lsls	r1, r3, #31
 8006092:	d405      	bmi.n	80060a0 <_vfiprintf_r+0x220>
 8006094:	89ab      	ldrh	r3, [r5, #12]
 8006096:	059a      	lsls	r2, r3, #22
 8006098:	d402      	bmi.n	80060a0 <_vfiprintf_r+0x220>
 800609a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800609c:	f7ff fb70 	bl	8005780 <__retarget_lock_release_recursive>
 80060a0:	89ab      	ldrh	r3, [r5, #12]
 80060a2:	065b      	lsls	r3, r3, #25
 80060a4:	f53f af12 	bmi.w	8005ecc <_vfiprintf_r+0x4c>
 80060a8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80060aa:	e711      	b.n	8005ed0 <_vfiprintf_r+0x50>
 80060ac:	ab03      	add	r3, sp, #12
 80060ae:	9300      	str	r3, [sp, #0]
 80060b0:	462a      	mov	r2, r5
 80060b2:	4b09      	ldr	r3, [pc, #36]	; (80060d8 <_vfiprintf_r+0x258>)
 80060b4:	a904      	add	r1, sp, #16
 80060b6:	4630      	mov	r0, r6
 80060b8:	f000 f880 	bl	80061bc <_printf_i>
 80060bc:	e7e4      	b.n	8006088 <_vfiprintf_r+0x208>
 80060be:	bf00      	nop
 80060c0:	08006774 	.word	0x08006774
 80060c4:	08006794 	.word	0x08006794
 80060c8:	08006754 	.word	0x08006754
 80060cc:	080067b8 	.word	0x080067b8
 80060d0:	080067c2 	.word	0x080067c2
 80060d4:	00000000 	.word	0x00000000
 80060d8:	08005e5b 	.word	0x08005e5b
 80060dc:	080067be 	.word	0x080067be

080060e0 <_printf_common>:
 80060e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80060e4:	4616      	mov	r6, r2
 80060e6:	4699      	mov	r9, r3
 80060e8:	688a      	ldr	r2, [r1, #8]
 80060ea:	690b      	ldr	r3, [r1, #16]
 80060ec:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80060f0:	4293      	cmp	r3, r2
 80060f2:	bfb8      	it	lt
 80060f4:	4613      	movlt	r3, r2
 80060f6:	6033      	str	r3, [r6, #0]
 80060f8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80060fc:	4607      	mov	r7, r0
 80060fe:	460c      	mov	r4, r1
 8006100:	b10a      	cbz	r2, 8006106 <_printf_common+0x26>
 8006102:	3301      	adds	r3, #1
 8006104:	6033      	str	r3, [r6, #0]
 8006106:	6823      	ldr	r3, [r4, #0]
 8006108:	0699      	lsls	r1, r3, #26
 800610a:	bf42      	ittt	mi
 800610c:	6833      	ldrmi	r3, [r6, #0]
 800610e:	3302      	addmi	r3, #2
 8006110:	6033      	strmi	r3, [r6, #0]
 8006112:	6825      	ldr	r5, [r4, #0]
 8006114:	f015 0506 	ands.w	r5, r5, #6
 8006118:	d106      	bne.n	8006128 <_printf_common+0x48>
 800611a:	f104 0a19 	add.w	sl, r4, #25
 800611e:	68e3      	ldr	r3, [r4, #12]
 8006120:	6832      	ldr	r2, [r6, #0]
 8006122:	1a9b      	subs	r3, r3, r2
 8006124:	42ab      	cmp	r3, r5
 8006126:	dc26      	bgt.n	8006176 <_printf_common+0x96>
 8006128:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800612c:	1e13      	subs	r3, r2, #0
 800612e:	6822      	ldr	r2, [r4, #0]
 8006130:	bf18      	it	ne
 8006132:	2301      	movne	r3, #1
 8006134:	0692      	lsls	r2, r2, #26
 8006136:	d42b      	bmi.n	8006190 <_printf_common+0xb0>
 8006138:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800613c:	4649      	mov	r1, r9
 800613e:	4638      	mov	r0, r7
 8006140:	47c0      	blx	r8
 8006142:	3001      	adds	r0, #1
 8006144:	d01e      	beq.n	8006184 <_printf_common+0xa4>
 8006146:	6823      	ldr	r3, [r4, #0]
 8006148:	68e5      	ldr	r5, [r4, #12]
 800614a:	6832      	ldr	r2, [r6, #0]
 800614c:	f003 0306 	and.w	r3, r3, #6
 8006150:	2b04      	cmp	r3, #4
 8006152:	bf08      	it	eq
 8006154:	1aad      	subeq	r5, r5, r2
 8006156:	68a3      	ldr	r3, [r4, #8]
 8006158:	6922      	ldr	r2, [r4, #16]
 800615a:	bf0c      	ite	eq
 800615c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006160:	2500      	movne	r5, #0
 8006162:	4293      	cmp	r3, r2
 8006164:	bfc4      	itt	gt
 8006166:	1a9b      	subgt	r3, r3, r2
 8006168:	18ed      	addgt	r5, r5, r3
 800616a:	2600      	movs	r6, #0
 800616c:	341a      	adds	r4, #26
 800616e:	42b5      	cmp	r5, r6
 8006170:	d11a      	bne.n	80061a8 <_printf_common+0xc8>
 8006172:	2000      	movs	r0, #0
 8006174:	e008      	b.n	8006188 <_printf_common+0xa8>
 8006176:	2301      	movs	r3, #1
 8006178:	4652      	mov	r2, sl
 800617a:	4649      	mov	r1, r9
 800617c:	4638      	mov	r0, r7
 800617e:	47c0      	blx	r8
 8006180:	3001      	adds	r0, #1
 8006182:	d103      	bne.n	800618c <_printf_common+0xac>
 8006184:	f04f 30ff 	mov.w	r0, #4294967295
 8006188:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800618c:	3501      	adds	r5, #1
 800618e:	e7c6      	b.n	800611e <_printf_common+0x3e>
 8006190:	18e1      	adds	r1, r4, r3
 8006192:	1c5a      	adds	r2, r3, #1
 8006194:	2030      	movs	r0, #48	; 0x30
 8006196:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800619a:	4422      	add	r2, r4
 800619c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80061a0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80061a4:	3302      	adds	r3, #2
 80061a6:	e7c7      	b.n	8006138 <_printf_common+0x58>
 80061a8:	2301      	movs	r3, #1
 80061aa:	4622      	mov	r2, r4
 80061ac:	4649      	mov	r1, r9
 80061ae:	4638      	mov	r0, r7
 80061b0:	47c0      	blx	r8
 80061b2:	3001      	adds	r0, #1
 80061b4:	d0e6      	beq.n	8006184 <_printf_common+0xa4>
 80061b6:	3601      	adds	r6, #1
 80061b8:	e7d9      	b.n	800616e <_printf_common+0x8e>
	...

080061bc <_printf_i>:
 80061bc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80061c0:	7e0f      	ldrb	r7, [r1, #24]
 80061c2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80061c4:	2f78      	cmp	r7, #120	; 0x78
 80061c6:	4691      	mov	r9, r2
 80061c8:	4680      	mov	r8, r0
 80061ca:	460c      	mov	r4, r1
 80061cc:	469a      	mov	sl, r3
 80061ce:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80061d2:	d807      	bhi.n	80061e4 <_printf_i+0x28>
 80061d4:	2f62      	cmp	r7, #98	; 0x62
 80061d6:	d80a      	bhi.n	80061ee <_printf_i+0x32>
 80061d8:	2f00      	cmp	r7, #0
 80061da:	f000 80d8 	beq.w	800638e <_printf_i+0x1d2>
 80061de:	2f58      	cmp	r7, #88	; 0x58
 80061e0:	f000 80a3 	beq.w	800632a <_printf_i+0x16e>
 80061e4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80061e8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80061ec:	e03a      	b.n	8006264 <_printf_i+0xa8>
 80061ee:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80061f2:	2b15      	cmp	r3, #21
 80061f4:	d8f6      	bhi.n	80061e4 <_printf_i+0x28>
 80061f6:	a101      	add	r1, pc, #4	; (adr r1, 80061fc <_printf_i+0x40>)
 80061f8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80061fc:	08006255 	.word	0x08006255
 8006200:	08006269 	.word	0x08006269
 8006204:	080061e5 	.word	0x080061e5
 8006208:	080061e5 	.word	0x080061e5
 800620c:	080061e5 	.word	0x080061e5
 8006210:	080061e5 	.word	0x080061e5
 8006214:	08006269 	.word	0x08006269
 8006218:	080061e5 	.word	0x080061e5
 800621c:	080061e5 	.word	0x080061e5
 8006220:	080061e5 	.word	0x080061e5
 8006224:	080061e5 	.word	0x080061e5
 8006228:	08006375 	.word	0x08006375
 800622c:	08006299 	.word	0x08006299
 8006230:	08006357 	.word	0x08006357
 8006234:	080061e5 	.word	0x080061e5
 8006238:	080061e5 	.word	0x080061e5
 800623c:	08006397 	.word	0x08006397
 8006240:	080061e5 	.word	0x080061e5
 8006244:	08006299 	.word	0x08006299
 8006248:	080061e5 	.word	0x080061e5
 800624c:	080061e5 	.word	0x080061e5
 8006250:	0800635f 	.word	0x0800635f
 8006254:	682b      	ldr	r3, [r5, #0]
 8006256:	1d1a      	adds	r2, r3, #4
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	602a      	str	r2, [r5, #0]
 800625c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006260:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006264:	2301      	movs	r3, #1
 8006266:	e0a3      	b.n	80063b0 <_printf_i+0x1f4>
 8006268:	6820      	ldr	r0, [r4, #0]
 800626a:	6829      	ldr	r1, [r5, #0]
 800626c:	0606      	lsls	r6, r0, #24
 800626e:	f101 0304 	add.w	r3, r1, #4
 8006272:	d50a      	bpl.n	800628a <_printf_i+0xce>
 8006274:	680e      	ldr	r6, [r1, #0]
 8006276:	602b      	str	r3, [r5, #0]
 8006278:	2e00      	cmp	r6, #0
 800627a:	da03      	bge.n	8006284 <_printf_i+0xc8>
 800627c:	232d      	movs	r3, #45	; 0x2d
 800627e:	4276      	negs	r6, r6
 8006280:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006284:	485e      	ldr	r0, [pc, #376]	; (8006400 <_printf_i+0x244>)
 8006286:	230a      	movs	r3, #10
 8006288:	e019      	b.n	80062be <_printf_i+0x102>
 800628a:	680e      	ldr	r6, [r1, #0]
 800628c:	602b      	str	r3, [r5, #0]
 800628e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8006292:	bf18      	it	ne
 8006294:	b236      	sxthne	r6, r6
 8006296:	e7ef      	b.n	8006278 <_printf_i+0xbc>
 8006298:	682b      	ldr	r3, [r5, #0]
 800629a:	6820      	ldr	r0, [r4, #0]
 800629c:	1d19      	adds	r1, r3, #4
 800629e:	6029      	str	r1, [r5, #0]
 80062a0:	0601      	lsls	r1, r0, #24
 80062a2:	d501      	bpl.n	80062a8 <_printf_i+0xec>
 80062a4:	681e      	ldr	r6, [r3, #0]
 80062a6:	e002      	b.n	80062ae <_printf_i+0xf2>
 80062a8:	0646      	lsls	r6, r0, #25
 80062aa:	d5fb      	bpl.n	80062a4 <_printf_i+0xe8>
 80062ac:	881e      	ldrh	r6, [r3, #0]
 80062ae:	4854      	ldr	r0, [pc, #336]	; (8006400 <_printf_i+0x244>)
 80062b0:	2f6f      	cmp	r7, #111	; 0x6f
 80062b2:	bf0c      	ite	eq
 80062b4:	2308      	moveq	r3, #8
 80062b6:	230a      	movne	r3, #10
 80062b8:	2100      	movs	r1, #0
 80062ba:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80062be:	6865      	ldr	r5, [r4, #4]
 80062c0:	60a5      	str	r5, [r4, #8]
 80062c2:	2d00      	cmp	r5, #0
 80062c4:	bfa2      	ittt	ge
 80062c6:	6821      	ldrge	r1, [r4, #0]
 80062c8:	f021 0104 	bicge.w	r1, r1, #4
 80062cc:	6021      	strge	r1, [r4, #0]
 80062ce:	b90e      	cbnz	r6, 80062d4 <_printf_i+0x118>
 80062d0:	2d00      	cmp	r5, #0
 80062d2:	d04d      	beq.n	8006370 <_printf_i+0x1b4>
 80062d4:	4615      	mov	r5, r2
 80062d6:	fbb6 f1f3 	udiv	r1, r6, r3
 80062da:	fb03 6711 	mls	r7, r3, r1, r6
 80062de:	5dc7      	ldrb	r7, [r0, r7]
 80062e0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80062e4:	4637      	mov	r7, r6
 80062e6:	42bb      	cmp	r3, r7
 80062e8:	460e      	mov	r6, r1
 80062ea:	d9f4      	bls.n	80062d6 <_printf_i+0x11a>
 80062ec:	2b08      	cmp	r3, #8
 80062ee:	d10b      	bne.n	8006308 <_printf_i+0x14c>
 80062f0:	6823      	ldr	r3, [r4, #0]
 80062f2:	07de      	lsls	r6, r3, #31
 80062f4:	d508      	bpl.n	8006308 <_printf_i+0x14c>
 80062f6:	6923      	ldr	r3, [r4, #16]
 80062f8:	6861      	ldr	r1, [r4, #4]
 80062fa:	4299      	cmp	r1, r3
 80062fc:	bfde      	ittt	le
 80062fe:	2330      	movle	r3, #48	; 0x30
 8006300:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006304:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006308:	1b52      	subs	r2, r2, r5
 800630a:	6122      	str	r2, [r4, #16]
 800630c:	f8cd a000 	str.w	sl, [sp]
 8006310:	464b      	mov	r3, r9
 8006312:	aa03      	add	r2, sp, #12
 8006314:	4621      	mov	r1, r4
 8006316:	4640      	mov	r0, r8
 8006318:	f7ff fee2 	bl	80060e0 <_printf_common>
 800631c:	3001      	adds	r0, #1
 800631e:	d14c      	bne.n	80063ba <_printf_i+0x1fe>
 8006320:	f04f 30ff 	mov.w	r0, #4294967295
 8006324:	b004      	add	sp, #16
 8006326:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800632a:	4835      	ldr	r0, [pc, #212]	; (8006400 <_printf_i+0x244>)
 800632c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8006330:	6829      	ldr	r1, [r5, #0]
 8006332:	6823      	ldr	r3, [r4, #0]
 8006334:	f851 6b04 	ldr.w	r6, [r1], #4
 8006338:	6029      	str	r1, [r5, #0]
 800633a:	061d      	lsls	r5, r3, #24
 800633c:	d514      	bpl.n	8006368 <_printf_i+0x1ac>
 800633e:	07df      	lsls	r7, r3, #31
 8006340:	bf44      	itt	mi
 8006342:	f043 0320 	orrmi.w	r3, r3, #32
 8006346:	6023      	strmi	r3, [r4, #0]
 8006348:	b91e      	cbnz	r6, 8006352 <_printf_i+0x196>
 800634a:	6823      	ldr	r3, [r4, #0]
 800634c:	f023 0320 	bic.w	r3, r3, #32
 8006350:	6023      	str	r3, [r4, #0]
 8006352:	2310      	movs	r3, #16
 8006354:	e7b0      	b.n	80062b8 <_printf_i+0xfc>
 8006356:	6823      	ldr	r3, [r4, #0]
 8006358:	f043 0320 	orr.w	r3, r3, #32
 800635c:	6023      	str	r3, [r4, #0]
 800635e:	2378      	movs	r3, #120	; 0x78
 8006360:	4828      	ldr	r0, [pc, #160]	; (8006404 <_printf_i+0x248>)
 8006362:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006366:	e7e3      	b.n	8006330 <_printf_i+0x174>
 8006368:	0659      	lsls	r1, r3, #25
 800636a:	bf48      	it	mi
 800636c:	b2b6      	uxthmi	r6, r6
 800636e:	e7e6      	b.n	800633e <_printf_i+0x182>
 8006370:	4615      	mov	r5, r2
 8006372:	e7bb      	b.n	80062ec <_printf_i+0x130>
 8006374:	682b      	ldr	r3, [r5, #0]
 8006376:	6826      	ldr	r6, [r4, #0]
 8006378:	6961      	ldr	r1, [r4, #20]
 800637a:	1d18      	adds	r0, r3, #4
 800637c:	6028      	str	r0, [r5, #0]
 800637e:	0635      	lsls	r5, r6, #24
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	d501      	bpl.n	8006388 <_printf_i+0x1cc>
 8006384:	6019      	str	r1, [r3, #0]
 8006386:	e002      	b.n	800638e <_printf_i+0x1d2>
 8006388:	0670      	lsls	r0, r6, #25
 800638a:	d5fb      	bpl.n	8006384 <_printf_i+0x1c8>
 800638c:	8019      	strh	r1, [r3, #0]
 800638e:	2300      	movs	r3, #0
 8006390:	6123      	str	r3, [r4, #16]
 8006392:	4615      	mov	r5, r2
 8006394:	e7ba      	b.n	800630c <_printf_i+0x150>
 8006396:	682b      	ldr	r3, [r5, #0]
 8006398:	1d1a      	adds	r2, r3, #4
 800639a:	602a      	str	r2, [r5, #0]
 800639c:	681d      	ldr	r5, [r3, #0]
 800639e:	6862      	ldr	r2, [r4, #4]
 80063a0:	2100      	movs	r1, #0
 80063a2:	4628      	mov	r0, r5
 80063a4:	f7f9 ff1c 	bl	80001e0 <memchr>
 80063a8:	b108      	cbz	r0, 80063ae <_printf_i+0x1f2>
 80063aa:	1b40      	subs	r0, r0, r5
 80063ac:	6060      	str	r0, [r4, #4]
 80063ae:	6863      	ldr	r3, [r4, #4]
 80063b0:	6123      	str	r3, [r4, #16]
 80063b2:	2300      	movs	r3, #0
 80063b4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80063b8:	e7a8      	b.n	800630c <_printf_i+0x150>
 80063ba:	6923      	ldr	r3, [r4, #16]
 80063bc:	462a      	mov	r2, r5
 80063be:	4649      	mov	r1, r9
 80063c0:	4640      	mov	r0, r8
 80063c2:	47d0      	blx	sl
 80063c4:	3001      	adds	r0, #1
 80063c6:	d0ab      	beq.n	8006320 <_printf_i+0x164>
 80063c8:	6823      	ldr	r3, [r4, #0]
 80063ca:	079b      	lsls	r3, r3, #30
 80063cc:	d413      	bmi.n	80063f6 <_printf_i+0x23a>
 80063ce:	68e0      	ldr	r0, [r4, #12]
 80063d0:	9b03      	ldr	r3, [sp, #12]
 80063d2:	4298      	cmp	r0, r3
 80063d4:	bfb8      	it	lt
 80063d6:	4618      	movlt	r0, r3
 80063d8:	e7a4      	b.n	8006324 <_printf_i+0x168>
 80063da:	2301      	movs	r3, #1
 80063dc:	4632      	mov	r2, r6
 80063de:	4649      	mov	r1, r9
 80063e0:	4640      	mov	r0, r8
 80063e2:	47d0      	blx	sl
 80063e4:	3001      	adds	r0, #1
 80063e6:	d09b      	beq.n	8006320 <_printf_i+0x164>
 80063e8:	3501      	adds	r5, #1
 80063ea:	68e3      	ldr	r3, [r4, #12]
 80063ec:	9903      	ldr	r1, [sp, #12]
 80063ee:	1a5b      	subs	r3, r3, r1
 80063f0:	42ab      	cmp	r3, r5
 80063f2:	dcf2      	bgt.n	80063da <_printf_i+0x21e>
 80063f4:	e7eb      	b.n	80063ce <_printf_i+0x212>
 80063f6:	2500      	movs	r5, #0
 80063f8:	f104 0619 	add.w	r6, r4, #25
 80063fc:	e7f5      	b.n	80063ea <_printf_i+0x22e>
 80063fe:	bf00      	nop
 8006400:	080067c9 	.word	0x080067c9
 8006404:	080067da 	.word	0x080067da

08006408 <_putc_r>:
 8006408:	b570      	push	{r4, r5, r6, lr}
 800640a:	460d      	mov	r5, r1
 800640c:	4614      	mov	r4, r2
 800640e:	4606      	mov	r6, r0
 8006410:	b118      	cbz	r0, 800641a <_putc_r+0x12>
 8006412:	6983      	ldr	r3, [r0, #24]
 8006414:	b90b      	cbnz	r3, 800641a <_putc_r+0x12>
 8006416:	f7ff f8ef 	bl	80055f8 <__sinit>
 800641a:	4b1c      	ldr	r3, [pc, #112]	; (800648c <_putc_r+0x84>)
 800641c:	429c      	cmp	r4, r3
 800641e:	d124      	bne.n	800646a <_putc_r+0x62>
 8006420:	6874      	ldr	r4, [r6, #4]
 8006422:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006424:	07d8      	lsls	r0, r3, #31
 8006426:	d405      	bmi.n	8006434 <_putc_r+0x2c>
 8006428:	89a3      	ldrh	r3, [r4, #12]
 800642a:	0599      	lsls	r1, r3, #22
 800642c:	d402      	bmi.n	8006434 <_putc_r+0x2c>
 800642e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006430:	f7ff f9a5 	bl	800577e <__retarget_lock_acquire_recursive>
 8006434:	68a3      	ldr	r3, [r4, #8]
 8006436:	3b01      	subs	r3, #1
 8006438:	2b00      	cmp	r3, #0
 800643a:	60a3      	str	r3, [r4, #8]
 800643c:	da05      	bge.n	800644a <_putc_r+0x42>
 800643e:	69a2      	ldr	r2, [r4, #24]
 8006440:	4293      	cmp	r3, r2
 8006442:	db1c      	blt.n	800647e <_putc_r+0x76>
 8006444:	b2eb      	uxtb	r3, r5
 8006446:	2b0a      	cmp	r3, #10
 8006448:	d019      	beq.n	800647e <_putc_r+0x76>
 800644a:	6823      	ldr	r3, [r4, #0]
 800644c:	1c5a      	adds	r2, r3, #1
 800644e:	6022      	str	r2, [r4, #0]
 8006450:	701d      	strb	r5, [r3, #0]
 8006452:	b2ed      	uxtb	r5, r5
 8006454:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006456:	07da      	lsls	r2, r3, #31
 8006458:	d405      	bmi.n	8006466 <_putc_r+0x5e>
 800645a:	89a3      	ldrh	r3, [r4, #12]
 800645c:	059b      	lsls	r3, r3, #22
 800645e:	d402      	bmi.n	8006466 <_putc_r+0x5e>
 8006460:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006462:	f7ff f98d 	bl	8005780 <__retarget_lock_release_recursive>
 8006466:	4628      	mov	r0, r5
 8006468:	bd70      	pop	{r4, r5, r6, pc}
 800646a:	4b09      	ldr	r3, [pc, #36]	; (8006490 <_putc_r+0x88>)
 800646c:	429c      	cmp	r4, r3
 800646e:	d101      	bne.n	8006474 <_putc_r+0x6c>
 8006470:	68b4      	ldr	r4, [r6, #8]
 8006472:	e7d6      	b.n	8006422 <_putc_r+0x1a>
 8006474:	4b07      	ldr	r3, [pc, #28]	; (8006494 <_putc_r+0x8c>)
 8006476:	429c      	cmp	r4, r3
 8006478:	bf08      	it	eq
 800647a:	68f4      	ldreq	r4, [r6, #12]
 800647c:	e7d1      	b.n	8006422 <_putc_r+0x1a>
 800647e:	4629      	mov	r1, r5
 8006480:	4622      	mov	r2, r4
 8006482:	4630      	mov	r0, r6
 8006484:	f7ff fb6c 	bl	8005b60 <__swbuf_r>
 8006488:	4605      	mov	r5, r0
 800648a:	e7e3      	b.n	8006454 <_putc_r+0x4c>
 800648c:	08006774 	.word	0x08006774
 8006490:	08006794 	.word	0x08006794
 8006494:	08006754 	.word	0x08006754

08006498 <_read_r>:
 8006498:	b538      	push	{r3, r4, r5, lr}
 800649a:	4d07      	ldr	r5, [pc, #28]	; (80064b8 <_read_r+0x20>)
 800649c:	4604      	mov	r4, r0
 800649e:	4608      	mov	r0, r1
 80064a0:	4611      	mov	r1, r2
 80064a2:	2200      	movs	r2, #0
 80064a4:	602a      	str	r2, [r5, #0]
 80064a6:	461a      	mov	r2, r3
 80064a8:	f7fb f9a6 	bl	80017f8 <_read>
 80064ac:	1c43      	adds	r3, r0, #1
 80064ae:	d102      	bne.n	80064b6 <_read_r+0x1e>
 80064b0:	682b      	ldr	r3, [r5, #0]
 80064b2:	b103      	cbz	r3, 80064b6 <_read_r+0x1e>
 80064b4:	6023      	str	r3, [r4, #0]
 80064b6:	bd38      	pop	{r3, r4, r5, pc}
 80064b8:	2000056c 	.word	0x2000056c

080064bc <_fstat_r>:
 80064bc:	b538      	push	{r3, r4, r5, lr}
 80064be:	4d07      	ldr	r5, [pc, #28]	; (80064dc <_fstat_r+0x20>)
 80064c0:	2300      	movs	r3, #0
 80064c2:	4604      	mov	r4, r0
 80064c4:	4608      	mov	r0, r1
 80064c6:	4611      	mov	r1, r2
 80064c8:	602b      	str	r3, [r5, #0]
 80064ca:	f7fb f9da 	bl	8001882 <_fstat>
 80064ce:	1c43      	adds	r3, r0, #1
 80064d0:	d102      	bne.n	80064d8 <_fstat_r+0x1c>
 80064d2:	682b      	ldr	r3, [r5, #0]
 80064d4:	b103      	cbz	r3, 80064d8 <_fstat_r+0x1c>
 80064d6:	6023      	str	r3, [r4, #0]
 80064d8:	bd38      	pop	{r3, r4, r5, pc}
 80064da:	bf00      	nop
 80064dc:	2000056c 	.word	0x2000056c

080064e0 <_isatty_r>:
 80064e0:	b538      	push	{r3, r4, r5, lr}
 80064e2:	4d06      	ldr	r5, [pc, #24]	; (80064fc <_isatty_r+0x1c>)
 80064e4:	2300      	movs	r3, #0
 80064e6:	4604      	mov	r4, r0
 80064e8:	4608      	mov	r0, r1
 80064ea:	602b      	str	r3, [r5, #0]
 80064ec:	f7fb f9d9 	bl	80018a2 <_isatty>
 80064f0:	1c43      	adds	r3, r0, #1
 80064f2:	d102      	bne.n	80064fa <_isatty_r+0x1a>
 80064f4:	682b      	ldr	r3, [r5, #0]
 80064f6:	b103      	cbz	r3, 80064fa <_isatty_r+0x1a>
 80064f8:	6023      	str	r3, [r4, #0]
 80064fa:	bd38      	pop	{r3, r4, r5, pc}
 80064fc:	2000056c 	.word	0x2000056c

08006500 <_init>:
 8006500:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006502:	bf00      	nop
 8006504:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006506:	bc08      	pop	{r3}
 8006508:	469e      	mov	lr, r3
 800650a:	4770      	bx	lr

0800650c <_fini>:
 800650c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800650e:	bf00      	nop
 8006510:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006512:	bc08      	pop	{r3}
 8006514:	469e      	mov	lr, r3
 8006516:	4770      	bx	lr
