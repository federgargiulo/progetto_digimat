
Digimat_dataloger_v1.3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000deec  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000588  0800e08c  0800e08c  0001e08c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e614  0800e614  0002015c  2**0
                  CONTENTS
  4 .ARM          00000008  0800e614  0800e614  0001e614  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800e61c  0800e61c  0002015c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800e61c  0800e61c  0001e61c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800e620  0800e620  0001e620  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000015c  20000000  0800e624  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00016f64  2000015c  0800e780  0002015c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200170c0  0800e780  000270c0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002015c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00035a20  00000000  00000000  0002018c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004055  00000000  00000000  00055bac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002aa8  00000000  00000000  00059c08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00002930  00000000  00000000  0005c6b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001b41c  00000000  00000000  0005efe0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00028871  00000000  00000000  0007a3fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a2956  00000000  00000000  000a2c6d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001455c3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000bd2c  00000000  00000000  00145614  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000015c 	.word	0x2000015c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800e074 	.word	0x0800e074

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000160 	.word	0x20000160
 80001dc:	0800e074 	.word	0x0800e074

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b974 	b.w	8000590 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	4604      	mov	r4, r0
 80002c8:	468e      	mov	lr, r1
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	d14d      	bne.n	800036a <__udivmoddi4+0xaa>
 80002ce:	428a      	cmp	r2, r1
 80002d0:	4694      	mov	ip, r2
 80002d2:	d969      	bls.n	80003a8 <__udivmoddi4+0xe8>
 80002d4:	fab2 f282 	clz	r2, r2
 80002d8:	b152      	cbz	r2, 80002f0 <__udivmoddi4+0x30>
 80002da:	fa01 f302 	lsl.w	r3, r1, r2
 80002de:	f1c2 0120 	rsb	r1, r2, #32
 80002e2:	fa20 f101 	lsr.w	r1, r0, r1
 80002e6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002ea:	ea41 0e03 	orr.w	lr, r1, r3
 80002ee:	4094      	lsls	r4, r2
 80002f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002f4:	0c21      	lsrs	r1, r4, #16
 80002f6:	fbbe f6f8 	udiv	r6, lr, r8
 80002fa:	fa1f f78c 	uxth.w	r7, ip
 80002fe:	fb08 e316 	mls	r3, r8, r6, lr
 8000302:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000306:	fb06 f107 	mul.w	r1, r6, r7
 800030a:	4299      	cmp	r1, r3
 800030c:	d90a      	bls.n	8000324 <__udivmoddi4+0x64>
 800030e:	eb1c 0303 	adds.w	r3, ip, r3
 8000312:	f106 30ff 	add.w	r0, r6, #4294967295
 8000316:	f080 811f 	bcs.w	8000558 <__udivmoddi4+0x298>
 800031a:	4299      	cmp	r1, r3
 800031c:	f240 811c 	bls.w	8000558 <__udivmoddi4+0x298>
 8000320:	3e02      	subs	r6, #2
 8000322:	4463      	add	r3, ip
 8000324:	1a5b      	subs	r3, r3, r1
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb3 f0f8 	udiv	r0, r3, r8
 800032c:	fb08 3310 	mls	r3, r8, r0, r3
 8000330:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000334:	fb00 f707 	mul.w	r7, r0, r7
 8000338:	42a7      	cmp	r7, r4
 800033a:	d90a      	bls.n	8000352 <__udivmoddi4+0x92>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 33ff 	add.w	r3, r0, #4294967295
 8000344:	f080 810a 	bcs.w	800055c <__udivmoddi4+0x29c>
 8000348:	42a7      	cmp	r7, r4
 800034a:	f240 8107 	bls.w	800055c <__udivmoddi4+0x29c>
 800034e:	4464      	add	r4, ip
 8000350:	3802      	subs	r0, #2
 8000352:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000356:	1be4      	subs	r4, r4, r7
 8000358:	2600      	movs	r6, #0
 800035a:	b11d      	cbz	r5, 8000364 <__udivmoddi4+0xa4>
 800035c:	40d4      	lsrs	r4, r2
 800035e:	2300      	movs	r3, #0
 8000360:	e9c5 4300 	strd	r4, r3, [r5]
 8000364:	4631      	mov	r1, r6
 8000366:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036a:	428b      	cmp	r3, r1
 800036c:	d909      	bls.n	8000382 <__udivmoddi4+0xc2>
 800036e:	2d00      	cmp	r5, #0
 8000370:	f000 80ef 	beq.w	8000552 <__udivmoddi4+0x292>
 8000374:	2600      	movs	r6, #0
 8000376:	e9c5 0100 	strd	r0, r1, [r5]
 800037a:	4630      	mov	r0, r6
 800037c:	4631      	mov	r1, r6
 800037e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000382:	fab3 f683 	clz	r6, r3
 8000386:	2e00      	cmp	r6, #0
 8000388:	d14a      	bne.n	8000420 <__udivmoddi4+0x160>
 800038a:	428b      	cmp	r3, r1
 800038c:	d302      	bcc.n	8000394 <__udivmoddi4+0xd4>
 800038e:	4282      	cmp	r2, r0
 8000390:	f200 80f9 	bhi.w	8000586 <__udivmoddi4+0x2c6>
 8000394:	1a84      	subs	r4, r0, r2
 8000396:	eb61 0303 	sbc.w	r3, r1, r3
 800039a:	2001      	movs	r0, #1
 800039c:	469e      	mov	lr, r3
 800039e:	2d00      	cmp	r5, #0
 80003a0:	d0e0      	beq.n	8000364 <__udivmoddi4+0xa4>
 80003a2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003a6:	e7dd      	b.n	8000364 <__udivmoddi4+0xa4>
 80003a8:	b902      	cbnz	r2, 80003ac <__udivmoddi4+0xec>
 80003aa:	deff      	udf	#255	; 0xff
 80003ac:	fab2 f282 	clz	r2, r2
 80003b0:	2a00      	cmp	r2, #0
 80003b2:	f040 8092 	bne.w	80004da <__udivmoddi4+0x21a>
 80003b6:	eba1 010c 	sub.w	r1, r1, ip
 80003ba:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003be:	fa1f fe8c 	uxth.w	lr, ip
 80003c2:	2601      	movs	r6, #1
 80003c4:	0c20      	lsrs	r0, r4, #16
 80003c6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ca:	fb07 1113 	mls	r1, r7, r3, r1
 80003ce:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003d2:	fb0e f003 	mul.w	r0, lr, r3
 80003d6:	4288      	cmp	r0, r1
 80003d8:	d908      	bls.n	80003ec <__udivmoddi4+0x12c>
 80003da:	eb1c 0101 	adds.w	r1, ip, r1
 80003de:	f103 38ff 	add.w	r8, r3, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x12a>
 80003e4:	4288      	cmp	r0, r1
 80003e6:	f200 80cb 	bhi.w	8000580 <__udivmoddi4+0x2c0>
 80003ea:	4643      	mov	r3, r8
 80003ec:	1a09      	subs	r1, r1, r0
 80003ee:	b2a4      	uxth	r4, r4
 80003f0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003f4:	fb07 1110 	mls	r1, r7, r0, r1
 80003f8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003fc:	fb0e fe00 	mul.w	lr, lr, r0
 8000400:	45a6      	cmp	lr, r4
 8000402:	d908      	bls.n	8000416 <__udivmoddi4+0x156>
 8000404:	eb1c 0404 	adds.w	r4, ip, r4
 8000408:	f100 31ff 	add.w	r1, r0, #4294967295
 800040c:	d202      	bcs.n	8000414 <__udivmoddi4+0x154>
 800040e:	45a6      	cmp	lr, r4
 8000410:	f200 80bb 	bhi.w	800058a <__udivmoddi4+0x2ca>
 8000414:	4608      	mov	r0, r1
 8000416:	eba4 040e 	sub.w	r4, r4, lr
 800041a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800041e:	e79c      	b.n	800035a <__udivmoddi4+0x9a>
 8000420:	f1c6 0720 	rsb	r7, r6, #32
 8000424:	40b3      	lsls	r3, r6
 8000426:	fa22 fc07 	lsr.w	ip, r2, r7
 800042a:	ea4c 0c03 	orr.w	ip, ip, r3
 800042e:	fa20 f407 	lsr.w	r4, r0, r7
 8000432:	fa01 f306 	lsl.w	r3, r1, r6
 8000436:	431c      	orrs	r4, r3
 8000438:	40f9      	lsrs	r1, r7
 800043a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800043e:	fa00 f306 	lsl.w	r3, r0, r6
 8000442:	fbb1 f8f9 	udiv	r8, r1, r9
 8000446:	0c20      	lsrs	r0, r4, #16
 8000448:	fa1f fe8c 	uxth.w	lr, ip
 800044c:	fb09 1118 	mls	r1, r9, r8, r1
 8000450:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000454:	fb08 f00e 	mul.w	r0, r8, lr
 8000458:	4288      	cmp	r0, r1
 800045a:	fa02 f206 	lsl.w	r2, r2, r6
 800045e:	d90b      	bls.n	8000478 <__udivmoddi4+0x1b8>
 8000460:	eb1c 0101 	adds.w	r1, ip, r1
 8000464:	f108 3aff 	add.w	sl, r8, #4294967295
 8000468:	f080 8088 	bcs.w	800057c <__udivmoddi4+0x2bc>
 800046c:	4288      	cmp	r0, r1
 800046e:	f240 8085 	bls.w	800057c <__udivmoddi4+0x2bc>
 8000472:	f1a8 0802 	sub.w	r8, r8, #2
 8000476:	4461      	add	r1, ip
 8000478:	1a09      	subs	r1, r1, r0
 800047a:	b2a4      	uxth	r4, r4
 800047c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000480:	fb09 1110 	mls	r1, r9, r0, r1
 8000484:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000488:	fb00 fe0e 	mul.w	lr, r0, lr
 800048c:	458e      	cmp	lr, r1
 800048e:	d908      	bls.n	80004a2 <__udivmoddi4+0x1e2>
 8000490:	eb1c 0101 	adds.w	r1, ip, r1
 8000494:	f100 34ff 	add.w	r4, r0, #4294967295
 8000498:	d26c      	bcs.n	8000574 <__udivmoddi4+0x2b4>
 800049a:	458e      	cmp	lr, r1
 800049c:	d96a      	bls.n	8000574 <__udivmoddi4+0x2b4>
 800049e:	3802      	subs	r0, #2
 80004a0:	4461      	add	r1, ip
 80004a2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004a6:	fba0 9402 	umull	r9, r4, r0, r2
 80004aa:	eba1 010e 	sub.w	r1, r1, lr
 80004ae:	42a1      	cmp	r1, r4
 80004b0:	46c8      	mov	r8, r9
 80004b2:	46a6      	mov	lr, r4
 80004b4:	d356      	bcc.n	8000564 <__udivmoddi4+0x2a4>
 80004b6:	d053      	beq.n	8000560 <__udivmoddi4+0x2a0>
 80004b8:	b15d      	cbz	r5, 80004d2 <__udivmoddi4+0x212>
 80004ba:	ebb3 0208 	subs.w	r2, r3, r8
 80004be:	eb61 010e 	sbc.w	r1, r1, lr
 80004c2:	fa01 f707 	lsl.w	r7, r1, r7
 80004c6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ca:	40f1      	lsrs	r1, r6
 80004cc:	431f      	orrs	r7, r3
 80004ce:	e9c5 7100 	strd	r7, r1, [r5]
 80004d2:	2600      	movs	r6, #0
 80004d4:	4631      	mov	r1, r6
 80004d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004da:	f1c2 0320 	rsb	r3, r2, #32
 80004de:	40d8      	lsrs	r0, r3
 80004e0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004e4:	fa21 f303 	lsr.w	r3, r1, r3
 80004e8:	4091      	lsls	r1, r2
 80004ea:	4301      	orrs	r1, r0
 80004ec:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004f0:	fa1f fe8c 	uxth.w	lr, ip
 80004f4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004f8:	fb07 3610 	mls	r6, r7, r0, r3
 80004fc:	0c0b      	lsrs	r3, r1, #16
 80004fe:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000502:	fb00 f60e 	mul.w	r6, r0, lr
 8000506:	429e      	cmp	r6, r3
 8000508:	fa04 f402 	lsl.w	r4, r4, r2
 800050c:	d908      	bls.n	8000520 <__udivmoddi4+0x260>
 800050e:	eb1c 0303 	adds.w	r3, ip, r3
 8000512:	f100 38ff 	add.w	r8, r0, #4294967295
 8000516:	d22f      	bcs.n	8000578 <__udivmoddi4+0x2b8>
 8000518:	429e      	cmp	r6, r3
 800051a:	d92d      	bls.n	8000578 <__udivmoddi4+0x2b8>
 800051c:	3802      	subs	r0, #2
 800051e:	4463      	add	r3, ip
 8000520:	1b9b      	subs	r3, r3, r6
 8000522:	b289      	uxth	r1, r1
 8000524:	fbb3 f6f7 	udiv	r6, r3, r7
 8000528:	fb07 3316 	mls	r3, r7, r6, r3
 800052c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000530:	fb06 f30e 	mul.w	r3, r6, lr
 8000534:	428b      	cmp	r3, r1
 8000536:	d908      	bls.n	800054a <__udivmoddi4+0x28a>
 8000538:	eb1c 0101 	adds.w	r1, ip, r1
 800053c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000540:	d216      	bcs.n	8000570 <__udivmoddi4+0x2b0>
 8000542:	428b      	cmp	r3, r1
 8000544:	d914      	bls.n	8000570 <__udivmoddi4+0x2b0>
 8000546:	3e02      	subs	r6, #2
 8000548:	4461      	add	r1, ip
 800054a:	1ac9      	subs	r1, r1, r3
 800054c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000550:	e738      	b.n	80003c4 <__udivmoddi4+0x104>
 8000552:	462e      	mov	r6, r5
 8000554:	4628      	mov	r0, r5
 8000556:	e705      	b.n	8000364 <__udivmoddi4+0xa4>
 8000558:	4606      	mov	r6, r0
 800055a:	e6e3      	b.n	8000324 <__udivmoddi4+0x64>
 800055c:	4618      	mov	r0, r3
 800055e:	e6f8      	b.n	8000352 <__udivmoddi4+0x92>
 8000560:	454b      	cmp	r3, r9
 8000562:	d2a9      	bcs.n	80004b8 <__udivmoddi4+0x1f8>
 8000564:	ebb9 0802 	subs.w	r8, r9, r2
 8000568:	eb64 0e0c 	sbc.w	lr, r4, ip
 800056c:	3801      	subs	r0, #1
 800056e:	e7a3      	b.n	80004b8 <__udivmoddi4+0x1f8>
 8000570:	4646      	mov	r6, r8
 8000572:	e7ea      	b.n	800054a <__udivmoddi4+0x28a>
 8000574:	4620      	mov	r0, r4
 8000576:	e794      	b.n	80004a2 <__udivmoddi4+0x1e2>
 8000578:	4640      	mov	r0, r8
 800057a:	e7d1      	b.n	8000520 <__udivmoddi4+0x260>
 800057c:	46d0      	mov	r8, sl
 800057e:	e77b      	b.n	8000478 <__udivmoddi4+0x1b8>
 8000580:	3b02      	subs	r3, #2
 8000582:	4461      	add	r1, ip
 8000584:	e732      	b.n	80003ec <__udivmoddi4+0x12c>
 8000586:	4630      	mov	r0, r6
 8000588:	e709      	b.n	800039e <__udivmoddi4+0xde>
 800058a:	4464      	add	r4, ip
 800058c:	3802      	subs	r0, #2
 800058e:	e742      	b.n	8000416 <__udivmoddi4+0x156>

08000590 <__aeabi_idiv0>:
 8000590:	4770      	bx	lr
 8000592:	bf00      	nop

08000594 <SELECT>:
 * SPI functions
 **************************************/

/* slave select */
static void SELECT(void)
{
 8000594:	b580      	push	{r7, lr}
 8000596:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_RESET);
 8000598:	2200      	movs	r2, #0
 800059a:	2110      	movs	r1, #16
 800059c:	4803      	ldr	r0, [pc, #12]	; (80005ac <SELECT+0x18>)
 800059e:	f006 ffa9 	bl	80074f4 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 80005a2:	2001      	movs	r0, #1
 80005a4:	f006 fc08 	bl	8006db8 <HAL_Delay>
}
 80005a8:	bf00      	nop
 80005aa:	bd80      	pop	{r7, pc}
 80005ac:	40020000 	.word	0x40020000

080005b0 <DESELECT>:

/* slave deselect */
static void DESELECT(void)
{
 80005b0:	b580      	push	{r7, lr}
 80005b2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_SET);
 80005b4:	2201      	movs	r2, #1
 80005b6:	2110      	movs	r1, #16
 80005b8:	4803      	ldr	r0, [pc, #12]	; (80005c8 <DESELECT+0x18>)
 80005ba:	f006 ff9b 	bl	80074f4 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 80005be:	2001      	movs	r0, #1
 80005c0:	f006 fbfa 	bl	8006db8 <HAL_Delay>
}
 80005c4:	bf00      	nop
 80005c6:	bd80      	pop	{r7, pc}
 80005c8:	40020000 	.word	0x40020000

080005cc <SPI_TxByte>:

/* SPI transmit a byte */
static void SPI_TxByte(uint8_t data)
{
 80005cc:	b580      	push	{r7, lr}
 80005ce:	b082      	sub	sp, #8
 80005d0:	af00      	add	r7, sp, #0
 80005d2:	4603      	mov	r3, r0
 80005d4:	71fb      	strb	r3, [r7, #7]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 80005d6:	bf00      	nop
 80005d8:	4b08      	ldr	r3, [pc, #32]	; (80005fc <SPI_TxByte+0x30>)
 80005da:	681b      	ldr	r3, [r3, #0]
 80005dc:	689b      	ldr	r3, [r3, #8]
 80005de:	f003 0302 	and.w	r3, r3, #2
 80005e2:	2b02      	cmp	r3, #2
 80005e4:	d1f8      	bne.n	80005d8 <SPI_TxByte+0xc>
	HAL_SPI_Transmit(HSPI_SDCARD, &data, 1, SPI_TIMEOUT);
 80005e6:	1df9      	adds	r1, r7, #7
 80005e8:	2364      	movs	r3, #100	; 0x64
 80005ea:	2201      	movs	r2, #1
 80005ec:	4803      	ldr	r0, [pc, #12]	; (80005fc <SPI_TxByte+0x30>)
 80005ee:	f008 fcfe 	bl	8008fee <HAL_SPI_Transmit>
}
 80005f2:	bf00      	nop
 80005f4:	3708      	adds	r7, #8
 80005f6:	46bd      	mov	sp, r7
 80005f8:	bd80      	pop	{r7, pc}
 80005fa:	bf00      	nop
 80005fc:	2000017c 	.word	0x2000017c

08000600 <SPI_TxBuffer>:

/* SPI transmit buffer */
static void SPI_TxBuffer(uint8_t *buffer, uint16_t len)
{
 8000600:	b580      	push	{r7, lr}
 8000602:	b082      	sub	sp, #8
 8000604:	af00      	add	r7, sp, #0
 8000606:	6078      	str	r0, [r7, #4]
 8000608:	460b      	mov	r3, r1
 800060a:	807b      	strh	r3, [r7, #2]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 800060c:	bf00      	nop
 800060e:	4b08      	ldr	r3, [pc, #32]	; (8000630 <SPI_TxBuffer+0x30>)
 8000610:	681b      	ldr	r3, [r3, #0]
 8000612:	689b      	ldr	r3, [r3, #8]
 8000614:	f003 0302 	and.w	r3, r3, #2
 8000618:	2b02      	cmp	r3, #2
 800061a:	d1f8      	bne.n	800060e <SPI_TxBuffer+0xe>
	HAL_SPI_Transmit(HSPI_SDCARD, buffer, len, SPI_TIMEOUT);
 800061c:	887a      	ldrh	r2, [r7, #2]
 800061e:	2364      	movs	r3, #100	; 0x64
 8000620:	6879      	ldr	r1, [r7, #4]
 8000622:	4803      	ldr	r0, [pc, #12]	; (8000630 <SPI_TxBuffer+0x30>)
 8000624:	f008 fce3 	bl	8008fee <HAL_SPI_Transmit>
}
 8000628:	bf00      	nop
 800062a:	3708      	adds	r7, #8
 800062c:	46bd      	mov	sp, r7
 800062e:	bd80      	pop	{r7, pc}
 8000630:	2000017c 	.word	0x2000017c

08000634 <SPI_RxByte>:

/* SPI receive a byte */
static uint8_t SPI_RxByte(void)
{
 8000634:	b580      	push	{r7, lr}
 8000636:	b084      	sub	sp, #16
 8000638:	af02      	add	r7, sp, #8
	uint8_t dummy, data;
	dummy = 0xFF;
 800063a:	23ff      	movs	r3, #255	; 0xff
 800063c:	71fb      	strb	r3, [r7, #7]

	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 800063e:	bf00      	nop
 8000640:	4b09      	ldr	r3, [pc, #36]	; (8000668 <SPI_RxByte+0x34>)
 8000642:	681b      	ldr	r3, [r3, #0]
 8000644:	689b      	ldr	r3, [r3, #8]
 8000646:	f003 0302 	and.w	r3, r3, #2
 800064a:	2b02      	cmp	r3, #2
 800064c:	d1f8      	bne.n	8000640 <SPI_RxByte+0xc>
	HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 800064e:	1dba      	adds	r2, r7, #6
 8000650:	1df9      	adds	r1, r7, #7
 8000652:	2364      	movs	r3, #100	; 0x64
 8000654:	9300      	str	r3, [sp, #0]
 8000656:	2301      	movs	r3, #1
 8000658:	4803      	ldr	r0, [pc, #12]	; (8000668 <SPI_RxByte+0x34>)
 800065a:	f008 fe04 	bl	8009266 <HAL_SPI_TransmitReceive>

	return data;
 800065e:	79bb      	ldrb	r3, [r7, #6]
}
 8000660:	4618      	mov	r0, r3
 8000662:	3708      	adds	r7, #8
 8000664:	46bd      	mov	sp, r7
 8000666:	bd80      	pop	{r7, pc}
 8000668:	2000017c 	.word	0x2000017c

0800066c <SPI_RxBytePtr>:

/* SPI receive a byte via pointer */
static void SPI_RxBytePtr(uint8_t *buff) 
{
 800066c:	b580      	push	{r7, lr}
 800066e:	b082      	sub	sp, #8
 8000670:	af00      	add	r7, sp, #0
 8000672:	6078      	str	r0, [r7, #4]
	*buff = SPI_RxByte();
 8000674:	f7ff ffde 	bl	8000634 <SPI_RxByte>
 8000678:	4603      	mov	r3, r0
 800067a:	461a      	mov	r2, r3
 800067c:	687b      	ldr	r3, [r7, #4]
 800067e:	701a      	strb	r2, [r3, #0]
}
 8000680:	bf00      	nop
 8000682:	3708      	adds	r7, #8
 8000684:	46bd      	mov	sp, r7
 8000686:	bd80      	pop	{r7, pc}

08000688 <SD_ReadyWait>:
 * SD functions
 **************************************/

/* wait SD ready */
static uint8_t SD_ReadyWait(void)
{
 8000688:	b580      	push	{r7, lr}
 800068a:	b082      	sub	sp, #8
 800068c:	af00      	add	r7, sp, #0
	uint8_t res;

	/* timeout 500ms */
	Timer2 = 500;
 800068e:	4b0a      	ldr	r3, [pc, #40]	; (80006b8 <SD_ReadyWait+0x30>)
 8000690:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8000694:	801a      	strh	r2, [r3, #0]

	/* if SD goes ready, receives 0xFF */
	do {
		res = SPI_RxByte();
 8000696:	f7ff ffcd 	bl	8000634 <SPI_RxByte>
 800069a:	4603      	mov	r3, r0
 800069c:	71fb      	strb	r3, [r7, #7]
	} while ((res != 0xFF) && Timer2);
 800069e:	79fb      	ldrb	r3, [r7, #7]
 80006a0:	2bff      	cmp	r3, #255	; 0xff
 80006a2:	d004      	beq.n	80006ae <SD_ReadyWait+0x26>
 80006a4:	4b04      	ldr	r3, [pc, #16]	; (80006b8 <SD_ReadyWait+0x30>)
 80006a6:	881b      	ldrh	r3, [r3, #0]
 80006a8:	b29b      	uxth	r3, r3
 80006aa:	2b00      	cmp	r3, #0
 80006ac:	d1f3      	bne.n	8000696 <SD_ReadyWait+0xe>

	return res;
 80006ae:	79fb      	ldrb	r3, [r7, #7]
}
 80006b0:	4618      	mov	r0, r3
 80006b2:	3708      	adds	r7, #8
 80006b4:	46bd      	mov	sp, r7
 80006b6:	bd80      	pop	{r7, pc}
 80006b8:	20016d22 	.word	0x20016d22

080006bc <SD_PowerOn>:

/* power on */
static void SD_PowerOn(void) 
{
 80006bc:	b580      	push	{r7, lr}
 80006be:	b084      	sub	sp, #16
 80006c0:	af00      	add	r7, sp, #0
	uint8_t args[6];
	uint32_t cnt = 0x1FFF;
 80006c2:	f641 73ff 	movw	r3, #8191	; 0x1fff
 80006c6:	60fb      	str	r3, [r7, #12]

	/* transmit bytes to wake up */
	DESELECT();
 80006c8:	f7ff ff72 	bl	80005b0 <DESELECT>
	for(int i = 0; i < 10; i++)
 80006cc:	2300      	movs	r3, #0
 80006ce:	60bb      	str	r3, [r7, #8]
 80006d0:	e005      	b.n	80006de <SD_PowerOn+0x22>
	{
		SPI_TxByte(0xFF);
 80006d2:	20ff      	movs	r0, #255	; 0xff
 80006d4:	f7ff ff7a 	bl	80005cc <SPI_TxByte>
	for(int i = 0; i < 10; i++)
 80006d8:	68bb      	ldr	r3, [r7, #8]
 80006da:	3301      	adds	r3, #1
 80006dc:	60bb      	str	r3, [r7, #8]
 80006de:	68bb      	ldr	r3, [r7, #8]
 80006e0:	2b09      	cmp	r3, #9
 80006e2:	ddf6      	ble.n	80006d2 <SD_PowerOn+0x16>
	}

	/* slave select */
	SELECT();
 80006e4:	f7ff ff56 	bl	8000594 <SELECT>

	/* make idle state */
	args[0] = CMD0;		/* CMD0:GO_IDLE_STATE */
 80006e8:	2340      	movs	r3, #64	; 0x40
 80006ea:	703b      	strb	r3, [r7, #0]
	args[1] = 0;
 80006ec:	2300      	movs	r3, #0
 80006ee:	707b      	strb	r3, [r7, #1]
	args[2] = 0;
 80006f0:	2300      	movs	r3, #0
 80006f2:	70bb      	strb	r3, [r7, #2]
	args[3] = 0;
 80006f4:	2300      	movs	r3, #0
 80006f6:	70fb      	strb	r3, [r7, #3]
	args[4] = 0;
 80006f8:	2300      	movs	r3, #0
 80006fa:	713b      	strb	r3, [r7, #4]
	args[5] = 0x95;		/* CRC */
 80006fc:	2395      	movs	r3, #149	; 0x95
 80006fe:	717b      	strb	r3, [r7, #5]

	SPI_TxBuffer(args, sizeof(args));
 8000700:	463b      	mov	r3, r7
 8000702:	2106      	movs	r1, #6
 8000704:	4618      	mov	r0, r3
 8000706:	f7ff ff7b 	bl	8000600 <SPI_TxBuffer>

	/* wait response */
	while ((SPI_RxByte() != 0x01) && cnt)
 800070a:	e002      	b.n	8000712 <SD_PowerOn+0x56>
	{
		cnt--;
 800070c:	68fb      	ldr	r3, [r7, #12]
 800070e:	3b01      	subs	r3, #1
 8000710:	60fb      	str	r3, [r7, #12]
	while ((SPI_RxByte() != 0x01) && cnt)
 8000712:	f7ff ff8f 	bl	8000634 <SPI_RxByte>
 8000716:	4603      	mov	r3, r0
 8000718:	2b01      	cmp	r3, #1
 800071a:	d002      	beq.n	8000722 <SD_PowerOn+0x66>
 800071c:	68fb      	ldr	r3, [r7, #12]
 800071e:	2b00      	cmp	r3, #0
 8000720:	d1f4      	bne.n	800070c <SD_PowerOn+0x50>
	}

	DESELECT();
 8000722:	f7ff ff45 	bl	80005b0 <DESELECT>
	SPI_TxByte(0XFF);
 8000726:	20ff      	movs	r0, #255	; 0xff
 8000728:	f7ff ff50 	bl	80005cc <SPI_TxByte>

	PowerFlag = 1;
 800072c:	4b03      	ldr	r3, [pc, #12]	; (800073c <SD_PowerOn+0x80>)
 800072e:	2201      	movs	r2, #1
 8000730:	701a      	strb	r2, [r3, #0]
}
 8000732:	bf00      	nop
 8000734:	3710      	adds	r7, #16
 8000736:	46bd      	mov	sp, r7
 8000738:	bd80      	pop	{r7, pc}
 800073a:	bf00      	nop
 800073c:	20000179 	.word	0x20000179

08000740 <SD_PowerOff>:

/* power off */
static void SD_PowerOff(void) 
{
 8000740:	b480      	push	{r7}
 8000742:	af00      	add	r7, sp, #0
	PowerFlag = 0;
 8000744:	4b03      	ldr	r3, [pc, #12]	; (8000754 <SD_PowerOff+0x14>)
 8000746:	2200      	movs	r2, #0
 8000748:	701a      	strb	r2, [r3, #0]
}
 800074a:	bf00      	nop
 800074c:	46bd      	mov	sp, r7
 800074e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000752:	4770      	bx	lr
 8000754:	20000179 	.word	0x20000179

08000758 <SD_CheckPower>:

/* check power flag */
static uint8_t SD_CheckPower(void) 
{
 8000758:	b480      	push	{r7}
 800075a:	af00      	add	r7, sp, #0
	return PowerFlag;
 800075c:	4b03      	ldr	r3, [pc, #12]	; (800076c <SD_CheckPower+0x14>)
 800075e:	781b      	ldrb	r3, [r3, #0]
}
 8000760:	4618      	mov	r0, r3
 8000762:	46bd      	mov	sp, r7
 8000764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000768:	4770      	bx	lr
 800076a:	bf00      	nop
 800076c:	20000179 	.word	0x20000179

08000770 <SD_RxDataBlock>:

/* receive data block */
static bool SD_RxDataBlock(BYTE *buff, UINT len)
{
 8000770:	b580      	push	{r7, lr}
 8000772:	b084      	sub	sp, #16
 8000774:	af00      	add	r7, sp, #0
 8000776:	6078      	str	r0, [r7, #4]
 8000778:	6039      	str	r1, [r7, #0]
	uint8_t token;

	/* timeout 200ms */
	Timer1 = 200;
 800077a:	4b14      	ldr	r3, [pc, #80]	; (80007cc <SD_RxDataBlock+0x5c>)
 800077c:	22c8      	movs	r2, #200	; 0xc8
 800077e:	801a      	strh	r2, [r3, #0]

	/* loop until receive a response or timeout */
	do {
		token = SPI_RxByte();
 8000780:	f7ff ff58 	bl	8000634 <SPI_RxByte>
 8000784:	4603      	mov	r3, r0
 8000786:	73fb      	strb	r3, [r7, #15]
	} while((token == 0xFF) && Timer1);
 8000788:	7bfb      	ldrb	r3, [r7, #15]
 800078a:	2bff      	cmp	r3, #255	; 0xff
 800078c:	d104      	bne.n	8000798 <SD_RxDataBlock+0x28>
 800078e:	4b0f      	ldr	r3, [pc, #60]	; (80007cc <SD_RxDataBlock+0x5c>)
 8000790:	881b      	ldrh	r3, [r3, #0]
 8000792:	b29b      	uxth	r3, r3
 8000794:	2b00      	cmp	r3, #0
 8000796:	d1f3      	bne.n	8000780 <SD_RxDataBlock+0x10>

	/* invalid response */
	if(token != 0xFE) return FALSE;
 8000798:	7bfb      	ldrb	r3, [r7, #15]
 800079a:	2bfe      	cmp	r3, #254	; 0xfe
 800079c:	d001      	beq.n	80007a2 <SD_RxDataBlock+0x32>
 800079e:	2300      	movs	r3, #0
 80007a0:	e00f      	b.n	80007c2 <SD_RxDataBlock+0x52>

	/* receive data */
	do {
		SPI_RxBytePtr(buff++);
 80007a2:	687b      	ldr	r3, [r7, #4]
 80007a4:	1c5a      	adds	r2, r3, #1
 80007a6:	607a      	str	r2, [r7, #4]
 80007a8:	4618      	mov	r0, r3
 80007aa:	f7ff ff5f 	bl	800066c <SPI_RxBytePtr>
	} while(len--);
 80007ae:	683b      	ldr	r3, [r7, #0]
 80007b0:	1e5a      	subs	r2, r3, #1
 80007b2:	603a      	str	r2, [r7, #0]
 80007b4:	2b00      	cmp	r3, #0
 80007b6:	d1f4      	bne.n	80007a2 <SD_RxDataBlock+0x32>

	/* discard CRC */
	SPI_RxByte();
 80007b8:	f7ff ff3c 	bl	8000634 <SPI_RxByte>
	SPI_RxByte();
 80007bc:	f7ff ff3a 	bl	8000634 <SPI_RxByte>

	return TRUE;
 80007c0:	2301      	movs	r3, #1
}
 80007c2:	4618      	mov	r0, r3
 80007c4:	3710      	adds	r7, #16
 80007c6:	46bd      	mov	sp, r7
 80007c8:	bd80      	pop	{r7, pc}
 80007ca:	bf00      	nop
 80007cc:	20016d21 	.word	0x20016d21

080007d0 <SD_TxDataBlock>:

/* transmit data block */
#if _USE_WRITE == 1
static bool SD_TxDataBlock(const uint8_t *buff, BYTE token)
{
 80007d0:	b580      	push	{r7, lr}
 80007d2:	b084      	sub	sp, #16
 80007d4:	af00      	add	r7, sp, #0
 80007d6:	6078      	str	r0, [r7, #4]
 80007d8:	460b      	mov	r3, r1
 80007da:	70fb      	strb	r3, [r7, #3]
	uint8_t resp;
	uint8_t i = 0;
 80007dc:	2300      	movs	r3, #0
 80007de:	73bb      	strb	r3, [r7, #14]

	/* wait SD ready */
	if (SD_ReadyWait() != 0xFF) return FALSE;
 80007e0:	f7ff ff52 	bl	8000688 <SD_ReadyWait>
 80007e4:	4603      	mov	r3, r0
 80007e6:	2bff      	cmp	r3, #255	; 0xff
 80007e8:	d001      	beq.n	80007ee <SD_TxDataBlock+0x1e>
 80007ea:	2300      	movs	r3, #0
 80007ec:	e02f      	b.n	800084e <SD_TxDataBlock+0x7e>

	/* transmit token */
	SPI_TxByte(token);
 80007ee:	78fb      	ldrb	r3, [r7, #3]
 80007f0:	4618      	mov	r0, r3
 80007f2:	f7ff feeb 	bl	80005cc <SPI_TxByte>

	/* if it's not STOP token, transmit data */
	if (token != 0xFD)
 80007f6:	78fb      	ldrb	r3, [r7, #3]
 80007f8:	2bfd      	cmp	r3, #253	; 0xfd
 80007fa:	d020      	beq.n	800083e <SD_TxDataBlock+0x6e>
	{
		SPI_TxBuffer((uint8_t*)buff, 512);
 80007fc:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000800:	6878      	ldr	r0, [r7, #4]
 8000802:	f7ff fefd 	bl	8000600 <SPI_TxBuffer>

		/* discard CRC */
		SPI_RxByte();
 8000806:	f7ff ff15 	bl	8000634 <SPI_RxByte>
		SPI_RxByte();
 800080a:	f7ff ff13 	bl	8000634 <SPI_RxByte>

		/* receive response */
		while (i <= 64)
 800080e:	e00b      	b.n	8000828 <SD_TxDataBlock+0x58>
		{
			resp = SPI_RxByte();
 8000810:	f7ff ff10 	bl	8000634 <SPI_RxByte>
 8000814:	4603      	mov	r3, r0
 8000816:	73fb      	strb	r3, [r7, #15]

			/* transmit 0x05 accepted */
			if ((resp & 0x1F) == 0x05) break;
 8000818:	7bfb      	ldrb	r3, [r7, #15]
 800081a:	f003 031f 	and.w	r3, r3, #31
 800081e:	2b05      	cmp	r3, #5
 8000820:	d006      	beq.n	8000830 <SD_TxDataBlock+0x60>
			i++;
 8000822:	7bbb      	ldrb	r3, [r7, #14]
 8000824:	3301      	adds	r3, #1
 8000826:	73bb      	strb	r3, [r7, #14]
		while (i <= 64)
 8000828:	7bbb      	ldrb	r3, [r7, #14]
 800082a:	2b40      	cmp	r3, #64	; 0x40
 800082c:	d9f0      	bls.n	8000810 <SD_TxDataBlock+0x40>
 800082e:	e000      	b.n	8000832 <SD_TxDataBlock+0x62>
			if ((resp & 0x1F) == 0x05) break;
 8000830:	bf00      	nop
		}

		/* recv buffer clear */
		while (SPI_RxByte() == 0);
 8000832:	bf00      	nop
 8000834:	f7ff fefe 	bl	8000634 <SPI_RxByte>
 8000838:	4603      	mov	r3, r0
 800083a:	2b00      	cmp	r3, #0
 800083c:	d0fa      	beq.n	8000834 <SD_TxDataBlock+0x64>
	}

	/* transmit 0x05 accepted */
	if ((resp & 0x1F) == 0x05) return TRUE;
 800083e:	7bfb      	ldrb	r3, [r7, #15]
 8000840:	f003 031f 	and.w	r3, r3, #31
 8000844:	2b05      	cmp	r3, #5
 8000846:	d101      	bne.n	800084c <SD_TxDataBlock+0x7c>
 8000848:	2301      	movs	r3, #1
 800084a:	e000      	b.n	800084e <SD_TxDataBlock+0x7e>

	return FALSE;
 800084c:	2300      	movs	r3, #0
}
 800084e:	4618      	mov	r0, r3
 8000850:	3710      	adds	r7, #16
 8000852:	46bd      	mov	sp, r7
 8000854:	bd80      	pop	{r7, pc}

08000856 <SD_SendCmd>:
#endif /* _USE_WRITE */

/* transmit command */
static BYTE SD_SendCmd(BYTE cmd, uint32_t arg)
{
 8000856:	b580      	push	{r7, lr}
 8000858:	b084      	sub	sp, #16
 800085a:	af00      	add	r7, sp, #0
 800085c:	4603      	mov	r3, r0
 800085e:	6039      	str	r1, [r7, #0]
 8000860:	71fb      	strb	r3, [r7, #7]
	uint8_t crc, res;

	/* wait SD ready */
	if (SD_ReadyWait() != 0xFF) return 0xFF;
 8000862:	f7ff ff11 	bl	8000688 <SD_ReadyWait>
 8000866:	4603      	mov	r3, r0
 8000868:	2bff      	cmp	r3, #255	; 0xff
 800086a:	d001      	beq.n	8000870 <SD_SendCmd+0x1a>
 800086c:	23ff      	movs	r3, #255	; 0xff
 800086e:	e042      	b.n	80008f6 <SD_SendCmd+0xa0>

	/* transmit command */
	SPI_TxByte(cmd); 					/* Command */
 8000870:	79fb      	ldrb	r3, [r7, #7]
 8000872:	4618      	mov	r0, r3
 8000874:	f7ff feaa 	bl	80005cc <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 24)); 	/* Argument[31..24] */
 8000878:	683b      	ldr	r3, [r7, #0]
 800087a:	0e1b      	lsrs	r3, r3, #24
 800087c:	b2db      	uxtb	r3, r3
 800087e:	4618      	mov	r0, r3
 8000880:	f7ff fea4 	bl	80005cc <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 16)); 	/* Argument[23..16] */
 8000884:	683b      	ldr	r3, [r7, #0]
 8000886:	0c1b      	lsrs	r3, r3, #16
 8000888:	b2db      	uxtb	r3, r3
 800088a:	4618      	mov	r0, r3
 800088c:	f7ff fe9e 	bl	80005cc <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 8)); 	/* Argument[15..8] */
 8000890:	683b      	ldr	r3, [r7, #0]
 8000892:	0a1b      	lsrs	r3, r3, #8
 8000894:	b2db      	uxtb	r3, r3
 8000896:	4618      	mov	r0, r3
 8000898:	f7ff fe98 	bl	80005cc <SPI_TxByte>
	SPI_TxByte((uint8_t)arg); 			/* Argument[7..0] */
 800089c:	683b      	ldr	r3, [r7, #0]
 800089e:	b2db      	uxtb	r3, r3
 80008a0:	4618      	mov	r0, r3
 80008a2:	f7ff fe93 	bl	80005cc <SPI_TxByte>

	/* prepare CRC */
	if(cmd == CMD0) crc = 0x95;	/* CRC for CMD0(0) */
 80008a6:	79fb      	ldrb	r3, [r7, #7]
 80008a8:	2b40      	cmp	r3, #64	; 0x40
 80008aa:	d102      	bne.n	80008b2 <SD_SendCmd+0x5c>
 80008ac:	2395      	movs	r3, #149	; 0x95
 80008ae:	73fb      	strb	r3, [r7, #15]
 80008b0:	e007      	b.n	80008c2 <SD_SendCmd+0x6c>
	else if(cmd == CMD8) crc = 0x87;	/* CRC for CMD8(0x1AA) */
 80008b2:	79fb      	ldrb	r3, [r7, #7]
 80008b4:	2b48      	cmp	r3, #72	; 0x48
 80008b6:	d102      	bne.n	80008be <SD_SendCmd+0x68>
 80008b8:	2387      	movs	r3, #135	; 0x87
 80008ba:	73fb      	strb	r3, [r7, #15]
 80008bc:	e001      	b.n	80008c2 <SD_SendCmd+0x6c>
	else crc = 1;
 80008be:	2301      	movs	r3, #1
 80008c0:	73fb      	strb	r3, [r7, #15]

	/* transmit CRC */
	SPI_TxByte(crc);
 80008c2:	7bfb      	ldrb	r3, [r7, #15]
 80008c4:	4618      	mov	r0, r3
 80008c6:	f7ff fe81 	bl	80005cc <SPI_TxByte>

	/* Skip a stuff byte when STOP_TRANSMISSION */
	if (cmd == CMD12) SPI_RxByte();
 80008ca:	79fb      	ldrb	r3, [r7, #7]
 80008cc:	2b4c      	cmp	r3, #76	; 0x4c
 80008ce:	d101      	bne.n	80008d4 <SD_SendCmd+0x7e>
 80008d0:	f7ff feb0 	bl	8000634 <SPI_RxByte>

	/* receive response */
	uint8_t n = 10;
 80008d4:	230a      	movs	r3, #10
 80008d6:	73bb      	strb	r3, [r7, #14]
	do {
		res = SPI_RxByte();
 80008d8:	f7ff feac 	bl	8000634 <SPI_RxByte>
 80008dc:	4603      	mov	r3, r0
 80008de:	737b      	strb	r3, [r7, #13]
	} while ((res & 0x80) && --n);
 80008e0:	f997 300d 	ldrsb.w	r3, [r7, #13]
 80008e4:	2b00      	cmp	r3, #0
 80008e6:	da05      	bge.n	80008f4 <SD_SendCmd+0x9e>
 80008e8:	7bbb      	ldrb	r3, [r7, #14]
 80008ea:	3b01      	subs	r3, #1
 80008ec:	73bb      	strb	r3, [r7, #14]
 80008ee:	7bbb      	ldrb	r3, [r7, #14]
 80008f0:	2b00      	cmp	r3, #0
 80008f2:	d1f1      	bne.n	80008d8 <SD_SendCmd+0x82>

	return res;
 80008f4:	7b7b      	ldrb	r3, [r7, #13]
}
 80008f6:	4618      	mov	r0, r3
 80008f8:	3710      	adds	r7, #16
 80008fa:	46bd      	mov	sp, r7
 80008fc:	bd80      	pop	{r7, pc}
	...

08000900 <SD_disk_initialize>:
 * user_diskio.c functions
 **************************************/

/* initialize SD */
DSTATUS SD_disk_initialize(BYTE drv) 
{
 8000900:	b590      	push	{r4, r7, lr}
 8000902:	b085      	sub	sp, #20
 8000904:	af00      	add	r7, sp, #0
 8000906:	4603      	mov	r3, r0
 8000908:	71fb      	strb	r3, [r7, #7]
	uint8_t n, type, ocr[4];

	/* single drive, drv should be 0 */
	if(drv) return STA_NOINIT;
 800090a:	79fb      	ldrb	r3, [r7, #7]
 800090c:	2b00      	cmp	r3, #0
 800090e:	d001      	beq.n	8000914 <SD_disk_initialize+0x14>
 8000910:	2301      	movs	r3, #1
 8000912:	e0d6      	b.n	8000ac2 <SD_disk_initialize+0x1c2>

	/* no disk */
	if(Stat & STA_NODISK) return Stat;
 8000914:	4b6d      	ldr	r3, [pc, #436]	; (8000acc <SD_disk_initialize+0x1cc>)
 8000916:	781b      	ldrb	r3, [r3, #0]
 8000918:	b2db      	uxtb	r3, r3
 800091a:	f003 0302 	and.w	r3, r3, #2
 800091e:	2b00      	cmp	r3, #0
 8000920:	d003      	beq.n	800092a <SD_disk_initialize+0x2a>
 8000922:	4b6a      	ldr	r3, [pc, #424]	; (8000acc <SD_disk_initialize+0x1cc>)
 8000924:	781b      	ldrb	r3, [r3, #0]
 8000926:	b2db      	uxtb	r3, r3
 8000928:	e0cb      	b.n	8000ac2 <SD_disk_initialize+0x1c2>

	/* power on */
	SD_PowerOn();
 800092a:	f7ff fec7 	bl	80006bc <SD_PowerOn>

	/* slave select */
	SELECT();
 800092e:	f7ff fe31 	bl	8000594 <SELECT>

	/* check disk type */
	type = 0;
 8000932:	2300      	movs	r3, #0
 8000934:	73bb      	strb	r3, [r7, #14]

	/* send GO_IDLE_STATE command */
	if (SD_SendCmd(CMD0, 0) == 1)
 8000936:	2100      	movs	r1, #0
 8000938:	2040      	movs	r0, #64	; 0x40
 800093a:	f7ff ff8c 	bl	8000856 <SD_SendCmd>
 800093e:	4603      	mov	r3, r0
 8000940:	2b01      	cmp	r3, #1
 8000942:	f040 80a6 	bne.w	8000a92 <SD_disk_initialize+0x192>
	{
		/* timeout 1 sec */
		Timer1 = 1000;
 8000946:	4b62      	ldr	r3, [pc, #392]	; (8000ad0 <SD_disk_initialize+0x1d0>)
 8000948:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800094c:	801a      	strh	r2, [r3, #0]

		/* SDC V2+ accept CMD8 command, http://elm-chan.org/docs/mmc/mmc_e.html */
		if (SD_SendCmd(CMD8, 0x1AA) == 1)
 800094e:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8000952:	2048      	movs	r0, #72	; 0x48
 8000954:	f7ff ff7f 	bl	8000856 <SD_SendCmd>
 8000958:	4603      	mov	r3, r0
 800095a:	2b01      	cmp	r3, #1
 800095c:	d158      	bne.n	8000a10 <SD_disk_initialize+0x110>
		{
			/* operation condition register */
			for (n = 0; n < 4; n++)
 800095e:	2300      	movs	r3, #0
 8000960:	73fb      	strb	r3, [r7, #15]
 8000962:	e00c      	b.n	800097e <SD_disk_initialize+0x7e>
			{
				ocr[n] = SPI_RxByte();
 8000964:	7bfc      	ldrb	r4, [r7, #15]
 8000966:	f7ff fe65 	bl	8000634 <SPI_RxByte>
 800096a:	4603      	mov	r3, r0
 800096c:	461a      	mov	r2, r3
 800096e:	f104 0310 	add.w	r3, r4, #16
 8000972:	443b      	add	r3, r7
 8000974:	f803 2c08 	strb.w	r2, [r3, #-8]
			for (n = 0; n < 4; n++)
 8000978:	7bfb      	ldrb	r3, [r7, #15]
 800097a:	3301      	adds	r3, #1
 800097c:	73fb      	strb	r3, [r7, #15]
 800097e:	7bfb      	ldrb	r3, [r7, #15]
 8000980:	2b03      	cmp	r3, #3
 8000982:	d9ef      	bls.n	8000964 <SD_disk_initialize+0x64>
			}

			/* voltage range 2.7-3.6V */
			if (ocr[2] == 0x01 && ocr[3] == 0xAA)
 8000984:	7abb      	ldrb	r3, [r7, #10]
 8000986:	2b01      	cmp	r3, #1
 8000988:	f040 8083 	bne.w	8000a92 <SD_disk_initialize+0x192>
 800098c:	7afb      	ldrb	r3, [r7, #11]
 800098e:	2baa      	cmp	r3, #170	; 0xaa
 8000990:	d17f      	bne.n	8000a92 <SD_disk_initialize+0x192>
			{
				/* ACMD41 with HCS bit */
				do {
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 8000992:	2100      	movs	r1, #0
 8000994:	2077      	movs	r0, #119	; 0x77
 8000996:	f7ff ff5e 	bl	8000856 <SD_SendCmd>
 800099a:	4603      	mov	r3, r0
 800099c:	2b01      	cmp	r3, #1
 800099e:	d807      	bhi.n	80009b0 <SD_disk_initialize+0xb0>
 80009a0:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 80009a4:	2069      	movs	r0, #105	; 0x69
 80009a6:	f7ff ff56 	bl	8000856 <SD_SendCmd>
 80009aa:	4603      	mov	r3, r0
 80009ac:	2b00      	cmp	r3, #0
 80009ae:	d005      	beq.n	80009bc <SD_disk_initialize+0xbc>
				} while (Timer1);
 80009b0:	4b47      	ldr	r3, [pc, #284]	; (8000ad0 <SD_disk_initialize+0x1d0>)
 80009b2:	881b      	ldrh	r3, [r3, #0]
 80009b4:	b29b      	uxth	r3, r3
 80009b6:	2b00      	cmp	r3, #0
 80009b8:	d1eb      	bne.n	8000992 <SD_disk_initialize+0x92>
 80009ba:	e000      	b.n	80009be <SD_disk_initialize+0xbe>
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 80009bc:	bf00      	nop

				/* READ_OCR */
				if (Timer1 && SD_SendCmd(CMD58, 0) == 0)
 80009be:	4b44      	ldr	r3, [pc, #272]	; (8000ad0 <SD_disk_initialize+0x1d0>)
 80009c0:	881b      	ldrh	r3, [r3, #0]
 80009c2:	b29b      	uxth	r3, r3
 80009c4:	2b00      	cmp	r3, #0
 80009c6:	d064      	beq.n	8000a92 <SD_disk_initialize+0x192>
 80009c8:	2100      	movs	r1, #0
 80009ca:	207a      	movs	r0, #122	; 0x7a
 80009cc:	f7ff ff43 	bl	8000856 <SD_SendCmd>
 80009d0:	4603      	mov	r3, r0
 80009d2:	2b00      	cmp	r3, #0
 80009d4:	d15d      	bne.n	8000a92 <SD_disk_initialize+0x192>
				{
					/* Check CCS bit */
					for (n = 0; n < 4; n++)
 80009d6:	2300      	movs	r3, #0
 80009d8:	73fb      	strb	r3, [r7, #15]
 80009da:	e00c      	b.n	80009f6 <SD_disk_initialize+0xf6>
					{
						ocr[n] = SPI_RxByte();
 80009dc:	7bfc      	ldrb	r4, [r7, #15]
 80009de:	f7ff fe29 	bl	8000634 <SPI_RxByte>
 80009e2:	4603      	mov	r3, r0
 80009e4:	461a      	mov	r2, r3
 80009e6:	f104 0310 	add.w	r3, r4, #16
 80009ea:	443b      	add	r3, r7
 80009ec:	f803 2c08 	strb.w	r2, [r3, #-8]
					for (n = 0; n < 4; n++)
 80009f0:	7bfb      	ldrb	r3, [r7, #15]
 80009f2:	3301      	adds	r3, #1
 80009f4:	73fb      	strb	r3, [r7, #15]
 80009f6:	7bfb      	ldrb	r3, [r7, #15]
 80009f8:	2b03      	cmp	r3, #3
 80009fa:	d9ef      	bls.n	80009dc <SD_disk_initialize+0xdc>
					}

					/* SDv2 (HC or SC) */
					type = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;
 80009fc:	7a3b      	ldrb	r3, [r7, #8]
 80009fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000a02:	2b00      	cmp	r3, #0
 8000a04:	d001      	beq.n	8000a0a <SD_disk_initialize+0x10a>
 8000a06:	230c      	movs	r3, #12
 8000a08:	e000      	b.n	8000a0c <SD_disk_initialize+0x10c>
 8000a0a:	2304      	movs	r3, #4
 8000a0c:	73bb      	strb	r3, [r7, #14]
 8000a0e:	e040      	b.n	8000a92 <SD_disk_initialize+0x192>
			}
		}
		else
		{
			/* SDC V1 or MMC */
			type = (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) <= 1) ? CT_SD1 : CT_MMC;
 8000a10:	2100      	movs	r1, #0
 8000a12:	2077      	movs	r0, #119	; 0x77
 8000a14:	f7ff ff1f 	bl	8000856 <SD_SendCmd>
 8000a18:	4603      	mov	r3, r0
 8000a1a:	2b01      	cmp	r3, #1
 8000a1c:	d808      	bhi.n	8000a30 <SD_disk_initialize+0x130>
 8000a1e:	2100      	movs	r1, #0
 8000a20:	2069      	movs	r0, #105	; 0x69
 8000a22:	f7ff ff18 	bl	8000856 <SD_SendCmd>
 8000a26:	4603      	mov	r3, r0
 8000a28:	2b01      	cmp	r3, #1
 8000a2a:	d801      	bhi.n	8000a30 <SD_disk_initialize+0x130>
 8000a2c:	2302      	movs	r3, #2
 8000a2e:	e000      	b.n	8000a32 <SD_disk_initialize+0x132>
 8000a30:	2301      	movs	r3, #1
 8000a32:	73bb      	strb	r3, [r7, #14]

			do
			{
				if (type == CT_SD1)
 8000a34:	7bbb      	ldrb	r3, [r7, #14]
 8000a36:	2b02      	cmp	r3, #2
 8000a38:	d10e      	bne.n	8000a58 <SD_disk_initialize+0x158>
				{
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) == 0) break; /* ACMD41 */
 8000a3a:	2100      	movs	r1, #0
 8000a3c:	2077      	movs	r0, #119	; 0x77
 8000a3e:	f7ff ff0a 	bl	8000856 <SD_SendCmd>
 8000a42:	4603      	mov	r3, r0
 8000a44:	2b01      	cmp	r3, #1
 8000a46:	d80e      	bhi.n	8000a66 <SD_disk_initialize+0x166>
 8000a48:	2100      	movs	r1, #0
 8000a4a:	2069      	movs	r0, #105	; 0x69
 8000a4c:	f7ff ff03 	bl	8000856 <SD_SendCmd>
 8000a50:	4603      	mov	r3, r0
 8000a52:	2b00      	cmp	r3, #0
 8000a54:	d107      	bne.n	8000a66 <SD_disk_initialize+0x166>
 8000a56:	e00d      	b.n	8000a74 <SD_disk_initialize+0x174>
				}
				else
				{
					if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 8000a58:	2100      	movs	r1, #0
 8000a5a:	2041      	movs	r0, #65	; 0x41
 8000a5c:	f7ff fefb 	bl	8000856 <SD_SendCmd>
 8000a60:	4603      	mov	r3, r0
 8000a62:	2b00      	cmp	r3, #0
 8000a64:	d005      	beq.n	8000a72 <SD_disk_initialize+0x172>
				}

			} while (Timer1);
 8000a66:	4b1a      	ldr	r3, [pc, #104]	; (8000ad0 <SD_disk_initialize+0x1d0>)
 8000a68:	881b      	ldrh	r3, [r3, #0]
 8000a6a:	b29b      	uxth	r3, r3
 8000a6c:	2b00      	cmp	r3, #0
 8000a6e:	d1e1      	bne.n	8000a34 <SD_disk_initialize+0x134>
 8000a70:	e000      	b.n	8000a74 <SD_disk_initialize+0x174>
					if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 8000a72:	bf00      	nop

			/* SET_BLOCKLEN */
			if (!Timer1 || SD_SendCmd(CMD16, 512) != 0) type = 0;
 8000a74:	4b16      	ldr	r3, [pc, #88]	; (8000ad0 <SD_disk_initialize+0x1d0>)
 8000a76:	881b      	ldrh	r3, [r3, #0]
 8000a78:	b29b      	uxth	r3, r3
 8000a7a:	2b00      	cmp	r3, #0
 8000a7c:	d007      	beq.n	8000a8e <SD_disk_initialize+0x18e>
 8000a7e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000a82:	2050      	movs	r0, #80	; 0x50
 8000a84:	f7ff fee7 	bl	8000856 <SD_SendCmd>
 8000a88:	4603      	mov	r3, r0
 8000a8a:	2b00      	cmp	r3, #0
 8000a8c:	d001      	beq.n	8000a92 <SD_disk_initialize+0x192>
 8000a8e:	2300      	movs	r3, #0
 8000a90:	73bb      	strb	r3, [r7, #14]
		}
	}

	CardType = type;
 8000a92:	4a10      	ldr	r2, [pc, #64]	; (8000ad4 <SD_disk_initialize+0x1d4>)
 8000a94:	7bbb      	ldrb	r3, [r7, #14]
 8000a96:	7013      	strb	r3, [r2, #0]

	/* Idle */
	DESELECT();
 8000a98:	f7ff fd8a 	bl	80005b0 <DESELECT>
	SPI_RxByte();
 8000a9c:	f7ff fdca 	bl	8000634 <SPI_RxByte>

	/* Clear STA_NOINIT */
	if (type)
 8000aa0:	7bbb      	ldrb	r3, [r7, #14]
 8000aa2:	2b00      	cmp	r3, #0
 8000aa4:	d008      	beq.n	8000ab8 <SD_disk_initialize+0x1b8>
	{
		Stat &= ~STA_NOINIT;
 8000aa6:	4b09      	ldr	r3, [pc, #36]	; (8000acc <SD_disk_initialize+0x1cc>)
 8000aa8:	781b      	ldrb	r3, [r3, #0]
 8000aaa:	b2db      	uxtb	r3, r3
 8000aac:	f023 0301 	bic.w	r3, r3, #1
 8000ab0:	b2da      	uxtb	r2, r3
 8000ab2:	4b06      	ldr	r3, [pc, #24]	; (8000acc <SD_disk_initialize+0x1cc>)
 8000ab4:	701a      	strb	r2, [r3, #0]
 8000ab6:	e001      	b.n	8000abc <SD_disk_initialize+0x1bc>
	}
	else
	{
		/* Initialization failed */
		SD_PowerOff();
 8000ab8:	f7ff fe42 	bl	8000740 <SD_PowerOff>
	}

	return Stat;
 8000abc:	4b03      	ldr	r3, [pc, #12]	; (8000acc <SD_disk_initialize+0x1cc>)
 8000abe:	781b      	ldrb	r3, [r3, #0]
 8000ac0:	b2db      	uxtb	r3, r3
}
 8000ac2:	4618      	mov	r0, r3
 8000ac4:	3714      	adds	r7, #20
 8000ac6:	46bd      	mov	sp, r7
 8000ac8:	bd90      	pop	{r4, r7, pc}
 8000aca:	bf00      	nop
 8000acc:	20000000 	.word	0x20000000
 8000ad0:	20016d21 	.word	0x20016d21
 8000ad4:	20000178 	.word	0x20000178

08000ad8 <SD_disk_status>:

/* return disk status */
DSTATUS SD_disk_status(BYTE drv) 
{
 8000ad8:	b480      	push	{r7}
 8000ada:	b083      	sub	sp, #12
 8000adc:	af00      	add	r7, sp, #0
 8000ade:	4603      	mov	r3, r0
 8000ae0:	71fb      	strb	r3, [r7, #7]
	if (drv) return STA_NOINIT;
 8000ae2:	79fb      	ldrb	r3, [r7, #7]
 8000ae4:	2b00      	cmp	r3, #0
 8000ae6:	d001      	beq.n	8000aec <SD_disk_status+0x14>
 8000ae8:	2301      	movs	r3, #1
 8000aea:	e002      	b.n	8000af2 <SD_disk_status+0x1a>
	return Stat;
 8000aec:	4b04      	ldr	r3, [pc, #16]	; (8000b00 <SD_disk_status+0x28>)
 8000aee:	781b      	ldrb	r3, [r3, #0]
 8000af0:	b2db      	uxtb	r3, r3
}
 8000af2:	4618      	mov	r0, r3
 8000af4:	370c      	adds	r7, #12
 8000af6:	46bd      	mov	sp, r7
 8000af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000afc:	4770      	bx	lr
 8000afe:	bf00      	nop
 8000b00:	20000000 	.word	0x20000000

08000b04 <SD_disk_read>:

/* read sector */
DRESULT SD_disk_read(BYTE pdrv, BYTE* buff, DWORD sector, UINT count) 
{
 8000b04:	b580      	push	{r7, lr}
 8000b06:	b084      	sub	sp, #16
 8000b08:	af00      	add	r7, sp, #0
 8000b0a:	60b9      	str	r1, [r7, #8]
 8000b0c:	607a      	str	r2, [r7, #4]
 8000b0e:	603b      	str	r3, [r7, #0]
 8000b10:	4603      	mov	r3, r0
 8000b12:	73fb      	strb	r3, [r7, #15]
	/* pdrv should be 0 */
	if (pdrv || !count) return RES_PARERR;
 8000b14:	7bfb      	ldrb	r3, [r7, #15]
 8000b16:	2b00      	cmp	r3, #0
 8000b18:	d102      	bne.n	8000b20 <SD_disk_read+0x1c>
 8000b1a:	683b      	ldr	r3, [r7, #0]
 8000b1c:	2b00      	cmp	r3, #0
 8000b1e:	d101      	bne.n	8000b24 <SD_disk_read+0x20>
 8000b20:	2304      	movs	r3, #4
 8000b22:	e051      	b.n	8000bc8 <SD_disk_read+0xc4>

	/* no disk */
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 8000b24:	4b2a      	ldr	r3, [pc, #168]	; (8000bd0 <SD_disk_read+0xcc>)
 8000b26:	781b      	ldrb	r3, [r3, #0]
 8000b28:	b2db      	uxtb	r3, r3
 8000b2a:	f003 0301 	and.w	r3, r3, #1
 8000b2e:	2b00      	cmp	r3, #0
 8000b30:	d001      	beq.n	8000b36 <SD_disk_read+0x32>
 8000b32:	2303      	movs	r3, #3
 8000b34:	e048      	b.n	8000bc8 <SD_disk_read+0xc4>

	/* convert to byte address */
	if (!(CardType & CT_SD2)) sector *= 512;
 8000b36:	4b27      	ldr	r3, [pc, #156]	; (8000bd4 <SD_disk_read+0xd0>)
 8000b38:	781b      	ldrb	r3, [r3, #0]
 8000b3a:	f003 0304 	and.w	r3, r3, #4
 8000b3e:	2b00      	cmp	r3, #0
 8000b40:	d102      	bne.n	8000b48 <SD_disk_read+0x44>
 8000b42:	687b      	ldr	r3, [r7, #4]
 8000b44:	025b      	lsls	r3, r3, #9
 8000b46:	607b      	str	r3, [r7, #4]

	SELECT();
 8000b48:	f7ff fd24 	bl	8000594 <SELECT>

	if (count == 1)
 8000b4c:	683b      	ldr	r3, [r7, #0]
 8000b4e:	2b01      	cmp	r3, #1
 8000b50:	d111      	bne.n	8000b76 <SD_disk_read+0x72>
	{
		/* READ_SINGLE_BLOCK */
		if ((SD_SendCmd(CMD17, sector) == 0) && SD_RxDataBlock(buff, 512)) count = 0;
 8000b52:	6879      	ldr	r1, [r7, #4]
 8000b54:	2051      	movs	r0, #81	; 0x51
 8000b56:	f7ff fe7e 	bl	8000856 <SD_SendCmd>
 8000b5a:	4603      	mov	r3, r0
 8000b5c:	2b00      	cmp	r3, #0
 8000b5e:	d129      	bne.n	8000bb4 <SD_disk_read+0xb0>
 8000b60:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000b64:	68b8      	ldr	r0, [r7, #8]
 8000b66:	f7ff fe03 	bl	8000770 <SD_RxDataBlock>
 8000b6a:	4603      	mov	r3, r0
 8000b6c:	2b00      	cmp	r3, #0
 8000b6e:	d021      	beq.n	8000bb4 <SD_disk_read+0xb0>
 8000b70:	2300      	movs	r3, #0
 8000b72:	603b      	str	r3, [r7, #0]
 8000b74:	e01e      	b.n	8000bb4 <SD_disk_read+0xb0>
	}
	else
	{
		/* READ_MULTIPLE_BLOCK */
		if (SD_SendCmd(CMD18, sector) == 0)
 8000b76:	6879      	ldr	r1, [r7, #4]
 8000b78:	2052      	movs	r0, #82	; 0x52
 8000b7a:	f7ff fe6c 	bl	8000856 <SD_SendCmd>
 8000b7e:	4603      	mov	r3, r0
 8000b80:	2b00      	cmp	r3, #0
 8000b82:	d117      	bne.n	8000bb4 <SD_disk_read+0xb0>
		{
			do {
				if (!SD_RxDataBlock(buff, 512)) break;
 8000b84:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000b88:	68b8      	ldr	r0, [r7, #8]
 8000b8a:	f7ff fdf1 	bl	8000770 <SD_RxDataBlock>
 8000b8e:	4603      	mov	r3, r0
 8000b90:	2b00      	cmp	r3, #0
 8000b92:	d00a      	beq.n	8000baa <SD_disk_read+0xa6>
				buff += 512;
 8000b94:	68bb      	ldr	r3, [r7, #8]
 8000b96:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8000b9a:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8000b9c:	683b      	ldr	r3, [r7, #0]
 8000b9e:	3b01      	subs	r3, #1
 8000ba0:	603b      	str	r3, [r7, #0]
 8000ba2:	683b      	ldr	r3, [r7, #0]
 8000ba4:	2b00      	cmp	r3, #0
 8000ba6:	d1ed      	bne.n	8000b84 <SD_disk_read+0x80>
 8000ba8:	e000      	b.n	8000bac <SD_disk_read+0xa8>
				if (!SD_RxDataBlock(buff, 512)) break;
 8000baa:	bf00      	nop

			/* STOP_TRANSMISSION */
			SD_SendCmd(CMD12, 0);
 8000bac:	2100      	movs	r1, #0
 8000bae:	204c      	movs	r0, #76	; 0x4c
 8000bb0:	f7ff fe51 	bl	8000856 <SD_SendCmd>
		}
	}

	/* Idle */
	DESELECT();
 8000bb4:	f7ff fcfc 	bl	80005b0 <DESELECT>
	SPI_RxByte();
 8000bb8:	f7ff fd3c 	bl	8000634 <SPI_RxByte>

	return count ? RES_ERROR : RES_OK;
 8000bbc:	683b      	ldr	r3, [r7, #0]
 8000bbe:	2b00      	cmp	r3, #0
 8000bc0:	bf14      	ite	ne
 8000bc2:	2301      	movne	r3, #1
 8000bc4:	2300      	moveq	r3, #0
 8000bc6:	b2db      	uxtb	r3, r3
}
 8000bc8:	4618      	mov	r0, r3
 8000bca:	3710      	adds	r7, #16
 8000bcc:	46bd      	mov	sp, r7
 8000bce:	bd80      	pop	{r7, pc}
 8000bd0:	20000000 	.word	0x20000000
 8000bd4:	20000178 	.word	0x20000178

08000bd8 <SD_disk_write>:

/* write sector */
#if _USE_WRITE == 1
DRESULT SD_disk_write(BYTE pdrv, const BYTE* buff, DWORD sector, UINT count) 
{
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	b084      	sub	sp, #16
 8000bdc:	af00      	add	r7, sp, #0
 8000bde:	60b9      	str	r1, [r7, #8]
 8000be0:	607a      	str	r2, [r7, #4]
 8000be2:	603b      	str	r3, [r7, #0]
 8000be4:	4603      	mov	r3, r0
 8000be6:	73fb      	strb	r3, [r7, #15]
	/* pdrv should be 0 */
	if (pdrv || !count) return RES_PARERR;
 8000be8:	7bfb      	ldrb	r3, [r7, #15]
 8000bea:	2b00      	cmp	r3, #0
 8000bec:	d102      	bne.n	8000bf4 <SD_disk_write+0x1c>
 8000bee:	683b      	ldr	r3, [r7, #0]
 8000bf0:	2b00      	cmp	r3, #0
 8000bf2:	d101      	bne.n	8000bf8 <SD_disk_write+0x20>
 8000bf4:	2304      	movs	r3, #4
 8000bf6:	e06b      	b.n	8000cd0 <SD_disk_write+0xf8>

	/* no disk */
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 8000bf8:	4b37      	ldr	r3, [pc, #220]	; (8000cd8 <SD_disk_write+0x100>)
 8000bfa:	781b      	ldrb	r3, [r3, #0]
 8000bfc:	b2db      	uxtb	r3, r3
 8000bfe:	f003 0301 	and.w	r3, r3, #1
 8000c02:	2b00      	cmp	r3, #0
 8000c04:	d001      	beq.n	8000c0a <SD_disk_write+0x32>
 8000c06:	2303      	movs	r3, #3
 8000c08:	e062      	b.n	8000cd0 <SD_disk_write+0xf8>

	/* write protection */
	if (Stat & STA_PROTECT) return RES_WRPRT;
 8000c0a:	4b33      	ldr	r3, [pc, #204]	; (8000cd8 <SD_disk_write+0x100>)
 8000c0c:	781b      	ldrb	r3, [r3, #0]
 8000c0e:	b2db      	uxtb	r3, r3
 8000c10:	f003 0304 	and.w	r3, r3, #4
 8000c14:	2b00      	cmp	r3, #0
 8000c16:	d001      	beq.n	8000c1c <SD_disk_write+0x44>
 8000c18:	2302      	movs	r3, #2
 8000c1a:	e059      	b.n	8000cd0 <SD_disk_write+0xf8>

	/* convert to byte address */
	if (!(CardType & CT_SD2)) sector *= 512;
 8000c1c:	4b2f      	ldr	r3, [pc, #188]	; (8000cdc <SD_disk_write+0x104>)
 8000c1e:	781b      	ldrb	r3, [r3, #0]
 8000c20:	f003 0304 	and.w	r3, r3, #4
 8000c24:	2b00      	cmp	r3, #0
 8000c26:	d102      	bne.n	8000c2e <SD_disk_write+0x56>
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	025b      	lsls	r3, r3, #9
 8000c2c:	607b      	str	r3, [r7, #4]

	SELECT();
 8000c2e:	f7ff fcb1 	bl	8000594 <SELECT>

	if (count == 1)
 8000c32:	683b      	ldr	r3, [r7, #0]
 8000c34:	2b01      	cmp	r3, #1
 8000c36:	d110      	bne.n	8000c5a <SD_disk_write+0x82>
	{
		/* WRITE_BLOCK */
		if ((SD_SendCmd(CMD24, sector) == 0) && SD_TxDataBlock(buff, 0xFE))
 8000c38:	6879      	ldr	r1, [r7, #4]
 8000c3a:	2058      	movs	r0, #88	; 0x58
 8000c3c:	f7ff fe0b 	bl	8000856 <SD_SendCmd>
 8000c40:	4603      	mov	r3, r0
 8000c42:	2b00      	cmp	r3, #0
 8000c44:	d13a      	bne.n	8000cbc <SD_disk_write+0xe4>
 8000c46:	21fe      	movs	r1, #254	; 0xfe
 8000c48:	68b8      	ldr	r0, [r7, #8]
 8000c4a:	f7ff fdc1 	bl	80007d0 <SD_TxDataBlock>
 8000c4e:	4603      	mov	r3, r0
 8000c50:	2b00      	cmp	r3, #0
 8000c52:	d033      	beq.n	8000cbc <SD_disk_write+0xe4>
			count = 0;
 8000c54:	2300      	movs	r3, #0
 8000c56:	603b      	str	r3, [r7, #0]
 8000c58:	e030      	b.n	8000cbc <SD_disk_write+0xe4>
	}
	else
	{
		/* WRITE_MULTIPLE_BLOCK */
		if (CardType & CT_SD1)
 8000c5a:	4b20      	ldr	r3, [pc, #128]	; (8000cdc <SD_disk_write+0x104>)
 8000c5c:	781b      	ldrb	r3, [r3, #0]
 8000c5e:	f003 0302 	and.w	r3, r3, #2
 8000c62:	2b00      	cmp	r3, #0
 8000c64:	d007      	beq.n	8000c76 <SD_disk_write+0x9e>
		{
			SD_SendCmd(CMD55, 0);
 8000c66:	2100      	movs	r1, #0
 8000c68:	2077      	movs	r0, #119	; 0x77
 8000c6a:	f7ff fdf4 	bl	8000856 <SD_SendCmd>
			SD_SendCmd(CMD23, count); /* ACMD23 */
 8000c6e:	6839      	ldr	r1, [r7, #0]
 8000c70:	2057      	movs	r0, #87	; 0x57
 8000c72:	f7ff fdf0 	bl	8000856 <SD_SendCmd>
		}

		if (SD_SendCmd(CMD25, sector) == 0)
 8000c76:	6879      	ldr	r1, [r7, #4]
 8000c78:	2059      	movs	r0, #89	; 0x59
 8000c7a:	f7ff fdec 	bl	8000856 <SD_SendCmd>
 8000c7e:	4603      	mov	r3, r0
 8000c80:	2b00      	cmp	r3, #0
 8000c82:	d11b      	bne.n	8000cbc <SD_disk_write+0xe4>
		{
			do {
				if(!SD_TxDataBlock(buff, 0xFC)) break;
 8000c84:	21fc      	movs	r1, #252	; 0xfc
 8000c86:	68b8      	ldr	r0, [r7, #8]
 8000c88:	f7ff fda2 	bl	80007d0 <SD_TxDataBlock>
 8000c8c:	4603      	mov	r3, r0
 8000c8e:	2b00      	cmp	r3, #0
 8000c90:	d00a      	beq.n	8000ca8 <SD_disk_write+0xd0>
				buff += 512;
 8000c92:	68bb      	ldr	r3, [r7, #8]
 8000c94:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8000c98:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8000c9a:	683b      	ldr	r3, [r7, #0]
 8000c9c:	3b01      	subs	r3, #1
 8000c9e:	603b      	str	r3, [r7, #0]
 8000ca0:	683b      	ldr	r3, [r7, #0]
 8000ca2:	2b00      	cmp	r3, #0
 8000ca4:	d1ee      	bne.n	8000c84 <SD_disk_write+0xac>
 8000ca6:	e000      	b.n	8000caa <SD_disk_write+0xd2>
				if(!SD_TxDataBlock(buff, 0xFC)) break;
 8000ca8:	bf00      	nop

			/* STOP_TRAN token */
			if(!SD_TxDataBlock(0, 0xFD))
 8000caa:	21fd      	movs	r1, #253	; 0xfd
 8000cac:	2000      	movs	r0, #0
 8000cae:	f7ff fd8f 	bl	80007d0 <SD_TxDataBlock>
 8000cb2:	4603      	mov	r3, r0
 8000cb4:	2b00      	cmp	r3, #0
 8000cb6:	d101      	bne.n	8000cbc <SD_disk_write+0xe4>
			{
				count = 1;
 8000cb8:	2301      	movs	r3, #1
 8000cba:	603b      	str	r3, [r7, #0]
			}
		}
	}

	/* Idle */
	DESELECT();
 8000cbc:	f7ff fc78 	bl	80005b0 <DESELECT>
	SPI_RxByte();
 8000cc0:	f7ff fcb8 	bl	8000634 <SPI_RxByte>

	return count ? RES_ERROR : RES_OK;
 8000cc4:	683b      	ldr	r3, [r7, #0]
 8000cc6:	2b00      	cmp	r3, #0
 8000cc8:	bf14      	ite	ne
 8000cca:	2301      	movne	r3, #1
 8000ccc:	2300      	moveq	r3, #0
 8000cce:	b2db      	uxtb	r3, r3
}
 8000cd0:	4618      	mov	r0, r3
 8000cd2:	3710      	adds	r7, #16
 8000cd4:	46bd      	mov	sp, r7
 8000cd6:	bd80      	pop	{r7, pc}
 8000cd8:	20000000 	.word	0x20000000
 8000cdc:	20000178 	.word	0x20000178

08000ce0 <SD_disk_ioctl>:
#endif /* _USE_WRITE */

/* ioctl */
DRESULT SD_disk_ioctl(BYTE drv, BYTE ctrl, void *buff) 
{
 8000ce0:	b590      	push	{r4, r7, lr}
 8000ce2:	b08b      	sub	sp, #44	; 0x2c
 8000ce4:	af00      	add	r7, sp, #0
 8000ce6:	4603      	mov	r3, r0
 8000ce8:	603a      	str	r2, [r7, #0]
 8000cea:	71fb      	strb	r3, [r7, #7]
 8000cec:	460b      	mov	r3, r1
 8000cee:	71bb      	strb	r3, [r7, #6]
	DRESULT res;
	uint8_t n, csd[16], *ptr = buff;
 8000cf0:	683b      	ldr	r3, [r7, #0]
 8000cf2:	623b      	str	r3, [r7, #32]
	WORD csize;

	/* pdrv should be 0 */
	if (drv) return RES_PARERR;
 8000cf4:	79fb      	ldrb	r3, [r7, #7]
 8000cf6:	2b00      	cmp	r3, #0
 8000cf8:	d001      	beq.n	8000cfe <SD_disk_ioctl+0x1e>
 8000cfa:	2304      	movs	r3, #4
 8000cfc:	e115      	b.n	8000f2a <SD_disk_ioctl+0x24a>
	res = RES_ERROR;
 8000cfe:	2301      	movs	r3, #1
 8000d00:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if (ctrl == CTRL_POWER)
 8000d04:	79bb      	ldrb	r3, [r7, #6]
 8000d06:	2b05      	cmp	r3, #5
 8000d08:	d124      	bne.n	8000d54 <SD_disk_ioctl+0x74>
	{
		switch (*ptr)
 8000d0a:	6a3b      	ldr	r3, [r7, #32]
 8000d0c:	781b      	ldrb	r3, [r3, #0]
 8000d0e:	2b02      	cmp	r3, #2
 8000d10:	d012      	beq.n	8000d38 <SD_disk_ioctl+0x58>
 8000d12:	2b02      	cmp	r3, #2
 8000d14:	dc1a      	bgt.n	8000d4c <SD_disk_ioctl+0x6c>
 8000d16:	2b00      	cmp	r3, #0
 8000d18:	d002      	beq.n	8000d20 <SD_disk_ioctl+0x40>
 8000d1a:	2b01      	cmp	r3, #1
 8000d1c:	d006      	beq.n	8000d2c <SD_disk_ioctl+0x4c>
 8000d1e:	e015      	b.n	8000d4c <SD_disk_ioctl+0x6c>
		{
		case 0:
			SD_PowerOff();		/* Power Off */
 8000d20:	f7ff fd0e 	bl	8000740 <SD_PowerOff>
			res = RES_OK;
 8000d24:	2300      	movs	r3, #0
 8000d26:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8000d2a:	e0fc      	b.n	8000f26 <SD_disk_ioctl+0x246>
		case 1:
			SD_PowerOn();		/* Power On */
 8000d2c:	f7ff fcc6 	bl	80006bc <SD_PowerOn>
			res = RES_OK;
 8000d30:	2300      	movs	r3, #0
 8000d32:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8000d36:	e0f6      	b.n	8000f26 <SD_disk_ioctl+0x246>
		case 2:
			*(ptr + 1) = SD_CheckPower();
 8000d38:	6a3b      	ldr	r3, [r7, #32]
 8000d3a:	1c5c      	adds	r4, r3, #1
 8000d3c:	f7ff fd0c 	bl	8000758 <SD_CheckPower>
 8000d40:	4603      	mov	r3, r0
 8000d42:	7023      	strb	r3, [r4, #0]
			res = RES_OK;		/* Power Check */
 8000d44:	2300      	movs	r3, #0
 8000d46:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8000d4a:	e0ec      	b.n	8000f26 <SD_disk_ioctl+0x246>
		default:
			res = RES_PARERR;
 8000d4c:	2304      	movs	r3, #4
 8000d4e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8000d52:	e0e8      	b.n	8000f26 <SD_disk_ioctl+0x246>
		}
	}
	else
	{
		/* no disk */
		if (Stat & STA_NOINIT) return RES_NOTRDY;
 8000d54:	4b77      	ldr	r3, [pc, #476]	; (8000f34 <SD_disk_ioctl+0x254>)
 8000d56:	781b      	ldrb	r3, [r3, #0]
 8000d58:	b2db      	uxtb	r3, r3
 8000d5a:	f003 0301 	and.w	r3, r3, #1
 8000d5e:	2b00      	cmp	r3, #0
 8000d60:	d001      	beq.n	8000d66 <SD_disk_ioctl+0x86>
 8000d62:	2303      	movs	r3, #3
 8000d64:	e0e1      	b.n	8000f2a <SD_disk_ioctl+0x24a>

		SELECT();
 8000d66:	f7ff fc15 	bl	8000594 <SELECT>

		switch (ctrl)
 8000d6a:	79bb      	ldrb	r3, [r7, #6]
 8000d6c:	2b0d      	cmp	r3, #13
 8000d6e:	f200 80cb 	bhi.w	8000f08 <SD_disk_ioctl+0x228>
 8000d72:	a201      	add	r2, pc, #4	; (adr r2, 8000d78 <SD_disk_ioctl+0x98>)
 8000d74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000d78:	08000e73 	.word	0x08000e73
 8000d7c:	08000db1 	.word	0x08000db1
 8000d80:	08000e63 	.word	0x08000e63
 8000d84:	08000f09 	.word	0x08000f09
 8000d88:	08000f09 	.word	0x08000f09
 8000d8c:	08000f09 	.word	0x08000f09
 8000d90:	08000f09 	.word	0x08000f09
 8000d94:	08000f09 	.word	0x08000f09
 8000d98:	08000f09 	.word	0x08000f09
 8000d9c:	08000f09 	.word	0x08000f09
 8000da0:	08000f09 	.word	0x08000f09
 8000da4:	08000e85 	.word	0x08000e85
 8000da8:	08000ea9 	.word	0x08000ea9
 8000dac:	08000ecd 	.word	0x08000ecd
		{
		case GET_SECTOR_COUNT:
			/* SEND_CSD */
			if ((SD_SendCmd(CMD9, 0) == 0) && SD_RxDataBlock(csd, 16))
 8000db0:	2100      	movs	r1, #0
 8000db2:	2049      	movs	r0, #73	; 0x49
 8000db4:	f7ff fd4f 	bl	8000856 <SD_SendCmd>
 8000db8:	4603      	mov	r3, r0
 8000dba:	2b00      	cmp	r3, #0
 8000dbc:	f040 80a8 	bne.w	8000f10 <SD_disk_ioctl+0x230>
 8000dc0:	f107 030c 	add.w	r3, r7, #12
 8000dc4:	2110      	movs	r1, #16
 8000dc6:	4618      	mov	r0, r3
 8000dc8:	f7ff fcd2 	bl	8000770 <SD_RxDataBlock>
 8000dcc:	4603      	mov	r3, r0
 8000dce:	2b00      	cmp	r3, #0
 8000dd0:	f000 809e 	beq.w	8000f10 <SD_disk_ioctl+0x230>
			{
				if ((csd[0] >> 6) == 1)
 8000dd4:	7b3b      	ldrb	r3, [r7, #12]
 8000dd6:	099b      	lsrs	r3, r3, #6
 8000dd8:	b2db      	uxtb	r3, r3
 8000dda:	2b01      	cmp	r3, #1
 8000ddc:	d10e      	bne.n	8000dfc <SD_disk_ioctl+0x11c>
				{
					/* SDC V2 */
					csize = csd[9] + ((WORD) csd[8] << 8) + 1;
 8000dde:	7d7b      	ldrb	r3, [r7, #21]
 8000de0:	b29a      	uxth	r2, r3
 8000de2:	7d3b      	ldrb	r3, [r7, #20]
 8000de4:	b29b      	uxth	r3, r3
 8000de6:	021b      	lsls	r3, r3, #8
 8000de8:	b29b      	uxth	r3, r3
 8000dea:	4413      	add	r3, r2
 8000dec:	b29b      	uxth	r3, r3
 8000dee:	3301      	adds	r3, #1
 8000df0:	83fb      	strh	r3, [r7, #30]
					*(DWORD*) buff = (DWORD) csize << 10;
 8000df2:	8bfb      	ldrh	r3, [r7, #30]
 8000df4:	029a      	lsls	r2, r3, #10
 8000df6:	683b      	ldr	r3, [r7, #0]
 8000df8:	601a      	str	r2, [r3, #0]
 8000dfa:	e02e      	b.n	8000e5a <SD_disk_ioctl+0x17a>
				}
				else
				{
					/* MMC or SDC V1 */
					n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 8000dfc:	7c7b      	ldrb	r3, [r7, #17]
 8000dfe:	f003 030f 	and.w	r3, r3, #15
 8000e02:	b2da      	uxtb	r2, r3
 8000e04:	7dbb      	ldrb	r3, [r7, #22]
 8000e06:	09db      	lsrs	r3, r3, #7
 8000e08:	b2db      	uxtb	r3, r3
 8000e0a:	4413      	add	r3, r2
 8000e0c:	b2da      	uxtb	r2, r3
 8000e0e:	7d7b      	ldrb	r3, [r7, #21]
 8000e10:	005b      	lsls	r3, r3, #1
 8000e12:	b2db      	uxtb	r3, r3
 8000e14:	f003 0306 	and.w	r3, r3, #6
 8000e18:	b2db      	uxtb	r3, r3
 8000e1a:	4413      	add	r3, r2
 8000e1c:	b2db      	uxtb	r3, r3
 8000e1e:	3302      	adds	r3, #2
 8000e20:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
					csize = (csd[8] >> 6) + ((WORD) csd[7] << 2) + ((WORD) (csd[6] & 3) << 10) + 1;
 8000e24:	7d3b      	ldrb	r3, [r7, #20]
 8000e26:	099b      	lsrs	r3, r3, #6
 8000e28:	b2db      	uxtb	r3, r3
 8000e2a:	b29a      	uxth	r2, r3
 8000e2c:	7cfb      	ldrb	r3, [r7, #19]
 8000e2e:	b29b      	uxth	r3, r3
 8000e30:	009b      	lsls	r3, r3, #2
 8000e32:	b29b      	uxth	r3, r3
 8000e34:	4413      	add	r3, r2
 8000e36:	b29a      	uxth	r2, r3
 8000e38:	7cbb      	ldrb	r3, [r7, #18]
 8000e3a:	029b      	lsls	r3, r3, #10
 8000e3c:	b29b      	uxth	r3, r3
 8000e3e:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8000e42:	b29b      	uxth	r3, r3
 8000e44:	4413      	add	r3, r2
 8000e46:	b29b      	uxth	r3, r3
 8000e48:	3301      	adds	r3, #1
 8000e4a:	83fb      	strh	r3, [r7, #30]
					*(DWORD*) buff = (DWORD) csize << (n - 9);
 8000e4c:	8bfa      	ldrh	r2, [r7, #30]
 8000e4e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000e52:	3b09      	subs	r3, #9
 8000e54:	409a      	lsls	r2, r3
 8000e56:	683b      	ldr	r3, [r7, #0]
 8000e58:	601a      	str	r2, [r3, #0]
				}
				res = RES_OK;
 8000e5a:	2300      	movs	r3, #0
 8000e5c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			}
			break;
 8000e60:	e056      	b.n	8000f10 <SD_disk_ioctl+0x230>
		case GET_SECTOR_SIZE:
			*(WORD*) buff = 512;
 8000e62:	683b      	ldr	r3, [r7, #0]
 8000e64:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000e68:	801a      	strh	r2, [r3, #0]
			res = RES_OK;
 8000e6a:	2300      	movs	r3, #0
 8000e6c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8000e70:	e055      	b.n	8000f1e <SD_disk_ioctl+0x23e>
		case CTRL_SYNC:
			if (SD_ReadyWait() == 0xFF) res = RES_OK;
 8000e72:	f7ff fc09 	bl	8000688 <SD_ReadyWait>
 8000e76:	4603      	mov	r3, r0
 8000e78:	2bff      	cmp	r3, #255	; 0xff
 8000e7a:	d14b      	bne.n	8000f14 <SD_disk_ioctl+0x234>
 8000e7c:	2300      	movs	r3, #0
 8000e7e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8000e82:	e047      	b.n	8000f14 <SD_disk_ioctl+0x234>
		case MMC_GET_CSD:
			/* SEND_CSD */
			if (SD_SendCmd(CMD9, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 8000e84:	2100      	movs	r1, #0
 8000e86:	2049      	movs	r0, #73	; 0x49
 8000e88:	f7ff fce5 	bl	8000856 <SD_SendCmd>
 8000e8c:	4603      	mov	r3, r0
 8000e8e:	2b00      	cmp	r3, #0
 8000e90:	d142      	bne.n	8000f18 <SD_disk_ioctl+0x238>
 8000e92:	2110      	movs	r1, #16
 8000e94:	6a38      	ldr	r0, [r7, #32]
 8000e96:	f7ff fc6b 	bl	8000770 <SD_RxDataBlock>
 8000e9a:	4603      	mov	r3, r0
 8000e9c:	2b00      	cmp	r3, #0
 8000e9e:	d03b      	beq.n	8000f18 <SD_disk_ioctl+0x238>
 8000ea0:	2300      	movs	r3, #0
 8000ea2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8000ea6:	e037      	b.n	8000f18 <SD_disk_ioctl+0x238>
		case MMC_GET_CID:
			/* SEND_CID */
			if (SD_SendCmd(CMD10, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 8000ea8:	2100      	movs	r1, #0
 8000eaa:	204a      	movs	r0, #74	; 0x4a
 8000eac:	f7ff fcd3 	bl	8000856 <SD_SendCmd>
 8000eb0:	4603      	mov	r3, r0
 8000eb2:	2b00      	cmp	r3, #0
 8000eb4:	d132      	bne.n	8000f1c <SD_disk_ioctl+0x23c>
 8000eb6:	2110      	movs	r1, #16
 8000eb8:	6a38      	ldr	r0, [r7, #32]
 8000eba:	f7ff fc59 	bl	8000770 <SD_RxDataBlock>
 8000ebe:	4603      	mov	r3, r0
 8000ec0:	2b00      	cmp	r3, #0
 8000ec2:	d02b      	beq.n	8000f1c <SD_disk_ioctl+0x23c>
 8000ec4:	2300      	movs	r3, #0
 8000ec6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8000eca:	e027      	b.n	8000f1c <SD_disk_ioctl+0x23c>
		case MMC_GET_OCR:
			/* READ_OCR */
			if (SD_SendCmd(CMD58, 0) == 0)
 8000ecc:	2100      	movs	r1, #0
 8000ece:	207a      	movs	r0, #122	; 0x7a
 8000ed0:	f7ff fcc1 	bl	8000856 <SD_SendCmd>
 8000ed4:	4603      	mov	r3, r0
 8000ed6:	2b00      	cmp	r3, #0
 8000ed8:	d116      	bne.n	8000f08 <SD_disk_ioctl+0x228>
			{
				for (n = 0; n < 4; n++)
 8000eda:	2300      	movs	r3, #0
 8000edc:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8000ee0:	e00b      	b.n	8000efa <SD_disk_ioctl+0x21a>
				{
					*ptr++ = SPI_RxByte();
 8000ee2:	6a3c      	ldr	r4, [r7, #32]
 8000ee4:	1c63      	adds	r3, r4, #1
 8000ee6:	623b      	str	r3, [r7, #32]
 8000ee8:	f7ff fba4 	bl	8000634 <SPI_RxByte>
 8000eec:	4603      	mov	r3, r0
 8000eee:	7023      	strb	r3, [r4, #0]
				for (n = 0; n < 4; n++)
 8000ef0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000ef4:	3301      	adds	r3, #1
 8000ef6:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8000efa:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000efe:	2b03      	cmp	r3, #3
 8000f00:	d9ef      	bls.n	8000ee2 <SD_disk_ioctl+0x202>
				}
				res = RES_OK;
 8000f02:	2300      	movs	r3, #0
 8000f04:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			}
		default:
			res = RES_PARERR;
 8000f08:	2304      	movs	r3, #4
 8000f0a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8000f0e:	e006      	b.n	8000f1e <SD_disk_ioctl+0x23e>
			break;
 8000f10:	bf00      	nop
 8000f12:	e004      	b.n	8000f1e <SD_disk_ioctl+0x23e>
			break;
 8000f14:	bf00      	nop
 8000f16:	e002      	b.n	8000f1e <SD_disk_ioctl+0x23e>
			break;
 8000f18:	bf00      	nop
 8000f1a:	e000      	b.n	8000f1e <SD_disk_ioctl+0x23e>
			break;
 8000f1c:	bf00      	nop
		}

		DESELECT();
 8000f1e:	f7ff fb47 	bl	80005b0 <DESELECT>
		SPI_RxByte();
 8000f22:	f7ff fb87 	bl	8000634 <SPI_RxByte>
	}

	return res;
 8000f26:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8000f2a:	4618      	mov	r0, r3
 8000f2c:	372c      	adds	r7, #44	; 0x2c
 8000f2e:	46bd      	mov	sp, r7
 8000f30:	bd90      	pop	{r4, r7, pc}
 8000f32:	bf00      	nop
 8000f34:	20000000 	.word	0x20000000

08000f38 <bufsize>:
volatile char buffer[BUFFER_SIZE];  // to store strings..

int i=0;

int bufsize (char *buf)
{
 8000f38:	b480      	push	{r7}
 8000f3a:	b085      	sub	sp, #20
 8000f3c:	af00      	add	r7, sp, #0
 8000f3e:	6078      	str	r0, [r7, #4]
	int i=0;
 8000f40:	2300      	movs	r3, #0
 8000f42:	60fb      	str	r3, [r7, #12]
	while (*buf++ != '\0') i++;
 8000f44:	e002      	b.n	8000f4c <bufsize+0x14>
 8000f46:	68fb      	ldr	r3, [r7, #12]
 8000f48:	3301      	adds	r3, #1
 8000f4a:	60fb      	str	r3, [r7, #12]
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	1c5a      	adds	r2, r3, #1
 8000f50:	607a      	str	r2, [r7, #4]
 8000f52:	781b      	ldrb	r3, [r3, #0]
 8000f54:	2b00      	cmp	r3, #0
 8000f56:	d1f6      	bne.n	8000f46 <bufsize+0xe>
	return i;
 8000f58:	68fb      	ldr	r3, [r7, #12]
}
 8000f5a:	4618      	mov	r0, r3
 8000f5c:	3714      	adds	r7, #20
 8000f5e:	46bd      	mov	sp, r7
 8000f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f64:	4770      	bx	lr
	...

08000f68 <send_uart>:
{
	for (int i=0; i<BUFFER_SIZE; i++) buffer[i] = '\0';
}

void send_uart (char *string)
{
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	b084      	sub	sp, #16
 8000f6c:	af00      	add	r7, sp, #0
 8000f6e:	6078      	str	r0, [r7, #4]
	uint8_t len = strlen (string);
 8000f70:	6878      	ldr	r0, [r7, #4]
 8000f72:	f7ff f935 	bl	80001e0 <strlen>
 8000f76:	4603      	mov	r3, r0
 8000f78:	73fb      	strb	r3, [r7, #15]
	HAL_UART_Transmit(&huart2, (uint8_t *) string, len, HAL_MAX_DELAY);  // transmit in blocking mode
 8000f7a:	7bfb      	ldrb	r3, [r7, #15]
 8000f7c:	b29a      	uxth	r2, r3
 8000f7e:	f04f 33ff 	mov.w	r3, #4294967295
 8000f82:	6879      	ldr	r1, [r7, #4]
 8000f84:	4803      	ldr	r0, [pc, #12]	; (8000f94 <send_uart+0x2c>)
 8000f86:	f009 f8a6 	bl	800a0d6 <HAL_UART_Transmit>
}
 8000f8a:	bf00      	nop
 8000f8c:	3710      	adds	r7, #16
 8000f8e:	46bd      	mov	sp, r7
 8000f90:	bd80      	pop	{r7, pc}
 8000f92:	bf00      	nop
 8000f94:	2000021c 	.word	0x2000021c

08000f98 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8000f98:	b590      	push	{r4, r7, lr}
 8000f9a:	b085      	sub	sp, #20
 8000f9c:	af02      	add	r7, sp, #8
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000f9e:	f005 fe99 	bl	8006cd4 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000fa2:	f000 f9d1 	bl	8001348 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000fa6:	f000 faeb 	bl	8001580 <MX_GPIO_Init>
	MX_SPI1_Init();
 8000faa:	f000 fa3b 	bl	8001424 <MX_SPI1_Init>
	MX_USART2_UART_Init();
 8000fae:	f000 fabd 	bl	800152c <MX_USART2_UART_Init>
	MX_FATFS_Init();
 8000fb2:	f009 fc05 	bl	800a7c0 <MX_FATFS_Init>
	MX_TIM3_Init();
 8000fb6:	f000 fa6b 	bl	8001490 <MX_TIM3_Init>

	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	stato_data_logger= WAIT_FOR_START;
 8000fba:	4b85      	ldr	r3, [pc, #532]	; (80011d0 <main+0x238>)
 8000fbc:	2200      	movs	r2, #0
 8000fbe:	701a      	strb	r2, [r3, #0]
		/* USER CODE END WHILE */

		/* USER CODE BEGIN 3 */
//		HAL_IWDG_Refresh(&hiwdg);

		switch (stato_data_logger){
 8000fc0:	4b83      	ldr	r3, [pc, #524]	; (80011d0 <main+0x238>)
 8000fc2:	781b      	ldrb	r3, [r3, #0]
 8000fc4:	2b03      	cmp	r3, #3
 8000fc6:	f200 81a1 	bhi.w	800130c <main+0x374>
 8000fca:	a201      	add	r2, pc, #4	; (adr r2, 8000fd0 <main+0x38>)
 8000fcc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000fd0:	08000fe1 	.word	0x08000fe1
 8000fd4:	0800105d 	.word	0x0800105d
 8000fd8:	080010c9 	.word	0x080010c9
 8000fdc:	080011cb 	.word	0x080011cb

		case WAIT_FOR_START:

			if(premuto==true){
 8000fe0:	4b7c      	ldr	r3, [pc, #496]	; (80011d4 <main+0x23c>)
 8000fe2:	781b      	ldrb	r3, [r3, #0]
 8000fe4:	b2db      	uxtb	r3, r3
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	f000 8192 	beq.w	8001310 <main+0x378>
				premuto=false;
 8000fec:	4b79      	ldr	r3, [pc, #484]	; (80011d4 <main+0x23c>)
 8000fee:	2200      	movs	r2, #0
 8000ff0:	701a      	strb	r2, [r3, #0]
				stato_data_logger=WAIT_FOR_OPEN_FILE;
 8000ff2:	4b77      	ldr	r3, [pc, #476]	; (80011d0 <main+0x238>)
 8000ff4:	2201      	movs	r2, #1
 8000ff6:	701a      	strb	r2, [r3, #0]
				acquisizioni=0;
 8000ff8:	4b77      	ldr	r3, [pc, #476]	; (80011d8 <main+0x240>)
 8000ffa:	2200      	movs	r2, #0
 8000ffc:	601a      	str	r2, [r3, #0]
				contatore_campioni=0;
 8000ffe:	4b77      	ldr	r3, [pc, #476]	; (80011dc <main+0x244>)
 8001000:	2200      	movs	r2, #0
 8001002:	601a      	str	r2, [r3, #0]
				fresult = f_mount(&fs, "/", 1);
 8001004:	2201      	movs	r2, #1
 8001006:	4976      	ldr	r1, [pc, #472]	; (80011e0 <main+0x248>)
 8001008:	4876      	ldr	r0, [pc, #472]	; (80011e4 <main+0x24c>)
 800100a:	f00b fe23 	bl	800cc54 <f_mount>
 800100e:	4603      	mov	r3, r0
 8001010:	461a      	mov	r2, r3
 8001012:	4b75      	ldr	r3, [pc, #468]	; (80011e8 <main+0x250>)
 8001014:	701a      	strb	r2, [r3, #0]
				if (fresult != FR_OK) send_uart ("ERROR!!! in mounting SD CARD...\n\n");
 8001016:	4b74      	ldr	r3, [pc, #464]	; (80011e8 <main+0x250>)
 8001018:	781b      	ldrb	r3, [r3, #0]
 800101a:	2b00      	cmp	r3, #0
 800101c:	d003      	beq.n	8001026 <main+0x8e>
 800101e:	4873      	ldr	r0, [pc, #460]	; (80011ec <main+0x254>)
 8001020:	f7ff ffa2 	bl	8000f68 <send_uart>
 8001024:	e002      	b.n	800102c <main+0x94>
				else send_uart("SD CARD mounted successfully...\n\n");
 8001026:	4872      	ldr	r0, [pc, #456]	; (80011f0 <main+0x258>)
 8001028:	f7ff ff9e 	bl	8000f68 <send_uart>
				//				lsm6dso_reset_set(&(pObj->Ctx),1);

				//				HAL_I2C_Mem_Write(&hi2c1,0x57 , 0x12, 0, reset, 1, 100);

				if (IKS01A3_MOTION_SENSOR_Init(IKS01A3_LSM6DSO_0, MOTION_ACCELERO)==HAL_OK){
 800102c:	2102      	movs	r1, #2
 800102e:	2000      	movs	r0, #0
 8001030:	f005 f9ca 	bl	80063c8 <IKS01A3_MOTION_SENSOR_Init>
 8001034:	4603      	mov	r3, r0
 8001036:	2b00      	cmp	r3, #0
 8001038:	f040 816a 	bne.w	8001310 <main+0x378>
					IKS01A3_MOTION_SENSOR_SetOutputDataRate(IKS01A3_LSM6DSO_0, MOTION_ACCELERO, 3332);
 800103c:	ed9f 0a6d 	vldr	s0, [pc, #436]	; 80011f4 <main+0x25c>
 8001040:	2102      	movs	r1, #2
 8001042:	2000      	movs	r0, #0
 8001044:	f005 fbf0 	bl	8006828 <IKS01A3_MOTION_SENSOR_SetOutputDataRate>
					IKS01A3_MOTION_SENSOR_Enable(IKS01A3_LSM6DSO_0, MOTION_ACCELERO);
 8001048:	2102      	movs	r1, #2
 800104a:	2000      	movs	r0, #0
 800104c:	f005 fae0 	bl	8006610 <IKS01A3_MOTION_SENSOR_Enable>
					IKS01A3_MOTION_SENSOR_GetOutputDataRate(IKS01A3_LSM6DSO_0, MOTION_ACCELERO, &result);
 8001050:	4a69      	ldr	r2, [pc, #420]	; (80011f8 <main+0x260>)
 8001052:	2102      	movs	r1, #2
 8001054:	2000      	movs	r0, #0
 8001056:	f005 fba3 	bl	80067a0 <IKS01A3_MOTION_SENSOR_GetOutputDataRate>
				}
			}
			break;
 800105a:	e159      	b.n	8001310 <main+0x378>

		case WAIT_FOR_OPEN_FILE:
			//			HAL_Delay(50);
			acquisizioni++;
 800105c:	4b5e      	ldr	r3, [pc, #376]	; (80011d8 <main+0x240>)
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	3301      	adds	r3, #1
 8001062:	4a5d      	ldr	r2, [pc, #372]	; (80011d8 <main+0x240>)
 8001064:	6013      	str	r3, [r2, #0]
			sprintf(nome_file, "acqusizione_%d.csv ",acquisizioni);
 8001066:	4b5c      	ldr	r3, [pc, #368]	; (80011d8 <main+0x240>)
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	461a      	mov	r2, r3
 800106c:	4963      	ldr	r1, [pc, #396]	; (80011fc <main+0x264>)
 800106e:	4864      	ldr	r0, [pc, #400]	; (8001200 <main+0x268>)
 8001070:	f00c fb92 	bl	800d798 <siprintf>
			fresult = f_open(&fil, nome_file, FA_CREATE_ALWAYS | FA_WRITE);
 8001074:	220a      	movs	r2, #10
 8001076:	4962      	ldr	r1, [pc, #392]	; (8001200 <main+0x268>)
 8001078:	4862      	ldr	r0, [pc, #392]	; (8001204 <main+0x26c>)
 800107a:	f00b fe31 	bl	800cce0 <f_open>
 800107e:	4603      	mov	r3, r0
 8001080:	461a      	mov	r2, r3
 8001082:	4b59      	ldr	r3, [pc, #356]	; (80011e8 <main+0x250>)
 8001084:	701a      	strb	r2, [r3, #0]
			send_uart("file creato");
 8001086:	4860      	ldr	r0, [pc, #384]	; (8001208 <main+0x270>)
 8001088:	f7ff ff6e 	bl	8000f68 <send_uart>
			sprintf((char *)buffer, "X[mg],Y[mg],Z[mg]\r\n");
 800108c:	495f      	ldr	r1, [pc, #380]	; (800120c <main+0x274>)
 800108e:	4860      	ldr	r0, [pc, #384]	; (8001210 <main+0x278>)
 8001090:	f00c fb82 	bl	800d798 <siprintf>
			fresult = f_write(&fil, buffer, bufsize(buffer), &bw);
 8001094:	485e      	ldr	r0, [pc, #376]	; (8001210 <main+0x278>)
 8001096:	f7ff ff4f 	bl	8000f38 <bufsize>
 800109a:	4603      	mov	r3, r0
 800109c:	461a      	mov	r2, r3
 800109e:	4b5d      	ldr	r3, [pc, #372]	; (8001214 <main+0x27c>)
 80010a0:	495b      	ldr	r1, [pc, #364]	; (8001210 <main+0x278>)
 80010a2:	4858      	ldr	r0, [pc, #352]	; (8001204 <main+0x26c>)
 80010a4:	f00b ffe8 	bl	800d078 <f_write>
 80010a8:	4603      	mov	r3, r0
 80010aa:	461a      	mov	r2, r3
 80010ac:	4b4e      	ldr	r3, [pc, #312]	; (80011e8 <main+0x250>)
 80010ae:	701a      	strb	r2, [r3, #0]
			HAL_TIM_Base_Start_IT(&htim3);
 80010b0:	4859      	ldr	r0, [pc, #356]	; (8001218 <main+0x280>)
 80010b2:	f008 fb95 	bl	80097e0 <HAL_TIM_Base_Start_IT>
			stato_data_logger=WAIT_FOR_STOP;
 80010b6:	4b46      	ldr	r3, [pc, #280]	; (80011d0 <main+0x238>)
 80010b8:	2202      	movs	r2, #2
 80010ba:	701a      	strb	r2, [r3, #0]
			HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 80010bc:	2201      	movs	r2, #1
 80010be:	2120      	movs	r1, #32
 80010c0:	4856      	ldr	r0, [pc, #344]	; (800121c <main+0x284>)
 80010c2:	f006 fa17 	bl	80074f4 <HAL_GPIO_WritePin>
			break;
 80010c6:	e126      	b.n	8001316 <main+0x37e>

		case WAIT_FOR_STOP:
			if(contatore_campioni>=DIM){
 80010c8:	4b44      	ldr	r3, [pc, #272]	; (80011dc <main+0x244>)
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	f641 3257 	movw	r2, #6999	; 0x1b57
 80010d0:	4293      	cmp	r3, r2
 80010d2:	dd08      	ble.n	80010e6 <main+0x14e>
				HAL_TIM_Base_Stop_IT(&htim3);
 80010d4:	4850      	ldr	r0, [pc, #320]	; (8001218 <main+0x280>)
 80010d6:	f008 fbe5 	bl	80098a4 <HAL_TIM_Base_Stop_IT>
				contatore_campioni=0;
 80010da:	4b40      	ldr	r3, [pc, #256]	; (80011dc <main+0x244>)
 80010dc:	2200      	movs	r2, #0
 80010de:	601a      	str	r2, [r3, #0]
				//				dimesione=true;
				stato_data_logger=WAIT_FOR_CLOSE_FILE;
 80010e0:	4b3b      	ldr	r3, [pc, #236]	; (80011d0 <main+0x238>)
 80010e2:	2203      	movs	r2, #3
 80010e4:	701a      	strb	r2, [r3, #0]

			}
			if(premuto==true)
 80010e6:	4b3b      	ldr	r3, [pc, #236]	; (80011d4 <main+0x23c>)
 80010e8:	781b      	ldrb	r3, [r3, #0]
 80010ea:	b2db      	uxtb	r3, r3
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	f000 8111 	beq.w	8001314 <main+0x37c>
			{
				HAL_TIM_Base_Stop_IT(&htim3);
 80010f2:	4849      	ldr	r0, [pc, #292]	; (8001218 <main+0x280>)
 80010f4:	f008 fbd6 	bl	80098a4 <HAL_TIM_Base_Stop_IT>
				contatore_campioni=0;
 80010f8:	4b38      	ldr	r3, [pc, #224]	; (80011dc <main+0x244>)
 80010fa:	2200      	movs	r2, #0
 80010fc:	601a      	str	r2, [r3, #0]
				for(int i=0; i<DIM; i++){
 80010fe:	2300      	movs	r3, #0
 8001100:	607b      	str	r3, [r7, #4]
 8001102:	e031      	b.n	8001168 <main+0x1d0>
					sprintf((char *)buffer, "%ld,%ld,%ld\r\n",misure_accelerometro[i].x, misure_accelerometro[i].y, misure_accelerometro[i].z );
 8001104:	4946      	ldr	r1, [pc, #280]	; (8001220 <main+0x288>)
 8001106:	687a      	ldr	r2, [r7, #4]
 8001108:	4613      	mov	r3, r2
 800110a:	005b      	lsls	r3, r3, #1
 800110c:	4413      	add	r3, r2
 800110e:	009b      	lsls	r3, r3, #2
 8001110:	440b      	add	r3, r1
 8001112:	6819      	ldr	r1, [r3, #0]
 8001114:	4842      	ldr	r0, [pc, #264]	; (8001220 <main+0x288>)
 8001116:	687a      	ldr	r2, [r7, #4]
 8001118:	4613      	mov	r3, r2
 800111a:	005b      	lsls	r3, r3, #1
 800111c:	4413      	add	r3, r2
 800111e:	009b      	lsls	r3, r3, #2
 8001120:	4403      	add	r3, r0
 8001122:	3304      	adds	r3, #4
 8001124:	6818      	ldr	r0, [r3, #0]
 8001126:	4c3e      	ldr	r4, [pc, #248]	; (8001220 <main+0x288>)
 8001128:	687a      	ldr	r2, [r7, #4]
 800112a:	4613      	mov	r3, r2
 800112c:	005b      	lsls	r3, r3, #1
 800112e:	4413      	add	r3, r2
 8001130:	009b      	lsls	r3, r3, #2
 8001132:	4423      	add	r3, r4
 8001134:	3308      	adds	r3, #8
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	9300      	str	r3, [sp, #0]
 800113a:	4603      	mov	r3, r0
 800113c:	460a      	mov	r2, r1
 800113e:	4939      	ldr	r1, [pc, #228]	; (8001224 <main+0x28c>)
 8001140:	4833      	ldr	r0, [pc, #204]	; (8001210 <main+0x278>)
 8001142:	f00c fb29 	bl	800d798 <siprintf>
					fresult = f_write(&fil, buffer, bufsize(buffer), &bw);
 8001146:	4832      	ldr	r0, [pc, #200]	; (8001210 <main+0x278>)
 8001148:	f7ff fef6 	bl	8000f38 <bufsize>
 800114c:	4603      	mov	r3, r0
 800114e:	461a      	mov	r2, r3
 8001150:	4b30      	ldr	r3, [pc, #192]	; (8001214 <main+0x27c>)
 8001152:	492f      	ldr	r1, [pc, #188]	; (8001210 <main+0x278>)
 8001154:	482b      	ldr	r0, [pc, #172]	; (8001204 <main+0x26c>)
 8001156:	f00b ff8f 	bl	800d078 <f_write>
 800115a:	4603      	mov	r3, r0
 800115c:	461a      	mov	r2, r3
 800115e:	4b22      	ldr	r3, [pc, #136]	; (80011e8 <main+0x250>)
 8001160:	701a      	strb	r2, [r3, #0]
				for(int i=0; i<DIM; i++){
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	3301      	adds	r3, #1
 8001166:	607b      	str	r3, [r7, #4]
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	f641 3257 	movw	r2, #6999	; 0x1b57
 800116e:	4293      	cmp	r3, r2
 8001170:	ddc8      	ble.n	8001104 <main+0x16c>
				}
				f_close(&fil);
 8001172:	4824      	ldr	r0, [pc, #144]	; (8001204 <main+0x26c>)
 8001174:	f00c f992 	bl	800d49c <f_close>
				f_sync(&fil);
 8001178:	4822      	ldr	r0, [pc, #136]	; (8001204 <main+0x26c>)
 800117a:	f00c f911 	bl	800d3a0 <f_sync>
				acquisizioni=0;
 800117e:	4b16      	ldr	r3, [pc, #88]	; (80011d8 <main+0x240>)
 8001180:	2200      	movs	r2, #0
 8001182:	601a      	str	r2, [r3, #0]
				fresult = f_mount(NULL, "/", 1);
 8001184:	2201      	movs	r2, #1
 8001186:	4916      	ldr	r1, [pc, #88]	; (80011e0 <main+0x248>)
 8001188:	2000      	movs	r0, #0
 800118a:	f00b fd63 	bl	800cc54 <f_mount>
 800118e:	4603      	mov	r3, r0
 8001190:	461a      	mov	r2, r3
 8001192:	4b15      	ldr	r3, [pc, #84]	; (80011e8 <main+0x250>)
 8001194:	701a      	strb	r2, [r3, #0]
				if (fresult == FR_OK)
 8001196:	4b14      	ldr	r3, [pc, #80]	; (80011e8 <main+0x250>)
 8001198:	781b      	ldrb	r3, [r3, #0]
 800119a:	2b00      	cmp	r3, #0
 800119c:	d102      	bne.n	80011a4 <main+0x20c>
					send_uart ("SD CARD UNMOUNTED successfully...\n");
 800119e:	4822      	ldr	r0, [pc, #136]	; (8001228 <main+0x290>)
 80011a0:	f7ff fee2 	bl	8000f68 <send_uart>
				IKS01A3_MOTION_SENSOR_Disable(IKS01A3_LSM6DSO_0, MOTION_ACCELERO);
 80011a4:	2102      	movs	r1, #2
 80011a6:	2000      	movs	r0, #0
 80011a8:	f005 fa74 	bl	8006694 <IKS01A3_MOTION_SENSOR_Disable>
				IKS01A3_MOTION_SENSOR_DeInit(IKS01A3_LSM6DSO_0);
 80011ac:	2000      	movs	r0, #0
 80011ae:	f005 fa07 	bl	80065c0 <IKS01A3_MOTION_SENSOR_DeInit>
				HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80011b2:	2200      	movs	r2, #0
 80011b4:	2120      	movs	r1, #32
 80011b6:	4819      	ldr	r0, [pc, #100]	; (800121c <main+0x284>)
 80011b8:	f006 f99c 	bl	80074f4 <HAL_GPIO_WritePin>
				stato_data_logger=WAIT_FOR_START;
 80011bc:	4b04      	ldr	r3, [pc, #16]	; (80011d0 <main+0x238>)
 80011be:	2200      	movs	r2, #0
 80011c0:	701a      	strb	r2, [r3, #0]
				premuto=false;
 80011c2:	4b04      	ldr	r3, [pc, #16]	; (80011d4 <main+0x23c>)
 80011c4:	2200      	movs	r2, #0
 80011c6:	701a      	strb	r2, [r3, #0]
			//			if(HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin)== GPIO_PIN_RESET){
			//				stato_data_logger=WAIT_FOR_CLOSE_FILE;
			//				HAL_TIM_Base_Stop_IT(&htim3);
			//			}

			break;
 80011c8:	e0a4      	b.n	8001314 <main+0x37c>

		case WAIT_FOR_CLOSE_FILE:{
			for(int i=0; i<DIM; i++){
 80011ca:	2300      	movs	r3, #0
 80011cc:	603b      	str	r3, [r7, #0]
 80011ce:	e05f      	b.n	8001290 <main+0x2f8>
 80011d0:	20014aae 	.word	0x20014aae
 80011d4:	20014a88 	.word	0x20014a88
 80011d8:	20014a84 	.word	0x20014a84
 80011dc:	20014a80 	.word	0x20014a80
 80011e0:	0800e08c 	.word	0x0800e08c
 80011e4:	20014ab0 	.word	0x20014ab0
 80011e8:	20016b18 	.word	0x20016b18
 80011ec:	0800e090 	.word	0x0800e090
 80011f0:	0800e0b4 	.word	0x0800e0b4
 80011f4:	45504000 	.word	0x45504000
 80011f8:	20014a8c 	.word	0x20014a8c
 80011fc:	0800e0d8 	.word	0x0800e0d8
 8001200:	20014a90 	.word	0x20014a90
 8001204:	20015ae8 	.word	0x20015ae8
 8001208:	0800e0ec 	.word	0x0800e0ec
 800120c:	0800e0f8 	.word	0x0800e0f8
 8001210:	20016b20 	.word	0x20016b20
 8001214:	20016b1c 	.word	0x20016b1c
 8001218:	200001d4 	.word	0x200001d4
 800121c:	40020000 	.word	0x40020000
 8001220:	20000260 	.word	0x20000260
 8001224:	0800e10c 	.word	0x0800e10c
 8001228:	0800e11c 	.word	0x0800e11c
				sprintf((char *)buffer, "%ld,%ld,%ld\r\n",misure_accelerometro[i].x, misure_accelerometro[i].y, misure_accelerometro[i].z );
 800122c:	493a      	ldr	r1, [pc, #232]	; (8001318 <main+0x380>)
 800122e:	683a      	ldr	r2, [r7, #0]
 8001230:	4613      	mov	r3, r2
 8001232:	005b      	lsls	r3, r3, #1
 8001234:	4413      	add	r3, r2
 8001236:	009b      	lsls	r3, r3, #2
 8001238:	440b      	add	r3, r1
 800123a:	6819      	ldr	r1, [r3, #0]
 800123c:	4836      	ldr	r0, [pc, #216]	; (8001318 <main+0x380>)
 800123e:	683a      	ldr	r2, [r7, #0]
 8001240:	4613      	mov	r3, r2
 8001242:	005b      	lsls	r3, r3, #1
 8001244:	4413      	add	r3, r2
 8001246:	009b      	lsls	r3, r3, #2
 8001248:	4403      	add	r3, r0
 800124a:	3304      	adds	r3, #4
 800124c:	6818      	ldr	r0, [r3, #0]
 800124e:	4c32      	ldr	r4, [pc, #200]	; (8001318 <main+0x380>)
 8001250:	683a      	ldr	r2, [r7, #0]
 8001252:	4613      	mov	r3, r2
 8001254:	005b      	lsls	r3, r3, #1
 8001256:	4413      	add	r3, r2
 8001258:	009b      	lsls	r3, r3, #2
 800125a:	4423      	add	r3, r4
 800125c:	3308      	adds	r3, #8
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	9300      	str	r3, [sp, #0]
 8001262:	4603      	mov	r3, r0
 8001264:	460a      	mov	r2, r1
 8001266:	492d      	ldr	r1, [pc, #180]	; (800131c <main+0x384>)
 8001268:	482d      	ldr	r0, [pc, #180]	; (8001320 <main+0x388>)
 800126a:	f00c fa95 	bl	800d798 <siprintf>
				fresult = f_write(&fil, buffer, bufsize(buffer), &bw);
 800126e:	482c      	ldr	r0, [pc, #176]	; (8001320 <main+0x388>)
 8001270:	f7ff fe62 	bl	8000f38 <bufsize>
 8001274:	4603      	mov	r3, r0
 8001276:	461a      	mov	r2, r3
 8001278:	4b2a      	ldr	r3, [pc, #168]	; (8001324 <main+0x38c>)
 800127a:	4929      	ldr	r1, [pc, #164]	; (8001320 <main+0x388>)
 800127c:	482a      	ldr	r0, [pc, #168]	; (8001328 <main+0x390>)
 800127e:	f00b fefb 	bl	800d078 <f_write>
 8001282:	4603      	mov	r3, r0
 8001284:	461a      	mov	r2, r3
 8001286:	4b29      	ldr	r3, [pc, #164]	; (800132c <main+0x394>)
 8001288:	701a      	strb	r2, [r3, #0]
			for(int i=0; i<DIM; i++){
 800128a:	683b      	ldr	r3, [r7, #0]
 800128c:	3301      	adds	r3, #1
 800128e:	603b      	str	r3, [r7, #0]
 8001290:	683b      	ldr	r3, [r7, #0]
 8001292:	f641 3257 	movw	r2, #6999	; 0x1b57
 8001296:	4293      	cmp	r3, r2
 8001298:	ddc8      	ble.n	800122c <main+0x294>
			}
			f_close(&fil);
 800129a:	4823      	ldr	r0, [pc, #140]	; (8001328 <main+0x390>)
 800129c:	f00c f8fe 	bl	800d49c <f_close>
			f_sync(&fil);
 80012a0:	4821      	ldr	r0, [pc, #132]	; (8001328 <main+0x390>)
 80012a2:	f00c f87d 	bl	800d3a0 <f_sync>
			//				HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
			//				stato_data_logger=WAIT_FOR_START;
			//
			//			}

			if(acquisizioni>=DIM_FINESTRA_BANCHI || premuto==true){
 80012a6:	4b22      	ldr	r3, [pc, #136]	; (8001330 <main+0x398>)
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	2b09      	cmp	r3, #9
 80012ac:	dc04      	bgt.n	80012b8 <main+0x320>
 80012ae:	4b21      	ldr	r3, [pc, #132]	; (8001334 <main+0x39c>)
 80012b0:	781b      	ldrb	r3, [r3, #0]
 80012b2:	b2db      	uxtb	r3, r3
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	d025      	beq.n	8001304 <main+0x36c>
				acquisizioni=0;
 80012b8:	4b1d      	ldr	r3, [pc, #116]	; (8001330 <main+0x398>)
 80012ba:	2200      	movs	r2, #0
 80012bc:	601a      	str	r2, [r3, #0]
				premuto=false;
 80012be:	4b1d      	ldr	r3, [pc, #116]	; (8001334 <main+0x39c>)
 80012c0:	2200      	movs	r2, #0
 80012c2:	701a      	strb	r2, [r3, #0]
				fresult = f_mount(NULL, "/", 1);
 80012c4:	2201      	movs	r2, #1
 80012c6:	491c      	ldr	r1, [pc, #112]	; (8001338 <main+0x3a0>)
 80012c8:	2000      	movs	r0, #0
 80012ca:	f00b fcc3 	bl	800cc54 <f_mount>
 80012ce:	4603      	mov	r3, r0
 80012d0:	461a      	mov	r2, r3
 80012d2:	4b16      	ldr	r3, [pc, #88]	; (800132c <main+0x394>)
 80012d4:	701a      	strb	r2, [r3, #0]
				if (fresult == FR_OK)
 80012d6:	4b15      	ldr	r3, [pc, #84]	; (800132c <main+0x394>)
 80012d8:	781b      	ldrb	r3, [r3, #0]
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d102      	bne.n	80012e4 <main+0x34c>
					send_uart ("SD CARD UNMOUNTED successfully...\n");
 80012de:	4817      	ldr	r0, [pc, #92]	; (800133c <main+0x3a4>)
 80012e0:	f7ff fe42 	bl	8000f68 <send_uart>
				IKS01A3_MOTION_SENSOR_Disable(IKS01A3_LSM6DSO_0, MOTION_ACCELERO);
 80012e4:	2102      	movs	r1, #2
 80012e6:	2000      	movs	r0, #0
 80012e8:	f005 f9d4 	bl	8006694 <IKS01A3_MOTION_SENSOR_Disable>
				IKS01A3_MOTION_SENSOR_DeInit(IKS01A3_LSM6DSO_0);
 80012ec:	2000      	movs	r0, #0
 80012ee:	f005 f967 	bl	80065c0 <IKS01A3_MOTION_SENSOR_DeInit>
				HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80012f2:	2200      	movs	r2, #0
 80012f4:	2120      	movs	r1, #32
 80012f6:	4812      	ldr	r0, [pc, #72]	; (8001340 <main+0x3a8>)
 80012f8:	f006 f8fc 	bl	80074f4 <HAL_GPIO_WritePin>
				stato_data_logger=WAIT_FOR_START;
 80012fc:	4b11      	ldr	r3, [pc, #68]	; (8001344 <main+0x3ac>)
 80012fe:	2200      	movs	r2, #0
 8001300:	701a      	strb	r2, [r3, #0]
				//				dimensione=false;
			}



			break;
 8001302:	e008      	b.n	8001316 <main+0x37e>
				stato_data_logger=WAIT_FOR_OPEN_FILE;
 8001304:	4b0f      	ldr	r3, [pc, #60]	; (8001344 <main+0x3ac>)
 8001306:	2201      	movs	r2, #1
 8001308:	701a      	strb	r2, [r3, #0]
			break;
 800130a:	e004      	b.n	8001316 <main+0x37e>
		}
		default:
			break;
 800130c:	bf00      	nop
 800130e:	e657      	b.n	8000fc0 <main+0x28>
			break;
 8001310:	bf00      	nop
 8001312:	e655      	b.n	8000fc0 <main+0x28>
			break;
 8001314:	bf00      	nop
		switch (stato_data_logger){
 8001316:	e653      	b.n	8000fc0 <main+0x28>
 8001318:	20000260 	.word	0x20000260
 800131c:	0800e10c 	.word	0x0800e10c
 8001320:	20016b20 	.word	0x20016b20
 8001324:	20016b1c 	.word	0x20016b1c
 8001328:	20015ae8 	.word	0x20015ae8
 800132c:	20016b18 	.word	0x20016b18
 8001330:	20014a84 	.word	0x20014a84
 8001334:	20014a88 	.word	0x20014a88
 8001338:	0800e08c 	.word	0x0800e08c
 800133c:	0800e11c 	.word	0x0800e11c
 8001340:	40020000 	.word	0x40020000
 8001344:	20014aae 	.word	0x20014aae

08001348 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8001348:	b580      	push	{r7, lr}
 800134a:	b094      	sub	sp, #80	; 0x50
 800134c:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800134e:	f107 0320 	add.w	r3, r7, #32
 8001352:	2230      	movs	r2, #48	; 0x30
 8001354:	2100      	movs	r1, #0
 8001356:	4618      	mov	r0, r3
 8001358:	f00c fa16 	bl	800d788 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800135c:	f107 030c 	add.w	r3, r7, #12
 8001360:	2200      	movs	r2, #0
 8001362:	601a      	str	r2, [r3, #0]
 8001364:	605a      	str	r2, [r3, #4]
 8001366:	609a      	str	r2, [r3, #8]
 8001368:	60da      	str	r2, [r3, #12]
 800136a:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 800136c:	2300      	movs	r3, #0
 800136e:	60bb      	str	r3, [r7, #8]
 8001370:	4b2a      	ldr	r3, [pc, #168]	; (800141c <SystemClock_Config+0xd4>)
 8001372:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001374:	4a29      	ldr	r2, [pc, #164]	; (800141c <SystemClock_Config+0xd4>)
 8001376:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800137a:	6413      	str	r3, [r2, #64]	; 0x40
 800137c:	4b27      	ldr	r3, [pc, #156]	; (800141c <SystemClock_Config+0xd4>)
 800137e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001380:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001384:	60bb      	str	r3, [r7, #8]
 8001386:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8001388:	2300      	movs	r3, #0
 800138a:	607b      	str	r3, [r7, #4]
 800138c:	4b24      	ldr	r3, [pc, #144]	; (8001420 <SystemClock_Config+0xd8>)
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001394:	4a22      	ldr	r2, [pc, #136]	; (8001420 <SystemClock_Config+0xd8>)
 8001396:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800139a:	6013      	str	r3, [r2, #0]
 800139c:	4b20      	ldr	r3, [pc, #128]	; (8001420 <SystemClock_Config+0xd8>)
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80013a4:	607b      	str	r3, [r7, #4]
 80013a6:	687b      	ldr	r3, [r7, #4]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 80013a8:	230a      	movs	r3, #10
 80013aa:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80013ac:	2301      	movs	r3, #1
 80013ae:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80013b0:	2310      	movs	r3, #16
 80013b2:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80013b4:	2301      	movs	r3, #1
 80013b6:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80013b8:	2302      	movs	r3, #2
 80013ba:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80013bc:	2300      	movs	r3, #0
 80013be:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLM = 16;
 80013c0:	2310      	movs	r3, #16
 80013c2:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLN = 336;
 80013c4:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80013c8:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80013ca:	2304      	movs	r3, #4
 80013cc:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLQ = 7;
 80013ce:	2307      	movs	r3, #7
 80013d0:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80013d2:	f107 0320 	add.w	r3, r7, #32
 80013d6:	4618      	mov	r0, r3
 80013d8:	f007 f8e8 	bl	80085ac <HAL_RCC_OscConfig>
 80013dc:	4603      	mov	r3, r0
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d001      	beq.n	80013e6 <SystemClock_Config+0x9e>
	{
		Error_Handler();
 80013e2:	f000 f951 	bl	8001688 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80013e6:	230f      	movs	r3, #15
 80013e8:	60fb      	str	r3, [r7, #12]
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80013ea:	2302      	movs	r3, #2
 80013ec:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80013ee:	2300      	movs	r3, #0
 80013f0:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80013f2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80013f6:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80013f8:	2300      	movs	r3, #0
 80013fa:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80013fc:	f107 030c 	add.w	r3, r7, #12
 8001400:	2102      	movs	r1, #2
 8001402:	4618      	mov	r0, r3
 8001404:	f007 fb4a 	bl	8008a9c <HAL_RCC_ClockConfig>
 8001408:	4603      	mov	r3, r0
 800140a:	2b00      	cmp	r3, #0
 800140c:	d001      	beq.n	8001412 <SystemClock_Config+0xca>
	{
		Error_Handler();
 800140e:	f000 f93b 	bl	8001688 <Error_Handler>
	}
}
 8001412:	bf00      	nop
 8001414:	3750      	adds	r7, #80	; 0x50
 8001416:	46bd      	mov	sp, r7
 8001418:	bd80      	pop	{r7, pc}
 800141a:	bf00      	nop
 800141c:	40023800 	.word	0x40023800
 8001420:	40007000 	.word	0x40007000

08001424 <MX_SPI1_Init>:
 * @brief SPI1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI1_Init(void)
{
 8001424:	b580      	push	{r7, lr}
 8001426:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN SPI1_Init 1 */

	/* USER CODE END SPI1_Init 1 */
	/* SPI1 parameter configuration*/
	hspi1.Instance = SPI1;
 8001428:	4b17      	ldr	r3, [pc, #92]	; (8001488 <MX_SPI1_Init+0x64>)
 800142a:	4a18      	ldr	r2, [pc, #96]	; (800148c <MX_SPI1_Init+0x68>)
 800142c:	601a      	str	r2, [r3, #0]
	hspi1.Init.Mode = SPI_MODE_MASTER;
 800142e:	4b16      	ldr	r3, [pc, #88]	; (8001488 <MX_SPI1_Init+0x64>)
 8001430:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001434:	605a      	str	r2, [r3, #4]
	hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001436:	4b14      	ldr	r3, [pc, #80]	; (8001488 <MX_SPI1_Init+0x64>)
 8001438:	2200      	movs	r2, #0
 800143a:	609a      	str	r2, [r3, #8]
	hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800143c:	4b12      	ldr	r3, [pc, #72]	; (8001488 <MX_SPI1_Init+0x64>)
 800143e:	2200      	movs	r2, #0
 8001440:	60da      	str	r2, [r3, #12]
	hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001442:	4b11      	ldr	r3, [pc, #68]	; (8001488 <MX_SPI1_Init+0x64>)
 8001444:	2200      	movs	r2, #0
 8001446:	611a      	str	r2, [r3, #16]
	hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001448:	4b0f      	ldr	r3, [pc, #60]	; (8001488 <MX_SPI1_Init+0x64>)
 800144a:	2200      	movs	r2, #0
 800144c:	615a      	str	r2, [r3, #20]
	hspi1.Init.NSS = SPI_NSS_SOFT;
 800144e:	4b0e      	ldr	r3, [pc, #56]	; (8001488 <MX_SPI1_Init+0x64>)
 8001450:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001454:	619a      	str	r2, [r3, #24]
	hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 8001456:	4b0c      	ldr	r3, [pc, #48]	; (8001488 <MX_SPI1_Init+0x64>)
 8001458:	2230      	movs	r2, #48	; 0x30
 800145a:	61da      	str	r2, [r3, #28]
	hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800145c:	4b0a      	ldr	r3, [pc, #40]	; (8001488 <MX_SPI1_Init+0x64>)
 800145e:	2200      	movs	r2, #0
 8001460:	621a      	str	r2, [r3, #32]
	hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001462:	4b09      	ldr	r3, [pc, #36]	; (8001488 <MX_SPI1_Init+0x64>)
 8001464:	2200      	movs	r2, #0
 8001466:	625a      	str	r2, [r3, #36]	; 0x24
	hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001468:	4b07      	ldr	r3, [pc, #28]	; (8001488 <MX_SPI1_Init+0x64>)
 800146a:	2200      	movs	r2, #0
 800146c:	629a      	str	r2, [r3, #40]	; 0x28
	hspi1.Init.CRCPolynomial = 10;
 800146e:	4b06      	ldr	r3, [pc, #24]	; (8001488 <MX_SPI1_Init+0x64>)
 8001470:	220a      	movs	r2, #10
 8001472:	62da      	str	r2, [r3, #44]	; 0x2c
	if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001474:	4804      	ldr	r0, [pc, #16]	; (8001488 <MX_SPI1_Init+0x64>)
 8001476:	f007 fd31 	bl	8008edc <HAL_SPI_Init>
 800147a:	4603      	mov	r3, r0
 800147c:	2b00      	cmp	r3, #0
 800147e:	d001      	beq.n	8001484 <MX_SPI1_Init+0x60>
	{
		Error_Handler();
 8001480:	f000 f902 	bl	8001688 <Error_Handler>
	}
	/* USER CODE BEGIN SPI1_Init 2 */

	/* USER CODE END SPI1_Init 2 */

}
 8001484:	bf00      	nop
 8001486:	bd80      	pop	{r7, pc}
 8001488:	2000017c 	.word	0x2000017c
 800148c:	40013000 	.word	0x40013000

08001490 <MX_TIM3_Init>:
 * @brief TIM3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM3_Init(void)
{
 8001490:	b580      	push	{r7, lr}
 8001492:	b086      	sub	sp, #24
 8001494:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM3_Init 0 */

	/* USER CODE END TIM3_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001496:	f107 0308 	add.w	r3, r7, #8
 800149a:	2200      	movs	r2, #0
 800149c:	601a      	str	r2, [r3, #0]
 800149e:	605a      	str	r2, [r3, #4]
 80014a0:	609a      	str	r2, [r3, #8]
 80014a2:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 80014a4:	463b      	mov	r3, r7
 80014a6:	2200      	movs	r2, #0
 80014a8:	601a      	str	r2, [r3, #0]
 80014aa:	605a      	str	r2, [r3, #4]

	/* USER CODE BEGIN TIM3_Init 1 */

	/* USER CODE END TIM3_Init 1 */
	htim3.Instance = TIM3;
 80014ac:	4b1d      	ldr	r3, [pc, #116]	; (8001524 <MX_TIM3_Init+0x94>)
 80014ae:	4a1e      	ldr	r2, [pc, #120]	; (8001528 <MX_TIM3_Init+0x98>)
 80014b0:	601a      	str	r2, [r3, #0]
	htim3.Init.Prescaler = 84;
 80014b2:	4b1c      	ldr	r3, [pc, #112]	; (8001524 <MX_TIM3_Init+0x94>)
 80014b4:	2254      	movs	r2, #84	; 0x54
 80014b6:	605a      	str	r2, [r3, #4]
	htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80014b8:	4b1a      	ldr	r3, [pc, #104]	; (8001524 <MX_TIM3_Init+0x94>)
 80014ba:	2200      	movs	r2, #0
 80014bc:	609a      	str	r2, [r3, #8]
	htim3.Init.Period = 1000;
 80014be:	4b19      	ldr	r3, [pc, #100]	; (8001524 <MX_TIM3_Init+0x94>)
 80014c0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80014c4:	60da      	str	r2, [r3, #12]
	htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80014c6:	4b17      	ldr	r3, [pc, #92]	; (8001524 <MX_TIM3_Init+0x94>)
 80014c8:	2200      	movs	r2, #0
 80014ca:	611a      	str	r2, [r3, #16]
	htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80014cc:	4b15      	ldr	r3, [pc, #84]	; (8001524 <MX_TIM3_Init+0x94>)
 80014ce:	2200      	movs	r2, #0
 80014d0:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80014d2:	4814      	ldr	r0, [pc, #80]	; (8001524 <MX_TIM3_Init+0x94>)
 80014d4:	f008 f934 	bl	8009740 <HAL_TIM_Base_Init>
 80014d8:	4603      	mov	r3, r0
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d001      	beq.n	80014e2 <MX_TIM3_Init+0x52>
	{
		Error_Handler();
 80014de:	f000 f8d3 	bl	8001688 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80014e2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80014e6:	60bb      	str	r3, [r7, #8]
	if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80014e8:	f107 0308 	add.w	r3, r7, #8
 80014ec:	4619      	mov	r1, r3
 80014ee:	480d      	ldr	r0, [pc, #52]	; (8001524 <MX_TIM3_Init+0x94>)
 80014f0:	f008 fb0f 	bl	8009b12 <HAL_TIM_ConfigClockSource>
 80014f4:	4603      	mov	r3, r0
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d001      	beq.n	80014fe <MX_TIM3_Init+0x6e>
	{
		Error_Handler();
 80014fa:	f000 f8c5 	bl	8001688 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80014fe:	2300      	movs	r3, #0
 8001500:	603b      	str	r3, [r7, #0]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001502:	2300      	movs	r3, #0
 8001504:	607b      	str	r3, [r7, #4]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001506:	463b      	mov	r3, r7
 8001508:	4619      	mov	r1, r3
 800150a:	4806      	ldr	r0, [pc, #24]	; (8001524 <MX_TIM3_Init+0x94>)
 800150c:	f008 fd14 	bl	8009f38 <HAL_TIMEx_MasterConfigSynchronization>
 8001510:	4603      	mov	r3, r0
 8001512:	2b00      	cmp	r3, #0
 8001514:	d001      	beq.n	800151a <MX_TIM3_Init+0x8a>
	{
		Error_Handler();
 8001516:	f000 f8b7 	bl	8001688 <Error_Handler>
	}
	/* USER CODE BEGIN TIM3_Init 2 */

	/* USER CODE END TIM3_Init 2 */

}
 800151a:	bf00      	nop
 800151c:	3718      	adds	r7, #24
 800151e:	46bd      	mov	sp, r7
 8001520:	bd80      	pop	{r7, pc}
 8001522:	bf00      	nop
 8001524:	200001d4 	.word	0x200001d4
 8001528:	40000400 	.word	0x40000400

0800152c <MX_USART2_UART_Init>:
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void)
{
 800152c:	b580      	push	{r7, lr}
 800152e:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 8001530:	4b11      	ldr	r3, [pc, #68]	; (8001578 <MX_USART2_UART_Init+0x4c>)
 8001532:	4a12      	ldr	r2, [pc, #72]	; (800157c <MX_USART2_UART_Init+0x50>)
 8001534:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 115200;
 8001536:	4b10      	ldr	r3, [pc, #64]	; (8001578 <MX_USART2_UART_Init+0x4c>)
 8001538:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800153c:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800153e:	4b0e      	ldr	r3, [pc, #56]	; (8001578 <MX_USART2_UART_Init+0x4c>)
 8001540:	2200      	movs	r2, #0
 8001542:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 8001544:	4b0c      	ldr	r3, [pc, #48]	; (8001578 <MX_USART2_UART_Init+0x4c>)
 8001546:	2200      	movs	r2, #0
 8001548:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 800154a:	4b0b      	ldr	r3, [pc, #44]	; (8001578 <MX_USART2_UART_Init+0x4c>)
 800154c:	2200      	movs	r2, #0
 800154e:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 8001550:	4b09      	ldr	r3, [pc, #36]	; (8001578 <MX_USART2_UART_Init+0x4c>)
 8001552:	220c      	movs	r2, #12
 8001554:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001556:	4b08      	ldr	r3, [pc, #32]	; (8001578 <MX_USART2_UART_Init+0x4c>)
 8001558:	2200      	movs	r2, #0
 800155a:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800155c:	4b06      	ldr	r3, [pc, #24]	; (8001578 <MX_USART2_UART_Init+0x4c>)
 800155e:	2200      	movs	r2, #0
 8001560:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart2) != HAL_OK)
 8001562:	4805      	ldr	r0, [pc, #20]	; (8001578 <MX_USART2_UART_Init+0x4c>)
 8001564:	f008 fd6a 	bl	800a03c <HAL_UART_Init>
 8001568:	4603      	mov	r3, r0
 800156a:	2b00      	cmp	r3, #0
 800156c:	d001      	beq.n	8001572 <MX_USART2_UART_Init+0x46>
	{
		Error_Handler();
 800156e:	f000 f88b 	bl	8001688 <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */

}
 8001572:	bf00      	nop
 8001574:	bd80      	pop	{r7, pc}
 8001576:	bf00      	nop
 8001578:	2000021c 	.word	0x2000021c
 800157c:	40004400 	.word	0x40004400

08001580 <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 8001580:	b580      	push	{r7, lr}
 8001582:	b08a      	sub	sp, #40	; 0x28
 8001584:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001586:	f107 0314 	add.w	r3, r7, #20
 800158a:	2200      	movs	r2, #0
 800158c:	601a      	str	r2, [r3, #0]
 800158e:	605a      	str	r2, [r3, #4]
 8001590:	609a      	str	r2, [r3, #8]
 8001592:	60da      	str	r2, [r3, #12]
 8001594:	611a      	str	r2, [r3, #16]
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8001596:	2300      	movs	r3, #0
 8001598:	613b      	str	r3, [r7, #16]
 800159a:	4b38      	ldr	r3, [pc, #224]	; (800167c <MX_GPIO_Init+0xfc>)
 800159c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800159e:	4a37      	ldr	r2, [pc, #220]	; (800167c <MX_GPIO_Init+0xfc>)
 80015a0:	f043 0304 	orr.w	r3, r3, #4
 80015a4:	6313      	str	r3, [r2, #48]	; 0x30
 80015a6:	4b35      	ldr	r3, [pc, #212]	; (800167c <MX_GPIO_Init+0xfc>)
 80015a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015aa:	f003 0304 	and.w	r3, r3, #4
 80015ae:	613b      	str	r3, [r7, #16]
 80015b0:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 80015b2:	2300      	movs	r3, #0
 80015b4:	60fb      	str	r3, [r7, #12]
 80015b6:	4b31      	ldr	r3, [pc, #196]	; (800167c <MX_GPIO_Init+0xfc>)
 80015b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015ba:	4a30      	ldr	r2, [pc, #192]	; (800167c <MX_GPIO_Init+0xfc>)
 80015bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80015c0:	6313      	str	r3, [r2, #48]	; 0x30
 80015c2:	4b2e      	ldr	r3, [pc, #184]	; (800167c <MX_GPIO_Init+0xfc>)
 80015c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80015ca:	60fb      	str	r3, [r7, #12]
 80015cc:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80015ce:	2300      	movs	r3, #0
 80015d0:	60bb      	str	r3, [r7, #8]
 80015d2:	4b2a      	ldr	r3, [pc, #168]	; (800167c <MX_GPIO_Init+0xfc>)
 80015d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015d6:	4a29      	ldr	r2, [pc, #164]	; (800167c <MX_GPIO_Init+0xfc>)
 80015d8:	f043 0301 	orr.w	r3, r3, #1
 80015dc:	6313      	str	r3, [r2, #48]	; 0x30
 80015de:	4b27      	ldr	r3, [pc, #156]	; (800167c <MX_GPIO_Init+0xfc>)
 80015e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015e2:	f003 0301 	and.w	r3, r3, #1
 80015e6:	60bb      	str	r3, [r7, #8]
 80015e8:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 80015ea:	2300      	movs	r3, #0
 80015ec:	607b      	str	r3, [r7, #4]
 80015ee:	4b23      	ldr	r3, [pc, #140]	; (800167c <MX_GPIO_Init+0xfc>)
 80015f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015f2:	4a22      	ldr	r2, [pc, #136]	; (800167c <MX_GPIO_Init+0xfc>)
 80015f4:	f043 0302 	orr.w	r3, r3, #2
 80015f8:	6313      	str	r3, [r2, #48]	; 0x30
 80015fa:	4b20      	ldr	r3, [pc, #128]	; (800167c <MX_GPIO_Init+0xfc>)
 80015fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015fe:	f003 0302 	and.w	r3, r3, #2
 8001602:	607b      	str	r3, [r7, #4]
 8001604:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOA, SD_CS_Pin|LD2_Pin, GPIO_PIN_RESET);
 8001606:	2200      	movs	r2, #0
 8001608:	2130      	movs	r1, #48	; 0x30
 800160a:	481d      	ldr	r0, [pc, #116]	; (8001680 <MX_GPIO_Init+0x100>)
 800160c:	f005 ff72 	bl	80074f4 <HAL_GPIO_WritePin>

	/*Configure GPIO pin : B1_Pin */
	GPIO_InitStruct.Pin = B1_Pin;
 8001610:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001614:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001616:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800161a:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800161c:	2300      	movs	r3, #0
 800161e:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001620:	f107 0314 	add.w	r3, r7, #20
 8001624:	4619      	mov	r1, r3
 8001626:	4817      	ldr	r0, [pc, #92]	; (8001684 <MX_GPIO_Init+0x104>)
 8001628:	f005 fcfc 	bl	8007024 <HAL_GPIO_Init>

	/*Configure GPIO pin : SD_CS_Pin */
	GPIO_InitStruct.Pin = SD_CS_Pin;
 800162c:	2310      	movs	r3, #16
 800162e:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001630:	2301      	movs	r3, #1
 8001632:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001634:	2300      	movs	r3, #0
 8001636:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001638:	2302      	movs	r3, #2
 800163a:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(SD_CS_GPIO_Port, &GPIO_InitStruct);
 800163c:	f107 0314 	add.w	r3, r7, #20
 8001640:	4619      	mov	r1, r3
 8001642:	480f      	ldr	r0, [pc, #60]	; (8001680 <MX_GPIO_Init+0x100>)
 8001644:	f005 fcee 	bl	8007024 <HAL_GPIO_Init>

	/*Configure GPIO pin : LD2_Pin */
	GPIO_InitStruct.Pin = LD2_Pin;
 8001648:	2320      	movs	r3, #32
 800164a:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800164c:	2301      	movs	r3, #1
 800164e:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001650:	2300      	movs	r3, #0
 8001652:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001654:	2300      	movs	r3, #0
 8001656:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001658:	f107 0314 	add.w	r3, r7, #20
 800165c:	4619      	mov	r1, r3
 800165e:	4808      	ldr	r0, [pc, #32]	; (8001680 <MX_GPIO_Init+0x100>)
 8001660:	f005 fce0 	bl	8007024 <HAL_GPIO_Init>

	/* EXTI interrupt init*/
	HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001664:	2200      	movs	r2, #0
 8001666:	2100      	movs	r1, #0
 8001668:	2028      	movs	r0, #40	; 0x28
 800166a:	f005 fca4 	bl	8006fb6 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800166e:	2028      	movs	r0, #40	; 0x28
 8001670:	f005 fcbd 	bl	8006fee <HAL_NVIC_EnableIRQ>

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 8001674:	bf00      	nop
 8001676:	3728      	adds	r7, #40	; 0x28
 8001678:	46bd      	mov	sp, r7
 800167a:	bd80      	pop	{r7, pc}
 800167c:	40023800 	.word	0x40023800
 8001680:	40020000 	.word	0x40020000
 8001684:	40020800 	.word	0x40020800

08001688 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8001688:	b480      	push	{r7}
 800168a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800168c:	b672      	cpsid	i
}
 800168e:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8001690:	e7fe      	b.n	8001690 <Error_Handler+0x8>
	...

08001694 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001694:	b580      	push	{r7, lr}
 8001696:	b082      	sub	sp, #8
 8001698:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800169a:	2300      	movs	r3, #0
 800169c:	607b      	str	r3, [r7, #4]
 800169e:	4b10      	ldr	r3, [pc, #64]	; (80016e0 <HAL_MspInit+0x4c>)
 80016a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016a2:	4a0f      	ldr	r2, [pc, #60]	; (80016e0 <HAL_MspInit+0x4c>)
 80016a4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80016a8:	6453      	str	r3, [r2, #68]	; 0x44
 80016aa:	4b0d      	ldr	r3, [pc, #52]	; (80016e0 <HAL_MspInit+0x4c>)
 80016ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016ae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80016b2:	607b      	str	r3, [r7, #4]
 80016b4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80016b6:	2300      	movs	r3, #0
 80016b8:	603b      	str	r3, [r7, #0]
 80016ba:	4b09      	ldr	r3, [pc, #36]	; (80016e0 <HAL_MspInit+0x4c>)
 80016bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016be:	4a08      	ldr	r2, [pc, #32]	; (80016e0 <HAL_MspInit+0x4c>)
 80016c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80016c4:	6413      	str	r3, [r2, #64]	; 0x40
 80016c6:	4b06      	ldr	r3, [pc, #24]	; (80016e0 <HAL_MspInit+0x4c>)
 80016c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016ce:	603b      	str	r3, [r7, #0]
 80016d0:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80016d2:	2007      	movs	r0, #7
 80016d4:	f005 fc64 	bl	8006fa0 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80016d8:	bf00      	nop
 80016da:	3708      	adds	r7, #8
 80016dc:	46bd      	mov	sp, r7
 80016de:	bd80      	pop	{r7, pc}
 80016e0:	40023800 	.word	0x40023800

080016e4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80016e4:	b580      	push	{r7, lr}
 80016e6:	b08a      	sub	sp, #40	; 0x28
 80016e8:	af00      	add	r7, sp, #0
 80016ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016ec:	f107 0314 	add.w	r3, r7, #20
 80016f0:	2200      	movs	r2, #0
 80016f2:	601a      	str	r2, [r3, #0]
 80016f4:	605a      	str	r2, [r3, #4]
 80016f6:	609a      	str	r2, [r3, #8]
 80016f8:	60da      	str	r2, [r3, #12]
 80016fa:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	4a28      	ldr	r2, [pc, #160]	; (80017a4 <HAL_SPI_MspInit+0xc0>)
 8001702:	4293      	cmp	r3, r2
 8001704:	d149      	bne.n	800179a <HAL_SPI_MspInit+0xb6>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001706:	2300      	movs	r3, #0
 8001708:	613b      	str	r3, [r7, #16]
 800170a:	4b27      	ldr	r3, [pc, #156]	; (80017a8 <HAL_SPI_MspInit+0xc4>)
 800170c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800170e:	4a26      	ldr	r2, [pc, #152]	; (80017a8 <HAL_SPI_MspInit+0xc4>)
 8001710:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001714:	6453      	str	r3, [r2, #68]	; 0x44
 8001716:	4b24      	ldr	r3, [pc, #144]	; (80017a8 <HAL_SPI_MspInit+0xc4>)
 8001718:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800171a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800171e:	613b      	str	r3, [r7, #16]
 8001720:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001722:	2300      	movs	r3, #0
 8001724:	60fb      	str	r3, [r7, #12]
 8001726:	4b20      	ldr	r3, [pc, #128]	; (80017a8 <HAL_SPI_MspInit+0xc4>)
 8001728:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800172a:	4a1f      	ldr	r2, [pc, #124]	; (80017a8 <HAL_SPI_MspInit+0xc4>)
 800172c:	f043 0301 	orr.w	r3, r3, #1
 8001730:	6313      	str	r3, [r2, #48]	; 0x30
 8001732:	4b1d      	ldr	r3, [pc, #116]	; (80017a8 <HAL_SPI_MspInit+0xc4>)
 8001734:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001736:	f003 0301 	and.w	r3, r3, #1
 800173a:	60fb      	str	r3, [r7, #12]
 800173c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800173e:	2300      	movs	r3, #0
 8001740:	60bb      	str	r3, [r7, #8]
 8001742:	4b19      	ldr	r3, [pc, #100]	; (80017a8 <HAL_SPI_MspInit+0xc4>)
 8001744:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001746:	4a18      	ldr	r2, [pc, #96]	; (80017a8 <HAL_SPI_MspInit+0xc4>)
 8001748:	f043 0302 	orr.w	r3, r3, #2
 800174c:	6313      	str	r3, [r2, #48]	; 0x30
 800174e:	4b16      	ldr	r3, [pc, #88]	; (80017a8 <HAL_SPI_MspInit+0xc4>)
 8001750:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001752:	f003 0302 	and.w	r3, r3, #2
 8001756:	60bb      	str	r3, [r7, #8]
 8001758:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    PB3     ------> SPI1_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800175a:	23c0      	movs	r3, #192	; 0xc0
 800175c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800175e:	2302      	movs	r3, #2
 8001760:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001762:	2300      	movs	r3, #0
 8001764:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001766:	2303      	movs	r3, #3
 8001768:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800176a:	2305      	movs	r3, #5
 800176c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800176e:	f107 0314 	add.w	r3, r7, #20
 8001772:	4619      	mov	r1, r3
 8001774:	480d      	ldr	r0, [pc, #52]	; (80017ac <HAL_SPI_MspInit+0xc8>)
 8001776:	f005 fc55 	bl	8007024 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800177a:	2308      	movs	r3, #8
 800177c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800177e:	2302      	movs	r3, #2
 8001780:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001782:	2300      	movs	r3, #0
 8001784:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001786:	2303      	movs	r3, #3
 8001788:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800178a:	2305      	movs	r3, #5
 800178c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800178e:	f107 0314 	add.w	r3, r7, #20
 8001792:	4619      	mov	r1, r3
 8001794:	4806      	ldr	r0, [pc, #24]	; (80017b0 <HAL_SPI_MspInit+0xcc>)
 8001796:	f005 fc45 	bl	8007024 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 800179a:	bf00      	nop
 800179c:	3728      	adds	r7, #40	; 0x28
 800179e:	46bd      	mov	sp, r7
 80017a0:	bd80      	pop	{r7, pc}
 80017a2:	bf00      	nop
 80017a4:	40013000 	.word	0x40013000
 80017a8:	40023800 	.word	0x40023800
 80017ac:	40020000 	.word	0x40020000
 80017b0:	40020400 	.word	0x40020400

080017b4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80017b4:	b580      	push	{r7, lr}
 80017b6:	b084      	sub	sp, #16
 80017b8:	af00      	add	r7, sp, #0
 80017ba:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	4a0e      	ldr	r2, [pc, #56]	; (80017fc <HAL_TIM_Base_MspInit+0x48>)
 80017c2:	4293      	cmp	r3, r2
 80017c4:	d115      	bne.n	80017f2 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80017c6:	2300      	movs	r3, #0
 80017c8:	60fb      	str	r3, [r7, #12]
 80017ca:	4b0d      	ldr	r3, [pc, #52]	; (8001800 <HAL_TIM_Base_MspInit+0x4c>)
 80017cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017ce:	4a0c      	ldr	r2, [pc, #48]	; (8001800 <HAL_TIM_Base_MspInit+0x4c>)
 80017d0:	f043 0302 	orr.w	r3, r3, #2
 80017d4:	6413      	str	r3, [r2, #64]	; 0x40
 80017d6:	4b0a      	ldr	r3, [pc, #40]	; (8001800 <HAL_TIM_Base_MspInit+0x4c>)
 80017d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017da:	f003 0302 	and.w	r3, r3, #2
 80017de:	60fb      	str	r3, [r7, #12]
 80017e0:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80017e2:	2200      	movs	r2, #0
 80017e4:	2100      	movs	r1, #0
 80017e6:	201d      	movs	r0, #29
 80017e8:	f005 fbe5 	bl	8006fb6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80017ec:	201d      	movs	r0, #29
 80017ee:	f005 fbfe 	bl	8006fee <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80017f2:	bf00      	nop
 80017f4:	3710      	adds	r7, #16
 80017f6:	46bd      	mov	sp, r7
 80017f8:	bd80      	pop	{r7, pc}
 80017fa:	bf00      	nop
 80017fc:	40000400 	.word	0x40000400
 8001800:	40023800 	.word	0x40023800

08001804 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001804:	b580      	push	{r7, lr}
 8001806:	b08a      	sub	sp, #40	; 0x28
 8001808:	af00      	add	r7, sp, #0
 800180a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800180c:	f107 0314 	add.w	r3, r7, #20
 8001810:	2200      	movs	r2, #0
 8001812:	601a      	str	r2, [r3, #0]
 8001814:	605a      	str	r2, [r3, #4]
 8001816:	609a      	str	r2, [r3, #8]
 8001818:	60da      	str	r2, [r3, #12]
 800181a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	4a19      	ldr	r2, [pc, #100]	; (8001888 <HAL_UART_MspInit+0x84>)
 8001822:	4293      	cmp	r3, r2
 8001824:	d12b      	bne.n	800187e <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001826:	2300      	movs	r3, #0
 8001828:	613b      	str	r3, [r7, #16]
 800182a:	4b18      	ldr	r3, [pc, #96]	; (800188c <HAL_UART_MspInit+0x88>)
 800182c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800182e:	4a17      	ldr	r2, [pc, #92]	; (800188c <HAL_UART_MspInit+0x88>)
 8001830:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001834:	6413      	str	r3, [r2, #64]	; 0x40
 8001836:	4b15      	ldr	r3, [pc, #84]	; (800188c <HAL_UART_MspInit+0x88>)
 8001838:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800183a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800183e:	613b      	str	r3, [r7, #16]
 8001840:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001842:	2300      	movs	r3, #0
 8001844:	60fb      	str	r3, [r7, #12]
 8001846:	4b11      	ldr	r3, [pc, #68]	; (800188c <HAL_UART_MspInit+0x88>)
 8001848:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800184a:	4a10      	ldr	r2, [pc, #64]	; (800188c <HAL_UART_MspInit+0x88>)
 800184c:	f043 0301 	orr.w	r3, r3, #1
 8001850:	6313      	str	r3, [r2, #48]	; 0x30
 8001852:	4b0e      	ldr	r3, [pc, #56]	; (800188c <HAL_UART_MspInit+0x88>)
 8001854:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001856:	f003 0301 	and.w	r3, r3, #1
 800185a:	60fb      	str	r3, [r7, #12]
 800185c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800185e:	230c      	movs	r3, #12
 8001860:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001862:	2302      	movs	r3, #2
 8001864:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001866:	2300      	movs	r3, #0
 8001868:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800186a:	2300      	movs	r3, #0
 800186c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800186e:	2307      	movs	r3, #7
 8001870:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001872:	f107 0314 	add.w	r3, r7, #20
 8001876:	4619      	mov	r1, r3
 8001878:	4805      	ldr	r0, [pc, #20]	; (8001890 <HAL_UART_MspInit+0x8c>)
 800187a:	f005 fbd3 	bl	8007024 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800187e:	bf00      	nop
 8001880:	3728      	adds	r7, #40	; 0x28
 8001882:	46bd      	mov	sp, r7
 8001884:	bd80      	pop	{r7, pc}
 8001886:	bf00      	nop
 8001888:	40004400 	.word	0x40004400
 800188c:	40023800 	.word	0x40023800
 8001890:	40020000 	.word	0x40020000

08001894 <SDTimer_Handler>:

/* External variables --------------------------------------------------------*/
extern TIM_HandleTypeDef htim3;
/* USER CODE BEGIN EV */
void SDTimer_Handler(void)
{
 8001894:	b480      	push	{r7}
 8001896:	af00      	add	r7, sp, #0
  if(Timer1 > 0)
 8001898:	4b0e      	ldr	r3, [pc, #56]	; (80018d4 <SDTimer_Handler+0x40>)
 800189a:	781b      	ldrb	r3, [r3, #0]
 800189c:	b2db      	uxtb	r3, r3
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d006      	beq.n	80018b0 <SDTimer_Handler+0x1c>
    Timer1--;
 80018a2:	4b0c      	ldr	r3, [pc, #48]	; (80018d4 <SDTimer_Handler+0x40>)
 80018a4:	781b      	ldrb	r3, [r3, #0]
 80018a6:	b2db      	uxtb	r3, r3
 80018a8:	3b01      	subs	r3, #1
 80018aa:	b2da      	uxtb	r2, r3
 80018ac:	4b09      	ldr	r3, [pc, #36]	; (80018d4 <SDTimer_Handler+0x40>)
 80018ae:	701a      	strb	r2, [r3, #0]

  if(Timer2 > 0)
 80018b0:	4b09      	ldr	r3, [pc, #36]	; (80018d8 <SDTimer_Handler+0x44>)
 80018b2:	781b      	ldrb	r3, [r3, #0]
 80018b4:	b2db      	uxtb	r3, r3
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d006      	beq.n	80018c8 <SDTimer_Handler+0x34>
    Timer2--;
 80018ba:	4b07      	ldr	r3, [pc, #28]	; (80018d8 <SDTimer_Handler+0x44>)
 80018bc:	781b      	ldrb	r3, [r3, #0]
 80018be:	b2db      	uxtb	r3, r3
 80018c0:	3b01      	subs	r3, #1
 80018c2:	b2da      	uxtb	r2, r3
 80018c4:	4b04      	ldr	r3, [pc, #16]	; (80018d8 <SDTimer_Handler+0x44>)
 80018c6:	701a      	strb	r2, [r3, #0]
}
 80018c8:	bf00      	nop
 80018ca:	46bd      	mov	sp, r7
 80018cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d0:	4770      	bx	lr
 80018d2:	bf00      	nop
 80018d4:	20016d21 	.word	0x20016d21
 80018d8:	20016d22 	.word	0x20016d22

080018dc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80018dc:	b480      	push	{r7}
 80018de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80018e0:	e7fe      	b.n	80018e0 <NMI_Handler+0x4>

080018e2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80018e2:	b480      	push	{r7}
 80018e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80018e6:	e7fe      	b.n	80018e6 <HardFault_Handler+0x4>

080018e8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80018e8:	b480      	push	{r7}
 80018ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80018ec:	e7fe      	b.n	80018ec <MemManage_Handler+0x4>

080018ee <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80018ee:	b480      	push	{r7}
 80018f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80018f2:	e7fe      	b.n	80018f2 <BusFault_Handler+0x4>

080018f4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80018f4:	b480      	push	{r7}
 80018f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80018f8:	e7fe      	b.n	80018f8 <UsageFault_Handler+0x4>

080018fa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80018fa:	b480      	push	{r7}
 80018fc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80018fe:	bf00      	nop
 8001900:	46bd      	mov	sp, r7
 8001902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001906:	4770      	bx	lr

08001908 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001908:	b480      	push	{r7}
 800190a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800190c:	bf00      	nop
 800190e:	46bd      	mov	sp, r7
 8001910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001914:	4770      	bx	lr

08001916 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001916:	b480      	push	{r7}
 8001918:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800191a:	bf00      	nop
 800191c:	46bd      	mov	sp, r7
 800191e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001922:	4770      	bx	lr

08001924 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001924:	b580      	push	{r7, lr}
 8001926:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

	  FatFsCnt++;
 8001928:	4b0a      	ldr	r3, [pc, #40]	; (8001954 <SysTick_Handler+0x30>)
 800192a:	781b      	ldrb	r3, [r3, #0]
 800192c:	b2db      	uxtb	r3, r3
 800192e:	3301      	adds	r3, #1
 8001930:	b2da      	uxtb	r2, r3
 8001932:	4b08      	ldr	r3, [pc, #32]	; (8001954 <SysTick_Handler+0x30>)
 8001934:	701a      	strb	r2, [r3, #0]
	  if(FatFsCnt >= 10)
 8001936:	4b07      	ldr	r3, [pc, #28]	; (8001954 <SysTick_Handler+0x30>)
 8001938:	781b      	ldrb	r3, [r3, #0]
 800193a:	b2db      	uxtb	r3, r3
 800193c:	2b09      	cmp	r3, #9
 800193e:	d904      	bls.n	800194a <SysTick_Handler+0x26>
	  {
	    FatFsCnt = 0;
 8001940:	4b04      	ldr	r3, [pc, #16]	; (8001954 <SysTick_Handler+0x30>)
 8001942:	2200      	movs	r2, #0
 8001944:	701a      	strb	r2, [r3, #0]
	    SDTimer_Handler();
 8001946:	f7ff ffa5 	bl	8001894 <SDTimer_Handler>
	  }

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800194a:	f005 fa15 	bl	8006d78 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800194e:	bf00      	nop
 8001950:	bd80      	pop	{r7, pc}
 8001952:	bf00      	nop
 8001954:	20016d20 	.word	0x20016d20

08001958 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001958:	b580      	push	{r7, lr}
 800195a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 800195c:	480a      	ldr	r0, [pc, #40]	; (8001988 <TIM3_IRQHandler+0x30>)
 800195e:	f007 ffd0 	bl	8009902 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */
  IKS01A3_MOTION_SENSOR_GetAxes(IKS01A3_LSM6DSO_0, MOTION_ACCELERO, &misure_accelerometro[contatore_campioni++]);
 8001962:	4b0a      	ldr	r3, [pc, #40]	; (800198c <TIM3_IRQHandler+0x34>)
 8001964:	681a      	ldr	r2, [r3, #0]
 8001966:	1c53      	adds	r3, r2, #1
 8001968:	4908      	ldr	r1, [pc, #32]	; (800198c <TIM3_IRQHandler+0x34>)
 800196a:	600b      	str	r3, [r1, #0]
 800196c:	4613      	mov	r3, r2
 800196e:	005b      	lsls	r3, r3, #1
 8001970:	4413      	add	r3, r2
 8001972:	009b      	lsls	r3, r3, #2
 8001974:	4a06      	ldr	r2, [pc, #24]	; (8001990 <TIM3_IRQHandler+0x38>)
 8001976:	4413      	add	r3, r2
 8001978:	461a      	mov	r2, r3
 800197a:	2102      	movs	r1, #2
 800197c:	2000      	movs	r0, #0
 800197e:	f004 fecb 	bl	8006718 <IKS01A3_MOTION_SENSOR_GetAxes>
//  sprintf((char *)buffer, "%ld,%ld,%ld\r\n",misure_accelerometro.x, misure_accelerometro.y, misure_accelerometro.z );
//  fresult = f_write(&fil, buffer, bufsize(buffer), &bw);

  /* USER CODE END TIM3_IRQn 1 */
}
 8001982:	bf00      	nop
 8001984:	bd80      	pop	{r7, pc}
 8001986:	bf00      	nop
 8001988:	200001d4 	.word	0x200001d4
 800198c:	20014a80 	.word	0x20014a80
 8001990:	20000260 	.word	0x20000260

08001994 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001994:	b580      	push	{r7, lr}
 8001996:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8001998:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800199c:	f005 fdc4 	bl	8007528 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */
  //flag da fare toggle
  //ogni volta che viene premuto il pulsante, viene invertito lo stato
  premuto=true;
 80019a0:	4b02      	ldr	r3, [pc, #8]	; (80019ac <EXTI15_10_IRQHandler+0x18>)
 80019a2:	2201      	movs	r2, #1
 80019a4:	701a      	strb	r2, [r3, #0]

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80019a6:	bf00      	nop
 80019a8:	bd80      	pop	{r7, pc}
 80019aa:	bf00      	nop
 80019ac:	20014a88 	.word	0x20014a88

080019b0 <BSP_I2C1_Init>:
/**
  * @brief  Initialize I2C HAL
  * @retval BSP status
  */
int32_t BSP_I2C1_Init(void)
{
 80019b0:	b580      	push	{r7, lr}
 80019b2:	b082      	sub	sp, #8
 80019b4:	af00      	add	r7, sp, #0

  int32_t ret = BSP_ERROR_NONE;
 80019b6:	2300      	movs	r3, #0
 80019b8:	607b      	str	r3, [r7, #4]

  hi2c1.Instance  = I2C1;
 80019ba:	4b13      	ldr	r3, [pc, #76]	; (8001a08 <BSP_I2C1_Init+0x58>)
 80019bc:	4a13      	ldr	r2, [pc, #76]	; (8001a0c <BSP_I2C1_Init+0x5c>)
 80019be:	601a      	str	r2, [r3, #0]

  if(I2C1InitCounter++ == 0)
 80019c0:	4b13      	ldr	r3, [pc, #76]	; (8001a10 <BSP_I2C1_Init+0x60>)
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	1c5a      	adds	r2, r3, #1
 80019c6:	4912      	ldr	r1, [pc, #72]	; (8001a10 <BSP_I2C1_Init+0x60>)
 80019c8:	600a      	str	r2, [r1, #0]
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d117      	bne.n	80019fe <BSP_I2C1_Init+0x4e>
  {
    if (HAL_I2C_GetState(&hi2c1) == HAL_I2C_STATE_RESET)
 80019ce:	480e      	ldr	r0, [pc, #56]	; (8001a08 <BSP_I2C1_Init+0x58>)
 80019d0:	f006 fa76 	bl	8007ec0 <HAL_I2C_GetState>
 80019d4:	4603      	mov	r3, r0
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d111      	bne.n	80019fe <BSP_I2C1_Init+0x4e>
    {
    #if (USE_HAL_I2C_REGISTER_CALLBACKS == 0U)
      /* Init the I2C Msp */
      I2C1_MspInit(&hi2c1);
 80019da:	480b      	ldr	r0, [pc, #44]	; (8001a08 <BSP_I2C1_Init+0x58>)
 80019dc:	f000 f8e2 	bl	8001ba4 <I2C1_MspInit>
        {
          return BSP_ERROR_MSP_FAILURE;
        }
      }
    #endif
      if(ret == BSP_ERROR_NONE)
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d10b      	bne.n	80019fe <BSP_I2C1_Init+0x4e>
      {
        /* Init the I2C */
        if(MX_I2C1_Init(&hi2c1) != HAL_OK)
 80019e6:	4808      	ldr	r0, [pc, #32]	; (8001a08 <BSP_I2C1_Init+0x58>)
 80019e8:	f000 f8a8 	bl	8001b3c <MX_I2C1_Init>
 80019ec:	4603      	mov	r3, r0
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d003      	beq.n	80019fa <BSP_I2C1_Init+0x4a>
        {
          ret = BSP_ERROR_BUS_FAILURE;
 80019f2:	f06f 0307 	mvn.w	r3, #7
 80019f6:	607b      	str	r3, [r7, #4]
 80019f8:	e001      	b.n	80019fe <BSP_I2C1_Init+0x4e>
        }
        else
        {
          ret = BSP_ERROR_NONE;
 80019fa:	2300      	movs	r3, #0
 80019fc:	607b      	str	r3, [r7, #4]
        }
      }
    }
  }
  return ret;
 80019fe:	687b      	ldr	r3, [r7, #4]
}
 8001a00:	4618      	mov	r0, r3
 8001a02:	3708      	adds	r7, #8
 8001a04:	46bd      	mov	sp, r7
 8001a06:	bd80      	pop	{r7, pc}
 8001a08:	20016d24 	.word	0x20016d24
 8001a0c:	40005400 	.word	0x40005400
 8001a10:	20016d78 	.word	0x20016d78

08001a14 <BSP_I2C1_DeInit>:
/**
  * @brief  DeInitialize I2C HAL.
  * @retval BSP status
  */
int32_t BSP_I2C1_DeInit(void)
{
 8001a14:	b580      	push	{r7, lr}
 8001a16:	b082      	sub	sp, #8
 8001a18:	af00      	add	r7, sp, #0
  int32_t ret = BSP_ERROR_NONE;
 8001a1a:	2300      	movs	r3, #0
 8001a1c:	607b      	str	r3, [r7, #4]

  if (I2C1InitCounter > 0)
 8001a1e:	4b0f      	ldr	r3, [pc, #60]	; (8001a5c <BSP_I2C1_DeInit+0x48>)
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d014      	beq.n	8001a50 <BSP_I2C1_DeInit+0x3c>
  {
    if (--I2C1InitCounter == 0)
 8001a26:	4b0d      	ldr	r3, [pc, #52]	; (8001a5c <BSP_I2C1_DeInit+0x48>)
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	3b01      	subs	r3, #1
 8001a2c:	4a0b      	ldr	r2, [pc, #44]	; (8001a5c <BSP_I2C1_DeInit+0x48>)
 8001a2e:	6013      	str	r3, [r2, #0]
 8001a30:	4b0a      	ldr	r3, [pc, #40]	; (8001a5c <BSP_I2C1_DeInit+0x48>)
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d10b      	bne.n	8001a50 <BSP_I2C1_DeInit+0x3c>
    {
  #if (USE_HAL_I2C_REGISTER_CALLBACKS == 0U)
      /* DeInit the I2C */
      I2C1_MspDeInit(&hi2c1);
 8001a38:	4809      	ldr	r0, [pc, #36]	; (8001a60 <BSP_I2C1_DeInit+0x4c>)
 8001a3a:	f000 f8fd 	bl	8001c38 <I2C1_MspDeInit>
  #endif
      /* DeInit the I2C */
      if (HAL_I2C_DeInit(&hi2c1) != HAL_OK)
 8001a3e:	4808      	ldr	r0, [pc, #32]	; (8001a60 <BSP_I2C1_DeInit+0x4c>)
 8001a40:	f005 feda 	bl	80077f8 <HAL_I2C_DeInit>
 8001a44:	4603      	mov	r3, r0
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d002      	beq.n	8001a50 <BSP_I2C1_DeInit+0x3c>
      {
        ret = BSP_ERROR_BUS_FAILURE;
 8001a4a:	f06f 0307 	mvn.w	r3, #7
 8001a4e:	607b      	str	r3, [r7, #4]
      }
    }
  }
  return ret;
 8001a50:	687b      	ldr	r3, [r7, #4]
}
 8001a52:	4618      	mov	r0, r3
 8001a54:	3708      	adds	r7, #8
 8001a56:	46bd      	mov	sp, r7
 8001a58:	bd80      	pop	{r7, pc}
 8001a5a:	bf00      	nop
 8001a5c:	20016d78 	.word	0x20016d78
 8001a60:	20016d24 	.word	0x20016d24

08001a64 <BSP_I2C1_WriteReg>:
  * @param  Length Data Length
  * @retval BSP status
  */

int32_t BSP_I2C1_WriteReg(uint16_t DevAddr, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 8001a64:	b580      	push	{r7, lr}
 8001a66:	b08a      	sub	sp, #40	; 0x28
 8001a68:	af04      	add	r7, sp, #16
 8001a6a:	60ba      	str	r2, [r7, #8]
 8001a6c:	461a      	mov	r2, r3
 8001a6e:	4603      	mov	r3, r0
 8001a70:	81fb      	strh	r3, [r7, #14]
 8001a72:	460b      	mov	r3, r1
 8001a74:	81bb      	strh	r3, [r7, #12]
 8001a76:	4613      	mov	r3, r2
 8001a78:	80fb      	strh	r3, [r7, #6]
  int32_t ret = BSP_ERROR_NONE;
 8001a7a:	2300      	movs	r3, #0
 8001a7c:	617b      	str	r3, [r7, #20]

  if (HAL_I2C_Mem_Write(&hi2c1, DevAddr,Reg, I2C_MEMADD_SIZE_8BIT,pData, Length, BUS_I2C1_POLL_TIMEOUT) != HAL_OK)
 8001a7e:	89ba      	ldrh	r2, [r7, #12]
 8001a80:	89f9      	ldrh	r1, [r7, #14]
 8001a82:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001a86:	9302      	str	r3, [sp, #8]
 8001a88:	88fb      	ldrh	r3, [r7, #6]
 8001a8a:	9301      	str	r3, [sp, #4]
 8001a8c:	68bb      	ldr	r3, [r7, #8]
 8001a8e:	9300      	str	r3, [sp, #0]
 8001a90:	2301      	movs	r3, #1
 8001a92:	480c      	ldr	r0, [pc, #48]	; (8001ac4 <BSP_I2C1_WriteReg+0x60>)
 8001a94:	f005 fef4 	bl	8007880 <HAL_I2C_Mem_Write>
 8001a98:	4603      	mov	r3, r0
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d00c      	beq.n	8001ab8 <BSP_I2C1_WriteReg+0x54>
  {
    if (HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF)
 8001a9e:	4809      	ldr	r0, [pc, #36]	; (8001ac4 <BSP_I2C1_WriteReg+0x60>)
 8001aa0:	f006 fa1c 	bl	8007edc <HAL_I2C_GetError>
 8001aa4:	4603      	mov	r3, r0
 8001aa6:	2b04      	cmp	r3, #4
 8001aa8:	d103      	bne.n	8001ab2 <BSP_I2C1_WriteReg+0x4e>
    {
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 8001aaa:	f06f 0365 	mvn.w	r3, #101	; 0x65
 8001aae:	617b      	str	r3, [r7, #20]
 8001ab0:	e002      	b.n	8001ab8 <BSP_I2C1_WriteReg+0x54>
    }
    else
    {
      ret =  BSP_ERROR_PERIPH_FAILURE;
 8001ab2:	f06f 0303 	mvn.w	r3, #3
 8001ab6:	617b      	str	r3, [r7, #20]
    }
  }
  return ret;
 8001ab8:	697b      	ldr	r3, [r7, #20]
}
 8001aba:	4618      	mov	r0, r3
 8001abc:	3718      	adds	r7, #24
 8001abe:	46bd      	mov	sp, r7
 8001ac0:	bd80      	pop	{r7, pc}
 8001ac2:	bf00      	nop
 8001ac4:	20016d24 	.word	0x20016d24

08001ac8 <BSP_I2C1_ReadReg>:
  * @param  pData  Pointer to data buffer to read
  * @param  Length Data Length
  * @retval BSP status
  */
int32_t  BSP_I2C1_ReadReg(uint16_t DevAddr, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 8001ac8:	b580      	push	{r7, lr}
 8001aca:	b08a      	sub	sp, #40	; 0x28
 8001acc:	af04      	add	r7, sp, #16
 8001ace:	60ba      	str	r2, [r7, #8]
 8001ad0:	461a      	mov	r2, r3
 8001ad2:	4603      	mov	r3, r0
 8001ad4:	81fb      	strh	r3, [r7, #14]
 8001ad6:	460b      	mov	r3, r1
 8001ad8:	81bb      	strh	r3, [r7, #12]
 8001ada:	4613      	mov	r3, r2
 8001adc:	80fb      	strh	r3, [r7, #6]
  int32_t ret = BSP_ERROR_NONE;
 8001ade:	2300      	movs	r3, #0
 8001ae0:	617b      	str	r3, [r7, #20]

  if (HAL_I2C_Mem_Read(&hi2c1, DevAddr, Reg, I2C_MEMADD_SIZE_8BIT, pData, Length, BUS_I2C1_POLL_TIMEOUT) != HAL_OK)
 8001ae2:	89ba      	ldrh	r2, [r7, #12]
 8001ae4:	89f9      	ldrh	r1, [r7, #14]
 8001ae6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001aea:	9302      	str	r3, [sp, #8]
 8001aec:	88fb      	ldrh	r3, [r7, #6]
 8001aee:	9301      	str	r3, [sp, #4]
 8001af0:	68bb      	ldr	r3, [r7, #8]
 8001af2:	9300      	str	r3, [sp, #0]
 8001af4:	2301      	movs	r3, #1
 8001af6:	480c      	ldr	r0, [pc, #48]	; (8001b28 <BSP_I2C1_ReadReg+0x60>)
 8001af8:	f005 ffbc 	bl	8007a74 <HAL_I2C_Mem_Read>
 8001afc:	4603      	mov	r3, r0
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d00c      	beq.n	8001b1c <BSP_I2C1_ReadReg+0x54>
  {
    if (HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF)
 8001b02:	4809      	ldr	r0, [pc, #36]	; (8001b28 <BSP_I2C1_ReadReg+0x60>)
 8001b04:	f006 f9ea 	bl	8007edc <HAL_I2C_GetError>
 8001b08:	4603      	mov	r3, r0
 8001b0a:	2b04      	cmp	r3, #4
 8001b0c:	d103      	bne.n	8001b16 <BSP_I2C1_ReadReg+0x4e>
    {
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 8001b0e:	f06f 0365 	mvn.w	r3, #101	; 0x65
 8001b12:	617b      	str	r3, [r7, #20]
 8001b14:	e002      	b.n	8001b1c <BSP_I2C1_ReadReg+0x54>
    }
    else
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 8001b16:	f06f 0303 	mvn.w	r3, #3
 8001b1a:	617b      	str	r3, [r7, #20]
    }
  }
  return ret;
 8001b1c:	697b      	ldr	r3, [r7, #20]
}
 8001b1e:	4618      	mov	r0, r3
 8001b20:	3718      	adds	r7, #24
 8001b22:	46bd      	mov	sp, r7
 8001b24:	bd80      	pop	{r7, pc}
 8001b26:	bf00      	nop
 8001b28:	20016d24 	.word	0x20016d24

08001b2c <BSP_GetTick>:

/**
  * @brief  Return system tick in ms
  * @retval Current HAL time base time stamp
  */
int32_t BSP_GetTick(void) {
 8001b2c:	b580      	push	{r7, lr}
 8001b2e:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8001b30:	f005 f936 	bl	8006da0 <HAL_GetTick>
 8001b34:	4603      	mov	r3, r0
}
 8001b36:	4618      	mov	r0, r3
 8001b38:	bd80      	pop	{r7, pc}
	...

08001b3c <MX_I2C1_Init>:

/* I2C1 init function */

__weak HAL_StatusTypeDef MX_I2C1_Init(I2C_HandleTypeDef* hi2c)
{
 8001b3c:	b580      	push	{r7, lr}
 8001b3e:	b084      	sub	sp, #16
 8001b40:	af00      	add	r7, sp, #0
 8001b42:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8001b44:	2300      	movs	r3, #0
 8001b46:	73fb      	strb	r3, [r7, #15]

  hi2c->Instance = I2C1;
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	4a14      	ldr	r2, [pc, #80]	; (8001b9c <MX_I2C1_Init+0x60>)
 8001b4c:	601a      	str	r2, [r3, #0]
  hi2c->Init.ClockSpeed = 400000;
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	4a13      	ldr	r2, [pc, #76]	; (8001ba0 <MX_I2C1_Init+0x64>)
 8001b52:	605a      	str	r2, [r3, #4]
  hi2c->Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	2200      	movs	r2, #0
 8001b58:	609a      	str	r2, [r3, #8]
  hi2c->Init.OwnAddress1 = 0;
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	2200      	movs	r2, #0
 8001b5e:	60da      	str	r2, [r3, #12]
  hi2c->Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001b66:	611a      	str	r2, [r3, #16]
  hi2c->Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	2200      	movs	r2, #0
 8001b6c:	615a      	str	r2, [r3, #20]
  hi2c->Init.OwnAddress2 = 0;
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	2200      	movs	r2, #0
 8001b72:	619a      	str	r2, [r3, #24]
  hi2c->Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	2200      	movs	r2, #0
 8001b78:	61da      	str	r2, [r3, #28]
  hi2c->Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	2200      	movs	r2, #0
 8001b7e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(hi2c) != HAL_OK)
 8001b80:	6878      	ldr	r0, [r7, #4]
 8001b82:	f005 fcf5 	bl	8007570 <HAL_I2C_Init>
 8001b86:	4603      	mov	r3, r0
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d001      	beq.n	8001b90 <MX_I2C1_Init+0x54>
  {
    ret = HAL_ERROR;
 8001b8c:	2301      	movs	r3, #1
 8001b8e:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8001b90:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b92:	4618      	mov	r0, r3
 8001b94:	3710      	adds	r7, #16
 8001b96:	46bd      	mov	sp, r7
 8001b98:	bd80      	pop	{r7, pc}
 8001b9a:	bf00      	nop
 8001b9c:	40005400 	.word	0x40005400
 8001ba0:	00061a80 	.word	0x00061a80

08001ba4 <I2C1_MspInit>:

static void I2C1_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001ba4:	b580      	push	{r7, lr}
 8001ba6:	b08a      	sub	sp, #40	; 0x28
 8001ba8:	af00      	add	r7, sp, #0
 8001baa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001bac:	2300      	movs	r3, #0
 8001bae:	613b      	str	r3, [r7, #16]
 8001bb0:	4b1f      	ldr	r3, [pc, #124]	; (8001c30 <I2C1_MspInit+0x8c>)
 8001bb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bb4:	4a1e      	ldr	r2, [pc, #120]	; (8001c30 <I2C1_MspInit+0x8c>)
 8001bb6:	f043 0302 	orr.w	r3, r3, #2
 8001bba:	6313      	str	r3, [r2, #48]	; 0x30
 8001bbc:	4b1c      	ldr	r3, [pc, #112]	; (8001c30 <I2C1_MspInit+0x8c>)
 8001bbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bc0:	f003 0302 	and.w	r3, r3, #2
 8001bc4:	613b      	str	r3, [r7, #16]
 8001bc6:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = BUS_I2C1_SCL_GPIO_PIN;
 8001bc8:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001bcc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001bce:	2312      	movs	r3, #18
 8001bd0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bd2:	2300      	movs	r3, #0
 8001bd4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001bd6:	2303      	movs	r3, #3
 8001bd8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_I2C1_SCL_GPIO_AF;
 8001bda:	2304      	movs	r3, #4
 8001bdc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(BUS_I2C1_SCL_GPIO_PORT, &GPIO_InitStruct);
 8001bde:	f107 0314 	add.w	r3, r7, #20
 8001be2:	4619      	mov	r1, r3
 8001be4:	4813      	ldr	r0, [pc, #76]	; (8001c34 <I2C1_MspInit+0x90>)
 8001be6:	f005 fa1d 	bl	8007024 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BUS_I2C1_SDA_GPIO_PIN;
 8001bea:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001bee:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001bf0:	2312      	movs	r3, #18
 8001bf2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bf4:	2300      	movs	r3, #0
 8001bf6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001bf8:	2303      	movs	r3, #3
 8001bfa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_I2C1_SDA_GPIO_AF;
 8001bfc:	2304      	movs	r3, #4
 8001bfe:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(BUS_I2C1_SDA_GPIO_PORT, &GPIO_InitStruct);
 8001c00:	f107 0314 	add.w	r3, r7, #20
 8001c04:	4619      	mov	r1, r3
 8001c06:	480b      	ldr	r0, [pc, #44]	; (8001c34 <I2C1_MspInit+0x90>)
 8001c08:	f005 fa0c 	bl	8007024 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001c0c:	2300      	movs	r3, #0
 8001c0e:	60fb      	str	r3, [r7, #12]
 8001c10:	4b07      	ldr	r3, [pc, #28]	; (8001c30 <I2C1_MspInit+0x8c>)
 8001c12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c14:	4a06      	ldr	r2, [pc, #24]	; (8001c30 <I2C1_MspInit+0x8c>)
 8001c16:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001c1a:	6413      	str	r3, [r2, #64]	; 0x40
 8001c1c:	4b04      	ldr	r3, [pc, #16]	; (8001c30 <I2C1_MspInit+0x8c>)
 8001c1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c20:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001c24:	60fb      	str	r3, [r7, #12]
 8001c26:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
}
 8001c28:	bf00      	nop
 8001c2a:	3728      	adds	r7, #40	; 0x28
 8001c2c:	46bd      	mov	sp, r7
 8001c2e:	bd80      	pop	{r7, pc}
 8001c30:	40023800 	.word	0x40023800
 8001c34:	40020400 	.word	0x40020400

08001c38 <I2C1_MspDeInit>:

static void I2C1_MspDeInit(I2C_HandleTypeDef* i2cHandle)
{
 8001c38:	b580      	push	{r7, lr}
 8001c3a:	b082      	sub	sp, #8
 8001c3c:	af00      	add	r7, sp, #0
 8001c3e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 8001c40:	4b09      	ldr	r3, [pc, #36]	; (8001c68 <I2C1_MspDeInit+0x30>)
 8001c42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c44:	4a08      	ldr	r2, [pc, #32]	; (8001c68 <I2C1_MspDeInit+0x30>)
 8001c46:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001c4a:	6413      	str	r3, [r2, #64]	; 0x40

    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(BUS_I2C1_SCL_GPIO_PORT, BUS_I2C1_SCL_GPIO_PIN);
 8001c4c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001c50:	4806      	ldr	r0, [pc, #24]	; (8001c6c <I2C1_MspDeInit+0x34>)
 8001c52:	f005 fb6b 	bl	800732c <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(BUS_I2C1_SDA_GPIO_PORT, BUS_I2C1_SDA_GPIO_PIN);
 8001c56:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001c5a:	4804      	ldr	r0, [pc, #16]	; (8001c6c <I2C1_MspDeInit+0x34>)
 8001c5c:	f005 fb66 	bl	800732c <HAL_GPIO_DeInit>

  /* USER CODE BEGIN I2C1_MspDeInit 1 */

  /* USER CODE END I2C1_MspDeInit 1 */
}
 8001c60:	bf00      	nop
 8001c62:	3708      	adds	r7, #8
 8001c64:	46bd      	mov	sp, r7
 8001c66:	bd80      	pop	{r7, pc}
 8001c68:	40023800 	.word	0x40023800
 8001c6c:	40020400 	.word	0x40020400

08001c70 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001c70:	b580      	push	{r7, lr}
 8001c72:	b086      	sub	sp, #24
 8001c74:	af00      	add	r7, sp, #0
 8001c76:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001c78:	4a14      	ldr	r2, [pc, #80]	; (8001ccc <_sbrk+0x5c>)
 8001c7a:	4b15      	ldr	r3, [pc, #84]	; (8001cd0 <_sbrk+0x60>)
 8001c7c:	1ad3      	subs	r3, r2, r3
 8001c7e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001c80:	697b      	ldr	r3, [r7, #20]
 8001c82:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001c84:	4b13      	ldr	r3, [pc, #76]	; (8001cd4 <_sbrk+0x64>)
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d102      	bne.n	8001c92 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001c8c:	4b11      	ldr	r3, [pc, #68]	; (8001cd4 <_sbrk+0x64>)
 8001c8e:	4a12      	ldr	r2, [pc, #72]	; (8001cd8 <_sbrk+0x68>)
 8001c90:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001c92:	4b10      	ldr	r3, [pc, #64]	; (8001cd4 <_sbrk+0x64>)
 8001c94:	681a      	ldr	r2, [r3, #0]
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	4413      	add	r3, r2
 8001c9a:	693a      	ldr	r2, [r7, #16]
 8001c9c:	429a      	cmp	r2, r3
 8001c9e:	d207      	bcs.n	8001cb0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001ca0:	f00b fd48 	bl	800d734 <__errno>
 8001ca4:	4603      	mov	r3, r0
 8001ca6:	220c      	movs	r2, #12
 8001ca8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001caa:	f04f 33ff 	mov.w	r3, #4294967295
 8001cae:	e009      	b.n	8001cc4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001cb0:	4b08      	ldr	r3, [pc, #32]	; (8001cd4 <_sbrk+0x64>)
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001cb6:	4b07      	ldr	r3, [pc, #28]	; (8001cd4 <_sbrk+0x64>)
 8001cb8:	681a      	ldr	r2, [r3, #0]
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	4413      	add	r3, r2
 8001cbe:	4a05      	ldr	r2, [pc, #20]	; (8001cd4 <_sbrk+0x64>)
 8001cc0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001cc2:	68fb      	ldr	r3, [r7, #12]
}
 8001cc4:	4618      	mov	r0, r3
 8001cc6:	3718      	adds	r7, #24
 8001cc8:	46bd      	mov	sp, r7
 8001cca:	bd80      	pop	{r7, pc}
 8001ccc:	20018000 	.word	0x20018000
 8001cd0:	00000400 	.word	0x00000400
 8001cd4:	20016d7c 	.word	0x20016d7c
 8001cd8:	200170c0 	.word	0x200170c0

08001cdc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001cdc:	b480      	push	{r7}
 8001cde:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001ce0:	4b06      	ldr	r3, [pc, #24]	; (8001cfc <SystemInit+0x20>)
 8001ce2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001ce6:	4a05      	ldr	r2, [pc, #20]	; (8001cfc <SystemInit+0x20>)
 8001ce8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001cec:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001cf0:	bf00      	nop
 8001cf2:	46bd      	mov	sp, r7
 8001cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf8:	4770      	bx	lr
 8001cfa:	bf00      	nop
 8001cfc:	e000ed00 	.word	0xe000ed00

08001d00 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001d00:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001d38 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001d04:	480d      	ldr	r0, [pc, #52]	; (8001d3c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001d06:	490e      	ldr	r1, [pc, #56]	; (8001d40 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001d08:	4a0e      	ldr	r2, [pc, #56]	; (8001d44 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001d0a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001d0c:	e002      	b.n	8001d14 <LoopCopyDataInit>

08001d0e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001d0e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001d10:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001d12:	3304      	adds	r3, #4

08001d14 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001d14:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001d16:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001d18:	d3f9      	bcc.n	8001d0e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001d1a:	4a0b      	ldr	r2, [pc, #44]	; (8001d48 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001d1c:	4c0b      	ldr	r4, [pc, #44]	; (8001d4c <LoopFillZerobss+0x26>)
  movs r3, #0
 8001d1e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001d20:	e001      	b.n	8001d26 <LoopFillZerobss>

08001d22 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001d22:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001d24:	3204      	adds	r2, #4

08001d26 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001d26:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001d28:	d3fb      	bcc.n	8001d22 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001d2a:	f7ff ffd7 	bl	8001cdc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001d2e:	f00b fd07 	bl	800d740 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001d32:	f7ff f931 	bl	8000f98 <main>
  bx  lr    
 8001d36:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001d38:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001d3c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001d40:	2000015c 	.word	0x2000015c
  ldr r2, =_sidata
 8001d44:	0800e624 	.word	0x0800e624
  ldr r2, =_sbss
 8001d48:	2000015c 	.word	0x2000015c
  ldr r4, =_ebss
 8001d4c:	200170c0 	.word	0x200170c0

08001d50 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001d50:	e7fe      	b.n	8001d50 <ADC_IRQHandler>
	...

08001d54 <LIS2DW12_RegisterBusIO>:
  * @brief  Register Component Bus IO operations
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DW12_RegisterBusIO(LIS2DW12_Object_t *pObj, LIS2DW12_IO_t *pIO)
{
 8001d54:	b580      	push	{r7, lr}
 8001d56:	b084      	sub	sp, #16
 8001d58:	af00      	add	r7, sp, #0
 8001d5a:	6078      	str	r0, [r7, #4]
 8001d5c:	6039      	str	r1, [r7, #0]
  int32_t ret = LIS2DW12_OK;
 8001d5e:	2300      	movs	r3, #0
 8001d60:	60fb      	str	r3, [r7, #12]

  if (pObj == NULL)
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d103      	bne.n	8001d70 <LIS2DW12_RegisterBusIO+0x1c>
  {
    ret = LIS2DW12_ERROR;
 8001d68:	f04f 33ff 	mov.w	r3, #4294967295
 8001d6c:	60fb      	str	r3, [r7, #12]
 8001d6e:	e051      	b.n	8001e14 <LIS2DW12_RegisterBusIO+0xc0>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 8001d70:	683b      	ldr	r3, [r7, #0]
 8001d72:	681a      	ldr	r2, [r3, #0]
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 8001d78:	683b      	ldr	r3, [r7, #0]
 8001d7a:	685a      	ldr	r2, [r3, #4]
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	605a      	str	r2, [r3, #4]
    pObj->IO.BusType   = pIO->BusType;
 8001d80:	683b      	ldr	r3, [r7, #0]
 8001d82:	689a      	ldr	r2, [r3, #8]
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	609a      	str	r2, [r3, #8]
    pObj->IO.Address   = pIO->Address;
 8001d88:	683b      	ldr	r3, [r7, #0]
 8001d8a:	7b1a      	ldrb	r2, [r3, #12]
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	731a      	strb	r2, [r3, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 8001d90:	683b      	ldr	r3, [r7, #0]
 8001d92:	691a      	ldr	r2, [r3, #16]
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	611a      	str	r2, [r3, #16]
    pObj->IO.ReadReg   = pIO->ReadReg;
 8001d98:	683b      	ldr	r3, [r7, #0]
 8001d9a:	695a      	ldr	r2, [r3, #20]
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	615a      	str	r2, [r3, #20]
    pObj->IO.GetTick   = pIO->GetTick;
 8001da0:	683b      	ldr	r3, [r7, #0]
 8001da2:	699a      	ldr	r2, [r3, #24]
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	619a      	str	r2, [r3, #24]

    pObj->Ctx.read_reg  = ReadRegWrap;
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	4a1d      	ldr	r2, [pc, #116]	; (8001e20 <LIS2DW12_RegisterBusIO+0xcc>)
 8001dac:	625a      	str	r2, [r3, #36]	; 0x24
    pObj->Ctx.write_reg = WriteRegWrap;
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	4a1c      	ldr	r2, [pc, #112]	; (8001e24 <LIS2DW12_RegisterBusIO+0xd0>)
 8001db2:	621a      	str	r2, [r3, #32]
    pObj->Ctx.mdelay    = pIO->Delay;
 8001db4:	683b      	ldr	r3, [r7, #0]
 8001db6:	69da      	ldr	r2, [r3, #28]
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	629a      	str	r2, [r3, #40]	; 0x28
    pObj->Ctx.handle   = pObj;
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	687a      	ldr	r2, [r7, #4]
 8001dc0:	62da      	str	r2, [r3, #44]	; 0x2c

    if (pObj->IO.Init == NULL)
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d103      	bne.n	8001dd2 <LIS2DW12_RegisterBusIO+0x7e>
    {
      ret = LIS2DW12_ERROR;
 8001dca:	f04f 33ff 	mov.w	r3, #4294967295
 8001dce:	60fb      	str	r3, [r7, #12]
 8001dd0:	e020      	b.n	8001e14 <LIS2DW12_RegisterBusIO+0xc0>
    }
    else if (pObj->IO.Init() != LIS2DW12_OK)
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	4798      	blx	r3
 8001dd8:	4603      	mov	r3, r0
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d003      	beq.n	8001de6 <LIS2DW12_RegisterBusIO+0x92>
    {
      ret = LIS2DW12_ERROR;
 8001dde:	f04f 33ff 	mov.w	r3, #4294967295
 8001de2:	60fb      	str	r3, [r7, #12]
 8001de4:	e016      	b.n	8001e14 <LIS2DW12_RegisterBusIO+0xc0>
    }
    else
    {
      if (pObj->IO.BusType == LIS2DW12_SPI_3WIRES_BUS) /* SPI 3-Wires */
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	689b      	ldr	r3, [r3, #8]
 8001dea:	2b02      	cmp	r3, #2
 8001dec:	d112      	bne.n	8001e14 <LIS2DW12_RegisterBusIO+0xc0>
      {
        /* Enable the SPI 3-Wires support only the first time */
        if (pObj->is_initialized == 0U)
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d10d      	bne.n	8001e14 <LIS2DW12_RegisterBusIO+0xc0>
        {
          /* Enable SPI 3-Wires on the component */
          uint8_t data = 0x05;
 8001df8:	2305      	movs	r3, #5
 8001dfa:	72fb      	strb	r3, [r7, #11]

          if (LIS2DW12_Write_Reg(pObj, LIS2DW12_CTRL2, data) != LIS2DW12_OK)
 8001dfc:	7afb      	ldrb	r3, [r7, #11]
 8001dfe:	461a      	mov	r2, r3
 8001e00:	2121      	movs	r1, #33	; 0x21
 8001e02:	6878      	ldr	r0, [r7, #4]
 8001e04:	f000 fd87 	bl	8002916 <LIS2DW12_Write_Reg>
 8001e08:	4603      	mov	r3, r0
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d002      	beq.n	8001e14 <LIS2DW12_RegisterBusIO+0xc0>
          {
            ret = LIS2DW12_ERROR;
 8001e0e:	f04f 33ff 	mov.w	r3, #4294967295
 8001e12:	60fb      	str	r3, [r7, #12]
        }
      }
    }
  }

  return ret;
 8001e14:	68fb      	ldr	r3, [r7, #12]
}
 8001e16:	4618      	mov	r0, r3
 8001e18:	3710      	adds	r7, #16
 8001e1a:	46bd      	mov	sp, r7
 8001e1c:	bd80      	pop	{r7, pc}
 8001e1e:	bf00      	nop
 8001e20:	08002ca9 	.word	0x08002ca9
 8001e24:	08002cdf 	.word	0x08002cdf

08001e28 <LIS2DW12_Init>:
  * @brief  Initialize the LIS2DW12 sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DW12_Init(LIS2DW12_Object_t *pObj)
{
 8001e28:	b580      	push	{r7, lr}
 8001e2a:	b082      	sub	sp, #8
 8001e2c:	af00      	add	r7, sp, #0
 8001e2e:	6078      	str	r0, [r7, #4]
  /* Enable register address automatically incremented during a multiple byte
  access with a serial interface. */
  if (lis2dw12_auto_increment_set(&(pObj->Ctx), PROPERTY_ENABLE) != LIS2DW12_OK)
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	3320      	adds	r3, #32
 8001e34:	2101      	movs	r1, #1
 8001e36:	4618      	mov	r0, r3
 8001e38:	f001 fa94 	bl	8003364 <lis2dw12_auto_increment_set>
 8001e3c:	4603      	mov	r3, r0
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d002      	beq.n	8001e48 <LIS2DW12_Init+0x20>
  {
    return LIS2DW12_ERROR;
 8001e42:	f04f 33ff 	mov.w	r3, #4294967295
 8001e46:	e04b      	b.n	8001ee0 <LIS2DW12_Init+0xb8>
  }

  /* Enable BDU */
  if (lis2dw12_block_data_update_set(&(pObj->Ctx), PROPERTY_ENABLE) != LIS2DW12_OK)
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	3320      	adds	r3, #32
 8001e4c:	2101      	movs	r1, #1
 8001e4e:	4618      	mov	r0, r3
 8001e50:	f001 f9a8 	bl	80031a4 <lis2dw12_block_data_update_set>
 8001e54:	4603      	mov	r3, r0
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d002      	beq.n	8001e60 <LIS2DW12_Init+0x38>
  {
    return LIS2DW12_ERROR;
 8001e5a:	f04f 33ff 	mov.w	r3, #4294967295
 8001e5e:	e03f      	b.n	8001ee0 <LIS2DW12_Init+0xb8>
  }

  /* FIFO mode selection */
  if (lis2dw12_fifo_mode_set(&(pObj->Ctx), LIS2DW12_BYPASS_MODE) != LIS2DW12_OK)
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	3320      	adds	r3, #32
 8001e64:	2100      	movs	r1, #0
 8001e66:	4618      	mov	r0, r3
 8001e68:	f001 faa2 	bl	80033b0 <lis2dw12_fifo_mode_set>
 8001e6c:	4603      	mov	r3, r0
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d002      	beq.n	8001e78 <LIS2DW12_Init+0x50>
  {
    return LIS2DW12_ERROR;
 8001e72:	f04f 33ff 	mov.w	r3, #4294967295
 8001e76:	e033      	b.n	8001ee0 <LIS2DW12_Init+0xb8>
  }

  /* Power mode selection */
  if (lis2dw12_power_mode_set(&(pObj->Ctx), LIS2DW12_HIGH_PERFORMANCE) != LIS2DW12_OK)
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	3320      	adds	r3, #32
 8001e7c:	2104      	movs	r1, #4
 8001e7e:	4618      	mov	r0, r3
 8001e80:	f000 ff78 	bl	8002d74 <lis2dw12_power_mode_set>
 8001e84:	4603      	mov	r3, r0
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d002      	beq.n	8001e90 <LIS2DW12_Init+0x68>
  {
    return LIS2DW12_ERROR;
 8001e8a:	f04f 33ff 	mov.w	r3, #4294967295
 8001e8e:	e027      	b.n	8001ee0 <LIS2DW12_Init+0xb8>
  }

  /* Select default output data rate. */
  pObj->acc_odr = 100.0f;
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	4a15      	ldr	r2, [pc, #84]	; (8001ee8 <LIS2DW12_Init+0xc0>)
 8001e94:	635a      	str	r2, [r3, #52]	; 0x34
  /* Select default operating mode. */
  pObj->acc_operating_mode = LIS2DW12_HIGH_PERFORMANCE_MODE;
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	2200      	movs	r2, #0
 8001e9a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  /* Select default low noise (disabled). */
  pObj->acc_low_noise = LIS2DW12_LOW_NOISE_DISABLE;
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	2200      	movs	r2, #0
 8001ea2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Output data rate selection - power down. */
  if (lis2dw12_data_rate_set(&(pObj->Ctx), LIS2DW12_XL_ODR_OFF) != LIS2DW12_OK)
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	3320      	adds	r3, #32
 8001eaa:	2100      	movs	r1, #0
 8001eac:	4618      	mov	r0, r3
 8001eae:	f001 f869 	bl	8002f84 <lis2dw12_data_rate_set>
 8001eb2:	4603      	mov	r3, r0
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d002      	beq.n	8001ebe <LIS2DW12_Init+0x96>
  {
    return LIS2DW12_ERROR;
 8001eb8:	f04f 33ff 	mov.w	r3, #4294967295
 8001ebc:	e010      	b.n	8001ee0 <LIS2DW12_Init+0xb8>
  }

  /* Full scale selection. */
  if (lis2dw12_full_scale_set(&(pObj->Ctx), LIS2DW12_2g) != LIS2DW12_OK)
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	3320      	adds	r3, #32
 8001ec2:	2100      	movs	r1, #0
 8001ec4:	4618      	mov	r0, r3
 8001ec6:	f001 f993 	bl	80031f0 <lis2dw12_full_scale_set>
 8001eca:	4603      	mov	r3, r0
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d002      	beq.n	8001ed6 <LIS2DW12_Init+0xae>
  {
    return LIS2DW12_ERROR;
 8001ed0:	f04f 33ff 	mov.w	r3, #4294967295
 8001ed4:	e004      	b.n	8001ee0 <LIS2DW12_Init+0xb8>
  }

  pObj->is_initialized = 1;
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	2201      	movs	r2, #1
 8001eda:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return LIS2DW12_OK;
 8001ede:	2300      	movs	r3, #0
}
 8001ee0:	4618      	mov	r0, r3
 8001ee2:	3708      	adds	r7, #8
 8001ee4:	46bd      	mov	sp, r7
 8001ee6:	bd80      	pop	{r7, pc}
 8001ee8:	42c80000 	.word	0x42c80000

08001eec <LIS2DW12_DeInit>:
  * @brief  Deinitialize the LIS2DW12 sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DW12_DeInit(LIS2DW12_Object_t *pObj)
{
 8001eec:	b580      	push	{r7, lr}
 8001eee:	b082      	sub	sp, #8
 8001ef0:	af00      	add	r7, sp, #0
 8001ef2:	6078      	str	r0, [r7, #4]
  /* Disable the component */
  if (LIS2DW12_ACC_Disable(pObj) != LIS2DW12_OK)
 8001ef4:	6878      	ldr	r0, [r7, #4]
 8001ef6:	f000 f888 	bl	800200a <LIS2DW12_ACC_Disable>
 8001efa:	4603      	mov	r3, r0
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d002      	beq.n	8001f06 <LIS2DW12_DeInit+0x1a>
  {
    return LIS2DW12_ERROR;
 8001f00:	f04f 33ff 	mov.w	r3, #4294967295
 8001f04:	e010      	b.n	8001f28 <LIS2DW12_DeInit+0x3c>
  }

  /* Reset output data rate. */
  pObj->acc_odr = 0.0f;
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	f04f 0200 	mov.w	r2, #0
 8001f0c:	635a      	str	r2, [r3, #52]	; 0x34
  /* Reset operating mode to default value. */
  pObj->acc_operating_mode = LIS2DW12_HIGH_PERFORMANCE_MODE;
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	2200      	movs	r2, #0
 8001f12:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  /* Reset low noise to default value (disabled). */
  pObj->acc_low_noise = LIS2DW12_LOW_NOISE_DISABLE;
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	2200      	movs	r2, #0
 8001f1a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  pObj->is_initialized = 0;
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	2200      	movs	r2, #0
 8001f22:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return LIS2DW12_OK;
 8001f26:	2300      	movs	r3, #0
}
 8001f28:	4618      	mov	r0, r3
 8001f2a:	3708      	adds	r7, #8
 8001f2c:	46bd      	mov	sp, r7
 8001f2e:	bd80      	pop	{r7, pc}

08001f30 <LIS2DW12_ReadID>:
  * @param  pObj the device pObj
  * @param  Id the WHO_AM_I value
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DW12_ReadID(LIS2DW12_Object_t *pObj, uint8_t *Id)
{
 8001f30:	b580      	push	{r7, lr}
 8001f32:	b082      	sub	sp, #8
 8001f34:	af00      	add	r7, sp, #0
 8001f36:	6078      	str	r0, [r7, #4]
 8001f38:	6039      	str	r1, [r7, #0]
  if (lis2dw12_device_id_get(&(pObj->Ctx), Id) != LIS2DW12_OK)
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	3320      	adds	r3, #32
 8001f3e:	6839      	ldr	r1, [r7, #0]
 8001f40:	4618      	mov	r0, r3
 8001f42:	f001 f9fe 	bl	8003342 <lis2dw12_device_id_get>
 8001f46:	4603      	mov	r3, r0
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d002      	beq.n	8001f52 <LIS2DW12_ReadID+0x22>
  {
    return LIS2DW12_ERROR;
 8001f4c:	f04f 33ff 	mov.w	r3, #4294967295
 8001f50:	e000      	b.n	8001f54 <LIS2DW12_ReadID+0x24>
  }

  return LIS2DW12_OK;
 8001f52:	2300      	movs	r3, #0
}
 8001f54:	4618      	mov	r0, r3
 8001f56:	3708      	adds	r7, #8
 8001f58:	46bd      	mov	sp, r7
 8001f5a:	bd80      	pop	{r7, pc}

08001f5c <LIS2DW12_GetCapabilities>:
  * @param  pObj Component object pointer
  * @param  Capabilities pointer to LIS2DW12 sensor capabilities
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DW12_GetCapabilities(LIS2DW12_Object_t *pObj, LIS2DW12_Capabilities_t *Capabilities)
{
 8001f5c:	b480      	push	{r7}
 8001f5e:	b083      	sub	sp, #12
 8001f60:	af00      	add	r7, sp, #0
 8001f62:	6078      	str	r0, [r7, #4]
 8001f64:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  Capabilities->Acc          = 1;
 8001f66:	683b      	ldr	r3, [r7, #0]
 8001f68:	2201      	movs	r2, #1
 8001f6a:	701a      	strb	r2, [r3, #0]
  Capabilities->Gyro         = 0;
 8001f6c:	683b      	ldr	r3, [r7, #0]
 8001f6e:	2200      	movs	r2, #0
 8001f70:	705a      	strb	r2, [r3, #1]
  Capabilities->Magneto      = 0;
 8001f72:	683b      	ldr	r3, [r7, #0]
 8001f74:	2200      	movs	r2, #0
 8001f76:	709a      	strb	r2, [r3, #2]
  Capabilities->LowPower     = 0;
 8001f78:	683b      	ldr	r3, [r7, #0]
 8001f7a:	2200      	movs	r2, #0
 8001f7c:	70da      	strb	r2, [r3, #3]
  Capabilities->GyroMaxFS    = 0;
 8001f7e:	683b      	ldr	r3, [r7, #0]
 8001f80:	2200      	movs	r2, #0
 8001f82:	605a      	str	r2, [r3, #4]
  Capabilities->AccMaxFS     = 16;
 8001f84:	683b      	ldr	r3, [r7, #0]
 8001f86:	2210      	movs	r2, #16
 8001f88:	609a      	str	r2, [r3, #8]
  Capabilities->MagMaxFS     = 0;
 8001f8a:	683b      	ldr	r3, [r7, #0]
 8001f8c:	2200      	movs	r2, #0
 8001f8e:	60da      	str	r2, [r3, #12]
  Capabilities->GyroMaxOdr   = 0.0f;
 8001f90:	683b      	ldr	r3, [r7, #0]
 8001f92:	f04f 0200 	mov.w	r2, #0
 8001f96:	611a      	str	r2, [r3, #16]
  Capabilities->AccMaxOdr    = 1600.0f;
 8001f98:	683b      	ldr	r3, [r7, #0]
 8001f9a:	4a06      	ldr	r2, [pc, #24]	; (8001fb4 <LIS2DW12_GetCapabilities+0x58>)
 8001f9c:	615a      	str	r2, [r3, #20]
  Capabilities->MagMaxOdr    = 0.0f;
 8001f9e:	683b      	ldr	r3, [r7, #0]
 8001fa0:	f04f 0200 	mov.w	r2, #0
 8001fa4:	619a      	str	r2, [r3, #24]
  return LIS2DW12_OK;
 8001fa6:	2300      	movs	r3, #0
}
 8001fa8:	4618      	mov	r0, r3
 8001faa:	370c      	adds	r7, #12
 8001fac:	46bd      	mov	sp, r7
 8001fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb2:	4770      	bx	lr
 8001fb4:	44c80000 	.word	0x44c80000

08001fb8 <LIS2DW12_ACC_Enable>:
  * @brief  Enable the LIS2DW12 accelerometer sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DW12_ACC_Enable(LIS2DW12_Object_t *pObj)
{
 8001fb8:	b580      	push	{r7, lr}
 8001fba:	b082      	sub	sp, #8
 8001fbc:	af00      	add	r7, sp, #0
 8001fbe:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->acc_is_enabled == 1U)
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8001fc6:	2b01      	cmp	r3, #1
 8001fc8:	d101      	bne.n	8001fce <LIS2DW12_ACC_Enable+0x16>
  {
    return LIS2DW12_OK;
 8001fca:	2300      	movs	r3, #0
 8001fcc:	e019      	b.n	8002002 <LIS2DW12_ACC_Enable+0x4a>
  }

  /* Output data rate selection. */
  if (LIS2DW12_ACC_SetOutputDataRate_When_Enabled(pObj, pObj->acc_odr, pObj->acc_operating_mode,
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	f893 1038 	ldrb.w	r1, [r3, #56]	; 0x38
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001fe0:	461a      	mov	r2, r3
 8001fe2:	eeb0 0a67 	vmov.f32	s0, s15
 8001fe6:	6878      	ldr	r0, [r7, #4]
 8001fe8:	f000 fcb0 	bl	800294c <LIS2DW12_ACC_SetOutputDataRate_When_Enabled>
 8001fec:	4603      	mov	r3, r0
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d002      	beq.n	8001ff8 <LIS2DW12_ACC_Enable+0x40>
                                                  pObj->acc_low_noise) != LIS2DW12_OK)
  {
    return LIS2DW12_ERROR;
 8001ff2:	f04f 33ff 	mov.w	r3, #4294967295
 8001ff6:	e004      	b.n	8002002 <LIS2DW12_ACC_Enable+0x4a>
  }

  pObj->acc_is_enabled = 1;
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	2201      	movs	r2, #1
 8001ffc:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

  return LIS2DW12_OK;
 8002000:	2300      	movs	r3, #0
}
 8002002:	4618      	mov	r0, r3
 8002004:	3708      	adds	r7, #8
 8002006:	46bd      	mov	sp, r7
 8002008:	bd80      	pop	{r7, pc}

0800200a <LIS2DW12_ACC_Disable>:
  * @brief  Disable the LIS2DW12 accelerometer sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DW12_ACC_Disable(LIS2DW12_Object_t *pObj)
{
 800200a:	b580      	push	{r7, lr}
 800200c:	b082      	sub	sp, #8
 800200e:	af00      	add	r7, sp, #0
 8002010:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->acc_is_enabled == 0U)
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8002018:	2b00      	cmp	r3, #0
 800201a:	d101      	bne.n	8002020 <LIS2DW12_ACC_Disable+0x16>
  {
    return LIS2DW12_OK;
 800201c:	2300      	movs	r3, #0
 800201e:	e010      	b.n	8002042 <LIS2DW12_ACC_Disable+0x38>
  }

  /* Output data rate selection - power down. */
  if (lis2dw12_data_rate_set(&(pObj->Ctx), LIS2DW12_XL_ODR_OFF) != LIS2DW12_OK)
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	3320      	adds	r3, #32
 8002024:	2100      	movs	r1, #0
 8002026:	4618      	mov	r0, r3
 8002028:	f000 ffac 	bl	8002f84 <lis2dw12_data_rate_set>
 800202c:	4603      	mov	r3, r0
 800202e:	2b00      	cmp	r3, #0
 8002030:	d002      	beq.n	8002038 <LIS2DW12_ACC_Disable+0x2e>
  {
    return LIS2DW12_ERROR;
 8002032:	f04f 33ff 	mov.w	r3, #4294967295
 8002036:	e004      	b.n	8002042 <LIS2DW12_ACC_Disable+0x38>
  }

  pObj->acc_is_enabled = 0;
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	2200      	movs	r2, #0
 800203c:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

  return LIS2DW12_OK;
 8002040:	2300      	movs	r3, #0
}
 8002042:	4618      	mov	r0, r3
 8002044:	3708      	adds	r7, #8
 8002046:	46bd      	mov	sp, r7
 8002048:	bd80      	pop	{r7, pc}
	...

0800204c <LIS2DW12_ACC_GetSensitivity>:
  * @param  pObj the device pObj
  * @param  Sensitivity pointer
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DW12_ACC_GetSensitivity(LIS2DW12_Object_t *pObj, float *Sensitivity)
{
 800204c:	b580      	push	{r7, lr}
 800204e:	b084      	sub	sp, #16
 8002050:	af00      	add	r7, sp, #0
 8002052:	6078      	str	r0, [r7, #4]
 8002054:	6039      	str	r1, [r7, #0]
  int32_t ret = LIS2DW12_OK;
 8002056:	2300      	movs	r3, #0
 8002058:	60fb      	str	r3, [r7, #12]
  lis2dw12_fs_t full_scale;
  lis2dw12_mode_t mode;

  /* Read actual full scale selection from sensor. */
  if (lis2dw12_full_scale_get(&(pObj->Ctx), &full_scale) != LIS2DW12_OK)
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	3320      	adds	r3, #32
 800205e:	f107 020b 	add.w	r2, r7, #11
 8002062:	4611      	mov	r1, r2
 8002064:	4618      	mov	r0, r3
 8002066:	f001 f8e9 	bl	800323c <lis2dw12_full_scale_get>
 800206a:	4603      	mov	r3, r0
 800206c:	2b00      	cmp	r3, #0
 800206e:	d002      	beq.n	8002076 <LIS2DW12_ACC_GetSensitivity+0x2a>
  {
    return LIS2DW12_ERROR;
 8002070:	f04f 33ff 	mov.w	r3, #4294967295
 8002074:	e0a0      	b.n	80021b8 <LIS2DW12_ACC_GetSensitivity+0x16c>
  }

  /* Read actual power mode selection from sensor. */
  if (lis2dw12_power_mode_get(&(pObj->Ctx), &mode) != LIS2DW12_OK)
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	3320      	adds	r3, #32
 800207a:	f107 020a 	add.w	r2, r7, #10
 800207e:	4611      	mov	r1, r2
 8002080:	4618      	mov	r0, r3
 8002082:	f000 fec5 	bl	8002e10 <lis2dw12_power_mode_get>
 8002086:	4603      	mov	r3, r0
 8002088:	2b00      	cmp	r3, #0
 800208a:	d002      	beq.n	8002092 <LIS2DW12_ACC_GetSensitivity+0x46>
  {
    return LIS2DW12_ERROR;
 800208c:	f04f 33ff 	mov.w	r3, #4294967295
 8002090:	e092      	b.n	80021b8 <LIS2DW12_ACC_GetSensitivity+0x16c>
  }

  switch (mode)
 8002092:	7abb      	ldrb	r3, [r7, #10]
 8002094:	2b1b      	cmp	r3, #27
 8002096:	f200 8087 	bhi.w	80021a8 <LIS2DW12_ACC_GetSensitivity+0x15c>
 800209a:	a201      	add	r2, pc, #4	; (adr r2, 80020a0 <LIS2DW12_ACC_GetSensitivity+0x54>)
 800209c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80020a0:	08002111 	.word	0x08002111
 80020a4:	0800215d 	.word	0x0800215d
 80020a8:	0800215d 	.word	0x0800215d
 80020ac:	0800215d 	.word	0x0800215d
 80020b0:	0800215d 	.word	0x0800215d
 80020b4:	080021a9 	.word	0x080021a9
 80020b8:	080021a9 	.word	0x080021a9
 80020bc:	080021a9 	.word	0x080021a9
 80020c0:	08002111 	.word	0x08002111
 80020c4:	0800215d 	.word	0x0800215d
 80020c8:	0800215d 	.word	0x0800215d
 80020cc:	0800215d 	.word	0x0800215d
 80020d0:	080021a9 	.word	0x080021a9
 80020d4:	080021a9 	.word	0x080021a9
 80020d8:	080021a9 	.word	0x080021a9
 80020dc:	080021a9 	.word	0x080021a9
 80020e0:	08002111 	.word	0x08002111
 80020e4:	0800215d 	.word	0x0800215d
 80020e8:	0800215d 	.word	0x0800215d
 80020ec:	0800215d 	.word	0x0800215d
 80020f0:	0800215d 	.word	0x0800215d
 80020f4:	080021a9 	.word	0x080021a9
 80020f8:	080021a9 	.word	0x080021a9
 80020fc:	080021a9 	.word	0x080021a9
 8002100:	08002111 	.word	0x08002111
 8002104:	0800215d 	.word	0x0800215d
 8002108:	0800215d 	.word	0x0800215d
 800210c:	0800215d 	.word	0x0800215d
  {
    case LIS2DW12_CONT_LOW_PWR_12bit:
    case LIS2DW12_SINGLE_LOW_PWR_12bit:
    case LIS2DW12_CONT_LOW_PWR_LOW_NOISE_12bit:
    case LIS2DW12_SINGLE_LOW_LOW_NOISE_PWR_12bit:
      switch (full_scale)
 8002110:	7afb      	ldrb	r3, [r7, #11]
 8002112:	2b03      	cmp	r3, #3
 8002114:	d81a      	bhi.n	800214c <LIS2DW12_ACC_GetSensitivity+0x100>
 8002116:	a201      	add	r2, pc, #4	; (adr r2, 800211c <LIS2DW12_ACC_GetSensitivity+0xd0>)
 8002118:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800211c:	0800212d 	.word	0x0800212d
 8002120:	08002135 	.word	0x08002135
 8002124:	0800213d 	.word	0x0800213d
 8002128:	08002145 	.word	0x08002145
      {
        case LIS2DW12_2g:
          *Sensitivity = LIS2DW12_ACC_SENSITIVITY_FOR_FS_2G_LOPOW1_MODE;
 800212c:	683b      	ldr	r3, [r7, #0]
 800212e:	4a24      	ldr	r2, [pc, #144]	; (80021c0 <LIS2DW12_ACC_GetSensitivity+0x174>)
 8002130:	601a      	str	r2, [r3, #0]
          break;
 8002132:	e012      	b.n	800215a <LIS2DW12_ACC_GetSensitivity+0x10e>

        case LIS2DW12_4g:
          *Sensitivity = LIS2DW12_ACC_SENSITIVITY_FOR_FS_4G_LOPOW1_MODE;
 8002134:	683b      	ldr	r3, [r7, #0]
 8002136:	4a23      	ldr	r2, [pc, #140]	; (80021c4 <LIS2DW12_ACC_GetSensitivity+0x178>)
 8002138:	601a      	str	r2, [r3, #0]
          break;
 800213a:	e00e      	b.n	800215a <LIS2DW12_ACC_GetSensitivity+0x10e>

        case LIS2DW12_8g:
          *Sensitivity = LIS2DW12_ACC_SENSITIVITY_FOR_FS_8G_LOPOW1_MODE;
 800213c:	683b      	ldr	r3, [r7, #0]
 800213e:	4a22      	ldr	r2, [pc, #136]	; (80021c8 <LIS2DW12_ACC_GetSensitivity+0x17c>)
 8002140:	601a      	str	r2, [r3, #0]
          break;
 8002142:	e00a      	b.n	800215a <LIS2DW12_ACC_GetSensitivity+0x10e>

        case LIS2DW12_16g:
          *Sensitivity = LIS2DW12_ACC_SENSITIVITY_FOR_FS_16G_LOPOW1_MODE;
 8002144:	683b      	ldr	r3, [r7, #0]
 8002146:	4a21      	ldr	r2, [pc, #132]	; (80021cc <LIS2DW12_ACC_GetSensitivity+0x180>)
 8002148:	601a      	str	r2, [r3, #0]
          break;
 800214a:	e006      	b.n	800215a <LIS2DW12_ACC_GetSensitivity+0x10e>

        default:
          *Sensitivity = -1.0f;
 800214c:	683b      	ldr	r3, [r7, #0]
 800214e:	4a20      	ldr	r2, [pc, #128]	; (80021d0 <LIS2DW12_ACC_GetSensitivity+0x184>)
 8002150:	601a      	str	r2, [r3, #0]
          ret = LIS2DW12_ERROR;
 8002152:	f04f 33ff 	mov.w	r3, #4294967295
 8002156:	60fb      	str	r3, [r7, #12]
          break;
 8002158:	bf00      	nop
      }
      break;
 800215a:	e02c      	b.n	80021b6 <LIS2DW12_ACC_GetSensitivity+0x16a>
    case LIS2DW12_CONT_LOW_PWR_LOW_NOISE_3:
    case LIS2DW12_CONT_LOW_PWR_LOW_NOISE_2:
    case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_4:
    case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_3:
    case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_2:
      switch (full_scale)
 800215c:	7afb      	ldrb	r3, [r7, #11]
 800215e:	2b03      	cmp	r3, #3
 8002160:	d81a      	bhi.n	8002198 <LIS2DW12_ACC_GetSensitivity+0x14c>
 8002162:	a201      	add	r2, pc, #4	; (adr r2, 8002168 <LIS2DW12_ACC_GetSensitivity+0x11c>)
 8002164:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002168:	08002179 	.word	0x08002179
 800216c:	08002181 	.word	0x08002181
 8002170:	08002189 	.word	0x08002189
 8002174:	08002191 	.word	0x08002191
      {
        case LIS2DW12_2g:
          *Sensitivity = LIS2DW12_ACC_SENSITIVITY_FOR_FS_2G_OTHER_MODES;
 8002178:	683b      	ldr	r3, [r7, #0]
 800217a:	4a16      	ldr	r2, [pc, #88]	; (80021d4 <LIS2DW12_ACC_GetSensitivity+0x188>)
 800217c:	601a      	str	r2, [r3, #0]
          break;
 800217e:	e012      	b.n	80021a6 <LIS2DW12_ACC_GetSensitivity+0x15a>

        case LIS2DW12_4g:
          *Sensitivity = LIS2DW12_ACC_SENSITIVITY_FOR_FS_4G_OTHER_MODES;
 8002180:	683b      	ldr	r3, [r7, #0]
 8002182:	4a15      	ldr	r2, [pc, #84]	; (80021d8 <LIS2DW12_ACC_GetSensitivity+0x18c>)
 8002184:	601a      	str	r2, [r3, #0]
          break;
 8002186:	e00e      	b.n	80021a6 <LIS2DW12_ACC_GetSensitivity+0x15a>

        case LIS2DW12_8g:
          *Sensitivity = LIS2DW12_ACC_SENSITIVITY_FOR_FS_8G_OTHER_MODES;
 8002188:	683b      	ldr	r3, [r7, #0]
 800218a:	4a0d      	ldr	r2, [pc, #52]	; (80021c0 <LIS2DW12_ACC_GetSensitivity+0x174>)
 800218c:	601a      	str	r2, [r3, #0]
          break;
 800218e:	e00a      	b.n	80021a6 <LIS2DW12_ACC_GetSensitivity+0x15a>

        case LIS2DW12_16g:
          *Sensitivity = LIS2DW12_ACC_SENSITIVITY_FOR_FS_16G_OTHER_MODES;
 8002190:	683b      	ldr	r3, [r7, #0]
 8002192:	4a0c      	ldr	r2, [pc, #48]	; (80021c4 <LIS2DW12_ACC_GetSensitivity+0x178>)
 8002194:	601a      	str	r2, [r3, #0]
          break;
 8002196:	e006      	b.n	80021a6 <LIS2DW12_ACC_GetSensitivity+0x15a>

        default:
          *Sensitivity = -1.0f;
 8002198:	683b      	ldr	r3, [r7, #0]
 800219a:	4a0d      	ldr	r2, [pc, #52]	; (80021d0 <LIS2DW12_ACC_GetSensitivity+0x184>)
 800219c:	601a      	str	r2, [r3, #0]
          ret = LIS2DW12_ERROR;
 800219e:	f04f 33ff 	mov.w	r3, #4294967295
 80021a2:	60fb      	str	r3, [r7, #12]
          break;
 80021a4:	bf00      	nop
      }
      break;
 80021a6:	e006      	b.n	80021b6 <LIS2DW12_ACC_GetSensitivity+0x16a>

    default:
      *Sensitivity = -1.0f;
 80021a8:	683b      	ldr	r3, [r7, #0]
 80021aa:	4a09      	ldr	r2, [pc, #36]	; (80021d0 <LIS2DW12_ACC_GetSensitivity+0x184>)
 80021ac:	601a      	str	r2, [r3, #0]
      ret = LIS2DW12_ERROR;
 80021ae:	f04f 33ff 	mov.w	r3, #4294967295
 80021b2:	60fb      	str	r3, [r7, #12]
      break;
 80021b4:	bf00      	nop
  }

  return ret;
 80021b6:	68fb      	ldr	r3, [r7, #12]
}
 80021b8:	4618      	mov	r0, r3
 80021ba:	3710      	adds	r7, #16
 80021bc:	46bd      	mov	sp, r7
 80021be:	bd80      	pop	{r7, pc}
 80021c0:	3f79db23 	.word	0x3f79db23
 80021c4:	3ff9db23 	.word	0x3ff9db23
 80021c8:	4079db23 	.word	0x4079db23
 80021cc:	40f9db23 	.word	0x40f9db23
 80021d0:	bf800000 	.word	0xbf800000
 80021d4:	3e79db23 	.word	0x3e79db23
 80021d8:	3ef9db23 	.word	0x3ef9db23

080021dc <LIS2DW12_ACC_GetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr pointer where the output data rate is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DW12_ACC_GetOutputDataRate(LIS2DW12_Object_t *pObj, float *Odr)
{
 80021dc:	b580      	push	{r7, lr}
 80021de:	b084      	sub	sp, #16
 80021e0:	af00      	add	r7, sp, #0
 80021e2:	6078      	str	r0, [r7, #4]
 80021e4:	6039      	str	r1, [r7, #0]
  int32_t ret = LIS2DW12_OK;
 80021e6:	2300      	movs	r3, #0
 80021e8:	60fb      	str	r3, [r7, #12]
  lis2dw12_odr_t odr_low_level;
  lis2dw12_mode_t mode;

  /* Get current output data rate. */
  if (lis2dw12_data_rate_get(&(pObj->Ctx), &odr_low_level) != LIS2DW12_OK)
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	3320      	adds	r3, #32
 80021ee:	f107 020b 	add.w	r2, r7, #11
 80021f2:	4611      	mov	r1, r2
 80021f4:	4618      	mov	r0, r3
 80021f6:	f000 ff0b 	bl	8003010 <lis2dw12_data_rate_get>
 80021fa:	4603      	mov	r3, r0
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d002      	beq.n	8002206 <LIS2DW12_ACC_GetOutputDataRate+0x2a>
  {
    return LIS2DW12_ERROR;
 8002200:	f04f 33ff 	mov.w	r3, #4294967295
 8002204:	e1d4      	b.n	80025b0 <LIS2DW12_ACC_GetOutputDataRate+0x3d4>
  }

  /* Read actual power mode selection from sensor. */
  if (lis2dw12_power_mode_get(&(pObj->Ctx), &mode) != LIS2DW12_OK)
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	3320      	adds	r3, #32
 800220a:	f107 020a 	add.w	r2, r7, #10
 800220e:	4611      	mov	r1, r2
 8002210:	4618      	mov	r0, r3
 8002212:	f000 fdfd 	bl	8002e10 <lis2dw12_power_mode_get>
 8002216:	4603      	mov	r3, r0
 8002218:	2b00      	cmp	r3, #0
 800221a:	d002      	beq.n	8002222 <LIS2DW12_ACC_GetOutputDataRate+0x46>
  {
    return LIS2DW12_ERROR;
 800221c:	f04f 33ff 	mov.w	r3, #4294967295
 8002220:	e1c6      	b.n	80025b0 <LIS2DW12_ACC_GetOutputDataRate+0x3d4>
  }

  switch (odr_low_level)
 8002222:	7afb      	ldrb	r3, [r7, #11]
 8002224:	2b32      	cmp	r3, #50	; 0x32
 8002226:	f200 81bb 	bhi.w	80025a0 <LIS2DW12_ACC_GetOutputDataRate+0x3c4>
 800222a:	a201      	add	r2, pc, #4	; (adr r2, 8002230 <LIS2DW12_ACC_GetOutputDataRate+0x54>)
 800222c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002230:	080022fd 	.word	0x080022fd
 8002234:	08002307 	.word	0x08002307
 8002238:	080023a5 	.word	0x080023a5
 800223c:	080023ad 	.word	0x080023ad
 8002240:	080023b5 	.word	0x080023b5
 8002244:	080023bd 	.word	0x080023bd
 8002248:	080023c5 	.word	0x080023c5
 800224c:	080023cd 	.word	0x080023cd
 8002250:	08002469 	.word	0x08002469
 8002254:	08002505 	.word	0x08002505
 8002258:	080025a1 	.word	0x080025a1
 800225c:	080025a1 	.word	0x080025a1
 8002260:	080025a1 	.word	0x080025a1
 8002264:	080025a1 	.word	0x080025a1
 8002268:	080025a1 	.word	0x080025a1
 800226c:	080025a1 	.word	0x080025a1
 8002270:	080025a1 	.word	0x080025a1
 8002274:	080025a1 	.word	0x080025a1
 8002278:	080022fd 	.word	0x080022fd
 800227c:	080025a1 	.word	0x080025a1
 8002280:	080025a1 	.word	0x080025a1
 8002284:	080025a1 	.word	0x080025a1
 8002288:	080025a1 	.word	0x080025a1
 800228c:	080025a1 	.word	0x080025a1
 8002290:	080025a1 	.word	0x080025a1
 8002294:	080025a1 	.word	0x080025a1
 8002298:	080025a1 	.word	0x080025a1
 800229c:	080025a1 	.word	0x080025a1
 80022a0:	080025a1 	.word	0x080025a1
 80022a4:	080025a1 	.word	0x080025a1
 80022a8:	080025a1 	.word	0x080025a1
 80022ac:	080025a1 	.word	0x080025a1
 80022b0:	080025a1 	.word	0x080025a1
 80022b4:	080025a1 	.word	0x080025a1
 80022b8:	080025a1 	.word	0x080025a1
 80022bc:	080025a1 	.word	0x080025a1
 80022c0:	080025a1 	.word	0x080025a1
 80022c4:	080025a1 	.word	0x080025a1
 80022c8:	080025a1 	.word	0x080025a1
 80022cc:	080025a1 	.word	0x080025a1
 80022d0:	080025a1 	.word	0x080025a1
 80022d4:	080025a1 	.word	0x080025a1
 80022d8:	080025a1 	.word	0x080025a1
 80022dc:	080025a1 	.word	0x080025a1
 80022e0:	080025a1 	.word	0x080025a1
 80022e4:	080025a1 	.word	0x080025a1
 80022e8:	080025a1 	.word	0x080025a1
 80022ec:	080025a1 	.word	0x080025a1
 80022f0:	080025a1 	.word	0x080025a1
 80022f4:	080025a1 	.word	0x080025a1
 80022f8:	080022fd 	.word	0x080022fd
  {
    case LIS2DW12_XL_ODR_OFF:
    case LIS2DW12_XL_SET_SW_TRIG:
    case LIS2DW12_XL_SET_PIN_TRIG:
      *Odr = 0.0f;
 80022fc:	683b      	ldr	r3, [r7, #0]
 80022fe:	f04f 0200 	mov.w	r2, #0
 8002302:	601a      	str	r2, [r3, #0]
      break;
 8002304:	e153      	b.n	80025ae <LIS2DW12_ACC_GetOutputDataRate+0x3d2>

    case LIS2DW12_XL_ODR_1Hz6_LP_ONLY:
      switch (mode)
 8002306:	7abb      	ldrb	r3, [r7, #10]
 8002308:	2b1b      	cmp	r3, #27
 800230a:	d843      	bhi.n	8002394 <LIS2DW12_ACC_GetOutputDataRate+0x1b8>
 800230c:	a201      	add	r2, pc, #4	; (adr r2, 8002314 <LIS2DW12_ACC_GetOutputDataRate+0x138>)
 800230e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002312:	bf00      	nop
 8002314:	0800238d 	.word	0x0800238d
 8002318:	0800238d 	.word	0x0800238d
 800231c:	0800238d 	.word	0x0800238d
 8002320:	0800238d 	.word	0x0800238d
 8002324:	08002385 	.word	0x08002385
 8002328:	08002395 	.word	0x08002395
 800232c:	08002395 	.word	0x08002395
 8002330:	08002395 	.word	0x08002395
 8002334:	0800238d 	.word	0x0800238d
 8002338:	0800238d 	.word	0x0800238d
 800233c:	0800238d 	.word	0x0800238d
 8002340:	0800238d 	.word	0x0800238d
 8002344:	08002395 	.word	0x08002395
 8002348:	08002395 	.word	0x08002395
 800234c:	08002395 	.word	0x08002395
 8002350:	08002395 	.word	0x08002395
 8002354:	0800238d 	.word	0x0800238d
 8002358:	0800238d 	.word	0x0800238d
 800235c:	0800238d 	.word	0x0800238d
 8002360:	0800238d 	.word	0x0800238d
 8002364:	08002385 	.word	0x08002385
 8002368:	08002395 	.word	0x08002395
 800236c:	08002395 	.word	0x08002395
 8002370:	08002395 	.word	0x08002395
 8002374:	0800238d 	.word	0x0800238d
 8002378:	0800238d 	.word	0x0800238d
 800237c:	0800238d 	.word	0x0800238d
 8002380:	0800238d 	.word	0x0800238d
      {
        case LIS2DW12_HIGH_PERFORMANCE:
        case LIS2DW12_HIGH_PERFORMANCE_LOW_NOISE:
          *Odr = 12.5f;
 8002384:	683b      	ldr	r3, [r7, #0]
 8002386:	4a8c      	ldr	r2, [pc, #560]	; (80025b8 <LIS2DW12_ACC_GetOutputDataRate+0x3dc>)
 8002388:	601a      	str	r2, [r3, #0]
          break;
 800238a:	e00a      	b.n	80023a2 <LIS2DW12_ACC_GetOutputDataRate+0x1c6>
        case LIS2DW12_CONT_LOW_PWR_LOW_NOISE_12bit:
        case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_4:
        case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_3:
        case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_2:
        case LIS2DW12_SINGLE_LOW_LOW_NOISE_PWR_12bit:
          *Odr = 1.6f;
 800238c:	683b      	ldr	r3, [r7, #0]
 800238e:	4a8b      	ldr	r2, [pc, #556]	; (80025bc <LIS2DW12_ACC_GetOutputDataRate+0x3e0>)
 8002390:	601a      	str	r2, [r3, #0]
          break;
 8002392:	e006      	b.n	80023a2 <LIS2DW12_ACC_GetOutputDataRate+0x1c6>

        default:
          *Odr = -1.0f;
 8002394:	683b      	ldr	r3, [r7, #0]
 8002396:	4a8a      	ldr	r2, [pc, #552]	; (80025c0 <LIS2DW12_ACC_GetOutputDataRate+0x3e4>)
 8002398:	601a      	str	r2, [r3, #0]
          ret = LIS2DW12_ERROR;
 800239a:	f04f 33ff 	mov.w	r3, #4294967295
 800239e:	60fb      	str	r3, [r7, #12]
          break;
 80023a0:	bf00      	nop
      }
      break;
 80023a2:	e104      	b.n	80025ae <LIS2DW12_ACC_GetOutputDataRate+0x3d2>

    case LIS2DW12_XL_ODR_12Hz5:
      *Odr = 12.5f;
 80023a4:	683b      	ldr	r3, [r7, #0]
 80023a6:	4a84      	ldr	r2, [pc, #528]	; (80025b8 <LIS2DW12_ACC_GetOutputDataRate+0x3dc>)
 80023a8:	601a      	str	r2, [r3, #0]
      break;
 80023aa:	e100      	b.n	80025ae <LIS2DW12_ACC_GetOutputDataRate+0x3d2>

    case LIS2DW12_XL_ODR_25Hz:
      *Odr = 25.0f;
 80023ac:	683b      	ldr	r3, [r7, #0]
 80023ae:	4a85      	ldr	r2, [pc, #532]	; (80025c4 <LIS2DW12_ACC_GetOutputDataRate+0x3e8>)
 80023b0:	601a      	str	r2, [r3, #0]
      break;
 80023b2:	e0fc      	b.n	80025ae <LIS2DW12_ACC_GetOutputDataRate+0x3d2>

    case LIS2DW12_XL_ODR_50Hz:
      *Odr = 50.0f;
 80023b4:	683b      	ldr	r3, [r7, #0]
 80023b6:	4a84      	ldr	r2, [pc, #528]	; (80025c8 <LIS2DW12_ACC_GetOutputDataRate+0x3ec>)
 80023b8:	601a      	str	r2, [r3, #0]
      break;
 80023ba:	e0f8      	b.n	80025ae <LIS2DW12_ACC_GetOutputDataRate+0x3d2>

    case LIS2DW12_XL_ODR_100Hz:
      *Odr = 100.0f;
 80023bc:	683b      	ldr	r3, [r7, #0]
 80023be:	4a83      	ldr	r2, [pc, #524]	; (80025cc <LIS2DW12_ACC_GetOutputDataRate+0x3f0>)
 80023c0:	601a      	str	r2, [r3, #0]
      break;
 80023c2:	e0f4      	b.n	80025ae <LIS2DW12_ACC_GetOutputDataRate+0x3d2>

    case LIS2DW12_XL_ODR_200Hz:
      *Odr = 200.0f;
 80023c4:	683b      	ldr	r3, [r7, #0]
 80023c6:	4a82      	ldr	r2, [pc, #520]	; (80025d0 <LIS2DW12_ACC_GetOutputDataRate+0x3f4>)
 80023c8:	601a      	str	r2, [r3, #0]
      break;
 80023ca:	e0f0      	b.n	80025ae <LIS2DW12_ACC_GetOutputDataRate+0x3d2>

    case LIS2DW12_XL_ODR_400Hz:
      switch (mode)
 80023cc:	7abb      	ldrb	r3, [r7, #10]
 80023ce:	2b1b      	cmp	r3, #27
 80023d0:	d842      	bhi.n	8002458 <LIS2DW12_ACC_GetOutputDataRate+0x27c>
 80023d2:	a201      	add	r2, pc, #4	; (adr r2, 80023d8 <LIS2DW12_ACC_GetOutputDataRate+0x1fc>)
 80023d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80023d8:	08002451 	.word	0x08002451
 80023dc:	08002451 	.word	0x08002451
 80023e0:	08002451 	.word	0x08002451
 80023e4:	08002451 	.word	0x08002451
 80023e8:	08002449 	.word	0x08002449
 80023ec:	08002459 	.word	0x08002459
 80023f0:	08002459 	.word	0x08002459
 80023f4:	08002459 	.word	0x08002459
 80023f8:	08002451 	.word	0x08002451
 80023fc:	08002451 	.word	0x08002451
 8002400:	08002451 	.word	0x08002451
 8002404:	08002451 	.word	0x08002451
 8002408:	08002459 	.word	0x08002459
 800240c:	08002459 	.word	0x08002459
 8002410:	08002459 	.word	0x08002459
 8002414:	08002459 	.word	0x08002459
 8002418:	08002451 	.word	0x08002451
 800241c:	08002451 	.word	0x08002451
 8002420:	08002451 	.word	0x08002451
 8002424:	08002451 	.word	0x08002451
 8002428:	08002449 	.word	0x08002449
 800242c:	08002459 	.word	0x08002459
 8002430:	08002459 	.word	0x08002459
 8002434:	08002459 	.word	0x08002459
 8002438:	08002451 	.word	0x08002451
 800243c:	08002451 	.word	0x08002451
 8002440:	08002451 	.word	0x08002451
 8002444:	08002451 	.word	0x08002451
      {
        case LIS2DW12_HIGH_PERFORMANCE:
        case LIS2DW12_HIGH_PERFORMANCE_LOW_NOISE:
          *Odr = 400.0f;
 8002448:	683b      	ldr	r3, [r7, #0]
 800244a:	4a62      	ldr	r2, [pc, #392]	; (80025d4 <LIS2DW12_ACC_GetOutputDataRate+0x3f8>)
 800244c:	601a      	str	r2, [r3, #0]
          break;
 800244e:	e00a      	b.n	8002466 <LIS2DW12_ACC_GetOutputDataRate+0x28a>
        case LIS2DW12_CONT_LOW_PWR_LOW_NOISE_12bit:
        case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_4:
        case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_3:
        case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_2:
        case LIS2DW12_SINGLE_LOW_LOW_NOISE_PWR_12bit:
          *Odr = 200.0f;
 8002450:	683b      	ldr	r3, [r7, #0]
 8002452:	4a5f      	ldr	r2, [pc, #380]	; (80025d0 <LIS2DW12_ACC_GetOutputDataRate+0x3f4>)
 8002454:	601a      	str	r2, [r3, #0]
          break;
 8002456:	e006      	b.n	8002466 <LIS2DW12_ACC_GetOutputDataRate+0x28a>

        default:
          *Odr = -1.0f;
 8002458:	683b      	ldr	r3, [r7, #0]
 800245a:	4a59      	ldr	r2, [pc, #356]	; (80025c0 <LIS2DW12_ACC_GetOutputDataRate+0x3e4>)
 800245c:	601a      	str	r2, [r3, #0]
          ret = LIS2DW12_ERROR;
 800245e:	f04f 33ff 	mov.w	r3, #4294967295
 8002462:	60fb      	str	r3, [r7, #12]
          break;
 8002464:	bf00      	nop
      }
      break;
 8002466:	e0a2      	b.n	80025ae <LIS2DW12_ACC_GetOutputDataRate+0x3d2>

    case LIS2DW12_XL_ODR_800Hz:
      switch (mode)
 8002468:	7abb      	ldrb	r3, [r7, #10]
 800246a:	2b1b      	cmp	r3, #27
 800246c:	d842      	bhi.n	80024f4 <LIS2DW12_ACC_GetOutputDataRate+0x318>
 800246e:	a201      	add	r2, pc, #4	; (adr r2, 8002474 <LIS2DW12_ACC_GetOutputDataRate+0x298>)
 8002470:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002474:	080024ed 	.word	0x080024ed
 8002478:	080024ed 	.word	0x080024ed
 800247c:	080024ed 	.word	0x080024ed
 8002480:	080024ed 	.word	0x080024ed
 8002484:	080024e5 	.word	0x080024e5
 8002488:	080024f5 	.word	0x080024f5
 800248c:	080024f5 	.word	0x080024f5
 8002490:	080024f5 	.word	0x080024f5
 8002494:	080024ed 	.word	0x080024ed
 8002498:	080024ed 	.word	0x080024ed
 800249c:	080024ed 	.word	0x080024ed
 80024a0:	080024ed 	.word	0x080024ed
 80024a4:	080024f5 	.word	0x080024f5
 80024a8:	080024f5 	.word	0x080024f5
 80024ac:	080024f5 	.word	0x080024f5
 80024b0:	080024f5 	.word	0x080024f5
 80024b4:	080024ed 	.word	0x080024ed
 80024b8:	080024ed 	.word	0x080024ed
 80024bc:	080024ed 	.word	0x080024ed
 80024c0:	080024ed 	.word	0x080024ed
 80024c4:	080024e5 	.word	0x080024e5
 80024c8:	080024f5 	.word	0x080024f5
 80024cc:	080024f5 	.word	0x080024f5
 80024d0:	080024f5 	.word	0x080024f5
 80024d4:	080024ed 	.word	0x080024ed
 80024d8:	080024ed 	.word	0x080024ed
 80024dc:	080024ed 	.word	0x080024ed
 80024e0:	080024ed 	.word	0x080024ed
      {
        case LIS2DW12_HIGH_PERFORMANCE:
        case LIS2DW12_HIGH_PERFORMANCE_LOW_NOISE:
          *Odr = 800.0f;
 80024e4:	683b      	ldr	r3, [r7, #0]
 80024e6:	4a3c      	ldr	r2, [pc, #240]	; (80025d8 <LIS2DW12_ACC_GetOutputDataRate+0x3fc>)
 80024e8:	601a      	str	r2, [r3, #0]
          break;
 80024ea:	e00a      	b.n	8002502 <LIS2DW12_ACC_GetOutputDataRate+0x326>
        case LIS2DW12_CONT_LOW_PWR_LOW_NOISE_12bit:
        case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_4:
        case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_3:
        case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_2:
        case LIS2DW12_SINGLE_LOW_LOW_NOISE_PWR_12bit:
          *Odr = 200.0f;
 80024ec:	683b      	ldr	r3, [r7, #0]
 80024ee:	4a38      	ldr	r2, [pc, #224]	; (80025d0 <LIS2DW12_ACC_GetOutputDataRate+0x3f4>)
 80024f0:	601a      	str	r2, [r3, #0]
          break;
 80024f2:	e006      	b.n	8002502 <LIS2DW12_ACC_GetOutputDataRate+0x326>

        default:
          *Odr = -1.0f;
 80024f4:	683b      	ldr	r3, [r7, #0]
 80024f6:	4a32      	ldr	r2, [pc, #200]	; (80025c0 <LIS2DW12_ACC_GetOutputDataRate+0x3e4>)
 80024f8:	601a      	str	r2, [r3, #0]
          ret = LIS2DW12_ERROR;
 80024fa:	f04f 33ff 	mov.w	r3, #4294967295
 80024fe:	60fb      	str	r3, [r7, #12]
          break;
 8002500:	bf00      	nop
      }
      break;
 8002502:	e054      	b.n	80025ae <LIS2DW12_ACC_GetOutputDataRate+0x3d2>

    case LIS2DW12_XL_ODR_1k6Hz:
      switch (mode)
 8002504:	7abb      	ldrb	r3, [r7, #10]
 8002506:	2b1b      	cmp	r3, #27
 8002508:	d842      	bhi.n	8002590 <LIS2DW12_ACC_GetOutputDataRate+0x3b4>
 800250a:	a201      	add	r2, pc, #4	; (adr r2, 8002510 <LIS2DW12_ACC_GetOutputDataRate+0x334>)
 800250c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002510:	08002589 	.word	0x08002589
 8002514:	08002589 	.word	0x08002589
 8002518:	08002589 	.word	0x08002589
 800251c:	08002589 	.word	0x08002589
 8002520:	08002581 	.word	0x08002581
 8002524:	08002591 	.word	0x08002591
 8002528:	08002591 	.word	0x08002591
 800252c:	08002591 	.word	0x08002591
 8002530:	08002589 	.word	0x08002589
 8002534:	08002589 	.word	0x08002589
 8002538:	08002589 	.word	0x08002589
 800253c:	08002589 	.word	0x08002589
 8002540:	08002591 	.word	0x08002591
 8002544:	08002591 	.word	0x08002591
 8002548:	08002591 	.word	0x08002591
 800254c:	08002591 	.word	0x08002591
 8002550:	08002589 	.word	0x08002589
 8002554:	08002589 	.word	0x08002589
 8002558:	08002589 	.word	0x08002589
 800255c:	08002589 	.word	0x08002589
 8002560:	08002581 	.word	0x08002581
 8002564:	08002591 	.word	0x08002591
 8002568:	08002591 	.word	0x08002591
 800256c:	08002591 	.word	0x08002591
 8002570:	08002589 	.word	0x08002589
 8002574:	08002589 	.word	0x08002589
 8002578:	08002589 	.word	0x08002589
 800257c:	08002589 	.word	0x08002589
      {
        case LIS2DW12_HIGH_PERFORMANCE:
        case LIS2DW12_HIGH_PERFORMANCE_LOW_NOISE:
          *Odr = 1600.0f;
 8002580:	683b      	ldr	r3, [r7, #0]
 8002582:	4a16      	ldr	r2, [pc, #88]	; (80025dc <LIS2DW12_ACC_GetOutputDataRate+0x400>)
 8002584:	601a      	str	r2, [r3, #0]
          break;
 8002586:	e00a      	b.n	800259e <LIS2DW12_ACC_GetOutputDataRate+0x3c2>
        case LIS2DW12_CONT_LOW_PWR_LOW_NOISE_12bit:
        case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_4:
        case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_3:
        case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_2:
        case LIS2DW12_SINGLE_LOW_LOW_NOISE_PWR_12bit:
          *Odr = 200.0f;
 8002588:	683b      	ldr	r3, [r7, #0]
 800258a:	4a11      	ldr	r2, [pc, #68]	; (80025d0 <LIS2DW12_ACC_GetOutputDataRate+0x3f4>)
 800258c:	601a      	str	r2, [r3, #0]
          break;
 800258e:	e006      	b.n	800259e <LIS2DW12_ACC_GetOutputDataRate+0x3c2>

        default:
          *Odr = -1.0f;
 8002590:	683b      	ldr	r3, [r7, #0]
 8002592:	4a0b      	ldr	r2, [pc, #44]	; (80025c0 <LIS2DW12_ACC_GetOutputDataRate+0x3e4>)
 8002594:	601a      	str	r2, [r3, #0]
          ret = LIS2DW12_ERROR;
 8002596:	f04f 33ff 	mov.w	r3, #4294967295
 800259a:	60fb      	str	r3, [r7, #12]
          break;
 800259c:	bf00      	nop
      }
      break;
 800259e:	e006      	b.n	80025ae <LIS2DW12_ACC_GetOutputDataRate+0x3d2>

    default:
      *Odr = -1.0f;
 80025a0:	683b      	ldr	r3, [r7, #0]
 80025a2:	4a07      	ldr	r2, [pc, #28]	; (80025c0 <LIS2DW12_ACC_GetOutputDataRate+0x3e4>)
 80025a4:	601a      	str	r2, [r3, #0]
      ret = LIS2DW12_ERROR;
 80025a6:	f04f 33ff 	mov.w	r3, #4294967295
 80025aa:	60fb      	str	r3, [r7, #12]
      break;
 80025ac:	bf00      	nop
  }

  return ret;
 80025ae:	68fb      	ldr	r3, [r7, #12]
}
 80025b0:	4618      	mov	r0, r3
 80025b2:	3710      	adds	r7, #16
 80025b4:	46bd      	mov	sp, r7
 80025b6:	bd80      	pop	{r7, pc}
 80025b8:	41480000 	.word	0x41480000
 80025bc:	3fcccccd 	.word	0x3fcccccd
 80025c0:	bf800000 	.word	0xbf800000
 80025c4:	41c80000 	.word	0x41c80000
 80025c8:	42480000 	.word	0x42480000
 80025cc:	42c80000 	.word	0x42c80000
 80025d0:	43480000 	.word	0x43480000
 80025d4:	43c80000 	.word	0x43c80000
 80025d8:	44480000 	.word	0x44480000
 80025dc:	44c80000 	.word	0x44c80000

080025e0 <LIS2DW12_ACC_SetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DW12_ACC_SetOutputDataRate(LIS2DW12_Object_t *pObj, float Odr)
{
 80025e0:	b580      	push	{r7, lr}
 80025e2:	b082      	sub	sp, #8
 80025e4:	af00      	add	r7, sp, #0
 80025e6:	6078      	str	r0, [r7, #4]
 80025e8:	ed87 0a00 	vstr	s0, [r7]
  /* By default we use High Performance mode and Low Noise disabled */
  return LIS2DW12_ACC_SetOutputDataRate_With_Mode(pObj, Odr, LIS2DW12_HIGH_PERFORMANCE_MODE, LIS2DW12_LOW_NOISE_DISABLE);
 80025ec:	2200      	movs	r2, #0
 80025ee:	2100      	movs	r1, #0
 80025f0:	ed97 0a00 	vldr	s0, [r7]
 80025f4:	6878      	ldr	r0, [r7, #4]
 80025f6:	f000 f805 	bl	8002604 <LIS2DW12_ACC_SetOutputDataRate_With_Mode>
 80025fa:	4603      	mov	r3, r0
}
 80025fc:	4618      	mov	r0, r3
 80025fe:	3708      	adds	r7, #8
 8002600:	46bd      	mov	sp, r7
 8002602:	bd80      	pop	{r7, pc}

08002604 <LIS2DW12_ACC_SetOutputDataRate_With_Mode>:
  * @param  Noise the low noise option
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DW12_ACC_SetOutputDataRate_With_Mode(LIS2DW12_Object_t *pObj, float Odr, LIS2DW12_Operating_Mode_t Mode,
                                                 LIS2DW12_Low_Noise_t Noise)
{
 8002604:	b580      	push	{r7, lr}
 8002606:	b084      	sub	sp, #16
 8002608:	af00      	add	r7, sp, #0
 800260a:	60f8      	str	r0, [r7, #12]
 800260c:	ed87 0a02 	vstr	s0, [r7, #8]
 8002610:	460b      	mov	r3, r1
 8002612:	71fb      	strb	r3, [r7, #7]
 8002614:	4613      	mov	r3, r2
 8002616:	71bb      	strb	r3, [r7, #6]
  /* Check if the component is enabled */
  if (pObj->acc_is_enabled == 1U)
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800261e:	2b01      	cmp	r3, #1
 8002620:	d109      	bne.n	8002636 <LIS2DW12_ACC_SetOutputDataRate_With_Mode+0x32>
  {
    return LIS2DW12_ACC_SetOutputDataRate_When_Enabled(pObj, Odr, Mode, Noise);
 8002622:	79ba      	ldrb	r2, [r7, #6]
 8002624:	79fb      	ldrb	r3, [r7, #7]
 8002626:	4619      	mov	r1, r3
 8002628:	ed97 0a02 	vldr	s0, [r7, #8]
 800262c:	68f8      	ldr	r0, [r7, #12]
 800262e:	f000 f98d 	bl	800294c <LIS2DW12_ACC_SetOutputDataRate_When_Enabled>
 8002632:	4603      	mov	r3, r0
 8002634:	e008      	b.n	8002648 <LIS2DW12_ACC_SetOutputDataRate_With_Mode+0x44>
  }
  else
  {
    return LIS2DW12_ACC_SetOutputDataRate_When_Disabled(pObj, Odr, Mode, Noise);
 8002636:	79ba      	ldrb	r2, [r7, #6]
 8002638:	79fb      	ldrb	r3, [r7, #7]
 800263a:	4619      	mov	r1, r3
 800263c:	ed97 0a02 	vldr	s0, [r7, #8]
 8002640:	68f8      	ldr	r0, [r7, #12]
 8002642:	f000 fa9f 	bl	8002b84 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled>
 8002646:	4603      	mov	r3, r0
  }
}
 8002648:	4618      	mov	r0, r3
 800264a:	3710      	adds	r7, #16
 800264c:	46bd      	mov	sp, r7
 800264e:	bd80      	pop	{r7, pc}

08002650 <LIS2DW12_ACC_GetFullScale>:
  * @param  pObj the device pObj
  * @param  FullScale pointer where the full scale is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DW12_ACC_GetFullScale(LIS2DW12_Object_t *pObj, int32_t *FullScale)
{
 8002650:	b580      	push	{r7, lr}
 8002652:	b084      	sub	sp, #16
 8002654:	af00      	add	r7, sp, #0
 8002656:	6078      	str	r0, [r7, #4]
 8002658:	6039      	str	r1, [r7, #0]
  int32_t ret = LIS2DW12_OK;
 800265a:	2300      	movs	r3, #0
 800265c:	60fb      	str	r3, [r7, #12]
  lis2dw12_fs_t fs_low_level;

  /* Read actual full scale selection from sensor. */
  if (lis2dw12_full_scale_get(&(pObj->Ctx), &fs_low_level) != LIS2DW12_OK)
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	3320      	adds	r3, #32
 8002662:	f107 020b 	add.w	r2, r7, #11
 8002666:	4611      	mov	r1, r2
 8002668:	4618      	mov	r0, r3
 800266a:	f000 fde7 	bl	800323c <lis2dw12_full_scale_get>
 800266e:	4603      	mov	r3, r0
 8002670:	2b00      	cmp	r3, #0
 8002672:	d002      	beq.n	800267a <LIS2DW12_ACC_GetFullScale+0x2a>
  {
    return LIS2DW12_ERROR;
 8002674:	f04f 33ff 	mov.w	r3, #4294967295
 8002678:	e027      	b.n	80026ca <LIS2DW12_ACC_GetFullScale+0x7a>
  }

  switch (fs_low_level)
 800267a:	7afb      	ldrb	r3, [r7, #11]
 800267c:	2b03      	cmp	r3, #3
 800267e:	d81b      	bhi.n	80026b8 <LIS2DW12_ACC_GetFullScale+0x68>
 8002680:	a201      	add	r2, pc, #4	; (adr r2, 8002688 <LIS2DW12_ACC_GetFullScale+0x38>)
 8002682:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002686:	bf00      	nop
 8002688:	08002699 	.word	0x08002699
 800268c:	080026a1 	.word	0x080026a1
 8002690:	080026a9 	.word	0x080026a9
 8002694:	080026b1 	.word	0x080026b1
  {
    case LIS2DW12_2g:
      *FullScale =  2;
 8002698:	683b      	ldr	r3, [r7, #0]
 800269a:	2202      	movs	r2, #2
 800269c:	601a      	str	r2, [r3, #0]
      break;
 800269e:	e013      	b.n	80026c8 <LIS2DW12_ACC_GetFullScale+0x78>

    case LIS2DW12_4g:
      *FullScale =  4;
 80026a0:	683b      	ldr	r3, [r7, #0]
 80026a2:	2204      	movs	r2, #4
 80026a4:	601a      	str	r2, [r3, #0]
      break;
 80026a6:	e00f      	b.n	80026c8 <LIS2DW12_ACC_GetFullScale+0x78>

    case LIS2DW12_8g:
      *FullScale =  8;
 80026a8:	683b      	ldr	r3, [r7, #0]
 80026aa:	2208      	movs	r2, #8
 80026ac:	601a      	str	r2, [r3, #0]
      break;
 80026ae:	e00b      	b.n	80026c8 <LIS2DW12_ACC_GetFullScale+0x78>

    case LIS2DW12_16g:
      *FullScale = 16;
 80026b0:	683b      	ldr	r3, [r7, #0]
 80026b2:	2210      	movs	r2, #16
 80026b4:	601a      	str	r2, [r3, #0]
      break;
 80026b6:	e007      	b.n	80026c8 <LIS2DW12_ACC_GetFullScale+0x78>

    default:
      *FullScale = -1;
 80026b8:	683b      	ldr	r3, [r7, #0]
 80026ba:	f04f 32ff 	mov.w	r2, #4294967295
 80026be:	601a      	str	r2, [r3, #0]
      ret = LIS2DW12_ERROR;
 80026c0:	f04f 33ff 	mov.w	r3, #4294967295
 80026c4:	60fb      	str	r3, [r7, #12]
      break;
 80026c6:	bf00      	nop
  }

  return ret;
 80026c8:	68fb      	ldr	r3, [r7, #12]
}
 80026ca:	4618      	mov	r0, r3
 80026cc:	3710      	adds	r7, #16
 80026ce:	46bd      	mov	sp, r7
 80026d0:	bd80      	pop	{r7, pc}
 80026d2:	bf00      	nop

080026d4 <LIS2DW12_ACC_SetFullScale>:
  * @param  pObj the device pObj
  * @param  FullScale the functional full scale to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DW12_ACC_SetFullScale(LIS2DW12_Object_t *pObj, int32_t FullScale)
{
 80026d4:	b580      	push	{r7, lr}
 80026d6:	b084      	sub	sp, #16
 80026d8:	af00      	add	r7, sp, #0
 80026da:	6078      	str	r0, [r7, #4]
 80026dc:	6039      	str	r1, [r7, #0]
  lis2dw12_fs_t new_fs;

  /* Seems like MISRA C-2012 rule 14.3a violation but only from single file statical analysis point of view because
     the parameter passed to the function is not known at the moment of analysis */
  new_fs = (FullScale <= 2) ? LIS2DW12_2g
           : (FullScale <= 4) ? LIS2DW12_4g
 80026de:	683b      	ldr	r3, [r7, #0]
 80026e0:	2b02      	cmp	r3, #2
 80026e2:	dd0b      	ble.n	80026fc <LIS2DW12_ACC_SetFullScale+0x28>
 80026e4:	683b      	ldr	r3, [r7, #0]
 80026e6:	2b04      	cmp	r3, #4
 80026e8:	dd06      	ble.n	80026f8 <LIS2DW12_ACC_SetFullScale+0x24>
 80026ea:	683b      	ldr	r3, [r7, #0]
 80026ec:	2b08      	cmp	r3, #8
 80026ee:	dc01      	bgt.n	80026f4 <LIS2DW12_ACC_SetFullScale+0x20>
 80026f0:	2302      	movs	r3, #2
 80026f2:	e004      	b.n	80026fe <LIS2DW12_ACC_SetFullScale+0x2a>
 80026f4:	2303      	movs	r3, #3
 80026f6:	e002      	b.n	80026fe <LIS2DW12_ACC_SetFullScale+0x2a>
 80026f8:	2301      	movs	r3, #1
 80026fa:	e000      	b.n	80026fe <LIS2DW12_ACC_SetFullScale+0x2a>
 80026fc:	2300      	movs	r3, #0
  new_fs = (FullScale <= 2) ? LIS2DW12_2g
 80026fe:	73fb      	strb	r3, [r7, #15]
           : (FullScale <= 8) ? LIS2DW12_8g
           :                    LIS2DW12_16g;

  if (lis2dw12_full_scale_set(&(pObj->Ctx), new_fs) != LIS2DW12_OK)
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	3320      	adds	r3, #32
 8002704:	7bfa      	ldrb	r2, [r7, #15]
 8002706:	4611      	mov	r1, r2
 8002708:	4618      	mov	r0, r3
 800270a:	f000 fd71 	bl	80031f0 <lis2dw12_full_scale_set>
 800270e:	4603      	mov	r3, r0
 8002710:	2b00      	cmp	r3, #0
 8002712:	d002      	beq.n	800271a <LIS2DW12_ACC_SetFullScale+0x46>
  {
    return LIS2DW12_ERROR;
 8002714:	f04f 33ff 	mov.w	r3, #4294967295
 8002718:	e000      	b.n	800271c <LIS2DW12_ACC_SetFullScale+0x48>
  }

  return LIS2DW12_OK;
 800271a:	2300      	movs	r3, #0
}
 800271c:	4618      	mov	r0, r3
 800271e:	3710      	adds	r7, #16
 8002720:	46bd      	mov	sp, r7
 8002722:	bd80      	pop	{r7, pc}

08002724 <LIS2DW12_ACC_GetAxesRaw>:
  * @param  pObj the device pObj
  * @param  Value pointer where the raw values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DW12_ACC_GetAxesRaw(LIS2DW12_Object_t *pObj, LIS2DW12_AxesRaw_t *Value)
{
 8002724:	b580      	push	{r7, lr}
 8002726:	b086      	sub	sp, #24
 8002728:	af00      	add	r7, sp, #0
 800272a:	6078      	str	r0, [r7, #4]
 800272c:	6039      	str	r1, [r7, #0]
  lis2dw12_axis3bit16_t data_raw;
  lis2dw12_mode_t mode;
  int32_t ret = LIS2DW12_OK;
 800272e:	2300      	movs	r3, #0
 8002730:	617b      	str	r3, [r7, #20]

  /* Read actual power mode selection from sensor. */
  if (lis2dw12_power_mode_get(&(pObj->Ctx), &mode) != LIS2DW12_OK)
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	3320      	adds	r3, #32
 8002736:	f107 020b 	add.w	r2, r7, #11
 800273a:	4611      	mov	r1, r2
 800273c:	4618      	mov	r0, r3
 800273e:	f000 fb67 	bl	8002e10 <lis2dw12_power_mode_get>
 8002742:	4603      	mov	r3, r0
 8002744:	2b00      	cmp	r3, #0
 8002746:	d002      	beq.n	800274e <LIS2DW12_ACC_GetAxesRaw+0x2a>
  {
    return LIS2DW12_ERROR;
 8002748:	f04f 33ff 	mov.w	r3, #4294967295
 800274c:	e089      	b.n	8002862 <LIS2DW12_ACC_GetAxesRaw+0x13e>
  }

  /* Read raw data values. */
  if (lis2dw12_acceleration_raw_get(&(pObj->Ctx), data_raw.i16bit) != LIS2DW12_OK)
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	3320      	adds	r3, #32
 8002752:	f107 020c 	add.w	r2, r7, #12
 8002756:	4611      	mov	r1, r2
 8002758:	4618      	mov	r0, r3
 800275a:	f000 fda7 	bl	80032ac <lis2dw12_acceleration_raw_get>
 800275e:	4603      	mov	r3, r0
 8002760:	2b00      	cmp	r3, #0
 8002762:	d002      	beq.n	800276a <LIS2DW12_ACC_GetAxesRaw+0x46>
  {
    return LIS2DW12_ERROR;
 8002764:	f04f 33ff 	mov.w	r3, #4294967295
 8002768:	e07b      	b.n	8002862 <LIS2DW12_ACC_GetAxesRaw+0x13e>
  }

  switch (mode)
 800276a:	7afb      	ldrb	r3, [r7, #11]
 800276c:	2b1b      	cmp	r3, #27
 800276e:	d873      	bhi.n	8002858 <LIS2DW12_ACC_GetAxesRaw+0x134>
 8002770:	a201      	add	r2, pc, #4	; (adr r2, 8002778 <LIS2DW12_ACC_GetAxesRaw+0x54>)
 8002772:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002776:	bf00      	nop
 8002778:	080027e9 	.word	0x080027e9
 800277c:	08002821 	.word	0x08002821
 8002780:	08002821 	.word	0x08002821
 8002784:	08002821 	.word	0x08002821
 8002788:	08002821 	.word	0x08002821
 800278c:	08002859 	.word	0x08002859
 8002790:	08002859 	.word	0x08002859
 8002794:	08002859 	.word	0x08002859
 8002798:	080027e9 	.word	0x080027e9
 800279c:	08002821 	.word	0x08002821
 80027a0:	08002821 	.word	0x08002821
 80027a4:	08002821 	.word	0x08002821
 80027a8:	08002859 	.word	0x08002859
 80027ac:	08002859 	.word	0x08002859
 80027b0:	08002859 	.word	0x08002859
 80027b4:	08002859 	.word	0x08002859
 80027b8:	080027e9 	.word	0x080027e9
 80027bc:	08002821 	.word	0x08002821
 80027c0:	08002821 	.word	0x08002821
 80027c4:	08002821 	.word	0x08002821
 80027c8:	08002821 	.word	0x08002821
 80027cc:	08002859 	.word	0x08002859
 80027d0:	08002859 	.word	0x08002859
 80027d4:	08002859 	.word	0x08002859
 80027d8:	080027e9 	.word	0x080027e9
 80027dc:	08002821 	.word	0x08002821
 80027e0:	08002821 	.word	0x08002821
 80027e4:	08002821 	.word	0x08002821
    case LIS2DW12_CONT_LOW_PWR_12bit:
    case LIS2DW12_SINGLE_LOW_PWR_12bit:
    case LIS2DW12_CONT_LOW_PWR_LOW_NOISE_12bit:
    case LIS2DW12_SINGLE_LOW_LOW_NOISE_PWR_12bit:
      /* Data format 12 bits. */
      Value->x = (data_raw.i16bit[0] / 16);
 80027e8:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	da00      	bge.n	80027f2 <LIS2DW12_ACC_GetAxesRaw+0xce>
 80027f0:	330f      	adds	r3, #15
 80027f2:	111b      	asrs	r3, r3, #4
 80027f4:	b21a      	sxth	r2, r3
 80027f6:	683b      	ldr	r3, [r7, #0]
 80027f8:	801a      	strh	r2, [r3, #0]
      Value->y = (data_raw.i16bit[1] / 16);
 80027fa:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80027fe:	2b00      	cmp	r3, #0
 8002800:	da00      	bge.n	8002804 <LIS2DW12_ACC_GetAxesRaw+0xe0>
 8002802:	330f      	adds	r3, #15
 8002804:	111b      	asrs	r3, r3, #4
 8002806:	b21a      	sxth	r2, r3
 8002808:	683b      	ldr	r3, [r7, #0]
 800280a:	805a      	strh	r2, [r3, #2]
      Value->z = (data_raw.i16bit[2] / 16);
 800280c:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8002810:	2b00      	cmp	r3, #0
 8002812:	da00      	bge.n	8002816 <LIS2DW12_ACC_GetAxesRaw+0xf2>
 8002814:	330f      	adds	r3, #15
 8002816:	111b      	asrs	r3, r3, #4
 8002818:	b21a      	sxth	r2, r3
 800281a:	683b      	ldr	r3, [r7, #0]
 800281c:	809a      	strh	r2, [r3, #4]
      break;
 800281e:	e01f      	b.n	8002860 <LIS2DW12_ACC_GetAxesRaw+0x13c>
    case LIS2DW12_CONT_LOW_PWR_LOW_NOISE_2:
    case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_4:
    case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_3:
    case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_2:
      /* Data format 14 bits. */
      Value->x = (data_raw.i16bit[0] / 4);
 8002820:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8002824:	2b00      	cmp	r3, #0
 8002826:	da00      	bge.n	800282a <LIS2DW12_ACC_GetAxesRaw+0x106>
 8002828:	3303      	adds	r3, #3
 800282a:	109b      	asrs	r3, r3, #2
 800282c:	b21a      	sxth	r2, r3
 800282e:	683b      	ldr	r3, [r7, #0]
 8002830:	801a      	strh	r2, [r3, #0]
      Value->y = (data_raw.i16bit[1] / 4);
 8002832:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002836:	2b00      	cmp	r3, #0
 8002838:	da00      	bge.n	800283c <LIS2DW12_ACC_GetAxesRaw+0x118>
 800283a:	3303      	adds	r3, #3
 800283c:	109b      	asrs	r3, r3, #2
 800283e:	b21a      	sxth	r2, r3
 8002840:	683b      	ldr	r3, [r7, #0]
 8002842:	805a      	strh	r2, [r3, #2]
      Value->z = (data_raw.i16bit[2] / 4);
 8002844:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8002848:	2b00      	cmp	r3, #0
 800284a:	da00      	bge.n	800284e <LIS2DW12_ACC_GetAxesRaw+0x12a>
 800284c:	3303      	adds	r3, #3
 800284e:	109b      	asrs	r3, r3, #2
 8002850:	b21a      	sxth	r2, r3
 8002852:	683b      	ldr	r3, [r7, #0]
 8002854:	809a      	strh	r2, [r3, #4]
      break;
 8002856:	e003      	b.n	8002860 <LIS2DW12_ACC_GetAxesRaw+0x13c>

    default:
      ret = LIS2DW12_ERROR;
 8002858:	f04f 33ff 	mov.w	r3, #4294967295
 800285c:	617b      	str	r3, [r7, #20]
      break;
 800285e:	bf00      	nop
  }

  return ret;
 8002860:	697b      	ldr	r3, [r7, #20]
}
 8002862:	4618      	mov	r0, r3
 8002864:	3718      	adds	r7, #24
 8002866:	46bd      	mov	sp, r7
 8002868:	bd80      	pop	{r7, pc}
 800286a:	bf00      	nop

0800286c <LIS2DW12_ACC_GetAxes>:
  * @param  pObj the device pObj
  * @param  Acceleration pointer where the values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DW12_ACC_GetAxes(LIS2DW12_Object_t *pObj, LIS2DW12_Axes_t *Acceleration)
{
 800286c:	b580      	push	{r7, lr}
 800286e:	b086      	sub	sp, #24
 8002870:	af00      	add	r7, sp, #0
 8002872:	6078      	str	r0, [r7, #4]
 8002874:	6039      	str	r1, [r7, #0]
  LIS2DW12_AxesRaw_t data_raw;
  float sensitivity = 0.0f;
 8002876:	f04f 0300 	mov.w	r3, #0
 800287a:	60fb      	str	r3, [r7, #12]

  /* Read raw data values. */
  if (LIS2DW12_ACC_GetAxesRaw(pObj, &data_raw) != LIS2DW12_OK)
 800287c:	f107 0310 	add.w	r3, r7, #16
 8002880:	4619      	mov	r1, r3
 8002882:	6878      	ldr	r0, [r7, #4]
 8002884:	f7ff ff4e 	bl	8002724 <LIS2DW12_ACC_GetAxesRaw>
 8002888:	4603      	mov	r3, r0
 800288a:	2b00      	cmp	r3, #0
 800288c:	d002      	beq.n	8002894 <LIS2DW12_ACC_GetAxes+0x28>
  {
    return LIS2DW12_ERROR;
 800288e:	f04f 33ff 	mov.w	r3, #4294967295
 8002892:	e03c      	b.n	800290e <LIS2DW12_ACC_GetAxes+0xa2>
  }

  /* Get LIS2DW12 actual sensitivity. */
  if (LIS2DW12_ACC_GetSensitivity(pObj, &sensitivity) != LIS2DW12_OK)
 8002894:	f107 030c 	add.w	r3, r7, #12
 8002898:	4619      	mov	r1, r3
 800289a:	6878      	ldr	r0, [r7, #4]
 800289c:	f7ff fbd6 	bl	800204c <LIS2DW12_ACC_GetSensitivity>
 80028a0:	4603      	mov	r3, r0
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d002      	beq.n	80028ac <LIS2DW12_ACC_GetAxes+0x40>
  {
    return LIS2DW12_ERROR;
 80028a6:	f04f 33ff 	mov.w	r3, #4294967295
 80028aa:	e030      	b.n	800290e <LIS2DW12_ACC_GetAxes+0xa2>
  }

  /* Calculate the data. */
  Acceleration->x = (int32_t)((float)((float)data_raw.x * sensitivity));
 80028ac:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80028b0:	ee07 3a90 	vmov	s15, r3
 80028b4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80028b8:	edd7 7a03 	vldr	s15, [r7, #12]
 80028bc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80028c0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80028c4:	ee17 2a90 	vmov	r2, s15
 80028c8:	683b      	ldr	r3, [r7, #0]
 80028ca:	601a      	str	r2, [r3, #0]
  Acceleration->y = (int32_t)((float)((float)data_raw.y * sensitivity));
 80028cc:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80028d0:	ee07 3a90 	vmov	s15, r3
 80028d4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80028d8:	edd7 7a03 	vldr	s15, [r7, #12]
 80028dc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80028e0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80028e4:	ee17 2a90 	vmov	r2, s15
 80028e8:	683b      	ldr	r3, [r7, #0]
 80028ea:	605a      	str	r2, [r3, #4]
  Acceleration->z = (int32_t)((float)((float)data_raw.z * sensitivity));
 80028ec:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80028f0:	ee07 3a90 	vmov	s15, r3
 80028f4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80028f8:	edd7 7a03 	vldr	s15, [r7, #12]
 80028fc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002900:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002904:	ee17 2a90 	vmov	r2, s15
 8002908:	683b      	ldr	r3, [r7, #0]
 800290a:	609a      	str	r2, [r3, #8]

  return LIS2DW12_OK;
 800290c:	2300      	movs	r3, #0
}
 800290e:	4618      	mov	r0, r3
 8002910:	3718      	adds	r7, #24
 8002912:	46bd      	mov	sp, r7
 8002914:	bd80      	pop	{r7, pc}

08002916 <LIS2DW12_Write_Reg>:
  * @param  Reg address to be written
  * @param  Data value to be written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DW12_Write_Reg(LIS2DW12_Object_t *pObj, uint8_t Reg, uint8_t Data)
{
 8002916:	b580      	push	{r7, lr}
 8002918:	b082      	sub	sp, #8
 800291a:	af00      	add	r7, sp, #0
 800291c:	6078      	str	r0, [r7, #4]
 800291e:	460b      	mov	r3, r1
 8002920:	70fb      	strb	r3, [r7, #3]
 8002922:	4613      	mov	r3, r2
 8002924:	70bb      	strb	r3, [r7, #2]
  if (lis2dw12_write_reg(&(pObj->Ctx), Reg, &Data, 1) != LIS2DW12_OK)
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	f103 0020 	add.w	r0, r3, #32
 800292c:	1cba      	adds	r2, r7, #2
 800292e:	78f9      	ldrb	r1, [r7, #3]
 8002930:	2301      	movs	r3, #1
 8002932:	f000 fa07 	bl	8002d44 <lis2dw12_write_reg>
 8002936:	4603      	mov	r3, r0
 8002938:	2b00      	cmp	r3, #0
 800293a:	d002      	beq.n	8002942 <LIS2DW12_Write_Reg+0x2c>
  {
    return LIS2DW12_ERROR;
 800293c:	f04f 33ff 	mov.w	r3, #4294967295
 8002940:	e000      	b.n	8002944 <LIS2DW12_Write_Reg+0x2e>
  }

  return LIS2DW12_OK;
 8002942:	2300      	movs	r3, #0
}
 8002944:	4618      	mov	r0, r3
 8002946:	3708      	adds	r7, #8
 8002948:	46bd      	mov	sp, r7
 800294a:	bd80      	pop	{r7, pc}

0800294c <LIS2DW12_ACC_SetOutputDataRate_When_Enabled>:
  * @param  Noise the low noise option
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LIS2DW12_ACC_SetOutputDataRate_When_Enabled(LIS2DW12_Object_t *pObj, float Odr,
                                                           LIS2DW12_Operating_Mode_t Mode, LIS2DW12_Low_Noise_t Noise)
{
 800294c:	b580      	push	{r7, lr}
 800294e:	b086      	sub	sp, #24
 8002950:	af00      	add	r7, sp, #0
 8002952:	60f8      	str	r0, [r7, #12]
 8002954:	ed87 0a02 	vstr	s0, [r7, #8]
 8002958:	460b      	mov	r3, r1
 800295a:	71fb      	strb	r3, [r7, #7]
 800295c:	4613      	mov	r3, r2
 800295e:	71bb      	strb	r3, [r7, #6]
  lis2dw12_odr_t new_odr;
  lis2dw12_mode_t new_power_mode;

  switch (Mode)
 8002960:	79fb      	ldrb	r3, [r7, #7]
 8002962:	3b01      	subs	r3, #1
 8002964:	2b03      	cmp	r3, #3
 8002966:	d80b      	bhi.n	8002980 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x34>
 8002968:	a201      	add	r2, pc, #4	; (adr r2, 8002970 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x24>)
 800296a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800296e:	bf00      	nop
 8002970:	080029ad 	.word	0x080029ad
 8002974:	080029d9 	.word	0x080029d9
 8002978:	08002a05 	.word	0x08002a05
 800297c:	08002a31 	.word	0x08002a31
  {
    case LIS2DW12_HIGH_PERFORMANCE_MODE:
    default:
      switch (Noise)
 8002980:	79bb      	ldrb	r3, [r7, #6]
 8002982:	2b01      	cmp	r3, #1
 8002984:	d002      	beq.n	800298c <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x40>
      {
        case LIS2DW12_LOW_NOISE_DISABLE:
        default:
          new_power_mode = LIS2DW12_HIGH_PERFORMANCE;
 8002986:	2304      	movs	r3, #4
 8002988:	75fb      	strb	r3, [r7, #23]
          break;
 800298a:	e002      	b.n	8002992 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x46>
        case LIS2DW12_LOW_NOISE_ENABLE:
          new_power_mode = LIS2DW12_HIGH_PERFORMANCE_LOW_NOISE;
 800298c:	2314      	movs	r3, #20
 800298e:	75fb      	strb	r3, [r7, #23]
          break;
 8002990:	bf00      	nop
      }

      /* If High Performance mode minimum ODR is 12.5Hz */
      if (Odr < 12.5f)
 8002992:	edd7 7a02 	vldr	s15, [r7, #8]
 8002996:	eeb2 7a09 	vmov.f32	s14, #41	; 0x41480000  12.5
 800299a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800299e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80029a2:	d400      	bmi.n	80029a6 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x5a>
      {
        Odr = 12.5f;
      }
      break;
 80029a4:	e05a      	b.n	8002a5c <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x110>
        Odr = 12.5f;
 80029a6:	4b6f      	ldr	r3, [pc, #444]	; (8002b64 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x218>)
 80029a8:	60bb      	str	r3, [r7, #8]
      break;
 80029aa:	e057      	b.n	8002a5c <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x110>
    case LIS2DW12_LOW_POWER_MODE4:
      switch (Noise)
 80029ac:	79bb      	ldrb	r3, [r7, #6]
 80029ae:	2b01      	cmp	r3, #1
 80029b0:	d002      	beq.n	80029b8 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x6c>
      {
        case LIS2DW12_LOW_NOISE_DISABLE:
        default:
          new_power_mode = LIS2DW12_CONT_LOW_PWR_4;
 80029b2:	2303      	movs	r3, #3
 80029b4:	75fb      	strb	r3, [r7, #23]
          break;
 80029b6:	e002      	b.n	80029be <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x72>
        case LIS2DW12_LOW_NOISE_ENABLE:
          new_power_mode = LIS2DW12_CONT_LOW_PWR_LOW_NOISE_4;
 80029b8:	2313      	movs	r3, #19
 80029ba:	75fb      	strb	r3, [r7, #23]
          break;
 80029bc:	bf00      	nop
      }

      /* If Low Power mode maximum ODR is 200Hz */
      if (Odr > 200.0f)
 80029be:	edd7 7a02 	vldr	s15, [r7, #8]
 80029c2:	ed9f 7a69 	vldr	s14, [pc, #420]	; 8002b68 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x21c>
 80029c6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80029ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80029ce:	dc00      	bgt.n	80029d2 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x86>
      {
        Odr = 200.0f;
      }
      break;
 80029d0:	e044      	b.n	8002a5c <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x110>
        Odr = 200.0f;
 80029d2:	4b66      	ldr	r3, [pc, #408]	; (8002b6c <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x220>)
 80029d4:	60bb      	str	r3, [r7, #8]
      break;
 80029d6:	e041      	b.n	8002a5c <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x110>
    case LIS2DW12_LOW_POWER_MODE3:
      switch (Noise)
 80029d8:	79bb      	ldrb	r3, [r7, #6]
 80029da:	2b01      	cmp	r3, #1
 80029dc:	d002      	beq.n	80029e4 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x98>
      {
        case LIS2DW12_LOW_NOISE_DISABLE:
        default:
          new_power_mode = LIS2DW12_CONT_LOW_PWR_3;
 80029de:	2302      	movs	r3, #2
 80029e0:	75fb      	strb	r3, [r7, #23]
          break;
 80029e2:	e002      	b.n	80029ea <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x9e>
        case LIS2DW12_LOW_NOISE_ENABLE:
          new_power_mode = LIS2DW12_CONT_LOW_PWR_LOW_NOISE_3;
 80029e4:	2312      	movs	r3, #18
 80029e6:	75fb      	strb	r3, [r7, #23]
          break;
 80029e8:	bf00      	nop
      }

      /* If Low Power mode maximum ODR is 200Hz */
      if (Odr > 200.0f)
 80029ea:	edd7 7a02 	vldr	s15, [r7, #8]
 80029ee:	ed9f 7a5e 	vldr	s14, [pc, #376]	; 8002b68 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x21c>
 80029f2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80029f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80029fa:	dc00      	bgt.n	80029fe <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0xb2>
      {
        Odr = 200.0f;
      }
      break;
 80029fc:	e02e      	b.n	8002a5c <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x110>
        Odr = 200.0f;
 80029fe:	4b5b      	ldr	r3, [pc, #364]	; (8002b6c <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x220>)
 8002a00:	60bb      	str	r3, [r7, #8]
      break;
 8002a02:	e02b      	b.n	8002a5c <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x110>
    case LIS2DW12_LOW_POWER_MODE2:
      switch (Noise)
 8002a04:	79bb      	ldrb	r3, [r7, #6]
 8002a06:	2b01      	cmp	r3, #1
 8002a08:	d002      	beq.n	8002a10 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0xc4>
      {
        case LIS2DW12_LOW_NOISE_DISABLE:
        default:
          new_power_mode = LIS2DW12_CONT_LOW_PWR_2;
 8002a0a:	2301      	movs	r3, #1
 8002a0c:	75fb      	strb	r3, [r7, #23]
          break;
 8002a0e:	e002      	b.n	8002a16 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0xca>
        case LIS2DW12_LOW_NOISE_ENABLE:
          new_power_mode = LIS2DW12_CONT_LOW_PWR_LOW_NOISE_2;
 8002a10:	2311      	movs	r3, #17
 8002a12:	75fb      	strb	r3, [r7, #23]
          break;
 8002a14:	bf00      	nop
      }

      /* If Low Power mode maximum ODR is 200Hz */
      if (Odr > 200.0f)
 8002a16:	edd7 7a02 	vldr	s15, [r7, #8]
 8002a1a:	ed9f 7a53 	vldr	s14, [pc, #332]	; 8002b68 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x21c>
 8002a1e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002a22:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002a26:	dc00      	bgt.n	8002a2a <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0xde>
      {
        Odr = 200.0f;
      }
      break;
 8002a28:	e018      	b.n	8002a5c <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x110>
        Odr = 200.0f;
 8002a2a:	4b50      	ldr	r3, [pc, #320]	; (8002b6c <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x220>)
 8002a2c:	60bb      	str	r3, [r7, #8]
      break;
 8002a2e:	e015      	b.n	8002a5c <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x110>
    case LIS2DW12_LOW_POWER_MODE1:
      switch (Noise)
 8002a30:	79bb      	ldrb	r3, [r7, #6]
 8002a32:	2b01      	cmp	r3, #1
 8002a34:	d002      	beq.n	8002a3c <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0xf0>
      {
        case LIS2DW12_LOW_NOISE_DISABLE:
        default:
          new_power_mode = LIS2DW12_CONT_LOW_PWR_12bit;
 8002a36:	2300      	movs	r3, #0
 8002a38:	75fb      	strb	r3, [r7, #23]
          break;
 8002a3a:	e002      	b.n	8002a42 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0xf6>
        case LIS2DW12_LOW_NOISE_ENABLE:
          new_power_mode = LIS2DW12_CONT_LOW_PWR_LOW_NOISE_12bit;
 8002a3c:	2310      	movs	r3, #16
 8002a3e:	75fb      	strb	r3, [r7, #23]
          break;
 8002a40:	bf00      	nop
      }

      /* If Low Power mode maximum ODR is 200Hz */
      if (Odr > 200.0f)
 8002a42:	edd7 7a02 	vldr	s15, [r7, #8]
 8002a46:	ed9f 7a48 	vldr	s14, [pc, #288]	; 8002b68 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x21c>
 8002a4a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002a4e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002a52:	dc00      	bgt.n	8002a56 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x10a>
      {
        Odr = 200.0f;
      }
      break;
 8002a54:	e001      	b.n	8002a5a <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x10e>
        Odr = 200.0f;
 8002a56:	4b45      	ldr	r3, [pc, #276]	; (8002b6c <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x220>)
 8002a58:	60bb      	str	r3, [r7, #8]
      break;
 8002a5a:	bf00      	nop
  }

  new_odr = (Odr <=    1.6f) ? LIS2DW12_XL_ODR_1Hz6_LP_ONLY
            : (Odr <=   12.5f) ? LIS2DW12_XL_ODR_12Hz5
 8002a5c:	edd7 7a02 	vldr	s15, [r7, #8]
 8002a60:	ed9f 7a43 	vldr	s14, [pc, #268]	; 8002b70 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x224>
 8002a64:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002a68:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002a6c:	d801      	bhi.n	8002a72 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x126>
 8002a6e:	2301      	movs	r3, #1
 8002a70:	e04d      	b.n	8002b0e <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x1c2>
 8002a72:	edd7 7a02 	vldr	s15, [r7, #8]
 8002a76:	eeb2 7a09 	vmov.f32	s14, #41	; 0x41480000  12.5
 8002a7a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002a7e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002a82:	d801      	bhi.n	8002a88 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x13c>
 8002a84:	2302      	movs	r3, #2
 8002a86:	e042      	b.n	8002b0e <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x1c2>
 8002a88:	edd7 7a02 	vldr	s15, [r7, #8]
 8002a8c:	eeb3 7a09 	vmov.f32	s14, #57	; 0x41c80000  25.0
 8002a90:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002a94:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002a98:	d801      	bhi.n	8002a9e <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x152>
 8002a9a:	2303      	movs	r3, #3
 8002a9c:	e037      	b.n	8002b0e <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x1c2>
 8002a9e:	edd7 7a02 	vldr	s15, [r7, #8]
 8002aa2:	ed9f 7a34 	vldr	s14, [pc, #208]	; 8002b74 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x228>
 8002aa6:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002aaa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002aae:	d801      	bhi.n	8002ab4 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x168>
 8002ab0:	2304      	movs	r3, #4
 8002ab2:	e02c      	b.n	8002b0e <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x1c2>
 8002ab4:	edd7 7a02 	vldr	s15, [r7, #8]
 8002ab8:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 8002b78 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x22c>
 8002abc:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002ac0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002ac4:	d801      	bhi.n	8002aca <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x17e>
 8002ac6:	2305      	movs	r3, #5
 8002ac8:	e021      	b.n	8002b0e <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x1c2>
 8002aca:	edd7 7a02 	vldr	s15, [r7, #8]
 8002ace:	ed9f 7a26 	vldr	s14, [pc, #152]	; 8002b68 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x21c>
 8002ad2:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002ad6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002ada:	d801      	bhi.n	8002ae0 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x194>
 8002adc:	2306      	movs	r3, #6
 8002ade:	e016      	b.n	8002b0e <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x1c2>
 8002ae0:	edd7 7a02 	vldr	s15, [r7, #8]
 8002ae4:	ed9f 7a25 	vldr	s14, [pc, #148]	; 8002b7c <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x230>
 8002ae8:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002aec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002af0:	d801      	bhi.n	8002af6 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x1aa>
 8002af2:	2307      	movs	r3, #7
 8002af4:	e00b      	b.n	8002b0e <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x1c2>
 8002af6:	edd7 7a02 	vldr	s15, [r7, #8]
 8002afa:	ed9f 7a21 	vldr	s14, [pc, #132]	; 8002b80 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x234>
 8002afe:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002b02:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002b06:	d801      	bhi.n	8002b0c <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x1c0>
 8002b08:	2308      	movs	r3, #8
 8002b0a:	e000      	b.n	8002b0e <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x1c2>
 8002b0c:	2309      	movs	r3, #9
  new_odr = (Odr <=    1.6f) ? LIS2DW12_XL_ODR_1Hz6_LP_ONLY
 8002b0e:	75bb      	strb	r3, [r7, #22]
            : (Odr <=  400.0f) ? LIS2DW12_XL_ODR_400Hz
            : (Odr <=  800.0f) ? LIS2DW12_XL_ODR_800Hz
            :                    LIS2DW12_XL_ODR_1k6Hz;

  /* Output data rate selection. */
  if (lis2dw12_data_rate_set(&(pObj->Ctx), new_odr) != LIS2DW12_OK)
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	3320      	adds	r3, #32
 8002b14:	7dba      	ldrb	r2, [r7, #22]
 8002b16:	4611      	mov	r1, r2
 8002b18:	4618      	mov	r0, r3
 8002b1a:	f000 fa33 	bl	8002f84 <lis2dw12_data_rate_set>
 8002b1e:	4603      	mov	r3, r0
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d002      	beq.n	8002b2a <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x1de>
  {
    return LIS2DW12_ERROR;
 8002b24:	f04f 33ff 	mov.w	r3, #4294967295
 8002b28:	e018      	b.n	8002b5c <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x210>
  }

  /* Power mode selection. */
  if (lis2dw12_power_mode_set(&(pObj->Ctx), new_power_mode) != LIS2DW12_OK)
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	3320      	adds	r3, #32
 8002b2e:	7dfa      	ldrb	r2, [r7, #23]
 8002b30:	4611      	mov	r1, r2
 8002b32:	4618      	mov	r0, r3
 8002b34:	f000 f91e 	bl	8002d74 <lis2dw12_power_mode_set>
 8002b38:	4603      	mov	r3, r0
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d002      	beq.n	8002b44 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x1f8>
  {
    return LIS2DW12_ERROR;
 8002b3e:	f04f 33ff 	mov.w	r3, #4294967295
 8002b42:	e00b      	b.n	8002b5c <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x210>
  }

  /* Store the current Odr, Mode and Noise values */
  pObj->acc_odr = Odr;
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	68ba      	ldr	r2, [r7, #8]
 8002b48:	635a      	str	r2, [r3, #52]	; 0x34
  pObj->acc_operating_mode = Mode;
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	79fa      	ldrb	r2, [r7, #7]
 8002b4e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  pObj->acc_low_noise = Noise;
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	79ba      	ldrb	r2, [r7, #6]
 8002b56:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return LIS2DW12_OK;
 8002b5a:	2300      	movs	r3, #0
}
 8002b5c:	4618      	mov	r0, r3
 8002b5e:	3718      	adds	r7, #24
 8002b60:	46bd      	mov	sp, r7
 8002b62:	bd80      	pop	{r7, pc}
 8002b64:	41480000 	.word	0x41480000
 8002b68:	43480000 	.word	0x43480000
 8002b6c:	43480000 	.word	0x43480000
 8002b70:	3fcccccd 	.word	0x3fcccccd
 8002b74:	42480000 	.word	0x42480000
 8002b78:	42c80000 	.word	0x42c80000
 8002b7c:	43c80000 	.word	0x43c80000
 8002b80:	44480000 	.word	0x44480000

08002b84 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled>:
  * @param  Noise the low noise option
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LIS2DW12_ACC_SetOutputDataRate_When_Disabled(LIS2DW12_Object_t *pObj, float Odr,
                                                            LIS2DW12_Operating_Mode_t Mode, LIS2DW12_Low_Noise_t Noise)
{
 8002b84:	b480      	push	{r7}
 8002b86:	b085      	sub	sp, #20
 8002b88:	af00      	add	r7, sp, #0
 8002b8a:	60f8      	str	r0, [r7, #12]
 8002b8c:	ed87 0a02 	vstr	s0, [r7, #8]
 8002b90:	460b      	mov	r3, r1
 8002b92:	71fb      	strb	r3, [r7, #7]
 8002b94:	4613      	mov	r3, r2
 8002b96:	71bb      	strb	r3, [r7, #6]
  /* Store the new Odr, Mode and Noise values */
  pObj->acc_operating_mode = Mode;
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	79fa      	ldrb	r2, [r7, #7]
 8002b9c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  pObj->acc_low_noise = Noise;
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	79ba      	ldrb	r2, [r7, #6]
 8002ba4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  pObj->acc_odr = (Odr <=    1.6f) ?    1.6f
                  : (Odr <=   12.5f) ?   12.5f
 8002ba8:	edd7 7a02 	vldr	s15, [r7, #8]
 8002bac:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 8002c6c <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xe8>
 8002bb0:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002bb4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002bb8:	d801      	bhi.n	8002bbe <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0x3a>
 8002bba:	4b2d      	ldr	r3, [pc, #180]	; (8002c70 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xec>)
 8002bbc:	e04d      	b.n	8002c5a <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xd6>
                  : (Odr <=   25.0f) ?   25.0f
 8002bbe:	edd7 7a02 	vldr	s15, [r7, #8]
 8002bc2:	eeb2 7a09 	vmov.f32	s14, #41	; 0x41480000  12.5
 8002bc6:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002bca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002bce:	d801      	bhi.n	8002bd4 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0x50>
 8002bd0:	4b28      	ldr	r3, [pc, #160]	; (8002c74 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xf0>)
 8002bd2:	e042      	b.n	8002c5a <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xd6>
                  : (Odr <=   50.0f) ?   50.0f
 8002bd4:	edd7 7a02 	vldr	s15, [r7, #8]
 8002bd8:	eeb3 7a09 	vmov.f32	s14, #57	; 0x41c80000  25.0
 8002bdc:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002be0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002be4:	d801      	bhi.n	8002bea <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0x66>
 8002be6:	4b24      	ldr	r3, [pc, #144]	; (8002c78 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xf4>)
 8002be8:	e037      	b.n	8002c5a <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xd6>
                  : (Odr <=  100.0f) ?  100.0f
 8002bea:	edd7 7a02 	vldr	s15, [r7, #8]
 8002bee:	ed9f 7a23 	vldr	s14, [pc, #140]	; 8002c7c <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xf8>
 8002bf2:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002bf6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002bfa:	d801      	bhi.n	8002c00 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0x7c>
 8002bfc:	4b20      	ldr	r3, [pc, #128]	; (8002c80 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xfc>)
 8002bfe:	e02c      	b.n	8002c5a <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xd6>
                  : (Odr <=  200.0f) ?  200.0f
 8002c00:	edd7 7a02 	vldr	s15, [r7, #8]
 8002c04:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 8002c84 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0x100>
 8002c08:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002c0c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c10:	d801      	bhi.n	8002c16 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0x92>
 8002c12:	4b1d      	ldr	r3, [pc, #116]	; (8002c88 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0x104>)
 8002c14:	e021      	b.n	8002c5a <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xd6>
                  : (Odr <=  400.0f) ?  400.0f
 8002c16:	edd7 7a02 	vldr	s15, [r7, #8]
 8002c1a:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 8002c8c <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0x108>
 8002c1e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002c22:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c26:	d801      	bhi.n	8002c2c <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xa8>
 8002c28:	4b19      	ldr	r3, [pc, #100]	; (8002c90 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0x10c>)
 8002c2a:	e016      	b.n	8002c5a <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xd6>
                  : (Odr <=  800.0f) ?  800.0f
 8002c2c:	edd7 7a02 	vldr	s15, [r7, #8]
 8002c30:	ed9f 7a18 	vldr	s14, [pc, #96]	; 8002c94 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0x110>
 8002c34:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002c38:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c3c:	d801      	bhi.n	8002c42 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xbe>
 8002c3e:	4b16      	ldr	r3, [pc, #88]	; (8002c98 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0x114>)
 8002c40:	e00b      	b.n	8002c5a <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xd6>
                  :                    1600.0f;
 8002c42:	edd7 7a02 	vldr	s15, [r7, #8]
 8002c46:	ed9f 7a15 	vldr	s14, [pc, #84]	; 8002c9c <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0x118>
 8002c4a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002c4e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c52:	d801      	bhi.n	8002c58 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xd4>
 8002c54:	4b12      	ldr	r3, [pc, #72]	; (8002ca0 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0x11c>)
 8002c56:	e000      	b.n	8002c5a <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xd6>
 8002c58:	4b12      	ldr	r3, [pc, #72]	; (8002ca4 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0x120>)
  pObj->acc_odr = (Odr <=    1.6f) ?    1.6f
 8002c5a:	68fa      	ldr	r2, [r7, #12]
 8002c5c:	6353      	str	r3, [r2, #52]	; 0x34

  return LIS2DW12_OK;
 8002c5e:	2300      	movs	r3, #0
}
 8002c60:	4618      	mov	r0, r3
 8002c62:	3714      	adds	r7, #20
 8002c64:	46bd      	mov	sp, r7
 8002c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c6a:	4770      	bx	lr
 8002c6c:	3fcccccd 	.word	0x3fcccccd
 8002c70:	3fcccccd 	.word	0x3fcccccd
 8002c74:	41480000 	.word	0x41480000
 8002c78:	41c80000 	.word	0x41c80000
 8002c7c:	42480000 	.word	0x42480000
 8002c80:	42480000 	.word	0x42480000
 8002c84:	42c80000 	.word	0x42c80000
 8002c88:	42c80000 	.word	0x42c80000
 8002c8c:	43480000 	.word	0x43480000
 8002c90:	43480000 	.word	0x43480000
 8002c94:	43c80000 	.word	0x43c80000
 8002c98:	43c80000 	.word	0x43c80000
 8002c9c:	44480000 	.word	0x44480000
 8002ca0:	44480000 	.word	0x44480000
 8002ca4:	44c80000 	.word	0x44c80000

08002ca8 <ReadRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t ReadRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8002ca8:	b590      	push	{r4, r7, lr}
 8002caa:	b087      	sub	sp, #28
 8002cac:	af00      	add	r7, sp, #0
 8002cae:	60f8      	str	r0, [r7, #12]
 8002cb0:	607a      	str	r2, [r7, #4]
 8002cb2:	461a      	mov	r2, r3
 8002cb4:	460b      	mov	r3, r1
 8002cb6:	72fb      	strb	r3, [r7, #11]
 8002cb8:	4613      	mov	r3, r2
 8002cba:	813b      	strh	r3, [r7, #8]
  LIS2DW12_Object_t *pObj = (LIS2DW12_Object_t *)Handle;
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	617b      	str	r3, [r7, #20]

  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 8002cc0:	697b      	ldr	r3, [r7, #20]
 8002cc2:	695c      	ldr	r4, [r3, #20]
 8002cc4:	697b      	ldr	r3, [r7, #20]
 8002cc6:	7b1b      	ldrb	r3, [r3, #12]
 8002cc8:	b298      	uxth	r0, r3
 8002cca:	7afb      	ldrb	r3, [r7, #11]
 8002ccc:	b299      	uxth	r1, r3
 8002cce:	893b      	ldrh	r3, [r7, #8]
 8002cd0:	687a      	ldr	r2, [r7, #4]
 8002cd2:	47a0      	blx	r4
 8002cd4:	4603      	mov	r3, r0
}
 8002cd6:	4618      	mov	r0, r3
 8002cd8:	371c      	adds	r7, #28
 8002cda:	46bd      	mov	sp, r7
 8002cdc:	bd90      	pop	{r4, r7, pc}

08002cde <WriteRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t WriteRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8002cde:	b590      	push	{r4, r7, lr}
 8002ce0:	b087      	sub	sp, #28
 8002ce2:	af00      	add	r7, sp, #0
 8002ce4:	60f8      	str	r0, [r7, #12]
 8002ce6:	607a      	str	r2, [r7, #4]
 8002ce8:	461a      	mov	r2, r3
 8002cea:	460b      	mov	r3, r1
 8002cec:	72fb      	strb	r3, [r7, #11]
 8002cee:	4613      	mov	r3, r2
 8002cf0:	813b      	strh	r3, [r7, #8]
  LIS2DW12_Object_t *pObj = (LIS2DW12_Object_t *)Handle;
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	617b      	str	r3, [r7, #20]

  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 8002cf6:	697b      	ldr	r3, [r7, #20]
 8002cf8:	691c      	ldr	r4, [r3, #16]
 8002cfa:	697b      	ldr	r3, [r7, #20]
 8002cfc:	7b1b      	ldrb	r3, [r3, #12]
 8002cfe:	b298      	uxth	r0, r3
 8002d00:	7afb      	ldrb	r3, [r7, #11]
 8002d02:	b299      	uxth	r1, r3
 8002d04:	893b      	ldrh	r3, [r7, #8]
 8002d06:	687a      	ldr	r2, [r7, #4]
 8002d08:	47a0      	blx	r4
 8002d0a:	4603      	mov	r3, r0
}
 8002d0c:	4618      	mov	r0, r3
 8002d0e:	371c      	adds	r7, #28
 8002d10:	46bd      	mov	sp, r7
 8002d12:	bd90      	pop	{r4, r7, pc}

08002d14 <lis2dw12_read_reg>:
  *
  */
int32_t lis2dw12_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                          uint8_t *data,
                          uint16_t len)
{
 8002d14:	b590      	push	{r4, r7, lr}
 8002d16:	b087      	sub	sp, #28
 8002d18:	af00      	add	r7, sp, #0
 8002d1a:	60f8      	str	r0, [r7, #12]
 8002d1c:	607a      	str	r2, [r7, #4]
 8002d1e:	461a      	mov	r2, r3
 8002d20:	460b      	mov	r3, r1
 8002d22:	72fb      	strb	r3, [r7, #11]
 8002d24:	4613      	mov	r3, r2
 8002d26:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	685c      	ldr	r4, [r3, #4]
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	68d8      	ldr	r0, [r3, #12]
 8002d30:	893b      	ldrh	r3, [r7, #8]
 8002d32:	7af9      	ldrb	r1, [r7, #11]
 8002d34:	687a      	ldr	r2, [r7, #4]
 8002d36:	47a0      	blx	r4
 8002d38:	6178      	str	r0, [r7, #20]

  return ret;
 8002d3a:	697b      	ldr	r3, [r7, #20]
}
 8002d3c:	4618      	mov	r0, r3
 8002d3e:	371c      	adds	r7, #28
 8002d40:	46bd      	mov	sp, r7
 8002d42:	bd90      	pop	{r4, r7, pc}

08002d44 <lis2dw12_write_reg>:
  *
  */
int32_t lis2dw12_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                           uint8_t *data,
                           uint16_t len)
{
 8002d44:	b590      	push	{r4, r7, lr}
 8002d46:	b087      	sub	sp, #28
 8002d48:	af00      	add	r7, sp, #0
 8002d4a:	60f8      	str	r0, [r7, #12]
 8002d4c:	607a      	str	r2, [r7, #4]
 8002d4e:	461a      	mov	r2, r3
 8002d50:	460b      	mov	r3, r1
 8002d52:	72fb      	strb	r3, [r7, #11]
 8002d54:	4613      	mov	r3, r2
 8002d56:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	681c      	ldr	r4, [r3, #0]
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	68d8      	ldr	r0, [r3, #12]
 8002d60:	893b      	ldrh	r3, [r7, #8]
 8002d62:	7af9      	ldrb	r1, [r7, #11]
 8002d64:	687a      	ldr	r2, [r7, #4]
 8002d66:	47a0      	blx	r4
 8002d68:	6178      	str	r0, [r7, #20]

  return ret;
 8002d6a:	697b      	ldr	r3, [r7, #20]
}
 8002d6c:	4618      	mov	r0, r3
 8002d6e:	371c      	adds	r7, #28
 8002d70:	46bd      	mov	sp, r7
 8002d72:	bd90      	pop	{r4, r7, pc}

08002d74 <lis2dw12_power_mode_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_power_mode_set(stmdev_ctx_t *ctx,
                                lis2dw12_mode_t val)
{
 8002d74:	b580      	push	{r7, lr}
 8002d76:	b086      	sub	sp, #24
 8002d78:	af00      	add	r7, sp, #0
 8002d7a:	6078      	str	r0, [r7, #4]
 8002d7c:	460b      	mov	r3, r1
 8002d7e:	70fb      	strb	r3, [r7, #3]
  lis2dw12_ctrl1_t ctrl1;
  lis2dw12_ctrl6_t ctrl6;
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL1, (uint8_t *) &ctrl1, 1);
 8002d80:	f107 0210 	add.w	r2, r7, #16
 8002d84:	2301      	movs	r3, #1
 8002d86:	2120      	movs	r1, #32
 8002d88:	6878      	ldr	r0, [r7, #4]
 8002d8a:	f7ff ffc3 	bl	8002d14 <lis2dw12_read_reg>
 8002d8e:	6178      	str	r0, [r7, #20]

  if (ret == 0)
 8002d90:	697b      	ldr	r3, [r7, #20]
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d118      	bne.n	8002dc8 <lis2dw12_power_mode_set+0x54>
  {
    ctrl1.mode = ((uint8_t) val & 0x0CU) >> 2;
 8002d96:	78fb      	ldrb	r3, [r7, #3]
 8002d98:	089b      	lsrs	r3, r3, #2
 8002d9a:	f003 0303 	and.w	r3, r3, #3
 8002d9e:	b2da      	uxtb	r2, r3
 8002da0:	7c3b      	ldrb	r3, [r7, #16]
 8002da2:	f362 0383 	bfi	r3, r2, #2, #2
 8002da6:	743b      	strb	r3, [r7, #16]
    ctrl1.lp_mode = (uint8_t) val & 0x03U ;
 8002da8:	78fb      	ldrb	r3, [r7, #3]
 8002daa:	f003 0303 	and.w	r3, r3, #3
 8002dae:	b2da      	uxtb	r2, r3
 8002db0:	7c3b      	ldrb	r3, [r7, #16]
 8002db2:	f362 0301 	bfi	r3, r2, #0, #2
 8002db6:	743b      	strb	r3, [r7, #16]
    ret = lis2dw12_write_reg(ctx, LIS2DW12_CTRL1, (uint8_t *) &ctrl1, 1);
 8002db8:	f107 0210 	add.w	r2, r7, #16
 8002dbc:	2301      	movs	r3, #1
 8002dbe:	2120      	movs	r1, #32
 8002dc0:	6878      	ldr	r0, [r7, #4]
 8002dc2:	f7ff ffbf 	bl	8002d44 <lis2dw12_write_reg>
 8002dc6:	6178      	str	r0, [r7, #20]
  }

  if (ret == 0)
 8002dc8:	697b      	ldr	r3, [r7, #20]
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d107      	bne.n	8002dde <lis2dw12_power_mode_set+0x6a>
  {
    ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL6, (uint8_t *) &ctrl6, 1);
 8002dce:	f107 020c 	add.w	r2, r7, #12
 8002dd2:	2301      	movs	r3, #1
 8002dd4:	2125      	movs	r1, #37	; 0x25
 8002dd6:	6878      	ldr	r0, [r7, #4]
 8002dd8:	f7ff ff9c 	bl	8002d14 <lis2dw12_read_reg>
 8002ddc:	6178      	str	r0, [r7, #20]
  }

  if (ret == 0)
 8002dde:	697b      	ldr	r3, [r7, #20]
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d110      	bne.n	8002e06 <lis2dw12_power_mode_set+0x92>
  {
    ctrl6.low_noise = ((uint8_t) val & 0x10U) >> 4;
 8002de4:	78fb      	ldrb	r3, [r7, #3]
 8002de6:	091b      	lsrs	r3, r3, #4
 8002de8:	f003 0301 	and.w	r3, r3, #1
 8002dec:	b2da      	uxtb	r2, r3
 8002dee:	7b3b      	ldrb	r3, [r7, #12]
 8002df0:	f362 0382 	bfi	r3, r2, #2, #1
 8002df4:	733b      	strb	r3, [r7, #12]
    ret = lis2dw12_write_reg(ctx, LIS2DW12_CTRL6, (uint8_t *) &ctrl6, 1);
 8002df6:	f107 020c 	add.w	r2, r7, #12
 8002dfa:	2301      	movs	r3, #1
 8002dfc:	2125      	movs	r1, #37	; 0x25
 8002dfe:	6878      	ldr	r0, [r7, #4]
 8002e00:	f7ff ffa0 	bl	8002d44 <lis2dw12_write_reg>
 8002e04:	6178      	str	r0, [r7, #20]
  }

  return ret;
 8002e06:	697b      	ldr	r3, [r7, #20]
}
 8002e08:	4618      	mov	r0, r3
 8002e0a:	3718      	adds	r7, #24
 8002e0c:	46bd      	mov	sp, r7
 8002e0e:	bd80      	pop	{r7, pc}

08002e10 <lis2dw12_power_mode_get>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_power_mode_get(stmdev_ctx_t *ctx,
                                lis2dw12_mode_t *val)
{
 8002e10:	b580      	push	{r7, lr}
 8002e12:	b086      	sub	sp, #24
 8002e14:	af00      	add	r7, sp, #0
 8002e16:	6078      	str	r0, [r7, #4]
 8002e18:	6039      	str	r1, [r7, #0]
  lis2dw12_ctrl1_t ctrl1;
  lis2dw12_ctrl6_t ctrl6;
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL1, (uint8_t *) &ctrl1, 1);
 8002e1a:	f107 0210 	add.w	r2, r7, #16
 8002e1e:	2301      	movs	r3, #1
 8002e20:	2120      	movs	r1, #32
 8002e22:	6878      	ldr	r0, [r7, #4]
 8002e24:	f7ff ff76 	bl	8002d14 <lis2dw12_read_reg>
 8002e28:	6178      	str	r0, [r7, #20]

  if (ret == 0)
 8002e2a:	697b      	ldr	r3, [r7, #20]
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	f040 80a3 	bne.w	8002f78 <lis2dw12_power_mode_get+0x168>
  {
    ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL6, (uint8_t *) &ctrl6, 1);
 8002e32:	f107 020c 	add.w	r2, r7, #12
 8002e36:	2301      	movs	r3, #1
 8002e38:	2125      	movs	r1, #37	; 0x25
 8002e3a:	6878      	ldr	r0, [r7, #4]
 8002e3c:	f7ff ff6a 	bl	8002d14 <lis2dw12_read_reg>
 8002e40:	6178      	str	r0, [r7, #20]

    switch (((ctrl6.low_noise << 4) + (ctrl1.mode << 2) +
 8002e42:	7b3b      	ldrb	r3, [r7, #12]
 8002e44:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8002e48:	b2db      	uxtb	r3, r3
 8002e4a:	011a      	lsls	r2, r3, #4
 8002e4c:	7c3b      	ldrb	r3, [r7, #16]
 8002e4e:	f3c3 0381 	ubfx	r3, r3, #2, #2
 8002e52:	b2db      	uxtb	r3, r3
 8002e54:	009b      	lsls	r3, r3, #2
 8002e56:	4413      	add	r3, r2
             ctrl1.lp_mode))
 8002e58:	7c3a      	ldrb	r2, [r7, #16]
 8002e5a:	f3c2 0201 	ubfx	r2, r2, #0, #2
 8002e5e:	b2d2      	uxtb	r2, r2
    switch (((ctrl6.low_noise << 4) + (ctrl1.mode << 2) +
 8002e60:	4413      	add	r3, r2
 8002e62:	2b1b      	cmp	r3, #27
 8002e64:	f200 8084 	bhi.w	8002f70 <lis2dw12_power_mode_get+0x160>
 8002e68:	a201      	add	r2, pc, #4	; (adr r2, 8002e70 <lis2dw12_power_mode_get+0x60>)
 8002e6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e6e:	bf00      	nop
 8002e70:	08002f01 	.word	0x08002f01
 8002e74:	08002ef9 	.word	0x08002ef9
 8002e78:	08002ef1 	.word	0x08002ef1
 8002e7c:	08002ee9 	.word	0x08002ee9
 8002e80:	08002ee1 	.word	0x08002ee1
 8002e84:	08002f71 	.word	0x08002f71
 8002e88:	08002f71 	.word	0x08002f71
 8002e8c:	08002f71 	.word	0x08002f71
 8002e90:	08002f21 	.word	0x08002f21
 8002e94:	08002f19 	.word	0x08002f19
 8002e98:	08002f11 	.word	0x08002f11
 8002e9c:	08002f09 	.word	0x08002f09
 8002ea0:	08002f71 	.word	0x08002f71
 8002ea4:	08002f71 	.word	0x08002f71
 8002ea8:	08002f71 	.word	0x08002f71
 8002eac:	08002f71 	.word	0x08002f71
 8002eb0:	08002f49 	.word	0x08002f49
 8002eb4:	08002f41 	.word	0x08002f41
 8002eb8:	08002f39 	.word	0x08002f39
 8002ebc:	08002f31 	.word	0x08002f31
 8002ec0:	08002f29 	.word	0x08002f29
 8002ec4:	08002f71 	.word	0x08002f71
 8002ec8:	08002f71 	.word	0x08002f71
 8002ecc:	08002f71 	.word	0x08002f71
 8002ed0:	08002f69 	.word	0x08002f69
 8002ed4:	08002f61 	.word	0x08002f61
 8002ed8:	08002f59 	.word	0x08002f59
 8002edc:	08002f51 	.word	0x08002f51
    {
      case LIS2DW12_HIGH_PERFORMANCE:
        *val = LIS2DW12_HIGH_PERFORMANCE;
 8002ee0:	683b      	ldr	r3, [r7, #0]
 8002ee2:	2204      	movs	r2, #4
 8002ee4:	701a      	strb	r2, [r3, #0]
        break;
 8002ee6:	e048      	b.n	8002f7a <lis2dw12_power_mode_get+0x16a>

      case LIS2DW12_CONT_LOW_PWR_4:
        *val = LIS2DW12_CONT_LOW_PWR_4;
 8002ee8:	683b      	ldr	r3, [r7, #0]
 8002eea:	2203      	movs	r2, #3
 8002eec:	701a      	strb	r2, [r3, #0]
        break;
 8002eee:	e044      	b.n	8002f7a <lis2dw12_power_mode_get+0x16a>

      case LIS2DW12_CONT_LOW_PWR_3:
        *val = LIS2DW12_CONT_LOW_PWR_3;
 8002ef0:	683b      	ldr	r3, [r7, #0]
 8002ef2:	2202      	movs	r2, #2
 8002ef4:	701a      	strb	r2, [r3, #0]
        break;
 8002ef6:	e040      	b.n	8002f7a <lis2dw12_power_mode_get+0x16a>

      case LIS2DW12_CONT_LOW_PWR_2:
        *val = LIS2DW12_CONT_LOW_PWR_2;
 8002ef8:	683b      	ldr	r3, [r7, #0]
 8002efa:	2201      	movs	r2, #1
 8002efc:	701a      	strb	r2, [r3, #0]
        break;
 8002efe:	e03c      	b.n	8002f7a <lis2dw12_power_mode_get+0x16a>

      case LIS2DW12_CONT_LOW_PWR_12bit:
        *val = LIS2DW12_CONT_LOW_PWR_12bit;
 8002f00:	683b      	ldr	r3, [r7, #0]
 8002f02:	2200      	movs	r2, #0
 8002f04:	701a      	strb	r2, [r3, #0]
        break;
 8002f06:	e038      	b.n	8002f7a <lis2dw12_power_mode_get+0x16a>

      case LIS2DW12_SINGLE_LOW_PWR_4:
        *val = LIS2DW12_SINGLE_LOW_PWR_4;
 8002f08:	683b      	ldr	r3, [r7, #0]
 8002f0a:	220b      	movs	r2, #11
 8002f0c:	701a      	strb	r2, [r3, #0]
        break;
 8002f0e:	e034      	b.n	8002f7a <lis2dw12_power_mode_get+0x16a>

      case LIS2DW12_SINGLE_LOW_PWR_3:
        *val = LIS2DW12_SINGLE_LOW_PWR_3;
 8002f10:	683b      	ldr	r3, [r7, #0]
 8002f12:	220a      	movs	r2, #10
 8002f14:	701a      	strb	r2, [r3, #0]
        break;
 8002f16:	e030      	b.n	8002f7a <lis2dw12_power_mode_get+0x16a>

      case LIS2DW12_SINGLE_LOW_PWR_2:
        *val = LIS2DW12_SINGLE_LOW_PWR_2;
 8002f18:	683b      	ldr	r3, [r7, #0]
 8002f1a:	2209      	movs	r2, #9
 8002f1c:	701a      	strb	r2, [r3, #0]
        break;
 8002f1e:	e02c      	b.n	8002f7a <lis2dw12_power_mode_get+0x16a>

      case LIS2DW12_SINGLE_LOW_PWR_12bit:
        *val = LIS2DW12_SINGLE_LOW_PWR_12bit;
 8002f20:	683b      	ldr	r3, [r7, #0]
 8002f22:	2208      	movs	r2, #8
 8002f24:	701a      	strb	r2, [r3, #0]
        break;
 8002f26:	e028      	b.n	8002f7a <lis2dw12_power_mode_get+0x16a>

      case LIS2DW12_HIGH_PERFORMANCE_LOW_NOISE:
        *val = LIS2DW12_HIGH_PERFORMANCE_LOW_NOISE;
 8002f28:	683b      	ldr	r3, [r7, #0]
 8002f2a:	2214      	movs	r2, #20
 8002f2c:	701a      	strb	r2, [r3, #0]
        break;
 8002f2e:	e024      	b.n	8002f7a <lis2dw12_power_mode_get+0x16a>

      case LIS2DW12_CONT_LOW_PWR_LOW_NOISE_4:
        *val = LIS2DW12_CONT_LOW_PWR_LOW_NOISE_4;
 8002f30:	683b      	ldr	r3, [r7, #0]
 8002f32:	2213      	movs	r2, #19
 8002f34:	701a      	strb	r2, [r3, #0]
        break;
 8002f36:	e020      	b.n	8002f7a <lis2dw12_power_mode_get+0x16a>

      case LIS2DW12_CONT_LOW_PWR_LOW_NOISE_3:
        *val = LIS2DW12_CONT_LOW_PWR_LOW_NOISE_3;
 8002f38:	683b      	ldr	r3, [r7, #0]
 8002f3a:	2212      	movs	r2, #18
 8002f3c:	701a      	strb	r2, [r3, #0]
        break;
 8002f3e:	e01c      	b.n	8002f7a <lis2dw12_power_mode_get+0x16a>

      case LIS2DW12_CONT_LOW_PWR_LOW_NOISE_2:
        *val = LIS2DW12_CONT_LOW_PWR_LOW_NOISE_2;
 8002f40:	683b      	ldr	r3, [r7, #0]
 8002f42:	2211      	movs	r2, #17
 8002f44:	701a      	strb	r2, [r3, #0]
        break;
 8002f46:	e018      	b.n	8002f7a <lis2dw12_power_mode_get+0x16a>

      case LIS2DW12_CONT_LOW_PWR_LOW_NOISE_12bit:
        *val = LIS2DW12_CONT_LOW_PWR_LOW_NOISE_12bit;
 8002f48:	683b      	ldr	r3, [r7, #0]
 8002f4a:	2210      	movs	r2, #16
 8002f4c:	701a      	strb	r2, [r3, #0]
        break;
 8002f4e:	e014      	b.n	8002f7a <lis2dw12_power_mode_get+0x16a>

      case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_4:
        *val = LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_4;
 8002f50:	683b      	ldr	r3, [r7, #0]
 8002f52:	221b      	movs	r2, #27
 8002f54:	701a      	strb	r2, [r3, #0]
        break;
 8002f56:	e010      	b.n	8002f7a <lis2dw12_power_mode_get+0x16a>

      case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_3:
        *val = LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_3;
 8002f58:	683b      	ldr	r3, [r7, #0]
 8002f5a:	221a      	movs	r2, #26
 8002f5c:	701a      	strb	r2, [r3, #0]
        break;
 8002f5e:	e00c      	b.n	8002f7a <lis2dw12_power_mode_get+0x16a>

      case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_2:
        *val = LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_2;
 8002f60:	683b      	ldr	r3, [r7, #0]
 8002f62:	2219      	movs	r2, #25
 8002f64:	701a      	strb	r2, [r3, #0]
        break;
 8002f66:	e008      	b.n	8002f7a <lis2dw12_power_mode_get+0x16a>

      case LIS2DW12_SINGLE_LOW_LOW_NOISE_PWR_12bit:
        *val = LIS2DW12_SINGLE_LOW_LOW_NOISE_PWR_12bit;
 8002f68:	683b      	ldr	r3, [r7, #0]
 8002f6a:	2218      	movs	r2, #24
 8002f6c:	701a      	strb	r2, [r3, #0]
        break;
 8002f6e:	e004      	b.n	8002f7a <lis2dw12_power_mode_get+0x16a>

      default:
        *val = LIS2DW12_HIGH_PERFORMANCE;
 8002f70:	683b      	ldr	r3, [r7, #0]
 8002f72:	2204      	movs	r2, #4
 8002f74:	701a      	strb	r2, [r3, #0]
        break;
 8002f76:	e000      	b.n	8002f7a <lis2dw12_power_mode_get+0x16a>
    }
  }
 8002f78:	bf00      	nop

  return ret;
 8002f7a:	697b      	ldr	r3, [r7, #20]
}
 8002f7c:	4618      	mov	r0, r3
 8002f7e:	3718      	adds	r7, #24
 8002f80:	46bd      	mov	sp, r7
 8002f82:	bd80      	pop	{r7, pc}

08002f84 <lis2dw12_data_rate_set>:
  * @param  val      change the values of odr in reg CTRL1
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_data_rate_set(stmdev_ctx_t *ctx, lis2dw12_odr_t val)
{
 8002f84:	b580      	push	{r7, lr}
 8002f86:	b086      	sub	sp, #24
 8002f88:	af00      	add	r7, sp, #0
 8002f8a:	6078      	str	r0, [r7, #4]
 8002f8c:	460b      	mov	r3, r1
 8002f8e:	70fb      	strb	r3, [r7, #3]
  lis2dw12_ctrl1_t ctrl1;
  lis2dw12_ctrl3_t ctrl3;
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL1, (uint8_t *) &ctrl1, 1);
 8002f90:	f107 0210 	add.w	r2, r7, #16
 8002f94:	2301      	movs	r3, #1
 8002f96:	2120      	movs	r1, #32
 8002f98:	6878      	ldr	r0, [r7, #4]
 8002f9a:	f7ff febb 	bl	8002d14 <lis2dw12_read_reg>
 8002f9e:	6178      	str	r0, [r7, #20]

  if (ret == 0)
 8002fa0:	697b      	ldr	r3, [r7, #20]
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d10f      	bne.n	8002fc6 <lis2dw12_data_rate_set+0x42>
  {
    ctrl1.odr = (uint8_t) val;
 8002fa6:	78fb      	ldrb	r3, [r7, #3]
 8002fa8:	f003 030f 	and.w	r3, r3, #15
 8002fac:	b2da      	uxtb	r2, r3
 8002fae:	7c3b      	ldrb	r3, [r7, #16]
 8002fb0:	f362 1307 	bfi	r3, r2, #4, #4
 8002fb4:	743b      	strb	r3, [r7, #16]
    ret = lis2dw12_write_reg(ctx, LIS2DW12_CTRL1, (uint8_t *) &ctrl1, 1);
 8002fb6:	f107 0210 	add.w	r2, r7, #16
 8002fba:	2301      	movs	r3, #1
 8002fbc:	2120      	movs	r1, #32
 8002fbe:	6878      	ldr	r0, [r7, #4]
 8002fc0:	f7ff fec0 	bl	8002d44 <lis2dw12_write_reg>
 8002fc4:	6178      	str	r0, [r7, #20]
  }

  if (ret == 0)
 8002fc6:	697b      	ldr	r3, [r7, #20]
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d107      	bne.n	8002fdc <lis2dw12_data_rate_set+0x58>
  {
    ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL3, (uint8_t *) &ctrl3, 1);
 8002fcc:	f107 020c 	add.w	r2, r7, #12
 8002fd0:	2301      	movs	r3, #1
 8002fd2:	2122      	movs	r1, #34	; 0x22
 8002fd4:	6878      	ldr	r0, [r7, #4]
 8002fd6:	f7ff fe9d 	bl	8002d14 <lis2dw12_read_reg>
 8002fda:	6178      	str	r0, [r7, #20]
  }

  if (ret == 0)
 8002fdc:	697b      	ldr	r3, [r7, #20]
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d110      	bne.n	8003004 <lis2dw12_data_rate_set+0x80>
  {
    ctrl3.slp_mode = ((uint8_t) val & 0x30U) >> 4;
 8002fe2:	78fb      	ldrb	r3, [r7, #3]
 8002fe4:	091b      	lsrs	r3, r3, #4
 8002fe6:	f003 0303 	and.w	r3, r3, #3
 8002fea:	b2da      	uxtb	r2, r3
 8002fec:	7b3b      	ldrb	r3, [r7, #12]
 8002fee:	f362 0301 	bfi	r3, r2, #0, #2
 8002ff2:	733b      	strb	r3, [r7, #12]
    ret = lis2dw12_write_reg(ctx, LIS2DW12_CTRL3, (uint8_t *) &ctrl3, 1);
 8002ff4:	f107 020c 	add.w	r2, r7, #12
 8002ff8:	2301      	movs	r3, #1
 8002ffa:	2122      	movs	r1, #34	; 0x22
 8002ffc:	6878      	ldr	r0, [r7, #4]
 8002ffe:	f7ff fea1 	bl	8002d44 <lis2dw12_write_reg>
 8003002:	6178      	str	r0, [r7, #20]
  }

  return ret;
 8003004:	697b      	ldr	r3, [r7, #20]
}
 8003006:	4618      	mov	r0, r3
 8003008:	3718      	adds	r7, #24
 800300a:	46bd      	mov	sp, r7
 800300c:	bd80      	pop	{r7, pc}
	...

08003010 <lis2dw12_data_rate_get>:
  * @param  val      Get the values of odr in reg CTRL1
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_data_rate_get(stmdev_ctx_t *ctx, lis2dw12_odr_t *val)
{
 8003010:	b580      	push	{r7, lr}
 8003012:	b086      	sub	sp, #24
 8003014:	af00      	add	r7, sp, #0
 8003016:	6078      	str	r0, [r7, #4]
 8003018:	6039      	str	r1, [r7, #0]
  lis2dw12_ctrl1_t ctrl1;
  lis2dw12_ctrl3_t ctrl3;
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL1, (uint8_t *) &ctrl1, 1);
 800301a:	f107 0210 	add.w	r2, r7, #16
 800301e:	2301      	movs	r3, #1
 8003020:	2120      	movs	r1, #32
 8003022:	6878      	ldr	r0, [r7, #4]
 8003024:	f7ff fe76 	bl	8002d14 <lis2dw12_read_reg>
 8003028:	6178      	str	r0, [r7, #20]

  if (ret == 0)
 800302a:	697b      	ldr	r3, [r7, #20]
 800302c:	2b00      	cmp	r3, #0
 800302e:	f040 80b3 	bne.w	8003198 <lis2dw12_data_rate_get+0x188>
  {
    ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL3, (uint8_t *) &ctrl3, 1);
 8003032:	f107 020c 	add.w	r2, r7, #12
 8003036:	2301      	movs	r3, #1
 8003038:	2122      	movs	r1, #34	; 0x22
 800303a:	6878      	ldr	r0, [r7, #4]
 800303c:	f7ff fe6a 	bl	8002d14 <lis2dw12_read_reg>
 8003040:	6178      	str	r0, [r7, #20]

    switch ((ctrl3.slp_mode << 4) + ctrl1.odr)
 8003042:	7b3b      	ldrb	r3, [r7, #12]
 8003044:	f3c3 0301 	ubfx	r3, r3, #0, #2
 8003048:	b2db      	uxtb	r3, r3
 800304a:	011b      	lsls	r3, r3, #4
 800304c:	7c3a      	ldrb	r2, [r7, #16]
 800304e:	f3c2 1203 	ubfx	r2, r2, #4, #4
 8003052:	b2d2      	uxtb	r2, r2
 8003054:	4413      	add	r3, r2
 8003056:	2b32      	cmp	r3, #50	; 0x32
 8003058:	f200 809a 	bhi.w	8003190 <lis2dw12_data_rate_get+0x180>
 800305c:	a201      	add	r2, pc, #4	; (adr r2, 8003064 <lis2dw12_data_rate_get+0x54>)
 800305e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003062:	bf00      	nop
 8003064:	08003131 	.word	0x08003131
 8003068:	08003139 	.word	0x08003139
 800306c:	08003141 	.word	0x08003141
 8003070:	08003149 	.word	0x08003149
 8003074:	08003151 	.word	0x08003151
 8003078:	08003159 	.word	0x08003159
 800307c:	08003161 	.word	0x08003161
 8003080:	08003169 	.word	0x08003169
 8003084:	08003171 	.word	0x08003171
 8003088:	08003179 	.word	0x08003179
 800308c:	08003191 	.word	0x08003191
 8003090:	08003191 	.word	0x08003191
 8003094:	08003191 	.word	0x08003191
 8003098:	08003191 	.word	0x08003191
 800309c:	08003191 	.word	0x08003191
 80030a0:	08003191 	.word	0x08003191
 80030a4:	08003191 	.word	0x08003191
 80030a8:	08003191 	.word	0x08003191
 80030ac:	08003189 	.word	0x08003189
 80030b0:	08003191 	.word	0x08003191
 80030b4:	08003191 	.word	0x08003191
 80030b8:	08003191 	.word	0x08003191
 80030bc:	08003191 	.word	0x08003191
 80030c0:	08003191 	.word	0x08003191
 80030c4:	08003191 	.word	0x08003191
 80030c8:	08003191 	.word	0x08003191
 80030cc:	08003191 	.word	0x08003191
 80030d0:	08003191 	.word	0x08003191
 80030d4:	08003191 	.word	0x08003191
 80030d8:	08003191 	.word	0x08003191
 80030dc:	08003191 	.word	0x08003191
 80030e0:	08003191 	.word	0x08003191
 80030e4:	08003191 	.word	0x08003191
 80030e8:	08003191 	.word	0x08003191
 80030ec:	08003191 	.word	0x08003191
 80030f0:	08003191 	.word	0x08003191
 80030f4:	08003191 	.word	0x08003191
 80030f8:	08003191 	.word	0x08003191
 80030fc:	08003191 	.word	0x08003191
 8003100:	08003191 	.word	0x08003191
 8003104:	08003191 	.word	0x08003191
 8003108:	08003191 	.word	0x08003191
 800310c:	08003191 	.word	0x08003191
 8003110:	08003191 	.word	0x08003191
 8003114:	08003191 	.word	0x08003191
 8003118:	08003191 	.word	0x08003191
 800311c:	08003191 	.word	0x08003191
 8003120:	08003191 	.word	0x08003191
 8003124:	08003191 	.word	0x08003191
 8003128:	08003191 	.word	0x08003191
 800312c:	08003181 	.word	0x08003181
    {
      case LIS2DW12_XL_ODR_OFF:
        *val = LIS2DW12_XL_ODR_OFF;
 8003130:	683b      	ldr	r3, [r7, #0]
 8003132:	2200      	movs	r2, #0
 8003134:	701a      	strb	r2, [r3, #0]
        break;
 8003136:	e030      	b.n	800319a <lis2dw12_data_rate_get+0x18a>

      case LIS2DW12_XL_ODR_1Hz6_LP_ONLY:
        *val = LIS2DW12_XL_ODR_1Hz6_LP_ONLY;
 8003138:	683b      	ldr	r3, [r7, #0]
 800313a:	2201      	movs	r2, #1
 800313c:	701a      	strb	r2, [r3, #0]
        break;
 800313e:	e02c      	b.n	800319a <lis2dw12_data_rate_get+0x18a>

      case LIS2DW12_XL_ODR_12Hz5:
        *val = LIS2DW12_XL_ODR_12Hz5;
 8003140:	683b      	ldr	r3, [r7, #0]
 8003142:	2202      	movs	r2, #2
 8003144:	701a      	strb	r2, [r3, #0]
        break;
 8003146:	e028      	b.n	800319a <lis2dw12_data_rate_get+0x18a>

      case LIS2DW12_XL_ODR_25Hz:
        *val = LIS2DW12_XL_ODR_25Hz;
 8003148:	683b      	ldr	r3, [r7, #0]
 800314a:	2203      	movs	r2, #3
 800314c:	701a      	strb	r2, [r3, #0]
        break;
 800314e:	e024      	b.n	800319a <lis2dw12_data_rate_get+0x18a>

      case LIS2DW12_XL_ODR_50Hz:
        *val = LIS2DW12_XL_ODR_50Hz;
 8003150:	683b      	ldr	r3, [r7, #0]
 8003152:	2204      	movs	r2, #4
 8003154:	701a      	strb	r2, [r3, #0]
        break;
 8003156:	e020      	b.n	800319a <lis2dw12_data_rate_get+0x18a>

      case LIS2DW12_XL_ODR_100Hz:
        *val = LIS2DW12_XL_ODR_100Hz;
 8003158:	683b      	ldr	r3, [r7, #0]
 800315a:	2205      	movs	r2, #5
 800315c:	701a      	strb	r2, [r3, #0]
        break;
 800315e:	e01c      	b.n	800319a <lis2dw12_data_rate_get+0x18a>

      case LIS2DW12_XL_ODR_200Hz:
        *val = LIS2DW12_XL_ODR_200Hz;
 8003160:	683b      	ldr	r3, [r7, #0]
 8003162:	2206      	movs	r2, #6
 8003164:	701a      	strb	r2, [r3, #0]
        break;
 8003166:	e018      	b.n	800319a <lis2dw12_data_rate_get+0x18a>

      case LIS2DW12_XL_ODR_400Hz:
        *val = LIS2DW12_XL_ODR_400Hz;
 8003168:	683b      	ldr	r3, [r7, #0]
 800316a:	2207      	movs	r2, #7
 800316c:	701a      	strb	r2, [r3, #0]
        break;
 800316e:	e014      	b.n	800319a <lis2dw12_data_rate_get+0x18a>

      case LIS2DW12_XL_ODR_800Hz:
        *val = LIS2DW12_XL_ODR_800Hz;
 8003170:	683b      	ldr	r3, [r7, #0]
 8003172:	2208      	movs	r2, #8
 8003174:	701a      	strb	r2, [r3, #0]
        break;
 8003176:	e010      	b.n	800319a <lis2dw12_data_rate_get+0x18a>

      case LIS2DW12_XL_ODR_1k6Hz:
        *val = LIS2DW12_XL_ODR_1k6Hz;
 8003178:	683b      	ldr	r3, [r7, #0]
 800317a:	2209      	movs	r2, #9
 800317c:	701a      	strb	r2, [r3, #0]
        break;
 800317e:	e00c      	b.n	800319a <lis2dw12_data_rate_get+0x18a>

      case LIS2DW12_XL_SET_SW_TRIG:
        *val = LIS2DW12_XL_SET_SW_TRIG;
 8003180:	683b      	ldr	r3, [r7, #0]
 8003182:	2232      	movs	r2, #50	; 0x32
 8003184:	701a      	strb	r2, [r3, #0]
        break;
 8003186:	e008      	b.n	800319a <lis2dw12_data_rate_get+0x18a>

      case LIS2DW12_XL_SET_PIN_TRIG:
        *val = LIS2DW12_XL_SET_PIN_TRIG;
 8003188:	683b      	ldr	r3, [r7, #0]
 800318a:	2212      	movs	r2, #18
 800318c:	701a      	strb	r2, [r3, #0]
        break;
 800318e:	e004      	b.n	800319a <lis2dw12_data_rate_get+0x18a>

      default:
        *val = LIS2DW12_XL_ODR_OFF;
 8003190:	683b      	ldr	r3, [r7, #0]
 8003192:	2200      	movs	r2, #0
 8003194:	701a      	strb	r2, [r3, #0]
        break;
 8003196:	e000      	b.n	800319a <lis2dw12_data_rate_get+0x18a>
    }
  }
 8003198:	bf00      	nop

  return ret;
 800319a:	697b      	ldr	r3, [r7, #20]
}
 800319c:	4618      	mov	r0, r3
 800319e:	3718      	adds	r7, #24
 80031a0:	46bd      	mov	sp, r7
 80031a2:	bd80      	pop	{r7, pc}

080031a4 <lis2dw12_block_data_update_set>:
  * @param  val      change the values of bdu in reg CTRL2
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
 80031a4:	b580      	push	{r7, lr}
 80031a6:	b084      	sub	sp, #16
 80031a8:	af00      	add	r7, sp, #0
 80031aa:	6078      	str	r0, [r7, #4]
 80031ac:	460b      	mov	r3, r1
 80031ae:	70fb      	strb	r3, [r7, #3]
  lis2dw12_ctrl2_t reg;
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL2, (uint8_t *) &reg, 1);
 80031b0:	f107 0208 	add.w	r2, r7, #8
 80031b4:	2301      	movs	r3, #1
 80031b6:	2121      	movs	r1, #33	; 0x21
 80031b8:	6878      	ldr	r0, [r7, #4]
 80031ba:	f7ff fdab 	bl	8002d14 <lis2dw12_read_reg>
 80031be:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d10f      	bne.n	80031e6 <lis2dw12_block_data_update_set+0x42>
  {
    reg.bdu = val;
 80031c6:	78fb      	ldrb	r3, [r7, #3]
 80031c8:	f003 0301 	and.w	r3, r3, #1
 80031cc:	b2da      	uxtb	r2, r3
 80031ce:	7a3b      	ldrb	r3, [r7, #8]
 80031d0:	f362 03c3 	bfi	r3, r2, #3, #1
 80031d4:	723b      	strb	r3, [r7, #8]
    ret = lis2dw12_write_reg(ctx, LIS2DW12_CTRL2, (uint8_t *) &reg, 1);
 80031d6:	f107 0208 	add.w	r2, r7, #8
 80031da:	2301      	movs	r3, #1
 80031dc:	2121      	movs	r1, #33	; 0x21
 80031de:	6878      	ldr	r0, [r7, #4]
 80031e0:	f7ff fdb0 	bl	8002d44 <lis2dw12_write_reg>
 80031e4:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80031e6:	68fb      	ldr	r3, [r7, #12]
}
 80031e8:	4618      	mov	r0, r3
 80031ea:	3710      	adds	r7, #16
 80031ec:	46bd      	mov	sp, r7
 80031ee:	bd80      	pop	{r7, pc}

080031f0 <lis2dw12_full_scale_set>:
  * @param  val      change the values of fs in reg CTRL6
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_full_scale_set(stmdev_ctx_t *ctx, lis2dw12_fs_t val)
{
 80031f0:	b580      	push	{r7, lr}
 80031f2:	b084      	sub	sp, #16
 80031f4:	af00      	add	r7, sp, #0
 80031f6:	6078      	str	r0, [r7, #4]
 80031f8:	460b      	mov	r3, r1
 80031fa:	70fb      	strb	r3, [r7, #3]
  lis2dw12_ctrl6_t reg;
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL6, (uint8_t *) &reg, 1);
 80031fc:	f107 0208 	add.w	r2, r7, #8
 8003200:	2301      	movs	r3, #1
 8003202:	2125      	movs	r1, #37	; 0x25
 8003204:	6878      	ldr	r0, [r7, #4]
 8003206:	f7ff fd85 	bl	8002d14 <lis2dw12_read_reg>
 800320a:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	2b00      	cmp	r3, #0
 8003210:	d10f      	bne.n	8003232 <lis2dw12_full_scale_set+0x42>
  {
    reg.fs = (uint8_t) val;
 8003212:	78fb      	ldrb	r3, [r7, #3]
 8003214:	f003 0303 	and.w	r3, r3, #3
 8003218:	b2da      	uxtb	r2, r3
 800321a:	7a3b      	ldrb	r3, [r7, #8]
 800321c:	f362 1305 	bfi	r3, r2, #4, #2
 8003220:	723b      	strb	r3, [r7, #8]
    ret = lis2dw12_write_reg(ctx, LIS2DW12_CTRL6, (uint8_t *) &reg, 1);
 8003222:	f107 0208 	add.w	r2, r7, #8
 8003226:	2301      	movs	r3, #1
 8003228:	2125      	movs	r1, #37	; 0x25
 800322a:	6878      	ldr	r0, [r7, #4]
 800322c:	f7ff fd8a 	bl	8002d44 <lis2dw12_write_reg>
 8003230:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8003232:	68fb      	ldr	r3, [r7, #12]
}
 8003234:	4618      	mov	r0, r3
 8003236:	3710      	adds	r7, #16
 8003238:	46bd      	mov	sp, r7
 800323a:	bd80      	pop	{r7, pc}

0800323c <lis2dw12_full_scale_get>:
  * @param  val      Get the values of fs in reg CTRL6
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_full_scale_get(stmdev_ctx_t *ctx, lis2dw12_fs_t *val)
{
 800323c:	b580      	push	{r7, lr}
 800323e:	b084      	sub	sp, #16
 8003240:	af00      	add	r7, sp, #0
 8003242:	6078      	str	r0, [r7, #4]
 8003244:	6039      	str	r1, [r7, #0]
  lis2dw12_ctrl6_t reg;
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL6, (uint8_t *) &reg, 1);
 8003246:	f107 0208 	add.w	r2, r7, #8
 800324a:	2301      	movs	r3, #1
 800324c:	2125      	movs	r1, #37	; 0x25
 800324e:	6878      	ldr	r0, [r7, #4]
 8003250:	f7ff fd60 	bl	8002d14 <lis2dw12_read_reg>
 8003254:	60f8      	str	r0, [r7, #12]

  switch (reg.fs)
 8003256:	7a3b      	ldrb	r3, [r7, #8]
 8003258:	f3c3 1301 	ubfx	r3, r3, #4, #2
 800325c:	b2db      	uxtb	r3, r3
 800325e:	2b03      	cmp	r3, #3
 8003260:	d81a      	bhi.n	8003298 <lis2dw12_full_scale_get+0x5c>
 8003262:	a201      	add	r2, pc, #4	; (adr r2, 8003268 <lis2dw12_full_scale_get+0x2c>)
 8003264:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003268:	08003279 	.word	0x08003279
 800326c:	08003281 	.word	0x08003281
 8003270:	08003289 	.word	0x08003289
 8003274:	08003291 	.word	0x08003291
  {
    case LIS2DW12_2g:
      *val = LIS2DW12_2g;
 8003278:	683b      	ldr	r3, [r7, #0]
 800327a:	2200      	movs	r2, #0
 800327c:	701a      	strb	r2, [r3, #0]
      break;
 800327e:	e00f      	b.n	80032a0 <lis2dw12_full_scale_get+0x64>

    case LIS2DW12_4g:
      *val = LIS2DW12_4g;
 8003280:	683b      	ldr	r3, [r7, #0]
 8003282:	2201      	movs	r2, #1
 8003284:	701a      	strb	r2, [r3, #0]
      break;
 8003286:	e00b      	b.n	80032a0 <lis2dw12_full_scale_get+0x64>

    case LIS2DW12_8g:
      *val = LIS2DW12_8g;
 8003288:	683b      	ldr	r3, [r7, #0]
 800328a:	2202      	movs	r2, #2
 800328c:	701a      	strb	r2, [r3, #0]
      break;
 800328e:	e007      	b.n	80032a0 <lis2dw12_full_scale_get+0x64>

    case LIS2DW12_16g:
      *val = LIS2DW12_16g;
 8003290:	683b      	ldr	r3, [r7, #0]
 8003292:	2203      	movs	r2, #3
 8003294:	701a      	strb	r2, [r3, #0]
      break;
 8003296:	e003      	b.n	80032a0 <lis2dw12_full_scale_get+0x64>

    default:
      *val = LIS2DW12_2g;
 8003298:	683b      	ldr	r3, [r7, #0]
 800329a:	2200      	movs	r2, #0
 800329c:	701a      	strb	r2, [r3, #0]
      break;
 800329e:	bf00      	nop
  }

  return ret;
 80032a0:	68fb      	ldr	r3, [r7, #12]
}
 80032a2:	4618      	mov	r0, r3
 80032a4:	3710      	adds	r7, #16
 80032a6:	46bd      	mov	sp, r7
 80032a8:	bd80      	pop	{r7, pc}
 80032aa:	bf00      	nop

080032ac <lis2dw12_acceleration_raw_get>:
  * @param  val      buffer that stores data read
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_acceleration_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 80032ac:	b580      	push	{r7, lr}
 80032ae:	b086      	sub	sp, #24
 80032b0:	af00      	add	r7, sp, #0
 80032b2:	6078      	str	r0, [r7, #4]
 80032b4:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_OUT_X_L, buff, 6);
 80032b6:	f107 020c 	add.w	r2, r7, #12
 80032ba:	2306      	movs	r3, #6
 80032bc:	2128      	movs	r1, #40	; 0x28
 80032be:	6878      	ldr	r0, [r7, #4]
 80032c0:	f7ff fd28 	bl	8002d14 <lis2dw12_read_reg>
 80032c4:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 80032c6:	7b7b      	ldrb	r3, [r7, #13]
 80032c8:	b21a      	sxth	r2, r3
 80032ca:	683b      	ldr	r3, [r7, #0]
 80032cc:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 80032ce:	683b      	ldr	r3, [r7, #0]
 80032d0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80032d4:	b29b      	uxth	r3, r3
 80032d6:	021b      	lsls	r3, r3, #8
 80032d8:	b29a      	uxth	r2, r3
 80032da:	7b3b      	ldrb	r3, [r7, #12]
 80032dc:	b29b      	uxth	r3, r3
 80032de:	4413      	add	r3, r2
 80032e0:	b29b      	uxth	r3, r3
 80032e2:	b21a      	sxth	r2, r3
 80032e4:	683b      	ldr	r3, [r7, #0]
 80032e6:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 80032e8:	7bfa      	ldrb	r2, [r7, #15]
 80032ea:	683b      	ldr	r3, [r7, #0]
 80032ec:	3302      	adds	r3, #2
 80032ee:	b212      	sxth	r2, r2
 80032f0:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 80032f2:	683b      	ldr	r3, [r7, #0]
 80032f4:	3302      	adds	r3, #2
 80032f6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80032fa:	b29b      	uxth	r3, r3
 80032fc:	021b      	lsls	r3, r3, #8
 80032fe:	b29a      	uxth	r2, r3
 8003300:	7bbb      	ldrb	r3, [r7, #14]
 8003302:	b29b      	uxth	r3, r3
 8003304:	4413      	add	r3, r2
 8003306:	b29a      	uxth	r2, r3
 8003308:	683b      	ldr	r3, [r7, #0]
 800330a:	3302      	adds	r3, #2
 800330c:	b212      	sxth	r2, r2
 800330e:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 8003310:	7c7a      	ldrb	r2, [r7, #17]
 8003312:	683b      	ldr	r3, [r7, #0]
 8003314:	3304      	adds	r3, #4
 8003316:	b212      	sxth	r2, r2
 8003318:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 800331a:	683b      	ldr	r3, [r7, #0]
 800331c:	3304      	adds	r3, #4
 800331e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003322:	b29b      	uxth	r3, r3
 8003324:	021b      	lsls	r3, r3, #8
 8003326:	b29a      	uxth	r2, r3
 8003328:	7c3b      	ldrb	r3, [r7, #16]
 800332a:	b29b      	uxth	r3, r3
 800332c:	4413      	add	r3, r2
 800332e:	b29a      	uxth	r2, r3
 8003330:	683b      	ldr	r3, [r7, #0]
 8003332:	3304      	adds	r3, #4
 8003334:	b212      	sxth	r2, r2
 8003336:	801a      	strh	r2, [r3, #0]

  return ret;
 8003338:	697b      	ldr	r3, [r7, #20]
}
 800333a:	4618      	mov	r0, r3
 800333c:	3718      	adds	r7, #24
 800333e:	46bd      	mov	sp, r7
 8003340:	bd80      	pop	{r7, pc}

08003342 <lis2dw12_device_id_get>:
  * @param  buff     buffer that stores data read
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 8003342:	b580      	push	{r7, lr}
 8003344:	b084      	sub	sp, #16
 8003346:	af00      	add	r7, sp, #0
 8003348:	6078      	str	r0, [r7, #4]
 800334a:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_WHO_AM_I, buff, 1);
 800334c:	2301      	movs	r3, #1
 800334e:	683a      	ldr	r2, [r7, #0]
 8003350:	210f      	movs	r1, #15
 8003352:	6878      	ldr	r0, [r7, #4]
 8003354:	f7ff fcde 	bl	8002d14 <lis2dw12_read_reg>
 8003358:	60f8      	str	r0, [r7, #12]

  return ret;
 800335a:	68fb      	ldr	r3, [r7, #12]
}
 800335c:	4618      	mov	r0, r3
 800335e:	3710      	adds	r7, #16
 8003360:	46bd      	mov	sp, r7
 8003362:	bd80      	pop	{r7, pc}

08003364 <lis2dw12_auto_increment_set>:
  * @param  val      change the values of if_add_inc in reg CTRL2
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_auto_increment_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8003364:	b580      	push	{r7, lr}
 8003366:	b084      	sub	sp, #16
 8003368:	af00      	add	r7, sp, #0
 800336a:	6078      	str	r0, [r7, #4]
 800336c:	460b      	mov	r3, r1
 800336e:	70fb      	strb	r3, [r7, #3]
  lis2dw12_ctrl2_t reg;
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL2, (uint8_t *) &reg, 1);
 8003370:	f107 0208 	add.w	r2, r7, #8
 8003374:	2301      	movs	r3, #1
 8003376:	2121      	movs	r1, #33	; 0x21
 8003378:	6878      	ldr	r0, [r7, #4]
 800337a:	f7ff fccb 	bl	8002d14 <lis2dw12_read_reg>
 800337e:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	2b00      	cmp	r3, #0
 8003384:	d10f      	bne.n	80033a6 <lis2dw12_auto_increment_set+0x42>
  {
    reg.if_add_inc = val;
 8003386:	78fb      	ldrb	r3, [r7, #3]
 8003388:	f003 0301 	and.w	r3, r3, #1
 800338c:	b2da      	uxtb	r2, r3
 800338e:	7a3b      	ldrb	r3, [r7, #8]
 8003390:	f362 0382 	bfi	r3, r2, #2, #1
 8003394:	723b      	strb	r3, [r7, #8]
    ret = lis2dw12_write_reg(ctx, LIS2DW12_CTRL2, (uint8_t *) &reg, 1);
 8003396:	f107 0208 	add.w	r2, r7, #8
 800339a:	2301      	movs	r3, #1
 800339c:	2121      	movs	r1, #33	; 0x21
 800339e:	6878      	ldr	r0, [r7, #4]
 80033a0:	f7ff fcd0 	bl	8002d44 <lis2dw12_write_reg>
 80033a4:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80033a6:	68fb      	ldr	r3, [r7, #12]
}
 80033a8:	4618      	mov	r0, r3
 80033aa:	3710      	adds	r7, #16
 80033ac:	46bd      	mov	sp, r7
 80033ae:	bd80      	pop	{r7, pc}

080033b0 <lis2dw12_fifo_mode_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_fifo_mode_set(stmdev_ctx_t *ctx,
                               lis2dw12_fmode_t val)
{
 80033b0:	b580      	push	{r7, lr}
 80033b2:	b084      	sub	sp, #16
 80033b4:	af00      	add	r7, sp, #0
 80033b6:	6078      	str	r0, [r7, #4]
 80033b8:	460b      	mov	r3, r1
 80033ba:	70fb      	strb	r3, [r7, #3]
  lis2dw12_fifo_ctrl_t reg;
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_FIFO_CTRL, (uint8_t *) &reg, 1);
 80033bc:	f107 0208 	add.w	r2, r7, #8
 80033c0:	2301      	movs	r3, #1
 80033c2:	212e      	movs	r1, #46	; 0x2e
 80033c4:	6878      	ldr	r0, [r7, #4]
 80033c6:	f7ff fca5 	bl	8002d14 <lis2dw12_read_reg>
 80033ca:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d10f      	bne.n	80033f2 <lis2dw12_fifo_mode_set+0x42>
  {
    reg.fmode = (uint8_t) val;
 80033d2:	78fb      	ldrb	r3, [r7, #3]
 80033d4:	f003 0307 	and.w	r3, r3, #7
 80033d8:	b2da      	uxtb	r2, r3
 80033da:	7a3b      	ldrb	r3, [r7, #8]
 80033dc:	f362 1347 	bfi	r3, r2, #5, #3
 80033e0:	723b      	strb	r3, [r7, #8]
    ret = lis2dw12_write_reg(ctx, LIS2DW12_FIFO_CTRL, (uint8_t *) &reg, 1);
 80033e2:	f107 0208 	add.w	r2, r7, #8
 80033e6:	2301      	movs	r3, #1
 80033e8:	212e      	movs	r1, #46	; 0x2e
 80033ea:	6878      	ldr	r0, [r7, #4]
 80033ec:	f7ff fcaa 	bl	8002d44 <lis2dw12_write_reg>
 80033f0:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80033f2:	68fb      	ldr	r3, [r7, #12]
}
 80033f4:	4618      	mov	r0, r3
 80033f6:	3710      	adds	r7, #16
 80033f8:	46bd      	mov	sp, r7
 80033fa:	bd80      	pop	{r7, pc}

080033fc <LIS2MDL_RegisterBusIO>:
  * @brief  Register Component Bus IO operations
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_RegisterBusIO(LIS2MDL_Object_t *pObj, LIS2MDL_IO_t *pIO)
{
 80033fc:	b580      	push	{r7, lr}
 80033fe:	b084      	sub	sp, #16
 8003400:	af00      	add	r7, sp, #0
 8003402:	6078      	str	r0, [r7, #4]
 8003404:	6039      	str	r1, [r7, #0]
  int32_t ret = LIS2MDL_OK;
 8003406:	2300      	movs	r3, #0
 8003408:	60fb      	str	r3, [r7, #12]

  if (pObj == NULL)
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	2b00      	cmp	r3, #0
 800340e:	d103      	bne.n	8003418 <LIS2MDL_RegisterBusIO+0x1c>
  {
    ret = LIS2MDL_ERROR;
 8003410:	f04f 33ff 	mov.w	r3, #4294967295
 8003414:	60fb      	str	r3, [r7, #12]
 8003416:	e067      	b.n	80034e8 <LIS2MDL_RegisterBusIO+0xec>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 8003418:	683b      	ldr	r3, [r7, #0]
 800341a:	681a      	ldr	r2, [r3, #0]
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 8003420:	683b      	ldr	r3, [r7, #0]
 8003422:	685a      	ldr	r2, [r3, #4]
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	605a      	str	r2, [r3, #4]
    pObj->IO.BusType   = pIO->BusType;
 8003428:	683b      	ldr	r3, [r7, #0]
 800342a:	689a      	ldr	r2, [r3, #8]
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	609a      	str	r2, [r3, #8]
    pObj->IO.Address   = pIO->Address;
 8003430:	683b      	ldr	r3, [r7, #0]
 8003432:	7b1a      	ldrb	r2, [r3, #12]
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	731a      	strb	r2, [r3, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 8003438:	683b      	ldr	r3, [r7, #0]
 800343a:	691a      	ldr	r2, [r3, #16]
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	611a      	str	r2, [r3, #16]
    pObj->IO.ReadReg   = pIO->ReadReg;
 8003440:	683b      	ldr	r3, [r7, #0]
 8003442:	695a      	ldr	r2, [r3, #20]
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	615a      	str	r2, [r3, #20]
    pObj->IO.GetTick   = pIO->GetTick;
 8003448:	683b      	ldr	r3, [r7, #0]
 800344a:	699a      	ldr	r2, [r3, #24]
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	619a      	str	r2, [r3, #24]

    pObj->Ctx.read_reg  = ReadMagRegWrap;
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	4a28      	ldr	r2, [pc, #160]	; (80034f4 <LIS2MDL_RegisterBusIO+0xf8>)
 8003454:	625a      	str	r2, [r3, #36]	; 0x24
    pObj->Ctx.write_reg = WriteMagRegWrap;
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	4a27      	ldr	r2, [pc, #156]	; (80034f8 <LIS2MDL_RegisterBusIO+0xfc>)
 800345a:	621a      	str	r2, [r3, #32]
    pObj->Ctx.mdelay    = pIO->Delay;
 800345c:	683b      	ldr	r3, [r7, #0]
 800345e:	69da      	ldr	r2, [r3, #28]
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	629a      	str	r2, [r3, #40]	; 0x28
    pObj->Ctx.handle    = pObj;
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	687a      	ldr	r2, [r7, #4]
 8003468:	62da      	str	r2, [r3, #44]	; 0x2c

    if (pObj->IO.Init == NULL)
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	2b00      	cmp	r3, #0
 8003470:	d103      	bne.n	800347a <LIS2MDL_RegisterBusIO+0x7e>
    {
      ret = LIS2MDL_ERROR;
 8003472:	f04f 33ff 	mov.w	r3, #4294967295
 8003476:	60fb      	str	r3, [r7, #12]
 8003478:	e036      	b.n	80034e8 <LIS2MDL_RegisterBusIO+0xec>
    }
    else if (pObj->IO.Init() != LIS2MDL_OK)
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	4798      	blx	r3
 8003480:	4603      	mov	r3, r0
 8003482:	2b00      	cmp	r3, #0
 8003484:	d003      	beq.n	800348e <LIS2MDL_RegisterBusIO+0x92>
    {
      ret = LIS2MDL_ERROR;
 8003486:	f04f 33ff 	mov.w	r3, #4294967295
 800348a:	60fb      	str	r3, [r7, #12]
 800348c:	e02c      	b.n	80034e8 <LIS2MDL_RegisterBusIO+0xec>
    }
    else
    {
      if (pObj->IO.BusType != LIS2MDL_I2C_BUS) /* If the bus type is not I2C */
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	689b      	ldr	r3, [r3, #8]
 8003492:	2b00      	cmp	r3, #0
 8003494:	d028      	beq.n	80034e8 <LIS2MDL_RegisterBusIO+0xec>
      {
        /* Disable I2C interface support and enable eventually SPI 4-Wires only the first time */
        if (pObj->is_initialized == 0U)
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800349c:	2b00      	cmp	r3, #0
 800349e:	d123      	bne.n	80034e8 <LIS2MDL_RegisterBusIO+0xec>
        {
          if (pObj->IO.BusType == LIS2MDL_SPI_4WIRES_BUS) /* SPI 4-Wires */
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	689b      	ldr	r3, [r3, #8]
 80034a4:	2b01      	cmp	r3, #1
 80034a6:	d10d      	bne.n	80034c4 <LIS2MDL_RegisterBusIO+0xc8>
          {
            /* Enable SPI 4-Wires and disable I2C support on the component */
            uint8_t data = 0x34;
 80034a8:	2334      	movs	r3, #52	; 0x34
 80034aa:	72fb      	strb	r3, [r7, #11]

            if (LIS2MDL_Write_Reg(pObj, LIS2MDL_CFG_REG_C, data) != LIS2MDL_OK)
 80034ac:	7afb      	ldrb	r3, [r7, #11]
 80034ae:	461a      	mov	r2, r3
 80034b0:	2162      	movs	r1, #98	; 0x62
 80034b2:	6878      	ldr	r0, [r7, #4]
 80034b4:	f000 fb1b 	bl	8003aee <LIS2MDL_Write_Reg>
 80034b8:	4603      	mov	r3, r0
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d014      	beq.n	80034e8 <LIS2MDL_RegisterBusIO+0xec>
            {
              return LIS2MDL_ERROR;
 80034be:	f04f 33ff 	mov.w	r3, #4294967295
 80034c2:	e012      	b.n	80034ea <LIS2MDL_RegisterBusIO+0xee>
            }
          }
          else if (pObj->IO.BusType == LSM6DSOX_SENSORHUB_LIS2MDL_I2C_BUS) /* LSM6DSOX SensorHub with LIS2MDL example */
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	689b      	ldr	r3, [r3, #8]
 80034c8:	2b03      	cmp	r3, #3
 80034ca:	d101      	bne.n	80034d0 <LIS2MDL_RegisterBusIO+0xd4>
          {
            /* Do nothing, just keep I2C support on the component */
            return ret;
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	e00c      	b.n	80034ea <LIS2MDL_RegisterBusIO+0xee>
          }
          else
          {
            /* Disable I2C interface on the component */
            if (lis2mdl_i2c_interface_set(&(pObj->Ctx), LIS2MDL_I2C_DISABLE) != LIS2MDL_OK)
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	3320      	adds	r3, #32
 80034d4:	2101      	movs	r1, #1
 80034d6:	4618      	mov	r0, r3
 80034d8:	f000 ff70 	bl	80043bc <lis2mdl_i2c_interface_set>
 80034dc:	4603      	mov	r3, r0
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d002      	beq.n	80034e8 <LIS2MDL_RegisterBusIO+0xec>
            {
              return LIS2MDL_ERROR;
 80034e2:	f04f 33ff 	mov.w	r3, #4294967295
 80034e6:	e000      	b.n	80034ea <LIS2MDL_RegisterBusIO+0xee>
        }
      }
    }
  }

  return ret;
 80034e8:	68fb      	ldr	r3, [r7, #12]
}
 80034ea:	4618      	mov	r0, r3
 80034ec:	3710      	adds	r7, #16
 80034ee:	46bd      	mov	sp, r7
 80034f0:	bd80      	pop	{r7, pc}
 80034f2:	bf00      	nop
 80034f4:	08003b45 	.word	0x08003b45
 80034f8:	08003bc7 	.word	0x08003bc7

080034fc <LIS2MDL_Init>:
  * @brief  Initialize the LIS2MDL sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_Init(LIS2MDL_Object_t *pObj)
{
 80034fc:	b580      	push	{r7, lr}
 80034fe:	b084      	sub	sp, #16
 8003500:	af00      	add	r7, sp, #0
 8003502:	6078      	str	r0, [r7, #4]
  lis2mdl_cfg_reg_a_t reg_a;
  lis2mdl_cfg_reg_c_t reg_c;

  if (pObj->IO.BusType == LSM6DSOX_SENSORHUB_LIS2MDL_I2C_BUS) /* LSM6DSOX SensorHub with LIS2MDL example */
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	689b      	ldr	r3, [r3, #8]
 8003508:	2b03      	cmp	r3, #3
 800350a:	d144      	bne.n	8003596 <LIS2MDL_Init+0x9a>
  {
    /* Read configuration from CFG_REG_C & CFG_REG_A regs */
    if (LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData(pObj, LIS2MDL_CFG_REG_C, (uint8_t *)&reg_c, 1) != LIS2MDL_OK)
 800350c:	f107 0208 	add.w	r2, r7, #8
 8003510:	2301      	movs	r3, #1
 8003512:	2162      	movs	r1, #98	; 0x62
 8003514:	6878      	ldr	r0, [r7, #4]
 8003516:	f000 fb97 	bl	8003c48 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData>
 800351a:	4603      	mov	r3, r0
 800351c:	2b00      	cmp	r3, #0
 800351e:	d002      	beq.n	8003526 <LIS2MDL_Init+0x2a>
    {
      return LIS2MDL_ERROR;
 8003520:	f04f 33ff 	mov.w	r3, #4294967295
 8003524:	e06c      	b.n	8003600 <LIS2MDL_Init+0x104>
    }
    if (LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData(pObj, LIS2MDL_CFG_REG_A, (uint8_t *)&reg_a, 1) != LIS2MDL_OK)
 8003526:	f107 020c 	add.w	r2, r7, #12
 800352a:	2301      	movs	r3, #1
 800352c:	2160      	movs	r1, #96	; 0x60
 800352e:	6878      	ldr	r0, [r7, #4]
 8003530:	f000 fb8a 	bl	8003c48 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData>
 8003534:	4603      	mov	r3, r0
 8003536:	2b00      	cmp	r3, #0
 8003538:	d002      	beq.n	8003540 <LIS2MDL_Init+0x44>
    {
      return LIS2MDL_ERROR;
 800353a:	f04f 33ff 	mov.w	r3, #4294967295
 800353e:	e05f      	b.n	8003600 <LIS2MDL_Init+0x104>
    }

    /* Enable BDU */
    reg_c.bdu = PROPERTY_ENABLE;
 8003540:	7a3b      	ldrb	r3, [r7, #8]
 8003542:	f043 0310 	orr.w	r3, r3, #16
 8003546:	723b      	strb	r3, [r7, #8]

    /* Self Test disabled. */
    reg_c.self_test = PROPERTY_DISABLE;
 8003548:	7a3b      	ldrb	r3, [r7, #8]
 800354a:	f36f 0341 	bfc	r3, #1, #1
 800354e:	723b      	strb	r3, [r7, #8]

    /* Operating mode selection - power down */
    reg_a.md = LIS2MDL_POWER_DOWN;
 8003550:	7b3b      	ldrb	r3, [r7, #12]
 8003552:	2202      	movs	r2, #2
 8003554:	f362 0301 	bfi	r3, r2, #0, #2
 8003558:	733b      	strb	r3, [r7, #12]

    /* Output data rate selection */
    reg_a.odr = LIS2MDL_ODR_100Hz;
 800355a:	7b3b      	ldrb	r3, [r7, #12]
 800355c:	f043 030c 	orr.w	r3, r3, #12
 8003560:	733b      	strb	r3, [r7, #12]

    /* Write configuration to CFG_REG_C & CFG_REG_A regs */
    if (LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData(pObj, LIS2MDL_CFG_REG_C, (uint8_t *)&reg_c, 1) != LIS2MDL_OK)
 8003562:	f107 0208 	add.w	r2, r7, #8
 8003566:	2301      	movs	r3, #1
 8003568:	2162      	movs	r1, #98	; 0x62
 800356a:	6878      	ldr	r0, [r7, #4]
 800356c:	f000 fcab 	bl	8003ec6 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData>
 8003570:	4603      	mov	r3, r0
 8003572:	2b00      	cmp	r3, #0
 8003574:	d002      	beq.n	800357c <LIS2MDL_Init+0x80>
    {
      return LIS2MDL_ERROR;
 8003576:	f04f 33ff 	mov.w	r3, #4294967295
 800357a:	e041      	b.n	8003600 <LIS2MDL_Init+0x104>
    }
    if (LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData(pObj, LIS2MDL_CFG_REG_A, (uint8_t *)&reg_a, 1) != LIS2MDL_OK)
 800357c:	f107 020c 	add.w	r2, r7, #12
 8003580:	2301      	movs	r3, #1
 8003582:	2160      	movs	r1, #96	; 0x60
 8003584:	6878      	ldr	r0, [r7, #4]
 8003586:	f000 fc9e 	bl	8003ec6 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData>
 800358a:	4603      	mov	r3, r0
 800358c:	2b00      	cmp	r3, #0
 800358e:	d032      	beq.n	80035f6 <LIS2MDL_Init+0xfa>
    {
      return LIS2MDL_ERROR;
 8003590:	f04f 33ff 	mov.w	r3, #4294967295
 8003594:	e034      	b.n	8003600 <LIS2MDL_Init+0x104>
    }
  }
  else
  {
    /* Enable BDU */
    if (lis2mdl_block_data_update_set(&(pObj->Ctx), PROPERTY_ENABLE) != LIS2MDL_OK)
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	3320      	adds	r3, #32
 800359a:	2101      	movs	r1, #1
 800359c:	4618      	mov	r0, r3
 800359e:	f000 fe65 	bl	800426c <lis2mdl_block_data_update_set>
 80035a2:	4603      	mov	r3, r0
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d002      	beq.n	80035ae <LIS2MDL_Init+0xb2>
    {
      return LIS2MDL_ERROR;
 80035a8:	f04f 33ff 	mov.w	r3, #4294967295
 80035ac:	e028      	b.n	8003600 <LIS2MDL_Init+0x104>
    }

    /* Operating mode selection - power down */
    if (lis2mdl_operating_mode_set(&(pObj->Ctx), LIS2MDL_POWER_DOWN) != LIS2MDL_OK)
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	3320      	adds	r3, #32
 80035b2:	2102      	movs	r1, #2
 80035b4:	4618      	mov	r0, r3
 80035b6:	f000 fdd4 	bl	8004162 <lis2mdl_operating_mode_set>
 80035ba:	4603      	mov	r3, r0
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d002      	beq.n	80035c6 <LIS2MDL_Init+0xca>
    {
      return LIS2MDL_ERROR;
 80035c0:	f04f 33ff 	mov.w	r3, #4294967295
 80035c4:	e01c      	b.n	8003600 <LIS2MDL_Init+0x104>
    }

    /* Output data rate selection */
    if (lis2mdl_data_rate_set(&(pObj->Ctx), LIS2MDL_ODR_100Hz) != LIS2MDL_OK)
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	3320      	adds	r3, #32
 80035ca:	2103      	movs	r1, #3
 80035cc:	4618      	mov	r0, r3
 80035ce:	f000 fdee 	bl	80041ae <lis2mdl_data_rate_set>
 80035d2:	4603      	mov	r3, r0
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d002      	beq.n	80035de <LIS2MDL_Init+0xe2>
    {
      return LIS2MDL_ERROR;
 80035d8:	f04f 33ff 	mov.w	r3, #4294967295
 80035dc:	e010      	b.n	8003600 <LIS2MDL_Init+0x104>
    }

    /* Self Test disabled. */
    if (lis2mdl_self_test_set(&(pObj->Ctx), PROPERTY_DISABLE) != LIS2MDL_OK)
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	3320      	adds	r3, #32
 80035e2:	2100      	movs	r1, #0
 80035e4:	4618      	mov	r0, r3
 80035e6:	f000 fec3 	bl	8004370 <lis2mdl_self_test_set>
 80035ea:	4603      	mov	r3, r0
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d002      	beq.n	80035f6 <LIS2MDL_Init+0xfa>
    {
      return LIS2MDL_ERROR;
 80035f0:	f04f 33ff 	mov.w	r3, #4294967295
 80035f4:	e004      	b.n	8003600 <LIS2MDL_Init+0x104>
    }
  }

  pObj->is_initialized = 1;
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	2201      	movs	r2, #1
 80035fa:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return LIS2MDL_OK;
 80035fe:	2300      	movs	r3, #0
}
 8003600:	4618      	mov	r0, r3
 8003602:	3710      	adds	r7, #16
 8003604:	46bd      	mov	sp, r7
 8003606:	bd80      	pop	{r7, pc}

08003608 <LIS2MDL_DeInit>:
  * @brief  Deinitialize the LIS2MDL magnetometer sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_DeInit(LIS2MDL_Object_t *pObj)
{
 8003608:	b580      	push	{r7, lr}
 800360a:	b082      	sub	sp, #8
 800360c:	af00      	add	r7, sp, #0
 800360e:	6078      	str	r0, [r7, #4]
  /* Disable the component */
  if (LIS2MDL_MAG_Disable(pObj) != LIS2MDL_OK)
 8003610:	6878      	ldr	r0, [r7, #4]
 8003612:	f000 f8a5 	bl	8003760 <LIS2MDL_MAG_Disable>
 8003616:	4603      	mov	r3, r0
 8003618:	2b00      	cmp	r3, #0
 800361a:	d002      	beq.n	8003622 <LIS2MDL_DeInit+0x1a>
  {
    return LIS2MDL_ERROR;
 800361c:	f04f 33ff 	mov.w	r3, #4294967295
 8003620:	e004      	b.n	800362c <LIS2MDL_DeInit+0x24>
  }

  pObj->is_initialized = 0;
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	2200      	movs	r2, #0
 8003626:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return LIS2MDL_OK;
 800362a:	2300      	movs	r3, #0
}
 800362c:	4618      	mov	r0, r3
 800362e:	3708      	adds	r7, #8
 8003630:	46bd      	mov	sp, r7
 8003632:	bd80      	pop	{r7, pc}

08003634 <LIS2MDL_ReadID>:
  * @param  pObj the device pObj
  * @param  Id the WHO_AM_I value
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_ReadID(LIS2MDL_Object_t *pObj, uint8_t *Id)
{
 8003634:	b580      	push	{r7, lr}
 8003636:	b082      	sub	sp, #8
 8003638:	af00      	add	r7, sp, #0
 800363a:	6078      	str	r0, [r7, #4]
 800363c:	6039      	str	r1, [r7, #0]
  if (pObj->IO.BusType == LSM6DSOX_SENSORHUB_LIS2MDL_I2C_BUS) /* LSM6DSOX SensorHub with LIS2MDL example */
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	689b      	ldr	r3, [r3, #8]
 8003642:	2b03      	cmp	r3, #3
 8003644:	d10b      	bne.n	800365e <LIS2MDL_ReadID+0x2a>
  {
    if (LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData(pObj, LIS2MDL_WHO_AM_I, Id, 1) != LIS2MDL_OK)
 8003646:	2301      	movs	r3, #1
 8003648:	683a      	ldr	r2, [r7, #0]
 800364a:	214f      	movs	r1, #79	; 0x4f
 800364c:	6878      	ldr	r0, [r7, #4]
 800364e:	f000 fafb 	bl	8003c48 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData>
 8003652:	4603      	mov	r3, r0
 8003654:	2b00      	cmp	r3, #0
 8003656:	d00e      	beq.n	8003676 <LIS2MDL_ReadID+0x42>
    {
      return LIS2MDL_ERROR;
 8003658:	f04f 33ff 	mov.w	r3, #4294967295
 800365c:	e00c      	b.n	8003678 <LIS2MDL_ReadID+0x44>
    }
  }
  else
  {
    if (lis2mdl_device_id_get(&(pObj->Ctx), Id) != LIS2MDL_OK)
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	3320      	adds	r3, #32
 8003662:	6839      	ldr	r1, [r7, #0]
 8003664:	4618      	mov	r0, r3
 8003666:	f000 fe72 	bl	800434e <lis2mdl_device_id_get>
 800366a:	4603      	mov	r3, r0
 800366c:	2b00      	cmp	r3, #0
 800366e:	d002      	beq.n	8003676 <LIS2MDL_ReadID+0x42>
    {
      return LIS2MDL_ERROR;
 8003670:	f04f 33ff 	mov.w	r3, #4294967295
 8003674:	e000      	b.n	8003678 <LIS2MDL_ReadID+0x44>
    }
  }

  return LIS2MDL_OK;
 8003676:	2300      	movs	r3, #0
}
 8003678:	4618      	mov	r0, r3
 800367a:	3708      	adds	r7, #8
 800367c:	46bd      	mov	sp, r7
 800367e:	bd80      	pop	{r7, pc}

08003680 <LIS2MDL_GetCapabilities>:
  * @param  pObj Component object pointer
  * @param  Capabilities pointer to LIS2MDL magnetometer sensor capabilities
  * @retval Component status
  */
int32_t LIS2MDL_GetCapabilities(LIS2MDL_Object_t *pObj, LIS2MDL_Capabilities_t *Capabilities)
{
 8003680:	b480      	push	{r7}
 8003682:	b083      	sub	sp, #12
 8003684:	af00      	add	r7, sp, #0
 8003686:	6078      	str	r0, [r7, #4]
 8003688:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  Capabilities->Acc          = 0;
 800368a:	683b      	ldr	r3, [r7, #0]
 800368c:	2200      	movs	r2, #0
 800368e:	701a      	strb	r2, [r3, #0]
  Capabilities->Gyro         = 0;
 8003690:	683b      	ldr	r3, [r7, #0]
 8003692:	2200      	movs	r2, #0
 8003694:	705a      	strb	r2, [r3, #1]
  Capabilities->Magneto      = 1;
 8003696:	683b      	ldr	r3, [r7, #0]
 8003698:	2201      	movs	r2, #1
 800369a:	709a      	strb	r2, [r3, #2]
  Capabilities->LowPower     = 0;
 800369c:	683b      	ldr	r3, [r7, #0]
 800369e:	2200      	movs	r2, #0
 80036a0:	70da      	strb	r2, [r3, #3]
  Capabilities->GyroMaxFS    = 0;
 80036a2:	683b      	ldr	r3, [r7, #0]
 80036a4:	2200      	movs	r2, #0
 80036a6:	605a      	str	r2, [r3, #4]
  Capabilities->AccMaxFS     = 0;
 80036a8:	683b      	ldr	r3, [r7, #0]
 80036aa:	2200      	movs	r2, #0
 80036ac:	609a      	str	r2, [r3, #8]
  Capabilities->MagMaxFS     = 50;
 80036ae:	683b      	ldr	r3, [r7, #0]
 80036b0:	2232      	movs	r2, #50	; 0x32
 80036b2:	60da      	str	r2, [r3, #12]
  Capabilities->GyroMaxOdr   = 0.0f;
 80036b4:	683b      	ldr	r3, [r7, #0]
 80036b6:	f04f 0200 	mov.w	r2, #0
 80036ba:	611a      	str	r2, [r3, #16]
  Capabilities->AccMaxOdr    = 0.0f;
 80036bc:	683b      	ldr	r3, [r7, #0]
 80036be:	f04f 0200 	mov.w	r2, #0
 80036c2:	615a      	str	r2, [r3, #20]
  Capabilities->MagMaxOdr    = 100.0f;
 80036c4:	683b      	ldr	r3, [r7, #0]
 80036c6:	4a04      	ldr	r2, [pc, #16]	; (80036d8 <LIS2MDL_GetCapabilities+0x58>)
 80036c8:	619a      	str	r2, [r3, #24]
  return LIS2MDL_OK;
 80036ca:	2300      	movs	r3, #0
}
 80036cc:	4618      	mov	r0, r3
 80036ce:	370c      	adds	r7, #12
 80036d0:	46bd      	mov	sp, r7
 80036d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036d6:	4770      	bx	lr
 80036d8:	42c80000 	.word	0x42c80000

080036dc <LIS2MDL_MAG_Enable>:
  * @brief Enable the LIS2MDL magnetometer sensor
  * @param pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_MAG_Enable(LIS2MDL_Object_t *pObj)
{
 80036dc:	b580      	push	{r7, lr}
 80036de:	b084      	sub	sp, #16
 80036e0:	af00      	add	r7, sp, #0
 80036e2:	6078      	str	r0, [r7, #4]
  lis2mdl_cfg_reg_a_t reg_a;

  /* Check if the component is already enabled */
  if (pObj->mag_is_enabled == 1U)
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80036ea:	2b01      	cmp	r3, #1
 80036ec:	d101      	bne.n	80036f2 <LIS2MDL_MAG_Enable+0x16>
  {
    return LIS2MDL_OK;
 80036ee:	2300      	movs	r3, #0
 80036f0:	e032      	b.n	8003758 <LIS2MDL_MAG_Enable+0x7c>
  }

  if (pObj->IO.BusType == LSM6DSOX_SENSORHUB_LIS2MDL_I2C_BUS) /* LSM6DSOX SensorHub with LIS2MDL example */
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	689b      	ldr	r3, [r3, #8]
 80036f6:	2b03      	cmp	r3, #3
 80036f8:	d11d      	bne.n	8003736 <LIS2MDL_MAG_Enable+0x5a>
  {
    /* Read configuration from CFG_REG_A reg */
    if (LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData(pObj, LIS2MDL_CFG_REG_A, (uint8_t *)&reg_a, 1) != LIS2MDL_OK)
 80036fa:	f107 020c 	add.w	r2, r7, #12
 80036fe:	2301      	movs	r3, #1
 8003700:	2160      	movs	r1, #96	; 0x60
 8003702:	6878      	ldr	r0, [r7, #4]
 8003704:	f000 faa0 	bl	8003c48 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData>
 8003708:	4603      	mov	r3, r0
 800370a:	2b00      	cmp	r3, #0
 800370c:	d002      	beq.n	8003714 <LIS2MDL_MAG_Enable+0x38>
    {
      return LIS2MDL_ERROR;
 800370e:	f04f 33ff 	mov.w	r3, #4294967295
 8003712:	e021      	b.n	8003758 <LIS2MDL_MAG_Enable+0x7c>
    }

    /* Operation mode selection. */
    reg_a.md = LIS2MDL_CONTINUOUS_MODE;
 8003714:	7b3b      	ldrb	r3, [r7, #12]
 8003716:	f36f 0301 	bfc	r3, #0, #2
 800371a:	733b      	strb	r3, [r7, #12]

    /* Write configuration to CFG_REG_A reg */
    if (LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData(pObj, LIS2MDL_CFG_REG_A, (uint8_t *)&reg_a, 1) != LIS2MDL_OK)
 800371c:	f107 020c 	add.w	r2, r7, #12
 8003720:	2301      	movs	r3, #1
 8003722:	2160      	movs	r1, #96	; 0x60
 8003724:	6878      	ldr	r0, [r7, #4]
 8003726:	f000 fbce 	bl	8003ec6 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData>
 800372a:	4603      	mov	r3, r0
 800372c:	2b00      	cmp	r3, #0
 800372e:	d00e      	beq.n	800374e <LIS2MDL_MAG_Enable+0x72>
    {
      return LIS2MDL_ERROR;
 8003730:	f04f 33ff 	mov.w	r3, #4294967295
 8003734:	e010      	b.n	8003758 <LIS2MDL_MAG_Enable+0x7c>
    }
  }
  else
  {
    /* Operation mode selection. */
    if (lis2mdl_operating_mode_set(&(pObj->Ctx), LIS2MDL_CONTINUOUS_MODE) != LIS2MDL_OK)
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	3320      	adds	r3, #32
 800373a:	2100      	movs	r1, #0
 800373c:	4618      	mov	r0, r3
 800373e:	f000 fd10 	bl	8004162 <lis2mdl_operating_mode_set>
 8003742:	4603      	mov	r3, r0
 8003744:	2b00      	cmp	r3, #0
 8003746:	d002      	beq.n	800374e <LIS2MDL_MAG_Enable+0x72>
    {
      return LIS2MDL_ERROR;
 8003748:	f04f 33ff 	mov.w	r3, #4294967295
 800374c:	e004      	b.n	8003758 <LIS2MDL_MAG_Enable+0x7c>
    }
  }

  pObj->mag_is_enabled = 1;
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	2201      	movs	r2, #1
 8003752:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

  return LIS2MDL_OK;
 8003756:	2300      	movs	r3, #0
}
 8003758:	4618      	mov	r0, r3
 800375a:	3710      	adds	r7, #16
 800375c:	46bd      	mov	sp, r7
 800375e:	bd80      	pop	{r7, pc}

08003760 <LIS2MDL_MAG_Disable>:
  * @brief Disable the LIS2MDL magnetometer sensor
  * @param pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_MAG_Disable(LIS2MDL_Object_t *pObj)
{
 8003760:	b580      	push	{r7, lr}
 8003762:	b084      	sub	sp, #16
 8003764:	af00      	add	r7, sp, #0
 8003766:	6078      	str	r0, [r7, #4]
  lis2mdl_cfg_reg_a_t reg_a;

  /* Check if the component is already disabled */
  if (pObj->mag_is_enabled == 0U)
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800376e:	2b00      	cmp	r3, #0
 8003770:	d101      	bne.n	8003776 <LIS2MDL_MAG_Disable+0x16>
  {
    return LIS2MDL_OK;
 8003772:	2300      	movs	r3, #0
 8003774:	e033      	b.n	80037de <LIS2MDL_MAG_Disable+0x7e>
  }

  if (pObj->IO.BusType == LSM6DSOX_SENSORHUB_LIS2MDL_I2C_BUS) /* LSM6DSOX SensorHub with LIS2MDL example */
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	689b      	ldr	r3, [r3, #8]
 800377a:	2b03      	cmp	r3, #3
 800377c:	d11e      	bne.n	80037bc <LIS2MDL_MAG_Disable+0x5c>
  {
    /* Read configuration from CFG_REG_A reg */
    if (LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData(pObj, LIS2MDL_CFG_REG_A, (uint8_t *)&reg_a, 1) != LIS2MDL_OK)
 800377e:	f107 020c 	add.w	r2, r7, #12
 8003782:	2301      	movs	r3, #1
 8003784:	2160      	movs	r1, #96	; 0x60
 8003786:	6878      	ldr	r0, [r7, #4]
 8003788:	f000 fa5e 	bl	8003c48 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData>
 800378c:	4603      	mov	r3, r0
 800378e:	2b00      	cmp	r3, #0
 8003790:	d002      	beq.n	8003798 <LIS2MDL_MAG_Disable+0x38>
    {
      return LIS2MDL_ERROR;
 8003792:	f04f 33ff 	mov.w	r3, #4294967295
 8003796:	e022      	b.n	80037de <LIS2MDL_MAG_Disable+0x7e>
    }

    /* Operation mode selection. */
    reg_a.md = LIS2MDL_POWER_DOWN;
 8003798:	7b3b      	ldrb	r3, [r7, #12]
 800379a:	2202      	movs	r2, #2
 800379c:	f362 0301 	bfi	r3, r2, #0, #2
 80037a0:	733b      	strb	r3, [r7, #12]

    /* Write configuration to CFG_REG_A reg */
    if (LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData(pObj, LIS2MDL_CFG_REG_A, (uint8_t *)&reg_a, 1) != LIS2MDL_OK)
 80037a2:	f107 020c 	add.w	r2, r7, #12
 80037a6:	2301      	movs	r3, #1
 80037a8:	2160      	movs	r1, #96	; 0x60
 80037aa:	6878      	ldr	r0, [r7, #4]
 80037ac:	f000 fb8b 	bl	8003ec6 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData>
 80037b0:	4603      	mov	r3, r0
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d00e      	beq.n	80037d4 <LIS2MDL_MAG_Disable+0x74>
    {
      return LIS2MDL_ERROR;
 80037b6:	f04f 33ff 	mov.w	r3, #4294967295
 80037ba:	e010      	b.n	80037de <LIS2MDL_MAG_Disable+0x7e>
    }
  }
  else
  {
    /* Operation mode selection. */
    if (lis2mdl_operating_mode_set(&(pObj->Ctx), LIS2MDL_POWER_DOWN) != LIS2MDL_OK)
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	3320      	adds	r3, #32
 80037c0:	2102      	movs	r1, #2
 80037c2:	4618      	mov	r0, r3
 80037c4:	f000 fccd 	bl	8004162 <lis2mdl_operating_mode_set>
 80037c8:	4603      	mov	r3, r0
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d002      	beq.n	80037d4 <LIS2MDL_MAG_Disable+0x74>
    {
      return LIS2MDL_ERROR;
 80037ce:	f04f 33ff 	mov.w	r3, #4294967295
 80037d2:	e004      	b.n	80037de <LIS2MDL_MAG_Disable+0x7e>
    }
  }

  pObj->mag_is_enabled = 0;
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	2200      	movs	r2, #0
 80037d8:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

  return LIS2MDL_OK;
 80037dc:	2300      	movs	r3, #0
}
 80037de:	4618      	mov	r0, r3
 80037e0:	3710      	adds	r7, #16
 80037e2:	46bd      	mov	sp, r7
 80037e4:	bd80      	pop	{r7, pc}

080037e6 <LIS2MDL_MAG_GetSensitivity>:
  * @param  pObj the device pObj
  * @param  Sensitivity pointer
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_MAG_GetSensitivity(LIS2MDL_Object_t *pObj, float *Sensitivity)
{
 80037e6:	b480      	push	{r7}
 80037e8:	b083      	sub	sp, #12
 80037ea:	af00      	add	r7, sp, #0
 80037ec:	6078      	str	r0, [r7, #4]
 80037ee:	6039      	str	r1, [r7, #0]
  *Sensitivity = LIS2MDL_MAG_SENSITIVITY_FS_50GAUSS;
 80037f0:	683b      	ldr	r3, [r7, #0]
 80037f2:	f04f 527f 	mov.w	r2, #1069547520	; 0x3fc00000
 80037f6:	601a      	str	r2, [r3, #0]

  return LIS2MDL_OK;
 80037f8:	2300      	movs	r3, #0
}
 80037fa:	4618      	mov	r0, r3
 80037fc:	370c      	adds	r7, #12
 80037fe:	46bd      	mov	sp, r7
 8003800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003804:	4770      	bx	lr
	...

08003808 <LIS2MDL_MAG_GetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr pointer where the output data rate is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_MAG_GetOutputDataRate(LIS2MDL_Object_t *pObj, float *Odr)
{
 8003808:	b580      	push	{r7, lr}
 800380a:	b084      	sub	sp, #16
 800380c:	af00      	add	r7, sp, #0
 800380e:	6078      	str	r0, [r7, #4]
 8003810:	6039      	str	r1, [r7, #0]
  int32_t ret = LIS2MDL_OK;
 8003812:	2300      	movs	r3, #0
 8003814:	60fb      	str	r3, [r7, #12]
  lis2mdl_odr_t odr_low_level;

  /* Get current output data rate. */
  if (lis2mdl_data_rate_get(&(pObj->Ctx), &odr_low_level) != LIS2MDL_OK)
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	3320      	adds	r3, #32
 800381a:	f107 020b 	add.w	r2, r7, #11
 800381e:	4611      	mov	r1, r2
 8003820:	4618      	mov	r0, r3
 8003822:	f000 fceb 	bl	80041fc <lis2mdl_data_rate_get>
 8003826:	4603      	mov	r3, r0
 8003828:	2b00      	cmp	r3, #0
 800382a:	d002      	beq.n	8003832 <LIS2MDL_MAG_GetOutputDataRate+0x2a>
  {
    return LIS2MDL_ERROR;
 800382c:	f04f 33ff 	mov.w	r3, #4294967295
 8003830:	e023      	b.n	800387a <LIS2MDL_MAG_GetOutputDataRate+0x72>
  }

  switch (odr_low_level)
 8003832:	7afb      	ldrb	r3, [r7, #11]
 8003834:	2b03      	cmp	r3, #3
 8003836:	d81b      	bhi.n	8003870 <LIS2MDL_MAG_GetOutputDataRate+0x68>
 8003838:	a201      	add	r2, pc, #4	; (adr r2, 8003840 <LIS2MDL_MAG_GetOutputDataRate+0x38>)
 800383a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800383e:	bf00      	nop
 8003840:	08003851 	.word	0x08003851
 8003844:	08003859 	.word	0x08003859
 8003848:	08003861 	.word	0x08003861
 800384c:	08003869 	.word	0x08003869
  {
    case LIS2MDL_ODR_10Hz:
      *Odr = 10.0f;
 8003850:	683b      	ldr	r3, [r7, #0]
 8003852:	4a0c      	ldr	r2, [pc, #48]	; (8003884 <LIS2MDL_MAG_GetOutputDataRate+0x7c>)
 8003854:	601a      	str	r2, [r3, #0]
      break;
 8003856:	e00f      	b.n	8003878 <LIS2MDL_MAG_GetOutputDataRate+0x70>

    case LIS2MDL_ODR_20Hz:
      *Odr = 20.0f;
 8003858:	683b      	ldr	r3, [r7, #0]
 800385a:	4a0b      	ldr	r2, [pc, #44]	; (8003888 <LIS2MDL_MAG_GetOutputDataRate+0x80>)
 800385c:	601a      	str	r2, [r3, #0]
      break;
 800385e:	e00b      	b.n	8003878 <LIS2MDL_MAG_GetOutputDataRate+0x70>

    case LIS2MDL_ODR_50Hz:
      *Odr = 50.0f;
 8003860:	683b      	ldr	r3, [r7, #0]
 8003862:	4a0a      	ldr	r2, [pc, #40]	; (800388c <LIS2MDL_MAG_GetOutputDataRate+0x84>)
 8003864:	601a      	str	r2, [r3, #0]
      break;
 8003866:	e007      	b.n	8003878 <LIS2MDL_MAG_GetOutputDataRate+0x70>

    case LIS2MDL_ODR_100Hz:
      *Odr = 100.0f;
 8003868:	683b      	ldr	r3, [r7, #0]
 800386a:	4a09      	ldr	r2, [pc, #36]	; (8003890 <LIS2MDL_MAG_GetOutputDataRate+0x88>)
 800386c:	601a      	str	r2, [r3, #0]
      break;
 800386e:	e003      	b.n	8003878 <LIS2MDL_MAG_GetOutputDataRate+0x70>

    default:
      ret = LIS2MDL_ERROR;
 8003870:	f04f 33ff 	mov.w	r3, #4294967295
 8003874:	60fb      	str	r3, [r7, #12]
      break;
 8003876:	bf00      	nop
  }

  return ret;
 8003878:	68fb      	ldr	r3, [r7, #12]
}
 800387a:	4618      	mov	r0, r3
 800387c:	3710      	adds	r7, #16
 800387e:	46bd      	mov	sp, r7
 8003880:	bd80      	pop	{r7, pc}
 8003882:	bf00      	nop
 8003884:	41200000 	.word	0x41200000
 8003888:	41a00000 	.word	0x41a00000
 800388c:	42480000 	.word	0x42480000
 8003890:	42c80000 	.word	0x42c80000

08003894 <LIS2MDL_MAG_SetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_MAG_SetOutputDataRate(LIS2MDL_Object_t *pObj, float Odr)
{
 8003894:	b580      	push	{r7, lr}
 8003896:	b084      	sub	sp, #16
 8003898:	af00      	add	r7, sp, #0
 800389a:	6078      	str	r0, [r7, #4]
 800389c:	ed87 0a00 	vstr	s0, [r7]
  lis2mdl_odr_t new_odr;
  lis2mdl_cfg_reg_a_t reg_a;

  new_odr = (Odr <= 10.000f) ? LIS2MDL_ODR_10Hz
            : (Odr <= 20.000f) ? LIS2MDL_ODR_20Hz
 80038a0:	edd7 7a00 	vldr	s15, [r7]
 80038a4:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80038a8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80038ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80038b0:	d801      	bhi.n	80038b6 <LIS2MDL_MAG_SetOutputDataRate+0x22>
 80038b2:	2300      	movs	r3, #0
 80038b4:	e016      	b.n	80038e4 <LIS2MDL_MAG_SetOutputDataRate+0x50>
 80038b6:	edd7 7a00 	vldr	s15, [r7]
 80038ba:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 80038be:	eef4 7ac7 	vcmpe.f32	s15, s14
 80038c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80038c6:	d801      	bhi.n	80038cc <LIS2MDL_MAG_SetOutputDataRate+0x38>
 80038c8:	2301      	movs	r3, #1
 80038ca:	e00b      	b.n	80038e4 <LIS2MDL_MAG_SetOutputDataRate+0x50>
 80038cc:	edd7 7a00 	vldr	s15, [r7]
 80038d0:	ed9f 7a21 	vldr	s14, [pc, #132]	; 8003958 <LIS2MDL_MAG_SetOutputDataRate+0xc4>
 80038d4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80038d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80038dc:	d801      	bhi.n	80038e2 <LIS2MDL_MAG_SetOutputDataRate+0x4e>
 80038de:	2302      	movs	r3, #2
 80038e0:	e000      	b.n	80038e4 <LIS2MDL_MAG_SetOutputDataRate+0x50>
 80038e2:	2303      	movs	r3, #3
  new_odr = (Odr <= 10.000f) ? LIS2MDL_ODR_10Hz
 80038e4:	73fb      	strb	r3, [r7, #15]
            : (Odr <= 50.000f) ? LIS2MDL_ODR_50Hz
            :                    LIS2MDL_ODR_100Hz;

  if (pObj->IO.BusType == LSM6DSOX_SENSORHUB_LIS2MDL_I2C_BUS) /* LSM6DSOX SensorHub with LIS2MDL example */
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	689b      	ldr	r3, [r3, #8]
 80038ea:	2b03      	cmp	r3, #3
 80038ec:	d121      	bne.n	8003932 <LIS2MDL_MAG_SetOutputDataRate+0x9e>
  {
    /* Read configuration from CFG_REG_A reg */
    if (LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData(pObj, LIS2MDL_CFG_REG_A, (uint8_t *)&reg_a, 1) != LIS2MDL_OK)
 80038ee:	f107 020c 	add.w	r2, r7, #12
 80038f2:	2301      	movs	r3, #1
 80038f4:	2160      	movs	r1, #96	; 0x60
 80038f6:	6878      	ldr	r0, [r7, #4]
 80038f8:	f000 f9a6 	bl	8003c48 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData>
 80038fc:	4603      	mov	r3, r0
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d002      	beq.n	8003908 <LIS2MDL_MAG_SetOutputDataRate+0x74>
    {
      return LIS2MDL_ERROR;
 8003902:	f04f 33ff 	mov.w	r3, #4294967295
 8003906:	e022      	b.n	800394e <LIS2MDL_MAG_SetOutputDataRate+0xba>
    }

    /* Output data rate selection */
    reg_a.odr = new_odr;
 8003908:	7bfb      	ldrb	r3, [r7, #15]
 800390a:	f003 0303 	and.w	r3, r3, #3
 800390e:	b2da      	uxtb	r2, r3
 8003910:	7b3b      	ldrb	r3, [r7, #12]
 8003912:	f362 0383 	bfi	r3, r2, #2, #2
 8003916:	733b      	strb	r3, [r7, #12]

    /* Write configuration to CFG_REG_A reg */
    if (LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData(pObj, LIS2MDL_CFG_REG_A, (uint8_t *)&reg_a, 1) != LIS2MDL_OK)
 8003918:	f107 020c 	add.w	r2, r7, #12
 800391c:	2301      	movs	r3, #1
 800391e:	2160      	movs	r1, #96	; 0x60
 8003920:	6878      	ldr	r0, [r7, #4]
 8003922:	f000 fad0 	bl	8003ec6 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData>
 8003926:	4603      	mov	r3, r0
 8003928:	2b00      	cmp	r3, #0
 800392a:	d00f      	beq.n	800394c <LIS2MDL_MAG_SetOutputDataRate+0xb8>
    {
      return LIS2MDL_ERROR;
 800392c:	f04f 33ff 	mov.w	r3, #4294967295
 8003930:	e00d      	b.n	800394e <LIS2MDL_MAG_SetOutputDataRate+0xba>
    }
  }
  else
  {
    if (lis2mdl_data_rate_set(&(pObj->Ctx), new_odr) != LIS2MDL_OK)
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	3320      	adds	r3, #32
 8003936:	7bfa      	ldrb	r2, [r7, #15]
 8003938:	4611      	mov	r1, r2
 800393a:	4618      	mov	r0, r3
 800393c:	f000 fc37 	bl	80041ae <lis2mdl_data_rate_set>
 8003940:	4603      	mov	r3, r0
 8003942:	2b00      	cmp	r3, #0
 8003944:	d002      	beq.n	800394c <LIS2MDL_MAG_SetOutputDataRate+0xb8>
    {
      return LIS2MDL_ERROR;
 8003946:	f04f 33ff 	mov.w	r3, #4294967295
 800394a:	e000      	b.n	800394e <LIS2MDL_MAG_SetOutputDataRate+0xba>
    }
  }

  return LIS2MDL_OK;
 800394c:	2300      	movs	r3, #0
}
 800394e:	4618      	mov	r0, r3
 8003950:	3710      	adds	r7, #16
 8003952:	46bd      	mov	sp, r7
 8003954:	bd80      	pop	{r7, pc}
 8003956:	bf00      	nop
 8003958:	42480000 	.word	0x42480000

0800395c <LIS2MDL_MAG_GetFullScale>:
  * @param  pObj the device pObj
  * @param  FullScale pointer where the full scale is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_MAG_GetFullScale(LIS2MDL_Object_t *pObj, int32_t *FullScale)
{
 800395c:	b480      	push	{r7}
 800395e:	b083      	sub	sp, #12
 8003960:	af00      	add	r7, sp, #0
 8003962:	6078      	str	r0, [r7, #4]
 8003964:	6039      	str	r1, [r7, #0]
  *FullScale = 50;
 8003966:	683b      	ldr	r3, [r7, #0]
 8003968:	2232      	movs	r2, #50	; 0x32
 800396a:	601a      	str	r2, [r3, #0]

  return LIS2MDL_OK;
 800396c:	2300      	movs	r3, #0
}
 800396e:	4618      	mov	r0, r3
 8003970:	370c      	adds	r7, #12
 8003972:	46bd      	mov	sp, r7
 8003974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003978:	4770      	bx	lr

0800397a <LIS2MDL_MAG_SetFullScale>:
  * @param  pObj the device pObj
  * @param  FullScale the functional full scale to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_MAG_SetFullScale(LIS2MDL_Object_t *pObj, int32_t FullScale)
{
 800397a:	b480      	push	{r7}
 800397c:	b083      	sub	sp, #12
 800397e:	af00      	add	r7, sp, #0
 8003980:	6078      	str	r0, [r7, #4]
 8003982:	6039      	str	r1, [r7, #0]
  return LIS2MDL_OK;
 8003984:	2300      	movs	r3, #0
}
 8003986:	4618      	mov	r0, r3
 8003988:	370c      	adds	r7, #12
 800398a:	46bd      	mov	sp, r7
 800398c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003990:	4770      	bx	lr

08003992 <LIS2MDL_MAG_GetAxesRaw>:
  * @param  pObj the device pObj
  * @param  Value pointer where the raw values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_MAG_GetAxesRaw(LIS2MDL_Object_t *pObj, LIS2MDL_AxesRaw_t *Value)
{
 8003992:	b580      	push	{r7, lr}
 8003994:	b084      	sub	sp, #16
 8003996:	af00      	add	r7, sp, #0
 8003998:	6078      	str	r0, [r7, #4]
 800399a:	6039      	str	r1, [r7, #0]
  lis2mdl_axis3bit16_t data_raw;

  /* Read raw data values. */
  if (lis2mdl_magnetic_raw_get(&(pObj->Ctx), data_raw.i16bit) != LIS2MDL_OK)
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	3320      	adds	r3, #32
 80039a0:	f107 0208 	add.w	r2, r7, #8
 80039a4:	4611      	mov	r1, r2
 80039a6:	4618      	mov	r0, r3
 80039a8:	f000 fc86 	bl	80042b8 <lis2mdl_magnetic_raw_get>
 80039ac:	4603      	mov	r3, r0
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d002      	beq.n	80039b8 <LIS2MDL_MAG_GetAxesRaw+0x26>
  {
    return LIS2MDL_ERROR;
 80039b2:	f04f 33ff 	mov.w	r3, #4294967295
 80039b6:	e00c      	b.n	80039d2 <LIS2MDL_MAG_GetAxesRaw+0x40>
  }

  /* Format the data. */
  Value->x = data_raw.i16bit[0];
 80039b8:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 80039bc:	683b      	ldr	r3, [r7, #0]
 80039be:	801a      	strh	r2, [r3, #0]
  Value->y = data_raw.i16bit[1];
 80039c0:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 80039c4:	683b      	ldr	r3, [r7, #0]
 80039c6:	805a      	strh	r2, [r3, #2]
  Value->z = data_raw.i16bit[2];
 80039c8:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 80039cc:	683b      	ldr	r3, [r7, #0]
 80039ce:	809a      	strh	r2, [r3, #4]

  return LIS2MDL_OK;
 80039d0:	2300      	movs	r3, #0
}
 80039d2:	4618      	mov	r0, r3
 80039d4:	3710      	adds	r7, #16
 80039d6:	46bd      	mov	sp, r7
 80039d8:	bd80      	pop	{r7, pc}

080039da <LIS2MDL_MAG_GetAxes>:
  * @param  pObj the device pObj
  * @param  MagneticField pointer where the values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_MAG_GetAxes(LIS2MDL_Object_t *pObj, LIS2MDL_Axes_t *MagneticField)
{
 80039da:	b580      	push	{r7, lr}
 80039dc:	b088      	sub	sp, #32
 80039de:	af00      	add	r7, sp, #0
 80039e0:	6078      	str	r0, [r7, #4]
 80039e2:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  lis2mdl_axis3bit16_t data_raw;
  float sensitivity;

  if (pObj->IO.BusType == LSM6DSOX_SENSORHUB_LIS2MDL_I2C_BUS) /* LSM6DSOX SensorHub with LIS2MDL example */
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	689b      	ldr	r3, [r3, #8]
 80039e8:	2b03      	cmp	r3, #3
 80039ea:	d137      	bne.n	8003a5c <LIS2MDL_MAG_GetAxes+0x82>
  {
    /* Read raw data values. */
    if (LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData(pObj, LIS2MDL_OUTX_L_REG, buff, 6) != LIS2MDL_OK)
 80039ec:	f107 0218 	add.w	r2, r7, #24
 80039f0:	2306      	movs	r3, #6
 80039f2:	2168      	movs	r1, #104	; 0x68
 80039f4:	6878      	ldr	r0, [r7, #4]
 80039f6:	f000 f927 	bl	8003c48 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData>
 80039fa:	4603      	mov	r3, r0
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d002      	beq.n	8003a06 <LIS2MDL_MAG_GetAxes+0x2c>
    {
      return LIS2MDL_ERROR;
 8003a00:	f04f 33ff 	mov.w	r3, #4294967295
 8003a04:	e06f      	b.n	8003ae6 <LIS2MDL_MAG_GetAxes+0x10c>
    }
    data_raw.i16bit[0] = (int16_t)buff[1];
 8003a06:	7e7b      	ldrb	r3, [r7, #25]
 8003a08:	b21b      	sxth	r3, r3
 8003a0a:	823b      	strh	r3, [r7, #16]
    data_raw.i16bit[0] = (data_raw.i16bit[0] * 256) + (int16_t)buff[0];
 8003a0c:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8003a10:	b29b      	uxth	r3, r3
 8003a12:	021b      	lsls	r3, r3, #8
 8003a14:	b29a      	uxth	r2, r3
 8003a16:	7e3b      	ldrb	r3, [r7, #24]
 8003a18:	b29b      	uxth	r3, r3
 8003a1a:	4413      	add	r3, r2
 8003a1c:	b29b      	uxth	r3, r3
 8003a1e:	b21b      	sxth	r3, r3
 8003a20:	823b      	strh	r3, [r7, #16]
    data_raw.i16bit[1] = (int16_t)buff[3];
 8003a22:	7efb      	ldrb	r3, [r7, #27]
 8003a24:	b21b      	sxth	r3, r3
 8003a26:	827b      	strh	r3, [r7, #18]
    data_raw.i16bit[1] = (data_raw.i16bit[1] * 256) + (int16_t)buff[2];
 8003a28:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8003a2c:	b29b      	uxth	r3, r3
 8003a2e:	021b      	lsls	r3, r3, #8
 8003a30:	b29a      	uxth	r2, r3
 8003a32:	7ebb      	ldrb	r3, [r7, #26]
 8003a34:	b29b      	uxth	r3, r3
 8003a36:	4413      	add	r3, r2
 8003a38:	b29b      	uxth	r3, r3
 8003a3a:	b21b      	sxth	r3, r3
 8003a3c:	827b      	strh	r3, [r7, #18]
    data_raw.i16bit[2] = (int16_t)buff[5];
 8003a3e:	7f7b      	ldrb	r3, [r7, #29]
 8003a40:	b21b      	sxth	r3, r3
 8003a42:	82bb      	strh	r3, [r7, #20]
    data_raw.i16bit[2] = (data_raw.i16bit[2] * 256) + (int16_t)buff[4];
 8003a44:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8003a48:	b29b      	uxth	r3, r3
 8003a4a:	021b      	lsls	r3, r3, #8
 8003a4c:	b29a      	uxth	r2, r3
 8003a4e:	7f3b      	ldrb	r3, [r7, #28]
 8003a50:	b29b      	uxth	r3, r3
 8003a52:	4413      	add	r3, r2
 8003a54:	b29b      	uxth	r3, r3
 8003a56:	b21b      	sxth	r3, r3
 8003a58:	82bb      	strh	r3, [r7, #20]
 8003a5a:	e00d      	b.n	8003a78 <LIS2MDL_MAG_GetAxes+0x9e>
  }
  else
  {
    /* Read raw data values. */
    if (lis2mdl_magnetic_raw_get(&(pObj->Ctx), data_raw.i16bit) != LIS2MDL_OK)
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	3320      	adds	r3, #32
 8003a60:	f107 0210 	add.w	r2, r7, #16
 8003a64:	4611      	mov	r1, r2
 8003a66:	4618      	mov	r0, r3
 8003a68:	f000 fc26 	bl	80042b8 <lis2mdl_magnetic_raw_get>
 8003a6c:	4603      	mov	r3, r0
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d002      	beq.n	8003a78 <LIS2MDL_MAG_GetAxes+0x9e>
    {
      return LIS2MDL_ERROR;
 8003a72:	f04f 33ff 	mov.w	r3, #4294967295
 8003a76:	e036      	b.n	8003ae6 <LIS2MDL_MAG_GetAxes+0x10c>
    }
  }

  /* Get LIS2MDL actual sensitivity. */
  (void)LIS2MDL_MAG_GetSensitivity(pObj, &sensitivity);
 8003a78:	f107 030c 	add.w	r3, r7, #12
 8003a7c:	4619      	mov	r1, r3
 8003a7e:	6878      	ldr	r0, [r7, #4]
 8003a80:	f7ff feb1 	bl	80037e6 <LIS2MDL_MAG_GetSensitivity>

  /* Calculate the data. */
  MagneticField->x = (int32_t)((float)((float)data_raw.i16bit[0] * sensitivity));
 8003a84:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8003a88:	ee07 3a90 	vmov	s15, r3
 8003a8c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003a90:	edd7 7a03 	vldr	s15, [r7, #12]
 8003a94:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003a98:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003a9c:	ee17 2a90 	vmov	r2, s15
 8003aa0:	683b      	ldr	r3, [r7, #0]
 8003aa2:	601a      	str	r2, [r3, #0]
  MagneticField->y = (int32_t)((float)((float)data_raw.i16bit[1] * sensitivity));
 8003aa4:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8003aa8:	ee07 3a90 	vmov	s15, r3
 8003aac:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003ab0:	edd7 7a03 	vldr	s15, [r7, #12]
 8003ab4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003ab8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003abc:	ee17 2a90 	vmov	r2, s15
 8003ac0:	683b      	ldr	r3, [r7, #0]
 8003ac2:	605a      	str	r2, [r3, #4]
  MagneticField->z = (int32_t)((float)((float)data_raw.i16bit[2] * sensitivity));
 8003ac4:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8003ac8:	ee07 3a90 	vmov	s15, r3
 8003acc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003ad0:	edd7 7a03 	vldr	s15, [r7, #12]
 8003ad4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003ad8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003adc:	ee17 2a90 	vmov	r2, s15
 8003ae0:	683b      	ldr	r3, [r7, #0]
 8003ae2:	609a      	str	r2, [r3, #8]

  return LIS2MDL_OK;
 8003ae4:	2300      	movs	r3, #0
}
 8003ae6:	4618      	mov	r0, r3
 8003ae8:	3720      	adds	r7, #32
 8003aea:	46bd      	mov	sp, r7
 8003aec:	bd80      	pop	{r7, pc}

08003aee <LIS2MDL_Write_Reg>:
  * @param  Reg address to be written
  * @param  Data value to be written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_Write_Reg(LIS2MDL_Object_t *pObj, uint8_t Reg, uint8_t Data)
{
 8003aee:	b580      	push	{r7, lr}
 8003af0:	b082      	sub	sp, #8
 8003af2:	af00      	add	r7, sp, #0
 8003af4:	6078      	str	r0, [r7, #4]
 8003af6:	460b      	mov	r3, r1
 8003af8:	70fb      	strb	r3, [r7, #3]
 8003afa:	4613      	mov	r3, r2
 8003afc:	70bb      	strb	r3, [r7, #2]
  if (pObj->IO.BusType == LSM6DSOX_SENSORHUB_LIS2MDL_I2C_BUS) /* LSM6DSOX SensorHub with LIS2MDL example */
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	689b      	ldr	r3, [r3, #8]
 8003b02:	2b03      	cmp	r3, #3
 8003b04:	d10b      	bne.n	8003b1e <LIS2MDL_Write_Reg+0x30>
  {
    if (LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData(pObj, Reg, (uint8_t *)&Data, 1) != LIS2MDL_OK)
 8003b06:	1cba      	adds	r2, r7, #2
 8003b08:	78f9      	ldrb	r1, [r7, #3]
 8003b0a:	2301      	movs	r3, #1
 8003b0c:	6878      	ldr	r0, [r7, #4]
 8003b0e:	f000 f9da 	bl	8003ec6 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData>
 8003b12:	4603      	mov	r3, r0
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d010      	beq.n	8003b3a <LIS2MDL_Write_Reg+0x4c>
    {
      return LIS2MDL_ERROR;
 8003b18:	f04f 33ff 	mov.w	r3, #4294967295
 8003b1c:	e00e      	b.n	8003b3c <LIS2MDL_Write_Reg+0x4e>
    }
  }
  else
  {
    if (lis2mdl_write_reg(&(pObj->Ctx), Reg, &Data, 1) != LIS2MDL_OK)
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	f103 0020 	add.w	r0, r3, #32
 8003b24:	1cba      	adds	r2, r7, #2
 8003b26:	78f9      	ldrb	r1, [r7, #3]
 8003b28:	2301      	movs	r3, #1
 8003b2a:	f000 fb02 	bl	8004132 <lis2mdl_write_reg>
 8003b2e:	4603      	mov	r3, r0
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d002      	beq.n	8003b3a <LIS2MDL_Write_Reg+0x4c>
    {
      return LIS2MDL_ERROR;
 8003b34:	f04f 33ff 	mov.w	r3, #4294967295
 8003b38:	e000      	b.n	8003b3c <LIS2MDL_Write_Reg+0x4e>
    }
  }

  return LIS2MDL_OK;
 8003b3a:	2300      	movs	r3, #0
}
 8003b3c:	4618      	mov	r0, r3
 8003b3e:	3708      	adds	r7, #8
 8003b40:	46bd      	mov	sp, r7
 8003b42:	bd80      	pop	{r7, pc}

08003b44 <ReadMagRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t ReadMagRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8003b44:	b590      	push	{r4, r7, lr}
 8003b46:	b087      	sub	sp, #28
 8003b48:	af00      	add	r7, sp, #0
 8003b4a:	60f8      	str	r0, [r7, #12]
 8003b4c:	607a      	str	r2, [r7, #4]
 8003b4e:	461a      	mov	r2, r3
 8003b50:	460b      	mov	r3, r1
 8003b52:	72fb      	strb	r3, [r7, #11]
 8003b54:	4613      	mov	r3, r2
 8003b56:	813b      	strh	r3, [r7, #8]
  LIS2MDL_Object_t *pObj = (LIS2MDL_Object_t *)Handle;
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	617b      	str	r3, [r7, #20]

  if (pObj->IO.BusType == LIS2MDL_I2C_BUS) /* I2C */
 8003b5c:	697b      	ldr	r3, [r7, #20]
 8003b5e:	689b      	ldr	r3, [r3, #8]
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d10e      	bne.n	8003b82 <ReadMagRegWrap+0x3e>
  {
    /* Enable Multi-byte read */
    return pObj->IO.ReadReg(pObj->IO.Address, (Reg | 0x80U), pData, Length);
 8003b64:	697b      	ldr	r3, [r7, #20]
 8003b66:	695c      	ldr	r4, [r3, #20]
 8003b68:	697b      	ldr	r3, [r7, #20]
 8003b6a:	7b1b      	ldrb	r3, [r3, #12]
 8003b6c:	b298      	uxth	r0, r3
 8003b6e:	7afb      	ldrb	r3, [r7, #11]
 8003b70:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003b74:	b2db      	uxtb	r3, r3
 8003b76:	b299      	uxth	r1, r3
 8003b78:	893b      	ldrh	r3, [r7, #8]
 8003b7a:	687a      	ldr	r2, [r7, #4]
 8003b7c:	47a0      	blx	r4
 8003b7e:	4603      	mov	r3, r0
 8003b80:	e01d      	b.n	8003bbe <ReadMagRegWrap+0x7a>
  }
  else if (pObj->IO.BusType == LSM6DSOX_SENSORHUB_LIS2MDL_I2C_BUS) /* LSM6DSOX SensorHub with LIS2MDL example */
 8003b82:	697b      	ldr	r3, [r7, #20]
 8003b84:	689b      	ldr	r3, [r3, #8]
 8003b86:	2b03      	cmp	r3, #3
 8003b88:	d10b      	bne.n	8003ba2 <ReadMagRegWrap+0x5e>
  {
    return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 8003b8a:	697b      	ldr	r3, [r7, #20]
 8003b8c:	695c      	ldr	r4, [r3, #20]
 8003b8e:	697b      	ldr	r3, [r7, #20]
 8003b90:	7b1b      	ldrb	r3, [r3, #12]
 8003b92:	b298      	uxth	r0, r3
 8003b94:	7afb      	ldrb	r3, [r7, #11]
 8003b96:	b299      	uxth	r1, r3
 8003b98:	893b      	ldrh	r3, [r7, #8]
 8003b9a:	687a      	ldr	r2, [r7, #4]
 8003b9c:	47a0      	blx	r4
 8003b9e:	4603      	mov	r3, r0
 8003ba0:	e00d      	b.n	8003bbe <ReadMagRegWrap+0x7a>
  }
  else   /* SPI 3-Wires or SPI 4-Wires */
  {
    /* Enable Multi-byte read */
    return pObj->IO.ReadReg(pObj->IO.Address, (Reg | 0x40U), pData, Length);
 8003ba2:	697b      	ldr	r3, [r7, #20]
 8003ba4:	695c      	ldr	r4, [r3, #20]
 8003ba6:	697b      	ldr	r3, [r7, #20]
 8003ba8:	7b1b      	ldrb	r3, [r3, #12]
 8003baa:	b298      	uxth	r0, r3
 8003bac:	7afb      	ldrb	r3, [r7, #11]
 8003bae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003bb2:	b2db      	uxtb	r3, r3
 8003bb4:	b299      	uxth	r1, r3
 8003bb6:	893b      	ldrh	r3, [r7, #8]
 8003bb8:	687a      	ldr	r2, [r7, #4]
 8003bba:	47a0      	blx	r4
 8003bbc:	4603      	mov	r3, r0
  }
}
 8003bbe:	4618      	mov	r0, r3
 8003bc0:	371c      	adds	r7, #28
 8003bc2:	46bd      	mov	sp, r7
 8003bc4:	bd90      	pop	{r4, r7, pc}

08003bc6 <WriteMagRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t WriteMagRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8003bc6:	b590      	push	{r4, r7, lr}
 8003bc8:	b087      	sub	sp, #28
 8003bca:	af00      	add	r7, sp, #0
 8003bcc:	60f8      	str	r0, [r7, #12]
 8003bce:	607a      	str	r2, [r7, #4]
 8003bd0:	461a      	mov	r2, r3
 8003bd2:	460b      	mov	r3, r1
 8003bd4:	72fb      	strb	r3, [r7, #11]
 8003bd6:	4613      	mov	r3, r2
 8003bd8:	813b      	strh	r3, [r7, #8]
  LIS2MDL_Object_t *pObj = (LIS2MDL_Object_t *)Handle;
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	617b      	str	r3, [r7, #20]

  if (pObj->IO.BusType == LIS2MDL_I2C_BUS) /* I2C */
 8003bde:	697b      	ldr	r3, [r7, #20]
 8003be0:	689b      	ldr	r3, [r3, #8]
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d10e      	bne.n	8003c04 <WriteMagRegWrap+0x3e>
  {
    /* Enable Multi-byte write */
    return pObj->IO.WriteReg(pObj->IO.Address, (Reg | 0x80U), pData, Length);
 8003be6:	697b      	ldr	r3, [r7, #20]
 8003be8:	691c      	ldr	r4, [r3, #16]
 8003bea:	697b      	ldr	r3, [r7, #20]
 8003bec:	7b1b      	ldrb	r3, [r3, #12]
 8003bee:	b298      	uxth	r0, r3
 8003bf0:	7afb      	ldrb	r3, [r7, #11]
 8003bf2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003bf6:	b2db      	uxtb	r3, r3
 8003bf8:	b299      	uxth	r1, r3
 8003bfa:	893b      	ldrh	r3, [r7, #8]
 8003bfc:	687a      	ldr	r2, [r7, #4]
 8003bfe:	47a0      	blx	r4
 8003c00:	4603      	mov	r3, r0
 8003c02:	e01d      	b.n	8003c40 <WriteMagRegWrap+0x7a>
  }
  else if (pObj->IO.BusType == LSM6DSOX_SENSORHUB_LIS2MDL_I2C_BUS) /* LSM6DSOX SensorHub with LIS2MDL example */
 8003c04:	697b      	ldr	r3, [r7, #20]
 8003c06:	689b      	ldr	r3, [r3, #8]
 8003c08:	2b03      	cmp	r3, #3
 8003c0a:	d10b      	bne.n	8003c24 <WriteMagRegWrap+0x5e>
  {
    return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 8003c0c:	697b      	ldr	r3, [r7, #20]
 8003c0e:	691c      	ldr	r4, [r3, #16]
 8003c10:	697b      	ldr	r3, [r7, #20]
 8003c12:	7b1b      	ldrb	r3, [r3, #12]
 8003c14:	b298      	uxth	r0, r3
 8003c16:	7afb      	ldrb	r3, [r7, #11]
 8003c18:	b299      	uxth	r1, r3
 8003c1a:	893b      	ldrh	r3, [r7, #8]
 8003c1c:	687a      	ldr	r2, [r7, #4]
 8003c1e:	47a0      	blx	r4
 8003c20:	4603      	mov	r3, r0
 8003c22:	e00d      	b.n	8003c40 <WriteMagRegWrap+0x7a>
  }
  else   /* SPI 3-Wires or SPI 4-Wires */
  {
    /* Enable Multi-byte write */
    return pObj->IO.WriteReg(pObj->IO.Address, (Reg | 0x40U), pData, Length);
 8003c24:	697b      	ldr	r3, [r7, #20]
 8003c26:	691c      	ldr	r4, [r3, #16]
 8003c28:	697b      	ldr	r3, [r7, #20]
 8003c2a:	7b1b      	ldrb	r3, [r3, #12]
 8003c2c:	b298      	uxth	r0, r3
 8003c2e:	7afb      	ldrb	r3, [r7, #11]
 8003c30:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003c34:	b2db      	uxtb	r3, r3
 8003c36:	b299      	uxth	r1, r3
 8003c38:	893b      	ldrh	r3, [r7, #8]
 8003c3a:	687a      	ldr	r2, [r7, #4]
 8003c3c:	47a0      	blx	r4
 8003c3e:	4603      	mov	r3, r0
  }
}
 8003c40:	4618      	mov	r0, r3
 8003c42:	371c      	adds	r7, #28
 8003c44:	46bd      	mov	sp, r7
 8003c46:	bd90      	pop	{r4, r7, pc}

08003c48 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData>:
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData(LIS2MDL_Object_t *pObj, uint8_t Reg, uint8_t *pData,
                                                     uint16_t Length)
{
 8003c48:	b580      	push	{r7, lr}
 8003c4a:	b08c      	sub	sp, #48	; 0x30
 8003c4c:	af00      	add	r7, sp, #0
 8003c4e:	60f8      	str	r0, [r7, #12]
 8003c50:	607a      	str	r2, [r7, #4]
 8003c52:	461a      	mov	r2, r3
 8003c54:	460b      	mov	r3, r1
 8003c56:	72fb      	strb	r3, [r7, #11]
 8003c58:	4613      	mov	r3, r2
 8003c5a:	813b      	strh	r3, [r7, #8]
  uint8_t lsm6dsox_func_cfg_access = 0x01U;
 8003c5c:	2301      	movs	r3, #1
 8003c5e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  uint8_t shub_reg_access_en = 0x40U;
 8003c62:	2340      	movs	r3, #64	; 0x40
 8003c64:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
  uint8_t shub_reg_access_dis = 0x00U;
 8003c68:	2300      	movs	r3, #0
 8003c6a:	f887 3020 	strb.w	r3, [r7, #32]
  uint8_t ext_sens_addr_read = LIS2MDL_I2C_ADD | 0x01U;
 8003c6e:	233d      	movs	r3, #61	; 0x3d
 8003c70:	77fb      	strb	r3, [r7, #31]
  uint8_t slv0_add = 0x15U;
 8003c72:	2315      	movs	r3, #21
 8003c74:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
  uint8_t slv0_subadd = 0x16U;
 8003c78:	2316      	movs	r3, #22
 8003c7a:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  uint8_t slave0_config = 0x17U;
 8003c7e:	2317      	movs	r3, #23
 8003c80:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  uint8_t master_config = 0x14U;
 8003c84:	2314      	movs	r3, #20
 8003c86:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
  uint8_t write_once_i2c_en = 0x44U;
 8003c8a:	2344      	movs	r3, #68	; 0x44
 8003c8c:	77bb      	strb	r3, [r7, #30]
  uint8_t sensor_hub_1 = 0x02U;
 8003c8e:	2302      	movs	r3, #2
 8003c90:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  uint8_t status_master_mainpage = 0x39U;
 8003c94:	2339      	movs	r3, #57	; 0x39
 8003c96:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
  uint8_t sens_hub_endop = 0x01U;
 8003c9a:	2301      	movs	r3, #1
 8003c9c:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
  uint8_t lsm6dsox_outx_h_a = 0x29U;
 8003ca0:	2329      	movs	r3, #41	; 0x29
 8003ca2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint8_t lsm6dsox_status_reg = 0x1EU;
 8003ca6:	231e      	movs	r3, #30
 8003ca8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  uint8_t xlda = 0x01U;
 8003cac:	2301      	movs	r3, #1
 8003cae:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  uint8_t len = (uint8_t)Length;
 8003cb2:	893b      	ldrh	r3, [r7, #8]
 8003cb4:	b2db      	uxtb	r3, r3
 8003cb6:	777b      	strb	r3, [r7, #29]
  uint8_t lsm6dsox_ctrl1_xl = 0x10U;
 8003cb8:	2310      	movs	r3, #16
 8003cba:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  uint8_t lsm6dsox_xl_prev_odr;
  uint8_t lsm6dsox_xl_odr_off = 0x00U;
 8003cbe:	2300      	movs	r3, #0
 8003cc0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint8_t lsm6dsox_xl_odr_104hz = 0x40U;
 8003cc4:	2340      	movs	r3, #64	; 0x40
 8003cc6:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  uint8_t data;
  uint8_t data_array[6];

  /* Enable access to sensor hub registers */
  if (lis2mdl_write_reg(&(pObj->Ctx), lsm6dsox_func_cfg_access, &shub_reg_access_en, 1) != LIS2MDL_OK)
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	f103 0020 	add.w	r0, r3, #32
 8003cd0:	f107 0221 	add.w	r2, r7, #33	; 0x21
 8003cd4:	f897 102f 	ldrb.w	r1, [r7, #47]	; 0x2f
 8003cd8:	2301      	movs	r3, #1
 8003cda:	f000 fa2a 	bl	8004132 <lis2mdl_write_reg>
 8003cde:	4603      	mov	r3, r0
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d002      	beq.n	8003cea <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0xa2>
  {
    return LIS2MDL_ERROR;
 8003ce4:	f04f 33ff 	mov.w	r3, #4294967295
 8003ce8:	e0e9      	b.n	8003ebe <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
  }

  /* Configure external device address, Enable read operation (rw_0 = 1) */
  if (lis2mdl_write_reg(&(pObj->Ctx), slv0_add, &ext_sens_addr_read, 1) != LIS2MDL_OK)
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	f103 0020 	add.w	r0, r3, #32
 8003cf0:	f107 021f 	add.w	r2, r7, #31
 8003cf4:	f897 102e 	ldrb.w	r1, [r7, #46]	; 0x2e
 8003cf8:	2301      	movs	r3, #1
 8003cfa:	f000 fa1a 	bl	8004132 <lis2mdl_write_reg>
 8003cfe:	4603      	mov	r3, r0
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d002      	beq.n	8003d0a <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0xc2>
  {
    return LIS2MDL_ERROR;
 8003d04:	f04f 33ff 	mov.w	r3, #4294967295
 8003d08:	e0d9      	b.n	8003ebe <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
  }

  /* Configure address of the LIS2MDL register to be read */
  if (lis2mdl_write_reg(&(pObj->Ctx), slv0_subadd, &Reg, 1) != LIS2MDL_OK)
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	f103 0020 	add.w	r0, r3, #32
 8003d10:	f107 020b 	add.w	r2, r7, #11
 8003d14:	f897 102d 	ldrb.w	r1, [r7, #45]	; 0x2d
 8003d18:	2301      	movs	r3, #1
 8003d1a:	f000 fa0a 	bl	8004132 <lis2mdl_write_reg>
 8003d1e:	4603      	mov	r3, r0
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d002      	beq.n	8003d2a <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0xe2>
  {
    return LIS2MDL_ERROR;
 8003d24:	f04f 33ff 	mov.w	r3, #4294967295
 8003d28:	e0c9      	b.n	8003ebe <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
  }

  /* Read required number of bytes (up to 6), SHUB_ODR = 104 Hz */
  if (lis2mdl_write_reg(&(pObj->Ctx), slave0_config, &len, 1) != LIS2MDL_OK)
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	f103 0020 	add.w	r0, r3, #32
 8003d30:	f107 021d 	add.w	r2, r7, #29
 8003d34:	f897 102c 	ldrb.w	r1, [r7, #44]	; 0x2c
 8003d38:	2301      	movs	r3, #1
 8003d3a:	f000 f9fa 	bl	8004132 <lis2mdl_write_reg>
 8003d3e:	4603      	mov	r3, r0
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d002      	beq.n	8003d4a <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x102>
  {
    return LIS2MDL_ERROR;
 8003d44:	f04f 33ff 	mov.w	r3, #4294967295
 8003d48:	e0b9      	b.n	8003ebe <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
  }

  /* WRITE_ONCE is mandatory for read, I2C master enabled using slave 0, I2C pull-ups disabled */
  if (lis2mdl_write_reg(&(pObj->Ctx), master_config, &write_once_i2c_en, 1) != LIS2MDL_OK)
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	f103 0020 	add.w	r0, r3, #32
 8003d50:	f107 021e 	add.w	r2, r7, #30
 8003d54:	f897 102b 	ldrb.w	r1, [r7, #43]	; 0x2b
 8003d58:	2301      	movs	r3, #1
 8003d5a:	f000 f9ea 	bl	8004132 <lis2mdl_write_reg>
 8003d5e:	4603      	mov	r3, r0
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d002      	beq.n	8003d6a <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x122>
  {
    return LIS2MDL_ERROR;
 8003d64:	f04f 33ff 	mov.w	r3, #4294967295
 8003d68:	e0a9      	b.n	8003ebe <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
  }

  /* Disable access to sensor hub registers */
  if (lis2mdl_write_reg(&(pObj->Ctx), lsm6dsox_func_cfg_access, &shub_reg_access_dis, 1) != LIS2MDL_OK)
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	f103 0020 	add.w	r0, r3, #32
 8003d70:	f107 0220 	add.w	r2, r7, #32
 8003d74:	f897 102f 	ldrb.w	r1, [r7, #47]	; 0x2f
 8003d78:	2301      	movs	r3, #1
 8003d7a:	f000 f9da 	bl	8004132 <lis2mdl_write_reg>
 8003d7e:	4603      	mov	r3, r0
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d002      	beq.n	8003d8a <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x142>
  {
    return LIS2MDL_ERROR;
 8003d84:	f04f 33ff 	mov.w	r3, #4294967295
 8003d88:	e099      	b.n	8003ebe <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
  }

  /* Read LSM6DSOX ODR */
  if (lis2mdl_read_reg(&(pObj->Ctx), lsm6dsox_ctrl1_xl, &lsm6dsox_xl_prev_odr, 1) != LIS2MDL_OK)
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	f103 0020 	add.w	r0, r3, #32
 8003d90:	f107 021c 	add.w	r2, r7, #28
 8003d94:	f897 1024 	ldrb.w	r1, [r7, #36]	; 0x24
 8003d98:	2301      	movs	r3, #1
 8003d9a:	f000 f9b2 	bl	8004102 <lis2mdl_read_reg>
 8003d9e:	4603      	mov	r3, r0
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d002      	beq.n	8003daa <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x162>
  {
    return LIS2MDL_ERROR;
 8003da4:	f04f 33ff 	mov.w	r3, #4294967295
 8003da8:	e089      	b.n	8003ebe <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
  }

  /* Set XL_ODR_104HZ if the accelerometer is disabled */
  if (lsm6dsox_xl_prev_odr == lsm6dsox_xl_odr_off)
 8003daa:	7f3b      	ldrb	r3, [r7, #28]
 8003dac:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8003db0:	429a      	cmp	r2, r3
 8003db2:	d102      	bne.n	8003dba <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x172>
  {
    lsm6dsox_xl_prev_odr = lsm6dsox_xl_odr_104hz;
 8003db4:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8003db8:	773b      	strb	r3, [r7, #28]
  }

  /* Enable accelerometer to trigger Sensor Hub operation */
  if (lis2mdl_write_reg(&(pObj->Ctx), lsm6dsox_ctrl1_xl, &lsm6dsox_xl_prev_odr, 1) != LIS2MDL_OK)
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	f103 0020 	add.w	r0, r3, #32
 8003dc0:	f107 021c 	add.w	r2, r7, #28
 8003dc4:	f897 1024 	ldrb.w	r1, [r7, #36]	; 0x24
 8003dc8:	2301      	movs	r3, #1
 8003dca:	f000 f9b2 	bl	8004132 <lis2mdl_write_reg>
 8003dce:	4603      	mov	r3, r0
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d002      	beq.n	8003dda <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x192>
  {
    return LIS2MDL_ERROR;
 8003dd4:	f04f 33ff 	mov.w	r3, #4294967295
 8003dd8:	e071      	b.n	8003ebe <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
  }

  /* Read ACC data starting from LSM6DSOX OUTX_H_A register to clear accelerometer data-ready XLDA */
  if (lis2mdl_read_reg(&(pObj->Ctx), lsm6dsox_outx_h_a, data_array, 6) != LIS2MDL_OK)
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	f103 0020 	add.w	r0, r3, #32
 8003de0:	f107 0214 	add.w	r2, r7, #20
 8003de4:	f897 1027 	ldrb.w	r1, [r7, #39]	; 0x27
 8003de8:	2306      	movs	r3, #6
 8003dea:	f000 f98a 	bl	8004102 <lis2mdl_read_reg>
 8003dee:	4603      	mov	r3, r0
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d002      	beq.n	8003dfa <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x1b2>
  {
    return LIS2MDL_ERROR;
 8003df4:	f04f 33ff 	mov.w	r3, #4294967295
 8003df8:	e061      	b.n	8003ebe <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
  }

  /* Poll LSM6DSOX LSM6DSOX_STATUS_REG until XLDA = 1 (Wait for sensor hub trigger) */
  do
  {
    if (lis2mdl_read_reg(&(pObj->Ctx), lsm6dsox_status_reg, &data, 1) != LIS2MDL_OK)
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	f103 0020 	add.w	r0, r3, #32
 8003e00:	f107 021b 	add.w	r2, r7, #27
 8003e04:	f897 1026 	ldrb.w	r1, [r7, #38]	; 0x26
 8003e08:	2301      	movs	r3, #1
 8003e0a:	f000 f97a 	bl	8004102 <lis2mdl_read_reg>
 8003e0e:	4603      	mov	r3, r0
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d002      	beq.n	8003e1a <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x1d2>
    {
      return LIS2MDL_ERROR;
 8003e14:	f04f 33ff 	mov.w	r3, #4294967295
 8003e18:	e051      	b.n	8003ebe <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
    }
  } while ((data & xlda) != xlda);
 8003e1a:	7efa      	ldrb	r2, [r7, #27]
 8003e1c:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8003e20:	4013      	ands	r3, r2
 8003e22:	b2db      	uxtb	r3, r3
 8003e24:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
 8003e28:	429a      	cmp	r2, r3
 8003e2a:	d1e6      	bne.n	8003dfa <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x1b2>

  /* Poll LSM6DSOX SensorHub SENS_HUB_ENDOP bit in STATUS_MASTER_MAINPAGE reg until the end of SW write operations */
  do
  {
    if (lis2mdl_read_reg(&(pObj->Ctx), status_master_mainpage, &data, 1) != LIS2MDL_OK)
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	f103 0020 	add.w	r0, r3, #32
 8003e32:	f107 021b 	add.w	r2, r7, #27
 8003e36:	f897 1029 	ldrb.w	r1, [r7, #41]	; 0x29
 8003e3a:	2301      	movs	r3, #1
 8003e3c:	f000 f961 	bl	8004102 <lis2mdl_read_reg>
 8003e40:	4603      	mov	r3, r0
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d002      	beq.n	8003e4c <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x204>
    {
      return LIS2MDL_ERROR;
 8003e46:	f04f 33ff 	mov.w	r3, #4294967295
 8003e4a:	e038      	b.n	8003ebe <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
    }
  } while ((data & sens_hub_endop) != sens_hub_endop);
 8003e4c:	7efa      	ldrb	r2, [r7, #27]
 8003e4e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8003e52:	4013      	ands	r3, r2
 8003e54:	b2db      	uxtb	r3, r3
 8003e56:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8003e5a:	429a      	cmp	r2, r3
 8003e5c:	d1e6      	bne.n	8003e2c <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x1e4>

  /* Enable access to sensor hub registers */
  if (lis2mdl_write_reg(&(pObj->Ctx), lsm6dsox_func_cfg_access, &shub_reg_access_en, 1) != LIS2MDL_OK)
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	f103 0020 	add.w	r0, r3, #32
 8003e64:	f107 0221 	add.w	r2, r7, #33	; 0x21
 8003e68:	f897 102f 	ldrb.w	r1, [r7, #47]	; 0x2f
 8003e6c:	2301      	movs	r3, #1
 8003e6e:	f000 f960 	bl	8004132 <lis2mdl_write_reg>
 8003e72:	4603      	mov	r3, r0
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d002      	beq.n	8003e7e <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x236>
  {
    return LIS2MDL_ERROR;
 8003e78:	f04f 33ff 	mov.w	r3, #4294967295
 8003e7c:	e01f      	b.n	8003ebe <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
  }

  /* Read data from LSM6DSOX SensorHub regs containing values from required LIS2MDL regs */
  if (lis2mdl_read_reg(&(pObj->Ctx), sensor_hub_1, pData, Length) != LIS2MDL_OK)
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	f103 0020 	add.w	r0, r3, #32
 8003e84:	893b      	ldrh	r3, [r7, #8]
 8003e86:	f897 102a 	ldrb.w	r1, [r7, #42]	; 0x2a
 8003e8a:	687a      	ldr	r2, [r7, #4]
 8003e8c:	f000 f939 	bl	8004102 <lis2mdl_read_reg>
 8003e90:	4603      	mov	r3, r0
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d002      	beq.n	8003e9c <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x254>
  {
    return LIS2MDL_ERROR;
 8003e96:	f04f 33ff 	mov.w	r3, #4294967295
 8003e9a:	e010      	b.n	8003ebe <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
  }

  /* Disable access to sensor hub registers */
  if (lis2mdl_write_reg(&(pObj->Ctx), lsm6dsox_func_cfg_access, &shub_reg_access_dis, 1) != LIS2MDL_OK)
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	f103 0020 	add.w	r0, r3, #32
 8003ea2:	f107 0220 	add.w	r2, r7, #32
 8003ea6:	f897 102f 	ldrb.w	r1, [r7, #47]	; 0x2f
 8003eaa:	2301      	movs	r3, #1
 8003eac:	f000 f941 	bl	8004132 <lis2mdl_write_reg>
 8003eb0:	4603      	mov	r3, r0
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d002      	beq.n	8003ebc <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x274>
  {
    return LIS2MDL_ERROR;
 8003eb6:	f04f 33ff 	mov.w	r3, #4294967295
 8003eba:	e000      	b.n	8003ebe <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
  }

  return LIS2MDL_OK;
 8003ebc:	2300      	movs	r3, #0
}
 8003ebe:	4618      	mov	r0, r3
 8003ec0:	3730      	adds	r7, #48	; 0x30
 8003ec2:	46bd      	mov	sp, r7
 8003ec4:	bd80      	pop	{r7, pc}

08003ec6 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData>:
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData(LIS2MDL_Object_t *pObj, uint8_t Reg, uint8_t *pData,
                                                      uint16_t Length)
{
 8003ec6:	b580      	push	{r7, lr}
 8003ec8:	b08c      	sub	sp, #48	; 0x30
 8003eca:	af00      	add	r7, sp, #0
 8003ecc:	60f8      	str	r0, [r7, #12]
 8003ece:	607a      	str	r2, [r7, #4]
 8003ed0:	461a      	mov	r2, r3
 8003ed2:	460b      	mov	r3, r1
 8003ed4:	72fb      	strb	r3, [r7, #11]
 8003ed6:	4613      	mov	r3, r2
 8003ed8:	813b      	strh	r3, [r7, #8]
  uint8_t lsm6dsox_func_cfg_access = 0x01U;
 8003eda:	2301      	movs	r3, #1
 8003edc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  uint8_t shub_reg_access_en = 0x40U;
 8003ee0:	2340      	movs	r3, #64	; 0x40
 8003ee2:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
  uint8_t shub_reg_access_dis = 0x00U;
 8003ee6:	2300      	movs	r3, #0
 8003ee8:	f887 3020 	strb.w	r3, [r7, #32]
  uint8_t ext_sens_addr_write = LIS2MDL_I2C_ADD & 0xFEU;
 8003eec:	233c      	movs	r3, #60	; 0x3c
 8003eee:	77fb      	strb	r3, [r7, #31]
  uint8_t slv0_add = 0x15U;
 8003ef0:	2315      	movs	r3, #21
 8003ef2:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
  uint8_t slv0_subadd = 0x16U;
 8003ef6:	2316      	movs	r3, #22
 8003ef8:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  uint8_t slave0_config = 0x17U;
 8003efc:	2317      	movs	r3, #23
 8003efe:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  uint8_t shub_odr_104 = 0x00U;
 8003f02:	2300      	movs	r3, #0
 8003f04:	77bb      	strb	r3, [r7, #30]
  uint8_t master_config = 0x14U;
 8003f06:	2314      	movs	r3, #20
 8003f08:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
  uint8_t write_once_i2c_en = 0x44U;
 8003f0c:	2344      	movs	r3, #68	; 0x44
 8003f0e:	777b      	strb	r3, [r7, #29]
  uint8_t status_master_mainpage = 0x39U;
 8003f10:	2339      	movs	r3, #57	; 0x39
 8003f12:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  uint8_t wr_once_done = 0x80U;
 8003f16:	2380      	movs	r3, #128	; 0x80
 8003f18:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
  uint8_t lsm6dsox_outx_h_a = 0x29U;
 8003f1c:	2329      	movs	r3, #41	; 0x29
 8003f1e:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
  uint8_t lsm6dsox_status_reg = 0x1EU;
 8003f22:	231e      	movs	r3, #30
 8003f24:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint8_t xlda = 0x01U;
 8003f28:	2301      	movs	r3, #1
 8003f2a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  uint8_t lsm6dsox_ctrl1_xl = 0x10U;
 8003f2e:	2310      	movs	r3, #16
 8003f30:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  uint8_t lsm6dsox_xl_prev_odr;
  uint8_t lsm6dsox_xl_odr_off = 0x00U;
 8003f34:	2300      	movs	r3, #0
 8003f36:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  uint8_t lsm6dsox_xl_odr_104hz = 0x40U;
 8003f3a:	2340      	movs	r3, #64	; 0x40
 8003f3c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint8_t datawrite_slv0 = 0x0EU;
 8003f40:	230e      	movs	r3, #14
 8003f42:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  uint8_t data;
  uint8_t data_array[6];

  /* Enable access to sensor hub registers */
  if (lis2mdl_write_reg(&(pObj->Ctx), lsm6dsox_func_cfg_access, &shub_reg_access_en, 1) != LIS2MDL_OK)
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	f103 0020 	add.w	r0, r3, #32
 8003f4c:	f107 0221 	add.w	r2, r7, #33	; 0x21
 8003f50:	f897 102f 	ldrb.w	r1, [r7, #47]	; 0x2f
 8003f54:	2301      	movs	r3, #1
 8003f56:	f000 f8ec 	bl	8004132 <lis2mdl_write_reg>
 8003f5a:	4603      	mov	r3, r0
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d002      	beq.n	8003f66 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0xa0>
  {
    return LIS2MDL_ERROR;
 8003f60:	f04f 33ff 	mov.w	r3, #4294967295
 8003f64:	e0c9      	b.n	80040fa <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x234>
  }

  /* Configure external device address, Enable write operation (rw_0 = 0) */
  if (lis2mdl_write_reg(&(pObj->Ctx), slv0_add, &ext_sens_addr_write, 1) != LIS2MDL_OK)
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	f103 0020 	add.w	r0, r3, #32
 8003f6c:	f107 021f 	add.w	r2, r7, #31
 8003f70:	f897 102e 	ldrb.w	r1, [r7, #46]	; 0x2e
 8003f74:	2301      	movs	r3, #1
 8003f76:	f000 f8dc 	bl	8004132 <lis2mdl_write_reg>
 8003f7a:	4603      	mov	r3, r0
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d002      	beq.n	8003f86 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0xc0>
  {
    return LIS2MDL_ERROR;
 8003f80:	f04f 33ff 	mov.w	r3, #4294967295
 8003f84:	e0b9      	b.n	80040fa <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x234>
  }

  /* Configure address of the LIS2MDL register to be written to */
  if (lis2mdl_write_reg(&(pObj->Ctx), slv0_subadd, &Reg, 1) != LIS2MDL_OK)
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	f103 0020 	add.w	r0, r3, #32
 8003f8c:	f107 020b 	add.w	r2, r7, #11
 8003f90:	f897 102d 	ldrb.w	r1, [r7, #45]	; 0x2d
 8003f94:	2301      	movs	r3, #1
 8003f96:	f000 f8cc 	bl	8004132 <lis2mdl_write_reg>
 8003f9a:	4603      	mov	r3, r0
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d002      	beq.n	8003fa6 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0xe0>
  {
    return LIS2MDL_ERROR;
 8003fa0:	f04f 33ff 	mov.w	r3, #4294967295
 8003fa4:	e0a9      	b.n	80040fa <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x234>
  }

  /* Set SHUB_ODR = 104 Hz */
  if (lis2mdl_write_reg(&(pObj->Ctx), slave0_config, &shub_odr_104, 1) != LIS2MDL_OK)
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	f103 0020 	add.w	r0, r3, #32
 8003fac:	f107 021e 	add.w	r2, r7, #30
 8003fb0:	f897 102c 	ldrb.w	r1, [r7, #44]	; 0x2c
 8003fb4:	2301      	movs	r3, #1
 8003fb6:	f000 f8bc 	bl	8004132 <lis2mdl_write_reg>
 8003fba:	4603      	mov	r3, r0
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d002      	beq.n	8003fc6 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x100>
  {
    return LIS2MDL_ERROR;
 8003fc0:	f04f 33ff 	mov.w	r3, #4294967295
 8003fc4:	e099      	b.n	80040fa <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x234>
  }

  /* Store data to be written to LIS2MDL in LSM6DSOX SH reg */
  if (lis2mdl_write_reg(&(pObj->Ctx), datawrite_slv0, pData, 1) != LIS2MDL_OK)
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	f103 0020 	add.w	r0, r3, #32
 8003fcc:	f897 1022 	ldrb.w	r1, [r7, #34]	; 0x22
 8003fd0:	2301      	movs	r3, #1
 8003fd2:	687a      	ldr	r2, [r7, #4]
 8003fd4:	f000 f8ad 	bl	8004132 <lis2mdl_write_reg>
 8003fd8:	4603      	mov	r3, r0
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d002      	beq.n	8003fe4 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x11e>
  {
    return LIS2MDL_ERROR;
 8003fde:	f04f 33ff 	mov.w	r3, #4294967295
 8003fe2:	e08a      	b.n	80040fa <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x234>
  }

  /* WRITE_ONCE enabled for single write, I2C master enabled using slave 0, I2C pull-ups disabled */
  if (lis2mdl_write_reg(&(pObj->Ctx), master_config, &write_once_i2c_en, 1) != LIS2MDL_OK)
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	f103 0020 	add.w	r0, r3, #32
 8003fea:	f107 021d 	add.w	r2, r7, #29
 8003fee:	f897 102b 	ldrb.w	r1, [r7, #43]	; 0x2b
 8003ff2:	2301      	movs	r3, #1
 8003ff4:	f000 f89d 	bl	8004132 <lis2mdl_write_reg>
 8003ff8:	4603      	mov	r3, r0
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d002      	beq.n	8004004 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x13e>
  {
    return LIS2MDL_ERROR;
 8003ffe:	f04f 33ff 	mov.w	r3, #4294967295
 8004002:	e07a      	b.n	80040fa <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x234>
  }

  /* Disable access to sensor hub registers */
  if (lis2mdl_write_reg(&(pObj->Ctx), lsm6dsox_func_cfg_access, &shub_reg_access_dis, 1) != LIS2MDL_OK)
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	f103 0020 	add.w	r0, r3, #32
 800400a:	f107 0220 	add.w	r2, r7, #32
 800400e:	f897 102f 	ldrb.w	r1, [r7, #47]	; 0x2f
 8004012:	2301      	movs	r3, #1
 8004014:	f000 f88d 	bl	8004132 <lis2mdl_write_reg>
 8004018:	4603      	mov	r3, r0
 800401a:	2b00      	cmp	r3, #0
 800401c:	d002      	beq.n	8004024 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x15e>
  {
    return LIS2MDL_ERROR;
 800401e:	f04f 33ff 	mov.w	r3, #4294967295
 8004022:	e06a      	b.n	80040fa <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x234>
  }

  /* Read LSM6DSOX ODR */
  if (lis2mdl_read_reg(&(pObj->Ctx), lsm6dsox_ctrl1_xl, &lsm6dsox_xl_prev_odr, 1) != LIS2MDL_OK)
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	f103 0020 	add.w	r0, r3, #32
 800402a:	f107 021c 	add.w	r2, r7, #28
 800402e:	f897 1025 	ldrb.w	r1, [r7, #37]	; 0x25
 8004032:	2301      	movs	r3, #1
 8004034:	f000 f865 	bl	8004102 <lis2mdl_read_reg>
 8004038:	4603      	mov	r3, r0
 800403a:	2b00      	cmp	r3, #0
 800403c:	d002      	beq.n	8004044 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x17e>
  {
    return LIS2MDL_ERROR;
 800403e:	f04f 33ff 	mov.w	r3, #4294967295
 8004042:	e05a      	b.n	80040fa <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x234>
  }

  /* Set XL_ODR_104HZ if the accelerometer is disabled */
  if (lsm6dsox_xl_prev_odr == lsm6dsox_xl_odr_off)
 8004044:	7f3b      	ldrb	r3, [r7, #28]
 8004046:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 800404a:	429a      	cmp	r2, r3
 800404c:	d102      	bne.n	8004054 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x18e>
  {
    lsm6dsox_xl_prev_odr = lsm6dsox_xl_odr_104hz;
 800404e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004052:	773b      	strb	r3, [r7, #28]
  }

  /* Enable accelerometer to trigger Sensor Hub operation */
  if (lis2mdl_write_reg(&(pObj->Ctx), lsm6dsox_ctrl1_xl, &lsm6dsox_xl_prev_odr, 1) != LIS2MDL_OK)
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	f103 0020 	add.w	r0, r3, #32
 800405a:	f107 021c 	add.w	r2, r7, #28
 800405e:	f897 1025 	ldrb.w	r1, [r7, #37]	; 0x25
 8004062:	2301      	movs	r3, #1
 8004064:	f000 f865 	bl	8004132 <lis2mdl_write_reg>
 8004068:	4603      	mov	r3, r0
 800406a:	2b00      	cmp	r3, #0
 800406c:	d002      	beq.n	8004074 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x1ae>
  {
    return LIS2MDL_ERROR;
 800406e:	f04f 33ff 	mov.w	r3, #4294967295
 8004072:	e042      	b.n	80040fa <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x234>
  }

  /* Read ACC data starting from LSM6DSOX OUTX_H_A register to clear accelerometer data-ready XLDA */
  if (lis2mdl_read_reg(&(pObj->Ctx), lsm6dsox_outx_h_a, data_array, 6) != LIS2MDL_OK)
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	f103 0020 	add.w	r0, r3, #32
 800407a:	f107 0214 	add.w	r2, r7, #20
 800407e:	f897 1028 	ldrb.w	r1, [r7, #40]	; 0x28
 8004082:	2306      	movs	r3, #6
 8004084:	f000 f83d 	bl	8004102 <lis2mdl_read_reg>
 8004088:	4603      	mov	r3, r0
 800408a:	2b00      	cmp	r3, #0
 800408c:	d002      	beq.n	8004094 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x1ce>
  {
    return LIS2MDL_ERROR;
 800408e:	f04f 33ff 	mov.w	r3, #4294967295
 8004092:	e032      	b.n	80040fa <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x234>
  }

  /* Poll LSM6DSOX LSM6DSOX_STATUS_REG until XLDA = 1 (Wait for sensor hub trigger) */
  do
  {
    if (lis2mdl_read_reg(&(pObj->Ctx), lsm6dsox_status_reg, &data, 1) != LIS2MDL_OK)
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	f103 0020 	add.w	r0, r3, #32
 800409a:	f107 021b 	add.w	r2, r7, #27
 800409e:	f897 1027 	ldrb.w	r1, [r7, #39]	; 0x27
 80040a2:	2301      	movs	r3, #1
 80040a4:	f000 f82d 	bl	8004102 <lis2mdl_read_reg>
 80040a8:	4603      	mov	r3, r0
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d002      	beq.n	80040b4 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x1ee>
    {
      return LIS2MDL_ERROR;
 80040ae:	f04f 33ff 	mov.w	r3, #4294967295
 80040b2:	e022      	b.n	80040fa <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x234>
    }
  } while ((data & xlda) != xlda);
 80040b4:	7efa      	ldrb	r2, [r7, #27]
 80040b6:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80040ba:	4013      	ands	r3, r2
 80040bc:	b2db      	uxtb	r3, r3
 80040be:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 80040c2:	429a      	cmp	r2, r3
 80040c4:	d1e6      	bne.n	8004094 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x1ce>

  /* Poll LSM6DSOX SensorHub WR_ONCE_DONE bit in STATUS_MASTER_MAINPAGE reg until the end of SW write operations */
  do
  {
    if (lis2mdl_read_reg(&(pObj->Ctx), status_master_mainpage, &data, 1) != LIS2MDL_OK)
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	f103 0020 	add.w	r0, r3, #32
 80040cc:	f107 021b 	add.w	r2, r7, #27
 80040d0:	f897 102a 	ldrb.w	r1, [r7, #42]	; 0x2a
 80040d4:	2301      	movs	r3, #1
 80040d6:	f000 f814 	bl	8004102 <lis2mdl_read_reg>
 80040da:	4603      	mov	r3, r0
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d002      	beq.n	80040e6 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x220>
    {
      return LIS2MDL_ERROR;
 80040e0:	f04f 33ff 	mov.w	r3, #4294967295
 80040e4:	e009      	b.n	80040fa <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x234>
    }
  } while ((data & wr_once_done) != wr_once_done);
 80040e6:	7efa      	ldrb	r2, [r7, #27]
 80040e8:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 80040ec:	4013      	ands	r3, r2
 80040ee:	b2db      	uxtb	r3, r3
 80040f0:	f897 2029 	ldrb.w	r2, [r7, #41]	; 0x29
 80040f4:	429a      	cmp	r2, r3
 80040f6:	d1e6      	bne.n	80040c6 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x200>

  return LIS2MDL_OK;
 80040f8:	2300      	movs	r3, #0
}
 80040fa:	4618      	mov	r0, r3
 80040fc:	3730      	adds	r7, #48	; 0x30
 80040fe:	46bd      	mov	sp, r7
 8004100:	bd80      	pop	{r7, pc}

08004102 <lis2mdl_read_reg>:
  *
  */
int32_t lis2mdl_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                         uint8_t *data,
                         uint16_t len)
{
 8004102:	b590      	push	{r4, r7, lr}
 8004104:	b087      	sub	sp, #28
 8004106:	af00      	add	r7, sp, #0
 8004108:	60f8      	str	r0, [r7, #12]
 800410a:	607a      	str	r2, [r7, #4]
 800410c:	461a      	mov	r2, r3
 800410e:	460b      	mov	r3, r1
 8004110:	72fb      	strb	r3, [r7, #11]
 8004112:	4613      	mov	r3, r2
 8004114:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	685c      	ldr	r4, [r3, #4]
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	68d8      	ldr	r0, [r3, #12]
 800411e:	893b      	ldrh	r3, [r7, #8]
 8004120:	7af9      	ldrb	r1, [r7, #11]
 8004122:	687a      	ldr	r2, [r7, #4]
 8004124:	47a0      	blx	r4
 8004126:	6178      	str	r0, [r7, #20]

  return ret;
 8004128:	697b      	ldr	r3, [r7, #20]
}
 800412a:	4618      	mov	r0, r3
 800412c:	371c      	adds	r7, #28
 800412e:	46bd      	mov	sp, r7
 8004130:	bd90      	pop	{r4, r7, pc}

08004132 <lis2mdl_write_reg>:
  *
  */
int32_t lis2mdl_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                          uint8_t *data,
                          uint16_t len)
{
 8004132:	b590      	push	{r4, r7, lr}
 8004134:	b087      	sub	sp, #28
 8004136:	af00      	add	r7, sp, #0
 8004138:	60f8      	str	r0, [r7, #12]
 800413a:	607a      	str	r2, [r7, #4]
 800413c:	461a      	mov	r2, r3
 800413e:	460b      	mov	r3, r1
 8004140:	72fb      	strb	r3, [r7, #11]
 8004142:	4613      	mov	r3, r2
 8004144:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	681c      	ldr	r4, [r3, #0]
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	68d8      	ldr	r0, [r3, #12]
 800414e:	893b      	ldrh	r3, [r7, #8]
 8004150:	7af9      	ldrb	r1, [r7, #11]
 8004152:	687a      	ldr	r2, [r7, #4]
 8004154:	47a0      	blx	r4
 8004156:	6178      	str	r0, [r7, #20]

  return ret;
 8004158:	697b      	ldr	r3, [r7, #20]
}
 800415a:	4618      	mov	r0, r3
 800415c:	371c      	adds	r7, #28
 800415e:	46bd      	mov	sp, r7
 8004160:	bd90      	pop	{r4, r7, pc}

08004162 <lis2mdl_operating_mode_set>:
  * @retval        interface status.(MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2mdl_operating_mode_set(stmdev_ctx_t *ctx,
                                   lis2mdl_md_t val)
{
 8004162:	b580      	push	{r7, lr}
 8004164:	b084      	sub	sp, #16
 8004166:	af00      	add	r7, sp, #0
 8004168:	6078      	str	r0, [r7, #4]
 800416a:	460b      	mov	r3, r1
 800416c:	70fb      	strb	r3, [r7, #3]
  lis2mdl_cfg_reg_a_t reg;
  int32_t ret;

  ret = lis2mdl_read_reg(ctx, LIS2MDL_CFG_REG_A, (uint8_t *)&reg, 1);
 800416e:	f107 0208 	add.w	r2, r7, #8
 8004172:	2301      	movs	r3, #1
 8004174:	2160      	movs	r1, #96	; 0x60
 8004176:	6878      	ldr	r0, [r7, #4]
 8004178:	f7ff ffc3 	bl	8004102 <lis2mdl_read_reg>
 800417c:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	2b00      	cmp	r3, #0
 8004182:	d10f      	bne.n	80041a4 <lis2mdl_operating_mode_set+0x42>
  {
    reg.md = (uint8_t)val;
 8004184:	78fb      	ldrb	r3, [r7, #3]
 8004186:	f003 0303 	and.w	r3, r3, #3
 800418a:	b2da      	uxtb	r2, r3
 800418c:	7a3b      	ldrb	r3, [r7, #8]
 800418e:	f362 0301 	bfi	r3, r2, #0, #2
 8004192:	723b      	strb	r3, [r7, #8]
    ret = lis2mdl_write_reg(ctx, LIS2MDL_CFG_REG_A, (uint8_t *)&reg, 1);
 8004194:	f107 0208 	add.w	r2, r7, #8
 8004198:	2301      	movs	r3, #1
 800419a:	2160      	movs	r1, #96	; 0x60
 800419c:	6878      	ldr	r0, [r7, #4]
 800419e:	f7ff ffc8 	bl	8004132 <lis2mdl_write_reg>
 80041a2:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80041a4:	68fb      	ldr	r3, [r7, #12]
}
 80041a6:	4618      	mov	r0, r3
 80041a8:	3710      	adds	r7, #16
 80041aa:	46bd      	mov	sp, r7
 80041ac:	bd80      	pop	{r7, pc}

080041ae <lis2mdl_data_rate_set>:
  * @param  val   change the values of odr in reg CFG_REG_A
  * @retval       interface status.(MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2mdl_data_rate_set(stmdev_ctx_t *ctx, lis2mdl_odr_t val)
{
 80041ae:	b580      	push	{r7, lr}
 80041b0:	b084      	sub	sp, #16
 80041b2:	af00      	add	r7, sp, #0
 80041b4:	6078      	str	r0, [r7, #4]
 80041b6:	460b      	mov	r3, r1
 80041b8:	70fb      	strb	r3, [r7, #3]
  lis2mdl_cfg_reg_a_t reg;
  int32_t ret;

  ret = lis2mdl_read_reg(ctx, LIS2MDL_CFG_REG_A, (uint8_t *)&reg, 1);
 80041ba:	f107 0208 	add.w	r2, r7, #8
 80041be:	2301      	movs	r3, #1
 80041c0:	2160      	movs	r1, #96	; 0x60
 80041c2:	6878      	ldr	r0, [r7, #4]
 80041c4:	f7ff ff9d 	bl	8004102 <lis2mdl_read_reg>
 80041c8:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	d10f      	bne.n	80041f0 <lis2mdl_data_rate_set+0x42>
  {
    reg.odr = (uint8_t)val;
 80041d0:	78fb      	ldrb	r3, [r7, #3]
 80041d2:	f003 0303 	and.w	r3, r3, #3
 80041d6:	b2da      	uxtb	r2, r3
 80041d8:	7a3b      	ldrb	r3, [r7, #8]
 80041da:	f362 0383 	bfi	r3, r2, #2, #2
 80041de:	723b      	strb	r3, [r7, #8]
    ret = lis2mdl_write_reg(ctx, LIS2MDL_CFG_REG_A, (uint8_t *)&reg, 1);
 80041e0:	f107 0208 	add.w	r2, r7, #8
 80041e4:	2301      	movs	r3, #1
 80041e6:	2160      	movs	r1, #96	; 0x60
 80041e8:	6878      	ldr	r0, [r7, #4]
 80041ea:	f7ff ffa2 	bl	8004132 <lis2mdl_write_reg>
 80041ee:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80041f0:	68fb      	ldr	r3, [r7, #12]
}
 80041f2:	4618      	mov	r0, r3
 80041f4:	3710      	adds	r7, #16
 80041f6:	46bd      	mov	sp, r7
 80041f8:	bd80      	pop	{r7, pc}
	...

080041fc <lis2mdl_data_rate_get>:
  * @param  val   Get the values of odr in reg CFG_REG_A.(ptr)
  * @retval       interface status.(MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2mdl_data_rate_get(stmdev_ctx_t *ctx, lis2mdl_odr_t *val)
{
 80041fc:	b580      	push	{r7, lr}
 80041fe:	b084      	sub	sp, #16
 8004200:	af00      	add	r7, sp, #0
 8004202:	6078      	str	r0, [r7, #4]
 8004204:	6039      	str	r1, [r7, #0]
  lis2mdl_cfg_reg_a_t reg;
  int32_t ret;

  ret = lis2mdl_read_reg(ctx, LIS2MDL_CFG_REG_A, (uint8_t *)&reg, 1);
 8004206:	f107 0208 	add.w	r2, r7, #8
 800420a:	2301      	movs	r3, #1
 800420c:	2160      	movs	r1, #96	; 0x60
 800420e:	6878      	ldr	r0, [r7, #4]
 8004210:	f7ff ff77 	bl	8004102 <lis2mdl_read_reg>
 8004214:	60f8      	str	r0, [r7, #12]

  switch (reg.odr)
 8004216:	7a3b      	ldrb	r3, [r7, #8]
 8004218:	f3c3 0381 	ubfx	r3, r3, #2, #2
 800421c:	b2db      	uxtb	r3, r3
 800421e:	2b03      	cmp	r3, #3
 8004220:	d81a      	bhi.n	8004258 <lis2mdl_data_rate_get+0x5c>
 8004222:	a201      	add	r2, pc, #4	; (adr r2, 8004228 <lis2mdl_data_rate_get+0x2c>)
 8004224:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004228:	08004239 	.word	0x08004239
 800422c:	08004241 	.word	0x08004241
 8004230:	08004249 	.word	0x08004249
 8004234:	08004251 	.word	0x08004251
  {
    case LIS2MDL_ODR_10Hz:
      *val = LIS2MDL_ODR_10Hz;
 8004238:	683b      	ldr	r3, [r7, #0]
 800423a:	2200      	movs	r2, #0
 800423c:	701a      	strb	r2, [r3, #0]
      break;
 800423e:	e00f      	b.n	8004260 <lis2mdl_data_rate_get+0x64>

    case LIS2MDL_ODR_20Hz:
      *val = LIS2MDL_ODR_20Hz;
 8004240:	683b      	ldr	r3, [r7, #0]
 8004242:	2201      	movs	r2, #1
 8004244:	701a      	strb	r2, [r3, #0]
      break;
 8004246:	e00b      	b.n	8004260 <lis2mdl_data_rate_get+0x64>

    case LIS2MDL_ODR_50Hz:
      *val = LIS2MDL_ODR_50Hz;
 8004248:	683b      	ldr	r3, [r7, #0]
 800424a:	2202      	movs	r2, #2
 800424c:	701a      	strb	r2, [r3, #0]
      break;
 800424e:	e007      	b.n	8004260 <lis2mdl_data_rate_get+0x64>

    case LIS2MDL_ODR_100Hz:
      *val = LIS2MDL_ODR_100Hz;
 8004250:	683b      	ldr	r3, [r7, #0]
 8004252:	2203      	movs	r2, #3
 8004254:	701a      	strb	r2, [r3, #0]
      break;
 8004256:	e003      	b.n	8004260 <lis2mdl_data_rate_get+0x64>

    default:
      *val = LIS2MDL_ODR_10Hz;
 8004258:	683b      	ldr	r3, [r7, #0]
 800425a:	2200      	movs	r2, #0
 800425c:	701a      	strb	r2, [r3, #0]
      break;
 800425e:	bf00      	nop
  }

  return ret;
 8004260:	68fb      	ldr	r3, [r7, #12]
}
 8004262:	4618      	mov	r0, r3
 8004264:	3710      	adds	r7, #16
 8004266:	46bd      	mov	sp, r7
 8004268:	bd80      	pop	{r7, pc}
 800426a:	bf00      	nop

0800426c <lis2mdl_block_data_update_set>:
  * @param  val   change the values of bdu in reg CFG_REG_C
  * @retval       interface status.(MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2mdl_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
 800426c:	b580      	push	{r7, lr}
 800426e:	b084      	sub	sp, #16
 8004270:	af00      	add	r7, sp, #0
 8004272:	6078      	str	r0, [r7, #4]
 8004274:	460b      	mov	r3, r1
 8004276:	70fb      	strb	r3, [r7, #3]
  lis2mdl_cfg_reg_c_t reg;
  int32_t ret;

  ret = lis2mdl_read_reg(ctx, LIS2MDL_CFG_REG_C, (uint8_t *)&reg, 1);
 8004278:	f107 0208 	add.w	r2, r7, #8
 800427c:	2301      	movs	r3, #1
 800427e:	2162      	movs	r1, #98	; 0x62
 8004280:	6878      	ldr	r0, [r7, #4]
 8004282:	f7ff ff3e 	bl	8004102 <lis2mdl_read_reg>
 8004286:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	2b00      	cmp	r3, #0
 800428c:	d10f      	bne.n	80042ae <lis2mdl_block_data_update_set+0x42>
  {
    reg.bdu = val;
 800428e:	78fb      	ldrb	r3, [r7, #3]
 8004290:	f003 0301 	and.w	r3, r3, #1
 8004294:	b2da      	uxtb	r2, r3
 8004296:	7a3b      	ldrb	r3, [r7, #8]
 8004298:	f362 1304 	bfi	r3, r2, #4, #1
 800429c:	723b      	strb	r3, [r7, #8]
    ret = lis2mdl_write_reg(ctx, LIS2MDL_CFG_REG_C, (uint8_t *)&reg, 1);
 800429e:	f107 0208 	add.w	r2, r7, #8
 80042a2:	2301      	movs	r3, #1
 80042a4:	2162      	movs	r1, #98	; 0x62
 80042a6:	6878      	ldr	r0, [r7, #4]
 80042a8:	f7ff ff43 	bl	8004132 <lis2mdl_write_reg>
 80042ac:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80042ae:	68fb      	ldr	r3, [r7, #12]
}
 80042b0:	4618      	mov	r0, r3
 80042b2:	3710      	adds	r7, #16
 80042b4:	46bd      	mov	sp, r7
 80042b6:	bd80      	pop	{r7, pc}

080042b8 <lis2mdl_magnetic_raw_get>:
  * @param  buff  that stores data read
  * @retval       interface status.(MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2mdl_magnetic_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 80042b8:	b580      	push	{r7, lr}
 80042ba:	b086      	sub	sp, #24
 80042bc:	af00      	add	r7, sp, #0
 80042be:	6078      	str	r0, [r7, #4]
 80042c0:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;

  ret = lis2mdl_read_reg(ctx, LIS2MDL_OUTX_L_REG, buff, 6);
 80042c2:	f107 020c 	add.w	r2, r7, #12
 80042c6:	2306      	movs	r3, #6
 80042c8:	2168      	movs	r1, #104	; 0x68
 80042ca:	6878      	ldr	r0, [r7, #4]
 80042cc:	f7ff ff19 	bl	8004102 <lis2mdl_read_reg>
 80042d0:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 80042d2:	7b7b      	ldrb	r3, [r7, #13]
 80042d4:	b21a      	sxth	r2, r3
 80042d6:	683b      	ldr	r3, [r7, #0]
 80042d8:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 80042da:	683b      	ldr	r3, [r7, #0]
 80042dc:	f9b3 3000 	ldrsh.w	r3, [r3]
 80042e0:	b29b      	uxth	r3, r3
 80042e2:	021b      	lsls	r3, r3, #8
 80042e4:	b29a      	uxth	r2, r3
 80042e6:	7b3b      	ldrb	r3, [r7, #12]
 80042e8:	b29b      	uxth	r3, r3
 80042ea:	4413      	add	r3, r2
 80042ec:	b29b      	uxth	r3, r3
 80042ee:	b21a      	sxth	r2, r3
 80042f0:	683b      	ldr	r3, [r7, #0]
 80042f2:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 80042f4:	7bfa      	ldrb	r2, [r7, #15]
 80042f6:	683b      	ldr	r3, [r7, #0]
 80042f8:	3302      	adds	r3, #2
 80042fa:	b212      	sxth	r2, r2
 80042fc:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 80042fe:	683b      	ldr	r3, [r7, #0]
 8004300:	3302      	adds	r3, #2
 8004302:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004306:	b29b      	uxth	r3, r3
 8004308:	021b      	lsls	r3, r3, #8
 800430a:	b29a      	uxth	r2, r3
 800430c:	7bbb      	ldrb	r3, [r7, #14]
 800430e:	b29b      	uxth	r3, r3
 8004310:	4413      	add	r3, r2
 8004312:	b29a      	uxth	r2, r3
 8004314:	683b      	ldr	r3, [r7, #0]
 8004316:	3302      	adds	r3, #2
 8004318:	b212      	sxth	r2, r2
 800431a:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 800431c:	7c7a      	ldrb	r2, [r7, #17]
 800431e:	683b      	ldr	r3, [r7, #0]
 8004320:	3304      	adds	r3, #4
 8004322:	b212      	sxth	r2, r2
 8004324:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 8004326:	683b      	ldr	r3, [r7, #0]
 8004328:	3304      	adds	r3, #4
 800432a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800432e:	b29b      	uxth	r3, r3
 8004330:	021b      	lsls	r3, r3, #8
 8004332:	b29a      	uxth	r2, r3
 8004334:	7c3b      	ldrb	r3, [r7, #16]
 8004336:	b29b      	uxth	r3, r3
 8004338:	4413      	add	r3, r2
 800433a:	b29a      	uxth	r2, r3
 800433c:	683b      	ldr	r3, [r7, #0]
 800433e:	3304      	adds	r3, #4
 8004340:	b212      	sxth	r2, r2
 8004342:	801a      	strh	r2, [r3, #0]

  return ret;
 8004344:	697b      	ldr	r3, [r7, #20]
}
 8004346:	4618      	mov	r0, r3
 8004348:	3718      	adds	r7, #24
 800434a:	46bd      	mov	sp, r7
 800434c:	bd80      	pop	{r7, pc}

0800434e <lis2mdl_device_id_get>:
  * @param  buff  that stores data read
  * @retval       interface status.(MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2mdl_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 800434e:	b580      	push	{r7, lr}
 8004350:	b084      	sub	sp, #16
 8004352:	af00      	add	r7, sp, #0
 8004354:	6078      	str	r0, [r7, #4]
 8004356:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = lis2mdl_read_reg(ctx, LIS2MDL_WHO_AM_I, buff, 1);
 8004358:	2301      	movs	r3, #1
 800435a:	683a      	ldr	r2, [r7, #0]
 800435c:	214f      	movs	r1, #79	; 0x4f
 800435e:	6878      	ldr	r0, [r7, #4]
 8004360:	f7ff fecf 	bl	8004102 <lis2mdl_read_reg>
 8004364:	60f8      	str	r0, [r7, #12]

  return ret;
 8004366:	68fb      	ldr	r3, [r7, #12]
}
 8004368:	4618      	mov	r0, r3
 800436a:	3710      	adds	r7, #16
 800436c:	46bd      	mov	sp, r7
 800436e:	bd80      	pop	{r7, pc}

08004370 <lis2mdl_self_test_set>:
  * @param  val   change the values of self_test in reg CFG_REG_C
  * @retval       interface status.(MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2mdl_self_test_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8004370:	b580      	push	{r7, lr}
 8004372:	b084      	sub	sp, #16
 8004374:	af00      	add	r7, sp, #0
 8004376:	6078      	str	r0, [r7, #4]
 8004378:	460b      	mov	r3, r1
 800437a:	70fb      	strb	r3, [r7, #3]
  lis2mdl_cfg_reg_c_t reg;
  int32_t ret;

  ret = lis2mdl_read_reg(ctx, LIS2MDL_CFG_REG_C, (uint8_t *)&reg, 1);
 800437c:	f107 0208 	add.w	r2, r7, #8
 8004380:	2301      	movs	r3, #1
 8004382:	2162      	movs	r1, #98	; 0x62
 8004384:	6878      	ldr	r0, [r7, #4]
 8004386:	f7ff febc 	bl	8004102 <lis2mdl_read_reg>
 800438a:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	2b00      	cmp	r3, #0
 8004390:	d10f      	bne.n	80043b2 <lis2mdl_self_test_set+0x42>
  {
    reg.self_test = val;
 8004392:	78fb      	ldrb	r3, [r7, #3]
 8004394:	f003 0301 	and.w	r3, r3, #1
 8004398:	b2da      	uxtb	r2, r3
 800439a:	7a3b      	ldrb	r3, [r7, #8]
 800439c:	f362 0341 	bfi	r3, r2, #1, #1
 80043a0:	723b      	strb	r3, [r7, #8]
    ret = lis2mdl_write_reg(ctx, LIS2MDL_CFG_REG_C, (uint8_t *)&reg, 1);
 80043a2:	f107 0208 	add.w	r2, r7, #8
 80043a6:	2301      	movs	r3, #1
 80043a8:	2162      	movs	r1, #98	; 0x62
 80043aa:	6878      	ldr	r0, [r7, #4]
 80043ac:	f7ff fec1 	bl	8004132 <lis2mdl_write_reg>
 80043b0:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80043b2:	68fb      	ldr	r3, [r7, #12]
}
 80043b4:	4618      	mov	r0, r3
 80043b6:	3710      	adds	r7, #16
 80043b8:	46bd      	mov	sp, r7
 80043ba:	bd80      	pop	{r7, pc}

080043bc <lis2mdl_i2c_interface_set>:
  * @retval       interface status.(MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2mdl_i2c_interface_set(stmdev_ctx_t *ctx,
                                  lis2mdl_i2c_dis_t val)
{
 80043bc:	b580      	push	{r7, lr}
 80043be:	b084      	sub	sp, #16
 80043c0:	af00      	add	r7, sp, #0
 80043c2:	6078      	str	r0, [r7, #4]
 80043c4:	460b      	mov	r3, r1
 80043c6:	70fb      	strb	r3, [r7, #3]
  lis2mdl_cfg_reg_c_t reg;
  int32_t ret;

  ret = lis2mdl_read_reg(ctx, LIS2MDL_CFG_REG_C, (uint8_t *)&reg, 1);
 80043c8:	f107 0208 	add.w	r2, r7, #8
 80043cc:	2301      	movs	r3, #1
 80043ce:	2162      	movs	r1, #98	; 0x62
 80043d0:	6878      	ldr	r0, [r7, #4]
 80043d2:	f7ff fe96 	bl	8004102 <lis2mdl_read_reg>
 80043d6:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d10f      	bne.n	80043fe <lis2mdl_i2c_interface_set+0x42>
  {
    reg.i2c_dis = (uint8_t)val;
 80043de:	78fb      	ldrb	r3, [r7, #3]
 80043e0:	f003 0301 	and.w	r3, r3, #1
 80043e4:	b2da      	uxtb	r2, r3
 80043e6:	7a3b      	ldrb	r3, [r7, #8]
 80043e8:	f362 1345 	bfi	r3, r2, #5, #1
 80043ec:	723b      	strb	r3, [r7, #8]
    ret = lis2mdl_write_reg(ctx, LIS2MDL_CFG_REG_C, (uint8_t *)&reg, 1);
 80043ee:	f107 0208 	add.w	r2, r7, #8
 80043f2:	2301      	movs	r3, #1
 80043f4:	2162      	movs	r1, #98	; 0x62
 80043f6:	6878      	ldr	r0, [r7, #4]
 80043f8:	f7ff fe9b 	bl	8004132 <lis2mdl_write_reg>
 80043fc:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80043fe:	68fb      	ldr	r3, [r7, #12]
}
 8004400:	4618      	mov	r0, r3
 8004402:	3710      	adds	r7, #16
 8004404:	46bd      	mov	sp, r7
 8004406:	bd80      	pop	{r7, pc}

08004408 <LSM6DSO_RegisterBusIO>:
  * @brief  Register Component Bus IO operations
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_RegisterBusIO(LSM6DSO_Object_t *pObj, LSM6DSO_IO_t *pIO)
{
 8004408:	b580      	push	{r7, lr}
 800440a:	b084      	sub	sp, #16
 800440c:	af00      	add	r7, sp, #0
 800440e:	6078      	str	r0, [r7, #4]
 8004410:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSO_OK;
 8004412:	2300      	movs	r3, #0
 8004414:	60fb      	str	r3, [r7, #12]

  if (pObj == NULL)
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	2b00      	cmp	r3, #0
 800441a:	d103      	bne.n	8004424 <LSM6DSO_RegisterBusIO+0x1c>
  {
    ret = LSM6DSO_ERROR;
 800441c:	f04f 33ff 	mov.w	r3, #4294967295
 8004420:	60fb      	str	r3, [r7, #12]
 8004422:	e051      	b.n	80044c8 <LSM6DSO_RegisterBusIO+0xc0>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 8004424:	683b      	ldr	r3, [r7, #0]
 8004426:	681a      	ldr	r2, [r3, #0]
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 800442c:	683b      	ldr	r3, [r7, #0]
 800442e:	685a      	ldr	r2, [r3, #4]
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	605a      	str	r2, [r3, #4]
    pObj->IO.BusType   = pIO->BusType;
 8004434:	683b      	ldr	r3, [r7, #0]
 8004436:	689a      	ldr	r2, [r3, #8]
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	609a      	str	r2, [r3, #8]
    pObj->IO.Address   = pIO->Address;
 800443c:	683b      	ldr	r3, [r7, #0]
 800443e:	7b1a      	ldrb	r2, [r3, #12]
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	731a      	strb	r2, [r3, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 8004444:	683b      	ldr	r3, [r7, #0]
 8004446:	691a      	ldr	r2, [r3, #16]
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	611a      	str	r2, [r3, #16]
    pObj->IO.ReadReg   = pIO->ReadReg;
 800444c:	683b      	ldr	r3, [r7, #0]
 800444e:	695a      	ldr	r2, [r3, #20]
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	615a      	str	r2, [r3, #20]
    pObj->IO.GetTick   = pIO->GetTick;
 8004454:	683b      	ldr	r3, [r7, #0]
 8004456:	699a      	ldr	r2, [r3, #24]
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	619a      	str	r2, [r3, #24]

    pObj->Ctx.read_reg  = ReadRegWrap;
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	4a1d      	ldr	r2, [pc, #116]	; (80044d4 <LSM6DSO_RegisterBusIO+0xcc>)
 8004460:	625a      	str	r2, [r3, #36]	; 0x24
    pObj->Ctx.write_reg = WriteRegWrap;
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	4a1c      	ldr	r2, [pc, #112]	; (80044d8 <LSM6DSO_RegisterBusIO+0xd0>)
 8004466:	621a      	str	r2, [r3, #32]
    pObj->Ctx.mdelay    = pIO->Delay;
 8004468:	683b      	ldr	r3, [r7, #0]
 800446a:	69da      	ldr	r2, [r3, #28]
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	629a      	str	r2, [r3, #40]	; 0x28
    pObj->Ctx.handle   = pObj;
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	687a      	ldr	r2, [r7, #4]
 8004474:	62da      	str	r2, [r3, #44]	; 0x2c

    if (pObj->IO.Init == NULL)
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	2b00      	cmp	r3, #0
 800447c:	d103      	bne.n	8004486 <LSM6DSO_RegisterBusIO+0x7e>
    {
      ret = LSM6DSO_ERROR;
 800447e:	f04f 33ff 	mov.w	r3, #4294967295
 8004482:	60fb      	str	r3, [r7, #12]
 8004484:	e020      	b.n	80044c8 <LSM6DSO_RegisterBusIO+0xc0>
    }
    else if (pObj->IO.Init() != LSM6DSO_OK)
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	4798      	blx	r3
 800448c:	4603      	mov	r3, r0
 800448e:	2b00      	cmp	r3, #0
 8004490:	d003      	beq.n	800449a <LSM6DSO_RegisterBusIO+0x92>
    {
      ret = LSM6DSO_ERROR;
 8004492:	f04f 33ff 	mov.w	r3, #4294967295
 8004496:	60fb      	str	r3, [r7, #12]
 8004498:	e016      	b.n	80044c8 <LSM6DSO_RegisterBusIO+0xc0>
    }
    else
    {
      if (pObj->IO.BusType == LSM6DSO_SPI_3WIRES_BUS) /* SPI 3-Wires */
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	689b      	ldr	r3, [r3, #8]
 800449e:	2b02      	cmp	r3, #2
 80044a0:	d112      	bne.n	80044c8 <LSM6DSO_RegisterBusIO+0xc0>
      {
        /* Enable the SPI 3-Wires support only the first time */
        if (pObj->is_initialized == 0U)
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d10d      	bne.n	80044c8 <LSM6DSO_RegisterBusIO+0xc0>
        {
          /* Enable SPI 3-Wires on the component */
          uint8_t data = 0x0C;
 80044ac:	230c      	movs	r3, #12
 80044ae:	72fb      	strb	r3, [r7, #11]

          if (LSM6DSO_Write_Reg(pObj, LSM6DSO_CTRL3_C, data) != LSM6DSO_OK)
 80044b0:	7afb      	ldrb	r3, [r7, #11]
 80044b2:	461a      	mov	r2, r3
 80044b4:	2112      	movs	r1, #18
 80044b6:	6878      	ldr	r0, [r7, #4]
 80044b8:	f000 ff59 	bl	800536e <LSM6DSO_Write_Reg>
 80044bc:	4603      	mov	r3, r0
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d002      	beq.n	80044c8 <LSM6DSO_RegisterBusIO+0xc0>
          {
            ret = LSM6DSO_ERROR;
 80044c2:	f04f 33ff 	mov.w	r3, #4294967295
 80044c6:	60fb      	str	r3, [r7, #12]
        }
      }
    }
  }

  return ret;
 80044c8:	68fb      	ldr	r3, [r7, #12]
}
 80044ca:	4618      	mov	r0, r3
 80044cc:	3710      	adds	r7, #16
 80044ce:	46bd      	mov	sp, r7
 80044d0:	bd80      	pop	{r7, pc}
 80044d2:	bf00      	nop
 80044d4:	08005811 	.word	0x08005811
 80044d8:	08005847 	.word	0x08005847

080044dc <LSM6DSO_Init>:
  * @brief  Initialize the LSM6DSO sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_Init(LSM6DSO_Object_t *pObj)
{
 80044dc:	b580      	push	{r7, lr}
 80044de:	b082      	sub	sp, #8
 80044e0:	af00      	add	r7, sp, #0
 80044e2:	6078      	str	r0, [r7, #4]
  /* Disable I3C */
  if (lsm6dso_i3c_disable_set(&(pObj->Ctx), LSM6DSO_I3C_DISABLE) != LSM6DSO_OK)
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	3320      	adds	r3, #32
 80044e8:	2180      	movs	r1, #128	; 0x80
 80044ea:	4618      	mov	r0, r3
 80044ec:	f001 fe97 	bl	800621e <lsm6dso_i3c_disable_set>
 80044f0:	4603      	mov	r3, r0
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d002      	beq.n	80044fc <LSM6DSO_Init+0x20>
  {
    return LSM6DSO_ERROR;
 80044f6:	f04f 33ff 	mov.w	r3, #4294967295
 80044fa:	e060      	b.n	80045be <LSM6DSO_Init+0xe2>
  }

  /* Enable register address automatically incremented during a multiple byte
  access with a serial interface. */
  if (lsm6dso_auto_increment_set(&(pObj->Ctx), PROPERTY_ENABLE) != LSM6DSO_OK)
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	3320      	adds	r3, #32
 8004500:	2101      	movs	r1, #1
 8004502:	4618      	mov	r0, r3
 8004504:	f001 fe65 	bl	80061d2 <lsm6dso_auto_increment_set>
 8004508:	4603      	mov	r3, r0
 800450a:	2b00      	cmp	r3, #0
 800450c:	d002      	beq.n	8004514 <LSM6DSO_Init+0x38>
  {
    return LSM6DSO_ERROR;
 800450e:	f04f 33ff 	mov.w	r3, #4294967295
 8004512:	e054      	b.n	80045be <LSM6DSO_Init+0xe2>
  }

  /* Enable BDU */
  if (lsm6dso_block_data_update_set(&(pObj->Ctx), PROPERTY_ENABLE) != LSM6DSO_OK)
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	3320      	adds	r3, #32
 8004518:	2101      	movs	r1, #1
 800451a:	4618      	mov	r0, r3
 800451c:	f001 fd66 	bl	8005fec <lsm6dso_block_data_update_set>
 8004520:	4603      	mov	r3, r0
 8004522:	2b00      	cmp	r3, #0
 8004524:	d002      	beq.n	800452c <LSM6DSO_Init+0x50>
  {
    return LSM6DSO_ERROR;
 8004526:	f04f 33ff 	mov.w	r3, #4294967295
 800452a:	e048      	b.n	80045be <LSM6DSO_Init+0xe2>
  }

  /* FIFO mode selection */
  if (lsm6dso_fifo_mode_set(&(pObj->Ctx), LSM6DSO_BYPASS_MODE) != LSM6DSO_OK)
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	3320      	adds	r3, #32
 8004530:	2100      	movs	r1, #0
 8004532:	4618      	mov	r0, r3
 8004534:	f001 feb9 	bl	80062aa <lsm6dso_fifo_mode_set>
 8004538:	4603      	mov	r3, r0
 800453a:	2b00      	cmp	r3, #0
 800453c:	d002      	beq.n	8004544 <LSM6DSO_Init+0x68>
  {
    return LSM6DSO_ERROR;
 800453e:	f04f 33ff 	mov.w	r3, #4294967295
 8004542:	e03c      	b.n	80045be <LSM6DSO_Init+0xe2>
  }

  /* Select default output data rate. */
  pObj->acc_odr = LSM6DSO_XL_ODR_104Hz;
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	2204      	movs	r2, #4
 8004548:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33

  /* Output data rate selection - power down. */
  if (lsm6dso_xl_data_rate_set(&(pObj->Ctx), LSM6DSO_XL_ODR_OFF) != LSM6DSO_OK)
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	3320      	adds	r3, #32
 8004550:	2100      	movs	r1, #0
 8004552:	4618      	mov	r0, r3
 8004554:	f001 fa20 	bl	8005998 <lsm6dso_xl_data_rate_set>
 8004558:	4603      	mov	r3, r0
 800455a:	2b00      	cmp	r3, #0
 800455c:	d002      	beq.n	8004564 <LSM6DSO_Init+0x88>
  {
    return LSM6DSO_ERROR;
 800455e:	f04f 33ff 	mov.w	r3, #4294967295
 8004562:	e02c      	b.n	80045be <LSM6DSO_Init+0xe2>
  }

  /* Full scale selection. */
  if (lsm6dso_xl_full_scale_set(&(pObj->Ctx), LSM6DSO_2g) != LSM6DSO_OK)
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	3320      	adds	r3, #32
 8004568:	2100      	movs	r1, #0
 800456a:	4618      	mov	r0, r3
 800456c:	f001 f9b6 	bl	80058dc <lsm6dso_xl_full_scale_set>
 8004570:	4603      	mov	r3, r0
 8004572:	2b00      	cmp	r3, #0
 8004574:	d002      	beq.n	800457c <LSM6DSO_Init+0xa0>
  {
    return LSM6DSO_ERROR;
 8004576:	f04f 33ff 	mov.w	r3, #4294967295
 800457a:	e020      	b.n	80045be <LSM6DSO_Init+0xe2>
  }

  /* Select default output data rate. */
  pObj->gyro_odr = LSM6DSO_GY_ODR_104Hz;
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	2204      	movs	r2, #4
 8004580:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Output data rate selection - power down. */
  if (lsm6dso_gy_data_rate_set(&(pObj->Ctx), LSM6DSO_GY_ODR_OFF) != LSM6DSO_OK)
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	3320      	adds	r3, #32
 8004588:	2100      	movs	r1, #0
 800458a:	4618      	mov	r0, r3
 800458c:	f001 fbd0 	bl	8005d30 <lsm6dso_gy_data_rate_set>
 8004590:	4603      	mov	r3, r0
 8004592:	2b00      	cmp	r3, #0
 8004594:	d002      	beq.n	800459c <LSM6DSO_Init+0xc0>
  {
    return LSM6DSO_ERROR;
 8004596:	f04f 33ff 	mov.w	r3, #4294967295
 800459a:	e010      	b.n	80045be <LSM6DSO_Init+0xe2>
  }

  /* Full scale selection. */
  if (lsm6dso_gy_full_scale_set(&(pObj->Ctx), LSM6DSO_2000dps) != LSM6DSO_OK)
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	3320      	adds	r3, #32
 80045a0:	2106      	movs	r1, #6
 80045a2:	4618      	mov	r0, r3
 80045a4:	f001 fb5c 	bl	8005c60 <lsm6dso_gy_full_scale_set>
 80045a8:	4603      	mov	r3, r0
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d002      	beq.n	80045b4 <LSM6DSO_Init+0xd8>
  {
    return LSM6DSO_ERROR;
 80045ae:	f04f 33ff 	mov.w	r3, #4294967295
 80045b2:	e004      	b.n	80045be <LSM6DSO_Init+0xe2>
  }

  pObj->is_initialized = 1;
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	2201      	movs	r2, #1
 80045b8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return LSM6DSO_OK;
 80045bc:	2300      	movs	r3, #0
}
 80045be:	4618      	mov	r0, r3
 80045c0:	3708      	adds	r7, #8
 80045c2:	46bd      	mov	sp, r7
 80045c4:	bd80      	pop	{r7, pc}

080045c6 <LSM6DSO_DeInit>:
  * @brief  Deinitialize the LSM6DSO sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_DeInit(LSM6DSO_Object_t *pObj)
{
 80045c6:	b580      	push	{r7, lr}
 80045c8:	b082      	sub	sp, #8
 80045ca:	af00      	add	r7, sp, #0
 80045cc:	6078      	str	r0, [r7, #4]
  /* Disable the component */
  if (LSM6DSO_ACC_Disable(pObj) != LSM6DSO_OK)
 80045ce:	6878      	ldr	r0, [r7, #4]
 80045d0:	f000 f888 	bl	80046e4 <LSM6DSO_ACC_Disable>
 80045d4:	4603      	mov	r3, r0
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d002      	beq.n	80045e0 <LSM6DSO_DeInit+0x1a>
  {
    return LSM6DSO_ERROR;
 80045da:	f04f 33ff 	mov.w	r3, #4294967295
 80045de:	e015      	b.n	800460c <LSM6DSO_DeInit+0x46>
  }

  if (LSM6DSO_GYRO_Disable(pObj) != LSM6DSO_OK)
 80045e0:	6878      	ldr	r0, [r7, #4]
 80045e2:	f000 fc2e 	bl	8004e42 <LSM6DSO_GYRO_Disable>
 80045e6:	4603      	mov	r3, r0
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d002      	beq.n	80045f2 <LSM6DSO_DeInit+0x2c>
  {
    return LSM6DSO_ERROR;
 80045ec:	f04f 33ff 	mov.w	r3, #4294967295
 80045f0:	e00c      	b.n	800460c <LSM6DSO_DeInit+0x46>
  }

  /* Reset output data rate. */
  pObj->acc_odr = LSM6DSO_XL_ODR_OFF;
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	2200      	movs	r2, #0
 80045f6:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
  pObj->gyro_odr = LSM6DSO_GY_ODR_OFF;
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	2200      	movs	r2, #0
 80045fe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  pObj->is_initialized = 0;
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	2200      	movs	r2, #0
 8004606:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return LSM6DSO_OK;
 800460a:	2300      	movs	r3, #0
}
 800460c:	4618      	mov	r0, r3
 800460e:	3708      	adds	r7, #8
 8004610:	46bd      	mov	sp, r7
 8004612:	bd80      	pop	{r7, pc}

08004614 <LSM6DSO_ReadID>:
  * @param  pObj the device pObj
  * @param  Id the WHO_AM_I value
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_ReadID(LSM6DSO_Object_t *pObj, uint8_t *Id)
{
 8004614:	b580      	push	{r7, lr}
 8004616:	b082      	sub	sp, #8
 8004618:	af00      	add	r7, sp, #0
 800461a:	6078      	str	r0, [r7, #4]
 800461c:	6039      	str	r1, [r7, #0]
  if (lsm6dso_device_id_get(&(pObj->Ctx), Id) != LSM6DSO_OK)
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	3320      	adds	r3, #32
 8004622:	6839      	ldr	r1, [r7, #0]
 8004624:	4618      	mov	r0, r3
 8004626:	f001 fdc3 	bl	80061b0 <lsm6dso_device_id_get>
 800462a:	4603      	mov	r3, r0
 800462c:	2b00      	cmp	r3, #0
 800462e:	d002      	beq.n	8004636 <LSM6DSO_ReadID+0x22>
  {
    return LSM6DSO_ERROR;
 8004630:	f04f 33ff 	mov.w	r3, #4294967295
 8004634:	e000      	b.n	8004638 <LSM6DSO_ReadID+0x24>
  }

  return LSM6DSO_OK;
 8004636:	2300      	movs	r3, #0
}
 8004638:	4618      	mov	r0, r3
 800463a:	3708      	adds	r7, #8
 800463c:	46bd      	mov	sp, r7
 800463e:	bd80      	pop	{r7, pc}

08004640 <LSM6DSO_GetCapabilities>:
  * @param  pObj Component object pointer
  * @param  Capabilities pointer to LSM6DSO sensor capabilities
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_GetCapabilities(LSM6DSO_Object_t *pObj, LSM6DSO_Capabilities_t *Capabilities)
{
 8004640:	b480      	push	{r7}
 8004642:	b083      	sub	sp, #12
 8004644:	af00      	add	r7, sp, #0
 8004646:	6078      	str	r0, [r7, #4]
 8004648:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  Capabilities->Acc          = 1;
 800464a:	683b      	ldr	r3, [r7, #0]
 800464c:	2201      	movs	r2, #1
 800464e:	701a      	strb	r2, [r3, #0]
  Capabilities->Gyro         = 1;
 8004650:	683b      	ldr	r3, [r7, #0]
 8004652:	2201      	movs	r2, #1
 8004654:	705a      	strb	r2, [r3, #1]
  Capabilities->Magneto      = 0;
 8004656:	683b      	ldr	r3, [r7, #0]
 8004658:	2200      	movs	r2, #0
 800465a:	709a      	strb	r2, [r3, #2]
  Capabilities->LowPower     = 0;
 800465c:	683b      	ldr	r3, [r7, #0]
 800465e:	2200      	movs	r2, #0
 8004660:	70da      	strb	r2, [r3, #3]
  Capabilities->GyroMaxFS    = 2000;
 8004662:	683b      	ldr	r3, [r7, #0]
 8004664:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8004668:	605a      	str	r2, [r3, #4]
  Capabilities->AccMaxFS     = 16;
 800466a:	683b      	ldr	r3, [r7, #0]
 800466c:	2210      	movs	r2, #16
 800466e:	609a      	str	r2, [r3, #8]
  Capabilities->MagMaxFS     = 0;
 8004670:	683b      	ldr	r3, [r7, #0]
 8004672:	2200      	movs	r2, #0
 8004674:	60da      	str	r2, [r3, #12]
  Capabilities->GyroMaxOdr   = 6660.0f;
 8004676:	683b      	ldr	r3, [r7, #0]
 8004678:	4a07      	ldr	r2, [pc, #28]	; (8004698 <LSM6DSO_GetCapabilities+0x58>)
 800467a:	611a      	str	r2, [r3, #16]
  Capabilities->AccMaxOdr    = 6660.0f;
 800467c:	683b      	ldr	r3, [r7, #0]
 800467e:	4a06      	ldr	r2, [pc, #24]	; (8004698 <LSM6DSO_GetCapabilities+0x58>)
 8004680:	615a      	str	r2, [r3, #20]
  Capabilities->MagMaxOdr    = 0.0f;
 8004682:	683b      	ldr	r3, [r7, #0]
 8004684:	f04f 0200 	mov.w	r2, #0
 8004688:	619a      	str	r2, [r3, #24]
  return LSM6DSO_OK;
 800468a:	2300      	movs	r3, #0
}
 800468c:	4618      	mov	r0, r3
 800468e:	370c      	adds	r7, #12
 8004690:	46bd      	mov	sp, r7
 8004692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004696:	4770      	bx	lr
 8004698:	45d02000 	.word	0x45d02000

0800469c <LSM6DSO_ACC_Enable>:
  * @brief  Enable the LSM6DSO accelerometer sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_ACC_Enable(LSM6DSO_Object_t *pObj)
{
 800469c:	b580      	push	{r7, lr}
 800469e:	b082      	sub	sp, #8
 80046a0:	af00      	add	r7, sp, #0
 80046a2:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->acc_is_enabled == 1U)
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80046aa:	2b01      	cmp	r3, #1
 80046ac:	d101      	bne.n	80046b2 <LSM6DSO_ACC_Enable+0x16>
  {
    return LSM6DSO_OK;
 80046ae:	2300      	movs	r3, #0
 80046b0:	e014      	b.n	80046dc <LSM6DSO_ACC_Enable+0x40>
  }

  /* Output data rate selection. */
  if (lsm6dso_xl_data_rate_set(&(pObj->Ctx), pObj->acc_odr) != LSM6DSO_OK)
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	f103 0220 	add.w	r2, r3, #32
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 80046be:	4619      	mov	r1, r3
 80046c0:	4610      	mov	r0, r2
 80046c2:	f001 f969 	bl	8005998 <lsm6dso_xl_data_rate_set>
 80046c6:	4603      	mov	r3, r0
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d002      	beq.n	80046d2 <LSM6DSO_ACC_Enable+0x36>
  {
    return LSM6DSO_ERROR;
 80046cc:	f04f 33ff 	mov.w	r3, #4294967295
 80046d0:	e004      	b.n	80046dc <LSM6DSO_ACC_Enable+0x40>
  }

  pObj->acc_is_enabled = 1;
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	2201      	movs	r2, #1
 80046d6:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

  return LSM6DSO_OK;
 80046da:	2300      	movs	r3, #0
}
 80046dc:	4618      	mov	r0, r3
 80046de:	3708      	adds	r7, #8
 80046e0:	46bd      	mov	sp, r7
 80046e2:	bd80      	pop	{r7, pc}

080046e4 <LSM6DSO_ACC_Disable>:
  * @brief  Disable the LSM6DSO accelerometer sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_ACC_Disable(LSM6DSO_Object_t *pObj)
{
 80046e4:	b580      	push	{r7, lr}
 80046e6:	b082      	sub	sp, #8
 80046e8:	af00      	add	r7, sp, #0
 80046ea:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->acc_is_enabled == 0U)
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d101      	bne.n	80046fa <LSM6DSO_ACC_Disable+0x16>
  {
    return LSM6DSO_OK;
 80046f6:	2300      	movs	r3, #0
 80046f8:	e01f      	b.n	800473a <LSM6DSO_ACC_Disable+0x56>
  }

  /* Get current output data rate. */
  if (lsm6dso_xl_data_rate_get(&(pObj->Ctx), &pObj->acc_odr) != LSM6DSO_OK)
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	f103 0220 	add.w	r2, r3, #32
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	3333      	adds	r3, #51	; 0x33
 8004704:	4619      	mov	r1, r3
 8004706:	4610      	mov	r0, r2
 8004708:	f001 fa42 	bl	8005b90 <lsm6dso_xl_data_rate_get>
 800470c:	4603      	mov	r3, r0
 800470e:	2b00      	cmp	r3, #0
 8004710:	d002      	beq.n	8004718 <LSM6DSO_ACC_Disable+0x34>
  {
    return LSM6DSO_ERROR;
 8004712:	f04f 33ff 	mov.w	r3, #4294967295
 8004716:	e010      	b.n	800473a <LSM6DSO_ACC_Disable+0x56>
  }

  /* Output data rate selection - power down. */
  if (lsm6dso_xl_data_rate_set(&(pObj->Ctx), LSM6DSO_XL_ODR_OFF) != LSM6DSO_OK)
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	3320      	adds	r3, #32
 800471c:	2100      	movs	r1, #0
 800471e:	4618      	mov	r0, r3
 8004720:	f001 f93a 	bl	8005998 <lsm6dso_xl_data_rate_set>
 8004724:	4603      	mov	r3, r0
 8004726:	2b00      	cmp	r3, #0
 8004728:	d002      	beq.n	8004730 <LSM6DSO_ACC_Disable+0x4c>
  {
    return LSM6DSO_ERROR;
 800472a:	f04f 33ff 	mov.w	r3, #4294967295
 800472e:	e004      	b.n	800473a <LSM6DSO_ACC_Disable+0x56>
  }

  pObj->acc_is_enabled = 0;
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	2200      	movs	r2, #0
 8004734:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

  return LSM6DSO_OK;
 8004738:	2300      	movs	r3, #0
}
 800473a:	4618      	mov	r0, r3
 800473c:	3708      	adds	r7, #8
 800473e:	46bd      	mov	sp, r7
 8004740:	bd80      	pop	{r7, pc}
	...

08004744 <LSM6DSO_ACC_GetSensitivity>:
  * @param  pObj the device pObj
  * @param  Sensitivity pointer
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_ACC_GetSensitivity(LSM6DSO_Object_t *pObj, float_t *Sensitivity)
{
 8004744:	b580      	push	{r7, lr}
 8004746:	b084      	sub	sp, #16
 8004748:	af00      	add	r7, sp, #0
 800474a:	6078      	str	r0, [r7, #4]
 800474c:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSO_OK;
 800474e:	2300      	movs	r3, #0
 8004750:	60fb      	str	r3, [r7, #12]
  lsm6dso_fs_xl_t full_scale;

  /* Read actual full scale selection from sensor. */
  if (lsm6dso_xl_full_scale_get(&(pObj->Ctx), &full_scale) != LSM6DSO_OK)
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	3320      	adds	r3, #32
 8004756:	f107 020b 	add.w	r2, r7, #11
 800475a:	4611      	mov	r1, r2
 800475c:	4618      	mov	r0, r3
 800475e:	f001 f8e3 	bl	8005928 <lsm6dso_xl_full_scale_get>
 8004762:	4603      	mov	r3, r0
 8004764:	2b00      	cmp	r3, #0
 8004766:	d002      	beq.n	800476e <LSM6DSO_ACC_GetSensitivity+0x2a>
  {
    return LSM6DSO_ERROR;
 8004768:	f04f 33ff 	mov.w	r3, #4294967295
 800476c:	e023      	b.n	80047b6 <LSM6DSO_ACC_GetSensitivity+0x72>
  }

  /* Store the Sensitivity based on actual full scale. */
  switch (full_scale)
 800476e:	7afb      	ldrb	r3, [r7, #11]
 8004770:	2b03      	cmp	r3, #3
 8004772:	d81b      	bhi.n	80047ac <LSM6DSO_ACC_GetSensitivity+0x68>
 8004774:	a201      	add	r2, pc, #4	; (adr r2, 800477c <LSM6DSO_ACC_GetSensitivity+0x38>)
 8004776:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800477a:	bf00      	nop
 800477c:	0800478d 	.word	0x0800478d
 8004780:	080047a5 	.word	0x080047a5
 8004784:	08004795 	.word	0x08004795
 8004788:	0800479d 	.word	0x0800479d
  {
    case LSM6DSO_2g:
      *Sensitivity = LSM6DSO_ACC_SENSITIVITY_FS_2G;
 800478c:	683b      	ldr	r3, [r7, #0]
 800478e:	4a0c      	ldr	r2, [pc, #48]	; (80047c0 <LSM6DSO_ACC_GetSensitivity+0x7c>)
 8004790:	601a      	str	r2, [r3, #0]
      break;
 8004792:	e00f      	b.n	80047b4 <LSM6DSO_ACC_GetSensitivity+0x70>

    case LSM6DSO_4g:
      *Sensitivity = LSM6DSO_ACC_SENSITIVITY_FS_4G;
 8004794:	683b      	ldr	r3, [r7, #0]
 8004796:	4a0b      	ldr	r2, [pc, #44]	; (80047c4 <LSM6DSO_ACC_GetSensitivity+0x80>)
 8004798:	601a      	str	r2, [r3, #0]
      break;
 800479a:	e00b      	b.n	80047b4 <LSM6DSO_ACC_GetSensitivity+0x70>

    case LSM6DSO_8g:
      *Sensitivity = LSM6DSO_ACC_SENSITIVITY_FS_8G;
 800479c:	683b      	ldr	r3, [r7, #0]
 800479e:	4a0a      	ldr	r2, [pc, #40]	; (80047c8 <LSM6DSO_ACC_GetSensitivity+0x84>)
 80047a0:	601a      	str	r2, [r3, #0]
      break;
 80047a2:	e007      	b.n	80047b4 <LSM6DSO_ACC_GetSensitivity+0x70>

    case LSM6DSO_16g:
      *Sensitivity = LSM6DSO_ACC_SENSITIVITY_FS_16G;
 80047a4:	683b      	ldr	r3, [r7, #0]
 80047a6:	4a09      	ldr	r2, [pc, #36]	; (80047cc <LSM6DSO_ACC_GetSensitivity+0x88>)
 80047a8:	601a      	str	r2, [r3, #0]
      break;
 80047aa:	e003      	b.n	80047b4 <LSM6DSO_ACC_GetSensitivity+0x70>

    default:
      ret = LSM6DSO_ERROR;
 80047ac:	f04f 33ff 	mov.w	r3, #4294967295
 80047b0:	60fb      	str	r3, [r7, #12]
      break;
 80047b2:	bf00      	nop
  }

  return ret;
 80047b4:	68fb      	ldr	r3, [r7, #12]
}
 80047b6:	4618      	mov	r0, r3
 80047b8:	3710      	adds	r7, #16
 80047ba:	46bd      	mov	sp, r7
 80047bc:	bd80      	pop	{r7, pc}
 80047be:	bf00      	nop
 80047c0:	3d79db23 	.word	0x3d79db23
 80047c4:	3df9db23 	.word	0x3df9db23
 80047c8:	3e79db23 	.word	0x3e79db23
 80047cc:	3ef9db23 	.word	0x3ef9db23

080047d0 <LSM6DSO_ACC_GetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr pointer where the output data rate is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_ACC_GetOutputDataRate(LSM6DSO_Object_t *pObj, float_t *Odr)
{
 80047d0:	b580      	push	{r7, lr}
 80047d2:	b084      	sub	sp, #16
 80047d4:	af00      	add	r7, sp, #0
 80047d6:	6078      	str	r0, [r7, #4]
 80047d8:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSO_OK;
 80047da:	2300      	movs	r3, #0
 80047dc:	60fb      	str	r3, [r7, #12]
  lsm6dso_odr_xl_t odr_low_level;

  /* Get current output data rate. */
  if (lsm6dso_xl_data_rate_get(&(pObj->Ctx), &odr_low_level) != LSM6DSO_OK)
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	3320      	adds	r3, #32
 80047e2:	f107 020b 	add.w	r2, r7, #11
 80047e6:	4611      	mov	r1, r2
 80047e8:	4618      	mov	r0, r3
 80047ea:	f001 f9d1 	bl	8005b90 <lsm6dso_xl_data_rate_get>
 80047ee:	4603      	mov	r3, r0
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	d002      	beq.n	80047fa <LSM6DSO_ACC_GetOutputDataRate+0x2a>
  {
    return LSM6DSO_ERROR;
 80047f4:	f04f 33ff 	mov.w	r3, #4294967295
 80047f8:	e054      	b.n	80048a4 <LSM6DSO_ACC_GetOutputDataRate+0xd4>
  }

  switch (odr_low_level)
 80047fa:	7afb      	ldrb	r3, [r7, #11]
 80047fc:	2b0b      	cmp	r3, #11
 80047fe:	d84c      	bhi.n	800489a <LSM6DSO_ACC_GetOutputDataRate+0xca>
 8004800:	a201      	add	r2, pc, #4	; (adr r2, 8004808 <LSM6DSO_ACC_GetOutputDataRate+0x38>)
 8004802:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004806:	bf00      	nop
 8004808:	08004839 	.word	0x08004839
 800480c:	0800484b 	.word	0x0800484b
 8004810:	08004853 	.word	0x08004853
 8004814:	0800485b 	.word	0x0800485b
 8004818:	08004863 	.word	0x08004863
 800481c:	0800486b 	.word	0x0800486b
 8004820:	08004873 	.word	0x08004873
 8004824:	0800487b 	.word	0x0800487b
 8004828:	08004883 	.word	0x08004883
 800482c:	0800488b 	.word	0x0800488b
 8004830:	08004893 	.word	0x08004893
 8004834:	08004843 	.word	0x08004843
  {
    case LSM6DSO_XL_ODR_OFF:
      *Odr = 0.0f;
 8004838:	683b      	ldr	r3, [r7, #0]
 800483a:	f04f 0200 	mov.w	r2, #0
 800483e:	601a      	str	r2, [r3, #0]
      break;
 8004840:	e02f      	b.n	80048a2 <LSM6DSO_ACC_GetOutputDataRate+0xd2>

    case LSM6DSO_XL_ODR_1Hz6:
      *Odr = 1.6f;
 8004842:	683b      	ldr	r3, [r7, #0]
 8004844:	4a19      	ldr	r2, [pc, #100]	; (80048ac <LSM6DSO_ACC_GetOutputDataRate+0xdc>)
 8004846:	601a      	str	r2, [r3, #0]
      break;
 8004848:	e02b      	b.n	80048a2 <LSM6DSO_ACC_GetOutputDataRate+0xd2>

    case LSM6DSO_XL_ODR_12Hz5:
      *Odr = 12.5f;
 800484a:	683b      	ldr	r3, [r7, #0]
 800484c:	4a18      	ldr	r2, [pc, #96]	; (80048b0 <LSM6DSO_ACC_GetOutputDataRate+0xe0>)
 800484e:	601a      	str	r2, [r3, #0]
      break;
 8004850:	e027      	b.n	80048a2 <LSM6DSO_ACC_GetOutputDataRate+0xd2>

    case LSM6DSO_XL_ODR_26Hz:
      *Odr = 26.0f;
 8004852:	683b      	ldr	r3, [r7, #0]
 8004854:	4a17      	ldr	r2, [pc, #92]	; (80048b4 <LSM6DSO_ACC_GetOutputDataRate+0xe4>)
 8004856:	601a      	str	r2, [r3, #0]
      break;
 8004858:	e023      	b.n	80048a2 <LSM6DSO_ACC_GetOutputDataRate+0xd2>

    case LSM6DSO_XL_ODR_52Hz:
      *Odr = 52.0f;
 800485a:	683b      	ldr	r3, [r7, #0]
 800485c:	4a16      	ldr	r2, [pc, #88]	; (80048b8 <LSM6DSO_ACC_GetOutputDataRate+0xe8>)
 800485e:	601a      	str	r2, [r3, #0]
      break;
 8004860:	e01f      	b.n	80048a2 <LSM6DSO_ACC_GetOutputDataRate+0xd2>

    case LSM6DSO_XL_ODR_104Hz:
      *Odr = 104.0f;
 8004862:	683b      	ldr	r3, [r7, #0]
 8004864:	4a15      	ldr	r2, [pc, #84]	; (80048bc <LSM6DSO_ACC_GetOutputDataRate+0xec>)
 8004866:	601a      	str	r2, [r3, #0]
      break;
 8004868:	e01b      	b.n	80048a2 <LSM6DSO_ACC_GetOutputDataRate+0xd2>

    case LSM6DSO_XL_ODR_208Hz:
      *Odr = 208.0f;
 800486a:	683b      	ldr	r3, [r7, #0]
 800486c:	4a14      	ldr	r2, [pc, #80]	; (80048c0 <LSM6DSO_ACC_GetOutputDataRate+0xf0>)
 800486e:	601a      	str	r2, [r3, #0]
      break;
 8004870:	e017      	b.n	80048a2 <LSM6DSO_ACC_GetOutputDataRate+0xd2>

    case LSM6DSO_XL_ODR_417Hz:
      *Odr = 417.0f;
 8004872:	683b      	ldr	r3, [r7, #0]
 8004874:	4a13      	ldr	r2, [pc, #76]	; (80048c4 <LSM6DSO_ACC_GetOutputDataRate+0xf4>)
 8004876:	601a      	str	r2, [r3, #0]
      break;
 8004878:	e013      	b.n	80048a2 <LSM6DSO_ACC_GetOutputDataRate+0xd2>

    case LSM6DSO_XL_ODR_833Hz:
      *Odr = 833.0f;
 800487a:	683b      	ldr	r3, [r7, #0]
 800487c:	4a12      	ldr	r2, [pc, #72]	; (80048c8 <LSM6DSO_ACC_GetOutputDataRate+0xf8>)
 800487e:	601a      	str	r2, [r3, #0]
      break;
 8004880:	e00f      	b.n	80048a2 <LSM6DSO_ACC_GetOutputDataRate+0xd2>

    case LSM6DSO_XL_ODR_1667Hz:
      *Odr = 1667.0f;
 8004882:	683b      	ldr	r3, [r7, #0]
 8004884:	4a11      	ldr	r2, [pc, #68]	; (80048cc <LSM6DSO_ACC_GetOutputDataRate+0xfc>)
 8004886:	601a      	str	r2, [r3, #0]
      break;
 8004888:	e00b      	b.n	80048a2 <LSM6DSO_ACC_GetOutputDataRate+0xd2>

    case LSM6DSO_XL_ODR_3333Hz:
      *Odr = 3333.0f;
 800488a:	683b      	ldr	r3, [r7, #0]
 800488c:	4a10      	ldr	r2, [pc, #64]	; (80048d0 <LSM6DSO_ACC_GetOutputDataRate+0x100>)
 800488e:	601a      	str	r2, [r3, #0]
      break;
 8004890:	e007      	b.n	80048a2 <LSM6DSO_ACC_GetOutputDataRate+0xd2>

    case LSM6DSO_XL_ODR_6667Hz:
      *Odr = 6667.0f;
 8004892:	683b      	ldr	r3, [r7, #0]
 8004894:	4a0f      	ldr	r2, [pc, #60]	; (80048d4 <LSM6DSO_ACC_GetOutputDataRate+0x104>)
 8004896:	601a      	str	r2, [r3, #0]
      break;
 8004898:	e003      	b.n	80048a2 <LSM6DSO_ACC_GetOutputDataRate+0xd2>

    default:
      ret = LSM6DSO_ERROR;
 800489a:	f04f 33ff 	mov.w	r3, #4294967295
 800489e:	60fb      	str	r3, [r7, #12]
      break;
 80048a0:	bf00      	nop
  }

  return ret;
 80048a2:	68fb      	ldr	r3, [r7, #12]
}
 80048a4:	4618      	mov	r0, r3
 80048a6:	3710      	adds	r7, #16
 80048a8:	46bd      	mov	sp, r7
 80048aa:	bd80      	pop	{r7, pc}
 80048ac:	3fcccccd 	.word	0x3fcccccd
 80048b0:	41480000 	.word	0x41480000
 80048b4:	41d00000 	.word	0x41d00000
 80048b8:	42500000 	.word	0x42500000
 80048bc:	42d00000 	.word	0x42d00000
 80048c0:	43500000 	.word	0x43500000
 80048c4:	43d08000 	.word	0x43d08000
 80048c8:	44504000 	.word	0x44504000
 80048cc:	44d06000 	.word	0x44d06000
 80048d0:	45505000 	.word	0x45505000
 80048d4:	45d05800 	.word	0x45d05800

080048d8 <LSM6DSO_ACC_SetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_ACC_SetOutputDataRate(LSM6DSO_Object_t *pObj, float_t Odr)
{
 80048d8:	b580      	push	{r7, lr}
 80048da:	b082      	sub	sp, #8
 80048dc:	af00      	add	r7, sp, #0
 80048de:	6078      	str	r0, [r7, #4]
 80048e0:	ed87 0a00 	vstr	s0, [r7]
  return LSM6DSO_ACC_SetOutputDataRate_With_Mode(pObj, Odr, LSM6DSO_ACC_HIGH_PERFORMANCE_MODE);
 80048e4:	2100      	movs	r1, #0
 80048e6:	ed97 0a00 	vldr	s0, [r7]
 80048ea:	6878      	ldr	r0, [r7, #4]
 80048ec:	f000 f806 	bl	80048fc <LSM6DSO_ACC_SetOutputDataRate_With_Mode>
 80048f0:	4603      	mov	r3, r0
}
 80048f2:	4618      	mov	r0, r3
 80048f4:	3708      	adds	r7, #8
 80048f6:	46bd      	mov	sp, r7
 80048f8:	bd80      	pop	{r7, pc}
	...

080048fc <LSM6DSO_ACC_SetOutputDataRate_With_Mode>:
  * @param  Mode the accelerometer operating mode
  * @note   This function switches off the gyroscope if Ultra Low Power Mode is set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_ACC_SetOutputDataRate_With_Mode(LSM6DSO_Object_t *pObj, float_t Odr, LSM6DSO_ACC_Operating_Mode_t Mode)
{
 80048fc:	b580      	push	{r7, lr}
 80048fe:	b08c      	sub	sp, #48	; 0x30
 8004900:	af00      	add	r7, sp, #0
 8004902:	60f8      	str	r0, [r7, #12]
 8004904:	ed87 0a02 	vstr	s0, [r7, #8]
 8004908:	460b      	mov	r3, r1
 800490a:	71fb      	strb	r3, [r7, #7]
  int32_t ret = LSM6DSO_OK;
 800490c:	2300      	movs	r3, #0
 800490e:	62fb      	str	r3, [r7, #44]	; 0x2c
  float_t newOdr = Odr;
 8004910:	68bb      	ldr	r3, [r7, #8]
 8004912:	62bb      	str	r3, [r7, #40]	; 0x28

  switch (Mode)
 8004914:	79fb      	ldrb	r3, [r7, #7]
 8004916:	2b02      	cmp	r3, #2
 8004918:	f000 80ea 	beq.w	8004af0 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x1f4>
 800491c:	2b02      	cmp	r3, #2
 800491e:	f300 8163 	bgt.w	8004be8 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2ec>
 8004922:	2b00      	cmp	r3, #0
 8004924:	d002      	beq.n	800492c <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x30>
 8004926:	2b01      	cmp	r3, #1
 8004928:	d074      	beq.n	8004a14 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x118>
 800492a:	e15d      	b.n	8004be8 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2ec>
    {
      /* We must uncheck Low Power and Ultra Low Power bits if they are enabled */
      lsm6dso_ctrl5_c_t val1;
      lsm6dso_ctrl6_c_t val2;

      if (lsm6dso_read_reg(&(pObj->Ctx), LSM6DSO_CTRL5_C, (uint8_t *)&val1, 1) != LSM6DSO_OK)
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	f103 0020 	add.w	r0, r3, #32
 8004932:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8004936:	2301      	movs	r3, #1
 8004938:	2114      	movs	r1, #20
 800493a:	f000 ff9f 	bl	800587c <lsm6dso_read_reg>
 800493e:	4603      	mov	r3, r0
 8004940:	2b00      	cmp	r3, #0
 8004942:	d002      	beq.n	800494a <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x4e>
      {
        return LSM6DSO_ERROR;
 8004944:	f04f 33ff 	mov.w	r3, #4294967295
 8004948:	e16c      	b.n	8004c24 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
      }

      if (val1.xl_ulp_en != 0U)
 800494a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800494e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8004952:	b2db      	uxtb	r3, r3
 8004954:	2b00      	cmp	r3, #0
 8004956:	d025      	beq.n	80049a4 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0xa8>
      {
        /* Power off the accelerometer */
        if (pObj->acc_is_enabled == 1U)
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800495e:	2b01      	cmp	r3, #1
 8004960:	d10b      	bne.n	800497a <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x7e>
        {
          if (lsm6dso_xl_data_rate_set(&(pObj->Ctx), LSM6DSO_XL_ODR_OFF) != LSM6DSO_OK)
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	3320      	adds	r3, #32
 8004966:	2100      	movs	r1, #0
 8004968:	4618      	mov	r0, r3
 800496a:	f001 f815 	bl	8005998 <lsm6dso_xl_data_rate_set>
 800496e:	4603      	mov	r3, r0
 8004970:	2b00      	cmp	r3, #0
 8004972:	d002      	beq.n	800497a <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x7e>
          {
            return LSM6DSO_ERROR;
 8004974:	f04f 33ff 	mov.w	r3, #4294967295
 8004978:	e154      	b.n	8004c24 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
          }
        }

        val1.xl_ulp_en = 0;
 800497a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800497e:	f36f 13c7 	bfc	r3, #7, #1
 8004982:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
        if (lsm6dso_write_reg(&(pObj->Ctx), LSM6DSO_CTRL5_C, (uint8_t *)&val1, 1) != LSM6DSO_OK)
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	f103 0020 	add.w	r0, r3, #32
 800498c:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8004990:	2301      	movs	r3, #1
 8004992:	2114      	movs	r1, #20
 8004994:	f000 ff8a 	bl	80058ac <lsm6dso_write_reg>
 8004998:	4603      	mov	r3, r0
 800499a:	2b00      	cmp	r3, #0
 800499c:	d002      	beq.n	80049a4 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0xa8>
        {
          return LSM6DSO_ERROR;
 800499e:	f04f 33ff 	mov.w	r3, #4294967295
 80049a2:	e13f      	b.n	8004c24 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
        }
      }

      if (lsm6dso_read_reg(&(pObj->Ctx), LSM6DSO_CTRL6_C, (uint8_t *)&val2, 1) != LSM6DSO_OK)
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	f103 0020 	add.w	r0, r3, #32
 80049aa:	f107 0220 	add.w	r2, r7, #32
 80049ae:	2301      	movs	r3, #1
 80049b0:	2115      	movs	r1, #21
 80049b2:	f000 ff63 	bl	800587c <lsm6dso_read_reg>
 80049b6:	4603      	mov	r3, r0
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	d002      	beq.n	80049c2 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0xc6>
      {
        return LSM6DSO_ERROR;
 80049bc:	f04f 33ff 	mov.w	r3, #4294967295
 80049c0:	e130      	b.n	8004c24 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
      }

      if (val2.xl_hm_mode != 0U)
 80049c2:	f897 3020 	ldrb.w	r3, [r7, #32]
 80049c6:	f003 0310 	and.w	r3, r3, #16
 80049ca:	b2db      	uxtb	r3, r3
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	d014      	beq.n	80049fa <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0xfe>
      {
        val2.xl_hm_mode = 0U;
 80049d0:	f897 3020 	ldrb.w	r3, [r7, #32]
 80049d4:	f36f 1304 	bfc	r3, #4, #1
 80049d8:	f887 3020 	strb.w	r3, [r7, #32]
        if (lsm6dso_write_reg(&(pObj->Ctx), LSM6DSO_CTRL6_C, (uint8_t *)&val2, 1) != LSM6DSO_OK)
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	f103 0020 	add.w	r0, r3, #32
 80049e2:	f107 0220 	add.w	r2, r7, #32
 80049e6:	2301      	movs	r3, #1
 80049e8:	2115      	movs	r1, #21
 80049ea:	f000 ff5f 	bl	80058ac <lsm6dso_write_reg>
 80049ee:	4603      	mov	r3, r0
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	d002      	beq.n	80049fa <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0xfe>
        {
          return LSM6DSO_ERROR;
 80049f4:	f04f 33ff 	mov.w	r3, #4294967295
 80049f8:	e114      	b.n	8004c24 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
        }
      }

      /* ODR should be at least 12.5Hz */
      if (newOdr < 12.5f)
 80049fa:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 80049fe:	eeb2 7a09 	vmov.f32	s14, #41	; 0x41480000  12.5
 8004a02:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004a06:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004a0a:	d400      	bmi.n	8004a0e <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x112>
      {
        newOdr = 12.5f;
      }
      break;
 8004a0c:	e0f0      	b.n	8004bf0 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2f4>
        newOdr = 12.5f;
 8004a0e:	4b87      	ldr	r3, [pc, #540]	; (8004c2c <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x330>)
 8004a10:	62bb      	str	r3, [r7, #40]	; 0x28
 8004a12:	e0ed      	b.n	8004bf0 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2f4>
      /* We must uncheck Ultra Low Power bit if it is enabled */
      /* and check the Low Power bit if it is unchecked       */
      lsm6dso_ctrl5_c_t val1;
      lsm6dso_ctrl6_c_t val2;

      if (lsm6dso_read_reg(&(pObj->Ctx), LSM6DSO_CTRL5_C, (uint8_t *)&val1, 1) != LSM6DSO_OK)
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	f103 0020 	add.w	r0, r3, #32
 8004a1a:	f107 021c 	add.w	r2, r7, #28
 8004a1e:	2301      	movs	r3, #1
 8004a20:	2114      	movs	r1, #20
 8004a22:	f000 ff2b 	bl	800587c <lsm6dso_read_reg>
 8004a26:	4603      	mov	r3, r0
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d002      	beq.n	8004a32 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x136>
      {
        return LSM6DSO_ERROR;
 8004a2c:	f04f 33ff 	mov.w	r3, #4294967295
 8004a30:	e0f8      	b.n	8004c24 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
      }

      if (val1.xl_ulp_en != 0U)
 8004a32:	7f3b      	ldrb	r3, [r7, #28]
 8004a34:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8004a38:	b2db      	uxtb	r3, r3
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d023      	beq.n	8004a86 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x18a>
      {
        /* Power off the accelerometer */
        if (pObj->acc_is_enabled == 1U)
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8004a44:	2b01      	cmp	r3, #1
 8004a46:	d10b      	bne.n	8004a60 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x164>
        {
          if (lsm6dso_xl_data_rate_set(&(pObj->Ctx), LSM6DSO_XL_ODR_OFF) != LSM6DSO_OK)
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	3320      	adds	r3, #32
 8004a4c:	2100      	movs	r1, #0
 8004a4e:	4618      	mov	r0, r3
 8004a50:	f000 ffa2 	bl	8005998 <lsm6dso_xl_data_rate_set>
 8004a54:	4603      	mov	r3, r0
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d002      	beq.n	8004a60 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x164>
          {
            return LSM6DSO_ERROR;
 8004a5a:	f04f 33ff 	mov.w	r3, #4294967295
 8004a5e:	e0e1      	b.n	8004c24 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
          }
        }

        val1.xl_ulp_en = 0;
 8004a60:	7f3b      	ldrb	r3, [r7, #28]
 8004a62:	f36f 13c7 	bfc	r3, #7, #1
 8004a66:	773b      	strb	r3, [r7, #28]
        if (lsm6dso_write_reg(&(pObj->Ctx), LSM6DSO_CTRL5_C, (uint8_t *)&val1, 1) != LSM6DSO_OK)
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	f103 0020 	add.w	r0, r3, #32
 8004a6e:	f107 021c 	add.w	r2, r7, #28
 8004a72:	2301      	movs	r3, #1
 8004a74:	2114      	movs	r1, #20
 8004a76:	f000 ff19 	bl	80058ac <lsm6dso_write_reg>
 8004a7a:	4603      	mov	r3, r0
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	d002      	beq.n	8004a86 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x18a>
        {
          return LSM6DSO_ERROR;
 8004a80:	f04f 33ff 	mov.w	r3, #4294967295
 8004a84:	e0ce      	b.n	8004c24 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
        }
      }

      if (lsm6dso_read_reg(&(pObj->Ctx), LSM6DSO_CTRL6_C, (uint8_t *)&val2, 1) != LSM6DSO_OK)
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	f103 0020 	add.w	r0, r3, #32
 8004a8c:	f107 0218 	add.w	r2, r7, #24
 8004a90:	2301      	movs	r3, #1
 8004a92:	2115      	movs	r1, #21
 8004a94:	f000 fef2 	bl	800587c <lsm6dso_read_reg>
 8004a98:	4603      	mov	r3, r0
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d002      	beq.n	8004aa4 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x1a8>
      {
        return LSM6DSO_ERROR;
 8004a9e:	f04f 33ff 	mov.w	r3, #4294967295
 8004aa2:	e0bf      	b.n	8004c24 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
      }

      if (val2.xl_hm_mode == 0U)
 8004aa4:	7e3b      	ldrb	r3, [r7, #24]
 8004aa6:	f003 0310 	and.w	r3, r3, #16
 8004aaa:	b2db      	uxtb	r3, r3
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	d112      	bne.n	8004ad6 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x1da>
      {
        val2.xl_hm_mode = 1U;
 8004ab0:	7e3b      	ldrb	r3, [r7, #24]
 8004ab2:	f043 0310 	orr.w	r3, r3, #16
 8004ab6:	763b      	strb	r3, [r7, #24]
        if (lsm6dso_write_reg(&(pObj->Ctx), LSM6DSO_CTRL6_C, (uint8_t *)&val2, 1) != LSM6DSO_OK)
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	f103 0020 	add.w	r0, r3, #32
 8004abe:	f107 0218 	add.w	r2, r7, #24
 8004ac2:	2301      	movs	r3, #1
 8004ac4:	2115      	movs	r1, #21
 8004ac6:	f000 fef1 	bl	80058ac <lsm6dso_write_reg>
 8004aca:	4603      	mov	r3, r0
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	d002      	beq.n	8004ad6 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x1da>
        {
          return LSM6DSO_ERROR;
 8004ad0:	f04f 33ff 	mov.w	r3, #4294967295
 8004ad4:	e0a6      	b.n	8004c24 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
        }
      }

      /* Now we need to limit the ODR to 208 Hz if it is higher */
      if (newOdr > 208.0f)
 8004ad6:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8004ada:	ed9f 7a55 	vldr	s14, [pc, #340]	; 8004c30 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x334>
 8004ade:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004ae2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004ae6:	dc00      	bgt.n	8004aea <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x1ee>
      {
        newOdr = 208.0f;
      }
      break;
 8004ae8:	e082      	b.n	8004bf0 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2f4>
        newOdr = 208.0f;
 8004aea:	4b52      	ldr	r3, [pc, #328]	; (8004c34 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x338>)
 8004aec:	62bb      	str	r3, [r7, #40]	; 0x28
 8004aee:	e07f      	b.n	8004bf0 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2f4>
      /* and check the Ultra Low Power bit if it is unchecked             */
      /* We must switch off gyro otherwise Ultra Low Power does not work  */
      lsm6dso_ctrl5_c_t val1;
      lsm6dso_ctrl6_c_t val2;

      if (lsm6dso_read_reg(&(pObj->Ctx), LSM6DSO_CTRL6_C, (uint8_t *)&val2, 1) != LSM6DSO_OK)
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	f103 0020 	add.w	r0, r3, #32
 8004af6:	f107 0210 	add.w	r2, r7, #16
 8004afa:	2301      	movs	r3, #1
 8004afc:	2115      	movs	r1, #21
 8004afe:	f000 febd 	bl	800587c <lsm6dso_read_reg>
 8004b02:	4603      	mov	r3, r0
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	d002      	beq.n	8004b0e <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x212>
      {
        return LSM6DSO_ERROR;
 8004b08:	f04f 33ff 	mov.w	r3, #4294967295
 8004b0c:	e08a      	b.n	8004c24 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
      }

      if (val2.xl_hm_mode != 0U)
 8004b0e:	7c3b      	ldrb	r3, [r7, #16]
 8004b10:	f003 0310 	and.w	r3, r3, #16
 8004b14:	b2db      	uxtb	r3, r3
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d012      	beq.n	8004b40 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x244>
      {
        val2.xl_hm_mode = 0U;
 8004b1a:	7c3b      	ldrb	r3, [r7, #16]
 8004b1c:	f36f 1304 	bfc	r3, #4, #1
 8004b20:	743b      	strb	r3, [r7, #16]
        if (lsm6dso_write_reg(&(pObj->Ctx), LSM6DSO_CTRL6_C, (uint8_t *)&val2, 1) != LSM6DSO_OK)
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	f103 0020 	add.w	r0, r3, #32
 8004b28:	f107 0210 	add.w	r2, r7, #16
 8004b2c:	2301      	movs	r3, #1
 8004b2e:	2115      	movs	r1, #21
 8004b30:	f000 febc 	bl	80058ac <lsm6dso_write_reg>
 8004b34:	4603      	mov	r3, r0
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d002      	beq.n	8004b40 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x244>
        {
          return LSM6DSO_ERROR;
 8004b3a:	f04f 33ff 	mov.w	r3, #4294967295
 8004b3e:	e071      	b.n	8004c24 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
        }
      }

      /* Disable Gyro */
      if (pObj->gyro_is_enabled == 1U)
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8004b46:	2b01      	cmp	r3, #1
 8004b48:	d108      	bne.n	8004b5c <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x260>
      {
        if (LSM6DSO_GYRO_Disable(pObj) != LSM6DSO_OK)
 8004b4a:	68f8      	ldr	r0, [r7, #12]
 8004b4c:	f000 f979 	bl	8004e42 <LSM6DSO_GYRO_Disable>
 8004b50:	4603      	mov	r3, r0
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d002      	beq.n	8004b5c <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x260>
        {
          return LSM6DSO_ERROR;
 8004b56:	f04f 33ff 	mov.w	r3, #4294967295
 8004b5a:	e063      	b.n	8004c24 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
        }
      }

      if (lsm6dso_read_reg(&(pObj->Ctx), LSM6DSO_CTRL5_C, (uint8_t *)&val1, 1) != LSM6DSO_OK)
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	f103 0020 	add.w	r0, r3, #32
 8004b62:	f107 0214 	add.w	r2, r7, #20
 8004b66:	2301      	movs	r3, #1
 8004b68:	2114      	movs	r1, #20
 8004b6a:	f000 fe87 	bl	800587c <lsm6dso_read_reg>
 8004b6e:	4603      	mov	r3, r0
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	d002      	beq.n	8004b7a <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x27e>
      {
        return LSM6DSO_ERROR;
 8004b74:	f04f 33ff 	mov.w	r3, #4294967295
 8004b78:	e054      	b.n	8004c24 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
      }

      if (val1.xl_ulp_en == 0U)
 8004b7a:	7d3b      	ldrb	r3, [r7, #20]
 8004b7c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8004b80:	b2db      	uxtb	r3, r3
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d123      	bne.n	8004bce <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2d2>
      {
        /* Power off the accelerometer */
        if (pObj->acc_is_enabled == 1U)
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8004b8c:	2b01      	cmp	r3, #1
 8004b8e:	d10b      	bne.n	8004ba8 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2ac>
        {
          if (lsm6dso_xl_data_rate_set(&(pObj->Ctx), LSM6DSO_XL_ODR_OFF) != LSM6DSO_OK)
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	3320      	adds	r3, #32
 8004b94:	2100      	movs	r1, #0
 8004b96:	4618      	mov	r0, r3
 8004b98:	f000 fefe 	bl	8005998 <lsm6dso_xl_data_rate_set>
 8004b9c:	4603      	mov	r3, r0
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d002      	beq.n	8004ba8 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2ac>
          {
            return LSM6DSO_ERROR;
 8004ba2:	f04f 33ff 	mov.w	r3, #4294967295
 8004ba6:	e03d      	b.n	8004c24 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
          }
        }

        val1.xl_ulp_en = 1U;
 8004ba8:	7d3b      	ldrb	r3, [r7, #20]
 8004baa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004bae:	753b      	strb	r3, [r7, #20]
        if (lsm6dso_write_reg(&(pObj->Ctx), LSM6DSO_CTRL5_C, (uint8_t *)&val1, 1) != LSM6DSO_OK)
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	f103 0020 	add.w	r0, r3, #32
 8004bb6:	f107 0214 	add.w	r2, r7, #20
 8004bba:	2301      	movs	r3, #1
 8004bbc:	2114      	movs	r1, #20
 8004bbe:	f000 fe75 	bl	80058ac <lsm6dso_write_reg>
 8004bc2:	4603      	mov	r3, r0
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	d002      	beq.n	8004bce <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2d2>
        {
          return LSM6DSO_ERROR;
 8004bc8:	f04f 33ff 	mov.w	r3, #4294967295
 8004bcc:	e02a      	b.n	8004c24 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
        }
      }

      /* Now we need to limit the ODR to 208 Hz if it is higher */
      if (newOdr > 208.0f)
 8004bce:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8004bd2:	ed9f 7a17 	vldr	s14, [pc, #92]	; 8004c30 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x334>
 8004bd6:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004bda:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004bde:	dc00      	bgt.n	8004be2 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2e6>
      {
        newOdr = 208.0f;
      }
      break;
 8004be0:	e006      	b.n	8004bf0 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2f4>
        newOdr = 208.0f;
 8004be2:	4b14      	ldr	r3, [pc, #80]	; (8004c34 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x338>)
 8004be4:	62bb      	str	r3, [r7, #40]	; 0x28
 8004be6:	e003      	b.n	8004bf0 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2f4>
    }
    default:
      ret = LSM6DSO_ERROR;
 8004be8:	f04f 33ff 	mov.w	r3, #4294967295
 8004bec:	62fb      	str	r3, [r7, #44]	; 0x2c
      break;
 8004bee:	bf00      	nop
  }

  if (ret == LSM6DSO_ERROR)
 8004bf0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004bf2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004bf6:	d102      	bne.n	8004bfe <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x302>
  {
    return LSM6DSO_ERROR;
 8004bf8:	f04f 33ff 	mov.w	r3, #4294967295
 8004bfc:	e012      	b.n	8004c24 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
  }

  if (pObj->acc_is_enabled == 1U)
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8004c04:	2b01      	cmp	r3, #1
 8004c06:	d106      	bne.n	8004c16 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x31a>
  {
    ret = LSM6DSO_ACC_SetOutputDataRate_When_Enabled(pObj, newOdr);
 8004c08:	ed97 0a0a 	vldr	s0, [r7, #40]	; 0x28
 8004c0c:	68f8      	ldr	r0, [r7, #12]
 8004c0e:	f000 fbc9 	bl	80053a4 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled>
 8004c12:	62f8      	str	r0, [r7, #44]	; 0x2c
 8004c14:	e005      	b.n	8004c22 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x326>
  }
  else
  {
    ret = LSM6DSO_ACC_SetOutputDataRate_When_Disabled(pObj, newOdr);
 8004c16:	ed97 0a0a 	vldr	s0, [r7, #40]	; 0x28
 8004c1a:	68f8      	ldr	r0, [r7, #12]
 8004c1c:	f000 fc5a 	bl	80054d4 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled>
 8004c20:	62f8      	str	r0, [r7, #44]	; 0x2c
  }

  return ret;
 8004c22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8004c24:	4618      	mov	r0, r3
 8004c26:	3730      	adds	r7, #48	; 0x30
 8004c28:	46bd      	mov	sp, r7
 8004c2a:	bd80      	pop	{r7, pc}
 8004c2c:	41480000 	.word	0x41480000
 8004c30:	43500000 	.word	0x43500000
 8004c34:	43500000 	.word	0x43500000

08004c38 <LSM6DSO_ACC_GetFullScale>:
  * @param  pObj the device pObj
  * @param  FullScale pointer where the full scale is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_ACC_GetFullScale(LSM6DSO_Object_t *pObj, int32_t *FullScale)
{
 8004c38:	b580      	push	{r7, lr}
 8004c3a:	b084      	sub	sp, #16
 8004c3c:	af00      	add	r7, sp, #0
 8004c3e:	6078      	str	r0, [r7, #4]
 8004c40:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSO_OK;
 8004c42:	2300      	movs	r3, #0
 8004c44:	60fb      	str	r3, [r7, #12]
  lsm6dso_fs_xl_t fs_low_level;

  /* Read actual full scale selection from sensor. */
  if (lsm6dso_xl_full_scale_get(&(pObj->Ctx), &fs_low_level) != LSM6DSO_OK)
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	3320      	adds	r3, #32
 8004c4a:	f107 020b 	add.w	r2, r7, #11
 8004c4e:	4611      	mov	r1, r2
 8004c50:	4618      	mov	r0, r3
 8004c52:	f000 fe69 	bl	8005928 <lsm6dso_xl_full_scale_get>
 8004c56:	4603      	mov	r3, r0
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	d002      	beq.n	8004c62 <LSM6DSO_ACC_GetFullScale+0x2a>
  {
    return LSM6DSO_ERROR;
 8004c5c:	f04f 33ff 	mov.w	r3, #4294967295
 8004c60:	e023      	b.n	8004caa <LSM6DSO_ACC_GetFullScale+0x72>
  }

  switch (fs_low_level)
 8004c62:	7afb      	ldrb	r3, [r7, #11]
 8004c64:	2b03      	cmp	r3, #3
 8004c66:	d81b      	bhi.n	8004ca0 <LSM6DSO_ACC_GetFullScale+0x68>
 8004c68:	a201      	add	r2, pc, #4	; (adr r2, 8004c70 <LSM6DSO_ACC_GetFullScale+0x38>)
 8004c6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c6e:	bf00      	nop
 8004c70:	08004c81 	.word	0x08004c81
 8004c74:	08004c99 	.word	0x08004c99
 8004c78:	08004c89 	.word	0x08004c89
 8004c7c:	08004c91 	.word	0x08004c91
  {
    case LSM6DSO_2g:
      *FullScale =  2;
 8004c80:	683b      	ldr	r3, [r7, #0]
 8004c82:	2202      	movs	r2, #2
 8004c84:	601a      	str	r2, [r3, #0]
      break;
 8004c86:	e00f      	b.n	8004ca8 <LSM6DSO_ACC_GetFullScale+0x70>

    case LSM6DSO_4g:
      *FullScale =  4;
 8004c88:	683b      	ldr	r3, [r7, #0]
 8004c8a:	2204      	movs	r2, #4
 8004c8c:	601a      	str	r2, [r3, #0]
      break;
 8004c8e:	e00b      	b.n	8004ca8 <LSM6DSO_ACC_GetFullScale+0x70>

    case LSM6DSO_8g:
      *FullScale =  8;
 8004c90:	683b      	ldr	r3, [r7, #0]
 8004c92:	2208      	movs	r2, #8
 8004c94:	601a      	str	r2, [r3, #0]
      break;
 8004c96:	e007      	b.n	8004ca8 <LSM6DSO_ACC_GetFullScale+0x70>

    case LSM6DSO_16g:
      *FullScale = 16;
 8004c98:	683b      	ldr	r3, [r7, #0]
 8004c9a:	2210      	movs	r2, #16
 8004c9c:	601a      	str	r2, [r3, #0]
      break;
 8004c9e:	e003      	b.n	8004ca8 <LSM6DSO_ACC_GetFullScale+0x70>

    default:
      ret = LSM6DSO_ERROR;
 8004ca0:	f04f 33ff 	mov.w	r3, #4294967295
 8004ca4:	60fb      	str	r3, [r7, #12]
      break;
 8004ca6:	bf00      	nop
  }

  return ret;
 8004ca8:	68fb      	ldr	r3, [r7, #12]
}
 8004caa:	4618      	mov	r0, r3
 8004cac:	3710      	adds	r7, #16
 8004cae:	46bd      	mov	sp, r7
 8004cb0:	bd80      	pop	{r7, pc}
 8004cb2:	bf00      	nop

08004cb4 <LSM6DSO_ACC_SetFullScale>:
  * @param  pObj the device pObj
  * @param  FullScale the functional full scale to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_ACC_SetFullScale(LSM6DSO_Object_t *pObj, int32_t FullScale)
{
 8004cb4:	b580      	push	{r7, lr}
 8004cb6:	b084      	sub	sp, #16
 8004cb8:	af00      	add	r7, sp, #0
 8004cba:	6078      	str	r0, [r7, #4]
 8004cbc:	6039      	str	r1, [r7, #0]
  lsm6dso_fs_xl_t new_fs;

  /* Seems like MISRA C-2012 rule 14.3a violation but only from single file statical analysis point of view because
     the parameter passed to the function is not known at the moment of analysis */
  new_fs = (FullScale <= 2) ? LSM6DSO_2g
           : (FullScale <= 4) ? LSM6DSO_4g
 8004cbe:	683b      	ldr	r3, [r7, #0]
 8004cc0:	2b02      	cmp	r3, #2
 8004cc2:	dd0b      	ble.n	8004cdc <LSM6DSO_ACC_SetFullScale+0x28>
 8004cc4:	683b      	ldr	r3, [r7, #0]
 8004cc6:	2b04      	cmp	r3, #4
 8004cc8:	dd06      	ble.n	8004cd8 <LSM6DSO_ACC_SetFullScale+0x24>
 8004cca:	683b      	ldr	r3, [r7, #0]
 8004ccc:	2b08      	cmp	r3, #8
 8004cce:	dc01      	bgt.n	8004cd4 <LSM6DSO_ACC_SetFullScale+0x20>
 8004cd0:	2303      	movs	r3, #3
 8004cd2:	e004      	b.n	8004cde <LSM6DSO_ACC_SetFullScale+0x2a>
 8004cd4:	2301      	movs	r3, #1
 8004cd6:	e002      	b.n	8004cde <LSM6DSO_ACC_SetFullScale+0x2a>
 8004cd8:	2302      	movs	r3, #2
 8004cda:	e000      	b.n	8004cde <LSM6DSO_ACC_SetFullScale+0x2a>
 8004cdc:	2300      	movs	r3, #0
  new_fs = (FullScale <= 2) ? LSM6DSO_2g
 8004cde:	73fb      	strb	r3, [r7, #15]
           : (FullScale <= 8) ? LSM6DSO_8g
           :                    LSM6DSO_16g;

  if (lsm6dso_xl_full_scale_set(&(pObj->Ctx), new_fs) != LSM6DSO_OK)
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	3320      	adds	r3, #32
 8004ce4:	7bfa      	ldrb	r2, [r7, #15]
 8004ce6:	4611      	mov	r1, r2
 8004ce8:	4618      	mov	r0, r3
 8004cea:	f000 fdf7 	bl	80058dc <lsm6dso_xl_full_scale_set>
 8004cee:	4603      	mov	r3, r0
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	d002      	beq.n	8004cfa <LSM6DSO_ACC_SetFullScale+0x46>
  {
    return LSM6DSO_ERROR;
 8004cf4:	f04f 33ff 	mov.w	r3, #4294967295
 8004cf8:	e000      	b.n	8004cfc <LSM6DSO_ACC_SetFullScale+0x48>
  }

  return LSM6DSO_OK;
 8004cfa:	2300      	movs	r3, #0
}
 8004cfc:	4618      	mov	r0, r3
 8004cfe:	3710      	adds	r7, #16
 8004d00:	46bd      	mov	sp, r7
 8004d02:	bd80      	pop	{r7, pc}

08004d04 <LSM6DSO_ACC_GetAxesRaw>:
  * @param  pObj the device pObj
  * @param  Value pointer where the raw values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_ACC_GetAxesRaw(LSM6DSO_Object_t *pObj, LSM6DSO_AxesRaw_t *Value)
{
 8004d04:	b580      	push	{r7, lr}
 8004d06:	b084      	sub	sp, #16
 8004d08:	af00      	add	r7, sp, #0
 8004d0a:	6078      	str	r0, [r7, #4]
 8004d0c:	6039      	str	r1, [r7, #0]
  lsm6dso_axis3bit16_t data_raw;

  /* Read raw data values. */
  if (lsm6dso_acceleration_raw_get(&(pObj->Ctx), data_raw.i16bit) != LSM6DSO_OK)
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	3320      	adds	r3, #32
 8004d12:	f107 0208 	add.w	r2, r7, #8
 8004d16:	4611      	mov	r1, r2
 8004d18:	4618      	mov	r0, r3
 8004d1a:	f001 f9d8 	bl	80060ce <lsm6dso_acceleration_raw_get>
 8004d1e:	4603      	mov	r3, r0
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	d002      	beq.n	8004d2a <LSM6DSO_ACC_GetAxesRaw+0x26>
  {
    return LSM6DSO_ERROR;
 8004d24:	f04f 33ff 	mov.w	r3, #4294967295
 8004d28:	e00c      	b.n	8004d44 <LSM6DSO_ACC_GetAxesRaw+0x40>
  }

  /* Format the data. */
  Value->x = data_raw.i16bit[0];
 8004d2a:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8004d2e:	683b      	ldr	r3, [r7, #0]
 8004d30:	801a      	strh	r2, [r3, #0]
  Value->y = data_raw.i16bit[1];
 8004d32:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8004d36:	683b      	ldr	r3, [r7, #0]
 8004d38:	805a      	strh	r2, [r3, #2]
  Value->z = data_raw.i16bit[2];
 8004d3a:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8004d3e:	683b      	ldr	r3, [r7, #0]
 8004d40:	809a      	strh	r2, [r3, #4]

  return LSM6DSO_OK;
 8004d42:	2300      	movs	r3, #0
}
 8004d44:	4618      	mov	r0, r3
 8004d46:	3710      	adds	r7, #16
 8004d48:	46bd      	mov	sp, r7
 8004d4a:	bd80      	pop	{r7, pc}

08004d4c <LSM6DSO_ACC_GetAxes>:
  * @param  pObj the device pObj
  * @param  Acceleration pointer where the values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_ACC_GetAxes(LSM6DSO_Object_t *pObj, LSM6DSO_Axes_t *Acceleration)
{
 8004d4c:	b580      	push	{r7, lr}
 8004d4e:	b086      	sub	sp, #24
 8004d50:	af00      	add	r7, sp, #0
 8004d52:	6078      	str	r0, [r7, #4]
 8004d54:	6039      	str	r1, [r7, #0]
  lsm6dso_axis3bit16_t data_raw;
  float_t sensitivity = 0.0f;
 8004d56:	f04f 0300 	mov.w	r3, #0
 8004d5a:	60fb      	str	r3, [r7, #12]

  /* Read raw data values. */
  if (lsm6dso_acceleration_raw_get(&(pObj->Ctx), data_raw.i16bit) != LSM6DSO_OK)
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	3320      	adds	r3, #32
 8004d60:	f107 0210 	add.w	r2, r7, #16
 8004d64:	4611      	mov	r1, r2
 8004d66:	4618      	mov	r0, r3
 8004d68:	f001 f9b1 	bl	80060ce <lsm6dso_acceleration_raw_get>
 8004d6c:	4603      	mov	r3, r0
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d002      	beq.n	8004d78 <LSM6DSO_ACC_GetAxes+0x2c>
  {
    return LSM6DSO_ERROR;
 8004d72:	f04f 33ff 	mov.w	r3, #4294967295
 8004d76:	e03c      	b.n	8004df2 <LSM6DSO_ACC_GetAxes+0xa6>
  }

  /* Get LSM6DSO actual sensitivity. */
  if (LSM6DSO_ACC_GetSensitivity(pObj, &sensitivity) != LSM6DSO_OK)
 8004d78:	f107 030c 	add.w	r3, r7, #12
 8004d7c:	4619      	mov	r1, r3
 8004d7e:	6878      	ldr	r0, [r7, #4]
 8004d80:	f7ff fce0 	bl	8004744 <LSM6DSO_ACC_GetSensitivity>
 8004d84:	4603      	mov	r3, r0
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d002      	beq.n	8004d90 <LSM6DSO_ACC_GetAxes+0x44>
  {
    return LSM6DSO_ERROR;
 8004d8a:	f04f 33ff 	mov.w	r3, #4294967295
 8004d8e:	e030      	b.n	8004df2 <LSM6DSO_ACC_GetAxes+0xa6>
  }

  /* Calculate the data. */
  Acceleration->x = (int32_t)((float_t)((float_t)data_raw.i16bit[0] * sensitivity));
 8004d90:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8004d94:	ee07 3a90 	vmov	s15, r3
 8004d98:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004d9c:	edd7 7a03 	vldr	s15, [r7, #12]
 8004da0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004da4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004da8:	ee17 2a90 	vmov	r2, s15
 8004dac:	683b      	ldr	r3, [r7, #0]
 8004dae:	601a      	str	r2, [r3, #0]
  Acceleration->y = (int32_t)((float_t)((float_t)data_raw.i16bit[1] * sensitivity));
 8004db0:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8004db4:	ee07 3a90 	vmov	s15, r3
 8004db8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004dbc:	edd7 7a03 	vldr	s15, [r7, #12]
 8004dc0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004dc4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004dc8:	ee17 2a90 	vmov	r2, s15
 8004dcc:	683b      	ldr	r3, [r7, #0]
 8004dce:	605a      	str	r2, [r3, #4]
  Acceleration->z = (int32_t)((float_t)((float_t)data_raw.i16bit[2] * sensitivity));
 8004dd0:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8004dd4:	ee07 3a90 	vmov	s15, r3
 8004dd8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004ddc:	edd7 7a03 	vldr	s15, [r7, #12]
 8004de0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004de4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004de8:	ee17 2a90 	vmov	r2, s15
 8004dec:	683b      	ldr	r3, [r7, #0]
 8004dee:	609a      	str	r2, [r3, #8]

  return LSM6DSO_OK;
 8004df0:	2300      	movs	r3, #0
}
 8004df2:	4618      	mov	r0, r3
 8004df4:	3718      	adds	r7, #24
 8004df6:	46bd      	mov	sp, r7
 8004df8:	bd80      	pop	{r7, pc}

08004dfa <LSM6DSO_GYRO_Enable>:
  * @brief  Enable the LSM6DSO gyroscope sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_GYRO_Enable(LSM6DSO_Object_t *pObj)
{
 8004dfa:	b580      	push	{r7, lr}
 8004dfc:	b082      	sub	sp, #8
 8004dfe:	af00      	add	r7, sp, #0
 8004e00:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->gyro_is_enabled == 1U)
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8004e08:	2b01      	cmp	r3, #1
 8004e0a:	d101      	bne.n	8004e10 <LSM6DSO_GYRO_Enable+0x16>
  {
    return LSM6DSO_OK;
 8004e0c:	2300      	movs	r3, #0
 8004e0e:	e014      	b.n	8004e3a <LSM6DSO_GYRO_Enable+0x40>
  }

  /* Output data rate selection. */
  if (lsm6dso_gy_data_rate_set(&(pObj->Ctx), pObj->gyro_odr) != LSM6DSO_OK)
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	f103 0220 	add.w	r2, r3, #32
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8004e1c:	4619      	mov	r1, r3
 8004e1e:	4610      	mov	r0, r2
 8004e20:	f000 ff86 	bl	8005d30 <lsm6dso_gy_data_rate_set>
 8004e24:	4603      	mov	r3, r0
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d002      	beq.n	8004e30 <LSM6DSO_GYRO_Enable+0x36>
  {
    return LSM6DSO_ERROR;
 8004e2a:	f04f 33ff 	mov.w	r3, #4294967295
 8004e2e:	e004      	b.n	8004e3a <LSM6DSO_GYRO_Enable+0x40>
  }

  pObj->gyro_is_enabled = 1;
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	2201      	movs	r2, #1
 8004e34:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32

  return LSM6DSO_OK;
 8004e38:	2300      	movs	r3, #0
}
 8004e3a:	4618      	mov	r0, r3
 8004e3c:	3708      	adds	r7, #8
 8004e3e:	46bd      	mov	sp, r7
 8004e40:	bd80      	pop	{r7, pc}

08004e42 <LSM6DSO_GYRO_Disable>:
  * @brief  Disable the LSM6DSO gyroscope sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_GYRO_Disable(LSM6DSO_Object_t *pObj)
{
 8004e42:	b580      	push	{r7, lr}
 8004e44:	b082      	sub	sp, #8
 8004e46:	af00      	add	r7, sp, #0
 8004e48:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->gyro_is_enabled == 0U)
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	d101      	bne.n	8004e58 <LSM6DSO_GYRO_Disable+0x16>
  {
    return LSM6DSO_OK;
 8004e54:	2300      	movs	r3, #0
 8004e56:	e01f      	b.n	8004e98 <LSM6DSO_GYRO_Disable+0x56>
  }

  /* Get current output data rate. */
  if (lsm6dso_gy_data_rate_get(&(pObj->Ctx), &pObj->gyro_odr) != LSM6DSO_OK)
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	f103 0220 	add.w	r2, r3, #32
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	3334      	adds	r3, #52	; 0x34
 8004e62:	4619      	mov	r1, r3
 8004e64:	4610      	mov	r0, r2
 8004e66:	f001 f85f 	bl	8005f28 <lsm6dso_gy_data_rate_get>
 8004e6a:	4603      	mov	r3, r0
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	d002      	beq.n	8004e76 <LSM6DSO_GYRO_Disable+0x34>
  {
    return LSM6DSO_ERROR;
 8004e70:	f04f 33ff 	mov.w	r3, #4294967295
 8004e74:	e010      	b.n	8004e98 <LSM6DSO_GYRO_Disable+0x56>
  }

  /* Output data rate selection - power down. */
  if (lsm6dso_gy_data_rate_set(&(pObj->Ctx), LSM6DSO_GY_ODR_OFF) != LSM6DSO_OK)
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	3320      	adds	r3, #32
 8004e7a:	2100      	movs	r1, #0
 8004e7c:	4618      	mov	r0, r3
 8004e7e:	f000 ff57 	bl	8005d30 <lsm6dso_gy_data_rate_set>
 8004e82:	4603      	mov	r3, r0
 8004e84:	2b00      	cmp	r3, #0
 8004e86:	d002      	beq.n	8004e8e <LSM6DSO_GYRO_Disable+0x4c>
  {
    return LSM6DSO_ERROR;
 8004e88:	f04f 33ff 	mov.w	r3, #4294967295
 8004e8c:	e004      	b.n	8004e98 <LSM6DSO_GYRO_Disable+0x56>
  }

  pObj->gyro_is_enabled = 0;
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	2200      	movs	r2, #0
 8004e92:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32

  return LSM6DSO_OK;
 8004e96:	2300      	movs	r3, #0
}
 8004e98:	4618      	mov	r0, r3
 8004e9a:	3708      	adds	r7, #8
 8004e9c:	46bd      	mov	sp, r7
 8004e9e:	bd80      	pop	{r7, pc}

08004ea0 <LSM6DSO_GYRO_GetSensitivity>:
  * @param  pObj the device pObj
  * @param  Sensitivity pointer
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_GYRO_GetSensitivity(LSM6DSO_Object_t *pObj, float_t *Sensitivity)
{
 8004ea0:	b580      	push	{r7, lr}
 8004ea2:	b084      	sub	sp, #16
 8004ea4:	af00      	add	r7, sp, #0
 8004ea6:	6078      	str	r0, [r7, #4]
 8004ea8:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSO_OK;
 8004eaa:	2300      	movs	r3, #0
 8004eac:	60fb      	str	r3, [r7, #12]
  lsm6dso_fs_g_t full_scale;

  /* Read actual full scale selection from sensor. */
  if (lsm6dso_gy_full_scale_get(&(pObj->Ctx), &full_scale) != LSM6DSO_OK)
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	3320      	adds	r3, #32
 8004eb2:	f107 020b 	add.w	r2, r7, #11
 8004eb6:	4611      	mov	r1, r2
 8004eb8:	4618      	mov	r0, r3
 8004eba:	f000 fef7 	bl	8005cac <lsm6dso_gy_full_scale_get>
 8004ebe:	4603      	mov	r3, r0
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	d002      	beq.n	8004eca <LSM6DSO_GYRO_GetSensitivity+0x2a>
  {
    return LSM6DSO_ERROR;
 8004ec4:	f04f 33ff 	mov.w	r3, #4294967295
 8004ec8:	e02d      	b.n	8004f26 <LSM6DSO_GYRO_GetSensitivity+0x86>
  }

  /* Store the sensitivity based on actual full scale. */
  switch (full_scale)
 8004eca:	7afb      	ldrb	r3, [r7, #11]
 8004ecc:	2b06      	cmp	r3, #6
 8004ece:	d825      	bhi.n	8004f1c <LSM6DSO_GYRO_GetSensitivity+0x7c>
 8004ed0:	a201      	add	r2, pc, #4	; (adr r2, 8004ed8 <LSM6DSO_GYRO_GetSensitivity+0x38>)
 8004ed2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ed6:	bf00      	nop
 8004ed8:	08004efd 	.word	0x08004efd
 8004edc:	08004ef5 	.word	0x08004ef5
 8004ee0:	08004f05 	.word	0x08004f05
 8004ee4:	08004f1d 	.word	0x08004f1d
 8004ee8:	08004f0d 	.word	0x08004f0d
 8004eec:	08004f1d 	.word	0x08004f1d
 8004ef0:	08004f15 	.word	0x08004f15
  {
    case LSM6DSO_125dps:
      *Sensitivity = LSM6DSO_GYRO_SENSITIVITY_FS_125DPS;
 8004ef4:	683b      	ldr	r3, [r7, #0]
 8004ef6:	4a0e      	ldr	r2, [pc, #56]	; (8004f30 <LSM6DSO_GYRO_GetSensitivity+0x90>)
 8004ef8:	601a      	str	r2, [r3, #0]
      break;
 8004efa:	e013      	b.n	8004f24 <LSM6DSO_GYRO_GetSensitivity+0x84>

    case LSM6DSO_250dps:
      *Sensitivity = LSM6DSO_GYRO_SENSITIVITY_FS_250DPS;
 8004efc:	683b      	ldr	r3, [r7, #0]
 8004efe:	4a0d      	ldr	r2, [pc, #52]	; (8004f34 <LSM6DSO_GYRO_GetSensitivity+0x94>)
 8004f00:	601a      	str	r2, [r3, #0]
      break;
 8004f02:	e00f      	b.n	8004f24 <LSM6DSO_GYRO_GetSensitivity+0x84>

    case LSM6DSO_500dps:
      *Sensitivity = LSM6DSO_GYRO_SENSITIVITY_FS_500DPS;
 8004f04:	683b      	ldr	r3, [r7, #0]
 8004f06:	4a0c      	ldr	r2, [pc, #48]	; (8004f38 <LSM6DSO_GYRO_GetSensitivity+0x98>)
 8004f08:	601a      	str	r2, [r3, #0]
      break;
 8004f0a:	e00b      	b.n	8004f24 <LSM6DSO_GYRO_GetSensitivity+0x84>

    case LSM6DSO_1000dps:
      *Sensitivity = LSM6DSO_GYRO_SENSITIVITY_FS_1000DPS;
 8004f0c:	683b      	ldr	r3, [r7, #0]
 8004f0e:	4a0b      	ldr	r2, [pc, #44]	; (8004f3c <LSM6DSO_GYRO_GetSensitivity+0x9c>)
 8004f10:	601a      	str	r2, [r3, #0]
      break;
 8004f12:	e007      	b.n	8004f24 <LSM6DSO_GYRO_GetSensitivity+0x84>

    case LSM6DSO_2000dps:
      *Sensitivity = LSM6DSO_GYRO_SENSITIVITY_FS_2000DPS;
 8004f14:	683b      	ldr	r3, [r7, #0]
 8004f16:	4a0a      	ldr	r2, [pc, #40]	; (8004f40 <LSM6DSO_GYRO_GetSensitivity+0xa0>)
 8004f18:	601a      	str	r2, [r3, #0]
      break;
 8004f1a:	e003      	b.n	8004f24 <LSM6DSO_GYRO_GetSensitivity+0x84>

    default:
      ret = LSM6DSO_ERROR;
 8004f1c:	f04f 33ff 	mov.w	r3, #4294967295
 8004f20:	60fb      	str	r3, [r7, #12]
      break;
 8004f22:	bf00      	nop
  }

  return ret;
 8004f24:	68fb      	ldr	r3, [r7, #12]
}
 8004f26:	4618      	mov	r0, r3
 8004f28:	3710      	adds	r7, #16
 8004f2a:	46bd      	mov	sp, r7
 8004f2c:	bd80      	pop	{r7, pc}
 8004f2e:	bf00      	nop
 8004f30:	408c0000 	.word	0x408c0000
 8004f34:	410c0000 	.word	0x410c0000
 8004f38:	418c0000 	.word	0x418c0000
 8004f3c:	420c0000 	.word	0x420c0000
 8004f40:	428c0000 	.word	0x428c0000

08004f44 <LSM6DSO_GYRO_GetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr pointer where the output data rate is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_GYRO_GetOutputDataRate(LSM6DSO_Object_t *pObj, float_t *Odr)
{
 8004f44:	b580      	push	{r7, lr}
 8004f46:	b084      	sub	sp, #16
 8004f48:	af00      	add	r7, sp, #0
 8004f4a:	6078      	str	r0, [r7, #4]
 8004f4c:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSO_OK;
 8004f4e:	2300      	movs	r3, #0
 8004f50:	60fb      	str	r3, [r7, #12]
  lsm6dso_odr_g_t odr_low_level;

  /* Get current output data rate. */
  if (lsm6dso_gy_data_rate_get(&(pObj->Ctx), &odr_low_level) != LSM6DSO_OK)
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	3320      	adds	r3, #32
 8004f56:	f107 020b 	add.w	r2, r7, #11
 8004f5a:	4611      	mov	r1, r2
 8004f5c:	4618      	mov	r0, r3
 8004f5e:	f000 ffe3 	bl	8005f28 <lsm6dso_gy_data_rate_get>
 8004f62:	4603      	mov	r3, r0
 8004f64:	2b00      	cmp	r3, #0
 8004f66:	d002      	beq.n	8004f6e <LSM6DSO_GYRO_GetOutputDataRate+0x2a>
  {
    return LSM6DSO_ERROR;
 8004f68:	f04f 33ff 	mov.w	r3, #4294967295
 8004f6c:	e04e      	b.n	800500c <LSM6DSO_GYRO_GetOutputDataRate+0xc8>
  }

  switch (odr_low_level)
 8004f6e:	7afb      	ldrb	r3, [r7, #11]
 8004f70:	2b0a      	cmp	r3, #10
 8004f72:	d846      	bhi.n	8005002 <LSM6DSO_GYRO_GetOutputDataRate+0xbe>
 8004f74:	a201      	add	r2, pc, #4	; (adr r2, 8004f7c <LSM6DSO_GYRO_GetOutputDataRate+0x38>)
 8004f76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f7a:	bf00      	nop
 8004f7c:	08004fa9 	.word	0x08004fa9
 8004f80:	08004fb3 	.word	0x08004fb3
 8004f84:	08004fbb 	.word	0x08004fbb
 8004f88:	08004fc3 	.word	0x08004fc3
 8004f8c:	08004fcb 	.word	0x08004fcb
 8004f90:	08004fd3 	.word	0x08004fd3
 8004f94:	08004fdb 	.word	0x08004fdb
 8004f98:	08004fe3 	.word	0x08004fe3
 8004f9c:	08004feb 	.word	0x08004feb
 8004fa0:	08004ff3 	.word	0x08004ff3
 8004fa4:	08004ffb 	.word	0x08004ffb
  {
    case LSM6DSO_GY_ODR_OFF:
      *Odr = 0.0f;
 8004fa8:	683b      	ldr	r3, [r7, #0]
 8004faa:	f04f 0200 	mov.w	r2, #0
 8004fae:	601a      	str	r2, [r3, #0]
      break;
 8004fb0:	e02b      	b.n	800500a <LSM6DSO_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSO_GY_ODR_12Hz5:
      *Odr = 12.5f;
 8004fb2:	683b      	ldr	r3, [r7, #0]
 8004fb4:	4a17      	ldr	r2, [pc, #92]	; (8005014 <LSM6DSO_GYRO_GetOutputDataRate+0xd0>)
 8004fb6:	601a      	str	r2, [r3, #0]
      break;
 8004fb8:	e027      	b.n	800500a <LSM6DSO_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSO_GY_ODR_26Hz:
      *Odr = 26.0f;
 8004fba:	683b      	ldr	r3, [r7, #0]
 8004fbc:	4a16      	ldr	r2, [pc, #88]	; (8005018 <LSM6DSO_GYRO_GetOutputDataRate+0xd4>)
 8004fbe:	601a      	str	r2, [r3, #0]
      break;
 8004fc0:	e023      	b.n	800500a <LSM6DSO_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSO_GY_ODR_52Hz:
      *Odr = 52.0f;
 8004fc2:	683b      	ldr	r3, [r7, #0]
 8004fc4:	4a15      	ldr	r2, [pc, #84]	; (800501c <LSM6DSO_GYRO_GetOutputDataRate+0xd8>)
 8004fc6:	601a      	str	r2, [r3, #0]
      break;
 8004fc8:	e01f      	b.n	800500a <LSM6DSO_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSO_GY_ODR_104Hz:
      *Odr = 104.0f;
 8004fca:	683b      	ldr	r3, [r7, #0]
 8004fcc:	4a14      	ldr	r2, [pc, #80]	; (8005020 <LSM6DSO_GYRO_GetOutputDataRate+0xdc>)
 8004fce:	601a      	str	r2, [r3, #0]
      break;
 8004fd0:	e01b      	b.n	800500a <LSM6DSO_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSO_GY_ODR_208Hz:
      *Odr = 208.0f;
 8004fd2:	683b      	ldr	r3, [r7, #0]
 8004fd4:	4a13      	ldr	r2, [pc, #76]	; (8005024 <LSM6DSO_GYRO_GetOutputDataRate+0xe0>)
 8004fd6:	601a      	str	r2, [r3, #0]
      break;
 8004fd8:	e017      	b.n	800500a <LSM6DSO_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSO_GY_ODR_417Hz:
      *Odr = 417.0f;
 8004fda:	683b      	ldr	r3, [r7, #0]
 8004fdc:	4a12      	ldr	r2, [pc, #72]	; (8005028 <LSM6DSO_GYRO_GetOutputDataRate+0xe4>)
 8004fde:	601a      	str	r2, [r3, #0]
      break;
 8004fe0:	e013      	b.n	800500a <LSM6DSO_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSO_GY_ODR_833Hz:
      *Odr = 833.0f;
 8004fe2:	683b      	ldr	r3, [r7, #0]
 8004fe4:	4a11      	ldr	r2, [pc, #68]	; (800502c <LSM6DSO_GYRO_GetOutputDataRate+0xe8>)
 8004fe6:	601a      	str	r2, [r3, #0]
      break;
 8004fe8:	e00f      	b.n	800500a <LSM6DSO_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSO_GY_ODR_1667Hz:
      *Odr = 1667.0f;
 8004fea:	683b      	ldr	r3, [r7, #0]
 8004fec:	4a10      	ldr	r2, [pc, #64]	; (8005030 <LSM6DSO_GYRO_GetOutputDataRate+0xec>)
 8004fee:	601a      	str	r2, [r3, #0]
      break;
 8004ff0:	e00b      	b.n	800500a <LSM6DSO_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSO_GY_ODR_3333Hz:
      *Odr = 3333.0f;
 8004ff2:	683b      	ldr	r3, [r7, #0]
 8004ff4:	4a0f      	ldr	r2, [pc, #60]	; (8005034 <LSM6DSO_GYRO_GetOutputDataRate+0xf0>)
 8004ff6:	601a      	str	r2, [r3, #0]
      break;
 8004ff8:	e007      	b.n	800500a <LSM6DSO_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSO_GY_ODR_6667Hz:
      *Odr = 6667.0f;
 8004ffa:	683b      	ldr	r3, [r7, #0]
 8004ffc:	4a0e      	ldr	r2, [pc, #56]	; (8005038 <LSM6DSO_GYRO_GetOutputDataRate+0xf4>)
 8004ffe:	601a      	str	r2, [r3, #0]
      break;
 8005000:	e003      	b.n	800500a <LSM6DSO_GYRO_GetOutputDataRate+0xc6>

    default:
      ret = LSM6DSO_ERROR;
 8005002:	f04f 33ff 	mov.w	r3, #4294967295
 8005006:	60fb      	str	r3, [r7, #12]
      break;
 8005008:	bf00      	nop
  }

  return ret;
 800500a:	68fb      	ldr	r3, [r7, #12]
}
 800500c:	4618      	mov	r0, r3
 800500e:	3710      	adds	r7, #16
 8005010:	46bd      	mov	sp, r7
 8005012:	bd80      	pop	{r7, pc}
 8005014:	41480000 	.word	0x41480000
 8005018:	41d00000 	.word	0x41d00000
 800501c:	42500000 	.word	0x42500000
 8005020:	42d00000 	.word	0x42d00000
 8005024:	43500000 	.word	0x43500000
 8005028:	43d08000 	.word	0x43d08000
 800502c:	44504000 	.word	0x44504000
 8005030:	44d06000 	.word	0x44d06000
 8005034:	45505000 	.word	0x45505000
 8005038:	45d05800 	.word	0x45d05800

0800503c <LSM6DSO_GYRO_SetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_GYRO_SetOutputDataRate(LSM6DSO_Object_t *pObj, float_t Odr)
{
 800503c:	b580      	push	{r7, lr}
 800503e:	b082      	sub	sp, #8
 8005040:	af00      	add	r7, sp, #0
 8005042:	6078      	str	r0, [r7, #4]
 8005044:	ed87 0a00 	vstr	s0, [r7]
  return LSM6DSO_GYRO_SetOutputDataRate_With_Mode(pObj, Odr, LSM6DSO_GYRO_HIGH_PERFORMANCE_MODE);
 8005048:	2100      	movs	r1, #0
 800504a:	ed97 0a00 	vldr	s0, [r7]
 800504e:	6878      	ldr	r0, [r7, #4]
 8005050:	f000 f806 	bl	8005060 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode>
 8005054:	4603      	mov	r3, r0
}
 8005056:	4618      	mov	r0, r3
 8005058:	3708      	adds	r7, #8
 800505a:	46bd      	mov	sp, r7
 800505c:	bd80      	pop	{r7, pc}
	...

08005060 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode>:
  * @param  Mode the gyroscope operating mode
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_GYRO_SetOutputDataRate_With_Mode(LSM6DSO_Object_t *pObj, float_t Odr,
                                                 LSM6DSO_GYRO_Operating_Mode_t Mode)
{
 8005060:	b580      	push	{r7, lr}
 8005062:	b088      	sub	sp, #32
 8005064:	af00      	add	r7, sp, #0
 8005066:	60f8      	str	r0, [r7, #12]
 8005068:	ed87 0a02 	vstr	s0, [r7, #8]
 800506c:	460b      	mov	r3, r1
 800506e:	71fb      	strb	r3, [r7, #7]
  int32_t ret = LSM6DSO_OK;
 8005070:	2300      	movs	r3, #0
 8005072:	61fb      	str	r3, [r7, #28]
  float_t newOdr = Odr;
 8005074:	68bb      	ldr	r3, [r7, #8]
 8005076:	61bb      	str	r3, [r7, #24]

  switch (Mode)
 8005078:	79fb      	ldrb	r3, [r7, #7]
 800507a:	2b00      	cmp	r3, #0
 800507c:	d002      	beq.n	8005084 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x24>
 800507e:	2b01      	cmp	r3, #1
 8005080:	d028      	beq.n	80050d4 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x74>
 8005082:	e05c      	b.n	800513e <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0xde>
    case LSM6DSO_GYRO_HIGH_PERFORMANCE_MODE:
    {
      /* We must uncheck Low Power bit if it is enabled */
      lsm6dso_ctrl7_g_t val1;

      if (lsm6dso_read_reg(&(pObj->Ctx), LSM6DSO_CTRL7_G, (uint8_t *)&val1, 1) != LSM6DSO_OK)
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	f103 0020 	add.w	r0, r3, #32
 800508a:	f107 0214 	add.w	r2, r7, #20
 800508e:	2301      	movs	r3, #1
 8005090:	2116      	movs	r1, #22
 8005092:	f000 fbf3 	bl	800587c <lsm6dso_read_reg>
 8005096:	4603      	mov	r3, r0
 8005098:	2b00      	cmp	r3, #0
 800509a:	d002      	beq.n	80050a2 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x42>
      {
        return LSM6DSO_ERROR;
 800509c:	f04f 33ff 	mov.w	r3, #4294967295
 80050a0:	e06c      	b.n	800517c <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x11c>
      }

      if (val1.g_hm_mode != 0U)
 80050a2:	7d3b      	ldrb	r3, [r7, #20]
 80050a4:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80050a8:	b2db      	uxtb	r3, r3
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	d04b      	beq.n	8005146 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0xe6>
      {
        val1.g_hm_mode = 0U;
 80050ae:	7d3b      	ldrb	r3, [r7, #20]
 80050b0:	f36f 13c7 	bfc	r3, #7, #1
 80050b4:	753b      	strb	r3, [r7, #20]
        if (lsm6dso_write_reg(&(pObj->Ctx), LSM6DSO_CTRL7_G, (uint8_t *)&val1, 1) != LSM6DSO_OK)
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	f103 0020 	add.w	r0, r3, #32
 80050bc:	f107 0214 	add.w	r2, r7, #20
 80050c0:	2301      	movs	r3, #1
 80050c2:	2116      	movs	r1, #22
 80050c4:	f000 fbf2 	bl	80058ac <lsm6dso_write_reg>
 80050c8:	4603      	mov	r3, r0
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	d03b      	beq.n	8005146 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0xe6>
        {
          return LSM6DSO_ERROR;
 80050ce:	f04f 33ff 	mov.w	r3, #4294967295
 80050d2:	e053      	b.n	800517c <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x11c>
    case LSM6DSO_GYRO_LOW_POWER_NORMAL_MODE:
    {
      /* We must check the Low Power bit if it is unchecked */
      lsm6dso_ctrl7_g_t val1;

      if (lsm6dso_read_reg(&(pObj->Ctx), LSM6DSO_CTRL7_G, (uint8_t *)&val1, 1) != LSM6DSO_OK)
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	f103 0020 	add.w	r0, r3, #32
 80050da:	f107 0210 	add.w	r2, r7, #16
 80050de:	2301      	movs	r3, #1
 80050e0:	2116      	movs	r1, #22
 80050e2:	f000 fbcb 	bl	800587c <lsm6dso_read_reg>
 80050e6:	4603      	mov	r3, r0
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	d002      	beq.n	80050f2 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x92>
      {
        return LSM6DSO_ERROR;
 80050ec:	f04f 33ff 	mov.w	r3, #4294967295
 80050f0:	e044      	b.n	800517c <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x11c>
      }

      if (val1.g_hm_mode == 0U)
 80050f2:	7c3b      	ldrb	r3, [r7, #16]
 80050f4:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80050f8:	b2db      	uxtb	r3, r3
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d112      	bne.n	8005124 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0xc4>
      {
        val1.g_hm_mode = 1U;
 80050fe:	7c3b      	ldrb	r3, [r7, #16]
 8005100:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005104:	743b      	strb	r3, [r7, #16]
        if (lsm6dso_write_reg(&(pObj->Ctx), LSM6DSO_CTRL7_G, (uint8_t *)&val1, 1) != LSM6DSO_OK)
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	f103 0020 	add.w	r0, r3, #32
 800510c:	f107 0210 	add.w	r2, r7, #16
 8005110:	2301      	movs	r3, #1
 8005112:	2116      	movs	r1, #22
 8005114:	f000 fbca 	bl	80058ac <lsm6dso_write_reg>
 8005118:	4603      	mov	r3, r0
 800511a:	2b00      	cmp	r3, #0
 800511c:	d002      	beq.n	8005124 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0xc4>
        {
          return LSM6DSO_ERROR;
 800511e:	f04f 33ff 	mov.w	r3, #4294967295
 8005122:	e02b      	b.n	800517c <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x11c>
        }
      }

      /* Now we need to limit the ODR to 208 Hz if it is higher */
      if (newOdr > 208.0f)
 8005124:	edd7 7a06 	vldr	s15, [r7, #24]
 8005128:	ed9f 7a16 	vldr	s14, [pc, #88]	; 8005184 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x124>
 800512c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005130:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005134:	dc00      	bgt.n	8005138 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0xd8>
      {
        newOdr = 208.0f;
      }
      break;
 8005136:	e007      	b.n	8005148 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0xe8>
        newOdr = 208.0f;
 8005138:	4b13      	ldr	r3, [pc, #76]	; (8005188 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x128>)
 800513a:	61bb      	str	r3, [r7, #24]
 800513c:	e004      	b.n	8005148 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0xe8>
    }
    default:
      ret = LSM6DSO_ERROR;
 800513e:	f04f 33ff 	mov.w	r3, #4294967295
 8005142:	61fb      	str	r3, [r7, #28]
      break;
 8005144:	e000      	b.n	8005148 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0xe8>
      break;
 8005146:	bf00      	nop
  }

  if (ret == LSM6DSO_ERROR)
 8005148:	69fb      	ldr	r3, [r7, #28]
 800514a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800514e:	d102      	bne.n	8005156 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0xf6>
  {
    return LSM6DSO_ERROR;
 8005150:	f04f 33ff 	mov.w	r3, #4294967295
 8005154:	e012      	b.n	800517c <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x11c>
  }

  if (pObj->gyro_is_enabled == 1U)
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800515c:	2b01      	cmp	r3, #1
 800515e:	d106      	bne.n	800516e <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x10e>
  {
    ret = LSM6DSO_GYRO_SetOutputDataRate_When_Enabled(pObj, newOdr);
 8005160:	ed97 0a06 	vldr	s0, [r7, #24]
 8005164:	68f8      	ldr	r0, [r7, #12]
 8005166:	f000 fa45 	bl	80055f4 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled>
 800516a:	61f8      	str	r0, [r7, #28]
 800516c:	e005      	b.n	800517a <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x11a>
  }
  else
  {
    ret = LSM6DSO_GYRO_SetOutputDataRate_When_Disabled(pObj, newOdr);
 800516e:	ed97 0a06 	vldr	s0, [r7, #24]
 8005172:	68f8      	ldr	r0, [r7, #12]
 8005174:	f000 faca 	bl	800570c <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled>
 8005178:	61f8      	str	r0, [r7, #28]
  }

  return ret;
 800517a:	69fb      	ldr	r3, [r7, #28]
}
 800517c:	4618      	mov	r0, r3
 800517e:	3720      	adds	r7, #32
 8005180:	46bd      	mov	sp, r7
 8005182:	bd80      	pop	{r7, pc}
 8005184:	43500000 	.word	0x43500000
 8005188:	43500000 	.word	0x43500000

0800518c <LSM6DSO_GYRO_GetFullScale>:
  * @param  pObj the device pObj
  * @param  FullScale pointer where the full scale is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_GYRO_GetFullScale(LSM6DSO_Object_t *pObj, int32_t  *FullScale)
{
 800518c:	b580      	push	{r7, lr}
 800518e:	b084      	sub	sp, #16
 8005190:	af00      	add	r7, sp, #0
 8005192:	6078      	str	r0, [r7, #4]
 8005194:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSO_OK;
 8005196:	2300      	movs	r3, #0
 8005198:	60fb      	str	r3, [r7, #12]
  lsm6dso_fs_g_t fs_low_level;

  /* Read actual full scale selection from sensor. */
  if (lsm6dso_gy_full_scale_get(&(pObj->Ctx), &fs_low_level) != LSM6DSO_OK)
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	3320      	adds	r3, #32
 800519e:	f107 020b 	add.w	r2, r7, #11
 80051a2:	4611      	mov	r1, r2
 80051a4:	4618      	mov	r0, r3
 80051a6:	f000 fd81 	bl	8005cac <lsm6dso_gy_full_scale_get>
 80051aa:	4603      	mov	r3, r0
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	d002      	beq.n	80051b6 <LSM6DSO_GYRO_GetFullScale+0x2a>
  {
    return LSM6DSO_ERROR;
 80051b0:	f04f 33ff 	mov.w	r3, #4294967295
 80051b4:	e030      	b.n	8005218 <LSM6DSO_GYRO_GetFullScale+0x8c>
  }

  switch (fs_low_level)
 80051b6:	7afb      	ldrb	r3, [r7, #11]
 80051b8:	2b06      	cmp	r3, #6
 80051ba:	d828      	bhi.n	800520e <LSM6DSO_GYRO_GetFullScale+0x82>
 80051bc:	a201      	add	r2, pc, #4	; (adr r2, 80051c4 <LSM6DSO_GYRO_GetFullScale+0x38>)
 80051be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80051c2:	bf00      	nop
 80051c4:	080051e9 	.word	0x080051e9
 80051c8:	080051e1 	.word	0x080051e1
 80051cc:	080051f1 	.word	0x080051f1
 80051d0:	0800520f 	.word	0x0800520f
 80051d4:	080051fb 	.word	0x080051fb
 80051d8:	0800520f 	.word	0x0800520f
 80051dc:	08005205 	.word	0x08005205
  {
    case LSM6DSO_125dps:
      *FullScale =  125;
 80051e0:	683b      	ldr	r3, [r7, #0]
 80051e2:	227d      	movs	r2, #125	; 0x7d
 80051e4:	601a      	str	r2, [r3, #0]
      break;
 80051e6:	e016      	b.n	8005216 <LSM6DSO_GYRO_GetFullScale+0x8a>

    case LSM6DSO_250dps:
      *FullScale =  250;
 80051e8:	683b      	ldr	r3, [r7, #0]
 80051ea:	22fa      	movs	r2, #250	; 0xfa
 80051ec:	601a      	str	r2, [r3, #0]
      break;
 80051ee:	e012      	b.n	8005216 <LSM6DSO_GYRO_GetFullScale+0x8a>

    case LSM6DSO_500dps:
      *FullScale =  500;
 80051f0:	683b      	ldr	r3, [r7, #0]
 80051f2:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80051f6:	601a      	str	r2, [r3, #0]
      break;
 80051f8:	e00d      	b.n	8005216 <LSM6DSO_GYRO_GetFullScale+0x8a>

    case LSM6DSO_1000dps:
      *FullScale = 1000;
 80051fa:	683b      	ldr	r3, [r7, #0]
 80051fc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005200:	601a      	str	r2, [r3, #0]
      break;
 8005202:	e008      	b.n	8005216 <LSM6DSO_GYRO_GetFullScale+0x8a>

    case LSM6DSO_2000dps:
      *FullScale = 2000;
 8005204:	683b      	ldr	r3, [r7, #0]
 8005206:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800520a:	601a      	str	r2, [r3, #0]
      break;
 800520c:	e003      	b.n	8005216 <LSM6DSO_GYRO_GetFullScale+0x8a>

    default:
      ret = LSM6DSO_ERROR;
 800520e:	f04f 33ff 	mov.w	r3, #4294967295
 8005212:	60fb      	str	r3, [r7, #12]
      break;
 8005214:	bf00      	nop
  }

  return ret;
 8005216:	68fb      	ldr	r3, [r7, #12]
}
 8005218:	4618      	mov	r0, r3
 800521a:	3710      	adds	r7, #16
 800521c:	46bd      	mov	sp, r7
 800521e:	bd80      	pop	{r7, pc}

08005220 <LSM6DSO_GYRO_SetFullScale>:
  * @param  pObj the device pObj
  * @param  FullScale the functional full scale to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_GYRO_SetFullScale(LSM6DSO_Object_t *pObj, int32_t FullScale)
{
 8005220:	b580      	push	{r7, lr}
 8005222:	b084      	sub	sp, #16
 8005224:	af00      	add	r7, sp, #0
 8005226:	6078      	str	r0, [r7, #4]
 8005228:	6039      	str	r1, [r7, #0]
  lsm6dso_fs_g_t new_fs;

  new_fs = (FullScale <= 125)  ? LSM6DSO_125dps
           : (FullScale <= 250)  ? LSM6DSO_250dps
 800522a:	683b      	ldr	r3, [r7, #0]
 800522c:	2b7d      	cmp	r3, #125	; 0x7d
 800522e:	dd12      	ble.n	8005256 <LSM6DSO_GYRO_SetFullScale+0x36>
 8005230:	683b      	ldr	r3, [r7, #0]
 8005232:	2bfa      	cmp	r3, #250	; 0xfa
 8005234:	dd0d      	ble.n	8005252 <LSM6DSO_GYRO_SetFullScale+0x32>
 8005236:	683b      	ldr	r3, [r7, #0]
 8005238:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800523c:	dd07      	ble.n	800524e <LSM6DSO_GYRO_SetFullScale+0x2e>
 800523e:	683b      	ldr	r3, [r7, #0]
 8005240:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005244:	dc01      	bgt.n	800524a <LSM6DSO_GYRO_SetFullScale+0x2a>
 8005246:	2304      	movs	r3, #4
 8005248:	e006      	b.n	8005258 <LSM6DSO_GYRO_SetFullScale+0x38>
 800524a:	2306      	movs	r3, #6
 800524c:	e004      	b.n	8005258 <LSM6DSO_GYRO_SetFullScale+0x38>
 800524e:	2302      	movs	r3, #2
 8005250:	e002      	b.n	8005258 <LSM6DSO_GYRO_SetFullScale+0x38>
 8005252:	2300      	movs	r3, #0
 8005254:	e000      	b.n	8005258 <LSM6DSO_GYRO_SetFullScale+0x38>
 8005256:	2301      	movs	r3, #1
  new_fs = (FullScale <= 125)  ? LSM6DSO_125dps
 8005258:	73fb      	strb	r3, [r7, #15]
           : (FullScale <= 500)  ? LSM6DSO_500dps
           : (FullScale <= 1000) ? LSM6DSO_1000dps
           :                       LSM6DSO_2000dps;

  if (lsm6dso_gy_full_scale_set(&(pObj->Ctx), new_fs) != LSM6DSO_OK)
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	3320      	adds	r3, #32
 800525e:	7bfa      	ldrb	r2, [r7, #15]
 8005260:	4611      	mov	r1, r2
 8005262:	4618      	mov	r0, r3
 8005264:	f000 fcfc 	bl	8005c60 <lsm6dso_gy_full_scale_set>
 8005268:	4603      	mov	r3, r0
 800526a:	2b00      	cmp	r3, #0
 800526c:	d002      	beq.n	8005274 <LSM6DSO_GYRO_SetFullScale+0x54>
  {
    return LSM6DSO_ERROR;
 800526e:	f04f 33ff 	mov.w	r3, #4294967295
 8005272:	e000      	b.n	8005276 <LSM6DSO_GYRO_SetFullScale+0x56>
  }

  return LSM6DSO_OK;
 8005274:	2300      	movs	r3, #0
}
 8005276:	4618      	mov	r0, r3
 8005278:	3710      	adds	r7, #16
 800527a:	46bd      	mov	sp, r7
 800527c:	bd80      	pop	{r7, pc}

0800527e <LSM6DSO_GYRO_GetAxesRaw>:
  * @param  pObj the device pObj
  * @param  Value pointer where the raw values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_GYRO_GetAxesRaw(LSM6DSO_Object_t *pObj, LSM6DSO_AxesRaw_t *Value)
{
 800527e:	b580      	push	{r7, lr}
 8005280:	b084      	sub	sp, #16
 8005282:	af00      	add	r7, sp, #0
 8005284:	6078      	str	r0, [r7, #4]
 8005286:	6039      	str	r1, [r7, #0]
  lsm6dso_axis3bit16_t data_raw;

  /* Read raw data values. */
  if (lsm6dso_angular_rate_raw_get(&(pObj->Ctx), data_raw.i16bit) != LSM6DSO_OK)
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	3320      	adds	r3, #32
 800528c:	f107 0208 	add.w	r2, r7, #8
 8005290:	4611      	mov	r1, r2
 8005292:	4618      	mov	r0, r3
 8005294:	f000 fed0 	bl	8006038 <lsm6dso_angular_rate_raw_get>
 8005298:	4603      	mov	r3, r0
 800529a:	2b00      	cmp	r3, #0
 800529c:	d002      	beq.n	80052a4 <LSM6DSO_GYRO_GetAxesRaw+0x26>
  {
    return LSM6DSO_ERROR;
 800529e:	f04f 33ff 	mov.w	r3, #4294967295
 80052a2:	e00c      	b.n	80052be <LSM6DSO_GYRO_GetAxesRaw+0x40>
  }

  /* Format the data. */
  Value->x = data_raw.i16bit[0];
 80052a4:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 80052a8:	683b      	ldr	r3, [r7, #0]
 80052aa:	801a      	strh	r2, [r3, #0]
  Value->y = data_raw.i16bit[1];
 80052ac:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 80052b0:	683b      	ldr	r3, [r7, #0]
 80052b2:	805a      	strh	r2, [r3, #2]
  Value->z = data_raw.i16bit[2];
 80052b4:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 80052b8:	683b      	ldr	r3, [r7, #0]
 80052ba:	809a      	strh	r2, [r3, #4]

  return LSM6DSO_OK;
 80052bc:	2300      	movs	r3, #0
}
 80052be:	4618      	mov	r0, r3
 80052c0:	3710      	adds	r7, #16
 80052c2:	46bd      	mov	sp, r7
 80052c4:	bd80      	pop	{r7, pc}

080052c6 <LSM6DSO_GYRO_GetAxes>:
  * @param  pObj the device pObj
  * @param  AngularRate pointer where the values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_GYRO_GetAxes(LSM6DSO_Object_t *pObj, LSM6DSO_Axes_t *AngularRate)
{
 80052c6:	b580      	push	{r7, lr}
 80052c8:	b086      	sub	sp, #24
 80052ca:	af00      	add	r7, sp, #0
 80052cc:	6078      	str	r0, [r7, #4]
 80052ce:	6039      	str	r1, [r7, #0]
  lsm6dso_axis3bit16_t data_raw;
  float_t sensitivity;

  /* Read raw data values. */
  if (lsm6dso_angular_rate_raw_get(&(pObj->Ctx), data_raw.i16bit) != LSM6DSO_OK)
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	3320      	adds	r3, #32
 80052d4:	f107 0210 	add.w	r2, r7, #16
 80052d8:	4611      	mov	r1, r2
 80052da:	4618      	mov	r0, r3
 80052dc:	f000 feac 	bl	8006038 <lsm6dso_angular_rate_raw_get>
 80052e0:	4603      	mov	r3, r0
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	d002      	beq.n	80052ec <LSM6DSO_GYRO_GetAxes+0x26>
  {
    return LSM6DSO_ERROR;
 80052e6:	f04f 33ff 	mov.w	r3, #4294967295
 80052ea:	e03c      	b.n	8005366 <LSM6DSO_GYRO_GetAxes+0xa0>
  }

  /* Get LSM6DSO actual sensitivity. */
  if (LSM6DSO_GYRO_GetSensitivity(pObj, &sensitivity) != LSM6DSO_OK)
 80052ec:	f107 030c 	add.w	r3, r7, #12
 80052f0:	4619      	mov	r1, r3
 80052f2:	6878      	ldr	r0, [r7, #4]
 80052f4:	f7ff fdd4 	bl	8004ea0 <LSM6DSO_GYRO_GetSensitivity>
 80052f8:	4603      	mov	r3, r0
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	d002      	beq.n	8005304 <LSM6DSO_GYRO_GetAxes+0x3e>
  {
    return LSM6DSO_ERROR;
 80052fe:	f04f 33ff 	mov.w	r3, #4294967295
 8005302:	e030      	b.n	8005366 <LSM6DSO_GYRO_GetAxes+0xa0>
  }

  /* Calculate the data. */
  AngularRate->x = (int32_t)((float_t)((float_t)data_raw.i16bit[0] * sensitivity));
 8005304:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8005308:	ee07 3a90 	vmov	s15, r3
 800530c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005310:	edd7 7a03 	vldr	s15, [r7, #12]
 8005314:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005318:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800531c:	ee17 2a90 	vmov	r2, s15
 8005320:	683b      	ldr	r3, [r7, #0]
 8005322:	601a      	str	r2, [r3, #0]
  AngularRate->y = (int32_t)((float_t)((float_t)data_raw.i16bit[1] * sensitivity));
 8005324:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8005328:	ee07 3a90 	vmov	s15, r3
 800532c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005330:	edd7 7a03 	vldr	s15, [r7, #12]
 8005334:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005338:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800533c:	ee17 2a90 	vmov	r2, s15
 8005340:	683b      	ldr	r3, [r7, #0]
 8005342:	605a      	str	r2, [r3, #4]
  AngularRate->z = (int32_t)((float_t)((float_t)data_raw.i16bit[2] * sensitivity));
 8005344:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8005348:	ee07 3a90 	vmov	s15, r3
 800534c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005350:	edd7 7a03 	vldr	s15, [r7, #12]
 8005354:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005358:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800535c:	ee17 2a90 	vmov	r2, s15
 8005360:	683b      	ldr	r3, [r7, #0]
 8005362:	609a      	str	r2, [r3, #8]

  return LSM6DSO_OK;
 8005364:	2300      	movs	r3, #0
}
 8005366:	4618      	mov	r0, r3
 8005368:	3718      	adds	r7, #24
 800536a:	46bd      	mov	sp, r7
 800536c:	bd80      	pop	{r7, pc}

0800536e <LSM6DSO_Write_Reg>:
  * @param  Reg address to be written
  * @param  Data value to be written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_Write_Reg(LSM6DSO_Object_t *pObj, uint8_t Reg, uint8_t Data)
{
 800536e:	b580      	push	{r7, lr}
 8005370:	b082      	sub	sp, #8
 8005372:	af00      	add	r7, sp, #0
 8005374:	6078      	str	r0, [r7, #4]
 8005376:	460b      	mov	r3, r1
 8005378:	70fb      	strb	r3, [r7, #3]
 800537a:	4613      	mov	r3, r2
 800537c:	70bb      	strb	r3, [r7, #2]
  if (lsm6dso_write_reg(&(pObj->Ctx), Reg, &Data, 1) != LSM6DSO_OK)
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	f103 0020 	add.w	r0, r3, #32
 8005384:	1cba      	adds	r2, r7, #2
 8005386:	78f9      	ldrb	r1, [r7, #3]
 8005388:	2301      	movs	r3, #1
 800538a:	f000 fa8f 	bl	80058ac <lsm6dso_write_reg>
 800538e:	4603      	mov	r3, r0
 8005390:	2b00      	cmp	r3, #0
 8005392:	d002      	beq.n	800539a <LSM6DSO_Write_Reg+0x2c>
  {
    return LSM6DSO_ERROR;
 8005394:	f04f 33ff 	mov.w	r3, #4294967295
 8005398:	e000      	b.n	800539c <LSM6DSO_Write_Reg+0x2e>
  }

  return LSM6DSO_OK;
 800539a:	2300      	movs	r3, #0
}
 800539c:	4618      	mov	r0, r3
 800539e:	3708      	adds	r7, #8
 80053a0:	46bd      	mov	sp, r7
 80053a2:	bd80      	pop	{r7, pc}

080053a4 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled>:
  * @param  pObj the device pObj
  * @param  Odr the functional output data rate to be set
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LSM6DSO_ACC_SetOutputDataRate_When_Enabled(LSM6DSO_Object_t *pObj, float_t Odr)
{
 80053a4:	b580      	push	{r7, lr}
 80053a6:	b084      	sub	sp, #16
 80053a8:	af00      	add	r7, sp, #0
 80053aa:	6078      	str	r0, [r7, #4]
 80053ac:	ed87 0a00 	vstr	s0, [r7]
  lsm6dso_odr_xl_t new_odr;

  new_odr = (Odr <=    1.6f) ? LSM6DSO_XL_ODR_1Hz6
            : (Odr <=   12.5f) ? LSM6DSO_XL_ODR_12Hz5
 80053b0:	edd7 7a00 	vldr	s15, [r7]
 80053b4:	ed9f 7a3f 	vldr	s14, [pc, #252]	; 80054b4 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x110>
 80053b8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80053bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80053c0:	d801      	bhi.n	80053c6 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x22>
 80053c2:	230b      	movs	r3, #11
 80053c4:	e063      	b.n	800548e <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xea>
 80053c6:	edd7 7a00 	vldr	s15, [r7]
 80053ca:	eeb2 7a09 	vmov.f32	s14, #41	; 0x41480000  12.5
 80053ce:	eef4 7ac7 	vcmpe.f32	s15, s14
 80053d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80053d6:	d801      	bhi.n	80053dc <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x38>
 80053d8:	2301      	movs	r3, #1
 80053da:	e058      	b.n	800548e <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xea>
 80053dc:	edd7 7a00 	vldr	s15, [r7]
 80053e0:	eeb3 7a0a 	vmov.f32	s14, #58	; 0x41d00000  26.0
 80053e4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80053e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80053ec:	d801      	bhi.n	80053f2 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x4e>
 80053ee:	2302      	movs	r3, #2
 80053f0:	e04d      	b.n	800548e <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xea>
 80053f2:	edd7 7a00 	vldr	s15, [r7]
 80053f6:	ed9f 7a30 	vldr	s14, [pc, #192]	; 80054b8 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x114>
 80053fa:	eef4 7ac7 	vcmpe.f32	s15, s14
 80053fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005402:	d801      	bhi.n	8005408 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x64>
 8005404:	2303      	movs	r3, #3
 8005406:	e042      	b.n	800548e <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xea>
 8005408:	edd7 7a00 	vldr	s15, [r7]
 800540c:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 80054bc <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x118>
 8005410:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005414:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005418:	d801      	bhi.n	800541e <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x7a>
 800541a:	2304      	movs	r3, #4
 800541c:	e037      	b.n	800548e <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xea>
 800541e:	edd7 7a00 	vldr	s15, [r7]
 8005422:	ed9f 7a27 	vldr	s14, [pc, #156]	; 80054c0 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x11c>
 8005426:	eef4 7ac7 	vcmpe.f32	s15, s14
 800542a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800542e:	d801      	bhi.n	8005434 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x90>
 8005430:	2305      	movs	r3, #5
 8005432:	e02c      	b.n	800548e <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xea>
 8005434:	edd7 7a00 	vldr	s15, [r7]
 8005438:	ed9f 7a22 	vldr	s14, [pc, #136]	; 80054c4 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x120>
 800543c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005440:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005444:	d801      	bhi.n	800544a <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xa6>
 8005446:	2306      	movs	r3, #6
 8005448:	e021      	b.n	800548e <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xea>
 800544a:	edd7 7a00 	vldr	s15, [r7]
 800544e:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 80054c8 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x124>
 8005452:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005456:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800545a:	d801      	bhi.n	8005460 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xbc>
 800545c:	2307      	movs	r3, #7
 800545e:	e016      	b.n	800548e <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xea>
 8005460:	edd7 7a00 	vldr	s15, [r7]
 8005464:	ed9f 7a19 	vldr	s14, [pc, #100]	; 80054cc <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x128>
 8005468:	eef4 7ac7 	vcmpe.f32	s15, s14
 800546c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005470:	d801      	bhi.n	8005476 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xd2>
 8005472:	2308      	movs	r3, #8
 8005474:	e00b      	b.n	800548e <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xea>
 8005476:	edd7 7a00 	vldr	s15, [r7]
 800547a:	ed9f 7a15 	vldr	s14, [pc, #84]	; 80054d0 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x12c>
 800547e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005482:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005486:	d801      	bhi.n	800548c <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xe8>
 8005488:	2309      	movs	r3, #9
 800548a:	e000      	b.n	800548e <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xea>
 800548c:	230a      	movs	r3, #10
  new_odr = (Odr <=    1.6f) ? LSM6DSO_XL_ODR_1Hz6
 800548e:	73fb      	strb	r3, [r7, #15]
            : (Odr <= 1667.0f) ? LSM6DSO_XL_ODR_1667Hz
            : (Odr <= 3333.0f) ? LSM6DSO_XL_ODR_3333Hz
            :                    LSM6DSO_XL_ODR_6667Hz;

  /* Output data rate selection. */
  if (lsm6dso_xl_data_rate_set(&(pObj->Ctx), new_odr) != LSM6DSO_OK)
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	3320      	adds	r3, #32
 8005494:	7bfa      	ldrb	r2, [r7, #15]
 8005496:	4611      	mov	r1, r2
 8005498:	4618      	mov	r0, r3
 800549a:	f000 fa7d 	bl	8005998 <lsm6dso_xl_data_rate_set>
 800549e:	4603      	mov	r3, r0
 80054a0:	2b00      	cmp	r3, #0
 80054a2:	d002      	beq.n	80054aa <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x106>
  {
    return LSM6DSO_ERROR;
 80054a4:	f04f 33ff 	mov.w	r3, #4294967295
 80054a8:	e000      	b.n	80054ac <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x108>
  }

  return LSM6DSO_OK;
 80054aa:	2300      	movs	r3, #0
}
 80054ac:	4618      	mov	r0, r3
 80054ae:	3710      	adds	r7, #16
 80054b0:	46bd      	mov	sp, r7
 80054b2:	bd80      	pop	{r7, pc}
 80054b4:	3fcccccd 	.word	0x3fcccccd
 80054b8:	42500000 	.word	0x42500000
 80054bc:	42d00000 	.word	0x42d00000
 80054c0:	43500000 	.word	0x43500000
 80054c4:	43d08000 	.word	0x43d08000
 80054c8:	44504000 	.word	0x44504000
 80054cc:	44d06000 	.word	0x44d06000
 80054d0:	45505000 	.word	0x45505000

080054d4 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled>:
  * @param  pObj the device pObj
  * @param  Odr the functional output data rate to be set
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LSM6DSO_ACC_SetOutputDataRate_When_Disabled(LSM6DSO_Object_t *pObj, float_t Odr)
{
 80054d4:	b480      	push	{r7}
 80054d6:	b083      	sub	sp, #12
 80054d8:	af00      	add	r7, sp, #0
 80054da:	6078      	str	r0, [r7, #4]
 80054dc:	ed87 0a00 	vstr	s0, [r7]
  pObj->acc_odr = (Odr <=    1.6f) ? LSM6DSO_XL_ODR_1Hz6
                  : (Odr <=   12.5f) ? LSM6DSO_XL_ODR_12Hz5
 80054e0:	edd7 7a00 	vldr	s15, [r7]
 80054e4:	ed9f 7a3b 	vldr	s14, [pc, #236]	; 80055d4 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x100>
 80054e8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80054ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80054f0:	d801      	bhi.n	80054f6 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x22>
 80054f2:	230b      	movs	r3, #11
 80054f4:	e063      	b.n	80055be <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xea>
 80054f6:	edd7 7a00 	vldr	s15, [r7]
 80054fa:	eeb2 7a09 	vmov.f32	s14, #41	; 0x41480000  12.5
 80054fe:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005502:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005506:	d801      	bhi.n	800550c <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x38>
 8005508:	2301      	movs	r3, #1
 800550a:	e058      	b.n	80055be <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xea>
 800550c:	edd7 7a00 	vldr	s15, [r7]
 8005510:	eeb3 7a0a 	vmov.f32	s14, #58	; 0x41d00000  26.0
 8005514:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005518:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800551c:	d801      	bhi.n	8005522 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x4e>
 800551e:	2302      	movs	r3, #2
 8005520:	e04d      	b.n	80055be <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xea>
 8005522:	edd7 7a00 	vldr	s15, [r7]
 8005526:	ed9f 7a2c 	vldr	s14, [pc, #176]	; 80055d8 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x104>
 800552a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800552e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005532:	d801      	bhi.n	8005538 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x64>
 8005534:	2303      	movs	r3, #3
 8005536:	e042      	b.n	80055be <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xea>
 8005538:	edd7 7a00 	vldr	s15, [r7]
 800553c:	ed9f 7a27 	vldr	s14, [pc, #156]	; 80055dc <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x108>
 8005540:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005544:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005548:	d801      	bhi.n	800554e <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x7a>
 800554a:	2304      	movs	r3, #4
 800554c:	e037      	b.n	80055be <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xea>
 800554e:	edd7 7a00 	vldr	s15, [r7]
 8005552:	ed9f 7a23 	vldr	s14, [pc, #140]	; 80055e0 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x10c>
 8005556:	eef4 7ac7 	vcmpe.f32	s15, s14
 800555a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800555e:	d801      	bhi.n	8005564 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x90>
 8005560:	2305      	movs	r3, #5
 8005562:	e02c      	b.n	80055be <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xea>
 8005564:	edd7 7a00 	vldr	s15, [r7]
 8005568:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 80055e4 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x110>
 800556c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005570:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005574:	d801      	bhi.n	800557a <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xa6>
 8005576:	2306      	movs	r3, #6
 8005578:	e021      	b.n	80055be <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xea>
 800557a:	edd7 7a00 	vldr	s15, [r7]
 800557e:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 80055e8 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x114>
 8005582:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005586:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800558a:	d801      	bhi.n	8005590 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xbc>
 800558c:	2307      	movs	r3, #7
 800558e:	e016      	b.n	80055be <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xea>
 8005590:	edd7 7a00 	vldr	s15, [r7]
 8005594:	ed9f 7a15 	vldr	s14, [pc, #84]	; 80055ec <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x118>
 8005598:	eef4 7ac7 	vcmpe.f32	s15, s14
 800559c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80055a0:	d801      	bhi.n	80055a6 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xd2>
 80055a2:	2308      	movs	r3, #8
 80055a4:	e00b      	b.n	80055be <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xea>
 80055a6:	edd7 7a00 	vldr	s15, [r7]
 80055aa:	ed9f 7a11 	vldr	s14, [pc, #68]	; 80055f0 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x11c>
 80055ae:	eef4 7ac7 	vcmpe.f32	s15, s14
 80055b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80055b6:	d801      	bhi.n	80055bc <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xe8>
 80055b8:	2309      	movs	r3, #9
 80055ba:	e000      	b.n	80055be <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xea>
 80055bc:	230a      	movs	r3, #10
  pObj->acc_odr = (Odr <=    1.6f) ? LSM6DSO_XL_ODR_1Hz6
 80055be:	687a      	ldr	r2, [r7, #4]
 80055c0:	f882 3033 	strb.w	r3, [r2, #51]	; 0x33
                  : (Odr <=  833.0f) ? LSM6DSO_XL_ODR_833Hz
                  : (Odr <= 1667.0f) ? LSM6DSO_XL_ODR_1667Hz
                  : (Odr <= 3333.0f) ? LSM6DSO_XL_ODR_3333Hz
                  :                    LSM6DSO_XL_ODR_6667Hz;

  return LSM6DSO_OK;
 80055c4:	2300      	movs	r3, #0
}
 80055c6:	4618      	mov	r0, r3
 80055c8:	370c      	adds	r7, #12
 80055ca:	46bd      	mov	sp, r7
 80055cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055d0:	4770      	bx	lr
 80055d2:	bf00      	nop
 80055d4:	3fcccccd 	.word	0x3fcccccd
 80055d8:	42500000 	.word	0x42500000
 80055dc:	42d00000 	.word	0x42d00000
 80055e0:	43500000 	.word	0x43500000
 80055e4:	43d08000 	.word	0x43d08000
 80055e8:	44504000 	.word	0x44504000
 80055ec:	44d06000 	.word	0x44d06000
 80055f0:	45505000 	.word	0x45505000

080055f4 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled>:
  * @param  pObj the device pObj
  * @param  Odr the functional output data rate to be set
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LSM6DSO_GYRO_SetOutputDataRate_When_Enabled(LSM6DSO_Object_t *pObj, float_t Odr)
{
 80055f4:	b580      	push	{r7, lr}
 80055f6:	b084      	sub	sp, #16
 80055f8:	af00      	add	r7, sp, #0
 80055fa:	6078      	str	r0, [r7, #4]
 80055fc:	ed87 0a00 	vstr	s0, [r7]
  lsm6dso_odr_g_t new_odr;

  new_odr = (Odr <=   12.5f) ? LSM6DSO_GY_ODR_12Hz5
            : (Odr <=   26.0f) ? LSM6DSO_GY_ODR_26Hz
 8005600:	edd7 7a00 	vldr	s15, [r7]
 8005604:	eeb2 7a09 	vmov.f32	s14, #41	; 0x41480000  12.5
 8005608:	eef4 7ac7 	vcmpe.f32	s15, s14
 800560c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005610:	d801      	bhi.n	8005616 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x22>
 8005612:	2301      	movs	r3, #1
 8005614:	e058      	b.n	80056c8 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 8005616:	edd7 7a00 	vldr	s15, [r7]
 800561a:	eeb3 7a0a 	vmov.f32	s14, #58	; 0x41d00000  26.0
 800561e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005622:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005626:	d801      	bhi.n	800562c <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x38>
 8005628:	2302      	movs	r3, #2
 800562a:	e04d      	b.n	80056c8 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 800562c:	edd7 7a00 	vldr	s15, [r7]
 8005630:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 80056f0 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xfc>
 8005634:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005638:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800563c:	d801      	bhi.n	8005642 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x4e>
 800563e:	2303      	movs	r3, #3
 8005640:	e042      	b.n	80056c8 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 8005642:	edd7 7a00 	vldr	s15, [r7]
 8005646:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 80056f4 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x100>
 800564a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800564e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005652:	d801      	bhi.n	8005658 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x64>
 8005654:	2304      	movs	r3, #4
 8005656:	e037      	b.n	80056c8 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 8005658:	edd7 7a00 	vldr	s15, [r7]
 800565c:	ed9f 7a26 	vldr	s14, [pc, #152]	; 80056f8 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x104>
 8005660:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005664:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005668:	d801      	bhi.n	800566e <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x7a>
 800566a:	2305      	movs	r3, #5
 800566c:	e02c      	b.n	80056c8 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 800566e:	edd7 7a00 	vldr	s15, [r7]
 8005672:	ed9f 7a22 	vldr	s14, [pc, #136]	; 80056fc <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x108>
 8005676:	eef4 7ac7 	vcmpe.f32	s15, s14
 800567a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800567e:	d801      	bhi.n	8005684 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x90>
 8005680:	2306      	movs	r3, #6
 8005682:	e021      	b.n	80056c8 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 8005684:	edd7 7a00 	vldr	s15, [r7]
 8005688:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 8005700 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x10c>
 800568c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005690:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005694:	d801      	bhi.n	800569a <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xa6>
 8005696:	2307      	movs	r3, #7
 8005698:	e016      	b.n	80056c8 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 800569a:	edd7 7a00 	vldr	s15, [r7]
 800569e:	ed9f 7a19 	vldr	s14, [pc, #100]	; 8005704 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x110>
 80056a2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80056a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80056aa:	d801      	bhi.n	80056b0 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xbc>
 80056ac:	2308      	movs	r3, #8
 80056ae:	e00b      	b.n	80056c8 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 80056b0:	edd7 7a00 	vldr	s15, [r7]
 80056b4:	ed9f 7a14 	vldr	s14, [pc, #80]	; 8005708 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x114>
 80056b8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80056bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80056c0:	d801      	bhi.n	80056c6 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xd2>
 80056c2:	2309      	movs	r3, #9
 80056c4:	e000      	b.n	80056c8 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 80056c6:	230a      	movs	r3, #10
  new_odr = (Odr <=   12.5f) ? LSM6DSO_GY_ODR_12Hz5
 80056c8:	73fb      	strb	r3, [r7, #15]
            : (Odr <= 1667.0f) ? LSM6DSO_GY_ODR_1667Hz
            : (Odr <= 3333.0f) ? LSM6DSO_GY_ODR_3333Hz
            :                    LSM6DSO_GY_ODR_6667Hz;

  /* Output data rate selection. */
  if (lsm6dso_gy_data_rate_set(&(pObj->Ctx), new_odr) != LSM6DSO_OK)
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	3320      	adds	r3, #32
 80056ce:	7bfa      	ldrb	r2, [r7, #15]
 80056d0:	4611      	mov	r1, r2
 80056d2:	4618      	mov	r0, r3
 80056d4:	f000 fb2c 	bl	8005d30 <lsm6dso_gy_data_rate_set>
 80056d8:	4603      	mov	r3, r0
 80056da:	2b00      	cmp	r3, #0
 80056dc:	d002      	beq.n	80056e4 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xf0>
  {
    return LSM6DSO_ERROR;
 80056de:	f04f 33ff 	mov.w	r3, #4294967295
 80056e2:	e000      	b.n	80056e6 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xf2>
  }

  return LSM6DSO_OK;
 80056e4:	2300      	movs	r3, #0
}
 80056e6:	4618      	mov	r0, r3
 80056e8:	3710      	adds	r7, #16
 80056ea:	46bd      	mov	sp, r7
 80056ec:	bd80      	pop	{r7, pc}
 80056ee:	bf00      	nop
 80056f0:	42500000 	.word	0x42500000
 80056f4:	42d00000 	.word	0x42d00000
 80056f8:	43500000 	.word	0x43500000
 80056fc:	43d08000 	.word	0x43d08000
 8005700:	44504000 	.word	0x44504000
 8005704:	44d06000 	.word	0x44d06000
 8005708:	45505000 	.word	0x45505000

0800570c <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled>:
  * @param  pObj the device pObj
  * @param  Odr the functional output data rate to be set
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LSM6DSO_GYRO_SetOutputDataRate_When_Disabled(LSM6DSO_Object_t *pObj, float_t Odr)
{
 800570c:	b480      	push	{r7}
 800570e:	b083      	sub	sp, #12
 8005710:	af00      	add	r7, sp, #0
 8005712:	6078      	str	r0, [r7, #4]
 8005714:	ed87 0a00 	vstr	s0, [r7]
  pObj->gyro_odr = (Odr <=   12.5f) ? LSM6DSO_GY_ODR_12Hz5
                   : (Odr <=   26.0f) ? LSM6DSO_GY_ODR_26Hz
 8005718:	edd7 7a00 	vldr	s15, [r7]
 800571c:	eeb2 7a09 	vmov.f32	s14, #41	; 0x41480000  12.5
 8005720:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005724:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005728:	d801      	bhi.n	800572e <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0x22>
 800572a:	2301      	movs	r3, #1
 800572c:	e058      	b.n	80057e0 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 800572e:	edd7 7a00 	vldr	s15, [r7]
 8005732:	eeb3 7a0a 	vmov.f32	s14, #58	; 0x41d00000  26.0
 8005736:	eef4 7ac7 	vcmpe.f32	s15, s14
 800573a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800573e:	d801      	bhi.n	8005744 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0x38>
 8005740:	2302      	movs	r3, #2
 8005742:	e04d      	b.n	80057e0 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 8005744:	edd7 7a00 	vldr	s15, [r7]
 8005748:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 80057f4 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xe8>
 800574c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005750:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005754:	d801      	bhi.n	800575a <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0x4e>
 8005756:	2303      	movs	r3, #3
 8005758:	e042      	b.n	80057e0 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 800575a:	edd7 7a00 	vldr	s15, [r7]
 800575e:	ed9f 7a26 	vldr	s14, [pc, #152]	; 80057f8 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xec>
 8005762:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005766:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800576a:	d801      	bhi.n	8005770 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0x64>
 800576c:	2304      	movs	r3, #4
 800576e:	e037      	b.n	80057e0 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 8005770:	edd7 7a00 	vldr	s15, [r7]
 8005774:	ed9f 7a21 	vldr	s14, [pc, #132]	; 80057fc <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xf0>
 8005778:	eef4 7ac7 	vcmpe.f32	s15, s14
 800577c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005780:	d801      	bhi.n	8005786 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0x7a>
 8005782:	2305      	movs	r3, #5
 8005784:	e02c      	b.n	80057e0 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 8005786:	edd7 7a00 	vldr	s15, [r7]
 800578a:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 8005800 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xf4>
 800578e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005792:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005796:	d801      	bhi.n	800579c <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0x90>
 8005798:	2306      	movs	r3, #6
 800579a:	e021      	b.n	80057e0 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 800579c:	edd7 7a00 	vldr	s15, [r7]
 80057a0:	ed9f 7a18 	vldr	s14, [pc, #96]	; 8005804 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xf8>
 80057a4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80057a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80057ac:	d801      	bhi.n	80057b2 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xa6>
 80057ae:	2307      	movs	r3, #7
 80057b0:	e016      	b.n	80057e0 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 80057b2:	edd7 7a00 	vldr	s15, [r7]
 80057b6:	ed9f 7a14 	vldr	s14, [pc, #80]	; 8005808 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xfc>
 80057ba:	eef4 7ac7 	vcmpe.f32	s15, s14
 80057be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80057c2:	d801      	bhi.n	80057c8 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xbc>
 80057c4:	2308      	movs	r3, #8
 80057c6:	e00b      	b.n	80057e0 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 80057c8:	edd7 7a00 	vldr	s15, [r7]
 80057cc:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 800580c <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0x100>
 80057d0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80057d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80057d8:	d801      	bhi.n	80057de <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xd2>
 80057da:	2309      	movs	r3, #9
 80057dc:	e000      	b.n	80057e0 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 80057de:	230a      	movs	r3, #10
  pObj->gyro_odr = (Odr <=   12.5f) ? LSM6DSO_GY_ODR_12Hz5
 80057e0:	687a      	ldr	r2, [r7, #4]
 80057e2:	f882 3034 	strb.w	r3, [r2, #52]	; 0x34
                   : (Odr <=  833.0f) ? LSM6DSO_GY_ODR_833Hz
                   : (Odr <= 1667.0f) ? LSM6DSO_GY_ODR_1667Hz
                   : (Odr <= 3333.0f) ? LSM6DSO_GY_ODR_3333Hz
                   :                    LSM6DSO_GY_ODR_6667Hz;

  return LSM6DSO_OK;
 80057e6:	2300      	movs	r3, #0
}
 80057e8:	4618      	mov	r0, r3
 80057ea:	370c      	adds	r7, #12
 80057ec:	46bd      	mov	sp, r7
 80057ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057f2:	4770      	bx	lr
 80057f4:	42500000 	.word	0x42500000
 80057f8:	42d00000 	.word	0x42d00000
 80057fc:	43500000 	.word	0x43500000
 8005800:	43d08000 	.word	0x43d08000
 8005804:	44504000 	.word	0x44504000
 8005808:	44d06000 	.word	0x44d06000
 800580c:	45505000 	.word	0x45505000

08005810 <ReadRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t ReadRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8005810:	b590      	push	{r4, r7, lr}
 8005812:	b087      	sub	sp, #28
 8005814:	af00      	add	r7, sp, #0
 8005816:	60f8      	str	r0, [r7, #12]
 8005818:	607a      	str	r2, [r7, #4]
 800581a:	461a      	mov	r2, r3
 800581c:	460b      	mov	r3, r1
 800581e:	72fb      	strb	r3, [r7, #11]
 8005820:	4613      	mov	r3, r2
 8005822:	813b      	strh	r3, [r7, #8]
  LSM6DSO_Object_t *pObj = (LSM6DSO_Object_t *)Handle;
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	617b      	str	r3, [r7, #20]

  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 8005828:	697b      	ldr	r3, [r7, #20]
 800582a:	695c      	ldr	r4, [r3, #20]
 800582c:	697b      	ldr	r3, [r7, #20]
 800582e:	7b1b      	ldrb	r3, [r3, #12]
 8005830:	b298      	uxth	r0, r3
 8005832:	7afb      	ldrb	r3, [r7, #11]
 8005834:	b299      	uxth	r1, r3
 8005836:	893b      	ldrh	r3, [r7, #8]
 8005838:	687a      	ldr	r2, [r7, #4]
 800583a:	47a0      	blx	r4
 800583c:	4603      	mov	r3, r0
}
 800583e:	4618      	mov	r0, r3
 8005840:	371c      	adds	r7, #28
 8005842:	46bd      	mov	sp, r7
 8005844:	bd90      	pop	{r4, r7, pc}

08005846 <WriteRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t WriteRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8005846:	b590      	push	{r4, r7, lr}
 8005848:	b087      	sub	sp, #28
 800584a:	af00      	add	r7, sp, #0
 800584c:	60f8      	str	r0, [r7, #12]
 800584e:	607a      	str	r2, [r7, #4]
 8005850:	461a      	mov	r2, r3
 8005852:	460b      	mov	r3, r1
 8005854:	72fb      	strb	r3, [r7, #11]
 8005856:	4613      	mov	r3, r2
 8005858:	813b      	strh	r3, [r7, #8]
  LSM6DSO_Object_t *pObj = (LSM6DSO_Object_t *)Handle;
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	617b      	str	r3, [r7, #20]

  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 800585e:	697b      	ldr	r3, [r7, #20]
 8005860:	691c      	ldr	r4, [r3, #16]
 8005862:	697b      	ldr	r3, [r7, #20]
 8005864:	7b1b      	ldrb	r3, [r3, #12]
 8005866:	b298      	uxth	r0, r3
 8005868:	7afb      	ldrb	r3, [r7, #11]
 800586a:	b299      	uxth	r1, r3
 800586c:	893b      	ldrh	r3, [r7, #8]
 800586e:	687a      	ldr	r2, [r7, #4]
 8005870:	47a0      	blx	r4
 8005872:	4603      	mov	r3, r0
}
 8005874:	4618      	mov	r0, r3
 8005876:	371c      	adds	r7, #28
 8005878:	46bd      	mov	sp, r7
 800587a:	bd90      	pop	{r4, r7, pc}

0800587c <lsm6dso_read_reg>:
  *
  */
int32_t __weak lsm6dso_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                                uint8_t *data,
                                uint16_t len)
{
 800587c:	b590      	push	{r4, r7, lr}
 800587e:	b087      	sub	sp, #28
 8005880:	af00      	add	r7, sp, #0
 8005882:	60f8      	str	r0, [r7, #12]
 8005884:	607a      	str	r2, [r7, #4]
 8005886:	461a      	mov	r2, r3
 8005888:	460b      	mov	r3, r1
 800588a:	72fb      	strb	r3, [r7, #11]
 800588c:	4613      	mov	r3, r2
 800588e:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	685c      	ldr	r4, [r3, #4]
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	68d8      	ldr	r0, [r3, #12]
 8005898:	893b      	ldrh	r3, [r7, #8]
 800589a:	7af9      	ldrb	r1, [r7, #11]
 800589c:	687a      	ldr	r2, [r7, #4]
 800589e:	47a0      	blx	r4
 80058a0:	6178      	str	r0, [r7, #20]

  return ret;
 80058a2:	697b      	ldr	r3, [r7, #20]
}
 80058a4:	4618      	mov	r0, r3
 80058a6:	371c      	adds	r7, #28
 80058a8:	46bd      	mov	sp, r7
 80058aa:	bd90      	pop	{r4, r7, pc}

080058ac <lsm6dso_write_reg>:
  *
  */
int32_t __weak lsm6dso_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                                 uint8_t *data,
                                 uint16_t len)
{
 80058ac:	b590      	push	{r4, r7, lr}
 80058ae:	b087      	sub	sp, #28
 80058b0:	af00      	add	r7, sp, #0
 80058b2:	60f8      	str	r0, [r7, #12]
 80058b4:	607a      	str	r2, [r7, #4]
 80058b6:	461a      	mov	r2, r3
 80058b8:	460b      	mov	r3, r1
 80058ba:	72fb      	strb	r3, [r7, #11]
 80058bc:	4613      	mov	r3, r2
 80058be:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	681c      	ldr	r4, [r3, #0]
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	68d8      	ldr	r0, [r3, #12]
 80058c8:	893b      	ldrh	r3, [r7, #8]
 80058ca:	7af9      	ldrb	r1, [r7, #11]
 80058cc:	687a      	ldr	r2, [r7, #4]
 80058ce:	47a0      	blx	r4
 80058d0:	6178      	str	r0, [r7, #20]

  return ret;
 80058d2:	697b      	ldr	r3, [r7, #20]
}
 80058d4:	4618      	mov	r0, r3
 80058d6:	371c      	adds	r7, #28
 80058d8:	46bd      	mov	sp, r7
 80058da:	bd90      	pop	{r4, r7, pc}

080058dc <lsm6dso_xl_full_scale_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_xl_full_scale_set(stmdev_ctx_t *ctx,
                                  lsm6dso_fs_xl_t val)
{
 80058dc:	b580      	push	{r7, lr}
 80058de:	b084      	sub	sp, #16
 80058e0:	af00      	add	r7, sp, #0
 80058e2:	6078      	str	r0, [r7, #4]
 80058e4:	460b      	mov	r3, r1
 80058e6:	70fb      	strb	r3, [r7, #3]
  lsm6dso_ctrl1_xl_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL1_XL, (uint8_t *)&reg, 1);
 80058e8:	f107 0208 	add.w	r2, r7, #8
 80058ec:	2301      	movs	r3, #1
 80058ee:	2110      	movs	r1, #16
 80058f0:	6878      	ldr	r0, [r7, #4]
 80058f2:	f7ff ffc3 	bl	800587c <lsm6dso_read_reg>
 80058f6:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	d10f      	bne.n	800591e <lsm6dso_xl_full_scale_set+0x42>
  {
    reg.fs_xl = (uint8_t) val;
 80058fe:	78fb      	ldrb	r3, [r7, #3]
 8005900:	f003 0303 	and.w	r3, r3, #3
 8005904:	b2da      	uxtb	r2, r3
 8005906:	7a3b      	ldrb	r3, [r7, #8]
 8005908:	f362 0383 	bfi	r3, r2, #2, #2
 800590c:	723b      	strb	r3, [r7, #8]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL1_XL, (uint8_t *)&reg, 1);
 800590e:	f107 0208 	add.w	r2, r7, #8
 8005912:	2301      	movs	r3, #1
 8005914:	2110      	movs	r1, #16
 8005916:	6878      	ldr	r0, [r7, #4]
 8005918:	f7ff ffc8 	bl	80058ac <lsm6dso_write_reg>
 800591c:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 800591e:	68fb      	ldr	r3, [r7, #12]
}
 8005920:	4618      	mov	r0, r3
 8005922:	3710      	adds	r7, #16
 8005924:	46bd      	mov	sp, r7
 8005926:	bd80      	pop	{r7, pc}

08005928 <lsm6dso_xl_full_scale_get>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_xl_full_scale_get(stmdev_ctx_t *ctx,
                                  lsm6dso_fs_xl_t *val)
{
 8005928:	b580      	push	{r7, lr}
 800592a:	b084      	sub	sp, #16
 800592c:	af00      	add	r7, sp, #0
 800592e:	6078      	str	r0, [r7, #4]
 8005930:	6039      	str	r1, [r7, #0]
  lsm6dso_ctrl1_xl_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL1_XL, (uint8_t *)&reg, 1);
 8005932:	f107 0208 	add.w	r2, r7, #8
 8005936:	2301      	movs	r3, #1
 8005938:	2110      	movs	r1, #16
 800593a:	6878      	ldr	r0, [r7, #4]
 800593c:	f7ff ff9e 	bl	800587c <lsm6dso_read_reg>
 8005940:	60f8      	str	r0, [r7, #12]

  switch (reg.fs_xl)
 8005942:	7a3b      	ldrb	r3, [r7, #8]
 8005944:	f3c3 0381 	ubfx	r3, r3, #2, #2
 8005948:	b2db      	uxtb	r3, r3
 800594a:	2b03      	cmp	r3, #3
 800594c:	d81a      	bhi.n	8005984 <lsm6dso_xl_full_scale_get+0x5c>
 800594e:	a201      	add	r2, pc, #4	; (adr r2, 8005954 <lsm6dso_xl_full_scale_get+0x2c>)
 8005950:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005954:	08005965 	.word	0x08005965
 8005958:	0800596d 	.word	0x0800596d
 800595c:	08005975 	.word	0x08005975
 8005960:	0800597d 	.word	0x0800597d
  {
    case LSM6DSO_2g:
      *val = LSM6DSO_2g;
 8005964:	683b      	ldr	r3, [r7, #0]
 8005966:	2200      	movs	r2, #0
 8005968:	701a      	strb	r2, [r3, #0]
      break;
 800596a:	e00f      	b.n	800598c <lsm6dso_xl_full_scale_get+0x64>

    case LSM6DSO_16g:
      *val = LSM6DSO_16g;
 800596c:	683b      	ldr	r3, [r7, #0]
 800596e:	2201      	movs	r2, #1
 8005970:	701a      	strb	r2, [r3, #0]
      break;
 8005972:	e00b      	b.n	800598c <lsm6dso_xl_full_scale_get+0x64>

    case LSM6DSO_4g:
      *val = LSM6DSO_4g;
 8005974:	683b      	ldr	r3, [r7, #0]
 8005976:	2202      	movs	r2, #2
 8005978:	701a      	strb	r2, [r3, #0]
      break;
 800597a:	e007      	b.n	800598c <lsm6dso_xl_full_scale_get+0x64>

    case LSM6DSO_8g:
      *val = LSM6DSO_8g;
 800597c:	683b      	ldr	r3, [r7, #0]
 800597e:	2203      	movs	r2, #3
 8005980:	701a      	strb	r2, [r3, #0]
      break;
 8005982:	e003      	b.n	800598c <lsm6dso_xl_full_scale_get+0x64>

    default:
      *val = LSM6DSO_2g;
 8005984:	683b      	ldr	r3, [r7, #0]
 8005986:	2200      	movs	r2, #0
 8005988:	701a      	strb	r2, [r3, #0]
      break;
 800598a:	bf00      	nop
  }

  return ret;
 800598c:	68fb      	ldr	r3, [r7, #12]
}
 800598e:	4618      	mov	r0, r3
 8005990:	3710      	adds	r7, #16
 8005992:	46bd      	mov	sp, r7
 8005994:	bd80      	pop	{r7, pc}
 8005996:	bf00      	nop

08005998 <lsm6dso_xl_data_rate_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_xl_data_rate_set(stmdev_ctx_t *ctx,
                                 lsm6dso_odr_xl_t val)
{
 8005998:	b580      	push	{r7, lr}
 800599a:	b086      	sub	sp, #24
 800599c:	af00      	add	r7, sp, #0
 800599e:	6078      	str	r0, [r7, #4]
 80059a0:	460b      	mov	r3, r1
 80059a2:	70fb      	strb	r3, [r7, #3]
  lsm6dso_odr_xl_t odr_xl =  val;
 80059a4:	78fb      	ldrb	r3, [r7, #3]
 80059a6:	75fb      	strb	r3, [r7, #23]
  lsm6dso_fsm_odr_t fsm_odr;
  lsm6dso_ctrl1_xl_t reg;
  int32_t ret;

  /* Check the Finite State Machine data rate constraints */
  ret =  lsm6dso_fsm_enable_get(ctx, &fsm_enable);
 80059a8:	f107 030c 	add.w	r3, r7, #12
 80059ac:	4619      	mov	r1, r3
 80059ae:	6878      	ldr	r0, [r7, #4]
 80059b0:	f000 fca1 	bl	80062f6 <lsm6dso_fsm_enable_get>
 80059b4:	6138      	str	r0, [r7, #16]

  if (ret == 0)
 80059b6:	693b      	ldr	r3, [r7, #16]
 80059b8:	2b00      	cmp	r3, #0
 80059ba:	f040 80c4 	bne.w	8005b46 <lsm6dso_xl_data_rate_set+0x1ae>
  {
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
 80059be:	7b3b      	ldrb	r3, [r7, #12]
 80059c0:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80059c4:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm2_en  |
 80059c6:	7b3b      	ldrb	r3, [r7, #12]
 80059c8:	f3c3 0340 	ubfx	r3, r3, #1, #1
 80059cc:	b2db      	uxtb	r3, r3
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
 80059ce:	4313      	orrs	r3, r2
 80059d0:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm3_en  |
 80059d2:	7b3b      	ldrb	r3, [r7, #12]
 80059d4:	f3c3 0380 	ubfx	r3, r3, #2, #1
 80059d8:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm2_en  |
 80059da:	4313      	orrs	r3, r2
 80059dc:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm4_en  |
 80059de:	7b3b      	ldrb	r3, [r7, #12]
 80059e0:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80059e4:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm3_en  |
 80059e6:	4313      	orrs	r3, r2
 80059e8:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm5_en  |
 80059ea:	7b3b      	ldrb	r3, [r7, #12]
 80059ec:	f3c3 1300 	ubfx	r3, r3, #4, #1
 80059f0:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm4_en  |
 80059f2:	4313      	orrs	r3, r2
 80059f4:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm6_en  |
 80059f6:	7b3b      	ldrb	r3, [r7, #12]
 80059f8:	f3c3 1340 	ubfx	r3, r3, #5, #1
 80059fc:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm5_en  |
 80059fe:	4313      	orrs	r3, r2
 8005a00:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm7_en  |
 8005a02:	7b3b      	ldrb	r3, [r7, #12]
 8005a04:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8005a08:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm6_en  |
 8005a0a:	4313      	orrs	r3, r2
 8005a0c:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm8_en  |
 8005a0e:	7b3b      	ldrb	r3, [r7, #12]
 8005a10:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8005a14:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm7_en  |
 8005a16:	4313      	orrs	r3, r2
 8005a18:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm9_en  |
 8005a1a:	7b7b      	ldrb	r3, [r7, #13]
 8005a1c:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8005a20:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm8_en  |
 8005a22:	4313      	orrs	r3, r2
 8005a24:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm10_en |
 8005a26:	7b7b      	ldrb	r3, [r7, #13]
 8005a28:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8005a2c:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm9_en  |
 8005a2e:	4313      	orrs	r3, r2
 8005a30:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm11_en |
 8005a32:	7b7b      	ldrb	r3, [r7, #13]
 8005a34:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8005a38:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm10_en |
 8005a3a:	4313      	orrs	r3, r2
 8005a3c:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm12_en |
 8005a3e:	7b7b      	ldrb	r3, [r7, #13]
 8005a40:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8005a44:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm11_en |
 8005a46:	4313      	orrs	r3, r2
 8005a48:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm13_en |
 8005a4a:	7b7b      	ldrb	r3, [r7, #13]
 8005a4c:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8005a50:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm12_en |
 8005a52:	4313      	orrs	r3, r2
 8005a54:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm14_en |
 8005a56:	7b7b      	ldrb	r3, [r7, #13]
 8005a58:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8005a5c:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm13_en |
 8005a5e:	4313      	orrs	r3, r2
 8005a60:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm15_en |
 8005a62:	7b7b      	ldrb	r3, [r7, #13]
 8005a64:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8005a68:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm14_en |
 8005a6a:	4313      	orrs	r3, r2
 8005a6c:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm16_en) == PROPERTY_ENABLE)
 8005a6e:	7b7b      	ldrb	r3, [r7, #13]
 8005a70:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8005a74:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm15_en |
 8005a76:	4313      	orrs	r3, r2
 8005a78:	b2db      	uxtb	r3, r3
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
 8005a7a:	2b01      	cmp	r3, #1
 8005a7c:	d163      	bne.n	8005b46 <lsm6dso_xl_data_rate_set+0x1ae>
    {
      ret =  lsm6dso_fsm_data_rate_get(ctx, &fsm_odr);
 8005a7e:	f107 030b 	add.w	r3, r7, #11
 8005a82:	4619      	mov	r1, r3
 8005a84:	6878      	ldr	r0, [r7, #4]
 8005a86:	f000 fc57 	bl	8006338 <lsm6dso_fsm_data_rate_get>
 8005a8a:	6138      	str	r0, [r7, #16]

      if (ret == 0)
 8005a8c:	693b      	ldr	r3, [r7, #16]
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	d159      	bne.n	8005b46 <lsm6dso_xl_data_rate_set+0x1ae>
      {
        switch (fsm_odr)
 8005a92:	7afb      	ldrb	r3, [r7, #11]
 8005a94:	2b03      	cmp	r3, #3
 8005a96:	d853      	bhi.n	8005b40 <lsm6dso_xl_data_rate_set+0x1a8>
 8005a98:	a201      	add	r2, pc, #4	; (adr r2, 8005aa0 <lsm6dso_xl_data_rate_set+0x108>)
 8005a9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a9e:	bf00      	nop
 8005aa0:	08005ab1 	.word	0x08005ab1
 8005aa4:	08005ac3 	.word	0x08005ac3
 8005aa8:	08005ae1 	.word	0x08005ae1
 8005aac:	08005b0b 	.word	0x08005b0b
        {
          case LSM6DSO_ODR_FSM_12Hz5:
            if (val == LSM6DSO_XL_ODR_OFF)
 8005ab0:	78fb      	ldrb	r3, [r7, #3]
 8005ab2:	2b00      	cmp	r3, #0
 8005ab4:	d102      	bne.n	8005abc <lsm6dso_xl_data_rate_set+0x124>
            {
              odr_xl = LSM6DSO_XL_ODR_12Hz5;
 8005ab6:	2301      	movs	r3, #1
 8005ab8:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_xl = val;
            }

            break;
 8005aba:	e045      	b.n	8005b48 <lsm6dso_xl_data_rate_set+0x1b0>
              odr_xl = val;
 8005abc:	78fb      	ldrb	r3, [r7, #3]
 8005abe:	75fb      	strb	r3, [r7, #23]
            break;
 8005ac0:	e042      	b.n	8005b48 <lsm6dso_xl_data_rate_set+0x1b0>

          case LSM6DSO_ODR_FSM_26Hz:
            if (val == LSM6DSO_XL_ODR_OFF)
 8005ac2:	78fb      	ldrb	r3, [r7, #3]
 8005ac4:	2b00      	cmp	r3, #0
 8005ac6:	d102      	bne.n	8005ace <lsm6dso_xl_data_rate_set+0x136>
            {
              odr_xl = LSM6DSO_XL_ODR_26Hz;
 8005ac8:	2302      	movs	r3, #2
 8005aca:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_xl = val;
            }

            break;
 8005acc:	e03c      	b.n	8005b48 <lsm6dso_xl_data_rate_set+0x1b0>
            else if (val == LSM6DSO_XL_ODR_12Hz5)
 8005ace:	78fb      	ldrb	r3, [r7, #3]
 8005ad0:	2b01      	cmp	r3, #1
 8005ad2:	d102      	bne.n	8005ada <lsm6dso_xl_data_rate_set+0x142>
              odr_xl = LSM6DSO_XL_ODR_26Hz;
 8005ad4:	2302      	movs	r3, #2
 8005ad6:	75fb      	strb	r3, [r7, #23]
            break;
 8005ad8:	e036      	b.n	8005b48 <lsm6dso_xl_data_rate_set+0x1b0>
              odr_xl = val;
 8005ada:	78fb      	ldrb	r3, [r7, #3]
 8005adc:	75fb      	strb	r3, [r7, #23]
            break;
 8005ade:	e033      	b.n	8005b48 <lsm6dso_xl_data_rate_set+0x1b0>

          case LSM6DSO_ODR_FSM_52Hz:
            if (val == LSM6DSO_XL_ODR_OFF)
 8005ae0:	78fb      	ldrb	r3, [r7, #3]
 8005ae2:	2b00      	cmp	r3, #0
 8005ae4:	d102      	bne.n	8005aec <lsm6dso_xl_data_rate_set+0x154>
            {
              odr_xl = LSM6DSO_XL_ODR_52Hz;
 8005ae6:	2303      	movs	r3, #3
 8005ae8:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_xl = val;
            }

            break;
 8005aea:	e02d      	b.n	8005b48 <lsm6dso_xl_data_rate_set+0x1b0>
            else if (val == LSM6DSO_XL_ODR_12Hz5)
 8005aec:	78fb      	ldrb	r3, [r7, #3]
 8005aee:	2b01      	cmp	r3, #1
 8005af0:	d102      	bne.n	8005af8 <lsm6dso_xl_data_rate_set+0x160>
              odr_xl = LSM6DSO_XL_ODR_52Hz;
 8005af2:	2303      	movs	r3, #3
 8005af4:	75fb      	strb	r3, [r7, #23]
            break;
 8005af6:	e027      	b.n	8005b48 <lsm6dso_xl_data_rate_set+0x1b0>
            else if (val == LSM6DSO_XL_ODR_26Hz)
 8005af8:	78fb      	ldrb	r3, [r7, #3]
 8005afa:	2b02      	cmp	r3, #2
 8005afc:	d102      	bne.n	8005b04 <lsm6dso_xl_data_rate_set+0x16c>
              odr_xl = LSM6DSO_XL_ODR_52Hz;
 8005afe:	2303      	movs	r3, #3
 8005b00:	75fb      	strb	r3, [r7, #23]
            break;
 8005b02:	e021      	b.n	8005b48 <lsm6dso_xl_data_rate_set+0x1b0>
              odr_xl = val;
 8005b04:	78fb      	ldrb	r3, [r7, #3]
 8005b06:	75fb      	strb	r3, [r7, #23]
            break;
 8005b08:	e01e      	b.n	8005b48 <lsm6dso_xl_data_rate_set+0x1b0>

          case LSM6DSO_ODR_FSM_104Hz:
            if (val == LSM6DSO_XL_ODR_OFF)
 8005b0a:	78fb      	ldrb	r3, [r7, #3]
 8005b0c:	2b00      	cmp	r3, #0
 8005b0e:	d102      	bne.n	8005b16 <lsm6dso_xl_data_rate_set+0x17e>
            {
              odr_xl = LSM6DSO_XL_ODR_104Hz;
 8005b10:	2304      	movs	r3, #4
 8005b12:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_xl = val;
            }

            break;
 8005b14:	e018      	b.n	8005b48 <lsm6dso_xl_data_rate_set+0x1b0>
            else if (val == LSM6DSO_XL_ODR_12Hz5)
 8005b16:	78fb      	ldrb	r3, [r7, #3]
 8005b18:	2b01      	cmp	r3, #1
 8005b1a:	d102      	bne.n	8005b22 <lsm6dso_xl_data_rate_set+0x18a>
              odr_xl = LSM6DSO_XL_ODR_104Hz;
 8005b1c:	2304      	movs	r3, #4
 8005b1e:	75fb      	strb	r3, [r7, #23]
            break;
 8005b20:	e012      	b.n	8005b48 <lsm6dso_xl_data_rate_set+0x1b0>
            else if (val == LSM6DSO_XL_ODR_26Hz)
 8005b22:	78fb      	ldrb	r3, [r7, #3]
 8005b24:	2b02      	cmp	r3, #2
 8005b26:	d102      	bne.n	8005b2e <lsm6dso_xl_data_rate_set+0x196>
              odr_xl = LSM6DSO_XL_ODR_104Hz;
 8005b28:	2304      	movs	r3, #4
 8005b2a:	75fb      	strb	r3, [r7, #23]
            break;
 8005b2c:	e00c      	b.n	8005b48 <lsm6dso_xl_data_rate_set+0x1b0>
            else if (val == LSM6DSO_XL_ODR_52Hz)
 8005b2e:	78fb      	ldrb	r3, [r7, #3]
 8005b30:	2b03      	cmp	r3, #3
 8005b32:	d102      	bne.n	8005b3a <lsm6dso_xl_data_rate_set+0x1a2>
              odr_xl = LSM6DSO_XL_ODR_104Hz;
 8005b34:	2304      	movs	r3, #4
 8005b36:	75fb      	strb	r3, [r7, #23]
            break;
 8005b38:	e006      	b.n	8005b48 <lsm6dso_xl_data_rate_set+0x1b0>
              odr_xl = val;
 8005b3a:	78fb      	ldrb	r3, [r7, #3]
 8005b3c:	75fb      	strb	r3, [r7, #23]
            break;
 8005b3e:	e003      	b.n	8005b48 <lsm6dso_xl_data_rate_set+0x1b0>

          default:
            odr_xl = val;
 8005b40:	78fb      	ldrb	r3, [r7, #3]
 8005b42:	75fb      	strb	r3, [r7, #23]
            break;
 8005b44:	e000      	b.n	8005b48 <lsm6dso_xl_data_rate_set+0x1b0>
        }
      }
 8005b46:	bf00      	nop
    }
  }

  if (ret == 0)
 8005b48:	693b      	ldr	r3, [r7, #16]
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	d107      	bne.n	8005b5e <lsm6dso_xl_data_rate_set+0x1c6>
  {
    ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL1_XL, (uint8_t *)&reg, 1);
 8005b4e:	f107 0208 	add.w	r2, r7, #8
 8005b52:	2301      	movs	r3, #1
 8005b54:	2110      	movs	r1, #16
 8005b56:	6878      	ldr	r0, [r7, #4]
 8005b58:	f7ff fe90 	bl	800587c <lsm6dso_read_reg>
 8005b5c:	6138      	str	r0, [r7, #16]
  }

  if (ret == 0)
 8005b5e:	693b      	ldr	r3, [r7, #16]
 8005b60:	2b00      	cmp	r3, #0
 8005b62:	d10f      	bne.n	8005b84 <lsm6dso_xl_data_rate_set+0x1ec>
  {
    reg.odr_xl = (uint8_t) odr_xl;
 8005b64:	7dfb      	ldrb	r3, [r7, #23]
 8005b66:	f003 030f 	and.w	r3, r3, #15
 8005b6a:	b2da      	uxtb	r2, r3
 8005b6c:	7a3b      	ldrb	r3, [r7, #8]
 8005b6e:	f362 1307 	bfi	r3, r2, #4, #4
 8005b72:	723b      	strb	r3, [r7, #8]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL1_XL, (uint8_t *)&reg, 1);
 8005b74:	f107 0208 	add.w	r2, r7, #8
 8005b78:	2301      	movs	r3, #1
 8005b7a:	2110      	movs	r1, #16
 8005b7c:	6878      	ldr	r0, [r7, #4]
 8005b7e:	f7ff fe95 	bl	80058ac <lsm6dso_write_reg>
 8005b82:	6138      	str	r0, [r7, #16]
  }

  return ret;
 8005b84:	693b      	ldr	r3, [r7, #16]
}
 8005b86:	4618      	mov	r0, r3
 8005b88:	3718      	adds	r7, #24
 8005b8a:	46bd      	mov	sp, r7
 8005b8c:	bd80      	pop	{r7, pc}
 8005b8e:	bf00      	nop

08005b90 <lsm6dso_xl_data_rate_get>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_xl_data_rate_get(stmdev_ctx_t *ctx,
                                 lsm6dso_odr_xl_t *val)
{
 8005b90:	b580      	push	{r7, lr}
 8005b92:	b084      	sub	sp, #16
 8005b94:	af00      	add	r7, sp, #0
 8005b96:	6078      	str	r0, [r7, #4]
 8005b98:	6039      	str	r1, [r7, #0]
  lsm6dso_ctrl1_xl_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL1_XL, (uint8_t *)&reg, 1);
 8005b9a:	f107 0208 	add.w	r2, r7, #8
 8005b9e:	2301      	movs	r3, #1
 8005ba0:	2110      	movs	r1, #16
 8005ba2:	6878      	ldr	r0, [r7, #4]
 8005ba4:	f7ff fe6a 	bl	800587c <lsm6dso_read_reg>
 8005ba8:	60f8      	str	r0, [r7, #12]

  switch (reg.odr_xl)
 8005baa:	7a3b      	ldrb	r3, [r7, #8]
 8005bac:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8005bb0:	b2db      	uxtb	r3, r3
 8005bb2:	2b0b      	cmp	r3, #11
 8005bb4:	d84a      	bhi.n	8005c4c <lsm6dso_xl_data_rate_get+0xbc>
 8005bb6:	a201      	add	r2, pc, #4	; (adr r2, 8005bbc <lsm6dso_xl_data_rate_get+0x2c>)
 8005bb8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005bbc:	08005bed 	.word	0x08005bed
 8005bc0:	08005bf5 	.word	0x08005bf5
 8005bc4:	08005bfd 	.word	0x08005bfd
 8005bc8:	08005c05 	.word	0x08005c05
 8005bcc:	08005c0d 	.word	0x08005c0d
 8005bd0:	08005c15 	.word	0x08005c15
 8005bd4:	08005c1d 	.word	0x08005c1d
 8005bd8:	08005c25 	.word	0x08005c25
 8005bdc:	08005c2d 	.word	0x08005c2d
 8005be0:	08005c35 	.word	0x08005c35
 8005be4:	08005c3d 	.word	0x08005c3d
 8005be8:	08005c45 	.word	0x08005c45
  {
    case LSM6DSO_XL_ODR_OFF:
      *val = LSM6DSO_XL_ODR_OFF;
 8005bec:	683b      	ldr	r3, [r7, #0]
 8005bee:	2200      	movs	r2, #0
 8005bf0:	701a      	strb	r2, [r3, #0]
      break;
 8005bf2:	e02f      	b.n	8005c54 <lsm6dso_xl_data_rate_get+0xc4>

    case LSM6DSO_XL_ODR_12Hz5:
      *val = LSM6DSO_XL_ODR_12Hz5;
 8005bf4:	683b      	ldr	r3, [r7, #0]
 8005bf6:	2201      	movs	r2, #1
 8005bf8:	701a      	strb	r2, [r3, #0]
      break;
 8005bfa:	e02b      	b.n	8005c54 <lsm6dso_xl_data_rate_get+0xc4>

    case LSM6DSO_XL_ODR_26Hz:
      *val = LSM6DSO_XL_ODR_26Hz;
 8005bfc:	683b      	ldr	r3, [r7, #0]
 8005bfe:	2202      	movs	r2, #2
 8005c00:	701a      	strb	r2, [r3, #0]
      break;
 8005c02:	e027      	b.n	8005c54 <lsm6dso_xl_data_rate_get+0xc4>

    case LSM6DSO_XL_ODR_52Hz:
      *val = LSM6DSO_XL_ODR_52Hz;
 8005c04:	683b      	ldr	r3, [r7, #0]
 8005c06:	2203      	movs	r2, #3
 8005c08:	701a      	strb	r2, [r3, #0]
      break;
 8005c0a:	e023      	b.n	8005c54 <lsm6dso_xl_data_rate_get+0xc4>

    case LSM6DSO_XL_ODR_104Hz:
      *val = LSM6DSO_XL_ODR_104Hz;
 8005c0c:	683b      	ldr	r3, [r7, #0]
 8005c0e:	2204      	movs	r2, #4
 8005c10:	701a      	strb	r2, [r3, #0]
      break;
 8005c12:	e01f      	b.n	8005c54 <lsm6dso_xl_data_rate_get+0xc4>

    case LSM6DSO_XL_ODR_208Hz:
      *val = LSM6DSO_XL_ODR_208Hz;
 8005c14:	683b      	ldr	r3, [r7, #0]
 8005c16:	2205      	movs	r2, #5
 8005c18:	701a      	strb	r2, [r3, #0]
      break;
 8005c1a:	e01b      	b.n	8005c54 <lsm6dso_xl_data_rate_get+0xc4>

    case LSM6DSO_XL_ODR_417Hz:
      *val = LSM6DSO_XL_ODR_417Hz;
 8005c1c:	683b      	ldr	r3, [r7, #0]
 8005c1e:	2206      	movs	r2, #6
 8005c20:	701a      	strb	r2, [r3, #0]
      break;
 8005c22:	e017      	b.n	8005c54 <lsm6dso_xl_data_rate_get+0xc4>

    case LSM6DSO_XL_ODR_833Hz:
      *val = LSM6DSO_XL_ODR_833Hz;
 8005c24:	683b      	ldr	r3, [r7, #0]
 8005c26:	2207      	movs	r2, #7
 8005c28:	701a      	strb	r2, [r3, #0]
      break;
 8005c2a:	e013      	b.n	8005c54 <lsm6dso_xl_data_rate_get+0xc4>

    case LSM6DSO_XL_ODR_1667Hz:
      *val = LSM6DSO_XL_ODR_1667Hz;
 8005c2c:	683b      	ldr	r3, [r7, #0]
 8005c2e:	2208      	movs	r2, #8
 8005c30:	701a      	strb	r2, [r3, #0]
      break;
 8005c32:	e00f      	b.n	8005c54 <lsm6dso_xl_data_rate_get+0xc4>

    case LSM6DSO_XL_ODR_3333Hz:
      *val = LSM6DSO_XL_ODR_3333Hz;
 8005c34:	683b      	ldr	r3, [r7, #0]
 8005c36:	2209      	movs	r2, #9
 8005c38:	701a      	strb	r2, [r3, #0]
      break;
 8005c3a:	e00b      	b.n	8005c54 <lsm6dso_xl_data_rate_get+0xc4>

    case LSM6DSO_XL_ODR_6667Hz:
      *val = LSM6DSO_XL_ODR_6667Hz;
 8005c3c:	683b      	ldr	r3, [r7, #0]
 8005c3e:	220a      	movs	r2, #10
 8005c40:	701a      	strb	r2, [r3, #0]
      break;
 8005c42:	e007      	b.n	8005c54 <lsm6dso_xl_data_rate_get+0xc4>

    case LSM6DSO_XL_ODR_1Hz6:
      *val = LSM6DSO_XL_ODR_1Hz6;
 8005c44:	683b      	ldr	r3, [r7, #0]
 8005c46:	220b      	movs	r2, #11
 8005c48:	701a      	strb	r2, [r3, #0]
      break;
 8005c4a:	e003      	b.n	8005c54 <lsm6dso_xl_data_rate_get+0xc4>

    default:
      *val = LSM6DSO_XL_ODR_OFF;
 8005c4c:	683b      	ldr	r3, [r7, #0]
 8005c4e:	2200      	movs	r2, #0
 8005c50:	701a      	strb	r2, [r3, #0]
      break;
 8005c52:	bf00      	nop
  }

  return ret;
 8005c54:	68fb      	ldr	r3, [r7, #12]
}
 8005c56:	4618      	mov	r0, r3
 8005c58:	3710      	adds	r7, #16
 8005c5a:	46bd      	mov	sp, r7
 8005c5c:	bd80      	pop	{r7, pc}
 8005c5e:	bf00      	nop

08005c60 <lsm6dso_gy_full_scale_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_gy_full_scale_set(stmdev_ctx_t *ctx,
                                  lsm6dso_fs_g_t val)
{
 8005c60:	b580      	push	{r7, lr}
 8005c62:	b084      	sub	sp, #16
 8005c64:	af00      	add	r7, sp, #0
 8005c66:	6078      	str	r0, [r7, #4]
 8005c68:	460b      	mov	r3, r1
 8005c6a:	70fb      	strb	r3, [r7, #3]
  lsm6dso_ctrl2_g_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL2_G, (uint8_t *)&reg, 1);
 8005c6c:	f107 0208 	add.w	r2, r7, #8
 8005c70:	2301      	movs	r3, #1
 8005c72:	2111      	movs	r1, #17
 8005c74:	6878      	ldr	r0, [r7, #4]
 8005c76:	f7ff fe01 	bl	800587c <lsm6dso_read_reg>
 8005c7a:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	2b00      	cmp	r3, #0
 8005c80:	d10f      	bne.n	8005ca2 <lsm6dso_gy_full_scale_set+0x42>
  {
    reg.fs_g = (uint8_t) val;
 8005c82:	78fb      	ldrb	r3, [r7, #3]
 8005c84:	f003 0307 	and.w	r3, r3, #7
 8005c88:	b2da      	uxtb	r2, r3
 8005c8a:	7a3b      	ldrb	r3, [r7, #8]
 8005c8c:	f362 0343 	bfi	r3, r2, #1, #3
 8005c90:	723b      	strb	r3, [r7, #8]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL2_G, (uint8_t *)&reg, 1);
 8005c92:	f107 0208 	add.w	r2, r7, #8
 8005c96:	2301      	movs	r3, #1
 8005c98:	2111      	movs	r1, #17
 8005c9a:	6878      	ldr	r0, [r7, #4]
 8005c9c:	f7ff fe06 	bl	80058ac <lsm6dso_write_reg>
 8005ca0:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8005ca2:	68fb      	ldr	r3, [r7, #12]
}
 8005ca4:	4618      	mov	r0, r3
 8005ca6:	3710      	adds	r7, #16
 8005ca8:	46bd      	mov	sp, r7
 8005caa:	bd80      	pop	{r7, pc}

08005cac <lsm6dso_gy_full_scale_get>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_gy_full_scale_get(stmdev_ctx_t *ctx,
                                  lsm6dso_fs_g_t *val)
{
 8005cac:	b580      	push	{r7, lr}
 8005cae:	b084      	sub	sp, #16
 8005cb0:	af00      	add	r7, sp, #0
 8005cb2:	6078      	str	r0, [r7, #4]
 8005cb4:	6039      	str	r1, [r7, #0]
  lsm6dso_ctrl2_g_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL2_G, (uint8_t *)&reg, 1);
 8005cb6:	f107 0208 	add.w	r2, r7, #8
 8005cba:	2301      	movs	r3, #1
 8005cbc:	2111      	movs	r1, #17
 8005cbe:	6878      	ldr	r0, [r7, #4]
 8005cc0:	f7ff fddc 	bl	800587c <lsm6dso_read_reg>
 8005cc4:	60f8      	str	r0, [r7, #12]

  switch (reg.fs_g)
 8005cc6:	7a3b      	ldrb	r3, [r7, #8]
 8005cc8:	f3c3 0342 	ubfx	r3, r3, #1, #3
 8005ccc:	b2db      	uxtb	r3, r3
 8005cce:	2b06      	cmp	r3, #6
 8005cd0:	d824      	bhi.n	8005d1c <lsm6dso_gy_full_scale_get+0x70>
 8005cd2:	a201      	add	r2, pc, #4	; (adr r2, 8005cd8 <lsm6dso_gy_full_scale_get+0x2c>)
 8005cd4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005cd8:	08005cf5 	.word	0x08005cf5
 8005cdc:	08005cfd 	.word	0x08005cfd
 8005ce0:	08005d05 	.word	0x08005d05
 8005ce4:	08005d1d 	.word	0x08005d1d
 8005ce8:	08005d0d 	.word	0x08005d0d
 8005cec:	08005d1d 	.word	0x08005d1d
 8005cf0:	08005d15 	.word	0x08005d15
  {
    case LSM6DSO_250dps:
      *val = LSM6DSO_250dps;
 8005cf4:	683b      	ldr	r3, [r7, #0]
 8005cf6:	2200      	movs	r2, #0
 8005cf8:	701a      	strb	r2, [r3, #0]
      break;
 8005cfa:	e013      	b.n	8005d24 <lsm6dso_gy_full_scale_get+0x78>

    case LSM6DSO_125dps:
      *val = LSM6DSO_125dps;
 8005cfc:	683b      	ldr	r3, [r7, #0]
 8005cfe:	2201      	movs	r2, #1
 8005d00:	701a      	strb	r2, [r3, #0]
      break;
 8005d02:	e00f      	b.n	8005d24 <lsm6dso_gy_full_scale_get+0x78>

    case LSM6DSO_500dps:
      *val = LSM6DSO_500dps;
 8005d04:	683b      	ldr	r3, [r7, #0]
 8005d06:	2202      	movs	r2, #2
 8005d08:	701a      	strb	r2, [r3, #0]
      break;
 8005d0a:	e00b      	b.n	8005d24 <lsm6dso_gy_full_scale_get+0x78>

    case LSM6DSO_1000dps:
      *val = LSM6DSO_1000dps;
 8005d0c:	683b      	ldr	r3, [r7, #0]
 8005d0e:	2204      	movs	r2, #4
 8005d10:	701a      	strb	r2, [r3, #0]
      break;
 8005d12:	e007      	b.n	8005d24 <lsm6dso_gy_full_scale_get+0x78>

    case LSM6DSO_2000dps:
      *val = LSM6DSO_2000dps;
 8005d14:	683b      	ldr	r3, [r7, #0]
 8005d16:	2206      	movs	r2, #6
 8005d18:	701a      	strb	r2, [r3, #0]
      break;
 8005d1a:	e003      	b.n	8005d24 <lsm6dso_gy_full_scale_get+0x78>

    default:
      *val = LSM6DSO_250dps;
 8005d1c:	683b      	ldr	r3, [r7, #0]
 8005d1e:	2200      	movs	r2, #0
 8005d20:	701a      	strb	r2, [r3, #0]
      break;
 8005d22:	bf00      	nop
  }

  return ret;
 8005d24:	68fb      	ldr	r3, [r7, #12]
}
 8005d26:	4618      	mov	r0, r3
 8005d28:	3710      	adds	r7, #16
 8005d2a:	46bd      	mov	sp, r7
 8005d2c:	bd80      	pop	{r7, pc}
 8005d2e:	bf00      	nop

08005d30 <lsm6dso_gy_data_rate_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_gy_data_rate_set(stmdev_ctx_t *ctx,
                                 lsm6dso_odr_g_t val)
{
 8005d30:	b580      	push	{r7, lr}
 8005d32:	b086      	sub	sp, #24
 8005d34:	af00      	add	r7, sp, #0
 8005d36:	6078      	str	r0, [r7, #4]
 8005d38:	460b      	mov	r3, r1
 8005d3a:	70fb      	strb	r3, [r7, #3]
  lsm6dso_odr_g_t odr_gy =  val;
 8005d3c:	78fb      	ldrb	r3, [r7, #3]
 8005d3e:	75fb      	strb	r3, [r7, #23]
  lsm6dso_fsm_odr_t fsm_odr;
  lsm6dso_ctrl2_g_t reg;
  int32_t ret;

  /* Check the Finite State Machine data rate constraints */
  ret =  lsm6dso_fsm_enable_get(ctx, &fsm_enable);
 8005d40:	f107 030c 	add.w	r3, r7, #12
 8005d44:	4619      	mov	r1, r3
 8005d46:	6878      	ldr	r0, [r7, #4]
 8005d48:	f000 fad5 	bl	80062f6 <lsm6dso_fsm_enable_get>
 8005d4c:	6138      	str	r0, [r7, #16]

  if (ret == 0)
 8005d4e:	693b      	ldr	r3, [r7, #16]
 8005d50:	2b00      	cmp	r3, #0
 8005d52:	f040 80c4 	bne.w	8005ede <lsm6dso_gy_data_rate_set+0x1ae>
  {
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
 8005d56:	7b3b      	ldrb	r3, [r7, #12]
 8005d58:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8005d5c:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm2_en  |
 8005d5e:	7b3b      	ldrb	r3, [r7, #12]
 8005d60:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8005d64:	b2db      	uxtb	r3, r3
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
 8005d66:	4313      	orrs	r3, r2
 8005d68:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm3_en  |
 8005d6a:	7b3b      	ldrb	r3, [r7, #12]
 8005d6c:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8005d70:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm2_en  |
 8005d72:	4313      	orrs	r3, r2
 8005d74:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm4_en  |
 8005d76:	7b3b      	ldrb	r3, [r7, #12]
 8005d78:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8005d7c:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm3_en  |
 8005d7e:	4313      	orrs	r3, r2
 8005d80:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm5_en  |
 8005d82:	7b3b      	ldrb	r3, [r7, #12]
 8005d84:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8005d88:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm4_en  |
 8005d8a:	4313      	orrs	r3, r2
 8005d8c:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm6_en  |
 8005d8e:	7b3b      	ldrb	r3, [r7, #12]
 8005d90:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8005d94:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm5_en  |
 8005d96:	4313      	orrs	r3, r2
 8005d98:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm7_en  |
 8005d9a:	7b3b      	ldrb	r3, [r7, #12]
 8005d9c:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8005da0:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm6_en  |
 8005da2:	4313      	orrs	r3, r2
 8005da4:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm8_en  |
 8005da6:	7b3b      	ldrb	r3, [r7, #12]
 8005da8:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8005dac:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm7_en  |
 8005dae:	4313      	orrs	r3, r2
 8005db0:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm9_en  |
 8005db2:	7b7b      	ldrb	r3, [r7, #13]
 8005db4:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8005db8:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm8_en  |
 8005dba:	4313      	orrs	r3, r2
 8005dbc:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm10_en |
 8005dbe:	7b7b      	ldrb	r3, [r7, #13]
 8005dc0:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8005dc4:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm9_en  |
 8005dc6:	4313      	orrs	r3, r2
 8005dc8:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm11_en |
 8005dca:	7b7b      	ldrb	r3, [r7, #13]
 8005dcc:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8005dd0:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm10_en |
 8005dd2:	4313      	orrs	r3, r2
 8005dd4:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm12_en |
 8005dd6:	7b7b      	ldrb	r3, [r7, #13]
 8005dd8:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8005ddc:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm11_en |
 8005dde:	4313      	orrs	r3, r2
 8005de0:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm13_en |
 8005de2:	7b7b      	ldrb	r3, [r7, #13]
 8005de4:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8005de8:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm12_en |
 8005dea:	4313      	orrs	r3, r2
 8005dec:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm14_en |
 8005dee:	7b7b      	ldrb	r3, [r7, #13]
 8005df0:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8005df4:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm13_en |
 8005df6:	4313      	orrs	r3, r2
 8005df8:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm15_en |
 8005dfa:	7b7b      	ldrb	r3, [r7, #13]
 8005dfc:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8005e00:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm14_en |
 8005e02:	4313      	orrs	r3, r2
 8005e04:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm16_en) == PROPERTY_ENABLE)
 8005e06:	7b7b      	ldrb	r3, [r7, #13]
 8005e08:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8005e0c:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm15_en |
 8005e0e:	4313      	orrs	r3, r2
 8005e10:	b2db      	uxtb	r3, r3
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
 8005e12:	2b01      	cmp	r3, #1
 8005e14:	d163      	bne.n	8005ede <lsm6dso_gy_data_rate_set+0x1ae>
    {
      ret =  lsm6dso_fsm_data_rate_get(ctx, &fsm_odr);
 8005e16:	f107 030b 	add.w	r3, r7, #11
 8005e1a:	4619      	mov	r1, r3
 8005e1c:	6878      	ldr	r0, [r7, #4]
 8005e1e:	f000 fa8b 	bl	8006338 <lsm6dso_fsm_data_rate_get>
 8005e22:	6138      	str	r0, [r7, #16]

      if (ret == 0)
 8005e24:	693b      	ldr	r3, [r7, #16]
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	d159      	bne.n	8005ede <lsm6dso_gy_data_rate_set+0x1ae>
      {
        switch (fsm_odr)
 8005e2a:	7afb      	ldrb	r3, [r7, #11]
 8005e2c:	2b03      	cmp	r3, #3
 8005e2e:	d853      	bhi.n	8005ed8 <lsm6dso_gy_data_rate_set+0x1a8>
 8005e30:	a201      	add	r2, pc, #4	; (adr r2, 8005e38 <lsm6dso_gy_data_rate_set+0x108>)
 8005e32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e36:	bf00      	nop
 8005e38:	08005e49 	.word	0x08005e49
 8005e3c:	08005e5b 	.word	0x08005e5b
 8005e40:	08005e79 	.word	0x08005e79
 8005e44:	08005ea3 	.word	0x08005ea3
        {
          case LSM6DSO_ODR_FSM_12Hz5:
            if (val == LSM6DSO_GY_ODR_OFF)
 8005e48:	78fb      	ldrb	r3, [r7, #3]
 8005e4a:	2b00      	cmp	r3, #0
 8005e4c:	d102      	bne.n	8005e54 <lsm6dso_gy_data_rate_set+0x124>
            {
              odr_gy = LSM6DSO_GY_ODR_12Hz5;
 8005e4e:	2301      	movs	r3, #1
 8005e50:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_gy = val;
            }

            break;
 8005e52:	e045      	b.n	8005ee0 <lsm6dso_gy_data_rate_set+0x1b0>
              odr_gy = val;
 8005e54:	78fb      	ldrb	r3, [r7, #3]
 8005e56:	75fb      	strb	r3, [r7, #23]
            break;
 8005e58:	e042      	b.n	8005ee0 <lsm6dso_gy_data_rate_set+0x1b0>

          case LSM6DSO_ODR_FSM_26Hz:
            if (val == LSM6DSO_GY_ODR_OFF)
 8005e5a:	78fb      	ldrb	r3, [r7, #3]
 8005e5c:	2b00      	cmp	r3, #0
 8005e5e:	d102      	bne.n	8005e66 <lsm6dso_gy_data_rate_set+0x136>
            {
              odr_gy = LSM6DSO_GY_ODR_26Hz;
 8005e60:	2302      	movs	r3, #2
 8005e62:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_gy = val;
            }

            break;
 8005e64:	e03c      	b.n	8005ee0 <lsm6dso_gy_data_rate_set+0x1b0>
            else if (val == LSM6DSO_GY_ODR_12Hz5)
 8005e66:	78fb      	ldrb	r3, [r7, #3]
 8005e68:	2b01      	cmp	r3, #1
 8005e6a:	d102      	bne.n	8005e72 <lsm6dso_gy_data_rate_set+0x142>
              odr_gy = LSM6DSO_GY_ODR_26Hz;
 8005e6c:	2302      	movs	r3, #2
 8005e6e:	75fb      	strb	r3, [r7, #23]
            break;
 8005e70:	e036      	b.n	8005ee0 <lsm6dso_gy_data_rate_set+0x1b0>
              odr_gy = val;
 8005e72:	78fb      	ldrb	r3, [r7, #3]
 8005e74:	75fb      	strb	r3, [r7, #23]
            break;
 8005e76:	e033      	b.n	8005ee0 <lsm6dso_gy_data_rate_set+0x1b0>

          case LSM6DSO_ODR_FSM_52Hz:
            if (val == LSM6DSO_GY_ODR_OFF)
 8005e78:	78fb      	ldrb	r3, [r7, #3]
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	d102      	bne.n	8005e84 <lsm6dso_gy_data_rate_set+0x154>
            {
              odr_gy = LSM6DSO_GY_ODR_52Hz;
 8005e7e:	2303      	movs	r3, #3
 8005e80:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_gy = val;
            }

            break;
 8005e82:	e02d      	b.n	8005ee0 <lsm6dso_gy_data_rate_set+0x1b0>
            else if (val == LSM6DSO_GY_ODR_12Hz5)
 8005e84:	78fb      	ldrb	r3, [r7, #3]
 8005e86:	2b01      	cmp	r3, #1
 8005e88:	d102      	bne.n	8005e90 <lsm6dso_gy_data_rate_set+0x160>
              odr_gy = LSM6DSO_GY_ODR_52Hz;
 8005e8a:	2303      	movs	r3, #3
 8005e8c:	75fb      	strb	r3, [r7, #23]
            break;
 8005e8e:	e027      	b.n	8005ee0 <lsm6dso_gy_data_rate_set+0x1b0>
            else if (val == LSM6DSO_GY_ODR_26Hz)
 8005e90:	78fb      	ldrb	r3, [r7, #3]
 8005e92:	2b02      	cmp	r3, #2
 8005e94:	d102      	bne.n	8005e9c <lsm6dso_gy_data_rate_set+0x16c>
              odr_gy = LSM6DSO_GY_ODR_52Hz;
 8005e96:	2303      	movs	r3, #3
 8005e98:	75fb      	strb	r3, [r7, #23]
            break;
 8005e9a:	e021      	b.n	8005ee0 <lsm6dso_gy_data_rate_set+0x1b0>
              odr_gy = val;
 8005e9c:	78fb      	ldrb	r3, [r7, #3]
 8005e9e:	75fb      	strb	r3, [r7, #23]
            break;
 8005ea0:	e01e      	b.n	8005ee0 <lsm6dso_gy_data_rate_set+0x1b0>

          case LSM6DSO_ODR_FSM_104Hz:
            if (val == LSM6DSO_GY_ODR_OFF)
 8005ea2:	78fb      	ldrb	r3, [r7, #3]
 8005ea4:	2b00      	cmp	r3, #0
 8005ea6:	d102      	bne.n	8005eae <lsm6dso_gy_data_rate_set+0x17e>
            {
              odr_gy = LSM6DSO_GY_ODR_104Hz;
 8005ea8:	2304      	movs	r3, #4
 8005eaa:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_gy = val;
            }

            break;
 8005eac:	e018      	b.n	8005ee0 <lsm6dso_gy_data_rate_set+0x1b0>
            else if (val == LSM6DSO_GY_ODR_12Hz5)
 8005eae:	78fb      	ldrb	r3, [r7, #3]
 8005eb0:	2b01      	cmp	r3, #1
 8005eb2:	d102      	bne.n	8005eba <lsm6dso_gy_data_rate_set+0x18a>
              odr_gy = LSM6DSO_GY_ODR_104Hz;
 8005eb4:	2304      	movs	r3, #4
 8005eb6:	75fb      	strb	r3, [r7, #23]
            break;
 8005eb8:	e012      	b.n	8005ee0 <lsm6dso_gy_data_rate_set+0x1b0>
            else if (val == LSM6DSO_GY_ODR_26Hz)
 8005eba:	78fb      	ldrb	r3, [r7, #3]
 8005ebc:	2b02      	cmp	r3, #2
 8005ebe:	d102      	bne.n	8005ec6 <lsm6dso_gy_data_rate_set+0x196>
              odr_gy = LSM6DSO_GY_ODR_104Hz;
 8005ec0:	2304      	movs	r3, #4
 8005ec2:	75fb      	strb	r3, [r7, #23]
            break;
 8005ec4:	e00c      	b.n	8005ee0 <lsm6dso_gy_data_rate_set+0x1b0>
            else if (val == LSM6DSO_GY_ODR_52Hz)
 8005ec6:	78fb      	ldrb	r3, [r7, #3]
 8005ec8:	2b03      	cmp	r3, #3
 8005eca:	d102      	bne.n	8005ed2 <lsm6dso_gy_data_rate_set+0x1a2>
              odr_gy = LSM6DSO_GY_ODR_104Hz;
 8005ecc:	2304      	movs	r3, #4
 8005ece:	75fb      	strb	r3, [r7, #23]
            break;
 8005ed0:	e006      	b.n	8005ee0 <lsm6dso_gy_data_rate_set+0x1b0>
              odr_gy = val;
 8005ed2:	78fb      	ldrb	r3, [r7, #3]
 8005ed4:	75fb      	strb	r3, [r7, #23]
            break;
 8005ed6:	e003      	b.n	8005ee0 <lsm6dso_gy_data_rate_set+0x1b0>

          default:
            odr_gy = val;
 8005ed8:	78fb      	ldrb	r3, [r7, #3]
 8005eda:	75fb      	strb	r3, [r7, #23]
            break;
 8005edc:	e000      	b.n	8005ee0 <lsm6dso_gy_data_rate_set+0x1b0>
        }
      }
 8005ede:	bf00      	nop
    }
  }

  if (ret == 0)
 8005ee0:	693b      	ldr	r3, [r7, #16]
 8005ee2:	2b00      	cmp	r3, #0
 8005ee4:	d107      	bne.n	8005ef6 <lsm6dso_gy_data_rate_set+0x1c6>
  {
    ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL2_G, (uint8_t *)&reg, 1);
 8005ee6:	f107 0208 	add.w	r2, r7, #8
 8005eea:	2301      	movs	r3, #1
 8005eec:	2111      	movs	r1, #17
 8005eee:	6878      	ldr	r0, [r7, #4]
 8005ef0:	f7ff fcc4 	bl	800587c <lsm6dso_read_reg>
 8005ef4:	6138      	str	r0, [r7, #16]
  }

  if (ret == 0)
 8005ef6:	693b      	ldr	r3, [r7, #16]
 8005ef8:	2b00      	cmp	r3, #0
 8005efa:	d10f      	bne.n	8005f1c <lsm6dso_gy_data_rate_set+0x1ec>
  {
    reg.odr_g = (uint8_t) odr_gy;
 8005efc:	7dfb      	ldrb	r3, [r7, #23]
 8005efe:	f003 030f 	and.w	r3, r3, #15
 8005f02:	b2da      	uxtb	r2, r3
 8005f04:	7a3b      	ldrb	r3, [r7, #8]
 8005f06:	f362 1307 	bfi	r3, r2, #4, #4
 8005f0a:	723b      	strb	r3, [r7, #8]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL2_G, (uint8_t *)&reg, 1);
 8005f0c:	f107 0208 	add.w	r2, r7, #8
 8005f10:	2301      	movs	r3, #1
 8005f12:	2111      	movs	r1, #17
 8005f14:	6878      	ldr	r0, [r7, #4]
 8005f16:	f7ff fcc9 	bl	80058ac <lsm6dso_write_reg>
 8005f1a:	6138      	str	r0, [r7, #16]
  }

  return ret;
 8005f1c:	693b      	ldr	r3, [r7, #16]
}
 8005f1e:	4618      	mov	r0, r3
 8005f20:	3718      	adds	r7, #24
 8005f22:	46bd      	mov	sp, r7
 8005f24:	bd80      	pop	{r7, pc}
 8005f26:	bf00      	nop

08005f28 <lsm6dso_gy_data_rate_get>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_gy_data_rate_get(stmdev_ctx_t *ctx,
                                 lsm6dso_odr_g_t *val)
{
 8005f28:	b580      	push	{r7, lr}
 8005f2a:	b084      	sub	sp, #16
 8005f2c:	af00      	add	r7, sp, #0
 8005f2e:	6078      	str	r0, [r7, #4]
 8005f30:	6039      	str	r1, [r7, #0]
  lsm6dso_ctrl2_g_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL2_G, (uint8_t *)&reg, 1);
 8005f32:	f107 0208 	add.w	r2, r7, #8
 8005f36:	2301      	movs	r3, #1
 8005f38:	2111      	movs	r1, #17
 8005f3a:	6878      	ldr	r0, [r7, #4]
 8005f3c:	f7ff fc9e 	bl	800587c <lsm6dso_read_reg>
 8005f40:	60f8      	str	r0, [r7, #12]

  switch (reg.odr_g)
 8005f42:	7a3b      	ldrb	r3, [r7, #8]
 8005f44:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8005f48:	b2db      	uxtb	r3, r3
 8005f4a:	2b0a      	cmp	r3, #10
 8005f4c:	d844      	bhi.n	8005fd8 <lsm6dso_gy_data_rate_get+0xb0>
 8005f4e:	a201      	add	r2, pc, #4	; (adr r2, 8005f54 <lsm6dso_gy_data_rate_get+0x2c>)
 8005f50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f54:	08005f81 	.word	0x08005f81
 8005f58:	08005f89 	.word	0x08005f89
 8005f5c:	08005f91 	.word	0x08005f91
 8005f60:	08005f99 	.word	0x08005f99
 8005f64:	08005fa1 	.word	0x08005fa1
 8005f68:	08005fa9 	.word	0x08005fa9
 8005f6c:	08005fb1 	.word	0x08005fb1
 8005f70:	08005fb9 	.word	0x08005fb9
 8005f74:	08005fc1 	.word	0x08005fc1
 8005f78:	08005fc9 	.word	0x08005fc9
 8005f7c:	08005fd1 	.word	0x08005fd1
  {
    case LSM6DSO_GY_ODR_OFF:
      *val = LSM6DSO_GY_ODR_OFF;
 8005f80:	683b      	ldr	r3, [r7, #0]
 8005f82:	2200      	movs	r2, #0
 8005f84:	701a      	strb	r2, [r3, #0]
      break;
 8005f86:	e02b      	b.n	8005fe0 <lsm6dso_gy_data_rate_get+0xb8>

    case LSM6DSO_GY_ODR_12Hz5:
      *val = LSM6DSO_GY_ODR_12Hz5;
 8005f88:	683b      	ldr	r3, [r7, #0]
 8005f8a:	2201      	movs	r2, #1
 8005f8c:	701a      	strb	r2, [r3, #0]
      break;
 8005f8e:	e027      	b.n	8005fe0 <lsm6dso_gy_data_rate_get+0xb8>

    case LSM6DSO_GY_ODR_26Hz:
      *val = LSM6DSO_GY_ODR_26Hz;
 8005f90:	683b      	ldr	r3, [r7, #0]
 8005f92:	2202      	movs	r2, #2
 8005f94:	701a      	strb	r2, [r3, #0]
      break;
 8005f96:	e023      	b.n	8005fe0 <lsm6dso_gy_data_rate_get+0xb8>

    case LSM6DSO_GY_ODR_52Hz:
      *val = LSM6DSO_GY_ODR_52Hz;
 8005f98:	683b      	ldr	r3, [r7, #0]
 8005f9a:	2203      	movs	r2, #3
 8005f9c:	701a      	strb	r2, [r3, #0]
      break;
 8005f9e:	e01f      	b.n	8005fe0 <lsm6dso_gy_data_rate_get+0xb8>

    case LSM6DSO_GY_ODR_104Hz:
      *val = LSM6DSO_GY_ODR_104Hz;
 8005fa0:	683b      	ldr	r3, [r7, #0]
 8005fa2:	2204      	movs	r2, #4
 8005fa4:	701a      	strb	r2, [r3, #0]
      break;
 8005fa6:	e01b      	b.n	8005fe0 <lsm6dso_gy_data_rate_get+0xb8>

    case LSM6DSO_GY_ODR_208Hz:
      *val = LSM6DSO_GY_ODR_208Hz;
 8005fa8:	683b      	ldr	r3, [r7, #0]
 8005faa:	2205      	movs	r2, #5
 8005fac:	701a      	strb	r2, [r3, #0]
      break;
 8005fae:	e017      	b.n	8005fe0 <lsm6dso_gy_data_rate_get+0xb8>

    case LSM6DSO_GY_ODR_417Hz:
      *val = LSM6DSO_GY_ODR_417Hz;
 8005fb0:	683b      	ldr	r3, [r7, #0]
 8005fb2:	2206      	movs	r2, #6
 8005fb4:	701a      	strb	r2, [r3, #0]
      break;
 8005fb6:	e013      	b.n	8005fe0 <lsm6dso_gy_data_rate_get+0xb8>

    case LSM6DSO_GY_ODR_833Hz:
      *val = LSM6DSO_GY_ODR_833Hz;
 8005fb8:	683b      	ldr	r3, [r7, #0]
 8005fba:	2207      	movs	r2, #7
 8005fbc:	701a      	strb	r2, [r3, #0]
      break;
 8005fbe:	e00f      	b.n	8005fe0 <lsm6dso_gy_data_rate_get+0xb8>

    case LSM6DSO_GY_ODR_1667Hz:
      *val = LSM6DSO_GY_ODR_1667Hz;
 8005fc0:	683b      	ldr	r3, [r7, #0]
 8005fc2:	2208      	movs	r2, #8
 8005fc4:	701a      	strb	r2, [r3, #0]
      break;
 8005fc6:	e00b      	b.n	8005fe0 <lsm6dso_gy_data_rate_get+0xb8>

    case LSM6DSO_GY_ODR_3333Hz:
      *val = LSM6DSO_GY_ODR_3333Hz;
 8005fc8:	683b      	ldr	r3, [r7, #0]
 8005fca:	2209      	movs	r2, #9
 8005fcc:	701a      	strb	r2, [r3, #0]
      break;
 8005fce:	e007      	b.n	8005fe0 <lsm6dso_gy_data_rate_get+0xb8>

    case LSM6DSO_GY_ODR_6667Hz:
      *val = LSM6DSO_GY_ODR_6667Hz;
 8005fd0:	683b      	ldr	r3, [r7, #0]
 8005fd2:	220a      	movs	r2, #10
 8005fd4:	701a      	strb	r2, [r3, #0]
      break;
 8005fd6:	e003      	b.n	8005fe0 <lsm6dso_gy_data_rate_get+0xb8>

    default:
      *val = LSM6DSO_GY_ODR_OFF;
 8005fd8:	683b      	ldr	r3, [r7, #0]
 8005fda:	2200      	movs	r2, #0
 8005fdc:	701a      	strb	r2, [r3, #0]
      break;
 8005fde:	bf00      	nop
  }

  return ret;
 8005fe0:	68fb      	ldr	r3, [r7, #12]
}
 8005fe2:	4618      	mov	r0, r3
 8005fe4:	3710      	adds	r7, #16
 8005fe6:	46bd      	mov	sp, r7
 8005fe8:	bd80      	pop	{r7, pc}
 8005fea:	bf00      	nop

08005fec <lsm6dso_block_data_update_set>:
  * @param  val      change the values of bdu in reg CTRL3_C
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8005fec:	b580      	push	{r7, lr}
 8005fee:	b084      	sub	sp, #16
 8005ff0:	af00      	add	r7, sp, #0
 8005ff2:	6078      	str	r0, [r7, #4]
 8005ff4:	460b      	mov	r3, r1
 8005ff6:	70fb      	strb	r3, [r7, #3]
  lsm6dso_ctrl3_c_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL3_C, (uint8_t *)&reg, 1);
 8005ff8:	f107 0208 	add.w	r2, r7, #8
 8005ffc:	2301      	movs	r3, #1
 8005ffe:	2112      	movs	r1, #18
 8006000:	6878      	ldr	r0, [r7, #4]
 8006002:	f7ff fc3b 	bl	800587c <lsm6dso_read_reg>
 8006006:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	2b00      	cmp	r3, #0
 800600c:	d10f      	bne.n	800602e <lsm6dso_block_data_update_set+0x42>
  {
    reg.bdu = val;
 800600e:	78fb      	ldrb	r3, [r7, #3]
 8006010:	f003 0301 	and.w	r3, r3, #1
 8006014:	b2da      	uxtb	r2, r3
 8006016:	7a3b      	ldrb	r3, [r7, #8]
 8006018:	f362 1386 	bfi	r3, r2, #6, #1
 800601c:	723b      	strb	r3, [r7, #8]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL3_C, (uint8_t *)&reg, 1);
 800601e:	f107 0208 	add.w	r2, r7, #8
 8006022:	2301      	movs	r3, #1
 8006024:	2112      	movs	r1, #18
 8006026:	6878      	ldr	r0, [r7, #4]
 8006028:	f7ff fc40 	bl	80058ac <lsm6dso_write_reg>
 800602c:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 800602e:	68fb      	ldr	r3, [r7, #12]
}
 8006030:	4618      	mov	r0, r3
 8006032:	3710      	adds	r7, #16
 8006034:	46bd      	mov	sp, r7
 8006036:	bd80      	pop	{r7, pc}

08006038 <lsm6dso_angular_rate_raw_get>:
  * @param  buff     buffer that stores data read
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_angular_rate_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 8006038:	b580      	push	{r7, lr}
 800603a:	b086      	sub	sp, #24
 800603c:	af00      	add	r7, sp, #0
 800603e:	6078      	str	r0, [r7, #4]
 8006040:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_OUTX_L_G, buff, 6);
 8006042:	f107 020c 	add.w	r2, r7, #12
 8006046:	2306      	movs	r3, #6
 8006048:	2122      	movs	r1, #34	; 0x22
 800604a:	6878      	ldr	r0, [r7, #4]
 800604c:	f7ff fc16 	bl	800587c <lsm6dso_read_reg>
 8006050:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 8006052:	7b7b      	ldrb	r3, [r7, #13]
 8006054:	b21a      	sxth	r2, r3
 8006056:	683b      	ldr	r3, [r7, #0]
 8006058:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 800605a:	683b      	ldr	r3, [r7, #0]
 800605c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006060:	b29b      	uxth	r3, r3
 8006062:	021b      	lsls	r3, r3, #8
 8006064:	b29a      	uxth	r2, r3
 8006066:	7b3b      	ldrb	r3, [r7, #12]
 8006068:	b29b      	uxth	r3, r3
 800606a:	4413      	add	r3, r2
 800606c:	b29b      	uxth	r3, r3
 800606e:	b21a      	sxth	r2, r3
 8006070:	683b      	ldr	r3, [r7, #0]
 8006072:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 8006074:	7bfa      	ldrb	r2, [r7, #15]
 8006076:	683b      	ldr	r3, [r7, #0]
 8006078:	3302      	adds	r3, #2
 800607a:	b212      	sxth	r2, r2
 800607c:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 800607e:	683b      	ldr	r3, [r7, #0]
 8006080:	3302      	adds	r3, #2
 8006082:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006086:	b29b      	uxth	r3, r3
 8006088:	021b      	lsls	r3, r3, #8
 800608a:	b29a      	uxth	r2, r3
 800608c:	7bbb      	ldrb	r3, [r7, #14]
 800608e:	b29b      	uxth	r3, r3
 8006090:	4413      	add	r3, r2
 8006092:	b29a      	uxth	r2, r3
 8006094:	683b      	ldr	r3, [r7, #0]
 8006096:	3302      	adds	r3, #2
 8006098:	b212      	sxth	r2, r2
 800609a:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 800609c:	7c7a      	ldrb	r2, [r7, #17]
 800609e:	683b      	ldr	r3, [r7, #0]
 80060a0:	3304      	adds	r3, #4
 80060a2:	b212      	sxth	r2, r2
 80060a4:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 80060a6:	683b      	ldr	r3, [r7, #0]
 80060a8:	3304      	adds	r3, #4
 80060aa:	f9b3 3000 	ldrsh.w	r3, [r3]
 80060ae:	b29b      	uxth	r3, r3
 80060b0:	021b      	lsls	r3, r3, #8
 80060b2:	b29a      	uxth	r2, r3
 80060b4:	7c3b      	ldrb	r3, [r7, #16]
 80060b6:	b29b      	uxth	r3, r3
 80060b8:	4413      	add	r3, r2
 80060ba:	b29a      	uxth	r2, r3
 80060bc:	683b      	ldr	r3, [r7, #0]
 80060be:	3304      	adds	r3, #4
 80060c0:	b212      	sxth	r2, r2
 80060c2:	801a      	strh	r2, [r3, #0]

  return ret;
 80060c4:	697b      	ldr	r3, [r7, #20]
}
 80060c6:	4618      	mov	r0, r3
 80060c8:	3718      	adds	r7, #24
 80060ca:	46bd      	mov	sp, r7
 80060cc:	bd80      	pop	{r7, pc}

080060ce <lsm6dso_acceleration_raw_get>:
  * @param  buff     buffer that stores data read
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_acceleration_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 80060ce:	b580      	push	{r7, lr}
 80060d0:	b086      	sub	sp, #24
 80060d2:	af00      	add	r7, sp, #0
 80060d4:	6078      	str	r0, [r7, #4]
 80060d6:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_OUTX_L_A, buff, 6);
 80060d8:	f107 020c 	add.w	r2, r7, #12
 80060dc:	2306      	movs	r3, #6
 80060de:	2128      	movs	r1, #40	; 0x28
 80060e0:	6878      	ldr	r0, [r7, #4]
 80060e2:	f7ff fbcb 	bl	800587c <lsm6dso_read_reg>
 80060e6:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 80060e8:	7b7b      	ldrb	r3, [r7, #13]
 80060ea:	b21a      	sxth	r2, r3
 80060ec:	683b      	ldr	r3, [r7, #0]
 80060ee:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 80060f0:	683b      	ldr	r3, [r7, #0]
 80060f2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80060f6:	b29b      	uxth	r3, r3
 80060f8:	021b      	lsls	r3, r3, #8
 80060fa:	b29a      	uxth	r2, r3
 80060fc:	7b3b      	ldrb	r3, [r7, #12]
 80060fe:	b29b      	uxth	r3, r3
 8006100:	4413      	add	r3, r2
 8006102:	b29b      	uxth	r3, r3
 8006104:	b21a      	sxth	r2, r3
 8006106:	683b      	ldr	r3, [r7, #0]
 8006108:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 800610a:	7bfa      	ldrb	r2, [r7, #15]
 800610c:	683b      	ldr	r3, [r7, #0]
 800610e:	3302      	adds	r3, #2
 8006110:	b212      	sxth	r2, r2
 8006112:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 8006114:	683b      	ldr	r3, [r7, #0]
 8006116:	3302      	adds	r3, #2
 8006118:	f9b3 3000 	ldrsh.w	r3, [r3]
 800611c:	b29b      	uxth	r3, r3
 800611e:	021b      	lsls	r3, r3, #8
 8006120:	b29a      	uxth	r2, r3
 8006122:	7bbb      	ldrb	r3, [r7, #14]
 8006124:	b29b      	uxth	r3, r3
 8006126:	4413      	add	r3, r2
 8006128:	b29a      	uxth	r2, r3
 800612a:	683b      	ldr	r3, [r7, #0]
 800612c:	3302      	adds	r3, #2
 800612e:	b212      	sxth	r2, r2
 8006130:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 8006132:	7c7a      	ldrb	r2, [r7, #17]
 8006134:	683b      	ldr	r3, [r7, #0]
 8006136:	3304      	adds	r3, #4
 8006138:	b212      	sxth	r2, r2
 800613a:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 800613c:	683b      	ldr	r3, [r7, #0]
 800613e:	3304      	adds	r3, #4
 8006140:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006144:	b29b      	uxth	r3, r3
 8006146:	021b      	lsls	r3, r3, #8
 8006148:	b29a      	uxth	r2, r3
 800614a:	7c3b      	ldrb	r3, [r7, #16]
 800614c:	b29b      	uxth	r3, r3
 800614e:	4413      	add	r3, r2
 8006150:	b29a      	uxth	r2, r3
 8006152:	683b      	ldr	r3, [r7, #0]
 8006154:	3304      	adds	r3, #4
 8006156:	b212      	sxth	r2, r2
 8006158:	801a      	strh	r2, [r3, #0]

  return ret;
 800615a:	697b      	ldr	r3, [r7, #20]
}
 800615c:	4618      	mov	r0, r3
 800615e:	3718      	adds	r7, #24
 8006160:	46bd      	mov	sp, r7
 8006162:	bd80      	pop	{r7, pc}

08006164 <lsm6dso_mem_bank_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_mem_bank_set(stmdev_ctx_t *ctx,
                             lsm6dso_reg_access_t val)
{
 8006164:	b580      	push	{r7, lr}
 8006166:	b084      	sub	sp, #16
 8006168:	af00      	add	r7, sp, #0
 800616a:	6078      	str	r0, [r7, #4]
 800616c:	460b      	mov	r3, r1
 800616e:	70fb      	strb	r3, [r7, #3]
  lsm6dso_func_cfg_access_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_FUNC_CFG_ACCESS, (uint8_t *)&reg, 1);
 8006170:	f107 0208 	add.w	r2, r7, #8
 8006174:	2301      	movs	r3, #1
 8006176:	2101      	movs	r1, #1
 8006178:	6878      	ldr	r0, [r7, #4]
 800617a:	f7ff fb7f 	bl	800587c <lsm6dso_read_reg>
 800617e:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8006180:	68fb      	ldr	r3, [r7, #12]
 8006182:	2b00      	cmp	r3, #0
 8006184:	d10f      	bne.n	80061a6 <lsm6dso_mem_bank_set+0x42>
  {
    reg.reg_access = (uint8_t)val;
 8006186:	78fb      	ldrb	r3, [r7, #3]
 8006188:	f003 0303 	and.w	r3, r3, #3
 800618c:	b2da      	uxtb	r2, r3
 800618e:	7a3b      	ldrb	r3, [r7, #8]
 8006190:	f362 1387 	bfi	r3, r2, #6, #2
 8006194:	723b      	strb	r3, [r7, #8]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_FUNC_CFG_ACCESS, (uint8_t *)&reg, 1);
 8006196:	f107 0208 	add.w	r2, r7, #8
 800619a:	2301      	movs	r3, #1
 800619c:	2101      	movs	r1, #1
 800619e:	6878      	ldr	r0, [r7, #4]
 80061a0:	f7ff fb84 	bl	80058ac <lsm6dso_write_reg>
 80061a4:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80061a6:	68fb      	ldr	r3, [r7, #12]
}
 80061a8:	4618      	mov	r0, r3
 80061aa:	3710      	adds	r7, #16
 80061ac:	46bd      	mov	sp, r7
 80061ae:	bd80      	pop	{r7, pc}

080061b0 <lsm6dso_device_id_get>:
  * @param  buff     buffer that stores data read
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 80061b0:	b580      	push	{r7, lr}
 80061b2:	b084      	sub	sp, #16
 80061b4:	af00      	add	r7, sp, #0
 80061b6:	6078      	str	r0, [r7, #4]
 80061b8:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_WHO_AM_I, buff, 1);
 80061ba:	2301      	movs	r3, #1
 80061bc:	683a      	ldr	r2, [r7, #0]
 80061be:	210f      	movs	r1, #15
 80061c0:	6878      	ldr	r0, [r7, #4]
 80061c2:	f7ff fb5b 	bl	800587c <lsm6dso_read_reg>
 80061c6:	60f8      	str	r0, [r7, #12]

  return ret;
 80061c8:	68fb      	ldr	r3, [r7, #12]
}
 80061ca:	4618      	mov	r0, r3
 80061cc:	3710      	adds	r7, #16
 80061ce:	46bd      	mov	sp, r7
 80061d0:	bd80      	pop	{r7, pc}

080061d2 <lsm6dso_auto_increment_set>:
  * @param  val      change the values of if_inc in reg CTRL3_C
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_auto_increment_set(stmdev_ctx_t *ctx, uint8_t val)
{
 80061d2:	b580      	push	{r7, lr}
 80061d4:	b084      	sub	sp, #16
 80061d6:	af00      	add	r7, sp, #0
 80061d8:	6078      	str	r0, [r7, #4]
 80061da:	460b      	mov	r3, r1
 80061dc:	70fb      	strb	r3, [r7, #3]
  lsm6dso_ctrl3_c_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL3_C, (uint8_t *)&reg, 1);
 80061de:	f107 0208 	add.w	r2, r7, #8
 80061e2:	2301      	movs	r3, #1
 80061e4:	2112      	movs	r1, #18
 80061e6:	6878      	ldr	r0, [r7, #4]
 80061e8:	f7ff fb48 	bl	800587c <lsm6dso_read_reg>
 80061ec:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 80061ee:	68fb      	ldr	r3, [r7, #12]
 80061f0:	2b00      	cmp	r3, #0
 80061f2:	d10f      	bne.n	8006214 <lsm6dso_auto_increment_set+0x42>
  {
    reg.if_inc = val;
 80061f4:	78fb      	ldrb	r3, [r7, #3]
 80061f6:	f003 0301 	and.w	r3, r3, #1
 80061fa:	b2da      	uxtb	r2, r3
 80061fc:	7a3b      	ldrb	r3, [r7, #8]
 80061fe:	f362 0382 	bfi	r3, r2, #2, #1
 8006202:	723b      	strb	r3, [r7, #8]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL3_C, (uint8_t *)&reg, 1);
 8006204:	f107 0208 	add.w	r2, r7, #8
 8006208:	2301      	movs	r3, #1
 800620a:	2112      	movs	r1, #18
 800620c:	6878      	ldr	r0, [r7, #4]
 800620e:	f7ff fb4d 	bl	80058ac <lsm6dso_write_reg>
 8006212:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8006214:	68fb      	ldr	r3, [r7, #12]
}
 8006216:	4618      	mov	r0, r3
 8006218:	3710      	adds	r7, #16
 800621a:	46bd      	mov	sp, r7
 800621c:	bd80      	pop	{r7, pc}

0800621e <lsm6dso_i3c_disable_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_i3c_disable_set(stmdev_ctx_t *ctx,
                                lsm6dso_i3c_disable_t val)
{
 800621e:	b580      	push	{r7, lr}
 8006220:	b086      	sub	sp, #24
 8006222:	af00      	add	r7, sp, #0
 8006224:	6078      	str	r0, [r7, #4]
 8006226:	460b      	mov	r3, r1
 8006228:	70fb      	strb	r3, [r7, #3]
  lsm6dso_i3c_bus_avb_t i3c_bus_avb;
  lsm6dso_ctrl9_xl_t ctrl9_xl;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL9_XL, (uint8_t *)&ctrl9_xl, 1);
 800622a:	f107 020c 	add.w	r2, r7, #12
 800622e:	2301      	movs	r3, #1
 8006230:	2118      	movs	r1, #24
 8006232:	6878      	ldr	r0, [r7, #4]
 8006234:	f7ff fb22 	bl	800587c <lsm6dso_read_reg>
 8006238:	6178      	str	r0, [r7, #20]

  if (ret == 0)
 800623a:	697b      	ldr	r3, [r7, #20]
 800623c:	2b00      	cmp	r3, #0
 800623e:	d111      	bne.n	8006264 <lsm6dso_i3c_disable_set+0x46>
  {
    ctrl9_xl.i3c_disable = ((uint8_t)val & 0x80U) >> 7;
 8006240:	78fb      	ldrb	r3, [r7, #3]
 8006242:	09db      	lsrs	r3, r3, #7
 8006244:	b2db      	uxtb	r3, r3
 8006246:	f003 0301 	and.w	r3, r3, #1
 800624a:	b2da      	uxtb	r2, r3
 800624c:	7b3b      	ldrb	r3, [r7, #12]
 800624e:	f362 0341 	bfi	r3, r2, #1, #1
 8006252:	733b      	strb	r3, [r7, #12]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL9_XL, (uint8_t *)&ctrl9_xl, 1);
 8006254:	f107 020c 	add.w	r2, r7, #12
 8006258:	2301      	movs	r3, #1
 800625a:	2118      	movs	r1, #24
 800625c:	6878      	ldr	r0, [r7, #4]
 800625e:	f7ff fb25 	bl	80058ac <lsm6dso_write_reg>
 8006262:	6178      	str	r0, [r7, #20]
  }

  if (ret == 0)
 8006264:	697b      	ldr	r3, [r7, #20]
 8006266:	2b00      	cmp	r3, #0
 8006268:	d107      	bne.n	800627a <lsm6dso_i3c_disable_set+0x5c>
  {
    ret = lsm6dso_read_reg(ctx, LSM6DSO_I3C_BUS_AVB,
 800626a:	f107 0210 	add.w	r2, r7, #16
 800626e:	2301      	movs	r3, #1
 8006270:	2162      	movs	r1, #98	; 0x62
 8006272:	6878      	ldr	r0, [r7, #4]
 8006274:	f7ff fb02 	bl	800587c <lsm6dso_read_reg>
 8006278:	6178      	str	r0, [r7, #20]
                           (uint8_t *)&i3c_bus_avb, 1);
  }

  if (ret == 0)
 800627a:	697b      	ldr	r3, [r7, #20]
 800627c:	2b00      	cmp	r3, #0
 800627e:	d10f      	bne.n	80062a0 <lsm6dso_i3c_disable_set+0x82>
  {
    i3c_bus_avb.i3c_bus_avb_sel = (uint8_t)val & 0x03U;
 8006280:	78fb      	ldrb	r3, [r7, #3]
 8006282:	f003 0303 	and.w	r3, r3, #3
 8006286:	b2da      	uxtb	r2, r3
 8006288:	7c3b      	ldrb	r3, [r7, #16]
 800628a:	f362 03c4 	bfi	r3, r2, #3, #2
 800628e:	743b      	strb	r3, [r7, #16]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_I3C_BUS_AVB,
 8006290:	f107 0210 	add.w	r2, r7, #16
 8006294:	2301      	movs	r3, #1
 8006296:	2162      	movs	r1, #98	; 0x62
 8006298:	6878      	ldr	r0, [r7, #4]
 800629a:	f7ff fb07 	bl	80058ac <lsm6dso_write_reg>
 800629e:	6178      	str	r0, [r7, #20]
                            (uint8_t *)&i3c_bus_avb, 1);
  }

  return ret;
 80062a0:	697b      	ldr	r3, [r7, #20]
}
 80062a2:	4618      	mov	r0, r3
 80062a4:	3718      	adds	r7, #24
 80062a6:	46bd      	mov	sp, r7
 80062a8:	bd80      	pop	{r7, pc}

080062aa <lsm6dso_fifo_mode_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_fifo_mode_set(stmdev_ctx_t *ctx,
                              lsm6dso_fifo_mode_t val)
{
 80062aa:	b580      	push	{r7, lr}
 80062ac:	b084      	sub	sp, #16
 80062ae:	af00      	add	r7, sp, #0
 80062b0:	6078      	str	r0, [r7, #4]
 80062b2:	460b      	mov	r3, r1
 80062b4:	70fb      	strb	r3, [r7, #3]
  lsm6dso_fifo_ctrl4_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_FIFO_CTRL4, (uint8_t *)&reg, 1);
 80062b6:	f107 0208 	add.w	r2, r7, #8
 80062ba:	2301      	movs	r3, #1
 80062bc:	210a      	movs	r1, #10
 80062be:	6878      	ldr	r0, [r7, #4]
 80062c0:	f7ff fadc 	bl	800587c <lsm6dso_read_reg>
 80062c4:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 80062c6:	68fb      	ldr	r3, [r7, #12]
 80062c8:	2b00      	cmp	r3, #0
 80062ca:	d10f      	bne.n	80062ec <lsm6dso_fifo_mode_set+0x42>
  {
    reg.fifo_mode = (uint8_t)val;
 80062cc:	78fb      	ldrb	r3, [r7, #3]
 80062ce:	f003 0307 	and.w	r3, r3, #7
 80062d2:	b2da      	uxtb	r2, r3
 80062d4:	7a3b      	ldrb	r3, [r7, #8]
 80062d6:	f362 0302 	bfi	r3, r2, #0, #3
 80062da:	723b      	strb	r3, [r7, #8]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_FIFO_CTRL4, (uint8_t *)&reg, 1);
 80062dc:	f107 0208 	add.w	r2, r7, #8
 80062e0:	2301      	movs	r3, #1
 80062e2:	210a      	movs	r1, #10
 80062e4:	6878      	ldr	r0, [r7, #4]
 80062e6:	f7ff fae1 	bl	80058ac <lsm6dso_write_reg>
 80062ea:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80062ec:	68fb      	ldr	r3, [r7, #12]
}
 80062ee:	4618      	mov	r0, r3
 80062f0:	3710      	adds	r7, #16
 80062f2:	46bd      	mov	sp, r7
 80062f4:	bd80      	pop	{r7, pc}

080062f6 <lsm6dso_fsm_enable_get>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_fsm_enable_get(stmdev_ctx_t *ctx,
                               lsm6dso_emb_fsm_enable_t *val)
{
 80062f6:	b580      	push	{r7, lr}
 80062f8:	b084      	sub	sp, #16
 80062fa:	af00      	add	r7, sp, #0
 80062fc:	6078      	str	r0, [r7, #4]
 80062fe:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = lsm6dso_mem_bank_set(ctx, LSM6DSO_EMBEDDED_FUNC_BANK);
 8006300:	2102      	movs	r1, #2
 8006302:	6878      	ldr	r0, [r7, #4]
 8006304:	f7ff ff2e 	bl	8006164 <lsm6dso_mem_bank_set>
 8006308:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 800630a:	68fb      	ldr	r3, [r7, #12]
 800630c:	2b00      	cmp	r3, #0
 800630e:	d106      	bne.n	800631e <lsm6dso_fsm_enable_get+0x28>
  {
    ret = lsm6dso_read_reg(ctx, LSM6DSO_FSM_ENABLE_A, (uint8_t *) val, 2);
 8006310:	2302      	movs	r3, #2
 8006312:	683a      	ldr	r2, [r7, #0]
 8006314:	2146      	movs	r1, #70	; 0x46
 8006316:	6878      	ldr	r0, [r7, #4]
 8006318:	f7ff fab0 	bl	800587c <lsm6dso_read_reg>
 800631c:	60f8      	str	r0, [r7, #12]
  }

  if (ret == 0)
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	2b00      	cmp	r3, #0
 8006322:	d104      	bne.n	800632e <lsm6dso_fsm_enable_get+0x38>
  {
    ret = lsm6dso_mem_bank_set(ctx, LSM6DSO_USER_BANK);
 8006324:	2100      	movs	r1, #0
 8006326:	6878      	ldr	r0, [r7, #4]
 8006328:	f7ff ff1c 	bl	8006164 <lsm6dso_mem_bank_set>
 800632c:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 800632e:	68fb      	ldr	r3, [r7, #12]
}
 8006330:	4618      	mov	r0, r3
 8006332:	3710      	adds	r7, #16
 8006334:	46bd      	mov	sp, r7
 8006336:	bd80      	pop	{r7, pc}

08006338 <lsm6dso_fsm_data_rate_get>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_fsm_data_rate_get(stmdev_ctx_t *ctx,
                                  lsm6dso_fsm_odr_t *val)
{
 8006338:	b580      	push	{r7, lr}
 800633a:	b084      	sub	sp, #16
 800633c:	af00      	add	r7, sp, #0
 800633e:	6078      	str	r0, [r7, #4]
 8006340:	6039      	str	r1, [r7, #0]
  lsm6dso_emb_func_odr_cfg_b_t reg;
  int32_t ret;

  ret = lsm6dso_mem_bank_set(ctx, LSM6DSO_EMBEDDED_FUNC_BANK);
 8006342:	2102      	movs	r1, #2
 8006344:	6878      	ldr	r0, [r7, #4]
 8006346:	f7ff ff0d 	bl	8006164 <lsm6dso_mem_bank_set>
 800634a:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 800634c:	68fb      	ldr	r3, [r7, #12]
 800634e:	2b00      	cmp	r3, #0
 8006350:	d107      	bne.n	8006362 <lsm6dso_fsm_data_rate_get+0x2a>
  {
    ret = lsm6dso_read_reg(ctx, LSM6DSO_EMB_FUNC_ODR_CFG_B,
 8006352:	f107 0208 	add.w	r2, r7, #8
 8006356:	2301      	movs	r3, #1
 8006358:	215f      	movs	r1, #95	; 0x5f
 800635a:	6878      	ldr	r0, [r7, #4]
 800635c:	f7ff fa8e 	bl	800587c <lsm6dso_read_reg>
 8006360:	60f8      	str	r0, [r7, #12]
                           (uint8_t *)&reg, 1);
  }

  if (ret == 0)
 8006362:	68fb      	ldr	r3, [r7, #12]
 8006364:	2b00      	cmp	r3, #0
 8006366:	d12a      	bne.n	80063be <lsm6dso_fsm_data_rate_get+0x86>
  {
    switch (reg.fsm_odr)
 8006368:	7a3b      	ldrb	r3, [r7, #8]
 800636a:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 800636e:	b2db      	uxtb	r3, r3
 8006370:	2b03      	cmp	r3, #3
 8006372:	d81b      	bhi.n	80063ac <lsm6dso_fsm_data_rate_get+0x74>
 8006374:	a201      	add	r2, pc, #4	; (adr r2, 800637c <lsm6dso_fsm_data_rate_get+0x44>)
 8006376:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800637a:	bf00      	nop
 800637c:	0800638d 	.word	0x0800638d
 8006380:	08006395 	.word	0x08006395
 8006384:	0800639d 	.word	0x0800639d
 8006388:	080063a5 	.word	0x080063a5
    {
      case LSM6DSO_ODR_FSM_12Hz5:
        *val = LSM6DSO_ODR_FSM_12Hz5;
 800638c:	683b      	ldr	r3, [r7, #0]
 800638e:	2200      	movs	r2, #0
 8006390:	701a      	strb	r2, [r3, #0]
        break;
 8006392:	e00f      	b.n	80063b4 <lsm6dso_fsm_data_rate_get+0x7c>

      case LSM6DSO_ODR_FSM_26Hz:
        *val = LSM6DSO_ODR_FSM_26Hz;
 8006394:	683b      	ldr	r3, [r7, #0]
 8006396:	2201      	movs	r2, #1
 8006398:	701a      	strb	r2, [r3, #0]
        break;
 800639a:	e00b      	b.n	80063b4 <lsm6dso_fsm_data_rate_get+0x7c>

      case LSM6DSO_ODR_FSM_52Hz:
        *val = LSM6DSO_ODR_FSM_52Hz;
 800639c:	683b      	ldr	r3, [r7, #0]
 800639e:	2202      	movs	r2, #2
 80063a0:	701a      	strb	r2, [r3, #0]
        break;
 80063a2:	e007      	b.n	80063b4 <lsm6dso_fsm_data_rate_get+0x7c>

      case LSM6DSO_ODR_FSM_104Hz:
        *val = LSM6DSO_ODR_FSM_104Hz;
 80063a4:	683b      	ldr	r3, [r7, #0]
 80063a6:	2203      	movs	r2, #3
 80063a8:	701a      	strb	r2, [r3, #0]
        break;
 80063aa:	e003      	b.n	80063b4 <lsm6dso_fsm_data_rate_get+0x7c>

      default:
        *val = LSM6DSO_ODR_FSM_12Hz5;
 80063ac:	683b      	ldr	r3, [r7, #0]
 80063ae:	2200      	movs	r2, #0
 80063b0:	701a      	strb	r2, [r3, #0]
        break;
 80063b2:	bf00      	nop
    }

    ret = lsm6dso_mem_bank_set(ctx, LSM6DSO_USER_BANK);
 80063b4:	2100      	movs	r1, #0
 80063b6:	6878      	ldr	r0, [r7, #4]
 80063b8:	f7ff fed4 	bl	8006164 <lsm6dso_mem_bank_set>
 80063bc:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80063be:	68fb      	ldr	r3, [r7, #12]
}
 80063c0:	4618      	mov	r0, r3
 80063c2:	3710      	adds	r7, #16
 80063c4:	46bd      	mov	sp, r7
 80063c6:	bd80      	pop	{r7, pc}

080063c8 <IKS01A3_MOTION_SENSOR_Init>:
  *         - MOTION_ACCELERO for instance 1
  *         - MOTION_MAGNETO for instance 2
  * @retval BSP status
  */
int32_t IKS01A3_MOTION_SENSOR_Init(uint32_t Instance, uint32_t Functions)
{
 80063c8:	b580      	push	{r7, lr}
 80063ca:	b08e      	sub	sp, #56	; 0x38
 80063cc:	af00      	add	r7, sp, #0
 80063ce:	6078      	str	r0, [r7, #4]
 80063d0:	6039      	str	r1, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
 80063d2:	2300      	movs	r3, #0
 80063d4:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t function = MOTION_GYRO;
 80063d6:	2301      	movs	r3, #1
 80063d8:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t i;
  uint32_t component_functions = 0;
 80063da:	2300      	movs	r3, #0
 80063dc:	62bb      	str	r3, [r7, #40]	; 0x28
  IKS01A3_MOTION_SENSOR_Capabilities_t cap;

  switch (Instance)
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	2b02      	cmp	r3, #2
 80063e2:	d06e      	beq.n	80064c2 <IKS01A3_MOTION_SENSOR_Init+0xfa>
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	2b02      	cmp	r3, #2
 80063e8:	f200 809d 	bhi.w	8006526 <IKS01A3_MOTION_SENSOR_Init+0x15e>
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	2b00      	cmp	r3, #0
 80063f0:	d003      	beq.n	80063fa <IKS01A3_MOTION_SENSOR_Init+0x32>
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	2b01      	cmp	r3, #1
 80063f6:	d032      	beq.n	800645e <IKS01A3_MOTION_SENSOR_Init+0x96>
 80063f8:	e095      	b.n	8006526 <IKS01A3_MOTION_SENSOR_Init+0x15e>
  {
#if (USE_IKS01A3_MOTION_SENSOR_LSM6DSO_0 == 1)
    case IKS01A3_LSM6DSO_0:
      if (LSM6DSO_0_Probe(Functions) != BSP_ERROR_NONE)
 80063fa:	6838      	ldr	r0, [r7, #0]
 80063fc:	f000 fa5a 	bl	80068b4 <LSM6DSO_0_Probe>
 8006400:	4603      	mov	r3, r0
 8006402:	2b00      	cmp	r3, #0
 8006404:	d002      	beq.n	800640c <IKS01A3_MOTION_SENSOR_Init+0x44>
      {
        return BSP_ERROR_NO_INIT;
 8006406:	f04f 33ff 	mov.w	r3, #4294967295
 800640a:	e0cc      	b.n	80065a6 <IKS01A3_MOTION_SENSOR_Init+0x1de>
      }
      if (MotionDrv[Instance]->GetCapabilities(MotionCompObj[Instance], (void *)&cap) != BSP_ERROR_NONE)
 800640c:	4a68      	ldr	r2, [pc, #416]	; (80065b0 <IKS01A3_MOTION_SENSOR_Init+0x1e8>)
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006414:	68db      	ldr	r3, [r3, #12]
 8006416:	4967      	ldr	r1, [pc, #412]	; (80065b4 <IKS01A3_MOTION_SENSOR_Init+0x1ec>)
 8006418:	687a      	ldr	r2, [r7, #4]
 800641a:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800641e:	f107 010c 	add.w	r1, r7, #12
 8006422:	4610      	mov	r0, r2
 8006424:	4798      	blx	r3
 8006426:	4603      	mov	r3, r0
 8006428:	2b00      	cmp	r3, #0
 800642a:	d002      	beq.n	8006432 <IKS01A3_MOTION_SENSOR_Init+0x6a>
      {
        return BSP_ERROR_UNKNOWN_COMPONENT;
 800642c:	f06f 0306 	mvn.w	r3, #6
 8006430:	e0b9      	b.n	80065a6 <IKS01A3_MOTION_SENSOR_Init+0x1de>
      }
      if (cap.Acc == 1U)
 8006432:	7b3b      	ldrb	r3, [r7, #12]
 8006434:	2b01      	cmp	r3, #1
 8006436:	d103      	bne.n	8006440 <IKS01A3_MOTION_SENSOR_Init+0x78>
      {
        component_functions |= MOTION_ACCELERO;
 8006438:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800643a:	f043 0302 	orr.w	r3, r3, #2
 800643e:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      if (cap.Gyro == 1U)
 8006440:	7b7b      	ldrb	r3, [r7, #13]
 8006442:	2b01      	cmp	r3, #1
 8006444:	d103      	bne.n	800644e <IKS01A3_MOTION_SENSOR_Init+0x86>
      {
        component_functions |= MOTION_GYRO;
 8006446:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006448:	f043 0301 	orr.w	r3, r3, #1
 800644c:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      if (cap.Magneto == 1U)
 800644e:	7bbb      	ldrb	r3, [r7, #14]
 8006450:	2b01      	cmp	r3, #1
 8006452:	d16c      	bne.n	800652e <IKS01A3_MOTION_SENSOR_Init+0x166>
      {
        component_functions |= MOTION_MAGNETO;
 8006454:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006456:	f043 0304 	orr.w	r3, r3, #4
 800645a:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      break;
 800645c:	e067      	b.n	800652e <IKS01A3_MOTION_SENSOR_Init+0x166>
#endif

#if (USE_IKS01A3_MOTION_SENSOR_LIS2DW12_0 == 1)
    case IKS01A3_LIS2DW12_0:
      if (LIS2DW12_0_Probe(Functions) != BSP_ERROR_NONE)
 800645e:	6838      	ldr	r0, [r7, #0]
 8006460:	f000 fae8 	bl	8006a34 <LIS2DW12_0_Probe>
 8006464:	4603      	mov	r3, r0
 8006466:	2b00      	cmp	r3, #0
 8006468:	d002      	beq.n	8006470 <IKS01A3_MOTION_SENSOR_Init+0xa8>
      {
        return BSP_ERROR_NO_INIT;
 800646a:	f04f 33ff 	mov.w	r3, #4294967295
 800646e:	e09a      	b.n	80065a6 <IKS01A3_MOTION_SENSOR_Init+0x1de>
      }
      if (MotionDrv[Instance]->GetCapabilities(MotionCompObj[Instance], (void *)&cap) != BSP_ERROR_NONE)
 8006470:	4a4f      	ldr	r2, [pc, #316]	; (80065b0 <IKS01A3_MOTION_SENSOR_Init+0x1e8>)
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006478:	68db      	ldr	r3, [r3, #12]
 800647a:	494e      	ldr	r1, [pc, #312]	; (80065b4 <IKS01A3_MOTION_SENSOR_Init+0x1ec>)
 800647c:	687a      	ldr	r2, [r7, #4]
 800647e:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8006482:	f107 010c 	add.w	r1, r7, #12
 8006486:	4610      	mov	r0, r2
 8006488:	4798      	blx	r3
 800648a:	4603      	mov	r3, r0
 800648c:	2b00      	cmp	r3, #0
 800648e:	d002      	beq.n	8006496 <IKS01A3_MOTION_SENSOR_Init+0xce>
      {
        return BSP_ERROR_UNKNOWN_COMPONENT;
 8006490:	f06f 0306 	mvn.w	r3, #6
 8006494:	e087      	b.n	80065a6 <IKS01A3_MOTION_SENSOR_Init+0x1de>
      }
      if (cap.Acc == 1U)
 8006496:	7b3b      	ldrb	r3, [r7, #12]
 8006498:	2b01      	cmp	r3, #1
 800649a:	d103      	bne.n	80064a4 <IKS01A3_MOTION_SENSOR_Init+0xdc>
      {
        component_functions |= MOTION_ACCELERO;
 800649c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800649e:	f043 0302 	orr.w	r3, r3, #2
 80064a2:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      if (cap.Gyro == 1U)
 80064a4:	7b7b      	ldrb	r3, [r7, #13]
 80064a6:	2b01      	cmp	r3, #1
 80064a8:	d103      	bne.n	80064b2 <IKS01A3_MOTION_SENSOR_Init+0xea>
      {
        component_functions |= MOTION_GYRO;
 80064aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064ac:	f043 0301 	orr.w	r3, r3, #1
 80064b0:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      if (cap.Magneto == 1U)
 80064b2:	7bbb      	ldrb	r3, [r7, #14]
 80064b4:	2b01      	cmp	r3, #1
 80064b6:	d13c      	bne.n	8006532 <IKS01A3_MOTION_SENSOR_Init+0x16a>
      {
        component_functions |= MOTION_MAGNETO;
 80064b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064ba:	f043 0304 	orr.w	r3, r3, #4
 80064be:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      break;
 80064c0:	e037      	b.n	8006532 <IKS01A3_MOTION_SENSOR_Init+0x16a>
#endif

#if (USE_IKS01A3_MOTION_SENSOR_LIS2MDL_0 == 1)
    case IKS01A3_LIS2MDL_0:
      if (LIS2MDL_0_Probe(Functions) != BSP_ERROR_NONE)
 80064c2:	6838      	ldr	r0, [r7, #0]
 80064c4:	f000 fb5e 	bl	8006b84 <LIS2MDL_0_Probe>
 80064c8:	4603      	mov	r3, r0
 80064ca:	2b00      	cmp	r3, #0
 80064cc:	d002      	beq.n	80064d4 <IKS01A3_MOTION_SENSOR_Init+0x10c>
      {
        return BSP_ERROR_NO_INIT;
 80064ce:	f04f 33ff 	mov.w	r3, #4294967295
 80064d2:	e068      	b.n	80065a6 <IKS01A3_MOTION_SENSOR_Init+0x1de>
      }
      if (MotionDrv[Instance]->GetCapabilities(MotionCompObj[Instance], (void *)&cap) != BSP_ERROR_NONE)
 80064d4:	4a36      	ldr	r2, [pc, #216]	; (80065b0 <IKS01A3_MOTION_SENSOR_Init+0x1e8>)
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80064dc:	68db      	ldr	r3, [r3, #12]
 80064de:	4935      	ldr	r1, [pc, #212]	; (80065b4 <IKS01A3_MOTION_SENSOR_Init+0x1ec>)
 80064e0:	687a      	ldr	r2, [r7, #4]
 80064e2:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80064e6:	f107 010c 	add.w	r1, r7, #12
 80064ea:	4610      	mov	r0, r2
 80064ec:	4798      	blx	r3
 80064ee:	4603      	mov	r3, r0
 80064f0:	2b00      	cmp	r3, #0
 80064f2:	d002      	beq.n	80064fa <IKS01A3_MOTION_SENSOR_Init+0x132>
      {
        return BSP_ERROR_UNKNOWN_COMPONENT;
 80064f4:	f06f 0306 	mvn.w	r3, #6
 80064f8:	e055      	b.n	80065a6 <IKS01A3_MOTION_SENSOR_Init+0x1de>
      }
      if (cap.Acc == 1U)
 80064fa:	7b3b      	ldrb	r3, [r7, #12]
 80064fc:	2b01      	cmp	r3, #1
 80064fe:	d103      	bne.n	8006508 <IKS01A3_MOTION_SENSOR_Init+0x140>
      {
        component_functions |= MOTION_ACCELERO;
 8006500:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006502:	f043 0302 	orr.w	r3, r3, #2
 8006506:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      if (cap.Gyro == 1U)
 8006508:	7b7b      	ldrb	r3, [r7, #13]
 800650a:	2b01      	cmp	r3, #1
 800650c:	d103      	bne.n	8006516 <IKS01A3_MOTION_SENSOR_Init+0x14e>
      {
        component_functions |= MOTION_GYRO;
 800650e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006510:	f043 0301 	orr.w	r3, r3, #1
 8006514:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      if (cap.Magneto == 1U)
 8006516:	7bbb      	ldrb	r3, [r7, #14]
 8006518:	2b01      	cmp	r3, #1
 800651a:	d10c      	bne.n	8006536 <IKS01A3_MOTION_SENSOR_Init+0x16e>
      {
        component_functions |= MOTION_MAGNETO;
 800651c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800651e:	f043 0304 	orr.w	r3, r3, #4
 8006522:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      break;
 8006524:	e007      	b.n	8006536 <IKS01A3_MOTION_SENSOR_Init+0x16e>
      }
      break;
#endif

    default:
      ret = BSP_ERROR_WRONG_PARAM;
 8006526:	f06f 0301 	mvn.w	r3, #1
 800652a:	637b      	str	r3, [r7, #52]	; 0x34
      break;
 800652c:	e004      	b.n	8006538 <IKS01A3_MOTION_SENSOR_Init+0x170>
      break;
 800652e:	bf00      	nop
 8006530:	e002      	b.n	8006538 <IKS01A3_MOTION_SENSOR_Init+0x170>
      break;
 8006532:	bf00      	nop
 8006534:	e000      	b.n	8006538 <IKS01A3_MOTION_SENSOR_Init+0x170>
      break;
 8006536:	bf00      	nop
  }

  if (ret != BSP_ERROR_NONE)
 8006538:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800653a:	2b00      	cmp	r3, #0
 800653c:	d001      	beq.n	8006542 <IKS01A3_MOTION_SENSOR_Init+0x17a>
  {
    return ret;
 800653e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006540:	e031      	b.n	80065a6 <IKS01A3_MOTION_SENSOR_Init+0x1de>
  }

  for (i = 0; i < IKS01A3_MOTION_FUNCTIONS_NBR; i++)
 8006542:	2300      	movs	r3, #0
 8006544:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006546:	e02a      	b.n	800659e <IKS01A3_MOTION_SENSOR_Init+0x1d6>
  {
    if (((Functions & function) == function) && ((component_functions & function) == function))
 8006548:	683a      	ldr	r2, [r7, #0]
 800654a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800654c:	4013      	ands	r3, r2
 800654e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006550:	429a      	cmp	r2, r3
 8006552:	d11e      	bne.n	8006592 <IKS01A3_MOTION_SENSOR_Init+0x1ca>
 8006554:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006556:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006558:	4013      	ands	r3, r2
 800655a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800655c:	429a      	cmp	r2, r3
 800655e:	d118      	bne.n	8006592 <IKS01A3_MOTION_SENSOR_Init+0x1ca>
    {
      if (MotionFuncDrv[Instance][FunctionIndex[function]]->Enable(MotionCompObj[Instance]) != BSP_ERROR_NONE)
 8006560:	4a15      	ldr	r2, [pc, #84]	; (80065b8 <IKS01A3_MOTION_SENSOR_Init+0x1f0>)
 8006562:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006564:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8006568:	4814      	ldr	r0, [pc, #80]	; (80065bc <IKS01A3_MOTION_SENSOR_Init+0x1f4>)
 800656a:	687a      	ldr	r2, [r7, #4]
 800656c:	4613      	mov	r3, r2
 800656e:	005b      	lsls	r3, r3, #1
 8006570:	4413      	add	r3, r2
 8006572:	440b      	add	r3, r1
 8006574:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	490e      	ldr	r1, [pc, #56]	; (80065b4 <IKS01A3_MOTION_SENSOR_Init+0x1ec>)
 800657c:	687a      	ldr	r2, [r7, #4]
 800657e:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8006582:	4610      	mov	r0, r2
 8006584:	4798      	blx	r3
 8006586:	4603      	mov	r3, r0
 8006588:	2b00      	cmp	r3, #0
 800658a:	d002      	beq.n	8006592 <IKS01A3_MOTION_SENSOR_Init+0x1ca>
      {
        return BSP_ERROR_COMPONENT_FAILURE;
 800658c:	f06f 0304 	mvn.w	r3, #4
 8006590:	e009      	b.n	80065a6 <IKS01A3_MOTION_SENSOR_Init+0x1de>
      }
    }
    function = function << 1;
 8006592:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006594:	005b      	lsls	r3, r3, #1
 8006596:	633b      	str	r3, [r7, #48]	; 0x30
  for (i = 0; i < IKS01A3_MOTION_FUNCTIONS_NBR; i++)
 8006598:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800659a:	3301      	adds	r3, #1
 800659c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800659e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80065a0:	2b02      	cmp	r3, #2
 80065a2:	d9d1      	bls.n	8006548 <IKS01A3_MOTION_SENSOR_Init+0x180>
  }

  return ret;
 80065a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80065a6:	4618      	mov	r0, r3
 80065a8:	3738      	adds	r7, #56	; 0x38
 80065aa:	46bd      	mov	sp, r7
 80065ac:	bd80      	pop	{r7, pc}
 80065ae:	bf00      	nop
 80065b0:	20016db0 	.word	0x20016db0
 80065b4:	20016d80 	.word	0x20016d80
 80065b8:	200000c8 	.word	0x200000c8
 80065bc:	20016d8c 	.word	0x20016d8c

080065c0 <IKS01A3_MOTION_SENSOR_DeInit>:
  * @brief  Deinitialize Motion sensor
  * @param  Instance Motion sensor instance
  * @retval BSP status
  */
int32_t IKS01A3_MOTION_SENSOR_DeInit(uint32_t Instance)
{
 80065c0:	b580      	push	{r7, lr}
 80065c2:	b084      	sub	sp, #16
 80065c4:	af00      	add	r7, sp, #0
 80065c6:	6078      	str	r0, [r7, #4]
  int32_t ret;

  if (Instance >= IKS01A3_MOTION_INSTANCES_NBR)
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	2b02      	cmp	r3, #2
 80065cc:	d903      	bls.n	80065d6 <IKS01A3_MOTION_SENSOR_DeInit+0x16>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 80065ce:	f06f 0301 	mvn.w	r3, #1
 80065d2:	60fb      	str	r3, [r7, #12]
 80065d4:	e013      	b.n	80065fe <IKS01A3_MOTION_SENSOR_DeInit+0x3e>
  }
  else if (MotionDrv[Instance]->DeInit(MotionCompObj[Instance]) != BSP_ERROR_NONE)
 80065d6:	4a0c      	ldr	r2, [pc, #48]	; (8006608 <IKS01A3_MOTION_SENSOR_DeInit+0x48>)
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80065de:	685b      	ldr	r3, [r3, #4]
 80065e0:	490a      	ldr	r1, [pc, #40]	; (800660c <IKS01A3_MOTION_SENSOR_DeInit+0x4c>)
 80065e2:	687a      	ldr	r2, [r7, #4]
 80065e4:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80065e8:	4610      	mov	r0, r2
 80065ea:	4798      	blx	r3
 80065ec:	4603      	mov	r3, r0
 80065ee:	2b00      	cmp	r3, #0
 80065f0:	d003      	beq.n	80065fa <IKS01A3_MOTION_SENSOR_DeInit+0x3a>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 80065f2:	f06f 0304 	mvn.w	r3, #4
 80065f6:	60fb      	str	r3, [r7, #12]
 80065f8:	e001      	b.n	80065fe <IKS01A3_MOTION_SENSOR_DeInit+0x3e>
  }
  else
  {
    ret = BSP_ERROR_NONE;
 80065fa:	2300      	movs	r3, #0
 80065fc:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 80065fe:	68fb      	ldr	r3, [r7, #12]
}
 8006600:	4618      	mov	r0, r3
 8006602:	3710      	adds	r7, #16
 8006604:	46bd      	mov	sp, r7
 8006606:	bd80      	pop	{r7, pc}
 8006608:	20016db0 	.word	0x20016db0
 800660c:	20016d80 	.word	0x20016d80

08006610 <IKS01A3_MOTION_SENSOR_Enable>:
  *         - MOTION_ACCELERO for instance 1
  *         - MOTION_MAGNETO for instance 2
  * @retval BSP status
  */
int32_t IKS01A3_MOTION_SENSOR_Enable(uint32_t Instance, uint32_t Function)
{
 8006610:	b580      	push	{r7, lr}
 8006612:	b084      	sub	sp, #16
 8006614:	af00      	add	r7, sp, #0
 8006616:	6078      	str	r0, [r7, #4]
 8006618:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (Instance >= IKS01A3_MOTION_INSTANCES_NBR)
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	2b02      	cmp	r3, #2
 800661e:	d903      	bls.n	8006628 <IKS01A3_MOTION_SENSOR_Enable+0x18>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8006620:	f06f 0301 	mvn.w	r3, #1
 8006624:	60fb      	str	r3, [r7, #12]
 8006626:	e028      	b.n	800667a <IKS01A3_MOTION_SENSOR_Enable+0x6a>
  }
  else
  {
    if ((MotionCtx[Instance].Functions & Function) == Function)
 8006628:	4a16      	ldr	r2, [pc, #88]	; (8006684 <IKS01A3_MOTION_SENSOR_Enable+0x74>)
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8006630:	683b      	ldr	r3, [r7, #0]
 8006632:	4013      	ands	r3, r2
 8006634:	683a      	ldr	r2, [r7, #0]
 8006636:	429a      	cmp	r2, r3
 8006638:	d11c      	bne.n	8006674 <IKS01A3_MOTION_SENSOR_Enable+0x64>
    {
      if (MotionFuncDrv[Instance][FunctionIndex[Function]]->Enable(MotionCompObj[Instance]) != BSP_ERROR_NONE)
 800663a:	4a13      	ldr	r2, [pc, #76]	; (8006688 <IKS01A3_MOTION_SENSOR_Enable+0x78>)
 800663c:	683b      	ldr	r3, [r7, #0]
 800663e:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8006642:	4812      	ldr	r0, [pc, #72]	; (800668c <IKS01A3_MOTION_SENSOR_Enable+0x7c>)
 8006644:	687a      	ldr	r2, [r7, #4]
 8006646:	4613      	mov	r3, r2
 8006648:	005b      	lsls	r3, r3, #1
 800664a:	4413      	add	r3, r2
 800664c:	440b      	add	r3, r1
 800664e:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	490e      	ldr	r1, [pc, #56]	; (8006690 <IKS01A3_MOTION_SENSOR_Enable+0x80>)
 8006656:	687a      	ldr	r2, [r7, #4]
 8006658:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800665c:	4610      	mov	r0, r2
 800665e:	4798      	blx	r3
 8006660:	4603      	mov	r3, r0
 8006662:	2b00      	cmp	r3, #0
 8006664:	d003      	beq.n	800666e <IKS01A3_MOTION_SENSOR_Enable+0x5e>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8006666:	f06f 0304 	mvn.w	r3, #4
 800666a:	60fb      	str	r3, [r7, #12]
 800666c:	e005      	b.n	800667a <IKS01A3_MOTION_SENSOR_Enable+0x6a>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 800666e:	2300      	movs	r3, #0
 8006670:	60fb      	str	r3, [r7, #12]
 8006672:	e002      	b.n	800667a <IKS01A3_MOTION_SENSOR_Enable+0x6a>
      }
    }
    else
    {
      ret = BSP_ERROR_WRONG_PARAM;
 8006674:	f06f 0301 	mvn.w	r3, #1
 8006678:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 800667a:	68fb      	ldr	r3, [r7, #12]
}
 800667c:	4618      	mov	r0, r3
 800667e:	3710      	adds	r7, #16
 8006680:	46bd      	mov	sp, r7
 8006682:	bd80      	pop	{r7, pc}
 8006684:	20016dbc 	.word	0x20016dbc
 8006688:	200000c8 	.word	0x200000c8
 800668c:	20016d8c 	.word	0x20016d8c
 8006690:	20016d80 	.word	0x20016d80

08006694 <IKS01A3_MOTION_SENSOR_Disable>:
  *         - MOTION_ACCELERO for instance 1
  *         - MOTION_MAGNETO for instance 2
  * @retval BSP status
  */
int32_t IKS01A3_MOTION_SENSOR_Disable(uint32_t Instance, uint32_t Function)
{
 8006694:	b580      	push	{r7, lr}
 8006696:	b084      	sub	sp, #16
 8006698:	af00      	add	r7, sp, #0
 800669a:	6078      	str	r0, [r7, #4]
 800669c:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (Instance >= IKS01A3_MOTION_INSTANCES_NBR)
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	2b02      	cmp	r3, #2
 80066a2:	d903      	bls.n	80066ac <IKS01A3_MOTION_SENSOR_Disable+0x18>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 80066a4:	f06f 0301 	mvn.w	r3, #1
 80066a8:	60fb      	str	r3, [r7, #12]
 80066aa:	e028      	b.n	80066fe <IKS01A3_MOTION_SENSOR_Disable+0x6a>
  }
  else
  {
    if ((MotionCtx[Instance].Functions & Function) == Function)
 80066ac:	4a16      	ldr	r2, [pc, #88]	; (8006708 <IKS01A3_MOTION_SENSOR_Disable+0x74>)
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80066b4:	683b      	ldr	r3, [r7, #0]
 80066b6:	4013      	ands	r3, r2
 80066b8:	683a      	ldr	r2, [r7, #0]
 80066ba:	429a      	cmp	r2, r3
 80066bc:	d11c      	bne.n	80066f8 <IKS01A3_MOTION_SENSOR_Disable+0x64>
    {
      if (MotionFuncDrv[Instance][FunctionIndex[Function]]->Disable(MotionCompObj[Instance]) != BSP_ERROR_NONE)
 80066be:	4a13      	ldr	r2, [pc, #76]	; (800670c <IKS01A3_MOTION_SENSOR_Disable+0x78>)
 80066c0:	683b      	ldr	r3, [r7, #0]
 80066c2:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80066c6:	4812      	ldr	r0, [pc, #72]	; (8006710 <IKS01A3_MOTION_SENSOR_Disable+0x7c>)
 80066c8:	687a      	ldr	r2, [r7, #4]
 80066ca:	4613      	mov	r3, r2
 80066cc:	005b      	lsls	r3, r3, #1
 80066ce:	4413      	add	r3, r2
 80066d0:	440b      	add	r3, r1
 80066d2:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80066d6:	685b      	ldr	r3, [r3, #4]
 80066d8:	490e      	ldr	r1, [pc, #56]	; (8006714 <IKS01A3_MOTION_SENSOR_Disable+0x80>)
 80066da:	687a      	ldr	r2, [r7, #4]
 80066dc:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80066e0:	4610      	mov	r0, r2
 80066e2:	4798      	blx	r3
 80066e4:	4603      	mov	r3, r0
 80066e6:	2b00      	cmp	r3, #0
 80066e8:	d003      	beq.n	80066f2 <IKS01A3_MOTION_SENSOR_Disable+0x5e>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 80066ea:	f06f 0304 	mvn.w	r3, #4
 80066ee:	60fb      	str	r3, [r7, #12]
 80066f0:	e005      	b.n	80066fe <IKS01A3_MOTION_SENSOR_Disable+0x6a>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 80066f2:	2300      	movs	r3, #0
 80066f4:	60fb      	str	r3, [r7, #12]
 80066f6:	e002      	b.n	80066fe <IKS01A3_MOTION_SENSOR_Disable+0x6a>
      }
    }
    else
    {
      ret = BSP_ERROR_WRONG_PARAM;
 80066f8:	f06f 0301 	mvn.w	r3, #1
 80066fc:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 80066fe:	68fb      	ldr	r3, [r7, #12]
}
 8006700:	4618      	mov	r0, r3
 8006702:	3710      	adds	r7, #16
 8006704:	46bd      	mov	sp, r7
 8006706:	bd80      	pop	{r7, pc}
 8006708:	20016dbc 	.word	0x20016dbc
 800670c:	200000c8 	.word	0x200000c8
 8006710:	20016d8c 	.word	0x20016d8c
 8006714:	20016d80 	.word	0x20016d80

08006718 <IKS01A3_MOTION_SENSOR_GetAxes>:
  *         - MOTION_MAGNETO for instance 2
  * @param  Axes pointer to axes data structure
  * @retval BSP status
  */
int32_t IKS01A3_MOTION_SENSOR_GetAxes(uint32_t Instance, uint32_t Function, IKS01A3_MOTION_SENSOR_Axes_t *Axes)
{
 8006718:	b580      	push	{r7, lr}
 800671a:	b086      	sub	sp, #24
 800671c:	af00      	add	r7, sp, #0
 800671e:	60f8      	str	r0, [r7, #12]
 8006720:	60b9      	str	r1, [r7, #8]
 8006722:	607a      	str	r2, [r7, #4]
  int32_t ret;

  if (Instance >= IKS01A3_MOTION_INSTANCES_NBR)
 8006724:	68fb      	ldr	r3, [r7, #12]
 8006726:	2b02      	cmp	r3, #2
 8006728:	d903      	bls.n	8006732 <IKS01A3_MOTION_SENSOR_GetAxes+0x1a>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 800672a:	f06f 0301 	mvn.w	r3, #1
 800672e:	617b      	str	r3, [r7, #20]
 8006730:	e029      	b.n	8006786 <IKS01A3_MOTION_SENSOR_GetAxes+0x6e>
  }
  else
  {
    if ((MotionCtx[Instance].Functions & Function) == Function)
 8006732:	4a17      	ldr	r2, [pc, #92]	; (8006790 <IKS01A3_MOTION_SENSOR_GetAxes+0x78>)
 8006734:	68fb      	ldr	r3, [r7, #12]
 8006736:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800673a:	68bb      	ldr	r3, [r7, #8]
 800673c:	4013      	ands	r3, r2
 800673e:	68ba      	ldr	r2, [r7, #8]
 8006740:	429a      	cmp	r2, r3
 8006742:	d11d      	bne.n	8006780 <IKS01A3_MOTION_SENSOR_GetAxes+0x68>
    {
      if (MotionFuncDrv[Instance][FunctionIndex[Function]]->GetAxes(MotionCompObj[Instance], Axes) != BSP_ERROR_NONE)
 8006744:	4a13      	ldr	r2, [pc, #76]	; (8006794 <IKS01A3_MOTION_SENSOR_GetAxes+0x7c>)
 8006746:	68bb      	ldr	r3, [r7, #8]
 8006748:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800674c:	4812      	ldr	r0, [pc, #72]	; (8006798 <IKS01A3_MOTION_SENSOR_GetAxes+0x80>)
 800674e:	68fa      	ldr	r2, [r7, #12]
 8006750:	4613      	mov	r3, r2
 8006752:	005b      	lsls	r3, r3, #1
 8006754:	4413      	add	r3, r2
 8006756:	440b      	add	r3, r1
 8006758:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 800675c:	69db      	ldr	r3, [r3, #28]
 800675e:	490f      	ldr	r1, [pc, #60]	; (800679c <IKS01A3_MOTION_SENSOR_GetAxes+0x84>)
 8006760:	68fa      	ldr	r2, [r7, #12]
 8006762:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8006766:	6879      	ldr	r1, [r7, #4]
 8006768:	4610      	mov	r0, r2
 800676a:	4798      	blx	r3
 800676c:	4603      	mov	r3, r0
 800676e:	2b00      	cmp	r3, #0
 8006770:	d003      	beq.n	800677a <IKS01A3_MOTION_SENSOR_GetAxes+0x62>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8006772:	f06f 0304 	mvn.w	r3, #4
 8006776:	617b      	str	r3, [r7, #20]
 8006778:	e005      	b.n	8006786 <IKS01A3_MOTION_SENSOR_GetAxes+0x6e>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 800677a:	2300      	movs	r3, #0
 800677c:	617b      	str	r3, [r7, #20]
 800677e:	e002      	b.n	8006786 <IKS01A3_MOTION_SENSOR_GetAxes+0x6e>
      }
    }
    else
    {
      ret = BSP_ERROR_WRONG_PARAM;
 8006780:	f06f 0301 	mvn.w	r3, #1
 8006784:	617b      	str	r3, [r7, #20]
    }
  }

  return ret;
 8006786:	697b      	ldr	r3, [r7, #20]
}
 8006788:	4618      	mov	r0, r3
 800678a:	3718      	adds	r7, #24
 800678c:	46bd      	mov	sp, r7
 800678e:	bd80      	pop	{r7, pc}
 8006790:	20016dbc 	.word	0x20016dbc
 8006794:	200000c8 	.word	0x200000c8
 8006798:	20016d8c 	.word	0x20016d8c
 800679c:	20016d80 	.word	0x20016d80

080067a0 <IKS01A3_MOTION_SENSOR_GetOutputDataRate>:
  *         - MOTION_MAGNETO for instance 2
  * @param  Odr pointer to Output Data Rate read value
  * @retval BSP status
  */
int32_t IKS01A3_MOTION_SENSOR_GetOutputDataRate(uint32_t Instance, uint32_t Function, float *Odr)
{
 80067a0:	b580      	push	{r7, lr}
 80067a2:	b086      	sub	sp, #24
 80067a4:	af00      	add	r7, sp, #0
 80067a6:	60f8      	str	r0, [r7, #12]
 80067a8:	60b9      	str	r1, [r7, #8]
 80067aa:	607a      	str	r2, [r7, #4]
  int32_t ret;

  if (Instance >= IKS01A3_MOTION_INSTANCES_NBR)
 80067ac:	68fb      	ldr	r3, [r7, #12]
 80067ae:	2b02      	cmp	r3, #2
 80067b0:	d903      	bls.n	80067ba <IKS01A3_MOTION_SENSOR_GetOutputDataRate+0x1a>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 80067b2:	f06f 0301 	mvn.w	r3, #1
 80067b6:	617b      	str	r3, [r7, #20]
 80067b8:	e029      	b.n	800680e <IKS01A3_MOTION_SENSOR_GetOutputDataRate+0x6e>
  }
  else
  {
    if ((MotionCtx[Instance].Functions & Function) == Function)
 80067ba:	4a17      	ldr	r2, [pc, #92]	; (8006818 <IKS01A3_MOTION_SENSOR_GetOutputDataRate+0x78>)
 80067bc:	68fb      	ldr	r3, [r7, #12]
 80067be:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80067c2:	68bb      	ldr	r3, [r7, #8]
 80067c4:	4013      	ands	r3, r2
 80067c6:	68ba      	ldr	r2, [r7, #8]
 80067c8:	429a      	cmp	r2, r3
 80067ca:	d11d      	bne.n	8006808 <IKS01A3_MOTION_SENSOR_GetOutputDataRate+0x68>
    {
      if (MotionFuncDrv[Instance][FunctionIndex[Function]]->GetOutputDataRate(MotionCompObj[Instance], Odr) != BSP_ERROR_NONE)
 80067cc:	4a13      	ldr	r2, [pc, #76]	; (800681c <IKS01A3_MOTION_SENSOR_GetOutputDataRate+0x7c>)
 80067ce:	68bb      	ldr	r3, [r7, #8]
 80067d0:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80067d4:	4812      	ldr	r0, [pc, #72]	; (8006820 <IKS01A3_MOTION_SENSOR_GetOutputDataRate+0x80>)
 80067d6:	68fa      	ldr	r2, [r7, #12]
 80067d8:	4613      	mov	r3, r2
 80067da:	005b      	lsls	r3, r3, #1
 80067dc:	4413      	add	r3, r2
 80067de:	440b      	add	r3, r1
 80067e0:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80067e4:	68db      	ldr	r3, [r3, #12]
 80067e6:	490f      	ldr	r1, [pc, #60]	; (8006824 <IKS01A3_MOTION_SENSOR_GetOutputDataRate+0x84>)
 80067e8:	68fa      	ldr	r2, [r7, #12]
 80067ea:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80067ee:	6879      	ldr	r1, [r7, #4]
 80067f0:	4610      	mov	r0, r2
 80067f2:	4798      	blx	r3
 80067f4:	4603      	mov	r3, r0
 80067f6:	2b00      	cmp	r3, #0
 80067f8:	d003      	beq.n	8006802 <IKS01A3_MOTION_SENSOR_GetOutputDataRate+0x62>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 80067fa:	f06f 0304 	mvn.w	r3, #4
 80067fe:	617b      	str	r3, [r7, #20]
 8006800:	e005      	b.n	800680e <IKS01A3_MOTION_SENSOR_GetOutputDataRate+0x6e>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 8006802:	2300      	movs	r3, #0
 8006804:	617b      	str	r3, [r7, #20]
 8006806:	e002      	b.n	800680e <IKS01A3_MOTION_SENSOR_GetOutputDataRate+0x6e>
      }
    }
    else
    {
      ret = BSP_ERROR_WRONG_PARAM;
 8006808:	f06f 0301 	mvn.w	r3, #1
 800680c:	617b      	str	r3, [r7, #20]
    }
  }

  return ret;
 800680e:	697b      	ldr	r3, [r7, #20]
}
 8006810:	4618      	mov	r0, r3
 8006812:	3718      	adds	r7, #24
 8006814:	46bd      	mov	sp, r7
 8006816:	bd80      	pop	{r7, pc}
 8006818:	20016dbc 	.word	0x20016dbc
 800681c:	200000c8 	.word	0x200000c8
 8006820:	20016d8c 	.word	0x20016d8c
 8006824:	20016d80 	.word	0x20016d80

08006828 <IKS01A3_MOTION_SENSOR_SetOutputDataRate>:
  *         - MOTION_MAGNETO for instance 2
  * @param  Odr Output Data Rate value to be set
  * @retval BSP status
  */
int32_t IKS01A3_MOTION_SENSOR_SetOutputDataRate(uint32_t Instance, uint32_t Function, float Odr)
{
 8006828:	b580      	push	{r7, lr}
 800682a:	b086      	sub	sp, #24
 800682c:	af00      	add	r7, sp, #0
 800682e:	60f8      	str	r0, [r7, #12]
 8006830:	60b9      	str	r1, [r7, #8]
 8006832:	ed87 0a01 	vstr	s0, [r7, #4]
  int32_t ret;

  if (Instance >= IKS01A3_MOTION_INSTANCES_NBR)
 8006836:	68fb      	ldr	r3, [r7, #12]
 8006838:	2b02      	cmp	r3, #2
 800683a:	d903      	bls.n	8006844 <IKS01A3_MOTION_SENSOR_SetOutputDataRate+0x1c>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 800683c:	f06f 0301 	mvn.w	r3, #1
 8006840:	617b      	str	r3, [r7, #20]
 8006842:	e02a      	b.n	800689a <IKS01A3_MOTION_SENSOR_SetOutputDataRate+0x72>
  }
  else
  {
    if ((MotionCtx[Instance].Functions & Function) == Function)
 8006844:	4a17      	ldr	r2, [pc, #92]	; (80068a4 <IKS01A3_MOTION_SENSOR_SetOutputDataRate+0x7c>)
 8006846:	68fb      	ldr	r3, [r7, #12]
 8006848:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800684c:	68bb      	ldr	r3, [r7, #8]
 800684e:	4013      	ands	r3, r2
 8006850:	68ba      	ldr	r2, [r7, #8]
 8006852:	429a      	cmp	r2, r3
 8006854:	d11e      	bne.n	8006894 <IKS01A3_MOTION_SENSOR_SetOutputDataRate+0x6c>
    {
      if (MotionFuncDrv[Instance][FunctionIndex[Function]]->SetOutputDataRate(MotionCompObj[Instance], Odr) != BSP_ERROR_NONE)
 8006856:	4a14      	ldr	r2, [pc, #80]	; (80068a8 <IKS01A3_MOTION_SENSOR_SetOutputDataRate+0x80>)
 8006858:	68bb      	ldr	r3, [r7, #8]
 800685a:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800685e:	4813      	ldr	r0, [pc, #76]	; (80068ac <IKS01A3_MOTION_SENSOR_SetOutputDataRate+0x84>)
 8006860:	68fa      	ldr	r2, [r7, #12]
 8006862:	4613      	mov	r3, r2
 8006864:	005b      	lsls	r3, r3, #1
 8006866:	4413      	add	r3, r2
 8006868:	440b      	add	r3, r1
 800686a:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 800686e:	691b      	ldr	r3, [r3, #16]
 8006870:	490f      	ldr	r1, [pc, #60]	; (80068b0 <IKS01A3_MOTION_SENSOR_SetOutputDataRate+0x88>)
 8006872:	68fa      	ldr	r2, [r7, #12]
 8006874:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8006878:	ed97 0a01 	vldr	s0, [r7, #4]
 800687c:	4610      	mov	r0, r2
 800687e:	4798      	blx	r3
 8006880:	4603      	mov	r3, r0
 8006882:	2b00      	cmp	r3, #0
 8006884:	d003      	beq.n	800688e <IKS01A3_MOTION_SENSOR_SetOutputDataRate+0x66>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8006886:	f06f 0304 	mvn.w	r3, #4
 800688a:	617b      	str	r3, [r7, #20]
 800688c:	e005      	b.n	800689a <IKS01A3_MOTION_SENSOR_SetOutputDataRate+0x72>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 800688e:	2300      	movs	r3, #0
 8006890:	617b      	str	r3, [r7, #20]
 8006892:	e002      	b.n	800689a <IKS01A3_MOTION_SENSOR_SetOutputDataRate+0x72>
      }
    }
    else
    {
      ret = BSP_ERROR_WRONG_PARAM;
 8006894:	f06f 0301 	mvn.w	r3, #1
 8006898:	617b      	str	r3, [r7, #20]
    }
  }

  return ret;
 800689a:	697b      	ldr	r3, [r7, #20]
}
 800689c:	4618      	mov	r0, r3
 800689e:	3718      	adds	r7, #24
 80068a0:	46bd      	mov	sp, r7
 80068a2:	bd80      	pop	{r7, pc}
 80068a4:	20016dbc 	.word	0x20016dbc
 80068a8:	200000c8 	.word	0x200000c8
 80068ac:	20016d8c 	.word	0x20016d8c
 80068b0:	20016d80 	.word	0x20016d80

080068b4 <LSM6DSO_0_Probe>:
/**
  * @brief  Register Bus IOs for instance 0 if component ID is OK
  * @retval BSP status
  */
static int32_t LSM6DSO_0_Probe(uint32_t Functions)
{
 80068b4:	b580      	push	{r7, lr}
 80068b6:	b094      	sub	sp, #80	; 0x50
 80068b8:	af00      	add	r7, sp, #0
 80068ba:	6078      	str	r0, [r7, #4]
  LSM6DSO_IO_t            io_ctx;
  uint8_t                 id;
  static LSM6DSO_Object_t lsm6dso_obj_0;
  LSM6DSO_Capabilities_t  cap;
  int32_t ret = BSP_ERROR_NONE;
 80068bc:	2300      	movs	r3, #0
 80068be:	64fb      	str	r3, [r7, #76]	; 0x4c

  /* Configure the accelero driver */
  io_ctx.BusType     = LSM6DSO_I2C_BUS; /* I2C */
 80068c0:	2300      	movs	r3, #0
 80068c2:	637b      	str	r3, [r7, #52]	; 0x34
  io_ctx.Address     = LSM6DSO_I2C_ADD_H;
 80068c4:	23d7      	movs	r3, #215	; 0xd7
 80068c6:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  io_ctx.Init        = IKS01A3_I2C_Init;
 80068ca:	4b4b      	ldr	r3, [pc, #300]	; (80069f8 <LSM6DSO_0_Probe+0x144>)
 80068cc:	62fb      	str	r3, [r7, #44]	; 0x2c
  io_ctx.DeInit      = IKS01A3_I2C_DeInit;
 80068ce:	4b4b      	ldr	r3, [pc, #300]	; (80069fc <LSM6DSO_0_Probe+0x148>)
 80068d0:	633b      	str	r3, [r7, #48]	; 0x30
  io_ctx.ReadReg     = IKS01A3_I2C_ReadReg;
 80068d2:	4b4b      	ldr	r3, [pc, #300]	; (8006a00 <LSM6DSO_0_Probe+0x14c>)
 80068d4:	643b      	str	r3, [r7, #64]	; 0x40
  io_ctx.WriteReg    = IKS01A3_I2C_WriteReg;
 80068d6:	4b4b      	ldr	r3, [pc, #300]	; (8006a04 <LSM6DSO_0_Probe+0x150>)
 80068d8:	63fb      	str	r3, [r7, #60]	; 0x3c
  io_ctx.GetTick     = IKS01A3_GetTick;
 80068da:	4b4b      	ldr	r3, [pc, #300]	; (8006a08 <LSM6DSO_0_Probe+0x154>)
 80068dc:	647b      	str	r3, [r7, #68]	; 0x44
  io_ctx.Delay       = IKS01A3_Delay;
 80068de:	4b4b      	ldr	r3, [pc, #300]	; (8006a0c <LSM6DSO_0_Probe+0x158>)
 80068e0:	64bb      	str	r3, [r7, #72]	; 0x48

  if (LSM6DSO_RegisterBusIO(&lsm6dso_obj_0, &io_ctx) != LSM6DSO_OK)
 80068e2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80068e6:	4619      	mov	r1, r3
 80068e8:	4849      	ldr	r0, [pc, #292]	; (8006a10 <LSM6DSO_0_Probe+0x15c>)
 80068ea:	f7fd fd8d 	bl	8004408 <LSM6DSO_RegisterBusIO>
 80068ee:	4603      	mov	r3, r0
 80068f0:	2b00      	cmp	r3, #0
 80068f2:	d003      	beq.n	80068fc <LSM6DSO_0_Probe+0x48>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 80068f4:	f06f 0306 	mvn.w	r3, #6
 80068f8:	64fb      	str	r3, [r7, #76]	; 0x4c
 80068fa:	e077      	b.n	80069ec <LSM6DSO_0_Probe+0x138>
  }
  else if (LSM6DSO_ReadID(&lsm6dso_obj_0, &id) != LSM6DSO_OK)
 80068fc:	f107 032b 	add.w	r3, r7, #43	; 0x2b
 8006900:	4619      	mov	r1, r3
 8006902:	4843      	ldr	r0, [pc, #268]	; (8006a10 <LSM6DSO_0_Probe+0x15c>)
 8006904:	f7fd fe86 	bl	8004614 <LSM6DSO_ReadID>
 8006908:	4603      	mov	r3, r0
 800690a:	2b00      	cmp	r3, #0
 800690c:	d003      	beq.n	8006916 <LSM6DSO_0_Probe+0x62>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800690e:	f06f 0306 	mvn.w	r3, #6
 8006912:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006914:	e06a      	b.n	80069ec <LSM6DSO_0_Probe+0x138>
  }
  else if (id != LSM6DSO_ID)
 8006916:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800691a:	2b6c      	cmp	r3, #108	; 0x6c
 800691c:	d003      	beq.n	8006926 <LSM6DSO_0_Probe+0x72>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800691e:	f06f 0306 	mvn.w	r3, #6
 8006922:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006924:	e062      	b.n	80069ec <LSM6DSO_0_Probe+0x138>
  }
  else
  {
    (void)LSM6DSO_GetCapabilities(&lsm6dso_obj_0, &cap);
 8006926:	f107 030c 	add.w	r3, r7, #12
 800692a:	4619      	mov	r1, r3
 800692c:	4838      	ldr	r0, [pc, #224]	; (8006a10 <LSM6DSO_0_Probe+0x15c>)
 800692e:	f7fd fe87 	bl	8004640 <LSM6DSO_GetCapabilities>
    MotionCtx[IKS01A3_LSM6DSO_0].Functions = ((uint32_t)cap.Gyro) | ((uint32_t)cap.Acc << 1) | ((uint32_t)cap.Magneto << 2);
 8006932:	7b7b      	ldrb	r3, [r7, #13]
 8006934:	461a      	mov	r2, r3
 8006936:	7b3b      	ldrb	r3, [r7, #12]
 8006938:	005b      	lsls	r3, r3, #1
 800693a:	431a      	orrs	r2, r3
 800693c:	7bbb      	ldrb	r3, [r7, #14]
 800693e:	009b      	lsls	r3, r3, #2
 8006940:	4313      	orrs	r3, r2
 8006942:	4a34      	ldr	r2, [pc, #208]	; (8006a14 <LSM6DSO_0_Probe+0x160>)
 8006944:	6013      	str	r3, [r2, #0]

    MotionCompObj[IKS01A3_LSM6DSO_0] = &lsm6dso_obj_0;
 8006946:	4b34      	ldr	r3, [pc, #208]	; (8006a18 <LSM6DSO_0_Probe+0x164>)
 8006948:	4a31      	ldr	r2, [pc, #196]	; (8006a10 <LSM6DSO_0_Probe+0x15c>)
 800694a:	601a      	str	r2, [r3, #0]
    /* The second cast (void *) is added to bypass Misra R11.3 rule */
    MotionDrv[IKS01A3_LSM6DSO_0] = (MOTION_SENSOR_CommonDrv_t *)(void *)&LSM6DSO_COMMON_Driver;
 800694c:	4b33      	ldr	r3, [pc, #204]	; (8006a1c <LSM6DSO_0_Probe+0x168>)
 800694e:	4a34      	ldr	r2, [pc, #208]	; (8006a20 <LSM6DSO_0_Probe+0x16c>)
 8006950:	601a      	str	r2, [r3, #0]

    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_GYRO) == MOTION_GYRO) && (cap.Gyro == 1U))
 8006952:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006954:	2b00      	cmp	r3, #0
 8006956:	d11d      	bne.n	8006994 <LSM6DSO_0_Probe+0xe0>
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	f003 0301 	and.w	r3, r3, #1
 800695e:	2b00      	cmp	r3, #0
 8006960:	d018      	beq.n	8006994 <LSM6DSO_0_Probe+0xe0>
 8006962:	7b7b      	ldrb	r3, [r7, #13]
 8006964:	2b01      	cmp	r3, #1
 8006966:	d115      	bne.n	8006994 <LSM6DSO_0_Probe+0xe0>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      MotionFuncDrv[IKS01A3_LSM6DSO_0][FunctionIndex[MOTION_GYRO]] = (MOTION_SENSOR_FuncDrv_t *)(void *)&LSM6DSO_GYRO_Driver;
 8006968:	4b2e      	ldr	r3, [pc, #184]	; (8006a24 <LSM6DSO_0_Probe+0x170>)
 800696a:	685b      	ldr	r3, [r3, #4]
 800696c:	4a2e      	ldr	r2, [pc, #184]	; (8006a28 <LSM6DSO_0_Probe+0x174>)
 800696e:	492f      	ldr	r1, [pc, #188]	; (8006a2c <LSM6DSO_0_Probe+0x178>)
 8006970:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

      if (MotionDrv[IKS01A3_LSM6DSO_0]->Init(MotionCompObj[IKS01A3_LSM6DSO_0]) != LSM6DSO_OK)
 8006974:	4b29      	ldr	r3, [pc, #164]	; (8006a1c <LSM6DSO_0_Probe+0x168>)
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	4a27      	ldr	r2, [pc, #156]	; (8006a18 <LSM6DSO_0_Probe+0x164>)
 800697c:	6812      	ldr	r2, [r2, #0]
 800697e:	4610      	mov	r0, r2
 8006980:	4798      	blx	r3
 8006982:	4603      	mov	r3, r0
 8006984:	2b00      	cmp	r3, #0
 8006986:	d003      	beq.n	8006990 <LSM6DSO_0_Probe+0xdc>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8006988:	f06f 0304 	mvn.w	r3, #4
 800698c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800698e:	e001      	b.n	8006994 <LSM6DSO_0_Probe+0xe0>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 8006990:	2300      	movs	r3, #0
 8006992:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_ACCELERO) == MOTION_ACCELERO) && (cap.Acc == 1U))
 8006994:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006996:	2b00      	cmp	r3, #0
 8006998:	d11d      	bne.n	80069d6 <LSM6DSO_0_Probe+0x122>
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	f003 0302 	and.w	r3, r3, #2
 80069a0:	2b00      	cmp	r3, #0
 80069a2:	d018      	beq.n	80069d6 <LSM6DSO_0_Probe+0x122>
 80069a4:	7b3b      	ldrb	r3, [r7, #12]
 80069a6:	2b01      	cmp	r3, #1
 80069a8:	d115      	bne.n	80069d6 <LSM6DSO_0_Probe+0x122>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      MotionFuncDrv[IKS01A3_LSM6DSO_0][FunctionIndex[MOTION_ACCELERO]] = (MOTION_SENSOR_FuncDrv_t *)(
 80069aa:	4b1e      	ldr	r3, [pc, #120]	; (8006a24 <LSM6DSO_0_Probe+0x170>)
 80069ac:	689b      	ldr	r3, [r3, #8]
 80069ae:	4a1e      	ldr	r2, [pc, #120]	; (8006a28 <LSM6DSO_0_Probe+0x174>)
 80069b0:	491f      	ldr	r1, [pc, #124]	; (8006a30 <LSM6DSO_0_Probe+0x17c>)
 80069b2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                                                                           void *)&LSM6DSO_ACC_Driver;

      if (MotionDrv[IKS01A3_LSM6DSO_0]->Init(MotionCompObj[IKS01A3_LSM6DSO_0]) != LSM6DSO_OK)
 80069b6:	4b19      	ldr	r3, [pc, #100]	; (8006a1c <LSM6DSO_0_Probe+0x168>)
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	4a16      	ldr	r2, [pc, #88]	; (8006a18 <LSM6DSO_0_Probe+0x164>)
 80069be:	6812      	ldr	r2, [r2, #0]
 80069c0:	4610      	mov	r0, r2
 80069c2:	4798      	blx	r3
 80069c4:	4603      	mov	r3, r0
 80069c6:	2b00      	cmp	r3, #0
 80069c8:	d003      	beq.n	80069d2 <LSM6DSO_0_Probe+0x11e>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 80069ca:	f06f 0304 	mvn.w	r3, #4
 80069ce:	64fb      	str	r3, [r7, #76]	; 0x4c
 80069d0:	e001      	b.n	80069d6 <LSM6DSO_0_Probe+0x122>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 80069d2:	2300      	movs	r3, #0
 80069d4:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_MAGNETO) == MOTION_MAGNETO))
 80069d6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80069d8:	2b00      	cmp	r3, #0
 80069da:	d107      	bne.n	80069ec <LSM6DSO_0_Probe+0x138>
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	f003 0304 	and.w	r3, r3, #4
 80069e2:	2b00      	cmp	r3, #0
 80069e4:	d002      	beq.n	80069ec <LSM6DSO_0_Probe+0x138>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 80069e6:	f06f 0304 	mvn.w	r3, #4
 80069ea:	64fb      	str	r3, [r7, #76]	; 0x4c
    }
  }
  return ret;
 80069ec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
}
 80069ee:	4618      	mov	r0, r3
 80069f0:	3750      	adds	r7, #80	; 0x50
 80069f2:	46bd      	mov	sp, r7
 80069f4:	bd80      	pop	{r7, pc}
 80069f6:	bf00      	nop
 80069f8:	080019b1 	.word	0x080019b1
 80069fc:	08001a15 	.word	0x08001a15
 8006a00:	08001ac9 	.word	0x08001ac9
 8006a04:	08001a65 	.word	0x08001a65
 8006a08:	08001b2d 	.word	0x08001b2d
 8006a0c:	08006db9 	.word	0x08006db9
 8006a10:	20016dc8 	.word	0x20016dc8
 8006a14:	20016dbc 	.word	0x20016dbc
 8006a18:	20016d80 	.word	0x20016d80
 8006a1c:	20016db0 	.word	0x20016db0
 8006a20:	20000070 	.word	0x20000070
 8006a24:	200000c8 	.word	0x200000c8
 8006a28:	20016d8c 	.word	0x20016d8c
 8006a2c:	200000a4 	.word	0x200000a4
 8006a30:	20000080 	.word	0x20000080

08006a34 <LIS2DW12_0_Probe>:
/**
  * @brief  Register Bus IOs for instance 1 if component ID is OK
  * @retval BSP status
  */
static int32_t LIS2DW12_0_Probe(uint32_t Functions)
{
 8006a34:	b580      	push	{r7, lr}
 8006a36:	b094      	sub	sp, #80	; 0x50
 8006a38:	af00      	add	r7, sp, #0
 8006a3a:	6078      	str	r0, [r7, #4]
  LIS2DW12_IO_t            io_ctx;
  uint8_t                  id;
  static LIS2DW12_Object_t lis2dw12_obj_0;
  LIS2DW12_Capabilities_t  cap;
  int32_t ret = BSP_ERROR_NONE;
 8006a3c:	2300      	movs	r3, #0
 8006a3e:	64fb      	str	r3, [r7, #76]	; 0x4c

  /* Configure the accelero driver */
  io_ctx.BusType     = LIS2DW12_I2C_BUS; /* I2C */
 8006a40:	2300      	movs	r3, #0
 8006a42:	637b      	str	r3, [r7, #52]	; 0x34
  io_ctx.Address     = LIS2DW12_I2C_ADD_H;
 8006a44:	2333      	movs	r3, #51	; 0x33
 8006a46:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  io_ctx.Init        = IKS01A3_I2C_Init;
 8006a4a:	4b40      	ldr	r3, [pc, #256]	; (8006b4c <LIS2DW12_0_Probe+0x118>)
 8006a4c:	62fb      	str	r3, [r7, #44]	; 0x2c
  io_ctx.DeInit      = IKS01A3_I2C_DeInit;
 8006a4e:	4b40      	ldr	r3, [pc, #256]	; (8006b50 <LIS2DW12_0_Probe+0x11c>)
 8006a50:	633b      	str	r3, [r7, #48]	; 0x30
  io_ctx.ReadReg     = IKS01A3_I2C_ReadReg;
 8006a52:	4b40      	ldr	r3, [pc, #256]	; (8006b54 <LIS2DW12_0_Probe+0x120>)
 8006a54:	643b      	str	r3, [r7, #64]	; 0x40
  io_ctx.WriteReg    = IKS01A3_I2C_WriteReg;
 8006a56:	4b40      	ldr	r3, [pc, #256]	; (8006b58 <LIS2DW12_0_Probe+0x124>)
 8006a58:	63fb      	str	r3, [r7, #60]	; 0x3c
  io_ctx.GetTick     = IKS01A3_GetTick;
 8006a5a:	4b40      	ldr	r3, [pc, #256]	; (8006b5c <LIS2DW12_0_Probe+0x128>)
 8006a5c:	647b      	str	r3, [r7, #68]	; 0x44
  io_ctx.Delay       = IKS01A3_Delay;
 8006a5e:	4b40      	ldr	r3, [pc, #256]	; (8006b60 <LIS2DW12_0_Probe+0x12c>)
 8006a60:	64bb      	str	r3, [r7, #72]	; 0x48

  if (LIS2DW12_RegisterBusIO(&lis2dw12_obj_0, &io_ctx) != LIS2DW12_OK)
 8006a62:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8006a66:	4619      	mov	r1, r3
 8006a68:	483e      	ldr	r0, [pc, #248]	; (8006b64 <LIS2DW12_0_Probe+0x130>)
 8006a6a:	f7fb f973 	bl	8001d54 <LIS2DW12_RegisterBusIO>
 8006a6e:	4603      	mov	r3, r0
 8006a70:	2b00      	cmp	r3, #0
 8006a72:	d003      	beq.n	8006a7c <LIS2DW12_0_Probe+0x48>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8006a74:	f06f 0306 	mvn.w	r3, #6
 8006a78:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006a7a:	e062      	b.n	8006b42 <LIS2DW12_0_Probe+0x10e>
  }
  else if (LIS2DW12_ReadID(&lis2dw12_obj_0, &id) != LIS2DW12_OK)
 8006a7c:	f107 032b 	add.w	r3, r7, #43	; 0x2b
 8006a80:	4619      	mov	r1, r3
 8006a82:	4838      	ldr	r0, [pc, #224]	; (8006b64 <LIS2DW12_0_Probe+0x130>)
 8006a84:	f7fb fa54 	bl	8001f30 <LIS2DW12_ReadID>
 8006a88:	4603      	mov	r3, r0
 8006a8a:	2b00      	cmp	r3, #0
 8006a8c:	d003      	beq.n	8006a96 <LIS2DW12_0_Probe+0x62>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8006a8e:	f06f 0306 	mvn.w	r3, #6
 8006a92:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006a94:	e055      	b.n	8006b42 <LIS2DW12_0_Probe+0x10e>
  }
  else if (id != LIS2DW12_ID)
 8006a96:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8006a9a:	2b44      	cmp	r3, #68	; 0x44
 8006a9c:	d003      	beq.n	8006aa6 <LIS2DW12_0_Probe+0x72>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8006a9e:	f06f 0306 	mvn.w	r3, #6
 8006aa2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006aa4:	e04d      	b.n	8006b42 <LIS2DW12_0_Probe+0x10e>
  }
  else
  {
    (void)LIS2DW12_GetCapabilities(&lis2dw12_obj_0, &cap);
 8006aa6:	f107 030c 	add.w	r3, r7, #12
 8006aaa:	4619      	mov	r1, r3
 8006aac:	482d      	ldr	r0, [pc, #180]	; (8006b64 <LIS2DW12_0_Probe+0x130>)
 8006aae:	f7fb fa55 	bl	8001f5c <LIS2DW12_GetCapabilities>
    MotionCtx[IKS01A3_LIS2DW12_0].Functions = ((uint32_t)cap.Gyro) | ((uint32_t)cap.Acc << 1) | ((uint32_t)cap.Magneto << 2);
 8006ab2:	7b7b      	ldrb	r3, [r7, #13]
 8006ab4:	461a      	mov	r2, r3
 8006ab6:	7b3b      	ldrb	r3, [r7, #12]
 8006ab8:	005b      	lsls	r3, r3, #1
 8006aba:	431a      	orrs	r2, r3
 8006abc:	7bbb      	ldrb	r3, [r7, #14]
 8006abe:	009b      	lsls	r3, r3, #2
 8006ac0:	4313      	orrs	r3, r2
 8006ac2:	4a29      	ldr	r2, [pc, #164]	; (8006b68 <LIS2DW12_0_Probe+0x134>)
 8006ac4:	6053      	str	r3, [r2, #4]

    MotionCompObj[IKS01A3_LIS2DW12_0] = &lis2dw12_obj_0;
 8006ac6:	4b29      	ldr	r3, [pc, #164]	; (8006b6c <LIS2DW12_0_Probe+0x138>)
 8006ac8:	4a26      	ldr	r2, [pc, #152]	; (8006b64 <LIS2DW12_0_Probe+0x130>)
 8006aca:	605a      	str	r2, [r3, #4]
    /* The second cast (void *) is added to bypass Misra R11.3 rule */
    MotionDrv[IKS01A3_LIS2DW12_0] = (MOTION_SENSOR_CommonDrv_t *)(void *)&LIS2DW12_COMMON_Driver;
 8006acc:	4b28      	ldr	r3, [pc, #160]	; (8006b70 <LIS2DW12_0_Probe+0x13c>)
 8006ace:	4a29      	ldr	r2, [pc, #164]	; (8006b74 <LIS2DW12_0_Probe+0x140>)
 8006ad0:	605a      	str	r2, [r3, #4]

    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_ACCELERO) == MOTION_ACCELERO) && (cap.Acc == 1U))
 8006ad2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006ad4:	2b00      	cmp	r3, #0
 8006ad6:	d11e      	bne.n	8006b16 <LIS2DW12_0_Probe+0xe2>
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	f003 0302 	and.w	r3, r3, #2
 8006ade:	2b00      	cmp	r3, #0
 8006ae0:	d019      	beq.n	8006b16 <LIS2DW12_0_Probe+0xe2>
 8006ae2:	7b3b      	ldrb	r3, [r7, #12]
 8006ae4:	2b01      	cmp	r3, #1
 8006ae6:	d116      	bne.n	8006b16 <LIS2DW12_0_Probe+0xe2>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      MotionFuncDrv[IKS01A3_LIS2DW12_0][FunctionIndex[MOTION_ACCELERO]] = (MOTION_SENSOR_FuncDrv_t *)(
 8006ae8:	4b23      	ldr	r3, [pc, #140]	; (8006b78 <LIS2DW12_0_Probe+0x144>)
 8006aea:	689b      	ldr	r3, [r3, #8]
 8006aec:	4a23      	ldr	r2, [pc, #140]	; (8006b7c <LIS2DW12_0_Probe+0x148>)
 8006aee:	3303      	adds	r3, #3
 8006af0:	4923      	ldr	r1, [pc, #140]	; (8006b80 <LIS2DW12_0_Probe+0x14c>)
 8006af2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                                                                            void *)&LIS2DW12_ACC_Driver;

      if (MotionDrv[IKS01A3_LIS2DW12_0]->Init(MotionCompObj[IKS01A3_LIS2DW12_0]) != LIS2DW12_OK)
 8006af6:	4b1e      	ldr	r3, [pc, #120]	; (8006b70 <LIS2DW12_0_Probe+0x13c>)
 8006af8:	685b      	ldr	r3, [r3, #4]
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	4a1b      	ldr	r2, [pc, #108]	; (8006b6c <LIS2DW12_0_Probe+0x138>)
 8006afe:	6852      	ldr	r2, [r2, #4]
 8006b00:	4610      	mov	r0, r2
 8006b02:	4798      	blx	r3
 8006b04:	4603      	mov	r3, r0
 8006b06:	2b00      	cmp	r3, #0
 8006b08:	d003      	beq.n	8006b12 <LIS2DW12_0_Probe+0xde>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8006b0a:	f06f 0304 	mvn.w	r3, #4
 8006b0e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006b10:	e001      	b.n	8006b16 <LIS2DW12_0_Probe+0xe2>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 8006b12:	2300      	movs	r3, #0
 8006b14:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_GYRO) == MOTION_GYRO))
 8006b16:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006b18:	2b00      	cmp	r3, #0
 8006b1a:	d107      	bne.n	8006b2c <LIS2DW12_0_Probe+0xf8>
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	f003 0301 	and.w	r3, r3, #1
 8006b22:	2b00      	cmp	r3, #0
 8006b24:	d002      	beq.n	8006b2c <LIS2DW12_0_Probe+0xf8>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8006b26:	f06f 0304 	mvn.w	r3, #4
 8006b2a:	64fb      	str	r3, [r7, #76]	; 0x4c
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_MAGNETO) == MOTION_MAGNETO))
 8006b2c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006b2e:	2b00      	cmp	r3, #0
 8006b30:	d107      	bne.n	8006b42 <LIS2DW12_0_Probe+0x10e>
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	f003 0304 	and.w	r3, r3, #4
 8006b38:	2b00      	cmp	r3, #0
 8006b3a:	d002      	beq.n	8006b42 <LIS2DW12_0_Probe+0x10e>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8006b3c:	f06f 0304 	mvn.w	r3, #4
 8006b40:	64fb      	str	r3, [r7, #76]	; 0x4c
    }
  }
  return ret;
 8006b42:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
}
 8006b44:	4618      	mov	r0, r3
 8006b46:	3750      	adds	r7, #80	; 0x50
 8006b48:	46bd      	mov	sp, r7
 8006b4a:	bd80      	pop	{r7, pc}
 8006b4c:	080019b1 	.word	0x080019b1
 8006b50:	08001a15 	.word	0x08001a15
 8006b54:	08001ac9 	.word	0x08001ac9
 8006b58:	08001a65 	.word	0x08001a65
 8006b5c:	08001b2d 	.word	0x08001b2d
 8006b60:	08006db9 	.word	0x08006db9
 8006b64:	20016e00 	.word	0x20016e00
 8006b68:	20016dbc 	.word	0x20016dbc
 8006b6c:	20016d80 	.word	0x20016d80
 8006b70:	20016db0 	.word	0x20016db0
 8006b74:	20000008 	.word	0x20000008
 8006b78:	200000c8 	.word	0x200000c8
 8006b7c:	20016d8c 	.word	0x20016d8c
 8006b80:	20000018 	.word	0x20000018

08006b84 <LIS2MDL_0_Probe>:
/**
  * @brief  Register Bus IOs for instance 1 if component ID is OK
  * @retval BSP status
  */
static int32_t LIS2MDL_0_Probe(uint32_t Functions)
{
 8006b84:	b580      	push	{r7, lr}
 8006b86:	b094      	sub	sp, #80	; 0x50
 8006b88:	af00      	add	r7, sp, #0
 8006b8a:	6078      	str	r0, [r7, #4]
  LIS2MDL_IO_t            io_ctx;
  uint8_t                 id;
  static LIS2MDL_Object_t lis2mdl_obj_0;
  LIS2MDL_Capabilities_t  cap;
  int32_t                 ret = BSP_ERROR_NONE;
 8006b8c:	2300      	movs	r3, #0
 8006b8e:	64fb      	str	r3, [r7, #76]	; 0x4c

  /* Configure the accelero driver */
  io_ctx.BusType     = LIS2MDL_I2C_BUS; /* I2C */
 8006b90:	2300      	movs	r3, #0
 8006b92:	637b      	str	r3, [r7, #52]	; 0x34
  io_ctx.Address     = LIS2MDL_I2C_ADD;
 8006b94:	233d      	movs	r3, #61	; 0x3d
 8006b96:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  io_ctx.Init        = IKS01A3_I2C_Init;
 8006b9a:	4b40      	ldr	r3, [pc, #256]	; (8006c9c <LIS2MDL_0_Probe+0x118>)
 8006b9c:	62fb      	str	r3, [r7, #44]	; 0x2c
  io_ctx.DeInit      = IKS01A3_I2C_DeInit;
 8006b9e:	4b40      	ldr	r3, [pc, #256]	; (8006ca0 <LIS2MDL_0_Probe+0x11c>)
 8006ba0:	633b      	str	r3, [r7, #48]	; 0x30
  io_ctx.ReadReg     = IKS01A3_I2C_ReadReg;
 8006ba2:	4b40      	ldr	r3, [pc, #256]	; (8006ca4 <LIS2MDL_0_Probe+0x120>)
 8006ba4:	643b      	str	r3, [r7, #64]	; 0x40
  io_ctx.WriteReg    = IKS01A3_I2C_WriteReg;
 8006ba6:	4b40      	ldr	r3, [pc, #256]	; (8006ca8 <LIS2MDL_0_Probe+0x124>)
 8006ba8:	63fb      	str	r3, [r7, #60]	; 0x3c
  io_ctx.GetTick     = IKS01A3_GetTick;
 8006baa:	4b40      	ldr	r3, [pc, #256]	; (8006cac <LIS2MDL_0_Probe+0x128>)
 8006bac:	647b      	str	r3, [r7, #68]	; 0x44
  io_ctx.Delay       = IKS01A3_Delay;
 8006bae:	4b40      	ldr	r3, [pc, #256]	; (8006cb0 <LIS2MDL_0_Probe+0x12c>)
 8006bb0:	64bb      	str	r3, [r7, #72]	; 0x48

  if (LIS2MDL_RegisterBusIO(&lis2mdl_obj_0, &io_ctx) != LIS2MDL_OK)
 8006bb2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8006bb6:	4619      	mov	r1, r3
 8006bb8:	483e      	ldr	r0, [pc, #248]	; (8006cb4 <LIS2MDL_0_Probe+0x130>)
 8006bba:	f7fc fc1f 	bl	80033fc <LIS2MDL_RegisterBusIO>
 8006bbe:	4603      	mov	r3, r0
 8006bc0:	2b00      	cmp	r3, #0
 8006bc2:	d003      	beq.n	8006bcc <LIS2MDL_0_Probe+0x48>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8006bc4:	f06f 0306 	mvn.w	r3, #6
 8006bc8:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006bca:	e062      	b.n	8006c92 <LIS2MDL_0_Probe+0x10e>
  }
  else if (LIS2MDL_ReadID(&lis2mdl_obj_0, &id) != LIS2MDL_OK)
 8006bcc:	f107 032b 	add.w	r3, r7, #43	; 0x2b
 8006bd0:	4619      	mov	r1, r3
 8006bd2:	4838      	ldr	r0, [pc, #224]	; (8006cb4 <LIS2MDL_0_Probe+0x130>)
 8006bd4:	f7fc fd2e 	bl	8003634 <LIS2MDL_ReadID>
 8006bd8:	4603      	mov	r3, r0
 8006bda:	2b00      	cmp	r3, #0
 8006bdc:	d003      	beq.n	8006be6 <LIS2MDL_0_Probe+0x62>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8006bde:	f06f 0306 	mvn.w	r3, #6
 8006be2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006be4:	e055      	b.n	8006c92 <LIS2MDL_0_Probe+0x10e>
  }
  else if (id != LIS2MDL_ID)
 8006be6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8006bea:	2b40      	cmp	r3, #64	; 0x40
 8006bec:	d003      	beq.n	8006bf6 <LIS2MDL_0_Probe+0x72>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8006bee:	f06f 0306 	mvn.w	r3, #6
 8006bf2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006bf4:	e04d      	b.n	8006c92 <LIS2MDL_0_Probe+0x10e>
  }
  else
  {
    (void)LIS2MDL_GetCapabilities(&lis2mdl_obj_0, &cap);
 8006bf6:	f107 030c 	add.w	r3, r7, #12
 8006bfa:	4619      	mov	r1, r3
 8006bfc:	482d      	ldr	r0, [pc, #180]	; (8006cb4 <LIS2MDL_0_Probe+0x130>)
 8006bfe:	f7fc fd3f 	bl	8003680 <LIS2MDL_GetCapabilities>
    MotionCtx[IKS01A3_LIS2MDL_0].Functions = ((uint32_t)cap.Gyro) | ((uint32_t)cap.Acc << 1) | ((uint32_t)cap.Magneto << 2);
 8006c02:	7b7b      	ldrb	r3, [r7, #13]
 8006c04:	461a      	mov	r2, r3
 8006c06:	7b3b      	ldrb	r3, [r7, #12]
 8006c08:	005b      	lsls	r3, r3, #1
 8006c0a:	431a      	orrs	r2, r3
 8006c0c:	7bbb      	ldrb	r3, [r7, #14]
 8006c0e:	009b      	lsls	r3, r3, #2
 8006c10:	4313      	orrs	r3, r2
 8006c12:	4a29      	ldr	r2, [pc, #164]	; (8006cb8 <LIS2MDL_0_Probe+0x134>)
 8006c14:	6093      	str	r3, [r2, #8]

    MotionCompObj[IKS01A3_LIS2MDL_0] = &lis2mdl_obj_0;
 8006c16:	4b29      	ldr	r3, [pc, #164]	; (8006cbc <LIS2MDL_0_Probe+0x138>)
 8006c18:	4a26      	ldr	r2, [pc, #152]	; (8006cb4 <LIS2MDL_0_Probe+0x130>)
 8006c1a:	609a      	str	r2, [r3, #8]
    /* The second cast (void *) is added to bypass Misra R11.3 rule */
    MotionDrv[IKS01A3_LIS2MDL_0] = (MOTION_SENSOR_CommonDrv_t *)(void *)&LIS2MDL_COMMON_Driver;
 8006c1c:	4b28      	ldr	r3, [pc, #160]	; (8006cc0 <LIS2MDL_0_Probe+0x13c>)
 8006c1e:	4a29      	ldr	r2, [pc, #164]	; (8006cc4 <LIS2MDL_0_Probe+0x140>)
 8006c20:	609a      	str	r2, [r3, #8]

    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_MAGNETO) == MOTION_MAGNETO) && (cap.Magneto == 1U))
 8006c22:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006c24:	2b00      	cmp	r3, #0
 8006c26:	d11e      	bne.n	8006c66 <LIS2MDL_0_Probe+0xe2>
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	f003 0304 	and.w	r3, r3, #4
 8006c2e:	2b00      	cmp	r3, #0
 8006c30:	d019      	beq.n	8006c66 <LIS2MDL_0_Probe+0xe2>
 8006c32:	7bbb      	ldrb	r3, [r7, #14]
 8006c34:	2b01      	cmp	r3, #1
 8006c36:	d116      	bne.n	8006c66 <LIS2MDL_0_Probe+0xe2>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      MotionFuncDrv[IKS01A3_LIS2MDL_0][FunctionIndex[MOTION_MAGNETO]] = (MOTION_SENSOR_FuncDrv_t *)(
 8006c38:	4b23      	ldr	r3, [pc, #140]	; (8006cc8 <LIS2MDL_0_Probe+0x144>)
 8006c3a:	691b      	ldr	r3, [r3, #16]
 8006c3c:	4a23      	ldr	r2, [pc, #140]	; (8006ccc <LIS2MDL_0_Probe+0x148>)
 8006c3e:	3306      	adds	r3, #6
 8006c40:	4923      	ldr	r1, [pc, #140]	; (8006cd0 <LIS2MDL_0_Probe+0x14c>)
 8006c42:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                                                                          void *)&LIS2MDL_MAG_Driver;

      if (MotionDrv[IKS01A3_LIS2MDL_0]->Init(MotionCompObj[IKS01A3_LIS2MDL_0]) != LIS2MDL_OK)
 8006c46:	4b1e      	ldr	r3, [pc, #120]	; (8006cc0 <LIS2MDL_0_Probe+0x13c>)
 8006c48:	689b      	ldr	r3, [r3, #8]
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	4a1b      	ldr	r2, [pc, #108]	; (8006cbc <LIS2MDL_0_Probe+0x138>)
 8006c4e:	6892      	ldr	r2, [r2, #8]
 8006c50:	4610      	mov	r0, r2
 8006c52:	4798      	blx	r3
 8006c54:	4603      	mov	r3, r0
 8006c56:	2b00      	cmp	r3, #0
 8006c58:	d003      	beq.n	8006c62 <LIS2MDL_0_Probe+0xde>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8006c5a:	f06f 0304 	mvn.w	r3, #4
 8006c5e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006c60:	e001      	b.n	8006c66 <LIS2MDL_0_Probe+0xe2>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 8006c62:	2300      	movs	r3, #0
 8006c64:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_ACCELERO) == MOTION_ACCELERO))
 8006c66:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006c68:	2b00      	cmp	r3, #0
 8006c6a:	d107      	bne.n	8006c7c <LIS2MDL_0_Probe+0xf8>
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	f003 0302 	and.w	r3, r3, #2
 8006c72:	2b00      	cmp	r3, #0
 8006c74:	d002      	beq.n	8006c7c <LIS2MDL_0_Probe+0xf8>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8006c76:	f06f 0304 	mvn.w	r3, #4
 8006c7a:	64fb      	str	r3, [r7, #76]	; 0x4c
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_GYRO) == MOTION_GYRO))
 8006c7c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006c7e:	2b00      	cmp	r3, #0
 8006c80:	d107      	bne.n	8006c92 <LIS2MDL_0_Probe+0x10e>
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	f003 0301 	and.w	r3, r3, #1
 8006c88:	2b00      	cmp	r3, #0
 8006c8a:	d002      	beq.n	8006c92 <LIS2MDL_0_Probe+0x10e>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8006c8c:	f06f 0304 	mvn.w	r3, #4
 8006c90:	64fb      	str	r3, [r7, #76]	; 0x4c
    }
  }
  return ret;
 8006c92:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
}
 8006c94:	4618      	mov	r0, r3
 8006c96:	3750      	adds	r7, #80	; 0x50
 8006c98:	46bd      	mov	sp, r7
 8006c9a:	bd80      	pop	{r7, pc}
 8006c9c:	080019b1 	.word	0x080019b1
 8006ca0:	08001a15 	.word	0x08001a15
 8006ca4:	08001ac9 	.word	0x08001ac9
 8006ca8:	08001a65 	.word	0x08001a65
 8006cac:	08001b2d 	.word	0x08001b2d
 8006cb0:	08006db9 	.word	0x08006db9
 8006cb4:	20016e3c 	.word	0x20016e3c
 8006cb8:	20016dbc 	.word	0x20016dbc
 8006cbc:	20016d80 	.word	0x20016d80
 8006cc0:	20016db0 	.word	0x20016db0
 8006cc4:	2000003c 	.word	0x2000003c
 8006cc8:	200000c8 	.word	0x200000c8
 8006ccc:	20016d8c 	.word	0x20016d8c
 8006cd0:	2000004c 	.word	0x2000004c

08006cd4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8006cd4:	b580      	push	{r7, lr}
 8006cd6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8006cd8:	4b0e      	ldr	r3, [pc, #56]	; (8006d14 <HAL_Init+0x40>)
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	4a0d      	ldr	r2, [pc, #52]	; (8006d14 <HAL_Init+0x40>)
 8006cde:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006ce2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8006ce4:	4b0b      	ldr	r3, [pc, #44]	; (8006d14 <HAL_Init+0x40>)
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	4a0a      	ldr	r2, [pc, #40]	; (8006d14 <HAL_Init+0x40>)
 8006cea:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8006cee:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8006cf0:	4b08      	ldr	r3, [pc, #32]	; (8006d14 <HAL_Init+0x40>)
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	4a07      	ldr	r2, [pc, #28]	; (8006d14 <HAL_Init+0x40>)
 8006cf6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006cfa:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8006cfc:	2003      	movs	r0, #3
 8006cfe:	f000 f94f 	bl	8006fa0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8006d02:	2000      	movs	r0, #0
 8006d04:	f000 f808 	bl	8006d18 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8006d08:	f7fa fcc4 	bl	8001694 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8006d0c:	2300      	movs	r3, #0
}
 8006d0e:	4618      	mov	r0, r3
 8006d10:	bd80      	pop	{r7, pc}
 8006d12:	bf00      	nop
 8006d14:	40023c00 	.word	0x40023c00

08006d18 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8006d18:	b580      	push	{r7, lr}
 8006d1a:	b082      	sub	sp, #8
 8006d1c:	af00      	add	r7, sp, #0
 8006d1e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8006d20:	4b12      	ldr	r3, [pc, #72]	; (8006d6c <HAL_InitTick+0x54>)
 8006d22:	681a      	ldr	r2, [r3, #0]
 8006d24:	4b12      	ldr	r3, [pc, #72]	; (8006d70 <HAL_InitTick+0x58>)
 8006d26:	781b      	ldrb	r3, [r3, #0]
 8006d28:	4619      	mov	r1, r3
 8006d2a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8006d2e:	fbb3 f3f1 	udiv	r3, r3, r1
 8006d32:	fbb2 f3f3 	udiv	r3, r2, r3
 8006d36:	4618      	mov	r0, r3
 8006d38:	f000 f967 	bl	800700a <HAL_SYSTICK_Config>
 8006d3c:	4603      	mov	r3, r0
 8006d3e:	2b00      	cmp	r3, #0
 8006d40:	d001      	beq.n	8006d46 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8006d42:	2301      	movs	r3, #1
 8006d44:	e00e      	b.n	8006d64 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	2b0f      	cmp	r3, #15
 8006d4a:	d80a      	bhi.n	8006d62 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8006d4c:	2200      	movs	r2, #0
 8006d4e:	6879      	ldr	r1, [r7, #4]
 8006d50:	f04f 30ff 	mov.w	r0, #4294967295
 8006d54:	f000 f92f 	bl	8006fb6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8006d58:	4a06      	ldr	r2, [pc, #24]	; (8006d74 <HAL_InitTick+0x5c>)
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8006d5e:	2300      	movs	r3, #0
 8006d60:	e000      	b.n	8006d64 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8006d62:	2301      	movs	r3, #1
}
 8006d64:	4618      	mov	r0, r3
 8006d66:	3708      	adds	r7, #8
 8006d68:	46bd      	mov	sp, r7
 8006d6a:	bd80      	pop	{r7, pc}
 8006d6c:	20000004 	.word	0x20000004
 8006d70:	200000e0 	.word	0x200000e0
 8006d74:	200000dc 	.word	0x200000dc

08006d78 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8006d78:	b480      	push	{r7}
 8006d7a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8006d7c:	4b06      	ldr	r3, [pc, #24]	; (8006d98 <HAL_IncTick+0x20>)
 8006d7e:	781b      	ldrb	r3, [r3, #0]
 8006d80:	461a      	mov	r2, r3
 8006d82:	4b06      	ldr	r3, [pc, #24]	; (8006d9c <HAL_IncTick+0x24>)
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	4413      	add	r3, r2
 8006d88:	4a04      	ldr	r2, [pc, #16]	; (8006d9c <HAL_IncTick+0x24>)
 8006d8a:	6013      	str	r3, [r2, #0]
}
 8006d8c:	bf00      	nop
 8006d8e:	46bd      	mov	sp, r7
 8006d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d94:	4770      	bx	lr
 8006d96:	bf00      	nop
 8006d98:	200000e0 	.word	0x200000e0
 8006d9c:	20016e70 	.word	0x20016e70

08006da0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8006da0:	b480      	push	{r7}
 8006da2:	af00      	add	r7, sp, #0
  return uwTick;
 8006da4:	4b03      	ldr	r3, [pc, #12]	; (8006db4 <HAL_GetTick+0x14>)
 8006da6:	681b      	ldr	r3, [r3, #0]
}
 8006da8:	4618      	mov	r0, r3
 8006daa:	46bd      	mov	sp, r7
 8006dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006db0:	4770      	bx	lr
 8006db2:	bf00      	nop
 8006db4:	20016e70 	.word	0x20016e70

08006db8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8006db8:	b580      	push	{r7, lr}
 8006dba:	b084      	sub	sp, #16
 8006dbc:	af00      	add	r7, sp, #0
 8006dbe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8006dc0:	f7ff ffee 	bl	8006da0 <HAL_GetTick>
 8006dc4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8006dca:	68fb      	ldr	r3, [r7, #12]
 8006dcc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006dd0:	d005      	beq.n	8006dde <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8006dd2:	4b0a      	ldr	r3, [pc, #40]	; (8006dfc <HAL_Delay+0x44>)
 8006dd4:	781b      	ldrb	r3, [r3, #0]
 8006dd6:	461a      	mov	r2, r3
 8006dd8:	68fb      	ldr	r3, [r7, #12]
 8006dda:	4413      	add	r3, r2
 8006ddc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8006dde:	bf00      	nop
 8006de0:	f7ff ffde 	bl	8006da0 <HAL_GetTick>
 8006de4:	4602      	mov	r2, r0
 8006de6:	68bb      	ldr	r3, [r7, #8]
 8006de8:	1ad3      	subs	r3, r2, r3
 8006dea:	68fa      	ldr	r2, [r7, #12]
 8006dec:	429a      	cmp	r2, r3
 8006dee:	d8f7      	bhi.n	8006de0 <HAL_Delay+0x28>
  {
  }
}
 8006df0:	bf00      	nop
 8006df2:	bf00      	nop
 8006df4:	3710      	adds	r7, #16
 8006df6:	46bd      	mov	sp, r7
 8006df8:	bd80      	pop	{r7, pc}
 8006dfa:	bf00      	nop
 8006dfc:	200000e0 	.word	0x200000e0

08006e00 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006e00:	b480      	push	{r7}
 8006e02:	b085      	sub	sp, #20
 8006e04:	af00      	add	r7, sp, #0
 8006e06:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	f003 0307 	and.w	r3, r3, #7
 8006e0e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8006e10:	4b0c      	ldr	r3, [pc, #48]	; (8006e44 <__NVIC_SetPriorityGrouping+0x44>)
 8006e12:	68db      	ldr	r3, [r3, #12]
 8006e14:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8006e16:	68ba      	ldr	r2, [r7, #8]
 8006e18:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8006e1c:	4013      	ands	r3, r2
 8006e1e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8006e20:	68fb      	ldr	r3, [r7, #12]
 8006e22:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8006e24:	68bb      	ldr	r3, [r7, #8]
 8006e26:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8006e28:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8006e2c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006e30:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8006e32:	4a04      	ldr	r2, [pc, #16]	; (8006e44 <__NVIC_SetPriorityGrouping+0x44>)
 8006e34:	68bb      	ldr	r3, [r7, #8]
 8006e36:	60d3      	str	r3, [r2, #12]
}
 8006e38:	bf00      	nop
 8006e3a:	3714      	adds	r7, #20
 8006e3c:	46bd      	mov	sp, r7
 8006e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e42:	4770      	bx	lr
 8006e44:	e000ed00 	.word	0xe000ed00

08006e48 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8006e48:	b480      	push	{r7}
 8006e4a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8006e4c:	4b04      	ldr	r3, [pc, #16]	; (8006e60 <__NVIC_GetPriorityGrouping+0x18>)
 8006e4e:	68db      	ldr	r3, [r3, #12]
 8006e50:	0a1b      	lsrs	r3, r3, #8
 8006e52:	f003 0307 	and.w	r3, r3, #7
}
 8006e56:	4618      	mov	r0, r3
 8006e58:	46bd      	mov	sp, r7
 8006e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e5e:	4770      	bx	lr
 8006e60:	e000ed00 	.word	0xe000ed00

08006e64 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006e64:	b480      	push	{r7}
 8006e66:	b083      	sub	sp, #12
 8006e68:	af00      	add	r7, sp, #0
 8006e6a:	4603      	mov	r3, r0
 8006e6c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006e6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006e72:	2b00      	cmp	r3, #0
 8006e74:	db0b      	blt.n	8006e8e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006e76:	79fb      	ldrb	r3, [r7, #7]
 8006e78:	f003 021f 	and.w	r2, r3, #31
 8006e7c:	4907      	ldr	r1, [pc, #28]	; (8006e9c <__NVIC_EnableIRQ+0x38>)
 8006e7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006e82:	095b      	lsrs	r3, r3, #5
 8006e84:	2001      	movs	r0, #1
 8006e86:	fa00 f202 	lsl.w	r2, r0, r2
 8006e8a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8006e8e:	bf00      	nop
 8006e90:	370c      	adds	r7, #12
 8006e92:	46bd      	mov	sp, r7
 8006e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e98:	4770      	bx	lr
 8006e9a:	bf00      	nop
 8006e9c:	e000e100 	.word	0xe000e100

08006ea0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8006ea0:	b480      	push	{r7}
 8006ea2:	b083      	sub	sp, #12
 8006ea4:	af00      	add	r7, sp, #0
 8006ea6:	4603      	mov	r3, r0
 8006ea8:	6039      	str	r1, [r7, #0]
 8006eaa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006eac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006eb0:	2b00      	cmp	r3, #0
 8006eb2:	db0a      	blt.n	8006eca <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006eb4:	683b      	ldr	r3, [r7, #0]
 8006eb6:	b2da      	uxtb	r2, r3
 8006eb8:	490c      	ldr	r1, [pc, #48]	; (8006eec <__NVIC_SetPriority+0x4c>)
 8006eba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006ebe:	0112      	lsls	r2, r2, #4
 8006ec0:	b2d2      	uxtb	r2, r2
 8006ec2:	440b      	add	r3, r1
 8006ec4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8006ec8:	e00a      	b.n	8006ee0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006eca:	683b      	ldr	r3, [r7, #0]
 8006ecc:	b2da      	uxtb	r2, r3
 8006ece:	4908      	ldr	r1, [pc, #32]	; (8006ef0 <__NVIC_SetPriority+0x50>)
 8006ed0:	79fb      	ldrb	r3, [r7, #7]
 8006ed2:	f003 030f 	and.w	r3, r3, #15
 8006ed6:	3b04      	subs	r3, #4
 8006ed8:	0112      	lsls	r2, r2, #4
 8006eda:	b2d2      	uxtb	r2, r2
 8006edc:	440b      	add	r3, r1
 8006ede:	761a      	strb	r2, [r3, #24]
}
 8006ee0:	bf00      	nop
 8006ee2:	370c      	adds	r7, #12
 8006ee4:	46bd      	mov	sp, r7
 8006ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eea:	4770      	bx	lr
 8006eec:	e000e100 	.word	0xe000e100
 8006ef0:	e000ed00 	.word	0xe000ed00

08006ef4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006ef4:	b480      	push	{r7}
 8006ef6:	b089      	sub	sp, #36	; 0x24
 8006ef8:	af00      	add	r7, sp, #0
 8006efa:	60f8      	str	r0, [r7, #12]
 8006efc:	60b9      	str	r1, [r7, #8]
 8006efe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8006f00:	68fb      	ldr	r3, [r7, #12]
 8006f02:	f003 0307 	and.w	r3, r3, #7
 8006f06:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006f08:	69fb      	ldr	r3, [r7, #28]
 8006f0a:	f1c3 0307 	rsb	r3, r3, #7
 8006f0e:	2b04      	cmp	r3, #4
 8006f10:	bf28      	it	cs
 8006f12:	2304      	movcs	r3, #4
 8006f14:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8006f16:	69fb      	ldr	r3, [r7, #28]
 8006f18:	3304      	adds	r3, #4
 8006f1a:	2b06      	cmp	r3, #6
 8006f1c:	d902      	bls.n	8006f24 <NVIC_EncodePriority+0x30>
 8006f1e:	69fb      	ldr	r3, [r7, #28]
 8006f20:	3b03      	subs	r3, #3
 8006f22:	e000      	b.n	8006f26 <NVIC_EncodePriority+0x32>
 8006f24:	2300      	movs	r3, #0
 8006f26:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006f28:	f04f 32ff 	mov.w	r2, #4294967295
 8006f2c:	69bb      	ldr	r3, [r7, #24]
 8006f2e:	fa02 f303 	lsl.w	r3, r2, r3
 8006f32:	43da      	mvns	r2, r3
 8006f34:	68bb      	ldr	r3, [r7, #8]
 8006f36:	401a      	ands	r2, r3
 8006f38:	697b      	ldr	r3, [r7, #20]
 8006f3a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8006f3c:	f04f 31ff 	mov.w	r1, #4294967295
 8006f40:	697b      	ldr	r3, [r7, #20]
 8006f42:	fa01 f303 	lsl.w	r3, r1, r3
 8006f46:	43d9      	mvns	r1, r3
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006f4c:	4313      	orrs	r3, r2
         );
}
 8006f4e:	4618      	mov	r0, r3
 8006f50:	3724      	adds	r7, #36	; 0x24
 8006f52:	46bd      	mov	sp, r7
 8006f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f58:	4770      	bx	lr
	...

08006f5c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8006f5c:	b580      	push	{r7, lr}
 8006f5e:	b082      	sub	sp, #8
 8006f60:	af00      	add	r7, sp, #0
 8006f62:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	3b01      	subs	r3, #1
 8006f68:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006f6c:	d301      	bcc.n	8006f72 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8006f6e:	2301      	movs	r3, #1
 8006f70:	e00f      	b.n	8006f92 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8006f72:	4a0a      	ldr	r2, [pc, #40]	; (8006f9c <SysTick_Config+0x40>)
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	3b01      	subs	r3, #1
 8006f78:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8006f7a:	210f      	movs	r1, #15
 8006f7c:	f04f 30ff 	mov.w	r0, #4294967295
 8006f80:	f7ff ff8e 	bl	8006ea0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8006f84:	4b05      	ldr	r3, [pc, #20]	; (8006f9c <SysTick_Config+0x40>)
 8006f86:	2200      	movs	r2, #0
 8006f88:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8006f8a:	4b04      	ldr	r3, [pc, #16]	; (8006f9c <SysTick_Config+0x40>)
 8006f8c:	2207      	movs	r2, #7
 8006f8e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8006f90:	2300      	movs	r3, #0
}
 8006f92:	4618      	mov	r0, r3
 8006f94:	3708      	adds	r7, #8
 8006f96:	46bd      	mov	sp, r7
 8006f98:	bd80      	pop	{r7, pc}
 8006f9a:	bf00      	nop
 8006f9c:	e000e010 	.word	0xe000e010

08006fa0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006fa0:	b580      	push	{r7, lr}
 8006fa2:	b082      	sub	sp, #8
 8006fa4:	af00      	add	r7, sp, #0
 8006fa6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8006fa8:	6878      	ldr	r0, [r7, #4]
 8006faa:	f7ff ff29 	bl	8006e00 <__NVIC_SetPriorityGrouping>
}
 8006fae:	bf00      	nop
 8006fb0:	3708      	adds	r7, #8
 8006fb2:	46bd      	mov	sp, r7
 8006fb4:	bd80      	pop	{r7, pc}

08006fb6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8006fb6:	b580      	push	{r7, lr}
 8006fb8:	b086      	sub	sp, #24
 8006fba:	af00      	add	r7, sp, #0
 8006fbc:	4603      	mov	r3, r0
 8006fbe:	60b9      	str	r1, [r7, #8]
 8006fc0:	607a      	str	r2, [r7, #4]
 8006fc2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8006fc4:	2300      	movs	r3, #0
 8006fc6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8006fc8:	f7ff ff3e 	bl	8006e48 <__NVIC_GetPriorityGrouping>
 8006fcc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8006fce:	687a      	ldr	r2, [r7, #4]
 8006fd0:	68b9      	ldr	r1, [r7, #8]
 8006fd2:	6978      	ldr	r0, [r7, #20]
 8006fd4:	f7ff ff8e 	bl	8006ef4 <NVIC_EncodePriority>
 8006fd8:	4602      	mov	r2, r0
 8006fda:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006fde:	4611      	mov	r1, r2
 8006fe0:	4618      	mov	r0, r3
 8006fe2:	f7ff ff5d 	bl	8006ea0 <__NVIC_SetPriority>
}
 8006fe6:	bf00      	nop
 8006fe8:	3718      	adds	r7, #24
 8006fea:	46bd      	mov	sp, r7
 8006fec:	bd80      	pop	{r7, pc}

08006fee <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006fee:	b580      	push	{r7, lr}
 8006ff0:	b082      	sub	sp, #8
 8006ff2:	af00      	add	r7, sp, #0
 8006ff4:	4603      	mov	r3, r0
 8006ff6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8006ff8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006ffc:	4618      	mov	r0, r3
 8006ffe:	f7ff ff31 	bl	8006e64 <__NVIC_EnableIRQ>
}
 8007002:	bf00      	nop
 8007004:	3708      	adds	r7, #8
 8007006:	46bd      	mov	sp, r7
 8007008:	bd80      	pop	{r7, pc}

0800700a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800700a:	b580      	push	{r7, lr}
 800700c:	b082      	sub	sp, #8
 800700e:	af00      	add	r7, sp, #0
 8007010:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8007012:	6878      	ldr	r0, [r7, #4]
 8007014:	f7ff ffa2 	bl	8006f5c <SysTick_Config>
 8007018:	4603      	mov	r3, r0
}
 800701a:	4618      	mov	r0, r3
 800701c:	3708      	adds	r7, #8
 800701e:	46bd      	mov	sp, r7
 8007020:	bd80      	pop	{r7, pc}
	...

08007024 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8007024:	b480      	push	{r7}
 8007026:	b089      	sub	sp, #36	; 0x24
 8007028:	af00      	add	r7, sp, #0
 800702a:	6078      	str	r0, [r7, #4]
 800702c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800702e:	2300      	movs	r3, #0
 8007030:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8007032:	2300      	movs	r3, #0
 8007034:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8007036:	2300      	movs	r3, #0
 8007038:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800703a:	2300      	movs	r3, #0
 800703c:	61fb      	str	r3, [r7, #28]
 800703e:	e159      	b.n	80072f4 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8007040:	2201      	movs	r2, #1
 8007042:	69fb      	ldr	r3, [r7, #28]
 8007044:	fa02 f303 	lsl.w	r3, r2, r3
 8007048:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800704a:	683b      	ldr	r3, [r7, #0]
 800704c:	681b      	ldr	r3, [r3, #0]
 800704e:	697a      	ldr	r2, [r7, #20]
 8007050:	4013      	ands	r3, r2
 8007052:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8007054:	693a      	ldr	r2, [r7, #16]
 8007056:	697b      	ldr	r3, [r7, #20]
 8007058:	429a      	cmp	r2, r3
 800705a:	f040 8148 	bne.w	80072ee <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800705e:	683b      	ldr	r3, [r7, #0]
 8007060:	685b      	ldr	r3, [r3, #4]
 8007062:	f003 0303 	and.w	r3, r3, #3
 8007066:	2b01      	cmp	r3, #1
 8007068:	d005      	beq.n	8007076 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800706a:	683b      	ldr	r3, [r7, #0]
 800706c:	685b      	ldr	r3, [r3, #4]
 800706e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8007072:	2b02      	cmp	r3, #2
 8007074:	d130      	bne.n	80070d8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	689b      	ldr	r3, [r3, #8]
 800707a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800707c:	69fb      	ldr	r3, [r7, #28]
 800707e:	005b      	lsls	r3, r3, #1
 8007080:	2203      	movs	r2, #3
 8007082:	fa02 f303 	lsl.w	r3, r2, r3
 8007086:	43db      	mvns	r3, r3
 8007088:	69ba      	ldr	r2, [r7, #24]
 800708a:	4013      	ands	r3, r2
 800708c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800708e:	683b      	ldr	r3, [r7, #0]
 8007090:	68da      	ldr	r2, [r3, #12]
 8007092:	69fb      	ldr	r3, [r7, #28]
 8007094:	005b      	lsls	r3, r3, #1
 8007096:	fa02 f303 	lsl.w	r3, r2, r3
 800709a:	69ba      	ldr	r2, [r7, #24]
 800709c:	4313      	orrs	r3, r2
 800709e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	69ba      	ldr	r2, [r7, #24]
 80070a4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	685b      	ldr	r3, [r3, #4]
 80070aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80070ac:	2201      	movs	r2, #1
 80070ae:	69fb      	ldr	r3, [r7, #28]
 80070b0:	fa02 f303 	lsl.w	r3, r2, r3
 80070b4:	43db      	mvns	r3, r3
 80070b6:	69ba      	ldr	r2, [r7, #24]
 80070b8:	4013      	ands	r3, r2
 80070ba:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80070bc:	683b      	ldr	r3, [r7, #0]
 80070be:	685b      	ldr	r3, [r3, #4]
 80070c0:	091b      	lsrs	r3, r3, #4
 80070c2:	f003 0201 	and.w	r2, r3, #1
 80070c6:	69fb      	ldr	r3, [r7, #28]
 80070c8:	fa02 f303 	lsl.w	r3, r2, r3
 80070cc:	69ba      	ldr	r2, [r7, #24]
 80070ce:	4313      	orrs	r3, r2
 80070d0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	69ba      	ldr	r2, [r7, #24]
 80070d6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80070d8:	683b      	ldr	r3, [r7, #0]
 80070da:	685b      	ldr	r3, [r3, #4]
 80070dc:	f003 0303 	and.w	r3, r3, #3
 80070e0:	2b03      	cmp	r3, #3
 80070e2:	d017      	beq.n	8007114 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	68db      	ldr	r3, [r3, #12]
 80070e8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80070ea:	69fb      	ldr	r3, [r7, #28]
 80070ec:	005b      	lsls	r3, r3, #1
 80070ee:	2203      	movs	r2, #3
 80070f0:	fa02 f303 	lsl.w	r3, r2, r3
 80070f4:	43db      	mvns	r3, r3
 80070f6:	69ba      	ldr	r2, [r7, #24]
 80070f8:	4013      	ands	r3, r2
 80070fa:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80070fc:	683b      	ldr	r3, [r7, #0]
 80070fe:	689a      	ldr	r2, [r3, #8]
 8007100:	69fb      	ldr	r3, [r7, #28]
 8007102:	005b      	lsls	r3, r3, #1
 8007104:	fa02 f303 	lsl.w	r3, r2, r3
 8007108:	69ba      	ldr	r2, [r7, #24]
 800710a:	4313      	orrs	r3, r2
 800710c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	69ba      	ldr	r2, [r7, #24]
 8007112:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8007114:	683b      	ldr	r3, [r7, #0]
 8007116:	685b      	ldr	r3, [r3, #4]
 8007118:	f003 0303 	and.w	r3, r3, #3
 800711c:	2b02      	cmp	r3, #2
 800711e:	d123      	bne.n	8007168 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8007120:	69fb      	ldr	r3, [r7, #28]
 8007122:	08da      	lsrs	r2, r3, #3
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	3208      	adds	r2, #8
 8007128:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800712c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800712e:	69fb      	ldr	r3, [r7, #28]
 8007130:	f003 0307 	and.w	r3, r3, #7
 8007134:	009b      	lsls	r3, r3, #2
 8007136:	220f      	movs	r2, #15
 8007138:	fa02 f303 	lsl.w	r3, r2, r3
 800713c:	43db      	mvns	r3, r3
 800713e:	69ba      	ldr	r2, [r7, #24]
 8007140:	4013      	ands	r3, r2
 8007142:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8007144:	683b      	ldr	r3, [r7, #0]
 8007146:	691a      	ldr	r2, [r3, #16]
 8007148:	69fb      	ldr	r3, [r7, #28]
 800714a:	f003 0307 	and.w	r3, r3, #7
 800714e:	009b      	lsls	r3, r3, #2
 8007150:	fa02 f303 	lsl.w	r3, r2, r3
 8007154:	69ba      	ldr	r2, [r7, #24]
 8007156:	4313      	orrs	r3, r2
 8007158:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800715a:	69fb      	ldr	r3, [r7, #28]
 800715c:	08da      	lsrs	r2, r3, #3
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	3208      	adds	r2, #8
 8007162:	69b9      	ldr	r1, [r7, #24]
 8007164:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800716e:	69fb      	ldr	r3, [r7, #28]
 8007170:	005b      	lsls	r3, r3, #1
 8007172:	2203      	movs	r2, #3
 8007174:	fa02 f303 	lsl.w	r3, r2, r3
 8007178:	43db      	mvns	r3, r3
 800717a:	69ba      	ldr	r2, [r7, #24]
 800717c:	4013      	ands	r3, r2
 800717e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8007180:	683b      	ldr	r3, [r7, #0]
 8007182:	685b      	ldr	r3, [r3, #4]
 8007184:	f003 0203 	and.w	r2, r3, #3
 8007188:	69fb      	ldr	r3, [r7, #28]
 800718a:	005b      	lsls	r3, r3, #1
 800718c:	fa02 f303 	lsl.w	r3, r2, r3
 8007190:	69ba      	ldr	r2, [r7, #24]
 8007192:	4313      	orrs	r3, r2
 8007194:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	69ba      	ldr	r2, [r7, #24]
 800719a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800719c:	683b      	ldr	r3, [r7, #0]
 800719e:	685b      	ldr	r3, [r3, #4]
 80071a0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80071a4:	2b00      	cmp	r3, #0
 80071a6:	f000 80a2 	beq.w	80072ee <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80071aa:	2300      	movs	r3, #0
 80071ac:	60fb      	str	r3, [r7, #12]
 80071ae:	4b57      	ldr	r3, [pc, #348]	; (800730c <HAL_GPIO_Init+0x2e8>)
 80071b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80071b2:	4a56      	ldr	r2, [pc, #344]	; (800730c <HAL_GPIO_Init+0x2e8>)
 80071b4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80071b8:	6453      	str	r3, [r2, #68]	; 0x44
 80071ba:	4b54      	ldr	r3, [pc, #336]	; (800730c <HAL_GPIO_Init+0x2e8>)
 80071bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80071be:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80071c2:	60fb      	str	r3, [r7, #12]
 80071c4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80071c6:	4a52      	ldr	r2, [pc, #328]	; (8007310 <HAL_GPIO_Init+0x2ec>)
 80071c8:	69fb      	ldr	r3, [r7, #28]
 80071ca:	089b      	lsrs	r3, r3, #2
 80071cc:	3302      	adds	r3, #2
 80071ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80071d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80071d4:	69fb      	ldr	r3, [r7, #28]
 80071d6:	f003 0303 	and.w	r3, r3, #3
 80071da:	009b      	lsls	r3, r3, #2
 80071dc:	220f      	movs	r2, #15
 80071de:	fa02 f303 	lsl.w	r3, r2, r3
 80071e2:	43db      	mvns	r3, r3
 80071e4:	69ba      	ldr	r2, [r7, #24]
 80071e6:	4013      	ands	r3, r2
 80071e8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	4a49      	ldr	r2, [pc, #292]	; (8007314 <HAL_GPIO_Init+0x2f0>)
 80071ee:	4293      	cmp	r3, r2
 80071f0:	d019      	beq.n	8007226 <HAL_GPIO_Init+0x202>
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	4a48      	ldr	r2, [pc, #288]	; (8007318 <HAL_GPIO_Init+0x2f4>)
 80071f6:	4293      	cmp	r3, r2
 80071f8:	d013      	beq.n	8007222 <HAL_GPIO_Init+0x1fe>
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	4a47      	ldr	r2, [pc, #284]	; (800731c <HAL_GPIO_Init+0x2f8>)
 80071fe:	4293      	cmp	r3, r2
 8007200:	d00d      	beq.n	800721e <HAL_GPIO_Init+0x1fa>
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	4a46      	ldr	r2, [pc, #280]	; (8007320 <HAL_GPIO_Init+0x2fc>)
 8007206:	4293      	cmp	r3, r2
 8007208:	d007      	beq.n	800721a <HAL_GPIO_Init+0x1f6>
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	4a45      	ldr	r2, [pc, #276]	; (8007324 <HAL_GPIO_Init+0x300>)
 800720e:	4293      	cmp	r3, r2
 8007210:	d101      	bne.n	8007216 <HAL_GPIO_Init+0x1f2>
 8007212:	2304      	movs	r3, #4
 8007214:	e008      	b.n	8007228 <HAL_GPIO_Init+0x204>
 8007216:	2307      	movs	r3, #7
 8007218:	e006      	b.n	8007228 <HAL_GPIO_Init+0x204>
 800721a:	2303      	movs	r3, #3
 800721c:	e004      	b.n	8007228 <HAL_GPIO_Init+0x204>
 800721e:	2302      	movs	r3, #2
 8007220:	e002      	b.n	8007228 <HAL_GPIO_Init+0x204>
 8007222:	2301      	movs	r3, #1
 8007224:	e000      	b.n	8007228 <HAL_GPIO_Init+0x204>
 8007226:	2300      	movs	r3, #0
 8007228:	69fa      	ldr	r2, [r7, #28]
 800722a:	f002 0203 	and.w	r2, r2, #3
 800722e:	0092      	lsls	r2, r2, #2
 8007230:	4093      	lsls	r3, r2
 8007232:	69ba      	ldr	r2, [r7, #24]
 8007234:	4313      	orrs	r3, r2
 8007236:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8007238:	4935      	ldr	r1, [pc, #212]	; (8007310 <HAL_GPIO_Init+0x2ec>)
 800723a:	69fb      	ldr	r3, [r7, #28]
 800723c:	089b      	lsrs	r3, r3, #2
 800723e:	3302      	adds	r3, #2
 8007240:	69ba      	ldr	r2, [r7, #24]
 8007242:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8007246:	4b38      	ldr	r3, [pc, #224]	; (8007328 <HAL_GPIO_Init+0x304>)
 8007248:	689b      	ldr	r3, [r3, #8]
 800724a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800724c:	693b      	ldr	r3, [r7, #16]
 800724e:	43db      	mvns	r3, r3
 8007250:	69ba      	ldr	r2, [r7, #24]
 8007252:	4013      	ands	r3, r2
 8007254:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8007256:	683b      	ldr	r3, [r7, #0]
 8007258:	685b      	ldr	r3, [r3, #4]
 800725a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800725e:	2b00      	cmp	r3, #0
 8007260:	d003      	beq.n	800726a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8007262:	69ba      	ldr	r2, [r7, #24]
 8007264:	693b      	ldr	r3, [r7, #16]
 8007266:	4313      	orrs	r3, r2
 8007268:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800726a:	4a2f      	ldr	r2, [pc, #188]	; (8007328 <HAL_GPIO_Init+0x304>)
 800726c:	69bb      	ldr	r3, [r7, #24]
 800726e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8007270:	4b2d      	ldr	r3, [pc, #180]	; (8007328 <HAL_GPIO_Init+0x304>)
 8007272:	68db      	ldr	r3, [r3, #12]
 8007274:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007276:	693b      	ldr	r3, [r7, #16]
 8007278:	43db      	mvns	r3, r3
 800727a:	69ba      	ldr	r2, [r7, #24]
 800727c:	4013      	ands	r3, r2
 800727e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8007280:	683b      	ldr	r3, [r7, #0]
 8007282:	685b      	ldr	r3, [r3, #4]
 8007284:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007288:	2b00      	cmp	r3, #0
 800728a:	d003      	beq.n	8007294 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 800728c:	69ba      	ldr	r2, [r7, #24]
 800728e:	693b      	ldr	r3, [r7, #16]
 8007290:	4313      	orrs	r3, r2
 8007292:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8007294:	4a24      	ldr	r2, [pc, #144]	; (8007328 <HAL_GPIO_Init+0x304>)
 8007296:	69bb      	ldr	r3, [r7, #24]
 8007298:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800729a:	4b23      	ldr	r3, [pc, #140]	; (8007328 <HAL_GPIO_Init+0x304>)
 800729c:	685b      	ldr	r3, [r3, #4]
 800729e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80072a0:	693b      	ldr	r3, [r7, #16]
 80072a2:	43db      	mvns	r3, r3
 80072a4:	69ba      	ldr	r2, [r7, #24]
 80072a6:	4013      	ands	r3, r2
 80072a8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80072aa:	683b      	ldr	r3, [r7, #0]
 80072ac:	685b      	ldr	r3, [r3, #4]
 80072ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80072b2:	2b00      	cmp	r3, #0
 80072b4:	d003      	beq.n	80072be <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80072b6:	69ba      	ldr	r2, [r7, #24]
 80072b8:	693b      	ldr	r3, [r7, #16]
 80072ba:	4313      	orrs	r3, r2
 80072bc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80072be:	4a1a      	ldr	r2, [pc, #104]	; (8007328 <HAL_GPIO_Init+0x304>)
 80072c0:	69bb      	ldr	r3, [r7, #24]
 80072c2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80072c4:	4b18      	ldr	r3, [pc, #96]	; (8007328 <HAL_GPIO_Init+0x304>)
 80072c6:	681b      	ldr	r3, [r3, #0]
 80072c8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80072ca:	693b      	ldr	r3, [r7, #16]
 80072cc:	43db      	mvns	r3, r3
 80072ce:	69ba      	ldr	r2, [r7, #24]
 80072d0:	4013      	ands	r3, r2
 80072d2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80072d4:	683b      	ldr	r3, [r7, #0]
 80072d6:	685b      	ldr	r3, [r3, #4]
 80072d8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80072dc:	2b00      	cmp	r3, #0
 80072de:	d003      	beq.n	80072e8 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80072e0:	69ba      	ldr	r2, [r7, #24]
 80072e2:	693b      	ldr	r3, [r7, #16]
 80072e4:	4313      	orrs	r3, r2
 80072e6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80072e8:	4a0f      	ldr	r2, [pc, #60]	; (8007328 <HAL_GPIO_Init+0x304>)
 80072ea:	69bb      	ldr	r3, [r7, #24]
 80072ec:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80072ee:	69fb      	ldr	r3, [r7, #28]
 80072f0:	3301      	adds	r3, #1
 80072f2:	61fb      	str	r3, [r7, #28]
 80072f4:	69fb      	ldr	r3, [r7, #28]
 80072f6:	2b0f      	cmp	r3, #15
 80072f8:	f67f aea2 	bls.w	8007040 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80072fc:	bf00      	nop
 80072fe:	bf00      	nop
 8007300:	3724      	adds	r7, #36	; 0x24
 8007302:	46bd      	mov	sp, r7
 8007304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007308:	4770      	bx	lr
 800730a:	bf00      	nop
 800730c:	40023800 	.word	0x40023800
 8007310:	40013800 	.word	0x40013800
 8007314:	40020000 	.word	0x40020000
 8007318:	40020400 	.word	0x40020400
 800731c:	40020800 	.word	0x40020800
 8007320:	40020c00 	.word	0x40020c00
 8007324:	40021000 	.word	0x40021000
 8007328:	40013c00 	.word	0x40013c00

0800732c <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 800732c:	b480      	push	{r7}
 800732e:	b087      	sub	sp, #28
 8007330:	af00      	add	r7, sp, #0
 8007332:	6078      	str	r0, [r7, #4]
 8007334:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8007336:	2300      	movs	r3, #0
 8007338:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 800733a:	2300      	movs	r3, #0
 800733c:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 800733e:	2300      	movs	r3, #0
 8007340:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8007342:	2300      	movs	r3, #0
 8007344:	617b      	str	r3, [r7, #20]
 8007346:	e0bb      	b.n	80074c0 <HAL_GPIO_DeInit+0x194>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8007348:	2201      	movs	r2, #1
 800734a:	697b      	ldr	r3, [r7, #20]
 800734c:	fa02 f303 	lsl.w	r3, r2, r3
 8007350:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 8007352:	683a      	ldr	r2, [r7, #0]
 8007354:	693b      	ldr	r3, [r7, #16]
 8007356:	4013      	ands	r3, r2
 8007358:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 800735a:	68fa      	ldr	r2, [r7, #12]
 800735c:	693b      	ldr	r3, [r7, #16]
 800735e:	429a      	cmp	r2, r3
 8007360:	f040 80ab 	bne.w	80074ba <HAL_GPIO_DeInit+0x18e>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 8007364:	4a5c      	ldr	r2, [pc, #368]	; (80074d8 <HAL_GPIO_DeInit+0x1ac>)
 8007366:	697b      	ldr	r3, [r7, #20]
 8007368:	089b      	lsrs	r3, r3, #2
 800736a:	3302      	adds	r3, #2
 800736c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007370:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 8007372:	697b      	ldr	r3, [r7, #20]
 8007374:	f003 0303 	and.w	r3, r3, #3
 8007378:	009b      	lsls	r3, r3, #2
 800737a:	220f      	movs	r2, #15
 800737c:	fa02 f303 	lsl.w	r3, r2, r3
 8007380:	68ba      	ldr	r2, [r7, #8]
 8007382:	4013      	ands	r3, r2
 8007384:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	4a54      	ldr	r2, [pc, #336]	; (80074dc <HAL_GPIO_DeInit+0x1b0>)
 800738a:	4293      	cmp	r3, r2
 800738c:	d019      	beq.n	80073c2 <HAL_GPIO_DeInit+0x96>
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	4a53      	ldr	r2, [pc, #332]	; (80074e0 <HAL_GPIO_DeInit+0x1b4>)
 8007392:	4293      	cmp	r3, r2
 8007394:	d013      	beq.n	80073be <HAL_GPIO_DeInit+0x92>
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	4a52      	ldr	r2, [pc, #328]	; (80074e4 <HAL_GPIO_DeInit+0x1b8>)
 800739a:	4293      	cmp	r3, r2
 800739c:	d00d      	beq.n	80073ba <HAL_GPIO_DeInit+0x8e>
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	4a51      	ldr	r2, [pc, #324]	; (80074e8 <HAL_GPIO_DeInit+0x1bc>)
 80073a2:	4293      	cmp	r3, r2
 80073a4:	d007      	beq.n	80073b6 <HAL_GPIO_DeInit+0x8a>
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	4a50      	ldr	r2, [pc, #320]	; (80074ec <HAL_GPIO_DeInit+0x1c0>)
 80073aa:	4293      	cmp	r3, r2
 80073ac:	d101      	bne.n	80073b2 <HAL_GPIO_DeInit+0x86>
 80073ae:	2304      	movs	r3, #4
 80073b0:	e008      	b.n	80073c4 <HAL_GPIO_DeInit+0x98>
 80073b2:	2307      	movs	r3, #7
 80073b4:	e006      	b.n	80073c4 <HAL_GPIO_DeInit+0x98>
 80073b6:	2303      	movs	r3, #3
 80073b8:	e004      	b.n	80073c4 <HAL_GPIO_DeInit+0x98>
 80073ba:	2302      	movs	r3, #2
 80073bc:	e002      	b.n	80073c4 <HAL_GPIO_DeInit+0x98>
 80073be:	2301      	movs	r3, #1
 80073c0:	e000      	b.n	80073c4 <HAL_GPIO_DeInit+0x98>
 80073c2:	2300      	movs	r3, #0
 80073c4:	697a      	ldr	r2, [r7, #20]
 80073c6:	f002 0203 	and.w	r2, r2, #3
 80073ca:	0092      	lsls	r2, r2, #2
 80073cc:	4093      	lsls	r3, r2
 80073ce:	68ba      	ldr	r2, [r7, #8]
 80073d0:	429a      	cmp	r2, r3
 80073d2:	d132      	bne.n	800743a <HAL_GPIO_DeInit+0x10e>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 80073d4:	4b46      	ldr	r3, [pc, #280]	; (80074f0 <HAL_GPIO_DeInit+0x1c4>)
 80073d6:	681a      	ldr	r2, [r3, #0]
 80073d8:	68fb      	ldr	r3, [r7, #12]
 80073da:	43db      	mvns	r3, r3
 80073dc:	4944      	ldr	r1, [pc, #272]	; (80074f0 <HAL_GPIO_DeInit+0x1c4>)
 80073de:	4013      	ands	r3, r2
 80073e0:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 80073e2:	4b43      	ldr	r3, [pc, #268]	; (80074f0 <HAL_GPIO_DeInit+0x1c4>)
 80073e4:	685a      	ldr	r2, [r3, #4]
 80073e6:	68fb      	ldr	r3, [r7, #12]
 80073e8:	43db      	mvns	r3, r3
 80073ea:	4941      	ldr	r1, [pc, #260]	; (80074f0 <HAL_GPIO_DeInit+0x1c4>)
 80073ec:	4013      	ands	r3, r2
 80073ee:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 80073f0:	4b3f      	ldr	r3, [pc, #252]	; (80074f0 <HAL_GPIO_DeInit+0x1c4>)
 80073f2:	68da      	ldr	r2, [r3, #12]
 80073f4:	68fb      	ldr	r3, [r7, #12]
 80073f6:	43db      	mvns	r3, r3
 80073f8:	493d      	ldr	r1, [pc, #244]	; (80074f0 <HAL_GPIO_DeInit+0x1c4>)
 80073fa:	4013      	ands	r3, r2
 80073fc:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 80073fe:	4b3c      	ldr	r3, [pc, #240]	; (80074f0 <HAL_GPIO_DeInit+0x1c4>)
 8007400:	689a      	ldr	r2, [r3, #8]
 8007402:	68fb      	ldr	r3, [r7, #12]
 8007404:	43db      	mvns	r3, r3
 8007406:	493a      	ldr	r1, [pc, #232]	; (80074f0 <HAL_GPIO_DeInit+0x1c4>)
 8007408:	4013      	ands	r3, r2
 800740a:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 800740c:	697b      	ldr	r3, [r7, #20]
 800740e:	f003 0303 	and.w	r3, r3, #3
 8007412:	009b      	lsls	r3, r3, #2
 8007414:	220f      	movs	r2, #15
 8007416:	fa02 f303 	lsl.w	r3, r2, r3
 800741a:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 800741c:	4a2e      	ldr	r2, [pc, #184]	; (80074d8 <HAL_GPIO_DeInit+0x1ac>)
 800741e:	697b      	ldr	r3, [r7, #20]
 8007420:	089b      	lsrs	r3, r3, #2
 8007422:	3302      	adds	r3, #2
 8007424:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8007428:	68bb      	ldr	r3, [r7, #8]
 800742a:	43da      	mvns	r2, r3
 800742c:	482a      	ldr	r0, [pc, #168]	; (80074d8 <HAL_GPIO_DeInit+0x1ac>)
 800742e:	697b      	ldr	r3, [r7, #20]
 8007430:	089b      	lsrs	r3, r3, #2
 8007432:	400a      	ands	r2, r1
 8007434:	3302      	adds	r3, #2
 8007436:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	681a      	ldr	r2, [r3, #0]
 800743e:	697b      	ldr	r3, [r7, #20]
 8007440:	005b      	lsls	r3, r3, #1
 8007442:	2103      	movs	r1, #3
 8007444:	fa01 f303 	lsl.w	r3, r1, r3
 8007448:	43db      	mvns	r3, r3
 800744a:	401a      	ands	r2, r3
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8007450:	697b      	ldr	r3, [r7, #20]
 8007452:	08da      	lsrs	r2, r3, #3
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	3208      	adds	r2, #8
 8007458:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800745c:	697b      	ldr	r3, [r7, #20]
 800745e:	f003 0307 	and.w	r3, r3, #7
 8007462:	009b      	lsls	r3, r3, #2
 8007464:	220f      	movs	r2, #15
 8007466:	fa02 f303 	lsl.w	r3, r2, r3
 800746a:	43db      	mvns	r3, r3
 800746c:	697a      	ldr	r2, [r7, #20]
 800746e:	08d2      	lsrs	r2, r2, #3
 8007470:	4019      	ands	r1, r3
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	3208      	adds	r2, #8
 8007476:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	68da      	ldr	r2, [r3, #12]
 800747e:	697b      	ldr	r3, [r7, #20]
 8007480:	005b      	lsls	r3, r3, #1
 8007482:	2103      	movs	r1, #3
 8007484:	fa01 f303 	lsl.w	r3, r1, r3
 8007488:	43db      	mvns	r3, r3
 800748a:	401a      	ands	r2, r3
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	685a      	ldr	r2, [r3, #4]
 8007494:	2101      	movs	r1, #1
 8007496:	697b      	ldr	r3, [r7, #20]
 8007498:	fa01 f303 	lsl.w	r3, r1, r3
 800749c:	43db      	mvns	r3, r3
 800749e:	401a      	ands	r2, r3
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	689a      	ldr	r2, [r3, #8]
 80074a8:	697b      	ldr	r3, [r7, #20]
 80074aa:	005b      	lsls	r3, r3, #1
 80074ac:	2103      	movs	r1, #3
 80074ae:	fa01 f303 	lsl.w	r3, r1, r3
 80074b2:	43db      	mvns	r3, r3
 80074b4:	401a      	ands	r2, r3
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80074ba:	697b      	ldr	r3, [r7, #20]
 80074bc:	3301      	adds	r3, #1
 80074be:	617b      	str	r3, [r7, #20]
 80074c0:	697b      	ldr	r3, [r7, #20]
 80074c2:	2b0f      	cmp	r3, #15
 80074c4:	f67f af40 	bls.w	8007348 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 80074c8:	bf00      	nop
 80074ca:	bf00      	nop
 80074cc:	371c      	adds	r7, #28
 80074ce:	46bd      	mov	sp, r7
 80074d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074d4:	4770      	bx	lr
 80074d6:	bf00      	nop
 80074d8:	40013800 	.word	0x40013800
 80074dc:	40020000 	.word	0x40020000
 80074e0:	40020400 	.word	0x40020400
 80074e4:	40020800 	.word	0x40020800
 80074e8:	40020c00 	.word	0x40020c00
 80074ec:	40021000 	.word	0x40021000
 80074f0:	40013c00 	.word	0x40013c00

080074f4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80074f4:	b480      	push	{r7}
 80074f6:	b083      	sub	sp, #12
 80074f8:	af00      	add	r7, sp, #0
 80074fa:	6078      	str	r0, [r7, #4]
 80074fc:	460b      	mov	r3, r1
 80074fe:	807b      	strh	r3, [r7, #2]
 8007500:	4613      	mov	r3, r2
 8007502:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8007504:	787b      	ldrb	r3, [r7, #1]
 8007506:	2b00      	cmp	r3, #0
 8007508:	d003      	beq.n	8007512 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800750a:	887a      	ldrh	r2, [r7, #2]
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8007510:	e003      	b.n	800751a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8007512:	887b      	ldrh	r3, [r7, #2]
 8007514:	041a      	lsls	r2, r3, #16
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	619a      	str	r2, [r3, #24]
}
 800751a:	bf00      	nop
 800751c:	370c      	adds	r7, #12
 800751e:	46bd      	mov	sp, r7
 8007520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007524:	4770      	bx	lr
	...

08007528 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8007528:	b580      	push	{r7, lr}
 800752a:	b082      	sub	sp, #8
 800752c:	af00      	add	r7, sp, #0
 800752e:	4603      	mov	r3, r0
 8007530:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8007532:	4b08      	ldr	r3, [pc, #32]	; (8007554 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8007534:	695a      	ldr	r2, [r3, #20]
 8007536:	88fb      	ldrh	r3, [r7, #6]
 8007538:	4013      	ands	r3, r2
 800753a:	2b00      	cmp	r3, #0
 800753c:	d006      	beq.n	800754c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800753e:	4a05      	ldr	r2, [pc, #20]	; (8007554 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8007540:	88fb      	ldrh	r3, [r7, #6]
 8007542:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8007544:	88fb      	ldrh	r3, [r7, #6]
 8007546:	4618      	mov	r0, r3
 8007548:	f000 f806 	bl	8007558 <HAL_GPIO_EXTI_Callback>
  }
}
 800754c:	bf00      	nop
 800754e:	3708      	adds	r7, #8
 8007550:	46bd      	mov	sp, r7
 8007552:	bd80      	pop	{r7, pc}
 8007554:	40013c00 	.word	0x40013c00

08007558 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8007558:	b480      	push	{r7}
 800755a:	b083      	sub	sp, #12
 800755c:	af00      	add	r7, sp, #0
 800755e:	4603      	mov	r3, r0
 8007560:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8007562:	bf00      	nop
 8007564:	370c      	adds	r7, #12
 8007566:	46bd      	mov	sp, r7
 8007568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800756c:	4770      	bx	lr
	...

08007570 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8007570:	b580      	push	{r7, lr}
 8007572:	b084      	sub	sp, #16
 8007574:	af00      	add	r7, sp, #0
 8007576:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	2b00      	cmp	r3, #0
 800757c:	d101      	bne.n	8007582 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800757e:	2301      	movs	r3, #1
 8007580:	e12b      	b.n	80077da <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007588:	b2db      	uxtb	r3, r3
 800758a:	2b00      	cmp	r3, #0
 800758c:	d106      	bne.n	800759c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	2200      	movs	r2, #0
 8007592:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8007596:	6878      	ldr	r0, [r7, #4]
 8007598:	f000 f95d 	bl	8007856 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	2224      	movs	r2, #36	; 0x24
 80075a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	681b      	ldr	r3, [r3, #0]
 80075a8:	681a      	ldr	r2, [r3, #0]
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	681b      	ldr	r3, [r3, #0]
 80075ae:	f022 0201 	bic.w	r2, r2, #1
 80075b2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	681b      	ldr	r3, [r3, #0]
 80075b8:	681a      	ldr	r2, [r3, #0]
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	681b      	ldr	r3, [r3, #0]
 80075be:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80075c2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	681b      	ldr	r3, [r3, #0]
 80075c8:	681a      	ldr	r2, [r3, #0]
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	681b      	ldr	r3, [r3, #0]
 80075ce:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80075d2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80075d4:	f001 fc5a 	bl	8008e8c <HAL_RCC_GetPCLK1Freq>
 80075d8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	685b      	ldr	r3, [r3, #4]
 80075de:	4a81      	ldr	r2, [pc, #516]	; (80077e4 <HAL_I2C_Init+0x274>)
 80075e0:	4293      	cmp	r3, r2
 80075e2:	d807      	bhi.n	80075f4 <HAL_I2C_Init+0x84>
 80075e4:	68fb      	ldr	r3, [r7, #12]
 80075e6:	4a80      	ldr	r2, [pc, #512]	; (80077e8 <HAL_I2C_Init+0x278>)
 80075e8:	4293      	cmp	r3, r2
 80075ea:	bf94      	ite	ls
 80075ec:	2301      	movls	r3, #1
 80075ee:	2300      	movhi	r3, #0
 80075f0:	b2db      	uxtb	r3, r3
 80075f2:	e006      	b.n	8007602 <HAL_I2C_Init+0x92>
 80075f4:	68fb      	ldr	r3, [r7, #12]
 80075f6:	4a7d      	ldr	r2, [pc, #500]	; (80077ec <HAL_I2C_Init+0x27c>)
 80075f8:	4293      	cmp	r3, r2
 80075fa:	bf94      	ite	ls
 80075fc:	2301      	movls	r3, #1
 80075fe:	2300      	movhi	r3, #0
 8007600:	b2db      	uxtb	r3, r3
 8007602:	2b00      	cmp	r3, #0
 8007604:	d001      	beq.n	800760a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8007606:	2301      	movs	r3, #1
 8007608:	e0e7      	b.n	80077da <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800760a:	68fb      	ldr	r3, [r7, #12]
 800760c:	4a78      	ldr	r2, [pc, #480]	; (80077f0 <HAL_I2C_Init+0x280>)
 800760e:	fba2 2303 	umull	r2, r3, r2, r3
 8007612:	0c9b      	lsrs	r3, r3, #18
 8007614:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	681b      	ldr	r3, [r3, #0]
 800761a:	685b      	ldr	r3, [r3, #4]
 800761c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	681b      	ldr	r3, [r3, #0]
 8007624:	68ba      	ldr	r2, [r7, #8]
 8007626:	430a      	orrs	r2, r1
 8007628:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	681b      	ldr	r3, [r3, #0]
 800762e:	6a1b      	ldr	r3, [r3, #32]
 8007630:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	685b      	ldr	r3, [r3, #4]
 8007638:	4a6a      	ldr	r2, [pc, #424]	; (80077e4 <HAL_I2C_Init+0x274>)
 800763a:	4293      	cmp	r3, r2
 800763c:	d802      	bhi.n	8007644 <HAL_I2C_Init+0xd4>
 800763e:	68bb      	ldr	r3, [r7, #8]
 8007640:	3301      	adds	r3, #1
 8007642:	e009      	b.n	8007658 <HAL_I2C_Init+0xe8>
 8007644:	68bb      	ldr	r3, [r7, #8]
 8007646:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800764a:	fb02 f303 	mul.w	r3, r2, r3
 800764e:	4a69      	ldr	r2, [pc, #420]	; (80077f4 <HAL_I2C_Init+0x284>)
 8007650:	fba2 2303 	umull	r2, r3, r2, r3
 8007654:	099b      	lsrs	r3, r3, #6
 8007656:	3301      	adds	r3, #1
 8007658:	687a      	ldr	r2, [r7, #4]
 800765a:	6812      	ldr	r2, [r2, #0]
 800765c:	430b      	orrs	r3, r1
 800765e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	681b      	ldr	r3, [r3, #0]
 8007664:	69db      	ldr	r3, [r3, #28]
 8007666:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800766a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	685b      	ldr	r3, [r3, #4]
 8007672:	495c      	ldr	r1, [pc, #368]	; (80077e4 <HAL_I2C_Init+0x274>)
 8007674:	428b      	cmp	r3, r1
 8007676:	d819      	bhi.n	80076ac <HAL_I2C_Init+0x13c>
 8007678:	68fb      	ldr	r3, [r7, #12]
 800767a:	1e59      	subs	r1, r3, #1
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	685b      	ldr	r3, [r3, #4]
 8007680:	005b      	lsls	r3, r3, #1
 8007682:	fbb1 f3f3 	udiv	r3, r1, r3
 8007686:	1c59      	adds	r1, r3, #1
 8007688:	f640 73fc 	movw	r3, #4092	; 0xffc
 800768c:	400b      	ands	r3, r1
 800768e:	2b00      	cmp	r3, #0
 8007690:	d00a      	beq.n	80076a8 <HAL_I2C_Init+0x138>
 8007692:	68fb      	ldr	r3, [r7, #12]
 8007694:	1e59      	subs	r1, r3, #1
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	685b      	ldr	r3, [r3, #4]
 800769a:	005b      	lsls	r3, r3, #1
 800769c:	fbb1 f3f3 	udiv	r3, r1, r3
 80076a0:	3301      	adds	r3, #1
 80076a2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80076a6:	e051      	b.n	800774c <HAL_I2C_Init+0x1dc>
 80076a8:	2304      	movs	r3, #4
 80076aa:	e04f      	b.n	800774c <HAL_I2C_Init+0x1dc>
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	689b      	ldr	r3, [r3, #8]
 80076b0:	2b00      	cmp	r3, #0
 80076b2:	d111      	bne.n	80076d8 <HAL_I2C_Init+0x168>
 80076b4:	68fb      	ldr	r3, [r7, #12]
 80076b6:	1e58      	subs	r0, r3, #1
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	6859      	ldr	r1, [r3, #4]
 80076bc:	460b      	mov	r3, r1
 80076be:	005b      	lsls	r3, r3, #1
 80076c0:	440b      	add	r3, r1
 80076c2:	fbb0 f3f3 	udiv	r3, r0, r3
 80076c6:	3301      	adds	r3, #1
 80076c8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80076cc:	2b00      	cmp	r3, #0
 80076ce:	bf0c      	ite	eq
 80076d0:	2301      	moveq	r3, #1
 80076d2:	2300      	movne	r3, #0
 80076d4:	b2db      	uxtb	r3, r3
 80076d6:	e012      	b.n	80076fe <HAL_I2C_Init+0x18e>
 80076d8:	68fb      	ldr	r3, [r7, #12]
 80076da:	1e58      	subs	r0, r3, #1
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	6859      	ldr	r1, [r3, #4]
 80076e0:	460b      	mov	r3, r1
 80076e2:	009b      	lsls	r3, r3, #2
 80076e4:	440b      	add	r3, r1
 80076e6:	0099      	lsls	r1, r3, #2
 80076e8:	440b      	add	r3, r1
 80076ea:	fbb0 f3f3 	udiv	r3, r0, r3
 80076ee:	3301      	adds	r3, #1
 80076f0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80076f4:	2b00      	cmp	r3, #0
 80076f6:	bf0c      	ite	eq
 80076f8:	2301      	moveq	r3, #1
 80076fa:	2300      	movne	r3, #0
 80076fc:	b2db      	uxtb	r3, r3
 80076fe:	2b00      	cmp	r3, #0
 8007700:	d001      	beq.n	8007706 <HAL_I2C_Init+0x196>
 8007702:	2301      	movs	r3, #1
 8007704:	e022      	b.n	800774c <HAL_I2C_Init+0x1dc>
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	689b      	ldr	r3, [r3, #8]
 800770a:	2b00      	cmp	r3, #0
 800770c:	d10e      	bne.n	800772c <HAL_I2C_Init+0x1bc>
 800770e:	68fb      	ldr	r3, [r7, #12]
 8007710:	1e58      	subs	r0, r3, #1
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	6859      	ldr	r1, [r3, #4]
 8007716:	460b      	mov	r3, r1
 8007718:	005b      	lsls	r3, r3, #1
 800771a:	440b      	add	r3, r1
 800771c:	fbb0 f3f3 	udiv	r3, r0, r3
 8007720:	3301      	adds	r3, #1
 8007722:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007726:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800772a:	e00f      	b.n	800774c <HAL_I2C_Init+0x1dc>
 800772c:	68fb      	ldr	r3, [r7, #12]
 800772e:	1e58      	subs	r0, r3, #1
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	6859      	ldr	r1, [r3, #4]
 8007734:	460b      	mov	r3, r1
 8007736:	009b      	lsls	r3, r3, #2
 8007738:	440b      	add	r3, r1
 800773a:	0099      	lsls	r1, r3, #2
 800773c:	440b      	add	r3, r1
 800773e:	fbb0 f3f3 	udiv	r3, r0, r3
 8007742:	3301      	adds	r3, #1
 8007744:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007748:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800774c:	6879      	ldr	r1, [r7, #4]
 800774e:	6809      	ldr	r1, [r1, #0]
 8007750:	4313      	orrs	r3, r2
 8007752:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	681b      	ldr	r3, [r3, #0]
 8007758:	681b      	ldr	r3, [r3, #0]
 800775a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	69da      	ldr	r2, [r3, #28]
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	6a1b      	ldr	r3, [r3, #32]
 8007766:	431a      	orrs	r2, r3
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	681b      	ldr	r3, [r3, #0]
 800776c:	430a      	orrs	r2, r1
 800776e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	681b      	ldr	r3, [r3, #0]
 8007774:	689b      	ldr	r3, [r3, #8]
 8007776:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800777a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800777e:	687a      	ldr	r2, [r7, #4]
 8007780:	6911      	ldr	r1, [r2, #16]
 8007782:	687a      	ldr	r2, [r7, #4]
 8007784:	68d2      	ldr	r2, [r2, #12]
 8007786:	4311      	orrs	r1, r2
 8007788:	687a      	ldr	r2, [r7, #4]
 800778a:	6812      	ldr	r2, [r2, #0]
 800778c:	430b      	orrs	r3, r1
 800778e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	681b      	ldr	r3, [r3, #0]
 8007794:	68db      	ldr	r3, [r3, #12]
 8007796:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	695a      	ldr	r2, [r3, #20]
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	699b      	ldr	r3, [r3, #24]
 80077a2:	431a      	orrs	r2, r3
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	681b      	ldr	r3, [r3, #0]
 80077a8:	430a      	orrs	r2, r1
 80077aa:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	681b      	ldr	r3, [r3, #0]
 80077b0:	681a      	ldr	r2, [r3, #0]
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	681b      	ldr	r3, [r3, #0]
 80077b6:	f042 0201 	orr.w	r2, r2, #1
 80077ba:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	2200      	movs	r2, #0
 80077c0:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	2220      	movs	r2, #32
 80077c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	2200      	movs	r2, #0
 80077ce:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	2200      	movs	r2, #0
 80077d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80077d8:	2300      	movs	r3, #0
}
 80077da:	4618      	mov	r0, r3
 80077dc:	3710      	adds	r7, #16
 80077de:	46bd      	mov	sp, r7
 80077e0:	bd80      	pop	{r7, pc}
 80077e2:	bf00      	nop
 80077e4:	000186a0 	.word	0x000186a0
 80077e8:	001e847f 	.word	0x001e847f
 80077ec:	003d08ff 	.word	0x003d08ff
 80077f0:	431bde83 	.word	0x431bde83
 80077f4:	10624dd3 	.word	0x10624dd3

080077f8 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 80077f8:	b580      	push	{r7, lr}
 80077fa:	b082      	sub	sp, #8
 80077fc:	af00      	add	r7, sp, #0
 80077fe:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	2b00      	cmp	r3, #0
 8007804:	d101      	bne.n	800780a <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8007806:	2301      	movs	r3, #1
 8007808:	e021      	b.n	800784e <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	2224      	movs	r2, #36	; 0x24
 800780e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	681b      	ldr	r3, [r3, #0]
 8007816:	681a      	ldr	r2, [r3, #0]
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	681b      	ldr	r3, [r3, #0]
 800781c:	f022 0201 	bic.w	r2, r2, #1
 8007820:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8007822:	6878      	ldr	r0, [r7, #4]
 8007824:	f000 f821 	bl	800786a <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	2200      	movs	r2, #0
 800782c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State         = HAL_I2C_STATE_RESET;
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	2200      	movs	r2, #0
 8007832:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	2200      	movs	r2, #0
 800783a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	2200      	movs	r2, #0
 8007840:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	2200      	movs	r2, #0
 8007848:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800784c:	2300      	movs	r3, #0
}
 800784e:	4618      	mov	r0, r3
 8007850:	3708      	adds	r7, #8
 8007852:	46bd      	mov	sp, r7
 8007854:	bd80      	pop	{r7, pc}

08007856 <HAL_I2C_MspInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspInit(I2C_HandleTypeDef *hi2c)
{
 8007856:	b480      	push	{r7}
 8007858:	b083      	sub	sp, #12
 800785a:	af00      	add	r7, sp, #0
 800785c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspInit could be implemented in the user file
   */
}
 800785e:	bf00      	nop
 8007860:	370c      	adds	r7, #12
 8007862:	46bd      	mov	sp, r7
 8007864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007868:	4770      	bx	lr

0800786a <HAL_I2C_MspDeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspDeInit(I2C_HandleTypeDef *hi2c)
{
 800786a:	b480      	push	{r7}
 800786c:	b083      	sub	sp, #12
 800786e:	af00      	add	r7, sp, #0
 8007870:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspDeInit could be implemented in the user file
   */
}
 8007872:	bf00      	nop
 8007874:	370c      	adds	r7, #12
 8007876:	46bd      	mov	sp, r7
 8007878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800787c:	4770      	bx	lr
	...

08007880 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007880:	b580      	push	{r7, lr}
 8007882:	b088      	sub	sp, #32
 8007884:	af02      	add	r7, sp, #8
 8007886:	60f8      	str	r0, [r7, #12]
 8007888:	4608      	mov	r0, r1
 800788a:	4611      	mov	r1, r2
 800788c:	461a      	mov	r2, r3
 800788e:	4603      	mov	r3, r0
 8007890:	817b      	strh	r3, [r7, #10]
 8007892:	460b      	mov	r3, r1
 8007894:	813b      	strh	r3, [r7, #8]
 8007896:	4613      	mov	r3, r2
 8007898:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800789a:	f7ff fa81 	bl	8006da0 <HAL_GetTick>
 800789e:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80078a0:	68fb      	ldr	r3, [r7, #12]
 80078a2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80078a6:	b2db      	uxtb	r3, r3
 80078a8:	2b20      	cmp	r3, #32
 80078aa:	f040 80d9 	bne.w	8007a60 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80078ae:	697b      	ldr	r3, [r7, #20]
 80078b0:	9300      	str	r3, [sp, #0]
 80078b2:	2319      	movs	r3, #25
 80078b4:	2201      	movs	r2, #1
 80078b6:	496d      	ldr	r1, [pc, #436]	; (8007a6c <HAL_I2C_Mem_Write+0x1ec>)
 80078b8:	68f8      	ldr	r0, [r7, #12]
 80078ba:	f000 fc99 	bl	80081f0 <I2C_WaitOnFlagUntilTimeout>
 80078be:	4603      	mov	r3, r0
 80078c0:	2b00      	cmp	r3, #0
 80078c2:	d001      	beq.n	80078c8 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80078c4:	2302      	movs	r3, #2
 80078c6:	e0cc      	b.n	8007a62 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80078c8:	68fb      	ldr	r3, [r7, #12]
 80078ca:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80078ce:	2b01      	cmp	r3, #1
 80078d0:	d101      	bne.n	80078d6 <HAL_I2C_Mem_Write+0x56>
 80078d2:	2302      	movs	r3, #2
 80078d4:	e0c5      	b.n	8007a62 <HAL_I2C_Mem_Write+0x1e2>
 80078d6:	68fb      	ldr	r3, [r7, #12]
 80078d8:	2201      	movs	r2, #1
 80078da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80078de:	68fb      	ldr	r3, [r7, #12]
 80078e0:	681b      	ldr	r3, [r3, #0]
 80078e2:	681b      	ldr	r3, [r3, #0]
 80078e4:	f003 0301 	and.w	r3, r3, #1
 80078e8:	2b01      	cmp	r3, #1
 80078ea:	d007      	beq.n	80078fc <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80078ec:	68fb      	ldr	r3, [r7, #12]
 80078ee:	681b      	ldr	r3, [r3, #0]
 80078f0:	681a      	ldr	r2, [r3, #0]
 80078f2:	68fb      	ldr	r3, [r7, #12]
 80078f4:	681b      	ldr	r3, [r3, #0]
 80078f6:	f042 0201 	orr.w	r2, r2, #1
 80078fa:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80078fc:	68fb      	ldr	r3, [r7, #12]
 80078fe:	681b      	ldr	r3, [r3, #0]
 8007900:	681a      	ldr	r2, [r3, #0]
 8007902:	68fb      	ldr	r3, [r7, #12]
 8007904:	681b      	ldr	r3, [r3, #0]
 8007906:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800790a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800790c:	68fb      	ldr	r3, [r7, #12]
 800790e:	2221      	movs	r2, #33	; 0x21
 8007910:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8007914:	68fb      	ldr	r3, [r7, #12]
 8007916:	2240      	movs	r2, #64	; 0x40
 8007918:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800791c:	68fb      	ldr	r3, [r7, #12]
 800791e:	2200      	movs	r2, #0
 8007920:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8007922:	68fb      	ldr	r3, [r7, #12]
 8007924:	6a3a      	ldr	r2, [r7, #32]
 8007926:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8007928:	68fb      	ldr	r3, [r7, #12]
 800792a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800792c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800792e:	68fb      	ldr	r3, [r7, #12]
 8007930:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007932:	b29a      	uxth	r2, r3
 8007934:	68fb      	ldr	r3, [r7, #12]
 8007936:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8007938:	68fb      	ldr	r3, [r7, #12]
 800793a:	4a4d      	ldr	r2, [pc, #308]	; (8007a70 <HAL_I2C_Mem_Write+0x1f0>)
 800793c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800793e:	88f8      	ldrh	r0, [r7, #6]
 8007940:	893a      	ldrh	r2, [r7, #8]
 8007942:	8979      	ldrh	r1, [r7, #10]
 8007944:	697b      	ldr	r3, [r7, #20]
 8007946:	9301      	str	r3, [sp, #4]
 8007948:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800794a:	9300      	str	r3, [sp, #0]
 800794c:	4603      	mov	r3, r0
 800794e:	68f8      	ldr	r0, [r7, #12]
 8007950:	f000 fad0 	bl	8007ef4 <I2C_RequestMemoryWrite>
 8007954:	4603      	mov	r3, r0
 8007956:	2b00      	cmp	r3, #0
 8007958:	d052      	beq.n	8007a00 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800795a:	2301      	movs	r3, #1
 800795c:	e081      	b.n	8007a62 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800795e:	697a      	ldr	r2, [r7, #20]
 8007960:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007962:	68f8      	ldr	r0, [r7, #12]
 8007964:	f000 fd1a 	bl	800839c <I2C_WaitOnTXEFlagUntilTimeout>
 8007968:	4603      	mov	r3, r0
 800796a:	2b00      	cmp	r3, #0
 800796c:	d00d      	beq.n	800798a <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800796e:	68fb      	ldr	r3, [r7, #12]
 8007970:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007972:	2b04      	cmp	r3, #4
 8007974:	d107      	bne.n	8007986 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007976:	68fb      	ldr	r3, [r7, #12]
 8007978:	681b      	ldr	r3, [r3, #0]
 800797a:	681a      	ldr	r2, [r3, #0]
 800797c:	68fb      	ldr	r3, [r7, #12]
 800797e:	681b      	ldr	r3, [r3, #0]
 8007980:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007984:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8007986:	2301      	movs	r3, #1
 8007988:	e06b      	b.n	8007a62 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800798a:	68fb      	ldr	r3, [r7, #12]
 800798c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800798e:	781a      	ldrb	r2, [r3, #0]
 8007990:	68fb      	ldr	r3, [r7, #12]
 8007992:	681b      	ldr	r3, [r3, #0]
 8007994:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007996:	68fb      	ldr	r3, [r7, #12]
 8007998:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800799a:	1c5a      	adds	r2, r3, #1
 800799c:	68fb      	ldr	r3, [r7, #12]
 800799e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 80079a0:	68fb      	ldr	r3, [r7, #12]
 80079a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80079a4:	3b01      	subs	r3, #1
 80079a6:	b29a      	uxth	r2, r3
 80079a8:	68fb      	ldr	r3, [r7, #12]
 80079aa:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80079ac:	68fb      	ldr	r3, [r7, #12]
 80079ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80079b0:	b29b      	uxth	r3, r3
 80079b2:	3b01      	subs	r3, #1
 80079b4:	b29a      	uxth	r2, r3
 80079b6:	68fb      	ldr	r3, [r7, #12]
 80079b8:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80079ba:	68fb      	ldr	r3, [r7, #12]
 80079bc:	681b      	ldr	r3, [r3, #0]
 80079be:	695b      	ldr	r3, [r3, #20]
 80079c0:	f003 0304 	and.w	r3, r3, #4
 80079c4:	2b04      	cmp	r3, #4
 80079c6:	d11b      	bne.n	8007a00 <HAL_I2C_Mem_Write+0x180>
 80079c8:	68fb      	ldr	r3, [r7, #12]
 80079ca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80079cc:	2b00      	cmp	r3, #0
 80079ce:	d017      	beq.n	8007a00 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80079d0:	68fb      	ldr	r3, [r7, #12]
 80079d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079d4:	781a      	ldrb	r2, [r3, #0]
 80079d6:	68fb      	ldr	r3, [r7, #12]
 80079d8:	681b      	ldr	r3, [r3, #0]
 80079da:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80079dc:	68fb      	ldr	r3, [r7, #12]
 80079de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079e0:	1c5a      	adds	r2, r3, #1
 80079e2:	68fb      	ldr	r3, [r7, #12]
 80079e4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80079e6:	68fb      	ldr	r3, [r7, #12]
 80079e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80079ea:	3b01      	subs	r3, #1
 80079ec:	b29a      	uxth	r2, r3
 80079ee:	68fb      	ldr	r3, [r7, #12]
 80079f0:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80079f2:	68fb      	ldr	r3, [r7, #12]
 80079f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80079f6:	b29b      	uxth	r3, r3
 80079f8:	3b01      	subs	r3, #1
 80079fa:	b29a      	uxth	r2, r3
 80079fc:	68fb      	ldr	r3, [r7, #12]
 80079fe:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8007a00:	68fb      	ldr	r3, [r7, #12]
 8007a02:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007a04:	2b00      	cmp	r3, #0
 8007a06:	d1aa      	bne.n	800795e <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007a08:	697a      	ldr	r2, [r7, #20]
 8007a0a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007a0c:	68f8      	ldr	r0, [r7, #12]
 8007a0e:	f000 fd06 	bl	800841e <I2C_WaitOnBTFFlagUntilTimeout>
 8007a12:	4603      	mov	r3, r0
 8007a14:	2b00      	cmp	r3, #0
 8007a16:	d00d      	beq.n	8007a34 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007a18:	68fb      	ldr	r3, [r7, #12]
 8007a1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a1c:	2b04      	cmp	r3, #4
 8007a1e:	d107      	bne.n	8007a30 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007a20:	68fb      	ldr	r3, [r7, #12]
 8007a22:	681b      	ldr	r3, [r3, #0]
 8007a24:	681a      	ldr	r2, [r3, #0]
 8007a26:	68fb      	ldr	r3, [r7, #12]
 8007a28:	681b      	ldr	r3, [r3, #0]
 8007a2a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007a2e:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8007a30:	2301      	movs	r3, #1
 8007a32:	e016      	b.n	8007a62 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007a34:	68fb      	ldr	r3, [r7, #12]
 8007a36:	681b      	ldr	r3, [r3, #0]
 8007a38:	681a      	ldr	r2, [r3, #0]
 8007a3a:	68fb      	ldr	r3, [r7, #12]
 8007a3c:	681b      	ldr	r3, [r3, #0]
 8007a3e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007a42:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007a44:	68fb      	ldr	r3, [r7, #12]
 8007a46:	2220      	movs	r2, #32
 8007a48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8007a4c:	68fb      	ldr	r3, [r7, #12]
 8007a4e:	2200      	movs	r2, #0
 8007a50:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007a54:	68fb      	ldr	r3, [r7, #12]
 8007a56:	2200      	movs	r2, #0
 8007a58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8007a5c:	2300      	movs	r3, #0
 8007a5e:	e000      	b.n	8007a62 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8007a60:	2302      	movs	r3, #2
  }
}
 8007a62:	4618      	mov	r0, r3
 8007a64:	3718      	adds	r7, #24
 8007a66:	46bd      	mov	sp, r7
 8007a68:	bd80      	pop	{r7, pc}
 8007a6a:	bf00      	nop
 8007a6c:	00100002 	.word	0x00100002
 8007a70:	ffff0000 	.word	0xffff0000

08007a74 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007a74:	b580      	push	{r7, lr}
 8007a76:	b08c      	sub	sp, #48	; 0x30
 8007a78:	af02      	add	r7, sp, #8
 8007a7a:	60f8      	str	r0, [r7, #12]
 8007a7c:	4608      	mov	r0, r1
 8007a7e:	4611      	mov	r1, r2
 8007a80:	461a      	mov	r2, r3
 8007a82:	4603      	mov	r3, r0
 8007a84:	817b      	strh	r3, [r7, #10]
 8007a86:	460b      	mov	r3, r1
 8007a88:	813b      	strh	r3, [r7, #8]
 8007a8a:	4613      	mov	r3, r2
 8007a8c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8007a8e:	f7ff f987 	bl	8006da0 <HAL_GetTick>
 8007a92:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007a94:	68fb      	ldr	r3, [r7, #12]
 8007a96:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007a9a:	b2db      	uxtb	r3, r3
 8007a9c:	2b20      	cmp	r3, #32
 8007a9e:	f040 8208 	bne.w	8007eb2 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8007aa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007aa4:	9300      	str	r3, [sp, #0]
 8007aa6:	2319      	movs	r3, #25
 8007aa8:	2201      	movs	r2, #1
 8007aaa:	497b      	ldr	r1, [pc, #492]	; (8007c98 <HAL_I2C_Mem_Read+0x224>)
 8007aac:	68f8      	ldr	r0, [r7, #12]
 8007aae:	f000 fb9f 	bl	80081f0 <I2C_WaitOnFlagUntilTimeout>
 8007ab2:	4603      	mov	r3, r0
 8007ab4:	2b00      	cmp	r3, #0
 8007ab6:	d001      	beq.n	8007abc <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8007ab8:	2302      	movs	r3, #2
 8007aba:	e1fb      	b.n	8007eb4 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007abc:	68fb      	ldr	r3, [r7, #12]
 8007abe:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007ac2:	2b01      	cmp	r3, #1
 8007ac4:	d101      	bne.n	8007aca <HAL_I2C_Mem_Read+0x56>
 8007ac6:	2302      	movs	r3, #2
 8007ac8:	e1f4      	b.n	8007eb4 <HAL_I2C_Mem_Read+0x440>
 8007aca:	68fb      	ldr	r3, [r7, #12]
 8007acc:	2201      	movs	r2, #1
 8007ace:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8007ad2:	68fb      	ldr	r3, [r7, #12]
 8007ad4:	681b      	ldr	r3, [r3, #0]
 8007ad6:	681b      	ldr	r3, [r3, #0]
 8007ad8:	f003 0301 	and.w	r3, r3, #1
 8007adc:	2b01      	cmp	r3, #1
 8007ade:	d007      	beq.n	8007af0 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8007ae0:	68fb      	ldr	r3, [r7, #12]
 8007ae2:	681b      	ldr	r3, [r3, #0]
 8007ae4:	681a      	ldr	r2, [r3, #0]
 8007ae6:	68fb      	ldr	r3, [r7, #12]
 8007ae8:	681b      	ldr	r3, [r3, #0]
 8007aea:	f042 0201 	orr.w	r2, r2, #1
 8007aee:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8007af0:	68fb      	ldr	r3, [r7, #12]
 8007af2:	681b      	ldr	r3, [r3, #0]
 8007af4:	681a      	ldr	r2, [r3, #0]
 8007af6:	68fb      	ldr	r3, [r7, #12]
 8007af8:	681b      	ldr	r3, [r3, #0]
 8007afa:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007afe:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8007b00:	68fb      	ldr	r3, [r7, #12]
 8007b02:	2222      	movs	r2, #34	; 0x22
 8007b04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8007b08:	68fb      	ldr	r3, [r7, #12]
 8007b0a:	2240      	movs	r2, #64	; 0x40
 8007b0c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007b10:	68fb      	ldr	r3, [r7, #12]
 8007b12:	2200      	movs	r2, #0
 8007b14:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8007b16:	68fb      	ldr	r3, [r7, #12]
 8007b18:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007b1a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8007b1c:	68fb      	ldr	r3, [r7, #12]
 8007b1e:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8007b20:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8007b22:	68fb      	ldr	r3, [r7, #12]
 8007b24:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007b26:	b29a      	uxth	r2, r3
 8007b28:	68fb      	ldr	r3, [r7, #12]
 8007b2a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8007b2c:	68fb      	ldr	r3, [r7, #12]
 8007b2e:	4a5b      	ldr	r2, [pc, #364]	; (8007c9c <HAL_I2C_Mem_Read+0x228>)
 8007b30:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8007b32:	88f8      	ldrh	r0, [r7, #6]
 8007b34:	893a      	ldrh	r2, [r7, #8]
 8007b36:	8979      	ldrh	r1, [r7, #10]
 8007b38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b3a:	9301      	str	r3, [sp, #4]
 8007b3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b3e:	9300      	str	r3, [sp, #0]
 8007b40:	4603      	mov	r3, r0
 8007b42:	68f8      	ldr	r0, [r7, #12]
 8007b44:	f000 fa6c 	bl	8008020 <I2C_RequestMemoryRead>
 8007b48:	4603      	mov	r3, r0
 8007b4a:	2b00      	cmp	r3, #0
 8007b4c:	d001      	beq.n	8007b52 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8007b4e:	2301      	movs	r3, #1
 8007b50:	e1b0      	b.n	8007eb4 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8007b52:	68fb      	ldr	r3, [r7, #12]
 8007b54:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007b56:	2b00      	cmp	r3, #0
 8007b58:	d113      	bne.n	8007b82 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007b5a:	2300      	movs	r3, #0
 8007b5c:	623b      	str	r3, [r7, #32]
 8007b5e:	68fb      	ldr	r3, [r7, #12]
 8007b60:	681b      	ldr	r3, [r3, #0]
 8007b62:	695b      	ldr	r3, [r3, #20]
 8007b64:	623b      	str	r3, [r7, #32]
 8007b66:	68fb      	ldr	r3, [r7, #12]
 8007b68:	681b      	ldr	r3, [r3, #0]
 8007b6a:	699b      	ldr	r3, [r3, #24]
 8007b6c:	623b      	str	r3, [r7, #32]
 8007b6e:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007b70:	68fb      	ldr	r3, [r7, #12]
 8007b72:	681b      	ldr	r3, [r3, #0]
 8007b74:	681a      	ldr	r2, [r3, #0]
 8007b76:	68fb      	ldr	r3, [r7, #12]
 8007b78:	681b      	ldr	r3, [r3, #0]
 8007b7a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007b7e:	601a      	str	r2, [r3, #0]
 8007b80:	e184      	b.n	8007e8c <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8007b82:	68fb      	ldr	r3, [r7, #12]
 8007b84:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007b86:	2b01      	cmp	r3, #1
 8007b88:	d11b      	bne.n	8007bc2 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007b8a:	68fb      	ldr	r3, [r7, #12]
 8007b8c:	681b      	ldr	r3, [r3, #0]
 8007b8e:	681a      	ldr	r2, [r3, #0]
 8007b90:	68fb      	ldr	r3, [r7, #12]
 8007b92:	681b      	ldr	r3, [r3, #0]
 8007b94:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007b98:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007b9a:	2300      	movs	r3, #0
 8007b9c:	61fb      	str	r3, [r7, #28]
 8007b9e:	68fb      	ldr	r3, [r7, #12]
 8007ba0:	681b      	ldr	r3, [r3, #0]
 8007ba2:	695b      	ldr	r3, [r3, #20]
 8007ba4:	61fb      	str	r3, [r7, #28]
 8007ba6:	68fb      	ldr	r3, [r7, #12]
 8007ba8:	681b      	ldr	r3, [r3, #0]
 8007baa:	699b      	ldr	r3, [r3, #24]
 8007bac:	61fb      	str	r3, [r7, #28]
 8007bae:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007bb0:	68fb      	ldr	r3, [r7, #12]
 8007bb2:	681b      	ldr	r3, [r3, #0]
 8007bb4:	681a      	ldr	r2, [r3, #0]
 8007bb6:	68fb      	ldr	r3, [r7, #12]
 8007bb8:	681b      	ldr	r3, [r3, #0]
 8007bba:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007bbe:	601a      	str	r2, [r3, #0]
 8007bc0:	e164      	b.n	8007e8c <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8007bc2:	68fb      	ldr	r3, [r7, #12]
 8007bc4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007bc6:	2b02      	cmp	r3, #2
 8007bc8:	d11b      	bne.n	8007c02 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007bca:	68fb      	ldr	r3, [r7, #12]
 8007bcc:	681b      	ldr	r3, [r3, #0]
 8007bce:	681a      	ldr	r2, [r3, #0]
 8007bd0:	68fb      	ldr	r3, [r7, #12]
 8007bd2:	681b      	ldr	r3, [r3, #0]
 8007bd4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007bd8:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8007bda:	68fb      	ldr	r3, [r7, #12]
 8007bdc:	681b      	ldr	r3, [r3, #0]
 8007bde:	681a      	ldr	r2, [r3, #0]
 8007be0:	68fb      	ldr	r3, [r7, #12]
 8007be2:	681b      	ldr	r3, [r3, #0]
 8007be4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007be8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007bea:	2300      	movs	r3, #0
 8007bec:	61bb      	str	r3, [r7, #24]
 8007bee:	68fb      	ldr	r3, [r7, #12]
 8007bf0:	681b      	ldr	r3, [r3, #0]
 8007bf2:	695b      	ldr	r3, [r3, #20]
 8007bf4:	61bb      	str	r3, [r7, #24]
 8007bf6:	68fb      	ldr	r3, [r7, #12]
 8007bf8:	681b      	ldr	r3, [r3, #0]
 8007bfa:	699b      	ldr	r3, [r3, #24]
 8007bfc:	61bb      	str	r3, [r7, #24]
 8007bfe:	69bb      	ldr	r3, [r7, #24]
 8007c00:	e144      	b.n	8007e8c <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007c02:	2300      	movs	r3, #0
 8007c04:	617b      	str	r3, [r7, #20]
 8007c06:	68fb      	ldr	r3, [r7, #12]
 8007c08:	681b      	ldr	r3, [r3, #0]
 8007c0a:	695b      	ldr	r3, [r3, #20]
 8007c0c:	617b      	str	r3, [r7, #20]
 8007c0e:	68fb      	ldr	r3, [r7, #12]
 8007c10:	681b      	ldr	r3, [r3, #0]
 8007c12:	699b      	ldr	r3, [r3, #24]
 8007c14:	617b      	str	r3, [r7, #20]
 8007c16:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8007c18:	e138      	b.n	8007e8c <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8007c1a:	68fb      	ldr	r3, [r7, #12]
 8007c1c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007c1e:	2b03      	cmp	r3, #3
 8007c20:	f200 80f1 	bhi.w	8007e06 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8007c24:	68fb      	ldr	r3, [r7, #12]
 8007c26:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007c28:	2b01      	cmp	r3, #1
 8007c2a:	d123      	bne.n	8007c74 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007c2c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007c2e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8007c30:	68f8      	ldr	r0, [r7, #12]
 8007c32:	f000 fc35 	bl	80084a0 <I2C_WaitOnRXNEFlagUntilTimeout>
 8007c36:	4603      	mov	r3, r0
 8007c38:	2b00      	cmp	r3, #0
 8007c3a:	d001      	beq.n	8007c40 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8007c3c:	2301      	movs	r3, #1
 8007c3e:	e139      	b.n	8007eb4 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007c40:	68fb      	ldr	r3, [r7, #12]
 8007c42:	681b      	ldr	r3, [r3, #0]
 8007c44:	691a      	ldr	r2, [r3, #16]
 8007c46:	68fb      	ldr	r3, [r7, #12]
 8007c48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c4a:	b2d2      	uxtb	r2, r2
 8007c4c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007c4e:	68fb      	ldr	r3, [r7, #12]
 8007c50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c52:	1c5a      	adds	r2, r3, #1
 8007c54:	68fb      	ldr	r3, [r7, #12]
 8007c56:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007c58:	68fb      	ldr	r3, [r7, #12]
 8007c5a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007c5c:	3b01      	subs	r3, #1
 8007c5e:	b29a      	uxth	r2, r3
 8007c60:	68fb      	ldr	r3, [r7, #12]
 8007c62:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007c64:	68fb      	ldr	r3, [r7, #12]
 8007c66:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007c68:	b29b      	uxth	r3, r3
 8007c6a:	3b01      	subs	r3, #1
 8007c6c:	b29a      	uxth	r2, r3
 8007c6e:	68fb      	ldr	r3, [r7, #12]
 8007c70:	855a      	strh	r2, [r3, #42]	; 0x2a
 8007c72:	e10b      	b.n	8007e8c <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8007c74:	68fb      	ldr	r3, [r7, #12]
 8007c76:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007c78:	2b02      	cmp	r3, #2
 8007c7a:	d14e      	bne.n	8007d1a <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8007c7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c7e:	9300      	str	r3, [sp, #0]
 8007c80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c82:	2200      	movs	r2, #0
 8007c84:	4906      	ldr	r1, [pc, #24]	; (8007ca0 <HAL_I2C_Mem_Read+0x22c>)
 8007c86:	68f8      	ldr	r0, [r7, #12]
 8007c88:	f000 fab2 	bl	80081f0 <I2C_WaitOnFlagUntilTimeout>
 8007c8c:	4603      	mov	r3, r0
 8007c8e:	2b00      	cmp	r3, #0
 8007c90:	d008      	beq.n	8007ca4 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8007c92:	2301      	movs	r3, #1
 8007c94:	e10e      	b.n	8007eb4 <HAL_I2C_Mem_Read+0x440>
 8007c96:	bf00      	nop
 8007c98:	00100002 	.word	0x00100002
 8007c9c:	ffff0000 	.word	0xffff0000
 8007ca0:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007ca4:	68fb      	ldr	r3, [r7, #12]
 8007ca6:	681b      	ldr	r3, [r3, #0]
 8007ca8:	681a      	ldr	r2, [r3, #0]
 8007caa:	68fb      	ldr	r3, [r7, #12]
 8007cac:	681b      	ldr	r3, [r3, #0]
 8007cae:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007cb2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007cb4:	68fb      	ldr	r3, [r7, #12]
 8007cb6:	681b      	ldr	r3, [r3, #0]
 8007cb8:	691a      	ldr	r2, [r3, #16]
 8007cba:	68fb      	ldr	r3, [r7, #12]
 8007cbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007cbe:	b2d2      	uxtb	r2, r2
 8007cc0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007cc2:	68fb      	ldr	r3, [r7, #12]
 8007cc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007cc6:	1c5a      	adds	r2, r3, #1
 8007cc8:	68fb      	ldr	r3, [r7, #12]
 8007cca:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007ccc:	68fb      	ldr	r3, [r7, #12]
 8007cce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007cd0:	3b01      	subs	r3, #1
 8007cd2:	b29a      	uxth	r2, r3
 8007cd4:	68fb      	ldr	r3, [r7, #12]
 8007cd6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007cd8:	68fb      	ldr	r3, [r7, #12]
 8007cda:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007cdc:	b29b      	uxth	r3, r3
 8007cde:	3b01      	subs	r3, #1
 8007ce0:	b29a      	uxth	r2, r3
 8007ce2:	68fb      	ldr	r3, [r7, #12]
 8007ce4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007ce6:	68fb      	ldr	r3, [r7, #12]
 8007ce8:	681b      	ldr	r3, [r3, #0]
 8007cea:	691a      	ldr	r2, [r3, #16]
 8007cec:	68fb      	ldr	r3, [r7, #12]
 8007cee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007cf0:	b2d2      	uxtb	r2, r2
 8007cf2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007cf4:	68fb      	ldr	r3, [r7, #12]
 8007cf6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007cf8:	1c5a      	adds	r2, r3, #1
 8007cfa:	68fb      	ldr	r3, [r7, #12]
 8007cfc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007cfe:	68fb      	ldr	r3, [r7, #12]
 8007d00:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007d02:	3b01      	subs	r3, #1
 8007d04:	b29a      	uxth	r2, r3
 8007d06:	68fb      	ldr	r3, [r7, #12]
 8007d08:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007d0a:	68fb      	ldr	r3, [r7, #12]
 8007d0c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007d0e:	b29b      	uxth	r3, r3
 8007d10:	3b01      	subs	r3, #1
 8007d12:	b29a      	uxth	r2, r3
 8007d14:	68fb      	ldr	r3, [r7, #12]
 8007d16:	855a      	strh	r2, [r3, #42]	; 0x2a
 8007d18:	e0b8      	b.n	8007e8c <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8007d1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d1c:	9300      	str	r3, [sp, #0]
 8007d1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d20:	2200      	movs	r2, #0
 8007d22:	4966      	ldr	r1, [pc, #408]	; (8007ebc <HAL_I2C_Mem_Read+0x448>)
 8007d24:	68f8      	ldr	r0, [r7, #12]
 8007d26:	f000 fa63 	bl	80081f0 <I2C_WaitOnFlagUntilTimeout>
 8007d2a:	4603      	mov	r3, r0
 8007d2c:	2b00      	cmp	r3, #0
 8007d2e:	d001      	beq.n	8007d34 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8007d30:	2301      	movs	r3, #1
 8007d32:	e0bf      	b.n	8007eb4 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007d34:	68fb      	ldr	r3, [r7, #12]
 8007d36:	681b      	ldr	r3, [r3, #0]
 8007d38:	681a      	ldr	r2, [r3, #0]
 8007d3a:	68fb      	ldr	r3, [r7, #12]
 8007d3c:	681b      	ldr	r3, [r3, #0]
 8007d3e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007d42:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007d44:	68fb      	ldr	r3, [r7, #12]
 8007d46:	681b      	ldr	r3, [r3, #0]
 8007d48:	691a      	ldr	r2, [r3, #16]
 8007d4a:	68fb      	ldr	r3, [r7, #12]
 8007d4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d4e:	b2d2      	uxtb	r2, r2
 8007d50:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007d52:	68fb      	ldr	r3, [r7, #12]
 8007d54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d56:	1c5a      	adds	r2, r3, #1
 8007d58:	68fb      	ldr	r3, [r7, #12]
 8007d5a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007d5c:	68fb      	ldr	r3, [r7, #12]
 8007d5e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007d60:	3b01      	subs	r3, #1
 8007d62:	b29a      	uxth	r2, r3
 8007d64:	68fb      	ldr	r3, [r7, #12]
 8007d66:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007d68:	68fb      	ldr	r3, [r7, #12]
 8007d6a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007d6c:	b29b      	uxth	r3, r3
 8007d6e:	3b01      	subs	r3, #1
 8007d70:	b29a      	uxth	r2, r3
 8007d72:	68fb      	ldr	r3, [r7, #12]
 8007d74:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8007d76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d78:	9300      	str	r3, [sp, #0]
 8007d7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d7c:	2200      	movs	r2, #0
 8007d7e:	494f      	ldr	r1, [pc, #316]	; (8007ebc <HAL_I2C_Mem_Read+0x448>)
 8007d80:	68f8      	ldr	r0, [r7, #12]
 8007d82:	f000 fa35 	bl	80081f0 <I2C_WaitOnFlagUntilTimeout>
 8007d86:	4603      	mov	r3, r0
 8007d88:	2b00      	cmp	r3, #0
 8007d8a:	d001      	beq.n	8007d90 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8007d8c:	2301      	movs	r3, #1
 8007d8e:	e091      	b.n	8007eb4 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007d90:	68fb      	ldr	r3, [r7, #12]
 8007d92:	681b      	ldr	r3, [r3, #0]
 8007d94:	681a      	ldr	r2, [r3, #0]
 8007d96:	68fb      	ldr	r3, [r7, #12]
 8007d98:	681b      	ldr	r3, [r3, #0]
 8007d9a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007d9e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007da0:	68fb      	ldr	r3, [r7, #12]
 8007da2:	681b      	ldr	r3, [r3, #0]
 8007da4:	691a      	ldr	r2, [r3, #16]
 8007da6:	68fb      	ldr	r3, [r7, #12]
 8007da8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007daa:	b2d2      	uxtb	r2, r2
 8007dac:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007dae:	68fb      	ldr	r3, [r7, #12]
 8007db0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007db2:	1c5a      	adds	r2, r3, #1
 8007db4:	68fb      	ldr	r3, [r7, #12]
 8007db6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007db8:	68fb      	ldr	r3, [r7, #12]
 8007dba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007dbc:	3b01      	subs	r3, #1
 8007dbe:	b29a      	uxth	r2, r3
 8007dc0:	68fb      	ldr	r3, [r7, #12]
 8007dc2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007dc4:	68fb      	ldr	r3, [r7, #12]
 8007dc6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007dc8:	b29b      	uxth	r3, r3
 8007dca:	3b01      	subs	r3, #1
 8007dcc:	b29a      	uxth	r2, r3
 8007dce:	68fb      	ldr	r3, [r7, #12]
 8007dd0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007dd2:	68fb      	ldr	r3, [r7, #12]
 8007dd4:	681b      	ldr	r3, [r3, #0]
 8007dd6:	691a      	ldr	r2, [r3, #16]
 8007dd8:	68fb      	ldr	r3, [r7, #12]
 8007dda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ddc:	b2d2      	uxtb	r2, r2
 8007dde:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007de0:	68fb      	ldr	r3, [r7, #12]
 8007de2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007de4:	1c5a      	adds	r2, r3, #1
 8007de6:	68fb      	ldr	r3, [r7, #12]
 8007de8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007dea:	68fb      	ldr	r3, [r7, #12]
 8007dec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007dee:	3b01      	subs	r3, #1
 8007df0:	b29a      	uxth	r2, r3
 8007df2:	68fb      	ldr	r3, [r7, #12]
 8007df4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007df6:	68fb      	ldr	r3, [r7, #12]
 8007df8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007dfa:	b29b      	uxth	r3, r3
 8007dfc:	3b01      	subs	r3, #1
 8007dfe:	b29a      	uxth	r2, r3
 8007e00:	68fb      	ldr	r3, [r7, #12]
 8007e02:	855a      	strh	r2, [r3, #42]	; 0x2a
 8007e04:	e042      	b.n	8007e8c <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007e06:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007e08:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8007e0a:	68f8      	ldr	r0, [r7, #12]
 8007e0c:	f000 fb48 	bl	80084a0 <I2C_WaitOnRXNEFlagUntilTimeout>
 8007e10:	4603      	mov	r3, r0
 8007e12:	2b00      	cmp	r3, #0
 8007e14:	d001      	beq.n	8007e1a <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8007e16:	2301      	movs	r3, #1
 8007e18:	e04c      	b.n	8007eb4 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007e1a:	68fb      	ldr	r3, [r7, #12]
 8007e1c:	681b      	ldr	r3, [r3, #0]
 8007e1e:	691a      	ldr	r2, [r3, #16]
 8007e20:	68fb      	ldr	r3, [r7, #12]
 8007e22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e24:	b2d2      	uxtb	r2, r2
 8007e26:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8007e28:	68fb      	ldr	r3, [r7, #12]
 8007e2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e2c:	1c5a      	adds	r2, r3, #1
 8007e2e:	68fb      	ldr	r3, [r7, #12]
 8007e30:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8007e32:	68fb      	ldr	r3, [r7, #12]
 8007e34:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007e36:	3b01      	subs	r3, #1
 8007e38:	b29a      	uxth	r2, r3
 8007e3a:	68fb      	ldr	r3, [r7, #12]
 8007e3c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8007e3e:	68fb      	ldr	r3, [r7, #12]
 8007e40:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007e42:	b29b      	uxth	r3, r3
 8007e44:	3b01      	subs	r3, #1
 8007e46:	b29a      	uxth	r2, r3
 8007e48:	68fb      	ldr	r3, [r7, #12]
 8007e4a:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8007e4c:	68fb      	ldr	r3, [r7, #12]
 8007e4e:	681b      	ldr	r3, [r3, #0]
 8007e50:	695b      	ldr	r3, [r3, #20]
 8007e52:	f003 0304 	and.w	r3, r3, #4
 8007e56:	2b04      	cmp	r3, #4
 8007e58:	d118      	bne.n	8007e8c <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007e5a:	68fb      	ldr	r3, [r7, #12]
 8007e5c:	681b      	ldr	r3, [r3, #0]
 8007e5e:	691a      	ldr	r2, [r3, #16]
 8007e60:	68fb      	ldr	r3, [r7, #12]
 8007e62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e64:	b2d2      	uxtb	r2, r2
 8007e66:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007e68:	68fb      	ldr	r3, [r7, #12]
 8007e6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e6c:	1c5a      	adds	r2, r3, #1
 8007e6e:	68fb      	ldr	r3, [r7, #12]
 8007e70:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007e72:	68fb      	ldr	r3, [r7, #12]
 8007e74:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007e76:	3b01      	subs	r3, #1
 8007e78:	b29a      	uxth	r2, r3
 8007e7a:	68fb      	ldr	r3, [r7, #12]
 8007e7c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007e7e:	68fb      	ldr	r3, [r7, #12]
 8007e80:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007e82:	b29b      	uxth	r3, r3
 8007e84:	3b01      	subs	r3, #1
 8007e86:	b29a      	uxth	r2, r3
 8007e88:	68fb      	ldr	r3, [r7, #12]
 8007e8a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8007e8c:	68fb      	ldr	r3, [r7, #12]
 8007e8e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007e90:	2b00      	cmp	r3, #0
 8007e92:	f47f aec2 	bne.w	8007c1a <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8007e96:	68fb      	ldr	r3, [r7, #12]
 8007e98:	2220      	movs	r2, #32
 8007e9a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8007e9e:	68fb      	ldr	r3, [r7, #12]
 8007ea0:	2200      	movs	r2, #0
 8007ea2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007ea6:	68fb      	ldr	r3, [r7, #12]
 8007ea8:	2200      	movs	r2, #0
 8007eaa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8007eae:	2300      	movs	r3, #0
 8007eb0:	e000      	b.n	8007eb4 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8007eb2:	2302      	movs	r3, #2
  }
}
 8007eb4:	4618      	mov	r0, r3
 8007eb6:	3728      	adds	r7, #40	; 0x28
 8007eb8:	46bd      	mov	sp, r7
 8007eba:	bd80      	pop	{r7, pc}
 8007ebc:	00010004 	.word	0x00010004

08007ec0 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 8007ec0:	b480      	push	{r7}
 8007ec2:	b083      	sub	sp, #12
 8007ec4:	af00      	add	r7, sp, #0
 8007ec6:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007ece:	b2db      	uxtb	r3, r3
}
 8007ed0:	4618      	mov	r0, r3
 8007ed2:	370c      	adds	r7, #12
 8007ed4:	46bd      	mov	sp, r7
 8007ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eda:	4770      	bx	lr

08007edc <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(I2C_HandleTypeDef *hi2c)
{
 8007edc:	b480      	push	{r7}
 8007ede:	b083      	sub	sp, #12
 8007ee0:	af00      	add	r7, sp, #0
 8007ee2:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8007ee8:	4618      	mov	r0, r3
 8007eea:	370c      	adds	r7, #12
 8007eec:	46bd      	mov	sp, r7
 8007eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ef2:	4770      	bx	lr

08007ef4 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8007ef4:	b580      	push	{r7, lr}
 8007ef6:	b088      	sub	sp, #32
 8007ef8:	af02      	add	r7, sp, #8
 8007efa:	60f8      	str	r0, [r7, #12]
 8007efc:	4608      	mov	r0, r1
 8007efe:	4611      	mov	r1, r2
 8007f00:	461a      	mov	r2, r3
 8007f02:	4603      	mov	r3, r0
 8007f04:	817b      	strh	r3, [r7, #10]
 8007f06:	460b      	mov	r3, r1
 8007f08:	813b      	strh	r3, [r7, #8]
 8007f0a:	4613      	mov	r3, r2
 8007f0c:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007f0e:	68fb      	ldr	r3, [r7, #12]
 8007f10:	681b      	ldr	r3, [r3, #0]
 8007f12:	681a      	ldr	r2, [r3, #0]
 8007f14:	68fb      	ldr	r3, [r7, #12]
 8007f16:	681b      	ldr	r3, [r3, #0]
 8007f18:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007f1c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8007f1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f20:	9300      	str	r3, [sp, #0]
 8007f22:	6a3b      	ldr	r3, [r7, #32]
 8007f24:	2200      	movs	r2, #0
 8007f26:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8007f2a:	68f8      	ldr	r0, [r7, #12]
 8007f2c:	f000 f960 	bl	80081f0 <I2C_WaitOnFlagUntilTimeout>
 8007f30:	4603      	mov	r3, r0
 8007f32:	2b00      	cmp	r3, #0
 8007f34:	d00d      	beq.n	8007f52 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8007f36:	68fb      	ldr	r3, [r7, #12]
 8007f38:	681b      	ldr	r3, [r3, #0]
 8007f3a:	681b      	ldr	r3, [r3, #0]
 8007f3c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007f40:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007f44:	d103      	bne.n	8007f4e <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8007f46:	68fb      	ldr	r3, [r7, #12]
 8007f48:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007f4c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8007f4e:	2303      	movs	r3, #3
 8007f50:	e05f      	b.n	8008012 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8007f52:	897b      	ldrh	r3, [r7, #10]
 8007f54:	b2db      	uxtb	r3, r3
 8007f56:	461a      	mov	r2, r3
 8007f58:	68fb      	ldr	r3, [r7, #12]
 8007f5a:	681b      	ldr	r3, [r3, #0]
 8007f5c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8007f60:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8007f62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f64:	6a3a      	ldr	r2, [r7, #32]
 8007f66:	492d      	ldr	r1, [pc, #180]	; (800801c <I2C_RequestMemoryWrite+0x128>)
 8007f68:	68f8      	ldr	r0, [r7, #12]
 8007f6a:	f000 f998 	bl	800829e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007f6e:	4603      	mov	r3, r0
 8007f70:	2b00      	cmp	r3, #0
 8007f72:	d001      	beq.n	8007f78 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8007f74:	2301      	movs	r3, #1
 8007f76:	e04c      	b.n	8008012 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007f78:	2300      	movs	r3, #0
 8007f7a:	617b      	str	r3, [r7, #20]
 8007f7c:	68fb      	ldr	r3, [r7, #12]
 8007f7e:	681b      	ldr	r3, [r3, #0]
 8007f80:	695b      	ldr	r3, [r3, #20]
 8007f82:	617b      	str	r3, [r7, #20]
 8007f84:	68fb      	ldr	r3, [r7, #12]
 8007f86:	681b      	ldr	r3, [r3, #0]
 8007f88:	699b      	ldr	r3, [r3, #24]
 8007f8a:	617b      	str	r3, [r7, #20]
 8007f8c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007f8e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007f90:	6a39      	ldr	r1, [r7, #32]
 8007f92:	68f8      	ldr	r0, [r7, #12]
 8007f94:	f000 fa02 	bl	800839c <I2C_WaitOnTXEFlagUntilTimeout>
 8007f98:	4603      	mov	r3, r0
 8007f9a:	2b00      	cmp	r3, #0
 8007f9c:	d00d      	beq.n	8007fba <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007f9e:	68fb      	ldr	r3, [r7, #12]
 8007fa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007fa2:	2b04      	cmp	r3, #4
 8007fa4:	d107      	bne.n	8007fb6 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007fa6:	68fb      	ldr	r3, [r7, #12]
 8007fa8:	681b      	ldr	r3, [r3, #0]
 8007faa:	681a      	ldr	r2, [r3, #0]
 8007fac:	68fb      	ldr	r3, [r7, #12]
 8007fae:	681b      	ldr	r3, [r3, #0]
 8007fb0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007fb4:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8007fb6:	2301      	movs	r3, #1
 8007fb8:	e02b      	b.n	8008012 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8007fba:	88fb      	ldrh	r3, [r7, #6]
 8007fbc:	2b01      	cmp	r3, #1
 8007fbe:	d105      	bne.n	8007fcc <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8007fc0:	893b      	ldrh	r3, [r7, #8]
 8007fc2:	b2da      	uxtb	r2, r3
 8007fc4:	68fb      	ldr	r3, [r7, #12]
 8007fc6:	681b      	ldr	r3, [r3, #0]
 8007fc8:	611a      	str	r2, [r3, #16]
 8007fca:	e021      	b.n	8008010 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8007fcc:	893b      	ldrh	r3, [r7, #8]
 8007fce:	0a1b      	lsrs	r3, r3, #8
 8007fd0:	b29b      	uxth	r3, r3
 8007fd2:	b2da      	uxtb	r2, r3
 8007fd4:	68fb      	ldr	r3, [r7, #12]
 8007fd6:	681b      	ldr	r3, [r3, #0]
 8007fd8:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007fda:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007fdc:	6a39      	ldr	r1, [r7, #32]
 8007fde:	68f8      	ldr	r0, [r7, #12]
 8007fe0:	f000 f9dc 	bl	800839c <I2C_WaitOnTXEFlagUntilTimeout>
 8007fe4:	4603      	mov	r3, r0
 8007fe6:	2b00      	cmp	r3, #0
 8007fe8:	d00d      	beq.n	8008006 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007fea:	68fb      	ldr	r3, [r7, #12]
 8007fec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007fee:	2b04      	cmp	r3, #4
 8007ff0:	d107      	bne.n	8008002 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007ff2:	68fb      	ldr	r3, [r7, #12]
 8007ff4:	681b      	ldr	r3, [r3, #0]
 8007ff6:	681a      	ldr	r2, [r3, #0]
 8007ff8:	68fb      	ldr	r3, [r7, #12]
 8007ffa:	681b      	ldr	r3, [r3, #0]
 8007ffc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008000:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8008002:	2301      	movs	r3, #1
 8008004:	e005      	b.n	8008012 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8008006:	893b      	ldrh	r3, [r7, #8]
 8008008:	b2da      	uxtb	r2, r3
 800800a:	68fb      	ldr	r3, [r7, #12]
 800800c:	681b      	ldr	r3, [r3, #0]
 800800e:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8008010:	2300      	movs	r3, #0
}
 8008012:	4618      	mov	r0, r3
 8008014:	3718      	adds	r7, #24
 8008016:	46bd      	mov	sp, r7
 8008018:	bd80      	pop	{r7, pc}
 800801a:	bf00      	nop
 800801c:	00010002 	.word	0x00010002

08008020 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8008020:	b580      	push	{r7, lr}
 8008022:	b088      	sub	sp, #32
 8008024:	af02      	add	r7, sp, #8
 8008026:	60f8      	str	r0, [r7, #12]
 8008028:	4608      	mov	r0, r1
 800802a:	4611      	mov	r1, r2
 800802c:	461a      	mov	r2, r3
 800802e:	4603      	mov	r3, r0
 8008030:	817b      	strh	r3, [r7, #10]
 8008032:	460b      	mov	r3, r1
 8008034:	813b      	strh	r3, [r7, #8]
 8008036:	4613      	mov	r3, r2
 8008038:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800803a:	68fb      	ldr	r3, [r7, #12]
 800803c:	681b      	ldr	r3, [r3, #0]
 800803e:	681a      	ldr	r2, [r3, #0]
 8008040:	68fb      	ldr	r3, [r7, #12]
 8008042:	681b      	ldr	r3, [r3, #0]
 8008044:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8008048:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800804a:	68fb      	ldr	r3, [r7, #12]
 800804c:	681b      	ldr	r3, [r3, #0]
 800804e:	681a      	ldr	r2, [r3, #0]
 8008050:	68fb      	ldr	r3, [r7, #12]
 8008052:	681b      	ldr	r3, [r3, #0]
 8008054:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008058:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800805a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800805c:	9300      	str	r3, [sp, #0]
 800805e:	6a3b      	ldr	r3, [r7, #32]
 8008060:	2200      	movs	r2, #0
 8008062:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8008066:	68f8      	ldr	r0, [r7, #12]
 8008068:	f000 f8c2 	bl	80081f0 <I2C_WaitOnFlagUntilTimeout>
 800806c:	4603      	mov	r3, r0
 800806e:	2b00      	cmp	r3, #0
 8008070:	d00d      	beq.n	800808e <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8008072:	68fb      	ldr	r3, [r7, #12]
 8008074:	681b      	ldr	r3, [r3, #0]
 8008076:	681b      	ldr	r3, [r3, #0]
 8008078:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800807c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008080:	d103      	bne.n	800808a <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8008082:	68fb      	ldr	r3, [r7, #12]
 8008084:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008088:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800808a:	2303      	movs	r3, #3
 800808c:	e0aa      	b.n	80081e4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800808e:	897b      	ldrh	r3, [r7, #10]
 8008090:	b2db      	uxtb	r3, r3
 8008092:	461a      	mov	r2, r3
 8008094:	68fb      	ldr	r3, [r7, #12]
 8008096:	681b      	ldr	r3, [r3, #0]
 8008098:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800809c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800809e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080a0:	6a3a      	ldr	r2, [r7, #32]
 80080a2:	4952      	ldr	r1, [pc, #328]	; (80081ec <I2C_RequestMemoryRead+0x1cc>)
 80080a4:	68f8      	ldr	r0, [r7, #12]
 80080a6:	f000 f8fa 	bl	800829e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80080aa:	4603      	mov	r3, r0
 80080ac:	2b00      	cmp	r3, #0
 80080ae:	d001      	beq.n	80080b4 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80080b0:	2301      	movs	r3, #1
 80080b2:	e097      	b.n	80081e4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80080b4:	2300      	movs	r3, #0
 80080b6:	617b      	str	r3, [r7, #20]
 80080b8:	68fb      	ldr	r3, [r7, #12]
 80080ba:	681b      	ldr	r3, [r3, #0]
 80080bc:	695b      	ldr	r3, [r3, #20]
 80080be:	617b      	str	r3, [r7, #20]
 80080c0:	68fb      	ldr	r3, [r7, #12]
 80080c2:	681b      	ldr	r3, [r3, #0]
 80080c4:	699b      	ldr	r3, [r3, #24]
 80080c6:	617b      	str	r3, [r7, #20]
 80080c8:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80080ca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80080cc:	6a39      	ldr	r1, [r7, #32]
 80080ce:	68f8      	ldr	r0, [r7, #12]
 80080d0:	f000 f964 	bl	800839c <I2C_WaitOnTXEFlagUntilTimeout>
 80080d4:	4603      	mov	r3, r0
 80080d6:	2b00      	cmp	r3, #0
 80080d8:	d00d      	beq.n	80080f6 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80080da:	68fb      	ldr	r3, [r7, #12]
 80080dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80080de:	2b04      	cmp	r3, #4
 80080e0:	d107      	bne.n	80080f2 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80080e2:	68fb      	ldr	r3, [r7, #12]
 80080e4:	681b      	ldr	r3, [r3, #0]
 80080e6:	681a      	ldr	r2, [r3, #0]
 80080e8:	68fb      	ldr	r3, [r7, #12]
 80080ea:	681b      	ldr	r3, [r3, #0]
 80080ec:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80080f0:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80080f2:	2301      	movs	r3, #1
 80080f4:	e076      	b.n	80081e4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80080f6:	88fb      	ldrh	r3, [r7, #6]
 80080f8:	2b01      	cmp	r3, #1
 80080fa:	d105      	bne.n	8008108 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80080fc:	893b      	ldrh	r3, [r7, #8]
 80080fe:	b2da      	uxtb	r2, r3
 8008100:	68fb      	ldr	r3, [r7, #12]
 8008102:	681b      	ldr	r3, [r3, #0]
 8008104:	611a      	str	r2, [r3, #16]
 8008106:	e021      	b.n	800814c <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8008108:	893b      	ldrh	r3, [r7, #8]
 800810a:	0a1b      	lsrs	r3, r3, #8
 800810c:	b29b      	uxth	r3, r3
 800810e:	b2da      	uxtb	r2, r3
 8008110:	68fb      	ldr	r3, [r7, #12]
 8008112:	681b      	ldr	r3, [r3, #0]
 8008114:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008116:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008118:	6a39      	ldr	r1, [r7, #32]
 800811a:	68f8      	ldr	r0, [r7, #12]
 800811c:	f000 f93e 	bl	800839c <I2C_WaitOnTXEFlagUntilTimeout>
 8008120:	4603      	mov	r3, r0
 8008122:	2b00      	cmp	r3, #0
 8008124:	d00d      	beq.n	8008142 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8008126:	68fb      	ldr	r3, [r7, #12]
 8008128:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800812a:	2b04      	cmp	r3, #4
 800812c:	d107      	bne.n	800813e <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800812e:	68fb      	ldr	r3, [r7, #12]
 8008130:	681b      	ldr	r3, [r3, #0]
 8008132:	681a      	ldr	r2, [r3, #0]
 8008134:	68fb      	ldr	r3, [r7, #12]
 8008136:	681b      	ldr	r3, [r3, #0]
 8008138:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800813c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800813e:	2301      	movs	r3, #1
 8008140:	e050      	b.n	80081e4 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8008142:	893b      	ldrh	r3, [r7, #8]
 8008144:	b2da      	uxtb	r2, r3
 8008146:	68fb      	ldr	r3, [r7, #12]
 8008148:	681b      	ldr	r3, [r3, #0]
 800814a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800814c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800814e:	6a39      	ldr	r1, [r7, #32]
 8008150:	68f8      	ldr	r0, [r7, #12]
 8008152:	f000 f923 	bl	800839c <I2C_WaitOnTXEFlagUntilTimeout>
 8008156:	4603      	mov	r3, r0
 8008158:	2b00      	cmp	r3, #0
 800815a:	d00d      	beq.n	8008178 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800815c:	68fb      	ldr	r3, [r7, #12]
 800815e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008160:	2b04      	cmp	r3, #4
 8008162:	d107      	bne.n	8008174 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008164:	68fb      	ldr	r3, [r7, #12]
 8008166:	681b      	ldr	r3, [r3, #0]
 8008168:	681a      	ldr	r2, [r3, #0]
 800816a:	68fb      	ldr	r3, [r7, #12]
 800816c:	681b      	ldr	r3, [r3, #0]
 800816e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008172:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8008174:	2301      	movs	r3, #1
 8008176:	e035      	b.n	80081e4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8008178:	68fb      	ldr	r3, [r7, #12]
 800817a:	681b      	ldr	r3, [r3, #0]
 800817c:	681a      	ldr	r2, [r3, #0]
 800817e:	68fb      	ldr	r3, [r7, #12]
 8008180:	681b      	ldr	r3, [r3, #0]
 8008182:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008186:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8008188:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800818a:	9300      	str	r3, [sp, #0]
 800818c:	6a3b      	ldr	r3, [r7, #32]
 800818e:	2200      	movs	r2, #0
 8008190:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8008194:	68f8      	ldr	r0, [r7, #12]
 8008196:	f000 f82b 	bl	80081f0 <I2C_WaitOnFlagUntilTimeout>
 800819a:	4603      	mov	r3, r0
 800819c:	2b00      	cmp	r3, #0
 800819e:	d00d      	beq.n	80081bc <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80081a0:	68fb      	ldr	r3, [r7, #12]
 80081a2:	681b      	ldr	r3, [r3, #0]
 80081a4:	681b      	ldr	r3, [r3, #0]
 80081a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80081aa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80081ae:	d103      	bne.n	80081b8 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80081b0:	68fb      	ldr	r3, [r7, #12]
 80081b2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80081b6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80081b8:	2303      	movs	r3, #3
 80081ba:	e013      	b.n	80081e4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80081bc:	897b      	ldrh	r3, [r7, #10]
 80081be:	b2db      	uxtb	r3, r3
 80081c0:	f043 0301 	orr.w	r3, r3, #1
 80081c4:	b2da      	uxtb	r2, r3
 80081c6:	68fb      	ldr	r3, [r7, #12]
 80081c8:	681b      	ldr	r3, [r3, #0]
 80081ca:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80081cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081ce:	6a3a      	ldr	r2, [r7, #32]
 80081d0:	4906      	ldr	r1, [pc, #24]	; (80081ec <I2C_RequestMemoryRead+0x1cc>)
 80081d2:	68f8      	ldr	r0, [r7, #12]
 80081d4:	f000 f863 	bl	800829e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80081d8:	4603      	mov	r3, r0
 80081da:	2b00      	cmp	r3, #0
 80081dc:	d001      	beq.n	80081e2 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80081de:	2301      	movs	r3, #1
 80081e0:	e000      	b.n	80081e4 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80081e2:	2300      	movs	r3, #0
}
 80081e4:	4618      	mov	r0, r3
 80081e6:	3718      	adds	r7, #24
 80081e8:	46bd      	mov	sp, r7
 80081ea:	bd80      	pop	{r7, pc}
 80081ec:	00010002 	.word	0x00010002

080081f0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80081f0:	b580      	push	{r7, lr}
 80081f2:	b084      	sub	sp, #16
 80081f4:	af00      	add	r7, sp, #0
 80081f6:	60f8      	str	r0, [r7, #12]
 80081f8:	60b9      	str	r1, [r7, #8]
 80081fa:	603b      	str	r3, [r7, #0]
 80081fc:	4613      	mov	r3, r2
 80081fe:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8008200:	e025      	b.n	800824e <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008202:	683b      	ldr	r3, [r7, #0]
 8008204:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008208:	d021      	beq.n	800824e <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800820a:	f7fe fdc9 	bl	8006da0 <HAL_GetTick>
 800820e:	4602      	mov	r2, r0
 8008210:	69bb      	ldr	r3, [r7, #24]
 8008212:	1ad3      	subs	r3, r2, r3
 8008214:	683a      	ldr	r2, [r7, #0]
 8008216:	429a      	cmp	r2, r3
 8008218:	d302      	bcc.n	8008220 <I2C_WaitOnFlagUntilTimeout+0x30>
 800821a:	683b      	ldr	r3, [r7, #0]
 800821c:	2b00      	cmp	r3, #0
 800821e:	d116      	bne.n	800824e <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8008220:	68fb      	ldr	r3, [r7, #12]
 8008222:	2200      	movs	r2, #0
 8008224:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8008226:	68fb      	ldr	r3, [r7, #12]
 8008228:	2220      	movs	r2, #32
 800822a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800822e:	68fb      	ldr	r3, [r7, #12]
 8008230:	2200      	movs	r2, #0
 8008232:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8008236:	68fb      	ldr	r3, [r7, #12]
 8008238:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800823a:	f043 0220 	orr.w	r2, r3, #32
 800823e:	68fb      	ldr	r3, [r7, #12]
 8008240:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008242:	68fb      	ldr	r3, [r7, #12]
 8008244:	2200      	movs	r2, #0
 8008246:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800824a:	2301      	movs	r3, #1
 800824c:	e023      	b.n	8008296 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800824e:	68bb      	ldr	r3, [r7, #8]
 8008250:	0c1b      	lsrs	r3, r3, #16
 8008252:	b2db      	uxtb	r3, r3
 8008254:	2b01      	cmp	r3, #1
 8008256:	d10d      	bne.n	8008274 <I2C_WaitOnFlagUntilTimeout+0x84>
 8008258:	68fb      	ldr	r3, [r7, #12]
 800825a:	681b      	ldr	r3, [r3, #0]
 800825c:	695b      	ldr	r3, [r3, #20]
 800825e:	43da      	mvns	r2, r3
 8008260:	68bb      	ldr	r3, [r7, #8]
 8008262:	4013      	ands	r3, r2
 8008264:	b29b      	uxth	r3, r3
 8008266:	2b00      	cmp	r3, #0
 8008268:	bf0c      	ite	eq
 800826a:	2301      	moveq	r3, #1
 800826c:	2300      	movne	r3, #0
 800826e:	b2db      	uxtb	r3, r3
 8008270:	461a      	mov	r2, r3
 8008272:	e00c      	b.n	800828e <I2C_WaitOnFlagUntilTimeout+0x9e>
 8008274:	68fb      	ldr	r3, [r7, #12]
 8008276:	681b      	ldr	r3, [r3, #0]
 8008278:	699b      	ldr	r3, [r3, #24]
 800827a:	43da      	mvns	r2, r3
 800827c:	68bb      	ldr	r3, [r7, #8]
 800827e:	4013      	ands	r3, r2
 8008280:	b29b      	uxth	r3, r3
 8008282:	2b00      	cmp	r3, #0
 8008284:	bf0c      	ite	eq
 8008286:	2301      	moveq	r3, #1
 8008288:	2300      	movne	r3, #0
 800828a:	b2db      	uxtb	r3, r3
 800828c:	461a      	mov	r2, r3
 800828e:	79fb      	ldrb	r3, [r7, #7]
 8008290:	429a      	cmp	r2, r3
 8008292:	d0b6      	beq.n	8008202 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8008294:	2300      	movs	r3, #0
}
 8008296:	4618      	mov	r0, r3
 8008298:	3710      	adds	r7, #16
 800829a:	46bd      	mov	sp, r7
 800829c:	bd80      	pop	{r7, pc}

0800829e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800829e:	b580      	push	{r7, lr}
 80082a0:	b084      	sub	sp, #16
 80082a2:	af00      	add	r7, sp, #0
 80082a4:	60f8      	str	r0, [r7, #12]
 80082a6:	60b9      	str	r1, [r7, #8]
 80082a8:	607a      	str	r2, [r7, #4]
 80082aa:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80082ac:	e051      	b.n	8008352 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80082ae:	68fb      	ldr	r3, [r7, #12]
 80082b0:	681b      	ldr	r3, [r3, #0]
 80082b2:	695b      	ldr	r3, [r3, #20]
 80082b4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80082b8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80082bc:	d123      	bne.n	8008306 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80082be:	68fb      	ldr	r3, [r7, #12]
 80082c0:	681b      	ldr	r3, [r3, #0]
 80082c2:	681a      	ldr	r2, [r3, #0]
 80082c4:	68fb      	ldr	r3, [r7, #12]
 80082c6:	681b      	ldr	r3, [r3, #0]
 80082c8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80082cc:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80082ce:	68fb      	ldr	r3, [r7, #12]
 80082d0:	681b      	ldr	r3, [r3, #0]
 80082d2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80082d6:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80082d8:	68fb      	ldr	r3, [r7, #12]
 80082da:	2200      	movs	r2, #0
 80082dc:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80082de:	68fb      	ldr	r3, [r7, #12]
 80082e0:	2220      	movs	r2, #32
 80082e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80082e6:	68fb      	ldr	r3, [r7, #12]
 80082e8:	2200      	movs	r2, #0
 80082ea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80082ee:	68fb      	ldr	r3, [r7, #12]
 80082f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80082f2:	f043 0204 	orr.w	r2, r3, #4
 80082f6:	68fb      	ldr	r3, [r7, #12]
 80082f8:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80082fa:	68fb      	ldr	r3, [r7, #12]
 80082fc:	2200      	movs	r2, #0
 80082fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8008302:	2301      	movs	r3, #1
 8008304:	e046      	b.n	8008394 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	f1b3 3fff 	cmp.w	r3, #4294967295
 800830c:	d021      	beq.n	8008352 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800830e:	f7fe fd47 	bl	8006da0 <HAL_GetTick>
 8008312:	4602      	mov	r2, r0
 8008314:	683b      	ldr	r3, [r7, #0]
 8008316:	1ad3      	subs	r3, r2, r3
 8008318:	687a      	ldr	r2, [r7, #4]
 800831a:	429a      	cmp	r2, r3
 800831c:	d302      	bcc.n	8008324 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	2b00      	cmp	r3, #0
 8008322:	d116      	bne.n	8008352 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8008324:	68fb      	ldr	r3, [r7, #12]
 8008326:	2200      	movs	r2, #0
 8008328:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800832a:	68fb      	ldr	r3, [r7, #12]
 800832c:	2220      	movs	r2, #32
 800832e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008332:	68fb      	ldr	r3, [r7, #12]
 8008334:	2200      	movs	r2, #0
 8008336:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800833a:	68fb      	ldr	r3, [r7, #12]
 800833c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800833e:	f043 0220 	orr.w	r2, r3, #32
 8008342:	68fb      	ldr	r3, [r7, #12]
 8008344:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008346:	68fb      	ldr	r3, [r7, #12]
 8008348:	2200      	movs	r2, #0
 800834a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800834e:	2301      	movs	r3, #1
 8008350:	e020      	b.n	8008394 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8008352:	68bb      	ldr	r3, [r7, #8]
 8008354:	0c1b      	lsrs	r3, r3, #16
 8008356:	b2db      	uxtb	r3, r3
 8008358:	2b01      	cmp	r3, #1
 800835a:	d10c      	bne.n	8008376 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 800835c:	68fb      	ldr	r3, [r7, #12]
 800835e:	681b      	ldr	r3, [r3, #0]
 8008360:	695b      	ldr	r3, [r3, #20]
 8008362:	43da      	mvns	r2, r3
 8008364:	68bb      	ldr	r3, [r7, #8]
 8008366:	4013      	ands	r3, r2
 8008368:	b29b      	uxth	r3, r3
 800836a:	2b00      	cmp	r3, #0
 800836c:	bf14      	ite	ne
 800836e:	2301      	movne	r3, #1
 8008370:	2300      	moveq	r3, #0
 8008372:	b2db      	uxtb	r3, r3
 8008374:	e00b      	b.n	800838e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8008376:	68fb      	ldr	r3, [r7, #12]
 8008378:	681b      	ldr	r3, [r3, #0]
 800837a:	699b      	ldr	r3, [r3, #24]
 800837c:	43da      	mvns	r2, r3
 800837e:	68bb      	ldr	r3, [r7, #8]
 8008380:	4013      	ands	r3, r2
 8008382:	b29b      	uxth	r3, r3
 8008384:	2b00      	cmp	r3, #0
 8008386:	bf14      	ite	ne
 8008388:	2301      	movne	r3, #1
 800838a:	2300      	moveq	r3, #0
 800838c:	b2db      	uxtb	r3, r3
 800838e:	2b00      	cmp	r3, #0
 8008390:	d18d      	bne.n	80082ae <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8008392:	2300      	movs	r3, #0
}
 8008394:	4618      	mov	r0, r3
 8008396:	3710      	adds	r7, #16
 8008398:	46bd      	mov	sp, r7
 800839a:	bd80      	pop	{r7, pc}

0800839c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800839c:	b580      	push	{r7, lr}
 800839e:	b084      	sub	sp, #16
 80083a0:	af00      	add	r7, sp, #0
 80083a2:	60f8      	str	r0, [r7, #12]
 80083a4:	60b9      	str	r1, [r7, #8]
 80083a6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80083a8:	e02d      	b.n	8008406 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80083aa:	68f8      	ldr	r0, [r7, #12]
 80083ac:	f000 f8ce 	bl	800854c <I2C_IsAcknowledgeFailed>
 80083b0:	4603      	mov	r3, r0
 80083b2:	2b00      	cmp	r3, #0
 80083b4:	d001      	beq.n	80083ba <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80083b6:	2301      	movs	r3, #1
 80083b8:	e02d      	b.n	8008416 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80083ba:	68bb      	ldr	r3, [r7, #8]
 80083bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80083c0:	d021      	beq.n	8008406 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80083c2:	f7fe fced 	bl	8006da0 <HAL_GetTick>
 80083c6:	4602      	mov	r2, r0
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	1ad3      	subs	r3, r2, r3
 80083cc:	68ba      	ldr	r2, [r7, #8]
 80083ce:	429a      	cmp	r2, r3
 80083d0:	d302      	bcc.n	80083d8 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80083d2:	68bb      	ldr	r3, [r7, #8]
 80083d4:	2b00      	cmp	r3, #0
 80083d6:	d116      	bne.n	8008406 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80083d8:	68fb      	ldr	r3, [r7, #12]
 80083da:	2200      	movs	r2, #0
 80083dc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80083de:	68fb      	ldr	r3, [r7, #12]
 80083e0:	2220      	movs	r2, #32
 80083e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80083e6:	68fb      	ldr	r3, [r7, #12]
 80083e8:	2200      	movs	r2, #0
 80083ea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80083ee:	68fb      	ldr	r3, [r7, #12]
 80083f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80083f2:	f043 0220 	orr.w	r2, r3, #32
 80083f6:	68fb      	ldr	r3, [r7, #12]
 80083f8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80083fa:	68fb      	ldr	r3, [r7, #12]
 80083fc:	2200      	movs	r2, #0
 80083fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8008402:	2301      	movs	r3, #1
 8008404:	e007      	b.n	8008416 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8008406:	68fb      	ldr	r3, [r7, #12]
 8008408:	681b      	ldr	r3, [r3, #0]
 800840a:	695b      	ldr	r3, [r3, #20]
 800840c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008410:	2b80      	cmp	r3, #128	; 0x80
 8008412:	d1ca      	bne.n	80083aa <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8008414:	2300      	movs	r3, #0
}
 8008416:	4618      	mov	r0, r3
 8008418:	3710      	adds	r7, #16
 800841a:	46bd      	mov	sp, r7
 800841c:	bd80      	pop	{r7, pc}

0800841e <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800841e:	b580      	push	{r7, lr}
 8008420:	b084      	sub	sp, #16
 8008422:	af00      	add	r7, sp, #0
 8008424:	60f8      	str	r0, [r7, #12]
 8008426:	60b9      	str	r1, [r7, #8]
 8008428:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800842a:	e02d      	b.n	8008488 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800842c:	68f8      	ldr	r0, [r7, #12]
 800842e:	f000 f88d 	bl	800854c <I2C_IsAcknowledgeFailed>
 8008432:	4603      	mov	r3, r0
 8008434:	2b00      	cmp	r3, #0
 8008436:	d001      	beq.n	800843c <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8008438:	2301      	movs	r3, #1
 800843a:	e02d      	b.n	8008498 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800843c:	68bb      	ldr	r3, [r7, #8]
 800843e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008442:	d021      	beq.n	8008488 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008444:	f7fe fcac 	bl	8006da0 <HAL_GetTick>
 8008448:	4602      	mov	r2, r0
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	1ad3      	subs	r3, r2, r3
 800844e:	68ba      	ldr	r2, [r7, #8]
 8008450:	429a      	cmp	r2, r3
 8008452:	d302      	bcc.n	800845a <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8008454:	68bb      	ldr	r3, [r7, #8]
 8008456:	2b00      	cmp	r3, #0
 8008458:	d116      	bne.n	8008488 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800845a:	68fb      	ldr	r3, [r7, #12]
 800845c:	2200      	movs	r2, #0
 800845e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8008460:	68fb      	ldr	r3, [r7, #12]
 8008462:	2220      	movs	r2, #32
 8008464:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008468:	68fb      	ldr	r3, [r7, #12]
 800846a:	2200      	movs	r2, #0
 800846c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8008470:	68fb      	ldr	r3, [r7, #12]
 8008472:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008474:	f043 0220 	orr.w	r2, r3, #32
 8008478:	68fb      	ldr	r3, [r7, #12]
 800847a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800847c:	68fb      	ldr	r3, [r7, #12]
 800847e:	2200      	movs	r2, #0
 8008480:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8008484:	2301      	movs	r3, #1
 8008486:	e007      	b.n	8008498 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8008488:	68fb      	ldr	r3, [r7, #12]
 800848a:	681b      	ldr	r3, [r3, #0]
 800848c:	695b      	ldr	r3, [r3, #20]
 800848e:	f003 0304 	and.w	r3, r3, #4
 8008492:	2b04      	cmp	r3, #4
 8008494:	d1ca      	bne.n	800842c <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8008496:	2300      	movs	r3, #0
}
 8008498:	4618      	mov	r0, r3
 800849a:	3710      	adds	r7, #16
 800849c:	46bd      	mov	sp, r7
 800849e:	bd80      	pop	{r7, pc}

080084a0 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80084a0:	b580      	push	{r7, lr}
 80084a2:	b084      	sub	sp, #16
 80084a4:	af00      	add	r7, sp, #0
 80084a6:	60f8      	str	r0, [r7, #12]
 80084a8:	60b9      	str	r1, [r7, #8]
 80084aa:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80084ac:	e042      	b.n	8008534 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80084ae:	68fb      	ldr	r3, [r7, #12]
 80084b0:	681b      	ldr	r3, [r3, #0]
 80084b2:	695b      	ldr	r3, [r3, #20]
 80084b4:	f003 0310 	and.w	r3, r3, #16
 80084b8:	2b10      	cmp	r3, #16
 80084ba:	d119      	bne.n	80084f0 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80084bc:	68fb      	ldr	r3, [r7, #12]
 80084be:	681b      	ldr	r3, [r3, #0]
 80084c0:	f06f 0210 	mvn.w	r2, #16
 80084c4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80084c6:	68fb      	ldr	r3, [r7, #12]
 80084c8:	2200      	movs	r2, #0
 80084ca:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80084cc:	68fb      	ldr	r3, [r7, #12]
 80084ce:	2220      	movs	r2, #32
 80084d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80084d4:	68fb      	ldr	r3, [r7, #12]
 80084d6:	2200      	movs	r2, #0
 80084d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80084dc:	68fb      	ldr	r3, [r7, #12]
 80084de:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80084e0:	68fb      	ldr	r3, [r7, #12]
 80084e2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80084e4:	68fb      	ldr	r3, [r7, #12]
 80084e6:	2200      	movs	r2, #0
 80084e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80084ec:	2301      	movs	r3, #1
 80084ee:	e029      	b.n	8008544 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80084f0:	f7fe fc56 	bl	8006da0 <HAL_GetTick>
 80084f4:	4602      	mov	r2, r0
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	1ad3      	subs	r3, r2, r3
 80084fa:	68ba      	ldr	r2, [r7, #8]
 80084fc:	429a      	cmp	r2, r3
 80084fe:	d302      	bcc.n	8008506 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8008500:	68bb      	ldr	r3, [r7, #8]
 8008502:	2b00      	cmp	r3, #0
 8008504:	d116      	bne.n	8008534 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8008506:	68fb      	ldr	r3, [r7, #12]
 8008508:	2200      	movs	r2, #0
 800850a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800850c:	68fb      	ldr	r3, [r7, #12]
 800850e:	2220      	movs	r2, #32
 8008510:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008514:	68fb      	ldr	r3, [r7, #12]
 8008516:	2200      	movs	r2, #0
 8008518:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800851c:	68fb      	ldr	r3, [r7, #12]
 800851e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008520:	f043 0220 	orr.w	r2, r3, #32
 8008524:	68fb      	ldr	r3, [r7, #12]
 8008526:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8008528:	68fb      	ldr	r3, [r7, #12]
 800852a:	2200      	movs	r2, #0
 800852c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8008530:	2301      	movs	r3, #1
 8008532:	e007      	b.n	8008544 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8008534:	68fb      	ldr	r3, [r7, #12]
 8008536:	681b      	ldr	r3, [r3, #0]
 8008538:	695b      	ldr	r3, [r3, #20]
 800853a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800853e:	2b40      	cmp	r3, #64	; 0x40
 8008540:	d1b5      	bne.n	80084ae <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8008542:	2300      	movs	r3, #0
}
 8008544:	4618      	mov	r0, r3
 8008546:	3710      	adds	r7, #16
 8008548:	46bd      	mov	sp, r7
 800854a:	bd80      	pop	{r7, pc}

0800854c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800854c:	b480      	push	{r7}
 800854e:	b083      	sub	sp, #12
 8008550:	af00      	add	r7, sp, #0
 8008552:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	681b      	ldr	r3, [r3, #0]
 8008558:	695b      	ldr	r3, [r3, #20]
 800855a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800855e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008562:	d11b      	bne.n	800859c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	681b      	ldr	r3, [r3, #0]
 8008568:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800856c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	2200      	movs	r2, #0
 8008572:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	2220      	movs	r2, #32
 8008578:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	2200      	movs	r2, #0
 8008580:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008588:	f043 0204 	orr.w	r2, r3, #4
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	2200      	movs	r2, #0
 8008594:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8008598:	2301      	movs	r3, #1
 800859a:	e000      	b.n	800859e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800859c:	2300      	movs	r3, #0
}
 800859e:	4618      	mov	r0, r3
 80085a0:	370c      	adds	r7, #12
 80085a2:	46bd      	mov	sp, r7
 80085a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085a8:	4770      	bx	lr
	...

080085ac <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80085ac:	b580      	push	{r7, lr}
 80085ae:	b086      	sub	sp, #24
 80085b0:	af00      	add	r7, sp, #0
 80085b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	2b00      	cmp	r3, #0
 80085b8:	d101      	bne.n	80085be <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80085ba:	2301      	movs	r3, #1
 80085bc:	e267      	b.n	8008a8e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	681b      	ldr	r3, [r3, #0]
 80085c2:	f003 0301 	and.w	r3, r3, #1
 80085c6:	2b00      	cmp	r3, #0
 80085c8:	d075      	beq.n	80086b6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80085ca:	4b88      	ldr	r3, [pc, #544]	; (80087ec <HAL_RCC_OscConfig+0x240>)
 80085cc:	689b      	ldr	r3, [r3, #8]
 80085ce:	f003 030c 	and.w	r3, r3, #12
 80085d2:	2b04      	cmp	r3, #4
 80085d4:	d00c      	beq.n	80085f0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80085d6:	4b85      	ldr	r3, [pc, #532]	; (80087ec <HAL_RCC_OscConfig+0x240>)
 80085d8:	689b      	ldr	r3, [r3, #8]
 80085da:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80085de:	2b08      	cmp	r3, #8
 80085e0:	d112      	bne.n	8008608 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80085e2:	4b82      	ldr	r3, [pc, #520]	; (80087ec <HAL_RCC_OscConfig+0x240>)
 80085e4:	685b      	ldr	r3, [r3, #4]
 80085e6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80085ea:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80085ee:	d10b      	bne.n	8008608 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80085f0:	4b7e      	ldr	r3, [pc, #504]	; (80087ec <HAL_RCC_OscConfig+0x240>)
 80085f2:	681b      	ldr	r3, [r3, #0]
 80085f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80085f8:	2b00      	cmp	r3, #0
 80085fa:	d05b      	beq.n	80086b4 <HAL_RCC_OscConfig+0x108>
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	685b      	ldr	r3, [r3, #4]
 8008600:	2b00      	cmp	r3, #0
 8008602:	d157      	bne.n	80086b4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8008604:	2301      	movs	r3, #1
 8008606:	e242      	b.n	8008a8e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	685b      	ldr	r3, [r3, #4]
 800860c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008610:	d106      	bne.n	8008620 <HAL_RCC_OscConfig+0x74>
 8008612:	4b76      	ldr	r3, [pc, #472]	; (80087ec <HAL_RCC_OscConfig+0x240>)
 8008614:	681b      	ldr	r3, [r3, #0]
 8008616:	4a75      	ldr	r2, [pc, #468]	; (80087ec <HAL_RCC_OscConfig+0x240>)
 8008618:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800861c:	6013      	str	r3, [r2, #0]
 800861e:	e01d      	b.n	800865c <HAL_RCC_OscConfig+0xb0>
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	685b      	ldr	r3, [r3, #4]
 8008624:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008628:	d10c      	bne.n	8008644 <HAL_RCC_OscConfig+0x98>
 800862a:	4b70      	ldr	r3, [pc, #448]	; (80087ec <HAL_RCC_OscConfig+0x240>)
 800862c:	681b      	ldr	r3, [r3, #0]
 800862e:	4a6f      	ldr	r2, [pc, #444]	; (80087ec <HAL_RCC_OscConfig+0x240>)
 8008630:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8008634:	6013      	str	r3, [r2, #0]
 8008636:	4b6d      	ldr	r3, [pc, #436]	; (80087ec <HAL_RCC_OscConfig+0x240>)
 8008638:	681b      	ldr	r3, [r3, #0]
 800863a:	4a6c      	ldr	r2, [pc, #432]	; (80087ec <HAL_RCC_OscConfig+0x240>)
 800863c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008640:	6013      	str	r3, [r2, #0]
 8008642:	e00b      	b.n	800865c <HAL_RCC_OscConfig+0xb0>
 8008644:	4b69      	ldr	r3, [pc, #420]	; (80087ec <HAL_RCC_OscConfig+0x240>)
 8008646:	681b      	ldr	r3, [r3, #0]
 8008648:	4a68      	ldr	r2, [pc, #416]	; (80087ec <HAL_RCC_OscConfig+0x240>)
 800864a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800864e:	6013      	str	r3, [r2, #0]
 8008650:	4b66      	ldr	r3, [pc, #408]	; (80087ec <HAL_RCC_OscConfig+0x240>)
 8008652:	681b      	ldr	r3, [r3, #0]
 8008654:	4a65      	ldr	r2, [pc, #404]	; (80087ec <HAL_RCC_OscConfig+0x240>)
 8008656:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800865a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	685b      	ldr	r3, [r3, #4]
 8008660:	2b00      	cmp	r3, #0
 8008662:	d013      	beq.n	800868c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008664:	f7fe fb9c 	bl	8006da0 <HAL_GetTick>
 8008668:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800866a:	e008      	b.n	800867e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800866c:	f7fe fb98 	bl	8006da0 <HAL_GetTick>
 8008670:	4602      	mov	r2, r0
 8008672:	693b      	ldr	r3, [r7, #16]
 8008674:	1ad3      	subs	r3, r2, r3
 8008676:	2b64      	cmp	r3, #100	; 0x64
 8008678:	d901      	bls.n	800867e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800867a:	2303      	movs	r3, #3
 800867c:	e207      	b.n	8008a8e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800867e:	4b5b      	ldr	r3, [pc, #364]	; (80087ec <HAL_RCC_OscConfig+0x240>)
 8008680:	681b      	ldr	r3, [r3, #0]
 8008682:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008686:	2b00      	cmp	r3, #0
 8008688:	d0f0      	beq.n	800866c <HAL_RCC_OscConfig+0xc0>
 800868a:	e014      	b.n	80086b6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800868c:	f7fe fb88 	bl	8006da0 <HAL_GetTick>
 8008690:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8008692:	e008      	b.n	80086a6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8008694:	f7fe fb84 	bl	8006da0 <HAL_GetTick>
 8008698:	4602      	mov	r2, r0
 800869a:	693b      	ldr	r3, [r7, #16]
 800869c:	1ad3      	subs	r3, r2, r3
 800869e:	2b64      	cmp	r3, #100	; 0x64
 80086a0:	d901      	bls.n	80086a6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80086a2:	2303      	movs	r3, #3
 80086a4:	e1f3      	b.n	8008a8e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80086a6:	4b51      	ldr	r3, [pc, #324]	; (80087ec <HAL_RCC_OscConfig+0x240>)
 80086a8:	681b      	ldr	r3, [r3, #0]
 80086aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80086ae:	2b00      	cmp	r3, #0
 80086b0:	d1f0      	bne.n	8008694 <HAL_RCC_OscConfig+0xe8>
 80086b2:	e000      	b.n	80086b6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80086b4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	681b      	ldr	r3, [r3, #0]
 80086ba:	f003 0302 	and.w	r3, r3, #2
 80086be:	2b00      	cmp	r3, #0
 80086c0:	d063      	beq.n	800878a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80086c2:	4b4a      	ldr	r3, [pc, #296]	; (80087ec <HAL_RCC_OscConfig+0x240>)
 80086c4:	689b      	ldr	r3, [r3, #8]
 80086c6:	f003 030c 	and.w	r3, r3, #12
 80086ca:	2b00      	cmp	r3, #0
 80086cc:	d00b      	beq.n	80086e6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80086ce:	4b47      	ldr	r3, [pc, #284]	; (80087ec <HAL_RCC_OscConfig+0x240>)
 80086d0:	689b      	ldr	r3, [r3, #8]
 80086d2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80086d6:	2b08      	cmp	r3, #8
 80086d8:	d11c      	bne.n	8008714 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80086da:	4b44      	ldr	r3, [pc, #272]	; (80087ec <HAL_RCC_OscConfig+0x240>)
 80086dc:	685b      	ldr	r3, [r3, #4]
 80086de:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80086e2:	2b00      	cmp	r3, #0
 80086e4:	d116      	bne.n	8008714 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80086e6:	4b41      	ldr	r3, [pc, #260]	; (80087ec <HAL_RCC_OscConfig+0x240>)
 80086e8:	681b      	ldr	r3, [r3, #0]
 80086ea:	f003 0302 	and.w	r3, r3, #2
 80086ee:	2b00      	cmp	r3, #0
 80086f0:	d005      	beq.n	80086fe <HAL_RCC_OscConfig+0x152>
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	68db      	ldr	r3, [r3, #12]
 80086f6:	2b01      	cmp	r3, #1
 80086f8:	d001      	beq.n	80086fe <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80086fa:	2301      	movs	r3, #1
 80086fc:	e1c7      	b.n	8008a8e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80086fe:	4b3b      	ldr	r3, [pc, #236]	; (80087ec <HAL_RCC_OscConfig+0x240>)
 8008700:	681b      	ldr	r3, [r3, #0]
 8008702:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	691b      	ldr	r3, [r3, #16]
 800870a:	00db      	lsls	r3, r3, #3
 800870c:	4937      	ldr	r1, [pc, #220]	; (80087ec <HAL_RCC_OscConfig+0x240>)
 800870e:	4313      	orrs	r3, r2
 8008710:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8008712:	e03a      	b.n	800878a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	68db      	ldr	r3, [r3, #12]
 8008718:	2b00      	cmp	r3, #0
 800871a:	d020      	beq.n	800875e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800871c:	4b34      	ldr	r3, [pc, #208]	; (80087f0 <HAL_RCC_OscConfig+0x244>)
 800871e:	2201      	movs	r2, #1
 8008720:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008722:	f7fe fb3d 	bl	8006da0 <HAL_GetTick>
 8008726:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008728:	e008      	b.n	800873c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800872a:	f7fe fb39 	bl	8006da0 <HAL_GetTick>
 800872e:	4602      	mov	r2, r0
 8008730:	693b      	ldr	r3, [r7, #16]
 8008732:	1ad3      	subs	r3, r2, r3
 8008734:	2b02      	cmp	r3, #2
 8008736:	d901      	bls.n	800873c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8008738:	2303      	movs	r3, #3
 800873a:	e1a8      	b.n	8008a8e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800873c:	4b2b      	ldr	r3, [pc, #172]	; (80087ec <HAL_RCC_OscConfig+0x240>)
 800873e:	681b      	ldr	r3, [r3, #0]
 8008740:	f003 0302 	and.w	r3, r3, #2
 8008744:	2b00      	cmp	r3, #0
 8008746:	d0f0      	beq.n	800872a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008748:	4b28      	ldr	r3, [pc, #160]	; (80087ec <HAL_RCC_OscConfig+0x240>)
 800874a:	681b      	ldr	r3, [r3, #0]
 800874c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	691b      	ldr	r3, [r3, #16]
 8008754:	00db      	lsls	r3, r3, #3
 8008756:	4925      	ldr	r1, [pc, #148]	; (80087ec <HAL_RCC_OscConfig+0x240>)
 8008758:	4313      	orrs	r3, r2
 800875a:	600b      	str	r3, [r1, #0]
 800875c:	e015      	b.n	800878a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800875e:	4b24      	ldr	r3, [pc, #144]	; (80087f0 <HAL_RCC_OscConfig+0x244>)
 8008760:	2200      	movs	r2, #0
 8008762:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008764:	f7fe fb1c 	bl	8006da0 <HAL_GetTick>
 8008768:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800876a:	e008      	b.n	800877e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800876c:	f7fe fb18 	bl	8006da0 <HAL_GetTick>
 8008770:	4602      	mov	r2, r0
 8008772:	693b      	ldr	r3, [r7, #16]
 8008774:	1ad3      	subs	r3, r2, r3
 8008776:	2b02      	cmp	r3, #2
 8008778:	d901      	bls.n	800877e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800877a:	2303      	movs	r3, #3
 800877c:	e187      	b.n	8008a8e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800877e:	4b1b      	ldr	r3, [pc, #108]	; (80087ec <HAL_RCC_OscConfig+0x240>)
 8008780:	681b      	ldr	r3, [r3, #0]
 8008782:	f003 0302 	and.w	r3, r3, #2
 8008786:	2b00      	cmp	r3, #0
 8008788:	d1f0      	bne.n	800876c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	681b      	ldr	r3, [r3, #0]
 800878e:	f003 0308 	and.w	r3, r3, #8
 8008792:	2b00      	cmp	r3, #0
 8008794:	d036      	beq.n	8008804 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	695b      	ldr	r3, [r3, #20]
 800879a:	2b00      	cmp	r3, #0
 800879c:	d016      	beq.n	80087cc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800879e:	4b15      	ldr	r3, [pc, #84]	; (80087f4 <HAL_RCC_OscConfig+0x248>)
 80087a0:	2201      	movs	r2, #1
 80087a2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80087a4:	f7fe fafc 	bl	8006da0 <HAL_GetTick>
 80087a8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80087aa:	e008      	b.n	80087be <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80087ac:	f7fe faf8 	bl	8006da0 <HAL_GetTick>
 80087b0:	4602      	mov	r2, r0
 80087b2:	693b      	ldr	r3, [r7, #16]
 80087b4:	1ad3      	subs	r3, r2, r3
 80087b6:	2b02      	cmp	r3, #2
 80087b8:	d901      	bls.n	80087be <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80087ba:	2303      	movs	r3, #3
 80087bc:	e167      	b.n	8008a8e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80087be:	4b0b      	ldr	r3, [pc, #44]	; (80087ec <HAL_RCC_OscConfig+0x240>)
 80087c0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80087c2:	f003 0302 	and.w	r3, r3, #2
 80087c6:	2b00      	cmp	r3, #0
 80087c8:	d0f0      	beq.n	80087ac <HAL_RCC_OscConfig+0x200>
 80087ca:	e01b      	b.n	8008804 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80087cc:	4b09      	ldr	r3, [pc, #36]	; (80087f4 <HAL_RCC_OscConfig+0x248>)
 80087ce:	2200      	movs	r2, #0
 80087d0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80087d2:	f7fe fae5 	bl	8006da0 <HAL_GetTick>
 80087d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80087d8:	e00e      	b.n	80087f8 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80087da:	f7fe fae1 	bl	8006da0 <HAL_GetTick>
 80087de:	4602      	mov	r2, r0
 80087e0:	693b      	ldr	r3, [r7, #16]
 80087e2:	1ad3      	subs	r3, r2, r3
 80087e4:	2b02      	cmp	r3, #2
 80087e6:	d907      	bls.n	80087f8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80087e8:	2303      	movs	r3, #3
 80087ea:	e150      	b.n	8008a8e <HAL_RCC_OscConfig+0x4e2>
 80087ec:	40023800 	.word	0x40023800
 80087f0:	42470000 	.word	0x42470000
 80087f4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80087f8:	4b88      	ldr	r3, [pc, #544]	; (8008a1c <HAL_RCC_OscConfig+0x470>)
 80087fa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80087fc:	f003 0302 	and.w	r3, r3, #2
 8008800:	2b00      	cmp	r3, #0
 8008802:	d1ea      	bne.n	80087da <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	681b      	ldr	r3, [r3, #0]
 8008808:	f003 0304 	and.w	r3, r3, #4
 800880c:	2b00      	cmp	r3, #0
 800880e:	f000 8097 	beq.w	8008940 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8008812:	2300      	movs	r3, #0
 8008814:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8008816:	4b81      	ldr	r3, [pc, #516]	; (8008a1c <HAL_RCC_OscConfig+0x470>)
 8008818:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800881a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800881e:	2b00      	cmp	r3, #0
 8008820:	d10f      	bne.n	8008842 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8008822:	2300      	movs	r3, #0
 8008824:	60bb      	str	r3, [r7, #8]
 8008826:	4b7d      	ldr	r3, [pc, #500]	; (8008a1c <HAL_RCC_OscConfig+0x470>)
 8008828:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800882a:	4a7c      	ldr	r2, [pc, #496]	; (8008a1c <HAL_RCC_OscConfig+0x470>)
 800882c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008830:	6413      	str	r3, [r2, #64]	; 0x40
 8008832:	4b7a      	ldr	r3, [pc, #488]	; (8008a1c <HAL_RCC_OscConfig+0x470>)
 8008834:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008836:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800883a:	60bb      	str	r3, [r7, #8]
 800883c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800883e:	2301      	movs	r3, #1
 8008840:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008842:	4b77      	ldr	r3, [pc, #476]	; (8008a20 <HAL_RCC_OscConfig+0x474>)
 8008844:	681b      	ldr	r3, [r3, #0]
 8008846:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800884a:	2b00      	cmp	r3, #0
 800884c:	d118      	bne.n	8008880 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800884e:	4b74      	ldr	r3, [pc, #464]	; (8008a20 <HAL_RCC_OscConfig+0x474>)
 8008850:	681b      	ldr	r3, [r3, #0]
 8008852:	4a73      	ldr	r2, [pc, #460]	; (8008a20 <HAL_RCC_OscConfig+0x474>)
 8008854:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008858:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800885a:	f7fe faa1 	bl	8006da0 <HAL_GetTick>
 800885e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008860:	e008      	b.n	8008874 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008862:	f7fe fa9d 	bl	8006da0 <HAL_GetTick>
 8008866:	4602      	mov	r2, r0
 8008868:	693b      	ldr	r3, [r7, #16]
 800886a:	1ad3      	subs	r3, r2, r3
 800886c:	2b02      	cmp	r3, #2
 800886e:	d901      	bls.n	8008874 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8008870:	2303      	movs	r3, #3
 8008872:	e10c      	b.n	8008a8e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008874:	4b6a      	ldr	r3, [pc, #424]	; (8008a20 <HAL_RCC_OscConfig+0x474>)
 8008876:	681b      	ldr	r3, [r3, #0]
 8008878:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800887c:	2b00      	cmp	r3, #0
 800887e:	d0f0      	beq.n	8008862 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	689b      	ldr	r3, [r3, #8]
 8008884:	2b01      	cmp	r3, #1
 8008886:	d106      	bne.n	8008896 <HAL_RCC_OscConfig+0x2ea>
 8008888:	4b64      	ldr	r3, [pc, #400]	; (8008a1c <HAL_RCC_OscConfig+0x470>)
 800888a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800888c:	4a63      	ldr	r2, [pc, #396]	; (8008a1c <HAL_RCC_OscConfig+0x470>)
 800888e:	f043 0301 	orr.w	r3, r3, #1
 8008892:	6713      	str	r3, [r2, #112]	; 0x70
 8008894:	e01c      	b.n	80088d0 <HAL_RCC_OscConfig+0x324>
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	689b      	ldr	r3, [r3, #8]
 800889a:	2b05      	cmp	r3, #5
 800889c:	d10c      	bne.n	80088b8 <HAL_RCC_OscConfig+0x30c>
 800889e:	4b5f      	ldr	r3, [pc, #380]	; (8008a1c <HAL_RCC_OscConfig+0x470>)
 80088a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80088a2:	4a5e      	ldr	r2, [pc, #376]	; (8008a1c <HAL_RCC_OscConfig+0x470>)
 80088a4:	f043 0304 	orr.w	r3, r3, #4
 80088a8:	6713      	str	r3, [r2, #112]	; 0x70
 80088aa:	4b5c      	ldr	r3, [pc, #368]	; (8008a1c <HAL_RCC_OscConfig+0x470>)
 80088ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80088ae:	4a5b      	ldr	r2, [pc, #364]	; (8008a1c <HAL_RCC_OscConfig+0x470>)
 80088b0:	f043 0301 	orr.w	r3, r3, #1
 80088b4:	6713      	str	r3, [r2, #112]	; 0x70
 80088b6:	e00b      	b.n	80088d0 <HAL_RCC_OscConfig+0x324>
 80088b8:	4b58      	ldr	r3, [pc, #352]	; (8008a1c <HAL_RCC_OscConfig+0x470>)
 80088ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80088bc:	4a57      	ldr	r2, [pc, #348]	; (8008a1c <HAL_RCC_OscConfig+0x470>)
 80088be:	f023 0301 	bic.w	r3, r3, #1
 80088c2:	6713      	str	r3, [r2, #112]	; 0x70
 80088c4:	4b55      	ldr	r3, [pc, #340]	; (8008a1c <HAL_RCC_OscConfig+0x470>)
 80088c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80088c8:	4a54      	ldr	r2, [pc, #336]	; (8008a1c <HAL_RCC_OscConfig+0x470>)
 80088ca:	f023 0304 	bic.w	r3, r3, #4
 80088ce:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	689b      	ldr	r3, [r3, #8]
 80088d4:	2b00      	cmp	r3, #0
 80088d6:	d015      	beq.n	8008904 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80088d8:	f7fe fa62 	bl	8006da0 <HAL_GetTick>
 80088dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80088de:	e00a      	b.n	80088f6 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80088e0:	f7fe fa5e 	bl	8006da0 <HAL_GetTick>
 80088e4:	4602      	mov	r2, r0
 80088e6:	693b      	ldr	r3, [r7, #16]
 80088e8:	1ad3      	subs	r3, r2, r3
 80088ea:	f241 3288 	movw	r2, #5000	; 0x1388
 80088ee:	4293      	cmp	r3, r2
 80088f0:	d901      	bls.n	80088f6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80088f2:	2303      	movs	r3, #3
 80088f4:	e0cb      	b.n	8008a8e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80088f6:	4b49      	ldr	r3, [pc, #292]	; (8008a1c <HAL_RCC_OscConfig+0x470>)
 80088f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80088fa:	f003 0302 	and.w	r3, r3, #2
 80088fe:	2b00      	cmp	r3, #0
 8008900:	d0ee      	beq.n	80088e0 <HAL_RCC_OscConfig+0x334>
 8008902:	e014      	b.n	800892e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008904:	f7fe fa4c 	bl	8006da0 <HAL_GetTick>
 8008908:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800890a:	e00a      	b.n	8008922 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800890c:	f7fe fa48 	bl	8006da0 <HAL_GetTick>
 8008910:	4602      	mov	r2, r0
 8008912:	693b      	ldr	r3, [r7, #16]
 8008914:	1ad3      	subs	r3, r2, r3
 8008916:	f241 3288 	movw	r2, #5000	; 0x1388
 800891a:	4293      	cmp	r3, r2
 800891c:	d901      	bls.n	8008922 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800891e:	2303      	movs	r3, #3
 8008920:	e0b5      	b.n	8008a8e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008922:	4b3e      	ldr	r3, [pc, #248]	; (8008a1c <HAL_RCC_OscConfig+0x470>)
 8008924:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008926:	f003 0302 	and.w	r3, r3, #2
 800892a:	2b00      	cmp	r3, #0
 800892c:	d1ee      	bne.n	800890c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800892e:	7dfb      	ldrb	r3, [r7, #23]
 8008930:	2b01      	cmp	r3, #1
 8008932:	d105      	bne.n	8008940 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008934:	4b39      	ldr	r3, [pc, #228]	; (8008a1c <HAL_RCC_OscConfig+0x470>)
 8008936:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008938:	4a38      	ldr	r2, [pc, #224]	; (8008a1c <HAL_RCC_OscConfig+0x470>)
 800893a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800893e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	699b      	ldr	r3, [r3, #24]
 8008944:	2b00      	cmp	r3, #0
 8008946:	f000 80a1 	beq.w	8008a8c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800894a:	4b34      	ldr	r3, [pc, #208]	; (8008a1c <HAL_RCC_OscConfig+0x470>)
 800894c:	689b      	ldr	r3, [r3, #8]
 800894e:	f003 030c 	and.w	r3, r3, #12
 8008952:	2b08      	cmp	r3, #8
 8008954:	d05c      	beq.n	8008a10 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	699b      	ldr	r3, [r3, #24]
 800895a:	2b02      	cmp	r3, #2
 800895c:	d141      	bne.n	80089e2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800895e:	4b31      	ldr	r3, [pc, #196]	; (8008a24 <HAL_RCC_OscConfig+0x478>)
 8008960:	2200      	movs	r2, #0
 8008962:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008964:	f7fe fa1c 	bl	8006da0 <HAL_GetTick>
 8008968:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800896a:	e008      	b.n	800897e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800896c:	f7fe fa18 	bl	8006da0 <HAL_GetTick>
 8008970:	4602      	mov	r2, r0
 8008972:	693b      	ldr	r3, [r7, #16]
 8008974:	1ad3      	subs	r3, r2, r3
 8008976:	2b02      	cmp	r3, #2
 8008978:	d901      	bls.n	800897e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800897a:	2303      	movs	r3, #3
 800897c:	e087      	b.n	8008a8e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800897e:	4b27      	ldr	r3, [pc, #156]	; (8008a1c <HAL_RCC_OscConfig+0x470>)
 8008980:	681b      	ldr	r3, [r3, #0]
 8008982:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008986:	2b00      	cmp	r3, #0
 8008988:	d1f0      	bne.n	800896c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	69da      	ldr	r2, [r3, #28]
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	6a1b      	ldr	r3, [r3, #32]
 8008992:	431a      	orrs	r2, r3
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008998:	019b      	lsls	r3, r3, #6
 800899a:	431a      	orrs	r2, r3
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80089a0:	085b      	lsrs	r3, r3, #1
 80089a2:	3b01      	subs	r3, #1
 80089a4:	041b      	lsls	r3, r3, #16
 80089a6:	431a      	orrs	r2, r3
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80089ac:	061b      	lsls	r3, r3, #24
 80089ae:	491b      	ldr	r1, [pc, #108]	; (8008a1c <HAL_RCC_OscConfig+0x470>)
 80089b0:	4313      	orrs	r3, r2
 80089b2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80089b4:	4b1b      	ldr	r3, [pc, #108]	; (8008a24 <HAL_RCC_OscConfig+0x478>)
 80089b6:	2201      	movs	r2, #1
 80089b8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80089ba:	f7fe f9f1 	bl	8006da0 <HAL_GetTick>
 80089be:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80089c0:	e008      	b.n	80089d4 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80089c2:	f7fe f9ed 	bl	8006da0 <HAL_GetTick>
 80089c6:	4602      	mov	r2, r0
 80089c8:	693b      	ldr	r3, [r7, #16]
 80089ca:	1ad3      	subs	r3, r2, r3
 80089cc:	2b02      	cmp	r3, #2
 80089ce:	d901      	bls.n	80089d4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80089d0:	2303      	movs	r3, #3
 80089d2:	e05c      	b.n	8008a8e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80089d4:	4b11      	ldr	r3, [pc, #68]	; (8008a1c <HAL_RCC_OscConfig+0x470>)
 80089d6:	681b      	ldr	r3, [r3, #0]
 80089d8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80089dc:	2b00      	cmp	r3, #0
 80089de:	d0f0      	beq.n	80089c2 <HAL_RCC_OscConfig+0x416>
 80089e0:	e054      	b.n	8008a8c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80089e2:	4b10      	ldr	r3, [pc, #64]	; (8008a24 <HAL_RCC_OscConfig+0x478>)
 80089e4:	2200      	movs	r2, #0
 80089e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80089e8:	f7fe f9da 	bl	8006da0 <HAL_GetTick>
 80089ec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80089ee:	e008      	b.n	8008a02 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80089f0:	f7fe f9d6 	bl	8006da0 <HAL_GetTick>
 80089f4:	4602      	mov	r2, r0
 80089f6:	693b      	ldr	r3, [r7, #16]
 80089f8:	1ad3      	subs	r3, r2, r3
 80089fa:	2b02      	cmp	r3, #2
 80089fc:	d901      	bls.n	8008a02 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80089fe:	2303      	movs	r3, #3
 8008a00:	e045      	b.n	8008a8e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008a02:	4b06      	ldr	r3, [pc, #24]	; (8008a1c <HAL_RCC_OscConfig+0x470>)
 8008a04:	681b      	ldr	r3, [r3, #0]
 8008a06:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008a0a:	2b00      	cmp	r3, #0
 8008a0c:	d1f0      	bne.n	80089f0 <HAL_RCC_OscConfig+0x444>
 8008a0e:	e03d      	b.n	8008a8c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	699b      	ldr	r3, [r3, #24]
 8008a14:	2b01      	cmp	r3, #1
 8008a16:	d107      	bne.n	8008a28 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8008a18:	2301      	movs	r3, #1
 8008a1a:	e038      	b.n	8008a8e <HAL_RCC_OscConfig+0x4e2>
 8008a1c:	40023800 	.word	0x40023800
 8008a20:	40007000 	.word	0x40007000
 8008a24:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8008a28:	4b1b      	ldr	r3, [pc, #108]	; (8008a98 <HAL_RCC_OscConfig+0x4ec>)
 8008a2a:	685b      	ldr	r3, [r3, #4]
 8008a2c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	699b      	ldr	r3, [r3, #24]
 8008a32:	2b01      	cmp	r3, #1
 8008a34:	d028      	beq.n	8008a88 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008a36:	68fb      	ldr	r3, [r7, #12]
 8008a38:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008a40:	429a      	cmp	r2, r3
 8008a42:	d121      	bne.n	8008a88 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8008a44:	68fb      	ldr	r3, [r7, #12]
 8008a46:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008a4e:	429a      	cmp	r2, r3
 8008a50:	d11a      	bne.n	8008a88 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8008a52:	68fa      	ldr	r2, [r7, #12]
 8008a54:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8008a58:	4013      	ands	r3, r2
 8008a5a:	687a      	ldr	r2, [r7, #4]
 8008a5c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8008a5e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8008a60:	4293      	cmp	r3, r2
 8008a62:	d111      	bne.n	8008a88 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8008a64:	68fb      	ldr	r3, [r7, #12]
 8008a66:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008a6e:	085b      	lsrs	r3, r3, #1
 8008a70:	3b01      	subs	r3, #1
 8008a72:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8008a74:	429a      	cmp	r2, r3
 8008a76:	d107      	bne.n	8008a88 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8008a78:	68fb      	ldr	r3, [r7, #12]
 8008a7a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a82:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8008a84:	429a      	cmp	r2, r3
 8008a86:	d001      	beq.n	8008a8c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8008a88:	2301      	movs	r3, #1
 8008a8a:	e000      	b.n	8008a8e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8008a8c:	2300      	movs	r3, #0
}
 8008a8e:	4618      	mov	r0, r3
 8008a90:	3718      	adds	r7, #24
 8008a92:	46bd      	mov	sp, r7
 8008a94:	bd80      	pop	{r7, pc}
 8008a96:	bf00      	nop
 8008a98:	40023800 	.word	0x40023800

08008a9c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008a9c:	b580      	push	{r7, lr}
 8008a9e:	b084      	sub	sp, #16
 8008aa0:	af00      	add	r7, sp, #0
 8008aa2:	6078      	str	r0, [r7, #4]
 8008aa4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	2b00      	cmp	r3, #0
 8008aaa:	d101      	bne.n	8008ab0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8008aac:	2301      	movs	r3, #1
 8008aae:	e0cc      	b.n	8008c4a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8008ab0:	4b68      	ldr	r3, [pc, #416]	; (8008c54 <HAL_RCC_ClockConfig+0x1b8>)
 8008ab2:	681b      	ldr	r3, [r3, #0]
 8008ab4:	f003 0307 	and.w	r3, r3, #7
 8008ab8:	683a      	ldr	r2, [r7, #0]
 8008aba:	429a      	cmp	r2, r3
 8008abc:	d90c      	bls.n	8008ad8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008abe:	4b65      	ldr	r3, [pc, #404]	; (8008c54 <HAL_RCC_ClockConfig+0x1b8>)
 8008ac0:	683a      	ldr	r2, [r7, #0]
 8008ac2:	b2d2      	uxtb	r2, r2
 8008ac4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008ac6:	4b63      	ldr	r3, [pc, #396]	; (8008c54 <HAL_RCC_ClockConfig+0x1b8>)
 8008ac8:	681b      	ldr	r3, [r3, #0]
 8008aca:	f003 0307 	and.w	r3, r3, #7
 8008ace:	683a      	ldr	r2, [r7, #0]
 8008ad0:	429a      	cmp	r2, r3
 8008ad2:	d001      	beq.n	8008ad8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8008ad4:	2301      	movs	r3, #1
 8008ad6:	e0b8      	b.n	8008c4a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	681b      	ldr	r3, [r3, #0]
 8008adc:	f003 0302 	and.w	r3, r3, #2
 8008ae0:	2b00      	cmp	r3, #0
 8008ae2:	d020      	beq.n	8008b26 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	681b      	ldr	r3, [r3, #0]
 8008ae8:	f003 0304 	and.w	r3, r3, #4
 8008aec:	2b00      	cmp	r3, #0
 8008aee:	d005      	beq.n	8008afc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8008af0:	4b59      	ldr	r3, [pc, #356]	; (8008c58 <HAL_RCC_ClockConfig+0x1bc>)
 8008af2:	689b      	ldr	r3, [r3, #8]
 8008af4:	4a58      	ldr	r2, [pc, #352]	; (8008c58 <HAL_RCC_ClockConfig+0x1bc>)
 8008af6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8008afa:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	681b      	ldr	r3, [r3, #0]
 8008b00:	f003 0308 	and.w	r3, r3, #8
 8008b04:	2b00      	cmp	r3, #0
 8008b06:	d005      	beq.n	8008b14 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8008b08:	4b53      	ldr	r3, [pc, #332]	; (8008c58 <HAL_RCC_ClockConfig+0x1bc>)
 8008b0a:	689b      	ldr	r3, [r3, #8]
 8008b0c:	4a52      	ldr	r2, [pc, #328]	; (8008c58 <HAL_RCC_ClockConfig+0x1bc>)
 8008b0e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8008b12:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008b14:	4b50      	ldr	r3, [pc, #320]	; (8008c58 <HAL_RCC_ClockConfig+0x1bc>)
 8008b16:	689b      	ldr	r3, [r3, #8]
 8008b18:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	689b      	ldr	r3, [r3, #8]
 8008b20:	494d      	ldr	r1, [pc, #308]	; (8008c58 <HAL_RCC_ClockConfig+0x1bc>)
 8008b22:	4313      	orrs	r3, r2
 8008b24:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	681b      	ldr	r3, [r3, #0]
 8008b2a:	f003 0301 	and.w	r3, r3, #1
 8008b2e:	2b00      	cmp	r3, #0
 8008b30:	d044      	beq.n	8008bbc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	685b      	ldr	r3, [r3, #4]
 8008b36:	2b01      	cmp	r3, #1
 8008b38:	d107      	bne.n	8008b4a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008b3a:	4b47      	ldr	r3, [pc, #284]	; (8008c58 <HAL_RCC_ClockConfig+0x1bc>)
 8008b3c:	681b      	ldr	r3, [r3, #0]
 8008b3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008b42:	2b00      	cmp	r3, #0
 8008b44:	d119      	bne.n	8008b7a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008b46:	2301      	movs	r3, #1
 8008b48:	e07f      	b.n	8008c4a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	685b      	ldr	r3, [r3, #4]
 8008b4e:	2b02      	cmp	r3, #2
 8008b50:	d003      	beq.n	8008b5a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8008b56:	2b03      	cmp	r3, #3
 8008b58:	d107      	bne.n	8008b6a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008b5a:	4b3f      	ldr	r3, [pc, #252]	; (8008c58 <HAL_RCC_ClockConfig+0x1bc>)
 8008b5c:	681b      	ldr	r3, [r3, #0]
 8008b5e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008b62:	2b00      	cmp	r3, #0
 8008b64:	d109      	bne.n	8008b7a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008b66:	2301      	movs	r3, #1
 8008b68:	e06f      	b.n	8008c4a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008b6a:	4b3b      	ldr	r3, [pc, #236]	; (8008c58 <HAL_RCC_ClockConfig+0x1bc>)
 8008b6c:	681b      	ldr	r3, [r3, #0]
 8008b6e:	f003 0302 	and.w	r3, r3, #2
 8008b72:	2b00      	cmp	r3, #0
 8008b74:	d101      	bne.n	8008b7a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008b76:	2301      	movs	r3, #1
 8008b78:	e067      	b.n	8008c4a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8008b7a:	4b37      	ldr	r3, [pc, #220]	; (8008c58 <HAL_RCC_ClockConfig+0x1bc>)
 8008b7c:	689b      	ldr	r3, [r3, #8]
 8008b7e:	f023 0203 	bic.w	r2, r3, #3
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	685b      	ldr	r3, [r3, #4]
 8008b86:	4934      	ldr	r1, [pc, #208]	; (8008c58 <HAL_RCC_ClockConfig+0x1bc>)
 8008b88:	4313      	orrs	r3, r2
 8008b8a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8008b8c:	f7fe f908 	bl	8006da0 <HAL_GetTick>
 8008b90:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008b92:	e00a      	b.n	8008baa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008b94:	f7fe f904 	bl	8006da0 <HAL_GetTick>
 8008b98:	4602      	mov	r2, r0
 8008b9a:	68fb      	ldr	r3, [r7, #12]
 8008b9c:	1ad3      	subs	r3, r2, r3
 8008b9e:	f241 3288 	movw	r2, #5000	; 0x1388
 8008ba2:	4293      	cmp	r3, r2
 8008ba4:	d901      	bls.n	8008baa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8008ba6:	2303      	movs	r3, #3
 8008ba8:	e04f      	b.n	8008c4a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008baa:	4b2b      	ldr	r3, [pc, #172]	; (8008c58 <HAL_RCC_ClockConfig+0x1bc>)
 8008bac:	689b      	ldr	r3, [r3, #8]
 8008bae:	f003 020c 	and.w	r2, r3, #12
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	685b      	ldr	r3, [r3, #4]
 8008bb6:	009b      	lsls	r3, r3, #2
 8008bb8:	429a      	cmp	r2, r3
 8008bba:	d1eb      	bne.n	8008b94 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8008bbc:	4b25      	ldr	r3, [pc, #148]	; (8008c54 <HAL_RCC_ClockConfig+0x1b8>)
 8008bbe:	681b      	ldr	r3, [r3, #0]
 8008bc0:	f003 0307 	and.w	r3, r3, #7
 8008bc4:	683a      	ldr	r2, [r7, #0]
 8008bc6:	429a      	cmp	r2, r3
 8008bc8:	d20c      	bcs.n	8008be4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008bca:	4b22      	ldr	r3, [pc, #136]	; (8008c54 <HAL_RCC_ClockConfig+0x1b8>)
 8008bcc:	683a      	ldr	r2, [r7, #0]
 8008bce:	b2d2      	uxtb	r2, r2
 8008bd0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008bd2:	4b20      	ldr	r3, [pc, #128]	; (8008c54 <HAL_RCC_ClockConfig+0x1b8>)
 8008bd4:	681b      	ldr	r3, [r3, #0]
 8008bd6:	f003 0307 	and.w	r3, r3, #7
 8008bda:	683a      	ldr	r2, [r7, #0]
 8008bdc:	429a      	cmp	r2, r3
 8008bde:	d001      	beq.n	8008be4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8008be0:	2301      	movs	r3, #1
 8008be2:	e032      	b.n	8008c4a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	681b      	ldr	r3, [r3, #0]
 8008be8:	f003 0304 	and.w	r3, r3, #4
 8008bec:	2b00      	cmp	r3, #0
 8008bee:	d008      	beq.n	8008c02 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8008bf0:	4b19      	ldr	r3, [pc, #100]	; (8008c58 <HAL_RCC_ClockConfig+0x1bc>)
 8008bf2:	689b      	ldr	r3, [r3, #8]
 8008bf4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	68db      	ldr	r3, [r3, #12]
 8008bfc:	4916      	ldr	r1, [pc, #88]	; (8008c58 <HAL_RCC_ClockConfig+0x1bc>)
 8008bfe:	4313      	orrs	r3, r2
 8008c00:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	681b      	ldr	r3, [r3, #0]
 8008c06:	f003 0308 	and.w	r3, r3, #8
 8008c0a:	2b00      	cmp	r3, #0
 8008c0c:	d009      	beq.n	8008c22 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8008c0e:	4b12      	ldr	r3, [pc, #72]	; (8008c58 <HAL_RCC_ClockConfig+0x1bc>)
 8008c10:	689b      	ldr	r3, [r3, #8]
 8008c12:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	691b      	ldr	r3, [r3, #16]
 8008c1a:	00db      	lsls	r3, r3, #3
 8008c1c:	490e      	ldr	r1, [pc, #56]	; (8008c58 <HAL_RCC_ClockConfig+0x1bc>)
 8008c1e:	4313      	orrs	r3, r2
 8008c20:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8008c22:	f000 f821 	bl	8008c68 <HAL_RCC_GetSysClockFreq>
 8008c26:	4602      	mov	r2, r0
 8008c28:	4b0b      	ldr	r3, [pc, #44]	; (8008c58 <HAL_RCC_ClockConfig+0x1bc>)
 8008c2a:	689b      	ldr	r3, [r3, #8]
 8008c2c:	091b      	lsrs	r3, r3, #4
 8008c2e:	f003 030f 	and.w	r3, r3, #15
 8008c32:	490a      	ldr	r1, [pc, #40]	; (8008c5c <HAL_RCC_ClockConfig+0x1c0>)
 8008c34:	5ccb      	ldrb	r3, [r1, r3]
 8008c36:	fa22 f303 	lsr.w	r3, r2, r3
 8008c3a:	4a09      	ldr	r2, [pc, #36]	; (8008c60 <HAL_RCC_ClockConfig+0x1c4>)
 8008c3c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8008c3e:	4b09      	ldr	r3, [pc, #36]	; (8008c64 <HAL_RCC_ClockConfig+0x1c8>)
 8008c40:	681b      	ldr	r3, [r3, #0]
 8008c42:	4618      	mov	r0, r3
 8008c44:	f7fe f868 	bl	8006d18 <HAL_InitTick>

  return HAL_OK;
 8008c48:	2300      	movs	r3, #0
}
 8008c4a:	4618      	mov	r0, r3
 8008c4c:	3710      	adds	r7, #16
 8008c4e:	46bd      	mov	sp, r7
 8008c50:	bd80      	pop	{r7, pc}
 8008c52:	bf00      	nop
 8008c54:	40023c00 	.word	0x40023c00
 8008c58:	40023800 	.word	0x40023800
 8008c5c:	0800e188 	.word	0x0800e188
 8008c60:	20000004 	.word	0x20000004
 8008c64:	200000dc 	.word	0x200000dc

08008c68 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008c68:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008c6c:	b094      	sub	sp, #80	; 0x50
 8008c6e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8008c70:	2300      	movs	r3, #0
 8008c72:	647b      	str	r3, [r7, #68]	; 0x44
 8008c74:	2300      	movs	r3, #0
 8008c76:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008c78:	2300      	movs	r3, #0
 8008c7a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8008c7c:	2300      	movs	r3, #0
 8008c7e:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8008c80:	4b79      	ldr	r3, [pc, #484]	; (8008e68 <HAL_RCC_GetSysClockFreq+0x200>)
 8008c82:	689b      	ldr	r3, [r3, #8]
 8008c84:	f003 030c 	and.w	r3, r3, #12
 8008c88:	2b08      	cmp	r3, #8
 8008c8a:	d00d      	beq.n	8008ca8 <HAL_RCC_GetSysClockFreq+0x40>
 8008c8c:	2b08      	cmp	r3, #8
 8008c8e:	f200 80e1 	bhi.w	8008e54 <HAL_RCC_GetSysClockFreq+0x1ec>
 8008c92:	2b00      	cmp	r3, #0
 8008c94:	d002      	beq.n	8008c9c <HAL_RCC_GetSysClockFreq+0x34>
 8008c96:	2b04      	cmp	r3, #4
 8008c98:	d003      	beq.n	8008ca2 <HAL_RCC_GetSysClockFreq+0x3a>
 8008c9a:	e0db      	b.n	8008e54 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8008c9c:	4b73      	ldr	r3, [pc, #460]	; (8008e6c <HAL_RCC_GetSysClockFreq+0x204>)
 8008c9e:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8008ca0:	e0db      	b.n	8008e5a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8008ca2:	4b73      	ldr	r3, [pc, #460]	; (8008e70 <HAL_RCC_GetSysClockFreq+0x208>)
 8008ca4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8008ca6:	e0d8      	b.n	8008e5a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8008ca8:	4b6f      	ldr	r3, [pc, #444]	; (8008e68 <HAL_RCC_GetSysClockFreq+0x200>)
 8008caa:	685b      	ldr	r3, [r3, #4]
 8008cac:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008cb0:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8008cb2:	4b6d      	ldr	r3, [pc, #436]	; (8008e68 <HAL_RCC_GetSysClockFreq+0x200>)
 8008cb4:	685b      	ldr	r3, [r3, #4]
 8008cb6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008cba:	2b00      	cmp	r3, #0
 8008cbc:	d063      	beq.n	8008d86 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008cbe:	4b6a      	ldr	r3, [pc, #424]	; (8008e68 <HAL_RCC_GetSysClockFreq+0x200>)
 8008cc0:	685b      	ldr	r3, [r3, #4]
 8008cc2:	099b      	lsrs	r3, r3, #6
 8008cc4:	2200      	movs	r2, #0
 8008cc6:	63bb      	str	r3, [r7, #56]	; 0x38
 8008cc8:	63fa      	str	r2, [r7, #60]	; 0x3c
 8008cca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ccc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008cd0:	633b      	str	r3, [r7, #48]	; 0x30
 8008cd2:	2300      	movs	r3, #0
 8008cd4:	637b      	str	r3, [r7, #52]	; 0x34
 8008cd6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8008cda:	4622      	mov	r2, r4
 8008cdc:	462b      	mov	r3, r5
 8008cde:	f04f 0000 	mov.w	r0, #0
 8008ce2:	f04f 0100 	mov.w	r1, #0
 8008ce6:	0159      	lsls	r1, r3, #5
 8008ce8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8008cec:	0150      	lsls	r0, r2, #5
 8008cee:	4602      	mov	r2, r0
 8008cf0:	460b      	mov	r3, r1
 8008cf2:	4621      	mov	r1, r4
 8008cf4:	1a51      	subs	r1, r2, r1
 8008cf6:	6139      	str	r1, [r7, #16]
 8008cf8:	4629      	mov	r1, r5
 8008cfa:	eb63 0301 	sbc.w	r3, r3, r1
 8008cfe:	617b      	str	r3, [r7, #20]
 8008d00:	f04f 0200 	mov.w	r2, #0
 8008d04:	f04f 0300 	mov.w	r3, #0
 8008d08:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8008d0c:	4659      	mov	r1, fp
 8008d0e:	018b      	lsls	r3, r1, #6
 8008d10:	4651      	mov	r1, sl
 8008d12:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8008d16:	4651      	mov	r1, sl
 8008d18:	018a      	lsls	r2, r1, #6
 8008d1a:	4651      	mov	r1, sl
 8008d1c:	ebb2 0801 	subs.w	r8, r2, r1
 8008d20:	4659      	mov	r1, fp
 8008d22:	eb63 0901 	sbc.w	r9, r3, r1
 8008d26:	f04f 0200 	mov.w	r2, #0
 8008d2a:	f04f 0300 	mov.w	r3, #0
 8008d2e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8008d32:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8008d36:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8008d3a:	4690      	mov	r8, r2
 8008d3c:	4699      	mov	r9, r3
 8008d3e:	4623      	mov	r3, r4
 8008d40:	eb18 0303 	adds.w	r3, r8, r3
 8008d44:	60bb      	str	r3, [r7, #8]
 8008d46:	462b      	mov	r3, r5
 8008d48:	eb49 0303 	adc.w	r3, r9, r3
 8008d4c:	60fb      	str	r3, [r7, #12]
 8008d4e:	f04f 0200 	mov.w	r2, #0
 8008d52:	f04f 0300 	mov.w	r3, #0
 8008d56:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8008d5a:	4629      	mov	r1, r5
 8008d5c:	024b      	lsls	r3, r1, #9
 8008d5e:	4621      	mov	r1, r4
 8008d60:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8008d64:	4621      	mov	r1, r4
 8008d66:	024a      	lsls	r2, r1, #9
 8008d68:	4610      	mov	r0, r2
 8008d6a:	4619      	mov	r1, r3
 8008d6c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008d6e:	2200      	movs	r2, #0
 8008d70:	62bb      	str	r3, [r7, #40]	; 0x28
 8008d72:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008d74:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8008d78:	f7f7 fa8a 	bl	8000290 <__aeabi_uldivmod>
 8008d7c:	4602      	mov	r2, r0
 8008d7e:	460b      	mov	r3, r1
 8008d80:	4613      	mov	r3, r2
 8008d82:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008d84:	e058      	b.n	8008e38 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008d86:	4b38      	ldr	r3, [pc, #224]	; (8008e68 <HAL_RCC_GetSysClockFreq+0x200>)
 8008d88:	685b      	ldr	r3, [r3, #4]
 8008d8a:	099b      	lsrs	r3, r3, #6
 8008d8c:	2200      	movs	r2, #0
 8008d8e:	4618      	mov	r0, r3
 8008d90:	4611      	mov	r1, r2
 8008d92:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8008d96:	623b      	str	r3, [r7, #32]
 8008d98:	2300      	movs	r3, #0
 8008d9a:	627b      	str	r3, [r7, #36]	; 0x24
 8008d9c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8008da0:	4642      	mov	r2, r8
 8008da2:	464b      	mov	r3, r9
 8008da4:	f04f 0000 	mov.w	r0, #0
 8008da8:	f04f 0100 	mov.w	r1, #0
 8008dac:	0159      	lsls	r1, r3, #5
 8008dae:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8008db2:	0150      	lsls	r0, r2, #5
 8008db4:	4602      	mov	r2, r0
 8008db6:	460b      	mov	r3, r1
 8008db8:	4641      	mov	r1, r8
 8008dba:	ebb2 0a01 	subs.w	sl, r2, r1
 8008dbe:	4649      	mov	r1, r9
 8008dc0:	eb63 0b01 	sbc.w	fp, r3, r1
 8008dc4:	f04f 0200 	mov.w	r2, #0
 8008dc8:	f04f 0300 	mov.w	r3, #0
 8008dcc:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8008dd0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8008dd4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8008dd8:	ebb2 040a 	subs.w	r4, r2, sl
 8008ddc:	eb63 050b 	sbc.w	r5, r3, fp
 8008de0:	f04f 0200 	mov.w	r2, #0
 8008de4:	f04f 0300 	mov.w	r3, #0
 8008de8:	00eb      	lsls	r3, r5, #3
 8008dea:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8008dee:	00e2      	lsls	r2, r4, #3
 8008df0:	4614      	mov	r4, r2
 8008df2:	461d      	mov	r5, r3
 8008df4:	4643      	mov	r3, r8
 8008df6:	18e3      	adds	r3, r4, r3
 8008df8:	603b      	str	r3, [r7, #0]
 8008dfa:	464b      	mov	r3, r9
 8008dfc:	eb45 0303 	adc.w	r3, r5, r3
 8008e00:	607b      	str	r3, [r7, #4]
 8008e02:	f04f 0200 	mov.w	r2, #0
 8008e06:	f04f 0300 	mov.w	r3, #0
 8008e0a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8008e0e:	4629      	mov	r1, r5
 8008e10:	028b      	lsls	r3, r1, #10
 8008e12:	4621      	mov	r1, r4
 8008e14:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8008e18:	4621      	mov	r1, r4
 8008e1a:	028a      	lsls	r2, r1, #10
 8008e1c:	4610      	mov	r0, r2
 8008e1e:	4619      	mov	r1, r3
 8008e20:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008e22:	2200      	movs	r2, #0
 8008e24:	61bb      	str	r3, [r7, #24]
 8008e26:	61fa      	str	r2, [r7, #28]
 8008e28:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008e2c:	f7f7 fa30 	bl	8000290 <__aeabi_uldivmod>
 8008e30:	4602      	mov	r2, r0
 8008e32:	460b      	mov	r3, r1
 8008e34:	4613      	mov	r3, r2
 8008e36:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8008e38:	4b0b      	ldr	r3, [pc, #44]	; (8008e68 <HAL_RCC_GetSysClockFreq+0x200>)
 8008e3a:	685b      	ldr	r3, [r3, #4]
 8008e3c:	0c1b      	lsrs	r3, r3, #16
 8008e3e:	f003 0303 	and.w	r3, r3, #3
 8008e42:	3301      	adds	r3, #1
 8008e44:	005b      	lsls	r3, r3, #1
 8008e46:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8008e48:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8008e4a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008e4c:	fbb2 f3f3 	udiv	r3, r2, r3
 8008e50:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8008e52:	e002      	b.n	8008e5a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8008e54:	4b05      	ldr	r3, [pc, #20]	; (8008e6c <HAL_RCC_GetSysClockFreq+0x204>)
 8008e56:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8008e58:	bf00      	nop
    }
  }
  return sysclockfreq;
 8008e5a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8008e5c:	4618      	mov	r0, r3
 8008e5e:	3750      	adds	r7, #80	; 0x50
 8008e60:	46bd      	mov	sp, r7
 8008e62:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008e66:	bf00      	nop
 8008e68:	40023800 	.word	0x40023800
 8008e6c:	00f42400 	.word	0x00f42400
 8008e70:	007a1200 	.word	0x007a1200

08008e74 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008e74:	b480      	push	{r7}
 8008e76:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8008e78:	4b03      	ldr	r3, [pc, #12]	; (8008e88 <HAL_RCC_GetHCLKFreq+0x14>)
 8008e7a:	681b      	ldr	r3, [r3, #0]
}
 8008e7c:	4618      	mov	r0, r3
 8008e7e:	46bd      	mov	sp, r7
 8008e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e84:	4770      	bx	lr
 8008e86:	bf00      	nop
 8008e88:	20000004 	.word	0x20000004

08008e8c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008e8c:	b580      	push	{r7, lr}
 8008e8e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8008e90:	f7ff fff0 	bl	8008e74 <HAL_RCC_GetHCLKFreq>
 8008e94:	4602      	mov	r2, r0
 8008e96:	4b05      	ldr	r3, [pc, #20]	; (8008eac <HAL_RCC_GetPCLK1Freq+0x20>)
 8008e98:	689b      	ldr	r3, [r3, #8]
 8008e9a:	0a9b      	lsrs	r3, r3, #10
 8008e9c:	f003 0307 	and.w	r3, r3, #7
 8008ea0:	4903      	ldr	r1, [pc, #12]	; (8008eb0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8008ea2:	5ccb      	ldrb	r3, [r1, r3]
 8008ea4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008ea8:	4618      	mov	r0, r3
 8008eaa:	bd80      	pop	{r7, pc}
 8008eac:	40023800 	.word	0x40023800
 8008eb0:	0800e198 	.word	0x0800e198

08008eb4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008eb4:	b580      	push	{r7, lr}
 8008eb6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8008eb8:	f7ff ffdc 	bl	8008e74 <HAL_RCC_GetHCLKFreq>
 8008ebc:	4602      	mov	r2, r0
 8008ebe:	4b05      	ldr	r3, [pc, #20]	; (8008ed4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8008ec0:	689b      	ldr	r3, [r3, #8]
 8008ec2:	0b5b      	lsrs	r3, r3, #13
 8008ec4:	f003 0307 	and.w	r3, r3, #7
 8008ec8:	4903      	ldr	r1, [pc, #12]	; (8008ed8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8008eca:	5ccb      	ldrb	r3, [r1, r3]
 8008ecc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008ed0:	4618      	mov	r0, r3
 8008ed2:	bd80      	pop	{r7, pc}
 8008ed4:	40023800 	.word	0x40023800
 8008ed8:	0800e198 	.word	0x0800e198

08008edc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8008edc:	b580      	push	{r7, lr}
 8008ede:	b082      	sub	sp, #8
 8008ee0:	af00      	add	r7, sp, #0
 8008ee2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	2b00      	cmp	r3, #0
 8008ee8:	d101      	bne.n	8008eee <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8008eea:	2301      	movs	r3, #1
 8008eec:	e07b      	b.n	8008fe6 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8008eee:	687b      	ldr	r3, [r7, #4]
 8008ef0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ef2:	2b00      	cmp	r3, #0
 8008ef4:	d108      	bne.n	8008f08 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8008ef6:	687b      	ldr	r3, [r7, #4]
 8008ef8:	685b      	ldr	r3, [r3, #4]
 8008efa:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008efe:	d009      	beq.n	8008f14 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	2200      	movs	r2, #0
 8008f04:	61da      	str	r2, [r3, #28]
 8008f06:	e005      	b.n	8008f14 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	2200      	movs	r2, #0
 8008f0c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8008f0e:	687b      	ldr	r3, [r7, #4]
 8008f10:	2200      	movs	r2, #0
 8008f12:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	2200      	movs	r2, #0
 8008f18:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8008f1a:	687b      	ldr	r3, [r7, #4]
 8008f1c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008f20:	b2db      	uxtb	r3, r3
 8008f22:	2b00      	cmp	r3, #0
 8008f24:	d106      	bne.n	8008f34 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8008f26:	687b      	ldr	r3, [r7, #4]
 8008f28:	2200      	movs	r2, #0
 8008f2a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8008f2e:	6878      	ldr	r0, [r7, #4]
 8008f30:	f7f8 fbd8 	bl	80016e4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	2202      	movs	r2, #2
 8008f38:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	681b      	ldr	r3, [r3, #0]
 8008f40:	681a      	ldr	r2, [r3, #0]
 8008f42:	687b      	ldr	r3, [r7, #4]
 8008f44:	681b      	ldr	r3, [r3, #0]
 8008f46:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008f4a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	685b      	ldr	r3, [r3, #4]
 8008f50:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	689b      	ldr	r3, [r3, #8]
 8008f58:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8008f5c:	431a      	orrs	r2, r3
 8008f5e:	687b      	ldr	r3, [r7, #4]
 8008f60:	68db      	ldr	r3, [r3, #12]
 8008f62:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008f66:	431a      	orrs	r2, r3
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	691b      	ldr	r3, [r3, #16]
 8008f6c:	f003 0302 	and.w	r3, r3, #2
 8008f70:	431a      	orrs	r2, r3
 8008f72:	687b      	ldr	r3, [r7, #4]
 8008f74:	695b      	ldr	r3, [r3, #20]
 8008f76:	f003 0301 	and.w	r3, r3, #1
 8008f7a:	431a      	orrs	r2, r3
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	699b      	ldr	r3, [r3, #24]
 8008f80:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008f84:	431a      	orrs	r2, r3
 8008f86:	687b      	ldr	r3, [r7, #4]
 8008f88:	69db      	ldr	r3, [r3, #28]
 8008f8a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008f8e:	431a      	orrs	r2, r3
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	6a1b      	ldr	r3, [r3, #32]
 8008f94:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008f98:	ea42 0103 	orr.w	r1, r2, r3
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008fa0:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	681b      	ldr	r3, [r3, #0]
 8008fa8:	430a      	orrs	r2, r1
 8008faa:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	699b      	ldr	r3, [r3, #24]
 8008fb0:	0c1b      	lsrs	r3, r3, #16
 8008fb2:	f003 0104 	and.w	r1, r3, #4
 8008fb6:	687b      	ldr	r3, [r7, #4]
 8008fb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008fba:	f003 0210 	and.w	r2, r3, #16
 8008fbe:	687b      	ldr	r3, [r7, #4]
 8008fc0:	681b      	ldr	r3, [r3, #0]
 8008fc2:	430a      	orrs	r2, r1
 8008fc4:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	681b      	ldr	r3, [r3, #0]
 8008fca:	69da      	ldr	r2, [r3, #28]
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	681b      	ldr	r3, [r3, #0]
 8008fd0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8008fd4:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8008fd6:	687b      	ldr	r3, [r7, #4]
 8008fd8:	2200      	movs	r2, #0
 8008fda:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	2201      	movs	r2, #1
 8008fe0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8008fe4:	2300      	movs	r3, #0
}
 8008fe6:	4618      	mov	r0, r3
 8008fe8:	3708      	adds	r7, #8
 8008fea:	46bd      	mov	sp, r7
 8008fec:	bd80      	pop	{r7, pc}

08008fee <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008fee:	b580      	push	{r7, lr}
 8008ff0:	b088      	sub	sp, #32
 8008ff2:	af00      	add	r7, sp, #0
 8008ff4:	60f8      	str	r0, [r7, #12]
 8008ff6:	60b9      	str	r1, [r7, #8]
 8008ff8:	603b      	str	r3, [r7, #0]
 8008ffa:	4613      	mov	r3, r2
 8008ffc:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8008ffe:	2300      	movs	r3, #0
 8009000:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8009002:	68fb      	ldr	r3, [r7, #12]
 8009004:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8009008:	2b01      	cmp	r3, #1
 800900a:	d101      	bne.n	8009010 <HAL_SPI_Transmit+0x22>
 800900c:	2302      	movs	r3, #2
 800900e:	e126      	b.n	800925e <HAL_SPI_Transmit+0x270>
 8009010:	68fb      	ldr	r3, [r7, #12]
 8009012:	2201      	movs	r2, #1
 8009014:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8009018:	f7fd fec2 	bl	8006da0 <HAL_GetTick>
 800901c:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800901e:	88fb      	ldrh	r3, [r7, #6]
 8009020:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8009022:	68fb      	ldr	r3, [r7, #12]
 8009024:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8009028:	b2db      	uxtb	r3, r3
 800902a:	2b01      	cmp	r3, #1
 800902c:	d002      	beq.n	8009034 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800902e:	2302      	movs	r3, #2
 8009030:	77fb      	strb	r3, [r7, #31]
    goto error;
 8009032:	e10b      	b.n	800924c <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8009034:	68bb      	ldr	r3, [r7, #8]
 8009036:	2b00      	cmp	r3, #0
 8009038:	d002      	beq.n	8009040 <HAL_SPI_Transmit+0x52>
 800903a:	88fb      	ldrh	r3, [r7, #6]
 800903c:	2b00      	cmp	r3, #0
 800903e:	d102      	bne.n	8009046 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8009040:	2301      	movs	r3, #1
 8009042:	77fb      	strb	r3, [r7, #31]
    goto error;
 8009044:	e102      	b.n	800924c <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8009046:	68fb      	ldr	r3, [r7, #12]
 8009048:	2203      	movs	r2, #3
 800904a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800904e:	68fb      	ldr	r3, [r7, #12]
 8009050:	2200      	movs	r2, #0
 8009052:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8009054:	68fb      	ldr	r3, [r7, #12]
 8009056:	68ba      	ldr	r2, [r7, #8]
 8009058:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800905a:	68fb      	ldr	r3, [r7, #12]
 800905c:	88fa      	ldrh	r2, [r7, #6]
 800905e:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8009060:	68fb      	ldr	r3, [r7, #12]
 8009062:	88fa      	ldrh	r2, [r7, #6]
 8009064:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8009066:	68fb      	ldr	r3, [r7, #12]
 8009068:	2200      	movs	r2, #0
 800906a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800906c:	68fb      	ldr	r3, [r7, #12]
 800906e:	2200      	movs	r2, #0
 8009070:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8009072:	68fb      	ldr	r3, [r7, #12]
 8009074:	2200      	movs	r2, #0
 8009076:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8009078:	68fb      	ldr	r3, [r7, #12]
 800907a:	2200      	movs	r2, #0
 800907c:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800907e:	68fb      	ldr	r3, [r7, #12]
 8009080:	2200      	movs	r2, #0
 8009082:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009084:	68fb      	ldr	r3, [r7, #12]
 8009086:	689b      	ldr	r3, [r3, #8]
 8009088:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800908c:	d10f      	bne.n	80090ae <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800908e:	68fb      	ldr	r3, [r7, #12]
 8009090:	681b      	ldr	r3, [r3, #0]
 8009092:	681a      	ldr	r2, [r3, #0]
 8009094:	68fb      	ldr	r3, [r7, #12]
 8009096:	681b      	ldr	r3, [r3, #0]
 8009098:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800909c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800909e:	68fb      	ldr	r3, [r7, #12]
 80090a0:	681b      	ldr	r3, [r3, #0]
 80090a2:	681a      	ldr	r2, [r3, #0]
 80090a4:	68fb      	ldr	r3, [r7, #12]
 80090a6:	681b      	ldr	r3, [r3, #0]
 80090a8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80090ac:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80090ae:	68fb      	ldr	r3, [r7, #12]
 80090b0:	681b      	ldr	r3, [r3, #0]
 80090b2:	681b      	ldr	r3, [r3, #0]
 80090b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80090b8:	2b40      	cmp	r3, #64	; 0x40
 80090ba:	d007      	beq.n	80090cc <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80090bc:	68fb      	ldr	r3, [r7, #12]
 80090be:	681b      	ldr	r3, [r3, #0]
 80090c0:	681a      	ldr	r2, [r3, #0]
 80090c2:	68fb      	ldr	r3, [r7, #12]
 80090c4:	681b      	ldr	r3, [r3, #0]
 80090c6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80090ca:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80090cc:	68fb      	ldr	r3, [r7, #12]
 80090ce:	68db      	ldr	r3, [r3, #12]
 80090d0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80090d4:	d14b      	bne.n	800916e <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80090d6:	68fb      	ldr	r3, [r7, #12]
 80090d8:	685b      	ldr	r3, [r3, #4]
 80090da:	2b00      	cmp	r3, #0
 80090dc:	d002      	beq.n	80090e4 <HAL_SPI_Transmit+0xf6>
 80090de:	8afb      	ldrh	r3, [r7, #22]
 80090e0:	2b01      	cmp	r3, #1
 80090e2:	d13e      	bne.n	8009162 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80090e4:	68fb      	ldr	r3, [r7, #12]
 80090e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80090e8:	881a      	ldrh	r2, [r3, #0]
 80090ea:	68fb      	ldr	r3, [r7, #12]
 80090ec:	681b      	ldr	r3, [r3, #0]
 80090ee:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80090f0:	68fb      	ldr	r3, [r7, #12]
 80090f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80090f4:	1c9a      	adds	r2, r3, #2
 80090f6:	68fb      	ldr	r3, [r7, #12]
 80090f8:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80090fa:	68fb      	ldr	r3, [r7, #12]
 80090fc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80090fe:	b29b      	uxth	r3, r3
 8009100:	3b01      	subs	r3, #1
 8009102:	b29a      	uxth	r2, r3
 8009104:	68fb      	ldr	r3, [r7, #12]
 8009106:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8009108:	e02b      	b.n	8009162 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800910a:	68fb      	ldr	r3, [r7, #12]
 800910c:	681b      	ldr	r3, [r3, #0]
 800910e:	689b      	ldr	r3, [r3, #8]
 8009110:	f003 0302 	and.w	r3, r3, #2
 8009114:	2b02      	cmp	r3, #2
 8009116:	d112      	bne.n	800913e <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009118:	68fb      	ldr	r3, [r7, #12]
 800911a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800911c:	881a      	ldrh	r2, [r3, #0]
 800911e:	68fb      	ldr	r3, [r7, #12]
 8009120:	681b      	ldr	r3, [r3, #0]
 8009122:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8009124:	68fb      	ldr	r3, [r7, #12]
 8009126:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009128:	1c9a      	adds	r2, r3, #2
 800912a:	68fb      	ldr	r3, [r7, #12]
 800912c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800912e:	68fb      	ldr	r3, [r7, #12]
 8009130:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009132:	b29b      	uxth	r3, r3
 8009134:	3b01      	subs	r3, #1
 8009136:	b29a      	uxth	r2, r3
 8009138:	68fb      	ldr	r3, [r7, #12]
 800913a:	86da      	strh	r2, [r3, #54]	; 0x36
 800913c:	e011      	b.n	8009162 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800913e:	f7fd fe2f 	bl	8006da0 <HAL_GetTick>
 8009142:	4602      	mov	r2, r0
 8009144:	69bb      	ldr	r3, [r7, #24]
 8009146:	1ad3      	subs	r3, r2, r3
 8009148:	683a      	ldr	r2, [r7, #0]
 800914a:	429a      	cmp	r2, r3
 800914c:	d803      	bhi.n	8009156 <HAL_SPI_Transmit+0x168>
 800914e:	683b      	ldr	r3, [r7, #0]
 8009150:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009154:	d102      	bne.n	800915c <HAL_SPI_Transmit+0x16e>
 8009156:	683b      	ldr	r3, [r7, #0]
 8009158:	2b00      	cmp	r3, #0
 800915a:	d102      	bne.n	8009162 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 800915c:	2303      	movs	r3, #3
 800915e:	77fb      	strb	r3, [r7, #31]
          goto error;
 8009160:	e074      	b.n	800924c <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8009162:	68fb      	ldr	r3, [r7, #12]
 8009164:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009166:	b29b      	uxth	r3, r3
 8009168:	2b00      	cmp	r3, #0
 800916a:	d1ce      	bne.n	800910a <HAL_SPI_Transmit+0x11c>
 800916c:	e04c      	b.n	8009208 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800916e:	68fb      	ldr	r3, [r7, #12]
 8009170:	685b      	ldr	r3, [r3, #4]
 8009172:	2b00      	cmp	r3, #0
 8009174:	d002      	beq.n	800917c <HAL_SPI_Transmit+0x18e>
 8009176:	8afb      	ldrh	r3, [r7, #22]
 8009178:	2b01      	cmp	r3, #1
 800917a:	d140      	bne.n	80091fe <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800917c:	68fb      	ldr	r3, [r7, #12]
 800917e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009180:	68fb      	ldr	r3, [r7, #12]
 8009182:	681b      	ldr	r3, [r3, #0]
 8009184:	330c      	adds	r3, #12
 8009186:	7812      	ldrb	r2, [r2, #0]
 8009188:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800918a:	68fb      	ldr	r3, [r7, #12]
 800918c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800918e:	1c5a      	adds	r2, r3, #1
 8009190:	68fb      	ldr	r3, [r7, #12]
 8009192:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8009194:	68fb      	ldr	r3, [r7, #12]
 8009196:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009198:	b29b      	uxth	r3, r3
 800919a:	3b01      	subs	r3, #1
 800919c:	b29a      	uxth	r2, r3
 800919e:	68fb      	ldr	r3, [r7, #12]
 80091a0:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80091a2:	e02c      	b.n	80091fe <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80091a4:	68fb      	ldr	r3, [r7, #12]
 80091a6:	681b      	ldr	r3, [r3, #0]
 80091a8:	689b      	ldr	r3, [r3, #8]
 80091aa:	f003 0302 	and.w	r3, r3, #2
 80091ae:	2b02      	cmp	r3, #2
 80091b0:	d113      	bne.n	80091da <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80091b2:	68fb      	ldr	r3, [r7, #12]
 80091b4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80091b6:	68fb      	ldr	r3, [r7, #12]
 80091b8:	681b      	ldr	r3, [r3, #0]
 80091ba:	330c      	adds	r3, #12
 80091bc:	7812      	ldrb	r2, [r2, #0]
 80091be:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80091c0:	68fb      	ldr	r3, [r7, #12]
 80091c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80091c4:	1c5a      	adds	r2, r3, #1
 80091c6:	68fb      	ldr	r3, [r7, #12]
 80091c8:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80091ca:	68fb      	ldr	r3, [r7, #12]
 80091cc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80091ce:	b29b      	uxth	r3, r3
 80091d0:	3b01      	subs	r3, #1
 80091d2:	b29a      	uxth	r2, r3
 80091d4:	68fb      	ldr	r3, [r7, #12]
 80091d6:	86da      	strh	r2, [r3, #54]	; 0x36
 80091d8:	e011      	b.n	80091fe <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80091da:	f7fd fde1 	bl	8006da0 <HAL_GetTick>
 80091de:	4602      	mov	r2, r0
 80091e0:	69bb      	ldr	r3, [r7, #24]
 80091e2:	1ad3      	subs	r3, r2, r3
 80091e4:	683a      	ldr	r2, [r7, #0]
 80091e6:	429a      	cmp	r2, r3
 80091e8:	d803      	bhi.n	80091f2 <HAL_SPI_Transmit+0x204>
 80091ea:	683b      	ldr	r3, [r7, #0]
 80091ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80091f0:	d102      	bne.n	80091f8 <HAL_SPI_Transmit+0x20a>
 80091f2:	683b      	ldr	r3, [r7, #0]
 80091f4:	2b00      	cmp	r3, #0
 80091f6:	d102      	bne.n	80091fe <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 80091f8:	2303      	movs	r3, #3
 80091fa:	77fb      	strb	r3, [r7, #31]
          goto error;
 80091fc:	e026      	b.n	800924c <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80091fe:	68fb      	ldr	r3, [r7, #12]
 8009200:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009202:	b29b      	uxth	r3, r3
 8009204:	2b00      	cmp	r3, #0
 8009206:	d1cd      	bne.n	80091a4 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8009208:	69ba      	ldr	r2, [r7, #24]
 800920a:	6839      	ldr	r1, [r7, #0]
 800920c:	68f8      	ldr	r0, [r7, #12]
 800920e:	f000 fa55 	bl	80096bc <SPI_EndRxTxTransaction>
 8009212:	4603      	mov	r3, r0
 8009214:	2b00      	cmp	r3, #0
 8009216:	d002      	beq.n	800921e <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8009218:	68fb      	ldr	r3, [r7, #12]
 800921a:	2220      	movs	r2, #32
 800921c:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800921e:	68fb      	ldr	r3, [r7, #12]
 8009220:	689b      	ldr	r3, [r3, #8]
 8009222:	2b00      	cmp	r3, #0
 8009224:	d10a      	bne.n	800923c <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8009226:	2300      	movs	r3, #0
 8009228:	613b      	str	r3, [r7, #16]
 800922a:	68fb      	ldr	r3, [r7, #12]
 800922c:	681b      	ldr	r3, [r3, #0]
 800922e:	68db      	ldr	r3, [r3, #12]
 8009230:	613b      	str	r3, [r7, #16]
 8009232:	68fb      	ldr	r3, [r7, #12]
 8009234:	681b      	ldr	r3, [r3, #0]
 8009236:	689b      	ldr	r3, [r3, #8]
 8009238:	613b      	str	r3, [r7, #16]
 800923a:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800923c:	68fb      	ldr	r3, [r7, #12]
 800923e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009240:	2b00      	cmp	r3, #0
 8009242:	d002      	beq.n	800924a <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8009244:	2301      	movs	r3, #1
 8009246:	77fb      	strb	r3, [r7, #31]
 8009248:	e000      	b.n	800924c <HAL_SPI_Transmit+0x25e>
  }

error:
 800924a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800924c:	68fb      	ldr	r3, [r7, #12]
 800924e:	2201      	movs	r2, #1
 8009250:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8009254:	68fb      	ldr	r3, [r7, #12]
 8009256:	2200      	movs	r2, #0
 8009258:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800925c:	7ffb      	ldrb	r3, [r7, #31]
}
 800925e:	4618      	mov	r0, r3
 8009260:	3720      	adds	r7, #32
 8009262:	46bd      	mov	sp, r7
 8009264:	bd80      	pop	{r7, pc}

08009266 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8009266:	b580      	push	{r7, lr}
 8009268:	b08c      	sub	sp, #48	; 0x30
 800926a:	af00      	add	r7, sp, #0
 800926c:	60f8      	str	r0, [r7, #12]
 800926e:	60b9      	str	r1, [r7, #8]
 8009270:	607a      	str	r2, [r7, #4]
 8009272:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8009274:	2301      	movs	r3, #1
 8009276:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8009278:	2300      	movs	r3, #0
 800927a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800927e:	68fb      	ldr	r3, [r7, #12]
 8009280:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8009284:	2b01      	cmp	r3, #1
 8009286:	d101      	bne.n	800928c <HAL_SPI_TransmitReceive+0x26>
 8009288:	2302      	movs	r3, #2
 800928a:	e18a      	b.n	80095a2 <HAL_SPI_TransmitReceive+0x33c>
 800928c:	68fb      	ldr	r3, [r7, #12]
 800928e:	2201      	movs	r2, #1
 8009290:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8009294:	f7fd fd84 	bl	8006da0 <HAL_GetTick>
 8009298:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800929a:	68fb      	ldr	r3, [r7, #12]
 800929c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80092a0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80092a4:	68fb      	ldr	r3, [r7, #12]
 80092a6:	685b      	ldr	r3, [r3, #4]
 80092a8:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80092aa:	887b      	ldrh	r3, [r7, #2]
 80092ac:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80092ae:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80092b2:	2b01      	cmp	r3, #1
 80092b4:	d00f      	beq.n	80092d6 <HAL_SPI_TransmitReceive+0x70>
 80092b6:	69fb      	ldr	r3, [r7, #28]
 80092b8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80092bc:	d107      	bne.n	80092ce <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80092be:	68fb      	ldr	r3, [r7, #12]
 80092c0:	689b      	ldr	r3, [r3, #8]
 80092c2:	2b00      	cmp	r3, #0
 80092c4:	d103      	bne.n	80092ce <HAL_SPI_TransmitReceive+0x68>
 80092c6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80092ca:	2b04      	cmp	r3, #4
 80092cc:	d003      	beq.n	80092d6 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80092ce:	2302      	movs	r3, #2
 80092d0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80092d4:	e15b      	b.n	800958e <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80092d6:	68bb      	ldr	r3, [r7, #8]
 80092d8:	2b00      	cmp	r3, #0
 80092da:	d005      	beq.n	80092e8 <HAL_SPI_TransmitReceive+0x82>
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	2b00      	cmp	r3, #0
 80092e0:	d002      	beq.n	80092e8 <HAL_SPI_TransmitReceive+0x82>
 80092e2:	887b      	ldrh	r3, [r7, #2]
 80092e4:	2b00      	cmp	r3, #0
 80092e6:	d103      	bne.n	80092f0 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 80092e8:	2301      	movs	r3, #1
 80092ea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80092ee:	e14e      	b.n	800958e <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80092f0:	68fb      	ldr	r3, [r7, #12]
 80092f2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80092f6:	b2db      	uxtb	r3, r3
 80092f8:	2b04      	cmp	r3, #4
 80092fa:	d003      	beq.n	8009304 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80092fc:	68fb      	ldr	r3, [r7, #12]
 80092fe:	2205      	movs	r2, #5
 8009300:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8009304:	68fb      	ldr	r3, [r7, #12]
 8009306:	2200      	movs	r2, #0
 8009308:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800930a:	68fb      	ldr	r3, [r7, #12]
 800930c:	687a      	ldr	r2, [r7, #4]
 800930e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8009310:	68fb      	ldr	r3, [r7, #12]
 8009312:	887a      	ldrh	r2, [r7, #2]
 8009314:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8009316:	68fb      	ldr	r3, [r7, #12]
 8009318:	887a      	ldrh	r2, [r7, #2]
 800931a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800931c:	68fb      	ldr	r3, [r7, #12]
 800931e:	68ba      	ldr	r2, [r7, #8]
 8009320:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8009322:	68fb      	ldr	r3, [r7, #12]
 8009324:	887a      	ldrh	r2, [r7, #2]
 8009326:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8009328:	68fb      	ldr	r3, [r7, #12]
 800932a:	887a      	ldrh	r2, [r7, #2]
 800932c:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800932e:	68fb      	ldr	r3, [r7, #12]
 8009330:	2200      	movs	r2, #0
 8009332:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8009334:	68fb      	ldr	r3, [r7, #12]
 8009336:	2200      	movs	r2, #0
 8009338:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800933a:	68fb      	ldr	r3, [r7, #12]
 800933c:	681b      	ldr	r3, [r3, #0]
 800933e:	681b      	ldr	r3, [r3, #0]
 8009340:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009344:	2b40      	cmp	r3, #64	; 0x40
 8009346:	d007      	beq.n	8009358 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8009348:	68fb      	ldr	r3, [r7, #12]
 800934a:	681b      	ldr	r3, [r3, #0]
 800934c:	681a      	ldr	r2, [r3, #0]
 800934e:	68fb      	ldr	r3, [r7, #12]
 8009350:	681b      	ldr	r3, [r3, #0]
 8009352:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009356:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8009358:	68fb      	ldr	r3, [r7, #12]
 800935a:	68db      	ldr	r3, [r3, #12]
 800935c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009360:	d178      	bne.n	8009454 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8009362:	68fb      	ldr	r3, [r7, #12]
 8009364:	685b      	ldr	r3, [r3, #4]
 8009366:	2b00      	cmp	r3, #0
 8009368:	d002      	beq.n	8009370 <HAL_SPI_TransmitReceive+0x10a>
 800936a:	8b7b      	ldrh	r3, [r7, #26]
 800936c:	2b01      	cmp	r3, #1
 800936e:	d166      	bne.n	800943e <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009370:	68fb      	ldr	r3, [r7, #12]
 8009372:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009374:	881a      	ldrh	r2, [r3, #0]
 8009376:	68fb      	ldr	r3, [r7, #12]
 8009378:	681b      	ldr	r3, [r3, #0]
 800937a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800937c:	68fb      	ldr	r3, [r7, #12]
 800937e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009380:	1c9a      	adds	r2, r3, #2
 8009382:	68fb      	ldr	r3, [r7, #12]
 8009384:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8009386:	68fb      	ldr	r3, [r7, #12]
 8009388:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800938a:	b29b      	uxth	r3, r3
 800938c:	3b01      	subs	r3, #1
 800938e:	b29a      	uxth	r2, r3
 8009390:	68fb      	ldr	r3, [r7, #12]
 8009392:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009394:	e053      	b.n	800943e <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8009396:	68fb      	ldr	r3, [r7, #12]
 8009398:	681b      	ldr	r3, [r3, #0]
 800939a:	689b      	ldr	r3, [r3, #8]
 800939c:	f003 0302 	and.w	r3, r3, #2
 80093a0:	2b02      	cmp	r3, #2
 80093a2:	d11b      	bne.n	80093dc <HAL_SPI_TransmitReceive+0x176>
 80093a4:	68fb      	ldr	r3, [r7, #12]
 80093a6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80093a8:	b29b      	uxth	r3, r3
 80093aa:	2b00      	cmp	r3, #0
 80093ac:	d016      	beq.n	80093dc <HAL_SPI_TransmitReceive+0x176>
 80093ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80093b0:	2b01      	cmp	r3, #1
 80093b2:	d113      	bne.n	80093dc <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80093b4:	68fb      	ldr	r3, [r7, #12]
 80093b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80093b8:	881a      	ldrh	r2, [r3, #0]
 80093ba:	68fb      	ldr	r3, [r7, #12]
 80093bc:	681b      	ldr	r3, [r3, #0]
 80093be:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80093c0:	68fb      	ldr	r3, [r7, #12]
 80093c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80093c4:	1c9a      	adds	r2, r3, #2
 80093c6:	68fb      	ldr	r3, [r7, #12]
 80093c8:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80093ca:	68fb      	ldr	r3, [r7, #12]
 80093cc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80093ce:	b29b      	uxth	r3, r3
 80093d0:	3b01      	subs	r3, #1
 80093d2:	b29a      	uxth	r2, r3
 80093d4:	68fb      	ldr	r3, [r7, #12]
 80093d6:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80093d8:	2300      	movs	r3, #0
 80093da:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80093dc:	68fb      	ldr	r3, [r7, #12]
 80093de:	681b      	ldr	r3, [r3, #0]
 80093e0:	689b      	ldr	r3, [r3, #8]
 80093e2:	f003 0301 	and.w	r3, r3, #1
 80093e6:	2b01      	cmp	r3, #1
 80093e8:	d119      	bne.n	800941e <HAL_SPI_TransmitReceive+0x1b8>
 80093ea:	68fb      	ldr	r3, [r7, #12]
 80093ec:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80093ee:	b29b      	uxth	r3, r3
 80093f0:	2b00      	cmp	r3, #0
 80093f2:	d014      	beq.n	800941e <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80093f4:	68fb      	ldr	r3, [r7, #12]
 80093f6:	681b      	ldr	r3, [r3, #0]
 80093f8:	68da      	ldr	r2, [r3, #12]
 80093fa:	68fb      	ldr	r3, [r7, #12]
 80093fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80093fe:	b292      	uxth	r2, r2
 8009400:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8009402:	68fb      	ldr	r3, [r7, #12]
 8009404:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009406:	1c9a      	adds	r2, r3, #2
 8009408:	68fb      	ldr	r3, [r7, #12]
 800940a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800940c:	68fb      	ldr	r3, [r7, #12]
 800940e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009410:	b29b      	uxth	r3, r3
 8009412:	3b01      	subs	r3, #1
 8009414:	b29a      	uxth	r2, r3
 8009416:	68fb      	ldr	r3, [r7, #12]
 8009418:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800941a:	2301      	movs	r3, #1
 800941c:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800941e:	f7fd fcbf 	bl	8006da0 <HAL_GetTick>
 8009422:	4602      	mov	r2, r0
 8009424:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009426:	1ad3      	subs	r3, r2, r3
 8009428:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800942a:	429a      	cmp	r2, r3
 800942c:	d807      	bhi.n	800943e <HAL_SPI_TransmitReceive+0x1d8>
 800942e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009430:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009434:	d003      	beq.n	800943e <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8009436:	2303      	movs	r3, #3
 8009438:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800943c:	e0a7      	b.n	800958e <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800943e:	68fb      	ldr	r3, [r7, #12]
 8009440:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009442:	b29b      	uxth	r3, r3
 8009444:	2b00      	cmp	r3, #0
 8009446:	d1a6      	bne.n	8009396 <HAL_SPI_TransmitReceive+0x130>
 8009448:	68fb      	ldr	r3, [r7, #12]
 800944a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800944c:	b29b      	uxth	r3, r3
 800944e:	2b00      	cmp	r3, #0
 8009450:	d1a1      	bne.n	8009396 <HAL_SPI_TransmitReceive+0x130>
 8009452:	e07c      	b.n	800954e <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8009454:	68fb      	ldr	r3, [r7, #12]
 8009456:	685b      	ldr	r3, [r3, #4]
 8009458:	2b00      	cmp	r3, #0
 800945a:	d002      	beq.n	8009462 <HAL_SPI_TransmitReceive+0x1fc>
 800945c:	8b7b      	ldrh	r3, [r7, #26]
 800945e:	2b01      	cmp	r3, #1
 8009460:	d16b      	bne.n	800953a <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8009462:	68fb      	ldr	r3, [r7, #12]
 8009464:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009466:	68fb      	ldr	r3, [r7, #12]
 8009468:	681b      	ldr	r3, [r3, #0]
 800946a:	330c      	adds	r3, #12
 800946c:	7812      	ldrb	r2, [r2, #0]
 800946e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8009470:	68fb      	ldr	r3, [r7, #12]
 8009472:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009474:	1c5a      	adds	r2, r3, #1
 8009476:	68fb      	ldr	r3, [r7, #12]
 8009478:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800947a:	68fb      	ldr	r3, [r7, #12]
 800947c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800947e:	b29b      	uxth	r3, r3
 8009480:	3b01      	subs	r3, #1
 8009482:	b29a      	uxth	r2, r3
 8009484:	68fb      	ldr	r3, [r7, #12]
 8009486:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009488:	e057      	b.n	800953a <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800948a:	68fb      	ldr	r3, [r7, #12]
 800948c:	681b      	ldr	r3, [r3, #0]
 800948e:	689b      	ldr	r3, [r3, #8]
 8009490:	f003 0302 	and.w	r3, r3, #2
 8009494:	2b02      	cmp	r3, #2
 8009496:	d11c      	bne.n	80094d2 <HAL_SPI_TransmitReceive+0x26c>
 8009498:	68fb      	ldr	r3, [r7, #12]
 800949a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800949c:	b29b      	uxth	r3, r3
 800949e:	2b00      	cmp	r3, #0
 80094a0:	d017      	beq.n	80094d2 <HAL_SPI_TransmitReceive+0x26c>
 80094a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80094a4:	2b01      	cmp	r3, #1
 80094a6:	d114      	bne.n	80094d2 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80094a8:	68fb      	ldr	r3, [r7, #12]
 80094aa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80094ac:	68fb      	ldr	r3, [r7, #12]
 80094ae:	681b      	ldr	r3, [r3, #0]
 80094b0:	330c      	adds	r3, #12
 80094b2:	7812      	ldrb	r2, [r2, #0]
 80094b4:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80094b6:	68fb      	ldr	r3, [r7, #12]
 80094b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80094ba:	1c5a      	adds	r2, r3, #1
 80094bc:	68fb      	ldr	r3, [r7, #12]
 80094be:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80094c0:	68fb      	ldr	r3, [r7, #12]
 80094c2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80094c4:	b29b      	uxth	r3, r3
 80094c6:	3b01      	subs	r3, #1
 80094c8:	b29a      	uxth	r2, r3
 80094ca:	68fb      	ldr	r3, [r7, #12]
 80094cc:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80094ce:	2300      	movs	r3, #0
 80094d0:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80094d2:	68fb      	ldr	r3, [r7, #12]
 80094d4:	681b      	ldr	r3, [r3, #0]
 80094d6:	689b      	ldr	r3, [r3, #8]
 80094d8:	f003 0301 	and.w	r3, r3, #1
 80094dc:	2b01      	cmp	r3, #1
 80094de:	d119      	bne.n	8009514 <HAL_SPI_TransmitReceive+0x2ae>
 80094e0:	68fb      	ldr	r3, [r7, #12]
 80094e2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80094e4:	b29b      	uxth	r3, r3
 80094e6:	2b00      	cmp	r3, #0
 80094e8:	d014      	beq.n	8009514 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80094ea:	68fb      	ldr	r3, [r7, #12]
 80094ec:	681b      	ldr	r3, [r3, #0]
 80094ee:	68da      	ldr	r2, [r3, #12]
 80094f0:	68fb      	ldr	r3, [r7, #12]
 80094f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80094f4:	b2d2      	uxtb	r2, r2
 80094f6:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80094f8:	68fb      	ldr	r3, [r7, #12]
 80094fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80094fc:	1c5a      	adds	r2, r3, #1
 80094fe:	68fb      	ldr	r3, [r7, #12]
 8009500:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8009502:	68fb      	ldr	r3, [r7, #12]
 8009504:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009506:	b29b      	uxth	r3, r3
 8009508:	3b01      	subs	r3, #1
 800950a:	b29a      	uxth	r2, r3
 800950c:	68fb      	ldr	r3, [r7, #12]
 800950e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8009510:	2301      	movs	r3, #1
 8009512:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8009514:	f7fd fc44 	bl	8006da0 <HAL_GetTick>
 8009518:	4602      	mov	r2, r0
 800951a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800951c:	1ad3      	subs	r3, r2, r3
 800951e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009520:	429a      	cmp	r2, r3
 8009522:	d803      	bhi.n	800952c <HAL_SPI_TransmitReceive+0x2c6>
 8009524:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009526:	f1b3 3fff 	cmp.w	r3, #4294967295
 800952a:	d102      	bne.n	8009532 <HAL_SPI_TransmitReceive+0x2cc>
 800952c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800952e:	2b00      	cmp	r3, #0
 8009530:	d103      	bne.n	800953a <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8009532:	2303      	movs	r3, #3
 8009534:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8009538:	e029      	b.n	800958e <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800953a:	68fb      	ldr	r3, [r7, #12]
 800953c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800953e:	b29b      	uxth	r3, r3
 8009540:	2b00      	cmp	r3, #0
 8009542:	d1a2      	bne.n	800948a <HAL_SPI_TransmitReceive+0x224>
 8009544:	68fb      	ldr	r3, [r7, #12]
 8009546:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009548:	b29b      	uxth	r3, r3
 800954a:	2b00      	cmp	r3, #0
 800954c:	d19d      	bne.n	800948a <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800954e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009550:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8009552:	68f8      	ldr	r0, [r7, #12]
 8009554:	f000 f8b2 	bl	80096bc <SPI_EndRxTxTransaction>
 8009558:	4603      	mov	r3, r0
 800955a:	2b00      	cmp	r3, #0
 800955c:	d006      	beq.n	800956c <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 800955e:	2301      	movs	r3, #1
 8009560:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8009564:	68fb      	ldr	r3, [r7, #12]
 8009566:	2220      	movs	r2, #32
 8009568:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800956a:	e010      	b.n	800958e <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800956c:	68fb      	ldr	r3, [r7, #12]
 800956e:	689b      	ldr	r3, [r3, #8]
 8009570:	2b00      	cmp	r3, #0
 8009572:	d10b      	bne.n	800958c <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8009574:	2300      	movs	r3, #0
 8009576:	617b      	str	r3, [r7, #20]
 8009578:	68fb      	ldr	r3, [r7, #12]
 800957a:	681b      	ldr	r3, [r3, #0]
 800957c:	68db      	ldr	r3, [r3, #12]
 800957e:	617b      	str	r3, [r7, #20]
 8009580:	68fb      	ldr	r3, [r7, #12]
 8009582:	681b      	ldr	r3, [r3, #0]
 8009584:	689b      	ldr	r3, [r3, #8]
 8009586:	617b      	str	r3, [r7, #20]
 8009588:	697b      	ldr	r3, [r7, #20]
 800958a:	e000      	b.n	800958e <HAL_SPI_TransmitReceive+0x328>
  }

error :
 800958c:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800958e:	68fb      	ldr	r3, [r7, #12]
 8009590:	2201      	movs	r2, #1
 8009592:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8009596:	68fb      	ldr	r3, [r7, #12]
 8009598:	2200      	movs	r2, #0
 800959a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800959e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80095a2:	4618      	mov	r0, r3
 80095a4:	3730      	adds	r7, #48	; 0x30
 80095a6:	46bd      	mov	sp, r7
 80095a8:	bd80      	pop	{r7, pc}
	...

080095ac <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80095ac:	b580      	push	{r7, lr}
 80095ae:	b088      	sub	sp, #32
 80095b0:	af00      	add	r7, sp, #0
 80095b2:	60f8      	str	r0, [r7, #12]
 80095b4:	60b9      	str	r1, [r7, #8]
 80095b6:	603b      	str	r3, [r7, #0]
 80095b8:	4613      	mov	r3, r2
 80095ba:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80095bc:	f7fd fbf0 	bl	8006da0 <HAL_GetTick>
 80095c0:	4602      	mov	r2, r0
 80095c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80095c4:	1a9b      	subs	r3, r3, r2
 80095c6:	683a      	ldr	r2, [r7, #0]
 80095c8:	4413      	add	r3, r2
 80095ca:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80095cc:	f7fd fbe8 	bl	8006da0 <HAL_GetTick>
 80095d0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80095d2:	4b39      	ldr	r3, [pc, #228]	; (80096b8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80095d4:	681b      	ldr	r3, [r3, #0]
 80095d6:	015b      	lsls	r3, r3, #5
 80095d8:	0d1b      	lsrs	r3, r3, #20
 80095da:	69fa      	ldr	r2, [r7, #28]
 80095dc:	fb02 f303 	mul.w	r3, r2, r3
 80095e0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80095e2:	e054      	b.n	800968e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80095e4:	683b      	ldr	r3, [r7, #0]
 80095e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80095ea:	d050      	beq.n	800968e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80095ec:	f7fd fbd8 	bl	8006da0 <HAL_GetTick>
 80095f0:	4602      	mov	r2, r0
 80095f2:	69bb      	ldr	r3, [r7, #24]
 80095f4:	1ad3      	subs	r3, r2, r3
 80095f6:	69fa      	ldr	r2, [r7, #28]
 80095f8:	429a      	cmp	r2, r3
 80095fa:	d902      	bls.n	8009602 <SPI_WaitFlagStateUntilTimeout+0x56>
 80095fc:	69fb      	ldr	r3, [r7, #28]
 80095fe:	2b00      	cmp	r3, #0
 8009600:	d13d      	bne.n	800967e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8009602:	68fb      	ldr	r3, [r7, #12]
 8009604:	681b      	ldr	r3, [r3, #0]
 8009606:	685a      	ldr	r2, [r3, #4]
 8009608:	68fb      	ldr	r3, [r7, #12]
 800960a:	681b      	ldr	r3, [r3, #0]
 800960c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8009610:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009612:	68fb      	ldr	r3, [r7, #12]
 8009614:	685b      	ldr	r3, [r3, #4]
 8009616:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800961a:	d111      	bne.n	8009640 <SPI_WaitFlagStateUntilTimeout+0x94>
 800961c:	68fb      	ldr	r3, [r7, #12]
 800961e:	689b      	ldr	r3, [r3, #8]
 8009620:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009624:	d004      	beq.n	8009630 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8009626:	68fb      	ldr	r3, [r7, #12]
 8009628:	689b      	ldr	r3, [r3, #8]
 800962a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800962e:	d107      	bne.n	8009640 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8009630:	68fb      	ldr	r3, [r7, #12]
 8009632:	681b      	ldr	r3, [r3, #0]
 8009634:	681a      	ldr	r2, [r3, #0]
 8009636:	68fb      	ldr	r3, [r7, #12]
 8009638:	681b      	ldr	r3, [r3, #0]
 800963a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800963e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8009640:	68fb      	ldr	r3, [r7, #12]
 8009642:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009644:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009648:	d10f      	bne.n	800966a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800964a:	68fb      	ldr	r3, [r7, #12]
 800964c:	681b      	ldr	r3, [r3, #0]
 800964e:	681a      	ldr	r2, [r3, #0]
 8009650:	68fb      	ldr	r3, [r7, #12]
 8009652:	681b      	ldr	r3, [r3, #0]
 8009654:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8009658:	601a      	str	r2, [r3, #0]
 800965a:	68fb      	ldr	r3, [r7, #12]
 800965c:	681b      	ldr	r3, [r3, #0]
 800965e:	681a      	ldr	r2, [r3, #0]
 8009660:	68fb      	ldr	r3, [r7, #12]
 8009662:	681b      	ldr	r3, [r3, #0]
 8009664:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8009668:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800966a:	68fb      	ldr	r3, [r7, #12]
 800966c:	2201      	movs	r2, #1
 800966e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8009672:	68fb      	ldr	r3, [r7, #12]
 8009674:	2200      	movs	r2, #0
 8009676:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800967a:	2303      	movs	r3, #3
 800967c:	e017      	b.n	80096ae <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800967e:	697b      	ldr	r3, [r7, #20]
 8009680:	2b00      	cmp	r3, #0
 8009682:	d101      	bne.n	8009688 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8009684:	2300      	movs	r3, #0
 8009686:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8009688:	697b      	ldr	r3, [r7, #20]
 800968a:	3b01      	subs	r3, #1
 800968c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800968e:	68fb      	ldr	r3, [r7, #12]
 8009690:	681b      	ldr	r3, [r3, #0]
 8009692:	689a      	ldr	r2, [r3, #8]
 8009694:	68bb      	ldr	r3, [r7, #8]
 8009696:	4013      	ands	r3, r2
 8009698:	68ba      	ldr	r2, [r7, #8]
 800969a:	429a      	cmp	r2, r3
 800969c:	bf0c      	ite	eq
 800969e:	2301      	moveq	r3, #1
 80096a0:	2300      	movne	r3, #0
 80096a2:	b2db      	uxtb	r3, r3
 80096a4:	461a      	mov	r2, r3
 80096a6:	79fb      	ldrb	r3, [r7, #7]
 80096a8:	429a      	cmp	r2, r3
 80096aa:	d19b      	bne.n	80095e4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80096ac:	2300      	movs	r3, #0
}
 80096ae:	4618      	mov	r0, r3
 80096b0:	3720      	adds	r7, #32
 80096b2:	46bd      	mov	sp, r7
 80096b4:	bd80      	pop	{r7, pc}
 80096b6:	bf00      	nop
 80096b8:	20000004 	.word	0x20000004

080096bc <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80096bc:	b580      	push	{r7, lr}
 80096be:	b088      	sub	sp, #32
 80096c0:	af02      	add	r7, sp, #8
 80096c2:	60f8      	str	r0, [r7, #12]
 80096c4:	60b9      	str	r1, [r7, #8]
 80096c6:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80096c8:	4b1b      	ldr	r3, [pc, #108]	; (8009738 <SPI_EndRxTxTransaction+0x7c>)
 80096ca:	681b      	ldr	r3, [r3, #0]
 80096cc:	4a1b      	ldr	r2, [pc, #108]	; (800973c <SPI_EndRxTxTransaction+0x80>)
 80096ce:	fba2 2303 	umull	r2, r3, r2, r3
 80096d2:	0d5b      	lsrs	r3, r3, #21
 80096d4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80096d8:	fb02 f303 	mul.w	r3, r2, r3
 80096dc:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80096de:	68fb      	ldr	r3, [r7, #12]
 80096e0:	685b      	ldr	r3, [r3, #4]
 80096e2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80096e6:	d112      	bne.n	800970e <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80096e8:	687b      	ldr	r3, [r7, #4]
 80096ea:	9300      	str	r3, [sp, #0]
 80096ec:	68bb      	ldr	r3, [r7, #8]
 80096ee:	2200      	movs	r2, #0
 80096f0:	2180      	movs	r1, #128	; 0x80
 80096f2:	68f8      	ldr	r0, [r7, #12]
 80096f4:	f7ff ff5a 	bl	80095ac <SPI_WaitFlagStateUntilTimeout>
 80096f8:	4603      	mov	r3, r0
 80096fa:	2b00      	cmp	r3, #0
 80096fc:	d016      	beq.n	800972c <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80096fe:	68fb      	ldr	r3, [r7, #12]
 8009700:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009702:	f043 0220 	orr.w	r2, r3, #32
 8009706:	68fb      	ldr	r3, [r7, #12]
 8009708:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800970a:	2303      	movs	r3, #3
 800970c:	e00f      	b.n	800972e <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800970e:	697b      	ldr	r3, [r7, #20]
 8009710:	2b00      	cmp	r3, #0
 8009712:	d00a      	beq.n	800972a <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8009714:	697b      	ldr	r3, [r7, #20]
 8009716:	3b01      	subs	r3, #1
 8009718:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800971a:	68fb      	ldr	r3, [r7, #12]
 800971c:	681b      	ldr	r3, [r3, #0]
 800971e:	689b      	ldr	r3, [r3, #8]
 8009720:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009724:	2b80      	cmp	r3, #128	; 0x80
 8009726:	d0f2      	beq.n	800970e <SPI_EndRxTxTransaction+0x52>
 8009728:	e000      	b.n	800972c <SPI_EndRxTxTransaction+0x70>
        break;
 800972a:	bf00      	nop
  }

  return HAL_OK;
 800972c:	2300      	movs	r3, #0
}
 800972e:	4618      	mov	r0, r3
 8009730:	3718      	adds	r7, #24
 8009732:	46bd      	mov	sp, r7
 8009734:	bd80      	pop	{r7, pc}
 8009736:	bf00      	nop
 8009738:	20000004 	.word	0x20000004
 800973c:	165e9f81 	.word	0x165e9f81

08009740 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8009740:	b580      	push	{r7, lr}
 8009742:	b082      	sub	sp, #8
 8009744:	af00      	add	r7, sp, #0
 8009746:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009748:	687b      	ldr	r3, [r7, #4]
 800974a:	2b00      	cmp	r3, #0
 800974c:	d101      	bne.n	8009752 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800974e:	2301      	movs	r3, #1
 8009750:	e041      	b.n	80097d6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009752:	687b      	ldr	r3, [r7, #4]
 8009754:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009758:	b2db      	uxtb	r3, r3
 800975a:	2b00      	cmp	r3, #0
 800975c:	d106      	bne.n	800976c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800975e:	687b      	ldr	r3, [r7, #4]
 8009760:	2200      	movs	r2, #0
 8009762:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8009766:	6878      	ldr	r0, [r7, #4]
 8009768:	f7f8 f824 	bl	80017b4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800976c:	687b      	ldr	r3, [r7, #4]
 800976e:	2202      	movs	r2, #2
 8009770:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009774:	687b      	ldr	r3, [r7, #4]
 8009776:	681a      	ldr	r2, [r3, #0]
 8009778:	687b      	ldr	r3, [r7, #4]
 800977a:	3304      	adds	r3, #4
 800977c:	4619      	mov	r1, r3
 800977e:	4610      	mov	r0, r2
 8009780:	f000 fac0 	bl	8009d04 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009784:	687b      	ldr	r3, [r7, #4]
 8009786:	2201      	movs	r2, #1
 8009788:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800978c:	687b      	ldr	r3, [r7, #4]
 800978e:	2201      	movs	r2, #1
 8009790:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009794:	687b      	ldr	r3, [r7, #4]
 8009796:	2201      	movs	r2, #1
 8009798:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800979c:	687b      	ldr	r3, [r7, #4]
 800979e:	2201      	movs	r2, #1
 80097a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80097a4:	687b      	ldr	r3, [r7, #4]
 80097a6:	2201      	movs	r2, #1
 80097a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80097ac:	687b      	ldr	r3, [r7, #4]
 80097ae:	2201      	movs	r2, #1
 80097b0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80097b4:	687b      	ldr	r3, [r7, #4]
 80097b6:	2201      	movs	r2, #1
 80097b8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80097bc:	687b      	ldr	r3, [r7, #4]
 80097be:	2201      	movs	r2, #1
 80097c0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80097c4:	687b      	ldr	r3, [r7, #4]
 80097c6:	2201      	movs	r2, #1
 80097c8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80097cc:	687b      	ldr	r3, [r7, #4]
 80097ce:	2201      	movs	r2, #1
 80097d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80097d4:	2300      	movs	r3, #0
}
 80097d6:	4618      	mov	r0, r3
 80097d8:	3708      	adds	r7, #8
 80097da:	46bd      	mov	sp, r7
 80097dc:	bd80      	pop	{r7, pc}
	...

080097e0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80097e0:	b480      	push	{r7}
 80097e2:	b085      	sub	sp, #20
 80097e4:	af00      	add	r7, sp, #0
 80097e6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80097e8:	687b      	ldr	r3, [r7, #4]
 80097ea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80097ee:	b2db      	uxtb	r3, r3
 80097f0:	2b01      	cmp	r3, #1
 80097f2:	d001      	beq.n	80097f8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80097f4:	2301      	movs	r3, #1
 80097f6:	e044      	b.n	8009882 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80097f8:	687b      	ldr	r3, [r7, #4]
 80097fa:	2202      	movs	r2, #2
 80097fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8009800:	687b      	ldr	r3, [r7, #4]
 8009802:	681b      	ldr	r3, [r3, #0]
 8009804:	68da      	ldr	r2, [r3, #12]
 8009806:	687b      	ldr	r3, [r7, #4]
 8009808:	681b      	ldr	r3, [r3, #0]
 800980a:	f042 0201 	orr.w	r2, r2, #1
 800980e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009810:	687b      	ldr	r3, [r7, #4]
 8009812:	681b      	ldr	r3, [r3, #0]
 8009814:	4a1e      	ldr	r2, [pc, #120]	; (8009890 <HAL_TIM_Base_Start_IT+0xb0>)
 8009816:	4293      	cmp	r3, r2
 8009818:	d018      	beq.n	800984c <HAL_TIM_Base_Start_IT+0x6c>
 800981a:	687b      	ldr	r3, [r7, #4]
 800981c:	681b      	ldr	r3, [r3, #0]
 800981e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009822:	d013      	beq.n	800984c <HAL_TIM_Base_Start_IT+0x6c>
 8009824:	687b      	ldr	r3, [r7, #4]
 8009826:	681b      	ldr	r3, [r3, #0]
 8009828:	4a1a      	ldr	r2, [pc, #104]	; (8009894 <HAL_TIM_Base_Start_IT+0xb4>)
 800982a:	4293      	cmp	r3, r2
 800982c:	d00e      	beq.n	800984c <HAL_TIM_Base_Start_IT+0x6c>
 800982e:	687b      	ldr	r3, [r7, #4]
 8009830:	681b      	ldr	r3, [r3, #0]
 8009832:	4a19      	ldr	r2, [pc, #100]	; (8009898 <HAL_TIM_Base_Start_IT+0xb8>)
 8009834:	4293      	cmp	r3, r2
 8009836:	d009      	beq.n	800984c <HAL_TIM_Base_Start_IT+0x6c>
 8009838:	687b      	ldr	r3, [r7, #4]
 800983a:	681b      	ldr	r3, [r3, #0]
 800983c:	4a17      	ldr	r2, [pc, #92]	; (800989c <HAL_TIM_Base_Start_IT+0xbc>)
 800983e:	4293      	cmp	r3, r2
 8009840:	d004      	beq.n	800984c <HAL_TIM_Base_Start_IT+0x6c>
 8009842:	687b      	ldr	r3, [r7, #4]
 8009844:	681b      	ldr	r3, [r3, #0]
 8009846:	4a16      	ldr	r2, [pc, #88]	; (80098a0 <HAL_TIM_Base_Start_IT+0xc0>)
 8009848:	4293      	cmp	r3, r2
 800984a:	d111      	bne.n	8009870 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800984c:	687b      	ldr	r3, [r7, #4]
 800984e:	681b      	ldr	r3, [r3, #0]
 8009850:	689b      	ldr	r3, [r3, #8]
 8009852:	f003 0307 	and.w	r3, r3, #7
 8009856:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009858:	68fb      	ldr	r3, [r7, #12]
 800985a:	2b06      	cmp	r3, #6
 800985c:	d010      	beq.n	8009880 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 800985e:	687b      	ldr	r3, [r7, #4]
 8009860:	681b      	ldr	r3, [r3, #0]
 8009862:	681a      	ldr	r2, [r3, #0]
 8009864:	687b      	ldr	r3, [r7, #4]
 8009866:	681b      	ldr	r3, [r3, #0]
 8009868:	f042 0201 	orr.w	r2, r2, #1
 800986c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800986e:	e007      	b.n	8009880 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009870:	687b      	ldr	r3, [r7, #4]
 8009872:	681b      	ldr	r3, [r3, #0]
 8009874:	681a      	ldr	r2, [r3, #0]
 8009876:	687b      	ldr	r3, [r7, #4]
 8009878:	681b      	ldr	r3, [r3, #0]
 800987a:	f042 0201 	orr.w	r2, r2, #1
 800987e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8009880:	2300      	movs	r3, #0
}
 8009882:	4618      	mov	r0, r3
 8009884:	3714      	adds	r7, #20
 8009886:	46bd      	mov	sp, r7
 8009888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800988c:	4770      	bx	lr
 800988e:	bf00      	nop
 8009890:	40010000 	.word	0x40010000
 8009894:	40000400 	.word	0x40000400
 8009898:	40000800 	.word	0x40000800
 800989c:	40000c00 	.word	0x40000c00
 80098a0:	40014000 	.word	0x40014000

080098a4 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 80098a4:	b480      	push	{r7}
 80098a6:	b083      	sub	sp, #12
 80098a8:	af00      	add	r7, sp, #0
 80098aa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 80098ac:	687b      	ldr	r3, [r7, #4]
 80098ae:	681b      	ldr	r3, [r3, #0]
 80098b0:	68da      	ldr	r2, [r3, #12]
 80098b2:	687b      	ldr	r3, [r7, #4]
 80098b4:	681b      	ldr	r3, [r3, #0]
 80098b6:	f022 0201 	bic.w	r2, r2, #1
 80098ba:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80098bc:	687b      	ldr	r3, [r7, #4]
 80098be:	681b      	ldr	r3, [r3, #0]
 80098c0:	6a1a      	ldr	r2, [r3, #32]
 80098c2:	f241 1311 	movw	r3, #4369	; 0x1111
 80098c6:	4013      	ands	r3, r2
 80098c8:	2b00      	cmp	r3, #0
 80098ca:	d10f      	bne.n	80098ec <HAL_TIM_Base_Stop_IT+0x48>
 80098cc:	687b      	ldr	r3, [r7, #4]
 80098ce:	681b      	ldr	r3, [r3, #0]
 80098d0:	6a1a      	ldr	r2, [r3, #32]
 80098d2:	f240 4344 	movw	r3, #1092	; 0x444
 80098d6:	4013      	ands	r3, r2
 80098d8:	2b00      	cmp	r3, #0
 80098da:	d107      	bne.n	80098ec <HAL_TIM_Base_Stop_IT+0x48>
 80098dc:	687b      	ldr	r3, [r7, #4]
 80098de:	681b      	ldr	r3, [r3, #0]
 80098e0:	681a      	ldr	r2, [r3, #0]
 80098e2:	687b      	ldr	r3, [r7, #4]
 80098e4:	681b      	ldr	r3, [r3, #0]
 80098e6:	f022 0201 	bic.w	r2, r2, #1
 80098ea:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 80098ec:	687b      	ldr	r3, [r7, #4]
 80098ee:	2201      	movs	r2, #1
 80098f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 80098f4:	2300      	movs	r3, #0
}
 80098f6:	4618      	mov	r0, r3
 80098f8:	370c      	adds	r7, #12
 80098fa:	46bd      	mov	sp, r7
 80098fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009900:	4770      	bx	lr

08009902 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8009902:	b580      	push	{r7, lr}
 8009904:	b082      	sub	sp, #8
 8009906:	af00      	add	r7, sp, #0
 8009908:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800990a:	687b      	ldr	r3, [r7, #4]
 800990c:	681b      	ldr	r3, [r3, #0]
 800990e:	691b      	ldr	r3, [r3, #16]
 8009910:	f003 0302 	and.w	r3, r3, #2
 8009914:	2b02      	cmp	r3, #2
 8009916:	d122      	bne.n	800995e <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8009918:	687b      	ldr	r3, [r7, #4]
 800991a:	681b      	ldr	r3, [r3, #0]
 800991c:	68db      	ldr	r3, [r3, #12]
 800991e:	f003 0302 	and.w	r3, r3, #2
 8009922:	2b02      	cmp	r3, #2
 8009924:	d11b      	bne.n	800995e <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8009926:	687b      	ldr	r3, [r7, #4]
 8009928:	681b      	ldr	r3, [r3, #0]
 800992a:	f06f 0202 	mvn.w	r2, #2
 800992e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8009930:	687b      	ldr	r3, [r7, #4]
 8009932:	2201      	movs	r2, #1
 8009934:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8009936:	687b      	ldr	r3, [r7, #4]
 8009938:	681b      	ldr	r3, [r3, #0]
 800993a:	699b      	ldr	r3, [r3, #24]
 800993c:	f003 0303 	and.w	r3, r3, #3
 8009940:	2b00      	cmp	r3, #0
 8009942:	d003      	beq.n	800994c <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8009944:	6878      	ldr	r0, [r7, #4]
 8009946:	f000 f9bf 	bl	8009cc8 <HAL_TIM_IC_CaptureCallback>
 800994a:	e005      	b.n	8009958 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800994c:	6878      	ldr	r0, [r7, #4]
 800994e:	f000 f9b1 	bl	8009cb4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009952:	6878      	ldr	r0, [r7, #4]
 8009954:	f000 f9c2 	bl	8009cdc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009958:	687b      	ldr	r3, [r7, #4]
 800995a:	2200      	movs	r2, #0
 800995c:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800995e:	687b      	ldr	r3, [r7, #4]
 8009960:	681b      	ldr	r3, [r3, #0]
 8009962:	691b      	ldr	r3, [r3, #16]
 8009964:	f003 0304 	and.w	r3, r3, #4
 8009968:	2b04      	cmp	r3, #4
 800996a:	d122      	bne.n	80099b2 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800996c:	687b      	ldr	r3, [r7, #4]
 800996e:	681b      	ldr	r3, [r3, #0]
 8009970:	68db      	ldr	r3, [r3, #12]
 8009972:	f003 0304 	and.w	r3, r3, #4
 8009976:	2b04      	cmp	r3, #4
 8009978:	d11b      	bne.n	80099b2 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800997a:	687b      	ldr	r3, [r7, #4]
 800997c:	681b      	ldr	r3, [r3, #0]
 800997e:	f06f 0204 	mvn.w	r2, #4
 8009982:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8009984:	687b      	ldr	r3, [r7, #4]
 8009986:	2202      	movs	r2, #2
 8009988:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800998a:	687b      	ldr	r3, [r7, #4]
 800998c:	681b      	ldr	r3, [r3, #0]
 800998e:	699b      	ldr	r3, [r3, #24]
 8009990:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009994:	2b00      	cmp	r3, #0
 8009996:	d003      	beq.n	80099a0 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009998:	6878      	ldr	r0, [r7, #4]
 800999a:	f000 f995 	bl	8009cc8 <HAL_TIM_IC_CaptureCallback>
 800999e:	e005      	b.n	80099ac <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80099a0:	6878      	ldr	r0, [r7, #4]
 80099a2:	f000 f987 	bl	8009cb4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80099a6:	6878      	ldr	r0, [r7, #4]
 80099a8:	f000 f998 	bl	8009cdc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80099ac:	687b      	ldr	r3, [r7, #4]
 80099ae:	2200      	movs	r2, #0
 80099b0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80099b2:	687b      	ldr	r3, [r7, #4]
 80099b4:	681b      	ldr	r3, [r3, #0]
 80099b6:	691b      	ldr	r3, [r3, #16]
 80099b8:	f003 0308 	and.w	r3, r3, #8
 80099bc:	2b08      	cmp	r3, #8
 80099be:	d122      	bne.n	8009a06 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80099c0:	687b      	ldr	r3, [r7, #4]
 80099c2:	681b      	ldr	r3, [r3, #0]
 80099c4:	68db      	ldr	r3, [r3, #12]
 80099c6:	f003 0308 	and.w	r3, r3, #8
 80099ca:	2b08      	cmp	r3, #8
 80099cc:	d11b      	bne.n	8009a06 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80099ce:	687b      	ldr	r3, [r7, #4]
 80099d0:	681b      	ldr	r3, [r3, #0]
 80099d2:	f06f 0208 	mvn.w	r2, #8
 80099d6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80099d8:	687b      	ldr	r3, [r7, #4]
 80099da:	2204      	movs	r2, #4
 80099dc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80099de:	687b      	ldr	r3, [r7, #4]
 80099e0:	681b      	ldr	r3, [r3, #0]
 80099e2:	69db      	ldr	r3, [r3, #28]
 80099e4:	f003 0303 	and.w	r3, r3, #3
 80099e8:	2b00      	cmp	r3, #0
 80099ea:	d003      	beq.n	80099f4 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80099ec:	6878      	ldr	r0, [r7, #4]
 80099ee:	f000 f96b 	bl	8009cc8 <HAL_TIM_IC_CaptureCallback>
 80099f2:	e005      	b.n	8009a00 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80099f4:	6878      	ldr	r0, [r7, #4]
 80099f6:	f000 f95d 	bl	8009cb4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80099fa:	6878      	ldr	r0, [r7, #4]
 80099fc:	f000 f96e 	bl	8009cdc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009a00:	687b      	ldr	r3, [r7, #4]
 8009a02:	2200      	movs	r2, #0
 8009a04:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8009a06:	687b      	ldr	r3, [r7, #4]
 8009a08:	681b      	ldr	r3, [r3, #0]
 8009a0a:	691b      	ldr	r3, [r3, #16]
 8009a0c:	f003 0310 	and.w	r3, r3, #16
 8009a10:	2b10      	cmp	r3, #16
 8009a12:	d122      	bne.n	8009a5a <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8009a14:	687b      	ldr	r3, [r7, #4]
 8009a16:	681b      	ldr	r3, [r3, #0]
 8009a18:	68db      	ldr	r3, [r3, #12]
 8009a1a:	f003 0310 	and.w	r3, r3, #16
 8009a1e:	2b10      	cmp	r3, #16
 8009a20:	d11b      	bne.n	8009a5a <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8009a22:	687b      	ldr	r3, [r7, #4]
 8009a24:	681b      	ldr	r3, [r3, #0]
 8009a26:	f06f 0210 	mvn.w	r2, #16
 8009a2a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8009a2c:	687b      	ldr	r3, [r7, #4]
 8009a2e:	2208      	movs	r2, #8
 8009a30:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8009a32:	687b      	ldr	r3, [r7, #4]
 8009a34:	681b      	ldr	r3, [r3, #0]
 8009a36:	69db      	ldr	r3, [r3, #28]
 8009a38:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009a3c:	2b00      	cmp	r3, #0
 8009a3e:	d003      	beq.n	8009a48 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009a40:	6878      	ldr	r0, [r7, #4]
 8009a42:	f000 f941 	bl	8009cc8 <HAL_TIM_IC_CaptureCallback>
 8009a46:	e005      	b.n	8009a54 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009a48:	6878      	ldr	r0, [r7, #4]
 8009a4a:	f000 f933 	bl	8009cb4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009a4e:	6878      	ldr	r0, [r7, #4]
 8009a50:	f000 f944 	bl	8009cdc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009a54:	687b      	ldr	r3, [r7, #4]
 8009a56:	2200      	movs	r2, #0
 8009a58:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8009a5a:	687b      	ldr	r3, [r7, #4]
 8009a5c:	681b      	ldr	r3, [r3, #0]
 8009a5e:	691b      	ldr	r3, [r3, #16]
 8009a60:	f003 0301 	and.w	r3, r3, #1
 8009a64:	2b01      	cmp	r3, #1
 8009a66:	d10e      	bne.n	8009a86 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8009a68:	687b      	ldr	r3, [r7, #4]
 8009a6a:	681b      	ldr	r3, [r3, #0]
 8009a6c:	68db      	ldr	r3, [r3, #12]
 8009a6e:	f003 0301 	and.w	r3, r3, #1
 8009a72:	2b01      	cmp	r3, #1
 8009a74:	d107      	bne.n	8009a86 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8009a76:	687b      	ldr	r3, [r7, #4]
 8009a78:	681b      	ldr	r3, [r3, #0]
 8009a7a:	f06f 0201 	mvn.w	r2, #1
 8009a7e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8009a80:	6878      	ldr	r0, [r7, #4]
 8009a82:	f000 f90d 	bl	8009ca0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8009a86:	687b      	ldr	r3, [r7, #4]
 8009a88:	681b      	ldr	r3, [r3, #0]
 8009a8a:	691b      	ldr	r3, [r3, #16]
 8009a8c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009a90:	2b80      	cmp	r3, #128	; 0x80
 8009a92:	d10e      	bne.n	8009ab2 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8009a94:	687b      	ldr	r3, [r7, #4]
 8009a96:	681b      	ldr	r3, [r3, #0]
 8009a98:	68db      	ldr	r3, [r3, #12]
 8009a9a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009a9e:	2b80      	cmp	r3, #128	; 0x80
 8009aa0:	d107      	bne.n	8009ab2 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8009aa2:	687b      	ldr	r3, [r7, #4]
 8009aa4:	681b      	ldr	r3, [r3, #0]
 8009aa6:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8009aaa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8009aac:	6878      	ldr	r0, [r7, #4]
 8009aae:	f000 fabb 	bl	800a028 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8009ab2:	687b      	ldr	r3, [r7, #4]
 8009ab4:	681b      	ldr	r3, [r3, #0]
 8009ab6:	691b      	ldr	r3, [r3, #16]
 8009ab8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009abc:	2b40      	cmp	r3, #64	; 0x40
 8009abe:	d10e      	bne.n	8009ade <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8009ac0:	687b      	ldr	r3, [r7, #4]
 8009ac2:	681b      	ldr	r3, [r3, #0]
 8009ac4:	68db      	ldr	r3, [r3, #12]
 8009ac6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009aca:	2b40      	cmp	r3, #64	; 0x40
 8009acc:	d107      	bne.n	8009ade <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8009ace:	687b      	ldr	r3, [r7, #4]
 8009ad0:	681b      	ldr	r3, [r3, #0]
 8009ad2:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8009ad6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8009ad8:	6878      	ldr	r0, [r7, #4]
 8009ada:	f000 f909 	bl	8009cf0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8009ade:	687b      	ldr	r3, [r7, #4]
 8009ae0:	681b      	ldr	r3, [r3, #0]
 8009ae2:	691b      	ldr	r3, [r3, #16]
 8009ae4:	f003 0320 	and.w	r3, r3, #32
 8009ae8:	2b20      	cmp	r3, #32
 8009aea:	d10e      	bne.n	8009b0a <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8009aec:	687b      	ldr	r3, [r7, #4]
 8009aee:	681b      	ldr	r3, [r3, #0]
 8009af0:	68db      	ldr	r3, [r3, #12]
 8009af2:	f003 0320 	and.w	r3, r3, #32
 8009af6:	2b20      	cmp	r3, #32
 8009af8:	d107      	bne.n	8009b0a <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8009afa:	687b      	ldr	r3, [r7, #4]
 8009afc:	681b      	ldr	r3, [r3, #0]
 8009afe:	f06f 0220 	mvn.w	r2, #32
 8009b02:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8009b04:	6878      	ldr	r0, [r7, #4]
 8009b06:	f000 fa85 	bl	800a014 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8009b0a:	bf00      	nop
 8009b0c:	3708      	adds	r7, #8
 8009b0e:	46bd      	mov	sp, r7
 8009b10:	bd80      	pop	{r7, pc}

08009b12 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8009b12:	b580      	push	{r7, lr}
 8009b14:	b084      	sub	sp, #16
 8009b16:	af00      	add	r7, sp, #0
 8009b18:	6078      	str	r0, [r7, #4]
 8009b1a:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8009b1c:	2300      	movs	r3, #0
 8009b1e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8009b20:	687b      	ldr	r3, [r7, #4]
 8009b22:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009b26:	2b01      	cmp	r3, #1
 8009b28:	d101      	bne.n	8009b2e <HAL_TIM_ConfigClockSource+0x1c>
 8009b2a:	2302      	movs	r3, #2
 8009b2c:	e0b4      	b.n	8009c98 <HAL_TIM_ConfigClockSource+0x186>
 8009b2e:	687b      	ldr	r3, [r7, #4]
 8009b30:	2201      	movs	r2, #1
 8009b32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8009b36:	687b      	ldr	r3, [r7, #4]
 8009b38:	2202      	movs	r2, #2
 8009b3a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8009b3e:	687b      	ldr	r3, [r7, #4]
 8009b40:	681b      	ldr	r3, [r3, #0]
 8009b42:	689b      	ldr	r3, [r3, #8]
 8009b44:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8009b46:	68bb      	ldr	r3, [r7, #8]
 8009b48:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8009b4c:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009b4e:	68bb      	ldr	r3, [r7, #8]
 8009b50:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8009b54:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8009b56:	687b      	ldr	r3, [r7, #4]
 8009b58:	681b      	ldr	r3, [r3, #0]
 8009b5a:	68ba      	ldr	r2, [r7, #8]
 8009b5c:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8009b5e:	683b      	ldr	r3, [r7, #0]
 8009b60:	681b      	ldr	r3, [r3, #0]
 8009b62:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009b66:	d03e      	beq.n	8009be6 <HAL_TIM_ConfigClockSource+0xd4>
 8009b68:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009b6c:	f200 8087 	bhi.w	8009c7e <HAL_TIM_ConfigClockSource+0x16c>
 8009b70:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009b74:	f000 8086 	beq.w	8009c84 <HAL_TIM_ConfigClockSource+0x172>
 8009b78:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009b7c:	d87f      	bhi.n	8009c7e <HAL_TIM_ConfigClockSource+0x16c>
 8009b7e:	2b70      	cmp	r3, #112	; 0x70
 8009b80:	d01a      	beq.n	8009bb8 <HAL_TIM_ConfigClockSource+0xa6>
 8009b82:	2b70      	cmp	r3, #112	; 0x70
 8009b84:	d87b      	bhi.n	8009c7e <HAL_TIM_ConfigClockSource+0x16c>
 8009b86:	2b60      	cmp	r3, #96	; 0x60
 8009b88:	d050      	beq.n	8009c2c <HAL_TIM_ConfigClockSource+0x11a>
 8009b8a:	2b60      	cmp	r3, #96	; 0x60
 8009b8c:	d877      	bhi.n	8009c7e <HAL_TIM_ConfigClockSource+0x16c>
 8009b8e:	2b50      	cmp	r3, #80	; 0x50
 8009b90:	d03c      	beq.n	8009c0c <HAL_TIM_ConfigClockSource+0xfa>
 8009b92:	2b50      	cmp	r3, #80	; 0x50
 8009b94:	d873      	bhi.n	8009c7e <HAL_TIM_ConfigClockSource+0x16c>
 8009b96:	2b40      	cmp	r3, #64	; 0x40
 8009b98:	d058      	beq.n	8009c4c <HAL_TIM_ConfigClockSource+0x13a>
 8009b9a:	2b40      	cmp	r3, #64	; 0x40
 8009b9c:	d86f      	bhi.n	8009c7e <HAL_TIM_ConfigClockSource+0x16c>
 8009b9e:	2b30      	cmp	r3, #48	; 0x30
 8009ba0:	d064      	beq.n	8009c6c <HAL_TIM_ConfigClockSource+0x15a>
 8009ba2:	2b30      	cmp	r3, #48	; 0x30
 8009ba4:	d86b      	bhi.n	8009c7e <HAL_TIM_ConfigClockSource+0x16c>
 8009ba6:	2b20      	cmp	r3, #32
 8009ba8:	d060      	beq.n	8009c6c <HAL_TIM_ConfigClockSource+0x15a>
 8009baa:	2b20      	cmp	r3, #32
 8009bac:	d867      	bhi.n	8009c7e <HAL_TIM_ConfigClockSource+0x16c>
 8009bae:	2b00      	cmp	r3, #0
 8009bb0:	d05c      	beq.n	8009c6c <HAL_TIM_ConfigClockSource+0x15a>
 8009bb2:	2b10      	cmp	r3, #16
 8009bb4:	d05a      	beq.n	8009c6c <HAL_TIM_ConfigClockSource+0x15a>
 8009bb6:	e062      	b.n	8009c7e <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009bb8:	687b      	ldr	r3, [r7, #4]
 8009bba:	6818      	ldr	r0, [r3, #0]
 8009bbc:	683b      	ldr	r3, [r7, #0]
 8009bbe:	6899      	ldr	r1, [r3, #8]
 8009bc0:	683b      	ldr	r3, [r7, #0]
 8009bc2:	685a      	ldr	r2, [r3, #4]
 8009bc4:	683b      	ldr	r3, [r7, #0]
 8009bc6:	68db      	ldr	r3, [r3, #12]
 8009bc8:	f000 f996 	bl	8009ef8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8009bcc:	687b      	ldr	r3, [r7, #4]
 8009bce:	681b      	ldr	r3, [r3, #0]
 8009bd0:	689b      	ldr	r3, [r3, #8]
 8009bd2:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8009bd4:	68bb      	ldr	r3, [r7, #8]
 8009bd6:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8009bda:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8009bdc:	687b      	ldr	r3, [r7, #4]
 8009bde:	681b      	ldr	r3, [r3, #0]
 8009be0:	68ba      	ldr	r2, [r7, #8]
 8009be2:	609a      	str	r2, [r3, #8]
      break;
 8009be4:	e04f      	b.n	8009c86 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009be6:	687b      	ldr	r3, [r7, #4]
 8009be8:	6818      	ldr	r0, [r3, #0]
 8009bea:	683b      	ldr	r3, [r7, #0]
 8009bec:	6899      	ldr	r1, [r3, #8]
 8009bee:	683b      	ldr	r3, [r7, #0]
 8009bf0:	685a      	ldr	r2, [r3, #4]
 8009bf2:	683b      	ldr	r3, [r7, #0]
 8009bf4:	68db      	ldr	r3, [r3, #12]
 8009bf6:	f000 f97f 	bl	8009ef8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8009bfa:	687b      	ldr	r3, [r7, #4]
 8009bfc:	681b      	ldr	r3, [r3, #0]
 8009bfe:	689a      	ldr	r2, [r3, #8]
 8009c00:	687b      	ldr	r3, [r7, #4]
 8009c02:	681b      	ldr	r3, [r3, #0]
 8009c04:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8009c08:	609a      	str	r2, [r3, #8]
      break;
 8009c0a:	e03c      	b.n	8009c86 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8009c0c:	687b      	ldr	r3, [r7, #4]
 8009c0e:	6818      	ldr	r0, [r3, #0]
 8009c10:	683b      	ldr	r3, [r7, #0]
 8009c12:	6859      	ldr	r1, [r3, #4]
 8009c14:	683b      	ldr	r3, [r7, #0]
 8009c16:	68db      	ldr	r3, [r3, #12]
 8009c18:	461a      	mov	r2, r3
 8009c1a:	f000 f8f3 	bl	8009e04 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8009c1e:	687b      	ldr	r3, [r7, #4]
 8009c20:	681b      	ldr	r3, [r3, #0]
 8009c22:	2150      	movs	r1, #80	; 0x50
 8009c24:	4618      	mov	r0, r3
 8009c26:	f000 f94c 	bl	8009ec2 <TIM_ITRx_SetConfig>
      break;
 8009c2a:	e02c      	b.n	8009c86 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8009c2c:	687b      	ldr	r3, [r7, #4]
 8009c2e:	6818      	ldr	r0, [r3, #0]
 8009c30:	683b      	ldr	r3, [r7, #0]
 8009c32:	6859      	ldr	r1, [r3, #4]
 8009c34:	683b      	ldr	r3, [r7, #0]
 8009c36:	68db      	ldr	r3, [r3, #12]
 8009c38:	461a      	mov	r2, r3
 8009c3a:	f000 f912 	bl	8009e62 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8009c3e:	687b      	ldr	r3, [r7, #4]
 8009c40:	681b      	ldr	r3, [r3, #0]
 8009c42:	2160      	movs	r1, #96	; 0x60
 8009c44:	4618      	mov	r0, r3
 8009c46:	f000 f93c 	bl	8009ec2 <TIM_ITRx_SetConfig>
      break;
 8009c4a:	e01c      	b.n	8009c86 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8009c4c:	687b      	ldr	r3, [r7, #4]
 8009c4e:	6818      	ldr	r0, [r3, #0]
 8009c50:	683b      	ldr	r3, [r7, #0]
 8009c52:	6859      	ldr	r1, [r3, #4]
 8009c54:	683b      	ldr	r3, [r7, #0]
 8009c56:	68db      	ldr	r3, [r3, #12]
 8009c58:	461a      	mov	r2, r3
 8009c5a:	f000 f8d3 	bl	8009e04 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8009c5e:	687b      	ldr	r3, [r7, #4]
 8009c60:	681b      	ldr	r3, [r3, #0]
 8009c62:	2140      	movs	r1, #64	; 0x40
 8009c64:	4618      	mov	r0, r3
 8009c66:	f000 f92c 	bl	8009ec2 <TIM_ITRx_SetConfig>
      break;
 8009c6a:	e00c      	b.n	8009c86 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8009c6c:	687b      	ldr	r3, [r7, #4]
 8009c6e:	681a      	ldr	r2, [r3, #0]
 8009c70:	683b      	ldr	r3, [r7, #0]
 8009c72:	681b      	ldr	r3, [r3, #0]
 8009c74:	4619      	mov	r1, r3
 8009c76:	4610      	mov	r0, r2
 8009c78:	f000 f923 	bl	8009ec2 <TIM_ITRx_SetConfig>
      break;
 8009c7c:	e003      	b.n	8009c86 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8009c7e:	2301      	movs	r3, #1
 8009c80:	73fb      	strb	r3, [r7, #15]
      break;
 8009c82:	e000      	b.n	8009c86 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8009c84:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8009c86:	687b      	ldr	r3, [r7, #4]
 8009c88:	2201      	movs	r2, #1
 8009c8a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009c8e:	687b      	ldr	r3, [r7, #4]
 8009c90:	2200      	movs	r2, #0
 8009c92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8009c96:	7bfb      	ldrb	r3, [r7, #15]
}
 8009c98:	4618      	mov	r0, r3
 8009c9a:	3710      	adds	r7, #16
 8009c9c:	46bd      	mov	sp, r7
 8009c9e:	bd80      	pop	{r7, pc}

08009ca0 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009ca0:	b480      	push	{r7}
 8009ca2:	b083      	sub	sp, #12
 8009ca4:	af00      	add	r7, sp, #0
 8009ca6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8009ca8:	bf00      	nop
 8009caa:	370c      	adds	r7, #12
 8009cac:	46bd      	mov	sp, r7
 8009cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cb2:	4770      	bx	lr

08009cb4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009cb4:	b480      	push	{r7}
 8009cb6:	b083      	sub	sp, #12
 8009cb8:	af00      	add	r7, sp, #0
 8009cba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8009cbc:	bf00      	nop
 8009cbe:	370c      	adds	r7, #12
 8009cc0:	46bd      	mov	sp, r7
 8009cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cc6:	4770      	bx	lr

08009cc8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8009cc8:	b480      	push	{r7}
 8009cca:	b083      	sub	sp, #12
 8009ccc:	af00      	add	r7, sp, #0
 8009cce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8009cd0:	bf00      	nop
 8009cd2:	370c      	adds	r7, #12
 8009cd4:	46bd      	mov	sp, r7
 8009cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cda:	4770      	bx	lr

08009cdc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8009cdc:	b480      	push	{r7}
 8009cde:	b083      	sub	sp, #12
 8009ce0:	af00      	add	r7, sp, #0
 8009ce2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8009ce4:	bf00      	nop
 8009ce6:	370c      	adds	r7, #12
 8009ce8:	46bd      	mov	sp, r7
 8009cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cee:	4770      	bx	lr

08009cf0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8009cf0:	b480      	push	{r7}
 8009cf2:	b083      	sub	sp, #12
 8009cf4:	af00      	add	r7, sp, #0
 8009cf6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8009cf8:	bf00      	nop
 8009cfa:	370c      	adds	r7, #12
 8009cfc:	46bd      	mov	sp, r7
 8009cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d02:	4770      	bx	lr

08009d04 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8009d04:	b480      	push	{r7}
 8009d06:	b085      	sub	sp, #20
 8009d08:	af00      	add	r7, sp, #0
 8009d0a:	6078      	str	r0, [r7, #4]
 8009d0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8009d0e:	687b      	ldr	r3, [r7, #4]
 8009d10:	681b      	ldr	r3, [r3, #0]
 8009d12:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009d14:	687b      	ldr	r3, [r7, #4]
 8009d16:	4a34      	ldr	r2, [pc, #208]	; (8009de8 <TIM_Base_SetConfig+0xe4>)
 8009d18:	4293      	cmp	r3, r2
 8009d1a:	d00f      	beq.n	8009d3c <TIM_Base_SetConfig+0x38>
 8009d1c:	687b      	ldr	r3, [r7, #4]
 8009d1e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009d22:	d00b      	beq.n	8009d3c <TIM_Base_SetConfig+0x38>
 8009d24:	687b      	ldr	r3, [r7, #4]
 8009d26:	4a31      	ldr	r2, [pc, #196]	; (8009dec <TIM_Base_SetConfig+0xe8>)
 8009d28:	4293      	cmp	r3, r2
 8009d2a:	d007      	beq.n	8009d3c <TIM_Base_SetConfig+0x38>
 8009d2c:	687b      	ldr	r3, [r7, #4]
 8009d2e:	4a30      	ldr	r2, [pc, #192]	; (8009df0 <TIM_Base_SetConfig+0xec>)
 8009d30:	4293      	cmp	r3, r2
 8009d32:	d003      	beq.n	8009d3c <TIM_Base_SetConfig+0x38>
 8009d34:	687b      	ldr	r3, [r7, #4]
 8009d36:	4a2f      	ldr	r2, [pc, #188]	; (8009df4 <TIM_Base_SetConfig+0xf0>)
 8009d38:	4293      	cmp	r3, r2
 8009d3a:	d108      	bne.n	8009d4e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009d3c:	68fb      	ldr	r3, [r7, #12]
 8009d3e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009d42:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009d44:	683b      	ldr	r3, [r7, #0]
 8009d46:	685b      	ldr	r3, [r3, #4]
 8009d48:	68fa      	ldr	r2, [r7, #12]
 8009d4a:	4313      	orrs	r3, r2
 8009d4c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8009d4e:	687b      	ldr	r3, [r7, #4]
 8009d50:	4a25      	ldr	r2, [pc, #148]	; (8009de8 <TIM_Base_SetConfig+0xe4>)
 8009d52:	4293      	cmp	r3, r2
 8009d54:	d01b      	beq.n	8009d8e <TIM_Base_SetConfig+0x8a>
 8009d56:	687b      	ldr	r3, [r7, #4]
 8009d58:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009d5c:	d017      	beq.n	8009d8e <TIM_Base_SetConfig+0x8a>
 8009d5e:	687b      	ldr	r3, [r7, #4]
 8009d60:	4a22      	ldr	r2, [pc, #136]	; (8009dec <TIM_Base_SetConfig+0xe8>)
 8009d62:	4293      	cmp	r3, r2
 8009d64:	d013      	beq.n	8009d8e <TIM_Base_SetConfig+0x8a>
 8009d66:	687b      	ldr	r3, [r7, #4]
 8009d68:	4a21      	ldr	r2, [pc, #132]	; (8009df0 <TIM_Base_SetConfig+0xec>)
 8009d6a:	4293      	cmp	r3, r2
 8009d6c:	d00f      	beq.n	8009d8e <TIM_Base_SetConfig+0x8a>
 8009d6e:	687b      	ldr	r3, [r7, #4]
 8009d70:	4a20      	ldr	r2, [pc, #128]	; (8009df4 <TIM_Base_SetConfig+0xf0>)
 8009d72:	4293      	cmp	r3, r2
 8009d74:	d00b      	beq.n	8009d8e <TIM_Base_SetConfig+0x8a>
 8009d76:	687b      	ldr	r3, [r7, #4]
 8009d78:	4a1f      	ldr	r2, [pc, #124]	; (8009df8 <TIM_Base_SetConfig+0xf4>)
 8009d7a:	4293      	cmp	r3, r2
 8009d7c:	d007      	beq.n	8009d8e <TIM_Base_SetConfig+0x8a>
 8009d7e:	687b      	ldr	r3, [r7, #4]
 8009d80:	4a1e      	ldr	r2, [pc, #120]	; (8009dfc <TIM_Base_SetConfig+0xf8>)
 8009d82:	4293      	cmp	r3, r2
 8009d84:	d003      	beq.n	8009d8e <TIM_Base_SetConfig+0x8a>
 8009d86:	687b      	ldr	r3, [r7, #4]
 8009d88:	4a1d      	ldr	r2, [pc, #116]	; (8009e00 <TIM_Base_SetConfig+0xfc>)
 8009d8a:	4293      	cmp	r3, r2
 8009d8c:	d108      	bne.n	8009da0 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8009d8e:	68fb      	ldr	r3, [r7, #12]
 8009d90:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009d94:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009d96:	683b      	ldr	r3, [r7, #0]
 8009d98:	68db      	ldr	r3, [r3, #12]
 8009d9a:	68fa      	ldr	r2, [r7, #12]
 8009d9c:	4313      	orrs	r3, r2
 8009d9e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009da0:	68fb      	ldr	r3, [r7, #12]
 8009da2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8009da6:	683b      	ldr	r3, [r7, #0]
 8009da8:	695b      	ldr	r3, [r3, #20]
 8009daa:	4313      	orrs	r3, r2
 8009dac:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8009dae:	687b      	ldr	r3, [r7, #4]
 8009db0:	68fa      	ldr	r2, [r7, #12]
 8009db2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009db4:	683b      	ldr	r3, [r7, #0]
 8009db6:	689a      	ldr	r2, [r3, #8]
 8009db8:	687b      	ldr	r3, [r7, #4]
 8009dba:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009dbc:	683b      	ldr	r3, [r7, #0]
 8009dbe:	681a      	ldr	r2, [r3, #0]
 8009dc0:	687b      	ldr	r3, [r7, #4]
 8009dc2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009dc4:	687b      	ldr	r3, [r7, #4]
 8009dc6:	4a08      	ldr	r2, [pc, #32]	; (8009de8 <TIM_Base_SetConfig+0xe4>)
 8009dc8:	4293      	cmp	r3, r2
 8009dca:	d103      	bne.n	8009dd4 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009dcc:	683b      	ldr	r3, [r7, #0]
 8009dce:	691a      	ldr	r2, [r3, #16]
 8009dd0:	687b      	ldr	r3, [r7, #4]
 8009dd2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009dd4:	687b      	ldr	r3, [r7, #4]
 8009dd6:	2201      	movs	r2, #1
 8009dd8:	615a      	str	r2, [r3, #20]
}
 8009dda:	bf00      	nop
 8009ddc:	3714      	adds	r7, #20
 8009dde:	46bd      	mov	sp, r7
 8009de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009de4:	4770      	bx	lr
 8009de6:	bf00      	nop
 8009de8:	40010000 	.word	0x40010000
 8009dec:	40000400 	.word	0x40000400
 8009df0:	40000800 	.word	0x40000800
 8009df4:	40000c00 	.word	0x40000c00
 8009df8:	40014000 	.word	0x40014000
 8009dfc:	40014400 	.word	0x40014400
 8009e00:	40014800 	.word	0x40014800

08009e04 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009e04:	b480      	push	{r7}
 8009e06:	b087      	sub	sp, #28
 8009e08:	af00      	add	r7, sp, #0
 8009e0a:	60f8      	str	r0, [r7, #12]
 8009e0c:	60b9      	str	r1, [r7, #8]
 8009e0e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8009e10:	68fb      	ldr	r3, [r7, #12]
 8009e12:	6a1b      	ldr	r3, [r3, #32]
 8009e14:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009e16:	68fb      	ldr	r3, [r7, #12]
 8009e18:	6a1b      	ldr	r3, [r3, #32]
 8009e1a:	f023 0201 	bic.w	r2, r3, #1
 8009e1e:	68fb      	ldr	r3, [r7, #12]
 8009e20:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009e22:	68fb      	ldr	r3, [r7, #12]
 8009e24:	699b      	ldr	r3, [r3, #24]
 8009e26:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009e28:	693b      	ldr	r3, [r7, #16]
 8009e2a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8009e2e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8009e30:	687b      	ldr	r3, [r7, #4]
 8009e32:	011b      	lsls	r3, r3, #4
 8009e34:	693a      	ldr	r2, [r7, #16]
 8009e36:	4313      	orrs	r3, r2
 8009e38:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8009e3a:	697b      	ldr	r3, [r7, #20]
 8009e3c:	f023 030a 	bic.w	r3, r3, #10
 8009e40:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8009e42:	697a      	ldr	r2, [r7, #20]
 8009e44:	68bb      	ldr	r3, [r7, #8]
 8009e46:	4313      	orrs	r3, r2
 8009e48:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8009e4a:	68fb      	ldr	r3, [r7, #12]
 8009e4c:	693a      	ldr	r2, [r7, #16]
 8009e4e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009e50:	68fb      	ldr	r3, [r7, #12]
 8009e52:	697a      	ldr	r2, [r7, #20]
 8009e54:	621a      	str	r2, [r3, #32]
}
 8009e56:	bf00      	nop
 8009e58:	371c      	adds	r7, #28
 8009e5a:	46bd      	mov	sp, r7
 8009e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e60:	4770      	bx	lr

08009e62 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009e62:	b480      	push	{r7}
 8009e64:	b087      	sub	sp, #28
 8009e66:	af00      	add	r7, sp, #0
 8009e68:	60f8      	str	r0, [r7, #12]
 8009e6a:	60b9      	str	r1, [r7, #8]
 8009e6c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009e6e:	68fb      	ldr	r3, [r7, #12]
 8009e70:	6a1b      	ldr	r3, [r3, #32]
 8009e72:	f023 0210 	bic.w	r2, r3, #16
 8009e76:	68fb      	ldr	r3, [r7, #12]
 8009e78:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009e7a:	68fb      	ldr	r3, [r7, #12]
 8009e7c:	699b      	ldr	r3, [r3, #24]
 8009e7e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8009e80:	68fb      	ldr	r3, [r7, #12]
 8009e82:	6a1b      	ldr	r3, [r3, #32]
 8009e84:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8009e86:	697b      	ldr	r3, [r7, #20]
 8009e88:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8009e8c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8009e8e:	687b      	ldr	r3, [r7, #4]
 8009e90:	031b      	lsls	r3, r3, #12
 8009e92:	697a      	ldr	r2, [r7, #20]
 8009e94:	4313      	orrs	r3, r2
 8009e96:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8009e98:	693b      	ldr	r3, [r7, #16]
 8009e9a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8009e9e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8009ea0:	68bb      	ldr	r3, [r7, #8]
 8009ea2:	011b      	lsls	r3, r3, #4
 8009ea4:	693a      	ldr	r2, [r7, #16]
 8009ea6:	4313      	orrs	r3, r2
 8009ea8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8009eaa:	68fb      	ldr	r3, [r7, #12]
 8009eac:	697a      	ldr	r2, [r7, #20]
 8009eae:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009eb0:	68fb      	ldr	r3, [r7, #12]
 8009eb2:	693a      	ldr	r2, [r7, #16]
 8009eb4:	621a      	str	r2, [r3, #32]
}
 8009eb6:	bf00      	nop
 8009eb8:	371c      	adds	r7, #28
 8009eba:	46bd      	mov	sp, r7
 8009ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ec0:	4770      	bx	lr

08009ec2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8009ec2:	b480      	push	{r7}
 8009ec4:	b085      	sub	sp, #20
 8009ec6:	af00      	add	r7, sp, #0
 8009ec8:	6078      	str	r0, [r7, #4]
 8009eca:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8009ecc:	687b      	ldr	r3, [r7, #4]
 8009ece:	689b      	ldr	r3, [r3, #8]
 8009ed0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8009ed2:	68fb      	ldr	r3, [r7, #12]
 8009ed4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009ed8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8009eda:	683a      	ldr	r2, [r7, #0]
 8009edc:	68fb      	ldr	r3, [r7, #12]
 8009ede:	4313      	orrs	r3, r2
 8009ee0:	f043 0307 	orr.w	r3, r3, #7
 8009ee4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009ee6:	687b      	ldr	r3, [r7, #4]
 8009ee8:	68fa      	ldr	r2, [r7, #12]
 8009eea:	609a      	str	r2, [r3, #8]
}
 8009eec:	bf00      	nop
 8009eee:	3714      	adds	r7, #20
 8009ef0:	46bd      	mov	sp, r7
 8009ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ef6:	4770      	bx	lr

08009ef8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8009ef8:	b480      	push	{r7}
 8009efa:	b087      	sub	sp, #28
 8009efc:	af00      	add	r7, sp, #0
 8009efe:	60f8      	str	r0, [r7, #12]
 8009f00:	60b9      	str	r1, [r7, #8]
 8009f02:	607a      	str	r2, [r7, #4]
 8009f04:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8009f06:	68fb      	ldr	r3, [r7, #12]
 8009f08:	689b      	ldr	r3, [r3, #8]
 8009f0a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009f0c:	697b      	ldr	r3, [r7, #20]
 8009f0e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8009f12:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8009f14:	683b      	ldr	r3, [r7, #0]
 8009f16:	021a      	lsls	r2, r3, #8
 8009f18:	687b      	ldr	r3, [r7, #4]
 8009f1a:	431a      	orrs	r2, r3
 8009f1c:	68bb      	ldr	r3, [r7, #8]
 8009f1e:	4313      	orrs	r3, r2
 8009f20:	697a      	ldr	r2, [r7, #20]
 8009f22:	4313      	orrs	r3, r2
 8009f24:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009f26:	68fb      	ldr	r3, [r7, #12]
 8009f28:	697a      	ldr	r2, [r7, #20]
 8009f2a:	609a      	str	r2, [r3, #8]
}
 8009f2c:	bf00      	nop
 8009f2e:	371c      	adds	r7, #28
 8009f30:	46bd      	mov	sp, r7
 8009f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f36:	4770      	bx	lr

08009f38 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8009f38:	b480      	push	{r7}
 8009f3a:	b085      	sub	sp, #20
 8009f3c:	af00      	add	r7, sp, #0
 8009f3e:	6078      	str	r0, [r7, #4]
 8009f40:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8009f42:	687b      	ldr	r3, [r7, #4]
 8009f44:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009f48:	2b01      	cmp	r3, #1
 8009f4a:	d101      	bne.n	8009f50 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8009f4c:	2302      	movs	r3, #2
 8009f4e:	e050      	b.n	8009ff2 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8009f50:	687b      	ldr	r3, [r7, #4]
 8009f52:	2201      	movs	r2, #1
 8009f54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009f58:	687b      	ldr	r3, [r7, #4]
 8009f5a:	2202      	movs	r2, #2
 8009f5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009f60:	687b      	ldr	r3, [r7, #4]
 8009f62:	681b      	ldr	r3, [r3, #0]
 8009f64:	685b      	ldr	r3, [r3, #4]
 8009f66:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009f68:	687b      	ldr	r3, [r7, #4]
 8009f6a:	681b      	ldr	r3, [r3, #0]
 8009f6c:	689b      	ldr	r3, [r3, #8]
 8009f6e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8009f70:	68fb      	ldr	r3, [r7, #12]
 8009f72:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009f76:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8009f78:	683b      	ldr	r3, [r7, #0]
 8009f7a:	681b      	ldr	r3, [r3, #0]
 8009f7c:	68fa      	ldr	r2, [r7, #12]
 8009f7e:	4313      	orrs	r3, r2
 8009f80:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8009f82:	687b      	ldr	r3, [r7, #4]
 8009f84:	681b      	ldr	r3, [r3, #0]
 8009f86:	68fa      	ldr	r2, [r7, #12]
 8009f88:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009f8a:	687b      	ldr	r3, [r7, #4]
 8009f8c:	681b      	ldr	r3, [r3, #0]
 8009f8e:	4a1c      	ldr	r2, [pc, #112]	; (800a000 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8009f90:	4293      	cmp	r3, r2
 8009f92:	d018      	beq.n	8009fc6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8009f94:	687b      	ldr	r3, [r7, #4]
 8009f96:	681b      	ldr	r3, [r3, #0]
 8009f98:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009f9c:	d013      	beq.n	8009fc6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8009f9e:	687b      	ldr	r3, [r7, #4]
 8009fa0:	681b      	ldr	r3, [r3, #0]
 8009fa2:	4a18      	ldr	r2, [pc, #96]	; (800a004 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8009fa4:	4293      	cmp	r3, r2
 8009fa6:	d00e      	beq.n	8009fc6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8009fa8:	687b      	ldr	r3, [r7, #4]
 8009faa:	681b      	ldr	r3, [r3, #0]
 8009fac:	4a16      	ldr	r2, [pc, #88]	; (800a008 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8009fae:	4293      	cmp	r3, r2
 8009fb0:	d009      	beq.n	8009fc6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8009fb2:	687b      	ldr	r3, [r7, #4]
 8009fb4:	681b      	ldr	r3, [r3, #0]
 8009fb6:	4a15      	ldr	r2, [pc, #84]	; (800a00c <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8009fb8:	4293      	cmp	r3, r2
 8009fba:	d004      	beq.n	8009fc6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8009fbc:	687b      	ldr	r3, [r7, #4]
 8009fbe:	681b      	ldr	r3, [r3, #0]
 8009fc0:	4a13      	ldr	r2, [pc, #76]	; (800a010 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8009fc2:	4293      	cmp	r3, r2
 8009fc4:	d10c      	bne.n	8009fe0 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8009fc6:	68bb      	ldr	r3, [r7, #8]
 8009fc8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009fcc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8009fce:	683b      	ldr	r3, [r7, #0]
 8009fd0:	685b      	ldr	r3, [r3, #4]
 8009fd2:	68ba      	ldr	r2, [r7, #8]
 8009fd4:	4313      	orrs	r3, r2
 8009fd6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8009fd8:	687b      	ldr	r3, [r7, #4]
 8009fda:	681b      	ldr	r3, [r3, #0]
 8009fdc:	68ba      	ldr	r2, [r7, #8]
 8009fde:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8009fe0:	687b      	ldr	r3, [r7, #4]
 8009fe2:	2201      	movs	r2, #1
 8009fe4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009fe8:	687b      	ldr	r3, [r7, #4]
 8009fea:	2200      	movs	r2, #0
 8009fec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009ff0:	2300      	movs	r3, #0
}
 8009ff2:	4618      	mov	r0, r3
 8009ff4:	3714      	adds	r7, #20
 8009ff6:	46bd      	mov	sp, r7
 8009ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ffc:	4770      	bx	lr
 8009ffe:	bf00      	nop
 800a000:	40010000 	.word	0x40010000
 800a004:	40000400 	.word	0x40000400
 800a008:	40000800 	.word	0x40000800
 800a00c:	40000c00 	.word	0x40000c00
 800a010:	40014000 	.word	0x40014000

0800a014 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800a014:	b480      	push	{r7}
 800a016:	b083      	sub	sp, #12
 800a018:	af00      	add	r7, sp, #0
 800a01a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800a01c:	bf00      	nop
 800a01e:	370c      	adds	r7, #12
 800a020:	46bd      	mov	sp, r7
 800a022:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a026:	4770      	bx	lr

0800a028 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800a028:	b480      	push	{r7}
 800a02a:	b083      	sub	sp, #12
 800a02c:	af00      	add	r7, sp, #0
 800a02e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800a030:	bf00      	nop
 800a032:	370c      	adds	r7, #12
 800a034:	46bd      	mov	sp, r7
 800a036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a03a:	4770      	bx	lr

0800a03c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800a03c:	b580      	push	{r7, lr}
 800a03e:	b082      	sub	sp, #8
 800a040:	af00      	add	r7, sp, #0
 800a042:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800a044:	687b      	ldr	r3, [r7, #4]
 800a046:	2b00      	cmp	r3, #0
 800a048:	d101      	bne.n	800a04e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800a04a:	2301      	movs	r3, #1
 800a04c:	e03f      	b.n	800a0ce <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800a04e:	687b      	ldr	r3, [r7, #4]
 800a050:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a054:	b2db      	uxtb	r3, r3
 800a056:	2b00      	cmp	r3, #0
 800a058:	d106      	bne.n	800a068 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800a05a:	687b      	ldr	r3, [r7, #4]
 800a05c:	2200      	movs	r2, #0
 800a05e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800a062:	6878      	ldr	r0, [r7, #4]
 800a064:	f7f7 fbce 	bl	8001804 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800a068:	687b      	ldr	r3, [r7, #4]
 800a06a:	2224      	movs	r2, #36	; 0x24
 800a06c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800a070:	687b      	ldr	r3, [r7, #4]
 800a072:	681b      	ldr	r3, [r3, #0]
 800a074:	68da      	ldr	r2, [r3, #12]
 800a076:	687b      	ldr	r3, [r7, #4]
 800a078:	681b      	ldr	r3, [r3, #0]
 800a07a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800a07e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800a080:	6878      	ldr	r0, [r7, #4]
 800a082:	f000 f929 	bl	800a2d8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800a086:	687b      	ldr	r3, [r7, #4]
 800a088:	681b      	ldr	r3, [r3, #0]
 800a08a:	691a      	ldr	r2, [r3, #16]
 800a08c:	687b      	ldr	r3, [r7, #4]
 800a08e:	681b      	ldr	r3, [r3, #0]
 800a090:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800a094:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800a096:	687b      	ldr	r3, [r7, #4]
 800a098:	681b      	ldr	r3, [r3, #0]
 800a09a:	695a      	ldr	r2, [r3, #20]
 800a09c:	687b      	ldr	r3, [r7, #4]
 800a09e:	681b      	ldr	r3, [r3, #0]
 800a0a0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800a0a4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800a0a6:	687b      	ldr	r3, [r7, #4]
 800a0a8:	681b      	ldr	r3, [r3, #0]
 800a0aa:	68da      	ldr	r2, [r3, #12]
 800a0ac:	687b      	ldr	r3, [r7, #4]
 800a0ae:	681b      	ldr	r3, [r3, #0]
 800a0b0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800a0b4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a0b6:	687b      	ldr	r3, [r7, #4]
 800a0b8:	2200      	movs	r2, #0
 800a0ba:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800a0bc:	687b      	ldr	r3, [r7, #4]
 800a0be:	2220      	movs	r2, #32
 800a0c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800a0c4:	687b      	ldr	r3, [r7, #4]
 800a0c6:	2220      	movs	r2, #32
 800a0c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800a0cc:	2300      	movs	r3, #0
}
 800a0ce:	4618      	mov	r0, r3
 800a0d0:	3708      	adds	r7, #8
 800a0d2:	46bd      	mov	sp, r7
 800a0d4:	bd80      	pop	{r7, pc}

0800a0d6 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a0d6:	b580      	push	{r7, lr}
 800a0d8:	b08a      	sub	sp, #40	; 0x28
 800a0da:	af02      	add	r7, sp, #8
 800a0dc:	60f8      	str	r0, [r7, #12]
 800a0de:	60b9      	str	r1, [r7, #8]
 800a0e0:	603b      	str	r3, [r7, #0]
 800a0e2:	4613      	mov	r3, r2
 800a0e4:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800a0e6:	2300      	movs	r3, #0
 800a0e8:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800a0ea:	68fb      	ldr	r3, [r7, #12]
 800a0ec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a0f0:	b2db      	uxtb	r3, r3
 800a0f2:	2b20      	cmp	r3, #32
 800a0f4:	d17c      	bne.n	800a1f0 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800a0f6:	68bb      	ldr	r3, [r7, #8]
 800a0f8:	2b00      	cmp	r3, #0
 800a0fa:	d002      	beq.n	800a102 <HAL_UART_Transmit+0x2c>
 800a0fc:	88fb      	ldrh	r3, [r7, #6]
 800a0fe:	2b00      	cmp	r3, #0
 800a100:	d101      	bne.n	800a106 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800a102:	2301      	movs	r3, #1
 800a104:	e075      	b.n	800a1f2 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800a106:	68fb      	ldr	r3, [r7, #12]
 800a108:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a10c:	2b01      	cmp	r3, #1
 800a10e:	d101      	bne.n	800a114 <HAL_UART_Transmit+0x3e>
 800a110:	2302      	movs	r3, #2
 800a112:	e06e      	b.n	800a1f2 <HAL_UART_Transmit+0x11c>
 800a114:	68fb      	ldr	r3, [r7, #12]
 800a116:	2201      	movs	r2, #1
 800a118:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a11c:	68fb      	ldr	r3, [r7, #12]
 800a11e:	2200      	movs	r2, #0
 800a120:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800a122:	68fb      	ldr	r3, [r7, #12]
 800a124:	2221      	movs	r2, #33	; 0x21
 800a126:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800a12a:	f7fc fe39 	bl	8006da0 <HAL_GetTick>
 800a12e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800a130:	68fb      	ldr	r3, [r7, #12]
 800a132:	88fa      	ldrh	r2, [r7, #6]
 800a134:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800a136:	68fb      	ldr	r3, [r7, #12]
 800a138:	88fa      	ldrh	r2, [r7, #6]
 800a13a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a13c:	68fb      	ldr	r3, [r7, #12]
 800a13e:	689b      	ldr	r3, [r3, #8]
 800a140:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a144:	d108      	bne.n	800a158 <HAL_UART_Transmit+0x82>
 800a146:	68fb      	ldr	r3, [r7, #12]
 800a148:	691b      	ldr	r3, [r3, #16]
 800a14a:	2b00      	cmp	r3, #0
 800a14c:	d104      	bne.n	800a158 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800a14e:	2300      	movs	r3, #0
 800a150:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800a152:	68bb      	ldr	r3, [r7, #8]
 800a154:	61bb      	str	r3, [r7, #24]
 800a156:	e003      	b.n	800a160 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800a158:	68bb      	ldr	r3, [r7, #8]
 800a15a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800a15c:	2300      	movs	r3, #0
 800a15e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800a160:	68fb      	ldr	r3, [r7, #12]
 800a162:	2200      	movs	r2, #0
 800a164:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800a168:	e02a      	b.n	800a1c0 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800a16a:	683b      	ldr	r3, [r7, #0]
 800a16c:	9300      	str	r3, [sp, #0]
 800a16e:	697b      	ldr	r3, [r7, #20]
 800a170:	2200      	movs	r2, #0
 800a172:	2180      	movs	r1, #128	; 0x80
 800a174:	68f8      	ldr	r0, [r7, #12]
 800a176:	f000 f840 	bl	800a1fa <UART_WaitOnFlagUntilTimeout>
 800a17a:	4603      	mov	r3, r0
 800a17c:	2b00      	cmp	r3, #0
 800a17e:	d001      	beq.n	800a184 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800a180:	2303      	movs	r3, #3
 800a182:	e036      	b.n	800a1f2 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800a184:	69fb      	ldr	r3, [r7, #28]
 800a186:	2b00      	cmp	r3, #0
 800a188:	d10b      	bne.n	800a1a2 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800a18a:	69bb      	ldr	r3, [r7, #24]
 800a18c:	881b      	ldrh	r3, [r3, #0]
 800a18e:	461a      	mov	r2, r3
 800a190:	68fb      	ldr	r3, [r7, #12]
 800a192:	681b      	ldr	r3, [r3, #0]
 800a194:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800a198:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800a19a:	69bb      	ldr	r3, [r7, #24]
 800a19c:	3302      	adds	r3, #2
 800a19e:	61bb      	str	r3, [r7, #24]
 800a1a0:	e007      	b.n	800a1b2 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800a1a2:	69fb      	ldr	r3, [r7, #28]
 800a1a4:	781a      	ldrb	r2, [r3, #0]
 800a1a6:	68fb      	ldr	r3, [r7, #12]
 800a1a8:	681b      	ldr	r3, [r3, #0]
 800a1aa:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800a1ac:	69fb      	ldr	r3, [r7, #28]
 800a1ae:	3301      	adds	r3, #1
 800a1b0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800a1b2:	68fb      	ldr	r3, [r7, #12]
 800a1b4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800a1b6:	b29b      	uxth	r3, r3
 800a1b8:	3b01      	subs	r3, #1
 800a1ba:	b29a      	uxth	r2, r3
 800a1bc:	68fb      	ldr	r3, [r7, #12]
 800a1be:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800a1c0:	68fb      	ldr	r3, [r7, #12]
 800a1c2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800a1c4:	b29b      	uxth	r3, r3
 800a1c6:	2b00      	cmp	r3, #0
 800a1c8:	d1cf      	bne.n	800a16a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800a1ca:	683b      	ldr	r3, [r7, #0]
 800a1cc:	9300      	str	r3, [sp, #0]
 800a1ce:	697b      	ldr	r3, [r7, #20]
 800a1d0:	2200      	movs	r2, #0
 800a1d2:	2140      	movs	r1, #64	; 0x40
 800a1d4:	68f8      	ldr	r0, [r7, #12]
 800a1d6:	f000 f810 	bl	800a1fa <UART_WaitOnFlagUntilTimeout>
 800a1da:	4603      	mov	r3, r0
 800a1dc:	2b00      	cmp	r3, #0
 800a1de:	d001      	beq.n	800a1e4 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800a1e0:	2303      	movs	r3, #3
 800a1e2:	e006      	b.n	800a1f2 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800a1e4:	68fb      	ldr	r3, [r7, #12]
 800a1e6:	2220      	movs	r2, #32
 800a1e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800a1ec:	2300      	movs	r3, #0
 800a1ee:	e000      	b.n	800a1f2 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800a1f0:	2302      	movs	r3, #2
  }
}
 800a1f2:	4618      	mov	r0, r3
 800a1f4:	3720      	adds	r7, #32
 800a1f6:	46bd      	mov	sp, r7
 800a1f8:	bd80      	pop	{r7, pc}

0800a1fa <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800a1fa:	b580      	push	{r7, lr}
 800a1fc:	b090      	sub	sp, #64	; 0x40
 800a1fe:	af00      	add	r7, sp, #0
 800a200:	60f8      	str	r0, [r7, #12]
 800a202:	60b9      	str	r1, [r7, #8]
 800a204:	603b      	str	r3, [r7, #0]
 800a206:	4613      	mov	r3, r2
 800a208:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a20a:	e050      	b.n	800a2ae <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a20c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a20e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a212:	d04c      	beq.n	800a2ae <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800a214:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a216:	2b00      	cmp	r3, #0
 800a218:	d007      	beq.n	800a22a <UART_WaitOnFlagUntilTimeout+0x30>
 800a21a:	f7fc fdc1 	bl	8006da0 <HAL_GetTick>
 800a21e:	4602      	mov	r2, r0
 800a220:	683b      	ldr	r3, [r7, #0]
 800a222:	1ad3      	subs	r3, r2, r3
 800a224:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a226:	429a      	cmp	r2, r3
 800a228:	d241      	bcs.n	800a2ae <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800a22a:	68fb      	ldr	r3, [r7, #12]
 800a22c:	681b      	ldr	r3, [r3, #0]
 800a22e:	330c      	adds	r3, #12
 800a230:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a232:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a234:	e853 3f00 	ldrex	r3, [r3]
 800a238:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800a23a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a23c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800a240:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a242:	68fb      	ldr	r3, [r7, #12]
 800a244:	681b      	ldr	r3, [r3, #0]
 800a246:	330c      	adds	r3, #12
 800a248:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800a24a:	637a      	str	r2, [r7, #52]	; 0x34
 800a24c:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a24e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800a250:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a252:	e841 2300 	strex	r3, r2, [r1]
 800a256:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800a258:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a25a:	2b00      	cmp	r3, #0
 800a25c:	d1e5      	bne.n	800a22a <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a25e:	68fb      	ldr	r3, [r7, #12]
 800a260:	681b      	ldr	r3, [r3, #0]
 800a262:	3314      	adds	r3, #20
 800a264:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a266:	697b      	ldr	r3, [r7, #20]
 800a268:	e853 3f00 	ldrex	r3, [r3]
 800a26c:	613b      	str	r3, [r7, #16]
   return(result);
 800a26e:	693b      	ldr	r3, [r7, #16]
 800a270:	f023 0301 	bic.w	r3, r3, #1
 800a274:	63bb      	str	r3, [r7, #56]	; 0x38
 800a276:	68fb      	ldr	r3, [r7, #12]
 800a278:	681b      	ldr	r3, [r3, #0]
 800a27a:	3314      	adds	r3, #20
 800a27c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a27e:	623a      	str	r2, [r7, #32]
 800a280:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a282:	69f9      	ldr	r1, [r7, #28]
 800a284:	6a3a      	ldr	r2, [r7, #32]
 800a286:	e841 2300 	strex	r3, r2, [r1]
 800a28a:	61bb      	str	r3, [r7, #24]
   return(result);
 800a28c:	69bb      	ldr	r3, [r7, #24]
 800a28e:	2b00      	cmp	r3, #0
 800a290:	d1e5      	bne.n	800a25e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800a292:	68fb      	ldr	r3, [r7, #12]
 800a294:	2220      	movs	r2, #32
 800a296:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800a29a:	68fb      	ldr	r3, [r7, #12]
 800a29c:	2220      	movs	r2, #32
 800a29e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800a2a2:	68fb      	ldr	r3, [r7, #12]
 800a2a4:	2200      	movs	r2, #0
 800a2a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800a2aa:	2303      	movs	r3, #3
 800a2ac:	e00f      	b.n	800a2ce <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a2ae:	68fb      	ldr	r3, [r7, #12]
 800a2b0:	681b      	ldr	r3, [r3, #0]
 800a2b2:	681a      	ldr	r2, [r3, #0]
 800a2b4:	68bb      	ldr	r3, [r7, #8]
 800a2b6:	4013      	ands	r3, r2
 800a2b8:	68ba      	ldr	r2, [r7, #8]
 800a2ba:	429a      	cmp	r2, r3
 800a2bc:	bf0c      	ite	eq
 800a2be:	2301      	moveq	r3, #1
 800a2c0:	2300      	movne	r3, #0
 800a2c2:	b2db      	uxtb	r3, r3
 800a2c4:	461a      	mov	r2, r3
 800a2c6:	79fb      	ldrb	r3, [r7, #7]
 800a2c8:	429a      	cmp	r2, r3
 800a2ca:	d09f      	beq.n	800a20c <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800a2cc:	2300      	movs	r3, #0
}
 800a2ce:	4618      	mov	r0, r3
 800a2d0:	3740      	adds	r7, #64	; 0x40
 800a2d2:	46bd      	mov	sp, r7
 800a2d4:	bd80      	pop	{r7, pc}
	...

0800a2d8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a2d8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800a2dc:	b0c0      	sub	sp, #256	; 0x100
 800a2de:	af00      	add	r7, sp, #0
 800a2e0:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a2e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a2e8:	681b      	ldr	r3, [r3, #0]
 800a2ea:	691b      	ldr	r3, [r3, #16]
 800a2ec:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800a2f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a2f4:	68d9      	ldr	r1, [r3, #12]
 800a2f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a2fa:	681a      	ldr	r2, [r3, #0]
 800a2fc:	ea40 0301 	orr.w	r3, r0, r1
 800a300:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800a302:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a306:	689a      	ldr	r2, [r3, #8]
 800a308:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a30c:	691b      	ldr	r3, [r3, #16]
 800a30e:	431a      	orrs	r2, r3
 800a310:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a314:	695b      	ldr	r3, [r3, #20]
 800a316:	431a      	orrs	r2, r3
 800a318:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a31c:	69db      	ldr	r3, [r3, #28]
 800a31e:	4313      	orrs	r3, r2
 800a320:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800a324:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a328:	681b      	ldr	r3, [r3, #0]
 800a32a:	68db      	ldr	r3, [r3, #12]
 800a32c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800a330:	f021 010c 	bic.w	r1, r1, #12
 800a334:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a338:	681a      	ldr	r2, [r3, #0]
 800a33a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800a33e:	430b      	orrs	r3, r1
 800a340:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800a342:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a346:	681b      	ldr	r3, [r3, #0]
 800a348:	695b      	ldr	r3, [r3, #20]
 800a34a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800a34e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a352:	6999      	ldr	r1, [r3, #24]
 800a354:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a358:	681a      	ldr	r2, [r3, #0]
 800a35a:	ea40 0301 	orr.w	r3, r0, r1
 800a35e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800a360:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a364:	681a      	ldr	r2, [r3, #0]
 800a366:	4b8f      	ldr	r3, [pc, #572]	; (800a5a4 <UART_SetConfig+0x2cc>)
 800a368:	429a      	cmp	r2, r3
 800a36a:	d005      	beq.n	800a378 <UART_SetConfig+0xa0>
 800a36c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a370:	681a      	ldr	r2, [r3, #0]
 800a372:	4b8d      	ldr	r3, [pc, #564]	; (800a5a8 <UART_SetConfig+0x2d0>)
 800a374:	429a      	cmp	r2, r3
 800a376:	d104      	bne.n	800a382 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800a378:	f7fe fd9c 	bl	8008eb4 <HAL_RCC_GetPCLK2Freq>
 800a37c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800a380:	e003      	b.n	800a38a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800a382:	f7fe fd83 	bl	8008e8c <HAL_RCC_GetPCLK1Freq>
 800a386:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a38a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a38e:	69db      	ldr	r3, [r3, #28]
 800a390:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a394:	f040 810c 	bne.w	800a5b0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800a398:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a39c:	2200      	movs	r2, #0
 800a39e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800a3a2:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800a3a6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800a3aa:	4622      	mov	r2, r4
 800a3ac:	462b      	mov	r3, r5
 800a3ae:	1891      	adds	r1, r2, r2
 800a3b0:	65b9      	str	r1, [r7, #88]	; 0x58
 800a3b2:	415b      	adcs	r3, r3
 800a3b4:	65fb      	str	r3, [r7, #92]	; 0x5c
 800a3b6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800a3ba:	4621      	mov	r1, r4
 800a3bc:	eb12 0801 	adds.w	r8, r2, r1
 800a3c0:	4629      	mov	r1, r5
 800a3c2:	eb43 0901 	adc.w	r9, r3, r1
 800a3c6:	f04f 0200 	mov.w	r2, #0
 800a3ca:	f04f 0300 	mov.w	r3, #0
 800a3ce:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800a3d2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800a3d6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800a3da:	4690      	mov	r8, r2
 800a3dc:	4699      	mov	r9, r3
 800a3de:	4623      	mov	r3, r4
 800a3e0:	eb18 0303 	adds.w	r3, r8, r3
 800a3e4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800a3e8:	462b      	mov	r3, r5
 800a3ea:	eb49 0303 	adc.w	r3, r9, r3
 800a3ee:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800a3f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a3f6:	685b      	ldr	r3, [r3, #4]
 800a3f8:	2200      	movs	r2, #0
 800a3fa:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800a3fe:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800a402:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800a406:	460b      	mov	r3, r1
 800a408:	18db      	adds	r3, r3, r3
 800a40a:	653b      	str	r3, [r7, #80]	; 0x50
 800a40c:	4613      	mov	r3, r2
 800a40e:	eb42 0303 	adc.w	r3, r2, r3
 800a412:	657b      	str	r3, [r7, #84]	; 0x54
 800a414:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800a418:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800a41c:	f7f5 ff38 	bl	8000290 <__aeabi_uldivmod>
 800a420:	4602      	mov	r2, r0
 800a422:	460b      	mov	r3, r1
 800a424:	4b61      	ldr	r3, [pc, #388]	; (800a5ac <UART_SetConfig+0x2d4>)
 800a426:	fba3 2302 	umull	r2, r3, r3, r2
 800a42a:	095b      	lsrs	r3, r3, #5
 800a42c:	011c      	lsls	r4, r3, #4
 800a42e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a432:	2200      	movs	r2, #0
 800a434:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800a438:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800a43c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800a440:	4642      	mov	r2, r8
 800a442:	464b      	mov	r3, r9
 800a444:	1891      	adds	r1, r2, r2
 800a446:	64b9      	str	r1, [r7, #72]	; 0x48
 800a448:	415b      	adcs	r3, r3
 800a44a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a44c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800a450:	4641      	mov	r1, r8
 800a452:	eb12 0a01 	adds.w	sl, r2, r1
 800a456:	4649      	mov	r1, r9
 800a458:	eb43 0b01 	adc.w	fp, r3, r1
 800a45c:	f04f 0200 	mov.w	r2, #0
 800a460:	f04f 0300 	mov.w	r3, #0
 800a464:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800a468:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800a46c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800a470:	4692      	mov	sl, r2
 800a472:	469b      	mov	fp, r3
 800a474:	4643      	mov	r3, r8
 800a476:	eb1a 0303 	adds.w	r3, sl, r3
 800a47a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800a47e:	464b      	mov	r3, r9
 800a480:	eb4b 0303 	adc.w	r3, fp, r3
 800a484:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800a488:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a48c:	685b      	ldr	r3, [r3, #4]
 800a48e:	2200      	movs	r2, #0
 800a490:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800a494:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800a498:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800a49c:	460b      	mov	r3, r1
 800a49e:	18db      	adds	r3, r3, r3
 800a4a0:	643b      	str	r3, [r7, #64]	; 0x40
 800a4a2:	4613      	mov	r3, r2
 800a4a4:	eb42 0303 	adc.w	r3, r2, r3
 800a4a8:	647b      	str	r3, [r7, #68]	; 0x44
 800a4aa:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800a4ae:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800a4b2:	f7f5 feed 	bl	8000290 <__aeabi_uldivmod>
 800a4b6:	4602      	mov	r2, r0
 800a4b8:	460b      	mov	r3, r1
 800a4ba:	4611      	mov	r1, r2
 800a4bc:	4b3b      	ldr	r3, [pc, #236]	; (800a5ac <UART_SetConfig+0x2d4>)
 800a4be:	fba3 2301 	umull	r2, r3, r3, r1
 800a4c2:	095b      	lsrs	r3, r3, #5
 800a4c4:	2264      	movs	r2, #100	; 0x64
 800a4c6:	fb02 f303 	mul.w	r3, r2, r3
 800a4ca:	1acb      	subs	r3, r1, r3
 800a4cc:	00db      	lsls	r3, r3, #3
 800a4ce:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800a4d2:	4b36      	ldr	r3, [pc, #216]	; (800a5ac <UART_SetConfig+0x2d4>)
 800a4d4:	fba3 2302 	umull	r2, r3, r3, r2
 800a4d8:	095b      	lsrs	r3, r3, #5
 800a4da:	005b      	lsls	r3, r3, #1
 800a4dc:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800a4e0:	441c      	add	r4, r3
 800a4e2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a4e6:	2200      	movs	r2, #0
 800a4e8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800a4ec:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800a4f0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800a4f4:	4642      	mov	r2, r8
 800a4f6:	464b      	mov	r3, r9
 800a4f8:	1891      	adds	r1, r2, r2
 800a4fa:	63b9      	str	r1, [r7, #56]	; 0x38
 800a4fc:	415b      	adcs	r3, r3
 800a4fe:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a500:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800a504:	4641      	mov	r1, r8
 800a506:	1851      	adds	r1, r2, r1
 800a508:	6339      	str	r1, [r7, #48]	; 0x30
 800a50a:	4649      	mov	r1, r9
 800a50c:	414b      	adcs	r3, r1
 800a50e:	637b      	str	r3, [r7, #52]	; 0x34
 800a510:	f04f 0200 	mov.w	r2, #0
 800a514:	f04f 0300 	mov.w	r3, #0
 800a518:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800a51c:	4659      	mov	r1, fp
 800a51e:	00cb      	lsls	r3, r1, #3
 800a520:	4651      	mov	r1, sl
 800a522:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800a526:	4651      	mov	r1, sl
 800a528:	00ca      	lsls	r2, r1, #3
 800a52a:	4610      	mov	r0, r2
 800a52c:	4619      	mov	r1, r3
 800a52e:	4603      	mov	r3, r0
 800a530:	4642      	mov	r2, r8
 800a532:	189b      	adds	r3, r3, r2
 800a534:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800a538:	464b      	mov	r3, r9
 800a53a:	460a      	mov	r2, r1
 800a53c:	eb42 0303 	adc.w	r3, r2, r3
 800a540:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800a544:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a548:	685b      	ldr	r3, [r3, #4]
 800a54a:	2200      	movs	r2, #0
 800a54c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800a550:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800a554:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800a558:	460b      	mov	r3, r1
 800a55a:	18db      	adds	r3, r3, r3
 800a55c:	62bb      	str	r3, [r7, #40]	; 0x28
 800a55e:	4613      	mov	r3, r2
 800a560:	eb42 0303 	adc.w	r3, r2, r3
 800a564:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a566:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800a56a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800a56e:	f7f5 fe8f 	bl	8000290 <__aeabi_uldivmod>
 800a572:	4602      	mov	r2, r0
 800a574:	460b      	mov	r3, r1
 800a576:	4b0d      	ldr	r3, [pc, #52]	; (800a5ac <UART_SetConfig+0x2d4>)
 800a578:	fba3 1302 	umull	r1, r3, r3, r2
 800a57c:	095b      	lsrs	r3, r3, #5
 800a57e:	2164      	movs	r1, #100	; 0x64
 800a580:	fb01 f303 	mul.w	r3, r1, r3
 800a584:	1ad3      	subs	r3, r2, r3
 800a586:	00db      	lsls	r3, r3, #3
 800a588:	3332      	adds	r3, #50	; 0x32
 800a58a:	4a08      	ldr	r2, [pc, #32]	; (800a5ac <UART_SetConfig+0x2d4>)
 800a58c:	fba2 2303 	umull	r2, r3, r2, r3
 800a590:	095b      	lsrs	r3, r3, #5
 800a592:	f003 0207 	and.w	r2, r3, #7
 800a596:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a59a:	681b      	ldr	r3, [r3, #0]
 800a59c:	4422      	add	r2, r4
 800a59e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800a5a0:	e105      	b.n	800a7ae <UART_SetConfig+0x4d6>
 800a5a2:	bf00      	nop
 800a5a4:	40011000 	.word	0x40011000
 800a5a8:	40011400 	.word	0x40011400
 800a5ac:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800a5b0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a5b4:	2200      	movs	r2, #0
 800a5b6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800a5ba:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800a5be:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800a5c2:	4642      	mov	r2, r8
 800a5c4:	464b      	mov	r3, r9
 800a5c6:	1891      	adds	r1, r2, r2
 800a5c8:	6239      	str	r1, [r7, #32]
 800a5ca:	415b      	adcs	r3, r3
 800a5cc:	627b      	str	r3, [r7, #36]	; 0x24
 800a5ce:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800a5d2:	4641      	mov	r1, r8
 800a5d4:	1854      	adds	r4, r2, r1
 800a5d6:	4649      	mov	r1, r9
 800a5d8:	eb43 0501 	adc.w	r5, r3, r1
 800a5dc:	f04f 0200 	mov.w	r2, #0
 800a5e0:	f04f 0300 	mov.w	r3, #0
 800a5e4:	00eb      	lsls	r3, r5, #3
 800a5e6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800a5ea:	00e2      	lsls	r2, r4, #3
 800a5ec:	4614      	mov	r4, r2
 800a5ee:	461d      	mov	r5, r3
 800a5f0:	4643      	mov	r3, r8
 800a5f2:	18e3      	adds	r3, r4, r3
 800a5f4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800a5f8:	464b      	mov	r3, r9
 800a5fa:	eb45 0303 	adc.w	r3, r5, r3
 800a5fe:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800a602:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a606:	685b      	ldr	r3, [r3, #4]
 800a608:	2200      	movs	r2, #0
 800a60a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800a60e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800a612:	f04f 0200 	mov.w	r2, #0
 800a616:	f04f 0300 	mov.w	r3, #0
 800a61a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800a61e:	4629      	mov	r1, r5
 800a620:	008b      	lsls	r3, r1, #2
 800a622:	4621      	mov	r1, r4
 800a624:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800a628:	4621      	mov	r1, r4
 800a62a:	008a      	lsls	r2, r1, #2
 800a62c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800a630:	f7f5 fe2e 	bl	8000290 <__aeabi_uldivmod>
 800a634:	4602      	mov	r2, r0
 800a636:	460b      	mov	r3, r1
 800a638:	4b60      	ldr	r3, [pc, #384]	; (800a7bc <UART_SetConfig+0x4e4>)
 800a63a:	fba3 2302 	umull	r2, r3, r3, r2
 800a63e:	095b      	lsrs	r3, r3, #5
 800a640:	011c      	lsls	r4, r3, #4
 800a642:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a646:	2200      	movs	r2, #0
 800a648:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800a64c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800a650:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800a654:	4642      	mov	r2, r8
 800a656:	464b      	mov	r3, r9
 800a658:	1891      	adds	r1, r2, r2
 800a65a:	61b9      	str	r1, [r7, #24]
 800a65c:	415b      	adcs	r3, r3
 800a65e:	61fb      	str	r3, [r7, #28]
 800a660:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800a664:	4641      	mov	r1, r8
 800a666:	1851      	adds	r1, r2, r1
 800a668:	6139      	str	r1, [r7, #16]
 800a66a:	4649      	mov	r1, r9
 800a66c:	414b      	adcs	r3, r1
 800a66e:	617b      	str	r3, [r7, #20]
 800a670:	f04f 0200 	mov.w	r2, #0
 800a674:	f04f 0300 	mov.w	r3, #0
 800a678:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800a67c:	4659      	mov	r1, fp
 800a67e:	00cb      	lsls	r3, r1, #3
 800a680:	4651      	mov	r1, sl
 800a682:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800a686:	4651      	mov	r1, sl
 800a688:	00ca      	lsls	r2, r1, #3
 800a68a:	4610      	mov	r0, r2
 800a68c:	4619      	mov	r1, r3
 800a68e:	4603      	mov	r3, r0
 800a690:	4642      	mov	r2, r8
 800a692:	189b      	adds	r3, r3, r2
 800a694:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800a698:	464b      	mov	r3, r9
 800a69a:	460a      	mov	r2, r1
 800a69c:	eb42 0303 	adc.w	r3, r2, r3
 800a6a0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800a6a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a6a8:	685b      	ldr	r3, [r3, #4]
 800a6aa:	2200      	movs	r2, #0
 800a6ac:	67bb      	str	r3, [r7, #120]	; 0x78
 800a6ae:	67fa      	str	r2, [r7, #124]	; 0x7c
 800a6b0:	f04f 0200 	mov.w	r2, #0
 800a6b4:	f04f 0300 	mov.w	r3, #0
 800a6b8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800a6bc:	4649      	mov	r1, r9
 800a6be:	008b      	lsls	r3, r1, #2
 800a6c0:	4641      	mov	r1, r8
 800a6c2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800a6c6:	4641      	mov	r1, r8
 800a6c8:	008a      	lsls	r2, r1, #2
 800a6ca:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800a6ce:	f7f5 fddf 	bl	8000290 <__aeabi_uldivmod>
 800a6d2:	4602      	mov	r2, r0
 800a6d4:	460b      	mov	r3, r1
 800a6d6:	4b39      	ldr	r3, [pc, #228]	; (800a7bc <UART_SetConfig+0x4e4>)
 800a6d8:	fba3 1302 	umull	r1, r3, r3, r2
 800a6dc:	095b      	lsrs	r3, r3, #5
 800a6de:	2164      	movs	r1, #100	; 0x64
 800a6e0:	fb01 f303 	mul.w	r3, r1, r3
 800a6e4:	1ad3      	subs	r3, r2, r3
 800a6e6:	011b      	lsls	r3, r3, #4
 800a6e8:	3332      	adds	r3, #50	; 0x32
 800a6ea:	4a34      	ldr	r2, [pc, #208]	; (800a7bc <UART_SetConfig+0x4e4>)
 800a6ec:	fba2 2303 	umull	r2, r3, r2, r3
 800a6f0:	095b      	lsrs	r3, r3, #5
 800a6f2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800a6f6:	441c      	add	r4, r3
 800a6f8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a6fc:	2200      	movs	r2, #0
 800a6fe:	673b      	str	r3, [r7, #112]	; 0x70
 800a700:	677a      	str	r2, [r7, #116]	; 0x74
 800a702:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800a706:	4642      	mov	r2, r8
 800a708:	464b      	mov	r3, r9
 800a70a:	1891      	adds	r1, r2, r2
 800a70c:	60b9      	str	r1, [r7, #8]
 800a70e:	415b      	adcs	r3, r3
 800a710:	60fb      	str	r3, [r7, #12]
 800a712:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800a716:	4641      	mov	r1, r8
 800a718:	1851      	adds	r1, r2, r1
 800a71a:	6039      	str	r1, [r7, #0]
 800a71c:	4649      	mov	r1, r9
 800a71e:	414b      	adcs	r3, r1
 800a720:	607b      	str	r3, [r7, #4]
 800a722:	f04f 0200 	mov.w	r2, #0
 800a726:	f04f 0300 	mov.w	r3, #0
 800a72a:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800a72e:	4659      	mov	r1, fp
 800a730:	00cb      	lsls	r3, r1, #3
 800a732:	4651      	mov	r1, sl
 800a734:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800a738:	4651      	mov	r1, sl
 800a73a:	00ca      	lsls	r2, r1, #3
 800a73c:	4610      	mov	r0, r2
 800a73e:	4619      	mov	r1, r3
 800a740:	4603      	mov	r3, r0
 800a742:	4642      	mov	r2, r8
 800a744:	189b      	adds	r3, r3, r2
 800a746:	66bb      	str	r3, [r7, #104]	; 0x68
 800a748:	464b      	mov	r3, r9
 800a74a:	460a      	mov	r2, r1
 800a74c:	eb42 0303 	adc.w	r3, r2, r3
 800a750:	66fb      	str	r3, [r7, #108]	; 0x6c
 800a752:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a756:	685b      	ldr	r3, [r3, #4]
 800a758:	2200      	movs	r2, #0
 800a75a:	663b      	str	r3, [r7, #96]	; 0x60
 800a75c:	667a      	str	r2, [r7, #100]	; 0x64
 800a75e:	f04f 0200 	mov.w	r2, #0
 800a762:	f04f 0300 	mov.w	r3, #0
 800a766:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800a76a:	4649      	mov	r1, r9
 800a76c:	008b      	lsls	r3, r1, #2
 800a76e:	4641      	mov	r1, r8
 800a770:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800a774:	4641      	mov	r1, r8
 800a776:	008a      	lsls	r2, r1, #2
 800a778:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800a77c:	f7f5 fd88 	bl	8000290 <__aeabi_uldivmod>
 800a780:	4602      	mov	r2, r0
 800a782:	460b      	mov	r3, r1
 800a784:	4b0d      	ldr	r3, [pc, #52]	; (800a7bc <UART_SetConfig+0x4e4>)
 800a786:	fba3 1302 	umull	r1, r3, r3, r2
 800a78a:	095b      	lsrs	r3, r3, #5
 800a78c:	2164      	movs	r1, #100	; 0x64
 800a78e:	fb01 f303 	mul.w	r3, r1, r3
 800a792:	1ad3      	subs	r3, r2, r3
 800a794:	011b      	lsls	r3, r3, #4
 800a796:	3332      	adds	r3, #50	; 0x32
 800a798:	4a08      	ldr	r2, [pc, #32]	; (800a7bc <UART_SetConfig+0x4e4>)
 800a79a:	fba2 2303 	umull	r2, r3, r2, r3
 800a79e:	095b      	lsrs	r3, r3, #5
 800a7a0:	f003 020f 	and.w	r2, r3, #15
 800a7a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a7a8:	681b      	ldr	r3, [r3, #0]
 800a7aa:	4422      	add	r2, r4
 800a7ac:	609a      	str	r2, [r3, #8]
}
 800a7ae:	bf00      	nop
 800a7b0:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800a7b4:	46bd      	mov	sp, r7
 800a7b6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800a7ba:	bf00      	nop
 800a7bc:	51eb851f 	.word	0x51eb851f

0800a7c0 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800a7c0:	b580      	push	{r7, lr}
 800a7c2:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 800a7c4:	4904      	ldr	r1, [pc, #16]	; (800a7d8 <MX_FATFS_Init+0x18>)
 800a7c6:	4805      	ldr	r0, [pc, #20]	; (800a7dc <MX_FATFS_Init+0x1c>)
 800a7c8:	f002 fede 	bl	800d588 <FATFS_LinkDriver>
 800a7cc:	4603      	mov	r3, r0
 800a7ce:	461a      	mov	r2, r3
 800a7d0:	4b03      	ldr	r3, [pc, #12]	; (800a7e0 <MX_FATFS_Init+0x20>)
 800a7d2:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800a7d4:	bf00      	nop
 800a7d6:	bd80      	pop	{r7, pc}
 800a7d8:	20016e78 	.word	0x20016e78
 800a7dc:	200000e4 	.word	0x200000e4
 800a7e0:	20016e74 	.word	0x20016e74

0800a7e4 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 800a7e4:	b480      	push	{r7}
 800a7e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 800a7e8:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 800a7ea:	4618      	mov	r0, r3
 800a7ec:	46bd      	mov	sp, r7
 800a7ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7f2:	4770      	bx	lr

0800a7f4 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 800a7f4:	b580      	push	{r7, lr}
 800a7f6:	b082      	sub	sp, #8
 800a7f8:	af00      	add	r7, sp, #0
 800a7fa:	4603      	mov	r3, r0
 800a7fc:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
	return SD_disk_initialize (pdrv);
 800a7fe:	79fb      	ldrb	r3, [r7, #7]
 800a800:	4618      	mov	r0, r3
 800a802:	f7f6 f87d 	bl	8000900 <SD_disk_initialize>
 800a806:	4603      	mov	r3, r0
  /* USER CODE END INIT */
}
 800a808:	4618      	mov	r0, r3
 800a80a:	3708      	adds	r7, #8
 800a80c:	46bd      	mov	sp, r7
 800a80e:	bd80      	pop	{r7, pc}

0800a810 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 800a810:	b580      	push	{r7, lr}
 800a812:	b082      	sub	sp, #8
 800a814:	af00      	add	r7, sp, #0
 800a816:	4603      	mov	r3, r0
 800a818:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
	return SD_disk_status (pdrv);
 800a81a:	79fb      	ldrb	r3, [r7, #7]
 800a81c:	4618      	mov	r0, r3
 800a81e:	f7f6 f95b 	bl	8000ad8 <SD_disk_status>
 800a822:	4603      	mov	r3, r0
  /* USER CODE END STATUS */
}
 800a824:	4618      	mov	r0, r3
 800a826:	3708      	adds	r7, #8
 800a828:	46bd      	mov	sp, r7
 800a82a:	bd80      	pop	{r7, pc}

0800a82c <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 800a82c:	b580      	push	{r7, lr}
 800a82e:	b084      	sub	sp, #16
 800a830:	af00      	add	r7, sp, #0
 800a832:	60b9      	str	r1, [r7, #8]
 800a834:	607a      	str	r2, [r7, #4]
 800a836:	603b      	str	r3, [r7, #0]
 800a838:	4603      	mov	r3, r0
 800a83a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
	return SD_disk_read (pdrv, buff, sector, count);
 800a83c:	7bf8      	ldrb	r0, [r7, #15]
 800a83e:	683b      	ldr	r3, [r7, #0]
 800a840:	687a      	ldr	r2, [r7, #4]
 800a842:	68b9      	ldr	r1, [r7, #8]
 800a844:	f7f6 f95e 	bl	8000b04 <SD_disk_read>
 800a848:	4603      	mov	r3, r0
  /* USER CODE END READ */
}
 800a84a:	4618      	mov	r0, r3
 800a84c:	3710      	adds	r7, #16
 800a84e:	46bd      	mov	sp, r7
 800a850:	bd80      	pop	{r7, pc}

0800a852 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 800a852:	b580      	push	{r7, lr}
 800a854:	b084      	sub	sp, #16
 800a856:	af00      	add	r7, sp, #0
 800a858:	60b9      	str	r1, [r7, #8]
 800a85a:	607a      	str	r2, [r7, #4]
 800a85c:	603b      	str	r3, [r7, #0]
 800a85e:	4603      	mov	r3, r0
 800a860:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
	/* USER CODE HERE */
	return SD_disk_write (pdrv, buff, sector, count);
 800a862:	7bf8      	ldrb	r0, [r7, #15]
 800a864:	683b      	ldr	r3, [r7, #0]
 800a866:	687a      	ldr	r2, [r7, #4]
 800a868:	68b9      	ldr	r1, [r7, #8]
 800a86a:	f7f6 f9b5 	bl	8000bd8 <SD_disk_write>
 800a86e:	4603      	mov	r3, r0
  /* USER CODE END WRITE */
}
 800a870:	4618      	mov	r0, r3
 800a872:	3710      	adds	r7, #16
 800a874:	46bd      	mov	sp, r7
 800a876:	bd80      	pop	{r7, pc}

0800a878 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 800a878:	b580      	push	{r7, lr}
 800a87a:	b082      	sub	sp, #8
 800a87c:	af00      	add	r7, sp, #0
 800a87e:	4603      	mov	r3, r0
 800a880:	603a      	str	r2, [r7, #0]
 800a882:	71fb      	strb	r3, [r7, #7]
 800a884:	460b      	mov	r3, r1
 800a886:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
	return SD_disk_ioctl (pdrv, cmd, buff);
 800a888:	79b9      	ldrb	r1, [r7, #6]
 800a88a:	79fb      	ldrb	r3, [r7, #7]
 800a88c:	683a      	ldr	r2, [r7, #0]
 800a88e:	4618      	mov	r0, r3
 800a890:	f7f6 fa26 	bl	8000ce0 <SD_disk_ioctl>
 800a894:	4603      	mov	r3, r0
  /* USER CODE END IOCTL */
}
 800a896:	4618      	mov	r0, r3
 800a898:	3708      	adds	r7, #8
 800a89a:	46bd      	mov	sp, r7
 800a89c:	bd80      	pop	{r7, pc}
	...

0800a8a0 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 800a8a0:	b580      	push	{r7, lr}
 800a8a2:	b084      	sub	sp, #16
 800a8a4:	af00      	add	r7, sp, #0
 800a8a6:	4603      	mov	r3, r0
 800a8a8:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800a8aa:	79fb      	ldrb	r3, [r7, #7]
 800a8ac:	4a08      	ldr	r2, [pc, #32]	; (800a8d0 <disk_status+0x30>)
 800a8ae:	009b      	lsls	r3, r3, #2
 800a8b0:	4413      	add	r3, r2
 800a8b2:	685b      	ldr	r3, [r3, #4]
 800a8b4:	685b      	ldr	r3, [r3, #4]
 800a8b6:	79fa      	ldrb	r2, [r7, #7]
 800a8b8:	4905      	ldr	r1, [pc, #20]	; (800a8d0 <disk_status+0x30>)
 800a8ba:	440a      	add	r2, r1
 800a8bc:	7a12      	ldrb	r2, [r2, #8]
 800a8be:	4610      	mov	r0, r2
 800a8c0:	4798      	blx	r3
 800a8c2:	4603      	mov	r3, r0
 800a8c4:	73fb      	strb	r3, [r7, #15]
  return stat;
 800a8c6:	7bfb      	ldrb	r3, [r7, #15]
}
 800a8c8:	4618      	mov	r0, r3
 800a8ca:	3710      	adds	r7, #16
 800a8cc:	46bd      	mov	sp, r7
 800a8ce:	bd80      	pop	{r7, pc}
 800a8d0:	200170a4 	.word	0x200170a4

0800a8d4 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800a8d4:	b580      	push	{r7, lr}
 800a8d6:	b084      	sub	sp, #16
 800a8d8:	af00      	add	r7, sp, #0
 800a8da:	4603      	mov	r3, r0
 800a8dc:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800a8de:	2300      	movs	r3, #0
 800a8e0:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800a8e2:	79fb      	ldrb	r3, [r7, #7]
 800a8e4:	4a0d      	ldr	r2, [pc, #52]	; (800a91c <disk_initialize+0x48>)
 800a8e6:	5cd3      	ldrb	r3, [r2, r3]
 800a8e8:	2b00      	cmp	r3, #0
 800a8ea:	d111      	bne.n	800a910 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 800a8ec:	79fb      	ldrb	r3, [r7, #7]
 800a8ee:	4a0b      	ldr	r2, [pc, #44]	; (800a91c <disk_initialize+0x48>)
 800a8f0:	2101      	movs	r1, #1
 800a8f2:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800a8f4:	79fb      	ldrb	r3, [r7, #7]
 800a8f6:	4a09      	ldr	r2, [pc, #36]	; (800a91c <disk_initialize+0x48>)
 800a8f8:	009b      	lsls	r3, r3, #2
 800a8fa:	4413      	add	r3, r2
 800a8fc:	685b      	ldr	r3, [r3, #4]
 800a8fe:	681b      	ldr	r3, [r3, #0]
 800a900:	79fa      	ldrb	r2, [r7, #7]
 800a902:	4906      	ldr	r1, [pc, #24]	; (800a91c <disk_initialize+0x48>)
 800a904:	440a      	add	r2, r1
 800a906:	7a12      	ldrb	r2, [r2, #8]
 800a908:	4610      	mov	r0, r2
 800a90a:	4798      	blx	r3
 800a90c:	4603      	mov	r3, r0
 800a90e:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 800a910:	7bfb      	ldrb	r3, [r7, #15]
}
 800a912:	4618      	mov	r0, r3
 800a914:	3710      	adds	r7, #16
 800a916:	46bd      	mov	sp, r7
 800a918:	bd80      	pop	{r7, pc}
 800a91a:	bf00      	nop
 800a91c:	200170a4 	.word	0x200170a4

0800a920 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800a920:	b590      	push	{r4, r7, lr}
 800a922:	b087      	sub	sp, #28
 800a924:	af00      	add	r7, sp, #0
 800a926:	60b9      	str	r1, [r7, #8]
 800a928:	607a      	str	r2, [r7, #4]
 800a92a:	603b      	str	r3, [r7, #0]
 800a92c:	4603      	mov	r3, r0
 800a92e:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800a930:	7bfb      	ldrb	r3, [r7, #15]
 800a932:	4a0a      	ldr	r2, [pc, #40]	; (800a95c <disk_read+0x3c>)
 800a934:	009b      	lsls	r3, r3, #2
 800a936:	4413      	add	r3, r2
 800a938:	685b      	ldr	r3, [r3, #4]
 800a93a:	689c      	ldr	r4, [r3, #8]
 800a93c:	7bfb      	ldrb	r3, [r7, #15]
 800a93e:	4a07      	ldr	r2, [pc, #28]	; (800a95c <disk_read+0x3c>)
 800a940:	4413      	add	r3, r2
 800a942:	7a18      	ldrb	r0, [r3, #8]
 800a944:	683b      	ldr	r3, [r7, #0]
 800a946:	687a      	ldr	r2, [r7, #4]
 800a948:	68b9      	ldr	r1, [r7, #8]
 800a94a:	47a0      	blx	r4
 800a94c:	4603      	mov	r3, r0
 800a94e:	75fb      	strb	r3, [r7, #23]
  return res;
 800a950:	7dfb      	ldrb	r3, [r7, #23]
}
 800a952:	4618      	mov	r0, r3
 800a954:	371c      	adds	r7, #28
 800a956:	46bd      	mov	sp, r7
 800a958:	bd90      	pop	{r4, r7, pc}
 800a95a:	bf00      	nop
 800a95c:	200170a4 	.word	0x200170a4

0800a960 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800a960:	b590      	push	{r4, r7, lr}
 800a962:	b087      	sub	sp, #28
 800a964:	af00      	add	r7, sp, #0
 800a966:	60b9      	str	r1, [r7, #8]
 800a968:	607a      	str	r2, [r7, #4]
 800a96a:	603b      	str	r3, [r7, #0]
 800a96c:	4603      	mov	r3, r0
 800a96e:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800a970:	7bfb      	ldrb	r3, [r7, #15]
 800a972:	4a0a      	ldr	r2, [pc, #40]	; (800a99c <disk_write+0x3c>)
 800a974:	009b      	lsls	r3, r3, #2
 800a976:	4413      	add	r3, r2
 800a978:	685b      	ldr	r3, [r3, #4]
 800a97a:	68dc      	ldr	r4, [r3, #12]
 800a97c:	7bfb      	ldrb	r3, [r7, #15]
 800a97e:	4a07      	ldr	r2, [pc, #28]	; (800a99c <disk_write+0x3c>)
 800a980:	4413      	add	r3, r2
 800a982:	7a18      	ldrb	r0, [r3, #8]
 800a984:	683b      	ldr	r3, [r7, #0]
 800a986:	687a      	ldr	r2, [r7, #4]
 800a988:	68b9      	ldr	r1, [r7, #8]
 800a98a:	47a0      	blx	r4
 800a98c:	4603      	mov	r3, r0
 800a98e:	75fb      	strb	r3, [r7, #23]
  return res;
 800a990:	7dfb      	ldrb	r3, [r7, #23]
}
 800a992:	4618      	mov	r0, r3
 800a994:	371c      	adds	r7, #28
 800a996:	46bd      	mov	sp, r7
 800a998:	bd90      	pop	{r4, r7, pc}
 800a99a:	bf00      	nop
 800a99c:	200170a4 	.word	0x200170a4

0800a9a0 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800a9a0:	b580      	push	{r7, lr}
 800a9a2:	b084      	sub	sp, #16
 800a9a4:	af00      	add	r7, sp, #0
 800a9a6:	4603      	mov	r3, r0
 800a9a8:	603a      	str	r2, [r7, #0]
 800a9aa:	71fb      	strb	r3, [r7, #7]
 800a9ac:	460b      	mov	r3, r1
 800a9ae:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800a9b0:	79fb      	ldrb	r3, [r7, #7]
 800a9b2:	4a09      	ldr	r2, [pc, #36]	; (800a9d8 <disk_ioctl+0x38>)
 800a9b4:	009b      	lsls	r3, r3, #2
 800a9b6:	4413      	add	r3, r2
 800a9b8:	685b      	ldr	r3, [r3, #4]
 800a9ba:	691b      	ldr	r3, [r3, #16]
 800a9bc:	79fa      	ldrb	r2, [r7, #7]
 800a9be:	4906      	ldr	r1, [pc, #24]	; (800a9d8 <disk_ioctl+0x38>)
 800a9c0:	440a      	add	r2, r1
 800a9c2:	7a10      	ldrb	r0, [r2, #8]
 800a9c4:	79b9      	ldrb	r1, [r7, #6]
 800a9c6:	683a      	ldr	r2, [r7, #0]
 800a9c8:	4798      	blx	r3
 800a9ca:	4603      	mov	r3, r0
 800a9cc:	73fb      	strb	r3, [r7, #15]
  return res;
 800a9ce:	7bfb      	ldrb	r3, [r7, #15]
}
 800a9d0:	4618      	mov	r0, r3
 800a9d2:	3710      	adds	r7, #16
 800a9d4:	46bd      	mov	sp, r7
 800a9d6:	bd80      	pop	{r7, pc}
 800a9d8:	200170a4 	.word	0x200170a4

0800a9dc <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 800a9dc:	b480      	push	{r7}
 800a9de:	b085      	sub	sp, #20
 800a9e0:	af00      	add	r7, sp, #0
 800a9e2:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800a9e4:	687b      	ldr	r3, [r7, #4]
 800a9e6:	3301      	adds	r3, #1
 800a9e8:	781b      	ldrb	r3, [r3, #0]
 800a9ea:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 800a9ec:	89fb      	ldrh	r3, [r7, #14]
 800a9ee:	021b      	lsls	r3, r3, #8
 800a9f0:	b21a      	sxth	r2, r3
 800a9f2:	687b      	ldr	r3, [r7, #4]
 800a9f4:	781b      	ldrb	r3, [r3, #0]
 800a9f6:	b21b      	sxth	r3, r3
 800a9f8:	4313      	orrs	r3, r2
 800a9fa:	b21b      	sxth	r3, r3
 800a9fc:	81fb      	strh	r3, [r7, #14]
	return rv;
 800a9fe:	89fb      	ldrh	r3, [r7, #14]
}
 800aa00:	4618      	mov	r0, r3
 800aa02:	3714      	adds	r7, #20
 800aa04:	46bd      	mov	sp, r7
 800aa06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa0a:	4770      	bx	lr

0800aa0c <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800aa0c:	b480      	push	{r7}
 800aa0e:	b085      	sub	sp, #20
 800aa10:	af00      	add	r7, sp, #0
 800aa12:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800aa14:	687b      	ldr	r3, [r7, #4]
 800aa16:	3303      	adds	r3, #3
 800aa18:	781b      	ldrb	r3, [r3, #0]
 800aa1a:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800aa1c:	68fb      	ldr	r3, [r7, #12]
 800aa1e:	021b      	lsls	r3, r3, #8
 800aa20:	687a      	ldr	r2, [r7, #4]
 800aa22:	3202      	adds	r2, #2
 800aa24:	7812      	ldrb	r2, [r2, #0]
 800aa26:	4313      	orrs	r3, r2
 800aa28:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800aa2a:	68fb      	ldr	r3, [r7, #12]
 800aa2c:	021b      	lsls	r3, r3, #8
 800aa2e:	687a      	ldr	r2, [r7, #4]
 800aa30:	3201      	adds	r2, #1
 800aa32:	7812      	ldrb	r2, [r2, #0]
 800aa34:	4313      	orrs	r3, r2
 800aa36:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800aa38:	68fb      	ldr	r3, [r7, #12]
 800aa3a:	021b      	lsls	r3, r3, #8
 800aa3c:	687a      	ldr	r2, [r7, #4]
 800aa3e:	7812      	ldrb	r2, [r2, #0]
 800aa40:	4313      	orrs	r3, r2
 800aa42:	60fb      	str	r3, [r7, #12]
	return rv;
 800aa44:	68fb      	ldr	r3, [r7, #12]
}
 800aa46:	4618      	mov	r0, r3
 800aa48:	3714      	adds	r7, #20
 800aa4a:	46bd      	mov	sp, r7
 800aa4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa50:	4770      	bx	lr

0800aa52 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800aa52:	b480      	push	{r7}
 800aa54:	b083      	sub	sp, #12
 800aa56:	af00      	add	r7, sp, #0
 800aa58:	6078      	str	r0, [r7, #4]
 800aa5a:	460b      	mov	r3, r1
 800aa5c:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800aa5e:	687b      	ldr	r3, [r7, #4]
 800aa60:	1c5a      	adds	r2, r3, #1
 800aa62:	607a      	str	r2, [r7, #4]
 800aa64:	887a      	ldrh	r2, [r7, #2]
 800aa66:	b2d2      	uxtb	r2, r2
 800aa68:	701a      	strb	r2, [r3, #0]
 800aa6a:	887b      	ldrh	r3, [r7, #2]
 800aa6c:	0a1b      	lsrs	r3, r3, #8
 800aa6e:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 800aa70:	687b      	ldr	r3, [r7, #4]
 800aa72:	1c5a      	adds	r2, r3, #1
 800aa74:	607a      	str	r2, [r7, #4]
 800aa76:	887a      	ldrh	r2, [r7, #2]
 800aa78:	b2d2      	uxtb	r2, r2
 800aa7a:	701a      	strb	r2, [r3, #0]
}
 800aa7c:	bf00      	nop
 800aa7e:	370c      	adds	r7, #12
 800aa80:	46bd      	mov	sp, r7
 800aa82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa86:	4770      	bx	lr

0800aa88 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800aa88:	b480      	push	{r7}
 800aa8a:	b083      	sub	sp, #12
 800aa8c:	af00      	add	r7, sp, #0
 800aa8e:	6078      	str	r0, [r7, #4]
 800aa90:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800aa92:	687b      	ldr	r3, [r7, #4]
 800aa94:	1c5a      	adds	r2, r3, #1
 800aa96:	607a      	str	r2, [r7, #4]
 800aa98:	683a      	ldr	r2, [r7, #0]
 800aa9a:	b2d2      	uxtb	r2, r2
 800aa9c:	701a      	strb	r2, [r3, #0]
 800aa9e:	683b      	ldr	r3, [r7, #0]
 800aaa0:	0a1b      	lsrs	r3, r3, #8
 800aaa2:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800aaa4:	687b      	ldr	r3, [r7, #4]
 800aaa6:	1c5a      	adds	r2, r3, #1
 800aaa8:	607a      	str	r2, [r7, #4]
 800aaaa:	683a      	ldr	r2, [r7, #0]
 800aaac:	b2d2      	uxtb	r2, r2
 800aaae:	701a      	strb	r2, [r3, #0]
 800aab0:	683b      	ldr	r3, [r7, #0]
 800aab2:	0a1b      	lsrs	r3, r3, #8
 800aab4:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800aab6:	687b      	ldr	r3, [r7, #4]
 800aab8:	1c5a      	adds	r2, r3, #1
 800aaba:	607a      	str	r2, [r7, #4]
 800aabc:	683a      	ldr	r2, [r7, #0]
 800aabe:	b2d2      	uxtb	r2, r2
 800aac0:	701a      	strb	r2, [r3, #0]
 800aac2:	683b      	ldr	r3, [r7, #0]
 800aac4:	0a1b      	lsrs	r3, r3, #8
 800aac6:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800aac8:	687b      	ldr	r3, [r7, #4]
 800aaca:	1c5a      	adds	r2, r3, #1
 800aacc:	607a      	str	r2, [r7, #4]
 800aace:	683a      	ldr	r2, [r7, #0]
 800aad0:	b2d2      	uxtb	r2, r2
 800aad2:	701a      	strb	r2, [r3, #0]
}
 800aad4:	bf00      	nop
 800aad6:	370c      	adds	r7, #12
 800aad8:	46bd      	mov	sp, r7
 800aada:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aade:	4770      	bx	lr

0800aae0 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800aae0:	b480      	push	{r7}
 800aae2:	b087      	sub	sp, #28
 800aae4:	af00      	add	r7, sp, #0
 800aae6:	60f8      	str	r0, [r7, #12]
 800aae8:	60b9      	str	r1, [r7, #8]
 800aaea:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800aaec:	68fb      	ldr	r3, [r7, #12]
 800aaee:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800aaf0:	68bb      	ldr	r3, [r7, #8]
 800aaf2:	613b      	str	r3, [r7, #16]

	if (cnt) {
 800aaf4:	687b      	ldr	r3, [r7, #4]
 800aaf6:	2b00      	cmp	r3, #0
 800aaf8:	d00d      	beq.n	800ab16 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800aafa:	693a      	ldr	r2, [r7, #16]
 800aafc:	1c53      	adds	r3, r2, #1
 800aafe:	613b      	str	r3, [r7, #16]
 800ab00:	697b      	ldr	r3, [r7, #20]
 800ab02:	1c59      	adds	r1, r3, #1
 800ab04:	6179      	str	r1, [r7, #20]
 800ab06:	7812      	ldrb	r2, [r2, #0]
 800ab08:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800ab0a:	687b      	ldr	r3, [r7, #4]
 800ab0c:	3b01      	subs	r3, #1
 800ab0e:	607b      	str	r3, [r7, #4]
 800ab10:	687b      	ldr	r3, [r7, #4]
 800ab12:	2b00      	cmp	r3, #0
 800ab14:	d1f1      	bne.n	800aafa <mem_cpy+0x1a>
	}
}
 800ab16:	bf00      	nop
 800ab18:	371c      	adds	r7, #28
 800ab1a:	46bd      	mov	sp, r7
 800ab1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab20:	4770      	bx	lr

0800ab22 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800ab22:	b480      	push	{r7}
 800ab24:	b087      	sub	sp, #28
 800ab26:	af00      	add	r7, sp, #0
 800ab28:	60f8      	str	r0, [r7, #12]
 800ab2a:	60b9      	str	r1, [r7, #8]
 800ab2c:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800ab2e:	68fb      	ldr	r3, [r7, #12]
 800ab30:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800ab32:	697b      	ldr	r3, [r7, #20]
 800ab34:	1c5a      	adds	r2, r3, #1
 800ab36:	617a      	str	r2, [r7, #20]
 800ab38:	68ba      	ldr	r2, [r7, #8]
 800ab3a:	b2d2      	uxtb	r2, r2
 800ab3c:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800ab3e:	687b      	ldr	r3, [r7, #4]
 800ab40:	3b01      	subs	r3, #1
 800ab42:	607b      	str	r3, [r7, #4]
 800ab44:	687b      	ldr	r3, [r7, #4]
 800ab46:	2b00      	cmp	r3, #0
 800ab48:	d1f3      	bne.n	800ab32 <mem_set+0x10>
}
 800ab4a:	bf00      	nop
 800ab4c:	bf00      	nop
 800ab4e:	371c      	adds	r7, #28
 800ab50:	46bd      	mov	sp, r7
 800ab52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab56:	4770      	bx	lr

0800ab58 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800ab58:	b480      	push	{r7}
 800ab5a:	b089      	sub	sp, #36	; 0x24
 800ab5c:	af00      	add	r7, sp, #0
 800ab5e:	60f8      	str	r0, [r7, #12]
 800ab60:	60b9      	str	r1, [r7, #8]
 800ab62:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800ab64:	68fb      	ldr	r3, [r7, #12]
 800ab66:	61fb      	str	r3, [r7, #28]
 800ab68:	68bb      	ldr	r3, [r7, #8]
 800ab6a:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800ab6c:	2300      	movs	r3, #0
 800ab6e:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 800ab70:	69fb      	ldr	r3, [r7, #28]
 800ab72:	1c5a      	adds	r2, r3, #1
 800ab74:	61fa      	str	r2, [r7, #28]
 800ab76:	781b      	ldrb	r3, [r3, #0]
 800ab78:	4619      	mov	r1, r3
 800ab7a:	69bb      	ldr	r3, [r7, #24]
 800ab7c:	1c5a      	adds	r2, r3, #1
 800ab7e:	61ba      	str	r2, [r7, #24]
 800ab80:	781b      	ldrb	r3, [r3, #0]
 800ab82:	1acb      	subs	r3, r1, r3
 800ab84:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800ab86:	687b      	ldr	r3, [r7, #4]
 800ab88:	3b01      	subs	r3, #1
 800ab8a:	607b      	str	r3, [r7, #4]
 800ab8c:	687b      	ldr	r3, [r7, #4]
 800ab8e:	2b00      	cmp	r3, #0
 800ab90:	d002      	beq.n	800ab98 <mem_cmp+0x40>
 800ab92:	697b      	ldr	r3, [r7, #20]
 800ab94:	2b00      	cmp	r3, #0
 800ab96:	d0eb      	beq.n	800ab70 <mem_cmp+0x18>

	return r;
 800ab98:	697b      	ldr	r3, [r7, #20]
}
 800ab9a:	4618      	mov	r0, r3
 800ab9c:	3724      	adds	r7, #36	; 0x24
 800ab9e:	46bd      	mov	sp, r7
 800aba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aba4:	4770      	bx	lr

0800aba6 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800aba6:	b480      	push	{r7}
 800aba8:	b083      	sub	sp, #12
 800abaa:	af00      	add	r7, sp, #0
 800abac:	6078      	str	r0, [r7, #4]
 800abae:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800abb0:	e002      	b.n	800abb8 <chk_chr+0x12>
 800abb2:	687b      	ldr	r3, [r7, #4]
 800abb4:	3301      	adds	r3, #1
 800abb6:	607b      	str	r3, [r7, #4]
 800abb8:	687b      	ldr	r3, [r7, #4]
 800abba:	781b      	ldrb	r3, [r3, #0]
 800abbc:	2b00      	cmp	r3, #0
 800abbe:	d005      	beq.n	800abcc <chk_chr+0x26>
 800abc0:	687b      	ldr	r3, [r7, #4]
 800abc2:	781b      	ldrb	r3, [r3, #0]
 800abc4:	461a      	mov	r2, r3
 800abc6:	683b      	ldr	r3, [r7, #0]
 800abc8:	4293      	cmp	r3, r2
 800abca:	d1f2      	bne.n	800abb2 <chk_chr+0xc>
	return *str;
 800abcc:	687b      	ldr	r3, [r7, #4]
 800abce:	781b      	ldrb	r3, [r3, #0]
}
 800abd0:	4618      	mov	r0, r3
 800abd2:	370c      	adds	r7, #12
 800abd4:	46bd      	mov	sp, r7
 800abd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abda:	4770      	bx	lr

0800abdc <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800abdc:	b480      	push	{r7}
 800abde:	b085      	sub	sp, #20
 800abe0:	af00      	add	r7, sp, #0
 800abe2:	6078      	str	r0, [r7, #4]
 800abe4:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800abe6:	2300      	movs	r3, #0
 800abe8:	60bb      	str	r3, [r7, #8]
 800abea:	68bb      	ldr	r3, [r7, #8]
 800abec:	60fb      	str	r3, [r7, #12]
 800abee:	e029      	b.n	800ac44 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 800abf0:	4a27      	ldr	r2, [pc, #156]	; (800ac90 <chk_lock+0xb4>)
 800abf2:	68fb      	ldr	r3, [r7, #12]
 800abf4:	011b      	lsls	r3, r3, #4
 800abf6:	4413      	add	r3, r2
 800abf8:	681b      	ldr	r3, [r3, #0]
 800abfa:	2b00      	cmp	r3, #0
 800abfc:	d01d      	beq.n	800ac3a <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800abfe:	4a24      	ldr	r2, [pc, #144]	; (800ac90 <chk_lock+0xb4>)
 800ac00:	68fb      	ldr	r3, [r7, #12]
 800ac02:	011b      	lsls	r3, r3, #4
 800ac04:	4413      	add	r3, r2
 800ac06:	681a      	ldr	r2, [r3, #0]
 800ac08:	687b      	ldr	r3, [r7, #4]
 800ac0a:	681b      	ldr	r3, [r3, #0]
 800ac0c:	429a      	cmp	r2, r3
 800ac0e:	d116      	bne.n	800ac3e <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 800ac10:	4a1f      	ldr	r2, [pc, #124]	; (800ac90 <chk_lock+0xb4>)
 800ac12:	68fb      	ldr	r3, [r7, #12]
 800ac14:	011b      	lsls	r3, r3, #4
 800ac16:	4413      	add	r3, r2
 800ac18:	3304      	adds	r3, #4
 800ac1a:	681a      	ldr	r2, [r3, #0]
 800ac1c:	687b      	ldr	r3, [r7, #4]
 800ac1e:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800ac20:	429a      	cmp	r2, r3
 800ac22:	d10c      	bne.n	800ac3e <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800ac24:	4a1a      	ldr	r2, [pc, #104]	; (800ac90 <chk_lock+0xb4>)
 800ac26:	68fb      	ldr	r3, [r7, #12]
 800ac28:	011b      	lsls	r3, r3, #4
 800ac2a:	4413      	add	r3, r2
 800ac2c:	3308      	adds	r3, #8
 800ac2e:	681a      	ldr	r2, [r3, #0]
 800ac30:	687b      	ldr	r3, [r7, #4]
 800ac32:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 800ac34:	429a      	cmp	r2, r3
 800ac36:	d102      	bne.n	800ac3e <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800ac38:	e007      	b.n	800ac4a <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800ac3a:	2301      	movs	r3, #1
 800ac3c:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800ac3e:	68fb      	ldr	r3, [r7, #12]
 800ac40:	3301      	adds	r3, #1
 800ac42:	60fb      	str	r3, [r7, #12]
 800ac44:	68fb      	ldr	r3, [r7, #12]
 800ac46:	2b01      	cmp	r3, #1
 800ac48:	d9d2      	bls.n	800abf0 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800ac4a:	68fb      	ldr	r3, [r7, #12]
 800ac4c:	2b02      	cmp	r3, #2
 800ac4e:	d109      	bne.n	800ac64 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800ac50:	68bb      	ldr	r3, [r7, #8]
 800ac52:	2b00      	cmp	r3, #0
 800ac54:	d102      	bne.n	800ac5c <chk_lock+0x80>
 800ac56:	683b      	ldr	r3, [r7, #0]
 800ac58:	2b02      	cmp	r3, #2
 800ac5a:	d101      	bne.n	800ac60 <chk_lock+0x84>
 800ac5c:	2300      	movs	r3, #0
 800ac5e:	e010      	b.n	800ac82 <chk_lock+0xa6>
 800ac60:	2312      	movs	r3, #18
 800ac62:	e00e      	b.n	800ac82 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800ac64:	683b      	ldr	r3, [r7, #0]
 800ac66:	2b00      	cmp	r3, #0
 800ac68:	d108      	bne.n	800ac7c <chk_lock+0xa0>
 800ac6a:	4a09      	ldr	r2, [pc, #36]	; (800ac90 <chk_lock+0xb4>)
 800ac6c:	68fb      	ldr	r3, [r7, #12]
 800ac6e:	011b      	lsls	r3, r3, #4
 800ac70:	4413      	add	r3, r2
 800ac72:	330c      	adds	r3, #12
 800ac74:	881b      	ldrh	r3, [r3, #0]
 800ac76:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ac7a:	d101      	bne.n	800ac80 <chk_lock+0xa4>
 800ac7c:	2310      	movs	r3, #16
 800ac7e:	e000      	b.n	800ac82 <chk_lock+0xa6>
 800ac80:	2300      	movs	r3, #0
}
 800ac82:	4618      	mov	r0, r3
 800ac84:	3714      	adds	r7, #20
 800ac86:	46bd      	mov	sp, r7
 800ac88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac8c:	4770      	bx	lr
 800ac8e:	bf00      	nop
 800ac90:	20016e84 	.word	0x20016e84

0800ac94 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800ac94:	b480      	push	{r7}
 800ac96:	b083      	sub	sp, #12
 800ac98:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800ac9a:	2300      	movs	r3, #0
 800ac9c:	607b      	str	r3, [r7, #4]
 800ac9e:	e002      	b.n	800aca6 <enq_lock+0x12>
 800aca0:	687b      	ldr	r3, [r7, #4]
 800aca2:	3301      	adds	r3, #1
 800aca4:	607b      	str	r3, [r7, #4]
 800aca6:	687b      	ldr	r3, [r7, #4]
 800aca8:	2b01      	cmp	r3, #1
 800acaa:	d806      	bhi.n	800acba <enq_lock+0x26>
 800acac:	4a09      	ldr	r2, [pc, #36]	; (800acd4 <enq_lock+0x40>)
 800acae:	687b      	ldr	r3, [r7, #4]
 800acb0:	011b      	lsls	r3, r3, #4
 800acb2:	4413      	add	r3, r2
 800acb4:	681b      	ldr	r3, [r3, #0]
 800acb6:	2b00      	cmp	r3, #0
 800acb8:	d1f2      	bne.n	800aca0 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800acba:	687b      	ldr	r3, [r7, #4]
 800acbc:	2b02      	cmp	r3, #2
 800acbe:	bf14      	ite	ne
 800acc0:	2301      	movne	r3, #1
 800acc2:	2300      	moveq	r3, #0
 800acc4:	b2db      	uxtb	r3, r3
}
 800acc6:	4618      	mov	r0, r3
 800acc8:	370c      	adds	r7, #12
 800acca:	46bd      	mov	sp, r7
 800accc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acd0:	4770      	bx	lr
 800acd2:	bf00      	nop
 800acd4:	20016e84 	.word	0x20016e84

0800acd8 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800acd8:	b480      	push	{r7}
 800acda:	b085      	sub	sp, #20
 800acdc:	af00      	add	r7, sp, #0
 800acde:	6078      	str	r0, [r7, #4]
 800ace0:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800ace2:	2300      	movs	r3, #0
 800ace4:	60fb      	str	r3, [r7, #12]
 800ace6:	e01f      	b.n	800ad28 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 800ace8:	4a41      	ldr	r2, [pc, #260]	; (800adf0 <inc_lock+0x118>)
 800acea:	68fb      	ldr	r3, [r7, #12]
 800acec:	011b      	lsls	r3, r3, #4
 800acee:	4413      	add	r3, r2
 800acf0:	681a      	ldr	r2, [r3, #0]
 800acf2:	687b      	ldr	r3, [r7, #4]
 800acf4:	681b      	ldr	r3, [r3, #0]
 800acf6:	429a      	cmp	r2, r3
 800acf8:	d113      	bne.n	800ad22 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800acfa:	4a3d      	ldr	r2, [pc, #244]	; (800adf0 <inc_lock+0x118>)
 800acfc:	68fb      	ldr	r3, [r7, #12]
 800acfe:	011b      	lsls	r3, r3, #4
 800ad00:	4413      	add	r3, r2
 800ad02:	3304      	adds	r3, #4
 800ad04:	681a      	ldr	r2, [r3, #0]
 800ad06:	687b      	ldr	r3, [r7, #4]
 800ad08:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800ad0a:	429a      	cmp	r2, r3
 800ad0c:	d109      	bne.n	800ad22 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800ad0e:	4a38      	ldr	r2, [pc, #224]	; (800adf0 <inc_lock+0x118>)
 800ad10:	68fb      	ldr	r3, [r7, #12]
 800ad12:	011b      	lsls	r3, r3, #4
 800ad14:	4413      	add	r3, r2
 800ad16:	3308      	adds	r3, #8
 800ad18:	681a      	ldr	r2, [r3, #0]
 800ad1a:	687b      	ldr	r3, [r7, #4]
 800ad1c:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800ad1e:	429a      	cmp	r2, r3
 800ad20:	d006      	beq.n	800ad30 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800ad22:	68fb      	ldr	r3, [r7, #12]
 800ad24:	3301      	adds	r3, #1
 800ad26:	60fb      	str	r3, [r7, #12]
 800ad28:	68fb      	ldr	r3, [r7, #12]
 800ad2a:	2b01      	cmp	r3, #1
 800ad2c:	d9dc      	bls.n	800ace8 <inc_lock+0x10>
 800ad2e:	e000      	b.n	800ad32 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 800ad30:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800ad32:	68fb      	ldr	r3, [r7, #12]
 800ad34:	2b02      	cmp	r3, #2
 800ad36:	d132      	bne.n	800ad9e <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800ad38:	2300      	movs	r3, #0
 800ad3a:	60fb      	str	r3, [r7, #12]
 800ad3c:	e002      	b.n	800ad44 <inc_lock+0x6c>
 800ad3e:	68fb      	ldr	r3, [r7, #12]
 800ad40:	3301      	adds	r3, #1
 800ad42:	60fb      	str	r3, [r7, #12]
 800ad44:	68fb      	ldr	r3, [r7, #12]
 800ad46:	2b01      	cmp	r3, #1
 800ad48:	d806      	bhi.n	800ad58 <inc_lock+0x80>
 800ad4a:	4a29      	ldr	r2, [pc, #164]	; (800adf0 <inc_lock+0x118>)
 800ad4c:	68fb      	ldr	r3, [r7, #12]
 800ad4e:	011b      	lsls	r3, r3, #4
 800ad50:	4413      	add	r3, r2
 800ad52:	681b      	ldr	r3, [r3, #0]
 800ad54:	2b00      	cmp	r3, #0
 800ad56:	d1f2      	bne.n	800ad3e <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800ad58:	68fb      	ldr	r3, [r7, #12]
 800ad5a:	2b02      	cmp	r3, #2
 800ad5c:	d101      	bne.n	800ad62 <inc_lock+0x8a>
 800ad5e:	2300      	movs	r3, #0
 800ad60:	e040      	b.n	800ade4 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800ad62:	687b      	ldr	r3, [r7, #4]
 800ad64:	681a      	ldr	r2, [r3, #0]
 800ad66:	4922      	ldr	r1, [pc, #136]	; (800adf0 <inc_lock+0x118>)
 800ad68:	68fb      	ldr	r3, [r7, #12]
 800ad6a:	011b      	lsls	r3, r3, #4
 800ad6c:	440b      	add	r3, r1
 800ad6e:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 800ad70:	687b      	ldr	r3, [r7, #4]
 800ad72:	689a      	ldr	r2, [r3, #8]
 800ad74:	491e      	ldr	r1, [pc, #120]	; (800adf0 <inc_lock+0x118>)
 800ad76:	68fb      	ldr	r3, [r7, #12]
 800ad78:	011b      	lsls	r3, r3, #4
 800ad7a:	440b      	add	r3, r1
 800ad7c:	3304      	adds	r3, #4
 800ad7e:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 800ad80:	687b      	ldr	r3, [r7, #4]
 800ad82:	695a      	ldr	r2, [r3, #20]
 800ad84:	491a      	ldr	r1, [pc, #104]	; (800adf0 <inc_lock+0x118>)
 800ad86:	68fb      	ldr	r3, [r7, #12]
 800ad88:	011b      	lsls	r3, r3, #4
 800ad8a:	440b      	add	r3, r1
 800ad8c:	3308      	adds	r3, #8
 800ad8e:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 800ad90:	4a17      	ldr	r2, [pc, #92]	; (800adf0 <inc_lock+0x118>)
 800ad92:	68fb      	ldr	r3, [r7, #12]
 800ad94:	011b      	lsls	r3, r3, #4
 800ad96:	4413      	add	r3, r2
 800ad98:	330c      	adds	r3, #12
 800ad9a:	2200      	movs	r2, #0
 800ad9c:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800ad9e:	683b      	ldr	r3, [r7, #0]
 800ada0:	2b00      	cmp	r3, #0
 800ada2:	d009      	beq.n	800adb8 <inc_lock+0xe0>
 800ada4:	4a12      	ldr	r2, [pc, #72]	; (800adf0 <inc_lock+0x118>)
 800ada6:	68fb      	ldr	r3, [r7, #12]
 800ada8:	011b      	lsls	r3, r3, #4
 800adaa:	4413      	add	r3, r2
 800adac:	330c      	adds	r3, #12
 800adae:	881b      	ldrh	r3, [r3, #0]
 800adb0:	2b00      	cmp	r3, #0
 800adb2:	d001      	beq.n	800adb8 <inc_lock+0xe0>
 800adb4:	2300      	movs	r3, #0
 800adb6:	e015      	b.n	800ade4 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800adb8:	683b      	ldr	r3, [r7, #0]
 800adba:	2b00      	cmp	r3, #0
 800adbc:	d108      	bne.n	800add0 <inc_lock+0xf8>
 800adbe:	4a0c      	ldr	r2, [pc, #48]	; (800adf0 <inc_lock+0x118>)
 800adc0:	68fb      	ldr	r3, [r7, #12]
 800adc2:	011b      	lsls	r3, r3, #4
 800adc4:	4413      	add	r3, r2
 800adc6:	330c      	adds	r3, #12
 800adc8:	881b      	ldrh	r3, [r3, #0]
 800adca:	3301      	adds	r3, #1
 800adcc:	b29a      	uxth	r2, r3
 800adce:	e001      	b.n	800add4 <inc_lock+0xfc>
 800add0:	f44f 7280 	mov.w	r2, #256	; 0x100
 800add4:	4906      	ldr	r1, [pc, #24]	; (800adf0 <inc_lock+0x118>)
 800add6:	68fb      	ldr	r3, [r7, #12]
 800add8:	011b      	lsls	r3, r3, #4
 800adda:	440b      	add	r3, r1
 800addc:	330c      	adds	r3, #12
 800adde:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800ade0:	68fb      	ldr	r3, [r7, #12]
 800ade2:	3301      	adds	r3, #1
}
 800ade4:	4618      	mov	r0, r3
 800ade6:	3714      	adds	r7, #20
 800ade8:	46bd      	mov	sp, r7
 800adea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adee:	4770      	bx	lr
 800adf0:	20016e84 	.word	0x20016e84

0800adf4 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800adf4:	b480      	push	{r7}
 800adf6:	b085      	sub	sp, #20
 800adf8:	af00      	add	r7, sp, #0
 800adfa:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800adfc:	687b      	ldr	r3, [r7, #4]
 800adfe:	3b01      	subs	r3, #1
 800ae00:	607b      	str	r3, [r7, #4]
 800ae02:	687b      	ldr	r3, [r7, #4]
 800ae04:	2b01      	cmp	r3, #1
 800ae06:	d825      	bhi.n	800ae54 <dec_lock+0x60>
		n = Files[i].ctr;
 800ae08:	4a17      	ldr	r2, [pc, #92]	; (800ae68 <dec_lock+0x74>)
 800ae0a:	687b      	ldr	r3, [r7, #4]
 800ae0c:	011b      	lsls	r3, r3, #4
 800ae0e:	4413      	add	r3, r2
 800ae10:	330c      	adds	r3, #12
 800ae12:	881b      	ldrh	r3, [r3, #0]
 800ae14:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800ae16:	89fb      	ldrh	r3, [r7, #14]
 800ae18:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ae1c:	d101      	bne.n	800ae22 <dec_lock+0x2e>
 800ae1e:	2300      	movs	r3, #0
 800ae20:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800ae22:	89fb      	ldrh	r3, [r7, #14]
 800ae24:	2b00      	cmp	r3, #0
 800ae26:	d002      	beq.n	800ae2e <dec_lock+0x3a>
 800ae28:	89fb      	ldrh	r3, [r7, #14]
 800ae2a:	3b01      	subs	r3, #1
 800ae2c:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800ae2e:	4a0e      	ldr	r2, [pc, #56]	; (800ae68 <dec_lock+0x74>)
 800ae30:	687b      	ldr	r3, [r7, #4]
 800ae32:	011b      	lsls	r3, r3, #4
 800ae34:	4413      	add	r3, r2
 800ae36:	330c      	adds	r3, #12
 800ae38:	89fa      	ldrh	r2, [r7, #14]
 800ae3a:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800ae3c:	89fb      	ldrh	r3, [r7, #14]
 800ae3e:	2b00      	cmp	r3, #0
 800ae40:	d105      	bne.n	800ae4e <dec_lock+0x5a>
 800ae42:	4a09      	ldr	r2, [pc, #36]	; (800ae68 <dec_lock+0x74>)
 800ae44:	687b      	ldr	r3, [r7, #4]
 800ae46:	011b      	lsls	r3, r3, #4
 800ae48:	4413      	add	r3, r2
 800ae4a:	2200      	movs	r2, #0
 800ae4c:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800ae4e:	2300      	movs	r3, #0
 800ae50:	737b      	strb	r3, [r7, #13]
 800ae52:	e001      	b.n	800ae58 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800ae54:	2302      	movs	r3, #2
 800ae56:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800ae58:	7b7b      	ldrb	r3, [r7, #13]
}
 800ae5a:	4618      	mov	r0, r3
 800ae5c:	3714      	adds	r7, #20
 800ae5e:	46bd      	mov	sp, r7
 800ae60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae64:	4770      	bx	lr
 800ae66:	bf00      	nop
 800ae68:	20016e84 	.word	0x20016e84

0800ae6c <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800ae6c:	b480      	push	{r7}
 800ae6e:	b085      	sub	sp, #20
 800ae70:	af00      	add	r7, sp, #0
 800ae72:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800ae74:	2300      	movs	r3, #0
 800ae76:	60fb      	str	r3, [r7, #12]
 800ae78:	e010      	b.n	800ae9c <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800ae7a:	4a0d      	ldr	r2, [pc, #52]	; (800aeb0 <clear_lock+0x44>)
 800ae7c:	68fb      	ldr	r3, [r7, #12]
 800ae7e:	011b      	lsls	r3, r3, #4
 800ae80:	4413      	add	r3, r2
 800ae82:	681b      	ldr	r3, [r3, #0]
 800ae84:	687a      	ldr	r2, [r7, #4]
 800ae86:	429a      	cmp	r2, r3
 800ae88:	d105      	bne.n	800ae96 <clear_lock+0x2a>
 800ae8a:	4a09      	ldr	r2, [pc, #36]	; (800aeb0 <clear_lock+0x44>)
 800ae8c:	68fb      	ldr	r3, [r7, #12]
 800ae8e:	011b      	lsls	r3, r3, #4
 800ae90:	4413      	add	r3, r2
 800ae92:	2200      	movs	r2, #0
 800ae94:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800ae96:	68fb      	ldr	r3, [r7, #12]
 800ae98:	3301      	adds	r3, #1
 800ae9a:	60fb      	str	r3, [r7, #12]
 800ae9c:	68fb      	ldr	r3, [r7, #12]
 800ae9e:	2b01      	cmp	r3, #1
 800aea0:	d9eb      	bls.n	800ae7a <clear_lock+0xe>
	}
}
 800aea2:	bf00      	nop
 800aea4:	bf00      	nop
 800aea6:	3714      	adds	r7, #20
 800aea8:	46bd      	mov	sp, r7
 800aeaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aeae:	4770      	bx	lr
 800aeb0:	20016e84 	.word	0x20016e84

0800aeb4 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800aeb4:	b580      	push	{r7, lr}
 800aeb6:	b086      	sub	sp, #24
 800aeb8:	af00      	add	r7, sp, #0
 800aeba:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800aebc:	2300      	movs	r3, #0
 800aebe:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800aec0:	687b      	ldr	r3, [r7, #4]
 800aec2:	78db      	ldrb	r3, [r3, #3]
 800aec4:	2b00      	cmp	r3, #0
 800aec6:	d034      	beq.n	800af32 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800aec8:	687b      	ldr	r3, [r7, #4]
 800aeca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800aecc:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800aece:	687b      	ldr	r3, [r7, #4]
 800aed0:	7858      	ldrb	r0, [r3, #1]
 800aed2:	687b      	ldr	r3, [r7, #4]
 800aed4:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800aed8:	2301      	movs	r3, #1
 800aeda:	697a      	ldr	r2, [r7, #20]
 800aedc:	f7ff fd40 	bl	800a960 <disk_write>
 800aee0:	4603      	mov	r3, r0
 800aee2:	2b00      	cmp	r3, #0
 800aee4:	d002      	beq.n	800aeec <sync_window+0x38>
			res = FR_DISK_ERR;
 800aee6:	2301      	movs	r3, #1
 800aee8:	73fb      	strb	r3, [r7, #15]
 800aeea:	e022      	b.n	800af32 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800aeec:	687b      	ldr	r3, [r7, #4]
 800aeee:	2200      	movs	r2, #0
 800aef0:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800aef2:	687b      	ldr	r3, [r7, #4]
 800aef4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aef6:	697a      	ldr	r2, [r7, #20]
 800aef8:	1ad2      	subs	r2, r2, r3
 800aefa:	687b      	ldr	r3, [r7, #4]
 800aefc:	6a1b      	ldr	r3, [r3, #32]
 800aefe:	429a      	cmp	r2, r3
 800af00:	d217      	bcs.n	800af32 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800af02:	687b      	ldr	r3, [r7, #4]
 800af04:	789b      	ldrb	r3, [r3, #2]
 800af06:	613b      	str	r3, [r7, #16]
 800af08:	e010      	b.n	800af2c <sync_window+0x78>
					wsect += fs->fsize;
 800af0a:	687b      	ldr	r3, [r7, #4]
 800af0c:	6a1b      	ldr	r3, [r3, #32]
 800af0e:	697a      	ldr	r2, [r7, #20]
 800af10:	4413      	add	r3, r2
 800af12:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800af14:	687b      	ldr	r3, [r7, #4]
 800af16:	7858      	ldrb	r0, [r3, #1]
 800af18:	687b      	ldr	r3, [r7, #4]
 800af1a:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800af1e:	2301      	movs	r3, #1
 800af20:	697a      	ldr	r2, [r7, #20]
 800af22:	f7ff fd1d 	bl	800a960 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800af26:	693b      	ldr	r3, [r7, #16]
 800af28:	3b01      	subs	r3, #1
 800af2a:	613b      	str	r3, [r7, #16]
 800af2c:	693b      	ldr	r3, [r7, #16]
 800af2e:	2b01      	cmp	r3, #1
 800af30:	d8eb      	bhi.n	800af0a <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800af32:	7bfb      	ldrb	r3, [r7, #15]
}
 800af34:	4618      	mov	r0, r3
 800af36:	3718      	adds	r7, #24
 800af38:	46bd      	mov	sp, r7
 800af3a:	bd80      	pop	{r7, pc}

0800af3c <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800af3c:	b580      	push	{r7, lr}
 800af3e:	b084      	sub	sp, #16
 800af40:	af00      	add	r7, sp, #0
 800af42:	6078      	str	r0, [r7, #4]
 800af44:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800af46:	2300      	movs	r3, #0
 800af48:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800af4a:	687b      	ldr	r3, [r7, #4]
 800af4c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800af4e:	683a      	ldr	r2, [r7, #0]
 800af50:	429a      	cmp	r2, r3
 800af52:	d01b      	beq.n	800af8c <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800af54:	6878      	ldr	r0, [r7, #4]
 800af56:	f7ff ffad 	bl	800aeb4 <sync_window>
 800af5a:	4603      	mov	r3, r0
 800af5c:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800af5e:	7bfb      	ldrb	r3, [r7, #15]
 800af60:	2b00      	cmp	r3, #0
 800af62:	d113      	bne.n	800af8c <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800af64:	687b      	ldr	r3, [r7, #4]
 800af66:	7858      	ldrb	r0, [r3, #1]
 800af68:	687b      	ldr	r3, [r7, #4]
 800af6a:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800af6e:	2301      	movs	r3, #1
 800af70:	683a      	ldr	r2, [r7, #0]
 800af72:	f7ff fcd5 	bl	800a920 <disk_read>
 800af76:	4603      	mov	r3, r0
 800af78:	2b00      	cmp	r3, #0
 800af7a:	d004      	beq.n	800af86 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800af7c:	f04f 33ff 	mov.w	r3, #4294967295
 800af80:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800af82:	2301      	movs	r3, #1
 800af84:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800af86:	687b      	ldr	r3, [r7, #4]
 800af88:	683a      	ldr	r2, [r7, #0]
 800af8a:	635a      	str	r2, [r3, #52]	; 0x34
		}
	}
	return res;
 800af8c:	7bfb      	ldrb	r3, [r7, #15]
}
 800af8e:	4618      	mov	r0, r3
 800af90:	3710      	adds	r7, #16
 800af92:	46bd      	mov	sp, r7
 800af94:	bd80      	pop	{r7, pc}
	...

0800af98 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 800af98:	b580      	push	{r7, lr}
 800af9a:	b084      	sub	sp, #16
 800af9c:	af00      	add	r7, sp, #0
 800af9e:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800afa0:	6878      	ldr	r0, [r7, #4]
 800afa2:	f7ff ff87 	bl	800aeb4 <sync_window>
 800afa6:	4603      	mov	r3, r0
 800afa8:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800afaa:	7bfb      	ldrb	r3, [r7, #15]
 800afac:	2b00      	cmp	r3, #0
 800afae:	d159      	bne.n	800b064 <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800afb0:	687b      	ldr	r3, [r7, #4]
 800afb2:	781b      	ldrb	r3, [r3, #0]
 800afb4:	2b03      	cmp	r3, #3
 800afb6:	d149      	bne.n	800b04c <sync_fs+0xb4>
 800afb8:	687b      	ldr	r3, [r7, #4]
 800afba:	791b      	ldrb	r3, [r3, #4]
 800afbc:	2b01      	cmp	r3, #1
 800afbe:	d145      	bne.n	800b04c <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 800afc0:	687b      	ldr	r3, [r7, #4]
 800afc2:	f103 0038 	add.w	r0, r3, #56	; 0x38
 800afc6:	687b      	ldr	r3, [r7, #4]
 800afc8:	899b      	ldrh	r3, [r3, #12]
 800afca:	461a      	mov	r2, r3
 800afcc:	2100      	movs	r1, #0
 800afce:	f7ff fda8 	bl	800ab22 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800afd2:	687b      	ldr	r3, [r7, #4]
 800afd4:	3338      	adds	r3, #56	; 0x38
 800afd6:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800afda:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800afde:	4618      	mov	r0, r3
 800afe0:	f7ff fd37 	bl	800aa52 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800afe4:	687b      	ldr	r3, [r7, #4]
 800afe6:	3338      	adds	r3, #56	; 0x38
 800afe8:	4921      	ldr	r1, [pc, #132]	; (800b070 <sync_fs+0xd8>)
 800afea:	4618      	mov	r0, r3
 800afec:	f7ff fd4c 	bl	800aa88 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800aff0:	687b      	ldr	r3, [r7, #4]
 800aff2:	3338      	adds	r3, #56	; 0x38
 800aff4:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800aff8:	491e      	ldr	r1, [pc, #120]	; (800b074 <sync_fs+0xdc>)
 800affa:	4618      	mov	r0, r3
 800affc:	f7ff fd44 	bl	800aa88 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800b000:	687b      	ldr	r3, [r7, #4]
 800b002:	3338      	adds	r3, #56	; 0x38
 800b004:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 800b008:	687b      	ldr	r3, [r7, #4]
 800b00a:	699b      	ldr	r3, [r3, #24]
 800b00c:	4619      	mov	r1, r3
 800b00e:	4610      	mov	r0, r2
 800b010:	f7ff fd3a 	bl	800aa88 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800b014:	687b      	ldr	r3, [r7, #4]
 800b016:	3338      	adds	r3, #56	; 0x38
 800b018:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 800b01c:	687b      	ldr	r3, [r7, #4]
 800b01e:	695b      	ldr	r3, [r3, #20]
 800b020:	4619      	mov	r1, r3
 800b022:	4610      	mov	r0, r2
 800b024:	f7ff fd30 	bl	800aa88 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800b028:	687b      	ldr	r3, [r7, #4]
 800b02a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b02c:	1c5a      	adds	r2, r3, #1
 800b02e:	687b      	ldr	r3, [r7, #4]
 800b030:	635a      	str	r2, [r3, #52]	; 0x34
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800b032:	687b      	ldr	r3, [r7, #4]
 800b034:	7858      	ldrb	r0, [r3, #1]
 800b036:	687b      	ldr	r3, [r7, #4]
 800b038:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800b03c:	687b      	ldr	r3, [r7, #4]
 800b03e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b040:	2301      	movs	r3, #1
 800b042:	f7ff fc8d 	bl	800a960 <disk_write>
			fs->fsi_flag = 0;
 800b046:	687b      	ldr	r3, [r7, #4]
 800b048:	2200      	movs	r2, #0
 800b04a:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800b04c:	687b      	ldr	r3, [r7, #4]
 800b04e:	785b      	ldrb	r3, [r3, #1]
 800b050:	2200      	movs	r2, #0
 800b052:	2100      	movs	r1, #0
 800b054:	4618      	mov	r0, r3
 800b056:	f7ff fca3 	bl	800a9a0 <disk_ioctl>
 800b05a:	4603      	mov	r3, r0
 800b05c:	2b00      	cmp	r3, #0
 800b05e:	d001      	beq.n	800b064 <sync_fs+0xcc>
 800b060:	2301      	movs	r3, #1
 800b062:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800b064:	7bfb      	ldrb	r3, [r7, #15]
}
 800b066:	4618      	mov	r0, r3
 800b068:	3710      	adds	r7, #16
 800b06a:	46bd      	mov	sp, r7
 800b06c:	bd80      	pop	{r7, pc}
 800b06e:	bf00      	nop
 800b070:	41615252 	.word	0x41615252
 800b074:	61417272 	.word	0x61417272

0800b078 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800b078:	b480      	push	{r7}
 800b07a:	b083      	sub	sp, #12
 800b07c:	af00      	add	r7, sp, #0
 800b07e:	6078      	str	r0, [r7, #4]
 800b080:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800b082:	683b      	ldr	r3, [r7, #0]
 800b084:	3b02      	subs	r3, #2
 800b086:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800b088:	687b      	ldr	r3, [r7, #4]
 800b08a:	69db      	ldr	r3, [r3, #28]
 800b08c:	3b02      	subs	r3, #2
 800b08e:	683a      	ldr	r2, [r7, #0]
 800b090:	429a      	cmp	r2, r3
 800b092:	d301      	bcc.n	800b098 <clust2sect+0x20>
 800b094:	2300      	movs	r3, #0
 800b096:	e008      	b.n	800b0aa <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800b098:	687b      	ldr	r3, [r7, #4]
 800b09a:	895b      	ldrh	r3, [r3, #10]
 800b09c:	461a      	mov	r2, r3
 800b09e:	683b      	ldr	r3, [r7, #0]
 800b0a0:	fb03 f202 	mul.w	r2, r3, r2
 800b0a4:	687b      	ldr	r3, [r7, #4]
 800b0a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b0a8:	4413      	add	r3, r2
}
 800b0aa:	4618      	mov	r0, r3
 800b0ac:	370c      	adds	r7, #12
 800b0ae:	46bd      	mov	sp, r7
 800b0b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0b4:	4770      	bx	lr

0800b0b6 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800b0b6:	b580      	push	{r7, lr}
 800b0b8:	b086      	sub	sp, #24
 800b0ba:	af00      	add	r7, sp, #0
 800b0bc:	6078      	str	r0, [r7, #4]
 800b0be:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800b0c0:	687b      	ldr	r3, [r7, #4]
 800b0c2:	681b      	ldr	r3, [r3, #0]
 800b0c4:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800b0c6:	683b      	ldr	r3, [r7, #0]
 800b0c8:	2b01      	cmp	r3, #1
 800b0ca:	d904      	bls.n	800b0d6 <get_fat+0x20>
 800b0cc:	693b      	ldr	r3, [r7, #16]
 800b0ce:	69db      	ldr	r3, [r3, #28]
 800b0d0:	683a      	ldr	r2, [r7, #0]
 800b0d2:	429a      	cmp	r2, r3
 800b0d4:	d302      	bcc.n	800b0dc <get_fat+0x26>
		val = 1;	/* Internal error */
 800b0d6:	2301      	movs	r3, #1
 800b0d8:	617b      	str	r3, [r7, #20]
 800b0da:	e0bb      	b.n	800b254 <get_fat+0x19e>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800b0dc:	f04f 33ff 	mov.w	r3, #4294967295
 800b0e0:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800b0e2:	693b      	ldr	r3, [r7, #16]
 800b0e4:	781b      	ldrb	r3, [r3, #0]
 800b0e6:	2b03      	cmp	r3, #3
 800b0e8:	f000 8083 	beq.w	800b1f2 <get_fat+0x13c>
 800b0ec:	2b03      	cmp	r3, #3
 800b0ee:	f300 80a7 	bgt.w	800b240 <get_fat+0x18a>
 800b0f2:	2b01      	cmp	r3, #1
 800b0f4:	d002      	beq.n	800b0fc <get_fat+0x46>
 800b0f6:	2b02      	cmp	r3, #2
 800b0f8:	d056      	beq.n	800b1a8 <get_fat+0xf2>
 800b0fa:	e0a1      	b.n	800b240 <get_fat+0x18a>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800b0fc:	683b      	ldr	r3, [r7, #0]
 800b0fe:	60fb      	str	r3, [r7, #12]
 800b100:	68fb      	ldr	r3, [r7, #12]
 800b102:	085b      	lsrs	r3, r3, #1
 800b104:	68fa      	ldr	r2, [r7, #12]
 800b106:	4413      	add	r3, r2
 800b108:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800b10a:	693b      	ldr	r3, [r7, #16]
 800b10c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800b10e:	693b      	ldr	r3, [r7, #16]
 800b110:	899b      	ldrh	r3, [r3, #12]
 800b112:	4619      	mov	r1, r3
 800b114:	68fb      	ldr	r3, [r7, #12]
 800b116:	fbb3 f3f1 	udiv	r3, r3, r1
 800b11a:	4413      	add	r3, r2
 800b11c:	4619      	mov	r1, r3
 800b11e:	6938      	ldr	r0, [r7, #16]
 800b120:	f7ff ff0c 	bl	800af3c <move_window>
 800b124:	4603      	mov	r3, r0
 800b126:	2b00      	cmp	r3, #0
 800b128:	f040 808d 	bne.w	800b246 <get_fat+0x190>
			wc = fs->win[bc++ % SS(fs)];
 800b12c:	68fb      	ldr	r3, [r7, #12]
 800b12e:	1c5a      	adds	r2, r3, #1
 800b130:	60fa      	str	r2, [r7, #12]
 800b132:	693a      	ldr	r2, [r7, #16]
 800b134:	8992      	ldrh	r2, [r2, #12]
 800b136:	fbb3 f1f2 	udiv	r1, r3, r2
 800b13a:	fb01 f202 	mul.w	r2, r1, r2
 800b13e:	1a9b      	subs	r3, r3, r2
 800b140:	693a      	ldr	r2, [r7, #16]
 800b142:	4413      	add	r3, r2
 800b144:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800b148:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800b14a:	693b      	ldr	r3, [r7, #16]
 800b14c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800b14e:	693b      	ldr	r3, [r7, #16]
 800b150:	899b      	ldrh	r3, [r3, #12]
 800b152:	4619      	mov	r1, r3
 800b154:	68fb      	ldr	r3, [r7, #12]
 800b156:	fbb3 f3f1 	udiv	r3, r3, r1
 800b15a:	4413      	add	r3, r2
 800b15c:	4619      	mov	r1, r3
 800b15e:	6938      	ldr	r0, [r7, #16]
 800b160:	f7ff feec 	bl	800af3c <move_window>
 800b164:	4603      	mov	r3, r0
 800b166:	2b00      	cmp	r3, #0
 800b168:	d16f      	bne.n	800b24a <get_fat+0x194>
			wc |= fs->win[bc % SS(fs)] << 8;
 800b16a:	693b      	ldr	r3, [r7, #16]
 800b16c:	899b      	ldrh	r3, [r3, #12]
 800b16e:	461a      	mov	r2, r3
 800b170:	68fb      	ldr	r3, [r7, #12]
 800b172:	fbb3 f1f2 	udiv	r1, r3, r2
 800b176:	fb01 f202 	mul.w	r2, r1, r2
 800b17a:	1a9b      	subs	r3, r3, r2
 800b17c:	693a      	ldr	r2, [r7, #16]
 800b17e:	4413      	add	r3, r2
 800b180:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800b184:	021b      	lsls	r3, r3, #8
 800b186:	461a      	mov	r2, r3
 800b188:	68bb      	ldr	r3, [r7, #8]
 800b18a:	4313      	orrs	r3, r2
 800b18c:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800b18e:	683b      	ldr	r3, [r7, #0]
 800b190:	f003 0301 	and.w	r3, r3, #1
 800b194:	2b00      	cmp	r3, #0
 800b196:	d002      	beq.n	800b19e <get_fat+0xe8>
 800b198:	68bb      	ldr	r3, [r7, #8]
 800b19a:	091b      	lsrs	r3, r3, #4
 800b19c:	e002      	b.n	800b1a4 <get_fat+0xee>
 800b19e:	68bb      	ldr	r3, [r7, #8]
 800b1a0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800b1a4:	617b      	str	r3, [r7, #20]
			break;
 800b1a6:	e055      	b.n	800b254 <get_fat+0x19e>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800b1a8:	693b      	ldr	r3, [r7, #16]
 800b1aa:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800b1ac:	693b      	ldr	r3, [r7, #16]
 800b1ae:	899b      	ldrh	r3, [r3, #12]
 800b1b0:	085b      	lsrs	r3, r3, #1
 800b1b2:	b29b      	uxth	r3, r3
 800b1b4:	4619      	mov	r1, r3
 800b1b6:	683b      	ldr	r3, [r7, #0]
 800b1b8:	fbb3 f3f1 	udiv	r3, r3, r1
 800b1bc:	4413      	add	r3, r2
 800b1be:	4619      	mov	r1, r3
 800b1c0:	6938      	ldr	r0, [r7, #16]
 800b1c2:	f7ff febb 	bl	800af3c <move_window>
 800b1c6:	4603      	mov	r3, r0
 800b1c8:	2b00      	cmp	r3, #0
 800b1ca:	d140      	bne.n	800b24e <get_fat+0x198>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800b1cc:	693b      	ldr	r3, [r7, #16]
 800b1ce:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800b1d2:	683b      	ldr	r3, [r7, #0]
 800b1d4:	005b      	lsls	r3, r3, #1
 800b1d6:	693a      	ldr	r2, [r7, #16]
 800b1d8:	8992      	ldrh	r2, [r2, #12]
 800b1da:	fbb3 f0f2 	udiv	r0, r3, r2
 800b1de:	fb00 f202 	mul.w	r2, r0, r2
 800b1e2:	1a9b      	subs	r3, r3, r2
 800b1e4:	440b      	add	r3, r1
 800b1e6:	4618      	mov	r0, r3
 800b1e8:	f7ff fbf8 	bl	800a9dc <ld_word>
 800b1ec:	4603      	mov	r3, r0
 800b1ee:	617b      	str	r3, [r7, #20]
			break;
 800b1f0:	e030      	b.n	800b254 <get_fat+0x19e>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800b1f2:	693b      	ldr	r3, [r7, #16]
 800b1f4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800b1f6:	693b      	ldr	r3, [r7, #16]
 800b1f8:	899b      	ldrh	r3, [r3, #12]
 800b1fa:	089b      	lsrs	r3, r3, #2
 800b1fc:	b29b      	uxth	r3, r3
 800b1fe:	4619      	mov	r1, r3
 800b200:	683b      	ldr	r3, [r7, #0]
 800b202:	fbb3 f3f1 	udiv	r3, r3, r1
 800b206:	4413      	add	r3, r2
 800b208:	4619      	mov	r1, r3
 800b20a:	6938      	ldr	r0, [r7, #16]
 800b20c:	f7ff fe96 	bl	800af3c <move_window>
 800b210:	4603      	mov	r3, r0
 800b212:	2b00      	cmp	r3, #0
 800b214:	d11d      	bne.n	800b252 <get_fat+0x19c>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800b216:	693b      	ldr	r3, [r7, #16]
 800b218:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800b21c:	683b      	ldr	r3, [r7, #0]
 800b21e:	009b      	lsls	r3, r3, #2
 800b220:	693a      	ldr	r2, [r7, #16]
 800b222:	8992      	ldrh	r2, [r2, #12]
 800b224:	fbb3 f0f2 	udiv	r0, r3, r2
 800b228:	fb00 f202 	mul.w	r2, r0, r2
 800b22c:	1a9b      	subs	r3, r3, r2
 800b22e:	440b      	add	r3, r1
 800b230:	4618      	mov	r0, r3
 800b232:	f7ff fbeb 	bl	800aa0c <ld_dword>
 800b236:	4603      	mov	r3, r0
 800b238:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800b23c:	617b      	str	r3, [r7, #20]
			break;
 800b23e:	e009      	b.n	800b254 <get_fat+0x19e>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800b240:	2301      	movs	r3, #1
 800b242:	617b      	str	r3, [r7, #20]
 800b244:	e006      	b.n	800b254 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800b246:	bf00      	nop
 800b248:	e004      	b.n	800b254 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800b24a:	bf00      	nop
 800b24c:	e002      	b.n	800b254 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800b24e:	bf00      	nop
 800b250:	e000      	b.n	800b254 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800b252:	bf00      	nop
		}
	}

	return val;
 800b254:	697b      	ldr	r3, [r7, #20]
}
 800b256:	4618      	mov	r0, r3
 800b258:	3718      	adds	r7, #24
 800b25a:	46bd      	mov	sp, r7
 800b25c:	bd80      	pop	{r7, pc}

0800b25e <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800b25e:	b590      	push	{r4, r7, lr}
 800b260:	b089      	sub	sp, #36	; 0x24
 800b262:	af00      	add	r7, sp, #0
 800b264:	60f8      	str	r0, [r7, #12]
 800b266:	60b9      	str	r1, [r7, #8]
 800b268:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800b26a:	2302      	movs	r3, #2
 800b26c:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800b26e:	68bb      	ldr	r3, [r7, #8]
 800b270:	2b01      	cmp	r3, #1
 800b272:	f240 8102 	bls.w	800b47a <put_fat+0x21c>
 800b276:	68fb      	ldr	r3, [r7, #12]
 800b278:	69db      	ldr	r3, [r3, #28]
 800b27a:	68ba      	ldr	r2, [r7, #8]
 800b27c:	429a      	cmp	r2, r3
 800b27e:	f080 80fc 	bcs.w	800b47a <put_fat+0x21c>
		switch (fs->fs_type) {
 800b282:	68fb      	ldr	r3, [r7, #12]
 800b284:	781b      	ldrb	r3, [r3, #0]
 800b286:	2b03      	cmp	r3, #3
 800b288:	f000 80b6 	beq.w	800b3f8 <put_fat+0x19a>
 800b28c:	2b03      	cmp	r3, #3
 800b28e:	f300 80fd 	bgt.w	800b48c <put_fat+0x22e>
 800b292:	2b01      	cmp	r3, #1
 800b294:	d003      	beq.n	800b29e <put_fat+0x40>
 800b296:	2b02      	cmp	r3, #2
 800b298:	f000 8083 	beq.w	800b3a2 <put_fat+0x144>
 800b29c:	e0f6      	b.n	800b48c <put_fat+0x22e>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800b29e:	68bb      	ldr	r3, [r7, #8]
 800b2a0:	61bb      	str	r3, [r7, #24]
 800b2a2:	69bb      	ldr	r3, [r7, #24]
 800b2a4:	085b      	lsrs	r3, r3, #1
 800b2a6:	69ba      	ldr	r2, [r7, #24]
 800b2a8:	4413      	add	r3, r2
 800b2aa:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800b2ac:	68fb      	ldr	r3, [r7, #12]
 800b2ae:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800b2b0:	68fb      	ldr	r3, [r7, #12]
 800b2b2:	899b      	ldrh	r3, [r3, #12]
 800b2b4:	4619      	mov	r1, r3
 800b2b6:	69bb      	ldr	r3, [r7, #24]
 800b2b8:	fbb3 f3f1 	udiv	r3, r3, r1
 800b2bc:	4413      	add	r3, r2
 800b2be:	4619      	mov	r1, r3
 800b2c0:	68f8      	ldr	r0, [r7, #12]
 800b2c2:	f7ff fe3b 	bl	800af3c <move_window>
 800b2c6:	4603      	mov	r3, r0
 800b2c8:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800b2ca:	7ffb      	ldrb	r3, [r7, #31]
 800b2cc:	2b00      	cmp	r3, #0
 800b2ce:	f040 80d6 	bne.w	800b47e <put_fat+0x220>
			p = fs->win + bc++ % SS(fs);
 800b2d2:	68fb      	ldr	r3, [r7, #12]
 800b2d4:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800b2d8:	69bb      	ldr	r3, [r7, #24]
 800b2da:	1c5a      	adds	r2, r3, #1
 800b2dc:	61ba      	str	r2, [r7, #24]
 800b2de:	68fa      	ldr	r2, [r7, #12]
 800b2e0:	8992      	ldrh	r2, [r2, #12]
 800b2e2:	fbb3 f0f2 	udiv	r0, r3, r2
 800b2e6:	fb00 f202 	mul.w	r2, r0, r2
 800b2ea:	1a9b      	subs	r3, r3, r2
 800b2ec:	440b      	add	r3, r1
 800b2ee:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800b2f0:	68bb      	ldr	r3, [r7, #8]
 800b2f2:	f003 0301 	and.w	r3, r3, #1
 800b2f6:	2b00      	cmp	r3, #0
 800b2f8:	d00d      	beq.n	800b316 <put_fat+0xb8>
 800b2fa:	697b      	ldr	r3, [r7, #20]
 800b2fc:	781b      	ldrb	r3, [r3, #0]
 800b2fe:	b25b      	sxtb	r3, r3
 800b300:	f003 030f 	and.w	r3, r3, #15
 800b304:	b25a      	sxtb	r2, r3
 800b306:	687b      	ldr	r3, [r7, #4]
 800b308:	b2db      	uxtb	r3, r3
 800b30a:	011b      	lsls	r3, r3, #4
 800b30c:	b25b      	sxtb	r3, r3
 800b30e:	4313      	orrs	r3, r2
 800b310:	b25b      	sxtb	r3, r3
 800b312:	b2db      	uxtb	r3, r3
 800b314:	e001      	b.n	800b31a <put_fat+0xbc>
 800b316:	687b      	ldr	r3, [r7, #4]
 800b318:	b2db      	uxtb	r3, r3
 800b31a:	697a      	ldr	r2, [r7, #20]
 800b31c:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800b31e:	68fb      	ldr	r3, [r7, #12]
 800b320:	2201      	movs	r2, #1
 800b322:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800b324:	68fb      	ldr	r3, [r7, #12]
 800b326:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800b328:	68fb      	ldr	r3, [r7, #12]
 800b32a:	899b      	ldrh	r3, [r3, #12]
 800b32c:	4619      	mov	r1, r3
 800b32e:	69bb      	ldr	r3, [r7, #24]
 800b330:	fbb3 f3f1 	udiv	r3, r3, r1
 800b334:	4413      	add	r3, r2
 800b336:	4619      	mov	r1, r3
 800b338:	68f8      	ldr	r0, [r7, #12]
 800b33a:	f7ff fdff 	bl	800af3c <move_window>
 800b33e:	4603      	mov	r3, r0
 800b340:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800b342:	7ffb      	ldrb	r3, [r7, #31]
 800b344:	2b00      	cmp	r3, #0
 800b346:	f040 809c 	bne.w	800b482 <put_fat+0x224>
			p = fs->win + bc % SS(fs);
 800b34a:	68fb      	ldr	r3, [r7, #12]
 800b34c:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800b350:	68fb      	ldr	r3, [r7, #12]
 800b352:	899b      	ldrh	r3, [r3, #12]
 800b354:	461a      	mov	r2, r3
 800b356:	69bb      	ldr	r3, [r7, #24]
 800b358:	fbb3 f0f2 	udiv	r0, r3, r2
 800b35c:	fb00 f202 	mul.w	r2, r0, r2
 800b360:	1a9b      	subs	r3, r3, r2
 800b362:	440b      	add	r3, r1
 800b364:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800b366:	68bb      	ldr	r3, [r7, #8]
 800b368:	f003 0301 	and.w	r3, r3, #1
 800b36c:	2b00      	cmp	r3, #0
 800b36e:	d003      	beq.n	800b378 <put_fat+0x11a>
 800b370:	687b      	ldr	r3, [r7, #4]
 800b372:	091b      	lsrs	r3, r3, #4
 800b374:	b2db      	uxtb	r3, r3
 800b376:	e00e      	b.n	800b396 <put_fat+0x138>
 800b378:	697b      	ldr	r3, [r7, #20]
 800b37a:	781b      	ldrb	r3, [r3, #0]
 800b37c:	b25b      	sxtb	r3, r3
 800b37e:	f023 030f 	bic.w	r3, r3, #15
 800b382:	b25a      	sxtb	r2, r3
 800b384:	687b      	ldr	r3, [r7, #4]
 800b386:	0a1b      	lsrs	r3, r3, #8
 800b388:	b25b      	sxtb	r3, r3
 800b38a:	f003 030f 	and.w	r3, r3, #15
 800b38e:	b25b      	sxtb	r3, r3
 800b390:	4313      	orrs	r3, r2
 800b392:	b25b      	sxtb	r3, r3
 800b394:	b2db      	uxtb	r3, r3
 800b396:	697a      	ldr	r2, [r7, #20]
 800b398:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800b39a:	68fb      	ldr	r3, [r7, #12]
 800b39c:	2201      	movs	r2, #1
 800b39e:	70da      	strb	r2, [r3, #3]
			break;
 800b3a0:	e074      	b.n	800b48c <put_fat+0x22e>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800b3a2:	68fb      	ldr	r3, [r7, #12]
 800b3a4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800b3a6:	68fb      	ldr	r3, [r7, #12]
 800b3a8:	899b      	ldrh	r3, [r3, #12]
 800b3aa:	085b      	lsrs	r3, r3, #1
 800b3ac:	b29b      	uxth	r3, r3
 800b3ae:	4619      	mov	r1, r3
 800b3b0:	68bb      	ldr	r3, [r7, #8]
 800b3b2:	fbb3 f3f1 	udiv	r3, r3, r1
 800b3b6:	4413      	add	r3, r2
 800b3b8:	4619      	mov	r1, r3
 800b3ba:	68f8      	ldr	r0, [r7, #12]
 800b3bc:	f7ff fdbe 	bl	800af3c <move_window>
 800b3c0:	4603      	mov	r3, r0
 800b3c2:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800b3c4:	7ffb      	ldrb	r3, [r7, #31]
 800b3c6:	2b00      	cmp	r3, #0
 800b3c8:	d15d      	bne.n	800b486 <put_fat+0x228>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800b3ca:	68fb      	ldr	r3, [r7, #12]
 800b3cc:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800b3d0:	68bb      	ldr	r3, [r7, #8]
 800b3d2:	005b      	lsls	r3, r3, #1
 800b3d4:	68fa      	ldr	r2, [r7, #12]
 800b3d6:	8992      	ldrh	r2, [r2, #12]
 800b3d8:	fbb3 f0f2 	udiv	r0, r3, r2
 800b3dc:	fb00 f202 	mul.w	r2, r0, r2
 800b3e0:	1a9b      	subs	r3, r3, r2
 800b3e2:	440b      	add	r3, r1
 800b3e4:	687a      	ldr	r2, [r7, #4]
 800b3e6:	b292      	uxth	r2, r2
 800b3e8:	4611      	mov	r1, r2
 800b3ea:	4618      	mov	r0, r3
 800b3ec:	f7ff fb31 	bl	800aa52 <st_word>
			fs->wflag = 1;
 800b3f0:	68fb      	ldr	r3, [r7, #12]
 800b3f2:	2201      	movs	r2, #1
 800b3f4:	70da      	strb	r2, [r3, #3]
			break;
 800b3f6:	e049      	b.n	800b48c <put_fat+0x22e>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800b3f8:	68fb      	ldr	r3, [r7, #12]
 800b3fa:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800b3fc:	68fb      	ldr	r3, [r7, #12]
 800b3fe:	899b      	ldrh	r3, [r3, #12]
 800b400:	089b      	lsrs	r3, r3, #2
 800b402:	b29b      	uxth	r3, r3
 800b404:	4619      	mov	r1, r3
 800b406:	68bb      	ldr	r3, [r7, #8]
 800b408:	fbb3 f3f1 	udiv	r3, r3, r1
 800b40c:	4413      	add	r3, r2
 800b40e:	4619      	mov	r1, r3
 800b410:	68f8      	ldr	r0, [r7, #12]
 800b412:	f7ff fd93 	bl	800af3c <move_window>
 800b416:	4603      	mov	r3, r0
 800b418:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800b41a:	7ffb      	ldrb	r3, [r7, #31]
 800b41c:	2b00      	cmp	r3, #0
 800b41e:	d134      	bne.n	800b48a <put_fat+0x22c>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800b420:	687b      	ldr	r3, [r7, #4]
 800b422:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 800b426:	68fb      	ldr	r3, [r7, #12]
 800b428:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800b42c:	68bb      	ldr	r3, [r7, #8]
 800b42e:	009b      	lsls	r3, r3, #2
 800b430:	68fa      	ldr	r2, [r7, #12]
 800b432:	8992      	ldrh	r2, [r2, #12]
 800b434:	fbb3 f0f2 	udiv	r0, r3, r2
 800b438:	fb00 f202 	mul.w	r2, r0, r2
 800b43c:	1a9b      	subs	r3, r3, r2
 800b43e:	440b      	add	r3, r1
 800b440:	4618      	mov	r0, r3
 800b442:	f7ff fae3 	bl	800aa0c <ld_dword>
 800b446:	4603      	mov	r3, r0
 800b448:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800b44c:	4323      	orrs	r3, r4
 800b44e:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800b450:	68fb      	ldr	r3, [r7, #12]
 800b452:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800b456:	68bb      	ldr	r3, [r7, #8]
 800b458:	009b      	lsls	r3, r3, #2
 800b45a:	68fa      	ldr	r2, [r7, #12]
 800b45c:	8992      	ldrh	r2, [r2, #12]
 800b45e:	fbb3 f0f2 	udiv	r0, r3, r2
 800b462:	fb00 f202 	mul.w	r2, r0, r2
 800b466:	1a9b      	subs	r3, r3, r2
 800b468:	440b      	add	r3, r1
 800b46a:	6879      	ldr	r1, [r7, #4]
 800b46c:	4618      	mov	r0, r3
 800b46e:	f7ff fb0b 	bl	800aa88 <st_dword>
			fs->wflag = 1;
 800b472:	68fb      	ldr	r3, [r7, #12]
 800b474:	2201      	movs	r2, #1
 800b476:	70da      	strb	r2, [r3, #3]
			break;
 800b478:	e008      	b.n	800b48c <put_fat+0x22e>
		}
	}
 800b47a:	bf00      	nop
 800b47c:	e006      	b.n	800b48c <put_fat+0x22e>
			if (res != FR_OK) break;
 800b47e:	bf00      	nop
 800b480:	e004      	b.n	800b48c <put_fat+0x22e>
			if (res != FR_OK) break;
 800b482:	bf00      	nop
 800b484:	e002      	b.n	800b48c <put_fat+0x22e>
			if (res != FR_OK) break;
 800b486:	bf00      	nop
 800b488:	e000      	b.n	800b48c <put_fat+0x22e>
			if (res != FR_OK) break;
 800b48a:	bf00      	nop
	return res;
 800b48c:	7ffb      	ldrb	r3, [r7, #31]
}
 800b48e:	4618      	mov	r0, r3
 800b490:	3724      	adds	r7, #36	; 0x24
 800b492:	46bd      	mov	sp, r7
 800b494:	bd90      	pop	{r4, r7, pc}

0800b496 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800b496:	b580      	push	{r7, lr}
 800b498:	b088      	sub	sp, #32
 800b49a:	af00      	add	r7, sp, #0
 800b49c:	60f8      	str	r0, [r7, #12]
 800b49e:	60b9      	str	r1, [r7, #8]
 800b4a0:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800b4a2:	2300      	movs	r3, #0
 800b4a4:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800b4a6:	68fb      	ldr	r3, [r7, #12]
 800b4a8:	681b      	ldr	r3, [r3, #0]
 800b4aa:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800b4ac:	68bb      	ldr	r3, [r7, #8]
 800b4ae:	2b01      	cmp	r3, #1
 800b4b0:	d904      	bls.n	800b4bc <remove_chain+0x26>
 800b4b2:	69bb      	ldr	r3, [r7, #24]
 800b4b4:	69db      	ldr	r3, [r3, #28]
 800b4b6:	68ba      	ldr	r2, [r7, #8]
 800b4b8:	429a      	cmp	r2, r3
 800b4ba:	d301      	bcc.n	800b4c0 <remove_chain+0x2a>
 800b4bc:	2302      	movs	r3, #2
 800b4be:	e04b      	b.n	800b558 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800b4c0:	687b      	ldr	r3, [r7, #4]
 800b4c2:	2b00      	cmp	r3, #0
 800b4c4:	d00c      	beq.n	800b4e0 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800b4c6:	f04f 32ff 	mov.w	r2, #4294967295
 800b4ca:	6879      	ldr	r1, [r7, #4]
 800b4cc:	69b8      	ldr	r0, [r7, #24]
 800b4ce:	f7ff fec6 	bl	800b25e <put_fat>
 800b4d2:	4603      	mov	r3, r0
 800b4d4:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800b4d6:	7ffb      	ldrb	r3, [r7, #31]
 800b4d8:	2b00      	cmp	r3, #0
 800b4da:	d001      	beq.n	800b4e0 <remove_chain+0x4a>
 800b4dc:	7ffb      	ldrb	r3, [r7, #31]
 800b4de:	e03b      	b.n	800b558 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800b4e0:	68b9      	ldr	r1, [r7, #8]
 800b4e2:	68f8      	ldr	r0, [r7, #12]
 800b4e4:	f7ff fde7 	bl	800b0b6 <get_fat>
 800b4e8:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800b4ea:	697b      	ldr	r3, [r7, #20]
 800b4ec:	2b00      	cmp	r3, #0
 800b4ee:	d031      	beq.n	800b554 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800b4f0:	697b      	ldr	r3, [r7, #20]
 800b4f2:	2b01      	cmp	r3, #1
 800b4f4:	d101      	bne.n	800b4fa <remove_chain+0x64>
 800b4f6:	2302      	movs	r3, #2
 800b4f8:	e02e      	b.n	800b558 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800b4fa:	697b      	ldr	r3, [r7, #20]
 800b4fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b500:	d101      	bne.n	800b506 <remove_chain+0x70>
 800b502:	2301      	movs	r3, #1
 800b504:	e028      	b.n	800b558 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800b506:	2200      	movs	r2, #0
 800b508:	68b9      	ldr	r1, [r7, #8]
 800b50a:	69b8      	ldr	r0, [r7, #24]
 800b50c:	f7ff fea7 	bl	800b25e <put_fat>
 800b510:	4603      	mov	r3, r0
 800b512:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800b514:	7ffb      	ldrb	r3, [r7, #31]
 800b516:	2b00      	cmp	r3, #0
 800b518:	d001      	beq.n	800b51e <remove_chain+0x88>
 800b51a:	7ffb      	ldrb	r3, [r7, #31]
 800b51c:	e01c      	b.n	800b558 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800b51e:	69bb      	ldr	r3, [r7, #24]
 800b520:	699a      	ldr	r2, [r3, #24]
 800b522:	69bb      	ldr	r3, [r7, #24]
 800b524:	69db      	ldr	r3, [r3, #28]
 800b526:	3b02      	subs	r3, #2
 800b528:	429a      	cmp	r2, r3
 800b52a:	d20b      	bcs.n	800b544 <remove_chain+0xae>
			fs->free_clst++;
 800b52c:	69bb      	ldr	r3, [r7, #24]
 800b52e:	699b      	ldr	r3, [r3, #24]
 800b530:	1c5a      	adds	r2, r3, #1
 800b532:	69bb      	ldr	r3, [r7, #24]
 800b534:	619a      	str	r2, [r3, #24]
			fs->fsi_flag |= 1;
 800b536:	69bb      	ldr	r3, [r7, #24]
 800b538:	791b      	ldrb	r3, [r3, #4]
 800b53a:	f043 0301 	orr.w	r3, r3, #1
 800b53e:	b2da      	uxtb	r2, r3
 800b540:	69bb      	ldr	r3, [r7, #24]
 800b542:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800b544:	697b      	ldr	r3, [r7, #20]
 800b546:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800b548:	69bb      	ldr	r3, [r7, #24]
 800b54a:	69db      	ldr	r3, [r3, #28]
 800b54c:	68ba      	ldr	r2, [r7, #8]
 800b54e:	429a      	cmp	r2, r3
 800b550:	d3c6      	bcc.n	800b4e0 <remove_chain+0x4a>
 800b552:	e000      	b.n	800b556 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800b554:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800b556:	2300      	movs	r3, #0
}
 800b558:	4618      	mov	r0, r3
 800b55a:	3720      	adds	r7, #32
 800b55c:	46bd      	mov	sp, r7
 800b55e:	bd80      	pop	{r7, pc}

0800b560 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800b560:	b580      	push	{r7, lr}
 800b562:	b088      	sub	sp, #32
 800b564:	af00      	add	r7, sp, #0
 800b566:	6078      	str	r0, [r7, #4]
 800b568:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800b56a:	687b      	ldr	r3, [r7, #4]
 800b56c:	681b      	ldr	r3, [r3, #0]
 800b56e:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800b570:	683b      	ldr	r3, [r7, #0]
 800b572:	2b00      	cmp	r3, #0
 800b574:	d10d      	bne.n	800b592 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800b576:	693b      	ldr	r3, [r7, #16]
 800b578:	695b      	ldr	r3, [r3, #20]
 800b57a:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800b57c:	69bb      	ldr	r3, [r7, #24]
 800b57e:	2b00      	cmp	r3, #0
 800b580:	d004      	beq.n	800b58c <create_chain+0x2c>
 800b582:	693b      	ldr	r3, [r7, #16]
 800b584:	69db      	ldr	r3, [r3, #28]
 800b586:	69ba      	ldr	r2, [r7, #24]
 800b588:	429a      	cmp	r2, r3
 800b58a:	d31b      	bcc.n	800b5c4 <create_chain+0x64>
 800b58c:	2301      	movs	r3, #1
 800b58e:	61bb      	str	r3, [r7, #24]
 800b590:	e018      	b.n	800b5c4 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800b592:	6839      	ldr	r1, [r7, #0]
 800b594:	6878      	ldr	r0, [r7, #4]
 800b596:	f7ff fd8e 	bl	800b0b6 <get_fat>
 800b59a:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800b59c:	68fb      	ldr	r3, [r7, #12]
 800b59e:	2b01      	cmp	r3, #1
 800b5a0:	d801      	bhi.n	800b5a6 <create_chain+0x46>
 800b5a2:	2301      	movs	r3, #1
 800b5a4:	e070      	b.n	800b688 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800b5a6:	68fb      	ldr	r3, [r7, #12]
 800b5a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b5ac:	d101      	bne.n	800b5b2 <create_chain+0x52>
 800b5ae:	68fb      	ldr	r3, [r7, #12]
 800b5b0:	e06a      	b.n	800b688 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800b5b2:	693b      	ldr	r3, [r7, #16]
 800b5b4:	69db      	ldr	r3, [r3, #28]
 800b5b6:	68fa      	ldr	r2, [r7, #12]
 800b5b8:	429a      	cmp	r2, r3
 800b5ba:	d201      	bcs.n	800b5c0 <create_chain+0x60>
 800b5bc:	68fb      	ldr	r3, [r7, #12]
 800b5be:	e063      	b.n	800b688 <create_chain+0x128>
		scl = clst;
 800b5c0:	683b      	ldr	r3, [r7, #0]
 800b5c2:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800b5c4:	69bb      	ldr	r3, [r7, #24]
 800b5c6:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800b5c8:	69fb      	ldr	r3, [r7, #28]
 800b5ca:	3301      	adds	r3, #1
 800b5cc:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800b5ce:	693b      	ldr	r3, [r7, #16]
 800b5d0:	69db      	ldr	r3, [r3, #28]
 800b5d2:	69fa      	ldr	r2, [r7, #28]
 800b5d4:	429a      	cmp	r2, r3
 800b5d6:	d307      	bcc.n	800b5e8 <create_chain+0x88>
				ncl = 2;
 800b5d8:	2302      	movs	r3, #2
 800b5da:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800b5dc:	69fa      	ldr	r2, [r7, #28]
 800b5de:	69bb      	ldr	r3, [r7, #24]
 800b5e0:	429a      	cmp	r2, r3
 800b5e2:	d901      	bls.n	800b5e8 <create_chain+0x88>
 800b5e4:	2300      	movs	r3, #0
 800b5e6:	e04f      	b.n	800b688 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800b5e8:	69f9      	ldr	r1, [r7, #28]
 800b5ea:	6878      	ldr	r0, [r7, #4]
 800b5ec:	f7ff fd63 	bl	800b0b6 <get_fat>
 800b5f0:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800b5f2:	68fb      	ldr	r3, [r7, #12]
 800b5f4:	2b00      	cmp	r3, #0
 800b5f6:	d00e      	beq.n	800b616 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800b5f8:	68fb      	ldr	r3, [r7, #12]
 800b5fa:	2b01      	cmp	r3, #1
 800b5fc:	d003      	beq.n	800b606 <create_chain+0xa6>
 800b5fe:	68fb      	ldr	r3, [r7, #12]
 800b600:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b604:	d101      	bne.n	800b60a <create_chain+0xaa>
 800b606:	68fb      	ldr	r3, [r7, #12]
 800b608:	e03e      	b.n	800b688 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800b60a:	69fa      	ldr	r2, [r7, #28]
 800b60c:	69bb      	ldr	r3, [r7, #24]
 800b60e:	429a      	cmp	r2, r3
 800b610:	d1da      	bne.n	800b5c8 <create_chain+0x68>
 800b612:	2300      	movs	r3, #0
 800b614:	e038      	b.n	800b688 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800b616:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800b618:	f04f 32ff 	mov.w	r2, #4294967295
 800b61c:	69f9      	ldr	r1, [r7, #28]
 800b61e:	6938      	ldr	r0, [r7, #16]
 800b620:	f7ff fe1d 	bl	800b25e <put_fat>
 800b624:	4603      	mov	r3, r0
 800b626:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800b628:	7dfb      	ldrb	r3, [r7, #23]
 800b62a:	2b00      	cmp	r3, #0
 800b62c:	d109      	bne.n	800b642 <create_chain+0xe2>
 800b62e:	683b      	ldr	r3, [r7, #0]
 800b630:	2b00      	cmp	r3, #0
 800b632:	d006      	beq.n	800b642 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800b634:	69fa      	ldr	r2, [r7, #28]
 800b636:	6839      	ldr	r1, [r7, #0]
 800b638:	6938      	ldr	r0, [r7, #16]
 800b63a:	f7ff fe10 	bl	800b25e <put_fat>
 800b63e:	4603      	mov	r3, r0
 800b640:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800b642:	7dfb      	ldrb	r3, [r7, #23]
 800b644:	2b00      	cmp	r3, #0
 800b646:	d116      	bne.n	800b676 <create_chain+0x116>
		fs->last_clst = ncl;
 800b648:	693b      	ldr	r3, [r7, #16]
 800b64a:	69fa      	ldr	r2, [r7, #28]
 800b64c:	615a      	str	r2, [r3, #20]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800b64e:	693b      	ldr	r3, [r7, #16]
 800b650:	699a      	ldr	r2, [r3, #24]
 800b652:	693b      	ldr	r3, [r7, #16]
 800b654:	69db      	ldr	r3, [r3, #28]
 800b656:	3b02      	subs	r3, #2
 800b658:	429a      	cmp	r2, r3
 800b65a:	d804      	bhi.n	800b666 <create_chain+0x106>
 800b65c:	693b      	ldr	r3, [r7, #16]
 800b65e:	699b      	ldr	r3, [r3, #24]
 800b660:	1e5a      	subs	r2, r3, #1
 800b662:	693b      	ldr	r3, [r7, #16]
 800b664:	619a      	str	r2, [r3, #24]
		fs->fsi_flag |= 1;
 800b666:	693b      	ldr	r3, [r7, #16]
 800b668:	791b      	ldrb	r3, [r3, #4]
 800b66a:	f043 0301 	orr.w	r3, r3, #1
 800b66e:	b2da      	uxtb	r2, r3
 800b670:	693b      	ldr	r3, [r7, #16]
 800b672:	711a      	strb	r2, [r3, #4]
 800b674:	e007      	b.n	800b686 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800b676:	7dfb      	ldrb	r3, [r7, #23]
 800b678:	2b01      	cmp	r3, #1
 800b67a:	d102      	bne.n	800b682 <create_chain+0x122>
 800b67c:	f04f 33ff 	mov.w	r3, #4294967295
 800b680:	e000      	b.n	800b684 <create_chain+0x124>
 800b682:	2301      	movs	r3, #1
 800b684:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800b686:	69fb      	ldr	r3, [r7, #28]
}
 800b688:	4618      	mov	r0, r3
 800b68a:	3720      	adds	r7, #32
 800b68c:	46bd      	mov	sp, r7
 800b68e:	bd80      	pop	{r7, pc}

0800b690 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800b690:	b480      	push	{r7}
 800b692:	b087      	sub	sp, #28
 800b694:	af00      	add	r7, sp, #0
 800b696:	6078      	str	r0, [r7, #4]
 800b698:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800b69a:	687b      	ldr	r3, [r7, #4]
 800b69c:	681b      	ldr	r3, [r3, #0]
 800b69e:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800b6a0:	687b      	ldr	r3, [r7, #4]
 800b6a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b6a4:	3304      	adds	r3, #4
 800b6a6:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800b6a8:	68fb      	ldr	r3, [r7, #12]
 800b6aa:	899b      	ldrh	r3, [r3, #12]
 800b6ac:	461a      	mov	r2, r3
 800b6ae:	683b      	ldr	r3, [r7, #0]
 800b6b0:	fbb3 f3f2 	udiv	r3, r3, r2
 800b6b4:	68fa      	ldr	r2, [r7, #12]
 800b6b6:	8952      	ldrh	r2, [r2, #10]
 800b6b8:	fbb3 f3f2 	udiv	r3, r3, r2
 800b6bc:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800b6be:	693b      	ldr	r3, [r7, #16]
 800b6c0:	1d1a      	adds	r2, r3, #4
 800b6c2:	613a      	str	r2, [r7, #16]
 800b6c4:	681b      	ldr	r3, [r3, #0]
 800b6c6:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800b6c8:	68bb      	ldr	r3, [r7, #8]
 800b6ca:	2b00      	cmp	r3, #0
 800b6cc:	d101      	bne.n	800b6d2 <clmt_clust+0x42>
 800b6ce:	2300      	movs	r3, #0
 800b6d0:	e010      	b.n	800b6f4 <clmt_clust+0x64>
		if (cl < ncl) break;	/* In this fragment? */
 800b6d2:	697a      	ldr	r2, [r7, #20]
 800b6d4:	68bb      	ldr	r3, [r7, #8]
 800b6d6:	429a      	cmp	r2, r3
 800b6d8:	d307      	bcc.n	800b6ea <clmt_clust+0x5a>
		cl -= ncl; tbl++;		/* Next fragment */
 800b6da:	697a      	ldr	r2, [r7, #20]
 800b6dc:	68bb      	ldr	r3, [r7, #8]
 800b6de:	1ad3      	subs	r3, r2, r3
 800b6e0:	617b      	str	r3, [r7, #20]
 800b6e2:	693b      	ldr	r3, [r7, #16]
 800b6e4:	3304      	adds	r3, #4
 800b6e6:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800b6e8:	e7e9      	b.n	800b6be <clmt_clust+0x2e>
		if (cl < ncl) break;	/* In this fragment? */
 800b6ea:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800b6ec:	693b      	ldr	r3, [r7, #16]
 800b6ee:	681a      	ldr	r2, [r3, #0]
 800b6f0:	697b      	ldr	r3, [r7, #20]
 800b6f2:	4413      	add	r3, r2
}
 800b6f4:	4618      	mov	r0, r3
 800b6f6:	371c      	adds	r7, #28
 800b6f8:	46bd      	mov	sp, r7
 800b6fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6fe:	4770      	bx	lr

0800b700 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800b700:	b580      	push	{r7, lr}
 800b702:	b086      	sub	sp, #24
 800b704:	af00      	add	r7, sp, #0
 800b706:	6078      	str	r0, [r7, #4]
 800b708:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800b70a:	687b      	ldr	r3, [r7, #4]
 800b70c:	681b      	ldr	r3, [r3, #0]
 800b70e:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800b710:	683b      	ldr	r3, [r7, #0]
 800b712:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800b716:	d204      	bcs.n	800b722 <dir_sdi+0x22>
 800b718:	683b      	ldr	r3, [r7, #0]
 800b71a:	f003 031f 	and.w	r3, r3, #31
 800b71e:	2b00      	cmp	r3, #0
 800b720:	d001      	beq.n	800b726 <dir_sdi+0x26>
		return FR_INT_ERR;
 800b722:	2302      	movs	r3, #2
 800b724:	e071      	b.n	800b80a <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 800b726:	687b      	ldr	r3, [r7, #4]
 800b728:	683a      	ldr	r2, [r7, #0]
 800b72a:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800b72c:	687b      	ldr	r3, [r7, #4]
 800b72e:	689b      	ldr	r3, [r3, #8]
 800b730:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800b732:	697b      	ldr	r3, [r7, #20]
 800b734:	2b00      	cmp	r3, #0
 800b736:	d106      	bne.n	800b746 <dir_sdi+0x46>
 800b738:	693b      	ldr	r3, [r7, #16]
 800b73a:	781b      	ldrb	r3, [r3, #0]
 800b73c:	2b02      	cmp	r3, #2
 800b73e:	d902      	bls.n	800b746 <dir_sdi+0x46>
		clst = fs->dirbase;
 800b740:	693b      	ldr	r3, [r7, #16]
 800b742:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b744:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800b746:	697b      	ldr	r3, [r7, #20]
 800b748:	2b00      	cmp	r3, #0
 800b74a:	d10c      	bne.n	800b766 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800b74c:	683b      	ldr	r3, [r7, #0]
 800b74e:	095b      	lsrs	r3, r3, #5
 800b750:	693a      	ldr	r2, [r7, #16]
 800b752:	8912      	ldrh	r2, [r2, #8]
 800b754:	4293      	cmp	r3, r2
 800b756:	d301      	bcc.n	800b75c <dir_sdi+0x5c>
 800b758:	2302      	movs	r3, #2
 800b75a:	e056      	b.n	800b80a <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 800b75c:	693b      	ldr	r3, [r7, #16]
 800b75e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b760:	687b      	ldr	r3, [r7, #4]
 800b762:	61da      	str	r2, [r3, #28]
 800b764:	e02d      	b.n	800b7c2 <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800b766:	693b      	ldr	r3, [r7, #16]
 800b768:	895b      	ldrh	r3, [r3, #10]
 800b76a:	461a      	mov	r2, r3
 800b76c:	693b      	ldr	r3, [r7, #16]
 800b76e:	899b      	ldrh	r3, [r3, #12]
 800b770:	fb02 f303 	mul.w	r3, r2, r3
 800b774:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800b776:	e019      	b.n	800b7ac <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800b778:	687b      	ldr	r3, [r7, #4]
 800b77a:	6979      	ldr	r1, [r7, #20]
 800b77c:	4618      	mov	r0, r3
 800b77e:	f7ff fc9a 	bl	800b0b6 <get_fat>
 800b782:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800b784:	697b      	ldr	r3, [r7, #20]
 800b786:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b78a:	d101      	bne.n	800b790 <dir_sdi+0x90>
 800b78c:	2301      	movs	r3, #1
 800b78e:	e03c      	b.n	800b80a <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800b790:	697b      	ldr	r3, [r7, #20]
 800b792:	2b01      	cmp	r3, #1
 800b794:	d904      	bls.n	800b7a0 <dir_sdi+0xa0>
 800b796:	693b      	ldr	r3, [r7, #16]
 800b798:	69db      	ldr	r3, [r3, #28]
 800b79a:	697a      	ldr	r2, [r7, #20]
 800b79c:	429a      	cmp	r2, r3
 800b79e:	d301      	bcc.n	800b7a4 <dir_sdi+0xa4>
 800b7a0:	2302      	movs	r3, #2
 800b7a2:	e032      	b.n	800b80a <dir_sdi+0x10a>
			ofs -= csz;
 800b7a4:	683a      	ldr	r2, [r7, #0]
 800b7a6:	68fb      	ldr	r3, [r7, #12]
 800b7a8:	1ad3      	subs	r3, r2, r3
 800b7aa:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800b7ac:	683a      	ldr	r2, [r7, #0]
 800b7ae:	68fb      	ldr	r3, [r7, #12]
 800b7b0:	429a      	cmp	r2, r3
 800b7b2:	d2e1      	bcs.n	800b778 <dir_sdi+0x78>
		}
		dp->sect = clust2sect(fs, clst);
 800b7b4:	6979      	ldr	r1, [r7, #20]
 800b7b6:	6938      	ldr	r0, [r7, #16]
 800b7b8:	f7ff fc5e 	bl	800b078 <clust2sect>
 800b7bc:	4602      	mov	r2, r0
 800b7be:	687b      	ldr	r3, [r7, #4]
 800b7c0:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800b7c2:	687b      	ldr	r3, [r7, #4]
 800b7c4:	697a      	ldr	r2, [r7, #20]
 800b7c6:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 800b7c8:	687b      	ldr	r3, [r7, #4]
 800b7ca:	69db      	ldr	r3, [r3, #28]
 800b7cc:	2b00      	cmp	r3, #0
 800b7ce:	d101      	bne.n	800b7d4 <dir_sdi+0xd4>
 800b7d0:	2302      	movs	r3, #2
 800b7d2:	e01a      	b.n	800b80a <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800b7d4:	687b      	ldr	r3, [r7, #4]
 800b7d6:	69da      	ldr	r2, [r3, #28]
 800b7d8:	693b      	ldr	r3, [r7, #16]
 800b7da:	899b      	ldrh	r3, [r3, #12]
 800b7dc:	4619      	mov	r1, r3
 800b7de:	683b      	ldr	r3, [r7, #0]
 800b7e0:	fbb3 f3f1 	udiv	r3, r3, r1
 800b7e4:	441a      	add	r2, r3
 800b7e6:	687b      	ldr	r3, [r7, #4]
 800b7e8:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800b7ea:	693b      	ldr	r3, [r7, #16]
 800b7ec:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800b7f0:	693b      	ldr	r3, [r7, #16]
 800b7f2:	899b      	ldrh	r3, [r3, #12]
 800b7f4:	461a      	mov	r2, r3
 800b7f6:	683b      	ldr	r3, [r7, #0]
 800b7f8:	fbb3 f0f2 	udiv	r0, r3, r2
 800b7fc:	fb00 f202 	mul.w	r2, r0, r2
 800b800:	1a9b      	subs	r3, r3, r2
 800b802:	18ca      	adds	r2, r1, r3
 800b804:	687b      	ldr	r3, [r7, #4]
 800b806:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800b808:	2300      	movs	r3, #0
}
 800b80a:	4618      	mov	r0, r3
 800b80c:	3718      	adds	r7, #24
 800b80e:	46bd      	mov	sp, r7
 800b810:	bd80      	pop	{r7, pc}

0800b812 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800b812:	b580      	push	{r7, lr}
 800b814:	b086      	sub	sp, #24
 800b816:	af00      	add	r7, sp, #0
 800b818:	6078      	str	r0, [r7, #4]
 800b81a:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800b81c:	687b      	ldr	r3, [r7, #4]
 800b81e:	681b      	ldr	r3, [r3, #0]
 800b820:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800b822:	687b      	ldr	r3, [r7, #4]
 800b824:	695b      	ldr	r3, [r3, #20]
 800b826:	3320      	adds	r3, #32
 800b828:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800b82a:	687b      	ldr	r3, [r7, #4]
 800b82c:	69db      	ldr	r3, [r3, #28]
 800b82e:	2b00      	cmp	r3, #0
 800b830:	d003      	beq.n	800b83a <dir_next+0x28>
 800b832:	68bb      	ldr	r3, [r7, #8]
 800b834:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800b838:	d301      	bcc.n	800b83e <dir_next+0x2c>
 800b83a:	2304      	movs	r3, #4
 800b83c:	e0bb      	b.n	800b9b6 <dir_next+0x1a4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800b83e:	68fb      	ldr	r3, [r7, #12]
 800b840:	899b      	ldrh	r3, [r3, #12]
 800b842:	461a      	mov	r2, r3
 800b844:	68bb      	ldr	r3, [r7, #8]
 800b846:	fbb3 f1f2 	udiv	r1, r3, r2
 800b84a:	fb01 f202 	mul.w	r2, r1, r2
 800b84e:	1a9b      	subs	r3, r3, r2
 800b850:	2b00      	cmp	r3, #0
 800b852:	f040 809d 	bne.w	800b990 <dir_next+0x17e>
		dp->sect++;				/* Next sector */
 800b856:	687b      	ldr	r3, [r7, #4]
 800b858:	69db      	ldr	r3, [r3, #28]
 800b85a:	1c5a      	adds	r2, r3, #1
 800b85c:	687b      	ldr	r3, [r7, #4]
 800b85e:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 800b860:	687b      	ldr	r3, [r7, #4]
 800b862:	699b      	ldr	r3, [r3, #24]
 800b864:	2b00      	cmp	r3, #0
 800b866:	d10b      	bne.n	800b880 <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800b868:	68bb      	ldr	r3, [r7, #8]
 800b86a:	095b      	lsrs	r3, r3, #5
 800b86c:	68fa      	ldr	r2, [r7, #12]
 800b86e:	8912      	ldrh	r2, [r2, #8]
 800b870:	4293      	cmp	r3, r2
 800b872:	f0c0 808d 	bcc.w	800b990 <dir_next+0x17e>
				dp->sect = 0; return FR_NO_FILE;
 800b876:	687b      	ldr	r3, [r7, #4]
 800b878:	2200      	movs	r2, #0
 800b87a:	61da      	str	r2, [r3, #28]
 800b87c:	2304      	movs	r3, #4
 800b87e:	e09a      	b.n	800b9b6 <dir_next+0x1a4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800b880:	68fb      	ldr	r3, [r7, #12]
 800b882:	899b      	ldrh	r3, [r3, #12]
 800b884:	461a      	mov	r2, r3
 800b886:	68bb      	ldr	r3, [r7, #8]
 800b888:	fbb3 f3f2 	udiv	r3, r3, r2
 800b88c:	68fa      	ldr	r2, [r7, #12]
 800b88e:	8952      	ldrh	r2, [r2, #10]
 800b890:	3a01      	subs	r2, #1
 800b892:	4013      	ands	r3, r2
 800b894:	2b00      	cmp	r3, #0
 800b896:	d17b      	bne.n	800b990 <dir_next+0x17e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800b898:	687a      	ldr	r2, [r7, #4]
 800b89a:	687b      	ldr	r3, [r7, #4]
 800b89c:	699b      	ldr	r3, [r3, #24]
 800b89e:	4619      	mov	r1, r3
 800b8a0:	4610      	mov	r0, r2
 800b8a2:	f7ff fc08 	bl	800b0b6 <get_fat>
 800b8a6:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800b8a8:	697b      	ldr	r3, [r7, #20]
 800b8aa:	2b01      	cmp	r3, #1
 800b8ac:	d801      	bhi.n	800b8b2 <dir_next+0xa0>
 800b8ae:	2302      	movs	r3, #2
 800b8b0:	e081      	b.n	800b9b6 <dir_next+0x1a4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800b8b2:	697b      	ldr	r3, [r7, #20]
 800b8b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b8b8:	d101      	bne.n	800b8be <dir_next+0xac>
 800b8ba:	2301      	movs	r3, #1
 800b8bc:	e07b      	b.n	800b9b6 <dir_next+0x1a4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800b8be:	68fb      	ldr	r3, [r7, #12]
 800b8c0:	69db      	ldr	r3, [r3, #28]
 800b8c2:	697a      	ldr	r2, [r7, #20]
 800b8c4:	429a      	cmp	r2, r3
 800b8c6:	d359      	bcc.n	800b97c <dir_next+0x16a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800b8c8:	683b      	ldr	r3, [r7, #0]
 800b8ca:	2b00      	cmp	r3, #0
 800b8cc:	d104      	bne.n	800b8d8 <dir_next+0xc6>
						dp->sect = 0; return FR_NO_FILE;
 800b8ce:	687b      	ldr	r3, [r7, #4]
 800b8d0:	2200      	movs	r2, #0
 800b8d2:	61da      	str	r2, [r3, #28]
 800b8d4:	2304      	movs	r3, #4
 800b8d6:	e06e      	b.n	800b9b6 <dir_next+0x1a4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800b8d8:	687a      	ldr	r2, [r7, #4]
 800b8da:	687b      	ldr	r3, [r7, #4]
 800b8dc:	699b      	ldr	r3, [r3, #24]
 800b8de:	4619      	mov	r1, r3
 800b8e0:	4610      	mov	r0, r2
 800b8e2:	f7ff fe3d 	bl	800b560 <create_chain>
 800b8e6:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800b8e8:	697b      	ldr	r3, [r7, #20]
 800b8ea:	2b00      	cmp	r3, #0
 800b8ec:	d101      	bne.n	800b8f2 <dir_next+0xe0>
 800b8ee:	2307      	movs	r3, #7
 800b8f0:	e061      	b.n	800b9b6 <dir_next+0x1a4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800b8f2:	697b      	ldr	r3, [r7, #20]
 800b8f4:	2b01      	cmp	r3, #1
 800b8f6:	d101      	bne.n	800b8fc <dir_next+0xea>
 800b8f8:	2302      	movs	r3, #2
 800b8fa:	e05c      	b.n	800b9b6 <dir_next+0x1a4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800b8fc:	697b      	ldr	r3, [r7, #20]
 800b8fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b902:	d101      	bne.n	800b908 <dir_next+0xf6>
 800b904:	2301      	movs	r3, #1
 800b906:	e056      	b.n	800b9b6 <dir_next+0x1a4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800b908:	68f8      	ldr	r0, [r7, #12]
 800b90a:	f7ff fad3 	bl	800aeb4 <sync_window>
 800b90e:	4603      	mov	r3, r0
 800b910:	2b00      	cmp	r3, #0
 800b912:	d001      	beq.n	800b918 <dir_next+0x106>
 800b914:	2301      	movs	r3, #1
 800b916:	e04e      	b.n	800b9b6 <dir_next+0x1a4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800b918:	68fb      	ldr	r3, [r7, #12]
 800b91a:	f103 0038 	add.w	r0, r3, #56	; 0x38
 800b91e:	68fb      	ldr	r3, [r7, #12]
 800b920:	899b      	ldrh	r3, [r3, #12]
 800b922:	461a      	mov	r2, r3
 800b924:	2100      	movs	r1, #0
 800b926:	f7ff f8fc 	bl	800ab22 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800b92a:	2300      	movs	r3, #0
 800b92c:	613b      	str	r3, [r7, #16]
 800b92e:	6979      	ldr	r1, [r7, #20]
 800b930:	68f8      	ldr	r0, [r7, #12]
 800b932:	f7ff fba1 	bl	800b078 <clust2sect>
 800b936:	4602      	mov	r2, r0
 800b938:	68fb      	ldr	r3, [r7, #12]
 800b93a:	635a      	str	r2, [r3, #52]	; 0x34
 800b93c:	e012      	b.n	800b964 <dir_next+0x152>
						fs->wflag = 1;
 800b93e:	68fb      	ldr	r3, [r7, #12]
 800b940:	2201      	movs	r2, #1
 800b942:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800b944:	68f8      	ldr	r0, [r7, #12]
 800b946:	f7ff fab5 	bl	800aeb4 <sync_window>
 800b94a:	4603      	mov	r3, r0
 800b94c:	2b00      	cmp	r3, #0
 800b94e:	d001      	beq.n	800b954 <dir_next+0x142>
 800b950:	2301      	movs	r3, #1
 800b952:	e030      	b.n	800b9b6 <dir_next+0x1a4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800b954:	693b      	ldr	r3, [r7, #16]
 800b956:	3301      	adds	r3, #1
 800b958:	613b      	str	r3, [r7, #16]
 800b95a:	68fb      	ldr	r3, [r7, #12]
 800b95c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b95e:	1c5a      	adds	r2, r3, #1
 800b960:	68fb      	ldr	r3, [r7, #12]
 800b962:	635a      	str	r2, [r3, #52]	; 0x34
 800b964:	68fb      	ldr	r3, [r7, #12]
 800b966:	895b      	ldrh	r3, [r3, #10]
 800b968:	461a      	mov	r2, r3
 800b96a:	693b      	ldr	r3, [r7, #16]
 800b96c:	4293      	cmp	r3, r2
 800b96e:	d3e6      	bcc.n	800b93e <dir_next+0x12c>
					}
					fs->winsect -= n;							/* Restore window offset */
 800b970:	68fb      	ldr	r3, [r7, #12]
 800b972:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b974:	693b      	ldr	r3, [r7, #16]
 800b976:	1ad2      	subs	r2, r2, r3
 800b978:	68fb      	ldr	r3, [r7, #12]
 800b97a:	635a      	str	r2, [r3, #52]	; 0x34
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800b97c:	687b      	ldr	r3, [r7, #4]
 800b97e:	697a      	ldr	r2, [r7, #20]
 800b980:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 800b982:	6979      	ldr	r1, [r7, #20]
 800b984:	68f8      	ldr	r0, [r7, #12]
 800b986:	f7ff fb77 	bl	800b078 <clust2sect>
 800b98a:	4602      	mov	r2, r0
 800b98c:	687b      	ldr	r3, [r7, #4]
 800b98e:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800b990:	687b      	ldr	r3, [r7, #4]
 800b992:	68ba      	ldr	r2, [r7, #8]
 800b994:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800b996:	68fb      	ldr	r3, [r7, #12]
 800b998:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800b99c:	68fb      	ldr	r3, [r7, #12]
 800b99e:	899b      	ldrh	r3, [r3, #12]
 800b9a0:	461a      	mov	r2, r3
 800b9a2:	68bb      	ldr	r3, [r7, #8]
 800b9a4:	fbb3 f0f2 	udiv	r0, r3, r2
 800b9a8:	fb00 f202 	mul.w	r2, r0, r2
 800b9ac:	1a9b      	subs	r3, r3, r2
 800b9ae:	18ca      	adds	r2, r1, r3
 800b9b0:	687b      	ldr	r3, [r7, #4]
 800b9b2:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800b9b4:	2300      	movs	r3, #0
}
 800b9b6:	4618      	mov	r0, r3
 800b9b8:	3718      	adds	r7, #24
 800b9ba:	46bd      	mov	sp, r7
 800b9bc:	bd80      	pop	{r7, pc}

0800b9be <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800b9be:	b580      	push	{r7, lr}
 800b9c0:	b086      	sub	sp, #24
 800b9c2:	af00      	add	r7, sp, #0
 800b9c4:	6078      	str	r0, [r7, #4]
 800b9c6:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800b9c8:	687b      	ldr	r3, [r7, #4]
 800b9ca:	681b      	ldr	r3, [r3, #0]
 800b9cc:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800b9ce:	2100      	movs	r1, #0
 800b9d0:	6878      	ldr	r0, [r7, #4]
 800b9d2:	f7ff fe95 	bl	800b700 <dir_sdi>
 800b9d6:	4603      	mov	r3, r0
 800b9d8:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800b9da:	7dfb      	ldrb	r3, [r7, #23]
 800b9dc:	2b00      	cmp	r3, #0
 800b9de:	d12b      	bne.n	800ba38 <dir_alloc+0x7a>
		n = 0;
 800b9e0:	2300      	movs	r3, #0
 800b9e2:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800b9e4:	687b      	ldr	r3, [r7, #4]
 800b9e6:	69db      	ldr	r3, [r3, #28]
 800b9e8:	4619      	mov	r1, r3
 800b9ea:	68f8      	ldr	r0, [r7, #12]
 800b9ec:	f7ff faa6 	bl	800af3c <move_window>
 800b9f0:	4603      	mov	r3, r0
 800b9f2:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800b9f4:	7dfb      	ldrb	r3, [r7, #23]
 800b9f6:	2b00      	cmp	r3, #0
 800b9f8:	d11d      	bne.n	800ba36 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800b9fa:	687b      	ldr	r3, [r7, #4]
 800b9fc:	6a1b      	ldr	r3, [r3, #32]
 800b9fe:	781b      	ldrb	r3, [r3, #0]
 800ba00:	2be5      	cmp	r3, #229	; 0xe5
 800ba02:	d004      	beq.n	800ba0e <dir_alloc+0x50>
 800ba04:	687b      	ldr	r3, [r7, #4]
 800ba06:	6a1b      	ldr	r3, [r3, #32]
 800ba08:	781b      	ldrb	r3, [r3, #0]
 800ba0a:	2b00      	cmp	r3, #0
 800ba0c:	d107      	bne.n	800ba1e <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800ba0e:	693b      	ldr	r3, [r7, #16]
 800ba10:	3301      	adds	r3, #1
 800ba12:	613b      	str	r3, [r7, #16]
 800ba14:	693a      	ldr	r2, [r7, #16]
 800ba16:	683b      	ldr	r3, [r7, #0]
 800ba18:	429a      	cmp	r2, r3
 800ba1a:	d102      	bne.n	800ba22 <dir_alloc+0x64>
 800ba1c:	e00c      	b.n	800ba38 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800ba1e:	2300      	movs	r3, #0
 800ba20:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800ba22:	2101      	movs	r1, #1
 800ba24:	6878      	ldr	r0, [r7, #4]
 800ba26:	f7ff fef4 	bl	800b812 <dir_next>
 800ba2a:	4603      	mov	r3, r0
 800ba2c:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800ba2e:	7dfb      	ldrb	r3, [r7, #23]
 800ba30:	2b00      	cmp	r3, #0
 800ba32:	d0d7      	beq.n	800b9e4 <dir_alloc+0x26>
 800ba34:	e000      	b.n	800ba38 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 800ba36:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800ba38:	7dfb      	ldrb	r3, [r7, #23]
 800ba3a:	2b04      	cmp	r3, #4
 800ba3c:	d101      	bne.n	800ba42 <dir_alloc+0x84>
 800ba3e:	2307      	movs	r3, #7
 800ba40:	75fb      	strb	r3, [r7, #23]
	return res;
 800ba42:	7dfb      	ldrb	r3, [r7, #23]
}
 800ba44:	4618      	mov	r0, r3
 800ba46:	3718      	adds	r7, #24
 800ba48:	46bd      	mov	sp, r7
 800ba4a:	bd80      	pop	{r7, pc}

0800ba4c <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800ba4c:	b580      	push	{r7, lr}
 800ba4e:	b084      	sub	sp, #16
 800ba50:	af00      	add	r7, sp, #0
 800ba52:	6078      	str	r0, [r7, #4]
 800ba54:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800ba56:	683b      	ldr	r3, [r7, #0]
 800ba58:	331a      	adds	r3, #26
 800ba5a:	4618      	mov	r0, r3
 800ba5c:	f7fe ffbe 	bl	800a9dc <ld_word>
 800ba60:	4603      	mov	r3, r0
 800ba62:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800ba64:	687b      	ldr	r3, [r7, #4]
 800ba66:	781b      	ldrb	r3, [r3, #0]
 800ba68:	2b03      	cmp	r3, #3
 800ba6a:	d109      	bne.n	800ba80 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800ba6c:	683b      	ldr	r3, [r7, #0]
 800ba6e:	3314      	adds	r3, #20
 800ba70:	4618      	mov	r0, r3
 800ba72:	f7fe ffb3 	bl	800a9dc <ld_word>
 800ba76:	4603      	mov	r3, r0
 800ba78:	041b      	lsls	r3, r3, #16
 800ba7a:	68fa      	ldr	r2, [r7, #12]
 800ba7c:	4313      	orrs	r3, r2
 800ba7e:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800ba80:	68fb      	ldr	r3, [r7, #12]
}
 800ba82:	4618      	mov	r0, r3
 800ba84:	3710      	adds	r7, #16
 800ba86:	46bd      	mov	sp, r7
 800ba88:	bd80      	pop	{r7, pc}

0800ba8a <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800ba8a:	b580      	push	{r7, lr}
 800ba8c:	b084      	sub	sp, #16
 800ba8e:	af00      	add	r7, sp, #0
 800ba90:	60f8      	str	r0, [r7, #12]
 800ba92:	60b9      	str	r1, [r7, #8]
 800ba94:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800ba96:	68bb      	ldr	r3, [r7, #8]
 800ba98:	331a      	adds	r3, #26
 800ba9a:	687a      	ldr	r2, [r7, #4]
 800ba9c:	b292      	uxth	r2, r2
 800ba9e:	4611      	mov	r1, r2
 800baa0:	4618      	mov	r0, r3
 800baa2:	f7fe ffd6 	bl	800aa52 <st_word>
	if (fs->fs_type == FS_FAT32) {
 800baa6:	68fb      	ldr	r3, [r7, #12]
 800baa8:	781b      	ldrb	r3, [r3, #0]
 800baaa:	2b03      	cmp	r3, #3
 800baac:	d109      	bne.n	800bac2 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800baae:	68bb      	ldr	r3, [r7, #8]
 800bab0:	f103 0214 	add.w	r2, r3, #20
 800bab4:	687b      	ldr	r3, [r7, #4]
 800bab6:	0c1b      	lsrs	r3, r3, #16
 800bab8:	b29b      	uxth	r3, r3
 800baba:	4619      	mov	r1, r3
 800babc:	4610      	mov	r0, r2
 800babe:	f7fe ffc8 	bl	800aa52 <st_word>
	}
}
 800bac2:	bf00      	nop
 800bac4:	3710      	adds	r7, #16
 800bac6:	46bd      	mov	sp, r7
 800bac8:	bd80      	pop	{r7, pc}
	...

0800bacc <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 800bacc:	b590      	push	{r4, r7, lr}
 800bace:	b087      	sub	sp, #28
 800bad0:	af00      	add	r7, sp, #0
 800bad2:	6078      	str	r0, [r7, #4]
 800bad4:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 800bad6:	683b      	ldr	r3, [r7, #0]
 800bad8:	331a      	adds	r3, #26
 800bada:	4618      	mov	r0, r3
 800badc:	f7fe ff7e 	bl	800a9dc <ld_word>
 800bae0:	4603      	mov	r3, r0
 800bae2:	2b00      	cmp	r3, #0
 800bae4:	d001      	beq.n	800baea <cmp_lfn+0x1e>
 800bae6:	2300      	movs	r3, #0
 800bae8:	e059      	b.n	800bb9e <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 800baea:	683b      	ldr	r3, [r7, #0]
 800baec:	781b      	ldrb	r3, [r3, #0]
 800baee:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800baf2:	1e5a      	subs	r2, r3, #1
 800baf4:	4613      	mov	r3, r2
 800baf6:	005b      	lsls	r3, r3, #1
 800baf8:	4413      	add	r3, r2
 800bafa:	009b      	lsls	r3, r3, #2
 800bafc:	4413      	add	r3, r2
 800bafe:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800bb00:	2301      	movs	r3, #1
 800bb02:	81fb      	strh	r3, [r7, #14]
 800bb04:	2300      	movs	r3, #0
 800bb06:	613b      	str	r3, [r7, #16]
 800bb08:	e033      	b.n	800bb72 <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 800bb0a:	4a27      	ldr	r2, [pc, #156]	; (800bba8 <cmp_lfn+0xdc>)
 800bb0c:	693b      	ldr	r3, [r7, #16]
 800bb0e:	4413      	add	r3, r2
 800bb10:	781b      	ldrb	r3, [r3, #0]
 800bb12:	461a      	mov	r2, r3
 800bb14:	683b      	ldr	r3, [r7, #0]
 800bb16:	4413      	add	r3, r2
 800bb18:	4618      	mov	r0, r3
 800bb1a:	f7fe ff5f 	bl	800a9dc <ld_word>
 800bb1e:	4603      	mov	r3, r0
 800bb20:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 800bb22:	89fb      	ldrh	r3, [r7, #14]
 800bb24:	2b00      	cmp	r3, #0
 800bb26:	d01a      	beq.n	800bb5e <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 800bb28:	697b      	ldr	r3, [r7, #20]
 800bb2a:	2bfe      	cmp	r3, #254	; 0xfe
 800bb2c:	d812      	bhi.n	800bb54 <cmp_lfn+0x88>
 800bb2e:	89bb      	ldrh	r3, [r7, #12]
 800bb30:	4618      	mov	r0, r3
 800bb32:	f001 fd75 	bl	800d620 <ff_wtoupper>
 800bb36:	4603      	mov	r3, r0
 800bb38:	461c      	mov	r4, r3
 800bb3a:	697b      	ldr	r3, [r7, #20]
 800bb3c:	1c5a      	adds	r2, r3, #1
 800bb3e:	617a      	str	r2, [r7, #20]
 800bb40:	005b      	lsls	r3, r3, #1
 800bb42:	687a      	ldr	r2, [r7, #4]
 800bb44:	4413      	add	r3, r2
 800bb46:	881b      	ldrh	r3, [r3, #0]
 800bb48:	4618      	mov	r0, r3
 800bb4a:	f001 fd69 	bl	800d620 <ff_wtoupper>
 800bb4e:	4603      	mov	r3, r0
 800bb50:	429c      	cmp	r4, r3
 800bb52:	d001      	beq.n	800bb58 <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 800bb54:	2300      	movs	r3, #0
 800bb56:	e022      	b.n	800bb9e <cmp_lfn+0xd2>
			}
			wc = uc;
 800bb58:	89bb      	ldrh	r3, [r7, #12]
 800bb5a:	81fb      	strh	r3, [r7, #14]
 800bb5c:	e006      	b.n	800bb6c <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800bb5e:	89bb      	ldrh	r3, [r7, #12]
 800bb60:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800bb64:	4293      	cmp	r3, r2
 800bb66:	d001      	beq.n	800bb6c <cmp_lfn+0xa0>
 800bb68:	2300      	movs	r3, #0
 800bb6a:	e018      	b.n	800bb9e <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800bb6c:	693b      	ldr	r3, [r7, #16]
 800bb6e:	3301      	adds	r3, #1
 800bb70:	613b      	str	r3, [r7, #16]
 800bb72:	693b      	ldr	r3, [r7, #16]
 800bb74:	2b0c      	cmp	r3, #12
 800bb76:	d9c8      	bls.n	800bb0a <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 800bb78:	683b      	ldr	r3, [r7, #0]
 800bb7a:	781b      	ldrb	r3, [r3, #0]
 800bb7c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bb80:	2b00      	cmp	r3, #0
 800bb82:	d00b      	beq.n	800bb9c <cmp_lfn+0xd0>
 800bb84:	89fb      	ldrh	r3, [r7, #14]
 800bb86:	2b00      	cmp	r3, #0
 800bb88:	d008      	beq.n	800bb9c <cmp_lfn+0xd0>
 800bb8a:	697b      	ldr	r3, [r7, #20]
 800bb8c:	005b      	lsls	r3, r3, #1
 800bb8e:	687a      	ldr	r2, [r7, #4]
 800bb90:	4413      	add	r3, r2
 800bb92:	881b      	ldrh	r3, [r3, #0]
 800bb94:	2b00      	cmp	r3, #0
 800bb96:	d001      	beq.n	800bb9c <cmp_lfn+0xd0>
 800bb98:	2300      	movs	r3, #0
 800bb9a:	e000      	b.n	800bb9e <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 800bb9c:	2301      	movs	r3, #1
}
 800bb9e:	4618      	mov	r0, r3
 800bba0:	371c      	adds	r7, #28
 800bba2:	46bd      	mov	sp, r7
 800bba4:	bd90      	pop	{r4, r7, pc}
 800bba6:	bf00      	nop
 800bba8:	0800e220 	.word	0x0800e220

0800bbac <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 800bbac:	b580      	push	{r7, lr}
 800bbae:	b088      	sub	sp, #32
 800bbb0:	af00      	add	r7, sp, #0
 800bbb2:	60f8      	str	r0, [r7, #12]
 800bbb4:	60b9      	str	r1, [r7, #8]
 800bbb6:	4611      	mov	r1, r2
 800bbb8:	461a      	mov	r2, r3
 800bbba:	460b      	mov	r3, r1
 800bbbc:	71fb      	strb	r3, [r7, #7]
 800bbbe:	4613      	mov	r3, r2
 800bbc0:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 800bbc2:	68bb      	ldr	r3, [r7, #8]
 800bbc4:	330d      	adds	r3, #13
 800bbc6:	79ba      	ldrb	r2, [r7, #6]
 800bbc8:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 800bbca:	68bb      	ldr	r3, [r7, #8]
 800bbcc:	330b      	adds	r3, #11
 800bbce:	220f      	movs	r2, #15
 800bbd0:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 800bbd2:	68bb      	ldr	r3, [r7, #8]
 800bbd4:	330c      	adds	r3, #12
 800bbd6:	2200      	movs	r2, #0
 800bbd8:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 800bbda:	68bb      	ldr	r3, [r7, #8]
 800bbdc:	331a      	adds	r3, #26
 800bbde:	2100      	movs	r1, #0
 800bbe0:	4618      	mov	r0, r3
 800bbe2:	f7fe ff36 	bl	800aa52 <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 800bbe6:	79fb      	ldrb	r3, [r7, #7]
 800bbe8:	1e5a      	subs	r2, r3, #1
 800bbea:	4613      	mov	r3, r2
 800bbec:	005b      	lsls	r3, r3, #1
 800bbee:	4413      	add	r3, r2
 800bbf0:	009b      	lsls	r3, r3, #2
 800bbf2:	4413      	add	r3, r2
 800bbf4:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 800bbf6:	2300      	movs	r3, #0
 800bbf8:	82fb      	strh	r3, [r7, #22]
 800bbfa:	2300      	movs	r3, #0
 800bbfc:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 800bbfe:	8afb      	ldrh	r3, [r7, #22]
 800bc00:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800bc04:	4293      	cmp	r3, r2
 800bc06:	d007      	beq.n	800bc18 <put_lfn+0x6c>
 800bc08:	69fb      	ldr	r3, [r7, #28]
 800bc0a:	1c5a      	adds	r2, r3, #1
 800bc0c:	61fa      	str	r2, [r7, #28]
 800bc0e:	005b      	lsls	r3, r3, #1
 800bc10:	68fa      	ldr	r2, [r7, #12]
 800bc12:	4413      	add	r3, r2
 800bc14:	881b      	ldrh	r3, [r3, #0]
 800bc16:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 800bc18:	4a17      	ldr	r2, [pc, #92]	; (800bc78 <put_lfn+0xcc>)
 800bc1a:	69bb      	ldr	r3, [r7, #24]
 800bc1c:	4413      	add	r3, r2
 800bc1e:	781b      	ldrb	r3, [r3, #0]
 800bc20:	461a      	mov	r2, r3
 800bc22:	68bb      	ldr	r3, [r7, #8]
 800bc24:	4413      	add	r3, r2
 800bc26:	8afa      	ldrh	r2, [r7, #22]
 800bc28:	4611      	mov	r1, r2
 800bc2a:	4618      	mov	r0, r3
 800bc2c:	f7fe ff11 	bl	800aa52 <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 800bc30:	8afb      	ldrh	r3, [r7, #22]
 800bc32:	2b00      	cmp	r3, #0
 800bc34:	d102      	bne.n	800bc3c <put_lfn+0x90>
 800bc36:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800bc3a:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 800bc3c:	69bb      	ldr	r3, [r7, #24]
 800bc3e:	3301      	adds	r3, #1
 800bc40:	61bb      	str	r3, [r7, #24]
 800bc42:	69bb      	ldr	r3, [r7, #24]
 800bc44:	2b0c      	cmp	r3, #12
 800bc46:	d9da      	bls.n	800bbfe <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 800bc48:	8afb      	ldrh	r3, [r7, #22]
 800bc4a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800bc4e:	4293      	cmp	r3, r2
 800bc50:	d006      	beq.n	800bc60 <put_lfn+0xb4>
 800bc52:	69fb      	ldr	r3, [r7, #28]
 800bc54:	005b      	lsls	r3, r3, #1
 800bc56:	68fa      	ldr	r2, [r7, #12]
 800bc58:	4413      	add	r3, r2
 800bc5a:	881b      	ldrh	r3, [r3, #0]
 800bc5c:	2b00      	cmp	r3, #0
 800bc5e:	d103      	bne.n	800bc68 <put_lfn+0xbc>
 800bc60:	79fb      	ldrb	r3, [r7, #7]
 800bc62:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bc66:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 800bc68:	68bb      	ldr	r3, [r7, #8]
 800bc6a:	79fa      	ldrb	r2, [r7, #7]
 800bc6c:	701a      	strb	r2, [r3, #0]
}
 800bc6e:	bf00      	nop
 800bc70:	3720      	adds	r7, #32
 800bc72:	46bd      	mov	sp, r7
 800bc74:	bd80      	pop	{r7, pc}
 800bc76:	bf00      	nop
 800bc78:	0800e220 	.word	0x0800e220

0800bc7c <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 800bc7c:	b580      	push	{r7, lr}
 800bc7e:	b08c      	sub	sp, #48	; 0x30
 800bc80:	af00      	add	r7, sp, #0
 800bc82:	60f8      	str	r0, [r7, #12]
 800bc84:	60b9      	str	r1, [r7, #8]
 800bc86:	607a      	str	r2, [r7, #4]
 800bc88:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 800bc8a:	220b      	movs	r2, #11
 800bc8c:	68b9      	ldr	r1, [r7, #8]
 800bc8e:	68f8      	ldr	r0, [r7, #12]
 800bc90:	f7fe ff26 	bl	800aae0 <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 800bc94:	683b      	ldr	r3, [r7, #0]
 800bc96:	2b05      	cmp	r3, #5
 800bc98:	d92b      	bls.n	800bcf2 <gen_numname+0x76>
		sr = seq;
 800bc9a:	683b      	ldr	r3, [r7, #0]
 800bc9c:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 800bc9e:	e022      	b.n	800bce6 <gen_numname+0x6a>
			wc = *lfn++;
 800bca0:	687b      	ldr	r3, [r7, #4]
 800bca2:	1c9a      	adds	r2, r3, #2
 800bca4:	607a      	str	r2, [r7, #4]
 800bca6:	881b      	ldrh	r3, [r3, #0]
 800bca8:	847b      	strh	r3, [r7, #34]	; 0x22
			for (i = 0; i < 16; i++) {
 800bcaa:	2300      	movs	r3, #0
 800bcac:	62bb      	str	r3, [r7, #40]	; 0x28
 800bcae:	e017      	b.n	800bce0 <gen_numname+0x64>
				sr = (sr << 1) + (wc & 1);
 800bcb0:	69fb      	ldr	r3, [r7, #28]
 800bcb2:	005a      	lsls	r2, r3, #1
 800bcb4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800bcb6:	f003 0301 	and.w	r3, r3, #1
 800bcba:	4413      	add	r3, r2
 800bcbc:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 800bcbe:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800bcc0:	085b      	lsrs	r3, r3, #1
 800bcc2:	847b      	strh	r3, [r7, #34]	; 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 800bcc4:	69fb      	ldr	r3, [r7, #28]
 800bcc6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800bcca:	2b00      	cmp	r3, #0
 800bccc:	d005      	beq.n	800bcda <gen_numname+0x5e>
 800bcce:	69fb      	ldr	r3, [r7, #28]
 800bcd0:	f483 3388 	eor.w	r3, r3, #69632	; 0x11000
 800bcd4:	f083 0321 	eor.w	r3, r3, #33	; 0x21
 800bcd8:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 800bcda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bcdc:	3301      	adds	r3, #1
 800bcde:	62bb      	str	r3, [r7, #40]	; 0x28
 800bce0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bce2:	2b0f      	cmp	r3, #15
 800bce4:	d9e4      	bls.n	800bcb0 <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 800bce6:	687b      	ldr	r3, [r7, #4]
 800bce8:	881b      	ldrh	r3, [r3, #0]
 800bcea:	2b00      	cmp	r3, #0
 800bcec:	d1d8      	bne.n	800bca0 <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 800bcee:	69fb      	ldr	r3, [r7, #28]
 800bcf0:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 800bcf2:	2307      	movs	r3, #7
 800bcf4:	62bb      	str	r3, [r7, #40]	; 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 800bcf6:	683b      	ldr	r3, [r7, #0]
 800bcf8:	b2db      	uxtb	r3, r3
 800bcfa:	f003 030f 	and.w	r3, r3, #15
 800bcfe:	b2db      	uxtb	r3, r3
 800bd00:	3330      	adds	r3, #48	; 0x30
 800bd02:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (c > '9') c += 7;
 800bd06:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800bd0a:	2b39      	cmp	r3, #57	; 0x39
 800bd0c:	d904      	bls.n	800bd18 <gen_numname+0x9c>
 800bd0e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800bd12:	3307      	adds	r3, #7
 800bd14:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		ns[i--] = c;
 800bd18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd1a:	1e5a      	subs	r2, r3, #1
 800bd1c:	62ba      	str	r2, [r7, #40]	; 0x28
 800bd1e:	3330      	adds	r3, #48	; 0x30
 800bd20:	443b      	add	r3, r7
 800bd22:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800bd26:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 800bd2a:	683b      	ldr	r3, [r7, #0]
 800bd2c:	091b      	lsrs	r3, r3, #4
 800bd2e:	603b      	str	r3, [r7, #0]
	} while (seq);
 800bd30:	683b      	ldr	r3, [r7, #0]
 800bd32:	2b00      	cmp	r3, #0
 800bd34:	d1df      	bne.n	800bcf6 <gen_numname+0x7a>
	ns[i] = '~';
 800bd36:	f107 0214 	add.w	r2, r7, #20
 800bd3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd3c:	4413      	add	r3, r2
 800bd3e:	227e      	movs	r2, #126	; 0x7e
 800bd40:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 800bd42:	2300      	movs	r3, #0
 800bd44:	627b      	str	r3, [r7, #36]	; 0x24
 800bd46:	e002      	b.n	800bd4e <gen_numname+0xd2>
 800bd48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bd4a:	3301      	adds	r3, #1
 800bd4c:	627b      	str	r3, [r7, #36]	; 0x24
 800bd4e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bd50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd52:	429a      	cmp	r2, r3
 800bd54:	d205      	bcs.n	800bd62 <gen_numname+0xe6>
 800bd56:	68fa      	ldr	r2, [r7, #12]
 800bd58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bd5a:	4413      	add	r3, r2
 800bd5c:	781b      	ldrb	r3, [r3, #0]
 800bd5e:	2b20      	cmp	r3, #32
 800bd60:	d1f2      	bne.n	800bd48 <gen_numname+0xcc>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 800bd62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd64:	2b07      	cmp	r3, #7
 800bd66:	d807      	bhi.n	800bd78 <gen_numname+0xfc>
 800bd68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd6a:	1c5a      	adds	r2, r3, #1
 800bd6c:	62ba      	str	r2, [r7, #40]	; 0x28
 800bd6e:	3330      	adds	r3, #48	; 0x30
 800bd70:	443b      	add	r3, r7
 800bd72:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 800bd76:	e000      	b.n	800bd7a <gen_numname+0xfe>
 800bd78:	2120      	movs	r1, #32
 800bd7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bd7c:	1c5a      	adds	r2, r3, #1
 800bd7e:	627a      	str	r2, [r7, #36]	; 0x24
 800bd80:	68fa      	ldr	r2, [r7, #12]
 800bd82:	4413      	add	r3, r2
 800bd84:	460a      	mov	r2, r1
 800bd86:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 800bd88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bd8a:	2b07      	cmp	r3, #7
 800bd8c:	d9e9      	bls.n	800bd62 <gen_numname+0xe6>
}
 800bd8e:	bf00      	nop
 800bd90:	bf00      	nop
 800bd92:	3730      	adds	r7, #48	; 0x30
 800bd94:	46bd      	mov	sp, r7
 800bd96:	bd80      	pop	{r7, pc}

0800bd98 <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 800bd98:	b480      	push	{r7}
 800bd9a:	b085      	sub	sp, #20
 800bd9c:	af00      	add	r7, sp, #0
 800bd9e:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 800bda0:	2300      	movs	r3, #0
 800bda2:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 800bda4:	230b      	movs	r3, #11
 800bda6:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 800bda8:	7bfb      	ldrb	r3, [r7, #15]
 800bdaa:	b2da      	uxtb	r2, r3
 800bdac:	0852      	lsrs	r2, r2, #1
 800bdae:	01db      	lsls	r3, r3, #7
 800bdb0:	4313      	orrs	r3, r2
 800bdb2:	b2da      	uxtb	r2, r3
 800bdb4:	687b      	ldr	r3, [r7, #4]
 800bdb6:	1c59      	adds	r1, r3, #1
 800bdb8:	6079      	str	r1, [r7, #4]
 800bdba:	781b      	ldrb	r3, [r3, #0]
 800bdbc:	4413      	add	r3, r2
 800bdbe:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 800bdc0:	68bb      	ldr	r3, [r7, #8]
 800bdc2:	3b01      	subs	r3, #1
 800bdc4:	60bb      	str	r3, [r7, #8]
 800bdc6:	68bb      	ldr	r3, [r7, #8]
 800bdc8:	2b00      	cmp	r3, #0
 800bdca:	d1ed      	bne.n	800bda8 <sum_sfn+0x10>
	return sum;
 800bdcc:	7bfb      	ldrb	r3, [r7, #15]
}
 800bdce:	4618      	mov	r0, r3
 800bdd0:	3714      	adds	r7, #20
 800bdd2:	46bd      	mov	sp, r7
 800bdd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdd8:	4770      	bx	lr

0800bdda <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800bdda:	b580      	push	{r7, lr}
 800bddc:	b086      	sub	sp, #24
 800bdde:	af00      	add	r7, sp, #0
 800bde0:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800bde2:	687b      	ldr	r3, [r7, #4]
 800bde4:	681b      	ldr	r3, [r3, #0]
 800bde6:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800bde8:	2100      	movs	r1, #0
 800bdea:	6878      	ldr	r0, [r7, #4]
 800bdec:	f7ff fc88 	bl	800b700 <dir_sdi>
 800bdf0:	4603      	mov	r3, r0
 800bdf2:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800bdf4:	7dfb      	ldrb	r3, [r7, #23]
 800bdf6:	2b00      	cmp	r3, #0
 800bdf8:	d001      	beq.n	800bdfe <dir_find+0x24>
 800bdfa:	7dfb      	ldrb	r3, [r7, #23]
 800bdfc:	e0a9      	b.n	800bf52 <dir_find+0x178>
		return res;
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800bdfe:	23ff      	movs	r3, #255	; 0xff
 800be00:	753b      	strb	r3, [r7, #20]
 800be02:	7d3b      	ldrb	r3, [r7, #20]
 800be04:	757b      	strb	r3, [r7, #21]
 800be06:	687b      	ldr	r3, [r7, #4]
 800be08:	f04f 32ff 	mov.w	r2, #4294967295
 800be0c:	631a      	str	r2, [r3, #48]	; 0x30
#endif
	do {
		res = move_window(fs, dp->sect);
 800be0e:	687b      	ldr	r3, [r7, #4]
 800be10:	69db      	ldr	r3, [r3, #28]
 800be12:	4619      	mov	r1, r3
 800be14:	6938      	ldr	r0, [r7, #16]
 800be16:	f7ff f891 	bl	800af3c <move_window>
 800be1a:	4603      	mov	r3, r0
 800be1c:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800be1e:	7dfb      	ldrb	r3, [r7, #23]
 800be20:	2b00      	cmp	r3, #0
 800be22:	f040 8090 	bne.w	800bf46 <dir_find+0x16c>
		c = dp->dir[DIR_Name];
 800be26:	687b      	ldr	r3, [r7, #4]
 800be28:	6a1b      	ldr	r3, [r3, #32]
 800be2a:	781b      	ldrb	r3, [r3, #0]
 800be2c:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800be2e:	7dbb      	ldrb	r3, [r7, #22]
 800be30:	2b00      	cmp	r3, #0
 800be32:	d102      	bne.n	800be3a <dir_find+0x60>
 800be34:	2304      	movs	r3, #4
 800be36:	75fb      	strb	r3, [r7, #23]
 800be38:	e08a      	b.n	800bf50 <dir_find+0x176>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 800be3a:	687b      	ldr	r3, [r7, #4]
 800be3c:	6a1b      	ldr	r3, [r3, #32]
 800be3e:	330b      	adds	r3, #11
 800be40:	781b      	ldrb	r3, [r3, #0]
 800be42:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800be46:	73fb      	strb	r3, [r7, #15]
 800be48:	687b      	ldr	r3, [r7, #4]
 800be4a:	7bfa      	ldrb	r2, [r7, #15]
 800be4c:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 800be4e:	7dbb      	ldrb	r3, [r7, #22]
 800be50:	2be5      	cmp	r3, #229	; 0xe5
 800be52:	d007      	beq.n	800be64 <dir_find+0x8a>
 800be54:	7bfb      	ldrb	r3, [r7, #15]
 800be56:	f003 0308 	and.w	r3, r3, #8
 800be5a:	2b00      	cmp	r3, #0
 800be5c:	d009      	beq.n	800be72 <dir_find+0x98>
 800be5e:	7bfb      	ldrb	r3, [r7, #15]
 800be60:	2b0f      	cmp	r3, #15
 800be62:	d006      	beq.n	800be72 <dir_find+0x98>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800be64:	23ff      	movs	r3, #255	; 0xff
 800be66:	757b      	strb	r3, [r7, #21]
 800be68:	687b      	ldr	r3, [r7, #4]
 800be6a:	f04f 32ff 	mov.w	r2, #4294967295
 800be6e:	631a      	str	r2, [r3, #48]	; 0x30
 800be70:	e05e      	b.n	800bf30 <dir_find+0x156>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 800be72:	7bfb      	ldrb	r3, [r7, #15]
 800be74:	2b0f      	cmp	r3, #15
 800be76:	d136      	bne.n	800bee6 <dir_find+0x10c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 800be78:	687b      	ldr	r3, [r7, #4]
 800be7a:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800be7e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800be82:	2b00      	cmp	r3, #0
 800be84:	d154      	bne.n	800bf30 <dir_find+0x156>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 800be86:	7dbb      	ldrb	r3, [r7, #22]
 800be88:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800be8c:	2b00      	cmp	r3, #0
 800be8e:	d00d      	beq.n	800beac <dir_find+0xd2>
						sum = dp->dir[LDIR_Chksum];
 800be90:	687b      	ldr	r3, [r7, #4]
 800be92:	6a1b      	ldr	r3, [r3, #32]
 800be94:	7b5b      	ldrb	r3, [r3, #13]
 800be96:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 800be98:	7dbb      	ldrb	r3, [r7, #22]
 800be9a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800be9e:	75bb      	strb	r3, [r7, #22]
 800bea0:	7dbb      	ldrb	r3, [r7, #22]
 800bea2:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 800bea4:	687b      	ldr	r3, [r7, #4]
 800bea6:	695a      	ldr	r2, [r3, #20]
 800bea8:	687b      	ldr	r3, [r7, #4]
 800beaa:	631a      	str	r2, [r3, #48]	; 0x30
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800beac:	7dba      	ldrb	r2, [r7, #22]
 800beae:	7d7b      	ldrb	r3, [r7, #21]
 800beb0:	429a      	cmp	r2, r3
 800beb2:	d115      	bne.n	800bee0 <dir_find+0x106>
 800beb4:	687b      	ldr	r3, [r7, #4]
 800beb6:	6a1b      	ldr	r3, [r3, #32]
 800beb8:	330d      	adds	r3, #13
 800beba:	781b      	ldrb	r3, [r3, #0]
 800bebc:	7d3a      	ldrb	r2, [r7, #20]
 800bebe:	429a      	cmp	r2, r3
 800bec0:	d10e      	bne.n	800bee0 <dir_find+0x106>
 800bec2:	693b      	ldr	r3, [r7, #16]
 800bec4:	691a      	ldr	r2, [r3, #16]
 800bec6:	687b      	ldr	r3, [r7, #4]
 800bec8:	6a1b      	ldr	r3, [r3, #32]
 800beca:	4619      	mov	r1, r3
 800becc:	4610      	mov	r0, r2
 800bece:	f7ff fdfd 	bl	800bacc <cmp_lfn>
 800bed2:	4603      	mov	r3, r0
 800bed4:	2b00      	cmp	r3, #0
 800bed6:	d003      	beq.n	800bee0 <dir_find+0x106>
 800bed8:	7d7b      	ldrb	r3, [r7, #21]
 800beda:	3b01      	subs	r3, #1
 800bedc:	b2db      	uxtb	r3, r3
 800bede:	e000      	b.n	800bee2 <dir_find+0x108>
 800bee0:	23ff      	movs	r3, #255	; 0xff
 800bee2:	757b      	strb	r3, [r7, #21]
 800bee4:	e024      	b.n	800bf30 <dir_find+0x156>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800bee6:	7d7b      	ldrb	r3, [r7, #21]
 800bee8:	2b00      	cmp	r3, #0
 800beea:	d109      	bne.n	800bf00 <dir_find+0x126>
 800beec:	687b      	ldr	r3, [r7, #4]
 800beee:	6a1b      	ldr	r3, [r3, #32]
 800bef0:	4618      	mov	r0, r3
 800bef2:	f7ff ff51 	bl	800bd98 <sum_sfn>
 800bef6:	4603      	mov	r3, r0
 800bef8:	461a      	mov	r2, r3
 800befa:	7d3b      	ldrb	r3, [r7, #20]
 800befc:	4293      	cmp	r3, r2
 800befe:	d024      	beq.n	800bf4a <dir_find+0x170>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800bf00:	687b      	ldr	r3, [r7, #4]
 800bf02:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800bf06:	f003 0301 	and.w	r3, r3, #1
 800bf0a:	2b00      	cmp	r3, #0
 800bf0c:	d10a      	bne.n	800bf24 <dir_find+0x14a>
 800bf0e:	687b      	ldr	r3, [r7, #4]
 800bf10:	6a18      	ldr	r0, [r3, #32]
 800bf12:	687b      	ldr	r3, [r7, #4]
 800bf14:	3324      	adds	r3, #36	; 0x24
 800bf16:	220b      	movs	r2, #11
 800bf18:	4619      	mov	r1, r3
 800bf1a:	f7fe fe1d 	bl	800ab58 <mem_cmp>
 800bf1e:	4603      	mov	r3, r0
 800bf20:	2b00      	cmp	r3, #0
 800bf22:	d014      	beq.n	800bf4e <dir_find+0x174>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800bf24:	23ff      	movs	r3, #255	; 0xff
 800bf26:	757b      	strb	r3, [r7, #21]
 800bf28:	687b      	ldr	r3, [r7, #4]
 800bf2a:	f04f 32ff 	mov.w	r2, #4294967295
 800bf2e:	631a      	str	r2, [r3, #48]	; 0x30
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800bf30:	2100      	movs	r1, #0
 800bf32:	6878      	ldr	r0, [r7, #4]
 800bf34:	f7ff fc6d 	bl	800b812 <dir_next>
 800bf38:	4603      	mov	r3, r0
 800bf3a:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800bf3c:	7dfb      	ldrb	r3, [r7, #23]
 800bf3e:	2b00      	cmp	r3, #0
 800bf40:	f43f af65 	beq.w	800be0e <dir_find+0x34>
 800bf44:	e004      	b.n	800bf50 <dir_find+0x176>
		if (res != FR_OK) break;
 800bf46:	bf00      	nop
 800bf48:	e002      	b.n	800bf50 <dir_find+0x176>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800bf4a:	bf00      	nop
 800bf4c:	e000      	b.n	800bf50 <dir_find+0x176>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800bf4e:	bf00      	nop

	return res;
 800bf50:	7dfb      	ldrb	r3, [r7, #23]
}
 800bf52:	4618      	mov	r0, r3
 800bf54:	3718      	adds	r7, #24
 800bf56:	46bd      	mov	sp, r7
 800bf58:	bd80      	pop	{r7, pc}
	...

0800bf5c <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800bf5c:	b580      	push	{r7, lr}
 800bf5e:	b08c      	sub	sp, #48	; 0x30
 800bf60:	af00      	add	r7, sp, #0
 800bf62:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800bf64:	687b      	ldr	r3, [r7, #4]
 800bf66:	681b      	ldr	r3, [r3, #0]
 800bf68:	61fb      	str	r3, [r7, #28]
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 800bf6a:	687b      	ldr	r3, [r7, #4]
 800bf6c:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800bf70:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 800bf74:	2b00      	cmp	r3, #0
 800bf76:	d001      	beq.n	800bf7c <dir_register+0x20>
 800bf78:	2306      	movs	r3, #6
 800bf7a:	e0e0      	b.n	800c13e <dir_register+0x1e2>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 800bf7c:	2300      	movs	r3, #0
 800bf7e:	627b      	str	r3, [r7, #36]	; 0x24
 800bf80:	e002      	b.n	800bf88 <dir_register+0x2c>
 800bf82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf84:	3301      	adds	r3, #1
 800bf86:	627b      	str	r3, [r7, #36]	; 0x24
 800bf88:	69fb      	ldr	r3, [r7, #28]
 800bf8a:	691a      	ldr	r2, [r3, #16]
 800bf8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf8e:	005b      	lsls	r3, r3, #1
 800bf90:	4413      	add	r3, r2
 800bf92:	881b      	ldrh	r3, [r3, #0]
 800bf94:	2b00      	cmp	r3, #0
 800bf96:	d1f4      	bne.n	800bf82 <dir_register+0x26>
		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
		return FR_OK;
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 800bf98:	687b      	ldr	r3, [r7, #4]
 800bf9a:	f103 0124 	add.w	r1, r3, #36	; 0x24
 800bf9e:	f107 030c 	add.w	r3, r7, #12
 800bfa2:	220c      	movs	r2, #12
 800bfa4:	4618      	mov	r0, r3
 800bfa6:	f7fe fd9b 	bl	800aae0 <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 800bfaa:	7dfb      	ldrb	r3, [r7, #23]
 800bfac:	f003 0301 	and.w	r3, r3, #1
 800bfb0:	2b00      	cmp	r3, #0
 800bfb2:	d032      	beq.n	800c01a <dir_register+0xbe>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 800bfb4:	687b      	ldr	r3, [r7, #4]
 800bfb6:	2240      	movs	r2, #64	; 0x40
 800bfb8:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		for (n = 1; n < 100; n++) {
 800bfbc:	2301      	movs	r3, #1
 800bfbe:	62bb      	str	r3, [r7, #40]	; 0x28
 800bfc0:	e016      	b.n	800bff0 <dir_register+0x94>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 800bfc2:	687b      	ldr	r3, [r7, #4]
 800bfc4:	f103 0024 	add.w	r0, r3, #36	; 0x24
 800bfc8:	69fb      	ldr	r3, [r7, #28]
 800bfca:	691a      	ldr	r2, [r3, #16]
 800bfcc:	f107 010c 	add.w	r1, r7, #12
 800bfd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bfd2:	f7ff fe53 	bl	800bc7c <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 800bfd6:	6878      	ldr	r0, [r7, #4]
 800bfd8:	f7ff feff 	bl	800bdda <dir_find>
 800bfdc:	4603      	mov	r3, r0
 800bfde:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			if (res != FR_OK) break;
 800bfe2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800bfe6:	2b00      	cmp	r3, #0
 800bfe8:	d106      	bne.n	800bff8 <dir_register+0x9c>
		for (n = 1; n < 100; n++) {
 800bfea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bfec:	3301      	adds	r3, #1
 800bfee:	62bb      	str	r3, [r7, #40]	; 0x28
 800bff0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bff2:	2b63      	cmp	r3, #99	; 0x63
 800bff4:	d9e5      	bls.n	800bfc2 <dir_register+0x66>
 800bff6:	e000      	b.n	800bffa <dir_register+0x9e>
			if (res != FR_OK) break;
 800bff8:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 800bffa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bffc:	2b64      	cmp	r3, #100	; 0x64
 800bffe:	d101      	bne.n	800c004 <dir_register+0xa8>
 800c000:	2307      	movs	r3, #7
 800c002:	e09c      	b.n	800c13e <dir_register+0x1e2>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 800c004:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800c008:	2b04      	cmp	r3, #4
 800c00a:	d002      	beq.n	800c012 <dir_register+0xb6>
 800c00c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800c010:	e095      	b.n	800c13e <dir_register+0x1e2>
		dp->fn[NSFLAG] = sn[NSFLAG];
 800c012:	7dfa      	ldrb	r2, [r7, #23]
 800c014:	687b      	ldr	r3, [r7, #4]
 800c016:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 800c01a:	7dfb      	ldrb	r3, [r7, #23]
 800c01c:	f003 0302 	and.w	r3, r3, #2
 800c020:	2b00      	cmp	r3, #0
 800c022:	d007      	beq.n	800c034 <dir_register+0xd8>
 800c024:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c026:	330c      	adds	r3, #12
 800c028:	4a47      	ldr	r2, [pc, #284]	; (800c148 <dir_register+0x1ec>)
 800c02a:	fba2 2303 	umull	r2, r3, r2, r3
 800c02e:	089b      	lsrs	r3, r3, #2
 800c030:	3301      	adds	r3, #1
 800c032:	e000      	b.n	800c036 <dir_register+0xda>
 800c034:	2301      	movs	r3, #1
 800c036:	623b      	str	r3, [r7, #32]
	res = dir_alloc(dp, nent);		/* Allocate entries */
 800c038:	6a39      	ldr	r1, [r7, #32]
 800c03a:	6878      	ldr	r0, [r7, #4]
 800c03c:	f7ff fcbf 	bl	800b9be <dir_alloc>
 800c040:	4603      	mov	r3, r0
 800c042:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 800c046:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800c04a:	2b00      	cmp	r3, #0
 800c04c:	d148      	bne.n	800c0e0 <dir_register+0x184>
 800c04e:	6a3b      	ldr	r3, [r7, #32]
 800c050:	3b01      	subs	r3, #1
 800c052:	623b      	str	r3, [r7, #32]
 800c054:	6a3b      	ldr	r3, [r7, #32]
 800c056:	2b00      	cmp	r3, #0
 800c058:	d042      	beq.n	800c0e0 <dir_register+0x184>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 800c05a:	687b      	ldr	r3, [r7, #4]
 800c05c:	695a      	ldr	r2, [r3, #20]
 800c05e:	6a3b      	ldr	r3, [r7, #32]
 800c060:	015b      	lsls	r3, r3, #5
 800c062:	1ad3      	subs	r3, r2, r3
 800c064:	4619      	mov	r1, r3
 800c066:	6878      	ldr	r0, [r7, #4]
 800c068:	f7ff fb4a 	bl	800b700 <dir_sdi>
 800c06c:	4603      	mov	r3, r0
 800c06e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 800c072:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800c076:	2b00      	cmp	r3, #0
 800c078:	d132      	bne.n	800c0e0 <dir_register+0x184>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 800c07a:	687b      	ldr	r3, [r7, #4]
 800c07c:	3324      	adds	r3, #36	; 0x24
 800c07e:	4618      	mov	r0, r3
 800c080:	f7ff fe8a 	bl	800bd98 <sum_sfn>
 800c084:	4603      	mov	r3, r0
 800c086:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 800c088:	687b      	ldr	r3, [r7, #4]
 800c08a:	69db      	ldr	r3, [r3, #28]
 800c08c:	4619      	mov	r1, r3
 800c08e:	69f8      	ldr	r0, [r7, #28]
 800c090:	f7fe ff54 	bl	800af3c <move_window>
 800c094:	4603      	mov	r3, r0
 800c096:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				if (res != FR_OK) break;
 800c09a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800c09e:	2b00      	cmp	r3, #0
 800c0a0:	d11d      	bne.n	800c0de <dir_register+0x182>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 800c0a2:	69fb      	ldr	r3, [r7, #28]
 800c0a4:	6918      	ldr	r0, [r3, #16]
 800c0a6:	687b      	ldr	r3, [r7, #4]
 800c0a8:	6a19      	ldr	r1, [r3, #32]
 800c0aa:	6a3b      	ldr	r3, [r7, #32]
 800c0ac:	b2da      	uxtb	r2, r3
 800c0ae:	7efb      	ldrb	r3, [r7, #27]
 800c0b0:	f7ff fd7c 	bl	800bbac <put_lfn>
				fs->wflag = 1;
 800c0b4:	69fb      	ldr	r3, [r7, #28]
 800c0b6:	2201      	movs	r2, #1
 800c0b8:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 800c0ba:	2100      	movs	r1, #0
 800c0bc:	6878      	ldr	r0, [r7, #4]
 800c0be:	f7ff fba8 	bl	800b812 <dir_next>
 800c0c2:	4603      	mov	r3, r0
 800c0c4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			} while (res == FR_OK && --nent);
 800c0c8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800c0cc:	2b00      	cmp	r3, #0
 800c0ce:	d107      	bne.n	800c0e0 <dir_register+0x184>
 800c0d0:	6a3b      	ldr	r3, [r7, #32]
 800c0d2:	3b01      	subs	r3, #1
 800c0d4:	623b      	str	r3, [r7, #32]
 800c0d6:	6a3b      	ldr	r3, [r7, #32]
 800c0d8:	2b00      	cmp	r3, #0
 800c0da:	d1d5      	bne.n	800c088 <dir_register+0x12c>
 800c0dc:	e000      	b.n	800c0e0 <dir_register+0x184>
				if (res != FR_OK) break;
 800c0de:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800c0e0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800c0e4:	2b00      	cmp	r3, #0
 800c0e6:	d128      	bne.n	800c13a <dir_register+0x1de>
		res = move_window(fs, dp->sect);
 800c0e8:	687b      	ldr	r3, [r7, #4]
 800c0ea:	69db      	ldr	r3, [r3, #28]
 800c0ec:	4619      	mov	r1, r3
 800c0ee:	69f8      	ldr	r0, [r7, #28]
 800c0f0:	f7fe ff24 	bl	800af3c <move_window>
 800c0f4:	4603      	mov	r3, r0
 800c0f6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 800c0fa:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800c0fe:	2b00      	cmp	r3, #0
 800c100:	d11b      	bne.n	800c13a <dir_register+0x1de>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800c102:	687b      	ldr	r3, [r7, #4]
 800c104:	6a1b      	ldr	r3, [r3, #32]
 800c106:	2220      	movs	r2, #32
 800c108:	2100      	movs	r1, #0
 800c10a:	4618      	mov	r0, r3
 800c10c:	f7fe fd09 	bl	800ab22 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800c110:	687b      	ldr	r3, [r7, #4]
 800c112:	6a18      	ldr	r0, [r3, #32]
 800c114:	687b      	ldr	r3, [r7, #4]
 800c116:	3324      	adds	r3, #36	; 0x24
 800c118:	220b      	movs	r2, #11
 800c11a:	4619      	mov	r1, r3
 800c11c:	f7fe fce0 	bl	800aae0 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 800c120:	687b      	ldr	r3, [r7, #4]
 800c122:	f893 202f 	ldrb.w	r2, [r3, #47]	; 0x2f
 800c126:	687b      	ldr	r3, [r7, #4]
 800c128:	6a1b      	ldr	r3, [r3, #32]
 800c12a:	330c      	adds	r3, #12
 800c12c:	f002 0218 	and.w	r2, r2, #24
 800c130:	b2d2      	uxtb	r2, r2
 800c132:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 800c134:	69fb      	ldr	r3, [r7, #28]
 800c136:	2201      	movs	r2, #1
 800c138:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800c13a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800c13e:	4618      	mov	r0, r3
 800c140:	3730      	adds	r7, #48	; 0x30
 800c142:	46bd      	mov	sp, r7
 800c144:	bd80      	pop	{r7, pc}
 800c146:	bf00      	nop
 800c148:	4ec4ec4f 	.word	0x4ec4ec4f

0800c14c <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800c14c:	b580      	push	{r7, lr}
 800c14e:	b08a      	sub	sp, #40	; 0x28
 800c150:	af00      	add	r7, sp, #0
 800c152:	6078      	str	r0, [r7, #4]
 800c154:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 800c156:	683b      	ldr	r3, [r7, #0]
 800c158:	681b      	ldr	r3, [r3, #0]
 800c15a:	613b      	str	r3, [r7, #16]
 800c15c:	687b      	ldr	r3, [r7, #4]
 800c15e:	681b      	ldr	r3, [r3, #0]
 800c160:	691b      	ldr	r3, [r3, #16]
 800c162:	60fb      	str	r3, [r7, #12]
 800c164:	2300      	movs	r3, #0
 800c166:	617b      	str	r3, [r7, #20]
 800c168:	697b      	ldr	r3, [r7, #20]
 800c16a:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 800c16c:	69bb      	ldr	r3, [r7, #24]
 800c16e:	1c5a      	adds	r2, r3, #1
 800c170:	61ba      	str	r2, [r7, #24]
 800c172:	693a      	ldr	r2, [r7, #16]
 800c174:	4413      	add	r3, r2
 800c176:	781b      	ldrb	r3, [r3, #0]
 800c178:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 800c17a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c17c:	2b1f      	cmp	r3, #31
 800c17e:	d940      	bls.n	800c202 <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 800c180:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c182:	2b2f      	cmp	r3, #47	; 0x2f
 800c184:	d006      	beq.n	800c194 <create_name+0x48>
 800c186:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c188:	2b5c      	cmp	r3, #92	; 0x5c
 800c18a:	d110      	bne.n	800c1ae <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800c18c:	e002      	b.n	800c194 <create_name+0x48>
 800c18e:	69bb      	ldr	r3, [r7, #24]
 800c190:	3301      	adds	r3, #1
 800c192:	61bb      	str	r3, [r7, #24]
 800c194:	693a      	ldr	r2, [r7, #16]
 800c196:	69bb      	ldr	r3, [r7, #24]
 800c198:	4413      	add	r3, r2
 800c19a:	781b      	ldrb	r3, [r3, #0]
 800c19c:	2b2f      	cmp	r3, #47	; 0x2f
 800c19e:	d0f6      	beq.n	800c18e <create_name+0x42>
 800c1a0:	693a      	ldr	r2, [r7, #16]
 800c1a2:	69bb      	ldr	r3, [r7, #24]
 800c1a4:	4413      	add	r3, r2
 800c1a6:	781b      	ldrb	r3, [r3, #0]
 800c1a8:	2b5c      	cmp	r3, #92	; 0x5c
 800c1aa:	d0f0      	beq.n	800c18e <create_name+0x42>
			break;
 800c1ac:	e02a      	b.n	800c204 <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 800c1ae:	697b      	ldr	r3, [r7, #20]
 800c1b0:	2bfe      	cmp	r3, #254	; 0xfe
 800c1b2:	d901      	bls.n	800c1b8 <create_name+0x6c>
 800c1b4:	2306      	movs	r3, #6
 800c1b6:	e17d      	b.n	800c4b4 <create_name+0x368>
#if !_LFN_UNICODE
		w &= 0xFF;
 800c1b8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c1ba:	b2db      	uxtb	r3, r3
 800c1bc:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 800c1be:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c1c0:	2101      	movs	r1, #1
 800c1c2:	4618      	mov	r0, r3
 800c1c4:	f001 f9f0 	bl	800d5a8 <ff_convert>
 800c1c8:	4603      	mov	r3, r0
 800c1ca:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 800c1cc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c1ce:	2b00      	cmp	r3, #0
 800c1d0:	d101      	bne.n	800c1d6 <create_name+0x8a>
 800c1d2:	2306      	movs	r3, #6
 800c1d4:	e16e      	b.n	800c4b4 <create_name+0x368>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 800c1d6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c1d8:	2b7f      	cmp	r3, #127	; 0x7f
 800c1da:	d809      	bhi.n	800c1f0 <create_name+0xa4>
 800c1dc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c1de:	4619      	mov	r1, r3
 800c1e0:	488d      	ldr	r0, [pc, #564]	; (800c418 <create_name+0x2cc>)
 800c1e2:	f7fe fce0 	bl	800aba6 <chk_chr>
 800c1e6:	4603      	mov	r3, r0
 800c1e8:	2b00      	cmp	r3, #0
 800c1ea:	d001      	beq.n	800c1f0 <create_name+0xa4>
 800c1ec:	2306      	movs	r3, #6
 800c1ee:	e161      	b.n	800c4b4 <create_name+0x368>
		lfn[di++] = w;					/* Store the Unicode character */
 800c1f0:	697b      	ldr	r3, [r7, #20]
 800c1f2:	1c5a      	adds	r2, r3, #1
 800c1f4:	617a      	str	r2, [r7, #20]
 800c1f6:	005b      	lsls	r3, r3, #1
 800c1f8:	68fa      	ldr	r2, [r7, #12]
 800c1fa:	4413      	add	r3, r2
 800c1fc:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800c1fe:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 800c200:	e7b4      	b.n	800c16c <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 800c202:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 800c204:	693a      	ldr	r2, [r7, #16]
 800c206:	69bb      	ldr	r3, [r7, #24]
 800c208:	441a      	add	r2, r3
 800c20a:	683b      	ldr	r3, [r7, #0]
 800c20c:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800c20e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c210:	2b1f      	cmp	r3, #31
 800c212:	d801      	bhi.n	800c218 <create_name+0xcc>
 800c214:	2304      	movs	r3, #4
 800c216:	e000      	b.n	800c21a <create_name+0xce>
 800c218:	2300      	movs	r3, #0
 800c21a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800c21e:	e011      	b.n	800c244 <create_name+0xf8>
		w = lfn[di - 1];
 800c220:	697b      	ldr	r3, [r7, #20]
 800c222:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800c226:	3b01      	subs	r3, #1
 800c228:	005b      	lsls	r3, r3, #1
 800c22a:	68fa      	ldr	r2, [r7, #12]
 800c22c:	4413      	add	r3, r2
 800c22e:	881b      	ldrh	r3, [r3, #0]
 800c230:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w != ' ' && w != '.') break;
 800c232:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c234:	2b20      	cmp	r3, #32
 800c236:	d002      	beq.n	800c23e <create_name+0xf2>
 800c238:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c23a:	2b2e      	cmp	r3, #46	; 0x2e
 800c23c:	d106      	bne.n	800c24c <create_name+0x100>
		di--;
 800c23e:	697b      	ldr	r3, [r7, #20]
 800c240:	3b01      	subs	r3, #1
 800c242:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800c244:	697b      	ldr	r3, [r7, #20]
 800c246:	2b00      	cmp	r3, #0
 800c248:	d1ea      	bne.n	800c220 <create_name+0xd4>
 800c24a:	e000      	b.n	800c24e <create_name+0x102>
		if (w != ' ' && w != '.') break;
 800c24c:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 800c24e:	697b      	ldr	r3, [r7, #20]
 800c250:	005b      	lsls	r3, r3, #1
 800c252:	68fa      	ldr	r2, [r7, #12]
 800c254:	4413      	add	r3, r2
 800c256:	2200      	movs	r2, #0
 800c258:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 800c25a:	697b      	ldr	r3, [r7, #20]
 800c25c:	2b00      	cmp	r3, #0
 800c25e:	d101      	bne.n	800c264 <create_name+0x118>
 800c260:	2306      	movs	r3, #6
 800c262:	e127      	b.n	800c4b4 <create_name+0x368>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 800c264:	687b      	ldr	r3, [r7, #4]
 800c266:	3324      	adds	r3, #36	; 0x24
 800c268:	220b      	movs	r2, #11
 800c26a:	2120      	movs	r1, #32
 800c26c:	4618      	mov	r0, r3
 800c26e:	f7fe fc58 	bl	800ab22 <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 800c272:	2300      	movs	r3, #0
 800c274:	61bb      	str	r3, [r7, #24]
 800c276:	e002      	b.n	800c27e <create_name+0x132>
 800c278:	69bb      	ldr	r3, [r7, #24]
 800c27a:	3301      	adds	r3, #1
 800c27c:	61bb      	str	r3, [r7, #24]
 800c27e:	69bb      	ldr	r3, [r7, #24]
 800c280:	005b      	lsls	r3, r3, #1
 800c282:	68fa      	ldr	r2, [r7, #12]
 800c284:	4413      	add	r3, r2
 800c286:	881b      	ldrh	r3, [r3, #0]
 800c288:	2b20      	cmp	r3, #32
 800c28a:	d0f5      	beq.n	800c278 <create_name+0x12c>
 800c28c:	69bb      	ldr	r3, [r7, #24]
 800c28e:	005b      	lsls	r3, r3, #1
 800c290:	68fa      	ldr	r2, [r7, #12]
 800c292:	4413      	add	r3, r2
 800c294:	881b      	ldrh	r3, [r3, #0]
 800c296:	2b2e      	cmp	r3, #46	; 0x2e
 800c298:	d0ee      	beq.n	800c278 <create_name+0x12c>
	if (si) cf |= NS_LOSS | NS_LFN;
 800c29a:	69bb      	ldr	r3, [r7, #24]
 800c29c:	2b00      	cmp	r3, #0
 800c29e:	d009      	beq.n	800c2b4 <create_name+0x168>
 800c2a0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c2a4:	f043 0303 	orr.w	r3, r3, #3
 800c2a8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 800c2ac:	e002      	b.n	800c2b4 <create_name+0x168>
 800c2ae:	697b      	ldr	r3, [r7, #20]
 800c2b0:	3b01      	subs	r3, #1
 800c2b2:	617b      	str	r3, [r7, #20]
 800c2b4:	697b      	ldr	r3, [r7, #20]
 800c2b6:	2b00      	cmp	r3, #0
 800c2b8:	d009      	beq.n	800c2ce <create_name+0x182>
 800c2ba:	697b      	ldr	r3, [r7, #20]
 800c2bc:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800c2c0:	3b01      	subs	r3, #1
 800c2c2:	005b      	lsls	r3, r3, #1
 800c2c4:	68fa      	ldr	r2, [r7, #12]
 800c2c6:	4413      	add	r3, r2
 800c2c8:	881b      	ldrh	r3, [r3, #0]
 800c2ca:	2b2e      	cmp	r3, #46	; 0x2e
 800c2cc:	d1ef      	bne.n	800c2ae <create_name+0x162>

	i = b = 0; ni = 8;
 800c2ce:	2300      	movs	r3, #0
 800c2d0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800c2d4:	2300      	movs	r3, #0
 800c2d6:	623b      	str	r3, [r7, #32]
 800c2d8:	2308      	movs	r3, #8
 800c2da:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 800c2dc:	69bb      	ldr	r3, [r7, #24]
 800c2de:	1c5a      	adds	r2, r3, #1
 800c2e0:	61ba      	str	r2, [r7, #24]
 800c2e2:	005b      	lsls	r3, r3, #1
 800c2e4:	68fa      	ldr	r2, [r7, #12]
 800c2e6:	4413      	add	r3, r2
 800c2e8:	881b      	ldrh	r3, [r3, #0]
 800c2ea:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) break;					/* Break on end of the LFN */
 800c2ec:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c2ee:	2b00      	cmp	r3, #0
 800c2f0:	f000 8090 	beq.w	800c414 <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 800c2f4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c2f6:	2b20      	cmp	r3, #32
 800c2f8:	d006      	beq.n	800c308 <create_name+0x1bc>
 800c2fa:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c2fc:	2b2e      	cmp	r3, #46	; 0x2e
 800c2fe:	d10a      	bne.n	800c316 <create_name+0x1ca>
 800c300:	69ba      	ldr	r2, [r7, #24]
 800c302:	697b      	ldr	r3, [r7, #20]
 800c304:	429a      	cmp	r2, r3
 800c306:	d006      	beq.n	800c316 <create_name+0x1ca>
			cf |= NS_LOSS | NS_LFN; continue;
 800c308:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c30c:	f043 0303 	orr.w	r3, r3, #3
 800c310:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800c314:	e07d      	b.n	800c412 <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 800c316:	6a3a      	ldr	r2, [r7, #32]
 800c318:	69fb      	ldr	r3, [r7, #28]
 800c31a:	429a      	cmp	r2, r3
 800c31c:	d203      	bcs.n	800c326 <create_name+0x1da>
 800c31e:	69ba      	ldr	r2, [r7, #24]
 800c320:	697b      	ldr	r3, [r7, #20]
 800c322:	429a      	cmp	r2, r3
 800c324:	d123      	bne.n	800c36e <create_name+0x222>
			if (ni == 11) {				/* Long extension */
 800c326:	69fb      	ldr	r3, [r7, #28]
 800c328:	2b0b      	cmp	r3, #11
 800c32a:	d106      	bne.n	800c33a <create_name+0x1ee>
				cf |= NS_LOSS | NS_LFN; break;
 800c32c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c330:	f043 0303 	orr.w	r3, r3, #3
 800c334:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800c338:	e075      	b.n	800c426 <create_name+0x2da>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 800c33a:	69ba      	ldr	r2, [r7, #24]
 800c33c:	697b      	ldr	r3, [r7, #20]
 800c33e:	429a      	cmp	r2, r3
 800c340:	d005      	beq.n	800c34e <create_name+0x202>
 800c342:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c346:	f043 0303 	orr.w	r3, r3, #3
 800c34a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (si > di) break;			/* No extension */
 800c34e:	69ba      	ldr	r2, [r7, #24]
 800c350:	697b      	ldr	r3, [r7, #20]
 800c352:	429a      	cmp	r2, r3
 800c354:	d866      	bhi.n	800c424 <create_name+0x2d8>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 800c356:	697b      	ldr	r3, [r7, #20]
 800c358:	61bb      	str	r3, [r7, #24]
 800c35a:	2308      	movs	r3, #8
 800c35c:	623b      	str	r3, [r7, #32]
 800c35e:	230b      	movs	r3, #11
 800c360:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 800c362:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800c366:	009b      	lsls	r3, r3, #2
 800c368:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800c36c:	e051      	b.n	800c412 <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 800c36e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c370:	2b7f      	cmp	r3, #127	; 0x7f
 800c372:	d914      	bls.n	800c39e <create_name+0x252>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 800c374:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c376:	2100      	movs	r1, #0
 800c378:	4618      	mov	r0, r3
 800c37a:	f001 f915 	bl	800d5a8 <ff_convert>
 800c37e:	4603      	mov	r3, r0
 800c380:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 800c382:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c384:	2b00      	cmp	r3, #0
 800c386:	d004      	beq.n	800c392 <create_name+0x246>
 800c388:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c38a:	3b80      	subs	r3, #128	; 0x80
 800c38c:	4a23      	ldr	r2, [pc, #140]	; (800c41c <create_name+0x2d0>)
 800c38e:	5cd3      	ldrb	r3, [r2, r3]
 800c390:	84bb      	strh	r3, [r7, #36]	; 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 800c392:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c396:	f043 0302 	orr.w	r3, r3, #2
 800c39a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 800c39e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c3a0:	2b00      	cmp	r3, #0
 800c3a2:	d007      	beq.n	800c3b4 <create_name+0x268>
 800c3a4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c3a6:	4619      	mov	r1, r3
 800c3a8:	481d      	ldr	r0, [pc, #116]	; (800c420 <create_name+0x2d4>)
 800c3aa:	f7fe fbfc 	bl	800aba6 <chk_chr>
 800c3ae:	4603      	mov	r3, r0
 800c3b0:	2b00      	cmp	r3, #0
 800c3b2:	d008      	beq.n	800c3c6 <create_name+0x27a>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 800c3b4:	235f      	movs	r3, #95	; 0x5f
 800c3b6:	84bb      	strh	r3, [r7, #36]	; 0x24
 800c3b8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c3bc:	f043 0303 	orr.w	r3, r3, #3
 800c3c0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800c3c4:	e01b      	b.n	800c3fe <create_name+0x2b2>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 800c3c6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c3c8:	2b40      	cmp	r3, #64	; 0x40
 800c3ca:	d909      	bls.n	800c3e0 <create_name+0x294>
 800c3cc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c3ce:	2b5a      	cmp	r3, #90	; 0x5a
 800c3d0:	d806      	bhi.n	800c3e0 <create_name+0x294>
					b |= 2;
 800c3d2:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800c3d6:	f043 0302 	orr.w	r3, r3, #2
 800c3da:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800c3de:	e00e      	b.n	800c3fe <create_name+0x2b2>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 800c3e0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c3e2:	2b60      	cmp	r3, #96	; 0x60
 800c3e4:	d90b      	bls.n	800c3fe <create_name+0x2b2>
 800c3e6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c3e8:	2b7a      	cmp	r3, #122	; 0x7a
 800c3ea:	d808      	bhi.n	800c3fe <create_name+0x2b2>
						b |= 1; w -= 0x20;
 800c3ec:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800c3f0:	f043 0301 	orr.w	r3, r3, #1
 800c3f4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800c3f8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c3fa:	3b20      	subs	r3, #32
 800c3fc:	84bb      	strh	r3, [r7, #36]	; 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 800c3fe:	6a3b      	ldr	r3, [r7, #32]
 800c400:	1c5a      	adds	r2, r3, #1
 800c402:	623a      	str	r2, [r7, #32]
 800c404:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800c406:	b2d1      	uxtb	r1, r2
 800c408:	687a      	ldr	r2, [r7, #4]
 800c40a:	4413      	add	r3, r2
 800c40c:	460a      	mov	r2, r1
 800c40e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		w = lfn[si++];					/* Get an LFN character */
 800c412:	e763      	b.n	800c2dc <create_name+0x190>
		if (!w) break;					/* Break on end of the LFN */
 800c414:	bf00      	nop
 800c416:	e006      	b.n	800c426 <create_name+0x2da>
 800c418:	0800e140 	.word	0x0800e140
 800c41c:	0800e1a0 	.word	0x0800e1a0
 800c420:	0800e14c 	.word	0x0800e14c
			if (si > di) break;			/* No extension */
 800c424:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800c426:	687b      	ldr	r3, [r7, #4]
 800c428:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800c42c:	2be5      	cmp	r3, #229	; 0xe5
 800c42e:	d103      	bne.n	800c438 <create_name+0x2ec>
 800c430:	687b      	ldr	r3, [r7, #4]
 800c432:	2205      	movs	r2, #5
 800c434:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

	if (ni == 8) b <<= 2;
 800c438:	69fb      	ldr	r3, [r7, #28]
 800c43a:	2b08      	cmp	r3, #8
 800c43c:	d104      	bne.n	800c448 <create_name+0x2fc>
 800c43e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800c442:	009b      	lsls	r3, r3, #2
 800c444:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 800c448:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800c44c:	f003 030c 	and.w	r3, r3, #12
 800c450:	2b0c      	cmp	r3, #12
 800c452:	d005      	beq.n	800c460 <create_name+0x314>
 800c454:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800c458:	f003 0303 	and.w	r3, r3, #3
 800c45c:	2b03      	cmp	r3, #3
 800c45e:	d105      	bne.n	800c46c <create_name+0x320>
 800c460:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c464:	f043 0302 	orr.w	r3, r3, #2
 800c468:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 800c46c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c470:	f003 0302 	and.w	r3, r3, #2
 800c474:	2b00      	cmp	r3, #0
 800c476:	d117      	bne.n	800c4a8 <create_name+0x35c>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 800c478:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800c47c:	f003 0303 	and.w	r3, r3, #3
 800c480:	2b01      	cmp	r3, #1
 800c482:	d105      	bne.n	800c490 <create_name+0x344>
 800c484:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c488:	f043 0310 	orr.w	r3, r3, #16
 800c48c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 800c490:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800c494:	f003 030c 	and.w	r3, r3, #12
 800c498:	2b04      	cmp	r3, #4
 800c49a:	d105      	bne.n	800c4a8 <create_name+0x35c>
 800c49c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c4a0:	f043 0308 	orr.w	r3, r3, #8
 800c4a4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 800c4a8:	687b      	ldr	r3, [r7, #4]
 800c4aa:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800c4ae:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

	return FR_OK;
 800c4b2:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 800c4b4:	4618      	mov	r0, r3
 800c4b6:	3728      	adds	r7, #40	; 0x28
 800c4b8:	46bd      	mov	sp, r7
 800c4ba:	bd80      	pop	{r7, pc}

0800c4bc <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800c4bc:	b580      	push	{r7, lr}
 800c4be:	b086      	sub	sp, #24
 800c4c0:	af00      	add	r7, sp, #0
 800c4c2:	6078      	str	r0, [r7, #4]
 800c4c4:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800c4c6:	687b      	ldr	r3, [r7, #4]
 800c4c8:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800c4ca:	693b      	ldr	r3, [r7, #16]
 800c4cc:	681b      	ldr	r3, [r3, #0]
 800c4ce:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800c4d0:	e002      	b.n	800c4d8 <follow_path+0x1c>
 800c4d2:	683b      	ldr	r3, [r7, #0]
 800c4d4:	3301      	adds	r3, #1
 800c4d6:	603b      	str	r3, [r7, #0]
 800c4d8:	683b      	ldr	r3, [r7, #0]
 800c4da:	781b      	ldrb	r3, [r3, #0]
 800c4dc:	2b2f      	cmp	r3, #47	; 0x2f
 800c4de:	d0f8      	beq.n	800c4d2 <follow_path+0x16>
 800c4e0:	683b      	ldr	r3, [r7, #0]
 800c4e2:	781b      	ldrb	r3, [r3, #0]
 800c4e4:	2b5c      	cmp	r3, #92	; 0x5c
 800c4e6:	d0f4      	beq.n	800c4d2 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800c4e8:	693b      	ldr	r3, [r7, #16]
 800c4ea:	2200      	movs	r2, #0
 800c4ec:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800c4ee:	683b      	ldr	r3, [r7, #0]
 800c4f0:	781b      	ldrb	r3, [r3, #0]
 800c4f2:	2b1f      	cmp	r3, #31
 800c4f4:	d80a      	bhi.n	800c50c <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800c4f6:	687b      	ldr	r3, [r7, #4]
 800c4f8:	2280      	movs	r2, #128	; 0x80
 800c4fa:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 800c4fe:	2100      	movs	r1, #0
 800c500:	6878      	ldr	r0, [r7, #4]
 800c502:	f7ff f8fd 	bl	800b700 <dir_sdi>
 800c506:	4603      	mov	r3, r0
 800c508:	75fb      	strb	r3, [r7, #23]
 800c50a:	e048      	b.n	800c59e <follow_path+0xe2>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800c50c:	463b      	mov	r3, r7
 800c50e:	4619      	mov	r1, r3
 800c510:	6878      	ldr	r0, [r7, #4]
 800c512:	f7ff fe1b 	bl	800c14c <create_name>
 800c516:	4603      	mov	r3, r0
 800c518:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800c51a:	7dfb      	ldrb	r3, [r7, #23]
 800c51c:	2b00      	cmp	r3, #0
 800c51e:	d139      	bne.n	800c594 <follow_path+0xd8>
			res = dir_find(dp);				/* Find an object with the segment name */
 800c520:	6878      	ldr	r0, [r7, #4]
 800c522:	f7ff fc5a 	bl	800bdda <dir_find>
 800c526:	4603      	mov	r3, r0
 800c528:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800c52a:	687b      	ldr	r3, [r7, #4]
 800c52c:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800c530:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800c532:	7dfb      	ldrb	r3, [r7, #23]
 800c534:	2b00      	cmp	r3, #0
 800c536:	d00a      	beq.n	800c54e <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800c538:	7dfb      	ldrb	r3, [r7, #23]
 800c53a:	2b04      	cmp	r3, #4
 800c53c:	d12c      	bne.n	800c598 <follow_path+0xdc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800c53e:	7afb      	ldrb	r3, [r7, #11]
 800c540:	f003 0304 	and.w	r3, r3, #4
 800c544:	2b00      	cmp	r3, #0
 800c546:	d127      	bne.n	800c598 <follow_path+0xdc>
 800c548:	2305      	movs	r3, #5
 800c54a:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800c54c:	e024      	b.n	800c598 <follow_path+0xdc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800c54e:	7afb      	ldrb	r3, [r7, #11]
 800c550:	f003 0304 	and.w	r3, r3, #4
 800c554:	2b00      	cmp	r3, #0
 800c556:	d121      	bne.n	800c59c <follow_path+0xe0>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800c558:	693b      	ldr	r3, [r7, #16]
 800c55a:	799b      	ldrb	r3, [r3, #6]
 800c55c:	f003 0310 	and.w	r3, r3, #16
 800c560:	2b00      	cmp	r3, #0
 800c562:	d102      	bne.n	800c56a <follow_path+0xae>
				res = FR_NO_PATH; break;
 800c564:	2305      	movs	r3, #5
 800c566:	75fb      	strb	r3, [r7, #23]
 800c568:	e019      	b.n	800c59e <follow_path+0xe2>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800c56a:	68fb      	ldr	r3, [r7, #12]
 800c56c:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800c570:	687b      	ldr	r3, [r7, #4]
 800c572:	695b      	ldr	r3, [r3, #20]
 800c574:	68fa      	ldr	r2, [r7, #12]
 800c576:	8992      	ldrh	r2, [r2, #12]
 800c578:	fbb3 f0f2 	udiv	r0, r3, r2
 800c57c:	fb00 f202 	mul.w	r2, r0, r2
 800c580:	1a9b      	subs	r3, r3, r2
 800c582:	440b      	add	r3, r1
 800c584:	4619      	mov	r1, r3
 800c586:	68f8      	ldr	r0, [r7, #12]
 800c588:	f7ff fa60 	bl	800ba4c <ld_clust>
 800c58c:	4602      	mov	r2, r0
 800c58e:	693b      	ldr	r3, [r7, #16]
 800c590:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800c592:	e7bb      	b.n	800c50c <follow_path+0x50>
			if (res != FR_OK) break;
 800c594:	bf00      	nop
 800c596:	e002      	b.n	800c59e <follow_path+0xe2>
				break;
 800c598:	bf00      	nop
 800c59a:	e000      	b.n	800c59e <follow_path+0xe2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800c59c:	bf00      	nop
			}
		}
	}

	return res;
 800c59e:	7dfb      	ldrb	r3, [r7, #23]
}
 800c5a0:	4618      	mov	r0, r3
 800c5a2:	3718      	adds	r7, #24
 800c5a4:	46bd      	mov	sp, r7
 800c5a6:	bd80      	pop	{r7, pc}

0800c5a8 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800c5a8:	b480      	push	{r7}
 800c5aa:	b087      	sub	sp, #28
 800c5ac:	af00      	add	r7, sp, #0
 800c5ae:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800c5b0:	f04f 33ff 	mov.w	r3, #4294967295
 800c5b4:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800c5b6:	687b      	ldr	r3, [r7, #4]
 800c5b8:	681b      	ldr	r3, [r3, #0]
 800c5ba:	2b00      	cmp	r3, #0
 800c5bc:	d031      	beq.n	800c622 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800c5be:	687b      	ldr	r3, [r7, #4]
 800c5c0:	681b      	ldr	r3, [r3, #0]
 800c5c2:	617b      	str	r3, [r7, #20]
 800c5c4:	e002      	b.n	800c5cc <get_ldnumber+0x24>
 800c5c6:	697b      	ldr	r3, [r7, #20]
 800c5c8:	3301      	adds	r3, #1
 800c5ca:	617b      	str	r3, [r7, #20]
 800c5cc:	697b      	ldr	r3, [r7, #20]
 800c5ce:	781b      	ldrb	r3, [r3, #0]
 800c5d0:	2b1f      	cmp	r3, #31
 800c5d2:	d903      	bls.n	800c5dc <get_ldnumber+0x34>
 800c5d4:	697b      	ldr	r3, [r7, #20]
 800c5d6:	781b      	ldrb	r3, [r3, #0]
 800c5d8:	2b3a      	cmp	r3, #58	; 0x3a
 800c5da:	d1f4      	bne.n	800c5c6 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800c5dc:	697b      	ldr	r3, [r7, #20]
 800c5de:	781b      	ldrb	r3, [r3, #0]
 800c5e0:	2b3a      	cmp	r3, #58	; 0x3a
 800c5e2:	d11c      	bne.n	800c61e <get_ldnumber+0x76>
			tp = *path;
 800c5e4:	687b      	ldr	r3, [r7, #4]
 800c5e6:	681b      	ldr	r3, [r3, #0]
 800c5e8:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800c5ea:	68fb      	ldr	r3, [r7, #12]
 800c5ec:	1c5a      	adds	r2, r3, #1
 800c5ee:	60fa      	str	r2, [r7, #12]
 800c5f0:	781b      	ldrb	r3, [r3, #0]
 800c5f2:	3b30      	subs	r3, #48	; 0x30
 800c5f4:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800c5f6:	68bb      	ldr	r3, [r7, #8]
 800c5f8:	2b09      	cmp	r3, #9
 800c5fa:	d80e      	bhi.n	800c61a <get_ldnumber+0x72>
 800c5fc:	68fa      	ldr	r2, [r7, #12]
 800c5fe:	697b      	ldr	r3, [r7, #20]
 800c600:	429a      	cmp	r2, r3
 800c602:	d10a      	bne.n	800c61a <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800c604:	68bb      	ldr	r3, [r7, #8]
 800c606:	2b00      	cmp	r3, #0
 800c608:	d107      	bne.n	800c61a <get_ldnumber+0x72>
					vol = (int)i;
 800c60a:	68bb      	ldr	r3, [r7, #8]
 800c60c:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800c60e:	697b      	ldr	r3, [r7, #20]
 800c610:	3301      	adds	r3, #1
 800c612:	617b      	str	r3, [r7, #20]
 800c614:	687b      	ldr	r3, [r7, #4]
 800c616:	697a      	ldr	r2, [r7, #20]
 800c618:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800c61a:	693b      	ldr	r3, [r7, #16]
 800c61c:	e002      	b.n	800c624 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800c61e:	2300      	movs	r3, #0
 800c620:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800c622:	693b      	ldr	r3, [r7, #16]
}
 800c624:	4618      	mov	r0, r3
 800c626:	371c      	adds	r7, #28
 800c628:	46bd      	mov	sp, r7
 800c62a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c62e:	4770      	bx	lr

0800c630 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800c630:	b580      	push	{r7, lr}
 800c632:	b082      	sub	sp, #8
 800c634:	af00      	add	r7, sp, #0
 800c636:	6078      	str	r0, [r7, #4]
 800c638:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800c63a:	687b      	ldr	r3, [r7, #4]
 800c63c:	2200      	movs	r2, #0
 800c63e:	70da      	strb	r2, [r3, #3]
 800c640:	687b      	ldr	r3, [r7, #4]
 800c642:	f04f 32ff 	mov.w	r2, #4294967295
 800c646:	635a      	str	r2, [r3, #52]	; 0x34
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800c648:	6839      	ldr	r1, [r7, #0]
 800c64a:	6878      	ldr	r0, [r7, #4]
 800c64c:	f7fe fc76 	bl	800af3c <move_window>
 800c650:	4603      	mov	r3, r0
 800c652:	2b00      	cmp	r3, #0
 800c654:	d001      	beq.n	800c65a <check_fs+0x2a>
 800c656:	2304      	movs	r3, #4
 800c658:	e038      	b.n	800c6cc <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800c65a:	687b      	ldr	r3, [r7, #4]
 800c65c:	3338      	adds	r3, #56	; 0x38
 800c65e:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800c662:	4618      	mov	r0, r3
 800c664:	f7fe f9ba 	bl	800a9dc <ld_word>
 800c668:	4603      	mov	r3, r0
 800c66a:	461a      	mov	r2, r3
 800c66c:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800c670:	429a      	cmp	r2, r3
 800c672:	d001      	beq.n	800c678 <check_fs+0x48>
 800c674:	2303      	movs	r3, #3
 800c676:	e029      	b.n	800c6cc <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800c678:	687b      	ldr	r3, [r7, #4]
 800c67a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800c67e:	2be9      	cmp	r3, #233	; 0xe9
 800c680:	d009      	beq.n	800c696 <check_fs+0x66>
 800c682:	687b      	ldr	r3, [r7, #4]
 800c684:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800c688:	2beb      	cmp	r3, #235	; 0xeb
 800c68a:	d11e      	bne.n	800c6ca <check_fs+0x9a>
 800c68c:	687b      	ldr	r3, [r7, #4]
 800c68e:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800c692:	2b90      	cmp	r3, #144	; 0x90
 800c694:	d119      	bne.n	800c6ca <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800c696:	687b      	ldr	r3, [r7, #4]
 800c698:	3338      	adds	r3, #56	; 0x38
 800c69a:	3336      	adds	r3, #54	; 0x36
 800c69c:	4618      	mov	r0, r3
 800c69e:	f7fe f9b5 	bl	800aa0c <ld_dword>
 800c6a2:	4603      	mov	r3, r0
 800c6a4:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800c6a8:	4a0a      	ldr	r2, [pc, #40]	; (800c6d4 <check_fs+0xa4>)
 800c6aa:	4293      	cmp	r3, r2
 800c6ac:	d101      	bne.n	800c6b2 <check_fs+0x82>
 800c6ae:	2300      	movs	r3, #0
 800c6b0:	e00c      	b.n	800c6cc <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800c6b2:	687b      	ldr	r3, [r7, #4]
 800c6b4:	3338      	adds	r3, #56	; 0x38
 800c6b6:	3352      	adds	r3, #82	; 0x52
 800c6b8:	4618      	mov	r0, r3
 800c6ba:	f7fe f9a7 	bl	800aa0c <ld_dword>
 800c6be:	4603      	mov	r3, r0
 800c6c0:	4a05      	ldr	r2, [pc, #20]	; (800c6d8 <check_fs+0xa8>)
 800c6c2:	4293      	cmp	r3, r2
 800c6c4:	d101      	bne.n	800c6ca <check_fs+0x9a>
 800c6c6:	2300      	movs	r3, #0
 800c6c8:	e000      	b.n	800c6cc <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800c6ca:	2302      	movs	r3, #2
}
 800c6cc:	4618      	mov	r0, r3
 800c6ce:	3708      	adds	r7, #8
 800c6d0:	46bd      	mov	sp, r7
 800c6d2:	bd80      	pop	{r7, pc}
 800c6d4:	00544146 	.word	0x00544146
 800c6d8:	33544146 	.word	0x33544146

0800c6dc <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800c6dc:	b580      	push	{r7, lr}
 800c6de:	b096      	sub	sp, #88	; 0x58
 800c6e0:	af00      	add	r7, sp, #0
 800c6e2:	60f8      	str	r0, [r7, #12]
 800c6e4:	60b9      	str	r1, [r7, #8]
 800c6e6:	4613      	mov	r3, r2
 800c6e8:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800c6ea:	68bb      	ldr	r3, [r7, #8]
 800c6ec:	2200      	movs	r2, #0
 800c6ee:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800c6f0:	68f8      	ldr	r0, [r7, #12]
 800c6f2:	f7ff ff59 	bl	800c5a8 <get_ldnumber>
 800c6f6:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800c6f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c6fa:	2b00      	cmp	r3, #0
 800c6fc:	da01      	bge.n	800c702 <find_volume+0x26>
 800c6fe:	230b      	movs	r3, #11
 800c700:	e265      	b.n	800cbce <find_volume+0x4f2>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800c702:	4a9f      	ldr	r2, [pc, #636]	; (800c980 <find_volume+0x2a4>)
 800c704:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c706:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c70a:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800c70c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c70e:	2b00      	cmp	r3, #0
 800c710:	d101      	bne.n	800c716 <find_volume+0x3a>
 800c712:	230c      	movs	r3, #12
 800c714:	e25b      	b.n	800cbce <find_volume+0x4f2>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800c716:	68bb      	ldr	r3, [r7, #8]
 800c718:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c71a:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800c71c:	79fb      	ldrb	r3, [r7, #7]
 800c71e:	f023 0301 	bic.w	r3, r3, #1
 800c722:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800c724:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c726:	781b      	ldrb	r3, [r3, #0]
 800c728:	2b00      	cmp	r3, #0
 800c72a:	d01a      	beq.n	800c762 <find_volume+0x86>
		stat = disk_status(fs->drv);
 800c72c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c72e:	785b      	ldrb	r3, [r3, #1]
 800c730:	4618      	mov	r0, r3
 800c732:	f7fe f8b5 	bl	800a8a0 <disk_status>
 800c736:	4603      	mov	r3, r0
 800c738:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800c73c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800c740:	f003 0301 	and.w	r3, r3, #1
 800c744:	2b00      	cmp	r3, #0
 800c746:	d10c      	bne.n	800c762 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800c748:	79fb      	ldrb	r3, [r7, #7]
 800c74a:	2b00      	cmp	r3, #0
 800c74c:	d007      	beq.n	800c75e <find_volume+0x82>
 800c74e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800c752:	f003 0304 	and.w	r3, r3, #4
 800c756:	2b00      	cmp	r3, #0
 800c758:	d001      	beq.n	800c75e <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 800c75a:	230a      	movs	r3, #10
 800c75c:	e237      	b.n	800cbce <find_volume+0x4f2>
			}
			return FR_OK;				/* The file system object is valid */
 800c75e:	2300      	movs	r3, #0
 800c760:	e235      	b.n	800cbce <find_volume+0x4f2>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800c762:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c764:	2200      	movs	r2, #0
 800c766:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800c768:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c76a:	b2da      	uxtb	r2, r3
 800c76c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c76e:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800c770:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c772:	785b      	ldrb	r3, [r3, #1]
 800c774:	4618      	mov	r0, r3
 800c776:	f7fe f8ad 	bl	800a8d4 <disk_initialize>
 800c77a:	4603      	mov	r3, r0
 800c77c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800c780:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800c784:	f003 0301 	and.w	r3, r3, #1
 800c788:	2b00      	cmp	r3, #0
 800c78a:	d001      	beq.n	800c790 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800c78c:	2303      	movs	r3, #3
 800c78e:	e21e      	b.n	800cbce <find_volume+0x4f2>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800c790:	79fb      	ldrb	r3, [r7, #7]
 800c792:	2b00      	cmp	r3, #0
 800c794:	d007      	beq.n	800c7a6 <find_volume+0xca>
 800c796:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800c79a:	f003 0304 	and.w	r3, r3, #4
 800c79e:	2b00      	cmp	r3, #0
 800c7a0:	d001      	beq.n	800c7a6 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 800c7a2:	230a      	movs	r3, #10
 800c7a4:	e213      	b.n	800cbce <find_volume+0x4f2>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 800c7a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c7a8:	7858      	ldrb	r0, [r3, #1]
 800c7aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c7ac:	330c      	adds	r3, #12
 800c7ae:	461a      	mov	r2, r3
 800c7b0:	2102      	movs	r1, #2
 800c7b2:	f7fe f8f5 	bl	800a9a0 <disk_ioctl>
 800c7b6:	4603      	mov	r3, r0
 800c7b8:	2b00      	cmp	r3, #0
 800c7ba:	d001      	beq.n	800c7c0 <find_volume+0xe4>
 800c7bc:	2301      	movs	r3, #1
 800c7be:	e206      	b.n	800cbce <find_volume+0x4f2>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 800c7c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c7c2:	899b      	ldrh	r3, [r3, #12]
 800c7c4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c7c8:	d80d      	bhi.n	800c7e6 <find_volume+0x10a>
 800c7ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c7cc:	899b      	ldrh	r3, [r3, #12]
 800c7ce:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c7d2:	d308      	bcc.n	800c7e6 <find_volume+0x10a>
 800c7d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c7d6:	899b      	ldrh	r3, [r3, #12]
 800c7d8:	461a      	mov	r2, r3
 800c7da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c7dc:	899b      	ldrh	r3, [r3, #12]
 800c7de:	3b01      	subs	r3, #1
 800c7e0:	4013      	ands	r3, r2
 800c7e2:	2b00      	cmp	r3, #0
 800c7e4:	d001      	beq.n	800c7ea <find_volume+0x10e>
 800c7e6:	2301      	movs	r3, #1
 800c7e8:	e1f1      	b.n	800cbce <find_volume+0x4f2>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800c7ea:	2300      	movs	r3, #0
 800c7ec:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800c7ee:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800c7f0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800c7f2:	f7ff ff1d 	bl	800c630 <check_fs>
 800c7f6:	4603      	mov	r3, r0
 800c7f8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800c7fc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800c800:	2b02      	cmp	r3, #2
 800c802:	d149      	bne.n	800c898 <find_volume+0x1bc>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800c804:	2300      	movs	r3, #0
 800c806:	643b      	str	r3, [r7, #64]	; 0x40
 800c808:	e01e      	b.n	800c848 <find_volume+0x16c>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800c80a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c80c:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800c810:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c812:	011b      	lsls	r3, r3, #4
 800c814:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800c818:	4413      	add	r3, r2
 800c81a:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800c81c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c81e:	3304      	adds	r3, #4
 800c820:	781b      	ldrb	r3, [r3, #0]
 800c822:	2b00      	cmp	r3, #0
 800c824:	d006      	beq.n	800c834 <find_volume+0x158>
 800c826:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c828:	3308      	adds	r3, #8
 800c82a:	4618      	mov	r0, r3
 800c82c:	f7fe f8ee 	bl	800aa0c <ld_dword>
 800c830:	4602      	mov	r2, r0
 800c832:	e000      	b.n	800c836 <find_volume+0x15a>
 800c834:	2200      	movs	r2, #0
 800c836:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c838:	009b      	lsls	r3, r3, #2
 800c83a:	3358      	adds	r3, #88	; 0x58
 800c83c:	443b      	add	r3, r7
 800c83e:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800c842:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c844:	3301      	adds	r3, #1
 800c846:	643b      	str	r3, [r7, #64]	; 0x40
 800c848:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c84a:	2b03      	cmp	r3, #3
 800c84c:	d9dd      	bls.n	800c80a <find_volume+0x12e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800c84e:	2300      	movs	r3, #0
 800c850:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 800c852:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c854:	2b00      	cmp	r3, #0
 800c856:	d002      	beq.n	800c85e <find_volume+0x182>
 800c858:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c85a:	3b01      	subs	r3, #1
 800c85c:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800c85e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c860:	009b      	lsls	r3, r3, #2
 800c862:	3358      	adds	r3, #88	; 0x58
 800c864:	443b      	add	r3, r7
 800c866:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800c86a:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800c86c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c86e:	2b00      	cmp	r3, #0
 800c870:	d005      	beq.n	800c87e <find_volume+0x1a2>
 800c872:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800c874:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800c876:	f7ff fedb 	bl	800c630 <check_fs>
 800c87a:	4603      	mov	r3, r0
 800c87c:	e000      	b.n	800c880 <find_volume+0x1a4>
 800c87e:	2303      	movs	r3, #3
 800c880:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800c884:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800c888:	2b01      	cmp	r3, #1
 800c88a:	d905      	bls.n	800c898 <find_volume+0x1bc>
 800c88c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c88e:	3301      	adds	r3, #1
 800c890:	643b      	str	r3, [r7, #64]	; 0x40
 800c892:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c894:	2b03      	cmp	r3, #3
 800c896:	d9e2      	bls.n	800c85e <find_volume+0x182>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800c898:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800c89c:	2b04      	cmp	r3, #4
 800c89e:	d101      	bne.n	800c8a4 <find_volume+0x1c8>
 800c8a0:	2301      	movs	r3, #1
 800c8a2:	e194      	b.n	800cbce <find_volume+0x4f2>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800c8a4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800c8a8:	2b01      	cmp	r3, #1
 800c8aa:	d901      	bls.n	800c8b0 <find_volume+0x1d4>
 800c8ac:	230d      	movs	r3, #13
 800c8ae:	e18e      	b.n	800cbce <find_volume+0x4f2>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800c8b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c8b2:	3338      	adds	r3, #56	; 0x38
 800c8b4:	330b      	adds	r3, #11
 800c8b6:	4618      	mov	r0, r3
 800c8b8:	f7fe f890 	bl	800a9dc <ld_word>
 800c8bc:	4603      	mov	r3, r0
 800c8be:	461a      	mov	r2, r3
 800c8c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c8c2:	899b      	ldrh	r3, [r3, #12]
 800c8c4:	429a      	cmp	r2, r3
 800c8c6:	d001      	beq.n	800c8cc <find_volume+0x1f0>
 800c8c8:	230d      	movs	r3, #13
 800c8ca:	e180      	b.n	800cbce <find_volume+0x4f2>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800c8cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c8ce:	3338      	adds	r3, #56	; 0x38
 800c8d0:	3316      	adds	r3, #22
 800c8d2:	4618      	mov	r0, r3
 800c8d4:	f7fe f882 	bl	800a9dc <ld_word>
 800c8d8:	4603      	mov	r3, r0
 800c8da:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800c8dc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c8de:	2b00      	cmp	r3, #0
 800c8e0:	d106      	bne.n	800c8f0 <find_volume+0x214>
 800c8e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c8e4:	3338      	adds	r3, #56	; 0x38
 800c8e6:	3324      	adds	r3, #36	; 0x24
 800c8e8:	4618      	mov	r0, r3
 800c8ea:	f7fe f88f 	bl	800aa0c <ld_dword>
 800c8ee:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 800c8f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c8f2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800c8f4:	621a      	str	r2, [r3, #32]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800c8f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c8f8:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 800c8fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c8fe:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800c900:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c902:	789b      	ldrb	r3, [r3, #2]
 800c904:	2b01      	cmp	r3, #1
 800c906:	d005      	beq.n	800c914 <find_volume+0x238>
 800c908:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c90a:	789b      	ldrb	r3, [r3, #2]
 800c90c:	2b02      	cmp	r3, #2
 800c90e:	d001      	beq.n	800c914 <find_volume+0x238>
 800c910:	230d      	movs	r3, #13
 800c912:	e15c      	b.n	800cbce <find_volume+0x4f2>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800c914:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c916:	789b      	ldrb	r3, [r3, #2]
 800c918:	461a      	mov	r2, r3
 800c91a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c91c:	fb02 f303 	mul.w	r3, r2, r3
 800c920:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800c922:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c924:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c928:	b29a      	uxth	r2, r3
 800c92a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c92c:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800c92e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c930:	895b      	ldrh	r3, [r3, #10]
 800c932:	2b00      	cmp	r3, #0
 800c934:	d008      	beq.n	800c948 <find_volume+0x26c>
 800c936:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c938:	895b      	ldrh	r3, [r3, #10]
 800c93a:	461a      	mov	r2, r3
 800c93c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c93e:	895b      	ldrh	r3, [r3, #10]
 800c940:	3b01      	subs	r3, #1
 800c942:	4013      	ands	r3, r2
 800c944:	2b00      	cmp	r3, #0
 800c946:	d001      	beq.n	800c94c <find_volume+0x270>
 800c948:	230d      	movs	r3, #13
 800c94a:	e140      	b.n	800cbce <find_volume+0x4f2>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800c94c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c94e:	3338      	adds	r3, #56	; 0x38
 800c950:	3311      	adds	r3, #17
 800c952:	4618      	mov	r0, r3
 800c954:	f7fe f842 	bl	800a9dc <ld_word>
 800c958:	4603      	mov	r3, r0
 800c95a:	461a      	mov	r2, r3
 800c95c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c95e:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800c960:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c962:	891b      	ldrh	r3, [r3, #8]
 800c964:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c966:	8992      	ldrh	r2, [r2, #12]
 800c968:	0952      	lsrs	r2, r2, #5
 800c96a:	b292      	uxth	r2, r2
 800c96c:	fbb3 f1f2 	udiv	r1, r3, r2
 800c970:	fb01 f202 	mul.w	r2, r1, r2
 800c974:	1a9b      	subs	r3, r3, r2
 800c976:	b29b      	uxth	r3, r3
 800c978:	2b00      	cmp	r3, #0
 800c97a:	d003      	beq.n	800c984 <find_volume+0x2a8>
 800c97c:	230d      	movs	r3, #13
 800c97e:	e126      	b.n	800cbce <find_volume+0x4f2>
 800c980:	20016e7c 	.word	0x20016e7c

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800c984:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c986:	3338      	adds	r3, #56	; 0x38
 800c988:	3313      	adds	r3, #19
 800c98a:	4618      	mov	r0, r3
 800c98c:	f7fe f826 	bl	800a9dc <ld_word>
 800c990:	4603      	mov	r3, r0
 800c992:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800c994:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c996:	2b00      	cmp	r3, #0
 800c998:	d106      	bne.n	800c9a8 <find_volume+0x2cc>
 800c99a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c99c:	3338      	adds	r3, #56	; 0x38
 800c99e:	3320      	adds	r3, #32
 800c9a0:	4618      	mov	r0, r3
 800c9a2:	f7fe f833 	bl	800aa0c <ld_dword>
 800c9a6:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800c9a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c9aa:	3338      	adds	r3, #56	; 0x38
 800c9ac:	330e      	adds	r3, #14
 800c9ae:	4618      	mov	r0, r3
 800c9b0:	f7fe f814 	bl	800a9dc <ld_word>
 800c9b4:	4603      	mov	r3, r0
 800c9b6:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800c9b8:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800c9ba:	2b00      	cmp	r3, #0
 800c9bc:	d101      	bne.n	800c9c2 <find_volume+0x2e6>
 800c9be:	230d      	movs	r3, #13
 800c9c0:	e105      	b.n	800cbce <find_volume+0x4f2>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800c9c2:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800c9c4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c9c6:	4413      	add	r3, r2
 800c9c8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c9ca:	8911      	ldrh	r1, [r2, #8]
 800c9cc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c9ce:	8992      	ldrh	r2, [r2, #12]
 800c9d0:	0952      	lsrs	r2, r2, #5
 800c9d2:	b292      	uxth	r2, r2
 800c9d4:	fbb1 f2f2 	udiv	r2, r1, r2
 800c9d8:	b292      	uxth	r2, r2
 800c9da:	4413      	add	r3, r2
 800c9dc:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800c9de:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800c9e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c9e2:	429a      	cmp	r2, r3
 800c9e4:	d201      	bcs.n	800c9ea <find_volume+0x30e>
 800c9e6:	230d      	movs	r3, #13
 800c9e8:	e0f1      	b.n	800cbce <find_volume+0x4f2>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800c9ea:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800c9ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c9ee:	1ad3      	subs	r3, r2, r3
 800c9f0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c9f2:	8952      	ldrh	r2, [r2, #10]
 800c9f4:	fbb3 f3f2 	udiv	r3, r3, r2
 800c9f8:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800c9fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c9fc:	2b00      	cmp	r3, #0
 800c9fe:	d101      	bne.n	800ca04 <find_volume+0x328>
 800ca00:	230d      	movs	r3, #13
 800ca02:	e0e4      	b.n	800cbce <find_volume+0x4f2>
		fmt = FS_FAT32;
 800ca04:	2303      	movs	r3, #3
 800ca06:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800ca0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ca0c:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800ca10:	4293      	cmp	r3, r2
 800ca12:	d802      	bhi.n	800ca1a <find_volume+0x33e>
 800ca14:	2302      	movs	r3, #2
 800ca16:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800ca1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ca1c:	f640 72f5 	movw	r2, #4085	; 0xff5
 800ca20:	4293      	cmp	r3, r2
 800ca22:	d802      	bhi.n	800ca2a <find_volume+0x34e>
 800ca24:	2301      	movs	r3, #1
 800ca26:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800ca2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ca2c:	1c9a      	adds	r2, r3, #2
 800ca2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca30:	61da      	str	r2, [r3, #28]
		fs->volbase = bsect;							/* Volume start sector */
 800ca32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca34:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800ca36:	625a      	str	r2, [r3, #36]	; 0x24
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800ca38:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800ca3a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ca3c:	441a      	add	r2, r3
 800ca3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca40:	629a      	str	r2, [r3, #40]	; 0x28
		fs->database = bsect + sysect;					/* Data start sector */
 800ca42:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800ca44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ca46:	441a      	add	r2, r3
 800ca48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca4a:	631a      	str	r2, [r3, #48]	; 0x30
		if (fmt == FS_FAT32) {
 800ca4c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800ca50:	2b03      	cmp	r3, #3
 800ca52:	d11e      	bne.n	800ca92 <find_volume+0x3b6>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800ca54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca56:	3338      	adds	r3, #56	; 0x38
 800ca58:	332a      	adds	r3, #42	; 0x2a
 800ca5a:	4618      	mov	r0, r3
 800ca5c:	f7fd ffbe 	bl	800a9dc <ld_word>
 800ca60:	4603      	mov	r3, r0
 800ca62:	2b00      	cmp	r3, #0
 800ca64:	d001      	beq.n	800ca6a <find_volume+0x38e>
 800ca66:	230d      	movs	r3, #13
 800ca68:	e0b1      	b.n	800cbce <find_volume+0x4f2>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800ca6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca6c:	891b      	ldrh	r3, [r3, #8]
 800ca6e:	2b00      	cmp	r3, #0
 800ca70:	d001      	beq.n	800ca76 <find_volume+0x39a>
 800ca72:	230d      	movs	r3, #13
 800ca74:	e0ab      	b.n	800cbce <find_volume+0x4f2>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800ca76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca78:	3338      	adds	r3, #56	; 0x38
 800ca7a:	332c      	adds	r3, #44	; 0x2c
 800ca7c:	4618      	mov	r0, r3
 800ca7e:	f7fd ffc5 	bl	800aa0c <ld_dword>
 800ca82:	4602      	mov	r2, r0
 800ca84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca86:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800ca88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca8a:	69db      	ldr	r3, [r3, #28]
 800ca8c:	009b      	lsls	r3, r3, #2
 800ca8e:	647b      	str	r3, [r7, #68]	; 0x44
 800ca90:	e01f      	b.n	800cad2 <find_volume+0x3f6>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800ca92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca94:	891b      	ldrh	r3, [r3, #8]
 800ca96:	2b00      	cmp	r3, #0
 800ca98:	d101      	bne.n	800ca9e <find_volume+0x3c2>
 800ca9a:	230d      	movs	r3, #13
 800ca9c:	e097      	b.n	800cbce <find_volume+0x4f2>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800ca9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800caa0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800caa2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800caa4:	441a      	add	r2, r3
 800caa6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800caa8:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800caaa:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800caae:	2b02      	cmp	r3, #2
 800cab0:	d103      	bne.n	800caba <find_volume+0x3de>
 800cab2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cab4:	69db      	ldr	r3, [r3, #28]
 800cab6:	005b      	lsls	r3, r3, #1
 800cab8:	e00a      	b.n	800cad0 <find_volume+0x3f4>
 800caba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cabc:	69da      	ldr	r2, [r3, #28]
 800cabe:	4613      	mov	r3, r2
 800cac0:	005b      	lsls	r3, r3, #1
 800cac2:	4413      	add	r3, r2
 800cac4:	085a      	lsrs	r2, r3, #1
 800cac6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cac8:	69db      	ldr	r3, [r3, #28]
 800caca:	f003 0301 	and.w	r3, r3, #1
 800cace:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800cad0:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800cad2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cad4:	6a1a      	ldr	r2, [r3, #32]
 800cad6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cad8:	899b      	ldrh	r3, [r3, #12]
 800cada:	4619      	mov	r1, r3
 800cadc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800cade:	440b      	add	r3, r1
 800cae0:	3b01      	subs	r3, #1
 800cae2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800cae4:	8989      	ldrh	r1, [r1, #12]
 800cae6:	fbb3 f3f1 	udiv	r3, r3, r1
 800caea:	429a      	cmp	r2, r3
 800caec:	d201      	bcs.n	800caf2 <find_volume+0x416>
 800caee:	230d      	movs	r3, #13
 800caf0:	e06d      	b.n	800cbce <find_volume+0x4f2>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800caf2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800caf4:	f04f 32ff 	mov.w	r2, #4294967295
 800caf8:	619a      	str	r2, [r3, #24]
 800cafa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cafc:	699a      	ldr	r2, [r3, #24]
 800cafe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cb00:	615a      	str	r2, [r3, #20]
		fs->fsi_flag = 0x80;
 800cb02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cb04:	2280      	movs	r2, #128	; 0x80
 800cb06:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800cb08:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800cb0c:	2b03      	cmp	r3, #3
 800cb0e:	d149      	bne.n	800cba4 <find_volume+0x4c8>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800cb10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cb12:	3338      	adds	r3, #56	; 0x38
 800cb14:	3330      	adds	r3, #48	; 0x30
 800cb16:	4618      	mov	r0, r3
 800cb18:	f7fd ff60 	bl	800a9dc <ld_word>
 800cb1c:	4603      	mov	r3, r0
 800cb1e:	2b01      	cmp	r3, #1
 800cb20:	d140      	bne.n	800cba4 <find_volume+0x4c8>
			&& move_window(fs, bsect + 1) == FR_OK)
 800cb22:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800cb24:	3301      	adds	r3, #1
 800cb26:	4619      	mov	r1, r3
 800cb28:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800cb2a:	f7fe fa07 	bl	800af3c <move_window>
 800cb2e:	4603      	mov	r3, r0
 800cb30:	2b00      	cmp	r3, #0
 800cb32:	d137      	bne.n	800cba4 <find_volume+0x4c8>
		{
			fs->fsi_flag = 0;
 800cb34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cb36:	2200      	movs	r2, #0
 800cb38:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800cb3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cb3c:	3338      	adds	r3, #56	; 0x38
 800cb3e:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800cb42:	4618      	mov	r0, r3
 800cb44:	f7fd ff4a 	bl	800a9dc <ld_word>
 800cb48:	4603      	mov	r3, r0
 800cb4a:	461a      	mov	r2, r3
 800cb4c:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800cb50:	429a      	cmp	r2, r3
 800cb52:	d127      	bne.n	800cba4 <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800cb54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cb56:	3338      	adds	r3, #56	; 0x38
 800cb58:	4618      	mov	r0, r3
 800cb5a:	f7fd ff57 	bl	800aa0c <ld_dword>
 800cb5e:	4603      	mov	r3, r0
 800cb60:	4a1d      	ldr	r2, [pc, #116]	; (800cbd8 <find_volume+0x4fc>)
 800cb62:	4293      	cmp	r3, r2
 800cb64:	d11e      	bne.n	800cba4 <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800cb66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cb68:	3338      	adds	r3, #56	; 0x38
 800cb6a:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800cb6e:	4618      	mov	r0, r3
 800cb70:	f7fd ff4c 	bl	800aa0c <ld_dword>
 800cb74:	4603      	mov	r3, r0
 800cb76:	4a19      	ldr	r2, [pc, #100]	; (800cbdc <find_volume+0x500>)
 800cb78:	4293      	cmp	r3, r2
 800cb7a:	d113      	bne.n	800cba4 <find_volume+0x4c8>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800cb7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cb7e:	3338      	adds	r3, #56	; 0x38
 800cb80:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 800cb84:	4618      	mov	r0, r3
 800cb86:	f7fd ff41 	bl	800aa0c <ld_dword>
 800cb8a:	4602      	mov	r2, r0
 800cb8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cb8e:	619a      	str	r2, [r3, #24]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800cb90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cb92:	3338      	adds	r3, #56	; 0x38
 800cb94:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 800cb98:	4618      	mov	r0, r3
 800cb9a:	f7fd ff37 	bl	800aa0c <ld_dword>
 800cb9e:	4602      	mov	r2, r0
 800cba0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cba2:	615a      	str	r2, [r3, #20]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800cba4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cba6:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 800cbaa:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800cbac:	4b0c      	ldr	r3, [pc, #48]	; (800cbe0 <find_volume+0x504>)
 800cbae:	881b      	ldrh	r3, [r3, #0]
 800cbb0:	3301      	adds	r3, #1
 800cbb2:	b29a      	uxth	r2, r3
 800cbb4:	4b0a      	ldr	r3, [pc, #40]	; (800cbe0 <find_volume+0x504>)
 800cbb6:	801a      	strh	r2, [r3, #0]
 800cbb8:	4b09      	ldr	r3, [pc, #36]	; (800cbe0 <find_volume+0x504>)
 800cbba:	881a      	ldrh	r2, [r3, #0]
 800cbbc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cbbe:	80da      	strh	r2, [r3, #6]
#if _USE_LFN == 1
	fs->lfnbuf = LfnBuf;	/* Static LFN working buffer */
 800cbc0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cbc2:	4a08      	ldr	r2, [pc, #32]	; (800cbe4 <find_volume+0x508>)
 800cbc4:	611a      	str	r2, [r3, #16]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800cbc6:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800cbc8:	f7fe f950 	bl	800ae6c <clear_lock>
#endif
	return FR_OK;
 800cbcc:	2300      	movs	r3, #0
}
 800cbce:	4618      	mov	r0, r3
 800cbd0:	3758      	adds	r7, #88	; 0x58
 800cbd2:	46bd      	mov	sp, r7
 800cbd4:	bd80      	pop	{r7, pc}
 800cbd6:	bf00      	nop
 800cbd8:	41615252 	.word	0x41615252
 800cbdc:	61417272 	.word	0x61417272
 800cbe0:	20016e80 	.word	0x20016e80
 800cbe4:	20016ea4 	.word	0x20016ea4

0800cbe8 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800cbe8:	b580      	push	{r7, lr}
 800cbea:	b084      	sub	sp, #16
 800cbec:	af00      	add	r7, sp, #0
 800cbee:	6078      	str	r0, [r7, #4]
 800cbf0:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800cbf2:	2309      	movs	r3, #9
 800cbf4:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800cbf6:	687b      	ldr	r3, [r7, #4]
 800cbf8:	2b00      	cmp	r3, #0
 800cbfa:	d01c      	beq.n	800cc36 <validate+0x4e>
 800cbfc:	687b      	ldr	r3, [r7, #4]
 800cbfe:	681b      	ldr	r3, [r3, #0]
 800cc00:	2b00      	cmp	r3, #0
 800cc02:	d018      	beq.n	800cc36 <validate+0x4e>
 800cc04:	687b      	ldr	r3, [r7, #4]
 800cc06:	681b      	ldr	r3, [r3, #0]
 800cc08:	781b      	ldrb	r3, [r3, #0]
 800cc0a:	2b00      	cmp	r3, #0
 800cc0c:	d013      	beq.n	800cc36 <validate+0x4e>
 800cc0e:	687b      	ldr	r3, [r7, #4]
 800cc10:	889a      	ldrh	r2, [r3, #4]
 800cc12:	687b      	ldr	r3, [r7, #4]
 800cc14:	681b      	ldr	r3, [r3, #0]
 800cc16:	88db      	ldrh	r3, [r3, #6]
 800cc18:	429a      	cmp	r2, r3
 800cc1a:	d10c      	bne.n	800cc36 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800cc1c:	687b      	ldr	r3, [r7, #4]
 800cc1e:	681b      	ldr	r3, [r3, #0]
 800cc20:	785b      	ldrb	r3, [r3, #1]
 800cc22:	4618      	mov	r0, r3
 800cc24:	f7fd fe3c 	bl	800a8a0 <disk_status>
 800cc28:	4603      	mov	r3, r0
 800cc2a:	f003 0301 	and.w	r3, r3, #1
 800cc2e:	2b00      	cmp	r3, #0
 800cc30:	d101      	bne.n	800cc36 <validate+0x4e>
			res = FR_OK;
 800cc32:	2300      	movs	r3, #0
 800cc34:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800cc36:	7bfb      	ldrb	r3, [r7, #15]
 800cc38:	2b00      	cmp	r3, #0
 800cc3a:	d102      	bne.n	800cc42 <validate+0x5a>
 800cc3c:	687b      	ldr	r3, [r7, #4]
 800cc3e:	681b      	ldr	r3, [r3, #0]
 800cc40:	e000      	b.n	800cc44 <validate+0x5c>
 800cc42:	2300      	movs	r3, #0
 800cc44:	683a      	ldr	r2, [r7, #0]
 800cc46:	6013      	str	r3, [r2, #0]
	return res;
 800cc48:	7bfb      	ldrb	r3, [r7, #15]
}
 800cc4a:	4618      	mov	r0, r3
 800cc4c:	3710      	adds	r7, #16
 800cc4e:	46bd      	mov	sp, r7
 800cc50:	bd80      	pop	{r7, pc}
	...

0800cc54 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800cc54:	b580      	push	{r7, lr}
 800cc56:	b088      	sub	sp, #32
 800cc58:	af00      	add	r7, sp, #0
 800cc5a:	60f8      	str	r0, [r7, #12]
 800cc5c:	60b9      	str	r1, [r7, #8]
 800cc5e:	4613      	mov	r3, r2
 800cc60:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800cc62:	68bb      	ldr	r3, [r7, #8]
 800cc64:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800cc66:	f107 0310 	add.w	r3, r7, #16
 800cc6a:	4618      	mov	r0, r3
 800cc6c:	f7ff fc9c 	bl	800c5a8 <get_ldnumber>
 800cc70:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800cc72:	69fb      	ldr	r3, [r7, #28]
 800cc74:	2b00      	cmp	r3, #0
 800cc76:	da01      	bge.n	800cc7c <f_mount+0x28>
 800cc78:	230b      	movs	r3, #11
 800cc7a:	e02b      	b.n	800ccd4 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800cc7c:	4a17      	ldr	r2, [pc, #92]	; (800ccdc <f_mount+0x88>)
 800cc7e:	69fb      	ldr	r3, [r7, #28]
 800cc80:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cc84:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800cc86:	69bb      	ldr	r3, [r7, #24]
 800cc88:	2b00      	cmp	r3, #0
 800cc8a:	d005      	beq.n	800cc98 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800cc8c:	69b8      	ldr	r0, [r7, #24]
 800cc8e:	f7fe f8ed 	bl	800ae6c <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800cc92:	69bb      	ldr	r3, [r7, #24]
 800cc94:	2200      	movs	r2, #0
 800cc96:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800cc98:	68fb      	ldr	r3, [r7, #12]
 800cc9a:	2b00      	cmp	r3, #0
 800cc9c:	d002      	beq.n	800cca4 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 800cc9e:	68fb      	ldr	r3, [r7, #12]
 800cca0:	2200      	movs	r2, #0
 800cca2:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800cca4:	68fa      	ldr	r2, [r7, #12]
 800cca6:	490d      	ldr	r1, [pc, #52]	; (800ccdc <f_mount+0x88>)
 800cca8:	69fb      	ldr	r3, [r7, #28]
 800ccaa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800ccae:	68fb      	ldr	r3, [r7, #12]
 800ccb0:	2b00      	cmp	r3, #0
 800ccb2:	d002      	beq.n	800ccba <f_mount+0x66>
 800ccb4:	79fb      	ldrb	r3, [r7, #7]
 800ccb6:	2b01      	cmp	r3, #1
 800ccb8:	d001      	beq.n	800ccbe <f_mount+0x6a>
 800ccba:	2300      	movs	r3, #0
 800ccbc:	e00a      	b.n	800ccd4 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800ccbe:	f107 010c 	add.w	r1, r7, #12
 800ccc2:	f107 0308 	add.w	r3, r7, #8
 800ccc6:	2200      	movs	r2, #0
 800ccc8:	4618      	mov	r0, r3
 800ccca:	f7ff fd07 	bl	800c6dc <find_volume>
 800ccce:	4603      	mov	r3, r0
 800ccd0:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800ccd2:	7dfb      	ldrb	r3, [r7, #23]
}
 800ccd4:	4618      	mov	r0, r3
 800ccd6:	3720      	adds	r7, #32
 800ccd8:	46bd      	mov	sp, r7
 800ccda:	bd80      	pop	{r7, pc}
 800ccdc:	20016e7c 	.word	0x20016e7c

0800cce0 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800cce0:	b580      	push	{r7, lr}
 800cce2:	b09a      	sub	sp, #104	; 0x68
 800cce4:	af00      	add	r7, sp, #0
 800cce6:	60f8      	str	r0, [r7, #12]
 800cce8:	60b9      	str	r1, [r7, #8]
 800ccea:	4613      	mov	r3, r2
 800ccec:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800ccee:	68fb      	ldr	r3, [r7, #12]
 800ccf0:	2b00      	cmp	r3, #0
 800ccf2:	d101      	bne.n	800ccf8 <f_open+0x18>
 800ccf4:	2309      	movs	r3, #9
 800ccf6:	e1bb      	b.n	800d070 <f_open+0x390>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800ccf8:	79fb      	ldrb	r3, [r7, #7]
 800ccfa:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800ccfe:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 800cd00:	79fa      	ldrb	r2, [r7, #7]
 800cd02:	f107 0114 	add.w	r1, r7, #20
 800cd06:	f107 0308 	add.w	r3, r7, #8
 800cd0a:	4618      	mov	r0, r3
 800cd0c:	f7ff fce6 	bl	800c6dc <find_volume>
 800cd10:	4603      	mov	r3, r0
 800cd12:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	if (res == FR_OK) {
 800cd16:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800cd1a:	2b00      	cmp	r3, #0
 800cd1c:	f040 819f 	bne.w	800d05e <f_open+0x37e>
		dj.obj.fs = fs;
 800cd20:	697b      	ldr	r3, [r7, #20]
 800cd22:	61bb      	str	r3, [r7, #24]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800cd24:	68ba      	ldr	r2, [r7, #8]
 800cd26:	f107 0318 	add.w	r3, r7, #24
 800cd2a:	4611      	mov	r1, r2
 800cd2c:	4618      	mov	r0, r3
 800cd2e:	f7ff fbc5 	bl	800c4bc <follow_path>
 800cd32:	4603      	mov	r3, r0
 800cd34:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800cd38:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800cd3c:	2b00      	cmp	r3, #0
 800cd3e:	d11a      	bne.n	800cd76 <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800cd40:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800cd44:	b25b      	sxtb	r3, r3
 800cd46:	2b00      	cmp	r3, #0
 800cd48:	da03      	bge.n	800cd52 <f_open+0x72>
				res = FR_INVALID_NAME;
 800cd4a:	2306      	movs	r3, #6
 800cd4c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800cd50:	e011      	b.n	800cd76 <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800cd52:	79fb      	ldrb	r3, [r7, #7]
 800cd54:	f023 0301 	bic.w	r3, r3, #1
 800cd58:	2b00      	cmp	r3, #0
 800cd5a:	bf14      	ite	ne
 800cd5c:	2301      	movne	r3, #1
 800cd5e:	2300      	moveq	r3, #0
 800cd60:	b2db      	uxtb	r3, r3
 800cd62:	461a      	mov	r2, r3
 800cd64:	f107 0318 	add.w	r3, r7, #24
 800cd68:	4611      	mov	r1, r2
 800cd6a:	4618      	mov	r0, r3
 800cd6c:	f7fd ff36 	bl	800abdc <chk_lock>
 800cd70:	4603      	mov	r3, r0
 800cd72:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800cd76:	79fb      	ldrb	r3, [r7, #7]
 800cd78:	f003 031c 	and.w	r3, r3, #28
 800cd7c:	2b00      	cmp	r3, #0
 800cd7e:	d07f      	beq.n	800ce80 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 800cd80:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800cd84:	2b00      	cmp	r3, #0
 800cd86:	d017      	beq.n	800cdb8 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800cd88:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800cd8c:	2b04      	cmp	r3, #4
 800cd8e:	d10e      	bne.n	800cdae <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800cd90:	f7fd ff80 	bl	800ac94 <enq_lock>
 800cd94:	4603      	mov	r3, r0
 800cd96:	2b00      	cmp	r3, #0
 800cd98:	d006      	beq.n	800cda8 <f_open+0xc8>
 800cd9a:	f107 0318 	add.w	r3, r7, #24
 800cd9e:	4618      	mov	r0, r3
 800cda0:	f7ff f8dc 	bl	800bf5c <dir_register>
 800cda4:	4603      	mov	r3, r0
 800cda6:	e000      	b.n	800cdaa <f_open+0xca>
 800cda8:	2312      	movs	r3, #18
 800cdaa:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800cdae:	79fb      	ldrb	r3, [r7, #7]
 800cdb0:	f043 0308 	orr.w	r3, r3, #8
 800cdb4:	71fb      	strb	r3, [r7, #7]
 800cdb6:	e010      	b.n	800cdda <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800cdb8:	7fbb      	ldrb	r3, [r7, #30]
 800cdba:	f003 0311 	and.w	r3, r3, #17
 800cdbe:	2b00      	cmp	r3, #0
 800cdc0:	d003      	beq.n	800cdca <f_open+0xea>
					res = FR_DENIED;
 800cdc2:	2307      	movs	r3, #7
 800cdc4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800cdc8:	e007      	b.n	800cdda <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800cdca:	79fb      	ldrb	r3, [r7, #7]
 800cdcc:	f003 0304 	and.w	r3, r3, #4
 800cdd0:	2b00      	cmp	r3, #0
 800cdd2:	d002      	beq.n	800cdda <f_open+0xfa>
 800cdd4:	2308      	movs	r3, #8
 800cdd6:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800cdda:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800cdde:	2b00      	cmp	r3, #0
 800cde0:	d168      	bne.n	800ceb4 <f_open+0x1d4>
 800cde2:	79fb      	ldrb	r3, [r7, #7]
 800cde4:	f003 0308 	and.w	r3, r3, #8
 800cde8:	2b00      	cmp	r3, #0
 800cdea:	d063      	beq.n	800ceb4 <f_open+0x1d4>
				dw = GET_FATTIME();
 800cdec:	f7fd fcfa 	bl	800a7e4 <get_fattime>
 800cdf0:	65b8      	str	r0, [r7, #88]	; 0x58
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800cdf2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cdf4:	330e      	adds	r3, #14
 800cdf6:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800cdf8:	4618      	mov	r0, r3
 800cdfa:	f7fd fe45 	bl	800aa88 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800cdfe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ce00:	3316      	adds	r3, #22
 800ce02:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800ce04:	4618      	mov	r0, r3
 800ce06:	f7fd fe3f 	bl	800aa88 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800ce0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ce0c:	330b      	adds	r3, #11
 800ce0e:	2220      	movs	r2, #32
 800ce10:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800ce12:	697b      	ldr	r3, [r7, #20]
 800ce14:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ce16:	4611      	mov	r1, r2
 800ce18:	4618      	mov	r0, r3
 800ce1a:	f7fe fe17 	bl	800ba4c <ld_clust>
 800ce1e:	6578      	str	r0, [r7, #84]	; 0x54
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800ce20:	697b      	ldr	r3, [r7, #20]
 800ce22:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800ce24:	2200      	movs	r2, #0
 800ce26:	4618      	mov	r0, r3
 800ce28:	f7fe fe2f 	bl	800ba8a <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800ce2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ce2e:	331c      	adds	r3, #28
 800ce30:	2100      	movs	r1, #0
 800ce32:	4618      	mov	r0, r3
 800ce34:	f7fd fe28 	bl	800aa88 <st_dword>
					fs->wflag = 1;
 800ce38:	697b      	ldr	r3, [r7, #20]
 800ce3a:	2201      	movs	r2, #1
 800ce3c:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800ce3e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ce40:	2b00      	cmp	r3, #0
 800ce42:	d037      	beq.n	800ceb4 <f_open+0x1d4>
						dw = fs->winsect;
 800ce44:	697b      	ldr	r3, [r7, #20]
 800ce46:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ce48:	65bb      	str	r3, [r7, #88]	; 0x58
						res = remove_chain(&dj.obj, cl, 0);
 800ce4a:	f107 0318 	add.w	r3, r7, #24
 800ce4e:	2200      	movs	r2, #0
 800ce50:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800ce52:	4618      	mov	r0, r3
 800ce54:	f7fe fb1f 	bl	800b496 <remove_chain>
 800ce58:	4603      	mov	r3, r0
 800ce5a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
						if (res == FR_OK) {
 800ce5e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800ce62:	2b00      	cmp	r3, #0
 800ce64:	d126      	bne.n	800ceb4 <f_open+0x1d4>
							res = move_window(fs, dw);
 800ce66:	697b      	ldr	r3, [r7, #20]
 800ce68:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800ce6a:	4618      	mov	r0, r3
 800ce6c:	f7fe f866 	bl	800af3c <move_window>
 800ce70:	4603      	mov	r3, r0
 800ce72:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800ce76:	697b      	ldr	r3, [r7, #20]
 800ce78:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800ce7a:	3a01      	subs	r2, #1
 800ce7c:	615a      	str	r2, [r3, #20]
 800ce7e:	e019      	b.n	800ceb4 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800ce80:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800ce84:	2b00      	cmp	r3, #0
 800ce86:	d115      	bne.n	800ceb4 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800ce88:	7fbb      	ldrb	r3, [r7, #30]
 800ce8a:	f003 0310 	and.w	r3, r3, #16
 800ce8e:	2b00      	cmp	r3, #0
 800ce90:	d003      	beq.n	800ce9a <f_open+0x1ba>
					res = FR_NO_FILE;
 800ce92:	2304      	movs	r3, #4
 800ce94:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800ce98:	e00c      	b.n	800ceb4 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800ce9a:	79fb      	ldrb	r3, [r7, #7]
 800ce9c:	f003 0302 	and.w	r3, r3, #2
 800cea0:	2b00      	cmp	r3, #0
 800cea2:	d007      	beq.n	800ceb4 <f_open+0x1d4>
 800cea4:	7fbb      	ldrb	r3, [r7, #30]
 800cea6:	f003 0301 	and.w	r3, r3, #1
 800ceaa:	2b00      	cmp	r3, #0
 800ceac:	d002      	beq.n	800ceb4 <f_open+0x1d4>
						res = FR_DENIED;
 800ceae:	2307      	movs	r3, #7
 800ceb0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					}
				}
			}
		}
		if (res == FR_OK) {
 800ceb4:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800ceb8:	2b00      	cmp	r3, #0
 800ceba:	d128      	bne.n	800cf0e <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800cebc:	79fb      	ldrb	r3, [r7, #7]
 800cebe:	f003 0308 	and.w	r3, r3, #8
 800cec2:	2b00      	cmp	r3, #0
 800cec4:	d003      	beq.n	800cece <f_open+0x1ee>
				mode |= FA_MODIFIED;
 800cec6:	79fb      	ldrb	r3, [r7, #7]
 800cec8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cecc:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800cece:	697b      	ldr	r3, [r7, #20]
 800ced0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ced2:	68fb      	ldr	r3, [r7, #12]
 800ced4:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 800ced6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ced8:	68fb      	ldr	r3, [r7, #12]
 800ceda:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800cedc:	79fb      	ldrb	r3, [r7, #7]
 800cede:	f023 0301 	bic.w	r3, r3, #1
 800cee2:	2b00      	cmp	r3, #0
 800cee4:	bf14      	ite	ne
 800cee6:	2301      	movne	r3, #1
 800cee8:	2300      	moveq	r3, #0
 800ceea:	b2db      	uxtb	r3, r3
 800ceec:	461a      	mov	r2, r3
 800ceee:	f107 0318 	add.w	r3, r7, #24
 800cef2:	4611      	mov	r1, r2
 800cef4:	4618      	mov	r0, r3
 800cef6:	f7fd feef 	bl	800acd8 <inc_lock>
 800cefa:	4602      	mov	r2, r0
 800cefc:	68fb      	ldr	r3, [r7, #12]
 800cefe:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800cf00:	68fb      	ldr	r3, [r7, #12]
 800cf02:	691b      	ldr	r3, [r3, #16]
 800cf04:	2b00      	cmp	r3, #0
 800cf06:	d102      	bne.n	800cf0e <f_open+0x22e>
 800cf08:	2302      	movs	r3, #2
 800cf0a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
		}
#endif

		if (res == FR_OK) {
 800cf0e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800cf12:	2b00      	cmp	r3, #0
 800cf14:	f040 80a3 	bne.w	800d05e <f_open+0x37e>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800cf18:	697b      	ldr	r3, [r7, #20]
 800cf1a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800cf1c:	4611      	mov	r1, r2
 800cf1e:	4618      	mov	r0, r3
 800cf20:	f7fe fd94 	bl	800ba4c <ld_clust>
 800cf24:	4602      	mov	r2, r0
 800cf26:	68fb      	ldr	r3, [r7, #12]
 800cf28:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800cf2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cf2c:	331c      	adds	r3, #28
 800cf2e:	4618      	mov	r0, r3
 800cf30:	f7fd fd6c 	bl	800aa0c <ld_dword>
 800cf34:	4602      	mov	r2, r0
 800cf36:	68fb      	ldr	r3, [r7, #12]
 800cf38:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800cf3a:	68fb      	ldr	r3, [r7, #12]
 800cf3c:	2200      	movs	r2, #0
 800cf3e:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800cf40:	697a      	ldr	r2, [r7, #20]
 800cf42:	68fb      	ldr	r3, [r7, #12]
 800cf44:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800cf46:	697b      	ldr	r3, [r7, #20]
 800cf48:	88da      	ldrh	r2, [r3, #6]
 800cf4a:	68fb      	ldr	r3, [r7, #12]
 800cf4c:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800cf4e:	68fb      	ldr	r3, [r7, #12]
 800cf50:	79fa      	ldrb	r2, [r7, #7]
 800cf52:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 800cf54:	68fb      	ldr	r3, [r7, #12]
 800cf56:	2200      	movs	r2, #0
 800cf58:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800cf5a:	68fb      	ldr	r3, [r7, #12]
 800cf5c:	2200      	movs	r2, #0
 800cf5e:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800cf60:	68fb      	ldr	r3, [r7, #12]
 800cf62:	2200      	movs	r2, #0
 800cf64:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800cf66:	68fb      	ldr	r3, [r7, #12]
 800cf68:	3330      	adds	r3, #48	; 0x30
 800cf6a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800cf6e:	2100      	movs	r1, #0
 800cf70:	4618      	mov	r0, r3
 800cf72:	f7fd fdd6 	bl	800ab22 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800cf76:	79fb      	ldrb	r3, [r7, #7]
 800cf78:	f003 0320 	and.w	r3, r3, #32
 800cf7c:	2b00      	cmp	r3, #0
 800cf7e:	d06e      	beq.n	800d05e <f_open+0x37e>
 800cf80:	68fb      	ldr	r3, [r7, #12]
 800cf82:	68db      	ldr	r3, [r3, #12]
 800cf84:	2b00      	cmp	r3, #0
 800cf86:	d06a      	beq.n	800d05e <f_open+0x37e>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800cf88:	68fb      	ldr	r3, [r7, #12]
 800cf8a:	68da      	ldr	r2, [r3, #12]
 800cf8c:	68fb      	ldr	r3, [r7, #12]
 800cf8e:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800cf90:	697b      	ldr	r3, [r7, #20]
 800cf92:	895b      	ldrh	r3, [r3, #10]
 800cf94:	461a      	mov	r2, r3
 800cf96:	697b      	ldr	r3, [r7, #20]
 800cf98:	899b      	ldrh	r3, [r3, #12]
 800cf9a:	fb02 f303 	mul.w	r3, r2, r3
 800cf9e:	653b      	str	r3, [r7, #80]	; 0x50
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800cfa0:	68fb      	ldr	r3, [r7, #12]
 800cfa2:	689b      	ldr	r3, [r3, #8]
 800cfa4:	663b      	str	r3, [r7, #96]	; 0x60
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800cfa6:	68fb      	ldr	r3, [r7, #12]
 800cfa8:	68db      	ldr	r3, [r3, #12]
 800cfaa:	65fb      	str	r3, [r7, #92]	; 0x5c
 800cfac:	e016      	b.n	800cfdc <f_open+0x2fc>
					clst = get_fat(&fp->obj, clst);
 800cfae:	68fb      	ldr	r3, [r7, #12]
 800cfb0:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800cfb2:	4618      	mov	r0, r3
 800cfb4:	f7fe f87f 	bl	800b0b6 <get_fat>
 800cfb8:	6638      	str	r0, [r7, #96]	; 0x60
					if (clst <= 1) res = FR_INT_ERR;
 800cfba:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800cfbc:	2b01      	cmp	r3, #1
 800cfbe:	d802      	bhi.n	800cfc6 <f_open+0x2e6>
 800cfc0:	2302      	movs	r3, #2
 800cfc2:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800cfc6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800cfc8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cfcc:	d102      	bne.n	800cfd4 <f_open+0x2f4>
 800cfce:	2301      	movs	r3, #1
 800cfd0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800cfd4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800cfd6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800cfd8:	1ad3      	subs	r3, r2, r3
 800cfda:	65fb      	str	r3, [r7, #92]	; 0x5c
 800cfdc:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800cfe0:	2b00      	cmp	r3, #0
 800cfe2:	d103      	bne.n	800cfec <f_open+0x30c>
 800cfe4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800cfe6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800cfe8:	429a      	cmp	r2, r3
 800cfea:	d8e0      	bhi.n	800cfae <f_open+0x2ce>
				}
				fp->clust = clst;
 800cfec:	68fb      	ldr	r3, [r7, #12]
 800cfee:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800cff0:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800cff2:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800cff6:	2b00      	cmp	r3, #0
 800cff8:	d131      	bne.n	800d05e <f_open+0x37e>
 800cffa:	697b      	ldr	r3, [r7, #20]
 800cffc:	899b      	ldrh	r3, [r3, #12]
 800cffe:	461a      	mov	r2, r3
 800d000:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d002:	fbb3 f1f2 	udiv	r1, r3, r2
 800d006:	fb01 f202 	mul.w	r2, r1, r2
 800d00a:	1a9b      	subs	r3, r3, r2
 800d00c:	2b00      	cmp	r3, #0
 800d00e:	d026      	beq.n	800d05e <f_open+0x37e>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800d010:	697b      	ldr	r3, [r7, #20]
 800d012:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800d014:	4618      	mov	r0, r3
 800d016:	f7fe f82f 	bl	800b078 <clust2sect>
 800d01a:	64f8      	str	r0, [r7, #76]	; 0x4c
 800d01c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d01e:	2b00      	cmp	r3, #0
 800d020:	d103      	bne.n	800d02a <f_open+0x34a>
						res = FR_INT_ERR;
 800d022:	2302      	movs	r3, #2
 800d024:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800d028:	e019      	b.n	800d05e <f_open+0x37e>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800d02a:	697b      	ldr	r3, [r7, #20]
 800d02c:	899b      	ldrh	r3, [r3, #12]
 800d02e:	461a      	mov	r2, r3
 800d030:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d032:	fbb3 f2f2 	udiv	r2, r3, r2
 800d036:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d038:	441a      	add	r2, r3
 800d03a:	68fb      	ldr	r3, [r7, #12]
 800d03c:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800d03e:	697b      	ldr	r3, [r7, #20]
 800d040:	7858      	ldrb	r0, [r3, #1]
 800d042:	68fb      	ldr	r3, [r7, #12]
 800d044:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800d048:	68fb      	ldr	r3, [r7, #12]
 800d04a:	6a1a      	ldr	r2, [r3, #32]
 800d04c:	2301      	movs	r3, #1
 800d04e:	f7fd fc67 	bl	800a920 <disk_read>
 800d052:	4603      	mov	r3, r0
 800d054:	2b00      	cmp	r3, #0
 800d056:	d002      	beq.n	800d05e <f_open+0x37e>
 800d058:	2301      	movs	r3, #1
 800d05a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800d05e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800d062:	2b00      	cmp	r3, #0
 800d064:	d002      	beq.n	800d06c <f_open+0x38c>
 800d066:	68fb      	ldr	r3, [r7, #12]
 800d068:	2200      	movs	r2, #0
 800d06a:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800d06c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 800d070:	4618      	mov	r0, r3
 800d072:	3768      	adds	r7, #104	; 0x68
 800d074:	46bd      	mov	sp, r7
 800d076:	bd80      	pop	{r7, pc}

0800d078 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 800d078:	b580      	push	{r7, lr}
 800d07a:	b08c      	sub	sp, #48	; 0x30
 800d07c:	af00      	add	r7, sp, #0
 800d07e:	60f8      	str	r0, [r7, #12]
 800d080:	60b9      	str	r1, [r7, #8]
 800d082:	607a      	str	r2, [r7, #4]
 800d084:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 800d086:	68bb      	ldr	r3, [r7, #8]
 800d088:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 800d08a:	683b      	ldr	r3, [r7, #0]
 800d08c:	2200      	movs	r2, #0
 800d08e:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 800d090:	68fb      	ldr	r3, [r7, #12]
 800d092:	f107 0210 	add.w	r2, r7, #16
 800d096:	4611      	mov	r1, r2
 800d098:	4618      	mov	r0, r3
 800d09a:	f7ff fda5 	bl	800cbe8 <validate>
 800d09e:	4603      	mov	r3, r0
 800d0a0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800d0a4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800d0a8:	2b00      	cmp	r3, #0
 800d0aa:	d107      	bne.n	800d0bc <f_write+0x44>
 800d0ac:	68fb      	ldr	r3, [r7, #12]
 800d0ae:	7d5b      	ldrb	r3, [r3, #21]
 800d0b0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800d0b4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800d0b8:	2b00      	cmp	r3, #0
 800d0ba:	d002      	beq.n	800d0c2 <f_write+0x4a>
 800d0bc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800d0c0:	e16a      	b.n	800d398 <f_write+0x320>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 800d0c2:	68fb      	ldr	r3, [r7, #12]
 800d0c4:	7d1b      	ldrb	r3, [r3, #20]
 800d0c6:	f003 0302 	and.w	r3, r3, #2
 800d0ca:	2b00      	cmp	r3, #0
 800d0cc:	d101      	bne.n	800d0d2 <f_write+0x5a>
 800d0ce:	2307      	movs	r3, #7
 800d0d0:	e162      	b.n	800d398 <f_write+0x320>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 800d0d2:	68fb      	ldr	r3, [r7, #12]
 800d0d4:	699a      	ldr	r2, [r3, #24]
 800d0d6:	687b      	ldr	r3, [r7, #4]
 800d0d8:	441a      	add	r2, r3
 800d0da:	68fb      	ldr	r3, [r7, #12]
 800d0dc:	699b      	ldr	r3, [r3, #24]
 800d0de:	429a      	cmp	r2, r3
 800d0e0:	f080 814c 	bcs.w	800d37c <f_write+0x304>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 800d0e4:	68fb      	ldr	r3, [r7, #12]
 800d0e6:	699b      	ldr	r3, [r3, #24]
 800d0e8:	43db      	mvns	r3, r3
 800d0ea:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 800d0ec:	e146      	b.n	800d37c <f_write+0x304>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 800d0ee:	68fb      	ldr	r3, [r7, #12]
 800d0f0:	699b      	ldr	r3, [r3, #24]
 800d0f2:	693a      	ldr	r2, [r7, #16]
 800d0f4:	8992      	ldrh	r2, [r2, #12]
 800d0f6:	fbb3 f1f2 	udiv	r1, r3, r2
 800d0fa:	fb01 f202 	mul.w	r2, r1, r2
 800d0fe:	1a9b      	subs	r3, r3, r2
 800d100:	2b00      	cmp	r3, #0
 800d102:	f040 80f1 	bne.w	800d2e8 <f_write+0x270>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 800d106:	68fb      	ldr	r3, [r7, #12]
 800d108:	699b      	ldr	r3, [r3, #24]
 800d10a:	693a      	ldr	r2, [r7, #16]
 800d10c:	8992      	ldrh	r2, [r2, #12]
 800d10e:	fbb3 f3f2 	udiv	r3, r3, r2
 800d112:	693a      	ldr	r2, [r7, #16]
 800d114:	8952      	ldrh	r2, [r2, #10]
 800d116:	3a01      	subs	r2, #1
 800d118:	4013      	ands	r3, r2
 800d11a:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 800d11c:	69bb      	ldr	r3, [r7, #24]
 800d11e:	2b00      	cmp	r3, #0
 800d120:	d143      	bne.n	800d1aa <f_write+0x132>
				if (fp->fptr == 0) {		/* On the top of the file? */
 800d122:	68fb      	ldr	r3, [r7, #12]
 800d124:	699b      	ldr	r3, [r3, #24]
 800d126:	2b00      	cmp	r3, #0
 800d128:	d10c      	bne.n	800d144 <f_write+0xcc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 800d12a:	68fb      	ldr	r3, [r7, #12]
 800d12c:	689b      	ldr	r3, [r3, #8]
 800d12e:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 800d130:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d132:	2b00      	cmp	r3, #0
 800d134:	d11a      	bne.n	800d16c <f_write+0xf4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 800d136:	68fb      	ldr	r3, [r7, #12]
 800d138:	2100      	movs	r1, #0
 800d13a:	4618      	mov	r0, r3
 800d13c:	f7fe fa10 	bl	800b560 <create_chain>
 800d140:	62b8      	str	r0, [r7, #40]	; 0x28
 800d142:	e013      	b.n	800d16c <f_write+0xf4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800d144:	68fb      	ldr	r3, [r7, #12]
 800d146:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d148:	2b00      	cmp	r3, #0
 800d14a:	d007      	beq.n	800d15c <f_write+0xe4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800d14c:	68fb      	ldr	r3, [r7, #12]
 800d14e:	699b      	ldr	r3, [r3, #24]
 800d150:	4619      	mov	r1, r3
 800d152:	68f8      	ldr	r0, [r7, #12]
 800d154:	f7fe fa9c 	bl	800b690 <clmt_clust>
 800d158:	62b8      	str	r0, [r7, #40]	; 0x28
 800d15a:	e007      	b.n	800d16c <f_write+0xf4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 800d15c:	68fa      	ldr	r2, [r7, #12]
 800d15e:	68fb      	ldr	r3, [r7, #12]
 800d160:	69db      	ldr	r3, [r3, #28]
 800d162:	4619      	mov	r1, r3
 800d164:	4610      	mov	r0, r2
 800d166:	f7fe f9fb 	bl	800b560 <create_chain>
 800d16a:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800d16c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d16e:	2b00      	cmp	r3, #0
 800d170:	f000 8109 	beq.w	800d386 <f_write+0x30e>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 800d174:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d176:	2b01      	cmp	r3, #1
 800d178:	d104      	bne.n	800d184 <f_write+0x10c>
 800d17a:	68fb      	ldr	r3, [r7, #12]
 800d17c:	2202      	movs	r2, #2
 800d17e:	755a      	strb	r2, [r3, #21]
 800d180:	2302      	movs	r3, #2
 800d182:	e109      	b.n	800d398 <f_write+0x320>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800d184:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d186:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d18a:	d104      	bne.n	800d196 <f_write+0x11e>
 800d18c:	68fb      	ldr	r3, [r7, #12]
 800d18e:	2201      	movs	r2, #1
 800d190:	755a      	strb	r2, [r3, #21]
 800d192:	2301      	movs	r3, #1
 800d194:	e100      	b.n	800d398 <f_write+0x320>
				fp->clust = clst;			/* Update current cluster */
 800d196:	68fb      	ldr	r3, [r7, #12]
 800d198:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d19a:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 800d19c:	68fb      	ldr	r3, [r7, #12]
 800d19e:	689b      	ldr	r3, [r3, #8]
 800d1a0:	2b00      	cmp	r3, #0
 800d1a2:	d102      	bne.n	800d1aa <f_write+0x132>
 800d1a4:	68fb      	ldr	r3, [r7, #12]
 800d1a6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d1a8:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 800d1aa:	68fb      	ldr	r3, [r7, #12]
 800d1ac:	7d1b      	ldrb	r3, [r3, #20]
 800d1ae:	b25b      	sxtb	r3, r3
 800d1b0:	2b00      	cmp	r3, #0
 800d1b2:	da18      	bge.n	800d1e6 <f_write+0x16e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800d1b4:	693b      	ldr	r3, [r7, #16]
 800d1b6:	7858      	ldrb	r0, [r3, #1]
 800d1b8:	68fb      	ldr	r3, [r7, #12]
 800d1ba:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800d1be:	68fb      	ldr	r3, [r7, #12]
 800d1c0:	6a1a      	ldr	r2, [r3, #32]
 800d1c2:	2301      	movs	r3, #1
 800d1c4:	f7fd fbcc 	bl	800a960 <disk_write>
 800d1c8:	4603      	mov	r3, r0
 800d1ca:	2b00      	cmp	r3, #0
 800d1cc:	d004      	beq.n	800d1d8 <f_write+0x160>
 800d1ce:	68fb      	ldr	r3, [r7, #12]
 800d1d0:	2201      	movs	r2, #1
 800d1d2:	755a      	strb	r2, [r3, #21]
 800d1d4:	2301      	movs	r3, #1
 800d1d6:	e0df      	b.n	800d398 <f_write+0x320>
				fp->flag &= (BYTE)~FA_DIRTY;
 800d1d8:	68fb      	ldr	r3, [r7, #12]
 800d1da:	7d1b      	ldrb	r3, [r3, #20]
 800d1dc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d1e0:	b2da      	uxtb	r2, r3
 800d1e2:	68fb      	ldr	r3, [r7, #12]
 800d1e4:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800d1e6:	693a      	ldr	r2, [r7, #16]
 800d1e8:	68fb      	ldr	r3, [r7, #12]
 800d1ea:	69db      	ldr	r3, [r3, #28]
 800d1ec:	4619      	mov	r1, r3
 800d1ee:	4610      	mov	r0, r2
 800d1f0:	f7fd ff42 	bl	800b078 <clust2sect>
 800d1f4:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800d1f6:	697b      	ldr	r3, [r7, #20]
 800d1f8:	2b00      	cmp	r3, #0
 800d1fa:	d104      	bne.n	800d206 <f_write+0x18e>
 800d1fc:	68fb      	ldr	r3, [r7, #12]
 800d1fe:	2202      	movs	r2, #2
 800d200:	755a      	strb	r2, [r3, #21]
 800d202:	2302      	movs	r3, #2
 800d204:	e0c8      	b.n	800d398 <f_write+0x320>
			sect += csect;
 800d206:	697a      	ldr	r2, [r7, #20]
 800d208:	69bb      	ldr	r3, [r7, #24]
 800d20a:	4413      	add	r3, r2
 800d20c:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 800d20e:	693b      	ldr	r3, [r7, #16]
 800d210:	899b      	ldrh	r3, [r3, #12]
 800d212:	461a      	mov	r2, r3
 800d214:	687b      	ldr	r3, [r7, #4]
 800d216:	fbb3 f3f2 	udiv	r3, r3, r2
 800d21a:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 800d21c:	6a3b      	ldr	r3, [r7, #32]
 800d21e:	2b00      	cmp	r3, #0
 800d220:	d043      	beq.n	800d2aa <f_write+0x232>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800d222:	69ba      	ldr	r2, [r7, #24]
 800d224:	6a3b      	ldr	r3, [r7, #32]
 800d226:	4413      	add	r3, r2
 800d228:	693a      	ldr	r2, [r7, #16]
 800d22a:	8952      	ldrh	r2, [r2, #10]
 800d22c:	4293      	cmp	r3, r2
 800d22e:	d905      	bls.n	800d23c <f_write+0x1c4>
					cc = fs->csize - csect;
 800d230:	693b      	ldr	r3, [r7, #16]
 800d232:	895b      	ldrh	r3, [r3, #10]
 800d234:	461a      	mov	r2, r3
 800d236:	69bb      	ldr	r3, [r7, #24]
 800d238:	1ad3      	subs	r3, r2, r3
 800d23a:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800d23c:	693b      	ldr	r3, [r7, #16]
 800d23e:	7858      	ldrb	r0, [r3, #1]
 800d240:	6a3b      	ldr	r3, [r7, #32]
 800d242:	697a      	ldr	r2, [r7, #20]
 800d244:	69f9      	ldr	r1, [r7, #28]
 800d246:	f7fd fb8b 	bl	800a960 <disk_write>
 800d24a:	4603      	mov	r3, r0
 800d24c:	2b00      	cmp	r3, #0
 800d24e:	d004      	beq.n	800d25a <f_write+0x1e2>
 800d250:	68fb      	ldr	r3, [r7, #12]
 800d252:	2201      	movs	r2, #1
 800d254:	755a      	strb	r2, [r3, #21]
 800d256:	2301      	movs	r3, #1
 800d258:	e09e      	b.n	800d398 <f_write+0x320>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 800d25a:	68fb      	ldr	r3, [r7, #12]
 800d25c:	6a1a      	ldr	r2, [r3, #32]
 800d25e:	697b      	ldr	r3, [r7, #20]
 800d260:	1ad3      	subs	r3, r2, r3
 800d262:	6a3a      	ldr	r2, [r7, #32]
 800d264:	429a      	cmp	r2, r3
 800d266:	d918      	bls.n	800d29a <f_write+0x222>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 800d268:	68fb      	ldr	r3, [r7, #12]
 800d26a:	f103 0030 	add.w	r0, r3, #48	; 0x30
 800d26e:	68fb      	ldr	r3, [r7, #12]
 800d270:	6a1a      	ldr	r2, [r3, #32]
 800d272:	697b      	ldr	r3, [r7, #20]
 800d274:	1ad3      	subs	r3, r2, r3
 800d276:	693a      	ldr	r2, [r7, #16]
 800d278:	8992      	ldrh	r2, [r2, #12]
 800d27a:	fb02 f303 	mul.w	r3, r2, r3
 800d27e:	69fa      	ldr	r2, [r7, #28]
 800d280:	18d1      	adds	r1, r2, r3
 800d282:	693b      	ldr	r3, [r7, #16]
 800d284:	899b      	ldrh	r3, [r3, #12]
 800d286:	461a      	mov	r2, r3
 800d288:	f7fd fc2a 	bl	800aae0 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 800d28c:	68fb      	ldr	r3, [r7, #12]
 800d28e:	7d1b      	ldrb	r3, [r3, #20]
 800d290:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d294:	b2da      	uxtb	r2, r3
 800d296:	68fb      	ldr	r3, [r7, #12]
 800d298:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 800d29a:	693b      	ldr	r3, [r7, #16]
 800d29c:	899b      	ldrh	r3, [r3, #12]
 800d29e:	461a      	mov	r2, r3
 800d2a0:	6a3b      	ldr	r3, [r7, #32]
 800d2a2:	fb02 f303 	mul.w	r3, r2, r3
 800d2a6:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 800d2a8:	e04b      	b.n	800d342 <f_write+0x2ca>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800d2aa:	68fb      	ldr	r3, [r7, #12]
 800d2ac:	6a1b      	ldr	r3, [r3, #32]
 800d2ae:	697a      	ldr	r2, [r7, #20]
 800d2b0:	429a      	cmp	r2, r3
 800d2b2:	d016      	beq.n	800d2e2 <f_write+0x26a>
				fp->fptr < fp->obj.objsize &&
 800d2b4:	68fb      	ldr	r3, [r7, #12]
 800d2b6:	699a      	ldr	r2, [r3, #24]
 800d2b8:	68fb      	ldr	r3, [r7, #12]
 800d2ba:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800d2bc:	429a      	cmp	r2, r3
 800d2be:	d210      	bcs.n	800d2e2 <f_write+0x26a>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 800d2c0:	693b      	ldr	r3, [r7, #16]
 800d2c2:	7858      	ldrb	r0, [r3, #1]
 800d2c4:	68fb      	ldr	r3, [r7, #12]
 800d2c6:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800d2ca:	2301      	movs	r3, #1
 800d2cc:	697a      	ldr	r2, [r7, #20]
 800d2ce:	f7fd fb27 	bl	800a920 <disk_read>
 800d2d2:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 800d2d4:	2b00      	cmp	r3, #0
 800d2d6:	d004      	beq.n	800d2e2 <f_write+0x26a>
					ABORT(fs, FR_DISK_ERR);
 800d2d8:	68fb      	ldr	r3, [r7, #12]
 800d2da:	2201      	movs	r2, #1
 800d2dc:	755a      	strb	r2, [r3, #21]
 800d2de:	2301      	movs	r3, #1
 800d2e0:	e05a      	b.n	800d398 <f_write+0x320>
			}
#endif
			fp->sect = sect;
 800d2e2:	68fb      	ldr	r3, [r7, #12]
 800d2e4:	697a      	ldr	r2, [r7, #20]
 800d2e6:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800d2e8:	693b      	ldr	r3, [r7, #16]
 800d2ea:	899b      	ldrh	r3, [r3, #12]
 800d2ec:	4618      	mov	r0, r3
 800d2ee:	68fb      	ldr	r3, [r7, #12]
 800d2f0:	699b      	ldr	r3, [r3, #24]
 800d2f2:	693a      	ldr	r2, [r7, #16]
 800d2f4:	8992      	ldrh	r2, [r2, #12]
 800d2f6:	fbb3 f1f2 	udiv	r1, r3, r2
 800d2fa:	fb01 f202 	mul.w	r2, r1, r2
 800d2fe:	1a9b      	subs	r3, r3, r2
 800d300:	1ac3      	subs	r3, r0, r3
 800d302:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 800d304:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d306:	687b      	ldr	r3, [r7, #4]
 800d308:	429a      	cmp	r2, r3
 800d30a:	d901      	bls.n	800d310 <f_write+0x298>
 800d30c:	687b      	ldr	r3, [r7, #4]
 800d30e:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 800d310:	68fb      	ldr	r3, [r7, #12]
 800d312:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800d316:	68fb      	ldr	r3, [r7, #12]
 800d318:	699b      	ldr	r3, [r3, #24]
 800d31a:	693a      	ldr	r2, [r7, #16]
 800d31c:	8992      	ldrh	r2, [r2, #12]
 800d31e:	fbb3 f0f2 	udiv	r0, r3, r2
 800d322:	fb00 f202 	mul.w	r2, r0, r2
 800d326:	1a9b      	subs	r3, r3, r2
 800d328:	440b      	add	r3, r1
 800d32a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d32c:	69f9      	ldr	r1, [r7, #28]
 800d32e:	4618      	mov	r0, r3
 800d330:	f7fd fbd6 	bl	800aae0 <mem_cpy>
		fp->flag |= FA_DIRTY;
 800d334:	68fb      	ldr	r3, [r7, #12]
 800d336:	7d1b      	ldrb	r3, [r3, #20]
 800d338:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800d33c:	b2da      	uxtb	r2, r3
 800d33e:	68fb      	ldr	r3, [r7, #12]
 800d340:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 800d342:	69fa      	ldr	r2, [r7, #28]
 800d344:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d346:	4413      	add	r3, r2
 800d348:	61fb      	str	r3, [r7, #28]
 800d34a:	68fb      	ldr	r3, [r7, #12]
 800d34c:	699a      	ldr	r2, [r3, #24]
 800d34e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d350:	441a      	add	r2, r3
 800d352:	68fb      	ldr	r3, [r7, #12]
 800d354:	619a      	str	r2, [r3, #24]
 800d356:	68fb      	ldr	r3, [r7, #12]
 800d358:	68da      	ldr	r2, [r3, #12]
 800d35a:	68fb      	ldr	r3, [r7, #12]
 800d35c:	699b      	ldr	r3, [r3, #24]
 800d35e:	429a      	cmp	r2, r3
 800d360:	bf38      	it	cc
 800d362:	461a      	movcc	r2, r3
 800d364:	68fb      	ldr	r3, [r7, #12]
 800d366:	60da      	str	r2, [r3, #12]
 800d368:	683b      	ldr	r3, [r7, #0]
 800d36a:	681a      	ldr	r2, [r3, #0]
 800d36c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d36e:	441a      	add	r2, r3
 800d370:	683b      	ldr	r3, [r7, #0]
 800d372:	601a      	str	r2, [r3, #0]
 800d374:	687a      	ldr	r2, [r7, #4]
 800d376:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d378:	1ad3      	subs	r3, r2, r3
 800d37a:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 800d37c:	687b      	ldr	r3, [r7, #4]
 800d37e:	2b00      	cmp	r3, #0
 800d380:	f47f aeb5 	bne.w	800d0ee <f_write+0x76>
 800d384:	e000      	b.n	800d388 <f_write+0x310>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800d386:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 800d388:	68fb      	ldr	r3, [r7, #12]
 800d38a:	7d1b      	ldrb	r3, [r3, #20]
 800d38c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d390:	b2da      	uxtb	r2, r3
 800d392:	68fb      	ldr	r3, [r7, #12]
 800d394:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 800d396:	2300      	movs	r3, #0
}
 800d398:	4618      	mov	r0, r3
 800d39a:	3730      	adds	r7, #48	; 0x30
 800d39c:	46bd      	mov	sp, r7
 800d39e:	bd80      	pop	{r7, pc}

0800d3a0 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800d3a0:	b580      	push	{r7, lr}
 800d3a2:	b086      	sub	sp, #24
 800d3a4:	af00      	add	r7, sp, #0
 800d3a6:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800d3a8:	687b      	ldr	r3, [r7, #4]
 800d3aa:	f107 0208 	add.w	r2, r7, #8
 800d3ae:	4611      	mov	r1, r2
 800d3b0:	4618      	mov	r0, r3
 800d3b2:	f7ff fc19 	bl	800cbe8 <validate>
 800d3b6:	4603      	mov	r3, r0
 800d3b8:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800d3ba:	7dfb      	ldrb	r3, [r7, #23]
 800d3bc:	2b00      	cmp	r3, #0
 800d3be:	d168      	bne.n	800d492 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800d3c0:	687b      	ldr	r3, [r7, #4]
 800d3c2:	7d1b      	ldrb	r3, [r3, #20]
 800d3c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d3c8:	2b00      	cmp	r3, #0
 800d3ca:	d062      	beq.n	800d492 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800d3cc:	687b      	ldr	r3, [r7, #4]
 800d3ce:	7d1b      	ldrb	r3, [r3, #20]
 800d3d0:	b25b      	sxtb	r3, r3
 800d3d2:	2b00      	cmp	r3, #0
 800d3d4:	da15      	bge.n	800d402 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800d3d6:	68bb      	ldr	r3, [r7, #8]
 800d3d8:	7858      	ldrb	r0, [r3, #1]
 800d3da:	687b      	ldr	r3, [r7, #4]
 800d3dc:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800d3e0:	687b      	ldr	r3, [r7, #4]
 800d3e2:	6a1a      	ldr	r2, [r3, #32]
 800d3e4:	2301      	movs	r3, #1
 800d3e6:	f7fd fabb 	bl	800a960 <disk_write>
 800d3ea:	4603      	mov	r3, r0
 800d3ec:	2b00      	cmp	r3, #0
 800d3ee:	d001      	beq.n	800d3f4 <f_sync+0x54>
 800d3f0:	2301      	movs	r3, #1
 800d3f2:	e04f      	b.n	800d494 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 800d3f4:	687b      	ldr	r3, [r7, #4]
 800d3f6:	7d1b      	ldrb	r3, [r3, #20]
 800d3f8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d3fc:	b2da      	uxtb	r2, r3
 800d3fe:	687b      	ldr	r3, [r7, #4]
 800d400:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800d402:	f7fd f9ef 	bl	800a7e4 <get_fattime>
 800d406:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800d408:	68ba      	ldr	r2, [r7, #8]
 800d40a:	687b      	ldr	r3, [r7, #4]
 800d40c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d40e:	4619      	mov	r1, r3
 800d410:	4610      	mov	r0, r2
 800d412:	f7fd fd93 	bl	800af3c <move_window>
 800d416:	4603      	mov	r3, r0
 800d418:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800d41a:	7dfb      	ldrb	r3, [r7, #23]
 800d41c:	2b00      	cmp	r3, #0
 800d41e:	d138      	bne.n	800d492 <f_sync+0xf2>
					dir = fp->dir_ptr;
 800d420:	687b      	ldr	r3, [r7, #4]
 800d422:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d424:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800d426:	68fb      	ldr	r3, [r7, #12]
 800d428:	330b      	adds	r3, #11
 800d42a:	781a      	ldrb	r2, [r3, #0]
 800d42c:	68fb      	ldr	r3, [r7, #12]
 800d42e:	330b      	adds	r3, #11
 800d430:	f042 0220 	orr.w	r2, r2, #32
 800d434:	b2d2      	uxtb	r2, r2
 800d436:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800d438:	687b      	ldr	r3, [r7, #4]
 800d43a:	6818      	ldr	r0, [r3, #0]
 800d43c:	687b      	ldr	r3, [r7, #4]
 800d43e:	689b      	ldr	r3, [r3, #8]
 800d440:	461a      	mov	r2, r3
 800d442:	68f9      	ldr	r1, [r7, #12]
 800d444:	f7fe fb21 	bl	800ba8a <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800d448:	68fb      	ldr	r3, [r7, #12]
 800d44a:	f103 021c 	add.w	r2, r3, #28
 800d44e:	687b      	ldr	r3, [r7, #4]
 800d450:	68db      	ldr	r3, [r3, #12]
 800d452:	4619      	mov	r1, r3
 800d454:	4610      	mov	r0, r2
 800d456:	f7fd fb17 	bl	800aa88 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800d45a:	68fb      	ldr	r3, [r7, #12]
 800d45c:	3316      	adds	r3, #22
 800d45e:	6939      	ldr	r1, [r7, #16]
 800d460:	4618      	mov	r0, r3
 800d462:	f7fd fb11 	bl	800aa88 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800d466:	68fb      	ldr	r3, [r7, #12]
 800d468:	3312      	adds	r3, #18
 800d46a:	2100      	movs	r1, #0
 800d46c:	4618      	mov	r0, r3
 800d46e:	f7fd faf0 	bl	800aa52 <st_word>
					fs->wflag = 1;
 800d472:	68bb      	ldr	r3, [r7, #8]
 800d474:	2201      	movs	r2, #1
 800d476:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800d478:	68bb      	ldr	r3, [r7, #8]
 800d47a:	4618      	mov	r0, r3
 800d47c:	f7fd fd8c 	bl	800af98 <sync_fs>
 800d480:	4603      	mov	r3, r0
 800d482:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800d484:	687b      	ldr	r3, [r7, #4]
 800d486:	7d1b      	ldrb	r3, [r3, #20]
 800d488:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d48c:	b2da      	uxtb	r2, r3
 800d48e:	687b      	ldr	r3, [r7, #4]
 800d490:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800d492:	7dfb      	ldrb	r3, [r7, #23]
}
 800d494:	4618      	mov	r0, r3
 800d496:	3718      	adds	r7, #24
 800d498:	46bd      	mov	sp, r7
 800d49a:	bd80      	pop	{r7, pc}

0800d49c <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800d49c:	b580      	push	{r7, lr}
 800d49e:	b084      	sub	sp, #16
 800d4a0:	af00      	add	r7, sp, #0
 800d4a2:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800d4a4:	6878      	ldr	r0, [r7, #4]
 800d4a6:	f7ff ff7b 	bl	800d3a0 <f_sync>
 800d4aa:	4603      	mov	r3, r0
 800d4ac:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800d4ae:	7bfb      	ldrb	r3, [r7, #15]
 800d4b0:	2b00      	cmp	r3, #0
 800d4b2:	d118      	bne.n	800d4e6 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800d4b4:	687b      	ldr	r3, [r7, #4]
 800d4b6:	f107 0208 	add.w	r2, r7, #8
 800d4ba:	4611      	mov	r1, r2
 800d4bc:	4618      	mov	r0, r3
 800d4be:	f7ff fb93 	bl	800cbe8 <validate>
 800d4c2:	4603      	mov	r3, r0
 800d4c4:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800d4c6:	7bfb      	ldrb	r3, [r7, #15]
 800d4c8:	2b00      	cmp	r3, #0
 800d4ca:	d10c      	bne.n	800d4e6 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800d4cc:	687b      	ldr	r3, [r7, #4]
 800d4ce:	691b      	ldr	r3, [r3, #16]
 800d4d0:	4618      	mov	r0, r3
 800d4d2:	f7fd fc8f 	bl	800adf4 <dec_lock>
 800d4d6:	4603      	mov	r3, r0
 800d4d8:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800d4da:	7bfb      	ldrb	r3, [r7, #15]
 800d4dc:	2b00      	cmp	r3, #0
 800d4de:	d102      	bne.n	800d4e6 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800d4e0:	687b      	ldr	r3, [r7, #4]
 800d4e2:	2200      	movs	r2, #0
 800d4e4:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 800d4e6:	7bfb      	ldrb	r3, [r7, #15]
}
 800d4e8:	4618      	mov	r0, r3
 800d4ea:	3710      	adds	r7, #16
 800d4ec:	46bd      	mov	sp, r7
 800d4ee:	bd80      	pop	{r7, pc}

0800d4f0 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800d4f0:	b480      	push	{r7}
 800d4f2:	b087      	sub	sp, #28
 800d4f4:	af00      	add	r7, sp, #0
 800d4f6:	60f8      	str	r0, [r7, #12]
 800d4f8:	60b9      	str	r1, [r7, #8]
 800d4fa:	4613      	mov	r3, r2
 800d4fc:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800d4fe:	2301      	movs	r3, #1
 800d500:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800d502:	2300      	movs	r3, #0
 800d504:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800d506:	4b1f      	ldr	r3, [pc, #124]	; (800d584 <FATFS_LinkDriverEx+0x94>)
 800d508:	7a5b      	ldrb	r3, [r3, #9]
 800d50a:	b2db      	uxtb	r3, r3
 800d50c:	2b00      	cmp	r3, #0
 800d50e:	d131      	bne.n	800d574 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800d510:	4b1c      	ldr	r3, [pc, #112]	; (800d584 <FATFS_LinkDriverEx+0x94>)
 800d512:	7a5b      	ldrb	r3, [r3, #9]
 800d514:	b2db      	uxtb	r3, r3
 800d516:	461a      	mov	r2, r3
 800d518:	4b1a      	ldr	r3, [pc, #104]	; (800d584 <FATFS_LinkDriverEx+0x94>)
 800d51a:	2100      	movs	r1, #0
 800d51c:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800d51e:	4b19      	ldr	r3, [pc, #100]	; (800d584 <FATFS_LinkDriverEx+0x94>)
 800d520:	7a5b      	ldrb	r3, [r3, #9]
 800d522:	b2db      	uxtb	r3, r3
 800d524:	4a17      	ldr	r2, [pc, #92]	; (800d584 <FATFS_LinkDriverEx+0x94>)
 800d526:	009b      	lsls	r3, r3, #2
 800d528:	4413      	add	r3, r2
 800d52a:	68fa      	ldr	r2, [r7, #12]
 800d52c:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800d52e:	4b15      	ldr	r3, [pc, #84]	; (800d584 <FATFS_LinkDriverEx+0x94>)
 800d530:	7a5b      	ldrb	r3, [r3, #9]
 800d532:	b2db      	uxtb	r3, r3
 800d534:	461a      	mov	r2, r3
 800d536:	4b13      	ldr	r3, [pc, #76]	; (800d584 <FATFS_LinkDriverEx+0x94>)
 800d538:	4413      	add	r3, r2
 800d53a:	79fa      	ldrb	r2, [r7, #7]
 800d53c:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800d53e:	4b11      	ldr	r3, [pc, #68]	; (800d584 <FATFS_LinkDriverEx+0x94>)
 800d540:	7a5b      	ldrb	r3, [r3, #9]
 800d542:	b2db      	uxtb	r3, r3
 800d544:	1c5a      	adds	r2, r3, #1
 800d546:	b2d1      	uxtb	r1, r2
 800d548:	4a0e      	ldr	r2, [pc, #56]	; (800d584 <FATFS_LinkDriverEx+0x94>)
 800d54a:	7251      	strb	r1, [r2, #9]
 800d54c:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800d54e:	7dbb      	ldrb	r3, [r7, #22]
 800d550:	3330      	adds	r3, #48	; 0x30
 800d552:	b2da      	uxtb	r2, r3
 800d554:	68bb      	ldr	r3, [r7, #8]
 800d556:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800d558:	68bb      	ldr	r3, [r7, #8]
 800d55a:	3301      	adds	r3, #1
 800d55c:	223a      	movs	r2, #58	; 0x3a
 800d55e:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800d560:	68bb      	ldr	r3, [r7, #8]
 800d562:	3302      	adds	r3, #2
 800d564:	222f      	movs	r2, #47	; 0x2f
 800d566:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800d568:	68bb      	ldr	r3, [r7, #8]
 800d56a:	3303      	adds	r3, #3
 800d56c:	2200      	movs	r2, #0
 800d56e:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800d570:	2300      	movs	r3, #0
 800d572:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800d574:	7dfb      	ldrb	r3, [r7, #23]
}
 800d576:	4618      	mov	r0, r3
 800d578:	371c      	adds	r7, #28
 800d57a:	46bd      	mov	sp, r7
 800d57c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d580:	4770      	bx	lr
 800d582:	bf00      	nop
 800d584:	200170a4 	.word	0x200170a4

0800d588 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800d588:	b580      	push	{r7, lr}
 800d58a:	b082      	sub	sp, #8
 800d58c:	af00      	add	r7, sp, #0
 800d58e:	6078      	str	r0, [r7, #4]
 800d590:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800d592:	2200      	movs	r2, #0
 800d594:	6839      	ldr	r1, [r7, #0]
 800d596:	6878      	ldr	r0, [r7, #4]
 800d598:	f7ff ffaa 	bl	800d4f0 <FATFS_LinkDriverEx>
 800d59c:	4603      	mov	r3, r0
}
 800d59e:	4618      	mov	r0, r3
 800d5a0:	3708      	adds	r7, #8
 800d5a2:	46bd      	mov	sp, r7
 800d5a4:	bd80      	pop	{r7, pc}
	...

0800d5a8 <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 800d5a8:	b480      	push	{r7}
 800d5aa:	b085      	sub	sp, #20
 800d5ac:	af00      	add	r7, sp, #0
 800d5ae:	4603      	mov	r3, r0
 800d5b0:	6039      	str	r1, [r7, #0]
 800d5b2:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 800d5b4:	88fb      	ldrh	r3, [r7, #6]
 800d5b6:	2b7f      	cmp	r3, #127	; 0x7f
 800d5b8:	d802      	bhi.n	800d5c0 <ff_convert+0x18>
		c = chr;
 800d5ba:	88fb      	ldrh	r3, [r7, #6]
 800d5bc:	81fb      	strh	r3, [r7, #14]
 800d5be:	e025      	b.n	800d60c <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 800d5c0:	683b      	ldr	r3, [r7, #0]
 800d5c2:	2b00      	cmp	r3, #0
 800d5c4:	d00b      	beq.n	800d5de <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 800d5c6:	88fb      	ldrh	r3, [r7, #6]
 800d5c8:	2bff      	cmp	r3, #255	; 0xff
 800d5ca:	d805      	bhi.n	800d5d8 <ff_convert+0x30>
 800d5cc:	88fb      	ldrh	r3, [r7, #6]
 800d5ce:	3b80      	subs	r3, #128	; 0x80
 800d5d0:	4a12      	ldr	r2, [pc, #72]	; (800d61c <ff_convert+0x74>)
 800d5d2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d5d6:	e000      	b.n	800d5da <ff_convert+0x32>
 800d5d8:	2300      	movs	r3, #0
 800d5da:	81fb      	strh	r3, [r7, #14]
 800d5dc:	e016      	b.n	800d60c <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 800d5de:	2300      	movs	r3, #0
 800d5e0:	81fb      	strh	r3, [r7, #14]
 800d5e2:	e009      	b.n	800d5f8 <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 800d5e4:	89fb      	ldrh	r3, [r7, #14]
 800d5e6:	4a0d      	ldr	r2, [pc, #52]	; (800d61c <ff_convert+0x74>)
 800d5e8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d5ec:	88fa      	ldrh	r2, [r7, #6]
 800d5ee:	429a      	cmp	r2, r3
 800d5f0:	d006      	beq.n	800d600 <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 800d5f2:	89fb      	ldrh	r3, [r7, #14]
 800d5f4:	3301      	adds	r3, #1
 800d5f6:	81fb      	strh	r3, [r7, #14]
 800d5f8:	89fb      	ldrh	r3, [r7, #14]
 800d5fa:	2b7f      	cmp	r3, #127	; 0x7f
 800d5fc:	d9f2      	bls.n	800d5e4 <ff_convert+0x3c>
 800d5fe:	e000      	b.n	800d602 <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 800d600:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 800d602:	89fb      	ldrh	r3, [r7, #14]
 800d604:	3380      	adds	r3, #128	; 0x80
 800d606:	b29b      	uxth	r3, r3
 800d608:	b2db      	uxtb	r3, r3
 800d60a:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 800d60c:	89fb      	ldrh	r3, [r7, #14]
}
 800d60e:	4618      	mov	r0, r3
 800d610:	3714      	adds	r7, #20
 800d612:	46bd      	mov	sp, r7
 800d614:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d618:	4770      	bx	lr
 800d61a:	bf00      	nop
 800d61c:	0800e230 	.word	0x0800e230

0800d620 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 800d620:	b480      	push	{r7}
 800d622:	b087      	sub	sp, #28
 800d624:	af00      	add	r7, sp, #0
 800d626:	4603      	mov	r3, r0
 800d628:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 800d62a:	88fb      	ldrh	r3, [r7, #6]
 800d62c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d630:	d201      	bcs.n	800d636 <ff_wtoupper+0x16>
 800d632:	4b3e      	ldr	r3, [pc, #248]	; (800d72c <ff_wtoupper+0x10c>)
 800d634:	e000      	b.n	800d638 <ff_wtoupper+0x18>
 800d636:	4b3e      	ldr	r3, [pc, #248]	; (800d730 <ff_wtoupper+0x110>)
 800d638:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 800d63a:	697b      	ldr	r3, [r7, #20]
 800d63c:	1c9a      	adds	r2, r3, #2
 800d63e:	617a      	str	r2, [r7, #20]
 800d640:	881b      	ldrh	r3, [r3, #0]
 800d642:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 800d644:	8a7b      	ldrh	r3, [r7, #18]
 800d646:	2b00      	cmp	r3, #0
 800d648:	d068      	beq.n	800d71c <ff_wtoupper+0xfc>
 800d64a:	88fa      	ldrh	r2, [r7, #6]
 800d64c:	8a7b      	ldrh	r3, [r7, #18]
 800d64e:	429a      	cmp	r2, r3
 800d650:	d364      	bcc.n	800d71c <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 800d652:	697b      	ldr	r3, [r7, #20]
 800d654:	1c9a      	adds	r2, r3, #2
 800d656:	617a      	str	r2, [r7, #20]
 800d658:	881b      	ldrh	r3, [r3, #0]
 800d65a:	823b      	strh	r3, [r7, #16]
 800d65c:	8a3b      	ldrh	r3, [r7, #16]
 800d65e:	0a1b      	lsrs	r3, r3, #8
 800d660:	81fb      	strh	r3, [r7, #14]
 800d662:	8a3b      	ldrh	r3, [r7, #16]
 800d664:	b2db      	uxtb	r3, r3
 800d666:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 800d668:	88fa      	ldrh	r2, [r7, #6]
 800d66a:	8a79      	ldrh	r1, [r7, #18]
 800d66c:	8a3b      	ldrh	r3, [r7, #16]
 800d66e:	440b      	add	r3, r1
 800d670:	429a      	cmp	r2, r3
 800d672:	da49      	bge.n	800d708 <ff_wtoupper+0xe8>
			switch (cmd) {
 800d674:	89fb      	ldrh	r3, [r7, #14]
 800d676:	2b08      	cmp	r3, #8
 800d678:	d84f      	bhi.n	800d71a <ff_wtoupper+0xfa>
 800d67a:	a201      	add	r2, pc, #4	; (adr r2, 800d680 <ff_wtoupper+0x60>)
 800d67c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d680:	0800d6a5 	.word	0x0800d6a5
 800d684:	0800d6b7 	.word	0x0800d6b7
 800d688:	0800d6cd 	.word	0x0800d6cd
 800d68c:	0800d6d5 	.word	0x0800d6d5
 800d690:	0800d6dd 	.word	0x0800d6dd
 800d694:	0800d6e5 	.word	0x0800d6e5
 800d698:	0800d6ed 	.word	0x0800d6ed
 800d69c:	0800d6f5 	.word	0x0800d6f5
 800d6a0:	0800d6fd 	.word	0x0800d6fd
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 800d6a4:	88fa      	ldrh	r2, [r7, #6]
 800d6a6:	8a7b      	ldrh	r3, [r7, #18]
 800d6a8:	1ad3      	subs	r3, r2, r3
 800d6aa:	005b      	lsls	r3, r3, #1
 800d6ac:	697a      	ldr	r2, [r7, #20]
 800d6ae:	4413      	add	r3, r2
 800d6b0:	881b      	ldrh	r3, [r3, #0]
 800d6b2:	80fb      	strh	r3, [r7, #6]
 800d6b4:	e027      	b.n	800d706 <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 800d6b6:	88fa      	ldrh	r2, [r7, #6]
 800d6b8:	8a7b      	ldrh	r3, [r7, #18]
 800d6ba:	1ad3      	subs	r3, r2, r3
 800d6bc:	b29b      	uxth	r3, r3
 800d6be:	f003 0301 	and.w	r3, r3, #1
 800d6c2:	b29b      	uxth	r3, r3
 800d6c4:	88fa      	ldrh	r2, [r7, #6]
 800d6c6:	1ad3      	subs	r3, r2, r3
 800d6c8:	80fb      	strh	r3, [r7, #6]
 800d6ca:	e01c      	b.n	800d706 <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 800d6cc:	88fb      	ldrh	r3, [r7, #6]
 800d6ce:	3b10      	subs	r3, #16
 800d6d0:	80fb      	strh	r3, [r7, #6]
 800d6d2:	e018      	b.n	800d706 <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 800d6d4:	88fb      	ldrh	r3, [r7, #6]
 800d6d6:	3b20      	subs	r3, #32
 800d6d8:	80fb      	strh	r3, [r7, #6]
 800d6da:	e014      	b.n	800d706 <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 800d6dc:	88fb      	ldrh	r3, [r7, #6]
 800d6de:	3b30      	subs	r3, #48	; 0x30
 800d6e0:	80fb      	strh	r3, [r7, #6]
 800d6e2:	e010      	b.n	800d706 <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 800d6e4:	88fb      	ldrh	r3, [r7, #6]
 800d6e6:	3b1a      	subs	r3, #26
 800d6e8:	80fb      	strh	r3, [r7, #6]
 800d6ea:	e00c      	b.n	800d706 <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 800d6ec:	88fb      	ldrh	r3, [r7, #6]
 800d6ee:	3308      	adds	r3, #8
 800d6f0:	80fb      	strh	r3, [r7, #6]
 800d6f2:	e008      	b.n	800d706 <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 800d6f4:	88fb      	ldrh	r3, [r7, #6]
 800d6f6:	3b50      	subs	r3, #80	; 0x50
 800d6f8:	80fb      	strh	r3, [r7, #6]
 800d6fa:	e004      	b.n	800d706 <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 800d6fc:	88fb      	ldrh	r3, [r7, #6]
 800d6fe:	f5a3 53e3 	sub.w	r3, r3, #7264	; 0x1c60
 800d702:	80fb      	strh	r3, [r7, #6]
 800d704:	bf00      	nop
			}
			break;
 800d706:	e008      	b.n	800d71a <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 800d708:	89fb      	ldrh	r3, [r7, #14]
 800d70a:	2b00      	cmp	r3, #0
 800d70c:	d195      	bne.n	800d63a <ff_wtoupper+0x1a>
 800d70e:	8a3b      	ldrh	r3, [r7, #16]
 800d710:	005b      	lsls	r3, r3, #1
 800d712:	697a      	ldr	r2, [r7, #20]
 800d714:	4413      	add	r3, r2
 800d716:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 800d718:	e78f      	b.n	800d63a <ff_wtoupper+0x1a>
			break;
 800d71a:	bf00      	nop
	}

	return chr;
 800d71c:	88fb      	ldrh	r3, [r7, #6]
}
 800d71e:	4618      	mov	r0, r3
 800d720:	371c      	adds	r7, #28
 800d722:	46bd      	mov	sp, r7
 800d724:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d728:	4770      	bx	lr
 800d72a:	bf00      	nop
 800d72c:	0800e330 	.word	0x0800e330
 800d730:	0800e524 	.word	0x0800e524

0800d734 <__errno>:
 800d734:	4b01      	ldr	r3, [pc, #4]	; (800d73c <__errno+0x8>)
 800d736:	6818      	ldr	r0, [r3, #0]
 800d738:	4770      	bx	lr
 800d73a:	bf00      	nop
 800d73c:	200000f8 	.word	0x200000f8

0800d740 <__libc_init_array>:
 800d740:	b570      	push	{r4, r5, r6, lr}
 800d742:	4d0d      	ldr	r5, [pc, #52]	; (800d778 <__libc_init_array+0x38>)
 800d744:	4c0d      	ldr	r4, [pc, #52]	; (800d77c <__libc_init_array+0x3c>)
 800d746:	1b64      	subs	r4, r4, r5
 800d748:	10a4      	asrs	r4, r4, #2
 800d74a:	2600      	movs	r6, #0
 800d74c:	42a6      	cmp	r6, r4
 800d74e:	d109      	bne.n	800d764 <__libc_init_array+0x24>
 800d750:	4d0b      	ldr	r5, [pc, #44]	; (800d780 <__libc_init_array+0x40>)
 800d752:	4c0c      	ldr	r4, [pc, #48]	; (800d784 <__libc_init_array+0x44>)
 800d754:	f000 fc8e 	bl	800e074 <_init>
 800d758:	1b64      	subs	r4, r4, r5
 800d75a:	10a4      	asrs	r4, r4, #2
 800d75c:	2600      	movs	r6, #0
 800d75e:	42a6      	cmp	r6, r4
 800d760:	d105      	bne.n	800d76e <__libc_init_array+0x2e>
 800d762:	bd70      	pop	{r4, r5, r6, pc}
 800d764:	f855 3b04 	ldr.w	r3, [r5], #4
 800d768:	4798      	blx	r3
 800d76a:	3601      	adds	r6, #1
 800d76c:	e7ee      	b.n	800d74c <__libc_init_array+0xc>
 800d76e:	f855 3b04 	ldr.w	r3, [r5], #4
 800d772:	4798      	blx	r3
 800d774:	3601      	adds	r6, #1
 800d776:	e7f2      	b.n	800d75e <__libc_init_array+0x1e>
 800d778:	0800e61c 	.word	0x0800e61c
 800d77c:	0800e61c 	.word	0x0800e61c
 800d780:	0800e61c 	.word	0x0800e61c
 800d784:	0800e620 	.word	0x0800e620

0800d788 <memset>:
 800d788:	4402      	add	r2, r0
 800d78a:	4603      	mov	r3, r0
 800d78c:	4293      	cmp	r3, r2
 800d78e:	d100      	bne.n	800d792 <memset+0xa>
 800d790:	4770      	bx	lr
 800d792:	f803 1b01 	strb.w	r1, [r3], #1
 800d796:	e7f9      	b.n	800d78c <memset+0x4>

0800d798 <siprintf>:
 800d798:	b40e      	push	{r1, r2, r3}
 800d79a:	b500      	push	{lr}
 800d79c:	b09c      	sub	sp, #112	; 0x70
 800d79e:	ab1d      	add	r3, sp, #116	; 0x74
 800d7a0:	9002      	str	r0, [sp, #8]
 800d7a2:	9006      	str	r0, [sp, #24]
 800d7a4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800d7a8:	4809      	ldr	r0, [pc, #36]	; (800d7d0 <siprintf+0x38>)
 800d7aa:	9107      	str	r1, [sp, #28]
 800d7ac:	9104      	str	r1, [sp, #16]
 800d7ae:	4909      	ldr	r1, [pc, #36]	; (800d7d4 <siprintf+0x3c>)
 800d7b0:	f853 2b04 	ldr.w	r2, [r3], #4
 800d7b4:	9105      	str	r1, [sp, #20]
 800d7b6:	6800      	ldr	r0, [r0, #0]
 800d7b8:	9301      	str	r3, [sp, #4]
 800d7ba:	a902      	add	r1, sp, #8
 800d7bc:	f000 f868 	bl	800d890 <_svfiprintf_r>
 800d7c0:	9b02      	ldr	r3, [sp, #8]
 800d7c2:	2200      	movs	r2, #0
 800d7c4:	701a      	strb	r2, [r3, #0]
 800d7c6:	b01c      	add	sp, #112	; 0x70
 800d7c8:	f85d eb04 	ldr.w	lr, [sp], #4
 800d7cc:	b003      	add	sp, #12
 800d7ce:	4770      	bx	lr
 800d7d0:	200000f8 	.word	0x200000f8
 800d7d4:	ffff0208 	.word	0xffff0208

0800d7d8 <__ssputs_r>:
 800d7d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d7dc:	688e      	ldr	r6, [r1, #8]
 800d7de:	429e      	cmp	r6, r3
 800d7e0:	4682      	mov	sl, r0
 800d7e2:	460c      	mov	r4, r1
 800d7e4:	4690      	mov	r8, r2
 800d7e6:	461f      	mov	r7, r3
 800d7e8:	d838      	bhi.n	800d85c <__ssputs_r+0x84>
 800d7ea:	898a      	ldrh	r2, [r1, #12]
 800d7ec:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800d7f0:	d032      	beq.n	800d858 <__ssputs_r+0x80>
 800d7f2:	6825      	ldr	r5, [r4, #0]
 800d7f4:	6909      	ldr	r1, [r1, #16]
 800d7f6:	eba5 0901 	sub.w	r9, r5, r1
 800d7fa:	6965      	ldr	r5, [r4, #20]
 800d7fc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800d800:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800d804:	3301      	adds	r3, #1
 800d806:	444b      	add	r3, r9
 800d808:	106d      	asrs	r5, r5, #1
 800d80a:	429d      	cmp	r5, r3
 800d80c:	bf38      	it	cc
 800d80e:	461d      	movcc	r5, r3
 800d810:	0553      	lsls	r3, r2, #21
 800d812:	d531      	bpl.n	800d878 <__ssputs_r+0xa0>
 800d814:	4629      	mov	r1, r5
 800d816:	f000 fb63 	bl	800dee0 <_malloc_r>
 800d81a:	4606      	mov	r6, r0
 800d81c:	b950      	cbnz	r0, 800d834 <__ssputs_r+0x5c>
 800d81e:	230c      	movs	r3, #12
 800d820:	f8ca 3000 	str.w	r3, [sl]
 800d824:	89a3      	ldrh	r3, [r4, #12]
 800d826:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d82a:	81a3      	strh	r3, [r4, #12]
 800d82c:	f04f 30ff 	mov.w	r0, #4294967295
 800d830:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d834:	6921      	ldr	r1, [r4, #16]
 800d836:	464a      	mov	r2, r9
 800d838:	f000 fabe 	bl	800ddb8 <memcpy>
 800d83c:	89a3      	ldrh	r3, [r4, #12]
 800d83e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800d842:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d846:	81a3      	strh	r3, [r4, #12]
 800d848:	6126      	str	r6, [r4, #16]
 800d84a:	6165      	str	r5, [r4, #20]
 800d84c:	444e      	add	r6, r9
 800d84e:	eba5 0509 	sub.w	r5, r5, r9
 800d852:	6026      	str	r6, [r4, #0]
 800d854:	60a5      	str	r5, [r4, #8]
 800d856:	463e      	mov	r6, r7
 800d858:	42be      	cmp	r6, r7
 800d85a:	d900      	bls.n	800d85e <__ssputs_r+0x86>
 800d85c:	463e      	mov	r6, r7
 800d85e:	6820      	ldr	r0, [r4, #0]
 800d860:	4632      	mov	r2, r6
 800d862:	4641      	mov	r1, r8
 800d864:	f000 fab6 	bl	800ddd4 <memmove>
 800d868:	68a3      	ldr	r3, [r4, #8]
 800d86a:	1b9b      	subs	r3, r3, r6
 800d86c:	60a3      	str	r3, [r4, #8]
 800d86e:	6823      	ldr	r3, [r4, #0]
 800d870:	4433      	add	r3, r6
 800d872:	6023      	str	r3, [r4, #0]
 800d874:	2000      	movs	r0, #0
 800d876:	e7db      	b.n	800d830 <__ssputs_r+0x58>
 800d878:	462a      	mov	r2, r5
 800d87a:	f000 fba5 	bl	800dfc8 <_realloc_r>
 800d87e:	4606      	mov	r6, r0
 800d880:	2800      	cmp	r0, #0
 800d882:	d1e1      	bne.n	800d848 <__ssputs_r+0x70>
 800d884:	6921      	ldr	r1, [r4, #16]
 800d886:	4650      	mov	r0, sl
 800d888:	f000 fabe 	bl	800de08 <_free_r>
 800d88c:	e7c7      	b.n	800d81e <__ssputs_r+0x46>
	...

0800d890 <_svfiprintf_r>:
 800d890:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d894:	4698      	mov	r8, r3
 800d896:	898b      	ldrh	r3, [r1, #12]
 800d898:	061b      	lsls	r3, r3, #24
 800d89a:	b09d      	sub	sp, #116	; 0x74
 800d89c:	4607      	mov	r7, r0
 800d89e:	460d      	mov	r5, r1
 800d8a0:	4614      	mov	r4, r2
 800d8a2:	d50e      	bpl.n	800d8c2 <_svfiprintf_r+0x32>
 800d8a4:	690b      	ldr	r3, [r1, #16]
 800d8a6:	b963      	cbnz	r3, 800d8c2 <_svfiprintf_r+0x32>
 800d8a8:	2140      	movs	r1, #64	; 0x40
 800d8aa:	f000 fb19 	bl	800dee0 <_malloc_r>
 800d8ae:	6028      	str	r0, [r5, #0]
 800d8b0:	6128      	str	r0, [r5, #16]
 800d8b2:	b920      	cbnz	r0, 800d8be <_svfiprintf_r+0x2e>
 800d8b4:	230c      	movs	r3, #12
 800d8b6:	603b      	str	r3, [r7, #0]
 800d8b8:	f04f 30ff 	mov.w	r0, #4294967295
 800d8bc:	e0d1      	b.n	800da62 <_svfiprintf_r+0x1d2>
 800d8be:	2340      	movs	r3, #64	; 0x40
 800d8c0:	616b      	str	r3, [r5, #20]
 800d8c2:	2300      	movs	r3, #0
 800d8c4:	9309      	str	r3, [sp, #36]	; 0x24
 800d8c6:	2320      	movs	r3, #32
 800d8c8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800d8cc:	f8cd 800c 	str.w	r8, [sp, #12]
 800d8d0:	2330      	movs	r3, #48	; 0x30
 800d8d2:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800da7c <_svfiprintf_r+0x1ec>
 800d8d6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800d8da:	f04f 0901 	mov.w	r9, #1
 800d8de:	4623      	mov	r3, r4
 800d8e0:	469a      	mov	sl, r3
 800d8e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d8e6:	b10a      	cbz	r2, 800d8ec <_svfiprintf_r+0x5c>
 800d8e8:	2a25      	cmp	r2, #37	; 0x25
 800d8ea:	d1f9      	bne.n	800d8e0 <_svfiprintf_r+0x50>
 800d8ec:	ebba 0b04 	subs.w	fp, sl, r4
 800d8f0:	d00b      	beq.n	800d90a <_svfiprintf_r+0x7a>
 800d8f2:	465b      	mov	r3, fp
 800d8f4:	4622      	mov	r2, r4
 800d8f6:	4629      	mov	r1, r5
 800d8f8:	4638      	mov	r0, r7
 800d8fa:	f7ff ff6d 	bl	800d7d8 <__ssputs_r>
 800d8fe:	3001      	adds	r0, #1
 800d900:	f000 80aa 	beq.w	800da58 <_svfiprintf_r+0x1c8>
 800d904:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d906:	445a      	add	r2, fp
 800d908:	9209      	str	r2, [sp, #36]	; 0x24
 800d90a:	f89a 3000 	ldrb.w	r3, [sl]
 800d90e:	2b00      	cmp	r3, #0
 800d910:	f000 80a2 	beq.w	800da58 <_svfiprintf_r+0x1c8>
 800d914:	2300      	movs	r3, #0
 800d916:	f04f 32ff 	mov.w	r2, #4294967295
 800d91a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d91e:	f10a 0a01 	add.w	sl, sl, #1
 800d922:	9304      	str	r3, [sp, #16]
 800d924:	9307      	str	r3, [sp, #28]
 800d926:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800d92a:	931a      	str	r3, [sp, #104]	; 0x68
 800d92c:	4654      	mov	r4, sl
 800d92e:	2205      	movs	r2, #5
 800d930:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d934:	4851      	ldr	r0, [pc, #324]	; (800da7c <_svfiprintf_r+0x1ec>)
 800d936:	f7f2 fc5b 	bl	80001f0 <memchr>
 800d93a:	9a04      	ldr	r2, [sp, #16]
 800d93c:	b9d8      	cbnz	r0, 800d976 <_svfiprintf_r+0xe6>
 800d93e:	06d0      	lsls	r0, r2, #27
 800d940:	bf44      	itt	mi
 800d942:	2320      	movmi	r3, #32
 800d944:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d948:	0711      	lsls	r1, r2, #28
 800d94a:	bf44      	itt	mi
 800d94c:	232b      	movmi	r3, #43	; 0x2b
 800d94e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d952:	f89a 3000 	ldrb.w	r3, [sl]
 800d956:	2b2a      	cmp	r3, #42	; 0x2a
 800d958:	d015      	beq.n	800d986 <_svfiprintf_r+0xf6>
 800d95a:	9a07      	ldr	r2, [sp, #28]
 800d95c:	4654      	mov	r4, sl
 800d95e:	2000      	movs	r0, #0
 800d960:	f04f 0c0a 	mov.w	ip, #10
 800d964:	4621      	mov	r1, r4
 800d966:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d96a:	3b30      	subs	r3, #48	; 0x30
 800d96c:	2b09      	cmp	r3, #9
 800d96e:	d94e      	bls.n	800da0e <_svfiprintf_r+0x17e>
 800d970:	b1b0      	cbz	r0, 800d9a0 <_svfiprintf_r+0x110>
 800d972:	9207      	str	r2, [sp, #28]
 800d974:	e014      	b.n	800d9a0 <_svfiprintf_r+0x110>
 800d976:	eba0 0308 	sub.w	r3, r0, r8
 800d97a:	fa09 f303 	lsl.w	r3, r9, r3
 800d97e:	4313      	orrs	r3, r2
 800d980:	9304      	str	r3, [sp, #16]
 800d982:	46a2      	mov	sl, r4
 800d984:	e7d2      	b.n	800d92c <_svfiprintf_r+0x9c>
 800d986:	9b03      	ldr	r3, [sp, #12]
 800d988:	1d19      	adds	r1, r3, #4
 800d98a:	681b      	ldr	r3, [r3, #0]
 800d98c:	9103      	str	r1, [sp, #12]
 800d98e:	2b00      	cmp	r3, #0
 800d990:	bfbb      	ittet	lt
 800d992:	425b      	neglt	r3, r3
 800d994:	f042 0202 	orrlt.w	r2, r2, #2
 800d998:	9307      	strge	r3, [sp, #28]
 800d99a:	9307      	strlt	r3, [sp, #28]
 800d99c:	bfb8      	it	lt
 800d99e:	9204      	strlt	r2, [sp, #16]
 800d9a0:	7823      	ldrb	r3, [r4, #0]
 800d9a2:	2b2e      	cmp	r3, #46	; 0x2e
 800d9a4:	d10c      	bne.n	800d9c0 <_svfiprintf_r+0x130>
 800d9a6:	7863      	ldrb	r3, [r4, #1]
 800d9a8:	2b2a      	cmp	r3, #42	; 0x2a
 800d9aa:	d135      	bne.n	800da18 <_svfiprintf_r+0x188>
 800d9ac:	9b03      	ldr	r3, [sp, #12]
 800d9ae:	1d1a      	adds	r2, r3, #4
 800d9b0:	681b      	ldr	r3, [r3, #0]
 800d9b2:	9203      	str	r2, [sp, #12]
 800d9b4:	2b00      	cmp	r3, #0
 800d9b6:	bfb8      	it	lt
 800d9b8:	f04f 33ff 	movlt.w	r3, #4294967295
 800d9bc:	3402      	adds	r4, #2
 800d9be:	9305      	str	r3, [sp, #20]
 800d9c0:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800da8c <_svfiprintf_r+0x1fc>
 800d9c4:	7821      	ldrb	r1, [r4, #0]
 800d9c6:	2203      	movs	r2, #3
 800d9c8:	4650      	mov	r0, sl
 800d9ca:	f7f2 fc11 	bl	80001f0 <memchr>
 800d9ce:	b140      	cbz	r0, 800d9e2 <_svfiprintf_r+0x152>
 800d9d0:	2340      	movs	r3, #64	; 0x40
 800d9d2:	eba0 000a 	sub.w	r0, r0, sl
 800d9d6:	fa03 f000 	lsl.w	r0, r3, r0
 800d9da:	9b04      	ldr	r3, [sp, #16]
 800d9dc:	4303      	orrs	r3, r0
 800d9de:	3401      	adds	r4, #1
 800d9e0:	9304      	str	r3, [sp, #16]
 800d9e2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d9e6:	4826      	ldr	r0, [pc, #152]	; (800da80 <_svfiprintf_r+0x1f0>)
 800d9e8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800d9ec:	2206      	movs	r2, #6
 800d9ee:	f7f2 fbff 	bl	80001f0 <memchr>
 800d9f2:	2800      	cmp	r0, #0
 800d9f4:	d038      	beq.n	800da68 <_svfiprintf_r+0x1d8>
 800d9f6:	4b23      	ldr	r3, [pc, #140]	; (800da84 <_svfiprintf_r+0x1f4>)
 800d9f8:	bb1b      	cbnz	r3, 800da42 <_svfiprintf_r+0x1b2>
 800d9fa:	9b03      	ldr	r3, [sp, #12]
 800d9fc:	3307      	adds	r3, #7
 800d9fe:	f023 0307 	bic.w	r3, r3, #7
 800da02:	3308      	adds	r3, #8
 800da04:	9303      	str	r3, [sp, #12]
 800da06:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800da08:	4433      	add	r3, r6
 800da0a:	9309      	str	r3, [sp, #36]	; 0x24
 800da0c:	e767      	b.n	800d8de <_svfiprintf_r+0x4e>
 800da0e:	fb0c 3202 	mla	r2, ip, r2, r3
 800da12:	460c      	mov	r4, r1
 800da14:	2001      	movs	r0, #1
 800da16:	e7a5      	b.n	800d964 <_svfiprintf_r+0xd4>
 800da18:	2300      	movs	r3, #0
 800da1a:	3401      	adds	r4, #1
 800da1c:	9305      	str	r3, [sp, #20]
 800da1e:	4619      	mov	r1, r3
 800da20:	f04f 0c0a 	mov.w	ip, #10
 800da24:	4620      	mov	r0, r4
 800da26:	f810 2b01 	ldrb.w	r2, [r0], #1
 800da2a:	3a30      	subs	r2, #48	; 0x30
 800da2c:	2a09      	cmp	r2, #9
 800da2e:	d903      	bls.n	800da38 <_svfiprintf_r+0x1a8>
 800da30:	2b00      	cmp	r3, #0
 800da32:	d0c5      	beq.n	800d9c0 <_svfiprintf_r+0x130>
 800da34:	9105      	str	r1, [sp, #20]
 800da36:	e7c3      	b.n	800d9c0 <_svfiprintf_r+0x130>
 800da38:	fb0c 2101 	mla	r1, ip, r1, r2
 800da3c:	4604      	mov	r4, r0
 800da3e:	2301      	movs	r3, #1
 800da40:	e7f0      	b.n	800da24 <_svfiprintf_r+0x194>
 800da42:	ab03      	add	r3, sp, #12
 800da44:	9300      	str	r3, [sp, #0]
 800da46:	462a      	mov	r2, r5
 800da48:	4b0f      	ldr	r3, [pc, #60]	; (800da88 <_svfiprintf_r+0x1f8>)
 800da4a:	a904      	add	r1, sp, #16
 800da4c:	4638      	mov	r0, r7
 800da4e:	f3af 8000 	nop.w
 800da52:	1c42      	adds	r2, r0, #1
 800da54:	4606      	mov	r6, r0
 800da56:	d1d6      	bne.n	800da06 <_svfiprintf_r+0x176>
 800da58:	89ab      	ldrh	r3, [r5, #12]
 800da5a:	065b      	lsls	r3, r3, #25
 800da5c:	f53f af2c 	bmi.w	800d8b8 <_svfiprintf_r+0x28>
 800da60:	9809      	ldr	r0, [sp, #36]	; 0x24
 800da62:	b01d      	add	sp, #116	; 0x74
 800da64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800da68:	ab03      	add	r3, sp, #12
 800da6a:	9300      	str	r3, [sp, #0]
 800da6c:	462a      	mov	r2, r5
 800da6e:	4b06      	ldr	r3, [pc, #24]	; (800da88 <_svfiprintf_r+0x1f8>)
 800da70:	a904      	add	r1, sp, #16
 800da72:	4638      	mov	r0, r7
 800da74:	f000 f87a 	bl	800db6c <_printf_i>
 800da78:	e7eb      	b.n	800da52 <_svfiprintf_r+0x1c2>
 800da7a:	bf00      	nop
 800da7c:	0800e5e0 	.word	0x0800e5e0
 800da80:	0800e5ea 	.word	0x0800e5ea
 800da84:	00000000 	.word	0x00000000
 800da88:	0800d7d9 	.word	0x0800d7d9
 800da8c:	0800e5e6 	.word	0x0800e5e6

0800da90 <_printf_common>:
 800da90:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800da94:	4616      	mov	r6, r2
 800da96:	4699      	mov	r9, r3
 800da98:	688a      	ldr	r2, [r1, #8]
 800da9a:	690b      	ldr	r3, [r1, #16]
 800da9c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800daa0:	4293      	cmp	r3, r2
 800daa2:	bfb8      	it	lt
 800daa4:	4613      	movlt	r3, r2
 800daa6:	6033      	str	r3, [r6, #0]
 800daa8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800daac:	4607      	mov	r7, r0
 800daae:	460c      	mov	r4, r1
 800dab0:	b10a      	cbz	r2, 800dab6 <_printf_common+0x26>
 800dab2:	3301      	adds	r3, #1
 800dab4:	6033      	str	r3, [r6, #0]
 800dab6:	6823      	ldr	r3, [r4, #0]
 800dab8:	0699      	lsls	r1, r3, #26
 800daba:	bf42      	ittt	mi
 800dabc:	6833      	ldrmi	r3, [r6, #0]
 800dabe:	3302      	addmi	r3, #2
 800dac0:	6033      	strmi	r3, [r6, #0]
 800dac2:	6825      	ldr	r5, [r4, #0]
 800dac4:	f015 0506 	ands.w	r5, r5, #6
 800dac8:	d106      	bne.n	800dad8 <_printf_common+0x48>
 800daca:	f104 0a19 	add.w	sl, r4, #25
 800dace:	68e3      	ldr	r3, [r4, #12]
 800dad0:	6832      	ldr	r2, [r6, #0]
 800dad2:	1a9b      	subs	r3, r3, r2
 800dad4:	42ab      	cmp	r3, r5
 800dad6:	dc26      	bgt.n	800db26 <_printf_common+0x96>
 800dad8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800dadc:	1e13      	subs	r3, r2, #0
 800dade:	6822      	ldr	r2, [r4, #0]
 800dae0:	bf18      	it	ne
 800dae2:	2301      	movne	r3, #1
 800dae4:	0692      	lsls	r2, r2, #26
 800dae6:	d42b      	bmi.n	800db40 <_printf_common+0xb0>
 800dae8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800daec:	4649      	mov	r1, r9
 800daee:	4638      	mov	r0, r7
 800daf0:	47c0      	blx	r8
 800daf2:	3001      	adds	r0, #1
 800daf4:	d01e      	beq.n	800db34 <_printf_common+0xa4>
 800daf6:	6823      	ldr	r3, [r4, #0]
 800daf8:	68e5      	ldr	r5, [r4, #12]
 800dafa:	6832      	ldr	r2, [r6, #0]
 800dafc:	f003 0306 	and.w	r3, r3, #6
 800db00:	2b04      	cmp	r3, #4
 800db02:	bf08      	it	eq
 800db04:	1aad      	subeq	r5, r5, r2
 800db06:	68a3      	ldr	r3, [r4, #8]
 800db08:	6922      	ldr	r2, [r4, #16]
 800db0a:	bf0c      	ite	eq
 800db0c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800db10:	2500      	movne	r5, #0
 800db12:	4293      	cmp	r3, r2
 800db14:	bfc4      	itt	gt
 800db16:	1a9b      	subgt	r3, r3, r2
 800db18:	18ed      	addgt	r5, r5, r3
 800db1a:	2600      	movs	r6, #0
 800db1c:	341a      	adds	r4, #26
 800db1e:	42b5      	cmp	r5, r6
 800db20:	d11a      	bne.n	800db58 <_printf_common+0xc8>
 800db22:	2000      	movs	r0, #0
 800db24:	e008      	b.n	800db38 <_printf_common+0xa8>
 800db26:	2301      	movs	r3, #1
 800db28:	4652      	mov	r2, sl
 800db2a:	4649      	mov	r1, r9
 800db2c:	4638      	mov	r0, r7
 800db2e:	47c0      	blx	r8
 800db30:	3001      	adds	r0, #1
 800db32:	d103      	bne.n	800db3c <_printf_common+0xac>
 800db34:	f04f 30ff 	mov.w	r0, #4294967295
 800db38:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800db3c:	3501      	adds	r5, #1
 800db3e:	e7c6      	b.n	800dace <_printf_common+0x3e>
 800db40:	18e1      	adds	r1, r4, r3
 800db42:	1c5a      	adds	r2, r3, #1
 800db44:	2030      	movs	r0, #48	; 0x30
 800db46:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800db4a:	4422      	add	r2, r4
 800db4c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800db50:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800db54:	3302      	adds	r3, #2
 800db56:	e7c7      	b.n	800dae8 <_printf_common+0x58>
 800db58:	2301      	movs	r3, #1
 800db5a:	4622      	mov	r2, r4
 800db5c:	4649      	mov	r1, r9
 800db5e:	4638      	mov	r0, r7
 800db60:	47c0      	blx	r8
 800db62:	3001      	adds	r0, #1
 800db64:	d0e6      	beq.n	800db34 <_printf_common+0xa4>
 800db66:	3601      	adds	r6, #1
 800db68:	e7d9      	b.n	800db1e <_printf_common+0x8e>
	...

0800db6c <_printf_i>:
 800db6c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800db70:	7e0f      	ldrb	r7, [r1, #24]
 800db72:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800db74:	2f78      	cmp	r7, #120	; 0x78
 800db76:	4691      	mov	r9, r2
 800db78:	4680      	mov	r8, r0
 800db7a:	460c      	mov	r4, r1
 800db7c:	469a      	mov	sl, r3
 800db7e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800db82:	d807      	bhi.n	800db94 <_printf_i+0x28>
 800db84:	2f62      	cmp	r7, #98	; 0x62
 800db86:	d80a      	bhi.n	800db9e <_printf_i+0x32>
 800db88:	2f00      	cmp	r7, #0
 800db8a:	f000 80d8 	beq.w	800dd3e <_printf_i+0x1d2>
 800db8e:	2f58      	cmp	r7, #88	; 0x58
 800db90:	f000 80a3 	beq.w	800dcda <_printf_i+0x16e>
 800db94:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800db98:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800db9c:	e03a      	b.n	800dc14 <_printf_i+0xa8>
 800db9e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800dba2:	2b15      	cmp	r3, #21
 800dba4:	d8f6      	bhi.n	800db94 <_printf_i+0x28>
 800dba6:	a101      	add	r1, pc, #4	; (adr r1, 800dbac <_printf_i+0x40>)
 800dba8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800dbac:	0800dc05 	.word	0x0800dc05
 800dbb0:	0800dc19 	.word	0x0800dc19
 800dbb4:	0800db95 	.word	0x0800db95
 800dbb8:	0800db95 	.word	0x0800db95
 800dbbc:	0800db95 	.word	0x0800db95
 800dbc0:	0800db95 	.word	0x0800db95
 800dbc4:	0800dc19 	.word	0x0800dc19
 800dbc8:	0800db95 	.word	0x0800db95
 800dbcc:	0800db95 	.word	0x0800db95
 800dbd0:	0800db95 	.word	0x0800db95
 800dbd4:	0800db95 	.word	0x0800db95
 800dbd8:	0800dd25 	.word	0x0800dd25
 800dbdc:	0800dc49 	.word	0x0800dc49
 800dbe0:	0800dd07 	.word	0x0800dd07
 800dbe4:	0800db95 	.word	0x0800db95
 800dbe8:	0800db95 	.word	0x0800db95
 800dbec:	0800dd47 	.word	0x0800dd47
 800dbf0:	0800db95 	.word	0x0800db95
 800dbf4:	0800dc49 	.word	0x0800dc49
 800dbf8:	0800db95 	.word	0x0800db95
 800dbfc:	0800db95 	.word	0x0800db95
 800dc00:	0800dd0f 	.word	0x0800dd0f
 800dc04:	682b      	ldr	r3, [r5, #0]
 800dc06:	1d1a      	adds	r2, r3, #4
 800dc08:	681b      	ldr	r3, [r3, #0]
 800dc0a:	602a      	str	r2, [r5, #0]
 800dc0c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800dc10:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800dc14:	2301      	movs	r3, #1
 800dc16:	e0a3      	b.n	800dd60 <_printf_i+0x1f4>
 800dc18:	6820      	ldr	r0, [r4, #0]
 800dc1a:	6829      	ldr	r1, [r5, #0]
 800dc1c:	0606      	lsls	r6, r0, #24
 800dc1e:	f101 0304 	add.w	r3, r1, #4
 800dc22:	d50a      	bpl.n	800dc3a <_printf_i+0xce>
 800dc24:	680e      	ldr	r6, [r1, #0]
 800dc26:	602b      	str	r3, [r5, #0]
 800dc28:	2e00      	cmp	r6, #0
 800dc2a:	da03      	bge.n	800dc34 <_printf_i+0xc8>
 800dc2c:	232d      	movs	r3, #45	; 0x2d
 800dc2e:	4276      	negs	r6, r6
 800dc30:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800dc34:	485e      	ldr	r0, [pc, #376]	; (800ddb0 <_printf_i+0x244>)
 800dc36:	230a      	movs	r3, #10
 800dc38:	e019      	b.n	800dc6e <_printf_i+0x102>
 800dc3a:	680e      	ldr	r6, [r1, #0]
 800dc3c:	602b      	str	r3, [r5, #0]
 800dc3e:	f010 0f40 	tst.w	r0, #64	; 0x40
 800dc42:	bf18      	it	ne
 800dc44:	b236      	sxthne	r6, r6
 800dc46:	e7ef      	b.n	800dc28 <_printf_i+0xbc>
 800dc48:	682b      	ldr	r3, [r5, #0]
 800dc4a:	6820      	ldr	r0, [r4, #0]
 800dc4c:	1d19      	adds	r1, r3, #4
 800dc4e:	6029      	str	r1, [r5, #0]
 800dc50:	0601      	lsls	r1, r0, #24
 800dc52:	d501      	bpl.n	800dc58 <_printf_i+0xec>
 800dc54:	681e      	ldr	r6, [r3, #0]
 800dc56:	e002      	b.n	800dc5e <_printf_i+0xf2>
 800dc58:	0646      	lsls	r6, r0, #25
 800dc5a:	d5fb      	bpl.n	800dc54 <_printf_i+0xe8>
 800dc5c:	881e      	ldrh	r6, [r3, #0]
 800dc5e:	4854      	ldr	r0, [pc, #336]	; (800ddb0 <_printf_i+0x244>)
 800dc60:	2f6f      	cmp	r7, #111	; 0x6f
 800dc62:	bf0c      	ite	eq
 800dc64:	2308      	moveq	r3, #8
 800dc66:	230a      	movne	r3, #10
 800dc68:	2100      	movs	r1, #0
 800dc6a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800dc6e:	6865      	ldr	r5, [r4, #4]
 800dc70:	60a5      	str	r5, [r4, #8]
 800dc72:	2d00      	cmp	r5, #0
 800dc74:	bfa2      	ittt	ge
 800dc76:	6821      	ldrge	r1, [r4, #0]
 800dc78:	f021 0104 	bicge.w	r1, r1, #4
 800dc7c:	6021      	strge	r1, [r4, #0]
 800dc7e:	b90e      	cbnz	r6, 800dc84 <_printf_i+0x118>
 800dc80:	2d00      	cmp	r5, #0
 800dc82:	d04d      	beq.n	800dd20 <_printf_i+0x1b4>
 800dc84:	4615      	mov	r5, r2
 800dc86:	fbb6 f1f3 	udiv	r1, r6, r3
 800dc8a:	fb03 6711 	mls	r7, r3, r1, r6
 800dc8e:	5dc7      	ldrb	r7, [r0, r7]
 800dc90:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800dc94:	4637      	mov	r7, r6
 800dc96:	42bb      	cmp	r3, r7
 800dc98:	460e      	mov	r6, r1
 800dc9a:	d9f4      	bls.n	800dc86 <_printf_i+0x11a>
 800dc9c:	2b08      	cmp	r3, #8
 800dc9e:	d10b      	bne.n	800dcb8 <_printf_i+0x14c>
 800dca0:	6823      	ldr	r3, [r4, #0]
 800dca2:	07de      	lsls	r6, r3, #31
 800dca4:	d508      	bpl.n	800dcb8 <_printf_i+0x14c>
 800dca6:	6923      	ldr	r3, [r4, #16]
 800dca8:	6861      	ldr	r1, [r4, #4]
 800dcaa:	4299      	cmp	r1, r3
 800dcac:	bfde      	ittt	le
 800dcae:	2330      	movle	r3, #48	; 0x30
 800dcb0:	f805 3c01 	strble.w	r3, [r5, #-1]
 800dcb4:	f105 35ff 	addle.w	r5, r5, #4294967295
 800dcb8:	1b52      	subs	r2, r2, r5
 800dcba:	6122      	str	r2, [r4, #16]
 800dcbc:	f8cd a000 	str.w	sl, [sp]
 800dcc0:	464b      	mov	r3, r9
 800dcc2:	aa03      	add	r2, sp, #12
 800dcc4:	4621      	mov	r1, r4
 800dcc6:	4640      	mov	r0, r8
 800dcc8:	f7ff fee2 	bl	800da90 <_printf_common>
 800dccc:	3001      	adds	r0, #1
 800dcce:	d14c      	bne.n	800dd6a <_printf_i+0x1fe>
 800dcd0:	f04f 30ff 	mov.w	r0, #4294967295
 800dcd4:	b004      	add	sp, #16
 800dcd6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800dcda:	4835      	ldr	r0, [pc, #212]	; (800ddb0 <_printf_i+0x244>)
 800dcdc:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800dce0:	6829      	ldr	r1, [r5, #0]
 800dce2:	6823      	ldr	r3, [r4, #0]
 800dce4:	f851 6b04 	ldr.w	r6, [r1], #4
 800dce8:	6029      	str	r1, [r5, #0]
 800dcea:	061d      	lsls	r5, r3, #24
 800dcec:	d514      	bpl.n	800dd18 <_printf_i+0x1ac>
 800dcee:	07df      	lsls	r7, r3, #31
 800dcf0:	bf44      	itt	mi
 800dcf2:	f043 0320 	orrmi.w	r3, r3, #32
 800dcf6:	6023      	strmi	r3, [r4, #0]
 800dcf8:	b91e      	cbnz	r6, 800dd02 <_printf_i+0x196>
 800dcfa:	6823      	ldr	r3, [r4, #0]
 800dcfc:	f023 0320 	bic.w	r3, r3, #32
 800dd00:	6023      	str	r3, [r4, #0]
 800dd02:	2310      	movs	r3, #16
 800dd04:	e7b0      	b.n	800dc68 <_printf_i+0xfc>
 800dd06:	6823      	ldr	r3, [r4, #0]
 800dd08:	f043 0320 	orr.w	r3, r3, #32
 800dd0c:	6023      	str	r3, [r4, #0]
 800dd0e:	2378      	movs	r3, #120	; 0x78
 800dd10:	4828      	ldr	r0, [pc, #160]	; (800ddb4 <_printf_i+0x248>)
 800dd12:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800dd16:	e7e3      	b.n	800dce0 <_printf_i+0x174>
 800dd18:	0659      	lsls	r1, r3, #25
 800dd1a:	bf48      	it	mi
 800dd1c:	b2b6      	uxthmi	r6, r6
 800dd1e:	e7e6      	b.n	800dcee <_printf_i+0x182>
 800dd20:	4615      	mov	r5, r2
 800dd22:	e7bb      	b.n	800dc9c <_printf_i+0x130>
 800dd24:	682b      	ldr	r3, [r5, #0]
 800dd26:	6826      	ldr	r6, [r4, #0]
 800dd28:	6961      	ldr	r1, [r4, #20]
 800dd2a:	1d18      	adds	r0, r3, #4
 800dd2c:	6028      	str	r0, [r5, #0]
 800dd2e:	0635      	lsls	r5, r6, #24
 800dd30:	681b      	ldr	r3, [r3, #0]
 800dd32:	d501      	bpl.n	800dd38 <_printf_i+0x1cc>
 800dd34:	6019      	str	r1, [r3, #0]
 800dd36:	e002      	b.n	800dd3e <_printf_i+0x1d2>
 800dd38:	0670      	lsls	r0, r6, #25
 800dd3a:	d5fb      	bpl.n	800dd34 <_printf_i+0x1c8>
 800dd3c:	8019      	strh	r1, [r3, #0]
 800dd3e:	2300      	movs	r3, #0
 800dd40:	6123      	str	r3, [r4, #16]
 800dd42:	4615      	mov	r5, r2
 800dd44:	e7ba      	b.n	800dcbc <_printf_i+0x150>
 800dd46:	682b      	ldr	r3, [r5, #0]
 800dd48:	1d1a      	adds	r2, r3, #4
 800dd4a:	602a      	str	r2, [r5, #0]
 800dd4c:	681d      	ldr	r5, [r3, #0]
 800dd4e:	6862      	ldr	r2, [r4, #4]
 800dd50:	2100      	movs	r1, #0
 800dd52:	4628      	mov	r0, r5
 800dd54:	f7f2 fa4c 	bl	80001f0 <memchr>
 800dd58:	b108      	cbz	r0, 800dd5e <_printf_i+0x1f2>
 800dd5a:	1b40      	subs	r0, r0, r5
 800dd5c:	6060      	str	r0, [r4, #4]
 800dd5e:	6863      	ldr	r3, [r4, #4]
 800dd60:	6123      	str	r3, [r4, #16]
 800dd62:	2300      	movs	r3, #0
 800dd64:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800dd68:	e7a8      	b.n	800dcbc <_printf_i+0x150>
 800dd6a:	6923      	ldr	r3, [r4, #16]
 800dd6c:	462a      	mov	r2, r5
 800dd6e:	4649      	mov	r1, r9
 800dd70:	4640      	mov	r0, r8
 800dd72:	47d0      	blx	sl
 800dd74:	3001      	adds	r0, #1
 800dd76:	d0ab      	beq.n	800dcd0 <_printf_i+0x164>
 800dd78:	6823      	ldr	r3, [r4, #0]
 800dd7a:	079b      	lsls	r3, r3, #30
 800dd7c:	d413      	bmi.n	800dda6 <_printf_i+0x23a>
 800dd7e:	68e0      	ldr	r0, [r4, #12]
 800dd80:	9b03      	ldr	r3, [sp, #12]
 800dd82:	4298      	cmp	r0, r3
 800dd84:	bfb8      	it	lt
 800dd86:	4618      	movlt	r0, r3
 800dd88:	e7a4      	b.n	800dcd4 <_printf_i+0x168>
 800dd8a:	2301      	movs	r3, #1
 800dd8c:	4632      	mov	r2, r6
 800dd8e:	4649      	mov	r1, r9
 800dd90:	4640      	mov	r0, r8
 800dd92:	47d0      	blx	sl
 800dd94:	3001      	adds	r0, #1
 800dd96:	d09b      	beq.n	800dcd0 <_printf_i+0x164>
 800dd98:	3501      	adds	r5, #1
 800dd9a:	68e3      	ldr	r3, [r4, #12]
 800dd9c:	9903      	ldr	r1, [sp, #12]
 800dd9e:	1a5b      	subs	r3, r3, r1
 800dda0:	42ab      	cmp	r3, r5
 800dda2:	dcf2      	bgt.n	800dd8a <_printf_i+0x21e>
 800dda4:	e7eb      	b.n	800dd7e <_printf_i+0x212>
 800dda6:	2500      	movs	r5, #0
 800dda8:	f104 0619 	add.w	r6, r4, #25
 800ddac:	e7f5      	b.n	800dd9a <_printf_i+0x22e>
 800ddae:	bf00      	nop
 800ddb0:	0800e5f1 	.word	0x0800e5f1
 800ddb4:	0800e602 	.word	0x0800e602

0800ddb8 <memcpy>:
 800ddb8:	440a      	add	r2, r1
 800ddba:	4291      	cmp	r1, r2
 800ddbc:	f100 33ff 	add.w	r3, r0, #4294967295
 800ddc0:	d100      	bne.n	800ddc4 <memcpy+0xc>
 800ddc2:	4770      	bx	lr
 800ddc4:	b510      	push	{r4, lr}
 800ddc6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ddca:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ddce:	4291      	cmp	r1, r2
 800ddd0:	d1f9      	bne.n	800ddc6 <memcpy+0xe>
 800ddd2:	bd10      	pop	{r4, pc}

0800ddd4 <memmove>:
 800ddd4:	4288      	cmp	r0, r1
 800ddd6:	b510      	push	{r4, lr}
 800ddd8:	eb01 0402 	add.w	r4, r1, r2
 800dddc:	d902      	bls.n	800dde4 <memmove+0x10>
 800ddde:	4284      	cmp	r4, r0
 800dde0:	4623      	mov	r3, r4
 800dde2:	d807      	bhi.n	800ddf4 <memmove+0x20>
 800dde4:	1e43      	subs	r3, r0, #1
 800dde6:	42a1      	cmp	r1, r4
 800dde8:	d008      	beq.n	800ddfc <memmove+0x28>
 800ddea:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ddee:	f803 2f01 	strb.w	r2, [r3, #1]!
 800ddf2:	e7f8      	b.n	800dde6 <memmove+0x12>
 800ddf4:	4402      	add	r2, r0
 800ddf6:	4601      	mov	r1, r0
 800ddf8:	428a      	cmp	r2, r1
 800ddfa:	d100      	bne.n	800ddfe <memmove+0x2a>
 800ddfc:	bd10      	pop	{r4, pc}
 800ddfe:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800de02:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800de06:	e7f7      	b.n	800ddf8 <memmove+0x24>

0800de08 <_free_r>:
 800de08:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800de0a:	2900      	cmp	r1, #0
 800de0c:	d044      	beq.n	800de98 <_free_r+0x90>
 800de0e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800de12:	9001      	str	r0, [sp, #4]
 800de14:	2b00      	cmp	r3, #0
 800de16:	f1a1 0404 	sub.w	r4, r1, #4
 800de1a:	bfb8      	it	lt
 800de1c:	18e4      	addlt	r4, r4, r3
 800de1e:	f000 f913 	bl	800e048 <__malloc_lock>
 800de22:	4a1e      	ldr	r2, [pc, #120]	; (800de9c <_free_r+0x94>)
 800de24:	9801      	ldr	r0, [sp, #4]
 800de26:	6813      	ldr	r3, [r2, #0]
 800de28:	b933      	cbnz	r3, 800de38 <_free_r+0x30>
 800de2a:	6063      	str	r3, [r4, #4]
 800de2c:	6014      	str	r4, [r2, #0]
 800de2e:	b003      	add	sp, #12
 800de30:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800de34:	f000 b90e 	b.w	800e054 <__malloc_unlock>
 800de38:	42a3      	cmp	r3, r4
 800de3a:	d908      	bls.n	800de4e <_free_r+0x46>
 800de3c:	6825      	ldr	r5, [r4, #0]
 800de3e:	1961      	adds	r1, r4, r5
 800de40:	428b      	cmp	r3, r1
 800de42:	bf01      	itttt	eq
 800de44:	6819      	ldreq	r1, [r3, #0]
 800de46:	685b      	ldreq	r3, [r3, #4]
 800de48:	1949      	addeq	r1, r1, r5
 800de4a:	6021      	streq	r1, [r4, #0]
 800de4c:	e7ed      	b.n	800de2a <_free_r+0x22>
 800de4e:	461a      	mov	r2, r3
 800de50:	685b      	ldr	r3, [r3, #4]
 800de52:	b10b      	cbz	r3, 800de58 <_free_r+0x50>
 800de54:	42a3      	cmp	r3, r4
 800de56:	d9fa      	bls.n	800de4e <_free_r+0x46>
 800de58:	6811      	ldr	r1, [r2, #0]
 800de5a:	1855      	adds	r5, r2, r1
 800de5c:	42a5      	cmp	r5, r4
 800de5e:	d10b      	bne.n	800de78 <_free_r+0x70>
 800de60:	6824      	ldr	r4, [r4, #0]
 800de62:	4421      	add	r1, r4
 800de64:	1854      	adds	r4, r2, r1
 800de66:	42a3      	cmp	r3, r4
 800de68:	6011      	str	r1, [r2, #0]
 800de6a:	d1e0      	bne.n	800de2e <_free_r+0x26>
 800de6c:	681c      	ldr	r4, [r3, #0]
 800de6e:	685b      	ldr	r3, [r3, #4]
 800de70:	6053      	str	r3, [r2, #4]
 800de72:	4421      	add	r1, r4
 800de74:	6011      	str	r1, [r2, #0]
 800de76:	e7da      	b.n	800de2e <_free_r+0x26>
 800de78:	d902      	bls.n	800de80 <_free_r+0x78>
 800de7a:	230c      	movs	r3, #12
 800de7c:	6003      	str	r3, [r0, #0]
 800de7e:	e7d6      	b.n	800de2e <_free_r+0x26>
 800de80:	6825      	ldr	r5, [r4, #0]
 800de82:	1961      	adds	r1, r4, r5
 800de84:	428b      	cmp	r3, r1
 800de86:	bf04      	itt	eq
 800de88:	6819      	ldreq	r1, [r3, #0]
 800de8a:	685b      	ldreq	r3, [r3, #4]
 800de8c:	6063      	str	r3, [r4, #4]
 800de8e:	bf04      	itt	eq
 800de90:	1949      	addeq	r1, r1, r5
 800de92:	6021      	streq	r1, [r4, #0]
 800de94:	6054      	str	r4, [r2, #4]
 800de96:	e7ca      	b.n	800de2e <_free_r+0x26>
 800de98:	b003      	add	sp, #12
 800de9a:	bd30      	pop	{r4, r5, pc}
 800de9c:	200170b0 	.word	0x200170b0

0800dea0 <sbrk_aligned>:
 800dea0:	b570      	push	{r4, r5, r6, lr}
 800dea2:	4e0e      	ldr	r6, [pc, #56]	; (800dedc <sbrk_aligned+0x3c>)
 800dea4:	460c      	mov	r4, r1
 800dea6:	6831      	ldr	r1, [r6, #0]
 800dea8:	4605      	mov	r5, r0
 800deaa:	b911      	cbnz	r1, 800deb2 <sbrk_aligned+0x12>
 800deac:	f000 f8bc 	bl	800e028 <_sbrk_r>
 800deb0:	6030      	str	r0, [r6, #0]
 800deb2:	4621      	mov	r1, r4
 800deb4:	4628      	mov	r0, r5
 800deb6:	f000 f8b7 	bl	800e028 <_sbrk_r>
 800deba:	1c43      	adds	r3, r0, #1
 800debc:	d00a      	beq.n	800ded4 <sbrk_aligned+0x34>
 800debe:	1cc4      	adds	r4, r0, #3
 800dec0:	f024 0403 	bic.w	r4, r4, #3
 800dec4:	42a0      	cmp	r0, r4
 800dec6:	d007      	beq.n	800ded8 <sbrk_aligned+0x38>
 800dec8:	1a21      	subs	r1, r4, r0
 800deca:	4628      	mov	r0, r5
 800decc:	f000 f8ac 	bl	800e028 <_sbrk_r>
 800ded0:	3001      	adds	r0, #1
 800ded2:	d101      	bne.n	800ded8 <sbrk_aligned+0x38>
 800ded4:	f04f 34ff 	mov.w	r4, #4294967295
 800ded8:	4620      	mov	r0, r4
 800deda:	bd70      	pop	{r4, r5, r6, pc}
 800dedc:	200170b4 	.word	0x200170b4

0800dee0 <_malloc_r>:
 800dee0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dee4:	1ccd      	adds	r5, r1, #3
 800dee6:	f025 0503 	bic.w	r5, r5, #3
 800deea:	3508      	adds	r5, #8
 800deec:	2d0c      	cmp	r5, #12
 800deee:	bf38      	it	cc
 800def0:	250c      	movcc	r5, #12
 800def2:	2d00      	cmp	r5, #0
 800def4:	4607      	mov	r7, r0
 800def6:	db01      	blt.n	800defc <_malloc_r+0x1c>
 800def8:	42a9      	cmp	r1, r5
 800defa:	d905      	bls.n	800df08 <_malloc_r+0x28>
 800defc:	230c      	movs	r3, #12
 800defe:	603b      	str	r3, [r7, #0]
 800df00:	2600      	movs	r6, #0
 800df02:	4630      	mov	r0, r6
 800df04:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800df08:	4e2e      	ldr	r6, [pc, #184]	; (800dfc4 <_malloc_r+0xe4>)
 800df0a:	f000 f89d 	bl	800e048 <__malloc_lock>
 800df0e:	6833      	ldr	r3, [r6, #0]
 800df10:	461c      	mov	r4, r3
 800df12:	bb34      	cbnz	r4, 800df62 <_malloc_r+0x82>
 800df14:	4629      	mov	r1, r5
 800df16:	4638      	mov	r0, r7
 800df18:	f7ff ffc2 	bl	800dea0 <sbrk_aligned>
 800df1c:	1c43      	adds	r3, r0, #1
 800df1e:	4604      	mov	r4, r0
 800df20:	d14d      	bne.n	800dfbe <_malloc_r+0xde>
 800df22:	6834      	ldr	r4, [r6, #0]
 800df24:	4626      	mov	r6, r4
 800df26:	2e00      	cmp	r6, #0
 800df28:	d140      	bne.n	800dfac <_malloc_r+0xcc>
 800df2a:	6823      	ldr	r3, [r4, #0]
 800df2c:	4631      	mov	r1, r6
 800df2e:	4638      	mov	r0, r7
 800df30:	eb04 0803 	add.w	r8, r4, r3
 800df34:	f000 f878 	bl	800e028 <_sbrk_r>
 800df38:	4580      	cmp	r8, r0
 800df3a:	d13a      	bne.n	800dfb2 <_malloc_r+0xd2>
 800df3c:	6821      	ldr	r1, [r4, #0]
 800df3e:	3503      	adds	r5, #3
 800df40:	1a6d      	subs	r5, r5, r1
 800df42:	f025 0503 	bic.w	r5, r5, #3
 800df46:	3508      	adds	r5, #8
 800df48:	2d0c      	cmp	r5, #12
 800df4a:	bf38      	it	cc
 800df4c:	250c      	movcc	r5, #12
 800df4e:	4629      	mov	r1, r5
 800df50:	4638      	mov	r0, r7
 800df52:	f7ff ffa5 	bl	800dea0 <sbrk_aligned>
 800df56:	3001      	adds	r0, #1
 800df58:	d02b      	beq.n	800dfb2 <_malloc_r+0xd2>
 800df5a:	6823      	ldr	r3, [r4, #0]
 800df5c:	442b      	add	r3, r5
 800df5e:	6023      	str	r3, [r4, #0]
 800df60:	e00e      	b.n	800df80 <_malloc_r+0xa0>
 800df62:	6822      	ldr	r2, [r4, #0]
 800df64:	1b52      	subs	r2, r2, r5
 800df66:	d41e      	bmi.n	800dfa6 <_malloc_r+0xc6>
 800df68:	2a0b      	cmp	r2, #11
 800df6a:	d916      	bls.n	800df9a <_malloc_r+0xba>
 800df6c:	1961      	adds	r1, r4, r5
 800df6e:	42a3      	cmp	r3, r4
 800df70:	6025      	str	r5, [r4, #0]
 800df72:	bf18      	it	ne
 800df74:	6059      	strne	r1, [r3, #4]
 800df76:	6863      	ldr	r3, [r4, #4]
 800df78:	bf08      	it	eq
 800df7a:	6031      	streq	r1, [r6, #0]
 800df7c:	5162      	str	r2, [r4, r5]
 800df7e:	604b      	str	r3, [r1, #4]
 800df80:	4638      	mov	r0, r7
 800df82:	f104 060b 	add.w	r6, r4, #11
 800df86:	f000 f865 	bl	800e054 <__malloc_unlock>
 800df8a:	f026 0607 	bic.w	r6, r6, #7
 800df8e:	1d23      	adds	r3, r4, #4
 800df90:	1af2      	subs	r2, r6, r3
 800df92:	d0b6      	beq.n	800df02 <_malloc_r+0x22>
 800df94:	1b9b      	subs	r3, r3, r6
 800df96:	50a3      	str	r3, [r4, r2]
 800df98:	e7b3      	b.n	800df02 <_malloc_r+0x22>
 800df9a:	6862      	ldr	r2, [r4, #4]
 800df9c:	42a3      	cmp	r3, r4
 800df9e:	bf0c      	ite	eq
 800dfa0:	6032      	streq	r2, [r6, #0]
 800dfa2:	605a      	strne	r2, [r3, #4]
 800dfa4:	e7ec      	b.n	800df80 <_malloc_r+0xa0>
 800dfa6:	4623      	mov	r3, r4
 800dfa8:	6864      	ldr	r4, [r4, #4]
 800dfaa:	e7b2      	b.n	800df12 <_malloc_r+0x32>
 800dfac:	4634      	mov	r4, r6
 800dfae:	6876      	ldr	r6, [r6, #4]
 800dfb0:	e7b9      	b.n	800df26 <_malloc_r+0x46>
 800dfb2:	230c      	movs	r3, #12
 800dfb4:	603b      	str	r3, [r7, #0]
 800dfb6:	4638      	mov	r0, r7
 800dfb8:	f000 f84c 	bl	800e054 <__malloc_unlock>
 800dfbc:	e7a1      	b.n	800df02 <_malloc_r+0x22>
 800dfbe:	6025      	str	r5, [r4, #0]
 800dfc0:	e7de      	b.n	800df80 <_malloc_r+0xa0>
 800dfc2:	bf00      	nop
 800dfc4:	200170b0 	.word	0x200170b0

0800dfc8 <_realloc_r>:
 800dfc8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dfcc:	4680      	mov	r8, r0
 800dfce:	4614      	mov	r4, r2
 800dfd0:	460e      	mov	r6, r1
 800dfd2:	b921      	cbnz	r1, 800dfde <_realloc_r+0x16>
 800dfd4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800dfd8:	4611      	mov	r1, r2
 800dfda:	f7ff bf81 	b.w	800dee0 <_malloc_r>
 800dfde:	b92a      	cbnz	r2, 800dfec <_realloc_r+0x24>
 800dfe0:	f7ff ff12 	bl	800de08 <_free_r>
 800dfe4:	4625      	mov	r5, r4
 800dfe6:	4628      	mov	r0, r5
 800dfe8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dfec:	f000 f838 	bl	800e060 <_malloc_usable_size_r>
 800dff0:	4284      	cmp	r4, r0
 800dff2:	4607      	mov	r7, r0
 800dff4:	d802      	bhi.n	800dffc <_realloc_r+0x34>
 800dff6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800dffa:	d812      	bhi.n	800e022 <_realloc_r+0x5a>
 800dffc:	4621      	mov	r1, r4
 800dffe:	4640      	mov	r0, r8
 800e000:	f7ff ff6e 	bl	800dee0 <_malloc_r>
 800e004:	4605      	mov	r5, r0
 800e006:	2800      	cmp	r0, #0
 800e008:	d0ed      	beq.n	800dfe6 <_realloc_r+0x1e>
 800e00a:	42bc      	cmp	r4, r7
 800e00c:	4622      	mov	r2, r4
 800e00e:	4631      	mov	r1, r6
 800e010:	bf28      	it	cs
 800e012:	463a      	movcs	r2, r7
 800e014:	f7ff fed0 	bl	800ddb8 <memcpy>
 800e018:	4631      	mov	r1, r6
 800e01a:	4640      	mov	r0, r8
 800e01c:	f7ff fef4 	bl	800de08 <_free_r>
 800e020:	e7e1      	b.n	800dfe6 <_realloc_r+0x1e>
 800e022:	4635      	mov	r5, r6
 800e024:	e7df      	b.n	800dfe6 <_realloc_r+0x1e>
	...

0800e028 <_sbrk_r>:
 800e028:	b538      	push	{r3, r4, r5, lr}
 800e02a:	4d06      	ldr	r5, [pc, #24]	; (800e044 <_sbrk_r+0x1c>)
 800e02c:	2300      	movs	r3, #0
 800e02e:	4604      	mov	r4, r0
 800e030:	4608      	mov	r0, r1
 800e032:	602b      	str	r3, [r5, #0]
 800e034:	f7f3 fe1c 	bl	8001c70 <_sbrk>
 800e038:	1c43      	adds	r3, r0, #1
 800e03a:	d102      	bne.n	800e042 <_sbrk_r+0x1a>
 800e03c:	682b      	ldr	r3, [r5, #0]
 800e03e:	b103      	cbz	r3, 800e042 <_sbrk_r+0x1a>
 800e040:	6023      	str	r3, [r4, #0]
 800e042:	bd38      	pop	{r3, r4, r5, pc}
 800e044:	200170b8 	.word	0x200170b8

0800e048 <__malloc_lock>:
 800e048:	4801      	ldr	r0, [pc, #4]	; (800e050 <__malloc_lock+0x8>)
 800e04a:	f000 b811 	b.w	800e070 <__retarget_lock_acquire_recursive>
 800e04e:	bf00      	nop
 800e050:	200170bc 	.word	0x200170bc

0800e054 <__malloc_unlock>:
 800e054:	4801      	ldr	r0, [pc, #4]	; (800e05c <__malloc_unlock+0x8>)
 800e056:	f000 b80c 	b.w	800e072 <__retarget_lock_release_recursive>
 800e05a:	bf00      	nop
 800e05c:	200170bc 	.word	0x200170bc

0800e060 <_malloc_usable_size_r>:
 800e060:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e064:	1f18      	subs	r0, r3, #4
 800e066:	2b00      	cmp	r3, #0
 800e068:	bfbc      	itt	lt
 800e06a:	580b      	ldrlt	r3, [r1, r0]
 800e06c:	18c0      	addlt	r0, r0, r3
 800e06e:	4770      	bx	lr

0800e070 <__retarget_lock_acquire_recursive>:
 800e070:	4770      	bx	lr

0800e072 <__retarget_lock_release_recursive>:
 800e072:	4770      	bx	lr

0800e074 <_init>:
 800e074:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e076:	bf00      	nop
 800e078:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e07a:	bc08      	pop	{r3}
 800e07c:	469e      	mov	lr, r3
 800e07e:	4770      	bx	lr

0800e080 <_fini>:
 800e080:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e082:	bf00      	nop
 800e084:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e086:	bc08      	pop	{r3}
 800e088:	469e      	mov	lr, r3
 800e08a:	4770      	bx	lr
