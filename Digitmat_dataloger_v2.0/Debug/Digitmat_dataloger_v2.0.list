
Digitmat_dataloger_v2.0.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000df78  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000588  0800e118  0800e118  0001e118  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e6a0  0800e6a0  0002015c  2**0
                  CONTENTS
  4 .ARM          00000008  0800e6a0  0800e6a0  0001e6a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800e6a8  0800e6a8  0002015c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800e6a8  0800e6a8  0001e6a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800e6ac  0800e6ac  0001e6ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000015c  20000000  0800e6b0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00016f70  2000015c  0800e80c  0002015c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200170cc  0800e80c  000270cc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002015c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00035c34  00000000  00000000  0002018c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004197  00000000  00000000  00055dc0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002ad8  00000000  00000000  00059f58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00002950  00000000  00000000  0005ca30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001b623  00000000  00000000  0005f380  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00028ff3  00000000  00000000  0007a9a3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a2a4e  00000000  00000000  000a3996  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001463e4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000bda4  00000000  00000000  00146434  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000015c 	.word	0x2000015c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800e100 	.word	0x0800e100

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000160 	.word	0x20000160
 80001dc:	0800e100 	.word	0x0800e100

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b974 	b.w	8000590 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	4604      	mov	r4, r0
 80002c8:	468e      	mov	lr, r1
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	d14d      	bne.n	800036a <__udivmoddi4+0xaa>
 80002ce:	428a      	cmp	r2, r1
 80002d0:	4694      	mov	ip, r2
 80002d2:	d969      	bls.n	80003a8 <__udivmoddi4+0xe8>
 80002d4:	fab2 f282 	clz	r2, r2
 80002d8:	b152      	cbz	r2, 80002f0 <__udivmoddi4+0x30>
 80002da:	fa01 f302 	lsl.w	r3, r1, r2
 80002de:	f1c2 0120 	rsb	r1, r2, #32
 80002e2:	fa20 f101 	lsr.w	r1, r0, r1
 80002e6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002ea:	ea41 0e03 	orr.w	lr, r1, r3
 80002ee:	4094      	lsls	r4, r2
 80002f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002f4:	0c21      	lsrs	r1, r4, #16
 80002f6:	fbbe f6f8 	udiv	r6, lr, r8
 80002fa:	fa1f f78c 	uxth.w	r7, ip
 80002fe:	fb08 e316 	mls	r3, r8, r6, lr
 8000302:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000306:	fb06 f107 	mul.w	r1, r6, r7
 800030a:	4299      	cmp	r1, r3
 800030c:	d90a      	bls.n	8000324 <__udivmoddi4+0x64>
 800030e:	eb1c 0303 	adds.w	r3, ip, r3
 8000312:	f106 30ff 	add.w	r0, r6, #4294967295
 8000316:	f080 811f 	bcs.w	8000558 <__udivmoddi4+0x298>
 800031a:	4299      	cmp	r1, r3
 800031c:	f240 811c 	bls.w	8000558 <__udivmoddi4+0x298>
 8000320:	3e02      	subs	r6, #2
 8000322:	4463      	add	r3, ip
 8000324:	1a5b      	subs	r3, r3, r1
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb3 f0f8 	udiv	r0, r3, r8
 800032c:	fb08 3310 	mls	r3, r8, r0, r3
 8000330:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000334:	fb00 f707 	mul.w	r7, r0, r7
 8000338:	42a7      	cmp	r7, r4
 800033a:	d90a      	bls.n	8000352 <__udivmoddi4+0x92>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 33ff 	add.w	r3, r0, #4294967295
 8000344:	f080 810a 	bcs.w	800055c <__udivmoddi4+0x29c>
 8000348:	42a7      	cmp	r7, r4
 800034a:	f240 8107 	bls.w	800055c <__udivmoddi4+0x29c>
 800034e:	4464      	add	r4, ip
 8000350:	3802      	subs	r0, #2
 8000352:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000356:	1be4      	subs	r4, r4, r7
 8000358:	2600      	movs	r6, #0
 800035a:	b11d      	cbz	r5, 8000364 <__udivmoddi4+0xa4>
 800035c:	40d4      	lsrs	r4, r2
 800035e:	2300      	movs	r3, #0
 8000360:	e9c5 4300 	strd	r4, r3, [r5]
 8000364:	4631      	mov	r1, r6
 8000366:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036a:	428b      	cmp	r3, r1
 800036c:	d909      	bls.n	8000382 <__udivmoddi4+0xc2>
 800036e:	2d00      	cmp	r5, #0
 8000370:	f000 80ef 	beq.w	8000552 <__udivmoddi4+0x292>
 8000374:	2600      	movs	r6, #0
 8000376:	e9c5 0100 	strd	r0, r1, [r5]
 800037a:	4630      	mov	r0, r6
 800037c:	4631      	mov	r1, r6
 800037e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000382:	fab3 f683 	clz	r6, r3
 8000386:	2e00      	cmp	r6, #0
 8000388:	d14a      	bne.n	8000420 <__udivmoddi4+0x160>
 800038a:	428b      	cmp	r3, r1
 800038c:	d302      	bcc.n	8000394 <__udivmoddi4+0xd4>
 800038e:	4282      	cmp	r2, r0
 8000390:	f200 80f9 	bhi.w	8000586 <__udivmoddi4+0x2c6>
 8000394:	1a84      	subs	r4, r0, r2
 8000396:	eb61 0303 	sbc.w	r3, r1, r3
 800039a:	2001      	movs	r0, #1
 800039c:	469e      	mov	lr, r3
 800039e:	2d00      	cmp	r5, #0
 80003a0:	d0e0      	beq.n	8000364 <__udivmoddi4+0xa4>
 80003a2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003a6:	e7dd      	b.n	8000364 <__udivmoddi4+0xa4>
 80003a8:	b902      	cbnz	r2, 80003ac <__udivmoddi4+0xec>
 80003aa:	deff      	udf	#255	; 0xff
 80003ac:	fab2 f282 	clz	r2, r2
 80003b0:	2a00      	cmp	r2, #0
 80003b2:	f040 8092 	bne.w	80004da <__udivmoddi4+0x21a>
 80003b6:	eba1 010c 	sub.w	r1, r1, ip
 80003ba:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003be:	fa1f fe8c 	uxth.w	lr, ip
 80003c2:	2601      	movs	r6, #1
 80003c4:	0c20      	lsrs	r0, r4, #16
 80003c6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ca:	fb07 1113 	mls	r1, r7, r3, r1
 80003ce:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003d2:	fb0e f003 	mul.w	r0, lr, r3
 80003d6:	4288      	cmp	r0, r1
 80003d8:	d908      	bls.n	80003ec <__udivmoddi4+0x12c>
 80003da:	eb1c 0101 	adds.w	r1, ip, r1
 80003de:	f103 38ff 	add.w	r8, r3, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x12a>
 80003e4:	4288      	cmp	r0, r1
 80003e6:	f200 80cb 	bhi.w	8000580 <__udivmoddi4+0x2c0>
 80003ea:	4643      	mov	r3, r8
 80003ec:	1a09      	subs	r1, r1, r0
 80003ee:	b2a4      	uxth	r4, r4
 80003f0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003f4:	fb07 1110 	mls	r1, r7, r0, r1
 80003f8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003fc:	fb0e fe00 	mul.w	lr, lr, r0
 8000400:	45a6      	cmp	lr, r4
 8000402:	d908      	bls.n	8000416 <__udivmoddi4+0x156>
 8000404:	eb1c 0404 	adds.w	r4, ip, r4
 8000408:	f100 31ff 	add.w	r1, r0, #4294967295
 800040c:	d202      	bcs.n	8000414 <__udivmoddi4+0x154>
 800040e:	45a6      	cmp	lr, r4
 8000410:	f200 80bb 	bhi.w	800058a <__udivmoddi4+0x2ca>
 8000414:	4608      	mov	r0, r1
 8000416:	eba4 040e 	sub.w	r4, r4, lr
 800041a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800041e:	e79c      	b.n	800035a <__udivmoddi4+0x9a>
 8000420:	f1c6 0720 	rsb	r7, r6, #32
 8000424:	40b3      	lsls	r3, r6
 8000426:	fa22 fc07 	lsr.w	ip, r2, r7
 800042a:	ea4c 0c03 	orr.w	ip, ip, r3
 800042e:	fa20 f407 	lsr.w	r4, r0, r7
 8000432:	fa01 f306 	lsl.w	r3, r1, r6
 8000436:	431c      	orrs	r4, r3
 8000438:	40f9      	lsrs	r1, r7
 800043a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800043e:	fa00 f306 	lsl.w	r3, r0, r6
 8000442:	fbb1 f8f9 	udiv	r8, r1, r9
 8000446:	0c20      	lsrs	r0, r4, #16
 8000448:	fa1f fe8c 	uxth.w	lr, ip
 800044c:	fb09 1118 	mls	r1, r9, r8, r1
 8000450:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000454:	fb08 f00e 	mul.w	r0, r8, lr
 8000458:	4288      	cmp	r0, r1
 800045a:	fa02 f206 	lsl.w	r2, r2, r6
 800045e:	d90b      	bls.n	8000478 <__udivmoddi4+0x1b8>
 8000460:	eb1c 0101 	adds.w	r1, ip, r1
 8000464:	f108 3aff 	add.w	sl, r8, #4294967295
 8000468:	f080 8088 	bcs.w	800057c <__udivmoddi4+0x2bc>
 800046c:	4288      	cmp	r0, r1
 800046e:	f240 8085 	bls.w	800057c <__udivmoddi4+0x2bc>
 8000472:	f1a8 0802 	sub.w	r8, r8, #2
 8000476:	4461      	add	r1, ip
 8000478:	1a09      	subs	r1, r1, r0
 800047a:	b2a4      	uxth	r4, r4
 800047c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000480:	fb09 1110 	mls	r1, r9, r0, r1
 8000484:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000488:	fb00 fe0e 	mul.w	lr, r0, lr
 800048c:	458e      	cmp	lr, r1
 800048e:	d908      	bls.n	80004a2 <__udivmoddi4+0x1e2>
 8000490:	eb1c 0101 	adds.w	r1, ip, r1
 8000494:	f100 34ff 	add.w	r4, r0, #4294967295
 8000498:	d26c      	bcs.n	8000574 <__udivmoddi4+0x2b4>
 800049a:	458e      	cmp	lr, r1
 800049c:	d96a      	bls.n	8000574 <__udivmoddi4+0x2b4>
 800049e:	3802      	subs	r0, #2
 80004a0:	4461      	add	r1, ip
 80004a2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004a6:	fba0 9402 	umull	r9, r4, r0, r2
 80004aa:	eba1 010e 	sub.w	r1, r1, lr
 80004ae:	42a1      	cmp	r1, r4
 80004b0:	46c8      	mov	r8, r9
 80004b2:	46a6      	mov	lr, r4
 80004b4:	d356      	bcc.n	8000564 <__udivmoddi4+0x2a4>
 80004b6:	d053      	beq.n	8000560 <__udivmoddi4+0x2a0>
 80004b8:	b15d      	cbz	r5, 80004d2 <__udivmoddi4+0x212>
 80004ba:	ebb3 0208 	subs.w	r2, r3, r8
 80004be:	eb61 010e 	sbc.w	r1, r1, lr
 80004c2:	fa01 f707 	lsl.w	r7, r1, r7
 80004c6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ca:	40f1      	lsrs	r1, r6
 80004cc:	431f      	orrs	r7, r3
 80004ce:	e9c5 7100 	strd	r7, r1, [r5]
 80004d2:	2600      	movs	r6, #0
 80004d4:	4631      	mov	r1, r6
 80004d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004da:	f1c2 0320 	rsb	r3, r2, #32
 80004de:	40d8      	lsrs	r0, r3
 80004e0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004e4:	fa21 f303 	lsr.w	r3, r1, r3
 80004e8:	4091      	lsls	r1, r2
 80004ea:	4301      	orrs	r1, r0
 80004ec:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004f0:	fa1f fe8c 	uxth.w	lr, ip
 80004f4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004f8:	fb07 3610 	mls	r6, r7, r0, r3
 80004fc:	0c0b      	lsrs	r3, r1, #16
 80004fe:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000502:	fb00 f60e 	mul.w	r6, r0, lr
 8000506:	429e      	cmp	r6, r3
 8000508:	fa04 f402 	lsl.w	r4, r4, r2
 800050c:	d908      	bls.n	8000520 <__udivmoddi4+0x260>
 800050e:	eb1c 0303 	adds.w	r3, ip, r3
 8000512:	f100 38ff 	add.w	r8, r0, #4294967295
 8000516:	d22f      	bcs.n	8000578 <__udivmoddi4+0x2b8>
 8000518:	429e      	cmp	r6, r3
 800051a:	d92d      	bls.n	8000578 <__udivmoddi4+0x2b8>
 800051c:	3802      	subs	r0, #2
 800051e:	4463      	add	r3, ip
 8000520:	1b9b      	subs	r3, r3, r6
 8000522:	b289      	uxth	r1, r1
 8000524:	fbb3 f6f7 	udiv	r6, r3, r7
 8000528:	fb07 3316 	mls	r3, r7, r6, r3
 800052c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000530:	fb06 f30e 	mul.w	r3, r6, lr
 8000534:	428b      	cmp	r3, r1
 8000536:	d908      	bls.n	800054a <__udivmoddi4+0x28a>
 8000538:	eb1c 0101 	adds.w	r1, ip, r1
 800053c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000540:	d216      	bcs.n	8000570 <__udivmoddi4+0x2b0>
 8000542:	428b      	cmp	r3, r1
 8000544:	d914      	bls.n	8000570 <__udivmoddi4+0x2b0>
 8000546:	3e02      	subs	r6, #2
 8000548:	4461      	add	r1, ip
 800054a:	1ac9      	subs	r1, r1, r3
 800054c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000550:	e738      	b.n	80003c4 <__udivmoddi4+0x104>
 8000552:	462e      	mov	r6, r5
 8000554:	4628      	mov	r0, r5
 8000556:	e705      	b.n	8000364 <__udivmoddi4+0xa4>
 8000558:	4606      	mov	r6, r0
 800055a:	e6e3      	b.n	8000324 <__udivmoddi4+0x64>
 800055c:	4618      	mov	r0, r3
 800055e:	e6f8      	b.n	8000352 <__udivmoddi4+0x92>
 8000560:	454b      	cmp	r3, r9
 8000562:	d2a9      	bcs.n	80004b8 <__udivmoddi4+0x1f8>
 8000564:	ebb9 0802 	subs.w	r8, r9, r2
 8000568:	eb64 0e0c 	sbc.w	lr, r4, ip
 800056c:	3801      	subs	r0, #1
 800056e:	e7a3      	b.n	80004b8 <__udivmoddi4+0x1f8>
 8000570:	4646      	mov	r6, r8
 8000572:	e7ea      	b.n	800054a <__udivmoddi4+0x28a>
 8000574:	4620      	mov	r0, r4
 8000576:	e794      	b.n	80004a2 <__udivmoddi4+0x1e2>
 8000578:	4640      	mov	r0, r8
 800057a:	e7d1      	b.n	8000520 <__udivmoddi4+0x260>
 800057c:	46d0      	mov	r8, sl
 800057e:	e77b      	b.n	8000478 <__udivmoddi4+0x1b8>
 8000580:	3b02      	subs	r3, #2
 8000582:	4461      	add	r1, ip
 8000584:	e732      	b.n	80003ec <__udivmoddi4+0x12c>
 8000586:	4630      	mov	r0, r6
 8000588:	e709      	b.n	800039e <__udivmoddi4+0xde>
 800058a:	4464      	add	r4, ip
 800058c:	3802      	subs	r0, #2
 800058e:	e742      	b.n	8000416 <__udivmoddi4+0x156>

08000590 <__aeabi_idiv0>:
 8000590:	4770      	bx	lr
 8000592:	bf00      	nop

08000594 <SELECT>:
 * SPI functions
 **************************************/

/* slave select */
static void SELECT(void)
{
 8000594:	b580      	push	{r7, lr}
 8000596:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_RESET);
 8000598:	2200      	movs	r2, #0
 800059a:	2110      	movs	r1, #16
 800059c:	4803      	ldr	r0, [pc, #12]	; (80005ac <SELECT+0x18>)
 800059e:	f006 ff9d 	bl	80074dc <HAL_GPIO_WritePin>
	HAL_Delay(1);
 80005a2:	2001      	movs	r0, #1
 80005a4:	f006 fbfc 	bl	8006da0 <HAL_Delay>
}
 80005a8:	bf00      	nop
 80005aa:	bd80      	pop	{r7, pc}
 80005ac:	40020000 	.word	0x40020000

080005b0 <DESELECT>:

/* slave deselect */
static void DESELECT(void)
{
 80005b0:	b580      	push	{r7, lr}
 80005b2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_SET);
 80005b4:	2201      	movs	r2, #1
 80005b6:	2110      	movs	r1, #16
 80005b8:	4803      	ldr	r0, [pc, #12]	; (80005c8 <DESELECT+0x18>)
 80005ba:	f006 ff8f 	bl	80074dc <HAL_GPIO_WritePin>
	HAL_Delay(1);
 80005be:	2001      	movs	r0, #1
 80005c0:	f006 fbee 	bl	8006da0 <HAL_Delay>
}
 80005c4:	bf00      	nop
 80005c6:	bd80      	pop	{r7, pc}
 80005c8:	40020000 	.word	0x40020000

080005cc <SPI_TxByte>:

/* SPI transmit a byte */
static void SPI_TxByte(uint8_t data)
{
 80005cc:	b580      	push	{r7, lr}
 80005ce:	b082      	sub	sp, #8
 80005d0:	af00      	add	r7, sp, #0
 80005d2:	4603      	mov	r3, r0
 80005d4:	71fb      	strb	r3, [r7, #7]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 80005d6:	bf00      	nop
 80005d8:	4b08      	ldr	r3, [pc, #32]	; (80005fc <SPI_TxByte+0x30>)
 80005da:	681b      	ldr	r3, [r3, #0]
 80005dc:	689b      	ldr	r3, [r3, #8]
 80005de:	f003 0302 	and.w	r3, r3, #2
 80005e2:	2b02      	cmp	r3, #2
 80005e4:	d1f8      	bne.n	80005d8 <SPI_TxByte+0xc>
	HAL_SPI_Transmit(HSPI_SDCARD, &data, 1, SPI_TIMEOUT);
 80005e6:	1df9      	adds	r1, r7, #7
 80005e8:	2364      	movs	r3, #100	; 0x64
 80005ea:	2201      	movs	r2, #1
 80005ec:	4803      	ldr	r0, [pc, #12]	; (80005fc <SPI_TxByte+0x30>)
 80005ee:	f008 fd44 	bl	800907a <HAL_SPI_Transmit>
}
 80005f2:	bf00      	nop
 80005f4:	3708      	adds	r7, #8
 80005f6:	46bd      	mov	sp, r7
 80005f8:	bd80      	pop	{r7, pc}
 80005fa:	bf00      	nop
 80005fc:	20000188 	.word	0x20000188

08000600 <SPI_TxBuffer>:

/* SPI transmit buffer */
static void SPI_TxBuffer(uint8_t *buffer, uint16_t len)
{
 8000600:	b580      	push	{r7, lr}
 8000602:	b082      	sub	sp, #8
 8000604:	af00      	add	r7, sp, #0
 8000606:	6078      	str	r0, [r7, #4]
 8000608:	460b      	mov	r3, r1
 800060a:	807b      	strh	r3, [r7, #2]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 800060c:	bf00      	nop
 800060e:	4b08      	ldr	r3, [pc, #32]	; (8000630 <SPI_TxBuffer+0x30>)
 8000610:	681b      	ldr	r3, [r3, #0]
 8000612:	689b      	ldr	r3, [r3, #8]
 8000614:	f003 0302 	and.w	r3, r3, #2
 8000618:	2b02      	cmp	r3, #2
 800061a:	d1f8      	bne.n	800060e <SPI_TxBuffer+0xe>
	HAL_SPI_Transmit(HSPI_SDCARD, buffer, len, SPI_TIMEOUT);
 800061c:	887a      	ldrh	r2, [r7, #2]
 800061e:	2364      	movs	r3, #100	; 0x64
 8000620:	6879      	ldr	r1, [r7, #4]
 8000622:	4803      	ldr	r0, [pc, #12]	; (8000630 <SPI_TxBuffer+0x30>)
 8000624:	f008 fd29 	bl	800907a <HAL_SPI_Transmit>
}
 8000628:	bf00      	nop
 800062a:	3708      	adds	r7, #8
 800062c:	46bd      	mov	sp, r7
 800062e:	bd80      	pop	{r7, pc}
 8000630:	20000188 	.word	0x20000188

08000634 <SPI_RxByte>:

/* SPI receive a byte */
static uint8_t SPI_RxByte(void)
{
 8000634:	b580      	push	{r7, lr}
 8000636:	b084      	sub	sp, #16
 8000638:	af02      	add	r7, sp, #8
	uint8_t dummy, data;
	dummy = 0xFF;
 800063a:	23ff      	movs	r3, #255	; 0xff
 800063c:	71fb      	strb	r3, [r7, #7]

	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 800063e:	bf00      	nop
 8000640:	4b09      	ldr	r3, [pc, #36]	; (8000668 <SPI_RxByte+0x34>)
 8000642:	681b      	ldr	r3, [r3, #0]
 8000644:	689b      	ldr	r3, [r3, #8]
 8000646:	f003 0302 	and.w	r3, r3, #2
 800064a:	2b02      	cmp	r3, #2
 800064c:	d1f8      	bne.n	8000640 <SPI_RxByte+0xc>
	HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 800064e:	1dba      	adds	r2, r7, #6
 8000650:	1df9      	adds	r1, r7, #7
 8000652:	2364      	movs	r3, #100	; 0x64
 8000654:	9300      	str	r3, [sp, #0]
 8000656:	2301      	movs	r3, #1
 8000658:	4803      	ldr	r0, [pc, #12]	; (8000668 <SPI_RxByte+0x34>)
 800065a:	f008 fe4a 	bl	80092f2 <HAL_SPI_TransmitReceive>

	return data;
 800065e:	79bb      	ldrb	r3, [r7, #6]
}
 8000660:	4618      	mov	r0, r3
 8000662:	3708      	adds	r7, #8
 8000664:	46bd      	mov	sp, r7
 8000666:	bd80      	pop	{r7, pc}
 8000668:	20000188 	.word	0x20000188

0800066c <SPI_RxBytePtr>:

/* SPI receive a byte via pointer */
static void SPI_RxBytePtr(uint8_t *buff) 
{
 800066c:	b580      	push	{r7, lr}
 800066e:	b082      	sub	sp, #8
 8000670:	af00      	add	r7, sp, #0
 8000672:	6078      	str	r0, [r7, #4]
	*buff = SPI_RxByte();
 8000674:	f7ff ffde 	bl	8000634 <SPI_RxByte>
 8000678:	4603      	mov	r3, r0
 800067a:	461a      	mov	r2, r3
 800067c:	687b      	ldr	r3, [r7, #4]
 800067e:	701a      	strb	r2, [r3, #0]
}
 8000680:	bf00      	nop
 8000682:	3708      	adds	r7, #8
 8000684:	46bd      	mov	sp, r7
 8000686:	bd80      	pop	{r7, pc}

08000688 <SD_ReadyWait>:
 * SD functions
 **************************************/

/* wait SD ready */
static uint8_t SD_ReadyWait(void)
{
 8000688:	b580      	push	{r7, lr}
 800068a:	b082      	sub	sp, #8
 800068c:	af00      	add	r7, sp, #0
	uint8_t res;

	/* timeout 500ms */
	Timer2 = 500;
 800068e:	4b0a      	ldr	r3, [pc, #40]	; (80006b8 <SD_ReadyWait+0x30>)
 8000690:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8000694:	801a      	strh	r2, [r3, #0]

	/* if SD goes ready, receives 0xFF */
	do {
		res = SPI_RxByte();
 8000696:	f7ff ffcd 	bl	8000634 <SPI_RxByte>
 800069a:	4603      	mov	r3, r0
 800069c:	71fb      	strb	r3, [r7, #7]
	} while ((res != 0xFF) && Timer2);
 800069e:	79fb      	ldrb	r3, [r7, #7]
 80006a0:	2bff      	cmp	r3, #255	; 0xff
 80006a2:	d004      	beq.n	80006ae <SD_ReadyWait+0x26>
 80006a4:	4b04      	ldr	r3, [pc, #16]	; (80006b8 <SD_ReadyWait+0x30>)
 80006a6:	881b      	ldrh	r3, [r3, #0]
 80006a8:	b29b      	uxth	r3, r3
 80006aa:	2b00      	cmp	r3, #0
 80006ac:	d1f3      	bne.n	8000696 <SD_ReadyWait+0xe>

	return res;
 80006ae:	79fb      	ldrb	r3, [r7, #7]
}
 80006b0:	4618      	mov	r0, r3
 80006b2:	3708      	adds	r7, #8
 80006b4:	46bd      	mov	sp, r7
 80006b6:	bd80      	pop	{r7, pc}
 80006b8:	20016d2e 	.word	0x20016d2e

080006bc <SD_PowerOn>:

/* power on */
static void SD_PowerOn(void) 
{
 80006bc:	b580      	push	{r7, lr}
 80006be:	b084      	sub	sp, #16
 80006c0:	af00      	add	r7, sp, #0
	uint8_t args[6];
	uint32_t cnt = 0x1FFF;
 80006c2:	f641 73ff 	movw	r3, #8191	; 0x1fff
 80006c6:	60fb      	str	r3, [r7, #12]

	/* transmit bytes to wake up */
	DESELECT();
 80006c8:	f7ff ff72 	bl	80005b0 <DESELECT>
	for(int i = 0; i < 10; i++)
 80006cc:	2300      	movs	r3, #0
 80006ce:	60bb      	str	r3, [r7, #8]
 80006d0:	e005      	b.n	80006de <SD_PowerOn+0x22>
	{
		SPI_TxByte(0xFF);
 80006d2:	20ff      	movs	r0, #255	; 0xff
 80006d4:	f7ff ff7a 	bl	80005cc <SPI_TxByte>
	for(int i = 0; i < 10; i++)
 80006d8:	68bb      	ldr	r3, [r7, #8]
 80006da:	3301      	adds	r3, #1
 80006dc:	60bb      	str	r3, [r7, #8]
 80006de:	68bb      	ldr	r3, [r7, #8]
 80006e0:	2b09      	cmp	r3, #9
 80006e2:	ddf6      	ble.n	80006d2 <SD_PowerOn+0x16>
	}

	/* slave select */
	SELECT();
 80006e4:	f7ff ff56 	bl	8000594 <SELECT>

	/* make idle state */
	args[0] = CMD0;		/* CMD0:GO_IDLE_STATE */
 80006e8:	2340      	movs	r3, #64	; 0x40
 80006ea:	703b      	strb	r3, [r7, #0]
	args[1] = 0;
 80006ec:	2300      	movs	r3, #0
 80006ee:	707b      	strb	r3, [r7, #1]
	args[2] = 0;
 80006f0:	2300      	movs	r3, #0
 80006f2:	70bb      	strb	r3, [r7, #2]
	args[3] = 0;
 80006f4:	2300      	movs	r3, #0
 80006f6:	70fb      	strb	r3, [r7, #3]
	args[4] = 0;
 80006f8:	2300      	movs	r3, #0
 80006fa:	713b      	strb	r3, [r7, #4]
	args[5] = 0x95;		/* CRC */
 80006fc:	2395      	movs	r3, #149	; 0x95
 80006fe:	717b      	strb	r3, [r7, #5]

	SPI_TxBuffer(args, sizeof(args));
 8000700:	463b      	mov	r3, r7
 8000702:	2106      	movs	r1, #6
 8000704:	4618      	mov	r0, r3
 8000706:	f7ff ff7b 	bl	8000600 <SPI_TxBuffer>

	/* wait response */
	while ((SPI_RxByte() != 0x01) && cnt)
 800070a:	e002      	b.n	8000712 <SD_PowerOn+0x56>
	{
		cnt--;
 800070c:	68fb      	ldr	r3, [r7, #12]
 800070e:	3b01      	subs	r3, #1
 8000710:	60fb      	str	r3, [r7, #12]
	while ((SPI_RxByte() != 0x01) && cnt)
 8000712:	f7ff ff8f 	bl	8000634 <SPI_RxByte>
 8000716:	4603      	mov	r3, r0
 8000718:	2b01      	cmp	r3, #1
 800071a:	d002      	beq.n	8000722 <SD_PowerOn+0x66>
 800071c:	68fb      	ldr	r3, [r7, #12]
 800071e:	2b00      	cmp	r3, #0
 8000720:	d1f4      	bne.n	800070c <SD_PowerOn+0x50>
	}

	DESELECT();
 8000722:	f7ff ff45 	bl	80005b0 <DESELECT>
	SPI_TxByte(0XFF);
 8000726:	20ff      	movs	r0, #255	; 0xff
 8000728:	f7ff ff50 	bl	80005cc <SPI_TxByte>

	PowerFlag = 1;
 800072c:	4b03      	ldr	r3, [pc, #12]	; (800073c <SD_PowerOn+0x80>)
 800072e:	2201      	movs	r2, #1
 8000730:	701a      	strb	r2, [r3, #0]
}
 8000732:	bf00      	nop
 8000734:	3710      	adds	r7, #16
 8000736:	46bd      	mov	sp, r7
 8000738:	bd80      	pop	{r7, pc}
 800073a:	bf00      	nop
 800073c:	20000179 	.word	0x20000179

08000740 <SD_PowerOff>:

/* power off */
static void SD_PowerOff(void) 
{
 8000740:	b480      	push	{r7}
 8000742:	af00      	add	r7, sp, #0
	PowerFlag = 0;
 8000744:	4b03      	ldr	r3, [pc, #12]	; (8000754 <SD_PowerOff+0x14>)
 8000746:	2200      	movs	r2, #0
 8000748:	701a      	strb	r2, [r3, #0]
}
 800074a:	bf00      	nop
 800074c:	46bd      	mov	sp, r7
 800074e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000752:	4770      	bx	lr
 8000754:	20000179 	.word	0x20000179

08000758 <SD_CheckPower>:

/* check power flag */
static uint8_t SD_CheckPower(void) 
{
 8000758:	b480      	push	{r7}
 800075a:	af00      	add	r7, sp, #0
	return PowerFlag;
 800075c:	4b03      	ldr	r3, [pc, #12]	; (800076c <SD_CheckPower+0x14>)
 800075e:	781b      	ldrb	r3, [r3, #0]
}
 8000760:	4618      	mov	r0, r3
 8000762:	46bd      	mov	sp, r7
 8000764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000768:	4770      	bx	lr
 800076a:	bf00      	nop
 800076c:	20000179 	.word	0x20000179

08000770 <SD_RxDataBlock>:

/* receive data block */
static bool SD_RxDataBlock(BYTE *buff, UINT len)
{
 8000770:	b580      	push	{r7, lr}
 8000772:	b084      	sub	sp, #16
 8000774:	af00      	add	r7, sp, #0
 8000776:	6078      	str	r0, [r7, #4]
 8000778:	6039      	str	r1, [r7, #0]
	uint8_t token;

	/* timeout 200ms */
	Timer1 = 200;
 800077a:	4b14      	ldr	r3, [pc, #80]	; (80007cc <SD_RxDataBlock+0x5c>)
 800077c:	22c8      	movs	r2, #200	; 0xc8
 800077e:	801a      	strh	r2, [r3, #0]

	/* loop until receive a response or timeout */
	do {
		token = SPI_RxByte();
 8000780:	f7ff ff58 	bl	8000634 <SPI_RxByte>
 8000784:	4603      	mov	r3, r0
 8000786:	73fb      	strb	r3, [r7, #15]
	} while((token == 0xFF) && Timer1);
 8000788:	7bfb      	ldrb	r3, [r7, #15]
 800078a:	2bff      	cmp	r3, #255	; 0xff
 800078c:	d104      	bne.n	8000798 <SD_RxDataBlock+0x28>
 800078e:	4b0f      	ldr	r3, [pc, #60]	; (80007cc <SD_RxDataBlock+0x5c>)
 8000790:	881b      	ldrh	r3, [r3, #0]
 8000792:	b29b      	uxth	r3, r3
 8000794:	2b00      	cmp	r3, #0
 8000796:	d1f3      	bne.n	8000780 <SD_RxDataBlock+0x10>

	/* invalid response */
	if(token != 0xFE) return FALSE;
 8000798:	7bfb      	ldrb	r3, [r7, #15]
 800079a:	2bfe      	cmp	r3, #254	; 0xfe
 800079c:	d001      	beq.n	80007a2 <SD_RxDataBlock+0x32>
 800079e:	2300      	movs	r3, #0
 80007a0:	e00f      	b.n	80007c2 <SD_RxDataBlock+0x52>

	/* receive data */
	do {
		SPI_RxBytePtr(buff++);
 80007a2:	687b      	ldr	r3, [r7, #4]
 80007a4:	1c5a      	adds	r2, r3, #1
 80007a6:	607a      	str	r2, [r7, #4]
 80007a8:	4618      	mov	r0, r3
 80007aa:	f7ff ff5f 	bl	800066c <SPI_RxBytePtr>
	} while(len--);
 80007ae:	683b      	ldr	r3, [r7, #0]
 80007b0:	1e5a      	subs	r2, r3, #1
 80007b2:	603a      	str	r2, [r7, #0]
 80007b4:	2b00      	cmp	r3, #0
 80007b6:	d1f4      	bne.n	80007a2 <SD_RxDataBlock+0x32>

	/* discard CRC */
	SPI_RxByte();
 80007b8:	f7ff ff3c 	bl	8000634 <SPI_RxByte>
	SPI_RxByte();
 80007bc:	f7ff ff3a 	bl	8000634 <SPI_RxByte>

	return TRUE;
 80007c0:	2301      	movs	r3, #1
}
 80007c2:	4618      	mov	r0, r3
 80007c4:	3710      	adds	r7, #16
 80007c6:	46bd      	mov	sp, r7
 80007c8:	bd80      	pop	{r7, pc}
 80007ca:	bf00      	nop
 80007cc:	20016d2d 	.word	0x20016d2d

080007d0 <SD_TxDataBlock>:

/* transmit data block */
#if _USE_WRITE == 1
static bool SD_TxDataBlock(const uint8_t *buff, BYTE token)
{
 80007d0:	b580      	push	{r7, lr}
 80007d2:	b084      	sub	sp, #16
 80007d4:	af00      	add	r7, sp, #0
 80007d6:	6078      	str	r0, [r7, #4]
 80007d8:	460b      	mov	r3, r1
 80007da:	70fb      	strb	r3, [r7, #3]
	uint8_t resp;
	uint8_t i = 0;
 80007dc:	2300      	movs	r3, #0
 80007de:	73bb      	strb	r3, [r7, #14]

	/* wait SD ready */
	if (SD_ReadyWait() != 0xFF) return FALSE;
 80007e0:	f7ff ff52 	bl	8000688 <SD_ReadyWait>
 80007e4:	4603      	mov	r3, r0
 80007e6:	2bff      	cmp	r3, #255	; 0xff
 80007e8:	d001      	beq.n	80007ee <SD_TxDataBlock+0x1e>
 80007ea:	2300      	movs	r3, #0
 80007ec:	e02f      	b.n	800084e <SD_TxDataBlock+0x7e>

	/* transmit token */
	SPI_TxByte(token);
 80007ee:	78fb      	ldrb	r3, [r7, #3]
 80007f0:	4618      	mov	r0, r3
 80007f2:	f7ff feeb 	bl	80005cc <SPI_TxByte>

	/* if it's not STOP token, transmit data */
	if (token != 0xFD)
 80007f6:	78fb      	ldrb	r3, [r7, #3]
 80007f8:	2bfd      	cmp	r3, #253	; 0xfd
 80007fa:	d020      	beq.n	800083e <SD_TxDataBlock+0x6e>
	{
		SPI_TxBuffer((uint8_t*)buff, 512);
 80007fc:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000800:	6878      	ldr	r0, [r7, #4]
 8000802:	f7ff fefd 	bl	8000600 <SPI_TxBuffer>

		/* discard CRC */
		SPI_RxByte();
 8000806:	f7ff ff15 	bl	8000634 <SPI_RxByte>
		SPI_RxByte();
 800080a:	f7ff ff13 	bl	8000634 <SPI_RxByte>

		/* receive response */
		while (i <= 64)
 800080e:	e00b      	b.n	8000828 <SD_TxDataBlock+0x58>
		{
			resp = SPI_RxByte();
 8000810:	f7ff ff10 	bl	8000634 <SPI_RxByte>
 8000814:	4603      	mov	r3, r0
 8000816:	73fb      	strb	r3, [r7, #15]

			/* transmit 0x05 accepted */
			if ((resp & 0x1F) == 0x05) break;
 8000818:	7bfb      	ldrb	r3, [r7, #15]
 800081a:	f003 031f 	and.w	r3, r3, #31
 800081e:	2b05      	cmp	r3, #5
 8000820:	d006      	beq.n	8000830 <SD_TxDataBlock+0x60>
			i++;
 8000822:	7bbb      	ldrb	r3, [r7, #14]
 8000824:	3301      	adds	r3, #1
 8000826:	73bb      	strb	r3, [r7, #14]
		while (i <= 64)
 8000828:	7bbb      	ldrb	r3, [r7, #14]
 800082a:	2b40      	cmp	r3, #64	; 0x40
 800082c:	d9f0      	bls.n	8000810 <SD_TxDataBlock+0x40>
 800082e:	e000      	b.n	8000832 <SD_TxDataBlock+0x62>
			if ((resp & 0x1F) == 0x05) break;
 8000830:	bf00      	nop
		}

		/* recv buffer clear */
		while (SPI_RxByte() == 0);
 8000832:	bf00      	nop
 8000834:	f7ff fefe 	bl	8000634 <SPI_RxByte>
 8000838:	4603      	mov	r3, r0
 800083a:	2b00      	cmp	r3, #0
 800083c:	d0fa      	beq.n	8000834 <SD_TxDataBlock+0x64>
	}

	/* transmit 0x05 accepted */
	if ((resp & 0x1F) == 0x05) return TRUE;
 800083e:	7bfb      	ldrb	r3, [r7, #15]
 8000840:	f003 031f 	and.w	r3, r3, #31
 8000844:	2b05      	cmp	r3, #5
 8000846:	d101      	bne.n	800084c <SD_TxDataBlock+0x7c>
 8000848:	2301      	movs	r3, #1
 800084a:	e000      	b.n	800084e <SD_TxDataBlock+0x7e>

	return FALSE;
 800084c:	2300      	movs	r3, #0
}
 800084e:	4618      	mov	r0, r3
 8000850:	3710      	adds	r7, #16
 8000852:	46bd      	mov	sp, r7
 8000854:	bd80      	pop	{r7, pc}

08000856 <SD_SendCmd>:
#endif /* _USE_WRITE */

/* transmit command */
static BYTE SD_SendCmd(BYTE cmd, uint32_t arg)
{
 8000856:	b580      	push	{r7, lr}
 8000858:	b084      	sub	sp, #16
 800085a:	af00      	add	r7, sp, #0
 800085c:	4603      	mov	r3, r0
 800085e:	6039      	str	r1, [r7, #0]
 8000860:	71fb      	strb	r3, [r7, #7]
	uint8_t crc, res;

	/* wait SD ready */
	if (SD_ReadyWait() != 0xFF) return 0xFF;
 8000862:	f7ff ff11 	bl	8000688 <SD_ReadyWait>
 8000866:	4603      	mov	r3, r0
 8000868:	2bff      	cmp	r3, #255	; 0xff
 800086a:	d001      	beq.n	8000870 <SD_SendCmd+0x1a>
 800086c:	23ff      	movs	r3, #255	; 0xff
 800086e:	e042      	b.n	80008f6 <SD_SendCmd+0xa0>

	/* transmit command */
	SPI_TxByte(cmd); 					/* Command */
 8000870:	79fb      	ldrb	r3, [r7, #7]
 8000872:	4618      	mov	r0, r3
 8000874:	f7ff feaa 	bl	80005cc <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 24)); 	/* Argument[31..24] */
 8000878:	683b      	ldr	r3, [r7, #0]
 800087a:	0e1b      	lsrs	r3, r3, #24
 800087c:	b2db      	uxtb	r3, r3
 800087e:	4618      	mov	r0, r3
 8000880:	f7ff fea4 	bl	80005cc <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 16)); 	/* Argument[23..16] */
 8000884:	683b      	ldr	r3, [r7, #0]
 8000886:	0c1b      	lsrs	r3, r3, #16
 8000888:	b2db      	uxtb	r3, r3
 800088a:	4618      	mov	r0, r3
 800088c:	f7ff fe9e 	bl	80005cc <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 8)); 	/* Argument[15..8] */
 8000890:	683b      	ldr	r3, [r7, #0]
 8000892:	0a1b      	lsrs	r3, r3, #8
 8000894:	b2db      	uxtb	r3, r3
 8000896:	4618      	mov	r0, r3
 8000898:	f7ff fe98 	bl	80005cc <SPI_TxByte>
	SPI_TxByte((uint8_t)arg); 			/* Argument[7..0] */
 800089c:	683b      	ldr	r3, [r7, #0]
 800089e:	b2db      	uxtb	r3, r3
 80008a0:	4618      	mov	r0, r3
 80008a2:	f7ff fe93 	bl	80005cc <SPI_TxByte>

	/* prepare CRC */
	if(cmd == CMD0) crc = 0x95;	/* CRC for CMD0(0) */
 80008a6:	79fb      	ldrb	r3, [r7, #7]
 80008a8:	2b40      	cmp	r3, #64	; 0x40
 80008aa:	d102      	bne.n	80008b2 <SD_SendCmd+0x5c>
 80008ac:	2395      	movs	r3, #149	; 0x95
 80008ae:	73fb      	strb	r3, [r7, #15]
 80008b0:	e007      	b.n	80008c2 <SD_SendCmd+0x6c>
	else if(cmd == CMD8) crc = 0x87;	/* CRC for CMD8(0x1AA) */
 80008b2:	79fb      	ldrb	r3, [r7, #7]
 80008b4:	2b48      	cmp	r3, #72	; 0x48
 80008b6:	d102      	bne.n	80008be <SD_SendCmd+0x68>
 80008b8:	2387      	movs	r3, #135	; 0x87
 80008ba:	73fb      	strb	r3, [r7, #15]
 80008bc:	e001      	b.n	80008c2 <SD_SendCmd+0x6c>
	else crc = 1;
 80008be:	2301      	movs	r3, #1
 80008c0:	73fb      	strb	r3, [r7, #15]

	/* transmit CRC */
	SPI_TxByte(crc);
 80008c2:	7bfb      	ldrb	r3, [r7, #15]
 80008c4:	4618      	mov	r0, r3
 80008c6:	f7ff fe81 	bl	80005cc <SPI_TxByte>

	/* Skip a stuff byte when STOP_TRANSMISSION */
	if (cmd == CMD12) SPI_RxByte();
 80008ca:	79fb      	ldrb	r3, [r7, #7]
 80008cc:	2b4c      	cmp	r3, #76	; 0x4c
 80008ce:	d101      	bne.n	80008d4 <SD_SendCmd+0x7e>
 80008d0:	f7ff feb0 	bl	8000634 <SPI_RxByte>

	/* receive response */
	uint8_t n = 10;
 80008d4:	230a      	movs	r3, #10
 80008d6:	73bb      	strb	r3, [r7, #14]
	do {
		res = SPI_RxByte();
 80008d8:	f7ff feac 	bl	8000634 <SPI_RxByte>
 80008dc:	4603      	mov	r3, r0
 80008de:	737b      	strb	r3, [r7, #13]
	} while ((res & 0x80) && --n);
 80008e0:	f997 300d 	ldrsb.w	r3, [r7, #13]
 80008e4:	2b00      	cmp	r3, #0
 80008e6:	da05      	bge.n	80008f4 <SD_SendCmd+0x9e>
 80008e8:	7bbb      	ldrb	r3, [r7, #14]
 80008ea:	3b01      	subs	r3, #1
 80008ec:	73bb      	strb	r3, [r7, #14]
 80008ee:	7bbb      	ldrb	r3, [r7, #14]
 80008f0:	2b00      	cmp	r3, #0
 80008f2:	d1f1      	bne.n	80008d8 <SD_SendCmd+0x82>

	return res;
 80008f4:	7b7b      	ldrb	r3, [r7, #13]
}
 80008f6:	4618      	mov	r0, r3
 80008f8:	3710      	adds	r7, #16
 80008fa:	46bd      	mov	sp, r7
 80008fc:	bd80      	pop	{r7, pc}
	...

08000900 <SD_disk_initialize>:
 * user_diskio.c functions
 **************************************/

/* initialize SD */
DSTATUS SD_disk_initialize(BYTE drv) 
{
 8000900:	b590      	push	{r4, r7, lr}
 8000902:	b085      	sub	sp, #20
 8000904:	af00      	add	r7, sp, #0
 8000906:	4603      	mov	r3, r0
 8000908:	71fb      	strb	r3, [r7, #7]
	uint8_t n, type, ocr[4];

	/* single drive, drv should be 0 */
	if(drv) return STA_NOINIT;
 800090a:	79fb      	ldrb	r3, [r7, #7]
 800090c:	2b00      	cmp	r3, #0
 800090e:	d001      	beq.n	8000914 <SD_disk_initialize+0x14>
 8000910:	2301      	movs	r3, #1
 8000912:	e0d6      	b.n	8000ac2 <SD_disk_initialize+0x1c2>

	/* no disk */
	if(Stat & STA_NODISK) return Stat;
 8000914:	4b6d      	ldr	r3, [pc, #436]	; (8000acc <SD_disk_initialize+0x1cc>)
 8000916:	781b      	ldrb	r3, [r3, #0]
 8000918:	b2db      	uxtb	r3, r3
 800091a:	f003 0302 	and.w	r3, r3, #2
 800091e:	2b00      	cmp	r3, #0
 8000920:	d003      	beq.n	800092a <SD_disk_initialize+0x2a>
 8000922:	4b6a      	ldr	r3, [pc, #424]	; (8000acc <SD_disk_initialize+0x1cc>)
 8000924:	781b      	ldrb	r3, [r3, #0]
 8000926:	b2db      	uxtb	r3, r3
 8000928:	e0cb      	b.n	8000ac2 <SD_disk_initialize+0x1c2>

	/* power on */
	SD_PowerOn();
 800092a:	f7ff fec7 	bl	80006bc <SD_PowerOn>

	/* slave select */
	SELECT();
 800092e:	f7ff fe31 	bl	8000594 <SELECT>

	/* check disk type */
	type = 0;
 8000932:	2300      	movs	r3, #0
 8000934:	73bb      	strb	r3, [r7, #14]

	/* send GO_IDLE_STATE command */
	if (SD_SendCmd(CMD0, 0) == 1)
 8000936:	2100      	movs	r1, #0
 8000938:	2040      	movs	r0, #64	; 0x40
 800093a:	f7ff ff8c 	bl	8000856 <SD_SendCmd>
 800093e:	4603      	mov	r3, r0
 8000940:	2b01      	cmp	r3, #1
 8000942:	f040 80a6 	bne.w	8000a92 <SD_disk_initialize+0x192>
	{
		/* timeout 1 sec */
		Timer1 = 1000;
 8000946:	4b62      	ldr	r3, [pc, #392]	; (8000ad0 <SD_disk_initialize+0x1d0>)
 8000948:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800094c:	801a      	strh	r2, [r3, #0]

		/* SDC V2+ accept CMD8 command, http://elm-chan.org/docs/mmc/mmc_e.html */
		if (SD_SendCmd(CMD8, 0x1AA) == 1)
 800094e:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8000952:	2048      	movs	r0, #72	; 0x48
 8000954:	f7ff ff7f 	bl	8000856 <SD_SendCmd>
 8000958:	4603      	mov	r3, r0
 800095a:	2b01      	cmp	r3, #1
 800095c:	d158      	bne.n	8000a10 <SD_disk_initialize+0x110>
		{
			/* operation condition register */
			for (n = 0; n < 4; n++)
 800095e:	2300      	movs	r3, #0
 8000960:	73fb      	strb	r3, [r7, #15]
 8000962:	e00c      	b.n	800097e <SD_disk_initialize+0x7e>
			{
				ocr[n] = SPI_RxByte();
 8000964:	7bfc      	ldrb	r4, [r7, #15]
 8000966:	f7ff fe65 	bl	8000634 <SPI_RxByte>
 800096a:	4603      	mov	r3, r0
 800096c:	461a      	mov	r2, r3
 800096e:	f104 0310 	add.w	r3, r4, #16
 8000972:	443b      	add	r3, r7
 8000974:	f803 2c08 	strb.w	r2, [r3, #-8]
			for (n = 0; n < 4; n++)
 8000978:	7bfb      	ldrb	r3, [r7, #15]
 800097a:	3301      	adds	r3, #1
 800097c:	73fb      	strb	r3, [r7, #15]
 800097e:	7bfb      	ldrb	r3, [r7, #15]
 8000980:	2b03      	cmp	r3, #3
 8000982:	d9ef      	bls.n	8000964 <SD_disk_initialize+0x64>
			}

			/* voltage range 2.7-3.6V */
			if (ocr[2] == 0x01 && ocr[3] == 0xAA)
 8000984:	7abb      	ldrb	r3, [r7, #10]
 8000986:	2b01      	cmp	r3, #1
 8000988:	f040 8083 	bne.w	8000a92 <SD_disk_initialize+0x192>
 800098c:	7afb      	ldrb	r3, [r7, #11]
 800098e:	2baa      	cmp	r3, #170	; 0xaa
 8000990:	d17f      	bne.n	8000a92 <SD_disk_initialize+0x192>
			{
				/* ACMD41 with HCS bit */
				do {
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 8000992:	2100      	movs	r1, #0
 8000994:	2077      	movs	r0, #119	; 0x77
 8000996:	f7ff ff5e 	bl	8000856 <SD_SendCmd>
 800099a:	4603      	mov	r3, r0
 800099c:	2b01      	cmp	r3, #1
 800099e:	d807      	bhi.n	80009b0 <SD_disk_initialize+0xb0>
 80009a0:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 80009a4:	2069      	movs	r0, #105	; 0x69
 80009a6:	f7ff ff56 	bl	8000856 <SD_SendCmd>
 80009aa:	4603      	mov	r3, r0
 80009ac:	2b00      	cmp	r3, #0
 80009ae:	d005      	beq.n	80009bc <SD_disk_initialize+0xbc>
				} while (Timer1);
 80009b0:	4b47      	ldr	r3, [pc, #284]	; (8000ad0 <SD_disk_initialize+0x1d0>)
 80009b2:	881b      	ldrh	r3, [r3, #0]
 80009b4:	b29b      	uxth	r3, r3
 80009b6:	2b00      	cmp	r3, #0
 80009b8:	d1eb      	bne.n	8000992 <SD_disk_initialize+0x92>
 80009ba:	e000      	b.n	80009be <SD_disk_initialize+0xbe>
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 80009bc:	bf00      	nop

				/* READ_OCR */
				if (Timer1 && SD_SendCmd(CMD58, 0) == 0)
 80009be:	4b44      	ldr	r3, [pc, #272]	; (8000ad0 <SD_disk_initialize+0x1d0>)
 80009c0:	881b      	ldrh	r3, [r3, #0]
 80009c2:	b29b      	uxth	r3, r3
 80009c4:	2b00      	cmp	r3, #0
 80009c6:	d064      	beq.n	8000a92 <SD_disk_initialize+0x192>
 80009c8:	2100      	movs	r1, #0
 80009ca:	207a      	movs	r0, #122	; 0x7a
 80009cc:	f7ff ff43 	bl	8000856 <SD_SendCmd>
 80009d0:	4603      	mov	r3, r0
 80009d2:	2b00      	cmp	r3, #0
 80009d4:	d15d      	bne.n	8000a92 <SD_disk_initialize+0x192>
				{
					/* Check CCS bit */
					for (n = 0; n < 4; n++)
 80009d6:	2300      	movs	r3, #0
 80009d8:	73fb      	strb	r3, [r7, #15]
 80009da:	e00c      	b.n	80009f6 <SD_disk_initialize+0xf6>
					{
						ocr[n] = SPI_RxByte();
 80009dc:	7bfc      	ldrb	r4, [r7, #15]
 80009de:	f7ff fe29 	bl	8000634 <SPI_RxByte>
 80009e2:	4603      	mov	r3, r0
 80009e4:	461a      	mov	r2, r3
 80009e6:	f104 0310 	add.w	r3, r4, #16
 80009ea:	443b      	add	r3, r7
 80009ec:	f803 2c08 	strb.w	r2, [r3, #-8]
					for (n = 0; n < 4; n++)
 80009f0:	7bfb      	ldrb	r3, [r7, #15]
 80009f2:	3301      	adds	r3, #1
 80009f4:	73fb      	strb	r3, [r7, #15]
 80009f6:	7bfb      	ldrb	r3, [r7, #15]
 80009f8:	2b03      	cmp	r3, #3
 80009fa:	d9ef      	bls.n	80009dc <SD_disk_initialize+0xdc>
					}

					/* SDv2 (HC or SC) */
					type = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;
 80009fc:	7a3b      	ldrb	r3, [r7, #8]
 80009fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000a02:	2b00      	cmp	r3, #0
 8000a04:	d001      	beq.n	8000a0a <SD_disk_initialize+0x10a>
 8000a06:	230c      	movs	r3, #12
 8000a08:	e000      	b.n	8000a0c <SD_disk_initialize+0x10c>
 8000a0a:	2304      	movs	r3, #4
 8000a0c:	73bb      	strb	r3, [r7, #14]
 8000a0e:	e040      	b.n	8000a92 <SD_disk_initialize+0x192>
			}
		}
		else
		{
			/* SDC V1 or MMC */
			type = (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) <= 1) ? CT_SD1 : CT_MMC;
 8000a10:	2100      	movs	r1, #0
 8000a12:	2077      	movs	r0, #119	; 0x77
 8000a14:	f7ff ff1f 	bl	8000856 <SD_SendCmd>
 8000a18:	4603      	mov	r3, r0
 8000a1a:	2b01      	cmp	r3, #1
 8000a1c:	d808      	bhi.n	8000a30 <SD_disk_initialize+0x130>
 8000a1e:	2100      	movs	r1, #0
 8000a20:	2069      	movs	r0, #105	; 0x69
 8000a22:	f7ff ff18 	bl	8000856 <SD_SendCmd>
 8000a26:	4603      	mov	r3, r0
 8000a28:	2b01      	cmp	r3, #1
 8000a2a:	d801      	bhi.n	8000a30 <SD_disk_initialize+0x130>
 8000a2c:	2302      	movs	r3, #2
 8000a2e:	e000      	b.n	8000a32 <SD_disk_initialize+0x132>
 8000a30:	2301      	movs	r3, #1
 8000a32:	73bb      	strb	r3, [r7, #14]

			do
			{
				if (type == CT_SD1)
 8000a34:	7bbb      	ldrb	r3, [r7, #14]
 8000a36:	2b02      	cmp	r3, #2
 8000a38:	d10e      	bne.n	8000a58 <SD_disk_initialize+0x158>
				{
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) == 0) break; /* ACMD41 */
 8000a3a:	2100      	movs	r1, #0
 8000a3c:	2077      	movs	r0, #119	; 0x77
 8000a3e:	f7ff ff0a 	bl	8000856 <SD_SendCmd>
 8000a42:	4603      	mov	r3, r0
 8000a44:	2b01      	cmp	r3, #1
 8000a46:	d80e      	bhi.n	8000a66 <SD_disk_initialize+0x166>
 8000a48:	2100      	movs	r1, #0
 8000a4a:	2069      	movs	r0, #105	; 0x69
 8000a4c:	f7ff ff03 	bl	8000856 <SD_SendCmd>
 8000a50:	4603      	mov	r3, r0
 8000a52:	2b00      	cmp	r3, #0
 8000a54:	d107      	bne.n	8000a66 <SD_disk_initialize+0x166>
 8000a56:	e00d      	b.n	8000a74 <SD_disk_initialize+0x174>
				}
				else
				{
					if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 8000a58:	2100      	movs	r1, #0
 8000a5a:	2041      	movs	r0, #65	; 0x41
 8000a5c:	f7ff fefb 	bl	8000856 <SD_SendCmd>
 8000a60:	4603      	mov	r3, r0
 8000a62:	2b00      	cmp	r3, #0
 8000a64:	d005      	beq.n	8000a72 <SD_disk_initialize+0x172>
				}

			} while (Timer1);
 8000a66:	4b1a      	ldr	r3, [pc, #104]	; (8000ad0 <SD_disk_initialize+0x1d0>)
 8000a68:	881b      	ldrh	r3, [r3, #0]
 8000a6a:	b29b      	uxth	r3, r3
 8000a6c:	2b00      	cmp	r3, #0
 8000a6e:	d1e1      	bne.n	8000a34 <SD_disk_initialize+0x134>
 8000a70:	e000      	b.n	8000a74 <SD_disk_initialize+0x174>
					if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 8000a72:	bf00      	nop

			/* SET_BLOCKLEN */
			if (!Timer1 || SD_SendCmd(CMD16, 512) != 0) type = 0;
 8000a74:	4b16      	ldr	r3, [pc, #88]	; (8000ad0 <SD_disk_initialize+0x1d0>)
 8000a76:	881b      	ldrh	r3, [r3, #0]
 8000a78:	b29b      	uxth	r3, r3
 8000a7a:	2b00      	cmp	r3, #0
 8000a7c:	d007      	beq.n	8000a8e <SD_disk_initialize+0x18e>
 8000a7e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000a82:	2050      	movs	r0, #80	; 0x50
 8000a84:	f7ff fee7 	bl	8000856 <SD_SendCmd>
 8000a88:	4603      	mov	r3, r0
 8000a8a:	2b00      	cmp	r3, #0
 8000a8c:	d001      	beq.n	8000a92 <SD_disk_initialize+0x192>
 8000a8e:	2300      	movs	r3, #0
 8000a90:	73bb      	strb	r3, [r7, #14]
		}
	}

	CardType = type;
 8000a92:	4a10      	ldr	r2, [pc, #64]	; (8000ad4 <SD_disk_initialize+0x1d4>)
 8000a94:	7bbb      	ldrb	r3, [r7, #14]
 8000a96:	7013      	strb	r3, [r2, #0]

	/* Idle */
	DESELECT();
 8000a98:	f7ff fd8a 	bl	80005b0 <DESELECT>
	SPI_RxByte();
 8000a9c:	f7ff fdca 	bl	8000634 <SPI_RxByte>

	/* Clear STA_NOINIT */
	if (type)
 8000aa0:	7bbb      	ldrb	r3, [r7, #14]
 8000aa2:	2b00      	cmp	r3, #0
 8000aa4:	d008      	beq.n	8000ab8 <SD_disk_initialize+0x1b8>
	{
		Stat &= ~STA_NOINIT;
 8000aa6:	4b09      	ldr	r3, [pc, #36]	; (8000acc <SD_disk_initialize+0x1cc>)
 8000aa8:	781b      	ldrb	r3, [r3, #0]
 8000aaa:	b2db      	uxtb	r3, r3
 8000aac:	f023 0301 	bic.w	r3, r3, #1
 8000ab0:	b2da      	uxtb	r2, r3
 8000ab2:	4b06      	ldr	r3, [pc, #24]	; (8000acc <SD_disk_initialize+0x1cc>)
 8000ab4:	701a      	strb	r2, [r3, #0]
 8000ab6:	e001      	b.n	8000abc <SD_disk_initialize+0x1bc>
	}
	else
	{
		/* Initialization failed */
		SD_PowerOff();
 8000ab8:	f7ff fe42 	bl	8000740 <SD_PowerOff>
	}

	return Stat;
 8000abc:	4b03      	ldr	r3, [pc, #12]	; (8000acc <SD_disk_initialize+0x1cc>)
 8000abe:	781b      	ldrb	r3, [r3, #0]
 8000ac0:	b2db      	uxtb	r3, r3
}
 8000ac2:	4618      	mov	r0, r3
 8000ac4:	3714      	adds	r7, #20
 8000ac6:	46bd      	mov	sp, r7
 8000ac8:	bd90      	pop	{r4, r7, pc}
 8000aca:	bf00      	nop
 8000acc:	20000000 	.word	0x20000000
 8000ad0:	20016d2d 	.word	0x20016d2d
 8000ad4:	20000178 	.word	0x20000178

08000ad8 <SD_disk_status>:

/* return disk status */
DSTATUS SD_disk_status(BYTE drv) 
{
 8000ad8:	b480      	push	{r7}
 8000ada:	b083      	sub	sp, #12
 8000adc:	af00      	add	r7, sp, #0
 8000ade:	4603      	mov	r3, r0
 8000ae0:	71fb      	strb	r3, [r7, #7]
	if (drv) return STA_NOINIT;
 8000ae2:	79fb      	ldrb	r3, [r7, #7]
 8000ae4:	2b00      	cmp	r3, #0
 8000ae6:	d001      	beq.n	8000aec <SD_disk_status+0x14>
 8000ae8:	2301      	movs	r3, #1
 8000aea:	e002      	b.n	8000af2 <SD_disk_status+0x1a>
	return Stat;
 8000aec:	4b04      	ldr	r3, [pc, #16]	; (8000b00 <SD_disk_status+0x28>)
 8000aee:	781b      	ldrb	r3, [r3, #0]
 8000af0:	b2db      	uxtb	r3, r3
}
 8000af2:	4618      	mov	r0, r3
 8000af4:	370c      	adds	r7, #12
 8000af6:	46bd      	mov	sp, r7
 8000af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000afc:	4770      	bx	lr
 8000afe:	bf00      	nop
 8000b00:	20000000 	.word	0x20000000

08000b04 <SD_disk_read>:

/* read sector */
DRESULT SD_disk_read(BYTE pdrv, BYTE* buff, DWORD sector, UINT count) 
{
 8000b04:	b580      	push	{r7, lr}
 8000b06:	b084      	sub	sp, #16
 8000b08:	af00      	add	r7, sp, #0
 8000b0a:	60b9      	str	r1, [r7, #8]
 8000b0c:	607a      	str	r2, [r7, #4]
 8000b0e:	603b      	str	r3, [r7, #0]
 8000b10:	4603      	mov	r3, r0
 8000b12:	73fb      	strb	r3, [r7, #15]
	/* pdrv should be 0 */
	if (pdrv || !count) return RES_PARERR;
 8000b14:	7bfb      	ldrb	r3, [r7, #15]
 8000b16:	2b00      	cmp	r3, #0
 8000b18:	d102      	bne.n	8000b20 <SD_disk_read+0x1c>
 8000b1a:	683b      	ldr	r3, [r7, #0]
 8000b1c:	2b00      	cmp	r3, #0
 8000b1e:	d101      	bne.n	8000b24 <SD_disk_read+0x20>
 8000b20:	2304      	movs	r3, #4
 8000b22:	e051      	b.n	8000bc8 <SD_disk_read+0xc4>

	/* no disk */
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 8000b24:	4b2a      	ldr	r3, [pc, #168]	; (8000bd0 <SD_disk_read+0xcc>)
 8000b26:	781b      	ldrb	r3, [r3, #0]
 8000b28:	b2db      	uxtb	r3, r3
 8000b2a:	f003 0301 	and.w	r3, r3, #1
 8000b2e:	2b00      	cmp	r3, #0
 8000b30:	d001      	beq.n	8000b36 <SD_disk_read+0x32>
 8000b32:	2303      	movs	r3, #3
 8000b34:	e048      	b.n	8000bc8 <SD_disk_read+0xc4>

	/* convert to byte address */
	if (!(CardType & CT_SD2)) sector *= 512;
 8000b36:	4b27      	ldr	r3, [pc, #156]	; (8000bd4 <SD_disk_read+0xd0>)
 8000b38:	781b      	ldrb	r3, [r3, #0]
 8000b3a:	f003 0304 	and.w	r3, r3, #4
 8000b3e:	2b00      	cmp	r3, #0
 8000b40:	d102      	bne.n	8000b48 <SD_disk_read+0x44>
 8000b42:	687b      	ldr	r3, [r7, #4]
 8000b44:	025b      	lsls	r3, r3, #9
 8000b46:	607b      	str	r3, [r7, #4]

	SELECT();
 8000b48:	f7ff fd24 	bl	8000594 <SELECT>

	if (count == 1)
 8000b4c:	683b      	ldr	r3, [r7, #0]
 8000b4e:	2b01      	cmp	r3, #1
 8000b50:	d111      	bne.n	8000b76 <SD_disk_read+0x72>
	{
		/* READ_SINGLE_BLOCK */
		if ((SD_SendCmd(CMD17, sector) == 0) && SD_RxDataBlock(buff, 512)) count = 0;
 8000b52:	6879      	ldr	r1, [r7, #4]
 8000b54:	2051      	movs	r0, #81	; 0x51
 8000b56:	f7ff fe7e 	bl	8000856 <SD_SendCmd>
 8000b5a:	4603      	mov	r3, r0
 8000b5c:	2b00      	cmp	r3, #0
 8000b5e:	d129      	bne.n	8000bb4 <SD_disk_read+0xb0>
 8000b60:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000b64:	68b8      	ldr	r0, [r7, #8]
 8000b66:	f7ff fe03 	bl	8000770 <SD_RxDataBlock>
 8000b6a:	4603      	mov	r3, r0
 8000b6c:	2b00      	cmp	r3, #0
 8000b6e:	d021      	beq.n	8000bb4 <SD_disk_read+0xb0>
 8000b70:	2300      	movs	r3, #0
 8000b72:	603b      	str	r3, [r7, #0]
 8000b74:	e01e      	b.n	8000bb4 <SD_disk_read+0xb0>
	}
	else
	{
		/* READ_MULTIPLE_BLOCK */
		if (SD_SendCmd(CMD18, sector) == 0)
 8000b76:	6879      	ldr	r1, [r7, #4]
 8000b78:	2052      	movs	r0, #82	; 0x52
 8000b7a:	f7ff fe6c 	bl	8000856 <SD_SendCmd>
 8000b7e:	4603      	mov	r3, r0
 8000b80:	2b00      	cmp	r3, #0
 8000b82:	d117      	bne.n	8000bb4 <SD_disk_read+0xb0>
		{
			do {
				if (!SD_RxDataBlock(buff, 512)) break;
 8000b84:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000b88:	68b8      	ldr	r0, [r7, #8]
 8000b8a:	f7ff fdf1 	bl	8000770 <SD_RxDataBlock>
 8000b8e:	4603      	mov	r3, r0
 8000b90:	2b00      	cmp	r3, #0
 8000b92:	d00a      	beq.n	8000baa <SD_disk_read+0xa6>
				buff += 512;
 8000b94:	68bb      	ldr	r3, [r7, #8]
 8000b96:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8000b9a:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8000b9c:	683b      	ldr	r3, [r7, #0]
 8000b9e:	3b01      	subs	r3, #1
 8000ba0:	603b      	str	r3, [r7, #0]
 8000ba2:	683b      	ldr	r3, [r7, #0]
 8000ba4:	2b00      	cmp	r3, #0
 8000ba6:	d1ed      	bne.n	8000b84 <SD_disk_read+0x80>
 8000ba8:	e000      	b.n	8000bac <SD_disk_read+0xa8>
				if (!SD_RxDataBlock(buff, 512)) break;
 8000baa:	bf00      	nop

			/* STOP_TRANSMISSION */
			SD_SendCmd(CMD12, 0);
 8000bac:	2100      	movs	r1, #0
 8000bae:	204c      	movs	r0, #76	; 0x4c
 8000bb0:	f7ff fe51 	bl	8000856 <SD_SendCmd>
		}
	}

	/* Idle */
	DESELECT();
 8000bb4:	f7ff fcfc 	bl	80005b0 <DESELECT>
	SPI_RxByte();
 8000bb8:	f7ff fd3c 	bl	8000634 <SPI_RxByte>

	return count ? RES_ERROR : RES_OK;
 8000bbc:	683b      	ldr	r3, [r7, #0]
 8000bbe:	2b00      	cmp	r3, #0
 8000bc0:	bf14      	ite	ne
 8000bc2:	2301      	movne	r3, #1
 8000bc4:	2300      	moveq	r3, #0
 8000bc6:	b2db      	uxtb	r3, r3
}
 8000bc8:	4618      	mov	r0, r3
 8000bca:	3710      	adds	r7, #16
 8000bcc:	46bd      	mov	sp, r7
 8000bce:	bd80      	pop	{r7, pc}
 8000bd0:	20000000 	.word	0x20000000
 8000bd4:	20000178 	.word	0x20000178

08000bd8 <SD_disk_write>:

/* write sector */
#if _USE_WRITE == 1
DRESULT SD_disk_write(BYTE pdrv, const BYTE* buff, DWORD sector, UINT count) 
{
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	b084      	sub	sp, #16
 8000bdc:	af00      	add	r7, sp, #0
 8000bde:	60b9      	str	r1, [r7, #8]
 8000be0:	607a      	str	r2, [r7, #4]
 8000be2:	603b      	str	r3, [r7, #0]
 8000be4:	4603      	mov	r3, r0
 8000be6:	73fb      	strb	r3, [r7, #15]
	/* pdrv should be 0 */
	if (pdrv || !count) return RES_PARERR;
 8000be8:	7bfb      	ldrb	r3, [r7, #15]
 8000bea:	2b00      	cmp	r3, #0
 8000bec:	d102      	bne.n	8000bf4 <SD_disk_write+0x1c>
 8000bee:	683b      	ldr	r3, [r7, #0]
 8000bf0:	2b00      	cmp	r3, #0
 8000bf2:	d101      	bne.n	8000bf8 <SD_disk_write+0x20>
 8000bf4:	2304      	movs	r3, #4
 8000bf6:	e06b      	b.n	8000cd0 <SD_disk_write+0xf8>

	/* no disk */
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 8000bf8:	4b37      	ldr	r3, [pc, #220]	; (8000cd8 <SD_disk_write+0x100>)
 8000bfa:	781b      	ldrb	r3, [r3, #0]
 8000bfc:	b2db      	uxtb	r3, r3
 8000bfe:	f003 0301 	and.w	r3, r3, #1
 8000c02:	2b00      	cmp	r3, #0
 8000c04:	d001      	beq.n	8000c0a <SD_disk_write+0x32>
 8000c06:	2303      	movs	r3, #3
 8000c08:	e062      	b.n	8000cd0 <SD_disk_write+0xf8>

	/* write protection */
	if (Stat & STA_PROTECT) return RES_WRPRT;
 8000c0a:	4b33      	ldr	r3, [pc, #204]	; (8000cd8 <SD_disk_write+0x100>)
 8000c0c:	781b      	ldrb	r3, [r3, #0]
 8000c0e:	b2db      	uxtb	r3, r3
 8000c10:	f003 0304 	and.w	r3, r3, #4
 8000c14:	2b00      	cmp	r3, #0
 8000c16:	d001      	beq.n	8000c1c <SD_disk_write+0x44>
 8000c18:	2302      	movs	r3, #2
 8000c1a:	e059      	b.n	8000cd0 <SD_disk_write+0xf8>

	/* convert to byte address */
	if (!(CardType & CT_SD2)) sector *= 512;
 8000c1c:	4b2f      	ldr	r3, [pc, #188]	; (8000cdc <SD_disk_write+0x104>)
 8000c1e:	781b      	ldrb	r3, [r3, #0]
 8000c20:	f003 0304 	and.w	r3, r3, #4
 8000c24:	2b00      	cmp	r3, #0
 8000c26:	d102      	bne.n	8000c2e <SD_disk_write+0x56>
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	025b      	lsls	r3, r3, #9
 8000c2c:	607b      	str	r3, [r7, #4]

	SELECT();
 8000c2e:	f7ff fcb1 	bl	8000594 <SELECT>

	if (count == 1)
 8000c32:	683b      	ldr	r3, [r7, #0]
 8000c34:	2b01      	cmp	r3, #1
 8000c36:	d110      	bne.n	8000c5a <SD_disk_write+0x82>
	{
		/* WRITE_BLOCK */
		if ((SD_SendCmd(CMD24, sector) == 0) && SD_TxDataBlock(buff, 0xFE))
 8000c38:	6879      	ldr	r1, [r7, #4]
 8000c3a:	2058      	movs	r0, #88	; 0x58
 8000c3c:	f7ff fe0b 	bl	8000856 <SD_SendCmd>
 8000c40:	4603      	mov	r3, r0
 8000c42:	2b00      	cmp	r3, #0
 8000c44:	d13a      	bne.n	8000cbc <SD_disk_write+0xe4>
 8000c46:	21fe      	movs	r1, #254	; 0xfe
 8000c48:	68b8      	ldr	r0, [r7, #8]
 8000c4a:	f7ff fdc1 	bl	80007d0 <SD_TxDataBlock>
 8000c4e:	4603      	mov	r3, r0
 8000c50:	2b00      	cmp	r3, #0
 8000c52:	d033      	beq.n	8000cbc <SD_disk_write+0xe4>
			count = 0;
 8000c54:	2300      	movs	r3, #0
 8000c56:	603b      	str	r3, [r7, #0]
 8000c58:	e030      	b.n	8000cbc <SD_disk_write+0xe4>
	}
	else
	{
		/* WRITE_MULTIPLE_BLOCK */
		if (CardType & CT_SD1)
 8000c5a:	4b20      	ldr	r3, [pc, #128]	; (8000cdc <SD_disk_write+0x104>)
 8000c5c:	781b      	ldrb	r3, [r3, #0]
 8000c5e:	f003 0302 	and.w	r3, r3, #2
 8000c62:	2b00      	cmp	r3, #0
 8000c64:	d007      	beq.n	8000c76 <SD_disk_write+0x9e>
		{
			SD_SendCmd(CMD55, 0);
 8000c66:	2100      	movs	r1, #0
 8000c68:	2077      	movs	r0, #119	; 0x77
 8000c6a:	f7ff fdf4 	bl	8000856 <SD_SendCmd>
			SD_SendCmd(CMD23, count); /* ACMD23 */
 8000c6e:	6839      	ldr	r1, [r7, #0]
 8000c70:	2057      	movs	r0, #87	; 0x57
 8000c72:	f7ff fdf0 	bl	8000856 <SD_SendCmd>
		}

		if (SD_SendCmd(CMD25, sector) == 0)
 8000c76:	6879      	ldr	r1, [r7, #4]
 8000c78:	2059      	movs	r0, #89	; 0x59
 8000c7a:	f7ff fdec 	bl	8000856 <SD_SendCmd>
 8000c7e:	4603      	mov	r3, r0
 8000c80:	2b00      	cmp	r3, #0
 8000c82:	d11b      	bne.n	8000cbc <SD_disk_write+0xe4>
		{
			do {
				if(!SD_TxDataBlock(buff, 0xFC)) break;
 8000c84:	21fc      	movs	r1, #252	; 0xfc
 8000c86:	68b8      	ldr	r0, [r7, #8]
 8000c88:	f7ff fda2 	bl	80007d0 <SD_TxDataBlock>
 8000c8c:	4603      	mov	r3, r0
 8000c8e:	2b00      	cmp	r3, #0
 8000c90:	d00a      	beq.n	8000ca8 <SD_disk_write+0xd0>
				buff += 512;
 8000c92:	68bb      	ldr	r3, [r7, #8]
 8000c94:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8000c98:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8000c9a:	683b      	ldr	r3, [r7, #0]
 8000c9c:	3b01      	subs	r3, #1
 8000c9e:	603b      	str	r3, [r7, #0]
 8000ca0:	683b      	ldr	r3, [r7, #0]
 8000ca2:	2b00      	cmp	r3, #0
 8000ca4:	d1ee      	bne.n	8000c84 <SD_disk_write+0xac>
 8000ca6:	e000      	b.n	8000caa <SD_disk_write+0xd2>
				if(!SD_TxDataBlock(buff, 0xFC)) break;
 8000ca8:	bf00      	nop

			/* STOP_TRAN token */
			if(!SD_TxDataBlock(0, 0xFD))
 8000caa:	21fd      	movs	r1, #253	; 0xfd
 8000cac:	2000      	movs	r0, #0
 8000cae:	f7ff fd8f 	bl	80007d0 <SD_TxDataBlock>
 8000cb2:	4603      	mov	r3, r0
 8000cb4:	2b00      	cmp	r3, #0
 8000cb6:	d101      	bne.n	8000cbc <SD_disk_write+0xe4>
			{
				count = 1;
 8000cb8:	2301      	movs	r3, #1
 8000cba:	603b      	str	r3, [r7, #0]
			}
		}
	}

	/* Idle */
	DESELECT();
 8000cbc:	f7ff fc78 	bl	80005b0 <DESELECT>
	SPI_RxByte();
 8000cc0:	f7ff fcb8 	bl	8000634 <SPI_RxByte>

	return count ? RES_ERROR : RES_OK;
 8000cc4:	683b      	ldr	r3, [r7, #0]
 8000cc6:	2b00      	cmp	r3, #0
 8000cc8:	bf14      	ite	ne
 8000cca:	2301      	movne	r3, #1
 8000ccc:	2300      	moveq	r3, #0
 8000cce:	b2db      	uxtb	r3, r3
}
 8000cd0:	4618      	mov	r0, r3
 8000cd2:	3710      	adds	r7, #16
 8000cd4:	46bd      	mov	sp, r7
 8000cd6:	bd80      	pop	{r7, pc}
 8000cd8:	20000000 	.word	0x20000000
 8000cdc:	20000178 	.word	0x20000178

08000ce0 <SD_disk_ioctl>:
#endif /* _USE_WRITE */

/* ioctl */
DRESULT SD_disk_ioctl(BYTE drv, BYTE ctrl, void *buff) 
{
 8000ce0:	b590      	push	{r4, r7, lr}
 8000ce2:	b08b      	sub	sp, #44	; 0x2c
 8000ce4:	af00      	add	r7, sp, #0
 8000ce6:	4603      	mov	r3, r0
 8000ce8:	603a      	str	r2, [r7, #0]
 8000cea:	71fb      	strb	r3, [r7, #7]
 8000cec:	460b      	mov	r3, r1
 8000cee:	71bb      	strb	r3, [r7, #6]
	DRESULT res;
	uint8_t n, csd[16], *ptr = buff;
 8000cf0:	683b      	ldr	r3, [r7, #0]
 8000cf2:	623b      	str	r3, [r7, #32]
	WORD csize;

	/* pdrv should be 0 */
	if (drv) return RES_PARERR;
 8000cf4:	79fb      	ldrb	r3, [r7, #7]
 8000cf6:	2b00      	cmp	r3, #0
 8000cf8:	d001      	beq.n	8000cfe <SD_disk_ioctl+0x1e>
 8000cfa:	2304      	movs	r3, #4
 8000cfc:	e115      	b.n	8000f2a <SD_disk_ioctl+0x24a>
	res = RES_ERROR;
 8000cfe:	2301      	movs	r3, #1
 8000d00:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if (ctrl == CTRL_POWER)
 8000d04:	79bb      	ldrb	r3, [r7, #6]
 8000d06:	2b05      	cmp	r3, #5
 8000d08:	d124      	bne.n	8000d54 <SD_disk_ioctl+0x74>
	{
		switch (*ptr)
 8000d0a:	6a3b      	ldr	r3, [r7, #32]
 8000d0c:	781b      	ldrb	r3, [r3, #0]
 8000d0e:	2b02      	cmp	r3, #2
 8000d10:	d012      	beq.n	8000d38 <SD_disk_ioctl+0x58>
 8000d12:	2b02      	cmp	r3, #2
 8000d14:	dc1a      	bgt.n	8000d4c <SD_disk_ioctl+0x6c>
 8000d16:	2b00      	cmp	r3, #0
 8000d18:	d002      	beq.n	8000d20 <SD_disk_ioctl+0x40>
 8000d1a:	2b01      	cmp	r3, #1
 8000d1c:	d006      	beq.n	8000d2c <SD_disk_ioctl+0x4c>
 8000d1e:	e015      	b.n	8000d4c <SD_disk_ioctl+0x6c>
		{
		case 0:
			SD_PowerOff();		/* Power Off */
 8000d20:	f7ff fd0e 	bl	8000740 <SD_PowerOff>
			res = RES_OK;
 8000d24:	2300      	movs	r3, #0
 8000d26:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8000d2a:	e0fc      	b.n	8000f26 <SD_disk_ioctl+0x246>
		case 1:
			SD_PowerOn();		/* Power On */
 8000d2c:	f7ff fcc6 	bl	80006bc <SD_PowerOn>
			res = RES_OK;
 8000d30:	2300      	movs	r3, #0
 8000d32:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8000d36:	e0f6      	b.n	8000f26 <SD_disk_ioctl+0x246>
		case 2:
			*(ptr + 1) = SD_CheckPower();
 8000d38:	6a3b      	ldr	r3, [r7, #32]
 8000d3a:	1c5c      	adds	r4, r3, #1
 8000d3c:	f7ff fd0c 	bl	8000758 <SD_CheckPower>
 8000d40:	4603      	mov	r3, r0
 8000d42:	7023      	strb	r3, [r4, #0]
			res = RES_OK;		/* Power Check */
 8000d44:	2300      	movs	r3, #0
 8000d46:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8000d4a:	e0ec      	b.n	8000f26 <SD_disk_ioctl+0x246>
		default:
			res = RES_PARERR;
 8000d4c:	2304      	movs	r3, #4
 8000d4e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8000d52:	e0e8      	b.n	8000f26 <SD_disk_ioctl+0x246>
		}
	}
	else
	{
		/* no disk */
		if (Stat & STA_NOINIT) return RES_NOTRDY;
 8000d54:	4b77      	ldr	r3, [pc, #476]	; (8000f34 <SD_disk_ioctl+0x254>)
 8000d56:	781b      	ldrb	r3, [r3, #0]
 8000d58:	b2db      	uxtb	r3, r3
 8000d5a:	f003 0301 	and.w	r3, r3, #1
 8000d5e:	2b00      	cmp	r3, #0
 8000d60:	d001      	beq.n	8000d66 <SD_disk_ioctl+0x86>
 8000d62:	2303      	movs	r3, #3
 8000d64:	e0e1      	b.n	8000f2a <SD_disk_ioctl+0x24a>

		SELECT();
 8000d66:	f7ff fc15 	bl	8000594 <SELECT>

		switch (ctrl)
 8000d6a:	79bb      	ldrb	r3, [r7, #6]
 8000d6c:	2b0d      	cmp	r3, #13
 8000d6e:	f200 80cb 	bhi.w	8000f08 <SD_disk_ioctl+0x228>
 8000d72:	a201      	add	r2, pc, #4	; (adr r2, 8000d78 <SD_disk_ioctl+0x98>)
 8000d74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000d78:	08000e73 	.word	0x08000e73
 8000d7c:	08000db1 	.word	0x08000db1
 8000d80:	08000e63 	.word	0x08000e63
 8000d84:	08000f09 	.word	0x08000f09
 8000d88:	08000f09 	.word	0x08000f09
 8000d8c:	08000f09 	.word	0x08000f09
 8000d90:	08000f09 	.word	0x08000f09
 8000d94:	08000f09 	.word	0x08000f09
 8000d98:	08000f09 	.word	0x08000f09
 8000d9c:	08000f09 	.word	0x08000f09
 8000da0:	08000f09 	.word	0x08000f09
 8000da4:	08000e85 	.word	0x08000e85
 8000da8:	08000ea9 	.word	0x08000ea9
 8000dac:	08000ecd 	.word	0x08000ecd
		{
		case GET_SECTOR_COUNT:
			/* SEND_CSD */
			if ((SD_SendCmd(CMD9, 0) == 0) && SD_RxDataBlock(csd, 16))
 8000db0:	2100      	movs	r1, #0
 8000db2:	2049      	movs	r0, #73	; 0x49
 8000db4:	f7ff fd4f 	bl	8000856 <SD_SendCmd>
 8000db8:	4603      	mov	r3, r0
 8000dba:	2b00      	cmp	r3, #0
 8000dbc:	f040 80a8 	bne.w	8000f10 <SD_disk_ioctl+0x230>
 8000dc0:	f107 030c 	add.w	r3, r7, #12
 8000dc4:	2110      	movs	r1, #16
 8000dc6:	4618      	mov	r0, r3
 8000dc8:	f7ff fcd2 	bl	8000770 <SD_RxDataBlock>
 8000dcc:	4603      	mov	r3, r0
 8000dce:	2b00      	cmp	r3, #0
 8000dd0:	f000 809e 	beq.w	8000f10 <SD_disk_ioctl+0x230>
			{
				if ((csd[0] >> 6) == 1)
 8000dd4:	7b3b      	ldrb	r3, [r7, #12]
 8000dd6:	099b      	lsrs	r3, r3, #6
 8000dd8:	b2db      	uxtb	r3, r3
 8000dda:	2b01      	cmp	r3, #1
 8000ddc:	d10e      	bne.n	8000dfc <SD_disk_ioctl+0x11c>
				{
					/* SDC V2 */
					csize = csd[9] + ((WORD) csd[8] << 8) + 1;
 8000dde:	7d7b      	ldrb	r3, [r7, #21]
 8000de0:	b29a      	uxth	r2, r3
 8000de2:	7d3b      	ldrb	r3, [r7, #20]
 8000de4:	b29b      	uxth	r3, r3
 8000de6:	021b      	lsls	r3, r3, #8
 8000de8:	b29b      	uxth	r3, r3
 8000dea:	4413      	add	r3, r2
 8000dec:	b29b      	uxth	r3, r3
 8000dee:	3301      	adds	r3, #1
 8000df0:	83fb      	strh	r3, [r7, #30]
					*(DWORD*) buff = (DWORD) csize << 10;
 8000df2:	8bfb      	ldrh	r3, [r7, #30]
 8000df4:	029a      	lsls	r2, r3, #10
 8000df6:	683b      	ldr	r3, [r7, #0]
 8000df8:	601a      	str	r2, [r3, #0]
 8000dfa:	e02e      	b.n	8000e5a <SD_disk_ioctl+0x17a>
				}
				else
				{
					/* MMC or SDC V1 */
					n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 8000dfc:	7c7b      	ldrb	r3, [r7, #17]
 8000dfe:	f003 030f 	and.w	r3, r3, #15
 8000e02:	b2da      	uxtb	r2, r3
 8000e04:	7dbb      	ldrb	r3, [r7, #22]
 8000e06:	09db      	lsrs	r3, r3, #7
 8000e08:	b2db      	uxtb	r3, r3
 8000e0a:	4413      	add	r3, r2
 8000e0c:	b2da      	uxtb	r2, r3
 8000e0e:	7d7b      	ldrb	r3, [r7, #21]
 8000e10:	005b      	lsls	r3, r3, #1
 8000e12:	b2db      	uxtb	r3, r3
 8000e14:	f003 0306 	and.w	r3, r3, #6
 8000e18:	b2db      	uxtb	r3, r3
 8000e1a:	4413      	add	r3, r2
 8000e1c:	b2db      	uxtb	r3, r3
 8000e1e:	3302      	adds	r3, #2
 8000e20:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
					csize = (csd[8] >> 6) + ((WORD) csd[7] << 2) + ((WORD) (csd[6] & 3) << 10) + 1;
 8000e24:	7d3b      	ldrb	r3, [r7, #20]
 8000e26:	099b      	lsrs	r3, r3, #6
 8000e28:	b2db      	uxtb	r3, r3
 8000e2a:	b29a      	uxth	r2, r3
 8000e2c:	7cfb      	ldrb	r3, [r7, #19]
 8000e2e:	b29b      	uxth	r3, r3
 8000e30:	009b      	lsls	r3, r3, #2
 8000e32:	b29b      	uxth	r3, r3
 8000e34:	4413      	add	r3, r2
 8000e36:	b29a      	uxth	r2, r3
 8000e38:	7cbb      	ldrb	r3, [r7, #18]
 8000e3a:	029b      	lsls	r3, r3, #10
 8000e3c:	b29b      	uxth	r3, r3
 8000e3e:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8000e42:	b29b      	uxth	r3, r3
 8000e44:	4413      	add	r3, r2
 8000e46:	b29b      	uxth	r3, r3
 8000e48:	3301      	adds	r3, #1
 8000e4a:	83fb      	strh	r3, [r7, #30]
					*(DWORD*) buff = (DWORD) csize << (n - 9);
 8000e4c:	8bfa      	ldrh	r2, [r7, #30]
 8000e4e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000e52:	3b09      	subs	r3, #9
 8000e54:	409a      	lsls	r2, r3
 8000e56:	683b      	ldr	r3, [r7, #0]
 8000e58:	601a      	str	r2, [r3, #0]
				}
				res = RES_OK;
 8000e5a:	2300      	movs	r3, #0
 8000e5c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			}
			break;
 8000e60:	e056      	b.n	8000f10 <SD_disk_ioctl+0x230>
		case GET_SECTOR_SIZE:
			*(WORD*) buff = 512;
 8000e62:	683b      	ldr	r3, [r7, #0]
 8000e64:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000e68:	801a      	strh	r2, [r3, #0]
			res = RES_OK;
 8000e6a:	2300      	movs	r3, #0
 8000e6c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8000e70:	e055      	b.n	8000f1e <SD_disk_ioctl+0x23e>
		case CTRL_SYNC:
			if (SD_ReadyWait() == 0xFF) res = RES_OK;
 8000e72:	f7ff fc09 	bl	8000688 <SD_ReadyWait>
 8000e76:	4603      	mov	r3, r0
 8000e78:	2bff      	cmp	r3, #255	; 0xff
 8000e7a:	d14b      	bne.n	8000f14 <SD_disk_ioctl+0x234>
 8000e7c:	2300      	movs	r3, #0
 8000e7e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8000e82:	e047      	b.n	8000f14 <SD_disk_ioctl+0x234>
		case MMC_GET_CSD:
			/* SEND_CSD */
			if (SD_SendCmd(CMD9, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 8000e84:	2100      	movs	r1, #0
 8000e86:	2049      	movs	r0, #73	; 0x49
 8000e88:	f7ff fce5 	bl	8000856 <SD_SendCmd>
 8000e8c:	4603      	mov	r3, r0
 8000e8e:	2b00      	cmp	r3, #0
 8000e90:	d142      	bne.n	8000f18 <SD_disk_ioctl+0x238>
 8000e92:	2110      	movs	r1, #16
 8000e94:	6a38      	ldr	r0, [r7, #32]
 8000e96:	f7ff fc6b 	bl	8000770 <SD_RxDataBlock>
 8000e9a:	4603      	mov	r3, r0
 8000e9c:	2b00      	cmp	r3, #0
 8000e9e:	d03b      	beq.n	8000f18 <SD_disk_ioctl+0x238>
 8000ea0:	2300      	movs	r3, #0
 8000ea2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8000ea6:	e037      	b.n	8000f18 <SD_disk_ioctl+0x238>
		case MMC_GET_CID:
			/* SEND_CID */
			if (SD_SendCmd(CMD10, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 8000ea8:	2100      	movs	r1, #0
 8000eaa:	204a      	movs	r0, #74	; 0x4a
 8000eac:	f7ff fcd3 	bl	8000856 <SD_SendCmd>
 8000eb0:	4603      	mov	r3, r0
 8000eb2:	2b00      	cmp	r3, #0
 8000eb4:	d132      	bne.n	8000f1c <SD_disk_ioctl+0x23c>
 8000eb6:	2110      	movs	r1, #16
 8000eb8:	6a38      	ldr	r0, [r7, #32]
 8000eba:	f7ff fc59 	bl	8000770 <SD_RxDataBlock>
 8000ebe:	4603      	mov	r3, r0
 8000ec0:	2b00      	cmp	r3, #0
 8000ec2:	d02b      	beq.n	8000f1c <SD_disk_ioctl+0x23c>
 8000ec4:	2300      	movs	r3, #0
 8000ec6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8000eca:	e027      	b.n	8000f1c <SD_disk_ioctl+0x23c>
		case MMC_GET_OCR:
			/* READ_OCR */
			if (SD_SendCmd(CMD58, 0) == 0)
 8000ecc:	2100      	movs	r1, #0
 8000ece:	207a      	movs	r0, #122	; 0x7a
 8000ed0:	f7ff fcc1 	bl	8000856 <SD_SendCmd>
 8000ed4:	4603      	mov	r3, r0
 8000ed6:	2b00      	cmp	r3, #0
 8000ed8:	d116      	bne.n	8000f08 <SD_disk_ioctl+0x228>
			{
				for (n = 0; n < 4; n++)
 8000eda:	2300      	movs	r3, #0
 8000edc:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8000ee0:	e00b      	b.n	8000efa <SD_disk_ioctl+0x21a>
				{
					*ptr++ = SPI_RxByte();
 8000ee2:	6a3c      	ldr	r4, [r7, #32]
 8000ee4:	1c63      	adds	r3, r4, #1
 8000ee6:	623b      	str	r3, [r7, #32]
 8000ee8:	f7ff fba4 	bl	8000634 <SPI_RxByte>
 8000eec:	4603      	mov	r3, r0
 8000eee:	7023      	strb	r3, [r4, #0]
				for (n = 0; n < 4; n++)
 8000ef0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000ef4:	3301      	adds	r3, #1
 8000ef6:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8000efa:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000efe:	2b03      	cmp	r3, #3
 8000f00:	d9ef      	bls.n	8000ee2 <SD_disk_ioctl+0x202>
				}
				res = RES_OK;
 8000f02:	2300      	movs	r3, #0
 8000f04:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			}
		default:
			res = RES_PARERR;
 8000f08:	2304      	movs	r3, #4
 8000f0a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8000f0e:	e006      	b.n	8000f1e <SD_disk_ioctl+0x23e>
			break;
 8000f10:	bf00      	nop
 8000f12:	e004      	b.n	8000f1e <SD_disk_ioctl+0x23e>
			break;
 8000f14:	bf00      	nop
 8000f16:	e002      	b.n	8000f1e <SD_disk_ioctl+0x23e>
			break;
 8000f18:	bf00      	nop
 8000f1a:	e000      	b.n	8000f1e <SD_disk_ioctl+0x23e>
			break;
 8000f1c:	bf00      	nop
		}

		DESELECT();
 8000f1e:	f7ff fb47 	bl	80005b0 <DESELECT>
		SPI_RxByte();
 8000f22:	f7ff fb87 	bl	8000634 <SPI_RxByte>
	}

	return res;
 8000f26:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8000f2a:	4618      	mov	r0, r3
 8000f2c:	372c      	adds	r7, #44	; 0x2c
 8000f2e:	46bd      	mov	sp, r7
 8000f30:	bd90      	pop	{r4, r7, pc}
 8000f32:	bf00      	nop
 8000f34:	20000000 	.word	0x20000000

08000f38 <bufsize>:
volatile char buffer[BUFFER_SIZE];  // to store strings..

int i=0;

int bufsize (char *buf)
{
 8000f38:	b480      	push	{r7}
 8000f3a:	b085      	sub	sp, #20
 8000f3c:	af00      	add	r7, sp, #0
 8000f3e:	6078      	str	r0, [r7, #4]
	int i=0;
 8000f40:	2300      	movs	r3, #0
 8000f42:	60fb      	str	r3, [r7, #12]
	while (*buf++ != '\0') i++;
 8000f44:	e002      	b.n	8000f4c <bufsize+0x14>
 8000f46:	68fb      	ldr	r3, [r7, #12]
 8000f48:	3301      	adds	r3, #1
 8000f4a:	60fb      	str	r3, [r7, #12]
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	1c5a      	adds	r2, r3, #1
 8000f50:	607a      	str	r2, [r7, #4]
 8000f52:	781b      	ldrb	r3, [r3, #0]
 8000f54:	2b00      	cmp	r3, #0
 8000f56:	d1f6      	bne.n	8000f46 <bufsize+0xe>
	return i;
 8000f58:	68fb      	ldr	r3, [r7, #12]
}
 8000f5a:	4618      	mov	r0, r3
 8000f5c:	3714      	adds	r7, #20
 8000f5e:	46bd      	mov	sp, r7
 8000f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f64:	4770      	bx	lr
	...

08000f68 <send_uart>:
{
	for (int i=0; i<BUFFER_SIZE; i++) buffer[i] = '\0';
}

void send_uart (char *string)
{
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	b084      	sub	sp, #16
 8000f6c:	af00      	add	r7, sp, #0
 8000f6e:	6078      	str	r0, [r7, #4]
	uint8_t len = strlen (string);
 8000f70:	6878      	ldr	r0, [r7, #4]
 8000f72:	f7ff f935 	bl	80001e0 <strlen>
 8000f76:	4603      	mov	r3, r0
 8000f78:	73fb      	strb	r3, [r7, #15]
	HAL_UART_Transmit(&huart2, (uint8_t *) string, len, HAL_MAX_DELAY);  // transmit in blocking mode
 8000f7a:	7bfb      	ldrb	r3, [r7, #15]
 8000f7c:	b29a      	uxth	r2, r3
 8000f7e:	f04f 33ff 	mov.w	r3, #4294967295
 8000f82:	6879      	ldr	r1, [r7, #4]
 8000f84:	4803      	ldr	r0, [pc, #12]	; (8000f94 <send_uart+0x2c>)
 8000f86:	f009 f8ec 	bl	800a162 <HAL_UART_Transmit>
}
 8000f8a:	bf00      	nop
 8000f8c:	3710      	adds	r7, #16
 8000f8e:	46bd      	mov	sp, r7
 8000f90:	bd80      	pop	{r7, pc}
 8000f92:	bf00      	nop
 8000f94:	20000228 	.word	0x20000228

08000f98 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8000f98:	b590      	push	{r4, r7, lr}
 8000f9a:	b085      	sub	sp, #20
 8000f9c:	af02      	add	r7, sp, #8
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000f9e:	f005 fe8d 	bl	8006cbc <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000fa2:	f000 f97f 	bl	80012a4 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000fa6:	f000 fab3 	bl	8001510 <MX_GPIO_Init>
	MX_SPI1_Init();
 8000faa:	f000 fa03 	bl	80013b4 <MX_SPI1_Init>
	MX_USART2_UART_Init();
 8000fae:	f000 fa85 	bl	80014bc <MX_USART2_UART_Init>
	MX_FATFS_Init();
 8000fb2:	f009 fc4b 	bl	800a84c <MX_FATFS_Init>
	MX_TIM3_Init();
 8000fb6:	f000 fa33 	bl	8001420 <MX_TIM3_Init>
	  MX_IWDG_Init();
 8000fba:	f000 f9e1 	bl	8001380 <MX_IWDG_Init>

	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	stato_data_logger= WAIT_FOR_START;
 8000fbe:	4ba2      	ldr	r3, [pc, #648]	; (8001248 <main+0x2b0>)
 8000fc0:	2200      	movs	r2, #0
 8000fc2:	701a      	strb	r2, [r3, #0]
	premuto=false;
 8000fc4:	4ba1      	ldr	r3, [pc, #644]	; (800124c <main+0x2b4>)
 8000fc6:	2200      	movs	r2, #0
 8000fc8:	701a      	strb	r2, [r3, #0]
	acquisizioni=0;
 8000fca:	4ba1      	ldr	r3, [pc, #644]	; (8001250 <main+0x2b8>)
 8000fcc:	2200      	movs	r2, #0
 8000fce:	601a      	str	r2, [r3, #0]
	while (1)
	{
		/* USER CODE END WHILE */

		/* USER CODE BEGIN 3 */
				HAL_IWDG_Refresh(&hiwdg);
 8000fd0:	48a0      	ldr	r0, [pc, #640]	; (8001254 <main+0x2bc>)
 8000fd2:	f007 fb20 	bl	8008616 <HAL_IWDG_Refresh>

		switch (stato_data_logger){
 8000fd6:	4b9c      	ldr	r3, [pc, #624]	; (8001248 <main+0x2b0>)
 8000fd8:	781b      	ldrb	r3, [r3, #0]
 8000fda:	2b03      	cmp	r3, #3
 8000fdc:	f200 812e 	bhi.w	800123c <main+0x2a4>
 8000fe0:	a201      	add	r2, pc, #4	; (adr r2, 8000fe8 <main+0x50>)
 8000fe2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000fe6:	bf00      	nop
 8000fe8:	08000ff9 	.word	0x08000ff9
 8000fec:	08001069 	.word	0x08001069
 8000ff0:	080010d5 	.word	0x080010d5
 8000ff4:	08001197 	.word	0x08001197

		case WAIT_FOR_START:

			if(premuto==true){
 8000ff8:	4b94      	ldr	r3, [pc, #592]	; (800124c <main+0x2b4>)
 8000ffa:	781b      	ldrb	r3, [r3, #0]
 8000ffc:	b2db      	uxtb	r3, r3
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	f000 811e 	beq.w	8001240 <main+0x2a8>

				stato_data_logger=WAIT_FOR_OPEN_FILE;
 8001004:	4b90      	ldr	r3, [pc, #576]	; (8001248 <main+0x2b0>)
 8001006:	2201      	movs	r2, #1
 8001008:	701a      	strb	r2, [r3, #0]

				contatore_campioni=0;
 800100a:	4b93      	ldr	r3, [pc, #588]	; (8001258 <main+0x2c0>)
 800100c:	2200      	movs	r2, #0
 800100e:	601a      	str	r2, [r3, #0]
				fresult = f_mount(&fs, "/", 1);
 8001010:	2201      	movs	r2, #1
 8001012:	4992      	ldr	r1, [pc, #584]	; (800125c <main+0x2c4>)
 8001014:	4892      	ldr	r0, [pc, #584]	; (8001260 <main+0x2c8>)
 8001016:	f00b fe63 	bl	800cce0 <f_mount>
 800101a:	4603      	mov	r3, r0
 800101c:	461a      	mov	r2, r3
 800101e:	4b91      	ldr	r3, [pc, #580]	; (8001264 <main+0x2cc>)
 8001020:	701a      	strb	r2, [r3, #0]
				if (fresult != FR_OK) send_uart ("ERROR!!! in mounting SD CARD...\n\n");
 8001022:	4b90      	ldr	r3, [pc, #576]	; (8001264 <main+0x2cc>)
 8001024:	781b      	ldrb	r3, [r3, #0]
 8001026:	2b00      	cmp	r3, #0
 8001028:	d003      	beq.n	8001032 <main+0x9a>
 800102a:	488f      	ldr	r0, [pc, #572]	; (8001268 <main+0x2d0>)
 800102c:	f7ff ff9c 	bl	8000f68 <send_uart>
 8001030:	e002      	b.n	8001038 <main+0xa0>
				else send_uart("SD CARD mounted successfully...\n\n");
 8001032:	488e      	ldr	r0, [pc, #568]	; (800126c <main+0x2d4>)
 8001034:	f7ff ff98 	bl	8000f68 <send_uart>
				//				lsm6dso_reset_set(&(pObj->Ctx),1);

				//				HAL_I2C_Mem_Write(&hi2c1,0x57 , 0x12, 0, reset, 1, 100);

				if (IKS01A3_MOTION_SENSOR_Init(IKS01A3_LSM6DSO_0, MOTION_ACCELERO)==HAL_OK){
 8001038:	2102      	movs	r1, #2
 800103a:	2000      	movs	r0, #0
 800103c:	f005 f9b8 	bl	80063b0 <IKS01A3_MOTION_SENSOR_Init>
 8001040:	4603      	mov	r3, r0
 8001042:	2b00      	cmp	r3, #0
 8001044:	f040 80fc 	bne.w	8001240 <main+0x2a8>
					IKS01A3_MOTION_SENSOR_SetOutputDataRate(IKS01A3_LSM6DSO_0, MOTION_ACCELERO, 3332);
 8001048:	ed9f 0a89 	vldr	s0, [pc, #548]	; 8001270 <main+0x2d8>
 800104c:	2102      	movs	r1, #2
 800104e:	2000      	movs	r0, #0
 8001050:	f005 fbde 	bl	8006810 <IKS01A3_MOTION_SENSOR_SetOutputDataRate>
					IKS01A3_MOTION_SENSOR_Enable(IKS01A3_LSM6DSO_0, MOTION_ACCELERO);
 8001054:	2102      	movs	r1, #2
 8001056:	2000      	movs	r0, #0
 8001058:	f005 face 	bl	80065f8 <IKS01A3_MOTION_SENSOR_Enable>
					IKS01A3_MOTION_SENSOR_GetOutputDataRate(IKS01A3_LSM6DSO_0, MOTION_ACCELERO, &result);
 800105c:	4a85      	ldr	r2, [pc, #532]	; (8001274 <main+0x2dc>)
 800105e:	2102      	movs	r1, #2
 8001060:	2000      	movs	r0, #0
 8001062:	f005 fb91 	bl	8006788 <IKS01A3_MOTION_SENSOR_GetOutputDataRate>
				}
			}
			break;
 8001066:	e0eb      	b.n	8001240 <main+0x2a8>

		case WAIT_FOR_OPEN_FILE:
			//			HAL_Delay(50);
			acquisizioni++;
 8001068:	4b79      	ldr	r3, [pc, #484]	; (8001250 <main+0x2b8>)
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	3301      	adds	r3, #1
 800106e:	4a78      	ldr	r2, [pc, #480]	; (8001250 <main+0x2b8>)
 8001070:	6013      	str	r3, [r2, #0]
			sprintf(nome_file, "acqusizione_%d.csv ",acquisizioni);
 8001072:	4b77      	ldr	r3, [pc, #476]	; (8001250 <main+0x2b8>)
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	461a      	mov	r2, r3
 8001078:	497f      	ldr	r1, [pc, #508]	; (8001278 <main+0x2e0>)
 800107a:	4880      	ldr	r0, [pc, #512]	; (800127c <main+0x2e4>)
 800107c:	f00c fbd2 	bl	800d824 <siprintf>
			fresult = f_open(&fil, nome_file, FA_CREATE_ALWAYS | FA_WRITE);
 8001080:	220a      	movs	r2, #10
 8001082:	497e      	ldr	r1, [pc, #504]	; (800127c <main+0x2e4>)
 8001084:	487e      	ldr	r0, [pc, #504]	; (8001280 <main+0x2e8>)
 8001086:	f00b fe71 	bl	800cd6c <f_open>
 800108a:	4603      	mov	r3, r0
 800108c:	461a      	mov	r2, r3
 800108e:	4b75      	ldr	r3, [pc, #468]	; (8001264 <main+0x2cc>)
 8001090:	701a      	strb	r2, [r3, #0]
			send_uart("file creato");
 8001092:	487c      	ldr	r0, [pc, #496]	; (8001284 <main+0x2ec>)
 8001094:	f7ff ff68 	bl	8000f68 <send_uart>
			sprintf((char *)buffer, "X[mg],Y[mg],Z[mg]\r\n");
 8001098:	497b      	ldr	r1, [pc, #492]	; (8001288 <main+0x2f0>)
 800109a:	487c      	ldr	r0, [pc, #496]	; (800128c <main+0x2f4>)
 800109c:	f00c fbc2 	bl	800d824 <siprintf>
			fresult = f_write(&fil, buffer, bufsize(buffer), &bw);
 80010a0:	487a      	ldr	r0, [pc, #488]	; (800128c <main+0x2f4>)
 80010a2:	f7ff ff49 	bl	8000f38 <bufsize>
 80010a6:	4603      	mov	r3, r0
 80010a8:	461a      	mov	r2, r3
 80010aa:	4b79      	ldr	r3, [pc, #484]	; (8001290 <main+0x2f8>)
 80010ac:	4977      	ldr	r1, [pc, #476]	; (800128c <main+0x2f4>)
 80010ae:	4874      	ldr	r0, [pc, #464]	; (8001280 <main+0x2e8>)
 80010b0:	f00c f828 	bl	800d104 <f_write>
 80010b4:	4603      	mov	r3, r0
 80010b6:	461a      	mov	r2, r3
 80010b8:	4b6a      	ldr	r3, [pc, #424]	; (8001264 <main+0x2cc>)
 80010ba:	701a      	strb	r2, [r3, #0]
			HAL_TIM_Base_Start_IT(&htim3);
 80010bc:	4875      	ldr	r0, [pc, #468]	; (8001294 <main+0x2fc>)
 80010be:	f008 fbd5 	bl	800986c <HAL_TIM_Base_Start_IT>
			stato_data_logger=WAIT_FOR_STOP;
 80010c2:	4b61      	ldr	r3, [pc, #388]	; (8001248 <main+0x2b0>)
 80010c4:	2202      	movs	r2, #2
 80010c6:	701a      	strb	r2, [r3, #0]
			HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 80010c8:	2201      	movs	r2, #1
 80010ca:	2120      	movs	r1, #32
 80010cc:	4872      	ldr	r0, [pc, #456]	; (8001298 <main+0x300>)
 80010ce:	f006 fa05 	bl	80074dc <HAL_GPIO_WritePin>
			break;
 80010d2:	e0b8      	b.n	8001246 <main+0x2ae>

		case WAIT_FOR_STOP:
			if(contatore_campioni>=DIM){
 80010d4:	4b60      	ldr	r3, [pc, #384]	; (8001258 <main+0x2c0>)
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	f641 3257 	movw	r2, #6999	; 0x1b57
 80010dc:	4293      	cmp	r3, r2
 80010de:	dd08      	ble.n	80010f2 <main+0x15a>
				HAL_TIM_Base_Stop_IT(&htim3);
 80010e0:	486c      	ldr	r0, [pc, #432]	; (8001294 <main+0x2fc>)
 80010e2:	f008 fc25 	bl	8009930 <HAL_TIM_Base_Stop_IT>
				contatore_campioni=0;
 80010e6:	4b5c      	ldr	r3, [pc, #368]	; (8001258 <main+0x2c0>)
 80010e8:	2200      	movs	r2, #0
 80010ea:	601a      	str	r2, [r3, #0]
				//				dimesione=true;
				stato_data_logger=WAIT_FOR_CLOSE_FILE;
 80010ec:	4b56      	ldr	r3, [pc, #344]	; (8001248 <main+0x2b0>)
 80010ee:	2203      	movs	r2, #3
 80010f0:	701a      	strb	r2, [r3, #0]

			}
			if(premuto==false)
 80010f2:	4b56      	ldr	r3, [pc, #344]	; (800124c <main+0x2b4>)
 80010f4:	781b      	ldrb	r3, [r3, #0]
 80010f6:	b2db      	uxtb	r3, r3
 80010f8:	f083 0301 	eor.w	r3, r3, #1
 80010fc:	b2db      	uxtb	r3, r3
 80010fe:	2b00      	cmp	r3, #0
 8001100:	f000 80a0 	beq.w	8001244 <main+0x2ac>
			{
				HAL_TIM_Base_Stop_IT(&htim3);
 8001104:	4863      	ldr	r0, [pc, #396]	; (8001294 <main+0x2fc>)
 8001106:	f008 fc13 	bl	8009930 <HAL_TIM_Base_Stop_IT>
				contatore_campioni=0;
 800110a:	4b53      	ldr	r3, [pc, #332]	; (8001258 <main+0x2c0>)
 800110c:	2200      	movs	r2, #0
 800110e:	601a      	str	r2, [r3, #0]
				for(int i=0; i<DIM; i++){
 8001110:	2300      	movs	r3, #0
 8001112:	607b      	str	r3, [r7, #4]
 8001114:	e031      	b.n	800117a <main+0x1e2>
					sprintf((char *)buffer, "%ld,%ld,%ld\r\n",misure_accelerometro[i].x, misure_accelerometro[i].y, misure_accelerometro[i].z );
 8001116:	4961      	ldr	r1, [pc, #388]	; (800129c <main+0x304>)
 8001118:	687a      	ldr	r2, [r7, #4]
 800111a:	4613      	mov	r3, r2
 800111c:	005b      	lsls	r3, r3, #1
 800111e:	4413      	add	r3, r2
 8001120:	009b      	lsls	r3, r3, #2
 8001122:	440b      	add	r3, r1
 8001124:	6819      	ldr	r1, [r3, #0]
 8001126:	485d      	ldr	r0, [pc, #372]	; (800129c <main+0x304>)
 8001128:	687a      	ldr	r2, [r7, #4]
 800112a:	4613      	mov	r3, r2
 800112c:	005b      	lsls	r3, r3, #1
 800112e:	4413      	add	r3, r2
 8001130:	009b      	lsls	r3, r3, #2
 8001132:	4403      	add	r3, r0
 8001134:	3304      	adds	r3, #4
 8001136:	6818      	ldr	r0, [r3, #0]
 8001138:	4c58      	ldr	r4, [pc, #352]	; (800129c <main+0x304>)
 800113a:	687a      	ldr	r2, [r7, #4]
 800113c:	4613      	mov	r3, r2
 800113e:	005b      	lsls	r3, r3, #1
 8001140:	4413      	add	r3, r2
 8001142:	009b      	lsls	r3, r3, #2
 8001144:	4423      	add	r3, r4
 8001146:	3308      	adds	r3, #8
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	9300      	str	r3, [sp, #0]
 800114c:	4603      	mov	r3, r0
 800114e:	460a      	mov	r2, r1
 8001150:	4953      	ldr	r1, [pc, #332]	; (80012a0 <main+0x308>)
 8001152:	484e      	ldr	r0, [pc, #312]	; (800128c <main+0x2f4>)
 8001154:	f00c fb66 	bl	800d824 <siprintf>
					fresult = f_write(&fil, buffer, bufsize(buffer), &bw);
 8001158:	484c      	ldr	r0, [pc, #304]	; (800128c <main+0x2f4>)
 800115a:	f7ff feed 	bl	8000f38 <bufsize>
 800115e:	4603      	mov	r3, r0
 8001160:	461a      	mov	r2, r3
 8001162:	4b4b      	ldr	r3, [pc, #300]	; (8001290 <main+0x2f8>)
 8001164:	4949      	ldr	r1, [pc, #292]	; (800128c <main+0x2f4>)
 8001166:	4846      	ldr	r0, [pc, #280]	; (8001280 <main+0x2e8>)
 8001168:	f00b ffcc 	bl	800d104 <f_write>
 800116c:	4603      	mov	r3, r0
 800116e:	461a      	mov	r2, r3
 8001170:	4b3c      	ldr	r3, [pc, #240]	; (8001264 <main+0x2cc>)
 8001172:	701a      	strb	r2, [r3, #0]
				for(int i=0; i<DIM; i++){
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	3301      	adds	r3, #1
 8001178:	607b      	str	r3, [r7, #4]
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	f641 3257 	movw	r2, #6999	; 0x1b57
 8001180:	4293      	cmp	r3, r2
 8001182:	ddc8      	ble.n	8001116 <main+0x17e>
				}
				f_close(&fil);
 8001184:	483e      	ldr	r0, [pc, #248]	; (8001280 <main+0x2e8>)
 8001186:	f00c f9cf 	bl	800d528 <f_close>
				f_sync(&fil);
 800118a:	483d      	ldr	r0, [pc, #244]	; (8001280 <main+0x2e8>)
 800118c:	f00c f94e 	bl	800d42c <f_sync>
				stop_acquisizione();
 8001190:	f000 fa34 	bl	80015fc <stop_acquisizione>

			}


			break;
 8001194:	e056      	b.n	8001244 <main+0x2ac>

		case WAIT_FOR_CLOSE_FILE:{
			for(int i=0; i<DIM; i++){
 8001196:	2300      	movs	r3, #0
 8001198:	603b      	str	r3, [r7, #0]
 800119a:	e031      	b.n	8001200 <main+0x268>
				sprintf((char *)buffer, "%ld,%ld,%ld\r\n",misure_accelerometro[i].x, misure_accelerometro[i].y, misure_accelerometro[i].z );
 800119c:	493f      	ldr	r1, [pc, #252]	; (800129c <main+0x304>)
 800119e:	683a      	ldr	r2, [r7, #0]
 80011a0:	4613      	mov	r3, r2
 80011a2:	005b      	lsls	r3, r3, #1
 80011a4:	4413      	add	r3, r2
 80011a6:	009b      	lsls	r3, r3, #2
 80011a8:	440b      	add	r3, r1
 80011aa:	6819      	ldr	r1, [r3, #0]
 80011ac:	483b      	ldr	r0, [pc, #236]	; (800129c <main+0x304>)
 80011ae:	683a      	ldr	r2, [r7, #0]
 80011b0:	4613      	mov	r3, r2
 80011b2:	005b      	lsls	r3, r3, #1
 80011b4:	4413      	add	r3, r2
 80011b6:	009b      	lsls	r3, r3, #2
 80011b8:	4403      	add	r3, r0
 80011ba:	3304      	adds	r3, #4
 80011bc:	6818      	ldr	r0, [r3, #0]
 80011be:	4c37      	ldr	r4, [pc, #220]	; (800129c <main+0x304>)
 80011c0:	683a      	ldr	r2, [r7, #0]
 80011c2:	4613      	mov	r3, r2
 80011c4:	005b      	lsls	r3, r3, #1
 80011c6:	4413      	add	r3, r2
 80011c8:	009b      	lsls	r3, r3, #2
 80011ca:	4423      	add	r3, r4
 80011cc:	3308      	adds	r3, #8
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	9300      	str	r3, [sp, #0]
 80011d2:	4603      	mov	r3, r0
 80011d4:	460a      	mov	r2, r1
 80011d6:	4932      	ldr	r1, [pc, #200]	; (80012a0 <main+0x308>)
 80011d8:	482c      	ldr	r0, [pc, #176]	; (800128c <main+0x2f4>)
 80011da:	f00c fb23 	bl	800d824 <siprintf>
				fresult = f_write(&fil, buffer, bufsize(buffer), &bw);
 80011de:	482b      	ldr	r0, [pc, #172]	; (800128c <main+0x2f4>)
 80011e0:	f7ff feaa 	bl	8000f38 <bufsize>
 80011e4:	4603      	mov	r3, r0
 80011e6:	461a      	mov	r2, r3
 80011e8:	4b29      	ldr	r3, [pc, #164]	; (8001290 <main+0x2f8>)
 80011ea:	4928      	ldr	r1, [pc, #160]	; (800128c <main+0x2f4>)
 80011ec:	4824      	ldr	r0, [pc, #144]	; (8001280 <main+0x2e8>)
 80011ee:	f00b ff89 	bl	800d104 <f_write>
 80011f2:	4603      	mov	r3, r0
 80011f4:	461a      	mov	r2, r3
 80011f6:	4b1b      	ldr	r3, [pc, #108]	; (8001264 <main+0x2cc>)
 80011f8:	701a      	strb	r2, [r3, #0]
			for(int i=0; i<DIM; i++){
 80011fa:	683b      	ldr	r3, [r7, #0]
 80011fc:	3301      	adds	r3, #1
 80011fe:	603b      	str	r3, [r7, #0]
 8001200:	683b      	ldr	r3, [r7, #0]
 8001202:	f641 3257 	movw	r2, #6999	; 0x1b57
 8001206:	4293      	cmp	r3, r2
 8001208:	ddc8      	ble.n	800119c <main+0x204>
			}
			f_close(&fil);
 800120a:	481d      	ldr	r0, [pc, #116]	; (8001280 <main+0x2e8>)
 800120c:	f00c f98c 	bl	800d528 <f_close>
			f_sync(&fil);
 8001210:	481b      	ldr	r0, [pc, #108]	; (8001280 <main+0x2e8>)
 8001212:	f00c f90b 	bl	800d42c <f_sync>


			if(acquisizioni>=DIM_FINESTRA_BANCHI || premuto==false){
 8001216:	4b0e      	ldr	r3, [pc, #56]	; (8001250 <main+0x2b8>)
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	2b09      	cmp	r3, #9
 800121c:	dc07      	bgt.n	800122e <main+0x296>
 800121e:	4b0b      	ldr	r3, [pc, #44]	; (800124c <main+0x2b4>)
 8001220:	781b      	ldrb	r3, [r3, #0]
 8001222:	b2db      	uxtb	r3, r3
 8001224:	f083 0301 	eor.w	r3, r3, #1
 8001228:	b2db      	uxtb	r3, r3
 800122a:	2b00      	cmp	r3, #0
 800122c:	d002      	beq.n	8001234 <main+0x29c>
				stop_acquisizione();
 800122e:	f000 f9e5 	bl	80015fc <stop_acquisizione>
			else{
				stato_data_logger=WAIT_FOR_OPEN_FILE;
			}


			break;
 8001232:	e008      	b.n	8001246 <main+0x2ae>
				stato_data_logger=WAIT_FOR_OPEN_FILE;
 8001234:	4b04      	ldr	r3, [pc, #16]	; (8001248 <main+0x2b0>)
 8001236:	2201      	movs	r2, #1
 8001238:	701a      	strb	r2, [r3, #0]
			break;
 800123a:	e004      	b.n	8001246 <main+0x2ae>
		}
		default:
			break;
 800123c:	bf00      	nop
 800123e:	e6c7      	b.n	8000fd0 <main+0x38>
			break;
 8001240:	bf00      	nop
 8001242:	e6c5      	b.n	8000fd0 <main+0x38>
			break;
 8001244:	bf00      	nop
				HAL_IWDG_Refresh(&hiwdg);
 8001246:	e6c3      	b.n	8000fd0 <main+0x38>
 8001248:	20014aba 	.word	0x20014aba
 800124c:	20014a94 	.word	0x20014a94
 8001250:	20014a90 	.word	0x20014a90
 8001254:	2000017c 	.word	0x2000017c
 8001258:	20014a8c 	.word	0x20014a8c
 800125c:	0800e118 	.word	0x0800e118
 8001260:	20014abc 	.word	0x20014abc
 8001264:	20016b24 	.word	0x20016b24
 8001268:	0800e11c 	.word	0x0800e11c
 800126c:	0800e140 	.word	0x0800e140
 8001270:	45504000 	.word	0x45504000
 8001274:	20014a98 	.word	0x20014a98
 8001278:	0800e164 	.word	0x0800e164
 800127c:	20014a9c 	.word	0x20014a9c
 8001280:	20015af4 	.word	0x20015af4
 8001284:	0800e178 	.word	0x0800e178
 8001288:	0800e184 	.word	0x0800e184
 800128c:	20016b2c 	.word	0x20016b2c
 8001290:	20016b28 	.word	0x20016b28
 8001294:	200001e0 	.word	0x200001e0
 8001298:	40020000 	.word	0x40020000
 800129c:	2000026c 	.word	0x2000026c
 80012a0:	0800e198 	.word	0x0800e198

080012a4 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 80012a4:	b580      	push	{r7, lr}
 80012a6:	b094      	sub	sp, #80	; 0x50
 80012a8:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80012aa:	f107 0320 	add.w	r3, r7, #32
 80012ae:	2230      	movs	r2, #48	; 0x30
 80012b0:	2100      	movs	r1, #0
 80012b2:	4618      	mov	r0, r3
 80012b4:	f00c faae 	bl	800d814 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80012b8:	f107 030c 	add.w	r3, r7, #12
 80012bc:	2200      	movs	r2, #0
 80012be:	601a      	str	r2, [r3, #0]
 80012c0:	605a      	str	r2, [r3, #4]
 80012c2:	609a      	str	r2, [r3, #8]
 80012c4:	60da      	str	r2, [r3, #12]
 80012c6:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 80012c8:	2300      	movs	r3, #0
 80012ca:	60bb      	str	r3, [r7, #8]
 80012cc:	4b2a      	ldr	r3, [pc, #168]	; (8001378 <SystemClock_Config+0xd4>)
 80012ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012d0:	4a29      	ldr	r2, [pc, #164]	; (8001378 <SystemClock_Config+0xd4>)
 80012d2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80012d6:	6413      	str	r3, [r2, #64]	; 0x40
 80012d8:	4b27      	ldr	r3, [pc, #156]	; (8001378 <SystemClock_Config+0xd4>)
 80012da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012dc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012e0:	60bb      	str	r3, [r7, #8]
 80012e2:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80012e4:	2300      	movs	r3, #0
 80012e6:	607b      	str	r3, [r7, #4]
 80012e8:	4b24      	ldr	r3, [pc, #144]	; (800137c <SystemClock_Config+0xd8>)
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80012f0:	4a22      	ldr	r2, [pc, #136]	; (800137c <SystemClock_Config+0xd8>)
 80012f2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80012f6:	6013      	str	r3, [r2, #0]
 80012f8:	4b20      	ldr	r3, [pc, #128]	; (800137c <SystemClock_Config+0xd8>)
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001300:	607b      	str	r3, [r7, #4]
 8001302:	687b      	ldr	r3, [r7, #4]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 8001304:	230a      	movs	r3, #10
 8001306:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001308:	2301      	movs	r3, #1
 800130a:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800130c:	2310      	movs	r3, #16
 800130e:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8001310:	2301      	movs	r3, #1
 8001312:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001314:	2302      	movs	r3, #2
 8001316:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001318:	2300      	movs	r3, #0
 800131a:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLM = 16;
 800131c:	2310      	movs	r3, #16
 800131e:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLN = 336;
 8001320:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8001324:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8001326:	2304      	movs	r3, #4
 8001328:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLQ = 7;
 800132a:	2307      	movs	r3, #7
 800132c:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800132e:	f107 0320 	add.w	r3, r7, #32
 8001332:	4618      	mov	r0, r3
 8001334:	f007 f980 	bl	8008638 <HAL_RCC_OscConfig>
 8001338:	4603      	mov	r3, r0
 800133a:	2b00      	cmp	r3, #0
 800133c:	d001      	beq.n	8001342 <SystemClock_Config+0x9e>
	{
		Error_Handler();
 800133e:	f000 f98b 	bl	8001658 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001342:	230f      	movs	r3, #15
 8001344:	60fb      	str	r3, [r7, #12]
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001346:	2302      	movs	r3, #2
 8001348:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800134a:	2300      	movs	r3, #0
 800134c:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800134e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001352:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001354:	2300      	movs	r3, #0
 8001356:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001358:	f107 030c 	add.w	r3, r7, #12
 800135c:	2102      	movs	r1, #2
 800135e:	4618      	mov	r0, r3
 8001360:	f007 fbe2 	bl	8008b28 <HAL_RCC_ClockConfig>
 8001364:	4603      	mov	r3, r0
 8001366:	2b00      	cmp	r3, #0
 8001368:	d001      	beq.n	800136e <SystemClock_Config+0xca>
	{
		Error_Handler();
 800136a:	f000 f975 	bl	8001658 <Error_Handler>
	}
}
 800136e:	bf00      	nop
 8001370:	3750      	adds	r7, #80	; 0x50
 8001372:	46bd      	mov	sp, r7
 8001374:	bd80      	pop	{r7, pc}
 8001376:	bf00      	nop
 8001378:	40023800 	.word	0x40023800
 800137c:	40007000 	.word	0x40007000

08001380 <MX_IWDG_Init>:
 * @brief IWDG Initialization Function
 * @param None
 * @retval None
 */
static void MX_IWDG_Init(void)
{
 8001380:	b580      	push	{r7, lr}
 8001382:	af00      	add	r7, sp, #0
	/* USER CODE END IWDG_Init 0 */

	/* USER CODE BEGIN IWDG_Init 1 */

	/* USER CODE END IWDG_Init 1 */
	hiwdg.Instance = IWDG;
 8001384:	4b09      	ldr	r3, [pc, #36]	; (80013ac <MX_IWDG_Init+0x2c>)
 8001386:	4a0a      	ldr	r2, [pc, #40]	; (80013b0 <MX_IWDG_Init+0x30>)
 8001388:	601a      	str	r2, [r3, #0]
	hiwdg.Init.Prescaler = IWDG_PRESCALER_32;
 800138a:	4b08      	ldr	r3, [pc, #32]	; (80013ac <MX_IWDG_Init+0x2c>)
 800138c:	2203      	movs	r2, #3
 800138e:	605a      	str	r2, [r3, #4]
	hiwdg.Init.Reload = 2999;
 8001390:	4b06      	ldr	r3, [pc, #24]	; (80013ac <MX_IWDG_Init+0x2c>)
 8001392:	f640 32b7 	movw	r2, #2999	; 0xbb7
 8001396:	609a      	str	r2, [r3, #8]
	if (HAL_IWDG_Init(&hiwdg) != HAL_OK)
 8001398:	4804      	ldr	r0, [pc, #16]	; (80013ac <MX_IWDG_Init+0x2c>)
 800139a:	f007 f8fa 	bl	8008592 <HAL_IWDG_Init>
 800139e:	4603      	mov	r3, r0
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	d001      	beq.n	80013a8 <MX_IWDG_Init+0x28>
	{
		Error_Handler();
 80013a4:	f000 f958 	bl	8001658 <Error_Handler>
	}
	/* USER CODE BEGIN IWDG_Init 2 */

	/* USER CODE END IWDG_Init 2 */

}
 80013a8:	bf00      	nop
 80013aa:	bd80      	pop	{r7, pc}
 80013ac:	2000017c 	.word	0x2000017c
 80013b0:	40003000 	.word	0x40003000

080013b4 <MX_SPI1_Init>:
 * @brief SPI1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI1_Init(void)
{
 80013b4:	b580      	push	{r7, lr}
 80013b6:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN SPI1_Init 1 */

	/* USER CODE END SPI1_Init 1 */
	/* SPI1 parameter configuration*/
	hspi1.Instance = SPI1;
 80013b8:	4b17      	ldr	r3, [pc, #92]	; (8001418 <MX_SPI1_Init+0x64>)
 80013ba:	4a18      	ldr	r2, [pc, #96]	; (800141c <MX_SPI1_Init+0x68>)
 80013bc:	601a      	str	r2, [r3, #0]
	hspi1.Init.Mode = SPI_MODE_MASTER;
 80013be:	4b16      	ldr	r3, [pc, #88]	; (8001418 <MX_SPI1_Init+0x64>)
 80013c0:	f44f 7282 	mov.w	r2, #260	; 0x104
 80013c4:	605a      	str	r2, [r3, #4]
	hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80013c6:	4b14      	ldr	r3, [pc, #80]	; (8001418 <MX_SPI1_Init+0x64>)
 80013c8:	2200      	movs	r2, #0
 80013ca:	609a      	str	r2, [r3, #8]
	hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80013cc:	4b12      	ldr	r3, [pc, #72]	; (8001418 <MX_SPI1_Init+0x64>)
 80013ce:	2200      	movs	r2, #0
 80013d0:	60da      	str	r2, [r3, #12]
	hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80013d2:	4b11      	ldr	r3, [pc, #68]	; (8001418 <MX_SPI1_Init+0x64>)
 80013d4:	2200      	movs	r2, #0
 80013d6:	611a      	str	r2, [r3, #16]
	hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80013d8:	4b0f      	ldr	r3, [pc, #60]	; (8001418 <MX_SPI1_Init+0x64>)
 80013da:	2200      	movs	r2, #0
 80013dc:	615a      	str	r2, [r3, #20]
	hspi1.Init.NSS = SPI_NSS_SOFT;
 80013de:	4b0e      	ldr	r3, [pc, #56]	; (8001418 <MX_SPI1_Init+0x64>)
 80013e0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80013e4:	619a      	str	r2, [r3, #24]
	hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 80013e6:	4b0c      	ldr	r3, [pc, #48]	; (8001418 <MX_SPI1_Init+0x64>)
 80013e8:	2230      	movs	r2, #48	; 0x30
 80013ea:	61da      	str	r2, [r3, #28]
	hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80013ec:	4b0a      	ldr	r3, [pc, #40]	; (8001418 <MX_SPI1_Init+0x64>)
 80013ee:	2200      	movs	r2, #0
 80013f0:	621a      	str	r2, [r3, #32]
	hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80013f2:	4b09      	ldr	r3, [pc, #36]	; (8001418 <MX_SPI1_Init+0x64>)
 80013f4:	2200      	movs	r2, #0
 80013f6:	625a      	str	r2, [r3, #36]	; 0x24
	hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80013f8:	4b07      	ldr	r3, [pc, #28]	; (8001418 <MX_SPI1_Init+0x64>)
 80013fa:	2200      	movs	r2, #0
 80013fc:	629a      	str	r2, [r3, #40]	; 0x28
	hspi1.Init.CRCPolynomial = 10;
 80013fe:	4b06      	ldr	r3, [pc, #24]	; (8001418 <MX_SPI1_Init+0x64>)
 8001400:	220a      	movs	r2, #10
 8001402:	62da      	str	r2, [r3, #44]	; 0x2c
	if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001404:	4804      	ldr	r0, [pc, #16]	; (8001418 <MX_SPI1_Init+0x64>)
 8001406:	f007 fdaf 	bl	8008f68 <HAL_SPI_Init>
 800140a:	4603      	mov	r3, r0
 800140c:	2b00      	cmp	r3, #0
 800140e:	d001      	beq.n	8001414 <MX_SPI1_Init+0x60>
	{
		Error_Handler();
 8001410:	f000 f922 	bl	8001658 <Error_Handler>
	}
	/* USER CODE BEGIN SPI1_Init 2 */

	/* USER CODE END SPI1_Init 2 */

}
 8001414:	bf00      	nop
 8001416:	bd80      	pop	{r7, pc}
 8001418:	20000188 	.word	0x20000188
 800141c:	40013000 	.word	0x40013000

08001420 <MX_TIM3_Init>:
 * @brief TIM3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM3_Init(void)
{
 8001420:	b580      	push	{r7, lr}
 8001422:	b086      	sub	sp, #24
 8001424:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM3_Init 0 */

	/* USER CODE END TIM3_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001426:	f107 0308 	add.w	r3, r7, #8
 800142a:	2200      	movs	r2, #0
 800142c:	601a      	str	r2, [r3, #0]
 800142e:	605a      	str	r2, [r3, #4]
 8001430:	609a      	str	r2, [r3, #8]
 8001432:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001434:	463b      	mov	r3, r7
 8001436:	2200      	movs	r2, #0
 8001438:	601a      	str	r2, [r3, #0]
 800143a:	605a      	str	r2, [r3, #4]

	/* USER CODE BEGIN TIM3_Init 1 */

	/* USER CODE END TIM3_Init 1 */
	htim3.Instance = TIM3;
 800143c:	4b1d      	ldr	r3, [pc, #116]	; (80014b4 <MX_TIM3_Init+0x94>)
 800143e:	4a1e      	ldr	r2, [pc, #120]	; (80014b8 <MX_TIM3_Init+0x98>)
 8001440:	601a      	str	r2, [r3, #0]
	htim3.Init.Prescaler = 84-1;
 8001442:	4b1c      	ldr	r3, [pc, #112]	; (80014b4 <MX_TIM3_Init+0x94>)
 8001444:	2253      	movs	r2, #83	; 0x53
 8001446:	605a      	str	r2, [r3, #4]
	htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001448:	4b1a      	ldr	r3, [pc, #104]	; (80014b4 <MX_TIM3_Init+0x94>)
 800144a:	2200      	movs	r2, #0
 800144c:	609a      	str	r2, [r3, #8]
	htim3.Init.Period = 500-1;
 800144e:	4b19      	ldr	r3, [pc, #100]	; (80014b4 <MX_TIM3_Init+0x94>)
 8001450:	f240 12f3 	movw	r2, #499	; 0x1f3
 8001454:	60da      	str	r2, [r3, #12]
	htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001456:	4b17      	ldr	r3, [pc, #92]	; (80014b4 <MX_TIM3_Init+0x94>)
 8001458:	2200      	movs	r2, #0
 800145a:	611a      	str	r2, [r3, #16]
	htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800145c:	4b15      	ldr	r3, [pc, #84]	; (80014b4 <MX_TIM3_Init+0x94>)
 800145e:	2200      	movs	r2, #0
 8001460:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001462:	4814      	ldr	r0, [pc, #80]	; (80014b4 <MX_TIM3_Init+0x94>)
 8001464:	f008 f9b2 	bl	80097cc <HAL_TIM_Base_Init>
 8001468:	4603      	mov	r3, r0
 800146a:	2b00      	cmp	r3, #0
 800146c:	d001      	beq.n	8001472 <MX_TIM3_Init+0x52>
	{
		Error_Handler();
 800146e:	f000 f8f3 	bl	8001658 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001472:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001476:	60bb      	str	r3, [r7, #8]
	if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001478:	f107 0308 	add.w	r3, r7, #8
 800147c:	4619      	mov	r1, r3
 800147e:	480d      	ldr	r0, [pc, #52]	; (80014b4 <MX_TIM3_Init+0x94>)
 8001480:	f008 fb8d 	bl	8009b9e <HAL_TIM_ConfigClockSource>
 8001484:	4603      	mov	r3, r0
 8001486:	2b00      	cmp	r3, #0
 8001488:	d001      	beq.n	800148e <MX_TIM3_Init+0x6e>
	{
		Error_Handler();
 800148a:	f000 f8e5 	bl	8001658 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800148e:	2300      	movs	r3, #0
 8001490:	603b      	str	r3, [r7, #0]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001492:	2300      	movs	r3, #0
 8001494:	607b      	str	r3, [r7, #4]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001496:	463b      	mov	r3, r7
 8001498:	4619      	mov	r1, r3
 800149a:	4806      	ldr	r0, [pc, #24]	; (80014b4 <MX_TIM3_Init+0x94>)
 800149c:	f008 fd92 	bl	8009fc4 <HAL_TIMEx_MasterConfigSynchronization>
 80014a0:	4603      	mov	r3, r0
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d001      	beq.n	80014aa <MX_TIM3_Init+0x8a>
	{
		Error_Handler();
 80014a6:	f000 f8d7 	bl	8001658 <Error_Handler>
	}
	/* USER CODE BEGIN TIM3_Init 2 */

	/* USER CODE END TIM3_Init 2 */

}
 80014aa:	bf00      	nop
 80014ac:	3718      	adds	r7, #24
 80014ae:	46bd      	mov	sp, r7
 80014b0:	bd80      	pop	{r7, pc}
 80014b2:	bf00      	nop
 80014b4:	200001e0 	.word	0x200001e0
 80014b8:	40000400 	.word	0x40000400

080014bc <MX_USART2_UART_Init>:
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void)
{
 80014bc:	b580      	push	{r7, lr}
 80014be:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 80014c0:	4b11      	ldr	r3, [pc, #68]	; (8001508 <MX_USART2_UART_Init+0x4c>)
 80014c2:	4a12      	ldr	r2, [pc, #72]	; (800150c <MX_USART2_UART_Init+0x50>)
 80014c4:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 115200;
 80014c6:	4b10      	ldr	r3, [pc, #64]	; (8001508 <MX_USART2_UART_Init+0x4c>)
 80014c8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80014cc:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80014ce:	4b0e      	ldr	r3, [pc, #56]	; (8001508 <MX_USART2_UART_Init+0x4c>)
 80014d0:	2200      	movs	r2, #0
 80014d2:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 80014d4:	4b0c      	ldr	r3, [pc, #48]	; (8001508 <MX_USART2_UART_Init+0x4c>)
 80014d6:	2200      	movs	r2, #0
 80014d8:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 80014da:	4b0b      	ldr	r3, [pc, #44]	; (8001508 <MX_USART2_UART_Init+0x4c>)
 80014dc:	2200      	movs	r2, #0
 80014de:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 80014e0:	4b09      	ldr	r3, [pc, #36]	; (8001508 <MX_USART2_UART_Init+0x4c>)
 80014e2:	220c      	movs	r2, #12
 80014e4:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80014e6:	4b08      	ldr	r3, [pc, #32]	; (8001508 <MX_USART2_UART_Init+0x4c>)
 80014e8:	2200      	movs	r2, #0
 80014ea:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80014ec:	4b06      	ldr	r3, [pc, #24]	; (8001508 <MX_USART2_UART_Init+0x4c>)
 80014ee:	2200      	movs	r2, #0
 80014f0:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart2) != HAL_OK)
 80014f2:	4805      	ldr	r0, [pc, #20]	; (8001508 <MX_USART2_UART_Init+0x4c>)
 80014f4:	f008 fde8 	bl	800a0c8 <HAL_UART_Init>
 80014f8:	4603      	mov	r3, r0
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d001      	beq.n	8001502 <MX_USART2_UART_Init+0x46>
	{
		Error_Handler();
 80014fe:	f000 f8ab 	bl	8001658 <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */

}
 8001502:	bf00      	nop
 8001504:	bd80      	pop	{r7, pc}
 8001506:	bf00      	nop
 8001508:	20000228 	.word	0x20000228
 800150c:	40004400 	.word	0x40004400

08001510 <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 8001510:	b580      	push	{r7, lr}
 8001512:	b08a      	sub	sp, #40	; 0x28
 8001514:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001516:	f107 0314 	add.w	r3, r7, #20
 800151a:	2200      	movs	r2, #0
 800151c:	601a      	str	r2, [r3, #0]
 800151e:	605a      	str	r2, [r3, #4]
 8001520:	609a      	str	r2, [r3, #8]
 8001522:	60da      	str	r2, [r3, #12]
 8001524:	611a      	str	r2, [r3, #16]
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8001526:	2300      	movs	r3, #0
 8001528:	613b      	str	r3, [r7, #16]
 800152a:	4b31      	ldr	r3, [pc, #196]	; (80015f0 <MX_GPIO_Init+0xe0>)
 800152c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800152e:	4a30      	ldr	r2, [pc, #192]	; (80015f0 <MX_GPIO_Init+0xe0>)
 8001530:	f043 0304 	orr.w	r3, r3, #4
 8001534:	6313      	str	r3, [r2, #48]	; 0x30
 8001536:	4b2e      	ldr	r3, [pc, #184]	; (80015f0 <MX_GPIO_Init+0xe0>)
 8001538:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800153a:	f003 0304 	and.w	r3, r3, #4
 800153e:	613b      	str	r3, [r7, #16]
 8001540:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 8001542:	2300      	movs	r3, #0
 8001544:	60fb      	str	r3, [r7, #12]
 8001546:	4b2a      	ldr	r3, [pc, #168]	; (80015f0 <MX_GPIO_Init+0xe0>)
 8001548:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800154a:	4a29      	ldr	r2, [pc, #164]	; (80015f0 <MX_GPIO_Init+0xe0>)
 800154c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001550:	6313      	str	r3, [r2, #48]	; 0x30
 8001552:	4b27      	ldr	r3, [pc, #156]	; (80015f0 <MX_GPIO_Init+0xe0>)
 8001554:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001556:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800155a:	60fb      	str	r3, [r7, #12]
 800155c:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 800155e:	2300      	movs	r3, #0
 8001560:	60bb      	str	r3, [r7, #8]
 8001562:	4b23      	ldr	r3, [pc, #140]	; (80015f0 <MX_GPIO_Init+0xe0>)
 8001564:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001566:	4a22      	ldr	r2, [pc, #136]	; (80015f0 <MX_GPIO_Init+0xe0>)
 8001568:	f043 0301 	orr.w	r3, r3, #1
 800156c:	6313      	str	r3, [r2, #48]	; 0x30
 800156e:	4b20      	ldr	r3, [pc, #128]	; (80015f0 <MX_GPIO_Init+0xe0>)
 8001570:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001572:	f003 0301 	and.w	r3, r3, #1
 8001576:	60bb      	str	r3, [r7, #8]
 8001578:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 800157a:	2300      	movs	r3, #0
 800157c:	607b      	str	r3, [r7, #4]
 800157e:	4b1c      	ldr	r3, [pc, #112]	; (80015f0 <MX_GPIO_Init+0xe0>)
 8001580:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001582:	4a1b      	ldr	r2, [pc, #108]	; (80015f0 <MX_GPIO_Init+0xe0>)
 8001584:	f043 0302 	orr.w	r3, r3, #2
 8001588:	6313      	str	r3, [r2, #48]	; 0x30
 800158a:	4b19      	ldr	r3, [pc, #100]	; (80015f0 <MX_GPIO_Init+0xe0>)
 800158c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800158e:	f003 0302 	and.w	r3, r3, #2
 8001592:	607b      	str	r3, [r7, #4]
 8001594:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOA, SD_CS_Pin|LD2_Pin, GPIO_PIN_RESET);
 8001596:	2200      	movs	r2, #0
 8001598:	2130      	movs	r1, #48	; 0x30
 800159a:	4816      	ldr	r0, [pc, #88]	; (80015f4 <MX_GPIO_Init+0xe4>)
 800159c:	f005 ff9e 	bl	80074dc <HAL_GPIO_WritePin>

	/*Configure GPIO pin : B1_Pin */
	GPIO_InitStruct.Pin = B1_Pin;
 80015a0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80015a4:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80015a6:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80015aa:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015ac:	2300      	movs	r3, #0
 80015ae:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80015b0:	f107 0314 	add.w	r3, r7, #20
 80015b4:	4619      	mov	r1, r3
 80015b6:	4810      	ldr	r0, [pc, #64]	; (80015f8 <MX_GPIO_Init+0xe8>)
 80015b8:	f005 fd28 	bl	800700c <HAL_GPIO_Init>

	/*Configure GPIO pins : SD_CS_Pin LD2_Pin */
	GPIO_InitStruct.Pin = SD_CS_Pin|LD2_Pin;
 80015bc:	2330      	movs	r3, #48	; 0x30
 80015be:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015c0:	2301      	movs	r3, #1
 80015c2:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015c4:	2300      	movs	r3, #0
 80015c6:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015c8:	2300      	movs	r3, #0
 80015ca:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015cc:	f107 0314 	add.w	r3, r7, #20
 80015d0:	4619      	mov	r1, r3
 80015d2:	4808      	ldr	r0, [pc, #32]	; (80015f4 <MX_GPIO_Init+0xe4>)
 80015d4:	f005 fd1a 	bl	800700c <HAL_GPIO_Init>

	/* EXTI interrupt init*/
	HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80015d8:	2200      	movs	r2, #0
 80015da:	2100      	movs	r1, #0
 80015dc:	2028      	movs	r0, #40	; 0x28
 80015de:	f005 fcde 	bl	8006f9e <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80015e2:	2028      	movs	r0, #40	; 0x28
 80015e4:	f005 fcf7 	bl	8006fd6 <HAL_NVIC_EnableIRQ>

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 80015e8:	bf00      	nop
 80015ea:	3728      	adds	r7, #40	; 0x28
 80015ec:	46bd      	mov	sp, r7
 80015ee:	bd80      	pop	{r7, pc}
 80015f0:	40023800 	.word	0x40023800
 80015f4:	40020000 	.word	0x40020000
 80015f8:	40020800 	.word	0x40020800

080015fc <stop_acquisizione>:

/* USER CODE BEGIN 4 */

void stop_acquisizione(void){
 80015fc:	b580      	push	{r7, lr}
 80015fe:	af00      	add	r7, sp, #0

	fresult = f_mount(NULL, "/", 1);
 8001600:	2201      	movs	r2, #1
 8001602:	4910      	ldr	r1, [pc, #64]	; (8001644 <stop_acquisizione+0x48>)
 8001604:	2000      	movs	r0, #0
 8001606:	f00b fb6b 	bl	800cce0 <f_mount>
 800160a:	4603      	mov	r3, r0
 800160c:	461a      	mov	r2, r3
 800160e:	4b0e      	ldr	r3, [pc, #56]	; (8001648 <stop_acquisizione+0x4c>)
 8001610:	701a      	strb	r2, [r3, #0]
	if (fresult == FR_OK)
 8001612:	4b0d      	ldr	r3, [pc, #52]	; (8001648 <stop_acquisizione+0x4c>)
 8001614:	781b      	ldrb	r3, [r3, #0]
 8001616:	2b00      	cmp	r3, #0
 8001618:	d102      	bne.n	8001620 <stop_acquisizione+0x24>
		send_uart ("SD CARD UNMOUNTED successfully...\n");
 800161a:	480c      	ldr	r0, [pc, #48]	; (800164c <stop_acquisizione+0x50>)
 800161c:	f7ff fca4 	bl	8000f68 <send_uart>
	IKS01A3_MOTION_SENSOR_Disable(IKS01A3_LSM6DSO_0, MOTION_ACCELERO);
 8001620:	2102      	movs	r1, #2
 8001622:	2000      	movs	r0, #0
 8001624:	f005 f82a 	bl	800667c <IKS01A3_MOTION_SENSOR_Disable>
	IKS01A3_MOTION_SENSOR_DeInit(IKS01A3_LSM6DSO_0);
 8001628:	2000      	movs	r0, #0
 800162a:	f004 ffbd 	bl	80065a8 <IKS01A3_MOTION_SENSOR_DeInit>
	HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800162e:	2200      	movs	r2, #0
 8001630:	2120      	movs	r1, #32
 8001632:	4807      	ldr	r0, [pc, #28]	; (8001650 <stop_acquisizione+0x54>)
 8001634:	f005 ff52 	bl	80074dc <HAL_GPIO_WritePin>
	stato_data_logger=WAIT_FOR_START;
 8001638:	4b06      	ldr	r3, [pc, #24]	; (8001654 <stop_acquisizione+0x58>)
 800163a:	2200      	movs	r2, #0
 800163c:	701a      	strb	r2, [r3, #0]
}
 800163e:	bf00      	nop
 8001640:	bd80      	pop	{r7, pc}
 8001642:	bf00      	nop
 8001644:	0800e118 	.word	0x0800e118
 8001648:	20016b24 	.word	0x20016b24
 800164c:	0800e1a8 	.word	0x0800e1a8
 8001650:	40020000 	.word	0x40020000
 8001654:	20014aba 	.word	0x20014aba

08001658 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8001658:	b480      	push	{r7}
 800165a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800165c:	b672      	cpsid	i
}
 800165e:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8001660:	e7fe      	b.n	8001660 <Error_Handler+0x8>
	...

08001664 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001664:	b580      	push	{r7, lr}
 8001666:	b082      	sub	sp, #8
 8001668:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800166a:	2300      	movs	r3, #0
 800166c:	607b      	str	r3, [r7, #4]
 800166e:	4b10      	ldr	r3, [pc, #64]	; (80016b0 <HAL_MspInit+0x4c>)
 8001670:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001672:	4a0f      	ldr	r2, [pc, #60]	; (80016b0 <HAL_MspInit+0x4c>)
 8001674:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001678:	6453      	str	r3, [r2, #68]	; 0x44
 800167a:	4b0d      	ldr	r3, [pc, #52]	; (80016b0 <HAL_MspInit+0x4c>)
 800167c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800167e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001682:	607b      	str	r3, [r7, #4]
 8001684:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001686:	2300      	movs	r3, #0
 8001688:	603b      	str	r3, [r7, #0]
 800168a:	4b09      	ldr	r3, [pc, #36]	; (80016b0 <HAL_MspInit+0x4c>)
 800168c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800168e:	4a08      	ldr	r2, [pc, #32]	; (80016b0 <HAL_MspInit+0x4c>)
 8001690:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001694:	6413      	str	r3, [r2, #64]	; 0x40
 8001696:	4b06      	ldr	r3, [pc, #24]	; (80016b0 <HAL_MspInit+0x4c>)
 8001698:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800169a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800169e:	603b      	str	r3, [r7, #0]
 80016a0:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80016a2:	2007      	movs	r0, #7
 80016a4:	f005 fc70 	bl	8006f88 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80016a8:	bf00      	nop
 80016aa:	3708      	adds	r7, #8
 80016ac:	46bd      	mov	sp, r7
 80016ae:	bd80      	pop	{r7, pc}
 80016b0:	40023800 	.word	0x40023800

080016b4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80016b4:	b580      	push	{r7, lr}
 80016b6:	b08a      	sub	sp, #40	; 0x28
 80016b8:	af00      	add	r7, sp, #0
 80016ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016bc:	f107 0314 	add.w	r3, r7, #20
 80016c0:	2200      	movs	r2, #0
 80016c2:	601a      	str	r2, [r3, #0]
 80016c4:	605a      	str	r2, [r3, #4]
 80016c6:	609a      	str	r2, [r3, #8]
 80016c8:	60da      	str	r2, [r3, #12]
 80016ca:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	4a28      	ldr	r2, [pc, #160]	; (8001774 <HAL_SPI_MspInit+0xc0>)
 80016d2:	4293      	cmp	r3, r2
 80016d4:	d149      	bne.n	800176a <HAL_SPI_MspInit+0xb6>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80016d6:	2300      	movs	r3, #0
 80016d8:	613b      	str	r3, [r7, #16]
 80016da:	4b27      	ldr	r3, [pc, #156]	; (8001778 <HAL_SPI_MspInit+0xc4>)
 80016dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016de:	4a26      	ldr	r2, [pc, #152]	; (8001778 <HAL_SPI_MspInit+0xc4>)
 80016e0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80016e4:	6453      	str	r3, [r2, #68]	; 0x44
 80016e6:	4b24      	ldr	r3, [pc, #144]	; (8001778 <HAL_SPI_MspInit+0xc4>)
 80016e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016ea:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80016ee:	613b      	str	r3, [r7, #16]
 80016f0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016f2:	2300      	movs	r3, #0
 80016f4:	60fb      	str	r3, [r7, #12]
 80016f6:	4b20      	ldr	r3, [pc, #128]	; (8001778 <HAL_SPI_MspInit+0xc4>)
 80016f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016fa:	4a1f      	ldr	r2, [pc, #124]	; (8001778 <HAL_SPI_MspInit+0xc4>)
 80016fc:	f043 0301 	orr.w	r3, r3, #1
 8001700:	6313      	str	r3, [r2, #48]	; 0x30
 8001702:	4b1d      	ldr	r3, [pc, #116]	; (8001778 <HAL_SPI_MspInit+0xc4>)
 8001704:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001706:	f003 0301 	and.w	r3, r3, #1
 800170a:	60fb      	str	r3, [r7, #12]
 800170c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800170e:	2300      	movs	r3, #0
 8001710:	60bb      	str	r3, [r7, #8]
 8001712:	4b19      	ldr	r3, [pc, #100]	; (8001778 <HAL_SPI_MspInit+0xc4>)
 8001714:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001716:	4a18      	ldr	r2, [pc, #96]	; (8001778 <HAL_SPI_MspInit+0xc4>)
 8001718:	f043 0302 	orr.w	r3, r3, #2
 800171c:	6313      	str	r3, [r2, #48]	; 0x30
 800171e:	4b16      	ldr	r3, [pc, #88]	; (8001778 <HAL_SPI_MspInit+0xc4>)
 8001720:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001722:	f003 0302 	and.w	r3, r3, #2
 8001726:	60bb      	str	r3, [r7, #8]
 8001728:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    PB3     ------> SPI1_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800172a:	23c0      	movs	r3, #192	; 0xc0
 800172c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800172e:	2302      	movs	r3, #2
 8001730:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001732:	2300      	movs	r3, #0
 8001734:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001736:	2303      	movs	r3, #3
 8001738:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800173a:	2305      	movs	r3, #5
 800173c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800173e:	f107 0314 	add.w	r3, r7, #20
 8001742:	4619      	mov	r1, r3
 8001744:	480d      	ldr	r0, [pc, #52]	; (800177c <HAL_SPI_MspInit+0xc8>)
 8001746:	f005 fc61 	bl	800700c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800174a:	2308      	movs	r3, #8
 800174c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800174e:	2302      	movs	r3, #2
 8001750:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001752:	2300      	movs	r3, #0
 8001754:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001756:	2303      	movs	r3, #3
 8001758:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800175a:	2305      	movs	r3, #5
 800175c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800175e:	f107 0314 	add.w	r3, r7, #20
 8001762:	4619      	mov	r1, r3
 8001764:	4806      	ldr	r0, [pc, #24]	; (8001780 <HAL_SPI_MspInit+0xcc>)
 8001766:	f005 fc51 	bl	800700c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 800176a:	bf00      	nop
 800176c:	3728      	adds	r7, #40	; 0x28
 800176e:	46bd      	mov	sp, r7
 8001770:	bd80      	pop	{r7, pc}
 8001772:	bf00      	nop
 8001774:	40013000 	.word	0x40013000
 8001778:	40023800 	.word	0x40023800
 800177c:	40020000 	.word	0x40020000
 8001780:	40020400 	.word	0x40020400

08001784 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001784:	b580      	push	{r7, lr}
 8001786:	b084      	sub	sp, #16
 8001788:	af00      	add	r7, sp, #0
 800178a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	4a0e      	ldr	r2, [pc, #56]	; (80017cc <HAL_TIM_Base_MspInit+0x48>)
 8001792:	4293      	cmp	r3, r2
 8001794:	d115      	bne.n	80017c2 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001796:	2300      	movs	r3, #0
 8001798:	60fb      	str	r3, [r7, #12]
 800179a:	4b0d      	ldr	r3, [pc, #52]	; (80017d0 <HAL_TIM_Base_MspInit+0x4c>)
 800179c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800179e:	4a0c      	ldr	r2, [pc, #48]	; (80017d0 <HAL_TIM_Base_MspInit+0x4c>)
 80017a0:	f043 0302 	orr.w	r3, r3, #2
 80017a4:	6413      	str	r3, [r2, #64]	; 0x40
 80017a6:	4b0a      	ldr	r3, [pc, #40]	; (80017d0 <HAL_TIM_Base_MspInit+0x4c>)
 80017a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017aa:	f003 0302 	and.w	r3, r3, #2
 80017ae:	60fb      	str	r3, [r7, #12]
 80017b0:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80017b2:	2200      	movs	r2, #0
 80017b4:	2100      	movs	r1, #0
 80017b6:	201d      	movs	r0, #29
 80017b8:	f005 fbf1 	bl	8006f9e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80017bc:	201d      	movs	r0, #29
 80017be:	f005 fc0a 	bl	8006fd6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80017c2:	bf00      	nop
 80017c4:	3710      	adds	r7, #16
 80017c6:	46bd      	mov	sp, r7
 80017c8:	bd80      	pop	{r7, pc}
 80017ca:	bf00      	nop
 80017cc:	40000400 	.word	0x40000400
 80017d0:	40023800 	.word	0x40023800

080017d4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80017d4:	b580      	push	{r7, lr}
 80017d6:	b08a      	sub	sp, #40	; 0x28
 80017d8:	af00      	add	r7, sp, #0
 80017da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017dc:	f107 0314 	add.w	r3, r7, #20
 80017e0:	2200      	movs	r2, #0
 80017e2:	601a      	str	r2, [r3, #0]
 80017e4:	605a      	str	r2, [r3, #4]
 80017e6:	609a      	str	r2, [r3, #8]
 80017e8:	60da      	str	r2, [r3, #12]
 80017ea:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	4a19      	ldr	r2, [pc, #100]	; (8001858 <HAL_UART_MspInit+0x84>)
 80017f2:	4293      	cmp	r3, r2
 80017f4:	d12b      	bne.n	800184e <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80017f6:	2300      	movs	r3, #0
 80017f8:	613b      	str	r3, [r7, #16]
 80017fa:	4b18      	ldr	r3, [pc, #96]	; (800185c <HAL_UART_MspInit+0x88>)
 80017fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017fe:	4a17      	ldr	r2, [pc, #92]	; (800185c <HAL_UART_MspInit+0x88>)
 8001800:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001804:	6413      	str	r3, [r2, #64]	; 0x40
 8001806:	4b15      	ldr	r3, [pc, #84]	; (800185c <HAL_UART_MspInit+0x88>)
 8001808:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800180a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800180e:	613b      	str	r3, [r7, #16]
 8001810:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001812:	2300      	movs	r3, #0
 8001814:	60fb      	str	r3, [r7, #12]
 8001816:	4b11      	ldr	r3, [pc, #68]	; (800185c <HAL_UART_MspInit+0x88>)
 8001818:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800181a:	4a10      	ldr	r2, [pc, #64]	; (800185c <HAL_UART_MspInit+0x88>)
 800181c:	f043 0301 	orr.w	r3, r3, #1
 8001820:	6313      	str	r3, [r2, #48]	; 0x30
 8001822:	4b0e      	ldr	r3, [pc, #56]	; (800185c <HAL_UART_MspInit+0x88>)
 8001824:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001826:	f003 0301 	and.w	r3, r3, #1
 800182a:	60fb      	str	r3, [r7, #12]
 800182c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800182e:	230c      	movs	r3, #12
 8001830:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001832:	2302      	movs	r3, #2
 8001834:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001836:	2300      	movs	r3, #0
 8001838:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800183a:	2300      	movs	r3, #0
 800183c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800183e:	2307      	movs	r3, #7
 8001840:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001842:	f107 0314 	add.w	r3, r7, #20
 8001846:	4619      	mov	r1, r3
 8001848:	4805      	ldr	r0, [pc, #20]	; (8001860 <HAL_UART_MspInit+0x8c>)
 800184a:	f005 fbdf 	bl	800700c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800184e:	bf00      	nop
 8001850:	3728      	adds	r7, #40	; 0x28
 8001852:	46bd      	mov	sp, r7
 8001854:	bd80      	pop	{r7, pc}
 8001856:	bf00      	nop
 8001858:	40004400 	.word	0x40004400
 800185c:	40023800 	.word	0x40023800
 8001860:	40020000 	.word	0x40020000

08001864 <SDTimer_Handler>:

/* External variables --------------------------------------------------------*/
extern TIM_HandleTypeDef htim3;
/* USER CODE BEGIN EV */
void SDTimer_Handler(void)
{
 8001864:	b480      	push	{r7}
 8001866:	af00      	add	r7, sp, #0
  if(Timer1 > 0)
 8001868:	4b0e      	ldr	r3, [pc, #56]	; (80018a4 <SDTimer_Handler+0x40>)
 800186a:	781b      	ldrb	r3, [r3, #0]
 800186c:	b2db      	uxtb	r3, r3
 800186e:	2b00      	cmp	r3, #0
 8001870:	d006      	beq.n	8001880 <SDTimer_Handler+0x1c>
    Timer1--;
 8001872:	4b0c      	ldr	r3, [pc, #48]	; (80018a4 <SDTimer_Handler+0x40>)
 8001874:	781b      	ldrb	r3, [r3, #0]
 8001876:	b2db      	uxtb	r3, r3
 8001878:	3b01      	subs	r3, #1
 800187a:	b2da      	uxtb	r2, r3
 800187c:	4b09      	ldr	r3, [pc, #36]	; (80018a4 <SDTimer_Handler+0x40>)
 800187e:	701a      	strb	r2, [r3, #0]

  if(Timer2 > 0)
 8001880:	4b09      	ldr	r3, [pc, #36]	; (80018a8 <SDTimer_Handler+0x44>)
 8001882:	781b      	ldrb	r3, [r3, #0]
 8001884:	b2db      	uxtb	r3, r3
 8001886:	2b00      	cmp	r3, #0
 8001888:	d006      	beq.n	8001898 <SDTimer_Handler+0x34>
    Timer2--;
 800188a:	4b07      	ldr	r3, [pc, #28]	; (80018a8 <SDTimer_Handler+0x44>)
 800188c:	781b      	ldrb	r3, [r3, #0]
 800188e:	b2db      	uxtb	r3, r3
 8001890:	3b01      	subs	r3, #1
 8001892:	b2da      	uxtb	r2, r3
 8001894:	4b04      	ldr	r3, [pc, #16]	; (80018a8 <SDTimer_Handler+0x44>)
 8001896:	701a      	strb	r2, [r3, #0]
}
 8001898:	bf00      	nop
 800189a:	46bd      	mov	sp, r7
 800189c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a0:	4770      	bx	lr
 80018a2:	bf00      	nop
 80018a4:	20016d2d 	.word	0x20016d2d
 80018a8:	20016d2e 	.word	0x20016d2e

080018ac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80018ac:	b480      	push	{r7}
 80018ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80018b0:	e7fe      	b.n	80018b0 <NMI_Handler+0x4>

080018b2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80018b2:	b480      	push	{r7}
 80018b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80018b6:	e7fe      	b.n	80018b6 <HardFault_Handler+0x4>

080018b8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80018b8:	b480      	push	{r7}
 80018ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80018bc:	e7fe      	b.n	80018bc <MemManage_Handler+0x4>

080018be <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80018be:	b480      	push	{r7}
 80018c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80018c2:	e7fe      	b.n	80018c2 <BusFault_Handler+0x4>

080018c4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80018c4:	b480      	push	{r7}
 80018c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80018c8:	e7fe      	b.n	80018c8 <UsageFault_Handler+0x4>

080018ca <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80018ca:	b480      	push	{r7}
 80018cc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80018ce:	bf00      	nop
 80018d0:	46bd      	mov	sp, r7
 80018d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d6:	4770      	bx	lr

080018d8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80018d8:	b480      	push	{r7}
 80018da:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80018dc:	bf00      	nop
 80018de:	46bd      	mov	sp, r7
 80018e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e4:	4770      	bx	lr

080018e6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80018e6:	b480      	push	{r7}
 80018e8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80018ea:	bf00      	nop
 80018ec:	46bd      	mov	sp, r7
 80018ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f2:	4770      	bx	lr

080018f4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80018f4:	b580      	push	{r7, lr}
 80018f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

	  FatFsCnt++;
 80018f8:	4b0a      	ldr	r3, [pc, #40]	; (8001924 <SysTick_Handler+0x30>)
 80018fa:	781b      	ldrb	r3, [r3, #0]
 80018fc:	b2db      	uxtb	r3, r3
 80018fe:	3301      	adds	r3, #1
 8001900:	b2da      	uxtb	r2, r3
 8001902:	4b08      	ldr	r3, [pc, #32]	; (8001924 <SysTick_Handler+0x30>)
 8001904:	701a      	strb	r2, [r3, #0]
	  if(FatFsCnt >= 10)
 8001906:	4b07      	ldr	r3, [pc, #28]	; (8001924 <SysTick_Handler+0x30>)
 8001908:	781b      	ldrb	r3, [r3, #0]
 800190a:	b2db      	uxtb	r3, r3
 800190c:	2b09      	cmp	r3, #9
 800190e:	d904      	bls.n	800191a <SysTick_Handler+0x26>
	  {
	    FatFsCnt = 0;
 8001910:	4b04      	ldr	r3, [pc, #16]	; (8001924 <SysTick_Handler+0x30>)
 8001912:	2200      	movs	r2, #0
 8001914:	701a      	strb	r2, [r3, #0]
	    SDTimer_Handler();
 8001916:	f7ff ffa5 	bl	8001864 <SDTimer_Handler>
	  }

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800191a:	f005 fa21 	bl	8006d60 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800191e:	bf00      	nop
 8001920:	bd80      	pop	{r7, pc}
 8001922:	bf00      	nop
 8001924:	20016d2c 	.word	0x20016d2c

08001928 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001928:	b580      	push	{r7, lr}
 800192a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 800192c:	480a      	ldr	r0, [pc, #40]	; (8001958 <TIM3_IRQHandler+0x30>)
 800192e:	f008 f82e 	bl	800998e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */
  IKS01A3_MOTION_SENSOR_GetAxes(IKS01A3_LSM6DSO_0, MOTION_ACCELERO, &misure_accelerometro[contatore_campioni++]);
 8001932:	4b0a      	ldr	r3, [pc, #40]	; (800195c <TIM3_IRQHandler+0x34>)
 8001934:	681a      	ldr	r2, [r3, #0]
 8001936:	1c53      	adds	r3, r2, #1
 8001938:	4908      	ldr	r1, [pc, #32]	; (800195c <TIM3_IRQHandler+0x34>)
 800193a:	600b      	str	r3, [r1, #0]
 800193c:	4613      	mov	r3, r2
 800193e:	005b      	lsls	r3, r3, #1
 8001940:	4413      	add	r3, r2
 8001942:	009b      	lsls	r3, r3, #2
 8001944:	4a06      	ldr	r2, [pc, #24]	; (8001960 <TIM3_IRQHandler+0x38>)
 8001946:	4413      	add	r3, r2
 8001948:	461a      	mov	r2, r3
 800194a:	2102      	movs	r1, #2
 800194c:	2000      	movs	r0, #0
 800194e:	f004 fed7 	bl	8006700 <IKS01A3_MOTION_SENSOR_GetAxes>
//  sprintf((char *)buffer, "%ld,%ld,%ld\r\n",misure_accelerometro.x, misure_accelerometro.y, misure_accelerometro.z );
//  fresult = f_write(&fil, buffer, bufsize(buffer), &bw);

  /* USER CODE END TIM3_IRQn 1 */
}
 8001952:	bf00      	nop
 8001954:	bd80      	pop	{r7, pc}
 8001956:	bf00      	nop
 8001958:	200001e0 	.word	0x200001e0
 800195c:	20014a8c 	.word	0x20014a8c
 8001960:	2000026c 	.word	0x2000026c

08001964 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001964:	b580      	push	{r7, lr}
 8001966:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8001968:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800196c:	f005 fdd0 	bl	8007510 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */
  //flag da fare toggle
  //ogni volta che viene premuto il pulsante, viene invertito lo stato
  premuto=!(premuto);
 8001970:	4b08      	ldr	r3, [pc, #32]	; (8001994 <EXTI15_10_IRQHandler+0x30>)
 8001972:	781b      	ldrb	r3, [r3, #0]
 8001974:	2b00      	cmp	r3, #0
 8001976:	bf14      	ite	ne
 8001978:	2301      	movne	r3, #1
 800197a:	2300      	moveq	r3, #0
 800197c:	b2db      	uxtb	r3, r3
 800197e:	f083 0301 	eor.w	r3, r3, #1
 8001982:	b2db      	uxtb	r3, r3
 8001984:	f003 0301 	and.w	r3, r3, #1
 8001988:	b2da      	uxtb	r2, r3
 800198a:	4b02      	ldr	r3, [pc, #8]	; (8001994 <EXTI15_10_IRQHandler+0x30>)
 800198c:	701a      	strb	r2, [r3, #0]

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800198e:	bf00      	nop
 8001990:	bd80      	pop	{r7, pc}
 8001992:	bf00      	nop
 8001994:	20014a94 	.word	0x20014a94

08001998 <BSP_I2C1_Init>:
/**
  * @brief  Initialize I2C HAL
  * @retval BSP status
  */
int32_t BSP_I2C1_Init(void)
{
 8001998:	b580      	push	{r7, lr}
 800199a:	b082      	sub	sp, #8
 800199c:	af00      	add	r7, sp, #0

  int32_t ret = BSP_ERROR_NONE;
 800199e:	2300      	movs	r3, #0
 80019a0:	607b      	str	r3, [r7, #4]

  hi2c1.Instance  = I2C1;
 80019a2:	4b13      	ldr	r3, [pc, #76]	; (80019f0 <BSP_I2C1_Init+0x58>)
 80019a4:	4a13      	ldr	r2, [pc, #76]	; (80019f4 <BSP_I2C1_Init+0x5c>)
 80019a6:	601a      	str	r2, [r3, #0]

  if(I2C1InitCounter++ == 0)
 80019a8:	4b13      	ldr	r3, [pc, #76]	; (80019f8 <BSP_I2C1_Init+0x60>)
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	1c5a      	adds	r2, r3, #1
 80019ae:	4912      	ldr	r1, [pc, #72]	; (80019f8 <BSP_I2C1_Init+0x60>)
 80019b0:	600a      	str	r2, [r1, #0]
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d117      	bne.n	80019e6 <BSP_I2C1_Init+0x4e>
  {
    if (HAL_I2C_GetState(&hi2c1) == HAL_I2C_STATE_RESET)
 80019b6:	480e      	ldr	r0, [pc, #56]	; (80019f0 <BSP_I2C1_Init+0x58>)
 80019b8:	f006 fa76 	bl	8007ea8 <HAL_I2C_GetState>
 80019bc:	4603      	mov	r3, r0
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d111      	bne.n	80019e6 <BSP_I2C1_Init+0x4e>
    {
    #if (USE_HAL_I2C_REGISTER_CALLBACKS == 0U)
      /* Init the I2C Msp */
      I2C1_MspInit(&hi2c1);
 80019c2:	480b      	ldr	r0, [pc, #44]	; (80019f0 <BSP_I2C1_Init+0x58>)
 80019c4:	f000 f8e2 	bl	8001b8c <I2C1_MspInit>
        {
          return BSP_ERROR_MSP_FAILURE;
        }
      }
    #endif
      if(ret == BSP_ERROR_NONE)
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d10b      	bne.n	80019e6 <BSP_I2C1_Init+0x4e>
      {
        /* Init the I2C */
        if(MX_I2C1_Init(&hi2c1) != HAL_OK)
 80019ce:	4808      	ldr	r0, [pc, #32]	; (80019f0 <BSP_I2C1_Init+0x58>)
 80019d0:	f000 f8a8 	bl	8001b24 <MX_I2C1_Init>
 80019d4:	4603      	mov	r3, r0
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d003      	beq.n	80019e2 <BSP_I2C1_Init+0x4a>
        {
          ret = BSP_ERROR_BUS_FAILURE;
 80019da:	f06f 0307 	mvn.w	r3, #7
 80019de:	607b      	str	r3, [r7, #4]
 80019e0:	e001      	b.n	80019e6 <BSP_I2C1_Init+0x4e>
        }
        else
        {
          ret = BSP_ERROR_NONE;
 80019e2:	2300      	movs	r3, #0
 80019e4:	607b      	str	r3, [r7, #4]
        }
      }
    }
  }
  return ret;
 80019e6:	687b      	ldr	r3, [r7, #4]
}
 80019e8:	4618      	mov	r0, r3
 80019ea:	3708      	adds	r7, #8
 80019ec:	46bd      	mov	sp, r7
 80019ee:	bd80      	pop	{r7, pc}
 80019f0:	20016d30 	.word	0x20016d30
 80019f4:	40005400 	.word	0x40005400
 80019f8:	20016d84 	.word	0x20016d84

080019fc <BSP_I2C1_DeInit>:
/**
  * @brief  DeInitialize I2C HAL.
  * @retval BSP status
  */
int32_t BSP_I2C1_DeInit(void)
{
 80019fc:	b580      	push	{r7, lr}
 80019fe:	b082      	sub	sp, #8
 8001a00:	af00      	add	r7, sp, #0
  int32_t ret = BSP_ERROR_NONE;
 8001a02:	2300      	movs	r3, #0
 8001a04:	607b      	str	r3, [r7, #4]

  if (I2C1InitCounter > 0)
 8001a06:	4b0f      	ldr	r3, [pc, #60]	; (8001a44 <BSP_I2C1_DeInit+0x48>)
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d014      	beq.n	8001a38 <BSP_I2C1_DeInit+0x3c>
  {
    if (--I2C1InitCounter == 0)
 8001a0e:	4b0d      	ldr	r3, [pc, #52]	; (8001a44 <BSP_I2C1_DeInit+0x48>)
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	3b01      	subs	r3, #1
 8001a14:	4a0b      	ldr	r2, [pc, #44]	; (8001a44 <BSP_I2C1_DeInit+0x48>)
 8001a16:	6013      	str	r3, [r2, #0]
 8001a18:	4b0a      	ldr	r3, [pc, #40]	; (8001a44 <BSP_I2C1_DeInit+0x48>)
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d10b      	bne.n	8001a38 <BSP_I2C1_DeInit+0x3c>
    {
  #if (USE_HAL_I2C_REGISTER_CALLBACKS == 0U)
      /* DeInit the I2C */
      I2C1_MspDeInit(&hi2c1);
 8001a20:	4809      	ldr	r0, [pc, #36]	; (8001a48 <BSP_I2C1_DeInit+0x4c>)
 8001a22:	f000 f8fd 	bl	8001c20 <I2C1_MspDeInit>
  #endif
      /* DeInit the I2C */
      if (HAL_I2C_DeInit(&hi2c1) != HAL_OK)
 8001a26:	4808      	ldr	r0, [pc, #32]	; (8001a48 <BSP_I2C1_DeInit+0x4c>)
 8001a28:	f005 feda 	bl	80077e0 <HAL_I2C_DeInit>
 8001a2c:	4603      	mov	r3, r0
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d002      	beq.n	8001a38 <BSP_I2C1_DeInit+0x3c>
      {
        ret = BSP_ERROR_BUS_FAILURE;
 8001a32:	f06f 0307 	mvn.w	r3, #7
 8001a36:	607b      	str	r3, [r7, #4]
      }
    }
  }
  return ret;
 8001a38:	687b      	ldr	r3, [r7, #4]
}
 8001a3a:	4618      	mov	r0, r3
 8001a3c:	3708      	adds	r7, #8
 8001a3e:	46bd      	mov	sp, r7
 8001a40:	bd80      	pop	{r7, pc}
 8001a42:	bf00      	nop
 8001a44:	20016d84 	.word	0x20016d84
 8001a48:	20016d30 	.word	0x20016d30

08001a4c <BSP_I2C1_WriteReg>:
  * @param  Length Data Length
  * @retval BSP status
  */

int32_t BSP_I2C1_WriteReg(uint16_t DevAddr, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 8001a4c:	b580      	push	{r7, lr}
 8001a4e:	b08a      	sub	sp, #40	; 0x28
 8001a50:	af04      	add	r7, sp, #16
 8001a52:	60ba      	str	r2, [r7, #8]
 8001a54:	461a      	mov	r2, r3
 8001a56:	4603      	mov	r3, r0
 8001a58:	81fb      	strh	r3, [r7, #14]
 8001a5a:	460b      	mov	r3, r1
 8001a5c:	81bb      	strh	r3, [r7, #12]
 8001a5e:	4613      	mov	r3, r2
 8001a60:	80fb      	strh	r3, [r7, #6]
  int32_t ret = BSP_ERROR_NONE;
 8001a62:	2300      	movs	r3, #0
 8001a64:	617b      	str	r3, [r7, #20]

  if (HAL_I2C_Mem_Write(&hi2c1, DevAddr,Reg, I2C_MEMADD_SIZE_8BIT,pData, Length, BUS_I2C1_POLL_TIMEOUT) != HAL_OK)
 8001a66:	89ba      	ldrh	r2, [r7, #12]
 8001a68:	89f9      	ldrh	r1, [r7, #14]
 8001a6a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001a6e:	9302      	str	r3, [sp, #8]
 8001a70:	88fb      	ldrh	r3, [r7, #6]
 8001a72:	9301      	str	r3, [sp, #4]
 8001a74:	68bb      	ldr	r3, [r7, #8]
 8001a76:	9300      	str	r3, [sp, #0]
 8001a78:	2301      	movs	r3, #1
 8001a7a:	480c      	ldr	r0, [pc, #48]	; (8001aac <BSP_I2C1_WriteReg+0x60>)
 8001a7c:	f005 fef4 	bl	8007868 <HAL_I2C_Mem_Write>
 8001a80:	4603      	mov	r3, r0
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d00c      	beq.n	8001aa0 <BSP_I2C1_WriteReg+0x54>
  {
    if (HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF)
 8001a86:	4809      	ldr	r0, [pc, #36]	; (8001aac <BSP_I2C1_WriteReg+0x60>)
 8001a88:	f006 fa1c 	bl	8007ec4 <HAL_I2C_GetError>
 8001a8c:	4603      	mov	r3, r0
 8001a8e:	2b04      	cmp	r3, #4
 8001a90:	d103      	bne.n	8001a9a <BSP_I2C1_WriteReg+0x4e>
    {
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 8001a92:	f06f 0365 	mvn.w	r3, #101	; 0x65
 8001a96:	617b      	str	r3, [r7, #20]
 8001a98:	e002      	b.n	8001aa0 <BSP_I2C1_WriteReg+0x54>
    }
    else
    {
      ret =  BSP_ERROR_PERIPH_FAILURE;
 8001a9a:	f06f 0303 	mvn.w	r3, #3
 8001a9e:	617b      	str	r3, [r7, #20]
    }
  }
  return ret;
 8001aa0:	697b      	ldr	r3, [r7, #20]
}
 8001aa2:	4618      	mov	r0, r3
 8001aa4:	3718      	adds	r7, #24
 8001aa6:	46bd      	mov	sp, r7
 8001aa8:	bd80      	pop	{r7, pc}
 8001aaa:	bf00      	nop
 8001aac:	20016d30 	.word	0x20016d30

08001ab0 <BSP_I2C1_ReadReg>:
  * @param  pData  Pointer to data buffer to read
  * @param  Length Data Length
  * @retval BSP status
  */
int32_t  BSP_I2C1_ReadReg(uint16_t DevAddr, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 8001ab0:	b580      	push	{r7, lr}
 8001ab2:	b08a      	sub	sp, #40	; 0x28
 8001ab4:	af04      	add	r7, sp, #16
 8001ab6:	60ba      	str	r2, [r7, #8]
 8001ab8:	461a      	mov	r2, r3
 8001aba:	4603      	mov	r3, r0
 8001abc:	81fb      	strh	r3, [r7, #14]
 8001abe:	460b      	mov	r3, r1
 8001ac0:	81bb      	strh	r3, [r7, #12]
 8001ac2:	4613      	mov	r3, r2
 8001ac4:	80fb      	strh	r3, [r7, #6]
  int32_t ret = BSP_ERROR_NONE;
 8001ac6:	2300      	movs	r3, #0
 8001ac8:	617b      	str	r3, [r7, #20]

  if (HAL_I2C_Mem_Read(&hi2c1, DevAddr, Reg, I2C_MEMADD_SIZE_8BIT, pData, Length, BUS_I2C1_POLL_TIMEOUT) != HAL_OK)
 8001aca:	89ba      	ldrh	r2, [r7, #12]
 8001acc:	89f9      	ldrh	r1, [r7, #14]
 8001ace:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001ad2:	9302      	str	r3, [sp, #8]
 8001ad4:	88fb      	ldrh	r3, [r7, #6]
 8001ad6:	9301      	str	r3, [sp, #4]
 8001ad8:	68bb      	ldr	r3, [r7, #8]
 8001ada:	9300      	str	r3, [sp, #0]
 8001adc:	2301      	movs	r3, #1
 8001ade:	480c      	ldr	r0, [pc, #48]	; (8001b10 <BSP_I2C1_ReadReg+0x60>)
 8001ae0:	f005 ffbc 	bl	8007a5c <HAL_I2C_Mem_Read>
 8001ae4:	4603      	mov	r3, r0
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d00c      	beq.n	8001b04 <BSP_I2C1_ReadReg+0x54>
  {
    if (HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF)
 8001aea:	4809      	ldr	r0, [pc, #36]	; (8001b10 <BSP_I2C1_ReadReg+0x60>)
 8001aec:	f006 f9ea 	bl	8007ec4 <HAL_I2C_GetError>
 8001af0:	4603      	mov	r3, r0
 8001af2:	2b04      	cmp	r3, #4
 8001af4:	d103      	bne.n	8001afe <BSP_I2C1_ReadReg+0x4e>
    {
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 8001af6:	f06f 0365 	mvn.w	r3, #101	; 0x65
 8001afa:	617b      	str	r3, [r7, #20]
 8001afc:	e002      	b.n	8001b04 <BSP_I2C1_ReadReg+0x54>
    }
    else
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 8001afe:	f06f 0303 	mvn.w	r3, #3
 8001b02:	617b      	str	r3, [r7, #20]
    }
  }
  return ret;
 8001b04:	697b      	ldr	r3, [r7, #20]
}
 8001b06:	4618      	mov	r0, r3
 8001b08:	3718      	adds	r7, #24
 8001b0a:	46bd      	mov	sp, r7
 8001b0c:	bd80      	pop	{r7, pc}
 8001b0e:	bf00      	nop
 8001b10:	20016d30 	.word	0x20016d30

08001b14 <BSP_GetTick>:

/**
  * @brief  Return system tick in ms
  * @retval Current HAL time base time stamp
  */
int32_t BSP_GetTick(void) {
 8001b14:	b580      	push	{r7, lr}
 8001b16:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8001b18:	f005 f936 	bl	8006d88 <HAL_GetTick>
 8001b1c:	4603      	mov	r3, r0
}
 8001b1e:	4618      	mov	r0, r3
 8001b20:	bd80      	pop	{r7, pc}
	...

08001b24 <MX_I2C1_Init>:

/* I2C1 init function */

__weak HAL_StatusTypeDef MX_I2C1_Init(I2C_HandleTypeDef* hi2c)
{
 8001b24:	b580      	push	{r7, lr}
 8001b26:	b084      	sub	sp, #16
 8001b28:	af00      	add	r7, sp, #0
 8001b2a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8001b2c:	2300      	movs	r3, #0
 8001b2e:	73fb      	strb	r3, [r7, #15]

  hi2c->Instance = I2C1;
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	4a14      	ldr	r2, [pc, #80]	; (8001b84 <MX_I2C1_Init+0x60>)
 8001b34:	601a      	str	r2, [r3, #0]
  hi2c->Init.ClockSpeed = 400000;
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	4a13      	ldr	r2, [pc, #76]	; (8001b88 <MX_I2C1_Init+0x64>)
 8001b3a:	605a      	str	r2, [r3, #4]
  hi2c->Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	2200      	movs	r2, #0
 8001b40:	609a      	str	r2, [r3, #8]
  hi2c->Init.OwnAddress1 = 0;
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	2200      	movs	r2, #0
 8001b46:	60da      	str	r2, [r3, #12]
  hi2c->Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001b4e:	611a      	str	r2, [r3, #16]
  hi2c->Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	2200      	movs	r2, #0
 8001b54:	615a      	str	r2, [r3, #20]
  hi2c->Init.OwnAddress2 = 0;
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	2200      	movs	r2, #0
 8001b5a:	619a      	str	r2, [r3, #24]
  hi2c->Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	2200      	movs	r2, #0
 8001b60:	61da      	str	r2, [r3, #28]
  hi2c->Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	2200      	movs	r2, #0
 8001b66:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(hi2c) != HAL_OK)
 8001b68:	6878      	ldr	r0, [r7, #4]
 8001b6a:	f005 fcf5 	bl	8007558 <HAL_I2C_Init>
 8001b6e:	4603      	mov	r3, r0
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d001      	beq.n	8001b78 <MX_I2C1_Init+0x54>
  {
    ret = HAL_ERROR;
 8001b74:	2301      	movs	r3, #1
 8001b76:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8001b78:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b7a:	4618      	mov	r0, r3
 8001b7c:	3710      	adds	r7, #16
 8001b7e:	46bd      	mov	sp, r7
 8001b80:	bd80      	pop	{r7, pc}
 8001b82:	bf00      	nop
 8001b84:	40005400 	.word	0x40005400
 8001b88:	00061a80 	.word	0x00061a80

08001b8c <I2C1_MspInit>:

static void I2C1_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001b8c:	b580      	push	{r7, lr}
 8001b8e:	b08a      	sub	sp, #40	; 0x28
 8001b90:	af00      	add	r7, sp, #0
 8001b92:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b94:	2300      	movs	r3, #0
 8001b96:	613b      	str	r3, [r7, #16]
 8001b98:	4b1f      	ldr	r3, [pc, #124]	; (8001c18 <I2C1_MspInit+0x8c>)
 8001b9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b9c:	4a1e      	ldr	r2, [pc, #120]	; (8001c18 <I2C1_MspInit+0x8c>)
 8001b9e:	f043 0302 	orr.w	r3, r3, #2
 8001ba2:	6313      	str	r3, [r2, #48]	; 0x30
 8001ba4:	4b1c      	ldr	r3, [pc, #112]	; (8001c18 <I2C1_MspInit+0x8c>)
 8001ba6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ba8:	f003 0302 	and.w	r3, r3, #2
 8001bac:	613b      	str	r3, [r7, #16]
 8001bae:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = BUS_I2C1_SCL_GPIO_PIN;
 8001bb0:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001bb4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001bb6:	2312      	movs	r3, #18
 8001bb8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bba:	2300      	movs	r3, #0
 8001bbc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001bbe:	2303      	movs	r3, #3
 8001bc0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_I2C1_SCL_GPIO_AF;
 8001bc2:	2304      	movs	r3, #4
 8001bc4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(BUS_I2C1_SCL_GPIO_PORT, &GPIO_InitStruct);
 8001bc6:	f107 0314 	add.w	r3, r7, #20
 8001bca:	4619      	mov	r1, r3
 8001bcc:	4813      	ldr	r0, [pc, #76]	; (8001c1c <I2C1_MspInit+0x90>)
 8001bce:	f005 fa1d 	bl	800700c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BUS_I2C1_SDA_GPIO_PIN;
 8001bd2:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001bd6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001bd8:	2312      	movs	r3, #18
 8001bda:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bdc:	2300      	movs	r3, #0
 8001bde:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001be0:	2303      	movs	r3, #3
 8001be2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_I2C1_SDA_GPIO_AF;
 8001be4:	2304      	movs	r3, #4
 8001be6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(BUS_I2C1_SDA_GPIO_PORT, &GPIO_InitStruct);
 8001be8:	f107 0314 	add.w	r3, r7, #20
 8001bec:	4619      	mov	r1, r3
 8001bee:	480b      	ldr	r0, [pc, #44]	; (8001c1c <I2C1_MspInit+0x90>)
 8001bf0:	f005 fa0c 	bl	800700c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001bf4:	2300      	movs	r3, #0
 8001bf6:	60fb      	str	r3, [r7, #12]
 8001bf8:	4b07      	ldr	r3, [pc, #28]	; (8001c18 <I2C1_MspInit+0x8c>)
 8001bfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bfc:	4a06      	ldr	r2, [pc, #24]	; (8001c18 <I2C1_MspInit+0x8c>)
 8001bfe:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001c02:	6413      	str	r3, [r2, #64]	; 0x40
 8001c04:	4b04      	ldr	r3, [pc, #16]	; (8001c18 <I2C1_MspInit+0x8c>)
 8001c06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c08:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001c0c:	60fb      	str	r3, [r7, #12]
 8001c0e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
}
 8001c10:	bf00      	nop
 8001c12:	3728      	adds	r7, #40	; 0x28
 8001c14:	46bd      	mov	sp, r7
 8001c16:	bd80      	pop	{r7, pc}
 8001c18:	40023800 	.word	0x40023800
 8001c1c:	40020400 	.word	0x40020400

08001c20 <I2C1_MspDeInit>:

static void I2C1_MspDeInit(I2C_HandleTypeDef* i2cHandle)
{
 8001c20:	b580      	push	{r7, lr}
 8001c22:	b082      	sub	sp, #8
 8001c24:	af00      	add	r7, sp, #0
 8001c26:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 8001c28:	4b09      	ldr	r3, [pc, #36]	; (8001c50 <I2C1_MspDeInit+0x30>)
 8001c2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c2c:	4a08      	ldr	r2, [pc, #32]	; (8001c50 <I2C1_MspDeInit+0x30>)
 8001c2e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001c32:	6413      	str	r3, [r2, #64]	; 0x40

    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(BUS_I2C1_SCL_GPIO_PORT, BUS_I2C1_SCL_GPIO_PIN);
 8001c34:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001c38:	4806      	ldr	r0, [pc, #24]	; (8001c54 <I2C1_MspDeInit+0x34>)
 8001c3a:	f005 fb6b 	bl	8007314 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(BUS_I2C1_SDA_GPIO_PORT, BUS_I2C1_SDA_GPIO_PIN);
 8001c3e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001c42:	4804      	ldr	r0, [pc, #16]	; (8001c54 <I2C1_MspDeInit+0x34>)
 8001c44:	f005 fb66 	bl	8007314 <HAL_GPIO_DeInit>

  /* USER CODE BEGIN I2C1_MspDeInit 1 */

  /* USER CODE END I2C1_MspDeInit 1 */
}
 8001c48:	bf00      	nop
 8001c4a:	3708      	adds	r7, #8
 8001c4c:	46bd      	mov	sp, r7
 8001c4e:	bd80      	pop	{r7, pc}
 8001c50:	40023800 	.word	0x40023800
 8001c54:	40020400 	.word	0x40020400

08001c58 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001c58:	b580      	push	{r7, lr}
 8001c5a:	b086      	sub	sp, #24
 8001c5c:	af00      	add	r7, sp, #0
 8001c5e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001c60:	4a14      	ldr	r2, [pc, #80]	; (8001cb4 <_sbrk+0x5c>)
 8001c62:	4b15      	ldr	r3, [pc, #84]	; (8001cb8 <_sbrk+0x60>)
 8001c64:	1ad3      	subs	r3, r2, r3
 8001c66:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001c68:	697b      	ldr	r3, [r7, #20]
 8001c6a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001c6c:	4b13      	ldr	r3, [pc, #76]	; (8001cbc <_sbrk+0x64>)
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d102      	bne.n	8001c7a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001c74:	4b11      	ldr	r3, [pc, #68]	; (8001cbc <_sbrk+0x64>)
 8001c76:	4a12      	ldr	r2, [pc, #72]	; (8001cc0 <_sbrk+0x68>)
 8001c78:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001c7a:	4b10      	ldr	r3, [pc, #64]	; (8001cbc <_sbrk+0x64>)
 8001c7c:	681a      	ldr	r2, [r3, #0]
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	4413      	add	r3, r2
 8001c82:	693a      	ldr	r2, [r7, #16]
 8001c84:	429a      	cmp	r2, r3
 8001c86:	d207      	bcs.n	8001c98 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001c88:	f00b fd9a 	bl	800d7c0 <__errno>
 8001c8c:	4603      	mov	r3, r0
 8001c8e:	220c      	movs	r2, #12
 8001c90:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001c92:	f04f 33ff 	mov.w	r3, #4294967295
 8001c96:	e009      	b.n	8001cac <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001c98:	4b08      	ldr	r3, [pc, #32]	; (8001cbc <_sbrk+0x64>)
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001c9e:	4b07      	ldr	r3, [pc, #28]	; (8001cbc <_sbrk+0x64>)
 8001ca0:	681a      	ldr	r2, [r3, #0]
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	4413      	add	r3, r2
 8001ca6:	4a05      	ldr	r2, [pc, #20]	; (8001cbc <_sbrk+0x64>)
 8001ca8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001caa:	68fb      	ldr	r3, [r7, #12]
}
 8001cac:	4618      	mov	r0, r3
 8001cae:	3718      	adds	r7, #24
 8001cb0:	46bd      	mov	sp, r7
 8001cb2:	bd80      	pop	{r7, pc}
 8001cb4:	20018000 	.word	0x20018000
 8001cb8:	00000400 	.word	0x00000400
 8001cbc:	20016d88 	.word	0x20016d88
 8001cc0:	200170d0 	.word	0x200170d0

08001cc4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001cc4:	b480      	push	{r7}
 8001cc6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001cc8:	4b06      	ldr	r3, [pc, #24]	; (8001ce4 <SystemInit+0x20>)
 8001cca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001cce:	4a05      	ldr	r2, [pc, #20]	; (8001ce4 <SystemInit+0x20>)
 8001cd0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001cd4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001cd8:	bf00      	nop
 8001cda:	46bd      	mov	sp, r7
 8001cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce0:	4770      	bx	lr
 8001ce2:	bf00      	nop
 8001ce4:	e000ed00 	.word	0xe000ed00

08001ce8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001ce8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001d20 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001cec:	480d      	ldr	r0, [pc, #52]	; (8001d24 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001cee:	490e      	ldr	r1, [pc, #56]	; (8001d28 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001cf0:	4a0e      	ldr	r2, [pc, #56]	; (8001d2c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001cf2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001cf4:	e002      	b.n	8001cfc <LoopCopyDataInit>

08001cf6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001cf6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001cf8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001cfa:	3304      	adds	r3, #4

08001cfc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001cfc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001cfe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001d00:	d3f9      	bcc.n	8001cf6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001d02:	4a0b      	ldr	r2, [pc, #44]	; (8001d30 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001d04:	4c0b      	ldr	r4, [pc, #44]	; (8001d34 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001d06:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001d08:	e001      	b.n	8001d0e <LoopFillZerobss>

08001d0a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001d0a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001d0c:	3204      	adds	r2, #4

08001d0e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001d0e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001d10:	d3fb      	bcc.n	8001d0a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001d12:	f7ff ffd7 	bl	8001cc4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001d16:	f00b fd59 	bl	800d7cc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001d1a:	f7ff f93d 	bl	8000f98 <main>
  bx  lr    
 8001d1e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001d20:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001d24:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001d28:	2000015c 	.word	0x2000015c
  ldr r2, =_sidata
 8001d2c:	0800e6b0 	.word	0x0800e6b0
  ldr r2, =_sbss
 8001d30:	2000015c 	.word	0x2000015c
  ldr r4, =_ebss
 8001d34:	200170cc 	.word	0x200170cc

08001d38 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001d38:	e7fe      	b.n	8001d38 <ADC_IRQHandler>
	...

08001d3c <LIS2DW12_RegisterBusIO>:
  * @brief  Register Component Bus IO operations
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DW12_RegisterBusIO(LIS2DW12_Object_t *pObj, LIS2DW12_IO_t *pIO)
{
 8001d3c:	b580      	push	{r7, lr}
 8001d3e:	b084      	sub	sp, #16
 8001d40:	af00      	add	r7, sp, #0
 8001d42:	6078      	str	r0, [r7, #4]
 8001d44:	6039      	str	r1, [r7, #0]
  int32_t ret = LIS2DW12_OK;
 8001d46:	2300      	movs	r3, #0
 8001d48:	60fb      	str	r3, [r7, #12]

  if (pObj == NULL)
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d103      	bne.n	8001d58 <LIS2DW12_RegisterBusIO+0x1c>
  {
    ret = LIS2DW12_ERROR;
 8001d50:	f04f 33ff 	mov.w	r3, #4294967295
 8001d54:	60fb      	str	r3, [r7, #12]
 8001d56:	e051      	b.n	8001dfc <LIS2DW12_RegisterBusIO+0xc0>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 8001d58:	683b      	ldr	r3, [r7, #0]
 8001d5a:	681a      	ldr	r2, [r3, #0]
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 8001d60:	683b      	ldr	r3, [r7, #0]
 8001d62:	685a      	ldr	r2, [r3, #4]
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	605a      	str	r2, [r3, #4]
    pObj->IO.BusType   = pIO->BusType;
 8001d68:	683b      	ldr	r3, [r7, #0]
 8001d6a:	689a      	ldr	r2, [r3, #8]
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	609a      	str	r2, [r3, #8]
    pObj->IO.Address   = pIO->Address;
 8001d70:	683b      	ldr	r3, [r7, #0]
 8001d72:	7b1a      	ldrb	r2, [r3, #12]
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	731a      	strb	r2, [r3, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 8001d78:	683b      	ldr	r3, [r7, #0]
 8001d7a:	691a      	ldr	r2, [r3, #16]
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	611a      	str	r2, [r3, #16]
    pObj->IO.ReadReg   = pIO->ReadReg;
 8001d80:	683b      	ldr	r3, [r7, #0]
 8001d82:	695a      	ldr	r2, [r3, #20]
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	615a      	str	r2, [r3, #20]
    pObj->IO.GetTick   = pIO->GetTick;
 8001d88:	683b      	ldr	r3, [r7, #0]
 8001d8a:	699a      	ldr	r2, [r3, #24]
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	619a      	str	r2, [r3, #24]

    pObj->Ctx.read_reg  = ReadRegWrap;
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	4a1d      	ldr	r2, [pc, #116]	; (8001e08 <LIS2DW12_RegisterBusIO+0xcc>)
 8001d94:	625a      	str	r2, [r3, #36]	; 0x24
    pObj->Ctx.write_reg = WriteRegWrap;
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	4a1c      	ldr	r2, [pc, #112]	; (8001e0c <LIS2DW12_RegisterBusIO+0xd0>)
 8001d9a:	621a      	str	r2, [r3, #32]
    pObj->Ctx.mdelay    = pIO->Delay;
 8001d9c:	683b      	ldr	r3, [r7, #0]
 8001d9e:	69da      	ldr	r2, [r3, #28]
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	629a      	str	r2, [r3, #40]	; 0x28
    pObj->Ctx.handle   = pObj;
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	687a      	ldr	r2, [r7, #4]
 8001da8:	62da      	str	r2, [r3, #44]	; 0x2c

    if (pObj->IO.Init == NULL)
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d103      	bne.n	8001dba <LIS2DW12_RegisterBusIO+0x7e>
    {
      ret = LIS2DW12_ERROR;
 8001db2:	f04f 33ff 	mov.w	r3, #4294967295
 8001db6:	60fb      	str	r3, [r7, #12]
 8001db8:	e020      	b.n	8001dfc <LIS2DW12_RegisterBusIO+0xc0>
    }
    else if (pObj->IO.Init() != LIS2DW12_OK)
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	4798      	blx	r3
 8001dc0:	4603      	mov	r3, r0
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d003      	beq.n	8001dce <LIS2DW12_RegisterBusIO+0x92>
    {
      ret = LIS2DW12_ERROR;
 8001dc6:	f04f 33ff 	mov.w	r3, #4294967295
 8001dca:	60fb      	str	r3, [r7, #12]
 8001dcc:	e016      	b.n	8001dfc <LIS2DW12_RegisterBusIO+0xc0>
    }
    else
    {
      if (pObj->IO.BusType == LIS2DW12_SPI_3WIRES_BUS) /* SPI 3-Wires */
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	689b      	ldr	r3, [r3, #8]
 8001dd2:	2b02      	cmp	r3, #2
 8001dd4:	d112      	bne.n	8001dfc <LIS2DW12_RegisterBusIO+0xc0>
      {
        /* Enable the SPI 3-Wires support only the first time */
        if (pObj->is_initialized == 0U)
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d10d      	bne.n	8001dfc <LIS2DW12_RegisterBusIO+0xc0>
        {
          /* Enable SPI 3-Wires on the component */
          uint8_t data = 0x05;
 8001de0:	2305      	movs	r3, #5
 8001de2:	72fb      	strb	r3, [r7, #11]

          if (LIS2DW12_Write_Reg(pObj, LIS2DW12_CTRL2, data) != LIS2DW12_OK)
 8001de4:	7afb      	ldrb	r3, [r7, #11]
 8001de6:	461a      	mov	r2, r3
 8001de8:	2121      	movs	r1, #33	; 0x21
 8001dea:	6878      	ldr	r0, [r7, #4]
 8001dec:	f000 fd87 	bl	80028fe <LIS2DW12_Write_Reg>
 8001df0:	4603      	mov	r3, r0
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d002      	beq.n	8001dfc <LIS2DW12_RegisterBusIO+0xc0>
          {
            ret = LIS2DW12_ERROR;
 8001df6:	f04f 33ff 	mov.w	r3, #4294967295
 8001dfa:	60fb      	str	r3, [r7, #12]
        }
      }
    }
  }

  return ret;
 8001dfc:	68fb      	ldr	r3, [r7, #12]
}
 8001dfe:	4618      	mov	r0, r3
 8001e00:	3710      	adds	r7, #16
 8001e02:	46bd      	mov	sp, r7
 8001e04:	bd80      	pop	{r7, pc}
 8001e06:	bf00      	nop
 8001e08:	08002c91 	.word	0x08002c91
 8001e0c:	08002cc7 	.word	0x08002cc7

08001e10 <LIS2DW12_Init>:
  * @brief  Initialize the LIS2DW12 sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DW12_Init(LIS2DW12_Object_t *pObj)
{
 8001e10:	b580      	push	{r7, lr}
 8001e12:	b082      	sub	sp, #8
 8001e14:	af00      	add	r7, sp, #0
 8001e16:	6078      	str	r0, [r7, #4]
  /* Enable register address automatically incremented during a multiple byte
  access with a serial interface. */
  if (lis2dw12_auto_increment_set(&(pObj->Ctx), PROPERTY_ENABLE) != LIS2DW12_OK)
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	3320      	adds	r3, #32
 8001e1c:	2101      	movs	r1, #1
 8001e1e:	4618      	mov	r0, r3
 8001e20:	f001 fa94 	bl	800334c <lis2dw12_auto_increment_set>
 8001e24:	4603      	mov	r3, r0
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d002      	beq.n	8001e30 <LIS2DW12_Init+0x20>
  {
    return LIS2DW12_ERROR;
 8001e2a:	f04f 33ff 	mov.w	r3, #4294967295
 8001e2e:	e04b      	b.n	8001ec8 <LIS2DW12_Init+0xb8>
  }

  /* Enable BDU */
  if (lis2dw12_block_data_update_set(&(pObj->Ctx), PROPERTY_ENABLE) != LIS2DW12_OK)
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	3320      	adds	r3, #32
 8001e34:	2101      	movs	r1, #1
 8001e36:	4618      	mov	r0, r3
 8001e38:	f001 f9a8 	bl	800318c <lis2dw12_block_data_update_set>
 8001e3c:	4603      	mov	r3, r0
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d002      	beq.n	8001e48 <LIS2DW12_Init+0x38>
  {
    return LIS2DW12_ERROR;
 8001e42:	f04f 33ff 	mov.w	r3, #4294967295
 8001e46:	e03f      	b.n	8001ec8 <LIS2DW12_Init+0xb8>
  }

  /* FIFO mode selection */
  if (lis2dw12_fifo_mode_set(&(pObj->Ctx), LIS2DW12_BYPASS_MODE) != LIS2DW12_OK)
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	3320      	adds	r3, #32
 8001e4c:	2100      	movs	r1, #0
 8001e4e:	4618      	mov	r0, r3
 8001e50:	f001 faa2 	bl	8003398 <lis2dw12_fifo_mode_set>
 8001e54:	4603      	mov	r3, r0
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d002      	beq.n	8001e60 <LIS2DW12_Init+0x50>
  {
    return LIS2DW12_ERROR;
 8001e5a:	f04f 33ff 	mov.w	r3, #4294967295
 8001e5e:	e033      	b.n	8001ec8 <LIS2DW12_Init+0xb8>
  }

  /* Power mode selection */
  if (lis2dw12_power_mode_set(&(pObj->Ctx), LIS2DW12_HIGH_PERFORMANCE) != LIS2DW12_OK)
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	3320      	adds	r3, #32
 8001e64:	2104      	movs	r1, #4
 8001e66:	4618      	mov	r0, r3
 8001e68:	f000 ff78 	bl	8002d5c <lis2dw12_power_mode_set>
 8001e6c:	4603      	mov	r3, r0
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d002      	beq.n	8001e78 <LIS2DW12_Init+0x68>
  {
    return LIS2DW12_ERROR;
 8001e72:	f04f 33ff 	mov.w	r3, #4294967295
 8001e76:	e027      	b.n	8001ec8 <LIS2DW12_Init+0xb8>
  }

  /* Select default output data rate. */
  pObj->acc_odr = 100.0f;
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	4a15      	ldr	r2, [pc, #84]	; (8001ed0 <LIS2DW12_Init+0xc0>)
 8001e7c:	635a      	str	r2, [r3, #52]	; 0x34
  /* Select default operating mode. */
  pObj->acc_operating_mode = LIS2DW12_HIGH_PERFORMANCE_MODE;
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	2200      	movs	r2, #0
 8001e82:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  /* Select default low noise (disabled). */
  pObj->acc_low_noise = LIS2DW12_LOW_NOISE_DISABLE;
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	2200      	movs	r2, #0
 8001e8a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Output data rate selection - power down. */
  if (lis2dw12_data_rate_set(&(pObj->Ctx), LIS2DW12_XL_ODR_OFF) != LIS2DW12_OK)
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	3320      	adds	r3, #32
 8001e92:	2100      	movs	r1, #0
 8001e94:	4618      	mov	r0, r3
 8001e96:	f001 f869 	bl	8002f6c <lis2dw12_data_rate_set>
 8001e9a:	4603      	mov	r3, r0
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d002      	beq.n	8001ea6 <LIS2DW12_Init+0x96>
  {
    return LIS2DW12_ERROR;
 8001ea0:	f04f 33ff 	mov.w	r3, #4294967295
 8001ea4:	e010      	b.n	8001ec8 <LIS2DW12_Init+0xb8>
  }

  /* Full scale selection. */
  if (lis2dw12_full_scale_set(&(pObj->Ctx), LIS2DW12_2g) != LIS2DW12_OK)
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	3320      	adds	r3, #32
 8001eaa:	2100      	movs	r1, #0
 8001eac:	4618      	mov	r0, r3
 8001eae:	f001 f993 	bl	80031d8 <lis2dw12_full_scale_set>
 8001eb2:	4603      	mov	r3, r0
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d002      	beq.n	8001ebe <LIS2DW12_Init+0xae>
  {
    return LIS2DW12_ERROR;
 8001eb8:	f04f 33ff 	mov.w	r3, #4294967295
 8001ebc:	e004      	b.n	8001ec8 <LIS2DW12_Init+0xb8>
  }

  pObj->is_initialized = 1;
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	2201      	movs	r2, #1
 8001ec2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return LIS2DW12_OK;
 8001ec6:	2300      	movs	r3, #0
}
 8001ec8:	4618      	mov	r0, r3
 8001eca:	3708      	adds	r7, #8
 8001ecc:	46bd      	mov	sp, r7
 8001ece:	bd80      	pop	{r7, pc}
 8001ed0:	42c80000 	.word	0x42c80000

08001ed4 <LIS2DW12_DeInit>:
  * @brief  Deinitialize the LIS2DW12 sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DW12_DeInit(LIS2DW12_Object_t *pObj)
{
 8001ed4:	b580      	push	{r7, lr}
 8001ed6:	b082      	sub	sp, #8
 8001ed8:	af00      	add	r7, sp, #0
 8001eda:	6078      	str	r0, [r7, #4]
  /* Disable the component */
  if (LIS2DW12_ACC_Disable(pObj) != LIS2DW12_OK)
 8001edc:	6878      	ldr	r0, [r7, #4]
 8001ede:	f000 f888 	bl	8001ff2 <LIS2DW12_ACC_Disable>
 8001ee2:	4603      	mov	r3, r0
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d002      	beq.n	8001eee <LIS2DW12_DeInit+0x1a>
  {
    return LIS2DW12_ERROR;
 8001ee8:	f04f 33ff 	mov.w	r3, #4294967295
 8001eec:	e010      	b.n	8001f10 <LIS2DW12_DeInit+0x3c>
  }

  /* Reset output data rate. */
  pObj->acc_odr = 0.0f;
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	f04f 0200 	mov.w	r2, #0
 8001ef4:	635a      	str	r2, [r3, #52]	; 0x34
  /* Reset operating mode to default value. */
  pObj->acc_operating_mode = LIS2DW12_HIGH_PERFORMANCE_MODE;
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	2200      	movs	r2, #0
 8001efa:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  /* Reset low noise to default value (disabled). */
  pObj->acc_low_noise = LIS2DW12_LOW_NOISE_DISABLE;
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	2200      	movs	r2, #0
 8001f02:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  pObj->is_initialized = 0;
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	2200      	movs	r2, #0
 8001f0a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return LIS2DW12_OK;
 8001f0e:	2300      	movs	r3, #0
}
 8001f10:	4618      	mov	r0, r3
 8001f12:	3708      	adds	r7, #8
 8001f14:	46bd      	mov	sp, r7
 8001f16:	bd80      	pop	{r7, pc}

08001f18 <LIS2DW12_ReadID>:
  * @param  pObj the device pObj
  * @param  Id the WHO_AM_I value
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DW12_ReadID(LIS2DW12_Object_t *pObj, uint8_t *Id)
{
 8001f18:	b580      	push	{r7, lr}
 8001f1a:	b082      	sub	sp, #8
 8001f1c:	af00      	add	r7, sp, #0
 8001f1e:	6078      	str	r0, [r7, #4]
 8001f20:	6039      	str	r1, [r7, #0]
  if (lis2dw12_device_id_get(&(pObj->Ctx), Id) != LIS2DW12_OK)
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	3320      	adds	r3, #32
 8001f26:	6839      	ldr	r1, [r7, #0]
 8001f28:	4618      	mov	r0, r3
 8001f2a:	f001 f9fe 	bl	800332a <lis2dw12_device_id_get>
 8001f2e:	4603      	mov	r3, r0
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d002      	beq.n	8001f3a <LIS2DW12_ReadID+0x22>
  {
    return LIS2DW12_ERROR;
 8001f34:	f04f 33ff 	mov.w	r3, #4294967295
 8001f38:	e000      	b.n	8001f3c <LIS2DW12_ReadID+0x24>
  }

  return LIS2DW12_OK;
 8001f3a:	2300      	movs	r3, #0
}
 8001f3c:	4618      	mov	r0, r3
 8001f3e:	3708      	adds	r7, #8
 8001f40:	46bd      	mov	sp, r7
 8001f42:	bd80      	pop	{r7, pc}

08001f44 <LIS2DW12_GetCapabilities>:
  * @param  pObj Component object pointer
  * @param  Capabilities pointer to LIS2DW12 sensor capabilities
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DW12_GetCapabilities(LIS2DW12_Object_t *pObj, LIS2DW12_Capabilities_t *Capabilities)
{
 8001f44:	b480      	push	{r7}
 8001f46:	b083      	sub	sp, #12
 8001f48:	af00      	add	r7, sp, #0
 8001f4a:	6078      	str	r0, [r7, #4]
 8001f4c:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  Capabilities->Acc          = 1;
 8001f4e:	683b      	ldr	r3, [r7, #0]
 8001f50:	2201      	movs	r2, #1
 8001f52:	701a      	strb	r2, [r3, #0]
  Capabilities->Gyro         = 0;
 8001f54:	683b      	ldr	r3, [r7, #0]
 8001f56:	2200      	movs	r2, #0
 8001f58:	705a      	strb	r2, [r3, #1]
  Capabilities->Magneto      = 0;
 8001f5a:	683b      	ldr	r3, [r7, #0]
 8001f5c:	2200      	movs	r2, #0
 8001f5e:	709a      	strb	r2, [r3, #2]
  Capabilities->LowPower     = 0;
 8001f60:	683b      	ldr	r3, [r7, #0]
 8001f62:	2200      	movs	r2, #0
 8001f64:	70da      	strb	r2, [r3, #3]
  Capabilities->GyroMaxFS    = 0;
 8001f66:	683b      	ldr	r3, [r7, #0]
 8001f68:	2200      	movs	r2, #0
 8001f6a:	605a      	str	r2, [r3, #4]
  Capabilities->AccMaxFS     = 16;
 8001f6c:	683b      	ldr	r3, [r7, #0]
 8001f6e:	2210      	movs	r2, #16
 8001f70:	609a      	str	r2, [r3, #8]
  Capabilities->MagMaxFS     = 0;
 8001f72:	683b      	ldr	r3, [r7, #0]
 8001f74:	2200      	movs	r2, #0
 8001f76:	60da      	str	r2, [r3, #12]
  Capabilities->GyroMaxOdr   = 0.0f;
 8001f78:	683b      	ldr	r3, [r7, #0]
 8001f7a:	f04f 0200 	mov.w	r2, #0
 8001f7e:	611a      	str	r2, [r3, #16]
  Capabilities->AccMaxOdr    = 1600.0f;
 8001f80:	683b      	ldr	r3, [r7, #0]
 8001f82:	4a06      	ldr	r2, [pc, #24]	; (8001f9c <LIS2DW12_GetCapabilities+0x58>)
 8001f84:	615a      	str	r2, [r3, #20]
  Capabilities->MagMaxOdr    = 0.0f;
 8001f86:	683b      	ldr	r3, [r7, #0]
 8001f88:	f04f 0200 	mov.w	r2, #0
 8001f8c:	619a      	str	r2, [r3, #24]
  return LIS2DW12_OK;
 8001f8e:	2300      	movs	r3, #0
}
 8001f90:	4618      	mov	r0, r3
 8001f92:	370c      	adds	r7, #12
 8001f94:	46bd      	mov	sp, r7
 8001f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f9a:	4770      	bx	lr
 8001f9c:	44c80000 	.word	0x44c80000

08001fa0 <LIS2DW12_ACC_Enable>:
  * @brief  Enable the LIS2DW12 accelerometer sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DW12_ACC_Enable(LIS2DW12_Object_t *pObj)
{
 8001fa0:	b580      	push	{r7, lr}
 8001fa2:	b082      	sub	sp, #8
 8001fa4:	af00      	add	r7, sp, #0
 8001fa6:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->acc_is_enabled == 1U)
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8001fae:	2b01      	cmp	r3, #1
 8001fb0:	d101      	bne.n	8001fb6 <LIS2DW12_ACC_Enable+0x16>
  {
    return LIS2DW12_OK;
 8001fb2:	2300      	movs	r3, #0
 8001fb4:	e019      	b.n	8001fea <LIS2DW12_ACC_Enable+0x4a>
  }

  /* Output data rate selection. */
  if (LIS2DW12_ACC_SetOutputDataRate_When_Enabled(pObj, pObj->acc_odr, pObj->acc_operating_mode,
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	f893 1038 	ldrb.w	r1, [r3, #56]	; 0x38
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001fc8:	461a      	mov	r2, r3
 8001fca:	eeb0 0a67 	vmov.f32	s0, s15
 8001fce:	6878      	ldr	r0, [r7, #4]
 8001fd0:	f000 fcb0 	bl	8002934 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled>
 8001fd4:	4603      	mov	r3, r0
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d002      	beq.n	8001fe0 <LIS2DW12_ACC_Enable+0x40>
                                                  pObj->acc_low_noise) != LIS2DW12_OK)
  {
    return LIS2DW12_ERROR;
 8001fda:	f04f 33ff 	mov.w	r3, #4294967295
 8001fde:	e004      	b.n	8001fea <LIS2DW12_ACC_Enable+0x4a>
  }

  pObj->acc_is_enabled = 1;
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	2201      	movs	r2, #1
 8001fe4:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

  return LIS2DW12_OK;
 8001fe8:	2300      	movs	r3, #0
}
 8001fea:	4618      	mov	r0, r3
 8001fec:	3708      	adds	r7, #8
 8001fee:	46bd      	mov	sp, r7
 8001ff0:	bd80      	pop	{r7, pc}

08001ff2 <LIS2DW12_ACC_Disable>:
  * @brief  Disable the LIS2DW12 accelerometer sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DW12_ACC_Disable(LIS2DW12_Object_t *pObj)
{
 8001ff2:	b580      	push	{r7, lr}
 8001ff4:	b082      	sub	sp, #8
 8001ff6:	af00      	add	r7, sp, #0
 8001ff8:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->acc_is_enabled == 0U)
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8002000:	2b00      	cmp	r3, #0
 8002002:	d101      	bne.n	8002008 <LIS2DW12_ACC_Disable+0x16>
  {
    return LIS2DW12_OK;
 8002004:	2300      	movs	r3, #0
 8002006:	e010      	b.n	800202a <LIS2DW12_ACC_Disable+0x38>
  }

  /* Output data rate selection - power down. */
  if (lis2dw12_data_rate_set(&(pObj->Ctx), LIS2DW12_XL_ODR_OFF) != LIS2DW12_OK)
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	3320      	adds	r3, #32
 800200c:	2100      	movs	r1, #0
 800200e:	4618      	mov	r0, r3
 8002010:	f000 ffac 	bl	8002f6c <lis2dw12_data_rate_set>
 8002014:	4603      	mov	r3, r0
 8002016:	2b00      	cmp	r3, #0
 8002018:	d002      	beq.n	8002020 <LIS2DW12_ACC_Disable+0x2e>
  {
    return LIS2DW12_ERROR;
 800201a:	f04f 33ff 	mov.w	r3, #4294967295
 800201e:	e004      	b.n	800202a <LIS2DW12_ACC_Disable+0x38>
  }

  pObj->acc_is_enabled = 0;
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	2200      	movs	r2, #0
 8002024:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

  return LIS2DW12_OK;
 8002028:	2300      	movs	r3, #0
}
 800202a:	4618      	mov	r0, r3
 800202c:	3708      	adds	r7, #8
 800202e:	46bd      	mov	sp, r7
 8002030:	bd80      	pop	{r7, pc}
	...

08002034 <LIS2DW12_ACC_GetSensitivity>:
  * @param  pObj the device pObj
  * @param  Sensitivity pointer
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DW12_ACC_GetSensitivity(LIS2DW12_Object_t *pObj, float *Sensitivity)
{
 8002034:	b580      	push	{r7, lr}
 8002036:	b084      	sub	sp, #16
 8002038:	af00      	add	r7, sp, #0
 800203a:	6078      	str	r0, [r7, #4]
 800203c:	6039      	str	r1, [r7, #0]
  int32_t ret = LIS2DW12_OK;
 800203e:	2300      	movs	r3, #0
 8002040:	60fb      	str	r3, [r7, #12]
  lis2dw12_fs_t full_scale;
  lis2dw12_mode_t mode;

  /* Read actual full scale selection from sensor. */
  if (lis2dw12_full_scale_get(&(pObj->Ctx), &full_scale) != LIS2DW12_OK)
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	3320      	adds	r3, #32
 8002046:	f107 020b 	add.w	r2, r7, #11
 800204a:	4611      	mov	r1, r2
 800204c:	4618      	mov	r0, r3
 800204e:	f001 f8e9 	bl	8003224 <lis2dw12_full_scale_get>
 8002052:	4603      	mov	r3, r0
 8002054:	2b00      	cmp	r3, #0
 8002056:	d002      	beq.n	800205e <LIS2DW12_ACC_GetSensitivity+0x2a>
  {
    return LIS2DW12_ERROR;
 8002058:	f04f 33ff 	mov.w	r3, #4294967295
 800205c:	e0a0      	b.n	80021a0 <LIS2DW12_ACC_GetSensitivity+0x16c>
  }

  /* Read actual power mode selection from sensor. */
  if (lis2dw12_power_mode_get(&(pObj->Ctx), &mode) != LIS2DW12_OK)
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	3320      	adds	r3, #32
 8002062:	f107 020a 	add.w	r2, r7, #10
 8002066:	4611      	mov	r1, r2
 8002068:	4618      	mov	r0, r3
 800206a:	f000 fec5 	bl	8002df8 <lis2dw12_power_mode_get>
 800206e:	4603      	mov	r3, r0
 8002070:	2b00      	cmp	r3, #0
 8002072:	d002      	beq.n	800207a <LIS2DW12_ACC_GetSensitivity+0x46>
  {
    return LIS2DW12_ERROR;
 8002074:	f04f 33ff 	mov.w	r3, #4294967295
 8002078:	e092      	b.n	80021a0 <LIS2DW12_ACC_GetSensitivity+0x16c>
  }

  switch (mode)
 800207a:	7abb      	ldrb	r3, [r7, #10]
 800207c:	2b1b      	cmp	r3, #27
 800207e:	f200 8087 	bhi.w	8002190 <LIS2DW12_ACC_GetSensitivity+0x15c>
 8002082:	a201      	add	r2, pc, #4	; (adr r2, 8002088 <LIS2DW12_ACC_GetSensitivity+0x54>)
 8002084:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002088:	080020f9 	.word	0x080020f9
 800208c:	08002145 	.word	0x08002145
 8002090:	08002145 	.word	0x08002145
 8002094:	08002145 	.word	0x08002145
 8002098:	08002145 	.word	0x08002145
 800209c:	08002191 	.word	0x08002191
 80020a0:	08002191 	.word	0x08002191
 80020a4:	08002191 	.word	0x08002191
 80020a8:	080020f9 	.word	0x080020f9
 80020ac:	08002145 	.word	0x08002145
 80020b0:	08002145 	.word	0x08002145
 80020b4:	08002145 	.word	0x08002145
 80020b8:	08002191 	.word	0x08002191
 80020bc:	08002191 	.word	0x08002191
 80020c0:	08002191 	.word	0x08002191
 80020c4:	08002191 	.word	0x08002191
 80020c8:	080020f9 	.word	0x080020f9
 80020cc:	08002145 	.word	0x08002145
 80020d0:	08002145 	.word	0x08002145
 80020d4:	08002145 	.word	0x08002145
 80020d8:	08002145 	.word	0x08002145
 80020dc:	08002191 	.word	0x08002191
 80020e0:	08002191 	.word	0x08002191
 80020e4:	08002191 	.word	0x08002191
 80020e8:	080020f9 	.word	0x080020f9
 80020ec:	08002145 	.word	0x08002145
 80020f0:	08002145 	.word	0x08002145
 80020f4:	08002145 	.word	0x08002145
  {
    case LIS2DW12_CONT_LOW_PWR_12bit:
    case LIS2DW12_SINGLE_LOW_PWR_12bit:
    case LIS2DW12_CONT_LOW_PWR_LOW_NOISE_12bit:
    case LIS2DW12_SINGLE_LOW_LOW_NOISE_PWR_12bit:
      switch (full_scale)
 80020f8:	7afb      	ldrb	r3, [r7, #11]
 80020fa:	2b03      	cmp	r3, #3
 80020fc:	d81a      	bhi.n	8002134 <LIS2DW12_ACC_GetSensitivity+0x100>
 80020fe:	a201      	add	r2, pc, #4	; (adr r2, 8002104 <LIS2DW12_ACC_GetSensitivity+0xd0>)
 8002100:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002104:	08002115 	.word	0x08002115
 8002108:	0800211d 	.word	0x0800211d
 800210c:	08002125 	.word	0x08002125
 8002110:	0800212d 	.word	0x0800212d
      {
        case LIS2DW12_2g:
          *Sensitivity = LIS2DW12_ACC_SENSITIVITY_FOR_FS_2G_LOPOW1_MODE;
 8002114:	683b      	ldr	r3, [r7, #0]
 8002116:	4a24      	ldr	r2, [pc, #144]	; (80021a8 <LIS2DW12_ACC_GetSensitivity+0x174>)
 8002118:	601a      	str	r2, [r3, #0]
          break;
 800211a:	e012      	b.n	8002142 <LIS2DW12_ACC_GetSensitivity+0x10e>

        case LIS2DW12_4g:
          *Sensitivity = LIS2DW12_ACC_SENSITIVITY_FOR_FS_4G_LOPOW1_MODE;
 800211c:	683b      	ldr	r3, [r7, #0]
 800211e:	4a23      	ldr	r2, [pc, #140]	; (80021ac <LIS2DW12_ACC_GetSensitivity+0x178>)
 8002120:	601a      	str	r2, [r3, #0]
          break;
 8002122:	e00e      	b.n	8002142 <LIS2DW12_ACC_GetSensitivity+0x10e>

        case LIS2DW12_8g:
          *Sensitivity = LIS2DW12_ACC_SENSITIVITY_FOR_FS_8G_LOPOW1_MODE;
 8002124:	683b      	ldr	r3, [r7, #0]
 8002126:	4a22      	ldr	r2, [pc, #136]	; (80021b0 <LIS2DW12_ACC_GetSensitivity+0x17c>)
 8002128:	601a      	str	r2, [r3, #0]
          break;
 800212a:	e00a      	b.n	8002142 <LIS2DW12_ACC_GetSensitivity+0x10e>

        case LIS2DW12_16g:
          *Sensitivity = LIS2DW12_ACC_SENSITIVITY_FOR_FS_16G_LOPOW1_MODE;
 800212c:	683b      	ldr	r3, [r7, #0]
 800212e:	4a21      	ldr	r2, [pc, #132]	; (80021b4 <LIS2DW12_ACC_GetSensitivity+0x180>)
 8002130:	601a      	str	r2, [r3, #0]
          break;
 8002132:	e006      	b.n	8002142 <LIS2DW12_ACC_GetSensitivity+0x10e>

        default:
          *Sensitivity = -1.0f;
 8002134:	683b      	ldr	r3, [r7, #0]
 8002136:	4a20      	ldr	r2, [pc, #128]	; (80021b8 <LIS2DW12_ACC_GetSensitivity+0x184>)
 8002138:	601a      	str	r2, [r3, #0]
          ret = LIS2DW12_ERROR;
 800213a:	f04f 33ff 	mov.w	r3, #4294967295
 800213e:	60fb      	str	r3, [r7, #12]
          break;
 8002140:	bf00      	nop
      }
      break;
 8002142:	e02c      	b.n	800219e <LIS2DW12_ACC_GetSensitivity+0x16a>
    case LIS2DW12_CONT_LOW_PWR_LOW_NOISE_3:
    case LIS2DW12_CONT_LOW_PWR_LOW_NOISE_2:
    case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_4:
    case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_3:
    case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_2:
      switch (full_scale)
 8002144:	7afb      	ldrb	r3, [r7, #11]
 8002146:	2b03      	cmp	r3, #3
 8002148:	d81a      	bhi.n	8002180 <LIS2DW12_ACC_GetSensitivity+0x14c>
 800214a:	a201      	add	r2, pc, #4	; (adr r2, 8002150 <LIS2DW12_ACC_GetSensitivity+0x11c>)
 800214c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002150:	08002161 	.word	0x08002161
 8002154:	08002169 	.word	0x08002169
 8002158:	08002171 	.word	0x08002171
 800215c:	08002179 	.word	0x08002179
      {
        case LIS2DW12_2g:
          *Sensitivity = LIS2DW12_ACC_SENSITIVITY_FOR_FS_2G_OTHER_MODES;
 8002160:	683b      	ldr	r3, [r7, #0]
 8002162:	4a16      	ldr	r2, [pc, #88]	; (80021bc <LIS2DW12_ACC_GetSensitivity+0x188>)
 8002164:	601a      	str	r2, [r3, #0]
          break;
 8002166:	e012      	b.n	800218e <LIS2DW12_ACC_GetSensitivity+0x15a>

        case LIS2DW12_4g:
          *Sensitivity = LIS2DW12_ACC_SENSITIVITY_FOR_FS_4G_OTHER_MODES;
 8002168:	683b      	ldr	r3, [r7, #0]
 800216a:	4a15      	ldr	r2, [pc, #84]	; (80021c0 <LIS2DW12_ACC_GetSensitivity+0x18c>)
 800216c:	601a      	str	r2, [r3, #0]
          break;
 800216e:	e00e      	b.n	800218e <LIS2DW12_ACC_GetSensitivity+0x15a>

        case LIS2DW12_8g:
          *Sensitivity = LIS2DW12_ACC_SENSITIVITY_FOR_FS_8G_OTHER_MODES;
 8002170:	683b      	ldr	r3, [r7, #0]
 8002172:	4a0d      	ldr	r2, [pc, #52]	; (80021a8 <LIS2DW12_ACC_GetSensitivity+0x174>)
 8002174:	601a      	str	r2, [r3, #0]
          break;
 8002176:	e00a      	b.n	800218e <LIS2DW12_ACC_GetSensitivity+0x15a>

        case LIS2DW12_16g:
          *Sensitivity = LIS2DW12_ACC_SENSITIVITY_FOR_FS_16G_OTHER_MODES;
 8002178:	683b      	ldr	r3, [r7, #0]
 800217a:	4a0c      	ldr	r2, [pc, #48]	; (80021ac <LIS2DW12_ACC_GetSensitivity+0x178>)
 800217c:	601a      	str	r2, [r3, #0]
          break;
 800217e:	e006      	b.n	800218e <LIS2DW12_ACC_GetSensitivity+0x15a>

        default:
          *Sensitivity = -1.0f;
 8002180:	683b      	ldr	r3, [r7, #0]
 8002182:	4a0d      	ldr	r2, [pc, #52]	; (80021b8 <LIS2DW12_ACC_GetSensitivity+0x184>)
 8002184:	601a      	str	r2, [r3, #0]
          ret = LIS2DW12_ERROR;
 8002186:	f04f 33ff 	mov.w	r3, #4294967295
 800218a:	60fb      	str	r3, [r7, #12]
          break;
 800218c:	bf00      	nop
      }
      break;
 800218e:	e006      	b.n	800219e <LIS2DW12_ACC_GetSensitivity+0x16a>

    default:
      *Sensitivity = -1.0f;
 8002190:	683b      	ldr	r3, [r7, #0]
 8002192:	4a09      	ldr	r2, [pc, #36]	; (80021b8 <LIS2DW12_ACC_GetSensitivity+0x184>)
 8002194:	601a      	str	r2, [r3, #0]
      ret = LIS2DW12_ERROR;
 8002196:	f04f 33ff 	mov.w	r3, #4294967295
 800219a:	60fb      	str	r3, [r7, #12]
      break;
 800219c:	bf00      	nop
  }

  return ret;
 800219e:	68fb      	ldr	r3, [r7, #12]
}
 80021a0:	4618      	mov	r0, r3
 80021a2:	3710      	adds	r7, #16
 80021a4:	46bd      	mov	sp, r7
 80021a6:	bd80      	pop	{r7, pc}
 80021a8:	3f79db23 	.word	0x3f79db23
 80021ac:	3ff9db23 	.word	0x3ff9db23
 80021b0:	4079db23 	.word	0x4079db23
 80021b4:	40f9db23 	.word	0x40f9db23
 80021b8:	bf800000 	.word	0xbf800000
 80021bc:	3e79db23 	.word	0x3e79db23
 80021c0:	3ef9db23 	.word	0x3ef9db23

080021c4 <LIS2DW12_ACC_GetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr pointer where the output data rate is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DW12_ACC_GetOutputDataRate(LIS2DW12_Object_t *pObj, float *Odr)
{
 80021c4:	b580      	push	{r7, lr}
 80021c6:	b084      	sub	sp, #16
 80021c8:	af00      	add	r7, sp, #0
 80021ca:	6078      	str	r0, [r7, #4]
 80021cc:	6039      	str	r1, [r7, #0]
  int32_t ret = LIS2DW12_OK;
 80021ce:	2300      	movs	r3, #0
 80021d0:	60fb      	str	r3, [r7, #12]
  lis2dw12_odr_t odr_low_level;
  lis2dw12_mode_t mode;

  /* Get current output data rate. */
  if (lis2dw12_data_rate_get(&(pObj->Ctx), &odr_low_level) != LIS2DW12_OK)
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	3320      	adds	r3, #32
 80021d6:	f107 020b 	add.w	r2, r7, #11
 80021da:	4611      	mov	r1, r2
 80021dc:	4618      	mov	r0, r3
 80021de:	f000 ff0b 	bl	8002ff8 <lis2dw12_data_rate_get>
 80021e2:	4603      	mov	r3, r0
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d002      	beq.n	80021ee <LIS2DW12_ACC_GetOutputDataRate+0x2a>
  {
    return LIS2DW12_ERROR;
 80021e8:	f04f 33ff 	mov.w	r3, #4294967295
 80021ec:	e1d4      	b.n	8002598 <LIS2DW12_ACC_GetOutputDataRate+0x3d4>
  }

  /* Read actual power mode selection from sensor. */
  if (lis2dw12_power_mode_get(&(pObj->Ctx), &mode) != LIS2DW12_OK)
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	3320      	adds	r3, #32
 80021f2:	f107 020a 	add.w	r2, r7, #10
 80021f6:	4611      	mov	r1, r2
 80021f8:	4618      	mov	r0, r3
 80021fa:	f000 fdfd 	bl	8002df8 <lis2dw12_power_mode_get>
 80021fe:	4603      	mov	r3, r0
 8002200:	2b00      	cmp	r3, #0
 8002202:	d002      	beq.n	800220a <LIS2DW12_ACC_GetOutputDataRate+0x46>
  {
    return LIS2DW12_ERROR;
 8002204:	f04f 33ff 	mov.w	r3, #4294967295
 8002208:	e1c6      	b.n	8002598 <LIS2DW12_ACC_GetOutputDataRate+0x3d4>
  }

  switch (odr_low_level)
 800220a:	7afb      	ldrb	r3, [r7, #11]
 800220c:	2b32      	cmp	r3, #50	; 0x32
 800220e:	f200 81bb 	bhi.w	8002588 <LIS2DW12_ACC_GetOutputDataRate+0x3c4>
 8002212:	a201      	add	r2, pc, #4	; (adr r2, 8002218 <LIS2DW12_ACC_GetOutputDataRate+0x54>)
 8002214:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002218:	080022e5 	.word	0x080022e5
 800221c:	080022ef 	.word	0x080022ef
 8002220:	0800238d 	.word	0x0800238d
 8002224:	08002395 	.word	0x08002395
 8002228:	0800239d 	.word	0x0800239d
 800222c:	080023a5 	.word	0x080023a5
 8002230:	080023ad 	.word	0x080023ad
 8002234:	080023b5 	.word	0x080023b5
 8002238:	08002451 	.word	0x08002451
 800223c:	080024ed 	.word	0x080024ed
 8002240:	08002589 	.word	0x08002589
 8002244:	08002589 	.word	0x08002589
 8002248:	08002589 	.word	0x08002589
 800224c:	08002589 	.word	0x08002589
 8002250:	08002589 	.word	0x08002589
 8002254:	08002589 	.word	0x08002589
 8002258:	08002589 	.word	0x08002589
 800225c:	08002589 	.word	0x08002589
 8002260:	080022e5 	.word	0x080022e5
 8002264:	08002589 	.word	0x08002589
 8002268:	08002589 	.word	0x08002589
 800226c:	08002589 	.word	0x08002589
 8002270:	08002589 	.word	0x08002589
 8002274:	08002589 	.word	0x08002589
 8002278:	08002589 	.word	0x08002589
 800227c:	08002589 	.word	0x08002589
 8002280:	08002589 	.word	0x08002589
 8002284:	08002589 	.word	0x08002589
 8002288:	08002589 	.word	0x08002589
 800228c:	08002589 	.word	0x08002589
 8002290:	08002589 	.word	0x08002589
 8002294:	08002589 	.word	0x08002589
 8002298:	08002589 	.word	0x08002589
 800229c:	08002589 	.word	0x08002589
 80022a0:	08002589 	.word	0x08002589
 80022a4:	08002589 	.word	0x08002589
 80022a8:	08002589 	.word	0x08002589
 80022ac:	08002589 	.word	0x08002589
 80022b0:	08002589 	.word	0x08002589
 80022b4:	08002589 	.word	0x08002589
 80022b8:	08002589 	.word	0x08002589
 80022bc:	08002589 	.word	0x08002589
 80022c0:	08002589 	.word	0x08002589
 80022c4:	08002589 	.word	0x08002589
 80022c8:	08002589 	.word	0x08002589
 80022cc:	08002589 	.word	0x08002589
 80022d0:	08002589 	.word	0x08002589
 80022d4:	08002589 	.word	0x08002589
 80022d8:	08002589 	.word	0x08002589
 80022dc:	08002589 	.word	0x08002589
 80022e0:	080022e5 	.word	0x080022e5
  {
    case LIS2DW12_XL_ODR_OFF:
    case LIS2DW12_XL_SET_SW_TRIG:
    case LIS2DW12_XL_SET_PIN_TRIG:
      *Odr = 0.0f;
 80022e4:	683b      	ldr	r3, [r7, #0]
 80022e6:	f04f 0200 	mov.w	r2, #0
 80022ea:	601a      	str	r2, [r3, #0]
      break;
 80022ec:	e153      	b.n	8002596 <LIS2DW12_ACC_GetOutputDataRate+0x3d2>

    case LIS2DW12_XL_ODR_1Hz6_LP_ONLY:
      switch (mode)
 80022ee:	7abb      	ldrb	r3, [r7, #10]
 80022f0:	2b1b      	cmp	r3, #27
 80022f2:	d843      	bhi.n	800237c <LIS2DW12_ACC_GetOutputDataRate+0x1b8>
 80022f4:	a201      	add	r2, pc, #4	; (adr r2, 80022fc <LIS2DW12_ACC_GetOutputDataRate+0x138>)
 80022f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80022fa:	bf00      	nop
 80022fc:	08002375 	.word	0x08002375
 8002300:	08002375 	.word	0x08002375
 8002304:	08002375 	.word	0x08002375
 8002308:	08002375 	.word	0x08002375
 800230c:	0800236d 	.word	0x0800236d
 8002310:	0800237d 	.word	0x0800237d
 8002314:	0800237d 	.word	0x0800237d
 8002318:	0800237d 	.word	0x0800237d
 800231c:	08002375 	.word	0x08002375
 8002320:	08002375 	.word	0x08002375
 8002324:	08002375 	.word	0x08002375
 8002328:	08002375 	.word	0x08002375
 800232c:	0800237d 	.word	0x0800237d
 8002330:	0800237d 	.word	0x0800237d
 8002334:	0800237d 	.word	0x0800237d
 8002338:	0800237d 	.word	0x0800237d
 800233c:	08002375 	.word	0x08002375
 8002340:	08002375 	.word	0x08002375
 8002344:	08002375 	.word	0x08002375
 8002348:	08002375 	.word	0x08002375
 800234c:	0800236d 	.word	0x0800236d
 8002350:	0800237d 	.word	0x0800237d
 8002354:	0800237d 	.word	0x0800237d
 8002358:	0800237d 	.word	0x0800237d
 800235c:	08002375 	.word	0x08002375
 8002360:	08002375 	.word	0x08002375
 8002364:	08002375 	.word	0x08002375
 8002368:	08002375 	.word	0x08002375
      {
        case LIS2DW12_HIGH_PERFORMANCE:
        case LIS2DW12_HIGH_PERFORMANCE_LOW_NOISE:
          *Odr = 12.5f;
 800236c:	683b      	ldr	r3, [r7, #0]
 800236e:	4a8c      	ldr	r2, [pc, #560]	; (80025a0 <LIS2DW12_ACC_GetOutputDataRate+0x3dc>)
 8002370:	601a      	str	r2, [r3, #0]
          break;
 8002372:	e00a      	b.n	800238a <LIS2DW12_ACC_GetOutputDataRate+0x1c6>
        case LIS2DW12_CONT_LOW_PWR_LOW_NOISE_12bit:
        case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_4:
        case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_3:
        case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_2:
        case LIS2DW12_SINGLE_LOW_LOW_NOISE_PWR_12bit:
          *Odr = 1.6f;
 8002374:	683b      	ldr	r3, [r7, #0]
 8002376:	4a8b      	ldr	r2, [pc, #556]	; (80025a4 <LIS2DW12_ACC_GetOutputDataRate+0x3e0>)
 8002378:	601a      	str	r2, [r3, #0]
          break;
 800237a:	e006      	b.n	800238a <LIS2DW12_ACC_GetOutputDataRate+0x1c6>

        default:
          *Odr = -1.0f;
 800237c:	683b      	ldr	r3, [r7, #0]
 800237e:	4a8a      	ldr	r2, [pc, #552]	; (80025a8 <LIS2DW12_ACC_GetOutputDataRate+0x3e4>)
 8002380:	601a      	str	r2, [r3, #0]
          ret = LIS2DW12_ERROR;
 8002382:	f04f 33ff 	mov.w	r3, #4294967295
 8002386:	60fb      	str	r3, [r7, #12]
          break;
 8002388:	bf00      	nop
      }
      break;
 800238a:	e104      	b.n	8002596 <LIS2DW12_ACC_GetOutputDataRate+0x3d2>

    case LIS2DW12_XL_ODR_12Hz5:
      *Odr = 12.5f;
 800238c:	683b      	ldr	r3, [r7, #0]
 800238e:	4a84      	ldr	r2, [pc, #528]	; (80025a0 <LIS2DW12_ACC_GetOutputDataRate+0x3dc>)
 8002390:	601a      	str	r2, [r3, #0]
      break;
 8002392:	e100      	b.n	8002596 <LIS2DW12_ACC_GetOutputDataRate+0x3d2>

    case LIS2DW12_XL_ODR_25Hz:
      *Odr = 25.0f;
 8002394:	683b      	ldr	r3, [r7, #0]
 8002396:	4a85      	ldr	r2, [pc, #532]	; (80025ac <LIS2DW12_ACC_GetOutputDataRate+0x3e8>)
 8002398:	601a      	str	r2, [r3, #0]
      break;
 800239a:	e0fc      	b.n	8002596 <LIS2DW12_ACC_GetOutputDataRate+0x3d2>

    case LIS2DW12_XL_ODR_50Hz:
      *Odr = 50.0f;
 800239c:	683b      	ldr	r3, [r7, #0]
 800239e:	4a84      	ldr	r2, [pc, #528]	; (80025b0 <LIS2DW12_ACC_GetOutputDataRate+0x3ec>)
 80023a0:	601a      	str	r2, [r3, #0]
      break;
 80023a2:	e0f8      	b.n	8002596 <LIS2DW12_ACC_GetOutputDataRate+0x3d2>

    case LIS2DW12_XL_ODR_100Hz:
      *Odr = 100.0f;
 80023a4:	683b      	ldr	r3, [r7, #0]
 80023a6:	4a83      	ldr	r2, [pc, #524]	; (80025b4 <LIS2DW12_ACC_GetOutputDataRate+0x3f0>)
 80023a8:	601a      	str	r2, [r3, #0]
      break;
 80023aa:	e0f4      	b.n	8002596 <LIS2DW12_ACC_GetOutputDataRate+0x3d2>

    case LIS2DW12_XL_ODR_200Hz:
      *Odr = 200.0f;
 80023ac:	683b      	ldr	r3, [r7, #0]
 80023ae:	4a82      	ldr	r2, [pc, #520]	; (80025b8 <LIS2DW12_ACC_GetOutputDataRate+0x3f4>)
 80023b0:	601a      	str	r2, [r3, #0]
      break;
 80023b2:	e0f0      	b.n	8002596 <LIS2DW12_ACC_GetOutputDataRate+0x3d2>

    case LIS2DW12_XL_ODR_400Hz:
      switch (mode)
 80023b4:	7abb      	ldrb	r3, [r7, #10]
 80023b6:	2b1b      	cmp	r3, #27
 80023b8:	d842      	bhi.n	8002440 <LIS2DW12_ACC_GetOutputDataRate+0x27c>
 80023ba:	a201      	add	r2, pc, #4	; (adr r2, 80023c0 <LIS2DW12_ACC_GetOutputDataRate+0x1fc>)
 80023bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80023c0:	08002439 	.word	0x08002439
 80023c4:	08002439 	.word	0x08002439
 80023c8:	08002439 	.word	0x08002439
 80023cc:	08002439 	.word	0x08002439
 80023d0:	08002431 	.word	0x08002431
 80023d4:	08002441 	.word	0x08002441
 80023d8:	08002441 	.word	0x08002441
 80023dc:	08002441 	.word	0x08002441
 80023e0:	08002439 	.word	0x08002439
 80023e4:	08002439 	.word	0x08002439
 80023e8:	08002439 	.word	0x08002439
 80023ec:	08002439 	.word	0x08002439
 80023f0:	08002441 	.word	0x08002441
 80023f4:	08002441 	.word	0x08002441
 80023f8:	08002441 	.word	0x08002441
 80023fc:	08002441 	.word	0x08002441
 8002400:	08002439 	.word	0x08002439
 8002404:	08002439 	.word	0x08002439
 8002408:	08002439 	.word	0x08002439
 800240c:	08002439 	.word	0x08002439
 8002410:	08002431 	.word	0x08002431
 8002414:	08002441 	.word	0x08002441
 8002418:	08002441 	.word	0x08002441
 800241c:	08002441 	.word	0x08002441
 8002420:	08002439 	.word	0x08002439
 8002424:	08002439 	.word	0x08002439
 8002428:	08002439 	.word	0x08002439
 800242c:	08002439 	.word	0x08002439
      {
        case LIS2DW12_HIGH_PERFORMANCE:
        case LIS2DW12_HIGH_PERFORMANCE_LOW_NOISE:
          *Odr = 400.0f;
 8002430:	683b      	ldr	r3, [r7, #0]
 8002432:	4a62      	ldr	r2, [pc, #392]	; (80025bc <LIS2DW12_ACC_GetOutputDataRate+0x3f8>)
 8002434:	601a      	str	r2, [r3, #0]
          break;
 8002436:	e00a      	b.n	800244e <LIS2DW12_ACC_GetOutputDataRate+0x28a>
        case LIS2DW12_CONT_LOW_PWR_LOW_NOISE_12bit:
        case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_4:
        case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_3:
        case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_2:
        case LIS2DW12_SINGLE_LOW_LOW_NOISE_PWR_12bit:
          *Odr = 200.0f;
 8002438:	683b      	ldr	r3, [r7, #0]
 800243a:	4a5f      	ldr	r2, [pc, #380]	; (80025b8 <LIS2DW12_ACC_GetOutputDataRate+0x3f4>)
 800243c:	601a      	str	r2, [r3, #0]
          break;
 800243e:	e006      	b.n	800244e <LIS2DW12_ACC_GetOutputDataRate+0x28a>

        default:
          *Odr = -1.0f;
 8002440:	683b      	ldr	r3, [r7, #0]
 8002442:	4a59      	ldr	r2, [pc, #356]	; (80025a8 <LIS2DW12_ACC_GetOutputDataRate+0x3e4>)
 8002444:	601a      	str	r2, [r3, #0]
          ret = LIS2DW12_ERROR;
 8002446:	f04f 33ff 	mov.w	r3, #4294967295
 800244a:	60fb      	str	r3, [r7, #12]
          break;
 800244c:	bf00      	nop
      }
      break;
 800244e:	e0a2      	b.n	8002596 <LIS2DW12_ACC_GetOutputDataRate+0x3d2>

    case LIS2DW12_XL_ODR_800Hz:
      switch (mode)
 8002450:	7abb      	ldrb	r3, [r7, #10]
 8002452:	2b1b      	cmp	r3, #27
 8002454:	d842      	bhi.n	80024dc <LIS2DW12_ACC_GetOutputDataRate+0x318>
 8002456:	a201      	add	r2, pc, #4	; (adr r2, 800245c <LIS2DW12_ACC_GetOutputDataRate+0x298>)
 8002458:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800245c:	080024d5 	.word	0x080024d5
 8002460:	080024d5 	.word	0x080024d5
 8002464:	080024d5 	.word	0x080024d5
 8002468:	080024d5 	.word	0x080024d5
 800246c:	080024cd 	.word	0x080024cd
 8002470:	080024dd 	.word	0x080024dd
 8002474:	080024dd 	.word	0x080024dd
 8002478:	080024dd 	.word	0x080024dd
 800247c:	080024d5 	.word	0x080024d5
 8002480:	080024d5 	.word	0x080024d5
 8002484:	080024d5 	.word	0x080024d5
 8002488:	080024d5 	.word	0x080024d5
 800248c:	080024dd 	.word	0x080024dd
 8002490:	080024dd 	.word	0x080024dd
 8002494:	080024dd 	.word	0x080024dd
 8002498:	080024dd 	.word	0x080024dd
 800249c:	080024d5 	.word	0x080024d5
 80024a0:	080024d5 	.word	0x080024d5
 80024a4:	080024d5 	.word	0x080024d5
 80024a8:	080024d5 	.word	0x080024d5
 80024ac:	080024cd 	.word	0x080024cd
 80024b0:	080024dd 	.word	0x080024dd
 80024b4:	080024dd 	.word	0x080024dd
 80024b8:	080024dd 	.word	0x080024dd
 80024bc:	080024d5 	.word	0x080024d5
 80024c0:	080024d5 	.word	0x080024d5
 80024c4:	080024d5 	.word	0x080024d5
 80024c8:	080024d5 	.word	0x080024d5
      {
        case LIS2DW12_HIGH_PERFORMANCE:
        case LIS2DW12_HIGH_PERFORMANCE_LOW_NOISE:
          *Odr = 800.0f;
 80024cc:	683b      	ldr	r3, [r7, #0]
 80024ce:	4a3c      	ldr	r2, [pc, #240]	; (80025c0 <LIS2DW12_ACC_GetOutputDataRate+0x3fc>)
 80024d0:	601a      	str	r2, [r3, #0]
          break;
 80024d2:	e00a      	b.n	80024ea <LIS2DW12_ACC_GetOutputDataRate+0x326>
        case LIS2DW12_CONT_LOW_PWR_LOW_NOISE_12bit:
        case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_4:
        case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_3:
        case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_2:
        case LIS2DW12_SINGLE_LOW_LOW_NOISE_PWR_12bit:
          *Odr = 200.0f;
 80024d4:	683b      	ldr	r3, [r7, #0]
 80024d6:	4a38      	ldr	r2, [pc, #224]	; (80025b8 <LIS2DW12_ACC_GetOutputDataRate+0x3f4>)
 80024d8:	601a      	str	r2, [r3, #0]
          break;
 80024da:	e006      	b.n	80024ea <LIS2DW12_ACC_GetOutputDataRate+0x326>

        default:
          *Odr = -1.0f;
 80024dc:	683b      	ldr	r3, [r7, #0]
 80024de:	4a32      	ldr	r2, [pc, #200]	; (80025a8 <LIS2DW12_ACC_GetOutputDataRate+0x3e4>)
 80024e0:	601a      	str	r2, [r3, #0]
          ret = LIS2DW12_ERROR;
 80024e2:	f04f 33ff 	mov.w	r3, #4294967295
 80024e6:	60fb      	str	r3, [r7, #12]
          break;
 80024e8:	bf00      	nop
      }
      break;
 80024ea:	e054      	b.n	8002596 <LIS2DW12_ACC_GetOutputDataRate+0x3d2>

    case LIS2DW12_XL_ODR_1k6Hz:
      switch (mode)
 80024ec:	7abb      	ldrb	r3, [r7, #10]
 80024ee:	2b1b      	cmp	r3, #27
 80024f0:	d842      	bhi.n	8002578 <LIS2DW12_ACC_GetOutputDataRate+0x3b4>
 80024f2:	a201      	add	r2, pc, #4	; (adr r2, 80024f8 <LIS2DW12_ACC_GetOutputDataRate+0x334>)
 80024f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80024f8:	08002571 	.word	0x08002571
 80024fc:	08002571 	.word	0x08002571
 8002500:	08002571 	.word	0x08002571
 8002504:	08002571 	.word	0x08002571
 8002508:	08002569 	.word	0x08002569
 800250c:	08002579 	.word	0x08002579
 8002510:	08002579 	.word	0x08002579
 8002514:	08002579 	.word	0x08002579
 8002518:	08002571 	.word	0x08002571
 800251c:	08002571 	.word	0x08002571
 8002520:	08002571 	.word	0x08002571
 8002524:	08002571 	.word	0x08002571
 8002528:	08002579 	.word	0x08002579
 800252c:	08002579 	.word	0x08002579
 8002530:	08002579 	.word	0x08002579
 8002534:	08002579 	.word	0x08002579
 8002538:	08002571 	.word	0x08002571
 800253c:	08002571 	.word	0x08002571
 8002540:	08002571 	.word	0x08002571
 8002544:	08002571 	.word	0x08002571
 8002548:	08002569 	.word	0x08002569
 800254c:	08002579 	.word	0x08002579
 8002550:	08002579 	.word	0x08002579
 8002554:	08002579 	.word	0x08002579
 8002558:	08002571 	.word	0x08002571
 800255c:	08002571 	.word	0x08002571
 8002560:	08002571 	.word	0x08002571
 8002564:	08002571 	.word	0x08002571
      {
        case LIS2DW12_HIGH_PERFORMANCE:
        case LIS2DW12_HIGH_PERFORMANCE_LOW_NOISE:
          *Odr = 1600.0f;
 8002568:	683b      	ldr	r3, [r7, #0]
 800256a:	4a16      	ldr	r2, [pc, #88]	; (80025c4 <LIS2DW12_ACC_GetOutputDataRate+0x400>)
 800256c:	601a      	str	r2, [r3, #0]
          break;
 800256e:	e00a      	b.n	8002586 <LIS2DW12_ACC_GetOutputDataRate+0x3c2>
        case LIS2DW12_CONT_LOW_PWR_LOW_NOISE_12bit:
        case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_4:
        case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_3:
        case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_2:
        case LIS2DW12_SINGLE_LOW_LOW_NOISE_PWR_12bit:
          *Odr = 200.0f;
 8002570:	683b      	ldr	r3, [r7, #0]
 8002572:	4a11      	ldr	r2, [pc, #68]	; (80025b8 <LIS2DW12_ACC_GetOutputDataRate+0x3f4>)
 8002574:	601a      	str	r2, [r3, #0]
          break;
 8002576:	e006      	b.n	8002586 <LIS2DW12_ACC_GetOutputDataRate+0x3c2>

        default:
          *Odr = -1.0f;
 8002578:	683b      	ldr	r3, [r7, #0]
 800257a:	4a0b      	ldr	r2, [pc, #44]	; (80025a8 <LIS2DW12_ACC_GetOutputDataRate+0x3e4>)
 800257c:	601a      	str	r2, [r3, #0]
          ret = LIS2DW12_ERROR;
 800257e:	f04f 33ff 	mov.w	r3, #4294967295
 8002582:	60fb      	str	r3, [r7, #12]
          break;
 8002584:	bf00      	nop
      }
      break;
 8002586:	e006      	b.n	8002596 <LIS2DW12_ACC_GetOutputDataRate+0x3d2>

    default:
      *Odr = -1.0f;
 8002588:	683b      	ldr	r3, [r7, #0]
 800258a:	4a07      	ldr	r2, [pc, #28]	; (80025a8 <LIS2DW12_ACC_GetOutputDataRate+0x3e4>)
 800258c:	601a      	str	r2, [r3, #0]
      ret = LIS2DW12_ERROR;
 800258e:	f04f 33ff 	mov.w	r3, #4294967295
 8002592:	60fb      	str	r3, [r7, #12]
      break;
 8002594:	bf00      	nop
  }

  return ret;
 8002596:	68fb      	ldr	r3, [r7, #12]
}
 8002598:	4618      	mov	r0, r3
 800259a:	3710      	adds	r7, #16
 800259c:	46bd      	mov	sp, r7
 800259e:	bd80      	pop	{r7, pc}
 80025a0:	41480000 	.word	0x41480000
 80025a4:	3fcccccd 	.word	0x3fcccccd
 80025a8:	bf800000 	.word	0xbf800000
 80025ac:	41c80000 	.word	0x41c80000
 80025b0:	42480000 	.word	0x42480000
 80025b4:	42c80000 	.word	0x42c80000
 80025b8:	43480000 	.word	0x43480000
 80025bc:	43c80000 	.word	0x43c80000
 80025c0:	44480000 	.word	0x44480000
 80025c4:	44c80000 	.word	0x44c80000

080025c8 <LIS2DW12_ACC_SetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DW12_ACC_SetOutputDataRate(LIS2DW12_Object_t *pObj, float Odr)
{
 80025c8:	b580      	push	{r7, lr}
 80025ca:	b082      	sub	sp, #8
 80025cc:	af00      	add	r7, sp, #0
 80025ce:	6078      	str	r0, [r7, #4]
 80025d0:	ed87 0a00 	vstr	s0, [r7]
  /* By default we use High Performance mode and Low Noise disabled */
  return LIS2DW12_ACC_SetOutputDataRate_With_Mode(pObj, Odr, LIS2DW12_HIGH_PERFORMANCE_MODE, LIS2DW12_LOW_NOISE_DISABLE);
 80025d4:	2200      	movs	r2, #0
 80025d6:	2100      	movs	r1, #0
 80025d8:	ed97 0a00 	vldr	s0, [r7]
 80025dc:	6878      	ldr	r0, [r7, #4]
 80025de:	f000 f805 	bl	80025ec <LIS2DW12_ACC_SetOutputDataRate_With_Mode>
 80025e2:	4603      	mov	r3, r0
}
 80025e4:	4618      	mov	r0, r3
 80025e6:	3708      	adds	r7, #8
 80025e8:	46bd      	mov	sp, r7
 80025ea:	bd80      	pop	{r7, pc}

080025ec <LIS2DW12_ACC_SetOutputDataRate_With_Mode>:
  * @param  Noise the low noise option
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DW12_ACC_SetOutputDataRate_With_Mode(LIS2DW12_Object_t *pObj, float Odr, LIS2DW12_Operating_Mode_t Mode,
                                                 LIS2DW12_Low_Noise_t Noise)
{
 80025ec:	b580      	push	{r7, lr}
 80025ee:	b084      	sub	sp, #16
 80025f0:	af00      	add	r7, sp, #0
 80025f2:	60f8      	str	r0, [r7, #12]
 80025f4:	ed87 0a02 	vstr	s0, [r7, #8]
 80025f8:	460b      	mov	r3, r1
 80025fa:	71fb      	strb	r3, [r7, #7]
 80025fc:	4613      	mov	r3, r2
 80025fe:	71bb      	strb	r3, [r7, #6]
  /* Check if the component is enabled */
  if (pObj->acc_is_enabled == 1U)
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8002606:	2b01      	cmp	r3, #1
 8002608:	d109      	bne.n	800261e <LIS2DW12_ACC_SetOutputDataRate_With_Mode+0x32>
  {
    return LIS2DW12_ACC_SetOutputDataRate_When_Enabled(pObj, Odr, Mode, Noise);
 800260a:	79ba      	ldrb	r2, [r7, #6]
 800260c:	79fb      	ldrb	r3, [r7, #7]
 800260e:	4619      	mov	r1, r3
 8002610:	ed97 0a02 	vldr	s0, [r7, #8]
 8002614:	68f8      	ldr	r0, [r7, #12]
 8002616:	f000 f98d 	bl	8002934 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled>
 800261a:	4603      	mov	r3, r0
 800261c:	e008      	b.n	8002630 <LIS2DW12_ACC_SetOutputDataRate_With_Mode+0x44>
  }
  else
  {
    return LIS2DW12_ACC_SetOutputDataRate_When_Disabled(pObj, Odr, Mode, Noise);
 800261e:	79ba      	ldrb	r2, [r7, #6]
 8002620:	79fb      	ldrb	r3, [r7, #7]
 8002622:	4619      	mov	r1, r3
 8002624:	ed97 0a02 	vldr	s0, [r7, #8]
 8002628:	68f8      	ldr	r0, [r7, #12]
 800262a:	f000 fa9f 	bl	8002b6c <LIS2DW12_ACC_SetOutputDataRate_When_Disabled>
 800262e:	4603      	mov	r3, r0
  }
}
 8002630:	4618      	mov	r0, r3
 8002632:	3710      	adds	r7, #16
 8002634:	46bd      	mov	sp, r7
 8002636:	bd80      	pop	{r7, pc}

08002638 <LIS2DW12_ACC_GetFullScale>:
  * @param  pObj the device pObj
  * @param  FullScale pointer where the full scale is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DW12_ACC_GetFullScale(LIS2DW12_Object_t *pObj, int32_t *FullScale)
{
 8002638:	b580      	push	{r7, lr}
 800263a:	b084      	sub	sp, #16
 800263c:	af00      	add	r7, sp, #0
 800263e:	6078      	str	r0, [r7, #4]
 8002640:	6039      	str	r1, [r7, #0]
  int32_t ret = LIS2DW12_OK;
 8002642:	2300      	movs	r3, #0
 8002644:	60fb      	str	r3, [r7, #12]
  lis2dw12_fs_t fs_low_level;

  /* Read actual full scale selection from sensor. */
  if (lis2dw12_full_scale_get(&(pObj->Ctx), &fs_low_level) != LIS2DW12_OK)
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	3320      	adds	r3, #32
 800264a:	f107 020b 	add.w	r2, r7, #11
 800264e:	4611      	mov	r1, r2
 8002650:	4618      	mov	r0, r3
 8002652:	f000 fde7 	bl	8003224 <lis2dw12_full_scale_get>
 8002656:	4603      	mov	r3, r0
 8002658:	2b00      	cmp	r3, #0
 800265a:	d002      	beq.n	8002662 <LIS2DW12_ACC_GetFullScale+0x2a>
  {
    return LIS2DW12_ERROR;
 800265c:	f04f 33ff 	mov.w	r3, #4294967295
 8002660:	e027      	b.n	80026b2 <LIS2DW12_ACC_GetFullScale+0x7a>
  }

  switch (fs_low_level)
 8002662:	7afb      	ldrb	r3, [r7, #11]
 8002664:	2b03      	cmp	r3, #3
 8002666:	d81b      	bhi.n	80026a0 <LIS2DW12_ACC_GetFullScale+0x68>
 8002668:	a201      	add	r2, pc, #4	; (adr r2, 8002670 <LIS2DW12_ACC_GetFullScale+0x38>)
 800266a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800266e:	bf00      	nop
 8002670:	08002681 	.word	0x08002681
 8002674:	08002689 	.word	0x08002689
 8002678:	08002691 	.word	0x08002691
 800267c:	08002699 	.word	0x08002699
  {
    case LIS2DW12_2g:
      *FullScale =  2;
 8002680:	683b      	ldr	r3, [r7, #0]
 8002682:	2202      	movs	r2, #2
 8002684:	601a      	str	r2, [r3, #0]
      break;
 8002686:	e013      	b.n	80026b0 <LIS2DW12_ACC_GetFullScale+0x78>

    case LIS2DW12_4g:
      *FullScale =  4;
 8002688:	683b      	ldr	r3, [r7, #0]
 800268a:	2204      	movs	r2, #4
 800268c:	601a      	str	r2, [r3, #0]
      break;
 800268e:	e00f      	b.n	80026b0 <LIS2DW12_ACC_GetFullScale+0x78>

    case LIS2DW12_8g:
      *FullScale =  8;
 8002690:	683b      	ldr	r3, [r7, #0]
 8002692:	2208      	movs	r2, #8
 8002694:	601a      	str	r2, [r3, #0]
      break;
 8002696:	e00b      	b.n	80026b0 <LIS2DW12_ACC_GetFullScale+0x78>

    case LIS2DW12_16g:
      *FullScale = 16;
 8002698:	683b      	ldr	r3, [r7, #0]
 800269a:	2210      	movs	r2, #16
 800269c:	601a      	str	r2, [r3, #0]
      break;
 800269e:	e007      	b.n	80026b0 <LIS2DW12_ACC_GetFullScale+0x78>

    default:
      *FullScale = -1;
 80026a0:	683b      	ldr	r3, [r7, #0]
 80026a2:	f04f 32ff 	mov.w	r2, #4294967295
 80026a6:	601a      	str	r2, [r3, #0]
      ret = LIS2DW12_ERROR;
 80026a8:	f04f 33ff 	mov.w	r3, #4294967295
 80026ac:	60fb      	str	r3, [r7, #12]
      break;
 80026ae:	bf00      	nop
  }

  return ret;
 80026b0:	68fb      	ldr	r3, [r7, #12]
}
 80026b2:	4618      	mov	r0, r3
 80026b4:	3710      	adds	r7, #16
 80026b6:	46bd      	mov	sp, r7
 80026b8:	bd80      	pop	{r7, pc}
 80026ba:	bf00      	nop

080026bc <LIS2DW12_ACC_SetFullScale>:
  * @param  pObj the device pObj
  * @param  FullScale the functional full scale to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DW12_ACC_SetFullScale(LIS2DW12_Object_t *pObj, int32_t FullScale)
{
 80026bc:	b580      	push	{r7, lr}
 80026be:	b084      	sub	sp, #16
 80026c0:	af00      	add	r7, sp, #0
 80026c2:	6078      	str	r0, [r7, #4]
 80026c4:	6039      	str	r1, [r7, #0]
  lis2dw12_fs_t new_fs;

  /* Seems like MISRA C-2012 rule 14.3a violation but only from single file statical analysis point of view because
     the parameter passed to the function is not known at the moment of analysis */
  new_fs = (FullScale <= 2) ? LIS2DW12_2g
           : (FullScale <= 4) ? LIS2DW12_4g
 80026c6:	683b      	ldr	r3, [r7, #0]
 80026c8:	2b02      	cmp	r3, #2
 80026ca:	dd0b      	ble.n	80026e4 <LIS2DW12_ACC_SetFullScale+0x28>
 80026cc:	683b      	ldr	r3, [r7, #0]
 80026ce:	2b04      	cmp	r3, #4
 80026d0:	dd06      	ble.n	80026e0 <LIS2DW12_ACC_SetFullScale+0x24>
 80026d2:	683b      	ldr	r3, [r7, #0]
 80026d4:	2b08      	cmp	r3, #8
 80026d6:	dc01      	bgt.n	80026dc <LIS2DW12_ACC_SetFullScale+0x20>
 80026d8:	2302      	movs	r3, #2
 80026da:	e004      	b.n	80026e6 <LIS2DW12_ACC_SetFullScale+0x2a>
 80026dc:	2303      	movs	r3, #3
 80026de:	e002      	b.n	80026e6 <LIS2DW12_ACC_SetFullScale+0x2a>
 80026e0:	2301      	movs	r3, #1
 80026e2:	e000      	b.n	80026e6 <LIS2DW12_ACC_SetFullScale+0x2a>
 80026e4:	2300      	movs	r3, #0
  new_fs = (FullScale <= 2) ? LIS2DW12_2g
 80026e6:	73fb      	strb	r3, [r7, #15]
           : (FullScale <= 8) ? LIS2DW12_8g
           :                    LIS2DW12_16g;

  if (lis2dw12_full_scale_set(&(pObj->Ctx), new_fs) != LIS2DW12_OK)
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	3320      	adds	r3, #32
 80026ec:	7bfa      	ldrb	r2, [r7, #15]
 80026ee:	4611      	mov	r1, r2
 80026f0:	4618      	mov	r0, r3
 80026f2:	f000 fd71 	bl	80031d8 <lis2dw12_full_scale_set>
 80026f6:	4603      	mov	r3, r0
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d002      	beq.n	8002702 <LIS2DW12_ACC_SetFullScale+0x46>
  {
    return LIS2DW12_ERROR;
 80026fc:	f04f 33ff 	mov.w	r3, #4294967295
 8002700:	e000      	b.n	8002704 <LIS2DW12_ACC_SetFullScale+0x48>
  }

  return LIS2DW12_OK;
 8002702:	2300      	movs	r3, #0
}
 8002704:	4618      	mov	r0, r3
 8002706:	3710      	adds	r7, #16
 8002708:	46bd      	mov	sp, r7
 800270a:	bd80      	pop	{r7, pc}

0800270c <LIS2DW12_ACC_GetAxesRaw>:
  * @param  pObj the device pObj
  * @param  Value pointer where the raw values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DW12_ACC_GetAxesRaw(LIS2DW12_Object_t *pObj, LIS2DW12_AxesRaw_t *Value)
{
 800270c:	b580      	push	{r7, lr}
 800270e:	b086      	sub	sp, #24
 8002710:	af00      	add	r7, sp, #0
 8002712:	6078      	str	r0, [r7, #4]
 8002714:	6039      	str	r1, [r7, #0]
  lis2dw12_axis3bit16_t data_raw;
  lis2dw12_mode_t mode;
  int32_t ret = LIS2DW12_OK;
 8002716:	2300      	movs	r3, #0
 8002718:	617b      	str	r3, [r7, #20]

  /* Read actual power mode selection from sensor. */
  if (lis2dw12_power_mode_get(&(pObj->Ctx), &mode) != LIS2DW12_OK)
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	3320      	adds	r3, #32
 800271e:	f107 020b 	add.w	r2, r7, #11
 8002722:	4611      	mov	r1, r2
 8002724:	4618      	mov	r0, r3
 8002726:	f000 fb67 	bl	8002df8 <lis2dw12_power_mode_get>
 800272a:	4603      	mov	r3, r0
 800272c:	2b00      	cmp	r3, #0
 800272e:	d002      	beq.n	8002736 <LIS2DW12_ACC_GetAxesRaw+0x2a>
  {
    return LIS2DW12_ERROR;
 8002730:	f04f 33ff 	mov.w	r3, #4294967295
 8002734:	e089      	b.n	800284a <LIS2DW12_ACC_GetAxesRaw+0x13e>
  }

  /* Read raw data values. */
  if (lis2dw12_acceleration_raw_get(&(pObj->Ctx), data_raw.i16bit) != LIS2DW12_OK)
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	3320      	adds	r3, #32
 800273a:	f107 020c 	add.w	r2, r7, #12
 800273e:	4611      	mov	r1, r2
 8002740:	4618      	mov	r0, r3
 8002742:	f000 fda7 	bl	8003294 <lis2dw12_acceleration_raw_get>
 8002746:	4603      	mov	r3, r0
 8002748:	2b00      	cmp	r3, #0
 800274a:	d002      	beq.n	8002752 <LIS2DW12_ACC_GetAxesRaw+0x46>
  {
    return LIS2DW12_ERROR;
 800274c:	f04f 33ff 	mov.w	r3, #4294967295
 8002750:	e07b      	b.n	800284a <LIS2DW12_ACC_GetAxesRaw+0x13e>
  }

  switch (mode)
 8002752:	7afb      	ldrb	r3, [r7, #11]
 8002754:	2b1b      	cmp	r3, #27
 8002756:	d873      	bhi.n	8002840 <LIS2DW12_ACC_GetAxesRaw+0x134>
 8002758:	a201      	add	r2, pc, #4	; (adr r2, 8002760 <LIS2DW12_ACC_GetAxesRaw+0x54>)
 800275a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800275e:	bf00      	nop
 8002760:	080027d1 	.word	0x080027d1
 8002764:	08002809 	.word	0x08002809
 8002768:	08002809 	.word	0x08002809
 800276c:	08002809 	.word	0x08002809
 8002770:	08002809 	.word	0x08002809
 8002774:	08002841 	.word	0x08002841
 8002778:	08002841 	.word	0x08002841
 800277c:	08002841 	.word	0x08002841
 8002780:	080027d1 	.word	0x080027d1
 8002784:	08002809 	.word	0x08002809
 8002788:	08002809 	.word	0x08002809
 800278c:	08002809 	.word	0x08002809
 8002790:	08002841 	.word	0x08002841
 8002794:	08002841 	.word	0x08002841
 8002798:	08002841 	.word	0x08002841
 800279c:	08002841 	.word	0x08002841
 80027a0:	080027d1 	.word	0x080027d1
 80027a4:	08002809 	.word	0x08002809
 80027a8:	08002809 	.word	0x08002809
 80027ac:	08002809 	.word	0x08002809
 80027b0:	08002809 	.word	0x08002809
 80027b4:	08002841 	.word	0x08002841
 80027b8:	08002841 	.word	0x08002841
 80027bc:	08002841 	.word	0x08002841
 80027c0:	080027d1 	.word	0x080027d1
 80027c4:	08002809 	.word	0x08002809
 80027c8:	08002809 	.word	0x08002809
 80027cc:	08002809 	.word	0x08002809
    case LIS2DW12_CONT_LOW_PWR_12bit:
    case LIS2DW12_SINGLE_LOW_PWR_12bit:
    case LIS2DW12_CONT_LOW_PWR_LOW_NOISE_12bit:
    case LIS2DW12_SINGLE_LOW_LOW_NOISE_PWR_12bit:
      /* Data format 12 bits. */
      Value->x = (data_raw.i16bit[0] / 16);
 80027d0:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	da00      	bge.n	80027da <LIS2DW12_ACC_GetAxesRaw+0xce>
 80027d8:	330f      	adds	r3, #15
 80027da:	111b      	asrs	r3, r3, #4
 80027dc:	b21a      	sxth	r2, r3
 80027de:	683b      	ldr	r3, [r7, #0]
 80027e0:	801a      	strh	r2, [r3, #0]
      Value->y = (data_raw.i16bit[1] / 16);
 80027e2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	da00      	bge.n	80027ec <LIS2DW12_ACC_GetAxesRaw+0xe0>
 80027ea:	330f      	adds	r3, #15
 80027ec:	111b      	asrs	r3, r3, #4
 80027ee:	b21a      	sxth	r2, r3
 80027f0:	683b      	ldr	r3, [r7, #0]
 80027f2:	805a      	strh	r2, [r3, #2]
      Value->z = (data_raw.i16bit[2] / 16);
 80027f4:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	da00      	bge.n	80027fe <LIS2DW12_ACC_GetAxesRaw+0xf2>
 80027fc:	330f      	adds	r3, #15
 80027fe:	111b      	asrs	r3, r3, #4
 8002800:	b21a      	sxth	r2, r3
 8002802:	683b      	ldr	r3, [r7, #0]
 8002804:	809a      	strh	r2, [r3, #4]
      break;
 8002806:	e01f      	b.n	8002848 <LIS2DW12_ACC_GetAxesRaw+0x13c>
    case LIS2DW12_CONT_LOW_PWR_LOW_NOISE_2:
    case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_4:
    case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_3:
    case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_2:
      /* Data format 14 bits. */
      Value->x = (data_raw.i16bit[0] / 4);
 8002808:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800280c:	2b00      	cmp	r3, #0
 800280e:	da00      	bge.n	8002812 <LIS2DW12_ACC_GetAxesRaw+0x106>
 8002810:	3303      	adds	r3, #3
 8002812:	109b      	asrs	r3, r3, #2
 8002814:	b21a      	sxth	r2, r3
 8002816:	683b      	ldr	r3, [r7, #0]
 8002818:	801a      	strh	r2, [r3, #0]
      Value->y = (data_raw.i16bit[1] / 4);
 800281a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800281e:	2b00      	cmp	r3, #0
 8002820:	da00      	bge.n	8002824 <LIS2DW12_ACC_GetAxesRaw+0x118>
 8002822:	3303      	adds	r3, #3
 8002824:	109b      	asrs	r3, r3, #2
 8002826:	b21a      	sxth	r2, r3
 8002828:	683b      	ldr	r3, [r7, #0]
 800282a:	805a      	strh	r2, [r3, #2]
      Value->z = (data_raw.i16bit[2] / 4);
 800282c:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8002830:	2b00      	cmp	r3, #0
 8002832:	da00      	bge.n	8002836 <LIS2DW12_ACC_GetAxesRaw+0x12a>
 8002834:	3303      	adds	r3, #3
 8002836:	109b      	asrs	r3, r3, #2
 8002838:	b21a      	sxth	r2, r3
 800283a:	683b      	ldr	r3, [r7, #0]
 800283c:	809a      	strh	r2, [r3, #4]
      break;
 800283e:	e003      	b.n	8002848 <LIS2DW12_ACC_GetAxesRaw+0x13c>

    default:
      ret = LIS2DW12_ERROR;
 8002840:	f04f 33ff 	mov.w	r3, #4294967295
 8002844:	617b      	str	r3, [r7, #20]
      break;
 8002846:	bf00      	nop
  }

  return ret;
 8002848:	697b      	ldr	r3, [r7, #20]
}
 800284a:	4618      	mov	r0, r3
 800284c:	3718      	adds	r7, #24
 800284e:	46bd      	mov	sp, r7
 8002850:	bd80      	pop	{r7, pc}
 8002852:	bf00      	nop

08002854 <LIS2DW12_ACC_GetAxes>:
  * @param  pObj the device pObj
  * @param  Acceleration pointer where the values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DW12_ACC_GetAxes(LIS2DW12_Object_t *pObj, LIS2DW12_Axes_t *Acceleration)
{
 8002854:	b580      	push	{r7, lr}
 8002856:	b086      	sub	sp, #24
 8002858:	af00      	add	r7, sp, #0
 800285a:	6078      	str	r0, [r7, #4]
 800285c:	6039      	str	r1, [r7, #0]
  LIS2DW12_AxesRaw_t data_raw;
  float sensitivity = 0.0f;
 800285e:	f04f 0300 	mov.w	r3, #0
 8002862:	60fb      	str	r3, [r7, #12]

  /* Read raw data values. */
  if (LIS2DW12_ACC_GetAxesRaw(pObj, &data_raw) != LIS2DW12_OK)
 8002864:	f107 0310 	add.w	r3, r7, #16
 8002868:	4619      	mov	r1, r3
 800286a:	6878      	ldr	r0, [r7, #4]
 800286c:	f7ff ff4e 	bl	800270c <LIS2DW12_ACC_GetAxesRaw>
 8002870:	4603      	mov	r3, r0
 8002872:	2b00      	cmp	r3, #0
 8002874:	d002      	beq.n	800287c <LIS2DW12_ACC_GetAxes+0x28>
  {
    return LIS2DW12_ERROR;
 8002876:	f04f 33ff 	mov.w	r3, #4294967295
 800287a:	e03c      	b.n	80028f6 <LIS2DW12_ACC_GetAxes+0xa2>
  }

  /* Get LIS2DW12 actual sensitivity. */
  if (LIS2DW12_ACC_GetSensitivity(pObj, &sensitivity) != LIS2DW12_OK)
 800287c:	f107 030c 	add.w	r3, r7, #12
 8002880:	4619      	mov	r1, r3
 8002882:	6878      	ldr	r0, [r7, #4]
 8002884:	f7ff fbd6 	bl	8002034 <LIS2DW12_ACC_GetSensitivity>
 8002888:	4603      	mov	r3, r0
 800288a:	2b00      	cmp	r3, #0
 800288c:	d002      	beq.n	8002894 <LIS2DW12_ACC_GetAxes+0x40>
  {
    return LIS2DW12_ERROR;
 800288e:	f04f 33ff 	mov.w	r3, #4294967295
 8002892:	e030      	b.n	80028f6 <LIS2DW12_ACC_GetAxes+0xa2>
  }

  /* Calculate the data. */
  Acceleration->x = (int32_t)((float)((float)data_raw.x * sensitivity));
 8002894:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8002898:	ee07 3a90 	vmov	s15, r3
 800289c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80028a0:	edd7 7a03 	vldr	s15, [r7, #12]
 80028a4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80028a8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80028ac:	ee17 2a90 	vmov	r2, s15
 80028b0:	683b      	ldr	r3, [r7, #0]
 80028b2:	601a      	str	r2, [r3, #0]
  Acceleration->y = (int32_t)((float)((float)data_raw.y * sensitivity));
 80028b4:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80028b8:	ee07 3a90 	vmov	s15, r3
 80028bc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80028c0:	edd7 7a03 	vldr	s15, [r7, #12]
 80028c4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80028c8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80028cc:	ee17 2a90 	vmov	r2, s15
 80028d0:	683b      	ldr	r3, [r7, #0]
 80028d2:	605a      	str	r2, [r3, #4]
  Acceleration->z = (int32_t)((float)((float)data_raw.z * sensitivity));
 80028d4:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80028d8:	ee07 3a90 	vmov	s15, r3
 80028dc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80028e0:	edd7 7a03 	vldr	s15, [r7, #12]
 80028e4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80028e8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80028ec:	ee17 2a90 	vmov	r2, s15
 80028f0:	683b      	ldr	r3, [r7, #0]
 80028f2:	609a      	str	r2, [r3, #8]

  return LIS2DW12_OK;
 80028f4:	2300      	movs	r3, #0
}
 80028f6:	4618      	mov	r0, r3
 80028f8:	3718      	adds	r7, #24
 80028fa:	46bd      	mov	sp, r7
 80028fc:	bd80      	pop	{r7, pc}

080028fe <LIS2DW12_Write_Reg>:
  * @param  Reg address to be written
  * @param  Data value to be written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DW12_Write_Reg(LIS2DW12_Object_t *pObj, uint8_t Reg, uint8_t Data)
{
 80028fe:	b580      	push	{r7, lr}
 8002900:	b082      	sub	sp, #8
 8002902:	af00      	add	r7, sp, #0
 8002904:	6078      	str	r0, [r7, #4]
 8002906:	460b      	mov	r3, r1
 8002908:	70fb      	strb	r3, [r7, #3]
 800290a:	4613      	mov	r3, r2
 800290c:	70bb      	strb	r3, [r7, #2]
  if (lis2dw12_write_reg(&(pObj->Ctx), Reg, &Data, 1) != LIS2DW12_OK)
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	f103 0020 	add.w	r0, r3, #32
 8002914:	1cba      	adds	r2, r7, #2
 8002916:	78f9      	ldrb	r1, [r7, #3]
 8002918:	2301      	movs	r3, #1
 800291a:	f000 fa07 	bl	8002d2c <lis2dw12_write_reg>
 800291e:	4603      	mov	r3, r0
 8002920:	2b00      	cmp	r3, #0
 8002922:	d002      	beq.n	800292a <LIS2DW12_Write_Reg+0x2c>
  {
    return LIS2DW12_ERROR;
 8002924:	f04f 33ff 	mov.w	r3, #4294967295
 8002928:	e000      	b.n	800292c <LIS2DW12_Write_Reg+0x2e>
  }

  return LIS2DW12_OK;
 800292a:	2300      	movs	r3, #0
}
 800292c:	4618      	mov	r0, r3
 800292e:	3708      	adds	r7, #8
 8002930:	46bd      	mov	sp, r7
 8002932:	bd80      	pop	{r7, pc}

08002934 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled>:
  * @param  Noise the low noise option
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LIS2DW12_ACC_SetOutputDataRate_When_Enabled(LIS2DW12_Object_t *pObj, float Odr,
                                                           LIS2DW12_Operating_Mode_t Mode, LIS2DW12_Low_Noise_t Noise)
{
 8002934:	b580      	push	{r7, lr}
 8002936:	b086      	sub	sp, #24
 8002938:	af00      	add	r7, sp, #0
 800293a:	60f8      	str	r0, [r7, #12]
 800293c:	ed87 0a02 	vstr	s0, [r7, #8]
 8002940:	460b      	mov	r3, r1
 8002942:	71fb      	strb	r3, [r7, #7]
 8002944:	4613      	mov	r3, r2
 8002946:	71bb      	strb	r3, [r7, #6]
  lis2dw12_odr_t new_odr;
  lis2dw12_mode_t new_power_mode;

  switch (Mode)
 8002948:	79fb      	ldrb	r3, [r7, #7]
 800294a:	3b01      	subs	r3, #1
 800294c:	2b03      	cmp	r3, #3
 800294e:	d80b      	bhi.n	8002968 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x34>
 8002950:	a201      	add	r2, pc, #4	; (adr r2, 8002958 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x24>)
 8002952:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002956:	bf00      	nop
 8002958:	08002995 	.word	0x08002995
 800295c:	080029c1 	.word	0x080029c1
 8002960:	080029ed 	.word	0x080029ed
 8002964:	08002a19 	.word	0x08002a19
  {
    case LIS2DW12_HIGH_PERFORMANCE_MODE:
    default:
      switch (Noise)
 8002968:	79bb      	ldrb	r3, [r7, #6]
 800296a:	2b01      	cmp	r3, #1
 800296c:	d002      	beq.n	8002974 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x40>
      {
        case LIS2DW12_LOW_NOISE_DISABLE:
        default:
          new_power_mode = LIS2DW12_HIGH_PERFORMANCE;
 800296e:	2304      	movs	r3, #4
 8002970:	75fb      	strb	r3, [r7, #23]
          break;
 8002972:	e002      	b.n	800297a <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x46>
        case LIS2DW12_LOW_NOISE_ENABLE:
          new_power_mode = LIS2DW12_HIGH_PERFORMANCE_LOW_NOISE;
 8002974:	2314      	movs	r3, #20
 8002976:	75fb      	strb	r3, [r7, #23]
          break;
 8002978:	bf00      	nop
      }

      /* If High Performance mode minimum ODR is 12.5Hz */
      if (Odr < 12.5f)
 800297a:	edd7 7a02 	vldr	s15, [r7, #8]
 800297e:	eeb2 7a09 	vmov.f32	s14, #41	; 0x41480000  12.5
 8002982:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002986:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800298a:	d400      	bmi.n	800298e <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x5a>
      {
        Odr = 12.5f;
      }
      break;
 800298c:	e05a      	b.n	8002a44 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x110>
        Odr = 12.5f;
 800298e:	4b6f      	ldr	r3, [pc, #444]	; (8002b4c <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x218>)
 8002990:	60bb      	str	r3, [r7, #8]
      break;
 8002992:	e057      	b.n	8002a44 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x110>
    case LIS2DW12_LOW_POWER_MODE4:
      switch (Noise)
 8002994:	79bb      	ldrb	r3, [r7, #6]
 8002996:	2b01      	cmp	r3, #1
 8002998:	d002      	beq.n	80029a0 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x6c>
      {
        case LIS2DW12_LOW_NOISE_DISABLE:
        default:
          new_power_mode = LIS2DW12_CONT_LOW_PWR_4;
 800299a:	2303      	movs	r3, #3
 800299c:	75fb      	strb	r3, [r7, #23]
          break;
 800299e:	e002      	b.n	80029a6 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x72>
        case LIS2DW12_LOW_NOISE_ENABLE:
          new_power_mode = LIS2DW12_CONT_LOW_PWR_LOW_NOISE_4;
 80029a0:	2313      	movs	r3, #19
 80029a2:	75fb      	strb	r3, [r7, #23]
          break;
 80029a4:	bf00      	nop
      }

      /* If Low Power mode maximum ODR is 200Hz */
      if (Odr > 200.0f)
 80029a6:	edd7 7a02 	vldr	s15, [r7, #8]
 80029aa:	ed9f 7a69 	vldr	s14, [pc, #420]	; 8002b50 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x21c>
 80029ae:	eef4 7ac7 	vcmpe.f32	s15, s14
 80029b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80029b6:	dc00      	bgt.n	80029ba <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x86>
      {
        Odr = 200.0f;
      }
      break;
 80029b8:	e044      	b.n	8002a44 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x110>
        Odr = 200.0f;
 80029ba:	4b66      	ldr	r3, [pc, #408]	; (8002b54 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x220>)
 80029bc:	60bb      	str	r3, [r7, #8]
      break;
 80029be:	e041      	b.n	8002a44 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x110>
    case LIS2DW12_LOW_POWER_MODE3:
      switch (Noise)
 80029c0:	79bb      	ldrb	r3, [r7, #6]
 80029c2:	2b01      	cmp	r3, #1
 80029c4:	d002      	beq.n	80029cc <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x98>
      {
        case LIS2DW12_LOW_NOISE_DISABLE:
        default:
          new_power_mode = LIS2DW12_CONT_LOW_PWR_3;
 80029c6:	2302      	movs	r3, #2
 80029c8:	75fb      	strb	r3, [r7, #23]
          break;
 80029ca:	e002      	b.n	80029d2 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x9e>
        case LIS2DW12_LOW_NOISE_ENABLE:
          new_power_mode = LIS2DW12_CONT_LOW_PWR_LOW_NOISE_3;
 80029cc:	2312      	movs	r3, #18
 80029ce:	75fb      	strb	r3, [r7, #23]
          break;
 80029d0:	bf00      	nop
      }

      /* If Low Power mode maximum ODR is 200Hz */
      if (Odr > 200.0f)
 80029d2:	edd7 7a02 	vldr	s15, [r7, #8]
 80029d6:	ed9f 7a5e 	vldr	s14, [pc, #376]	; 8002b50 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x21c>
 80029da:	eef4 7ac7 	vcmpe.f32	s15, s14
 80029de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80029e2:	dc00      	bgt.n	80029e6 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0xb2>
      {
        Odr = 200.0f;
      }
      break;
 80029e4:	e02e      	b.n	8002a44 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x110>
        Odr = 200.0f;
 80029e6:	4b5b      	ldr	r3, [pc, #364]	; (8002b54 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x220>)
 80029e8:	60bb      	str	r3, [r7, #8]
      break;
 80029ea:	e02b      	b.n	8002a44 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x110>
    case LIS2DW12_LOW_POWER_MODE2:
      switch (Noise)
 80029ec:	79bb      	ldrb	r3, [r7, #6]
 80029ee:	2b01      	cmp	r3, #1
 80029f0:	d002      	beq.n	80029f8 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0xc4>
      {
        case LIS2DW12_LOW_NOISE_DISABLE:
        default:
          new_power_mode = LIS2DW12_CONT_LOW_PWR_2;
 80029f2:	2301      	movs	r3, #1
 80029f4:	75fb      	strb	r3, [r7, #23]
          break;
 80029f6:	e002      	b.n	80029fe <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0xca>
        case LIS2DW12_LOW_NOISE_ENABLE:
          new_power_mode = LIS2DW12_CONT_LOW_PWR_LOW_NOISE_2;
 80029f8:	2311      	movs	r3, #17
 80029fa:	75fb      	strb	r3, [r7, #23]
          break;
 80029fc:	bf00      	nop
      }

      /* If Low Power mode maximum ODR is 200Hz */
      if (Odr > 200.0f)
 80029fe:	edd7 7a02 	vldr	s15, [r7, #8]
 8002a02:	ed9f 7a53 	vldr	s14, [pc, #332]	; 8002b50 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x21c>
 8002a06:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002a0a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002a0e:	dc00      	bgt.n	8002a12 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0xde>
      {
        Odr = 200.0f;
      }
      break;
 8002a10:	e018      	b.n	8002a44 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x110>
        Odr = 200.0f;
 8002a12:	4b50      	ldr	r3, [pc, #320]	; (8002b54 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x220>)
 8002a14:	60bb      	str	r3, [r7, #8]
      break;
 8002a16:	e015      	b.n	8002a44 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x110>
    case LIS2DW12_LOW_POWER_MODE1:
      switch (Noise)
 8002a18:	79bb      	ldrb	r3, [r7, #6]
 8002a1a:	2b01      	cmp	r3, #1
 8002a1c:	d002      	beq.n	8002a24 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0xf0>
      {
        case LIS2DW12_LOW_NOISE_DISABLE:
        default:
          new_power_mode = LIS2DW12_CONT_LOW_PWR_12bit;
 8002a1e:	2300      	movs	r3, #0
 8002a20:	75fb      	strb	r3, [r7, #23]
          break;
 8002a22:	e002      	b.n	8002a2a <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0xf6>
        case LIS2DW12_LOW_NOISE_ENABLE:
          new_power_mode = LIS2DW12_CONT_LOW_PWR_LOW_NOISE_12bit;
 8002a24:	2310      	movs	r3, #16
 8002a26:	75fb      	strb	r3, [r7, #23]
          break;
 8002a28:	bf00      	nop
      }

      /* If Low Power mode maximum ODR is 200Hz */
      if (Odr > 200.0f)
 8002a2a:	edd7 7a02 	vldr	s15, [r7, #8]
 8002a2e:	ed9f 7a48 	vldr	s14, [pc, #288]	; 8002b50 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x21c>
 8002a32:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002a36:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002a3a:	dc00      	bgt.n	8002a3e <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x10a>
      {
        Odr = 200.0f;
      }
      break;
 8002a3c:	e001      	b.n	8002a42 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x10e>
        Odr = 200.0f;
 8002a3e:	4b45      	ldr	r3, [pc, #276]	; (8002b54 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x220>)
 8002a40:	60bb      	str	r3, [r7, #8]
      break;
 8002a42:	bf00      	nop
  }

  new_odr = (Odr <=    1.6f) ? LIS2DW12_XL_ODR_1Hz6_LP_ONLY
            : (Odr <=   12.5f) ? LIS2DW12_XL_ODR_12Hz5
 8002a44:	edd7 7a02 	vldr	s15, [r7, #8]
 8002a48:	ed9f 7a43 	vldr	s14, [pc, #268]	; 8002b58 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x224>
 8002a4c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002a50:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002a54:	d801      	bhi.n	8002a5a <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x126>
 8002a56:	2301      	movs	r3, #1
 8002a58:	e04d      	b.n	8002af6 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x1c2>
 8002a5a:	edd7 7a02 	vldr	s15, [r7, #8]
 8002a5e:	eeb2 7a09 	vmov.f32	s14, #41	; 0x41480000  12.5
 8002a62:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002a66:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002a6a:	d801      	bhi.n	8002a70 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x13c>
 8002a6c:	2302      	movs	r3, #2
 8002a6e:	e042      	b.n	8002af6 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x1c2>
 8002a70:	edd7 7a02 	vldr	s15, [r7, #8]
 8002a74:	eeb3 7a09 	vmov.f32	s14, #57	; 0x41c80000  25.0
 8002a78:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002a7c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002a80:	d801      	bhi.n	8002a86 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x152>
 8002a82:	2303      	movs	r3, #3
 8002a84:	e037      	b.n	8002af6 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x1c2>
 8002a86:	edd7 7a02 	vldr	s15, [r7, #8]
 8002a8a:	ed9f 7a34 	vldr	s14, [pc, #208]	; 8002b5c <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x228>
 8002a8e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002a92:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002a96:	d801      	bhi.n	8002a9c <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x168>
 8002a98:	2304      	movs	r3, #4
 8002a9a:	e02c      	b.n	8002af6 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x1c2>
 8002a9c:	edd7 7a02 	vldr	s15, [r7, #8]
 8002aa0:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 8002b60 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x22c>
 8002aa4:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002aa8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002aac:	d801      	bhi.n	8002ab2 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x17e>
 8002aae:	2305      	movs	r3, #5
 8002ab0:	e021      	b.n	8002af6 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x1c2>
 8002ab2:	edd7 7a02 	vldr	s15, [r7, #8]
 8002ab6:	ed9f 7a26 	vldr	s14, [pc, #152]	; 8002b50 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x21c>
 8002aba:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002abe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002ac2:	d801      	bhi.n	8002ac8 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x194>
 8002ac4:	2306      	movs	r3, #6
 8002ac6:	e016      	b.n	8002af6 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x1c2>
 8002ac8:	edd7 7a02 	vldr	s15, [r7, #8]
 8002acc:	ed9f 7a25 	vldr	s14, [pc, #148]	; 8002b64 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x230>
 8002ad0:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002ad4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002ad8:	d801      	bhi.n	8002ade <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x1aa>
 8002ada:	2307      	movs	r3, #7
 8002adc:	e00b      	b.n	8002af6 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x1c2>
 8002ade:	edd7 7a02 	vldr	s15, [r7, #8]
 8002ae2:	ed9f 7a21 	vldr	s14, [pc, #132]	; 8002b68 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x234>
 8002ae6:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002aea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002aee:	d801      	bhi.n	8002af4 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x1c0>
 8002af0:	2308      	movs	r3, #8
 8002af2:	e000      	b.n	8002af6 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x1c2>
 8002af4:	2309      	movs	r3, #9
  new_odr = (Odr <=    1.6f) ? LIS2DW12_XL_ODR_1Hz6_LP_ONLY
 8002af6:	75bb      	strb	r3, [r7, #22]
            : (Odr <=  400.0f) ? LIS2DW12_XL_ODR_400Hz
            : (Odr <=  800.0f) ? LIS2DW12_XL_ODR_800Hz
            :                    LIS2DW12_XL_ODR_1k6Hz;

  /* Output data rate selection. */
  if (lis2dw12_data_rate_set(&(pObj->Ctx), new_odr) != LIS2DW12_OK)
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	3320      	adds	r3, #32
 8002afc:	7dba      	ldrb	r2, [r7, #22]
 8002afe:	4611      	mov	r1, r2
 8002b00:	4618      	mov	r0, r3
 8002b02:	f000 fa33 	bl	8002f6c <lis2dw12_data_rate_set>
 8002b06:	4603      	mov	r3, r0
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d002      	beq.n	8002b12 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x1de>
  {
    return LIS2DW12_ERROR;
 8002b0c:	f04f 33ff 	mov.w	r3, #4294967295
 8002b10:	e018      	b.n	8002b44 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x210>
  }

  /* Power mode selection. */
  if (lis2dw12_power_mode_set(&(pObj->Ctx), new_power_mode) != LIS2DW12_OK)
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	3320      	adds	r3, #32
 8002b16:	7dfa      	ldrb	r2, [r7, #23]
 8002b18:	4611      	mov	r1, r2
 8002b1a:	4618      	mov	r0, r3
 8002b1c:	f000 f91e 	bl	8002d5c <lis2dw12_power_mode_set>
 8002b20:	4603      	mov	r3, r0
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d002      	beq.n	8002b2c <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x1f8>
  {
    return LIS2DW12_ERROR;
 8002b26:	f04f 33ff 	mov.w	r3, #4294967295
 8002b2a:	e00b      	b.n	8002b44 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x210>
  }

  /* Store the current Odr, Mode and Noise values */
  pObj->acc_odr = Odr;
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	68ba      	ldr	r2, [r7, #8]
 8002b30:	635a      	str	r2, [r3, #52]	; 0x34
  pObj->acc_operating_mode = Mode;
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	79fa      	ldrb	r2, [r7, #7]
 8002b36:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  pObj->acc_low_noise = Noise;
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	79ba      	ldrb	r2, [r7, #6]
 8002b3e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return LIS2DW12_OK;
 8002b42:	2300      	movs	r3, #0
}
 8002b44:	4618      	mov	r0, r3
 8002b46:	3718      	adds	r7, #24
 8002b48:	46bd      	mov	sp, r7
 8002b4a:	bd80      	pop	{r7, pc}
 8002b4c:	41480000 	.word	0x41480000
 8002b50:	43480000 	.word	0x43480000
 8002b54:	43480000 	.word	0x43480000
 8002b58:	3fcccccd 	.word	0x3fcccccd
 8002b5c:	42480000 	.word	0x42480000
 8002b60:	42c80000 	.word	0x42c80000
 8002b64:	43c80000 	.word	0x43c80000
 8002b68:	44480000 	.word	0x44480000

08002b6c <LIS2DW12_ACC_SetOutputDataRate_When_Disabled>:
  * @param  Noise the low noise option
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LIS2DW12_ACC_SetOutputDataRate_When_Disabled(LIS2DW12_Object_t *pObj, float Odr,
                                                            LIS2DW12_Operating_Mode_t Mode, LIS2DW12_Low_Noise_t Noise)
{
 8002b6c:	b480      	push	{r7}
 8002b6e:	b085      	sub	sp, #20
 8002b70:	af00      	add	r7, sp, #0
 8002b72:	60f8      	str	r0, [r7, #12]
 8002b74:	ed87 0a02 	vstr	s0, [r7, #8]
 8002b78:	460b      	mov	r3, r1
 8002b7a:	71fb      	strb	r3, [r7, #7]
 8002b7c:	4613      	mov	r3, r2
 8002b7e:	71bb      	strb	r3, [r7, #6]
  /* Store the new Odr, Mode and Noise values */
  pObj->acc_operating_mode = Mode;
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	79fa      	ldrb	r2, [r7, #7]
 8002b84:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  pObj->acc_low_noise = Noise;
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	79ba      	ldrb	r2, [r7, #6]
 8002b8c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  pObj->acc_odr = (Odr <=    1.6f) ?    1.6f
                  : (Odr <=   12.5f) ?   12.5f
 8002b90:	edd7 7a02 	vldr	s15, [r7, #8]
 8002b94:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 8002c54 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xe8>
 8002b98:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002b9c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002ba0:	d801      	bhi.n	8002ba6 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0x3a>
 8002ba2:	4b2d      	ldr	r3, [pc, #180]	; (8002c58 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xec>)
 8002ba4:	e04d      	b.n	8002c42 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xd6>
                  : (Odr <=   25.0f) ?   25.0f
 8002ba6:	edd7 7a02 	vldr	s15, [r7, #8]
 8002baa:	eeb2 7a09 	vmov.f32	s14, #41	; 0x41480000  12.5
 8002bae:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002bb2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002bb6:	d801      	bhi.n	8002bbc <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0x50>
 8002bb8:	4b28      	ldr	r3, [pc, #160]	; (8002c5c <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xf0>)
 8002bba:	e042      	b.n	8002c42 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xd6>
                  : (Odr <=   50.0f) ?   50.0f
 8002bbc:	edd7 7a02 	vldr	s15, [r7, #8]
 8002bc0:	eeb3 7a09 	vmov.f32	s14, #57	; 0x41c80000  25.0
 8002bc4:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002bc8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002bcc:	d801      	bhi.n	8002bd2 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0x66>
 8002bce:	4b24      	ldr	r3, [pc, #144]	; (8002c60 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xf4>)
 8002bd0:	e037      	b.n	8002c42 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xd6>
                  : (Odr <=  100.0f) ?  100.0f
 8002bd2:	edd7 7a02 	vldr	s15, [r7, #8]
 8002bd6:	ed9f 7a23 	vldr	s14, [pc, #140]	; 8002c64 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xf8>
 8002bda:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002bde:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002be2:	d801      	bhi.n	8002be8 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0x7c>
 8002be4:	4b20      	ldr	r3, [pc, #128]	; (8002c68 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xfc>)
 8002be6:	e02c      	b.n	8002c42 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xd6>
                  : (Odr <=  200.0f) ?  200.0f
 8002be8:	edd7 7a02 	vldr	s15, [r7, #8]
 8002bec:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 8002c6c <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0x100>
 8002bf0:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002bf4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002bf8:	d801      	bhi.n	8002bfe <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0x92>
 8002bfa:	4b1d      	ldr	r3, [pc, #116]	; (8002c70 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0x104>)
 8002bfc:	e021      	b.n	8002c42 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xd6>
                  : (Odr <=  400.0f) ?  400.0f
 8002bfe:	edd7 7a02 	vldr	s15, [r7, #8]
 8002c02:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 8002c74 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0x108>
 8002c06:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002c0a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c0e:	d801      	bhi.n	8002c14 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xa8>
 8002c10:	4b19      	ldr	r3, [pc, #100]	; (8002c78 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0x10c>)
 8002c12:	e016      	b.n	8002c42 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xd6>
                  : (Odr <=  800.0f) ?  800.0f
 8002c14:	edd7 7a02 	vldr	s15, [r7, #8]
 8002c18:	ed9f 7a18 	vldr	s14, [pc, #96]	; 8002c7c <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0x110>
 8002c1c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002c20:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c24:	d801      	bhi.n	8002c2a <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xbe>
 8002c26:	4b16      	ldr	r3, [pc, #88]	; (8002c80 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0x114>)
 8002c28:	e00b      	b.n	8002c42 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xd6>
                  :                    1600.0f;
 8002c2a:	edd7 7a02 	vldr	s15, [r7, #8]
 8002c2e:	ed9f 7a15 	vldr	s14, [pc, #84]	; 8002c84 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0x118>
 8002c32:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002c36:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c3a:	d801      	bhi.n	8002c40 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xd4>
 8002c3c:	4b12      	ldr	r3, [pc, #72]	; (8002c88 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0x11c>)
 8002c3e:	e000      	b.n	8002c42 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xd6>
 8002c40:	4b12      	ldr	r3, [pc, #72]	; (8002c8c <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0x120>)
  pObj->acc_odr = (Odr <=    1.6f) ?    1.6f
 8002c42:	68fa      	ldr	r2, [r7, #12]
 8002c44:	6353      	str	r3, [r2, #52]	; 0x34

  return LIS2DW12_OK;
 8002c46:	2300      	movs	r3, #0
}
 8002c48:	4618      	mov	r0, r3
 8002c4a:	3714      	adds	r7, #20
 8002c4c:	46bd      	mov	sp, r7
 8002c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c52:	4770      	bx	lr
 8002c54:	3fcccccd 	.word	0x3fcccccd
 8002c58:	3fcccccd 	.word	0x3fcccccd
 8002c5c:	41480000 	.word	0x41480000
 8002c60:	41c80000 	.word	0x41c80000
 8002c64:	42480000 	.word	0x42480000
 8002c68:	42480000 	.word	0x42480000
 8002c6c:	42c80000 	.word	0x42c80000
 8002c70:	42c80000 	.word	0x42c80000
 8002c74:	43480000 	.word	0x43480000
 8002c78:	43480000 	.word	0x43480000
 8002c7c:	43c80000 	.word	0x43c80000
 8002c80:	43c80000 	.word	0x43c80000
 8002c84:	44480000 	.word	0x44480000
 8002c88:	44480000 	.word	0x44480000
 8002c8c:	44c80000 	.word	0x44c80000

08002c90 <ReadRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t ReadRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8002c90:	b590      	push	{r4, r7, lr}
 8002c92:	b087      	sub	sp, #28
 8002c94:	af00      	add	r7, sp, #0
 8002c96:	60f8      	str	r0, [r7, #12]
 8002c98:	607a      	str	r2, [r7, #4]
 8002c9a:	461a      	mov	r2, r3
 8002c9c:	460b      	mov	r3, r1
 8002c9e:	72fb      	strb	r3, [r7, #11]
 8002ca0:	4613      	mov	r3, r2
 8002ca2:	813b      	strh	r3, [r7, #8]
  LIS2DW12_Object_t *pObj = (LIS2DW12_Object_t *)Handle;
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	617b      	str	r3, [r7, #20]

  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 8002ca8:	697b      	ldr	r3, [r7, #20]
 8002caa:	695c      	ldr	r4, [r3, #20]
 8002cac:	697b      	ldr	r3, [r7, #20]
 8002cae:	7b1b      	ldrb	r3, [r3, #12]
 8002cb0:	b298      	uxth	r0, r3
 8002cb2:	7afb      	ldrb	r3, [r7, #11]
 8002cb4:	b299      	uxth	r1, r3
 8002cb6:	893b      	ldrh	r3, [r7, #8]
 8002cb8:	687a      	ldr	r2, [r7, #4]
 8002cba:	47a0      	blx	r4
 8002cbc:	4603      	mov	r3, r0
}
 8002cbe:	4618      	mov	r0, r3
 8002cc0:	371c      	adds	r7, #28
 8002cc2:	46bd      	mov	sp, r7
 8002cc4:	bd90      	pop	{r4, r7, pc}

08002cc6 <WriteRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t WriteRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8002cc6:	b590      	push	{r4, r7, lr}
 8002cc8:	b087      	sub	sp, #28
 8002cca:	af00      	add	r7, sp, #0
 8002ccc:	60f8      	str	r0, [r7, #12]
 8002cce:	607a      	str	r2, [r7, #4]
 8002cd0:	461a      	mov	r2, r3
 8002cd2:	460b      	mov	r3, r1
 8002cd4:	72fb      	strb	r3, [r7, #11]
 8002cd6:	4613      	mov	r3, r2
 8002cd8:	813b      	strh	r3, [r7, #8]
  LIS2DW12_Object_t *pObj = (LIS2DW12_Object_t *)Handle;
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	617b      	str	r3, [r7, #20]

  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 8002cde:	697b      	ldr	r3, [r7, #20]
 8002ce0:	691c      	ldr	r4, [r3, #16]
 8002ce2:	697b      	ldr	r3, [r7, #20]
 8002ce4:	7b1b      	ldrb	r3, [r3, #12]
 8002ce6:	b298      	uxth	r0, r3
 8002ce8:	7afb      	ldrb	r3, [r7, #11]
 8002cea:	b299      	uxth	r1, r3
 8002cec:	893b      	ldrh	r3, [r7, #8]
 8002cee:	687a      	ldr	r2, [r7, #4]
 8002cf0:	47a0      	blx	r4
 8002cf2:	4603      	mov	r3, r0
}
 8002cf4:	4618      	mov	r0, r3
 8002cf6:	371c      	adds	r7, #28
 8002cf8:	46bd      	mov	sp, r7
 8002cfa:	bd90      	pop	{r4, r7, pc}

08002cfc <lis2dw12_read_reg>:
  *
  */
int32_t lis2dw12_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                          uint8_t *data,
                          uint16_t len)
{
 8002cfc:	b590      	push	{r4, r7, lr}
 8002cfe:	b087      	sub	sp, #28
 8002d00:	af00      	add	r7, sp, #0
 8002d02:	60f8      	str	r0, [r7, #12]
 8002d04:	607a      	str	r2, [r7, #4]
 8002d06:	461a      	mov	r2, r3
 8002d08:	460b      	mov	r3, r1
 8002d0a:	72fb      	strb	r3, [r7, #11]
 8002d0c:	4613      	mov	r3, r2
 8002d0e:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	685c      	ldr	r4, [r3, #4]
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	68d8      	ldr	r0, [r3, #12]
 8002d18:	893b      	ldrh	r3, [r7, #8]
 8002d1a:	7af9      	ldrb	r1, [r7, #11]
 8002d1c:	687a      	ldr	r2, [r7, #4]
 8002d1e:	47a0      	blx	r4
 8002d20:	6178      	str	r0, [r7, #20]

  return ret;
 8002d22:	697b      	ldr	r3, [r7, #20]
}
 8002d24:	4618      	mov	r0, r3
 8002d26:	371c      	adds	r7, #28
 8002d28:	46bd      	mov	sp, r7
 8002d2a:	bd90      	pop	{r4, r7, pc}

08002d2c <lis2dw12_write_reg>:
  *
  */
int32_t lis2dw12_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                           uint8_t *data,
                           uint16_t len)
{
 8002d2c:	b590      	push	{r4, r7, lr}
 8002d2e:	b087      	sub	sp, #28
 8002d30:	af00      	add	r7, sp, #0
 8002d32:	60f8      	str	r0, [r7, #12]
 8002d34:	607a      	str	r2, [r7, #4]
 8002d36:	461a      	mov	r2, r3
 8002d38:	460b      	mov	r3, r1
 8002d3a:	72fb      	strb	r3, [r7, #11]
 8002d3c:	4613      	mov	r3, r2
 8002d3e:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	681c      	ldr	r4, [r3, #0]
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	68d8      	ldr	r0, [r3, #12]
 8002d48:	893b      	ldrh	r3, [r7, #8]
 8002d4a:	7af9      	ldrb	r1, [r7, #11]
 8002d4c:	687a      	ldr	r2, [r7, #4]
 8002d4e:	47a0      	blx	r4
 8002d50:	6178      	str	r0, [r7, #20]

  return ret;
 8002d52:	697b      	ldr	r3, [r7, #20]
}
 8002d54:	4618      	mov	r0, r3
 8002d56:	371c      	adds	r7, #28
 8002d58:	46bd      	mov	sp, r7
 8002d5a:	bd90      	pop	{r4, r7, pc}

08002d5c <lis2dw12_power_mode_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_power_mode_set(stmdev_ctx_t *ctx,
                                lis2dw12_mode_t val)
{
 8002d5c:	b580      	push	{r7, lr}
 8002d5e:	b086      	sub	sp, #24
 8002d60:	af00      	add	r7, sp, #0
 8002d62:	6078      	str	r0, [r7, #4]
 8002d64:	460b      	mov	r3, r1
 8002d66:	70fb      	strb	r3, [r7, #3]
  lis2dw12_ctrl1_t ctrl1;
  lis2dw12_ctrl6_t ctrl6;
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL1, (uint8_t *) &ctrl1, 1);
 8002d68:	f107 0210 	add.w	r2, r7, #16
 8002d6c:	2301      	movs	r3, #1
 8002d6e:	2120      	movs	r1, #32
 8002d70:	6878      	ldr	r0, [r7, #4]
 8002d72:	f7ff ffc3 	bl	8002cfc <lis2dw12_read_reg>
 8002d76:	6178      	str	r0, [r7, #20]

  if (ret == 0)
 8002d78:	697b      	ldr	r3, [r7, #20]
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d118      	bne.n	8002db0 <lis2dw12_power_mode_set+0x54>
  {
    ctrl1.mode = ((uint8_t) val & 0x0CU) >> 2;
 8002d7e:	78fb      	ldrb	r3, [r7, #3]
 8002d80:	089b      	lsrs	r3, r3, #2
 8002d82:	f003 0303 	and.w	r3, r3, #3
 8002d86:	b2da      	uxtb	r2, r3
 8002d88:	7c3b      	ldrb	r3, [r7, #16]
 8002d8a:	f362 0383 	bfi	r3, r2, #2, #2
 8002d8e:	743b      	strb	r3, [r7, #16]
    ctrl1.lp_mode = (uint8_t) val & 0x03U ;
 8002d90:	78fb      	ldrb	r3, [r7, #3]
 8002d92:	f003 0303 	and.w	r3, r3, #3
 8002d96:	b2da      	uxtb	r2, r3
 8002d98:	7c3b      	ldrb	r3, [r7, #16]
 8002d9a:	f362 0301 	bfi	r3, r2, #0, #2
 8002d9e:	743b      	strb	r3, [r7, #16]
    ret = lis2dw12_write_reg(ctx, LIS2DW12_CTRL1, (uint8_t *) &ctrl1, 1);
 8002da0:	f107 0210 	add.w	r2, r7, #16
 8002da4:	2301      	movs	r3, #1
 8002da6:	2120      	movs	r1, #32
 8002da8:	6878      	ldr	r0, [r7, #4]
 8002daa:	f7ff ffbf 	bl	8002d2c <lis2dw12_write_reg>
 8002dae:	6178      	str	r0, [r7, #20]
  }

  if (ret == 0)
 8002db0:	697b      	ldr	r3, [r7, #20]
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d107      	bne.n	8002dc6 <lis2dw12_power_mode_set+0x6a>
  {
    ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL6, (uint8_t *) &ctrl6, 1);
 8002db6:	f107 020c 	add.w	r2, r7, #12
 8002dba:	2301      	movs	r3, #1
 8002dbc:	2125      	movs	r1, #37	; 0x25
 8002dbe:	6878      	ldr	r0, [r7, #4]
 8002dc0:	f7ff ff9c 	bl	8002cfc <lis2dw12_read_reg>
 8002dc4:	6178      	str	r0, [r7, #20]
  }

  if (ret == 0)
 8002dc6:	697b      	ldr	r3, [r7, #20]
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d110      	bne.n	8002dee <lis2dw12_power_mode_set+0x92>
  {
    ctrl6.low_noise = ((uint8_t) val & 0x10U) >> 4;
 8002dcc:	78fb      	ldrb	r3, [r7, #3]
 8002dce:	091b      	lsrs	r3, r3, #4
 8002dd0:	f003 0301 	and.w	r3, r3, #1
 8002dd4:	b2da      	uxtb	r2, r3
 8002dd6:	7b3b      	ldrb	r3, [r7, #12]
 8002dd8:	f362 0382 	bfi	r3, r2, #2, #1
 8002ddc:	733b      	strb	r3, [r7, #12]
    ret = lis2dw12_write_reg(ctx, LIS2DW12_CTRL6, (uint8_t *) &ctrl6, 1);
 8002dde:	f107 020c 	add.w	r2, r7, #12
 8002de2:	2301      	movs	r3, #1
 8002de4:	2125      	movs	r1, #37	; 0x25
 8002de6:	6878      	ldr	r0, [r7, #4]
 8002de8:	f7ff ffa0 	bl	8002d2c <lis2dw12_write_reg>
 8002dec:	6178      	str	r0, [r7, #20]
  }

  return ret;
 8002dee:	697b      	ldr	r3, [r7, #20]
}
 8002df0:	4618      	mov	r0, r3
 8002df2:	3718      	adds	r7, #24
 8002df4:	46bd      	mov	sp, r7
 8002df6:	bd80      	pop	{r7, pc}

08002df8 <lis2dw12_power_mode_get>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_power_mode_get(stmdev_ctx_t *ctx,
                                lis2dw12_mode_t *val)
{
 8002df8:	b580      	push	{r7, lr}
 8002dfa:	b086      	sub	sp, #24
 8002dfc:	af00      	add	r7, sp, #0
 8002dfe:	6078      	str	r0, [r7, #4]
 8002e00:	6039      	str	r1, [r7, #0]
  lis2dw12_ctrl1_t ctrl1;
  lis2dw12_ctrl6_t ctrl6;
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL1, (uint8_t *) &ctrl1, 1);
 8002e02:	f107 0210 	add.w	r2, r7, #16
 8002e06:	2301      	movs	r3, #1
 8002e08:	2120      	movs	r1, #32
 8002e0a:	6878      	ldr	r0, [r7, #4]
 8002e0c:	f7ff ff76 	bl	8002cfc <lis2dw12_read_reg>
 8002e10:	6178      	str	r0, [r7, #20]

  if (ret == 0)
 8002e12:	697b      	ldr	r3, [r7, #20]
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	f040 80a3 	bne.w	8002f60 <lis2dw12_power_mode_get+0x168>
  {
    ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL6, (uint8_t *) &ctrl6, 1);
 8002e1a:	f107 020c 	add.w	r2, r7, #12
 8002e1e:	2301      	movs	r3, #1
 8002e20:	2125      	movs	r1, #37	; 0x25
 8002e22:	6878      	ldr	r0, [r7, #4]
 8002e24:	f7ff ff6a 	bl	8002cfc <lis2dw12_read_reg>
 8002e28:	6178      	str	r0, [r7, #20]

    switch (((ctrl6.low_noise << 4) + (ctrl1.mode << 2) +
 8002e2a:	7b3b      	ldrb	r3, [r7, #12]
 8002e2c:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8002e30:	b2db      	uxtb	r3, r3
 8002e32:	011a      	lsls	r2, r3, #4
 8002e34:	7c3b      	ldrb	r3, [r7, #16]
 8002e36:	f3c3 0381 	ubfx	r3, r3, #2, #2
 8002e3a:	b2db      	uxtb	r3, r3
 8002e3c:	009b      	lsls	r3, r3, #2
 8002e3e:	4413      	add	r3, r2
             ctrl1.lp_mode))
 8002e40:	7c3a      	ldrb	r2, [r7, #16]
 8002e42:	f3c2 0201 	ubfx	r2, r2, #0, #2
 8002e46:	b2d2      	uxtb	r2, r2
    switch (((ctrl6.low_noise << 4) + (ctrl1.mode << 2) +
 8002e48:	4413      	add	r3, r2
 8002e4a:	2b1b      	cmp	r3, #27
 8002e4c:	f200 8084 	bhi.w	8002f58 <lis2dw12_power_mode_get+0x160>
 8002e50:	a201      	add	r2, pc, #4	; (adr r2, 8002e58 <lis2dw12_power_mode_get+0x60>)
 8002e52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e56:	bf00      	nop
 8002e58:	08002ee9 	.word	0x08002ee9
 8002e5c:	08002ee1 	.word	0x08002ee1
 8002e60:	08002ed9 	.word	0x08002ed9
 8002e64:	08002ed1 	.word	0x08002ed1
 8002e68:	08002ec9 	.word	0x08002ec9
 8002e6c:	08002f59 	.word	0x08002f59
 8002e70:	08002f59 	.word	0x08002f59
 8002e74:	08002f59 	.word	0x08002f59
 8002e78:	08002f09 	.word	0x08002f09
 8002e7c:	08002f01 	.word	0x08002f01
 8002e80:	08002ef9 	.word	0x08002ef9
 8002e84:	08002ef1 	.word	0x08002ef1
 8002e88:	08002f59 	.word	0x08002f59
 8002e8c:	08002f59 	.word	0x08002f59
 8002e90:	08002f59 	.word	0x08002f59
 8002e94:	08002f59 	.word	0x08002f59
 8002e98:	08002f31 	.word	0x08002f31
 8002e9c:	08002f29 	.word	0x08002f29
 8002ea0:	08002f21 	.word	0x08002f21
 8002ea4:	08002f19 	.word	0x08002f19
 8002ea8:	08002f11 	.word	0x08002f11
 8002eac:	08002f59 	.word	0x08002f59
 8002eb0:	08002f59 	.word	0x08002f59
 8002eb4:	08002f59 	.word	0x08002f59
 8002eb8:	08002f51 	.word	0x08002f51
 8002ebc:	08002f49 	.word	0x08002f49
 8002ec0:	08002f41 	.word	0x08002f41
 8002ec4:	08002f39 	.word	0x08002f39
    {
      case LIS2DW12_HIGH_PERFORMANCE:
        *val = LIS2DW12_HIGH_PERFORMANCE;
 8002ec8:	683b      	ldr	r3, [r7, #0]
 8002eca:	2204      	movs	r2, #4
 8002ecc:	701a      	strb	r2, [r3, #0]
        break;
 8002ece:	e048      	b.n	8002f62 <lis2dw12_power_mode_get+0x16a>

      case LIS2DW12_CONT_LOW_PWR_4:
        *val = LIS2DW12_CONT_LOW_PWR_4;
 8002ed0:	683b      	ldr	r3, [r7, #0]
 8002ed2:	2203      	movs	r2, #3
 8002ed4:	701a      	strb	r2, [r3, #0]
        break;
 8002ed6:	e044      	b.n	8002f62 <lis2dw12_power_mode_get+0x16a>

      case LIS2DW12_CONT_LOW_PWR_3:
        *val = LIS2DW12_CONT_LOW_PWR_3;
 8002ed8:	683b      	ldr	r3, [r7, #0]
 8002eda:	2202      	movs	r2, #2
 8002edc:	701a      	strb	r2, [r3, #0]
        break;
 8002ede:	e040      	b.n	8002f62 <lis2dw12_power_mode_get+0x16a>

      case LIS2DW12_CONT_LOW_PWR_2:
        *val = LIS2DW12_CONT_LOW_PWR_2;
 8002ee0:	683b      	ldr	r3, [r7, #0]
 8002ee2:	2201      	movs	r2, #1
 8002ee4:	701a      	strb	r2, [r3, #0]
        break;
 8002ee6:	e03c      	b.n	8002f62 <lis2dw12_power_mode_get+0x16a>

      case LIS2DW12_CONT_LOW_PWR_12bit:
        *val = LIS2DW12_CONT_LOW_PWR_12bit;
 8002ee8:	683b      	ldr	r3, [r7, #0]
 8002eea:	2200      	movs	r2, #0
 8002eec:	701a      	strb	r2, [r3, #0]
        break;
 8002eee:	e038      	b.n	8002f62 <lis2dw12_power_mode_get+0x16a>

      case LIS2DW12_SINGLE_LOW_PWR_4:
        *val = LIS2DW12_SINGLE_LOW_PWR_4;
 8002ef0:	683b      	ldr	r3, [r7, #0]
 8002ef2:	220b      	movs	r2, #11
 8002ef4:	701a      	strb	r2, [r3, #0]
        break;
 8002ef6:	e034      	b.n	8002f62 <lis2dw12_power_mode_get+0x16a>

      case LIS2DW12_SINGLE_LOW_PWR_3:
        *val = LIS2DW12_SINGLE_LOW_PWR_3;
 8002ef8:	683b      	ldr	r3, [r7, #0]
 8002efa:	220a      	movs	r2, #10
 8002efc:	701a      	strb	r2, [r3, #0]
        break;
 8002efe:	e030      	b.n	8002f62 <lis2dw12_power_mode_get+0x16a>

      case LIS2DW12_SINGLE_LOW_PWR_2:
        *val = LIS2DW12_SINGLE_LOW_PWR_2;
 8002f00:	683b      	ldr	r3, [r7, #0]
 8002f02:	2209      	movs	r2, #9
 8002f04:	701a      	strb	r2, [r3, #0]
        break;
 8002f06:	e02c      	b.n	8002f62 <lis2dw12_power_mode_get+0x16a>

      case LIS2DW12_SINGLE_LOW_PWR_12bit:
        *val = LIS2DW12_SINGLE_LOW_PWR_12bit;
 8002f08:	683b      	ldr	r3, [r7, #0]
 8002f0a:	2208      	movs	r2, #8
 8002f0c:	701a      	strb	r2, [r3, #0]
        break;
 8002f0e:	e028      	b.n	8002f62 <lis2dw12_power_mode_get+0x16a>

      case LIS2DW12_HIGH_PERFORMANCE_LOW_NOISE:
        *val = LIS2DW12_HIGH_PERFORMANCE_LOW_NOISE;
 8002f10:	683b      	ldr	r3, [r7, #0]
 8002f12:	2214      	movs	r2, #20
 8002f14:	701a      	strb	r2, [r3, #0]
        break;
 8002f16:	e024      	b.n	8002f62 <lis2dw12_power_mode_get+0x16a>

      case LIS2DW12_CONT_LOW_PWR_LOW_NOISE_4:
        *val = LIS2DW12_CONT_LOW_PWR_LOW_NOISE_4;
 8002f18:	683b      	ldr	r3, [r7, #0]
 8002f1a:	2213      	movs	r2, #19
 8002f1c:	701a      	strb	r2, [r3, #0]
        break;
 8002f1e:	e020      	b.n	8002f62 <lis2dw12_power_mode_get+0x16a>

      case LIS2DW12_CONT_LOW_PWR_LOW_NOISE_3:
        *val = LIS2DW12_CONT_LOW_PWR_LOW_NOISE_3;
 8002f20:	683b      	ldr	r3, [r7, #0]
 8002f22:	2212      	movs	r2, #18
 8002f24:	701a      	strb	r2, [r3, #0]
        break;
 8002f26:	e01c      	b.n	8002f62 <lis2dw12_power_mode_get+0x16a>

      case LIS2DW12_CONT_LOW_PWR_LOW_NOISE_2:
        *val = LIS2DW12_CONT_LOW_PWR_LOW_NOISE_2;
 8002f28:	683b      	ldr	r3, [r7, #0]
 8002f2a:	2211      	movs	r2, #17
 8002f2c:	701a      	strb	r2, [r3, #0]
        break;
 8002f2e:	e018      	b.n	8002f62 <lis2dw12_power_mode_get+0x16a>

      case LIS2DW12_CONT_LOW_PWR_LOW_NOISE_12bit:
        *val = LIS2DW12_CONT_LOW_PWR_LOW_NOISE_12bit;
 8002f30:	683b      	ldr	r3, [r7, #0]
 8002f32:	2210      	movs	r2, #16
 8002f34:	701a      	strb	r2, [r3, #0]
        break;
 8002f36:	e014      	b.n	8002f62 <lis2dw12_power_mode_get+0x16a>

      case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_4:
        *val = LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_4;
 8002f38:	683b      	ldr	r3, [r7, #0]
 8002f3a:	221b      	movs	r2, #27
 8002f3c:	701a      	strb	r2, [r3, #0]
        break;
 8002f3e:	e010      	b.n	8002f62 <lis2dw12_power_mode_get+0x16a>

      case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_3:
        *val = LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_3;
 8002f40:	683b      	ldr	r3, [r7, #0]
 8002f42:	221a      	movs	r2, #26
 8002f44:	701a      	strb	r2, [r3, #0]
        break;
 8002f46:	e00c      	b.n	8002f62 <lis2dw12_power_mode_get+0x16a>

      case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_2:
        *val = LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_2;
 8002f48:	683b      	ldr	r3, [r7, #0]
 8002f4a:	2219      	movs	r2, #25
 8002f4c:	701a      	strb	r2, [r3, #0]
        break;
 8002f4e:	e008      	b.n	8002f62 <lis2dw12_power_mode_get+0x16a>

      case LIS2DW12_SINGLE_LOW_LOW_NOISE_PWR_12bit:
        *val = LIS2DW12_SINGLE_LOW_LOW_NOISE_PWR_12bit;
 8002f50:	683b      	ldr	r3, [r7, #0]
 8002f52:	2218      	movs	r2, #24
 8002f54:	701a      	strb	r2, [r3, #0]
        break;
 8002f56:	e004      	b.n	8002f62 <lis2dw12_power_mode_get+0x16a>

      default:
        *val = LIS2DW12_HIGH_PERFORMANCE;
 8002f58:	683b      	ldr	r3, [r7, #0]
 8002f5a:	2204      	movs	r2, #4
 8002f5c:	701a      	strb	r2, [r3, #0]
        break;
 8002f5e:	e000      	b.n	8002f62 <lis2dw12_power_mode_get+0x16a>
    }
  }
 8002f60:	bf00      	nop

  return ret;
 8002f62:	697b      	ldr	r3, [r7, #20]
}
 8002f64:	4618      	mov	r0, r3
 8002f66:	3718      	adds	r7, #24
 8002f68:	46bd      	mov	sp, r7
 8002f6a:	bd80      	pop	{r7, pc}

08002f6c <lis2dw12_data_rate_set>:
  * @param  val      change the values of odr in reg CTRL1
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_data_rate_set(stmdev_ctx_t *ctx, lis2dw12_odr_t val)
{
 8002f6c:	b580      	push	{r7, lr}
 8002f6e:	b086      	sub	sp, #24
 8002f70:	af00      	add	r7, sp, #0
 8002f72:	6078      	str	r0, [r7, #4]
 8002f74:	460b      	mov	r3, r1
 8002f76:	70fb      	strb	r3, [r7, #3]
  lis2dw12_ctrl1_t ctrl1;
  lis2dw12_ctrl3_t ctrl3;
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL1, (uint8_t *) &ctrl1, 1);
 8002f78:	f107 0210 	add.w	r2, r7, #16
 8002f7c:	2301      	movs	r3, #1
 8002f7e:	2120      	movs	r1, #32
 8002f80:	6878      	ldr	r0, [r7, #4]
 8002f82:	f7ff febb 	bl	8002cfc <lis2dw12_read_reg>
 8002f86:	6178      	str	r0, [r7, #20]

  if (ret == 0)
 8002f88:	697b      	ldr	r3, [r7, #20]
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d10f      	bne.n	8002fae <lis2dw12_data_rate_set+0x42>
  {
    ctrl1.odr = (uint8_t) val;
 8002f8e:	78fb      	ldrb	r3, [r7, #3]
 8002f90:	f003 030f 	and.w	r3, r3, #15
 8002f94:	b2da      	uxtb	r2, r3
 8002f96:	7c3b      	ldrb	r3, [r7, #16]
 8002f98:	f362 1307 	bfi	r3, r2, #4, #4
 8002f9c:	743b      	strb	r3, [r7, #16]
    ret = lis2dw12_write_reg(ctx, LIS2DW12_CTRL1, (uint8_t *) &ctrl1, 1);
 8002f9e:	f107 0210 	add.w	r2, r7, #16
 8002fa2:	2301      	movs	r3, #1
 8002fa4:	2120      	movs	r1, #32
 8002fa6:	6878      	ldr	r0, [r7, #4]
 8002fa8:	f7ff fec0 	bl	8002d2c <lis2dw12_write_reg>
 8002fac:	6178      	str	r0, [r7, #20]
  }

  if (ret == 0)
 8002fae:	697b      	ldr	r3, [r7, #20]
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d107      	bne.n	8002fc4 <lis2dw12_data_rate_set+0x58>
  {
    ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL3, (uint8_t *) &ctrl3, 1);
 8002fb4:	f107 020c 	add.w	r2, r7, #12
 8002fb8:	2301      	movs	r3, #1
 8002fba:	2122      	movs	r1, #34	; 0x22
 8002fbc:	6878      	ldr	r0, [r7, #4]
 8002fbe:	f7ff fe9d 	bl	8002cfc <lis2dw12_read_reg>
 8002fc2:	6178      	str	r0, [r7, #20]
  }

  if (ret == 0)
 8002fc4:	697b      	ldr	r3, [r7, #20]
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d110      	bne.n	8002fec <lis2dw12_data_rate_set+0x80>
  {
    ctrl3.slp_mode = ((uint8_t) val & 0x30U) >> 4;
 8002fca:	78fb      	ldrb	r3, [r7, #3]
 8002fcc:	091b      	lsrs	r3, r3, #4
 8002fce:	f003 0303 	and.w	r3, r3, #3
 8002fd2:	b2da      	uxtb	r2, r3
 8002fd4:	7b3b      	ldrb	r3, [r7, #12]
 8002fd6:	f362 0301 	bfi	r3, r2, #0, #2
 8002fda:	733b      	strb	r3, [r7, #12]
    ret = lis2dw12_write_reg(ctx, LIS2DW12_CTRL3, (uint8_t *) &ctrl3, 1);
 8002fdc:	f107 020c 	add.w	r2, r7, #12
 8002fe0:	2301      	movs	r3, #1
 8002fe2:	2122      	movs	r1, #34	; 0x22
 8002fe4:	6878      	ldr	r0, [r7, #4]
 8002fe6:	f7ff fea1 	bl	8002d2c <lis2dw12_write_reg>
 8002fea:	6178      	str	r0, [r7, #20]
  }

  return ret;
 8002fec:	697b      	ldr	r3, [r7, #20]
}
 8002fee:	4618      	mov	r0, r3
 8002ff0:	3718      	adds	r7, #24
 8002ff2:	46bd      	mov	sp, r7
 8002ff4:	bd80      	pop	{r7, pc}
	...

08002ff8 <lis2dw12_data_rate_get>:
  * @param  val      Get the values of odr in reg CTRL1
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_data_rate_get(stmdev_ctx_t *ctx, lis2dw12_odr_t *val)
{
 8002ff8:	b580      	push	{r7, lr}
 8002ffa:	b086      	sub	sp, #24
 8002ffc:	af00      	add	r7, sp, #0
 8002ffe:	6078      	str	r0, [r7, #4]
 8003000:	6039      	str	r1, [r7, #0]
  lis2dw12_ctrl1_t ctrl1;
  lis2dw12_ctrl3_t ctrl3;
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL1, (uint8_t *) &ctrl1, 1);
 8003002:	f107 0210 	add.w	r2, r7, #16
 8003006:	2301      	movs	r3, #1
 8003008:	2120      	movs	r1, #32
 800300a:	6878      	ldr	r0, [r7, #4]
 800300c:	f7ff fe76 	bl	8002cfc <lis2dw12_read_reg>
 8003010:	6178      	str	r0, [r7, #20]

  if (ret == 0)
 8003012:	697b      	ldr	r3, [r7, #20]
 8003014:	2b00      	cmp	r3, #0
 8003016:	f040 80b3 	bne.w	8003180 <lis2dw12_data_rate_get+0x188>
  {
    ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL3, (uint8_t *) &ctrl3, 1);
 800301a:	f107 020c 	add.w	r2, r7, #12
 800301e:	2301      	movs	r3, #1
 8003020:	2122      	movs	r1, #34	; 0x22
 8003022:	6878      	ldr	r0, [r7, #4]
 8003024:	f7ff fe6a 	bl	8002cfc <lis2dw12_read_reg>
 8003028:	6178      	str	r0, [r7, #20]

    switch ((ctrl3.slp_mode << 4) + ctrl1.odr)
 800302a:	7b3b      	ldrb	r3, [r7, #12]
 800302c:	f3c3 0301 	ubfx	r3, r3, #0, #2
 8003030:	b2db      	uxtb	r3, r3
 8003032:	011b      	lsls	r3, r3, #4
 8003034:	7c3a      	ldrb	r2, [r7, #16]
 8003036:	f3c2 1203 	ubfx	r2, r2, #4, #4
 800303a:	b2d2      	uxtb	r2, r2
 800303c:	4413      	add	r3, r2
 800303e:	2b32      	cmp	r3, #50	; 0x32
 8003040:	f200 809a 	bhi.w	8003178 <lis2dw12_data_rate_get+0x180>
 8003044:	a201      	add	r2, pc, #4	; (adr r2, 800304c <lis2dw12_data_rate_get+0x54>)
 8003046:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800304a:	bf00      	nop
 800304c:	08003119 	.word	0x08003119
 8003050:	08003121 	.word	0x08003121
 8003054:	08003129 	.word	0x08003129
 8003058:	08003131 	.word	0x08003131
 800305c:	08003139 	.word	0x08003139
 8003060:	08003141 	.word	0x08003141
 8003064:	08003149 	.word	0x08003149
 8003068:	08003151 	.word	0x08003151
 800306c:	08003159 	.word	0x08003159
 8003070:	08003161 	.word	0x08003161
 8003074:	08003179 	.word	0x08003179
 8003078:	08003179 	.word	0x08003179
 800307c:	08003179 	.word	0x08003179
 8003080:	08003179 	.word	0x08003179
 8003084:	08003179 	.word	0x08003179
 8003088:	08003179 	.word	0x08003179
 800308c:	08003179 	.word	0x08003179
 8003090:	08003179 	.word	0x08003179
 8003094:	08003171 	.word	0x08003171
 8003098:	08003179 	.word	0x08003179
 800309c:	08003179 	.word	0x08003179
 80030a0:	08003179 	.word	0x08003179
 80030a4:	08003179 	.word	0x08003179
 80030a8:	08003179 	.word	0x08003179
 80030ac:	08003179 	.word	0x08003179
 80030b0:	08003179 	.word	0x08003179
 80030b4:	08003179 	.word	0x08003179
 80030b8:	08003179 	.word	0x08003179
 80030bc:	08003179 	.word	0x08003179
 80030c0:	08003179 	.word	0x08003179
 80030c4:	08003179 	.word	0x08003179
 80030c8:	08003179 	.word	0x08003179
 80030cc:	08003179 	.word	0x08003179
 80030d0:	08003179 	.word	0x08003179
 80030d4:	08003179 	.word	0x08003179
 80030d8:	08003179 	.word	0x08003179
 80030dc:	08003179 	.word	0x08003179
 80030e0:	08003179 	.word	0x08003179
 80030e4:	08003179 	.word	0x08003179
 80030e8:	08003179 	.word	0x08003179
 80030ec:	08003179 	.word	0x08003179
 80030f0:	08003179 	.word	0x08003179
 80030f4:	08003179 	.word	0x08003179
 80030f8:	08003179 	.word	0x08003179
 80030fc:	08003179 	.word	0x08003179
 8003100:	08003179 	.word	0x08003179
 8003104:	08003179 	.word	0x08003179
 8003108:	08003179 	.word	0x08003179
 800310c:	08003179 	.word	0x08003179
 8003110:	08003179 	.word	0x08003179
 8003114:	08003169 	.word	0x08003169
    {
      case LIS2DW12_XL_ODR_OFF:
        *val = LIS2DW12_XL_ODR_OFF;
 8003118:	683b      	ldr	r3, [r7, #0]
 800311a:	2200      	movs	r2, #0
 800311c:	701a      	strb	r2, [r3, #0]
        break;
 800311e:	e030      	b.n	8003182 <lis2dw12_data_rate_get+0x18a>

      case LIS2DW12_XL_ODR_1Hz6_LP_ONLY:
        *val = LIS2DW12_XL_ODR_1Hz6_LP_ONLY;
 8003120:	683b      	ldr	r3, [r7, #0]
 8003122:	2201      	movs	r2, #1
 8003124:	701a      	strb	r2, [r3, #0]
        break;
 8003126:	e02c      	b.n	8003182 <lis2dw12_data_rate_get+0x18a>

      case LIS2DW12_XL_ODR_12Hz5:
        *val = LIS2DW12_XL_ODR_12Hz5;
 8003128:	683b      	ldr	r3, [r7, #0]
 800312a:	2202      	movs	r2, #2
 800312c:	701a      	strb	r2, [r3, #0]
        break;
 800312e:	e028      	b.n	8003182 <lis2dw12_data_rate_get+0x18a>

      case LIS2DW12_XL_ODR_25Hz:
        *val = LIS2DW12_XL_ODR_25Hz;
 8003130:	683b      	ldr	r3, [r7, #0]
 8003132:	2203      	movs	r2, #3
 8003134:	701a      	strb	r2, [r3, #0]
        break;
 8003136:	e024      	b.n	8003182 <lis2dw12_data_rate_get+0x18a>

      case LIS2DW12_XL_ODR_50Hz:
        *val = LIS2DW12_XL_ODR_50Hz;
 8003138:	683b      	ldr	r3, [r7, #0]
 800313a:	2204      	movs	r2, #4
 800313c:	701a      	strb	r2, [r3, #0]
        break;
 800313e:	e020      	b.n	8003182 <lis2dw12_data_rate_get+0x18a>

      case LIS2DW12_XL_ODR_100Hz:
        *val = LIS2DW12_XL_ODR_100Hz;
 8003140:	683b      	ldr	r3, [r7, #0]
 8003142:	2205      	movs	r2, #5
 8003144:	701a      	strb	r2, [r3, #0]
        break;
 8003146:	e01c      	b.n	8003182 <lis2dw12_data_rate_get+0x18a>

      case LIS2DW12_XL_ODR_200Hz:
        *val = LIS2DW12_XL_ODR_200Hz;
 8003148:	683b      	ldr	r3, [r7, #0]
 800314a:	2206      	movs	r2, #6
 800314c:	701a      	strb	r2, [r3, #0]
        break;
 800314e:	e018      	b.n	8003182 <lis2dw12_data_rate_get+0x18a>

      case LIS2DW12_XL_ODR_400Hz:
        *val = LIS2DW12_XL_ODR_400Hz;
 8003150:	683b      	ldr	r3, [r7, #0]
 8003152:	2207      	movs	r2, #7
 8003154:	701a      	strb	r2, [r3, #0]
        break;
 8003156:	e014      	b.n	8003182 <lis2dw12_data_rate_get+0x18a>

      case LIS2DW12_XL_ODR_800Hz:
        *val = LIS2DW12_XL_ODR_800Hz;
 8003158:	683b      	ldr	r3, [r7, #0]
 800315a:	2208      	movs	r2, #8
 800315c:	701a      	strb	r2, [r3, #0]
        break;
 800315e:	e010      	b.n	8003182 <lis2dw12_data_rate_get+0x18a>

      case LIS2DW12_XL_ODR_1k6Hz:
        *val = LIS2DW12_XL_ODR_1k6Hz;
 8003160:	683b      	ldr	r3, [r7, #0]
 8003162:	2209      	movs	r2, #9
 8003164:	701a      	strb	r2, [r3, #0]
        break;
 8003166:	e00c      	b.n	8003182 <lis2dw12_data_rate_get+0x18a>

      case LIS2DW12_XL_SET_SW_TRIG:
        *val = LIS2DW12_XL_SET_SW_TRIG;
 8003168:	683b      	ldr	r3, [r7, #0]
 800316a:	2232      	movs	r2, #50	; 0x32
 800316c:	701a      	strb	r2, [r3, #0]
        break;
 800316e:	e008      	b.n	8003182 <lis2dw12_data_rate_get+0x18a>

      case LIS2DW12_XL_SET_PIN_TRIG:
        *val = LIS2DW12_XL_SET_PIN_TRIG;
 8003170:	683b      	ldr	r3, [r7, #0]
 8003172:	2212      	movs	r2, #18
 8003174:	701a      	strb	r2, [r3, #0]
        break;
 8003176:	e004      	b.n	8003182 <lis2dw12_data_rate_get+0x18a>

      default:
        *val = LIS2DW12_XL_ODR_OFF;
 8003178:	683b      	ldr	r3, [r7, #0]
 800317a:	2200      	movs	r2, #0
 800317c:	701a      	strb	r2, [r3, #0]
        break;
 800317e:	e000      	b.n	8003182 <lis2dw12_data_rate_get+0x18a>
    }
  }
 8003180:	bf00      	nop

  return ret;
 8003182:	697b      	ldr	r3, [r7, #20]
}
 8003184:	4618      	mov	r0, r3
 8003186:	3718      	adds	r7, #24
 8003188:	46bd      	mov	sp, r7
 800318a:	bd80      	pop	{r7, pc}

0800318c <lis2dw12_block_data_update_set>:
  * @param  val      change the values of bdu in reg CTRL2
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
 800318c:	b580      	push	{r7, lr}
 800318e:	b084      	sub	sp, #16
 8003190:	af00      	add	r7, sp, #0
 8003192:	6078      	str	r0, [r7, #4]
 8003194:	460b      	mov	r3, r1
 8003196:	70fb      	strb	r3, [r7, #3]
  lis2dw12_ctrl2_t reg;
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL2, (uint8_t *) &reg, 1);
 8003198:	f107 0208 	add.w	r2, r7, #8
 800319c:	2301      	movs	r3, #1
 800319e:	2121      	movs	r1, #33	; 0x21
 80031a0:	6878      	ldr	r0, [r7, #4]
 80031a2:	f7ff fdab 	bl	8002cfc <lis2dw12_read_reg>
 80031a6:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d10f      	bne.n	80031ce <lis2dw12_block_data_update_set+0x42>
  {
    reg.bdu = val;
 80031ae:	78fb      	ldrb	r3, [r7, #3]
 80031b0:	f003 0301 	and.w	r3, r3, #1
 80031b4:	b2da      	uxtb	r2, r3
 80031b6:	7a3b      	ldrb	r3, [r7, #8]
 80031b8:	f362 03c3 	bfi	r3, r2, #3, #1
 80031bc:	723b      	strb	r3, [r7, #8]
    ret = lis2dw12_write_reg(ctx, LIS2DW12_CTRL2, (uint8_t *) &reg, 1);
 80031be:	f107 0208 	add.w	r2, r7, #8
 80031c2:	2301      	movs	r3, #1
 80031c4:	2121      	movs	r1, #33	; 0x21
 80031c6:	6878      	ldr	r0, [r7, #4]
 80031c8:	f7ff fdb0 	bl	8002d2c <lis2dw12_write_reg>
 80031cc:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80031ce:	68fb      	ldr	r3, [r7, #12]
}
 80031d0:	4618      	mov	r0, r3
 80031d2:	3710      	adds	r7, #16
 80031d4:	46bd      	mov	sp, r7
 80031d6:	bd80      	pop	{r7, pc}

080031d8 <lis2dw12_full_scale_set>:
  * @param  val      change the values of fs in reg CTRL6
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_full_scale_set(stmdev_ctx_t *ctx, lis2dw12_fs_t val)
{
 80031d8:	b580      	push	{r7, lr}
 80031da:	b084      	sub	sp, #16
 80031dc:	af00      	add	r7, sp, #0
 80031de:	6078      	str	r0, [r7, #4]
 80031e0:	460b      	mov	r3, r1
 80031e2:	70fb      	strb	r3, [r7, #3]
  lis2dw12_ctrl6_t reg;
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL6, (uint8_t *) &reg, 1);
 80031e4:	f107 0208 	add.w	r2, r7, #8
 80031e8:	2301      	movs	r3, #1
 80031ea:	2125      	movs	r1, #37	; 0x25
 80031ec:	6878      	ldr	r0, [r7, #4]
 80031ee:	f7ff fd85 	bl	8002cfc <lis2dw12_read_reg>
 80031f2:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d10f      	bne.n	800321a <lis2dw12_full_scale_set+0x42>
  {
    reg.fs = (uint8_t) val;
 80031fa:	78fb      	ldrb	r3, [r7, #3]
 80031fc:	f003 0303 	and.w	r3, r3, #3
 8003200:	b2da      	uxtb	r2, r3
 8003202:	7a3b      	ldrb	r3, [r7, #8]
 8003204:	f362 1305 	bfi	r3, r2, #4, #2
 8003208:	723b      	strb	r3, [r7, #8]
    ret = lis2dw12_write_reg(ctx, LIS2DW12_CTRL6, (uint8_t *) &reg, 1);
 800320a:	f107 0208 	add.w	r2, r7, #8
 800320e:	2301      	movs	r3, #1
 8003210:	2125      	movs	r1, #37	; 0x25
 8003212:	6878      	ldr	r0, [r7, #4]
 8003214:	f7ff fd8a 	bl	8002d2c <lis2dw12_write_reg>
 8003218:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 800321a:	68fb      	ldr	r3, [r7, #12]
}
 800321c:	4618      	mov	r0, r3
 800321e:	3710      	adds	r7, #16
 8003220:	46bd      	mov	sp, r7
 8003222:	bd80      	pop	{r7, pc}

08003224 <lis2dw12_full_scale_get>:
  * @param  val      Get the values of fs in reg CTRL6
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_full_scale_get(stmdev_ctx_t *ctx, lis2dw12_fs_t *val)
{
 8003224:	b580      	push	{r7, lr}
 8003226:	b084      	sub	sp, #16
 8003228:	af00      	add	r7, sp, #0
 800322a:	6078      	str	r0, [r7, #4]
 800322c:	6039      	str	r1, [r7, #0]
  lis2dw12_ctrl6_t reg;
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL6, (uint8_t *) &reg, 1);
 800322e:	f107 0208 	add.w	r2, r7, #8
 8003232:	2301      	movs	r3, #1
 8003234:	2125      	movs	r1, #37	; 0x25
 8003236:	6878      	ldr	r0, [r7, #4]
 8003238:	f7ff fd60 	bl	8002cfc <lis2dw12_read_reg>
 800323c:	60f8      	str	r0, [r7, #12]

  switch (reg.fs)
 800323e:	7a3b      	ldrb	r3, [r7, #8]
 8003240:	f3c3 1301 	ubfx	r3, r3, #4, #2
 8003244:	b2db      	uxtb	r3, r3
 8003246:	2b03      	cmp	r3, #3
 8003248:	d81a      	bhi.n	8003280 <lis2dw12_full_scale_get+0x5c>
 800324a:	a201      	add	r2, pc, #4	; (adr r2, 8003250 <lis2dw12_full_scale_get+0x2c>)
 800324c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003250:	08003261 	.word	0x08003261
 8003254:	08003269 	.word	0x08003269
 8003258:	08003271 	.word	0x08003271
 800325c:	08003279 	.word	0x08003279
  {
    case LIS2DW12_2g:
      *val = LIS2DW12_2g;
 8003260:	683b      	ldr	r3, [r7, #0]
 8003262:	2200      	movs	r2, #0
 8003264:	701a      	strb	r2, [r3, #0]
      break;
 8003266:	e00f      	b.n	8003288 <lis2dw12_full_scale_get+0x64>

    case LIS2DW12_4g:
      *val = LIS2DW12_4g;
 8003268:	683b      	ldr	r3, [r7, #0]
 800326a:	2201      	movs	r2, #1
 800326c:	701a      	strb	r2, [r3, #0]
      break;
 800326e:	e00b      	b.n	8003288 <lis2dw12_full_scale_get+0x64>

    case LIS2DW12_8g:
      *val = LIS2DW12_8g;
 8003270:	683b      	ldr	r3, [r7, #0]
 8003272:	2202      	movs	r2, #2
 8003274:	701a      	strb	r2, [r3, #0]
      break;
 8003276:	e007      	b.n	8003288 <lis2dw12_full_scale_get+0x64>

    case LIS2DW12_16g:
      *val = LIS2DW12_16g;
 8003278:	683b      	ldr	r3, [r7, #0]
 800327a:	2203      	movs	r2, #3
 800327c:	701a      	strb	r2, [r3, #0]
      break;
 800327e:	e003      	b.n	8003288 <lis2dw12_full_scale_get+0x64>

    default:
      *val = LIS2DW12_2g;
 8003280:	683b      	ldr	r3, [r7, #0]
 8003282:	2200      	movs	r2, #0
 8003284:	701a      	strb	r2, [r3, #0]
      break;
 8003286:	bf00      	nop
  }

  return ret;
 8003288:	68fb      	ldr	r3, [r7, #12]
}
 800328a:	4618      	mov	r0, r3
 800328c:	3710      	adds	r7, #16
 800328e:	46bd      	mov	sp, r7
 8003290:	bd80      	pop	{r7, pc}
 8003292:	bf00      	nop

08003294 <lis2dw12_acceleration_raw_get>:
  * @param  val      buffer that stores data read
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_acceleration_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 8003294:	b580      	push	{r7, lr}
 8003296:	b086      	sub	sp, #24
 8003298:	af00      	add	r7, sp, #0
 800329a:	6078      	str	r0, [r7, #4]
 800329c:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_OUT_X_L, buff, 6);
 800329e:	f107 020c 	add.w	r2, r7, #12
 80032a2:	2306      	movs	r3, #6
 80032a4:	2128      	movs	r1, #40	; 0x28
 80032a6:	6878      	ldr	r0, [r7, #4]
 80032a8:	f7ff fd28 	bl	8002cfc <lis2dw12_read_reg>
 80032ac:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 80032ae:	7b7b      	ldrb	r3, [r7, #13]
 80032b0:	b21a      	sxth	r2, r3
 80032b2:	683b      	ldr	r3, [r7, #0]
 80032b4:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 80032b6:	683b      	ldr	r3, [r7, #0]
 80032b8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80032bc:	b29b      	uxth	r3, r3
 80032be:	021b      	lsls	r3, r3, #8
 80032c0:	b29a      	uxth	r2, r3
 80032c2:	7b3b      	ldrb	r3, [r7, #12]
 80032c4:	b29b      	uxth	r3, r3
 80032c6:	4413      	add	r3, r2
 80032c8:	b29b      	uxth	r3, r3
 80032ca:	b21a      	sxth	r2, r3
 80032cc:	683b      	ldr	r3, [r7, #0]
 80032ce:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 80032d0:	7bfa      	ldrb	r2, [r7, #15]
 80032d2:	683b      	ldr	r3, [r7, #0]
 80032d4:	3302      	adds	r3, #2
 80032d6:	b212      	sxth	r2, r2
 80032d8:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 80032da:	683b      	ldr	r3, [r7, #0]
 80032dc:	3302      	adds	r3, #2
 80032de:	f9b3 3000 	ldrsh.w	r3, [r3]
 80032e2:	b29b      	uxth	r3, r3
 80032e4:	021b      	lsls	r3, r3, #8
 80032e6:	b29a      	uxth	r2, r3
 80032e8:	7bbb      	ldrb	r3, [r7, #14]
 80032ea:	b29b      	uxth	r3, r3
 80032ec:	4413      	add	r3, r2
 80032ee:	b29a      	uxth	r2, r3
 80032f0:	683b      	ldr	r3, [r7, #0]
 80032f2:	3302      	adds	r3, #2
 80032f4:	b212      	sxth	r2, r2
 80032f6:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 80032f8:	7c7a      	ldrb	r2, [r7, #17]
 80032fa:	683b      	ldr	r3, [r7, #0]
 80032fc:	3304      	adds	r3, #4
 80032fe:	b212      	sxth	r2, r2
 8003300:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 8003302:	683b      	ldr	r3, [r7, #0]
 8003304:	3304      	adds	r3, #4
 8003306:	f9b3 3000 	ldrsh.w	r3, [r3]
 800330a:	b29b      	uxth	r3, r3
 800330c:	021b      	lsls	r3, r3, #8
 800330e:	b29a      	uxth	r2, r3
 8003310:	7c3b      	ldrb	r3, [r7, #16]
 8003312:	b29b      	uxth	r3, r3
 8003314:	4413      	add	r3, r2
 8003316:	b29a      	uxth	r2, r3
 8003318:	683b      	ldr	r3, [r7, #0]
 800331a:	3304      	adds	r3, #4
 800331c:	b212      	sxth	r2, r2
 800331e:	801a      	strh	r2, [r3, #0]

  return ret;
 8003320:	697b      	ldr	r3, [r7, #20]
}
 8003322:	4618      	mov	r0, r3
 8003324:	3718      	adds	r7, #24
 8003326:	46bd      	mov	sp, r7
 8003328:	bd80      	pop	{r7, pc}

0800332a <lis2dw12_device_id_get>:
  * @param  buff     buffer that stores data read
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 800332a:	b580      	push	{r7, lr}
 800332c:	b084      	sub	sp, #16
 800332e:	af00      	add	r7, sp, #0
 8003330:	6078      	str	r0, [r7, #4]
 8003332:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_WHO_AM_I, buff, 1);
 8003334:	2301      	movs	r3, #1
 8003336:	683a      	ldr	r2, [r7, #0]
 8003338:	210f      	movs	r1, #15
 800333a:	6878      	ldr	r0, [r7, #4]
 800333c:	f7ff fcde 	bl	8002cfc <lis2dw12_read_reg>
 8003340:	60f8      	str	r0, [r7, #12]

  return ret;
 8003342:	68fb      	ldr	r3, [r7, #12]
}
 8003344:	4618      	mov	r0, r3
 8003346:	3710      	adds	r7, #16
 8003348:	46bd      	mov	sp, r7
 800334a:	bd80      	pop	{r7, pc}

0800334c <lis2dw12_auto_increment_set>:
  * @param  val      change the values of if_add_inc in reg CTRL2
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_auto_increment_set(stmdev_ctx_t *ctx, uint8_t val)
{
 800334c:	b580      	push	{r7, lr}
 800334e:	b084      	sub	sp, #16
 8003350:	af00      	add	r7, sp, #0
 8003352:	6078      	str	r0, [r7, #4]
 8003354:	460b      	mov	r3, r1
 8003356:	70fb      	strb	r3, [r7, #3]
  lis2dw12_ctrl2_t reg;
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL2, (uint8_t *) &reg, 1);
 8003358:	f107 0208 	add.w	r2, r7, #8
 800335c:	2301      	movs	r3, #1
 800335e:	2121      	movs	r1, #33	; 0x21
 8003360:	6878      	ldr	r0, [r7, #4]
 8003362:	f7ff fccb 	bl	8002cfc <lis2dw12_read_reg>
 8003366:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	2b00      	cmp	r3, #0
 800336c:	d10f      	bne.n	800338e <lis2dw12_auto_increment_set+0x42>
  {
    reg.if_add_inc = val;
 800336e:	78fb      	ldrb	r3, [r7, #3]
 8003370:	f003 0301 	and.w	r3, r3, #1
 8003374:	b2da      	uxtb	r2, r3
 8003376:	7a3b      	ldrb	r3, [r7, #8]
 8003378:	f362 0382 	bfi	r3, r2, #2, #1
 800337c:	723b      	strb	r3, [r7, #8]
    ret = lis2dw12_write_reg(ctx, LIS2DW12_CTRL2, (uint8_t *) &reg, 1);
 800337e:	f107 0208 	add.w	r2, r7, #8
 8003382:	2301      	movs	r3, #1
 8003384:	2121      	movs	r1, #33	; 0x21
 8003386:	6878      	ldr	r0, [r7, #4]
 8003388:	f7ff fcd0 	bl	8002d2c <lis2dw12_write_reg>
 800338c:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 800338e:	68fb      	ldr	r3, [r7, #12]
}
 8003390:	4618      	mov	r0, r3
 8003392:	3710      	adds	r7, #16
 8003394:	46bd      	mov	sp, r7
 8003396:	bd80      	pop	{r7, pc}

08003398 <lis2dw12_fifo_mode_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_fifo_mode_set(stmdev_ctx_t *ctx,
                               lis2dw12_fmode_t val)
{
 8003398:	b580      	push	{r7, lr}
 800339a:	b084      	sub	sp, #16
 800339c:	af00      	add	r7, sp, #0
 800339e:	6078      	str	r0, [r7, #4]
 80033a0:	460b      	mov	r3, r1
 80033a2:	70fb      	strb	r3, [r7, #3]
  lis2dw12_fifo_ctrl_t reg;
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_FIFO_CTRL, (uint8_t *) &reg, 1);
 80033a4:	f107 0208 	add.w	r2, r7, #8
 80033a8:	2301      	movs	r3, #1
 80033aa:	212e      	movs	r1, #46	; 0x2e
 80033ac:	6878      	ldr	r0, [r7, #4]
 80033ae:	f7ff fca5 	bl	8002cfc <lis2dw12_read_reg>
 80033b2:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d10f      	bne.n	80033da <lis2dw12_fifo_mode_set+0x42>
  {
    reg.fmode = (uint8_t) val;
 80033ba:	78fb      	ldrb	r3, [r7, #3]
 80033bc:	f003 0307 	and.w	r3, r3, #7
 80033c0:	b2da      	uxtb	r2, r3
 80033c2:	7a3b      	ldrb	r3, [r7, #8]
 80033c4:	f362 1347 	bfi	r3, r2, #5, #3
 80033c8:	723b      	strb	r3, [r7, #8]
    ret = lis2dw12_write_reg(ctx, LIS2DW12_FIFO_CTRL, (uint8_t *) &reg, 1);
 80033ca:	f107 0208 	add.w	r2, r7, #8
 80033ce:	2301      	movs	r3, #1
 80033d0:	212e      	movs	r1, #46	; 0x2e
 80033d2:	6878      	ldr	r0, [r7, #4]
 80033d4:	f7ff fcaa 	bl	8002d2c <lis2dw12_write_reg>
 80033d8:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80033da:	68fb      	ldr	r3, [r7, #12]
}
 80033dc:	4618      	mov	r0, r3
 80033de:	3710      	adds	r7, #16
 80033e0:	46bd      	mov	sp, r7
 80033e2:	bd80      	pop	{r7, pc}

080033e4 <LIS2MDL_RegisterBusIO>:
  * @brief  Register Component Bus IO operations
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_RegisterBusIO(LIS2MDL_Object_t *pObj, LIS2MDL_IO_t *pIO)
{
 80033e4:	b580      	push	{r7, lr}
 80033e6:	b084      	sub	sp, #16
 80033e8:	af00      	add	r7, sp, #0
 80033ea:	6078      	str	r0, [r7, #4]
 80033ec:	6039      	str	r1, [r7, #0]
  int32_t ret = LIS2MDL_OK;
 80033ee:	2300      	movs	r3, #0
 80033f0:	60fb      	str	r3, [r7, #12]

  if (pObj == NULL)
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d103      	bne.n	8003400 <LIS2MDL_RegisterBusIO+0x1c>
  {
    ret = LIS2MDL_ERROR;
 80033f8:	f04f 33ff 	mov.w	r3, #4294967295
 80033fc:	60fb      	str	r3, [r7, #12]
 80033fe:	e067      	b.n	80034d0 <LIS2MDL_RegisterBusIO+0xec>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 8003400:	683b      	ldr	r3, [r7, #0]
 8003402:	681a      	ldr	r2, [r3, #0]
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 8003408:	683b      	ldr	r3, [r7, #0]
 800340a:	685a      	ldr	r2, [r3, #4]
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	605a      	str	r2, [r3, #4]
    pObj->IO.BusType   = pIO->BusType;
 8003410:	683b      	ldr	r3, [r7, #0]
 8003412:	689a      	ldr	r2, [r3, #8]
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	609a      	str	r2, [r3, #8]
    pObj->IO.Address   = pIO->Address;
 8003418:	683b      	ldr	r3, [r7, #0]
 800341a:	7b1a      	ldrb	r2, [r3, #12]
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	731a      	strb	r2, [r3, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 8003420:	683b      	ldr	r3, [r7, #0]
 8003422:	691a      	ldr	r2, [r3, #16]
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	611a      	str	r2, [r3, #16]
    pObj->IO.ReadReg   = pIO->ReadReg;
 8003428:	683b      	ldr	r3, [r7, #0]
 800342a:	695a      	ldr	r2, [r3, #20]
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	615a      	str	r2, [r3, #20]
    pObj->IO.GetTick   = pIO->GetTick;
 8003430:	683b      	ldr	r3, [r7, #0]
 8003432:	699a      	ldr	r2, [r3, #24]
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	619a      	str	r2, [r3, #24]

    pObj->Ctx.read_reg  = ReadMagRegWrap;
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	4a28      	ldr	r2, [pc, #160]	; (80034dc <LIS2MDL_RegisterBusIO+0xf8>)
 800343c:	625a      	str	r2, [r3, #36]	; 0x24
    pObj->Ctx.write_reg = WriteMagRegWrap;
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	4a27      	ldr	r2, [pc, #156]	; (80034e0 <LIS2MDL_RegisterBusIO+0xfc>)
 8003442:	621a      	str	r2, [r3, #32]
    pObj->Ctx.mdelay    = pIO->Delay;
 8003444:	683b      	ldr	r3, [r7, #0]
 8003446:	69da      	ldr	r2, [r3, #28]
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	629a      	str	r2, [r3, #40]	; 0x28
    pObj->Ctx.handle    = pObj;
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	687a      	ldr	r2, [r7, #4]
 8003450:	62da      	str	r2, [r3, #44]	; 0x2c

    if (pObj->IO.Init == NULL)
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	2b00      	cmp	r3, #0
 8003458:	d103      	bne.n	8003462 <LIS2MDL_RegisterBusIO+0x7e>
    {
      ret = LIS2MDL_ERROR;
 800345a:	f04f 33ff 	mov.w	r3, #4294967295
 800345e:	60fb      	str	r3, [r7, #12]
 8003460:	e036      	b.n	80034d0 <LIS2MDL_RegisterBusIO+0xec>
    }
    else if (pObj->IO.Init() != LIS2MDL_OK)
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	4798      	blx	r3
 8003468:	4603      	mov	r3, r0
 800346a:	2b00      	cmp	r3, #0
 800346c:	d003      	beq.n	8003476 <LIS2MDL_RegisterBusIO+0x92>
    {
      ret = LIS2MDL_ERROR;
 800346e:	f04f 33ff 	mov.w	r3, #4294967295
 8003472:	60fb      	str	r3, [r7, #12]
 8003474:	e02c      	b.n	80034d0 <LIS2MDL_RegisterBusIO+0xec>
    }
    else
    {
      if (pObj->IO.BusType != LIS2MDL_I2C_BUS) /* If the bus type is not I2C */
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	689b      	ldr	r3, [r3, #8]
 800347a:	2b00      	cmp	r3, #0
 800347c:	d028      	beq.n	80034d0 <LIS2MDL_RegisterBusIO+0xec>
      {
        /* Disable I2C interface support and enable eventually SPI 4-Wires only the first time */
        if (pObj->is_initialized == 0U)
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003484:	2b00      	cmp	r3, #0
 8003486:	d123      	bne.n	80034d0 <LIS2MDL_RegisterBusIO+0xec>
        {
          if (pObj->IO.BusType == LIS2MDL_SPI_4WIRES_BUS) /* SPI 4-Wires */
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	689b      	ldr	r3, [r3, #8]
 800348c:	2b01      	cmp	r3, #1
 800348e:	d10d      	bne.n	80034ac <LIS2MDL_RegisterBusIO+0xc8>
          {
            /* Enable SPI 4-Wires and disable I2C support on the component */
            uint8_t data = 0x34;
 8003490:	2334      	movs	r3, #52	; 0x34
 8003492:	72fb      	strb	r3, [r7, #11]

            if (LIS2MDL_Write_Reg(pObj, LIS2MDL_CFG_REG_C, data) != LIS2MDL_OK)
 8003494:	7afb      	ldrb	r3, [r7, #11]
 8003496:	461a      	mov	r2, r3
 8003498:	2162      	movs	r1, #98	; 0x62
 800349a:	6878      	ldr	r0, [r7, #4]
 800349c:	f000 fb1b 	bl	8003ad6 <LIS2MDL_Write_Reg>
 80034a0:	4603      	mov	r3, r0
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d014      	beq.n	80034d0 <LIS2MDL_RegisterBusIO+0xec>
            {
              return LIS2MDL_ERROR;
 80034a6:	f04f 33ff 	mov.w	r3, #4294967295
 80034aa:	e012      	b.n	80034d2 <LIS2MDL_RegisterBusIO+0xee>
            }
          }
          else if (pObj->IO.BusType == LSM6DSOX_SENSORHUB_LIS2MDL_I2C_BUS) /* LSM6DSOX SensorHub with LIS2MDL example */
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	689b      	ldr	r3, [r3, #8]
 80034b0:	2b03      	cmp	r3, #3
 80034b2:	d101      	bne.n	80034b8 <LIS2MDL_RegisterBusIO+0xd4>
          {
            /* Do nothing, just keep I2C support on the component */
            return ret;
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	e00c      	b.n	80034d2 <LIS2MDL_RegisterBusIO+0xee>
          }
          else
          {
            /* Disable I2C interface on the component */
            if (lis2mdl_i2c_interface_set(&(pObj->Ctx), LIS2MDL_I2C_DISABLE) != LIS2MDL_OK)
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	3320      	adds	r3, #32
 80034bc:	2101      	movs	r1, #1
 80034be:	4618      	mov	r0, r3
 80034c0:	f000 ff70 	bl	80043a4 <lis2mdl_i2c_interface_set>
 80034c4:	4603      	mov	r3, r0
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d002      	beq.n	80034d0 <LIS2MDL_RegisterBusIO+0xec>
            {
              return LIS2MDL_ERROR;
 80034ca:	f04f 33ff 	mov.w	r3, #4294967295
 80034ce:	e000      	b.n	80034d2 <LIS2MDL_RegisterBusIO+0xee>
        }
      }
    }
  }

  return ret;
 80034d0:	68fb      	ldr	r3, [r7, #12]
}
 80034d2:	4618      	mov	r0, r3
 80034d4:	3710      	adds	r7, #16
 80034d6:	46bd      	mov	sp, r7
 80034d8:	bd80      	pop	{r7, pc}
 80034da:	bf00      	nop
 80034dc:	08003b2d 	.word	0x08003b2d
 80034e0:	08003baf 	.word	0x08003baf

080034e4 <LIS2MDL_Init>:
  * @brief  Initialize the LIS2MDL sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_Init(LIS2MDL_Object_t *pObj)
{
 80034e4:	b580      	push	{r7, lr}
 80034e6:	b084      	sub	sp, #16
 80034e8:	af00      	add	r7, sp, #0
 80034ea:	6078      	str	r0, [r7, #4]
  lis2mdl_cfg_reg_a_t reg_a;
  lis2mdl_cfg_reg_c_t reg_c;

  if (pObj->IO.BusType == LSM6DSOX_SENSORHUB_LIS2MDL_I2C_BUS) /* LSM6DSOX SensorHub with LIS2MDL example */
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	689b      	ldr	r3, [r3, #8]
 80034f0:	2b03      	cmp	r3, #3
 80034f2:	d144      	bne.n	800357e <LIS2MDL_Init+0x9a>
  {
    /* Read configuration from CFG_REG_C & CFG_REG_A regs */
    if (LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData(pObj, LIS2MDL_CFG_REG_C, (uint8_t *)&reg_c, 1) != LIS2MDL_OK)
 80034f4:	f107 0208 	add.w	r2, r7, #8
 80034f8:	2301      	movs	r3, #1
 80034fa:	2162      	movs	r1, #98	; 0x62
 80034fc:	6878      	ldr	r0, [r7, #4]
 80034fe:	f000 fb97 	bl	8003c30 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData>
 8003502:	4603      	mov	r3, r0
 8003504:	2b00      	cmp	r3, #0
 8003506:	d002      	beq.n	800350e <LIS2MDL_Init+0x2a>
    {
      return LIS2MDL_ERROR;
 8003508:	f04f 33ff 	mov.w	r3, #4294967295
 800350c:	e06c      	b.n	80035e8 <LIS2MDL_Init+0x104>
    }
    if (LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData(pObj, LIS2MDL_CFG_REG_A, (uint8_t *)&reg_a, 1) != LIS2MDL_OK)
 800350e:	f107 020c 	add.w	r2, r7, #12
 8003512:	2301      	movs	r3, #1
 8003514:	2160      	movs	r1, #96	; 0x60
 8003516:	6878      	ldr	r0, [r7, #4]
 8003518:	f000 fb8a 	bl	8003c30 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData>
 800351c:	4603      	mov	r3, r0
 800351e:	2b00      	cmp	r3, #0
 8003520:	d002      	beq.n	8003528 <LIS2MDL_Init+0x44>
    {
      return LIS2MDL_ERROR;
 8003522:	f04f 33ff 	mov.w	r3, #4294967295
 8003526:	e05f      	b.n	80035e8 <LIS2MDL_Init+0x104>
    }

    /* Enable BDU */
    reg_c.bdu = PROPERTY_ENABLE;
 8003528:	7a3b      	ldrb	r3, [r7, #8]
 800352a:	f043 0310 	orr.w	r3, r3, #16
 800352e:	723b      	strb	r3, [r7, #8]

    /* Self Test disabled. */
    reg_c.self_test = PROPERTY_DISABLE;
 8003530:	7a3b      	ldrb	r3, [r7, #8]
 8003532:	f36f 0341 	bfc	r3, #1, #1
 8003536:	723b      	strb	r3, [r7, #8]

    /* Operating mode selection - power down */
    reg_a.md = LIS2MDL_POWER_DOWN;
 8003538:	7b3b      	ldrb	r3, [r7, #12]
 800353a:	2202      	movs	r2, #2
 800353c:	f362 0301 	bfi	r3, r2, #0, #2
 8003540:	733b      	strb	r3, [r7, #12]

    /* Output data rate selection */
    reg_a.odr = LIS2MDL_ODR_100Hz;
 8003542:	7b3b      	ldrb	r3, [r7, #12]
 8003544:	f043 030c 	orr.w	r3, r3, #12
 8003548:	733b      	strb	r3, [r7, #12]

    /* Write configuration to CFG_REG_C & CFG_REG_A regs */
    if (LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData(pObj, LIS2MDL_CFG_REG_C, (uint8_t *)&reg_c, 1) != LIS2MDL_OK)
 800354a:	f107 0208 	add.w	r2, r7, #8
 800354e:	2301      	movs	r3, #1
 8003550:	2162      	movs	r1, #98	; 0x62
 8003552:	6878      	ldr	r0, [r7, #4]
 8003554:	f000 fcab 	bl	8003eae <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData>
 8003558:	4603      	mov	r3, r0
 800355a:	2b00      	cmp	r3, #0
 800355c:	d002      	beq.n	8003564 <LIS2MDL_Init+0x80>
    {
      return LIS2MDL_ERROR;
 800355e:	f04f 33ff 	mov.w	r3, #4294967295
 8003562:	e041      	b.n	80035e8 <LIS2MDL_Init+0x104>
    }
    if (LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData(pObj, LIS2MDL_CFG_REG_A, (uint8_t *)&reg_a, 1) != LIS2MDL_OK)
 8003564:	f107 020c 	add.w	r2, r7, #12
 8003568:	2301      	movs	r3, #1
 800356a:	2160      	movs	r1, #96	; 0x60
 800356c:	6878      	ldr	r0, [r7, #4]
 800356e:	f000 fc9e 	bl	8003eae <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData>
 8003572:	4603      	mov	r3, r0
 8003574:	2b00      	cmp	r3, #0
 8003576:	d032      	beq.n	80035de <LIS2MDL_Init+0xfa>
    {
      return LIS2MDL_ERROR;
 8003578:	f04f 33ff 	mov.w	r3, #4294967295
 800357c:	e034      	b.n	80035e8 <LIS2MDL_Init+0x104>
    }
  }
  else
  {
    /* Enable BDU */
    if (lis2mdl_block_data_update_set(&(pObj->Ctx), PROPERTY_ENABLE) != LIS2MDL_OK)
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	3320      	adds	r3, #32
 8003582:	2101      	movs	r1, #1
 8003584:	4618      	mov	r0, r3
 8003586:	f000 fe65 	bl	8004254 <lis2mdl_block_data_update_set>
 800358a:	4603      	mov	r3, r0
 800358c:	2b00      	cmp	r3, #0
 800358e:	d002      	beq.n	8003596 <LIS2MDL_Init+0xb2>
    {
      return LIS2MDL_ERROR;
 8003590:	f04f 33ff 	mov.w	r3, #4294967295
 8003594:	e028      	b.n	80035e8 <LIS2MDL_Init+0x104>
    }

    /* Operating mode selection - power down */
    if (lis2mdl_operating_mode_set(&(pObj->Ctx), LIS2MDL_POWER_DOWN) != LIS2MDL_OK)
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	3320      	adds	r3, #32
 800359a:	2102      	movs	r1, #2
 800359c:	4618      	mov	r0, r3
 800359e:	f000 fdd4 	bl	800414a <lis2mdl_operating_mode_set>
 80035a2:	4603      	mov	r3, r0
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d002      	beq.n	80035ae <LIS2MDL_Init+0xca>
    {
      return LIS2MDL_ERROR;
 80035a8:	f04f 33ff 	mov.w	r3, #4294967295
 80035ac:	e01c      	b.n	80035e8 <LIS2MDL_Init+0x104>
    }

    /* Output data rate selection */
    if (lis2mdl_data_rate_set(&(pObj->Ctx), LIS2MDL_ODR_100Hz) != LIS2MDL_OK)
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	3320      	adds	r3, #32
 80035b2:	2103      	movs	r1, #3
 80035b4:	4618      	mov	r0, r3
 80035b6:	f000 fdee 	bl	8004196 <lis2mdl_data_rate_set>
 80035ba:	4603      	mov	r3, r0
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d002      	beq.n	80035c6 <LIS2MDL_Init+0xe2>
    {
      return LIS2MDL_ERROR;
 80035c0:	f04f 33ff 	mov.w	r3, #4294967295
 80035c4:	e010      	b.n	80035e8 <LIS2MDL_Init+0x104>
    }

    /* Self Test disabled. */
    if (lis2mdl_self_test_set(&(pObj->Ctx), PROPERTY_DISABLE) != LIS2MDL_OK)
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	3320      	adds	r3, #32
 80035ca:	2100      	movs	r1, #0
 80035cc:	4618      	mov	r0, r3
 80035ce:	f000 fec3 	bl	8004358 <lis2mdl_self_test_set>
 80035d2:	4603      	mov	r3, r0
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d002      	beq.n	80035de <LIS2MDL_Init+0xfa>
    {
      return LIS2MDL_ERROR;
 80035d8:	f04f 33ff 	mov.w	r3, #4294967295
 80035dc:	e004      	b.n	80035e8 <LIS2MDL_Init+0x104>
    }
  }

  pObj->is_initialized = 1;
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	2201      	movs	r2, #1
 80035e2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return LIS2MDL_OK;
 80035e6:	2300      	movs	r3, #0
}
 80035e8:	4618      	mov	r0, r3
 80035ea:	3710      	adds	r7, #16
 80035ec:	46bd      	mov	sp, r7
 80035ee:	bd80      	pop	{r7, pc}

080035f0 <LIS2MDL_DeInit>:
  * @brief  Deinitialize the LIS2MDL magnetometer sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_DeInit(LIS2MDL_Object_t *pObj)
{
 80035f0:	b580      	push	{r7, lr}
 80035f2:	b082      	sub	sp, #8
 80035f4:	af00      	add	r7, sp, #0
 80035f6:	6078      	str	r0, [r7, #4]
  /* Disable the component */
  if (LIS2MDL_MAG_Disable(pObj) != LIS2MDL_OK)
 80035f8:	6878      	ldr	r0, [r7, #4]
 80035fa:	f000 f8a5 	bl	8003748 <LIS2MDL_MAG_Disable>
 80035fe:	4603      	mov	r3, r0
 8003600:	2b00      	cmp	r3, #0
 8003602:	d002      	beq.n	800360a <LIS2MDL_DeInit+0x1a>
  {
    return LIS2MDL_ERROR;
 8003604:	f04f 33ff 	mov.w	r3, #4294967295
 8003608:	e004      	b.n	8003614 <LIS2MDL_DeInit+0x24>
  }

  pObj->is_initialized = 0;
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	2200      	movs	r2, #0
 800360e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return LIS2MDL_OK;
 8003612:	2300      	movs	r3, #0
}
 8003614:	4618      	mov	r0, r3
 8003616:	3708      	adds	r7, #8
 8003618:	46bd      	mov	sp, r7
 800361a:	bd80      	pop	{r7, pc}

0800361c <LIS2MDL_ReadID>:
  * @param  pObj the device pObj
  * @param  Id the WHO_AM_I value
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_ReadID(LIS2MDL_Object_t *pObj, uint8_t *Id)
{
 800361c:	b580      	push	{r7, lr}
 800361e:	b082      	sub	sp, #8
 8003620:	af00      	add	r7, sp, #0
 8003622:	6078      	str	r0, [r7, #4]
 8003624:	6039      	str	r1, [r7, #0]
  if (pObj->IO.BusType == LSM6DSOX_SENSORHUB_LIS2MDL_I2C_BUS) /* LSM6DSOX SensorHub with LIS2MDL example */
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	689b      	ldr	r3, [r3, #8]
 800362a:	2b03      	cmp	r3, #3
 800362c:	d10b      	bne.n	8003646 <LIS2MDL_ReadID+0x2a>
  {
    if (LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData(pObj, LIS2MDL_WHO_AM_I, Id, 1) != LIS2MDL_OK)
 800362e:	2301      	movs	r3, #1
 8003630:	683a      	ldr	r2, [r7, #0]
 8003632:	214f      	movs	r1, #79	; 0x4f
 8003634:	6878      	ldr	r0, [r7, #4]
 8003636:	f000 fafb 	bl	8003c30 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData>
 800363a:	4603      	mov	r3, r0
 800363c:	2b00      	cmp	r3, #0
 800363e:	d00e      	beq.n	800365e <LIS2MDL_ReadID+0x42>
    {
      return LIS2MDL_ERROR;
 8003640:	f04f 33ff 	mov.w	r3, #4294967295
 8003644:	e00c      	b.n	8003660 <LIS2MDL_ReadID+0x44>
    }
  }
  else
  {
    if (lis2mdl_device_id_get(&(pObj->Ctx), Id) != LIS2MDL_OK)
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	3320      	adds	r3, #32
 800364a:	6839      	ldr	r1, [r7, #0]
 800364c:	4618      	mov	r0, r3
 800364e:	f000 fe72 	bl	8004336 <lis2mdl_device_id_get>
 8003652:	4603      	mov	r3, r0
 8003654:	2b00      	cmp	r3, #0
 8003656:	d002      	beq.n	800365e <LIS2MDL_ReadID+0x42>
    {
      return LIS2MDL_ERROR;
 8003658:	f04f 33ff 	mov.w	r3, #4294967295
 800365c:	e000      	b.n	8003660 <LIS2MDL_ReadID+0x44>
    }
  }

  return LIS2MDL_OK;
 800365e:	2300      	movs	r3, #0
}
 8003660:	4618      	mov	r0, r3
 8003662:	3708      	adds	r7, #8
 8003664:	46bd      	mov	sp, r7
 8003666:	bd80      	pop	{r7, pc}

08003668 <LIS2MDL_GetCapabilities>:
  * @param  pObj Component object pointer
  * @param  Capabilities pointer to LIS2MDL magnetometer sensor capabilities
  * @retval Component status
  */
int32_t LIS2MDL_GetCapabilities(LIS2MDL_Object_t *pObj, LIS2MDL_Capabilities_t *Capabilities)
{
 8003668:	b480      	push	{r7}
 800366a:	b083      	sub	sp, #12
 800366c:	af00      	add	r7, sp, #0
 800366e:	6078      	str	r0, [r7, #4]
 8003670:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  Capabilities->Acc          = 0;
 8003672:	683b      	ldr	r3, [r7, #0]
 8003674:	2200      	movs	r2, #0
 8003676:	701a      	strb	r2, [r3, #0]
  Capabilities->Gyro         = 0;
 8003678:	683b      	ldr	r3, [r7, #0]
 800367a:	2200      	movs	r2, #0
 800367c:	705a      	strb	r2, [r3, #1]
  Capabilities->Magneto      = 1;
 800367e:	683b      	ldr	r3, [r7, #0]
 8003680:	2201      	movs	r2, #1
 8003682:	709a      	strb	r2, [r3, #2]
  Capabilities->LowPower     = 0;
 8003684:	683b      	ldr	r3, [r7, #0]
 8003686:	2200      	movs	r2, #0
 8003688:	70da      	strb	r2, [r3, #3]
  Capabilities->GyroMaxFS    = 0;
 800368a:	683b      	ldr	r3, [r7, #0]
 800368c:	2200      	movs	r2, #0
 800368e:	605a      	str	r2, [r3, #4]
  Capabilities->AccMaxFS     = 0;
 8003690:	683b      	ldr	r3, [r7, #0]
 8003692:	2200      	movs	r2, #0
 8003694:	609a      	str	r2, [r3, #8]
  Capabilities->MagMaxFS     = 50;
 8003696:	683b      	ldr	r3, [r7, #0]
 8003698:	2232      	movs	r2, #50	; 0x32
 800369a:	60da      	str	r2, [r3, #12]
  Capabilities->GyroMaxOdr   = 0.0f;
 800369c:	683b      	ldr	r3, [r7, #0]
 800369e:	f04f 0200 	mov.w	r2, #0
 80036a2:	611a      	str	r2, [r3, #16]
  Capabilities->AccMaxOdr    = 0.0f;
 80036a4:	683b      	ldr	r3, [r7, #0]
 80036a6:	f04f 0200 	mov.w	r2, #0
 80036aa:	615a      	str	r2, [r3, #20]
  Capabilities->MagMaxOdr    = 100.0f;
 80036ac:	683b      	ldr	r3, [r7, #0]
 80036ae:	4a04      	ldr	r2, [pc, #16]	; (80036c0 <LIS2MDL_GetCapabilities+0x58>)
 80036b0:	619a      	str	r2, [r3, #24]
  return LIS2MDL_OK;
 80036b2:	2300      	movs	r3, #0
}
 80036b4:	4618      	mov	r0, r3
 80036b6:	370c      	adds	r7, #12
 80036b8:	46bd      	mov	sp, r7
 80036ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036be:	4770      	bx	lr
 80036c0:	42c80000 	.word	0x42c80000

080036c4 <LIS2MDL_MAG_Enable>:
  * @brief Enable the LIS2MDL magnetometer sensor
  * @param pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_MAG_Enable(LIS2MDL_Object_t *pObj)
{
 80036c4:	b580      	push	{r7, lr}
 80036c6:	b084      	sub	sp, #16
 80036c8:	af00      	add	r7, sp, #0
 80036ca:	6078      	str	r0, [r7, #4]
  lis2mdl_cfg_reg_a_t reg_a;

  /* Check if the component is already enabled */
  if (pObj->mag_is_enabled == 1U)
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80036d2:	2b01      	cmp	r3, #1
 80036d4:	d101      	bne.n	80036da <LIS2MDL_MAG_Enable+0x16>
  {
    return LIS2MDL_OK;
 80036d6:	2300      	movs	r3, #0
 80036d8:	e032      	b.n	8003740 <LIS2MDL_MAG_Enable+0x7c>
  }

  if (pObj->IO.BusType == LSM6DSOX_SENSORHUB_LIS2MDL_I2C_BUS) /* LSM6DSOX SensorHub with LIS2MDL example */
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	689b      	ldr	r3, [r3, #8]
 80036de:	2b03      	cmp	r3, #3
 80036e0:	d11d      	bne.n	800371e <LIS2MDL_MAG_Enable+0x5a>
  {
    /* Read configuration from CFG_REG_A reg */
    if (LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData(pObj, LIS2MDL_CFG_REG_A, (uint8_t *)&reg_a, 1) != LIS2MDL_OK)
 80036e2:	f107 020c 	add.w	r2, r7, #12
 80036e6:	2301      	movs	r3, #1
 80036e8:	2160      	movs	r1, #96	; 0x60
 80036ea:	6878      	ldr	r0, [r7, #4]
 80036ec:	f000 faa0 	bl	8003c30 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData>
 80036f0:	4603      	mov	r3, r0
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d002      	beq.n	80036fc <LIS2MDL_MAG_Enable+0x38>
    {
      return LIS2MDL_ERROR;
 80036f6:	f04f 33ff 	mov.w	r3, #4294967295
 80036fa:	e021      	b.n	8003740 <LIS2MDL_MAG_Enable+0x7c>
    }

    /* Operation mode selection. */
    reg_a.md = LIS2MDL_CONTINUOUS_MODE;
 80036fc:	7b3b      	ldrb	r3, [r7, #12]
 80036fe:	f36f 0301 	bfc	r3, #0, #2
 8003702:	733b      	strb	r3, [r7, #12]

    /* Write configuration to CFG_REG_A reg */
    if (LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData(pObj, LIS2MDL_CFG_REG_A, (uint8_t *)&reg_a, 1) != LIS2MDL_OK)
 8003704:	f107 020c 	add.w	r2, r7, #12
 8003708:	2301      	movs	r3, #1
 800370a:	2160      	movs	r1, #96	; 0x60
 800370c:	6878      	ldr	r0, [r7, #4]
 800370e:	f000 fbce 	bl	8003eae <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData>
 8003712:	4603      	mov	r3, r0
 8003714:	2b00      	cmp	r3, #0
 8003716:	d00e      	beq.n	8003736 <LIS2MDL_MAG_Enable+0x72>
    {
      return LIS2MDL_ERROR;
 8003718:	f04f 33ff 	mov.w	r3, #4294967295
 800371c:	e010      	b.n	8003740 <LIS2MDL_MAG_Enable+0x7c>
    }
  }
  else
  {
    /* Operation mode selection. */
    if (lis2mdl_operating_mode_set(&(pObj->Ctx), LIS2MDL_CONTINUOUS_MODE) != LIS2MDL_OK)
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	3320      	adds	r3, #32
 8003722:	2100      	movs	r1, #0
 8003724:	4618      	mov	r0, r3
 8003726:	f000 fd10 	bl	800414a <lis2mdl_operating_mode_set>
 800372a:	4603      	mov	r3, r0
 800372c:	2b00      	cmp	r3, #0
 800372e:	d002      	beq.n	8003736 <LIS2MDL_MAG_Enable+0x72>
    {
      return LIS2MDL_ERROR;
 8003730:	f04f 33ff 	mov.w	r3, #4294967295
 8003734:	e004      	b.n	8003740 <LIS2MDL_MAG_Enable+0x7c>
    }
  }

  pObj->mag_is_enabled = 1;
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	2201      	movs	r2, #1
 800373a:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

  return LIS2MDL_OK;
 800373e:	2300      	movs	r3, #0
}
 8003740:	4618      	mov	r0, r3
 8003742:	3710      	adds	r7, #16
 8003744:	46bd      	mov	sp, r7
 8003746:	bd80      	pop	{r7, pc}

08003748 <LIS2MDL_MAG_Disable>:
  * @brief Disable the LIS2MDL magnetometer sensor
  * @param pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_MAG_Disable(LIS2MDL_Object_t *pObj)
{
 8003748:	b580      	push	{r7, lr}
 800374a:	b084      	sub	sp, #16
 800374c:	af00      	add	r7, sp, #0
 800374e:	6078      	str	r0, [r7, #4]
  lis2mdl_cfg_reg_a_t reg_a;

  /* Check if the component is already disabled */
  if (pObj->mag_is_enabled == 0U)
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8003756:	2b00      	cmp	r3, #0
 8003758:	d101      	bne.n	800375e <LIS2MDL_MAG_Disable+0x16>
  {
    return LIS2MDL_OK;
 800375a:	2300      	movs	r3, #0
 800375c:	e033      	b.n	80037c6 <LIS2MDL_MAG_Disable+0x7e>
  }

  if (pObj->IO.BusType == LSM6DSOX_SENSORHUB_LIS2MDL_I2C_BUS) /* LSM6DSOX SensorHub with LIS2MDL example */
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	689b      	ldr	r3, [r3, #8]
 8003762:	2b03      	cmp	r3, #3
 8003764:	d11e      	bne.n	80037a4 <LIS2MDL_MAG_Disable+0x5c>
  {
    /* Read configuration from CFG_REG_A reg */
    if (LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData(pObj, LIS2MDL_CFG_REG_A, (uint8_t *)&reg_a, 1) != LIS2MDL_OK)
 8003766:	f107 020c 	add.w	r2, r7, #12
 800376a:	2301      	movs	r3, #1
 800376c:	2160      	movs	r1, #96	; 0x60
 800376e:	6878      	ldr	r0, [r7, #4]
 8003770:	f000 fa5e 	bl	8003c30 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData>
 8003774:	4603      	mov	r3, r0
 8003776:	2b00      	cmp	r3, #0
 8003778:	d002      	beq.n	8003780 <LIS2MDL_MAG_Disable+0x38>
    {
      return LIS2MDL_ERROR;
 800377a:	f04f 33ff 	mov.w	r3, #4294967295
 800377e:	e022      	b.n	80037c6 <LIS2MDL_MAG_Disable+0x7e>
    }

    /* Operation mode selection. */
    reg_a.md = LIS2MDL_POWER_DOWN;
 8003780:	7b3b      	ldrb	r3, [r7, #12]
 8003782:	2202      	movs	r2, #2
 8003784:	f362 0301 	bfi	r3, r2, #0, #2
 8003788:	733b      	strb	r3, [r7, #12]

    /* Write configuration to CFG_REG_A reg */
    if (LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData(pObj, LIS2MDL_CFG_REG_A, (uint8_t *)&reg_a, 1) != LIS2MDL_OK)
 800378a:	f107 020c 	add.w	r2, r7, #12
 800378e:	2301      	movs	r3, #1
 8003790:	2160      	movs	r1, #96	; 0x60
 8003792:	6878      	ldr	r0, [r7, #4]
 8003794:	f000 fb8b 	bl	8003eae <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData>
 8003798:	4603      	mov	r3, r0
 800379a:	2b00      	cmp	r3, #0
 800379c:	d00e      	beq.n	80037bc <LIS2MDL_MAG_Disable+0x74>
    {
      return LIS2MDL_ERROR;
 800379e:	f04f 33ff 	mov.w	r3, #4294967295
 80037a2:	e010      	b.n	80037c6 <LIS2MDL_MAG_Disable+0x7e>
    }
  }
  else
  {
    /* Operation mode selection. */
    if (lis2mdl_operating_mode_set(&(pObj->Ctx), LIS2MDL_POWER_DOWN) != LIS2MDL_OK)
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	3320      	adds	r3, #32
 80037a8:	2102      	movs	r1, #2
 80037aa:	4618      	mov	r0, r3
 80037ac:	f000 fccd 	bl	800414a <lis2mdl_operating_mode_set>
 80037b0:	4603      	mov	r3, r0
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d002      	beq.n	80037bc <LIS2MDL_MAG_Disable+0x74>
    {
      return LIS2MDL_ERROR;
 80037b6:	f04f 33ff 	mov.w	r3, #4294967295
 80037ba:	e004      	b.n	80037c6 <LIS2MDL_MAG_Disable+0x7e>
    }
  }

  pObj->mag_is_enabled = 0;
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	2200      	movs	r2, #0
 80037c0:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

  return LIS2MDL_OK;
 80037c4:	2300      	movs	r3, #0
}
 80037c6:	4618      	mov	r0, r3
 80037c8:	3710      	adds	r7, #16
 80037ca:	46bd      	mov	sp, r7
 80037cc:	bd80      	pop	{r7, pc}

080037ce <LIS2MDL_MAG_GetSensitivity>:
  * @param  pObj the device pObj
  * @param  Sensitivity pointer
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_MAG_GetSensitivity(LIS2MDL_Object_t *pObj, float *Sensitivity)
{
 80037ce:	b480      	push	{r7}
 80037d0:	b083      	sub	sp, #12
 80037d2:	af00      	add	r7, sp, #0
 80037d4:	6078      	str	r0, [r7, #4]
 80037d6:	6039      	str	r1, [r7, #0]
  *Sensitivity = LIS2MDL_MAG_SENSITIVITY_FS_50GAUSS;
 80037d8:	683b      	ldr	r3, [r7, #0]
 80037da:	f04f 527f 	mov.w	r2, #1069547520	; 0x3fc00000
 80037de:	601a      	str	r2, [r3, #0]

  return LIS2MDL_OK;
 80037e0:	2300      	movs	r3, #0
}
 80037e2:	4618      	mov	r0, r3
 80037e4:	370c      	adds	r7, #12
 80037e6:	46bd      	mov	sp, r7
 80037e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ec:	4770      	bx	lr
	...

080037f0 <LIS2MDL_MAG_GetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr pointer where the output data rate is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_MAG_GetOutputDataRate(LIS2MDL_Object_t *pObj, float *Odr)
{
 80037f0:	b580      	push	{r7, lr}
 80037f2:	b084      	sub	sp, #16
 80037f4:	af00      	add	r7, sp, #0
 80037f6:	6078      	str	r0, [r7, #4]
 80037f8:	6039      	str	r1, [r7, #0]
  int32_t ret = LIS2MDL_OK;
 80037fa:	2300      	movs	r3, #0
 80037fc:	60fb      	str	r3, [r7, #12]
  lis2mdl_odr_t odr_low_level;

  /* Get current output data rate. */
  if (lis2mdl_data_rate_get(&(pObj->Ctx), &odr_low_level) != LIS2MDL_OK)
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	3320      	adds	r3, #32
 8003802:	f107 020b 	add.w	r2, r7, #11
 8003806:	4611      	mov	r1, r2
 8003808:	4618      	mov	r0, r3
 800380a:	f000 fceb 	bl	80041e4 <lis2mdl_data_rate_get>
 800380e:	4603      	mov	r3, r0
 8003810:	2b00      	cmp	r3, #0
 8003812:	d002      	beq.n	800381a <LIS2MDL_MAG_GetOutputDataRate+0x2a>
  {
    return LIS2MDL_ERROR;
 8003814:	f04f 33ff 	mov.w	r3, #4294967295
 8003818:	e023      	b.n	8003862 <LIS2MDL_MAG_GetOutputDataRate+0x72>
  }

  switch (odr_low_level)
 800381a:	7afb      	ldrb	r3, [r7, #11]
 800381c:	2b03      	cmp	r3, #3
 800381e:	d81b      	bhi.n	8003858 <LIS2MDL_MAG_GetOutputDataRate+0x68>
 8003820:	a201      	add	r2, pc, #4	; (adr r2, 8003828 <LIS2MDL_MAG_GetOutputDataRate+0x38>)
 8003822:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003826:	bf00      	nop
 8003828:	08003839 	.word	0x08003839
 800382c:	08003841 	.word	0x08003841
 8003830:	08003849 	.word	0x08003849
 8003834:	08003851 	.word	0x08003851
  {
    case LIS2MDL_ODR_10Hz:
      *Odr = 10.0f;
 8003838:	683b      	ldr	r3, [r7, #0]
 800383a:	4a0c      	ldr	r2, [pc, #48]	; (800386c <LIS2MDL_MAG_GetOutputDataRate+0x7c>)
 800383c:	601a      	str	r2, [r3, #0]
      break;
 800383e:	e00f      	b.n	8003860 <LIS2MDL_MAG_GetOutputDataRate+0x70>

    case LIS2MDL_ODR_20Hz:
      *Odr = 20.0f;
 8003840:	683b      	ldr	r3, [r7, #0]
 8003842:	4a0b      	ldr	r2, [pc, #44]	; (8003870 <LIS2MDL_MAG_GetOutputDataRate+0x80>)
 8003844:	601a      	str	r2, [r3, #0]
      break;
 8003846:	e00b      	b.n	8003860 <LIS2MDL_MAG_GetOutputDataRate+0x70>

    case LIS2MDL_ODR_50Hz:
      *Odr = 50.0f;
 8003848:	683b      	ldr	r3, [r7, #0]
 800384a:	4a0a      	ldr	r2, [pc, #40]	; (8003874 <LIS2MDL_MAG_GetOutputDataRate+0x84>)
 800384c:	601a      	str	r2, [r3, #0]
      break;
 800384e:	e007      	b.n	8003860 <LIS2MDL_MAG_GetOutputDataRate+0x70>

    case LIS2MDL_ODR_100Hz:
      *Odr = 100.0f;
 8003850:	683b      	ldr	r3, [r7, #0]
 8003852:	4a09      	ldr	r2, [pc, #36]	; (8003878 <LIS2MDL_MAG_GetOutputDataRate+0x88>)
 8003854:	601a      	str	r2, [r3, #0]
      break;
 8003856:	e003      	b.n	8003860 <LIS2MDL_MAG_GetOutputDataRate+0x70>

    default:
      ret = LIS2MDL_ERROR;
 8003858:	f04f 33ff 	mov.w	r3, #4294967295
 800385c:	60fb      	str	r3, [r7, #12]
      break;
 800385e:	bf00      	nop
  }

  return ret;
 8003860:	68fb      	ldr	r3, [r7, #12]
}
 8003862:	4618      	mov	r0, r3
 8003864:	3710      	adds	r7, #16
 8003866:	46bd      	mov	sp, r7
 8003868:	bd80      	pop	{r7, pc}
 800386a:	bf00      	nop
 800386c:	41200000 	.word	0x41200000
 8003870:	41a00000 	.word	0x41a00000
 8003874:	42480000 	.word	0x42480000
 8003878:	42c80000 	.word	0x42c80000

0800387c <LIS2MDL_MAG_SetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_MAG_SetOutputDataRate(LIS2MDL_Object_t *pObj, float Odr)
{
 800387c:	b580      	push	{r7, lr}
 800387e:	b084      	sub	sp, #16
 8003880:	af00      	add	r7, sp, #0
 8003882:	6078      	str	r0, [r7, #4]
 8003884:	ed87 0a00 	vstr	s0, [r7]
  lis2mdl_odr_t new_odr;
  lis2mdl_cfg_reg_a_t reg_a;

  new_odr = (Odr <= 10.000f) ? LIS2MDL_ODR_10Hz
            : (Odr <= 20.000f) ? LIS2MDL_ODR_20Hz
 8003888:	edd7 7a00 	vldr	s15, [r7]
 800388c:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8003890:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003894:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003898:	d801      	bhi.n	800389e <LIS2MDL_MAG_SetOutputDataRate+0x22>
 800389a:	2300      	movs	r3, #0
 800389c:	e016      	b.n	80038cc <LIS2MDL_MAG_SetOutputDataRate+0x50>
 800389e:	edd7 7a00 	vldr	s15, [r7]
 80038a2:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 80038a6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80038aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80038ae:	d801      	bhi.n	80038b4 <LIS2MDL_MAG_SetOutputDataRate+0x38>
 80038b0:	2301      	movs	r3, #1
 80038b2:	e00b      	b.n	80038cc <LIS2MDL_MAG_SetOutputDataRate+0x50>
 80038b4:	edd7 7a00 	vldr	s15, [r7]
 80038b8:	ed9f 7a21 	vldr	s14, [pc, #132]	; 8003940 <LIS2MDL_MAG_SetOutputDataRate+0xc4>
 80038bc:	eef4 7ac7 	vcmpe.f32	s15, s14
 80038c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80038c4:	d801      	bhi.n	80038ca <LIS2MDL_MAG_SetOutputDataRate+0x4e>
 80038c6:	2302      	movs	r3, #2
 80038c8:	e000      	b.n	80038cc <LIS2MDL_MAG_SetOutputDataRate+0x50>
 80038ca:	2303      	movs	r3, #3
  new_odr = (Odr <= 10.000f) ? LIS2MDL_ODR_10Hz
 80038cc:	73fb      	strb	r3, [r7, #15]
            : (Odr <= 50.000f) ? LIS2MDL_ODR_50Hz
            :                    LIS2MDL_ODR_100Hz;

  if (pObj->IO.BusType == LSM6DSOX_SENSORHUB_LIS2MDL_I2C_BUS) /* LSM6DSOX SensorHub with LIS2MDL example */
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	689b      	ldr	r3, [r3, #8]
 80038d2:	2b03      	cmp	r3, #3
 80038d4:	d121      	bne.n	800391a <LIS2MDL_MAG_SetOutputDataRate+0x9e>
  {
    /* Read configuration from CFG_REG_A reg */
    if (LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData(pObj, LIS2MDL_CFG_REG_A, (uint8_t *)&reg_a, 1) != LIS2MDL_OK)
 80038d6:	f107 020c 	add.w	r2, r7, #12
 80038da:	2301      	movs	r3, #1
 80038dc:	2160      	movs	r1, #96	; 0x60
 80038de:	6878      	ldr	r0, [r7, #4]
 80038e0:	f000 f9a6 	bl	8003c30 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData>
 80038e4:	4603      	mov	r3, r0
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d002      	beq.n	80038f0 <LIS2MDL_MAG_SetOutputDataRate+0x74>
    {
      return LIS2MDL_ERROR;
 80038ea:	f04f 33ff 	mov.w	r3, #4294967295
 80038ee:	e022      	b.n	8003936 <LIS2MDL_MAG_SetOutputDataRate+0xba>
    }

    /* Output data rate selection */
    reg_a.odr = new_odr;
 80038f0:	7bfb      	ldrb	r3, [r7, #15]
 80038f2:	f003 0303 	and.w	r3, r3, #3
 80038f6:	b2da      	uxtb	r2, r3
 80038f8:	7b3b      	ldrb	r3, [r7, #12]
 80038fa:	f362 0383 	bfi	r3, r2, #2, #2
 80038fe:	733b      	strb	r3, [r7, #12]

    /* Write configuration to CFG_REG_A reg */
    if (LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData(pObj, LIS2MDL_CFG_REG_A, (uint8_t *)&reg_a, 1) != LIS2MDL_OK)
 8003900:	f107 020c 	add.w	r2, r7, #12
 8003904:	2301      	movs	r3, #1
 8003906:	2160      	movs	r1, #96	; 0x60
 8003908:	6878      	ldr	r0, [r7, #4]
 800390a:	f000 fad0 	bl	8003eae <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData>
 800390e:	4603      	mov	r3, r0
 8003910:	2b00      	cmp	r3, #0
 8003912:	d00f      	beq.n	8003934 <LIS2MDL_MAG_SetOutputDataRate+0xb8>
    {
      return LIS2MDL_ERROR;
 8003914:	f04f 33ff 	mov.w	r3, #4294967295
 8003918:	e00d      	b.n	8003936 <LIS2MDL_MAG_SetOutputDataRate+0xba>
    }
  }
  else
  {
    if (lis2mdl_data_rate_set(&(pObj->Ctx), new_odr) != LIS2MDL_OK)
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	3320      	adds	r3, #32
 800391e:	7bfa      	ldrb	r2, [r7, #15]
 8003920:	4611      	mov	r1, r2
 8003922:	4618      	mov	r0, r3
 8003924:	f000 fc37 	bl	8004196 <lis2mdl_data_rate_set>
 8003928:	4603      	mov	r3, r0
 800392a:	2b00      	cmp	r3, #0
 800392c:	d002      	beq.n	8003934 <LIS2MDL_MAG_SetOutputDataRate+0xb8>
    {
      return LIS2MDL_ERROR;
 800392e:	f04f 33ff 	mov.w	r3, #4294967295
 8003932:	e000      	b.n	8003936 <LIS2MDL_MAG_SetOutputDataRate+0xba>
    }
  }

  return LIS2MDL_OK;
 8003934:	2300      	movs	r3, #0
}
 8003936:	4618      	mov	r0, r3
 8003938:	3710      	adds	r7, #16
 800393a:	46bd      	mov	sp, r7
 800393c:	bd80      	pop	{r7, pc}
 800393e:	bf00      	nop
 8003940:	42480000 	.word	0x42480000

08003944 <LIS2MDL_MAG_GetFullScale>:
  * @param  pObj the device pObj
  * @param  FullScale pointer where the full scale is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_MAG_GetFullScale(LIS2MDL_Object_t *pObj, int32_t *FullScale)
{
 8003944:	b480      	push	{r7}
 8003946:	b083      	sub	sp, #12
 8003948:	af00      	add	r7, sp, #0
 800394a:	6078      	str	r0, [r7, #4]
 800394c:	6039      	str	r1, [r7, #0]
  *FullScale = 50;
 800394e:	683b      	ldr	r3, [r7, #0]
 8003950:	2232      	movs	r2, #50	; 0x32
 8003952:	601a      	str	r2, [r3, #0]

  return LIS2MDL_OK;
 8003954:	2300      	movs	r3, #0
}
 8003956:	4618      	mov	r0, r3
 8003958:	370c      	adds	r7, #12
 800395a:	46bd      	mov	sp, r7
 800395c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003960:	4770      	bx	lr

08003962 <LIS2MDL_MAG_SetFullScale>:
  * @param  pObj the device pObj
  * @param  FullScale the functional full scale to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_MAG_SetFullScale(LIS2MDL_Object_t *pObj, int32_t FullScale)
{
 8003962:	b480      	push	{r7}
 8003964:	b083      	sub	sp, #12
 8003966:	af00      	add	r7, sp, #0
 8003968:	6078      	str	r0, [r7, #4]
 800396a:	6039      	str	r1, [r7, #0]
  return LIS2MDL_OK;
 800396c:	2300      	movs	r3, #0
}
 800396e:	4618      	mov	r0, r3
 8003970:	370c      	adds	r7, #12
 8003972:	46bd      	mov	sp, r7
 8003974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003978:	4770      	bx	lr

0800397a <LIS2MDL_MAG_GetAxesRaw>:
  * @param  pObj the device pObj
  * @param  Value pointer where the raw values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_MAG_GetAxesRaw(LIS2MDL_Object_t *pObj, LIS2MDL_AxesRaw_t *Value)
{
 800397a:	b580      	push	{r7, lr}
 800397c:	b084      	sub	sp, #16
 800397e:	af00      	add	r7, sp, #0
 8003980:	6078      	str	r0, [r7, #4]
 8003982:	6039      	str	r1, [r7, #0]
  lis2mdl_axis3bit16_t data_raw;

  /* Read raw data values. */
  if (lis2mdl_magnetic_raw_get(&(pObj->Ctx), data_raw.i16bit) != LIS2MDL_OK)
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	3320      	adds	r3, #32
 8003988:	f107 0208 	add.w	r2, r7, #8
 800398c:	4611      	mov	r1, r2
 800398e:	4618      	mov	r0, r3
 8003990:	f000 fc86 	bl	80042a0 <lis2mdl_magnetic_raw_get>
 8003994:	4603      	mov	r3, r0
 8003996:	2b00      	cmp	r3, #0
 8003998:	d002      	beq.n	80039a0 <LIS2MDL_MAG_GetAxesRaw+0x26>
  {
    return LIS2MDL_ERROR;
 800399a:	f04f 33ff 	mov.w	r3, #4294967295
 800399e:	e00c      	b.n	80039ba <LIS2MDL_MAG_GetAxesRaw+0x40>
  }

  /* Format the data. */
  Value->x = data_raw.i16bit[0];
 80039a0:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 80039a4:	683b      	ldr	r3, [r7, #0]
 80039a6:	801a      	strh	r2, [r3, #0]
  Value->y = data_raw.i16bit[1];
 80039a8:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 80039ac:	683b      	ldr	r3, [r7, #0]
 80039ae:	805a      	strh	r2, [r3, #2]
  Value->z = data_raw.i16bit[2];
 80039b0:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 80039b4:	683b      	ldr	r3, [r7, #0]
 80039b6:	809a      	strh	r2, [r3, #4]

  return LIS2MDL_OK;
 80039b8:	2300      	movs	r3, #0
}
 80039ba:	4618      	mov	r0, r3
 80039bc:	3710      	adds	r7, #16
 80039be:	46bd      	mov	sp, r7
 80039c0:	bd80      	pop	{r7, pc}

080039c2 <LIS2MDL_MAG_GetAxes>:
  * @param  pObj the device pObj
  * @param  MagneticField pointer where the values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_MAG_GetAxes(LIS2MDL_Object_t *pObj, LIS2MDL_Axes_t *MagneticField)
{
 80039c2:	b580      	push	{r7, lr}
 80039c4:	b088      	sub	sp, #32
 80039c6:	af00      	add	r7, sp, #0
 80039c8:	6078      	str	r0, [r7, #4]
 80039ca:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  lis2mdl_axis3bit16_t data_raw;
  float sensitivity;

  if (pObj->IO.BusType == LSM6DSOX_SENSORHUB_LIS2MDL_I2C_BUS) /* LSM6DSOX SensorHub with LIS2MDL example */
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	689b      	ldr	r3, [r3, #8]
 80039d0:	2b03      	cmp	r3, #3
 80039d2:	d137      	bne.n	8003a44 <LIS2MDL_MAG_GetAxes+0x82>
  {
    /* Read raw data values. */
    if (LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData(pObj, LIS2MDL_OUTX_L_REG, buff, 6) != LIS2MDL_OK)
 80039d4:	f107 0218 	add.w	r2, r7, #24
 80039d8:	2306      	movs	r3, #6
 80039da:	2168      	movs	r1, #104	; 0x68
 80039dc:	6878      	ldr	r0, [r7, #4]
 80039de:	f000 f927 	bl	8003c30 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData>
 80039e2:	4603      	mov	r3, r0
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d002      	beq.n	80039ee <LIS2MDL_MAG_GetAxes+0x2c>
    {
      return LIS2MDL_ERROR;
 80039e8:	f04f 33ff 	mov.w	r3, #4294967295
 80039ec:	e06f      	b.n	8003ace <LIS2MDL_MAG_GetAxes+0x10c>
    }
    data_raw.i16bit[0] = (int16_t)buff[1];
 80039ee:	7e7b      	ldrb	r3, [r7, #25]
 80039f0:	b21b      	sxth	r3, r3
 80039f2:	823b      	strh	r3, [r7, #16]
    data_raw.i16bit[0] = (data_raw.i16bit[0] * 256) + (int16_t)buff[0];
 80039f4:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80039f8:	b29b      	uxth	r3, r3
 80039fa:	021b      	lsls	r3, r3, #8
 80039fc:	b29a      	uxth	r2, r3
 80039fe:	7e3b      	ldrb	r3, [r7, #24]
 8003a00:	b29b      	uxth	r3, r3
 8003a02:	4413      	add	r3, r2
 8003a04:	b29b      	uxth	r3, r3
 8003a06:	b21b      	sxth	r3, r3
 8003a08:	823b      	strh	r3, [r7, #16]
    data_raw.i16bit[1] = (int16_t)buff[3];
 8003a0a:	7efb      	ldrb	r3, [r7, #27]
 8003a0c:	b21b      	sxth	r3, r3
 8003a0e:	827b      	strh	r3, [r7, #18]
    data_raw.i16bit[1] = (data_raw.i16bit[1] * 256) + (int16_t)buff[2];
 8003a10:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8003a14:	b29b      	uxth	r3, r3
 8003a16:	021b      	lsls	r3, r3, #8
 8003a18:	b29a      	uxth	r2, r3
 8003a1a:	7ebb      	ldrb	r3, [r7, #26]
 8003a1c:	b29b      	uxth	r3, r3
 8003a1e:	4413      	add	r3, r2
 8003a20:	b29b      	uxth	r3, r3
 8003a22:	b21b      	sxth	r3, r3
 8003a24:	827b      	strh	r3, [r7, #18]
    data_raw.i16bit[2] = (int16_t)buff[5];
 8003a26:	7f7b      	ldrb	r3, [r7, #29]
 8003a28:	b21b      	sxth	r3, r3
 8003a2a:	82bb      	strh	r3, [r7, #20]
    data_raw.i16bit[2] = (data_raw.i16bit[2] * 256) + (int16_t)buff[4];
 8003a2c:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8003a30:	b29b      	uxth	r3, r3
 8003a32:	021b      	lsls	r3, r3, #8
 8003a34:	b29a      	uxth	r2, r3
 8003a36:	7f3b      	ldrb	r3, [r7, #28]
 8003a38:	b29b      	uxth	r3, r3
 8003a3a:	4413      	add	r3, r2
 8003a3c:	b29b      	uxth	r3, r3
 8003a3e:	b21b      	sxth	r3, r3
 8003a40:	82bb      	strh	r3, [r7, #20]
 8003a42:	e00d      	b.n	8003a60 <LIS2MDL_MAG_GetAxes+0x9e>
  }
  else
  {
    /* Read raw data values. */
    if (lis2mdl_magnetic_raw_get(&(pObj->Ctx), data_raw.i16bit) != LIS2MDL_OK)
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	3320      	adds	r3, #32
 8003a48:	f107 0210 	add.w	r2, r7, #16
 8003a4c:	4611      	mov	r1, r2
 8003a4e:	4618      	mov	r0, r3
 8003a50:	f000 fc26 	bl	80042a0 <lis2mdl_magnetic_raw_get>
 8003a54:	4603      	mov	r3, r0
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d002      	beq.n	8003a60 <LIS2MDL_MAG_GetAxes+0x9e>
    {
      return LIS2MDL_ERROR;
 8003a5a:	f04f 33ff 	mov.w	r3, #4294967295
 8003a5e:	e036      	b.n	8003ace <LIS2MDL_MAG_GetAxes+0x10c>
    }
  }

  /* Get LIS2MDL actual sensitivity. */
  (void)LIS2MDL_MAG_GetSensitivity(pObj, &sensitivity);
 8003a60:	f107 030c 	add.w	r3, r7, #12
 8003a64:	4619      	mov	r1, r3
 8003a66:	6878      	ldr	r0, [r7, #4]
 8003a68:	f7ff feb1 	bl	80037ce <LIS2MDL_MAG_GetSensitivity>

  /* Calculate the data. */
  MagneticField->x = (int32_t)((float)((float)data_raw.i16bit[0] * sensitivity));
 8003a6c:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8003a70:	ee07 3a90 	vmov	s15, r3
 8003a74:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003a78:	edd7 7a03 	vldr	s15, [r7, #12]
 8003a7c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003a80:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003a84:	ee17 2a90 	vmov	r2, s15
 8003a88:	683b      	ldr	r3, [r7, #0]
 8003a8a:	601a      	str	r2, [r3, #0]
  MagneticField->y = (int32_t)((float)((float)data_raw.i16bit[1] * sensitivity));
 8003a8c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8003a90:	ee07 3a90 	vmov	s15, r3
 8003a94:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003a98:	edd7 7a03 	vldr	s15, [r7, #12]
 8003a9c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003aa0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003aa4:	ee17 2a90 	vmov	r2, s15
 8003aa8:	683b      	ldr	r3, [r7, #0]
 8003aaa:	605a      	str	r2, [r3, #4]
  MagneticField->z = (int32_t)((float)((float)data_raw.i16bit[2] * sensitivity));
 8003aac:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8003ab0:	ee07 3a90 	vmov	s15, r3
 8003ab4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003ab8:	edd7 7a03 	vldr	s15, [r7, #12]
 8003abc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003ac0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003ac4:	ee17 2a90 	vmov	r2, s15
 8003ac8:	683b      	ldr	r3, [r7, #0]
 8003aca:	609a      	str	r2, [r3, #8]

  return LIS2MDL_OK;
 8003acc:	2300      	movs	r3, #0
}
 8003ace:	4618      	mov	r0, r3
 8003ad0:	3720      	adds	r7, #32
 8003ad2:	46bd      	mov	sp, r7
 8003ad4:	bd80      	pop	{r7, pc}

08003ad6 <LIS2MDL_Write_Reg>:
  * @param  Reg address to be written
  * @param  Data value to be written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_Write_Reg(LIS2MDL_Object_t *pObj, uint8_t Reg, uint8_t Data)
{
 8003ad6:	b580      	push	{r7, lr}
 8003ad8:	b082      	sub	sp, #8
 8003ada:	af00      	add	r7, sp, #0
 8003adc:	6078      	str	r0, [r7, #4]
 8003ade:	460b      	mov	r3, r1
 8003ae0:	70fb      	strb	r3, [r7, #3]
 8003ae2:	4613      	mov	r3, r2
 8003ae4:	70bb      	strb	r3, [r7, #2]
  if (pObj->IO.BusType == LSM6DSOX_SENSORHUB_LIS2MDL_I2C_BUS) /* LSM6DSOX SensorHub with LIS2MDL example */
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	689b      	ldr	r3, [r3, #8]
 8003aea:	2b03      	cmp	r3, #3
 8003aec:	d10b      	bne.n	8003b06 <LIS2MDL_Write_Reg+0x30>
  {
    if (LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData(pObj, Reg, (uint8_t *)&Data, 1) != LIS2MDL_OK)
 8003aee:	1cba      	adds	r2, r7, #2
 8003af0:	78f9      	ldrb	r1, [r7, #3]
 8003af2:	2301      	movs	r3, #1
 8003af4:	6878      	ldr	r0, [r7, #4]
 8003af6:	f000 f9da 	bl	8003eae <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData>
 8003afa:	4603      	mov	r3, r0
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d010      	beq.n	8003b22 <LIS2MDL_Write_Reg+0x4c>
    {
      return LIS2MDL_ERROR;
 8003b00:	f04f 33ff 	mov.w	r3, #4294967295
 8003b04:	e00e      	b.n	8003b24 <LIS2MDL_Write_Reg+0x4e>
    }
  }
  else
  {
    if (lis2mdl_write_reg(&(pObj->Ctx), Reg, &Data, 1) != LIS2MDL_OK)
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	f103 0020 	add.w	r0, r3, #32
 8003b0c:	1cba      	adds	r2, r7, #2
 8003b0e:	78f9      	ldrb	r1, [r7, #3]
 8003b10:	2301      	movs	r3, #1
 8003b12:	f000 fb02 	bl	800411a <lis2mdl_write_reg>
 8003b16:	4603      	mov	r3, r0
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d002      	beq.n	8003b22 <LIS2MDL_Write_Reg+0x4c>
    {
      return LIS2MDL_ERROR;
 8003b1c:	f04f 33ff 	mov.w	r3, #4294967295
 8003b20:	e000      	b.n	8003b24 <LIS2MDL_Write_Reg+0x4e>
    }
  }

  return LIS2MDL_OK;
 8003b22:	2300      	movs	r3, #0
}
 8003b24:	4618      	mov	r0, r3
 8003b26:	3708      	adds	r7, #8
 8003b28:	46bd      	mov	sp, r7
 8003b2a:	bd80      	pop	{r7, pc}

08003b2c <ReadMagRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t ReadMagRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8003b2c:	b590      	push	{r4, r7, lr}
 8003b2e:	b087      	sub	sp, #28
 8003b30:	af00      	add	r7, sp, #0
 8003b32:	60f8      	str	r0, [r7, #12]
 8003b34:	607a      	str	r2, [r7, #4]
 8003b36:	461a      	mov	r2, r3
 8003b38:	460b      	mov	r3, r1
 8003b3a:	72fb      	strb	r3, [r7, #11]
 8003b3c:	4613      	mov	r3, r2
 8003b3e:	813b      	strh	r3, [r7, #8]
  LIS2MDL_Object_t *pObj = (LIS2MDL_Object_t *)Handle;
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	617b      	str	r3, [r7, #20]

  if (pObj->IO.BusType == LIS2MDL_I2C_BUS) /* I2C */
 8003b44:	697b      	ldr	r3, [r7, #20]
 8003b46:	689b      	ldr	r3, [r3, #8]
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d10e      	bne.n	8003b6a <ReadMagRegWrap+0x3e>
  {
    /* Enable Multi-byte read */
    return pObj->IO.ReadReg(pObj->IO.Address, (Reg | 0x80U), pData, Length);
 8003b4c:	697b      	ldr	r3, [r7, #20]
 8003b4e:	695c      	ldr	r4, [r3, #20]
 8003b50:	697b      	ldr	r3, [r7, #20]
 8003b52:	7b1b      	ldrb	r3, [r3, #12]
 8003b54:	b298      	uxth	r0, r3
 8003b56:	7afb      	ldrb	r3, [r7, #11]
 8003b58:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003b5c:	b2db      	uxtb	r3, r3
 8003b5e:	b299      	uxth	r1, r3
 8003b60:	893b      	ldrh	r3, [r7, #8]
 8003b62:	687a      	ldr	r2, [r7, #4]
 8003b64:	47a0      	blx	r4
 8003b66:	4603      	mov	r3, r0
 8003b68:	e01d      	b.n	8003ba6 <ReadMagRegWrap+0x7a>
  }
  else if (pObj->IO.BusType == LSM6DSOX_SENSORHUB_LIS2MDL_I2C_BUS) /* LSM6DSOX SensorHub with LIS2MDL example */
 8003b6a:	697b      	ldr	r3, [r7, #20]
 8003b6c:	689b      	ldr	r3, [r3, #8]
 8003b6e:	2b03      	cmp	r3, #3
 8003b70:	d10b      	bne.n	8003b8a <ReadMagRegWrap+0x5e>
  {
    return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 8003b72:	697b      	ldr	r3, [r7, #20]
 8003b74:	695c      	ldr	r4, [r3, #20]
 8003b76:	697b      	ldr	r3, [r7, #20]
 8003b78:	7b1b      	ldrb	r3, [r3, #12]
 8003b7a:	b298      	uxth	r0, r3
 8003b7c:	7afb      	ldrb	r3, [r7, #11]
 8003b7e:	b299      	uxth	r1, r3
 8003b80:	893b      	ldrh	r3, [r7, #8]
 8003b82:	687a      	ldr	r2, [r7, #4]
 8003b84:	47a0      	blx	r4
 8003b86:	4603      	mov	r3, r0
 8003b88:	e00d      	b.n	8003ba6 <ReadMagRegWrap+0x7a>
  }
  else   /* SPI 3-Wires or SPI 4-Wires */
  {
    /* Enable Multi-byte read */
    return pObj->IO.ReadReg(pObj->IO.Address, (Reg | 0x40U), pData, Length);
 8003b8a:	697b      	ldr	r3, [r7, #20]
 8003b8c:	695c      	ldr	r4, [r3, #20]
 8003b8e:	697b      	ldr	r3, [r7, #20]
 8003b90:	7b1b      	ldrb	r3, [r3, #12]
 8003b92:	b298      	uxth	r0, r3
 8003b94:	7afb      	ldrb	r3, [r7, #11]
 8003b96:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003b9a:	b2db      	uxtb	r3, r3
 8003b9c:	b299      	uxth	r1, r3
 8003b9e:	893b      	ldrh	r3, [r7, #8]
 8003ba0:	687a      	ldr	r2, [r7, #4]
 8003ba2:	47a0      	blx	r4
 8003ba4:	4603      	mov	r3, r0
  }
}
 8003ba6:	4618      	mov	r0, r3
 8003ba8:	371c      	adds	r7, #28
 8003baa:	46bd      	mov	sp, r7
 8003bac:	bd90      	pop	{r4, r7, pc}

08003bae <WriteMagRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t WriteMagRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8003bae:	b590      	push	{r4, r7, lr}
 8003bb0:	b087      	sub	sp, #28
 8003bb2:	af00      	add	r7, sp, #0
 8003bb4:	60f8      	str	r0, [r7, #12]
 8003bb6:	607a      	str	r2, [r7, #4]
 8003bb8:	461a      	mov	r2, r3
 8003bba:	460b      	mov	r3, r1
 8003bbc:	72fb      	strb	r3, [r7, #11]
 8003bbe:	4613      	mov	r3, r2
 8003bc0:	813b      	strh	r3, [r7, #8]
  LIS2MDL_Object_t *pObj = (LIS2MDL_Object_t *)Handle;
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	617b      	str	r3, [r7, #20]

  if (pObj->IO.BusType == LIS2MDL_I2C_BUS) /* I2C */
 8003bc6:	697b      	ldr	r3, [r7, #20]
 8003bc8:	689b      	ldr	r3, [r3, #8]
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d10e      	bne.n	8003bec <WriteMagRegWrap+0x3e>
  {
    /* Enable Multi-byte write */
    return pObj->IO.WriteReg(pObj->IO.Address, (Reg | 0x80U), pData, Length);
 8003bce:	697b      	ldr	r3, [r7, #20]
 8003bd0:	691c      	ldr	r4, [r3, #16]
 8003bd2:	697b      	ldr	r3, [r7, #20]
 8003bd4:	7b1b      	ldrb	r3, [r3, #12]
 8003bd6:	b298      	uxth	r0, r3
 8003bd8:	7afb      	ldrb	r3, [r7, #11]
 8003bda:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003bde:	b2db      	uxtb	r3, r3
 8003be0:	b299      	uxth	r1, r3
 8003be2:	893b      	ldrh	r3, [r7, #8]
 8003be4:	687a      	ldr	r2, [r7, #4]
 8003be6:	47a0      	blx	r4
 8003be8:	4603      	mov	r3, r0
 8003bea:	e01d      	b.n	8003c28 <WriteMagRegWrap+0x7a>
  }
  else if (pObj->IO.BusType == LSM6DSOX_SENSORHUB_LIS2MDL_I2C_BUS) /* LSM6DSOX SensorHub with LIS2MDL example */
 8003bec:	697b      	ldr	r3, [r7, #20]
 8003bee:	689b      	ldr	r3, [r3, #8]
 8003bf0:	2b03      	cmp	r3, #3
 8003bf2:	d10b      	bne.n	8003c0c <WriteMagRegWrap+0x5e>
  {
    return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 8003bf4:	697b      	ldr	r3, [r7, #20]
 8003bf6:	691c      	ldr	r4, [r3, #16]
 8003bf8:	697b      	ldr	r3, [r7, #20]
 8003bfa:	7b1b      	ldrb	r3, [r3, #12]
 8003bfc:	b298      	uxth	r0, r3
 8003bfe:	7afb      	ldrb	r3, [r7, #11]
 8003c00:	b299      	uxth	r1, r3
 8003c02:	893b      	ldrh	r3, [r7, #8]
 8003c04:	687a      	ldr	r2, [r7, #4]
 8003c06:	47a0      	blx	r4
 8003c08:	4603      	mov	r3, r0
 8003c0a:	e00d      	b.n	8003c28 <WriteMagRegWrap+0x7a>
  }
  else   /* SPI 3-Wires or SPI 4-Wires */
  {
    /* Enable Multi-byte write */
    return pObj->IO.WriteReg(pObj->IO.Address, (Reg | 0x40U), pData, Length);
 8003c0c:	697b      	ldr	r3, [r7, #20]
 8003c0e:	691c      	ldr	r4, [r3, #16]
 8003c10:	697b      	ldr	r3, [r7, #20]
 8003c12:	7b1b      	ldrb	r3, [r3, #12]
 8003c14:	b298      	uxth	r0, r3
 8003c16:	7afb      	ldrb	r3, [r7, #11]
 8003c18:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003c1c:	b2db      	uxtb	r3, r3
 8003c1e:	b299      	uxth	r1, r3
 8003c20:	893b      	ldrh	r3, [r7, #8]
 8003c22:	687a      	ldr	r2, [r7, #4]
 8003c24:	47a0      	blx	r4
 8003c26:	4603      	mov	r3, r0
  }
}
 8003c28:	4618      	mov	r0, r3
 8003c2a:	371c      	adds	r7, #28
 8003c2c:	46bd      	mov	sp, r7
 8003c2e:	bd90      	pop	{r4, r7, pc}

08003c30 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData>:
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData(LIS2MDL_Object_t *pObj, uint8_t Reg, uint8_t *pData,
                                                     uint16_t Length)
{
 8003c30:	b580      	push	{r7, lr}
 8003c32:	b08c      	sub	sp, #48	; 0x30
 8003c34:	af00      	add	r7, sp, #0
 8003c36:	60f8      	str	r0, [r7, #12]
 8003c38:	607a      	str	r2, [r7, #4]
 8003c3a:	461a      	mov	r2, r3
 8003c3c:	460b      	mov	r3, r1
 8003c3e:	72fb      	strb	r3, [r7, #11]
 8003c40:	4613      	mov	r3, r2
 8003c42:	813b      	strh	r3, [r7, #8]
  uint8_t lsm6dsox_func_cfg_access = 0x01U;
 8003c44:	2301      	movs	r3, #1
 8003c46:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  uint8_t shub_reg_access_en = 0x40U;
 8003c4a:	2340      	movs	r3, #64	; 0x40
 8003c4c:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
  uint8_t shub_reg_access_dis = 0x00U;
 8003c50:	2300      	movs	r3, #0
 8003c52:	f887 3020 	strb.w	r3, [r7, #32]
  uint8_t ext_sens_addr_read = LIS2MDL_I2C_ADD | 0x01U;
 8003c56:	233d      	movs	r3, #61	; 0x3d
 8003c58:	77fb      	strb	r3, [r7, #31]
  uint8_t slv0_add = 0x15U;
 8003c5a:	2315      	movs	r3, #21
 8003c5c:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
  uint8_t slv0_subadd = 0x16U;
 8003c60:	2316      	movs	r3, #22
 8003c62:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  uint8_t slave0_config = 0x17U;
 8003c66:	2317      	movs	r3, #23
 8003c68:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  uint8_t master_config = 0x14U;
 8003c6c:	2314      	movs	r3, #20
 8003c6e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
  uint8_t write_once_i2c_en = 0x44U;
 8003c72:	2344      	movs	r3, #68	; 0x44
 8003c74:	77bb      	strb	r3, [r7, #30]
  uint8_t sensor_hub_1 = 0x02U;
 8003c76:	2302      	movs	r3, #2
 8003c78:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  uint8_t status_master_mainpage = 0x39U;
 8003c7c:	2339      	movs	r3, #57	; 0x39
 8003c7e:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
  uint8_t sens_hub_endop = 0x01U;
 8003c82:	2301      	movs	r3, #1
 8003c84:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
  uint8_t lsm6dsox_outx_h_a = 0x29U;
 8003c88:	2329      	movs	r3, #41	; 0x29
 8003c8a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint8_t lsm6dsox_status_reg = 0x1EU;
 8003c8e:	231e      	movs	r3, #30
 8003c90:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  uint8_t xlda = 0x01U;
 8003c94:	2301      	movs	r3, #1
 8003c96:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  uint8_t len = (uint8_t)Length;
 8003c9a:	893b      	ldrh	r3, [r7, #8]
 8003c9c:	b2db      	uxtb	r3, r3
 8003c9e:	777b      	strb	r3, [r7, #29]
  uint8_t lsm6dsox_ctrl1_xl = 0x10U;
 8003ca0:	2310      	movs	r3, #16
 8003ca2:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  uint8_t lsm6dsox_xl_prev_odr;
  uint8_t lsm6dsox_xl_odr_off = 0x00U;
 8003ca6:	2300      	movs	r3, #0
 8003ca8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint8_t lsm6dsox_xl_odr_104hz = 0x40U;
 8003cac:	2340      	movs	r3, #64	; 0x40
 8003cae:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  uint8_t data;
  uint8_t data_array[6];

  /* Enable access to sensor hub registers */
  if (lis2mdl_write_reg(&(pObj->Ctx), lsm6dsox_func_cfg_access, &shub_reg_access_en, 1) != LIS2MDL_OK)
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	f103 0020 	add.w	r0, r3, #32
 8003cb8:	f107 0221 	add.w	r2, r7, #33	; 0x21
 8003cbc:	f897 102f 	ldrb.w	r1, [r7, #47]	; 0x2f
 8003cc0:	2301      	movs	r3, #1
 8003cc2:	f000 fa2a 	bl	800411a <lis2mdl_write_reg>
 8003cc6:	4603      	mov	r3, r0
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d002      	beq.n	8003cd2 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0xa2>
  {
    return LIS2MDL_ERROR;
 8003ccc:	f04f 33ff 	mov.w	r3, #4294967295
 8003cd0:	e0e9      	b.n	8003ea6 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
  }

  /* Configure external device address, Enable read operation (rw_0 = 1) */
  if (lis2mdl_write_reg(&(pObj->Ctx), slv0_add, &ext_sens_addr_read, 1) != LIS2MDL_OK)
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	f103 0020 	add.w	r0, r3, #32
 8003cd8:	f107 021f 	add.w	r2, r7, #31
 8003cdc:	f897 102e 	ldrb.w	r1, [r7, #46]	; 0x2e
 8003ce0:	2301      	movs	r3, #1
 8003ce2:	f000 fa1a 	bl	800411a <lis2mdl_write_reg>
 8003ce6:	4603      	mov	r3, r0
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d002      	beq.n	8003cf2 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0xc2>
  {
    return LIS2MDL_ERROR;
 8003cec:	f04f 33ff 	mov.w	r3, #4294967295
 8003cf0:	e0d9      	b.n	8003ea6 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
  }

  /* Configure address of the LIS2MDL register to be read */
  if (lis2mdl_write_reg(&(pObj->Ctx), slv0_subadd, &Reg, 1) != LIS2MDL_OK)
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	f103 0020 	add.w	r0, r3, #32
 8003cf8:	f107 020b 	add.w	r2, r7, #11
 8003cfc:	f897 102d 	ldrb.w	r1, [r7, #45]	; 0x2d
 8003d00:	2301      	movs	r3, #1
 8003d02:	f000 fa0a 	bl	800411a <lis2mdl_write_reg>
 8003d06:	4603      	mov	r3, r0
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d002      	beq.n	8003d12 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0xe2>
  {
    return LIS2MDL_ERROR;
 8003d0c:	f04f 33ff 	mov.w	r3, #4294967295
 8003d10:	e0c9      	b.n	8003ea6 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
  }

  /* Read required number of bytes (up to 6), SHUB_ODR = 104 Hz */
  if (lis2mdl_write_reg(&(pObj->Ctx), slave0_config, &len, 1) != LIS2MDL_OK)
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	f103 0020 	add.w	r0, r3, #32
 8003d18:	f107 021d 	add.w	r2, r7, #29
 8003d1c:	f897 102c 	ldrb.w	r1, [r7, #44]	; 0x2c
 8003d20:	2301      	movs	r3, #1
 8003d22:	f000 f9fa 	bl	800411a <lis2mdl_write_reg>
 8003d26:	4603      	mov	r3, r0
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d002      	beq.n	8003d32 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x102>
  {
    return LIS2MDL_ERROR;
 8003d2c:	f04f 33ff 	mov.w	r3, #4294967295
 8003d30:	e0b9      	b.n	8003ea6 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
  }

  /* WRITE_ONCE is mandatory for read, I2C master enabled using slave 0, I2C pull-ups disabled */
  if (lis2mdl_write_reg(&(pObj->Ctx), master_config, &write_once_i2c_en, 1) != LIS2MDL_OK)
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	f103 0020 	add.w	r0, r3, #32
 8003d38:	f107 021e 	add.w	r2, r7, #30
 8003d3c:	f897 102b 	ldrb.w	r1, [r7, #43]	; 0x2b
 8003d40:	2301      	movs	r3, #1
 8003d42:	f000 f9ea 	bl	800411a <lis2mdl_write_reg>
 8003d46:	4603      	mov	r3, r0
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d002      	beq.n	8003d52 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x122>
  {
    return LIS2MDL_ERROR;
 8003d4c:	f04f 33ff 	mov.w	r3, #4294967295
 8003d50:	e0a9      	b.n	8003ea6 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
  }

  /* Disable access to sensor hub registers */
  if (lis2mdl_write_reg(&(pObj->Ctx), lsm6dsox_func_cfg_access, &shub_reg_access_dis, 1) != LIS2MDL_OK)
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	f103 0020 	add.w	r0, r3, #32
 8003d58:	f107 0220 	add.w	r2, r7, #32
 8003d5c:	f897 102f 	ldrb.w	r1, [r7, #47]	; 0x2f
 8003d60:	2301      	movs	r3, #1
 8003d62:	f000 f9da 	bl	800411a <lis2mdl_write_reg>
 8003d66:	4603      	mov	r3, r0
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d002      	beq.n	8003d72 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x142>
  {
    return LIS2MDL_ERROR;
 8003d6c:	f04f 33ff 	mov.w	r3, #4294967295
 8003d70:	e099      	b.n	8003ea6 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
  }

  /* Read LSM6DSOX ODR */
  if (lis2mdl_read_reg(&(pObj->Ctx), lsm6dsox_ctrl1_xl, &lsm6dsox_xl_prev_odr, 1) != LIS2MDL_OK)
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	f103 0020 	add.w	r0, r3, #32
 8003d78:	f107 021c 	add.w	r2, r7, #28
 8003d7c:	f897 1024 	ldrb.w	r1, [r7, #36]	; 0x24
 8003d80:	2301      	movs	r3, #1
 8003d82:	f000 f9b2 	bl	80040ea <lis2mdl_read_reg>
 8003d86:	4603      	mov	r3, r0
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d002      	beq.n	8003d92 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x162>
  {
    return LIS2MDL_ERROR;
 8003d8c:	f04f 33ff 	mov.w	r3, #4294967295
 8003d90:	e089      	b.n	8003ea6 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
  }

  /* Set XL_ODR_104HZ if the accelerometer is disabled */
  if (lsm6dsox_xl_prev_odr == lsm6dsox_xl_odr_off)
 8003d92:	7f3b      	ldrb	r3, [r7, #28]
 8003d94:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8003d98:	429a      	cmp	r2, r3
 8003d9a:	d102      	bne.n	8003da2 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x172>
  {
    lsm6dsox_xl_prev_odr = lsm6dsox_xl_odr_104hz;
 8003d9c:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8003da0:	773b      	strb	r3, [r7, #28]
  }

  /* Enable accelerometer to trigger Sensor Hub operation */
  if (lis2mdl_write_reg(&(pObj->Ctx), lsm6dsox_ctrl1_xl, &lsm6dsox_xl_prev_odr, 1) != LIS2MDL_OK)
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	f103 0020 	add.w	r0, r3, #32
 8003da8:	f107 021c 	add.w	r2, r7, #28
 8003dac:	f897 1024 	ldrb.w	r1, [r7, #36]	; 0x24
 8003db0:	2301      	movs	r3, #1
 8003db2:	f000 f9b2 	bl	800411a <lis2mdl_write_reg>
 8003db6:	4603      	mov	r3, r0
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d002      	beq.n	8003dc2 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x192>
  {
    return LIS2MDL_ERROR;
 8003dbc:	f04f 33ff 	mov.w	r3, #4294967295
 8003dc0:	e071      	b.n	8003ea6 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
  }

  /* Read ACC data starting from LSM6DSOX OUTX_H_A register to clear accelerometer data-ready XLDA */
  if (lis2mdl_read_reg(&(pObj->Ctx), lsm6dsox_outx_h_a, data_array, 6) != LIS2MDL_OK)
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	f103 0020 	add.w	r0, r3, #32
 8003dc8:	f107 0214 	add.w	r2, r7, #20
 8003dcc:	f897 1027 	ldrb.w	r1, [r7, #39]	; 0x27
 8003dd0:	2306      	movs	r3, #6
 8003dd2:	f000 f98a 	bl	80040ea <lis2mdl_read_reg>
 8003dd6:	4603      	mov	r3, r0
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d002      	beq.n	8003de2 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x1b2>
  {
    return LIS2MDL_ERROR;
 8003ddc:	f04f 33ff 	mov.w	r3, #4294967295
 8003de0:	e061      	b.n	8003ea6 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
  }

  /* Poll LSM6DSOX LSM6DSOX_STATUS_REG until XLDA = 1 (Wait for sensor hub trigger) */
  do
  {
    if (lis2mdl_read_reg(&(pObj->Ctx), lsm6dsox_status_reg, &data, 1) != LIS2MDL_OK)
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	f103 0020 	add.w	r0, r3, #32
 8003de8:	f107 021b 	add.w	r2, r7, #27
 8003dec:	f897 1026 	ldrb.w	r1, [r7, #38]	; 0x26
 8003df0:	2301      	movs	r3, #1
 8003df2:	f000 f97a 	bl	80040ea <lis2mdl_read_reg>
 8003df6:	4603      	mov	r3, r0
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d002      	beq.n	8003e02 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x1d2>
    {
      return LIS2MDL_ERROR;
 8003dfc:	f04f 33ff 	mov.w	r3, #4294967295
 8003e00:	e051      	b.n	8003ea6 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
    }
  } while ((data & xlda) != xlda);
 8003e02:	7efa      	ldrb	r2, [r7, #27]
 8003e04:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8003e08:	4013      	ands	r3, r2
 8003e0a:	b2db      	uxtb	r3, r3
 8003e0c:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
 8003e10:	429a      	cmp	r2, r3
 8003e12:	d1e6      	bne.n	8003de2 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x1b2>

  /* Poll LSM6DSOX SensorHub SENS_HUB_ENDOP bit in STATUS_MASTER_MAINPAGE reg until the end of SW write operations */
  do
  {
    if (lis2mdl_read_reg(&(pObj->Ctx), status_master_mainpage, &data, 1) != LIS2MDL_OK)
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	f103 0020 	add.w	r0, r3, #32
 8003e1a:	f107 021b 	add.w	r2, r7, #27
 8003e1e:	f897 1029 	ldrb.w	r1, [r7, #41]	; 0x29
 8003e22:	2301      	movs	r3, #1
 8003e24:	f000 f961 	bl	80040ea <lis2mdl_read_reg>
 8003e28:	4603      	mov	r3, r0
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d002      	beq.n	8003e34 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x204>
    {
      return LIS2MDL_ERROR;
 8003e2e:	f04f 33ff 	mov.w	r3, #4294967295
 8003e32:	e038      	b.n	8003ea6 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
    }
  } while ((data & sens_hub_endop) != sens_hub_endop);
 8003e34:	7efa      	ldrb	r2, [r7, #27]
 8003e36:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8003e3a:	4013      	ands	r3, r2
 8003e3c:	b2db      	uxtb	r3, r3
 8003e3e:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8003e42:	429a      	cmp	r2, r3
 8003e44:	d1e6      	bne.n	8003e14 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x1e4>

  /* Enable access to sensor hub registers */
  if (lis2mdl_write_reg(&(pObj->Ctx), lsm6dsox_func_cfg_access, &shub_reg_access_en, 1) != LIS2MDL_OK)
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	f103 0020 	add.w	r0, r3, #32
 8003e4c:	f107 0221 	add.w	r2, r7, #33	; 0x21
 8003e50:	f897 102f 	ldrb.w	r1, [r7, #47]	; 0x2f
 8003e54:	2301      	movs	r3, #1
 8003e56:	f000 f960 	bl	800411a <lis2mdl_write_reg>
 8003e5a:	4603      	mov	r3, r0
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d002      	beq.n	8003e66 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x236>
  {
    return LIS2MDL_ERROR;
 8003e60:	f04f 33ff 	mov.w	r3, #4294967295
 8003e64:	e01f      	b.n	8003ea6 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
  }

  /* Read data from LSM6DSOX SensorHub regs containing values from required LIS2MDL regs */
  if (lis2mdl_read_reg(&(pObj->Ctx), sensor_hub_1, pData, Length) != LIS2MDL_OK)
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	f103 0020 	add.w	r0, r3, #32
 8003e6c:	893b      	ldrh	r3, [r7, #8]
 8003e6e:	f897 102a 	ldrb.w	r1, [r7, #42]	; 0x2a
 8003e72:	687a      	ldr	r2, [r7, #4]
 8003e74:	f000 f939 	bl	80040ea <lis2mdl_read_reg>
 8003e78:	4603      	mov	r3, r0
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d002      	beq.n	8003e84 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x254>
  {
    return LIS2MDL_ERROR;
 8003e7e:	f04f 33ff 	mov.w	r3, #4294967295
 8003e82:	e010      	b.n	8003ea6 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
  }

  /* Disable access to sensor hub registers */
  if (lis2mdl_write_reg(&(pObj->Ctx), lsm6dsox_func_cfg_access, &shub_reg_access_dis, 1) != LIS2MDL_OK)
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	f103 0020 	add.w	r0, r3, #32
 8003e8a:	f107 0220 	add.w	r2, r7, #32
 8003e8e:	f897 102f 	ldrb.w	r1, [r7, #47]	; 0x2f
 8003e92:	2301      	movs	r3, #1
 8003e94:	f000 f941 	bl	800411a <lis2mdl_write_reg>
 8003e98:	4603      	mov	r3, r0
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d002      	beq.n	8003ea4 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x274>
  {
    return LIS2MDL_ERROR;
 8003e9e:	f04f 33ff 	mov.w	r3, #4294967295
 8003ea2:	e000      	b.n	8003ea6 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
  }

  return LIS2MDL_OK;
 8003ea4:	2300      	movs	r3, #0
}
 8003ea6:	4618      	mov	r0, r3
 8003ea8:	3730      	adds	r7, #48	; 0x30
 8003eaa:	46bd      	mov	sp, r7
 8003eac:	bd80      	pop	{r7, pc}

08003eae <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData>:
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData(LIS2MDL_Object_t *pObj, uint8_t Reg, uint8_t *pData,
                                                      uint16_t Length)
{
 8003eae:	b580      	push	{r7, lr}
 8003eb0:	b08c      	sub	sp, #48	; 0x30
 8003eb2:	af00      	add	r7, sp, #0
 8003eb4:	60f8      	str	r0, [r7, #12]
 8003eb6:	607a      	str	r2, [r7, #4]
 8003eb8:	461a      	mov	r2, r3
 8003eba:	460b      	mov	r3, r1
 8003ebc:	72fb      	strb	r3, [r7, #11]
 8003ebe:	4613      	mov	r3, r2
 8003ec0:	813b      	strh	r3, [r7, #8]
  uint8_t lsm6dsox_func_cfg_access = 0x01U;
 8003ec2:	2301      	movs	r3, #1
 8003ec4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  uint8_t shub_reg_access_en = 0x40U;
 8003ec8:	2340      	movs	r3, #64	; 0x40
 8003eca:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
  uint8_t shub_reg_access_dis = 0x00U;
 8003ece:	2300      	movs	r3, #0
 8003ed0:	f887 3020 	strb.w	r3, [r7, #32]
  uint8_t ext_sens_addr_write = LIS2MDL_I2C_ADD & 0xFEU;
 8003ed4:	233c      	movs	r3, #60	; 0x3c
 8003ed6:	77fb      	strb	r3, [r7, #31]
  uint8_t slv0_add = 0x15U;
 8003ed8:	2315      	movs	r3, #21
 8003eda:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
  uint8_t slv0_subadd = 0x16U;
 8003ede:	2316      	movs	r3, #22
 8003ee0:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  uint8_t slave0_config = 0x17U;
 8003ee4:	2317      	movs	r3, #23
 8003ee6:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  uint8_t shub_odr_104 = 0x00U;
 8003eea:	2300      	movs	r3, #0
 8003eec:	77bb      	strb	r3, [r7, #30]
  uint8_t master_config = 0x14U;
 8003eee:	2314      	movs	r3, #20
 8003ef0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
  uint8_t write_once_i2c_en = 0x44U;
 8003ef4:	2344      	movs	r3, #68	; 0x44
 8003ef6:	777b      	strb	r3, [r7, #29]
  uint8_t status_master_mainpage = 0x39U;
 8003ef8:	2339      	movs	r3, #57	; 0x39
 8003efa:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  uint8_t wr_once_done = 0x80U;
 8003efe:	2380      	movs	r3, #128	; 0x80
 8003f00:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
  uint8_t lsm6dsox_outx_h_a = 0x29U;
 8003f04:	2329      	movs	r3, #41	; 0x29
 8003f06:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
  uint8_t lsm6dsox_status_reg = 0x1EU;
 8003f0a:	231e      	movs	r3, #30
 8003f0c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint8_t xlda = 0x01U;
 8003f10:	2301      	movs	r3, #1
 8003f12:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  uint8_t lsm6dsox_ctrl1_xl = 0x10U;
 8003f16:	2310      	movs	r3, #16
 8003f18:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  uint8_t lsm6dsox_xl_prev_odr;
  uint8_t lsm6dsox_xl_odr_off = 0x00U;
 8003f1c:	2300      	movs	r3, #0
 8003f1e:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  uint8_t lsm6dsox_xl_odr_104hz = 0x40U;
 8003f22:	2340      	movs	r3, #64	; 0x40
 8003f24:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint8_t datawrite_slv0 = 0x0EU;
 8003f28:	230e      	movs	r3, #14
 8003f2a:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  uint8_t data;
  uint8_t data_array[6];

  /* Enable access to sensor hub registers */
  if (lis2mdl_write_reg(&(pObj->Ctx), lsm6dsox_func_cfg_access, &shub_reg_access_en, 1) != LIS2MDL_OK)
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	f103 0020 	add.w	r0, r3, #32
 8003f34:	f107 0221 	add.w	r2, r7, #33	; 0x21
 8003f38:	f897 102f 	ldrb.w	r1, [r7, #47]	; 0x2f
 8003f3c:	2301      	movs	r3, #1
 8003f3e:	f000 f8ec 	bl	800411a <lis2mdl_write_reg>
 8003f42:	4603      	mov	r3, r0
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d002      	beq.n	8003f4e <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0xa0>
  {
    return LIS2MDL_ERROR;
 8003f48:	f04f 33ff 	mov.w	r3, #4294967295
 8003f4c:	e0c9      	b.n	80040e2 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x234>
  }

  /* Configure external device address, Enable write operation (rw_0 = 0) */
  if (lis2mdl_write_reg(&(pObj->Ctx), slv0_add, &ext_sens_addr_write, 1) != LIS2MDL_OK)
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	f103 0020 	add.w	r0, r3, #32
 8003f54:	f107 021f 	add.w	r2, r7, #31
 8003f58:	f897 102e 	ldrb.w	r1, [r7, #46]	; 0x2e
 8003f5c:	2301      	movs	r3, #1
 8003f5e:	f000 f8dc 	bl	800411a <lis2mdl_write_reg>
 8003f62:	4603      	mov	r3, r0
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d002      	beq.n	8003f6e <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0xc0>
  {
    return LIS2MDL_ERROR;
 8003f68:	f04f 33ff 	mov.w	r3, #4294967295
 8003f6c:	e0b9      	b.n	80040e2 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x234>
  }

  /* Configure address of the LIS2MDL register to be written to */
  if (lis2mdl_write_reg(&(pObj->Ctx), slv0_subadd, &Reg, 1) != LIS2MDL_OK)
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	f103 0020 	add.w	r0, r3, #32
 8003f74:	f107 020b 	add.w	r2, r7, #11
 8003f78:	f897 102d 	ldrb.w	r1, [r7, #45]	; 0x2d
 8003f7c:	2301      	movs	r3, #1
 8003f7e:	f000 f8cc 	bl	800411a <lis2mdl_write_reg>
 8003f82:	4603      	mov	r3, r0
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d002      	beq.n	8003f8e <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0xe0>
  {
    return LIS2MDL_ERROR;
 8003f88:	f04f 33ff 	mov.w	r3, #4294967295
 8003f8c:	e0a9      	b.n	80040e2 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x234>
  }

  /* Set SHUB_ODR = 104 Hz */
  if (lis2mdl_write_reg(&(pObj->Ctx), slave0_config, &shub_odr_104, 1) != LIS2MDL_OK)
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	f103 0020 	add.w	r0, r3, #32
 8003f94:	f107 021e 	add.w	r2, r7, #30
 8003f98:	f897 102c 	ldrb.w	r1, [r7, #44]	; 0x2c
 8003f9c:	2301      	movs	r3, #1
 8003f9e:	f000 f8bc 	bl	800411a <lis2mdl_write_reg>
 8003fa2:	4603      	mov	r3, r0
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d002      	beq.n	8003fae <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x100>
  {
    return LIS2MDL_ERROR;
 8003fa8:	f04f 33ff 	mov.w	r3, #4294967295
 8003fac:	e099      	b.n	80040e2 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x234>
  }

  /* Store data to be written to LIS2MDL in LSM6DSOX SH reg */
  if (lis2mdl_write_reg(&(pObj->Ctx), datawrite_slv0, pData, 1) != LIS2MDL_OK)
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	f103 0020 	add.w	r0, r3, #32
 8003fb4:	f897 1022 	ldrb.w	r1, [r7, #34]	; 0x22
 8003fb8:	2301      	movs	r3, #1
 8003fba:	687a      	ldr	r2, [r7, #4]
 8003fbc:	f000 f8ad 	bl	800411a <lis2mdl_write_reg>
 8003fc0:	4603      	mov	r3, r0
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d002      	beq.n	8003fcc <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x11e>
  {
    return LIS2MDL_ERROR;
 8003fc6:	f04f 33ff 	mov.w	r3, #4294967295
 8003fca:	e08a      	b.n	80040e2 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x234>
  }

  /* WRITE_ONCE enabled for single write, I2C master enabled using slave 0, I2C pull-ups disabled */
  if (lis2mdl_write_reg(&(pObj->Ctx), master_config, &write_once_i2c_en, 1) != LIS2MDL_OK)
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	f103 0020 	add.w	r0, r3, #32
 8003fd2:	f107 021d 	add.w	r2, r7, #29
 8003fd6:	f897 102b 	ldrb.w	r1, [r7, #43]	; 0x2b
 8003fda:	2301      	movs	r3, #1
 8003fdc:	f000 f89d 	bl	800411a <lis2mdl_write_reg>
 8003fe0:	4603      	mov	r3, r0
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d002      	beq.n	8003fec <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x13e>
  {
    return LIS2MDL_ERROR;
 8003fe6:	f04f 33ff 	mov.w	r3, #4294967295
 8003fea:	e07a      	b.n	80040e2 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x234>
  }

  /* Disable access to sensor hub registers */
  if (lis2mdl_write_reg(&(pObj->Ctx), lsm6dsox_func_cfg_access, &shub_reg_access_dis, 1) != LIS2MDL_OK)
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	f103 0020 	add.w	r0, r3, #32
 8003ff2:	f107 0220 	add.w	r2, r7, #32
 8003ff6:	f897 102f 	ldrb.w	r1, [r7, #47]	; 0x2f
 8003ffa:	2301      	movs	r3, #1
 8003ffc:	f000 f88d 	bl	800411a <lis2mdl_write_reg>
 8004000:	4603      	mov	r3, r0
 8004002:	2b00      	cmp	r3, #0
 8004004:	d002      	beq.n	800400c <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x15e>
  {
    return LIS2MDL_ERROR;
 8004006:	f04f 33ff 	mov.w	r3, #4294967295
 800400a:	e06a      	b.n	80040e2 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x234>
  }

  /* Read LSM6DSOX ODR */
  if (lis2mdl_read_reg(&(pObj->Ctx), lsm6dsox_ctrl1_xl, &lsm6dsox_xl_prev_odr, 1) != LIS2MDL_OK)
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	f103 0020 	add.w	r0, r3, #32
 8004012:	f107 021c 	add.w	r2, r7, #28
 8004016:	f897 1025 	ldrb.w	r1, [r7, #37]	; 0x25
 800401a:	2301      	movs	r3, #1
 800401c:	f000 f865 	bl	80040ea <lis2mdl_read_reg>
 8004020:	4603      	mov	r3, r0
 8004022:	2b00      	cmp	r3, #0
 8004024:	d002      	beq.n	800402c <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x17e>
  {
    return LIS2MDL_ERROR;
 8004026:	f04f 33ff 	mov.w	r3, #4294967295
 800402a:	e05a      	b.n	80040e2 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x234>
  }

  /* Set XL_ODR_104HZ if the accelerometer is disabled */
  if (lsm6dsox_xl_prev_odr == lsm6dsox_xl_odr_off)
 800402c:	7f3b      	ldrb	r3, [r7, #28]
 800402e:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8004032:	429a      	cmp	r2, r3
 8004034:	d102      	bne.n	800403c <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x18e>
  {
    lsm6dsox_xl_prev_odr = lsm6dsox_xl_odr_104hz;
 8004036:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800403a:	773b      	strb	r3, [r7, #28]
  }

  /* Enable accelerometer to trigger Sensor Hub operation */
  if (lis2mdl_write_reg(&(pObj->Ctx), lsm6dsox_ctrl1_xl, &lsm6dsox_xl_prev_odr, 1) != LIS2MDL_OK)
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	f103 0020 	add.w	r0, r3, #32
 8004042:	f107 021c 	add.w	r2, r7, #28
 8004046:	f897 1025 	ldrb.w	r1, [r7, #37]	; 0x25
 800404a:	2301      	movs	r3, #1
 800404c:	f000 f865 	bl	800411a <lis2mdl_write_reg>
 8004050:	4603      	mov	r3, r0
 8004052:	2b00      	cmp	r3, #0
 8004054:	d002      	beq.n	800405c <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x1ae>
  {
    return LIS2MDL_ERROR;
 8004056:	f04f 33ff 	mov.w	r3, #4294967295
 800405a:	e042      	b.n	80040e2 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x234>
  }

  /* Read ACC data starting from LSM6DSOX OUTX_H_A register to clear accelerometer data-ready XLDA */
  if (lis2mdl_read_reg(&(pObj->Ctx), lsm6dsox_outx_h_a, data_array, 6) != LIS2MDL_OK)
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	f103 0020 	add.w	r0, r3, #32
 8004062:	f107 0214 	add.w	r2, r7, #20
 8004066:	f897 1028 	ldrb.w	r1, [r7, #40]	; 0x28
 800406a:	2306      	movs	r3, #6
 800406c:	f000 f83d 	bl	80040ea <lis2mdl_read_reg>
 8004070:	4603      	mov	r3, r0
 8004072:	2b00      	cmp	r3, #0
 8004074:	d002      	beq.n	800407c <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x1ce>
  {
    return LIS2MDL_ERROR;
 8004076:	f04f 33ff 	mov.w	r3, #4294967295
 800407a:	e032      	b.n	80040e2 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x234>
  }

  /* Poll LSM6DSOX LSM6DSOX_STATUS_REG until XLDA = 1 (Wait for sensor hub trigger) */
  do
  {
    if (lis2mdl_read_reg(&(pObj->Ctx), lsm6dsox_status_reg, &data, 1) != LIS2MDL_OK)
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	f103 0020 	add.w	r0, r3, #32
 8004082:	f107 021b 	add.w	r2, r7, #27
 8004086:	f897 1027 	ldrb.w	r1, [r7, #39]	; 0x27
 800408a:	2301      	movs	r3, #1
 800408c:	f000 f82d 	bl	80040ea <lis2mdl_read_reg>
 8004090:	4603      	mov	r3, r0
 8004092:	2b00      	cmp	r3, #0
 8004094:	d002      	beq.n	800409c <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x1ee>
    {
      return LIS2MDL_ERROR;
 8004096:	f04f 33ff 	mov.w	r3, #4294967295
 800409a:	e022      	b.n	80040e2 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x234>
    }
  } while ((data & xlda) != xlda);
 800409c:	7efa      	ldrb	r2, [r7, #27]
 800409e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80040a2:	4013      	ands	r3, r2
 80040a4:	b2db      	uxtb	r3, r3
 80040a6:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 80040aa:	429a      	cmp	r2, r3
 80040ac:	d1e6      	bne.n	800407c <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x1ce>

  /* Poll LSM6DSOX SensorHub WR_ONCE_DONE bit in STATUS_MASTER_MAINPAGE reg until the end of SW write operations */
  do
  {
    if (lis2mdl_read_reg(&(pObj->Ctx), status_master_mainpage, &data, 1) != LIS2MDL_OK)
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	f103 0020 	add.w	r0, r3, #32
 80040b4:	f107 021b 	add.w	r2, r7, #27
 80040b8:	f897 102a 	ldrb.w	r1, [r7, #42]	; 0x2a
 80040bc:	2301      	movs	r3, #1
 80040be:	f000 f814 	bl	80040ea <lis2mdl_read_reg>
 80040c2:	4603      	mov	r3, r0
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d002      	beq.n	80040ce <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x220>
    {
      return LIS2MDL_ERROR;
 80040c8:	f04f 33ff 	mov.w	r3, #4294967295
 80040cc:	e009      	b.n	80040e2 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x234>
    }
  } while ((data & wr_once_done) != wr_once_done);
 80040ce:	7efa      	ldrb	r2, [r7, #27]
 80040d0:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 80040d4:	4013      	ands	r3, r2
 80040d6:	b2db      	uxtb	r3, r3
 80040d8:	f897 2029 	ldrb.w	r2, [r7, #41]	; 0x29
 80040dc:	429a      	cmp	r2, r3
 80040de:	d1e6      	bne.n	80040ae <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x200>

  return LIS2MDL_OK;
 80040e0:	2300      	movs	r3, #0
}
 80040e2:	4618      	mov	r0, r3
 80040e4:	3730      	adds	r7, #48	; 0x30
 80040e6:	46bd      	mov	sp, r7
 80040e8:	bd80      	pop	{r7, pc}

080040ea <lis2mdl_read_reg>:
  *
  */
int32_t lis2mdl_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                         uint8_t *data,
                         uint16_t len)
{
 80040ea:	b590      	push	{r4, r7, lr}
 80040ec:	b087      	sub	sp, #28
 80040ee:	af00      	add	r7, sp, #0
 80040f0:	60f8      	str	r0, [r7, #12]
 80040f2:	607a      	str	r2, [r7, #4]
 80040f4:	461a      	mov	r2, r3
 80040f6:	460b      	mov	r3, r1
 80040f8:	72fb      	strb	r3, [r7, #11]
 80040fa:	4613      	mov	r3, r2
 80040fc:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	685c      	ldr	r4, [r3, #4]
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	68d8      	ldr	r0, [r3, #12]
 8004106:	893b      	ldrh	r3, [r7, #8]
 8004108:	7af9      	ldrb	r1, [r7, #11]
 800410a:	687a      	ldr	r2, [r7, #4]
 800410c:	47a0      	blx	r4
 800410e:	6178      	str	r0, [r7, #20]

  return ret;
 8004110:	697b      	ldr	r3, [r7, #20]
}
 8004112:	4618      	mov	r0, r3
 8004114:	371c      	adds	r7, #28
 8004116:	46bd      	mov	sp, r7
 8004118:	bd90      	pop	{r4, r7, pc}

0800411a <lis2mdl_write_reg>:
  *
  */
int32_t lis2mdl_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                          uint8_t *data,
                          uint16_t len)
{
 800411a:	b590      	push	{r4, r7, lr}
 800411c:	b087      	sub	sp, #28
 800411e:	af00      	add	r7, sp, #0
 8004120:	60f8      	str	r0, [r7, #12]
 8004122:	607a      	str	r2, [r7, #4]
 8004124:	461a      	mov	r2, r3
 8004126:	460b      	mov	r3, r1
 8004128:	72fb      	strb	r3, [r7, #11]
 800412a:	4613      	mov	r3, r2
 800412c:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	681c      	ldr	r4, [r3, #0]
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	68d8      	ldr	r0, [r3, #12]
 8004136:	893b      	ldrh	r3, [r7, #8]
 8004138:	7af9      	ldrb	r1, [r7, #11]
 800413a:	687a      	ldr	r2, [r7, #4]
 800413c:	47a0      	blx	r4
 800413e:	6178      	str	r0, [r7, #20]

  return ret;
 8004140:	697b      	ldr	r3, [r7, #20]
}
 8004142:	4618      	mov	r0, r3
 8004144:	371c      	adds	r7, #28
 8004146:	46bd      	mov	sp, r7
 8004148:	bd90      	pop	{r4, r7, pc}

0800414a <lis2mdl_operating_mode_set>:
  * @retval        interface status.(MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2mdl_operating_mode_set(stmdev_ctx_t *ctx,
                                   lis2mdl_md_t val)
{
 800414a:	b580      	push	{r7, lr}
 800414c:	b084      	sub	sp, #16
 800414e:	af00      	add	r7, sp, #0
 8004150:	6078      	str	r0, [r7, #4]
 8004152:	460b      	mov	r3, r1
 8004154:	70fb      	strb	r3, [r7, #3]
  lis2mdl_cfg_reg_a_t reg;
  int32_t ret;

  ret = lis2mdl_read_reg(ctx, LIS2MDL_CFG_REG_A, (uint8_t *)&reg, 1);
 8004156:	f107 0208 	add.w	r2, r7, #8
 800415a:	2301      	movs	r3, #1
 800415c:	2160      	movs	r1, #96	; 0x60
 800415e:	6878      	ldr	r0, [r7, #4]
 8004160:	f7ff ffc3 	bl	80040ea <lis2mdl_read_reg>
 8004164:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	2b00      	cmp	r3, #0
 800416a:	d10f      	bne.n	800418c <lis2mdl_operating_mode_set+0x42>
  {
    reg.md = (uint8_t)val;
 800416c:	78fb      	ldrb	r3, [r7, #3]
 800416e:	f003 0303 	and.w	r3, r3, #3
 8004172:	b2da      	uxtb	r2, r3
 8004174:	7a3b      	ldrb	r3, [r7, #8]
 8004176:	f362 0301 	bfi	r3, r2, #0, #2
 800417a:	723b      	strb	r3, [r7, #8]
    ret = lis2mdl_write_reg(ctx, LIS2MDL_CFG_REG_A, (uint8_t *)&reg, 1);
 800417c:	f107 0208 	add.w	r2, r7, #8
 8004180:	2301      	movs	r3, #1
 8004182:	2160      	movs	r1, #96	; 0x60
 8004184:	6878      	ldr	r0, [r7, #4]
 8004186:	f7ff ffc8 	bl	800411a <lis2mdl_write_reg>
 800418a:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 800418c:	68fb      	ldr	r3, [r7, #12]
}
 800418e:	4618      	mov	r0, r3
 8004190:	3710      	adds	r7, #16
 8004192:	46bd      	mov	sp, r7
 8004194:	bd80      	pop	{r7, pc}

08004196 <lis2mdl_data_rate_set>:
  * @param  val   change the values of odr in reg CFG_REG_A
  * @retval       interface status.(MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2mdl_data_rate_set(stmdev_ctx_t *ctx, lis2mdl_odr_t val)
{
 8004196:	b580      	push	{r7, lr}
 8004198:	b084      	sub	sp, #16
 800419a:	af00      	add	r7, sp, #0
 800419c:	6078      	str	r0, [r7, #4]
 800419e:	460b      	mov	r3, r1
 80041a0:	70fb      	strb	r3, [r7, #3]
  lis2mdl_cfg_reg_a_t reg;
  int32_t ret;

  ret = lis2mdl_read_reg(ctx, LIS2MDL_CFG_REG_A, (uint8_t *)&reg, 1);
 80041a2:	f107 0208 	add.w	r2, r7, #8
 80041a6:	2301      	movs	r3, #1
 80041a8:	2160      	movs	r1, #96	; 0x60
 80041aa:	6878      	ldr	r0, [r7, #4]
 80041ac:	f7ff ff9d 	bl	80040ea <lis2mdl_read_reg>
 80041b0:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d10f      	bne.n	80041d8 <lis2mdl_data_rate_set+0x42>
  {
    reg.odr = (uint8_t)val;
 80041b8:	78fb      	ldrb	r3, [r7, #3]
 80041ba:	f003 0303 	and.w	r3, r3, #3
 80041be:	b2da      	uxtb	r2, r3
 80041c0:	7a3b      	ldrb	r3, [r7, #8]
 80041c2:	f362 0383 	bfi	r3, r2, #2, #2
 80041c6:	723b      	strb	r3, [r7, #8]
    ret = lis2mdl_write_reg(ctx, LIS2MDL_CFG_REG_A, (uint8_t *)&reg, 1);
 80041c8:	f107 0208 	add.w	r2, r7, #8
 80041cc:	2301      	movs	r3, #1
 80041ce:	2160      	movs	r1, #96	; 0x60
 80041d0:	6878      	ldr	r0, [r7, #4]
 80041d2:	f7ff ffa2 	bl	800411a <lis2mdl_write_reg>
 80041d6:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80041d8:	68fb      	ldr	r3, [r7, #12]
}
 80041da:	4618      	mov	r0, r3
 80041dc:	3710      	adds	r7, #16
 80041de:	46bd      	mov	sp, r7
 80041e0:	bd80      	pop	{r7, pc}
	...

080041e4 <lis2mdl_data_rate_get>:
  * @param  val   Get the values of odr in reg CFG_REG_A.(ptr)
  * @retval       interface status.(MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2mdl_data_rate_get(stmdev_ctx_t *ctx, lis2mdl_odr_t *val)
{
 80041e4:	b580      	push	{r7, lr}
 80041e6:	b084      	sub	sp, #16
 80041e8:	af00      	add	r7, sp, #0
 80041ea:	6078      	str	r0, [r7, #4]
 80041ec:	6039      	str	r1, [r7, #0]
  lis2mdl_cfg_reg_a_t reg;
  int32_t ret;

  ret = lis2mdl_read_reg(ctx, LIS2MDL_CFG_REG_A, (uint8_t *)&reg, 1);
 80041ee:	f107 0208 	add.w	r2, r7, #8
 80041f2:	2301      	movs	r3, #1
 80041f4:	2160      	movs	r1, #96	; 0x60
 80041f6:	6878      	ldr	r0, [r7, #4]
 80041f8:	f7ff ff77 	bl	80040ea <lis2mdl_read_reg>
 80041fc:	60f8      	str	r0, [r7, #12]

  switch (reg.odr)
 80041fe:	7a3b      	ldrb	r3, [r7, #8]
 8004200:	f3c3 0381 	ubfx	r3, r3, #2, #2
 8004204:	b2db      	uxtb	r3, r3
 8004206:	2b03      	cmp	r3, #3
 8004208:	d81a      	bhi.n	8004240 <lis2mdl_data_rate_get+0x5c>
 800420a:	a201      	add	r2, pc, #4	; (adr r2, 8004210 <lis2mdl_data_rate_get+0x2c>)
 800420c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004210:	08004221 	.word	0x08004221
 8004214:	08004229 	.word	0x08004229
 8004218:	08004231 	.word	0x08004231
 800421c:	08004239 	.word	0x08004239
  {
    case LIS2MDL_ODR_10Hz:
      *val = LIS2MDL_ODR_10Hz;
 8004220:	683b      	ldr	r3, [r7, #0]
 8004222:	2200      	movs	r2, #0
 8004224:	701a      	strb	r2, [r3, #0]
      break;
 8004226:	e00f      	b.n	8004248 <lis2mdl_data_rate_get+0x64>

    case LIS2MDL_ODR_20Hz:
      *val = LIS2MDL_ODR_20Hz;
 8004228:	683b      	ldr	r3, [r7, #0]
 800422a:	2201      	movs	r2, #1
 800422c:	701a      	strb	r2, [r3, #0]
      break;
 800422e:	e00b      	b.n	8004248 <lis2mdl_data_rate_get+0x64>

    case LIS2MDL_ODR_50Hz:
      *val = LIS2MDL_ODR_50Hz;
 8004230:	683b      	ldr	r3, [r7, #0]
 8004232:	2202      	movs	r2, #2
 8004234:	701a      	strb	r2, [r3, #0]
      break;
 8004236:	e007      	b.n	8004248 <lis2mdl_data_rate_get+0x64>

    case LIS2MDL_ODR_100Hz:
      *val = LIS2MDL_ODR_100Hz;
 8004238:	683b      	ldr	r3, [r7, #0]
 800423a:	2203      	movs	r2, #3
 800423c:	701a      	strb	r2, [r3, #0]
      break;
 800423e:	e003      	b.n	8004248 <lis2mdl_data_rate_get+0x64>

    default:
      *val = LIS2MDL_ODR_10Hz;
 8004240:	683b      	ldr	r3, [r7, #0]
 8004242:	2200      	movs	r2, #0
 8004244:	701a      	strb	r2, [r3, #0]
      break;
 8004246:	bf00      	nop
  }

  return ret;
 8004248:	68fb      	ldr	r3, [r7, #12]
}
 800424a:	4618      	mov	r0, r3
 800424c:	3710      	adds	r7, #16
 800424e:	46bd      	mov	sp, r7
 8004250:	bd80      	pop	{r7, pc}
 8004252:	bf00      	nop

08004254 <lis2mdl_block_data_update_set>:
  * @param  val   change the values of bdu in reg CFG_REG_C
  * @retval       interface status.(MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2mdl_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8004254:	b580      	push	{r7, lr}
 8004256:	b084      	sub	sp, #16
 8004258:	af00      	add	r7, sp, #0
 800425a:	6078      	str	r0, [r7, #4]
 800425c:	460b      	mov	r3, r1
 800425e:	70fb      	strb	r3, [r7, #3]
  lis2mdl_cfg_reg_c_t reg;
  int32_t ret;

  ret = lis2mdl_read_reg(ctx, LIS2MDL_CFG_REG_C, (uint8_t *)&reg, 1);
 8004260:	f107 0208 	add.w	r2, r7, #8
 8004264:	2301      	movs	r3, #1
 8004266:	2162      	movs	r1, #98	; 0x62
 8004268:	6878      	ldr	r0, [r7, #4]
 800426a:	f7ff ff3e 	bl	80040ea <lis2mdl_read_reg>
 800426e:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	2b00      	cmp	r3, #0
 8004274:	d10f      	bne.n	8004296 <lis2mdl_block_data_update_set+0x42>
  {
    reg.bdu = val;
 8004276:	78fb      	ldrb	r3, [r7, #3]
 8004278:	f003 0301 	and.w	r3, r3, #1
 800427c:	b2da      	uxtb	r2, r3
 800427e:	7a3b      	ldrb	r3, [r7, #8]
 8004280:	f362 1304 	bfi	r3, r2, #4, #1
 8004284:	723b      	strb	r3, [r7, #8]
    ret = lis2mdl_write_reg(ctx, LIS2MDL_CFG_REG_C, (uint8_t *)&reg, 1);
 8004286:	f107 0208 	add.w	r2, r7, #8
 800428a:	2301      	movs	r3, #1
 800428c:	2162      	movs	r1, #98	; 0x62
 800428e:	6878      	ldr	r0, [r7, #4]
 8004290:	f7ff ff43 	bl	800411a <lis2mdl_write_reg>
 8004294:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8004296:	68fb      	ldr	r3, [r7, #12]
}
 8004298:	4618      	mov	r0, r3
 800429a:	3710      	adds	r7, #16
 800429c:	46bd      	mov	sp, r7
 800429e:	bd80      	pop	{r7, pc}

080042a0 <lis2mdl_magnetic_raw_get>:
  * @param  buff  that stores data read
  * @retval       interface status.(MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2mdl_magnetic_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 80042a0:	b580      	push	{r7, lr}
 80042a2:	b086      	sub	sp, #24
 80042a4:	af00      	add	r7, sp, #0
 80042a6:	6078      	str	r0, [r7, #4]
 80042a8:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;

  ret = lis2mdl_read_reg(ctx, LIS2MDL_OUTX_L_REG, buff, 6);
 80042aa:	f107 020c 	add.w	r2, r7, #12
 80042ae:	2306      	movs	r3, #6
 80042b0:	2168      	movs	r1, #104	; 0x68
 80042b2:	6878      	ldr	r0, [r7, #4]
 80042b4:	f7ff ff19 	bl	80040ea <lis2mdl_read_reg>
 80042b8:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 80042ba:	7b7b      	ldrb	r3, [r7, #13]
 80042bc:	b21a      	sxth	r2, r3
 80042be:	683b      	ldr	r3, [r7, #0]
 80042c0:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 80042c2:	683b      	ldr	r3, [r7, #0]
 80042c4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80042c8:	b29b      	uxth	r3, r3
 80042ca:	021b      	lsls	r3, r3, #8
 80042cc:	b29a      	uxth	r2, r3
 80042ce:	7b3b      	ldrb	r3, [r7, #12]
 80042d0:	b29b      	uxth	r3, r3
 80042d2:	4413      	add	r3, r2
 80042d4:	b29b      	uxth	r3, r3
 80042d6:	b21a      	sxth	r2, r3
 80042d8:	683b      	ldr	r3, [r7, #0]
 80042da:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 80042dc:	7bfa      	ldrb	r2, [r7, #15]
 80042de:	683b      	ldr	r3, [r7, #0]
 80042e0:	3302      	adds	r3, #2
 80042e2:	b212      	sxth	r2, r2
 80042e4:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 80042e6:	683b      	ldr	r3, [r7, #0]
 80042e8:	3302      	adds	r3, #2
 80042ea:	f9b3 3000 	ldrsh.w	r3, [r3]
 80042ee:	b29b      	uxth	r3, r3
 80042f0:	021b      	lsls	r3, r3, #8
 80042f2:	b29a      	uxth	r2, r3
 80042f4:	7bbb      	ldrb	r3, [r7, #14]
 80042f6:	b29b      	uxth	r3, r3
 80042f8:	4413      	add	r3, r2
 80042fa:	b29a      	uxth	r2, r3
 80042fc:	683b      	ldr	r3, [r7, #0]
 80042fe:	3302      	adds	r3, #2
 8004300:	b212      	sxth	r2, r2
 8004302:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 8004304:	7c7a      	ldrb	r2, [r7, #17]
 8004306:	683b      	ldr	r3, [r7, #0]
 8004308:	3304      	adds	r3, #4
 800430a:	b212      	sxth	r2, r2
 800430c:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 800430e:	683b      	ldr	r3, [r7, #0]
 8004310:	3304      	adds	r3, #4
 8004312:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004316:	b29b      	uxth	r3, r3
 8004318:	021b      	lsls	r3, r3, #8
 800431a:	b29a      	uxth	r2, r3
 800431c:	7c3b      	ldrb	r3, [r7, #16]
 800431e:	b29b      	uxth	r3, r3
 8004320:	4413      	add	r3, r2
 8004322:	b29a      	uxth	r2, r3
 8004324:	683b      	ldr	r3, [r7, #0]
 8004326:	3304      	adds	r3, #4
 8004328:	b212      	sxth	r2, r2
 800432a:	801a      	strh	r2, [r3, #0]

  return ret;
 800432c:	697b      	ldr	r3, [r7, #20]
}
 800432e:	4618      	mov	r0, r3
 8004330:	3718      	adds	r7, #24
 8004332:	46bd      	mov	sp, r7
 8004334:	bd80      	pop	{r7, pc}

08004336 <lis2mdl_device_id_get>:
  * @param  buff  that stores data read
  * @retval       interface status.(MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2mdl_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 8004336:	b580      	push	{r7, lr}
 8004338:	b084      	sub	sp, #16
 800433a:	af00      	add	r7, sp, #0
 800433c:	6078      	str	r0, [r7, #4]
 800433e:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = lis2mdl_read_reg(ctx, LIS2MDL_WHO_AM_I, buff, 1);
 8004340:	2301      	movs	r3, #1
 8004342:	683a      	ldr	r2, [r7, #0]
 8004344:	214f      	movs	r1, #79	; 0x4f
 8004346:	6878      	ldr	r0, [r7, #4]
 8004348:	f7ff fecf 	bl	80040ea <lis2mdl_read_reg>
 800434c:	60f8      	str	r0, [r7, #12]

  return ret;
 800434e:	68fb      	ldr	r3, [r7, #12]
}
 8004350:	4618      	mov	r0, r3
 8004352:	3710      	adds	r7, #16
 8004354:	46bd      	mov	sp, r7
 8004356:	bd80      	pop	{r7, pc}

08004358 <lis2mdl_self_test_set>:
  * @param  val   change the values of self_test in reg CFG_REG_C
  * @retval       interface status.(MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2mdl_self_test_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8004358:	b580      	push	{r7, lr}
 800435a:	b084      	sub	sp, #16
 800435c:	af00      	add	r7, sp, #0
 800435e:	6078      	str	r0, [r7, #4]
 8004360:	460b      	mov	r3, r1
 8004362:	70fb      	strb	r3, [r7, #3]
  lis2mdl_cfg_reg_c_t reg;
  int32_t ret;

  ret = lis2mdl_read_reg(ctx, LIS2MDL_CFG_REG_C, (uint8_t *)&reg, 1);
 8004364:	f107 0208 	add.w	r2, r7, #8
 8004368:	2301      	movs	r3, #1
 800436a:	2162      	movs	r1, #98	; 0x62
 800436c:	6878      	ldr	r0, [r7, #4]
 800436e:	f7ff febc 	bl	80040ea <lis2mdl_read_reg>
 8004372:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	2b00      	cmp	r3, #0
 8004378:	d10f      	bne.n	800439a <lis2mdl_self_test_set+0x42>
  {
    reg.self_test = val;
 800437a:	78fb      	ldrb	r3, [r7, #3]
 800437c:	f003 0301 	and.w	r3, r3, #1
 8004380:	b2da      	uxtb	r2, r3
 8004382:	7a3b      	ldrb	r3, [r7, #8]
 8004384:	f362 0341 	bfi	r3, r2, #1, #1
 8004388:	723b      	strb	r3, [r7, #8]
    ret = lis2mdl_write_reg(ctx, LIS2MDL_CFG_REG_C, (uint8_t *)&reg, 1);
 800438a:	f107 0208 	add.w	r2, r7, #8
 800438e:	2301      	movs	r3, #1
 8004390:	2162      	movs	r1, #98	; 0x62
 8004392:	6878      	ldr	r0, [r7, #4]
 8004394:	f7ff fec1 	bl	800411a <lis2mdl_write_reg>
 8004398:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 800439a:	68fb      	ldr	r3, [r7, #12]
}
 800439c:	4618      	mov	r0, r3
 800439e:	3710      	adds	r7, #16
 80043a0:	46bd      	mov	sp, r7
 80043a2:	bd80      	pop	{r7, pc}

080043a4 <lis2mdl_i2c_interface_set>:
  * @retval       interface status.(MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2mdl_i2c_interface_set(stmdev_ctx_t *ctx,
                                  lis2mdl_i2c_dis_t val)
{
 80043a4:	b580      	push	{r7, lr}
 80043a6:	b084      	sub	sp, #16
 80043a8:	af00      	add	r7, sp, #0
 80043aa:	6078      	str	r0, [r7, #4]
 80043ac:	460b      	mov	r3, r1
 80043ae:	70fb      	strb	r3, [r7, #3]
  lis2mdl_cfg_reg_c_t reg;
  int32_t ret;

  ret = lis2mdl_read_reg(ctx, LIS2MDL_CFG_REG_C, (uint8_t *)&reg, 1);
 80043b0:	f107 0208 	add.w	r2, r7, #8
 80043b4:	2301      	movs	r3, #1
 80043b6:	2162      	movs	r1, #98	; 0x62
 80043b8:	6878      	ldr	r0, [r7, #4]
 80043ba:	f7ff fe96 	bl	80040ea <lis2mdl_read_reg>
 80043be:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d10f      	bne.n	80043e6 <lis2mdl_i2c_interface_set+0x42>
  {
    reg.i2c_dis = (uint8_t)val;
 80043c6:	78fb      	ldrb	r3, [r7, #3]
 80043c8:	f003 0301 	and.w	r3, r3, #1
 80043cc:	b2da      	uxtb	r2, r3
 80043ce:	7a3b      	ldrb	r3, [r7, #8]
 80043d0:	f362 1345 	bfi	r3, r2, #5, #1
 80043d4:	723b      	strb	r3, [r7, #8]
    ret = lis2mdl_write_reg(ctx, LIS2MDL_CFG_REG_C, (uint8_t *)&reg, 1);
 80043d6:	f107 0208 	add.w	r2, r7, #8
 80043da:	2301      	movs	r3, #1
 80043dc:	2162      	movs	r1, #98	; 0x62
 80043de:	6878      	ldr	r0, [r7, #4]
 80043e0:	f7ff fe9b 	bl	800411a <lis2mdl_write_reg>
 80043e4:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80043e6:	68fb      	ldr	r3, [r7, #12]
}
 80043e8:	4618      	mov	r0, r3
 80043ea:	3710      	adds	r7, #16
 80043ec:	46bd      	mov	sp, r7
 80043ee:	bd80      	pop	{r7, pc}

080043f0 <LSM6DSO_RegisterBusIO>:
  * @brief  Register Component Bus IO operations
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_RegisterBusIO(LSM6DSO_Object_t *pObj, LSM6DSO_IO_t *pIO)
{
 80043f0:	b580      	push	{r7, lr}
 80043f2:	b084      	sub	sp, #16
 80043f4:	af00      	add	r7, sp, #0
 80043f6:	6078      	str	r0, [r7, #4]
 80043f8:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSO_OK;
 80043fa:	2300      	movs	r3, #0
 80043fc:	60fb      	str	r3, [r7, #12]

  if (pObj == NULL)
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	2b00      	cmp	r3, #0
 8004402:	d103      	bne.n	800440c <LSM6DSO_RegisterBusIO+0x1c>
  {
    ret = LSM6DSO_ERROR;
 8004404:	f04f 33ff 	mov.w	r3, #4294967295
 8004408:	60fb      	str	r3, [r7, #12]
 800440a:	e051      	b.n	80044b0 <LSM6DSO_RegisterBusIO+0xc0>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 800440c:	683b      	ldr	r3, [r7, #0]
 800440e:	681a      	ldr	r2, [r3, #0]
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 8004414:	683b      	ldr	r3, [r7, #0]
 8004416:	685a      	ldr	r2, [r3, #4]
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	605a      	str	r2, [r3, #4]
    pObj->IO.BusType   = pIO->BusType;
 800441c:	683b      	ldr	r3, [r7, #0]
 800441e:	689a      	ldr	r2, [r3, #8]
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	609a      	str	r2, [r3, #8]
    pObj->IO.Address   = pIO->Address;
 8004424:	683b      	ldr	r3, [r7, #0]
 8004426:	7b1a      	ldrb	r2, [r3, #12]
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	731a      	strb	r2, [r3, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 800442c:	683b      	ldr	r3, [r7, #0]
 800442e:	691a      	ldr	r2, [r3, #16]
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	611a      	str	r2, [r3, #16]
    pObj->IO.ReadReg   = pIO->ReadReg;
 8004434:	683b      	ldr	r3, [r7, #0]
 8004436:	695a      	ldr	r2, [r3, #20]
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	615a      	str	r2, [r3, #20]
    pObj->IO.GetTick   = pIO->GetTick;
 800443c:	683b      	ldr	r3, [r7, #0]
 800443e:	699a      	ldr	r2, [r3, #24]
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	619a      	str	r2, [r3, #24]

    pObj->Ctx.read_reg  = ReadRegWrap;
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	4a1d      	ldr	r2, [pc, #116]	; (80044bc <LSM6DSO_RegisterBusIO+0xcc>)
 8004448:	625a      	str	r2, [r3, #36]	; 0x24
    pObj->Ctx.write_reg = WriteRegWrap;
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	4a1c      	ldr	r2, [pc, #112]	; (80044c0 <LSM6DSO_RegisterBusIO+0xd0>)
 800444e:	621a      	str	r2, [r3, #32]
    pObj->Ctx.mdelay    = pIO->Delay;
 8004450:	683b      	ldr	r3, [r7, #0]
 8004452:	69da      	ldr	r2, [r3, #28]
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	629a      	str	r2, [r3, #40]	; 0x28
    pObj->Ctx.handle   = pObj;
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	687a      	ldr	r2, [r7, #4]
 800445c:	62da      	str	r2, [r3, #44]	; 0x2c

    if (pObj->IO.Init == NULL)
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	2b00      	cmp	r3, #0
 8004464:	d103      	bne.n	800446e <LSM6DSO_RegisterBusIO+0x7e>
    {
      ret = LSM6DSO_ERROR;
 8004466:	f04f 33ff 	mov.w	r3, #4294967295
 800446a:	60fb      	str	r3, [r7, #12]
 800446c:	e020      	b.n	80044b0 <LSM6DSO_RegisterBusIO+0xc0>
    }
    else if (pObj->IO.Init() != LSM6DSO_OK)
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	4798      	blx	r3
 8004474:	4603      	mov	r3, r0
 8004476:	2b00      	cmp	r3, #0
 8004478:	d003      	beq.n	8004482 <LSM6DSO_RegisterBusIO+0x92>
    {
      ret = LSM6DSO_ERROR;
 800447a:	f04f 33ff 	mov.w	r3, #4294967295
 800447e:	60fb      	str	r3, [r7, #12]
 8004480:	e016      	b.n	80044b0 <LSM6DSO_RegisterBusIO+0xc0>
    }
    else
    {
      if (pObj->IO.BusType == LSM6DSO_SPI_3WIRES_BUS) /* SPI 3-Wires */
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	689b      	ldr	r3, [r3, #8]
 8004486:	2b02      	cmp	r3, #2
 8004488:	d112      	bne.n	80044b0 <LSM6DSO_RegisterBusIO+0xc0>
      {
        /* Enable the SPI 3-Wires support only the first time */
        if (pObj->is_initialized == 0U)
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004490:	2b00      	cmp	r3, #0
 8004492:	d10d      	bne.n	80044b0 <LSM6DSO_RegisterBusIO+0xc0>
        {
          /* Enable SPI 3-Wires on the component */
          uint8_t data = 0x0C;
 8004494:	230c      	movs	r3, #12
 8004496:	72fb      	strb	r3, [r7, #11]

          if (LSM6DSO_Write_Reg(pObj, LSM6DSO_CTRL3_C, data) != LSM6DSO_OK)
 8004498:	7afb      	ldrb	r3, [r7, #11]
 800449a:	461a      	mov	r2, r3
 800449c:	2112      	movs	r1, #18
 800449e:	6878      	ldr	r0, [r7, #4]
 80044a0:	f000 ff59 	bl	8005356 <LSM6DSO_Write_Reg>
 80044a4:	4603      	mov	r3, r0
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d002      	beq.n	80044b0 <LSM6DSO_RegisterBusIO+0xc0>
          {
            ret = LSM6DSO_ERROR;
 80044aa:	f04f 33ff 	mov.w	r3, #4294967295
 80044ae:	60fb      	str	r3, [r7, #12]
        }
      }
    }
  }

  return ret;
 80044b0:	68fb      	ldr	r3, [r7, #12]
}
 80044b2:	4618      	mov	r0, r3
 80044b4:	3710      	adds	r7, #16
 80044b6:	46bd      	mov	sp, r7
 80044b8:	bd80      	pop	{r7, pc}
 80044ba:	bf00      	nop
 80044bc:	080057f9 	.word	0x080057f9
 80044c0:	0800582f 	.word	0x0800582f

080044c4 <LSM6DSO_Init>:
  * @brief  Initialize the LSM6DSO sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_Init(LSM6DSO_Object_t *pObj)
{
 80044c4:	b580      	push	{r7, lr}
 80044c6:	b082      	sub	sp, #8
 80044c8:	af00      	add	r7, sp, #0
 80044ca:	6078      	str	r0, [r7, #4]
  /* Disable I3C */
  if (lsm6dso_i3c_disable_set(&(pObj->Ctx), LSM6DSO_I3C_DISABLE) != LSM6DSO_OK)
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	3320      	adds	r3, #32
 80044d0:	2180      	movs	r1, #128	; 0x80
 80044d2:	4618      	mov	r0, r3
 80044d4:	f001 fe97 	bl	8006206 <lsm6dso_i3c_disable_set>
 80044d8:	4603      	mov	r3, r0
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d002      	beq.n	80044e4 <LSM6DSO_Init+0x20>
  {
    return LSM6DSO_ERROR;
 80044de:	f04f 33ff 	mov.w	r3, #4294967295
 80044e2:	e060      	b.n	80045a6 <LSM6DSO_Init+0xe2>
  }

  /* Enable register address automatically incremented during a multiple byte
  access with a serial interface. */
  if (lsm6dso_auto_increment_set(&(pObj->Ctx), PROPERTY_ENABLE) != LSM6DSO_OK)
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	3320      	adds	r3, #32
 80044e8:	2101      	movs	r1, #1
 80044ea:	4618      	mov	r0, r3
 80044ec:	f001 fe65 	bl	80061ba <lsm6dso_auto_increment_set>
 80044f0:	4603      	mov	r3, r0
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d002      	beq.n	80044fc <LSM6DSO_Init+0x38>
  {
    return LSM6DSO_ERROR;
 80044f6:	f04f 33ff 	mov.w	r3, #4294967295
 80044fa:	e054      	b.n	80045a6 <LSM6DSO_Init+0xe2>
  }

  /* Enable BDU */
  if (lsm6dso_block_data_update_set(&(pObj->Ctx), PROPERTY_ENABLE) != LSM6DSO_OK)
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	3320      	adds	r3, #32
 8004500:	2101      	movs	r1, #1
 8004502:	4618      	mov	r0, r3
 8004504:	f001 fd66 	bl	8005fd4 <lsm6dso_block_data_update_set>
 8004508:	4603      	mov	r3, r0
 800450a:	2b00      	cmp	r3, #0
 800450c:	d002      	beq.n	8004514 <LSM6DSO_Init+0x50>
  {
    return LSM6DSO_ERROR;
 800450e:	f04f 33ff 	mov.w	r3, #4294967295
 8004512:	e048      	b.n	80045a6 <LSM6DSO_Init+0xe2>
  }

  /* FIFO mode selection */
  if (lsm6dso_fifo_mode_set(&(pObj->Ctx), LSM6DSO_BYPASS_MODE) != LSM6DSO_OK)
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	3320      	adds	r3, #32
 8004518:	2100      	movs	r1, #0
 800451a:	4618      	mov	r0, r3
 800451c:	f001 feb9 	bl	8006292 <lsm6dso_fifo_mode_set>
 8004520:	4603      	mov	r3, r0
 8004522:	2b00      	cmp	r3, #0
 8004524:	d002      	beq.n	800452c <LSM6DSO_Init+0x68>
  {
    return LSM6DSO_ERROR;
 8004526:	f04f 33ff 	mov.w	r3, #4294967295
 800452a:	e03c      	b.n	80045a6 <LSM6DSO_Init+0xe2>
  }

  /* Select default output data rate. */
  pObj->acc_odr = LSM6DSO_XL_ODR_104Hz;
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	2204      	movs	r2, #4
 8004530:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33

  /* Output data rate selection - power down. */
  if (lsm6dso_xl_data_rate_set(&(pObj->Ctx), LSM6DSO_XL_ODR_OFF) != LSM6DSO_OK)
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	3320      	adds	r3, #32
 8004538:	2100      	movs	r1, #0
 800453a:	4618      	mov	r0, r3
 800453c:	f001 fa20 	bl	8005980 <lsm6dso_xl_data_rate_set>
 8004540:	4603      	mov	r3, r0
 8004542:	2b00      	cmp	r3, #0
 8004544:	d002      	beq.n	800454c <LSM6DSO_Init+0x88>
  {
    return LSM6DSO_ERROR;
 8004546:	f04f 33ff 	mov.w	r3, #4294967295
 800454a:	e02c      	b.n	80045a6 <LSM6DSO_Init+0xe2>
  }

  /* Full scale selection. */
  if (lsm6dso_xl_full_scale_set(&(pObj->Ctx), LSM6DSO_2g) != LSM6DSO_OK)
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	3320      	adds	r3, #32
 8004550:	2100      	movs	r1, #0
 8004552:	4618      	mov	r0, r3
 8004554:	f001 f9b6 	bl	80058c4 <lsm6dso_xl_full_scale_set>
 8004558:	4603      	mov	r3, r0
 800455a:	2b00      	cmp	r3, #0
 800455c:	d002      	beq.n	8004564 <LSM6DSO_Init+0xa0>
  {
    return LSM6DSO_ERROR;
 800455e:	f04f 33ff 	mov.w	r3, #4294967295
 8004562:	e020      	b.n	80045a6 <LSM6DSO_Init+0xe2>
  }

  /* Select default output data rate. */
  pObj->gyro_odr = LSM6DSO_GY_ODR_104Hz;
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	2204      	movs	r2, #4
 8004568:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Output data rate selection - power down. */
  if (lsm6dso_gy_data_rate_set(&(pObj->Ctx), LSM6DSO_GY_ODR_OFF) != LSM6DSO_OK)
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	3320      	adds	r3, #32
 8004570:	2100      	movs	r1, #0
 8004572:	4618      	mov	r0, r3
 8004574:	f001 fbd0 	bl	8005d18 <lsm6dso_gy_data_rate_set>
 8004578:	4603      	mov	r3, r0
 800457a:	2b00      	cmp	r3, #0
 800457c:	d002      	beq.n	8004584 <LSM6DSO_Init+0xc0>
  {
    return LSM6DSO_ERROR;
 800457e:	f04f 33ff 	mov.w	r3, #4294967295
 8004582:	e010      	b.n	80045a6 <LSM6DSO_Init+0xe2>
  }

  /* Full scale selection. */
  if (lsm6dso_gy_full_scale_set(&(pObj->Ctx), LSM6DSO_2000dps) != LSM6DSO_OK)
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	3320      	adds	r3, #32
 8004588:	2106      	movs	r1, #6
 800458a:	4618      	mov	r0, r3
 800458c:	f001 fb5c 	bl	8005c48 <lsm6dso_gy_full_scale_set>
 8004590:	4603      	mov	r3, r0
 8004592:	2b00      	cmp	r3, #0
 8004594:	d002      	beq.n	800459c <LSM6DSO_Init+0xd8>
  {
    return LSM6DSO_ERROR;
 8004596:	f04f 33ff 	mov.w	r3, #4294967295
 800459a:	e004      	b.n	80045a6 <LSM6DSO_Init+0xe2>
  }

  pObj->is_initialized = 1;
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	2201      	movs	r2, #1
 80045a0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return LSM6DSO_OK;
 80045a4:	2300      	movs	r3, #0
}
 80045a6:	4618      	mov	r0, r3
 80045a8:	3708      	adds	r7, #8
 80045aa:	46bd      	mov	sp, r7
 80045ac:	bd80      	pop	{r7, pc}

080045ae <LSM6DSO_DeInit>:
  * @brief  Deinitialize the LSM6DSO sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_DeInit(LSM6DSO_Object_t *pObj)
{
 80045ae:	b580      	push	{r7, lr}
 80045b0:	b082      	sub	sp, #8
 80045b2:	af00      	add	r7, sp, #0
 80045b4:	6078      	str	r0, [r7, #4]
  /* Disable the component */
  if (LSM6DSO_ACC_Disable(pObj) != LSM6DSO_OK)
 80045b6:	6878      	ldr	r0, [r7, #4]
 80045b8:	f000 f888 	bl	80046cc <LSM6DSO_ACC_Disable>
 80045bc:	4603      	mov	r3, r0
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d002      	beq.n	80045c8 <LSM6DSO_DeInit+0x1a>
  {
    return LSM6DSO_ERROR;
 80045c2:	f04f 33ff 	mov.w	r3, #4294967295
 80045c6:	e015      	b.n	80045f4 <LSM6DSO_DeInit+0x46>
  }

  if (LSM6DSO_GYRO_Disable(pObj) != LSM6DSO_OK)
 80045c8:	6878      	ldr	r0, [r7, #4]
 80045ca:	f000 fc2e 	bl	8004e2a <LSM6DSO_GYRO_Disable>
 80045ce:	4603      	mov	r3, r0
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d002      	beq.n	80045da <LSM6DSO_DeInit+0x2c>
  {
    return LSM6DSO_ERROR;
 80045d4:	f04f 33ff 	mov.w	r3, #4294967295
 80045d8:	e00c      	b.n	80045f4 <LSM6DSO_DeInit+0x46>
  }

  /* Reset output data rate. */
  pObj->acc_odr = LSM6DSO_XL_ODR_OFF;
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	2200      	movs	r2, #0
 80045de:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
  pObj->gyro_odr = LSM6DSO_GY_ODR_OFF;
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	2200      	movs	r2, #0
 80045e6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  pObj->is_initialized = 0;
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	2200      	movs	r2, #0
 80045ee:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return LSM6DSO_OK;
 80045f2:	2300      	movs	r3, #0
}
 80045f4:	4618      	mov	r0, r3
 80045f6:	3708      	adds	r7, #8
 80045f8:	46bd      	mov	sp, r7
 80045fa:	bd80      	pop	{r7, pc}

080045fc <LSM6DSO_ReadID>:
  * @param  pObj the device pObj
  * @param  Id the WHO_AM_I value
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_ReadID(LSM6DSO_Object_t *pObj, uint8_t *Id)
{
 80045fc:	b580      	push	{r7, lr}
 80045fe:	b082      	sub	sp, #8
 8004600:	af00      	add	r7, sp, #0
 8004602:	6078      	str	r0, [r7, #4]
 8004604:	6039      	str	r1, [r7, #0]
  if (lsm6dso_device_id_get(&(pObj->Ctx), Id) != LSM6DSO_OK)
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	3320      	adds	r3, #32
 800460a:	6839      	ldr	r1, [r7, #0]
 800460c:	4618      	mov	r0, r3
 800460e:	f001 fdc3 	bl	8006198 <lsm6dso_device_id_get>
 8004612:	4603      	mov	r3, r0
 8004614:	2b00      	cmp	r3, #0
 8004616:	d002      	beq.n	800461e <LSM6DSO_ReadID+0x22>
  {
    return LSM6DSO_ERROR;
 8004618:	f04f 33ff 	mov.w	r3, #4294967295
 800461c:	e000      	b.n	8004620 <LSM6DSO_ReadID+0x24>
  }

  return LSM6DSO_OK;
 800461e:	2300      	movs	r3, #0
}
 8004620:	4618      	mov	r0, r3
 8004622:	3708      	adds	r7, #8
 8004624:	46bd      	mov	sp, r7
 8004626:	bd80      	pop	{r7, pc}

08004628 <LSM6DSO_GetCapabilities>:
  * @param  pObj Component object pointer
  * @param  Capabilities pointer to LSM6DSO sensor capabilities
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_GetCapabilities(LSM6DSO_Object_t *pObj, LSM6DSO_Capabilities_t *Capabilities)
{
 8004628:	b480      	push	{r7}
 800462a:	b083      	sub	sp, #12
 800462c:	af00      	add	r7, sp, #0
 800462e:	6078      	str	r0, [r7, #4]
 8004630:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  Capabilities->Acc          = 1;
 8004632:	683b      	ldr	r3, [r7, #0]
 8004634:	2201      	movs	r2, #1
 8004636:	701a      	strb	r2, [r3, #0]
  Capabilities->Gyro         = 1;
 8004638:	683b      	ldr	r3, [r7, #0]
 800463a:	2201      	movs	r2, #1
 800463c:	705a      	strb	r2, [r3, #1]
  Capabilities->Magneto      = 0;
 800463e:	683b      	ldr	r3, [r7, #0]
 8004640:	2200      	movs	r2, #0
 8004642:	709a      	strb	r2, [r3, #2]
  Capabilities->LowPower     = 0;
 8004644:	683b      	ldr	r3, [r7, #0]
 8004646:	2200      	movs	r2, #0
 8004648:	70da      	strb	r2, [r3, #3]
  Capabilities->GyroMaxFS    = 2000;
 800464a:	683b      	ldr	r3, [r7, #0]
 800464c:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8004650:	605a      	str	r2, [r3, #4]
  Capabilities->AccMaxFS     = 16;
 8004652:	683b      	ldr	r3, [r7, #0]
 8004654:	2210      	movs	r2, #16
 8004656:	609a      	str	r2, [r3, #8]
  Capabilities->MagMaxFS     = 0;
 8004658:	683b      	ldr	r3, [r7, #0]
 800465a:	2200      	movs	r2, #0
 800465c:	60da      	str	r2, [r3, #12]
  Capabilities->GyroMaxOdr   = 6660.0f;
 800465e:	683b      	ldr	r3, [r7, #0]
 8004660:	4a07      	ldr	r2, [pc, #28]	; (8004680 <LSM6DSO_GetCapabilities+0x58>)
 8004662:	611a      	str	r2, [r3, #16]
  Capabilities->AccMaxOdr    = 6660.0f;
 8004664:	683b      	ldr	r3, [r7, #0]
 8004666:	4a06      	ldr	r2, [pc, #24]	; (8004680 <LSM6DSO_GetCapabilities+0x58>)
 8004668:	615a      	str	r2, [r3, #20]
  Capabilities->MagMaxOdr    = 0.0f;
 800466a:	683b      	ldr	r3, [r7, #0]
 800466c:	f04f 0200 	mov.w	r2, #0
 8004670:	619a      	str	r2, [r3, #24]
  return LSM6DSO_OK;
 8004672:	2300      	movs	r3, #0
}
 8004674:	4618      	mov	r0, r3
 8004676:	370c      	adds	r7, #12
 8004678:	46bd      	mov	sp, r7
 800467a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800467e:	4770      	bx	lr
 8004680:	45d02000 	.word	0x45d02000

08004684 <LSM6DSO_ACC_Enable>:
  * @brief  Enable the LSM6DSO accelerometer sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_ACC_Enable(LSM6DSO_Object_t *pObj)
{
 8004684:	b580      	push	{r7, lr}
 8004686:	b082      	sub	sp, #8
 8004688:	af00      	add	r7, sp, #0
 800468a:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->acc_is_enabled == 1U)
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8004692:	2b01      	cmp	r3, #1
 8004694:	d101      	bne.n	800469a <LSM6DSO_ACC_Enable+0x16>
  {
    return LSM6DSO_OK;
 8004696:	2300      	movs	r3, #0
 8004698:	e014      	b.n	80046c4 <LSM6DSO_ACC_Enable+0x40>
  }

  /* Output data rate selection. */
  if (lsm6dso_xl_data_rate_set(&(pObj->Ctx), pObj->acc_odr) != LSM6DSO_OK)
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	f103 0220 	add.w	r2, r3, #32
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 80046a6:	4619      	mov	r1, r3
 80046a8:	4610      	mov	r0, r2
 80046aa:	f001 f969 	bl	8005980 <lsm6dso_xl_data_rate_set>
 80046ae:	4603      	mov	r3, r0
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d002      	beq.n	80046ba <LSM6DSO_ACC_Enable+0x36>
  {
    return LSM6DSO_ERROR;
 80046b4:	f04f 33ff 	mov.w	r3, #4294967295
 80046b8:	e004      	b.n	80046c4 <LSM6DSO_ACC_Enable+0x40>
  }

  pObj->acc_is_enabled = 1;
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	2201      	movs	r2, #1
 80046be:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

  return LSM6DSO_OK;
 80046c2:	2300      	movs	r3, #0
}
 80046c4:	4618      	mov	r0, r3
 80046c6:	3708      	adds	r7, #8
 80046c8:	46bd      	mov	sp, r7
 80046ca:	bd80      	pop	{r7, pc}

080046cc <LSM6DSO_ACC_Disable>:
  * @brief  Disable the LSM6DSO accelerometer sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_ACC_Disable(LSM6DSO_Object_t *pObj)
{
 80046cc:	b580      	push	{r7, lr}
 80046ce:	b082      	sub	sp, #8
 80046d0:	af00      	add	r7, sp, #0
 80046d2:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->acc_is_enabled == 0U)
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d101      	bne.n	80046e2 <LSM6DSO_ACC_Disable+0x16>
  {
    return LSM6DSO_OK;
 80046de:	2300      	movs	r3, #0
 80046e0:	e01f      	b.n	8004722 <LSM6DSO_ACC_Disable+0x56>
  }

  /* Get current output data rate. */
  if (lsm6dso_xl_data_rate_get(&(pObj->Ctx), &pObj->acc_odr) != LSM6DSO_OK)
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	f103 0220 	add.w	r2, r3, #32
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	3333      	adds	r3, #51	; 0x33
 80046ec:	4619      	mov	r1, r3
 80046ee:	4610      	mov	r0, r2
 80046f0:	f001 fa42 	bl	8005b78 <lsm6dso_xl_data_rate_get>
 80046f4:	4603      	mov	r3, r0
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d002      	beq.n	8004700 <LSM6DSO_ACC_Disable+0x34>
  {
    return LSM6DSO_ERROR;
 80046fa:	f04f 33ff 	mov.w	r3, #4294967295
 80046fe:	e010      	b.n	8004722 <LSM6DSO_ACC_Disable+0x56>
  }

  /* Output data rate selection - power down. */
  if (lsm6dso_xl_data_rate_set(&(pObj->Ctx), LSM6DSO_XL_ODR_OFF) != LSM6DSO_OK)
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	3320      	adds	r3, #32
 8004704:	2100      	movs	r1, #0
 8004706:	4618      	mov	r0, r3
 8004708:	f001 f93a 	bl	8005980 <lsm6dso_xl_data_rate_set>
 800470c:	4603      	mov	r3, r0
 800470e:	2b00      	cmp	r3, #0
 8004710:	d002      	beq.n	8004718 <LSM6DSO_ACC_Disable+0x4c>
  {
    return LSM6DSO_ERROR;
 8004712:	f04f 33ff 	mov.w	r3, #4294967295
 8004716:	e004      	b.n	8004722 <LSM6DSO_ACC_Disable+0x56>
  }

  pObj->acc_is_enabled = 0;
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	2200      	movs	r2, #0
 800471c:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

  return LSM6DSO_OK;
 8004720:	2300      	movs	r3, #0
}
 8004722:	4618      	mov	r0, r3
 8004724:	3708      	adds	r7, #8
 8004726:	46bd      	mov	sp, r7
 8004728:	bd80      	pop	{r7, pc}
	...

0800472c <LSM6DSO_ACC_GetSensitivity>:
  * @param  pObj the device pObj
  * @param  Sensitivity pointer
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_ACC_GetSensitivity(LSM6DSO_Object_t *pObj, float_t *Sensitivity)
{
 800472c:	b580      	push	{r7, lr}
 800472e:	b084      	sub	sp, #16
 8004730:	af00      	add	r7, sp, #0
 8004732:	6078      	str	r0, [r7, #4]
 8004734:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSO_OK;
 8004736:	2300      	movs	r3, #0
 8004738:	60fb      	str	r3, [r7, #12]
  lsm6dso_fs_xl_t full_scale;

  /* Read actual full scale selection from sensor. */
  if (lsm6dso_xl_full_scale_get(&(pObj->Ctx), &full_scale) != LSM6DSO_OK)
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	3320      	adds	r3, #32
 800473e:	f107 020b 	add.w	r2, r7, #11
 8004742:	4611      	mov	r1, r2
 8004744:	4618      	mov	r0, r3
 8004746:	f001 f8e3 	bl	8005910 <lsm6dso_xl_full_scale_get>
 800474a:	4603      	mov	r3, r0
 800474c:	2b00      	cmp	r3, #0
 800474e:	d002      	beq.n	8004756 <LSM6DSO_ACC_GetSensitivity+0x2a>
  {
    return LSM6DSO_ERROR;
 8004750:	f04f 33ff 	mov.w	r3, #4294967295
 8004754:	e023      	b.n	800479e <LSM6DSO_ACC_GetSensitivity+0x72>
  }

  /* Store the Sensitivity based on actual full scale. */
  switch (full_scale)
 8004756:	7afb      	ldrb	r3, [r7, #11]
 8004758:	2b03      	cmp	r3, #3
 800475a:	d81b      	bhi.n	8004794 <LSM6DSO_ACC_GetSensitivity+0x68>
 800475c:	a201      	add	r2, pc, #4	; (adr r2, 8004764 <LSM6DSO_ACC_GetSensitivity+0x38>)
 800475e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004762:	bf00      	nop
 8004764:	08004775 	.word	0x08004775
 8004768:	0800478d 	.word	0x0800478d
 800476c:	0800477d 	.word	0x0800477d
 8004770:	08004785 	.word	0x08004785
  {
    case LSM6DSO_2g:
      *Sensitivity = LSM6DSO_ACC_SENSITIVITY_FS_2G;
 8004774:	683b      	ldr	r3, [r7, #0]
 8004776:	4a0c      	ldr	r2, [pc, #48]	; (80047a8 <LSM6DSO_ACC_GetSensitivity+0x7c>)
 8004778:	601a      	str	r2, [r3, #0]
      break;
 800477a:	e00f      	b.n	800479c <LSM6DSO_ACC_GetSensitivity+0x70>

    case LSM6DSO_4g:
      *Sensitivity = LSM6DSO_ACC_SENSITIVITY_FS_4G;
 800477c:	683b      	ldr	r3, [r7, #0]
 800477e:	4a0b      	ldr	r2, [pc, #44]	; (80047ac <LSM6DSO_ACC_GetSensitivity+0x80>)
 8004780:	601a      	str	r2, [r3, #0]
      break;
 8004782:	e00b      	b.n	800479c <LSM6DSO_ACC_GetSensitivity+0x70>

    case LSM6DSO_8g:
      *Sensitivity = LSM6DSO_ACC_SENSITIVITY_FS_8G;
 8004784:	683b      	ldr	r3, [r7, #0]
 8004786:	4a0a      	ldr	r2, [pc, #40]	; (80047b0 <LSM6DSO_ACC_GetSensitivity+0x84>)
 8004788:	601a      	str	r2, [r3, #0]
      break;
 800478a:	e007      	b.n	800479c <LSM6DSO_ACC_GetSensitivity+0x70>

    case LSM6DSO_16g:
      *Sensitivity = LSM6DSO_ACC_SENSITIVITY_FS_16G;
 800478c:	683b      	ldr	r3, [r7, #0]
 800478e:	4a09      	ldr	r2, [pc, #36]	; (80047b4 <LSM6DSO_ACC_GetSensitivity+0x88>)
 8004790:	601a      	str	r2, [r3, #0]
      break;
 8004792:	e003      	b.n	800479c <LSM6DSO_ACC_GetSensitivity+0x70>

    default:
      ret = LSM6DSO_ERROR;
 8004794:	f04f 33ff 	mov.w	r3, #4294967295
 8004798:	60fb      	str	r3, [r7, #12]
      break;
 800479a:	bf00      	nop
  }

  return ret;
 800479c:	68fb      	ldr	r3, [r7, #12]
}
 800479e:	4618      	mov	r0, r3
 80047a0:	3710      	adds	r7, #16
 80047a2:	46bd      	mov	sp, r7
 80047a4:	bd80      	pop	{r7, pc}
 80047a6:	bf00      	nop
 80047a8:	3d79db23 	.word	0x3d79db23
 80047ac:	3df9db23 	.word	0x3df9db23
 80047b0:	3e79db23 	.word	0x3e79db23
 80047b4:	3ef9db23 	.word	0x3ef9db23

080047b8 <LSM6DSO_ACC_GetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr pointer where the output data rate is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_ACC_GetOutputDataRate(LSM6DSO_Object_t *pObj, float_t *Odr)
{
 80047b8:	b580      	push	{r7, lr}
 80047ba:	b084      	sub	sp, #16
 80047bc:	af00      	add	r7, sp, #0
 80047be:	6078      	str	r0, [r7, #4]
 80047c0:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSO_OK;
 80047c2:	2300      	movs	r3, #0
 80047c4:	60fb      	str	r3, [r7, #12]
  lsm6dso_odr_xl_t odr_low_level;

  /* Get current output data rate. */
  if (lsm6dso_xl_data_rate_get(&(pObj->Ctx), &odr_low_level) != LSM6DSO_OK)
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	3320      	adds	r3, #32
 80047ca:	f107 020b 	add.w	r2, r7, #11
 80047ce:	4611      	mov	r1, r2
 80047d0:	4618      	mov	r0, r3
 80047d2:	f001 f9d1 	bl	8005b78 <lsm6dso_xl_data_rate_get>
 80047d6:	4603      	mov	r3, r0
 80047d8:	2b00      	cmp	r3, #0
 80047da:	d002      	beq.n	80047e2 <LSM6DSO_ACC_GetOutputDataRate+0x2a>
  {
    return LSM6DSO_ERROR;
 80047dc:	f04f 33ff 	mov.w	r3, #4294967295
 80047e0:	e054      	b.n	800488c <LSM6DSO_ACC_GetOutputDataRate+0xd4>
  }

  switch (odr_low_level)
 80047e2:	7afb      	ldrb	r3, [r7, #11]
 80047e4:	2b0b      	cmp	r3, #11
 80047e6:	d84c      	bhi.n	8004882 <LSM6DSO_ACC_GetOutputDataRate+0xca>
 80047e8:	a201      	add	r2, pc, #4	; (adr r2, 80047f0 <LSM6DSO_ACC_GetOutputDataRate+0x38>)
 80047ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80047ee:	bf00      	nop
 80047f0:	08004821 	.word	0x08004821
 80047f4:	08004833 	.word	0x08004833
 80047f8:	0800483b 	.word	0x0800483b
 80047fc:	08004843 	.word	0x08004843
 8004800:	0800484b 	.word	0x0800484b
 8004804:	08004853 	.word	0x08004853
 8004808:	0800485b 	.word	0x0800485b
 800480c:	08004863 	.word	0x08004863
 8004810:	0800486b 	.word	0x0800486b
 8004814:	08004873 	.word	0x08004873
 8004818:	0800487b 	.word	0x0800487b
 800481c:	0800482b 	.word	0x0800482b
  {
    case LSM6DSO_XL_ODR_OFF:
      *Odr = 0.0f;
 8004820:	683b      	ldr	r3, [r7, #0]
 8004822:	f04f 0200 	mov.w	r2, #0
 8004826:	601a      	str	r2, [r3, #0]
      break;
 8004828:	e02f      	b.n	800488a <LSM6DSO_ACC_GetOutputDataRate+0xd2>

    case LSM6DSO_XL_ODR_1Hz6:
      *Odr = 1.6f;
 800482a:	683b      	ldr	r3, [r7, #0]
 800482c:	4a19      	ldr	r2, [pc, #100]	; (8004894 <LSM6DSO_ACC_GetOutputDataRate+0xdc>)
 800482e:	601a      	str	r2, [r3, #0]
      break;
 8004830:	e02b      	b.n	800488a <LSM6DSO_ACC_GetOutputDataRate+0xd2>

    case LSM6DSO_XL_ODR_12Hz5:
      *Odr = 12.5f;
 8004832:	683b      	ldr	r3, [r7, #0]
 8004834:	4a18      	ldr	r2, [pc, #96]	; (8004898 <LSM6DSO_ACC_GetOutputDataRate+0xe0>)
 8004836:	601a      	str	r2, [r3, #0]
      break;
 8004838:	e027      	b.n	800488a <LSM6DSO_ACC_GetOutputDataRate+0xd2>

    case LSM6DSO_XL_ODR_26Hz:
      *Odr = 26.0f;
 800483a:	683b      	ldr	r3, [r7, #0]
 800483c:	4a17      	ldr	r2, [pc, #92]	; (800489c <LSM6DSO_ACC_GetOutputDataRate+0xe4>)
 800483e:	601a      	str	r2, [r3, #0]
      break;
 8004840:	e023      	b.n	800488a <LSM6DSO_ACC_GetOutputDataRate+0xd2>

    case LSM6DSO_XL_ODR_52Hz:
      *Odr = 52.0f;
 8004842:	683b      	ldr	r3, [r7, #0]
 8004844:	4a16      	ldr	r2, [pc, #88]	; (80048a0 <LSM6DSO_ACC_GetOutputDataRate+0xe8>)
 8004846:	601a      	str	r2, [r3, #0]
      break;
 8004848:	e01f      	b.n	800488a <LSM6DSO_ACC_GetOutputDataRate+0xd2>

    case LSM6DSO_XL_ODR_104Hz:
      *Odr = 104.0f;
 800484a:	683b      	ldr	r3, [r7, #0]
 800484c:	4a15      	ldr	r2, [pc, #84]	; (80048a4 <LSM6DSO_ACC_GetOutputDataRate+0xec>)
 800484e:	601a      	str	r2, [r3, #0]
      break;
 8004850:	e01b      	b.n	800488a <LSM6DSO_ACC_GetOutputDataRate+0xd2>

    case LSM6DSO_XL_ODR_208Hz:
      *Odr = 208.0f;
 8004852:	683b      	ldr	r3, [r7, #0]
 8004854:	4a14      	ldr	r2, [pc, #80]	; (80048a8 <LSM6DSO_ACC_GetOutputDataRate+0xf0>)
 8004856:	601a      	str	r2, [r3, #0]
      break;
 8004858:	e017      	b.n	800488a <LSM6DSO_ACC_GetOutputDataRate+0xd2>

    case LSM6DSO_XL_ODR_417Hz:
      *Odr = 417.0f;
 800485a:	683b      	ldr	r3, [r7, #0]
 800485c:	4a13      	ldr	r2, [pc, #76]	; (80048ac <LSM6DSO_ACC_GetOutputDataRate+0xf4>)
 800485e:	601a      	str	r2, [r3, #0]
      break;
 8004860:	e013      	b.n	800488a <LSM6DSO_ACC_GetOutputDataRate+0xd2>

    case LSM6DSO_XL_ODR_833Hz:
      *Odr = 833.0f;
 8004862:	683b      	ldr	r3, [r7, #0]
 8004864:	4a12      	ldr	r2, [pc, #72]	; (80048b0 <LSM6DSO_ACC_GetOutputDataRate+0xf8>)
 8004866:	601a      	str	r2, [r3, #0]
      break;
 8004868:	e00f      	b.n	800488a <LSM6DSO_ACC_GetOutputDataRate+0xd2>

    case LSM6DSO_XL_ODR_1667Hz:
      *Odr = 1667.0f;
 800486a:	683b      	ldr	r3, [r7, #0]
 800486c:	4a11      	ldr	r2, [pc, #68]	; (80048b4 <LSM6DSO_ACC_GetOutputDataRate+0xfc>)
 800486e:	601a      	str	r2, [r3, #0]
      break;
 8004870:	e00b      	b.n	800488a <LSM6DSO_ACC_GetOutputDataRate+0xd2>

    case LSM6DSO_XL_ODR_3333Hz:
      *Odr = 3333.0f;
 8004872:	683b      	ldr	r3, [r7, #0]
 8004874:	4a10      	ldr	r2, [pc, #64]	; (80048b8 <LSM6DSO_ACC_GetOutputDataRate+0x100>)
 8004876:	601a      	str	r2, [r3, #0]
      break;
 8004878:	e007      	b.n	800488a <LSM6DSO_ACC_GetOutputDataRate+0xd2>

    case LSM6DSO_XL_ODR_6667Hz:
      *Odr = 6667.0f;
 800487a:	683b      	ldr	r3, [r7, #0]
 800487c:	4a0f      	ldr	r2, [pc, #60]	; (80048bc <LSM6DSO_ACC_GetOutputDataRate+0x104>)
 800487e:	601a      	str	r2, [r3, #0]
      break;
 8004880:	e003      	b.n	800488a <LSM6DSO_ACC_GetOutputDataRate+0xd2>

    default:
      ret = LSM6DSO_ERROR;
 8004882:	f04f 33ff 	mov.w	r3, #4294967295
 8004886:	60fb      	str	r3, [r7, #12]
      break;
 8004888:	bf00      	nop
  }

  return ret;
 800488a:	68fb      	ldr	r3, [r7, #12]
}
 800488c:	4618      	mov	r0, r3
 800488e:	3710      	adds	r7, #16
 8004890:	46bd      	mov	sp, r7
 8004892:	bd80      	pop	{r7, pc}
 8004894:	3fcccccd 	.word	0x3fcccccd
 8004898:	41480000 	.word	0x41480000
 800489c:	41d00000 	.word	0x41d00000
 80048a0:	42500000 	.word	0x42500000
 80048a4:	42d00000 	.word	0x42d00000
 80048a8:	43500000 	.word	0x43500000
 80048ac:	43d08000 	.word	0x43d08000
 80048b0:	44504000 	.word	0x44504000
 80048b4:	44d06000 	.word	0x44d06000
 80048b8:	45505000 	.word	0x45505000
 80048bc:	45d05800 	.word	0x45d05800

080048c0 <LSM6DSO_ACC_SetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_ACC_SetOutputDataRate(LSM6DSO_Object_t *pObj, float_t Odr)
{
 80048c0:	b580      	push	{r7, lr}
 80048c2:	b082      	sub	sp, #8
 80048c4:	af00      	add	r7, sp, #0
 80048c6:	6078      	str	r0, [r7, #4]
 80048c8:	ed87 0a00 	vstr	s0, [r7]
  return LSM6DSO_ACC_SetOutputDataRate_With_Mode(pObj, Odr, LSM6DSO_ACC_HIGH_PERFORMANCE_MODE);
 80048cc:	2100      	movs	r1, #0
 80048ce:	ed97 0a00 	vldr	s0, [r7]
 80048d2:	6878      	ldr	r0, [r7, #4]
 80048d4:	f000 f806 	bl	80048e4 <LSM6DSO_ACC_SetOutputDataRate_With_Mode>
 80048d8:	4603      	mov	r3, r0
}
 80048da:	4618      	mov	r0, r3
 80048dc:	3708      	adds	r7, #8
 80048de:	46bd      	mov	sp, r7
 80048e0:	bd80      	pop	{r7, pc}
	...

080048e4 <LSM6DSO_ACC_SetOutputDataRate_With_Mode>:
  * @param  Mode the accelerometer operating mode
  * @note   This function switches off the gyroscope if Ultra Low Power Mode is set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_ACC_SetOutputDataRate_With_Mode(LSM6DSO_Object_t *pObj, float_t Odr, LSM6DSO_ACC_Operating_Mode_t Mode)
{
 80048e4:	b580      	push	{r7, lr}
 80048e6:	b08c      	sub	sp, #48	; 0x30
 80048e8:	af00      	add	r7, sp, #0
 80048ea:	60f8      	str	r0, [r7, #12]
 80048ec:	ed87 0a02 	vstr	s0, [r7, #8]
 80048f0:	460b      	mov	r3, r1
 80048f2:	71fb      	strb	r3, [r7, #7]
  int32_t ret = LSM6DSO_OK;
 80048f4:	2300      	movs	r3, #0
 80048f6:	62fb      	str	r3, [r7, #44]	; 0x2c
  float_t newOdr = Odr;
 80048f8:	68bb      	ldr	r3, [r7, #8]
 80048fa:	62bb      	str	r3, [r7, #40]	; 0x28

  switch (Mode)
 80048fc:	79fb      	ldrb	r3, [r7, #7]
 80048fe:	2b02      	cmp	r3, #2
 8004900:	f000 80ea 	beq.w	8004ad8 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x1f4>
 8004904:	2b02      	cmp	r3, #2
 8004906:	f300 8163 	bgt.w	8004bd0 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2ec>
 800490a:	2b00      	cmp	r3, #0
 800490c:	d002      	beq.n	8004914 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x30>
 800490e:	2b01      	cmp	r3, #1
 8004910:	d074      	beq.n	80049fc <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x118>
 8004912:	e15d      	b.n	8004bd0 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2ec>
    {
      /* We must uncheck Low Power and Ultra Low Power bits if they are enabled */
      lsm6dso_ctrl5_c_t val1;
      lsm6dso_ctrl6_c_t val2;

      if (lsm6dso_read_reg(&(pObj->Ctx), LSM6DSO_CTRL5_C, (uint8_t *)&val1, 1) != LSM6DSO_OK)
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	f103 0020 	add.w	r0, r3, #32
 800491a:	f107 0224 	add.w	r2, r7, #36	; 0x24
 800491e:	2301      	movs	r3, #1
 8004920:	2114      	movs	r1, #20
 8004922:	f000 ff9f 	bl	8005864 <lsm6dso_read_reg>
 8004926:	4603      	mov	r3, r0
 8004928:	2b00      	cmp	r3, #0
 800492a:	d002      	beq.n	8004932 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x4e>
      {
        return LSM6DSO_ERROR;
 800492c:	f04f 33ff 	mov.w	r3, #4294967295
 8004930:	e16c      	b.n	8004c0c <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
      }

      if (val1.xl_ulp_en != 0U)
 8004932:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8004936:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800493a:	b2db      	uxtb	r3, r3
 800493c:	2b00      	cmp	r3, #0
 800493e:	d025      	beq.n	800498c <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0xa8>
      {
        /* Power off the accelerometer */
        if (pObj->acc_is_enabled == 1U)
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8004946:	2b01      	cmp	r3, #1
 8004948:	d10b      	bne.n	8004962 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x7e>
        {
          if (lsm6dso_xl_data_rate_set(&(pObj->Ctx), LSM6DSO_XL_ODR_OFF) != LSM6DSO_OK)
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	3320      	adds	r3, #32
 800494e:	2100      	movs	r1, #0
 8004950:	4618      	mov	r0, r3
 8004952:	f001 f815 	bl	8005980 <lsm6dso_xl_data_rate_set>
 8004956:	4603      	mov	r3, r0
 8004958:	2b00      	cmp	r3, #0
 800495a:	d002      	beq.n	8004962 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x7e>
          {
            return LSM6DSO_ERROR;
 800495c:	f04f 33ff 	mov.w	r3, #4294967295
 8004960:	e154      	b.n	8004c0c <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
          }
        }

        val1.xl_ulp_en = 0;
 8004962:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8004966:	f36f 13c7 	bfc	r3, #7, #1
 800496a:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
        if (lsm6dso_write_reg(&(pObj->Ctx), LSM6DSO_CTRL5_C, (uint8_t *)&val1, 1) != LSM6DSO_OK)
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	f103 0020 	add.w	r0, r3, #32
 8004974:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8004978:	2301      	movs	r3, #1
 800497a:	2114      	movs	r1, #20
 800497c:	f000 ff8a 	bl	8005894 <lsm6dso_write_reg>
 8004980:	4603      	mov	r3, r0
 8004982:	2b00      	cmp	r3, #0
 8004984:	d002      	beq.n	800498c <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0xa8>
        {
          return LSM6DSO_ERROR;
 8004986:	f04f 33ff 	mov.w	r3, #4294967295
 800498a:	e13f      	b.n	8004c0c <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
        }
      }

      if (lsm6dso_read_reg(&(pObj->Ctx), LSM6DSO_CTRL6_C, (uint8_t *)&val2, 1) != LSM6DSO_OK)
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	f103 0020 	add.w	r0, r3, #32
 8004992:	f107 0220 	add.w	r2, r7, #32
 8004996:	2301      	movs	r3, #1
 8004998:	2115      	movs	r1, #21
 800499a:	f000 ff63 	bl	8005864 <lsm6dso_read_reg>
 800499e:	4603      	mov	r3, r0
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	d002      	beq.n	80049aa <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0xc6>
      {
        return LSM6DSO_ERROR;
 80049a4:	f04f 33ff 	mov.w	r3, #4294967295
 80049a8:	e130      	b.n	8004c0c <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
      }

      if (val2.xl_hm_mode != 0U)
 80049aa:	f897 3020 	ldrb.w	r3, [r7, #32]
 80049ae:	f003 0310 	and.w	r3, r3, #16
 80049b2:	b2db      	uxtb	r3, r3
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	d014      	beq.n	80049e2 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0xfe>
      {
        val2.xl_hm_mode = 0U;
 80049b8:	f897 3020 	ldrb.w	r3, [r7, #32]
 80049bc:	f36f 1304 	bfc	r3, #4, #1
 80049c0:	f887 3020 	strb.w	r3, [r7, #32]
        if (lsm6dso_write_reg(&(pObj->Ctx), LSM6DSO_CTRL6_C, (uint8_t *)&val2, 1) != LSM6DSO_OK)
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	f103 0020 	add.w	r0, r3, #32
 80049ca:	f107 0220 	add.w	r2, r7, #32
 80049ce:	2301      	movs	r3, #1
 80049d0:	2115      	movs	r1, #21
 80049d2:	f000 ff5f 	bl	8005894 <lsm6dso_write_reg>
 80049d6:	4603      	mov	r3, r0
 80049d8:	2b00      	cmp	r3, #0
 80049da:	d002      	beq.n	80049e2 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0xfe>
        {
          return LSM6DSO_ERROR;
 80049dc:	f04f 33ff 	mov.w	r3, #4294967295
 80049e0:	e114      	b.n	8004c0c <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
        }
      }

      /* ODR should be at least 12.5Hz */
      if (newOdr < 12.5f)
 80049e2:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 80049e6:	eeb2 7a09 	vmov.f32	s14, #41	; 0x41480000  12.5
 80049ea:	eef4 7ac7 	vcmpe.f32	s15, s14
 80049ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80049f2:	d400      	bmi.n	80049f6 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x112>
      {
        newOdr = 12.5f;
      }
      break;
 80049f4:	e0f0      	b.n	8004bd8 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2f4>
        newOdr = 12.5f;
 80049f6:	4b87      	ldr	r3, [pc, #540]	; (8004c14 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x330>)
 80049f8:	62bb      	str	r3, [r7, #40]	; 0x28
 80049fa:	e0ed      	b.n	8004bd8 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2f4>
      /* We must uncheck Ultra Low Power bit if it is enabled */
      /* and check the Low Power bit if it is unchecked       */
      lsm6dso_ctrl5_c_t val1;
      lsm6dso_ctrl6_c_t val2;

      if (lsm6dso_read_reg(&(pObj->Ctx), LSM6DSO_CTRL5_C, (uint8_t *)&val1, 1) != LSM6DSO_OK)
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	f103 0020 	add.w	r0, r3, #32
 8004a02:	f107 021c 	add.w	r2, r7, #28
 8004a06:	2301      	movs	r3, #1
 8004a08:	2114      	movs	r1, #20
 8004a0a:	f000 ff2b 	bl	8005864 <lsm6dso_read_reg>
 8004a0e:	4603      	mov	r3, r0
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	d002      	beq.n	8004a1a <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x136>
      {
        return LSM6DSO_ERROR;
 8004a14:	f04f 33ff 	mov.w	r3, #4294967295
 8004a18:	e0f8      	b.n	8004c0c <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
      }

      if (val1.xl_ulp_en != 0U)
 8004a1a:	7f3b      	ldrb	r3, [r7, #28]
 8004a1c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8004a20:	b2db      	uxtb	r3, r3
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d023      	beq.n	8004a6e <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x18a>
      {
        /* Power off the accelerometer */
        if (pObj->acc_is_enabled == 1U)
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8004a2c:	2b01      	cmp	r3, #1
 8004a2e:	d10b      	bne.n	8004a48 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x164>
        {
          if (lsm6dso_xl_data_rate_set(&(pObj->Ctx), LSM6DSO_XL_ODR_OFF) != LSM6DSO_OK)
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	3320      	adds	r3, #32
 8004a34:	2100      	movs	r1, #0
 8004a36:	4618      	mov	r0, r3
 8004a38:	f000 ffa2 	bl	8005980 <lsm6dso_xl_data_rate_set>
 8004a3c:	4603      	mov	r3, r0
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d002      	beq.n	8004a48 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x164>
          {
            return LSM6DSO_ERROR;
 8004a42:	f04f 33ff 	mov.w	r3, #4294967295
 8004a46:	e0e1      	b.n	8004c0c <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
          }
        }

        val1.xl_ulp_en = 0;
 8004a48:	7f3b      	ldrb	r3, [r7, #28]
 8004a4a:	f36f 13c7 	bfc	r3, #7, #1
 8004a4e:	773b      	strb	r3, [r7, #28]
        if (lsm6dso_write_reg(&(pObj->Ctx), LSM6DSO_CTRL5_C, (uint8_t *)&val1, 1) != LSM6DSO_OK)
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	f103 0020 	add.w	r0, r3, #32
 8004a56:	f107 021c 	add.w	r2, r7, #28
 8004a5a:	2301      	movs	r3, #1
 8004a5c:	2114      	movs	r1, #20
 8004a5e:	f000 ff19 	bl	8005894 <lsm6dso_write_reg>
 8004a62:	4603      	mov	r3, r0
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d002      	beq.n	8004a6e <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x18a>
        {
          return LSM6DSO_ERROR;
 8004a68:	f04f 33ff 	mov.w	r3, #4294967295
 8004a6c:	e0ce      	b.n	8004c0c <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
        }
      }

      if (lsm6dso_read_reg(&(pObj->Ctx), LSM6DSO_CTRL6_C, (uint8_t *)&val2, 1) != LSM6DSO_OK)
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	f103 0020 	add.w	r0, r3, #32
 8004a74:	f107 0218 	add.w	r2, r7, #24
 8004a78:	2301      	movs	r3, #1
 8004a7a:	2115      	movs	r1, #21
 8004a7c:	f000 fef2 	bl	8005864 <lsm6dso_read_reg>
 8004a80:	4603      	mov	r3, r0
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d002      	beq.n	8004a8c <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x1a8>
      {
        return LSM6DSO_ERROR;
 8004a86:	f04f 33ff 	mov.w	r3, #4294967295
 8004a8a:	e0bf      	b.n	8004c0c <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
      }

      if (val2.xl_hm_mode == 0U)
 8004a8c:	7e3b      	ldrb	r3, [r7, #24]
 8004a8e:	f003 0310 	and.w	r3, r3, #16
 8004a92:	b2db      	uxtb	r3, r3
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d112      	bne.n	8004abe <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x1da>
      {
        val2.xl_hm_mode = 1U;
 8004a98:	7e3b      	ldrb	r3, [r7, #24]
 8004a9a:	f043 0310 	orr.w	r3, r3, #16
 8004a9e:	763b      	strb	r3, [r7, #24]
        if (lsm6dso_write_reg(&(pObj->Ctx), LSM6DSO_CTRL6_C, (uint8_t *)&val2, 1) != LSM6DSO_OK)
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	f103 0020 	add.w	r0, r3, #32
 8004aa6:	f107 0218 	add.w	r2, r7, #24
 8004aaa:	2301      	movs	r3, #1
 8004aac:	2115      	movs	r1, #21
 8004aae:	f000 fef1 	bl	8005894 <lsm6dso_write_reg>
 8004ab2:	4603      	mov	r3, r0
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	d002      	beq.n	8004abe <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x1da>
        {
          return LSM6DSO_ERROR;
 8004ab8:	f04f 33ff 	mov.w	r3, #4294967295
 8004abc:	e0a6      	b.n	8004c0c <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
        }
      }

      /* Now we need to limit the ODR to 208 Hz if it is higher */
      if (newOdr > 208.0f)
 8004abe:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8004ac2:	ed9f 7a55 	vldr	s14, [pc, #340]	; 8004c18 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x334>
 8004ac6:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004aca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004ace:	dc00      	bgt.n	8004ad2 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x1ee>
      {
        newOdr = 208.0f;
      }
      break;
 8004ad0:	e082      	b.n	8004bd8 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2f4>
        newOdr = 208.0f;
 8004ad2:	4b52      	ldr	r3, [pc, #328]	; (8004c1c <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x338>)
 8004ad4:	62bb      	str	r3, [r7, #40]	; 0x28
 8004ad6:	e07f      	b.n	8004bd8 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2f4>
      /* and check the Ultra Low Power bit if it is unchecked             */
      /* We must switch off gyro otherwise Ultra Low Power does not work  */
      lsm6dso_ctrl5_c_t val1;
      lsm6dso_ctrl6_c_t val2;

      if (lsm6dso_read_reg(&(pObj->Ctx), LSM6DSO_CTRL6_C, (uint8_t *)&val2, 1) != LSM6DSO_OK)
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	f103 0020 	add.w	r0, r3, #32
 8004ade:	f107 0210 	add.w	r2, r7, #16
 8004ae2:	2301      	movs	r3, #1
 8004ae4:	2115      	movs	r1, #21
 8004ae6:	f000 febd 	bl	8005864 <lsm6dso_read_reg>
 8004aea:	4603      	mov	r3, r0
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	d002      	beq.n	8004af6 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x212>
      {
        return LSM6DSO_ERROR;
 8004af0:	f04f 33ff 	mov.w	r3, #4294967295
 8004af4:	e08a      	b.n	8004c0c <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
      }

      if (val2.xl_hm_mode != 0U)
 8004af6:	7c3b      	ldrb	r3, [r7, #16]
 8004af8:	f003 0310 	and.w	r3, r3, #16
 8004afc:	b2db      	uxtb	r3, r3
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d012      	beq.n	8004b28 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x244>
      {
        val2.xl_hm_mode = 0U;
 8004b02:	7c3b      	ldrb	r3, [r7, #16]
 8004b04:	f36f 1304 	bfc	r3, #4, #1
 8004b08:	743b      	strb	r3, [r7, #16]
        if (lsm6dso_write_reg(&(pObj->Ctx), LSM6DSO_CTRL6_C, (uint8_t *)&val2, 1) != LSM6DSO_OK)
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	f103 0020 	add.w	r0, r3, #32
 8004b10:	f107 0210 	add.w	r2, r7, #16
 8004b14:	2301      	movs	r3, #1
 8004b16:	2115      	movs	r1, #21
 8004b18:	f000 febc 	bl	8005894 <lsm6dso_write_reg>
 8004b1c:	4603      	mov	r3, r0
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d002      	beq.n	8004b28 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x244>
        {
          return LSM6DSO_ERROR;
 8004b22:	f04f 33ff 	mov.w	r3, #4294967295
 8004b26:	e071      	b.n	8004c0c <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
        }
      }

      /* Disable Gyro */
      if (pObj->gyro_is_enabled == 1U)
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8004b2e:	2b01      	cmp	r3, #1
 8004b30:	d108      	bne.n	8004b44 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x260>
      {
        if (LSM6DSO_GYRO_Disable(pObj) != LSM6DSO_OK)
 8004b32:	68f8      	ldr	r0, [r7, #12]
 8004b34:	f000 f979 	bl	8004e2a <LSM6DSO_GYRO_Disable>
 8004b38:	4603      	mov	r3, r0
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d002      	beq.n	8004b44 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x260>
        {
          return LSM6DSO_ERROR;
 8004b3e:	f04f 33ff 	mov.w	r3, #4294967295
 8004b42:	e063      	b.n	8004c0c <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
        }
      }

      if (lsm6dso_read_reg(&(pObj->Ctx), LSM6DSO_CTRL5_C, (uint8_t *)&val1, 1) != LSM6DSO_OK)
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	f103 0020 	add.w	r0, r3, #32
 8004b4a:	f107 0214 	add.w	r2, r7, #20
 8004b4e:	2301      	movs	r3, #1
 8004b50:	2114      	movs	r1, #20
 8004b52:	f000 fe87 	bl	8005864 <lsm6dso_read_reg>
 8004b56:	4603      	mov	r3, r0
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	d002      	beq.n	8004b62 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x27e>
      {
        return LSM6DSO_ERROR;
 8004b5c:	f04f 33ff 	mov.w	r3, #4294967295
 8004b60:	e054      	b.n	8004c0c <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
      }

      if (val1.xl_ulp_en == 0U)
 8004b62:	7d3b      	ldrb	r3, [r7, #20]
 8004b64:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8004b68:	b2db      	uxtb	r3, r3
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d123      	bne.n	8004bb6 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2d2>
      {
        /* Power off the accelerometer */
        if (pObj->acc_is_enabled == 1U)
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8004b74:	2b01      	cmp	r3, #1
 8004b76:	d10b      	bne.n	8004b90 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2ac>
        {
          if (lsm6dso_xl_data_rate_set(&(pObj->Ctx), LSM6DSO_XL_ODR_OFF) != LSM6DSO_OK)
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	3320      	adds	r3, #32
 8004b7c:	2100      	movs	r1, #0
 8004b7e:	4618      	mov	r0, r3
 8004b80:	f000 fefe 	bl	8005980 <lsm6dso_xl_data_rate_set>
 8004b84:	4603      	mov	r3, r0
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d002      	beq.n	8004b90 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2ac>
          {
            return LSM6DSO_ERROR;
 8004b8a:	f04f 33ff 	mov.w	r3, #4294967295
 8004b8e:	e03d      	b.n	8004c0c <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
          }
        }

        val1.xl_ulp_en = 1U;
 8004b90:	7d3b      	ldrb	r3, [r7, #20]
 8004b92:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004b96:	753b      	strb	r3, [r7, #20]
        if (lsm6dso_write_reg(&(pObj->Ctx), LSM6DSO_CTRL5_C, (uint8_t *)&val1, 1) != LSM6DSO_OK)
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	f103 0020 	add.w	r0, r3, #32
 8004b9e:	f107 0214 	add.w	r2, r7, #20
 8004ba2:	2301      	movs	r3, #1
 8004ba4:	2114      	movs	r1, #20
 8004ba6:	f000 fe75 	bl	8005894 <lsm6dso_write_reg>
 8004baa:	4603      	mov	r3, r0
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	d002      	beq.n	8004bb6 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2d2>
        {
          return LSM6DSO_ERROR;
 8004bb0:	f04f 33ff 	mov.w	r3, #4294967295
 8004bb4:	e02a      	b.n	8004c0c <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
        }
      }

      /* Now we need to limit the ODR to 208 Hz if it is higher */
      if (newOdr > 208.0f)
 8004bb6:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8004bba:	ed9f 7a17 	vldr	s14, [pc, #92]	; 8004c18 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x334>
 8004bbe:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004bc2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004bc6:	dc00      	bgt.n	8004bca <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2e6>
      {
        newOdr = 208.0f;
      }
      break;
 8004bc8:	e006      	b.n	8004bd8 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2f4>
        newOdr = 208.0f;
 8004bca:	4b14      	ldr	r3, [pc, #80]	; (8004c1c <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x338>)
 8004bcc:	62bb      	str	r3, [r7, #40]	; 0x28
 8004bce:	e003      	b.n	8004bd8 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2f4>
    }
    default:
      ret = LSM6DSO_ERROR;
 8004bd0:	f04f 33ff 	mov.w	r3, #4294967295
 8004bd4:	62fb      	str	r3, [r7, #44]	; 0x2c
      break;
 8004bd6:	bf00      	nop
  }

  if (ret == LSM6DSO_ERROR)
 8004bd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004bda:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004bde:	d102      	bne.n	8004be6 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x302>
  {
    return LSM6DSO_ERROR;
 8004be0:	f04f 33ff 	mov.w	r3, #4294967295
 8004be4:	e012      	b.n	8004c0c <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
  }

  if (pObj->acc_is_enabled == 1U)
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8004bec:	2b01      	cmp	r3, #1
 8004bee:	d106      	bne.n	8004bfe <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x31a>
  {
    ret = LSM6DSO_ACC_SetOutputDataRate_When_Enabled(pObj, newOdr);
 8004bf0:	ed97 0a0a 	vldr	s0, [r7, #40]	; 0x28
 8004bf4:	68f8      	ldr	r0, [r7, #12]
 8004bf6:	f000 fbc9 	bl	800538c <LSM6DSO_ACC_SetOutputDataRate_When_Enabled>
 8004bfa:	62f8      	str	r0, [r7, #44]	; 0x2c
 8004bfc:	e005      	b.n	8004c0a <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x326>
  }
  else
  {
    ret = LSM6DSO_ACC_SetOutputDataRate_When_Disabled(pObj, newOdr);
 8004bfe:	ed97 0a0a 	vldr	s0, [r7, #40]	; 0x28
 8004c02:	68f8      	ldr	r0, [r7, #12]
 8004c04:	f000 fc5a 	bl	80054bc <LSM6DSO_ACC_SetOutputDataRate_When_Disabled>
 8004c08:	62f8      	str	r0, [r7, #44]	; 0x2c
  }

  return ret;
 8004c0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8004c0c:	4618      	mov	r0, r3
 8004c0e:	3730      	adds	r7, #48	; 0x30
 8004c10:	46bd      	mov	sp, r7
 8004c12:	bd80      	pop	{r7, pc}
 8004c14:	41480000 	.word	0x41480000
 8004c18:	43500000 	.word	0x43500000
 8004c1c:	43500000 	.word	0x43500000

08004c20 <LSM6DSO_ACC_GetFullScale>:
  * @param  pObj the device pObj
  * @param  FullScale pointer where the full scale is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_ACC_GetFullScale(LSM6DSO_Object_t *pObj, int32_t *FullScale)
{
 8004c20:	b580      	push	{r7, lr}
 8004c22:	b084      	sub	sp, #16
 8004c24:	af00      	add	r7, sp, #0
 8004c26:	6078      	str	r0, [r7, #4]
 8004c28:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSO_OK;
 8004c2a:	2300      	movs	r3, #0
 8004c2c:	60fb      	str	r3, [r7, #12]
  lsm6dso_fs_xl_t fs_low_level;

  /* Read actual full scale selection from sensor. */
  if (lsm6dso_xl_full_scale_get(&(pObj->Ctx), &fs_low_level) != LSM6DSO_OK)
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	3320      	adds	r3, #32
 8004c32:	f107 020b 	add.w	r2, r7, #11
 8004c36:	4611      	mov	r1, r2
 8004c38:	4618      	mov	r0, r3
 8004c3a:	f000 fe69 	bl	8005910 <lsm6dso_xl_full_scale_get>
 8004c3e:	4603      	mov	r3, r0
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	d002      	beq.n	8004c4a <LSM6DSO_ACC_GetFullScale+0x2a>
  {
    return LSM6DSO_ERROR;
 8004c44:	f04f 33ff 	mov.w	r3, #4294967295
 8004c48:	e023      	b.n	8004c92 <LSM6DSO_ACC_GetFullScale+0x72>
  }

  switch (fs_low_level)
 8004c4a:	7afb      	ldrb	r3, [r7, #11]
 8004c4c:	2b03      	cmp	r3, #3
 8004c4e:	d81b      	bhi.n	8004c88 <LSM6DSO_ACC_GetFullScale+0x68>
 8004c50:	a201      	add	r2, pc, #4	; (adr r2, 8004c58 <LSM6DSO_ACC_GetFullScale+0x38>)
 8004c52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c56:	bf00      	nop
 8004c58:	08004c69 	.word	0x08004c69
 8004c5c:	08004c81 	.word	0x08004c81
 8004c60:	08004c71 	.word	0x08004c71
 8004c64:	08004c79 	.word	0x08004c79
  {
    case LSM6DSO_2g:
      *FullScale =  2;
 8004c68:	683b      	ldr	r3, [r7, #0]
 8004c6a:	2202      	movs	r2, #2
 8004c6c:	601a      	str	r2, [r3, #0]
      break;
 8004c6e:	e00f      	b.n	8004c90 <LSM6DSO_ACC_GetFullScale+0x70>

    case LSM6DSO_4g:
      *FullScale =  4;
 8004c70:	683b      	ldr	r3, [r7, #0]
 8004c72:	2204      	movs	r2, #4
 8004c74:	601a      	str	r2, [r3, #0]
      break;
 8004c76:	e00b      	b.n	8004c90 <LSM6DSO_ACC_GetFullScale+0x70>

    case LSM6DSO_8g:
      *FullScale =  8;
 8004c78:	683b      	ldr	r3, [r7, #0]
 8004c7a:	2208      	movs	r2, #8
 8004c7c:	601a      	str	r2, [r3, #0]
      break;
 8004c7e:	e007      	b.n	8004c90 <LSM6DSO_ACC_GetFullScale+0x70>

    case LSM6DSO_16g:
      *FullScale = 16;
 8004c80:	683b      	ldr	r3, [r7, #0]
 8004c82:	2210      	movs	r2, #16
 8004c84:	601a      	str	r2, [r3, #0]
      break;
 8004c86:	e003      	b.n	8004c90 <LSM6DSO_ACC_GetFullScale+0x70>

    default:
      ret = LSM6DSO_ERROR;
 8004c88:	f04f 33ff 	mov.w	r3, #4294967295
 8004c8c:	60fb      	str	r3, [r7, #12]
      break;
 8004c8e:	bf00      	nop
  }

  return ret;
 8004c90:	68fb      	ldr	r3, [r7, #12]
}
 8004c92:	4618      	mov	r0, r3
 8004c94:	3710      	adds	r7, #16
 8004c96:	46bd      	mov	sp, r7
 8004c98:	bd80      	pop	{r7, pc}
 8004c9a:	bf00      	nop

08004c9c <LSM6DSO_ACC_SetFullScale>:
  * @param  pObj the device pObj
  * @param  FullScale the functional full scale to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_ACC_SetFullScale(LSM6DSO_Object_t *pObj, int32_t FullScale)
{
 8004c9c:	b580      	push	{r7, lr}
 8004c9e:	b084      	sub	sp, #16
 8004ca0:	af00      	add	r7, sp, #0
 8004ca2:	6078      	str	r0, [r7, #4]
 8004ca4:	6039      	str	r1, [r7, #0]
  lsm6dso_fs_xl_t new_fs;

  /* Seems like MISRA C-2012 rule 14.3a violation but only from single file statical analysis point of view because
     the parameter passed to the function is not known at the moment of analysis */
  new_fs = (FullScale <= 2) ? LSM6DSO_2g
           : (FullScale <= 4) ? LSM6DSO_4g
 8004ca6:	683b      	ldr	r3, [r7, #0]
 8004ca8:	2b02      	cmp	r3, #2
 8004caa:	dd0b      	ble.n	8004cc4 <LSM6DSO_ACC_SetFullScale+0x28>
 8004cac:	683b      	ldr	r3, [r7, #0]
 8004cae:	2b04      	cmp	r3, #4
 8004cb0:	dd06      	ble.n	8004cc0 <LSM6DSO_ACC_SetFullScale+0x24>
 8004cb2:	683b      	ldr	r3, [r7, #0]
 8004cb4:	2b08      	cmp	r3, #8
 8004cb6:	dc01      	bgt.n	8004cbc <LSM6DSO_ACC_SetFullScale+0x20>
 8004cb8:	2303      	movs	r3, #3
 8004cba:	e004      	b.n	8004cc6 <LSM6DSO_ACC_SetFullScale+0x2a>
 8004cbc:	2301      	movs	r3, #1
 8004cbe:	e002      	b.n	8004cc6 <LSM6DSO_ACC_SetFullScale+0x2a>
 8004cc0:	2302      	movs	r3, #2
 8004cc2:	e000      	b.n	8004cc6 <LSM6DSO_ACC_SetFullScale+0x2a>
 8004cc4:	2300      	movs	r3, #0
  new_fs = (FullScale <= 2) ? LSM6DSO_2g
 8004cc6:	73fb      	strb	r3, [r7, #15]
           : (FullScale <= 8) ? LSM6DSO_8g
           :                    LSM6DSO_16g;

  if (lsm6dso_xl_full_scale_set(&(pObj->Ctx), new_fs) != LSM6DSO_OK)
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	3320      	adds	r3, #32
 8004ccc:	7bfa      	ldrb	r2, [r7, #15]
 8004cce:	4611      	mov	r1, r2
 8004cd0:	4618      	mov	r0, r3
 8004cd2:	f000 fdf7 	bl	80058c4 <lsm6dso_xl_full_scale_set>
 8004cd6:	4603      	mov	r3, r0
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	d002      	beq.n	8004ce2 <LSM6DSO_ACC_SetFullScale+0x46>
  {
    return LSM6DSO_ERROR;
 8004cdc:	f04f 33ff 	mov.w	r3, #4294967295
 8004ce0:	e000      	b.n	8004ce4 <LSM6DSO_ACC_SetFullScale+0x48>
  }

  return LSM6DSO_OK;
 8004ce2:	2300      	movs	r3, #0
}
 8004ce4:	4618      	mov	r0, r3
 8004ce6:	3710      	adds	r7, #16
 8004ce8:	46bd      	mov	sp, r7
 8004cea:	bd80      	pop	{r7, pc}

08004cec <LSM6DSO_ACC_GetAxesRaw>:
  * @param  pObj the device pObj
  * @param  Value pointer where the raw values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_ACC_GetAxesRaw(LSM6DSO_Object_t *pObj, LSM6DSO_AxesRaw_t *Value)
{
 8004cec:	b580      	push	{r7, lr}
 8004cee:	b084      	sub	sp, #16
 8004cf0:	af00      	add	r7, sp, #0
 8004cf2:	6078      	str	r0, [r7, #4]
 8004cf4:	6039      	str	r1, [r7, #0]
  lsm6dso_axis3bit16_t data_raw;

  /* Read raw data values. */
  if (lsm6dso_acceleration_raw_get(&(pObj->Ctx), data_raw.i16bit) != LSM6DSO_OK)
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	3320      	adds	r3, #32
 8004cfa:	f107 0208 	add.w	r2, r7, #8
 8004cfe:	4611      	mov	r1, r2
 8004d00:	4618      	mov	r0, r3
 8004d02:	f001 f9d8 	bl	80060b6 <lsm6dso_acceleration_raw_get>
 8004d06:	4603      	mov	r3, r0
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d002      	beq.n	8004d12 <LSM6DSO_ACC_GetAxesRaw+0x26>
  {
    return LSM6DSO_ERROR;
 8004d0c:	f04f 33ff 	mov.w	r3, #4294967295
 8004d10:	e00c      	b.n	8004d2c <LSM6DSO_ACC_GetAxesRaw+0x40>
  }

  /* Format the data. */
  Value->x = data_raw.i16bit[0];
 8004d12:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8004d16:	683b      	ldr	r3, [r7, #0]
 8004d18:	801a      	strh	r2, [r3, #0]
  Value->y = data_raw.i16bit[1];
 8004d1a:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8004d1e:	683b      	ldr	r3, [r7, #0]
 8004d20:	805a      	strh	r2, [r3, #2]
  Value->z = data_raw.i16bit[2];
 8004d22:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8004d26:	683b      	ldr	r3, [r7, #0]
 8004d28:	809a      	strh	r2, [r3, #4]

  return LSM6DSO_OK;
 8004d2a:	2300      	movs	r3, #0
}
 8004d2c:	4618      	mov	r0, r3
 8004d2e:	3710      	adds	r7, #16
 8004d30:	46bd      	mov	sp, r7
 8004d32:	bd80      	pop	{r7, pc}

08004d34 <LSM6DSO_ACC_GetAxes>:
  * @param  pObj the device pObj
  * @param  Acceleration pointer where the values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_ACC_GetAxes(LSM6DSO_Object_t *pObj, LSM6DSO_Axes_t *Acceleration)
{
 8004d34:	b580      	push	{r7, lr}
 8004d36:	b086      	sub	sp, #24
 8004d38:	af00      	add	r7, sp, #0
 8004d3a:	6078      	str	r0, [r7, #4]
 8004d3c:	6039      	str	r1, [r7, #0]
  lsm6dso_axis3bit16_t data_raw;
  float_t sensitivity = 0.0f;
 8004d3e:	f04f 0300 	mov.w	r3, #0
 8004d42:	60fb      	str	r3, [r7, #12]

  /* Read raw data values. */
  if (lsm6dso_acceleration_raw_get(&(pObj->Ctx), data_raw.i16bit) != LSM6DSO_OK)
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	3320      	adds	r3, #32
 8004d48:	f107 0210 	add.w	r2, r7, #16
 8004d4c:	4611      	mov	r1, r2
 8004d4e:	4618      	mov	r0, r3
 8004d50:	f001 f9b1 	bl	80060b6 <lsm6dso_acceleration_raw_get>
 8004d54:	4603      	mov	r3, r0
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d002      	beq.n	8004d60 <LSM6DSO_ACC_GetAxes+0x2c>
  {
    return LSM6DSO_ERROR;
 8004d5a:	f04f 33ff 	mov.w	r3, #4294967295
 8004d5e:	e03c      	b.n	8004dda <LSM6DSO_ACC_GetAxes+0xa6>
  }

  /* Get LSM6DSO actual sensitivity. */
  if (LSM6DSO_ACC_GetSensitivity(pObj, &sensitivity) != LSM6DSO_OK)
 8004d60:	f107 030c 	add.w	r3, r7, #12
 8004d64:	4619      	mov	r1, r3
 8004d66:	6878      	ldr	r0, [r7, #4]
 8004d68:	f7ff fce0 	bl	800472c <LSM6DSO_ACC_GetSensitivity>
 8004d6c:	4603      	mov	r3, r0
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d002      	beq.n	8004d78 <LSM6DSO_ACC_GetAxes+0x44>
  {
    return LSM6DSO_ERROR;
 8004d72:	f04f 33ff 	mov.w	r3, #4294967295
 8004d76:	e030      	b.n	8004dda <LSM6DSO_ACC_GetAxes+0xa6>
  }

  /* Calculate the data. */
  Acceleration->x = (int32_t)((float_t)((float_t)data_raw.i16bit[0] * sensitivity));
 8004d78:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8004d7c:	ee07 3a90 	vmov	s15, r3
 8004d80:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004d84:	edd7 7a03 	vldr	s15, [r7, #12]
 8004d88:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004d8c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004d90:	ee17 2a90 	vmov	r2, s15
 8004d94:	683b      	ldr	r3, [r7, #0]
 8004d96:	601a      	str	r2, [r3, #0]
  Acceleration->y = (int32_t)((float_t)((float_t)data_raw.i16bit[1] * sensitivity));
 8004d98:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8004d9c:	ee07 3a90 	vmov	s15, r3
 8004da0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004da4:	edd7 7a03 	vldr	s15, [r7, #12]
 8004da8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004dac:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004db0:	ee17 2a90 	vmov	r2, s15
 8004db4:	683b      	ldr	r3, [r7, #0]
 8004db6:	605a      	str	r2, [r3, #4]
  Acceleration->z = (int32_t)((float_t)((float_t)data_raw.i16bit[2] * sensitivity));
 8004db8:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8004dbc:	ee07 3a90 	vmov	s15, r3
 8004dc0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004dc4:	edd7 7a03 	vldr	s15, [r7, #12]
 8004dc8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004dcc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004dd0:	ee17 2a90 	vmov	r2, s15
 8004dd4:	683b      	ldr	r3, [r7, #0]
 8004dd6:	609a      	str	r2, [r3, #8]

  return LSM6DSO_OK;
 8004dd8:	2300      	movs	r3, #0
}
 8004dda:	4618      	mov	r0, r3
 8004ddc:	3718      	adds	r7, #24
 8004dde:	46bd      	mov	sp, r7
 8004de0:	bd80      	pop	{r7, pc}

08004de2 <LSM6DSO_GYRO_Enable>:
  * @brief  Enable the LSM6DSO gyroscope sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_GYRO_Enable(LSM6DSO_Object_t *pObj)
{
 8004de2:	b580      	push	{r7, lr}
 8004de4:	b082      	sub	sp, #8
 8004de6:	af00      	add	r7, sp, #0
 8004de8:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->gyro_is_enabled == 1U)
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8004df0:	2b01      	cmp	r3, #1
 8004df2:	d101      	bne.n	8004df8 <LSM6DSO_GYRO_Enable+0x16>
  {
    return LSM6DSO_OK;
 8004df4:	2300      	movs	r3, #0
 8004df6:	e014      	b.n	8004e22 <LSM6DSO_GYRO_Enable+0x40>
  }

  /* Output data rate selection. */
  if (lsm6dso_gy_data_rate_set(&(pObj->Ctx), pObj->gyro_odr) != LSM6DSO_OK)
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	f103 0220 	add.w	r2, r3, #32
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8004e04:	4619      	mov	r1, r3
 8004e06:	4610      	mov	r0, r2
 8004e08:	f000 ff86 	bl	8005d18 <lsm6dso_gy_data_rate_set>
 8004e0c:	4603      	mov	r3, r0
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d002      	beq.n	8004e18 <LSM6DSO_GYRO_Enable+0x36>
  {
    return LSM6DSO_ERROR;
 8004e12:	f04f 33ff 	mov.w	r3, #4294967295
 8004e16:	e004      	b.n	8004e22 <LSM6DSO_GYRO_Enable+0x40>
  }

  pObj->gyro_is_enabled = 1;
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	2201      	movs	r2, #1
 8004e1c:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32

  return LSM6DSO_OK;
 8004e20:	2300      	movs	r3, #0
}
 8004e22:	4618      	mov	r0, r3
 8004e24:	3708      	adds	r7, #8
 8004e26:	46bd      	mov	sp, r7
 8004e28:	bd80      	pop	{r7, pc}

08004e2a <LSM6DSO_GYRO_Disable>:
  * @brief  Disable the LSM6DSO gyroscope sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_GYRO_Disable(LSM6DSO_Object_t *pObj)
{
 8004e2a:	b580      	push	{r7, lr}
 8004e2c:	b082      	sub	sp, #8
 8004e2e:	af00      	add	r7, sp, #0
 8004e30:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->gyro_is_enabled == 0U)
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	d101      	bne.n	8004e40 <LSM6DSO_GYRO_Disable+0x16>
  {
    return LSM6DSO_OK;
 8004e3c:	2300      	movs	r3, #0
 8004e3e:	e01f      	b.n	8004e80 <LSM6DSO_GYRO_Disable+0x56>
  }

  /* Get current output data rate. */
  if (lsm6dso_gy_data_rate_get(&(pObj->Ctx), &pObj->gyro_odr) != LSM6DSO_OK)
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	f103 0220 	add.w	r2, r3, #32
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	3334      	adds	r3, #52	; 0x34
 8004e4a:	4619      	mov	r1, r3
 8004e4c:	4610      	mov	r0, r2
 8004e4e:	f001 f85f 	bl	8005f10 <lsm6dso_gy_data_rate_get>
 8004e52:	4603      	mov	r3, r0
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	d002      	beq.n	8004e5e <LSM6DSO_GYRO_Disable+0x34>
  {
    return LSM6DSO_ERROR;
 8004e58:	f04f 33ff 	mov.w	r3, #4294967295
 8004e5c:	e010      	b.n	8004e80 <LSM6DSO_GYRO_Disable+0x56>
  }

  /* Output data rate selection - power down. */
  if (lsm6dso_gy_data_rate_set(&(pObj->Ctx), LSM6DSO_GY_ODR_OFF) != LSM6DSO_OK)
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	3320      	adds	r3, #32
 8004e62:	2100      	movs	r1, #0
 8004e64:	4618      	mov	r0, r3
 8004e66:	f000 ff57 	bl	8005d18 <lsm6dso_gy_data_rate_set>
 8004e6a:	4603      	mov	r3, r0
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	d002      	beq.n	8004e76 <LSM6DSO_GYRO_Disable+0x4c>
  {
    return LSM6DSO_ERROR;
 8004e70:	f04f 33ff 	mov.w	r3, #4294967295
 8004e74:	e004      	b.n	8004e80 <LSM6DSO_GYRO_Disable+0x56>
  }

  pObj->gyro_is_enabled = 0;
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	2200      	movs	r2, #0
 8004e7a:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32

  return LSM6DSO_OK;
 8004e7e:	2300      	movs	r3, #0
}
 8004e80:	4618      	mov	r0, r3
 8004e82:	3708      	adds	r7, #8
 8004e84:	46bd      	mov	sp, r7
 8004e86:	bd80      	pop	{r7, pc}

08004e88 <LSM6DSO_GYRO_GetSensitivity>:
  * @param  pObj the device pObj
  * @param  Sensitivity pointer
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_GYRO_GetSensitivity(LSM6DSO_Object_t *pObj, float_t *Sensitivity)
{
 8004e88:	b580      	push	{r7, lr}
 8004e8a:	b084      	sub	sp, #16
 8004e8c:	af00      	add	r7, sp, #0
 8004e8e:	6078      	str	r0, [r7, #4]
 8004e90:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSO_OK;
 8004e92:	2300      	movs	r3, #0
 8004e94:	60fb      	str	r3, [r7, #12]
  lsm6dso_fs_g_t full_scale;

  /* Read actual full scale selection from sensor. */
  if (lsm6dso_gy_full_scale_get(&(pObj->Ctx), &full_scale) != LSM6DSO_OK)
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	3320      	adds	r3, #32
 8004e9a:	f107 020b 	add.w	r2, r7, #11
 8004e9e:	4611      	mov	r1, r2
 8004ea0:	4618      	mov	r0, r3
 8004ea2:	f000 fef7 	bl	8005c94 <lsm6dso_gy_full_scale_get>
 8004ea6:	4603      	mov	r3, r0
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	d002      	beq.n	8004eb2 <LSM6DSO_GYRO_GetSensitivity+0x2a>
  {
    return LSM6DSO_ERROR;
 8004eac:	f04f 33ff 	mov.w	r3, #4294967295
 8004eb0:	e02d      	b.n	8004f0e <LSM6DSO_GYRO_GetSensitivity+0x86>
  }

  /* Store the sensitivity based on actual full scale. */
  switch (full_scale)
 8004eb2:	7afb      	ldrb	r3, [r7, #11]
 8004eb4:	2b06      	cmp	r3, #6
 8004eb6:	d825      	bhi.n	8004f04 <LSM6DSO_GYRO_GetSensitivity+0x7c>
 8004eb8:	a201      	add	r2, pc, #4	; (adr r2, 8004ec0 <LSM6DSO_GYRO_GetSensitivity+0x38>)
 8004eba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ebe:	bf00      	nop
 8004ec0:	08004ee5 	.word	0x08004ee5
 8004ec4:	08004edd 	.word	0x08004edd
 8004ec8:	08004eed 	.word	0x08004eed
 8004ecc:	08004f05 	.word	0x08004f05
 8004ed0:	08004ef5 	.word	0x08004ef5
 8004ed4:	08004f05 	.word	0x08004f05
 8004ed8:	08004efd 	.word	0x08004efd
  {
    case LSM6DSO_125dps:
      *Sensitivity = LSM6DSO_GYRO_SENSITIVITY_FS_125DPS;
 8004edc:	683b      	ldr	r3, [r7, #0]
 8004ede:	4a0e      	ldr	r2, [pc, #56]	; (8004f18 <LSM6DSO_GYRO_GetSensitivity+0x90>)
 8004ee0:	601a      	str	r2, [r3, #0]
      break;
 8004ee2:	e013      	b.n	8004f0c <LSM6DSO_GYRO_GetSensitivity+0x84>

    case LSM6DSO_250dps:
      *Sensitivity = LSM6DSO_GYRO_SENSITIVITY_FS_250DPS;
 8004ee4:	683b      	ldr	r3, [r7, #0]
 8004ee6:	4a0d      	ldr	r2, [pc, #52]	; (8004f1c <LSM6DSO_GYRO_GetSensitivity+0x94>)
 8004ee8:	601a      	str	r2, [r3, #0]
      break;
 8004eea:	e00f      	b.n	8004f0c <LSM6DSO_GYRO_GetSensitivity+0x84>

    case LSM6DSO_500dps:
      *Sensitivity = LSM6DSO_GYRO_SENSITIVITY_FS_500DPS;
 8004eec:	683b      	ldr	r3, [r7, #0]
 8004eee:	4a0c      	ldr	r2, [pc, #48]	; (8004f20 <LSM6DSO_GYRO_GetSensitivity+0x98>)
 8004ef0:	601a      	str	r2, [r3, #0]
      break;
 8004ef2:	e00b      	b.n	8004f0c <LSM6DSO_GYRO_GetSensitivity+0x84>

    case LSM6DSO_1000dps:
      *Sensitivity = LSM6DSO_GYRO_SENSITIVITY_FS_1000DPS;
 8004ef4:	683b      	ldr	r3, [r7, #0]
 8004ef6:	4a0b      	ldr	r2, [pc, #44]	; (8004f24 <LSM6DSO_GYRO_GetSensitivity+0x9c>)
 8004ef8:	601a      	str	r2, [r3, #0]
      break;
 8004efa:	e007      	b.n	8004f0c <LSM6DSO_GYRO_GetSensitivity+0x84>

    case LSM6DSO_2000dps:
      *Sensitivity = LSM6DSO_GYRO_SENSITIVITY_FS_2000DPS;
 8004efc:	683b      	ldr	r3, [r7, #0]
 8004efe:	4a0a      	ldr	r2, [pc, #40]	; (8004f28 <LSM6DSO_GYRO_GetSensitivity+0xa0>)
 8004f00:	601a      	str	r2, [r3, #0]
      break;
 8004f02:	e003      	b.n	8004f0c <LSM6DSO_GYRO_GetSensitivity+0x84>

    default:
      ret = LSM6DSO_ERROR;
 8004f04:	f04f 33ff 	mov.w	r3, #4294967295
 8004f08:	60fb      	str	r3, [r7, #12]
      break;
 8004f0a:	bf00      	nop
  }

  return ret;
 8004f0c:	68fb      	ldr	r3, [r7, #12]
}
 8004f0e:	4618      	mov	r0, r3
 8004f10:	3710      	adds	r7, #16
 8004f12:	46bd      	mov	sp, r7
 8004f14:	bd80      	pop	{r7, pc}
 8004f16:	bf00      	nop
 8004f18:	408c0000 	.word	0x408c0000
 8004f1c:	410c0000 	.word	0x410c0000
 8004f20:	418c0000 	.word	0x418c0000
 8004f24:	420c0000 	.word	0x420c0000
 8004f28:	428c0000 	.word	0x428c0000

08004f2c <LSM6DSO_GYRO_GetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr pointer where the output data rate is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_GYRO_GetOutputDataRate(LSM6DSO_Object_t *pObj, float_t *Odr)
{
 8004f2c:	b580      	push	{r7, lr}
 8004f2e:	b084      	sub	sp, #16
 8004f30:	af00      	add	r7, sp, #0
 8004f32:	6078      	str	r0, [r7, #4]
 8004f34:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSO_OK;
 8004f36:	2300      	movs	r3, #0
 8004f38:	60fb      	str	r3, [r7, #12]
  lsm6dso_odr_g_t odr_low_level;

  /* Get current output data rate. */
  if (lsm6dso_gy_data_rate_get(&(pObj->Ctx), &odr_low_level) != LSM6DSO_OK)
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	3320      	adds	r3, #32
 8004f3e:	f107 020b 	add.w	r2, r7, #11
 8004f42:	4611      	mov	r1, r2
 8004f44:	4618      	mov	r0, r3
 8004f46:	f000 ffe3 	bl	8005f10 <lsm6dso_gy_data_rate_get>
 8004f4a:	4603      	mov	r3, r0
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	d002      	beq.n	8004f56 <LSM6DSO_GYRO_GetOutputDataRate+0x2a>
  {
    return LSM6DSO_ERROR;
 8004f50:	f04f 33ff 	mov.w	r3, #4294967295
 8004f54:	e04e      	b.n	8004ff4 <LSM6DSO_GYRO_GetOutputDataRate+0xc8>
  }

  switch (odr_low_level)
 8004f56:	7afb      	ldrb	r3, [r7, #11]
 8004f58:	2b0a      	cmp	r3, #10
 8004f5a:	d846      	bhi.n	8004fea <LSM6DSO_GYRO_GetOutputDataRate+0xbe>
 8004f5c:	a201      	add	r2, pc, #4	; (adr r2, 8004f64 <LSM6DSO_GYRO_GetOutputDataRate+0x38>)
 8004f5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f62:	bf00      	nop
 8004f64:	08004f91 	.word	0x08004f91
 8004f68:	08004f9b 	.word	0x08004f9b
 8004f6c:	08004fa3 	.word	0x08004fa3
 8004f70:	08004fab 	.word	0x08004fab
 8004f74:	08004fb3 	.word	0x08004fb3
 8004f78:	08004fbb 	.word	0x08004fbb
 8004f7c:	08004fc3 	.word	0x08004fc3
 8004f80:	08004fcb 	.word	0x08004fcb
 8004f84:	08004fd3 	.word	0x08004fd3
 8004f88:	08004fdb 	.word	0x08004fdb
 8004f8c:	08004fe3 	.word	0x08004fe3
  {
    case LSM6DSO_GY_ODR_OFF:
      *Odr = 0.0f;
 8004f90:	683b      	ldr	r3, [r7, #0]
 8004f92:	f04f 0200 	mov.w	r2, #0
 8004f96:	601a      	str	r2, [r3, #0]
      break;
 8004f98:	e02b      	b.n	8004ff2 <LSM6DSO_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSO_GY_ODR_12Hz5:
      *Odr = 12.5f;
 8004f9a:	683b      	ldr	r3, [r7, #0]
 8004f9c:	4a17      	ldr	r2, [pc, #92]	; (8004ffc <LSM6DSO_GYRO_GetOutputDataRate+0xd0>)
 8004f9e:	601a      	str	r2, [r3, #0]
      break;
 8004fa0:	e027      	b.n	8004ff2 <LSM6DSO_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSO_GY_ODR_26Hz:
      *Odr = 26.0f;
 8004fa2:	683b      	ldr	r3, [r7, #0]
 8004fa4:	4a16      	ldr	r2, [pc, #88]	; (8005000 <LSM6DSO_GYRO_GetOutputDataRate+0xd4>)
 8004fa6:	601a      	str	r2, [r3, #0]
      break;
 8004fa8:	e023      	b.n	8004ff2 <LSM6DSO_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSO_GY_ODR_52Hz:
      *Odr = 52.0f;
 8004faa:	683b      	ldr	r3, [r7, #0]
 8004fac:	4a15      	ldr	r2, [pc, #84]	; (8005004 <LSM6DSO_GYRO_GetOutputDataRate+0xd8>)
 8004fae:	601a      	str	r2, [r3, #0]
      break;
 8004fb0:	e01f      	b.n	8004ff2 <LSM6DSO_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSO_GY_ODR_104Hz:
      *Odr = 104.0f;
 8004fb2:	683b      	ldr	r3, [r7, #0]
 8004fb4:	4a14      	ldr	r2, [pc, #80]	; (8005008 <LSM6DSO_GYRO_GetOutputDataRate+0xdc>)
 8004fb6:	601a      	str	r2, [r3, #0]
      break;
 8004fb8:	e01b      	b.n	8004ff2 <LSM6DSO_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSO_GY_ODR_208Hz:
      *Odr = 208.0f;
 8004fba:	683b      	ldr	r3, [r7, #0]
 8004fbc:	4a13      	ldr	r2, [pc, #76]	; (800500c <LSM6DSO_GYRO_GetOutputDataRate+0xe0>)
 8004fbe:	601a      	str	r2, [r3, #0]
      break;
 8004fc0:	e017      	b.n	8004ff2 <LSM6DSO_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSO_GY_ODR_417Hz:
      *Odr = 417.0f;
 8004fc2:	683b      	ldr	r3, [r7, #0]
 8004fc4:	4a12      	ldr	r2, [pc, #72]	; (8005010 <LSM6DSO_GYRO_GetOutputDataRate+0xe4>)
 8004fc6:	601a      	str	r2, [r3, #0]
      break;
 8004fc8:	e013      	b.n	8004ff2 <LSM6DSO_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSO_GY_ODR_833Hz:
      *Odr = 833.0f;
 8004fca:	683b      	ldr	r3, [r7, #0]
 8004fcc:	4a11      	ldr	r2, [pc, #68]	; (8005014 <LSM6DSO_GYRO_GetOutputDataRate+0xe8>)
 8004fce:	601a      	str	r2, [r3, #0]
      break;
 8004fd0:	e00f      	b.n	8004ff2 <LSM6DSO_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSO_GY_ODR_1667Hz:
      *Odr = 1667.0f;
 8004fd2:	683b      	ldr	r3, [r7, #0]
 8004fd4:	4a10      	ldr	r2, [pc, #64]	; (8005018 <LSM6DSO_GYRO_GetOutputDataRate+0xec>)
 8004fd6:	601a      	str	r2, [r3, #0]
      break;
 8004fd8:	e00b      	b.n	8004ff2 <LSM6DSO_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSO_GY_ODR_3333Hz:
      *Odr = 3333.0f;
 8004fda:	683b      	ldr	r3, [r7, #0]
 8004fdc:	4a0f      	ldr	r2, [pc, #60]	; (800501c <LSM6DSO_GYRO_GetOutputDataRate+0xf0>)
 8004fde:	601a      	str	r2, [r3, #0]
      break;
 8004fe0:	e007      	b.n	8004ff2 <LSM6DSO_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSO_GY_ODR_6667Hz:
      *Odr = 6667.0f;
 8004fe2:	683b      	ldr	r3, [r7, #0]
 8004fe4:	4a0e      	ldr	r2, [pc, #56]	; (8005020 <LSM6DSO_GYRO_GetOutputDataRate+0xf4>)
 8004fe6:	601a      	str	r2, [r3, #0]
      break;
 8004fe8:	e003      	b.n	8004ff2 <LSM6DSO_GYRO_GetOutputDataRate+0xc6>

    default:
      ret = LSM6DSO_ERROR;
 8004fea:	f04f 33ff 	mov.w	r3, #4294967295
 8004fee:	60fb      	str	r3, [r7, #12]
      break;
 8004ff0:	bf00      	nop
  }

  return ret;
 8004ff2:	68fb      	ldr	r3, [r7, #12]
}
 8004ff4:	4618      	mov	r0, r3
 8004ff6:	3710      	adds	r7, #16
 8004ff8:	46bd      	mov	sp, r7
 8004ffa:	bd80      	pop	{r7, pc}
 8004ffc:	41480000 	.word	0x41480000
 8005000:	41d00000 	.word	0x41d00000
 8005004:	42500000 	.word	0x42500000
 8005008:	42d00000 	.word	0x42d00000
 800500c:	43500000 	.word	0x43500000
 8005010:	43d08000 	.word	0x43d08000
 8005014:	44504000 	.word	0x44504000
 8005018:	44d06000 	.word	0x44d06000
 800501c:	45505000 	.word	0x45505000
 8005020:	45d05800 	.word	0x45d05800

08005024 <LSM6DSO_GYRO_SetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_GYRO_SetOutputDataRate(LSM6DSO_Object_t *pObj, float_t Odr)
{
 8005024:	b580      	push	{r7, lr}
 8005026:	b082      	sub	sp, #8
 8005028:	af00      	add	r7, sp, #0
 800502a:	6078      	str	r0, [r7, #4]
 800502c:	ed87 0a00 	vstr	s0, [r7]
  return LSM6DSO_GYRO_SetOutputDataRate_With_Mode(pObj, Odr, LSM6DSO_GYRO_HIGH_PERFORMANCE_MODE);
 8005030:	2100      	movs	r1, #0
 8005032:	ed97 0a00 	vldr	s0, [r7]
 8005036:	6878      	ldr	r0, [r7, #4]
 8005038:	f000 f806 	bl	8005048 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode>
 800503c:	4603      	mov	r3, r0
}
 800503e:	4618      	mov	r0, r3
 8005040:	3708      	adds	r7, #8
 8005042:	46bd      	mov	sp, r7
 8005044:	bd80      	pop	{r7, pc}
	...

08005048 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode>:
  * @param  Mode the gyroscope operating mode
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_GYRO_SetOutputDataRate_With_Mode(LSM6DSO_Object_t *pObj, float_t Odr,
                                                 LSM6DSO_GYRO_Operating_Mode_t Mode)
{
 8005048:	b580      	push	{r7, lr}
 800504a:	b088      	sub	sp, #32
 800504c:	af00      	add	r7, sp, #0
 800504e:	60f8      	str	r0, [r7, #12]
 8005050:	ed87 0a02 	vstr	s0, [r7, #8]
 8005054:	460b      	mov	r3, r1
 8005056:	71fb      	strb	r3, [r7, #7]
  int32_t ret = LSM6DSO_OK;
 8005058:	2300      	movs	r3, #0
 800505a:	61fb      	str	r3, [r7, #28]
  float_t newOdr = Odr;
 800505c:	68bb      	ldr	r3, [r7, #8]
 800505e:	61bb      	str	r3, [r7, #24]

  switch (Mode)
 8005060:	79fb      	ldrb	r3, [r7, #7]
 8005062:	2b00      	cmp	r3, #0
 8005064:	d002      	beq.n	800506c <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x24>
 8005066:	2b01      	cmp	r3, #1
 8005068:	d028      	beq.n	80050bc <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x74>
 800506a:	e05c      	b.n	8005126 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0xde>
    case LSM6DSO_GYRO_HIGH_PERFORMANCE_MODE:
    {
      /* We must uncheck Low Power bit if it is enabled */
      lsm6dso_ctrl7_g_t val1;

      if (lsm6dso_read_reg(&(pObj->Ctx), LSM6DSO_CTRL7_G, (uint8_t *)&val1, 1) != LSM6DSO_OK)
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	f103 0020 	add.w	r0, r3, #32
 8005072:	f107 0214 	add.w	r2, r7, #20
 8005076:	2301      	movs	r3, #1
 8005078:	2116      	movs	r1, #22
 800507a:	f000 fbf3 	bl	8005864 <lsm6dso_read_reg>
 800507e:	4603      	mov	r3, r0
 8005080:	2b00      	cmp	r3, #0
 8005082:	d002      	beq.n	800508a <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x42>
      {
        return LSM6DSO_ERROR;
 8005084:	f04f 33ff 	mov.w	r3, #4294967295
 8005088:	e06c      	b.n	8005164 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x11c>
      }

      if (val1.g_hm_mode != 0U)
 800508a:	7d3b      	ldrb	r3, [r7, #20]
 800508c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8005090:	b2db      	uxtb	r3, r3
 8005092:	2b00      	cmp	r3, #0
 8005094:	d04b      	beq.n	800512e <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0xe6>
      {
        val1.g_hm_mode = 0U;
 8005096:	7d3b      	ldrb	r3, [r7, #20]
 8005098:	f36f 13c7 	bfc	r3, #7, #1
 800509c:	753b      	strb	r3, [r7, #20]
        if (lsm6dso_write_reg(&(pObj->Ctx), LSM6DSO_CTRL7_G, (uint8_t *)&val1, 1) != LSM6DSO_OK)
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	f103 0020 	add.w	r0, r3, #32
 80050a4:	f107 0214 	add.w	r2, r7, #20
 80050a8:	2301      	movs	r3, #1
 80050aa:	2116      	movs	r1, #22
 80050ac:	f000 fbf2 	bl	8005894 <lsm6dso_write_reg>
 80050b0:	4603      	mov	r3, r0
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d03b      	beq.n	800512e <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0xe6>
        {
          return LSM6DSO_ERROR;
 80050b6:	f04f 33ff 	mov.w	r3, #4294967295
 80050ba:	e053      	b.n	8005164 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x11c>
    case LSM6DSO_GYRO_LOW_POWER_NORMAL_MODE:
    {
      /* We must check the Low Power bit if it is unchecked */
      lsm6dso_ctrl7_g_t val1;

      if (lsm6dso_read_reg(&(pObj->Ctx), LSM6DSO_CTRL7_G, (uint8_t *)&val1, 1) != LSM6DSO_OK)
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	f103 0020 	add.w	r0, r3, #32
 80050c2:	f107 0210 	add.w	r2, r7, #16
 80050c6:	2301      	movs	r3, #1
 80050c8:	2116      	movs	r1, #22
 80050ca:	f000 fbcb 	bl	8005864 <lsm6dso_read_reg>
 80050ce:	4603      	mov	r3, r0
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	d002      	beq.n	80050da <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x92>
      {
        return LSM6DSO_ERROR;
 80050d4:	f04f 33ff 	mov.w	r3, #4294967295
 80050d8:	e044      	b.n	8005164 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x11c>
      }

      if (val1.g_hm_mode == 0U)
 80050da:	7c3b      	ldrb	r3, [r7, #16]
 80050dc:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80050e0:	b2db      	uxtb	r3, r3
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	d112      	bne.n	800510c <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0xc4>
      {
        val1.g_hm_mode = 1U;
 80050e6:	7c3b      	ldrb	r3, [r7, #16]
 80050e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80050ec:	743b      	strb	r3, [r7, #16]
        if (lsm6dso_write_reg(&(pObj->Ctx), LSM6DSO_CTRL7_G, (uint8_t *)&val1, 1) != LSM6DSO_OK)
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	f103 0020 	add.w	r0, r3, #32
 80050f4:	f107 0210 	add.w	r2, r7, #16
 80050f8:	2301      	movs	r3, #1
 80050fa:	2116      	movs	r1, #22
 80050fc:	f000 fbca 	bl	8005894 <lsm6dso_write_reg>
 8005100:	4603      	mov	r3, r0
 8005102:	2b00      	cmp	r3, #0
 8005104:	d002      	beq.n	800510c <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0xc4>
        {
          return LSM6DSO_ERROR;
 8005106:	f04f 33ff 	mov.w	r3, #4294967295
 800510a:	e02b      	b.n	8005164 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x11c>
        }
      }

      /* Now we need to limit the ODR to 208 Hz if it is higher */
      if (newOdr > 208.0f)
 800510c:	edd7 7a06 	vldr	s15, [r7, #24]
 8005110:	ed9f 7a16 	vldr	s14, [pc, #88]	; 800516c <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x124>
 8005114:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005118:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800511c:	dc00      	bgt.n	8005120 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0xd8>
      {
        newOdr = 208.0f;
      }
      break;
 800511e:	e007      	b.n	8005130 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0xe8>
        newOdr = 208.0f;
 8005120:	4b13      	ldr	r3, [pc, #76]	; (8005170 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x128>)
 8005122:	61bb      	str	r3, [r7, #24]
 8005124:	e004      	b.n	8005130 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0xe8>
    }
    default:
      ret = LSM6DSO_ERROR;
 8005126:	f04f 33ff 	mov.w	r3, #4294967295
 800512a:	61fb      	str	r3, [r7, #28]
      break;
 800512c:	e000      	b.n	8005130 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0xe8>
      break;
 800512e:	bf00      	nop
  }

  if (ret == LSM6DSO_ERROR)
 8005130:	69fb      	ldr	r3, [r7, #28]
 8005132:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005136:	d102      	bne.n	800513e <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0xf6>
  {
    return LSM6DSO_ERROR;
 8005138:	f04f 33ff 	mov.w	r3, #4294967295
 800513c:	e012      	b.n	8005164 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x11c>
  }

  if (pObj->gyro_is_enabled == 1U)
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8005144:	2b01      	cmp	r3, #1
 8005146:	d106      	bne.n	8005156 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x10e>
  {
    ret = LSM6DSO_GYRO_SetOutputDataRate_When_Enabled(pObj, newOdr);
 8005148:	ed97 0a06 	vldr	s0, [r7, #24]
 800514c:	68f8      	ldr	r0, [r7, #12]
 800514e:	f000 fa45 	bl	80055dc <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled>
 8005152:	61f8      	str	r0, [r7, #28]
 8005154:	e005      	b.n	8005162 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x11a>
  }
  else
  {
    ret = LSM6DSO_GYRO_SetOutputDataRate_When_Disabled(pObj, newOdr);
 8005156:	ed97 0a06 	vldr	s0, [r7, #24]
 800515a:	68f8      	ldr	r0, [r7, #12]
 800515c:	f000 faca 	bl	80056f4 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled>
 8005160:	61f8      	str	r0, [r7, #28]
  }

  return ret;
 8005162:	69fb      	ldr	r3, [r7, #28]
}
 8005164:	4618      	mov	r0, r3
 8005166:	3720      	adds	r7, #32
 8005168:	46bd      	mov	sp, r7
 800516a:	bd80      	pop	{r7, pc}
 800516c:	43500000 	.word	0x43500000
 8005170:	43500000 	.word	0x43500000

08005174 <LSM6DSO_GYRO_GetFullScale>:
  * @param  pObj the device pObj
  * @param  FullScale pointer where the full scale is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_GYRO_GetFullScale(LSM6DSO_Object_t *pObj, int32_t  *FullScale)
{
 8005174:	b580      	push	{r7, lr}
 8005176:	b084      	sub	sp, #16
 8005178:	af00      	add	r7, sp, #0
 800517a:	6078      	str	r0, [r7, #4]
 800517c:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSO_OK;
 800517e:	2300      	movs	r3, #0
 8005180:	60fb      	str	r3, [r7, #12]
  lsm6dso_fs_g_t fs_low_level;

  /* Read actual full scale selection from sensor. */
  if (lsm6dso_gy_full_scale_get(&(pObj->Ctx), &fs_low_level) != LSM6DSO_OK)
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	3320      	adds	r3, #32
 8005186:	f107 020b 	add.w	r2, r7, #11
 800518a:	4611      	mov	r1, r2
 800518c:	4618      	mov	r0, r3
 800518e:	f000 fd81 	bl	8005c94 <lsm6dso_gy_full_scale_get>
 8005192:	4603      	mov	r3, r0
 8005194:	2b00      	cmp	r3, #0
 8005196:	d002      	beq.n	800519e <LSM6DSO_GYRO_GetFullScale+0x2a>
  {
    return LSM6DSO_ERROR;
 8005198:	f04f 33ff 	mov.w	r3, #4294967295
 800519c:	e030      	b.n	8005200 <LSM6DSO_GYRO_GetFullScale+0x8c>
  }

  switch (fs_low_level)
 800519e:	7afb      	ldrb	r3, [r7, #11]
 80051a0:	2b06      	cmp	r3, #6
 80051a2:	d828      	bhi.n	80051f6 <LSM6DSO_GYRO_GetFullScale+0x82>
 80051a4:	a201      	add	r2, pc, #4	; (adr r2, 80051ac <LSM6DSO_GYRO_GetFullScale+0x38>)
 80051a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80051aa:	bf00      	nop
 80051ac:	080051d1 	.word	0x080051d1
 80051b0:	080051c9 	.word	0x080051c9
 80051b4:	080051d9 	.word	0x080051d9
 80051b8:	080051f7 	.word	0x080051f7
 80051bc:	080051e3 	.word	0x080051e3
 80051c0:	080051f7 	.word	0x080051f7
 80051c4:	080051ed 	.word	0x080051ed
  {
    case LSM6DSO_125dps:
      *FullScale =  125;
 80051c8:	683b      	ldr	r3, [r7, #0]
 80051ca:	227d      	movs	r2, #125	; 0x7d
 80051cc:	601a      	str	r2, [r3, #0]
      break;
 80051ce:	e016      	b.n	80051fe <LSM6DSO_GYRO_GetFullScale+0x8a>

    case LSM6DSO_250dps:
      *FullScale =  250;
 80051d0:	683b      	ldr	r3, [r7, #0]
 80051d2:	22fa      	movs	r2, #250	; 0xfa
 80051d4:	601a      	str	r2, [r3, #0]
      break;
 80051d6:	e012      	b.n	80051fe <LSM6DSO_GYRO_GetFullScale+0x8a>

    case LSM6DSO_500dps:
      *FullScale =  500;
 80051d8:	683b      	ldr	r3, [r7, #0]
 80051da:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80051de:	601a      	str	r2, [r3, #0]
      break;
 80051e0:	e00d      	b.n	80051fe <LSM6DSO_GYRO_GetFullScale+0x8a>

    case LSM6DSO_1000dps:
      *FullScale = 1000;
 80051e2:	683b      	ldr	r3, [r7, #0]
 80051e4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80051e8:	601a      	str	r2, [r3, #0]
      break;
 80051ea:	e008      	b.n	80051fe <LSM6DSO_GYRO_GetFullScale+0x8a>

    case LSM6DSO_2000dps:
      *FullScale = 2000;
 80051ec:	683b      	ldr	r3, [r7, #0]
 80051ee:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 80051f2:	601a      	str	r2, [r3, #0]
      break;
 80051f4:	e003      	b.n	80051fe <LSM6DSO_GYRO_GetFullScale+0x8a>

    default:
      ret = LSM6DSO_ERROR;
 80051f6:	f04f 33ff 	mov.w	r3, #4294967295
 80051fa:	60fb      	str	r3, [r7, #12]
      break;
 80051fc:	bf00      	nop
  }

  return ret;
 80051fe:	68fb      	ldr	r3, [r7, #12]
}
 8005200:	4618      	mov	r0, r3
 8005202:	3710      	adds	r7, #16
 8005204:	46bd      	mov	sp, r7
 8005206:	bd80      	pop	{r7, pc}

08005208 <LSM6DSO_GYRO_SetFullScale>:
  * @param  pObj the device pObj
  * @param  FullScale the functional full scale to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_GYRO_SetFullScale(LSM6DSO_Object_t *pObj, int32_t FullScale)
{
 8005208:	b580      	push	{r7, lr}
 800520a:	b084      	sub	sp, #16
 800520c:	af00      	add	r7, sp, #0
 800520e:	6078      	str	r0, [r7, #4]
 8005210:	6039      	str	r1, [r7, #0]
  lsm6dso_fs_g_t new_fs;

  new_fs = (FullScale <= 125)  ? LSM6DSO_125dps
           : (FullScale <= 250)  ? LSM6DSO_250dps
 8005212:	683b      	ldr	r3, [r7, #0]
 8005214:	2b7d      	cmp	r3, #125	; 0x7d
 8005216:	dd12      	ble.n	800523e <LSM6DSO_GYRO_SetFullScale+0x36>
 8005218:	683b      	ldr	r3, [r7, #0]
 800521a:	2bfa      	cmp	r3, #250	; 0xfa
 800521c:	dd0d      	ble.n	800523a <LSM6DSO_GYRO_SetFullScale+0x32>
 800521e:	683b      	ldr	r3, [r7, #0]
 8005220:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8005224:	dd07      	ble.n	8005236 <LSM6DSO_GYRO_SetFullScale+0x2e>
 8005226:	683b      	ldr	r3, [r7, #0]
 8005228:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800522c:	dc01      	bgt.n	8005232 <LSM6DSO_GYRO_SetFullScale+0x2a>
 800522e:	2304      	movs	r3, #4
 8005230:	e006      	b.n	8005240 <LSM6DSO_GYRO_SetFullScale+0x38>
 8005232:	2306      	movs	r3, #6
 8005234:	e004      	b.n	8005240 <LSM6DSO_GYRO_SetFullScale+0x38>
 8005236:	2302      	movs	r3, #2
 8005238:	e002      	b.n	8005240 <LSM6DSO_GYRO_SetFullScale+0x38>
 800523a:	2300      	movs	r3, #0
 800523c:	e000      	b.n	8005240 <LSM6DSO_GYRO_SetFullScale+0x38>
 800523e:	2301      	movs	r3, #1
  new_fs = (FullScale <= 125)  ? LSM6DSO_125dps
 8005240:	73fb      	strb	r3, [r7, #15]
           : (FullScale <= 500)  ? LSM6DSO_500dps
           : (FullScale <= 1000) ? LSM6DSO_1000dps
           :                       LSM6DSO_2000dps;

  if (lsm6dso_gy_full_scale_set(&(pObj->Ctx), new_fs) != LSM6DSO_OK)
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	3320      	adds	r3, #32
 8005246:	7bfa      	ldrb	r2, [r7, #15]
 8005248:	4611      	mov	r1, r2
 800524a:	4618      	mov	r0, r3
 800524c:	f000 fcfc 	bl	8005c48 <lsm6dso_gy_full_scale_set>
 8005250:	4603      	mov	r3, r0
 8005252:	2b00      	cmp	r3, #0
 8005254:	d002      	beq.n	800525c <LSM6DSO_GYRO_SetFullScale+0x54>
  {
    return LSM6DSO_ERROR;
 8005256:	f04f 33ff 	mov.w	r3, #4294967295
 800525a:	e000      	b.n	800525e <LSM6DSO_GYRO_SetFullScale+0x56>
  }

  return LSM6DSO_OK;
 800525c:	2300      	movs	r3, #0
}
 800525e:	4618      	mov	r0, r3
 8005260:	3710      	adds	r7, #16
 8005262:	46bd      	mov	sp, r7
 8005264:	bd80      	pop	{r7, pc}

08005266 <LSM6DSO_GYRO_GetAxesRaw>:
  * @param  pObj the device pObj
  * @param  Value pointer where the raw values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_GYRO_GetAxesRaw(LSM6DSO_Object_t *pObj, LSM6DSO_AxesRaw_t *Value)
{
 8005266:	b580      	push	{r7, lr}
 8005268:	b084      	sub	sp, #16
 800526a:	af00      	add	r7, sp, #0
 800526c:	6078      	str	r0, [r7, #4]
 800526e:	6039      	str	r1, [r7, #0]
  lsm6dso_axis3bit16_t data_raw;

  /* Read raw data values. */
  if (lsm6dso_angular_rate_raw_get(&(pObj->Ctx), data_raw.i16bit) != LSM6DSO_OK)
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	3320      	adds	r3, #32
 8005274:	f107 0208 	add.w	r2, r7, #8
 8005278:	4611      	mov	r1, r2
 800527a:	4618      	mov	r0, r3
 800527c:	f000 fed0 	bl	8006020 <lsm6dso_angular_rate_raw_get>
 8005280:	4603      	mov	r3, r0
 8005282:	2b00      	cmp	r3, #0
 8005284:	d002      	beq.n	800528c <LSM6DSO_GYRO_GetAxesRaw+0x26>
  {
    return LSM6DSO_ERROR;
 8005286:	f04f 33ff 	mov.w	r3, #4294967295
 800528a:	e00c      	b.n	80052a6 <LSM6DSO_GYRO_GetAxesRaw+0x40>
  }

  /* Format the data. */
  Value->x = data_raw.i16bit[0];
 800528c:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8005290:	683b      	ldr	r3, [r7, #0]
 8005292:	801a      	strh	r2, [r3, #0]
  Value->y = data_raw.i16bit[1];
 8005294:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8005298:	683b      	ldr	r3, [r7, #0]
 800529a:	805a      	strh	r2, [r3, #2]
  Value->z = data_raw.i16bit[2];
 800529c:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 80052a0:	683b      	ldr	r3, [r7, #0]
 80052a2:	809a      	strh	r2, [r3, #4]

  return LSM6DSO_OK;
 80052a4:	2300      	movs	r3, #0
}
 80052a6:	4618      	mov	r0, r3
 80052a8:	3710      	adds	r7, #16
 80052aa:	46bd      	mov	sp, r7
 80052ac:	bd80      	pop	{r7, pc}

080052ae <LSM6DSO_GYRO_GetAxes>:
  * @param  pObj the device pObj
  * @param  AngularRate pointer where the values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_GYRO_GetAxes(LSM6DSO_Object_t *pObj, LSM6DSO_Axes_t *AngularRate)
{
 80052ae:	b580      	push	{r7, lr}
 80052b0:	b086      	sub	sp, #24
 80052b2:	af00      	add	r7, sp, #0
 80052b4:	6078      	str	r0, [r7, #4]
 80052b6:	6039      	str	r1, [r7, #0]
  lsm6dso_axis3bit16_t data_raw;
  float_t sensitivity;

  /* Read raw data values. */
  if (lsm6dso_angular_rate_raw_get(&(pObj->Ctx), data_raw.i16bit) != LSM6DSO_OK)
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	3320      	adds	r3, #32
 80052bc:	f107 0210 	add.w	r2, r7, #16
 80052c0:	4611      	mov	r1, r2
 80052c2:	4618      	mov	r0, r3
 80052c4:	f000 feac 	bl	8006020 <lsm6dso_angular_rate_raw_get>
 80052c8:	4603      	mov	r3, r0
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	d002      	beq.n	80052d4 <LSM6DSO_GYRO_GetAxes+0x26>
  {
    return LSM6DSO_ERROR;
 80052ce:	f04f 33ff 	mov.w	r3, #4294967295
 80052d2:	e03c      	b.n	800534e <LSM6DSO_GYRO_GetAxes+0xa0>
  }

  /* Get LSM6DSO actual sensitivity. */
  if (LSM6DSO_GYRO_GetSensitivity(pObj, &sensitivity) != LSM6DSO_OK)
 80052d4:	f107 030c 	add.w	r3, r7, #12
 80052d8:	4619      	mov	r1, r3
 80052da:	6878      	ldr	r0, [r7, #4]
 80052dc:	f7ff fdd4 	bl	8004e88 <LSM6DSO_GYRO_GetSensitivity>
 80052e0:	4603      	mov	r3, r0
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	d002      	beq.n	80052ec <LSM6DSO_GYRO_GetAxes+0x3e>
  {
    return LSM6DSO_ERROR;
 80052e6:	f04f 33ff 	mov.w	r3, #4294967295
 80052ea:	e030      	b.n	800534e <LSM6DSO_GYRO_GetAxes+0xa0>
  }

  /* Calculate the data. */
  AngularRate->x = (int32_t)((float_t)((float_t)data_raw.i16bit[0] * sensitivity));
 80052ec:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80052f0:	ee07 3a90 	vmov	s15, r3
 80052f4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80052f8:	edd7 7a03 	vldr	s15, [r7, #12]
 80052fc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005300:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005304:	ee17 2a90 	vmov	r2, s15
 8005308:	683b      	ldr	r3, [r7, #0]
 800530a:	601a      	str	r2, [r3, #0]
  AngularRate->y = (int32_t)((float_t)((float_t)data_raw.i16bit[1] * sensitivity));
 800530c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8005310:	ee07 3a90 	vmov	s15, r3
 8005314:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005318:	edd7 7a03 	vldr	s15, [r7, #12]
 800531c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005320:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005324:	ee17 2a90 	vmov	r2, s15
 8005328:	683b      	ldr	r3, [r7, #0]
 800532a:	605a      	str	r2, [r3, #4]
  AngularRate->z = (int32_t)((float_t)((float_t)data_raw.i16bit[2] * sensitivity));
 800532c:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8005330:	ee07 3a90 	vmov	s15, r3
 8005334:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005338:	edd7 7a03 	vldr	s15, [r7, #12]
 800533c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005340:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005344:	ee17 2a90 	vmov	r2, s15
 8005348:	683b      	ldr	r3, [r7, #0]
 800534a:	609a      	str	r2, [r3, #8]

  return LSM6DSO_OK;
 800534c:	2300      	movs	r3, #0
}
 800534e:	4618      	mov	r0, r3
 8005350:	3718      	adds	r7, #24
 8005352:	46bd      	mov	sp, r7
 8005354:	bd80      	pop	{r7, pc}

08005356 <LSM6DSO_Write_Reg>:
  * @param  Reg address to be written
  * @param  Data value to be written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_Write_Reg(LSM6DSO_Object_t *pObj, uint8_t Reg, uint8_t Data)
{
 8005356:	b580      	push	{r7, lr}
 8005358:	b082      	sub	sp, #8
 800535a:	af00      	add	r7, sp, #0
 800535c:	6078      	str	r0, [r7, #4]
 800535e:	460b      	mov	r3, r1
 8005360:	70fb      	strb	r3, [r7, #3]
 8005362:	4613      	mov	r3, r2
 8005364:	70bb      	strb	r3, [r7, #2]
  if (lsm6dso_write_reg(&(pObj->Ctx), Reg, &Data, 1) != LSM6DSO_OK)
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	f103 0020 	add.w	r0, r3, #32
 800536c:	1cba      	adds	r2, r7, #2
 800536e:	78f9      	ldrb	r1, [r7, #3]
 8005370:	2301      	movs	r3, #1
 8005372:	f000 fa8f 	bl	8005894 <lsm6dso_write_reg>
 8005376:	4603      	mov	r3, r0
 8005378:	2b00      	cmp	r3, #0
 800537a:	d002      	beq.n	8005382 <LSM6DSO_Write_Reg+0x2c>
  {
    return LSM6DSO_ERROR;
 800537c:	f04f 33ff 	mov.w	r3, #4294967295
 8005380:	e000      	b.n	8005384 <LSM6DSO_Write_Reg+0x2e>
  }

  return LSM6DSO_OK;
 8005382:	2300      	movs	r3, #0
}
 8005384:	4618      	mov	r0, r3
 8005386:	3708      	adds	r7, #8
 8005388:	46bd      	mov	sp, r7
 800538a:	bd80      	pop	{r7, pc}

0800538c <LSM6DSO_ACC_SetOutputDataRate_When_Enabled>:
  * @param  pObj the device pObj
  * @param  Odr the functional output data rate to be set
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LSM6DSO_ACC_SetOutputDataRate_When_Enabled(LSM6DSO_Object_t *pObj, float_t Odr)
{
 800538c:	b580      	push	{r7, lr}
 800538e:	b084      	sub	sp, #16
 8005390:	af00      	add	r7, sp, #0
 8005392:	6078      	str	r0, [r7, #4]
 8005394:	ed87 0a00 	vstr	s0, [r7]
  lsm6dso_odr_xl_t new_odr;

  new_odr = (Odr <=    1.6f) ? LSM6DSO_XL_ODR_1Hz6
            : (Odr <=   12.5f) ? LSM6DSO_XL_ODR_12Hz5
 8005398:	edd7 7a00 	vldr	s15, [r7]
 800539c:	ed9f 7a3f 	vldr	s14, [pc, #252]	; 800549c <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x110>
 80053a0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80053a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80053a8:	d801      	bhi.n	80053ae <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x22>
 80053aa:	230b      	movs	r3, #11
 80053ac:	e063      	b.n	8005476 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xea>
 80053ae:	edd7 7a00 	vldr	s15, [r7]
 80053b2:	eeb2 7a09 	vmov.f32	s14, #41	; 0x41480000  12.5
 80053b6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80053ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80053be:	d801      	bhi.n	80053c4 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x38>
 80053c0:	2301      	movs	r3, #1
 80053c2:	e058      	b.n	8005476 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xea>
 80053c4:	edd7 7a00 	vldr	s15, [r7]
 80053c8:	eeb3 7a0a 	vmov.f32	s14, #58	; 0x41d00000  26.0
 80053cc:	eef4 7ac7 	vcmpe.f32	s15, s14
 80053d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80053d4:	d801      	bhi.n	80053da <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x4e>
 80053d6:	2302      	movs	r3, #2
 80053d8:	e04d      	b.n	8005476 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xea>
 80053da:	edd7 7a00 	vldr	s15, [r7]
 80053de:	ed9f 7a30 	vldr	s14, [pc, #192]	; 80054a0 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x114>
 80053e2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80053e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80053ea:	d801      	bhi.n	80053f0 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x64>
 80053ec:	2303      	movs	r3, #3
 80053ee:	e042      	b.n	8005476 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xea>
 80053f0:	edd7 7a00 	vldr	s15, [r7]
 80053f4:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 80054a4 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x118>
 80053f8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80053fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005400:	d801      	bhi.n	8005406 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x7a>
 8005402:	2304      	movs	r3, #4
 8005404:	e037      	b.n	8005476 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xea>
 8005406:	edd7 7a00 	vldr	s15, [r7]
 800540a:	ed9f 7a27 	vldr	s14, [pc, #156]	; 80054a8 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x11c>
 800540e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005412:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005416:	d801      	bhi.n	800541c <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x90>
 8005418:	2305      	movs	r3, #5
 800541a:	e02c      	b.n	8005476 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xea>
 800541c:	edd7 7a00 	vldr	s15, [r7]
 8005420:	ed9f 7a22 	vldr	s14, [pc, #136]	; 80054ac <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x120>
 8005424:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005428:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800542c:	d801      	bhi.n	8005432 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xa6>
 800542e:	2306      	movs	r3, #6
 8005430:	e021      	b.n	8005476 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xea>
 8005432:	edd7 7a00 	vldr	s15, [r7]
 8005436:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 80054b0 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x124>
 800543a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800543e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005442:	d801      	bhi.n	8005448 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xbc>
 8005444:	2307      	movs	r3, #7
 8005446:	e016      	b.n	8005476 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xea>
 8005448:	edd7 7a00 	vldr	s15, [r7]
 800544c:	ed9f 7a19 	vldr	s14, [pc, #100]	; 80054b4 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x128>
 8005450:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005454:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005458:	d801      	bhi.n	800545e <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xd2>
 800545a:	2308      	movs	r3, #8
 800545c:	e00b      	b.n	8005476 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xea>
 800545e:	edd7 7a00 	vldr	s15, [r7]
 8005462:	ed9f 7a15 	vldr	s14, [pc, #84]	; 80054b8 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x12c>
 8005466:	eef4 7ac7 	vcmpe.f32	s15, s14
 800546a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800546e:	d801      	bhi.n	8005474 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xe8>
 8005470:	2309      	movs	r3, #9
 8005472:	e000      	b.n	8005476 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xea>
 8005474:	230a      	movs	r3, #10
  new_odr = (Odr <=    1.6f) ? LSM6DSO_XL_ODR_1Hz6
 8005476:	73fb      	strb	r3, [r7, #15]
            : (Odr <= 1667.0f) ? LSM6DSO_XL_ODR_1667Hz
            : (Odr <= 3333.0f) ? LSM6DSO_XL_ODR_3333Hz
            :                    LSM6DSO_XL_ODR_6667Hz;

  /* Output data rate selection. */
  if (lsm6dso_xl_data_rate_set(&(pObj->Ctx), new_odr) != LSM6DSO_OK)
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	3320      	adds	r3, #32
 800547c:	7bfa      	ldrb	r2, [r7, #15]
 800547e:	4611      	mov	r1, r2
 8005480:	4618      	mov	r0, r3
 8005482:	f000 fa7d 	bl	8005980 <lsm6dso_xl_data_rate_set>
 8005486:	4603      	mov	r3, r0
 8005488:	2b00      	cmp	r3, #0
 800548a:	d002      	beq.n	8005492 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x106>
  {
    return LSM6DSO_ERROR;
 800548c:	f04f 33ff 	mov.w	r3, #4294967295
 8005490:	e000      	b.n	8005494 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x108>
  }

  return LSM6DSO_OK;
 8005492:	2300      	movs	r3, #0
}
 8005494:	4618      	mov	r0, r3
 8005496:	3710      	adds	r7, #16
 8005498:	46bd      	mov	sp, r7
 800549a:	bd80      	pop	{r7, pc}
 800549c:	3fcccccd 	.word	0x3fcccccd
 80054a0:	42500000 	.word	0x42500000
 80054a4:	42d00000 	.word	0x42d00000
 80054a8:	43500000 	.word	0x43500000
 80054ac:	43d08000 	.word	0x43d08000
 80054b0:	44504000 	.word	0x44504000
 80054b4:	44d06000 	.word	0x44d06000
 80054b8:	45505000 	.word	0x45505000

080054bc <LSM6DSO_ACC_SetOutputDataRate_When_Disabled>:
  * @param  pObj the device pObj
  * @param  Odr the functional output data rate to be set
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LSM6DSO_ACC_SetOutputDataRate_When_Disabled(LSM6DSO_Object_t *pObj, float_t Odr)
{
 80054bc:	b480      	push	{r7}
 80054be:	b083      	sub	sp, #12
 80054c0:	af00      	add	r7, sp, #0
 80054c2:	6078      	str	r0, [r7, #4]
 80054c4:	ed87 0a00 	vstr	s0, [r7]
  pObj->acc_odr = (Odr <=    1.6f) ? LSM6DSO_XL_ODR_1Hz6
                  : (Odr <=   12.5f) ? LSM6DSO_XL_ODR_12Hz5
 80054c8:	edd7 7a00 	vldr	s15, [r7]
 80054cc:	ed9f 7a3b 	vldr	s14, [pc, #236]	; 80055bc <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x100>
 80054d0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80054d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80054d8:	d801      	bhi.n	80054de <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x22>
 80054da:	230b      	movs	r3, #11
 80054dc:	e063      	b.n	80055a6 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xea>
 80054de:	edd7 7a00 	vldr	s15, [r7]
 80054e2:	eeb2 7a09 	vmov.f32	s14, #41	; 0x41480000  12.5
 80054e6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80054ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80054ee:	d801      	bhi.n	80054f4 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x38>
 80054f0:	2301      	movs	r3, #1
 80054f2:	e058      	b.n	80055a6 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xea>
 80054f4:	edd7 7a00 	vldr	s15, [r7]
 80054f8:	eeb3 7a0a 	vmov.f32	s14, #58	; 0x41d00000  26.0
 80054fc:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005500:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005504:	d801      	bhi.n	800550a <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x4e>
 8005506:	2302      	movs	r3, #2
 8005508:	e04d      	b.n	80055a6 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xea>
 800550a:	edd7 7a00 	vldr	s15, [r7]
 800550e:	ed9f 7a2c 	vldr	s14, [pc, #176]	; 80055c0 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x104>
 8005512:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005516:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800551a:	d801      	bhi.n	8005520 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x64>
 800551c:	2303      	movs	r3, #3
 800551e:	e042      	b.n	80055a6 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xea>
 8005520:	edd7 7a00 	vldr	s15, [r7]
 8005524:	ed9f 7a27 	vldr	s14, [pc, #156]	; 80055c4 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x108>
 8005528:	eef4 7ac7 	vcmpe.f32	s15, s14
 800552c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005530:	d801      	bhi.n	8005536 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x7a>
 8005532:	2304      	movs	r3, #4
 8005534:	e037      	b.n	80055a6 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xea>
 8005536:	edd7 7a00 	vldr	s15, [r7]
 800553a:	ed9f 7a23 	vldr	s14, [pc, #140]	; 80055c8 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x10c>
 800553e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005542:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005546:	d801      	bhi.n	800554c <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x90>
 8005548:	2305      	movs	r3, #5
 800554a:	e02c      	b.n	80055a6 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xea>
 800554c:	edd7 7a00 	vldr	s15, [r7]
 8005550:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 80055cc <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x110>
 8005554:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005558:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800555c:	d801      	bhi.n	8005562 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xa6>
 800555e:	2306      	movs	r3, #6
 8005560:	e021      	b.n	80055a6 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xea>
 8005562:	edd7 7a00 	vldr	s15, [r7]
 8005566:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 80055d0 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x114>
 800556a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800556e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005572:	d801      	bhi.n	8005578 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xbc>
 8005574:	2307      	movs	r3, #7
 8005576:	e016      	b.n	80055a6 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xea>
 8005578:	edd7 7a00 	vldr	s15, [r7]
 800557c:	ed9f 7a15 	vldr	s14, [pc, #84]	; 80055d4 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x118>
 8005580:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005584:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005588:	d801      	bhi.n	800558e <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xd2>
 800558a:	2308      	movs	r3, #8
 800558c:	e00b      	b.n	80055a6 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xea>
 800558e:	edd7 7a00 	vldr	s15, [r7]
 8005592:	ed9f 7a11 	vldr	s14, [pc, #68]	; 80055d8 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x11c>
 8005596:	eef4 7ac7 	vcmpe.f32	s15, s14
 800559a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800559e:	d801      	bhi.n	80055a4 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xe8>
 80055a0:	2309      	movs	r3, #9
 80055a2:	e000      	b.n	80055a6 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xea>
 80055a4:	230a      	movs	r3, #10
  pObj->acc_odr = (Odr <=    1.6f) ? LSM6DSO_XL_ODR_1Hz6
 80055a6:	687a      	ldr	r2, [r7, #4]
 80055a8:	f882 3033 	strb.w	r3, [r2, #51]	; 0x33
                  : (Odr <=  833.0f) ? LSM6DSO_XL_ODR_833Hz
                  : (Odr <= 1667.0f) ? LSM6DSO_XL_ODR_1667Hz
                  : (Odr <= 3333.0f) ? LSM6DSO_XL_ODR_3333Hz
                  :                    LSM6DSO_XL_ODR_6667Hz;

  return LSM6DSO_OK;
 80055ac:	2300      	movs	r3, #0
}
 80055ae:	4618      	mov	r0, r3
 80055b0:	370c      	adds	r7, #12
 80055b2:	46bd      	mov	sp, r7
 80055b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055b8:	4770      	bx	lr
 80055ba:	bf00      	nop
 80055bc:	3fcccccd 	.word	0x3fcccccd
 80055c0:	42500000 	.word	0x42500000
 80055c4:	42d00000 	.word	0x42d00000
 80055c8:	43500000 	.word	0x43500000
 80055cc:	43d08000 	.word	0x43d08000
 80055d0:	44504000 	.word	0x44504000
 80055d4:	44d06000 	.word	0x44d06000
 80055d8:	45505000 	.word	0x45505000

080055dc <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled>:
  * @param  pObj the device pObj
  * @param  Odr the functional output data rate to be set
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LSM6DSO_GYRO_SetOutputDataRate_When_Enabled(LSM6DSO_Object_t *pObj, float_t Odr)
{
 80055dc:	b580      	push	{r7, lr}
 80055de:	b084      	sub	sp, #16
 80055e0:	af00      	add	r7, sp, #0
 80055e2:	6078      	str	r0, [r7, #4]
 80055e4:	ed87 0a00 	vstr	s0, [r7]
  lsm6dso_odr_g_t new_odr;

  new_odr = (Odr <=   12.5f) ? LSM6DSO_GY_ODR_12Hz5
            : (Odr <=   26.0f) ? LSM6DSO_GY_ODR_26Hz
 80055e8:	edd7 7a00 	vldr	s15, [r7]
 80055ec:	eeb2 7a09 	vmov.f32	s14, #41	; 0x41480000  12.5
 80055f0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80055f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80055f8:	d801      	bhi.n	80055fe <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x22>
 80055fa:	2301      	movs	r3, #1
 80055fc:	e058      	b.n	80056b0 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 80055fe:	edd7 7a00 	vldr	s15, [r7]
 8005602:	eeb3 7a0a 	vmov.f32	s14, #58	; 0x41d00000  26.0
 8005606:	eef4 7ac7 	vcmpe.f32	s15, s14
 800560a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800560e:	d801      	bhi.n	8005614 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x38>
 8005610:	2302      	movs	r3, #2
 8005612:	e04d      	b.n	80056b0 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 8005614:	edd7 7a00 	vldr	s15, [r7]
 8005618:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 80056d8 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xfc>
 800561c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005620:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005624:	d801      	bhi.n	800562a <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x4e>
 8005626:	2303      	movs	r3, #3
 8005628:	e042      	b.n	80056b0 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 800562a:	edd7 7a00 	vldr	s15, [r7]
 800562e:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 80056dc <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x100>
 8005632:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005636:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800563a:	d801      	bhi.n	8005640 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x64>
 800563c:	2304      	movs	r3, #4
 800563e:	e037      	b.n	80056b0 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 8005640:	edd7 7a00 	vldr	s15, [r7]
 8005644:	ed9f 7a26 	vldr	s14, [pc, #152]	; 80056e0 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x104>
 8005648:	eef4 7ac7 	vcmpe.f32	s15, s14
 800564c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005650:	d801      	bhi.n	8005656 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x7a>
 8005652:	2305      	movs	r3, #5
 8005654:	e02c      	b.n	80056b0 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 8005656:	edd7 7a00 	vldr	s15, [r7]
 800565a:	ed9f 7a22 	vldr	s14, [pc, #136]	; 80056e4 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x108>
 800565e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005662:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005666:	d801      	bhi.n	800566c <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x90>
 8005668:	2306      	movs	r3, #6
 800566a:	e021      	b.n	80056b0 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 800566c:	edd7 7a00 	vldr	s15, [r7]
 8005670:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 80056e8 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x10c>
 8005674:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005678:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800567c:	d801      	bhi.n	8005682 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xa6>
 800567e:	2307      	movs	r3, #7
 8005680:	e016      	b.n	80056b0 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 8005682:	edd7 7a00 	vldr	s15, [r7]
 8005686:	ed9f 7a19 	vldr	s14, [pc, #100]	; 80056ec <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x110>
 800568a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800568e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005692:	d801      	bhi.n	8005698 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xbc>
 8005694:	2308      	movs	r3, #8
 8005696:	e00b      	b.n	80056b0 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 8005698:	edd7 7a00 	vldr	s15, [r7]
 800569c:	ed9f 7a14 	vldr	s14, [pc, #80]	; 80056f0 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x114>
 80056a0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80056a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80056a8:	d801      	bhi.n	80056ae <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xd2>
 80056aa:	2309      	movs	r3, #9
 80056ac:	e000      	b.n	80056b0 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 80056ae:	230a      	movs	r3, #10
  new_odr = (Odr <=   12.5f) ? LSM6DSO_GY_ODR_12Hz5
 80056b0:	73fb      	strb	r3, [r7, #15]
            : (Odr <= 1667.0f) ? LSM6DSO_GY_ODR_1667Hz
            : (Odr <= 3333.0f) ? LSM6DSO_GY_ODR_3333Hz
            :                    LSM6DSO_GY_ODR_6667Hz;

  /* Output data rate selection. */
  if (lsm6dso_gy_data_rate_set(&(pObj->Ctx), new_odr) != LSM6DSO_OK)
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	3320      	adds	r3, #32
 80056b6:	7bfa      	ldrb	r2, [r7, #15]
 80056b8:	4611      	mov	r1, r2
 80056ba:	4618      	mov	r0, r3
 80056bc:	f000 fb2c 	bl	8005d18 <lsm6dso_gy_data_rate_set>
 80056c0:	4603      	mov	r3, r0
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	d002      	beq.n	80056cc <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xf0>
  {
    return LSM6DSO_ERROR;
 80056c6:	f04f 33ff 	mov.w	r3, #4294967295
 80056ca:	e000      	b.n	80056ce <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xf2>
  }

  return LSM6DSO_OK;
 80056cc:	2300      	movs	r3, #0
}
 80056ce:	4618      	mov	r0, r3
 80056d0:	3710      	adds	r7, #16
 80056d2:	46bd      	mov	sp, r7
 80056d4:	bd80      	pop	{r7, pc}
 80056d6:	bf00      	nop
 80056d8:	42500000 	.word	0x42500000
 80056dc:	42d00000 	.word	0x42d00000
 80056e0:	43500000 	.word	0x43500000
 80056e4:	43d08000 	.word	0x43d08000
 80056e8:	44504000 	.word	0x44504000
 80056ec:	44d06000 	.word	0x44d06000
 80056f0:	45505000 	.word	0x45505000

080056f4 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled>:
  * @param  pObj the device pObj
  * @param  Odr the functional output data rate to be set
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LSM6DSO_GYRO_SetOutputDataRate_When_Disabled(LSM6DSO_Object_t *pObj, float_t Odr)
{
 80056f4:	b480      	push	{r7}
 80056f6:	b083      	sub	sp, #12
 80056f8:	af00      	add	r7, sp, #0
 80056fa:	6078      	str	r0, [r7, #4]
 80056fc:	ed87 0a00 	vstr	s0, [r7]
  pObj->gyro_odr = (Odr <=   12.5f) ? LSM6DSO_GY_ODR_12Hz5
                   : (Odr <=   26.0f) ? LSM6DSO_GY_ODR_26Hz
 8005700:	edd7 7a00 	vldr	s15, [r7]
 8005704:	eeb2 7a09 	vmov.f32	s14, #41	; 0x41480000  12.5
 8005708:	eef4 7ac7 	vcmpe.f32	s15, s14
 800570c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005710:	d801      	bhi.n	8005716 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0x22>
 8005712:	2301      	movs	r3, #1
 8005714:	e058      	b.n	80057c8 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 8005716:	edd7 7a00 	vldr	s15, [r7]
 800571a:	eeb3 7a0a 	vmov.f32	s14, #58	; 0x41d00000  26.0
 800571e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005722:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005726:	d801      	bhi.n	800572c <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0x38>
 8005728:	2302      	movs	r3, #2
 800572a:	e04d      	b.n	80057c8 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 800572c:	edd7 7a00 	vldr	s15, [r7]
 8005730:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 80057dc <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xe8>
 8005734:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005738:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800573c:	d801      	bhi.n	8005742 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0x4e>
 800573e:	2303      	movs	r3, #3
 8005740:	e042      	b.n	80057c8 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 8005742:	edd7 7a00 	vldr	s15, [r7]
 8005746:	ed9f 7a26 	vldr	s14, [pc, #152]	; 80057e0 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xec>
 800574a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800574e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005752:	d801      	bhi.n	8005758 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0x64>
 8005754:	2304      	movs	r3, #4
 8005756:	e037      	b.n	80057c8 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 8005758:	edd7 7a00 	vldr	s15, [r7]
 800575c:	ed9f 7a21 	vldr	s14, [pc, #132]	; 80057e4 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xf0>
 8005760:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005764:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005768:	d801      	bhi.n	800576e <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0x7a>
 800576a:	2305      	movs	r3, #5
 800576c:	e02c      	b.n	80057c8 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 800576e:	edd7 7a00 	vldr	s15, [r7]
 8005772:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 80057e8 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xf4>
 8005776:	eef4 7ac7 	vcmpe.f32	s15, s14
 800577a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800577e:	d801      	bhi.n	8005784 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0x90>
 8005780:	2306      	movs	r3, #6
 8005782:	e021      	b.n	80057c8 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 8005784:	edd7 7a00 	vldr	s15, [r7]
 8005788:	ed9f 7a18 	vldr	s14, [pc, #96]	; 80057ec <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xf8>
 800578c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005790:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005794:	d801      	bhi.n	800579a <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xa6>
 8005796:	2307      	movs	r3, #7
 8005798:	e016      	b.n	80057c8 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 800579a:	edd7 7a00 	vldr	s15, [r7]
 800579e:	ed9f 7a14 	vldr	s14, [pc, #80]	; 80057f0 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xfc>
 80057a2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80057a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80057aa:	d801      	bhi.n	80057b0 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xbc>
 80057ac:	2308      	movs	r3, #8
 80057ae:	e00b      	b.n	80057c8 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 80057b0:	edd7 7a00 	vldr	s15, [r7]
 80057b4:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 80057f4 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0x100>
 80057b8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80057bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80057c0:	d801      	bhi.n	80057c6 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xd2>
 80057c2:	2309      	movs	r3, #9
 80057c4:	e000      	b.n	80057c8 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 80057c6:	230a      	movs	r3, #10
  pObj->gyro_odr = (Odr <=   12.5f) ? LSM6DSO_GY_ODR_12Hz5
 80057c8:	687a      	ldr	r2, [r7, #4]
 80057ca:	f882 3034 	strb.w	r3, [r2, #52]	; 0x34
                   : (Odr <=  833.0f) ? LSM6DSO_GY_ODR_833Hz
                   : (Odr <= 1667.0f) ? LSM6DSO_GY_ODR_1667Hz
                   : (Odr <= 3333.0f) ? LSM6DSO_GY_ODR_3333Hz
                   :                    LSM6DSO_GY_ODR_6667Hz;

  return LSM6DSO_OK;
 80057ce:	2300      	movs	r3, #0
}
 80057d0:	4618      	mov	r0, r3
 80057d2:	370c      	adds	r7, #12
 80057d4:	46bd      	mov	sp, r7
 80057d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057da:	4770      	bx	lr
 80057dc:	42500000 	.word	0x42500000
 80057e0:	42d00000 	.word	0x42d00000
 80057e4:	43500000 	.word	0x43500000
 80057e8:	43d08000 	.word	0x43d08000
 80057ec:	44504000 	.word	0x44504000
 80057f0:	44d06000 	.word	0x44d06000
 80057f4:	45505000 	.word	0x45505000

080057f8 <ReadRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t ReadRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 80057f8:	b590      	push	{r4, r7, lr}
 80057fa:	b087      	sub	sp, #28
 80057fc:	af00      	add	r7, sp, #0
 80057fe:	60f8      	str	r0, [r7, #12]
 8005800:	607a      	str	r2, [r7, #4]
 8005802:	461a      	mov	r2, r3
 8005804:	460b      	mov	r3, r1
 8005806:	72fb      	strb	r3, [r7, #11]
 8005808:	4613      	mov	r3, r2
 800580a:	813b      	strh	r3, [r7, #8]
  LSM6DSO_Object_t *pObj = (LSM6DSO_Object_t *)Handle;
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	617b      	str	r3, [r7, #20]

  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 8005810:	697b      	ldr	r3, [r7, #20]
 8005812:	695c      	ldr	r4, [r3, #20]
 8005814:	697b      	ldr	r3, [r7, #20]
 8005816:	7b1b      	ldrb	r3, [r3, #12]
 8005818:	b298      	uxth	r0, r3
 800581a:	7afb      	ldrb	r3, [r7, #11]
 800581c:	b299      	uxth	r1, r3
 800581e:	893b      	ldrh	r3, [r7, #8]
 8005820:	687a      	ldr	r2, [r7, #4]
 8005822:	47a0      	blx	r4
 8005824:	4603      	mov	r3, r0
}
 8005826:	4618      	mov	r0, r3
 8005828:	371c      	adds	r7, #28
 800582a:	46bd      	mov	sp, r7
 800582c:	bd90      	pop	{r4, r7, pc}

0800582e <WriteRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t WriteRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 800582e:	b590      	push	{r4, r7, lr}
 8005830:	b087      	sub	sp, #28
 8005832:	af00      	add	r7, sp, #0
 8005834:	60f8      	str	r0, [r7, #12]
 8005836:	607a      	str	r2, [r7, #4]
 8005838:	461a      	mov	r2, r3
 800583a:	460b      	mov	r3, r1
 800583c:	72fb      	strb	r3, [r7, #11]
 800583e:	4613      	mov	r3, r2
 8005840:	813b      	strh	r3, [r7, #8]
  LSM6DSO_Object_t *pObj = (LSM6DSO_Object_t *)Handle;
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	617b      	str	r3, [r7, #20]

  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 8005846:	697b      	ldr	r3, [r7, #20]
 8005848:	691c      	ldr	r4, [r3, #16]
 800584a:	697b      	ldr	r3, [r7, #20]
 800584c:	7b1b      	ldrb	r3, [r3, #12]
 800584e:	b298      	uxth	r0, r3
 8005850:	7afb      	ldrb	r3, [r7, #11]
 8005852:	b299      	uxth	r1, r3
 8005854:	893b      	ldrh	r3, [r7, #8]
 8005856:	687a      	ldr	r2, [r7, #4]
 8005858:	47a0      	blx	r4
 800585a:	4603      	mov	r3, r0
}
 800585c:	4618      	mov	r0, r3
 800585e:	371c      	adds	r7, #28
 8005860:	46bd      	mov	sp, r7
 8005862:	bd90      	pop	{r4, r7, pc}

08005864 <lsm6dso_read_reg>:
  *
  */
int32_t __weak lsm6dso_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                                uint8_t *data,
                                uint16_t len)
{
 8005864:	b590      	push	{r4, r7, lr}
 8005866:	b087      	sub	sp, #28
 8005868:	af00      	add	r7, sp, #0
 800586a:	60f8      	str	r0, [r7, #12]
 800586c:	607a      	str	r2, [r7, #4]
 800586e:	461a      	mov	r2, r3
 8005870:	460b      	mov	r3, r1
 8005872:	72fb      	strb	r3, [r7, #11]
 8005874:	4613      	mov	r3, r2
 8005876:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	685c      	ldr	r4, [r3, #4]
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	68d8      	ldr	r0, [r3, #12]
 8005880:	893b      	ldrh	r3, [r7, #8]
 8005882:	7af9      	ldrb	r1, [r7, #11]
 8005884:	687a      	ldr	r2, [r7, #4]
 8005886:	47a0      	blx	r4
 8005888:	6178      	str	r0, [r7, #20]

  return ret;
 800588a:	697b      	ldr	r3, [r7, #20]
}
 800588c:	4618      	mov	r0, r3
 800588e:	371c      	adds	r7, #28
 8005890:	46bd      	mov	sp, r7
 8005892:	bd90      	pop	{r4, r7, pc}

08005894 <lsm6dso_write_reg>:
  *
  */
int32_t __weak lsm6dso_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                                 uint8_t *data,
                                 uint16_t len)
{
 8005894:	b590      	push	{r4, r7, lr}
 8005896:	b087      	sub	sp, #28
 8005898:	af00      	add	r7, sp, #0
 800589a:	60f8      	str	r0, [r7, #12]
 800589c:	607a      	str	r2, [r7, #4]
 800589e:	461a      	mov	r2, r3
 80058a0:	460b      	mov	r3, r1
 80058a2:	72fb      	strb	r3, [r7, #11]
 80058a4:	4613      	mov	r3, r2
 80058a6:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	681c      	ldr	r4, [r3, #0]
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	68d8      	ldr	r0, [r3, #12]
 80058b0:	893b      	ldrh	r3, [r7, #8]
 80058b2:	7af9      	ldrb	r1, [r7, #11]
 80058b4:	687a      	ldr	r2, [r7, #4]
 80058b6:	47a0      	blx	r4
 80058b8:	6178      	str	r0, [r7, #20]

  return ret;
 80058ba:	697b      	ldr	r3, [r7, #20]
}
 80058bc:	4618      	mov	r0, r3
 80058be:	371c      	adds	r7, #28
 80058c0:	46bd      	mov	sp, r7
 80058c2:	bd90      	pop	{r4, r7, pc}

080058c4 <lsm6dso_xl_full_scale_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_xl_full_scale_set(stmdev_ctx_t *ctx,
                                  lsm6dso_fs_xl_t val)
{
 80058c4:	b580      	push	{r7, lr}
 80058c6:	b084      	sub	sp, #16
 80058c8:	af00      	add	r7, sp, #0
 80058ca:	6078      	str	r0, [r7, #4]
 80058cc:	460b      	mov	r3, r1
 80058ce:	70fb      	strb	r3, [r7, #3]
  lsm6dso_ctrl1_xl_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL1_XL, (uint8_t *)&reg, 1);
 80058d0:	f107 0208 	add.w	r2, r7, #8
 80058d4:	2301      	movs	r3, #1
 80058d6:	2110      	movs	r1, #16
 80058d8:	6878      	ldr	r0, [r7, #4]
 80058da:	f7ff ffc3 	bl	8005864 <lsm6dso_read_reg>
 80058de:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	d10f      	bne.n	8005906 <lsm6dso_xl_full_scale_set+0x42>
  {
    reg.fs_xl = (uint8_t) val;
 80058e6:	78fb      	ldrb	r3, [r7, #3]
 80058e8:	f003 0303 	and.w	r3, r3, #3
 80058ec:	b2da      	uxtb	r2, r3
 80058ee:	7a3b      	ldrb	r3, [r7, #8]
 80058f0:	f362 0383 	bfi	r3, r2, #2, #2
 80058f4:	723b      	strb	r3, [r7, #8]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL1_XL, (uint8_t *)&reg, 1);
 80058f6:	f107 0208 	add.w	r2, r7, #8
 80058fa:	2301      	movs	r3, #1
 80058fc:	2110      	movs	r1, #16
 80058fe:	6878      	ldr	r0, [r7, #4]
 8005900:	f7ff ffc8 	bl	8005894 <lsm6dso_write_reg>
 8005904:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8005906:	68fb      	ldr	r3, [r7, #12]
}
 8005908:	4618      	mov	r0, r3
 800590a:	3710      	adds	r7, #16
 800590c:	46bd      	mov	sp, r7
 800590e:	bd80      	pop	{r7, pc}

08005910 <lsm6dso_xl_full_scale_get>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_xl_full_scale_get(stmdev_ctx_t *ctx,
                                  lsm6dso_fs_xl_t *val)
{
 8005910:	b580      	push	{r7, lr}
 8005912:	b084      	sub	sp, #16
 8005914:	af00      	add	r7, sp, #0
 8005916:	6078      	str	r0, [r7, #4]
 8005918:	6039      	str	r1, [r7, #0]
  lsm6dso_ctrl1_xl_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL1_XL, (uint8_t *)&reg, 1);
 800591a:	f107 0208 	add.w	r2, r7, #8
 800591e:	2301      	movs	r3, #1
 8005920:	2110      	movs	r1, #16
 8005922:	6878      	ldr	r0, [r7, #4]
 8005924:	f7ff ff9e 	bl	8005864 <lsm6dso_read_reg>
 8005928:	60f8      	str	r0, [r7, #12]

  switch (reg.fs_xl)
 800592a:	7a3b      	ldrb	r3, [r7, #8]
 800592c:	f3c3 0381 	ubfx	r3, r3, #2, #2
 8005930:	b2db      	uxtb	r3, r3
 8005932:	2b03      	cmp	r3, #3
 8005934:	d81a      	bhi.n	800596c <lsm6dso_xl_full_scale_get+0x5c>
 8005936:	a201      	add	r2, pc, #4	; (adr r2, 800593c <lsm6dso_xl_full_scale_get+0x2c>)
 8005938:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800593c:	0800594d 	.word	0x0800594d
 8005940:	08005955 	.word	0x08005955
 8005944:	0800595d 	.word	0x0800595d
 8005948:	08005965 	.word	0x08005965
  {
    case LSM6DSO_2g:
      *val = LSM6DSO_2g;
 800594c:	683b      	ldr	r3, [r7, #0]
 800594e:	2200      	movs	r2, #0
 8005950:	701a      	strb	r2, [r3, #0]
      break;
 8005952:	e00f      	b.n	8005974 <lsm6dso_xl_full_scale_get+0x64>

    case LSM6DSO_16g:
      *val = LSM6DSO_16g;
 8005954:	683b      	ldr	r3, [r7, #0]
 8005956:	2201      	movs	r2, #1
 8005958:	701a      	strb	r2, [r3, #0]
      break;
 800595a:	e00b      	b.n	8005974 <lsm6dso_xl_full_scale_get+0x64>

    case LSM6DSO_4g:
      *val = LSM6DSO_4g;
 800595c:	683b      	ldr	r3, [r7, #0]
 800595e:	2202      	movs	r2, #2
 8005960:	701a      	strb	r2, [r3, #0]
      break;
 8005962:	e007      	b.n	8005974 <lsm6dso_xl_full_scale_get+0x64>

    case LSM6DSO_8g:
      *val = LSM6DSO_8g;
 8005964:	683b      	ldr	r3, [r7, #0]
 8005966:	2203      	movs	r2, #3
 8005968:	701a      	strb	r2, [r3, #0]
      break;
 800596a:	e003      	b.n	8005974 <lsm6dso_xl_full_scale_get+0x64>

    default:
      *val = LSM6DSO_2g;
 800596c:	683b      	ldr	r3, [r7, #0]
 800596e:	2200      	movs	r2, #0
 8005970:	701a      	strb	r2, [r3, #0]
      break;
 8005972:	bf00      	nop
  }

  return ret;
 8005974:	68fb      	ldr	r3, [r7, #12]
}
 8005976:	4618      	mov	r0, r3
 8005978:	3710      	adds	r7, #16
 800597a:	46bd      	mov	sp, r7
 800597c:	bd80      	pop	{r7, pc}
 800597e:	bf00      	nop

08005980 <lsm6dso_xl_data_rate_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_xl_data_rate_set(stmdev_ctx_t *ctx,
                                 lsm6dso_odr_xl_t val)
{
 8005980:	b580      	push	{r7, lr}
 8005982:	b086      	sub	sp, #24
 8005984:	af00      	add	r7, sp, #0
 8005986:	6078      	str	r0, [r7, #4]
 8005988:	460b      	mov	r3, r1
 800598a:	70fb      	strb	r3, [r7, #3]
  lsm6dso_odr_xl_t odr_xl =  val;
 800598c:	78fb      	ldrb	r3, [r7, #3]
 800598e:	75fb      	strb	r3, [r7, #23]
  lsm6dso_fsm_odr_t fsm_odr;
  lsm6dso_ctrl1_xl_t reg;
  int32_t ret;

  /* Check the Finite State Machine data rate constraints */
  ret =  lsm6dso_fsm_enable_get(ctx, &fsm_enable);
 8005990:	f107 030c 	add.w	r3, r7, #12
 8005994:	4619      	mov	r1, r3
 8005996:	6878      	ldr	r0, [r7, #4]
 8005998:	f000 fca1 	bl	80062de <lsm6dso_fsm_enable_get>
 800599c:	6138      	str	r0, [r7, #16]

  if (ret == 0)
 800599e:	693b      	ldr	r3, [r7, #16]
 80059a0:	2b00      	cmp	r3, #0
 80059a2:	f040 80c4 	bne.w	8005b2e <lsm6dso_xl_data_rate_set+0x1ae>
  {
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
 80059a6:	7b3b      	ldrb	r3, [r7, #12]
 80059a8:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80059ac:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm2_en  |
 80059ae:	7b3b      	ldrb	r3, [r7, #12]
 80059b0:	f3c3 0340 	ubfx	r3, r3, #1, #1
 80059b4:	b2db      	uxtb	r3, r3
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
 80059b6:	4313      	orrs	r3, r2
 80059b8:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm3_en  |
 80059ba:	7b3b      	ldrb	r3, [r7, #12]
 80059bc:	f3c3 0380 	ubfx	r3, r3, #2, #1
 80059c0:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm2_en  |
 80059c2:	4313      	orrs	r3, r2
 80059c4:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm4_en  |
 80059c6:	7b3b      	ldrb	r3, [r7, #12]
 80059c8:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80059cc:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm3_en  |
 80059ce:	4313      	orrs	r3, r2
 80059d0:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm5_en  |
 80059d2:	7b3b      	ldrb	r3, [r7, #12]
 80059d4:	f3c3 1300 	ubfx	r3, r3, #4, #1
 80059d8:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm4_en  |
 80059da:	4313      	orrs	r3, r2
 80059dc:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm6_en  |
 80059de:	7b3b      	ldrb	r3, [r7, #12]
 80059e0:	f3c3 1340 	ubfx	r3, r3, #5, #1
 80059e4:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm5_en  |
 80059e6:	4313      	orrs	r3, r2
 80059e8:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm7_en  |
 80059ea:	7b3b      	ldrb	r3, [r7, #12]
 80059ec:	f3c3 1380 	ubfx	r3, r3, #6, #1
 80059f0:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm6_en  |
 80059f2:	4313      	orrs	r3, r2
 80059f4:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm8_en  |
 80059f6:	7b3b      	ldrb	r3, [r7, #12]
 80059f8:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 80059fc:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm7_en  |
 80059fe:	4313      	orrs	r3, r2
 8005a00:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm9_en  |
 8005a02:	7b7b      	ldrb	r3, [r7, #13]
 8005a04:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8005a08:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm8_en  |
 8005a0a:	4313      	orrs	r3, r2
 8005a0c:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm10_en |
 8005a0e:	7b7b      	ldrb	r3, [r7, #13]
 8005a10:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8005a14:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm9_en  |
 8005a16:	4313      	orrs	r3, r2
 8005a18:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm11_en |
 8005a1a:	7b7b      	ldrb	r3, [r7, #13]
 8005a1c:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8005a20:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm10_en |
 8005a22:	4313      	orrs	r3, r2
 8005a24:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm12_en |
 8005a26:	7b7b      	ldrb	r3, [r7, #13]
 8005a28:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8005a2c:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm11_en |
 8005a2e:	4313      	orrs	r3, r2
 8005a30:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm13_en |
 8005a32:	7b7b      	ldrb	r3, [r7, #13]
 8005a34:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8005a38:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm12_en |
 8005a3a:	4313      	orrs	r3, r2
 8005a3c:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm14_en |
 8005a3e:	7b7b      	ldrb	r3, [r7, #13]
 8005a40:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8005a44:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm13_en |
 8005a46:	4313      	orrs	r3, r2
 8005a48:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm15_en |
 8005a4a:	7b7b      	ldrb	r3, [r7, #13]
 8005a4c:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8005a50:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm14_en |
 8005a52:	4313      	orrs	r3, r2
 8005a54:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm16_en) == PROPERTY_ENABLE)
 8005a56:	7b7b      	ldrb	r3, [r7, #13]
 8005a58:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8005a5c:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm15_en |
 8005a5e:	4313      	orrs	r3, r2
 8005a60:	b2db      	uxtb	r3, r3
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
 8005a62:	2b01      	cmp	r3, #1
 8005a64:	d163      	bne.n	8005b2e <lsm6dso_xl_data_rate_set+0x1ae>
    {
      ret =  lsm6dso_fsm_data_rate_get(ctx, &fsm_odr);
 8005a66:	f107 030b 	add.w	r3, r7, #11
 8005a6a:	4619      	mov	r1, r3
 8005a6c:	6878      	ldr	r0, [r7, #4]
 8005a6e:	f000 fc57 	bl	8006320 <lsm6dso_fsm_data_rate_get>
 8005a72:	6138      	str	r0, [r7, #16]

      if (ret == 0)
 8005a74:	693b      	ldr	r3, [r7, #16]
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	d159      	bne.n	8005b2e <lsm6dso_xl_data_rate_set+0x1ae>
      {
        switch (fsm_odr)
 8005a7a:	7afb      	ldrb	r3, [r7, #11]
 8005a7c:	2b03      	cmp	r3, #3
 8005a7e:	d853      	bhi.n	8005b28 <lsm6dso_xl_data_rate_set+0x1a8>
 8005a80:	a201      	add	r2, pc, #4	; (adr r2, 8005a88 <lsm6dso_xl_data_rate_set+0x108>)
 8005a82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a86:	bf00      	nop
 8005a88:	08005a99 	.word	0x08005a99
 8005a8c:	08005aab 	.word	0x08005aab
 8005a90:	08005ac9 	.word	0x08005ac9
 8005a94:	08005af3 	.word	0x08005af3
        {
          case LSM6DSO_ODR_FSM_12Hz5:
            if (val == LSM6DSO_XL_ODR_OFF)
 8005a98:	78fb      	ldrb	r3, [r7, #3]
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	d102      	bne.n	8005aa4 <lsm6dso_xl_data_rate_set+0x124>
            {
              odr_xl = LSM6DSO_XL_ODR_12Hz5;
 8005a9e:	2301      	movs	r3, #1
 8005aa0:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_xl = val;
            }

            break;
 8005aa2:	e045      	b.n	8005b30 <lsm6dso_xl_data_rate_set+0x1b0>
              odr_xl = val;
 8005aa4:	78fb      	ldrb	r3, [r7, #3]
 8005aa6:	75fb      	strb	r3, [r7, #23]
            break;
 8005aa8:	e042      	b.n	8005b30 <lsm6dso_xl_data_rate_set+0x1b0>

          case LSM6DSO_ODR_FSM_26Hz:
            if (val == LSM6DSO_XL_ODR_OFF)
 8005aaa:	78fb      	ldrb	r3, [r7, #3]
 8005aac:	2b00      	cmp	r3, #0
 8005aae:	d102      	bne.n	8005ab6 <lsm6dso_xl_data_rate_set+0x136>
            {
              odr_xl = LSM6DSO_XL_ODR_26Hz;
 8005ab0:	2302      	movs	r3, #2
 8005ab2:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_xl = val;
            }

            break;
 8005ab4:	e03c      	b.n	8005b30 <lsm6dso_xl_data_rate_set+0x1b0>
            else if (val == LSM6DSO_XL_ODR_12Hz5)
 8005ab6:	78fb      	ldrb	r3, [r7, #3]
 8005ab8:	2b01      	cmp	r3, #1
 8005aba:	d102      	bne.n	8005ac2 <lsm6dso_xl_data_rate_set+0x142>
              odr_xl = LSM6DSO_XL_ODR_26Hz;
 8005abc:	2302      	movs	r3, #2
 8005abe:	75fb      	strb	r3, [r7, #23]
            break;
 8005ac0:	e036      	b.n	8005b30 <lsm6dso_xl_data_rate_set+0x1b0>
              odr_xl = val;
 8005ac2:	78fb      	ldrb	r3, [r7, #3]
 8005ac4:	75fb      	strb	r3, [r7, #23]
            break;
 8005ac6:	e033      	b.n	8005b30 <lsm6dso_xl_data_rate_set+0x1b0>

          case LSM6DSO_ODR_FSM_52Hz:
            if (val == LSM6DSO_XL_ODR_OFF)
 8005ac8:	78fb      	ldrb	r3, [r7, #3]
 8005aca:	2b00      	cmp	r3, #0
 8005acc:	d102      	bne.n	8005ad4 <lsm6dso_xl_data_rate_set+0x154>
            {
              odr_xl = LSM6DSO_XL_ODR_52Hz;
 8005ace:	2303      	movs	r3, #3
 8005ad0:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_xl = val;
            }

            break;
 8005ad2:	e02d      	b.n	8005b30 <lsm6dso_xl_data_rate_set+0x1b0>
            else if (val == LSM6DSO_XL_ODR_12Hz5)
 8005ad4:	78fb      	ldrb	r3, [r7, #3]
 8005ad6:	2b01      	cmp	r3, #1
 8005ad8:	d102      	bne.n	8005ae0 <lsm6dso_xl_data_rate_set+0x160>
              odr_xl = LSM6DSO_XL_ODR_52Hz;
 8005ada:	2303      	movs	r3, #3
 8005adc:	75fb      	strb	r3, [r7, #23]
            break;
 8005ade:	e027      	b.n	8005b30 <lsm6dso_xl_data_rate_set+0x1b0>
            else if (val == LSM6DSO_XL_ODR_26Hz)
 8005ae0:	78fb      	ldrb	r3, [r7, #3]
 8005ae2:	2b02      	cmp	r3, #2
 8005ae4:	d102      	bne.n	8005aec <lsm6dso_xl_data_rate_set+0x16c>
              odr_xl = LSM6DSO_XL_ODR_52Hz;
 8005ae6:	2303      	movs	r3, #3
 8005ae8:	75fb      	strb	r3, [r7, #23]
            break;
 8005aea:	e021      	b.n	8005b30 <lsm6dso_xl_data_rate_set+0x1b0>
              odr_xl = val;
 8005aec:	78fb      	ldrb	r3, [r7, #3]
 8005aee:	75fb      	strb	r3, [r7, #23]
            break;
 8005af0:	e01e      	b.n	8005b30 <lsm6dso_xl_data_rate_set+0x1b0>

          case LSM6DSO_ODR_FSM_104Hz:
            if (val == LSM6DSO_XL_ODR_OFF)
 8005af2:	78fb      	ldrb	r3, [r7, #3]
 8005af4:	2b00      	cmp	r3, #0
 8005af6:	d102      	bne.n	8005afe <lsm6dso_xl_data_rate_set+0x17e>
            {
              odr_xl = LSM6DSO_XL_ODR_104Hz;
 8005af8:	2304      	movs	r3, #4
 8005afa:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_xl = val;
            }

            break;
 8005afc:	e018      	b.n	8005b30 <lsm6dso_xl_data_rate_set+0x1b0>
            else if (val == LSM6DSO_XL_ODR_12Hz5)
 8005afe:	78fb      	ldrb	r3, [r7, #3]
 8005b00:	2b01      	cmp	r3, #1
 8005b02:	d102      	bne.n	8005b0a <lsm6dso_xl_data_rate_set+0x18a>
              odr_xl = LSM6DSO_XL_ODR_104Hz;
 8005b04:	2304      	movs	r3, #4
 8005b06:	75fb      	strb	r3, [r7, #23]
            break;
 8005b08:	e012      	b.n	8005b30 <lsm6dso_xl_data_rate_set+0x1b0>
            else if (val == LSM6DSO_XL_ODR_26Hz)
 8005b0a:	78fb      	ldrb	r3, [r7, #3]
 8005b0c:	2b02      	cmp	r3, #2
 8005b0e:	d102      	bne.n	8005b16 <lsm6dso_xl_data_rate_set+0x196>
              odr_xl = LSM6DSO_XL_ODR_104Hz;
 8005b10:	2304      	movs	r3, #4
 8005b12:	75fb      	strb	r3, [r7, #23]
            break;
 8005b14:	e00c      	b.n	8005b30 <lsm6dso_xl_data_rate_set+0x1b0>
            else if (val == LSM6DSO_XL_ODR_52Hz)
 8005b16:	78fb      	ldrb	r3, [r7, #3]
 8005b18:	2b03      	cmp	r3, #3
 8005b1a:	d102      	bne.n	8005b22 <lsm6dso_xl_data_rate_set+0x1a2>
              odr_xl = LSM6DSO_XL_ODR_104Hz;
 8005b1c:	2304      	movs	r3, #4
 8005b1e:	75fb      	strb	r3, [r7, #23]
            break;
 8005b20:	e006      	b.n	8005b30 <lsm6dso_xl_data_rate_set+0x1b0>
              odr_xl = val;
 8005b22:	78fb      	ldrb	r3, [r7, #3]
 8005b24:	75fb      	strb	r3, [r7, #23]
            break;
 8005b26:	e003      	b.n	8005b30 <lsm6dso_xl_data_rate_set+0x1b0>

          default:
            odr_xl = val;
 8005b28:	78fb      	ldrb	r3, [r7, #3]
 8005b2a:	75fb      	strb	r3, [r7, #23]
            break;
 8005b2c:	e000      	b.n	8005b30 <lsm6dso_xl_data_rate_set+0x1b0>
        }
      }
 8005b2e:	bf00      	nop
    }
  }

  if (ret == 0)
 8005b30:	693b      	ldr	r3, [r7, #16]
 8005b32:	2b00      	cmp	r3, #0
 8005b34:	d107      	bne.n	8005b46 <lsm6dso_xl_data_rate_set+0x1c6>
  {
    ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL1_XL, (uint8_t *)&reg, 1);
 8005b36:	f107 0208 	add.w	r2, r7, #8
 8005b3a:	2301      	movs	r3, #1
 8005b3c:	2110      	movs	r1, #16
 8005b3e:	6878      	ldr	r0, [r7, #4]
 8005b40:	f7ff fe90 	bl	8005864 <lsm6dso_read_reg>
 8005b44:	6138      	str	r0, [r7, #16]
  }

  if (ret == 0)
 8005b46:	693b      	ldr	r3, [r7, #16]
 8005b48:	2b00      	cmp	r3, #0
 8005b4a:	d10f      	bne.n	8005b6c <lsm6dso_xl_data_rate_set+0x1ec>
  {
    reg.odr_xl = (uint8_t) odr_xl;
 8005b4c:	7dfb      	ldrb	r3, [r7, #23]
 8005b4e:	f003 030f 	and.w	r3, r3, #15
 8005b52:	b2da      	uxtb	r2, r3
 8005b54:	7a3b      	ldrb	r3, [r7, #8]
 8005b56:	f362 1307 	bfi	r3, r2, #4, #4
 8005b5a:	723b      	strb	r3, [r7, #8]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL1_XL, (uint8_t *)&reg, 1);
 8005b5c:	f107 0208 	add.w	r2, r7, #8
 8005b60:	2301      	movs	r3, #1
 8005b62:	2110      	movs	r1, #16
 8005b64:	6878      	ldr	r0, [r7, #4]
 8005b66:	f7ff fe95 	bl	8005894 <lsm6dso_write_reg>
 8005b6a:	6138      	str	r0, [r7, #16]
  }

  return ret;
 8005b6c:	693b      	ldr	r3, [r7, #16]
}
 8005b6e:	4618      	mov	r0, r3
 8005b70:	3718      	adds	r7, #24
 8005b72:	46bd      	mov	sp, r7
 8005b74:	bd80      	pop	{r7, pc}
 8005b76:	bf00      	nop

08005b78 <lsm6dso_xl_data_rate_get>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_xl_data_rate_get(stmdev_ctx_t *ctx,
                                 lsm6dso_odr_xl_t *val)
{
 8005b78:	b580      	push	{r7, lr}
 8005b7a:	b084      	sub	sp, #16
 8005b7c:	af00      	add	r7, sp, #0
 8005b7e:	6078      	str	r0, [r7, #4]
 8005b80:	6039      	str	r1, [r7, #0]
  lsm6dso_ctrl1_xl_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL1_XL, (uint8_t *)&reg, 1);
 8005b82:	f107 0208 	add.w	r2, r7, #8
 8005b86:	2301      	movs	r3, #1
 8005b88:	2110      	movs	r1, #16
 8005b8a:	6878      	ldr	r0, [r7, #4]
 8005b8c:	f7ff fe6a 	bl	8005864 <lsm6dso_read_reg>
 8005b90:	60f8      	str	r0, [r7, #12]

  switch (reg.odr_xl)
 8005b92:	7a3b      	ldrb	r3, [r7, #8]
 8005b94:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8005b98:	b2db      	uxtb	r3, r3
 8005b9a:	2b0b      	cmp	r3, #11
 8005b9c:	d84a      	bhi.n	8005c34 <lsm6dso_xl_data_rate_get+0xbc>
 8005b9e:	a201      	add	r2, pc, #4	; (adr r2, 8005ba4 <lsm6dso_xl_data_rate_get+0x2c>)
 8005ba0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ba4:	08005bd5 	.word	0x08005bd5
 8005ba8:	08005bdd 	.word	0x08005bdd
 8005bac:	08005be5 	.word	0x08005be5
 8005bb0:	08005bed 	.word	0x08005bed
 8005bb4:	08005bf5 	.word	0x08005bf5
 8005bb8:	08005bfd 	.word	0x08005bfd
 8005bbc:	08005c05 	.word	0x08005c05
 8005bc0:	08005c0d 	.word	0x08005c0d
 8005bc4:	08005c15 	.word	0x08005c15
 8005bc8:	08005c1d 	.word	0x08005c1d
 8005bcc:	08005c25 	.word	0x08005c25
 8005bd0:	08005c2d 	.word	0x08005c2d
  {
    case LSM6DSO_XL_ODR_OFF:
      *val = LSM6DSO_XL_ODR_OFF;
 8005bd4:	683b      	ldr	r3, [r7, #0]
 8005bd6:	2200      	movs	r2, #0
 8005bd8:	701a      	strb	r2, [r3, #0]
      break;
 8005bda:	e02f      	b.n	8005c3c <lsm6dso_xl_data_rate_get+0xc4>

    case LSM6DSO_XL_ODR_12Hz5:
      *val = LSM6DSO_XL_ODR_12Hz5;
 8005bdc:	683b      	ldr	r3, [r7, #0]
 8005bde:	2201      	movs	r2, #1
 8005be0:	701a      	strb	r2, [r3, #0]
      break;
 8005be2:	e02b      	b.n	8005c3c <lsm6dso_xl_data_rate_get+0xc4>

    case LSM6DSO_XL_ODR_26Hz:
      *val = LSM6DSO_XL_ODR_26Hz;
 8005be4:	683b      	ldr	r3, [r7, #0]
 8005be6:	2202      	movs	r2, #2
 8005be8:	701a      	strb	r2, [r3, #0]
      break;
 8005bea:	e027      	b.n	8005c3c <lsm6dso_xl_data_rate_get+0xc4>

    case LSM6DSO_XL_ODR_52Hz:
      *val = LSM6DSO_XL_ODR_52Hz;
 8005bec:	683b      	ldr	r3, [r7, #0]
 8005bee:	2203      	movs	r2, #3
 8005bf0:	701a      	strb	r2, [r3, #0]
      break;
 8005bf2:	e023      	b.n	8005c3c <lsm6dso_xl_data_rate_get+0xc4>

    case LSM6DSO_XL_ODR_104Hz:
      *val = LSM6DSO_XL_ODR_104Hz;
 8005bf4:	683b      	ldr	r3, [r7, #0]
 8005bf6:	2204      	movs	r2, #4
 8005bf8:	701a      	strb	r2, [r3, #0]
      break;
 8005bfa:	e01f      	b.n	8005c3c <lsm6dso_xl_data_rate_get+0xc4>

    case LSM6DSO_XL_ODR_208Hz:
      *val = LSM6DSO_XL_ODR_208Hz;
 8005bfc:	683b      	ldr	r3, [r7, #0]
 8005bfe:	2205      	movs	r2, #5
 8005c00:	701a      	strb	r2, [r3, #0]
      break;
 8005c02:	e01b      	b.n	8005c3c <lsm6dso_xl_data_rate_get+0xc4>

    case LSM6DSO_XL_ODR_417Hz:
      *val = LSM6DSO_XL_ODR_417Hz;
 8005c04:	683b      	ldr	r3, [r7, #0]
 8005c06:	2206      	movs	r2, #6
 8005c08:	701a      	strb	r2, [r3, #0]
      break;
 8005c0a:	e017      	b.n	8005c3c <lsm6dso_xl_data_rate_get+0xc4>

    case LSM6DSO_XL_ODR_833Hz:
      *val = LSM6DSO_XL_ODR_833Hz;
 8005c0c:	683b      	ldr	r3, [r7, #0]
 8005c0e:	2207      	movs	r2, #7
 8005c10:	701a      	strb	r2, [r3, #0]
      break;
 8005c12:	e013      	b.n	8005c3c <lsm6dso_xl_data_rate_get+0xc4>

    case LSM6DSO_XL_ODR_1667Hz:
      *val = LSM6DSO_XL_ODR_1667Hz;
 8005c14:	683b      	ldr	r3, [r7, #0]
 8005c16:	2208      	movs	r2, #8
 8005c18:	701a      	strb	r2, [r3, #0]
      break;
 8005c1a:	e00f      	b.n	8005c3c <lsm6dso_xl_data_rate_get+0xc4>

    case LSM6DSO_XL_ODR_3333Hz:
      *val = LSM6DSO_XL_ODR_3333Hz;
 8005c1c:	683b      	ldr	r3, [r7, #0]
 8005c1e:	2209      	movs	r2, #9
 8005c20:	701a      	strb	r2, [r3, #0]
      break;
 8005c22:	e00b      	b.n	8005c3c <lsm6dso_xl_data_rate_get+0xc4>

    case LSM6DSO_XL_ODR_6667Hz:
      *val = LSM6DSO_XL_ODR_6667Hz;
 8005c24:	683b      	ldr	r3, [r7, #0]
 8005c26:	220a      	movs	r2, #10
 8005c28:	701a      	strb	r2, [r3, #0]
      break;
 8005c2a:	e007      	b.n	8005c3c <lsm6dso_xl_data_rate_get+0xc4>

    case LSM6DSO_XL_ODR_1Hz6:
      *val = LSM6DSO_XL_ODR_1Hz6;
 8005c2c:	683b      	ldr	r3, [r7, #0]
 8005c2e:	220b      	movs	r2, #11
 8005c30:	701a      	strb	r2, [r3, #0]
      break;
 8005c32:	e003      	b.n	8005c3c <lsm6dso_xl_data_rate_get+0xc4>

    default:
      *val = LSM6DSO_XL_ODR_OFF;
 8005c34:	683b      	ldr	r3, [r7, #0]
 8005c36:	2200      	movs	r2, #0
 8005c38:	701a      	strb	r2, [r3, #0]
      break;
 8005c3a:	bf00      	nop
  }

  return ret;
 8005c3c:	68fb      	ldr	r3, [r7, #12]
}
 8005c3e:	4618      	mov	r0, r3
 8005c40:	3710      	adds	r7, #16
 8005c42:	46bd      	mov	sp, r7
 8005c44:	bd80      	pop	{r7, pc}
 8005c46:	bf00      	nop

08005c48 <lsm6dso_gy_full_scale_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_gy_full_scale_set(stmdev_ctx_t *ctx,
                                  lsm6dso_fs_g_t val)
{
 8005c48:	b580      	push	{r7, lr}
 8005c4a:	b084      	sub	sp, #16
 8005c4c:	af00      	add	r7, sp, #0
 8005c4e:	6078      	str	r0, [r7, #4]
 8005c50:	460b      	mov	r3, r1
 8005c52:	70fb      	strb	r3, [r7, #3]
  lsm6dso_ctrl2_g_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL2_G, (uint8_t *)&reg, 1);
 8005c54:	f107 0208 	add.w	r2, r7, #8
 8005c58:	2301      	movs	r3, #1
 8005c5a:	2111      	movs	r1, #17
 8005c5c:	6878      	ldr	r0, [r7, #4]
 8005c5e:	f7ff fe01 	bl	8005864 <lsm6dso_read_reg>
 8005c62:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	d10f      	bne.n	8005c8a <lsm6dso_gy_full_scale_set+0x42>
  {
    reg.fs_g = (uint8_t) val;
 8005c6a:	78fb      	ldrb	r3, [r7, #3]
 8005c6c:	f003 0307 	and.w	r3, r3, #7
 8005c70:	b2da      	uxtb	r2, r3
 8005c72:	7a3b      	ldrb	r3, [r7, #8]
 8005c74:	f362 0343 	bfi	r3, r2, #1, #3
 8005c78:	723b      	strb	r3, [r7, #8]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL2_G, (uint8_t *)&reg, 1);
 8005c7a:	f107 0208 	add.w	r2, r7, #8
 8005c7e:	2301      	movs	r3, #1
 8005c80:	2111      	movs	r1, #17
 8005c82:	6878      	ldr	r0, [r7, #4]
 8005c84:	f7ff fe06 	bl	8005894 <lsm6dso_write_reg>
 8005c88:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8005c8a:	68fb      	ldr	r3, [r7, #12]
}
 8005c8c:	4618      	mov	r0, r3
 8005c8e:	3710      	adds	r7, #16
 8005c90:	46bd      	mov	sp, r7
 8005c92:	bd80      	pop	{r7, pc}

08005c94 <lsm6dso_gy_full_scale_get>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_gy_full_scale_get(stmdev_ctx_t *ctx,
                                  lsm6dso_fs_g_t *val)
{
 8005c94:	b580      	push	{r7, lr}
 8005c96:	b084      	sub	sp, #16
 8005c98:	af00      	add	r7, sp, #0
 8005c9a:	6078      	str	r0, [r7, #4]
 8005c9c:	6039      	str	r1, [r7, #0]
  lsm6dso_ctrl2_g_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL2_G, (uint8_t *)&reg, 1);
 8005c9e:	f107 0208 	add.w	r2, r7, #8
 8005ca2:	2301      	movs	r3, #1
 8005ca4:	2111      	movs	r1, #17
 8005ca6:	6878      	ldr	r0, [r7, #4]
 8005ca8:	f7ff fddc 	bl	8005864 <lsm6dso_read_reg>
 8005cac:	60f8      	str	r0, [r7, #12]

  switch (reg.fs_g)
 8005cae:	7a3b      	ldrb	r3, [r7, #8]
 8005cb0:	f3c3 0342 	ubfx	r3, r3, #1, #3
 8005cb4:	b2db      	uxtb	r3, r3
 8005cb6:	2b06      	cmp	r3, #6
 8005cb8:	d824      	bhi.n	8005d04 <lsm6dso_gy_full_scale_get+0x70>
 8005cba:	a201      	add	r2, pc, #4	; (adr r2, 8005cc0 <lsm6dso_gy_full_scale_get+0x2c>)
 8005cbc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005cc0:	08005cdd 	.word	0x08005cdd
 8005cc4:	08005ce5 	.word	0x08005ce5
 8005cc8:	08005ced 	.word	0x08005ced
 8005ccc:	08005d05 	.word	0x08005d05
 8005cd0:	08005cf5 	.word	0x08005cf5
 8005cd4:	08005d05 	.word	0x08005d05
 8005cd8:	08005cfd 	.word	0x08005cfd
  {
    case LSM6DSO_250dps:
      *val = LSM6DSO_250dps;
 8005cdc:	683b      	ldr	r3, [r7, #0]
 8005cde:	2200      	movs	r2, #0
 8005ce0:	701a      	strb	r2, [r3, #0]
      break;
 8005ce2:	e013      	b.n	8005d0c <lsm6dso_gy_full_scale_get+0x78>

    case LSM6DSO_125dps:
      *val = LSM6DSO_125dps;
 8005ce4:	683b      	ldr	r3, [r7, #0]
 8005ce6:	2201      	movs	r2, #1
 8005ce8:	701a      	strb	r2, [r3, #0]
      break;
 8005cea:	e00f      	b.n	8005d0c <lsm6dso_gy_full_scale_get+0x78>

    case LSM6DSO_500dps:
      *val = LSM6DSO_500dps;
 8005cec:	683b      	ldr	r3, [r7, #0]
 8005cee:	2202      	movs	r2, #2
 8005cf0:	701a      	strb	r2, [r3, #0]
      break;
 8005cf2:	e00b      	b.n	8005d0c <lsm6dso_gy_full_scale_get+0x78>

    case LSM6DSO_1000dps:
      *val = LSM6DSO_1000dps;
 8005cf4:	683b      	ldr	r3, [r7, #0]
 8005cf6:	2204      	movs	r2, #4
 8005cf8:	701a      	strb	r2, [r3, #0]
      break;
 8005cfa:	e007      	b.n	8005d0c <lsm6dso_gy_full_scale_get+0x78>

    case LSM6DSO_2000dps:
      *val = LSM6DSO_2000dps;
 8005cfc:	683b      	ldr	r3, [r7, #0]
 8005cfe:	2206      	movs	r2, #6
 8005d00:	701a      	strb	r2, [r3, #0]
      break;
 8005d02:	e003      	b.n	8005d0c <lsm6dso_gy_full_scale_get+0x78>

    default:
      *val = LSM6DSO_250dps;
 8005d04:	683b      	ldr	r3, [r7, #0]
 8005d06:	2200      	movs	r2, #0
 8005d08:	701a      	strb	r2, [r3, #0]
      break;
 8005d0a:	bf00      	nop
  }

  return ret;
 8005d0c:	68fb      	ldr	r3, [r7, #12]
}
 8005d0e:	4618      	mov	r0, r3
 8005d10:	3710      	adds	r7, #16
 8005d12:	46bd      	mov	sp, r7
 8005d14:	bd80      	pop	{r7, pc}
 8005d16:	bf00      	nop

08005d18 <lsm6dso_gy_data_rate_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_gy_data_rate_set(stmdev_ctx_t *ctx,
                                 lsm6dso_odr_g_t val)
{
 8005d18:	b580      	push	{r7, lr}
 8005d1a:	b086      	sub	sp, #24
 8005d1c:	af00      	add	r7, sp, #0
 8005d1e:	6078      	str	r0, [r7, #4]
 8005d20:	460b      	mov	r3, r1
 8005d22:	70fb      	strb	r3, [r7, #3]
  lsm6dso_odr_g_t odr_gy =  val;
 8005d24:	78fb      	ldrb	r3, [r7, #3]
 8005d26:	75fb      	strb	r3, [r7, #23]
  lsm6dso_fsm_odr_t fsm_odr;
  lsm6dso_ctrl2_g_t reg;
  int32_t ret;

  /* Check the Finite State Machine data rate constraints */
  ret =  lsm6dso_fsm_enable_get(ctx, &fsm_enable);
 8005d28:	f107 030c 	add.w	r3, r7, #12
 8005d2c:	4619      	mov	r1, r3
 8005d2e:	6878      	ldr	r0, [r7, #4]
 8005d30:	f000 fad5 	bl	80062de <lsm6dso_fsm_enable_get>
 8005d34:	6138      	str	r0, [r7, #16]

  if (ret == 0)
 8005d36:	693b      	ldr	r3, [r7, #16]
 8005d38:	2b00      	cmp	r3, #0
 8005d3a:	f040 80c4 	bne.w	8005ec6 <lsm6dso_gy_data_rate_set+0x1ae>
  {
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
 8005d3e:	7b3b      	ldrb	r3, [r7, #12]
 8005d40:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8005d44:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm2_en  |
 8005d46:	7b3b      	ldrb	r3, [r7, #12]
 8005d48:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8005d4c:	b2db      	uxtb	r3, r3
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
 8005d4e:	4313      	orrs	r3, r2
 8005d50:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm3_en  |
 8005d52:	7b3b      	ldrb	r3, [r7, #12]
 8005d54:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8005d58:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm2_en  |
 8005d5a:	4313      	orrs	r3, r2
 8005d5c:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm4_en  |
 8005d5e:	7b3b      	ldrb	r3, [r7, #12]
 8005d60:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8005d64:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm3_en  |
 8005d66:	4313      	orrs	r3, r2
 8005d68:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm5_en  |
 8005d6a:	7b3b      	ldrb	r3, [r7, #12]
 8005d6c:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8005d70:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm4_en  |
 8005d72:	4313      	orrs	r3, r2
 8005d74:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm6_en  |
 8005d76:	7b3b      	ldrb	r3, [r7, #12]
 8005d78:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8005d7c:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm5_en  |
 8005d7e:	4313      	orrs	r3, r2
 8005d80:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm7_en  |
 8005d82:	7b3b      	ldrb	r3, [r7, #12]
 8005d84:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8005d88:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm6_en  |
 8005d8a:	4313      	orrs	r3, r2
 8005d8c:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm8_en  |
 8005d8e:	7b3b      	ldrb	r3, [r7, #12]
 8005d90:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8005d94:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm7_en  |
 8005d96:	4313      	orrs	r3, r2
 8005d98:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm9_en  |
 8005d9a:	7b7b      	ldrb	r3, [r7, #13]
 8005d9c:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8005da0:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm8_en  |
 8005da2:	4313      	orrs	r3, r2
 8005da4:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm10_en |
 8005da6:	7b7b      	ldrb	r3, [r7, #13]
 8005da8:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8005dac:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm9_en  |
 8005dae:	4313      	orrs	r3, r2
 8005db0:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm11_en |
 8005db2:	7b7b      	ldrb	r3, [r7, #13]
 8005db4:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8005db8:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm10_en |
 8005dba:	4313      	orrs	r3, r2
 8005dbc:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm12_en |
 8005dbe:	7b7b      	ldrb	r3, [r7, #13]
 8005dc0:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8005dc4:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm11_en |
 8005dc6:	4313      	orrs	r3, r2
 8005dc8:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm13_en |
 8005dca:	7b7b      	ldrb	r3, [r7, #13]
 8005dcc:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8005dd0:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm12_en |
 8005dd2:	4313      	orrs	r3, r2
 8005dd4:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm14_en |
 8005dd6:	7b7b      	ldrb	r3, [r7, #13]
 8005dd8:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8005ddc:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm13_en |
 8005dde:	4313      	orrs	r3, r2
 8005de0:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm15_en |
 8005de2:	7b7b      	ldrb	r3, [r7, #13]
 8005de4:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8005de8:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm14_en |
 8005dea:	4313      	orrs	r3, r2
 8005dec:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm16_en) == PROPERTY_ENABLE)
 8005dee:	7b7b      	ldrb	r3, [r7, #13]
 8005df0:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8005df4:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm15_en |
 8005df6:	4313      	orrs	r3, r2
 8005df8:	b2db      	uxtb	r3, r3
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
 8005dfa:	2b01      	cmp	r3, #1
 8005dfc:	d163      	bne.n	8005ec6 <lsm6dso_gy_data_rate_set+0x1ae>
    {
      ret =  lsm6dso_fsm_data_rate_get(ctx, &fsm_odr);
 8005dfe:	f107 030b 	add.w	r3, r7, #11
 8005e02:	4619      	mov	r1, r3
 8005e04:	6878      	ldr	r0, [r7, #4]
 8005e06:	f000 fa8b 	bl	8006320 <lsm6dso_fsm_data_rate_get>
 8005e0a:	6138      	str	r0, [r7, #16]

      if (ret == 0)
 8005e0c:	693b      	ldr	r3, [r7, #16]
 8005e0e:	2b00      	cmp	r3, #0
 8005e10:	d159      	bne.n	8005ec6 <lsm6dso_gy_data_rate_set+0x1ae>
      {
        switch (fsm_odr)
 8005e12:	7afb      	ldrb	r3, [r7, #11]
 8005e14:	2b03      	cmp	r3, #3
 8005e16:	d853      	bhi.n	8005ec0 <lsm6dso_gy_data_rate_set+0x1a8>
 8005e18:	a201      	add	r2, pc, #4	; (adr r2, 8005e20 <lsm6dso_gy_data_rate_set+0x108>)
 8005e1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e1e:	bf00      	nop
 8005e20:	08005e31 	.word	0x08005e31
 8005e24:	08005e43 	.word	0x08005e43
 8005e28:	08005e61 	.word	0x08005e61
 8005e2c:	08005e8b 	.word	0x08005e8b
        {
          case LSM6DSO_ODR_FSM_12Hz5:
            if (val == LSM6DSO_GY_ODR_OFF)
 8005e30:	78fb      	ldrb	r3, [r7, #3]
 8005e32:	2b00      	cmp	r3, #0
 8005e34:	d102      	bne.n	8005e3c <lsm6dso_gy_data_rate_set+0x124>
            {
              odr_gy = LSM6DSO_GY_ODR_12Hz5;
 8005e36:	2301      	movs	r3, #1
 8005e38:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_gy = val;
            }

            break;
 8005e3a:	e045      	b.n	8005ec8 <lsm6dso_gy_data_rate_set+0x1b0>
              odr_gy = val;
 8005e3c:	78fb      	ldrb	r3, [r7, #3]
 8005e3e:	75fb      	strb	r3, [r7, #23]
            break;
 8005e40:	e042      	b.n	8005ec8 <lsm6dso_gy_data_rate_set+0x1b0>

          case LSM6DSO_ODR_FSM_26Hz:
            if (val == LSM6DSO_GY_ODR_OFF)
 8005e42:	78fb      	ldrb	r3, [r7, #3]
 8005e44:	2b00      	cmp	r3, #0
 8005e46:	d102      	bne.n	8005e4e <lsm6dso_gy_data_rate_set+0x136>
            {
              odr_gy = LSM6DSO_GY_ODR_26Hz;
 8005e48:	2302      	movs	r3, #2
 8005e4a:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_gy = val;
            }

            break;
 8005e4c:	e03c      	b.n	8005ec8 <lsm6dso_gy_data_rate_set+0x1b0>
            else if (val == LSM6DSO_GY_ODR_12Hz5)
 8005e4e:	78fb      	ldrb	r3, [r7, #3]
 8005e50:	2b01      	cmp	r3, #1
 8005e52:	d102      	bne.n	8005e5a <lsm6dso_gy_data_rate_set+0x142>
              odr_gy = LSM6DSO_GY_ODR_26Hz;
 8005e54:	2302      	movs	r3, #2
 8005e56:	75fb      	strb	r3, [r7, #23]
            break;
 8005e58:	e036      	b.n	8005ec8 <lsm6dso_gy_data_rate_set+0x1b0>
              odr_gy = val;
 8005e5a:	78fb      	ldrb	r3, [r7, #3]
 8005e5c:	75fb      	strb	r3, [r7, #23]
            break;
 8005e5e:	e033      	b.n	8005ec8 <lsm6dso_gy_data_rate_set+0x1b0>

          case LSM6DSO_ODR_FSM_52Hz:
            if (val == LSM6DSO_GY_ODR_OFF)
 8005e60:	78fb      	ldrb	r3, [r7, #3]
 8005e62:	2b00      	cmp	r3, #0
 8005e64:	d102      	bne.n	8005e6c <lsm6dso_gy_data_rate_set+0x154>
            {
              odr_gy = LSM6DSO_GY_ODR_52Hz;
 8005e66:	2303      	movs	r3, #3
 8005e68:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_gy = val;
            }

            break;
 8005e6a:	e02d      	b.n	8005ec8 <lsm6dso_gy_data_rate_set+0x1b0>
            else if (val == LSM6DSO_GY_ODR_12Hz5)
 8005e6c:	78fb      	ldrb	r3, [r7, #3]
 8005e6e:	2b01      	cmp	r3, #1
 8005e70:	d102      	bne.n	8005e78 <lsm6dso_gy_data_rate_set+0x160>
              odr_gy = LSM6DSO_GY_ODR_52Hz;
 8005e72:	2303      	movs	r3, #3
 8005e74:	75fb      	strb	r3, [r7, #23]
            break;
 8005e76:	e027      	b.n	8005ec8 <lsm6dso_gy_data_rate_set+0x1b0>
            else if (val == LSM6DSO_GY_ODR_26Hz)
 8005e78:	78fb      	ldrb	r3, [r7, #3]
 8005e7a:	2b02      	cmp	r3, #2
 8005e7c:	d102      	bne.n	8005e84 <lsm6dso_gy_data_rate_set+0x16c>
              odr_gy = LSM6DSO_GY_ODR_52Hz;
 8005e7e:	2303      	movs	r3, #3
 8005e80:	75fb      	strb	r3, [r7, #23]
            break;
 8005e82:	e021      	b.n	8005ec8 <lsm6dso_gy_data_rate_set+0x1b0>
              odr_gy = val;
 8005e84:	78fb      	ldrb	r3, [r7, #3]
 8005e86:	75fb      	strb	r3, [r7, #23]
            break;
 8005e88:	e01e      	b.n	8005ec8 <lsm6dso_gy_data_rate_set+0x1b0>

          case LSM6DSO_ODR_FSM_104Hz:
            if (val == LSM6DSO_GY_ODR_OFF)
 8005e8a:	78fb      	ldrb	r3, [r7, #3]
 8005e8c:	2b00      	cmp	r3, #0
 8005e8e:	d102      	bne.n	8005e96 <lsm6dso_gy_data_rate_set+0x17e>
            {
              odr_gy = LSM6DSO_GY_ODR_104Hz;
 8005e90:	2304      	movs	r3, #4
 8005e92:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_gy = val;
            }

            break;
 8005e94:	e018      	b.n	8005ec8 <lsm6dso_gy_data_rate_set+0x1b0>
            else if (val == LSM6DSO_GY_ODR_12Hz5)
 8005e96:	78fb      	ldrb	r3, [r7, #3]
 8005e98:	2b01      	cmp	r3, #1
 8005e9a:	d102      	bne.n	8005ea2 <lsm6dso_gy_data_rate_set+0x18a>
              odr_gy = LSM6DSO_GY_ODR_104Hz;
 8005e9c:	2304      	movs	r3, #4
 8005e9e:	75fb      	strb	r3, [r7, #23]
            break;
 8005ea0:	e012      	b.n	8005ec8 <lsm6dso_gy_data_rate_set+0x1b0>
            else if (val == LSM6DSO_GY_ODR_26Hz)
 8005ea2:	78fb      	ldrb	r3, [r7, #3]
 8005ea4:	2b02      	cmp	r3, #2
 8005ea6:	d102      	bne.n	8005eae <lsm6dso_gy_data_rate_set+0x196>
              odr_gy = LSM6DSO_GY_ODR_104Hz;
 8005ea8:	2304      	movs	r3, #4
 8005eaa:	75fb      	strb	r3, [r7, #23]
            break;
 8005eac:	e00c      	b.n	8005ec8 <lsm6dso_gy_data_rate_set+0x1b0>
            else if (val == LSM6DSO_GY_ODR_52Hz)
 8005eae:	78fb      	ldrb	r3, [r7, #3]
 8005eb0:	2b03      	cmp	r3, #3
 8005eb2:	d102      	bne.n	8005eba <lsm6dso_gy_data_rate_set+0x1a2>
              odr_gy = LSM6DSO_GY_ODR_104Hz;
 8005eb4:	2304      	movs	r3, #4
 8005eb6:	75fb      	strb	r3, [r7, #23]
            break;
 8005eb8:	e006      	b.n	8005ec8 <lsm6dso_gy_data_rate_set+0x1b0>
              odr_gy = val;
 8005eba:	78fb      	ldrb	r3, [r7, #3]
 8005ebc:	75fb      	strb	r3, [r7, #23]
            break;
 8005ebe:	e003      	b.n	8005ec8 <lsm6dso_gy_data_rate_set+0x1b0>

          default:
            odr_gy = val;
 8005ec0:	78fb      	ldrb	r3, [r7, #3]
 8005ec2:	75fb      	strb	r3, [r7, #23]
            break;
 8005ec4:	e000      	b.n	8005ec8 <lsm6dso_gy_data_rate_set+0x1b0>
        }
      }
 8005ec6:	bf00      	nop
    }
  }

  if (ret == 0)
 8005ec8:	693b      	ldr	r3, [r7, #16]
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	d107      	bne.n	8005ede <lsm6dso_gy_data_rate_set+0x1c6>
  {
    ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL2_G, (uint8_t *)&reg, 1);
 8005ece:	f107 0208 	add.w	r2, r7, #8
 8005ed2:	2301      	movs	r3, #1
 8005ed4:	2111      	movs	r1, #17
 8005ed6:	6878      	ldr	r0, [r7, #4]
 8005ed8:	f7ff fcc4 	bl	8005864 <lsm6dso_read_reg>
 8005edc:	6138      	str	r0, [r7, #16]
  }

  if (ret == 0)
 8005ede:	693b      	ldr	r3, [r7, #16]
 8005ee0:	2b00      	cmp	r3, #0
 8005ee2:	d10f      	bne.n	8005f04 <lsm6dso_gy_data_rate_set+0x1ec>
  {
    reg.odr_g = (uint8_t) odr_gy;
 8005ee4:	7dfb      	ldrb	r3, [r7, #23]
 8005ee6:	f003 030f 	and.w	r3, r3, #15
 8005eea:	b2da      	uxtb	r2, r3
 8005eec:	7a3b      	ldrb	r3, [r7, #8]
 8005eee:	f362 1307 	bfi	r3, r2, #4, #4
 8005ef2:	723b      	strb	r3, [r7, #8]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL2_G, (uint8_t *)&reg, 1);
 8005ef4:	f107 0208 	add.w	r2, r7, #8
 8005ef8:	2301      	movs	r3, #1
 8005efa:	2111      	movs	r1, #17
 8005efc:	6878      	ldr	r0, [r7, #4]
 8005efe:	f7ff fcc9 	bl	8005894 <lsm6dso_write_reg>
 8005f02:	6138      	str	r0, [r7, #16]
  }

  return ret;
 8005f04:	693b      	ldr	r3, [r7, #16]
}
 8005f06:	4618      	mov	r0, r3
 8005f08:	3718      	adds	r7, #24
 8005f0a:	46bd      	mov	sp, r7
 8005f0c:	bd80      	pop	{r7, pc}
 8005f0e:	bf00      	nop

08005f10 <lsm6dso_gy_data_rate_get>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_gy_data_rate_get(stmdev_ctx_t *ctx,
                                 lsm6dso_odr_g_t *val)
{
 8005f10:	b580      	push	{r7, lr}
 8005f12:	b084      	sub	sp, #16
 8005f14:	af00      	add	r7, sp, #0
 8005f16:	6078      	str	r0, [r7, #4]
 8005f18:	6039      	str	r1, [r7, #0]
  lsm6dso_ctrl2_g_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL2_G, (uint8_t *)&reg, 1);
 8005f1a:	f107 0208 	add.w	r2, r7, #8
 8005f1e:	2301      	movs	r3, #1
 8005f20:	2111      	movs	r1, #17
 8005f22:	6878      	ldr	r0, [r7, #4]
 8005f24:	f7ff fc9e 	bl	8005864 <lsm6dso_read_reg>
 8005f28:	60f8      	str	r0, [r7, #12]

  switch (reg.odr_g)
 8005f2a:	7a3b      	ldrb	r3, [r7, #8]
 8005f2c:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8005f30:	b2db      	uxtb	r3, r3
 8005f32:	2b0a      	cmp	r3, #10
 8005f34:	d844      	bhi.n	8005fc0 <lsm6dso_gy_data_rate_get+0xb0>
 8005f36:	a201      	add	r2, pc, #4	; (adr r2, 8005f3c <lsm6dso_gy_data_rate_get+0x2c>)
 8005f38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f3c:	08005f69 	.word	0x08005f69
 8005f40:	08005f71 	.word	0x08005f71
 8005f44:	08005f79 	.word	0x08005f79
 8005f48:	08005f81 	.word	0x08005f81
 8005f4c:	08005f89 	.word	0x08005f89
 8005f50:	08005f91 	.word	0x08005f91
 8005f54:	08005f99 	.word	0x08005f99
 8005f58:	08005fa1 	.word	0x08005fa1
 8005f5c:	08005fa9 	.word	0x08005fa9
 8005f60:	08005fb1 	.word	0x08005fb1
 8005f64:	08005fb9 	.word	0x08005fb9
  {
    case LSM6DSO_GY_ODR_OFF:
      *val = LSM6DSO_GY_ODR_OFF;
 8005f68:	683b      	ldr	r3, [r7, #0]
 8005f6a:	2200      	movs	r2, #0
 8005f6c:	701a      	strb	r2, [r3, #0]
      break;
 8005f6e:	e02b      	b.n	8005fc8 <lsm6dso_gy_data_rate_get+0xb8>

    case LSM6DSO_GY_ODR_12Hz5:
      *val = LSM6DSO_GY_ODR_12Hz5;
 8005f70:	683b      	ldr	r3, [r7, #0]
 8005f72:	2201      	movs	r2, #1
 8005f74:	701a      	strb	r2, [r3, #0]
      break;
 8005f76:	e027      	b.n	8005fc8 <lsm6dso_gy_data_rate_get+0xb8>

    case LSM6DSO_GY_ODR_26Hz:
      *val = LSM6DSO_GY_ODR_26Hz;
 8005f78:	683b      	ldr	r3, [r7, #0]
 8005f7a:	2202      	movs	r2, #2
 8005f7c:	701a      	strb	r2, [r3, #0]
      break;
 8005f7e:	e023      	b.n	8005fc8 <lsm6dso_gy_data_rate_get+0xb8>

    case LSM6DSO_GY_ODR_52Hz:
      *val = LSM6DSO_GY_ODR_52Hz;
 8005f80:	683b      	ldr	r3, [r7, #0]
 8005f82:	2203      	movs	r2, #3
 8005f84:	701a      	strb	r2, [r3, #0]
      break;
 8005f86:	e01f      	b.n	8005fc8 <lsm6dso_gy_data_rate_get+0xb8>

    case LSM6DSO_GY_ODR_104Hz:
      *val = LSM6DSO_GY_ODR_104Hz;
 8005f88:	683b      	ldr	r3, [r7, #0]
 8005f8a:	2204      	movs	r2, #4
 8005f8c:	701a      	strb	r2, [r3, #0]
      break;
 8005f8e:	e01b      	b.n	8005fc8 <lsm6dso_gy_data_rate_get+0xb8>

    case LSM6DSO_GY_ODR_208Hz:
      *val = LSM6DSO_GY_ODR_208Hz;
 8005f90:	683b      	ldr	r3, [r7, #0]
 8005f92:	2205      	movs	r2, #5
 8005f94:	701a      	strb	r2, [r3, #0]
      break;
 8005f96:	e017      	b.n	8005fc8 <lsm6dso_gy_data_rate_get+0xb8>

    case LSM6DSO_GY_ODR_417Hz:
      *val = LSM6DSO_GY_ODR_417Hz;
 8005f98:	683b      	ldr	r3, [r7, #0]
 8005f9a:	2206      	movs	r2, #6
 8005f9c:	701a      	strb	r2, [r3, #0]
      break;
 8005f9e:	e013      	b.n	8005fc8 <lsm6dso_gy_data_rate_get+0xb8>

    case LSM6DSO_GY_ODR_833Hz:
      *val = LSM6DSO_GY_ODR_833Hz;
 8005fa0:	683b      	ldr	r3, [r7, #0]
 8005fa2:	2207      	movs	r2, #7
 8005fa4:	701a      	strb	r2, [r3, #0]
      break;
 8005fa6:	e00f      	b.n	8005fc8 <lsm6dso_gy_data_rate_get+0xb8>

    case LSM6DSO_GY_ODR_1667Hz:
      *val = LSM6DSO_GY_ODR_1667Hz;
 8005fa8:	683b      	ldr	r3, [r7, #0]
 8005faa:	2208      	movs	r2, #8
 8005fac:	701a      	strb	r2, [r3, #0]
      break;
 8005fae:	e00b      	b.n	8005fc8 <lsm6dso_gy_data_rate_get+0xb8>

    case LSM6DSO_GY_ODR_3333Hz:
      *val = LSM6DSO_GY_ODR_3333Hz;
 8005fb0:	683b      	ldr	r3, [r7, #0]
 8005fb2:	2209      	movs	r2, #9
 8005fb4:	701a      	strb	r2, [r3, #0]
      break;
 8005fb6:	e007      	b.n	8005fc8 <lsm6dso_gy_data_rate_get+0xb8>

    case LSM6DSO_GY_ODR_6667Hz:
      *val = LSM6DSO_GY_ODR_6667Hz;
 8005fb8:	683b      	ldr	r3, [r7, #0]
 8005fba:	220a      	movs	r2, #10
 8005fbc:	701a      	strb	r2, [r3, #0]
      break;
 8005fbe:	e003      	b.n	8005fc8 <lsm6dso_gy_data_rate_get+0xb8>

    default:
      *val = LSM6DSO_GY_ODR_OFF;
 8005fc0:	683b      	ldr	r3, [r7, #0]
 8005fc2:	2200      	movs	r2, #0
 8005fc4:	701a      	strb	r2, [r3, #0]
      break;
 8005fc6:	bf00      	nop
  }

  return ret;
 8005fc8:	68fb      	ldr	r3, [r7, #12]
}
 8005fca:	4618      	mov	r0, r3
 8005fcc:	3710      	adds	r7, #16
 8005fce:	46bd      	mov	sp, r7
 8005fd0:	bd80      	pop	{r7, pc}
 8005fd2:	bf00      	nop

08005fd4 <lsm6dso_block_data_update_set>:
  * @param  val      change the values of bdu in reg CTRL3_C
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8005fd4:	b580      	push	{r7, lr}
 8005fd6:	b084      	sub	sp, #16
 8005fd8:	af00      	add	r7, sp, #0
 8005fda:	6078      	str	r0, [r7, #4]
 8005fdc:	460b      	mov	r3, r1
 8005fde:	70fb      	strb	r3, [r7, #3]
  lsm6dso_ctrl3_c_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL3_C, (uint8_t *)&reg, 1);
 8005fe0:	f107 0208 	add.w	r2, r7, #8
 8005fe4:	2301      	movs	r3, #1
 8005fe6:	2112      	movs	r1, #18
 8005fe8:	6878      	ldr	r0, [r7, #4]
 8005fea:	f7ff fc3b 	bl	8005864 <lsm6dso_read_reg>
 8005fee:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	2b00      	cmp	r3, #0
 8005ff4:	d10f      	bne.n	8006016 <lsm6dso_block_data_update_set+0x42>
  {
    reg.bdu = val;
 8005ff6:	78fb      	ldrb	r3, [r7, #3]
 8005ff8:	f003 0301 	and.w	r3, r3, #1
 8005ffc:	b2da      	uxtb	r2, r3
 8005ffe:	7a3b      	ldrb	r3, [r7, #8]
 8006000:	f362 1386 	bfi	r3, r2, #6, #1
 8006004:	723b      	strb	r3, [r7, #8]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL3_C, (uint8_t *)&reg, 1);
 8006006:	f107 0208 	add.w	r2, r7, #8
 800600a:	2301      	movs	r3, #1
 800600c:	2112      	movs	r1, #18
 800600e:	6878      	ldr	r0, [r7, #4]
 8006010:	f7ff fc40 	bl	8005894 <lsm6dso_write_reg>
 8006014:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8006016:	68fb      	ldr	r3, [r7, #12]
}
 8006018:	4618      	mov	r0, r3
 800601a:	3710      	adds	r7, #16
 800601c:	46bd      	mov	sp, r7
 800601e:	bd80      	pop	{r7, pc}

08006020 <lsm6dso_angular_rate_raw_get>:
  * @param  buff     buffer that stores data read
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_angular_rate_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 8006020:	b580      	push	{r7, lr}
 8006022:	b086      	sub	sp, #24
 8006024:	af00      	add	r7, sp, #0
 8006026:	6078      	str	r0, [r7, #4]
 8006028:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_OUTX_L_G, buff, 6);
 800602a:	f107 020c 	add.w	r2, r7, #12
 800602e:	2306      	movs	r3, #6
 8006030:	2122      	movs	r1, #34	; 0x22
 8006032:	6878      	ldr	r0, [r7, #4]
 8006034:	f7ff fc16 	bl	8005864 <lsm6dso_read_reg>
 8006038:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 800603a:	7b7b      	ldrb	r3, [r7, #13]
 800603c:	b21a      	sxth	r2, r3
 800603e:	683b      	ldr	r3, [r7, #0]
 8006040:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 8006042:	683b      	ldr	r3, [r7, #0]
 8006044:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006048:	b29b      	uxth	r3, r3
 800604a:	021b      	lsls	r3, r3, #8
 800604c:	b29a      	uxth	r2, r3
 800604e:	7b3b      	ldrb	r3, [r7, #12]
 8006050:	b29b      	uxth	r3, r3
 8006052:	4413      	add	r3, r2
 8006054:	b29b      	uxth	r3, r3
 8006056:	b21a      	sxth	r2, r3
 8006058:	683b      	ldr	r3, [r7, #0]
 800605a:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 800605c:	7bfa      	ldrb	r2, [r7, #15]
 800605e:	683b      	ldr	r3, [r7, #0]
 8006060:	3302      	adds	r3, #2
 8006062:	b212      	sxth	r2, r2
 8006064:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 8006066:	683b      	ldr	r3, [r7, #0]
 8006068:	3302      	adds	r3, #2
 800606a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800606e:	b29b      	uxth	r3, r3
 8006070:	021b      	lsls	r3, r3, #8
 8006072:	b29a      	uxth	r2, r3
 8006074:	7bbb      	ldrb	r3, [r7, #14]
 8006076:	b29b      	uxth	r3, r3
 8006078:	4413      	add	r3, r2
 800607a:	b29a      	uxth	r2, r3
 800607c:	683b      	ldr	r3, [r7, #0]
 800607e:	3302      	adds	r3, #2
 8006080:	b212      	sxth	r2, r2
 8006082:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 8006084:	7c7a      	ldrb	r2, [r7, #17]
 8006086:	683b      	ldr	r3, [r7, #0]
 8006088:	3304      	adds	r3, #4
 800608a:	b212      	sxth	r2, r2
 800608c:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 800608e:	683b      	ldr	r3, [r7, #0]
 8006090:	3304      	adds	r3, #4
 8006092:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006096:	b29b      	uxth	r3, r3
 8006098:	021b      	lsls	r3, r3, #8
 800609a:	b29a      	uxth	r2, r3
 800609c:	7c3b      	ldrb	r3, [r7, #16]
 800609e:	b29b      	uxth	r3, r3
 80060a0:	4413      	add	r3, r2
 80060a2:	b29a      	uxth	r2, r3
 80060a4:	683b      	ldr	r3, [r7, #0]
 80060a6:	3304      	adds	r3, #4
 80060a8:	b212      	sxth	r2, r2
 80060aa:	801a      	strh	r2, [r3, #0]

  return ret;
 80060ac:	697b      	ldr	r3, [r7, #20]
}
 80060ae:	4618      	mov	r0, r3
 80060b0:	3718      	adds	r7, #24
 80060b2:	46bd      	mov	sp, r7
 80060b4:	bd80      	pop	{r7, pc}

080060b6 <lsm6dso_acceleration_raw_get>:
  * @param  buff     buffer that stores data read
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_acceleration_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 80060b6:	b580      	push	{r7, lr}
 80060b8:	b086      	sub	sp, #24
 80060ba:	af00      	add	r7, sp, #0
 80060bc:	6078      	str	r0, [r7, #4]
 80060be:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_OUTX_L_A, buff, 6);
 80060c0:	f107 020c 	add.w	r2, r7, #12
 80060c4:	2306      	movs	r3, #6
 80060c6:	2128      	movs	r1, #40	; 0x28
 80060c8:	6878      	ldr	r0, [r7, #4]
 80060ca:	f7ff fbcb 	bl	8005864 <lsm6dso_read_reg>
 80060ce:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 80060d0:	7b7b      	ldrb	r3, [r7, #13]
 80060d2:	b21a      	sxth	r2, r3
 80060d4:	683b      	ldr	r3, [r7, #0]
 80060d6:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 80060d8:	683b      	ldr	r3, [r7, #0]
 80060da:	f9b3 3000 	ldrsh.w	r3, [r3]
 80060de:	b29b      	uxth	r3, r3
 80060e0:	021b      	lsls	r3, r3, #8
 80060e2:	b29a      	uxth	r2, r3
 80060e4:	7b3b      	ldrb	r3, [r7, #12]
 80060e6:	b29b      	uxth	r3, r3
 80060e8:	4413      	add	r3, r2
 80060ea:	b29b      	uxth	r3, r3
 80060ec:	b21a      	sxth	r2, r3
 80060ee:	683b      	ldr	r3, [r7, #0]
 80060f0:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 80060f2:	7bfa      	ldrb	r2, [r7, #15]
 80060f4:	683b      	ldr	r3, [r7, #0]
 80060f6:	3302      	adds	r3, #2
 80060f8:	b212      	sxth	r2, r2
 80060fa:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 80060fc:	683b      	ldr	r3, [r7, #0]
 80060fe:	3302      	adds	r3, #2
 8006100:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006104:	b29b      	uxth	r3, r3
 8006106:	021b      	lsls	r3, r3, #8
 8006108:	b29a      	uxth	r2, r3
 800610a:	7bbb      	ldrb	r3, [r7, #14]
 800610c:	b29b      	uxth	r3, r3
 800610e:	4413      	add	r3, r2
 8006110:	b29a      	uxth	r2, r3
 8006112:	683b      	ldr	r3, [r7, #0]
 8006114:	3302      	adds	r3, #2
 8006116:	b212      	sxth	r2, r2
 8006118:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 800611a:	7c7a      	ldrb	r2, [r7, #17]
 800611c:	683b      	ldr	r3, [r7, #0]
 800611e:	3304      	adds	r3, #4
 8006120:	b212      	sxth	r2, r2
 8006122:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 8006124:	683b      	ldr	r3, [r7, #0]
 8006126:	3304      	adds	r3, #4
 8006128:	f9b3 3000 	ldrsh.w	r3, [r3]
 800612c:	b29b      	uxth	r3, r3
 800612e:	021b      	lsls	r3, r3, #8
 8006130:	b29a      	uxth	r2, r3
 8006132:	7c3b      	ldrb	r3, [r7, #16]
 8006134:	b29b      	uxth	r3, r3
 8006136:	4413      	add	r3, r2
 8006138:	b29a      	uxth	r2, r3
 800613a:	683b      	ldr	r3, [r7, #0]
 800613c:	3304      	adds	r3, #4
 800613e:	b212      	sxth	r2, r2
 8006140:	801a      	strh	r2, [r3, #0]

  return ret;
 8006142:	697b      	ldr	r3, [r7, #20]
}
 8006144:	4618      	mov	r0, r3
 8006146:	3718      	adds	r7, #24
 8006148:	46bd      	mov	sp, r7
 800614a:	bd80      	pop	{r7, pc}

0800614c <lsm6dso_mem_bank_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_mem_bank_set(stmdev_ctx_t *ctx,
                             lsm6dso_reg_access_t val)
{
 800614c:	b580      	push	{r7, lr}
 800614e:	b084      	sub	sp, #16
 8006150:	af00      	add	r7, sp, #0
 8006152:	6078      	str	r0, [r7, #4]
 8006154:	460b      	mov	r3, r1
 8006156:	70fb      	strb	r3, [r7, #3]
  lsm6dso_func_cfg_access_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_FUNC_CFG_ACCESS, (uint8_t *)&reg, 1);
 8006158:	f107 0208 	add.w	r2, r7, #8
 800615c:	2301      	movs	r3, #1
 800615e:	2101      	movs	r1, #1
 8006160:	6878      	ldr	r0, [r7, #4]
 8006162:	f7ff fb7f 	bl	8005864 <lsm6dso_read_reg>
 8006166:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8006168:	68fb      	ldr	r3, [r7, #12]
 800616a:	2b00      	cmp	r3, #0
 800616c:	d10f      	bne.n	800618e <lsm6dso_mem_bank_set+0x42>
  {
    reg.reg_access = (uint8_t)val;
 800616e:	78fb      	ldrb	r3, [r7, #3]
 8006170:	f003 0303 	and.w	r3, r3, #3
 8006174:	b2da      	uxtb	r2, r3
 8006176:	7a3b      	ldrb	r3, [r7, #8]
 8006178:	f362 1387 	bfi	r3, r2, #6, #2
 800617c:	723b      	strb	r3, [r7, #8]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_FUNC_CFG_ACCESS, (uint8_t *)&reg, 1);
 800617e:	f107 0208 	add.w	r2, r7, #8
 8006182:	2301      	movs	r3, #1
 8006184:	2101      	movs	r1, #1
 8006186:	6878      	ldr	r0, [r7, #4]
 8006188:	f7ff fb84 	bl	8005894 <lsm6dso_write_reg>
 800618c:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 800618e:	68fb      	ldr	r3, [r7, #12]
}
 8006190:	4618      	mov	r0, r3
 8006192:	3710      	adds	r7, #16
 8006194:	46bd      	mov	sp, r7
 8006196:	bd80      	pop	{r7, pc}

08006198 <lsm6dso_device_id_get>:
  * @param  buff     buffer that stores data read
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 8006198:	b580      	push	{r7, lr}
 800619a:	b084      	sub	sp, #16
 800619c:	af00      	add	r7, sp, #0
 800619e:	6078      	str	r0, [r7, #4]
 80061a0:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_WHO_AM_I, buff, 1);
 80061a2:	2301      	movs	r3, #1
 80061a4:	683a      	ldr	r2, [r7, #0]
 80061a6:	210f      	movs	r1, #15
 80061a8:	6878      	ldr	r0, [r7, #4]
 80061aa:	f7ff fb5b 	bl	8005864 <lsm6dso_read_reg>
 80061ae:	60f8      	str	r0, [r7, #12]

  return ret;
 80061b0:	68fb      	ldr	r3, [r7, #12]
}
 80061b2:	4618      	mov	r0, r3
 80061b4:	3710      	adds	r7, #16
 80061b6:	46bd      	mov	sp, r7
 80061b8:	bd80      	pop	{r7, pc}

080061ba <lsm6dso_auto_increment_set>:
  * @param  val      change the values of if_inc in reg CTRL3_C
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_auto_increment_set(stmdev_ctx_t *ctx, uint8_t val)
{
 80061ba:	b580      	push	{r7, lr}
 80061bc:	b084      	sub	sp, #16
 80061be:	af00      	add	r7, sp, #0
 80061c0:	6078      	str	r0, [r7, #4]
 80061c2:	460b      	mov	r3, r1
 80061c4:	70fb      	strb	r3, [r7, #3]
  lsm6dso_ctrl3_c_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL3_C, (uint8_t *)&reg, 1);
 80061c6:	f107 0208 	add.w	r2, r7, #8
 80061ca:	2301      	movs	r3, #1
 80061cc:	2112      	movs	r1, #18
 80061ce:	6878      	ldr	r0, [r7, #4]
 80061d0:	f7ff fb48 	bl	8005864 <lsm6dso_read_reg>
 80061d4:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 80061d6:	68fb      	ldr	r3, [r7, #12]
 80061d8:	2b00      	cmp	r3, #0
 80061da:	d10f      	bne.n	80061fc <lsm6dso_auto_increment_set+0x42>
  {
    reg.if_inc = val;
 80061dc:	78fb      	ldrb	r3, [r7, #3]
 80061de:	f003 0301 	and.w	r3, r3, #1
 80061e2:	b2da      	uxtb	r2, r3
 80061e4:	7a3b      	ldrb	r3, [r7, #8]
 80061e6:	f362 0382 	bfi	r3, r2, #2, #1
 80061ea:	723b      	strb	r3, [r7, #8]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL3_C, (uint8_t *)&reg, 1);
 80061ec:	f107 0208 	add.w	r2, r7, #8
 80061f0:	2301      	movs	r3, #1
 80061f2:	2112      	movs	r1, #18
 80061f4:	6878      	ldr	r0, [r7, #4]
 80061f6:	f7ff fb4d 	bl	8005894 <lsm6dso_write_reg>
 80061fa:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80061fc:	68fb      	ldr	r3, [r7, #12]
}
 80061fe:	4618      	mov	r0, r3
 8006200:	3710      	adds	r7, #16
 8006202:	46bd      	mov	sp, r7
 8006204:	bd80      	pop	{r7, pc}

08006206 <lsm6dso_i3c_disable_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_i3c_disable_set(stmdev_ctx_t *ctx,
                                lsm6dso_i3c_disable_t val)
{
 8006206:	b580      	push	{r7, lr}
 8006208:	b086      	sub	sp, #24
 800620a:	af00      	add	r7, sp, #0
 800620c:	6078      	str	r0, [r7, #4]
 800620e:	460b      	mov	r3, r1
 8006210:	70fb      	strb	r3, [r7, #3]
  lsm6dso_i3c_bus_avb_t i3c_bus_avb;
  lsm6dso_ctrl9_xl_t ctrl9_xl;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL9_XL, (uint8_t *)&ctrl9_xl, 1);
 8006212:	f107 020c 	add.w	r2, r7, #12
 8006216:	2301      	movs	r3, #1
 8006218:	2118      	movs	r1, #24
 800621a:	6878      	ldr	r0, [r7, #4]
 800621c:	f7ff fb22 	bl	8005864 <lsm6dso_read_reg>
 8006220:	6178      	str	r0, [r7, #20]

  if (ret == 0)
 8006222:	697b      	ldr	r3, [r7, #20]
 8006224:	2b00      	cmp	r3, #0
 8006226:	d111      	bne.n	800624c <lsm6dso_i3c_disable_set+0x46>
  {
    ctrl9_xl.i3c_disable = ((uint8_t)val & 0x80U) >> 7;
 8006228:	78fb      	ldrb	r3, [r7, #3]
 800622a:	09db      	lsrs	r3, r3, #7
 800622c:	b2db      	uxtb	r3, r3
 800622e:	f003 0301 	and.w	r3, r3, #1
 8006232:	b2da      	uxtb	r2, r3
 8006234:	7b3b      	ldrb	r3, [r7, #12]
 8006236:	f362 0341 	bfi	r3, r2, #1, #1
 800623a:	733b      	strb	r3, [r7, #12]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL9_XL, (uint8_t *)&ctrl9_xl, 1);
 800623c:	f107 020c 	add.w	r2, r7, #12
 8006240:	2301      	movs	r3, #1
 8006242:	2118      	movs	r1, #24
 8006244:	6878      	ldr	r0, [r7, #4]
 8006246:	f7ff fb25 	bl	8005894 <lsm6dso_write_reg>
 800624a:	6178      	str	r0, [r7, #20]
  }

  if (ret == 0)
 800624c:	697b      	ldr	r3, [r7, #20]
 800624e:	2b00      	cmp	r3, #0
 8006250:	d107      	bne.n	8006262 <lsm6dso_i3c_disable_set+0x5c>
  {
    ret = lsm6dso_read_reg(ctx, LSM6DSO_I3C_BUS_AVB,
 8006252:	f107 0210 	add.w	r2, r7, #16
 8006256:	2301      	movs	r3, #1
 8006258:	2162      	movs	r1, #98	; 0x62
 800625a:	6878      	ldr	r0, [r7, #4]
 800625c:	f7ff fb02 	bl	8005864 <lsm6dso_read_reg>
 8006260:	6178      	str	r0, [r7, #20]
                           (uint8_t *)&i3c_bus_avb, 1);
  }

  if (ret == 0)
 8006262:	697b      	ldr	r3, [r7, #20]
 8006264:	2b00      	cmp	r3, #0
 8006266:	d10f      	bne.n	8006288 <lsm6dso_i3c_disable_set+0x82>
  {
    i3c_bus_avb.i3c_bus_avb_sel = (uint8_t)val & 0x03U;
 8006268:	78fb      	ldrb	r3, [r7, #3]
 800626a:	f003 0303 	and.w	r3, r3, #3
 800626e:	b2da      	uxtb	r2, r3
 8006270:	7c3b      	ldrb	r3, [r7, #16]
 8006272:	f362 03c4 	bfi	r3, r2, #3, #2
 8006276:	743b      	strb	r3, [r7, #16]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_I3C_BUS_AVB,
 8006278:	f107 0210 	add.w	r2, r7, #16
 800627c:	2301      	movs	r3, #1
 800627e:	2162      	movs	r1, #98	; 0x62
 8006280:	6878      	ldr	r0, [r7, #4]
 8006282:	f7ff fb07 	bl	8005894 <lsm6dso_write_reg>
 8006286:	6178      	str	r0, [r7, #20]
                            (uint8_t *)&i3c_bus_avb, 1);
  }

  return ret;
 8006288:	697b      	ldr	r3, [r7, #20]
}
 800628a:	4618      	mov	r0, r3
 800628c:	3718      	adds	r7, #24
 800628e:	46bd      	mov	sp, r7
 8006290:	bd80      	pop	{r7, pc}

08006292 <lsm6dso_fifo_mode_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_fifo_mode_set(stmdev_ctx_t *ctx,
                              lsm6dso_fifo_mode_t val)
{
 8006292:	b580      	push	{r7, lr}
 8006294:	b084      	sub	sp, #16
 8006296:	af00      	add	r7, sp, #0
 8006298:	6078      	str	r0, [r7, #4]
 800629a:	460b      	mov	r3, r1
 800629c:	70fb      	strb	r3, [r7, #3]
  lsm6dso_fifo_ctrl4_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_FIFO_CTRL4, (uint8_t *)&reg, 1);
 800629e:	f107 0208 	add.w	r2, r7, #8
 80062a2:	2301      	movs	r3, #1
 80062a4:	210a      	movs	r1, #10
 80062a6:	6878      	ldr	r0, [r7, #4]
 80062a8:	f7ff fadc 	bl	8005864 <lsm6dso_read_reg>
 80062ac:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 80062ae:	68fb      	ldr	r3, [r7, #12]
 80062b0:	2b00      	cmp	r3, #0
 80062b2:	d10f      	bne.n	80062d4 <lsm6dso_fifo_mode_set+0x42>
  {
    reg.fifo_mode = (uint8_t)val;
 80062b4:	78fb      	ldrb	r3, [r7, #3]
 80062b6:	f003 0307 	and.w	r3, r3, #7
 80062ba:	b2da      	uxtb	r2, r3
 80062bc:	7a3b      	ldrb	r3, [r7, #8]
 80062be:	f362 0302 	bfi	r3, r2, #0, #3
 80062c2:	723b      	strb	r3, [r7, #8]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_FIFO_CTRL4, (uint8_t *)&reg, 1);
 80062c4:	f107 0208 	add.w	r2, r7, #8
 80062c8:	2301      	movs	r3, #1
 80062ca:	210a      	movs	r1, #10
 80062cc:	6878      	ldr	r0, [r7, #4]
 80062ce:	f7ff fae1 	bl	8005894 <lsm6dso_write_reg>
 80062d2:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80062d4:	68fb      	ldr	r3, [r7, #12]
}
 80062d6:	4618      	mov	r0, r3
 80062d8:	3710      	adds	r7, #16
 80062da:	46bd      	mov	sp, r7
 80062dc:	bd80      	pop	{r7, pc}

080062de <lsm6dso_fsm_enable_get>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_fsm_enable_get(stmdev_ctx_t *ctx,
                               lsm6dso_emb_fsm_enable_t *val)
{
 80062de:	b580      	push	{r7, lr}
 80062e0:	b084      	sub	sp, #16
 80062e2:	af00      	add	r7, sp, #0
 80062e4:	6078      	str	r0, [r7, #4]
 80062e6:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = lsm6dso_mem_bank_set(ctx, LSM6DSO_EMBEDDED_FUNC_BANK);
 80062e8:	2102      	movs	r1, #2
 80062ea:	6878      	ldr	r0, [r7, #4]
 80062ec:	f7ff ff2e 	bl	800614c <lsm6dso_mem_bank_set>
 80062f0:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 80062f2:	68fb      	ldr	r3, [r7, #12]
 80062f4:	2b00      	cmp	r3, #0
 80062f6:	d106      	bne.n	8006306 <lsm6dso_fsm_enable_get+0x28>
  {
    ret = lsm6dso_read_reg(ctx, LSM6DSO_FSM_ENABLE_A, (uint8_t *) val, 2);
 80062f8:	2302      	movs	r3, #2
 80062fa:	683a      	ldr	r2, [r7, #0]
 80062fc:	2146      	movs	r1, #70	; 0x46
 80062fe:	6878      	ldr	r0, [r7, #4]
 8006300:	f7ff fab0 	bl	8005864 <lsm6dso_read_reg>
 8006304:	60f8      	str	r0, [r7, #12]
  }

  if (ret == 0)
 8006306:	68fb      	ldr	r3, [r7, #12]
 8006308:	2b00      	cmp	r3, #0
 800630a:	d104      	bne.n	8006316 <lsm6dso_fsm_enable_get+0x38>
  {
    ret = lsm6dso_mem_bank_set(ctx, LSM6DSO_USER_BANK);
 800630c:	2100      	movs	r1, #0
 800630e:	6878      	ldr	r0, [r7, #4]
 8006310:	f7ff ff1c 	bl	800614c <lsm6dso_mem_bank_set>
 8006314:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8006316:	68fb      	ldr	r3, [r7, #12]
}
 8006318:	4618      	mov	r0, r3
 800631a:	3710      	adds	r7, #16
 800631c:	46bd      	mov	sp, r7
 800631e:	bd80      	pop	{r7, pc}

08006320 <lsm6dso_fsm_data_rate_get>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_fsm_data_rate_get(stmdev_ctx_t *ctx,
                                  lsm6dso_fsm_odr_t *val)
{
 8006320:	b580      	push	{r7, lr}
 8006322:	b084      	sub	sp, #16
 8006324:	af00      	add	r7, sp, #0
 8006326:	6078      	str	r0, [r7, #4]
 8006328:	6039      	str	r1, [r7, #0]
  lsm6dso_emb_func_odr_cfg_b_t reg;
  int32_t ret;

  ret = lsm6dso_mem_bank_set(ctx, LSM6DSO_EMBEDDED_FUNC_BANK);
 800632a:	2102      	movs	r1, #2
 800632c:	6878      	ldr	r0, [r7, #4]
 800632e:	f7ff ff0d 	bl	800614c <lsm6dso_mem_bank_set>
 8006332:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8006334:	68fb      	ldr	r3, [r7, #12]
 8006336:	2b00      	cmp	r3, #0
 8006338:	d107      	bne.n	800634a <lsm6dso_fsm_data_rate_get+0x2a>
  {
    ret = lsm6dso_read_reg(ctx, LSM6DSO_EMB_FUNC_ODR_CFG_B,
 800633a:	f107 0208 	add.w	r2, r7, #8
 800633e:	2301      	movs	r3, #1
 8006340:	215f      	movs	r1, #95	; 0x5f
 8006342:	6878      	ldr	r0, [r7, #4]
 8006344:	f7ff fa8e 	bl	8005864 <lsm6dso_read_reg>
 8006348:	60f8      	str	r0, [r7, #12]
                           (uint8_t *)&reg, 1);
  }

  if (ret == 0)
 800634a:	68fb      	ldr	r3, [r7, #12]
 800634c:	2b00      	cmp	r3, #0
 800634e:	d12a      	bne.n	80063a6 <lsm6dso_fsm_data_rate_get+0x86>
  {
    switch (reg.fsm_odr)
 8006350:	7a3b      	ldrb	r3, [r7, #8]
 8006352:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8006356:	b2db      	uxtb	r3, r3
 8006358:	2b03      	cmp	r3, #3
 800635a:	d81b      	bhi.n	8006394 <lsm6dso_fsm_data_rate_get+0x74>
 800635c:	a201      	add	r2, pc, #4	; (adr r2, 8006364 <lsm6dso_fsm_data_rate_get+0x44>)
 800635e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006362:	bf00      	nop
 8006364:	08006375 	.word	0x08006375
 8006368:	0800637d 	.word	0x0800637d
 800636c:	08006385 	.word	0x08006385
 8006370:	0800638d 	.word	0x0800638d
    {
      case LSM6DSO_ODR_FSM_12Hz5:
        *val = LSM6DSO_ODR_FSM_12Hz5;
 8006374:	683b      	ldr	r3, [r7, #0]
 8006376:	2200      	movs	r2, #0
 8006378:	701a      	strb	r2, [r3, #0]
        break;
 800637a:	e00f      	b.n	800639c <lsm6dso_fsm_data_rate_get+0x7c>

      case LSM6DSO_ODR_FSM_26Hz:
        *val = LSM6DSO_ODR_FSM_26Hz;
 800637c:	683b      	ldr	r3, [r7, #0]
 800637e:	2201      	movs	r2, #1
 8006380:	701a      	strb	r2, [r3, #0]
        break;
 8006382:	e00b      	b.n	800639c <lsm6dso_fsm_data_rate_get+0x7c>

      case LSM6DSO_ODR_FSM_52Hz:
        *val = LSM6DSO_ODR_FSM_52Hz;
 8006384:	683b      	ldr	r3, [r7, #0]
 8006386:	2202      	movs	r2, #2
 8006388:	701a      	strb	r2, [r3, #0]
        break;
 800638a:	e007      	b.n	800639c <lsm6dso_fsm_data_rate_get+0x7c>

      case LSM6DSO_ODR_FSM_104Hz:
        *val = LSM6DSO_ODR_FSM_104Hz;
 800638c:	683b      	ldr	r3, [r7, #0]
 800638e:	2203      	movs	r2, #3
 8006390:	701a      	strb	r2, [r3, #0]
        break;
 8006392:	e003      	b.n	800639c <lsm6dso_fsm_data_rate_get+0x7c>

      default:
        *val = LSM6DSO_ODR_FSM_12Hz5;
 8006394:	683b      	ldr	r3, [r7, #0]
 8006396:	2200      	movs	r2, #0
 8006398:	701a      	strb	r2, [r3, #0]
        break;
 800639a:	bf00      	nop
    }

    ret = lsm6dso_mem_bank_set(ctx, LSM6DSO_USER_BANK);
 800639c:	2100      	movs	r1, #0
 800639e:	6878      	ldr	r0, [r7, #4]
 80063a0:	f7ff fed4 	bl	800614c <lsm6dso_mem_bank_set>
 80063a4:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80063a6:	68fb      	ldr	r3, [r7, #12]
}
 80063a8:	4618      	mov	r0, r3
 80063aa:	3710      	adds	r7, #16
 80063ac:	46bd      	mov	sp, r7
 80063ae:	bd80      	pop	{r7, pc}

080063b0 <IKS01A3_MOTION_SENSOR_Init>:
  *         - MOTION_ACCELERO for instance 1
  *         - MOTION_MAGNETO for instance 2
  * @retval BSP status
  */
int32_t IKS01A3_MOTION_SENSOR_Init(uint32_t Instance, uint32_t Functions)
{
 80063b0:	b580      	push	{r7, lr}
 80063b2:	b08e      	sub	sp, #56	; 0x38
 80063b4:	af00      	add	r7, sp, #0
 80063b6:	6078      	str	r0, [r7, #4]
 80063b8:	6039      	str	r1, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
 80063ba:	2300      	movs	r3, #0
 80063bc:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t function = MOTION_GYRO;
 80063be:	2301      	movs	r3, #1
 80063c0:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t i;
  uint32_t component_functions = 0;
 80063c2:	2300      	movs	r3, #0
 80063c4:	62bb      	str	r3, [r7, #40]	; 0x28
  IKS01A3_MOTION_SENSOR_Capabilities_t cap;

  switch (Instance)
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	2b02      	cmp	r3, #2
 80063ca:	d06e      	beq.n	80064aa <IKS01A3_MOTION_SENSOR_Init+0xfa>
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	2b02      	cmp	r3, #2
 80063d0:	f200 809d 	bhi.w	800650e <IKS01A3_MOTION_SENSOR_Init+0x15e>
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	2b00      	cmp	r3, #0
 80063d8:	d003      	beq.n	80063e2 <IKS01A3_MOTION_SENSOR_Init+0x32>
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	2b01      	cmp	r3, #1
 80063de:	d032      	beq.n	8006446 <IKS01A3_MOTION_SENSOR_Init+0x96>
 80063e0:	e095      	b.n	800650e <IKS01A3_MOTION_SENSOR_Init+0x15e>
  {
#if (USE_IKS01A3_MOTION_SENSOR_LSM6DSO_0 == 1)
    case IKS01A3_LSM6DSO_0:
      if (LSM6DSO_0_Probe(Functions) != BSP_ERROR_NONE)
 80063e2:	6838      	ldr	r0, [r7, #0]
 80063e4:	f000 fa5a 	bl	800689c <LSM6DSO_0_Probe>
 80063e8:	4603      	mov	r3, r0
 80063ea:	2b00      	cmp	r3, #0
 80063ec:	d002      	beq.n	80063f4 <IKS01A3_MOTION_SENSOR_Init+0x44>
      {
        return BSP_ERROR_NO_INIT;
 80063ee:	f04f 33ff 	mov.w	r3, #4294967295
 80063f2:	e0cc      	b.n	800658e <IKS01A3_MOTION_SENSOR_Init+0x1de>
      }
      if (MotionDrv[Instance]->GetCapabilities(MotionCompObj[Instance], (void *)&cap) != BSP_ERROR_NONE)
 80063f4:	4a68      	ldr	r2, [pc, #416]	; (8006598 <IKS01A3_MOTION_SENSOR_Init+0x1e8>)
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80063fc:	68db      	ldr	r3, [r3, #12]
 80063fe:	4967      	ldr	r1, [pc, #412]	; (800659c <IKS01A3_MOTION_SENSOR_Init+0x1ec>)
 8006400:	687a      	ldr	r2, [r7, #4]
 8006402:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8006406:	f107 010c 	add.w	r1, r7, #12
 800640a:	4610      	mov	r0, r2
 800640c:	4798      	blx	r3
 800640e:	4603      	mov	r3, r0
 8006410:	2b00      	cmp	r3, #0
 8006412:	d002      	beq.n	800641a <IKS01A3_MOTION_SENSOR_Init+0x6a>
      {
        return BSP_ERROR_UNKNOWN_COMPONENT;
 8006414:	f06f 0306 	mvn.w	r3, #6
 8006418:	e0b9      	b.n	800658e <IKS01A3_MOTION_SENSOR_Init+0x1de>
      }
      if (cap.Acc == 1U)
 800641a:	7b3b      	ldrb	r3, [r7, #12]
 800641c:	2b01      	cmp	r3, #1
 800641e:	d103      	bne.n	8006428 <IKS01A3_MOTION_SENSOR_Init+0x78>
      {
        component_functions |= MOTION_ACCELERO;
 8006420:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006422:	f043 0302 	orr.w	r3, r3, #2
 8006426:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      if (cap.Gyro == 1U)
 8006428:	7b7b      	ldrb	r3, [r7, #13]
 800642a:	2b01      	cmp	r3, #1
 800642c:	d103      	bne.n	8006436 <IKS01A3_MOTION_SENSOR_Init+0x86>
      {
        component_functions |= MOTION_GYRO;
 800642e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006430:	f043 0301 	orr.w	r3, r3, #1
 8006434:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      if (cap.Magneto == 1U)
 8006436:	7bbb      	ldrb	r3, [r7, #14]
 8006438:	2b01      	cmp	r3, #1
 800643a:	d16c      	bne.n	8006516 <IKS01A3_MOTION_SENSOR_Init+0x166>
      {
        component_functions |= MOTION_MAGNETO;
 800643c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800643e:	f043 0304 	orr.w	r3, r3, #4
 8006442:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      break;
 8006444:	e067      	b.n	8006516 <IKS01A3_MOTION_SENSOR_Init+0x166>
#endif

#if (USE_IKS01A3_MOTION_SENSOR_LIS2DW12_0 == 1)
    case IKS01A3_LIS2DW12_0:
      if (LIS2DW12_0_Probe(Functions) != BSP_ERROR_NONE)
 8006446:	6838      	ldr	r0, [r7, #0]
 8006448:	f000 fae8 	bl	8006a1c <LIS2DW12_0_Probe>
 800644c:	4603      	mov	r3, r0
 800644e:	2b00      	cmp	r3, #0
 8006450:	d002      	beq.n	8006458 <IKS01A3_MOTION_SENSOR_Init+0xa8>
      {
        return BSP_ERROR_NO_INIT;
 8006452:	f04f 33ff 	mov.w	r3, #4294967295
 8006456:	e09a      	b.n	800658e <IKS01A3_MOTION_SENSOR_Init+0x1de>
      }
      if (MotionDrv[Instance]->GetCapabilities(MotionCompObj[Instance], (void *)&cap) != BSP_ERROR_NONE)
 8006458:	4a4f      	ldr	r2, [pc, #316]	; (8006598 <IKS01A3_MOTION_SENSOR_Init+0x1e8>)
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006460:	68db      	ldr	r3, [r3, #12]
 8006462:	494e      	ldr	r1, [pc, #312]	; (800659c <IKS01A3_MOTION_SENSOR_Init+0x1ec>)
 8006464:	687a      	ldr	r2, [r7, #4]
 8006466:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800646a:	f107 010c 	add.w	r1, r7, #12
 800646e:	4610      	mov	r0, r2
 8006470:	4798      	blx	r3
 8006472:	4603      	mov	r3, r0
 8006474:	2b00      	cmp	r3, #0
 8006476:	d002      	beq.n	800647e <IKS01A3_MOTION_SENSOR_Init+0xce>
      {
        return BSP_ERROR_UNKNOWN_COMPONENT;
 8006478:	f06f 0306 	mvn.w	r3, #6
 800647c:	e087      	b.n	800658e <IKS01A3_MOTION_SENSOR_Init+0x1de>
      }
      if (cap.Acc == 1U)
 800647e:	7b3b      	ldrb	r3, [r7, #12]
 8006480:	2b01      	cmp	r3, #1
 8006482:	d103      	bne.n	800648c <IKS01A3_MOTION_SENSOR_Init+0xdc>
      {
        component_functions |= MOTION_ACCELERO;
 8006484:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006486:	f043 0302 	orr.w	r3, r3, #2
 800648a:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      if (cap.Gyro == 1U)
 800648c:	7b7b      	ldrb	r3, [r7, #13]
 800648e:	2b01      	cmp	r3, #1
 8006490:	d103      	bne.n	800649a <IKS01A3_MOTION_SENSOR_Init+0xea>
      {
        component_functions |= MOTION_GYRO;
 8006492:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006494:	f043 0301 	orr.w	r3, r3, #1
 8006498:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      if (cap.Magneto == 1U)
 800649a:	7bbb      	ldrb	r3, [r7, #14]
 800649c:	2b01      	cmp	r3, #1
 800649e:	d13c      	bne.n	800651a <IKS01A3_MOTION_SENSOR_Init+0x16a>
      {
        component_functions |= MOTION_MAGNETO;
 80064a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064a2:	f043 0304 	orr.w	r3, r3, #4
 80064a6:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      break;
 80064a8:	e037      	b.n	800651a <IKS01A3_MOTION_SENSOR_Init+0x16a>
#endif

#if (USE_IKS01A3_MOTION_SENSOR_LIS2MDL_0 == 1)
    case IKS01A3_LIS2MDL_0:
      if (LIS2MDL_0_Probe(Functions) != BSP_ERROR_NONE)
 80064aa:	6838      	ldr	r0, [r7, #0]
 80064ac:	f000 fb5e 	bl	8006b6c <LIS2MDL_0_Probe>
 80064b0:	4603      	mov	r3, r0
 80064b2:	2b00      	cmp	r3, #0
 80064b4:	d002      	beq.n	80064bc <IKS01A3_MOTION_SENSOR_Init+0x10c>
      {
        return BSP_ERROR_NO_INIT;
 80064b6:	f04f 33ff 	mov.w	r3, #4294967295
 80064ba:	e068      	b.n	800658e <IKS01A3_MOTION_SENSOR_Init+0x1de>
      }
      if (MotionDrv[Instance]->GetCapabilities(MotionCompObj[Instance], (void *)&cap) != BSP_ERROR_NONE)
 80064bc:	4a36      	ldr	r2, [pc, #216]	; (8006598 <IKS01A3_MOTION_SENSOR_Init+0x1e8>)
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80064c4:	68db      	ldr	r3, [r3, #12]
 80064c6:	4935      	ldr	r1, [pc, #212]	; (800659c <IKS01A3_MOTION_SENSOR_Init+0x1ec>)
 80064c8:	687a      	ldr	r2, [r7, #4]
 80064ca:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80064ce:	f107 010c 	add.w	r1, r7, #12
 80064d2:	4610      	mov	r0, r2
 80064d4:	4798      	blx	r3
 80064d6:	4603      	mov	r3, r0
 80064d8:	2b00      	cmp	r3, #0
 80064da:	d002      	beq.n	80064e2 <IKS01A3_MOTION_SENSOR_Init+0x132>
      {
        return BSP_ERROR_UNKNOWN_COMPONENT;
 80064dc:	f06f 0306 	mvn.w	r3, #6
 80064e0:	e055      	b.n	800658e <IKS01A3_MOTION_SENSOR_Init+0x1de>
      }
      if (cap.Acc == 1U)
 80064e2:	7b3b      	ldrb	r3, [r7, #12]
 80064e4:	2b01      	cmp	r3, #1
 80064e6:	d103      	bne.n	80064f0 <IKS01A3_MOTION_SENSOR_Init+0x140>
      {
        component_functions |= MOTION_ACCELERO;
 80064e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064ea:	f043 0302 	orr.w	r3, r3, #2
 80064ee:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      if (cap.Gyro == 1U)
 80064f0:	7b7b      	ldrb	r3, [r7, #13]
 80064f2:	2b01      	cmp	r3, #1
 80064f4:	d103      	bne.n	80064fe <IKS01A3_MOTION_SENSOR_Init+0x14e>
      {
        component_functions |= MOTION_GYRO;
 80064f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064f8:	f043 0301 	orr.w	r3, r3, #1
 80064fc:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      if (cap.Magneto == 1U)
 80064fe:	7bbb      	ldrb	r3, [r7, #14]
 8006500:	2b01      	cmp	r3, #1
 8006502:	d10c      	bne.n	800651e <IKS01A3_MOTION_SENSOR_Init+0x16e>
      {
        component_functions |= MOTION_MAGNETO;
 8006504:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006506:	f043 0304 	orr.w	r3, r3, #4
 800650a:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      break;
 800650c:	e007      	b.n	800651e <IKS01A3_MOTION_SENSOR_Init+0x16e>
      }
      break;
#endif

    default:
      ret = BSP_ERROR_WRONG_PARAM;
 800650e:	f06f 0301 	mvn.w	r3, #1
 8006512:	637b      	str	r3, [r7, #52]	; 0x34
      break;
 8006514:	e004      	b.n	8006520 <IKS01A3_MOTION_SENSOR_Init+0x170>
      break;
 8006516:	bf00      	nop
 8006518:	e002      	b.n	8006520 <IKS01A3_MOTION_SENSOR_Init+0x170>
      break;
 800651a:	bf00      	nop
 800651c:	e000      	b.n	8006520 <IKS01A3_MOTION_SENSOR_Init+0x170>
      break;
 800651e:	bf00      	nop
  }

  if (ret != BSP_ERROR_NONE)
 8006520:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006522:	2b00      	cmp	r3, #0
 8006524:	d001      	beq.n	800652a <IKS01A3_MOTION_SENSOR_Init+0x17a>
  {
    return ret;
 8006526:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006528:	e031      	b.n	800658e <IKS01A3_MOTION_SENSOR_Init+0x1de>
  }

  for (i = 0; i < IKS01A3_MOTION_FUNCTIONS_NBR; i++)
 800652a:	2300      	movs	r3, #0
 800652c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800652e:	e02a      	b.n	8006586 <IKS01A3_MOTION_SENSOR_Init+0x1d6>
  {
    if (((Functions & function) == function) && ((component_functions & function) == function))
 8006530:	683a      	ldr	r2, [r7, #0]
 8006532:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006534:	4013      	ands	r3, r2
 8006536:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006538:	429a      	cmp	r2, r3
 800653a:	d11e      	bne.n	800657a <IKS01A3_MOTION_SENSOR_Init+0x1ca>
 800653c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800653e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006540:	4013      	ands	r3, r2
 8006542:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006544:	429a      	cmp	r2, r3
 8006546:	d118      	bne.n	800657a <IKS01A3_MOTION_SENSOR_Init+0x1ca>
    {
      if (MotionFuncDrv[Instance][FunctionIndex[function]]->Enable(MotionCompObj[Instance]) != BSP_ERROR_NONE)
 8006548:	4a15      	ldr	r2, [pc, #84]	; (80065a0 <IKS01A3_MOTION_SENSOR_Init+0x1f0>)
 800654a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800654c:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8006550:	4814      	ldr	r0, [pc, #80]	; (80065a4 <IKS01A3_MOTION_SENSOR_Init+0x1f4>)
 8006552:	687a      	ldr	r2, [r7, #4]
 8006554:	4613      	mov	r3, r2
 8006556:	005b      	lsls	r3, r3, #1
 8006558:	4413      	add	r3, r2
 800655a:	440b      	add	r3, r1
 800655c:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	490e      	ldr	r1, [pc, #56]	; (800659c <IKS01A3_MOTION_SENSOR_Init+0x1ec>)
 8006564:	687a      	ldr	r2, [r7, #4]
 8006566:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800656a:	4610      	mov	r0, r2
 800656c:	4798      	blx	r3
 800656e:	4603      	mov	r3, r0
 8006570:	2b00      	cmp	r3, #0
 8006572:	d002      	beq.n	800657a <IKS01A3_MOTION_SENSOR_Init+0x1ca>
      {
        return BSP_ERROR_COMPONENT_FAILURE;
 8006574:	f06f 0304 	mvn.w	r3, #4
 8006578:	e009      	b.n	800658e <IKS01A3_MOTION_SENSOR_Init+0x1de>
      }
    }
    function = function << 1;
 800657a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800657c:	005b      	lsls	r3, r3, #1
 800657e:	633b      	str	r3, [r7, #48]	; 0x30
  for (i = 0; i < IKS01A3_MOTION_FUNCTIONS_NBR; i++)
 8006580:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006582:	3301      	adds	r3, #1
 8006584:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006586:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006588:	2b02      	cmp	r3, #2
 800658a:	d9d1      	bls.n	8006530 <IKS01A3_MOTION_SENSOR_Init+0x180>
  }

  return ret;
 800658c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800658e:	4618      	mov	r0, r3
 8006590:	3738      	adds	r7, #56	; 0x38
 8006592:	46bd      	mov	sp, r7
 8006594:	bd80      	pop	{r7, pc}
 8006596:	bf00      	nop
 8006598:	20016dbc 	.word	0x20016dbc
 800659c:	20016d8c 	.word	0x20016d8c
 80065a0:	200000c8 	.word	0x200000c8
 80065a4:	20016d98 	.word	0x20016d98

080065a8 <IKS01A3_MOTION_SENSOR_DeInit>:
  * @brief  Deinitialize Motion sensor
  * @param  Instance Motion sensor instance
  * @retval BSP status
  */
int32_t IKS01A3_MOTION_SENSOR_DeInit(uint32_t Instance)
{
 80065a8:	b580      	push	{r7, lr}
 80065aa:	b084      	sub	sp, #16
 80065ac:	af00      	add	r7, sp, #0
 80065ae:	6078      	str	r0, [r7, #4]
  int32_t ret;

  if (Instance >= IKS01A3_MOTION_INSTANCES_NBR)
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	2b02      	cmp	r3, #2
 80065b4:	d903      	bls.n	80065be <IKS01A3_MOTION_SENSOR_DeInit+0x16>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 80065b6:	f06f 0301 	mvn.w	r3, #1
 80065ba:	60fb      	str	r3, [r7, #12]
 80065bc:	e013      	b.n	80065e6 <IKS01A3_MOTION_SENSOR_DeInit+0x3e>
  }
  else if (MotionDrv[Instance]->DeInit(MotionCompObj[Instance]) != BSP_ERROR_NONE)
 80065be:	4a0c      	ldr	r2, [pc, #48]	; (80065f0 <IKS01A3_MOTION_SENSOR_DeInit+0x48>)
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80065c6:	685b      	ldr	r3, [r3, #4]
 80065c8:	490a      	ldr	r1, [pc, #40]	; (80065f4 <IKS01A3_MOTION_SENSOR_DeInit+0x4c>)
 80065ca:	687a      	ldr	r2, [r7, #4]
 80065cc:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80065d0:	4610      	mov	r0, r2
 80065d2:	4798      	blx	r3
 80065d4:	4603      	mov	r3, r0
 80065d6:	2b00      	cmp	r3, #0
 80065d8:	d003      	beq.n	80065e2 <IKS01A3_MOTION_SENSOR_DeInit+0x3a>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 80065da:	f06f 0304 	mvn.w	r3, #4
 80065de:	60fb      	str	r3, [r7, #12]
 80065e0:	e001      	b.n	80065e6 <IKS01A3_MOTION_SENSOR_DeInit+0x3e>
  }
  else
  {
    ret = BSP_ERROR_NONE;
 80065e2:	2300      	movs	r3, #0
 80065e4:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 80065e6:	68fb      	ldr	r3, [r7, #12]
}
 80065e8:	4618      	mov	r0, r3
 80065ea:	3710      	adds	r7, #16
 80065ec:	46bd      	mov	sp, r7
 80065ee:	bd80      	pop	{r7, pc}
 80065f0:	20016dbc 	.word	0x20016dbc
 80065f4:	20016d8c 	.word	0x20016d8c

080065f8 <IKS01A3_MOTION_SENSOR_Enable>:
  *         - MOTION_ACCELERO for instance 1
  *         - MOTION_MAGNETO for instance 2
  * @retval BSP status
  */
int32_t IKS01A3_MOTION_SENSOR_Enable(uint32_t Instance, uint32_t Function)
{
 80065f8:	b580      	push	{r7, lr}
 80065fa:	b084      	sub	sp, #16
 80065fc:	af00      	add	r7, sp, #0
 80065fe:	6078      	str	r0, [r7, #4]
 8006600:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (Instance >= IKS01A3_MOTION_INSTANCES_NBR)
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	2b02      	cmp	r3, #2
 8006606:	d903      	bls.n	8006610 <IKS01A3_MOTION_SENSOR_Enable+0x18>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8006608:	f06f 0301 	mvn.w	r3, #1
 800660c:	60fb      	str	r3, [r7, #12]
 800660e:	e028      	b.n	8006662 <IKS01A3_MOTION_SENSOR_Enable+0x6a>
  }
  else
  {
    if ((MotionCtx[Instance].Functions & Function) == Function)
 8006610:	4a16      	ldr	r2, [pc, #88]	; (800666c <IKS01A3_MOTION_SENSOR_Enable+0x74>)
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8006618:	683b      	ldr	r3, [r7, #0]
 800661a:	4013      	ands	r3, r2
 800661c:	683a      	ldr	r2, [r7, #0]
 800661e:	429a      	cmp	r2, r3
 8006620:	d11c      	bne.n	800665c <IKS01A3_MOTION_SENSOR_Enable+0x64>
    {
      if (MotionFuncDrv[Instance][FunctionIndex[Function]]->Enable(MotionCompObj[Instance]) != BSP_ERROR_NONE)
 8006622:	4a13      	ldr	r2, [pc, #76]	; (8006670 <IKS01A3_MOTION_SENSOR_Enable+0x78>)
 8006624:	683b      	ldr	r3, [r7, #0]
 8006626:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800662a:	4812      	ldr	r0, [pc, #72]	; (8006674 <IKS01A3_MOTION_SENSOR_Enable+0x7c>)
 800662c:	687a      	ldr	r2, [r7, #4]
 800662e:	4613      	mov	r3, r2
 8006630:	005b      	lsls	r3, r3, #1
 8006632:	4413      	add	r3, r2
 8006634:	440b      	add	r3, r1
 8006636:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	490e      	ldr	r1, [pc, #56]	; (8006678 <IKS01A3_MOTION_SENSOR_Enable+0x80>)
 800663e:	687a      	ldr	r2, [r7, #4]
 8006640:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8006644:	4610      	mov	r0, r2
 8006646:	4798      	blx	r3
 8006648:	4603      	mov	r3, r0
 800664a:	2b00      	cmp	r3, #0
 800664c:	d003      	beq.n	8006656 <IKS01A3_MOTION_SENSOR_Enable+0x5e>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800664e:	f06f 0304 	mvn.w	r3, #4
 8006652:	60fb      	str	r3, [r7, #12]
 8006654:	e005      	b.n	8006662 <IKS01A3_MOTION_SENSOR_Enable+0x6a>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 8006656:	2300      	movs	r3, #0
 8006658:	60fb      	str	r3, [r7, #12]
 800665a:	e002      	b.n	8006662 <IKS01A3_MOTION_SENSOR_Enable+0x6a>
      }
    }
    else
    {
      ret = BSP_ERROR_WRONG_PARAM;
 800665c:	f06f 0301 	mvn.w	r3, #1
 8006660:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 8006662:	68fb      	ldr	r3, [r7, #12]
}
 8006664:	4618      	mov	r0, r3
 8006666:	3710      	adds	r7, #16
 8006668:	46bd      	mov	sp, r7
 800666a:	bd80      	pop	{r7, pc}
 800666c:	20016dc8 	.word	0x20016dc8
 8006670:	200000c8 	.word	0x200000c8
 8006674:	20016d98 	.word	0x20016d98
 8006678:	20016d8c 	.word	0x20016d8c

0800667c <IKS01A3_MOTION_SENSOR_Disable>:
  *         - MOTION_ACCELERO for instance 1
  *         - MOTION_MAGNETO for instance 2
  * @retval BSP status
  */
int32_t IKS01A3_MOTION_SENSOR_Disable(uint32_t Instance, uint32_t Function)
{
 800667c:	b580      	push	{r7, lr}
 800667e:	b084      	sub	sp, #16
 8006680:	af00      	add	r7, sp, #0
 8006682:	6078      	str	r0, [r7, #4]
 8006684:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (Instance >= IKS01A3_MOTION_INSTANCES_NBR)
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	2b02      	cmp	r3, #2
 800668a:	d903      	bls.n	8006694 <IKS01A3_MOTION_SENSOR_Disable+0x18>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 800668c:	f06f 0301 	mvn.w	r3, #1
 8006690:	60fb      	str	r3, [r7, #12]
 8006692:	e028      	b.n	80066e6 <IKS01A3_MOTION_SENSOR_Disable+0x6a>
  }
  else
  {
    if ((MotionCtx[Instance].Functions & Function) == Function)
 8006694:	4a16      	ldr	r2, [pc, #88]	; (80066f0 <IKS01A3_MOTION_SENSOR_Disable+0x74>)
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800669c:	683b      	ldr	r3, [r7, #0]
 800669e:	4013      	ands	r3, r2
 80066a0:	683a      	ldr	r2, [r7, #0]
 80066a2:	429a      	cmp	r2, r3
 80066a4:	d11c      	bne.n	80066e0 <IKS01A3_MOTION_SENSOR_Disable+0x64>
    {
      if (MotionFuncDrv[Instance][FunctionIndex[Function]]->Disable(MotionCompObj[Instance]) != BSP_ERROR_NONE)
 80066a6:	4a13      	ldr	r2, [pc, #76]	; (80066f4 <IKS01A3_MOTION_SENSOR_Disable+0x78>)
 80066a8:	683b      	ldr	r3, [r7, #0]
 80066aa:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80066ae:	4812      	ldr	r0, [pc, #72]	; (80066f8 <IKS01A3_MOTION_SENSOR_Disable+0x7c>)
 80066b0:	687a      	ldr	r2, [r7, #4]
 80066b2:	4613      	mov	r3, r2
 80066b4:	005b      	lsls	r3, r3, #1
 80066b6:	4413      	add	r3, r2
 80066b8:	440b      	add	r3, r1
 80066ba:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80066be:	685b      	ldr	r3, [r3, #4]
 80066c0:	490e      	ldr	r1, [pc, #56]	; (80066fc <IKS01A3_MOTION_SENSOR_Disable+0x80>)
 80066c2:	687a      	ldr	r2, [r7, #4]
 80066c4:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80066c8:	4610      	mov	r0, r2
 80066ca:	4798      	blx	r3
 80066cc:	4603      	mov	r3, r0
 80066ce:	2b00      	cmp	r3, #0
 80066d0:	d003      	beq.n	80066da <IKS01A3_MOTION_SENSOR_Disable+0x5e>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 80066d2:	f06f 0304 	mvn.w	r3, #4
 80066d6:	60fb      	str	r3, [r7, #12]
 80066d8:	e005      	b.n	80066e6 <IKS01A3_MOTION_SENSOR_Disable+0x6a>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 80066da:	2300      	movs	r3, #0
 80066dc:	60fb      	str	r3, [r7, #12]
 80066de:	e002      	b.n	80066e6 <IKS01A3_MOTION_SENSOR_Disable+0x6a>
      }
    }
    else
    {
      ret = BSP_ERROR_WRONG_PARAM;
 80066e0:	f06f 0301 	mvn.w	r3, #1
 80066e4:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 80066e6:	68fb      	ldr	r3, [r7, #12]
}
 80066e8:	4618      	mov	r0, r3
 80066ea:	3710      	adds	r7, #16
 80066ec:	46bd      	mov	sp, r7
 80066ee:	bd80      	pop	{r7, pc}
 80066f0:	20016dc8 	.word	0x20016dc8
 80066f4:	200000c8 	.word	0x200000c8
 80066f8:	20016d98 	.word	0x20016d98
 80066fc:	20016d8c 	.word	0x20016d8c

08006700 <IKS01A3_MOTION_SENSOR_GetAxes>:
  *         - MOTION_MAGNETO for instance 2
  * @param  Axes pointer to axes data structure
  * @retval BSP status
  */
int32_t IKS01A3_MOTION_SENSOR_GetAxes(uint32_t Instance, uint32_t Function, IKS01A3_MOTION_SENSOR_Axes_t *Axes)
{
 8006700:	b580      	push	{r7, lr}
 8006702:	b086      	sub	sp, #24
 8006704:	af00      	add	r7, sp, #0
 8006706:	60f8      	str	r0, [r7, #12]
 8006708:	60b9      	str	r1, [r7, #8]
 800670a:	607a      	str	r2, [r7, #4]
  int32_t ret;

  if (Instance >= IKS01A3_MOTION_INSTANCES_NBR)
 800670c:	68fb      	ldr	r3, [r7, #12]
 800670e:	2b02      	cmp	r3, #2
 8006710:	d903      	bls.n	800671a <IKS01A3_MOTION_SENSOR_GetAxes+0x1a>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8006712:	f06f 0301 	mvn.w	r3, #1
 8006716:	617b      	str	r3, [r7, #20]
 8006718:	e029      	b.n	800676e <IKS01A3_MOTION_SENSOR_GetAxes+0x6e>
  }
  else
  {
    if ((MotionCtx[Instance].Functions & Function) == Function)
 800671a:	4a17      	ldr	r2, [pc, #92]	; (8006778 <IKS01A3_MOTION_SENSOR_GetAxes+0x78>)
 800671c:	68fb      	ldr	r3, [r7, #12]
 800671e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8006722:	68bb      	ldr	r3, [r7, #8]
 8006724:	4013      	ands	r3, r2
 8006726:	68ba      	ldr	r2, [r7, #8]
 8006728:	429a      	cmp	r2, r3
 800672a:	d11d      	bne.n	8006768 <IKS01A3_MOTION_SENSOR_GetAxes+0x68>
    {
      if (MotionFuncDrv[Instance][FunctionIndex[Function]]->GetAxes(MotionCompObj[Instance], Axes) != BSP_ERROR_NONE)
 800672c:	4a13      	ldr	r2, [pc, #76]	; (800677c <IKS01A3_MOTION_SENSOR_GetAxes+0x7c>)
 800672e:	68bb      	ldr	r3, [r7, #8]
 8006730:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8006734:	4812      	ldr	r0, [pc, #72]	; (8006780 <IKS01A3_MOTION_SENSOR_GetAxes+0x80>)
 8006736:	68fa      	ldr	r2, [r7, #12]
 8006738:	4613      	mov	r3, r2
 800673a:	005b      	lsls	r3, r3, #1
 800673c:	4413      	add	r3, r2
 800673e:	440b      	add	r3, r1
 8006740:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8006744:	69db      	ldr	r3, [r3, #28]
 8006746:	490f      	ldr	r1, [pc, #60]	; (8006784 <IKS01A3_MOTION_SENSOR_GetAxes+0x84>)
 8006748:	68fa      	ldr	r2, [r7, #12]
 800674a:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800674e:	6879      	ldr	r1, [r7, #4]
 8006750:	4610      	mov	r0, r2
 8006752:	4798      	blx	r3
 8006754:	4603      	mov	r3, r0
 8006756:	2b00      	cmp	r3, #0
 8006758:	d003      	beq.n	8006762 <IKS01A3_MOTION_SENSOR_GetAxes+0x62>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800675a:	f06f 0304 	mvn.w	r3, #4
 800675e:	617b      	str	r3, [r7, #20]
 8006760:	e005      	b.n	800676e <IKS01A3_MOTION_SENSOR_GetAxes+0x6e>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 8006762:	2300      	movs	r3, #0
 8006764:	617b      	str	r3, [r7, #20]
 8006766:	e002      	b.n	800676e <IKS01A3_MOTION_SENSOR_GetAxes+0x6e>
      }
    }
    else
    {
      ret = BSP_ERROR_WRONG_PARAM;
 8006768:	f06f 0301 	mvn.w	r3, #1
 800676c:	617b      	str	r3, [r7, #20]
    }
  }

  return ret;
 800676e:	697b      	ldr	r3, [r7, #20]
}
 8006770:	4618      	mov	r0, r3
 8006772:	3718      	adds	r7, #24
 8006774:	46bd      	mov	sp, r7
 8006776:	bd80      	pop	{r7, pc}
 8006778:	20016dc8 	.word	0x20016dc8
 800677c:	200000c8 	.word	0x200000c8
 8006780:	20016d98 	.word	0x20016d98
 8006784:	20016d8c 	.word	0x20016d8c

08006788 <IKS01A3_MOTION_SENSOR_GetOutputDataRate>:
  *         - MOTION_MAGNETO for instance 2
  * @param  Odr pointer to Output Data Rate read value
  * @retval BSP status
  */
int32_t IKS01A3_MOTION_SENSOR_GetOutputDataRate(uint32_t Instance, uint32_t Function, float *Odr)
{
 8006788:	b580      	push	{r7, lr}
 800678a:	b086      	sub	sp, #24
 800678c:	af00      	add	r7, sp, #0
 800678e:	60f8      	str	r0, [r7, #12]
 8006790:	60b9      	str	r1, [r7, #8]
 8006792:	607a      	str	r2, [r7, #4]
  int32_t ret;

  if (Instance >= IKS01A3_MOTION_INSTANCES_NBR)
 8006794:	68fb      	ldr	r3, [r7, #12]
 8006796:	2b02      	cmp	r3, #2
 8006798:	d903      	bls.n	80067a2 <IKS01A3_MOTION_SENSOR_GetOutputDataRate+0x1a>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 800679a:	f06f 0301 	mvn.w	r3, #1
 800679e:	617b      	str	r3, [r7, #20]
 80067a0:	e029      	b.n	80067f6 <IKS01A3_MOTION_SENSOR_GetOutputDataRate+0x6e>
  }
  else
  {
    if ((MotionCtx[Instance].Functions & Function) == Function)
 80067a2:	4a17      	ldr	r2, [pc, #92]	; (8006800 <IKS01A3_MOTION_SENSOR_GetOutputDataRate+0x78>)
 80067a4:	68fb      	ldr	r3, [r7, #12]
 80067a6:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80067aa:	68bb      	ldr	r3, [r7, #8]
 80067ac:	4013      	ands	r3, r2
 80067ae:	68ba      	ldr	r2, [r7, #8]
 80067b0:	429a      	cmp	r2, r3
 80067b2:	d11d      	bne.n	80067f0 <IKS01A3_MOTION_SENSOR_GetOutputDataRate+0x68>
    {
      if (MotionFuncDrv[Instance][FunctionIndex[Function]]->GetOutputDataRate(MotionCompObj[Instance], Odr) != BSP_ERROR_NONE)
 80067b4:	4a13      	ldr	r2, [pc, #76]	; (8006804 <IKS01A3_MOTION_SENSOR_GetOutputDataRate+0x7c>)
 80067b6:	68bb      	ldr	r3, [r7, #8]
 80067b8:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80067bc:	4812      	ldr	r0, [pc, #72]	; (8006808 <IKS01A3_MOTION_SENSOR_GetOutputDataRate+0x80>)
 80067be:	68fa      	ldr	r2, [r7, #12]
 80067c0:	4613      	mov	r3, r2
 80067c2:	005b      	lsls	r3, r3, #1
 80067c4:	4413      	add	r3, r2
 80067c6:	440b      	add	r3, r1
 80067c8:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80067cc:	68db      	ldr	r3, [r3, #12]
 80067ce:	490f      	ldr	r1, [pc, #60]	; (800680c <IKS01A3_MOTION_SENSOR_GetOutputDataRate+0x84>)
 80067d0:	68fa      	ldr	r2, [r7, #12]
 80067d2:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80067d6:	6879      	ldr	r1, [r7, #4]
 80067d8:	4610      	mov	r0, r2
 80067da:	4798      	blx	r3
 80067dc:	4603      	mov	r3, r0
 80067de:	2b00      	cmp	r3, #0
 80067e0:	d003      	beq.n	80067ea <IKS01A3_MOTION_SENSOR_GetOutputDataRate+0x62>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 80067e2:	f06f 0304 	mvn.w	r3, #4
 80067e6:	617b      	str	r3, [r7, #20]
 80067e8:	e005      	b.n	80067f6 <IKS01A3_MOTION_SENSOR_GetOutputDataRate+0x6e>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 80067ea:	2300      	movs	r3, #0
 80067ec:	617b      	str	r3, [r7, #20]
 80067ee:	e002      	b.n	80067f6 <IKS01A3_MOTION_SENSOR_GetOutputDataRate+0x6e>
      }
    }
    else
    {
      ret = BSP_ERROR_WRONG_PARAM;
 80067f0:	f06f 0301 	mvn.w	r3, #1
 80067f4:	617b      	str	r3, [r7, #20]
    }
  }

  return ret;
 80067f6:	697b      	ldr	r3, [r7, #20]
}
 80067f8:	4618      	mov	r0, r3
 80067fa:	3718      	adds	r7, #24
 80067fc:	46bd      	mov	sp, r7
 80067fe:	bd80      	pop	{r7, pc}
 8006800:	20016dc8 	.word	0x20016dc8
 8006804:	200000c8 	.word	0x200000c8
 8006808:	20016d98 	.word	0x20016d98
 800680c:	20016d8c 	.word	0x20016d8c

08006810 <IKS01A3_MOTION_SENSOR_SetOutputDataRate>:
  *         - MOTION_MAGNETO for instance 2
  * @param  Odr Output Data Rate value to be set
  * @retval BSP status
  */
int32_t IKS01A3_MOTION_SENSOR_SetOutputDataRate(uint32_t Instance, uint32_t Function, float Odr)
{
 8006810:	b580      	push	{r7, lr}
 8006812:	b086      	sub	sp, #24
 8006814:	af00      	add	r7, sp, #0
 8006816:	60f8      	str	r0, [r7, #12]
 8006818:	60b9      	str	r1, [r7, #8]
 800681a:	ed87 0a01 	vstr	s0, [r7, #4]
  int32_t ret;

  if (Instance >= IKS01A3_MOTION_INSTANCES_NBR)
 800681e:	68fb      	ldr	r3, [r7, #12]
 8006820:	2b02      	cmp	r3, #2
 8006822:	d903      	bls.n	800682c <IKS01A3_MOTION_SENSOR_SetOutputDataRate+0x1c>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8006824:	f06f 0301 	mvn.w	r3, #1
 8006828:	617b      	str	r3, [r7, #20]
 800682a:	e02a      	b.n	8006882 <IKS01A3_MOTION_SENSOR_SetOutputDataRate+0x72>
  }
  else
  {
    if ((MotionCtx[Instance].Functions & Function) == Function)
 800682c:	4a17      	ldr	r2, [pc, #92]	; (800688c <IKS01A3_MOTION_SENSOR_SetOutputDataRate+0x7c>)
 800682e:	68fb      	ldr	r3, [r7, #12]
 8006830:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8006834:	68bb      	ldr	r3, [r7, #8]
 8006836:	4013      	ands	r3, r2
 8006838:	68ba      	ldr	r2, [r7, #8]
 800683a:	429a      	cmp	r2, r3
 800683c:	d11e      	bne.n	800687c <IKS01A3_MOTION_SENSOR_SetOutputDataRate+0x6c>
    {
      if (MotionFuncDrv[Instance][FunctionIndex[Function]]->SetOutputDataRate(MotionCompObj[Instance], Odr) != BSP_ERROR_NONE)
 800683e:	4a14      	ldr	r2, [pc, #80]	; (8006890 <IKS01A3_MOTION_SENSOR_SetOutputDataRate+0x80>)
 8006840:	68bb      	ldr	r3, [r7, #8]
 8006842:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8006846:	4813      	ldr	r0, [pc, #76]	; (8006894 <IKS01A3_MOTION_SENSOR_SetOutputDataRate+0x84>)
 8006848:	68fa      	ldr	r2, [r7, #12]
 800684a:	4613      	mov	r3, r2
 800684c:	005b      	lsls	r3, r3, #1
 800684e:	4413      	add	r3, r2
 8006850:	440b      	add	r3, r1
 8006852:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8006856:	691b      	ldr	r3, [r3, #16]
 8006858:	490f      	ldr	r1, [pc, #60]	; (8006898 <IKS01A3_MOTION_SENSOR_SetOutputDataRate+0x88>)
 800685a:	68fa      	ldr	r2, [r7, #12]
 800685c:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8006860:	ed97 0a01 	vldr	s0, [r7, #4]
 8006864:	4610      	mov	r0, r2
 8006866:	4798      	blx	r3
 8006868:	4603      	mov	r3, r0
 800686a:	2b00      	cmp	r3, #0
 800686c:	d003      	beq.n	8006876 <IKS01A3_MOTION_SENSOR_SetOutputDataRate+0x66>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800686e:	f06f 0304 	mvn.w	r3, #4
 8006872:	617b      	str	r3, [r7, #20]
 8006874:	e005      	b.n	8006882 <IKS01A3_MOTION_SENSOR_SetOutputDataRate+0x72>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 8006876:	2300      	movs	r3, #0
 8006878:	617b      	str	r3, [r7, #20]
 800687a:	e002      	b.n	8006882 <IKS01A3_MOTION_SENSOR_SetOutputDataRate+0x72>
      }
    }
    else
    {
      ret = BSP_ERROR_WRONG_PARAM;
 800687c:	f06f 0301 	mvn.w	r3, #1
 8006880:	617b      	str	r3, [r7, #20]
    }
  }

  return ret;
 8006882:	697b      	ldr	r3, [r7, #20]
}
 8006884:	4618      	mov	r0, r3
 8006886:	3718      	adds	r7, #24
 8006888:	46bd      	mov	sp, r7
 800688a:	bd80      	pop	{r7, pc}
 800688c:	20016dc8 	.word	0x20016dc8
 8006890:	200000c8 	.word	0x200000c8
 8006894:	20016d98 	.word	0x20016d98
 8006898:	20016d8c 	.word	0x20016d8c

0800689c <LSM6DSO_0_Probe>:
/**
  * @brief  Register Bus IOs for instance 0 if component ID is OK
  * @retval BSP status
  */
static int32_t LSM6DSO_0_Probe(uint32_t Functions)
{
 800689c:	b580      	push	{r7, lr}
 800689e:	b094      	sub	sp, #80	; 0x50
 80068a0:	af00      	add	r7, sp, #0
 80068a2:	6078      	str	r0, [r7, #4]
  LSM6DSO_IO_t            io_ctx;
  uint8_t                 id;
  static LSM6DSO_Object_t lsm6dso_obj_0;
  LSM6DSO_Capabilities_t  cap;
  int32_t ret = BSP_ERROR_NONE;
 80068a4:	2300      	movs	r3, #0
 80068a6:	64fb      	str	r3, [r7, #76]	; 0x4c

  /* Configure the accelero driver */
  io_ctx.BusType     = LSM6DSO_I2C_BUS; /* I2C */
 80068a8:	2300      	movs	r3, #0
 80068aa:	637b      	str	r3, [r7, #52]	; 0x34
  io_ctx.Address     = LSM6DSO_I2C_ADD_H;
 80068ac:	23d7      	movs	r3, #215	; 0xd7
 80068ae:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  io_ctx.Init        = IKS01A3_I2C_Init;
 80068b2:	4b4b      	ldr	r3, [pc, #300]	; (80069e0 <LSM6DSO_0_Probe+0x144>)
 80068b4:	62fb      	str	r3, [r7, #44]	; 0x2c
  io_ctx.DeInit      = IKS01A3_I2C_DeInit;
 80068b6:	4b4b      	ldr	r3, [pc, #300]	; (80069e4 <LSM6DSO_0_Probe+0x148>)
 80068b8:	633b      	str	r3, [r7, #48]	; 0x30
  io_ctx.ReadReg     = IKS01A3_I2C_ReadReg;
 80068ba:	4b4b      	ldr	r3, [pc, #300]	; (80069e8 <LSM6DSO_0_Probe+0x14c>)
 80068bc:	643b      	str	r3, [r7, #64]	; 0x40
  io_ctx.WriteReg    = IKS01A3_I2C_WriteReg;
 80068be:	4b4b      	ldr	r3, [pc, #300]	; (80069ec <LSM6DSO_0_Probe+0x150>)
 80068c0:	63fb      	str	r3, [r7, #60]	; 0x3c
  io_ctx.GetTick     = IKS01A3_GetTick;
 80068c2:	4b4b      	ldr	r3, [pc, #300]	; (80069f0 <LSM6DSO_0_Probe+0x154>)
 80068c4:	647b      	str	r3, [r7, #68]	; 0x44
  io_ctx.Delay       = IKS01A3_Delay;
 80068c6:	4b4b      	ldr	r3, [pc, #300]	; (80069f4 <LSM6DSO_0_Probe+0x158>)
 80068c8:	64bb      	str	r3, [r7, #72]	; 0x48

  if (LSM6DSO_RegisterBusIO(&lsm6dso_obj_0, &io_ctx) != LSM6DSO_OK)
 80068ca:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80068ce:	4619      	mov	r1, r3
 80068d0:	4849      	ldr	r0, [pc, #292]	; (80069f8 <LSM6DSO_0_Probe+0x15c>)
 80068d2:	f7fd fd8d 	bl	80043f0 <LSM6DSO_RegisterBusIO>
 80068d6:	4603      	mov	r3, r0
 80068d8:	2b00      	cmp	r3, #0
 80068da:	d003      	beq.n	80068e4 <LSM6DSO_0_Probe+0x48>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 80068dc:	f06f 0306 	mvn.w	r3, #6
 80068e0:	64fb      	str	r3, [r7, #76]	; 0x4c
 80068e2:	e077      	b.n	80069d4 <LSM6DSO_0_Probe+0x138>
  }
  else if (LSM6DSO_ReadID(&lsm6dso_obj_0, &id) != LSM6DSO_OK)
 80068e4:	f107 032b 	add.w	r3, r7, #43	; 0x2b
 80068e8:	4619      	mov	r1, r3
 80068ea:	4843      	ldr	r0, [pc, #268]	; (80069f8 <LSM6DSO_0_Probe+0x15c>)
 80068ec:	f7fd fe86 	bl	80045fc <LSM6DSO_ReadID>
 80068f0:	4603      	mov	r3, r0
 80068f2:	2b00      	cmp	r3, #0
 80068f4:	d003      	beq.n	80068fe <LSM6DSO_0_Probe+0x62>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 80068f6:	f06f 0306 	mvn.w	r3, #6
 80068fa:	64fb      	str	r3, [r7, #76]	; 0x4c
 80068fc:	e06a      	b.n	80069d4 <LSM6DSO_0_Probe+0x138>
  }
  else if (id != LSM6DSO_ID)
 80068fe:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8006902:	2b6c      	cmp	r3, #108	; 0x6c
 8006904:	d003      	beq.n	800690e <LSM6DSO_0_Probe+0x72>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8006906:	f06f 0306 	mvn.w	r3, #6
 800690a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800690c:	e062      	b.n	80069d4 <LSM6DSO_0_Probe+0x138>
  }
  else
  {
    (void)LSM6DSO_GetCapabilities(&lsm6dso_obj_0, &cap);
 800690e:	f107 030c 	add.w	r3, r7, #12
 8006912:	4619      	mov	r1, r3
 8006914:	4838      	ldr	r0, [pc, #224]	; (80069f8 <LSM6DSO_0_Probe+0x15c>)
 8006916:	f7fd fe87 	bl	8004628 <LSM6DSO_GetCapabilities>
    MotionCtx[IKS01A3_LSM6DSO_0].Functions = ((uint32_t)cap.Gyro) | ((uint32_t)cap.Acc << 1) | ((uint32_t)cap.Magneto << 2);
 800691a:	7b7b      	ldrb	r3, [r7, #13]
 800691c:	461a      	mov	r2, r3
 800691e:	7b3b      	ldrb	r3, [r7, #12]
 8006920:	005b      	lsls	r3, r3, #1
 8006922:	431a      	orrs	r2, r3
 8006924:	7bbb      	ldrb	r3, [r7, #14]
 8006926:	009b      	lsls	r3, r3, #2
 8006928:	4313      	orrs	r3, r2
 800692a:	4a34      	ldr	r2, [pc, #208]	; (80069fc <LSM6DSO_0_Probe+0x160>)
 800692c:	6013      	str	r3, [r2, #0]

    MotionCompObj[IKS01A3_LSM6DSO_0] = &lsm6dso_obj_0;
 800692e:	4b34      	ldr	r3, [pc, #208]	; (8006a00 <LSM6DSO_0_Probe+0x164>)
 8006930:	4a31      	ldr	r2, [pc, #196]	; (80069f8 <LSM6DSO_0_Probe+0x15c>)
 8006932:	601a      	str	r2, [r3, #0]
    /* The second cast (void *) is added to bypass Misra R11.3 rule */
    MotionDrv[IKS01A3_LSM6DSO_0] = (MOTION_SENSOR_CommonDrv_t *)(void *)&LSM6DSO_COMMON_Driver;
 8006934:	4b33      	ldr	r3, [pc, #204]	; (8006a04 <LSM6DSO_0_Probe+0x168>)
 8006936:	4a34      	ldr	r2, [pc, #208]	; (8006a08 <LSM6DSO_0_Probe+0x16c>)
 8006938:	601a      	str	r2, [r3, #0]

    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_GYRO) == MOTION_GYRO) && (cap.Gyro == 1U))
 800693a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800693c:	2b00      	cmp	r3, #0
 800693e:	d11d      	bne.n	800697c <LSM6DSO_0_Probe+0xe0>
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	f003 0301 	and.w	r3, r3, #1
 8006946:	2b00      	cmp	r3, #0
 8006948:	d018      	beq.n	800697c <LSM6DSO_0_Probe+0xe0>
 800694a:	7b7b      	ldrb	r3, [r7, #13]
 800694c:	2b01      	cmp	r3, #1
 800694e:	d115      	bne.n	800697c <LSM6DSO_0_Probe+0xe0>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      MotionFuncDrv[IKS01A3_LSM6DSO_0][FunctionIndex[MOTION_GYRO]] = (MOTION_SENSOR_FuncDrv_t *)(void *)&LSM6DSO_GYRO_Driver;
 8006950:	4b2e      	ldr	r3, [pc, #184]	; (8006a0c <LSM6DSO_0_Probe+0x170>)
 8006952:	685b      	ldr	r3, [r3, #4]
 8006954:	4a2e      	ldr	r2, [pc, #184]	; (8006a10 <LSM6DSO_0_Probe+0x174>)
 8006956:	492f      	ldr	r1, [pc, #188]	; (8006a14 <LSM6DSO_0_Probe+0x178>)
 8006958:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

      if (MotionDrv[IKS01A3_LSM6DSO_0]->Init(MotionCompObj[IKS01A3_LSM6DSO_0]) != LSM6DSO_OK)
 800695c:	4b29      	ldr	r3, [pc, #164]	; (8006a04 <LSM6DSO_0_Probe+0x168>)
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	4a27      	ldr	r2, [pc, #156]	; (8006a00 <LSM6DSO_0_Probe+0x164>)
 8006964:	6812      	ldr	r2, [r2, #0]
 8006966:	4610      	mov	r0, r2
 8006968:	4798      	blx	r3
 800696a:	4603      	mov	r3, r0
 800696c:	2b00      	cmp	r3, #0
 800696e:	d003      	beq.n	8006978 <LSM6DSO_0_Probe+0xdc>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8006970:	f06f 0304 	mvn.w	r3, #4
 8006974:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006976:	e001      	b.n	800697c <LSM6DSO_0_Probe+0xe0>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 8006978:	2300      	movs	r3, #0
 800697a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_ACCELERO) == MOTION_ACCELERO) && (cap.Acc == 1U))
 800697c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800697e:	2b00      	cmp	r3, #0
 8006980:	d11d      	bne.n	80069be <LSM6DSO_0_Probe+0x122>
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	f003 0302 	and.w	r3, r3, #2
 8006988:	2b00      	cmp	r3, #0
 800698a:	d018      	beq.n	80069be <LSM6DSO_0_Probe+0x122>
 800698c:	7b3b      	ldrb	r3, [r7, #12]
 800698e:	2b01      	cmp	r3, #1
 8006990:	d115      	bne.n	80069be <LSM6DSO_0_Probe+0x122>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      MotionFuncDrv[IKS01A3_LSM6DSO_0][FunctionIndex[MOTION_ACCELERO]] = (MOTION_SENSOR_FuncDrv_t *)(
 8006992:	4b1e      	ldr	r3, [pc, #120]	; (8006a0c <LSM6DSO_0_Probe+0x170>)
 8006994:	689b      	ldr	r3, [r3, #8]
 8006996:	4a1e      	ldr	r2, [pc, #120]	; (8006a10 <LSM6DSO_0_Probe+0x174>)
 8006998:	491f      	ldr	r1, [pc, #124]	; (8006a18 <LSM6DSO_0_Probe+0x17c>)
 800699a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                                                                           void *)&LSM6DSO_ACC_Driver;

      if (MotionDrv[IKS01A3_LSM6DSO_0]->Init(MotionCompObj[IKS01A3_LSM6DSO_0]) != LSM6DSO_OK)
 800699e:	4b19      	ldr	r3, [pc, #100]	; (8006a04 <LSM6DSO_0_Probe+0x168>)
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	4a16      	ldr	r2, [pc, #88]	; (8006a00 <LSM6DSO_0_Probe+0x164>)
 80069a6:	6812      	ldr	r2, [r2, #0]
 80069a8:	4610      	mov	r0, r2
 80069aa:	4798      	blx	r3
 80069ac:	4603      	mov	r3, r0
 80069ae:	2b00      	cmp	r3, #0
 80069b0:	d003      	beq.n	80069ba <LSM6DSO_0_Probe+0x11e>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 80069b2:	f06f 0304 	mvn.w	r3, #4
 80069b6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80069b8:	e001      	b.n	80069be <LSM6DSO_0_Probe+0x122>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 80069ba:	2300      	movs	r3, #0
 80069bc:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_MAGNETO) == MOTION_MAGNETO))
 80069be:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80069c0:	2b00      	cmp	r3, #0
 80069c2:	d107      	bne.n	80069d4 <LSM6DSO_0_Probe+0x138>
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	f003 0304 	and.w	r3, r3, #4
 80069ca:	2b00      	cmp	r3, #0
 80069cc:	d002      	beq.n	80069d4 <LSM6DSO_0_Probe+0x138>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 80069ce:	f06f 0304 	mvn.w	r3, #4
 80069d2:	64fb      	str	r3, [r7, #76]	; 0x4c
    }
  }
  return ret;
 80069d4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
}
 80069d6:	4618      	mov	r0, r3
 80069d8:	3750      	adds	r7, #80	; 0x50
 80069da:	46bd      	mov	sp, r7
 80069dc:	bd80      	pop	{r7, pc}
 80069de:	bf00      	nop
 80069e0:	08001999 	.word	0x08001999
 80069e4:	080019fd 	.word	0x080019fd
 80069e8:	08001ab1 	.word	0x08001ab1
 80069ec:	08001a4d 	.word	0x08001a4d
 80069f0:	08001b15 	.word	0x08001b15
 80069f4:	08006da1 	.word	0x08006da1
 80069f8:	20016dd4 	.word	0x20016dd4
 80069fc:	20016dc8 	.word	0x20016dc8
 8006a00:	20016d8c 	.word	0x20016d8c
 8006a04:	20016dbc 	.word	0x20016dbc
 8006a08:	20000070 	.word	0x20000070
 8006a0c:	200000c8 	.word	0x200000c8
 8006a10:	20016d98 	.word	0x20016d98
 8006a14:	200000a4 	.word	0x200000a4
 8006a18:	20000080 	.word	0x20000080

08006a1c <LIS2DW12_0_Probe>:
/**
  * @brief  Register Bus IOs for instance 1 if component ID is OK
  * @retval BSP status
  */
static int32_t LIS2DW12_0_Probe(uint32_t Functions)
{
 8006a1c:	b580      	push	{r7, lr}
 8006a1e:	b094      	sub	sp, #80	; 0x50
 8006a20:	af00      	add	r7, sp, #0
 8006a22:	6078      	str	r0, [r7, #4]
  LIS2DW12_IO_t            io_ctx;
  uint8_t                  id;
  static LIS2DW12_Object_t lis2dw12_obj_0;
  LIS2DW12_Capabilities_t  cap;
  int32_t ret = BSP_ERROR_NONE;
 8006a24:	2300      	movs	r3, #0
 8006a26:	64fb      	str	r3, [r7, #76]	; 0x4c

  /* Configure the accelero driver */
  io_ctx.BusType     = LIS2DW12_I2C_BUS; /* I2C */
 8006a28:	2300      	movs	r3, #0
 8006a2a:	637b      	str	r3, [r7, #52]	; 0x34
  io_ctx.Address     = LIS2DW12_I2C_ADD_H;
 8006a2c:	2333      	movs	r3, #51	; 0x33
 8006a2e:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  io_ctx.Init        = IKS01A3_I2C_Init;
 8006a32:	4b40      	ldr	r3, [pc, #256]	; (8006b34 <LIS2DW12_0_Probe+0x118>)
 8006a34:	62fb      	str	r3, [r7, #44]	; 0x2c
  io_ctx.DeInit      = IKS01A3_I2C_DeInit;
 8006a36:	4b40      	ldr	r3, [pc, #256]	; (8006b38 <LIS2DW12_0_Probe+0x11c>)
 8006a38:	633b      	str	r3, [r7, #48]	; 0x30
  io_ctx.ReadReg     = IKS01A3_I2C_ReadReg;
 8006a3a:	4b40      	ldr	r3, [pc, #256]	; (8006b3c <LIS2DW12_0_Probe+0x120>)
 8006a3c:	643b      	str	r3, [r7, #64]	; 0x40
  io_ctx.WriteReg    = IKS01A3_I2C_WriteReg;
 8006a3e:	4b40      	ldr	r3, [pc, #256]	; (8006b40 <LIS2DW12_0_Probe+0x124>)
 8006a40:	63fb      	str	r3, [r7, #60]	; 0x3c
  io_ctx.GetTick     = IKS01A3_GetTick;
 8006a42:	4b40      	ldr	r3, [pc, #256]	; (8006b44 <LIS2DW12_0_Probe+0x128>)
 8006a44:	647b      	str	r3, [r7, #68]	; 0x44
  io_ctx.Delay       = IKS01A3_Delay;
 8006a46:	4b40      	ldr	r3, [pc, #256]	; (8006b48 <LIS2DW12_0_Probe+0x12c>)
 8006a48:	64bb      	str	r3, [r7, #72]	; 0x48

  if (LIS2DW12_RegisterBusIO(&lis2dw12_obj_0, &io_ctx) != LIS2DW12_OK)
 8006a4a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8006a4e:	4619      	mov	r1, r3
 8006a50:	483e      	ldr	r0, [pc, #248]	; (8006b4c <LIS2DW12_0_Probe+0x130>)
 8006a52:	f7fb f973 	bl	8001d3c <LIS2DW12_RegisterBusIO>
 8006a56:	4603      	mov	r3, r0
 8006a58:	2b00      	cmp	r3, #0
 8006a5a:	d003      	beq.n	8006a64 <LIS2DW12_0_Probe+0x48>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8006a5c:	f06f 0306 	mvn.w	r3, #6
 8006a60:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006a62:	e062      	b.n	8006b2a <LIS2DW12_0_Probe+0x10e>
  }
  else if (LIS2DW12_ReadID(&lis2dw12_obj_0, &id) != LIS2DW12_OK)
 8006a64:	f107 032b 	add.w	r3, r7, #43	; 0x2b
 8006a68:	4619      	mov	r1, r3
 8006a6a:	4838      	ldr	r0, [pc, #224]	; (8006b4c <LIS2DW12_0_Probe+0x130>)
 8006a6c:	f7fb fa54 	bl	8001f18 <LIS2DW12_ReadID>
 8006a70:	4603      	mov	r3, r0
 8006a72:	2b00      	cmp	r3, #0
 8006a74:	d003      	beq.n	8006a7e <LIS2DW12_0_Probe+0x62>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8006a76:	f06f 0306 	mvn.w	r3, #6
 8006a7a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006a7c:	e055      	b.n	8006b2a <LIS2DW12_0_Probe+0x10e>
  }
  else if (id != LIS2DW12_ID)
 8006a7e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8006a82:	2b44      	cmp	r3, #68	; 0x44
 8006a84:	d003      	beq.n	8006a8e <LIS2DW12_0_Probe+0x72>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8006a86:	f06f 0306 	mvn.w	r3, #6
 8006a8a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006a8c:	e04d      	b.n	8006b2a <LIS2DW12_0_Probe+0x10e>
  }
  else
  {
    (void)LIS2DW12_GetCapabilities(&lis2dw12_obj_0, &cap);
 8006a8e:	f107 030c 	add.w	r3, r7, #12
 8006a92:	4619      	mov	r1, r3
 8006a94:	482d      	ldr	r0, [pc, #180]	; (8006b4c <LIS2DW12_0_Probe+0x130>)
 8006a96:	f7fb fa55 	bl	8001f44 <LIS2DW12_GetCapabilities>
    MotionCtx[IKS01A3_LIS2DW12_0].Functions = ((uint32_t)cap.Gyro) | ((uint32_t)cap.Acc << 1) | ((uint32_t)cap.Magneto << 2);
 8006a9a:	7b7b      	ldrb	r3, [r7, #13]
 8006a9c:	461a      	mov	r2, r3
 8006a9e:	7b3b      	ldrb	r3, [r7, #12]
 8006aa0:	005b      	lsls	r3, r3, #1
 8006aa2:	431a      	orrs	r2, r3
 8006aa4:	7bbb      	ldrb	r3, [r7, #14]
 8006aa6:	009b      	lsls	r3, r3, #2
 8006aa8:	4313      	orrs	r3, r2
 8006aaa:	4a29      	ldr	r2, [pc, #164]	; (8006b50 <LIS2DW12_0_Probe+0x134>)
 8006aac:	6053      	str	r3, [r2, #4]

    MotionCompObj[IKS01A3_LIS2DW12_0] = &lis2dw12_obj_0;
 8006aae:	4b29      	ldr	r3, [pc, #164]	; (8006b54 <LIS2DW12_0_Probe+0x138>)
 8006ab0:	4a26      	ldr	r2, [pc, #152]	; (8006b4c <LIS2DW12_0_Probe+0x130>)
 8006ab2:	605a      	str	r2, [r3, #4]
    /* The second cast (void *) is added to bypass Misra R11.3 rule */
    MotionDrv[IKS01A3_LIS2DW12_0] = (MOTION_SENSOR_CommonDrv_t *)(void *)&LIS2DW12_COMMON_Driver;
 8006ab4:	4b28      	ldr	r3, [pc, #160]	; (8006b58 <LIS2DW12_0_Probe+0x13c>)
 8006ab6:	4a29      	ldr	r2, [pc, #164]	; (8006b5c <LIS2DW12_0_Probe+0x140>)
 8006ab8:	605a      	str	r2, [r3, #4]

    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_ACCELERO) == MOTION_ACCELERO) && (cap.Acc == 1U))
 8006aba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006abc:	2b00      	cmp	r3, #0
 8006abe:	d11e      	bne.n	8006afe <LIS2DW12_0_Probe+0xe2>
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	f003 0302 	and.w	r3, r3, #2
 8006ac6:	2b00      	cmp	r3, #0
 8006ac8:	d019      	beq.n	8006afe <LIS2DW12_0_Probe+0xe2>
 8006aca:	7b3b      	ldrb	r3, [r7, #12]
 8006acc:	2b01      	cmp	r3, #1
 8006ace:	d116      	bne.n	8006afe <LIS2DW12_0_Probe+0xe2>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      MotionFuncDrv[IKS01A3_LIS2DW12_0][FunctionIndex[MOTION_ACCELERO]] = (MOTION_SENSOR_FuncDrv_t *)(
 8006ad0:	4b23      	ldr	r3, [pc, #140]	; (8006b60 <LIS2DW12_0_Probe+0x144>)
 8006ad2:	689b      	ldr	r3, [r3, #8]
 8006ad4:	4a23      	ldr	r2, [pc, #140]	; (8006b64 <LIS2DW12_0_Probe+0x148>)
 8006ad6:	3303      	adds	r3, #3
 8006ad8:	4923      	ldr	r1, [pc, #140]	; (8006b68 <LIS2DW12_0_Probe+0x14c>)
 8006ada:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                                                                            void *)&LIS2DW12_ACC_Driver;

      if (MotionDrv[IKS01A3_LIS2DW12_0]->Init(MotionCompObj[IKS01A3_LIS2DW12_0]) != LIS2DW12_OK)
 8006ade:	4b1e      	ldr	r3, [pc, #120]	; (8006b58 <LIS2DW12_0_Probe+0x13c>)
 8006ae0:	685b      	ldr	r3, [r3, #4]
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	4a1b      	ldr	r2, [pc, #108]	; (8006b54 <LIS2DW12_0_Probe+0x138>)
 8006ae6:	6852      	ldr	r2, [r2, #4]
 8006ae8:	4610      	mov	r0, r2
 8006aea:	4798      	blx	r3
 8006aec:	4603      	mov	r3, r0
 8006aee:	2b00      	cmp	r3, #0
 8006af0:	d003      	beq.n	8006afa <LIS2DW12_0_Probe+0xde>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8006af2:	f06f 0304 	mvn.w	r3, #4
 8006af6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006af8:	e001      	b.n	8006afe <LIS2DW12_0_Probe+0xe2>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 8006afa:	2300      	movs	r3, #0
 8006afc:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_GYRO) == MOTION_GYRO))
 8006afe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006b00:	2b00      	cmp	r3, #0
 8006b02:	d107      	bne.n	8006b14 <LIS2DW12_0_Probe+0xf8>
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	f003 0301 	and.w	r3, r3, #1
 8006b0a:	2b00      	cmp	r3, #0
 8006b0c:	d002      	beq.n	8006b14 <LIS2DW12_0_Probe+0xf8>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8006b0e:	f06f 0304 	mvn.w	r3, #4
 8006b12:	64fb      	str	r3, [r7, #76]	; 0x4c
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_MAGNETO) == MOTION_MAGNETO))
 8006b14:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006b16:	2b00      	cmp	r3, #0
 8006b18:	d107      	bne.n	8006b2a <LIS2DW12_0_Probe+0x10e>
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	f003 0304 	and.w	r3, r3, #4
 8006b20:	2b00      	cmp	r3, #0
 8006b22:	d002      	beq.n	8006b2a <LIS2DW12_0_Probe+0x10e>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8006b24:	f06f 0304 	mvn.w	r3, #4
 8006b28:	64fb      	str	r3, [r7, #76]	; 0x4c
    }
  }
  return ret;
 8006b2a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
}
 8006b2c:	4618      	mov	r0, r3
 8006b2e:	3750      	adds	r7, #80	; 0x50
 8006b30:	46bd      	mov	sp, r7
 8006b32:	bd80      	pop	{r7, pc}
 8006b34:	08001999 	.word	0x08001999
 8006b38:	080019fd 	.word	0x080019fd
 8006b3c:	08001ab1 	.word	0x08001ab1
 8006b40:	08001a4d 	.word	0x08001a4d
 8006b44:	08001b15 	.word	0x08001b15
 8006b48:	08006da1 	.word	0x08006da1
 8006b4c:	20016e0c 	.word	0x20016e0c
 8006b50:	20016dc8 	.word	0x20016dc8
 8006b54:	20016d8c 	.word	0x20016d8c
 8006b58:	20016dbc 	.word	0x20016dbc
 8006b5c:	20000008 	.word	0x20000008
 8006b60:	200000c8 	.word	0x200000c8
 8006b64:	20016d98 	.word	0x20016d98
 8006b68:	20000018 	.word	0x20000018

08006b6c <LIS2MDL_0_Probe>:
/**
  * @brief  Register Bus IOs for instance 1 if component ID is OK
  * @retval BSP status
  */
static int32_t LIS2MDL_0_Probe(uint32_t Functions)
{
 8006b6c:	b580      	push	{r7, lr}
 8006b6e:	b094      	sub	sp, #80	; 0x50
 8006b70:	af00      	add	r7, sp, #0
 8006b72:	6078      	str	r0, [r7, #4]
  LIS2MDL_IO_t            io_ctx;
  uint8_t                 id;
  static LIS2MDL_Object_t lis2mdl_obj_0;
  LIS2MDL_Capabilities_t  cap;
  int32_t                 ret = BSP_ERROR_NONE;
 8006b74:	2300      	movs	r3, #0
 8006b76:	64fb      	str	r3, [r7, #76]	; 0x4c

  /* Configure the accelero driver */
  io_ctx.BusType     = LIS2MDL_I2C_BUS; /* I2C */
 8006b78:	2300      	movs	r3, #0
 8006b7a:	637b      	str	r3, [r7, #52]	; 0x34
  io_ctx.Address     = LIS2MDL_I2C_ADD;
 8006b7c:	233d      	movs	r3, #61	; 0x3d
 8006b7e:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  io_ctx.Init        = IKS01A3_I2C_Init;
 8006b82:	4b40      	ldr	r3, [pc, #256]	; (8006c84 <LIS2MDL_0_Probe+0x118>)
 8006b84:	62fb      	str	r3, [r7, #44]	; 0x2c
  io_ctx.DeInit      = IKS01A3_I2C_DeInit;
 8006b86:	4b40      	ldr	r3, [pc, #256]	; (8006c88 <LIS2MDL_0_Probe+0x11c>)
 8006b88:	633b      	str	r3, [r7, #48]	; 0x30
  io_ctx.ReadReg     = IKS01A3_I2C_ReadReg;
 8006b8a:	4b40      	ldr	r3, [pc, #256]	; (8006c8c <LIS2MDL_0_Probe+0x120>)
 8006b8c:	643b      	str	r3, [r7, #64]	; 0x40
  io_ctx.WriteReg    = IKS01A3_I2C_WriteReg;
 8006b8e:	4b40      	ldr	r3, [pc, #256]	; (8006c90 <LIS2MDL_0_Probe+0x124>)
 8006b90:	63fb      	str	r3, [r7, #60]	; 0x3c
  io_ctx.GetTick     = IKS01A3_GetTick;
 8006b92:	4b40      	ldr	r3, [pc, #256]	; (8006c94 <LIS2MDL_0_Probe+0x128>)
 8006b94:	647b      	str	r3, [r7, #68]	; 0x44
  io_ctx.Delay       = IKS01A3_Delay;
 8006b96:	4b40      	ldr	r3, [pc, #256]	; (8006c98 <LIS2MDL_0_Probe+0x12c>)
 8006b98:	64bb      	str	r3, [r7, #72]	; 0x48

  if (LIS2MDL_RegisterBusIO(&lis2mdl_obj_0, &io_ctx) != LIS2MDL_OK)
 8006b9a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8006b9e:	4619      	mov	r1, r3
 8006ba0:	483e      	ldr	r0, [pc, #248]	; (8006c9c <LIS2MDL_0_Probe+0x130>)
 8006ba2:	f7fc fc1f 	bl	80033e4 <LIS2MDL_RegisterBusIO>
 8006ba6:	4603      	mov	r3, r0
 8006ba8:	2b00      	cmp	r3, #0
 8006baa:	d003      	beq.n	8006bb4 <LIS2MDL_0_Probe+0x48>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8006bac:	f06f 0306 	mvn.w	r3, #6
 8006bb0:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006bb2:	e062      	b.n	8006c7a <LIS2MDL_0_Probe+0x10e>
  }
  else if (LIS2MDL_ReadID(&lis2mdl_obj_0, &id) != LIS2MDL_OK)
 8006bb4:	f107 032b 	add.w	r3, r7, #43	; 0x2b
 8006bb8:	4619      	mov	r1, r3
 8006bba:	4838      	ldr	r0, [pc, #224]	; (8006c9c <LIS2MDL_0_Probe+0x130>)
 8006bbc:	f7fc fd2e 	bl	800361c <LIS2MDL_ReadID>
 8006bc0:	4603      	mov	r3, r0
 8006bc2:	2b00      	cmp	r3, #0
 8006bc4:	d003      	beq.n	8006bce <LIS2MDL_0_Probe+0x62>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8006bc6:	f06f 0306 	mvn.w	r3, #6
 8006bca:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006bcc:	e055      	b.n	8006c7a <LIS2MDL_0_Probe+0x10e>
  }
  else if (id != LIS2MDL_ID)
 8006bce:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8006bd2:	2b40      	cmp	r3, #64	; 0x40
 8006bd4:	d003      	beq.n	8006bde <LIS2MDL_0_Probe+0x72>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8006bd6:	f06f 0306 	mvn.w	r3, #6
 8006bda:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006bdc:	e04d      	b.n	8006c7a <LIS2MDL_0_Probe+0x10e>
  }
  else
  {
    (void)LIS2MDL_GetCapabilities(&lis2mdl_obj_0, &cap);
 8006bde:	f107 030c 	add.w	r3, r7, #12
 8006be2:	4619      	mov	r1, r3
 8006be4:	482d      	ldr	r0, [pc, #180]	; (8006c9c <LIS2MDL_0_Probe+0x130>)
 8006be6:	f7fc fd3f 	bl	8003668 <LIS2MDL_GetCapabilities>
    MotionCtx[IKS01A3_LIS2MDL_0].Functions = ((uint32_t)cap.Gyro) | ((uint32_t)cap.Acc << 1) | ((uint32_t)cap.Magneto << 2);
 8006bea:	7b7b      	ldrb	r3, [r7, #13]
 8006bec:	461a      	mov	r2, r3
 8006bee:	7b3b      	ldrb	r3, [r7, #12]
 8006bf0:	005b      	lsls	r3, r3, #1
 8006bf2:	431a      	orrs	r2, r3
 8006bf4:	7bbb      	ldrb	r3, [r7, #14]
 8006bf6:	009b      	lsls	r3, r3, #2
 8006bf8:	4313      	orrs	r3, r2
 8006bfa:	4a29      	ldr	r2, [pc, #164]	; (8006ca0 <LIS2MDL_0_Probe+0x134>)
 8006bfc:	6093      	str	r3, [r2, #8]

    MotionCompObj[IKS01A3_LIS2MDL_0] = &lis2mdl_obj_0;
 8006bfe:	4b29      	ldr	r3, [pc, #164]	; (8006ca4 <LIS2MDL_0_Probe+0x138>)
 8006c00:	4a26      	ldr	r2, [pc, #152]	; (8006c9c <LIS2MDL_0_Probe+0x130>)
 8006c02:	609a      	str	r2, [r3, #8]
    /* The second cast (void *) is added to bypass Misra R11.3 rule */
    MotionDrv[IKS01A3_LIS2MDL_0] = (MOTION_SENSOR_CommonDrv_t *)(void *)&LIS2MDL_COMMON_Driver;
 8006c04:	4b28      	ldr	r3, [pc, #160]	; (8006ca8 <LIS2MDL_0_Probe+0x13c>)
 8006c06:	4a29      	ldr	r2, [pc, #164]	; (8006cac <LIS2MDL_0_Probe+0x140>)
 8006c08:	609a      	str	r2, [r3, #8]

    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_MAGNETO) == MOTION_MAGNETO) && (cap.Magneto == 1U))
 8006c0a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006c0c:	2b00      	cmp	r3, #0
 8006c0e:	d11e      	bne.n	8006c4e <LIS2MDL_0_Probe+0xe2>
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	f003 0304 	and.w	r3, r3, #4
 8006c16:	2b00      	cmp	r3, #0
 8006c18:	d019      	beq.n	8006c4e <LIS2MDL_0_Probe+0xe2>
 8006c1a:	7bbb      	ldrb	r3, [r7, #14]
 8006c1c:	2b01      	cmp	r3, #1
 8006c1e:	d116      	bne.n	8006c4e <LIS2MDL_0_Probe+0xe2>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      MotionFuncDrv[IKS01A3_LIS2MDL_0][FunctionIndex[MOTION_MAGNETO]] = (MOTION_SENSOR_FuncDrv_t *)(
 8006c20:	4b23      	ldr	r3, [pc, #140]	; (8006cb0 <LIS2MDL_0_Probe+0x144>)
 8006c22:	691b      	ldr	r3, [r3, #16]
 8006c24:	4a23      	ldr	r2, [pc, #140]	; (8006cb4 <LIS2MDL_0_Probe+0x148>)
 8006c26:	3306      	adds	r3, #6
 8006c28:	4923      	ldr	r1, [pc, #140]	; (8006cb8 <LIS2MDL_0_Probe+0x14c>)
 8006c2a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                                                                          void *)&LIS2MDL_MAG_Driver;

      if (MotionDrv[IKS01A3_LIS2MDL_0]->Init(MotionCompObj[IKS01A3_LIS2MDL_0]) != LIS2MDL_OK)
 8006c2e:	4b1e      	ldr	r3, [pc, #120]	; (8006ca8 <LIS2MDL_0_Probe+0x13c>)
 8006c30:	689b      	ldr	r3, [r3, #8]
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	4a1b      	ldr	r2, [pc, #108]	; (8006ca4 <LIS2MDL_0_Probe+0x138>)
 8006c36:	6892      	ldr	r2, [r2, #8]
 8006c38:	4610      	mov	r0, r2
 8006c3a:	4798      	blx	r3
 8006c3c:	4603      	mov	r3, r0
 8006c3e:	2b00      	cmp	r3, #0
 8006c40:	d003      	beq.n	8006c4a <LIS2MDL_0_Probe+0xde>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8006c42:	f06f 0304 	mvn.w	r3, #4
 8006c46:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006c48:	e001      	b.n	8006c4e <LIS2MDL_0_Probe+0xe2>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 8006c4a:	2300      	movs	r3, #0
 8006c4c:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_ACCELERO) == MOTION_ACCELERO))
 8006c4e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006c50:	2b00      	cmp	r3, #0
 8006c52:	d107      	bne.n	8006c64 <LIS2MDL_0_Probe+0xf8>
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	f003 0302 	and.w	r3, r3, #2
 8006c5a:	2b00      	cmp	r3, #0
 8006c5c:	d002      	beq.n	8006c64 <LIS2MDL_0_Probe+0xf8>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8006c5e:	f06f 0304 	mvn.w	r3, #4
 8006c62:	64fb      	str	r3, [r7, #76]	; 0x4c
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_GYRO) == MOTION_GYRO))
 8006c64:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006c66:	2b00      	cmp	r3, #0
 8006c68:	d107      	bne.n	8006c7a <LIS2MDL_0_Probe+0x10e>
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	f003 0301 	and.w	r3, r3, #1
 8006c70:	2b00      	cmp	r3, #0
 8006c72:	d002      	beq.n	8006c7a <LIS2MDL_0_Probe+0x10e>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8006c74:	f06f 0304 	mvn.w	r3, #4
 8006c78:	64fb      	str	r3, [r7, #76]	; 0x4c
    }
  }
  return ret;
 8006c7a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
}
 8006c7c:	4618      	mov	r0, r3
 8006c7e:	3750      	adds	r7, #80	; 0x50
 8006c80:	46bd      	mov	sp, r7
 8006c82:	bd80      	pop	{r7, pc}
 8006c84:	08001999 	.word	0x08001999
 8006c88:	080019fd 	.word	0x080019fd
 8006c8c:	08001ab1 	.word	0x08001ab1
 8006c90:	08001a4d 	.word	0x08001a4d
 8006c94:	08001b15 	.word	0x08001b15
 8006c98:	08006da1 	.word	0x08006da1
 8006c9c:	20016e48 	.word	0x20016e48
 8006ca0:	20016dc8 	.word	0x20016dc8
 8006ca4:	20016d8c 	.word	0x20016d8c
 8006ca8:	20016dbc 	.word	0x20016dbc
 8006cac:	2000003c 	.word	0x2000003c
 8006cb0:	200000c8 	.word	0x200000c8
 8006cb4:	20016d98 	.word	0x20016d98
 8006cb8:	2000004c 	.word	0x2000004c

08006cbc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8006cbc:	b580      	push	{r7, lr}
 8006cbe:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8006cc0:	4b0e      	ldr	r3, [pc, #56]	; (8006cfc <HAL_Init+0x40>)
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	4a0d      	ldr	r2, [pc, #52]	; (8006cfc <HAL_Init+0x40>)
 8006cc6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006cca:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8006ccc:	4b0b      	ldr	r3, [pc, #44]	; (8006cfc <HAL_Init+0x40>)
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	4a0a      	ldr	r2, [pc, #40]	; (8006cfc <HAL_Init+0x40>)
 8006cd2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8006cd6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8006cd8:	4b08      	ldr	r3, [pc, #32]	; (8006cfc <HAL_Init+0x40>)
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	4a07      	ldr	r2, [pc, #28]	; (8006cfc <HAL_Init+0x40>)
 8006cde:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006ce2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8006ce4:	2003      	movs	r0, #3
 8006ce6:	f000 f94f 	bl	8006f88 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8006cea:	2000      	movs	r0, #0
 8006cec:	f000 f808 	bl	8006d00 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8006cf0:	f7fa fcb8 	bl	8001664 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8006cf4:	2300      	movs	r3, #0
}
 8006cf6:	4618      	mov	r0, r3
 8006cf8:	bd80      	pop	{r7, pc}
 8006cfa:	bf00      	nop
 8006cfc:	40023c00 	.word	0x40023c00

08006d00 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8006d00:	b580      	push	{r7, lr}
 8006d02:	b082      	sub	sp, #8
 8006d04:	af00      	add	r7, sp, #0
 8006d06:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8006d08:	4b12      	ldr	r3, [pc, #72]	; (8006d54 <HAL_InitTick+0x54>)
 8006d0a:	681a      	ldr	r2, [r3, #0]
 8006d0c:	4b12      	ldr	r3, [pc, #72]	; (8006d58 <HAL_InitTick+0x58>)
 8006d0e:	781b      	ldrb	r3, [r3, #0]
 8006d10:	4619      	mov	r1, r3
 8006d12:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8006d16:	fbb3 f3f1 	udiv	r3, r3, r1
 8006d1a:	fbb2 f3f3 	udiv	r3, r2, r3
 8006d1e:	4618      	mov	r0, r3
 8006d20:	f000 f967 	bl	8006ff2 <HAL_SYSTICK_Config>
 8006d24:	4603      	mov	r3, r0
 8006d26:	2b00      	cmp	r3, #0
 8006d28:	d001      	beq.n	8006d2e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8006d2a:	2301      	movs	r3, #1
 8006d2c:	e00e      	b.n	8006d4c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	2b0f      	cmp	r3, #15
 8006d32:	d80a      	bhi.n	8006d4a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8006d34:	2200      	movs	r2, #0
 8006d36:	6879      	ldr	r1, [r7, #4]
 8006d38:	f04f 30ff 	mov.w	r0, #4294967295
 8006d3c:	f000 f92f 	bl	8006f9e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8006d40:	4a06      	ldr	r2, [pc, #24]	; (8006d5c <HAL_InitTick+0x5c>)
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8006d46:	2300      	movs	r3, #0
 8006d48:	e000      	b.n	8006d4c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8006d4a:	2301      	movs	r3, #1
}
 8006d4c:	4618      	mov	r0, r3
 8006d4e:	3708      	adds	r7, #8
 8006d50:	46bd      	mov	sp, r7
 8006d52:	bd80      	pop	{r7, pc}
 8006d54:	20000004 	.word	0x20000004
 8006d58:	200000e0 	.word	0x200000e0
 8006d5c:	200000dc 	.word	0x200000dc

08006d60 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8006d60:	b480      	push	{r7}
 8006d62:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8006d64:	4b06      	ldr	r3, [pc, #24]	; (8006d80 <HAL_IncTick+0x20>)
 8006d66:	781b      	ldrb	r3, [r3, #0]
 8006d68:	461a      	mov	r2, r3
 8006d6a:	4b06      	ldr	r3, [pc, #24]	; (8006d84 <HAL_IncTick+0x24>)
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	4413      	add	r3, r2
 8006d70:	4a04      	ldr	r2, [pc, #16]	; (8006d84 <HAL_IncTick+0x24>)
 8006d72:	6013      	str	r3, [r2, #0]
}
 8006d74:	bf00      	nop
 8006d76:	46bd      	mov	sp, r7
 8006d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d7c:	4770      	bx	lr
 8006d7e:	bf00      	nop
 8006d80:	200000e0 	.word	0x200000e0
 8006d84:	20016e7c 	.word	0x20016e7c

08006d88 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8006d88:	b480      	push	{r7}
 8006d8a:	af00      	add	r7, sp, #0
  return uwTick;
 8006d8c:	4b03      	ldr	r3, [pc, #12]	; (8006d9c <HAL_GetTick+0x14>)
 8006d8e:	681b      	ldr	r3, [r3, #0]
}
 8006d90:	4618      	mov	r0, r3
 8006d92:	46bd      	mov	sp, r7
 8006d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d98:	4770      	bx	lr
 8006d9a:	bf00      	nop
 8006d9c:	20016e7c 	.word	0x20016e7c

08006da0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8006da0:	b580      	push	{r7, lr}
 8006da2:	b084      	sub	sp, #16
 8006da4:	af00      	add	r7, sp, #0
 8006da6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8006da8:	f7ff ffee 	bl	8006d88 <HAL_GetTick>
 8006dac:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8006db2:	68fb      	ldr	r3, [r7, #12]
 8006db4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006db8:	d005      	beq.n	8006dc6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8006dba:	4b0a      	ldr	r3, [pc, #40]	; (8006de4 <HAL_Delay+0x44>)
 8006dbc:	781b      	ldrb	r3, [r3, #0]
 8006dbe:	461a      	mov	r2, r3
 8006dc0:	68fb      	ldr	r3, [r7, #12]
 8006dc2:	4413      	add	r3, r2
 8006dc4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8006dc6:	bf00      	nop
 8006dc8:	f7ff ffde 	bl	8006d88 <HAL_GetTick>
 8006dcc:	4602      	mov	r2, r0
 8006dce:	68bb      	ldr	r3, [r7, #8]
 8006dd0:	1ad3      	subs	r3, r2, r3
 8006dd2:	68fa      	ldr	r2, [r7, #12]
 8006dd4:	429a      	cmp	r2, r3
 8006dd6:	d8f7      	bhi.n	8006dc8 <HAL_Delay+0x28>
  {
  }
}
 8006dd8:	bf00      	nop
 8006dda:	bf00      	nop
 8006ddc:	3710      	adds	r7, #16
 8006dde:	46bd      	mov	sp, r7
 8006de0:	bd80      	pop	{r7, pc}
 8006de2:	bf00      	nop
 8006de4:	200000e0 	.word	0x200000e0

08006de8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006de8:	b480      	push	{r7}
 8006dea:	b085      	sub	sp, #20
 8006dec:	af00      	add	r7, sp, #0
 8006dee:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	f003 0307 	and.w	r3, r3, #7
 8006df6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8006df8:	4b0c      	ldr	r3, [pc, #48]	; (8006e2c <__NVIC_SetPriorityGrouping+0x44>)
 8006dfa:	68db      	ldr	r3, [r3, #12]
 8006dfc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8006dfe:	68ba      	ldr	r2, [r7, #8]
 8006e00:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8006e04:	4013      	ands	r3, r2
 8006e06:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8006e08:	68fb      	ldr	r3, [r7, #12]
 8006e0a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8006e0c:	68bb      	ldr	r3, [r7, #8]
 8006e0e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8006e10:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8006e14:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006e18:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8006e1a:	4a04      	ldr	r2, [pc, #16]	; (8006e2c <__NVIC_SetPriorityGrouping+0x44>)
 8006e1c:	68bb      	ldr	r3, [r7, #8]
 8006e1e:	60d3      	str	r3, [r2, #12]
}
 8006e20:	bf00      	nop
 8006e22:	3714      	adds	r7, #20
 8006e24:	46bd      	mov	sp, r7
 8006e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e2a:	4770      	bx	lr
 8006e2c:	e000ed00 	.word	0xe000ed00

08006e30 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8006e30:	b480      	push	{r7}
 8006e32:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8006e34:	4b04      	ldr	r3, [pc, #16]	; (8006e48 <__NVIC_GetPriorityGrouping+0x18>)
 8006e36:	68db      	ldr	r3, [r3, #12]
 8006e38:	0a1b      	lsrs	r3, r3, #8
 8006e3a:	f003 0307 	and.w	r3, r3, #7
}
 8006e3e:	4618      	mov	r0, r3
 8006e40:	46bd      	mov	sp, r7
 8006e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e46:	4770      	bx	lr
 8006e48:	e000ed00 	.word	0xe000ed00

08006e4c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006e4c:	b480      	push	{r7}
 8006e4e:	b083      	sub	sp, #12
 8006e50:	af00      	add	r7, sp, #0
 8006e52:	4603      	mov	r3, r0
 8006e54:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006e56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006e5a:	2b00      	cmp	r3, #0
 8006e5c:	db0b      	blt.n	8006e76 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006e5e:	79fb      	ldrb	r3, [r7, #7]
 8006e60:	f003 021f 	and.w	r2, r3, #31
 8006e64:	4907      	ldr	r1, [pc, #28]	; (8006e84 <__NVIC_EnableIRQ+0x38>)
 8006e66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006e6a:	095b      	lsrs	r3, r3, #5
 8006e6c:	2001      	movs	r0, #1
 8006e6e:	fa00 f202 	lsl.w	r2, r0, r2
 8006e72:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8006e76:	bf00      	nop
 8006e78:	370c      	adds	r7, #12
 8006e7a:	46bd      	mov	sp, r7
 8006e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e80:	4770      	bx	lr
 8006e82:	bf00      	nop
 8006e84:	e000e100 	.word	0xe000e100

08006e88 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8006e88:	b480      	push	{r7}
 8006e8a:	b083      	sub	sp, #12
 8006e8c:	af00      	add	r7, sp, #0
 8006e8e:	4603      	mov	r3, r0
 8006e90:	6039      	str	r1, [r7, #0]
 8006e92:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006e94:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006e98:	2b00      	cmp	r3, #0
 8006e9a:	db0a      	blt.n	8006eb2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006e9c:	683b      	ldr	r3, [r7, #0]
 8006e9e:	b2da      	uxtb	r2, r3
 8006ea0:	490c      	ldr	r1, [pc, #48]	; (8006ed4 <__NVIC_SetPriority+0x4c>)
 8006ea2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006ea6:	0112      	lsls	r2, r2, #4
 8006ea8:	b2d2      	uxtb	r2, r2
 8006eaa:	440b      	add	r3, r1
 8006eac:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8006eb0:	e00a      	b.n	8006ec8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006eb2:	683b      	ldr	r3, [r7, #0]
 8006eb4:	b2da      	uxtb	r2, r3
 8006eb6:	4908      	ldr	r1, [pc, #32]	; (8006ed8 <__NVIC_SetPriority+0x50>)
 8006eb8:	79fb      	ldrb	r3, [r7, #7]
 8006eba:	f003 030f 	and.w	r3, r3, #15
 8006ebe:	3b04      	subs	r3, #4
 8006ec0:	0112      	lsls	r2, r2, #4
 8006ec2:	b2d2      	uxtb	r2, r2
 8006ec4:	440b      	add	r3, r1
 8006ec6:	761a      	strb	r2, [r3, #24]
}
 8006ec8:	bf00      	nop
 8006eca:	370c      	adds	r7, #12
 8006ecc:	46bd      	mov	sp, r7
 8006ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ed2:	4770      	bx	lr
 8006ed4:	e000e100 	.word	0xe000e100
 8006ed8:	e000ed00 	.word	0xe000ed00

08006edc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006edc:	b480      	push	{r7}
 8006ede:	b089      	sub	sp, #36	; 0x24
 8006ee0:	af00      	add	r7, sp, #0
 8006ee2:	60f8      	str	r0, [r7, #12]
 8006ee4:	60b9      	str	r1, [r7, #8]
 8006ee6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8006ee8:	68fb      	ldr	r3, [r7, #12]
 8006eea:	f003 0307 	and.w	r3, r3, #7
 8006eee:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006ef0:	69fb      	ldr	r3, [r7, #28]
 8006ef2:	f1c3 0307 	rsb	r3, r3, #7
 8006ef6:	2b04      	cmp	r3, #4
 8006ef8:	bf28      	it	cs
 8006efa:	2304      	movcs	r3, #4
 8006efc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8006efe:	69fb      	ldr	r3, [r7, #28]
 8006f00:	3304      	adds	r3, #4
 8006f02:	2b06      	cmp	r3, #6
 8006f04:	d902      	bls.n	8006f0c <NVIC_EncodePriority+0x30>
 8006f06:	69fb      	ldr	r3, [r7, #28]
 8006f08:	3b03      	subs	r3, #3
 8006f0a:	e000      	b.n	8006f0e <NVIC_EncodePriority+0x32>
 8006f0c:	2300      	movs	r3, #0
 8006f0e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006f10:	f04f 32ff 	mov.w	r2, #4294967295
 8006f14:	69bb      	ldr	r3, [r7, #24]
 8006f16:	fa02 f303 	lsl.w	r3, r2, r3
 8006f1a:	43da      	mvns	r2, r3
 8006f1c:	68bb      	ldr	r3, [r7, #8]
 8006f1e:	401a      	ands	r2, r3
 8006f20:	697b      	ldr	r3, [r7, #20]
 8006f22:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8006f24:	f04f 31ff 	mov.w	r1, #4294967295
 8006f28:	697b      	ldr	r3, [r7, #20]
 8006f2a:	fa01 f303 	lsl.w	r3, r1, r3
 8006f2e:	43d9      	mvns	r1, r3
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006f34:	4313      	orrs	r3, r2
         );
}
 8006f36:	4618      	mov	r0, r3
 8006f38:	3724      	adds	r7, #36	; 0x24
 8006f3a:	46bd      	mov	sp, r7
 8006f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f40:	4770      	bx	lr
	...

08006f44 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8006f44:	b580      	push	{r7, lr}
 8006f46:	b082      	sub	sp, #8
 8006f48:	af00      	add	r7, sp, #0
 8006f4a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	3b01      	subs	r3, #1
 8006f50:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006f54:	d301      	bcc.n	8006f5a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8006f56:	2301      	movs	r3, #1
 8006f58:	e00f      	b.n	8006f7a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8006f5a:	4a0a      	ldr	r2, [pc, #40]	; (8006f84 <SysTick_Config+0x40>)
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	3b01      	subs	r3, #1
 8006f60:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8006f62:	210f      	movs	r1, #15
 8006f64:	f04f 30ff 	mov.w	r0, #4294967295
 8006f68:	f7ff ff8e 	bl	8006e88 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8006f6c:	4b05      	ldr	r3, [pc, #20]	; (8006f84 <SysTick_Config+0x40>)
 8006f6e:	2200      	movs	r2, #0
 8006f70:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8006f72:	4b04      	ldr	r3, [pc, #16]	; (8006f84 <SysTick_Config+0x40>)
 8006f74:	2207      	movs	r2, #7
 8006f76:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8006f78:	2300      	movs	r3, #0
}
 8006f7a:	4618      	mov	r0, r3
 8006f7c:	3708      	adds	r7, #8
 8006f7e:	46bd      	mov	sp, r7
 8006f80:	bd80      	pop	{r7, pc}
 8006f82:	bf00      	nop
 8006f84:	e000e010 	.word	0xe000e010

08006f88 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006f88:	b580      	push	{r7, lr}
 8006f8a:	b082      	sub	sp, #8
 8006f8c:	af00      	add	r7, sp, #0
 8006f8e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8006f90:	6878      	ldr	r0, [r7, #4]
 8006f92:	f7ff ff29 	bl	8006de8 <__NVIC_SetPriorityGrouping>
}
 8006f96:	bf00      	nop
 8006f98:	3708      	adds	r7, #8
 8006f9a:	46bd      	mov	sp, r7
 8006f9c:	bd80      	pop	{r7, pc}

08006f9e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8006f9e:	b580      	push	{r7, lr}
 8006fa0:	b086      	sub	sp, #24
 8006fa2:	af00      	add	r7, sp, #0
 8006fa4:	4603      	mov	r3, r0
 8006fa6:	60b9      	str	r1, [r7, #8]
 8006fa8:	607a      	str	r2, [r7, #4]
 8006faa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8006fac:	2300      	movs	r3, #0
 8006fae:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8006fb0:	f7ff ff3e 	bl	8006e30 <__NVIC_GetPriorityGrouping>
 8006fb4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8006fb6:	687a      	ldr	r2, [r7, #4]
 8006fb8:	68b9      	ldr	r1, [r7, #8]
 8006fba:	6978      	ldr	r0, [r7, #20]
 8006fbc:	f7ff ff8e 	bl	8006edc <NVIC_EncodePriority>
 8006fc0:	4602      	mov	r2, r0
 8006fc2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006fc6:	4611      	mov	r1, r2
 8006fc8:	4618      	mov	r0, r3
 8006fca:	f7ff ff5d 	bl	8006e88 <__NVIC_SetPriority>
}
 8006fce:	bf00      	nop
 8006fd0:	3718      	adds	r7, #24
 8006fd2:	46bd      	mov	sp, r7
 8006fd4:	bd80      	pop	{r7, pc}

08006fd6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006fd6:	b580      	push	{r7, lr}
 8006fd8:	b082      	sub	sp, #8
 8006fda:	af00      	add	r7, sp, #0
 8006fdc:	4603      	mov	r3, r0
 8006fde:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8006fe0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006fe4:	4618      	mov	r0, r3
 8006fe6:	f7ff ff31 	bl	8006e4c <__NVIC_EnableIRQ>
}
 8006fea:	bf00      	nop
 8006fec:	3708      	adds	r7, #8
 8006fee:	46bd      	mov	sp, r7
 8006ff0:	bd80      	pop	{r7, pc}

08006ff2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8006ff2:	b580      	push	{r7, lr}
 8006ff4:	b082      	sub	sp, #8
 8006ff6:	af00      	add	r7, sp, #0
 8006ff8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8006ffa:	6878      	ldr	r0, [r7, #4]
 8006ffc:	f7ff ffa2 	bl	8006f44 <SysTick_Config>
 8007000:	4603      	mov	r3, r0
}
 8007002:	4618      	mov	r0, r3
 8007004:	3708      	adds	r7, #8
 8007006:	46bd      	mov	sp, r7
 8007008:	bd80      	pop	{r7, pc}
	...

0800700c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800700c:	b480      	push	{r7}
 800700e:	b089      	sub	sp, #36	; 0x24
 8007010:	af00      	add	r7, sp, #0
 8007012:	6078      	str	r0, [r7, #4]
 8007014:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8007016:	2300      	movs	r3, #0
 8007018:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800701a:	2300      	movs	r3, #0
 800701c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800701e:	2300      	movs	r3, #0
 8007020:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8007022:	2300      	movs	r3, #0
 8007024:	61fb      	str	r3, [r7, #28]
 8007026:	e159      	b.n	80072dc <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8007028:	2201      	movs	r2, #1
 800702a:	69fb      	ldr	r3, [r7, #28]
 800702c:	fa02 f303 	lsl.w	r3, r2, r3
 8007030:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8007032:	683b      	ldr	r3, [r7, #0]
 8007034:	681b      	ldr	r3, [r3, #0]
 8007036:	697a      	ldr	r2, [r7, #20]
 8007038:	4013      	ands	r3, r2
 800703a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800703c:	693a      	ldr	r2, [r7, #16]
 800703e:	697b      	ldr	r3, [r7, #20]
 8007040:	429a      	cmp	r2, r3
 8007042:	f040 8148 	bne.w	80072d6 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8007046:	683b      	ldr	r3, [r7, #0]
 8007048:	685b      	ldr	r3, [r3, #4]
 800704a:	f003 0303 	and.w	r3, r3, #3
 800704e:	2b01      	cmp	r3, #1
 8007050:	d005      	beq.n	800705e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8007052:	683b      	ldr	r3, [r7, #0]
 8007054:	685b      	ldr	r3, [r3, #4]
 8007056:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800705a:	2b02      	cmp	r3, #2
 800705c:	d130      	bne.n	80070c0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	689b      	ldr	r3, [r3, #8]
 8007062:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8007064:	69fb      	ldr	r3, [r7, #28]
 8007066:	005b      	lsls	r3, r3, #1
 8007068:	2203      	movs	r2, #3
 800706a:	fa02 f303 	lsl.w	r3, r2, r3
 800706e:	43db      	mvns	r3, r3
 8007070:	69ba      	ldr	r2, [r7, #24]
 8007072:	4013      	ands	r3, r2
 8007074:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8007076:	683b      	ldr	r3, [r7, #0]
 8007078:	68da      	ldr	r2, [r3, #12]
 800707a:	69fb      	ldr	r3, [r7, #28]
 800707c:	005b      	lsls	r3, r3, #1
 800707e:	fa02 f303 	lsl.w	r3, r2, r3
 8007082:	69ba      	ldr	r2, [r7, #24]
 8007084:	4313      	orrs	r3, r2
 8007086:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	69ba      	ldr	r2, [r7, #24]
 800708c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	685b      	ldr	r3, [r3, #4]
 8007092:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8007094:	2201      	movs	r2, #1
 8007096:	69fb      	ldr	r3, [r7, #28]
 8007098:	fa02 f303 	lsl.w	r3, r2, r3
 800709c:	43db      	mvns	r3, r3
 800709e:	69ba      	ldr	r2, [r7, #24]
 80070a0:	4013      	ands	r3, r2
 80070a2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80070a4:	683b      	ldr	r3, [r7, #0]
 80070a6:	685b      	ldr	r3, [r3, #4]
 80070a8:	091b      	lsrs	r3, r3, #4
 80070aa:	f003 0201 	and.w	r2, r3, #1
 80070ae:	69fb      	ldr	r3, [r7, #28]
 80070b0:	fa02 f303 	lsl.w	r3, r2, r3
 80070b4:	69ba      	ldr	r2, [r7, #24]
 80070b6:	4313      	orrs	r3, r2
 80070b8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	69ba      	ldr	r2, [r7, #24]
 80070be:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80070c0:	683b      	ldr	r3, [r7, #0]
 80070c2:	685b      	ldr	r3, [r3, #4]
 80070c4:	f003 0303 	and.w	r3, r3, #3
 80070c8:	2b03      	cmp	r3, #3
 80070ca:	d017      	beq.n	80070fc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	68db      	ldr	r3, [r3, #12]
 80070d0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80070d2:	69fb      	ldr	r3, [r7, #28]
 80070d4:	005b      	lsls	r3, r3, #1
 80070d6:	2203      	movs	r2, #3
 80070d8:	fa02 f303 	lsl.w	r3, r2, r3
 80070dc:	43db      	mvns	r3, r3
 80070de:	69ba      	ldr	r2, [r7, #24]
 80070e0:	4013      	ands	r3, r2
 80070e2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80070e4:	683b      	ldr	r3, [r7, #0]
 80070e6:	689a      	ldr	r2, [r3, #8]
 80070e8:	69fb      	ldr	r3, [r7, #28]
 80070ea:	005b      	lsls	r3, r3, #1
 80070ec:	fa02 f303 	lsl.w	r3, r2, r3
 80070f0:	69ba      	ldr	r2, [r7, #24]
 80070f2:	4313      	orrs	r3, r2
 80070f4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	69ba      	ldr	r2, [r7, #24]
 80070fa:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80070fc:	683b      	ldr	r3, [r7, #0]
 80070fe:	685b      	ldr	r3, [r3, #4]
 8007100:	f003 0303 	and.w	r3, r3, #3
 8007104:	2b02      	cmp	r3, #2
 8007106:	d123      	bne.n	8007150 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8007108:	69fb      	ldr	r3, [r7, #28]
 800710a:	08da      	lsrs	r2, r3, #3
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	3208      	adds	r2, #8
 8007110:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007114:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8007116:	69fb      	ldr	r3, [r7, #28]
 8007118:	f003 0307 	and.w	r3, r3, #7
 800711c:	009b      	lsls	r3, r3, #2
 800711e:	220f      	movs	r2, #15
 8007120:	fa02 f303 	lsl.w	r3, r2, r3
 8007124:	43db      	mvns	r3, r3
 8007126:	69ba      	ldr	r2, [r7, #24]
 8007128:	4013      	ands	r3, r2
 800712a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800712c:	683b      	ldr	r3, [r7, #0]
 800712e:	691a      	ldr	r2, [r3, #16]
 8007130:	69fb      	ldr	r3, [r7, #28]
 8007132:	f003 0307 	and.w	r3, r3, #7
 8007136:	009b      	lsls	r3, r3, #2
 8007138:	fa02 f303 	lsl.w	r3, r2, r3
 800713c:	69ba      	ldr	r2, [r7, #24]
 800713e:	4313      	orrs	r3, r2
 8007140:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8007142:	69fb      	ldr	r3, [r7, #28]
 8007144:	08da      	lsrs	r2, r3, #3
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	3208      	adds	r2, #8
 800714a:	69b9      	ldr	r1, [r7, #24]
 800714c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	681b      	ldr	r3, [r3, #0]
 8007154:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8007156:	69fb      	ldr	r3, [r7, #28]
 8007158:	005b      	lsls	r3, r3, #1
 800715a:	2203      	movs	r2, #3
 800715c:	fa02 f303 	lsl.w	r3, r2, r3
 8007160:	43db      	mvns	r3, r3
 8007162:	69ba      	ldr	r2, [r7, #24]
 8007164:	4013      	ands	r3, r2
 8007166:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8007168:	683b      	ldr	r3, [r7, #0]
 800716a:	685b      	ldr	r3, [r3, #4]
 800716c:	f003 0203 	and.w	r2, r3, #3
 8007170:	69fb      	ldr	r3, [r7, #28]
 8007172:	005b      	lsls	r3, r3, #1
 8007174:	fa02 f303 	lsl.w	r3, r2, r3
 8007178:	69ba      	ldr	r2, [r7, #24]
 800717a:	4313      	orrs	r3, r2
 800717c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	69ba      	ldr	r2, [r7, #24]
 8007182:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8007184:	683b      	ldr	r3, [r7, #0]
 8007186:	685b      	ldr	r3, [r3, #4]
 8007188:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800718c:	2b00      	cmp	r3, #0
 800718e:	f000 80a2 	beq.w	80072d6 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007192:	2300      	movs	r3, #0
 8007194:	60fb      	str	r3, [r7, #12]
 8007196:	4b57      	ldr	r3, [pc, #348]	; (80072f4 <HAL_GPIO_Init+0x2e8>)
 8007198:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800719a:	4a56      	ldr	r2, [pc, #344]	; (80072f4 <HAL_GPIO_Init+0x2e8>)
 800719c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80071a0:	6453      	str	r3, [r2, #68]	; 0x44
 80071a2:	4b54      	ldr	r3, [pc, #336]	; (80072f4 <HAL_GPIO_Init+0x2e8>)
 80071a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80071a6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80071aa:	60fb      	str	r3, [r7, #12]
 80071ac:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80071ae:	4a52      	ldr	r2, [pc, #328]	; (80072f8 <HAL_GPIO_Init+0x2ec>)
 80071b0:	69fb      	ldr	r3, [r7, #28]
 80071b2:	089b      	lsrs	r3, r3, #2
 80071b4:	3302      	adds	r3, #2
 80071b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80071ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80071bc:	69fb      	ldr	r3, [r7, #28]
 80071be:	f003 0303 	and.w	r3, r3, #3
 80071c2:	009b      	lsls	r3, r3, #2
 80071c4:	220f      	movs	r2, #15
 80071c6:	fa02 f303 	lsl.w	r3, r2, r3
 80071ca:	43db      	mvns	r3, r3
 80071cc:	69ba      	ldr	r2, [r7, #24]
 80071ce:	4013      	ands	r3, r2
 80071d0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	4a49      	ldr	r2, [pc, #292]	; (80072fc <HAL_GPIO_Init+0x2f0>)
 80071d6:	4293      	cmp	r3, r2
 80071d8:	d019      	beq.n	800720e <HAL_GPIO_Init+0x202>
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	4a48      	ldr	r2, [pc, #288]	; (8007300 <HAL_GPIO_Init+0x2f4>)
 80071de:	4293      	cmp	r3, r2
 80071e0:	d013      	beq.n	800720a <HAL_GPIO_Init+0x1fe>
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	4a47      	ldr	r2, [pc, #284]	; (8007304 <HAL_GPIO_Init+0x2f8>)
 80071e6:	4293      	cmp	r3, r2
 80071e8:	d00d      	beq.n	8007206 <HAL_GPIO_Init+0x1fa>
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	4a46      	ldr	r2, [pc, #280]	; (8007308 <HAL_GPIO_Init+0x2fc>)
 80071ee:	4293      	cmp	r3, r2
 80071f0:	d007      	beq.n	8007202 <HAL_GPIO_Init+0x1f6>
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	4a45      	ldr	r2, [pc, #276]	; (800730c <HAL_GPIO_Init+0x300>)
 80071f6:	4293      	cmp	r3, r2
 80071f8:	d101      	bne.n	80071fe <HAL_GPIO_Init+0x1f2>
 80071fa:	2304      	movs	r3, #4
 80071fc:	e008      	b.n	8007210 <HAL_GPIO_Init+0x204>
 80071fe:	2307      	movs	r3, #7
 8007200:	e006      	b.n	8007210 <HAL_GPIO_Init+0x204>
 8007202:	2303      	movs	r3, #3
 8007204:	e004      	b.n	8007210 <HAL_GPIO_Init+0x204>
 8007206:	2302      	movs	r3, #2
 8007208:	e002      	b.n	8007210 <HAL_GPIO_Init+0x204>
 800720a:	2301      	movs	r3, #1
 800720c:	e000      	b.n	8007210 <HAL_GPIO_Init+0x204>
 800720e:	2300      	movs	r3, #0
 8007210:	69fa      	ldr	r2, [r7, #28]
 8007212:	f002 0203 	and.w	r2, r2, #3
 8007216:	0092      	lsls	r2, r2, #2
 8007218:	4093      	lsls	r3, r2
 800721a:	69ba      	ldr	r2, [r7, #24]
 800721c:	4313      	orrs	r3, r2
 800721e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8007220:	4935      	ldr	r1, [pc, #212]	; (80072f8 <HAL_GPIO_Init+0x2ec>)
 8007222:	69fb      	ldr	r3, [r7, #28]
 8007224:	089b      	lsrs	r3, r3, #2
 8007226:	3302      	adds	r3, #2
 8007228:	69ba      	ldr	r2, [r7, #24]
 800722a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800722e:	4b38      	ldr	r3, [pc, #224]	; (8007310 <HAL_GPIO_Init+0x304>)
 8007230:	689b      	ldr	r3, [r3, #8]
 8007232:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007234:	693b      	ldr	r3, [r7, #16]
 8007236:	43db      	mvns	r3, r3
 8007238:	69ba      	ldr	r2, [r7, #24]
 800723a:	4013      	ands	r3, r2
 800723c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800723e:	683b      	ldr	r3, [r7, #0]
 8007240:	685b      	ldr	r3, [r3, #4]
 8007242:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007246:	2b00      	cmp	r3, #0
 8007248:	d003      	beq.n	8007252 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800724a:	69ba      	ldr	r2, [r7, #24]
 800724c:	693b      	ldr	r3, [r7, #16]
 800724e:	4313      	orrs	r3, r2
 8007250:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8007252:	4a2f      	ldr	r2, [pc, #188]	; (8007310 <HAL_GPIO_Init+0x304>)
 8007254:	69bb      	ldr	r3, [r7, #24]
 8007256:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8007258:	4b2d      	ldr	r3, [pc, #180]	; (8007310 <HAL_GPIO_Init+0x304>)
 800725a:	68db      	ldr	r3, [r3, #12]
 800725c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800725e:	693b      	ldr	r3, [r7, #16]
 8007260:	43db      	mvns	r3, r3
 8007262:	69ba      	ldr	r2, [r7, #24]
 8007264:	4013      	ands	r3, r2
 8007266:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8007268:	683b      	ldr	r3, [r7, #0]
 800726a:	685b      	ldr	r3, [r3, #4]
 800726c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007270:	2b00      	cmp	r3, #0
 8007272:	d003      	beq.n	800727c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8007274:	69ba      	ldr	r2, [r7, #24]
 8007276:	693b      	ldr	r3, [r7, #16]
 8007278:	4313      	orrs	r3, r2
 800727a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800727c:	4a24      	ldr	r2, [pc, #144]	; (8007310 <HAL_GPIO_Init+0x304>)
 800727e:	69bb      	ldr	r3, [r7, #24]
 8007280:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8007282:	4b23      	ldr	r3, [pc, #140]	; (8007310 <HAL_GPIO_Init+0x304>)
 8007284:	685b      	ldr	r3, [r3, #4]
 8007286:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007288:	693b      	ldr	r3, [r7, #16]
 800728a:	43db      	mvns	r3, r3
 800728c:	69ba      	ldr	r2, [r7, #24]
 800728e:	4013      	ands	r3, r2
 8007290:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8007292:	683b      	ldr	r3, [r7, #0]
 8007294:	685b      	ldr	r3, [r3, #4]
 8007296:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800729a:	2b00      	cmp	r3, #0
 800729c:	d003      	beq.n	80072a6 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800729e:	69ba      	ldr	r2, [r7, #24]
 80072a0:	693b      	ldr	r3, [r7, #16]
 80072a2:	4313      	orrs	r3, r2
 80072a4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80072a6:	4a1a      	ldr	r2, [pc, #104]	; (8007310 <HAL_GPIO_Init+0x304>)
 80072a8:	69bb      	ldr	r3, [r7, #24]
 80072aa:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80072ac:	4b18      	ldr	r3, [pc, #96]	; (8007310 <HAL_GPIO_Init+0x304>)
 80072ae:	681b      	ldr	r3, [r3, #0]
 80072b0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80072b2:	693b      	ldr	r3, [r7, #16]
 80072b4:	43db      	mvns	r3, r3
 80072b6:	69ba      	ldr	r2, [r7, #24]
 80072b8:	4013      	ands	r3, r2
 80072ba:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80072bc:	683b      	ldr	r3, [r7, #0]
 80072be:	685b      	ldr	r3, [r3, #4]
 80072c0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80072c4:	2b00      	cmp	r3, #0
 80072c6:	d003      	beq.n	80072d0 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80072c8:	69ba      	ldr	r2, [r7, #24]
 80072ca:	693b      	ldr	r3, [r7, #16]
 80072cc:	4313      	orrs	r3, r2
 80072ce:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80072d0:	4a0f      	ldr	r2, [pc, #60]	; (8007310 <HAL_GPIO_Init+0x304>)
 80072d2:	69bb      	ldr	r3, [r7, #24]
 80072d4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80072d6:	69fb      	ldr	r3, [r7, #28]
 80072d8:	3301      	adds	r3, #1
 80072da:	61fb      	str	r3, [r7, #28]
 80072dc:	69fb      	ldr	r3, [r7, #28]
 80072de:	2b0f      	cmp	r3, #15
 80072e0:	f67f aea2 	bls.w	8007028 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80072e4:	bf00      	nop
 80072e6:	bf00      	nop
 80072e8:	3724      	adds	r7, #36	; 0x24
 80072ea:	46bd      	mov	sp, r7
 80072ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072f0:	4770      	bx	lr
 80072f2:	bf00      	nop
 80072f4:	40023800 	.word	0x40023800
 80072f8:	40013800 	.word	0x40013800
 80072fc:	40020000 	.word	0x40020000
 8007300:	40020400 	.word	0x40020400
 8007304:	40020800 	.word	0x40020800
 8007308:	40020c00 	.word	0x40020c00
 800730c:	40021000 	.word	0x40021000
 8007310:	40013c00 	.word	0x40013c00

08007314 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8007314:	b480      	push	{r7}
 8007316:	b087      	sub	sp, #28
 8007318:	af00      	add	r7, sp, #0
 800731a:	6078      	str	r0, [r7, #4]
 800731c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800731e:	2300      	movs	r3, #0
 8007320:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 8007322:	2300      	movs	r3, #0
 8007324:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 8007326:	2300      	movs	r3, #0
 8007328:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800732a:	2300      	movs	r3, #0
 800732c:	617b      	str	r3, [r7, #20]
 800732e:	e0bb      	b.n	80074a8 <HAL_GPIO_DeInit+0x194>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8007330:	2201      	movs	r2, #1
 8007332:	697b      	ldr	r3, [r7, #20]
 8007334:	fa02 f303 	lsl.w	r3, r2, r3
 8007338:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 800733a:	683a      	ldr	r2, [r7, #0]
 800733c:	693b      	ldr	r3, [r7, #16]
 800733e:	4013      	ands	r3, r2
 8007340:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 8007342:	68fa      	ldr	r2, [r7, #12]
 8007344:	693b      	ldr	r3, [r7, #16]
 8007346:	429a      	cmp	r2, r3
 8007348:	f040 80ab 	bne.w	80074a2 <HAL_GPIO_DeInit+0x18e>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 800734c:	4a5c      	ldr	r2, [pc, #368]	; (80074c0 <HAL_GPIO_DeInit+0x1ac>)
 800734e:	697b      	ldr	r3, [r7, #20]
 8007350:	089b      	lsrs	r3, r3, #2
 8007352:	3302      	adds	r3, #2
 8007354:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007358:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 800735a:	697b      	ldr	r3, [r7, #20]
 800735c:	f003 0303 	and.w	r3, r3, #3
 8007360:	009b      	lsls	r3, r3, #2
 8007362:	220f      	movs	r2, #15
 8007364:	fa02 f303 	lsl.w	r3, r2, r3
 8007368:	68ba      	ldr	r2, [r7, #8]
 800736a:	4013      	ands	r3, r2
 800736c:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	4a54      	ldr	r2, [pc, #336]	; (80074c4 <HAL_GPIO_DeInit+0x1b0>)
 8007372:	4293      	cmp	r3, r2
 8007374:	d019      	beq.n	80073aa <HAL_GPIO_DeInit+0x96>
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	4a53      	ldr	r2, [pc, #332]	; (80074c8 <HAL_GPIO_DeInit+0x1b4>)
 800737a:	4293      	cmp	r3, r2
 800737c:	d013      	beq.n	80073a6 <HAL_GPIO_DeInit+0x92>
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	4a52      	ldr	r2, [pc, #328]	; (80074cc <HAL_GPIO_DeInit+0x1b8>)
 8007382:	4293      	cmp	r3, r2
 8007384:	d00d      	beq.n	80073a2 <HAL_GPIO_DeInit+0x8e>
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	4a51      	ldr	r2, [pc, #324]	; (80074d0 <HAL_GPIO_DeInit+0x1bc>)
 800738a:	4293      	cmp	r3, r2
 800738c:	d007      	beq.n	800739e <HAL_GPIO_DeInit+0x8a>
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	4a50      	ldr	r2, [pc, #320]	; (80074d4 <HAL_GPIO_DeInit+0x1c0>)
 8007392:	4293      	cmp	r3, r2
 8007394:	d101      	bne.n	800739a <HAL_GPIO_DeInit+0x86>
 8007396:	2304      	movs	r3, #4
 8007398:	e008      	b.n	80073ac <HAL_GPIO_DeInit+0x98>
 800739a:	2307      	movs	r3, #7
 800739c:	e006      	b.n	80073ac <HAL_GPIO_DeInit+0x98>
 800739e:	2303      	movs	r3, #3
 80073a0:	e004      	b.n	80073ac <HAL_GPIO_DeInit+0x98>
 80073a2:	2302      	movs	r3, #2
 80073a4:	e002      	b.n	80073ac <HAL_GPIO_DeInit+0x98>
 80073a6:	2301      	movs	r3, #1
 80073a8:	e000      	b.n	80073ac <HAL_GPIO_DeInit+0x98>
 80073aa:	2300      	movs	r3, #0
 80073ac:	697a      	ldr	r2, [r7, #20]
 80073ae:	f002 0203 	and.w	r2, r2, #3
 80073b2:	0092      	lsls	r2, r2, #2
 80073b4:	4093      	lsls	r3, r2
 80073b6:	68ba      	ldr	r2, [r7, #8]
 80073b8:	429a      	cmp	r2, r3
 80073ba:	d132      	bne.n	8007422 <HAL_GPIO_DeInit+0x10e>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 80073bc:	4b46      	ldr	r3, [pc, #280]	; (80074d8 <HAL_GPIO_DeInit+0x1c4>)
 80073be:	681a      	ldr	r2, [r3, #0]
 80073c0:	68fb      	ldr	r3, [r7, #12]
 80073c2:	43db      	mvns	r3, r3
 80073c4:	4944      	ldr	r1, [pc, #272]	; (80074d8 <HAL_GPIO_DeInit+0x1c4>)
 80073c6:	4013      	ands	r3, r2
 80073c8:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 80073ca:	4b43      	ldr	r3, [pc, #268]	; (80074d8 <HAL_GPIO_DeInit+0x1c4>)
 80073cc:	685a      	ldr	r2, [r3, #4]
 80073ce:	68fb      	ldr	r3, [r7, #12]
 80073d0:	43db      	mvns	r3, r3
 80073d2:	4941      	ldr	r1, [pc, #260]	; (80074d8 <HAL_GPIO_DeInit+0x1c4>)
 80073d4:	4013      	ands	r3, r2
 80073d6:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 80073d8:	4b3f      	ldr	r3, [pc, #252]	; (80074d8 <HAL_GPIO_DeInit+0x1c4>)
 80073da:	68da      	ldr	r2, [r3, #12]
 80073dc:	68fb      	ldr	r3, [r7, #12]
 80073de:	43db      	mvns	r3, r3
 80073e0:	493d      	ldr	r1, [pc, #244]	; (80074d8 <HAL_GPIO_DeInit+0x1c4>)
 80073e2:	4013      	ands	r3, r2
 80073e4:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 80073e6:	4b3c      	ldr	r3, [pc, #240]	; (80074d8 <HAL_GPIO_DeInit+0x1c4>)
 80073e8:	689a      	ldr	r2, [r3, #8]
 80073ea:	68fb      	ldr	r3, [r7, #12]
 80073ec:	43db      	mvns	r3, r3
 80073ee:	493a      	ldr	r1, [pc, #232]	; (80074d8 <HAL_GPIO_DeInit+0x1c4>)
 80073f0:	4013      	ands	r3, r2
 80073f2:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 80073f4:	697b      	ldr	r3, [r7, #20]
 80073f6:	f003 0303 	and.w	r3, r3, #3
 80073fa:	009b      	lsls	r3, r3, #2
 80073fc:	220f      	movs	r2, #15
 80073fe:	fa02 f303 	lsl.w	r3, r2, r3
 8007402:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8007404:	4a2e      	ldr	r2, [pc, #184]	; (80074c0 <HAL_GPIO_DeInit+0x1ac>)
 8007406:	697b      	ldr	r3, [r7, #20]
 8007408:	089b      	lsrs	r3, r3, #2
 800740a:	3302      	adds	r3, #2
 800740c:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8007410:	68bb      	ldr	r3, [r7, #8]
 8007412:	43da      	mvns	r2, r3
 8007414:	482a      	ldr	r0, [pc, #168]	; (80074c0 <HAL_GPIO_DeInit+0x1ac>)
 8007416:	697b      	ldr	r3, [r7, #20]
 8007418:	089b      	lsrs	r3, r3, #2
 800741a:	400a      	ands	r2, r1
 800741c:	3302      	adds	r3, #2
 800741e:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	681a      	ldr	r2, [r3, #0]
 8007426:	697b      	ldr	r3, [r7, #20]
 8007428:	005b      	lsls	r3, r3, #1
 800742a:	2103      	movs	r1, #3
 800742c:	fa01 f303 	lsl.w	r3, r1, r3
 8007430:	43db      	mvns	r3, r3
 8007432:	401a      	ands	r2, r3
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8007438:	697b      	ldr	r3, [r7, #20]
 800743a:	08da      	lsrs	r2, r3, #3
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	3208      	adds	r2, #8
 8007440:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007444:	697b      	ldr	r3, [r7, #20]
 8007446:	f003 0307 	and.w	r3, r3, #7
 800744a:	009b      	lsls	r3, r3, #2
 800744c:	220f      	movs	r2, #15
 800744e:	fa02 f303 	lsl.w	r3, r2, r3
 8007452:	43db      	mvns	r3, r3
 8007454:	697a      	ldr	r2, [r7, #20]
 8007456:	08d2      	lsrs	r2, r2, #3
 8007458:	4019      	ands	r1, r3
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	3208      	adds	r2, #8
 800745e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	68da      	ldr	r2, [r3, #12]
 8007466:	697b      	ldr	r3, [r7, #20]
 8007468:	005b      	lsls	r3, r3, #1
 800746a:	2103      	movs	r1, #3
 800746c:	fa01 f303 	lsl.w	r3, r1, r3
 8007470:	43db      	mvns	r3, r3
 8007472:	401a      	ands	r2, r3
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	685a      	ldr	r2, [r3, #4]
 800747c:	2101      	movs	r1, #1
 800747e:	697b      	ldr	r3, [r7, #20]
 8007480:	fa01 f303 	lsl.w	r3, r1, r3
 8007484:	43db      	mvns	r3, r3
 8007486:	401a      	ands	r2, r3
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	689a      	ldr	r2, [r3, #8]
 8007490:	697b      	ldr	r3, [r7, #20]
 8007492:	005b      	lsls	r3, r3, #1
 8007494:	2103      	movs	r1, #3
 8007496:	fa01 f303 	lsl.w	r3, r1, r3
 800749a:	43db      	mvns	r3, r3
 800749c:	401a      	ands	r2, r3
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80074a2:	697b      	ldr	r3, [r7, #20]
 80074a4:	3301      	adds	r3, #1
 80074a6:	617b      	str	r3, [r7, #20]
 80074a8:	697b      	ldr	r3, [r7, #20]
 80074aa:	2b0f      	cmp	r3, #15
 80074ac:	f67f af40 	bls.w	8007330 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 80074b0:	bf00      	nop
 80074b2:	bf00      	nop
 80074b4:	371c      	adds	r7, #28
 80074b6:	46bd      	mov	sp, r7
 80074b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074bc:	4770      	bx	lr
 80074be:	bf00      	nop
 80074c0:	40013800 	.word	0x40013800
 80074c4:	40020000 	.word	0x40020000
 80074c8:	40020400 	.word	0x40020400
 80074cc:	40020800 	.word	0x40020800
 80074d0:	40020c00 	.word	0x40020c00
 80074d4:	40021000 	.word	0x40021000
 80074d8:	40013c00 	.word	0x40013c00

080074dc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80074dc:	b480      	push	{r7}
 80074de:	b083      	sub	sp, #12
 80074e0:	af00      	add	r7, sp, #0
 80074e2:	6078      	str	r0, [r7, #4]
 80074e4:	460b      	mov	r3, r1
 80074e6:	807b      	strh	r3, [r7, #2]
 80074e8:	4613      	mov	r3, r2
 80074ea:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80074ec:	787b      	ldrb	r3, [r7, #1]
 80074ee:	2b00      	cmp	r3, #0
 80074f0:	d003      	beq.n	80074fa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80074f2:	887a      	ldrh	r2, [r7, #2]
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80074f8:	e003      	b.n	8007502 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80074fa:	887b      	ldrh	r3, [r7, #2]
 80074fc:	041a      	lsls	r2, r3, #16
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	619a      	str	r2, [r3, #24]
}
 8007502:	bf00      	nop
 8007504:	370c      	adds	r7, #12
 8007506:	46bd      	mov	sp, r7
 8007508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800750c:	4770      	bx	lr
	...

08007510 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8007510:	b580      	push	{r7, lr}
 8007512:	b082      	sub	sp, #8
 8007514:	af00      	add	r7, sp, #0
 8007516:	4603      	mov	r3, r0
 8007518:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800751a:	4b08      	ldr	r3, [pc, #32]	; (800753c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800751c:	695a      	ldr	r2, [r3, #20]
 800751e:	88fb      	ldrh	r3, [r7, #6]
 8007520:	4013      	ands	r3, r2
 8007522:	2b00      	cmp	r3, #0
 8007524:	d006      	beq.n	8007534 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8007526:	4a05      	ldr	r2, [pc, #20]	; (800753c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8007528:	88fb      	ldrh	r3, [r7, #6]
 800752a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800752c:	88fb      	ldrh	r3, [r7, #6]
 800752e:	4618      	mov	r0, r3
 8007530:	f000 f806 	bl	8007540 <HAL_GPIO_EXTI_Callback>
  }
}
 8007534:	bf00      	nop
 8007536:	3708      	adds	r7, #8
 8007538:	46bd      	mov	sp, r7
 800753a:	bd80      	pop	{r7, pc}
 800753c:	40013c00 	.word	0x40013c00

08007540 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8007540:	b480      	push	{r7}
 8007542:	b083      	sub	sp, #12
 8007544:	af00      	add	r7, sp, #0
 8007546:	4603      	mov	r3, r0
 8007548:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800754a:	bf00      	nop
 800754c:	370c      	adds	r7, #12
 800754e:	46bd      	mov	sp, r7
 8007550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007554:	4770      	bx	lr
	...

08007558 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8007558:	b580      	push	{r7, lr}
 800755a:	b084      	sub	sp, #16
 800755c:	af00      	add	r7, sp, #0
 800755e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	2b00      	cmp	r3, #0
 8007564:	d101      	bne.n	800756a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8007566:	2301      	movs	r3, #1
 8007568:	e12b      	b.n	80077c2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007570:	b2db      	uxtb	r3, r3
 8007572:	2b00      	cmp	r3, #0
 8007574:	d106      	bne.n	8007584 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	2200      	movs	r2, #0
 800757a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800757e:	6878      	ldr	r0, [r7, #4]
 8007580:	f000 f95d 	bl	800783e <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	2224      	movs	r2, #36	; 0x24
 8007588:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	681b      	ldr	r3, [r3, #0]
 8007590:	681a      	ldr	r2, [r3, #0]
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	681b      	ldr	r3, [r3, #0]
 8007596:	f022 0201 	bic.w	r2, r2, #1
 800759a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	681b      	ldr	r3, [r3, #0]
 80075a0:	681a      	ldr	r2, [r3, #0]
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	681b      	ldr	r3, [r3, #0]
 80075a6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80075aa:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	681b      	ldr	r3, [r3, #0]
 80075b0:	681a      	ldr	r2, [r3, #0]
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	681b      	ldr	r3, [r3, #0]
 80075b6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80075ba:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80075bc:	f001 fcac 	bl	8008f18 <HAL_RCC_GetPCLK1Freq>
 80075c0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	685b      	ldr	r3, [r3, #4]
 80075c6:	4a81      	ldr	r2, [pc, #516]	; (80077cc <HAL_I2C_Init+0x274>)
 80075c8:	4293      	cmp	r3, r2
 80075ca:	d807      	bhi.n	80075dc <HAL_I2C_Init+0x84>
 80075cc:	68fb      	ldr	r3, [r7, #12]
 80075ce:	4a80      	ldr	r2, [pc, #512]	; (80077d0 <HAL_I2C_Init+0x278>)
 80075d0:	4293      	cmp	r3, r2
 80075d2:	bf94      	ite	ls
 80075d4:	2301      	movls	r3, #1
 80075d6:	2300      	movhi	r3, #0
 80075d8:	b2db      	uxtb	r3, r3
 80075da:	e006      	b.n	80075ea <HAL_I2C_Init+0x92>
 80075dc:	68fb      	ldr	r3, [r7, #12]
 80075de:	4a7d      	ldr	r2, [pc, #500]	; (80077d4 <HAL_I2C_Init+0x27c>)
 80075e0:	4293      	cmp	r3, r2
 80075e2:	bf94      	ite	ls
 80075e4:	2301      	movls	r3, #1
 80075e6:	2300      	movhi	r3, #0
 80075e8:	b2db      	uxtb	r3, r3
 80075ea:	2b00      	cmp	r3, #0
 80075ec:	d001      	beq.n	80075f2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80075ee:	2301      	movs	r3, #1
 80075f0:	e0e7      	b.n	80077c2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80075f2:	68fb      	ldr	r3, [r7, #12]
 80075f4:	4a78      	ldr	r2, [pc, #480]	; (80077d8 <HAL_I2C_Init+0x280>)
 80075f6:	fba2 2303 	umull	r2, r3, r2, r3
 80075fa:	0c9b      	lsrs	r3, r3, #18
 80075fc:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	681b      	ldr	r3, [r3, #0]
 8007602:	685b      	ldr	r3, [r3, #4]
 8007604:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	681b      	ldr	r3, [r3, #0]
 800760c:	68ba      	ldr	r2, [r7, #8]
 800760e:	430a      	orrs	r2, r1
 8007610:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	681b      	ldr	r3, [r3, #0]
 8007616:	6a1b      	ldr	r3, [r3, #32]
 8007618:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	685b      	ldr	r3, [r3, #4]
 8007620:	4a6a      	ldr	r2, [pc, #424]	; (80077cc <HAL_I2C_Init+0x274>)
 8007622:	4293      	cmp	r3, r2
 8007624:	d802      	bhi.n	800762c <HAL_I2C_Init+0xd4>
 8007626:	68bb      	ldr	r3, [r7, #8]
 8007628:	3301      	adds	r3, #1
 800762a:	e009      	b.n	8007640 <HAL_I2C_Init+0xe8>
 800762c:	68bb      	ldr	r3, [r7, #8]
 800762e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8007632:	fb02 f303 	mul.w	r3, r2, r3
 8007636:	4a69      	ldr	r2, [pc, #420]	; (80077dc <HAL_I2C_Init+0x284>)
 8007638:	fba2 2303 	umull	r2, r3, r2, r3
 800763c:	099b      	lsrs	r3, r3, #6
 800763e:	3301      	adds	r3, #1
 8007640:	687a      	ldr	r2, [r7, #4]
 8007642:	6812      	ldr	r2, [r2, #0]
 8007644:	430b      	orrs	r3, r1
 8007646:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	681b      	ldr	r3, [r3, #0]
 800764c:	69db      	ldr	r3, [r3, #28]
 800764e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8007652:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	685b      	ldr	r3, [r3, #4]
 800765a:	495c      	ldr	r1, [pc, #368]	; (80077cc <HAL_I2C_Init+0x274>)
 800765c:	428b      	cmp	r3, r1
 800765e:	d819      	bhi.n	8007694 <HAL_I2C_Init+0x13c>
 8007660:	68fb      	ldr	r3, [r7, #12]
 8007662:	1e59      	subs	r1, r3, #1
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	685b      	ldr	r3, [r3, #4]
 8007668:	005b      	lsls	r3, r3, #1
 800766a:	fbb1 f3f3 	udiv	r3, r1, r3
 800766e:	1c59      	adds	r1, r3, #1
 8007670:	f640 73fc 	movw	r3, #4092	; 0xffc
 8007674:	400b      	ands	r3, r1
 8007676:	2b00      	cmp	r3, #0
 8007678:	d00a      	beq.n	8007690 <HAL_I2C_Init+0x138>
 800767a:	68fb      	ldr	r3, [r7, #12]
 800767c:	1e59      	subs	r1, r3, #1
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	685b      	ldr	r3, [r3, #4]
 8007682:	005b      	lsls	r3, r3, #1
 8007684:	fbb1 f3f3 	udiv	r3, r1, r3
 8007688:	3301      	adds	r3, #1
 800768a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800768e:	e051      	b.n	8007734 <HAL_I2C_Init+0x1dc>
 8007690:	2304      	movs	r3, #4
 8007692:	e04f      	b.n	8007734 <HAL_I2C_Init+0x1dc>
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	689b      	ldr	r3, [r3, #8]
 8007698:	2b00      	cmp	r3, #0
 800769a:	d111      	bne.n	80076c0 <HAL_I2C_Init+0x168>
 800769c:	68fb      	ldr	r3, [r7, #12]
 800769e:	1e58      	subs	r0, r3, #1
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	6859      	ldr	r1, [r3, #4]
 80076a4:	460b      	mov	r3, r1
 80076a6:	005b      	lsls	r3, r3, #1
 80076a8:	440b      	add	r3, r1
 80076aa:	fbb0 f3f3 	udiv	r3, r0, r3
 80076ae:	3301      	adds	r3, #1
 80076b0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80076b4:	2b00      	cmp	r3, #0
 80076b6:	bf0c      	ite	eq
 80076b8:	2301      	moveq	r3, #1
 80076ba:	2300      	movne	r3, #0
 80076bc:	b2db      	uxtb	r3, r3
 80076be:	e012      	b.n	80076e6 <HAL_I2C_Init+0x18e>
 80076c0:	68fb      	ldr	r3, [r7, #12]
 80076c2:	1e58      	subs	r0, r3, #1
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	6859      	ldr	r1, [r3, #4]
 80076c8:	460b      	mov	r3, r1
 80076ca:	009b      	lsls	r3, r3, #2
 80076cc:	440b      	add	r3, r1
 80076ce:	0099      	lsls	r1, r3, #2
 80076d0:	440b      	add	r3, r1
 80076d2:	fbb0 f3f3 	udiv	r3, r0, r3
 80076d6:	3301      	adds	r3, #1
 80076d8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80076dc:	2b00      	cmp	r3, #0
 80076de:	bf0c      	ite	eq
 80076e0:	2301      	moveq	r3, #1
 80076e2:	2300      	movne	r3, #0
 80076e4:	b2db      	uxtb	r3, r3
 80076e6:	2b00      	cmp	r3, #0
 80076e8:	d001      	beq.n	80076ee <HAL_I2C_Init+0x196>
 80076ea:	2301      	movs	r3, #1
 80076ec:	e022      	b.n	8007734 <HAL_I2C_Init+0x1dc>
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	689b      	ldr	r3, [r3, #8]
 80076f2:	2b00      	cmp	r3, #0
 80076f4:	d10e      	bne.n	8007714 <HAL_I2C_Init+0x1bc>
 80076f6:	68fb      	ldr	r3, [r7, #12]
 80076f8:	1e58      	subs	r0, r3, #1
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	6859      	ldr	r1, [r3, #4]
 80076fe:	460b      	mov	r3, r1
 8007700:	005b      	lsls	r3, r3, #1
 8007702:	440b      	add	r3, r1
 8007704:	fbb0 f3f3 	udiv	r3, r0, r3
 8007708:	3301      	adds	r3, #1
 800770a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800770e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007712:	e00f      	b.n	8007734 <HAL_I2C_Init+0x1dc>
 8007714:	68fb      	ldr	r3, [r7, #12]
 8007716:	1e58      	subs	r0, r3, #1
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	6859      	ldr	r1, [r3, #4]
 800771c:	460b      	mov	r3, r1
 800771e:	009b      	lsls	r3, r3, #2
 8007720:	440b      	add	r3, r1
 8007722:	0099      	lsls	r1, r3, #2
 8007724:	440b      	add	r3, r1
 8007726:	fbb0 f3f3 	udiv	r3, r0, r3
 800772a:	3301      	adds	r3, #1
 800772c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007730:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007734:	6879      	ldr	r1, [r7, #4]
 8007736:	6809      	ldr	r1, [r1, #0]
 8007738:	4313      	orrs	r3, r2
 800773a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	681b      	ldr	r3, [r3, #0]
 8007740:	681b      	ldr	r3, [r3, #0]
 8007742:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	69da      	ldr	r2, [r3, #28]
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	6a1b      	ldr	r3, [r3, #32]
 800774e:	431a      	orrs	r2, r3
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	681b      	ldr	r3, [r3, #0]
 8007754:	430a      	orrs	r2, r1
 8007756:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	681b      	ldr	r3, [r3, #0]
 800775c:	689b      	ldr	r3, [r3, #8]
 800775e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8007762:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8007766:	687a      	ldr	r2, [r7, #4]
 8007768:	6911      	ldr	r1, [r2, #16]
 800776a:	687a      	ldr	r2, [r7, #4]
 800776c:	68d2      	ldr	r2, [r2, #12]
 800776e:	4311      	orrs	r1, r2
 8007770:	687a      	ldr	r2, [r7, #4]
 8007772:	6812      	ldr	r2, [r2, #0]
 8007774:	430b      	orrs	r3, r1
 8007776:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	681b      	ldr	r3, [r3, #0]
 800777c:	68db      	ldr	r3, [r3, #12]
 800777e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	695a      	ldr	r2, [r3, #20]
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	699b      	ldr	r3, [r3, #24]
 800778a:	431a      	orrs	r2, r3
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	681b      	ldr	r3, [r3, #0]
 8007790:	430a      	orrs	r2, r1
 8007792:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	681b      	ldr	r3, [r3, #0]
 8007798:	681a      	ldr	r2, [r3, #0]
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	681b      	ldr	r3, [r3, #0]
 800779e:	f042 0201 	orr.w	r2, r2, #1
 80077a2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	2200      	movs	r2, #0
 80077a8:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	2220      	movs	r2, #32
 80077ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	2200      	movs	r2, #0
 80077b6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	2200      	movs	r2, #0
 80077bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80077c0:	2300      	movs	r3, #0
}
 80077c2:	4618      	mov	r0, r3
 80077c4:	3710      	adds	r7, #16
 80077c6:	46bd      	mov	sp, r7
 80077c8:	bd80      	pop	{r7, pc}
 80077ca:	bf00      	nop
 80077cc:	000186a0 	.word	0x000186a0
 80077d0:	001e847f 	.word	0x001e847f
 80077d4:	003d08ff 	.word	0x003d08ff
 80077d8:	431bde83 	.word	0x431bde83
 80077dc:	10624dd3 	.word	0x10624dd3

080077e0 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 80077e0:	b580      	push	{r7, lr}
 80077e2:	b082      	sub	sp, #8
 80077e4:	af00      	add	r7, sp, #0
 80077e6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	2b00      	cmp	r3, #0
 80077ec:	d101      	bne.n	80077f2 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 80077ee:	2301      	movs	r3, #1
 80077f0:	e021      	b.n	8007836 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	2224      	movs	r2, #36	; 0x24
 80077f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	681b      	ldr	r3, [r3, #0]
 80077fe:	681a      	ldr	r2, [r3, #0]
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	681b      	ldr	r3, [r3, #0]
 8007804:	f022 0201 	bic.w	r2, r2, #1
 8007808:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 800780a:	6878      	ldr	r0, [r7, #4]
 800780c:	f000 f821 	bl	8007852 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	2200      	movs	r2, #0
 8007814:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State         = HAL_I2C_STATE_RESET;
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	2200      	movs	r2, #0
 800781a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	2200      	movs	r2, #0
 8007822:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	2200      	movs	r2, #0
 8007828:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	2200      	movs	r2, #0
 8007830:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007834:	2300      	movs	r3, #0
}
 8007836:	4618      	mov	r0, r3
 8007838:	3708      	adds	r7, #8
 800783a:	46bd      	mov	sp, r7
 800783c:	bd80      	pop	{r7, pc}

0800783e <HAL_I2C_MspInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspInit(I2C_HandleTypeDef *hi2c)
{
 800783e:	b480      	push	{r7}
 8007840:	b083      	sub	sp, #12
 8007842:	af00      	add	r7, sp, #0
 8007844:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspInit could be implemented in the user file
   */
}
 8007846:	bf00      	nop
 8007848:	370c      	adds	r7, #12
 800784a:	46bd      	mov	sp, r7
 800784c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007850:	4770      	bx	lr

08007852 <HAL_I2C_MspDeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspDeInit(I2C_HandleTypeDef *hi2c)
{
 8007852:	b480      	push	{r7}
 8007854:	b083      	sub	sp, #12
 8007856:	af00      	add	r7, sp, #0
 8007858:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspDeInit could be implemented in the user file
   */
}
 800785a:	bf00      	nop
 800785c:	370c      	adds	r7, #12
 800785e:	46bd      	mov	sp, r7
 8007860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007864:	4770      	bx	lr
	...

08007868 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007868:	b580      	push	{r7, lr}
 800786a:	b088      	sub	sp, #32
 800786c:	af02      	add	r7, sp, #8
 800786e:	60f8      	str	r0, [r7, #12]
 8007870:	4608      	mov	r0, r1
 8007872:	4611      	mov	r1, r2
 8007874:	461a      	mov	r2, r3
 8007876:	4603      	mov	r3, r0
 8007878:	817b      	strh	r3, [r7, #10]
 800787a:	460b      	mov	r3, r1
 800787c:	813b      	strh	r3, [r7, #8]
 800787e:	4613      	mov	r3, r2
 8007880:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8007882:	f7ff fa81 	bl	8006d88 <HAL_GetTick>
 8007886:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007888:	68fb      	ldr	r3, [r7, #12]
 800788a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800788e:	b2db      	uxtb	r3, r3
 8007890:	2b20      	cmp	r3, #32
 8007892:	f040 80d9 	bne.w	8007a48 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8007896:	697b      	ldr	r3, [r7, #20]
 8007898:	9300      	str	r3, [sp, #0]
 800789a:	2319      	movs	r3, #25
 800789c:	2201      	movs	r2, #1
 800789e:	496d      	ldr	r1, [pc, #436]	; (8007a54 <HAL_I2C_Mem_Write+0x1ec>)
 80078a0:	68f8      	ldr	r0, [r7, #12]
 80078a2:	f000 fc99 	bl	80081d8 <I2C_WaitOnFlagUntilTimeout>
 80078a6:	4603      	mov	r3, r0
 80078a8:	2b00      	cmp	r3, #0
 80078aa:	d001      	beq.n	80078b0 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80078ac:	2302      	movs	r3, #2
 80078ae:	e0cc      	b.n	8007a4a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80078b0:	68fb      	ldr	r3, [r7, #12]
 80078b2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80078b6:	2b01      	cmp	r3, #1
 80078b8:	d101      	bne.n	80078be <HAL_I2C_Mem_Write+0x56>
 80078ba:	2302      	movs	r3, #2
 80078bc:	e0c5      	b.n	8007a4a <HAL_I2C_Mem_Write+0x1e2>
 80078be:	68fb      	ldr	r3, [r7, #12]
 80078c0:	2201      	movs	r2, #1
 80078c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80078c6:	68fb      	ldr	r3, [r7, #12]
 80078c8:	681b      	ldr	r3, [r3, #0]
 80078ca:	681b      	ldr	r3, [r3, #0]
 80078cc:	f003 0301 	and.w	r3, r3, #1
 80078d0:	2b01      	cmp	r3, #1
 80078d2:	d007      	beq.n	80078e4 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80078d4:	68fb      	ldr	r3, [r7, #12]
 80078d6:	681b      	ldr	r3, [r3, #0]
 80078d8:	681a      	ldr	r2, [r3, #0]
 80078da:	68fb      	ldr	r3, [r7, #12]
 80078dc:	681b      	ldr	r3, [r3, #0]
 80078de:	f042 0201 	orr.w	r2, r2, #1
 80078e2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80078e4:	68fb      	ldr	r3, [r7, #12]
 80078e6:	681b      	ldr	r3, [r3, #0]
 80078e8:	681a      	ldr	r2, [r3, #0]
 80078ea:	68fb      	ldr	r3, [r7, #12]
 80078ec:	681b      	ldr	r3, [r3, #0]
 80078ee:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80078f2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80078f4:	68fb      	ldr	r3, [r7, #12]
 80078f6:	2221      	movs	r2, #33	; 0x21
 80078f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80078fc:	68fb      	ldr	r3, [r7, #12]
 80078fe:	2240      	movs	r2, #64	; 0x40
 8007900:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007904:	68fb      	ldr	r3, [r7, #12]
 8007906:	2200      	movs	r2, #0
 8007908:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800790a:	68fb      	ldr	r3, [r7, #12]
 800790c:	6a3a      	ldr	r2, [r7, #32]
 800790e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8007910:	68fb      	ldr	r3, [r7, #12]
 8007912:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8007914:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8007916:	68fb      	ldr	r3, [r7, #12]
 8007918:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800791a:	b29a      	uxth	r2, r3
 800791c:	68fb      	ldr	r3, [r7, #12]
 800791e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8007920:	68fb      	ldr	r3, [r7, #12]
 8007922:	4a4d      	ldr	r2, [pc, #308]	; (8007a58 <HAL_I2C_Mem_Write+0x1f0>)
 8007924:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8007926:	88f8      	ldrh	r0, [r7, #6]
 8007928:	893a      	ldrh	r2, [r7, #8]
 800792a:	8979      	ldrh	r1, [r7, #10]
 800792c:	697b      	ldr	r3, [r7, #20]
 800792e:	9301      	str	r3, [sp, #4]
 8007930:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007932:	9300      	str	r3, [sp, #0]
 8007934:	4603      	mov	r3, r0
 8007936:	68f8      	ldr	r0, [r7, #12]
 8007938:	f000 fad0 	bl	8007edc <I2C_RequestMemoryWrite>
 800793c:	4603      	mov	r3, r0
 800793e:	2b00      	cmp	r3, #0
 8007940:	d052      	beq.n	80079e8 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8007942:	2301      	movs	r3, #1
 8007944:	e081      	b.n	8007a4a <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007946:	697a      	ldr	r2, [r7, #20]
 8007948:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800794a:	68f8      	ldr	r0, [r7, #12]
 800794c:	f000 fd1a 	bl	8008384 <I2C_WaitOnTXEFlagUntilTimeout>
 8007950:	4603      	mov	r3, r0
 8007952:	2b00      	cmp	r3, #0
 8007954:	d00d      	beq.n	8007972 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007956:	68fb      	ldr	r3, [r7, #12]
 8007958:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800795a:	2b04      	cmp	r3, #4
 800795c:	d107      	bne.n	800796e <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800795e:	68fb      	ldr	r3, [r7, #12]
 8007960:	681b      	ldr	r3, [r3, #0]
 8007962:	681a      	ldr	r2, [r3, #0]
 8007964:	68fb      	ldr	r3, [r7, #12]
 8007966:	681b      	ldr	r3, [r3, #0]
 8007968:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800796c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800796e:	2301      	movs	r3, #1
 8007970:	e06b      	b.n	8007a4a <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8007972:	68fb      	ldr	r3, [r7, #12]
 8007974:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007976:	781a      	ldrb	r2, [r3, #0]
 8007978:	68fb      	ldr	r3, [r7, #12]
 800797a:	681b      	ldr	r3, [r3, #0]
 800797c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800797e:	68fb      	ldr	r3, [r7, #12]
 8007980:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007982:	1c5a      	adds	r2, r3, #1
 8007984:	68fb      	ldr	r3, [r7, #12]
 8007986:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8007988:	68fb      	ldr	r3, [r7, #12]
 800798a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800798c:	3b01      	subs	r3, #1
 800798e:	b29a      	uxth	r2, r3
 8007990:	68fb      	ldr	r3, [r7, #12]
 8007992:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8007994:	68fb      	ldr	r3, [r7, #12]
 8007996:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007998:	b29b      	uxth	r3, r3
 800799a:	3b01      	subs	r3, #1
 800799c:	b29a      	uxth	r2, r3
 800799e:	68fb      	ldr	r3, [r7, #12]
 80079a0:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80079a2:	68fb      	ldr	r3, [r7, #12]
 80079a4:	681b      	ldr	r3, [r3, #0]
 80079a6:	695b      	ldr	r3, [r3, #20]
 80079a8:	f003 0304 	and.w	r3, r3, #4
 80079ac:	2b04      	cmp	r3, #4
 80079ae:	d11b      	bne.n	80079e8 <HAL_I2C_Mem_Write+0x180>
 80079b0:	68fb      	ldr	r3, [r7, #12]
 80079b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80079b4:	2b00      	cmp	r3, #0
 80079b6:	d017      	beq.n	80079e8 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80079b8:	68fb      	ldr	r3, [r7, #12]
 80079ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079bc:	781a      	ldrb	r2, [r3, #0]
 80079be:	68fb      	ldr	r3, [r7, #12]
 80079c0:	681b      	ldr	r3, [r3, #0]
 80079c2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80079c4:	68fb      	ldr	r3, [r7, #12]
 80079c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079c8:	1c5a      	adds	r2, r3, #1
 80079ca:	68fb      	ldr	r3, [r7, #12]
 80079cc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80079ce:	68fb      	ldr	r3, [r7, #12]
 80079d0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80079d2:	3b01      	subs	r3, #1
 80079d4:	b29a      	uxth	r2, r3
 80079d6:	68fb      	ldr	r3, [r7, #12]
 80079d8:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80079da:	68fb      	ldr	r3, [r7, #12]
 80079dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80079de:	b29b      	uxth	r3, r3
 80079e0:	3b01      	subs	r3, #1
 80079e2:	b29a      	uxth	r2, r3
 80079e4:	68fb      	ldr	r3, [r7, #12]
 80079e6:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80079e8:	68fb      	ldr	r3, [r7, #12]
 80079ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80079ec:	2b00      	cmp	r3, #0
 80079ee:	d1aa      	bne.n	8007946 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80079f0:	697a      	ldr	r2, [r7, #20]
 80079f2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80079f4:	68f8      	ldr	r0, [r7, #12]
 80079f6:	f000 fd06 	bl	8008406 <I2C_WaitOnBTFFlagUntilTimeout>
 80079fa:	4603      	mov	r3, r0
 80079fc:	2b00      	cmp	r3, #0
 80079fe:	d00d      	beq.n	8007a1c <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007a00:	68fb      	ldr	r3, [r7, #12]
 8007a02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a04:	2b04      	cmp	r3, #4
 8007a06:	d107      	bne.n	8007a18 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007a08:	68fb      	ldr	r3, [r7, #12]
 8007a0a:	681b      	ldr	r3, [r3, #0]
 8007a0c:	681a      	ldr	r2, [r3, #0]
 8007a0e:	68fb      	ldr	r3, [r7, #12]
 8007a10:	681b      	ldr	r3, [r3, #0]
 8007a12:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007a16:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8007a18:	2301      	movs	r3, #1
 8007a1a:	e016      	b.n	8007a4a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007a1c:	68fb      	ldr	r3, [r7, #12]
 8007a1e:	681b      	ldr	r3, [r3, #0]
 8007a20:	681a      	ldr	r2, [r3, #0]
 8007a22:	68fb      	ldr	r3, [r7, #12]
 8007a24:	681b      	ldr	r3, [r3, #0]
 8007a26:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007a2a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007a2c:	68fb      	ldr	r3, [r7, #12]
 8007a2e:	2220      	movs	r2, #32
 8007a30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8007a34:	68fb      	ldr	r3, [r7, #12]
 8007a36:	2200      	movs	r2, #0
 8007a38:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007a3c:	68fb      	ldr	r3, [r7, #12]
 8007a3e:	2200      	movs	r2, #0
 8007a40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8007a44:	2300      	movs	r3, #0
 8007a46:	e000      	b.n	8007a4a <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8007a48:	2302      	movs	r3, #2
  }
}
 8007a4a:	4618      	mov	r0, r3
 8007a4c:	3718      	adds	r7, #24
 8007a4e:	46bd      	mov	sp, r7
 8007a50:	bd80      	pop	{r7, pc}
 8007a52:	bf00      	nop
 8007a54:	00100002 	.word	0x00100002
 8007a58:	ffff0000 	.word	0xffff0000

08007a5c <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007a5c:	b580      	push	{r7, lr}
 8007a5e:	b08c      	sub	sp, #48	; 0x30
 8007a60:	af02      	add	r7, sp, #8
 8007a62:	60f8      	str	r0, [r7, #12]
 8007a64:	4608      	mov	r0, r1
 8007a66:	4611      	mov	r1, r2
 8007a68:	461a      	mov	r2, r3
 8007a6a:	4603      	mov	r3, r0
 8007a6c:	817b      	strh	r3, [r7, #10]
 8007a6e:	460b      	mov	r3, r1
 8007a70:	813b      	strh	r3, [r7, #8]
 8007a72:	4613      	mov	r3, r2
 8007a74:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8007a76:	f7ff f987 	bl	8006d88 <HAL_GetTick>
 8007a7a:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007a7c:	68fb      	ldr	r3, [r7, #12]
 8007a7e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007a82:	b2db      	uxtb	r3, r3
 8007a84:	2b20      	cmp	r3, #32
 8007a86:	f040 8208 	bne.w	8007e9a <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8007a8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a8c:	9300      	str	r3, [sp, #0]
 8007a8e:	2319      	movs	r3, #25
 8007a90:	2201      	movs	r2, #1
 8007a92:	497b      	ldr	r1, [pc, #492]	; (8007c80 <HAL_I2C_Mem_Read+0x224>)
 8007a94:	68f8      	ldr	r0, [r7, #12]
 8007a96:	f000 fb9f 	bl	80081d8 <I2C_WaitOnFlagUntilTimeout>
 8007a9a:	4603      	mov	r3, r0
 8007a9c:	2b00      	cmp	r3, #0
 8007a9e:	d001      	beq.n	8007aa4 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8007aa0:	2302      	movs	r3, #2
 8007aa2:	e1fb      	b.n	8007e9c <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007aa4:	68fb      	ldr	r3, [r7, #12]
 8007aa6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007aaa:	2b01      	cmp	r3, #1
 8007aac:	d101      	bne.n	8007ab2 <HAL_I2C_Mem_Read+0x56>
 8007aae:	2302      	movs	r3, #2
 8007ab0:	e1f4      	b.n	8007e9c <HAL_I2C_Mem_Read+0x440>
 8007ab2:	68fb      	ldr	r3, [r7, #12]
 8007ab4:	2201      	movs	r2, #1
 8007ab6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8007aba:	68fb      	ldr	r3, [r7, #12]
 8007abc:	681b      	ldr	r3, [r3, #0]
 8007abe:	681b      	ldr	r3, [r3, #0]
 8007ac0:	f003 0301 	and.w	r3, r3, #1
 8007ac4:	2b01      	cmp	r3, #1
 8007ac6:	d007      	beq.n	8007ad8 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8007ac8:	68fb      	ldr	r3, [r7, #12]
 8007aca:	681b      	ldr	r3, [r3, #0]
 8007acc:	681a      	ldr	r2, [r3, #0]
 8007ace:	68fb      	ldr	r3, [r7, #12]
 8007ad0:	681b      	ldr	r3, [r3, #0]
 8007ad2:	f042 0201 	orr.w	r2, r2, #1
 8007ad6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8007ad8:	68fb      	ldr	r3, [r7, #12]
 8007ada:	681b      	ldr	r3, [r3, #0]
 8007adc:	681a      	ldr	r2, [r3, #0]
 8007ade:	68fb      	ldr	r3, [r7, #12]
 8007ae0:	681b      	ldr	r3, [r3, #0]
 8007ae2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007ae6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8007ae8:	68fb      	ldr	r3, [r7, #12]
 8007aea:	2222      	movs	r2, #34	; 0x22
 8007aec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8007af0:	68fb      	ldr	r3, [r7, #12]
 8007af2:	2240      	movs	r2, #64	; 0x40
 8007af4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007af8:	68fb      	ldr	r3, [r7, #12]
 8007afa:	2200      	movs	r2, #0
 8007afc:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8007afe:	68fb      	ldr	r3, [r7, #12]
 8007b00:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007b02:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8007b04:	68fb      	ldr	r3, [r7, #12]
 8007b06:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8007b08:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8007b0a:	68fb      	ldr	r3, [r7, #12]
 8007b0c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007b0e:	b29a      	uxth	r2, r3
 8007b10:	68fb      	ldr	r3, [r7, #12]
 8007b12:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8007b14:	68fb      	ldr	r3, [r7, #12]
 8007b16:	4a5b      	ldr	r2, [pc, #364]	; (8007c84 <HAL_I2C_Mem_Read+0x228>)
 8007b18:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8007b1a:	88f8      	ldrh	r0, [r7, #6]
 8007b1c:	893a      	ldrh	r2, [r7, #8]
 8007b1e:	8979      	ldrh	r1, [r7, #10]
 8007b20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b22:	9301      	str	r3, [sp, #4]
 8007b24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b26:	9300      	str	r3, [sp, #0]
 8007b28:	4603      	mov	r3, r0
 8007b2a:	68f8      	ldr	r0, [r7, #12]
 8007b2c:	f000 fa6c 	bl	8008008 <I2C_RequestMemoryRead>
 8007b30:	4603      	mov	r3, r0
 8007b32:	2b00      	cmp	r3, #0
 8007b34:	d001      	beq.n	8007b3a <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8007b36:	2301      	movs	r3, #1
 8007b38:	e1b0      	b.n	8007e9c <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8007b3a:	68fb      	ldr	r3, [r7, #12]
 8007b3c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007b3e:	2b00      	cmp	r3, #0
 8007b40:	d113      	bne.n	8007b6a <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007b42:	2300      	movs	r3, #0
 8007b44:	623b      	str	r3, [r7, #32]
 8007b46:	68fb      	ldr	r3, [r7, #12]
 8007b48:	681b      	ldr	r3, [r3, #0]
 8007b4a:	695b      	ldr	r3, [r3, #20]
 8007b4c:	623b      	str	r3, [r7, #32]
 8007b4e:	68fb      	ldr	r3, [r7, #12]
 8007b50:	681b      	ldr	r3, [r3, #0]
 8007b52:	699b      	ldr	r3, [r3, #24]
 8007b54:	623b      	str	r3, [r7, #32]
 8007b56:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007b58:	68fb      	ldr	r3, [r7, #12]
 8007b5a:	681b      	ldr	r3, [r3, #0]
 8007b5c:	681a      	ldr	r2, [r3, #0]
 8007b5e:	68fb      	ldr	r3, [r7, #12]
 8007b60:	681b      	ldr	r3, [r3, #0]
 8007b62:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007b66:	601a      	str	r2, [r3, #0]
 8007b68:	e184      	b.n	8007e74 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8007b6a:	68fb      	ldr	r3, [r7, #12]
 8007b6c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007b6e:	2b01      	cmp	r3, #1
 8007b70:	d11b      	bne.n	8007baa <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007b72:	68fb      	ldr	r3, [r7, #12]
 8007b74:	681b      	ldr	r3, [r3, #0]
 8007b76:	681a      	ldr	r2, [r3, #0]
 8007b78:	68fb      	ldr	r3, [r7, #12]
 8007b7a:	681b      	ldr	r3, [r3, #0]
 8007b7c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007b80:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007b82:	2300      	movs	r3, #0
 8007b84:	61fb      	str	r3, [r7, #28]
 8007b86:	68fb      	ldr	r3, [r7, #12]
 8007b88:	681b      	ldr	r3, [r3, #0]
 8007b8a:	695b      	ldr	r3, [r3, #20]
 8007b8c:	61fb      	str	r3, [r7, #28]
 8007b8e:	68fb      	ldr	r3, [r7, #12]
 8007b90:	681b      	ldr	r3, [r3, #0]
 8007b92:	699b      	ldr	r3, [r3, #24]
 8007b94:	61fb      	str	r3, [r7, #28]
 8007b96:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007b98:	68fb      	ldr	r3, [r7, #12]
 8007b9a:	681b      	ldr	r3, [r3, #0]
 8007b9c:	681a      	ldr	r2, [r3, #0]
 8007b9e:	68fb      	ldr	r3, [r7, #12]
 8007ba0:	681b      	ldr	r3, [r3, #0]
 8007ba2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007ba6:	601a      	str	r2, [r3, #0]
 8007ba8:	e164      	b.n	8007e74 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8007baa:	68fb      	ldr	r3, [r7, #12]
 8007bac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007bae:	2b02      	cmp	r3, #2
 8007bb0:	d11b      	bne.n	8007bea <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007bb2:	68fb      	ldr	r3, [r7, #12]
 8007bb4:	681b      	ldr	r3, [r3, #0]
 8007bb6:	681a      	ldr	r2, [r3, #0]
 8007bb8:	68fb      	ldr	r3, [r7, #12]
 8007bba:	681b      	ldr	r3, [r3, #0]
 8007bbc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007bc0:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8007bc2:	68fb      	ldr	r3, [r7, #12]
 8007bc4:	681b      	ldr	r3, [r3, #0]
 8007bc6:	681a      	ldr	r2, [r3, #0]
 8007bc8:	68fb      	ldr	r3, [r7, #12]
 8007bca:	681b      	ldr	r3, [r3, #0]
 8007bcc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007bd0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007bd2:	2300      	movs	r3, #0
 8007bd4:	61bb      	str	r3, [r7, #24]
 8007bd6:	68fb      	ldr	r3, [r7, #12]
 8007bd8:	681b      	ldr	r3, [r3, #0]
 8007bda:	695b      	ldr	r3, [r3, #20]
 8007bdc:	61bb      	str	r3, [r7, #24]
 8007bde:	68fb      	ldr	r3, [r7, #12]
 8007be0:	681b      	ldr	r3, [r3, #0]
 8007be2:	699b      	ldr	r3, [r3, #24]
 8007be4:	61bb      	str	r3, [r7, #24]
 8007be6:	69bb      	ldr	r3, [r7, #24]
 8007be8:	e144      	b.n	8007e74 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007bea:	2300      	movs	r3, #0
 8007bec:	617b      	str	r3, [r7, #20]
 8007bee:	68fb      	ldr	r3, [r7, #12]
 8007bf0:	681b      	ldr	r3, [r3, #0]
 8007bf2:	695b      	ldr	r3, [r3, #20]
 8007bf4:	617b      	str	r3, [r7, #20]
 8007bf6:	68fb      	ldr	r3, [r7, #12]
 8007bf8:	681b      	ldr	r3, [r3, #0]
 8007bfa:	699b      	ldr	r3, [r3, #24]
 8007bfc:	617b      	str	r3, [r7, #20]
 8007bfe:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8007c00:	e138      	b.n	8007e74 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8007c02:	68fb      	ldr	r3, [r7, #12]
 8007c04:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007c06:	2b03      	cmp	r3, #3
 8007c08:	f200 80f1 	bhi.w	8007dee <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8007c0c:	68fb      	ldr	r3, [r7, #12]
 8007c0e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007c10:	2b01      	cmp	r3, #1
 8007c12:	d123      	bne.n	8007c5c <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007c14:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007c16:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8007c18:	68f8      	ldr	r0, [r7, #12]
 8007c1a:	f000 fc35 	bl	8008488 <I2C_WaitOnRXNEFlagUntilTimeout>
 8007c1e:	4603      	mov	r3, r0
 8007c20:	2b00      	cmp	r3, #0
 8007c22:	d001      	beq.n	8007c28 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8007c24:	2301      	movs	r3, #1
 8007c26:	e139      	b.n	8007e9c <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007c28:	68fb      	ldr	r3, [r7, #12]
 8007c2a:	681b      	ldr	r3, [r3, #0]
 8007c2c:	691a      	ldr	r2, [r3, #16]
 8007c2e:	68fb      	ldr	r3, [r7, #12]
 8007c30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c32:	b2d2      	uxtb	r2, r2
 8007c34:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007c36:	68fb      	ldr	r3, [r7, #12]
 8007c38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c3a:	1c5a      	adds	r2, r3, #1
 8007c3c:	68fb      	ldr	r3, [r7, #12]
 8007c3e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007c40:	68fb      	ldr	r3, [r7, #12]
 8007c42:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007c44:	3b01      	subs	r3, #1
 8007c46:	b29a      	uxth	r2, r3
 8007c48:	68fb      	ldr	r3, [r7, #12]
 8007c4a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007c4c:	68fb      	ldr	r3, [r7, #12]
 8007c4e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007c50:	b29b      	uxth	r3, r3
 8007c52:	3b01      	subs	r3, #1
 8007c54:	b29a      	uxth	r2, r3
 8007c56:	68fb      	ldr	r3, [r7, #12]
 8007c58:	855a      	strh	r2, [r3, #42]	; 0x2a
 8007c5a:	e10b      	b.n	8007e74 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8007c5c:	68fb      	ldr	r3, [r7, #12]
 8007c5e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007c60:	2b02      	cmp	r3, #2
 8007c62:	d14e      	bne.n	8007d02 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8007c64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c66:	9300      	str	r3, [sp, #0]
 8007c68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c6a:	2200      	movs	r2, #0
 8007c6c:	4906      	ldr	r1, [pc, #24]	; (8007c88 <HAL_I2C_Mem_Read+0x22c>)
 8007c6e:	68f8      	ldr	r0, [r7, #12]
 8007c70:	f000 fab2 	bl	80081d8 <I2C_WaitOnFlagUntilTimeout>
 8007c74:	4603      	mov	r3, r0
 8007c76:	2b00      	cmp	r3, #0
 8007c78:	d008      	beq.n	8007c8c <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8007c7a:	2301      	movs	r3, #1
 8007c7c:	e10e      	b.n	8007e9c <HAL_I2C_Mem_Read+0x440>
 8007c7e:	bf00      	nop
 8007c80:	00100002 	.word	0x00100002
 8007c84:	ffff0000 	.word	0xffff0000
 8007c88:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007c8c:	68fb      	ldr	r3, [r7, #12]
 8007c8e:	681b      	ldr	r3, [r3, #0]
 8007c90:	681a      	ldr	r2, [r3, #0]
 8007c92:	68fb      	ldr	r3, [r7, #12]
 8007c94:	681b      	ldr	r3, [r3, #0]
 8007c96:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007c9a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007c9c:	68fb      	ldr	r3, [r7, #12]
 8007c9e:	681b      	ldr	r3, [r3, #0]
 8007ca0:	691a      	ldr	r2, [r3, #16]
 8007ca2:	68fb      	ldr	r3, [r7, #12]
 8007ca4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ca6:	b2d2      	uxtb	r2, r2
 8007ca8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007caa:	68fb      	ldr	r3, [r7, #12]
 8007cac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007cae:	1c5a      	adds	r2, r3, #1
 8007cb0:	68fb      	ldr	r3, [r7, #12]
 8007cb2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007cb4:	68fb      	ldr	r3, [r7, #12]
 8007cb6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007cb8:	3b01      	subs	r3, #1
 8007cba:	b29a      	uxth	r2, r3
 8007cbc:	68fb      	ldr	r3, [r7, #12]
 8007cbe:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007cc0:	68fb      	ldr	r3, [r7, #12]
 8007cc2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007cc4:	b29b      	uxth	r3, r3
 8007cc6:	3b01      	subs	r3, #1
 8007cc8:	b29a      	uxth	r2, r3
 8007cca:	68fb      	ldr	r3, [r7, #12]
 8007ccc:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007cce:	68fb      	ldr	r3, [r7, #12]
 8007cd0:	681b      	ldr	r3, [r3, #0]
 8007cd2:	691a      	ldr	r2, [r3, #16]
 8007cd4:	68fb      	ldr	r3, [r7, #12]
 8007cd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007cd8:	b2d2      	uxtb	r2, r2
 8007cda:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007cdc:	68fb      	ldr	r3, [r7, #12]
 8007cde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ce0:	1c5a      	adds	r2, r3, #1
 8007ce2:	68fb      	ldr	r3, [r7, #12]
 8007ce4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007ce6:	68fb      	ldr	r3, [r7, #12]
 8007ce8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007cea:	3b01      	subs	r3, #1
 8007cec:	b29a      	uxth	r2, r3
 8007cee:	68fb      	ldr	r3, [r7, #12]
 8007cf0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007cf2:	68fb      	ldr	r3, [r7, #12]
 8007cf4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007cf6:	b29b      	uxth	r3, r3
 8007cf8:	3b01      	subs	r3, #1
 8007cfa:	b29a      	uxth	r2, r3
 8007cfc:	68fb      	ldr	r3, [r7, #12]
 8007cfe:	855a      	strh	r2, [r3, #42]	; 0x2a
 8007d00:	e0b8      	b.n	8007e74 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8007d02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d04:	9300      	str	r3, [sp, #0]
 8007d06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d08:	2200      	movs	r2, #0
 8007d0a:	4966      	ldr	r1, [pc, #408]	; (8007ea4 <HAL_I2C_Mem_Read+0x448>)
 8007d0c:	68f8      	ldr	r0, [r7, #12]
 8007d0e:	f000 fa63 	bl	80081d8 <I2C_WaitOnFlagUntilTimeout>
 8007d12:	4603      	mov	r3, r0
 8007d14:	2b00      	cmp	r3, #0
 8007d16:	d001      	beq.n	8007d1c <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8007d18:	2301      	movs	r3, #1
 8007d1a:	e0bf      	b.n	8007e9c <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007d1c:	68fb      	ldr	r3, [r7, #12]
 8007d1e:	681b      	ldr	r3, [r3, #0]
 8007d20:	681a      	ldr	r2, [r3, #0]
 8007d22:	68fb      	ldr	r3, [r7, #12]
 8007d24:	681b      	ldr	r3, [r3, #0]
 8007d26:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007d2a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007d2c:	68fb      	ldr	r3, [r7, #12]
 8007d2e:	681b      	ldr	r3, [r3, #0]
 8007d30:	691a      	ldr	r2, [r3, #16]
 8007d32:	68fb      	ldr	r3, [r7, #12]
 8007d34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d36:	b2d2      	uxtb	r2, r2
 8007d38:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007d3a:	68fb      	ldr	r3, [r7, #12]
 8007d3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d3e:	1c5a      	adds	r2, r3, #1
 8007d40:	68fb      	ldr	r3, [r7, #12]
 8007d42:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007d44:	68fb      	ldr	r3, [r7, #12]
 8007d46:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007d48:	3b01      	subs	r3, #1
 8007d4a:	b29a      	uxth	r2, r3
 8007d4c:	68fb      	ldr	r3, [r7, #12]
 8007d4e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007d50:	68fb      	ldr	r3, [r7, #12]
 8007d52:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007d54:	b29b      	uxth	r3, r3
 8007d56:	3b01      	subs	r3, #1
 8007d58:	b29a      	uxth	r2, r3
 8007d5a:	68fb      	ldr	r3, [r7, #12]
 8007d5c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8007d5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d60:	9300      	str	r3, [sp, #0]
 8007d62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d64:	2200      	movs	r2, #0
 8007d66:	494f      	ldr	r1, [pc, #316]	; (8007ea4 <HAL_I2C_Mem_Read+0x448>)
 8007d68:	68f8      	ldr	r0, [r7, #12]
 8007d6a:	f000 fa35 	bl	80081d8 <I2C_WaitOnFlagUntilTimeout>
 8007d6e:	4603      	mov	r3, r0
 8007d70:	2b00      	cmp	r3, #0
 8007d72:	d001      	beq.n	8007d78 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8007d74:	2301      	movs	r3, #1
 8007d76:	e091      	b.n	8007e9c <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007d78:	68fb      	ldr	r3, [r7, #12]
 8007d7a:	681b      	ldr	r3, [r3, #0]
 8007d7c:	681a      	ldr	r2, [r3, #0]
 8007d7e:	68fb      	ldr	r3, [r7, #12]
 8007d80:	681b      	ldr	r3, [r3, #0]
 8007d82:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007d86:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007d88:	68fb      	ldr	r3, [r7, #12]
 8007d8a:	681b      	ldr	r3, [r3, #0]
 8007d8c:	691a      	ldr	r2, [r3, #16]
 8007d8e:	68fb      	ldr	r3, [r7, #12]
 8007d90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d92:	b2d2      	uxtb	r2, r2
 8007d94:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007d96:	68fb      	ldr	r3, [r7, #12]
 8007d98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d9a:	1c5a      	adds	r2, r3, #1
 8007d9c:	68fb      	ldr	r3, [r7, #12]
 8007d9e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007da0:	68fb      	ldr	r3, [r7, #12]
 8007da2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007da4:	3b01      	subs	r3, #1
 8007da6:	b29a      	uxth	r2, r3
 8007da8:	68fb      	ldr	r3, [r7, #12]
 8007daa:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007dac:	68fb      	ldr	r3, [r7, #12]
 8007dae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007db0:	b29b      	uxth	r3, r3
 8007db2:	3b01      	subs	r3, #1
 8007db4:	b29a      	uxth	r2, r3
 8007db6:	68fb      	ldr	r3, [r7, #12]
 8007db8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007dba:	68fb      	ldr	r3, [r7, #12]
 8007dbc:	681b      	ldr	r3, [r3, #0]
 8007dbe:	691a      	ldr	r2, [r3, #16]
 8007dc0:	68fb      	ldr	r3, [r7, #12]
 8007dc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007dc4:	b2d2      	uxtb	r2, r2
 8007dc6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007dc8:	68fb      	ldr	r3, [r7, #12]
 8007dca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007dcc:	1c5a      	adds	r2, r3, #1
 8007dce:	68fb      	ldr	r3, [r7, #12]
 8007dd0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007dd2:	68fb      	ldr	r3, [r7, #12]
 8007dd4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007dd6:	3b01      	subs	r3, #1
 8007dd8:	b29a      	uxth	r2, r3
 8007dda:	68fb      	ldr	r3, [r7, #12]
 8007ddc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007dde:	68fb      	ldr	r3, [r7, #12]
 8007de0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007de2:	b29b      	uxth	r3, r3
 8007de4:	3b01      	subs	r3, #1
 8007de6:	b29a      	uxth	r2, r3
 8007de8:	68fb      	ldr	r3, [r7, #12]
 8007dea:	855a      	strh	r2, [r3, #42]	; 0x2a
 8007dec:	e042      	b.n	8007e74 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007dee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007df0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8007df2:	68f8      	ldr	r0, [r7, #12]
 8007df4:	f000 fb48 	bl	8008488 <I2C_WaitOnRXNEFlagUntilTimeout>
 8007df8:	4603      	mov	r3, r0
 8007dfa:	2b00      	cmp	r3, #0
 8007dfc:	d001      	beq.n	8007e02 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8007dfe:	2301      	movs	r3, #1
 8007e00:	e04c      	b.n	8007e9c <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007e02:	68fb      	ldr	r3, [r7, #12]
 8007e04:	681b      	ldr	r3, [r3, #0]
 8007e06:	691a      	ldr	r2, [r3, #16]
 8007e08:	68fb      	ldr	r3, [r7, #12]
 8007e0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e0c:	b2d2      	uxtb	r2, r2
 8007e0e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8007e10:	68fb      	ldr	r3, [r7, #12]
 8007e12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e14:	1c5a      	adds	r2, r3, #1
 8007e16:	68fb      	ldr	r3, [r7, #12]
 8007e18:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8007e1a:	68fb      	ldr	r3, [r7, #12]
 8007e1c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007e1e:	3b01      	subs	r3, #1
 8007e20:	b29a      	uxth	r2, r3
 8007e22:	68fb      	ldr	r3, [r7, #12]
 8007e24:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8007e26:	68fb      	ldr	r3, [r7, #12]
 8007e28:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007e2a:	b29b      	uxth	r3, r3
 8007e2c:	3b01      	subs	r3, #1
 8007e2e:	b29a      	uxth	r2, r3
 8007e30:	68fb      	ldr	r3, [r7, #12]
 8007e32:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8007e34:	68fb      	ldr	r3, [r7, #12]
 8007e36:	681b      	ldr	r3, [r3, #0]
 8007e38:	695b      	ldr	r3, [r3, #20]
 8007e3a:	f003 0304 	and.w	r3, r3, #4
 8007e3e:	2b04      	cmp	r3, #4
 8007e40:	d118      	bne.n	8007e74 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007e42:	68fb      	ldr	r3, [r7, #12]
 8007e44:	681b      	ldr	r3, [r3, #0]
 8007e46:	691a      	ldr	r2, [r3, #16]
 8007e48:	68fb      	ldr	r3, [r7, #12]
 8007e4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e4c:	b2d2      	uxtb	r2, r2
 8007e4e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007e50:	68fb      	ldr	r3, [r7, #12]
 8007e52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e54:	1c5a      	adds	r2, r3, #1
 8007e56:	68fb      	ldr	r3, [r7, #12]
 8007e58:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007e5a:	68fb      	ldr	r3, [r7, #12]
 8007e5c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007e5e:	3b01      	subs	r3, #1
 8007e60:	b29a      	uxth	r2, r3
 8007e62:	68fb      	ldr	r3, [r7, #12]
 8007e64:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007e66:	68fb      	ldr	r3, [r7, #12]
 8007e68:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007e6a:	b29b      	uxth	r3, r3
 8007e6c:	3b01      	subs	r3, #1
 8007e6e:	b29a      	uxth	r2, r3
 8007e70:	68fb      	ldr	r3, [r7, #12]
 8007e72:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8007e74:	68fb      	ldr	r3, [r7, #12]
 8007e76:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007e78:	2b00      	cmp	r3, #0
 8007e7a:	f47f aec2 	bne.w	8007c02 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8007e7e:	68fb      	ldr	r3, [r7, #12]
 8007e80:	2220      	movs	r2, #32
 8007e82:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8007e86:	68fb      	ldr	r3, [r7, #12]
 8007e88:	2200      	movs	r2, #0
 8007e8a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007e8e:	68fb      	ldr	r3, [r7, #12]
 8007e90:	2200      	movs	r2, #0
 8007e92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8007e96:	2300      	movs	r3, #0
 8007e98:	e000      	b.n	8007e9c <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8007e9a:	2302      	movs	r3, #2
  }
}
 8007e9c:	4618      	mov	r0, r3
 8007e9e:	3728      	adds	r7, #40	; 0x28
 8007ea0:	46bd      	mov	sp, r7
 8007ea2:	bd80      	pop	{r7, pc}
 8007ea4:	00010004 	.word	0x00010004

08007ea8 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 8007ea8:	b480      	push	{r7}
 8007eaa:	b083      	sub	sp, #12
 8007eac:	af00      	add	r7, sp, #0
 8007eae:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007eb6:	b2db      	uxtb	r3, r3
}
 8007eb8:	4618      	mov	r0, r3
 8007eba:	370c      	adds	r7, #12
 8007ebc:	46bd      	mov	sp, r7
 8007ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ec2:	4770      	bx	lr

08007ec4 <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(I2C_HandleTypeDef *hi2c)
{
 8007ec4:	b480      	push	{r7}
 8007ec6:	b083      	sub	sp, #12
 8007ec8:	af00      	add	r7, sp, #0
 8007eca:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8007ed0:	4618      	mov	r0, r3
 8007ed2:	370c      	adds	r7, #12
 8007ed4:	46bd      	mov	sp, r7
 8007ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eda:	4770      	bx	lr

08007edc <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8007edc:	b580      	push	{r7, lr}
 8007ede:	b088      	sub	sp, #32
 8007ee0:	af02      	add	r7, sp, #8
 8007ee2:	60f8      	str	r0, [r7, #12]
 8007ee4:	4608      	mov	r0, r1
 8007ee6:	4611      	mov	r1, r2
 8007ee8:	461a      	mov	r2, r3
 8007eea:	4603      	mov	r3, r0
 8007eec:	817b      	strh	r3, [r7, #10]
 8007eee:	460b      	mov	r3, r1
 8007ef0:	813b      	strh	r3, [r7, #8]
 8007ef2:	4613      	mov	r3, r2
 8007ef4:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007ef6:	68fb      	ldr	r3, [r7, #12]
 8007ef8:	681b      	ldr	r3, [r3, #0]
 8007efa:	681a      	ldr	r2, [r3, #0]
 8007efc:	68fb      	ldr	r3, [r7, #12]
 8007efe:	681b      	ldr	r3, [r3, #0]
 8007f00:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007f04:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8007f06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f08:	9300      	str	r3, [sp, #0]
 8007f0a:	6a3b      	ldr	r3, [r7, #32]
 8007f0c:	2200      	movs	r2, #0
 8007f0e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8007f12:	68f8      	ldr	r0, [r7, #12]
 8007f14:	f000 f960 	bl	80081d8 <I2C_WaitOnFlagUntilTimeout>
 8007f18:	4603      	mov	r3, r0
 8007f1a:	2b00      	cmp	r3, #0
 8007f1c:	d00d      	beq.n	8007f3a <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8007f1e:	68fb      	ldr	r3, [r7, #12]
 8007f20:	681b      	ldr	r3, [r3, #0]
 8007f22:	681b      	ldr	r3, [r3, #0]
 8007f24:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007f28:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007f2c:	d103      	bne.n	8007f36 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8007f2e:	68fb      	ldr	r3, [r7, #12]
 8007f30:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007f34:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8007f36:	2303      	movs	r3, #3
 8007f38:	e05f      	b.n	8007ffa <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8007f3a:	897b      	ldrh	r3, [r7, #10]
 8007f3c:	b2db      	uxtb	r3, r3
 8007f3e:	461a      	mov	r2, r3
 8007f40:	68fb      	ldr	r3, [r7, #12]
 8007f42:	681b      	ldr	r3, [r3, #0]
 8007f44:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8007f48:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8007f4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f4c:	6a3a      	ldr	r2, [r7, #32]
 8007f4e:	492d      	ldr	r1, [pc, #180]	; (8008004 <I2C_RequestMemoryWrite+0x128>)
 8007f50:	68f8      	ldr	r0, [r7, #12]
 8007f52:	f000 f998 	bl	8008286 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007f56:	4603      	mov	r3, r0
 8007f58:	2b00      	cmp	r3, #0
 8007f5a:	d001      	beq.n	8007f60 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8007f5c:	2301      	movs	r3, #1
 8007f5e:	e04c      	b.n	8007ffa <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007f60:	2300      	movs	r3, #0
 8007f62:	617b      	str	r3, [r7, #20]
 8007f64:	68fb      	ldr	r3, [r7, #12]
 8007f66:	681b      	ldr	r3, [r3, #0]
 8007f68:	695b      	ldr	r3, [r3, #20]
 8007f6a:	617b      	str	r3, [r7, #20]
 8007f6c:	68fb      	ldr	r3, [r7, #12]
 8007f6e:	681b      	ldr	r3, [r3, #0]
 8007f70:	699b      	ldr	r3, [r3, #24]
 8007f72:	617b      	str	r3, [r7, #20]
 8007f74:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007f76:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007f78:	6a39      	ldr	r1, [r7, #32]
 8007f7a:	68f8      	ldr	r0, [r7, #12]
 8007f7c:	f000 fa02 	bl	8008384 <I2C_WaitOnTXEFlagUntilTimeout>
 8007f80:	4603      	mov	r3, r0
 8007f82:	2b00      	cmp	r3, #0
 8007f84:	d00d      	beq.n	8007fa2 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007f86:	68fb      	ldr	r3, [r7, #12]
 8007f88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f8a:	2b04      	cmp	r3, #4
 8007f8c:	d107      	bne.n	8007f9e <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007f8e:	68fb      	ldr	r3, [r7, #12]
 8007f90:	681b      	ldr	r3, [r3, #0]
 8007f92:	681a      	ldr	r2, [r3, #0]
 8007f94:	68fb      	ldr	r3, [r7, #12]
 8007f96:	681b      	ldr	r3, [r3, #0]
 8007f98:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007f9c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8007f9e:	2301      	movs	r3, #1
 8007fa0:	e02b      	b.n	8007ffa <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8007fa2:	88fb      	ldrh	r3, [r7, #6]
 8007fa4:	2b01      	cmp	r3, #1
 8007fa6:	d105      	bne.n	8007fb4 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8007fa8:	893b      	ldrh	r3, [r7, #8]
 8007faa:	b2da      	uxtb	r2, r3
 8007fac:	68fb      	ldr	r3, [r7, #12]
 8007fae:	681b      	ldr	r3, [r3, #0]
 8007fb0:	611a      	str	r2, [r3, #16]
 8007fb2:	e021      	b.n	8007ff8 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8007fb4:	893b      	ldrh	r3, [r7, #8]
 8007fb6:	0a1b      	lsrs	r3, r3, #8
 8007fb8:	b29b      	uxth	r3, r3
 8007fba:	b2da      	uxtb	r2, r3
 8007fbc:	68fb      	ldr	r3, [r7, #12]
 8007fbe:	681b      	ldr	r3, [r3, #0]
 8007fc0:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007fc2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007fc4:	6a39      	ldr	r1, [r7, #32]
 8007fc6:	68f8      	ldr	r0, [r7, #12]
 8007fc8:	f000 f9dc 	bl	8008384 <I2C_WaitOnTXEFlagUntilTimeout>
 8007fcc:	4603      	mov	r3, r0
 8007fce:	2b00      	cmp	r3, #0
 8007fd0:	d00d      	beq.n	8007fee <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007fd2:	68fb      	ldr	r3, [r7, #12]
 8007fd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007fd6:	2b04      	cmp	r3, #4
 8007fd8:	d107      	bne.n	8007fea <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007fda:	68fb      	ldr	r3, [r7, #12]
 8007fdc:	681b      	ldr	r3, [r3, #0]
 8007fde:	681a      	ldr	r2, [r3, #0]
 8007fe0:	68fb      	ldr	r3, [r7, #12]
 8007fe2:	681b      	ldr	r3, [r3, #0]
 8007fe4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007fe8:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8007fea:	2301      	movs	r3, #1
 8007fec:	e005      	b.n	8007ffa <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8007fee:	893b      	ldrh	r3, [r7, #8]
 8007ff0:	b2da      	uxtb	r2, r3
 8007ff2:	68fb      	ldr	r3, [r7, #12]
 8007ff4:	681b      	ldr	r3, [r3, #0]
 8007ff6:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8007ff8:	2300      	movs	r3, #0
}
 8007ffa:	4618      	mov	r0, r3
 8007ffc:	3718      	adds	r7, #24
 8007ffe:	46bd      	mov	sp, r7
 8008000:	bd80      	pop	{r7, pc}
 8008002:	bf00      	nop
 8008004:	00010002 	.word	0x00010002

08008008 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8008008:	b580      	push	{r7, lr}
 800800a:	b088      	sub	sp, #32
 800800c:	af02      	add	r7, sp, #8
 800800e:	60f8      	str	r0, [r7, #12]
 8008010:	4608      	mov	r0, r1
 8008012:	4611      	mov	r1, r2
 8008014:	461a      	mov	r2, r3
 8008016:	4603      	mov	r3, r0
 8008018:	817b      	strh	r3, [r7, #10]
 800801a:	460b      	mov	r3, r1
 800801c:	813b      	strh	r3, [r7, #8]
 800801e:	4613      	mov	r3, r2
 8008020:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008022:	68fb      	ldr	r3, [r7, #12]
 8008024:	681b      	ldr	r3, [r3, #0]
 8008026:	681a      	ldr	r2, [r3, #0]
 8008028:	68fb      	ldr	r3, [r7, #12]
 800802a:	681b      	ldr	r3, [r3, #0]
 800802c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8008030:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8008032:	68fb      	ldr	r3, [r7, #12]
 8008034:	681b      	ldr	r3, [r3, #0]
 8008036:	681a      	ldr	r2, [r3, #0]
 8008038:	68fb      	ldr	r3, [r7, #12]
 800803a:	681b      	ldr	r3, [r3, #0]
 800803c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008040:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8008042:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008044:	9300      	str	r3, [sp, #0]
 8008046:	6a3b      	ldr	r3, [r7, #32]
 8008048:	2200      	movs	r2, #0
 800804a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800804e:	68f8      	ldr	r0, [r7, #12]
 8008050:	f000 f8c2 	bl	80081d8 <I2C_WaitOnFlagUntilTimeout>
 8008054:	4603      	mov	r3, r0
 8008056:	2b00      	cmp	r3, #0
 8008058:	d00d      	beq.n	8008076 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800805a:	68fb      	ldr	r3, [r7, #12]
 800805c:	681b      	ldr	r3, [r3, #0]
 800805e:	681b      	ldr	r3, [r3, #0]
 8008060:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008064:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008068:	d103      	bne.n	8008072 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800806a:	68fb      	ldr	r3, [r7, #12]
 800806c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008070:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8008072:	2303      	movs	r3, #3
 8008074:	e0aa      	b.n	80081cc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8008076:	897b      	ldrh	r3, [r7, #10]
 8008078:	b2db      	uxtb	r3, r3
 800807a:	461a      	mov	r2, r3
 800807c:	68fb      	ldr	r3, [r7, #12]
 800807e:	681b      	ldr	r3, [r3, #0]
 8008080:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8008084:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8008086:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008088:	6a3a      	ldr	r2, [r7, #32]
 800808a:	4952      	ldr	r1, [pc, #328]	; (80081d4 <I2C_RequestMemoryRead+0x1cc>)
 800808c:	68f8      	ldr	r0, [r7, #12]
 800808e:	f000 f8fa 	bl	8008286 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8008092:	4603      	mov	r3, r0
 8008094:	2b00      	cmp	r3, #0
 8008096:	d001      	beq.n	800809c <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8008098:	2301      	movs	r3, #1
 800809a:	e097      	b.n	80081cc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800809c:	2300      	movs	r3, #0
 800809e:	617b      	str	r3, [r7, #20]
 80080a0:	68fb      	ldr	r3, [r7, #12]
 80080a2:	681b      	ldr	r3, [r3, #0]
 80080a4:	695b      	ldr	r3, [r3, #20]
 80080a6:	617b      	str	r3, [r7, #20]
 80080a8:	68fb      	ldr	r3, [r7, #12]
 80080aa:	681b      	ldr	r3, [r3, #0]
 80080ac:	699b      	ldr	r3, [r3, #24]
 80080ae:	617b      	str	r3, [r7, #20]
 80080b0:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80080b2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80080b4:	6a39      	ldr	r1, [r7, #32]
 80080b6:	68f8      	ldr	r0, [r7, #12]
 80080b8:	f000 f964 	bl	8008384 <I2C_WaitOnTXEFlagUntilTimeout>
 80080bc:	4603      	mov	r3, r0
 80080be:	2b00      	cmp	r3, #0
 80080c0:	d00d      	beq.n	80080de <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80080c2:	68fb      	ldr	r3, [r7, #12]
 80080c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80080c6:	2b04      	cmp	r3, #4
 80080c8:	d107      	bne.n	80080da <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80080ca:	68fb      	ldr	r3, [r7, #12]
 80080cc:	681b      	ldr	r3, [r3, #0]
 80080ce:	681a      	ldr	r2, [r3, #0]
 80080d0:	68fb      	ldr	r3, [r7, #12]
 80080d2:	681b      	ldr	r3, [r3, #0]
 80080d4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80080d8:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80080da:	2301      	movs	r3, #1
 80080dc:	e076      	b.n	80081cc <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80080de:	88fb      	ldrh	r3, [r7, #6]
 80080e0:	2b01      	cmp	r3, #1
 80080e2:	d105      	bne.n	80080f0 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80080e4:	893b      	ldrh	r3, [r7, #8]
 80080e6:	b2da      	uxtb	r2, r3
 80080e8:	68fb      	ldr	r3, [r7, #12]
 80080ea:	681b      	ldr	r3, [r3, #0]
 80080ec:	611a      	str	r2, [r3, #16]
 80080ee:	e021      	b.n	8008134 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80080f0:	893b      	ldrh	r3, [r7, #8]
 80080f2:	0a1b      	lsrs	r3, r3, #8
 80080f4:	b29b      	uxth	r3, r3
 80080f6:	b2da      	uxtb	r2, r3
 80080f8:	68fb      	ldr	r3, [r7, #12]
 80080fa:	681b      	ldr	r3, [r3, #0]
 80080fc:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80080fe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008100:	6a39      	ldr	r1, [r7, #32]
 8008102:	68f8      	ldr	r0, [r7, #12]
 8008104:	f000 f93e 	bl	8008384 <I2C_WaitOnTXEFlagUntilTimeout>
 8008108:	4603      	mov	r3, r0
 800810a:	2b00      	cmp	r3, #0
 800810c:	d00d      	beq.n	800812a <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800810e:	68fb      	ldr	r3, [r7, #12]
 8008110:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008112:	2b04      	cmp	r3, #4
 8008114:	d107      	bne.n	8008126 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008116:	68fb      	ldr	r3, [r7, #12]
 8008118:	681b      	ldr	r3, [r3, #0]
 800811a:	681a      	ldr	r2, [r3, #0]
 800811c:	68fb      	ldr	r3, [r7, #12]
 800811e:	681b      	ldr	r3, [r3, #0]
 8008120:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008124:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8008126:	2301      	movs	r3, #1
 8008128:	e050      	b.n	80081cc <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800812a:	893b      	ldrh	r3, [r7, #8]
 800812c:	b2da      	uxtb	r2, r3
 800812e:	68fb      	ldr	r3, [r7, #12]
 8008130:	681b      	ldr	r3, [r3, #0]
 8008132:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008134:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008136:	6a39      	ldr	r1, [r7, #32]
 8008138:	68f8      	ldr	r0, [r7, #12]
 800813a:	f000 f923 	bl	8008384 <I2C_WaitOnTXEFlagUntilTimeout>
 800813e:	4603      	mov	r3, r0
 8008140:	2b00      	cmp	r3, #0
 8008142:	d00d      	beq.n	8008160 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8008144:	68fb      	ldr	r3, [r7, #12]
 8008146:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008148:	2b04      	cmp	r3, #4
 800814a:	d107      	bne.n	800815c <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800814c:	68fb      	ldr	r3, [r7, #12]
 800814e:	681b      	ldr	r3, [r3, #0]
 8008150:	681a      	ldr	r2, [r3, #0]
 8008152:	68fb      	ldr	r3, [r7, #12]
 8008154:	681b      	ldr	r3, [r3, #0]
 8008156:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800815a:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800815c:	2301      	movs	r3, #1
 800815e:	e035      	b.n	80081cc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8008160:	68fb      	ldr	r3, [r7, #12]
 8008162:	681b      	ldr	r3, [r3, #0]
 8008164:	681a      	ldr	r2, [r3, #0]
 8008166:	68fb      	ldr	r3, [r7, #12]
 8008168:	681b      	ldr	r3, [r3, #0]
 800816a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800816e:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8008170:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008172:	9300      	str	r3, [sp, #0]
 8008174:	6a3b      	ldr	r3, [r7, #32]
 8008176:	2200      	movs	r2, #0
 8008178:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800817c:	68f8      	ldr	r0, [r7, #12]
 800817e:	f000 f82b 	bl	80081d8 <I2C_WaitOnFlagUntilTimeout>
 8008182:	4603      	mov	r3, r0
 8008184:	2b00      	cmp	r3, #0
 8008186:	d00d      	beq.n	80081a4 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8008188:	68fb      	ldr	r3, [r7, #12]
 800818a:	681b      	ldr	r3, [r3, #0]
 800818c:	681b      	ldr	r3, [r3, #0]
 800818e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008192:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008196:	d103      	bne.n	80081a0 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8008198:	68fb      	ldr	r3, [r7, #12]
 800819a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800819e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80081a0:	2303      	movs	r3, #3
 80081a2:	e013      	b.n	80081cc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80081a4:	897b      	ldrh	r3, [r7, #10]
 80081a6:	b2db      	uxtb	r3, r3
 80081a8:	f043 0301 	orr.w	r3, r3, #1
 80081ac:	b2da      	uxtb	r2, r3
 80081ae:	68fb      	ldr	r3, [r7, #12]
 80081b0:	681b      	ldr	r3, [r3, #0]
 80081b2:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80081b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081b6:	6a3a      	ldr	r2, [r7, #32]
 80081b8:	4906      	ldr	r1, [pc, #24]	; (80081d4 <I2C_RequestMemoryRead+0x1cc>)
 80081ba:	68f8      	ldr	r0, [r7, #12]
 80081bc:	f000 f863 	bl	8008286 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80081c0:	4603      	mov	r3, r0
 80081c2:	2b00      	cmp	r3, #0
 80081c4:	d001      	beq.n	80081ca <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80081c6:	2301      	movs	r3, #1
 80081c8:	e000      	b.n	80081cc <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80081ca:	2300      	movs	r3, #0
}
 80081cc:	4618      	mov	r0, r3
 80081ce:	3718      	adds	r7, #24
 80081d0:	46bd      	mov	sp, r7
 80081d2:	bd80      	pop	{r7, pc}
 80081d4:	00010002 	.word	0x00010002

080081d8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80081d8:	b580      	push	{r7, lr}
 80081da:	b084      	sub	sp, #16
 80081dc:	af00      	add	r7, sp, #0
 80081de:	60f8      	str	r0, [r7, #12]
 80081e0:	60b9      	str	r1, [r7, #8]
 80081e2:	603b      	str	r3, [r7, #0]
 80081e4:	4613      	mov	r3, r2
 80081e6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80081e8:	e025      	b.n	8008236 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80081ea:	683b      	ldr	r3, [r7, #0]
 80081ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80081f0:	d021      	beq.n	8008236 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80081f2:	f7fe fdc9 	bl	8006d88 <HAL_GetTick>
 80081f6:	4602      	mov	r2, r0
 80081f8:	69bb      	ldr	r3, [r7, #24]
 80081fa:	1ad3      	subs	r3, r2, r3
 80081fc:	683a      	ldr	r2, [r7, #0]
 80081fe:	429a      	cmp	r2, r3
 8008200:	d302      	bcc.n	8008208 <I2C_WaitOnFlagUntilTimeout+0x30>
 8008202:	683b      	ldr	r3, [r7, #0]
 8008204:	2b00      	cmp	r3, #0
 8008206:	d116      	bne.n	8008236 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8008208:	68fb      	ldr	r3, [r7, #12]
 800820a:	2200      	movs	r2, #0
 800820c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800820e:	68fb      	ldr	r3, [r7, #12]
 8008210:	2220      	movs	r2, #32
 8008212:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8008216:	68fb      	ldr	r3, [r7, #12]
 8008218:	2200      	movs	r2, #0
 800821a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800821e:	68fb      	ldr	r3, [r7, #12]
 8008220:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008222:	f043 0220 	orr.w	r2, r3, #32
 8008226:	68fb      	ldr	r3, [r7, #12]
 8008228:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800822a:	68fb      	ldr	r3, [r7, #12]
 800822c:	2200      	movs	r2, #0
 800822e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8008232:	2301      	movs	r3, #1
 8008234:	e023      	b.n	800827e <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8008236:	68bb      	ldr	r3, [r7, #8]
 8008238:	0c1b      	lsrs	r3, r3, #16
 800823a:	b2db      	uxtb	r3, r3
 800823c:	2b01      	cmp	r3, #1
 800823e:	d10d      	bne.n	800825c <I2C_WaitOnFlagUntilTimeout+0x84>
 8008240:	68fb      	ldr	r3, [r7, #12]
 8008242:	681b      	ldr	r3, [r3, #0]
 8008244:	695b      	ldr	r3, [r3, #20]
 8008246:	43da      	mvns	r2, r3
 8008248:	68bb      	ldr	r3, [r7, #8]
 800824a:	4013      	ands	r3, r2
 800824c:	b29b      	uxth	r3, r3
 800824e:	2b00      	cmp	r3, #0
 8008250:	bf0c      	ite	eq
 8008252:	2301      	moveq	r3, #1
 8008254:	2300      	movne	r3, #0
 8008256:	b2db      	uxtb	r3, r3
 8008258:	461a      	mov	r2, r3
 800825a:	e00c      	b.n	8008276 <I2C_WaitOnFlagUntilTimeout+0x9e>
 800825c:	68fb      	ldr	r3, [r7, #12]
 800825e:	681b      	ldr	r3, [r3, #0]
 8008260:	699b      	ldr	r3, [r3, #24]
 8008262:	43da      	mvns	r2, r3
 8008264:	68bb      	ldr	r3, [r7, #8]
 8008266:	4013      	ands	r3, r2
 8008268:	b29b      	uxth	r3, r3
 800826a:	2b00      	cmp	r3, #0
 800826c:	bf0c      	ite	eq
 800826e:	2301      	moveq	r3, #1
 8008270:	2300      	movne	r3, #0
 8008272:	b2db      	uxtb	r3, r3
 8008274:	461a      	mov	r2, r3
 8008276:	79fb      	ldrb	r3, [r7, #7]
 8008278:	429a      	cmp	r2, r3
 800827a:	d0b6      	beq.n	80081ea <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800827c:	2300      	movs	r3, #0
}
 800827e:	4618      	mov	r0, r3
 8008280:	3710      	adds	r7, #16
 8008282:	46bd      	mov	sp, r7
 8008284:	bd80      	pop	{r7, pc}

08008286 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8008286:	b580      	push	{r7, lr}
 8008288:	b084      	sub	sp, #16
 800828a:	af00      	add	r7, sp, #0
 800828c:	60f8      	str	r0, [r7, #12]
 800828e:	60b9      	str	r1, [r7, #8]
 8008290:	607a      	str	r2, [r7, #4]
 8008292:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8008294:	e051      	b.n	800833a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8008296:	68fb      	ldr	r3, [r7, #12]
 8008298:	681b      	ldr	r3, [r3, #0]
 800829a:	695b      	ldr	r3, [r3, #20]
 800829c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80082a0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80082a4:	d123      	bne.n	80082ee <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80082a6:	68fb      	ldr	r3, [r7, #12]
 80082a8:	681b      	ldr	r3, [r3, #0]
 80082aa:	681a      	ldr	r2, [r3, #0]
 80082ac:	68fb      	ldr	r3, [r7, #12]
 80082ae:	681b      	ldr	r3, [r3, #0]
 80082b0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80082b4:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80082b6:	68fb      	ldr	r3, [r7, #12]
 80082b8:	681b      	ldr	r3, [r3, #0]
 80082ba:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80082be:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80082c0:	68fb      	ldr	r3, [r7, #12]
 80082c2:	2200      	movs	r2, #0
 80082c4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80082c6:	68fb      	ldr	r3, [r7, #12]
 80082c8:	2220      	movs	r2, #32
 80082ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80082ce:	68fb      	ldr	r3, [r7, #12]
 80082d0:	2200      	movs	r2, #0
 80082d2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80082d6:	68fb      	ldr	r3, [r7, #12]
 80082d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80082da:	f043 0204 	orr.w	r2, r3, #4
 80082de:	68fb      	ldr	r3, [r7, #12]
 80082e0:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80082e2:	68fb      	ldr	r3, [r7, #12]
 80082e4:	2200      	movs	r2, #0
 80082e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80082ea:	2301      	movs	r3, #1
 80082ec:	e046      	b.n	800837c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80082f4:	d021      	beq.n	800833a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80082f6:	f7fe fd47 	bl	8006d88 <HAL_GetTick>
 80082fa:	4602      	mov	r2, r0
 80082fc:	683b      	ldr	r3, [r7, #0]
 80082fe:	1ad3      	subs	r3, r2, r3
 8008300:	687a      	ldr	r2, [r7, #4]
 8008302:	429a      	cmp	r2, r3
 8008304:	d302      	bcc.n	800830c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	2b00      	cmp	r3, #0
 800830a:	d116      	bne.n	800833a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800830c:	68fb      	ldr	r3, [r7, #12]
 800830e:	2200      	movs	r2, #0
 8008310:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8008312:	68fb      	ldr	r3, [r7, #12]
 8008314:	2220      	movs	r2, #32
 8008316:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800831a:	68fb      	ldr	r3, [r7, #12]
 800831c:	2200      	movs	r2, #0
 800831e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8008322:	68fb      	ldr	r3, [r7, #12]
 8008324:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008326:	f043 0220 	orr.w	r2, r3, #32
 800832a:	68fb      	ldr	r3, [r7, #12]
 800832c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800832e:	68fb      	ldr	r3, [r7, #12]
 8008330:	2200      	movs	r2, #0
 8008332:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8008336:	2301      	movs	r3, #1
 8008338:	e020      	b.n	800837c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800833a:	68bb      	ldr	r3, [r7, #8]
 800833c:	0c1b      	lsrs	r3, r3, #16
 800833e:	b2db      	uxtb	r3, r3
 8008340:	2b01      	cmp	r3, #1
 8008342:	d10c      	bne.n	800835e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8008344:	68fb      	ldr	r3, [r7, #12]
 8008346:	681b      	ldr	r3, [r3, #0]
 8008348:	695b      	ldr	r3, [r3, #20]
 800834a:	43da      	mvns	r2, r3
 800834c:	68bb      	ldr	r3, [r7, #8]
 800834e:	4013      	ands	r3, r2
 8008350:	b29b      	uxth	r3, r3
 8008352:	2b00      	cmp	r3, #0
 8008354:	bf14      	ite	ne
 8008356:	2301      	movne	r3, #1
 8008358:	2300      	moveq	r3, #0
 800835a:	b2db      	uxtb	r3, r3
 800835c:	e00b      	b.n	8008376 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800835e:	68fb      	ldr	r3, [r7, #12]
 8008360:	681b      	ldr	r3, [r3, #0]
 8008362:	699b      	ldr	r3, [r3, #24]
 8008364:	43da      	mvns	r2, r3
 8008366:	68bb      	ldr	r3, [r7, #8]
 8008368:	4013      	ands	r3, r2
 800836a:	b29b      	uxth	r3, r3
 800836c:	2b00      	cmp	r3, #0
 800836e:	bf14      	ite	ne
 8008370:	2301      	movne	r3, #1
 8008372:	2300      	moveq	r3, #0
 8008374:	b2db      	uxtb	r3, r3
 8008376:	2b00      	cmp	r3, #0
 8008378:	d18d      	bne.n	8008296 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800837a:	2300      	movs	r3, #0
}
 800837c:	4618      	mov	r0, r3
 800837e:	3710      	adds	r7, #16
 8008380:	46bd      	mov	sp, r7
 8008382:	bd80      	pop	{r7, pc}

08008384 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8008384:	b580      	push	{r7, lr}
 8008386:	b084      	sub	sp, #16
 8008388:	af00      	add	r7, sp, #0
 800838a:	60f8      	str	r0, [r7, #12]
 800838c:	60b9      	str	r1, [r7, #8]
 800838e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8008390:	e02d      	b.n	80083ee <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8008392:	68f8      	ldr	r0, [r7, #12]
 8008394:	f000 f8ce 	bl	8008534 <I2C_IsAcknowledgeFailed>
 8008398:	4603      	mov	r3, r0
 800839a:	2b00      	cmp	r3, #0
 800839c:	d001      	beq.n	80083a2 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800839e:	2301      	movs	r3, #1
 80083a0:	e02d      	b.n	80083fe <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80083a2:	68bb      	ldr	r3, [r7, #8]
 80083a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80083a8:	d021      	beq.n	80083ee <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80083aa:	f7fe fced 	bl	8006d88 <HAL_GetTick>
 80083ae:	4602      	mov	r2, r0
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	1ad3      	subs	r3, r2, r3
 80083b4:	68ba      	ldr	r2, [r7, #8]
 80083b6:	429a      	cmp	r2, r3
 80083b8:	d302      	bcc.n	80083c0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80083ba:	68bb      	ldr	r3, [r7, #8]
 80083bc:	2b00      	cmp	r3, #0
 80083be:	d116      	bne.n	80083ee <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80083c0:	68fb      	ldr	r3, [r7, #12]
 80083c2:	2200      	movs	r2, #0
 80083c4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80083c6:	68fb      	ldr	r3, [r7, #12]
 80083c8:	2220      	movs	r2, #32
 80083ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80083ce:	68fb      	ldr	r3, [r7, #12]
 80083d0:	2200      	movs	r2, #0
 80083d2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80083d6:	68fb      	ldr	r3, [r7, #12]
 80083d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80083da:	f043 0220 	orr.w	r2, r3, #32
 80083de:	68fb      	ldr	r3, [r7, #12]
 80083e0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80083e2:	68fb      	ldr	r3, [r7, #12]
 80083e4:	2200      	movs	r2, #0
 80083e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80083ea:	2301      	movs	r3, #1
 80083ec:	e007      	b.n	80083fe <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80083ee:	68fb      	ldr	r3, [r7, #12]
 80083f0:	681b      	ldr	r3, [r3, #0]
 80083f2:	695b      	ldr	r3, [r3, #20]
 80083f4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80083f8:	2b80      	cmp	r3, #128	; 0x80
 80083fa:	d1ca      	bne.n	8008392 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80083fc:	2300      	movs	r3, #0
}
 80083fe:	4618      	mov	r0, r3
 8008400:	3710      	adds	r7, #16
 8008402:	46bd      	mov	sp, r7
 8008404:	bd80      	pop	{r7, pc}

08008406 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8008406:	b580      	push	{r7, lr}
 8008408:	b084      	sub	sp, #16
 800840a:	af00      	add	r7, sp, #0
 800840c:	60f8      	str	r0, [r7, #12]
 800840e:	60b9      	str	r1, [r7, #8]
 8008410:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8008412:	e02d      	b.n	8008470 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8008414:	68f8      	ldr	r0, [r7, #12]
 8008416:	f000 f88d 	bl	8008534 <I2C_IsAcknowledgeFailed>
 800841a:	4603      	mov	r3, r0
 800841c:	2b00      	cmp	r3, #0
 800841e:	d001      	beq.n	8008424 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8008420:	2301      	movs	r3, #1
 8008422:	e02d      	b.n	8008480 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008424:	68bb      	ldr	r3, [r7, #8]
 8008426:	f1b3 3fff 	cmp.w	r3, #4294967295
 800842a:	d021      	beq.n	8008470 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800842c:	f7fe fcac 	bl	8006d88 <HAL_GetTick>
 8008430:	4602      	mov	r2, r0
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	1ad3      	subs	r3, r2, r3
 8008436:	68ba      	ldr	r2, [r7, #8]
 8008438:	429a      	cmp	r2, r3
 800843a:	d302      	bcc.n	8008442 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800843c:	68bb      	ldr	r3, [r7, #8]
 800843e:	2b00      	cmp	r3, #0
 8008440:	d116      	bne.n	8008470 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8008442:	68fb      	ldr	r3, [r7, #12]
 8008444:	2200      	movs	r2, #0
 8008446:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8008448:	68fb      	ldr	r3, [r7, #12]
 800844a:	2220      	movs	r2, #32
 800844c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008450:	68fb      	ldr	r3, [r7, #12]
 8008452:	2200      	movs	r2, #0
 8008454:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8008458:	68fb      	ldr	r3, [r7, #12]
 800845a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800845c:	f043 0220 	orr.w	r2, r3, #32
 8008460:	68fb      	ldr	r3, [r7, #12]
 8008462:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008464:	68fb      	ldr	r3, [r7, #12]
 8008466:	2200      	movs	r2, #0
 8008468:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800846c:	2301      	movs	r3, #1
 800846e:	e007      	b.n	8008480 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8008470:	68fb      	ldr	r3, [r7, #12]
 8008472:	681b      	ldr	r3, [r3, #0]
 8008474:	695b      	ldr	r3, [r3, #20]
 8008476:	f003 0304 	and.w	r3, r3, #4
 800847a:	2b04      	cmp	r3, #4
 800847c:	d1ca      	bne.n	8008414 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800847e:	2300      	movs	r3, #0
}
 8008480:	4618      	mov	r0, r3
 8008482:	3710      	adds	r7, #16
 8008484:	46bd      	mov	sp, r7
 8008486:	bd80      	pop	{r7, pc}

08008488 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8008488:	b580      	push	{r7, lr}
 800848a:	b084      	sub	sp, #16
 800848c:	af00      	add	r7, sp, #0
 800848e:	60f8      	str	r0, [r7, #12]
 8008490:	60b9      	str	r1, [r7, #8]
 8008492:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8008494:	e042      	b.n	800851c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8008496:	68fb      	ldr	r3, [r7, #12]
 8008498:	681b      	ldr	r3, [r3, #0]
 800849a:	695b      	ldr	r3, [r3, #20]
 800849c:	f003 0310 	and.w	r3, r3, #16
 80084a0:	2b10      	cmp	r3, #16
 80084a2:	d119      	bne.n	80084d8 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80084a4:	68fb      	ldr	r3, [r7, #12]
 80084a6:	681b      	ldr	r3, [r3, #0]
 80084a8:	f06f 0210 	mvn.w	r2, #16
 80084ac:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80084ae:	68fb      	ldr	r3, [r7, #12]
 80084b0:	2200      	movs	r2, #0
 80084b2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80084b4:	68fb      	ldr	r3, [r7, #12]
 80084b6:	2220      	movs	r2, #32
 80084b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80084bc:	68fb      	ldr	r3, [r7, #12]
 80084be:	2200      	movs	r2, #0
 80084c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80084c4:	68fb      	ldr	r3, [r7, #12]
 80084c6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80084c8:	68fb      	ldr	r3, [r7, #12]
 80084ca:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80084cc:	68fb      	ldr	r3, [r7, #12]
 80084ce:	2200      	movs	r2, #0
 80084d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80084d4:	2301      	movs	r3, #1
 80084d6:	e029      	b.n	800852c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80084d8:	f7fe fc56 	bl	8006d88 <HAL_GetTick>
 80084dc:	4602      	mov	r2, r0
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	1ad3      	subs	r3, r2, r3
 80084e2:	68ba      	ldr	r2, [r7, #8]
 80084e4:	429a      	cmp	r2, r3
 80084e6:	d302      	bcc.n	80084ee <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80084e8:	68bb      	ldr	r3, [r7, #8]
 80084ea:	2b00      	cmp	r3, #0
 80084ec:	d116      	bne.n	800851c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 80084ee:	68fb      	ldr	r3, [r7, #12]
 80084f0:	2200      	movs	r2, #0
 80084f2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80084f4:	68fb      	ldr	r3, [r7, #12]
 80084f6:	2220      	movs	r2, #32
 80084f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80084fc:	68fb      	ldr	r3, [r7, #12]
 80084fe:	2200      	movs	r2, #0
 8008500:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8008504:	68fb      	ldr	r3, [r7, #12]
 8008506:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008508:	f043 0220 	orr.w	r2, r3, #32
 800850c:	68fb      	ldr	r3, [r7, #12]
 800850e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8008510:	68fb      	ldr	r3, [r7, #12]
 8008512:	2200      	movs	r2, #0
 8008514:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8008518:	2301      	movs	r3, #1
 800851a:	e007      	b.n	800852c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800851c:	68fb      	ldr	r3, [r7, #12]
 800851e:	681b      	ldr	r3, [r3, #0]
 8008520:	695b      	ldr	r3, [r3, #20]
 8008522:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008526:	2b40      	cmp	r3, #64	; 0x40
 8008528:	d1b5      	bne.n	8008496 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800852a:	2300      	movs	r3, #0
}
 800852c:	4618      	mov	r0, r3
 800852e:	3710      	adds	r7, #16
 8008530:	46bd      	mov	sp, r7
 8008532:	bd80      	pop	{r7, pc}

08008534 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8008534:	b480      	push	{r7}
 8008536:	b083      	sub	sp, #12
 8008538:	af00      	add	r7, sp, #0
 800853a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	681b      	ldr	r3, [r3, #0]
 8008540:	695b      	ldr	r3, [r3, #20]
 8008542:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008546:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800854a:	d11b      	bne.n	8008584 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	681b      	ldr	r3, [r3, #0]
 8008550:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8008554:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	2200      	movs	r2, #0
 800855a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	2220      	movs	r2, #32
 8008560:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	2200      	movs	r2, #0
 8008568:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008570:	f043 0204 	orr.w	r2, r3, #4
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	2200      	movs	r2, #0
 800857c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8008580:	2301      	movs	r3, #1
 8008582:	e000      	b.n	8008586 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8008584:	2300      	movs	r3, #0
}
 8008586:	4618      	mov	r0, r3
 8008588:	370c      	adds	r7, #12
 800858a:	46bd      	mov	sp, r7
 800858c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008590:	4770      	bx	lr

08008592 <HAL_IWDG_Init>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
 8008592:	b580      	push	{r7, lr}
 8008594:	b084      	sub	sp, #16
 8008596:	af00      	add	r7, sp, #0
 8008598:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if (hiwdg == NULL)
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	2b00      	cmp	r3, #0
 800859e:	d101      	bne.n	80085a4 <HAL_IWDG_Init+0x12>
  {
    return HAL_ERROR;
 80085a0:	2301      	movs	r3, #1
 80085a2:	e034      	b.n	800860e <HAL_IWDG_Init+0x7c>
  assert_param(IS_IWDG_ALL_INSTANCE(hiwdg->Instance));
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));

  /* Enable IWDG. LSI is turned on automatically */
  __HAL_IWDG_START(hiwdg);
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	681b      	ldr	r3, [r3, #0]
 80085a8:	f64c 42cc 	movw	r2, #52428	; 0xcccc
 80085ac:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR and IWDG_RLR registers by writing
  0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	681b      	ldr	r3, [r3, #0]
 80085b2:	f245 5255 	movw	r2, #21845	; 0x5555
 80085b6:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	681b      	ldr	r3, [r3, #0]
 80085bc:	687a      	ldr	r2, [r7, #4]
 80085be:	6852      	ldr	r2, [r2, #4]
 80085c0:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	681b      	ldr	r3, [r3, #0]
 80085c6:	687a      	ldr	r2, [r7, #4]
 80085c8:	6892      	ldr	r2, [r2, #8]
 80085ca:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 80085cc:	f7fe fbdc 	bl	8006d88 <HAL_GetTick>
 80085d0:	60f8      	str	r0, [r7, #12]

  /* Wait for register to be updated */
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 80085d2:	e00f      	b.n	80085f4 <HAL_IWDG_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 80085d4:	f7fe fbd8 	bl	8006d88 <HAL_GetTick>
 80085d8:	4602      	mov	r2, r0
 80085da:	68fb      	ldr	r3, [r7, #12]
 80085dc:	1ad3      	subs	r3, r2, r3
 80085de:	2b31      	cmp	r3, #49	; 0x31
 80085e0:	d908      	bls.n	80085f4 <HAL_IWDG_Init+0x62>
    {
      if ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	681b      	ldr	r3, [r3, #0]
 80085e6:	68db      	ldr	r3, [r3, #12]
 80085e8:	f003 0303 	and.w	r3, r3, #3
 80085ec:	2b00      	cmp	r3, #0
 80085ee:	d001      	beq.n	80085f4 <HAL_IWDG_Init+0x62>
      {
        return HAL_TIMEOUT;
 80085f0:	2303      	movs	r3, #3
 80085f2:	e00c      	b.n	800860e <HAL_IWDG_Init+0x7c>
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	681b      	ldr	r3, [r3, #0]
 80085f8:	68db      	ldr	r3, [r3, #12]
 80085fa:	f003 0303 	and.w	r3, r3, #3
 80085fe:	2b00      	cmp	r3, #0
 8008600:	d1e8      	bne.n	80085d4 <HAL_IWDG_Init+0x42>
      }
    }
  }

  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	681b      	ldr	r3, [r3, #0]
 8008606:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 800860a:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800860c:	2300      	movs	r3, #0
}
 800860e:	4618      	mov	r0, r3
 8008610:	3710      	adds	r7, #16
 8008612:	46bd      	mov	sp, r7
 8008614:	bd80      	pop	{r7, pc}

08008616 <HAL_IWDG_Refresh>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Refresh(IWDG_HandleTypeDef *hiwdg)
{
 8008616:	b480      	push	{r7}
 8008618:	b083      	sub	sp, #12
 800861a:	af00      	add	r7, sp, #0
 800861c:	6078      	str	r0, [r7, #4]
  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	681b      	ldr	r3, [r3, #0]
 8008622:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 8008626:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8008628:	2300      	movs	r3, #0
}
 800862a:	4618      	mov	r0, r3
 800862c:	370c      	adds	r7, #12
 800862e:	46bd      	mov	sp, r7
 8008630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008634:	4770      	bx	lr
	...

08008638 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8008638:	b580      	push	{r7, lr}
 800863a:	b086      	sub	sp, #24
 800863c:	af00      	add	r7, sp, #0
 800863e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	2b00      	cmp	r3, #0
 8008644:	d101      	bne.n	800864a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8008646:	2301      	movs	r3, #1
 8008648:	e267      	b.n	8008b1a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	681b      	ldr	r3, [r3, #0]
 800864e:	f003 0301 	and.w	r3, r3, #1
 8008652:	2b00      	cmp	r3, #0
 8008654:	d075      	beq.n	8008742 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8008656:	4b88      	ldr	r3, [pc, #544]	; (8008878 <HAL_RCC_OscConfig+0x240>)
 8008658:	689b      	ldr	r3, [r3, #8]
 800865a:	f003 030c 	and.w	r3, r3, #12
 800865e:	2b04      	cmp	r3, #4
 8008660:	d00c      	beq.n	800867c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8008662:	4b85      	ldr	r3, [pc, #532]	; (8008878 <HAL_RCC_OscConfig+0x240>)
 8008664:	689b      	ldr	r3, [r3, #8]
 8008666:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800866a:	2b08      	cmp	r3, #8
 800866c:	d112      	bne.n	8008694 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800866e:	4b82      	ldr	r3, [pc, #520]	; (8008878 <HAL_RCC_OscConfig+0x240>)
 8008670:	685b      	ldr	r3, [r3, #4]
 8008672:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008676:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800867a:	d10b      	bne.n	8008694 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800867c:	4b7e      	ldr	r3, [pc, #504]	; (8008878 <HAL_RCC_OscConfig+0x240>)
 800867e:	681b      	ldr	r3, [r3, #0]
 8008680:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008684:	2b00      	cmp	r3, #0
 8008686:	d05b      	beq.n	8008740 <HAL_RCC_OscConfig+0x108>
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	685b      	ldr	r3, [r3, #4]
 800868c:	2b00      	cmp	r3, #0
 800868e:	d157      	bne.n	8008740 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8008690:	2301      	movs	r3, #1
 8008692:	e242      	b.n	8008b1a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	685b      	ldr	r3, [r3, #4]
 8008698:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800869c:	d106      	bne.n	80086ac <HAL_RCC_OscConfig+0x74>
 800869e:	4b76      	ldr	r3, [pc, #472]	; (8008878 <HAL_RCC_OscConfig+0x240>)
 80086a0:	681b      	ldr	r3, [r3, #0]
 80086a2:	4a75      	ldr	r2, [pc, #468]	; (8008878 <HAL_RCC_OscConfig+0x240>)
 80086a4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80086a8:	6013      	str	r3, [r2, #0]
 80086aa:	e01d      	b.n	80086e8 <HAL_RCC_OscConfig+0xb0>
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	685b      	ldr	r3, [r3, #4]
 80086b0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80086b4:	d10c      	bne.n	80086d0 <HAL_RCC_OscConfig+0x98>
 80086b6:	4b70      	ldr	r3, [pc, #448]	; (8008878 <HAL_RCC_OscConfig+0x240>)
 80086b8:	681b      	ldr	r3, [r3, #0]
 80086ba:	4a6f      	ldr	r2, [pc, #444]	; (8008878 <HAL_RCC_OscConfig+0x240>)
 80086bc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80086c0:	6013      	str	r3, [r2, #0]
 80086c2:	4b6d      	ldr	r3, [pc, #436]	; (8008878 <HAL_RCC_OscConfig+0x240>)
 80086c4:	681b      	ldr	r3, [r3, #0]
 80086c6:	4a6c      	ldr	r2, [pc, #432]	; (8008878 <HAL_RCC_OscConfig+0x240>)
 80086c8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80086cc:	6013      	str	r3, [r2, #0]
 80086ce:	e00b      	b.n	80086e8 <HAL_RCC_OscConfig+0xb0>
 80086d0:	4b69      	ldr	r3, [pc, #420]	; (8008878 <HAL_RCC_OscConfig+0x240>)
 80086d2:	681b      	ldr	r3, [r3, #0]
 80086d4:	4a68      	ldr	r2, [pc, #416]	; (8008878 <HAL_RCC_OscConfig+0x240>)
 80086d6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80086da:	6013      	str	r3, [r2, #0]
 80086dc:	4b66      	ldr	r3, [pc, #408]	; (8008878 <HAL_RCC_OscConfig+0x240>)
 80086de:	681b      	ldr	r3, [r3, #0]
 80086e0:	4a65      	ldr	r2, [pc, #404]	; (8008878 <HAL_RCC_OscConfig+0x240>)
 80086e2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80086e6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	685b      	ldr	r3, [r3, #4]
 80086ec:	2b00      	cmp	r3, #0
 80086ee:	d013      	beq.n	8008718 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80086f0:	f7fe fb4a 	bl	8006d88 <HAL_GetTick>
 80086f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80086f6:	e008      	b.n	800870a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80086f8:	f7fe fb46 	bl	8006d88 <HAL_GetTick>
 80086fc:	4602      	mov	r2, r0
 80086fe:	693b      	ldr	r3, [r7, #16]
 8008700:	1ad3      	subs	r3, r2, r3
 8008702:	2b64      	cmp	r3, #100	; 0x64
 8008704:	d901      	bls.n	800870a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8008706:	2303      	movs	r3, #3
 8008708:	e207      	b.n	8008b1a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800870a:	4b5b      	ldr	r3, [pc, #364]	; (8008878 <HAL_RCC_OscConfig+0x240>)
 800870c:	681b      	ldr	r3, [r3, #0]
 800870e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008712:	2b00      	cmp	r3, #0
 8008714:	d0f0      	beq.n	80086f8 <HAL_RCC_OscConfig+0xc0>
 8008716:	e014      	b.n	8008742 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008718:	f7fe fb36 	bl	8006d88 <HAL_GetTick>
 800871c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800871e:	e008      	b.n	8008732 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8008720:	f7fe fb32 	bl	8006d88 <HAL_GetTick>
 8008724:	4602      	mov	r2, r0
 8008726:	693b      	ldr	r3, [r7, #16]
 8008728:	1ad3      	subs	r3, r2, r3
 800872a:	2b64      	cmp	r3, #100	; 0x64
 800872c:	d901      	bls.n	8008732 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800872e:	2303      	movs	r3, #3
 8008730:	e1f3      	b.n	8008b1a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8008732:	4b51      	ldr	r3, [pc, #324]	; (8008878 <HAL_RCC_OscConfig+0x240>)
 8008734:	681b      	ldr	r3, [r3, #0]
 8008736:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800873a:	2b00      	cmp	r3, #0
 800873c:	d1f0      	bne.n	8008720 <HAL_RCC_OscConfig+0xe8>
 800873e:	e000      	b.n	8008742 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008740:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	681b      	ldr	r3, [r3, #0]
 8008746:	f003 0302 	and.w	r3, r3, #2
 800874a:	2b00      	cmp	r3, #0
 800874c:	d063      	beq.n	8008816 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800874e:	4b4a      	ldr	r3, [pc, #296]	; (8008878 <HAL_RCC_OscConfig+0x240>)
 8008750:	689b      	ldr	r3, [r3, #8]
 8008752:	f003 030c 	and.w	r3, r3, #12
 8008756:	2b00      	cmp	r3, #0
 8008758:	d00b      	beq.n	8008772 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800875a:	4b47      	ldr	r3, [pc, #284]	; (8008878 <HAL_RCC_OscConfig+0x240>)
 800875c:	689b      	ldr	r3, [r3, #8]
 800875e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8008762:	2b08      	cmp	r3, #8
 8008764:	d11c      	bne.n	80087a0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8008766:	4b44      	ldr	r3, [pc, #272]	; (8008878 <HAL_RCC_OscConfig+0x240>)
 8008768:	685b      	ldr	r3, [r3, #4]
 800876a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800876e:	2b00      	cmp	r3, #0
 8008770:	d116      	bne.n	80087a0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8008772:	4b41      	ldr	r3, [pc, #260]	; (8008878 <HAL_RCC_OscConfig+0x240>)
 8008774:	681b      	ldr	r3, [r3, #0]
 8008776:	f003 0302 	and.w	r3, r3, #2
 800877a:	2b00      	cmp	r3, #0
 800877c:	d005      	beq.n	800878a <HAL_RCC_OscConfig+0x152>
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	68db      	ldr	r3, [r3, #12]
 8008782:	2b01      	cmp	r3, #1
 8008784:	d001      	beq.n	800878a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8008786:	2301      	movs	r3, #1
 8008788:	e1c7      	b.n	8008b1a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800878a:	4b3b      	ldr	r3, [pc, #236]	; (8008878 <HAL_RCC_OscConfig+0x240>)
 800878c:	681b      	ldr	r3, [r3, #0]
 800878e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	691b      	ldr	r3, [r3, #16]
 8008796:	00db      	lsls	r3, r3, #3
 8008798:	4937      	ldr	r1, [pc, #220]	; (8008878 <HAL_RCC_OscConfig+0x240>)
 800879a:	4313      	orrs	r3, r2
 800879c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800879e:	e03a      	b.n	8008816 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	68db      	ldr	r3, [r3, #12]
 80087a4:	2b00      	cmp	r3, #0
 80087a6:	d020      	beq.n	80087ea <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80087a8:	4b34      	ldr	r3, [pc, #208]	; (800887c <HAL_RCC_OscConfig+0x244>)
 80087aa:	2201      	movs	r2, #1
 80087ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80087ae:	f7fe faeb 	bl	8006d88 <HAL_GetTick>
 80087b2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80087b4:	e008      	b.n	80087c8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80087b6:	f7fe fae7 	bl	8006d88 <HAL_GetTick>
 80087ba:	4602      	mov	r2, r0
 80087bc:	693b      	ldr	r3, [r7, #16]
 80087be:	1ad3      	subs	r3, r2, r3
 80087c0:	2b02      	cmp	r3, #2
 80087c2:	d901      	bls.n	80087c8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80087c4:	2303      	movs	r3, #3
 80087c6:	e1a8      	b.n	8008b1a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80087c8:	4b2b      	ldr	r3, [pc, #172]	; (8008878 <HAL_RCC_OscConfig+0x240>)
 80087ca:	681b      	ldr	r3, [r3, #0]
 80087cc:	f003 0302 	and.w	r3, r3, #2
 80087d0:	2b00      	cmp	r3, #0
 80087d2:	d0f0      	beq.n	80087b6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80087d4:	4b28      	ldr	r3, [pc, #160]	; (8008878 <HAL_RCC_OscConfig+0x240>)
 80087d6:	681b      	ldr	r3, [r3, #0]
 80087d8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	691b      	ldr	r3, [r3, #16]
 80087e0:	00db      	lsls	r3, r3, #3
 80087e2:	4925      	ldr	r1, [pc, #148]	; (8008878 <HAL_RCC_OscConfig+0x240>)
 80087e4:	4313      	orrs	r3, r2
 80087e6:	600b      	str	r3, [r1, #0]
 80087e8:	e015      	b.n	8008816 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80087ea:	4b24      	ldr	r3, [pc, #144]	; (800887c <HAL_RCC_OscConfig+0x244>)
 80087ec:	2200      	movs	r2, #0
 80087ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80087f0:	f7fe faca 	bl	8006d88 <HAL_GetTick>
 80087f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80087f6:	e008      	b.n	800880a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80087f8:	f7fe fac6 	bl	8006d88 <HAL_GetTick>
 80087fc:	4602      	mov	r2, r0
 80087fe:	693b      	ldr	r3, [r7, #16]
 8008800:	1ad3      	subs	r3, r2, r3
 8008802:	2b02      	cmp	r3, #2
 8008804:	d901      	bls.n	800880a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8008806:	2303      	movs	r3, #3
 8008808:	e187      	b.n	8008b1a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800880a:	4b1b      	ldr	r3, [pc, #108]	; (8008878 <HAL_RCC_OscConfig+0x240>)
 800880c:	681b      	ldr	r3, [r3, #0]
 800880e:	f003 0302 	and.w	r3, r3, #2
 8008812:	2b00      	cmp	r3, #0
 8008814:	d1f0      	bne.n	80087f8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	681b      	ldr	r3, [r3, #0]
 800881a:	f003 0308 	and.w	r3, r3, #8
 800881e:	2b00      	cmp	r3, #0
 8008820:	d036      	beq.n	8008890 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	695b      	ldr	r3, [r3, #20]
 8008826:	2b00      	cmp	r3, #0
 8008828:	d016      	beq.n	8008858 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800882a:	4b15      	ldr	r3, [pc, #84]	; (8008880 <HAL_RCC_OscConfig+0x248>)
 800882c:	2201      	movs	r2, #1
 800882e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008830:	f7fe faaa 	bl	8006d88 <HAL_GetTick>
 8008834:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8008836:	e008      	b.n	800884a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8008838:	f7fe faa6 	bl	8006d88 <HAL_GetTick>
 800883c:	4602      	mov	r2, r0
 800883e:	693b      	ldr	r3, [r7, #16]
 8008840:	1ad3      	subs	r3, r2, r3
 8008842:	2b02      	cmp	r3, #2
 8008844:	d901      	bls.n	800884a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8008846:	2303      	movs	r3, #3
 8008848:	e167      	b.n	8008b1a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800884a:	4b0b      	ldr	r3, [pc, #44]	; (8008878 <HAL_RCC_OscConfig+0x240>)
 800884c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800884e:	f003 0302 	and.w	r3, r3, #2
 8008852:	2b00      	cmp	r3, #0
 8008854:	d0f0      	beq.n	8008838 <HAL_RCC_OscConfig+0x200>
 8008856:	e01b      	b.n	8008890 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8008858:	4b09      	ldr	r3, [pc, #36]	; (8008880 <HAL_RCC_OscConfig+0x248>)
 800885a:	2200      	movs	r2, #0
 800885c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800885e:	f7fe fa93 	bl	8006d88 <HAL_GetTick>
 8008862:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008864:	e00e      	b.n	8008884 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8008866:	f7fe fa8f 	bl	8006d88 <HAL_GetTick>
 800886a:	4602      	mov	r2, r0
 800886c:	693b      	ldr	r3, [r7, #16]
 800886e:	1ad3      	subs	r3, r2, r3
 8008870:	2b02      	cmp	r3, #2
 8008872:	d907      	bls.n	8008884 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8008874:	2303      	movs	r3, #3
 8008876:	e150      	b.n	8008b1a <HAL_RCC_OscConfig+0x4e2>
 8008878:	40023800 	.word	0x40023800
 800887c:	42470000 	.word	0x42470000
 8008880:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008884:	4b88      	ldr	r3, [pc, #544]	; (8008aa8 <HAL_RCC_OscConfig+0x470>)
 8008886:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008888:	f003 0302 	and.w	r3, r3, #2
 800888c:	2b00      	cmp	r3, #0
 800888e:	d1ea      	bne.n	8008866 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	681b      	ldr	r3, [r3, #0]
 8008894:	f003 0304 	and.w	r3, r3, #4
 8008898:	2b00      	cmp	r3, #0
 800889a:	f000 8097 	beq.w	80089cc <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800889e:	2300      	movs	r3, #0
 80088a0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80088a2:	4b81      	ldr	r3, [pc, #516]	; (8008aa8 <HAL_RCC_OscConfig+0x470>)
 80088a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80088a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80088aa:	2b00      	cmp	r3, #0
 80088ac:	d10f      	bne.n	80088ce <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80088ae:	2300      	movs	r3, #0
 80088b0:	60bb      	str	r3, [r7, #8]
 80088b2:	4b7d      	ldr	r3, [pc, #500]	; (8008aa8 <HAL_RCC_OscConfig+0x470>)
 80088b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80088b6:	4a7c      	ldr	r2, [pc, #496]	; (8008aa8 <HAL_RCC_OscConfig+0x470>)
 80088b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80088bc:	6413      	str	r3, [r2, #64]	; 0x40
 80088be:	4b7a      	ldr	r3, [pc, #488]	; (8008aa8 <HAL_RCC_OscConfig+0x470>)
 80088c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80088c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80088c6:	60bb      	str	r3, [r7, #8]
 80088c8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80088ca:	2301      	movs	r3, #1
 80088cc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80088ce:	4b77      	ldr	r3, [pc, #476]	; (8008aac <HAL_RCC_OscConfig+0x474>)
 80088d0:	681b      	ldr	r3, [r3, #0]
 80088d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80088d6:	2b00      	cmp	r3, #0
 80088d8:	d118      	bne.n	800890c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80088da:	4b74      	ldr	r3, [pc, #464]	; (8008aac <HAL_RCC_OscConfig+0x474>)
 80088dc:	681b      	ldr	r3, [r3, #0]
 80088de:	4a73      	ldr	r2, [pc, #460]	; (8008aac <HAL_RCC_OscConfig+0x474>)
 80088e0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80088e4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80088e6:	f7fe fa4f 	bl	8006d88 <HAL_GetTick>
 80088ea:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80088ec:	e008      	b.n	8008900 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80088ee:	f7fe fa4b 	bl	8006d88 <HAL_GetTick>
 80088f2:	4602      	mov	r2, r0
 80088f4:	693b      	ldr	r3, [r7, #16]
 80088f6:	1ad3      	subs	r3, r2, r3
 80088f8:	2b02      	cmp	r3, #2
 80088fa:	d901      	bls.n	8008900 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80088fc:	2303      	movs	r3, #3
 80088fe:	e10c      	b.n	8008b1a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008900:	4b6a      	ldr	r3, [pc, #424]	; (8008aac <HAL_RCC_OscConfig+0x474>)
 8008902:	681b      	ldr	r3, [r3, #0]
 8008904:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008908:	2b00      	cmp	r3, #0
 800890a:	d0f0      	beq.n	80088ee <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	689b      	ldr	r3, [r3, #8]
 8008910:	2b01      	cmp	r3, #1
 8008912:	d106      	bne.n	8008922 <HAL_RCC_OscConfig+0x2ea>
 8008914:	4b64      	ldr	r3, [pc, #400]	; (8008aa8 <HAL_RCC_OscConfig+0x470>)
 8008916:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008918:	4a63      	ldr	r2, [pc, #396]	; (8008aa8 <HAL_RCC_OscConfig+0x470>)
 800891a:	f043 0301 	orr.w	r3, r3, #1
 800891e:	6713      	str	r3, [r2, #112]	; 0x70
 8008920:	e01c      	b.n	800895c <HAL_RCC_OscConfig+0x324>
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	689b      	ldr	r3, [r3, #8]
 8008926:	2b05      	cmp	r3, #5
 8008928:	d10c      	bne.n	8008944 <HAL_RCC_OscConfig+0x30c>
 800892a:	4b5f      	ldr	r3, [pc, #380]	; (8008aa8 <HAL_RCC_OscConfig+0x470>)
 800892c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800892e:	4a5e      	ldr	r2, [pc, #376]	; (8008aa8 <HAL_RCC_OscConfig+0x470>)
 8008930:	f043 0304 	orr.w	r3, r3, #4
 8008934:	6713      	str	r3, [r2, #112]	; 0x70
 8008936:	4b5c      	ldr	r3, [pc, #368]	; (8008aa8 <HAL_RCC_OscConfig+0x470>)
 8008938:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800893a:	4a5b      	ldr	r2, [pc, #364]	; (8008aa8 <HAL_RCC_OscConfig+0x470>)
 800893c:	f043 0301 	orr.w	r3, r3, #1
 8008940:	6713      	str	r3, [r2, #112]	; 0x70
 8008942:	e00b      	b.n	800895c <HAL_RCC_OscConfig+0x324>
 8008944:	4b58      	ldr	r3, [pc, #352]	; (8008aa8 <HAL_RCC_OscConfig+0x470>)
 8008946:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008948:	4a57      	ldr	r2, [pc, #348]	; (8008aa8 <HAL_RCC_OscConfig+0x470>)
 800894a:	f023 0301 	bic.w	r3, r3, #1
 800894e:	6713      	str	r3, [r2, #112]	; 0x70
 8008950:	4b55      	ldr	r3, [pc, #340]	; (8008aa8 <HAL_RCC_OscConfig+0x470>)
 8008952:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008954:	4a54      	ldr	r2, [pc, #336]	; (8008aa8 <HAL_RCC_OscConfig+0x470>)
 8008956:	f023 0304 	bic.w	r3, r3, #4
 800895a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	689b      	ldr	r3, [r3, #8]
 8008960:	2b00      	cmp	r3, #0
 8008962:	d015      	beq.n	8008990 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008964:	f7fe fa10 	bl	8006d88 <HAL_GetTick>
 8008968:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800896a:	e00a      	b.n	8008982 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800896c:	f7fe fa0c 	bl	8006d88 <HAL_GetTick>
 8008970:	4602      	mov	r2, r0
 8008972:	693b      	ldr	r3, [r7, #16]
 8008974:	1ad3      	subs	r3, r2, r3
 8008976:	f241 3288 	movw	r2, #5000	; 0x1388
 800897a:	4293      	cmp	r3, r2
 800897c:	d901      	bls.n	8008982 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800897e:	2303      	movs	r3, #3
 8008980:	e0cb      	b.n	8008b1a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008982:	4b49      	ldr	r3, [pc, #292]	; (8008aa8 <HAL_RCC_OscConfig+0x470>)
 8008984:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008986:	f003 0302 	and.w	r3, r3, #2
 800898a:	2b00      	cmp	r3, #0
 800898c:	d0ee      	beq.n	800896c <HAL_RCC_OscConfig+0x334>
 800898e:	e014      	b.n	80089ba <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008990:	f7fe f9fa 	bl	8006d88 <HAL_GetTick>
 8008994:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008996:	e00a      	b.n	80089ae <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008998:	f7fe f9f6 	bl	8006d88 <HAL_GetTick>
 800899c:	4602      	mov	r2, r0
 800899e:	693b      	ldr	r3, [r7, #16]
 80089a0:	1ad3      	subs	r3, r2, r3
 80089a2:	f241 3288 	movw	r2, #5000	; 0x1388
 80089a6:	4293      	cmp	r3, r2
 80089a8:	d901      	bls.n	80089ae <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80089aa:	2303      	movs	r3, #3
 80089ac:	e0b5      	b.n	8008b1a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80089ae:	4b3e      	ldr	r3, [pc, #248]	; (8008aa8 <HAL_RCC_OscConfig+0x470>)
 80089b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80089b2:	f003 0302 	and.w	r3, r3, #2
 80089b6:	2b00      	cmp	r3, #0
 80089b8:	d1ee      	bne.n	8008998 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80089ba:	7dfb      	ldrb	r3, [r7, #23]
 80089bc:	2b01      	cmp	r3, #1
 80089be:	d105      	bne.n	80089cc <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80089c0:	4b39      	ldr	r3, [pc, #228]	; (8008aa8 <HAL_RCC_OscConfig+0x470>)
 80089c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80089c4:	4a38      	ldr	r2, [pc, #224]	; (8008aa8 <HAL_RCC_OscConfig+0x470>)
 80089c6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80089ca:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	699b      	ldr	r3, [r3, #24]
 80089d0:	2b00      	cmp	r3, #0
 80089d2:	f000 80a1 	beq.w	8008b18 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80089d6:	4b34      	ldr	r3, [pc, #208]	; (8008aa8 <HAL_RCC_OscConfig+0x470>)
 80089d8:	689b      	ldr	r3, [r3, #8]
 80089da:	f003 030c 	and.w	r3, r3, #12
 80089de:	2b08      	cmp	r3, #8
 80089e0:	d05c      	beq.n	8008a9c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	699b      	ldr	r3, [r3, #24]
 80089e6:	2b02      	cmp	r3, #2
 80089e8:	d141      	bne.n	8008a6e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80089ea:	4b31      	ldr	r3, [pc, #196]	; (8008ab0 <HAL_RCC_OscConfig+0x478>)
 80089ec:	2200      	movs	r2, #0
 80089ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80089f0:	f7fe f9ca 	bl	8006d88 <HAL_GetTick>
 80089f4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80089f6:	e008      	b.n	8008a0a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80089f8:	f7fe f9c6 	bl	8006d88 <HAL_GetTick>
 80089fc:	4602      	mov	r2, r0
 80089fe:	693b      	ldr	r3, [r7, #16]
 8008a00:	1ad3      	subs	r3, r2, r3
 8008a02:	2b02      	cmp	r3, #2
 8008a04:	d901      	bls.n	8008a0a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8008a06:	2303      	movs	r3, #3
 8008a08:	e087      	b.n	8008b1a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008a0a:	4b27      	ldr	r3, [pc, #156]	; (8008aa8 <HAL_RCC_OscConfig+0x470>)
 8008a0c:	681b      	ldr	r3, [r3, #0]
 8008a0e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008a12:	2b00      	cmp	r3, #0
 8008a14:	d1f0      	bne.n	80089f8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8008a16:	687b      	ldr	r3, [r7, #4]
 8008a18:	69da      	ldr	r2, [r3, #28]
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	6a1b      	ldr	r3, [r3, #32]
 8008a1e:	431a      	orrs	r2, r3
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a24:	019b      	lsls	r3, r3, #6
 8008a26:	431a      	orrs	r2, r3
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008a2c:	085b      	lsrs	r3, r3, #1
 8008a2e:	3b01      	subs	r3, #1
 8008a30:	041b      	lsls	r3, r3, #16
 8008a32:	431a      	orrs	r2, r3
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a38:	061b      	lsls	r3, r3, #24
 8008a3a:	491b      	ldr	r1, [pc, #108]	; (8008aa8 <HAL_RCC_OscConfig+0x470>)
 8008a3c:	4313      	orrs	r3, r2
 8008a3e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8008a40:	4b1b      	ldr	r3, [pc, #108]	; (8008ab0 <HAL_RCC_OscConfig+0x478>)
 8008a42:	2201      	movs	r2, #1
 8008a44:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008a46:	f7fe f99f 	bl	8006d88 <HAL_GetTick>
 8008a4a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008a4c:	e008      	b.n	8008a60 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008a4e:	f7fe f99b 	bl	8006d88 <HAL_GetTick>
 8008a52:	4602      	mov	r2, r0
 8008a54:	693b      	ldr	r3, [r7, #16]
 8008a56:	1ad3      	subs	r3, r2, r3
 8008a58:	2b02      	cmp	r3, #2
 8008a5a:	d901      	bls.n	8008a60 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8008a5c:	2303      	movs	r3, #3
 8008a5e:	e05c      	b.n	8008b1a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008a60:	4b11      	ldr	r3, [pc, #68]	; (8008aa8 <HAL_RCC_OscConfig+0x470>)
 8008a62:	681b      	ldr	r3, [r3, #0]
 8008a64:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008a68:	2b00      	cmp	r3, #0
 8008a6a:	d0f0      	beq.n	8008a4e <HAL_RCC_OscConfig+0x416>
 8008a6c:	e054      	b.n	8008b18 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008a6e:	4b10      	ldr	r3, [pc, #64]	; (8008ab0 <HAL_RCC_OscConfig+0x478>)
 8008a70:	2200      	movs	r2, #0
 8008a72:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008a74:	f7fe f988 	bl	8006d88 <HAL_GetTick>
 8008a78:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008a7a:	e008      	b.n	8008a8e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008a7c:	f7fe f984 	bl	8006d88 <HAL_GetTick>
 8008a80:	4602      	mov	r2, r0
 8008a82:	693b      	ldr	r3, [r7, #16]
 8008a84:	1ad3      	subs	r3, r2, r3
 8008a86:	2b02      	cmp	r3, #2
 8008a88:	d901      	bls.n	8008a8e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8008a8a:	2303      	movs	r3, #3
 8008a8c:	e045      	b.n	8008b1a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008a8e:	4b06      	ldr	r3, [pc, #24]	; (8008aa8 <HAL_RCC_OscConfig+0x470>)
 8008a90:	681b      	ldr	r3, [r3, #0]
 8008a92:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008a96:	2b00      	cmp	r3, #0
 8008a98:	d1f0      	bne.n	8008a7c <HAL_RCC_OscConfig+0x444>
 8008a9a:	e03d      	b.n	8008b18 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	699b      	ldr	r3, [r3, #24]
 8008aa0:	2b01      	cmp	r3, #1
 8008aa2:	d107      	bne.n	8008ab4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8008aa4:	2301      	movs	r3, #1
 8008aa6:	e038      	b.n	8008b1a <HAL_RCC_OscConfig+0x4e2>
 8008aa8:	40023800 	.word	0x40023800
 8008aac:	40007000 	.word	0x40007000
 8008ab0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8008ab4:	4b1b      	ldr	r3, [pc, #108]	; (8008b24 <HAL_RCC_OscConfig+0x4ec>)
 8008ab6:	685b      	ldr	r3, [r3, #4]
 8008ab8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	699b      	ldr	r3, [r3, #24]
 8008abe:	2b01      	cmp	r3, #1
 8008ac0:	d028      	beq.n	8008b14 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008ac2:	68fb      	ldr	r3, [r7, #12]
 8008ac4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008acc:	429a      	cmp	r2, r3
 8008ace:	d121      	bne.n	8008b14 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8008ad0:	68fb      	ldr	r3, [r7, #12]
 8008ad2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008ada:	429a      	cmp	r2, r3
 8008adc:	d11a      	bne.n	8008b14 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8008ade:	68fa      	ldr	r2, [r7, #12]
 8008ae0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8008ae4:	4013      	ands	r3, r2
 8008ae6:	687a      	ldr	r2, [r7, #4]
 8008ae8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8008aea:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8008aec:	4293      	cmp	r3, r2
 8008aee:	d111      	bne.n	8008b14 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8008af0:	68fb      	ldr	r3, [r7, #12]
 8008af2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008afa:	085b      	lsrs	r3, r3, #1
 8008afc:	3b01      	subs	r3, #1
 8008afe:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8008b00:	429a      	cmp	r2, r3
 8008b02:	d107      	bne.n	8008b14 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8008b04:	68fb      	ldr	r3, [r7, #12]
 8008b06:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b0e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8008b10:	429a      	cmp	r2, r3
 8008b12:	d001      	beq.n	8008b18 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8008b14:	2301      	movs	r3, #1
 8008b16:	e000      	b.n	8008b1a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8008b18:	2300      	movs	r3, #0
}
 8008b1a:	4618      	mov	r0, r3
 8008b1c:	3718      	adds	r7, #24
 8008b1e:	46bd      	mov	sp, r7
 8008b20:	bd80      	pop	{r7, pc}
 8008b22:	bf00      	nop
 8008b24:	40023800 	.word	0x40023800

08008b28 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008b28:	b580      	push	{r7, lr}
 8008b2a:	b084      	sub	sp, #16
 8008b2c:	af00      	add	r7, sp, #0
 8008b2e:	6078      	str	r0, [r7, #4]
 8008b30:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	2b00      	cmp	r3, #0
 8008b36:	d101      	bne.n	8008b3c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8008b38:	2301      	movs	r3, #1
 8008b3a:	e0cc      	b.n	8008cd6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8008b3c:	4b68      	ldr	r3, [pc, #416]	; (8008ce0 <HAL_RCC_ClockConfig+0x1b8>)
 8008b3e:	681b      	ldr	r3, [r3, #0]
 8008b40:	f003 0307 	and.w	r3, r3, #7
 8008b44:	683a      	ldr	r2, [r7, #0]
 8008b46:	429a      	cmp	r2, r3
 8008b48:	d90c      	bls.n	8008b64 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008b4a:	4b65      	ldr	r3, [pc, #404]	; (8008ce0 <HAL_RCC_ClockConfig+0x1b8>)
 8008b4c:	683a      	ldr	r2, [r7, #0]
 8008b4e:	b2d2      	uxtb	r2, r2
 8008b50:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008b52:	4b63      	ldr	r3, [pc, #396]	; (8008ce0 <HAL_RCC_ClockConfig+0x1b8>)
 8008b54:	681b      	ldr	r3, [r3, #0]
 8008b56:	f003 0307 	and.w	r3, r3, #7
 8008b5a:	683a      	ldr	r2, [r7, #0]
 8008b5c:	429a      	cmp	r2, r3
 8008b5e:	d001      	beq.n	8008b64 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8008b60:	2301      	movs	r3, #1
 8008b62:	e0b8      	b.n	8008cd6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	681b      	ldr	r3, [r3, #0]
 8008b68:	f003 0302 	and.w	r3, r3, #2
 8008b6c:	2b00      	cmp	r3, #0
 8008b6e:	d020      	beq.n	8008bb2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	681b      	ldr	r3, [r3, #0]
 8008b74:	f003 0304 	and.w	r3, r3, #4
 8008b78:	2b00      	cmp	r3, #0
 8008b7a:	d005      	beq.n	8008b88 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8008b7c:	4b59      	ldr	r3, [pc, #356]	; (8008ce4 <HAL_RCC_ClockConfig+0x1bc>)
 8008b7e:	689b      	ldr	r3, [r3, #8]
 8008b80:	4a58      	ldr	r2, [pc, #352]	; (8008ce4 <HAL_RCC_ClockConfig+0x1bc>)
 8008b82:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8008b86:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	681b      	ldr	r3, [r3, #0]
 8008b8c:	f003 0308 	and.w	r3, r3, #8
 8008b90:	2b00      	cmp	r3, #0
 8008b92:	d005      	beq.n	8008ba0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8008b94:	4b53      	ldr	r3, [pc, #332]	; (8008ce4 <HAL_RCC_ClockConfig+0x1bc>)
 8008b96:	689b      	ldr	r3, [r3, #8]
 8008b98:	4a52      	ldr	r2, [pc, #328]	; (8008ce4 <HAL_RCC_ClockConfig+0x1bc>)
 8008b9a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8008b9e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008ba0:	4b50      	ldr	r3, [pc, #320]	; (8008ce4 <HAL_RCC_ClockConfig+0x1bc>)
 8008ba2:	689b      	ldr	r3, [r3, #8]
 8008ba4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	689b      	ldr	r3, [r3, #8]
 8008bac:	494d      	ldr	r1, [pc, #308]	; (8008ce4 <HAL_RCC_ClockConfig+0x1bc>)
 8008bae:	4313      	orrs	r3, r2
 8008bb0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	681b      	ldr	r3, [r3, #0]
 8008bb6:	f003 0301 	and.w	r3, r3, #1
 8008bba:	2b00      	cmp	r3, #0
 8008bbc:	d044      	beq.n	8008c48 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	685b      	ldr	r3, [r3, #4]
 8008bc2:	2b01      	cmp	r3, #1
 8008bc4:	d107      	bne.n	8008bd6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008bc6:	4b47      	ldr	r3, [pc, #284]	; (8008ce4 <HAL_RCC_ClockConfig+0x1bc>)
 8008bc8:	681b      	ldr	r3, [r3, #0]
 8008bca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008bce:	2b00      	cmp	r3, #0
 8008bd0:	d119      	bne.n	8008c06 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008bd2:	2301      	movs	r3, #1
 8008bd4:	e07f      	b.n	8008cd6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	685b      	ldr	r3, [r3, #4]
 8008bda:	2b02      	cmp	r3, #2
 8008bdc:	d003      	beq.n	8008be6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8008be2:	2b03      	cmp	r3, #3
 8008be4:	d107      	bne.n	8008bf6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008be6:	4b3f      	ldr	r3, [pc, #252]	; (8008ce4 <HAL_RCC_ClockConfig+0x1bc>)
 8008be8:	681b      	ldr	r3, [r3, #0]
 8008bea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008bee:	2b00      	cmp	r3, #0
 8008bf0:	d109      	bne.n	8008c06 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008bf2:	2301      	movs	r3, #1
 8008bf4:	e06f      	b.n	8008cd6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008bf6:	4b3b      	ldr	r3, [pc, #236]	; (8008ce4 <HAL_RCC_ClockConfig+0x1bc>)
 8008bf8:	681b      	ldr	r3, [r3, #0]
 8008bfa:	f003 0302 	and.w	r3, r3, #2
 8008bfe:	2b00      	cmp	r3, #0
 8008c00:	d101      	bne.n	8008c06 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008c02:	2301      	movs	r3, #1
 8008c04:	e067      	b.n	8008cd6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8008c06:	4b37      	ldr	r3, [pc, #220]	; (8008ce4 <HAL_RCC_ClockConfig+0x1bc>)
 8008c08:	689b      	ldr	r3, [r3, #8]
 8008c0a:	f023 0203 	bic.w	r2, r3, #3
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	685b      	ldr	r3, [r3, #4]
 8008c12:	4934      	ldr	r1, [pc, #208]	; (8008ce4 <HAL_RCC_ClockConfig+0x1bc>)
 8008c14:	4313      	orrs	r3, r2
 8008c16:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8008c18:	f7fe f8b6 	bl	8006d88 <HAL_GetTick>
 8008c1c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008c1e:	e00a      	b.n	8008c36 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008c20:	f7fe f8b2 	bl	8006d88 <HAL_GetTick>
 8008c24:	4602      	mov	r2, r0
 8008c26:	68fb      	ldr	r3, [r7, #12]
 8008c28:	1ad3      	subs	r3, r2, r3
 8008c2a:	f241 3288 	movw	r2, #5000	; 0x1388
 8008c2e:	4293      	cmp	r3, r2
 8008c30:	d901      	bls.n	8008c36 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8008c32:	2303      	movs	r3, #3
 8008c34:	e04f      	b.n	8008cd6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008c36:	4b2b      	ldr	r3, [pc, #172]	; (8008ce4 <HAL_RCC_ClockConfig+0x1bc>)
 8008c38:	689b      	ldr	r3, [r3, #8]
 8008c3a:	f003 020c 	and.w	r2, r3, #12
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	685b      	ldr	r3, [r3, #4]
 8008c42:	009b      	lsls	r3, r3, #2
 8008c44:	429a      	cmp	r2, r3
 8008c46:	d1eb      	bne.n	8008c20 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8008c48:	4b25      	ldr	r3, [pc, #148]	; (8008ce0 <HAL_RCC_ClockConfig+0x1b8>)
 8008c4a:	681b      	ldr	r3, [r3, #0]
 8008c4c:	f003 0307 	and.w	r3, r3, #7
 8008c50:	683a      	ldr	r2, [r7, #0]
 8008c52:	429a      	cmp	r2, r3
 8008c54:	d20c      	bcs.n	8008c70 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008c56:	4b22      	ldr	r3, [pc, #136]	; (8008ce0 <HAL_RCC_ClockConfig+0x1b8>)
 8008c58:	683a      	ldr	r2, [r7, #0]
 8008c5a:	b2d2      	uxtb	r2, r2
 8008c5c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008c5e:	4b20      	ldr	r3, [pc, #128]	; (8008ce0 <HAL_RCC_ClockConfig+0x1b8>)
 8008c60:	681b      	ldr	r3, [r3, #0]
 8008c62:	f003 0307 	and.w	r3, r3, #7
 8008c66:	683a      	ldr	r2, [r7, #0]
 8008c68:	429a      	cmp	r2, r3
 8008c6a:	d001      	beq.n	8008c70 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8008c6c:	2301      	movs	r3, #1
 8008c6e:	e032      	b.n	8008cd6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008c70:	687b      	ldr	r3, [r7, #4]
 8008c72:	681b      	ldr	r3, [r3, #0]
 8008c74:	f003 0304 	and.w	r3, r3, #4
 8008c78:	2b00      	cmp	r3, #0
 8008c7a:	d008      	beq.n	8008c8e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8008c7c:	4b19      	ldr	r3, [pc, #100]	; (8008ce4 <HAL_RCC_ClockConfig+0x1bc>)
 8008c7e:	689b      	ldr	r3, [r3, #8]
 8008c80:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	68db      	ldr	r3, [r3, #12]
 8008c88:	4916      	ldr	r1, [pc, #88]	; (8008ce4 <HAL_RCC_ClockConfig+0x1bc>)
 8008c8a:	4313      	orrs	r3, r2
 8008c8c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008c8e:	687b      	ldr	r3, [r7, #4]
 8008c90:	681b      	ldr	r3, [r3, #0]
 8008c92:	f003 0308 	and.w	r3, r3, #8
 8008c96:	2b00      	cmp	r3, #0
 8008c98:	d009      	beq.n	8008cae <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8008c9a:	4b12      	ldr	r3, [pc, #72]	; (8008ce4 <HAL_RCC_ClockConfig+0x1bc>)
 8008c9c:	689b      	ldr	r3, [r3, #8]
 8008c9e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8008ca2:	687b      	ldr	r3, [r7, #4]
 8008ca4:	691b      	ldr	r3, [r3, #16]
 8008ca6:	00db      	lsls	r3, r3, #3
 8008ca8:	490e      	ldr	r1, [pc, #56]	; (8008ce4 <HAL_RCC_ClockConfig+0x1bc>)
 8008caa:	4313      	orrs	r3, r2
 8008cac:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8008cae:	f000 f821 	bl	8008cf4 <HAL_RCC_GetSysClockFreq>
 8008cb2:	4602      	mov	r2, r0
 8008cb4:	4b0b      	ldr	r3, [pc, #44]	; (8008ce4 <HAL_RCC_ClockConfig+0x1bc>)
 8008cb6:	689b      	ldr	r3, [r3, #8]
 8008cb8:	091b      	lsrs	r3, r3, #4
 8008cba:	f003 030f 	and.w	r3, r3, #15
 8008cbe:	490a      	ldr	r1, [pc, #40]	; (8008ce8 <HAL_RCC_ClockConfig+0x1c0>)
 8008cc0:	5ccb      	ldrb	r3, [r1, r3]
 8008cc2:	fa22 f303 	lsr.w	r3, r2, r3
 8008cc6:	4a09      	ldr	r2, [pc, #36]	; (8008cec <HAL_RCC_ClockConfig+0x1c4>)
 8008cc8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8008cca:	4b09      	ldr	r3, [pc, #36]	; (8008cf0 <HAL_RCC_ClockConfig+0x1c8>)
 8008ccc:	681b      	ldr	r3, [r3, #0]
 8008cce:	4618      	mov	r0, r3
 8008cd0:	f7fe f816 	bl	8006d00 <HAL_InitTick>

  return HAL_OK;
 8008cd4:	2300      	movs	r3, #0
}
 8008cd6:	4618      	mov	r0, r3
 8008cd8:	3710      	adds	r7, #16
 8008cda:	46bd      	mov	sp, r7
 8008cdc:	bd80      	pop	{r7, pc}
 8008cde:	bf00      	nop
 8008ce0:	40023c00 	.word	0x40023c00
 8008ce4:	40023800 	.word	0x40023800
 8008ce8:	0800e214 	.word	0x0800e214
 8008cec:	20000004 	.word	0x20000004
 8008cf0:	200000dc 	.word	0x200000dc

08008cf4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008cf4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008cf8:	b094      	sub	sp, #80	; 0x50
 8008cfa:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8008cfc:	2300      	movs	r3, #0
 8008cfe:	647b      	str	r3, [r7, #68]	; 0x44
 8008d00:	2300      	movs	r3, #0
 8008d02:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008d04:	2300      	movs	r3, #0
 8008d06:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8008d08:	2300      	movs	r3, #0
 8008d0a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8008d0c:	4b79      	ldr	r3, [pc, #484]	; (8008ef4 <HAL_RCC_GetSysClockFreq+0x200>)
 8008d0e:	689b      	ldr	r3, [r3, #8]
 8008d10:	f003 030c 	and.w	r3, r3, #12
 8008d14:	2b08      	cmp	r3, #8
 8008d16:	d00d      	beq.n	8008d34 <HAL_RCC_GetSysClockFreq+0x40>
 8008d18:	2b08      	cmp	r3, #8
 8008d1a:	f200 80e1 	bhi.w	8008ee0 <HAL_RCC_GetSysClockFreq+0x1ec>
 8008d1e:	2b00      	cmp	r3, #0
 8008d20:	d002      	beq.n	8008d28 <HAL_RCC_GetSysClockFreq+0x34>
 8008d22:	2b04      	cmp	r3, #4
 8008d24:	d003      	beq.n	8008d2e <HAL_RCC_GetSysClockFreq+0x3a>
 8008d26:	e0db      	b.n	8008ee0 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8008d28:	4b73      	ldr	r3, [pc, #460]	; (8008ef8 <HAL_RCC_GetSysClockFreq+0x204>)
 8008d2a:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8008d2c:	e0db      	b.n	8008ee6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8008d2e:	4b73      	ldr	r3, [pc, #460]	; (8008efc <HAL_RCC_GetSysClockFreq+0x208>)
 8008d30:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8008d32:	e0d8      	b.n	8008ee6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8008d34:	4b6f      	ldr	r3, [pc, #444]	; (8008ef4 <HAL_RCC_GetSysClockFreq+0x200>)
 8008d36:	685b      	ldr	r3, [r3, #4]
 8008d38:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008d3c:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8008d3e:	4b6d      	ldr	r3, [pc, #436]	; (8008ef4 <HAL_RCC_GetSysClockFreq+0x200>)
 8008d40:	685b      	ldr	r3, [r3, #4]
 8008d42:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008d46:	2b00      	cmp	r3, #0
 8008d48:	d063      	beq.n	8008e12 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008d4a:	4b6a      	ldr	r3, [pc, #424]	; (8008ef4 <HAL_RCC_GetSysClockFreq+0x200>)
 8008d4c:	685b      	ldr	r3, [r3, #4]
 8008d4e:	099b      	lsrs	r3, r3, #6
 8008d50:	2200      	movs	r2, #0
 8008d52:	63bb      	str	r3, [r7, #56]	; 0x38
 8008d54:	63fa      	str	r2, [r7, #60]	; 0x3c
 8008d56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d58:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008d5c:	633b      	str	r3, [r7, #48]	; 0x30
 8008d5e:	2300      	movs	r3, #0
 8008d60:	637b      	str	r3, [r7, #52]	; 0x34
 8008d62:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8008d66:	4622      	mov	r2, r4
 8008d68:	462b      	mov	r3, r5
 8008d6a:	f04f 0000 	mov.w	r0, #0
 8008d6e:	f04f 0100 	mov.w	r1, #0
 8008d72:	0159      	lsls	r1, r3, #5
 8008d74:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8008d78:	0150      	lsls	r0, r2, #5
 8008d7a:	4602      	mov	r2, r0
 8008d7c:	460b      	mov	r3, r1
 8008d7e:	4621      	mov	r1, r4
 8008d80:	1a51      	subs	r1, r2, r1
 8008d82:	6139      	str	r1, [r7, #16]
 8008d84:	4629      	mov	r1, r5
 8008d86:	eb63 0301 	sbc.w	r3, r3, r1
 8008d8a:	617b      	str	r3, [r7, #20]
 8008d8c:	f04f 0200 	mov.w	r2, #0
 8008d90:	f04f 0300 	mov.w	r3, #0
 8008d94:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8008d98:	4659      	mov	r1, fp
 8008d9a:	018b      	lsls	r3, r1, #6
 8008d9c:	4651      	mov	r1, sl
 8008d9e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8008da2:	4651      	mov	r1, sl
 8008da4:	018a      	lsls	r2, r1, #6
 8008da6:	4651      	mov	r1, sl
 8008da8:	ebb2 0801 	subs.w	r8, r2, r1
 8008dac:	4659      	mov	r1, fp
 8008dae:	eb63 0901 	sbc.w	r9, r3, r1
 8008db2:	f04f 0200 	mov.w	r2, #0
 8008db6:	f04f 0300 	mov.w	r3, #0
 8008dba:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8008dbe:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8008dc2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8008dc6:	4690      	mov	r8, r2
 8008dc8:	4699      	mov	r9, r3
 8008dca:	4623      	mov	r3, r4
 8008dcc:	eb18 0303 	adds.w	r3, r8, r3
 8008dd0:	60bb      	str	r3, [r7, #8]
 8008dd2:	462b      	mov	r3, r5
 8008dd4:	eb49 0303 	adc.w	r3, r9, r3
 8008dd8:	60fb      	str	r3, [r7, #12]
 8008dda:	f04f 0200 	mov.w	r2, #0
 8008dde:	f04f 0300 	mov.w	r3, #0
 8008de2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8008de6:	4629      	mov	r1, r5
 8008de8:	024b      	lsls	r3, r1, #9
 8008dea:	4621      	mov	r1, r4
 8008dec:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8008df0:	4621      	mov	r1, r4
 8008df2:	024a      	lsls	r2, r1, #9
 8008df4:	4610      	mov	r0, r2
 8008df6:	4619      	mov	r1, r3
 8008df8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008dfa:	2200      	movs	r2, #0
 8008dfc:	62bb      	str	r3, [r7, #40]	; 0x28
 8008dfe:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008e00:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8008e04:	f7f7 fa44 	bl	8000290 <__aeabi_uldivmod>
 8008e08:	4602      	mov	r2, r0
 8008e0a:	460b      	mov	r3, r1
 8008e0c:	4613      	mov	r3, r2
 8008e0e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008e10:	e058      	b.n	8008ec4 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008e12:	4b38      	ldr	r3, [pc, #224]	; (8008ef4 <HAL_RCC_GetSysClockFreq+0x200>)
 8008e14:	685b      	ldr	r3, [r3, #4]
 8008e16:	099b      	lsrs	r3, r3, #6
 8008e18:	2200      	movs	r2, #0
 8008e1a:	4618      	mov	r0, r3
 8008e1c:	4611      	mov	r1, r2
 8008e1e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8008e22:	623b      	str	r3, [r7, #32]
 8008e24:	2300      	movs	r3, #0
 8008e26:	627b      	str	r3, [r7, #36]	; 0x24
 8008e28:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8008e2c:	4642      	mov	r2, r8
 8008e2e:	464b      	mov	r3, r9
 8008e30:	f04f 0000 	mov.w	r0, #0
 8008e34:	f04f 0100 	mov.w	r1, #0
 8008e38:	0159      	lsls	r1, r3, #5
 8008e3a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8008e3e:	0150      	lsls	r0, r2, #5
 8008e40:	4602      	mov	r2, r0
 8008e42:	460b      	mov	r3, r1
 8008e44:	4641      	mov	r1, r8
 8008e46:	ebb2 0a01 	subs.w	sl, r2, r1
 8008e4a:	4649      	mov	r1, r9
 8008e4c:	eb63 0b01 	sbc.w	fp, r3, r1
 8008e50:	f04f 0200 	mov.w	r2, #0
 8008e54:	f04f 0300 	mov.w	r3, #0
 8008e58:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8008e5c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8008e60:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8008e64:	ebb2 040a 	subs.w	r4, r2, sl
 8008e68:	eb63 050b 	sbc.w	r5, r3, fp
 8008e6c:	f04f 0200 	mov.w	r2, #0
 8008e70:	f04f 0300 	mov.w	r3, #0
 8008e74:	00eb      	lsls	r3, r5, #3
 8008e76:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8008e7a:	00e2      	lsls	r2, r4, #3
 8008e7c:	4614      	mov	r4, r2
 8008e7e:	461d      	mov	r5, r3
 8008e80:	4643      	mov	r3, r8
 8008e82:	18e3      	adds	r3, r4, r3
 8008e84:	603b      	str	r3, [r7, #0]
 8008e86:	464b      	mov	r3, r9
 8008e88:	eb45 0303 	adc.w	r3, r5, r3
 8008e8c:	607b      	str	r3, [r7, #4]
 8008e8e:	f04f 0200 	mov.w	r2, #0
 8008e92:	f04f 0300 	mov.w	r3, #0
 8008e96:	e9d7 4500 	ldrd	r4, r5, [r7]
 8008e9a:	4629      	mov	r1, r5
 8008e9c:	028b      	lsls	r3, r1, #10
 8008e9e:	4621      	mov	r1, r4
 8008ea0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8008ea4:	4621      	mov	r1, r4
 8008ea6:	028a      	lsls	r2, r1, #10
 8008ea8:	4610      	mov	r0, r2
 8008eaa:	4619      	mov	r1, r3
 8008eac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008eae:	2200      	movs	r2, #0
 8008eb0:	61bb      	str	r3, [r7, #24]
 8008eb2:	61fa      	str	r2, [r7, #28]
 8008eb4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008eb8:	f7f7 f9ea 	bl	8000290 <__aeabi_uldivmod>
 8008ebc:	4602      	mov	r2, r0
 8008ebe:	460b      	mov	r3, r1
 8008ec0:	4613      	mov	r3, r2
 8008ec2:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8008ec4:	4b0b      	ldr	r3, [pc, #44]	; (8008ef4 <HAL_RCC_GetSysClockFreq+0x200>)
 8008ec6:	685b      	ldr	r3, [r3, #4]
 8008ec8:	0c1b      	lsrs	r3, r3, #16
 8008eca:	f003 0303 	and.w	r3, r3, #3
 8008ece:	3301      	adds	r3, #1
 8008ed0:	005b      	lsls	r3, r3, #1
 8008ed2:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8008ed4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8008ed6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008ed8:	fbb2 f3f3 	udiv	r3, r2, r3
 8008edc:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8008ede:	e002      	b.n	8008ee6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8008ee0:	4b05      	ldr	r3, [pc, #20]	; (8008ef8 <HAL_RCC_GetSysClockFreq+0x204>)
 8008ee2:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8008ee4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8008ee6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8008ee8:	4618      	mov	r0, r3
 8008eea:	3750      	adds	r7, #80	; 0x50
 8008eec:	46bd      	mov	sp, r7
 8008eee:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008ef2:	bf00      	nop
 8008ef4:	40023800 	.word	0x40023800
 8008ef8:	00f42400 	.word	0x00f42400
 8008efc:	007a1200 	.word	0x007a1200

08008f00 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008f00:	b480      	push	{r7}
 8008f02:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8008f04:	4b03      	ldr	r3, [pc, #12]	; (8008f14 <HAL_RCC_GetHCLKFreq+0x14>)
 8008f06:	681b      	ldr	r3, [r3, #0]
}
 8008f08:	4618      	mov	r0, r3
 8008f0a:	46bd      	mov	sp, r7
 8008f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f10:	4770      	bx	lr
 8008f12:	bf00      	nop
 8008f14:	20000004 	.word	0x20000004

08008f18 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008f18:	b580      	push	{r7, lr}
 8008f1a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8008f1c:	f7ff fff0 	bl	8008f00 <HAL_RCC_GetHCLKFreq>
 8008f20:	4602      	mov	r2, r0
 8008f22:	4b05      	ldr	r3, [pc, #20]	; (8008f38 <HAL_RCC_GetPCLK1Freq+0x20>)
 8008f24:	689b      	ldr	r3, [r3, #8]
 8008f26:	0a9b      	lsrs	r3, r3, #10
 8008f28:	f003 0307 	and.w	r3, r3, #7
 8008f2c:	4903      	ldr	r1, [pc, #12]	; (8008f3c <HAL_RCC_GetPCLK1Freq+0x24>)
 8008f2e:	5ccb      	ldrb	r3, [r1, r3]
 8008f30:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008f34:	4618      	mov	r0, r3
 8008f36:	bd80      	pop	{r7, pc}
 8008f38:	40023800 	.word	0x40023800
 8008f3c:	0800e224 	.word	0x0800e224

08008f40 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008f40:	b580      	push	{r7, lr}
 8008f42:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8008f44:	f7ff ffdc 	bl	8008f00 <HAL_RCC_GetHCLKFreq>
 8008f48:	4602      	mov	r2, r0
 8008f4a:	4b05      	ldr	r3, [pc, #20]	; (8008f60 <HAL_RCC_GetPCLK2Freq+0x20>)
 8008f4c:	689b      	ldr	r3, [r3, #8]
 8008f4e:	0b5b      	lsrs	r3, r3, #13
 8008f50:	f003 0307 	and.w	r3, r3, #7
 8008f54:	4903      	ldr	r1, [pc, #12]	; (8008f64 <HAL_RCC_GetPCLK2Freq+0x24>)
 8008f56:	5ccb      	ldrb	r3, [r1, r3]
 8008f58:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008f5c:	4618      	mov	r0, r3
 8008f5e:	bd80      	pop	{r7, pc}
 8008f60:	40023800 	.word	0x40023800
 8008f64:	0800e224 	.word	0x0800e224

08008f68 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8008f68:	b580      	push	{r7, lr}
 8008f6a:	b082      	sub	sp, #8
 8008f6c:	af00      	add	r7, sp, #0
 8008f6e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	2b00      	cmp	r3, #0
 8008f74:	d101      	bne.n	8008f7a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8008f76:	2301      	movs	r3, #1
 8008f78:	e07b      	b.n	8009072 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f7e:	2b00      	cmp	r3, #0
 8008f80:	d108      	bne.n	8008f94 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8008f82:	687b      	ldr	r3, [r7, #4]
 8008f84:	685b      	ldr	r3, [r3, #4]
 8008f86:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008f8a:	d009      	beq.n	8008fa0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	2200      	movs	r2, #0
 8008f90:	61da      	str	r2, [r3, #28]
 8008f92:	e005      	b.n	8008fa0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	2200      	movs	r2, #0
 8008f98:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8008f9a:	687b      	ldr	r3, [r7, #4]
 8008f9c:	2200      	movs	r2, #0
 8008f9e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	2200      	movs	r2, #0
 8008fa4:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008fac:	b2db      	uxtb	r3, r3
 8008fae:	2b00      	cmp	r3, #0
 8008fb0:	d106      	bne.n	8008fc0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8008fb2:	687b      	ldr	r3, [r7, #4]
 8008fb4:	2200      	movs	r2, #0
 8008fb6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8008fba:	6878      	ldr	r0, [r7, #4]
 8008fbc:	f7f8 fb7a 	bl	80016b4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	2202      	movs	r2, #2
 8008fc4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	681b      	ldr	r3, [r3, #0]
 8008fcc:	681a      	ldr	r2, [r3, #0]
 8008fce:	687b      	ldr	r3, [r7, #4]
 8008fd0:	681b      	ldr	r3, [r3, #0]
 8008fd2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008fd6:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	685b      	ldr	r3, [r3, #4]
 8008fdc:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	689b      	ldr	r3, [r3, #8]
 8008fe4:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8008fe8:	431a      	orrs	r2, r3
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	68db      	ldr	r3, [r3, #12]
 8008fee:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008ff2:	431a      	orrs	r2, r3
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	691b      	ldr	r3, [r3, #16]
 8008ff8:	f003 0302 	and.w	r3, r3, #2
 8008ffc:	431a      	orrs	r2, r3
 8008ffe:	687b      	ldr	r3, [r7, #4]
 8009000:	695b      	ldr	r3, [r3, #20]
 8009002:	f003 0301 	and.w	r3, r3, #1
 8009006:	431a      	orrs	r2, r3
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	699b      	ldr	r3, [r3, #24]
 800900c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009010:	431a      	orrs	r2, r3
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	69db      	ldr	r3, [r3, #28]
 8009016:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800901a:	431a      	orrs	r2, r3
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	6a1b      	ldr	r3, [r3, #32]
 8009020:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009024:	ea42 0103 	orr.w	r1, r2, r3
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800902c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	681b      	ldr	r3, [r3, #0]
 8009034:	430a      	orrs	r2, r1
 8009036:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	699b      	ldr	r3, [r3, #24]
 800903c:	0c1b      	lsrs	r3, r3, #16
 800903e:	f003 0104 	and.w	r1, r3, #4
 8009042:	687b      	ldr	r3, [r7, #4]
 8009044:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009046:	f003 0210 	and.w	r2, r3, #16
 800904a:	687b      	ldr	r3, [r7, #4]
 800904c:	681b      	ldr	r3, [r3, #0]
 800904e:	430a      	orrs	r2, r1
 8009050:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	681b      	ldr	r3, [r3, #0]
 8009056:	69da      	ldr	r2, [r3, #28]
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	681b      	ldr	r3, [r3, #0]
 800905c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8009060:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8009062:	687b      	ldr	r3, [r7, #4]
 8009064:	2200      	movs	r2, #0
 8009066:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8009068:	687b      	ldr	r3, [r7, #4]
 800906a:	2201      	movs	r2, #1
 800906c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8009070:	2300      	movs	r3, #0
}
 8009072:	4618      	mov	r0, r3
 8009074:	3708      	adds	r7, #8
 8009076:	46bd      	mov	sp, r7
 8009078:	bd80      	pop	{r7, pc}

0800907a <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800907a:	b580      	push	{r7, lr}
 800907c:	b088      	sub	sp, #32
 800907e:	af00      	add	r7, sp, #0
 8009080:	60f8      	str	r0, [r7, #12]
 8009082:	60b9      	str	r1, [r7, #8]
 8009084:	603b      	str	r3, [r7, #0]
 8009086:	4613      	mov	r3, r2
 8009088:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800908a:	2300      	movs	r3, #0
 800908c:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800908e:	68fb      	ldr	r3, [r7, #12]
 8009090:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8009094:	2b01      	cmp	r3, #1
 8009096:	d101      	bne.n	800909c <HAL_SPI_Transmit+0x22>
 8009098:	2302      	movs	r3, #2
 800909a:	e126      	b.n	80092ea <HAL_SPI_Transmit+0x270>
 800909c:	68fb      	ldr	r3, [r7, #12]
 800909e:	2201      	movs	r2, #1
 80090a0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80090a4:	f7fd fe70 	bl	8006d88 <HAL_GetTick>
 80090a8:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80090aa:	88fb      	ldrh	r3, [r7, #6]
 80090ac:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80090ae:	68fb      	ldr	r3, [r7, #12]
 80090b0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80090b4:	b2db      	uxtb	r3, r3
 80090b6:	2b01      	cmp	r3, #1
 80090b8:	d002      	beq.n	80090c0 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80090ba:	2302      	movs	r3, #2
 80090bc:	77fb      	strb	r3, [r7, #31]
    goto error;
 80090be:	e10b      	b.n	80092d8 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 80090c0:	68bb      	ldr	r3, [r7, #8]
 80090c2:	2b00      	cmp	r3, #0
 80090c4:	d002      	beq.n	80090cc <HAL_SPI_Transmit+0x52>
 80090c6:	88fb      	ldrh	r3, [r7, #6]
 80090c8:	2b00      	cmp	r3, #0
 80090ca:	d102      	bne.n	80090d2 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80090cc:	2301      	movs	r3, #1
 80090ce:	77fb      	strb	r3, [r7, #31]
    goto error;
 80090d0:	e102      	b.n	80092d8 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80090d2:	68fb      	ldr	r3, [r7, #12]
 80090d4:	2203      	movs	r2, #3
 80090d6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80090da:	68fb      	ldr	r3, [r7, #12]
 80090dc:	2200      	movs	r2, #0
 80090de:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80090e0:	68fb      	ldr	r3, [r7, #12]
 80090e2:	68ba      	ldr	r2, [r7, #8]
 80090e4:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80090e6:	68fb      	ldr	r3, [r7, #12]
 80090e8:	88fa      	ldrh	r2, [r7, #6]
 80090ea:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80090ec:	68fb      	ldr	r3, [r7, #12]
 80090ee:	88fa      	ldrh	r2, [r7, #6]
 80090f0:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80090f2:	68fb      	ldr	r3, [r7, #12]
 80090f4:	2200      	movs	r2, #0
 80090f6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80090f8:	68fb      	ldr	r3, [r7, #12]
 80090fa:	2200      	movs	r2, #0
 80090fc:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80090fe:	68fb      	ldr	r3, [r7, #12]
 8009100:	2200      	movs	r2, #0
 8009102:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8009104:	68fb      	ldr	r3, [r7, #12]
 8009106:	2200      	movs	r2, #0
 8009108:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800910a:	68fb      	ldr	r3, [r7, #12]
 800910c:	2200      	movs	r2, #0
 800910e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009110:	68fb      	ldr	r3, [r7, #12]
 8009112:	689b      	ldr	r3, [r3, #8]
 8009114:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009118:	d10f      	bne.n	800913a <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800911a:	68fb      	ldr	r3, [r7, #12]
 800911c:	681b      	ldr	r3, [r3, #0]
 800911e:	681a      	ldr	r2, [r3, #0]
 8009120:	68fb      	ldr	r3, [r7, #12]
 8009122:	681b      	ldr	r3, [r3, #0]
 8009124:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009128:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800912a:	68fb      	ldr	r3, [r7, #12]
 800912c:	681b      	ldr	r3, [r3, #0]
 800912e:	681a      	ldr	r2, [r3, #0]
 8009130:	68fb      	ldr	r3, [r7, #12]
 8009132:	681b      	ldr	r3, [r3, #0]
 8009134:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8009138:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800913a:	68fb      	ldr	r3, [r7, #12]
 800913c:	681b      	ldr	r3, [r3, #0]
 800913e:	681b      	ldr	r3, [r3, #0]
 8009140:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009144:	2b40      	cmp	r3, #64	; 0x40
 8009146:	d007      	beq.n	8009158 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8009148:	68fb      	ldr	r3, [r7, #12]
 800914a:	681b      	ldr	r3, [r3, #0]
 800914c:	681a      	ldr	r2, [r3, #0]
 800914e:	68fb      	ldr	r3, [r7, #12]
 8009150:	681b      	ldr	r3, [r3, #0]
 8009152:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009156:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8009158:	68fb      	ldr	r3, [r7, #12]
 800915a:	68db      	ldr	r3, [r3, #12]
 800915c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009160:	d14b      	bne.n	80091fa <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8009162:	68fb      	ldr	r3, [r7, #12]
 8009164:	685b      	ldr	r3, [r3, #4]
 8009166:	2b00      	cmp	r3, #0
 8009168:	d002      	beq.n	8009170 <HAL_SPI_Transmit+0xf6>
 800916a:	8afb      	ldrh	r3, [r7, #22]
 800916c:	2b01      	cmp	r3, #1
 800916e:	d13e      	bne.n	80091ee <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009170:	68fb      	ldr	r3, [r7, #12]
 8009172:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009174:	881a      	ldrh	r2, [r3, #0]
 8009176:	68fb      	ldr	r3, [r7, #12]
 8009178:	681b      	ldr	r3, [r3, #0]
 800917a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800917c:	68fb      	ldr	r3, [r7, #12]
 800917e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009180:	1c9a      	adds	r2, r3, #2
 8009182:	68fb      	ldr	r3, [r7, #12]
 8009184:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8009186:	68fb      	ldr	r3, [r7, #12]
 8009188:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800918a:	b29b      	uxth	r3, r3
 800918c:	3b01      	subs	r3, #1
 800918e:	b29a      	uxth	r2, r3
 8009190:	68fb      	ldr	r3, [r7, #12]
 8009192:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8009194:	e02b      	b.n	80091ee <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8009196:	68fb      	ldr	r3, [r7, #12]
 8009198:	681b      	ldr	r3, [r3, #0]
 800919a:	689b      	ldr	r3, [r3, #8]
 800919c:	f003 0302 	and.w	r3, r3, #2
 80091a0:	2b02      	cmp	r3, #2
 80091a2:	d112      	bne.n	80091ca <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80091a4:	68fb      	ldr	r3, [r7, #12]
 80091a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80091a8:	881a      	ldrh	r2, [r3, #0]
 80091aa:	68fb      	ldr	r3, [r7, #12]
 80091ac:	681b      	ldr	r3, [r3, #0]
 80091ae:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80091b0:	68fb      	ldr	r3, [r7, #12]
 80091b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80091b4:	1c9a      	adds	r2, r3, #2
 80091b6:	68fb      	ldr	r3, [r7, #12]
 80091b8:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80091ba:	68fb      	ldr	r3, [r7, #12]
 80091bc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80091be:	b29b      	uxth	r3, r3
 80091c0:	3b01      	subs	r3, #1
 80091c2:	b29a      	uxth	r2, r3
 80091c4:	68fb      	ldr	r3, [r7, #12]
 80091c6:	86da      	strh	r2, [r3, #54]	; 0x36
 80091c8:	e011      	b.n	80091ee <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80091ca:	f7fd fddd 	bl	8006d88 <HAL_GetTick>
 80091ce:	4602      	mov	r2, r0
 80091d0:	69bb      	ldr	r3, [r7, #24]
 80091d2:	1ad3      	subs	r3, r2, r3
 80091d4:	683a      	ldr	r2, [r7, #0]
 80091d6:	429a      	cmp	r2, r3
 80091d8:	d803      	bhi.n	80091e2 <HAL_SPI_Transmit+0x168>
 80091da:	683b      	ldr	r3, [r7, #0]
 80091dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80091e0:	d102      	bne.n	80091e8 <HAL_SPI_Transmit+0x16e>
 80091e2:	683b      	ldr	r3, [r7, #0]
 80091e4:	2b00      	cmp	r3, #0
 80091e6:	d102      	bne.n	80091ee <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 80091e8:	2303      	movs	r3, #3
 80091ea:	77fb      	strb	r3, [r7, #31]
          goto error;
 80091ec:	e074      	b.n	80092d8 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80091ee:	68fb      	ldr	r3, [r7, #12]
 80091f0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80091f2:	b29b      	uxth	r3, r3
 80091f4:	2b00      	cmp	r3, #0
 80091f6:	d1ce      	bne.n	8009196 <HAL_SPI_Transmit+0x11c>
 80091f8:	e04c      	b.n	8009294 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80091fa:	68fb      	ldr	r3, [r7, #12]
 80091fc:	685b      	ldr	r3, [r3, #4]
 80091fe:	2b00      	cmp	r3, #0
 8009200:	d002      	beq.n	8009208 <HAL_SPI_Transmit+0x18e>
 8009202:	8afb      	ldrh	r3, [r7, #22]
 8009204:	2b01      	cmp	r3, #1
 8009206:	d140      	bne.n	800928a <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8009208:	68fb      	ldr	r3, [r7, #12]
 800920a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800920c:	68fb      	ldr	r3, [r7, #12]
 800920e:	681b      	ldr	r3, [r3, #0]
 8009210:	330c      	adds	r3, #12
 8009212:	7812      	ldrb	r2, [r2, #0]
 8009214:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8009216:	68fb      	ldr	r3, [r7, #12]
 8009218:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800921a:	1c5a      	adds	r2, r3, #1
 800921c:	68fb      	ldr	r3, [r7, #12]
 800921e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8009220:	68fb      	ldr	r3, [r7, #12]
 8009222:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009224:	b29b      	uxth	r3, r3
 8009226:	3b01      	subs	r3, #1
 8009228:	b29a      	uxth	r2, r3
 800922a:	68fb      	ldr	r3, [r7, #12]
 800922c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800922e:	e02c      	b.n	800928a <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8009230:	68fb      	ldr	r3, [r7, #12]
 8009232:	681b      	ldr	r3, [r3, #0]
 8009234:	689b      	ldr	r3, [r3, #8]
 8009236:	f003 0302 	and.w	r3, r3, #2
 800923a:	2b02      	cmp	r3, #2
 800923c:	d113      	bne.n	8009266 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800923e:	68fb      	ldr	r3, [r7, #12]
 8009240:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009242:	68fb      	ldr	r3, [r7, #12]
 8009244:	681b      	ldr	r3, [r3, #0]
 8009246:	330c      	adds	r3, #12
 8009248:	7812      	ldrb	r2, [r2, #0]
 800924a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800924c:	68fb      	ldr	r3, [r7, #12]
 800924e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009250:	1c5a      	adds	r2, r3, #1
 8009252:	68fb      	ldr	r3, [r7, #12]
 8009254:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8009256:	68fb      	ldr	r3, [r7, #12]
 8009258:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800925a:	b29b      	uxth	r3, r3
 800925c:	3b01      	subs	r3, #1
 800925e:	b29a      	uxth	r2, r3
 8009260:	68fb      	ldr	r3, [r7, #12]
 8009262:	86da      	strh	r2, [r3, #54]	; 0x36
 8009264:	e011      	b.n	800928a <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009266:	f7fd fd8f 	bl	8006d88 <HAL_GetTick>
 800926a:	4602      	mov	r2, r0
 800926c:	69bb      	ldr	r3, [r7, #24]
 800926e:	1ad3      	subs	r3, r2, r3
 8009270:	683a      	ldr	r2, [r7, #0]
 8009272:	429a      	cmp	r2, r3
 8009274:	d803      	bhi.n	800927e <HAL_SPI_Transmit+0x204>
 8009276:	683b      	ldr	r3, [r7, #0]
 8009278:	f1b3 3fff 	cmp.w	r3, #4294967295
 800927c:	d102      	bne.n	8009284 <HAL_SPI_Transmit+0x20a>
 800927e:	683b      	ldr	r3, [r7, #0]
 8009280:	2b00      	cmp	r3, #0
 8009282:	d102      	bne.n	800928a <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8009284:	2303      	movs	r3, #3
 8009286:	77fb      	strb	r3, [r7, #31]
          goto error;
 8009288:	e026      	b.n	80092d8 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800928a:	68fb      	ldr	r3, [r7, #12]
 800928c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800928e:	b29b      	uxth	r3, r3
 8009290:	2b00      	cmp	r3, #0
 8009292:	d1cd      	bne.n	8009230 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8009294:	69ba      	ldr	r2, [r7, #24]
 8009296:	6839      	ldr	r1, [r7, #0]
 8009298:	68f8      	ldr	r0, [r7, #12]
 800929a:	f000 fa55 	bl	8009748 <SPI_EndRxTxTransaction>
 800929e:	4603      	mov	r3, r0
 80092a0:	2b00      	cmp	r3, #0
 80092a2:	d002      	beq.n	80092aa <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80092a4:	68fb      	ldr	r3, [r7, #12]
 80092a6:	2220      	movs	r2, #32
 80092a8:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80092aa:	68fb      	ldr	r3, [r7, #12]
 80092ac:	689b      	ldr	r3, [r3, #8]
 80092ae:	2b00      	cmp	r3, #0
 80092b0:	d10a      	bne.n	80092c8 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80092b2:	2300      	movs	r3, #0
 80092b4:	613b      	str	r3, [r7, #16]
 80092b6:	68fb      	ldr	r3, [r7, #12]
 80092b8:	681b      	ldr	r3, [r3, #0]
 80092ba:	68db      	ldr	r3, [r3, #12]
 80092bc:	613b      	str	r3, [r7, #16]
 80092be:	68fb      	ldr	r3, [r7, #12]
 80092c0:	681b      	ldr	r3, [r3, #0]
 80092c2:	689b      	ldr	r3, [r3, #8]
 80092c4:	613b      	str	r3, [r7, #16]
 80092c6:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80092c8:	68fb      	ldr	r3, [r7, #12]
 80092ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80092cc:	2b00      	cmp	r3, #0
 80092ce:	d002      	beq.n	80092d6 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 80092d0:	2301      	movs	r3, #1
 80092d2:	77fb      	strb	r3, [r7, #31]
 80092d4:	e000      	b.n	80092d8 <HAL_SPI_Transmit+0x25e>
  }

error:
 80092d6:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80092d8:	68fb      	ldr	r3, [r7, #12]
 80092da:	2201      	movs	r2, #1
 80092dc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80092e0:	68fb      	ldr	r3, [r7, #12]
 80092e2:	2200      	movs	r2, #0
 80092e4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80092e8:	7ffb      	ldrb	r3, [r7, #31]
}
 80092ea:	4618      	mov	r0, r3
 80092ec:	3720      	adds	r7, #32
 80092ee:	46bd      	mov	sp, r7
 80092f0:	bd80      	pop	{r7, pc}

080092f2 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80092f2:	b580      	push	{r7, lr}
 80092f4:	b08c      	sub	sp, #48	; 0x30
 80092f6:	af00      	add	r7, sp, #0
 80092f8:	60f8      	str	r0, [r7, #12]
 80092fa:	60b9      	str	r1, [r7, #8]
 80092fc:	607a      	str	r2, [r7, #4]
 80092fe:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8009300:	2301      	movs	r3, #1
 8009302:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8009304:	2300      	movs	r3, #0
 8009306:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800930a:	68fb      	ldr	r3, [r7, #12]
 800930c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8009310:	2b01      	cmp	r3, #1
 8009312:	d101      	bne.n	8009318 <HAL_SPI_TransmitReceive+0x26>
 8009314:	2302      	movs	r3, #2
 8009316:	e18a      	b.n	800962e <HAL_SPI_TransmitReceive+0x33c>
 8009318:	68fb      	ldr	r3, [r7, #12]
 800931a:	2201      	movs	r2, #1
 800931c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8009320:	f7fd fd32 	bl	8006d88 <HAL_GetTick>
 8009324:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8009326:	68fb      	ldr	r3, [r7, #12]
 8009328:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800932c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8009330:	68fb      	ldr	r3, [r7, #12]
 8009332:	685b      	ldr	r3, [r3, #4]
 8009334:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8009336:	887b      	ldrh	r3, [r7, #2]
 8009338:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800933a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800933e:	2b01      	cmp	r3, #1
 8009340:	d00f      	beq.n	8009362 <HAL_SPI_TransmitReceive+0x70>
 8009342:	69fb      	ldr	r3, [r7, #28]
 8009344:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009348:	d107      	bne.n	800935a <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800934a:	68fb      	ldr	r3, [r7, #12]
 800934c:	689b      	ldr	r3, [r3, #8]
 800934e:	2b00      	cmp	r3, #0
 8009350:	d103      	bne.n	800935a <HAL_SPI_TransmitReceive+0x68>
 8009352:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8009356:	2b04      	cmp	r3, #4
 8009358:	d003      	beq.n	8009362 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 800935a:	2302      	movs	r3, #2
 800935c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8009360:	e15b      	b.n	800961a <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8009362:	68bb      	ldr	r3, [r7, #8]
 8009364:	2b00      	cmp	r3, #0
 8009366:	d005      	beq.n	8009374 <HAL_SPI_TransmitReceive+0x82>
 8009368:	687b      	ldr	r3, [r7, #4]
 800936a:	2b00      	cmp	r3, #0
 800936c:	d002      	beq.n	8009374 <HAL_SPI_TransmitReceive+0x82>
 800936e:	887b      	ldrh	r3, [r7, #2]
 8009370:	2b00      	cmp	r3, #0
 8009372:	d103      	bne.n	800937c <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8009374:	2301      	movs	r3, #1
 8009376:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800937a:	e14e      	b.n	800961a <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800937c:	68fb      	ldr	r3, [r7, #12]
 800937e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8009382:	b2db      	uxtb	r3, r3
 8009384:	2b04      	cmp	r3, #4
 8009386:	d003      	beq.n	8009390 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8009388:	68fb      	ldr	r3, [r7, #12]
 800938a:	2205      	movs	r2, #5
 800938c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8009390:	68fb      	ldr	r3, [r7, #12]
 8009392:	2200      	movs	r2, #0
 8009394:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8009396:	68fb      	ldr	r3, [r7, #12]
 8009398:	687a      	ldr	r2, [r7, #4]
 800939a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800939c:	68fb      	ldr	r3, [r7, #12]
 800939e:	887a      	ldrh	r2, [r7, #2]
 80093a0:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 80093a2:	68fb      	ldr	r3, [r7, #12]
 80093a4:	887a      	ldrh	r2, [r7, #2]
 80093a6:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80093a8:	68fb      	ldr	r3, [r7, #12]
 80093aa:	68ba      	ldr	r2, [r7, #8]
 80093ac:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 80093ae:	68fb      	ldr	r3, [r7, #12]
 80093b0:	887a      	ldrh	r2, [r7, #2]
 80093b2:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 80093b4:	68fb      	ldr	r3, [r7, #12]
 80093b6:	887a      	ldrh	r2, [r7, #2]
 80093b8:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80093ba:	68fb      	ldr	r3, [r7, #12]
 80093bc:	2200      	movs	r2, #0
 80093be:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80093c0:	68fb      	ldr	r3, [r7, #12]
 80093c2:	2200      	movs	r2, #0
 80093c4:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80093c6:	68fb      	ldr	r3, [r7, #12]
 80093c8:	681b      	ldr	r3, [r3, #0]
 80093ca:	681b      	ldr	r3, [r3, #0]
 80093cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80093d0:	2b40      	cmp	r3, #64	; 0x40
 80093d2:	d007      	beq.n	80093e4 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80093d4:	68fb      	ldr	r3, [r7, #12]
 80093d6:	681b      	ldr	r3, [r3, #0]
 80093d8:	681a      	ldr	r2, [r3, #0]
 80093da:	68fb      	ldr	r3, [r7, #12]
 80093dc:	681b      	ldr	r3, [r3, #0]
 80093de:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80093e2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80093e4:	68fb      	ldr	r3, [r7, #12]
 80093e6:	68db      	ldr	r3, [r3, #12]
 80093e8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80093ec:	d178      	bne.n	80094e0 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80093ee:	68fb      	ldr	r3, [r7, #12]
 80093f0:	685b      	ldr	r3, [r3, #4]
 80093f2:	2b00      	cmp	r3, #0
 80093f4:	d002      	beq.n	80093fc <HAL_SPI_TransmitReceive+0x10a>
 80093f6:	8b7b      	ldrh	r3, [r7, #26]
 80093f8:	2b01      	cmp	r3, #1
 80093fa:	d166      	bne.n	80094ca <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80093fc:	68fb      	ldr	r3, [r7, #12]
 80093fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009400:	881a      	ldrh	r2, [r3, #0]
 8009402:	68fb      	ldr	r3, [r7, #12]
 8009404:	681b      	ldr	r3, [r3, #0]
 8009406:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8009408:	68fb      	ldr	r3, [r7, #12]
 800940a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800940c:	1c9a      	adds	r2, r3, #2
 800940e:	68fb      	ldr	r3, [r7, #12]
 8009410:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8009412:	68fb      	ldr	r3, [r7, #12]
 8009414:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009416:	b29b      	uxth	r3, r3
 8009418:	3b01      	subs	r3, #1
 800941a:	b29a      	uxth	r2, r3
 800941c:	68fb      	ldr	r3, [r7, #12]
 800941e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009420:	e053      	b.n	80094ca <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8009422:	68fb      	ldr	r3, [r7, #12]
 8009424:	681b      	ldr	r3, [r3, #0]
 8009426:	689b      	ldr	r3, [r3, #8]
 8009428:	f003 0302 	and.w	r3, r3, #2
 800942c:	2b02      	cmp	r3, #2
 800942e:	d11b      	bne.n	8009468 <HAL_SPI_TransmitReceive+0x176>
 8009430:	68fb      	ldr	r3, [r7, #12]
 8009432:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009434:	b29b      	uxth	r3, r3
 8009436:	2b00      	cmp	r3, #0
 8009438:	d016      	beq.n	8009468 <HAL_SPI_TransmitReceive+0x176>
 800943a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800943c:	2b01      	cmp	r3, #1
 800943e:	d113      	bne.n	8009468 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009440:	68fb      	ldr	r3, [r7, #12]
 8009442:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009444:	881a      	ldrh	r2, [r3, #0]
 8009446:	68fb      	ldr	r3, [r7, #12]
 8009448:	681b      	ldr	r3, [r3, #0]
 800944a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800944c:	68fb      	ldr	r3, [r7, #12]
 800944e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009450:	1c9a      	adds	r2, r3, #2
 8009452:	68fb      	ldr	r3, [r7, #12]
 8009454:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8009456:	68fb      	ldr	r3, [r7, #12]
 8009458:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800945a:	b29b      	uxth	r3, r3
 800945c:	3b01      	subs	r3, #1
 800945e:	b29a      	uxth	r2, r3
 8009460:	68fb      	ldr	r3, [r7, #12]
 8009462:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8009464:	2300      	movs	r3, #0
 8009466:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8009468:	68fb      	ldr	r3, [r7, #12]
 800946a:	681b      	ldr	r3, [r3, #0]
 800946c:	689b      	ldr	r3, [r3, #8]
 800946e:	f003 0301 	and.w	r3, r3, #1
 8009472:	2b01      	cmp	r3, #1
 8009474:	d119      	bne.n	80094aa <HAL_SPI_TransmitReceive+0x1b8>
 8009476:	68fb      	ldr	r3, [r7, #12]
 8009478:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800947a:	b29b      	uxth	r3, r3
 800947c:	2b00      	cmp	r3, #0
 800947e:	d014      	beq.n	80094aa <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8009480:	68fb      	ldr	r3, [r7, #12]
 8009482:	681b      	ldr	r3, [r3, #0]
 8009484:	68da      	ldr	r2, [r3, #12]
 8009486:	68fb      	ldr	r3, [r7, #12]
 8009488:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800948a:	b292      	uxth	r2, r2
 800948c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800948e:	68fb      	ldr	r3, [r7, #12]
 8009490:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009492:	1c9a      	adds	r2, r3, #2
 8009494:	68fb      	ldr	r3, [r7, #12]
 8009496:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8009498:	68fb      	ldr	r3, [r7, #12]
 800949a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800949c:	b29b      	uxth	r3, r3
 800949e:	3b01      	subs	r3, #1
 80094a0:	b29a      	uxth	r2, r3
 80094a2:	68fb      	ldr	r3, [r7, #12]
 80094a4:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80094a6:	2301      	movs	r3, #1
 80094a8:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80094aa:	f7fd fc6d 	bl	8006d88 <HAL_GetTick>
 80094ae:	4602      	mov	r2, r0
 80094b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80094b2:	1ad3      	subs	r3, r2, r3
 80094b4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80094b6:	429a      	cmp	r2, r3
 80094b8:	d807      	bhi.n	80094ca <HAL_SPI_TransmitReceive+0x1d8>
 80094ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80094bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80094c0:	d003      	beq.n	80094ca <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 80094c2:	2303      	movs	r3, #3
 80094c4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80094c8:	e0a7      	b.n	800961a <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80094ca:	68fb      	ldr	r3, [r7, #12]
 80094cc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80094ce:	b29b      	uxth	r3, r3
 80094d0:	2b00      	cmp	r3, #0
 80094d2:	d1a6      	bne.n	8009422 <HAL_SPI_TransmitReceive+0x130>
 80094d4:	68fb      	ldr	r3, [r7, #12]
 80094d6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80094d8:	b29b      	uxth	r3, r3
 80094da:	2b00      	cmp	r3, #0
 80094dc:	d1a1      	bne.n	8009422 <HAL_SPI_TransmitReceive+0x130>
 80094de:	e07c      	b.n	80095da <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80094e0:	68fb      	ldr	r3, [r7, #12]
 80094e2:	685b      	ldr	r3, [r3, #4]
 80094e4:	2b00      	cmp	r3, #0
 80094e6:	d002      	beq.n	80094ee <HAL_SPI_TransmitReceive+0x1fc>
 80094e8:	8b7b      	ldrh	r3, [r7, #26]
 80094ea:	2b01      	cmp	r3, #1
 80094ec:	d16b      	bne.n	80095c6 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80094ee:	68fb      	ldr	r3, [r7, #12]
 80094f0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80094f2:	68fb      	ldr	r3, [r7, #12]
 80094f4:	681b      	ldr	r3, [r3, #0]
 80094f6:	330c      	adds	r3, #12
 80094f8:	7812      	ldrb	r2, [r2, #0]
 80094fa:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80094fc:	68fb      	ldr	r3, [r7, #12]
 80094fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009500:	1c5a      	adds	r2, r3, #1
 8009502:	68fb      	ldr	r3, [r7, #12]
 8009504:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8009506:	68fb      	ldr	r3, [r7, #12]
 8009508:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800950a:	b29b      	uxth	r3, r3
 800950c:	3b01      	subs	r3, #1
 800950e:	b29a      	uxth	r2, r3
 8009510:	68fb      	ldr	r3, [r7, #12]
 8009512:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009514:	e057      	b.n	80095c6 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8009516:	68fb      	ldr	r3, [r7, #12]
 8009518:	681b      	ldr	r3, [r3, #0]
 800951a:	689b      	ldr	r3, [r3, #8]
 800951c:	f003 0302 	and.w	r3, r3, #2
 8009520:	2b02      	cmp	r3, #2
 8009522:	d11c      	bne.n	800955e <HAL_SPI_TransmitReceive+0x26c>
 8009524:	68fb      	ldr	r3, [r7, #12]
 8009526:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009528:	b29b      	uxth	r3, r3
 800952a:	2b00      	cmp	r3, #0
 800952c:	d017      	beq.n	800955e <HAL_SPI_TransmitReceive+0x26c>
 800952e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009530:	2b01      	cmp	r3, #1
 8009532:	d114      	bne.n	800955e <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8009534:	68fb      	ldr	r3, [r7, #12]
 8009536:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009538:	68fb      	ldr	r3, [r7, #12]
 800953a:	681b      	ldr	r3, [r3, #0]
 800953c:	330c      	adds	r3, #12
 800953e:	7812      	ldrb	r2, [r2, #0]
 8009540:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8009542:	68fb      	ldr	r3, [r7, #12]
 8009544:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009546:	1c5a      	adds	r2, r3, #1
 8009548:	68fb      	ldr	r3, [r7, #12]
 800954a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800954c:	68fb      	ldr	r3, [r7, #12]
 800954e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009550:	b29b      	uxth	r3, r3
 8009552:	3b01      	subs	r3, #1
 8009554:	b29a      	uxth	r2, r3
 8009556:	68fb      	ldr	r3, [r7, #12]
 8009558:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800955a:	2300      	movs	r3, #0
 800955c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800955e:	68fb      	ldr	r3, [r7, #12]
 8009560:	681b      	ldr	r3, [r3, #0]
 8009562:	689b      	ldr	r3, [r3, #8]
 8009564:	f003 0301 	and.w	r3, r3, #1
 8009568:	2b01      	cmp	r3, #1
 800956a:	d119      	bne.n	80095a0 <HAL_SPI_TransmitReceive+0x2ae>
 800956c:	68fb      	ldr	r3, [r7, #12]
 800956e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009570:	b29b      	uxth	r3, r3
 8009572:	2b00      	cmp	r3, #0
 8009574:	d014      	beq.n	80095a0 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8009576:	68fb      	ldr	r3, [r7, #12]
 8009578:	681b      	ldr	r3, [r3, #0]
 800957a:	68da      	ldr	r2, [r3, #12]
 800957c:	68fb      	ldr	r3, [r7, #12]
 800957e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009580:	b2d2      	uxtb	r2, r2
 8009582:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8009584:	68fb      	ldr	r3, [r7, #12]
 8009586:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009588:	1c5a      	adds	r2, r3, #1
 800958a:	68fb      	ldr	r3, [r7, #12]
 800958c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800958e:	68fb      	ldr	r3, [r7, #12]
 8009590:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009592:	b29b      	uxth	r3, r3
 8009594:	3b01      	subs	r3, #1
 8009596:	b29a      	uxth	r2, r3
 8009598:	68fb      	ldr	r3, [r7, #12]
 800959a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800959c:	2301      	movs	r3, #1
 800959e:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80095a0:	f7fd fbf2 	bl	8006d88 <HAL_GetTick>
 80095a4:	4602      	mov	r2, r0
 80095a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095a8:	1ad3      	subs	r3, r2, r3
 80095aa:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80095ac:	429a      	cmp	r2, r3
 80095ae:	d803      	bhi.n	80095b8 <HAL_SPI_TransmitReceive+0x2c6>
 80095b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80095b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80095b6:	d102      	bne.n	80095be <HAL_SPI_TransmitReceive+0x2cc>
 80095b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80095ba:	2b00      	cmp	r3, #0
 80095bc:	d103      	bne.n	80095c6 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 80095be:	2303      	movs	r3, #3
 80095c0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80095c4:	e029      	b.n	800961a <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80095c6:	68fb      	ldr	r3, [r7, #12]
 80095c8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80095ca:	b29b      	uxth	r3, r3
 80095cc:	2b00      	cmp	r3, #0
 80095ce:	d1a2      	bne.n	8009516 <HAL_SPI_TransmitReceive+0x224>
 80095d0:	68fb      	ldr	r3, [r7, #12]
 80095d2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80095d4:	b29b      	uxth	r3, r3
 80095d6:	2b00      	cmp	r3, #0
 80095d8:	d19d      	bne.n	8009516 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80095da:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80095dc:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80095de:	68f8      	ldr	r0, [r7, #12]
 80095e0:	f000 f8b2 	bl	8009748 <SPI_EndRxTxTransaction>
 80095e4:	4603      	mov	r3, r0
 80095e6:	2b00      	cmp	r3, #0
 80095e8:	d006      	beq.n	80095f8 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 80095ea:	2301      	movs	r3, #1
 80095ec:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80095f0:	68fb      	ldr	r3, [r7, #12]
 80095f2:	2220      	movs	r2, #32
 80095f4:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 80095f6:	e010      	b.n	800961a <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80095f8:	68fb      	ldr	r3, [r7, #12]
 80095fa:	689b      	ldr	r3, [r3, #8]
 80095fc:	2b00      	cmp	r3, #0
 80095fe:	d10b      	bne.n	8009618 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8009600:	2300      	movs	r3, #0
 8009602:	617b      	str	r3, [r7, #20]
 8009604:	68fb      	ldr	r3, [r7, #12]
 8009606:	681b      	ldr	r3, [r3, #0]
 8009608:	68db      	ldr	r3, [r3, #12]
 800960a:	617b      	str	r3, [r7, #20]
 800960c:	68fb      	ldr	r3, [r7, #12]
 800960e:	681b      	ldr	r3, [r3, #0]
 8009610:	689b      	ldr	r3, [r3, #8]
 8009612:	617b      	str	r3, [r7, #20]
 8009614:	697b      	ldr	r3, [r7, #20]
 8009616:	e000      	b.n	800961a <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8009618:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800961a:	68fb      	ldr	r3, [r7, #12]
 800961c:	2201      	movs	r2, #1
 800961e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8009622:	68fb      	ldr	r3, [r7, #12]
 8009624:	2200      	movs	r2, #0
 8009626:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800962a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800962e:	4618      	mov	r0, r3
 8009630:	3730      	adds	r7, #48	; 0x30
 8009632:	46bd      	mov	sp, r7
 8009634:	bd80      	pop	{r7, pc}
	...

08009638 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8009638:	b580      	push	{r7, lr}
 800963a:	b088      	sub	sp, #32
 800963c:	af00      	add	r7, sp, #0
 800963e:	60f8      	str	r0, [r7, #12]
 8009640:	60b9      	str	r1, [r7, #8]
 8009642:	603b      	str	r3, [r7, #0]
 8009644:	4613      	mov	r3, r2
 8009646:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8009648:	f7fd fb9e 	bl	8006d88 <HAL_GetTick>
 800964c:	4602      	mov	r2, r0
 800964e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009650:	1a9b      	subs	r3, r3, r2
 8009652:	683a      	ldr	r2, [r7, #0]
 8009654:	4413      	add	r3, r2
 8009656:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8009658:	f7fd fb96 	bl	8006d88 <HAL_GetTick>
 800965c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800965e:	4b39      	ldr	r3, [pc, #228]	; (8009744 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8009660:	681b      	ldr	r3, [r3, #0]
 8009662:	015b      	lsls	r3, r3, #5
 8009664:	0d1b      	lsrs	r3, r3, #20
 8009666:	69fa      	ldr	r2, [r7, #28]
 8009668:	fb02 f303 	mul.w	r3, r2, r3
 800966c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800966e:	e054      	b.n	800971a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8009670:	683b      	ldr	r3, [r7, #0]
 8009672:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009676:	d050      	beq.n	800971a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8009678:	f7fd fb86 	bl	8006d88 <HAL_GetTick>
 800967c:	4602      	mov	r2, r0
 800967e:	69bb      	ldr	r3, [r7, #24]
 8009680:	1ad3      	subs	r3, r2, r3
 8009682:	69fa      	ldr	r2, [r7, #28]
 8009684:	429a      	cmp	r2, r3
 8009686:	d902      	bls.n	800968e <SPI_WaitFlagStateUntilTimeout+0x56>
 8009688:	69fb      	ldr	r3, [r7, #28]
 800968a:	2b00      	cmp	r3, #0
 800968c:	d13d      	bne.n	800970a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800968e:	68fb      	ldr	r3, [r7, #12]
 8009690:	681b      	ldr	r3, [r3, #0]
 8009692:	685a      	ldr	r2, [r3, #4]
 8009694:	68fb      	ldr	r3, [r7, #12]
 8009696:	681b      	ldr	r3, [r3, #0]
 8009698:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800969c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800969e:	68fb      	ldr	r3, [r7, #12]
 80096a0:	685b      	ldr	r3, [r3, #4]
 80096a2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80096a6:	d111      	bne.n	80096cc <SPI_WaitFlagStateUntilTimeout+0x94>
 80096a8:	68fb      	ldr	r3, [r7, #12]
 80096aa:	689b      	ldr	r3, [r3, #8]
 80096ac:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80096b0:	d004      	beq.n	80096bc <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80096b2:	68fb      	ldr	r3, [r7, #12]
 80096b4:	689b      	ldr	r3, [r3, #8]
 80096b6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80096ba:	d107      	bne.n	80096cc <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80096bc:	68fb      	ldr	r3, [r7, #12]
 80096be:	681b      	ldr	r3, [r3, #0]
 80096c0:	681a      	ldr	r2, [r3, #0]
 80096c2:	68fb      	ldr	r3, [r7, #12]
 80096c4:	681b      	ldr	r3, [r3, #0]
 80096c6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80096ca:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80096cc:	68fb      	ldr	r3, [r7, #12]
 80096ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80096d0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80096d4:	d10f      	bne.n	80096f6 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80096d6:	68fb      	ldr	r3, [r7, #12]
 80096d8:	681b      	ldr	r3, [r3, #0]
 80096da:	681a      	ldr	r2, [r3, #0]
 80096dc:	68fb      	ldr	r3, [r7, #12]
 80096de:	681b      	ldr	r3, [r3, #0]
 80096e0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80096e4:	601a      	str	r2, [r3, #0]
 80096e6:	68fb      	ldr	r3, [r7, #12]
 80096e8:	681b      	ldr	r3, [r3, #0]
 80096ea:	681a      	ldr	r2, [r3, #0]
 80096ec:	68fb      	ldr	r3, [r7, #12]
 80096ee:	681b      	ldr	r3, [r3, #0]
 80096f0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80096f4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80096f6:	68fb      	ldr	r3, [r7, #12]
 80096f8:	2201      	movs	r2, #1
 80096fa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80096fe:	68fb      	ldr	r3, [r7, #12]
 8009700:	2200      	movs	r2, #0
 8009702:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8009706:	2303      	movs	r3, #3
 8009708:	e017      	b.n	800973a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800970a:	697b      	ldr	r3, [r7, #20]
 800970c:	2b00      	cmp	r3, #0
 800970e:	d101      	bne.n	8009714 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8009710:	2300      	movs	r3, #0
 8009712:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8009714:	697b      	ldr	r3, [r7, #20]
 8009716:	3b01      	subs	r3, #1
 8009718:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800971a:	68fb      	ldr	r3, [r7, #12]
 800971c:	681b      	ldr	r3, [r3, #0]
 800971e:	689a      	ldr	r2, [r3, #8]
 8009720:	68bb      	ldr	r3, [r7, #8]
 8009722:	4013      	ands	r3, r2
 8009724:	68ba      	ldr	r2, [r7, #8]
 8009726:	429a      	cmp	r2, r3
 8009728:	bf0c      	ite	eq
 800972a:	2301      	moveq	r3, #1
 800972c:	2300      	movne	r3, #0
 800972e:	b2db      	uxtb	r3, r3
 8009730:	461a      	mov	r2, r3
 8009732:	79fb      	ldrb	r3, [r7, #7]
 8009734:	429a      	cmp	r2, r3
 8009736:	d19b      	bne.n	8009670 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8009738:	2300      	movs	r3, #0
}
 800973a:	4618      	mov	r0, r3
 800973c:	3720      	adds	r7, #32
 800973e:	46bd      	mov	sp, r7
 8009740:	bd80      	pop	{r7, pc}
 8009742:	bf00      	nop
 8009744:	20000004 	.word	0x20000004

08009748 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8009748:	b580      	push	{r7, lr}
 800974a:	b088      	sub	sp, #32
 800974c:	af02      	add	r7, sp, #8
 800974e:	60f8      	str	r0, [r7, #12]
 8009750:	60b9      	str	r1, [r7, #8]
 8009752:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8009754:	4b1b      	ldr	r3, [pc, #108]	; (80097c4 <SPI_EndRxTxTransaction+0x7c>)
 8009756:	681b      	ldr	r3, [r3, #0]
 8009758:	4a1b      	ldr	r2, [pc, #108]	; (80097c8 <SPI_EndRxTxTransaction+0x80>)
 800975a:	fba2 2303 	umull	r2, r3, r2, r3
 800975e:	0d5b      	lsrs	r3, r3, #21
 8009760:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8009764:	fb02 f303 	mul.w	r3, r2, r3
 8009768:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800976a:	68fb      	ldr	r3, [r7, #12]
 800976c:	685b      	ldr	r3, [r3, #4]
 800976e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009772:	d112      	bne.n	800979a <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8009774:	687b      	ldr	r3, [r7, #4]
 8009776:	9300      	str	r3, [sp, #0]
 8009778:	68bb      	ldr	r3, [r7, #8]
 800977a:	2200      	movs	r2, #0
 800977c:	2180      	movs	r1, #128	; 0x80
 800977e:	68f8      	ldr	r0, [r7, #12]
 8009780:	f7ff ff5a 	bl	8009638 <SPI_WaitFlagStateUntilTimeout>
 8009784:	4603      	mov	r3, r0
 8009786:	2b00      	cmp	r3, #0
 8009788:	d016      	beq.n	80097b8 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800978a:	68fb      	ldr	r3, [r7, #12]
 800978c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800978e:	f043 0220 	orr.w	r2, r3, #32
 8009792:	68fb      	ldr	r3, [r7, #12]
 8009794:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8009796:	2303      	movs	r3, #3
 8009798:	e00f      	b.n	80097ba <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800979a:	697b      	ldr	r3, [r7, #20]
 800979c:	2b00      	cmp	r3, #0
 800979e:	d00a      	beq.n	80097b6 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 80097a0:	697b      	ldr	r3, [r7, #20]
 80097a2:	3b01      	subs	r3, #1
 80097a4:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80097a6:	68fb      	ldr	r3, [r7, #12]
 80097a8:	681b      	ldr	r3, [r3, #0]
 80097aa:	689b      	ldr	r3, [r3, #8]
 80097ac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80097b0:	2b80      	cmp	r3, #128	; 0x80
 80097b2:	d0f2      	beq.n	800979a <SPI_EndRxTxTransaction+0x52>
 80097b4:	e000      	b.n	80097b8 <SPI_EndRxTxTransaction+0x70>
        break;
 80097b6:	bf00      	nop
  }

  return HAL_OK;
 80097b8:	2300      	movs	r3, #0
}
 80097ba:	4618      	mov	r0, r3
 80097bc:	3718      	adds	r7, #24
 80097be:	46bd      	mov	sp, r7
 80097c0:	bd80      	pop	{r7, pc}
 80097c2:	bf00      	nop
 80097c4:	20000004 	.word	0x20000004
 80097c8:	165e9f81 	.word	0x165e9f81

080097cc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80097cc:	b580      	push	{r7, lr}
 80097ce:	b082      	sub	sp, #8
 80097d0:	af00      	add	r7, sp, #0
 80097d2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80097d4:	687b      	ldr	r3, [r7, #4]
 80097d6:	2b00      	cmp	r3, #0
 80097d8:	d101      	bne.n	80097de <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80097da:	2301      	movs	r3, #1
 80097dc:	e041      	b.n	8009862 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80097de:	687b      	ldr	r3, [r7, #4]
 80097e0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80097e4:	b2db      	uxtb	r3, r3
 80097e6:	2b00      	cmp	r3, #0
 80097e8:	d106      	bne.n	80097f8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80097ea:	687b      	ldr	r3, [r7, #4]
 80097ec:	2200      	movs	r2, #0
 80097ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80097f2:	6878      	ldr	r0, [r7, #4]
 80097f4:	f7f7 ffc6 	bl	8001784 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80097f8:	687b      	ldr	r3, [r7, #4]
 80097fa:	2202      	movs	r2, #2
 80097fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009800:	687b      	ldr	r3, [r7, #4]
 8009802:	681a      	ldr	r2, [r3, #0]
 8009804:	687b      	ldr	r3, [r7, #4]
 8009806:	3304      	adds	r3, #4
 8009808:	4619      	mov	r1, r3
 800980a:	4610      	mov	r0, r2
 800980c:	f000 fac0 	bl	8009d90 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009810:	687b      	ldr	r3, [r7, #4]
 8009812:	2201      	movs	r2, #1
 8009814:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009818:	687b      	ldr	r3, [r7, #4]
 800981a:	2201      	movs	r2, #1
 800981c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009820:	687b      	ldr	r3, [r7, #4]
 8009822:	2201      	movs	r2, #1
 8009824:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009828:	687b      	ldr	r3, [r7, #4]
 800982a:	2201      	movs	r2, #1
 800982c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009830:	687b      	ldr	r3, [r7, #4]
 8009832:	2201      	movs	r2, #1
 8009834:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009838:	687b      	ldr	r3, [r7, #4]
 800983a:	2201      	movs	r2, #1
 800983c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009840:	687b      	ldr	r3, [r7, #4]
 8009842:	2201      	movs	r2, #1
 8009844:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8009848:	687b      	ldr	r3, [r7, #4]
 800984a:	2201      	movs	r2, #1
 800984c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009850:	687b      	ldr	r3, [r7, #4]
 8009852:	2201      	movs	r2, #1
 8009854:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009858:	687b      	ldr	r3, [r7, #4]
 800985a:	2201      	movs	r2, #1
 800985c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009860:	2300      	movs	r3, #0
}
 8009862:	4618      	mov	r0, r3
 8009864:	3708      	adds	r7, #8
 8009866:	46bd      	mov	sp, r7
 8009868:	bd80      	pop	{r7, pc}
	...

0800986c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800986c:	b480      	push	{r7}
 800986e:	b085      	sub	sp, #20
 8009870:	af00      	add	r7, sp, #0
 8009872:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8009874:	687b      	ldr	r3, [r7, #4]
 8009876:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800987a:	b2db      	uxtb	r3, r3
 800987c:	2b01      	cmp	r3, #1
 800987e:	d001      	beq.n	8009884 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8009880:	2301      	movs	r3, #1
 8009882:	e044      	b.n	800990e <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009884:	687b      	ldr	r3, [r7, #4]
 8009886:	2202      	movs	r2, #2
 8009888:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800988c:	687b      	ldr	r3, [r7, #4]
 800988e:	681b      	ldr	r3, [r3, #0]
 8009890:	68da      	ldr	r2, [r3, #12]
 8009892:	687b      	ldr	r3, [r7, #4]
 8009894:	681b      	ldr	r3, [r3, #0]
 8009896:	f042 0201 	orr.w	r2, r2, #1
 800989a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800989c:	687b      	ldr	r3, [r7, #4]
 800989e:	681b      	ldr	r3, [r3, #0]
 80098a0:	4a1e      	ldr	r2, [pc, #120]	; (800991c <HAL_TIM_Base_Start_IT+0xb0>)
 80098a2:	4293      	cmp	r3, r2
 80098a4:	d018      	beq.n	80098d8 <HAL_TIM_Base_Start_IT+0x6c>
 80098a6:	687b      	ldr	r3, [r7, #4]
 80098a8:	681b      	ldr	r3, [r3, #0]
 80098aa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80098ae:	d013      	beq.n	80098d8 <HAL_TIM_Base_Start_IT+0x6c>
 80098b0:	687b      	ldr	r3, [r7, #4]
 80098b2:	681b      	ldr	r3, [r3, #0]
 80098b4:	4a1a      	ldr	r2, [pc, #104]	; (8009920 <HAL_TIM_Base_Start_IT+0xb4>)
 80098b6:	4293      	cmp	r3, r2
 80098b8:	d00e      	beq.n	80098d8 <HAL_TIM_Base_Start_IT+0x6c>
 80098ba:	687b      	ldr	r3, [r7, #4]
 80098bc:	681b      	ldr	r3, [r3, #0]
 80098be:	4a19      	ldr	r2, [pc, #100]	; (8009924 <HAL_TIM_Base_Start_IT+0xb8>)
 80098c0:	4293      	cmp	r3, r2
 80098c2:	d009      	beq.n	80098d8 <HAL_TIM_Base_Start_IT+0x6c>
 80098c4:	687b      	ldr	r3, [r7, #4]
 80098c6:	681b      	ldr	r3, [r3, #0]
 80098c8:	4a17      	ldr	r2, [pc, #92]	; (8009928 <HAL_TIM_Base_Start_IT+0xbc>)
 80098ca:	4293      	cmp	r3, r2
 80098cc:	d004      	beq.n	80098d8 <HAL_TIM_Base_Start_IT+0x6c>
 80098ce:	687b      	ldr	r3, [r7, #4]
 80098d0:	681b      	ldr	r3, [r3, #0]
 80098d2:	4a16      	ldr	r2, [pc, #88]	; (800992c <HAL_TIM_Base_Start_IT+0xc0>)
 80098d4:	4293      	cmp	r3, r2
 80098d6:	d111      	bne.n	80098fc <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80098d8:	687b      	ldr	r3, [r7, #4]
 80098da:	681b      	ldr	r3, [r3, #0]
 80098dc:	689b      	ldr	r3, [r3, #8]
 80098de:	f003 0307 	and.w	r3, r3, #7
 80098e2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80098e4:	68fb      	ldr	r3, [r7, #12]
 80098e6:	2b06      	cmp	r3, #6
 80098e8:	d010      	beq.n	800990c <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 80098ea:	687b      	ldr	r3, [r7, #4]
 80098ec:	681b      	ldr	r3, [r3, #0]
 80098ee:	681a      	ldr	r2, [r3, #0]
 80098f0:	687b      	ldr	r3, [r7, #4]
 80098f2:	681b      	ldr	r3, [r3, #0]
 80098f4:	f042 0201 	orr.w	r2, r2, #1
 80098f8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80098fa:	e007      	b.n	800990c <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80098fc:	687b      	ldr	r3, [r7, #4]
 80098fe:	681b      	ldr	r3, [r3, #0]
 8009900:	681a      	ldr	r2, [r3, #0]
 8009902:	687b      	ldr	r3, [r7, #4]
 8009904:	681b      	ldr	r3, [r3, #0]
 8009906:	f042 0201 	orr.w	r2, r2, #1
 800990a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800990c:	2300      	movs	r3, #0
}
 800990e:	4618      	mov	r0, r3
 8009910:	3714      	adds	r7, #20
 8009912:	46bd      	mov	sp, r7
 8009914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009918:	4770      	bx	lr
 800991a:	bf00      	nop
 800991c:	40010000 	.word	0x40010000
 8009920:	40000400 	.word	0x40000400
 8009924:	40000800 	.word	0x40000800
 8009928:	40000c00 	.word	0x40000c00
 800992c:	40014000 	.word	0x40014000

08009930 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8009930:	b480      	push	{r7}
 8009932:	b083      	sub	sp, #12
 8009934:	af00      	add	r7, sp, #0
 8009936:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8009938:	687b      	ldr	r3, [r7, #4]
 800993a:	681b      	ldr	r3, [r3, #0]
 800993c:	68da      	ldr	r2, [r3, #12]
 800993e:	687b      	ldr	r3, [r7, #4]
 8009940:	681b      	ldr	r3, [r3, #0]
 8009942:	f022 0201 	bic.w	r2, r2, #1
 8009946:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8009948:	687b      	ldr	r3, [r7, #4]
 800994a:	681b      	ldr	r3, [r3, #0]
 800994c:	6a1a      	ldr	r2, [r3, #32]
 800994e:	f241 1311 	movw	r3, #4369	; 0x1111
 8009952:	4013      	ands	r3, r2
 8009954:	2b00      	cmp	r3, #0
 8009956:	d10f      	bne.n	8009978 <HAL_TIM_Base_Stop_IT+0x48>
 8009958:	687b      	ldr	r3, [r7, #4]
 800995a:	681b      	ldr	r3, [r3, #0]
 800995c:	6a1a      	ldr	r2, [r3, #32]
 800995e:	f240 4344 	movw	r3, #1092	; 0x444
 8009962:	4013      	ands	r3, r2
 8009964:	2b00      	cmp	r3, #0
 8009966:	d107      	bne.n	8009978 <HAL_TIM_Base_Stop_IT+0x48>
 8009968:	687b      	ldr	r3, [r7, #4]
 800996a:	681b      	ldr	r3, [r3, #0]
 800996c:	681a      	ldr	r2, [r3, #0]
 800996e:	687b      	ldr	r3, [r7, #4]
 8009970:	681b      	ldr	r3, [r3, #0]
 8009972:	f022 0201 	bic.w	r2, r2, #1
 8009976:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8009978:	687b      	ldr	r3, [r7, #4]
 800997a:	2201      	movs	r2, #1
 800997c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8009980:	2300      	movs	r3, #0
}
 8009982:	4618      	mov	r0, r3
 8009984:	370c      	adds	r7, #12
 8009986:	46bd      	mov	sp, r7
 8009988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800998c:	4770      	bx	lr

0800998e <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800998e:	b580      	push	{r7, lr}
 8009990:	b082      	sub	sp, #8
 8009992:	af00      	add	r7, sp, #0
 8009994:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8009996:	687b      	ldr	r3, [r7, #4]
 8009998:	681b      	ldr	r3, [r3, #0]
 800999a:	691b      	ldr	r3, [r3, #16]
 800999c:	f003 0302 	and.w	r3, r3, #2
 80099a0:	2b02      	cmp	r3, #2
 80099a2:	d122      	bne.n	80099ea <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80099a4:	687b      	ldr	r3, [r7, #4]
 80099a6:	681b      	ldr	r3, [r3, #0]
 80099a8:	68db      	ldr	r3, [r3, #12]
 80099aa:	f003 0302 	and.w	r3, r3, #2
 80099ae:	2b02      	cmp	r3, #2
 80099b0:	d11b      	bne.n	80099ea <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80099b2:	687b      	ldr	r3, [r7, #4]
 80099b4:	681b      	ldr	r3, [r3, #0]
 80099b6:	f06f 0202 	mvn.w	r2, #2
 80099ba:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80099bc:	687b      	ldr	r3, [r7, #4]
 80099be:	2201      	movs	r2, #1
 80099c0:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80099c2:	687b      	ldr	r3, [r7, #4]
 80099c4:	681b      	ldr	r3, [r3, #0]
 80099c6:	699b      	ldr	r3, [r3, #24]
 80099c8:	f003 0303 	and.w	r3, r3, #3
 80099cc:	2b00      	cmp	r3, #0
 80099ce:	d003      	beq.n	80099d8 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80099d0:	6878      	ldr	r0, [r7, #4]
 80099d2:	f000 f9bf 	bl	8009d54 <HAL_TIM_IC_CaptureCallback>
 80099d6:	e005      	b.n	80099e4 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80099d8:	6878      	ldr	r0, [r7, #4]
 80099da:	f000 f9b1 	bl	8009d40 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80099de:	6878      	ldr	r0, [r7, #4]
 80099e0:	f000 f9c2 	bl	8009d68 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80099e4:	687b      	ldr	r3, [r7, #4]
 80099e6:	2200      	movs	r2, #0
 80099e8:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80099ea:	687b      	ldr	r3, [r7, #4]
 80099ec:	681b      	ldr	r3, [r3, #0]
 80099ee:	691b      	ldr	r3, [r3, #16]
 80099f0:	f003 0304 	and.w	r3, r3, #4
 80099f4:	2b04      	cmp	r3, #4
 80099f6:	d122      	bne.n	8009a3e <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80099f8:	687b      	ldr	r3, [r7, #4]
 80099fa:	681b      	ldr	r3, [r3, #0]
 80099fc:	68db      	ldr	r3, [r3, #12]
 80099fe:	f003 0304 	and.w	r3, r3, #4
 8009a02:	2b04      	cmp	r3, #4
 8009a04:	d11b      	bne.n	8009a3e <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8009a06:	687b      	ldr	r3, [r7, #4]
 8009a08:	681b      	ldr	r3, [r3, #0]
 8009a0a:	f06f 0204 	mvn.w	r2, #4
 8009a0e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8009a10:	687b      	ldr	r3, [r7, #4]
 8009a12:	2202      	movs	r2, #2
 8009a14:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8009a16:	687b      	ldr	r3, [r7, #4]
 8009a18:	681b      	ldr	r3, [r3, #0]
 8009a1a:	699b      	ldr	r3, [r3, #24]
 8009a1c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009a20:	2b00      	cmp	r3, #0
 8009a22:	d003      	beq.n	8009a2c <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009a24:	6878      	ldr	r0, [r7, #4]
 8009a26:	f000 f995 	bl	8009d54 <HAL_TIM_IC_CaptureCallback>
 8009a2a:	e005      	b.n	8009a38 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009a2c:	6878      	ldr	r0, [r7, #4]
 8009a2e:	f000 f987 	bl	8009d40 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009a32:	6878      	ldr	r0, [r7, #4]
 8009a34:	f000 f998 	bl	8009d68 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009a38:	687b      	ldr	r3, [r7, #4]
 8009a3a:	2200      	movs	r2, #0
 8009a3c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8009a3e:	687b      	ldr	r3, [r7, #4]
 8009a40:	681b      	ldr	r3, [r3, #0]
 8009a42:	691b      	ldr	r3, [r3, #16]
 8009a44:	f003 0308 	and.w	r3, r3, #8
 8009a48:	2b08      	cmp	r3, #8
 8009a4a:	d122      	bne.n	8009a92 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8009a4c:	687b      	ldr	r3, [r7, #4]
 8009a4e:	681b      	ldr	r3, [r3, #0]
 8009a50:	68db      	ldr	r3, [r3, #12]
 8009a52:	f003 0308 	and.w	r3, r3, #8
 8009a56:	2b08      	cmp	r3, #8
 8009a58:	d11b      	bne.n	8009a92 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8009a5a:	687b      	ldr	r3, [r7, #4]
 8009a5c:	681b      	ldr	r3, [r3, #0]
 8009a5e:	f06f 0208 	mvn.w	r2, #8
 8009a62:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8009a64:	687b      	ldr	r3, [r7, #4]
 8009a66:	2204      	movs	r2, #4
 8009a68:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8009a6a:	687b      	ldr	r3, [r7, #4]
 8009a6c:	681b      	ldr	r3, [r3, #0]
 8009a6e:	69db      	ldr	r3, [r3, #28]
 8009a70:	f003 0303 	and.w	r3, r3, #3
 8009a74:	2b00      	cmp	r3, #0
 8009a76:	d003      	beq.n	8009a80 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009a78:	6878      	ldr	r0, [r7, #4]
 8009a7a:	f000 f96b 	bl	8009d54 <HAL_TIM_IC_CaptureCallback>
 8009a7e:	e005      	b.n	8009a8c <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009a80:	6878      	ldr	r0, [r7, #4]
 8009a82:	f000 f95d 	bl	8009d40 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009a86:	6878      	ldr	r0, [r7, #4]
 8009a88:	f000 f96e 	bl	8009d68 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009a8c:	687b      	ldr	r3, [r7, #4]
 8009a8e:	2200      	movs	r2, #0
 8009a90:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8009a92:	687b      	ldr	r3, [r7, #4]
 8009a94:	681b      	ldr	r3, [r3, #0]
 8009a96:	691b      	ldr	r3, [r3, #16]
 8009a98:	f003 0310 	and.w	r3, r3, #16
 8009a9c:	2b10      	cmp	r3, #16
 8009a9e:	d122      	bne.n	8009ae6 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8009aa0:	687b      	ldr	r3, [r7, #4]
 8009aa2:	681b      	ldr	r3, [r3, #0]
 8009aa4:	68db      	ldr	r3, [r3, #12]
 8009aa6:	f003 0310 	and.w	r3, r3, #16
 8009aaa:	2b10      	cmp	r3, #16
 8009aac:	d11b      	bne.n	8009ae6 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8009aae:	687b      	ldr	r3, [r7, #4]
 8009ab0:	681b      	ldr	r3, [r3, #0]
 8009ab2:	f06f 0210 	mvn.w	r2, #16
 8009ab6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8009ab8:	687b      	ldr	r3, [r7, #4]
 8009aba:	2208      	movs	r2, #8
 8009abc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8009abe:	687b      	ldr	r3, [r7, #4]
 8009ac0:	681b      	ldr	r3, [r3, #0]
 8009ac2:	69db      	ldr	r3, [r3, #28]
 8009ac4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009ac8:	2b00      	cmp	r3, #0
 8009aca:	d003      	beq.n	8009ad4 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009acc:	6878      	ldr	r0, [r7, #4]
 8009ace:	f000 f941 	bl	8009d54 <HAL_TIM_IC_CaptureCallback>
 8009ad2:	e005      	b.n	8009ae0 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009ad4:	6878      	ldr	r0, [r7, #4]
 8009ad6:	f000 f933 	bl	8009d40 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009ada:	6878      	ldr	r0, [r7, #4]
 8009adc:	f000 f944 	bl	8009d68 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009ae0:	687b      	ldr	r3, [r7, #4]
 8009ae2:	2200      	movs	r2, #0
 8009ae4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8009ae6:	687b      	ldr	r3, [r7, #4]
 8009ae8:	681b      	ldr	r3, [r3, #0]
 8009aea:	691b      	ldr	r3, [r3, #16]
 8009aec:	f003 0301 	and.w	r3, r3, #1
 8009af0:	2b01      	cmp	r3, #1
 8009af2:	d10e      	bne.n	8009b12 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8009af4:	687b      	ldr	r3, [r7, #4]
 8009af6:	681b      	ldr	r3, [r3, #0]
 8009af8:	68db      	ldr	r3, [r3, #12]
 8009afa:	f003 0301 	and.w	r3, r3, #1
 8009afe:	2b01      	cmp	r3, #1
 8009b00:	d107      	bne.n	8009b12 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8009b02:	687b      	ldr	r3, [r7, #4]
 8009b04:	681b      	ldr	r3, [r3, #0]
 8009b06:	f06f 0201 	mvn.w	r2, #1
 8009b0a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8009b0c:	6878      	ldr	r0, [r7, #4]
 8009b0e:	f000 f90d 	bl	8009d2c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8009b12:	687b      	ldr	r3, [r7, #4]
 8009b14:	681b      	ldr	r3, [r3, #0]
 8009b16:	691b      	ldr	r3, [r3, #16]
 8009b18:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009b1c:	2b80      	cmp	r3, #128	; 0x80
 8009b1e:	d10e      	bne.n	8009b3e <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8009b20:	687b      	ldr	r3, [r7, #4]
 8009b22:	681b      	ldr	r3, [r3, #0]
 8009b24:	68db      	ldr	r3, [r3, #12]
 8009b26:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009b2a:	2b80      	cmp	r3, #128	; 0x80
 8009b2c:	d107      	bne.n	8009b3e <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8009b2e:	687b      	ldr	r3, [r7, #4]
 8009b30:	681b      	ldr	r3, [r3, #0]
 8009b32:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8009b36:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8009b38:	6878      	ldr	r0, [r7, #4]
 8009b3a:	f000 fabb 	bl	800a0b4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8009b3e:	687b      	ldr	r3, [r7, #4]
 8009b40:	681b      	ldr	r3, [r3, #0]
 8009b42:	691b      	ldr	r3, [r3, #16]
 8009b44:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009b48:	2b40      	cmp	r3, #64	; 0x40
 8009b4a:	d10e      	bne.n	8009b6a <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8009b4c:	687b      	ldr	r3, [r7, #4]
 8009b4e:	681b      	ldr	r3, [r3, #0]
 8009b50:	68db      	ldr	r3, [r3, #12]
 8009b52:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009b56:	2b40      	cmp	r3, #64	; 0x40
 8009b58:	d107      	bne.n	8009b6a <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8009b5a:	687b      	ldr	r3, [r7, #4]
 8009b5c:	681b      	ldr	r3, [r3, #0]
 8009b5e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8009b62:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8009b64:	6878      	ldr	r0, [r7, #4]
 8009b66:	f000 f909 	bl	8009d7c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8009b6a:	687b      	ldr	r3, [r7, #4]
 8009b6c:	681b      	ldr	r3, [r3, #0]
 8009b6e:	691b      	ldr	r3, [r3, #16]
 8009b70:	f003 0320 	and.w	r3, r3, #32
 8009b74:	2b20      	cmp	r3, #32
 8009b76:	d10e      	bne.n	8009b96 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8009b78:	687b      	ldr	r3, [r7, #4]
 8009b7a:	681b      	ldr	r3, [r3, #0]
 8009b7c:	68db      	ldr	r3, [r3, #12]
 8009b7e:	f003 0320 	and.w	r3, r3, #32
 8009b82:	2b20      	cmp	r3, #32
 8009b84:	d107      	bne.n	8009b96 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8009b86:	687b      	ldr	r3, [r7, #4]
 8009b88:	681b      	ldr	r3, [r3, #0]
 8009b8a:	f06f 0220 	mvn.w	r2, #32
 8009b8e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8009b90:	6878      	ldr	r0, [r7, #4]
 8009b92:	f000 fa85 	bl	800a0a0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8009b96:	bf00      	nop
 8009b98:	3708      	adds	r7, #8
 8009b9a:	46bd      	mov	sp, r7
 8009b9c:	bd80      	pop	{r7, pc}

08009b9e <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8009b9e:	b580      	push	{r7, lr}
 8009ba0:	b084      	sub	sp, #16
 8009ba2:	af00      	add	r7, sp, #0
 8009ba4:	6078      	str	r0, [r7, #4]
 8009ba6:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8009ba8:	2300      	movs	r3, #0
 8009baa:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8009bac:	687b      	ldr	r3, [r7, #4]
 8009bae:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009bb2:	2b01      	cmp	r3, #1
 8009bb4:	d101      	bne.n	8009bba <HAL_TIM_ConfigClockSource+0x1c>
 8009bb6:	2302      	movs	r3, #2
 8009bb8:	e0b4      	b.n	8009d24 <HAL_TIM_ConfigClockSource+0x186>
 8009bba:	687b      	ldr	r3, [r7, #4]
 8009bbc:	2201      	movs	r2, #1
 8009bbe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8009bc2:	687b      	ldr	r3, [r7, #4]
 8009bc4:	2202      	movs	r2, #2
 8009bc6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8009bca:	687b      	ldr	r3, [r7, #4]
 8009bcc:	681b      	ldr	r3, [r3, #0]
 8009bce:	689b      	ldr	r3, [r3, #8]
 8009bd0:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8009bd2:	68bb      	ldr	r3, [r7, #8]
 8009bd4:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8009bd8:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009bda:	68bb      	ldr	r3, [r7, #8]
 8009bdc:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8009be0:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8009be2:	687b      	ldr	r3, [r7, #4]
 8009be4:	681b      	ldr	r3, [r3, #0]
 8009be6:	68ba      	ldr	r2, [r7, #8]
 8009be8:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8009bea:	683b      	ldr	r3, [r7, #0]
 8009bec:	681b      	ldr	r3, [r3, #0]
 8009bee:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009bf2:	d03e      	beq.n	8009c72 <HAL_TIM_ConfigClockSource+0xd4>
 8009bf4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009bf8:	f200 8087 	bhi.w	8009d0a <HAL_TIM_ConfigClockSource+0x16c>
 8009bfc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009c00:	f000 8086 	beq.w	8009d10 <HAL_TIM_ConfigClockSource+0x172>
 8009c04:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009c08:	d87f      	bhi.n	8009d0a <HAL_TIM_ConfigClockSource+0x16c>
 8009c0a:	2b70      	cmp	r3, #112	; 0x70
 8009c0c:	d01a      	beq.n	8009c44 <HAL_TIM_ConfigClockSource+0xa6>
 8009c0e:	2b70      	cmp	r3, #112	; 0x70
 8009c10:	d87b      	bhi.n	8009d0a <HAL_TIM_ConfigClockSource+0x16c>
 8009c12:	2b60      	cmp	r3, #96	; 0x60
 8009c14:	d050      	beq.n	8009cb8 <HAL_TIM_ConfigClockSource+0x11a>
 8009c16:	2b60      	cmp	r3, #96	; 0x60
 8009c18:	d877      	bhi.n	8009d0a <HAL_TIM_ConfigClockSource+0x16c>
 8009c1a:	2b50      	cmp	r3, #80	; 0x50
 8009c1c:	d03c      	beq.n	8009c98 <HAL_TIM_ConfigClockSource+0xfa>
 8009c1e:	2b50      	cmp	r3, #80	; 0x50
 8009c20:	d873      	bhi.n	8009d0a <HAL_TIM_ConfigClockSource+0x16c>
 8009c22:	2b40      	cmp	r3, #64	; 0x40
 8009c24:	d058      	beq.n	8009cd8 <HAL_TIM_ConfigClockSource+0x13a>
 8009c26:	2b40      	cmp	r3, #64	; 0x40
 8009c28:	d86f      	bhi.n	8009d0a <HAL_TIM_ConfigClockSource+0x16c>
 8009c2a:	2b30      	cmp	r3, #48	; 0x30
 8009c2c:	d064      	beq.n	8009cf8 <HAL_TIM_ConfigClockSource+0x15a>
 8009c2e:	2b30      	cmp	r3, #48	; 0x30
 8009c30:	d86b      	bhi.n	8009d0a <HAL_TIM_ConfigClockSource+0x16c>
 8009c32:	2b20      	cmp	r3, #32
 8009c34:	d060      	beq.n	8009cf8 <HAL_TIM_ConfigClockSource+0x15a>
 8009c36:	2b20      	cmp	r3, #32
 8009c38:	d867      	bhi.n	8009d0a <HAL_TIM_ConfigClockSource+0x16c>
 8009c3a:	2b00      	cmp	r3, #0
 8009c3c:	d05c      	beq.n	8009cf8 <HAL_TIM_ConfigClockSource+0x15a>
 8009c3e:	2b10      	cmp	r3, #16
 8009c40:	d05a      	beq.n	8009cf8 <HAL_TIM_ConfigClockSource+0x15a>
 8009c42:	e062      	b.n	8009d0a <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009c44:	687b      	ldr	r3, [r7, #4]
 8009c46:	6818      	ldr	r0, [r3, #0]
 8009c48:	683b      	ldr	r3, [r7, #0]
 8009c4a:	6899      	ldr	r1, [r3, #8]
 8009c4c:	683b      	ldr	r3, [r7, #0]
 8009c4e:	685a      	ldr	r2, [r3, #4]
 8009c50:	683b      	ldr	r3, [r7, #0]
 8009c52:	68db      	ldr	r3, [r3, #12]
 8009c54:	f000 f996 	bl	8009f84 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8009c58:	687b      	ldr	r3, [r7, #4]
 8009c5a:	681b      	ldr	r3, [r3, #0]
 8009c5c:	689b      	ldr	r3, [r3, #8]
 8009c5e:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8009c60:	68bb      	ldr	r3, [r7, #8]
 8009c62:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8009c66:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8009c68:	687b      	ldr	r3, [r7, #4]
 8009c6a:	681b      	ldr	r3, [r3, #0]
 8009c6c:	68ba      	ldr	r2, [r7, #8]
 8009c6e:	609a      	str	r2, [r3, #8]
      break;
 8009c70:	e04f      	b.n	8009d12 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009c72:	687b      	ldr	r3, [r7, #4]
 8009c74:	6818      	ldr	r0, [r3, #0]
 8009c76:	683b      	ldr	r3, [r7, #0]
 8009c78:	6899      	ldr	r1, [r3, #8]
 8009c7a:	683b      	ldr	r3, [r7, #0]
 8009c7c:	685a      	ldr	r2, [r3, #4]
 8009c7e:	683b      	ldr	r3, [r7, #0]
 8009c80:	68db      	ldr	r3, [r3, #12]
 8009c82:	f000 f97f 	bl	8009f84 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8009c86:	687b      	ldr	r3, [r7, #4]
 8009c88:	681b      	ldr	r3, [r3, #0]
 8009c8a:	689a      	ldr	r2, [r3, #8]
 8009c8c:	687b      	ldr	r3, [r7, #4]
 8009c8e:	681b      	ldr	r3, [r3, #0]
 8009c90:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8009c94:	609a      	str	r2, [r3, #8]
      break;
 8009c96:	e03c      	b.n	8009d12 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8009c98:	687b      	ldr	r3, [r7, #4]
 8009c9a:	6818      	ldr	r0, [r3, #0]
 8009c9c:	683b      	ldr	r3, [r7, #0]
 8009c9e:	6859      	ldr	r1, [r3, #4]
 8009ca0:	683b      	ldr	r3, [r7, #0]
 8009ca2:	68db      	ldr	r3, [r3, #12]
 8009ca4:	461a      	mov	r2, r3
 8009ca6:	f000 f8f3 	bl	8009e90 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8009caa:	687b      	ldr	r3, [r7, #4]
 8009cac:	681b      	ldr	r3, [r3, #0]
 8009cae:	2150      	movs	r1, #80	; 0x50
 8009cb0:	4618      	mov	r0, r3
 8009cb2:	f000 f94c 	bl	8009f4e <TIM_ITRx_SetConfig>
      break;
 8009cb6:	e02c      	b.n	8009d12 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8009cb8:	687b      	ldr	r3, [r7, #4]
 8009cba:	6818      	ldr	r0, [r3, #0]
 8009cbc:	683b      	ldr	r3, [r7, #0]
 8009cbe:	6859      	ldr	r1, [r3, #4]
 8009cc0:	683b      	ldr	r3, [r7, #0]
 8009cc2:	68db      	ldr	r3, [r3, #12]
 8009cc4:	461a      	mov	r2, r3
 8009cc6:	f000 f912 	bl	8009eee <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8009cca:	687b      	ldr	r3, [r7, #4]
 8009ccc:	681b      	ldr	r3, [r3, #0]
 8009cce:	2160      	movs	r1, #96	; 0x60
 8009cd0:	4618      	mov	r0, r3
 8009cd2:	f000 f93c 	bl	8009f4e <TIM_ITRx_SetConfig>
      break;
 8009cd6:	e01c      	b.n	8009d12 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8009cd8:	687b      	ldr	r3, [r7, #4]
 8009cda:	6818      	ldr	r0, [r3, #0]
 8009cdc:	683b      	ldr	r3, [r7, #0]
 8009cde:	6859      	ldr	r1, [r3, #4]
 8009ce0:	683b      	ldr	r3, [r7, #0]
 8009ce2:	68db      	ldr	r3, [r3, #12]
 8009ce4:	461a      	mov	r2, r3
 8009ce6:	f000 f8d3 	bl	8009e90 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8009cea:	687b      	ldr	r3, [r7, #4]
 8009cec:	681b      	ldr	r3, [r3, #0]
 8009cee:	2140      	movs	r1, #64	; 0x40
 8009cf0:	4618      	mov	r0, r3
 8009cf2:	f000 f92c 	bl	8009f4e <TIM_ITRx_SetConfig>
      break;
 8009cf6:	e00c      	b.n	8009d12 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8009cf8:	687b      	ldr	r3, [r7, #4]
 8009cfa:	681a      	ldr	r2, [r3, #0]
 8009cfc:	683b      	ldr	r3, [r7, #0]
 8009cfe:	681b      	ldr	r3, [r3, #0]
 8009d00:	4619      	mov	r1, r3
 8009d02:	4610      	mov	r0, r2
 8009d04:	f000 f923 	bl	8009f4e <TIM_ITRx_SetConfig>
      break;
 8009d08:	e003      	b.n	8009d12 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8009d0a:	2301      	movs	r3, #1
 8009d0c:	73fb      	strb	r3, [r7, #15]
      break;
 8009d0e:	e000      	b.n	8009d12 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8009d10:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8009d12:	687b      	ldr	r3, [r7, #4]
 8009d14:	2201      	movs	r2, #1
 8009d16:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009d1a:	687b      	ldr	r3, [r7, #4]
 8009d1c:	2200      	movs	r2, #0
 8009d1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8009d22:	7bfb      	ldrb	r3, [r7, #15]
}
 8009d24:	4618      	mov	r0, r3
 8009d26:	3710      	adds	r7, #16
 8009d28:	46bd      	mov	sp, r7
 8009d2a:	bd80      	pop	{r7, pc}

08009d2c <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009d2c:	b480      	push	{r7}
 8009d2e:	b083      	sub	sp, #12
 8009d30:	af00      	add	r7, sp, #0
 8009d32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8009d34:	bf00      	nop
 8009d36:	370c      	adds	r7, #12
 8009d38:	46bd      	mov	sp, r7
 8009d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d3e:	4770      	bx	lr

08009d40 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009d40:	b480      	push	{r7}
 8009d42:	b083      	sub	sp, #12
 8009d44:	af00      	add	r7, sp, #0
 8009d46:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8009d48:	bf00      	nop
 8009d4a:	370c      	adds	r7, #12
 8009d4c:	46bd      	mov	sp, r7
 8009d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d52:	4770      	bx	lr

08009d54 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8009d54:	b480      	push	{r7}
 8009d56:	b083      	sub	sp, #12
 8009d58:	af00      	add	r7, sp, #0
 8009d5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8009d5c:	bf00      	nop
 8009d5e:	370c      	adds	r7, #12
 8009d60:	46bd      	mov	sp, r7
 8009d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d66:	4770      	bx	lr

08009d68 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8009d68:	b480      	push	{r7}
 8009d6a:	b083      	sub	sp, #12
 8009d6c:	af00      	add	r7, sp, #0
 8009d6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8009d70:	bf00      	nop
 8009d72:	370c      	adds	r7, #12
 8009d74:	46bd      	mov	sp, r7
 8009d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d7a:	4770      	bx	lr

08009d7c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8009d7c:	b480      	push	{r7}
 8009d7e:	b083      	sub	sp, #12
 8009d80:	af00      	add	r7, sp, #0
 8009d82:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8009d84:	bf00      	nop
 8009d86:	370c      	adds	r7, #12
 8009d88:	46bd      	mov	sp, r7
 8009d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d8e:	4770      	bx	lr

08009d90 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8009d90:	b480      	push	{r7}
 8009d92:	b085      	sub	sp, #20
 8009d94:	af00      	add	r7, sp, #0
 8009d96:	6078      	str	r0, [r7, #4]
 8009d98:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8009d9a:	687b      	ldr	r3, [r7, #4]
 8009d9c:	681b      	ldr	r3, [r3, #0]
 8009d9e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009da0:	687b      	ldr	r3, [r7, #4]
 8009da2:	4a34      	ldr	r2, [pc, #208]	; (8009e74 <TIM_Base_SetConfig+0xe4>)
 8009da4:	4293      	cmp	r3, r2
 8009da6:	d00f      	beq.n	8009dc8 <TIM_Base_SetConfig+0x38>
 8009da8:	687b      	ldr	r3, [r7, #4]
 8009daa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009dae:	d00b      	beq.n	8009dc8 <TIM_Base_SetConfig+0x38>
 8009db0:	687b      	ldr	r3, [r7, #4]
 8009db2:	4a31      	ldr	r2, [pc, #196]	; (8009e78 <TIM_Base_SetConfig+0xe8>)
 8009db4:	4293      	cmp	r3, r2
 8009db6:	d007      	beq.n	8009dc8 <TIM_Base_SetConfig+0x38>
 8009db8:	687b      	ldr	r3, [r7, #4]
 8009dba:	4a30      	ldr	r2, [pc, #192]	; (8009e7c <TIM_Base_SetConfig+0xec>)
 8009dbc:	4293      	cmp	r3, r2
 8009dbe:	d003      	beq.n	8009dc8 <TIM_Base_SetConfig+0x38>
 8009dc0:	687b      	ldr	r3, [r7, #4]
 8009dc2:	4a2f      	ldr	r2, [pc, #188]	; (8009e80 <TIM_Base_SetConfig+0xf0>)
 8009dc4:	4293      	cmp	r3, r2
 8009dc6:	d108      	bne.n	8009dda <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009dc8:	68fb      	ldr	r3, [r7, #12]
 8009dca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009dce:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009dd0:	683b      	ldr	r3, [r7, #0]
 8009dd2:	685b      	ldr	r3, [r3, #4]
 8009dd4:	68fa      	ldr	r2, [r7, #12]
 8009dd6:	4313      	orrs	r3, r2
 8009dd8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8009dda:	687b      	ldr	r3, [r7, #4]
 8009ddc:	4a25      	ldr	r2, [pc, #148]	; (8009e74 <TIM_Base_SetConfig+0xe4>)
 8009dde:	4293      	cmp	r3, r2
 8009de0:	d01b      	beq.n	8009e1a <TIM_Base_SetConfig+0x8a>
 8009de2:	687b      	ldr	r3, [r7, #4]
 8009de4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009de8:	d017      	beq.n	8009e1a <TIM_Base_SetConfig+0x8a>
 8009dea:	687b      	ldr	r3, [r7, #4]
 8009dec:	4a22      	ldr	r2, [pc, #136]	; (8009e78 <TIM_Base_SetConfig+0xe8>)
 8009dee:	4293      	cmp	r3, r2
 8009df0:	d013      	beq.n	8009e1a <TIM_Base_SetConfig+0x8a>
 8009df2:	687b      	ldr	r3, [r7, #4]
 8009df4:	4a21      	ldr	r2, [pc, #132]	; (8009e7c <TIM_Base_SetConfig+0xec>)
 8009df6:	4293      	cmp	r3, r2
 8009df8:	d00f      	beq.n	8009e1a <TIM_Base_SetConfig+0x8a>
 8009dfa:	687b      	ldr	r3, [r7, #4]
 8009dfc:	4a20      	ldr	r2, [pc, #128]	; (8009e80 <TIM_Base_SetConfig+0xf0>)
 8009dfe:	4293      	cmp	r3, r2
 8009e00:	d00b      	beq.n	8009e1a <TIM_Base_SetConfig+0x8a>
 8009e02:	687b      	ldr	r3, [r7, #4]
 8009e04:	4a1f      	ldr	r2, [pc, #124]	; (8009e84 <TIM_Base_SetConfig+0xf4>)
 8009e06:	4293      	cmp	r3, r2
 8009e08:	d007      	beq.n	8009e1a <TIM_Base_SetConfig+0x8a>
 8009e0a:	687b      	ldr	r3, [r7, #4]
 8009e0c:	4a1e      	ldr	r2, [pc, #120]	; (8009e88 <TIM_Base_SetConfig+0xf8>)
 8009e0e:	4293      	cmp	r3, r2
 8009e10:	d003      	beq.n	8009e1a <TIM_Base_SetConfig+0x8a>
 8009e12:	687b      	ldr	r3, [r7, #4]
 8009e14:	4a1d      	ldr	r2, [pc, #116]	; (8009e8c <TIM_Base_SetConfig+0xfc>)
 8009e16:	4293      	cmp	r3, r2
 8009e18:	d108      	bne.n	8009e2c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8009e1a:	68fb      	ldr	r3, [r7, #12]
 8009e1c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009e20:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009e22:	683b      	ldr	r3, [r7, #0]
 8009e24:	68db      	ldr	r3, [r3, #12]
 8009e26:	68fa      	ldr	r2, [r7, #12]
 8009e28:	4313      	orrs	r3, r2
 8009e2a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009e2c:	68fb      	ldr	r3, [r7, #12]
 8009e2e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8009e32:	683b      	ldr	r3, [r7, #0]
 8009e34:	695b      	ldr	r3, [r3, #20]
 8009e36:	4313      	orrs	r3, r2
 8009e38:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8009e3a:	687b      	ldr	r3, [r7, #4]
 8009e3c:	68fa      	ldr	r2, [r7, #12]
 8009e3e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009e40:	683b      	ldr	r3, [r7, #0]
 8009e42:	689a      	ldr	r2, [r3, #8]
 8009e44:	687b      	ldr	r3, [r7, #4]
 8009e46:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009e48:	683b      	ldr	r3, [r7, #0]
 8009e4a:	681a      	ldr	r2, [r3, #0]
 8009e4c:	687b      	ldr	r3, [r7, #4]
 8009e4e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009e50:	687b      	ldr	r3, [r7, #4]
 8009e52:	4a08      	ldr	r2, [pc, #32]	; (8009e74 <TIM_Base_SetConfig+0xe4>)
 8009e54:	4293      	cmp	r3, r2
 8009e56:	d103      	bne.n	8009e60 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009e58:	683b      	ldr	r3, [r7, #0]
 8009e5a:	691a      	ldr	r2, [r3, #16]
 8009e5c:	687b      	ldr	r3, [r7, #4]
 8009e5e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009e60:	687b      	ldr	r3, [r7, #4]
 8009e62:	2201      	movs	r2, #1
 8009e64:	615a      	str	r2, [r3, #20]
}
 8009e66:	bf00      	nop
 8009e68:	3714      	adds	r7, #20
 8009e6a:	46bd      	mov	sp, r7
 8009e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e70:	4770      	bx	lr
 8009e72:	bf00      	nop
 8009e74:	40010000 	.word	0x40010000
 8009e78:	40000400 	.word	0x40000400
 8009e7c:	40000800 	.word	0x40000800
 8009e80:	40000c00 	.word	0x40000c00
 8009e84:	40014000 	.word	0x40014000
 8009e88:	40014400 	.word	0x40014400
 8009e8c:	40014800 	.word	0x40014800

08009e90 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009e90:	b480      	push	{r7}
 8009e92:	b087      	sub	sp, #28
 8009e94:	af00      	add	r7, sp, #0
 8009e96:	60f8      	str	r0, [r7, #12]
 8009e98:	60b9      	str	r1, [r7, #8]
 8009e9a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8009e9c:	68fb      	ldr	r3, [r7, #12]
 8009e9e:	6a1b      	ldr	r3, [r3, #32]
 8009ea0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009ea2:	68fb      	ldr	r3, [r7, #12]
 8009ea4:	6a1b      	ldr	r3, [r3, #32]
 8009ea6:	f023 0201 	bic.w	r2, r3, #1
 8009eaa:	68fb      	ldr	r3, [r7, #12]
 8009eac:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009eae:	68fb      	ldr	r3, [r7, #12]
 8009eb0:	699b      	ldr	r3, [r3, #24]
 8009eb2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009eb4:	693b      	ldr	r3, [r7, #16]
 8009eb6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8009eba:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8009ebc:	687b      	ldr	r3, [r7, #4]
 8009ebe:	011b      	lsls	r3, r3, #4
 8009ec0:	693a      	ldr	r2, [r7, #16]
 8009ec2:	4313      	orrs	r3, r2
 8009ec4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8009ec6:	697b      	ldr	r3, [r7, #20]
 8009ec8:	f023 030a 	bic.w	r3, r3, #10
 8009ecc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8009ece:	697a      	ldr	r2, [r7, #20]
 8009ed0:	68bb      	ldr	r3, [r7, #8]
 8009ed2:	4313      	orrs	r3, r2
 8009ed4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8009ed6:	68fb      	ldr	r3, [r7, #12]
 8009ed8:	693a      	ldr	r2, [r7, #16]
 8009eda:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009edc:	68fb      	ldr	r3, [r7, #12]
 8009ede:	697a      	ldr	r2, [r7, #20]
 8009ee0:	621a      	str	r2, [r3, #32]
}
 8009ee2:	bf00      	nop
 8009ee4:	371c      	adds	r7, #28
 8009ee6:	46bd      	mov	sp, r7
 8009ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009eec:	4770      	bx	lr

08009eee <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009eee:	b480      	push	{r7}
 8009ef0:	b087      	sub	sp, #28
 8009ef2:	af00      	add	r7, sp, #0
 8009ef4:	60f8      	str	r0, [r7, #12]
 8009ef6:	60b9      	str	r1, [r7, #8]
 8009ef8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009efa:	68fb      	ldr	r3, [r7, #12]
 8009efc:	6a1b      	ldr	r3, [r3, #32]
 8009efe:	f023 0210 	bic.w	r2, r3, #16
 8009f02:	68fb      	ldr	r3, [r7, #12]
 8009f04:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009f06:	68fb      	ldr	r3, [r7, #12]
 8009f08:	699b      	ldr	r3, [r3, #24]
 8009f0a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8009f0c:	68fb      	ldr	r3, [r7, #12]
 8009f0e:	6a1b      	ldr	r3, [r3, #32]
 8009f10:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8009f12:	697b      	ldr	r3, [r7, #20]
 8009f14:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8009f18:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8009f1a:	687b      	ldr	r3, [r7, #4]
 8009f1c:	031b      	lsls	r3, r3, #12
 8009f1e:	697a      	ldr	r2, [r7, #20]
 8009f20:	4313      	orrs	r3, r2
 8009f22:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8009f24:	693b      	ldr	r3, [r7, #16]
 8009f26:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8009f2a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8009f2c:	68bb      	ldr	r3, [r7, #8]
 8009f2e:	011b      	lsls	r3, r3, #4
 8009f30:	693a      	ldr	r2, [r7, #16]
 8009f32:	4313      	orrs	r3, r2
 8009f34:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8009f36:	68fb      	ldr	r3, [r7, #12]
 8009f38:	697a      	ldr	r2, [r7, #20]
 8009f3a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009f3c:	68fb      	ldr	r3, [r7, #12]
 8009f3e:	693a      	ldr	r2, [r7, #16]
 8009f40:	621a      	str	r2, [r3, #32]
}
 8009f42:	bf00      	nop
 8009f44:	371c      	adds	r7, #28
 8009f46:	46bd      	mov	sp, r7
 8009f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f4c:	4770      	bx	lr

08009f4e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8009f4e:	b480      	push	{r7}
 8009f50:	b085      	sub	sp, #20
 8009f52:	af00      	add	r7, sp, #0
 8009f54:	6078      	str	r0, [r7, #4]
 8009f56:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8009f58:	687b      	ldr	r3, [r7, #4]
 8009f5a:	689b      	ldr	r3, [r3, #8]
 8009f5c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8009f5e:	68fb      	ldr	r3, [r7, #12]
 8009f60:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009f64:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8009f66:	683a      	ldr	r2, [r7, #0]
 8009f68:	68fb      	ldr	r3, [r7, #12]
 8009f6a:	4313      	orrs	r3, r2
 8009f6c:	f043 0307 	orr.w	r3, r3, #7
 8009f70:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009f72:	687b      	ldr	r3, [r7, #4]
 8009f74:	68fa      	ldr	r2, [r7, #12]
 8009f76:	609a      	str	r2, [r3, #8]
}
 8009f78:	bf00      	nop
 8009f7a:	3714      	adds	r7, #20
 8009f7c:	46bd      	mov	sp, r7
 8009f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f82:	4770      	bx	lr

08009f84 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8009f84:	b480      	push	{r7}
 8009f86:	b087      	sub	sp, #28
 8009f88:	af00      	add	r7, sp, #0
 8009f8a:	60f8      	str	r0, [r7, #12]
 8009f8c:	60b9      	str	r1, [r7, #8]
 8009f8e:	607a      	str	r2, [r7, #4]
 8009f90:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8009f92:	68fb      	ldr	r3, [r7, #12]
 8009f94:	689b      	ldr	r3, [r3, #8]
 8009f96:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009f98:	697b      	ldr	r3, [r7, #20]
 8009f9a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8009f9e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8009fa0:	683b      	ldr	r3, [r7, #0]
 8009fa2:	021a      	lsls	r2, r3, #8
 8009fa4:	687b      	ldr	r3, [r7, #4]
 8009fa6:	431a      	orrs	r2, r3
 8009fa8:	68bb      	ldr	r3, [r7, #8]
 8009faa:	4313      	orrs	r3, r2
 8009fac:	697a      	ldr	r2, [r7, #20]
 8009fae:	4313      	orrs	r3, r2
 8009fb0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009fb2:	68fb      	ldr	r3, [r7, #12]
 8009fb4:	697a      	ldr	r2, [r7, #20]
 8009fb6:	609a      	str	r2, [r3, #8]
}
 8009fb8:	bf00      	nop
 8009fba:	371c      	adds	r7, #28
 8009fbc:	46bd      	mov	sp, r7
 8009fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fc2:	4770      	bx	lr

08009fc4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8009fc4:	b480      	push	{r7}
 8009fc6:	b085      	sub	sp, #20
 8009fc8:	af00      	add	r7, sp, #0
 8009fca:	6078      	str	r0, [r7, #4]
 8009fcc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8009fce:	687b      	ldr	r3, [r7, #4]
 8009fd0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009fd4:	2b01      	cmp	r3, #1
 8009fd6:	d101      	bne.n	8009fdc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8009fd8:	2302      	movs	r3, #2
 8009fda:	e050      	b.n	800a07e <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8009fdc:	687b      	ldr	r3, [r7, #4]
 8009fde:	2201      	movs	r2, #1
 8009fe0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009fe4:	687b      	ldr	r3, [r7, #4]
 8009fe6:	2202      	movs	r2, #2
 8009fe8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009fec:	687b      	ldr	r3, [r7, #4]
 8009fee:	681b      	ldr	r3, [r3, #0]
 8009ff0:	685b      	ldr	r3, [r3, #4]
 8009ff2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009ff4:	687b      	ldr	r3, [r7, #4]
 8009ff6:	681b      	ldr	r3, [r3, #0]
 8009ff8:	689b      	ldr	r3, [r3, #8]
 8009ffa:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8009ffc:	68fb      	ldr	r3, [r7, #12]
 8009ffe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a002:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800a004:	683b      	ldr	r3, [r7, #0]
 800a006:	681b      	ldr	r3, [r3, #0]
 800a008:	68fa      	ldr	r2, [r7, #12]
 800a00a:	4313      	orrs	r3, r2
 800a00c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800a00e:	687b      	ldr	r3, [r7, #4]
 800a010:	681b      	ldr	r3, [r3, #0]
 800a012:	68fa      	ldr	r2, [r7, #12]
 800a014:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a016:	687b      	ldr	r3, [r7, #4]
 800a018:	681b      	ldr	r3, [r3, #0]
 800a01a:	4a1c      	ldr	r2, [pc, #112]	; (800a08c <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800a01c:	4293      	cmp	r3, r2
 800a01e:	d018      	beq.n	800a052 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800a020:	687b      	ldr	r3, [r7, #4]
 800a022:	681b      	ldr	r3, [r3, #0]
 800a024:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a028:	d013      	beq.n	800a052 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800a02a:	687b      	ldr	r3, [r7, #4]
 800a02c:	681b      	ldr	r3, [r3, #0]
 800a02e:	4a18      	ldr	r2, [pc, #96]	; (800a090 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800a030:	4293      	cmp	r3, r2
 800a032:	d00e      	beq.n	800a052 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800a034:	687b      	ldr	r3, [r7, #4]
 800a036:	681b      	ldr	r3, [r3, #0]
 800a038:	4a16      	ldr	r2, [pc, #88]	; (800a094 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800a03a:	4293      	cmp	r3, r2
 800a03c:	d009      	beq.n	800a052 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800a03e:	687b      	ldr	r3, [r7, #4]
 800a040:	681b      	ldr	r3, [r3, #0]
 800a042:	4a15      	ldr	r2, [pc, #84]	; (800a098 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800a044:	4293      	cmp	r3, r2
 800a046:	d004      	beq.n	800a052 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800a048:	687b      	ldr	r3, [r7, #4]
 800a04a:	681b      	ldr	r3, [r3, #0]
 800a04c:	4a13      	ldr	r2, [pc, #76]	; (800a09c <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800a04e:	4293      	cmp	r3, r2
 800a050:	d10c      	bne.n	800a06c <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800a052:	68bb      	ldr	r3, [r7, #8]
 800a054:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a058:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800a05a:	683b      	ldr	r3, [r7, #0]
 800a05c:	685b      	ldr	r3, [r3, #4]
 800a05e:	68ba      	ldr	r2, [r7, #8]
 800a060:	4313      	orrs	r3, r2
 800a062:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800a064:	687b      	ldr	r3, [r7, #4]
 800a066:	681b      	ldr	r3, [r3, #0]
 800a068:	68ba      	ldr	r2, [r7, #8]
 800a06a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800a06c:	687b      	ldr	r3, [r7, #4]
 800a06e:	2201      	movs	r2, #1
 800a070:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800a074:	687b      	ldr	r3, [r7, #4]
 800a076:	2200      	movs	r2, #0
 800a078:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a07c:	2300      	movs	r3, #0
}
 800a07e:	4618      	mov	r0, r3
 800a080:	3714      	adds	r7, #20
 800a082:	46bd      	mov	sp, r7
 800a084:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a088:	4770      	bx	lr
 800a08a:	bf00      	nop
 800a08c:	40010000 	.word	0x40010000
 800a090:	40000400 	.word	0x40000400
 800a094:	40000800 	.word	0x40000800
 800a098:	40000c00 	.word	0x40000c00
 800a09c:	40014000 	.word	0x40014000

0800a0a0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800a0a0:	b480      	push	{r7}
 800a0a2:	b083      	sub	sp, #12
 800a0a4:	af00      	add	r7, sp, #0
 800a0a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800a0a8:	bf00      	nop
 800a0aa:	370c      	adds	r7, #12
 800a0ac:	46bd      	mov	sp, r7
 800a0ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0b2:	4770      	bx	lr

0800a0b4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800a0b4:	b480      	push	{r7}
 800a0b6:	b083      	sub	sp, #12
 800a0b8:	af00      	add	r7, sp, #0
 800a0ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800a0bc:	bf00      	nop
 800a0be:	370c      	adds	r7, #12
 800a0c0:	46bd      	mov	sp, r7
 800a0c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0c6:	4770      	bx	lr

0800a0c8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800a0c8:	b580      	push	{r7, lr}
 800a0ca:	b082      	sub	sp, #8
 800a0cc:	af00      	add	r7, sp, #0
 800a0ce:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800a0d0:	687b      	ldr	r3, [r7, #4]
 800a0d2:	2b00      	cmp	r3, #0
 800a0d4:	d101      	bne.n	800a0da <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800a0d6:	2301      	movs	r3, #1
 800a0d8:	e03f      	b.n	800a15a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800a0da:	687b      	ldr	r3, [r7, #4]
 800a0dc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a0e0:	b2db      	uxtb	r3, r3
 800a0e2:	2b00      	cmp	r3, #0
 800a0e4:	d106      	bne.n	800a0f4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800a0e6:	687b      	ldr	r3, [r7, #4]
 800a0e8:	2200      	movs	r2, #0
 800a0ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800a0ee:	6878      	ldr	r0, [r7, #4]
 800a0f0:	f7f7 fb70 	bl	80017d4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800a0f4:	687b      	ldr	r3, [r7, #4]
 800a0f6:	2224      	movs	r2, #36	; 0x24
 800a0f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800a0fc:	687b      	ldr	r3, [r7, #4]
 800a0fe:	681b      	ldr	r3, [r3, #0]
 800a100:	68da      	ldr	r2, [r3, #12]
 800a102:	687b      	ldr	r3, [r7, #4]
 800a104:	681b      	ldr	r3, [r3, #0]
 800a106:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800a10a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800a10c:	6878      	ldr	r0, [r7, #4]
 800a10e:	f000 f929 	bl	800a364 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800a112:	687b      	ldr	r3, [r7, #4]
 800a114:	681b      	ldr	r3, [r3, #0]
 800a116:	691a      	ldr	r2, [r3, #16]
 800a118:	687b      	ldr	r3, [r7, #4]
 800a11a:	681b      	ldr	r3, [r3, #0]
 800a11c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800a120:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800a122:	687b      	ldr	r3, [r7, #4]
 800a124:	681b      	ldr	r3, [r3, #0]
 800a126:	695a      	ldr	r2, [r3, #20]
 800a128:	687b      	ldr	r3, [r7, #4]
 800a12a:	681b      	ldr	r3, [r3, #0]
 800a12c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800a130:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800a132:	687b      	ldr	r3, [r7, #4]
 800a134:	681b      	ldr	r3, [r3, #0]
 800a136:	68da      	ldr	r2, [r3, #12]
 800a138:	687b      	ldr	r3, [r7, #4]
 800a13a:	681b      	ldr	r3, [r3, #0]
 800a13c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800a140:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a142:	687b      	ldr	r3, [r7, #4]
 800a144:	2200      	movs	r2, #0
 800a146:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800a148:	687b      	ldr	r3, [r7, #4]
 800a14a:	2220      	movs	r2, #32
 800a14c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800a150:	687b      	ldr	r3, [r7, #4]
 800a152:	2220      	movs	r2, #32
 800a154:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800a158:	2300      	movs	r3, #0
}
 800a15a:	4618      	mov	r0, r3
 800a15c:	3708      	adds	r7, #8
 800a15e:	46bd      	mov	sp, r7
 800a160:	bd80      	pop	{r7, pc}

0800a162 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a162:	b580      	push	{r7, lr}
 800a164:	b08a      	sub	sp, #40	; 0x28
 800a166:	af02      	add	r7, sp, #8
 800a168:	60f8      	str	r0, [r7, #12]
 800a16a:	60b9      	str	r1, [r7, #8]
 800a16c:	603b      	str	r3, [r7, #0]
 800a16e:	4613      	mov	r3, r2
 800a170:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800a172:	2300      	movs	r3, #0
 800a174:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800a176:	68fb      	ldr	r3, [r7, #12]
 800a178:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a17c:	b2db      	uxtb	r3, r3
 800a17e:	2b20      	cmp	r3, #32
 800a180:	d17c      	bne.n	800a27c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800a182:	68bb      	ldr	r3, [r7, #8]
 800a184:	2b00      	cmp	r3, #0
 800a186:	d002      	beq.n	800a18e <HAL_UART_Transmit+0x2c>
 800a188:	88fb      	ldrh	r3, [r7, #6]
 800a18a:	2b00      	cmp	r3, #0
 800a18c:	d101      	bne.n	800a192 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800a18e:	2301      	movs	r3, #1
 800a190:	e075      	b.n	800a27e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800a192:	68fb      	ldr	r3, [r7, #12]
 800a194:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a198:	2b01      	cmp	r3, #1
 800a19a:	d101      	bne.n	800a1a0 <HAL_UART_Transmit+0x3e>
 800a19c:	2302      	movs	r3, #2
 800a19e:	e06e      	b.n	800a27e <HAL_UART_Transmit+0x11c>
 800a1a0:	68fb      	ldr	r3, [r7, #12]
 800a1a2:	2201      	movs	r2, #1
 800a1a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a1a8:	68fb      	ldr	r3, [r7, #12]
 800a1aa:	2200      	movs	r2, #0
 800a1ac:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800a1ae:	68fb      	ldr	r3, [r7, #12]
 800a1b0:	2221      	movs	r2, #33	; 0x21
 800a1b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800a1b6:	f7fc fde7 	bl	8006d88 <HAL_GetTick>
 800a1ba:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800a1bc:	68fb      	ldr	r3, [r7, #12]
 800a1be:	88fa      	ldrh	r2, [r7, #6]
 800a1c0:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800a1c2:	68fb      	ldr	r3, [r7, #12]
 800a1c4:	88fa      	ldrh	r2, [r7, #6]
 800a1c6:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a1c8:	68fb      	ldr	r3, [r7, #12]
 800a1ca:	689b      	ldr	r3, [r3, #8]
 800a1cc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a1d0:	d108      	bne.n	800a1e4 <HAL_UART_Transmit+0x82>
 800a1d2:	68fb      	ldr	r3, [r7, #12]
 800a1d4:	691b      	ldr	r3, [r3, #16]
 800a1d6:	2b00      	cmp	r3, #0
 800a1d8:	d104      	bne.n	800a1e4 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800a1da:	2300      	movs	r3, #0
 800a1dc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800a1de:	68bb      	ldr	r3, [r7, #8]
 800a1e0:	61bb      	str	r3, [r7, #24]
 800a1e2:	e003      	b.n	800a1ec <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800a1e4:	68bb      	ldr	r3, [r7, #8]
 800a1e6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800a1e8:	2300      	movs	r3, #0
 800a1ea:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800a1ec:	68fb      	ldr	r3, [r7, #12]
 800a1ee:	2200      	movs	r2, #0
 800a1f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800a1f4:	e02a      	b.n	800a24c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800a1f6:	683b      	ldr	r3, [r7, #0]
 800a1f8:	9300      	str	r3, [sp, #0]
 800a1fa:	697b      	ldr	r3, [r7, #20]
 800a1fc:	2200      	movs	r2, #0
 800a1fe:	2180      	movs	r1, #128	; 0x80
 800a200:	68f8      	ldr	r0, [r7, #12]
 800a202:	f000 f840 	bl	800a286 <UART_WaitOnFlagUntilTimeout>
 800a206:	4603      	mov	r3, r0
 800a208:	2b00      	cmp	r3, #0
 800a20a:	d001      	beq.n	800a210 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800a20c:	2303      	movs	r3, #3
 800a20e:	e036      	b.n	800a27e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800a210:	69fb      	ldr	r3, [r7, #28]
 800a212:	2b00      	cmp	r3, #0
 800a214:	d10b      	bne.n	800a22e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800a216:	69bb      	ldr	r3, [r7, #24]
 800a218:	881b      	ldrh	r3, [r3, #0]
 800a21a:	461a      	mov	r2, r3
 800a21c:	68fb      	ldr	r3, [r7, #12]
 800a21e:	681b      	ldr	r3, [r3, #0]
 800a220:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800a224:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800a226:	69bb      	ldr	r3, [r7, #24]
 800a228:	3302      	adds	r3, #2
 800a22a:	61bb      	str	r3, [r7, #24]
 800a22c:	e007      	b.n	800a23e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800a22e:	69fb      	ldr	r3, [r7, #28]
 800a230:	781a      	ldrb	r2, [r3, #0]
 800a232:	68fb      	ldr	r3, [r7, #12]
 800a234:	681b      	ldr	r3, [r3, #0]
 800a236:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800a238:	69fb      	ldr	r3, [r7, #28]
 800a23a:	3301      	adds	r3, #1
 800a23c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800a23e:	68fb      	ldr	r3, [r7, #12]
 800a240:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800a242:	b29b      	uxth	r3, r3
 800a244:	3b01      	subs	r3, #1
 800a246:	b29a      	uxth	r2, r3
 800a248:	68fb      	ldr	r3, [r7, #12]
 800a24a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800a24c:	68fb      	ldr	r3, [r7, #12]
 800a24e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800a250:	b29b      	uxth	r3, r3
 800a252:	2b00      	cmp	r3, #0
 800a254:	d1cf      	bne.n	800a1f6 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800a256:	683b      	ldr	r3, [r7, #0]
 800a258:	9300      	str	r3, [sp, #0]
 800a25a:	697b      	ldr	r3, [r7, #20]
 800a25c:	2200      	movs	r2, #0
 800a25e:	2140      	movs	r1, #64	; 0x40
 800a260:	68f8      	ldr	r0, [r7, #12]
 800a262:	f000 f810 	bl	800a286 <UART_WaitOnFlagUntilTimeout>
 800a266:	4603      	mov	r3, r0
 800a268:	2b00      	cmp	r3, #0
 800a26a:	d001      	beq.n	800a270 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800a26c:	2303      	movs	r3, #3
 800a26e:	e006      	b.n	800a27e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800a270:	68fb      	ldr	r3, [r7, #12]
 800a272:	2220      	movs	r2, #32
 800a274:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800a278:	2300      	movs	r3, #0
 800a27a:	e000      	b.n	800a27e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800a27c:	2302      	movs	r3, #2
  }
}
 800a27e:	4618      	mov	r0, r3
 800a280:	3720      	adds	r7, #32
 800a282:	46bd      	mov	sp, r7
 800a284:	bd80      	pop	{r7, pc}

0800a286 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800a286:	b580      	push	{r7, lr}
 800a288:	b090      	sub	sp, #64	; 0x40
 800a28a:	af00      	add	r7, sp, #0
 800a28c:	60f8      	str	r0, [r7, #12]
 800a28e:	60b9      	str	r1, [r7, #8]
 800a290:	603b      	str	r3, [r7, #0]
 800a292:	4613      	mov	r3, r2
 800a294:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a296:	e050      	b.n	800a33a <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a298:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a29a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a29e:	d04c      	beq.n	800a33a <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800a2a0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a2a2:	2b00      	cmp	r3, #0
 800a2a4:	d007      	beq.n	800a2b6 <UART_WaitOnFlagUntilTimeout+0x30>
 800a2a6:	f7fc fd6f 	bl	8006d88 <HAL_GetTick>
 800a2aa:	4602      	mov	r2, r0
 800a2ac:	683b      	ldr	r3, [r7, #0]
 800a2ae:	1ad3      	subs	r3, r2, r3
 800a2b0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a2b2:	429a      	cmp	r2, r3
 800a2b4:	d241      	bcs.n	800a33a <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800a2b6:	68fb      	ldr	r3, [r7, #12]
 800a2b8:	681b      	ldr	r3, [r3, #0]
 800a2ba:	330c      	adds	r3, #12
 800a2bc:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a2be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a2c0:	e853 3f00 	ldrex	r3, [r3]
 800a2c4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800a2c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a2c8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800a2cc:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a2ce:	68fb      	ldr	r3, [r7, #12]
 800a2d0:	681b      	ldr	r3, [r3, #0]
 800a2d2:	330c      	adds	r3, #12
 800a2d4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800a2d6:	637a      	str	r2, [r7, #52]	; 0x34
 800a2d8:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a2da:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800a2dc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a2de:	e841 2300 	strex	r3, r2, [r1]
 800a2e2:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800a2e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a2e6:	2b00      	cmp	r3, #0
 800a2e8:	d1e5      	bne.n	800a2b6 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a2ea:	68fb      	ldr	r3, [r7, #12]
 800a2ec:	681b      	ldr	r3, [r3, #0]
 800a2ee:	3314      	adds	r3, #20
 800a2f0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a2f2:	697b      	ldr	r3, [r7, #20]
 800a2f4:	e853 3f00 	ldrex	r3, [r3]
 800a2f8:	613b      	str	r3, [r7, #16]
   return(result);
 800a2fa:	693b      	ldr	r3, [r7, #16]
 800a2fc:	f023 0301 	bic.w	r3, r3, #1
 800a300:	63bb      	str	r3, [r7, #56]	; 0x38
 800a302:	68fb      	ldr	r3, [r7, #12]
 800a304:	681b      	ldr	r3, [r3, #0]
 800a306:	3314      	adds	r3, #20
 800a308:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a30a:	623a      	str	r2, [r7, #32]
 800a30c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a30e:	69f9      	ldr	r1, [r7, #28]
 800a310:	6a3a      	ldr	r2, [r7, #32]
 800a312:	e841 2300 	strex	r3, r2, [r1]
 800a316:	61bb      	str	r3, [r7, #24]
   return(result);
 800a318:	69bb      	ldr	r3, [r7, #24]
 800a31a:	2b00      	cmp	r3, #0
 800a31c:	d1e5      	bne.n	800a2ea <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800a31e:	68fb      	ldr	r3, [r7, #12]
 800a320:	2220      	movs	r2, #32
 800a322:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800a326:	68fb      	ldr	r3, [r7, #12]
 800a328:	2220      	movs	r2, #32
 800a32a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800a32e:	68fb      	ldr	r3, [r7, #12]
 800a330:	2200      	movs	r2, #0
 800a332:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800a336:	2303      	movs	r3, #3
 800a338:	e00f      	b.n	800a35a <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a33a:	68fb      	ldr	r3, [r7, #12]
 800a33c:	681b      	ldr	r3, [r3, #0]
 800a33e:	681a      	ldr	r2, [r3, #0]
 800a340:	68bb      	ldr	r3, [r7, #8]
 800a342:	4013      	ands	r3, r2
 800a344:	68ba      	ldr	r2, [r7, #8]
 800a346:	429a      	cmp	r2, r3
 800a348:	bf0c      	ite	eq
 800a34a:	2301      	moveq	r3, #1
 800a34c:	2300      	movne	r3, #0
 800a34e:	b2db      	uxtb	r3, r3
 800a350:	461a      	mov	r2, r3
 800a352:	79fb      	ldrb	r3, [r7, #7]
 800a354:	429a      	cmp	r2, r3
 800a356:	d09f      	beq.n	800a298 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800a358:	2300      	movs	r3, #0
}
 800a35a:	4618      	mov	r0, r3
 800a35c:	3740      	adds	r7, #64	; 0x40
 800a35e:	46bd      	mov	sp, r7
 800a360:	bd80      	pop	{r7, pc}
	...

0800a364 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a364:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800a368:	b0c0      	sub	sp, #256	; 0x100
 800a36a:	af00      	add	r7, sp, #0
 800a36c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a370:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a374:	681b      	ldr	r3, [r3, #0]
 800a376:	691b      	ldr	r3, [r3, #16]
 800a378:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800a37c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a380:	68d9      	ldr	r1, [r3, #12]
 800a382:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a386:	681a      	ldr	r2, [r3, #0]
 800a388:	ea40 0301 	orr.w	r3, r0, r1
 800a38c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800a38e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a392:	689a      	ldr	r2, [r3, #8]
 800a394:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a398:	691b      	ldr	r3, [r3, #16]
 800a39a:	431a      	orrs	r2, r3
 800a39c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a3a0:	695b      	ldr	r3, [r3, #20]
 800a3a2:	431a      	orrs	r2, r3
 800a3a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a3a8:	69db      	ldr	r3, [r3, #28]
 800a3aa:	4313      	orrs	r3, r2
 800a3ac:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800a3b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a3b4:	681b      	ldr	r3, [r3, #0]
 800a3b6:	68db      	ldr	r3, [r3, #12]
 800a3b8:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800a3bc:	f021 010c 	bic.w	r1, r1, #12
 800a3c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a3c4:	681a      	ldr	r2, [r3, #0]
 800a3c6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800a3ca:	430b      	orrs	r3, r1
 800a3cc:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800a3ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a3d2:	681b      	ldr	r3, [r3, #0]
 800a3d4:	695b      	ldr	r3, [r3, #20]
 800a3d6:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800a3da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a3de:	6999      	ldr	r1, [r3, #24]
 800a3e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a3e4:	681a      	ldr	r2, [r3, #0]
 800a3e6:	ea40 0301 	orr.w	r3, r0, r1
 800a3ea:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800a3ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a3f0:	681a      	ldr	r2, [r3, #0]
 800a3f2:	4b8f      	ldr	r3, [pc, #572]	; (800a630 <UART_SetConfig+0x2cc>)
 800a3f4:	429a      	cmp	r2, r3
 800a3f6:	d005      	beq.n	800a404 <UART_SetConfig+0xa0>
 800a3f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a3fc:	681a      	ldr	r2, [r3, #0]
 800a3fe:	4b8d      	ldr	r3, [pc, #564]	; (800a634 <UART_SetConfig+0x2d0>)
 800a400:	429a      	cmp	r2, r3
 800a402:	d104      	bne.n	800a40e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800a404:	f7fe fd9c 	bl	8008f40 <HAL_RCC_GetPCLK2Freq>
 800a408:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800a40c:	e003      	b.n	800a416 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800a40e:	f7fe fd83 	bl	8008f18 <HAL_RCC_GetPCLK1Freq>
 800a412:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a416:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a41a:	69db      	ldr	r3, [r3, #28]
 800a41c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a420:	f040 810c 	bne.w	800a63c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800a424:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a428:	2200      	movs	r2, #0
 800a42a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800a42e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800a432:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800a436:	4622      	mov	r2, r4
 800a438:	462b      	mov	r3, r5
 800a43a:	1891      	adds	r1, r2, r2
 800a43c:	65b9      	str	r1, [r7, #88]	; 0x58
 800a43e:	415b      	adcs	r3, r3
 800a440:	65fb      	str	r3, [r7, #92]	; 0x5c
 800a442:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800a446:	4621      	mov	r1, r4
 800a448:	eb12 0801 	adds.w	r8, r2, r1
 800a44c:	4629      	mov	r1, r5
 800a44e:	eb43 0901 	adc.w	r9, r3, r1
 800a452:	f04f 0200 	mov.w	r2, #0
 800a456:	f04f 0300 	mov.w	r3, #0
 800a45a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800a45e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800a462:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800a466:	4690      	mov	r8, r2
 800a468:	4699      	mov	r9, r3
 800a46a:	4623      	mov	r3, r4
 800a46c:	eb18 0303 	adds.w	r3, r8, r3
 800a470:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800a474:	462b      	mov	r3, r5
 800a476:	eb49 0303 	adc.w	r3, r9, r3
 800a47a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800a47e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a482:	685b      	ldr	r3, [r3, #4]
 800a484:	2200      	movs	r2, #0
 800a486:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800a48a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800a48e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800a492:	460b      	mov	r3, r1
 800a494:	18db      	adds	r3, r3, r3
 800a496:	653b      	str	r3, [r7, #80]	; 0x50
 800a498:	4613      	mov	r3, r2
 800a49a:	eb42 0303 	adc.w	r3, r2, r3
 800a49e:	657b      	str	r3, [r7, #84]	; 0x54
 800a4a0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800a4a4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800a4a8:	f7f5 fef2 	bl	8000290 <__aeabi_uldivmod>
 800a4ac:	4602      	mov	r2, r0
 800a4ae:	460b      	mov	r3, r1
 800a4b0:	4b61      	ldr	r3, [pc, #388]	; (800a638 <UART_SetConfig+0x2d4>)
 800a4b2:	fba3 2302 	umull	r2, r3, r3, r2
 800a4b6:	095b      	lsrs	r3, r3, #5
 800a4b8:	011c      	lsls	r4, r3, #4
 800a4ba:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a4be:	2200      	movs	r2, #0
 800a4c0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800a4c4:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800a4c8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800a4cc:	4642      	mov	r2, r8
 800a4ce:	464b      	mov	r3, r9
 800a4d0:	1891      	adds	r1, r2, r2
 800a4d2:	64b9      	str	r1, [r7, #72]	; 0x48
 800a4d4:	415b      	adcs	r3, r3
 800a4d6:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a4d8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800a4dc:	4641      	mov	r1, r8
 800a4de:	eb12 0a01 	adds.w	sl, r2, r1
 800a4e2:	4649      	mov	r1, r9
 800a4e4:	eb43 0b01 	adc.w	fp, r3, r1
 800a4e8:	f04f 0200 	mov.w	r2, #0
 800a4ec:	f04f 0300 	mov.w	r3, #0
 800a4f0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800a4f4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800a4f8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800a4fc:	4692      	mov	sl, r2
 800a4fe:	469b      	mov	fp, r3
 800a500:	4643      	mov	r3, r8
 800a502:	eb1a 0303 	adds.w	r3, sl, r3
 800a506:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800a50a:	464b      	mov	r3, r9
 800a50c:	eb4b 0303 	adc.w	r3, fp, r3
 800a510:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800a514:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a518:	685b      	ldr	r3, [r3, #4]
 800a51a:	2200      	movs	r2, #0
 800a51c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800a520:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800a524:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800a528:	460b      	mov	r3, r1
 800a52a:	18db      	adds	r3, r3, r3
 800a52c:	643b      	str	r3, [r7, #64]	; 0x40
 800a52e:	4613      	mov	r3, r2
 800a530:	eb42 0303 	adc.w	r3, r2, r3
 800a534:	647b      	str	r3, [r7, #68]	; 0x44
 800a536:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800a53a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800a53e:	f7f5 fea7 	bl	8000290 <__aeabi_uldivmod>
 800a542:	4602      	mov	r2, r0
 800a544:	460b      	mov	r3, r1
 800a546:	4611      	mov	r1, r2
 800a548:	4b3b      	ldr	r3, [pc, #236]	; (800a638 <UART_SetConfig+0x2d4>)
 800a54a:	fba3 2301 	umull	r2, r3, r3, r1
 800a54e:	095b      	lsrs	r3, r3, #5
 800a550:	2264      	movs	r2, #100	; 0x64
 800a552:	fb02 f303 	mul.w	r3, r2, r3
 800a556:	1acb      	subs	r3, r1, r3
 800a558:	00db      	lsls	r3, r3, #3
 800a55a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800a55e:	4b36      	ldr	r3, [pc, #216]	; (800a638 <UART_SetConfig+0x2d4>)
 800a560:	fba3 2302 	umull	r2, r3, r3, r2
 800a564:	095b      	lsrs	r3, r3, #5
 800a566:	005b      	lsls	r3, r3, #1
 800a568:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800a56c:	441c      	add	r4, r3
 800a56e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a572:	2200      	movs	r2, #0
 800a574:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800a578:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800a57c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800a580:	4642      	mov	r2, r8
 800a582:	464b      	mov	r3, r9
 800a584:	1891      	adds	r1, r2, r2
 800a586:	63b9      	str	r1, [r7, #56]	; 0x38
 800a588:	415b      	adcs	r3, r3
 800a58a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a58c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800a590:	4641      	mov	r1, r8
 800a592:	1851      	adds	r1, r2, r1
 800a594:	6339      	str	r1, [r7, #48]	; 0x30
 800a596:	4649      	mov	r1, r9
 800a598:	414b      	adcs	r3, r1
 800a59a:	637b      	str	r3, [r7, #52]	; 0x34
 800a59c:	f04f 0200 	mov.w	r2, #0
 800a5a0:	f04f 0300 	mov.w	r3, #0
 800a5a4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800a5a8:	4659      	mov	r1, fp
 800a5aa:	00cb      	lsls	r3, r1, #3
 800a5ac:	4651      	mov	r1, sl
 800a5ae:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800a5b2:	4651      	mov	r1, sl
 800a5b4:	00ca      	lsls	r2, r1, #3
 800a5b6:	4610      	mov	r0, r2
 800a5b8:	4619      	mov	r1, r3
 800a5ba:	4603      	mov	r3, r0
 800a5bc:	4642      	mov	r2, r8
 800a5be:	189b      	adds	r3, r3, r2
 800a5c0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800a5c4:	464b      	mov	r3, r9
 800a5c6:	460a      	mov	r2, r1
 800a5c8:	eb42 0303 	adc.w	r3, r2, r3
 800a5cc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800a5d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a5d4:	685b      	ldr	r3, [r3, #4]
 800a5d6:	2200      	movs	r2, #0
 800a5d8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800a5dc:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800a5e0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800a5e4:	460b      	mov	r3, r1
 800a5e6:	18db      	adds	r3, r3, r3
 800a5e8:	62bb      	str	r3, [r7, #40]	; 0x28
 800a5ea:	4613      	mov	r3, r2
 800a5ec:	eb42 0303 	adc.w	r3, r2, r3
 800a5f0:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a5f2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800a5f6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800a5fa:	f7f5 fe49 	bl	8000290 <__aeabi_uldivmod>
 800a5fe:	4602      	mov	r2, r0
 800a600:	460b      	mov	r3, r1
 800a602:	4b0d      	ldr	r3, [pc, #52]	; (800a638 <UART_SetConfig+0x2d4>)
 800a604:	fba3 1302 	umull	r1, r3, r3, r2
 800a608:	095b      	lsrs	r3, r3, #5
 800a60a:	2164      	movs	r1, #100	; 0x64
 800a60c:	fb01 f303 	mul.w	r3, r1, r3
 800a610:	1ad3      	subs	r3, r2, r3
 800a612:	00db      	lsls	r3, r3, #3
 800a614:	3332      	adds	r3, #50	; 0x32
 800a616:	4a08      	ldr	r2, [pc, #32]	; (800a638 <UART_SetConfig+0x2d4>)
 800a618:	fba2 2303 	umull	r2, r3, r2, r3
 800a61c:	095b      	lsrs	r3, r3, #5
 800a61e:	f003 0207 	and.w	r2, r3, #7
 800a622:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a626:	681b      	ldr	r3, [r3, #0]
 800a628:	4422      	add	r2, r4
 800a62a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800a62c:	e105      	b.n	800a83a <UART_SetConfig+0x4d6>
 800a62e:	bf00      	nop
 800a630:	40011000 	.word	0x40011000
 800a634:	40011400 	.word	0x40011400
 800a638:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800a63c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a640:	2200      	movs	r2, #0
 800a642:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800a646:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800a64a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800a64e:	4642      	mov	r2, r8
 800a650:	464b      	mov	r3, r9
 800a652:	1891      	adds	r1, r2, r2
 800a654:	6239      	str	r1, [r7, #32]
 800a656:	415b      	adcs	r3, r3
 800a658:	627b      	str	r3, [r7, #36]	; 0x24
 800a65a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800a65e:	4641      	mov	r1, r8
 800a660:	1854      	adds	r4, r2, r1
 800a662:	4649      	mov	r1, r9
 800a664:	eb43 0501 	adc.w	r5, r3, r1
 800a668:	f04f 0200 	mov.w	r2, #0
 800a66c:	f04f 0300 	mov.w	r3, #0
 800a670:	00eb      	lsls	r3, r5, #3
 800a672:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800a676:	00e2      	lsls	r2, r4, #3
 800a678:	4614      	mov	r4, r2
 800a67a:	461d      	mov	r5, r3
 800a67c:	4643      	mov	r3, r8
 800a67e:	18e3      	adds	r3, r4, r3
 800a680:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800a684:	464b      	mov	r3, r9
 800a686:	eb45 0303 	adc.w	r3, r5, r3
 800a68a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800a68e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a692:	685b      	ldr	r3, [r3, #4]
 800a694:	2200      	movs	r2, #0
 800a696:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800a69a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800a69e:	f04f 0200 	mov.w	r2, #0
 800a6a2:	f04f 0300 	mov.w	r3, #0
 800a6a6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800a6aa:	4629      	mov	r1, r5
 800a6ac:	008b      	lsls	r3, r1, #2
 800a6ae:	4621      	mov	r1, r4
 800a6b0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800a6b4:	4621      	mov	r1, r4
 800a6b6:	008a      	lsls	r2, r1, #2
 800a6b8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800a6bc:	f7f5 fde8 	bl	8000290 <__aeabi_uldivmod>
 800a6c0:	4602      	mov	r2, r0
 800a6c2:	460b      	mov	r3, r1
 800a6c4:	4b60      	ldr	r3, [pc, #384]	; (800a848 <UART_SetConfig+0x4e4>)
 800a6c6:	fba3 2302 	umull	r2, r3, r3, r2
 800a6ca:	095b      	lsrs	r3, r3, #5
 800a6cc:	011c      	lsls	r4, r3, #4
 800a6ce:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a6d2:	2200      	movs	r2, #0
 800a6d4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800a6d8:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800a6dc:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800a6e0:	4642      	mov	r2, r8
 800a6e2:	464b      	mov	r3, r9
 800a6e4:	1891      	adds	r1, r2, r2
 800a6e6:	61b9      	str	r1, [r7, #24]
 800a6e8:	415b      	adcs	r3, r3
 800a6ea:	61fb      	str	r3, [r7, #28]
 800a6ec:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800a6f0:	4641      	mov	r1, r8
 800a6f2:	1851      	adds	r1, r2, r1
 800a6f4:	6139      	str	r1, [r7, #16]
 800a6f6:	4649      	mov	r1, r9
 800a6f8:	414b      	adcs	r3, r1
 800a6fa:	617b      	str	r3, [r7, #20]
 800a6fc:	f04f 0200 	mov.w	r2, #0
 800a700:	f04f 0300 	mov.w	r3, #0
 800a704:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800a708:	4659      	mov	r1, fp
 800a70a:	00cb      	lsls	r3, r1, #3
 800a70c:	4651      	mov	r1, sl
 800a70e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800a712:	4651      	mov	r1, sl
 800a714:	00ca      	lsls	r2, r1, #3
 800a716:	4610      	mov	r0, r2
 800a718:	4619      	mov	r1, r3
 800a71a:	4603      	mov	r3, r0
 800a71c:	4642      	mov	r2, r8
 800a71e:	189b      	adds	r3, r3, r2
 800a720:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800a724:	464b      	mov	r3, r9
 800a726:	460a      	mov	r2, r1
 800a728:	eb42 0303 	adc.w	r3, r2, r3
 800a72c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800a730:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a734:	685b      	ldr	r3, [r3, #4]
 800a736:	2200      	movs	r2, #0
 800a738:	67bb      	str	r3, [r7, #120]	; 0x78
 800a73a:	67fa      	str	r2, [r7, #124]	; 0x7c
 800a73c:	f04f 0200 	mov.w	r2, #0
 800a740:	f04f 0300 	mov.w	r3, #0
 800a744:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800a748:	4649      	mov	r1, r9
 800a74a:	008b      	lsls	r3, r1, #2
 800a74c:	4641      	mov	r1, r8
 800a74e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800a752:	4641      	mov	r1, r8
 800a754:	008a      	lsls	r2, r1, #2
 800a756:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800a75a:	f7f5 fd99 	bl	8000290 <__aeabi_uldivmod>
 800a75e:	4602      	mov	r2, r0
 800a760:	460b      	mov	r3, r1
 800a762:	4b39      	ldr	r3, [pc, #228]	; (800a848 <UART_SetConfig+0x4e4>)
 800a764:	fba3 1302 	umull	r1, r3, r3, r2
 800a768:	095b      	lsrs	r3, r3, #5
 800a76a:	2164      	movs	r1, #100	; 0x64
 800a76c:	fb01 f303 	mul.w	r3, r1, r3
 800a770:	1ad3      	subs	r3, r2, r3
 800a772:	011b      	lsls	r3, r3, #4
 800a774:	3332      	adds	r3, #50	; 0x32
 800a776:	4a34      	ldr	r2, [pc, #208]	; (800a848 <UART_SetConfig+0x4e4>)
 800a778:	fba2 2303 	umull	r2, r3, r2, r3
 800a77c:	095b      	lsrs	r3, r3, #5
 800a77e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800a782:	441c      	add	r4, r3
 800a784:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a788:	2200      	movs	r2, #0
 800a78a:	673b      	str	r3, [r7, #112]	; 0x70
 800a78c:	677a      	str	r2, [r7, #116]	; 0x74
 800a78e:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800a792:	4642      	mov	r2, r8
 800a794:	464b      	mov	r3, r9
 800a796:	1891      	adds	r1, r2, r2
 800a798:	60b9      	str	r1, [r7, #8]
 800a79a:	415b      	adcs	r3, r3
 800a79c:	60fb      	str	r3, [r7, #12]
 800a79e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800a7a2:	4641      	mov	r1, r8
 800a7a4:	1851      	adds	r1, r2, r1
 800a7a6:	6039      	str	r1, [r7, #0]
 800a7a8:	4649      	mov	r1, r9
 800a7aa:	414b      	adcs	r3, r1
 800a7ac:	607b      	str	r3, [r7, #4]
 800a7ae:	f04f 0200 	mov.w	r2, #0
 800a7b2:	f04f 0300 	mov.w	r3, #0
 800a7b6:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800a7ba:	4659      	mov	r1, fp
 800a7bc:	00cb      	lsls	r3, r1, #3
 800a7be:	4651      	mov	r1, sl
 800a7c0:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800a7c4:	4651      	mov	r1, sl
 800a7c6:	00ca      	lsls	r2, r1, #3
 800a7c8:	4610      	mov	r0, r2
 800a7ca:	4619      	mov	r1, r3
 800a7cc:	4603      	mov	r3, r0
 800a7ce:	4642      	mov	r2, r8
 800a7d0:	189b      	adds	r3, r3, r2
 800a7d2:	66bb      	str	r3, [r7, #104]	; 0x68
 800a7d4:	464b      	mov	r3, r9
 800a7d6:	460a      	mov	r2, r1
 800a7d8:	eb42 0303 	adc.w	r3, r2, r3
 800a7dc:	66fb      	str	r3, [r7, #108]	; 0x6c
 800a7de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a7e2:	685b      	ldr	r3, [r3, #4]
 800a7e4:	2200      	movs	r2, #0
 800a7e6:	663b      	str	r3, [r7, #96]	; 0x60
 800a7e8:	667a      	str	r2, [r7, #100]	; 0x64
 800a7ea:	f04f 0200 	mov.w	r2, #0
 800a7ee:	f04f 0300 	mov.w	r3, #0
 800a7f2:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800a7f6:	4649      	mov	r1, r9
 800a7f8:	008b      	lsls	r3, r1, #2
 800a7fa:	4641      	mov	r1, r8
 800a7fc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800a800:	4641      	mov	r1, r8
 800a802:	008a      	lsls	r2, r1, #2
 800a804:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800a808:	f7f5 fd42 	bl	8000290 <__aeabi_uldivmod>
 800a80c:	4602      	mov	r2, r0
 800a80e:	460b      	mov	r3, r1
 800a810:	4b0d      	ldr	r3, [pc, #52]	; (800a848 <UART_SetConfig+0x4e4>)
 800a812:	fba3 1302 	umull	r1, r3, r3, r2
 800a816:	095b      	lsrs	r3, r3, #5
 800a818:	2164      	movs	r1, #100	; 0x64
 800a81a:	fb01 f303 	mul.w	r3, r1, r3
 800a81e:	1ad3      	subs	r3, r2, r3
 800a820:	011b      	lsls	r3, r3, #4
 800a822:	3332      	adds	r3, #50	; 0x32
 800a824:	4a08      	ldr	r2, [pc, #32]	; (800a848 <UART_SetConfig+0x4e4>)
 800a826:	fba2 2303 	umull	r2, r3, r2, r3
 800a82a:	095b      	lsrs	r3, r3, #5
 800a82c:	f003 020f 	and.w	r2, r3, #15
 800a830:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a834:	681b      	ldr	r3, [r3, #0]
 800a836:	4422      	add	r2, r4
 800a838:	609a      	str	r2, [r3, #8]
}
 800a83a:	bf00      	nop
 800a83c:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800a840:	46bd      	mov	sp, r7
 800a842:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800a846:	bf00      	nop
 800a848:	51eb851f 	.word	0x51eb851f

0800a84c <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800a84c:	b580      	push	{r7, lr}
 800a84e:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 800a850:	4904      	ldr	r1, [pc, #16]	; (800a864 <MX_FATFS_Init+0x18>)
 800a852:	4805      	ldr	r0, [pc, #20]	; (800a868 <MX_FATFS_Init+0x1c>)
 800a854:	f002 fede 	bl	800d614 <FATFS_LinkDriver>
 800a858:	4603      	mov	r3, r0
 800a85a:	461a      	mov	r2, r3
 800a85c:	4b03      	ldr	r3, [pc, #12]	; (800a86c <MX_FATFS_Init+0x20>)
 800a85e:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800a860:	bf00      	nop
 800a862:	bd80      	pop	{r7, pc}
 800a864:	20016e84 	.word	0x20016e84
 800a868:	200000e4 	.word	0x200000e4
 800a86c:	20016e80 	.word	0x20016e80

0800a870 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 800a870:	b480      	push	{r7}
 800a872:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 800a874:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 800a876:	4618      	mov	r0, r3
 800a878:	46bd      	mov	sp, r7
 800a87a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a87e:	4770      	bx	lr

0800a880 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 800a880:	b580      	push	{r7, lr}
 800a882:	b082      	sub	sp, #8
 800a884:	af00      	add	r7, sp, #0
 800a886:	4603      	mov	r3, r0
 800a888:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
	return SD_disk_initialize (pdrv);
 800a88a:	79fb      	ldrb	r3, [r7, #7]
 800a88c:	4618      	mov	r0, r3
 800a88e:	f7f6 f837 	bl	8000900 <SD_disk_initialize>
 800a892:	4603      	mov	r3, r0
  /* USER CODE END INIT */
}
 800a894:	4618      	mov	r0, r3
 800a896:	3708      	adds	r7, #8
 800a898:	46bd      	mov	sp, r7
 800a89a:	bd80      	pop	{r7, pc}

0800a89c <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 800a89c:	b580      	push	{r7, lr}
 800a89e:	b082      	sub	sp, #8
 800a8a0:	af00      	add	r7, sp, #0
 800a8a2:	4603      	mov	r3, r0
 800a8a4:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
	return SD_disk_status (pdrv);
 800a8a6:	79fb      	ldrb	r3, [r7, #7]
 800a8a8:	4618      	mov	r0, r3
 800a8aa:	f7f6 f915 	bl	8000ad8 <SD_disk_status>
 800a8ae:	4603      	mov	r3, r0
  /* USER CODE END STATUS */
}
 800a8b0:	4618      	mov	r0, r3
 800a8b2:	3708      	adds	r7, #8
 800a8b4:	46bd      	mov	sp, r7
 800a8b6:	bd80      	pop	{r7, pc}

0800a8b8 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 800a8b8:	b580      	push	{r7, lr}
 800a8ba:	b084      	sub	sp, #16
 800a8bc:	af00      	add	r7, sp, #0
 800a8be:	60b9      	str	r1, [r7, #8]
 800a8c0:	607a      	str	r2, [r7, #4]
 800a8c2:	603b      	str	r3, [r7, #0]
 800a8c4:	4603      	mov	r3, r0
 800a8c6:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
	return SD_disk_read (pdrv, buff, sector, count);
 800a8c8:	7bf8      	ldrb	r0, [r7, #15]
 800a8ca:	683b      	ldr	r3, [r7, #0]
 800a8cc:	687a      	ldr	r2, [r7, #4]
 800a8ce:	68b9      	ldr	r1, [r7, #8]
 800a8d0:	f7f6 f918 	bl	8000b04 <SD_disk_read>
 800a8d4:	4603      	mov	r3, r0
  /* USER CODE END READ */
}
 800a8d6:	4618      	mov	r0, r3
 800a8d8:	3710      	adds	r7, #16
 800a8da:	46bd      	mov	sp, r7
 800a8dc:	bd80      	pop	{r7, pc}

0800a8de <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 800a8de:	b580      	push	{r7, lr}
 800a8e0:	b084      	sub	sp, #16
 800a8e2:	af00      	add	r7, sp, #0
 800a8e4:	60b9      	str	r1, [r7, #8]
 800a8e6:	607a      	str	r2, [r7, #4]
 800a8e8:	603b      	str	r3, [r7, #0]
 800a8ea:	4603      	mov	r3, r0
 800a8ec:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
	/* USER CODE HERE */
	return SD_disk_write (pdrv, buff, sector, count);
 800a8ee:	7bf8      	ldrb	r0, [r7, #15]
 800a8f0:	683b      	ldr	r3, [r7, #0]
 800a8f2:	687a      	ldr	r2, [r7, #4]
 800a8f4:	68b9      	ldr	r1, [r7, #8]
 800a8f6:	f7f6 f96f 	bl	8000bd8 <SD_disk_write>
 800a8fa:	4603      	mov	r3, r0
  /* USER CODE END WRITE */
}
 800a8fc:	4618      	mov	r0, r3
 800a8fe:	3710      	adds	r7, #16
 800a900:	46bd      	mov	sp, r7
 800a902:	bd80      	pop	{r7, pc}

0800a904 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 800a904:	b580      	push	{r7, lr}
 800a906:	b082      	sub	sp, #8
 800a908:	af00      	add	r7, sp, #0
 800a90a:	4603      	mov	r3, r0
 800a90c:	603a      	str	r2, [r7, #0]
 800a90e:	71fb      	strb	r3, [r7, #7]
 800a910:	460b      	mov	r3, r1
 800a912:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
	return SD_disk_ioctl (pdrv, cmd, buff);
 800a914:	79b9      	ldrb	r1, [r7, #6]
 800a916:	79fb      	ldrb	r3, [r7, #7]
 800a918:	683a      	ldr	r2, [r7, #0]
 800a91a:	4618      	mov	r0, r3
 800a91c:	f7f6 f9e0 	bl	8000ce0 <SD_disk_ioctl>
 800a920:	4603      	mov	r3, r0
  /* USER CODE END IOCTL */
}
 800a922:	4618      	mov	r0, r3
 800a924:	3708      	adds	r7, #8
 800a926:	46bd      	mov	sp, r7
 800a928:	bd80      	pop	{r7, pc}
	...

0800a92c <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 800a92c:	b580      	push	{r7, lr}
 800a92e:	b084      	sub	sp, #16
 800a930:	af00      	add	r7, sp, #0
 800a932:	4603      	mov	r3, r0
 800a934:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800a936:	79fb      	ldrb	r3, [r7, #7]
 800a938:	4a08      	ldr	r2, [pc, #32]	; (800a95c <disk_status+0x30>)
 800a93a:	009b      	lsls	r3, r3, #2
 800a93c:	4413      	add	r3, r2
 800a93e:	685b      	ldr	r3, [r3, #4]
 800a940:	685b      	ldr	r3, [r3, #4]
 800a942:	79fa      	ldrb	r2, [r7, #7]
 800a944:	4905      	ldr	r1, [pc, #20]	; (800a95c <disk_status+0x30>)
 800a946:	440a      	add	r2, r1
 800a948:	7a12      	ldrb	r2, [r2, #8]
 800a94a:	4610      	mov	r0, r2
 800a94c:	4798      	blx	r3
 800a94e:	4603      	mov	r3, r0
 800a950:	73fb      	strb	r3, [r7, #15]
  return stat;
 800a952:	7bfb      	ldrb	r3, [r7, #15]
}
 800a954:	4618      	mov	r0, r3
 800a956:	3710      	adds	r7, #16
 800a958:	46bd      	mov	sp, r7
 800a95a:	bd80      	pop	{r7, pc}
 800a95c:	200170b0 	.word	0x200170b0

0800a960 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800a960:	b580      	push	{r7, lr}
 800a962:	b084      	sub	sp, #16
 800a964:	af00      	add	r7, sp, #0
 800a966:	4603      	mov	r3, r0
 800a968:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800a96a:	2300      	movs	r3, #0
 800a96c:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800a96e:	79fb      	ldrb	r3, [r7, #7]
 800a970:	4a0d      	ldr	r2, [pc, #52]	; (800a9a8 <disk_initialize+0x48>)
 800a972:	5cd3      	ldrb	r3, [r2, r3]
 800a974:	2b00      	cmp	r3, #0
 800a976:	d111      	bne.n	800a99c <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 800a978:	79fb      	ldrb	r3, [r7, #7]
 800a97a:	4a0b      	ldr	r2, [pc, #44]	; (800a9a8 <disk_initialize+0x48>)
 800a97c:	2101      	movs	r1, #1
 800a97e:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800a980:	79fb      	ldrb	r3, [r7, #7]
 800a982:	4a09      	ldr	r2, [pc, #36]	; (800a9a8 <disk_initialize+0x48>)
 800a984:	009b      	lsls	r3, r3, #2
 800a986:	4413      	add	r3, r2
 800a988:	685b      	ldr	r3, [r3, #4]
 800a98a:	681b      	ldr	r3, [r3, #0]
 800a98c:	79fa      	ldrb	r2, [r7, #7]
 800a98e:	4906      	ldr	r1, [pc, #24]	; (800a9a8 <disk_initialize+0x48>)
 800a990:	440a      	add	r2, r1
 800a992:	7a12      	ldrb	r2, [r2, #8]
 800a994:	4610      	mov	r0, r2
 800a996:	4798      	blx	r3
 800a998:	4603      	mov	r3, r0
 800a99a:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 800a99c:	7bfb      	ldrb	r3, [r7, #15]
}
 800a99e:	4618      	mov	r0, r3
 800a9a0:	3710      	adds	r7, #16
 800a9a2:	46bd      	mov	sp, r7
 800a9a4:	bd80      	pop	{r7, pc}
 800a9a6:	bf00      	nop
 800a9a8:	200170b0 	.word	0x200170b0

0800a9ac <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800a9ac:	b590      	push	{r4, r7, lr}
 800a9ae:	b087      	sub	sp, #28
 800a9b0:	af00      	add	r7, sp, #0
 800a9b2:	60b9      	str	r1, [r7, #8]
 800a9b4:	607a      	str	r2, [r7, #4]
 800a9b6:	603b      	str	r3, [r7, #0]
 800a9b8:	4603      	mov	r3, r0
 800a9ba:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800a9bc:	7bfb      	ldrb	r3, [r7, #15]
 800a9be:	4a0a      	ldr	r2, [pc, #40]	; (800a9e8 <disk_read+0x3c>)
 800a9c0:	009b      	lsls	r3, r3, #2
 800a9c2:	4413      	add	r3, r2
 800a9c4:	685b      	ldr	r3, [r3, #4]
 800a9c6:	689c      	ldr	r4, [r3, #8]
 800a9c8:	7bfb      	ldrb	r3, [r7, #15]
 800a9ca:	4a07      	ldr	r2, [pc, #28]	; (800a9e8 <disk_read+0x3c>)
 800a9cc:	4413      	add	r3, r2
 800a9ce:	7a18      	ldrb	r0, [r3, #8]
 800a9d0:	683b      	ldr	r3, [r7, #0]
 800a9d2:	687a      	ldr	r2, [r7, #4]
 800a9d4:	68b9      	ldr	r1, [r7, #8]
 800a9d6:	47a0      	blx	r4
 800a9d8:	4603      	mov	r3, r0
 800a9da:	75fb      	strb	r3, [r7, #23]
  return res;
 800a9dc:	7dfb      	ldrb	r3, [r7, #23]
}
 800a9de:	4618      	mov	r0, r3
 800a9e0:	371c      	adds	r7, #28
 800a9e2:	46bd      	mov	sp, r7
 800a9e4:	bd90      	pop	{r4, r7, pc}
 800a9e6:	bf00      	nop
 800a9e8:	200170b0 	.word	0x200170b0

0800a9ec <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800a9ec:	b590      	push	{r4, r7, lr}
 800a9ee:	b087      	sub	sp, #28
 800a9f0:	af00      	add	r7, sp, #0
 800a9f2:	60b9      	str	r1, [r7, #8]
 800a9f4:	607a      	str	r2, [r7, #4]
 800a9f6:	603b      	str	r3, [r7, #0]
 800a9f8:	4603      	mov	r3, r0
 800a9fa:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800a9fc:	7bfb      	ldrb	r3, [r7, #15]
 800a9fe:	4a0a      	ldr	r2, [pc, #40]	; (800aa28 <disk_write+0x3c>)
 800aa00:	009b      	lsls	r3, r3, #2
 800aa02:	4413      	add	r3, r2
 800aa04:	685b      	ldr	r3, [r3, #4]
 800aa06:	68dc      	ldr	r4, [r3, #12]
 800aa08:	7bfb      	ldrb	r3, [r7, #15]
 800aa0a:	4a07      	ldr	r2, [pc, #28]	; (800aa28 <disk_write+0x3c>)
 800aa0c:	4413      	add	r3, r2
 800aa0e:	7a18      	ldrb	r0, [r3, #8]
 800aa10:	683b      	ldr	r3, [r7, #0]
 800aa12:	687a      	ldr	r2, [r7, #4]
 800aa14:	68b9      	ldr	r1, [r7, #8]
 800aa16:	47a0      	blx	r4
 800aa18:	4603      	mov	r3, r0
 800aa1a:	75fb      	strb	r3, [r7, #23]
  return res;
 800aa1c:	7dfb      	ldrb	r3, [r7, #23]
}
 800aa1e:	4618      	mov	r0, r3
 800aa20:	371c      	adds	r7, #28
 800aa22:	46bd      	mov	sp, r7
 800aa24:	bd90      	pop	{r4, r7, pc}
 800aa26:	bf00      	nop
 800aa28:	200170b0 	.word	0x200170b0

0800aa2c <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800aa2c:	b580      	push	{r7, lr}
 800aa2e:	b084      	sub	sp, #16
 800aa30:	af00      	add	r7, sp, #0
 800aa32:	4603      	mov	r3, r0
 800aa34:	603a      	str	r2, [r7, #0]
 800aa36:	71fb      	strb	r3, [r7, #7]
 800aa38:	460b      	mov	r3, r1
 800aa3a:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800aa3c:	79fb      	ldrb	r3, [r7, #7]
 800aa3e:	4a09      	ldr	r2, [pc, #36]	; (800aa64 <disk_ioctl+0x38>)
 800aa40:	009b      	lsls	r3, r3, #2
 800aa42:	4413      	add	r3, r2
 800aa44:	685b      	ldr	r3, [r3, #4]
 800aa46:	691b      	ldr	r3, [r3, #16]
 800aa48:	79fa      	ldrb	r2, [r7, #7]
 800aa4a:	4906      	ldr	r1, [pc, #24]	; (800aa64 <disk_ioctl+0x38>)
 800aa4c:	440a      	add	r2, r1
 800aa4e:	7a10      	ldrb	r0, [r2, #8]
 800aa50:	79b9      	ldrb	r1, [r7, #6]
 800aa52:	683a      	ldr	r2, [r7, #0]
 800aa54:	4798      	blx	r3
 800aa56:	4603      	mov	r3, r0
 800aa58:	73fb      	strb	r3, [r7, #15]
  return res;
 800aa5a:	7bfb      	ldrb	r3, [r7, #15]
}
 800aa5c:	4618      	mov	r0, r3
 800aa5e:	3710      	adds	r7, #16
 800aa60:	46bd      	mov	sp, r7
 800aa62:	bd80      	pop	{r7, pc}
 800aa64:	200170b0 	.word	0x200170b0

0800aa68 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 800aa68:	b480      	push	{r7}
 800aa6a:	b085      	sub	sp, #20
 800aa6c:	af00      	add	r7, sp, #0
 800aa6e:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800aa70:	687b      	ldr	r3, [r7, #4]
 800aa72:	3301      	adds	r3, #1
 800aa74:	781b      	ldrb	r3, [r3, #0]
 800aa76:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 800aa78:	89fb      	ldrh	r3, [r7, #14]
 800aa7a:	021b      	lsls	r3, r3, #8
 800aa7c:	b21a      	sxth	r2, r3
 800aa7e:	687b      	ldr	r3, [r7, #4]
 800aa80:	781b      	ldrb	r3, [r3, #0]
 800aa82:	b21b      	sxth	r3, r3
 800aa84:	4313      	orrs	r3, r2
 800aa86:	b21b      	sxth	r3, r3
 800aa88:	81fb      	strh	r3, [r7, #14]
	return rv;
 800aa8a:	89fb      	ldrh	r3, [r7, #14]
}
 800aa8c:	4618      	mov	r0, r3
 800aa8e:	3714      	adds	r7, #20
 800aa90:	46bd      	mov	sp, r7
 800aa92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa96:	4770      	bx	lr

0800aa98 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800aa98:	b480      	push	{r7}
 800aa9a:	b085      	sub	sp, #20
 800aa9c:	af00      	add	r7, sp, #0
 800aa9e:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800aaa0:	687b      	ldr	r3, [r7, #4]
 800aaa2:	3303      	adds	r3, #3
 800aaa4:	781b      	ldrb	r3, [r3, #0]
 800aaa6:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800aaa8:	68fb      	ldr	r3, [r7, #12]
 800aaaa:	021b      	lsls	r3, r3, #8
 800aaac:	687a      	ldr	r2, [r7, #4]
 800aaae:	3202      	adds	r2, #2
 800aab0:	7812      	ldrb	r2, [r2, #0]
 800aab2:	4313      	orrs	r3, r2
 800aab4:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800aab6:	68fb      	ldr	r3, [r7, #12]
 800aab8:	021b      	lsls	r3, r3, #8
 800aaba:	687a      	ldr	r2, [r7, #4]
 800aabc:	3201      	adds	r2, #1
 800aabe:	7812      	ldrb	r2, [r2, #0]
 800aac0:	4313      	orrs	r3, r2
 800aac2:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800aac4:	68fb      	ldr	r3, [r7, #12]
 800aac6:	021b      	lsls	r3, r3, #8
 800aac8:	687a      	ldr	r2, [r7, #4]
 800aaca:	7812      	ldrb	r2, [r2, #0]
 800aacc:	4313      	orrs	r3, r2
 800aace:	60fb      	str	r3, [r7, #12]
	return rv;
 800aad0:	68fb      	ldr	r3, [r7, #12]
}
 800aad2:	4618      	mov	r0, r3
 800aad4:	3714      	adds	r7, #20
 800aad6:	46bd      	mov	sp, r7
 800aad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aadc:	4770      	bx	lr

0800aade <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800aade:	b480      	push	{r7}
 800aae0:	b083      	sub	sp, #12
 800aae2:	af00      	add	r7, sp, #0
 800aae4:	6078      	str	r0, [r7, #4]
 800aae6:	460b      	mov	r3, r1
 800aae8:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800aaea:	687b      	ldr	r3, [r7, #4]
 800aaec:	1c5a      	adds	r2, r3, #1
 800aaee:	607a      	str	r2, [r7, #4]
 800aaf0:	887a      	ldrh	r2, [r7, #2]
 800aaf2:	b2d2      	uxtb	r2, r2
 800aaf4:	701a      	strb	r2, [r3, #0]
 800aaf6:	887b      	ldrh	r3, [r7, #2]
 800aaf8:	0a1b      	lsrs	r3, r3, #8
 800aafa:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 800aafc:	687b      	ldr	r3, [r7, #4]
 800aafe:	1c5a      	adds	r2, r3, #1
 800ab00:	607a      	str	r2, [r7, #4]
 800ab02:	887a      	ldrh	r2, [r7, #2]
 800ab04:	b2d2      	uxtb	r2, r2
 800ab06:	701a      	strb	r2, [r3, #0]
}
 800ab08:	bf00      	nop
 800ab0a:	370c      	adds	r7, #12
 800ab0c:	46bd      	mov	sp, r7
 800ab0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab12:	4770      	bx	lr

0800ab14 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800ab14:	b480      	push	{r7}
 800ab16:	b083      	sub	sp, #12
 800ab18:	af00      	add	r7, sp, #0
 800ab1a:	6078      	str	r0, [r7, #4]
 800ab1c:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800ab1e:	687b      	ldr	r3, [r7, #4]
 800ab20:	1c5a      	adds	r2, r3, #1
 800ab22:	607a      	str	r2, [r7, #4]
 800ab24:	683a      	ldr	r2, [r7, #0]
 800ab26:	b2d2      	uxtb	r2, r2
 800ab28:	701a      	strb	r2, [r3, #0]
 800ab2a:	683b      	ldr	r3, [r7, #0]
 800ab2c:	0a1b      	lsrs	r3, r3, #8
 800ab2e:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800ab30:	687b      	ldr	r3, [r7, #4]
 800ab32:	1c5a      	adds	r2, r3, #1
 800ab34:	607a      	str	r2, [r7, #4]
 800ab36:	683a      	ldr	r2, [r7, #0]
 800ab38:	b2d2      	uxtb	r2, r2
 800ab3a:	701a      	strb	r2, [r3, #0]
 800ab3c:	683b      	ldr	r3, [r7, #0]
 800ab3e:	0a1b      	lsrs	r3, r3, #8
 800ab40:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800ab42:	687b      	ldr	r3, [r7, #4]
 800ab44:	1c5a      	adds	r2, r3, #1
 800ab46:	607a      	str	r2, [r7, #4]
 800ab48:	683a      	ldr	r2, [r7, #0]
 800ab4a:	b2d2      	uxtb	r2, r2
 800ab4c:	701a      	strb	r2, [r3, #0]
 800ab4e:	683b      	ldr	r3, [r7, #0]
 800ab50:	0a1b      	lsrs	r3, r3, #8
 800ab52:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800ab54:	687b      	ldr	r3, [r7, #4]
 800ab56:	1c5a      	adds	r2, r3, #1
 800ab58:	607a      	str	r2, [r7, #4]
 800ab5a:	683a      	ldr	r2, [r7, #0]
 800ab5c:	b2d2      	uxtb	r2, r2
 800ab5e:	701a      	strb	r2, [r3, #0]
}
 800ab60:	bf00      	nop
 800ab62:	370c      	adds	r7, #12
 800ab64:	46bd      	mov	sp, r7
 800ab66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab6a:	4770      	bx	lr

0800ab6c <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800ab6c:	b480      	push	{r7}
 800ab6e:	b087      	sub	sp, #28
 800ab70:	af00      	add	r7, sp, #0
 800ab72:	60f8      	str	r0, [r7, #12]
 800ab74:	60b9      	str	r1, [r7, #8]
 800ab76:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800ab78:	68fb      	ldr	r3, [r7, #12]
 800ab7a:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800ab7c:	68bb      	ldr	r3, [r7, #8]
 800ab7e:	613b      	str	r3, [r7, #16]

	if (cnt) {
 800ab80:	687b      	ldr	r3, [r7, #4]
 800ab82:	2b00      	cmp	r3, #0
 800ab84:	d00d      	beq.n	800aba2 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800ab86:	693a      	ldr	r2, [r7, #16]
 800ab88:	1c53      	adds	r3, r2, #1
 800ab8a:	613b      	str	r3, [r7, #16]
 800ab8c:	697b      	ldr	r3, [r7, #20]
 800ab8e:	1c59      	adds	r1, r3, #1
 800ab90:	6179      	str	r1, [r7, #20]
 800ab92:	7812      	ldrb	r2, [r2, #0]
 800ab94:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800ab96:	687b      	ldr	r3, [r7, #4]
 800ab98:	3b01      	subs	r3, #1
 800ab9a:	607b      	str	r3, [r7, #4]
 800ab9c:	687b      	ldr	r3, [r7, #4]
 800ab9e:	2b00      	cmp	r3, #0
 800aba0:	d1f1      	bne.n	800ab86 <mem_cpy+0x1a>
	}
}
 800aba2:	bf00      	nop
 800aba4:	371c      	adds	r7, #28
 800aba6:	46bd      	mov	sp, r7
 800aba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abac:	4770      	bx	lr

0800abae <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800abae:	b480      	push	{r7}
 800abb0:	b087      	sub	sp, #28
 800abb2:	af00      	add	r7, sp, #0
 800abb4:	60f8      	str	r0, [r7, #12]
 800abb6:	60b9      	str	r1, [r7, #8]
 800abb8:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800abba:	68fb      	ldr	r3, [r7, #12]
 800abbc:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800abbe:	697b      	ldr	r3, [r7, #20]
 800abc0:	1c5a      	adds	r2, r3, #1
 800abc2:	617a      	str	r2, [r7, #20]
 800abc4:	68ba      	ldr	r2, [r7, #8]
 800abc6:	b2d2      	uxtb	r2, r2
 800abc8:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800abca:	687b      	ldr	r3, [r7, #4]
 800abcc:	3b01      	subs	r3, #1
 800abce:	607b      	str	r3, [r7, #4]
 800abd0:	687b      	ldr	r3, [r7, #4]
 800abd2:	2b00      	cmp	r3, #0
 800abd4:	d1f3      	bne.n	800abbe <mem_set+0x10>
}
 800abd6:	bf00      	nop
 800abd8:	bf00      	nop
 800abda:	371c      	adds	r7, #28
 800abdc:	46bd      	mov	sp, r7
 800abde:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abe2:	4770      	bx	lr

0800abe4 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800abe4:	b480      	push	{r7}
 800abe6:	b089      	sub	sp, #36	; 0x24
 800abe8:	af00      	add	r7, sp, #0
 800abea:	60f8      	str	r0, [r7, #12]
 800abec:	60b9      	str	r1, [r7, #8]
 800abee:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800abf0:	68fb      	ldr	r3, [r7, #12]
 800abf2:	61fb      	str	r3, [r7, #28]
 800abf4:	68bb      	ldr	r3, [r7, #8]
 800abf6:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800abf8:	2300      	movs	r3, #0
 800abfa:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 800abfc:	69fb      	ldr	r3, [r7, #28]
 800abfe:	1c5a      	adds	r2, r3, #1
 800ac00:	61fa      	str	r2, [r7, #28]
 800ac02:	781b      	ldrb	r3, [r3, #0]
 800ac04:	4619      	mov	r1, r3
 800ac06:	69bb      	ldr	r3, [r7, #24]
 800ac08:	1c5a      	adds	r2, r3, #1
 800ac0a:	61ba      	str	r2, [r7, #24]
 800ac0c:	781b      	ldrb	r3, [r3, #0]
 800ac0e:	1acb      	subs	r3, r1, r3
 800ac10:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800ac12:	687b      	ldr	r3, [r7, #4]
 800ac14:	3b01      	subs	r3, #1
 800ac16:	607b      	str	r3, [r7, #4]
 800ac18:	687b      	ldr	r3, [r7, #4]
 800ac1a:	2b00      	cmp	r3, #0
 800ac1c:	d002      	beq.n	800ac24 <mem_cmp+0x40>
 800ac1e:	697b      	ldr	r3, [r7, #20]
 800ac20:	2b00      	cmp	r3, #0
 800ac22:	d0eb      	beq.n	800abfc <mem_cmp+0x18>

	return r;
 800ac24:	697b      	ldr	r3, [r7, #20]
}
 800ac26:	4618      	mov	r0, r3
 800ac28:	3724      	adds	r7, #36	; 0x24
 800ac2a:	46bd      	mov	sp, r7
 800ac2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac30:	4770      	bx	lr

0800ac32 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800ac32:	b480      	push	{r7}
 800ac34:	b083      	sub	sp, #12
 800ac36:	af00      	add	r7, sp, #0
 800ac38:	6078      	str	r0, [r7, #4]
 800ac3a:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800ac3c:	e002      	b.n	800ac44 <chk_chr+0x12>
 800ac3e:	687b      	ldr	r3, [r7, #4]
 800ac40:	3301      	adds	r3, #1
 800ac42:	607b      	str	r3, [r7, #4]
 800ac44:	687b      	ldr	r3, [r7, #4]
 800ac46:	781b      	ldrb	r3, [r3, #0]
 800ac48:	2b00      	cmp	r3, #0
 800ac4a:	d005      	beq.n	800ac58 <chk_chr+0x26>
 800ac4c:	687b      	ldr	r3, [r7, #4]
 800ac4e:	781b      	ldrb	r3, [r3, #0]
 800ac50:	461a      	mov	r2, r3
 800ac52:	683b      	ldr	r3, [r7, #0]
 800ac54:	4293      	cmp	r3, r2
 800ac56:	d1f2      	bne.n	800ac3e <chk_chr+0xc>
	return *str;
 800ac58:	687b      	ldr	r3, [r7, #4]
 800ac5a:	781b      	ldrb	r3, [r3, #0]
}
 800ac5c:	4618      	mov	r0, r3
 800ac5e:	370c      	adds	r7, #12
 800ac60:	46bd      	mov	sp, r7
 800ac62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac66:	4770      	bx	lr

0800ac68 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800ac68:	b480      	push	{r7}
 800ac6a:	b085      	sub	sp, #20
 800ac6c:	af00      	add	r7, sp, #0
 800ac6e:	6078      	str	r0, [r7, #4]
 800ac70:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800ac72:	2300      	movs	r3, #0
 800ac74:	60bb      	str	r3, [r7, #8]
 800ac76:	68bb      	ldr	r3, [r7, #8]
 800ac78:	60fb      	str	r3, [r7, #12]
 800ac7a:	e029      	b.n	800acd0 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 800ac7c:	4a27      	ldr	r2, [pc, #156]	; (800ad1c <chk_lock+0xb4>)
 800ac7e:	68fb      	ldr	r3, [r7, #12]
 800ac80:	011b      	lsls	r3, r3, #4
 800ac82:	4413      	add	r3, r2
 800ac84:	681b      	ldr	r3, [r3, #0]
 800ac86:	2b00      	cmp	r3, #0
 800ac88:	d01d      	beq.n	800acc6 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800ac8a:	4a24      	ldr	r2, [pc, #144]	; (800ad1c <chk_lock+0xb4>)
 800ac8c:	68fb      	ldr	r3, [r7, #12]
 800ac8e:	011b      	lsls	r3, r3, #4
 800ac90:	4413      	add	r3, r2
 800ac92:	681a      	ldr	r2, [r3, #0]
 800ac94:	687b      	ldr	r3, [r7, #4]
 800ac96:	681b      	ldr	r3, [r3, #0]
 800ac98:	429a      	cmp	r2, r3
 800ac9a:	d116      	bne.n	800acca <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 800ac9c:	4a1f      	ldr	r2, [pc, #124]	; (800ad1c <chk_lock+0xb4>)
 800ac9e:	68fb      	ldr	r3, [r7, #12]
 800aca0:	011b      	lsls	r3, r3, #4
 800aca2:	4413      	add	r3, r2
 800aca4:	3304      	adds	r3, #4
 800aca6:	681a      	ldr	r2, [r3, #0]
 800aca8:	687b      	ldr	r3, [r7, #4]
 800acaa:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800acac:	429a      	cmp	r2, r3
 800acae:	d10c      	bne.n	800acca <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800acb0:	4a1a      	ldr	r2, [pc, #104]	; (800ad1c <chk_lock+0xb4>)
 800acb2:	68fb      	ldr	r3, [r7, #12]
 800acb4:	011b      	lsls	r3, r3, #4
 800acb6:	4413      	add	r3, r2
 800acb8:	3308      	adds	r3, #8
 800acba:	681a      	ldr	r2, [r3, #0]
 800acbc:	687b      	ldr	r3, [r7, #4]
 800acbe:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 800acc0:	429a      	cmp	r2, r3
 800acc2:	d102      	bne.n	800acca <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800acc4:	e007      	b.n	800acd6 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800acc6:	2301      	movs	r3, #1
 800acc8:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800acca:	68fb      	ldr	r3, [r7, #12]
 800accc:	3301      	adds	r3, #1
 800acce:	60fb      	str	r3, [r7, #12]
 800acd0:	68fb      	ldr	r3, [r7, #12]
 800acd2:	2b01      	cmp	r3, #1
 800acd4:	d9d2      	bls.n	800ac7c <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800acd6:	68fb      	ldr	r3, [r7, #12]
 800acd8:	2b02      	cmp	r3, #2
 800acda:	d109      	bne.n	800acf0 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800acdc:	68bb      	ldr	r3, [r7, #8]
 800acde:	2b00      	cmp	r3, #0
 800ace0:	d102      	bne.n	800ace8 <chk_lock+0x80>
 800ace2:	683b      	ldr	r3, [r7, #0]
 800ace4:	2b02      	cmp	r3, #2
 800ace6:	d101      	bne.n	800acec <chk_lock+0x84>
 800ace8:	2300      	movs	r3, #0
 800acea:	e010      	b.n	800ad0e <chk_lock+0xa6>
 800acec:	2312      	movs	r3, #18
 800acee:	e00e      	b.n	800ad0e <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800acf0:	683b      	ldr	r3, [r7, #0]
 800acf2:	2b00      	cmp	r3, #0
 800acf4:	d108      	bne.n	800ad08 <chk_lock+0xa0>
 800acf6:	4a09      	ldr	r2, [pc, #36]	; (800ad1c <chk_lock+0xb4>)
 800acf8:	68fb      	ldr	r3, [r7, #12]
 800acfa:	011b      	lsls	r3, r3, #4
 800acfc:	4413      	add	r3, r2
 800acfe:	330c      	adds	r3, #12
 800ad00:	881b      	ldrh	r3, [r3, #0]
 800ad02:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ad06:	d101      	bne.n	800ad0c <chk_lock+0xa4>
 800ad08:	2310      	movs	r3, #16
 800ad0a:	e000      	b.n	800ad0e <chk_lock+0xa6>
 800ad0c:	2300      	movs	r3, #0
}
 800ad0e:	4618      	mov	r0, r3
 800ad10:	3714      	adds	r7, #20
 800ad12:	46bd      	mov	sp, r7
 800ad14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad18:	4770      	bx	lr
 800ad1a:	bf00      	nop
 800ad1c:	20016e90 	.word	0x20016e90

0800ad20 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800ad20:	b480      	push	{r7}
 800ad22:	b083      	sub	sp, #12
 800ad24:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800ad26:	2300      	movs	r3, #0
 800ad28:	607b      	str	r3, [r7, #4]
 800ad2a:	e002      	b.n	800ad32 <enq_lock+0x12>
 800ad2c:	687b      	ldr	r3, [r7, #4]
 800ad2e:	3301      	adds	r3, #1
 800ad30:	607b      	str	r3, [r7, #4]
 800ad32:	687b      	ldr	r3, [r7, #4]
 800ad34:	2b01      	cmp	r3, #1
 800ad36:	d806      	bhi.n	800ad46 <enq_lock+0x26>
 800ad38:	4a09      	ldr	r2, [pc, #36]	; (800ad60 <enq_lock+0x40>)
 800ad3a:	687b      	ldr	r3, [r7, #4]
 800ad3c:	011b      	lsls	r3, r3, #4
 800ad3e:	4413      	add	r3, r2
 800ad40:	681b      	ldr	r3, [r3, #0]
 800ad42:	2b00      	cmp	r3, #0
 800ad44:	d1f2      	bne.n	800ad2c <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800ad46:	687b      	ldr	r3, [r7, #4]
 800ad48:	2b02      	cmp	r3, #2
 800ad4a:	bf14      	ite	ne
 800ad4c:	2301      	movne	r3, #1
 800ad4e:	2300      	moveq	r3, #0
 800ad50:	b2db      	uxtb	r3, r3
}
 800ad52:	4618      	mov	r0, r3
 800ad54:	370c      	adds	r7, #12
 800ad56:	46bd      	mov	sp, r7
 800ad58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad5c:	4770      	bx	lr
 800ad5e:	bf00      	nop
 800ad60:	20016e90 	.word	0x20016e90

0800ad64 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800ad64:	b480      	push	{r7}
 800ad66:	b085      	sub	sp, #20
 800ad68:	af00      	add	r7, sp, #0
 800ad6a:	6078      	str	r0, [r7, #4]
 800ad6c:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800ad6e:	2300      	movs	r3, #0
 800ad70:	60fb      	str	r3, [r7, #12]
 800ad72:	e01f      	b.n	800adb4 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 800ad74:	4a41      	ldr	r2, [pc, #260]	; (800ae7c <inc_lock+0x118>)
 800ad76:	68fb      	ldr	r3, [r7, #12]
 800ad78:	011b      	lsls	r3, r3, #4
 800ad7a:	4413      	add	r3, r2
 800ad7c:	681a      	ldr	r2, [r3, #0]
 800ad7e:	687b      	ldr	r3, [r7, #4]
 800ad80:	681b      	ldr	r3, [r3, #0]
 800ad82:	429a      	cmp	r2, r3
 800ad84:	d113      	bne.n	800adae <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800ad86:	4a3d      	ldr	r2, [pc, #244]	; (800ae7c <inc_lock+0x118>)
 800ad88:	68fb      	ldr	r3, [r7, #12]
 800ad8a:	011b      	lsls	r3, r3, #4
 800ad8c:	4413      	add	r3, r2
 800ad8e:	3304      	adds	r3, #4
 800ad90:	681a      	ldr	r2, [r3, #0]
 800ad92:	687b      	ldr	r3, [r7, #4]
 800ad94:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800ad96:	429a      	cmp	r2, r3
 800ad98:	d109      	bne.n	800adae <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800ad9a:	4a38      	ldr	r2, [pc, #224]	; (800ae7c <inc_lock+0x118>)
 800ad9c:	68fb      	ldr	r3, [r7, #12]
 800ad9e:	011b      	lsls	r3, r3, #4
 800ada0:	4413      	add	r3, r2
 800ada2:	3308      	adds	r3, #8
 800ada4:	681a      	ldr	r2, [r3, #0]
 800ada6:	687b      	ldr	r3, [r7, #4]
 800ada8:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800adaa:	429a      	cmp	r2, r3
 800adac:	d006      	beq.n	800adbc <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800adae:	68fb      	ldr	r3, [r7, #12]
 800adb0:	3301      	adds	r3, #1
 800adb2:	60fb      	str	r3, [r7, #12]
 800adb4:	68fb      	ldr	r3, [r7, #12]
 800adb6:	2b01      	cmp	r3, #1
 800adb8:	d9dc      	bls.n	800ad74 <inc_lock+0x10>
 800adba:	e000      	b.n	800adbe <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 800adbc:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800adbe:	68fb      	ldr	r3, [r7, #12]
 800adc0:	2b02      	cmp	r3, #2
 800adc2:	d132      	bne.n	800ae2a <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800adc4:	2300      	movs	r3, #0
 800adc6:	60fb      	str	r3, [r7, #12]
 800adc8:	e002      	b.n	800add0 <inc_lock+0x6c>
 800adca:	68fb      	ldr	r3, [r7, #12]
 800adcc:	3301      	adds	r3, #1
 800adce:	60fb      	str	r3, [r7, #12]
 800add0:	68fb      	ldr	r3, [r7, #12]
 800add2:	2b01      	cmp	r3, #1
 800add4:	d806      	bhi.n	800ade4 <inc_lock+0x80>
 800add6:	4a29      	ldr	r2, [pc, #164]	; (800ae7c <inc_lock+0x118>)
 800add8:	68fb      	ldr	r3, [r7, #12]
 800adda:	011b      	lsls	r3, r3, #4
 800addc:	4413      	add	r3, r2
 800adde:	681b      	ldr	r3, [r3, #0]
 800ade0:	2b00      	cmp	r3, #0
 800ade2:	d1f2      	bne.n	800adca <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800ade4:	68fb      	ldr	r3, [r7, #12]
 800ade6:	2b02      	cmp	r3, #2
 800ade8:	d101      	bne.n	800adee <inc_lock+0x8a>
 800adea:	2300      	movs	r3, #0
 800adec:	e040      	b.n	800ae70 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800adee:	687b      	ldr	r3, [r7, #4]
 800adf0:	681a      	ldr	r2, [r3, #0]
 800adf2:	4922      	ldr	r1, [pc, #136]	; (800ae7c <inc_lock+0x118>)
 800adf4:	68fb      	ldr	r3, [r7, #12]
 800adf6:	011b      	lsls	r3, r3, #4
 800adf8:	440b      	add	r3, r1
 800adfa:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 800adfc:	687b      	ldr	r3, [r7, #4]
 800adfe:	689a      	ldr	r2, [r3, #8]
 800ae00:	491e      	ldr	r1, [pc, #120]	; (800ae7c <inc_lock+0x118>)
 800ae02:	68fb      	ldr	r3, [r7, #12]
 800ae04:	011b      	lsls	r3, r3, #4
 800ae06:	440b      	add	r3, r1
 800ae08:	3304      	adds	r3, #4
 800ae0a:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 800ae0c:	687b      	ldr	r3, [r7, #4]
 800ae0e:	695a      	ldr	r2, [r3, #20]
 800ae10:	491a      	ldr	r1, [pc, #104]	; (800ae7c <inc_lock+0x118>)
 800ae12:	68fb      	ldr	r3, [r7, #12]
 800ae14:	011b      	lsls	r3, r3, #4
 800ae16:	440b      	add	r3, r1
 800ae18:	3308      	adds	r3, #8
 800ae1a:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 800ae1c:	4a17      	ldr	r2, [pc, #92]	; (800ae7c <inc_lock+0x118>)
 800ae1e:	68fb      	ldr	r3, [r7, #12]
 800ae20:	011b      	lsls	r3, r3, #4
 800ae22:	4413      	add	r3, r2
 800ae24:	330c      	adds	r3, #12
 800ae26:	2200      	movs	r2, #0
 800ae28:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800ae2a:	683b      	ldr	r3, [r7, #0]
 800ae2c:	2b00      	cmp	r3, #0
 800ae2e:	d009      	beq.n	800ae44 <inc_lock+0xe0>
 800ae30:	4a12      	ldr	r2, [pc, #72]	; (800ae7c <inc_lock+0x118>)
 800ae32:	68fb      	ldr	r3, [r7, #12]
 800ae34:	011b      	lsls	r3, r3, #4
 800ae36:	4413      	add	r3, r2
 800ae38:	330c      	adds	r3, #12
 800ae3a:	881b      	ldrh	r3, [r3, #0]
 800ae3c:	2b00      	cmp	r3, #0
 800ae3e:	d001      	beq.n	800ae44 <inc_lock+0xe0>
 800ae40:	2300      	movs	r3, #0
 800ae42:	e015      	b.n	800ae70 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800ae44:	683b      	ldr	r3, [r7, #0]
 800ae46:	2b00      	cmp	r3, #0
 800ae48:	d108      	bne.n	800ae5c <inc_lock+0xf8>
 800ae4a:	4a0c      	ldr	r2, [pc, #48]	; (800ae7c <inc_lock+0x118>)
 800ae4c:	68fb      	ldr	r3, [r7, #12]
 800ae4e:	011b      	lsls	r3, r3, #4
 800ae50:	4413      	add	r3, r2
 800ae52:	330c      	adds	r3, #12
 800ae54:	881b      	ldrh	r3, [r3, #0]
 800ae56:	3301      	adds	r3, #1
 800ae58:	b29a      	uxth	r2, r3
 800ae5a:	e001      	b.n	800ae60 <inc_lock+0xfc>
 800ae5c:	f44f 7280 	mov.w	r2, #256	; 0x100
 800ae60:	4906      	ldr	r1, [pc, #24]	; (800ae7c <inc_lock+0x118>)
 800ae62:	68fb      	ldr	r3, [r7, #12]
 800ae64:	011b      	lsls	r3, r3, #4
 800ae66:	440b      	add	r3, r1
 800ae68:	330c      	adds	r3, #12
 800ae6a:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800ae6c:	68fb      	ldr	r3, [r7, #12]
 800ae6e:	3301      	adds	r3, #1
}
 800ae70:	4618      	mov	r0, r3
 800ae72:	3714      	adds	r7, #20
 800ae74:	46bd      	mov	sp, r7
 800ae76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae7a:	4770      	bx	lr
 800ae7c:	20016e90 	.word	0x20016e90

0800ae80 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800ae80:	b480      	push	{r7}
 800ae82:	b085      	sub	sp, #20
 800ae84:	af00      	add	r7, sp, #0
 800ae86:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800ae88:	687b      	ldr	r3, [r7, #4]
 800ae8a:	3b01      	subs	r3, #1
 800ae8c:	607b      	str	r3, [r7, #4]
 800ae8e:	687b      	ldr	r3, [r7, #4]
 800ae90:	2b01      	cmp	r3, #1
 800ae92:	d825      	bhi.n	800aee0 <dec_lock+0x60>
		n = Files[i].ctr;
 800ae94:	4a17      	ldr	r2, [pc, #92]	; (800aef4 <dec_lock+0x74>)
 800ae96:	687b      	ldr	r3, [r7, #4]
 800ae98:	011b      	lsls	r3, r3, #4
 800ae9a:	4413      	add	r3, r2
 800ae9c:	330c      	adds	r3, #12
 800ae9e:	881b      	ldrh	r3, [r3, #0]
 800aea0:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800aea2:	89fb      	ldrh	r3, [r7, #14]
 800aea4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800aea8:	d101      	bne.n	800aeae <dec_lock+0x2e>
 800aeaa:	2300      	movs	r3, #0
 800aeac:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800aeae:	89fb      	ldrh	r3, [r7, #14]
 800aeb0:	2b00      	cmp	r3, #0
 800aeb2:	d002      	beq.n	800aeba <dec_lock+0x3a>
 800aeb4:	89fb      	ldrh	r3, [r7, #14]
 800aeb6:	3b01      	subs	r3, #1
 800aeb8:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800aeba:	4a0e      	ldr	r2, [pc, #56]	; (800aef4 <dec_lock+0x74>)
 800aebc:	687b      	ldr	r3, [r7, #4]
 800aebe:	011b      	lsls	r3, r3, #4
 800aec0:	4413      	add	r3, r2
 800aec2:	330c      	adds	r3, #12
 800aec4:	89fa      	ldrh	r2, [r7, #14]
 800aec6:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800aec8:	89fb      	ldrh	r3, [r7, #14]
 800aeca:	2b00      	cmp	r3, #0
 800aecc:	d105      	bne.n	800aeda <dec_lock+0x5a>
 800aece:	4a09      	ldr	r2, [pc, #36]	; (800aef4 <dec_lock+0x74>)
 800aed0:	687b      	ldr	r3, [r7, #4]
 800aed2:	011b      	lsls	r3, r3, #4
 800aed4:	4413      	add	r3, r2
 800aed6:	2200      	movs	r2, #0
 800aed8:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800aeda:	2300      	movs	r3, #0
 800aedc:	737b      	strb	r3, [r7, #13]
 800aede:	e001      	b.n	800aee4 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800aee0:	2302      	movs	r3, #2
 800aee2:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800aee4:	7b7b      	ldrb	r3, [r7, #13]
}
 800aee6:	4618      	mov	r0, r3
 800aee8:	3714      	adds	r7, #20
 800aeea:	46bd      	mov	sp, r7
 800aeec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aef0:	4770      	bx	lr
 800aef2:	bf00      	nop
 800aef4:	20016e90 	.word	0x20016e90

0800aef8 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800aef8:	b480      	push	{r7}
 800aefa:	b085      	sub	sp, #20
 800aefc:	af00      	add	r7, sp, #0
 800aefe:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800af00:	2300      	movs	r3, #0
 800af02:	60fb      	str	r3, [r7, #12]
 800af04:	e010      	b.n	800af28 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800af06:	4a0d      	ldr	r2, [pc, #52]	; (800af3c <clear_lock+0x44>)
 800af08:	68fb      	ldr	r3, [r7, #12]
 800af0a:	011b      	lsls	r3, r3, #4
 800af0c:	4413      	add	r3, r2
 800af0e:	681b      	ldr	r3, [r3, #0]
 800af10:	687a      	ldr	r2, [r7, #4]
 800af12:	429a      	cmp	r2, r3
 800af14:	d105      	bne.n	800af22 <clear_lock+0x2a>
 800af16:	4a09      	ldr	r2, [pc, #36]	; (800af3c <clear_lock+0x44>)
 800af18:	68fb      	ldr	r3, [r7, #12]
 800af1a:	011b      	lsls	r3, r3, #4
 800af1c:	4413      	add	r3, r2
 800af1e:	2200      	movs	r2, #0
 800af20:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800af22:	68fb      	ldr	r3, [r7, #12]
 800af24:	3301      	adds	r3, #1
 800af26:	60fb      	str	r3, [r7, #12]
 800af28:	68fb      	ldr	r3, [r7, #12]
 800af2a:	2b01      	cmp	r3, #1
 800af2c:	d9eb      	bls.n	800af06 <clear_lock+0xe>
	}
}
 800af2e:	bf00      	nop
 800af30:	bf00      	nop
 800af32:	3714      	adds	r7, #20
 800af34:	46bd      	mov	sp, r7
 800af36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af3a:	4770      	bx	lr
 800af3c:	20016e90 	.word	0x20016e90

0800af40 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800af40:	b580      	push	{r7, lr}
 800af42:	b086      	sub	sp, #24
 800af44:	af00      	add	r7, sp, #0
 800af46:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800af48:	2300      	movs	r3, #0
 800af4a:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800af4c:	687b      	ldr	r3, [r7, #4]
 800af4e:	78db      	ldrb	r3, [r3, #3]
 800af50:	2b00      	cmp	r3, #0
 800af52:	d034      	beq.n	800afbe <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800af54:	687b      	ldr	r3, [r7, #4]
 800af56:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800af58:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800af5a:	687b      	ldr	r3, [r7, #4]
 800af5c:	7858      	ldrb	r0, [r3, #1]
 800af5e:	687b      	ldr	r3, [r7, #4]
 800af60:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800af64:	2301      	movs	r3, #1
 800af66:	697a      	ldr	r2, [r7, #20]
 800af68:	f7ff fd40 	bl	800a9ec <disk_write>
 800af6c:	4603      	mov	r3, r0
 800af6e:	2b00      	cmp	r3, #0
 800af70:	d002      	beq.n	800af78 <sync_window+0x38>
			res = FR_DISK_ERR;
 800af72:	2301      	movs	r3, #1
 800af74:	73fb      	strb	r3, [r7, #15]
 800af76:	e022      	b.n	800afbe <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800af78:	687b      	ldr	r3, [r7, #4]
 800af7a:	2200      	movs	r2, #0
 800af7c:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800af7e:	687b      	ldr	r3, [r7, #4]
 800af80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800af82:	697a      	ldr	r2, [r7, #20]
 800af84:	1ad2      	subs	r2, r2, r3
 800af86:	687b      	ldr	r3, [r7, #4]
 800af88:	6a1b      	ldr	r3, [r3, #32]
 800af8a:	429a      	cmp	r2, r3
 800af8c:	d217      	bcs.n	800afbe <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800af8e:	687b      	ldr	r3, [r7, #4]
 800af90:	789b      	ldrb	r3, [r3, #2]
 800af92:	613b      	str	r3, [r7, #16]
 800af94:	e010      	b.n	800afb8 <sync_window+0x78>
					wsect += fs->fsize;
 800af96:	687b      	ldr	r3, [r7, #4]
 800af98:	6a1b      	ldr	r3, [r3, #32]
 800af9a:	697a      	ldr	r2, [r7, #20]
 800af9c:	4413      	add	r3, r2
 800af9e:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800afa0:	687b      	ldr	r3, [r7, #4]
 800afa2:	7858      	ldrb	r0, [r3, #1]
 800afa4:	687b      	ldr	r3, [r7, #4]
 800afa6:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800afaa:	2301      	movs	r3, #1
 800afac:	697a      	ldr	r2, [r7, #20]
 800afae:	f7ff fd1d 	bl	800a9ec <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800afb2:	693b      	ldr	r3, [r7, #16]
 800afb4:	3b01      	subs	r3, #1
 800afb6:	613b      	str	r3, [r7, #16]
 800afb8:	693b      	ldr	r3, [r7, #16]
 800afba:	2b01      	cmp	r3, #1
 800afbc:	d8eb      	bhi.n	800af96 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800afbe:	7bfb      	ldrb	r3, [r7, #15]
}
 800afc0:	4618      	mov	r0, r3
 800afc2:	3718      	adds	r7, #24
 800afc4:	46bd      	mov	sp, r7
 800afc6:	bd80      	pop	{r7, pc}

0800afc8 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800afc8:	b580      	push	{r7, lr}
 800afca:	b084      	sub	sp, #16
 800afcc:	af00      	add	r7, sp, #0
 800afce:	6078      	str	r0, [r7, #4]
 800afd0:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800afd2:	2300      	movs	r3, #0
 800afd4:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800afd6:	687b      	ldr	r3, [r7, #4]
 800afd8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800afda:	683a      	ldr	r2, [r7, #0]
 800afdc:	429a      	cmp	r2, r3
 800afde:	d01b      	beq.n	800b018 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800afe0:	6878      	ldr	r0, [r7, #4]
 800afe2:	f7ff ffad 	bl	800af40 <sync_window>
 800afe6:	4603      	mov	r3, r0
 800afe8:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800afea:	7bfb      	ldrb	r3, [r7, #15]
 800afec:	2b00      	cmp	r3, #0
 800afee:	d113      	bne.n	800b018 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800aff0:	687b      	ldr	r3, [r7, #4]
 800aff2:	7858      	ldrb	r0, [r3, #1]
 800aff4:	687b      	ldr	r3, [r7, #4]
 800aff6:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800affa:	2301      	movs	r3, #1
 800affc:	683a      	ldr	r2, [r7, #0]
 800affe:	f7ff fcd5 	bl	800a9ac <disk_read>
 800b002:	4603      	mov	r3, r0
 800b004:	2b00      	cmp	r3, #0
 800b006:	d004      	beq.n	800b012 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800b008:	f04f 33ff 	mov.w	r3, #4294967295
 800b00c:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800b00e:	2301      	movs	r3, #1
 800b010:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800b012:	687b      	ldr	r3, [r7, #4]
 800b014:	683a      	ldr	r2, [r7, #0]
 800b016:	635a      	str	r2, [r3, #52]	; 0x34
		}
	}
	return res;
 800b018:	7bfb      	ldrb	r3, [r7, #15]
}
 800b01a:	4618      	mov	r0, r3
 800b01c:	3710      	adds	r7, #16
 800b01e:	46bd      	mov	sp, r7
 800b020:	bd80      	pop	{r7, pc}
	...

0800b024 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 800b024:	b580      	push	{r7, lr}
 800b026:	b084      	sub	sp, #16
 800b028:	af00      	add	r7, sp, #0
 800b02a:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800b02c:	6878      	ldr	r0, [r7, #4]
 800b02e:	f7ff ff87 	bl	800af40 <sync_window>
 800b032:	4603      	mov	r3, r0
 800b034:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800b036:	7bfb      	ldrb	r3, [r7, #15]
 800b038:	2b00      	cmp	r3, #0
 800b03a:	d159      	bne.n	800b0f0 <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800b03c:	687b      	ldr	r3, [r7, #4]
 800b03e:	781b      	ldrb	r3, [r3, #0]
 800b040:	2b03      	cmp	r3, #3
 800b042:	d149      	bne.n	800b0d8 <sync_fs+0xb4>
 800b044:	687b      	ldr	r3, [r7, #4]
 800b046:	791b      	ldrb	r3, [r3, #4]
 800b048:	2b01      	cmp	r3, #1
 800b04a:	d145      	bne.n	800b0d8 <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 800b04c:	687b      	ldr	r3, [r7, #4]
 800b04e:	f103 0038 	add.w	r0, r3, #56	; 0x38
 800b052:	687b      	ldr	r3, [r7, #4]
 800b054:	899b      	ldrh	r3, [r3, #12]
 800b056:	461a      	mov	r2, r3
 800b058:	2100      	movs	r1, #0
 800b05a:	f7ff fda8 	bl	800abae <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800b05e:	687b      	ldr	r3, [r7, #4]
 800b060:	3338      	adds	r3, #56	; 0x38
 800b062:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800b066:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800b06a:	4618      	mov	r0, r3
 800b06c:	f7ff fd37 	bl	800aade <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800b070:	687b      	ldr	r3, [r7, #4]
 800b072:	3338      	adds	r3, #56	; 0x38
 800b074:	4921      	ldr	r1, [pc, #132]	; (800b0fc <sync_fs+0xd8>)
 800b076:	4618      	mov	r0, r3
 800b078:	f7ff fd4c 	bl	800ab14 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800b07c:	687b      	ldr	r3, [r7, #4]
 800b07e:	3338      	adds	r3, #56	; 0x38
 800b080:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800b084:	491e      	ldr	r1, [pc, #120]	; (800b100 <sync_fs+0xdc>)
 800b086:	4618      	mov	r0, r3
 800b088:	f7ff fd44 	bl	800ab14 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800b08c:	687b      	ldr	r3, [r7, #4]
 800b08e:	3338      	adds	r3, #56	; 0x38
 800b090:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 800b094:	687b      	ldr	r3, [r7, #4]
 800b096:	699b      	ldr	r3, [r3, #24]
 800b098:	4619      	mov	r1, r3
 800b09a:	4610      	mov	r0, r2
 800b09c:	f7ff fd3a 	bl	800ab14 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800b0a0:	687b      	ldr	r3, [r7, #4]
 800b0a2:	3338      	adds	r3, #56	; 0x38
 800b0a4:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 800b0a8:	687b      	ldr	r3, [r7, #4]
 800b0aa:	695b      	ldr	r3, [r3, #20]
 800b0ac:	4619      	mov	r1, r3
 800b0ae:	4610      	mov	r0, r2
 800b0b0:	f7ff fd30 	bl	800ab14 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800b0b4:	687b      	ldr	r3, [r7, #4]
 800b0b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b0b8:	1c5a      	adds	r2, r3, #1
 800b0ba:	687b      	ldr	r3, [r7, #4]
 800b0bc:	635a      	str	r2, [r3, #52]	; 0x34
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800b0be:	687b      	ldr	r3, [r7, #4]
 800b0c0:	7858      	ldrb	r0, [r3, #1]
 800b0c2:	687b      	ldr	r3, [r7, #4]
 800b0c4:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800b0c8:	687b      	ldr	r3, [r7, #4]
 800b0ca:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b0cc:	2301      	movs	r3, #1
 800b0ce:	f7ff fc8d 	bl	800a9ec <disk_write>
			fs->fsi_flag = 0;
 800b0d2:	687b      	ldr	r3, [r7, #4]
 800b0d4:	2200      	movs	r2, #0
 800b0d6:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800b0d8:	687b      	ldr	r3, [r7, #4]
 800b0da:	785b      	ldrb	r3, [r3, #1]
 800b0dc:	2200      	movs	r2, #0
 800b0de:	2100      	movs	r1, #0
 800b0e0:	4618      	mov	r0, r3
 800b0e2:	f7ff fca3 	bl	800aa2c <disk_ioctl>
 800b0e6:	4603      	mov	r3, r0
 800b0e8:	2b00      	cmp	r3, #0
 800b0ea:	d001      	beq.n	800b0f0 <sync_fs+0xcc>
 800b0ec:	2301      	movs	r3, #1
 800b0ee:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800b0f0:	7bfb      	ldrb	r3, [r7, #15]
}
 800b0f2:	4618      	mov	r0, r3
 800b0f4:	3710      	adds	r7, #16
 800b0f6:	46bd      	mov	sp, r7
 800b0f8:	bd80      	pop	{r7, pc}
 800b0fa:	bf00      	nop
 800b0fc:	41615252 	.word	0x41615252
 800b100:	61417272 	.word	0x61417272

0800b104 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800b104:	b480      	push	{r7}
 800b106:	b083      	sub	sp, #12
 800b108:	af00      	add	r7, sp, #0
 800b10a:	6078      	str	r0, [r7, #4]
 800b10c:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800b10e:	683b      	ldr	r3, [r7, #0]
 800b110:	3b02      	subs	r3, #2
 800b112:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800b114:	687b      	ldr	r3, [r7, #4]
 800b116:	69db      	ldr	r3, [r3, #28]
 800b118:	3b02      	subs	r3, #2
 800b11a:	683a      	ldr	r2, [r7, #0]
 800b11c:	429a      	cmp	r2, r3
 800b11e:	d301      	bcc.n	800b124 <clust2sect+0x20>
 800b120:	2300      	movs	r3, #0
 800b122:	e008      	b.n	800b136 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800b124:	687b      	ldr	r3, [r7, #4]
 800b126:	895b      	ldrh	r3, [r3, #10]
 800b128:	461a      	mov	r2, r3
 800b12a:	683b      	ldr	r3, [r7, #0]
 800b12c:	fb03 f202 	mul.w	r2, r3, r2
 800b130:	687b      	ldr	r3, [r7, #4]
 800b132:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b134:	4413      	add	r3, r2
}
 800b136:	4618      	mov	r0, r3
 800b138:	370c      	adds	r7, #12
 800b13a:	46bd      	mov	sp, r7
 800b13c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b140:	4770      	bx	lr

0800b142 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800b142:	b580      	push	{r7, lr}
 800b144:	b086      	sub	sp, #24
 800b146:	af00      	add	r7, sp, #0
 800b148:	6078      	str	r0, [r7, #4]
 800b14a:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800b14c:	687b      	ldr	r3, [r7, #4]
 800b14e:	681b      	ldr	r3, [r3, #0]
 800b150:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800b152:	683b      	ldr	r3, [r7, #0]
 800b154:	2b01      	cmp	r3, #1
 800b156:	d904      	bls.n	800b162 <get_fat+0x20>
 800b158:	693b      	ldr	r3, [r7, #16]
 800b15a:	69db      	ldr	r3, [r3, #28]
 800b15c:	683a      	ldr	r2, [r7, #0]
 800b15e:	429a      	cmp	r2, r3
 800b160:	d302      	bcc.n	800b168 <get_fat+0x26>
		val = 1;	/* Internal error */
 800b162:	2301      	movs	r3, #1
 800b164:	617b      	str	r3, [r7, #20]
 800b166:	e0bb      	b.n	800b2e0 <get_fat+0x19e>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800b168:	f04f 33ff 	mov.w	r3, #4294967295
 800b16c:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800b16e:	693b      	ldr	r3, [r7, #16]
 800b170:	781b      	ldrb	r3, [r3, #0]
 800b172:	2b03      	cmp	r3, #3
 800b174:	f000 8083 	beq.w	800b27e <get_fat+0x13c>
 800b178:	2b03      	cmp	r3, #3
 800b17a:	f300 80a7 	bgt.w	800b2cc <get_fat+0x18a>
 800b17e:	2b01      	cmp	r3, #1
 800b180:	d002      	beq.n	800b188 <get_fat+0x46>
 800b182:	2b02      	cmp	r3, #2
 800b184:	d056      	beq.n	800b234 <get_fat+0xf2>
 800b186:	e0a1      	b.n	800b2cc <get_fat+0x18a>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800b188:	683b      	ldr	r3, [r7, #0]
 800b18a:	60fb      	str	r3, [r7, #12]
 800b18c:	68fb      	ldr	r3, [r7, #12]
 800b18e:	085b      	lsrs	r3, r3, #1
 800b190:	68fa      	ldr	r2, [r7, #12]
 800b192:	4413      	add	r3, r2
 800b194:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800b196:	693b      	ldr	r3, [r7, #16]
 800b198:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800b19a:	693b      	ldr	r3, [r7, #16]
 800b19c:	899b      	ldrh	r3, [r3, #12]
 800b19e:	4619      	mov	r1, r3
 800b1a0:	68fb      	ldr	r3, [r7, #12]
 800b1a2:	fbb3 f3f1 	udiv	r3, r3, r1
 800b1a6:	4413      	add	r3, r2
 800b1a8:	4619      	mov	r1, r3
 800b1aa:	6938      	ldr	r0, [r7, #16]
 800b1ac:	f7ff ff0c 	bl	800afc8 <move_window>
 800b1b0:	4603      	mov	r3, r0
 800b1b2:	2b00      	cmp	r3, #0
 800b1b4:	f040 808d 	bne.w	800b2d2 <get_fat+0x190>
			wc = fs->win[bc++ % SS(fs)];
 800b1b8:	68fb      	ldr	r3, [r7, #12]
 800b1ba:	1c5a      	adds	r2, r3, #1
 800b1bc:	60fa      	str	r2, [r7, #12]
 800b1be:	693a      	ldr	r2, [r7, #16]
 800b1c0:	8992      	ldrh	r2, [r2, #12]
 800b1c2:	fbb3 f1f2 	udiv	r1, r3, r2
 800b1c6:	fb01 f202 	mul.w	r2, r1, r2
 800b1ca:	1a9b      	subs	r3, r3, r2
 800b1cc:	693a      	ldr	r2, [r7, #16]
 800b1ce:	4413      	add	r3, r2
 800b1d0:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800b1d4:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800b1d6:	693b      	ldr	r3, [r7, #16]
 800b1d8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800b1da:	693b      	ldr	r3, [r7, #16]
 800b1dc:	899b      	ldrh	r3, [r3, #12]
 800b1de:	4619      	mov	r1, r3
 800b1e0:	68fb      	ldr	r3, [r7, #12]
 800b1e2:	fbb3 f3f1 	udiv	r3, r3, r1
 800b1e6:	4413      	add	r3, r2
 800b1e8:	4619      	mov	r1, r3
 800b1ea:	6938      	ldr	r0, [r7, #16]
 800b1ec:	f7ff feec 	bl	800afc8 <move_window>
 800b1f0:	4603      	mov	r3, r0
 800b1f2:	2b00      	cmp	r3, #0
 800b1f4:	d16f      	bne.n	800b2d6 <get_fat+0x194>
			wc |= fs->win[bc % SS(fs)] << 8;
 800b1f6:	693b      	ldr	r3, [r7, #16]
 800b1f8:	899b      	ldrh	r3, [r3, #12]
 800b1fa:	461a      	mov	r2, r3
 800b1fc:	68fb      	ldr	r3, [r7, #12]
 800b1fe:	fbb3 f1f2 	udiv	r1, r3, r2
 800b202:	fb01 f202 	mul.w	r2, r1, r2
 800b206:	1a9b      	subs	r3, r3, r2
 800b208:	693a      	ldr	r2, [r7, #16]
 800b20a:	4413      	add	r3, r2
 800b20c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800b210:	021b      	lsls	r3, r3, #8
 800b212:	461a      	mov	r2, r3
 800b214:	68bb      	ldr	r3, [r7, #8]
 800b216:	4313      	orrs	r3, r2
 800b218:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800b21a:	683b      	ldr	r3, [r7, #0]
 800b21c:	f003 0301 	and.w	r3, r3, #1
 800b220:	2b00      	cmp	r3, #0
 800b222:	d002      	beq.n	800b22a <get_fat+0xe8>
 800b224:	68bb      	ldr	r3, [r7, #8]
 800b226:	091b      	lsrs	r3, r3, #4
 800b228:	e002      	b.n	800b230 <get_fat+0xee>
 800b22a:	68bb      	ldr	r3, [r7, #8]
 800b22c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800b230:	617b      	str	r3, [r7, #20]
			break;
 800b232:	e055      	b.n	800b2e0 <get_fat+0x19e>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800b234:	693b      	ldr	r3, [r7, #16]
 800b236:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800b238:	693b      	ldr	r3, [r7, #16]
 800b23a:	899b      	ldrh	r3, [r3, #12]
 800b23c:	085b      	lsrs	r3, r3, #1
 800b23e:	b29b      	uxth	r3, r3
 800b240:	4619      	mov	r1, r3
 800b242:	683b      	ldr	r3, [r7, #0]
 800b244:	fbb3 f3f1 	udiv	r3, r3, r1
 800b248:	4413      	add	r3, r2
 800b24a:	4619      	mov	r1, r3
 800b24c:	6938      	ldr	r0, [r7, #16]
 800b24e:	f7ff febb 	bl	800afc8 <move_window>
 800b252:	4603      	mov	r3, r0
 800b254:	2b00      	cmp	r3, #0
 800b256:	d140      	bne.n	800b2da <get_fat+0x198>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800b258:	693b      	ldr	r3, [r7, #16]
 800b25a:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800b25e:	683b      	ldr	r3, [r7, #0]
 800b260:	005b      	lsls	r3, r3, #1
 800b262:	693a      	ldr	r2, [r7, #16]
 800b264:	8992      	ldrh	r2, [r2, #12]
 800b266:	fbb3 f0f2 	udiv	r0, r3, r2
 800b26a:	fb00 f202 	mul.w	r2, r0, r2
 800b26e:	1a9b      	subs	r3, r3, r2
 800b270:	440b      	add	r3, r1
 800b272:	4618      	mov	r0, r3
 800b274:	f7ff fbf8 	bl	800aa68 <ld_word>
 800b278:	4603      	mov	r3, r0
 800b27a:	617b      	str	r3, [r7, #20]
			break;
 800b27c:	e030      	b.n	800b2e0 <get_fat+0x19e>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800b27e:	693b      	ldr	r3, [r7, #16]
 800b280:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800b282:	693b      	ldr	r3, [r7, #16]
 800b284:	899b      	ldrh	r3, [r3, #12]
 800b286:	089b      	lsrs	r3, r3, #2
 800b288:	b29b      	uxth	r3, r3
 800b28a:	4619      	mov	r1, r3
 800b28c:	683b      	ldr	r3, [r7, #0]
 800b28e:	fbb3 f3f1 	udiv	r3, r3, r1
 800b292:	4413      	add	r3, r2
 800b294:	4619      	mov	r1, r3
 800b296:	6938      	ldr	r0, [r7, #16]
 800b298:	f7ff fe96 	bl	800afc8 <move_window>
 800b29c:	4603      	mov	r3, r0
 800b29e:	2b00      	cmp	r3, #0
 800b2a0:	d11d      	bne.n	800b2de <get_fat+0x19c>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800b2a2:	693b      	ldr	r3, [r7, #16]
 800b2a4:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800b2a8:	683b      	ldr	r3, [r7, #0]
 800b2aa:	009b      	lsls	r3, r3, #2
 800b2ac:	693a      	ldr	r2, [r7, #16]
 800b2ae:	8992      	ldrh	r2, [r2, #12]
 800b2b0:	fbb3 f0f2 	udiv	r0, r3, r2
 800b2b4:	fb00 f202 	mul.w	r2, r0, r2
 800b2b8:	1a9b      	subs	r3, r3, r2
 800b2ba:	440b      	add	r3, r1
 800b2bc:	4618      	mov	r0, r3
 800b2be:	f7ff fbeb 	bl	800aa98 <ld_dword>
 800b2c2:	4603      	mov	r3, r0
 800b2c4:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800b2c8:	617b      	str	r3, [r7, #20]
			break;
 800b2ca:	e009      	b.n	800b2e0 <get_fat+0x19e>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800b2cc:	2301      	movs	r3, #1
 800b2ce:	617b      	str	r3, [r7, #20]
 800b2d0:	e006      	b.n	800b2e0 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800b2d2:	bf00      	nop
 800b2d4:	e004      	b.n	800b2e0 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800b2d6:	bf00      	nop
 800b2d8:	e002      	b.n	800b2e0 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800b2da:	bf00      	nop
 800b2dc:	e000      	b.n	800b2e0 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800b2de:	bf00      	nop
		}
	}

	return val;
 800b2e0:	697b      	ldr	r3, [r7, #20]
}
 800b2e2:	4618      	mov	r0, r3
 800b2e4:	3718      	adds	r7, #24
 800b2e6:	46bd      	mov	sp, r7
 800b2e8:	bd80      	pop	{r7, pc}

0800b2ea <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800b2ea:	b590      	push	{r4, r7, lr}
 800b2ec:	b089      	sub	sp, #36	; 0x24
 800b2ee:	af00      	add	r7, sp, #0
 800b2f0:	60f8      	str	r0, [r7, #12]
 800b2f2:	60b9      	str	r1, [r7, #8]
 800b2f4:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800b2f6:	2302      	movs	r3, #2
 800b2f8:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800b2fa:	68bb      	ldr	r3, [r7, #8]
 800b2fc:	2b01      	cmp	r3, #1
 800b2fe:	f240 8102 	bls.w	800b506 <put_fat+0x21c>
 800b302:	68fb      	ldr	r3, [r7, #12]
 800b304:	69db      	ldr	r3, [r3, #28]
 800b306:	68ba      	ldr	r2, [r7, #8]
 800b308:	429a      	cmp	r2, r3
 800b30a:	f080 80fc 	bcs.w	800b506 <put_fat+0x21c>
		switch (fs->fs_type) {
 800b30e:	68fb      	ldr	r3, [r7, #12]
 800b310:	781b      	ldrb	r3, [r3, #0]
 800b312:	2b03      	cmp	r3, #3
 800b314:	f000 80b6 	beq.w	800b484 <put_fat+0x19a>
 800b318:	2b03      	cmp	r3, #3
 800b31a:	f300 80fd 	bgt.w	800b518 <put_fat+0x22e>
 800b31e:	2b01      	cmp	r3, #1
 800b320:	d003      	beq.n	800b32a <put_fat+0x40>
 800b322:	2b02      	cmp	r3, #2
 800b324:	f000 8083 	beq.w	800b42e <put_fat+0x144>
 800b328:	e0f6      	b.n	800b518 <put_fat+0x22e>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800b32a:	68bb      	ldr	r3, [r7, #8]
 800b32c:	61bb      	str	r3, [r7, #24]
 800b32e:	69bb      	ldr	r3, [r7, #24]
 800b330:	085b      	lsrs	r3, r3, #1
 800b332:	69ba      	ldr	r2, [r7, #24]
 800b334:	4413      	add	r3, r2
 800b336:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800b338:	68fb      	ldr	r3, [r7, #12]
 800b33a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800b33c:	68fb      	ldr	r3, [r7, #12]
 800b33e:	899b      	ldrh	r3, [r3, #12]
 800b340:	4619      	mov	r1, r3
 800b342:	69bb      	ldr	r3, [r7, #24]
 800b344:	fbb3 f3f1 	udiv	r3, r3, r1
 800b348:	4413      	add	r3, r2
 800b34a:	4619      	mov	r1, r3
 800b34c:	68f8      	ldr	r0, [r7, #12]
 800b34e:	f7ff fe3b 	bl	800afc8 <move_window>
 800b352:	4603      	mov	r3, r0
 800b354:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800b356:	7ffb      	ldrb	r3, [r7, #31]
 800b358:	2b00      	cmp	r3, #0
 800b35a:	f040 80d6 	bne.w	800b50a <put_fat+0x220>
			p = fs->win + bc++ % SS(fs);
 800b35e:	68fb      	ldr	r3, [r7, #12]
 800b360:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800b364:	69bb      	ldr	r3, [r7, #24]
 800b366:	1c5a      	adds	r2, r3, #1
 800b368:	61ba      	str	r2, [r7, #24]
 800b36a:	68fa      	ldr	r2, [r7, #12]
 800b36c:	8992      	ldrh	r2, [r2, #12]
 800b36e:	fbb3 f0f2 	udiv	r0, r3, r2
 800b372:	fb00 f202 	mul.w	r2, r0, r2
 800b376:	1a9b      	subs	r3, r3, r2
 800b378:	440b      	add	r3, r1
 800b37a:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800b37c:	68bb      	ldr	r3, [r7, #8]
 800b37e:	f003 0301 	and.w	r3, r3, #1
 800b382:	2b00      	cmp	r3, #0
 800b384:	d00d      	beq.n	800b3a2 <put_fat+0xb8>
 800b386:	697b      	ldr	r3, [r7, #20]
 800b388:	781b      	ldrb	r3, [r3, #0]
 800b38a:	b25b      	sxtb	r3, r3
 800b38c:	f003 030f 	and.w	r3, r3, #15
 800b390:	b25a      	sxtb	r2, r3
 800b392:	687b      	ldr	r3, [r7, #4]
 800b394:	b2db      	uxtb	r3, r3
 800b396:	011b      	lsls	r3, r3, #4
 800b398:	b25b      	sxtb	r3, r3
 800b39a:	4313      	orrs	r3, r2
 800b39c:	b25b      	sxtb	r3, r3
 800b39e:	b2db      	uxtb	r3, r3
 800b3a0:	e001      	b.n	800b3a6 <put_fat+0xbc>
 800b3a2:	687b      	ldr	r3, [r7, #4]
 800b3a4:	b2db      	uxtb	r3, r3
 800b3a6:	697a      	ldr	r2, [r7, #20]
 800b3a8:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800b3aa:	68fb      	ldr	r3, [r7, #12]
 800b3ac:	2201      	movs	r2, #1
 800b3ae:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800b3b0:	68fb      	ldr	r3, [r7, #12]
 800b3b2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800b3b4:	68fb      	ldr	r3, [r7, #12]
 800b3b6:	899b      	ldrh	r3, [r3, #12]
 800b3b8:	4619      	mov	r1, r3
 800b3ba:	69bb      	ldr	r3, [r7, #24]
 800b3bc:	fbb3 f3f1 	udiv	r3, r3, r1
 800b3c0:	4413      	add	r3, r2
 800b3c2:	4619      	mov	r1, r3
 800b3c4:	68f8      	ldr	r0, [r7, #12]
 800b3c6:	f7ff fdff 	bl	800afc8 <move_window>
 800b3ca:	4603      	mov	r3, r0
 800b3cc:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800b3ce:	7ffb      	ldrb	r3, [r7, #31]
 800b3d0:	2b00      	cmp	r3, #0
 800b3d2:	f040 809c 	bne.w	800b50e <put_fat+0x224>
			p = fs->win + bc % SS(fs);
 800b3d6:	68fb      	ldr	r3, [r7, #12]
 800b3d8:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800b3dc:	68fb      	ldr	r3, [r7, #12]
 800b3de:	899b      	ldrh	r3, [r3, #12]
 800b3e0:	461a      	mov	r2, r3
 800b3e2:	69bb      	ldr	r3, [r7, #24]
 800b3e4:	fbb3 f0f2 	udiv	r0, r3, r2
 800b3e8:	fb00 f202 	mul.w	r2, r0, r2
 800b3ec:	1a9b      	subs	r3, r3, r2
 800b3ee:	440b      	add	r3, r1
 800b3f0:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800b3f2:	68bb      	ldr	r3, [r7, #8]
 800b3f4:	f003 0301 	and.w	r3, r3, #1
 800b3f8:	2b00      	cmp	r3, #0
 800b3fa:	d003      	beq.n	800b404 <put_fat+0x11a>
 800b3fc:	687b      	ldr	r3, [r7, #4]
 800b3fe:	091b      	lsrs	r3, r3, #4
 800b400:	b2db      	uxtb	r3, r3
 800b402:	e00e      	b.n	800b422 <put_fat+0x138>
 800b404:	697b      	ldr	r3, [r7, #20]
 800b406:	781b      	ldrb	r3, [r3, #0]
 800b408:	b25b      	sxtb	r3, r3
 800b40a:	f023 030f 	bic.w	r3, r3, #15
 800b40e:	b25a      	sxtb	r2, r3
 800b410:	687b      	ldr	r3, [r7, #4]
 800b412:	0a1b      	lsrs	r3, r3, #8
 800b414:	b25b      	sxtb	r3, r3
 800b416:	f003 030f 	and.w	r3, r3, #15
 800b41a:	b25b      	sxtb	r3, r3
 800b41c:	4313      	orrs	r3, r2
 800b41e:	b25b      	sxtb	r3, r3
 800b420:	b2db      	uxtb	r3, r3
 800b422:	697a      	ldr	r2, [r7, #20]
 800b424:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800b426:	68fb      	ldr	r3, [r7, #12]
 800b428:	2201      	movs	r2, #1
 800b42a:	70da      	strb	r2, [r3, #3]
			break;
 800b42c:	e074      	b.n	800b518 <put_fat+0x22e>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800b42e:	68fb      	ldr	r3, [r7, #12]
 800b430:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800b432:	68fb      	ldr	r3, [r7, #12]
 800b434:	899b      	ldrh	r3, [r3, #12]
 800b436:	085b      	lsrs	r3, r3, #1
 800b438:	b29b      	uxth	r3, r3
 800b43a:	4619      	mov	r1, r3
 800b43c:	68bb      	ldr	r3, [r7, #8]
 800b43e:	fbb3 f3f1 	udiv	r3, r3, r1
 800b442:	4413      	add	r3, r2
 800b444:	4619      	mov	r1, r3
 800b446:	68f8      	ldr	r0, [r7, #12]
 800b448:	f7ff fdbe 	bl	800afc8 <move_window>
 800b44c:	4603      	mov	r3, r0
 800b44e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800b450:	7ffb      	ldrb	r3, [r7, #31]
 800b452:	2b00      	cmp	r3, #0
 800b454:	d15d      	bne.n	800b512 <put_fat+0x228>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800b456:	68fb      	ldr	r3, [r7, #12]
 800b458:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800b45c:	68bb      	ldr	r3, [r7, #8]
 800b45e:	005b      	lsls	r3, r3, #1
 800b460:	68fa      	ldr	r2, [r7, #12]
 800b462:	8992      	ldrh	r2, [r2, #12]
 800b464:	fbb3 f0f2 	udiv	r0, r3, r2
 800b468:	fb00 f202 	mul.w	r2, r0, r2
 800b46c:	1a9b      	subs	r3, r3, r2
 800b46e:	440b      	add	r3, r1
 800b470:	687a      	ldr	r2, [r7, #4]
 800b472:	b292      	uxth	r2, r2
 800b474:	4611      	mov	r1, r2
 800b476:	4618      	mov	r0, r3
 800b478:	f7ff fb31 	bl	800aade <st_word>
			fs->wflag = 1;
 800b47c:	68fb      	ldr	r3, [r7, #12]
 800b47e:	2201      	movs	r2, #1
 800b480:	70da      	strb	r2, [r3, #3]
			break;
 800b482:	e049      	b.n	800b518 <put_fat+0x22e>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800b484:	68fb      	ldr	r3, [r7, #12]
 800b486:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800b488:	68fb      	ldr	r3, [r7, #12]
 800b48a:	899b      	ldrh	r3, [r3, #12]
 800b48c:	089b      	lsrs	r3, r3, #2
 800b48e:	b29b      	uxth	r3, r3
 800b490:	4619      	mov	r1, r3
 800b492:	68bb      	ldr	r3, [r7, #8]
 800b494:	fbb3 f3f1 	udiv	r3, r3, r1
 800b498:	4413      	add	r3, r2
 800b49a:	4619      	mov	r1, r3
 800b49c:	68f8      	ldr	r0, [r7, #12]
 800b49e:	f7ff fd93 	bl	800afc8 <move_window>
 800b4a2:	4603      	mov	r3, r0
 800b4a4:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800b4a6:	7ffb      	ldrb	r3, [r7, #31]
 800b4a8:	2b00      	cmp	r3, #0
 800b4aa:	d134      	bne.n	800b516 <put_fat+0x22c>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800b4ac:	687b      	ldr	r3, [r7, #4]
 800b4ae:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 800b4b2:	68fb      	ldr	r3, [r7, #12]
 800b4b4:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800b4b8:	68bb      	ldr	r3, [r7, #8]
 800b4ba:	009b      	lsls	r3, r3, #2
 800b4bc:	68fa      	ldr	r2, [r7, #12]
 800b4be:	8992      	ldrh	r2, [r2, #12]
 800b4c0:	fbb3 f0f2 	udiv	r0, r3, r2
 800b4c4:	fb00 f202 	mul.w	r2, r0, r2
 800b4c8:	1a9b      	subs	r3, r3, r2
 800b4ca:	440b      	add	r3, r1
 800b4cc:	4618      	mov	r0, r3
 800b4ce:	f7ff fae3 	bl	800aa98 <ld_dword>
 800b4d2:	4603      	mov	r3, r0
 800b4d4:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800b4d8:	4323      	orrs	r3, r4
 800b4da:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800b4dc:	68fb      	ldr	r3, [r7, #12]
 800b4de:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800b4e2:	68bb      	ldr	r3, [r7, #8]
 800b4e4:	009b      	lsls	r3, r3, #2
 800b4e6:	68fa      	ldr	r2, [r7, #12]
 800b4e8:	8992      	ldrh	r2, [r2, #12]
 800b4ea:	fbb3 f0f2 	udiv	r0, r3, r2
 800b4ee:	fb00 f202 	mul.w	r2, r0, r2
 800b4f2:	1a9b      	subs	r3, r3, r2
 800b4f4:	440b      	add	r3, r1
 800b4f6:	6879      	ldr	r1, [r7, #4]
 800b4f8:	4618      	mov	r0, r3
 800b4fa:	f7ff fb0b 	bl	800ab14 <st_dword>
			fs->wflag = 1;
 800b4fe:	68fb      	ldr	r3, [r7, #12]
 800b500:	2201      	movs	r2, #1
 800b502:	70da      	strb	r2, [r3, #3]
			break;
 800b504:	e008      	b.n	800b518 <put_fat+0x22e>
		}
	}
 800b506:	bf00      	nop
 800b508:	e006      	b.n	800b518 <put_fat+0x22e>
			if (res != FR_OK) break;
 800b50a:	bf00      	nop
 800b50c:	e004      	b.n	800b518 <put_fat+0x22e>
			if (res != FR_OK) break;
 800b50e:	bf00      	nop
 800b510:	e002      	b.n	800b518 <put_fat+0x22e>
			if (res != FR_OK) break;
 800b512:	bf00      	nop
 800b514:	e000      	b.n	800b518 <put_fat+0x22e>
			if (res != FR_OK) break;
 800b516:	bf00      	nop
	return res;
 800b518:	7ffb      	ldrb	r3, [r7, #31]
}
 800b51a:	4618      	mov	r0, r3
 800b51c:	3724      	adds	r7, #36	; 0x24
 800b51e:	46bd      	mov	sp, r7
 800b520:	bd90      	pop	{r4, r7, pc}

0800b522 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800b522:	b580      	push	{r7, lr}
 800b524:	b088      	sub	sp, #32
 800b526:	af00      	add	r7, sp, #0
 800b528:	60f8      	str	r0, [r7, #12]
 800b52a:	60b9      	str	r1, [r7, #8]
 800b52c:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800b52e:	2300      	movs	r3, #0
 800b530:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800b532:	68fb      	ldr	r3, [r7, #12]
 800b534:	681b      	ldr	r3, [r3, #0]
 800b536:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800b538:	68bb      	ldr	r3, [r7, #8]
 800b53a:	2b01      	cmp	r3, #1
 800b53c:	d904      	bls.n	800b548 <remove_chain+0x26>
 800b53e:	69bb      	ldr	r3, [r7, #24]
 800b540:	69db      	ldr	r3, [r3, #28]
 800b542:	68ba      	ldr	r2, [r7, #8]
 800b544:	429a      	cmp	r2, r3
 800b546:	d301      	bcc.n	800b54c <remove_chain+0x2a>
 800b548:	2302      	movs	r3, #2
 800b54a:	e04b      	b.n	800b5e4 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800b54c:	687b      	ldr	r3, [r7, #4]
 800b54e:	2b00      	cmp	r3, #0
 800b550:	d00c      	beq.n	800b56c <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800b552:	f04f 32ff 	mov.w	r2, #4294967295
 800b556:	6879      	ldr	r1, [r7, #4]
 800b558:	69b8      	ldr	r0, [r7, #24]
 800b55a:	f7ff fec6 	bl	800b2ea <put_fat>
 800b55e:	4603      	mov	r3, r0
 800b560:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800b562:	7ffb      	ldrb	r3, [r7, #31]
 800b564:	2b00      	cmp	r3, #0
 800b566:	d001      	beq.n	800b56c <remove_chain+0x4a>
 800b568:	7ffb      	ldrb	r3, [r7, #31]
 800b56a:	e03b      	b.n	800b5e4 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800b56c:	68b9      	ldr	r1, [r7, #8]
 800b56e:	68f8      	ldr	r0, [r7, #12]
 800b570:	f7ff fde7 	bl	800b142 <get_fat>
 800b574:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800b576:	697b      	ldr	r3, [r7, #20]
 800b578:	2b00      	cmp	r3, #0
 800b57a:	d031      	beq.n	800b5e0 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800b57c:	697b      	ldr	r3, [r7, #20]
 800b57e:	2b01      	cmp	r3, #1
 800b580:	d101      	bne.n	800b586 <remove_chain+0x64>
 800b582:	2302      	movs	r3, #2
 800b584:	e02e      	b.n	800b5e4 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800b586:	697b      	ldr	r3, [r7, #20]
 800b588:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b58c:	d101      	bne.n	800b592 <remove_chain+0x70>
 800b58e:	2301      	movs	r3, #1
 800b590:	e028      	b.n	800b5e4 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800b592:	2200      	movs	r2, #0
 800b594:	68b9      	ldr	r1, [r7, #8]
 800b596:	69b8      	ldr	r0, [r7, #24]
 800b598:	f7ff fea7 	bl	800b2ea <put_fat>
 800b59c:	4603      	mov	r3, r0
 800b59e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800b5a0:	7ffb      	ldrb	r3, [r7, #31]
 800b5a2:	2b00      	cmp	r3, #0
 800b5a4:	d001      	beq.n	800b5aa <remove_chain+0x88>
 800b5a6:	7ffb      	ldrb	r3, [r7, #31]
 800b5a8:	e01c      	b.n	800b5e4 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800b5aa:	69bb      	ldr	r3, [r7, #24]
 800b5ac:	699a      	ldr	r2, [r3, #24]
 800b5ae:	69bb      	ldr	r3, [r7, #24]
 800b5b0:	69db      	ldr	r3, [r3, #28]
 800b5b2:	3b02      	subs	r3, #2
 800b5b4:	429a      	cmp	r2, r3
 800b5b6:	d20b      	bcs.n	800b5d0 <remove_chain+0xae>
			fs->free_clst++;
 800b5b8:	69bb      	ldr	r3, [r7, #24]
 800b5ba:	699b      	ldr	r3, [r3, #24]
 800b5bc:	1c5a      	adds	r2, r3, #1
 800b5be:	69bb      	ldr	r3, [r7, #24]
 800b5c0:	619a      	str	r2, [r3, #24]
			fs->fsi_flag |= 1;
 800b5c2:	69bb      	ldr	r3, [r7, #24]
 800b5c4:	791b      	ldrb	r3, [r3, #4]
 800b5c6:	f043 0301 	orr.w	r3, r3, #1
 800b5ca:	b2da      	uxtb	r2, r3
 800b5cc:	69bb      	ldr	r3, [r7, #24]
 800b5ce:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800b5d0:	697b      	ldr	r3, [r7, #20]
 800b5d2:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800b5d4:	69bb      	ldr	r3, [r7, #24]
 800b5d6:	69db      	ldr	r3, [r3, #28]
 800b5d8:	68ba      	ldr	r2, [r7, #8]
 800b5da:	429a      	cmp	r2, r3
 800b5dc:	d3c6      	bcc.n	800b56c <remove_chain+0x4a>
 800b5de:	e000      	b.n	800b5e2 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800b5e0:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800b5e2:	2300      	movs	r3, #0
}
 800b5e4:	4618      	mov	r0, r3
 800b5e6:	3720      	adds	r7, #32
 800b5e8:	46bd      	mov	sp, r7
 800b5ea:	bd80      	pop	{r7, pc}

0800b5ec <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800b5ec:	b580      	push	{r7, lr}
 800b5ee:	b088      	sub	sp, #32
 800b5f0:	af00      	add	r7, sp, #0
 800b5f2:	6078      	str	r0, [r7, #4]
 800b5f4:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800b5f6:	687b      	ldr	r3, [r7, #4]
 800b5f8:	681b      	ldr	r3, [r3, #0]
 800b5fa:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800b5fc:	683b      	ldr	r3, [r7, #0]
 800b5fe:	2b00      	cmp	r3, #0
 800b600:	d10d      	bne.n	800b61e <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800b602:	693b      	ldr	r3, [r7, #16]
 800b604:	695b      	ldr	r3, [r3, #20]
 800b606:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800b608:	69bb      	ldr	r3, [r7, #24]
 800b60a:	2b00      	cmp	r3, #0
 800b60c:	d004      	beq.n	800b618 <create_chain+0x2c>
 800b60e:	693b      	ldr	r3, [r7, #16]
 800b610:	69db      	ldr	r3, [r3, #28]
 800b612:	69ba      	ldr	r2, [r7, #24]
 800b614:	429a      	cmp	r2, r3
 800b616:	d31b      	bcc.n	800b650 <create_chain+0x64>
 800b618:	2301      	movs	r3, #1
 800b61a:	61bb      	str	r3, [r7, #24]
 800b61c:	e018      	b.n	800b650 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800b61e:	6839      	ldr	r1, [r7, #0]
 800b620:	6878      	ldr	r0, [r7, #4]
 800b622:	f7ff fd8e 	bl	800b142 <get_fat>
 800b626:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800b628:	68fb      	ldr	r3, [r7, #12]
 800b62a:	2b01      	cmp	r3, #1
 800b62c:	d801      	bhi.n	800b632 <create_chain+0x46>
 800b62e:	2301      	movs	r3, #1
 800b630:	e070      	b.n	800b714 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800b632:	68fb      	ldr	r3, [r7, #12]
 800b634:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b638:	d101      	bne.n	800b63e <create_chain+0x52>
 800b63a:	68fb      	ldr	r3, [r7, #12]
 800b63c:	e06a      	b.n	800b714 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800b63e:	693b      	ldr	r3, [r7, #16]
 800b640:	69db      	ldr	r3, [r3, #28]
 800b642:	68fa      	ldr	r2, [r7, #12]
 800b644:	429a      	cmp	r2, r3
 800b646:	d201      	bcs.n	800b64c <create_chain+0x60>
 800b648:	68fb      	ldr	r3, [r7, #12]
 800b64a:	e063      	b.n	800b714 <create_chain+0x128>
		scl = clst;
 800b64c:	683b      	ldr	r3, [r7, #0]
 800b64e:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800b650:	69bb      	ldr	r3, [r7, #24]
 800b652:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800b654:	69fb      	ldr	r3, [r7, #28]
 800b656:	3301      	adds	r3, #1
 800b658:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800b65a:	693b      	ldr	r3, [r7, #16]
 800b65c:	69db      	ldr	r3, [r3, #28]
 800b65e:	69fa      	ldr	r2, [r7, #28]
 800b660:	429a      	cmp	r2, r3
 800b662:	d307      	bcc.n	800b674 <create_chain+0x88>
				ncl = 2;
 800b664:	2302      	movs	r3, #2
 800b666:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800b668:	69fa      	ldr	r2, [r7, #28]
 800b66a:	69bb      	ldr	r3, [r7, #24]
 800b66c:	429a      	cmp	r2, r3
 800b66e:	d901      	bls.n	800b674 <create_chain+0x88>
 800b670:	2300      	movs	r3, #0
 800b672:	e04f      	b.n	800b714 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800b674:	69f9      	ldr	r1, [r7, #28]
 800b676:	6878      	ldr	r0, [r7, #4]
 800b678:	f7ff fd63 	bl	800b142 <get_fat>
 800b67c:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800b67e:	68fb      	ldr	r3, [r7, #12]
 800b680:	2b00      	cmp	r3, #0
 800b682:	d00e      	beq.n	800b6a2 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800b684:	68fb      	ldr	r3, [r7, #12]
 800b686:	2b01      	cmp	r3, #1
 800b688:	d003      	beq.n	800b692 <create_chain+0xa6>
 800b68a:	68fb      	ldr	r3, [r7, #12]
 800b68c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b690:	d101      	bne.n	800b696 <create_chain+0xaa>
 800b692:	68fb      	ldr	r3, [r7, #12]
 800b694:	e03e      	b.n	800b714 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800b696:	69fa      	ldr	r2, [r7, #28]
 800b698:	69bb      	ldr	r3, [r7, #24]
 800b69a:	429a      	cmp	r2, r3
 800b69c:	d1da      	bne.n	800b654 <create_chain+0x68>
 800b69e:	2300      	movs	r3, #0
 800b6a0:	e038      	b.n	800b714 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800b6a2:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800b6a4:	f04f 32ff 	mov.w	r2, #4294967295
 800b6a8:	69f9      	ldr	r1, [r7, #28]
 800b6aa:	6938      	ldr	r0, [r7, #16]
 800b6ac:	f7ff fe1d 	bl	800b2ea <put_fat>
 800b6b0:	4603      	mov	r3, r0
 800b6b2:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800b6b4:	7dfb      	ldrb	r3, [r7, #23]
 800b6b6:	2b00      	cmp	r3, #0
 800b6b8:	d109      	bne.n	800b6ce <create_chain+0xe2>
 800b6ba:	683b      	ldr	r3, [r7, #0]
 800b6bc:	2b00      	cmp	r3, #0
 800b6be:	d006      	beq.n	800b6ce <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800b6c0:	69fa      	ldr	r2, [r7, #28]
 800b6c2:	6839      	ldr	r1, [r7, #0]
 800b6c4:	6938      	ldr	r0, [r7, #16]
 800b6c6:	f7ff fe10 	bl	800b2ea <put_fat>
 800b6ca:	4603      	mov	r3, r0
 800b6cc:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800b6ce:	7dfb      	ldrb	r3, [r7, #23]
 800b6d0:	2b00      	cmp	r3, #0
 800b6d2:	d116      	bne.n	800b702 <create_chain+0x116>
		fs->last_clst = ncl;
 800b6d4:	693b      	ldr	r3, [r7, #16]
 800b6d6:	69fa      	ldr	r2, [r7, #28]
 800b6d8:	615a      	str	r2, [r3, #20]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800b6da:	693b      	ldr	r3, [r7, #16]
 800b6dc:	699a      	ldr	r2, [r3, #24]
 800b6de:	693b      	ldr	r3, [r7, #16]
 800b6e0:	69db      	ldr	r3, [r3, #28]
 800b6e2:	3b02      	subs	r3, #2
 800b6e4:	429a      	cmp	r2, r3
 800b6e6:	d804      	bhi.n	800b6f2 <create_chain+0x106>
 800b6e8:	693b      	ldr	r3, [r7, #16]
 800b6ea:	699b      	ldr	r3, [r3, #24]
 800b6ec:	1e5a      	subs	r2, r3, #1
 800b6ee:	693b      	ldr	r3, [r7, #16]
 800b6f0:	619a      	str	r2, [r3, #24]
		fs->fsi_flag |= 1;
 800b6f2:	693b      	ldr	r3, [r7, #16]
 800b6f4:	791b      	ldrb	r3, [r3, #4]
 800b6f6:	f043 0301 	orr.w	r3, r3, #1
 800b6fa:	b2da      	uxtb	r2, r3
 800b6fc:	693b      	ldr	r3, [r7, #16]
 800b6fe:	711a      	strb	r2, [r3, #4]
 800b700:	e007      	b.n	800b712 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800b702:	7dfb      	ldrb	r3, [r7, #23]
 800b704:	2b01      	cmp	r3, #1
 800b706:	d102      	bne.n	800b70e <create_chain+0x122>
 800b708:	f04f 33ff 	mov.w	r3, #4294967295
 800b70c:	e000      	b.n	800b710 <create_chain+0x124>
 800b70e:	2301      	movs	r3, #1
 800b710:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800b712:	69fb      	ldr	r3, [r7, #28]
}
 800b714:	4618      	mov	r0, r3
 800b716:	3720      	adds	r7, #32
 800b718:	46bd      	mov	sp, r7
 800b71a:	bd80      	pop	{r7, pc}

0800b71c <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800b71c:	b480      	push	{r7}
 800b71e:	b087      	sub	sp, #28
 800b720:	af00      	add	r7, sp, #0
 800b722:	6078      	str	r0, [r7, #4]
 800b724:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800b726:	687b      	ldr	r3, [r7, #4]
 800b728:	681b      	ldr	r3, [r3, #0]
 800b72a:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800b72c:	687b      	ldr	r3, [r7, #4]
 800b72e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b730:	3304      	adds	r3, #4
 800b732:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800b734:	68fb      	ldr	r3, [r7, #12]
 800b736:	899b      	ldrh	r3, [r3, #12]
 800b738:	461a      	mov	r2, r3
 800b73a:	683b      	ldr	r3, [r7, #0]
 800b73c:	fbb3 f3f2 	udiv	r3, r3, r2
 800b740:	68fa      	ldr	r2, [r7, #12]
 800b742:	8952      	ldrh	r2, [r2, #10]
 800b744:	fbb3 f3f2 	udiv	r3, r3, r2
 800b748:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800b74a:	693b      	ldr	r3, [r7, #16]
 800b74c:	1d1a      	adds	r2, r3, #4
 800b74e:	613a      	str	r2, [r7, #16]
 800b750:	681b      	ldr	r3, [r3, #0]
 800b752:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800b754:	68bb      	ldr	r3, [r7, #8]
 800b756:	2b00      	cmp	r3, #0
 800b758:	d101      	bne.n	800b75e <clmt_clust+0x42>
 800b75a:	2300      	movs	r3, #0
 800b75c:	e010      	b.n	800b780 <clmt_clust+0x64>
		if (cl < ncl) break;	/* In this fragment? */
 800b75e:	697a      	ldr	r2, [r7, #20]
 800b760:	68bb      	ldr	r3, [r7, #8]
 800b762:	429a      	cmp	r2, r3
 800b764:	d307      	bcc.n	800b776 <clmt_clust+0x5a>
		cl -= ncl; tbl++;		/* Next fragment */
 800b766:	697a      	ldr	r2, [r7, #20]
 800b768:	68bb      	ldr	r3, [r7, #8]
 800b76a:	1ad3      	subs	r3, r2, r3
 800b76c:	617b      	str	r3, [r7, #20]
 800b76e:	693b      	ldr	r3, [r7, #16]
 800b770:	3304      	adds	r3, #4
 800b772:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800b774:	e7e9      	b.n	800b74a <clmt_clust+0x2e>
		if (cl < ncl) break;	/* In this fragment? */
 800b776:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800b778:	693b      	ldr	r3, [r7, #16]
 800b77a:	681a      	ldr	r2, [r3, #0]
 800b77c:	697b      	ldr	r3, [r7, #20]
 800b77e:	4413      	add	r3, r2
}
 800b780:	4618      	mov	r0, r3
 800b782:	371c      	adds	r7, #28
 800b784:	46bd      	mov	sp, r7
 800b786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b78a:	4770      	bx	lr

0800b78c <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800b78c:	b580      	push	{r7, lr}
 800b78e:	b086      	sub	sp, #24
 800b790:	af00      	add	r7, sp, #0
 800b792:	6078      	str	r0, [r7, #4]
 800b794:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800b796:	687b      	ldr	r3, [r7, #4]
 800b798:	681b      	ldr	r3, [r3, #0]
 800b79a:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800b79c:	683b      	ldr	r3, [r7, #0]
 800b79e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800b7a2:	d204      	bcs.n	800b7ae <dir_sdi+0x22>
 800b7a4:	683b      	ldr	r3, [r7, #0]
 800b7a6:	f003 031f 	and.w	r3, r3, #31
 800b7aa:	2b00      	cmp	r3, #0
 800b7ac:	d001      	beq.n	800b7b2 <dir_sdi+0x26>
		return FR_INT_ERR;
 800b7ae:	2302      	movs	r3, #2
 800b7b0:	e071      	b.n	800b896 <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 800b7b2:	687b      	ldr	r3, [r7, #4]
 800b7b4:	683a      	ldr	r2, [r7, #0]
 800b7b6:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800b7b8:	687b      	ldr	r3, [r7, #4]
 800b7ba:	689b      	ldr	r3, [r3, #8]
 800b7bc:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800b7be:	697b      	ldr	r3, [r7, #20]
 800b7c0:	2b00      	cmp	r3, #0
 800b7c2:	d106      	bne.n	800b7d2 <dir_sdi+0x46>
 800b7c4:	693b      	ldr	r3, [r7, #16]
 800b7c6:	781b      	ldrb	r3, [r3, #0]
 800b7c8:	2b02      	cmp	r3, #2
 800b7ca:	d902      	bls.n	800b7d2 <dir_sdi+0x46>
		clst = fs->dirbase;
 800b7cc:	693b      	ldr	r3, [r7, #16]
 800b7ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b7d0:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800b7d2:	697b      	ldr	r3, [r7, #20]
 800b7d4:	2b00      	cmp	r3, #0
 800b7d6:	d10c      	bne.n	800b7f2 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800b7d8:	683b      	ldr	r3, [r7, #0]
 800b7da:	095b      	lsrs	r3, r3, #5
 800b7dc:	693a      	ldr	r2, [r7, #16]
 800b7de:	8912      	ldrh	r2, [r2, #8]
 800b7e0:	4293      	cmp	r3, r2
 800b7e2:	d301      	bcc.n	800b7e8 <dir_sdi+0x5c>
 800b7e4:	2302      	movs	r3, #2
 800b7e6:	e056      	b.n	800b896 <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 800b7e8:	693b      	ldr	r3, [r7, #16]
 800b7ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b7ec:	687b      	ldr	r3, [r7, #4]
 800b7ee:	61da      	str	r2, [r3, #28]
 800b7f0:	e02d      	b.n	800b84e <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800b7f2:	693b      	ldr	r3, [r7, #16]
 800b7f4:	895b      	ldrh	r3, [r3, #10]
 800b7f6:	461a      	mov	r2, r3
 800b7f8:	693b      	ldr	r3, [r7, #16]
 800b7fa:	899b      	ldrh	r3, [r3, #12]
 800b7fc:	fb02 f303 	mul.w	r3, r2, r3
 800b800:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800b802:	e019      	b.n	800b838 <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800b804:	687b      	ldr	r3, [r7, #4]
 800b806:	6979      	ldr	r1, [r7, #20]
 800b808:	4618      	mov	r0, r3
 800b80a:	f7ff fc9a 	bl	800b142 <get_fat>
 800b80e:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800b810:	697b      	ldr	r3, [r7, #20]
 800b812:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b816:	d101      	bne.n	800b81c <dir_sdi+0x90>
 800b818:	2301      	movs	r3, #1
 800b81a:	e03c      	b.n	800b896 <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800b81c:	697b      	ldr	r3, [r7, #20]
 800b81e:	2b01      	cmp	r3, #1
 800b820:	d904      	bls.n	800b82c <dir_sdi+0xa0>
 800b822:	693b      	ldr	r3, [r7, #16]
 800b824:	69db      	ldr	r3, [r3, #28]
 800b826:	697a      	ldr	r2, [r7, #20]
 800b828:	429a      	cmp	r2, r3
 800b82a:	d301      	bcc.n	800b830 <dir_sdi+0xa4>
 800b82c:	2302      	movs	r3, #2
 800b82e:	e032      	b.n	800b896 <dir_sdi+0x10a>
			ofs -= csz;
 800b830:	683a      	ldr	r2, [r7, #0]
 800b832:	68fb      	ldr	r3, [r7, #12]
 800b834:	1ad3      	subs	r3, r2, r3
 800b836:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800b838:	683a      	ldr	r2, [r7, #0]
 800b83a:	68fb      	ldr	r3, [r7, #12]
 800b83c:	429a      	cmp	r2, r3
 800b83e:	d2e1      	bcs.n	800b804 <dir_sdi+0x78>
		}
		dp->sect = clust2sect(fs, clst);
 800b840:	6979      	ldr	r1, [r7, #20]
 800b842:	6938      	ldr	r0, [r7, #16]
 800b844:	f7ff fc5e 	bl	800b104 <clust2sect>
 800b848:	4602      	mov	r2, r0
 800b84a:	687b      	ldr	r3, [r7, #4]
 800b84c:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800b84e:	687b      	ldr	r3, [r7, #4]
 800b850:	697a      	ldr	r2, [r7, #20]
 800b852:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 800b854:	687b      	ldr	r3, [r7, #4]
 800b856:	69db      	ldr	r3, [r3, #28]
 800b858:	2b00      	cmp	r3, #0
 800b85a:	d101      	bne.n	800b860 <dir_sdi+0xd4>
 800b85c:	2302      	movs	r3, #2
 800b85e:	e01a      	b.n	800b896 <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800b860:	687b      	ldr	r3, [r7, #4]
 800b862:	69da      	ldr	r2, [r3, #28]
 800b864:	693b      	ldr	r3, [r7, #16]
 800b866:	899b      	ldrh	r3, [r3, #12]
 800b868:	4619      	mov	r1, r3
 800b86a:	683b      	ldr	r3, [r7, #0]
 800b86c:	fbb3 f3f1 	udiv	r3, r3, r1
 800b870:	441a      	add	r2, r3
 800b872:	687b      	ldr	r3, [r7, #4]
 800b874:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800b876:	693b      	ldr	r3, [r7, #16]
 800b878:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800b87c:	693b      	ldr	r3, [r7, #16]
 800b87e:	899b      	ldrh	r3, [r3, #12]
 800b880:	461a      	mov	r2, r3
 800b882:	683b      	ldr	r3, [r7, #0]
 800b884:	fbb3 f0f2 	udiv	r0, r3, r2
 800b888:	fb00 f202 	mul.w	r2, r0, r2
 800b88c:	1a9b      	subs	r3, r3, r2
 800b88e:	18ca      	adds	r2, r1, r3
 800b890:	687b      	ldr	r3, [r7, #4]
 800b892:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800b894:	2300      	movs	r3, #0
}
 800b896:	4618      	mov	r0, r3
 800b898:	3718      	adds	r7, #24
 800b89a:	46bd      	mov	sp, r7
 800b89c:	bd80      	pop	{r7, pc}

0800b89e <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800b89e:	b580      	push	{r7, lr}
 800b8a0:	b086      	sub	sp, #24
 800b8a2:	af00      	add	r7, sp, #0
 800b8a4:	6078      	str	r0, [r7, #4]
 800b8a6:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800b8a8:	687b      	ldr	r3, [r7, #4]
 800b8aa:	681b      	ldr	r3, [r3, #0]
 800b8ac:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800b8ae:	687b      	ldr	r3, [r7, #4]
 800b8b0:	695b      	ldr	r3, [r3, #20]
 800b8b2:	3320      	adds	r3, #32
 800b8b4:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800b8b6:	687b      	ldr	r3, [r7, #4]
 800b8b8:	69db      	ldr	r3, [r3, #28]
 800b8ba:	2b00      	cmp	r3, #0
 800b8bc:	d003      	beq.n	800b8c6 <dir_next+0x28>
 800b8be:	68bb      	ldr	r3, [r7, #8]
 800b8c0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800b8c4:	d301      	bcc.n	800b8ca <dir_next+0x2c>
 800b8c6:	2304      	movs	r3, #4
 800b8c8:	e0bb      	b.n	800ba42 <dir_next+0x1a4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800b8ca:	68fb      	ldr	r3, [r7, #12]
 800b8cc:	899b      	ldrh	r3, [r3, #12]
 800b8ce:	461a      	mov	r2, r3
 800b8d0:	68bb      	ldr	r3, [r7, #8]
 800b8d2:	fbb3 f1f2 	udiv	r1, r3, r2
 800b8d6:	fb01 f202 	mul.w	r2, r1, r2
 800b8da:	1a9b      	subs	r3, r3, r2
 800b8dc:	2b00      	cmp	r3, #0
 800b8de:	f040 809d 	bne.w	800ba1c <dir_next+0x17e>
		dp->sect++;				/* Next sector */
 800b8e2:	687b      	ldr	r3, [r7, #4]
 800b8e4:	69db      	ldr	r3, [r3, #28]
 800b8e6:	1c5a      	adds	r2, r3, #1
 800b8e8:	687b      	ldr	r3, [r7, #4]
 800b8ea:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 800b8ec:	687b      	ldr	r3, [r7, #4]
 800b8ee:	699b      	ldr	r3, [r3, #24]
 800b8f0:	2b00      	cmp	r3, #0
 800b8f2:	d10b      	bne.n	800b90c <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800b8f4:	68bb      	ldr	r3, [r7, #8]
 800b8f6:	095b      	lsrs	r3, r3, #5
 800b8f8:	68fa      	ldr	r2, [r7, #12]
 800b8fa:	8912      	ldrh	r2, [r2, #8]
 800b8fc:	4293      	cmp	r3, r2
 800b8fe:	f0c0 808d 	bcc.w	800ba1c <dir_next+0x17e>
				dp->sect = 0; return FR_NO_FILE;
 800b902:	687b      	ldr	r3, [r7, #4]
 800b904:	2200      	movs	r2, #0
 800b906:	61da      	str	r2, [r3, #28]
 800b908:	2304      	movs	r3, #4
 800b90a:	e09a      	b.n	800ba42 <dir_next+0x1a4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800b90c:	68fb      	ldr	r3, [r7, #12]
 800b90e:	899b      	ldrh	r3, [r3, #12]
 800b910:	461a      	mov	r2, r3
 800b912:	68bb      	ldr	r3, [r7, #8]
 800b914:	fbb3 f3f2 	udiv	r3, r3, r2
 800b918:	68fa      	ldr	r2, [r7, #12]
 800b91a:	8952      	ldrh	r2, [r2, #10]
 800b91c:	3a01      	subs	r2, #1
 800b91e:	4013      	ands	r3, r2
 800b920:	2b00      	cmp	r3, #0
 800b922:	d17b      	bne.n	800ba1c <dir_next+0x17e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800b924:	687a      	ldr	r2, [r7, #4]
 800b926:	687b      	ldr	r3, [r7, #4]
 800b928:	699b      	ldr	r3, [r3, #24]
 800b92a:	4619      	mov	r1, r3
 800b92c:	4610      	mov	r0, r2
 800b92e:	f7ff fc08 	bl	800b142 <get_fat>
 800b932:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800b934:	697b      	ldr	r3, [r7, #20]
 800b936:	2b01      	cmp	r3, #1
 800b938:	d801      	bhi.n	800b93e <dir_next+0xa0>
 800b93a:	2302      	movs	r3, #2
 800b93c:	e081      	b.n	800ba42 <dir_next+0x1a4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800b93e:	697b      	ldr	r3, [r7, #20]
 800b940:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b944:	d101      	bne.n	800b94a <dir_next+0xac>
 800b946:	2301      	movs	r3, #1
 800b948:	e07b      	b.n	800ba42 <dir_next+0x1a4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800b94a:	68fb      	ldr	r3, [r7, #12]
 800b94c:	69db      	ldr	r3, [r3, #28]
 800b94e:	697a      	ldr	r2, [r7, #20]
 800b950:	429a      	cmp	r2, r3
 800b952:	d359      	bcc.n	800ba08 <dir_next+0x16a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800b954:	683b      	ldr	r3, [r7, #0]
 800b956:	2b00      	cmp	r3, #0
 800b958:	d104      	bne.n	800b964 <dir_next+0xc6>
						dp->sect = 0; return FR_NO_FILE;
 800b95a:	687b      	ldr	r3, [r7, #4]
 800b95c:	2200      	movs	r2, #0
 800b95e:	61da      	str	r2, [r3, #28]
 800b960:	2304      	movs	r3, #4
 800b962:	e06e      	b.n	800ba42 <dir_next+0x1a4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800b964:	687a      	ldr	r2, [r7, #4]
 800b966:	687b      	ldr	r3, [r7, #4]
 800b968:	699b      	ldr	r3, [r3, #24]
 800b96a:	4619      	mov	r1, r3
 800b96c:	4610      	mov	r0, r2
 800b96e:	f7ff fe3d 	bl	800b5ec <create_chain>
 800b972:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800b974:	697b      	ldr	r3, [r7, #20]
 800b976:	2b00      	cmp	r3, #0
 800b978:	d101      	bne.n	800b97e <dir_next+0xe0>
 800b97a:	2307      	movs	r3, #7
 800b97c:	e061      	b.n	800ba42 <dir_next+0x1a4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800b97e:	697b      	ldr	r3, [r7, #20]
 800b980:	2b01      	cmp	r3, #1
 800b982:	d101      	bne.n	800b988 <dir_next+0xea>
 800b984:	2302      	movs	r3, #2
 800b986:	e05c      	b.n	800ba42 <dir_next+0x1a4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800b988:	697b      	ldr	r3, [r7, #20]
 800b98a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b98e:	d101      	bne.n	800b994 <dir_next+0xf6>
 800b990:	2301      	movs	r3, #1
 800b992:	e056      	b.n	800ba42 <dir_next+0x1a4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800b994:	68f8      	ldr	r0, [r7, #12]
 800b996:	f7ff fad3 	bl	800af40 <sync_window>
 800b99a:	4603      	mov	r3, r0
 800b99c:	2b00      	cmp	r3, #0
 800b99e:	d001      	beq.n	800b9a4 <dir_next+0x106>
 800b9a0:	2301      	movs	r3, #1
 800b9a2:	e04e      	b.n	800ba42 <dir_next+0x1a4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800b9a4:	68fb      	ldr	r3, [r7, #12]
 800b9a6:	f103 0038 	add.w	r0, r3, #56	; 0x38
 800b9aa:	68fb      	ldr	r3, [r7, #12]
 800b9ac:	899b      	ldrh	r3, [r3, #12]
 800b9ae:	461a      	mov	r2, r3
 800b9b0:	2100      	movs	r1, #0
 800b9b2:	f7ff f8fc 	bl	800abae <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800b9b6:	2300      	movs	r3, #0
 800b9b8:	613b      	str	r3, [r7, #16]
 800b9ba:	6979      	ldr	r1, [r7, #20]
 800b9bc:	68f8      	ldr	r0, [r7, #12]
 800b9be:	f7ff fba1 	bl	800b104 <clust2sect>
 800b9c2:	4602      	mov	r2, r0
 800b9c4:	68fb      	ldr	r3, [r7, #12]
 800b9c6:	635a      	str	r2, [r3, #52]	; 0x34
 800b9c8:	e012      	b.n	800b9f0 <dir_next+0x152>
						fs->wflag = 1;
 800b9ca:	68fb      	ldr	r3, [r7, #12]
 800b9cc:	2201      	movs	r2, #1
 800b9ce:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800b9d0:	68f8      	ldr	r0, [r7, #12]
 800b9d2:	f7ff fab5 	bl	800af40 <sync_window>
 800b9d6:	4603      	mov	r3, r0
 800b9d8:	2b00      	cmp	r3, #0
 800b9da:	d001      	beq.n	800b9e0 <dir_next+0x142>
 800b9dc:	2301      	movs	r3, #1
 800b9de:	e030      	b.n	800ba42 <dir_next+0x1a4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800b9e0:	693b      	ldr	r3, [r7, #16]
 800b9e2:	3301      	adds	r3, #1
 800b9e4:	613b      	str	r3, [r7, #16]
 800b9e6:	68fb      	ldr	r3, [r7, #12]
 800b9e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b9ea:	1c5a      	adds	r2, r3, #1
 800b9ec:	68fb      	ldr	r3, [r7, #12]
 800b9ee:	635a      	str	r2, [r3, #52]	; 0x34
 800b9f0:	68fb      	ldr	r3, [r7, #12]
 800b9f2:	895b      	ldrh	r3, [r3, #10]
 800b9f4:	461a      	mov	r2, r3
 800b9f6:	693b      	ldr	r3, [r7, #16]
 800b9f8:	4293      	cmp	r3, r2
 800b9fa:	d3e6      	bcc.n	800b9ca <dir_next+0x12c>
					}
					fs->winsect -= n;							/* Restore window offset */
 800b9fc:	68fb      	ldr	r3, [r7, #12]
 800b9fe:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ba00:	693b      	ldr	r3, [r7, #16]
 800ba02:	1ad2      	subs	r2, r2, r3
 800ba04:	68fb      	ldr	r3, [r7, #12]
 800ba06:	635a      	str	r2, [r3, #52]	; 0x34
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800ba08:	687b      	ldr	r3, [r7, #4]
 800ba0a:	697a      	ldr	r2, [r7, #20]
 800ba0c:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 800ba0e:	6979      	ldr	r1, [r7, #20]
 800ba10:	68f8      	ldr	r0, [r7, #12]
 800ba12:	f7ff fb77 	bl	800b104 <clust2sect>
 800ba16:	4602      	mov	r2, r0
 800ba18:	687b      	ldr	r3, [r7, #4]
 800ba1a:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800ba1c:	687b      	ldr	r3, [r7, #4]
 800ba1e:	68ba      	ldr	r2, [r7, #8]
 800ba20:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800ba22:	68fb      	ldr	r3, [r7, #12]
 800ba24:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800ba28:	68fb      	ldr	r3, [r7, #12]
 800ba2a:	899b      	ldrh	r3, [r3, #12]
 800ba2c:	461a      	mov	r2, r3
 800ba2e:	68bb      	ldr	r3, [r7, #8]
 800ba30:	fbb3 f0f2 	udiv	r0, r3, r2
 800ba34:	fb00 f202 	mul.w	r2, r0, r2
 800ba38:	1a9b      	subs	r3, r3, r2
 800ba3a:	18ca      	adds	r2, r1, r3
 800ba3c:	687b      	ldr	r3, [r7, #4]
 800ba3e:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800ba40:	2300      	movs	r3, #0
}
 800ba42:	4618      	mov	r0, r3
 800ba44:	3718      	adds	r7, #24
 800ba46:	46bd      	mov	sp, r7
 800ba48:	bd80      	pop	{r7, pc}

0800ba4a <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800ba4a:	b580      	push	{r7, lr}
 800ba4c:	b086      	sub	sp, #24
 800ba4e:	af00      	add	r7, sp, #0
 800ba50:	6078      	str	r0, [r7, #4]
 800ba52:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800ba54:	687b      	ldr	r3, [r7, #4]
 800ba56:	681b      	ldr	r3, [r3, #0]
 800ba58:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800ba5a:	2100      	movs	r1, #0
 800ba5c:	6878      	ldr	r0, [r7, #4]
 800ba5e:	f7ff fe95 	bl	800b78c <dir_sdi>
 800ba62:	4603      	mov	r3, r0
 800ba64:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800ba66:	7dfb      	ldrb	r3, [r7, #23]
 800ba68:	2b00      	cmp	r3, #0
 800ba6a:	d12b      	bne.n	800bac4 <dir_alloc+0x7a>
		n = 0;
 800ba6c:	2300      	movs	r3, #0
 800ba6e:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800ba70:	687b      	ldr	r3, [r7, #4]
 800ba72:	69db      	ldr	r3, [r3, #28]
 800ba74:	4619      	mov	r1, r3
 800ba76:	68f8      	ldr	r0, [r7, #12]
 800ba78:	f7ff faa6 	bl	800afc8 <move_window>
 800ba7c:	4603      	mov	r3, r0
 800ba7e:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800ba80:	7dfb      	ldrb	r3, [r7, #23]
 800ba82:	2b00      	cmp	r3, #0
 800ba84:	d11d      	bne.n	800bac2 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800ba86:	687b      	ldr	r3, [r7, #4]
 800ba88:	6a1b      	ldr	r3, [r3, #32]
 800ba8a:	781b      	ldrb	r3, [r3, #0]
 800ba8c:	2be5      	cmp	r3, #229	; 0xe5
 800ba8e:	d004      	beq.n	800ba9a <dir_alloc+0x50>
 800ba90:	687b      	ldr	r3, [r7, #4]
 800ba92:	6a1b      	ldr	r3, [r3, #32]
 800ba94:	781b      	ldrb	r3, [r3, #0]
 800ba96:	2b00      	cmp	r3, #0
 800ba98:	d107      	bne.n	800baaa <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800ba9a:	693b      	ldr	r3, [r7, #16]
 800ba9c:	3301      	adds	r3, #1
 800ba9e:	613b      	str	r3, [r7, #16]
 800baa0:	693a      	ldr	r2, [r7, #16]
 800baa2:	683b      	ldr	r3, [r7, #0]
 800baa4:	429a      	cmp	r2, r3
 800baa6:	d102      	bne.n	800baae <dir_alloc+0x64>
 800baa8:	e00c      	b.n	800bac4 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800baaa:	2300      	movs	r3, #0
 800baac:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800baae:	2101      	movs	r1, #1
 800bab0:	6878      	ldr	r0, [r7, #4]
 800bab2:	f7ff fef4 	bl	800b89e <dir_next>
 800bab6:	4603      	mov	r3, r0
 800bab8:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800baba:	7dfb      	ldrb	r3, [r7, #23]
 800babc:	2b00      	cmp	r3, #0
 800babe:	d0d7      	beq.n	800ba70 <dir_alloc+0x26>
 800bac0:	e000      	b.n	800bac4 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 800bac2:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800bac4:	7dfb      	ldrb	r3, [r7, #23]
 800bac6:	2b04      	cmp	r3, #4
 800bac8:	d101      	bne.n	800bace <dir_alloc+0x84>
 800baca:	2307      	movs	r3, #7
 800bacc:	75fb      	strb	r3, [r7, #23]
	return res;
 800bace:	7dfb      	ldrb	r3, [r7, #23]
}
 800bad0:	4618      	mov	r0, r3
 800bad2:	3718      	adds	r7, #24
 800bad4:	46bd      	mov	sp, r7
 800bad6:	bd80      	pop	{r7, pc}

0800bad8 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800bad8:	b580      	push	{r7, lr}
 800bada:	b084      	sub	sp, #16
 800badc:	af00      	add	r7, sp, #0
 800bade:	6078      	str	r0, [r7, #4]
 800bae0:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800bae2:	683b      	ldr	r3, [r7, #0]
 800bae4:	331a      	adds	r3, #26
 800bae6:	4618      	mov	r0, r3
 800bae8:	f7fe ffbe 	bl	800aa68 <ld_word>
 800baec:	4603      	mov	r3, r0
 800baee:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800baf0:	687b      	ldr	r3, [r7, #4]
 800baf2:	781b      	ldrb	r3, [r3, #0]
 800baf4:	2b03      	cmp	r3, #3
 800baf6:	d109      	bne.n	800bb0c <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800baf8:	683b      	ldr	r3, [r7, #0]
 800bafa:	3314      	adds	r3, #20
 800bafc:	4618      	mov	r0, r3
 800bafe:	f7fe ffb3 	bl	800aa68 <ld_word>
 800bb02:	4603      	mov	r3, r0
 800bb04:	041b      	lsls	r3, r3, #16
 800bb06:	68fa      	ldr	r2, [r7, #12]
 800bb08:	4313      	orrs	r3, r2
 800bb0a:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800bb0c:	68fb      	ldr	r3, [r7, #12]
}
 800bb0e:	4618      	mov	r0, r3
 800bb10:	3710      	adds	r7, #16
 800bb12:	46bd      	mov	sp, r7
 800bb14:	bd80      	pop	{r7, pc}

0800bb16 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800bb16:	b580      	push	{r7, lr}
 800bb18:	b084      	sub	sp, #16
 800bb1a:	af00      	add	r7, sp, #0
 800bb1c:	60f8      	str	r0, [r7, #12]
 800bb1e:	60b9      	str	r1, [r7, #8]
 800bb20:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800bb22:	68bb      	ldr	r3, [r7, #8]
 800bb24:	331a      	adds	r3, #26
 800bb26:	687a      	ldr	r2, [r7, #4]
 800bb28:	b292      	uxth	r2, r2
 800bb2a:	4611      	mov	r1, r2
 800bb2c:	4618      	mov	r0, r3
 800bb2e:	f7fe ffd6 	bl	800aade <st_word>
	if (fs->fs_type == FS_FAT32) {
 800bb32:	68fb      	ldr	r3, [r7, #12]
 800bb34:	781b      	ldrb	r3, [r3, #0]
 800bb36:	2b03      	cmp	r3, #3
 800bb38:	d109      	bne.n	800bb4e <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800bb3a:	68bb      	ldr	r3, [r7, #8]
 800bb3c:	f103 0214 	add.w	r2, r3, #20
 800bb40:	687b      	ldr	r3, [r7, #4]
 800bb42:	0c1b      	lsrs	r3, r3, #16
 800bb44:	b29b      	uxth	r3, r3
 800bb46:	4619      	mov	r1, r3
 800bb48:	4610      	mov	r0, r2
 800bb4a:	f7fe ffc8 	bl	800aade <st_word>
	}
}
 800bb4e:	bf00      	nop
 800bb50:	3710      	adds	r7, #16
 800bb52:	46bd      	mov	sp, r7
 800bb54:	bd80      	pop	{r7, pc}
	...

0800bb58 <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 800bb58:	b590      	push	{r4, r7, lr}
 800bb5a:	b087      	sub	sp, #28
 800bb5c:	af00      	add	r7, sp, #0
 800bb5e:	6078      	str	r0, [r7, #4]
 800bb60:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 800bb62:	683b      	ldr	r3, [r7, #0]
 800bb64:	331a      	adds	r3, #26
 800bb66:	4618      	mov	r0, r3
 800bb68:	f7fe ff7e 	bl	800aa68 <ld_word>
 800bb6c:	4603      	mov	r3, r0
 800bb6e:	2b00      	cmp	r3, #0
 800bb70:	d001      	beq.n	800bb76 <cmp_lfn+0x1e>
 800bb72:	2300      	movs	r3, #0
 800bb74:	e059      	b.n	800bc2a <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 800bb76:	683b      	ldr	r3, [r7, #0]
 800bb78:	781b      	ldrb	r3, [r3, #0]
 800bb7a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800bb7e:	1e5a      	subs	r2, r3, #1
 800bb80:	4613      	mov	r3, r2
 800bb82:	005b      	lsls	r3, r3, #1
 800bb84:	4413      	add	r3, r2
 800bb86:	009b      	lsls	r3, r3, #2
 800bb88:	4413      	add	r3, r2
 800bb8a:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800bb8c:	2301      	movs	r3, #1
 800bb8e:	81fb      	strh	r3, [r7, #14]
 800bb90:	2300      	movs	r3, #0
 800bb92:	613b      	str	r3, [r7, #16]
 800bb94:	e033      	b.n	800bbfe <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 800bb96:	4a27      	ldr	r2, [pc, #156]	; (800bc34 <cmp_lfn+0xdc>)
 800bb98:	693b      	ldr	r3, [r7, #16]
 800bb9a:	4413      	add	r3, r2
 800bb9c:	781b      	ldrb	r3, [r3, #0]
 800bb9e:	461a      	mov	r2, r3
 800bba0:	683b      	ldr	r3, [r7, #0]
 800bba2:	4413      	add	r3, r2
 800bba4:	4618      	mov	r0, r3
 800bba6:	f7fe ff5f 	bl	800aa68 <ld_word>
 800bbaa:	4603      	mov	r3, r0
 800bbac:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 800bbae:	89fb      	ldrh	r3, [r7, #14]
 800bbb0:	2b00      	cmp	r3, #0
 800bbb2:	d01a      	beq.n	800bbea <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 800bbb4:	697b      	ldr	r3, [r7, #20]
 800bbb6:	2bfe      	cmp	r3, #254	; 0xfe
 800bbb8:	d812      	bhi.n	800bbe0 <cmp_lfn+0x88>
 800bbba:	89bb      	ldrh	r3, [r7, #12]
 800bbbc:	4618      	mov	r0, r3
 800bbbe:	f001 fd75 	bl	800d6ac <ff_wtoupper>
 800bbc2:	4603      	mov	r3, r0
 800bbc4:	461c      	mov	r4, r3
 800bbc6:	697b      	ldr	r3, [r7, #20]
 800bbc8:	1c5a      	adds	r2, r3, #1
 800bbca:	617a      	str	r2, [r7, #20]
 800bbcc:	005b      	lsls	r3, r3, #1
 800bbce:	687a      	ldr	r2, [r7, #4]
 800bbd0:	4413      	add	r3, r2
 800bbd2:	881b      	ldrh	r3, [r3, #0]
 800bbd4:	4618      	mov	r0, r3
 800bbd6:	f001 fd69 	bl	800d6ac <ff_wtoupper>
 800bbda:	4603      	mov	r3, r0
 800bbdc:	429c      	cmp	r4, r3
 800bbde:	d001      	beq.n	800bbe4 <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 800bbe0:	2300      	movs	r3, #0
 800bbe2:	e022      	b.n	800bc2a <cmp_lfn+0xd2>
			}
			wc = uc;
 800bbe4:	89bb      	ldrh	r3, [r7, #12]
 800bbe6:	81fb      	strh	r3, [r7, #14]
 800bbe8:	e006      	b.n	800bbf8 <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800bbea:	89bb      	ldrh	r3, [r7, #12]
 800bbec:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800bbf0:	4293      	cmp	r3, r2
 800bbf2:	d001      	beq.n	800bbf8 <cmp_lfn+0xa0>
 800bbf4:	2300      	movs	r3, #0
 800bbf6:	e018      	b.n	800bc2a <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800bbf8:	693b      	ldr	r3, [r7, #16]
 800bbfa:	3301      	adds	r3, #1
 800bbfc:	613b      	str	r3, [r7, #16]
 800bbfe:	693b      	ldr	r3, [r7, #16]
 800bc00:	2b0c      	cmp	r3, #12
 800bc02:	d9c8      	bls.n	800bb96 <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 800bc04:	683b      	ldr	r3, [r7, #0]
 800bc06:	781b      	ldrb	r3, [r3, #0]
 800bc08:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bc0c:	2b00      	cmp	r3, #0
 800bc0e:	d00b      	beq.n	800bc28 <cmp_lfn+0xd0>
 800bc10:	89fb      	ldrh	r3, [r7, #14]
 800bc12:	2b00      	cmp	r3, #0
 800bc14:	d008      	beq.n	800bc28 <cmp_lfn+0xd0>
 800bc16:	697b      	ldr	r3, [r7, #20]
 800bc18:	005b      	lsls	r3, r3, #1
 800bc1a:	687a      	ldr	r2, [r7, #4]
 800bc1c:	4413      	add	r3, r2
 800bc1e:	881b      	ldrh	r3, [r3, #0]
 800bc20:	2b00      	cmp	r3, #0
 800bc22:	d001      	beq.n	800bc28 <cmp_lfn+0xd0>
 800bc24:	2300      	movs	r3, #0
 800bc26:	e000      	b.n	800bc2a <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 800bc28:	2301      	movs	r3, #1
}
 800bc2a:	4618      	mov	r0, r3
 800bc2c:	371c      	adds	r7, #28
 800bc2e:	46bd      	mov	sp, r7
 800bc30:	bd90      	pop	{r4, r7, pc}
 800bc32:	bf00      	nop
 800bc34:	0800e2ac 	.word	0x0800e2ac

0800bc38 <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 800bc38:	b580      	push	{r7, lr}
 800bc3a:	b088      	sub	sp, #32
 800bc3c:	af00      	add	r7, sp, #0
 800bc3e:	60f8      	str	r0, [r7, #12]
 800bc40:	60b9      	str	r1, [r7, #8]
 800bc42:	4611      	mov	r1, r2
 800bc44:	461a      	mov	r2, r3
 800bc46:	460b      	mov	r3, r1
 800bc48:	71fb      	strb	r3, [r7, #7]
 800bc4a:	4613      	mov	r3, r2
 800bc4c:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 800bc4e:	68bb      	ldr	r3, [r7, #8]
 800bc50:	330d      	adds	r3, #13
 800bc52:	79ba      	ldrb	r2, [r7, #6]
 800bc54:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 800bc56:	68bb      	ldr	r3, [r7, #8]
 800bc58:	330b      	adds	r3, #11
 800bc5a:	220f      	movs	r2, #15
 800bc5c:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 800bc5e:	68bb      	ldr	r3, [r7, #8]
 800bc60:	330c      	adds	r3, #12
 800bc62:	2200      	movs	r2, #0
 800bc64:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 800bc66:	68bb      	ldr	r3, [r7, #8]
 800bc68:	331a      	adds	r3, #26
 800bc6a:	2100      	movs	r1, #0
 800bc6c:	4618      	mov	r0, r3
 800bc6e:	f7fe ff36 	bl	800aade <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 800bc72:	79fb      	ldrb	r3, [r7, #7]
 800bc74:	1e5a      	subs	r2, r3, #1
 800bc76:	4613      	mov	r3, r2
 800bc78:	005b      	lsls	r3, r3, #1
 800bc7a:	4413      	add	r3, r2
 800bc7c:	009b      	lsls	r3, r3, #2
 800bc7e:	4413      	add	r3, r2
 800bc80:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 800bc82:	2300      	movs	r3, #0
 800bc84:	82fb      	strh	r3, [r7, #22]
 800bc86:	2300      	movs	r3, #0
 800bc88:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 800bc8a:	8afb      	ldrh	r3, [r7, #22]
 800bc8c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800bc90:	4293      	cmp	r3, r2
 800bc92:	d007      	beq.n	800bca4 <put_lfn+0x6c>
 800bc94:	69fb      	ldr	r3, [r7, #28]
 800bc96:	1c5a      	adds	r2, r3, #1
 800bc98:	61fa      	str	r2, [r7, #28]
 800bc9a:	005b      	lsls	r3, r3, #1
 800bc9c:	68fa      	ldr	r2, [r7, #12]
 800bc9e:	4413      	add	r3, r2
 800bca0:	881b      	ldrh	r3, [r3, #0]
 800bca2:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 800bca4:	4a17      	ldr	r2, [pc, #92]	; (800bd04 <put_lfn+0xcc>)
 800bca6:	69bb      	ldr	r3, [r7, #24]
 800bca8:	4413      	add	r3, r2
 800bcaa:	781b      	ldrb	r3, [r3, #0]
 800bcac:	461a      	mov	r2, r3
 800bcae:	68bb      	ldr	r3, [r7, #8]
 800bcb0:	4413      	add	r3, r2
 800bcb2:	8afa      	ldrh	r2, [r7, #22]
 800bcb4:	4611      	mov	r1, r2
 800bcb6:	4618      	mov	r0, r3
 800bcb8:	f7fe ff11 	bl	800aade <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 800bcbc:	8afb      	ldrh	r3, [r7, #22]
 800bcbe:	2b00      	cmp	r3, #0
 800bcc0:	d102      	bne.n	800bcc8 <put_lfn+0x90>
 800bcc2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800bcc6:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 800bcc8:	69bb      	ldr	r3, [r7, #24]
 800bcca:	3301      	adds	r3, #1
 800bccc:	61bb      	str	r3, [r7, #24]
 800bcce:	69bb      	ldr	r3, [r7, #24]
 800bcd0:	2b0c      	cmp	r3, #12
 800bcd2:	d9da      	bls.n	800bc8a <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 800bcd4:	8afb      	ldrh	r3, [r7, #22]
 800bcd6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800bcda:	4293      	cmp	r3, r2
 800bcdc:	d006      	beq.n	800bcec <put_lfn+0xb4>
 800bcde:	69fb      	ldr	r3, [r7, #28]
 800bce0:	005b      	lsls	r3, r3, #1
 800bce2:	68fa      	ldr	r2, [r7, #12]
 800bce4:	4413      	add	r3, r2
 800bce6:	881b      	ldrh	r3, [r3, #0]
 800bce8:	2b00      	cmp	r3, #0
 800bcea:	d103      	bne.n	800bcf4 <put_lfn+0xbc>
 800bcec:	79fb      	ldrb	r3, [r7, #7]
 800bcee:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bcf2:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 800bcf4:	68bb      	ldr	r3, [r7, #8]
 800bcf6:	79fa      	ldrb	r2, [r7, #7]
 800bcf8:	701a      	strb	r2, [r3, #0]
}
 800bcfa:	bf00      	nop
 800bcfc:	3720      	adds	r7, #32
 800bcfe:	46bd      	mov	sp, r7
 800bd00:	bd80      	pop	{r7, pc}
 800bd02:	bf00      	nop
 800bd04:	0800e2ac 	.word	0x0800e2ac

0800bd08 <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 800bd08:	b580      	push	{r7, lr}
 800bd0a:	b08c      	sub	sp, #48	; 0x30
 800bd0c:	af00      	add	r7, sp, #0
 800bd0e:	60f8      	str	r0, [r7, #12]
 800bd10:	60b9      	str	r1, [r7, #8]
 800bd12:	607a      	str	r2, [r7, #4]
 800bd14:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 800bd16:	220b      	movs	r2, #11
 800bd18:	68b9      	ldr	r1, [r7, #8]
 800bd1a:	68f8      	ldr	r0, [r7, #12]
 800bd1c:	f7fe ff26 	bl	800ab6c <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 800bd20:	683b      	ldr	r3, [r7, #0]
 800bd22:	2b05      	cmp	r3, #5
 800bd24:	d92b      	bls.n	800bd7e <gen_numname+0x76>
		sr = seq;
 800bd26:	683b      	ldr	r3, [r7, #0]
 800bd28:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 800bd2a:	e022      	b.n	800bd72 <gen_numname+0x6a>
			wc = *lfn++;
 800bd2c:	687b      	ldr	r3, [r7, #4]
 800bd2e:	1c9a      	adds	r2, r3, #2
 800bd30:	607a      	str	r2, [r7, #4]
 800bd32:	881b      	ldrh	r3, [r3, #0]
 800bd34:	847b      	strh	r3, [r7, #34]	; 0x22
			for (i = 0; i < 16; i++) {
 800bd36:	2300      	movs	r3, #0
 800bd38:	62bb      	str	r3, [r7, #40]	; 0x28
 800bd3a:	e017      	b.n	800bd6c <gen_numname+0x64>
				sr = (sr << 1) + (wc & 1);
 800bd3c:	69fb      	ldr	r3, [r7, #28]
 800bd3e:	005a      	lsls	r2, r3, #1
 800bd40:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800bd42:	f003 0301 	and.w	r3, r3, #1
 800bd46:	4413      	add	r3, r2
 800bd48:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 800bd4a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800bd4c:	085b      	lsrs	r3, r3, #1
 800bd4e:	847b      	strh	r3, [r7, #34]	; 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 800bd50:	69fb      	ldr	r3, [r7, #28]
 800bd52:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800bd56:	2b00      	cmp	r3, #0
 800bd58:	d005      	beq.n	800bd66 <gen_numname+0x5e>
 800bd5a:	69fb      	ldr	r3, [r7, #28]
 800bd5c:	f483 3388 	eor.w	r3, r3, #69632	; 0x11000
 800bd60:	f083 0321 	eor.w	r3, r3, #33	; 0x21
 800bd64:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 800bd66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd68:	3301      	adds	r3, #1
 800bd6a:	62bb      	str	r3, [r7, #40]	; 0x28
 800bd6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd6e:	2b0f      	cmp	r3, #15
 800bd70:	d9e4      	bls.n	800bd3c <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 800bd72:	687b      	ldr	r3, [r7, #4]
 800bd74:	881b      	ldrh	r3, [r3, #0]
 800bd76:	2b00      	cmp	r3, #0
 800bd78:	d1d8      	bne.n	800bd2c <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 800bd7a:	69fb      	ldr	r3, [r7, #28]
 800bd7c:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 800bd7e:	2307      	movs	r3, #7
 800bd80:	62bb      	str	r3, [r7, #40]	; 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 800bd82:	683b      	ldr	r3, [r7, #0]
 800bd84:	b2db      	uxtb	r3, r3
 800bd86:	f003 030f 	and.w	r3, r3, #15
 800bd8a:	b2db      	uxtb	r3, r3
 800bd8c:	3330      	adds	r3, #48	; 0x30
 800bd8e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (c > '9') c += 7;
 800bd92:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800bd96:	2b39      	cmp	r3, #57	; 0x39
 800bd98:	d904      	bls.n	800bda4 <gen_numname+0x9c>
 800bd9a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800bd9e:	3307      	adds	r3, #7
 800bda0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		ns[i--] = c;
 800bda4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bda6:	1e5a      	subs	r2, r3, #1
 800bda8:	62ba      	str	r2, [r7, #40]	; 0x28
 800bdaa:	3330      	adds	r3, #48	; 0x30
 800bdac:	443b      	add	r3, r7
 800bdae:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800bdb2:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 800bdb6:	683b      	ldr	r3, [r7, #0]
 800bdb8:	091b      	lsrs	r3, r3, #4
 800bdba:	603b      	str	r3, [r7, #0]
	} while (seq);
 800bdbc:	683b      	ldr	r3, [r7, #0]
 800bdbe:	2b00      	cmp	r3, #0
 800bdc0:	d1df      	bne.n	800bd82 <gen_numname+0x7a>
	ns[i] = '~';
 800bdc2:	f107 0214 	add.w	r2, r7, #20
 800bdc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bdc8:	4413      	add	r3, r2
 800bdca:	227e      	movs	r2, #126	; 0x7e
 800bdcc:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 800bdce:	2300      	movs	r3, #0
 800bdd0:	627b      	str	r3, [r7, #36]	; 0x24
 800bdd2:	e002      	b.n	800bdda <gen_numname+0xd2>
 800bdd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bdd6:	3301      	adds	r3, #1
 800bdd8:	627b      	str	r3, [r7, #36]	; 0x24
 800bdda:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bddc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bdde:	429a      	cmp	r2, r3
 800bde0:	d205      	bcs.n	800bdee <gen_numname+0xe6>
 800bde2:	68fa      	ldr	r2, [r7, #12]
 800bde4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bde6:	4413      	add	r3, r2
 800bde8:	781b      	ldrb	r3, [r3, #0]
 800bdea:	2b20      	cmp	r3, #32
 800bdec:	d1f2      	bne.n	800bdd4 <gen_numname+0xcc>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 800bdee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bdf0:	2b07      	cmp	r3, #7
 800bdf2:	d807      	bhi.n	800be04 <gen_numname+0xfc>
 800bdf4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bdf6:	1c5a      	adds	r2, r3, #1
 800bdf8:	62ba      	str	r2, [r7, #40]	; 0x28
 800bdfa:	3330      	adds	r3, #48	; 0x30
 800bdfc:	443b      	add	r3, r7
 800bdfe:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 800be02:	e000      	b.n	800be06 <gen_numname+0xfe>
 800be04:	2120      	movs	r1, #32
 800be06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be08:	1c5a      	adds	r2, r3, #1
 800be0a:	627a      	str	r2, [r7, #36]	; 0x24
 800be0c:	68fa      	ldr	r2, [r7, #12]
 800be0e:	4413      	add	r3, r2
 800be10:	460a      	mov	r2, r1
 800be12:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 800be14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be16:	2b07      	cmp	r3, #7
 800be18:	d9e9      	bls.n	800bdee <gen_numname+0xe6>
}
 800be1a:	bf00      	nop
 800be1c:	bf00      	nop
 800be1e:	3730      	adds	r7, #48	; 0x30
 800be20:	46bd      	mov	sp, r7
 800be22:	bd80      	pop	{r7, pc}

0800be24 <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 800be24:	b480      	push	{r7}
 800be26:	b085      	sub	sp, #20
 800be28:	af00      	add	r7, sp, #0
 800be2a:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 800be2c:	2300      	movs	r3, #0
 800be2e:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 800be30:	230b      	movs	r3, #11
 800be32:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 800be34:	7bfb      	ldrb	r3, [r7, #15]
 800be36:	b2da      	uxtb	r2, r3
 800be38:	0852      	lsrs	r2, r2, #1
 800be3a:	01db      	lsls	r3, r3, #7
 800be3c:	4313      	orrs	r3, r2
 800be3e:	b2da      	uxtb	r2, r3
 800be40:	687b      	ldr	r3, [r7, #4]
 800be42:	1c59      	adds	r1, r3, #1
 800be44:	6079      	str	r1, [r7, #4]
 800be46:	781b      	ldrb	r3, [r3, #0]
 800be48:	4413      	add	r3, r2
 800be4a:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 800be4c:	68bb      	ldr	r3, [r7, #8]
 800be4e:	3b01      	subs	r3, #1
 800be50:	60bb      	str	r3, [r7, #8]
 800be52:	68bb      	ldr	r3, [r7, #8]
 800be54:	2b00      	cmp	r3, #0
 800be56:	d1ed      	bne.n	800be34 <sum_sfn+0x10>
	return sum;
 800be58:	7bfb      	ldrb	r3, [r7, #15]
}
 800be5a:	4618      	mov	r0, r3
 800be5c:	3714      	adds	r7, #20
 800be5e:	46bd      	mov	sp, r7
 800be60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be64:	4770      	bx	lr

0800be66 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800be66:	b580      	push	{r7, lr}
 800be68:	b086      	sub	sp, #24
 800be6a:	af00      	add	r7, sp, #0
 800be6c:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800be6e:	687b      	ldr	r3, [r7, #4]
 800be70:	681b      	ldr	r3, [r3, #0]
 800be72:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800be74:	2100      	movs	r1, #0
 800be76:	6878      	ldr	r0, [r7, #4]
 800be78:	f7ff fc88 	bl	800b78c <dir_sdi>
 800be7c:	4603      	mov	r3, r0
 800be7e:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800be80:	7dfb      	ldrb	r3, [r7, #23]
 800be82:	2b00      	cmp	r3, #0
 800be84:	d001      	beq.n	800be8a <dir_find+0x24>
 800be86:	7dfb      	ldrb	r3, [r7, #23]
 800be88:	e0a9      	b.n	800bfde <dir_find+0x178>
		return res;
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800be8a:	23ff      	movs	r3, #255	; 0xff
 800be8c:	753b      	strb	r3, [r7, #20]
 800be8e:	7d3b      	ldrb	r3, [r7, #20]
 800be90:	757b      	strb	r3, [r7, #21]
 800be92:	687b      	ldr	r3, [r7, #4]
 800be94:	f04f 32ff 	mov.w	r2, #4294967295
 800be98:	631a      	str	r2, [r3, #48]	; 0x30
#endif
	do {
		res = move_window(fs, dp->sect);
 800be9a:	687b      	ldr	r3, [r7, #4]
 800be9c:	69db      	ldr	r3, [r3, #28]
 800be9e:	4619      	mov	r1, r3
 800bea0:	6938      	ldr	r0, [r7, #16]
 800bea2:	f7ff f891 	bl	800afc8 <move_window>
 800bea6:	4603      	mov	r3, r0
 800bea8:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800beaa:	7dfb      	ldrb	r3, [r7, #23]
 800beac:	2b00      	cmp	r3, #0
 800beae:	f040 8090 	bne.w	800bfd2 <dir_find+0x16c>
		c = dp->dir[DIR_Name];
 800beb2:	687b      	ldr	r3, [r7, #4]
 800beb4:	6a1b      	ldr	r3, [r3, #32]
 800beb6:	781b      	ldrb	r3, [r3, #0]
 800beb8:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800beba:	7dbb      	ldrb	r3, [r7, #22]
 800bebc:	2b00      	cmp	r3, #0
 800bebe:	d102      	bne.n	800bec6 <dir_find+0x60>
 800bec0:	2304      	movs	r3, #4
 800bec2:	75fb      	strb	r3, [r7, #23]
 800bec4:	e08a      	b.n	800bfdc <dir_find+0x176>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 800bec6:	687b      	ldr	r3, [r7, #4]
 800bec8:	6a1b      	ldr	r3, [r3, #32]
 800beca:	330b      	adds	r3, #11
 800becc:	781b      	ldrb	r3, [r3, #0]
 800bece:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800bed2:	73fb      	strb	r3, [r7, #15]
 800bed4:	687b      	ldr	r3, [r7, #4]
 800bed6:	7bfa      	ldrb	r2, [r7, #15]
 800bed8:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 800beda:	7dbb      	ldrb	r3, [r7, #22]
 800bedc:	2be5      	cmp	r3, #229	; 0xe5
 800bede:	d007      	beq.n	800bef0 <dir_find+0x8a>
 800bee0:	7bfb      	ldrb	r3, [r7, #15]
 800bee2:	f003 0308 	and.w	r3, r3, #8
 800bee6:	2b00      	cmp	r3, #0
 800bee8:	d009      	beq.n	800befe <dir_find+0x98>
 800beea:	7bfb      	ldrb	r3, [r7, #15]
 800beec:	2b0f      	cmp	r3, #15
 800beee:	d006      	beq.n	800befe <dir_find+0x98>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800bef0:	23ff      	movs	r3, #255	; 0xff
 800bef2:	757b      	strb	r3, [r7, #21]
 800bef4:	687b      	ldr	r3, [r7, #4]
 800bef6:	f04f 32ff 	mov.w	r2, #4294967295
 800befa:	631a      	str	r2, [r3, #48]	; 0x30
 800befc:	e05e      	b.n	800bfbc <dir_find+0x156>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 800befe:	7bfb      	ldrb	r3, [r7, #15]
 800bf00:	2b0f      	cmp	r3, #15
 800bf02:	d136      	bne.n	800bf72 <dir_find+0x10c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 800bf04:	687b      	ldr	r3, [r7, #4]
 800bf06:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800bf0a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bf0e:	2b00      	cmp	r3, #0
 800bf10:	d154      	bne.n	800bfbc <dir_find+0x156>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 800bf12:	7dbb      	ldrb	r3, [r7, #22]
 800bf14:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bf18:	2b00      	cmp	r3, #0
 800bf1a:	d00d      	beq.n	800bf38 <dir_find+0xd2>
						sum = dp->dir[LDIR_Chksum];
 800bf1c:	687b      	ldr	r3, [r7, #4]
 800bf1e:	6a1b      	ldr	r3, [r3, #32]
 800bf20:	7b5b      	ldrb	r3, [r3, #13]
 800bf22:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 800bf24:	7dbb      	ldrb	r3, [r7, #22]
 800bf26:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800bf2a:	75bb      	strb	r3, [r7, #22]
 800bf2c:	7dbb      	ldrb	r3, [r7, #22]
 800bf2e:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 800bf30:	687b      	ldr	r3, [r7, #4]
 800bf32:	695a      	ldr	r2, [r3, #20]
 800bf34:	687b      	ldr	r3, [r7, #4]
 800bf36:	631a      	str	r2, [r3, #48]	; 0x30
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800bf38:	7dba      	ldrb	r2, [r7, #22]
 800bf3a:	7d7b      	ldrb	r3, [r7, #21]
 800bf3c:	429a      	cmp	r2, r3
 800bf3e:	d115      	bne.n	800bf6c <dir_find+0x106>
 800bf40:	687b      	ldr	r3, [r7, #4]
 800bf42:	6a1b      	ldr	r3, [r3, #32]
 800bf44:	330d      	adds	r3, #13
 800bf46:	781b      	ldrb	r3, [r3, #0]
 800bf48:	7d3a      	ldrb	r2, [r7, #20]
 800bf4a:	429a      	cmp	r2, r3
 800bf4c:	d10e      	bne.n	800bf6c <dir_find+0x106>
 800bf4e:	693b      	ldr	r3, [r7, #16]
 800bf50:	691a      	ldr	r2, [r3, #16]
 800bf52:	687b      	ldr	r3, [r7, #4]
 800bf54:	6a1b      	ldr	r3, [r3, #32]
 800bf56:	4619      	mov	r1, r3
 800bf58:	4610      	mov	r0, r2
 800bf5a:	f7ff fdfd 	bl	800bb58 <cmp_lfn>
 800bf5e:	4603      	mov	r3, r0
 800bf60:	2b00      	cmp	r3, #0
 800bf62:	d003      	beq.n	800bf6c <dir_find+0x106>
 800bf64:	7d7b      	ldrb	r3, [r7, #21]
 800bf66:	3b01      	subs	r3, #1
 800bf68:	b2db      	uxtb	r3, r3
 800bf6a:	e000      	b.n	800bf6e <dir_find+0x108>
 800bf6c:	23ff      	movs	r3, #255	; 0xff
 800bf6e:	757b      	strb	r3, [r7, #21]
 800bf70:	e024      	b.n	800bfbc <dir_find+0x156>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800bf72:	7d7b      	ldrb	r3, [r7, #21]
 800bf74:	2b00      	cmp	r3, #0
 800bf76:	d109      	bne.n	800bf8c <dir_find+0x126>
 800bf78:	687b      	ldr	r3, [r7, #4]
 800bf7a:	6a1b      	ldr	r3, [r3, #32]
 800bf7c:	4618      	mov	r0, r3
 800bf7e:	f7ff ff51 	bl	800be24 <sum_sfn>
 800bf82:	4603      	mov	r3, r0
 800bf84:	461a      	mov	r2, r3
 800bf86:	7d3b      	ldrb	r3, [r7, #20]
 800bf88:	4293      	cmp	r3, r2
 800bf8a:	d024      	beq.n	800bfd6 <dir_find+0x170>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800bf8c:	687b      	ldr	r3, [r7, #4]
 800bf8e:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800bf92:	f003 0301 	and.w	r3, r3, #1
 800bf96:	2b00      	cmp	r3, #0
 800bf98:	d10a      	bne.n	800bfb0 <dir_find+0x14a>
 800bf9a:	687b      	ldr	r3, [r7, #4]
 800bf9c:	6a18      	ldr	r0, [r3, #32]
 800bf9e:	687b      	ldr	r3, [r7, #4]
 800bfa0:	3324      	adds	r3, #36	; 0x24
 800bfa2:	220b      	movs	r2, #11
 800bfa4:	4619      	mov	r1, r3
 800bfa6:	f7fe fe1d 	bl	800abe4 <mem_cmp>
 800bfaa:	4603      	mov	r3, r0
 800bfac:	2b00      	cmp	r3, #0
 800bfae:	d014      	beq.n	800bfda <dir_find+0x174>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800bfb0:	23ff      	movs	r3, #255	; 0xff
 800bfb2:	757b      	strb	r3, [r7, #21]
 800bfb4:	687b      	ldr	r3, [r7, #4]
 800bfb6:	f04f 32ff 	mov.w	r2, #4294967295
 800bfba:	631a      	str	r2, [r3, #48]	; 0x30
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800bfbc:	2100      	movs	r1, #0
 800bfbe:	6878      	ldr	r0, [r7, #4]
 800bfc0:	f7ff fc6d 	bl	800b89e <dir_next>
 800bfc4:	4603      	mov	r3, r0
 800bfc6:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800bfc8:	7dfb      	ldrb	r3, [r7, #23]
 800bfca:	2b00      	cmp	r3, #0
 800bfcc:	f43f af65 	beq.w	800be9a <dir_find+0x34>
 800bfd0:	e004      	b.n	800bfdc <dir_find+0x176>
		if (res != FR_OK) break;
 800bfd2:	bf00      	nop
 800bfd4:	e002      	b.n	800bfdc <dir_find+0x176>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800bfd6:	bf00      	nop
 800bfd8:	e000      	b.n	800bfdc <dir_find+0x176>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800bfda:	bf00      	nop

	return res;
 800bfdc:	7dfb      	ldrb	r3, [r7, #23]
}
 800bfde:	4618      	mov	r0, r3
 800bfe0:	3718      	adds	r7, #24
 800bfe2:	46bd      	mov	sp, r7
 800bfe4:	bd80      	pop	{r7, pc}
	...

0800bfe8 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800bfe8:	b580      	push	{r7, lr}
 800bfea:	b08c      	sub	sp, #48	; 0x30
 800bfec:	af00      	add	r7, sp, #0
 800bfee:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800bff0:	687b      	ldr	r3, [r7, #4]
 800bff2:	681b      	ldr	r3, [r3, #0]
 800bff4:	61fb      	str	r3, [r7, #28]
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 800bff6:	687b      	ldr	r3, [r7, #4]
 800bff8:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800bffc:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 800c000:	2b00      	cmp	r3, #0
 800c002:	d001      	beq.n	800c008 <dir_register+0x20>
 800c004:	2306      	movs	r3, #6
 800c006:	e0e0      	b.n	800c1ca <dir_register+0x1e2>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 800c008:	2300      	movs	r3, #0
 800c00a:	627b      	str	r3, [r7, #36]	; 0x24
 800c00c:	e002      	b.n	800c014 <dir_register+0x2c>
 800c00e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c010:	3301      	adds	r3, #1
 800c012:	627b      	str	r3, [r7, #36]	; 0x24
 800c014:	69fb      	ldr	r3, [r7, #28]
 800c016:	691a      	ldr	r2, [r3, #16]
 800c018:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c01a:	005b      	lsls	r3, r3, #1
 800c01c:	4413      	add	r3, r2
 800c01e:	881b      	ldrh	r3, [r3, #0]
 800c020:	2b00      	cmp	r3, #0
 800c022:	d1f4      	bne.n	800c00e <dir_register+0x26>
		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
		return FR_OK;
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 800c024:	687b      	ldr	r3, [r7, #4]
 800c026:	f103 0124 	add.w	r1, r3, #36	; 0x24
 800c02a:	f107 030c 	add.w	r3, r7, #12
 800c02e:	220c      	movs	r2, #12
 800c030:	4618      	mov	r0, r3
 800c032:	f7fe fd9b 	bl	800ab6c <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 800c036:	7dfb      	ldrb	r3, [r7, #23]
 800c038:	f003 0301 	and.w	r3, r3, #1
 800c03c:	2b00      	cmp	r3, #0
 800c03e:	d032      	beq.n	800c0a6 <dir_register+0xbe>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 800c040:	687b      	ldr	r3, [r7, #4]
 800c042:	2240      	movs	r2, #64	; 0x40
 800c044:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		for (n = 1; n < 100; n++) {
 800c048:	2301      	movs	r3, #1
 800c04a:	62bb      	str	r3, [r7, #40]	; 0x28
 800c04c:	e016      	b.n	800c07c <dir_register+0x94>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 800c04e:	687b      	ldr	r3, [r7, #4]
 800c050:	f103 0024 	add.w	r0, r3, #36	; 0x24
 800c054:	69fb      	ldr	r3, [r7, #28]
 800c056:	691a      	ldr	r2, [r3, #16]
 800c058:	f107 010c 	add.w	r1, r7, #12
 800c05c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c05e:	f7ff fe53 	bl	800bd08 <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 800c062:	6878      	ldr	r0, [r7, #4]
 800c064:	f7ff feff 	bl	800be66 <dir_find>
 800c068:	4603      	mov	r3, r0
 800c06a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			if (res != FR_OK) break;
 800c06e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800c072:	2b00      	cmp	r3, #0
 800c074:	d106      	bne.n	800c084 <dir_register+0x9c>
		for (n = 1; n < 100; n++) {
 800c076:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c078:	3301      	adds	r3, #1
 800c07a:	62bb      	str	r3, [r7, #40]	; 0x28
 800c07c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c07e:	2b63      	cmp	r3, #99	; 0x63
 800c080:	d9e5      	bls.n	800c04e <dir_register+0x66>
 800c082:	e000      	b.n	800c086 <dir_register+0x9e>
			if (res != FR_OK) break;
 800c084:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 800c086:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c088:	2b64      	cmp	r3, #100	; 0x64
 800c08a:	d101      	bne.n	800c090 <dir_register+0xa8>
 800c08c:	2307      	movs	r3, #7
 800c08e:	e09c      	b.n	800c1ca <dir_register+0x1e2>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 800c090:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800c094:	2b04      	cmp	r3, #4
 800c096:	d002      	beq.n	800c09e <dir_register+0xb6>
 800c098:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800c09c:	e095      	b.n	800c1ca <dir_register+0x1e2>
		dp->fn[NSFLAG] = sn[NSFLAG];
 800c09e:	7dfa      	ldrb	r2, [r7, #23]
 800c0a0:	687b      	ldr	r3, [r7, #4]
 800c0a2:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 800c0a6:	7dfb      	ldrb	r3, [r7, #23]
 800c0a8:	f003 0302 	and.w	r3, r3, #2
 800c0ac:	2b00      	cmp	r3, #0
 800c0ae:	d007      	beq.n	800c0c0 <dir_register+0xd8>
 800c0b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c0b2:	330c      	adds	r3, #12
 800c0b4:	4a47      	ldr	r2, [pc, #284]	; (800c1d4 <dir_register+0x1ec>)
 800c0b6:	fba2 2303 	umull	r2, r3, r2, r3
 800c0ba:	089b      	lsrs	r3, r3, #2
 800c0bc:	3301      	adds	r3, #1
 800c0be:	e000      	b.n	800c0c2 <dir_register+0xda>
 800c0c0:	2301      	movs	r3, #1
 800c0c2:	623b      	str	r3, [r7, #32]
	res = dir_alloc(dp, nent);		/* Allocate entries */
 800c0c4:	6a39      	ldr	r1, [r7, #32]
 800c0c6:	6878      	ldr	r0, [r7, #4]
 800c0c8:	f7ff fcbf 	bl	800ba4a <dir_alloc>
 800c0cc:	4603      	mov	r3, r0
 800c0ce:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 800c0d2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800c0d6:	2b00      	cmp	r3, #0
 800c0d8:	d148      	bne.n	800c16c <dir_register+0x184>
 800c0da:	6a3b      	ldr	r3, [r7, #32]
 800c0dc:	3b01      	subs	r3, #1
 800c0de:	623b      	str	r3, [r7, #32]
 800c0e0:	6a3b      	ldr	r3, [r7, #32]
 800c0e2:	2b00      	cmp	r3, #0
 800c0e4:	d042      	beq.n	800c16c <dir_register+0x184>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 800c0e6:	687b      	ldr	r3, [r7, #4]
 800c0e8:	695a      	ldr	r2, [r3, #20]
 800c0ea:	6a3b      	ldr	r3, [r7, #32]
 800c0ec:	015b      	lsls	r3, r3, #5
 800c0ee:	1ad3      	subs	r3, r2, r3
 800c0f0:	4619      	mov	r1, r3
 800c0f2:	6878      	ldr	r0, [r7, #4]
 800c0f4:	f7ff fb4a 	bl	800b78c <dir_sdi>
 800c0f8:	4603      	mov	r3, r0
 800c0fa:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 800c0fe:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800c102:	2b00      	cmp	r3, #0
 800c104:	d132      	bne.n	800c16c <dir_register+0x184>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 800c106:	687b      	ldr	r3, [r7, #4]
 800c108:	3324      	adds	r3, #36	; 0x24
 800c10a:	4618      	mov	r0, r3
 800c10c:	f7ff fe8a 	bl	800be24 <sum_sfn>
 800c110:	4603      	mov	r3, r0
 800c112:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 800c114:	687b      	ldr	r3, [r7, #4]
 800c116:	69db      	ldr	r3, [r3, #28]
 800c118:	4619      	mov	r1, r3
 800c11a:	69f8      	ldr	r0, [r7, #28]
 800c11c:	f7fe ff54 	bl	800afc8 <move_window>
 800c120:	4603      	mov	r3, r0
 800c122:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				if (res != FR_OK) break;
 800c126:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800c12a:	2b00      	cmp	r3, #0
 800c12c:	d11d      	bne.n	800c16a <dir_register+0x182>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 800c12e:	69fb      	ldr	r3, [r7, #28]
 800c130:	6918      	ldr	r0, [r3, #16]
 800c132:	687b      	ldr	r3, [r7, #4]
 800c134:	6a19      	ldr	r1, [r3, #32]
 800c136:	6a3b      	ldr	r3, [r7, #32]
 800c138:	b2da      	uxtb	r2, r3
 800c13a:	7efb      	ldrb	r3, [r7, #27]
 800c13c:	f7ff fd7c 	bl	800bc38 <put_lfn>
				fs->wflag = 1;
 800c140:	69fb      	ldr	r3, [r7, #28]
 800c142:	2201      	movs	r2, #1
 800c144:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 800c146:	2100      	movs	r1, #0
 800c148:	6878      	ldr	r0, [r7, #4]
 800c14a:	f7ff fba8 	bl	800b89e <dir_next>
 800c14e:	4603      	mov	r3, r0
 800c150:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			} while (res == FR_OK && --nent);
 800c154:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800c158:	2b00      	cmp	r3, #0
 800c15a:	d107      	bne.n	800c16c <dir_register+0x184>
 800c15c:	6a3b      	ldr	r3, [r7, #32]
 800c15e:	3b01      	subs	r3, #1
 800c160:	623b      	str	r3, [r7, #32]
 800c162:	6a3b      	ldr	r3, [r7, #32]
 800c164:	2b00      	cmp	r3, #0
 800c166:	d1d5      	bne.n	800c114 <dir_register+0x12c>
 800c168:	e000      	b.n	800c16c <dir_register+0x184>
				if (res != FR_OK) break;
 800c16a:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800c16c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800c170:	2b00      	cmp	r3, #0
 800c172:	d128      	bne.n	800c1c6 <dir_register+0x1de>
		res = move_window(fs, dp->sect);
 800c174:	687b      	ldr	r3, [r7, #4]
 800c176:	69db      	ldr	r3, [r3, #28]
 800c178:	4619      	mov	r1, r3
 800c17a:	69f8      	ldr	r0, [r7, #28]
 800c17c:	f7fe ff24 	bl	800afc8 <move_window>
 800c180:	4603      	mov	r3, r0
 800c182:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 800c186:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800c18a:	2b00      	cmp	r3, #0
 800c18c:	d11b      	bne.n	800c1c6 <dir_register+0x1de>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800c18e:	687b      	ldr	r3, [r7, #4]
 800c190:	6a1b      	ldr	r3, [r3, #32]
 800c192:	2220      	movs	r2, #32
 800c194:	2100      	movs	r1, #0
 800c196:	4618      	mov	r0, r3
 800c198:	f7fe fd09 	bl	800abae <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800c19c:	687b      	ldr	r3, [r7, #4]
 800c19e:	6a18      	ldr	r0, [r3, #32]
 800c1a0:	687b      	ldr	r3, [r7, #4]
 800c1a2:	3324      	adds	r3, #36	; 0x24
 800c1a4:	220b      	movs	r2, #11
 800c1a6:	4619      	mov	r1, r3
 800c1a8:	f7fe fce0 	bl	800ab6c <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 800c1ac:	687b      	ldr	r3, [r7, #4]
 800c1ae:	f893 202f 	ldrb.w	r2, [r3, #47]	; 0x2f
 800c1b2:	687b      	ldr	r3, [r7, #4]
 800c1b4:	6a1b      	ldr	r3, [r3, #32]
 800c1b6:	330c      	adds	r3, #12
 800c1b8:	f002 0218 	and.w	r2, r2, #24
 800c1bc:	b2d2      	uxtb	r2, r2
 800c1be:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 800c1c0:	69fb      	ldr	r3, [r7, #28]
 800c1c2:	2201      	movs	r2, #1
 800c1c4:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800c1c6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800c1ca:	4618      	mov	r0, r3
 800c1cc:	3730      	adds	r7, #48	; 0x30
 800c1ce:	46bd      	mov	sp, r7
 800c1d0:	bd80      	pop	{r7, pc}
 800c1d2:	bf00      	nop
 800c1d4:	4ec4ec4f 	.word	0x4ec4ec4f

0800c1d8 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800c1d8:	b580      	push	{r7, lr}
 800c1da:	b08a      	sub	sp, #40	; 0x28
 800c1dc:	af00      	add	r7, sp, #0
 800c1de:	6078      	str	r0, [r7, #4]
 800c1e0:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 800c1e2:	683b      	ldr	r3, [r7, #0]
 800c1e4:	681b      	ldr	r3, [r3, #0]
 800c1e6:	613b      	str	r3, [r7, #16]
 800c1e8:	687b      	ldr	r3, [r7, #4]
 800c1ea:	681b      	ldr	r3, [r3, #0]
 800c1ec:	691b      	ldr	r3, [r3, #16]
 800c1ee:	60fb      	str	r3, [r7, #12]
 800c1f0:	2300      	movs	r3, #0
 800c1f2:	617b      	str	r3, [r7, #20]
 800c1f4:	697b      	ldr	r3, [r7, #20]
 800c1f6:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 800c1f8:	69bb      	ldr	r3, [r7, #24]
 800c1fa:	1c5a      	adds	r2, r3, #1
 800c1fc:	61ba      	str	r2, [r7, #24]
 800c1fe:	693a      	ldr	r2, [r7, #16]
 800c200:	4413      	add	r3, r2
 800c202:	781b      	ldrb	r3, [r3, #0]
 800c204:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 800c206:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c208:	2b1f      	cmp	r3, #31
 800c20a:	d940      	bls.n	800c28e <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 800c20c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c20e:	2b2f      	cmp	r3, #47	; 0x2f
 800c210:	d006      	beq.n	800c220 <create_name+0x48>
 800c212:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c214:	2b5c      	cmp	r3, #92	; 0x5c
 800c216:	d110      	bne.n	800c23a <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800c218:	e002      	b.n	800c220 <create_name+0x48>
 800c21a:	69bb      	ldr	r3, [r7, #24]
 800c21c:	3301      	adds	r3, #1
 800c21e:	61bb      	str	r3, [r7, #24]
 800c220:	693a      	ldr	r2, [r7, #16]
 800c222:	69bb      	ldr	r3, [r7, #24]
 800c224:	4413      	add	r3, r2
 800c226:	781b      	ldrb	r3, [r3, #0]
 800c228:	2b2f      	cmp	r3, #47	; 0x2f
 800c22a:	d0f6      	beq.n	800c21a <create_name+0x42>
 800c22c:	693a      	ldr	r2, [r7, #16]
 800c22e:	69bb      	ldr	r3, [r7, #24]
 800c230:	4413      	add	r3, r2
 800c232:	781b      	ldrb	r3, [r3, #0]
 800c234:	2b5c      	cmp	r3, #92	; 0x5c
 800c236:	d0f0      	beq.n	800c21a <create_name+0x42>
			break;
 800c238:	e02a      	b.n	800c290 <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 800c23a:	697b      	ldr	r3, [r7, #20]
 800c23c:	2bfe      	cmp	r3, #254	; 0xfe
 800c23e:	d901      	bls.n	800c244 <create_name+0x6c>
 800c240:	2306      	movs	r3, #6
 800c242:	e17d      	b.n	800c540 <create_name+0x368>
#if !_LFN_UNICODE
		w &= 0xFF;
 800c244:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c246:	b2db      	uxtb	r3, r3
 800c248:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 800c24a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c24c:	2101      	movs	r1, #1
 800c24e:	4618      	mov	r0, r3
 800c250:	f001 f9f0 	bl	800d634 <ff_convert>
 800c254:	4603      	mov	r3, r0
 800c256:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 800c258:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c25a:	2b00      	cmp	r3, #0
 800c25c:	d101      	bne.n	800c262 <create_name+0x8a>
 800c25e:	2306      	movs	r3, #6
 800c260:	e16e      	b.n	800c540 <create_name+0x368>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 800c262:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c264:	2b7f      	cmp	r3, #127	; 0x7f
 800c266:	d809      	bhi.n	800c27c <create_name+0xa4>
 800c268:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c26a:	4619      	mov	r1, r3
 800c26c:	488d      	ldr	r0, [pc, #564]	; (800c4a4 <create_name+0x2cc>)
 800c26e:	f7fe fce0 	bl	800ac32 <chk_chr>
 800c272:	4603      	mov	r3, r0
 800c274:	2b00      	cmp	r3, #0
 800c276:	d001      	beq.n	800c27c <create_name+0xa4>
 800c278:	2306      	movs	r3, #6
 800c27a:	e161      	b.n	800c540 <create_name+0x368>
		lfn[di++] = w;					/* Store the Unicode character */
 800c27c:	697b      	ldr	r3, [r7, #20]
 800c27e:	1c5a      	adds	r2, r3, #1
 800c280:	617a      	str	r2, [r7, #20]
 800c282:	005b      	lsls	r3, r3, #1
 800c284:	68fa      	ldr	r2, [r7, #12]
 800c286:	4413      	add	r3, r2
 800c288:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800c28a:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 800c28c:	e7b4      	b.n	800c1f8 <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 800c28e:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 800c290:	693a      	ldr	r2, [r7, #16]
 800c292:	69bb      	ldr	r3, [r7, #24]
 800c294:	441a      	add	r2, r3
 800c296:	683b      	ldr	r3, [r7, #0]
 800c298:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800c29a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c29c:	2b1f      	cmp	r3, #31
 800c29e:	d801      	bhi.n	800c2a4 <create_name+0xcc>
 800c2a0:	2304      	movs	r3, #4
 800c2a2:	e000      	b.n	800c2a6 <create_name+0xce>
 800c2a4:	2300      	movs	r3, #0
 800c2a6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800c2aa:	e011      	b.n	800c2d0 <create_name+0xf8>
		w = lfn[di - 1];
 800c2ac:	697b      	ldr	r3, [r7, #20]
 800c2ae:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800c2b2:	3b01      	subs	r3, #1
 800c2b4:	005b      	lsls	r3, r3, #1
 800c2b6:	68fa      	ldr	r2, [r7, #12]
 800c2b8:	4413      	add	r3, r2
 800c2ba:	881b      	ldrh	r3, [r3, #0]
 800c2bc:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w != ' ' && w != '.') break;
 800c2be:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c2c0:	2b20      	cmp	r3, #32
 800c2c2:	d002      	beq.n	800c2ca <create_name+0xf2>
 800c2c4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c2c6:	2b2e      	cmp	r3, #46	; 0x2e
 800c2c8:	d106      	bne.n	800c2d8 <create_name+0x100>
		di--;
 800c2ca:	697b      	ldr	r3, [r7, #20]
 800c2cc:	3b01      	subs	r3, #1
 800c2ce:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800c2d0:	697b      	ldr	r3, [r7, #20]
 800c2d2:	2b00      	cmp	r3, #0
 800c2d4:	d1ea      	bne.n	800c2ac <create_name+0xd4>
 800c2d6:	e000      	b.n	800c2da <create_name+0x102>
		if (w != ' ' && w != '.') break;
 800c2d8:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 800c2da:	697b      	ldr	r3, [r7, #20]
 800c2dc:	005b      	lsls	r3, r3, #1
 800c2de:	68fa      	ldr	r2, [r7, #12]
 800c2e0:	4413      	add	r3, r2
 800c2e2:	2200      	movs	r2, #0
 800c2e4:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 800c2e6:	697b      	ldr	r3, [r7, #20]
 800c2e8:	2b00      	cmp	r3, #0
 800c2ea:	d101      	bne.n	800c2f0 <create_name+0x118>
 800c2ec:	2306      	movs	r3, #6
 800c2ee:	e127      	b.n	800c540 <create_name+0x368>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 800c2f0:	687b      	ldr	r3, [r7, #4]
 800c2f2:	3324      	adds	r3, #36	; 0x24
 800c2f4:	220b      	movs	r2, #11
 800c2f6:	2120      	movs	r1, #32
 800c2f8:	4618      	mov	r0, r3
 800c2fa:	f7fe fc58 	bl	800abae <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 800c2fe:	2300      	movs	r3, #0
 800c300:	61bb      	str	r3, [r7, #24]
 800c302:	e002      	b.n	800c30a <create_name+0x132>
 800c304:	69bb      	ldr	r3, [r7, #24]
 800c306:	3301      	adds	r3, #1
 800c308:	61bb      	str	r3, [r7, #24]
 800c30a:	69bb      	ldr	r3, [r7, #24]
 800c30c:	005b      	lsls	r3, r3, #1
 800c30e:	68fa      	ldr	r2, [r7, #12]
 800c310:	4413      	add	r3, r2
 800c312:	881b      	ldrh	r3, [r3, #0]
 800c314:	2b20      	cmp	r3, #32
 800c316:	d0f5      	beq.n	800c304 <create_name+0x12c>
 800c318:	69bb      	ldr	r3, [r7, #24]
 800c31a:	005b      	lsls	r3, r3, #1
 800c31c:	68fa      	ldr	r2, [r7, #12]
 800c31e:	4413      	add	r3, r2
 800c320:	881b      	ldrh	r3, [r3, #0]
 800c322:	2b2e      	cmp	r3, #46	; 0x2e
 800c324:	d0ee      	beq.n	800c304 <create_name+0x12c>
	if (si) cf |= NS_LOSS | NS_LFN;
 800c326:	69bb      	ldr	r3, [r7, #24]
 800c328:	2b00      	cmp	r3, #0
 800c32a:	d009      	beq.n	800c340 <create_name+0x168>
 800c32c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c330:	f043 0303 	orr.w	r3, r3, #3
 800c334:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 800c338:	e002      	b.n	800c340 <create_name+0x168>
 800c33a:	697b      	ldr	r3, [r7, #20]
 800c33c:	3b01      	subs	r3, #1
 800c33e:	617b      	str	r3, [r7, #20]
 800c340:	697b      	ldr	r3, [r7, #20]
 800c342:	2b00      	cmp	r3, #0
 800c344:	d009      	beq.n	800c35a <create_name+0x182>
 800c346:	697b      	ldr	r3, [r7, #20]
 800c348:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800c34c:	3b01      	subs	r3, #1
 800c34e:	005b      	lsls	r3, r3, #1
 800c350:	68fa      	ldr	r2, [r7, #12]
 800c352:	4413      	add	r3, r2
 800c354:	881b      	ldrh	r3, [r3, #0]
 800c356:	2b2e      	cmp	r3, #46	; 0x2e
 800c358:	d1ef      	bne.n	800c33a <create_name+0x162>

	i = b = 0; ni = 8;
 800c35a:	2300      	movs	r3, #0
 800c35c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800c360:	2300      	movs	r3, #0
 800c362:	623b      	str	r3, [r7, #32]
 800c364:	2308      	movs	r3, #8
 800c366:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 800c368:	69bb      	ldr	r3, [r7, #24]
 800c36a:	1c5a      	adds	r2, r3, #1
 800c36c:	61ba      	str	r2, [r7, #24]
 800c36e:	005b      	lsls	r3, r3, #1
 800c370:	68fa      	ldr	r2, [r7, #12]
 800c372:	4413      	add	r3, r2
 800c374:	881b      	ldrh	r3, [r3, #0]
 800c376:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) break;					/* Break on end of the LFN */
 800c378:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c37a:	2b00      	cmp	r3, #0
 800c37c:	f000 8090 	beq.w	800c4a0 <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 800c380:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c382:	2b20      	cmp	r3, #32
 800c384:	d006      	beq.n	800c394 <create_name+0x1bc>
 800c386:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c388:	2b2e      	cmp	r3, #46	; 0x2e
 800c38a:	d10a      	bne.n	800c3a2 <create_name+0x1ca>
 800c38c:	69ba      	ldr	r2, [r7, #24]
 800c38e:	697b      	ldr	r3, [r7, #20]
 800c390:	429a      	cmp	r2, r3
 800c392:	d006      	beq.n	800c3a2 <create_name+0x1ca>
			cf |= NS_LOSS | NS_LFN; continue;
 800c394:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c398:	f043 0303 	orr.w	r3, r3, #3
 800c39c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800c3a0:	e07d      	b.n	800c49e <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 800c3a2:	6a3a      	ldr	r2, [r7, #32]
 800c3a4:	69fb      	ldr	r3, [r7, #28]
 800c3a6:	429a      	cmp	r2, r3
 800c3a8:	d203      	bcs.n	800c3b2 <create_name+0x1da>
 800c3aa:	69ba      	ldr	r2, [r7, #24]
 800c3ac:	697b      	ldr	r3, [r7, #20]
 800c3ae:	429a      	cmp	r2, r3
 800c3b0:	d123      	bne.n	800c3fa <create_name+0x222>
			if (ni == 11) {				/* Long extension */
 800c3b2:	69fb      	ldr	r3, [r7, #28]
 800c3b4:	2b0b      	cmp	r3, #11
 800c3b6:	d106      	bne.n	800c3c6 <create_name+0x1ee>
				cf |= NS_LOSS | NS_LFN; break;
 800c3b8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c3bc:	f043 0303 	orr.w	r3, r3, #3
 800c3c0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800c3c4:	e075      	b.n	800c4b2 <create_name+0x2da>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 800c3c6:	69ba      	ldr	r2, [r7, #24]
 800c3c8:	697b      	ldr	r3, [r7, #20]
 800c3ca:	429a      	cmp	r2, r3
 800c3cc:	d005      	beq.n	800c3da <create_name+0x202>
 800c3ce:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c3d2:	f043 0303 	orr.w	r3, r3, #3
 800c3d6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (si > di) break;			/* No extension */
 800c3da:	69ba      	ldr	r2, [r7, #24]
 800c3dc:	697b      	ldr	r3, [r7, #20]
 800c3de:	429a      	cmp	r2, r3
 800c3e0:	d866      	bhi.n	800c4b0 <create_name+0x2d8>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 800c3e2:	697b      	ldr	r3, [r7, #20]
 800c3e4:	61bb      	str	r3, [r7, #24]
 800c3e6:	2308      	movs	r3, #8
 800c3e8:	623b      	str	r3, [r7, #32]
 800c3ea:	230b      	movs	r3, #11
 800c3ec:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 800c3ee:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800c3f2:	009b      	lsls	r3, r3, #2
 800c3f4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800c3f8:	e051      	b.n	800c49e <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 800c3fa:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c3fc:	2b7f      	cmp	r3, #127	; 0x7f
 800c3fe:	d914      	bls.n	800c42a <create_name+0x252>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 800c400:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c402:	2100      	movs	r1, #0
 800c404:	4618      	mov	r0, r3
 800c406:	f001 f915 	bl	800d634 <ff_convert>
 800c40a:	4603      	mov	r3, r0
 800c40c:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 800c40e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c410:	2b00      	cmp	r3, #0
 800c412:	d004      	beq.n	800c41e <create_name+0x246>
 800c414:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c416:	3b80      	subs	r3, #128	; 0x80
 800c418:	4a23      	ldr	r2, [pc, #140]	; (800c4a8 <create_name+0x2d0>)
 800c41a:	5cd3      	ldrb	r3, [r2, r3]
 800c41c:	84bb      	strh	r3, [r7, #36]	; 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 800c41e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c422:	f043 0302 	orr.w	r3, r3, #2
 800c426:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 800c42a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c42c:	2b00      	cmp	r3, #0
 800c42e:	d007      	beq.n	800c440 <create_name+0x268>
 800c430:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c432:	4619      	mov	r1, r3
 800c434:	481d      	ldr	r0, [pc, #116]	; (800c4ac <create_name+0x2d4>)
 800c436:	f7fe fbfc 	bl	800ac32 <chk_chr>
 800c43a:	4603      	mov	r3, r0
 800c43c:	2b00      	cmp	r3, #0
 800c43e:	d008      	beq.n	800c452 <create_name+0x27a>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 800c440:	235f      	movs	r3, #95	; 0x5f
 800c442:	84bb      	strh	r3, [r7, #36]	; 0x24
 800c444:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c448:	f043 0303 	orr.w	r3, r3, #3
 800c44c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800c450:	e01b      	b.n	800c48a <create_name+0x2b2>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 800c452:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c454:	2b40      	cmp	r3, #64	; 0x40
 800c456:	d909      	bls.n	800c46c <create_name+0x294>
 800c458:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c45a:	2b5a      	cmp	r3, #90	; 0x5a
 800c45c:	d806      	bhi.n	800c46c <create_name+0x294>
					b |= 2;
 800c45e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800c462:	f043 0302 	orr.w	r3, r3, #2
 800c466:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800c46a:	e00e      	b.n	800c48a <create_name+0x2b2>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 800c46c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c46e:	2b60      	cmp	r3, #96	; 0x60
 800c470:	d90b      	bls.n	800c48a <create_name+0x2b2>
 800c472:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c474:	2b7a      	cmp	r3, #122	; 0x7a
 800c476:	d808      	bhi.n	800c48a <create_name+0x2b2>
						b |= 1; w -= 0x20;
 800c478:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800c47c:	f043 0301 	orr.w	r3, r3, #1
 800c480:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800c484:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c486:	3b20      	subs	r3, #32
 800c488:	84bb      	strh	r3, [r7, #36]	; 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 800c48a:	6a3b      	ldr	r3, [r7, #32]
 800c48c:	1c5a      	adds	r2, r3, #1
 800c48e:	623a      	str	r2, [r7, #32]
 800c490:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800c492:	b2d1      	uxtb	r1, r2
 800c494:	687a      	ldr	r2, [r7, #4]
 800c496:	4413      	add	r3, r2
 800c498:	460a      	mov	r2, r1
 800c49a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		w = lfn[si++];					/* Get an LFN character */
 800c49e:	e763      	b.n	800c368 <create_name+0x190>
		if (!w) break;					/* Break on end of the LFN */
 800c4a0:	bf00      	nop
 800c4a2:	e006      	b.n	800c4b2 <create_name+0x2da>
 800c4a4:	0800e1cc 	.word	0x0800e1cc
 800c4a8:	0800e22c 	.word	0x0800e22c
 800c4ac:	0800e1d8 	.word	0x0800e1d8
			if (si > di) break;			/* No extension */
 800c4b0:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800c4b2:	687b      	ldr	r3, [r7, #4]
 800c4b4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800c4b8:	2be5      	cmp	r3, #229	; 0xe5
 800c4ba:	d103      	bne.n	800c4c4 <create_name+0x2ec>
 800c4bc:	687b      	ldr	r3, [r7, #4]
 800c4be:	2205      	movs	r2, #5
 800c4c0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

	if (ni == 8) b <<= 2;
 800c4c4:	69fb      	ldr	r3, [r7, #28]
 800c4c6:	2b08      	cmp	r3, #8
 800c4c8:	d104      	bne.n	800c4d4 <create_name+0x2fc>
 800c4ca:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800c4ce:	009b      	lsls	r3, r3, #2
 800c4d0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 800c4d4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800c4d8:	f003 030c 	and.w	r3, r3, #12
 800c4dc:	2b0c      	cmp	r3, #12
 800c4de:	d005      	beq.n	800c4ec <create_name+0x314>
 800c4e0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800c4e4:	f003 0303 	and.w	r3, r3, #3
 800c4e8:	2b03      	cmp	r3, #3
 800c4ea:	d105      	bne.n	800c4f8 <create_name+0x320>
 800c4ec:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c4f0:	f043 0302 	orr.w	r3, r3, #2
 800c4f4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 800c4f8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c4fc:	f003 0302 	and.w	r3, r3, #2
 800c500:	2b00      	cmp	r3, #0
 800c502:	d117      	bne.n	800c534 <create_name+0x35c>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 800c504:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800c508:	f003 0303 	and.w	r3, r3, #3
 800c50c:	2b01      	cmp	r3, #1
 800c50e:	d105      	bne.n	800c51c <create_name+0x344>
 800c510:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c514:	f043 0310 	orr.w	r3, r3, #16
 800c518:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 800c51c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800c520:	f003 030c 	and.w	r3, r3, #12
 800c524:	2b04      	cmp	r3, #4
 800c526:	d105      	bne.n	800c534 <create_name+0x35c>
 800c528:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c52c:	f043 0308 	orr.w	r3, r3, #8
 800c530:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 800c534:	687b      	ldr	r3, [r7, #4]
 800c536:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800c53a:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

	return FR_OK;
 800c53e:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 800c540:	4618      	mov	r0, r3
 800c542:	3728      	adds	r7, #40	; 0x28
 800c544:	46bd      	mov	sp, r7
 800c546:	bd80      	pop	{r7, pc}

0800c548 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800c548:	b580      	push	{r7, lr}
 800c54a:	b086      	sub	sp, #24
 800c54c:	af00      	add	r7, sp, #0
 800c54e:	6078      	str	r0, [r7, #4]
 800c550:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800c552:	687b      	ldr	r3, [r7, #4]
 800c554:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800c556:	693b      	ldr	r3, [r7, #16]
 800c558:	681b      	ldr	r3, [r3, #0]
 800c55a:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800c55c:	e002      	b.n	800c564 <follow_path+0x1c>
 800c55e:	683b      	ldr	r3, [r7, #0]
 800c560:	3301      	adds	r3, #1
 800c562:	603b      	str	r3, [r7, #0]
 800c564:	683b      	ldr	r3, [r7, #0]
 800c566:	781b      	ldrb	r3, [r3, #0]
 800c568:	2b2f      	cmp	r3, #47	; 0x2f
 800c56a:	d0f8      	beq.n	800c55e <follow_path+0x16>
 800c56c:	683b      	ldr	r3, [r7, #0]
 800c56e:	781b      	ldrb	r3, [r3, #0]
 800c570:	2b5c      	cmp	r3, #92	; 0x5c
 800c572:	d0f4      	beq.n	800c55e <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800c574:	693b      	ldr	r3, [r7, #16]
 800c576:	2200      	movs	r2, #0
 800c578:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800c57a:	683b      	ldr	r3, [r7, #0]
 800c57c:	781b      	ldrb	r3, [r3, #0]
 800c57e:	2b1f      	cmp	r3, #31
 800c580:	d80a      	bhi.n	800c598 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800c582:	687b      	ldr	r3, [r7, #4]
 800c584:	2280      	movs	r2, #128	; 0x80
 800c586:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 800c58a:	2100      	movs	r1, #0
 800c58c:	6878      	ldr	r0, [r7, #4]
 800c58e:	f7ff f8fd 	bl	800b78c <dir_sdi>
 800c592:	4603      	mov	r3, r0
 800c594:	75fb      	strb	r3, [r7, #23]
 800c596:	e048      	b.n	800c62a <follow_path+0xe2>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800c598:	463b      	mov	r3, r7
 800c59a:	4619      	mov	r1, r3
 800c59c:	6878      	ldr	r0, [r7, #4]
 800c59e:	f7ff fe1b 	bl	800c1d8 <create_name>
 800c5a2:	4603      	mov	r3, r0
 800c5a4:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800c5a6:	7dfb      	ldrb	r3, [r7, #23]
 800c5a8:	2b00      	cmp	r3, #0
 800c5aa:	d139      	bne.n	800c620 <follow_path+0xd8>
			res = dir_find(dp);				/* Find an object with the segment name */
 800c5ac:	6878      	ldr	r0, [r7, #4]
 800c5ae:	f7ff fc5a 	bl	800be66 <dir_find>
 800c5b2:	4603      	mov	r3, r0
 800c5b4:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800c5b6:	687b      	ldr	r3, [r7, #4]
 800c5b8:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800c5bc:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800c5be:	7dfb      	ldrb	r3, [r7, #23]
 800c5c0:	2b00      	cmp	r3, #0
 800c5c2:	d00a      	beq.n	800c5da <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800c5c4:	7dfb      	ldrb	r3, [r7, #23]
 800c5c6:	2b04      	cmp	r3, #4
 800c5c8:	d12c      	bne.n	800c624 <follow_path+0xdc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800c5ca:	7afb      	ldrb	r3, [r7, #11]
 800c5cc:	f003 0304 	and.w	r3, r3, #4
 800c5d0:	2b00      	cmp	r3, #0
 800c5d2:	d127      	bne.n	800c624 <follow_path+0xdc>
 800c5d4:	2305      	movs	r3, #5
 800c5d6:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800c5d8:	e024      	b.n	800c624 <follow_path+0xdc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800c5da:	7afb      	ldrb	r3, [r7, #11]
 800c5dc:	f003 0304 	and.w	r3, r3, #4
 800c5e0:	2b00      	cmp	r3, #0
 800c5e2:	d121      	bne.n	800c628 <follow_path+0xe0>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800c5e4:	693b      	ldr	r3, [r7, #16]
 800c5e6:	799b      	ldrb	r3, [r3, #6]
 800c5e8:	f003 0310 	and.w	r3, r3, #16
 800c5ec:	2b00      	cmp	r3, #0
 800c5ee:	d102      	bne.n	800c5f6 <follow_path+0xae>
				res = FR_NO_PATH; break;
 800c5f0:	2305      	movs	r3, #5
 800c5f2:	75fb      	strb	r3, [r7, #23]
 800c5f4:	e019      	b.n	800c62a <follow_path+0xe2>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800c5f6:	68fb      	ldr	r3, [r7, #12]
 800c5f8:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800c5fc:	687b      	ldr	r3, [r7, #4]
 800c5fe:	695b      	ldr	r3, [r3, #20]
 800c600:	68fa      	ldr	r2, [r7, #12]
 800c602:	8992      	ldrh	r2, [r2, #12]
 800c604:	fbb3 f0f2 	udiv	r0, r3, r2
 800c608:	fb00 f202 	mul.w	r2, r0, r2
 800c60c:	1a9b      	subs	r3, r3, r2
 800c60e:	440b      	add	r3, r1
 800c610:	4619      	mov	r1, r3
 800c612:	68f8      	ldr	r0, [r7, #12]
 800c614:	f7ff fa60 	bl	800bad8 <ld_clust>
 800c618:	4602      	mov	r2, r0
 800c61a:	693b      	ldr	r3, [r7, #16]
 800c61c:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800c61e:	e7bb      	b.n	800c598 <follow_path+0x50>
			if (res != FR_OK) break;
 800c620:	bf00      	nop
 800c622:	e002      	b.n	800c62a <follow_path+0xe2>
				break;
 800c624:	bf00      	nop
 800c626:	e000      	b.n	800c62a <follow_path+0xe2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800c628:	bf00      	nop
			}
		}
	}

	return res;
 800c62a:	7dfb      	ldrb	r3, [r7, #23]
}
 800c62c:	4618      	mov	r0, r3
 800c62e:	3718      	adds	r7, #24
 800c630:	46bd      	mov	sp, r7
 800c632:	bd80      	pop	{r7, pc}

0800c634 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800c634:	b480      	push	{r7}
 800c636:	b087      	sub	sp, #28
 800c638:	af00      	add	r7, sp, #0
 800c63a:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800c63c:	f04f 33ff 	mov.w	r3, #4294967295
 800c640:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800c642:	687b      	ldr	r3, [r7, #4]
 800c644:	681b      	ldr	r3, [r3, #0]
 800c646:	2b00      	cmp	r3, #0
 800c648:	d031      	beq.n	800c6ae <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800c64a:	687b      	ldr	r3, [r7, #4]
 800c64c:	681b      	ldr	r3, [r3, #0]
 800c64e:	617b      	str	r3, [r7, #20]
 800c650:	e002      	b.n	800c658 <get_ldnumber+0x24>
 800c652:	697b      	ldr	r3, [r7, #20]
 800c654:	3301      	adds	r3, #1
 800c656:	617b      	str	r3, [r7, #20]
 800c658:	697b      	ldr	r3, [r7, #20]
 800c65a:	781b      	ldrb	r3, [r3, #0]
 800c65c:	2b1f      	cmp	r3, #31
 800c65e:	d903      	bls.n	800c668 <get_ldnumber+0x34>
 800c660:	697b      	ldr	r3, [r7, #20]
 800c662:	781b      	ldrb	r3, [r3, #0]
 800c664:	2b3a      	cmp	r3, #58	; 0x3a
 800c666:	d1f4      	bne.n	800c652 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800c668:	697b      	ldr	r3, [r7, #20]
 800c66a:	781b      	ldrb	r3, [r3, #0]
 800c66c:	2b3a      	cmp	r3, #58	; 0x3a
 800c66e:	d11c      	bne.n	800c6aa <get_ldnumber+0x76>
			tp = *path;
 800c670:	687b      	ldr	r3, [r7, #4]
 800c672:	681b      	ldr	r3, [r3, #0]
 800c674:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800c676:	68fb      	ldr	r3, [r7, #12]
 800c678:	1c5a      	adds	r2, r3, #1
 800c67a:	60fa      	str	r2, [r7, #12]
 800c67c:	781b      	ldrb	r3, [r3, #0]
 800c67e:	3b30      	subs	r3, #48	; 0x30
 800c680:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800c682:	68bb      	ldr	r3, [r7, #8]
 800c684:	2b09      	cmp	r3, #9
 800c686:	d80e      	bhi.n	800c6a6 <get_ldnumber+0x72>
 800c688:	68fa      	ldr	r2, [r7, #12]
 800c68a:	697b      	ldr	r3, [r7, #20]
 800c68c:	429a      	cmp	r2, r3
 800c68e:	d10a      	bne.n	800c6a6 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800c690:	68bb      	ldr	r3, [r7, #8]
 800c692:	2b00      	cmp	r3, #0
 800c694:	d107      	bne.n	800c6a6 <get_ldnumber+0x72>
					vol = (int)i;
 800c696:	68bb      	ldr	r3, [r7, #8]
 800c698:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800c69a:	697b      	ldr	r3, [r7, #20]
 800c69c:	3301      	adds	r3, #1
 800c69e:	617b      	str	r3, [r7, #20]
 800c6a0:	687b      	ldr	r3, [r7, #4]
 800c6a2:	697a      	ldr	r2, [r7, #20]
 800c6a4:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800c6a6:	693b      	ldr	r3, [r7, #16]
 800c6a8:	e002      	b.n	800c6b0 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800c6aa:	2300      	movs	r3, #0
 800c6ac:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800c6ae:	693b      	ldr	r3, [r7, #16]
}
 800c6b0:	4618      	mov	r0, r3
 800c6b2:	371c      	adds	r7, #28
 800c6b4:	46bd      	mov	sp, r7
 800c6b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6ba:	4770      	bx	lr

0800c6bc <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800c6bc:	b580      	push	{r7, lr}
 800c6be:	b082      	sub	sp, #8
 800c6c0:	af00      	add	r7, sp, #0
 800c6c2:	6078      	str	r0, [r7, #4]
 800c6c4:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800c6c6:	687b      	ldr	r3, [r7, #4]
 800c6c8:	2200      	movs	r2, #0
 800c6ca:	70da      	strb	r2, [r3, #3]
 800c6cc:	687b      	ldr	r3, [r7, #4]
 800c6ce:	f04f 32ff 	mov.w	r2, #4294967295
 800c6d2:	635a      	str	r2, [r3, #52]	; 0x34
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800c6d4:	6839      	ldr	r1, [r7, #0]
 800c6d6:	6878      	ldr	r0, [r7, #4]
 800c6d8:	f7fe fc76 	bl	800afc8 <move_window>
 800c6dc:	4603      	mov	r3, r0
 800c6de:	2b00      	cmp	r3, #0
 800c6e0:	d001      	beq.n	800c6e6 <check_fs+0x2a>
 800c6e2:	2304      	movs	r3, #4
 800c6e4:	e038      	b.n	800c758 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800c6e6:	687b      	ldr	r3, [r7, #4]
 800c6e8:	3338      	adds	r3, #56	; 0x38
 800c6ea:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800c6ee:	4618      	mov	r0, r3
 800c6f0:	f7fe f9ba 	bl	800aa68 <ld_word>
 800c6f4:	4603      	mov	r3, r0
 800c6f6:	461a      	mov	r2, r3
 800c6f8:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800c6fc:	429a      	cmp	r2, r3
 800c6fe:	d001      	beq.n	800c704 <check_fs+0x48>
 800c700:	2303      	movs	r3, #3
 800c702:	e029      	b.n	800c758 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800c704:	687b      	ldr	r3, [r7, #4]
 800c706:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800c70a:	2be9      	cmp	r3, #233	; 0xe9
 800c70c:	d009      	beq.n	800c722 <check_fs+0x66>
 800c70e:	687b      	ldr	r3, [r7, #4]
 800c710:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800c714:	2beb      	cmp	r3, #235	; 0xeb
 800c716:	d11e      	bne.n	800c756 <check_fs+0x9a>
 800c718:	687b      	ldr	r3, [r7, #4]
 800c71a:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800c71e:	2b90      	cmp	r3, #144	; 0x90
 800c720:	d119      	bne.n	800c756 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800c722:	687b      	ldr	r3, [r7, #4]
 800c724:	3338      	adds	r3, #56	; 0x38
 800c726:	3336      	adds	r3, #54	; 0x36
 800c728:	4618      	mov	r0, r3
 800c72a:	f7fe f9b5 	bl	800aa98 <ld_dword>
 800c72e:	4603      	mov	r3, r0
 800c730:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800c734:	4a0a      	ldr	r2, [pc, #40]	; (800c760 <check_fs+0xa4>)
 800c736:	4293      	cmp	r3, r2
 800c738:	d101      	bne.n	800c73e <check_fs+0x82>
 800c73a:	2300      	movs	r3, #0
 800c73c:	e00c      	b.n	800c758 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800c73e:	687b      	ldr	r3, [r7, #4]
 800c740:	3338      	adds	r3, #56	; 0x38
 800c742:	3352      	adds	r3, #82	; 0x52
 800c744:	4618      	mov	r0, r3
 800c746:	f7fe f9a7 	bl	800aa98 <ld_dword>
 800c74a:	4603      	mov	r3, r0
 800c74c:	4a05      	ldr	r2, [pc, #20]	; (800c764 <check_fs+0xa8>)
 800c74e:	4293      	cmp	r3, r2
 800c750:	d101      	bne.n	800c756 <check_fs+0x9a>
 800c752:	2300      	movs	r3, #0
 800c754:	e000      	b.n	800c758 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800c756:	2302      	movs	r3, #2
}
 800c758:	4618      	mov	r0, r3
 800c75a:	3708      	adds	r7, #8
 800c75c:	46bd      	mov	sp, r7
 800c75e:	bd80      	pop	{r7, pc}
 800c760:	00544146 	.word	0x00544146
 800c764:	33544146 	.word	0x33544146

0800c768 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800c768:	b580      	push	{r7, lr}
 800c76a:	b096      	sub	sp, #88	; 0x58
 800c76c:	af00      	add	r7, sp, #0
 800c76e:	60f8      	str	r0, [r7, #12]
 800c770:	60b9      	str	r1, [r7, #8]
 800c772:	4613      	mov	r3, r2
 800c774:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800c776:	68bb      	ldr	r3, [r7, #8]
 800c778:	2200      	movs	r2, #0
 800c77a:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800c77c:	68f8      	ldr	r0, [r7, #12]
 800c77e:	f7ff ff59 	bl	800c634 <get_ldnumber>
 800c782:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800c784:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c786:	2b00      	cmp	r3, #0
 800c788:	da01      	bge.n	800c78e <find_volume+0x26>
 800c78a:	230b      	movs	r3, #11
 800c78c:	e265      	b.n	800cc5a <find_volume+0x4f2>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800c78e:	4a9f      	ldr	r2, [pc, #636]	; (800ca0c <find_volume+0x2a4>)
 800c790:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c792:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c796:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800c798:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c79a:	2b00      	cmp	r3, #0
 800c79c:	d101      	bne.n	800c7a2 <find_volume+0x3a>
 800c79e:	230c      	movs	r3, #12
 800c7a0:	e25b      	b.n	800cc5a <find_volume+0x4f2>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800c7a2:	68bb      	ldr	r3, [r7, #8]
 800c7a4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c7a6:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800c7a8:	79fb      	ldrb	r3, [r7, #7]
 800c7aa:	f023 0301 	bic.w	r3, r3, #1
 800c7ae:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800c7b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c7b2:	781b      	ldrb	r3, [r3, #0]
 800c7b4:	2b00      	cmp	r3, #0
 800c7b6:	d01a      	beq.n	800c7ee <find_volume+0x86>
		stat = disk_status(fs->drv);
 800c7b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c7ba:	785b      	ldrb	r3, [r3, #1]
 800c7bc:	4618      	mov	r0, r3
 800c7be:	f7fe f8b5 	bl	800a92c <disk_status>
 800c7c2:	4603      	mov	r3, r0
 800c7c4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800c7c8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800c7cc:	f003 0301 	and.w	r3, r3, #1
 800c7d0:	2b00      	cmp	r3, #0
 800c7d2:	d10c      	bne.n	800c7ee <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800c7d4:	79fb      	ldrb	r3, [r7, #7]
 800c7d6:	2b00      	cmp	r3, #0
 800c7d8:	d007      	beq.n	800c7ea <find_volume+0x82>
 800c7da:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800c7de:	f003 0304 	and.w	r3, r3, #4
 800c7e2:	2b00      	cmp	r3, #0
 800c7e4:	d001      	beq.n	800c7ea <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 800c7e6:	230a      	movs	r3, #10
 800c7e8:	e237      	b.n	800cc5a <find_volume+0x4f2>
			}
			return FR_OK;				/* The file system object is valid */
 800c7ea:	2300      	movs	r3, #0
 800c7ec:	e235      	b.n	800cc5a <find_volume+0x4f2>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800c7ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c7f0:	2200      	movs	r2, #0
 800c7f2:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800c7f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c7f6:	b2da      	uxtb	r2, r3
 800c7f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c7fa:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800c7fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c7fe:	785b      	ldrb	r3, [r3, #1]
 800c800:	4618      	mov	r0, r3
 800c802:	f7fe f8ad 	bl	800a960 <disk_initialize>
 800c806:	4603      	mov	r3, r0
 800c808:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800c80c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800c810:	f003 0301 	and.w	r3, r3, #1
 800c814:	2b00      	cmp	r3, #0
 800c816:	d001      	beq.n	800c81c <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800c818:	2303      	movs	r3, #3
 800c81a:	e21e      	b.n	800cc5a <find_volume+0x4f2>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800c81c:	79fb      	ldrb	r3, [r7, #7]
 800c81e:	2b00      	cmp	r3, #0
 800c820:	d007      	beq.n	800c832 <find_volume+0xca>
 800c822:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800c826:	f003 0304 	and.w	r3, r3, #4
 800c82a:	2b00      	cmp	r3, #0
 800c82c:	d001      	beq.n	800c832 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 800c82e:	230a      	movs	r3, #10
 800c830:	e213      	b.n	800cc5a <find_volume+0x4f2>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 800c832:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c834:	7858      	ldrb	r0, [r3, #1]
 800c836:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c838:	330c      	adds	r3, #12
 800c83a:	461a      	mov	r2, r3
 800c83c:	2102      	movs	r1, #2
 800c83e:	f7fe f8f5 	bl	800aa2c <disk_ioctl>
 800c842:	4603      	mov	r3, r0
 800c844:	2b00      	cmp	r3, #0
 800c846:	d001      	beq.n	800c84c <find_volume+0xe4>
 800c848:	2301      	movs	r3, #1
 800c84a:	e206      	b.n	800cc5a <find_volume+0x4f2>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 800c84c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c84e:	899b      	ldrh	r3, [r3, #12]
 800c850:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c854:	d80d      	bhi.n	800c872 <find_volume+0x10a>
 800c856:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c858:	899b      	ldrh	r3, [r3, #12]
 800c85a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c85e:	d308      	bcc.n	800c872 <find_volume+0x10a>
 800c860:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c862:	899b      	ldrh	r3, [r3, #12]
 800c864:	461a      	mov	r2, r3
 800c866:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c868:	899b      	ldrh	r3, [r3, #12]
 800c86a:	3b01      	subs	r3, #1
 800c86c:	4013      	ands	r3, r2
 800c86e:	2b00      	cmp	r3, #0
 800c870:	d001      	beq.n	800c876 <find_volume+0x10e>
 800c872:	2301      	movs	r3, #1
 800c874:	e1f1      	b.n	800cc5a <find_volume+0x4f2>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800c876:	2300      	movs	r3, #0
 800c878:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800c87a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800c87c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800c87e:	f7ff ff1d 	bl	800c6bc <check_fs>
 800c882:	4603      	mov	r3, r0
 800c884:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800c888:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800c88c:	2b02      	cmp	r3, #2
 800c88e:	d149      	bne.n	800c924 <find_volume+0x1bc>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800c890:	2300      	movs	r3, #0
 800c892:	643b      	str	r3, [r7, #64]	; 0x40
 800c894:	e01e      	b.n	800c8d4 <find_volume+0x16c>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800c896:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c898:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800c89c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c89e:	011b      	lsls	r3, r3, #4
 800c8a0:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800c8a4:	4413      	add	r3, r2
 800c8a6:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800c8a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c8aa:	3304      	adds	r3, #4
 800c8ac:	781b      	ldrb	r3, [r3, #0]
 800c8ae:	2b00      	cmp	r3, #0
 800c8b0:	d006      	beq.n	800c8c0 <find_volume+0x158>
 800c8b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c8b4:	3308      	adds	r3, #8
 800c8b6:	4618      	mov	r0, r3
 800c8b8:	f7fe f8ee 	bl	800aa98 <ld_dword>
 800c8bc:	4602      	mov	r2, r0
 800c8be:	e000      	b.n	800c8c2 <find_volume+0x15a>
 800c8c0:	2200      	movs	r2, #0
 800c8c2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c8c4:	009b      	lsls	r3, r3, #2
 800c8c6:	3358      	adds	r3, #88	; 0x58
 800c8c8:	443b      	add	r3, r7
 800c8ca:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800c8ce:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c8d0:	3301      	adds	r3, #1
 800c8d2:	643b      	str	r3, [r7, #64]	; 0x40
 800c8d4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c8d6:	2b03      	cmp	r3, #3
 800c8d8:	d9dd      	bls.n	800c896 <find_volume+0x12e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800c8da:	2300      	movs	r3, #0
 800c8dc:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 800c8de:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c8e0:	2b00      	cmp	r3, #0
 800c8e2:	d002      	beq.n	800c8ea <find_volume+0x182>
 800c8e4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c8e6:	3b01      	subs	r3, #1
 800c8e8:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800c8ea:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c8ec:	009b      	lsls	r3, r3, #2
 800c8ee:	3358      	adds	r3, #88	; 0x58
 800c8f0:	443b      	add	r3, r7
 800c8f2:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800c8f6:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800c8f8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c8fa:	2b00      	cmp	r3, #0
 800c8fc:	d005      	beq.n	800c90a <find_volume+0x1a2>
 800c8fe:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800c900:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800c902:	f7ff fedb 	bl	800c6bc <check_fs>
 800c906:	4603      	mov	r3, r0
 800c908:	e000      	b.n	800c90c <find_volume+0x1a4>
 800c90a:	2303      	movs	r3, #3
 800c90c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800c910:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800c914:	2b01      	cmp	r3, #1
 800c916:	d905      	bls.n	800c924 <find_volume+0x1bc>
 800c918:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c91a:	3301      	adds	r3, #1
 800c91c:	643b      	str	r3, [r7, #64]	; 0x40
 800c91e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c920:	2b03      	cmp	r3, #3
 800c922:	d9e2      	bls.n	800c8ea <find_volume+0x182>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800c924:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800c928:	2b04      	cmp	r3, #4
 800c92a:	d101      	bne.n	800c930 <find_volume+0x1c8>
 800c92c:	2301      	movs	r3, #1
 800c92e:	e194      	b.n	800cc5a <find_volume+0x4f2>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800c930:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800c934:	2b01      	cmp	r3, #1
 800c936:	d901      	bls.n	800c93c <find_volume+0x1d4>
 800c938:	230d      	movs	r3, #13
 800c93a:	e18e      	b.n	800cc5a <find_volume+0x4f2>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800c93c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c93e:	3338      	adds	r3, #56	; 0x38
 800c940:	330b      	adds	r3, #11
 800c942:	4618      	mov	r0, r3
 800c944:	f7fe f890 	bl	800aa68 <ld_word>
 800c948:	4603      	mov	r3, r0
 800c94a:	461a      	mov	r2, r3
 800c94c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c94e:	899b      	ldrh	r3, [r3, #12]
 800c950:	429a      	cmp	r2, r3
 800c952:	d001      	beq.n	800c958 <find_volume+0x1f0>
 800c954:	230d      	movs	r3, #13
 800c956:	e180      	b.n	800cc5a <find_volume+0x4f2>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800c958:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c95a:	3338      	adds	r3, #56	; 0x38
 800c95c:	3316      	adds	r3, #22
 800c95e:	4618      	mov	r0, r3
 800c960:	f7fe f882 	bl	800aa68 <ld_word>
 800c964:	4603      	mov	r3, r0
 800c966:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800c968:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c96a:	2b00      	cmp	r3, #0
 800c96c:	d106      	bne.n	800c97c <find_volume+0x214>
 800c96e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c970:	3338      	adds	r3, #56	; 0x38
 800c972:	3324      	adds	r3, #36	; 0x24
 800c974:	4618      	mov	r0, r3
 800c976:	f7fe f88f 	bl	800aa98 <ld_dword>
 800c97a:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 800c97c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c97e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800c980:	621a      	str	r2, [r3, #32]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800c982:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c984:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 800c988:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c98a:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800c98c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c98e:	789b      	ldrb	r3, [r3, #2]
 800c990:	2b01      	cmp	r3, #1
 800c992:	d005      	beq.n	800c9a0 <find_volume+0x238>
 800c994:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c996:	789b      	ldrb	r3, [r3, #2]
 800c998:	2b02      	cmp	r3, #2
 800c99a:	d001      	beq.n	800c9a0 <find_volume+0x238>
 800c99c:	230d      	movs	r3, #13
 800c99e:	e15c      	b.n	800cc5a <find_volume+0x4f2>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800c9a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c9a2:	789b      	ldrb	r3, [r3, #2]
 800c9a4:	461a      	mov	r2, r3
 800c9a6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c9a8:	fb02 f303 	mul.w	r3, r2, r3
 800c9ac:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800c9ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c9b0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c9b4:	b29a      	uxth	r2, r3
 800c9b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c9b8:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800c9ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c9bc:	895b      	ldrh	r3, [r3, #10]
 800c9be:	2b00      	cmp	r3, #0
 800c9c0:	d008      	beq.n	800c9d4 <find_volume+0x26c>
 800c9c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c9c4:	895b      	ldrh	r3, [r3, #10]
 800c9c6:	461a      	mov	r2, r3
 800c9c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c9ca:	895b      	ldrh	r3, [r3, #10]
 800c9cc:	3b01      	subs	r3, #1
 800c9ce:	4013      	ands	r3, r2
 800c9d0:	2b00      	cmp	r3, #0
 800c9d2:	d001      	beq.n	800c9d8 <find_volume+0x270>
 800c9d4:	230d      	movs	r3, #13
 800c9d6:	e140      	b.n	800cc5a <find_volume+0x4f2>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800c9d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c9da:	3338      	adds	r3, #56	; 0x38
 800c9dc:	3311      	adds	r3, #17
 800c9de:	4618      	mov	r0, r3
 800c9e0:	f7fe f842 	bl	800aa68 <ld_word>
 800c9e4:	4603      	mov	r3, r0
 800c9e6:	461a      	mov	r2, r3
 800c9e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c9ea:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800c9ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c9ee:	891b      	ldrh	r3, [r3, #8]
 800c9f0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c9f2:	8992      	ldrh	r2, [r2, #12]
 800c9f4:	0952      	lsrs	r2, r2, #5
 800c9f6:	b292      	uxth	r2, r2
 800c9f8:	fbb3 f1f2 	udiv	r1, r3, r2
 800c9fc:	fb01 f202 	mul.w	r2, r1, r2
 800ca00:	1a9b      	subs	r3, r3, r2
 800ca02:	b29b      	uxth	r3, r3
 800ca04:	2b00      	cmp	r3, #0
 800ca06:	d003      	beq.n	800ca10 <find_volume+0x2a8>
 800ca08:	230d      	movs	r3, #13
 800ca0a:	e126      	b.n	800cc5a <find_volume+0x4f2>
 800ca0c:	20016e88 	.word	0x20016e88

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800ca10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca12:	3338      	adds	r3, #56	; 0x38
 800ca14:	3313      	adds	r3, #19
 800ca16:	4618      	mov	r0, r3
 800ca18:	f7fe f826 	bl	800aa68 <ld_word>
 800ca1c:	4603      	mov	r3, r0
 800ca1e:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800ca20:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ca22:	2b00      	cmp	r3, #0
 800ca24:	d106      	bne.n	800ca34 <find_volume+0x2cc>
 800ca26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca28:	3338      	adds	r3, #56	; 0x38
 800ca2a:	3320      	adds	r3, #32
 800ca2c:	4618      	mov	r0, r3
 800ca2e:	f7fe f833 	bl	800aa98 <ld_dword>
 800ca32:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800ca34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca36:	3338      	adds	r3, #56	; 0x38
 800ca38:	330e      	adds	r3, #14
 800ca3a:	4618      	mov	r0, r3
 800ca3c:	f7fe f814 	bl	800aa68 <ld_word>
 800ca40:	4603      	mov	r3, r0
 800ca42:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800ca44:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800ca46:	2b00      	cmp	r3, #0
 800ca48:	d101      	bne.n	800ca4e <find_volume+0x2e6>
 800ca4a:	230d      	movs	r3, #13
 800ca4c:	e105      	b.n	800cc5a <find_volume+0x4f2>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800ca4e:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800ca50:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ca52:	4413      	add	r3, r2
 800ca54:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ca56:	8911      	ldrh	r1, [r2, #8]
 800ca58:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ca5a:	8992      	ldrh	r2, [r2, #12]
 800ca5c:	0952      	lsrs	r2, r2, #5
 800ca5e:	b292      	uxth	r2, r2
 800ca60:	fbb1 f2f2 	udiv	r2, r1, r2
 800ca64:	b292      	uxth	r2, r2
 800ca66:	4413      	add	r3, r2
 800ca68:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800ca6a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800ca6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ca6e:	429a      	cmp	r2, r3
 800ca70:	d201      	bcs.n	800ca76 <find_volume+0x30e>
 800ca72:	230d      	movs	r3, #13
 800ca74:	e0f1      	b.n	800cc5a <find_volume+0x4f2>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800ca76:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800ca78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ca7a:	1ad3      	subs	r3, r2, r3
 800ca7c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ca7e:	8952      	ldrh	r2, [r2, #10]
 800ca80:	fbb3 f3f2 	udiv	r3, r3, r2
 800ca84:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800ca86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ca88:	2b00      	cmp	r3, #0
 800ca8a:	d101      	bne.n	800ca90 <find_volume+0x328>
 800ca8c:	230d      	movs	r3, #13
 800ca8e:	e0e4      	b.n	800cc5a <find_volume+0x4f2>
		fmt = FS_FAT32;
 800ca90:	2303      	movs	r3, #3
 800ca92:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800ca96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ca98:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800ca9c:	4293      	cmp	r3, r2
 800ca9e:	d802      	bhi.n	800caa6 <find_volume+0x33e>
 800caa0:	2302      	movs	r3, #2
 800caa2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800caa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800caa8:	f640 72f5 	movw	r2, #4085	; 0xff5
 800caac:	4293      	cmp	r3, r2
 800caae:	d802      	bhi.n	800cab6 <find_volume+0x34e>
 800cab0:	2301      	movs	r3, #1
 800cab2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800cab6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cab8:	1c9a      	adds	r2, r3, #2
 800caba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cabc:	61da      	str	r2, [r3, #28]
		fs->volbase = bsect;							/* Volume start sector */
 800cabe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cac0:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800cac2:	625a      	str	r2, [r3, #36]	; 0x24
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800cac4:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800cac6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800cac8:	441a      	add	r2, r3
 800caca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cacc:	629a      	str	r2, [r3, #40]	; 0x28
		fs->database = bsect + sysect;					/* Data start sector */
 800cace:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800cad0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cad2:	441a      	add	r2, r3
 800cad4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cad6:	631a      	str	r2, [r3, #48]	; 0x30
		if (fmt == FS_FAT32) {
 800cad8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800cadc:	2b03      	cmp	r3, #3
 800cade:	d11e      	bne.n	800cb1e <find_volume+0x3b6>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800cae0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cae2:	3338      	adds	r3, #56	; 0x38
 800cae4:	332a      	adds	r3, #42	; 0x2a
 800cae6:	4618      	mov	r0, r3
 800cae8:	f7fd ffbe 	bl	800aa68 <ld_word>
 800caec:	4603      	mov	r3, r0
 800caee:	2b00      	cmp	r3, #0
 800caf0:	d001      	beq.n	800caf6 <find_volume+0x38e>
 800caf2:	230d      	movs	r3, #13
 800caf4:	e0b1      	b.n	800cc5a <find_volume+0x4f2>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800caf6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800caf8:	891b      	ldrh	r3, [r3, #8]
 800cafa:	2b00      	cmp	r3, #0
 800cafc:	d001      	beq.n	800cb02 <find_volume+0x39a>
 800cafe:	230d      	movs	r3, #13
 800cb00:	e0ab      	b.n	800cc5a <find_volume+0x4f2>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800cb02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cb04:	3338      	adds	r3, #56	; 0x38
 800cb06:	332c      	adds	r3, #44	; 0x2c
 800cb08:	4618      	mov	r0, r3
 800cb0a:	f7fd ffc5 	bl	800aa98 <ld_dword>
 800cb0e:	4602      	mov	r2, r0
 800cb10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cb12:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800cb14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cb16:	69db      	ldr	r3, [r3, #28]
 800cb18:	009b      	lsls	r3, r3, #2
 800cb1a:	647b      	str	r3, [r7, #68]	; 0x44
 800cb1c:	e01f      	b.n	800cb5e <find_volume+0x3f6>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800cb1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cb20:	891b      	ldrh	r3, [r3, #8]
 800cb22:	2b00      	cmp	r3, #0
 800cb24:	d101      	bne.n	800cb2a <find_volume+0x3c2>
 800cb26:	230d      	movs	r3, #13
 800cb28:	e097      	b.n	800cc5a <find_volume+0x4f2>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800cb2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cb2c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800cb2e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cb30:	441a      	add	r2, r3
 800cb32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cb34:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800cb36:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800cb3a:	2b02      	cmp	r3, #2
 800cb3c:	d103      	bne.n	800cb46 <find_volume+0x3de>
 800cb3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cb40:	69db      	ldr	r3, [r3, #28]
 800cb42:	005b      	lsls	r3, r3, #1
 800cb44:	e00a      	b.n	800cb5c <find_volume+0x3f4>
 800cb46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cb48:	69da      	ldr	r2, [r3, #28]
 800cb4a:	4613      	mov	r3, r2
 800cb4c:	005b      	lsls	r3, r3, #1
 800cb4e:	4413      	add	r3, r2
 800cb50:	085a      	lsrs	r2, r3, #1
 800cb52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cb54:	69db      	ldr	r3, [r3, #28]
 800cb56:	f003 0301 	and.w	r3, r3, #1
 800cb5a:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800cb5c:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800cb5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cb60:	6a1a      	ldr	r2, [r3, #32]
 800cb62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cb64:	899b      	ldrh	r3, [r3, #12]
 800cb66:	4619      	mov	r1, r3
 800cb68:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800cb6a:	440b      	add	r3, r1
 800cb6c:	3b01      	subs	r3, #1
 800cb6e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800cb70:	8989      	ldrh	r1, [r1, #12]
 800cb72:	fbb3 f3f1 	udiv	r3, r3, r1
 800cb76:	429a      	cmp	r2, r3
 800cb78:	d201      	bcs.n	800cb7e <find_volume+0x416>
 800cb7a:	230d      	movs	r3, #13
 800cb7c:	e06d      	b.n	800cc5a <find_volume+0x4f2>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800cb7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cb80:	f04f 32ff 	mov.w	r2, #4294967295
 800cb84:	619a      	str	r2, [r3, #24]
 800cb86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cb88:	699a      	ldr	r2, [r3, #24]
 800cb8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cb8c:	615a      	str	r2, [r3, #20]
		fs->fsi_flag = 0x80;
 800cb8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cb90:	2280      	movs	r2, #128	; 0x80
 800cb92:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800cb94:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800cb98:	2b03      	cmp	r3, #3
 800cb9a:	d149      	bne.n	800cc30 <find_volume+0x4c8>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800cb9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cb9e:	3338      	adds	r3, #56	; 0x38
 800cba0:	3330      	adds	r3, #48	; 0x30
 800cba2:	4618      	mov	r0, r3
 800cba4:	f7fd ff60 	bl	800aa68 <ld_word>
 800cba8:	4603      	mov	r3, r0
 800cbaa:	2b01      	cmp	r3, #1
 800cbac:	d140      	bne.n	800cc30 <find_volume+0x4c8>
			&& move_window(fs, bsect + 1) == FR_OK)
 800cbae:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800cbb0:	3301      	adds	r3, #1
 800cbb2:	4619      	mov	r1, r3
 800cbb4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800cbb6:	f7fe fa07 	bl	800afc8 <move_window>
 800cbba:	4603      	mov	r3, r0
 800cbbc:	2b00      	cmp	r3, #0
 800cbbe:	d137      	bne.n	800cc30 <find_volume+0x4c8>
		{
			fs->fsi_flag = 0;
 800cbc0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cbc2:	2200      	movs	r2, #0
 800cbc4:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800cbc6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cbc8:	3338      	adds	r3, #56	; 0x38
 800cbca:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800cbce:	4618      	mov	r0, r3
 800cbd0:	f7fd ff4a 	bl	800aa68 <ld_word>
 800cbd4:	4603      	mov	r3, r0
 800cbd6:	461a      	mov	r2, r3
 800cbd8:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800cbdc:	429a      	cmp	r2, r3
 800cbde:	d127      	bne.n	800cc30 <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800cbe0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cbe2:	3338      	adds	r3, #56	; 0x38
 800cbe4:	4618      	mov	r0, r3
 800cbe6:	f7fd ff57 	bl	800aa98 <ld_dword>
 800cbea:	4603      	mov	r3, r0
 800cbec:	4a1d      	ldr	r2, [pc, #116]	; (800cc64 <find_volume+0x4fc>)
 800cbee:	4293      	cmp	r3, r2
 800cbf0:	d11e      	bne.n	800cc30 <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800cbf2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cbf4:	3338      	adds	r3, #56	; 0x38
 800cbf6:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800cbfa:	4618      	mov	r0, r3
 800cbfc:	f7fd ff4c 	bl	800aa98 <ld_dword>
 800cc00:	4603      	mov	r3, r0
 800cc02:	4a19      	ldr	r2, [pc, #100]	; (800cc68 <find_volume+0x500>)
 800cc04:	4293      	cmp	r3, r2
 800cc06:	d113      	bne.n	800cc30 <find_volume+0x4c8>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800cc08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc0a:	3338      	adds	r3, #56	; 0x38
 800cc0c:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 800cc10:	4618      	mov	r0, r3
 800cc12:	f7fd ff41 	bl	800aa98 <ld_dword>
 800cc16:	4602      	mov	r2, r0
 800cc18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc1a:	619a      	str	r2, [r3, #24]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800cc1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc1e:	3338      	adds	r3, #56	; 0x38
 800cc20:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 800cc24:	4618      	mov	r0, r3
 800cc26:	f7fd ff37 	bl	800aa98 <ld_dword>
 800cc2a:	4602      	mov	r2, r0
 800cc2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc2e:	615a      	str	r2, [r3, #20]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800cc30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc32:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 800cc36:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800cc38:	4b0c      	ldr	r3, [pc, #48]	; (800cc6c <find_volume+0x504>)
 800cc3a:	881b      	ldrh	r3, [r3, #0]
 800cc3c:	3301      	adds	r3, #1
 800cc3e:	b29a      	uxth	r2, r3
 800cc40:	4b0a      	ldr	r3, [pc, #40]	; (800cc6c <find_volume+0x504>)
 800cc42:	801a      	strh	r2, [r3, #0]
 800cc44:	4b09      	ldr	r3, [pc, #36]	; (800cc6c <find_volume+0x504>)
 800cc46:	881a      	ldrh	r2, [r3, #0]
 800cc48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc4a:	80da      	strh	r2, [r3, #6]
#if _USE_LFN == 1
	fs->lfnbuf = LfnBuf;	/* Static LFN working buffer */
 800cc4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc4e:	4a08      	ldr	r2, [pc, #32]	; (800cc70 <find_volume+0x508>)
 800cc50:	611a      	str	r2, [r3, #16]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800cc52:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800cc54:	f7fe f950 	bl	800aef8 <clear_lock>
#endif
	return FR_OK;
 800cc58:	2300      	movs	r3, #0
}
 800cc5a:	4618      	mov	r0, r3
 800cc5c:	3758      	adds	r7, #88	; 0x58
 800cc5e:	46bd      	mov	sp, r7
 800cc60:	bd80      	pop	{r7, pc}
 800cc62:	bf00      	nop
 800cc64:	41615252 	.word	0x41615252
 800cc68:	61417272 	.word	0x61417272
 800cc6c:	20016e8c 	.word	0x20016e8c
 800cc70:	20016eb0 	.word	0x20016eb0

0800cc74 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800cc74:	b580      	push	{r7, lr}
 800cc76:	b084      	sub	sp, #16
 800cc78:	af00      	add	r7, sp, #0
 800cc7a:	6078      	str	r0, [r7, #4]
 800cc7c:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800cc7e:	2309      	movs	r3, #9
 800cc80:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800cc82:	687b      	ldr	r3, [r7, #4]
 800cc84:	2b00      	cmp	r3, #0
 800cc86:	d01c      	beq.n	800ccc2 <validate+0x4e>
 800cc88:	687b      	ldr	r3, [r7, #4]
 800cc8a:	681b      	ldr	r3, [r3, #0]
 800cc8c:	2b00      	cmp	r3, #0
 800cc8e:	d018      	beq.n	800ccc2 <validate+0x4e>
 800cc90:	687b      	ldr	r3, [r7, #4]
 800cc92:	681b      	ldr	r3, [r3, #0]
 800cc94:	781b      	ldrb	r3, [r3, #0]
 800cc96:	2b00      	cmp	r3, #0
 800cc98:	d013      	beq.n	800ccc2 <validate+0x4e>
 800cc9a:	687b      	ldr	r3, [r7, #4]
 800cc9c:	889a      	ldrh	r2, [r3, #4]
 800cc9e:	687b      	ldr	r3, [r7, #4]
 800cca0:	681b      	ldr	r3, [r3, #0]
 800cca2:	88db      	ldrh	r3, [r3, #6]
 800cca4:	429a      	cmp	r2, r3
 800cca6:	d10c      	bne.n	800ccc2 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800cca8:	687b      	ldr	r3, [r7, #4]
 800ccaa:	681b      	ldr	r3, [r3, #0]
 800ccac:	785b      	ldrb	r3, [r3, #1]
 800ccae:	4618      	mov	r0, r3
 800ccb0:	f7fd fe3c 	bl	800a92c <disk_status>
 800ccb4:	4603      	mov	r3, r0
 800ccb6:	f003 0301 	and.w	r3, r3, #1
 800ccba:	2b00      	cmp	r3, #0
 800ccbc:	d101      	bne.n	800ccc2 <validate+0x4e>
			res = FR_OK;
 800ccbe:	2300      	movs	r3, #0
 800ccc0:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800ccc2:	7bfb      	ldrb	r3, [r7, #15]
 800ccc4:	2b00      	cmp	r3, #0
 800ccc6:	d102      	bne.n	800ccce <validate+0x5a>
 800ccc8:	687b      	ldr	r3, [r7, #4]
 800ccca:	681b      	ldr	r3, [r3, #0]
 800cccc:	e000      	b.n	800ccd0 <validate+0x5c>
 800ccce:	2300      	movs	r3, #0
 800ccd0:	683a      	ldr	r2, [r7, #0]
 800ccd2:	6013      	str	r3, [r2, #0]
	return res;
 800ccd4:	7bfb      	ldrb	r3, [r7, #15]
}
 800ccd6:	4618      	mov	r0, r3
 800ccd8:	3710      	adds	r7, #16
 800ccda:	46bd      	mov	sp, r7
 800ccdc:	bd80      	pop	{r7, pc}
	...

0800cce0 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800cce0:	b580      	push	{r7, lr}
 800cce2:	b088      	sub	sp, #32
 800cce4:	af00      	add	r7, sp, #0
 800cce6:	60f8      	str	r0, [r7, #12]
 800cce8:	60b9      	str	r1, [r7, #8]
 800ccea:	4613      	mov	r3, r2
 800ccec:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800ccee:	68bb      	ldr	r3, [r7, #8]
 800ccf0:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800ccf2:	f107 0310 	add.w	r3, r7, #16
 800ccf6:	4618      	mov	r0, r3
 800ccf8:	f7ff fc9c 	bl	800c634 <get_ldnumber>
 800ccfc:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800ccfe:	69fb      	ldr	r3, [r7, #28]
 800cd00:	2b00      	cmp	r3, #0
 800cd02:	da01      	bge.n	800cd08 <f_mount+0x28>
 800cd04:	230b      	movs	r3, #11
 800cd06:	e02b      	b.n	800cd60 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800cd08:	4a17      	ldr	r2, [pc, #92]	; (800cd68 <f_mount+0x88>)
 800cd0a:	69fb      	ldr	r3, [r7, #28]
 800cd0c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cd10:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800cd12:	69bb      	ldr	r3, [r7, #24]
 800cd14:	2b00      	cmp	r3, #0
 800cd16:	d005      	beq.n	800cd24 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800cd18:	69b8      	ldr	r0, [r7, #24]
 800cd1a:	f7fe f8ed 	bl	800aef8 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800cd1e:	69bb      	ldr	r3, [r7, #24]
 800cd20:	2200      	movs	r2, #0
 800cd22:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800cd24:	68fb      	ldr	r3, [r7, #12]
 800cd26:	2b00      	cmp	r3, #0
 800cd28:	d002      	beq.n	800cd30 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 800cd2a:	68fb      	ldr	r3, [r7, #12]
 800cd2c:	2200      	movs	r2, #0
 800cd2e:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800cd30:	68fa      	ldr	r2, [r7, #12]
 800cd32:	490d      	ldr	r1, [pc, #52]	; (800cd68 <f_mount+0x88>)
 800cd34:	69fb      	ldr	r3, [r7, #28]
 800cd36:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800cd3a:	68fb      	ldr	r3, [r7, #12]
 800cd3c:	2b00      	cmp	r3, #0
 800cd3e:	d002      	beq.n	800cd46 <f_mount+0x66>
 800cd40:	79fb      	ldrb	r3, [r7, #7]
 800cd42:	2b01      	cmp	r3, #1
 800cd44:	d001      	beq.n	800cd4a <f_mount+0x6a>
 800cd46:	2300      	movs	r3, #0
 800cd48:	e00a      	b.n	800cd60 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800cd4a:	f107 010c 	add.w	r1, r7, #12
 800cd4e:	f107 0308 	add.w	r3, r7, #8
 800cd52:	2200      	movs	r2, #0
 800cd54:	4618      	mov	r0, r3
 800cd56:	f7ff fd07 	bl	800c768 <find_volume>
 800cd5a:	4603      	mov	r3, r0
 800cd5c:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800cd5e:	7dfb      	ldrb	r3, [r7, #23]
}
 800cd60:	4618      	mov	r0, r3
 800cd62:	3720      	adds	r7, #32
 800cd64:	46bd      	mov	sp, r7
 800cd66:	bd80      	pop	{r7, pc}
 800cd68:	20016e88 	.word	0x20016e88

0800cd6c <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800cd6c:	b580      	push	{r7, lr}
 800cd6e:	b09a      	sub	sp, #104	; 0x68
 800cd70:	af00      	add	r7, sp, #0
 800cd72:	60f8      	str	r0, [r7, #12]
 800cd74:	60b9      	str	r1, [r7, #8]
 800cd76:	4613      	mov	r3, r2
 800cd78:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800cd7a:	68fb      	ldr	r3, [r7, #12]
 800cd7c:	2b00      	cmp	r3, #0
 800cd7e:	d101      	bne.n	800cd84 <f_open+0x18>
 800cd80:	2309      	movs	r3, #9
 800cd82:	e1bb      	b.n	800d0fc <f_open+0x390>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800cd84:	79fb      	ldrb	r3, [r7, #7]
 800cd86:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800cd8a:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 800cd8c:	79fa      	ldrb	r2, [r7, #7]
 800cd8e:	f107 0114 	add.w	r1, r7, #20
 800cd92:	f107 0308 	add.w	r3, r7, #8
 800cd96:	4618      	mov	r0, r3
 800cd98:	f7ff fce6 	bl	800c768 <find_volume>
 800cd9c:	4603      	mov	r3, r0
 800cd9e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	if (res == FR_OK) {
 800cda2:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800cda6:	2b00      	cmp	r3, #0
 800cda8:	f040 819f 	bne.w	800d0ea <f_open+0x37e>
		dj.obj.fs = fs;
 800cdac:	697b      	ldr	r3, [r7, #20]
 800cdae:	61bb      	str	r3, [r7, #24]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800cdb0:	68ba      	ldr	r2, [r7, #8]
 800cdb2:	f107 0318 	add.w	r3, r7, #24
 800cdb6:	4611      	mov	r1, r2
 800cdb8:	4618      	mov	r0, r3
 800cdba:	f7ff fbc5 	bl	800c548 <follow_path>
 800cdbe:	4603      	mov	r3, r0
 800cdc0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800cdc4:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800cdc8:	2b00      	cmp	r3, #0
 800cdca:	d11a      	bne.n	800ce02 <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800cdcc:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800cdd0:	b25b      	sxtb	r3, r3
 800cdd2:	2b00      	cmp	r3, #0
 800cdd4:	da03      	bge.n	800cdde <f_open+0x72>
				res = FR_INVALID_NAME;
 800cdd6:	2306      	movs	r3, #6
 800cdd8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800cddc:	e011      	b.n	800ce02 <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800cdde:	79fb      	ldrb	r3, [r7, #7]
 800cde0:	f023 0301 	bic.w	r3, r3, #1
 800cde4:	2b00      	cmp	r3, #0
 800cde6:	bf14      	ite	ne
 800cde8:	2301      	movne	r3, #1
 800cdea:	2300      	moveq	r3, #0
 800cdec:	b2db      	uxtb	r3, r3
 800cdee:	461a      	mov	r2, r3
 800cdf0:	f107 0318 	add.w	r3, r7, #24
 800cdf4:	4611      	mov	r1, r2
 800cdf6:	4618      	mov	r0, r3
 800cdf8:	f7fd ff36 	bl	800ac68 <chk_lock>
 800cdfc:	4603      	mov	r3, r0
 800cdfe:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800ce02:	79fb      	ldrb	r3, [r7, #7]
 800ce04:	f003 031c 	and.w	r3, r3, #28
 800ce08:	2b00      	cmp	r3, #0
 800ce0a:	d07f      	beq.n	800cf0c <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 800ce0c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800ce10:	2b00      	cmp	r3, #0
 800ce12:	d017      	beq.n	800ce44 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800ce14:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800ce18:	2b04      	cmp	r3, #4
 800ce1a:	d10e      	bne.n	800ce3a <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800ce1c:	f7fd ff80 	bl	800ad20 <enq_lock>
 800ce20:	4603      	mov	r3, r0
 800ce22:	2b00      	cmp	r3, #0
 800ce24:	d006      	beq.n	800ce34 <f_open+0xc8>
 800ce26:	f107 0318 	add.w	r3, r7, #24
 800ce2a:	4618      	mov	r0, r3
 800ce2c:	f7ff f8dc 	bl	800bfe8 <dir_register>
 800ce30:	4603      	mov	r3, r0
 800ce32:	e000      	b.n	800ce36 <f_open+0xca>
 800ce34:	2312      	movs	r3, #18
 800ce36:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800ce3a:	79fb      	ldrb	r3, [r7, #7]
 800ce3c:	f043 0308 	orr.w	r3, r3, #8
 800ce40:	71fb      	strb	r3, [r7, #7]
 800ce42:	e010      	b.n	800ce66 <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800ce44:	7fbb      	ldrb	r3, [r7, #30]
 800ce46:	f003 0311 	and.w	r3, r3, #17
 800ce4a:	2b00      	cmp	r3, #0
 800ce4c:	d003      	beq.n	800ce56 <f_open+0xea>
					res = FR_DENIED;
 800ce4e:	2307      	movs	r3, #7
 800ce50:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800ce54:	e007      	b.n	800ce66 <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800ce56:	79fb      	ldrb	r3, [r7, #7]
 800ce58:	f003 0304 	and.w	r3, r3, #4
 800ce5c:	2b00      	cmp	r3, #0
 800ce5e:	d002      	beq.n	800ce66 <f_open+0xfa>
 800ce60:	2308      	movs	r3, #8
 800ce62:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800ce66:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800ce6a:	2b00      	cmp	r3, #0
 800ce6c:	d168      	bne.n	800cf40 <f_open+0x1d4>
 800ce6e:	79fb      	ldrb	r3, [r7, #7]
 800ce70:	f003 0308 	and.w	r3, r3, #8
 800ce74:	2b00      	cmp	r3, #0
 800ce76:	d063      	beq.n	800cf40 <f_open+0x1d4>
				dw = GET_FATTIME();
 800ce78:	f7fd fcfa 	bl	800a870 <get_fattime>
 800ce7c:	65b8      	str	r0, [r7, #88]	; 0x58
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800ce7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ce80:	330e      	adds	r3, #14
 800ce82:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800ce84:	4618      	mov	r0, r3
 800ce86:	f7fd fe45 	bl	800ab14 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800ce8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ce8c:	3316      	adds	r3, #22
 800ce8e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800ce90:	4618      	mov	r0, r3
 800ce92:	f7fd fe3f 	bl	800ab14 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800ce96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ce98:	330b      	adds	r3, #11
 800ce9a:	2220      	movs	r2, #32
 800ce9c:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800ce9e:	697b      	ldr	r3, [r7, #20]
 800cea0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800cea2:	4611      	mov	r1, r2
 800cea4:	4618      	mov	r0, r3
 800cea6:	f7fe fe17 	bl	800bad8 <ld_clust>
 800ceaa:	6578      	str	r0, [r7, #84]	; 0x54
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800ceac:	697b      	ldr	r3, [r7, #20]
 800ceae:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800ceb0:	2200      	movs	r2, #0
 800ceb2:	4618      	mov	r0, r3
 800ceb4:	f7fe fe2f 	bl	800bb16 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800ceb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ceba:	331c      	adds	r3, #28
 800cebc:	2100      	movs	r1, #0
 800cebe:	4618      	mov	r0, r3
 800cec0:	f7fd fe28 	bl	800ab14 <st_dword>
					fs->wflag = 1;
 800cec4:	697b      	ldr	r3, [r7, #20]
 800cec6:	2201      	movs	r2, #1
 800cec8:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800ceca:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800cecc:	2b00      	cmp	r3, #0
 800cece:	d037      	beq.n	800cf40 <f_open+0x1d4>
						dw = fs->winsect;
 800ced0:	697b      	ldr	r3, [r7, #20]
 800ced2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ced4:	65bb      	str	r3, [r7, #88]	; 0x58
						res = remove_chain(&dj.obj, cl, 0);
 800ced6:	f107 0318 	add.w	r3, r7, #24
 800ceda:	2200      	movs	r2, #0
 800cedc:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800cede:	4618      	mov	r0, r3
 800cee0:	f7fe fb1f 	bl	800b522 <remove_chain>
 800cee4:	4603      	mov	r3, r0
 800cee6:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
						if (res == FR_OK) {
 800ceea:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800ceee:	2b00      	cmp	r3, #0
 800cef0:	d126      	bne.n	800cf40 <f_open+0x1d4>
							res = move_window(fs, dw);
 800cef2:	697b      	ldr	r3, [r7, #20]
 800cef4:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800cef6:	4618      	mov	r0, r3
 800cef8:	f7fe f866 	bl	800afc8 <move_window>
 800cefc:	4603      	mov	r3, r0
 800cefe:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800cf02:	697b      	ldr	r3, [r7, #20]
 800cf04:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800cf06:	3a01      	subs	r2, #1
 800cf08:	615a      	str	r2, [r3, #20]
 800cf0a:	e019      	b.n	800cf40 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800cf0c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800cf10:	2b00      	cmp	r3, #0
 800cf12:	d115      	bne.n	800cf40 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800cf14:	7fbb      	ldrb	r3, [r7, #30]
 800cf16:	f003 0310 	and.w	r3, r3, #16
 800cf1a:	2b00      	cmp	r3, #0
 800cf1c:	d003      	beq.n	800cf26 <f_open+0x1ba>
					res = FR_NO_FILE;
 800cf1e:	2304      	movs	r3, #4
 800cf20:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800cf24:	e00c      	b.n	800cf40 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800cf26:	79fb      	ldrb	r3, [r7, #7]
 800cf28:	f003 0302 	and.w	r3, r3, #2
 800cf2c:	2b00      	cmp	r3, #0
 800cf2e:	d007      	beq.n	800cf40 <f_open+0x1d4>
 800cf30:	7fbb      	ldrb	r3, [r7, #30]
 800cf32:	f003 0301 	and.w	r3, r3, #1
 800cf36:	2b00      	cmp	r3, #0
 800cf38:	d002      	beq.n	800cf40 <f_open+0x1d4>
						res = FR_DENIED;
 800cf3a:	2307      	movs	r3, #7
 800cf3c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					}
				}
			}
		}
		if (res == FR_OK) {
 800cf40:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800cf44:	2b00      	cmp	r3, #0
 800cf46:	d128      	bne.n	800cf9a <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800cf48:	79fb      	ldrb	r3, [r7, #7]
 800cf4a:	f003 0308 	and.w	r3, r3, #8
 800cf4e:	2b00      	cmp	r3, #0
 800cf50:	d003      	beq.n	800cf5a <f_open+0x1ee>
				mode |= FA_MODIFIED;
 800cf52:	79fb      	ldrb	r3, [r7, #7]
 800cf54:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cf58:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800cf5a:	697b      	ldr	r3, [r7, #20]
 800cf5c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800cf5e:	68fb      	ldr	r3, [r7, #12]
 800cf60:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 800cf62:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800cf64:	68fb      	ldr	r3, [r7, #12]
 800cf66:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800cf68:	79fb      	ldrb	r3, [r7, #7]
 800cf6a:	f023 0301 	bic.w	r3, r3, #1
 800cf6e:	2b00      	cmp	r3, #0
 800cf70:	bf14      	ite	ne
 800cf72:	2301      	movne	r3, #1
 800cf74:	2300      	moveq	r3, #0
 800cf76:	b2db      	uxtb	r3, r3
 800cf78:	461a      	mov	r2, r3
 800cf7a:	f107 0318 	add.w	r3, r7, #24
 800cf7e:	4611      	mov	r1, r2
 800cf80:	4618      	mov	r0, r3
 800cf82:	f7fd feef 	bl	800ad64 <inc_lock>
 800cf86:	4602      	mov	r2, r0
 800cf88:	68fb      	ldr	r3, [r7, #12]
 800cf8a:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800cf8c:	68fb      	ldr	r3, [r7, #12]
 800cf8e:	691b      	ldr	r3, [r3, #16]
 800cf90:	2b00      	cmp	r3, #0
 800cf92:	d102      	bne.n	800cf9a <f_open+0x22e>
 800cf94:	2302      	movs	r3, #2
 800cf96:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
		}
#endif

		if (res == FR_OK) {
 800cf9a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800cf9e:	2b00      	cmp	r3, #0
 800cfa0:	f040 80a3 	bne.w	800d0ea <f_open+0x37e>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800cfa4:	697b      	ldr	r3, [r7, #20]
 800cfa6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800cfa8:	4611      	mov	r1, r2
 800cfaa:	4618      	mov	r0, r3
 800cfac:	f7fe fd94 	bl	800bad8 <ld_clust>
 800cfb0:	4602      	mov	r2, r0
 800cfb2:	68fb      	ldr	r3, [r7, #12]
 800cfb4:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800cfb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cfb8:	331c      	adds	r3, #28
 800cfba:	4618      	mov	r0, r3
 800cfbc:	f7fd fd6c 	bl	800aa98 <ld_dword>
 800cfc0:	4602      	mov	r2, r0
 800cfc2:	68fb      	ldr	r3, [r7, #12]
 800cfc4:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800cfc6:	68fb      	ldr	r3, [r7, #12]
 800cfc8:	2200      	movs	r2, #0
 800cfca:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800cfcc:	697a      	ldr	r2, [r7, #20]
 800cfce:	68fb      	ldr	r3, [r7, #12]
 800cfd0:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800cfd2:	697b      	ldr	r3, [r7, #20]
 800cfd4:	88da      	ldrh	r2, [r3, #6]
 800cfd6:	68fb      	ldr	r3, [r7, #12]
 800cfd8:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800cfda:	68fb      	ldr	r3, [r7, #12]
 800cfdc:	79fa      	ldrb	r2, [r7, #7]
 800cfde:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 800cfe0:	68fb      	ldr	r3, [r7, #12]
 800cfe2:	2200      	movs	r2, #0
 800cfe4:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800cfe6:	68fb      	ldr	r3, [r7, #12]
 800cfe8:	2200      	movs	r2, #0
 800cfea:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800cfec:	68fb      	ldr	r3, [r7, #12]
 800cfee:	2200      	movs	r2, #0
 800cff0:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800cff2:	68fb      	ldr	r3, [r7, #12]
 800cff4:	3330      	adds	r3, #48	; 0x30
 800cff6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800cffa:	2100      	movs	r1, #0
 800cffc:	4618      	mov	r0, r3
 800cffe:	f7fd fdd6 	bl	800abae <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800d002:	79fb      	ldrb	r3, [r7, #7]
 800d004:	f003 0320 	and.w	r3, r3, #32
 800d008:	2b00      	cmp	r3, #0
 800d00a:	d06e      	beq.n	800d0ea <f_open+0x37e>
 800d00c:	68fb      	ldr	r3, [r7, #12]
 800d00e:	68db      	ldr	r3, [r3, #12]
 800d010:	2b00      	cmp	r3, #0
 800d012:	d06a      	beq.n	800d0ea <f_open+0x37e>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800d014:	68fb      	ldr	r3, [r7, #12]
 800d016:	68da      	ldr	r2, [r3, #12]
 800d018:	68fb      	ldr	r3, [r7, #12]
 800d01a:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800d01c:	697b      	ldr	r3, [r7, #20]
 800d01e:	895b      	ldrh	r3, [r3, #10]
 800d020:	461a      	mov	r2, r3
 800d022:	697b      	ldr	r3, [r7, #20]
 800d024:	899b      	ldrh	r3, [r3, #12]
 800d026:	fb02 f303 	mul.w	r3, r2, r3
 800d02a:	653b      	str	r3, [r7, #80]	; 0x50
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800d02c:	68fb      	ldr	r3, [r7, #12]
 800d02e:	689b      	ldr	r3, [r3, #8]
 800d030:	663b      	str	r3, [r7, #96]	; 0x60
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800d032:	68fb      	ldr	r3, [r7, #12]
 800d034:	68db      	ldr	r3, [r3, #12]
 800d036:	65fb      	str	r3, [r7, #92]	; 0x5c
 800d038:	e016      	b.n	800d068 <f_open+0x2fc>
					clst = get_fat(&fp->obj, clst);
 800d03a:	68fb      	ldr	r3, [r7, #12]
 800d03c:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800d03e:	4618      	mov	r0, r3
 800d040:	f7fe f87f 	bl	800b142 <get_fat>
 800d044:	6638      	str	r0, [r7, #96]	; 0x60
					if (clst <= 1) res = FR_INT_ERR;
 800d046:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800d048:	2b01      	cmp	r3, #1
 800d04a:	d802      	bhi.n	800d052 <f_open+0x2e6>
 800d04c:	2302      	movs	r3, #2
 800d04e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800d052:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800d054:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d058:	d102      	bne.n	800d060 <f_open+0x2f4>
 800d05a:	2301      	movs	r3, #1
 800d05c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800d060:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800d062:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d064:	1ad3      	subs	r3, r2, r3
 800d066:	65fb      	str	r3, [r7, #92]	; 0x5c
 800d068:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800d06c:	2b00      	cmp	r3, #0
 800d06e:	d103      	bne.n	800d078 <f_open+0x30c>
 800d070:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800d072:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d074:	429a      	cmp	r2, r3
 800d076:	d8e0      	bhi.n	800d03a <f_open+0x2ce>
				}
				fp->clust = clst;
 800d078:	68fb      	ldr	r3, [r7, #12]
 800d07a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800d07c:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800d07e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800d082:	2b00      	cmp	r3, #0
 800d084:	d131      	bne.n	800d0ea <f_open+0x37e>
 800d086:	697b      	ldr	r3, [r7, #20]
 800d088:	899b      	ldrh	r3, [r3, #12]
 800d08a:	461a      	mov	r2, r3
 800d08c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d08e:	fbb3 f1f2 	udiv	r1, r3, r2
 800d092:	fb01 f202 	mul.w	r2, r1, r2
 800d096:	1a9b      	subs	r3, r3, r2
 800d098:	2b00      	cmp	r3, #0
 800d09a:	d026      	beq.n	800d0ea <f_open+0x37e>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800d09c:	697b      	ldr	r3, [r7, #20]
 800d09e:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800d0a0:	4618      	mov	r0, r3
 800d0a2:	f7fe f82f 	bl	800b104 <clust2sect>
 800d0a6:	64f8      	str	r0, [r7, #76]	; 0x4c
 800d0a8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d0aa:	2b00      	cmp	r3, #0
 800d0ac:	d103      	bne.n	800d0b6 <f_open+0x34a>
						res = FR_INT_ERR;
 800d0ae:	2302      	movs	r3, #2
 800d0b0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800d0b4:	e019      	b.n	800d0ea <f_open+0x37e>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800d0b6:	697b      	ldr	r3, [r7, #20]
 800d0b8:	899b      	ldrh	r3, [r3, #12]
 800d0ba:	461a      	mov	r2, r3
 800d0bc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d0be:	fbb3 f2f2 	udiv	r2, r3, r2
 800d0c2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d0c4:	441a      	add	r2, r3
 800d0c6:	68fb      	ldr	r3, [r7, #12]
 800d0c8:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800d0ca:	697b      	ldr	r3, [r7, #20]
 800d0cc:	7858      	ldrb	r0, [r3, #1]
 800d0ce:	68fb      	ldr	r3, [r7, #12]
 800d0d0:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800d0d4:	68fb      	ldr	r3, [r7, #12]
 800d0d6:	6a1a      	ldr	r2, [r3, #32]
 800d0d8:	2301      	movs	r3, #1
 800d0da:	f7fd fc67 	bl	800a9ac <disk_read>
 800d0de:	4603      	mov	r3, r0
 800d0e0:	2b00      	cmp	r3, #0
 800d0e2:	d002      	beq.n	800d0ea <f_open+0x37e>
 800d0e4:	2301      	movs	r3, #1
 800d0e6:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800d0ea:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800d0ee:	2b00      	cmp	r3, #0
 800d0f0:	d002      	beq.n	800d0f8 <f_open+0x38c>
 800d0f2:	68fb      	ldr	r3, [r7, #12]
 800d0f4:	2200      	movs	r2, #0
 800d0f6:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800d0f8:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 800d0fc:	4618      	mov	r0, r3
 800d0fe:	3768      	adds	r7, #104	; 0x68
 800d100:	46bd      	mov	sp, r7
 800d102:	bd80      	pop	{r7, pc}

0800d104 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 800d104:	b580      	push	{r7, lr}
 800d106:	b08c      	sub	sp, #48	; 0x30
 800d108:	af00      	add	r7, sp, #0
 800d10a:	60f8      	str	r0, [r7, #12]
 800d10c:	60b9      	str	r1, [r7, #8]
 800d10e:	607a      	str	r2, [r7, #4]
 800d110:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 800d112:	68bb      	ldr	r3, [r7, #8]
 800d114:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 800d116:	683b      	ldr	r3, [r7, #0]
 800d118:	2200      	movs	r2, #0
 800d11a:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 800d11c:	68fb      	ldr	r3, [r7, #12]
 800d11e:	f107 0210 	add.w	r2, r7, #16
 800d122:	4611      	mov	r1, r2
 800d124:	4618      	mov	r0, r3
 800d126:	f7ff fda5 	bl	800cc74 <validate>
 800d12a:	4603      	mov	r3, r0
 800d12c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800d130:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800d134:	2b00      	cmp	r3, #0
 800d136:	d107      	bne.n	800d148 <f_write+0x44>
 800d138:	68fb      	ldr	r3, [r7, #12]
 800d13a:	7d5b      	ldrb	r3, [r3, #21]
 800d13c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800d140:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800d144:	2b00      	cmp	r3, #0
 800d146:	d002      	beq.n	800d14e <f_write+0x4a>
 800d148:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800d14c:	e16a      	b.n	800d424 <f_write+0x320>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 800d14e:	68fb      	ldr	r3, [r7, #12]
 800d150:	7d1b      	ldrb	r3, [r3, #20]
 800d152:	f003 0302 	and.w	r3, r3, #2
 800d156:	2b00      	cmp	r3, #0
 800d158:	d101      	bne.n	800d15e <f_write+0x5a>
 800d15a:	2307      	movs	r3, #7
 800d15c:	e162      	b.n	800d424 <f_write+0x320>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 800d15e:	68fb      	ldr	r3, [r7, #12]
 800d160:	699a      	ldr	r2, [r3, #24]
 800d162:	687b      	ldr	r3, [r7, #4]
 800d164:	441a      	add	r2, r3
 800d166:	68fb      	ldr	r3, [r7, #12]
 800d168:	699b      	ldr	r3, [r3, #24]
 800d16a:	429a      	cmp	r2, r3
 800d16c:	f080 814c 	bcs.w	800d408 <f_write+0x304>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 800d170:	68fb      	ldr	r3, [r7, #12]
 800d172:	699b      	ldr	r3, [r3, #24]
 800d174:	43db      	mvns	r3, r3
 800d176:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 800d178:	e146      	b.n	800d408 <f_write+0x304>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 800d17a:	68fb      	ldr	r3, [r7, #12]
 800d17c:	699b      	ldr	r3, [r3, #24]
 800d17e:	693a      	ldr	r2, [r7, #16]
 800d180:	8992      	ldrh	r2, [r2, #12]
 800d182:	fbb3 f1f2 	udiv	r1, r3, r2
 800d186:	fb01 f202 	mul.w	r2, r1, r2
 800d18a:	1a9b      	subs	r3, r3, r2
 800d18c:	2b00      	cmp	r3, #0
 800d18e:	f040 80f1 	bne.w	800d374 <f_write+0x270>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 800d192:	68fb      	ldr	r3, [r7, #12]
 800d194:	699b      	ldr	r3, [r3, #24]
 800d196:	693a      	ldr	r2, [r7, #16]
 800d198:	8992      	ldrh	r2, [r2, #12]
 800d19a:	fbb3 f3f2 	udiv	r3, r3, r2
 800d19e:	693a      	ldr	r2, [r7, #16]
 800d1a0:	8952      	ldrh	r2, [r2, #10]
 800d1a2:	3a01      	subs	r2, #1
 800d1a4:	4013      	ands	r3, r2
 800d1a6:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 800d1a8:	69bb      	ldr	r3, [r7, #24]
 800d1aa:	2b00      	cmp	r3, #0
 800d1ac:	d143      	bne.n	800d236 <f_write+0x132>
				if (fp->fptr == 0) {		/* On the top of the file? */
 800d1ae:	68fb      	ldr	r3, [r7, #12]
 800d1b0:	699b      	ldr	r3, [r3, #24]
 800d1b2:	2b00      	cmp	r3, #0
 800d1b4:	d10c      	bne.n	800d1d0 <f_write+0xcc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 800d1b6:	68fb      	ldr	r3, [r7, #12]
 800d1b8:	689b      	ldr	r3, [r3, #8]
 800d1ba:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 800d1bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d1be:	2b00      	cmp	r3, #0
 800d1c0:	d11a      	bne.n	800d1f8 <f_write+0xf4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 800d1c2:	68fb      	ldr	r3, [r7, #12]
 800d1c4:	2100      	movs	r1, #0
 800d1c6:	4618      	mov	r0, r3
 800d1c8:	f7fe fa10 	bl	800b5ec <create_chain>
 800d1cc:	62b8      	str	r0, [r7, #40]	; 0x28
 800d1ce:	e013      	b.n	800d1f8 <f_write+0xf4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800d1d0:	68fb      	ldr	r3, [r7, #12]
 800d1d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d1d4:	2b00      	cmp	r3, #0
 800d1d6:	d007      	beq.n	800d1e8 <f_write+0xe4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800d1d8:	68fb      	ldr	r3, [r7, #12]
 800d1da:	699b      	ldr	r3, [r3, #24]
 800d1dc:	4619      	mov	r1, r3
 800d1de:	68f8      	ldr	r0, [r7, #12]
 800d1e0:	f7fe fa9c 	bl	800b71c <clmt_clust>
 800d1e4:	62b8      	str	r0, [r7, #40]	; 0x28
 800d1e6:	e007      	b.n	800d1f8 <f_write+0xf4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 800d1e8:	68fa      	ldr	r2, [r7, #12]
 800d1ea:	68fb      	ldr	r3, [r7, #12]
 800d1ec:	69db      	ldr	r3, [r3, #28]
 800d1ee:	4619      	mov	r1, r3
 800d1f0:	4610      	mov	r0, r2
 800d1f2:	f7fe f9fb 	bl	800b5ec <create_chain>
 800d1f6:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800d1f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d1fa:	2b00      	cmp	r3, #0
 800d1fc:	f000 8109 	beq.w	800d412 <f_write+0x30e>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 800d200:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d202:	2b01      	cmp	r3, #1
 800d204:	d104      	bne.n	800d210 <f_write+0x10c>
 800d206:	68fb      	ldr	r3, [r7, #12]
 800d208:	2202      	movs	r2, #2
 800d20a:	755a      	strb	r2, [r3, #21]
 800d20c:	2302      	movs	r3, #2
 800d20e:	e109      	b.n	800d424 <f_write+0x320>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800d210:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d212:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d216:	d104      	bne.n	800d222 <f_write+0x11e>
 800d218:	68fb      	ldr	r3, [r7, #12]
 800d21a:	2201      	movs	r2, #1
 800d21c:	755a      	strb	r2, [r3, #21]
 800d21e:	2301      	movs	r3, #1
 800d220:	e100      	b.n	800d424 <f_write+0x320>
				fp->clust = clst;			/* Update current cluster */
 800d222:	68fb      	ldr	r3, [r7, #12]
 800d224:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d226:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 800d228:	68fb      	ldr	r3, [r7, #12]
 800d22a:	689b      	ldr	r3, [r3, #8]
 800d22c:	2b00      	cmp	r3, #0
 800d22e:	d102      	bne.n	800d236 <f_write+0x132>
 800d230:	68fb      	ldr	r3, [r7, #12]
 800d232:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d234:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 800d236:	68fb      	ldr	r3, [r7, #12]
 800d238:	7d1b      	ldrb	r3, [r3, #20]
 800d23a:	b25b      	sxtb	r3, r3
 800d23c:	2b00      	cmp	r3, #0
 800d23e:	da18      	bge.n	800d272 <f_write+0x16e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800d240:	693b      	ldr	r3, [r7, #16]
 800d242:	7858      	ldrb	r0, [r3, #1]
 800d244:	68fb      	ldr	r3, [r7, #12]
 800d246:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800d24a:	68fb      	ldr	r3, [r7, #12]
 800d24c:	6a1a      	ldr	r2, [r3, #32]
 800d24e:	2301      	movs	r3, #1
 800d250:	f7fd fbcc 	bl	800a9ec <disk_write>
 800d254:	4603      	mov	r3, r0
 800d256:	2b00      	cmp	r3, #0
 800d258:	d004      	beq.n	800d264 <f_write+0x160>
 800d25a:	68fb      	ldr	r3, [r7, #12]
 800d25c:	2201      	movs	r2, #1
 800d25e:	755a      	strb	r2, [r3, #21]
 800d260:	2301      	movs	r3, #1
 800d262:	e0df      	b.n	800d424 <f_write+0x320>
				fp->flag &= (BYTE)~FA_DIRTY;
 800d264:	68fb      	ldr	r3, [r7, #12]
 800d266:	7d1b      	ldrb	r3, [r3, #20]
 800d268:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d26c:	b2da      	uxtb	r2, r3
 800d26e:	68fb      	ldr	r3, [r7, #12]
 800d270:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800d272:	693a      	ldr	r2, [r7, #16]
 800d274:	68fb      	ldr	r3, [r7, #12]
 800d276:	69db      	ldr	r3, [r3, #28]
 800d278:	4619      	mov	r1, r3
 800d27a:	4610      	mov	r0, r2
 800d27c:	f7fd ff42 	bl	800b104 <clust2sect>
 800d280:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800d282:	697b      	ldr	r3, [r7, #20]
 800d284:	2b00      	cmp	r3, #0
 800d286:	d104      	bne.n	800d292 <f_write+0x18e>
 800d288:	68fb      	ldr	r3, [r7, #12]
 800d28a:	2202      	movs	r2, #2
 800d28c:	755a      	strb	r2, [r3, #21]
 800d28e:	2302      	movs	r3, #2
 800d290:	e0c8      	b.n	800d424 <f_write+0x320>
			sect += csect;
 800d292:	697a      	ldr	r2, [r7, #20]
 800d294:	69bb      	ldr	r3, [r7, #24]
 800d296:	4413      	add	r3, r2
 800d298:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 800d29a:	693b      	ldr	r3, [r7, #16]
 800d29c:	899b      	ldrh	r3, [r3, #12]
 800d29e:	461a      	mov	r2, r3
 800d2a0:	687b      	ldr	r3, [r7, #4]
 800d2a2:	fbb3 f3f2 	udiv	r3, r3, r2
 800d2a6:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 800d2a8:	6a3b      	ldr	r3, [r7, #32]
 800d2aa:	2b00      	cmp	r3, #0
 800d2ac:	d043      	beq.n	800d336 <f_write+0x232>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800d2ae:	69ba      	ldr	r2, [r7, #24]
 800d2b0:	6a3b      	ldr	r3, [r7, #32]
 800d2b2:	4413      	add	r3, r2
 800d2b4:	693a      	ldr	r2, [r7, #16]
 800d2b6:	8952      	ldrh	r2, [r2, #10]
 800d2b8:	4293      	cmp	r3, r2
 800d2ba:	d905      	bls.n	800d2c8 <f_write+0x1c4>
					cc = fs->csize - csect;
 800d2bc:	693b      	ldr	r3, [r7, #16]
 800d2be:	895b      	ldrh	r3, [r3, #10]
 800d2c0:	461a      	mov	r2, r3
 800d2c2:	69bb      	ldr	r3, [r7, #24]
 800d2c4:	1ad3      	subs	r3, r2, r3
 800d2c6:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800d2c8:	693b      	ldr	r3, [r7, #16]
 800d2ca:	7858      	ldrb	r0, [r3, #1]
 800d2cc:	6a3b      	ldr	r3, [r7, #32]
 800d2ce:	697a      	ldr	r2, [r7, #20]
 800d2d0:	69f9      	ldr	r1, [r7, #28]
 800d2d2:	f7fd fb8b 	bl	800a9ec <disk_write>
 800d2d6:	4603      	mov	r3, r0
 800d2d8:	2b00      	cmp	r3, #0
 800d2da:	d004      	beq.n	800d2e6 <f_write+0x1e2>
 800d2dc:	68fb      	ldr	r3, [r7, #12]
 800d2de:	2201      	movs	r2, #1
 800d2e0:	755a      	strb	r2, [r3, #21]
 800d2e2:	2301      	movs	r3, #1
 800d2e4:	e09e      	b.n	800d424 <f_write+0x320>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 800d2e6:	68fb      	ldr	r3, [r7, #12]
 800d2e8:	6a1a      	ldr	r2, [r3, #32]
 800d2ea:	697b      	ldr	r3, [r7, #20]
 800d2ec:	1ad3      	subs	r3, r2, r3
 800d2ee:	6a3a      	ldr	r2, [r7, #32]
 800d2f0:	429a      	cmp	r2, r3
 800d2f2:	d918      	bls.n	800d326 <f_write+0x222>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 800d2f4:	68fb      	ldr	r3, [r7, #12]
 800d2f6:	f103 0030 	add.w	r0, r3, #48	; 0x30
 800d2fa:	68fb      	ldr	r3, [r7, #12]
 800d2fc:	6a1a      	ldr	r2, [r3, #32]
 800d2fe:	697b      	ldr	r3, [r7, #20]
 800d300:	1ad3      	subs	r3, r2, r3
 800d302:	693a      	ldr	r2, [r7, #16]
 800d304:	8992      	ldrh	r2, [r2, #12]
 800d306:	fb02 f303 	mul.w	r3, r2, r3
 800d30a:	69fa      	ldr	r2, [r7, #28]
 800d30c:	18d1      	adds	r1, r2, r3
 800d30e:	693b      	ldr	r3, [r7, #16]
 800d310:	899b      	ldrh	r3, [r3, #12]
 800d312:	461a      	mov	r2, r3
 800d314:	f7fd fc2a 	bl	800ab6c <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 800d318:	68fb      	ldr	r3, [r7, #12]
 800d31a:	7d1b      	ldrb	r3, [r3, #20]
 800d31c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d320:	b2da      	uxtb	r2, r3
 800d322:	68fb      	ldr	r3, [r7, #12]
 800d324:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 800d326:	693b      	ldr	r3, [r7, #16]
 800d328:	899b      	ldrh	r3, [r3, #12]
 800d32a:	461a      	mov	r2, r3
 800d32c:	6a3b      	ldr	r3, [r7, #32]
 800d32e:	fb02 f303 	mul.w	r3, r2, r3
 800d332:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 800d334:	e04b      	b.n	800d3ce <f_write+0x2ca>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800d336:	68fb      	ldr	r3, [r7, #12]
 800d338:	6a1b      	ldr	r3, [r3, #32]
 800d33a:	697a      	ldr	r2, [r7, #20]
 800d33c:	429a      	cmp	r2, r3
 800d33e:	d016      	beq.n	800d36e <f_write+0x26a>
				fp->fptr < fp->obj.objsize &&
 800d340:	68fb      	ldr	r3, [r7, #12]
 800d342:	699a      	ldr	r2, [r3, #24]
 800d344:	68fb      	ldr	r3, [r7, #12]
 800d346:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800d348:	429a      	cmp	r2, r3
 800d34a:	d210      	bcs.n	800d36e <f_write+0x26a>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 800d34c:	693b      	ldr	r3, [r7, #16]
 800d34e:	7858      	ldrb	r0, [r3, #1]
 800d350:	68fb      	ldr	r3, [r7, #12]
 800d352:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800d356:	2301      	movs	r3, #1
 800d358:	697a      	ldr	r2, [r7, #20]
 800d35a:	f7fd fb27 	bl	800a9ac <disk_read>
 800d35e:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 800d360:	2b00      	cmp	r3, #0
 800d362:	d004      	beq.n	800d36e <f_write+0x26a>
					ABORT(fs, FR_DISK_ERR);
 800d364:	68fb      	ldr	r3, [r7, #12]
 800d366:	2201      	movs	r2, #1
 800d368:	755a      	strb	r2, [r3, #21]
 800d36a:	2301      	movs	r3, #1
 800d36c:	e05a      	b.n	800d424 <f_write+0x320>
			}
#endif
			fp->sect = sect;
 800d36e:	68fb      	ldr	r3, [r7, #12]
 800d370:	697a      	ldr	r2, [r7, #20]
 800d372:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800d374:	693b      	ldr	r3, [r7, #16]
 800d376:	899b      	ldrh	r3, [r3, #12]
 800d378:	4618      	mov	r0, r3
 800d37a:	68fb      	ldr	r3, [r7, #12]
 800d37c:	699b      	ldr	r3, [r3, #24]
 800d37e:	693a      	ldr	r2, [r7, #16]
 800d380:	8992      	ldrh	r2, [r2, #12]
 800d382:	fbb3 f1f2 	udiv	r1, r3, r2
 800d386:	fb01 f202 	mul.w	r2, r1, r2
 800d38a:	1a9b      	subs	r3, r3, r2
 800d38c:	1ac3      	subs	r3, r0, r3
 800d38e:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 800d390:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d392:	687b      	ldr	r3, [r7, #4]
 800d394:	429a      	cmp	r2, r3
 800d396:	d901      	bls.n	800d39c <f_write+0x298>
 800d398:	687b      	ldr	r3, [r7, #4]
 800d39a:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 800d39c:	68fb      	ldr	r3, [r7, #12]
 800d39e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800d3a2:	68fb      	ldr	r3, [r7, #12]
 800d3a4:	699b      	ldr	r3, [r3, #24]
 800d3a6:	693a      	ldr	r2, [r7, #16]
 800d3a8:	8992      	ldrh	r2, [r2, #12]
 800d3aa:	fbb3 f0f2 	udiv	r0, r3, r2
 800d3ae:	fb00 f202 	mul.w	r2, r0, r2
 800d3b2:	1a9b      	subs	r3, r3, r2
 800d3b4:	440b      	add	r3, r1
 800d3b6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d3b8:	69f9      	ldr	r1, [r7, #28]
 800d3ba:	4618      	mov	r0, r3
 800d3bc:	f7fd fbd6 	bl	800ab6c <mem_cpy>
		fp->flag |= FA_DIRTY;
 800d3c0:	68fb      	ldr	r3, [r7, #12]
 800d3c2:	7d1b      	ldrb	r3, [r3, #20]
 800d3c4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800d3c8:	b2da      	uxtb	r2, r3
 800d3ca:	68fb      	ldr	r3, [r7, #12]
 800d3cc:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 800d3ce:	69fa      	ldr	r2, [r7, #28]
 800d3d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d3d2:	4413      	add	r3, r2
 800d3d4:	61fb      	str	r3, [r7, #28]
 800d3d6:	68fb      	ldr	r3, [r7, #12]
 800d3d8:	699a      	ldr	r2, [r3, #24]
 800d3da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d3dc:	441a      	add	r2, r3
 800d3de:	68fb      	ldr	r3, [r7, #12]
 800d3e0:	619a      	str	r2, [r3, #24]
 800d3e2:	68fb      	ldr	r3, [r7, #12]
 800d3e4:	68da      	ldr	r2, [r3, #12]
 800d3e6:	68fb      	ldr	r3, [r7, #12]
 800d3e8:	699b      	ldr	r3, [r3, #24]
 800d3ea:	429a      	cmp	r2, r3
 800d3ec:	bf38      	it	cc
 800d3ee:	461a      	movcc	r2, r3
 800d3f0:	68fb      	ldr	r3, [r7, #12]
 800d3f2:	60da      	str	r2, [r3, #12]
 800d3f4:	683b      	ldr	r3, [r7, #0]
 800d3f6:	681a      	ldr	r2, [r3, #0]
 800d3f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d3fa:	441a      	add	r2, r3
 800d3fc:	683b      	ldr	r3, [r7, #0]
 800d3fe:	601a      	str	r2, [r3, #0]
 800d400:	687a      	ldr	r2, [r7, #4]
 800d402:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d404:	1ad3      	subs	r3, r2, r3
 800d406:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 800d408:	687b      	ldr	r3, [r7, #4]
 800d40a:	2b00      	cmp	r3, #0
 800d40c:	f47f aeb5 	bne.w	800d17a <f_write+0x76>
 800d410:	e000      	b.n	800d414 <f_write+0x310>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800d412:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 800d414:	68fb      	ldr	r3, [r7, #12]
 800d416:	7d1b      	ldrb	r3, [r3, #20]
 800d418:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d41c:	b2da      	uxtb	r2, r3
 800d41e:	68fb      	ldr	r3, [r7, #12]
 800d420:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 800d422:	2300      	movs	r3, #0
}
 800d424:	4618      	mov	r0, r3
 800d426:	3730      	adds	r7, #48	; 0x30
 800d428:	46bd      	mov	sp, r7
 800d42a:	bd80      	pop	{r7, pc}

0800d42c <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800d42c:	b580      	push	{r7, lr}
 800d42e:	b086      	sub	sp, #24
 800d430:	af00      	add	r7, sp, #0
 800d432:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800d434:	687b      	ldr	r3, [r7, #4]
 800d436:	f107 0208 	add.w	r2, r7, #8
 800d43a:	4611      	mov	r1, r2
 800d43c:	4618      	mov	r0, r3
 800d43e:	f7ff fc19 	bl	800cc74 <validate>
 800d442:	4603      	mov	r3, r0
 800d444:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800d446:	7dfb      	ldrb	r3, [r7, #23]
 800d448:	2b00      	cmp	r3, #0
 800d44a:	d168      	bne.n	800d51e <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800d44c:	687b      	ldr	r3, [r7, #4]
 800d44e:	7d1b      	ldrb	r3, [r3, #20]
 800d450:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d454:	2b00      	cmp	r3, #0
 800d456:	d062      	beq.n	800d51e <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800d458:	687b      	ldr	r3, [r7, #4]
 800d45a:	7d1b      	ldrb	r3, [r3, #20]
 800d45c:	b25b      	sxtb	r3, r3
 800d45e:	2b00      	cmp	r3, #0
 800d460:	da15      	bge.n	800d48e <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800d462:	68bb      	ldr	r3, [r7, #8]
 800d464:	7858      	ldrb	r0, [r3, #1]
 800d466:	687b      	ldr	r3, [r7, #4]
 800d468:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800d46c:	687b      	ldr	r3, [r7, #4]
 800d46e:	6a1a      	ldr	r2, [r3, #32]
 800d470:	2301      	movs	r3, #1
 800d472:	f7fd fabb 	bl	800a9ec <disk_write>
 800d476:	4603      	mov	r3, r0
 800d478:	2b00      	cmp	r3, #0
 800d47a:	d001      	beq.n	800d480 <f_sync+0x54>
 800d47c:	2301      	movs	r3, #1
 800d47e:	e04f      	b.n	800d520 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 800d480:	687b      	ldr	r3, [r7, #4]
 800d482:	7d1b      	ldrb	r3, [r3, #20]
 800d484:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d488:	b2da      	uxtb	r2, r3
 800d48a:	687b      	ldr	r3, [r7, #4]
 800d48c:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800d48e:	f7fd f9ef 	bl	800a870 <get_fattime>
 800d492:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800d494:	68ba      	ldr	r2, [r7, #8]
 800d496:	687b      	ldr	r3, [r7, #4]
 800d498:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d49a:	4619      	mov	r1, r3
 800d49c:	4610      	mov	r0, r2
 800d49e:	f7fd fd93 	bl	800afc8 <move_window>
 800d4a2:	4603      	mov	r3, r0
 800d4a4:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800d4a6:	7dfb      	ldrb	r3, [r7, #23]
 800d4a8:	2b00      	cmp	r3, #0
 800d4aa:	d138      	bne.n	800d51e <f_sync+0xf2>
					dir = fp->dir_ptr;
 800d4ac:	687b      	ldr	r3, [r7, #4]
 800d4ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d4b0:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800d4b2:	68fb      	ldr	r3, [r7, #12]
 800d4b4:	330b      	adds	r3, #11
 800d4b6:	781a      	ldrb	r2, [r3, #0]
 800d4b8:	68fb      	ldr	r3, [r7, #12]
 800d4ba:	330b      	adds	r3, #11
 800d4bc:	f042 0220 	orr.w	r2, r2, #32
 800d4c0:	b2d2      	uxtb	r2, r2
 800d4c2:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800d4c4:	687b      	ldr	r3, [r7, #4]
 800d4c6:	6818      	ldr	r0, [r3, #0]
 800d4c8:	687b      	ldr	r3, [r7, #4]
 800d4ca:	689b      	ldr	r3, [r3, #8]
 800d4cc:	461a      	mov	r2, r3
 800d4ce:	68f9      	ldr	r1, [r7, #12]
 800d4d0:	f7fe fb21 	bl	800bb16 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800d4d4:	68fb      	ldr	r3, [r7, #12]
 800d4d6:	f103 021c 	add.w	r2, r3, #28
 800d4da:	687b      	ldr	r3, [r7, #4]
 800d4dc:	68db      	ldr	r3, [r3, #12]
 800d4de:	4619      	mov	r1, r3
 800d4e0:	4610      	mov	r0, r2
 800d4e2:	f7fd fb17 	bl	800ab14 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800d4e6:	68fb      	ldr	r3, [r7, #12]
 800d4e8:	3316      	adds	r3, #22
 800d4ea:	6939      	ldr	r1, [r7, #16]
 800d4ec:	4618      	mov	r0, r3
 800d4ee:	f7fd fb11 	bl	800ab14 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800d4f2:	68fb      	ldr	r3, [r7, #12]
 800d4f4:	3312      	adds	r3, #18
 800d4f6:	2100      	movs	r1, #0
 800d4f8:	4618      	mov	r0, r3
 800d4fa:	f7fd faf0 	bl	800aade <st_word>
					fs->wflag = 1;
 800d4fe:	68bb      	ldr	r3, [r7, #8]
 800d500:	2201      	movs	r2, #1
 800d502:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800d504:	68bb      	ldr	r3, [r7, #8]
 800d506:	4618      	mov	r0, r3
 800d508:	f7fd fd8c 	bl	800b024 <sync_fs>
 800d50c:	4603      	mov	r3, r0
 800d50e:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800d510:	687b      	ldr	r3, [r7, #4]
 800d512:	7d1b      	ldrb	r3, [r3, #20]
 800d514:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d518:	b2da      	uxtb	r2, r3
 800d51a:	687b      	ldr	r3, [r7, #4]
 800d51c:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800d51e:	7dfb      	ldrb	r3, [r7, #23]
}
 800d520:	4618      	mov	r0, r3
 800d522:	3718      	adds	r7, #24
 800d524:	46bd      	mov	sp, r7
 800d526:	bd80      	pop	{r7, pc}

0800d528 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800d528:	b580      	push	{r7, lr}
 800d52a:	b084      	sub	sp, #16
 800d52c:	af00      	add	r7, sp, #0
 800d52e:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800d530:	6878      	ldr	r0, [r7, #4]
 800d532:	f7ff ff7b 	bl	800d42c <f_sync>
 800d536:	4603      	mov	r3, r0
 800d538:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800d53a:	7bfb      	ldrb	r3, [r7, #15]
 800d53c:	2b00      	cmp	r3, #0
 800d53e:	d118      	bne.n	800d572 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800d540:	687b      	ldr	r3, [r7, #4]
 800d542:	f107 0208 	add.w	r2, r7, #8
 800d546:	4611      	mov	r1, r2
 800d548:	4618      	mov	r0, r3
 800d54a:	f7ff fb93 	bl	800cc74 <validate>
 800d54e:	4603      	mov	r3, r0
 800d550:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800d552:	7bfb      	ldrb	r3, [r7, #15]
 800d554:	2b00      	cmp	r3, #0
 800d556:	d10c      	bne.n	800d572 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800d558:	687b      	ldr	r3, [r7, #4]
 800d55a:	691b      	ldr	r3, [r3, #16]
 800d55c:	4618      	mov	r0, r3
 800d55e:	f7fd fc8f 	bl	800ae80 <dec_lock>
 800d562:	4603      	mov	r3, r0
 800d564:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800d566:	7bfb      	ldrb	r3, [r7, #15]
 800d568:	2b00      	cmp	r3, #0
 800d56a:	d102      	bne.n	800d572 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800d56c:	687b      	ldr	r3, [r7, #4]
 800d56e:	2200      	movs	r2, #0
 800d570:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 800d572:	7bfb      	ldrb	r3, [r7, #15]
}
 800d574:	4618      	mov	r0, r3
 800d576:	3710      	adds	r7, #16
 800d578:	46bd      	mov	sp, r7
 800d57a:	bd80      	pop	{r7, pc}

0800d57c <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800d57c:	b480      	push	{r7}
 800d57e:	b087      	sub	sp, #28
 800d580:	af00      	add	r7, sp, #0
 800d582:	60f8      	str	r0, [r7, #12]
 800d584:	60b9      	str	r1, [r7, #8]
 800d586:	4613      	mov	r3, r2
 800d588:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800d58a:	2301      	movs	r3, #1
 800d58c:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800d58e:	2300      	movs	r3, #0
 800d590:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800d592:	4b1f      	ldr	r3, [pc, #124]	; (800d610 <FATFS_LinkDriverEx+0x94>)
 800d594:	7a5b      	ldrb	r3, [r3, #9]
 800d596:	b2db      	uxtb	r3, r3
 800d598:	2b00      	cmp	r3, #0
 800d59a:	d131      	bne.n	800d600 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800d59c:	4b1c      	ldr	r3, [pc, #112]	; (800d610 <FATFS_LinkDriverEx+0x94>)
 800d59e:	7a5b      	ldrb	r3, [r3, #9]
 800d5a0:	b2db      	uxtb	r3, r3
 800d5a2:	461a      	mov	r2, r3
 800d5a4:	4b1a      	ldr	r3, [pc, #104]	; (800d610 <FATFS_LinkDriverEx+0x94>)
 800d5a6:	2100      	movs	r1, #0
 800d5a8:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800d5aa:	4b19      	ldr	r3, [pc, #100]	; (800d610 <FATFS_LinkDriverEx+0x94>)
 800d5ac:	7a5b      	ldrb	r3, [r3, #9]
 800d5ae:	b2db      	uxtb	r3, r3
 800d5b0:	4a17      	ldr	r2, [pc, #92]	; (800d610 <FATFS_LinkDriverEx+0x94>)
 800d5b2:	009b      	lsls	r3, r3, #2
 800d5b4:	4413      	add	r3, r2
 800d5b6:	68fa      	ldr	r2, [r7, #12]
 800d5b8:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800d5ba:	4b15      	ldr	r3, [pc, #84]	; (800d610 <FATFS_LinkDriverEx+0x94>)
 800d5bc:	7a5b      	ldrb	r3, [r3, #9]
 800d5be:	b2db      	uxtb	r3, r3
 800d5c0:	461a      	mov	r2, r3
 800d5c2:	4b13      	ldr	r3, [pc, #76]	; (800d610 <FATFS_LinkDriverEx+0x94>)
 800d5c4:	4413      	add	r3, r2
 800d5c6:	79fa      	ldrb	r2, [r7, #7]
 800d5c8:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800d5ca:	4b11      	ldr	r3, [pc, #68]	; (800d610 <FATFS_LinkDriverEx+0x94>)
 800d5cc:	7a5b      	ldrb	r3, [r3, #9]
 800d5ce:	b2db      	uxtb	r3, r3
 800d5d0:	1c5a      	adds	r2, r3, #1
 800d5d2:	b2d1      	uxtb	r1, r2
 800d5d4:	4a0e      	ldr	r2, [pc, #56]	; (800d610 <FATFS_LinkDriverEx+0x94>)
 800d5d6:	7251      	strb	r1, [r2, #9]
 800d5d8:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800d5da:	7dbb      	ldrb	r3, [r7, #22]
 800d5dc:	3330      	adds	r3, #48	; 0x30
 800d5de:	b2da      	uxtb	r2, r3
 800d5e0:	68bb      	ldr	r3, [r7, #8]
 800d5e2:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800d5e4:	68bb      	ldr	r3, [r7, #8]
 800d5e6:	3301      	adds	r3, #1
 800d5e8:	223a      	movs	r2, #58	; 0x3a
 800d5ea:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800d5ec:	68bb      	ldr	r3, [r7, #8]
 800d5ee:	3302      	adds	r3, #2
 800d5f0:	222f      	movs	r2, #47	; 0x2f
 800d5f2:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800d5f4:	68bb      	ldr	r3, [r7, #8]
 800d5f6:	3303      	adds	r3, #3
 800d5f8:	2200      	movs	r2, #0
 800d5fa:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800d5fc:	2300      	movs	r3, #0
 800d5fe:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800d600:	7dfb      	ldrb	r3, [r7, #23]
}
 800d602:	4618      	mov	r0, r3
 800d604:	371c      	adds	r7, #28
 800d606:	46bd      	mov	sp, r7
 800d608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d60c:	4770      	bx	lr
 800d60e:	bf00      	nop
 800d610:	200170b0 	.word	0x200170b0

0800d614 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800d614:	b580      	push	{r7, lr}
 800d616:	b082      	sub	sp, #8
 800d618:	af00      	add	r7, sp, #0
 800d61a:	6078      	str	r0, [r7, #4]
 800d61c:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800d61e:	2200      	movs	r2, #0
 800d620:	6839      	ldr	r1, [r7, #0]
 800d622:	6878      	ldr	r0, [r7, #4]
 800d624:	f7ff ffaa 	bl	800d57c <FATFS_LinkDriverEx>
 800d628:	4603      	mov	r3, r0
}
 800d62a:	4618      	mov	r0, r3
 800d62c:	3708      	adds	r7, #8
 800d62e:	46bd      	mov	sp, r7
 800d630:	bd80      	pop	{r7, pc}
	...

0800d634 <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 800d634:	b480      	push	{r7}
 800d636:	b085      	sub	sp, #20
 800d638:	af00      	add	r7, sp, #0
 800d63a:	4603      	mov	r3, r0
 800d63c:	6039      	str	r1, [r7, #0]
 800d63e:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 800d640:	88fb      	ldrh	r3, [r7, #6]
 800d642:	2b7f      	cmp	r3, #127	; 0x7f
 800d644:	d802      	bhi.n	800d64c <ff_convert+0x18>
		c = chr;
 800d646:	88fb      	ldrh	r3, [r7, #6]
 800d648:	81fb      	strh	r3, [r7, #14]
 800d64a:	e025      	b.n	800d698 <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 800d64c:	683b      	ldr	r3, [r7, #0]
 800d64e:	2b00      	cmp	r3, #0
 800d650:	d00b      	beq.n	800d66a <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 800d652:	88fb      	ldrh	r3, [r7, #6]
 800d654:	2bff      	cmp	r3, #255	; 0xff
 800d656:	d805      	bhi.n	800d664 <ff_convert+0x30>
 800d658:	88fb      	ldrh	r3, [r7, #6]
 800d65a:	3b80      	subs	r3, #128	; 0x80
 800d65c:	4a12      	ldr	r2, [pc, #72]	; (800d6a8 <ff_convert+0x74>)
 800d65e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d662:	e000      	b.n	800d666 <ff_convert+0x32>
 800d664:	2300      	movs	r3, #0
 800d666:	81fb      	strh	r3, [r7, #14]
 800d668:	e016      	b.n	800d698 <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 800d66a:	2300      	movs	r3, #0
 800d66c:	81fb      	strh	r3, [r7, #14]
 800d66e:	e009      	b.n	800d684 <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 800d670:	89fb      	ldrh	r3, [r7, #14]
 800d672:	4a0d      	ldr	r2, [pc, #52]	; (800d6a8 <ff_convert+0x74>)
 800d674:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d678:	88fa      	ldrh	r2, [r7, #6]
 800d67a:	429a      	cmp	r2, r3
 800d67c:	d006      	beq.n	800d68c <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 800d67e:	89fb      	ldrh	r3, [r7, #14]
 800d680:	3301      	adds	r3, #1
 800d682:	81fb      	strh	r3, [r7, #14]
 800d684:	89fb      	ldrh	r3, [r7, #14]
 800d686:	2b7f      	cmp	r3, #127	; 0x7f
 800d688:	d9f2      	bls.n	800d670 <ff_convert+0x3c>
 800d68a:	e000      	b.n	800d68e <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 800d68c:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 800d68e:	89fb      	ldrh	r3, [r7, #14]
 800d690:	3380      	adds	r3, #128	; 0x80
 800d692:	b29b      	uxth	r3, r3
 800d694:	b2db      	uxtb	r3, r3
 800d696:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 800d698:	89fb      	ldrh	r3, [r7, #14]
}
 800d69a:	4618      	mov	r0, r3
 800d69c:	3714      	adds	r7, #20
 800d69e:	46bd      	mov	sp, r7
 800d6a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6a4:	4770      	bx	lr
 800d6a6:	bf00      	nop
 800d6a8:	0800e2bc 	.word	0x0800e2bc

0800d6ac <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 800d6ac:	b480      	push	{r7}
 800d6ae:	b087      	sub	sp, #28
 800d6b0:	af00      	add	r7, sp, #0
 800d6b2:	4603      	mov	r3, r0
 800d6b4:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 800d6b6:	88fb      	ldrh	r3, [r7, #6]
 800d6b8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d6bc:	d201      	bcs.n	800d6c2 <ff_wtoupper+0x16>
 800d6be:	4b3e      	ldr	r3, [pc, #248]	; (800d7b8 <ff_wtoupper+0x10c>)
 800d6c0:	e000      	b.n	800d6c4 <ff_wtoupper+0x18>
 800d6c2:	4b3e      	ldr	r3, [pc, #248]	; (800d7bc <ff_wtoupper+0x110>)
 800d6c4:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 800d6c6:	697b      	ldr	r3, [r7, #20]
 800d6c8:	1c9a      	adds	r2, r3, #2
 800d6ca:	617a      	str	r2, [r7, #20]
 800d6cc:	881b      	ldrh	r3, [r3, #0]
 800d6ce:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 800d6d0:	8a7b      	ldrh	r3, [r7, #18]
 800d6d2:	2b00      	cmp	r3, #0
 800d6d4:	d068      	beq.n	800d7a8 <ff_wtoupper+0xfc>
 800d6d6:	88fa      	ldrh	r2, [r7, #6]
 800d6d8:	8a7b      	ldrh	r3, [r7, #18]
 800d6da:	429a      	cmp	r2, r3
 800d6dc:	d364      	bcc.n	800d7a8 <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 800d6de:	697b      	ldr	r3, [r7, #20]
 800d6e0:	1c9a      	adds	r2, r3, #2
 800d6e2:	617a      	str	r2, [r7, #20]
 800d6e4:	881b      	ldrh	r3, [r3, #0]
 800d6e6:	823b      	strh	r3, [r7, #16]
 800d6e8:	8a3b      	ldrh	r3, [r7, #16]
 800d6ea:	0a1b      	lsrs	r3, r3, #8
 800d6ec:	81fb      	strh	r3, [r7, #14]
 800d6ee:	8a3b      	ldrh	r3, [r7, #16]
 800d6f0:	b2db      	uxtb	r3, r3
 800d6f2:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 800d6f4:	88fa      	ldrh	r2, [r7, #6]
 800d6f6:	8a79      	ldrh	r1, [r7, #18]
 800d6f8:	8a3b      	ldrh	r3, [r7, #16]
 800d6fa:	440b      	add	r3, r1
 800d6fc:	429a      	cmp	r2, r3
 800d6fe:	da49      	bge.n	800d794 <ff_wtoupper+0xe8>
			switch (cmd) {
 800d700:	89fb      	ldrh	r3, [r7, #14]
 800d702:	2b08      	cmp	r3, #8
 800d704:	d84f      	bhi.n	800d7a6 <ff_wtoupper+0xfa>
 800d706:	a201      	add	r2, pc, #4	; (adr r2, 800d70c <ff_wtoupper+0x60>)
 800d708:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d70c:	0800d731 	.word	0x0800d731
 800d710:	0800d743 	.word	0x0800d743
 800d714:	0800d759 	.word	0x0800d759
 800d718:	0800d761 	.word	0x0800d761
 800d71c:	0800d769 	.word	0x0800d769
 800d720:	0800d771 	.word	0x0800d771
 800d724:	0800d779 	.word	0x0800d779
 800d728:	0800d781 	.word	0x0800d781
 800d72c:	0800d789 	.word	0x0800d789
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 800d730:	88fa      	ldrh	r2, [r7, #6]
 800d732:	8a7b      	ldrh	r3, [r7, #18]
 800d734:	1ad3      	subs	r3, r2, r3
 800d736:	005b      	lsls	r3, r3, #1
 800d738:	697a      	ldr	r2, [r7, #20]
 800d73a:	4413      	add	r3, r2
 800d73c:	881b      	ldrh	r3, [r3, #0]
 800d73e:	80fb      	strh	r3, [r7, #6]
 800d740:	e027      	b.n	800d792 <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 800d742:	88fa      	ldrh	r2, [r7, #6]
 800d744:	8a7b      	ldrh	r3, [r7, #18]
 800d746:	1ad3      	subs	r3, r2, r3
 800d748:	b29b      	uxth	r3, r3
 800d74a:	f003 0301 	and.w	r3, r3, #1
 800d74e:	b29b      	uxth	r3, r3
 800d750:	88fa      	ldrh	r2, [r7, #6]
 800d752:	1ad3      	subs	r3, r2, r3
 800d754:	80fb      	strh	r3, [r7, #6]
 800d756:	e01c      	b.n	800d792 <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 800d758:	88fb      	ldrh	r3, [r7, #6]
 800d75a:	3b10      	subs	r3, #16
 800d75c:	80fb      	strh	r3, [r7, #6]
 800d75e:	e018      	b.n	800d792 <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 800d760:	88fb      	ldrh	r3, [r7, #6]
 800d762:	3b20      	subs	r3, #32
 800d764:	80fb      	strh	r3, [r7, #6]
 800d766:	e014      	b.n	800d792 <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 800d768:	88fb      	ldrh	r3, [r7, #6]
 800d76a:	3b30      	subs	r3, #48	; 0x30
 800d76c:	80fb      	strh	r3, [r7, #6]
 800d76e:	e010      	b.n	800d792 <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 800d770:	88fb      	ldrh	r3, [r7, #6]
 800d772:	3b1a      	subs	r3, #26
 800d774:	80fb      	strh	r3, [r7, #6]
 800d776:	e00c      	b.n	800d792 <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 800d778:	88fb      	ldrh	r3, [r7, #6]
 800d77a:	3308      	adds	r3, #8
 800d77c:	80fb      	strh	r3, [r7, #6]
 800d77e:	e008      	b.n	800d792 <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 800d780:	88fb      	ldrh	r3, [r7, #6]
 800d782:	3b50      	subs	r3, #80	; 0x50
 800d784:	80fb      	strh	r3, [r7, #6]
 800d786:	e004      	b.n	800d792 <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 800d788:	88fb      	ldrh	r3, [r7, #6]
 800d78a:	f5a3 53e3 	sub.w	r3, r3, #7264	; 0x1c60
 800d78e:	80fb      	strh	r3, [r7, #6]
 800d790:	bf00      	nop
			}
			break;
 800d792:	e008      	b.n	800d7a6 <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 800d794:	89fb      	ldrh	r3, [r7, #14]
 800d796:	2b00      	cmp	r3, #0
 800d798:	d195      	bne.n	800d6c6 <ff_wtoupper+0x1a>
 800d79a:	8a3b      	ldrh	r3, [r7, #16]
 800d79c:	005b      	lsls	r3, r3, #1
 800d79e:	697a      	ldr	r2, [r7, #20]
 800d7a0:	4413      	add	r3, r2
 800d7a2:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 800d7a4:	e78f      	b.n	800d6c6 <ff_wtoupper+0x1a>
			break;
 800d7a6:	bf00      	nop
	}

	return chr;
 800d7a8:	88fb      	ldrh	r3, [r7, #6]
}
 800d7aa:	4618      	mov	r0, r3
 800d7ac:	371c      	adds	r7, #28
 800d7ae:	46bd      	mov	sp, r7
 800d7b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7b4:	4770      	bx	lr
 800d7b6:	bf00      	nop
 800d7b8:	0800e3bc 	.word	0x0800e3bc
 800d7bc:	0800e5b0 	.word	0x0800e5b0

0800d7c0 <__errno>:
 800d7c0:	4b01      	ldr	r3, [pc, #4]	; (800d7c8 <__errno+0x8>)
 800d7c2:	6818      	ldr	r0, [r3, #0]
 800d7c4:	4770      	bx	lr
 800d7c6:	bf00      	nop
 800d7c8:	200000f8 	.word	0x200000f8

0800d7cc <__libc_init_array>:
 800d7cc:	b570      	push	{r4, r5, r6, lr}
 800d7ce:	4d0d      	ldr	r5, [pc, #52]	; (800d804 <__libc_init_array+0x38>)
 800d7d0:	4c0d      	ldr	r4, [pc, #52]	; (800d808 <__libc_init_array+0x3c>)
 800d7d2:	1b64      	subs	r4, r4, r5
 800d7d4:	10a4      	asrs	r4, r4, #2
 800d7d6:	2600      	movs	r6, #0
 800d7d8:	42a6      	cmp	r6, r4
 800d7da:	d109      	bne.n	800d7f0 <__libc_init_array+0x24>
 800d7dc:	4d0b      	ldr	r5, [pc, #44]	; (800d80c <__libc_init_array+0x40>)
 800d7de:	4c0c      	ldr	r4, [pc, #48]	; (800d810 <__libc_init_array+0x44>)
 800d7e0:	f000 fc8e 	bl	800e100 <_init>
 800d7e4:	1b64      	subs	r4, r4, r5
 800d7e6:	10a4      	asrs	r4, r4, #2
 800d7e8:	2600      	movs	r6, #0
 800d7ea:	42a6      	cmp	r6, r4
 800d7ec:	d105      	bne.n	800d7fa <__libc_init_array+0x2e>
 800d7ee:	bd70      	pop	{r4, r5, r6, pc}
 800d7f0:	f855 3b04 	ldr.w	r3, [r5], #4
 800d7f4:	4798      	blx	r3
 800d7f6:	3601      	adds	r6, #1
 800d7f8:	e7ee      	b.n	800d7d8 <__libc_init_array+0xc>
 800d7fa:	f855 3b04 	ldr.w	r3, [r5], #4
 800d7fe:	4798      	blx	r3
 800d800:	3601      	adds	r6, #1
 800d802:	e7f2      	b.n	800d7ea <__libc_init_array+0x1e>
 800d804:	0800e6a8 	.word	0x0800e6a8
 800d808:	0800e6a8 	.word	0x0800e6a8
 800d80c:	0800e6a8 	.word	0x0800e6a8
 800d810:	0800e6ac 	.word	0x0800e6ac

0800d814 <memset>:
 800d814:	4402      	add	r2, r0
 800d816:	4603      	mov	r3, r0
 800d818:	4293      	cmp	r3, r2
 800d81a:	d100      	bne.n	800d81e <memset+0xa>
 800d81c:	4770      	bx	lr
 800d81e:	f803 1b01 	strb.w	r1, [r3], #1
 800d822:	e7f9      	b.n	800d818 <memset+0x4>

0800d824 <siprintf>:
 800d824:	b40e      	push	{r1, r2, r3}
 800d826:	b500      	push	{lr}
 800d828:	b09c      	sub	sp, #112	; 0x70
 800d82a:	ab1d      	add	r3, sp, #116	; 0x74
 800d82c:	9002      	str	r0, [sp, #8]
 800d82e:	9006      	str	r0, [sp, #24]
 800d830:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800d834:	4809      	ldr	r0, [pc, #36]	; (800d85c <siprintf+0x38>)
 800d836:	9107      	str	r1, [sp, #28]
 800d838:	9104      	str	r1, [sp, #16]
 800d83a:	4909      	ldr	r1, [pc, #36]	; (800d860 <siprintf+0x3c>)
 800d83c:	f853 2b04 	ldr.w	r2, [r3], #4
 800d840:	9105      	str	r1, [sp, #20]
 800d842:	6800      	ldr	r0, [r0, #0]
 800d844:	9301      	str	r3, [sp, #4]
 800d846:	a902      	add	r1, sp, #8
 800d848:	f000 f868 	bl	800d91c <_svfiprintf_r>
 800d84c:	9b02      	ldr	r3, [sp, #8]
 800d84e:	2200      	movs	r2, #0
 800d850:	701a      	strb	r2, [r3, #0]
 800d852:	b01c      	add	sp, #112	; 0x70
 800d854:	f85d eb04 	ldr.w	lr, [sp], #4
 800d858:	b003      	add	sp, #12
 800d85a:	4770      	bx	lr
 800d85c:	200000f8 	.word	0x200000f8
 800d860:	ffff0208 	.word	0xffff0208

0800d864 <__ssputs_r>:
 800d864:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d868:	688e      	ldr	r6, [r1, #8]
 800d86a:	429e      	cmp	r6, r3
 800d86c:	4682      	mov	sl, r0
 800d86e:	460c      	mov	r4, r1
 800d870:	4690      	mov	r8, r2
 800d872:	461f      	mov	r7, r3
 800d874:	d838      	bhi.n	800d8e8 <__ssputs_r+0x84>
 800d876:	898a      	ldrh	r2, [r1, #12]
 800d878:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800d87c:	d032      	beq.n	800d8e4 <__ssputs_r+0x80>
 800d87e:	6825      	ldr	r5, [r4, #0]
 800d880:	6909      	ldr	r1, [r1, #16]
 800d882:	eba5 0901 	sub.w	r9, r5, r1
 800d886:	6965      	ldr	r5, [r4, #20]
 800d888:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800d88c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800d890:	3301      	adds	r3, #1
 800d892:	444b      	add	r3, r9
 800d894:	106d      	asrs	r5, r5, #1
 800d896:	429d      	cmp	r5, r3
 800d898:	bf38      	it	cc
 800d89a:	461d      	movcc	r5, r3
 800d89c:	0553      	lsls	r3, r2, #21
 800d89e:	d531      	bpl.n	800d904 <__ssputs_r+0xa0>
 800d8a0:	4629      	mov	r1, r5
 800d8a2:	f000 fb63 	bl	800df6c <_malloc_r>
 800d8a6:	4606      	mov	r6, r0
 800d8a8:	b950      	cbnz	r0, 800d8c0 <__ssputs_r+0x5c>
 800d8aa:	230c      	movs	r3, #12
 800d8ac:	f8ca 3000 	str.w	r3, [sl]
 800d8b0:	89a3      	ldrh	r3, [r4, #12]
 800d8b2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d8b6:	81a3      	strh	r3, [r4, #12]
 800d8b8:	f04f 30ff 	mov.w	r0, #4294967295
 800d8bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d8c0:	6921      	ldr	r1, [r4, #16]
 800d8c2:	464a      	mov	r2, r9
 800d8c4:	f000 fabe 	bl	800de44 <memcpy>
 800d8c8:	89a3      	ldrh	r3, [r4, #12]
 800d8ca:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800d8ce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d8d2:	81a3      	strh	r3, [r4, #12]
 800d8d4:	6126      	str	r6, [r4, #16]
 800d8d6:	6165      	str	r5, [r4, #20]
 800d8d8:	444e      	add	r6, r9
 800d8da:	eba5 0509 	sub.w	r5, r5, r9
 800d8de:	6026      	str	r6, [r4, #0]
 800d8e0:	60a5      	str	r5, [r4, #8]
 800d8e2:	463e      	mov	r6, r7
 800d8e4:	42be      	cmp	r6, r7
 800d8e6:	d900      	bls.n	800d8ea <__ssputs_r+0x86>
 800d8e8:	463e      	mov	r6, r7
 800d8ea:	6820      	ldr	r0, [r4, #0]
 800d8ec:	4632      	mov	r2, r6
 800d8ee:	4641      	mov	r1, r8
 800d8f0:	f000 fab6 	bl	800de60 <memmove>
 800d8f4:	68a3      	ldr	r3, [r4, #8]
 800d8f6:	1b9b      	subs	r3, r3, r6
 800d8f8:	60a3      	str	r3, [r4, #8]
 800d8fa:	6823      	ldr	r3, [r4, #0]
 800d8fc:	4433      	add	r3, r6
 800d8fe:	6023      	str	r3, [r4, #0]
 800d900:	2000      	movs	r0, #0
 800d902:	e7db      	b.n	800d8bc <__ssputs_r+0x58>
 800d904:	462a      	mov	r2, r5
 800d906:	f000 fba5 	bl	800e054 <_realloc_r>
 800d90a:	4606      	mov	r6, r0
 800d90c:	2800      	cmp	r0, #0
 800d90e:	d1e1      	bne.n	800d8d4 <__ssputs_r+0x70>
 800d910:	6921      	ldr	r1, [r4, #16]
 800d912:	4650      	mov	r0, sl
 800d914:	f000 fabe 	bl	800de94 <_free_r>
 800d918:	e7c7      	b.n	800d8aa <__ssputs_r+0x46>
	...

0800d91c <_svfiprintf_r>:
 800d91c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d920:	4698      	mov	r8, r3
 800d922:	898b      	ldrh	r3, [r1, #12]
 800d924:	061b      	lsls	r3, r3, #24
 800d926:	b09d      	sub	sp, #116	; 0x74
 800d928:	4607      	mov	r7, r0
 800d92a:	460d      	mov	r5, r1
 800d92c:	4614      	mov	r4, r2
 800d92e:	d50e      	bpl.n	800d94e <_svfiprintf_r+0x32>
 800d930:	690b      	ldr	r3, [r1, #16]
 800d932:	b963      	cbnz	r3, 800d94e <_svfiprintf_r+0x32>
 800d934:	2140      	movs	r1, #64	; 0x40
 800d936:	f000 fb19 	bl	800df6c <_malloc_r>
 800d93a:	6028      	str	r0, [r5, #0]
 800d93c:	6128      	str	r0, [r5, #16]
 800d93e:	b920      	cbnz	r0, 800d94a <_svfiprintf_r+0x2e>
 800d940:	230c      	movs	r3, #12
 800d942:	603b      	str	r3, [r7, #0]
 800d944:	f04f 30ff 	mov.w	r0, #4294967295
 800d948:	e0d1      	b.n	800daee <_svfiprintf_r+0x1d2>
 800d94a:	2340      	movs	r3, #64	; 0x40
 800d94c:	616b      	str	r3, [r5, #20]
 800d94e:	2300      	movs	r3, #0
 800d950:	9309      	str	r3, [sp, #36]	; 0x24
 800d952:	2320      	movs	r3, #32
 800d954:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800d958:	f8cd 800c 	str.w	r8, [sp, #12]
 800d95c:	2330      	movs	r3, #48	; 0x30
 800d95e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800db08 <_svfiprintf_r+0x1ec>
 800d962:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800d966:	f04f 0901 	mov.w	r9, #1
 800d96a:	4623      	mov	r3, r4
 800d96c:	469a      	mov	sl, r3
 800d96e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d972:	b10a      	cbz	r2, 800d978 <_svfiprintf_r+0x5c>
 800d974:	2a25      	cmp	r2, #37	; 0x25
 800d976:	d1f9      	bne.n	800d96c <_svfiprintf_r+0x50>
 800d978:	ebba 0b04 	subs.w	fp, sl, r4
 800d97c:	d00b      	beq.n	800d996 <_svfiprintf_r+0x7a>
 800d97e:	465b      	mov	r3, fp
 800d980:	4622      	mov	r2, r4
 800d982:	4629      	mov	r1, r5
 800d984:	4638      	mov	r0, r7
 800d986:	f7ff ff6d 	bl	800d864 <__ssputs_r>
 800d98a:	3001      	adds	r0, #1
 800d98c:	f000 80aa 	beq.w	800dae4 <_svfiprintf_r+0x1c8>
 800d990:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d992:	445a      	add	r2, fp
 800d994:	9209      	str	r2, [sp, #36]	; 0x24
 800d996:	f89a 3000 	ldrb.w	r3, [sl]
 800d99a:	2b00      	cmp	r3, #0
 800d99c:	f000 80a2 	beq.w	800dae4 <_svfiprintf_r+0x1c8>
 800d9a0:	2300      	movs	r3, #0
 800d9a2:	f04f 32ff 	mov.w	r2, #4294967295
 800d9a6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d9aa:	f10a 0a01 	add.w	sl, sl, #1
 800d9ae:	9304      	str	r3, [sp, #16]
 800d9b0:	9307      	str	r3, [sp, #28]
 800d9b2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800d9b6:	931a      	str	r3, [sp, #104]	; 0x68
 800d9b8:	4654      	mov	r4, sl
 800d9ba:	2205      	movs	r2, #5
 800d9bc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d9c0:	4851      	ldr	r0, [pc, #324]	; (800db08 <_svfiprintf_r+0x1ec>)
 800d9c2:	f7f2 fc15 	bl	80001f0 <memchr>
 800d9c6:	9a04      	ldr	r2, [sp, #16]
 800d9c8:	b9d8      	cbnz	r0, 800da02 <_svfiprintf_r+0xe6>
 800d9ca:	06d0      	lsls	r0, r2, #27
 800d9cc:	bf44      	itt	mi
 800d9ce:	2320      	movmi	r3, #32
 800d9d0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d9d4:	0711      	lsls	r1, r2, #28
 800d9d6:	bf44      	itt	mi
 800d9d8:	232b      	movmi	r3, #43	; 0x2b
 800d9da:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d9de:	f89a 3000 	ldrb.w	r3, [sl]
 800d9e2:	2b2a      	cmp	r3, #42	; 0x2a
 800d9e4:	d015      	beq.n	800da12 <_svfiprintf_r+0xf6>
 800d9e6:	9a07      	ldr	r2, [sp, #28]
 800d9e8:	4654      	mov	r4, sl
 800d9ea:	2000      	movs	r0, #0
 800d9ec:	f04f 0c0a 	mov.w	ip, #10
 800d9f0:	4621      	mov	r1, r4
 800d9f2:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d9f6:	3b30      	subs	r3, #48	; 0x30
 800d9f8:	2b09      	cmp	r3, #9
 800d9fa:	d94e      	bls.n	800da9a <_svfiprintf_r+0x17e>
 800d9fc:	b1b0      	cbz	r0, 800da2c <_svfiprintf_r+0x110>
 800d9fe:	9207      	str	r2, [sp, #28]
 800da00:	e014      	b.n	800da2c <_svfiprintf_r+0x110>
 800da02:	eba0 0308 	sub.w	r3, r0, r8
 800da06:	fa09 f303 	lsl.w	r3, r9, r3
 800da0a:	4313      	orrs	r3, r2
 800da0c:	9304      	str	r3, [sp, #16]
 800da0e:	46a2      	mov	sl, r4
 800da10:	e7d2      	b.n	800d9b8 <_svfiprintf_r+0x9c>
 800da12:	9b03      	ldr	r3, [sp, #12]
 800da14:	1d19      	adds	r1, r3, #4
 800da16:	681b      	ldr	r3, [r3, #0]
 800da18:	9103      	str	r1, [sp, #12]
 800da1a:	2b00      	cmp	r3, #0
 800da1c:	bfbb      	ittet	lt
 800da1e:	425b      	neglt	r3, r3
 800da20:	f042 0202 	orrlt.w	r2, r2, #2
 800da24:	9307      	strge	r3, [sp, #28]
 800da26:	9307      	strlt	r3, [sp, #28]
 800da28:	bfb8      	it	lt
 800da2a:	9204      	strlt	r2, [sp, #16]
 800da2c:	7823      	ldrb	r3, [r4, #0]
 800da2e:	2b2e      	cmp	r3, #46	; 0x2e
 800da30:	d10c      	bne.n	800da4c <_svfiprintf_r+0x130>
 800da32:	7863      	ldrb	r3, [r4, #1]
 800da34:	2b2a      	cmp	r3, #42	; 0x2a
 800da36:	d135      	bne.n	800daa4 <_svfiprintf_r+0x188>
 800da38:	9b03      	ldr	r3, [sp, #12]
 800da3a:	1d1a      	adds	r2, r3, #4
 800da3c:	681b      	ldr	r3, [r3, #0]
 800da3e:	9203      	str	r2, [sp, #12]
 800da40:	2b00      	cmp	r3, #0
 800da42:	bfb8      	it	lt
 800da44:	f04f 33ff 	movlt.w	r3, #4294967295
 800da48:	3402      	adds	r4, #2
 800da4a:	9305      	str	r3, [sp, #20]
 800da4c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800db18 <_svfiprintf_r+0x1fc>
 800da50:	7821      	ldrb	r1, [r4, #0]
 800da52:	2203      	movs	r2, #3
 800da54:	4650      	mov	r0, sl
 800da56:	f7f2 fbcb 	bl	80001f0 <memchr>
 800da5a:	b140      	cbz	r0, 800da6e <_svfiprintf_r+0x152>
 800da5c:	2340      	movs	r3, #64	; 0x40
 800da5e:	eba0 000a 	sub.w	r0, r0, sl
 800da62:	fa03 f000 	lsl.w	r0, r3, r0
 800da66:	9b04      	ldr	r3, [sp, #16]
 800da68:	4303      	orrs	r3, r0
 800da6a:	3401      	adds	r4, #1
 800da6c:	9304      	str	r3, [sp, #16]
 800da6e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800da72:	4826      	ldr	r0, [pc, #152]	; (800db0c <_svfiprintf_r+0x1f0>)
 800da74:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800da78:	2206      	movs	r2, #6
 800da7a:	f7f2 fbb9 	bl	80001f0 <memchr>
 800da7e:	2800      	cmp	r0, #0
 800da80:	d038      	beq.n	800daf4 <_svfiprintf_r+0x1d8>
 800da82:	4b23      	ldr	r3, [pc, #140]	; (800db10 <_svfiprintf_r+0x1f4>)
 800da84:	bb1b      	cbnz	r3, 800dace <_svfiprintf_r+0x1b2>
 800da86:	9b03      	ldr	r3, [sp, #12]
 800da88:	3307      	adds	r3, #7
 800da8a:	f023 0307 	bic.w	r3, r3, #7
 800da8e:	3308      	adds	r3, #8
 800da90:	9303      	str	r3, [sp, #12]
 800da92:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800da94:	4433      	add	r3, r6
 800da96:	9309      	str	r3, [sp, #36]	; 0x24
 800da98:	e767      	b.n	800d96a <_svfiprintf_r+0x4e>
 800da9a:	fb0c 3202 	mla	r2, ip, r2, r3
 800da9e:	460c      	mov	r4, r1
 800daa0:	2001      	movs	r0, #1
 800daa2:	e7a5      	b.n	800d9f0 <_svfiprintf_r+0xd4>
 800daa4:	2300      	movs	r3, #0
 800daa6:	3401      	adds	r4, #1
 800daa8:	9305      	str	r3, [sp, #20]
 800daaa:	4619      	mov	r1, r3
 800daac:	f04f 0c0a 	mov.w	ip, #10
 800dab0:	4620      	mov	r0, r4
 800dab2:	f810 2b01 	ldrb.w	r2, [r0], #1
 800dab6:	3a30      	subs	r2, #48	; 0x30
 800dab8:	2a09      	cmp	r2, #9
 800daba:	d903      	bls.n	800dac4 <_svfiprintf_r+0x1a8>
 800dabc:	2b00      	cmp	r3, #0
 800dabe:	d0c5      	beq.n	800da4c <_svfiprintf_r+0x130>
 800dac0:	9105      	str	r1, [sp, #20]
 800dac2:	e7c3      	b.n	800da4c <_svfiprintf_r+0x130>
 800dac4:	fb0c 2101 	mla	r1, ip, r1, r2
 800dac8:	4604      	mov	r4, r0
 800daca:	2301      	movs	r3, #1
 800dacc:	e7f0      	b.n	800dab0 <_svfiprintf_r+0x194>
 800dace:	ab03      	add	r3, sp, #12
 800dad0:	9300      	str	r3, [sp, #0]
 800dad2:	462a      	mov	r2, r5
 800dad4:	4b0f      	ldr	r3, [pc, #60]	; (800db14 <_svfiprintf_r+0x1f8>)
 800dad6:	a904      	add	r1, sp, #16
 800dad8:	4638      	mov	r0, r7
 800dada:	f3af 8000 	nop.w
 800dade:	1c42      	adds	r2, r0, #1
 800dae0:	4606      	mov	r6, r0
 800dae2:	d1d6      	bne.n	800da92 <_svfiprintf_r+0x176>
 800dae4:	89ab      	ldrh	r3, [r5, #12]
 800dae6:	065b      	lsls	r3, r3, #25
 800dae8:	f53f af2c 	bmi.w	800d944 <_svfiprintf_r+0x28>
 800daec:	9809      	ldr	r0, [sp, #36]	; 0x24
 800daee:	b01d      	add	sp, #116	; 0x74
 800daf0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800daf4:	ab03      	add	r3, sp, #12
 800daf6:	9300      	str	r3, [sp, #0]
 800daf8:	462a      	mov	r2, r5
 800dafa:	4b06      	ldr	r3, [pc, #24]	; (800db14 <_svfiprintf_r+0x1f8>)
 800dafc:	a904      	add	r1, sp, #16
 800dafe:	4638      	mov	r0, r7
 800db00:	f000 f87a 	bl	800dbf8 <_printf_i>
 800db04:	e7eb      	b.n	800dade <_svfiprintf_r+0x1c2>
 800db06:	bf00      	nop
 800db08:	0800e66c 	.word	0x0800e66c
 800db0c:	0800e676 	.word	0x0800e676
 800db10:	00000000 	.word	0x00000000
 800db14:	0800d865 	.word	0x0800d865
 800db18:	0800e672 	.word	0x0800e672

0800db1c <_printf_common>:
 800db1c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800db20:	4616      	mov	r6, r2
 800db22:	4699      	mov	r9, r3
 800db24:	688a      	ldr	r2, [r1, #8]
 800db26:	690b      	ldr	r3, [r1, #16]
 800db28:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800db2c:	4293      	cmp	r3, r2
 800db2e:	bfb8      	it	lt
 800db30:	4613      	movlt	r3, r2
 800db32:	6033      	str	r3, [r6, #0]
 800db34:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800db38:	4607      	mov	r7, r0
 800db3a:	460c      	mov	r4, r1
 800db3c:	b10a      	cbz	r2, 800db42 <_printf_common+0x26>
 800db3e:	3301      	adds	r3, #1
 800db40:	6033      	str	r3, [r6, #0]
 800db42:	6823      	ldr	r3, [r4, #0]
 800db44:	0699      	lsls	r1, r3, #26
 800db46:	bf42      	ittt	mi
 800db48:	6833      	ldrmi	r3, [r6, #0]
 800db4a:	3302      	addmi	r3, #2
 800db4c:	6033      	strmi	r3, [r6, #0]
 800db4e:	6825      	ldr	r5, [r4, #0]
 800db50:	f015 0506 	ands.w	r5, r5, #6
 800db54:	d106      	bne.n	800db64 <_printf_common+0x48>
 800db56:	f104 0a19 	add.w	sl, r4, #25
 800db5a:	68e3      	ldr	r3, [r4, #12]
 800db5c:	6832      	ldr	r2, [r6, #0]
 800db5e:	1a9b      	subs	r3, r3, r2
 800db60:	42ab      	cmp	r3, r5
 800db62:	dc26      	bgt.n	800dbb2 <_printf_common+0x96>
 800db64:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800db68:	1e13      	subs	r3, r2, #0
 800db6a:	6822      	ldr	r2, [r4, #0]
 800db6c:	bf18      	it	ne
 800db6e:	2301      	movne	r3, #1
 800db70:	0692      	lsls	r2, r2, #26
 800db72:	d42b      	bmi.n	800dbcc <_printf_common+0xb0>
 800db74:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800db78:	4649      	mov	r1, r9
 800db7a:	4638      	mov	r0, r7
 800db7c:	47c0      	blx	r8
 800db7e:	3001      	adds	r0, #1
 800db80:	d01e      	beq.n	800dbc0 <_printf_common+0xa4>
 800db82:	6823      	ldr	r3, [r4, #0]
 800db84:	68e5      	ldr	r5, [r4, #12]
 800db86:	6832      	ldr	r2, [r6, #0]
 800db88:	f003 0306 	and.w	r3, r3, #6
 800db8c:	2b04      	cmp	r3, #4
 800db8e:	bf08      	it	eq
 800db90:	1aad      	subeq	r5, r5, r2
 800db92:	68a3      	ldr	r3, [r4, #8]
 800db94:	6922      	ldr	r2, [r4, #16]
 800db96:	bf0c      	ite	eq
 800db98:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800db9c:	2500      	movne	r5, #0
 800db9e:	4293      	cmp	r3, r2
 800dba0:	bfc4      	itt	gt
 800dba2:	1a9b      	subgt	r3, r3, r2
 800dba4:	18ed      	addgt	r5, r5, r3
 800dba6:	2600      	movs	r6, #0
 800dba8:	341a      	adds	r4, #26
 800dbaa:	42b5      	cmp	r5, r6
 800dbac:	d11a      	bne.n	800dbe4 <_printf_common+0xc8>
 800dbae:	2000      	movs	r0, #0
 800dbb0:	e008      	b.n	800dbc4 <_printf_common+0xa8>
 800dbb2:	2301      	movs	r3, #1
 800dbb4:	4652      	mov	r2, sl
 800dbb6:	4649      	mov	r1, r9
 800dbb8:	4638      	mov	r0, r7
 800dbba:	47c0      	blx	r8
 800dbbc:	3001      	adds	r0, #1
 800dbbe:	d103      	bne.n	800dbc8 <_printf_common+0xac>
 800dbc0:	f04f 30ff 	mov.w	r0, #4294967295
 800dbc4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800dbc8:	3501      	adds	r5, #1
 800dbca:	e7c6      	b.n	800db5a <_printf_common+0x3e>
 800dbcc:	18e1      	adds	r1, r4, r3
 800dbce:	1c5a      	adds	r2, r3, #1
 800dbd0:	2030      	movs	r0, #48	; 0x30
 800dbd2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800dbd6:	4422      	add	r2, r4
 800dbd8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800dbdc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800dbe0:	3302      	adds	r3, #2
 800dbe2:	e7c7      	b.n	800db74 <_printf_common+0x58>
 800dbe4:	2301      	movs	r3, #1
 800dbe6:	4622      	mov	r2, r4
 800dbe8:	4649      	mov	r1, r9
 800dbea:	4638      	mov	r0, r7
 800dbec:	47c0      	blx	r8
 800dbee:	3001      	adds	r0, #1
 800dbf0:	d0e6      	beq.n	800dbc0 <_printf_common+0xa4>
 800dbf2:	3601      	adds	r6, #1
 800dbf4:	e7d9      	b.n	800dbaa <_printf_common+0x8e>
	...

0800dbf8 <_printf_i>:
 800dbf8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800dbfc:	7e0f      	ldrb	r7, [r1, #24]
 800dbfe:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800dc00:	2f78      	cmp	r7, #120	; 0x78
 800dc02:	4691      	mov	r9, r2
 800dc04:	4680      	mov	r8, r0
 800dc06:	460c      	mov	r4, r1
 800dc08:	469a      	mov	sl, r3
 800dc0a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800dc0e:	d807      	bhi.n	800dc20 <_printf_i+0x28>
 800dc10:	2f62      	cmp	r7, #98	; 0x62
 800dc12:	d80a      	bhi.n	800dc2a <_printf_i+0x32>
 800dc14:	2f00      	cmp	r7, #0
 800dc16:	f000 80d8 	beq.w	800ddca <_printf_i+0x1d2>
 800dc1a:	2f58      	cmp	r7, #88	; 0x58
 800dc1c:	f000 80a3 	beq.w	800dd66 <_printf_i+0x16e>
 800dc20:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800dc24:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800dc28:	e03a      	b.n	800dca0 <_printf_i+0xa8>
 800dc2a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800dc2e:	2b15      	cmp	r3, #21
 800dc30:	d8f6      	bhi.n	800dc20 <_printf_i+0x28>
 800dc32:	a101      	add	r1, pc, #4	; (adr r1, 800dc38 <_printf_i+0x40>)
 800dc34:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800dc38:	0800dc91 	.word	0x0800dc91
 800dc3c:	0800dca5 	.word	0x0800dca5
 800dc40:	0800dc21 	.word	0x0800dc21
 800dc44:	0800dc21 	.word	0x0800dc21
 800dc48:	0800dc21 	.word	0x0800dc21
 800dc4c:	0800dc21 	.word	0x0800dc21
 800dc50:	0800dca5 	.word	0x0800dca5
 800dc54:	0800dc21 	.word	0x0800dc21
 800dc58:	0800dc21 	.word	0x0800dc21
 800dc5c:	0800dc21 	.word	0x0800dc21
 800dc60:	0800dc21 	.word	0x0800dc21
 800dc64:	0800ddb1 	.word	0x0800ddb1
 800dc68:	0800dcd5 	.word	0x0800dcd5
 800dc6c:	0800dd93 	.word	0x0800dd93
 800dc70:	0800dc21 	.word	0x0800dc21
 800dc74:	0800dc21 	.word	0x0800dc21
 800dc78:	0800ddd3 	.word	0x0800ddd3
 800dc7c:	0800dc21 	.word	0x0800dc21
 800dc80:	0800dcd5 	.word	0x0800dcd5
 800dc84:	0800dc21 	.word	0x0800dc21
 800dc88:	0800dc21 	.word	0x0800dc21
 800dc8c:	0800dd9b 	.word	0x0800dd9b
 800dc90:	682b      	ldr	r3, [r5, #0]
 800dc92:	1d1a      	adds	r2, r3, #4
 800dc94:	681b      	ldr	r3, [r3, #0]
 800dc96:	602a      	str	r2, [r5, #0]
 800dc98:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800dc9c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800dca0:	2301      	movs	r3, #1
 800dca2:	e0a3      	b.n	800ddec <_printf_i+0x1f4>
 800dca4:	6820      	ldr	r0, [r4, #0]
 800dca6:	6829      	ldr	r1, [r5, #0]
 800dca8:	0606      	lsls	r6, r0, #24
 800dcaa:	f101 0304 	add.w	r3, r1, #4
 800dcae:	d50a      	bpl.n	800dcc6 <_printf_i+0xce>
 800dcb0:	680e      	ldr	r6, [r1, #0]
 800dcb2:	602b      	str	r3, [r5, #0]
 800dcb4:	2e00      	cmp	r6, #0
 800dcb6:	da03      	bge.n	800dcc0 <_printf_i+0xc8>
 800dcb8:	232d      	movs	r3, #45	; 0x2d
 800dcba:	4276      	negs	r6, r6
 800dcbc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800dcc0:	485e      	ldr	r0, [pc, #376]	; (800de3c <_printf_i+0x244>)
 800dcc2:	230a      	movs	r3, #10
 800dcc4:	e019      	b.n	800dcfa <_printf_i+0x102>
 800dcc6:	680e      	ldr	r6, [r1, #0]
 800dcc8:	602b      	str	r3, [r5, #0]
 800dcca:	f010 0f40 	tst.w	r0, #64	; 0x40
 800dcce:	bf18      	it	ne
 800dcd0:	b236      	sxthne	r6, r6
 800dcd2:	e7ef      	b.n	800dcb4 <_printf_i+0xbc>
 800dcd4:	682b      	ldr	r3, [r5, #0]
 800dcd6:	6820      	ldr	r0, [r4, #0]
 800dcd8:	1d19      	adds	r1, r3, #4
 800dcda:	6029      	str	r1, [r5, #0]
 800dcdc:	0601      	lsls	r1, r0, #24
 800dcde:	d501      	bpl.n	800dce4 <_printf_i+0xec>
 800dce0:	681e      	ldr	r6, [r3, #0]
 800dce2:	e002      	b.n	800dcea <_printf_i+0xf2>
 800dce4:	0646      	lsls	r6, r0, #25
 800dce6:	d5fb      	bpl.n	800dce0 <_printf_i+0xe8>
 800dce8:	881e      	ldrh	r6, [r3, #0]
 800dcea:	4854      	ldr	r0, [pc, #336]	; (800de3c <_printf_i+0x244>)
 800dcec:	2f6f      	cmp	r7, #111	; 0x6f
 800dcee:	bf0c      	ite	eq
 800dcf0:	2308      	moveq	r3, #8
 800dcf2:	230a      	movne	r3, #10
 800dcf4:	2100      	movs	r1, #0
 800dcf6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800dcfa:	6865      	ldr	r5, [r4, #4]
 800dcfc:	60a5      	str	r5, [r4, #8]
 800dcfe:	2d00      	cmp	r5, #0
 800dd00:	bfa2      	ittt	ge
 800dd02:	6821      	ldrge	r1, [r4, #0]
 800dd04:	f021 0104 	bicge.w	r1, r1, #4
 800dd08:	6021      	strge	r1, [r4, #0]
 800dd0a:	b90e      	cbnz	r6, 800dd10 <_printf_i+0x118>
 800dd0c:	2d00      	cmp	r5, #0
 800dd0e:	d04d      	beq.n	800ddac <_printf_i+0x1b4>
 800dd10:	4615      	mov	r5, r2
 800dd12:	fbb6 f1f3 	udiv	r1, r6, r3
 800dd16:	fb03 6711 	mls	r7, r3, r1, r6
 800dd1a:	5dc7      	ldrb	r7, [r0, r7]
 800dd1c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800dd20:	4637      	mov	r7, r6
 800dd22:	42bb      	cmp	r3, r7
 800dd24:	460e      	mov	r6, r1
 800dd26:	d9f4      	bls.n	800dd12 <_printf_i+0x11a>
 800dd28:	2b08      	cmp	r3, #8
 800dd2a:	d10b      	bne.n	800dd44 <_printf_i+0x14c>
 800dd2c:	6823      	ldr	r3, [r4, #0]
 800dd2e:	07de      	lsls	r6, r3, #31
 800dd30:	d508      	bpl.n	800dd44 <_printf_i+0x14c>
 800dd32:	6923      	ldr	r3, [r4, #16]
 800dd34:	6861      	ldr	r1, [r4, #4]
 800dd36:	4299      	cmp	r1, r3
 800dd38:	bfde      	ittt	le
 800dd3a:	2330      	movle	r3, #48	; 0x30
 800dd3c:	f805 3c01 	strble.w	r3, [r5, #-1]
 800dd40:	f105 35ff 	addle.w	r5, r5, #4294967295
 800dd44:	1b52      	subs	r2, r2, r5
 800dd46:	6122      	str	r2, [r4, #16]
 800dd48:	f8cd a000 	str.w	sl, [sp]
 800dd4c:	464b      	mov	r3, r9
 800dd4e:	aa03      	add	r2, sp, #12
 800dd50:	4621      	mov	r1, r4
 800dd52:	4640      	mov	r0, r8
 800dd54:	f7ff fee2 	bl	800db1c <_printf_common>
 800dd58:	3001      	adds	r0, #1
 800dd5a:	d14c      	bne.n	800ddf6 <_printf_i+0x1fe>
 800dd5c:	f04f 30ff 	mov.w	r0, #4294967295
 800dd60:	b004      	add	sp, #16
 800dd62:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800dd66:	4835      	ldr	r0, [pc, #212]	; (800de3c <_printf_i+0x244>)
 800dd68:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800dd6c:	6829      	ldr	r1, [r5, #0]
 800dd6e:	6823      	ldr	r3, [r4, #0]
 800dd70:	f851 6b04 	ldr.w	r6, [r1], #4
 800dd74:	6029      	str	r1, [r5, #0]
 800dd76:	061d      	lsls	r5, r3, #24
 800dd78:	d514      	bpl.n	800dda4 <_printf_i+0x1ac>
 800dd7a:	07df      	lsls	r7, r3, #31
 800dd7c:	bf44      	itt	mi
 800dd7e:	f043 0320 	orrmi.w	r3, r3, #32
 800dd82:	6023      	strmi	r3, [r4, #0]
 800dd84:	b91e      	cbnz	r6, 800dd8e <_printf_i+0x196>
 800dd86:	6823      	ldr	r3, [r4, #0]
 800dd88:	f023 0320 	bic.w	r3, r3, #32
 800dd8c:	6023      	str	r3, [r4, #0]
 800dd8e:	2310      	movs	r3, #16
 800dd90:	e7b0      	b.n	800dcf4 <_printf_i+0xfc>
 800dd92:	6823      	ldr	r3, [r4, #0]
 800dd94:	f043 0320 	orr.w	r3, r3, #32
 800dd98:	6023      	str	r3, [r4, #0]
 800dd9a:	2378      	movs	r3, #120	; 0x78
 800dd9c:	4828      	ldr	r0, [pc, #160]	; (800de40 <_printf_i+0x248>)
 800dd9e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800dda2:	e7e3      	b.n	800dd6c <_printf_i+0x174>
 800dda4:	0659      	lsls	r1, r3, #25
 800dda6:	bf48      	it	mi
 800dda8:	b2b6      	uxthmi	r6, r6
 800ddaa:	e7e6      	b.n	800dd7a <_printf_i+0x182>
 800ddac:	4615      	mov	r5, r2
 800ddae:	e7bb      	b.n	800dd28 <_printf_i+0x130>
 800ddb0:	682b      	ldr	r3, [r5, #0]
 800ddb2:	6826      	ldr	r6, [r4, #0]
 800ddb4:	6961      	ldr	r1, [r4, #20]
 800ddb6:	1d18      	adds	r0, r3, #4
 800ddb8:	6028      	str	r0, [r5, #0]
 800ddba:	0635      	lsls	r5, r6, #24
 800ddbc:	681b      	ldr	r3, [r3, #0]
 800ddbe:	d501      	bpl.n	800ddc4 <_printf_i+0x1cc>
 800ddc0:	6019      	str	r1, [r3, #0]
 800ddc2:	e002      	b.n	800ddca <_printf_i+0x1d2>
 800ddc4:	0670      	lsls	r0, r6, #25
 800ddc6:	d5fb      	bpl.n	800ddc0 <_printf_i+0x1c8>
 800ddc8:	8019      	strh	r1, [r3, #0]
 800ddca:	2300      	movs	r3, #0
 800ddcc:	6123      	str	r3, [r4, #16]
 800ddce:	4615      	mov	r5, r2
 800ddd0:	e7ba      	b.n	800dd48 <_printf_i+0x150>
 800ddd2:	682b      	ldr	r3, [r5, #0]
 800ddd4:	1d1a      	adds	r2, r3, #4
 800ddd6:	602a      	str	r2, [r5, #0]
 800ddd8:	681d      	ldr	r5, [r3, #0]
 800ddda:	6862      	ldr	r2, [r4, #4]
 800dddc:	2100      	movs	r1, #0
 800ddde:	4628      	mov	r0, r5
 800dde0:	f7f2 fa06 	bl	80001f0 <memchr>
 800dde4:	b108      	cbz	r0, 800ddea <_printf_i+0x1f2>
 800dde6:	1b40      	subs	r0, r0, r5
 800dde8:	6060      	str	r0, [r4, #4]
 800ddea:	6863      	ldr	r3, [r4, #4]
 800ddec:	6123      	str	r3, [r4, #16]
 800ddee:	2300      	movs	r3, #0
 800ddf0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ddf4:	e7a8      	b.n	800dd48 <_printf_i+0x150>
 800ddf6:	6923      	ldr	r3, [r4, #16]
 800ddf8:	462a      	mov	r2, r5
 800ddfa:	4649      	mov	r1, r9
 800ddfc:	4640      	mov	r0, r8
 800ddfe:	47d0      	blx	sl
 800de00:	3001      	adds	r0, #1
 800de02:	d0ab      	beq.n	800dd5c <_printf_i+0x164>
 800de04:	6823      	ldr	r3, [r4, #0]
 800de06:	079b      	lsls	r3, r3, #30
 800de08:	d413      	bmi.n	800de32 <_printf_i+0x23a>
 800de0a:	68e0      	ldr	r0, [r4, #12]
 800de0c:	9b03      	ldr	r3, [sp, #12]
 800de0e:	4298      	cmp	r0, r3
 800de10:	bfb8      	it	lt
 800de12:	4618      	movlt	r0, r3
 800de14:	e7a4      	b.n	800dd60 <_printf_i+0x168>
 800de16:	2301      	movs	r3, #1
 800de18:	4632      	mov	r2, r6
 800de1a:	4649      	mov	r1, r9
 800de1c:	4640      	mov	r0, r8
 800de1e:	47d0      	blx	sl
 800de20:	3001      	adds	r0, #1
 800de22:	d09b      	beq.n	800dd5c <_printf_i+0x164>
 800de24:	3501      	adds	r5, #1
 800de26:	68e3      	ldr	r3, [r4, #12]
 800de28:	9903      	ldr	r1, [sp, #12]
 800de2a:	1a5b      	subs	r3, r3, r1
 800de2c:	42ab      	cmp	r3, r5
 800de2e:	dcf2      	bgt.n	800de16 <_printf_i+0x21e>
 800de30:	e7eb      	b.n	800de0a <_printf_i+0x212>
 800de32:	2500      	movs	r5, #0
 800de34:	f104 0619 	add.w	r6, r4, #25
 800de38:	e7f5      	b.n	800de26 <_printf_i+0x22e>
 800de3a:	bf00      	nop
 800de3c:	0800e67d 	.word	0x0800e67d
 800de40:	0800e68e 	.word	0x0800e68e

0800de44 <memcpy>:
 800de44:	440a      	add	r2, r1
 800de46:	4291      	cmp	r1, r2
 800de48:	f100 33ff 	add.w	r3, r0, #4294967295
 800de4c:	d100      	bne.n	800de50 <memcpy+0xc>
 800de4e:	4770      	bx	lr
 800de50:	b510      	push	{r4, lr}
 800de52:	f811 4b01 	ldrb.w	r4, [r1], #1
 800de56:	f803 4f01 	strb.w	r4, [r3, #1]!
 800de5a:	4291      	cmp	r1, r2
 800de5c:	d1f9      	bne.n	800de52 <memcpy+0xe>
 800de5e:	bd10      	pop	{r4, pc}

0800de60 <memmove>:
 800de60:	4288      	cmp	r0, r1
 800de62:	b510      	push	{r4, lr}
 800de64:	eb01 0402 	add.w	r4, r1, r2
 800de68:	d902      	bls.n	800de70 <memmove+0x10>
 800de6a:	4284      	cmp	r4, r0
 800de6c:	4623      	mov	r3, r4
 800de6e:	d807      	bhi.n	800de80 <memmove+0x20>
 800de70:	1e43      	subs	r3, r0, #1
 800de72:	42a1      	cmp	r1, r4
 800de74:	d008      	beq.n	800de88 <memmove+0x28>
 800de76:	f811 2b01 	ldrb.w	r2, [r1], #1
 800de7a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800de7e:	e7f8      	b.n	800de72 <memmove+0x12>
 800de80:	4402      	add	r2, r0
 800de82:	4601      	mov	r1, r0
 800de84:	428a      	cmp	r2, r1
 800de86:	d100      	bne.n	800de8a <memmove+0x2a>
 800de88:	bd10      	pop	{r4, pc}
 800de8a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800de8e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800de92:	e7f7      	b.n	800de84 <memmove+0x24>

0800de94 <_free_r>:
 800de94:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800de96:	2900      	cmp	r1, #0
 800de98:	d044      	beq.n	800df24 <_free_r+0x90>
 800de9a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800de9e:	9001      	str	r0, [sp, #4]
 800dea0:	2b00      	cmp	r3, #0
 800dea2:	f1a1 0404 	sub.w	r4, r1, #4
 800dea6:	bfb8      	it	lt
 800dea8:	18e4      	addlt	r4, r4, r3
 800deaa:	f000 f913 	bl	800e0d4 <__malloc_lock>
 800deae:	4a1e      	ldr	r2, [pc, #120]	; (800df28 <_free_r+0x94>)
 800deb0:	9801      	ldr	r0, [sp, #4]
 800deb2:	6813      	ldr	r3, [r2, #0]
 800deb4:	b933      	cbnz	r3, 800dec4 <_free_r+0x30>
 800deb6:	6063      	str	r3, [r4, #4]
 800deb8:	6014      	str	r4, [r2, #0]
 800deba:	b003      	add	sp, #12
 800debc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800dec0:	f000 b90e 	b.w	800e0e0 <__malloc_unlock>
 800dec4:	42a3      	cmp	r3, r4
 800dec6:	d908      	bls.n	800deda <_free_r+0x46>
 800dec8:	6825      	ldr	r5, [r4, #0]
 800deca:	1961      	adds	r1, r4, r5
 800decc:	428b      	cmp	r3, r1
 800dece:	bf01      	itttt	eq
 800ded0:	6819      	ldreq	r1, [r3, #0]
 800ded2:	685b      	ldreq	r3, [r3, #4]
 800ded4:	1949      	addeq	r1, r1, r5
 800ded6:	6021      	streq	r1, [r4, #0]
 800ded8:	e7ed      	b.n	800deb6 <_free_r+0x22>
 800deda:	461a      	mov	r2, r3
 800dedc:	685b      	ldr	r3, [r3, #4]
 800dede:	b10b      	cbz	r3, 800dee4 <_free_r+0x50>
 800dee0:	42a3      	cmp	r3, r4
 800dee2:	d9fa      	bls.n	800deda <_free_r+0x46>
 800dee4:	6811      	ldr	r1, [r2, #0]
 800dee6:	1855      	adds	r5, r2, r1
 800dee8:	42a5      	cmp	r5, r4
 800deea:	d10b      	bne.n	800df04 <_free_r+0x70>
 800deec:	6824      	ldr	r4, [r4, #0]
 800deee:	4421      	add	r1, r4
 800def0:	1854      	adds	r4, r2, r1
 800def2:	42a3      	cmp	r3, r4
 800def4:	6011      	str	r1, [r2, #0]
 800def6:	d1e0      	bne.n	800deba <_free_r+0x26>
 800def8:	681c      	ldr	r4, [r3, #0]
 800defa:	685b      	ldr	r3, [r3, #4]
 800defc:	6053      	str	r3, [r2, #4]
 800defe:	4421      	add	r1, r4
 800df00:	6011      	str	r1, [r2, #0]
 800df02:	e7da      	b.n	800deba <_free_r+0x26>
 800df04:	d902      	bls.n	800df0c <_free_r+0x78>
 800df06:	230c      	movs	r3, #12
 800df08:	6003      	str	r3, [r0, #0]
 800df0a:	e7d6      	b.n	800deba <_free_r+0x26>
 800df0c:	6825      	ldr	r5, [r4, #0]
 800df0e:	1961      	adds	r1, r4, r5
 800df10:	428b      	cmp	r3, r1
 800df12:	bf04      	itt	eq
 800df14:	6819      	ldreq	r1, [r3, #0]
 800df16:	685b      	ldreq	r3, [r3, #4]
 800df18:	6063      	str	r3, [r4, #4]
 800df1a:	bf04      	itt	eq
 800df1c:	1949      	addeq	r1, r1, r5
 800df1e:	6021      	streq	r1, [r4, #0]
 800df20:	6054      	str	r4, [r2, #4]
 800df22:	e7ca      	b.n	800deba <_free_r+0x26>
 800df24:	b003      	add	sp, #12
 800df26:	bd30      	pop	{r4, r5, pc}
 800df28:	200170bc 	.word	0x200170bc

0800df2c <sbrk_aligned>:
 800df2c:	b570      	push	{r4, r5, r6, lr}
 800df2e:	4e0e      	ldr	r6, [pc, #56]	; (800df68 <sbrk_aligned+0x3c>)
 800df30:	460c      	mov	r4, r1
 800df32:	6831      	ldr	r1, [r6, #0]
 800df34:	4605      	mov	r5, r0
 800df36:	b911      	cbnz	r1, 800df3e <sbrk_aligned+0x12>
 800df38:	f000 f8bc 	bl	800e0b4 <_sbrk_r>
 800df3c:	6030      	str	r0, [r6, #0]
 800df3e:	4621      	mov	r1, r4
 800df40:	4628      	mov	r0, r5
 800df42:	f000 f8b7 	bl	800e0b4 <_sbrk_r>
 800df46:	1c43      	adds	r3, r0, #1
 800df48:	d00a      	beq.n	800df60 <sbrk_aligned+0x34>
 800df4a:	1cc4      	adds	r4, r0, #3
 800df4c:	f024 0403 	bic.w	r4, r4, #3
 800df50:	42a0      	cmp	r0, r4
 800df52:	d007      	beq.n	800df64 <sbrk_aligned+0x38>
 800df54:	1a21      	subs	r1, r4, r0
 800df56:	4628      	mov	r0, r5
 800df58:	f000 f8ac 	bl	800e0b4 <_sbrk_r>
 800df5c:	3001      	adds	r0, #1
 800df5e:	d101      	bne.n	800df64 <sbrk_aligned+0x38>
 800df60:	f04f 34ff 	mov.w	r4, #4294967295
 800df64:	4620      	mov	r0, r4
 800df66:	bd70      	pop	{r4, r5, r6, pc}
 800df68:	200170c0 	.word	0x200170c0

0800df6c <_malloc_r>:
 800df6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800df70:	1ccd      	adds	r5, r1, #3
 800df72:	f025 0503 	bic.w	r5, r5, #3
 800df76:	3508      	adds	r5, #8
 800df78:	2d0c      	cmp	r5, #12
 800df7a:	bf38      	it	cc
 800df7c:	250c      	movcc	r5, #12
 800df7e:	2d00      	cmp	r5, #0
 800df80:	4607      	mov	r7, r0
 800df82:	db01      	blt.n	800df88 <_malloc_r+0x1c>
 800df84:	42a9      	cmp	r1, r5
 800df86:	d905      	bls.n	800df94 <_malloc_r+0x28>
 800df88:	230c      	movs	r3, #12
 800df8a:	603b      	str	r3, [r7, #0]
 800df8c:	2600      	movs	r6, #0
 800df8e:	4630      	mov	r0, r6
 800df90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800df94:	4e2e      	ldr	r6, [pc, #184]	; (800e050 <_malloc_r+0xe4>)
 800df96:	f000 f89d 	bl	800e0d4 <__malloc_lock>
 800df9a:	6833      	ldr	r3, [r6, #0]
 800df9c:	461c      	mov	r4, r3
 800df9e:	bb34      	cbnz	r4, 800dfee <_malloc_r+0x82>
 800dfa0:	4629      	mov	r1, r5
 800dfa2:	4638      	mov	r0, r7
 800dfa4:	f7ff ffc2 	bl	800df2c <sbrk_aligned>
 800dfa8:	1c43      	adds	r3, r0, #1
 800dfaa:	4604      	mov	r4, r0
 800dfac:	d14d      	bne.n	800e04a <_malloc_r+0xde>
 800dfae:	6834      	ldr	r4, [r6, #0]
 800dfb0:	4626      	mov	r6, r4
 800dfb2:	2e00      	cmp	r6, #0
 800dfb4:	d140      	bne.n	800e038 <_malloc_r+0xcc>
 800dfb6:	6823      	ldr	r3, [r4, #0]
 800dfb8:	4631      	mov	r1, r6
 800dfba:	4638      	mov	r0, r7
 800dfbc:	eb04 0803 	add.w	r8, r4, r3
 800dfc0:	f000 f878 	bl	800e0b4 <_sbrk_r>
 800dfc4:	4580      	cmp	r8, r0
 800dfc6:	d13a      	bne.n	800e03e <_malloc_r+0xd2>
 800dfc8:	6821      	ldr	r1, [r4, #0]
 800dfca:	3503      	adds	r5, #3
 800dfcc:	1a6d      	subs	r5, r5, r1
 800dfce:	f025 0503 	bic.w	r5, r5, #3
 800dfd2:	3508      	adds	r5, #8
 800dfd4:	2d0c      	cmp	r5, #12
 800dfd6:	bf38      	it	cc
 800dfd8:	250c      	movcc	r5, #12
 800dfda:	4629      	mov	r1, r5
 800dfdc:	4638      	mov	r0, r7
 800dfde:	f7ff ffa5 	bl	800df2c <sbrk_aligned>
 800dfe2:	3001      	adds	r0, #1
 800dfe4:	d02b      	beq.n	800e03e <_malloc_r+0xd2>
 800dfe6:	6823      	ldr	r3, [r4, #0]
 800dfe8:	442b      	add	r3, r5
 800dfea:	6023      	str	r3, [r4, #0]
 800dfec:	e00e      	b.n	800e00c <_malloc_r+0xa0>
 800dfee:	6822      	ldr	r2, [r4, #0]
 800dff0:	1b52      	subs	r2, r2, r5
 800dff2:	d41e      	bmi.n	800e032 <_malloc_r+0xc6>
 800dff4:	2a0b      	cmp	r2, #11
 800dff6:	d916      	bls.n	800e026 <_malloc_r+0xba>
 800dff8:	1961      	adds	r1, r4, r5
 800dffa:	42a3      	cmp	r3, r4
 800dffc:	6025      	str	r5, [r4, #0]
 800dffe:	bf18      	it	ne
 800e000:	6059      	strne	r1, [r3, #4]
 800e002:	6863      	ldr	r3, [r4, #4]
 800e004:	bf08      	it	eq
 800e006:	6031      	streq	r1, [r6, #0]
 800e008:	5162      	str	r2, [r4, r5]
 800e00a:	604b      	str	r3, [r1, #4]
 800e00c:	4638      	mov	r0, r7
 800e00e:	f104 060b 	add.w	r6, r4, #11
 800e012:	f000 f865 	bl	800e0e0 <__malloc_unlock>
 800e016:	f026 0607 	bic.w	r6, r6, #7
 800e01a:	1d23      	adds	r3, r4, #4
 800e01c:	1af2      	subs	r2, r6, r3
 800e01e:	d0b6      	beq.n	800df8e <_malloc_r+0x22>
 800e020:	1b9b      	subs	r3, r3, r6
 800e022:	50a3      	str	r3, [r4, r2]
 800e024:	e7b3      	b.n	800df8e <_malloc_r+0x22>
 800e026:	6862      	ldr	r2, [r4, #4]
 800e028:	42a3      	cmp	r3, r4
 800e02a:	bf0c      	ite	eq
 800e02c:	6032      	streq	r2, [r6, #0]
 800e02e:	605a      	strne	r2, [r3, #4]
 800e030:	e7ec      	b.n	800e00c <_malloc_r+0xa0>
 800e032:	4623      	mov	r3, r4
 800e034:	6864      	ldr	r4, [r4, #4]
 800e036:	e7b2      	b.n	800df9e <_malloc_r+0x32>
 800e038:	4634      	mov	r4, r6
 800e03a:	6876      	ldr	r6, [r6, #4]
 800e03c:	e7b9      	b.n	800dfb2 <_malloc_r+0x46>
 800e03e:	230c      	movs	r3, #12
 800e040:	603b      	str	r3, [r7, #0]
 800e042:	4638      	mov	r0, r7
 800e044:	f000 f84c 	bl	800e0e0 <__malloc_unlock>
 800e048:	e7a1      	b.n	800df8e <_malloc_r+0x22>
 800e04a:	6025      	str	r5, [r4, #0]
 800e04c:	e7de      	b.n	800e00c <_malloc_r+0xa0>
 800e04e:	bf00      	nop
 800e050:	200170bc 	.word	0x200170bc

0800e054 <_realloc_r>:
 800e054:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e058:	4680      	mov	r8, r0
 800e05a:	4614      	mov	r4, r2
 800e05c:	460e      	mov	r6, r1
 800e05e:	b921      	cbnz	r1, 800e06a <_realloc_r+0x16>
 800e060:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e064:	4611      	mov	r1, r2
 800e066:	f7ff bf81 	b.w	800df6c <_malloc_r>
 800e06a:	b92a      	cbnz	r2, 800e078 <_realloc_r+0x24>
 800e06c:	f7ff ff12 	bl	800de94 <_free_r>
 800e070:	4625      	mov	r5, r4
 800e072:	4628      	mov	r0, r5
 800e074:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e078:	f000 f838 	bl	800e0ec <_malloc_usable_size_r>
 800e07c:	4284      	cmp	r4, r0
 800e07e:	4607      	mov	r7, r0
 800e080:	d802      	bhi.n	800e088 <_realloc_r+0x34>
 800e082:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800e086:	d812      	bhi.n	800e0ae <_realloc_r+0x5a>
 800e088:	4621      	mov	r1, r4
 800e08a:	4640      	mov	r0, r8
 800e08c:	f7ff ff6e 	bl	800df6c <_malloc_r>
 800e090:	4605      	mov	r5, r0
 800e092:	2800      	cmp	r0, #0
 800e094:	d0ed      	beq.n	800e072 <_realloc_r+0x1e>
 800e096:	42bc      	cmp	r4, r7
 800e098:	4622      	mov	r2, r4
 800e09a:	4631      	mov	r1, r6
 800e09c:	bf28      	it	cs
 800e09e:	463a      	movcs	r2, r7
 800e0a0:	f7ff fed0 	bl	800de44 <memcpy>
 800e0a4:	4631      	mov	r1, r6
 800e0a6:	4640      	mov	r0, r8
 800e0a8:	f7ff fef4 	bl	800de94 <_free_r>
 800e0ac:	e7e1      	b.n	800e072 <_realloc_r+0x1e>
 800e0ae:	4635      	mov	r5, r6
 800e0b0:	e7df      	b.n	800e072 <_realloc_r+0x1e>
	...

0800e0b4 <_sbrk_r>:
 800e0b4:	b538      	push	{r3, r4, r5, lr}
 800e0b6:	4d06      	ldr	r5, [pc, #24]	; (800e0d0 <_sbrk_r+0x1c>)
 800e0b8:	2300      	movs	r3, #0
 800e0ba:	4604      	mov	r4, r0
 800e0bc:	4608      	mov	r0, r1
 800e0be:	602b      	str	r3, [r5, #0]
 800e0c0:	f7f3 fdca 	bl	8001c58 <_sbrk>
 800e0c4:	1c43      	adds	r3, r0, #1
 800e0c6:	d102      	bne.n	800e0ce <_sbrk_r+0x1a>
 800e0c8:	682b      	ldr	r3, [r5, #0]
 800e0ca:	b103      	cbz	r3, 800e0ce <_sbrk_r+0x1a>
 800e0cc:	6023      	str	r3, [r4, #0]
 800e0ce:	bd38      	pop	{r3, r4, r5, pc}
 800e0d0:	200170c4 	.word	0x200170c4

0800e0d4 <__malloc_lock>:
 800e0d4:	4801      	ldr	r0, [pc, #4]	; (800e0dc <__malloc_lock+0x8>)
 800e0d6:	f000 b811 	b.w	800e0fc <__retarget_lock_acquire_recursive>
 800e0da:	bf00      	nop
 800e0dc:	200170c8 	.word	0x200170c8

0800e0e0 <__malloc_unlock>:
 800e0e0:	4801      	ldr	r0, [pc, #4]	; (800e0e8 <__malloc_unlock+0x8>)
 800e0e2:	f000 b80c 	b.w	800e0fe <__retarget_lock_release_recursive>
 800e0e6:	bf00      	nop
 800e0e8:	200170c8 	.word	0x200170c8

0800e0ec <_malloc_usable_size_r>:
 800e0ec:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e0f0:	1f18      	subs	r0, r3, #4
 800e0f2:	2b00      	cmp	r3, #0
 800e0f4:	bfbc      	itt	lt
 800e0f6:	580b      	ldrlt	r3, [r1, r0]
 800e0f8:	18c0      	addlt	r0, r0, r3
 800e0fa:	4770      	bx	lr

0800e0fc <__retarget_lock_acquire_recursive>:
 800e0fc:	4770      	bx	lr

0800e0fe <__retarget_lock_release_recursive>:
 800e0fe:	4770      	bx	lr

0800e100 <_init>:
 800e100:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e102:	bf00      	nop
 800e104:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e106:	bc08      	pop	{r3}
 800e108:	469e      	mov	lr, r3
 800e10a:	4770      	bx	lr

0800e10c <_fini>:
 800e10c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e10e:	bf00      	nop
 800e110:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e112:	bc08      	pop	{r3}
 800e114:	469e      	mov	lr, r3
 800e116:	4770      	bx	lr
