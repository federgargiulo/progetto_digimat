
Digimat_dataloger_v1.1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008e04  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000568  08008fa4  08008fa4  00018fa4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800950c  0800950c  00020148  2**0
                  CONTENTS
  4 .ARM          00000008  0800950c  0800950c  0001950c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009514  08009514  00020148  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009514  08009514  00019514  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009518  08009518  00019518  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000148  20000000  0800951c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00016f60  20000148  08009664  00020148  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200170a8  08009664  000270a8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020148  2**0
                  CONTENTS, READONLY
 12 .debug_info   0004b25a  00000000  00000000  00020178  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000046c7  00000000  00000000  0006b3d2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loc    0002ff18  00000000  00000000  0006fa99  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00002a28  00000000  00000000  0009f9b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000029a0  00000000  00000000  000a23e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001b282  00000000  00000000  000a4d80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00037912  00000000  00000000  000c0002  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000a23ea  00000000  00000000  000f7914  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00199cfe  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00009540  00000000  00000000  00199d50  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000148 	.word	0x20000148
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08008f8c 	.word	0x08008f8c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000014c 	.word	0x2000014c
 80001dc:	08008f8c 	.word	0x08008f8c

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b974 	b.w	8000590 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	4604      	mov	r4, r0
 80002c8:	468e      	mov	lr, r1
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	d14d      	bne.n	800036a <__udivmoddi4+0xaa>
 80002ce:	428a      	cmp	r2, r1
 80002d0:	4694      	mov	ip, r2
 80002d2:	d969      	bls.n	80003a8 <__udivmoddi4+0xe8>
 80002d4:	fab2 f282 	clz	r2, r2
 80002d8:	b152      	cbz	r2, 80002f0 <__udivmoddi4+0x30>
 80002da:	fa01 f302 	lsl.w	r3, r1, r2
 80002de:	f1c2 0120 	rsb	r1, r2, #32
 80002e2:	fa20 f101 	lsr.w	r1, r0, r1
 80002e6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002ea:	ea41 0e03 	orr.w	lr, r1, r3
 80002ee:	4094      	lsls	r4, r2
 80002f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002f4:	0c21      	lsrs	r1, r4, #16
 80002f6:	fbbe f6f8 	udiv	r6, lr, r8
 80002fa:	fa1f f78c 	uxth.w	r7, ip
 80002fe:	fb08 e316 	mls	r3, r8, r6, lr
 8000302:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000306:	fb06 f107 	mul.w	r1, r6, r7
 800030a:	4299      	cmp	r1, r3
 800030c:	d90a      	bls.n	8000324 <__udivmoddi4+0x64>
 800030e:	eb1c 0303 	adds.w	r3, ip, r3
 8000312:	f106 30ff 	add.w	r0, r6, #4294967295
 8000316:	f080 811f 	bcs.w	8000558 <__udivmoddi4+0x298>
 800031a:	4299      	cmp	r1, r3
 800031c:	f240 811c 	bls.w	8000558 <__udivmoddi4+0x298>
 8000320:	3e02      	subs	r6, #2
 8000322:	4463      	add	r3, ip
 8000324:	1a5b      	subs	r3, r3, r1
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb3 f0f8 	udiv	r0, r3, r8
 800032c:	fb08 3310 	mls	r3, r8, r0, r3
 8000330:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000334:	fb00 f707 	mul.w	r7, r0, r7
 8000338:	42a7      	cmp	r7, r4
 800033a:	d90a      	bls.n	8000352 <__udivmoddi4+0x92>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 33ff 	add.w	r3, r0, #4294967295
 8000344:	f080 810a 	bcs.w	800055c <__udivmoddi4+0x29c>
 8000348:	42a7      	cmp	r7, r4
 800034a:	f240 8107 	bls.w	800055c <__udivmoddi4+0x29c>
 800034e:	4464      	add	r4, ip
 8000350:	3802      	subs	r0, #2
 8000352:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000356:	1be4      	subs	r4, r4, r7
 8000358:	2600      	movs	r6, #0
 800035a:	b11d      	cbz	r5, 8000364 <__udivmoddi4+0xa4>
 800035c:	40d4      	lsrs	r4, r2
 800035e:	2300      	movs	r3, #0
 8000360:	e9c5 4300 	strd	r4, r3, [r5]
 8000364:	4631      	mov	r1, r6
 8000366:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036a:	428b      	cmp	r3, r1
 800036c:	d909      	bls.n	8000382 <__udivmoddi4+0xc2>
 800036e:	2d00      	cmp	r5, #0
 8000370:	f000 80ef 	beq.w	8000552 <__udivmoddi4+0x292>
 8000374:	2600      	movs	r6, #0
 8000376:	e9c5 0100 	strd	r0, r1, [r5]
 800037a:	4630      	mov	r0, r6
 800037c:	4631      	mov	r1, r6
 800037e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000382:	fab3 f683 	clz	r6, r3
 8000386:	2e00      	cmp	r6, #0
 8000388:	d14a      	bne.n	8000420 <__udivmoddi4+0x160>
 800038a:	428b      	cmp	r3, r1
 800038c:	d302      	bcc.n	8000394 <__udivmoddi4+0xd4>
 800038e:	4282      	cmp	r2, r0
 8000390:	f200 80f9 	bhi.w	8000586 <__udivmoddi4+0x2c6>
 8000394:	1a84      	subs	r4, r0, r2
 8000396:	eb61 0303 	sbc.w	r3, r1, r3
 800039a:	2001      	movs	r0, #1
 800039c:	469e      	mov	lr, r3
 800039e:	2d00      	cmp	r5, #0
 80003a0:	d0e0      	beq.n	8000364 <__udivmoddi4+0xa4>
 80003a2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003a6:	e7dd      	b.n	8000364 <__udivmoddi4+0xa4>
 80003a8:	b902      	cbnz	r2, 80003ac <__udivmoddi4+0xec>
 80003aa:	deff      	udf	#255	; 0xff
 80003ac:	fab2 f282 	clz	r2, r2
 80003b0:	2a00      	cmp	r2, #0
 80003b2:	f040 8092 	bne.w	80004da <__udivmoddi4+0x21a>
 80003b6:	eba1 010c 	sub.w	r1, r1, ip
 80003ba:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003be:	fa1f fe8c 	uxth.w	lr, ip
 80003c2:	2601      	movs	r6, #1
 80003c4:	0c20      	lsrs	r0, r4, #16
 80003c6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ca:	fb07 1113 	mls	r1, r7, r3, r1
 80003ce:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003d2:	fb0e f003 	mul.w	r0, lr, r3
 80003d6:	4288      	cmp	r0, r1
 80003d8:	d908      	bls.n	80003ec <__udivmoddi4+0x12c>
 80003da:	eb1c 0101 	adds.w	r1, ip, r1
 80003de:	f103 38ff 	add.w	r8, r3, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x12a>
 80003e4:	4288      	cmp	r0, r1
 80003e6:	f200 80cb 	bhi.w	8000580 <__udivmoddi4+0x2c0>
 80003ea:	4643      	mov	r3, r8
 80003ec:	1a09      	subs	r1, r1, r0
 80003ee:	b2a4      	uxth	r4, r4
 80003f0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003f4:	fb07 1110 	mls	r1, r7, r0, r1
 80003f8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003fc:	fb0e fe00 	mul.w	lr, lr, r0
 8000400:	45a6      	cmp	lr, r4
 8000402:	d908      	bls.n	8000416 <__udivmoddi4+0x156>
 8000404:	eb1c 0404 	adds.w	r4, ip, r4
 8000408:	f100 31ff 	add.w	r1, r0, #4294967295
 800040c:	d202      	bcs.n	8000414 <__udivmoddi4+0x154>
 800040e:	45a6      	cmp	lr, r4
 8000410:	f200 80bb 	bhi.w	800058a <__udivmoddi4+0x2ca>
 8000414:	4608      	mov	r0, r1
 8000416:	eba4 040e 	sub.w	r4, r4, lr
 800041a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800041e:	e79c      	b.n	800035a <__udivmoddi4+0x9a>
 8000420:	f1c6 0720 	rsb	r7, r6, #32
 8000424:	40b3      	lsls	r3, r6
 8000426:	fa22 fc07 	lsr.w	ip, r2, r7
 800042a:	ea4c 0c03 	orr.w	ip, ip, r3
 800042e:	fa20 f407 	lsr.w	r4, r0, r7
 8000432:	fa01 f306 	lsl.w	r3, r1, r6
 8000436:	431c      	orrs	r4, r3
 8000438:	40f9      	lsrs	r1, r7
 800043a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800043e:	fa00 f306 	lsl.w	r3, r0, r6
 8000442:	fbb1 f8f9 	udiv	r8, r1, r9
 8000446:	0c20      	lsrs	r0, r4, #16
 8000448:	fa1f fe8c 	uxth.w	lr, ip
 800044c:	fb09 1118 	mls	r1, r9, r8, r1
 8000450:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000454:	fb08 f00e 	mul.w	r0, r8, lr
 8000458:	4288      	cmp	r0, r1
 800045a:	fa02 f206 	lsl.w	r2, r2, r6
 800045e:	d90b      	bls.n	8000478 <__udivmoddi4+0x1b8>
 8000460:	eb1c 0101 	adds.w	r1, ip, r1
 8000464:	f108 3aff 	add.w	sl, r8, #4294967295
 8000468:	f080 8088 	bcs.w	800057c <__udivmoddi4+0x2bc>
 800046c:	4288      	cmp	r0, r1
 800046e:	f240 8085 	bls.w	800057c <__udivmoddi4+0x2bc>
 8000472:	f1a8 0802 	sub.w	r8, r8, #2
 8000476:	4461      	add	r1, ip
 8000478:	1a09      	subs	r1, r1, r0
 800047a:	b2a4      	uxth	r4, r4
 800047c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000480:	fb09 1110 	mls	r1, r9, r0, r1
 8000484:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000488:	fb00 fe0e 	mul.w	lr, r0, lr
 800048c:	458e      	cmp	lr, r1
 800048e:	d908      	bls.n	80004a2 <__udivmoddi4+0x1e2>
 8000490:	eb1c 0101 	adds.w	r1, ip, r1
 8000494:	f100 34ff 	add.w	r4, r0, #4294967295
 8000498:	d26c      	bcs.n	8000574 <__udivmoddi4+0x2b4>
 800049a:	458e      	cmp	lr, r1
 800049c:	d96a      	bls.n	8000574 <__udivmoddi4+0x2b4>
 800049e:	3802      	subs	r0, #2
 80004a0:	4461      	add	r1, ip
 80004a2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004a6:	fba0 9402 	umull	r9, r4, r0, r2
 80004aa:	eba1 010e 	sub.w	r1, r1, lr
 80004ae:	42a1      	cmp	r1, r4
 80004b0:	46c8      	mov	r8, r9
 80004b2:	46a6      	mov	lr, r4
 80004b4:	d356      	bcc.n	8000564 <__udivmoddi4+0x2a4>
 80004b6:	d053      	beq.n	8000560 <__udivmoddi4+0x2a0>
 80004b8:	b15d      	cbz	r5, 80004d2 <__udivmoddi4+0x212>
 80004ba:	ebb3 0208 	subs.w	r2, r3, r8
 80004be:	eb61 010e 	sbc.w	r1, r1, lr
 80004c2:	fa01 f707 	lsl.w	r7, r1, r7
 80004c6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ca:	40f1      	lsrs	r1, r6
 80004cc:	431f      	orrs	r7, r3
 80004ce:	e9c5 7100 	strd	r7, r1, [r5]
 80004d2:	2600      	movs	r6, #0
 80004d4:	4631      	mov	r1, r6
 80004d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004da:	f1c2 0320 	rsb	r3, r2, #32
 80004de:	40d8      	lsrs	r0, r3
 80004e0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004e4:	fa21 f303 	lsr.w	r3, r1, r3
 80004e8:	4091      	lsls	r1, r2
 80004ea:	4301      	orrs	r1, r0
 80004ec:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004f0:	fa1f fe8c 	uxth.w	lr, ip
 80004f4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004f8:	fb07 3610 	mls	r6, r7, r0, r3
 80004fc:	0c0b      	lsrs	r3, r1, #16
 80004fe:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000502:	fb00 f60e 	mul.w	r6, r0, lr
 8000506:	429e      	cmp	r6, r3
 8000508:	fa04 f402 	lsl.w	r4, r4, r2
 800050c:	d908      	bls.n	8000520 <__udivmoddi4+0x260>
 800050e:	eb1c 0303 	adds.w	r3, ip, r3
 8000512:	f100 38ff 	add.w	r8, r0, #4294967295
 8000516:	d22f      	bcs.n	8000578 <__udivmoddi4+0x2b8>
 8000518:	429e      	cmp	r6, r3
 800051a:	d92d      	bls.n	8000578 <__udivmoddi4+0x2b8>
 800051c:	3802      	subs	r0, #2
 800051e:	4463      	add	r3, ip
 8000520:	1b9b      	subs	r3, r3, r6
 8000522:	b289      	uxth	r1, r1
 8000524:	fbb3 f6f7 	udiv	r6, r3, r7
 8000528:	fb07 3316 	mls	r3, r7, r6, r3
 800052c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000530:	fb06 f30e 	mul.w	r3, r6, lr
 8000534:	428b      	cmp	r3, r1
 8000536:	d908      	bls.n	800054a <__udivmoddi4+0x28a>
 8000538:	eb1c 0101 	adds.w	r1, ip, r1
 800053c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000540:	d216      	bcs.n	8000570 <__udivmoddi4+0x2b0>
 8000542:	428b      	cmp	r3, r1
 8000544:	d914      	bls.n	8000570 <__udivmoddi4+0x2b0>
 8000546:	3e02      	subs	r6, #2
 8000548:	4461      	add	r1, ip
 800054a:	1ac9      	subs	r1, r1, r3
 800054c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000550:	e738      	b.n	80003c4 <__udivmoddi4+0x104>
 8000552:	462e      	mov	r6, r5
 8000554:	4628      	mov	r0, r5
 8000556:	e705      	b.n	8000364 <__udivmoddi4+0xa4>
 8000558:	4606      	mov	r6, r0
 800055a:	e6e3      	b.n	8000324 <__udivmoddi4+0x64>
 800055c:	4618      	mov	r0, r3
 800055e:	e6f8      	b.n	8000352 <__udivmoddi4+0x92>
 8000560:	454b      	cmp	r3, r9
 8000562:	d2a9      	bcs.n	80004b8 <__udivmoddi4+0x1f8>
 8000564:	ebb9 0802 	subs.w	r8, r9, r2
 8000568:	eb64 0e0c 	sbc.w	lr, r4, ip
 800056c:	3801      	subs	r0, #1
 800056e:	e7a3      	b.n	80004b8 <__udivmoddi4+0x1f8>
 8000570:	4646      	mov	r6, r8
 8000572:	e7ea      	b.n	800054a <__udivmoddi4+0x28a>
 8000574:	4620      	mov	r0, r4
 8000576:	e794      	b.n	80004a2 <__udivmoddi4+0x1e2>
 8000578:	4640      	mov	r0, r8
 800057a:	e7d1      	b.n	8000520 <__udivmoddi4+0x260>
 800057c:	46d0      	mov	r8, sl
 800057e:	e77b      	b.n	8000478 <__udivmoddi4+0x1b8>
 8000580:	3b02      	subs	r3, #2
 8000582:	4461      	add	r1, ip
 8000584:	e732      	b.n	80003ec <__udivmoddi4+0x12c>
 8000586:	4630      	mov	r0, r6
 8000588:	e709      	b.n	800039e <__udivmoddi4+0xde>
 800058a:	4464      	add	r4, ip
 800058c:	3802      	subs	r0, #2
 800058e:	e742      	b.n	8000416 <__udivmoddi4+0x156>

08000590 <__aeabi_idiv0>:
 8000590:	4770      	bx	lr
 8000592:	bf00      	nop

08000594 <SD_PowerOff>:
}

/* power off */
static void SD_PowerOff(void) 
{
	PowerFlag = 0;
 8000594:	4b01      	ldr	r3, [pc, #4]	; (800059c <SD_PowerOff+0x8>)
 8000596:	2200      	movs	r2, #0
 8000598:	701a      	strb	r2, [r3, #0]
}
 800059a:	4770      	bx	lr
 800059c:	20000165 	.word	0x20000165

080005a0 <SD_CheckPower>:

/* check power flag */
static uint8_t SD_CheckPower(void) 
{
	return PowerFlag;
}
 80005a0:	4b01      	ldr	r3, [pc, #4]	; (80005a8 <SD_CheckPower+0x8>)
 80005a2:	7818      	ldrb	r0, [r3, #0]
 80005a4:	4770      	bx	lr
 80005a6:	bf00      	nop
 80005a8:	20000165 	.word	0x20000165

080005ac <SPI_TxBuffer>:
{
 80005ac:	b508      	push	{r3, lr}
 80005ae:	460a      	mov	r2, r1
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 80005b0:	4b05      	ldr	r3, [pc, #20]	; (80005c8 <SPI_TxBuffer+0x1c>)
 80005b2:	681b      	ldr	r3, [r3, #0]
 80005b4:	689b      	ldr	r3, [r3, #8]
 80005b6:	f013 0f02 	tst.w	r3, #2
 80005ba:	d0f9      	beq.n	80005b0 <SPI_TxBuffer+0x4>
	HAL_SPI_Transmit(HSPI_SDCARD, buffer, len, SPI_TIMEOUT);
 80005bc:	2364      	movs	r3, #100	; 0x64
 80005be:	4601      	mov	r1, r0
 80005c0:	4801      	ldr	r0, [pc, #4]	; (80005c8 <SPI_TxBuffer+0x1c>)
 80005c2:	f005 fc48 	bl	8005e56 <HAL_SPI_Transmit>
}
 80005c6:	bd08      	pop	{r3, pc}
 80005c8:	200023e0 	.word	0x200023e0

080005cc <SPI_TxByte>:
{
 80005cc:	b500      	push	{lr}
 80005ce:	b083      	sub	sp, #12
 80005d0:	f88d 0007 	strb.w	r0, [sp, #7]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 80005d4:	4b07      	ldr	r3, [pc, #28]	; (80005f4 <SPI_TxByte+0x28>)
 80005d6:	681b      	ldr	r3, [r3, #0]
 80005d8:	689b      	ldr	r3, [r3, #8]
 80005da:	f013 0f02 	tst.w	r3, #2
 80005de:	d0f9      	beq.n	80005d4 <SPI_TxByte+0x8>
	HAL_SPI_Transmit(HSPI_SDCARD, &data, 1, SPI_TIMEOUT);
 80005e0:	2364      	movs	r3, #100	; 0x64
 80005e2:	2201      	movs	r2, #1
 80005e4:	f10d 0107 	add.w	r1, sp, #7
 80005e8:	4802      	ldr	r0, [pc, #8]	; (80005f4 <SPI_TxByte+0x28>)
 80005ea:	f005 fc34 	bl	8005e56 <HAL_SPI_Transmit>
}
 80005ee:	b003      	add	sp, #12
 80005f0:	f85d fb04 	ldr.w	pc, [sp], #4
 80005f4:	200023e0 	.word	0x200023e0

080005f8 <SELECT>:
{
 80005f8:	b508      	push	{r3, lr}
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_RESET);
 80005fa:	2200      	movs	r2, #0
 80005fc:	2110      	movs	r1, #16
 80005fe:	4803      	ldr	r0, [pc, #12]	; (800060c <SELECT+0x14>)
 8000600:	f004 fa7b 	bl	8004afa <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8000604:	2001      	movs	r0, #1
 8000606:	f004 f889 	bl	800471c <HAL_Delay>
}
 800060a:	bd08      	pop	{r3, pc}
 800060c:	40020000 	.word	0x40020000

08000610 <DESELECT>:
{
 8000610:	b508      	push	{r3, lr}
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_SET);
 8000612:	2201      	movs	r2, #1
 8000614:	2110      	movs	r1, #16
 8000616:	4803      	ldr	r0, [pc, #12]	; (8000624 <DESELECT+0x14>)
 8000618:	f004 fa6f 	bl	8004afa <HAL_GPIO_WritePin>
	HAL_Delay(1);
 800061c:	2001      	movs	r0, #1
 800061e:	f004 f87d 	bl	800471c <HAL_Delay>
}
 8000622:	bd08      	pop	{r3, pc}
 8000624:	40020000 	.word	0x40020000

08000628 <SPI_RxByte>:
{
 8000628:	b500      	push	{lr}
 800062a:	b085      	sub	sp, #20
	dummy = 0xFF;
 800062c:	23ff      	movs	r3, #255	; 0xff
 800062e:	f88d 300f 	strb.w	r3, [sp, #15]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8000632:	4b0a      	ldr	r3, [pc, #40]	; (800065c <SPI_RxByte+0x34>)
 8000634:	681b      	ldr	r3, [r3, #0]
 8000636:	689b      	ldr	r3, [r3, #8]
 8000638:	f013 0f02 	tst.w	r3, #2
 800063c:	d0f9      	beq.n	8000632 <SPI_RxByte+0xa>
	HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 800063e:	2364      	movs	r3, #100	; 0x64
 8000640:	9300      	str	r3, [sp, #0]
 8000642:	2301      	movs	r3, #1
 8000644:	f10d 020e 	add.w	r2, sp, #14
 8000648:	f10d 010f 	add.w	r1, sp, #15
 800064c:	4803      	ldr	r0, [pc, #12]	; (800065c <SPI_RxByte+0x34>)
 800064e:	f005 fcde 	bl	800600e <HAL_SPI_TransmitReceive>
}
 8000652:	f89d 000e 	ldrb.w	r0, [sp, #14]
 8000656:	b005      	add	sp, #20
 8000658:	f85d fb04 	ldr.w	pc, [sp], #4
 800065c:	200023e0 	.word	0x200023e0

08000660 <SD_PowerOn>:
{
 8000660:	b510      	push	{r4, lr}
 8000662:	b082      	sub	sp, #8
	DESELECT();
 8000664:	f7ff ffd4 	bl	8000610 <DESELECT>
	for(int i = 0; i < 10; i++)
 8000668:	2400      	movs	r4, #0
 800066a:	e003      	b.n	8000674 <SD_PowerOn+0x14>
		SPI_TxByte(0xFF);
 800066c:	20ff      	movs	r0, #255	; 0xff
 800066e:	f7ff ffad 	bl	80005cc <SPI_TxByte>
	for(int i = 0; i < 10; i++)
 8000672:	3401      	adds	r4, #1
 8000674:	2c09      	cmp	r4, #9
 8000676:	ddf9      	ble.n	800066c <SD_PowerOn+0xc>
	SELECT();
 8000678:	f7ff ffbe 	bl	80005f8 <SELECT>
	args[0] = CMD0;		/* CMD0:GO_IDLE_STATE */
 800067c:	2340      	movs	r3, #64	; 0x40
 800067e:	f88d 3000 	strb.w	r3, [sp]
	args[1] = 0;
 8000682:	2300      	movs	r3, #0
 8000684:	f88d 3001 	strb.w	r3, [sp, #1]
	args[2] = 0;
 8000688:	f88d 3002 	strb.w	r3, [sp, #2]
	args[3] = 0;
 800068c:	f88d 3003 	strb.w	r3, [sp, #3]
	args[4] = 0;
 8000690:	f88d 3004 	strb.w	r3, [sp, #4]
	args[5] = 0x95;		/* CRC */
 8000694:	2395      	movs	r3, #149	; 0x95
 8000696:	f88d 3005 	strb.w	r3, [sp, #5]
	SPI_TxBuffer(args, sizeof(args));
 800069a:	2106      	movs	r1, #6
 800069c:	4668      	mov	r0, sp
 800069e:	f7ff ff85 	bl	80005ac <SPI_TxBuffer>
	uint32_t cnt = 0x1FFF;
 80006a2:	f641 74ff 	movw	r4, #8191	; 0x1fff
	while ((SPI_RxByte() != 0x01) && cnt)
 80006a6:	f7ff ffbf 	bl	8000628 <SPI_RxByte>
 80006aa:	2801      	cmp	r0, #1
 80006ac:	d002      	beq.n	80006b4 <SD_PowerOn+0x54>
 80006ae:	b10c      	cbz	r4, 80006b4 <SD_PowerOn+0x54>
		cnt--;
 80006b0:	3c01      	subs	r4, #1
 80006b2:	e7f8      	b.n	80006a6 <SD_PowerOn+0x46>
	DESELECT();
 80006b4:	f7ff ffac 	bl	8000610 <DESELECT>
	SPI_TxByte(0XFF);
 80006b8:	20ff      	movs	r0, #255	; 0xff
 80006ba:	f7ff ff87 	bl	80005cc <SPI_TxByte>
	PowerFlag = 1;
 80006be:	4b02      	ldr	r3, [pc, #8]	; (80006c8 <SD_PowerOn+0x68>)
 80006c0:	2201      	movs	r2, #1
 80006c2:	701a      	strb	r2, [r3, #0]
}
 80006c4:	b002      	add	sp, #8
 80006c6:	bd10      	pop	{r4, pc}
 80006c8:	20000165 	.word	0x20000165

080006cc <SD_ReadyWait>:
{
 80006cc:	b508      	push	{r3, lr}
	Timer2 = 500;
 80006ce:	4b07      	ldr	r3, [pc, #28]	; (80006ec <SD_ReadyWait+0x20>)
 80006d0:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80006d4:	801a      	strh	r2, [r3, #0]
		res = SPI_RxByte();
 80006d6:	f7ff ffa7 	bl	8000628 <SPI_RxByte>
	} while ((res != 0xFF) && Timer2);
 80006da:	28ff      	cmp	r0, #255	; 0xff
 80006dc:	d004      	beq.n	80006e8 <SD_ReadyWait+0x1c>
 80006de:	4b03      	ldr	r3, [pc, #12]	; (80006ec <SD_ReadyWait+0x20>)
 80006e0:	881b      	ldrh	r3, [r3, #0]
 80006e2:	b29b      	uxth	r3, r3
 80006e4:	2b00      	cmp	r3, #0
 80006e6:	d1f6      	bne.n	80006d6 <SD_ReadyWait+0xa>
}
 80006e8:	bd08      	pop	{r3, pc}
 80006ea:	bf00      	nop
 80006ec:	20016d0b 	.word	0x20016d0b

080006f0 <SD_SendCmd>:
}
#endif /* _USE_WRITE */

/* transmit command */
static BYTE SD_SendCmd(BYTE cmd, uint32_t arg)
{
 80006f0:	b538      	push	{r3, r4, r5, lr}
 80006f2:	4605      	mov	r5, r0
 80006f4:	460c      	mov	r4, r1
	uint8_t crc, res;

	/* wait SD ready */
	if (SD_ReadyWait() != 0xFF) return 0xFF;
 80006f6:	f7ff ffe9 	bl	80006cc <SD_ReadyWait>
 80006fa:	28ff      	cmp	r0, #255	; 0xff
 80006fc:	d001      	beq.n	8000702 <SD_SendCmd+0x12>
 80006fe:	20ff      	movs	r0, #255	; 0xff
	do {
		res = SPI_RxByte();
	} while ((res & 0x80) && --n);

	return res;
}
 8000700:	bd38      	pop	{r3, r4, r5, pc}
	SPI_TxByte(cmd); 					/* Command */
 8000702:	4628      	mov	r0, r5
 8000704:	f7ff ff62 	bl	80005cc <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 24)); 	/* Argument[31..24] */
 8000708:	0e20      	lsrs	r0, r4, #24
 800070a:	f7ff ff5f 	bl	80005cc <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 16)); 	/* Argument[23..16] */
 800070e:	f3c4 4007 	ubfx	r0, r4, #16, #8
 8000712:	f7ff ff5b 	bl	80005cc <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 8)); 	/* Argument[15..8] */
 8000716:	f3c4 2007 	ubfx	r0, r4, #8, #8
 800071a:	f7ff ff57 	bl	80005cc <SPI_TxByte>
	SPI_TxByte((uint8_t)arg); 			/* Argument[7..0] */
 800071e:	b2e0      	uxtb	r0, r4
 8000720:	f7ff ff54 	bl	80005cc <SPI_TxByte>
	if(cmd == CMD0) crc = 0x95;	/* CRC for CMD0(0) */
 8000724:	2d40      	cmp	r5, #64	; 0x40
 8000726:	d013      	beq.n	8000750 <SD_SendCmd+0x60>
	else if(cmd == CMD8) crc = 0x87;	/* CRC for CMD8(0x1AA) */
 8000728:	2d48      	cmp	r5, #72	; 0x48
 800072a:	d00f      	beq.n	800074c <SD_SendCmd+0x5c>
	else crc = 1;
 800072c:	2001      	movs	r0, #1
	SPI_TxByte(crc);
 800072e:	f7ff ff4d 	bl	80005cc <SPI_TxByte>
	if (cmd == CMD12) SPI_RxByte();
 8000732:	2d4c      	cmp	r5, #76	; 0x4c
 8000734:	d00e      	beq.n	8000754 <SD_SendCmd+0x64>
	else if(cmd == CMD8) crc = 0x87;	/* CRC for CMD8(0x1AA) */
 8000736:	240a      	movs	r4, #10
		res = SPI_RxByte();
 8000738:	f7ff ff76 	bl	8000628 <SPI_RxByte>
	} while ((res & 0x80) && --n);
 800073c:	f010 0f80 	tst.w	r0, #128	; 0x80
 8000740:	d0de      	beq.n	8000700 <SD_SendCmd+0x10>
 8000742:	1e63      	subs	r3, r4, #1
 8000744:	f013 04ff 	ands.w	r4, r3, #255	; 0xff
 8000748:	d1f6      	bne.n	8000738 <SD_SendCmd+0x48>
 800074a:	e7d9      	b.n	8000700 <SD_SendCmd+0x10>
	else if(cmd == CMD8) crc = 0x87;	/* CRC for CMD8(0x1AA) */
 800074c:	2087      	movs	r0, #135	; 0x87
 800074e:	e7ee      	b.n	800072e <SD_SendCmd+0x3e>
	if(cmd == CMD0) crc = 0x95;	/* CRC for CMD0(0) */
 8000750:	2095      	movs	r0, #149	; 0x95
 8000752:	e7ec      	b.n	800072e <SD_SendCmd+0x3e>
	if (cmd == CMD12) SPI_RxByte();
 8000754:	f7ff ff68 	bl	8000628 <SPI_RxByte>
 8000758:	e7ed      	b.n	8000736 <SD_SendCmd+0x46>

0800075a <SPI_RxBytePtr>:
{
 800075a:	b510      	push	{r4, lr}
 800075c:	4604      	mov	r4, r0
	*buff = SPI_RxByte();
 800075e:	f7ff ff63 	bl	8000628 <SPI_RxByte>
 8000762:	7020      	strb	r0, [r4, #0]
}
 8000764:	bd10      	pop	{r4, pc}
	...

08000768 <SD_RxDataBlock>:
{
 8000768:	b538      	push	{r3, r4, r5, lr}
 800076a:	4604      	mov	r4, r0
 800076c:	460d      	mov	r5, r1
	Timer1 = 200;
 800076e:	4b0f      	ldr	r3, [pc, #60]	; (80007ac <SD_RxDataBlock+0x44>)
 8000770:	22c8      	movs	r2, #200	; 0xc8
 8000772:	801a      	strh	r2, [r3, #0]
		token = SPI_RxByte();
 8000774:	f7ff ff58 	bl	8000628 <SPI_RxByte>
	} while((token == 0xFF) && Timer1);
 8000778:	28ff      	cmp	r0, #255	; 0xff
 800077a:	d104      	bne.n	8000786 <SD_RxDataBlock+0x1e>
 800077c:	4b0b      	ldr	r3, [pc, #44]	; (80007ac <SD_RxDataBlock+0x44>)
 800077e:	881b      	ldrh	r3, [r3, #0]
 8000780:	b29b      	uxth	r3, r3
 8000782:	2b00      	cmp	r3, #0
 8000784:	d1f6      	bne.n	8000774 <SD_RxDataBlock+0xc>
	if(token != 0xFE) return FALSE;
 8000786:	28fe      	cmp	r0, #254	; 0xfe
 8000788:	d10d      	bne.n	80007a6 <SD_RxDataBlock+0x3e>
		SPI_RxBytePtr(buff++);
 800078a:	4620      	mov	r0, r4
 800078c:	3401      	adds	r4, #1
 800078e:	f7ff ffe4 	bl	800075a <SPI_RxBytePtr>
	} while(len--);
 8000792:	462b      	mov	r3, r5
 8000794:	3d01      	subs	r5, #1
 8000796:	2b00      	cmp	r3, #0
 8000798:	d1f7      	bne.n	800078a <SD_RxDataBlock+0x22>
	SPI_RxByte();
 800079a:	f7ff ff45 	bl	8000628 <SPI_RxByte>
	SPI_RxByte();
 800079e:	f7ff ff43 	bl	8000628 <SPI_RxByte>
	return TRUE;
 80007a2:	2001      	movs	r0, #1
}
 80007a4:	bd38      	pop	{r3, r4, r5, pc}
	if(token != 0xFE) return FALSE;
 80007a6:	2000      	movs	r0, #0
 80007a8:	e7fc      	b.n	80007a4 <SD_RxDataBlock+0x3c>
 80007aa:	bf00      	nop
 80007ac:	20016d0a 	.word	0x20016d0a

080007b0 <SD_TxDataBlock>:
{
 80007b0:	b570      	push	{r4, r5, r6, lr}
 80007b2:	4606      	mov	r6, r0
 80007b4:	460d      	mov	r5, r1
	if (SD_ReadyWait() != 0xFF) return FALSE;
 80007b6:	f7ff ff89 	bl	80006cc <SD_ReadyWait>
 80007ba:	28ff      	cmp	r0, #255	; 0xff
 80007bc:	d001      	beq.n	80007c2 <SD_TxDataBlock+0x12>
 80007be:	2000      	movs	r0, #0
}
 80007c0:	bd70      	pop	{r4, r5, r6, pc}
 80007c2:	2400      	movs	r4, #0
	SPI_TxByte(token);
 80007c4:	4628      	mov	r0, r5
 80007c6:	f7ff ff01 	bl	80005cc <SPI_TxByte>
	if (token != 0xFD)
 80007ca:	2dfd      	cmp	r5, #253	; 0xfd
 80007cc:	d105      	bne.n	80007da <SD_TxDataBlock+0x2a>
	if ((resp & 0x1F) == 0x05) return TRUE;
 80007ce:	f004 041f 	and.w	r4, r4, #31
 80007d2:	2c05      	cmp	r4, #5
 80007d4:	d01c      	beq.n	8000810 <SD_TxDataBlock+0x60>
	return FALSE;
 80007d6:	2000      	movs	r0, #0
 80007d8:	e7f2      	b.n	80007c0 <SD_TxDataBlock+0x10>
		SPI_TxBuffer((uint8_t*)buff, 512);
 80007da:	f44f 7100 	mov.w	r1, #512	; 0x200
 80007de:	4630      	mov	r0, r6
 80007e0:	f7ff fee4 	bl	80005ac <SPI_TxBuffer>
		SPI_RxByte();
 80007e4:	f7ff ff20 	bl	8000628 <SPI_RxByte>
		SPI_RxByte();
 80007e8:	f7ff ff1e 	bl	8000628 <SPI_RxByte>
	uint8_t i = 0;
 80007ec:	4625      	mov	r5, r4
		while (i <= 64)
 80007ee:	e001      	b.n	80007f4 <SD_TxDataBlock+0x44>
			i++;
 80007f0:	3501      	adds	r5, #1
 80007f2:	b2ed      	uxtb	r5, r5
		while (i <= 64)
 80007f4:	2d40      	cmp	r5, #64	; 0x40
 80007f6:	d806      	bhi.n	8000806 <SD_TxDataBlock+0x56>
			resp = SPI_RxByte();
 80007f8:	f7ff ff16 	bl	8000628 <SPI_RxByte>
 80007fc:	4604      	mov	r4, r0
			if ((resp & 0x1F) == 0x05) break;
 80007fe:	f000 031f 	and.w	r3, r0, #31
 8000802:	2b05      	cmp	r3, #5
 8000804:	d1f4      	bne.n	80007f0 <SD_TxDataBlock+0x40>
		while (SPI_RxByte() == 0);
 8000806:	f7ff ff0f 	bl	8000628 <SPI_RxByte>
 800080a:	2800      	cmp	r0, #0
 800080c:	d0fb      	beq.n	8000806 <SD_TxDataBlock+0x56>
 800080e:	e7de      	b.n	80007ce <SD_TxDataBlock+0x1e>
	if ((resp & 0x1F) == 0x05) return TRUE;
 8000810:	2001      	movs	r0, #1
 8000812:	e7d5      	b.n	80007c0 <SD_TxDataBlock+0x10>

08000814 <SD_disk_initialize>:
DSTATUS SD_disk_initialize(BYTE drv) 
{
	uint8_t n, type, ocr[4];

	/* single drive, drv should be 0 */
	if(drv) return STA_NOINIT;
 8000814:	2800      	cmp	r0, #0
 8000816:	f040 80b6 	bne.w	8000986 <SD_disk_initialize+0x172>
{
 800081a:	b530      	push	{r4, r5, lr}
 800081c:	b083      	sub	sp, #12

	/* no disk */
	if(Stat & STA_NODISK) return Stat;
 800081e:	4b5b      	ldr	r3, [pc, #364]	; (800098c <SD_disk_initialize+0x178>)
 8000820:	781b      	ldrb	r3, [r3, #0]
 8000822:	f013 0402 	ands.w	r4, r3, #2
 8000826:	d004      	beq.n	8000832 <SD_disk_initialize+0x1e>
 8000828:	4b58      	ldr	r3, [pc, #352]	; (800098c <SD_disk_initialize+0x178>)
 800082a:	7818      	ldrb	r0, [r3, #0]
 800082c:	b2c0      	uxtb	r0, r0
		/* Initialization failed */
		SD_PowerOff();
	}

	return Stat;
}
 800082e:	b003      	add	sp, #12
 8000830:	bd30      	pop	{r4, r5, pc}
	SD_PowerOn();
 8000832:	f7ff ff15 	bl	8000660 <SD_PowerOn>
	SELECT();
 8000836:	f7ff fedf 	bl	80005f8 <SELECT>
	if (SD_SendCmd(CMD0, 0) == 1)
 800083a:	2100      	movs	r1, #0
 800083c:	2040      	movs	r0, #64	; 0x40
 800083e:	f7ff ff57 	bl	80006f0 <SD_SendCmd>
 8000842:	4605      	mov	r5, r0
 8000844:	2801      	cmp	r0, #1
 8000846:	d011      	beq.n	800086c <SD_disk_initialize+0x58>
	CardType = type;
 8000848:	4b51      	ldr	r3, [pc, #324]	; (8000990 <SD_disk_initialize+0x17c>)
 800084a:	701c      	strb	r4, [r3, #0]
	DESELECT();
 800084c:	f7ff fee0 	bl	8000610 <DESELECT>
	SPI_RxByte();
 8000850:	f7ff feea 	bl	8000628 <SPI_RxByte>
	if (type)
 8000854:	2c00      	cmp	r4, #0
 8000856:	f000 8093 	beq.w	8000980 <SD_disk_initialize+0x16c>
		Stat &= ~STA_NOINIT;
 800085a:	4a4c      	ldr	r2, [pc, #304]	; (800098c <SD_disk_initialize+0x178>)
 800085c:	7813      	ldrb	r3, [r2, #0]
 800085e:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8000862:	7013      	strb	r3, [r2, #0]
	return Stat;
 8000864:	4b49      	ldr	r3, [pc, #292]	; (800098c <SD_disk_initialize+0x178>)
 8000866:	7818      	ldrb	r0, [r3, #0]
 8000868:	b2c0      	uxtb	r0, r0
 800086a:	e7e0      	b.n	800082e <SD_disk_initialize+0x1a>
		Timer1 = 1000;
 800086c:	4b49      	ldr	r3, [pc, #292]	; (8000994 <SD_disk_initialize+0x180>)
 800086e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000872:	801a      	strh	r2, [r3, #0]
		if (SD_SendCmd(CMD8, 0x1AA) == 1)
 8000874:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8000878:	2048      	movs	r0, #72	; 0x48
 800087a:	f7ff ff39 	bl	80006f0 <SD_SendCmd>
 800087e:	2801      	cmp	r0, #1
 8000880:	d145      	bne.n	800090e <SD_disk_initialize+0xfa>
			for (n = 0; n < 4; n++)
 8000882:	4625      	mov	r5, r4
 8000884:	e008      	b.n	8000898 <SD_disk_initialize+0x84>
				ocr[n] = SPI_RxByte();
 8000886:	f7ff fecf 	bl	8000628 <SPI_RxByte>
 800088a:	f105 0308 	add.w	r3, r5, #8
 800088e:	446b      	add	r3, sp
 8000890:	f803 0c04 	strb.w	r0, [r3, #-4]
			for (n = 0; n < 4; n++)
 8000894:	3501      	adds	r5, #1
 8000896:	b2ed      	uxtb	r5, r5
 8000898:	2d03      	cmp	r5, #3
 800089a:	d9f4      	bls.n	8000886 <SD_disk_initialize+0x72>
			if (ocr[2] == 0x01 && ocr[3] == 0xAA)
 800089c:	f89d 3006 	ldrb.w	r3, [sp, #6]
 80008a0:	2b01      	cmp	r3, #1
 80008a2:	d1d1      	bne.n	8000848 <SD_disk_initialize+0x34>
 80008a4:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80008a8:	2baa      	cmp	r3, #170	; 0xaa
 80008aa:	d1cd      	bne.n	8000848 <SD_disk_initialize+0x34>
 80008ac:	e003      	b.n	80008b6 <SD_disk_initialize+0xa2>
				} while (Timer1);
 80008ae:	4b39      	ldr	r3, [pc, #228]	; (8000994 <SD_disk_initialize+0x180>)
 80008b0:	881b      	ldrh	r3, [r3, #0]
 80008b2:	b29b      	uxth	r3, r3
 80008b4:	b163      	cbz	r3, 80008d0 <SD_disk_initialize+0xbc>
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 80008b6:	2100      	movs	r1, #0
 80008b8:	2077      	movs	r0, #119	; 0x77
 80008ba:	f7ff ff19 	bl	80006f0 <SD_SendCmd>
 80008be:	2801      	cmp	r0, #1
 80008c0:	d8f5      	bhi.n	80008ae <SD_disk_initialize+0x9a>
 80008c2:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 80008c6:	2069      	movs	r0, #105	; 0x69
 80008c8:	f7ff ff12 	bl	80006f0 <SD_SendCmd>
 80008cc:	2800      	cmp	r0, #0
 80008ce:	d1ee      	bne.n	80008ae <SD_disk_initialize+0x9a>
				if (Timer1 && SD_SendCmd(CMD58, 0) == 0)
 80008d0:	4b30      	ldr	r3, [pc, #192]	; (8000994 <SD_disk_initialize+0x180>)
 80008d2:	881b      	ldrh	r3, [r3, #0]
 80008d4:	b29b      	uxth	r3, r3
 80008d6:	2b00      	cmp	r3, #0
 80008d8:	d0b6      	beq.n	8000848 <SD_disk_initialize+0x34>
 80008da:	2100      	movs	r1, #0
 80008dc:	207a      	movs	r0, #122	; 0x7a
 80008de:	f7ff ff07 	bl	80006f0 <SD_SendCmd>
 80008e2:	4605      	mov	r5, r0
 80008e4:	2800      	cmp	r0, #0
 80008e6:	d1af      	bne.n	8000848 <SD_disk_initialize+0x34>
					for (n = 0; n < 4; n++)
 80008e8:	2d03      	cmp	r5, #3
 80008ea:	d809      	bhi.n	8000900 <SD_disk_initialize+0xec>
						ocr[n] = SPI_RxByte();
 80008ec:	f7ff fe9c 	bl	8000628 <SPI_RxByte>
 80008f0:	f105 0308 	add.w	r3, r5, #8
 80008f4:	446b      	add	r3, sp
 80008f6:	f803 0c04 	strb.w	r0, [r3, #-4]
					for (n = 0; n < 4; n++)
 80008fa:	3501      	adds	r5, #1
 80008fc:	b2ed      	uxtb	r5, r5
 80008fe:	e7f3      	b.n	80008e8 <SD_disk_initialize+0xd4>
					type = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;
 8000900:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8000904:	f013 0f40 	tst.w	r3, #64	; 0x40
 8000908:	d038      	beq.n	800097c <SD_disk_initialize+0x168>
 800090a:	240c      	movs	r4, #12
 800090c:	e79c      	b.n	8000848 <SD_disk_initialize+0x34>
			type = (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) <= 1) ? CT_SD1 : CT_MMC;
 800090e:	2100      	movs	r1, #0
 8000910:	2077      	movs	r0, #119	; 0x77
 8000912:	f7ff feed 	bl	80006f0 <SD_SendCmd>
 8000916:	2801      	cmp	r0, #1
 8000918:	d811      	bhi.n	800093e <SD_disk_initialize+0x12a>
 800091a:	2100      	movs	r1, #0
 800091c:	2069      	movs	r0, #105	; 0x69
 800091e:	f7ff fee7 	bl	80006f0 <SD_SendCmd>
 8000922:	2801      	cmp	r0, #1
 8000924:	d80b      	bhi.n	800093e <SD_disk_initialize+0x12a>
 8000926:	2502      	movs	r5, #2
 8000928:	e009      	b.n	800093e <SD_disk_initialize+0x12a>
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) == 0) break; /* ACMD41 */
 800092a:	2100      	movs	r1, #0
 800092c:	2077      	movs	r0, #119	; 0x77
 800092e:	f7ff fedf 	bl	80006f0 <SD_SendCmd>
 8000932:	2801      	cmp	r0, #1
 8000934:	d91b      	bls.n	800096e <SD_disk_initialize+0x15a>
			} while (Timer1);
 8000936:	4b17      	ldr	r3, [pc, #92]	; (8000994 <SD_disk_initialize+0x180>)
 8000938:	881b      	ldrh	r3, [r3, #0]
 800093a:	b29b      	uxth	r3, r3
 800093c:	b13b      	cbz	r3, 800094e <SD_disk_initialize+0x13a>
				if (type == CT_SD1)
 800093e:	2d02      	cmp	r5, #2
 8000940:	d0f3      	beq.n	800092a <SD_disk_initialize+0x116>
					if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 8000942:	2100      	movs	r1, #0
 8000944:	2041      	movs	r0, #65	; 0x41
 8000946:	f7ff fed3 	bl	80006f0 <SD_SendCmd>
 800094a:	2800      	cmp	r0, #0
 800094c:	d1f3      	bne.n	8000936 <SD_disk_initialize+0x122>
			if (!Timer1 || SD_SendCmd(CMD16, 512) != 0) type = 0;
 800094e:	4b11      	ldr	r3, [pc, #68]	; (8000994 <SD_disk_initialize+0x180>)
 8000950:	881b      	ldrh	r3, [r3, #0]
 8000952:	b29b      	uxth	r3, r3
 8000954:	2b00      	cmp	r3, #0
 8000956:	f43f af77 	beq.w	8000848 <SD_disk_initialize+0x34>
 800095a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800095e:	2050      	movs	r0, #80	; 0x50
 8000960:	f7ff fec6 	bl	80006f0 <SD_SendCmd>
 8000964:	2800      	cmp	r0, #0
 8000966:	f47f af6f 	bne.w	8000848 <SD_disk_initialize+0x34>
			type = (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) <= 1) ? CT_SD1 : CT_MMC;
 800096a:	462c      	mov	r4, r5
 800096c:	e76c      	b.n	8000848 <SD_disk_initialize+0x34>
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) == 0) break; /* ACMD41 */
 800096e:	2100      	movs	r1, #0
 8000970:	2069      	movs	r0, #105	; 0x69
 8000972:	f7ff febd 	bl	80006f0 <SD_SendCmd>
 8000976:	2800      	cmp	r0, #0
 8000978:	d1dd      	bne.n	8000936 <SD_disk_initialize+0x122>
 800097a:	e7e8      	b.n	800094e <SD_disk_initialize+0x13a>
					type = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;
 800097c:	2404      	movs	r4, #4
 800097e:	e763      	b.n	8000848 <SD_disk_initialize+0x34>
		SD_PowerOff();
 8000980:	f7ff fe08 	bl	8000594 <SD_PowerOff>
 8000984:	e76e      	b.n	8000864 <SD_disk_initialize+0x50>
	if(drv) return STA_NOINIT;
 8000986:	2001      	movs	r0, #1
}
 8000988:	4770      	bx	lr
 800098a:	bf00      	nop
 800098c:	20000000 	.word	0x20000000
 8000990:	20000164 	.word	0x20000164
 8000994:	20016d0a 	.word	0x20016d0a

08000998 <SD_disk_status>:

/* return disk status */
DSTATUS SD_disk_status(BYTE drv) 
{
	if (drv) return STA_NOINIT;
 8000998:	b918      	cbnz	r0, 80009a2 <SD_disk_status+0xa>
	return Stat;
 800099a:	4b03      	ldr	r3, [pc, #12]	; (80009a8 <SD_disk_status+0x10>)
 800099c:	7818      	ldrb	r0, [r3, #0]
 800099e:	b2c0      	uxtb	r0, r0
 80009a0:	4770      	bx	lr
	if (drv) return STA_NOINIT;
 80009a2:	2001      	movs	r0, #1
}
 80009a4:	4770      	bx	lr
 80009a6:	bf00      	nop
 80009a8:	20000000 	.word	0x20000000

080009ac <SD_disk_read>:

/* read sector */
DRESULT SD_disk_read(BYTE pdrv, BYTE* buff, DWORD sector, UINT count) 
{
	/* pdrv should be 0 */
	if (pdrv || !count) return RES_PARERR;
 80009ac:	2800      	cmp	r0, #0
 80009ae:	d13e      	bne.n	8000a2e <SD_disk_read+0x82>
{
 80009b0:	b570      	push	{r4, r5, r6, lr}
 80009b2:	460d      	mov	r5, r1
 80009b4:	4616      	mov	r6, r2
 80009b6:	461c      	mov	r4, r3
	if (pdrv || !count) return RES_PARERR;
 80009b8:	2b00      	cmp	r3, #0
 80009ba:	d03a      	beq.n	8000a32 <SD_disk_read+0x86>

	/* no disk */
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 80009bc:	4b1f      	ldr	r3, [pc, #124]	; (8000a3c <SD_disk_read+0x90>)
 80009be:	781b      	ldrb	r3, [r3, #0]
 80009c0:	f013 0f01 	tst.w	r3, #1
 80009c4:	d137      	bne.n	8000a36 <SD_disk_read+0x8a>

	/* convert to byte address */
	if (!(CardType & CT_SD2)) sector *= 512;
 80009c6:	4b1e      	ldr	r3, [pc, #120]	; (8000a40 <SD_disk_read+0x94>)
 80009c8:	781b      	ldrb	r3, [r3, #0]
 80009ca:	f013 0f04 	tst.w	r3, #4
 80009ce:	d100      	bne.n	80009d2 <SD_disk_read+0x26>
 80009d0:	0256      	lsls	r6, r2, #9

	SELECT();
 80009d2:	f7ff fe11 	bl	80005f8 <SELECT>

	if (count == 1)
 80009d6:	2c01      	cmp	r4, #1
 80009d8:	d01a      	beq.n	8000a10 <SD_disk_read+0x64>
		if ((SD_SendCmd(CMD17, sector) == 0) && SD_RxDataBlock(buff, 512)) count = 0;
	}
	else
	{
		/* READ_MULTIPLE_BLOCK */
		if (SD_SendCmd(CMD18, sector) == 0)
 80009da:	4631      	mov	r1, r6
 80009dc:	2052      	movs	r0, #82	; 0x52
 80009de:	f7ff fe87 	bl	80006f0 <SD_SendCmd>
 80009e2:	b968      	cbnz	r0, 8000a00 <SD_disk_read+0x54>
		{
			do {
				if (!SD_RxDataBlock(buff, 512)) break;
 80009e4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80009e8:	4628      	mov	r0, r5
 80009ea:	f7ff febd 	bl	8000768 <SD_RxDataBlock>
 80009ee:	b118      	cbz	r0, 80009f8 <SD_disk_read+0x4c>
				buff += 512;
 80009f0:	f505 7500 	add.w	r5, r5, #512	; 0x200
			} while (--count);
 80009f4:	3c01      	subs	r4, #1
 80009f6:	d1f5      	bne.n	80009e4 <SD_disk_read+0x38>

			/* STOP_TRANSMISSION */
			SD_SendCmd(CMD12, 0);
 80009f8:	2100      	movs	r1, #0
 80009fa:	204c      	movs	r0, #76	; 0x4c
 80009fc:	f7ff fe78 	bl	80006f0 <SD_SendCmd>
		}
	}

	/* Idle */
	DESELECT();
 8000a00:	f7ff fe06 	bl	8000610 <DESELECT>
	SPI_RxByte();
 8000a04:	f7ff fe10 	bl	8000628 <SPI_RxByte>

	return count ? RES_ERROR : RES_OK;
 8000a08:	1e20      	subs	r0, r4, #0
 8000a0a:	bf18      	it	ne
 8000a0c:	2001      	movne	r0, #1
}
 8000a0e:	bd70      	pop	{r4, r5, r6, pc}
		if ((SD_SendCmd(CMD17, sector) == 0) && SD_RxDataBlock(buff, 512)) count = 0;
 8000a10:	4631      	mov	r1, r6
 8000a12:	2051      	movs	r0, #81	; 0x51
 8000a14:	f7ff fe6c 	bl	80006f0 <SD_SendCmd>
 8000a18:	2800      	cmp	r0, #0
 8000a1a:	d1f1      	bne.n	8000a00 <SD_disk_read+0x54>
 8000a1c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000a20:	4628      	mov	r0, r5
 8000a22:	f7ff fea1 	bl	8000768 <SD_RxDataBlock>
 8000a26:	2800      	cmp	r0, #0
 8000a28:	d0ea      	beq.n	8000a00 <SD_disk_read+0x54>
 8000a2a:	2400      	movs	r4, #0
 8000a2c:	e7e8      	b.n	8000a00 <SD_disk_read+0x54>
	if (pdrv || !count) return RES_PARERR;
 8000a2e:	2004      	movs	r0, #4
}
 8000a30:	4770      	bx	lr
	if (pdrv || !count) return RES_PARERR;
 8000a32:	2004      	movs	r0, #4
 8000a34:	e7eb      	b.n	8000a0e <SD_disk_read+0x62>
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 8000a36:	2003      	movs	r0, #3
 8000a38:	e7e9      	b.n	8000a0e <SD_disk_read+0x62>
 8000a3a:	bf00      	nop
 8000a3c:	20000000 	.word	0x20000000
 8000a40:	20000164 	.word	0x20000164

08000a44 <SD_disk_write>:
/* write sector */
#if _USE_WRITE == 1
DRESULT SD_disk_write(BYTE pdrv, const BYTE* buff, DWORD sector, UINT count) 
{
	/* pdrv should be 0 */
	if (pdrv || !count) return RES_PARERR;
 8000a44:	2800      	cmp	r0, #0
 8000a46:	d152      	bne.n	8000aee <SD_disk_write+0xaa>
{
 8000a48:	b570      	push	{r4, r5, r6, lr}
 8000a4a:	460d      	mov	r5, r1
 8000a4c:	4616      	mov	r6, r2
 8000a4e:	461c      	mov	r4, r3
	if (pdrv || !count) return RES_PARERR;
 8000a50:	2b00      	cmp	r3, #0
 8000a52:	d04e      	beq.n	8000af2 <SD_disk_write+0xae>

	/* no disk */
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 8000a54:	4b2a      	ldr	r3, [pc, #168]	; (8000b00 <SD_disk_write+0xbc>)
 8000a56:	781b      	ldrb	r3, [r3, #0]
 8000a58:	f013 0f01 	tst.w	r3, #1
 8000a5c:	d14b      	bne.n	8000af6 <SD_disk_write+0xb2>

	/* write protection */
	if (Stat & STA_PROTECT) return RES_WRPRT;
 8000a5e:	4b28      	ldr	r3, [pc, #160]	; (8000b00 <SD_disk_write+0xbc>)
 8000a60:	781b      	ldrb	r3, [r3, #0]
 8000a62:	f013 0f04 	tst.w	r3, #4
 8000a66:	d148      	bne.n	8000afa <SD_disk_write+0xb6>

	/* convert to byte address */
	if (!(CardType & CT_SD2)) sector *= 512;
 8000a68:	4b26      	ldr	r3, [pc, #152]	; (8000b04 <SD_disk_write+0xc0>)
 8000a6a:	781b      	ldrb	r3, [r3, #0]
 8000a6c:	f013 0f04 	tst.w	r3, #4
 8000a70:	d100      	bne.n	8000a74 <SD_disk_write+0x30>
 8000a72:	0256      	lsls	r6, r2, #9

	SELECT();
 8000a74:	f7ff fdc0 	bl	80005f8 <SELECT>

	if (count == 1)
 8000a78:	2c01      	cmp	r4, #1
 8000a7a:	d01f      	beq.n	8000abc <SD_disk_write+0x78>
			count = 0;
	}
	else
	{
		/* WRITE_MULTIPLE_BLOCK */
		if (CardType & CT_SD1)
 8000a7c:	4b21      	ldr	r3, [pc, #132]	; (8000b04 <SD_disk_write+0xc0>)
 8000a7e:	781b      	ldrb	r3, [r3, #0]
 8000a80:	f013 0f02 	tst.w	r3, #2
 8000a84:	d128      	bne.n	8000ad8 <SD_disk_write+0x94>
		{
			SD_SendCmd(CMD55, 0);
			SD_SendCmd(CMD23, count); /* ACMD23 */
		}

		if (SD_SendCmd(CMD25, sector) == 0)
 8000a86:	4631      	mov	r1, r6
 8000a88:	2059      	movs	r0, #89	; 0x59
 8000a8a:	f7ff fe31 	bl	80006f0 <SD_SendCmd>
 8000a8e:	b968      	cbnz	r0, 8000aac <SD_disk_write+0x68>
		{
			do {
				if(!SD_TxDataBlock(buff, 0xFC)) break;
 8000a90:	21fc      	movs	r1, #252	; 0xfc
 8000a92:	4628      	mov	r0, r5
 8000a94:	f7ff fe8c 	bl	80007b0 <SD_TxDataBlock>
 8000a98:	b118      	cbz	r0, 8000aa2 <SD_disk_write+0x5e>
				buff += 512;
 8000a9a:	f505 7500 	add.w	r5, r5, #512	; 0x200
			} while (--count);
 8000a9e:	3c01      	subs	r4, #1
 8000aa0:	d1f6      	bne.n	8000a90 <SD_disk_write+0x4c>

			/* STOP_TRAN token */
			if(!SD_TxDataBlock(0, 0xFD))
 8000aa2:	21fd      	movs	r1, #253	; 0xfd
 8000aa4:	2000      	movs	r0, #0
 8000aa6:	f7ff fe83 	bl	80007b0 <SD_TxDataBlock>
 8000aaa:	b1f0      	cbz	r0, 8000aea <SD_disk_write+0xa6>
			}
		}
	}

	/* Idle */
	DESELECT();
 8000aac:	f7ff fdb0 	bl	8000610 <DESELECT>
	SPI_RxByte();
 8000ab0:	f7ff fdba 	bl	8000628 <SPI_RxByte>

	return count ? RES_ERROR : RES_OK;
 8000ab4:	1e20      	subs	r0, r4, #0
 8000ab6:	bf18      	it	ne
 8000ab8:	2001      	movne	r0, #1
}
 8000aba:	bd70      	pop	{r4, r5, r6, pc}
		if ((SD_SendCmd(CMD24, sector) == 0) && SD_TxDataBlock(buff, 0xFE))
 8000abc:	4631      	mov	r1, r6
 8000abe:	2058      	movs	r0, #88	; 0x58
 8000ac0:	f7ff fe16 	bl	80006f0 <SD_SendCmd>
 8000ac4:	2800      	cmp	r0, #0
 8000ac6:	d1f1      	bne.n	8000aac <SD_disk_write+0x68>
 8000ac8:	21fe      	movs	r1, #254	; 0xfe
 8000aca:	4628      	mov	r0, r5
 8000acc:	f7ff fe70 	bl	80007b0 <SD_TxDataBlock>
 8000ad0:	2800      	cmp	r0, #0
 8000ad2:	d0eb      	beq.n	8000aac <SD_disk_write+0x68>
			count = 0;
 8000ad4:	2400      	movs	r4, #0
 8000ad6:	e7e9      	b.n	8000aac <SD_disk_write+0x68>
			SD_SendCmd(CMD55, 0);
 8000ad8:	2100      	movs	r1, #0
 8000ada:	2077      	movs	r0, #119	; 0x77
 8000adc:	f7ff fe08 	bl	80006f0 <SD_SendCmd>
			SD_SendCmd(CMD23, count); /* ACMD23 */
 8000ae0:	4621      	mov	r1, r4
 8000ae2:	2057      	movs	r0, #87	; 0x57
 8000ae4:	f7ff fe04 	bl	80006f0 <SD_SendCmd>
 8000ae8:	e7cd      	b.n	8000a86 <SD_disk_write+0x42>
				count = 1;
 8000aea:	2401      	movs	r4, #1
 8000aec:	e7de      	b.n	8000aac <SD_disk_write+0x68>
	if (pdrv || !count) return RES_PARERR;
 8000aee:	2004      	movs	r0, #4
}
 8000af0:	4770      	bx	lr
	if (pdrv || !count) return RES_PARERR;
 8000af2:	2004      	movs	r0, #4
 8000af4:	e7e1      	b.n	8000aba <SD_disk_write+0x76>
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 8000af6:	2003      	movs	r0, #3
 8000af8:	e7df      	b.n	8000aba <SD_disk_write+0x76>
	if (Stat & STA_PROTECT) return RES_WRPRT;
 8000afa:	2002      	movs	r0, #2
 8000afc:	e7dd      	b.n	8000aba <SD_disk_write+0x76>
 8000afe:	bf00      	nop
 8000b00:	20000000 	.word	0x20000000
 8000b04:	20000164 	.word	0x20000164

08000b08 <SD_disk_ioctl>:
#endif /* _USE_WRITE */

/* ioctl */
DRESULT SD_disk_ioctl(BYTE drv, BYTE ctrl, void *buff) 
{
 8000b08:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000b0a:	b085      	sub	sp, #20
	DRESULT res;
	uint8_t n, csd[16], *ptr = buff;
	WORD csize;

	/* pdrv should be 0 */
	if (drv) return RES_PARERR;
 8000b0c:	2800      	cmp	r0, #0
 8000b0e:	f040 80b2 	bne.w	8000c76 <SD_disk_ioctl+0x16e>
 8000b12:	460d      	mov	r5, r1
 8000b14:	4616      	mov	r6, r2
 8000b16:	4607      	mov	r7, r0
	res = RES_ERROR;

	if (ctrl == CTRL_POWER)
 8000b18:	2905      	cmp	r1, #5
 8000b1a:	d013      	beq.n	8000b44 <SD_disk_ioctl+0x3c>
		}
	}
	else
	{
		/* no disk */
		if (Stat & STA_NOINIT) return RES_NOTRDY;
 8000b1c:	4b58      	ldr	r3, [pc, #352]	; (8000c80 <SD_disk_ioctl+0x178>)
 8000b1e:	781c      	ldrb	r4, [r3, #0]
 8000b20:	f014 0401 	ands.w	r4, r4, #1
 8000b24:	f040 80a9 	bne.w	8000c7a <SD_disk_ioctl+0x172>

		SELECT();
 8000b28:	f7ff fd66 	bl	80005f8 <SELECT>

		switch (ctrl)
 8000b2c:	2d0d      	cmp	r5, #13
 8000b2e:	f200 8096 	bhi.w	8000c5e <SD_disk_ioctl+0x156>
 8000b32:	e8df f005 	tbb	[pc, r5]
 8000b36:	1b5e      	.short	0x1b5e
 8000b38:	9494945a 	.word	0x9494945a
 8000b3c:	94949494 	.word	0x94949494
 8000b40:	82736494 	.word	0x82736494
		switch (*ptr)
 8000b44:	7814      	ldrb	r4, [r2, #0]
 8000b46:	2c01      	cmp	r4, #1
 8000b48:	d007      	beq.n	8000b5a <SD_disk_ioctl+0x52>
 8000b4a:	2c02      	cmp	r4, #2
 8000b4c:	d009      	beq.n	8000b62 <SD_disk_ioctl+0x5a>
 8000b4e:	b10c      	cbz	r4, 8000b54 <SD_disk_ioctl+0x4c>
 8000b50:	2404      	movs	r4, #4
 8000b52:	e089      	b.n	8000c68 <SD_disk_ioctl+0x160>
			SD_PowerOff();		/* Power Off */
 8000b54:	f7ff fd1e 	bl	8000594 <SD_PowerOff>
			break;
 8000b58:	e086      	b.n	8000c68 <SD_disk_ioctl+0x160>
			SD_PowerOn();		/* Power On */
 8000b5a:	f7ff fd81 	bl	8000660 <SD_PowerOn>
			res = RES_OK;
 8000b5e:	463c      	mov	r4, r7
			break;
 8000b60:	e082      	b.n	8000c68 <SD_disk_ioctl+0x160>
			*(ptr + 1) = SD_CheckPower();
 8000b62:	f7ff fd1d 	bl	80005a0 <SD_CheckPower>
 8000b66:	7070      	strb	r0, [r6, #1]
			res = RES_OK;		/* Power Check */
 8000b68:	463c      	mov	r4, r7
			break;
 8000b6a:	e07d      	b.n	8000c68 <SD_disk_ioctl+0x160>
		{
		case GET_SECTOR_COUNT:
			/* SEND_CSD */
			if ((SD_SendCmd(CMD9, 0) == 0) && SD_RxDataBlock(csd, 16))
 8000b6c:	2100      	movs	r1, #0
 8000b6e:	2049      	movs	r0, #73	; 0x49
 8000b70:	f7ff fdbe 	bl	80006f0 <SD_SendCmd>
 8000b74:	4604      	mov	r4, r0
 8000b76:	b108      	cbz	r0, 8000b7c <SD_disk_ioctl+0x74>
	res = RES_ERROR;
 8000b78:	462c      	mov	r4, r5
 8000b7a:	e071      	b.n	8000c60 <SD_disk_ioctl+0x158>
			if ((SD_SendCmd(CMD9, 0) == 0) && SD_RxDataBlock(csd, 16))
 8000b7c:	2110      	movs	r1, #16
 8000b7e:	4668      	mov	r0, sp
 8000b80:	f7ff fdf2 	bl	8000768 <SD_RxDataBlock>
 8000b84:	2800      	cmp	r0, #0
 8000b86:	d072      	beq.n	8000c6e <SD_disk_ioctl+0x166>
			{
				if ((csd[0] >> 6) == 1)
 8000b88:	f89d 3000 	ldrb.w	r3, [sp]
 8000b8c:	099b      	lsrs	r3, r3, #6
 8000b8e:	2b01      	cmp	r3, #1
 8000b90:	d01f      	beq.n	8000bd2 <SD_disk_ioctl+0xca>
					*(DWORD*) buff = (DWORD) csize << 10;
				}
				else
				{
					/* MMC or SDC V1 */
					n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 8000b92:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8000b96:	f002 020f 	and.w	r2, r2, #15
 8000b9a:	f89d 300a 	ldrb.w	r3, [sp, #10]
 8000b9e:	eb02 12d3 	add.w	r2, r2, r3, lsr #7
 8000ba2:	f89d 3009 	ldrb.w	r3, [sp, #9]
 8000ba6:	005b      	lsls	r3, r3, #1
 8000ba8:	f003 0306 	and.w	r3, r3, #6
 8000bac:	441a      	add	r2, r3
					csize = (csd[8] >> 6) + ((WORD) csd[7] << 2) + ((WORD) (csd[6] & 3) << 10) + 1;
 8000bae:	f89d 3008 	ldrb.w	r3, [sp, #8]
 8000bb2:	f89d 1007 	ldrb.w	r1, [sp, #7]
 8000bb6:	099b      	lsrs	r3, r3, #6
 8000bb8:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 8000bbc:	f89d 1006 	ldrb.w	r1, [sp, #6]
 8000bc0:	0289      	lsls	r1, r1, #10
 8000bc2:	f401 6140 	and.w	r1, r1, #3072	; 0xc00
 8000bc6:	440b      	add	r3, r1
 8000bc8:	3301      	adds	r3, #1
					*(DWORD*) buff = (DWORD) csize << (n - 9);
 8000bca:	3a07      	subs	r2, #7
 8000bcc:	4093      	lsls	r3, r2
 8000bce:	6033      	str	r3, [r6, #0]
 8000bd0:	e046      	b.n	8000c60 <SD_disk_ioctl+0x158>
					csize = csd[9] + ((WORD) csd[8] << 8) + 1;
 8000bd2:	f89d 3009 	ldrb.w	r3, [sp, #9]
 8000bd6:	f89d 2008 	ldrb.w	r2, [sp, #8]
 8000bda:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8000bde:	b29b      	uxth	r3, r3
 8000be0:	3301      	adds	r3, #1
 8000be2:	b29b      	uxth	r3, r3
					*(DWORD*) buff = (DWORD) csize << 10;
 8000be4:	029b      	lsls	r3, r3, #10
 8000be6:	6033      	str	r3, [r6, #0]
 8000be8:	e03a      	b.n	8000c60 <SD_disk_ioctl+0x158>
				}
				res = RES_OK;
			}
			break;
		case GET_SECTOR_SIZE:
			*(WORD*) buff = 512;
 8000bea:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000bee:	8033      	strh	r3, [r6, #0]
			res = RES_OK;
			break;
 8000bf0:	e036      	b.n	8000c60 <SD_disk_ioctl+0x158>
		case CTRL_SYNC:
			if (SD_ReadyWait() == 0xFF) res = RES_OK;
 8000bf2:	f7ff fd6b 	bl	80006cc <SD_ReadyWait>
 8000bf6:	28ff      	cmp	r0, #255	; 0xff
 8000bf8:	d03b      	beq.n	8000c72 <SD_disk_ioctl+0x16a>
	res = RES_ERROR;
 8000bfa:	2401      	movs	r4, #1
 8000bfc:	e030      	b.n	8000c60 <SD_disk_ioctl+0x158>
			break;
		case MMC_GET_CSD:
			/* SEND_CSD */
			if (SD_SendCmd(CMD9, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 8000bfe:	2100      	movs	r1, #0
 8000c00:	2049      	movs	r0, #73	; 0x49
 8000c02:	f7ff fd75 	bl	80006f0 <SD_SendCmd>
 8000c06:	4604      	mov	r4, r0
 8000c08:	b108      	cbz	r0, 8000c0e <SD_disk_ioctl+0x106>
	res = RES_ERROR;
 8000c0a:	2401      	movs	r4, #1
 8000c0c:	e028      	b.n	8000c60 <SD_disk_ioctl+0x158>
			if (SD_SendCmd(CMD9, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 8000c0e:	2110      	movs	r1, #16
 8000c10:	4630      	mov	r0, r6
 8000c12:	f7ff fda9 	bl	8000768 <SD_RxDataBlock>
 8000c16:	bb18      	cbnz	r0, 8000c60 <SD_disk_ioctl+0x158>
	res = RES_ERROR;
 8000c18:	2401      	movs	r4, #1
 8000c1a:	e021      	b.n	8000c60 <SD_disk_ioctl+0x158>
			break;
		case MMC_GET_CID:
			/* SEND_CID */
			if (SD_SendCmd(CMD10, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 8000c1c:	2100      	movs	r1, #0
 8000c1e:	204a      	movs	r0, #74	; 0x4a
 8000c20:	f7ff fd66 	bl	80006f0 <SD_SendCmd>
 8000c24:	4604      	mov	r4, r0
 8000c26:	b108      	cbz	r0, 8000c2c <SD_disk_ioctl+0x124>
	res = RES_ERROR;
 8000c28:	2401      	movs	r4, #1
 8000c2a:	e019      	b.n	8000c60 <SD_disk_ioctl+0x158>
			if (SD_SendCmd(CMD10, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 8000c2c:	2110      	movs	r1, #16
 8000c2e:	4630      	mov	r0, r6
 8000c30:	f7ff fd9a 	bl	8000768 <SD_RxDataBlock>
 8000c34:	b9a0      	cbnz	r0, 8000c60 <SD_disk_ioctl+0x158>
	res = RES_ERROR;
 8000c36:	2401      	movs	r4, #1
 8000c38:	e012      	b.n	8000c60 <SD_disk_ioctl+0x158>
			break;
		case MMC_GET_OCR:
			/* READ_OCR */
			if (SD_SendCmd(CMD58, 0) == 0)
 8000c3a:	2100      	movs	r1, #0
 8000c3c:	207a      	movs	r0, #122	; 0x7a
 8000c3e:	f7ff fd57 	bl	80006f0 <SD_SendCmd>
 8000c42:	4604      	mov	r4, r0
 8000c44:	b138      	cbz	r0, 8000c56 <SD_disk_ioctl+0x14e>
					*ptr++ = SPI_RxByte();
				}
				res = RES_OK;
			}
		default:
			res = RES_PARERR;
 8000c46:	2404      	movs	r4, #4
 8000c48:	e00a      	b.n	8000c60 <SD_disk_ioctl+0x158>
					*ptr++ = SPI_RxByte();
 8000c4a:	f7ff fced 	bl	8000628 <SPI_RxByte>
 8000c4e:	f806 0b01 	strb.w	r0, [r6], #1
				for (n = 0; n < 4; n++)
 8000c52:	3401      	adds	r4, #1
 8000c54:	b2e4      	uxtb	r4, r4
 8000c56:	2c03      	cmp	r4, #3
 8000c58:	d9f7      	bls.n	8000c4a <SD_disk_ioctl+0x142>
			res = RES_PARERR;
 8000c5a:	2404      	movs	r4, #4
 8000c5c:	e000      	b.n	8000c60 <SD_disk_ioctl+0x158>
		switch (ctrl)
 8000c5e:	2404      	movs	r4, #4
		}

		DESELECT();
 8000c60:	f7ff fcd6 	bl	8000610 <DESELECT>
		SPI_RxByte();
 8000c64:	f7ff fce0 	bl	8000628 <SPI_RxByte>
	}

	return res;
}
 8000c68:	4620      	mov	r0, r4
 8000c6a:	b005      	add	sp, #20
 8000c6c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	res = RES_ERROR;
 8000c6e:	462c      	mov	r4, r5
 8000c70:	e7f6      	b.n	8000c60 <SD_disk_ioctl+0x158>
			if (SD_ReadyWait() == 0xFF) res = RES_OK;
 8000c72:	462c      	mov	r4, r5
 8000c74:	e7f4      	b.n	8000c60 <SD_disk_ioctl+0x158>
	if (drv) return RES_PARERR;
 8000c76:	2404      	movs	r4, #4
 8000c78:	e7f6      	b.n	8000c68 <SD_disk_ioctl+0x160>
		if (Stat & STA_NOINIT) return RES_NOTRDY;
 8000c7a:	2403      	movs	r4, #3
 8000c7c:	e7f4      	b.n	8000c68 <SD_disk_ioctl+0x160>
 8000c7e:	bf00      	nop
 8000c80:	20000000 	.word	0x20000000

08000c84 <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 8000c84:	b530      	push	{r4, r5, lr}
 8000c86:	b08b      	sub	sp, #44	; 0x2c
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c88:	2400      	movs	r4, #0
 8000c8a:	9405      	str	r4, [sp, #20]
 8000c8c:	9406      	str	r4, [sp, #24]
 8000c8e:	9407      	str	r4, [sp, #28]
 8000c90:	9408      	str	r4, [sp, #32]
 8000c92:	9409      	str	r4, [sp, #36]	; 0x24
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8000c94:	9401      	str	r4, [sp, #4]
 8000c96:	4b22      	ldr	r3, [pc, #136]	; (8000d20 <MX_GPIO_Init+0x9c>)
 8000c98:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000c9a:	f042 0204 	orr.w	r2, r2, #4
 8000c9e:	631a      	str	r2, [r3, #48]	; 0x30
 8000ca0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000ca2:	f002 0204 	and.w	r2, r2, #4
 8000ca6:	9201      	str	r2, [sp, #4]
 8000ca8:	9a01      	ldr	r2, [sp, #4]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 8000caa:	9402      	str	r4, [sp, #8]
 8000cac:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000cae:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8000cb2:	631a      	str	r2, [r3, #48]	; 0x30
 8000cb4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000cb6:	f002 0280 	and.w	r2, r2, #128	; 0x80
 8000cba:	9202      	str	r2, [sp, #8]
 8000cbc:	9a02      	ldr	r2, [sp, #8]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000cbe:	9403      	str	r4, [sp, #12]
 8000cc0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000cc2:	f042 0201 	orr.w	r2, r2, #1
 8000cc6:	631a      	str	r2, [r3, #48]	; 0x30
 8000cc8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000cca:	f002 0201 	and.w	r2, r2, #1
 8000cce:	9203      	str	r2, [sp, #12]
 8000cd0:	9a03      	ldr	r2, [sp, #12]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8000cd2:	9404      	str	r4, [sp, #16]
 8000cd4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000cd6:	f042 0202 	orr.w	r2, r2, #2
 8000cda:	631a      	str	r2, [r3, #48]	; 0x30
 8000cdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cde:	f003 0302 	and.w	r3, r3, #2
 8000ce2:	9304      	str	r3, [sp, #16]
 8000ce4:	9b04      	ldr	r3, [sp, #16]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOA, SD_CS_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000ce6:	4d0f      	ldr	r5, [pc, #60]	; (8000d24 <MX_GPIO_Init+0xa0>)
 8000ce8:	4622      	mov	r2, r4
 8000cea:	2130      	movs	r1, #48	; 0x30
 8000cec:	4628      	mov	r0, r5
 8000cee:	f003 ff04 	bl	8004afa <HAL_GPIO_WritePin>

	/*Configure GPIO pin : B1_Pin */
	GPIO_InitStruct.Pin = B1_Pin;
 8000cf2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000cf6:	9305      	str	r3, [sp, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000cf8:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000cfc:	9306      	str	r3, [sp, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cfe:	9407      	str	r4, [sp, #28]
	HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000d00:	a905      	add	r1, sp, #20
 8000d02:	4809      	ldr	r0, [pc, #36]	; (8000d28 <MX_GPIO_Init+0xa4>)
 8000d04:	f003 fd8a 	bl	800481c <HAL_GPIO_Init>

	/*Configure GPIO pins : SD_CS_Pin LD2_Pin */
	GPIO_InitStruct.Pin = SD_CS_Pin|LD2_Pin;
 8000d08:	2330      	movs	r3, #48	; 0x30
 8000d0a:	9305      	str	r3, [sp, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d0c:	2301      	movs	r3, #1
 8000d0e:	9306      	str	r3, [sp, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d10:	9407      	str	r4, [sp, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d12:	9408      	str	r4, [sp, #32]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d14:	a905      	add	r1, sp, #20
 8000d16:	4628      	mov	r0, r5
 8000d18:	f003 fd80 	bl	800481c <HAL_GPIO_Init>

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 8000d1c:	b00b      	add	sp, #44	; 0x2c
 8000d1e:	bd30      	pop	{r4, r5, pc}
 8000d20:	40023800 	.word	0x40023800
 8000d24:	40020000 	.word	0x40020000
 8000d28:	40020800 	.word	0x40020800

08000d2c <bufsize>:
{
 8000d2c:	4603      	mov	r3, r0
	int i=0;
 8000d2e:	2000      	movs	r0, #0
	while (*buf++ != '\0') i++;
 8000d30:	e000      	b.n	8000d34 <bufsize+0x8>
 8000d32:	3001      	adds	r0, #1
 8000d34:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000d38:	2a00      	cmp	r2, #0
 8000d3a:	d1fa      	bne.n	8000d32 <bufsize+0x6>
}
 8000d3c:	4770      	bx	lr
	...

08000d40 <send_uart>:
{
 8000d40:	b510      	push	{r4, lr}
 8000d42:	4604      	mov	r4, r0
	uint8_t len = strlen (string);
 8000d44:	f7ff fa4c 	bl	80001e0 <strlen>
	HAL_UART_Transmit(&huart2, (uint8_t *) string, len, HAL_MAX_DELAY);  // transmit in blocking mode
 8000d48:	f04f 33ff 	mov.w	r3, #4294967295
 8000d4c:	b2c2      	uxtb	r2, r0
 8000d4e:	4621      	mov	r1, r4
 8000d50:	4801      	ldr	r0, [pc, #4]	; (8000d58 <send_uart+0x18>)
 8000d52:	f005 fe00 	bl	8006956 <HAL_UART_Transmit>
}
 8000d56:	bd10      	pop	{r4, pc}
 8000d58:	20002480 	.word	0x20002480

08000d5c <Error_Handler>:
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d5c:	b672      	cpsid	i
void Error_Handler(void)
{
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8000d5e:	e7fe      	b.n	8000d5e <Error_Handler+0x2>

08000d60 <MX_SPI1_Init>:
{
 8000d60:	b508      	push	{r3, lr}
	hspi1.Instance = SPI1;
 8000d62:	480d      	ldr	r0, [pc, #52]	; (8000d98 <MX_SPI1_Init+0x38>)
 8000d64:	4b0d      	ldr	r3, [pc, #52]	; (8000d9c <MX_SPI1_Init+0x3c>)
 8000d66:	6003      	str	r3, [r0, #0]
	hspi1.Init.Mode = SPI_MODE_MASTER;
 8000d68:	f44f 7382 	mov.w	r3, #260	; 0x104
 8000d6c:	6043      	str	r3, [r0, #4]
	hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000d6e:	2300      	movs	r3, #0
 8000d70:	6083      	str	r3, [r0, #8]
	hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000d72:	60c3      	str	r3, [r0, #12]
	hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000d74:	6103      	str	r3, [r0, #16]
	hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000d76:	6143      	str	r3, [r0, #20]
	hspi1.Init.NSS = SPI_NSS_SOFT;
 8000d78:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000d7c:	6182      	str	r2, [r0, #24]
	hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 8000d7e:	2230      	movs	r2, #48	; 0x30
 8000d80:	61c2      	str	r2, [r0, #28]
	hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000d82:	6203      	str	r3, [r0, #32]
	hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000d84:	6243      	str	r3, [r0, #36]	; 0x24
	hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000d86:	6283      	str	r3, [r0, #40]	; 0x28
	hspi1.Init.CRCPolynomial = 10;
 8000d88:	230a      	movs	r3, #10
 8000d8a:	62c3      	str	r3, [r0, #44]	; 0x2c
	if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000d8c:	f005 f804 	bl	8005d98 <HAL_SPI_Init>
 8000d90:	b900      	cbnz	r0, 8000d94 <MX_SPI1_Init+0x34>
}
 8000d92:	bd08      	pop	{r3, pc}
		Error_Handler();
 8000d94:	f7ff ffe2 	bl	8000d5c <Error_Handler>
 8000d98:	200023e0 	.word	0x200023e0
 8000d9c:	40013000 	.word	0x40013000

08000da0 <MX_USART2_UART_Init>:
{
 8000da0:	b508      	push	{r3, lr}
	huart2.Instance = USART2;
 8000da2:	480a      	ldr	r0, [pc, #40]	; (8000dcc <MX_USART2_UART_Init+0x2c>)
 8000da4:	4b0a      	ldr	r3, [pc, #40]	; (8000dd0 <MX_USART2_UART_Init+0x30>)
 8000da6:	6003      	str	r3, [r0, #0]
	huart2.Init.BaudRate = 115200;
 8000da8:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8000dac:	6043      	str	r3, [r0, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000dae:	2300      	movs	r3, #0
 8000db0:	6083      	str	r3, [r0, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 8000db2:	60c3      	str	r3, [r0, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 8000db4:	6103      	str	r3, [r0, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 8000db6:	220c      	movs	r2, #12
 8000db8:	6142      	str	r2, [r0, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000dba:	6183      	str	r3, [r0, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000dbc:	61c3      	str	r3, [r0, #28]
	if (HAL_UART_Init(&huart2) != HAL_OK)
 8000dbe:	f005 fd9b 	bl	80068f8 <HAL_UART_Init>
 8000dc2:	b900      	cbnz	r0, 8000dc6 <MX_USART2_UART_Init+0x26>
}
 8000dc4:	bd08      	pop	{r3, pc}
		Error_Handler();
 8000dc6:	f7ff ffc9 	bl	8000d5c <Error_Handler>
 8000dca:	bf00      	nop
 8000dcc:	20002480 	.word	0x20002480
 8000dd0:	40004400 	.word	0x40004400

08000dd4 <MX_TIM3_Init>:
{
 8000dd4:	b500      	push	{lr}
 8000dd6:	b087      	sub	sp, #28
	TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000dd8:	2300      	movs	r3, #0
 8000dda:	9302      	str	r3, [sp, #8]
 8000ddc:	9303      	str	r3, [sp, #12]
 8000dde:	9304      	str	r3, [sp, #16]
 8000de0:	9305      	str	r3, [sp, #20]
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000de2:	9300      	str	r3, [sp, #0]
 8000de4:	9301      	str	r3, [sp, #4]
	htim3.Instance = TIM3;
 8000de6:	4813      	ldr	r0, [pc, #76]	; (8000e34 <MX_TIM3_Init+0x60>)
 8000de8:	4a13      	ldr	r2, [pc, #76]	; (8000e38 <MX_TIM3_Init+0x64>)
 8000dea:	6002      	str	r2, [r0, #0]
	htim3.Init.Prescaler = 84-1;
 8000dec:	2253      	movs	r2, #83	; 0x53
 8000dee:	6042      	str	r2, [r0, #4]
	htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000df0:	6083      	str	r3, [r0, #8]
	htim3.Init.Period = 1000-1;
 8000df2:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000df6:	60c2      	str	r2, [r0, #12]
	htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000df8:	6103      	str	r3, [r0, #16]
	htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000dfa:	6183      	str	r3, [r0, #24]
	if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000dfc:	f005 fbb8 	bl	8006570 <HAL_TIM_Base_Init>
 8000e00:	b990      	cbnz	r0, 8000e28 <MX_TIM3_Init+0x54>
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000e02:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e06:	9302      	str	r3, [sp, #8]
	if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000e08:	a902      	add	r1, sp, #8
 8000e0a:	480a      	ldr	r0, [pc, #40]	; (8000e34 <MX_TIM3_Init+0x60>)
 8000e0c:	f005 fbe9 	bl	80065e2 <HAL_TIM_ConfigClockSource>
 8000e10:	b960      	cbnz	r0, 8000e2c <MX_TIM3_Init+0x58>
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e12:	2300      	movs	r3, #0
 8000e14:	9300      	str	r3, [sp, #0]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e16:	9301      	str	r3, [sp, #4]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000e18:	4669      	mov	r1, sp
 8000e1a:	4806      	ldr	r0, [pc, #24]	; (8000e34 <MX_TIM3_Init+0x60>)
 8000e1c:	f005 fc60 	bl	80066e0 <HAL_TIMEx_MasterConfigSynchronization>
 8000e20:	b930      	cbnz	r0, 8000e30 <MX_TIM3_Init+0x5c>
}
 8000e22:	b007      	add	sp, #28
 8000e24:	f85d fb04 	ldr.w	pc, [sp], #4
		Error_Handler();
 8000e28:	f7ff ff98 	bl	8000d5c <Error_Handler>
		Error_Handler();
 8000e2c:	f7ff ff96 	bl	8000d5c <Error_Handler>
		Error_Handler();
 8000e30:	f7ff ff94 	bl	8000d5c <Error_Handler>
 8000e34:	20002438 	.word	0x20002438
 8000e38:	40000400 	.word	0x40000400

08000e3c <SystemClock_Config>:
{
 8000e3c:	b500      	push	{lr}
 8000e3e:	b095      	sub	sp, #84	; 0x54
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e40:	2230      	movs	r2, #48	; 0x30
 8000e42:	2100      	movs	r1, #0
 8000e44:	a808      	add	r0, sp, #32
 8000e46:	f007 fc2b 	bl	80086a0 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e4a:	2300      	movs	r3, #0
 8000e4c:	9303      	str	r3, [sp, #12]
 8000e4e:	9304      	str	r3, [sp, #16]
 8000e50:	9305      	str	r3, [sp, #20]
 8000e52:	9306      	str	r3, [sp, #24]
 8000e54:	9307      	str	r3, [sp, #28]
	__HAL_RCC_PWR_CLK_ENABLE();
 8000e56:	9301      	str	r3, [sp, #4]
 8000e58:	4a1f      	ldr	r2, [pc, #124]	; (8000ed8 <SystemClock_Config+0x9c>)
 8000e5a:	6c11      	ldr	r1, [r2, #64]	; 0x40
 8000e5c:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
 8000e60:	6411      	str	r1, [r2, #64]	; 0x40
 8000e62:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8000e64:	f002 5280 	and.w	r2, r2, #268435456	; 0x10000000
 8000e68:	9201      	str	r2, [sp, #4]
 8000e6a:	9a01      	ldr	r2, [sp, #4]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000e6c:	9302      	str	r3, [sp, #8]
 8000e6e:	491b      	ldr	r1, [pc, #108]	; (8000edc <SystemClock_Config+0xa0>)
 8000e70:	680a      	ldr	r2, [r1, #0]
 8000e72:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8000e76:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8000e7a:	600a      	str	r2, [r1, #0]
 8000e7c:	680a      	ldr	r2, [r1, #0]
 8000e7e:	f402 4240 	and.w	r2, r2, #49152	; 0xc000
 8000e82:	9202      	str	r2, [sp, #8]
 8000e84:	9a02      	ldr	r2, [sp, #8]
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000e86:	2102      	movs	r1, #2
 8000e88:	9108      	str	r1, [sp, #32]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000e8a:	2201      	movs	r2, #1
 8000e8c:	920b      	str	r2, [sp, #44]	; 0x2c
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000e8e:	2210      	movs	r2, #16
 8000e90:	920c      	str	r2, [sp, #48]	; 0x30
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000e92:	910e      	str	r1, [sp, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000e94:	930f      	str	r3, [sp, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLM = 16;
 8000e96:	9210      	str	r2, [sp, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLN = 336;
 8000e98:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000e9c:	9311      	str	r3, [sp, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000e9e:	2304      	movs	r3, #4
 8000ea0:	9312      	str	r3, [sp, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLQ = 7;
 8000ea2:	2307      	movs	r3, #7
 8000ea4:	9313      	str	r3, [sp, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ea6:	a808      	add	r0, sp, #32
 8000ea8:	f004 fb9c 	bl	80055e4 <HAL_RCC_OscConfig>
 8000eac:	b980      	cbnz	r0, 8000ed0 <SystemClock_Config+0x94>
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000eae:	230f      	movs	r3, #15
 8000eb0:	9303      	str	r3, [sp, #12]
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000eb2:	2102      	movs	r1, #2
 8000eb4:	9104      	str	r1, [sp, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000eb6:	2300      	movs	r3, #0
 8000eb8:	9305      	str	r3, [sp, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000eba:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000ebe:	9206      	str	r2, [sp, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000ec0:	9307      	str	r3, [sp, #28]
	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000ec2:	a803      	add	r0, sp, #12
 8000ec4:	f004 fdf4 	bl	8005ab0 <HAL_RCC_ClockConfig>
 8000ec8:	b920      	cbnz	r0, 8000ed4 <SystemClock_Config+0x98>
}
 8000eca:	b015      	add	sp, #84	; 0x54
 8000ecc:	f85d fb04 	ldr.w	pc, [sp], #4
		Error_Handler();
 8000ed0:	f7ff ff44 	bl	8000d5c <Error_Handler>
		Error_Handler();
 8000ed4:	f7ff ff42 	bl	8000d5c <Error_Handler>
 8000ed8:	40023800 	.word	0x40023800
 8000edc:	40007000 	.word	0x40007000

08000ee0 <main>:
{
 8000ee0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000ee4:	b082      	sub	sp, #8
	HAL_Init();
 8000ee6:	f003 fbed 	bl	80046c4 <HAL_Init>
	SystemClock_Config();
 8000eea:	f7ff ffa7 	bl	8000e3c <SystemClock_Config>
	MX_GPIO_Init();
 8000eee:	f7ff fec9 	bl	8000c84 <MX_GPIO_Init>
	MX_SPI1_Init();
 8000ef2:	f7ff ff35 	bl	8000d60 <MX_SPI1_Init>
	MX_USART2_UART_Init();
 8000ef6:	f7ff ff53 	bl	8000da0 <MX_USART2_UART_Init>
	MX_FATFS_Init();
 8000efa:	f005 fd99 	bl	8006a30 <MX_FATFS_Init>
	MX_TIM3_Init();
 8000efe:	f7ff ff69 	bl	8000dd4 <MX_TIM3_Init>
	HAL_Delay (500);
 8000f02:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000f06:	f003 fc09 	bl	800471c <HAL_Delay>
	stato_data_logger= WAIT_FOR_START;
 8000f0a:	4b6a      	ldr	r3, [pc, #424]	; (80010b4 <main+0x1d4>)
 8000f0c:	2200      	movs	r2, #0
 8000f0e:	701a      	strb	r2, [r3, #0]
	HAL_TIM_Base_Init(&htim3);
 8000f10:	4869      	ldr	r0, [pc, #420]	; (80010b8 <main+0x1d8>)
 8000f12:	f005 fb2d 	bl	8006570 <HAL_TIM_Base_Init>
 8000f16:	e060      	b.n	8000fda <main+0xfa>
			if(HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin)== GPIO_PIN_RESET){
 8000f18:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000f1c:	4867      	ldr	r0, [pc, #412]	; (80010bc <main+0x1dc>)
 8000f1e:	f003 fde5 	bl	8004aec <HAL_GPIO_ReadPin>
 8000f22:	2800      	cmp	r0, #0
 8000f24:	d159      	bne.n	8000fda <main+0xfa>
				stato_data_logger=WAIT_FOR_OPEN_FILE;
 8000f26:	2201      	movs	r2, #1
 8000f28:	4b62      	ldr	r3, [pc, #392]	; (80010b4 <main+0x1d4>)
 8000f2a:	701a      	strb	r2, [r3, #0]
				acquisizione=0;
 8000f2c:	2300      	movs	r3, #0
 8000f2e:	4964      	ldr	r1, [pc, #400]	; (80010c0 <main+0x1e0>)
 8000f30:	600b      	str	r3, [r1, #0]
				contatore_acquisizioni=0;
 8000f32:	4964      	ldr	r1, [pc, #400]	; (80010c4 <main+0x1e4>)
 8000f34:	600b      	str	r3, [r1, #0]
				fresult = f_mount(&fs, "/", 1);
 8000f36:	4964      	ldr	r1, [pc, #400]	; (80010c8 <main+0x1e8>)
 8000f38:	4864      	ldr	r0, [pc, #400]	; (80010cc <main+0x1ec>)
 8000f3a:	f007 f839 	bl	8007fb0 <f_mount>
 8000f3e:	4b64      	ldr	r3, [pc, #400]	; (80010d0 <main+0x1f0>)
 8000f40:	7018      	strb	r0, [r3, #0]
				if (fresult != FR_OK) send_uart ("ERROR!!! in mounting SD CARD...\n\n");
 8000f42:	b1b8      	cbz	r0, 8000f74 <main+0x94>
 8000f44:	4863      	ldr	r0, [pc, #396]	; (80010d4 <main+0x1f4>)
 8000f46:	f7ff fefb 	bl	8000d40 <send_uart>
				if (IKS01A3_MOTION_SENSOR_Init(IKS01A3_LSM6DSO_0, MOTION_ACCELERO)==HAL_OK){
 8000f4a:	2102      	movs	r1, #2
 8000f4c:	2000      	movs	r0, #0
 8000f4e:	f003 f9e5 	bl	800431c <IKS01A3_MOTION_SENSOR_Init>
 8000f52:	2800      	cmp	r0, #0
 8000f54:	d141      	bne.n	8000fda <main+0xfa>
					IKS01A3_MOTION_SENSOR_SetOutputDataRate(IKS01A3_LSM6DSO_0, MOTION_ACCELERO, 3332);
 8000f56:	ed9f 0a60 	vldr	s0, [pc, #384]	; 80010d8 <main+0x1f8>
 8000f5a:	2102      	movs	r1, #2
 8000f5c:	f003 fb62 	bl	8004624 <IKS01A3_MOTION_SENSOR_SetOutputDataRate>
					IKS01A3_MOTION_SENSOR_Enable(IKS01A3_LSM6DSO_0, MOTION_ACCELERO);
 8000f60:	2102      	movs	r1, #2
 8000f62:	2000      	movs	r0, #0
 8000f64:	f003 fab2 	bl	80044cc <IKS01A3_MOTION_SENSOR_Enable>
					IKS01A3_MOTION_SENSOR_GetOutputDataRate(IKS01A3_LSM6DSO_0, MOTION_ACCELERO, &result);
 8000f68:	4a5c      	ldr	r2, [pc, #368]	; (80010dc <main+0x1fc>)
 8000f6a:	2102      	movs	r1, #2
 8000f6c:	2000      	movs	r0, #0
 8000f6e:	f003 fb2d 	bl	80045cc <IKS01A3_MOTION_SENSOR_GetOutputDataRate>
 8000f72:	e032      	b.n	8000fda <main+0xfa>
				else send_uart("SD CARD mounted successfully...\n\n");
 8000f74:	485a      	ldr	r0, [pc, #360]	; (80010e0 <main+0x200>)
 8000f76:	f7ff fee3 	bl	8000d40 <send_uart>
 8000f7a:	e7e6      	b.n	8000f4a <main+0x6a>
			HAL_Delay(10);
 8000f7c:	200a      	movs	r0, #10
 8000f7e:	f003 fbcd 	bl	800471c <HAL_Delay>
			acquisizione++;
 8000f82:	4b4f      	ldr	r3, [pc, #316]	; (80010c0 <main+0x1e0>)
 8000f84:	681a      	ldr	r2, [r3, #0]
 8000f86:	3201      	adds	r2, #1
 8000f88:	601a      	str	r2, [r3, #0]
			sprintf(nome_file, "acqusizione_%d.txt ",acquisizione);
 8000f8a:	4c56      	ldr	r4, [pc, #344]	; (80010e4 <main+0x204>)
 8000f8c:	4956      	ldr	r1, [pc, #344]	; (80010e8 <main+0x208>)
 8000f8e:	4620      	mov	r0, r4
 8000f90:	f007 fb8e 	bl	80086b0 <siprintf>
			fresult = f_open(&fil, nome_file, FA_CREATE_ALWAYS | FA_WRITE);
 8000f94:	f8df 816c 	ldr.w	r8, [pc, #364]	; 8001104 <main+0x224>
 8000f98:	220a      	movs	r2, #10
 8000f9a:	4621      	mov	r1, r4
 8000f9c:	4640      	mov	r0, r8
 8000f9e:	f007 f835 	bl	800800c <f_open>
 8000fa2:	4f4b      	ldr	r7, [pc, #300]	; (80010d0 <main+0x1f0>)
 8000fa4:	7038      	strb	r0, [r7, #0]
			send_uart("file creato");
 8000fa6:	4851      	ldr	r0, [pc, #324]	; (80010ec <main+0x20c>)
 8000fa8:	f7ff feca 	bl	8000d40 <send_uart>
			sprintf((char *)buffer, "X[mg],Y[mg],Z[mg]\r\n");
 8000fac:	4e50      	ldr	r6, [pc, #320]	; (80010f0 <main+0x210>)
 8000fae:	4634      	mov	r4, r6
 8000fb0:	4d50      	ldr	r5, [pc, #320]	; (80010f4 <main+0x214>)
 8000fb2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000fb4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000fb6:	682b      	ldr	r3, [r5, #0]
 8000fb8:	6023      	str	r3, [r4, #0]
			fresult = f_write(&fil, buffer, bufsize(buffer), &bw);
 8000fba:	4630      	mov	r0, r6
 8000fbc:	f7ff feb6 	bl	8000d2c <bufsize>
 8000fc0:	4602      	mov	r2, r0
 8000fc2:	4b4d      	ldr	r3, [pc, #308]	; (80010f8 <main+0x218>)
 8000fc4:	4631      	mov	r1, r6
 8000fc6:	4640      	mov	r0, r8
 8000fc8:	f007 f93a 	bl	8008240 <f_write>
 8000fcc:	7038      	strb	r0, [r7, #0]
			HAL_TIM_Base_Start_IT(&htim3);
 8000fce:	483a      	ldr	r0, [pc, #232]	; (80010b8 <main+0x1d8>)
 8000fd0:	f005 f968 	bl	80062a4 <HAL_TIM_Base_Start_IT>
			stato_data_logger=WAIT_FOR_STOP;
 8000fd4:	4b37      	ldr	r3, [pc, #220]	; (80010b4 <main+0x1d4>)
 8000fd6:	2202      	movs	r2, #2
 8000fd8:	701a      	strb	r2, [r3, #0]
		switch (stato_data_logger){
 8000fda:	4b36      	ldr	r3, [pc, #216]	; (80010b4 <main+0x1d4>)
 8000fdc:	781b      	ldrb	r3, [r3, #0]
 8000fde:	2b03      	cmp	r3, #3
 8000fe0:	d8fb      	bhi.n	8000fda <main+0xfa>
 8000fe2:	a201      	add	r2, pc, #4	; (adr r2, 8000fe8 <main+0x108>)
 8000fe4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000fe8:	08000f19 	.word	0x08000f19
 8000fec:	08000f7d 	.word	0x08000f7d
 8000ff0:	08000ff9 	.word	0x08000ff9
 8000ff4:	080010a3 	.word	0x080010a3
			if(contatore_acquisizioni>=DIM){
 8000ff8:	4b32      	ldr	r3, [pc, #200]	; (80010c4 <main+0x1e4>)
 8000ffa:	681a      	ldr	r2, [r3, #0]
 8000ffc:	f641 3357 	movw	r3, #6999	; 0x1b57
 8001000:	429a      	cmp	r2, r3
 8001002:	dc0d      	bgt.n	8001020 <main+0x140>
			if(HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin)== GPIO_PIN_RESET){
 8001004:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001008:	482c      	ldr	r0, [pc, #176]	; (80010bc <main+0x1dc>)
 800100a:	f003 fd6f 	bl	8004aec <HAL_GPIO_ReadPin>
 800100e:	2800      	cmp	r0, #0
 8001010:	d1e3      	bne.n	8000fda <main+0xfa>
				stato_data_logger=WAIT_FOR_CLOSE_FILE;
 8001012:	4b28      	ldr	r3, [pc, #160]	; (80010b4 <main+0x1d4>)
 8001014:	2203      	movs	r2, #3
 8001016:	701a      	strb	r2, [r3, #0]
				HAL_TIM_Base_Stop_IT(&htim3);
 8001018:	4827      	ldr	r0, [pc, #156]	; (80010b8 <main+0x1d8>)
 800101a:	f005 f97f 	bl	800631c <HAL_TIM_Base_Stop_IT>
 800101e:	e7dc      	b.n	8000fda <main+0xfa>
				HAL_TIM_Base_Stop_IT(&htim3);
 8001020:	4825      	ldr	r0, [pc, #148]	; (80010b8 <main+0x1d8>)
 8001022:	f005 f97b 	bl	800631c <HAL_TIM_Base_Stop_IT>
				contatore_acquisizioni=0;
 8001026:	4b27      	ldr	r3, [pc, #156]	; (80010c4 <main+0x1e4>)
 8001028:	2200      	movs	r2, #0
 800102a:	601a      	str	r2, [r3, #0]
				stato_data_logger=WAIT_FOR_CLOSE_FILE;
 800102c:	4b21      	ldr	r3, [pc, #132]	; (80010b4 <main+0x1d4>)
 800102e:	2203      	movs	r2, #3
 8001030:	701a      	strb	r2, [r3, #0]
 8001032:	e7e7      	b.n	8001004 <main+0x124>
				sprintf((char *)buffer, "%ld,%ld,%ld\r\n",misure_accelerometro[i].x, misure_accelerometro[i].y, misure_accelerometro[i].z );
 8001034:	4b31      	ldr	r3, [pc, #196]	; (80010fc <main+0x21c>)
 8001036:	eb04 0144 	add.w	r1, r4, r4, lsl #1
 800103a:	008a      	lsls	r2, r1, #2
 800103c:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 8001040:	589a      	ldr	r2, [r3, r2]
 8001042:	684b      	ldr	r3, [r1, #4]
 8001044:	6889      	ldr	r1, [r1, #8]
 8001046:	4d2a      	ldr	r5, [pc, #168]	; (80010f0 <main+0x210>)
 8001048:	9100      	str	r1, [sp, #0]
 800104a:	492d      	ldr	r1, [pc, #180]	; (8001100 <main+0x220>)
 800104c:	4628      	mov	r0, r5
 800104e:	f007 fb2f 	bl	80086b0 <siprintf>
				fresult = f_write(&fil, buffer, bufsize(buffer), &bw);
 8001052:	4628      	mov	r0, r5
 8001054:	f7ff fe6a 	bl	8000d2c <bufsize>
 8001058:	4602      	mov	r2, r0
 800105a:	4b27      	ldr	r3, [pc, #156]	; (80010f8 <main+0x218>)
 800105c:	4629      	mov	r1, r5
 800105e:	4829      	ldr	r0, [pc, #164]	; (8001104 <main+0x224>)
 8001060:	f007 f8ee 	bl	8008240 <f_write>
 8001064:	4b1a      	ldr	r3, [pc, #104]	; (80010d0 <main+0x1f0>)
 8001066:	7018      	strb	r0, [r3, #0]
			for(int i=0; i<DIM; i++){
 8001068:	3401      	adds	r4, #1
 800106a:	f641 3357 	movw	r3, #6999	; 0x1b57
 800106e:	429c      	cmp	r4, r3
 8001070:	dde0      	ble.n	8001034 <main+0x154>
			f_close(&fil);
 8001072:	4c24      	ldr	r4, [pc, #144]	; (8001104 <main+0x224>)
 8001074:	4620      	mov	r0, r4
 8001076:	f007 fa37 	bl	80084e8 <f_close>
			f_sync(&fil);
 800107a:	4620      	mov	r0, r4
 800107c:	f007 f9e8 	bl	8008450 <f_sync>
			fresult = f_mount(NULL, "/", 1);
 8001080:	2201      	movs	r2, #1
 8001082:	4911      	ldr	r1, [pc, #68]	; (80010c8 <main+0x1e8>)
 8001084:	2000      	movs	r0, #0
 8001086:	f006 ff93 	bl	8007fb0 <f_mount>
 800108a:	4b11      	ldr	r3, [pc, #68]	; (80010d0 <main+0x1f0>)
 800108c:	7018      	strb	r0, [r3, #0]
			if (fresult == FR_OK)
 800108e:	b150      	cbz	r0, 80010a6 <main+0x1c6>
			if(IKS01A3_MOTION_SENSOR_Disable(IKS01A3_LSM6DSO_0, MOTION_ACCELERO)==HAL_OK){
 8001090:	2102      	movs	r1, #2
 8001092:	2000      	movs	r0, #0
 8001094:	f003 fa44 	bl	8004520 <IKS01A3_MOTION_SENSOR_Disable>
 8001098:	b148      	cbz	r0, 80010ae <main+0x1ce>
			stato_data_logger=WAIT_FOR_START;
 800109a:	4b06      	ldr	r3, [pc, #24]	; (80010b4 <main+0x1d4>)
 800109c:	2200      	movs	r2, #0
 800109e:	701a      	strb	r2, [r3, #0]
			break;
 80010a0:	e79b      	b.n	8000fda <main+0xfa>
		switch (stato_data_logger){
 80010a2:	2400      	movs	r4, #0
 80010a4:	e7e1      	b.n	800106a <main+0x18a>
				send_uart ("SD CARD UNMOUNTED successfully...\n");
 80010a6:	4818      	ldr	r0, [pc, #96]	; (8001108 <main+0x228>)
 80010a8:	f7ff fe4a 	bl	8000d40 <send_uart>
 80010ac:	e7f0      	b.n	8001090 <main+0x1b0>
				IKS01A3_MOTION_SENSOR_DeInit(IKS01A3_LSM6DSO_0);
 80010ae:	f003 f9f5 	bl	800449c <IKS01A3_MOTION_SENSOR_DeInit>
 80010b2:	e7f2      	b.n	800109a <main+0x1ba>
 80010b4:	20016d08 	.word	0x20016d08
 80010b8:	20002438 	.word	0x20002438
 80010bc:	40020800 	.word	0x40020800
 80010c0:	20000168 	.word	0x20000168
 80010c4:	20000370 	.word	0x20000370
 80010c8:	08008fa4 	.word	0x08008fa4
 80010cc:	200013a8 	.word	0x200013a8
 80010d0:	200013a4 	.word	0x200013a4
 80010d4:	08008fa8 	.word	0x08008fa8
 80010d8:	45504000 	.word	0x45504000
 80010dc:	20016d04 	.word	0x20016d04
 80010e0:	08008fcc 	.word	0x08008fcc
 80010e4:	20016ce4 	.word	0x20016ce4
 80010e8:	08008ff0 	.word	0x08008ff0
 80010ec:	08009004 	.word	0x08009004
 80010f0:	2000016c 	.word	0x2000016c
 80010f4:	08009010 	.word	0x08009010
 80010f8:	2000036c 	.word	0x2000036c
 80010fc:	200024c4 	.word	0x200024c4
 8001100:	08009024 	.word	0x08009024
 8001104:	20000374 	.word	0x20000374
 8001108:	08009034 	.word	0x08009034

0800110c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800110c:	b500      	push	{lr}
 800110e:	b083      	sub	sp, #12
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001110:	2100      	movs	r1, #0
 8001112:	9100      	str	r1, [sp, #0]
 8001114:	4b0c      	ldr	r3, [pc, #48]	; (8001148 <HAL_MspInit+0x3c>)
 8001116:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001118:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800111c:	645a      	str	r2, [r3, #68]	; 0x44
 800111e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001120:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8001124:	9200      	str	r2, [sp, #0]
 8001126:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001128:	9101      	str	r1, [sp, #4]
 800112a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800112c:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001130:	641a      	str	r2, [r3, #64]	; 0x40
 8001132:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001134:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001138:	9301      	str	r3, [sp, #4]
 800113a:	9b01      	ldr	r3, [sp, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800113c:	2007      	movs	r0, #7
 800113e:	f003 fb01 	bl	8004744 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001142:	b003      	add	sp, #12
 8001144:	f85d fb04 	ldr.w	pc, [sp], #4
 8001148:	40023800 	.word	0x40023800

0800114c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800114c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800114e:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001150:	2300      	movs	r3, #0
 8001152:	9303      	str	r3, [sp, #12]
 8001154:	9304      	str	r3, [sp, #16]
 8001156:	9305      	str	r3, [sp, #20]
 8001158:	9306      	str	r3, [sp, #24]
 800115a:	9307      	str	r3, [sp, #28]
  if(hspi->Instance==SPI1)
 800115c:	6802      	ldr	r2, [r0, #0]
 800115e:	4b1e      	ldr	r3, [pc, #120]	; (80011d8 <HAL_SPI_MspInit+0x8c>)
 8001160:	429a      	cmp	r2, r3
 8001162:	d001      	beq.n	8001168 <HAL_SPI_MspInit+0x1c>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001164:	b009      	add	sp, #36	; 0x24
 8001166:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001168:	2400      	movs	r4, #0
 800116a:	9400      	str	r4, [sp, #0]
 800116c:	f503 3384 	add.w	r3, r3, #67584	; 0x10800
 8001170:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001172:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8001176:	645a      	str	r2, [r3, #68]	; 0x44
 8001178:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800117a:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 800117e:	9200      	str	r2, [sp, #0]
 8001180:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001182:	9401      	str	r4, [sp, #4]
 8001184:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001186:	f042 0201 	orr.w	r2, r2, #1
 800118a:	631a      	str	r2, [r3, #48]	; 0x30
 800118c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800118e:	f002 0201 	and.w	r2, r2, #1
 8001192:	9201      	str	r2, [sp, #4]
 8001194:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001196:	9402      	str	r4, [sp, #8]
 8001198:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800119a:	f042 0202 	orr.w	r2, r2, #2
 800119e:	631a      	str	r2, [r3, #48]	; 0x30
 80011a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011a2:	f003 0302 	and.w	r3, r3, #2
 80011a6:	9302      	str	r3, [sp, #8]
 80011a8:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80011aa:	23c0      	movs	r3, #192	; 0xc0
 80011ac:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011ae:	2702      	movs	r7, #2
 80011b0:	9704      	str	r7, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011b2:	2603      	movs	r6, #3
 80011b4:	9606      	str	r6, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80011b6:	2505      	movs	r5, #5
 80011b8:	9507      	str	r5, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011ba:	a903      	add	r1, sp, #12
 80011bc:	4807      	ldr	r0, [pc, #28]	; (80011dc <HAL_SPI_MspInit+0x90>)
 80011be:	f003 fb2d 	bl	800481c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80011c2:	2308      	movs	r3, #8
 80011c4:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011c6:	9704      	str	r7, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011c8:	9405      	str	r4, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011ca:	9606      	str	r6, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80011cc:	9507      	str	r5, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011ce:	a903      	add	r1, sp, #12
 80011d0:	4803      	ldr	r0, [pc, #12]	; (80011e0 <HAL_SPI_MspInit+0x94>)
 80011d2:	f003 fb23 	bl	800481c <HAL_GPIO_Init>
}
 80011d6:	e7c5      	b.n	8001164 <HAL_SPI_MspInit+0x18>
 80011d8:	40013000 	.word	0x40013000
 80011dc:	40020000 	.word	0x40020000
 80011e0:	40020400 	.word	0x40020400

080011e4 <HAL_TIM_Base_MspInit>:
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
  if(htim_base->Instance==TIM3)
 80011e4:	6802      	ldr	r2, [r0, #0]
 80011e6:	4b0e      	ldr	r3, [pc, #56]	; (8001220 <HAL_TIM_Base_MspInit+0x3c>)
 80011e8:	429a      	cmp	r2, r3
 80011ea:	d000      	beq.n	80011ee <HAL_TIM_Base_MspInit+0xa>
 80011ec:	4770      	bx	lr
{
 80011ee:	b500      	push	{lr}
 80011f0:	b083      	sub	sp, #12
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80011f2:	2100      	movs	r1, #0
 80011f4:	9101      	str	r1, [sp, #4]
 80011f6:	f503 330d 	add.w	r3, r3, #144384	; 0x23400
 80011fa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80011fc:	f042 0202 	orr.w	r2, r2, #2
 8001200:	641a      	str	r2, [r3, #64]	; 0x40
 8001202:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001204:	f003 0302 	and.w	r3, r3, #2
 8001208:	9301      	str	r3, [sp, #4]
 800120a:	9b01      	ldr	r3, [sp, #4]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800120c:	460a      	mov	r2, r1
 800120e:	201d      	movs	r0, #29
 8001210:	f003 faaa 	bl	8004768 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001214:	201d      	movs	r0, #29
 8001216:	f003 fadf 	bl	80047d8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 800121a:	b003      	add	sp, #12
 800121c:	f85d fb04 	ldr.w	pc, [sp], #4
 8001220:	40000400 	.word	0x40000400

08001224 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001224:	b500      	push	{lr}
 8001226:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001228:	2300      	movs	r3, #0
 800122a:	9303      	str	r3, [sp, #12]
 800122c:	9304      	str	r3, [sp, #16]
 800122e:	9305      	str	r3, [sp, #20]
 8001230:	9306      	str	r3, [sp, #24]
 8001232:	9307      	str	r3, [sp, #28]
  if(huart->Instance==USART2)
 8001234:	6802      	ldr	r2, [r0, #0]
 8001236:	4b14      	ldr	r3, [pc, #80]	; (8001288 <HAL_UART_MspInit+0x64>)
 8001238:	429a      	cmp	r2, r3
 800123a:	d002      	beq.n	8001242 <HAL_UART_MspInit+0x1e>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800123c:	b009      	add	sp, #36	; 0x24
 800123e:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_USART2_CLK_ENABLE();
 8001242:	2100      	movs	r1, #0
 8001244:	9101      	str	r1, [sp, #4]
 8001246:	f503 33fa 	add.w	r3, r3, #128000	; 0x1f400
 800124a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800124c:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8001250:	641a      	str	r2, [r3, #64]	; 0x40
 8001252:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001254:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 8001258:	9201      	str	r2, [sp, #4]
 800125a:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800125c:	9102      	str	r1, [sp, #8]
 800125e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001260:	f042 0201 	orr.w	r2, r2, #1
 8001264:	631a      	str	r2, [r3, #48]	; 0x30
 8001266:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001268:	f003 0301 	and.w	r3, r3, #1
 800126c:	9302      	str	r3, [sp, #8]
 800126e:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001270:	230c      	movs	r3, #12
 8001272:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001274:	2302      	movs	r3, #2
 8001276:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001278:	2307      	movs	r3, #7
 800127a:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800127c:	a903      	add	r1, sp, #12
 800127e:	4803      	ldr	r0, [pc, #12]	; (800128c <HAL_UART_MspInit+0x68>)
 8001280:	f003 facc 	bl	800481c <HAL_GPIO_Init>
}
 8001284:	e7da      	b.n	800123c <HAL_UART_MspInit+0x18>
 8001286:	bf00      	nop
 8001288:	40004400 	.word	0x40004400
 800128c:	40020000 	.word	0x40020000

08001290 <SDTimer_Handler>:
/* External variables --------------------------------------------------------*/
extern TIM_HandleTypeDef htim3;
/* USER CODE BEGIN EV */
void SDTimer_Handler(void)
{
  if(Timer1 > 0)
 8001290:	4b08      	ldr	r3, [pc, #32]	; (80012b4 <SDTimer_Handler+0x24>)
 8001292:	781b      	ldrb	r3, [r3, #0]
 8001294:	b123      	cbz	r3, 80012a0 <SDTimer_Handler+0x10>
    Timer1--;
 8001296:	4a07      	ldr	r2, [pc, #28]	; (80012b4 <SDTimer_Handler+0x24>)
 8001298:	7813      	ldrb	r3, [r2, #0]
 800129a:	3b01      	subs	r3, #1
 800129c:	b2db      	uxtb	r3, r3
 800129e:	7013      	strb	r3, [r2, #0]

  if(Timer2 > 0)
 80012a0:	4b05      	ldr	r3, [pc, #20]	; (80012b8 <SDTimer_Handler+0x28>)
 80012a2:	781b      	ldrb	r3, [r3, #0]
 80012a4:	b123      	cbz	r3, 80012b0 <SDTimer_Handler+0x20>
    Timer2--;
 80012a6:	4a04      	ldr	r2, [pc, #16]	; (80012b8 <SDTimer_Handler+0x28>)
 80012a8:	7813      	ldrb	r3, [r2, #0]
 80012aa:	3b01      	subs	r3, #1
 80012ac:	b2db      	uxtb	r3, r3
 80012ae:	7013      	strb	r3, [r2, #0]
}
 80012b0:	4770      	bx	lr
 80012b2:	bf00      	nop
 80012b4:	20016d0a 	.word	0x20016d0a
 80012b8:	20016d0b 	.word	0x20016d0b

080012bc <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80012bc:	e7fe      	b.n	80012bc <NMI_Handler>

080012be <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80012be:	e7fe      	b.n	80012be <HardFault_Handler>

080012c0 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80012c0:	e7fe      	b.n	80012c0 <MemManage_Handler>

080012c2 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80012c2:	e7fe      	b.n	80012c2 <BusFault_Handler>

080012c4 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80012c4:	e7fe      	b.n	80012c4 <UsageFault_Handler>

080012c6 <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80012c6:	4770      	bx	lr

080012c8 <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80012c8:	4770      	bx	lr

080012ca <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80012ca:	4770      	bx	lr

080012cc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80012cc:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

	  FatFsCnt++;
 80012ce:	4a09      	ldr	r2, [pc, #36]	; (80012f4 <SysTick_Handler+0x28>)
 80012d0:	7813      	ldrb	r3, [r2, #0]
 80012d2:	3301      	adds	r3, #1
 80012d4:	b2db      	uxtb	r3, r3
 80012d6:	7013      	strb	r3, [r2, #0]
	  if(FatFsCnt >= 10)
 80012d8:	7813      	ldrb	r3, [r2, #0]
 80012da:	b2db      	uxtb	r3, r3
 80012dc:	2b09      	cmp	r3, #9
 80012de:	d802      	bhi.n	80012e6 <SysTick_Handler+0x1a>
	    FatFsCnt = 0;
	    SDTimer_Handler();
	  }

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80012e0:	f003 fa0a 	bl	80046f8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80012e4:	bd08      	pop	{r3, pc}
	    FatFsCnt = 0;
 80012e6:	4613      	mov	r3, r2
 80012e8:	2200      	movs	r2, #0
 80012ea:	701a      	strb	r2, [r3, #0]
	    SDTimer_Handler();
 80012ec:	f7ff ffd0 	bl	8001290 <SDTimer_Handler>
 80012f0:	e7f6      	b.n	80012e0 <SysTick_Handler+0x14>
 80012f2:	bf00      	nop
 80012f4:	20016d09 	.word	0x20016d09

080012f8 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80012f8:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80012fa:	4808      	ldr	r0, [pc, #32]	; (800131c <TIM3_IRQHandler+0x24>)
 80012fc:	f005 f82c 	bl	8006358 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */
  IKS01A3_MOTION_SENSOR_GetAxes(IKS01A3_LSM6DSO_0, MOTION_ACCELERO, &misure_accelerometro[contatore_acquisizioni++]);
 8001300:	4a07      	ldr	r2, [pc, #28]	; (8001320 <TIM3_IRQHandler+0x28>)
 8001302:	6813      	ldr	r3, [r2, #0]
 8001304:	1c59      	adds	r1, r3, #1
 8001306:	6011      	str	r1, [r2, #0]
 8001308:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800130c:	009a      	lsls	r2, r3, #2
 800130e:	4b05      	ldr	r3, [pc, #20]	; (8001324 <TIM3_IRQHandler+0x2c>)
 8001310:	441a      	add	r2, r3
 8001312:	2102      	movs	r1, #2
 8001314:	2000      	movs	r0, #0
 8001316:	f003 f92d 	bl	8004574 <IKS01A3_MOTION_SENSOR_GetAxes>
//  sprintf((char *)buffer, "%ld,%ld,%ld\r\n",misure_accelerometro.x, misure_accelerometro.y, misure_accelerometro.z );
//  fresult = f_write(&fil, buffer, bufsize(buffer), &bw);

  /* USER CODE END TIM3_IRQn 1 */
}
 800131a:	bd08      	pop	{r3, pc}
 800131c:	20002438 	.word	0x20002438
 8001320:	20000370 	.word	0x20000370
 8001324:	200024c4 	.word	0x200024c4

08001328 <I2C1_MspInit>:

  return ret;
}

static void I2C1_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001328:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800132c:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct;
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800132e:	2500      	movs	r5, #0
 8001330:	9501      	str	r5, [sp, #4]
 8001332:	4c1b      	ldr	r4, [pc, #108]	; (80013a0 <I2C1_MspInit+0x78>)
 8001334:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8001336:	f043 0302 	orr.w	r3, r3, #2
 800133a:	6323      	str	r3, [r4, #48]	; 0x30
 800133c:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800133e:	f003 0302 	and.w	r3, r3, #2
 8001342:	9301      	str	r3, [sp, #4]
 8001344:	9b01      	ldr	r3, [sp, #4]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = BUS_I2C1_SCL_GPIO_PIN;
 8001346:	f44f 7380 	mov.w	r3, #256	; 0x100
 800134a:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800134c:	f04f 0912 	mov.w	r9, #18
 8001350:	f8cd 9010 	str.w	r9, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001354:	9505      	str	r5, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001356:	f04f 0803 	mov.w	r8, #3
 800135a:	f8cd 8018 	str.w	r8, [sp, #24]
    GPIO_InitStruct.Alternate = BUS_I2C1_SCL_GPIO_AF;
 800135e:	2704      	movs	r7, #4
 8001360:	9707      	str	r7, [sp, #28]
    HAL_GPIO_Init(BUS_I2C1_SCL_GPIO_PORT, &GPIO_InitStruct);
 8001362:	4e10      	ldr	r6, [pc, #64]	; (80013a4 <I2C1_MspInit+0x7c>)
 8001364:	a903      	add	r1, sp, #12
 8001366:	4630      	mov	r0, r6
 8001368:	f003 fa58 	bl	800481c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BUS_I2C1_SDA_GPIO_PIN;
 800136c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001370:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001372:	f8cd 9010 	str.w	r9, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001376:	9505      	str	r5, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001378:	f8cd 8018 	str.w	r8, [sp, #24]
    GPIO_InitStruct.Alternate = BUS_I2C1_SDA_GPIO_AF;
 800137c:	9707      	str	r7, [sp, #28]
    HAL_GPIO_Init(BUS_I2C1_SDA_GPIO_PORT, &GPIO_InitStruct);
 800137e:	a903      	add	r1, sp, #12
 8001380:	4630      	mov	r0, r6
 8001382:	f003 fa4b 	bl	800481c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001386:	9502      	str	r5, [sp, #8]
 8001388:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800138a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800138e:	6423      	str	r3, [r4, #64]	; 0x40
 8001390:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001392:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001396:	9302      	str	r3, [sp, #8]
 8001398:	9b02      	ldr	r3, [sp, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
}
 800139a:	b009      	add	sp, #36	; 0x24
 800139c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80013a0:	40023800 	.word	0x40023800
 80013a4:	40020400 	.word	0x40020400

080013a8 <I2C1_MspDeInit>:

static void I2C1_MspDeInit(I2C_HandleTypeDef* i2cHandle)
{
 80013a8:	b510      	push	{r4, lr}
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 80013aa:	4a08      	ldr	r2, [pc, #32]	; (80013cc <I2C1_MspDeInit+0x24>)
 80013ac:	6c13      	ldr	r3, [r2, #64]	; 0x40
 80013ae:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80013b2:	6413      	str	r3, [r2, #64]	; 0x40

    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(BUS_I2C1_SCL_GPIO_PORT, BUS_I2C1_SCL_GPIO_PIN);
 80013b4:	4c06      	ldr	r4, [pc, #24]	; (80013d0 <I2C1_MspDeInit+0x28>)
 80013b6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80013ba:	4620      	mov	r0, r4
 80013bc:	f003 fb0e 	bl	80049dc <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(BUS_I2C1_SDA_GPIO_PORT, BUS_I2C1_SDA_GPIO_PIN);
 80013c0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80013c4:	4620      	mov	r0, r4
 80013c6:	f003 fb09 	bl	80049dc <HAL_GPIO_DeInit>

  /* USER CODE BEGIN I2C1_MspDeInit 1 */

  /* USER CODE END I2C1_MspDeInit 1 */
}
 80013ca:	bd10      	pop	{r4, pc}
 80013cc:	40023800 	.word	0x40023800
 80013d0:	40020400 	.word	0x40020400

080013d4 <BSP_I2C1_DeInit>:
  if (I2C1InitCounter > 0)
 80013d4:	4b0b      	ldr	r3, [pc, #44]	; (8001404 <BSP_I2C1_DeInit+0x30>)
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	b17b      	cbz	r3, 80013fa <BSP_I2C1_DeInit+0x26>
    if (--I2C1InitCounter == 0)
 80013da:	3b01      	subs	r3, #1
 80013dc:	4a09      	ldr	r2, [pc, #36]	; (8001404 <BSP_I2C1_DeInit+0x30>)
 80013de:	6013      	str	r3, [r2, #0]
 80013e0:	b10b      	cbz	r3, 80013e6 <BSP_I2C1_DeInit+0x12>
  int32_t ret = BSP_ERROR_NONE;
 80013e2:	2000      	movs	r0, #0
}
 80013e4:	4770      	bx	lr
{
 80013e6:	b510      	push	{r4, lr}
      I2C1_MspDeInit(&hi2c1);
 80013e8:	4c07      	ldr	r4, [pc, #28]	; (8001408 <BSP_I2C1_DeInit+0x34>)
 80013ea:	4620      	mov	r0, r4
 80013ec:	f7ff ffdc 	bl	80013a8 <I2C1_MspDeInit>
      if (HAL_I2C_DeInit(&hi2c1) != HAL_OK)
 80013f0:	4620      	mov	r0, r4
 80013f2:	f003 feb4 	bl	800515e <HAL_I2C_DeInit>
 80013f6:	b910      	cbnz	r0, 80013fe <BSP_I2C1_DeInit+0x2a>
}
 80013f8:	bd10      	pop	{r4, pc}
  int32_t ret = BSP_ERROR_NONE;
 80013fa:	2000      	movs	r0, #0
 80013fc:	4770      	bx	lr
        ret = BSP_ERROR_BUS_FAILURE;
 80013fe:	f06f 0007 	mvn.w	r0, #7
  return ret;
 8001402:	e7f9      	b.n	80013f8 <BSP_I2C1_DeInit+0x24>
 8001404:	20016d0c 	.word	0x20016d0c
 8001408:	20016d10 	.word	0x20016d10

0800140c <BSP_I2C1_WriteReg>:
{
 800140c:	b510      	push	{r4, lr}
 800140e:	b084      	sub	sp, #16
  if (HAL_I2C_Mem_Write(&hi2c1, DevAddr,Reg, I2C_MEMADD_SIZE_8BIT,pData, Length, BUS_I2C1_POLL_TIMEOUT) != HAL_OK)
 8001410:	f44f 5480 	mov.w	r4, #4096	; 0x1000
 8001414:	9402      	str	r4, [sp, #8]
 8001416:	9301      	str	r3, [sp, #4]
 8001418:	9200      	str	r2, [sp, #0]
 800141a:	2301      	movs	r3, #1
 800141c:	460a      	mov	r2, r1
 800141e:	4601      	mov	r1, r0
 8001420:	4808      	ldr	r0, [pc, #32]	; (8001444 <BSP_I2C1_WriteReg+0x38>)
 8001422:	f003 feb5 	bl	8005190 <HAL_I2C_Mem_Write>
 8001426:	b910      	cbnz	r0, 800142e <BSP_I2C1_WriteReg+0x22>
  int32_t ret = BSP_ERROR_NONE;
 8001428:	2000      	movs	r0, #0
}
 800142a:	b004      	add	sp, #16
 800142c:	bd10      	pop	{r4, pc}
    if (HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF)
 800142e:	4805      	ldr	r0, [pc, #20]	; (8001444 <BSP_I2C1_WriteReg+0x38>)
 8001430:	f004 f8d5 	bl	80055de <HAL_I2C_GetError>
 8001434:	2804      	cmp	r0, #4
 8001436:	d002      	beq.n	800143e <BSP_I2C1_WriteReg+0x32>
      ret =  BSP_ERROR_PERIPH_FAILURE;
 8001438:	f06f 0003 	mvn.w	r0, #3
  return ret;
 800143c:	e7f5      	b.n	800142a <BSP_I2C1_WriteReg+0x1e>
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 800143e:	f06f 0065 	mvn.w	r0, #101	; 0x65
 8001442:	e7f2      	b.n	800142a <BSP_I2C1_WriteReg+0x1e>
 8001444:	20016d10 	.word	0x20016d10

08001448 <BSP_I2C1_ReadReg>:
{
 8001448:	b510      	push	{r4, lr}
 800144a:	b084      	sub	sp, #16
  if (HAL_I2C_Mem_Read(&hi2c1, DevAddr, Reg, I2C_MEMADD_SIZE_8BIT, pData, Length, BUS_I2C1_POLL_TIMEOUT) != HAL_OK)
 800144c:	f44f 5480 	mov.w	r4, #4096	; 0x1000
 8001450:	9402      	str	r4, [sp, #8]
 8001452:	9301      	str	r3, [sp, #4]
 8001454:	9200      	str	r2, [sp, #0]
 8001456:	2301      	movs	r3, #1
 8001458:	460a      	mov	r2, r1
 800145a:	4601      	mov	r1, r0
 800145c:	4808      	ldr	r0, [pc, #32]	; (8001480 <BSP_I2C1_ReadReg+0x38>)
 800145e:	f003 ff49 	bl	80052f4 <HAL_I2C_Mem_Read>
 8001462:	b910      	cbnz	r0, 800146a <BSP_I2C1_ReadReg+0x22>
  int32_t ret = BSP_ERROR_NONE;
 8001464:	2000      	movs	r0, #0
}
 8001466:	b004      	add	sp, #16
 8001468:	bd10      	pop	{r4, pc}
    if (HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF)
 800146a:	4805      	ldr	r0, [pc, #20]	; (8001480 <BSP_I2C1_ReadReg+0x38>)
 800146c:	f004 f8b7 	bl	80055de <HAL_I2C_GetError>
 8001470:	2804      	cmp	r0, #4
 8001472:	d002      	beq.n	800147a <BSP_I2C1_ReadReg+0x32>
      ret = BSP_ERROR_PERIPH_FAILURE;
 8001474:	f06f 0003 	mvn.w	r0, #3
  return ret;
 8001478:	e7f5      	b.n	8001466 <BSP_I2C1_ReadReg+0x1e>
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 800147a:	f06f 0065 	mvn.w	r0, #101	; 0x65
 800147e:	e7f2      	b.n	8001466 <BSP_I2C1_ReadReg+0x1e>
 8001480:	20016d10 	.word	0x20016d10

08001484 <BSP_GetTick>:
int32_t BSP_GetTick(void) {
 8001484:	b508      	push	{r3, lr}
  return HAL_GetTick();
 8001486:	f003 f943 	bl	8004710 <HAL_GetTick>
}
 800148a:	bd08      	pop	{r3, pc}

0800148c <MX_I2C1_Init>:
{
 800148c:	b508      	push	{r3, lr}
  hi2c->Instance = I2C1;
 800148e:	4a09      	ldr	r2, [pc, #36]	; (80014b4 <MX_I2C1_Init+0x28>)
 8001490:	6002      	str	r2, [r0, #0]
  hi2c->Init.ClockSpeed = 400000;
 8001492:	4a09      	ldr	r2, [pc, #36]	; (80014b8 <MX_I2C1_Init+0x2c>)
 8001494:	6042      	str	r2, [r0, #4]
  hi2c->Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001496:	2200      	movs	r2, #0
 8001498:	6082      	str	r2, [r0, #8]
  hi2c->Init.OwnAddress1 = 0;
 800149a:	60c2      	str	r2, [r0, #12]
  hi2c->Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800149c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80014a0:	6101      	str	r1, [r0, #16]
  hi2c->Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80014a2:	6142      	str	r2, [r0, #20]
  hi2c->Init.OwnAddress2 = 0;
 80014a4:	6182      	str	r2, [r0, #24]
  hi2c->Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80014a6:	61c2      	str	r2, [r0, #28]
  hi2c->Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80014a8:	6202      	str	r2, [r0, #32]
  if (HAL_I2C_Init(hi2c) != HAL_OK)
 80014aa:	f003 fd79 	bl	8004fa0 <HAL_I2C_Init>
 80014ae:	b100      	cbz	r0, 80014b2 <MX_I2C1_Init+0x26>
    ret = HAL_ERROR;
 80014b0:	2001      	movs	r0, #1
}
 80014b2:	bd08      	pop	{r3, pc}
 80014b4:	40005400 	.word	0x40005400
 80014b8:	00061a80 	.word	0x00061a80

080014bc <BSP_I2C1_Init>:
  hi2c1.Instance  = I2C1;
 80014bc:	4b0e      	ldr	r3, [pc, #56]	; (80014f8 <BSP_I2C1_Init+0x3c>)
 80014be:	4a0f      	ldr	r2, [pc, #60]	; (80014fc <BSP_I2C1_Init+0x40>)
 80014c0:	601a      	str	r2, [r3, #0]
  if(I2C1InitCounter++ == 0)
 80014c2:	4a0f      	ldr	r2, [pc, #60]	; (8001500 <BSP_I2C1_Init+0x44>)
 80014c4:	6813      	ldr	r3, [r2, #0]
 80014c6:	1c59      	adds	r1, r3, #1
 80014c8:	6011      	str	r1, [r2, #0]
 80014ca:	b10b      	cbz	r3, 80014d0 <BSP_I2C1_Init+0x14>
  int32_t ret = BSP_ERROR_NONE;
 80014cc:	2000      	movs	r0, #0
}
 80014ce:	4770      	bx	lr
{
 80014d0:	b510      	push	{r4, lr}
    if (HAL_I2C_GetState(&hi2c1) == HAL_I2C_STATE_RESET)
 80014d2:	4809      	ldr	r0, [pc, #36]	; (80014f8 <BSP_I2C1_Init+0x3c>)
 80014d4:	f004 f880 	bl	80055d8 <HAL_I2C_GetState>
 80014d8:	b108      	cbz	r0, 80014de <BSP_I2C1_Init+0x22>
  int32_t ret = BSP_ERROR_NONE;
 80014da:	2000      	movs	r0, #0
}
 80014dc:	bd10      	pop	{r4, pc}
      I2C1_MspInit(&hi2c1);
 80014de:	4c06      	ldr	r4, [pc, #24]	; (80014f8 <BSP_I2C1_Init+0x3c>)
 80014e0:	4620      	mov	r0, r4
 80014e2:	f7ff ff21 	bl	8001328 <I2C1_MspInit>
        if(MX_I2C1_Init(&hi2c1) != HAL_OK)
 80014e6:	4620      	mov	r0, r4
 80014e8:	f7ff ffd0 	bl	800148c <MX_I2C1_Init>
 80014ec:	b908      	cbnz	r0, 80014f2 <BSP_I2C1_Init+0x36>
          ret = BSP_ERROR_NONE;
 80014ee:	2000      	movs	r0, #0
  return ret;
 80014f0:	e7f4      	b.n	80014dc <BSP_I2C1_Init+0x20>
          ret = BSP_ERROR_BUS_FAILURE;
 80014f2:	f06f 0007 	mvn.w	r0, #7
 80014f6:	e7f1      	b.n	80014dc <BSP_I2C1_Init+0x20>
 80014f8:	20016d10 	.word	0x20016d10
 80014fc:	40005400 	.word	0x40005400
 8001500:	20016d0c 	.word	0x20016d0c

08001504 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001504:	b510      	push	{r4, lr}
 8001506:	4603      	mov	r3, r0
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001508:	4a0c      	ldr	r2, [pc, #48]	; (800153c <_sbrk+0x38>)
 800150a:	490d      	ldr	r1, [pc, #52]	; (8001540 <_sbrk+0x3c>)
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800150c:	480d      	ldr	r0, [pc, #52]	; (8001544 <_sbrk+0x40>)
 800150e:	6800      	ldr	r0, [r0, #0]
 8001510:	b140      	cbz	r0, 8001524 <_sbrk+0x20>
  {
    __sbrk_heap_end = &_end;
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001512:	480c      	ldr	r0, [pc, #48]	; (8001544 <_sbrk+0x40>)
 8001514:	6800      	ldr	r0, [r0, #0]
 8001516:	4403      	add	r3, r0
 8001518:	1a52      	subs	r2, r2, r1
 800151a:	4293      	cmp	r3, r2
 800151c:	d806      	bhi.n	800152c <_sbrk+0x28>
    errno = ENOMEM;
    return (void *)-1;
  }

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;
 800151e:	4a09      	ldr	r2, [pc, #36]	; (8001544 <_sbrk+0x40>)
 8001520:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
}
 8001522:	bd10      	pop	{r4, pc}
    __sbrk_heap_end = &_end;
 8001524:	4807      	ldr	r0, [pc, #28]	; (8001544 <_sbrk+0x40>)
 8001526:	4c08      	ldr	r4, [pc, #32]	; (8001548 <_sbrk+0x44>)
 8001528:	6004      	str	r4, [r0, #0]
 800152a:	e7f2      	b.n	8001512 <_sbrk+0xe>
    errno = ENOMEM;
 800152c:	f007 f88e 	bl	800864c <__errno>
 8001530:	230c      	movs	r3, #12
 8001532:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 8001534:	f04f 30ff 	mov.w	r0, #4294967295
 8001538:	e7f3      	b.n	8001522 <_sbrk+0x1e>
 800153a:	bf00      	nop
 800153c:	20018000 	.word	0x20018000
 8001540:	00000400 	.word	0x00000400
 8001544:	20016d64 	.word	0x20016d64
 8001548:	200170a8 	.word	0x200170a8

0800154c <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800154c:	4a03      	ldr	r2, [pc, #12]	; (800155c <SystemInit+0x10>)
 800154e:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8001552:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001556:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800155a:	4770      	bx	lr
 800155c:	e000ed00 	.word	0xe000ed00

08001560 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001560:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001598 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001564:	480d      	ldr	r0, [pc, #52]	; (800159c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001566:	490e      	ldr	r1, [pc, #56]	; (80015a0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001568:	4a0e      	ldr	r2, [pc, #56]	; (80015a4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800156a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800156c:	e002      	b.n	8001574 <LoopCopyDataInit>

0800156e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800156e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001570:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001572:	3304      	adds	r3, #4

08001574 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001574:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001576:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001578:	d3f9      	bcc.n	800156e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800157a:	4a0b      	ldr	r2, [pc, #44]	; (80015a8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800157c:	4c0b      	ldr	r4, [pc, #44]	; (80015ac <LoopFillZerobss+0x26>)
  movs r3, #0
 800157e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001580:	e001      	b.n	8001586 <LoopFillZerobss>

08001582 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001582:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001584:	3204      	adds	r2, #4

08001586 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001586:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001588:	d3fb      	bcc.n	8001582 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800158a:	f7ff ffdf 	bl	800154c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800158e:	f007 f863 	bl	8008658 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001592:	f7ff fca5 	bl	8000ee0 <main>
  bx  lr    
 8001596:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001598:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 800159c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80015a0:	20000148 	.word	0x20000148
  ldr r2, =_sidata
 80015a4:	0800951c 	.word	0x0800951c
  ldr r2, =_sbss
 80015a8:	20000148 	.word	0x20000148
  ldr r4, =_ebss
 80015ac:	200170a8 	.word	0x200170a8

080015b0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80015b0:	e7fe      	b.n	80015b0 <ADC_IRQHandler>
	...

080015b4 <LIS2DW12_GetCapabilities>:
int32_t LIS2DW12_GetCapabilities(LIS2DW12_Object_t *pObj, LIS2DW12_Capabilities_t *Capabilities)
{
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  Capabilities->Acc          = 1;
 80015b4:	2301      	movs	r3, #1
 80015b6:	700b      	strb	r3, [r1, #0]
  Capabilities->Gyro         = 0;
 80015b8:	2000      	movs	r0, #0
 80015ba:	7048      	strb	r0, [r1, #1]
  Capabilities->Magneto      = 0;
 80015bc:	7088      	strb	r0, [r1, #2]
  Capabilities->LowPower     = 0;
 80015be:	70c8      	strb	r0, [r1, #3]
  Capabilities->GyroMaxFS    = 0;
 80015c0:	6048      	str	r0, [r1, #4]
  Capabilities->AccMaxFS     = 16;
 80015c2:	2310      	movs	r3, #16
 80015c4:	608b      	str	r3, [r1, #8]
  Capabilities->MagMaxFS     = 0;
 80015c6:	60c8      	str	r0, [r1, #12]
  Capabilities->GyroMaxOdr   = 0.0f;
 80015c8:	2300      	movs	r3, #0
 80015ca:	610b      	str	r3, [r1, #16]
  Capabilities->AccMaxOdr    = 1600.0f;
 80015cc:	4a01      	ldr	r2, [pc, #4]	; (80015d4 <LIS2DW12_GetCapabilities+0x20>)
 80015ce:	614a      	str	r2, [r1, #20]
  Capabilities->MagMaxOdr    = 0.0f;
 80015d0:	618b      	str	r3, [r1, #24]
  return LIS2DW12_OK;
}
 80015d2:	4770      	bx	lr
 80015d4:	44c80000 	.word	0x44c80000

080015d8 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled>:
  */
static int32_t LIS2DW12_ACC_SetOutputDataRate_When_Disabled(LIS2DW12_Object_t *pObj, float Odr,
                                                            LIS2DW12_Operating_Mode_t Mode, LIS2DW12_Low_Noise_t Noise)
{
  /* Store the new Odr, Mode and Noise values */
  pObj->acc_operating_mode = Mode;
 80015d8:	f880 1038 	strb.w	r1, [r0, #56]	; 0x38
  pObj->acc_low_noise = Noise;
 80015dc:	f880 2039 	strb.w	r2, [r0, #57]	; 0x39

  pObj->acc_odr = (Odr <=    1.6f) ?    1.6f
                  : (Odr <=   12.5f) ?   12.5f
 80015e0:	eddf 7a26 	vldr	s15, [pc, #152]	; 800167c <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xa4>
 80015e4:	eeb4 0ae7 	vcmpe.f32	s0, s15
 80015e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80015ec:	d933      	bls.n	8001656 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0x7e>
                  : (Odr <=   25.0f) ?   25.0f
 80015ee:	eef2 7a09 	vmov.f32	s15, #41	; 0x41480000  12.5
 80015f2:	eeb4 0ae7 	vcmpe.f32	s0, s15
 80015f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80015fa:	d930      	bls.n	800165e <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0x86>
                  : (Odr <=   50.0f) ?   50.0f
 80015fc:	eef3 7a09 	vmov.f32	s15, #57	; 0x41c80000  25.0
 8001600:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8001604:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001608:	d92b      	bls.n	8001662 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0x8a>
                  : (Odr <=  100.0f) ?  100.0f
 800160a:	eddf 7a1d 	vldr	s15, [pc, #116]	; 8001680 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xa8>
 800160e:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8001612:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001616:	d926      	bls.n	8001666 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0x8e>
                  : (Odr <=  200.0f) ?  200.0f
 8001618:	eddf 7a1a 	vldr	s15, [pc, #104]	; 8001684 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xac>
 800161c:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8001620:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001624:	d921      	bls.n	800166a <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0x92>
                  : (Odr <=  400.0f) ?  400.0f
 8001626:	eddf 7a18 	vldr	s15, [pc, #96]	; 8001688 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xb0>
 800162a:	eeb4 0ae7 	vcmpe.f32	s0, s15
 800162e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001632:	d91c      	bls.n	800166e <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0x96>
                  : (Odr <=  800.0f) ?  800.0f
 8001634:	eddf 7a15 	vldr	s15, [pc, #84]	; 800168c <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xb4>
 8001638:	eeb4 0ae7 	vcmpe.f32	s0, s15
 800163c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001640:	d917      	bls.n	8001672 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0x9a>
                  :                    1600.0f;
 8001642:	eddf 7a13 	vldr	s15, [pc, #76]	; 8001690 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xb8>
 8001646:	eeb4 0ae7 	vcmpe.f32	s0, s15
 800164a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800164e:	d812      	bhi.n	8001676 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0x9e>
 8001650:	ee17 3a90 	vmov	r3, s15
 8001654:	e000      	b.n	8001658 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0x80>
                  : (Odr <=   12.5f) ?   12.5f
 8001656:	4b0f      	ldr	r3, [pc, #60]	; (8001694 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xbc>)
  pObj->acc_odr = (Odr <=    1.6f) ?    1.6f
 8001658:	6343      	str	r3, [r0, #52]	; 0x34

  return LIS2DW12_OK;
}
 800165a:	2000      	movs	r0, #0
 800165c:	4770      	bx	lr
                  : (Odr <=   25.0f) ?   25.0f
 800165e:	4b0e      	ldr	r3, [pc, #56]	; (8001698 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xc0>)
 8001660:	e7fa      	b.n	8001658 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0x80>
                  : (Odr <=   50.0f) ?   50.0f
 8001662:	4b0e      	ldr	r3, [pc, #56]	; (800169c <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xc4>)
 8001664:	e7f8      	b.n	8001658 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0x80>
                  : (Odr <=  100.0f) ?  100.0f
 8001666:	4b0e      	ldr	r3, [pc, #56]	; (80016a0 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xc8>)
 8001668:	e7f6      	b.n	8001658 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0x80>
                  : (Odr <=  200.0f) ?  200.0f
 800166a:	4b0e      	ldr	r3, [pc, #56]	; (80016a4 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xcc>)
 800166c:	e7f4      	b.n	8001658 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0x80>
                  : (Odr <=  400.0f) ?  400.0f
 800166e:	4b0e      	ldr	r3, [pc, #56]	; (80016a8 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xd0>)
 8001670:	e7f2      	b.n	8001658 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0x80>
                  : (Odr <=  800.0f) ?  800.0f
 8001672:	4b0e      	ldr	r3, [pc, #56]	; (80016ac <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xd4>)
 8001674:	e7f0      	b.n	8001658 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0x80>
                  :                    1600.0f;
 8001676:	4b0e      	ldr	r3, [pc, #56]	; (80016b0 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xd8>)
 8001678:	e7ee      	b.n	8001658 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0x80>
 800167a:	bf00      	nop
 800167c:	3fcccccd 	.word	0x3fcccccd
 8001680:	42480000 	.word	0x42480000
 8001684:	42c80000 	.word	0x42c80000
 8001688:	43480000 	.word	0x43480000
 800168c:	43c80000 	.word	0x43c80000
 8001690:	44480000 	.word	0x44480000
 8001694:	3fcccccd 	.word	0x3fcccccd
 8001698:	41480000 	.word	0x41480000
 800169c:	41c80000 	.word	0x41c80000
 80016a0:	42480000 	.word	0x42480000
 80016a4:	42c80000 	.word	0x42c80000
 80016a8:	43480000 	.word	0x43480000
 80016ac:	43c80000 	.word	0x43c80000
 80016b0:	44c80000 	.word	0x44c80000

080016b4 <ReadRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t ReadRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 80016b4:	b510      	push	{r4, lr}
  LIS2DW12_Object_t *pObj = (LIS2DW12_Object_t *)Handle;

  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 80016b6:	6944      	ldr	r4, [r0, #20]
 80016b8:	7b00      	ldrb	r0, [r0, #12]
 80016ba:	47a0      	blx	r4
}
 80016bc:	bd10      	pop	{r4, pc}

080016be <WriteRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t WriteRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 80016be:	b510      	push	{r4, lr}
  LIS2DW12_Object_t *pObj = (LIS2DW12_Object_t *)Handle;

  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 80016c0:	6904      	ldr	r4, [r0, #16]
 80016c2:	7b00      	ldrb	r0, [r0, #12]
 80016c4:	47a0      	blx	r4
}
 80016c6:	bd10      	pop	{r4, pc}

080016c8 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled>:
{
 80016c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80016cc:	ed2d 8b02 	vpush	{d8}
 80016d0:	4604      	mov	r4, r0
 80016d2:	eeb0 8a40 	vmov.f32	s16, s0
 80016d6:	460d      	mov	r5, r1
 80016d8:	4616      	mov	r6, r2
  switch (Mode)
 80016da:	1e4b      	subs	r3, r1, #1
 80016dc:	2b03      	cmp	r3, #3
 80016de:	d803      	bhi.n	80016e8 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x20>
 80016e0:	e8df f003 	tbb	[pc, r3]
 80016e4:	7c6b5b13 	.word	0x7c6b5b13
      switch (Noise)
 80016e8:	2e01      	cmp	r6, #1
 80016ea:	d00b      	beq.n	8001704 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x3c>
          new_power_mode = LIS2DW12_HIGH_PERFORMANCE;
 80016ec:	f04f 0804 	mov.w	r8, #4
      if (Odr < 12.5f)
 80016f0:	eef2 7a09 	vmov.f32	s15, #41	; 0x41480000  12.5
 80016f4:	eeb4 8ae7 	vcmpe.f32	s16, s15
 80016f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80016fc:	d510      	bpl.n	8001720 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x58>
        Odr = 12.5f;
 80016fe:	eeb2 8a09 	vmov.f32	s16, #41	; 0x41480000  12.5
 8001702:	e00d      	b.n	8001720 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x58>
          new_power_mode = LIS2DW12_HIGH_PERFORMANCE_LOW_NOISE;
 8001704:	f04f 0814 	mov.w	r8, #20
 8001708:	e7f2      	b.n	80016f0 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x28>
      switch (Noise)
 800170a:	2e01      	cmp	r6, #1
 800170c:	d042      	beq.n	8001794 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0xcc>
          new_power_mode = LIS2DW12_CONT_LOW_PWR_4;
 800170e:	f04f 0803 	mov.w	r8, #3
      if (Odr > 200.0f)
 8001712:	eddf 7a51 	vldr	s15, [pc, #324]	; 8001858 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x190>
 8001716:	eeb4 8ae7 	vcmpe.f32	s16, s15
 800171a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800171e:	dc6e      	bgt.n	80017fe <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x136>
            : (Odr <=   12.5f) ? LIS2DW12_XL_ODR_12Hz5
 8001720:	eddf 7a4e 	vldr	s15, [pc, #312]	; 800185c <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x194>
 8001724:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8001728:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800172c:	d96a      	bls.n	8001804 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x13c>
 800172e:	eef2 7a09 	vmov.f32	s15, #41	; 0x41480000  12.5
 8001732:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8001736:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800173a:	d979      	bls.n	8001830 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x168>
 800173c:	eef3 7a09 	vmov.f32	s15, #57	; 0x41c80000  25.0
 8001740:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8001744:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001748:	d974      	bls.n	8001834 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x16c>
 800174a:	eddf 7a45 	vldr	s15, [pc, #276]	; 8001860 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x198>
 800174e:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8001752:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001756:	d96f      	bls.n	8001838 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x170>
 8001758:	eddf 7a42 	vldr	s15, [pc, #264]	; 8001864 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x19c>
 800175c:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8001760:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001764:	d96a      	bls.n	800183c <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x174>
 8001766:	eddf 7a3c 	vldr	s15, [pc, #240]	; 8001858 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x190>
 800176a:	eeb4 8ae7 	vcmpe.f32	s16, s15
 800176e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001772:	d965      	bls.n	8001840 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x178>
 8001774:	eddf 7a3c 	vldr	s15, [pc, #240]	; 8001868 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x1a0>
 8001778:	eeb4 8ae7 	vcmpe.f32	s16, s15
 800177c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001780:	d960      	bls.n	8001844 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x17c>
 8001782:	eddf 7a3a 	vldr	s15, [pc, #232]	; 800186c <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x1a4>
 8001786:	eeb4 8ae7 	vcmpe.f32	s16, s15
 800178a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800178e:	d85b      	bhi.n	8001848 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x180>
 8001790:	2108      	movs	r1, #8
 8001792:	e038      	b.n	8001806 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x13e>
          new_power_mode = LIS2DW12_CONT_LOW_PWR_LOW_NOISE_4;
 8001794:	f04f 0813 	mov.w	r8, #19
 8001798:	e7bb      	b.n	8001712 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x4a>
      switch (Noise)
 800179a:	2e01      	cmp	r6, #1
 800179c:	d00a      	beq.n	80017b4 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0xec>
          new_power_mode = LIS2DW12_CONT_LOW_PWR_3;
 800179e:	4688      	mov	r8, r1
      if (Odr > 200.0f)
 80017a0:	eddf 7a2d 	vldr	s15, [pc, #180]	; 8001858 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x190>
 80017a4:	eeb4 8ae7 	vcmpe.f32	s16, s15
 80017a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80017ac:	ddb8      	ble.n	8001720 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x58>
        Odr = 200.0f;
 80017ae:	ed9f 8a2a 	vldr	s16, [pc, #168]	; 8001858 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x190>
 80017b2:	e7b5      	b.n	8001720 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x58>
          new_power_mode = LIS2DW12_CONT_LOW_PWR_LOW_NOISE_3;
 80017b4:	f04f 0812 	mov.w	r8, #18
 80017b8:	e7f2      	b.n	80017a0 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0xd8>
      switch (Noise)
 80017ba:	2e01      	cmp	r6, #1
 80017bc:	d00b      	beq.n	80017d6 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x10e>
          new_power_mode = LIS2DW12_CONT_LOW_PWR_2;
 80017be:	f04f 0801 	mov.w	r8, #1
      if (Odr > 200.0f)
 80017c2:	eddf 7a25 	vldr	s15, [pc, #148]	; 8001858 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x190>
 80017c6:	eeb4 8ae7 	vcmpe.f32	s16, s15
 80017ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80017ce:	dda7      	ble.n	8001720 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x58>
        Odr = 200.0f;
 80017d0:	ed9f 8a21 	vldr	s16, [pc, #132]	; 8001858 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x190>
 80017d4:	e7a4      	b.n	8001720 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x58>
          new_power_mode = LIS2DW12_CONT_LOW_PWR_LOW_NOISE_2;
 80017d6:	f04f 0811 	mov.w	r8, #17
 80017da:	e7f2      	b.n	80017c2 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0xfa>
      switch (Noise)
 80017dc:	2e01      	cmp	r6, #1
 80017de:	d00b      	beq.n	80017f8 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x130>
          new_power_mode = LIS2DW12_CONT_LOW_PWR_12bit;
 80017e0:	f04f 0800 	mov.w	r8, #0
      if (Odr > 200.0f)
 80017e4:	eddf 7a1c 	vldr	s15, [pc, #112]	; 8001858 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x190>
 80017e8:	eeb4 8ae7 	vcmpe.f32	s16, s15
 80017ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80017f0:	dd96      	ble.n	8001720 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x58>
        Odr = 200.0f;
 80017f2:	ed9f 8a19 	vldr	s16, [pc, #100]	; 8001858 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x190>
 80017f6:	e793      	b.n	8001720 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x58>
          new_power_mode = LIS2DW12_CONT_LOW_PWR_LOW_NOISE_12bit;
 80017f8:	f04f 0810 	mov.w	r8, #16
 80017fc:	e7f2      	b.n	80017e4 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x11c>
        Odr = 200.0f;
 80017fe:	ed9f 8a16 	vldr	s16, [pc, #88]	; 8001858 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x190>
 8001802:	e78d      	b.n	8001720 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x58>
            : (Odr <=   12.5f) ? LIS2DW12_XL_ODR_12Hz5
 8001804:	2101      	movs	r1, #1
  if (lis2dw12_data_rate_set(&(pObj->Ctx), new_odr) != LIS2DW12_OK)
 8001806:	f104 0720 	add.w	r7, r4, #32
 800180a:	4638      	mov	r0, r7
 800180c:	f000 fbf2 	bl	8001ff4 <lis2dw12_data_rate_set>
 8001810:	b9e0      	cbnz	r0, 800184c <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x184>
  if (lis2dw12_power_mode_set(&(pObj->Ctx), new_power_mode) != LIS2DW12_OK)
 8001812:	4641      	mov	r1, r8
 8001814:	4638      	mov	r0, r7
 8001816:	f000 fb4b 	bl	8001eb0 <lis2dw12_power_mode_set>
 800181a:	b9d0      	cbnz	r0, 8001852 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x18a>
  pObj->acc_odr = Odr;
 800181c:	ed84 8a0d 	vstr	s16, [r4, #52]	; 0x34
  pObj->acc_operating_mode = Mode;
 8001820:	f884 5038 	strb.w	r5, [r4, #56]	; 0x38
  pObj->acc_low_noise = Noise;
 8001824:	f884 6039 	strb.w	r6, [r4, #57]	; 0x39
}
 8001828:	ecbd 8b02 	vpop	{d8}
 800182c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            : (Odr <=   12.5f) ? LIS2DW12_XL_ODR_12Hz5
 8001830:	2102      	movs	r1, #2
 8001832:	e7e8      	b.n	8001806 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x13e>
 8001834:	2103      	movs	r1, #3
 8001836:	e7e6      	b.n	8001806 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x13e>
 8001838:	2104      	movs	r1, #4
 800183a:	e7e4      	b.n	8001806 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x13e>
 800183c:	2105      	movs	r1, #5
 800183e:	e7e2      	b.n	8001806 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x13e>
 8001840:	2106      	movs	r1, #6
 8001842:	e7e0      	b.n	8001806 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x13e>
 8001844:	2107      	movs	r1, #7
 8001846:	e7de      	b.n	8001806 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x13e>
 8001848:	2109      	movs	r1, #9
 800184a:	e7dc      	b.n	8001806 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x13e>
    return LIS2DW12_ERROR;
 800184c:	f04f 30ff 	mov.w	r0, #4294967295
 8001850:	e7ea      	b.n	8001828 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x160>
    return LIS2DW12_ERROR;
 8001852:	f04f 30ff 	mov.w	r0, #4294967295
 8001856:	e7e7      	b.n	8001828 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x160>
 8001858:	43480000 	.word	0x43480000
 800185c:	3fcccccd 	.word	0x3fcccccd
 8001860:	42480000 	.word	0x42480000
 8001864:	42c80000 	.word	0x42c80000
 8001868:	43c80000 	.word	0x43c80000
 800186c:	44480000 	.word	0x44480000

08001870 <LIS2DW12_ACC_Enable>:
  if (pObj->acc_is_enabled == 1U)
 8001870:	f890 3031 	ldrb.w	r3, [r0, #49]	; 0x31
 8001874:	2b01      	cmp	r3, #1
 8001876:	d00e      	beq.n	8001896 <LIS2DW12_ACC_Enable+0x26>
{
 8001878:	b510      	push	{r4, lr}
 800187a:	4604      	mov	r4, r0
  if (LIS2DW12_ACC_SetOutputDataRate_When_Enabled(pObj, pObj->acc_odr, pObj->acc_operating_mode,
 800187c:	f890 2039 	ldrb.w	r2, [r0, #57]	; 0x39
 8001880:	f890 1038 	ldrb.w	r1, [r0, #56]	; 0x38
 8001884:	ed90 0a0d 	vldr	s0, [r0, #52]	; 0x34
 8001888:	f7ff ff1e 	bl	80016c8 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled>
 800188c:	b928      	cbnz	r0, 800189a <LIS2DW12_ACC_Enable+0x2a>
  pObj->acc_is_enabled = 1;
 800188e:	2301      	movs	r3, #1
 8001890:	f884 3031 	strb.w	r3, [r4, #49]	; 0x31
}
 8001894:	bd10      	pop	{r4, pc}
    return LIS2DW12_OK;
 8001896:	2000      	movs	r0, #0
}
 8001898:	4770      	bx	lr
    return LIS2DW12_ERROR;
 800189a:	f04f 30ff 	mov.w	r0, #4294967295
 800189e:	e7f9      	b.n	8001894 <LIS2DW12_ACC_Enable+0x24>

080018a0 <LIS2DW12_ACC_Disable>:
  if (pObj->acc_is_enabled == 0U)
 80018a0:	f890 3031 	ldrb.w	r3, [r0, #49]	; 0x31
 80018a4:	b90b      	cbnz	r3, 80018aa <LIS2DW12_ACC_Disable+0xa>
    return LIS2DW12_OK;
 80018a6:	2000      	movs	r0, #0
}
 80018a8:	4770      	bx	lr
{
 80018aa:	b510      	push	{r4, lr}
 80018ac:	4604      	mov	r4, r0
  if (lis2dw12_data_rate_set(&(pObj->Ctx), LIS2DW12_XL_ODR_OFF) != LIS2DW12_OK)
 80018ae:	2100      	movs	r1, #0
 80018b0:	3020      	adds	r0, #32
 80018b2:	f000 fb9f 	bl	8001ff4 <lis2dw12_data_rate_set>
 80018b6:	b910      	cbnz	r0, 80018be <LIS2DW12_ACC_Disable+0x1e>
  pObj->acc_is_enabled = 0;
 80018b8:	f884 0031 	strb.w	r0, [r4, #49]	; 0x31
}
 80018bc:	bd10      	pop	{r4, pc}
    return LIS2DW12_ERROR;
 80018be:	f04f 30ff 	mov.w	r0, #4294967295
 80018c2:	e7fb      	b.n	80018bc <LIS2DW12_ACC_Disable+0x1c>

080018c4 <LIS2DW12_DeInit>:
{
 80018c4:	b510      	push	{r4, lr}
 80018c6:	4604      	mov	r4, r0
  if (LIS2DW12_ACC_Disable(pObj) != LIS2DW12_OK)
 80018c8:	f7ff ffea 	bl	80018a0 <LIS2DW12_ACC_Disable>
 80018cc:	b948      	cbnz	r0, 80018e2 <LIS2DW12_DeInit+0x1e>
  pObj->acc_odr = 0.0f;
 80018ce:	2300      	movs	r3, #0
 80018d0:	6363      	str	r3, [r4, #52]	; 0x34
  pObj->acc_operating_mode = LIS2DW12_HIGH_PERFORMANCE_MODE;
 80018d2:	2300      	movs	r3, #0
 80018d4:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
  pObj->acc_low_noise = LIS2DW12_LOW_NOISE_DISABLE;
 80018d8:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  pObj->is_initialized = 0;
 80018dc:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
}
 80018e0:	bd10      	pop	{r4, pc}
    return LIS2DW12_ERROR;
 80018e2:	f04f 30ff 	mov.w	r0, #4294967295
 80018e6:	e7fb      	b.n	80018e0 <LIS2DW12_DeInit+0x1c>

080018e8 <LIS2DW12_Init>:
{
 80018e8:	b538      	push	{r3, r4, r5, lr}
 80018ea:	4604      	mov	r4, r0
  if (lis2dw12_auto_increment_set(&(pObj->Ctx), PROPERTY_ENABLE) != LIS2DW12_OK)
 80018ec:	f100 0520 	add.w	r5, r0, #32
 80018f0:	2101      	movs	r1, #1
 80018f2:	4628      	mov	r0, r5
 80018f4:	f000 fc8c 	bl	8002210 <lis2dw12_auto_increment_set>
 80018f8:	bb10      	cbnz	r0, 8001940 <LIS2DW12_Init+0x58>
  if (lis2dw12_block_data_update_set(&(pObj->Ctx), PROPERTY_ENABLE) != LIS2DW12_OK)
 80018fa:	2101      	movs	r1, #1
 80018fc:	4628      	mov	r0, r5
 80018fe:	f000 fc0a 	bl	8002116 <lis2dw12_block_data_update_set>
 8001902:	bb00      	cbnz	r0, 8001946 <LIS2DW12_Init+0x5e>
  if (lis2dw12_fifo_mode_set(&(pObj->Ctx), LIS2DW12_BYPASS_MODE) != LIS2DW12_OK)
 8001904:	2100      	movs	r1, #0
 8001906:	4628      	mov	r0, r5
 8001908:	f000 fc9b 	bl	8002242 <lis2dw12_fifo_mode_set>
 800190c:	b9f0      	cbnz	r0, 800194c <LIS2DW12_Init+0x64>
  if (lis2dw12_power_mode_set(&(pObj->Ctx), LIS2DW12_HIGH_PERFORMANCE) != LIS2DW12_OK)
 800190e:	2104      	movs	r1, #4
 8001910:	4628      	mov	r0, r5
 8001912:	f000 facd 	bl	8001eb0 <lis2dw12_power_mode_set>
 8001916:	b9e0      	cbnz	r0, 8001952 <LIS2DW12_Init+0x6a>
  pObj->acc_odr = 100.0f;
 8001918:	4b12      	ldr	r3, [pc, #72]	; (8001964 <LIS2DW12_Init+0x7c>)
 800191a:	6363      	str	r3, [r4, #52]	; 0x34
  pObj->acc_operating_mode = LIS2DW12_HIGH_PERFORMANCE_MODE;
 800191c:	2100      	movs	r1, #0
 800191e:	f884 1038 	strb.w	r1, [r4, #56]	; 0x38
  pObj->acc_low_noise = LIS2DW12_LOW_NOISE_DISABLE;
 8001922:	f884 1039 	strb.w	r1, [r4, #57]	; 0x39
  if (lis2dw12_data_rate_set(&(pObj->Ctx), LIS2DW12_XL_ODR_OFF) != LIS2DW12_OK)
 8001926:	4628      	mov	r0, r5
 8001928:	f000 fb64 	bl	8001ff4 <lis2dw12_data_rate_set>
 800192c:	b9a0      	cbnz	r0, 8001958 <LIS2DW12_Init+0x70>
  if (lis2dw12_full_scale_set(&(pObj->Ctx), LIS2DW12_2g) != LIS2DW12_OK)
 800192e:	2100      	movs	r1, #0
 8001930:	4628      	mov	r0, r5
 8001932:	f000 fc09 	bl	8002148 <lis2dw12_full_scale_set>
 8001936:	b990      	cbnz	r0, 800195e <LIS2DW12_Init+0x76>
  pObj->is_initialized = 1;
 8001938:	2301      	movs	r3, #1
 800193a:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
}
 800193e:	bd38      	pop	{r3, r4, r5, pc}
    return LIS2DW12_ERROR;
 8001940:	f04f 30ff 	mov.w	r0, #4294967295
 8001944:	e7fb      	b.n	800193e <LIS2DW12_Init+0x56>
    return LIS2DW12_ERROR;
 8001946:	f04f 30ff 	mov.w	r0, #4294967295
 800194a:	e7f8      	b.n	800193e <LIS2DW12_Init+0x56>
    return LIS2DW12_ERROR;
 800194c:	f04f 30ff 	mov.w	r0, #4294967295
 8001950:	e7f5      	b.n	800193e <LIS2DW12_Init+0x56>
    return LIS2DW12_ERROR;
 8001952:	f04f 30ff 	mov.w	r0, #4294967295
 8001956:	e7f2      	b.n	800193e <LIS2DW12_Init+0x56>
    return LIS2DW12_ERROR;
 8001958:	f04f 30ff 	mov.w	r0, #4294967295
 800195c:	e7ef      	b.n	800193e <LIS2DW12_Init+0x56>
    return LIS2DW12_ERROR;
 800195e:	f04f 30ff 	mov.w	r0, #4294967295
 8001962:	e7ec      	b.n	800193e <LIS2DW12_Init+0x56>
 8001964:	42c80000 	.word	0x42c80000

08001968 <LIS2DW12_ACC_SetFullScale>:
{
 8001968:	b508      	push	{r3, lr}
           : (FullScale <= 4) ? LIS2DW12_4g
 800196a:	2902      	cmp	r1, #2
 800196c:	dd05      	ble.n	800197a <LIS2DW12_ACC_SetFullScale+0x12>
 800196e:	2904      	cmp	r1, #4
 8001970:	dd09      	ble.n	8001986 <LIS2DW12_ACC_SetFullScale+0x1e>
 8001972:	2908      	cmp	r1, #8
 8001974:	dc09      	bgt.n	800198a <LIS2DW12_ACC_SetFullScale+0x22>
 8001976:	2102      	movs	r1, #2
 8001978:	e000      	b.n	800197c <LIS2DW12_ACC_SetFullScale+0x14>
 800197a:	2100      	movs	r1, #0
  if (lis2dw12_full_scale_set(&(pObj->Ctx), new_fs) != LIS2DW12_OK)
 800197c:	3020      	adds	r0, #32
 800197e:	f000 fbe3 	bl	8002148 <lis2dw12_full_scale_set>
 8001982:	b920      	cbnz	r0, 800198e <LIS2DW12_ACC_SetFullScale+0x26>
}
 8001984:	bd08      	pop	{r3, pc}
           : (FullScale <= 4) ? LIS2DW12_4g
 8001986:	2101      	movs	r1, #1
 8001988:	e7f8      	b.n	800197c <LIS2DW12_ACC_SetFullScale+0x14>
 800198a:	2103      	movs	r1, #3
 800198c:	e7f6      	b.n	800197c <LIS2DW12_ACC_SetFullScale+0x14>
    return LIS2DW12_ERROR;
 800198e:	f04f 30ff 	mov.w	r0, #4294967295
 8001992:	e7f7      	b.n	8001984 <LIS2DW12_ACC_SetFullScale+0x1c>

08001994 <LIS2DW12_ReadID>:
{
 8001994:	b508      	push	{r3, lr}
  if (lis2dw12_device_id_get(&(pObj->Ctx), Id) != LIS2DW12_OK)
 8001996:	3020      	adds	r0, #32
 8001998:	f000 fc33 	bl	8002202 <lis2dw12_device_id_get>
 800199c:	b900      	cbnz	r0, 80019a0 <LIS2DW12_ReadID+0xc>
}
 800199e:	bd08      	pop	{r3, pc}
    return LIS2DW12_ERROR;
 80019a0:	f04f 30ff 	mov.w	r0, #4294967295
 80019a4:	e7fb      	b.n	800199e <LIS2DW12_ReadID+0xa>

080019a6 <LIS2DW12_ACC_GetFullScale>:
{
 80019a6:	b510      	push	{r4, lr}
 80019a8:	b082      	sub	sp, #8
 80019aa:	460c      	mov	r4, r1
  if (lis2dw12_full_scale_get(&(pObj->Ctx), &fs_low_level) != LIS2DW12_OK)
 80019ac:	f10d 0107 	add.w	r1, sp, #7
 80019b0:	3020      	adds	r0, #32
 80019b2:	f000 fbe2 	bl	800217a <lis2dw12_full_scale_get>
 80019b6:	b9c0      	cbnz	r0, 80019ea <LIS2DW12_ACC_GetFullScale+0x44>
  switch (fs_low_level)
 80019b8:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80019bc:	2b03      	cmp	r3, #3
 80019be:	d810      	bhi.n	80019e2 <LIS2DW12_ACC_GetFullScale+0x3c>
 80019c0:	e8df f003 	tbb	[pc, r3]
 80019c4:	0c090602 	.word	0x0c090602
      *FullScale =  2;
 80019c8:	2302      	movs	r3, #2
 80019ca:	6023      	str	r3, [r4, #0]
}
 80019cc:	b002      	add	sp, #8
 80019ce:	bd10      	pop	{r4, pc}
      *FullScale =  4;
 80019d0:	2304      	movs	r3, #4
 80019d2:	6023      	str	r3, [r4, #0]
      break;
 80019d4:	e7fa      	b.n	80019cc <LIS2DW12_ACC_GetFullScale+0x26>
      *FullScale =  8;
 80019d6:	2308      	movs	r3, #8
 80019d8:	6023      	str	r3, [r4, #0]
      break;
 80019da:	e7f7      	b.n	80019cc <LIS2DW12_ACC_GetFullScale+0x26>
      *FullScale = 16;
 80019dc:	2310      	movs	r3, #16
 80019de:	6023      	str	r3, [r4, #0]
      break;
 80019e0:	e7f4      	b.n	80019cc <LIS2DW12_ACC_GetFullScale+0x26>
      *FullScale = -1;
 80019e2:	f04f 30ff 	mov.w	r0, #4294967295
 80019e6:	6020      	str	r0, [r4, #0]
      break;
 80019e8:	e7f0      	b.n	80019cc <LIS2DW12_ACC_GetFullScale+0x26>
    return LIS2DW12_ERROR;
 80019ea:	f04f 30ff 	mov.w	r0, #4294967295
 80019ee:	e7ed      	b.n	80019cc <LIS2DW12_ACC_GetFullScale+0x26>

080019f0 <LIS2DW12_ACC_GetSensitivity>:
{
 80019f0:	b530      	push	{r4, r5, lr}
 80019f2:	b083      	sub	sp, #12
 80019f4:	460d      	mov	r5, r1
  if (lis2dw12_full_scale_get(&(pObj->Ctx), &full_scale) != LIS2DW12_OK)
 80019f6:	f100 0420 	add.w	r4, r0, #32
 80019fa:	f10d 0107 	add.w	r1, sp, #7
 80019fe:	4620      	mov	r0, r4
 8001a00:	f000 fbbb 	bl	800217a <lis2dw12_full_scale_get>
 8001a04:	2800      	cmp	r0, #0
 8001a06:	d152      	bne.n	8001aae <LIS2DW12_ACC_GetSensitivity+0xbe>
  if (lis2dw12_power_mode_get(&(pObj->Ctx), &mode) != LIS2DW12_OK)
 8001a08:	f10d 0106 	add.w	r1, sp, #6
 8001a0c:	4620      	mov	r0, r4
 8001a0e:	f000 fa87 	bl	8001f20 <lis2dw12_power_mode_get>
 8001a12:	2800      	cmp	r0, #0
 8001a14:	d14e      	bne.n	8001ab4 <LIS2DW12_ACC_GetSensitivity+0xc4>
  switch (mode)
 8001a16:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8001a1a:	2b1b      	cmp	r3, #27
 8001a1c:	d841      	bhi.n	8001aa2 <LIS2DW12_ACC_GetSensitivity+0xb2>
 8001a1e:	e8df f003 	tbb	[pc, r3]
 8001a22:	270e      	.short	0x270e
 8001a24:	40272727 	.word	0x40272727
 8001a28:	270e4040 	.word	0x270e4040
 8001a2c:	40402727 	.word	0x40402727
 8001a30:	270e4040 	.word	0x270e4040
 8001a34:	40272727 	.word	0x40272727
 8001a38:	270e4040 	.word	0x270e4040
 8001a3c:	2727      	.short	0x2727
      switch (full_scale)
 8001a3e:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8001a42:	2b03      	cmp	r3, #3
 8001a44:	d80f      	bhi.n	8001a66 <LIS2DW12_ACC_GetSensitivity+0x76>
 8001a46:	e8df f003 	tbb	[pc, r3]
 8001a4a:	0502      	.short	0x0502
 8001a4c:	0b08      	.short	0x0b08
          *Sensitivity = LIS2DW12_ACC_SENSITIVITY_FOR_FS_2G_LOPOW1_MODE;
 8001a4e:	4b1b      	ldr	r3, [pc, #108]	; (8001abc <LIS2DW12_ACC_GetSensitivity+0xcc>)
 8001a50:	602b      	str	r3, [r5, #0]
          break;
 8001a52:	e02a      	b.n	8001aaa <LIS2DW12_ACC_GetSensitivity+0xba>
          *Sensitivity = LIS2DW12_ACC_SENSITIVITY_FOR_FS_4G_LOPOW1_MODE;
 8001a54:	4b1a      	ldr	r3, [pc, #104]	; (8001ac0 <LIS2DW12_ACC_GetSensitivity+0xd0>)
 8001a56:	602b      	str	r3, [r5, #0]
          break;
 8001a58:	e027      	b.n	8001aaa <LIS2DW12_ACC_GetSensitivity+0xba>
          *Sensitivity = LIS2DW12_ACC_SENSITIVITY_FOR_FS_8G_LOPOW1_MODE;
 8001a5a:	4b1a      	ldr	r3, [pc, #104]	; (8001ac4 <LIS2DW12_ACC_GetSensitivity+0xd4>)
 8001a5c:	602b      	str	r3, [r5, #0]
          break;
 8001a5e:	e024      	b.n	8001aaa <LIS2DW12_ACC_GetSensitivity+0xba>
          *Sensitivity = LIS2DW12_ACC_SENSITIVITY_FOR_FS_16G_LOPOW1_MODE;
 8001a60:	4b19      	ldr	r3, [pc, #100]	; (8001ac8 <LIS2DW12_ACC_GetSensitivity+0xd8>)
 8001a62:	602b      	str	r3, [r5, #0]
          break;
 8001a64:	e021      	b.n	8001aaa <LIS2DW12_ACC_GetSensitivity+0xba>
          *Sensitivity = -1.0f;
 8001a66:	4b19      	ldr	r3, [pc, #100]	; (8001acc <LIS2DW12_ACC_GetSensitivity+0xdc>)
 8001a68:	602b      	str	r3, [r5, #0]
          ret = LIS2DW12_ERROR;
 8001a6a:	f04f 30ff 	mov.w	r0, #4294967295
          break;
 8001a6e:	e01c      	b.n	8001aaa <LIS2DW12_ACC_GetSensitivity+0xba>
      switch (full_scale)
 8001a70:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8001a74:	2b03      	cmp	r3, #3
 8001a76:	d80f      	bhi.n	8001a98 <LIS2DW12_ACC_GetSensitivity+0xa8>
 8001a78:	e8df f003 	tbb	[pc, r3]
 8001a7c:	0b080502 	.word	0x0b080502
          *Sensitivity = LIS2DW12_ACC_SENSITIVITY_FOR_FS_2G_OTHER_MODES;
 8001a80:	4b13      	ldr	r3, [pc, #76]	; (8001ad0 <LIS2DW12_ACC_GetSensitivity+0xe0>)
 8001a82:	602b      	str	r3, [r5, #0]
          break;
 8001a84:	e011      	b.n	8001aaa <LIS2DW12_ACC_GetSensitivity+0xba>
          *Sensitivity = LIS2DW12_ACC_SENSITIVITY_FOR_FS_4G_OTHER_MODES;
 8001a86:	4b13      	ldr	r3, [pc, #76]	; (8001ad4 <LIS2DW12_ACC_GetSensitivity+0xe4>)
 8001a88:	602b      	str	r3, [r5, #0]
          break;
 8001a8a:	e00e      	b.n	8001aaa <LIS2DW12_ACC_GetSensitivity+0xba>
          *Sensitivity = LIS2DW12_ACC_SENSITIVITY_FOR_FS_8G_OTHER_MODES;
 8001a8c:	4b0b      	ldr	r3, [pc, #44]	; (8001abc <LIS2DW12_ACC_GetSensitivity+0xcc>)
 8001a8e:	602b      	str	r3, [r5, #0]
          break;
 8001a90:	e00b      	b.n	8001aaa <LIS2DW12_ACC_GetSensitivity+0xba>
          *Sensitivity = LIS2DW12_ACC_SENSITIVITY_FOR_FS_16G_OTHER_MODES;
 8001a92:	4b0b      	ldr	r3, [pc, #44]	; (8001ac0 <LIS2DW12_ACC_GetSensitivity+0xd0>)
 8001a94:	602b      	str	r3, [r5, #0]
          break;
 8001a96:	e008      	b.n	8001aaa <LIS2DW12_ACC_GetSensitivity+0xba>
          *Sensitivity = -1.0f;
 8001a98:	4b0c      	ldr	r3, [pc, #48]	; (8001acc <LIS2DW12_ACC_GetSensitivity+0xdc>)
 8001a9a:	602b      	str	r3, [r5, #0]
          ret = LIS2DW12_ERROR;
 8001a9c:	f04f 30ff 	mov.w	r0, #4294967295
          break;
 8001aa0:	e003      	b.n	8001aaa <LIS2DW12_ACC_GetSensitivity+0xba>
      *Sensitivity = -1.0f;
 8001aa2:	4b0a      	ldr	r3, [pc, #40]	; (8001acc <LIS2DW12_ACC_GetSensitivity+0xdc>)
 8001aa4:	602b      	str	r3, [r5, #0]
      ret = LIS2DW12_ERROR;
 8001aa6:	f04f 30ff 	mov.w	r0, #4294967295
}
 8001aaa:	b003      	add	sp, #12
 8001aac:	bd30      	pop	{r4, r5, pc}
    return LIS2DW12_ERROR;
 8001aae:	f04f 30ff 	mov.w	r0, #4294967295
 8001ab2:	e7fa      	b.n	8001aaa <LIS2DW12_ACC_GetSensitivity+0xba>
    return LIS2DW12_ERROR;
 8001ab4:	f04f 30ff 	mov.w	r0, #4294967295
 8001ab8:	e7f7      	b.n	8001aaa <LIS2DW12_ACC_GetSensitivity+0xba>
 8001aba:	bf00      	nop
 8001abc:	3f79db23 	.word	0x3f79db23
 8001ac0:	3ff9db23 	.word	0x3ff9db23
 8001ac4:	4079db23 	.word	0x4079db23
 8001ac8:	40f9db23 	.word	0x40f9db23
 8001acc:	bf800000 	.word	0xbf800000
 8001ad0:	3e79db23 	.word	0x3e79db23
 8001ad4:	3ef9db23 	.word	0x3ef9db23

08001ad8 <LIS2DW12_ACC_GetOutputDataRate>:
{
 8001ad8:	b530      	push	{r4, r5, lr}
 8001ada:	b083      	sub	sp, #12
 8001adc:	460d      	mov	r5, r1
  if (lis2dw12_data_rate_get(&(pObj->Ctx), &odr_low_level) != LIS2DW12_OK)
 8001ade:	f100 0420 	add.w	r4, r0, #32
 8001ae2:	f10d 0107 	add.w	r1, sp, #7
 8001ae6:	4620      	mov	r0, r4
 8001ae8:	f000 fab5 	bl	8002056 <lis2dw12_data_rate_get>
 8001aec:	2800      	cmp	r0, #0
 8001aee:	f040 80bd 	bne.w	8001c6c <LIS2DW12_ACC_GetOutputDataRate+0x194>
  if (lis2dw12_power_mode_get(&(pObj->Ctx), &mode) != LIS2DW12_OK)
 8001af2:	f10d 0106 	add.w	r1, sp, #6
 8001af6:	4620      	mov	r0, r4
 8001af8:	f000 fa12 	bl	8001f20 <lis2dw12_power_mode_get>
 8001afc:	2800      	cmp	r0, #0
 8001afe:	f040 80b8 	bne.w	8001c72 <LIS2DW12_ACC_GetOutputDataRate+0x19a>
  switch (odr_low_level)
 8001b02:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8001b06:	2b32      	cmp	r3, #50	; 0x32
 8001b08:	f200 80ab 	bhi.w	8001c62 <LIS2DW12_ACC_GetOutputDataRate+0x18a>
 8001b0c:	e8df f003 	tbb	[pc, r3]
 8001b10:	403d1e1a 	.word	0x403d1e1a
 8001b14:	4c494643 	.word	0x4c494643
 8001b18:	a9a98a6b 	.word	0xa9a98a6b
 8001b1c:	a9a9a9a9 	.word	0xa9a9a9a9
 8001b20:	a91aa9a9 	.word	0xa91aa9a9
 8001b24:	a9a9a9a9 	.word	0xa9a9a9a9
 8001b28:	a9a9a9a9 	.word	0xa9a9a9a9
 8001b2c:	a9a9a9a9 	.word	0xa9a9a9a9
 8001b30:	a9a9a9a9 	.word	0xa9a9a9a9
 8001b34:	a9a9a9a9 	.word	0xa9a9a9a9
 8001b38:	a9a9a9a9 	.word	0xa9a9a9a9
 8001b3c:	a9a9a9a9 	.word	0xa9a9a9a9
 8001b40:	a9a9      	.short	0xa9a9
 8001b42:	1a          	.byte	0x1a
 8001b43:	00          	.byte	0x00
      *Odr = 0.0f;
 8001b44:	2300      	movs	r3, #0
 8001b46:	602b      	str	r3, [r5, #0]
}
 8001b48:	b003      	add	sp, #12
 8001b4a:	bd30      	pop	{r4, r5, pc}
      switch (mode)
 8001b4c:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8001b50:	2b1b      	cmp	r3, #27
 8001b52:	d815      	bhi.n	8001b80 <LIS2DW12_ACC_GetOutputDataRate+0xa8>
 8001b54:	e8df f003 	tbb	[pc, r3]
 8001b58:	11111111 	.word	0x11111111
 8001b5c:	1414140e 	.word	0x1414140e
 8001b60:	11111111 	.word	0x11111111
 8001b64:	14141414 	.word	0x14141414
 8001b68:	11111111 	.word	0x11111111
 8001b6c:	1414140e 	.word	0x1414140e
 8001b70:	11111111 	.word	0x11111111
          *Odr = 12.5f;
 8001b74:	4b40      	ldr	r3, [pc, #256]	; (8001c78 <LIS2DW12_ACC_GetOutputDataRate+0x1a0>)
 8001b76:	602b      	str	r3, [r5, #0]
          break;
 8001b78:	e7e6      	b.n	8001b48 <LIS2DW12_ACC_GetOutputDataRate+0x70>
          *Odr = 1.6f;
 8001b7a:	4b40      	ldr	r3, [pc, #256]	; (8001c7c <LIS2DW12_ACC_GetOutputDataRate+0x1a4>)
 8001b7c:	602b      	str	r3, [r5, #0]
          break;
 8001b7e:	e7e3      	b.n	8001b48 <LIS2DW12_ACC_GetOutputDataRate+0x70>
          *Odr = -1.0f;
 8001b80:	4b3f      	ldr	r3, [pc, #252]	; (8001c80 <LIS2DW12_ACC_GetOutputDataRate+0x1a8>)
 8001b82:	602b      	str	r3, [r5, #0]
          ret = LIS2DW12_ERROR;
 8001b84:	f04f 30ff 	mov.w	r0, #4294967295
          break;
 8001b88:	e7de      	b.n	8001b48 <LIS2DW12_ACC_GetOutputDataRate+0x70>
      *Odr = 12.5f;
 8001b8a:	4b3b      	ldr	r3, [pc, #236]	; (8001c78 <LIS2DW12_ACC_GetOutputDataRate+0x1a0>)
 8001b8c:	602b      	str	r3, [r5, #0]
      break;
 8001b8e:	e7db      	b.n	8001b48 <LIS2DW12_ACC_GetOutputDataRate+0x70>
      *Odr = 25.0f;
 8001b90:	4b3c      	ldr	r3, [pc, #240]	; (8001c84 <LIS2DW12_ACC_GetOutputDataRate+0x1ac>)
 8001b92:	602b      	str	r3, [r5, #0]
      break;
 8001b94:	e7d8      	b.n	8001b48 <LIS2DW12_ACC_GetOutputDataRate+0x70>
      *Odr = 50.0f;
 8001b96:	4b3c      	ldr	r3, [pc, #240]	; (8001c88 <LIS2DW12_ACC_GetOutputDataRate+0x1b0>)
 8001b98:	602b      	str	r3, [r5, #0]
      break;
 8001b9a:	e7d5      	b.n	8001b48 <LIS2DW12_ACC_GetOutputDataRate+0x70>
      *Odr = 100.0f;
 8001b9c:	4b3b      	ldr	r3, [pc, #236]	; (8001c8c <LIS2DW12_ACC_GetOutputDataRate+0x1b4>)
 8001b9e:	602b      	str	r3, [r5, #0]
      break;
 8001ba0:	e7d2      	b.n	8001b48 <LIS2DW12_ACC_GetOutputDataRate+0x70>
      *Odr = 200.0f;
 8001ba2:	4b3b      	ldr	r3, [pc, #236]	; (8001c90 <LIS2DW12_ACC_GetOutputDataRate+0x1b8>)
 8001ba4:	602b      	str	r3, [r5, #0]
      break;
 8001ba6:	e7cf      	b.n	8001b48 <LIS2DW12_ACC_GetOutputDataRate+0x70>
      switch (mode)
 8001ba8:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8001bac:	2b1b      	cmp	r3, #27
 8001bae:	d815      	bhi.n	8001bdc <LIS2DW12_ACC_GetOutputDataRate+0x104>
 8001bb0:	e8df f003 	tbb	[pc, r3]
 8001bb4:	11111111 	.word	0x11111111
 8001bb8:	1414140e 	.word	0x1414140e
 8001bbc:	11111111 	.word	0x11111111
 8001bc0:	14141414 	.word	0x14141414
 8001bc4:	11111111 	.word	0x11111111
 8001bc8:	1414140e 	.word	0x1414140e
 8001bcc:	11111111 	.word	0x11111111
          *Odr = 400.0f;
 8001bd0:	4b30      	ldr	r3, [pc, #192]	; (8001c94 <LIS2DW12_ACC_GetOutputDataRate+0x1bc>)
 8001bd2:	602b      	str	r3, [r5, #0]
          break;
 8001bd4:	e7b8      	b.n	8001b48 <LIS2DW12_ACC_GetOutputDataRate+0x70>
          *Odr = 200.0f;
 8001bd6:	4b2e      	ldr	r3, [pc, #184]	; (8001c90 <LIS2DW12_ACC_GetOutputDataRate+0x1b8>)
 8001bd8:	602b      	str	r3, [r5, #0]
          break;
 8001bda:	e7b5      	b.n	8001b48 <LIS2DW12_ACC_GetOutputDataRate+0x70>
          *Odr = -1.0f;
 8001bdc:	4b28      	ldr	r3, [pc, #160]	; (8001c80 <LIS2DW12_ACC_GetOutputDataRate+0x1a8>)
 8001bde:	602b      	str	r3, [r5, #0]
          ret = LIS2DW12_ERROR;
 8001be0:	f04f 30ff 	mov.w	r0, #4294967295
          break;
 8001be4:	e7b0      	b.n	8001b48 <LIS2DW12_ACC_GetOutputDataRate+0x70>
      switch (mode)
 8001be6:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8001bea:	2b1b      	cmp	r3, #27
 8001bec:	d815      	bhi.n	8001c1a <LIS2DW12_ACC_GetOutputDataRate+0x142>
 8001bee:	e8df f003 	tbb	[pc, r3]
 8001bf2:	1111      	.short	0x1111
 8001bf4:	140e1111 	.word	0x140e1111
 8001bf8:	11111414 	.word	0x11111414
 8001bfc:	14141111 	.word	0x14141111
 8001c00:	11111414 	.word	0x11111414
 8001c04:	140e1111 	.word	0x140e1111
 8001c08:	11111414 	.word	0x11111414
 8001c0c:	1111      	.short	0x1111
          *Odr = 800.0f;
 8001c0e:	4b22      	ldr	r3, [pc, #136]	; (8001c98 <LIS2DW12_ACC_GetOutputDataRate+0x1c0>)
 8001c10:	602b      	str	r3, [r5, #0]
          break;
 8001c12:	e799      	b.n	8001b48 <LIS2DW12_ACC_GetOutputDataRate+0x70>
          *Odr = 200.0f;
 8001c14:	4b1e      	ldr	r3, [pc, #120]	; (8001c90 <LIS2DW12_ACC_GetOutputDataRate+0x1b8>)
 8001c16:	602b      	str	r3, [r5, #0]
          break;
 8001c18:	e796      	b.n	8001b48 <LIS2DW12_ACC_GetOutputDataRate+0x70>
          *Odr = -1.0f;
 8001c1a:	4b19      	ldr	r3, [pc, #100]	; (8001c80 <LIS2DW12_ACC_GetOutputDataRate+0x1a8>)
 8001c1c:	602b      	str	r3, [r5, #0]
          ret = LIS2DW12_ERROR;
 8001c1e:	f04f 30ff 	mov.w	r0, #4294967295
          break;
 8001c22:	e791      	b.n	8001b48 <LIS2DW12_ACC_GetOutputDataRate+0x70>
      switch (mode)
 8001c24:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8001c28:	2b1b      	cmp	r3, #27
 8001c2a:	d815      	bhi.n	8001c58 <LIS2DW12_ACC_GetOutputDataRate+0x180>
 8001c2c:	e8df f003 	tbb	[pc, r3]
 8001c30:	11111111 	.word	0x11111111
 8001c34:	1414140e 	.word	0x1414140e
 8001c38:	11111111 	.word	0x11111111
 8001c3c:	14141414 	.word	0x14141414
 8001c40:	11111111 	.word	0x11111111
 8001c44:	1414140e 	.word	0x1414140e
 8001c48:	11111111 	.word	0x11111111
          *Odr = 1600.0f;
 8001c4c:	4b13      	ldr	r3, [pc, #76]	; (8001c9c <LIS2DW12_ACC_GetOutputDataRate+0x1c4>)
 8001c4e:	602b      	str	r3, [r5, #0]
          break;
 8001c50:	e77a      	b.n	8001b48 <LIS2DW12_ACC_GetOutputDataRate+0x70>
          *Odr = 200.0f;
 8001c52:	4b0f      	ldr	r3, [pc, #60]	; (8001c90 <LIS2DW12_ACC_GetOutputDataRate+0x1b8>)
 8001c54:	602b      	str	r3, [r5, #0]
          break;
 8001c56:	e777      	b.n	8001b48 <LIS2DW12_ACC_GetOutputDataRate+0x70>
          *Odr = -1.0f;
 8001c58:	4b09      	ldr	r3, [pc, #36]	; (8001c80 <LIS2DW12_ACC_GetOutputDataRate+0x1a8>)
 8001c5a:	602b      	str	r3, [r5, #0]
          ret = LIS2DW12_ERROR;
 8001c5c:	f04f 30ff 	mov.w	r0, #4294967295
          break;
 8001c60:	e772      	b.n	8001b48 <LIS2DW12_ACC_GetOutputDataRate+0x70>
      *Odr = -1.0f;
 8001c62:	4b07      	ldr	r3, [pc, #28]	; (8001c80 <LIS2DW12_ACC_GetOutputDataRate+0x1a8>)
 8001c64:	602b      	str	r3, [r5, #0]
      ret = LIS2DW12_ERROR;
 8001c66:	f04f 30ff 	mov.w	r0, #4294967295
      break;
 8001c6a:	e76d      	b.n	8001b48 <LIS2DW12_ACC_GetOutputDataRate+0x70>
    return LIS2DW12_ERROR;
 8001c6c:	f04f 30ff 	mov.w	r0, #4294967295
 8001c70:	e76a      	b.n	8001b48 <LIS2DW12_ACC_GetOutputDataRate+0x70>
    return LIS2DW12_ERROR;
 8001c72:	f04f 30ff 	mov.w	r0, #4294967295
 8001c76:	e767      	b.n	8001b48 <LIS2DW12_ACC_GetOutputDataRate+0x70>
 8001c78:	41480000 	.word	0x41480000
 8001c7c:	3fcccccd 	.word	0x3fcccccd
 8001c80:	bf800000 	.word	0xbf800000
 8001c84:	41c80000 	.word	0x41c80000
 8001c88:	42480000 	.word	0x42480000
 8001c8c:	42c80000 	.word	0x42c80000
 8001c90:	43480000 	.word	0x43480000
 8001c94:	43c80000 	.word	0x43c80000
 8001c98:	44480000 	.word	0x44480000
 8001c9c:	44c80000 	.word	0x44c80000

08001ca0 <LIS2DW12_ACC_GetAxesRaw>:
{
 8001ca0:	b530      	push	{r4, r5, lr}
 8001ca2:	b085      	sub	sp, #20
 8001ca4:	460d      	mov	r5, r1
  if (lis2dw12_power_mode_get(&(pObj->Ctx), &mode) != LIS2DW12_OK)
 8001ca6:	f100 0420 	add.w	r4, r0, #32
 8001caa:	f10d 0107 	add.w	r1, sp, #7
 8001cae:	4620      	mov	r0, r4
 8001cb0:	f000 f936 	bl	8001f20 <lis2dw12_power_mode_get>
 8001cb4:	2800      	cmp	r0, #0
 8001cb6:	d14c      	bne.n	8001d52 <LIS2DW12_ACC_GetAxesRaw+0xb2>
  if (lis2dw12_acceleration_raw_get(&(pObj->Ctx), data_raw.i16bit) != LIS2DW12_OK)
 8001cb8:	a902      	add	r1, sp, #8
 8001cba:	4620      	mov	r0, r4
 8001cbc:	f000 fa7f 	bl	80021be <lis2dw12_acceleration_raw_get>
 8001cc0:	2800      	cmp	r0, #0
 8001cc2:	d149      	bne.n	8001d58 <LIS2DW12_ACC_GetAxesRaw+0xb8>
  switch (mode)
 8001cc4:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8001cc8:	2b1b      	cmp	r3, #27
 8001cca:	d848      	bhi.n	8001d5e <LIS2DW12_ACC_GetAxesRaw+0xbe>
 8001ccc:	e8df f003 	tbb	[pc, r3]
 8001cd0:	2828280e 	.word	0x2828280e
 8001cd4:	47474728 	.word	0x47474728
 8001cd8:	2828280e 	.word	0x2828280e
 8001cdc:	47474747 	.word	0x47474747
 8001ce0:	2828280e 	.word	0x2828280e
 8001ce4:	47474728 	.word	0x47474728
 8001ce8:	2828280e 	.word	0x2828280e
      Value->x = (data_raw.i16bit[0] / 16);
 8001cec:	f9bd 3008 	ldrsh.w	r3, [sp, #8]
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	db0f      	blt.n	8001d14 <LIS2DW12_ACC_GetAxesRaw+0x74>
 8001cf4:	111b      	asrs	r3, r3, #4
 8001cf6:	802b      	strh	r3, [r5, #0]
      Value->y = (data_raw.i16bit[1] / 16);
 8001cf8:	f9bd 300a 	ldrsh.w	r3, [sp, #10]
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	db0b      	blt.n	8001d18 <LIS2DW12_ACC_GetAxesRaw+0x78>
 8001d00:	111b      	asrs	r3, r3, #4
 8001d02:	806b      	strh	r3, [r5, #2]
      Value->z = (data_raw.i16bit[2] / 16);
 8001d04:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	db07      	blt.n	8001d1c <LIS2DW12_ACC_GetAxesRaw+0x7c>
 8001d0c:	111b      	asrs	r3, r3, #4
 8001d0e:	80ab      	strh	r3, [r5, #4]
}
 8001d10:	b005      	add	sp, #20
 8001d12:	bd30      	pop	{r4, r5, pc}
      Value->x = (data_raw.i16bit[0] / 16);
 8001d14:	330f      	adds	r3, #15
 8001d16:	e7ed      	b.n	8001cf4 <LIS2DW12_ACC_GetAxesRaw+0x54>
      Value->y = (data_raw.i16bit[1] / 16);
 8001d18:	330f      	adds	r3, #15
 8001d1a:	e7f1      	b.n	8001d00 <LIS2DW12_ACC_GetAxesRaw+0x60>
      Value->z = (data_raw.i16bit[2] / 16);
 8001d1c:	330f      	adds	r3, #15
 8001d1e:	e7f5      	b.n	8001d0c <LIS2DW12_ACC_GetAxesRaw+0x6c>
      Value->x = (data_raw.i16bit[0] / 4);
 8001d20:	f9bd 3008 	ldrsh.w	r3, [sp, #8]
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	db0e      	blt.n	8001d46 <LIS2DW12_ACC_GetAxesRaw+0xa6>
 8001d28:	109b      	asrs	r3, r3, #2
 8001d2a:	802b      	strh	r3, [r5, #0]
      Value->y = (data_raw.i16bit[1] / 4);
 8001d2c:	f9bd 300a 	ldrsh.w	r3, [sp, #10]
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	db0a      	blt.n	8001d4a <LIS2DW12_ACC_GetAxesRaw+0xaa>
 8001d34:	109b      	asrs	r3, r3, #2
 8001d36:	806b      	strh	r3, [r5, #2]
      Value->z = (data_raw.i16bit[2] / 4);
 8001d38:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	db06      	blt.n	8001d4e <LIS2DW12_ACC_GetAxesRaw+0xae>
 8001d40:	109b      	asrs	r3, r3, #2
 8001d42:	80ab      	strh	r3, [r5, #4]
      break;
 8001d44:	e7e4      	b.n	8001d10 <LIS2DW12_ACC_GetAxesRaw+0x70>
      Value->x = (data_raw.i16bit[0] / 4);
 8001d46:	3303      	adds	r3, #3
 8001d48:	e7ee      	b.n	8001d28 <LIS2DW12_ACC_GetAxesRaw+0x88>
      Value->y = (data_raw.i16bit[1] / 4);
 8001d4a:	3303      	adds	r3, #3
 8001d4c:	e7f2      	b.n	8001d34 <LIS2DW12_ACC_GetAxesRaw+0x94>
      Value->z = (data_raw.i16bit[2] / 4);
 8001d4e:	3303      	adds	r3, #3
 8001d50:	e7f6      	b.n	8001d40 <LIS2DW12_ACC_GetAxesRaw+0xa0>
    return LIS2DW12_ERROR;
 8001d52:	f04f 30ff 	mov.w	r0, #4294967295
 8001d56:	e7db      	b.n	8001d10 <LIS2DW12_ACC_GetAxesRaw+0x70>
    return LIS2DW12_ERROR;
 8001d58:	f04f 30ff 	mov.w	r0, #4294967295
 8001d5c:	e7d8      	b.n	8001d10 <LIS2DW12_ACC_GetAxesRaw+0x70>
  switch (mode)
 8001d5e:	f04f 30ff 	mov.w	r0, #4294967295
 8001d62:	e7d5      	b.n	8001d10 <LIS2DW12_ACC_GetAxesRaw+0x70>

08001d64 <LIS2DW12_ACC_GetAxes>:
{
 8001d64:	b530      	push	{r4, r5, lr}
 8001d66:	b085      	sub	sp, #20
 8001d68:	4605      	mov	r5, r0
 8001d6a:	460c      	mov	r4, r1
  float sensitivity = 0.0f;
 8001d6c:	2300      	movs	r3, #0
 8001d6e:	9301      	str	r3, [sp, #4]
  if (LIS2DW12_ACC_GetAxesRaw(pObj, &data_raw) != LIS2DW12_OK)
 8001d70:	a902      	add	r1, sp, #8
 8001d72:	f7ff ff95 	bl	8001ca0 <LIS2DW12_ACC_GetAxesRaw>
 8001d76:	bb60      	cbnz	r0, 8001dd2 <LIS2DW12_ACC_GetAxes+0x6e>
  if (LIS2DW12_ACC_GetSensitivity(pObj, &sensitivity) != LIS2DW12_OK)
 8001d78:	a901      	add	r1, sp, #4
 8001d7a:	4628      	mov	r0, r5
 8001d7c:	f7ff fe38 	bl	80019f0 <LIS2DW12_ACC_GetSensitivity>
 8001d80:	bb50      	cbnz	r0, 8001dd8 <LIS2DW12_ACC_GetAxes+0x74>
  Acceleration->x = (int32_t)((float)((float)data_raw.x * sensitivity));
 8001d82:	f9bd 3008 	ldrsh.w	r3, [sp, #8]
 8001d86:	ee07 3a10 	vmov	s14, r3
 8001d8a:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8001d8e:	eddd 7a01 	vldr	s15, [sp, #4]
 8001d92:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001d96:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 8001d9a:	ed84 7a00 	vstr	s14, [r4]
  Acceleration->y = (int32_t)((float)((float)data_raw.y * sensitivity));
 8001d9e:	f9bd 300a 	ldrsh.w	r3, [sp, #10]
 8001da2:	ee07 3a10 	vmov	s14, r3
 8001da6:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8001daa:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001dae:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 8001db2:	ed84 7a01 	vstr	s14, [r4, #4]
  Acceleration->z = (int32_t)((float)((float)data_raw.z * sensitivity));
 8001db6:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 8001dba:	ee07 3a10 	vmov	s14, r3
 8001dbe:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8001dc2:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001dc6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001dca:	edc4 7a02 	vstr	s15, [r4, #8]
}
 8001dce:	b005      	add	sp, #20
 8001dd0:	bd30      	pop	{r4, r5, pc}
    return LIS2DW12_ERROR;
 8001dd2:	f04f 30ff 	mov.w	r0, #4294967295
 8001dd6:	e7fa      	b.n	8001dce <LIS2DW12_ACC_GetAxes+0x6a>
    return LIS2DW12_ERROR;
 8001dd8:	f04f 30ff 	mov.w	r0, #4294967295
 8001ddc:	e7f7      	b.n	8001dce <LIS2DW12_ACC_GetAxes+0x6a>

08001dde <LIS2DW12_ACC_SetOutputDataRate_With_Mode>:
{
 8001dde:	b508      	push	{r3, lr}
  if (pObj->acc_is_enabled == 1U)
 8001de0:	f890 3031 	ldrb.w	r3, [r0, #49]	; 0x31
 8001de4:	2b01      	cmp	r3, #1
 8001de6:	d002      	beq.n	8001dee <LIS2DW12_ACC_SetOutputDataRate_With_Mode+0x10>
    return LIS2DW12_ACC_SetOutputDataRate_When_Disabled(pObj, Odr, Mode, Noise);
 8001de8:	f7ff fbf6 	bl	80015d8 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled>
}
 8001dec:	bd08      	pop	{r3, pc}
    return LIS2DW12_ACC_SetOutputDataRate_When_Enabled(pObj, Odr, Mode, Noise);
 8001dee:	f7ff fc6b 	bl	80016c8 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled>
 8001df2:	e7fb      	b.n	8001dec <LIS2DW12_ACC_SetOutputDataRate_With_Mode+0xe>

08001df4 <LIS2DW12_ACC_SetOutputDataRate>:
{
 8001df4:	b508      	push	{r3, lr}
  return LIS2DW12_ACC_SetOutputDataRate_With_Mode(pObj, Odr, LIS2DW12_HIGH_PERFORMANCE_MODE, LIS2DW12_LOW_NOISE_DISABLE);
 8001df6:	2200      	movs	r2, #0
 8001df8:	4611      	mov	r1, r2
 8001dfa:	f7ff fff0 	bl	8001dde <LIS2DW12_ACC_SetOutputDataRate_With_Mode>
}
 8001dfe:	bd08      	pop	{r3, pc}

08001e00 <LIS2DW12_Write_Reg>:
{
 8001e00:	b500      	push	{lr}
 8001e02:	b083      	sub	sp, #12
 8001e04:	f88d 2007 	strb.w	r2, [sp, #7]
  if (lis2dw12_write_reg(&(pObj->Ctx), Reg, &Data, 1) != LIS2DW12_OK)
 8001e08:	2301      	movs	r3, #1
 8001e0a:	f10d 0207 	add.w	r2, sp, #7
 8001e0e:	3020      	adds	r0, #32
 8001e10:	f000 f849 	bl	8001ea6 <lis2dw12_write_reg>
 8001e14:	b910      	cbnz	r0, 8001e1c <LIS2DW12_Write_Reg+0x1c>
}
 8001e16:	b003      	add	sp, #12
 8001e18:	f85d fb04 	ldr.w	pc, [sp], #4
    return LIS2DW12_ERROR;
 8001e1c:	f04f 30ff 	mov.w	r0, #4294967295
 8001e20:	e7f9      	b.n	8001e16 <LIS2DW12_Write_Reg+0x16>
	...

08001e24 <LIS2DW12_RegisterBusIO>:
  if (pObj == NULL)
 8001e24:	2800      	cmp	r0, #0
 8001e26:	d02b      	beq.n	8001e80 <LIS2DW12_RegisterBusIO+0x5c>
{
 8001e28:	b510      	push	{r4, lr}
 8001e2a:	4604      	mov	r4, r0
    pObj->IO.Init      = pIO->Init;
 8001e2c:	680b      	ldr	r3, [r1, #0]
 8001e2e:	6003      	str	r3, [r0, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 8001e30:	684a      	ldr	r2, [r1, #4]
 8001e32:	6042      	str	r2, [r0, #4]
    pObj->IO.BusType   = pIO->BusType;
 8001e34:	688a      	ldr	r2, [r1, #8]
 8001e36:	6082      	str	r2, [r0, #8]
    pObj->IO.Address   = pIO->Address;
 8001e38:	7b0a      	ldrb	r2, [r1, #12]
 8001e3a:	7302      	strb	r2, [r0, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 8001e3c:	690a      	ldr	r2, [r1, #16]
 8001e3e:	6102      	str	r2, [r0, #16]
    pObj->IO.ReadReg   = pIO->ReadReg;
 8001e40:	694a      	ldr	r2, [r1, #20]
 8001e42:	6142      	str	r2, [r0, #20]
    pObj->IO.GetTick   = pIO->GetTick;
 8001e44:	698a      	ldr	r2, [r1, #24]
 8001e46:	6182      	str	r2, [r0, #24]
    pObj->Ctx.read_reg  = ReadRegWrap;
 8001e48:	4a12      	ldr	r2, [pc, #72]	; (8001e94 <LIS2DW12_RegisterBusIO+0x70>)
 8001e4a:	6242      	str	r2, [r0, #36]	; 0x24
    pObj->Ctx.write_reg = WriteRegWrap;
 8001e4c:	4a12      	ldr	r2, [pc, #72]	; (8001e98 <LIS2DW12_RegisterBusIO+0x74>)
 8001e4e:	6202      	str	r2, [r0, #32]
    pObj->Ctx.mdelay    = pIO->Delay;
 8001e50:	69ca      	ldr	r2, [r1, #28]
 8001e52:	6282      	str	r2, [r0, #40]	; 0x28
    pObj->Ctx.handle   = pObj;
 8001e54:	62c0      	str	r0, [r0, #44]	; 0x2c
    if (pObj->IO.Init == NULL)
 8001e56:	b1b3      	cbz	r3, 8001e86 <LIS2DW12_RegisterBusIO+0x62>
    else if (pObj->IO.Init() != LIS2DW12_OK)
 8001e58:	4798      	blx	r3
 8001e5a:	b9b8      	cbnz	r0, 8001e8c <LIS2DW12_RegisterBusIO+0x68>
      if (pObj->IO.BusType == LIS2DW12_SPI_3WIRES_BUS) /* SPI 3-Wires */
 8001e5c:	68a3      	ldr	r3, [r4, #8]
 8001e5e:	2b02      	cmp	r3, #2
 8001e60:	d000      	beq.n	8001e64 <LIS2DW12_RegisterBusIO+0x40>
}
 8001e62:	bd10      	pop	{r4, pc}
        if (pObj->is_initialized == 0U)
 8001e64:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d1fa      	bne.n	8001e62 <LIS2DW12_RegisterBusIO+0x3e>
          if (LIS2DW12_Write_Reg(pObj, LIS2DW12_CTRL2, data) != LIS2DW12_OK)
 8001e6c:	2205      	movs	r2, #5
 8001e6e:	2121      	movs	r1, #33	; 0x21
 8001e70:	4620      	mov	r0, r4
 8001e72:	f7ff ffc5 	bl	8001e00 <LIS2DW12_Write_Reg>
 8001e76:	2800      	cmp	r0, #0
 8001e78:	d0f3      	beq.n	8001e62 <LIS2DW12_RegisterBusIO+0x3e>
            ret = LIS2DW12_ERROR;
 8001e7a:	f04f 30ff 	mov.w	r0, #4294967295
  return ret;
 8001e7e:	e7f0      	b.n	8001e62 <LIS2DW12_RegisterBusIO+0x3e>
    ret = LIS2DW12_ERROR;
 8001e80:	f04f 30ff 	mov.w	r0, #4294967295
}
 8001e84:	4770      	bx	lr
      ret = LIS2DW12_ERROR;
 8001e86:	f04f 30ff 	mov.w	r0, #4294967295
 8001e8a:	e7ea      	b.n	8001e62 <LIS2DW12_RegisterBusIO+0x3e>
      ret = LIS2DW12_ERROR;
 8001e8c:	f04f 30ff 	mov.w	r0, #4294967295
 8001e90:	e7e7      	b.n	8001e62 <LIS2DW12_RegisterBusIO+0x3e>
 8001e92:	bf00      	nop
 8001e94:	080016b5 	.word	0x080016b5
 8001e98:	080016bf 	.word	0x080016bf

08001e9c <lis2dw12_read_reg>:
  *
  */
int32_t lis2dw12_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                          uint8_t *data,
                          uint16_t len)
{
 8001e9c:	b510      	push	{r4, lr}
  int32_t ret;

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8001e9e:	6844      	ldr	r4, [r0, #4]
 8001ea0:	68c0      	ldr	r0, [r0, #12]
 8001ea2:	47a0      	blx	r4

  return ret;
}
 8001ea4:	bd10      	pop	{r4, pc}

08001ea6 <lis2dw12_write_reg>:
  *
  */
int32_t lis2dw12_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                           uint8_t *data,
                           uint16_t len)
{
 8001ea6:	b510      	push	{r4, lr}
  int32_t ret;

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8001ea8:	6804      	ldr	r4, [r0, #0]
 8001eaa:	68c0      	ldr	r0, [r0, #12]
 8001eac:	47a0      	blx	r4

  return ret;
}
 8001eae:	bd10      	pop	{r4, pc}

08001eb0 <lis2dw12_power_mode_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_power_mode_set(stmdev_ctx_t *ctx,
                                lis2dw12_mode_t val)
{
 8001eb0:	b530      	push	{r4, r5, lr}
 8001eb2:	b083      	sub	sp, #12
 8001eb4:	4605      	mov	r5, r0
 8001eb6:	460c      	mov	r4, r1
  lis2dw12_ctrl1_t ctrl1;
  lis2dw12_ctrl6_t ctrl6;
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL1, (uint8_t *) &ctrl1, 1);
 8001eb8:	2301      	movs	r3, #1
 8001eba:	aa01      	add	r2, sp, #4
 8001ebc:	2120      	movs	r1, #32
 8001ebe:	f7ff ffed 	bl	8001e9c <lis2dw12_read_reg>

  if (ret == 0)
 8001ec2:	b118      	cbz	r0, 8001ecc <lis2dw12_power_mode_set+0x1c>
    ctrl1.mode = ((uint8_t) val & 0x0CU) >> 2;
    ctrl1.lp_mode = (uint8_t) val & 0x03U ;
    ret = lis2dw12_write_reg(ctx, LIS2DW12_CTRL1, (uint8_t *) &ctrl1, 1);
  }

  if (ret == 0)
 8001ec4:	b1b0      	cbz	r0, 8001ef4 <lis2dw12_power_mode_set+0x44>
  {
    ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL6, (uint8_t *) &ctrl6, 1);
  }

  if (ret == 0)
 8001ec6:	b1e0      	cbz	r0, 8001f02 <lis2dw12_power_mode_set+0x52>
    ctrl6.low_noise = ((uint8_t) val & 0x10U) >> 4;
    ret = lis2dw12_write_reg(ctx, LIS2DW12_CTRL6, (uint8_t *) &ctrl6, 1);
  }

  return ret;
}
 8001ec8:	b003      	add	sp, #12
 8001eca:	bd30      	pop	{r4, r5, pc}
    ctrl1.mode = ((uint8_t) val & 0x0CU) >> 2;
 8001ecc:	f3c4 0381 	ubfx	r3, r4, #2, #2
 8001ed0:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8001ed4:	f363 0283 	bfi	r2, r3, #2, #2
 8001ed8:	f88d 2004 	strb.w	r2, [sp, #4]
    ctrl1.lp_mode = (uint8_t) val & 0x03U ;
 8001edc:	b2d3      	uxtb	r3, r2
 8001ede:	f364 0301 	bfi	r3, r4, #0, #2
 8001ee2:	f88d 3004 	strb.w	r3, [sp, #4]
    ret = lis2dw12_write_reg(ctx, LIS2DW12_CTRL1, (uint8_t *) &ctrl1, 1);
 8001ee6:	2301      	movs	r3, #1
 8001ee8:	aa01      	add	r2, sp, #4
 8001eea:	2120      	movs	r1, #32
 8001eec:	4628      	mov	r0, r5
 8001eee:	f7ff ffda 	bl	8001ea6 <lis2dw12_write_reg>
 8001ef2:	e7e7      	b.n	8001ec4 <lis2dw12_power_mode_set+0x14>
    ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL6, (uint8_t *) &ctrl6, 1);
 8001ef4:	2301      	movs	r3, #1
 8001ef6:	466a      	mov	r2, sp
 8001ef8:	2125      	movs	r1, #37	; 0x25
 8001efa:	4628      	mov	r0, r5
 8001efc:	f7ff ffce 	bl	8001e9c <lis2dw12_read_reg>
 8001f00:	e7e1      	b.n	8001ec6 <lis2dw12_power_mode_set+0x16>
    ctrl6.low_noise = ((uint8_t) val & 0x10U) >> 4;
 8001f02:	f3c4 1100 	ubfx	r1, r4, #4, #1
 8001f06:	f89d 3000 	ldrb.w	r3, [sp]
 8001f0a:	f361 0382 	bfi	r3, r1, #2, #1
 8001f0e:	f88d 3000 	strb.w	r3, [sp]
    ret = lis2dw12_write_reg(ctx, LIS2DW12_CTRL6, (uint8_t *) &ctrl6, 1);
 8001f12:	2301      	movs	r3, #1
 8001f14:	466a      	mov	r2, sp
 8001f16:	2125      	movs	r1, #37	; 0x25
 8001f18:	4628      	mov	r0, r5
 8001f1a:	f7ff ffc4 	bl	8001ea6 <lis2dw12_write_reg>
  return ret;
 8001f1e:	e7d3      	b.n	8001ec8 <lis2dw12_power_mode_set+0x18>

08001f20 <lis2dw12_power_mode_get>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_power_mode_get(stmdev_ctx_t *ctx,
                                lis2dw12_mode_t *val)
{
 8001f20:	b530      	push	{r4, r5, lr}
 8001f22:	b083      	sub	sp, #12
 8001f24:	4604      	mov	r4, r0
 8001f26:	460d      	mov	r5, r1
  lis2dw12_ctrl1_t ctrl1;
  lis2dw12_ctrl6_t ctrl6;
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL1, (uint8_t *) &ctrl1, 1);
 8001f28:	2301      	movs	r3, #1
 8001f2a:	aa01      	add	r2, sp, #4
 8001f2c:	2120      	movs	r1, #32
 8001f2e:	f7ff ffb5 	bl	8001e9c <lis2dw12_read_reg>

  if (ret == 0)
 8001f32:	b108      	cbz	r0, 8001f38 <lis2dw12_power_mode_get+0x18>
        break;
    }
  }

  return ret;
}
 8001f34:	b003      	add	sp, #12
 8001f36:	bd30      	pop	{r4, r5, pc}
    ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL6, (uint8_t *) &ctrl6, 1);
 8001f38:	2301      	movs	r3, #1
 8001f3a:	466a      	mov	r2, sp
 8001f3c:	2125      	movs	r1, #37	; 0x25
 8001f3e:	4620      	mov	r0, r4
 8001f40:	f7ff ffac 	bl	8001e9c <lis2dw12_read_reg>
    switch (((ctrl6.low_noise << 4) + (ctrl1.mode << 2) +
 8001f44:	f89d 3000 	ldrb.w	r3, [sp]
 8001f48:	f3c3 0180 	ubfx	r1, r3, #2, #1
 8001f4c:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8001f50:	f002 030c 	and.w	r3, r2, #12
 8001f54:	eb03 1301 	add.w	r3, r3, r1, lsl #4
             ctrl1.lp_mode))
 8001f58:	f002 0203 	and.w	r2, r2, #3
    switch (((ctrl6.low_noise << 4) + (ctrl1.mode << 2) +
 8001f5c:	4413      	add	r3, r2
 8001f5e:	2b1b      	cmp	r3, #27
 8001f60:	d845      	bhi.n	8001fee <lis2dw12_power_mode_get+0xce>
 8001f62:	e8df f003 	tbb	[pc, r3]
 8001f66:	171a      	.short	0x171a
 8001f68:	440e1114 	.word	0x440e1114
 8001f6c:	23264444 	.word	0x23264444
 8001f70:	44441d20 	.word	0x44441d20
 8001f74:	32354444 	.word	0x32354444
 8001f78:	44292c2f 	.word	0x44292c2f
 8001f7c:	3e414444 	.word	0x3e414444
 8001f80:	383b      	.short	0x383b
        *val = LIS2DW12_HIGH_PERFORMANCE;
 8001f82:	2304      	movs	r3, #4
 8001f84:	702b      	strb	r3, [r5, #0]
        break;
 8001f86:	e7d5      	b.n	8001f34 <lis2dw12_power_mode_get+0x14>
        *val = LIS2DW12_CONT_LOW_PWR_4;
 8001f88:	2303      	movs	r3, #3
 8001f8a:	702b      	strb	r3, [r5, #0]
        break;
 8001f8c:	e7d2      	b.n	8001f34 <lis2dw12_power_mode_get+0x14>
        *val = LIS2DW12_CONT_LOW_PWR_3;
 8001f8e:	2302      	movs	r3, #2
 8001f90:	702b      	strb	r3, [r5, #0]
        break;
 8001f92:	e7cf      	b.n	8001f34 <lis2dw12_power_mode_get+0x14>
        *val = LIS2DW12_CONT_LOW_PWR_2;
 8001f94:	2301      	movs	r3, #1
 8001f96:	702b      	strb	r3, [r5, #0]
        break;
 8001f98:	e7cc      	b.n	8001f34 <lis2dw12_power_mode_get+0x14>
        *val = LIS2DW12_CONT_LOW_PWR_12bit;
 8001f9a:	2300      	movs	r3, #0
 8001f9c:	702b      	strb	r3, [r5, #0]
        break;
 8001f9e:	e7c9      	b.n	8001f34 <lis2dw12_power_mode_get+0x14>
        *val = LIS2DW12_SINGLE_LOW_PWR_4;
 8001fa0:	230b      	movs	r3, #11
 8001fa2:	702b      	strb	r3, [r5, #0]
        break;
 8001fa4:	e7c6      	b.n	8001f34 <lis2dw12_power_mode_get+0x14>
        *val = LIS2DW12_SINGLE_LOW_PWR_3;
 8001fa6:	230a      	movs	r3, #10
 8001fa8:	702b      	strb	r3, [r5, #0]
        break;
 8001faa:	e7c3      	b.n	8001f34 <lis2dw12_power_mode_get+0x14>
        *val = LIS2DW12_SINGLE_LOW_PWR_2;
 8001fac:	2309      	movs	r3, #9
 8001fae:	702b      	strb	r3, [r5, #0]
        break;
 8001fb0:	e7c0      	b.n	8001f34 <lis2dw12_power_mode_get+0x14>
        *val = LIS2DW12_SINGLE_LOW_PWR_12bit;
 8001fb2:	2308      	movs	r3, #8
 8001fb4:	702b      	strb	r3, [r5, #0]
        break;
 8001fb6:	e7bd      	b.n	8001f34 <lis2dw12_power_mode_get+0x14>
        *val = LIS2DW12_HIGH_PERFORMANCE_LOW_NOISE;
 8001fb8:	2314      	movs	r3, #20
 8001fba:	702b      	strb	r3, [r5, #0]
        break;
 8001fbc:	e7ba      	b.n	8001f34 <lis2dw12_power_mode_get+0x14>
        *val = LIS2DW12_CONT_LOW_PWR_LOW_NOISE_4;
 8001fbe:	2313      	movs	r3, #19
 8001fc0:	702b      	strb	r3, [r5, #0]
        break;
 8001fc2:	e7b7      	b.n	8001f34 <lis2dw12_power_mode_get+0x14>
        *val = LIS2DW12_CONT_LOW_PWR_LOW_NOISE_3;
 8001fc4:	2312      	movs	r3, #18
 8001fc6:	702b      	strb	r3, [r5, #0]
        break;
 8001fc8:	e7b4      	b.n	8001f34 <lis2dw12_power_mode_get+0x14>
        *val = LIS2DW12_CONT_LOW_PWR_LOW_NOISE_2;
 8001fca:	2311      	movs	r3, #17
 8001fcc:	702b      	strb	r3, [r5, #0]
        break;
 8001fce:	e7b1      	b.n	8001f34 <lis2dw12_power_mode_get+0x14>
        *val = LIS2DW12_CONT_LOW_PWR_LOW_NOISE_12bit;
 8001fd0:	2310      	movs	r3, #16
 8001fd2:	702b      	strb	r3, [r5, #0]
        break;
 8001fd4:	e7ae      	b.n	8001f34 <lis2dw12_power_mode_get+0x14>
        *val = LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_4;
 8001fd6:	231b      	movs	r3, #27
 8001fd8:	702b      	strb	r3, [r5, #0]
        break;
 8001fda:	e7ab      	b.n	8001f34 <lis2dw12_power_mode_get+0x14>
        *val = LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_3;
 8001fdc:	231a      	movs	r3, #26
 8001fde:	702b      	strb	r3, [r5, #0]
        break;
 8001fe0:	e7a8      	b.n	8001f34 <lis2dw12_power_mode_get+0x14>
        *val = LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_2;
 8001fe2:	2319      	movs	r3, #25
 8001fe4:	702b      	strb	r3, [r5, #0]
        break;
 8001fe6:	e7a5      	b.n	8001f34 <lis2dw12_power_mode_get+0x14>
        *val = LIS2DW12_SINGLE_LOW_LOW_NOISE_PWR_12bit;
 8001fe8:	2318      	movs	r3, #24
 8001fea:	702b      	strb	r3, [r5, #0]
        break;
 8001fec:	e7a2      	b.n	8001f34 <lis2dw12_power_mode_get+0x14>
        *val = LIS2DW12_HIGH_PERFORMANCE;
 8001fee:	2304      	movs	r3, #4
 8001ff0:	702b      	strb	r3, [r5, #0]
  return ret;
 8001ff2:	e79f      	b.n	8001f34 <lis2dw12_power_mode_get+0x14>

08001ff4 <lis2dw12_data_rate_set>:
  * @param  val      change the values of odr in reg CTRL1
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_data_rate_set(stmdev_ctx_t *ctx, lis2dw12_odr_t val)
{
 8001ff4:	b530      	push	{r4, r5, lr}
 8001ff6:	b083      	sub	sp, #12
 8001ff8:	4605      	mov	r5, r0
 8001ffa:	460c      	mov	r4, r1
  lis2dw12_ctrl1_t ctrl1;
  lis2dw12_ctrl3_t ctrl3;
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL1, (uint8_t *) &ctrl1, 1);
 8001ffc:	2301      	movs	r3, #1
 8001ffe:	aa01      	add	r2, sp, #4
 8002000:	2120      	movs	r1, #32
 8002002:	f7ff ff4b 	bl	8001e9c <lis2dw12_read_reg>

  if (ret == 0)
 8002006:	b118      	cbz	r0, 8002010 <lis2dw12_data_rate_set+0x1c>
  {
    ctrl1.odr = (uint8_t) val;
    ret = lis2dw12_write_reg(ctx, LIS2DW12_CTRL1, (uint8_t *) &ctrl1, 1);
  }

  if (ret == 0)
 8002008:	b178      	cbz	r0, 800202a <lis2dw12_data_rate_set+0x36>
  {
    ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL3, (uint8_t *) &ctrl3, 1);
  }

  if (ret == 0)
 800200a:	b1a8      	cbz	r0, 8002038 <lis2dw12_data_rate_set+0x44>
    ctrl3.slp_mode = ((uint8_t) val & 0x30U) >> 4;
    ret = lis2dw12_write_reg(ctx, LIS2DW12_CTRL3, (uint8_t *) &ctrl3, 1);
  }

  return ret;
}
 800200c:	b003      	add	sp, #12
 800200e:	bd30      	pop	{r4, r5, pc}
    ctrl1.odr = (uint8_t) val;
 8002010:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8002014:	f364 1307 	bfi	r3, r4, #4, #4
 8002018:	f88d 3004 	strb.w	r3, [sp, #4]
    ret = lis2dw12_write_reg(ctx, LIS2DW12_CTRL1, (uint8_t *) &ctrl1, 1);
 800201c:	2301      	movs	r3, #1
 800201e:	aa01      	add	r2, sp, #4
 8002020:	2120      	movs	r1, #32
 8002022:	4628      	mov	r0, r5
 8002024:	f7ff ff3f 	bl	8001ea6 <lis2dw12_write_reg>
 8002028:	e7ee      	b.n	8002008 <lis2dw12_data_rate_set+0x14>
    ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL3, (uint8_t *) &ctrl3, 1);
 800202a:	2301      	movs	r3, #1
 800202c:	466a      	mov	r2, sp
 800202e:	2122      	movs	r1, #34	; 0x22
 8002030:	4628      	mov	r0, r5
 8002032:	f7ff ff33 	bl	8001e9c <lis2dw12_read_reg>
 8002036:	e7e8      	b.n	800200a <lis2dw12_data_rate_set+0x16>
    ctrl3.slp_mode = ((uint8_t) val & 0x30U) >> 4;
 8002038:	f3c4 1101 	ubfx	r1, r4, #4, #2
 800203c:	f89d 3000 	ldrb.w	r3, [sp]
 8002040:	f361 0301 	bfi	r3, r1, #0, #2
 8002044:	f88d 3000 	strb.w	r3, [sp]
    ret = lis2dw12_write_reg(ctx, LIS2DW12_CTRL3, (uint8_t *) &ctrl3, 1);
 8002048:	2301      	movs	r3, #1
 800204a:	466a      	mov	r2, sp
 800204c:	2122      	movs	r1, #34	; 0x22
 800204e:	4628      	mov	r0, r5
 8002050:	f7ff ff29 	bl	8001ea6 <lis2dw12_write_reg>
  return ret;
 8002054:	e7da      	b.n	800200c <lis2dw12_data_rate_set+0x18>

08002056 <lis2dw12_data_rate_get>:
  * @param  val      Get the values of odr in reg CTRL1
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_data_rate_get(stmdev_ctx_t *ctx, lis2dw12_odr_t *val)
{
 8002056:	b530      	push	{r4, r5, lr}
 8002058:	b083      	sub	sp, #12
 800205a:	4604      	mov	r4, r0
 800205c:	460d      	mov	r5, r1
  lis2dw12_ctrl1_t ctrl1;
  lis2dw12_ctrl3_t ctrl3;
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL1, (uint8_t *) &ctrl1, 1);
 800205e:	2301      	movs	r3, #1
 8002060:	aa01      	add	r2, sp, #4
 8002062:	2120      	movs	r1, #32
 8002064:	f7ff ff1a 	bl	8001e9c <lis2dw12_read_reg>

  if (ret == 0)
 8002068:	b108      	cbz	r0, 800206e <lis2dw12_data_rate_get+0x18>
        break;
    }
  }

  return ret;
}
 800206a:	b003      	add	sp, #12
 800206c:	bd30      	pop	{r4, r5, pc}
    ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL3, (uint8_t *) &ctrl3, 1);
 800206e:	2301      	movs	r3, #1
 8002070:	466a      	mov	r2, sp
 8002072:	2122      	movs	r1, #34	; 0x22
 8002074:	4620      	mov	r0, r4
 8002076:	f7ff ff11 	bl	8001e9c <lis2dw12_read_reg>
    switch ((ctrl3.slp_mode << 4) + ctrl1.odr)
 800207a:	f89d 3000 	ldrb.w	r3, [sp]
 800207e:	f003 0203 	and.w	r2, r3, #3
 8002082:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8002086:	091b      	lsrs	r3, r3, #4
 8002088:	eb03 1302 	add.w	r3, r3, r2, lsl #4
 800208c:	2b32      	cmp	r3, #50	; 0x32
 800208e:	d83f      	bhi.n	8002110 <lis2dw12_data_rate_get+0xba>
 8002090:	e8df f003 	tbb	[pc, r3]
 8002094:	23201d1a 	.word	0x23201d1a
 8002098:	2f2c2926 	.word	0x2f2c2926
 800209c:	3e3e3532 	.word	0x3e3e3532
 80020a0:	3e3e3e3e 	.word	0x3e3e3e3e
 80020a4:	3e3b3e3e 	.word	0x3e3b3e3e
 80020a8:	3e3e3e3e 	.word	0x3e3e3e3e
 80020ac:	3e3e3e3e 	.word	0x3e3e3e3e
 80020b0:	3e3e3e3e 	.word	0x3e3e3e3e
 80020b4:	3e3e3e3e 	.word	0x3e3e3e3e
 80020b8:	3e3e3e3e 	.word	0x3e3e3e3e
 80020bc:	3e3e3e3e 	.word	0x3e3e3e3e
 80020c0:	3e3e3e3e 	.word	0x3e3e3e3e
 80020c4:	3e3e      	.short	0x3e3e
 80020c6:	38          	.byte	0x38
 80020c7:	00          	.byte	0x00
        *val = LIS2DW12_XL_ODR_OFF;
 80020c8:	2300      	movs	r3, #0
 80020ca:	702b      	strb	r3, [r5, #0]
        break;
 80020cc:	e7cd      	b.n	800206a <lis2dw12_data_rate_get+0x14>
        *val = LIS2DW12_XL_ODR_1Hz6_LP_ONLY;
 80020ce:	2301      	movs	r3, #1
 80020d0:	702b      	strb	r3, [r5, #0]
        break;
 80020d2:	e7ca      	b.n	800206a <lis2dw12_data_rate_get+0x14>
        *val = LIS2DW12_XL_ODR_12Hz5;
 80020d4:	2302      	movs	r3, #2
 80020d6:	702b      	strb	r3, [r5, #0]
        break;
 80020d8:	e7c7      	b.n	800206a <lis2dw12_data_rate_get+0x14>
        *val = LIS2DW12_XL_ODR_25Hz;
 80020da:	2303      	movs	r3, #3
 80020dc:	702b      	strb	r3, [r5, #0]
        break;
 80020de:	e7c4      	b.n	800206a <lis2dw12_data_rate_get+0x14>
        *val = LIS2DW12_XL_ODR_50Hz;
 80020e0:	2304      	movs	r3, #4
 80020e2:	702b      	strb	r3, [r5, #0]
        break;
 80020e4:	e7c1      	b.n	800206a <lis2dw12_data_rate_get+0x14>
        *val = LIS2DW12_XL_ODR_100Hz;
 80020e6:	2305      	movs	r3, #5
 80020e8:	702b      	strb	r3, [r5, #0]
        break;
 80020ea:	e7be      	b.n	800206a <lis2dw12_data_rate_get+0x14>
        *val = LIS2DW12_XL_ODR_200Hz;
 80020ec:	2306      	movs	r3, #6
 80020ee:	702b      	strb	r3, [r5, #0]
        break;
 80020f0:	e7bb      	b.n	800206a <lis2dw12_data_rate_get+0x14>
        *val = LIS2DW12_XL_ODR_400Hz;
 80020f2:	2307      	movs	r3, #7
 80020f4:	702b      	strb	r3, [r5, #0]
        break;
 80020f6:	e7b8      	b.n	800206a <lis2dw12_data_rate_get+0x14>
        *val = LIS2DW12_XL_ODR_800Hz;
 80020f8:	2308      	movs	r3, #8
 80020fa:	702b      	strb	r3, [r5, #0]
        break;
 80020fc:	e7b5      	b.n	800206a <lis2dw12_data_rate_get+0x14>
        *val = LIS2DW12_XL_ODR_1k6Hz;
 80020fe:	2309      	movs	r3, #9
 8002100:	702b      	strb	r3, [r5, #0]
        break;
 8002102:	e7b2      	b.n	800206a <lis2dw12_data_rate_get+0x14>
        *val = LIS2DW12_XL_SET_SW_TRIG;
 8002104:	2332      	movs	r3, #50	; 0x32
 8002106:	702b      	strb	r3, [r5, #0]
        break;
 8002108:	e7af      	b.n	800206a <lis2dw12_data_rate_get+0x14>
        *val = LIS2DW12_XL_SET_PIN_TRIG;
 800210a:	2312      	movs	r3, #18
 800210c:	702b      	strb	r3, [r5, #0]
        break;
 800210e:	e7ac      	b.n	800206a <lis2dw12_data_rate_get+0x14>
        *val = LIS2DW12_XL_ODR_OFF;
 8002110:	2300      	movs	r3, #0
 8002112:	702b      	strb	r3, [r5, #0]
  return ret;
 8002114:	e7a9      	b.n	800206a <lis2dw12_data_rate_get+0x14>

08002116 <lis2dw12_block_data_update_set>:
  * @param  val      change the values of bdu in reg CTRL2
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8002116:	b530      	push	{r4, r5, lr}
 8002118:	b083      	sub	sp, #12
 800211a:	4604      	mov	r4, r0
 800211c:	460d      	mov	r5, r1
  lis2dw12_ctrl2_t reg;
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL2, (uint8_t *) &reg, 1);
 800211e:	2301      	movs	r3, #1
 8002120:	aa01      	add	r2, sp, #4
 8002122:	2121      	movs	r1, #33	; 0x21
 8002124:	f7ff feba 	bl	8001e9c <lis2dw12_read_reg>

  if (ret == 0)
 8002128:	b108      	cbz	r0, 800212e <lis2dw12_block_data_update_set+0x18>
    reg.bdu = val;
    ret = lis2dw12_write_reg(ctx, LIS2DW12_CTRL2, (uint8_t *) &reg, 1);
  }

  return ret;
}
 800212a:	b003      	add	sp, #12
 800212c:	bd30      	pop	{r4, r5, pc}
    reg.bdu = val;
 800212e:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8002132:	f365 03c3 	bfi	r3, r5, #3, #1
 8002136:	f88d 3004 	strb.w	r3, [sp, #4]
    ret = lis2dw12_write_reg(ctx, LIS2DW12_CTRL2, (uint8_t *) &reg, 1);
 800213a:	2301      	movs	r3, #1
 800213c:	aa01      	add	r2, sp, #4
 800213e:	2121      	movs	r1, #33	; 0x21
 8002140:	4620      	mov	r0, r4
 8002142:	f7ff feb0 	bl	8001ea6 <lis2dw12_write_reg>
  return ret;
 8002146:	e7f0      	b.n	800212a <lis2dw12_block_data_update_set+0x14>

08002148 <lis2dw12_full_scale_set>:
  * @param  val      change the values of fs in reg CTRL6
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_full_scale_set(stmdev_ctx_t *ctx, lis2dw12_fs_t val)
{
 8002148:	b530      	push	{r4, r5, lr}
 800214a:	b083      	sub	sp, #12
 800214c:	4604      	mov	r4, r0
 800214e:	460d      	mov	r5, r1
  lis2dw12_ctrl6_t reg;
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL6, (uint8_t *) &reg, 1);
 8002150:	2301      	movs	r3, #1
 8002152:	aa01      	add	r2, sp, #4
 8002154:	2125      	movs	r1, #37	; 0x25
 8002156:	f7ff fea1 	bl	8001e9c <lis2dw12_read_reg>

  if (ret == 0)
 800215a:	b108      	cbz	r0, 8002160 <lis2dw12_full_scale_set+0x18>
    reg.fs = (uint8_t) val;
    ret = lis2dw12_write_reg(ctx, LIS2DW12_CTRL6, (uint8_t *) &reg, 1);
  }

  return ret;
}
 800215c:	b003      	add	sp, #12
 800215e:	bd30      	pop	{r4, r5, pc}
    reg.fs = (uint8_t) val;
 8002160:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8002164:	f365 1305 	bfi	r3, r5, #4, #2
 8002168:	f88d 3004 	strb.w	r3, [sp, #4]
    ret = lis2dw12_write_reg(ctx, LIS2DW12_CTRL6, (uint8_t *) &reg, 1);
 800216c:	2301      	movs	r3, #1
 800216e:	aa01      	add	r2, sp, #4
 8002170:	2125      	movs	r1, #37	; 0x25
 8002172:	4620      	mov	r0, r4
 8002174:	f7ff fe97 	bl	8001ea6 <lis2dw12_write_reg>
  return ret;
 8002178:	e7f0      	b.n	800215c <lis2dw12_full_scale_set+0x14>

0800217a <lis2dw12_full_scale_get>:
  * @param  val      Get the values of fs in reg CTRL6
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_full_scale_get(stmdev_ctx_t *ctx, lis2dw12_fs_t *val)
{
 800217a:	b510      	push	{r4, lr}
 800217c:	b082      	sub	sp, #8
 800217e:	460c      	mov	r4, r1
  lis2dw12_ctrl6_t reg;
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL6, (uint8_t *) &reg, 1);
 8002180:	2301      	movs	r3, #1
 8002182:	aa01      	add	r2, sp, #4
 8002184:	2125      	movs	r1, #37	; 0x25
 8002186:	f7ff fe89 	bl	8001e9c <lis2dw12_read_reg>

  switch (reg.fs)
 800218a:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800218e:	f3c3 1301 	ubfx	r3, r3, #4, #2
 8002192:	2b03      	cmp	r3, #3
 8002194:	d810      	bhi.n	80021b8 <lis2dw12_full_scale_get+0x3e>
 8002196:	e8df f003 	tbb	[pc, r3]
 800219a:	0602      	.short	0x0602
 800219c:	0c09      	.short	0x0c09
  {
    case LIS2DW12_2g:
      *val = LIS2DW12_2g;
 800219e:	2300      	movs	r3, #0
 80021a0:	7023      	strb	r3, [r4, #0]
      *val = LIS2DW12_2g;
      break;
  }

  return ret;
}
 80021a2:	b002      	add	sp, #8
 80021a4:	bd10      	pop	{r4, pc}
      *val = LIS2DW12_4g;
 80021a6:	2301      	movs	r3, #1
 80021a8:	7023      	strb	r3, [r4, #0]
      break;
 80021aa:	e7fa      	b.n	80021a2 <lis2dw12_full_scale_get+0x28>
      *val = LIS2DW12_8g;
 80021ac:	2302      	movs	r3, #2
 80021ae:	7023      	strb	r3, [r4, #0]
      break;
 80021b0:	e7f7      	b.n	80021a2 <lis2dw12_full_scale_get+0x28>
      *val = LIS2DW12_16g;
 80021b2:	2303      	movs	r3, #3
 80021b4:	7023      	strb	r3, [r4, #0]
      break;
 80021b6:	e7f4      	b.n	80021a2 <lis2dw12_full_scale_get+0x28>
      *val = LIS2DW12_2g;
 80021b8:	2300      	movs	r3, #0
 80021ba:	7023      	strb	r3, [r4, #0]
  return ret;
 80021bc:	e7f1      	b.n	80021a2 <lis2dw12_full_scale_get+0x28>

080021be <lis2dw12_acceleration_raw_get>:
  * @param  val      buffer that stores data read
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_acceleration_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 80021be:	b510      	push	{r4, lr}
 80021c0:	b082      	sub	sp, #8
 80021c2:	460c      	mov	r4, r1
  uint8_t buff[6];
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_OUT_X_L, buff, 6);
 80021c4:	2306      	movs	r3, #6
 80021c6:	466a      	mov	r2, sp
 80021c8:	2128      	movs	r1, #40	; 0x28
 80021ca:	f7ff fe67 	bl	8001e9c <lis2dw12_read_reg>
  val[0] = (int16_t)buff[1];
 80021ce:	f89d 2001 	ldrb.w	r2, [sp, #1]
 80021d2:	8022      	strh	r2, [r4, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 80021d4:	f89d 3000 	ldrb.w	r3, [sp]
 80021d8:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 80021dc:	8023      	strh	r3, [r4, #0]
  val[1] = (int16_t)buff[3];
 80021de:	f89d 2003 	ldrb.w	r2, [sp, #3]
 80021e2:	8062      	strh	r2, [r4, #2]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 80021e4:	f89d 3002 	ldrb.w	r3, [sp, #2]
 80021e8:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 80021ec:	8063      	strh	r3, [r4, #2]
  val[2] = (int16_t)buff[5];
 80021ee:	f89d 2005 	ldrb.w	r2, [sp, #5]
 80021f2:	80a2      	strh	r2, [r4, #4]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 80021f4:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80021f8:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 80021fc:	80a3      	strh	r3, [r4, #4]

  return ret;
}
 80021fe:	b002      	add	sp, #8
 8002200:	bd10      	pop	{r4, pc}

08002202 <lis2dw12_device_id_get>:
  * @param  buff     buffer that stores data read
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 8002202:	b508      	push	{r3, lr}
 8002204:	460a      	mov	r2, r1
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_WHO_AM_I, buff, 1);
 8002206:	2301      	movs	r3, #1
 8002208:	210f      	movs	r1, #15
 800220a:	f7ff fe47 	bl	8001e9c <lis2dw12_read_reg>

  return ret;
}
 800220e:	bd08      	pop	{r3, pc}

08002210 <lis2dw12_auto_increment_set>:
  * @param  val      change the values of if_add_inc in reg CTRL2
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_auto_increment_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8002210:	b530      	push	{r4, r5, lr}
 8002212:	b083      	sub	sp, #12
 8002214:	4604      	mov	r4, r0
 8002216:	460d      	mov	r5, r1
  lis2dw12_ctrl2_t reg;
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL2, (uint8_t *) &reg, 1);
 8002218:	2301      	movs	r3, #1
 800221a:	aa01      	add	r2, sp, #4
 800221c:	2121      	movs	r1, #33	; 0x21
 800221e:	f7ff fe3d 	bl	8001e9c <lis2dw12_read_reg>

  if (ret == 0)
 8002222:	b108      	cbz	r0, 8002228 <lis2dw12_auto_increment_set+0x18>
    reg.if_add_inc = val;
    ret = lis2dw12_write_reg(ctx, LIS2DW12_CTRL2, (uint8_t *) &reg, 1);
  }

  return ret;
}
 8002224:	b003      	add	sp, #12
 8002226:	bd30      	pop	{r4, r5, pc}
    reg.if_add_inc = val;
 8002228:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800222c:	f365 0382 	bfi	r3, r5, #2, #1
 8002230:	f88d 3004 	strb.w	r3, [sp, #4]
    ret = lis2dw12_write_reg(ctx, LIS2DW12_CTRL2, (uint8_t *) &reg, 1);
 8002234:	2301      	movs	r3, #1
 8002236:	aa01      	add	r2, sp, #4
 8002238:	2121      	movs	r1, #33	; 0x21
 800223a:	4620      	mov	r0, r4
 800223c:	f7ff fe33 	bl	8001ea6 <lis2dw12_write_reg>
  return ret;
 8002240:	e7f0      	b.n	8002224 <lis2dw12_auto_increment_set+0x14>

08002242 <lis2dw12_fifo_mode_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_fifo_mode_set(stmdev_ctx_t *ctx,
                               lis2dw12_fmode_t val)
{
 8002242:	b530      	push	{r4, r5, lr}
 8002244:	b083      	sub	sp, #12
 8002246:	4604      	mov	r4, r0
 8002248:	460d      	mov	r5, r1
  lis2dw12_fifo_ctrl_t reg;
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_FIFO_CTRL, (uint8_t *) &reg, 1);
 800224a:	2301      	movs	r3, #1
 800224c:	aa01      	add	r2, sp, #4
 800224e:	212e      	movs	r1, #46	; 0x2e
 8002250:	f7ff fe24 	bl	8001e9c <lis2dw12_read_reg>

  if (ret == 0)
 8002254:	b108      	cbz	r0, 800225a <lis2dw12_fifo_mode_set+0x18>
    reg.fmode = (uint8_t) val;
    ret = lis2dw12_write_reg(ctx, LIS2DW12_FIFO_CTRL, (uint8_t *) &reg, 1);
  }

  return ret;
}
 8002256:	b003      	add	sp, #12
 8002258:	bd30      	pop	{r4, r5, pc}
    reg.fmode = (uint8_t) val;
 800225a:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800225e:	f365 1347 	bfi	r3, r5, #5, #3
 8002262:	f88d 3004 	strb.w	r3, [sp, #4]
    ret = lis2dw12_write_reg(ctx, LIS2DW12_FIFO_CTRL, (uint8_t *) &reg, 1);
 8002266:	2301      	movs	r3, #1
 8002268:	aa01      	add	r2, sp, #4
 800226a:	212e      	movs	r1, #46	; 0x2e
 800226c:	4620      	mov	r0, r4
 800226e:	f7ff fe1a 	bl	8001ea6 <lis2dw12_write_reg>
  return ret;
 8002272:	e7f0      	b.n	8002256 <lis2dw12_fifo_mode_set+0x14>

08002274 <LIS2MDL_GetCapabilities>:
int32_t LIS2MDL_GetCapabilities(LIS2MDL_Object_t *pObj, LIS2MDL_Capabilities_t *Capabilities)
{
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  Capabilities->Acc          = 0;
 8002274:	2000      	movs	r0, #0
 8002276:	7008      	strb	r0, [r1, #0]
  Capabilities->Gyro         = 0;
 8002278:	7048      	strb	r0, [r1, #1]
  Capabilities->Magneto      = 1;
 800227a:	2301      	movs	r3, #1
 800227c:	708b      	strb	r3, [r1, #2]
  Capabilities->LowPower     = 0;
 800227e:	70c8      	strb	r0, [r1, #3]
  Capabilities->GyroMaxFS    = 0;
 8002280:	6048      	str	r0, [r1, #4]
  Capabilities->AccMaxFS     = 0;
 8002282:	6088      	str	r0, [r1, #8]
  Capabilities->MagMaxFS     = 50;
 8002284:	2332      	movs	r3, #50	; 0x32
 8002286:	60cb      	str	r3, [r1, #12]
  Capabilities->GyroMaxOdr   = 0.0f;
 8002288:	2300      	movs	r3, #0
 800228a:	610b      	str	r3, [r1, #16]
  Capabilities->AccMaxOdr    = 0.0f;
 800228c:	614b      	str	r3, [r1, #20]
  Capabilities->MagMaxOdr    = 100.0f;
 800228e:	4b01      	ldr	r3, [pc, #4]	; (8002294 <LIS2MDL_GetCapabilities+0x20>)
 8002290:	618b      	str	r3, [r1, #24]
  return LIS2MDL_OK;
}
 8002292:	4770      	bx	lr
 8002294:	42c80000 	.word	0x42c80000

08002298 <LIS2MDL_MAG_GetSensitivity>:
  * @param  Sensitivity pointer
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_MAG_GetSensitivity(LIS2MDL_Object_t *pObj, float *Sensitivity)
{
  *Sensitivity = LIS2MDL_MAG_SENSITIVITY_FS_50GAUSS;
 8002298:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 800229c:	600b      	str	r3, [r1, #0]

  return LIS2MDL_OK;
}
 800229e:	2000      	movs	r0, #0
 80022a0:	4770      	bx	lr

080022a2 <LIS2MDL_MAG_GetFullScale>:
  * @param  FullScale pointer where the full scale is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_MAG_GetFullScale(LIS2MDL_Object_t *pObj, int32_t *FullScale)
{
  *FullScale = 50;
 80022a2:	2332      	movs	r3, #50	; 0x32
 80022a4:	600b      	str	r3, [r1, #0]

  return LIS2MDL_OK;
}
 80022a6:	2000      	movs	r0, #0
 80022a8:	4770      	bx	lr

080022aa <LIS2MDL_MAG_SetFullScale>:
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_MAG_SetFullScale(LIS2MDL_Object_t *pObj, int32_t FullScale)
{
  return LIS2MDL_OK;
}
 80022aa:	2000      	movs	r0, #0
 80022ac:	4770      	bx	lr

080022ae <ReadMagRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t ReadMagRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 80022ae:	b510      	push	{r4, lr}
  LIS2MDL_Object_t *pObj = (LIS2MDL_Object_t *)Handle;

  if (pObj->IO.BusType == LIS2MDL_I2C_BUS) /* I2C */
 80022b0:	6884      	ldr	r4, [r0, #8]
 80022b2:	b13c      	cbz	r4, 80022c4 <ReadMagRegWrap+0x16>
  {
    /* Enable Multi-byte read */
    return pObj->IO.ReadReg(pObj->IO.Address, (Reg | 0x80U), pData, Length);
  }
  else if (pObj->IO.BusType == LSM6DSOX_SENSORHUB_LIS2MDL_I2C_BUS) /* LSM6DSOX SensorHub with LIS2MDL example */
 80022b4:	2c03      	cmp	r4, #3
 80022b6:	d00b      	beq.n	80022d0 <ReadMagRegWrap+0x22>
    return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
  }
  else   /* SPI 3-Wires or SPI 4-Wires */
  {
    /* Enable Multi-byte read */
    return pObj->IO.ReadReg(pObj->IO.Address, (Reg | 0x40U), pData, Length);
 80022b8:	6944      	ldr	r4, [r0, #20]
 80022ba:	f041 0140 	orr.w	r1, r1, #64	; 0x40
 80022be:	7b00      	ldrb	r0, [r0, #12]
 80022c0:	47a0      	blx	r4
  }
}
 80022c2:	bd10      	pop	{r4, pc}
    return pObj->IO.ReadReg(pObj->IO.Address, (Reg | 0x80U), pData, Length);
 80022c4:	6944      	ldr	r4, [r0, #20]
 80022c6:	f041 0180 	orr.w	r1, r1, #128	; 0x80
 80022ca:	7b00      	ldrb	r0, [r0, #12]
 80022cc:	47a0      	blx	r4
 80022ce:	e7f8      	b.n	80022c2 <ReadMagRegWrap+0x14>
    return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 80022d0:	6944      	ldr	r4, [r0, #20]
 80022d2:	7b00      	ldrb	r0, [r0, #12]
 80022d4:	47a0      	blx	r4
 80022d6:	e7f4      	b.n	80022c2 <ReadMagRegWrap+0x14>

080022d8 <WriteMagRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t WriteMagRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 80022d8:	b510      	push	{r4, lr}
  LIS2MDL_Object_t *pObj = (LIS2MDL_Object_t *)Handle;

  if (pObj->IO.BusType == LIS2MDL_I2C_BUS) /* I2C */
 80022da:	6884      	ldr	r4, [r0, #8]
 80022dc:	b13c      	cbz	r4, 80022ee <WriteMagRegWrap+0x16>
  {
    /* Enable Multi-byte write */
    return pObj->IO.WriteReg(pObj->IO.Address, (Reg | 0x80U), pData, Length);
  }
  else if (pObj->IO.BusType == LSM6DSOX_SENSORHUB_LIS2MDL_I2C_BUS) /* LSM6DSOX SensorHub with LIS2MDL example */
 80022de:	2c03      	cmp	r4, #3
 80022e0:	d00b      	beq.n	80022fa <WriteMagRegWrap+0x22>
    return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
  }
  else   /* SPI 3-Wires or SPI 4-Wires */
  {
    /* Enable Multi-byte write */
    return pObj->IO.WriteReg(pObj->IO.Address, (Reg | 0x40U), pData, Length);
 80022e2:	6904      	ldr	r4, [r0, #16]
 80022e4:	f041 0140 	orr.w	r1, r1, #64	; 0x40
 80022e8:	7b00      	ldrb	r0, [r0, #12]
 80022ea:	47a0      	blx	r4
  }
}
 80022ec:	bd10      	pop	{r4, pc}
    return pObj->IO.WriteReg(pObj->IO.Address, (Reg | 0x80U), pData, Length);
 80022ee:	6904      	ldr	r4, [r0, #16]
 80022f0:	f041 0180 	orr.w	r1, r1, #128	; 0x80
 80022f4:	7b00      	ldrb	r0, [r0, #12]
 80022f6:	47a0      	blx	r4
 80022f8:	e7f8      	b.n	80022ec <WriteMagRegWrap+0x14>
    return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 80022fa:	6904      	ldr	r4, [r0, #16]
 80022fc:	7b00      	ldrb	r0, [r0, #12]
 80022fe:	47a0      	blx	r4
 8002300:	e7f4      	b.n	80022ec <WriteMagRegWrap+0x14>

08002302 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData>:
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData(LIS2MDL_Object_t *pObj, uint8_t Reg, uint8_t *pData,
                                                     uint16_t Length)
{
 8002302:	b570      	push	{r4, r5, r6, lr}
 8002304:	b086      	sub	sp, #24
 8002306:	4616      	mov	r6, r2
 8002308:	461d      	mov	r5, r3
 800230a:	f88d 1007 	strb.w	r1, [sp, #7]
  uint8_t lsm6dsox_func_cfg_access = 0x01U;
  uint8_t shub_reg_access_en = 0x40U;
 800230e:	2340      	movs	r3, #64	; 0x40
 8002310:	f88d 3017 	strb.w	r3, [sp, #23]
  uint8_t shub_reg_access_dis = 0x00U;
 8002314:	2300      	movs	r3, #0
 8002316:	f88d 3016 	strb.w	r3, [sp, #22]
  uint8_t ext_sens_addr_read = LIS2MDL_I2C_ADD | 0x01U;
 800231a:	233d      	movs	r3, #61	; 0x3d
 800231c:	f88d 3015 	strb.w	r3, [sp, #21]
  uint8_t slv0_add = 0x15U;
  uint8_t slv0_subadd = 0x16U;
  uint8_t slave0_config = 0x17U;
  uint8_t master_config = 0x14U;
  uint8_t write_once_i2c_en = 0x44U;
 8002320:	2344      	movs	r3, #68	; 0x44
 8002322:	f88d 3014 	strb.w	r3, [sp, #20]
  uint8_t status_master_mainpage = 0x39U;
  uint8_t sens_hub_endop = 0x01U;
  uint8_t lsm6dsox_outx_h_a = 0x29U;
  uint8_t lsm6dsox_status_reg = 0x1EU;
  uint8_t xlda = 0x01U;
  uint8_t len = (uint8_t)Length;
 8002326:	f88d 5013 	strb.w	r5, [sp, #19]
  uint8_t lsm6dsox_xl_odr_104hz = 0x40U;
  uint8_t data;
  uint8_t data_array[6];

  /* Enable access to sensor hub registers */
  if (lis2mdl_write_reg(&(pObj->Ctx), lsm6dsox_func_cfg_access, &shub_reg_access_en, 1) != LIS2MDL_OK)
 800232a:	f100 0420 	add.w	r4, r0, #32
 800232e:	2301      	movs	r3, #1
 8002330:	f10d 0217 	add.w	r2, sp, #23
 8002334:	4619      	mov	r1, r3
 8002336:	4620      	mov	r0, r4
 8002338:	f000 fbb7 	bl	8002aaa <lis2mdl_write_reg>
 800233c:	2800      	cmp	r0, #0
 800233e:	f040 8081 	bne.w	8002444 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x142>
  {
    return LIS2MDL_ERROR;
  }

  /* Configure external device address, Enable read operation (rw_0 = 1) */
  if (lis2mdl_write_reg(&(pObj->Ctx), slv0_add, &ext_sens_addr_read, 1) != LIS2MDL_OK)
 8002342:	2301      	movs	r3, #1
 8002344:	f10d 0215 	add.w	r2, sp, #21
 8002348:	2115      	movs	r1, #21
 800234a:	4620      	mov	r0, r4
 800234c:	f000 fbad 	bl	8002aaa <lis2mdl_write_reg>
 8002350:	2800      	cmp	r0, #0
 8002352:	d17a      	bne.n	800244a <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x148>
  {
    return LIS2MDL_ERROR;
  }

  /* Configure address of the LIS2MDL register to be read */
  if (lis2mdl_write_reg(&(pObj->Ctx), slv0_subadd, &Reg, 1) != LIS2MDL_OK)
 8002354:	2301      	movs	r3, #1
 8002356:	f10d 0207 	add.w	r2, sp, #7
 800235a:	2116      	movs	r1, #22
 800235c:	4620      	mov	r0, r4
 800235e:	f000 fba4 	bl	8002aaa <lis2mdl_write_reg>
 8002362:	2800      	cmp	r0, #0
 8002364:	d174      	bne.n	8002450 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x14e>
  {
    return LIS2MDL_ERROR;
  }

  /* Read required number of bytes (up to 6), SHUB_ODR = 104 Hz */
  if (lis2mdl_write_reg(&(pObj->Ctx), slave0_config, &len, 1) != LIS2MDL_OK)
 8002366:	2301      	movs	r3, #1
 8002368:	f10d 0213 	add.w	r2, sp, #19
 800236c:	2117      	movs	r1, #23
 800236e:	4620      	mov	r0, r4
 8002370:	f000 fb9b 	bl	8002aaa <lis2mdl_write_reg>
 8002374:	2800      	cmp	r0, #0
 8002376:	d16e      	bne.n	8002456 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x154>
  {
    return LIS2MDL_ERROR;
  }

  /* WRITE_ONCE is mandatory for read, I2C master enabled using slave 0, I2C pull-ups disabled */
  if (lis2mdl_write_reg(&(pObj->Ctx), master_config, &write_once_i2c_en, 1) != LIS2MDL_OK)
 8002378:	2301      	movs	r3, #1
 800237a:	aa05      	add	r2, sp, #20
 800237c:	2114      	movs	r1, #20
 800237e:	4620      	mov	r0, r4
 8002380:	f000 fb93 	bl	8002aaa <lis2mdl_write_reg>
 8002384:	2800      	cmp	r0, #0
 8002386:	d169      	bne.n	800245c <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x15a>
  {
    return LIS2MDL_ERROR;
  }

  /* Disable access to sensor hub registers */
  if (lis2mdl_write_reg(&(pObj->Ctx), lsm6dsox_func_cfg_access, &shub_reg_access_dis, 1) != LIS2MDL_OK)
 8002388:	2301      	movs	r3, #1
 800238a:	f10d 0216 	add.w	r2, sp, #22
 800238e:	4619      	mov	r1, r3
 8002390:	4620      	mov	r0, r4
 8002392:	f000 fb8a 	bl	8002aaa <lis2mdl_write_reg>
 8002396:	2800      	cmp	r0, #0
 8002398:	d163      	bne.n	8002462 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x160>
  {
    return LIS2MDL_ERROR;
  }

  /* Read LSM6DSOX ODR */
  if (lis2mdl_read_reg(&(pObj->Ctx), lsm6dsox_ctrl1_xl, &lsm6dsox_xl_prev_odr, 1) != LIS2MDL_OK)
 800239a:	2301      	movs	r3, #1
 800239c:	f10d 0212 	add.w	r2, sp, #18
 80023a0:	2110      	movs	r1, #16
 80023a2:	4620      	mov	r0, r4
 80023a4:	f000 fb7c 	bl	8002aa0 <lis2mdl_read_reg>
 80023a8:	2800      	cmp	r0, #0
 80023aa:	d15d      	bne.n	8002468 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x166>
  {
    return LIS2MDL_ERROR;
  }

  /* Set XL_ODR_104HZ if the accelerometer is disabled */
  if (lsm6dsox_xl_prev_odr == lsm6dsox_xl_odr_off)
 80023ac:	f89d 3012 	ldrb.w	r3, [sp, #18]
 80023b0:	b913      	cbnz	r3, 80023b8 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0xb6>
  {
    lsm6dsox_xl_prev_odr = lsm6dsox_xl_odr_104hz;
 80023b2:	2340      	movs	r3, #64	; 0x40
 80023b4:	f88d 3012 	strb.w	r3, [sp, #18]
  }

  /* Enable accelerometer to trigger Sensor Hub operation */
  if (lis2mdl_write_reg(&(pObj->Ctx), lsm6dsox_ctrl1_xl, &lsm6dsox_xl_prev_odr, 1) != LIS2MDL_OK)
 80023b8:	2301      	movs	r3, #1
 80023ba:	f10d 0212 	add.w	r2, sp, #18
 80023be:	2110      	movs	r1, #16
 80023c0:	4620      	mov	r0, r4
 80023c2:	f000 fb72 	bl	8002aaa <lis2mdl_write_reg>
 80023c6:	2800      	cmp	r0, #0
 80023c8:	d151      	bne.n	800246e <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x16c>
  {
    return LIS2MDL_ERROR;
  }

  /* Read ACC data starting from LSM6DSOX OUTX_H_A register to clear accelerometer data-ready XLDA */
  if (lis2mdl_read_reg(&(pObj->Ctx), lsm6dsox_outx_h_a, data_array, 6) != LIS2MDL_OK)
 80023ca:	2306      	movs	r3, #6
 80023cc:	aa02      	add	r2, sp, #8
 80023ce:	2129      	movs	r1, #41	; 0x29
 80023d0:	4620      	mov	r0, r4
 80023d2:	f000 fb65 	bl	8002aa0 <lis2mdl_read_reg>
 80023d6:	2800      	cmp	r0, #0
 80023d8:	d14c      	bne.n	8002474 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x172>
  }

  /* Poll LSM6DSOX LSM6DSOX_STATUS_REG until XLDA = 1 (Wait for sensor hub trigger) */
  do
  {
    if (lis2mdl_read_reg(&(pObj->Ctx), lsm6dsox_status_reg, &data, 1) != LIS2MDL_OK)
 80023da:	2301      	movs	r3, #1
 80023dc:	f10d 0211 	add.w	r2, sp, #17
 80023e0:	211e      	movs	r1, #30
 80023e2:	4620      	mov	r0, r4
 80023e4:	f000 fb5c 	bl	8002aa0 <lis2mdl_read_reg>
 80023e8:	2800      	cmp	r0, #0
 80023ea:	d146      	bne.n	800247a <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x178>
    {
      return LIS2MDL_ERROR;
    }
  } while ((data & xlda) != xlda);
 80023ec:	f89d 1011 	ldrb.w	r1, [sp, #17]
 80023f0:	f011 0f01 	tst.w	r1, #1
 80023f4:	d0f1      	beq.n	80023da <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0xd8>

  /* Poll LSM6DSOX SensorHub SENS_HUB_ENDOP bit in STATUS_MASTER_MAINPAGE reg until the end of SW write operations */
  do
  {
    if (lis2mdl_read_reg(&(pObj->Ctx), status_master_mainpage, &data, 1) != LIS2MDL_OK)
 80023f6:	2301      	movs	r3, #1
 80023f8:	f10d 0211 	add.w	r2, sp, #17
 80023fc:	2139      	movs	r1, #57	; 0x39
 80023fe:	4620      	mov	r0, r4
 8002400:	f000 fb4e 	bl	8002aa0 <lis2mdl_read_reg>
 8002404:	bbe8      	cbnz	r0, 8002482 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x180>
    {
      return LIS2MDL_ERROR;
    }
  } while ((data & sens_hub_endop) != sens_hub_endop);
 8002406:	f89d 1011 	ldrb.w	r1, [sp, #17]
 800240a:	f011 0f01 	tst.w	r1, #1
 800240e:	d0f2      	beq.n	80023f6 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0xf4>

  /* Enable access to sensor hub registers */
  if (lis2mdl_write_reg(&(pObj->Ctx), lsm6dsox_func_cfg_access, &shub_reg_access_en, 1) != LIS2MDL_OK)
 8002410:	2301      	movs	r3, #1
 8002412:	f10d 0217 	add.w	r2, sp, #23
 8002416:	4619      	mov	r1, r3
 8002418:	4620      	mov	r0, r4
 800241a:	f000 fb46 	bl	8002aaa <lis2mdl_write_reg>
 800241e:	bb98      	cbnz	r0, 8002488 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x186>
  {
    return LIS2MDL_ERROR;
  }

  /* Read data from LSM6DSOX SensorHub regs containing values from required LIS2MDL regs */
  if (lis2mdl_read_reg(&(pObj->Ctx), sensor_hub_1, pData, Length) != LIS2MDL_OK)
 8002420:	462b      	mov	r3, r5
 8002422:	4632      	mov	r2, r6
 8002424:	2102      	movs	r1, #2
 8002426:	4620      	mov	r0, r4
 8002428:	f000 fb3a 	bl	8002aa0 <lis2mdl_read_reg>
 800242c:	bb78      	cbnz	r0, 800248e <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x18c>
  {
    return LIS2MDL_ERROR;
  }

  /* Disable access to sensor hub registers */
  if (lis2mdl_write_reg(&(pObj->Ctx), lsm6dsox_func_cfg_access, &shub_reg_access_dis, 1) != LIS2MDL_OK)
 800242e:	2301      	movs	r3, #1
 8002430:	f10d 0216 	add.w	r2, sp, #22
 8002434:	4619      	mov	r1, r3
 8002436:	4620      	mov	r0, r4
 8002438:	f000 fb37 	bl	8002aaa <lis2mdl_write_reg>
 800243c:	b1f8      	cbz	r0, 800247e <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x17c>
  {
    return LIS2MDL_ERROR;
 800243e:	f04f 30ff 	mov.w	r0, #4294967295
 8002442:	e01c      	b.n	800247e <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x17c>
    return LIS2MDL_ERROR;
 8002444:	f04f 30ff 	mov.w	r0, #4294967295
 8002448:	e019      	b.n	800247e <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x17c>
    return LIS2MDL_ERROR;
 800244a:	f04f 30ff 	mov.w	r0, #4294967295
 800244e:	e016      	b.n	800247e <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x17c>
    return LIS2MDL_ERROR;
 8002450:	f04f 30ff 	mov.w	r0, #4294967295
 8002454:	e013      	b.n	800247e <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x17c>
    return LIS2MDL_ERROR;
 8002456:	f04f 30ff 	mov.w	r0, #4294967295
 800245a:	e010      	b.n	800247e <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x17c>
    return LIS2MDL_ERROR;
 800245c:	f04f 30ff 	mov.w	r0, #4294967295
 8002460:	e00d      	b.n	800247e <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x17c>
    return LIS2MDL_ERROR;
 8002462:	f04f 30ff 	mov.w	r0, #4294967295
 8002466:	e00a      	b.n	800247e <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x17c>
    return LIS2MDL_ERROR;
 8002468:	f04f 30ff 	mov.w	r0, #4294967295
 800246c:	e007      	b.n	800247e <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x17c>
    return LIS2MDL_ERROR;
 800246e:	f04f 30ff 	mov.w	r0, #4294967295
 8002472:	e004      	b.n	800247e <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x17c>
    return LIS2MDL_ERROR;
 8002474:	f04f 30ff 	mov.w	r0, #4294967295
 8002478:	e001      	b.n	800247e <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x17c>
      return LIS2MDL_ERROR;
 800247a:	f04f 30ff 	mov.w	r0, #4294967295
  }

  return LIS2MDL_OK;
}
 800247e:	b006      	add	sp, #24
 8002480:	bd70      	pop	{r4, r5, r6, pc}
      return LIS2MDL_ERROR;
 8002482:	f04f 30ff 	mov.w	r0, #4294967295
 8002486:	e7fa      	b.n	800247e <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x17c>
    return LIS2MDL_ERROR;
 8002488:	f04f 30ff 	mov.w	r0, #4294967295
 800248c:	e7f7      	b.n	800247e <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x17c>
    return LIS2MDL_ERROR;
 800248e:	f04f 30ff 	mov.w	r0, #4294967295
 8002492:	e7f4      	b.n	800247e <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x17c>

08002494 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData>:
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData(LIS2MDL_Object_t *pObj, uint8_t Reg, uint8_t *pData,
                                                      uint16_t Length)
{
 8002494:	b530      	push	{r4, r5, lr}
 8002496:	b087      	sub	sp, #28
 8002498:	4615      	mov	r5, r2
 800249a:	f88d 1007 	strb.w	r1, [sp, #7]
  uint8_t lsm6dsox_func_cfg_access = 0x01U;
  uint8_t shub_reg_access_en = 0x40U;
 800249e:	2340      	movs	r3, #64	; 0x40
 80024a0:	f88d 3017 	strb.w	r3, [sp, #23]
  uint8_t shub_reg_access_dis = 0x00U;
 80024a4:	2300      	movs	r3, #0
 80024a6:	f88d 3016 	strb.w	r3, [sp, #22]
  uint8_t ext_sens_addr_write = LIS2MDL_I2C_ADD & 0xFEU;
 80024aa:	223c      	movs	r2, #60	; 0x3c
 80024ac:	f88d 2015 	strb.w	r2, [sp, #21]
  uint8_t slv0_add = 0x15U;
  uint8_t slv0_subadd = 0x16U;
  uint8_t slave0_config = 0x17U;
  uint8_t shub_odr_104 = 0x00U;
 80024b0:	f88d 3014 	strb.w	r3, [sp, #20]
  uint8_t master_config = 0x14U;
  uint8_t write_once_i2c_en = 0x44U;
 80024b4:	2344      	movs	r3, #68	; 0x44
 80024b6:	f88d 3013 	strb.w	r3, [sp, #19]
  uint8_t datawrite_slv0 = 0x0EU;
  uint8_t data;
  uint8_t data_array[6];

  /* Enable access to sensor hub registers */
  if (lis2mdl_write_reg(&(pObj->Ctx), lsm6dsox_func_cfg_access, &shub_reg_access_en, 1) != LIS2MDL_OK)
 80024ba:	f100 0420 	add.w	r4, r0, #32
 80024be:	2301      	movs	r3, #1
 80024c0:	f10d 0217 	add.w	r2, sp, #23
 80024c4:	4619      	mov	r1, r3
 80024c6:	4620      	mov	r0, r4
 80024c8:	f000 faef 	bl	8002aaa <lis2mdl_write_reg>
 80024cc:	2800      	cmp	r0, #0
 80024ce:	d16c      	bne.n	80025aa <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x116>
  {
    return LIS2MDL_ERROR;
  }

  /* Configure external device address, Enable write operation (rw_0 = 0) */
  if (lis2mdl_write_reg(&(pObj->Ctx), slv0_add, &ext_sens_addr_write, 1) != LIS2MDL_OK)
 80024d0:	2301      	movs	r3, #1
 80024d2:	f10d 0215 	add.w	r2, sp, #21
 80024d6:	2115      	movs	r1, #21
 80024d8:	4620      	mov	r0, r4
 80024da:	f000 fae6 	bl	8002aaa <lis2mdl_write_reg>
 80024de:	2800      	cmp	r0, #0
 80024e0:	d166      	bne.n	80025b0 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x11c>
  {
    return LIS2MDL_ERROR;
  }

  /* Configure address of the LIS2MDL register to be written to */
  if (lis2mdl_write_reg(&(pObj->Ctx), slv0_subadd, &Reg, 1) != LIS2MDL_OK)
 80024e2:	2301      	movs	r3, #1
 80024e4:	f10d 0207 	add.w	r2, sp, #7
 80024e8:	2116      	movs	r1, #22
 80024ea:	4620      	mov	r0, r4
 80024ec:	f000 fadd 	bl	8002aaa <lis2mdl_write_reg>
 80024f0:	2800      	cmp	r0, #0
 80024f2:	d160      	bne.n	80025b6 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x122>
  {
    return LIS2MDL_ERROR;
  }

  /* Set SHUB_ODR = 104 Hz */
  if (lis2mdl_write_reg(&(pObj->Ctx), slave0_config, &shub_odr_104, 1) != LIS2MDL_OK)
 80024f4:	2301      	movs	r3, #1
 80024f6:	aa05      	add	r2, sp, #20
 80024f8:	2117      	movs	r1, #23
 80024fa:	4620      	mov	r0, r4
 80024fc:	f000 fad5 	bl	8002aaa <lis2mdl_write_reg>
 8002500:	2800      	cmp	r0, #0
 8002502:	d15b      	bne.n	80025bc <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x128>
  {
    return LIS2MDL_ERROR;
  }

  /* Store data to be written to LIS2MDL in LSM6DSOX SH reg */
  if (lis2mdl_write_reg(&(pObj->Ctx), datawrite_slv0, pData, 1) != LIS2MDL_OK)
 8002504:	2301      	movs	r3, #1
 8002506:	462a      	mov	r2, r5
 8002508:	210e      	movs	r1, #14
 800250a:	4620      	mov	r0, r4
 800250c:	f000 facd 	bl	8002aaa <lis2mdl_write_reg>
 8002510:	2800      	cmp	r0, #0
 8002512:	d156      	bne.n	80025c2 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x12e>
  {
    return LIS2MDL_ERROR;
  }

  /* WRITE_ONCE enabled for single write, I2C master enabled using slave 0, I2C pull-ups disabled */
  if (lis2mdl_write_reg(&(pObj->Ctx), master_config, &write_once_i2c_en, 1) != LIS2MDL_OK)
 8002514:	2301      	movs	r3, #1
 8002516:	f10d 0213 	add.w	r2, sp, #19
 800251a:	2114      	movs	r1, #20
 800251c:	4620      	mov	r0, r4
 800251e:	f000 fac4 	bl	8002aaa <lis2mdl_write_reg>
 8002522:	2800      	cmp	r0, #0
 8002524:	d150      	bne.n	80025c8 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x134>
  {
    return LIS2MDL_ERROR;
  }

  /* Disable access to sensor hub registers */
  if (lis2mdl_write_reg(&(pObj->Ctx), lsm6dsox_func_cfg_access, &shub_reg_access_dis, 1) != LIS2MDL_OK)
 8002526:	2301      	movs	r3, #1
 8002528:	f10d 0216 	add.w	r2, sp, #22
 800252c:	4619      	mov	r1, r3
 800252e:	4620      	mov	r0, r4
 8002530:	f000 fabb 	bl	8002aaa <lis2mdl_write_reg>
 8002534:	2800      	cmp	r0, #0
 8002536:	d14a      	bne.n	80025ce <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x13a>
  {
    return LIS2MDL_ERROR;
  }

  /* Read LSM6DSOX ODR */
  if (lis2mdl_read_reg(&(pObj->Ctx), lsm6dsox_ctrl1_xl, &lsm6dsox_xl_prev_odr, 1) != LIS2MDL_OK)
 8002538:	2301      	movs	r3, #1
 800253a:	f10d 0212 	add.w	r2, sp, #18
 800253e:	2110      	movs	r1, #16
 8002540:	4620      	mov	r0, r4
 8002542:	f000 faad 	bl	8002aa0 <lis2mdl_read_reg>
 8002546:	2800      	cmp	r0, #0
 8002548:	d144      	bne.n	80025d4 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x140>
  {
    return LIS2MDL_ERROR;
  }

  /* Set XL_ODR_104HZ if the accelerometer is disabled */
  if (lsm6dsox_xl_prev_odr == lsm6dsox_xl_odr_off)
 800254a:	f89d 3012 	ldrb.w	r3, [sp, #18]
 800254e:	b913      	cbnz	r3, 8002556 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0xc2>
  {
    lsm6dsox_xl_prev_odr = lsm6dsox_xl_odr_104hz;
 8002550:	2340      	movs	r3, #64	; 0x40
 8002552:	f88d 3012 	strb.w	r3, [sp, #18]
  }

  /* Enable accelerometer to trigger Sensor Hub operation */
  if (lis2mdl_write_reg(&(pObj->Ctx), lsm6dsox_ctrl1_xl, &lsm6dsox_xl_prev_odr, 1) != LIS2MDL_OK)
 8002556:	2301      	movs	r3, #1
 8002558:	f10d 0212 	add.w	r2, sp, #18
 800255c:	2110      	movs	r1, #16
 800255e:	4620      	mov	r0, r4
 8002560:	f000 faa3 	bl	8002aaa <lis2mdl_write_reg>
 8002564:	bbc8      	cbnz	r0, 80025da <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x146>
  {
    return LIS2MDL_ERROR;
  }

  /* Read ACC data starting from LSM6DSOX OUTX_H_A register to clear accelerometer data-ready XLDA */
  if (lis2mdl_read_reg(&(pObj->Ctx), lsm6dsox_outx_h_a, data_array, 6) != LIS2MDL_OK)
 8002566:	2306      	movs	r3, #6
 8002568:	aa02      	add	r2, sp, #8
 800256a:	2129      	movs	r1, #41	; 0x29
 800256c:	4620      	mov	r0, r4
 800256e:	f000 fa97 	bl	8002aa0 <lis2mdl_read_reg>
 8002572:	bba8      	cbnz	r0, 80025e0 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x14c>
  }

  /* Poll LSM6DSOX LSM6DSOX_STATUS_REG until XLDA = 1 (Wait for sensor hub trigger) */
  do
  {
    if (lis2mdl_read_reg(&(pObj->Ctx), lsm6dsox_status_reg, &data, 1) != LIS2MDL_OK)
 8002574:	2301      	movs	r3, #1
 8002576:	f10d 0211 	add.w	r2, sp, #17
 800257a:	211e      	movs	r1, #30
 800257c:	4620      	mov	r0, r4
 800257e:	f000 fa8f 	bl	8002aa0 <lis2mdl_read_reg>
 8002582:	bb80      	cbnz	r0, 80025e6 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x152>
    {
      return LIS2MDL_ERROR;
    }
  } while ((data & xlda) != xlda);
 8002584:	f89d 3011 	ldrb.w	r3, [sp, #17]
 8002588:	f013 0f01 	tst.w	r3, #1
 800258c:	d0f2      	beq.n	8002574 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0xe0>

  /* Poll LSM6DSOX SensorHub WR_ONCE_DONE bit in STATUS_MASTER_MAINPAGE reg until the end of SW write operations */
  do
  {
    if (lis2mdl_read_reg(&(pObj->Ctx), status_master_mainpage, &data, 1) != LIS2MDL_OK)
 800258e:	2301      	movs	r3, #1
 8002590:	f10d 0211 	add.w	r2, sp, #17
 8002594:	2139      	movs	r1, #57	; 0x39
 8002596:	4620      	mov	r0, r4
 8002598:	f000 fa82 	bl	8002aa0 <lis2mdl_read_reg>
 800259c:	4602      	mov	r2, r0
 800259e:	bb38      	cbnz	r0, 80025f0 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x15c>
    {
      return LIS2MDL_ERROR;
    }
  } while ((data & wr_once_done) != wr_once_done);
 80025a0:	f99d 3011 	ldrsb.w	r3, [sp, #17]
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	daf2      	bge.n	800258e <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0xfa>
 80025a8:	e01f      	b.n	80025ea <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x156>
    return LIS2MDL_ERROR;
 80025aa:	f04f 32ff 	mov.w	r2, #4294967295
 80025ae:	e01c      	b.n	80025ea <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x156>
    return LIS2MDL_ERROR;
 80025b0:	f04f 32ff 	mov.w	r2, #4294967295
 80025b4:	e019      	b.n	80025ea <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x156>
    return LIS2MDL_ERROR;
 80025b6:	f04f 32ff 	mov.w	r2, #4294967295
 80025ba:	e016      	b.n	80025ea <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x156>
    return LIS2MDL_ERROR;
 80025bc:	f04f 32ff 	mov.w	r2, #4294967295
 80025c0:	e013      	b.n	80025ea <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x156>
    return LIS2MDL_ERROR;
 80025c2:	f04f 32ff 	mov.w	r2, #4294967295
 80025c6:	e010      	b.n	80025ea <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x156>
    return LIS2MDL_ERROR;
 80025c8:	f04f 32ff 	mov.w	r2, #4294967295
 80025cc:	e00d      	b.n	80025ea <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x156>
    return LIS2MDL_ERROR;
 80025ce:	f04f 32ff 	mov.w	r2, #4294967295
 80025d2:	e00a      	b.n	80025ea <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x156>
    return LIS2MDL_ERROR;
 80025d4:	f04f 32ff 	mov.w	r2, #4294967295
 80025d8:	e007      	b.n	80025ea <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x156>
    return LIS2MDL_ERROR;
 80025da:	f04f 32ff 	mov.w	r2, #4294967295
 80025de:	e004      	b.n	80025ea <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x156>
    return LIS2MDL_ERROR;
 80025e0:	f04f 32ff 	mov.w	r2, #4294967295
 80025e4:	e001      	b.n	80025ea <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x156>
      return LIS2MDL_ERROR;
 80025e6:	f04f 32ff 	mov.w	r2, #4294967295

  return LIS2MDL_OK;
}
 80025ea:	4610      	mov	r0, r2
 80025ec:	b007      	add	sp, #28
 80025ee:	bd30      	pop	{r4, r5, pc}
      return LIS2MDL_ERROR;
 80025f0:	f04f 32ff 	mov.w	r2, #4294967295
 80025f4:	e7f9      	b.n	80025ea <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x156>

080025f6 <LIS2MDL_Init>:
{
 80025f6:	b530      	push	{r4, r5, lr}
 80025f8:	b083      	sub	sp, #12
 80025fa:	4604      	mov	r4, r0
  if (pObj->IO.BusType == LSM6DSOX_SENSORHUB_LIS2MDL_I2C_BUS) /* LSM6DSOX SensorHub with LIS2MDL example */
 80025fc:	6883      	ldr	r3, [r0, #8]
 80025fe:	2b03      	cmp	r3, #3
 8002600:	d01f      	beq.n	8002642 <LIS2MDL_Init+0x4c>
    if (lis2mdl_block_data_update_set(&(pObj->Ctx), PROPERTY_ENABLE) != LIS2MDL_OK)
 8002602:	f100 0520 	add.w	r5, r0, #32
 8002606:	2101      	movs	r1, #1
 8002608:	4628      	mov	r0, r5
 800260a:	f000 faa7 	bl	8002b5c <lis2mdl_block_data_update_set>
 800260e:	2800      	cmp	r0, #0
 8002610:	d156      	bne.n	80026c0 <LIS2MDL_Init+0xca>
    if (lis2mdl_operating_mode_set(&(pObj->Ctx), LIS2MDL_POWER_DOWN) != LIS2MDL_OK)
 8002612:	2102      	movs	r1, #2
 8002614:	4628      	mov	r0, r5
 8002616:	f000 fa4d 	bl	8002ab4 <lis2mdl_operating_mode_set>
 800261a:	2800      	cmp	r0, #0
 800261c:	d153      	bne.n	80026c6 <LIS2MDL_Init+0xd0>
    if (lis2mdl_data_rate_set(&(pObj->Ctx), LIS2MDL_ODR_100Hz) != LIS2MDL_OK)
 800261e:	2103      	movs	r1, #3
 8002620:	4628      	mov	r0, r5
 8002622:	f000 fa60 	bl	8002ae6 <lis2mdl_data_rate_set>
 8002626:	2800      	cmp	r0, #0
 8002628:	d150      	bne.n	80026cc <LIS2MDL_Init+0xd6>
    if (lis2mdl_self_test_set(&(pObj->Ctx), PROPERTY_DISABLE) != LIS2MDL_OK)
 800262a:	2100      	movs	r1, #0
 800262c:	4628      	mov	r0, r5
 800262e:	f000 fad7 	bl	8002be0 <lis2mdl_self_test_set>
 8002632:	2800      	cmp	r0, #0
 8002634:	d14d      	bne.n	80026d2 <LIS2MDL_Init+0xdc>
  pObj->is_initialized = 1;
 8002636:	2301      	movs	r3, #1
 8002638:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
  return LIS2MDL_OK;
 800263c:	2000      	movs	r0, #0
}
 800263e:	b003      	add	sp, #12
 8002640:	bd30      	pop	{r4, r5, pc}
    if (LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData(pObj, LIS2MDL_CFG_REG_C, (uint8_t *)&reg_c, 1) != LIS2MDL_OK)
 8002642:	2301      	movs	r3, #1
 8002644:	466a      	mov	r2, sp
 8002646:	2162      	movs	r1, #98	; 0x62
 8002648:	f7ff fe5b 	bl	8002302 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData>
 800264c:	bb78      	cbnz	r0, 80026ae <LIS2MDL_Init+0xb8>
    if (LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData(pObj, LIS2MDL_CFG_REG_A, (uint8_t *)&reg_a, 1) != LIS2MDL_OK)
 800264e:	2301      	movs	r3, #1
 8002650:	aa01      	add	r2, sp, #4
 8002652:	2160      	movs	r1, #96	; 0x60
 8002654:	4620      	mov	r0, r4
 8002656:	f7ff fe54 	bl	8002302 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData>
 800265a:	bb58      	cbnz	r0, 80026b4 <LIS2MDL_Init+0xbe>
    reg_c.bdu = PROPERTY_ENABLE;
 800265c:	f89d 3000 	ldrb.w	r3, [sp]
 8002660:	f043 0310 	orr.w	r3, r3, #16
 8002664:	f88d 3000 	strb.w	r3, [sp]
    reg_c.self_test = PROPERTY_DISABLE;
 8002668:	b2db      	uxtb	r3, r3
 800266a:	f36f 0341 	bfc	r3, #1, #1
 800266e:	f88d 3000 	strb.w	r3, [sp]
    reg_a.md = LIS2MDL_POWER_DOWN;
 8002672:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8002676:	2202      	movs	r2, #2
 8002678:	f362 0301 	bfi	r3, r2, #0, #2
 800267c:	f88d 3004 	strb.w	r3, [sp, #4]
    reg_a.odr = LIS2MDL_ODR_100Hz;
 8002680:	b2db      	uxtb	r3, r3
 8002682:	f043 030c 	orr.w	r3, r3, #12
 8002686:	f88d 3004 	strb.w	r3, [sp, #4]
    if (LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData(pObj, LIS2MDL_CFG_REG_C, (uint8_t *)&reg_c, 1) != LIS2MDL_OK)
 800268a:	2301      	movs	r3, #1
 800268c:	466a      	mov	r2, sp
 800268e:	2162      	movs	r1, #98	; 0x62
 8002690:	4620      	mov	r0, r4
 8002692:	f7ff feff 	bl	8002494 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData>
 8002696:	b980      	cbnz	r0, 80026ba <LIS2MDL_Init+0xc4>
    if (LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData(pObj, LIS2MDL_CFG_REG_A, (uint8_t *)&reg_a, 1) != LIS2MDL_OK)
 8002698:	2301      	movs	r3, #1
 800269a:	aa01      	add	r2, sp, #4
 800269c:	2160      	movs	r1, #96	; 0x60
 800269e:	4620      	mov	r0, r4
 80026a0:	f7ff fef8 	bl	8002494 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData>
 80026a4:	2800      	cmp	r0, #0
 80026a6:	d0c6      	beq.n	8002636 <LIS2MDL_Init+0x40>
      return LIS2MDL_ERROR;
 80026a8:	f04f 30ff 	mov.w	r0, #4294967295
 80026ac:	e7c7      	b.n	800263e <LIS2MDL_Init+0x48>
      return LIS2MDL_ERROR;
 80026ae:	f04f 30ff 	mov.w	r0, #4294967295
 80026b2:	e7c4      	b.n	800263e <LIS2MDL_Init+0x48>
      return LIS2MDL_ERROR;
 80026b4:	f04f 30ff 	mov.w	r0, #4294967295
 80026b8:	e7c1      	b.n	800263e <LIS2MDL_Init+0x48>
      return LIS2MDL_ERROR;
 80026ba:	f04f 30ff 	mov.w	r0, #4294967295
 80026be:	e7be      	b.n	800263e <LIS2MDL_Init+0x48>
      return LIS2MDL_ERROR;
 80026c0:	f04f 30ff 	mov.w	r0, #4294967295
 80026c4:	e7bb      	b.n	800263e <LIS2MDL_Init+0x48>
      return LIS2MDL_ERROR;
 80026c6:	f04f 30ff 	mov.w	r0, #4294967295
 80026ca:	e7b8      	b.n	800263e <LIS2MDL_Init+0x48>
      return LIS2MDL_ERROR;
 80026cc:	f04f 30ff 	mov.w	r0, #4294967295
 80026d0:	e7b5      	b.n	800263e <LIS2MDL_Init+0x48>
      return LIS2MDL_ERROR;
 80026d2:	f04f 30ff 	mov.w	r0, #4294967295
 80026d6:	e7b2      	b.n	800263e <LIS2MDL_Init+0x48>

080026d8 <LIS2MDL_MAG_Enable>:
  if (pObj->mag_is_enabled == 1U)
 80026d8:	f890 3031 	ldrb.w	r3, [r0, #49]	; 0x31
 80026dc:	2b01      	cmp	r3, #1
 80026de:	d027      	beq.n	8002730 <LIS2MDL_MAG_Enable+0x58>
{
 80026e0:	b510      	push	{r4, lr}
 80026e2:	b082      	sub	sp, #8
 80026e4:	4604      	mov	r4, r0
  if (pObj->IO.BusType == LSM6DSOX_SENSORHUB_LIS2MDL_I2C_BUS) /* LSM6DSOX SensorHub with LIS2MDL example */
 80026e6:	6883      	ldr	r3, [r0, #8]
 80026e8:	2b03      	cmp	r3, #3
 80026ea:	d00a      	beq.n	8002702 <LIS2MDL_MAG_Enable+0x2a>
    if (lis2mdl_operating_mode_set(&(pObj->Ctx), LIS2MDL_CONTINUOUS_MODE) != LIS2MDL_OK)
 80026ec:	2100      	movs	r1, #0
 80026ee:	3020      	adds	r0, #32
 80026f0:	f000 f9e0 	bl	8002ab4 <lis2mdl_operating_mode_set>
 80026f4:	bb08      	cbnz	r0, 800273a <LIS2MDL_MAG_Enable+0x62>
  pObj->mag_is_enabled = 1;
 80026f6:	2301      	movs	r3, #1
 80026f8:	f884 3031 	strb.w	r3, [r4, #49]	; 0x31
  return LIS2MDL_OK;
 80026fc:	2000      	movs	r0, #0
}
 80026fe:	b002      	add	sp, #8
 8002700:	bd10      	pop	{r4, pc}
    if (LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData(pObj, LIS2MDL_CFG_REG_A, (uint8_t *)&reg_a, 1) != LIS2MDL_OK)
 8002702:	2301      	movs	r3, #1
 8002704:	aa01      	add	r2, sp, #4
 8002706:	2160      	movs	r1, #96	; 0x60
 8002708:	f7ff fdfb 	bl	8002302 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData>
 800270c:	b990      	cbnz	r0, 8002734 <LIS2MDL_MAG_Enable+0x5c>
    reg_a.md = LIS2MDL_CONTINUOUS_MODE;
 800270e:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8002712:	f36f 0301 	bfc	r3, #0, #2
 8002716:	f88d 3004 	strb.w	r3, [sp, #4]
    if (LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData(pObj, LIS2MDL_CFG_REG_A, (uint8_t *)&reg_a, 1) != LIS2MDL_OK)
 800271a:	2301      	movs	r3, #1
 800271c:	aa01      	add	r2, sp, #4
 800271e:	2160      	movs	r1, #96	; 0x60
 8002720:	4620      	mov	r0, r4
 8002722:	f7ff feb7 	bl	8002494 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData>
 8002726:	2800      	cmp	r0, #0
 8002728:	d0e5      	beq.n	80026f6 <LIS2MDL_MAG_Enable+0x1e>
      return LIS2MDL_ERROR;
 800272a:	f04f 30ff 	mov.w	r0, #4294967295
 800272e:	e7e6      	b.n	80026fe <LIS2MDL_MAG_Enable+0x26>
    return LIS2MDL_OK;
 8002730:	2000      	movs	r0, #0
}
 8002732:	4770      	bx	lr
      return LIS2MDL_ERROR;
 8002734:	f04f 30ff 	mov.w	r0, #4294967295
 8002738:	e7e1      	b.n	80026fe <LIS2MDL_MAG_Enable+0x26>
      return LIS2MDL_ERROR;
 800273a:	f04f 30ff 	mov.w	r0, #4294967295
 800273e:	e7de      	b.n	80026fe <LIS2MDL_MAG_Enable+0x26>

08002740 <LIS2MDL_MAG_Disable>:
  if (pObj->mag_is_enabled == 0U)
 8002740:	f890 3031 	ldrb.w	r3, [r0, #49]	; 0x31
 8002744:	b33b      	cbz	r3, 8002796 <LIS2MDL_MAG_Disable+0x56>
{
 8002746:	b510      	push	{r4, lr}
 8002748:	b082      	sub	sp, #8
 800274a:	4604      	mov	r4, r0
  if (pObj->IO.BusType == LSM6DSOX_SENSORHUB_LIS2MDL_I2C_BUS) /* LSM6DSOX SensorHub with LIS2MDL example */
 800274c:	6883      	ldr	r3, [r0, #8]
 800274e:	2b03      	cmp	r3, #3
 8002750:	d009      	beq.n	8002766 <LIS2MDL_MAG_Disable+0x26>
    if (lis2mdl_operating_mode_set(&(pObj->Ctx), LIS2MDL_POWER_DOWN) != LIS2MDL_OK)
 8002752:	2102      	movs	r1, #2
 8002754:	3020      	adds	r0, #32
 8002756:	f000 f9ad 	bl	8002ab4 <lis2mdl_operating_mode_set>
 800275a:	bb08      	cbnz	r0, 80027a0 <LIS2MDL_MAG_Disable+0x60>
  pObj->mag_is_enabled = 0;
 800275c:	2000      	movs	r0, #0
 800275e:	f884 0031 	strb.w	r0, [r4, #49]	; 0x31
}
 8002762:	b002      	add	sp, #8
 8002764:	bd10      	pop	{r4, pc}
    if (LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData(pObj, LIS2MDL_CFG_REG_A, (uint8_t *)&reg_a, 1) != LIS2MDL_OK)
 8002766:	2301      	movs	r3, #1
 8002768:	aa01      	add	r2, sp, #4
 800276a:	2160      	movs	r1, #96	; 0x60
 800276c:	f7ff fdc9 	bl	8002302 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData>
 8002770:	b998      	cbnz	r0, 800279a <LIS2MDL_MAG_Disable+0x5a>
    reg_a.md = LIS2MDL_POWER_DOWN;
 8002772:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8002776:	2202      	movs	r2, #2
 8002778:	f362 0301 	bfi	r3, r2, #0, #2
 800277c:	f88d 3004 	strb.w	r3, [sp, #4]
    if (LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData(pObj, LIS2MDL_CFG_REG_A, (uint8_t *)&reg_a, 1) != LIS2MDL_OK)
 8002780:	2301      	movs	r3, #1
 8002782:	aa01      	add	r2, sp, #4
 8002784:	2160      	movs	r1, #96	; 0x60
 8002786:	4620      	mov	r0, r4
 8002788:	f7ff fe84 	bl	8002494 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData>
 800278c:	2800      	cmp	r0, #0
 800278e:	d0e5      	beq.n	800275c <LIS2MDL_MAG_Disable+0x1c>
      return LIS2MDL_ERROR;
 8002790:	f04f 30ff 	mov.w	r0, #4294967295
 8002794:	e7e5      	b.n	8002762 <LIS2MDL_MAG_Disable+0x22>
    return LIS2MDL_OK;
 8002796:	2000      	movs	r0, #0
}
 8002798:	4770      	bx	lr
      return LIS2MDL_ERROR;
 800279a:	f04f 30ff 	mov.w	r0, #4294967295
 800279e:	e7e0      	b.n	8002762 <LIS2MDL_MAG_Disable+0x22>
      return LIS2MDL_ERROR;
 80027a0:	f04f 30ff 	mov.w	r0, #4294967295
 80027a4:	e7dd      	b.n	8002762 <LIS2MDL_MAG_Disable+0x22>

080027a6 <LIS2MDL_DeInit>:
{
 80027a6:	b510      	push	{r4, lr}
 80027a8:	4604      	mov	r4, r0
  if (LIS2MDL_MAG_Disable(pObj) != LIS2MDL_OK)
 80027aa:	f7ff ffc9 	bl	8002740 <LIS2MDL_MAG_Disable>
 80027ae:	b910      	cbnz	r0, 80027b6 <LIS2MDL_DeInit+0x10>
  pObj->is_initialized = 0;
 80027b0:	f884 0030 	strb.w	r0, [r4, #48]	; 0x30
}
 80027b4:	bd10      	pop	{r4, pc}
    return LIS2MDL_ERROR;
 80027b6:	f04f 30ff 	mov.w	r0, #4294967295
 80027ba:	e7fb      	b.n	80027b4 <LIS2MDL_DeInit+0xe>

080027bc <LIS2MDL_MAG_SetOutputDataRate>:
{
 80027bc:	b530      	push	{r4, r5, lr}
 80027be:	b083      	sub	sp, #12
 80027c0:	4604      	mov	r4, r0
            : (Odr <= 20.000f) ? LIS2MDL_ODR_20Hz
 80027c2:	eef2 7a04 	vmov.f32	s15, #36	; 0x41200000  10.0
 80027c6:	eeb4 0ae7 	vcmpe.f32	s0, s15
 80027ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80027ce:	d90f      	bls.n	80027f0 <LIS2MDL_MAG_SetOutputDataRate+0x34>
 80027d0:	eef3 7a04 	vmov.f32	s15, #52	; 0x41a00000  20.0
 80027d4:	eeb4 0ae7 	vcmpe.f32	s0, s15
 80027d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80027dc:	d914      	bls.n	8002808 <LIS2MDL_MAG_SetOutputDataRate+0x4c>
 80027de:	eddf 7a1b 	vldr	s15, [pc, #108]	; 800284c <LIS2MDL_MAG_SetOutputDataRate+0x90>
 80027e2:	eeb4 0ae7 	vcmpe.f32	s0, s15
 80027e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80027ea:	d80f      	bhi.n	800280c <LIS2MDL_MAG_SetOutputDataRate+0x50>
 80027ec:	2502      	movs	r5, #2
 80027ee:	e000      	b.n	80027f2 <LIS2MDL_MAG_SetOutputDataRate+0x36>
 80027f0:	2500      	movs	r5, #0
  if (pObj->IO.BusType == LSM6DSOX_SENSORHUB_LIS2MDL_I2C_BUS) /* LSM6DSOX SensorHub with LIS2MDL example */
 80027f2:	68a3      	ldr	r3, [r4, #8]
 80027f4:	2b03      	cmp	r3, #3
 80027f6:	d00b      	beq.n	8002810 <LIS2MDL_MAG_SetOutputDataRate+0x54>
    if (lis2mdl_data_rate_set(&(pObj->Ctx), new_odr) != LIS2MDL_OK)
 80027f8:	4629      	mov	r1, r5
 80027fa:	f104 0020 	add.w	r0, r4, #32
 80027fe:	f000 f972 	bl	8002ae6 <lis2mdl_data_rate_set>
 8002802:	bb00      	cbnz	r0, 8002846 <LIS2MDL_MAG_SetOutputDataRate+0x8a>
}
 8002804:	b003      	add	sp, #12
 8002806:	bd30      	pop	{r4, r5, pc}
            : (Odr <= 20.000f) ? LIS2MDL_ODR_20Hz
 8002808:	2501      	movs	r5, #1
 800280a:	e7f2      	b.n	80027f2 <LIS2MDL_MAG_SetOutputDataRate+0x36>
 800280c:	2503      	movs	r5, #3
 800280e:	e7f0      	b.n	80027f2 <LIS2MDL_MAG_SetOutputDataRate+0x36>
    if (LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData(pObj, LIS2MDL_CFG_REG_A, (uint8_t *)&reg_a, 1) != LIS2MDL_OK)
 8002810:	2301      	movs	r3, #1
 8002812:	aa01      	add	r2, sp, #4
 8002814:	2160      	movs	r1, #96	; 0x60
 8002816:	4620      	mov	r0, r4
 8002818:	f7ff fd73 	bl	8002302 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData>
 800281c:	b980      	cbnz	r0, 8002840 <LIS2MDL_MAG_SetOutputDataRate+0x84>
    reg_a.odr = new_odr;
 800281e:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8002822:	f365 0383 	bfi	r3, r5, #2, #2
 8002826:	f88d 3004 	strb.w	r3, [sp, #4]
    if (LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData(pObj, LIS2MDL_CFG_REG_A, (uint8_t *)&reg_a, 1) != LIS2MDL_OK)
 800282a:	2301      	movs	r3, #1
 800282c:	aa01      	add	r2, sp, #4
 800282e:	2160      	movs	r1, #96	; 0x60
 8002830:	4620      	mov	r0, r4
 8002832:	f7ff fe2f 	bl	8002494 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData>
 8002836:	2800      	cmp	r0, #0
 8002838:	d0e4      	beq.n	8002804 <LIS2MDL_MAG_SetOutputDataRate+0x48>
      return LIS2MDL_ERROR;
 800283a:	f04f 30ff 	mov.w	r0, #4294967295
 800283e:	e7e1      	b.n	8002804 <LIS2MDL_MAG_SetOutputDataRate+0x48>
      return LIS2MDL_ERROR;
 8002840:	f04f 30ff 	mov.w	r0, #4294967295
 8002844:	e7de      	b.n	8002804 <LIS2MDL_MAG_SetOutputDataRate+0x48>
      return LIS2MDL_ERROR;
 8002846:	f04f 30ff 	mov.w	r0, #4294967295
 800284a:	e7db      	b.n	8002804 <LIS2MDL_MAG_SetOutputDataRate+0x48>
 800284c:	42480000 	.word	0x42480000

08002850 <LIS2MDL_ReadID>:
{
 8002850:	b508      	push	{r3, lr}
  if (pObj->IO.BusType == LSM6DSOX_SENSORHUB_LIS2MDL_I2C_BUS) /* LSM6DSOX SensorHub with LIS2MDL example */
 8002852:	6883      	ldr	r3, [r0, #8]
 8002854:	2b03      	cmp	r3, #3
 8002856:	d006      	beq.n	8002866 <LIS2MDL_ReadID+0x16>
    if (lis2mdl_device_id_get(&(pObj->Ctx), Id) != LIS2MDL_OK)
 8002858:	3020      	adds	r0, #32
 800285a:	f000 f9ba 	bl	8002bd2 <lis2mdl_device_id_get>
 800285e:	4603      	mov	r3, r0
 8002860:	b960      	cbnz	r0, 800287c <LIS2MDL_ReadID+0x2c>
}
 8002862:	4618      	mov	r0, r3
 8002864:	bd08      	pop	{r3, pc}
    if (LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData(pObj, LIS2MDL_WHO_AM_I, Id, 1) != LIS2MDL_OK)
 8002866:	2301      	movs	r3, #1
 8002868:	460a      	mov	r2, r1
 800286a:	214f      	movs	r1, #79	; 0x4f
 800286c:	f7ff fd49 	bl	8002302 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData>
 8002870:	4603      	mov	r3, r0
 8002872:	2800      	cmp	r0, #0
 8002874:	d0f5      	beq.n	8002862 <LIS2MDL_ReadID+0x12>
      return LIS2MDL_ERROR;
 8002876:	f04f 33ff 	mov.w	r3, #4294967295
 800287a:	e7f2      	b.n	8002862 <LIS2MDL_ReadID+0x12>
      return LIS2MDL_ERROR;
 800287c:	f04f 33ff 	mov.w	r3, #4294967295
 8002880:	e7ef      	b.n	8002862 <LIS2MDL_ReadID+0x12>
	...

08002884 <LIS2MDL_MAG_GetOutputDataRate>:
{
 8002884:	b510      	push	{r4, lr}
 8002886:	b082      	sub	sp, #8
 8002888:	460c      	mov	r4, r1
  if (lis2mdl_data_rate_get(&(pObj->Ctx), &odr_low_level) != LIS2MDL_OK)
 800288a:	f10d 0107 	add.w	r1, sp, #7
 800288e:	3020      	adds	r0, #32
 8002890:	f000 f942 	bl	8002b18 <lis2mdl_data_rate_get>
 8002894:	b9a0      	cbnz	r0, 80028c0 <LIS2MDL_MAG_GetOutputDataRate+0x3c>
  switch (odr_low_level)
 8002896:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800289a:	2b03      	cmp	r3, #3
 800289c:	d813      	bhi.n	80028c6 <LIS2MDL_MAG_GetOutputDataRate+0x42>
 800289e:	e8df f003 	tbb	[pc, r3]
 80028a2:	0602      	.short	0x0602
 80028a4:	0c09      	.short	0x0c09
      *Odr = 10.0f;
 80028a6:	4b09      	ldr	r3, [pc, #36]	; (80028cc <LIS2MDL_MAG_GetOutputDataRate+0x48>)
 80028a8:	6023      	str	r3, [r4, #0]
}
 80028aa:	b002      	add	sp, #8
 80028ac:	bd10      	pop	{r4, pc}
      *Odr = 20.0f;
 80028ae:	4b08      	ldr	r3, [pc, #32]	; (80028d0 <LIS2MDL_MAG_GetOutputDataRate+0x4c>)
 80028b0:	6023      	str	r3, [r4, #0]
      break;
 80028b2:	e7fa      	b.n	80028aa <LIS2MDL_MAG_GetOutputDataRate+0x26>
      *Odr = 50.0f;
 80028b4:	4b07      	ldr	r3, [pc, #28]	; (80028d4 <LIS2MDL_MAG_GetOutputDataRate+0x50>)
 80028b6:	6023      	str	r3, [r4, #0]
      break;
 80028b8:	e7f7      	b.n	80028aa <LIS2MDL_MAG_GetOutputDataRate+0x26>
      *Odr = 100.0f;
 80028ba:	4b07      	ldr	r3, [pc, #28]	; (80028d8 <LIS2MDL_MAG_GetOutputDataRate+0x54>)
 80028bc:	6023      	str	r3, [r4, #0]
      break;
 80028be:	e7f4      	b.n	80028aa <LIS2MDL_MAG_GetOutputDataRate+0x26>
    return LIS2MDL_ERROR;
 80028c0:	f04f 30ff 	mov.w	r0, #4294967295
 80028c4:	e7f1      	b.n	80028aa <LIS2MDL_MAG_GetOutputDataRate+0x26>
  switch (odr_low_level)
 80028c6:	f04f 30ff 	mov.w	r0, #4294967295
 80028ca:	e7ee      	b.n	80028aa <LIS2MDL_MAG_GetOutputDataRate+0x26>
 80028cc:	41200000 	.word	0x41200000
 80028d0:	41a00000 	.word	0x41a00000
 80028d4:	42480000 	.word	0x42480000
 80028d8:	42c80000 	.word	0x42c80000

080028dc <LIS2MDL_MAG_GetAxesRaw>:
{
 80028dc:	b510      	push	{r4, lr}
 80028de:	b082      	sub	sp, #8
 80028e0:	460c      	mov	r4, r1
  if (lis2mdl_magnetic_raw_get(&(pObj->Ctx), data_raw.i16bit) != LIS2MDL_OK)
 80028e2:	4669      	mov	r1, sp
 80028e4:	3020      	adds	r0, #32
 80028e6:	f000 f952 	bl	8002b8e <lis2mdl_magnetic_raw_get>
 80028ea:	b950      	cbnz	r0, 8002902 <LIS2MDL_MAG_GetAxesRaw+0x26>
  Value->x = data_raw.i16bit[0];
 80028ec:	f9bd 3000 	ldrsh.w	r3, [sp]
 80028f0:	8023      	strh	r3, [r4, #0]
  Value->y = data_raw.i16bit[1];
 80028f2:	f9bd 3002 	ldrsh.w	r3, [sp, #2]
 80028f6:	8063      	strh	r3, [r4, #2]
  Value->z = data_raw.i16bit[2];
 80028f8:	f9bd 3004 	ldrsh.w	r3, [sp, #4]
 80028fc:	80a3      	strh	r3, [r4, #4]
}
 80028fe:	b002      	add	sp, #8
 8002900:	bd10      	pop	{r4, pc}
    return LIS2MDL_ERROR;
 8002902:	f04f 30ff 	mov.w	r0, #4294967295
 8002906:	e7fa      	b.n	80028fe <LIS2MDL_MAG_GetAxesRaw+0x22>

08002908 <LIS2MDL_MAG_GetAxes>:
{
 8002908:	b530      	push	{r4, r5, lr}
 800290a:	b087      	sub	sp, #28
 800290c:	4604      	mov	r4, r0
 800290e:	460d      	mov	r5, r1
  if (pObj->IO.BusType == LSM6DSOX_SENSORHUB_LIS2MDL_I2C_BUS) /* LSM6DSOX SensorHub with LIS2MDL example */
 8002910:	6883      	ldr	r3, [r0, #8]
 8002912:	2b03      	cmp	r3, #3
 8002914:	d032      	beq.n	800297c <LIS2MDL_MAG_GetAxes+0x74>
    if (lis2mdl_magnetic_raw_get(&(pObj->Ctx), data_raw.i16bit) != LIS2MDL_OK)
 8002916:	a902      	add	r1, sp, #8
 8002918:	3020      	adds	r0, #32
 800291a:	f000 f938 	bl	8002b8e <lis2mdl_magnetic_raw_get>
 800291e:	2800      	cmp	r0, #0
 8002920:	d154      	bne.n	80029cc <LIS2MDL_MAG_GetAxes+0xc4>
  (void)LIS2MDL_MAG_GetSensitivity(pObj, &sensitivity);
 8002922:	a901      	add	r1, sp, #4
 8002924:	4620      	mov	r0, r4
 8002926:	f7ff fcb7 	bl	8002298 <LIS2MDL_MAG_GetSensitivity>
  MagneticField->x = (int32_t)((float)((float)data_raw.i16bit[0] * sensitivity));
 800292a:	f9bd 3008 	ldrsh.w	r3, [sp, #8]
 800292e:	ee07 3a10 	vmov	s14, r3
 8002932:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8002936:	eddd 7a01 	vldr	s15, [sp, #4]
 800293a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800293e:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 8002942:	ed85 7a00 	vstr	s14, [r5]
  MagneticField->y = (int32_t)((float)((float)data_raw.i16bit[1] * sensitivity));
 8002946:	f9bd 300a 	ldrsh.w	r3, [sp, #10]
 800294a:	ee07 3a10 	vmov	s14, r3
 800294e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8002952:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002956:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 800295a:	ed85 7a01 	vstr	s14, [r5, #4]
  MagneticField->z = (int32_t)((float)((float)data_raw.i16bit[2] * sensitivity));
 800295e:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 8002962:	ee07 3a10 	vmov	s14, r3
 8002966:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800296a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800296e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002972:	edc5 7a02 	vstr	s15, [r5, #8]
  return LIS2MDL_OK;
 8002976:	2000      	movs	r0, #0
}
 8002978:	b007      	add	sp, #28
 800297a:	bd30      	pop	{r4, r5, pc}
    if (LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData(pObj, LIS2MDL_OUTX_L_REG, buff, 6) != LIS2MDL_OK)
 800297c:	2306      	movs	r3, #6
 800297e:	aa04      	add	r2, sp, #16
 8002980:	2168      	movs	r1, #104	; 0x68
 8002982:	f7ff fcbe 	bl	8002302 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData>
 8002986:	b9f0      	cbnz	r0, 80029c6 <LIS2MDL_MAG_GetAxes+0xbe>
    data_raw.i16bit[0] = (int16_t)buff[1];
 8002988:	f89d 2011 	ldrb.w	r2, [sp, #17]
 800298c:	f8ad 2008 	strh.w	r2, [sp, #8]
    data_raw.i16bit[0] = (data_raw.i16bit[0] * 256) + (int16_t)buff[0];
 8002990:	f89d 3010 	ldrb.w	r3, [sp, #16]
 8002994:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8002998:	f8ad 3008 	strh.w	r3, [sp, #8]
    data_raw.i16bit[1] = (int16_t)buff[3];
 800299c:	f89d 2013 	ldrb.w	r2, [sp, #19]
 80029a0:	f8ad 200a 	strh.w	r2, [sp, #10]
    data_raw.i16bit[1] = (data_raw.i16bit[1] * 256) + (int16_t)buff[2];
 80029a4:	f89d 3012 	ldrb.w	r3, [sp, #18]
 80029a8:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 80029ac:	f8ad 300a 	strh.w	r3, [sp, #10]
    data_raw.i16bit[2] = (int16_t)buff[5];
 80029b0:	f89d 2015 	ldrb.w	r2, [sp, #21]
 80029b4:	f8ad 200c 	strh.w	r2, [sp, #12]
    data_raw.i16bit[2] = (data_raw.i16bit[2] * 256) + (int16_t)buff[4];
 80029b8:	f89d 3014 	ldrb.w	r3, [sp, #20]
 80029bc:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 80029c0:	f8ad 300c 	strh.w	r3, [sp, #12]
 80029c4:	e7ad      	b.n	8002922 <LIS2MDL_MAG_GetAxes+0x1a>
      return LIS2MDL_ERROR;
 80029c6:	f04f 30ff 	mov.w	r0, #4294967295
 80029ca:	e7d5      	b.n	8002978 <LIS2MDL_MAG_GetAxes+0x70>
      return LIS2MDL_ERROR;
 80029cc:	f04f 30ff 	mov.w	r0, #4294967295
 80029d0:	e7d2      	b.n	8002978 <LIS2MDL_MAG_GetAxes+0x70>

080029d2 <LIS2MDL_Write_Reg>:
{
 80029d2:	b500      	push	{lr}
 80029d4:	b083      	sub	sp, #12
 80029d6:	f88d 2007 	strb.w	r2, [sp, #7]
  if (pObj->IO.BusType == LSM6DSOX_SENSORHUB_LIS2MDL_I2C_BUS) /* LSM6DSOX SensorHub with LIS2MDL example */
 80029da:	6883      	ldr	r3, [r0, #8]
 80029dc:	2b03      	cmp	r3, #3
 80029de:	d00b      	beq.n	80029f8 <LIS2MDL_Write_Reg+0x26>
    if (lis2mdl_write_reg(&(pObj->Ctx), Reg, &Data, 1) != LIS2MDL_OK)
 80029e0:	2301      	movs	r3, #1
 80029e2:	f10d 0207 	add.w	r2, sp, #7
 80029e6:	3020      	adds	r0, #32
 80029e8:	f000 f85f 	bl	8002aaa <lis2mdl_write_reg>
 80029ec:	4603      	mov	r3, r0
 80029ee:	b970      	cbnz	r0, 8002a0e <LIS2MDL_Write_Reg+0x3c>
}
 80029f0:	4618      	mov	r0, r3
 80029f2:	b003      	add	sp, #12
 80029f4:	f85d fb04 	ldr.w	pc, [sp], #4
    if (LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData(pObj, Reg, (uint8_t *)&Data, 1) != LIS2MDL_OK)
 80029f8:	2301      	movs	r3, #1
 80029fa:	f10d 0207 	add.w	r2, sp, #7
 80029fe:	f7ff fd49 	bl	8002494 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData>
 8002a02:	4603      	mov	r3, r0
 8002a04:	2800      	cmp	r0, #0
 8002a06:	d0f3      	beq.n	80029f0 <LIS2MDL_Write_Reg+0x1e>
      return LIS2MDL_ERROR;
 8002a08:	f04f 33ff 	mov.w	r3, #4294967295
 8002a0c:	e7f0      	b.n	80029f0 <LIS2MDL_Write_Reg+0x1e>
      return LIS2MDL_ERROR;
 8002a0e:	f04f 33ff 	mov.w	r3, #4294967295
 8002a12:	e7ed      	b.n	80029f0 <LIS2MDL_Write_Reg+0x1e>

08002a14 <LIS2MDL_RegisterBusIO>:
  if (pObj == NULL)
 8002a14:	2800      	cmp	r0, #0
 8002a16:	d033      	beq.n	8002a80 <LIS2MDL_RegisterBusIO+0x6c>
{
 8002a18:	b510      	push	{r4, lr}
 8002a1a:	4604      	mov	r4, r0
    pObj->IO.Init      = pIO->Init;
 8002a1c:	680b      	ldr	r3, [r1, #0]
 8002a1e:	6003      	str	r3, [r0, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 8002a20:	684a      	ldr	r2, [r1, #4]
 8002a22:	6042      	str	r2, [r0, #4]
    pObj->IO.BusType   = pIO->BusType;
 8002a24:	688a      	ldr	r2, [r1, #8]
 8002a26:	6082      	str	r2, [r0, #8]
    pObj->IO.Address   = pIO->Address;
 8002a28:	7b0a      	ldrb	r2, [r1, #12]
 8002a2a:	7302      	strb	r2, [r0, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 8002a2c:	690a      	ldr	r2, [r1, #16]
 8002a2e:	6102      	str	r2, [r0, #16]
    pObj->IO.ReadReg   = pIO->ReadReg;
 8002a30:	694a      	ldr	r2, [r1, #20]
 8002a32:	6142      	str	r2, [r0, #20]
    pObj->IO.GetTick   = pIO->GetTick;
 8002a34:	698a      	ldr	r2, [r1, #24]
 8002a36:	6182      	str	r2, [r0, #24]
    pObj->Ctx.read_reg  = ReadMagRegWrap;
 8002a38:	4a17      	ldr	r2, [pc, #92]	; (8002a98 <LIS2MDL_RegisterBusIO+0x84>)
 8002a3a:	6242      	str	r2, [r0, #36]	; 0x24
    pObj->Ctx.write_reg = WriteMagRegWrap;
 8002a3c:	4a17      	ldr	r2, [pc, #92]	; (8002a9c <LIS2MDL_RegisterBusIO+0x88>)
 8002a3e:	6202      	str	r2, [r0, #32]
    pObj->Ctx.mdelay    = pIO->Delay;
 8002a40:	69ca      	ldr	r2, [r1, #28]
 8002a42:	6282      	str	r2, [r0, #40]	; 0x28
    pObj->Ctx.handle    = pObj;
 8002a44:	62c0      	str	r0, [r0, #44]	; 0x2c
    if (pObj->IO.Init == NULL)
 8002a46:	b1f3      	cbz	r3, 8002a86 <LIS2MDL_RegisterBusIO+0x72>
    else if (pObj->IO.Init() != LIS2MDL_OK)
 8002a48:	4798      	blx	r3
 8002a4a:	b9f8      	cbnz	r0, 8002a8c <LIS2MDL_RegisterBusIO+0x78>
      if (pObj->IO.BusType != LIS2MDL_I2C_BUS) /* If the bus type is not I2C */
 8002a4c:	68a3      	ldr	r3, [r4, #8]
 8002a4e:	b163      	cbz	r3, 8002a6a <LIS2MDL_RegisterBusIO+0x56>
        if (pObj->is_initialized == 0U)
 8002a50:	f894 2030 	ldrb.w	r2, [r4, #48]	; 0x30
 8002a54:	b94a      	cbnz	r2, 8002a6a <LIS2MDL_RegisterBusIO+0x56>
          if (pObj->IO.BusType == LIS2MDL_SPI_4WIRES_BUS) /* SPI 4-Wires */
 8002a56:	2b01      	cmp	r3, #1
 8002a58:	d008      	beq.n	8002a6c <LIS2MDL_RegisterBusIO+0x58>
          else if (pObj->IO.BusType == LSM6DSOX_SENSORHUB_LIS2MDL_I2C_BUS) /* LSM6DSOX SensorHub with LIS2MDL example */
 8002a5a:	2b03      	cmp	r3, #3
 8002a5c:	d005      	beq.n	8002a6a <LIS2MDL_RegisterBusIO+0x56>
            if (lis2mdl_i2c_interface_set(&(pObj->Ctx), LIS2MDL_I2C_DISABLE) != LIS2MDL_OK)
 8002a5e:	2101      	movs	r1, #1
 8002a60:	f104 0020 	add.w	r0, r4, #32
 8002a64:	f000 f8d5 	bl	8002c12 <lis2mdl_i2c_interface_set>
 8002a68:	b998      	cbnz	r0, 8002a92 <LIS2MDL_RegisterBusIO+0x7e>
}
 8002a6a:	bd10      	pop	{r4, pc}
            if (LIS2MDL_Write_Reg(pObj, LIS2MDL_CFG_REG_C, data) != LIS2MDL_OK)
 8002a6c:	2234      	movs	r2, #52	; 0x34
 8002a6e:	2162      	movs	r1, #98	; 0x62
 8002a70:	4620      	mov	r0, r4
 8002a72:	f7ff ffae 	bl	80029d2 <LIS2MDL_Write_Reg>
 8002a76:	2800      	cmp	r0, #0
 8002a78:	d0f7      	beq.n	8002a6a <LIS2MDL_RegisterBusIO+0x56>
              return LIS2MDL_ERROR;
 8002a7a:	f04f 30ff 	mov.w	r0, #4294967295
 8002a7e:	e7f4      	b.n	8002a6a <LIS2MDL_RegisterBusIO+0x56>
    ret = LIS2MDL_ERROR;
 8002a80:	f04f 30ff 	mov.w	r0, #4294967295
}
 8002a84:	4770      	bx	lr
      ret = LIS2MDL_ERROR;
 8002a86:	f04f 30ff 	mov.w	r0, #4294967295
 8002a8a:	e7ee      	b.n	8002a6a <LIS2MDL_RegisterBusIO+0x56>
      ret = LIS2MDL_ERROR;
 8002a8c:	f04f 30ff 	mov.w	r0, #4294967295
 8002a90:	e7eb      	b.n	8002a6a <LIS2MDL_RegisterBusIO+0x56>
              return LIS2MDL_ERROR;
 8002a92:	f04f 30ff 	mov.w	r0, #4294967295
 8002a96:	e7e8      	b.n	8002a6a <LIS2MDL_RegisterBusIO+0x56>
 8002a98:	080022af 	.word	0x080022af
 8002a9c:	080022d9 	.word	0x080022d9

08002aa0 <lis2mdl_read_reg>:
  *
  */
int32_t lis2mdl_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                         uint8_t *data,
                         uint16_t len)
{
 8002aa0:	b510      	push	{r4, lr}
  int32_t ret;

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8002aa2:	6844      	ldr	r4, [r0, #4]
 8002aa4:	68c0      	ldr	r0, [r0, #12]
 8002aa6:	47a0      	blx	r4

  return ret;
}
 8002aa8:	bd10      	pop	{r4, pc}

08002aaa <lis2mdl_write_reg>:
  *
  */
int32_t lis2mdl_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                          uint8_t *data,
                          uint16_t len)
{
 8002aaa:	b510      	push	{r4, lr}
  int32_t ret;

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8002aac:	6804      	ldr	r4, [r0, #0]
 8002aae:	68c0      	ldr	r0, [r0, #12]
 8002ab0:	47a0      	blx	r4

  return ret;
}
 8002ab2:	bd10      	pop	{r4, pc}

08002ab4 <lis2mdl_operating_mode_set>:
  * @retval        interface status.(MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2mdl_operating_mode_set(stmdev_ctx_t *ctx,
                                   lis2mdl_md_t val)
{
 8002ab4:	b530      	push	{r4, r5, lr}
 8002ab6:	b083      	sub	sp, #12
 8002ab8:	4604      	mov	r4, r0
 8002aba:	460d      	mov	r5, r1
  lis2mdl_cfg_reg_a_t reg;
  int32_t ret;

  ret = lis2mdl_read_reg(ctx, LIS2MDL_CFG_REG_A, (uint8_t *)&reg, 1);
 8002abc:	2301      	movs	r3, #1
 8002abe:	aa01      	add	r2, sp, #4
 8002ac0:	2160      	movs	r1, #96	; 0x60
 8002ac2:	f7ff ffed 	bl	8002aa0 <lis2mdl_read_reg>

  if (ret == 0)
 8002ac6:	b108      	cbz	r0, 8002acc <lis2mdl_operating_mode_set+0x18>
    reg.md = (uint8_t)val;
    ret = lis2mdl_write_reg(ctx, LIS2MDL_CFG_REG_A, (uint8_t *)&reg, 1);
  }

  return ret;
}
 8002ac8:	b003      	add	sp, #12
 8002aca:	bd30      	pop	{r4, r5, pc}
    reg.md = (uint8_t)val;
 8002acc:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8002ad0:	f365 0301 	bfi	r3, r5, #0, #2
 8002ad4:	f88d 3004 	strb.w	r3, [sp, #4]
    ret = lis2mdl_write_reg(ctx, LIS2MDL_CFG_REG_A, (uint8_t *)&reg, 1);
 8002ad8:	2301      	movs	r3, #1
 8002ada:	aa01      	add	r2, sp, #4
 8002adc:	2160      	movs	r1, #96	; 0x60
 8002ade:	4620      	mov	r0, r4
 8002ae0:	f7ff ffe3 	bl	8002aaa <lis2mdl_write_reg>
  return ret;
 8002ae4:	e7f0      	b.n	8002ac8 <lis2mdl_operating_mode_set+0x14>

08002ae6 <lis2mdl_data_rate_set>:
  * @param  val   change the values of odr in reg CFG_REG_A
  * @retval       interface status.(MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2mdl_data_rate_set(stmdev_ctx_t *ctx, lis2mdl_odr_t val)
{
 8002ae6:	b530      	push	{r4, r5, lr}
 8002ae8:	b083      	sub	sp, #12
 8002aea:	4604      	mov	r4, r0
 8002aec:	460d      	mov	r5, r1
  lis2mdl_cfg_reg_a_t reg;
  int32_t ret;

  ret = lis2mdl_read_reg(ctx, LIS2MDL_CFG_REG_A, (uint8_t *)&reg, 1);
 8002aee:	2301      	movs	r3, #1
 8002af0:	aa01      	add	r2, sp, #4
 8002af2:	2160      	movs	r1, #96	; 0x60
 8002af4:	f7ff ffd4 	bl	8002aa0 <lis2mdl_read_reg>

  if (ret == 0)
 8002af8:	b108      	cbz	r0, 8002afe <lis2mdl_data_rate_set+0x18>
    reg.odr = (uint8_t)val;
    ret = lis2mdl_write_reg(ctx, LIS2MDL_CFG_REG_A, (uint8_t *)&reg, 1);
  }

  return ret;
}
 8002afa:	b003      	add	sp, #12
 8002afc:	bd30      	pop	{r4, r5, pc}
    reg.odr = (uint8_t)val;
 8002afe:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8002b02:	f365 0383 	bfi	r3, r5, #2, #2
 8002b06:	f88d 3004 	strb.w	r3, [sp, #4]
    ret = lis2mdl_write_reg(ctx, LIS2MDL_CFG_REG_A, (uint8_t *)&reg, 1);
 8002b0a:	2301      	movs	r3, #1
 8002b0c:	aa01      	add	r2, sp, #4
 8002b0e:	2160      	movs	r1, #96	; 0x60
 8002b10:	4620      	mov	r0, r4
 8002b12:	f7ff ffca 	bl	8002aaa <lis2mdl_write_reg>
  return ret;
 8002b16:	e7f0      	b.n	8002afa <lis2mdl_data_rate_set+0x14>

08002b18 <lis2mdl_data_rate_get>:
  * @param  val   Get the values of odr in reg CFG_REG_A.(ptr)
  * @retval       interface status.(MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2mdl_data_rate_get(stmdev_ctx_t *ctx, lis2mdl_odr_t *val)
{
 8002b18:	b510      	push	{r4, lr}
 8002b1a:	b082      	sub	sp, #8
 8002b1c:	460c      	mov	r4, r1
  lis2mdl_cfg_reg_a_t reg;
  int32_t ret;

  ret = lis2mdl_read_reg(ctx, LIS2MDL_CFG_REG_A, (uint8_t *)&reg, 1);
 8002b1e:	2301      	movs	r3, #1
 8002b20:	aa01      	add	r2, sp, #4
 8002b22:	2160      	movs	r1, #96	; 0x60
 8002b24:	f7ff ffbc 	bl	8002aa0 <lis2mdl_read_reg>

  switch (reg.odr)
 8002b28:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8002b2c:	f3c3 0381 	ubfx	r3, r3, #2, #2
 8002b30:	2b03      	cmp	r3, #3
 8002b32:	d810      	bhi.n	8002b56 <lis2mdl_data_rate_get+0x3e>
 8002b34:	e8df f003 	tbb	[pc, r3]
 8002b38:	0c090602 	.word	0x0c090602
  {
    case LIS2MDL_ODR_10Hz:
      *val = LIS2MDL_ODR_10Hz;
 8002b3c:	2300      	movs	r3, #0
 8002b3e:	7023      	strb	r3, [r4, #0]
      *val = LIS2MDL_ODR_10Hz;
      break;
  }

  return ret;
}
 8002b40:	b002      	add	sp, #8
 8002b42:	bd10      	pop	{r4, pc}
      *val = LIS2MDL_ODR_20Hz;
 8002b44:	2301      	movs	r3, #1
 8002b46:	7023      	strb	r3, [r4, #0]
      break;
 8002b48:	e7fa      	b.n	8002b40 <lis2mdl_data_rate_get+0x28>
      *val = LIS2MDL_ODR_50Hz;
 8002b4a:	2302      	movs	r3, #2
 8002b4c:	7023      	strb	r3, [r4, #0]
      break;
 8002b4e:	e7f7      	b.n	8002b40 <lis2mdl_data_rate_get+0x28>
      *val = LIS2MDL_ODR_100Hz;
 8002b50:	2303      	movs	r3, #3
 8002b52:	7023      	strb	r3, [r4, #0]
      break;
 8002b54:	e7f4      	b.n	8002b40 <lis2mdl_data_rate_get+0x28>
      *val = LIS2MDL_ODR_10Hz;
 8002b56:	2300      	movs	r3, #0
 8002b58:	7023      	strb	r3, [r4, #0]
  return ret;
 8002b5a:	e7f1      	b.n	8002b40 <lis2mdl_data_rate_get+0x28>

08002b5c <lis2mdl_block_data_update_set>:
  * @param  val   change the values of bdu in reg CFG_REG_C
  * @retval       interface status.(MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2mdl_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8002b5c:	b530      	push	{r4, r5, lr}
 8002b5e:	b083      	sub	sp, #12
 8002b60:	4604      	mov	r4, r0
 8002b62:	460d      	mov	r5, r1
  lis2mdl_cfg_reg_c_t reg;
  int32_t ret;

  ret = lis2mdl_read_reg(ctx, LIS2MDL_CFG_REG_C, (uint8_t *)&reg, 1);
 8002b64:	2301      	movs	r3, #1
 8002b66:	aa01      	add	r2, sp, #4
 8002b68:	2162      	movs	r1, #98	; 0x62
 8002b6a:	f7ff ff99 	bl	8002aa0 <lis2mdl_read_reg>

  if (ret == 0)
 8002b6e:	b108      	cbz	r0, 8002b74 <lis2mdl_block_data_update_set+0x18>
    reg.bdu = val;
    ret = lis2mdl_write_reg(ctx, LIS2MDL_CFG_REG_C, (uint8_t *)&reg, 1);
  }

  return ret;
}
 8002b70:	b003      	add	sp, #12
 8002b72:	bd30      	pop	{r4, r5, pc}
    reg.bdu = val;
 8002b74:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8002b78:	f365 1304 	bfi	r3, r5, #4, #1
 8002b7c:	f88d 3004 	strb.w	r3, [sp, #4]
    ret = lis2mdl_write_reg(ctx, LIS2MDL_CFG_REG_C, (uint8_t *)&reg, 1);
 8002b80:	2301      	movs	r3, #1
 8002b82:	aa01      	add	r2, sp, #4
 8002b84:	2162      	movs	r1, #98	; 0x62
 8002b86:	4620      	mov	r0, r4
 8002b88:	f7ff ff8f 	bl	8002aaa <lis2mdl_write_reg>
  return ret;
 8002b8c:	e7f0      	b.n	8002b70 <lis2mdl_block_data_update_set+0x14>

08002b8e <lis2mdl_magnetic_raw_get>:
  * @param  buff  that stores data read
  * @retval       interface status.(MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2mdl_magnetic_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 8002b8e:	b510      	push	{r4, lr}
 8002b90:	b082      	sub	sp, #8
 8002b92:	460c      	mov	r4, r1
  uint8_t buff[6];
  int32_t ret;

  ret = lis2mdl_read_reg(ctx, LIS2MDL_OUTX_L_REG, buff, 6);
 8002b94:	2306      	movs	r3, #6
 8002b96:	466a      	mov	r2, sp
 8002b98:	2168      	movs	r1, #104	; 0x68
 8002b9a:	f7ff ff81 	bl	8002aa0 <lis2mdl_read_reg>
  val[0] = (int16_t)buff[1];
 8002b9e:	f89d 2001 	ldrb.w	r2, [sp, #1]
 8002ba2:	8022      	strh	r2, [r4, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 8002ba4:	f89d 3000 	ldrb.w	r3, [sp]
 8002ba8:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8002bac:	8023      	strh	r3, [r4, #0]
  val[1] = (int16_t)buff[3];
 8002bae:	f89d 2003 	ldrb.w	r2, [sp, #3]
 8002bb2:	8062      	strh	r2, [r4, #2]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 8002bb4:	f89d 3002 	ldrb.w	r3, [sp, #2]
 8002bb8:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8002bbc:	8063      	strh	r3, [r4, #2]
  val[2] = (int16_t)buff[5];
 8002bbe:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8002bc2:	80a2      	strh	r2, [r4, #4]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 8002bc4:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8002bc8:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8002bcc:	80a3      	strh	r3, [r4, #4]

  return ret;
}
 8002bce:	b002      	add	sp, #8
 8002bd0:	bd10      	pop	{r4, pc}

08002bd2 <lis2mdl_device_id_get>:
  * @param  buff  that stores data read
  * @retval       interface status.(MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2mdl_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 8002bd2:	b508      	push	{r3, lr}
 8002bd4:	460a      	mov	r2, r1
  int32_t ret;

  ret = lis2mdl_read_reg(ctx, LIS2MDL_WHO_AM_I, buff, 1);
 8002bd6:	2301      	movs	r3, #1
 8002bd8:	214f      	movs	r1, #79	; 0x4f
 8002bda:	f7ff ff61 	bl	8002aa0 <lis2mdl_read_reg>

  return ret;
}
 8002bde:	bd08      	pop	{r3, pc}

08002be0 <lis2mdl_self_test_set>:
  * @param  val   change the values of self_test in reg CFG_REG_C
  * @retval       interface status.(MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2mdl_self_test_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8002be0:	b530      	push	{r4, r5, lr}
 8002be2:	b083      	sub	sp, #12
 8002be4:	4604      	mov	r4, r0
 8002be6:	460d      	mov	r5, r1
  lis2mdl_cfg_reg_c_t reg;
  int32_t ret;

  ret = lis2mdl_read_reg(ctx, LIS2MDL_CFG_REG_C, (uint8_t *)&reg, 1);
 8002be8:	2301      	movs	r3, #1
 8002bea:	aa01      	add	r2, sp, #4
 8002bec:	2162      	movs	r1, #98	; 0x62
 8002bee:	f7ff ff57 	bl	8002aa0 <lis2mdl_read_reg>

  if (ret == 0)
 8002bf2:	b108      	cbz	r0, 8002bf8 <lis2mdl_self_test_set+0x18>
    reg.self_test = val;
    ret = lis2mdl_write_reg(ctx, LIS2MDL_CFG_REG_C, (uint8_t *)&reg, 1);
  }

  return ret;
}
 8002bf4:	b003      	add	sp, #12
 8002bf6:	bd30      	pop	{r4, r5, pc}
    reg.self_test = val;
 8002bf8:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8002bfc:	f365 0341 	bfi	r3, r5, #1, #1
 8002c00:	f88d 3004 	strb.w	r3, [sp, #4]
    ret = lis2mdl_write_reg(ctx, LIS2MDL_CFG_REG_C, (uint8_t *)&reg, 1);
 8002c04:	2301      	movs	r3, #1
 8002c06:	aa01      	add	r2, sp, #4
 8002c08:	2162      	movs	r1, #98	; 0x62
 8002c0a:	4620      	mov	r0, r4
 8002c0c:	f7ff ff4d 	bl	8002aaa <lis2mdl_write_reg>
  return ret;
 8002c10:	e7f0      	b.n	8002bf4 <lis2mdl_self_test_set+0x14>

08002c12 <lis2mdl_i2c_interface_set>:
  * @retval       interface status.(MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2mdl_i2c_interface_set(stmdev_ctx_t *ctx,
                                  lis2mdl_i2c_dis_t val)
{
 8002c12:	b530      	push	{r4, r5, lr}
 8002c14:	b083      	sub	sp, #12
 8002c16:	4604      	mov	r4, r0
 8002c18:	460d      	mov	r5, r1
  lis2mdl_cfg_reg_c_t reg;
  int32_t ret;

  ret = lis2mdl_read_reg(ctx, LIS2MDL_CFG_REG_C, (uint8_t *)&reg, 1);
 8002c1a:	2301      	movs	r3, #1
 8002c1c:	aa01      	add	r2, sp, #4
 8002c1e:	2162      	movs	r1, #98	; 0x62
 8002c20:	f7ff ff3e 	bl	8002aa0 <lis2mdl_read_reg>

  if (ret == 0)
 8002c24:	b108      	cbz	r0, 8002c2a <lis2mdl_i2c_interface_set+0x18>
    reg.i2c_dis = (uint8_t)val;
    ret = lis2mdl_write_reg(ctx, LIS2MDL_CFG_REG_C, (uint8_t *)&reg, 1);
  }

  return ret;
}
 8002c26:	b003      	add	sp, #12
 8002c28:	bd30      	pop	{r4, r5, pc}
    reg.i2c_dis = (uint8_t)val;
 8002c2a:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8002c2e:	f365 1345 	bfi	r3, r5, #5, #1
 8002c32:	f88d 3004 	strb.w	r3, [sp, #4]
    ret = lis2mdl_write_reg(ctx, LIS2MDL_CFG_REG_C, (uint8_t *)&reg, 1);
 8002c36:	2301      	movs	r3, #1
 8002c38:	aa01      	add	r2, sp, #4
 8002c3a:	2162      	movs	r1, #98	; 0x62
 8002c3c:	4620      	mov	r0, r4
 8002c3e:	f7ff ff34 	bl	8002aaa <lis2mdl_write_reg>
  return ret;
 8002c42:	e7f0      	b.n	8002c26 <lis2mdl_i2c_interface_set+0x14>

08002c44 <LSM6DSO_GetCapabilities>:
int32_t LSM6DSO_GetCapabilities(LSM6DSO_Object_t *pObj, LSM6DSO_Capabilities_t *Capabilities)
{
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  Capabilities->Acc          = 1;
 8002c44:	2301      	movs	r3, #1
 8002c46:	700b      	strb	r3, [r1, #0]
  Capabilities->Gyro         = 1;
 8002c48:	704b      	strb	r3, [r1, #1]
  Capabilities->Magneto      = 0;
 8002c4a:	2000      	movs	r0, #0
 8002c4c:	7088      	strb	r0, [r1, #2]
  Capabilities->LowPower     = 0;
 8002c4e:	70c8      	strb	r0, [r1, #3]
  Capabilities->GyroMaxFS    = 2000;
 8002c50:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8002c54:	604b      	str	r3, [r1, #4]
  Capabilities->AccMaxFS     = 16;
 8002c56:	2310      	movs	r3, #16
 8002c58:	608b      	str	r3, [r1, #8]
  Capabilities->MagMaxFS     = 0;
 8002c5a:	60c8      	str	r0, [r1, #12]
  Capabilities->GyroMaxOdr   = 6660.0f;
 8002c5c:	4b02      	ldr	r3, [pc, #8]	; (8002c68 <LSM6DSO_GetCapabilities+0x24>)
 8002c5e:	610b      	str	r3, [r1, #16]
  Capabilities->AccMaxOdr    = 6660.0f;
 8002c60:	614b      	str	r3, [r1, #20]
  Capabilities->MagMaxOdr    = 0.0f;
 8002c62:	2300      	movs	r3, #0
 8002c64:	618b      	str	r3, [r1, #24]
  return LSM6DSO_OK;
}
 8002c66:	4770      	bx	lr
 8002c68:	45d02000 	.word	0x45d02000

08002c6c <LSM6DSO_ACC_SetOutputDataRate_When_Disabled>:
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LSM6DSO_ACC_SetOutputDataRate_When_Disabled(LSM6DSO_Object_t *pObj, float_t Odr)
{
  pObj->acc_odr = (Odr <=    1.6f) ? LSM6DSO_XL_ODR_1Hz6
                  : (Odr <=   12.5f) ? LSM6DSO_XL_ODR_12Hz5
 8002c6c:	eddf 7a2f 	vldr	s15, [pc, #188]	; 8002d2c <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xc0>
 8002c70:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8002c74:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c78:	d940      	bls.n	8002cfc <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x90>
 8002c7a:	eef2 7a09 	vmov.f32	s15, #41	; 0x41480000  12.5
 8002c7e:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8002c82:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c86:	d93e      	bls.n	8002d06 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x9a>
 8002c88:	eef3 7a0a 	vmov.f32	s15, #58	; 0x41d00000  26.0
 8002c8c:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8002c90:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c94:	d939      	bls.n	8002d0a <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x9e>
 8002c96:	eddf 7a26 	vldr	s15, [pc, #152]	; 8002d30 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xc4>
 8002c9a:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8002c9e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002ca2:	d934      	bls.n	8002d0e <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xa2>
 8002ca4:	eddf 7a23 	vldr	s15, [pc, #140]	; 8002d34 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xc8>
 8002ca8:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8002cac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002cb0:	d92f      	bls.n	8002d12 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xa6>
 8002cb2:	eddf 7a21 	vldr	s15, [pc, #132]	; 8002d38 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xcc>
 8002cb6:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8002cba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002cbe:	d92a      	bls.n	8002d16 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xaa>
 8002cc0:	eddf 7a1e 	vldr	s15, [pc, #120]	; 8002d3c <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xd0>
 8002cc4:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8002cc8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002ccc:	d925      	bls.n	8002d1a <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xae>
 8002cce:	eddf 7a1c 	vldr	s15, [pc, #112]	; 8002d40 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xd4>
 8002cd2:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8002cd6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002cda:	d920      	bls.n	8002d1e <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xb2>
 8002cdc:	eddf 7a19 	vldr	s15, [pc, #100]	; 8002d44 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xd8>
 8002ce0:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8002ce4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002ce8:	d91b      	bls.n	8002d22 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xb6>
 8002cea:	eddf 7a17 	vldr	s15, [pc, #92]	; 8002d48 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xdc>
 8002cee:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8002cf2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002cf6:	d816      	bhi.n	8002d26 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xba>
 8002cf8:	2309      	movs	r3, #9
 8002cfa:	e000      	b.n	8002cfe <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x92>
 8002cfc:	230b      	movs	r3, #11
  pObj->acc_odr = (Odr <=    1.6f) ? LSM6DSO_XL_ODR_1Hz6
 8002cfe:	f880 3033 	strb.w	r3, [r0, #51]	; 0x33
                  : (Odr <= 1667.0f) ? LSM6DSO_XL_ODR_1667Hz
                  : (Odr <= 3333.0f) ? LSM6DSO_XL_ODR_3333Hz
                  :                    LSM6DSO_XL_ODR_6667Hz;

  return LSM6DSO_OK;
}
 8002d02:	2000      	movs	r0, #0
 8002d04:	4770      	bx	lr
                  : (Odr <=   12.5f) ? LSM6DSO_XL_ODR_12Hz5
 8002d06:	2301      	movs	r3, #1
 8002d08:	e7f9      	b.n	8002cfe <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x92>
 8002d0a:	2302      	movs	r3, #2
 8002d0c:	e7f7      	b.n	8002cfe <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x92>
 8002d0e:	2303      	movs	r3, #3
 8002d10:	e7f5      	b.n	8002cfe <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x92>
 8002d12:	2304      	movs	r3, #4
 8002d14:	e7f3      	b.n	8002cfe <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x92>
 8002d16:	2305      	movs	r3, #5
 8002d18:	e7f1      	b.n	8002cfe <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x92>
 8002d1a:	2306      	movs	r3, #6
 8002d1c:	e7ef      	b.n	8002cfe <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x92>
 8002d1e:	2307      	movs	r3, #7
 8002d20:	e7ed      	b.n	8002cfe <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x92>
 8002d22:	2308      	movs	r3, #8
 8002d24:	e7eb      	b.n	8002cfe <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x92>
 8002d26:	230a      	movs	r3, #10
 8002d28:	e7e9      	b.n	8002cfe <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x92>
 8002d2a:	bf00      	nop
 8002d2c:	3fcccccd 	.word	0x3fcccccd
 8002d30:	42500000 	.word	0x42500000
 8002d34:	42d00000 	.word	0x42d00000
 8002d38:	43500000 	.word	0x43500000
 8002d3c:	43d08000 	.word	0x43d08000
 8002d40:	44504000 	.word	0x44504000
 8002d44:	44d06000 	.word	0x44d06000
 8002d48:	45505000 	.word	0x45505000

08002d4c <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled>:
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LSM6DSO_GYRO_SetOutputDataRate_When_Disabled(LSM6DSO_Object_t *pObj, float_t Odr)
{
  pObj->gyro_odr = (Odr <=   12.5f) ? LSM6DSO_GY_ODR_12Hz5
                   : (Odr <=   26.0f) ? LSM6DSO_GY_ODR_26Hz
 8002d4c:	eef2 7a09 	vmov.f32	s15, #41	; 0x41480000  12.5
 8002d50:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8002d54:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002d58:	d939      	bls.n	8002dce <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0x82>
 8002d5a:	eef3 7a0a 	vmov.f32	s15, #58	; 0x41d00000  26.0
 8002d5e:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8002d62:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002d66:	d937      	bls.n	8002dd8 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0x8c>
 8002d68:	eddf 7a23 	vldr	s15, [pc, #140]	; 8002df8 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xac>
 8002d6c:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8002d70:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002d74:	d932      	bls.n	8002ddc <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0x90>
 8002d76:	eddf 7a21 	vldr	s15, [pc, #132]	; 8002dfc <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xb0>
 8002d7a:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8002d7e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002d82:	d92d      	bls.n	8002de0 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0x94>
 8002d84:	eddf 7a1e 	vldr	s15, [pc, #120]	; 8002e00 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xb4>
 8002d88:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8002d8c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002d90:	d928      	bls.n	8002de4 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0x98>
 8002d92:	eddf 7a1c 	vldr	s15, [pc, #112]	; 8002e04 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xb8>
 8002d96:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8002d9a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002d9e:	d923      	bls.n	8002de8 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0x9c>
 8002da0:	eddf 7a19 	vldr	s15, [pc, #100]	; 8002e08 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xbc>
 8002da4:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8002da8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002dac:	d91e      	bls.n	8002dec <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xa0>
 8002dae:	eddf 7a17 	vldr	s15, [pc, #92]	; 8002e0c <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xc0>
 8002db2:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8002db6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002dba:	d919      	bls.n	8002df0 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xa4>
 8002dbc:	eddf 7a14 	vldr	s15, [pc, #80]	; 8002e10 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xc4>
 8002dc0:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8002dc4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002dc8:	d814      	bhi.n	8002df4 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xa8>
 8002dca:	2309      	movs	r3, #9
 8002dcc:	e000      	b.n	8002dd0 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0x84>
 8002dce:	2301      	movs	r3, #1
  pObj->gyro_odr = (Odr <=   12.5f) ? LSM6DSO_GY_ODR_12Hz5
 8002dd0:	f880 3034 	strb.w	r3, [r0, #52]	; 0x34
                   : (Odr <= 1667.0f) ? LSM6DSO_GY_ODR_1667Hz
                   : (Odr <= 3333.0f) ? LSM6DSO_GY_ODR_3333Hz
                   :                    LSM6DSO_GY_ODR_6667Hz;

  return LSM6DSO_OK;
}
 8002dd4:	2000      	movs	r0, #0
 8002dd6:	4770      	bx	lr
                   : (Odr <=   26.0f) ? LSM6DSO_GY_ODR_26Hz
 8002dd8:	2302      	movs	r3, #2
 8002dda:	e7f9      	b.n	8002dd0 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0x84>
 8002ddc:	2303      	movs	r3, #3
 8002dde:	e7f7      	b.n	8002dd0 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0x84>
 8002de0:	2304      	movs	r3, #4
 8002de2:	e7f5      	b.n	8002dd0 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0x84>
 8002de4:	2305      	movs	r3, #5
 8002de6:	e7f3      	b.n	8002dd0 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0x84>
 8002de8:	2306      	movs	r3, #6
 8002dea:	e7f1      	b.n	8002dd0 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0x84>
 8002dec:	2307      	movs	r3, #7
 8002dee:	e7ef      	b.n	8002dd0 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0x84>
 8002df0:	2308      	movs	r3, #8
 8002df2:	e7ed      	b.n	8002dd0 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0x84>
 8002df4:	230a      	movs	r3, #10
 8002df6:	e7eb      	b.n	8002dd0 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0x84>
 8002df8:	42500000 	.word	0x42500000
 8002dfc:	42d00000 	.word	0x42d00000
 8002e00:	43500000 	.word	0x43500000
 8002e04:	43d08000 	.word	0x43d08000
 8002e08:	44504000 	.word	0x44504000
 8002e0c:	44d06000 	.word	0x44d06000
 8002e10:	45505000 	.word	0x45505000

08002e14 <ReadRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t ReadRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8002e14:	b510      	push	{r4, lr}
  LSM6DSO_Object_t *pObj = (LSM6DSO_Object_t *)Handle;

  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 8002e16:	6944      	ldr	r4, [r0, #20]
 8002e18:	7b00      	ldrb	r0, [r0, #12]
 8002e1a:	47a0      	blx	r4
}
 8002e1c:	bd10      	pop	{r4, pc}

08002e1e <WriteRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t WriteRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8002e1e:	b510      	push	{r4, lr}
  LSM6DSO_Object_t *pObj = (LSM6DSO_Object_t *)Handle;

  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 8002e20:	6904      	ldr	r4, [r0, #16]
 8002e22:	7b00      	ldrb	r0, [r0, #12]
 8002e24:	47a0      	blx	r4
}
 8002e26:	bd10      	pop	{r4, pc}

08002e28 <LSM6DSO_ACC_Enable>:
  if (pObj->acc_is_enabled == 1U)
 8002e28:	f890 3031 	ldrb.w	r3, [r0, #49]	; 0x31
 8002e2c:	2b01      	cmp	r3, #1
 8002e2e:	d00b      	beq.n	8002e48 <LSM6DSO_ACC_Enable+0x20>
{
 8002e30:	b510      	push	{r4, lr}
 8002e32:	4604      	mov	r4, r0
  if (lsm6dso_xl_data_rate_set(&(pObj->Ctx), pObj->acc_odr) != LSM6DSO_OK)
 8002e34:	f890 1033 	ldrb.w	r1, [r0, #51]	; 0x33
 8002e38:	3020      	adds	r0, #32
 8002e3a:	f000 ffcd 	bl	8003dd8 <lsm6dso_xl_data_rate_set>
 8002e3e:	b928      	cbnz	r0, 8002e4c <LSM6DSO_ACC_Enable+0x24>
  pObj->acc_is_enabled = 1;
 8002e40:	2301      	movs	r3, #1
 8002e42:	f884 3031 	strb.w	r3, [r4, #49]	; 0x31
}
 8002e46:	bd10      	pop	{r4, pc}
    return LSM6DSO_OK;
 8002e48:	2000      	movs	r0, #0
}
 8002e4a:	4770      	bx	lr
    return LSM6DSO_ERROR;
 8002e4c:	f04f 30ff 	mov.w	r0, #4294967295
 8002e50:	e7f9      	b.n	8002e46 <LSM6DSO_ACC_Enable+0x1e>
	...

08002e54 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled>:
{
 8002e54:	b508      	push	{r3, lr}
            : (Odr <=   12.5f) ? LSM6DSO_XL_ODR_12Hz5
 8002e56:	eddf 7a31 	vldr	s15, [pc, #196]	; 8002f1c <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xc8>
 8002e5a:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8002e5e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002e62:	d940      	bls.n	8002ee6 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x92>
 8002e64:	eef2 7a09 	vmov.f32	s15, #41	; 0x41480000  12.5
 8002e68:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8002e6c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002e70:	d93f      	bls.n	8002ef2 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x9e>
 8002e72:	eef3 7a0a 	vmov.f32	s15, #58	; 0x41d00000  26.0
 8002e76:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8002e7a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002e7e:	d93a      	bls.n	8002ef6 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xa2>
 8002e80:	eddf 7a27 	vldr	s15, [pc, #156]	; 8002f20 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xcc>
 8002e84:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8002e88:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002e8c:	d935      	bls.n	8002efa <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xa6>
 8002e8e:	eddf 7a25 	vldr	s15, [pc, #148]	; 8002f24 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xd0>
 8002e92:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8002e96:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002e9a:	d930      	bls.n	8002efe <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xaa>
 8002e9c:	eddf 7a22 	vldr	s15, [pc, #136]	; 8002f28 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xd4>
 8002ea0:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8002ea4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002ea8:	d92b      	bls.n	8002f02 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xae>
 8002eaa:	eddf 7a20 	vldr	s15, [pc, #128]	; 8002f2c <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xd8>
 8002eae:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8002eb2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002eb6:	d926      	bls.n	8002f06 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xb2>
 8002eb8:	eddf 7a1d 	vldr	s15, [pc, #116]	; 8002f30 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xdc>
 8002ebc:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8002ec0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002ec4:	d921      	bls.n	8002f0a <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xb6>
 8002ec6:	eddf 7a1b 	vldr	s15, [pc, #108]	; 8002f34 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xe0>
 8002eca:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8002ece:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002ed2:	d91c      	bls.n	8002f0e <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xba>
 8002ed4:	eddf 7a18 	vldr	s15, [pc, #96]	; 8002f38 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xe4>
 8002ed8:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8002edc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002ee0:	d817      	bhi.n	8002f12 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xbe>
 8002ee2:	2109      	movs	r1, #9
 8002ee4:	e000      	b.n	8002ee8 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x94>
 8002ee6:	210b      	movs	r1, #11
  if (lsm6dso_xl_data_rate_set(&(pObj->Ctx), new_odr) != LSM6DSO_OK)
 8002ee8:	3020      	adds	r0, #32
 8002eea:	f000 ff75 	bl	8003dd8 <lsm6dso_xl_data_rate_set>
 8002eee:	b990      	cbnz	r0, 8002f16 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xc2>
}
 8002ef0:	bd08      	pop	{r3, pc}
            : (Odr <=   12.5f) ? LSM6DSO_XL_ODR_12Hz5
 8002ef2:	2101      	movs	r1, #1
 8002ef4:	e7f8      	b.n	8002ee8 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x94>
 8002ef6:	2102      	movs	r1, #2
 8002ef8:	e7f6      	b.n	8002ee8 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x94>
 8002efa:	2103      	movs	r1, #3
 8002efc:	e7f4      	b.n	8002ee8 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x94>
 8002efe:	2104      	movs	r1, #4
 8002f00:	e7f2      	b.n	8002ee8 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x94>
 8002f02:	2105      	movs	r1, #5
 8002f04:	e7f0      	b.n	8002ee8 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x94>
 8002f06:	2106      	movs	r1, #6
 8002f08:	e7ee      	b.n	8002ee8 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x94>
 8002f0a:	2107      	movs	r1, #7
 8002f0c:	e7ec      	b.n	8002ee8 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x94>
 8002f0e:	2108      	movs	r1, #8
 8002f10:	e7ea      	b.n	8002ee8 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x94>
 8002f12:	210a      	movs	r1, #10
 8002f14:	e7e8      	b.n	8002ee8 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x94>
    return LSM6DSO_ERROR;
 8002f16:	f04f 30ff 	mov.w	r0, #4294967295
 8002f1a:	e7e9      	b.n	8002ef0 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x9c>
 8002f1c:	3fcccccd 	.word	0x3fcccccd
 8002f20:	42500000 	.word	0x42500000
 8002f24:	42d00000 	.word	0x42d00000
 8002f28:	43500000 	.word	0x43500000
 8002f2c:	43d08000 	.word	0x43d08000
 8002f30:	44504000 	.word	0x44504000
 8002f34:	44d06000 	.word	0x44d06000
 8002f38:	45505000 	.word	0x45505000

08002f3c <LSM6DSO_ACC_SetFullScale>:
{
 8002f3c:	b508      	push	{r3, lr}
           : (FullScale <= 4) ? LSM6DSO_4g
 8002f3e:	2902      	cmp	r1, #2
 8002f40:	dd05      	ble.n	8002f4e <LSM6DSO_ACC_SetFullScale+0x12>
 8002f42:	2904      	cmp	r1, #4
 8002f44:	dd09      	ble.n	8002f5a <LSM6DSO_ACC_SetFullScale+0x1e>
 8002f46:	2908      	cmp	r1, #8
 8002f48:	dc09      	bgt.n	8002f5e <LSM6DSO_ACC_SetFullScale+0x22>
 8002f4a:	2103      	movs	r1, #3
 8002f4c:	e000      	b.n	8002f50 <LSM6DSO_ACC_SetFullScale+0x14>
 8002f4e:	2100      	movs	r1, #0
  if (lsm6dso_xl_full_scale_set(&(pObj->Ctx), new_fs) != LSM6DSO_OK)
 8002f50:	3020      	adds	r0, #32
 8002f52:	f000 fd2d 	bl	80039b0 <lsm6dso_xl_full_scale_set>
 8002f56:	b920      	cbnz	r0, 8002f62 <LSM6DSO_ACC_SetFullScale+0x26>
}
 8002f58:	bd08      	pop	{r3, pc}
           : (FullScale <= 4) ? LSM6DSO_4g
 8002f5a:	2102      	movs	r1, #2
 8002f5c:	e7f8      	b.n	8002f50 <LSM6DSO_ACC_SetFullScale+0x14>
 8002f5e:	2101      	movs	r1, #1
 8002f60:	e7f6      	b.n	8002f50 <LSM6DSO_ACC_SetFullScale+0x14>
    return LSM6DSO_ERROR;
 8002f62:	f04f 30ff 	mov.w	r0, #4294967295
 8002f66:	e7f7      	b.n	8002f58 <LSM6DSO_ACC_SetFullScale+0x1c>

08002f68 <LSM6DSO_GYRO_Enable>:
  if (pObj->gyro_is_enabled == 1U)
 8002f68:	f890 3032 	ldrb.w	r3, [r0, #50]	; 0x32
 8002f6c:	2b01      	cmp	r3, #1
 8002f6e:	d00b      	beq.n	8002f88 <LSM6DSO_GYRO_Enable+0x20>
{
 8002f70:	b510      	push	{r4, lr}
 8002f72:	4604      	mov	r4, r0
  if (lsm6dso_gy_data_rate_set(&(pObj->Ctx), pObj->gyro_odr) != LSM6DSO_OK)
 8002f74:	f890 1034 	ldrb.w	r1, [r0, #52]	; 0x34
 8002f78:	3020      	adds	r0, #32
 8002f7a:	f000 ffb5 	bl	8003ee8 <lsm6dso_gy_data_rate_set>
 8002f7e:	b928      	cbnz	r0, 8002f8c <LSM6DSO_GYRO_Enable+0x24>
  pObj->gyro_is_enabled = 1;
 8002f80:	2301      	movs	r3, #1
 8002f82:	f884 3032 	strb.w	r3, [r4, #50]	; 0x32
}
 8002f86:	bd10      	pop	{r4, pc}
    return LSM6DSO_OK;
 8002f88:	2000      	movs	r0, #0
}
 8002f8a:	4770      	bx	lr
    return LSM6DSO_ERROR;
 8002f8c:	f04f 30ff 	mov.w	r0, #4294967295
 8002f90:	e7f9      	b.n	8002f86 <LSM6DSO_GYRO_Enable+0x1e>
	...

08002f94 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled>:
{
 8002f94:	b508      	push	{r3, lr}
            : (Odr <=   26.0f) ? LSM6DSO_GY_ODR_26Hz
 8002f96:	eef2 7a09 	vmov.f32	s15, #41	; 0x41480000  12.5
 8002f9a:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8002f9e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002fa2:	d939      	bls.n	8003018 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x84>
 8002fa4:	eef3 7a0a 	vmov.f32	s15, #58	; 0x41d00000  26.0
 8002fa8:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8002fac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002fb0:	d938      	bls.n	8003024 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x90>
 8002fb2:	eddf 7a26 	vldr	s15, [pc, #152]	; 800304c <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xb8>
 8002fb6:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8002fba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002fbe:	d933      	bls.n	8003028 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x94>
 8002fc0:	eddf 7a23 	vldr	s15, [pc, #140]	; 8003050 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xbc>
 8002fc4:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8002fc8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002fcc:	d92e      	bls.n	800302c <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x98>
 8002fce:	eddf 7a21 	vldr	s15, [pc, #132]	; 8003054 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xc0>
 8002fd2:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8002fd6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002fda:	d929      	bls.n	8003030 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x9c>
 8002fdc:	eddf 7a1e 	vldr	s15, [pc, #120]	; 8003058 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xc4>
 8002fe0:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8002fe4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002fe8:	d924      	bls.n	8003034 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xa0>
 8002fea:	eddf 7a1c 	vldr	s15, [pc, #112]	; 800305c <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xc8>
 8002fee:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8002ff2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002ff6:	d91f      	bls.n	8003038 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xa4>
 8002ff8:	eddf 7a19 	vldr	s15, [pc, #100]	; 8003060 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xcc>
 8002ffc:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8003000:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003004:	d91a      	bls.n	800303c <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xa8>
 8003006:	eddf 7a17 	vldr	s15, [pc, #92]	; 8003064 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xd0>
 800300a:	eeb4 0ae7 	vcmpe.f32	s0, s15
 800300e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003012:	d815      	bhi.n	8003040 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xac>
 8003014:	2109      	movs	r1, #9
 8003016:	e000      	b.n	800301a <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x86>
 8003018:	2101      	movs	r1, #1
  if (lsm6dso_gy_data_rate_set(&(pObj->Ctx), new_odr) != LSM6DSO_OK)
 800301a:	3020      	adds	r0, #32
 800301c:	f000 ff64 	bl	8003ee8 <lsm6dso_gy_data_rate_set>
 8003020:	b980      	cbnz	r0, 8003044 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xb0>
}
 8003022:	bd08      	pop	{r3, pc}
            : (Odr <=   26.0f) ? LSM6DSO_GY_ODR_26Hz
 8003024:	2102      	movs	r1, #2
 8003026:	e7f8      	b.n	800301a <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x86>
 8003028:	2103      	movs	r1, #3
 800302a:	e7f6      	b.n	800301a <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x86>
 800302c:	2104      	movs	r1, #4
 800302e:	e7f4      	b.n	800301a <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x86>
 8003030:	2105      	movs	r1, #5
 8003032:	e7f2      	b.n	800301a <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x86>
 8003034:	2106      	movs	r1, #6
 8003036:	e7f0      	b.n	800301a <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x86>
 8003038:	2107      	movs	r1, #7
 800303a:	e7ee      	b.n	800301a <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x86>
 800303c:	2108      	movs	r1, #8
 800303e:	e7ec      	b.n	800301a <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x86>
 8003040:	210a      	movs	r1, #10
 8003042:	e7ea      	b.n	800301a <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x86>
    return LSM6DSO_ERROR;
 8003044:	f04f 30ff 	mov.w	r0, #4294967295
 8003048:	e7eb      	b.n	8003022 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x8e>
 800304a:	bf00      	nop
 800304c:	42500000 	.word	0x42500000
 8003050:	42d00000 	.word	0x42d00000
 8003054:	43500000 	.word	0x43500000
 8003058:	43d08000 	.word	0x43d08000
 800305c:	44504000 	.word	0x44504000
 8003060:	44d06000 	.word	0x44d06000
 8003064:	45505000 	.word	0x45505000

08003068 <LSM6DSO_Init>:
{
 8003068:	b538      	push	{r3, r4, r5, lr}
 800306a:	4605      	mov	r5, r0
  if (lsm6dso_i3c_disable_set(&(pObj->Ctx), LSM6DSO_I3C_DISABLE) != LSM6DSO_OK)
 800306c:	f100 0420 	add.w	r4, r0, #32
 8003070:	2180      	movs	r1, #128	; 0x80
 8003072:	4620      	mov	r0, r4
 8003074:	f000 fe24 	bl	8003cc0 <lsm6dso_i3c_disable_set>
 8003078:	bb60      	cbnz	r0, 80030d4 <LSM6DSO_Init+0x6c>
  if (lsm6dso_auto_increment_set(&(pObj->Ctx), PROPERTY_ENABLE) != LSM6DSO_OK)
 800307a:	2101      	movs	r1, #1
 800307c:	4620      	mov	r0, r4
 800307e:	f000 fe06 	bl	8003c8e <lsm6dso_auto_increment_set>
 8003082:	bb50      	cbnz	r0, 80030da <LSM6DSO_Init+0x72>
  if (lsm6dso_block_data_update_set(&(pObj->Ctx), PROPERTY_ENABLE) != LSM6DSO_OK)
 8003084:	2101      	movs	r1, #1
 8003086:	4620      	mov	r0, r4
 8003088:	f000 fd84 	bl	8003b94 <lsm6dso_block_data_update_set>
 800308c:	bb40      	cbnz	r0, 80030e0 <LSM6DSO_Init+0x78>
  if (lsm6dso_fifo_mode_set(&(pObj->Ctx), LSM6DSO_BYPASS_MODE) != LSM6DSO_OK)
 800308e:	2100      	movs	r1, #0
 8003090:	4620      	mov	r0, r4
 8003092:	f000 fe45 	bl	8003d20 <lsm6dso_fifo_mode_set>
 8003096:	bb30      	cbnz	r0, 80030e6 <LSM6DSO_Init+0x7e>
  pObj->acc_odr = LSM6DSO_XL_ODR_104Hz;
 8003098:	2304      	movs	r3, #4
 800309a:	f885 3033 	strb.w	r3, [r5, #51]	; 0x33
  if (lsm6dso_xl_data_rate_set(&(pObj->Ctx), LSM6DSO_XL_ODR_OFF) != LSM6DSO_OK)
 800309e:	2100      	movs	r1, #0
 80030a0:	4620      	mov	r0, r4
 80030a2:	f000 fe99 	bl	8003dd8 <lsm6dso_xl_data_rate_set>
 80030a6:	bb08      	cbnz	r0, 80030ec <LSM6DSO_Init+0x84>
  if (lsm6dso_xl_full_scale_set(&(pObj->Ctx), LSM6DSO_2g) != LSM6DSO_OK)
 80030a8:	2100      	movs	r1, #0
 80030aa:	4620      	mov	r0, r4
 80030ac:	f000 fc80 	bl	80039b0 <lsm6dso_xl_full_scale_set>
 80030b0:	b9f8      	cbnz	r0, 80030f2 <LSM6DSO_Init+0x8a>
  pObj->gyro_odr = LSM6DSO_GY_ODR_104Hz;
 80030b2:	2304      	movs	r3, #4
 80030b4:	f885 3034 	strb.w	r3, [r5, #52]	; 0x34
  if (lsm6dso_gy_data_rate_set(&(pObj->Ctx), LSM6DSO_GY_ODR_OFF) != LSM6DSO_OK)
 80030b8:	2100      	movs	r1, #0
 80030ba:	4620      	mov	r0, r4
 80030bc:	f000 ff14 	bl	8003ee8 <lsm6dso_gy_data_rate_set>
 80030c0:	b9d0      	cbnz	r0, 80030f8 <LSM6DSO_Init+0x90>
  if (lsm6dso_gy_full_scale_set(&(pObj->Ctx), LSM6DSO_2000dps) != LSM6DSO_OK)
 80030c2:	2106      	movs	r1, #6
 80030c4:	4620      	mov	r0, r4
 80030c6:	f000 fceb 	bl	8003aa0 <lsm6dso_gy_full_scale_set>
 80030ca:	b9c0      	cbnz	r0, 80030fe <LSM6DSO_Init+0x96>
  pObj->is_initialized = 1;
 80030cc:	2301      	movs	r3, #1
 80030ce:	f885 3030 	strb.w	r3, [r5, #48]	; 0x30
}
 80030d2:	bd38      	pop	{r3, r4, r5, pc}
    return LSM6DSO_ERROR;
 80030d4:	f04f 30ff 	mov.w	r0, #4294967295
 80030d8:	e7fb      	b.n	80030d2 <LSM6DSO_Init+0x6a>
    return LSM6DSO_ERROR;
 80030da:	f04f 30ff 	mov.w	r0, #4294967295
 80030de:	e7f8      	b.n	80030d2 <LSM6DSO_Init+0x6a>
    return LSM6DSO_ERROR;
 80030e0:	f04f 30ff 	mov.w	r0, #4294967295
 80030e4:	e7f5      	b.n	80030d2 <LSM6DSO_Init+0x6a>
    return LSM6DSO_ERROR;
 80030e6:	f04f 30ff 	mov.w	r0, #4294967295
 80030ea:	e7f2      	b.n	80030d2 <LSM6DSO_Init+0x6a>
    return LSM6DSO_ERROR;
 80030ec:	f04f 30ff 	mov.w	r0, #4294967295
 80030f0:	e7ef      	b.n	80030d2 <LSM6DSO_Init+0x6a>
    return LSM6DSO_ERROR;
 80030f2:	f04f 30ff 	mov.w	r0, #4294967295
 80030f6:	e7ec      	b.n	80030d2 <LSM6DSO_Init+0x6a>
    return LSM6DSO_ERROR;
 80030f8:	f04f 30ff 	mov.w	r0, #4294967295
 80030fc:	e7e9      	b.n	80030d2 <LSM6DSO_Init+0x6a>
    return LSM6DSO_ERROR;
 80030fe:	f04f 30ff 	mov.w	r0, #4294967295
 8003102:	e7e6      	b.n	80030d2 <LSM6DSO_Init+0x6a>

08003104 <LSM6DSO_GYRO_SetFullScale>:
{
 8003104:	b508      	push	{r3, lr}
           : (FullScale <= 250)  ? LSM6DSO_250dps
 8003106:	297d      	cmp	r1, #125	; 0x7d
 8003108:	dd09      	ble.n	800311e <LSM6DSO_GYRO_SetFullScale+0x1a>
 800310a:	29fa      	cmp	r1, #250	; 0xfa
 800310c:	dd0d      	ble.n	800312a <LSM6DSO_GYRO_SetFullScale+0x26>
 800310e:	f5b1 7ffa 	cmp.w	r1, #500	; 0x1f4
 8003112:	dd0c      	ble.n	800312e <LSM6DSO_GYRO_SetFullScale+0x2a>
 8003114:	f5b1 7f7a 	cmp.w	r1, #1000	; 0x3e8
 8003118:	dc0b      	bgt.n	8003132 <LSM6DSO_GYRO_SetFullScale+0x2e>
 800311a:	2104      	movs	r1, #4
 800311c:	e000      	b.n	8003120 <LSM6DSO_GYRO_SetFullScale+0x1c>
 800311e:	2101      	movs	r1, #1
  if (lsm6dso_gy_full_scale_set(&(pObj->Ctx), new_fs) != LSM6DSO_OK)
 8003120:	3020      	adds	r0, #32
 8003122:	f000 fcbd 	bl	8003aa0 <lsm6dso_gy_full_scale_set>
 8003126:	b930      	cbnz	r0, 8003136 <LSM6DSO_GYRO_SetFullScale+0x32>
}
 8003128:	bd08      	pop	{r3, pc}
           : (FullScale <= 250)  ? LSM6DSO_250dps
 800312a:	2100      	movs	r1, #0
 800312c:	e7f8      	b.n	8003120 <LSM6DSO_GYRO_SetFullScale+0x1c>
 800312e:	2102      	movs	r1, #2
 8003130:	e7f6      	b.n	8003120 <LSM6DSO_GYRO_SetFullScale+0x1c>
 8003132:	2106      	movs	r1, #6
 8003134:	e7f4      	b.n	8003120 <LSM6DSO_GYRO_SetFullScale+0x1c>
    return LSM6DSO_ERROR;
 8003136:	f04f 30ff 	mov.w	r0, #4294967295
 800313a:	e7f5      	b.n	8003128 <LSM6DSO_GYRO_SetFullScale+0x24>

0800313c <LSM6DSO_ReadID>:
{
 800313c:	b508      	push	{r3, lr}
  if (lsm6dso_device_id_get(&(pObj->Ctx), Id) != LSM6DSO_OK)
 800313e:	3020      	adds	r0, #32
 8003140:	f000 fd9e 	bl	8003c80 <lsm6dso_device_id_get>
 8003144:	b900      	cbnz	r0, 8003148 <LSM6DSO_ReadID+0xc>
}
 8003146:	bd08      	pop	{r3, pc}
    return LSM6DSO_ERROR;
 8003148:	f04f 30ff 	mov.w	r0, #4294967295
 800314c:	e7fb      	b.n	8003146 <LSM6DSO_ReadID+0xa>

0800314e <LSM6DSO_ACC_Disable>:
{
 800314e:	b538      	push	{r3, r4, r5, lr}
  if (pObj->acc_is_enabled == 0U)
 8003150:	f890 3031 	ldrb.w	r3, [r0, #49]	; 0x31
 8003154:	b90b      	cbnz	r3, 800315a <LSM6DSO_ACC_Disable+0xc>
    return LSM6DSO_OK;
 8003156:	2000      	movs	r0, #0
}
 8003158:	bd38      	pop	{r3, r4, r5, pc}
 800315a:	4604      	mov	r4, r0
  if (lsm6dso_xl_data_rate_get(&(pObj->Ctx), &pObj->acc_odr) != LSM6DSO_OK)
 800315c:	f100 0520 	add.w	r5, r0, #32
 8003160:	f100 0133 	add.w	r1, r0, #51	; 0x33
 8003164:	4628      	mov	r0, r5
 8003166:	f000 fc5e 	bl	8003a26 <lsm6dso_xl_data_rate_get>
 800316a:	b938      	cbnz	r0, 800317c <LSM6DSO_ACC_Disable+0x2e>
  if (lsm6dso_xl_data_rate_set(&(pObj->Ctx), LSM6DSO_XL_ODR_OFF) != LSM6DSO_OK)
 800316c:	2100      	movs	r1, #0
 800316e:	4628      	mov	r0, r5
 8003170:	f000 fe32 	bl	8003dd8 <lsm6dso_xl_data_rate_set>
 8003174:	b928      	cbnz	r0, 8003182 <LSM6DSO_ACC_Disable+0x34>
  pObj->acc_is_enabled = 0;
 8003176:	f884 0031 	strb.w	r0, [r4, #49]	; 0x31
  return LSM6DSO_OK;
 800317a:	e7ed      	b.n	8003158 <LSM6DSO_ACC_Disable+0xa>
    return LSM6DSO_ERROR;
 800317c:	f04f 30ff 	mov.w	r0, #4294967295
 8003180:	e7ea      	b.n	8003158 <LSM6DSO_ACC_Disable+0xa>
    return LSM6DSO_ERROR;
 8003182:	f04f 30ff 	mov.w	r0, #4294967295
 8003186:	e7e7      	b.n	8003158 <LSM6DSO_ACC_Disable+0xa>

08003188 <LSM6DSO_ACC_GetOutputDataRate>:
{
 8003188:	b510      	push	{r4, lr}
 800318a:	b082      	sub	sp, #8
 800318c:	460c      	mov	r4, r1
  if (lsm6dso_xl_data_rate_get(&(pObj->Ctx), &odr_low_level) != LSM6DSO_OK)
 800318e:	f10d 0107 	add.w	r1, sp, #7
 8003192:	3020      	adds	r0, #32
 8003194:	f000 fc47 	bl	8003a26 <lsm6dso_xl_data_rate_get>
 8003198:	2800      	cmp	r0, #0
 800319a:	d130      	bne.n	80031fe <LSM6DSO_ACC_GetOutputDataRate+0x76>
  switch (odr_low_level)
 800319c:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80031a0:	2b0b      	cmp	r3, #11
 80031a2:	d82f      	bhi.n	8003204 <LSM6DSO_ACC_GetOutputDataRate+0x7c>
 80031a4:	e8df f003 	tbb	[pc, r3]
 80031a8:	13100d06 	.word	0x13100d06
 80031ac:	1f1c1916 	.word	0x1f1c1916
 80031b0:	0a282522 	.word	0x0a282522
      *Odr = 0.0f;
 80031b4:	2300      	movs	r3, #0
 80031b6:	6023      	str	r3, [r4, #0]
}
 80031b8:	b002      	add	sp, #8
 80031ba:	bd10      	pop	{r4, pc}
      *Odr = 1.6f;
 80031bc:	4b13      	ldr	r3, [pc, #76]	; (800320c <LSM6DSO_ACC_GetOutputDataRate+0x84>)
 80031be:	6023      	str	r3, [r4, #0]
      break;
 80031c0:	e7fa      	b.n	80031b8 <LSM6DSO_ACC_GetOutputDataRate+0x30>
      *Odr = 12.5f;
 80031c2:	4b13      	ldr	r3, [pc, #76]	; (8003210 <LSM6DSO_ACC_GetOutputDataRate+0x88>)
 80031c4:	6023      	str	r3, [r4, #0]
      break;
 80031c6:	e7f7      	b.n	80031b8 <LSM6DSO_ACC_GetOutputDataRate+0x30>
      *Odr = 26.0f;
 80031c8:	4b12      	ldr	r3, [pc, #72]	; (8003214 <LSM6DSO_ACC_GetOutputDataRate+0x8c>)
 80031ca:	6023      	str	r3, [r4, #0]
      break;
 80031cc:	e7f4      	b.n	80031b8 <LSM6DSO_ACC_GetOutputDataRate+0x30>
      *Odr = 52.0f;
 80031ce:	4b12      	ldr	r3, [pc, #72]	; (8003218 <LSM6DSO_ACC_GetOutputDataRate+0x90>)
 80031d0:	6023      	str	r3, [r4, #0]
      break;
 80031d2:	e7f1      	b.n	80031b8 <LSM6DSO_ACC_GetOutputDataRate+0x30>
      *Odr = 104.0f;
 80031d4:	4b11      	ldr	r3, [pc, #68]	; (800321c <LSM6DSO_ACC_GetOutputDataRate+0x94>)
 80031d6:	6023      	str	r3, [r4, #0]
      break;
 80031d8:	e7ee      	b.n	80031b8 <LSM6DSO_ACC_GetOutputDataRate+0x30>
      *Odr = 208.0f;
 80031da:	4b11      	ldr	r3, [pc, #68]	; (8003220 <LSM6DSO_ACC_GetOutputDataRate+0x98>)
 80031dc:	6023      	str	r3, [r4, #0]
      break;
 80031de:	e7eb      	b.n	80031b8 <LSM6DSO_ACC_GetOutputDataRate+0x30>
      *Odr = 417.0f;
 80031e0:	4b10      	ldr	r3, [pc, #64]	; (8003224 <LSM6DSO_ACC_GetOutputDataRate+0x9c>)
 80031e2:	6023      	str	r3, [r4, #0]
      break;
 80031e4:	e7e8      	b.n	80031b8 <LSM6DSO_ACC_GetOutputDataRate+0x30>
      *Odr = 833.0f;
 80031e6:	4b10      	ldr	r3, [pc, #64]	; (8003228 <LSM6DSO_ACC_GetOutputDataRate+0xa0>)
 80031e8:	6023      	str	r3, [r4, #0]
      break;
 80031ea:	e7e5      	b.n	80031b8 <LSM6DSO_ACC_GetOutputDataRate+0x30>
      *Odr = 1667.0f;
 80031ec:	4b0f      	ldr	r3, [pc, #60]	; (800322c <LSM6DSO_ACC_GetOutputDataRate+0xa4>)
 80031ee:	6023      	str	r3, [r4, #0]
      break;
 80031f0:	e7e2      	b.n	80031b8 <LSM6DSO_ACC_GetOutputDataRate+0x30>
      *Odr = 3333.0f;
 80031f2:	4b0f      	ldr	r3, [pc, #60]	; (8003230 <LSM6DSO_ACC_GetOutputDataRate+0xa8>)
 80031f4:	6023      	str	r3, [r4, #0]
      break;
 80031f6:	e7df      	b.n	80031b8 <LSM6DSO_ACC_GetOutputDataRate+0x30>
      *Odr = 6667.0f;
 80031f8:	4b0e      	ldr	r3, [pc, #56]	; (8003234 <LSM6DSO_ACC_GetOutputDataRate+0xac>)
 80031fa:	6023      	str	r3, [r4, #0]
      break;
 80031fc:	e7dc      	b.n	80031b8 <LSM6DSO_ACC_GetOutputDataRate+0x30>
    return LSM6DSO_ERROR;
 80031fe:	f04f 30ff 	mov.w	r0, #4294967295
 8003202:	e7d9      	b.n	80031b8 <LSM6DSO_ACC_GetOutputDataRate+0x30>
  switch (odr_low_level)
 8003204:	f04f 30ff 	mov.w	r0, #4294967295
 8003208:	e7d6      	b.n	80031b8 <LSM6DSO_ACC_GetOutputDataRate+0x30>
 800320a:	bf00      	nop
 800320c:	3fcccccd 	.word	0x3fcccccd
 8003210:	41480000 	.word	0x41480000
 8003214:	41d00000 	.word	0x41d00000
 8003218:	42500000 	.word	0x42500000
 800321c:	42d00000 	.word	0x42d00000
 8003220:	43500000 	.word	0x43500000
 8003224:	43d08000 	.word	0x43d08000
 8003228:	44504000 	.word	0x44504000
 800322c:	44d06000 	.word	0x44d06000
 8003230:	45505000 	.word	0x45505000
 8003234:	45d05800 	.word	0x45d05800

08003238 <LSM6DSO_ACC_GetSensitivity>:
{
 8003238:	b510      	push	{r4, lr}
 800323a:	b082      	sub	sp, #8
 800323c:	460c      	mov	r4, r1
  if (lsm6dso_xl_full_scale_get(&(pObj->Ctx), &full_scale) != LSM6DSO_OK)
 800323e:	f10d 0107 	add.w	r1, sp, #7
 8003242:	3020      	adds	r0, #32
 8003244:	f000 fbcd 	bl	80039e2 <lsm6dso_xl_full_scale_get>
 8003248:	b9a0      	cbnz	r0, 8003274 <LSM6DSO_ACC_GetSensitivity+0x3c>
  switch (full_scale)
 800324a:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800324e:	2b03      	cmp	r3, #3
 8003250:	d813      	bhi.n	800327a <LSM6DSO_ACC_GetSensitivity+0x42>
 8003252:	e8df f003 	tbb	[pc, r3]
 8003256:	0c02      	.short	0x0c02
 8003258:	0906      	.short	0x0906
      *Sensitivity = LSM6DSO_ACC_SENSITIVITY_FS_2G;
 800325a:	4b09      	ldr	r3, [pc, #36]	; (8003280 <LSM6DSO_ACC_GetSensitivity+0x48>)
 800325c:	6023      	str	r3, [r4, #0]
}
 800325e:	b002      	add	sp, #8
 8003260:	bd10      	pop	{r4, pc}
      *Sensitivity = LSM6DSO_ACC_SENSITIVITY_FS_4G;
 8003262:	4b08      	ldr	r3, [pc, #32]	; (8003284 <LSM6DSO_ACC_GetSensitivity+0x4c>)
 8003264:	6023      	str	r3, [r4, #0]
      break;
 8003266:	e7fa      	b.n	800325e <LSM6DSO_ACC_GetSensitivity+0x26>
      *Sensitivity = LSM6DSO_ACC_SENSITIVITY_FS_8G;
 8003268:	4b07      	ldr	r3, [pc, #28]	; (8003288 <LSM6DSO_ACC_GetSensitivity+0x50>)
 800326a:	6023      	str	r3, [r4, #0]
      break;
 800326c:	e7f7      	b.n	800325e <LSM6DSO_ACC_GetSensitivity+0x26>
      *Sensitivity = LSM6DSO_ACC_SENSITIVITY_FS_16G;
 800326e:	4b07      	ldr	r3, [pc, #28]	; (800328c <LSM6DSO_ACC_GetSensitivity+0x54>)
 8003270:	6023      	str	r3, [r4, #0]
      break;
 8003272:	e7f4      	b.n	800325e <LSM6DSO_ACC_GetSensitivity+0x26>
    return LSM6DSO_ERROR;
 8003274:	f04f 30ff 	mov.w	r0, #4294967295
 8003278:	e7f1      	b.n	800325e <LSM6DSO_ACC_GetSensitivity+0x26>
  switch (full_scale)
 800327a:	f04f 30ff 	mov.w	r0, #4294967295
 800327e:	e7ee      	b.n	800325e <LSM6DSO_ACC_GetSensitivity+0x26>
 8003280:	3d79db23 	.word	0x3d79db23
 8003284:	3df9db23 	.word	0x3df9db23
 8003288:	3e79db23 	.word	0x3e79db23
 800328c:	3ef9db23 	.word	0x3ef9db23

08003290 <LSM6DSO_ACC_GetFullScale>:
{
 8003290:	b510      	push	{r4, lr}
 8003292:	b082      	sub	sp, #8
 8003294:	460c      	mov	r4, r1
  if (lsm6dso_xl_full_scale_get(&(pObj->Ctx), &fs_low_level) != LSM6DSO_OK)
 8003296:	f10d 0107 	add.w	r1, sp, #7
 800329a:	3020      	adds	r0, #32
 800329c:	f000 fba1 	bl	80039e2 <lsm6dso_xl_full_scale_get>
 80032a0:	b9a0      	cbnz	r0, 80032cc <LSM6DSO_ACC_GetFullScale+0x3c>
  switch (fs_low_level)
 80032a2:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80032a6:	2b03      	cmp	r3, #3
 80032a8:	d813      	bhi.n	80032d2 <LSM6DSO_ACC_GetFullScale+0x42>
 80032aa:	e8df f003 	tbb	[pc, r3]
 80032ae:	0c02      	.short	0x0c02
 80032b0:	0906      	.short	0x0906
      *FullScale =  2;
 80032b2:	2302      	movs	r3, #2
 80032b4:	6023      	str	r3, [r4, #0]
}
 80032b6:	b002      	add	sp, #8
 80032b8:	bd10      	pop	{r4, pc}
      *FullScale =  4;
 80032ba:	2304      	movs	r3, #4
 80032bc:	6023      	str	r3, [r4, #0]
      break;
 80032be:	e7fa      	b.n	80032b6 <LSM6DSO_ACC_GetFullScale+0x26>
      *FullScale =  8;
 80032c0:	2308      	movs	r3, #8
 80032c2:	6023      	str	r3, [r4, #0]
      break;
 80032c4:	e7f7      	b.n	80032b6 <LSM6DSO_ACC_GetFullScale+0x26>
      *FullScale = 16;
 80032c6:	2310      	movs	r3, #16
 80032c8:	6023      	str	r3, [r4, #0]
      break;
 80032ca:	e7f4      	b.n	80032b6 <LSM6DSO_ACC_GetFullScale+0x26>
    return LSM6DSO_ERROR;
 80032cc:	f04f 30ff 	mov.w	r0, #4294967295
 80032d0:	e7f1      	b.n	80032b6 <LSM6DSO_ACC_GetFullScale+0x26>
  switch (fs_low_level)
 80032d2:	f04f 30ff 	mov.w	r0, #4294967295
 80032d6:	e7ee      	b.n	80032b6 <LSM6DSO_ACC_GetFullScale+0x26>

080032d8 <LSM6DSO_ACC_GetAxesRaw>:
{
 80032d8:	b510      	push	{r4, lr}
 80032da:	b082      	sub	sp, #8
 80032dc:	460c      	mov	r4, r1
  if (lsm6dso_acceleration_raw_get(&(pObj->Ctx), data_raw.i16bit) != LSM6DSO_OK)
 80032de:	4669      	mov	r1, sp
 80032e0:	3020      	adds	r0, #32
 80032e2:	f000 fc92 	bl	8003c0a <lsm6dso_acceleration_raw_get>
 80032e6:	b950      	cbnz	r0, 80032fe <LSM6DSO_ACC_GetAxesRaw+0x26>
  Value->x = data_raw.i16bit[0];
 80032e8:	f9bd 3000 	ldrsh.w	r3, [sp]
 80032ec:	8023      	strh	r3, [r4, #0]
  Value->y = data_raw.i16bit[1];
 80032ee:	f9bd 3002 	ldrsh.w	r3, [sp, #2]
 80032f2:	8063      	strh	r3, [r4, #2]
  Value->z = data_raw.i16bit[2];
 80032f4:	f9bd 3004 	ldrsh.w	r3, [sp, #4]
 80032f8:	80a3      	strh	r3, [r4, #4]
}
 80032fa:	b002      	add	sp, #8
 80032fc:	bd10      	pop	{r4, pc}
    return LSM6DSO_ERROR;
 80032fe:	f04f 30ff 	mov.w	r0, #4294967295
 8003302:	e7fa      	b.n	80032fa <LSM6DSO_ACC_GetAxesRaw+0x22>

08003304 <LSM6DSO_ACC_GetAxes>:
{
 8003304:	b530      	push	{r4, r5, lr}
 8003306:	b085      	sub	sp, #20
 8003308:	4605      	mov	r5, r0
 800330a:	460c      	mov	r4, r1
  float_t sensitivity = 0.0f;
 800330c:	2300      	movs	r3, #0
 800330e:	9301      	str	r3, [sp, #4]
  if (lsm6dso_acceleration_raw_get(&(pObj->Ctx), data_raw.i16bit) != LSM6DSO_OK)
 8003310:	a902      	add	r1, sp, #8
 8003312:	3020      	adds	r0, #32
 8003314:	f000 fc79 	bl	8003c0a <lsm6dso_acceleration_raw_get>
 8003318:	bb60      	cbnz	r0, 8003374 <LSM6DSO_ACC_GetAxes+0x70>
  if (LSM6DSO_ACC_GetSensitivity(pObj, &sensitivity) != LSM6DSO_OK)
 800331a:	a901      	add	r1, sp, #4
 800331c:	4628      	mov	r0, r5
 800331e:	f7ff ff8b 	bl	8003238 <LSM6DSO_ACC_GetSensitivity>
 8003322:	bb50      	cbnz	r0, 800337a <LSM6DSO_ACC_GetAxes+0x76>
  Acceleration->x = (int32_t)((float_t)((float_t)data_raw.i16bit[0] * sensitivity));
 8003324:	f9bd 3008 	ldrsh.w	r3, [sp, #8]
 8003328:	ee07 3a10 	vmov	s14, r3
 800332c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8003330:	eddd 7a01 	vldr	s15, [sp, #4]
 8003334:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003338:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 800333c:	ed84 7a00 	vstr	s14, [r4]
  Acceleration->y = (int32_t)((float_t)((float_t)data_raw.i16bit[1] * sensitivity));
 8003340:	f9bd 300a 	ldrsh.w	r3, [sp, #10]
 8003344:	ee07 3a10 	vmov	s14, r3
 8003348:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800334c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003350:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 8003354:	ed84 7a01 	vstr	s14, [r4, #4]
  Acceleration->z = (int32_t)((float_t)((float_t)data_raw.i16bit[2] * sensitivity));
 8003358:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 800335c:	ee07 3a10 	vmov	s14, r3
 8003360:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8003364:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003368:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800336c:	edc4 7a02 	vstr	s15, [r4, #8]
}
 8003370:	b005      	add	sp, #20
 8003372:	bd30      	pop	{r4, r5, pc}
    return LSM6DSO_ERROR;
 8003374:	f04f 30ff 	mov.w	r0, #4294967295
 8003378:	e7fa      	b.n	8003370 <LSM6DSO_ACC_GetAxes+0x6c>
    return LSM6DSO_ERROR;
 800337a:	f04f 30ff 	mov.w	r0, #4294967295
 800337e:	e7f7      	b.n	8003370 <LSM6DSO_ACC_GetAxes+0x6c>

08003380 <LSM6DSO_GYRO_Disable>:
{
 8003380:	b538      	push	{r3, r4, r5, lr}
  if (pObj->gyro_is_enabled == 0U)
 8003382:	f890 3032 	ldrb.w	r3, [r0, #50]	; 0x32
 8003386:	b90b      	cbnz	r3, 800338c <LSM6DSO_GYRO_Disable+0xc>
    return LSM6DSO_OK;
 8003388:	2000      	movs	r0, #0
}
 800338a:	bd38      	pop	{r3, r4, r5, pc}
 800338c:	4604      	mov	r4, r0
  if (lsm6dso_gy_data_rate_get(&(pObj->Ctx), &pObj->gyro_odr) != LSM6DSO_OK)
 800338e:	f100 0520 	add.w	r5, r0, #32
 8003392:	f100 0134 	add.w	r1, r0, #52	; 0x34
 8003396:	4628      	mov	r0, r5
 8003398:	f000 fbc2 	bl	8003b20 <lsm6dso_gy_data_rate_get>
 800339c:	b938      	cbnz	r0, 80033ae <LSM6DSO_GYRO_Disable+0x2e>
  if (lsm6dso_gy_data_rate_set(&(pObj->Ctx), LSM6DSO_GY_ODR_OFF) != LSM6DSO_OK)
 800339e:	2100      	movs	r1, #0
 80033a0:	4628      	mov	r0, r5
 80033a2:	f000 fda1 	bl	8003ee8 <lsm6dso_gy_data_rate_set>
 80033a6:	b928      	cbnz	r0, 80033b4 <LSM6DSO_GYRO_Disable+0x34>
  pObj->gyro_is_enabled = 0;
 80033a8:	f884 0032 	strb.w	r0, [r4, #50]	; 0x32
  return LSM6DSO_OK;
 80033ac:	e7ed      	b.n	800338a <LSM6DSO_GYRO_Disable+0xa>
    return LSM6DSO_ERROR;
 80033ae:	f04f 30ff 	mov.w	r0, #4294967295
 80033b2:	e7ea      	b.n	800338a <LSM6DSO_GYRO_Disable+0xa>
    return LSM6DSO_ERROR;
 80033b4:	f04f 30ff 	mov.w	r0, #4294967295
 80033b8:	e7e7      	b.n	800338a <LSM6DSO_GYRO_Disable+0xa>

080033ba <LSM6DSO_DeInit>:
{
 80033ba:	b510      	push	{r4, lr}
 80033bc:	4604      	mov	r4, r0
  if (LSM6DSO_ACC_Disable(pObj) != LSM6DSO_OK)
 80033be:	f7ff fec6 	bl	800314e <LSM6DSO_ACC_Disable>
 80033c2:	b950      	cbnz	r0, 80033da <LSM6DSO_DeInit+0x20>
  if (LSM6DSO_GYRO_Disable(pObj) != LSM6DSO_OK)
 80033c4:	4620      	mov	r0, r4
 80033c6:	f7ff ffdb 	bl	8003380 <LSM6DSO_GYRO_Disable>
 80033ca:	b948      	cbnz	r0, 80033e0 <LSM6DSO_DeInit+0x26>
  pObj->acc_odr = LSM6DSO_XL_ODR_OFF;
 80033cc:	f884 0033 	strb.w	r0, [r4, #51]	; 0x33
  pObj->gyro_odr = LSM6DSO_GY_ODR_OFF;
 80033d0:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
  pObj->is_initialized = 0;
 80033d4:	f884 0030 	strb.w	r0, [r4, #48]	; 0x30
}
 80033d8:	bd10      	pop	{r4, pc}
    return LSM6DSO_ERROR;
 80033da:	f04f 30ff 	mov.w	r0, #4294967295
 80033de:	e7fb      	b.n	80033d8 <LSM6DSO_DeInit+0x1e>
    return LSM6DSO_ERROR;
 80033e0:	f04f 30ff 	mov.w	r0, #4294967295
 80033e4:	e7f8      	b.n	80033d8 <LSM6DSO_DeInit+0x1e>
	...

080033e8 <LSM6DSO_GYRO_GetOutputDataRate>:
{
 80033e8:	b510      	push	{r4, lr}
 80033ea:	b082      	sub	sp, #8
 80033ec:	460c      	mov	r4, r1
  if (lsm6dso_gy_data_rate_get(&(pObj->Ctx), &odr_low_level) != LSM6DSO_OK)
 80033ee:	f10d 0107 	add.w	r1, sp, #7
 80033f2:	3020      	adds	r0, #32
 80033f4:	f000 fb94 	bl	8003b20 <lsm6dso_gy_data_rate_get>
 80033f8:	2800      	cmp	r0, #0
 80033fa:	d12d      	bne.n	8003458 <LSM6DSO_GYRO_GetOutputDataRate+0x70>
  switch (odr_low_level)
 80033fc:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8003400:	2b0a      	cmp	r3, #10
 8003402:	d82c      	bhi.n	800345e <LSM6DSO_GYRO_GetOutputDataRate+0x76>
 8003404:	e8df f003 	tbb	[pc, r3]
 8003408:	100d0a06 	.word	0x100d0a06
 800340c:	1c191613 	.word	0x1c191613
 8003410:	221f      	.short	0x221f
 8003412:	25          	.byte	0x25
 8003413:	00          	.byte	0x00
      *Odr = 0.0f;
 8003414:	2300      	movs	r3, #0
 8003416:	6023      	str	r3, [r4, #0]
}
 8003418:	b002      	add	sp, #8
 800341a:	bd10      	pop	{r4, pc}
      *Odr = 12.5f;
 800341c:	4b11      	ldr	r3, [pc, #68]	; (8003464 <LSM6DSO_GYRO_GetOutputDataRate+0x7c>)
 800341e:	6023      	str	r3, [r4, #0]
      break;
 8003420:	e7fa      	b.n	8003418 <LSM6DSO_GYRO_GetOutputDataRate+0x30>
      *Odr = 26.0f;
 8003422:	4b11      	ldr	r3, [pc, #68]	; (8003468 <LSM6DSO_GYRO_GetOutputDataRate+0x80>)
 8003424:	6023      	str	r3, [r4, #0]
      break;
 8003426:	e7f7      	b.n	8003418 <LSM6DSO_GYRO_GetOutputDataRate+0x30>
      *Odr = 52.0f;
 8003428:	4b10      	ldr	r3, [pc, #64]	; (800346c <LSM6DSO_GYRO_GetOutputDataRate+0x84>)
 800342a:	6023      	str	r3, [r4, #0]
      break;
 800342c:	e7f4      	b.n	8003418 <LSM6DSO_GYRO_GetOutputDataRate+0x30>
      *Odr = 104.0f;
 800342e:	4b10      	ldr	r3, [pc, #64]	; (8003470 <LSM6DSO_GYRO_GetOutputDataRate+0x88>)
 8003430:	6023      	str	r3, [r4, #0]
      break;
 8003432:	e7f1      	b.n	8003418 <LSM6DSO_GYRO_GetOutputDataRate+0x30>
      *Odr = 208.0f;
 8003434:	4b0f      	ldr	r3, [pc, #60]	; (8003474 <LSM6DSO_GYRO_GetOutputDataRate+0x8c>)
 8003436:	6023      	str	r3, [r4, #0]
      break;
 8003438:	e7ee      	b.n	8003418 <LSM6DSO_GYRO_GetOutputDataRate+0x30>
      *Odr = 417.0f;
 800343a:	4b0f      	ldr	r3, [pc, #60]	; (8003478 <LSM6DSO_GYRO_GetOutputDataRate+0x90>)
 800343c:	6023      	str	r3, [r4, #0]
      break;
 800343e:	e7eb      	b.n	8003418 <LSM6DSO_GYRO_GetOutputDataRate+0x30>
      *Odr = 833.0f;
 8003440:	4b0e      	ldr	r3, [pc, #56]	; (800347c <LSM6DSO_GYRO_GetOutputDataRate+0x94>)
 8003442:	6023      	str	r3, [r4, #0]
      break;
 8003444:	e7e8      	b.n	8003418 <LSM6DSO_GYRO_GetOutputDataRate+0x30>
      *Odr = 1667.0f;
 8003446:	4b0e      	ldr	r3, [pc, #56]	; (8003480 <LSM6DSO_GYRO_GetOutputDataRate+0x98>)
 8003448:	6023      	str	r3, [r4, #0]
      break;
 800344a:	e7e5      	b.n	8003418 <LSM6DSO_GYRO_GetOutputDataRate+0x30>
      *Odr = 3333.0f;
 800344c:	4b0d      	ldr	r3, [pc, #52]	; (8003484 <LSM6DSO_GYRO_GetOutputDataRate+0x9c>)
 800344e:	6023      	str	r3, [r4, #0]
      break;
 8003450:	e7e2      	b.n	8003418 <LSM6DSO_GYRO_GetOutputDataRate+0x30>
      *Odr = 6667.0f;
 8003452:	4b0d      	ldr	r3, [pc, #52]	; (8003488 <LSM6DSO_GYRO_GetOutputDataRate+0xa0>)
 8003454:	6023      	str	r3, [r4, #0]
      break;
 8003456:	e7df      	b.n	8003418 <LSM6DSO_GYRO_GetOutputDataRate+0x30>
    return LSM6DSO_ERROR;
 8003458:	f04f 30ff 	mov.w	r0, #4294967295
 800345c:	e7dc      	b.n	8003418 <LSM6DSO_GYRO_GetOutputDataRate+0x30>
  switch (odr_low_level)
 800345e:	f04f 30ff 	mov.w	r0, #4294967295
 8003462:	e7d9      	b.n	8003418 <LSM6DSO_GYRO_GetOutputDataRate+0x30>
 8003464:	41480000 	.word	0x41480000
 8003468:	41d00000 	.word	0x41d00000
 800346c:	42500000 	.word	0x42500000
 8003470:	42d00000 	.word	0x42d00000
 8003474:	43500000 	.word	0x43500000
 8003478:	43d08000 	.word	0x43d08000
 800347c:	44504000 	.word	0x44504000
 8003480:	44d06000 	.word	0x44d06000
 8003484:	45505000 	.word	0x45505000
 8003488:	45d05800 	.word	0x45d05800

0800348c <LSM6DSO_GYRO_GetSensitivity>:
{
 800348c:	b510      	push	{r4, lr}
 800348e:	b082      	sub	sp, #8
 8003490:	460c      	mov	r4, r1
  if (lsm6dso_gy_full_scale_get(&(pObj->Ctx), &full_scale) != LSM6DSO_OK)
 8003492:	f10d 0107 	add.w	r1, sp, #7
 8003496:	3020      	adds	r0, #32
 8003498:	f000 fb1b 	bl	8003ad2 <lsm6dso_gy_full_scale_get>
 800349c:	b9c8      	cbnz	r0, 80034d2 <LSM6DSO_GYRO_GetSensitivity+0x46>
  switch (full_scale)
 800349e:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80034a2:	2b06      	cmp	r3, #6
 80034a4:	d818      	bhi.n	80034d8 <LSM6DSO_GYRO_GetSensitivity+0x4c>
 80034a6:	e8df f003 	tbb	[pc, r3]
 80034aa:	0408      	.short	0x0408
 80034ac:	170e170b 	.word	0x170e170b
 80034b0:	11          	.byte	0x11
 80034b1:	00          	.byte	0x00
      *Sensitivity = LSM6DSO_GYRO_SENSITIVITY_FS_125DPS;
 80034b2:	4b0b      	ldr	r3, [pc, #44]	; (80034e0 <LSM6DSO_GYRO_GetSensitivity+0x54>)
 80034b4:	6023      	str	r3, [r4, #0]
}
 80034b6:	b002      	add	sp, #8
 80034b8:	bd10      	pop	{r4, pc}
      *Sensitivity = LSM6DSO_GYRO_SENSITIVITY_FS_250DPS;
 80034ba:	4b0a      	ldr	r3, [pc, #40]	; (80034e4 <LSM6DSO_GYRO_GetSensitivity+0x58>)
 80034bc:	6023      	str	r3, [r4, #0]
      break;
 80034be:	e7fa      	b.n	80034b6 <LSM6DSO_GYRO_GetSensitivity+0x2a>
      *Sensitivity = LSM6DSO_GYRO_SENSITIVITY_FS_500DPS;
 80034c0:	4b09      	ldr	r3, [pc, #36]	; (80034e8 <LSM6DSO_GYRO_GetSensitivity+0x5c>)
 80034c2:	6023      	str	r3, [r4, #0]
      break;
 80034c4:	e7f7      	b.n	80034b6 <LSM6DSO_GYRO_GetSensitivity+0x2a>
      *Sensitivity = LSM6DSO_GYRO_SENSITIVITY_FS_1000DPS;
 80034c6:	4b09      	ldr	r3, [pc, #36]	; (80034ec <LSM6DSO_GYRO_GetSensitivity+0x60>)
 80034c8:	6023      	str	r3, [r4, #0]
      break;
 80034ca:	e7f4      	b.n	80034b6 <LSM6DSO_GYRO_GetSensitivity+0x2a>
      *Sensitivity = LSM6DSO_GYRO_SENSITIVITY_FS_2000DPS;
 80034cc:	4b08      	ldr	r3, [pc, #32]	; (80034f0 <LSM6DSO_GYRO_GetSensitivity+0x64>)
 80034ce:	6023      	str	r3, [r4, #0]
      break;
 80034d0:	e7f1      	b.n	80034b6 <LSM6DSO_GYRO_GetSensitivity+0x2a>
    return LSM6DSO_ERROR;
 80034d2:	f04f 30ff 	mov.w	r0, #4294967295
 80034d6:	e7ee      	b.n	80034b6 <LSM6DSO_GYRO_GetSensitivity+0x2a>
  switch (full_scale)
 80034d8:	f04f 30ff 	mov.w	r0, #4294967295
 80034dc:	e7eb      	b.n	80034b6 <LSM6DSO_GYRO_GetSensitivity+0x2a>
 80034de:	bf00      	nop
 80034e0:	408c0000 	.word	0x408c0000
 80034e4:	410c0000 	.word	0x410c0000
 80034e8:	418c0000 	.word	0x418c0000
 80034ec:	420c0000 	.word	0x420c0000
 80034f0:	428c0000 	.word	0x428c0000

080034f4 <LSM6DSO_GYRO_GetFullScale>:
{
 80034f4:	b510      	push	{r4, lr}
 80034f6:	b082      	sub	sp, #8
 80034f8:	460c      	mov	r4, r1
  if (lsm6dso_gy_full_scale_get(&(pObj->Ctx), &fs_low_level) != LSM6DSO_OK)
 80034fa:	f10d 0107 	add.w	r1, sp, #7
 80034fe:	3020      	adds	r0, #32
 8003500:	f000 fae7 	bl	8003ad2 <lsm6dso_gy_full_scale_get>
 8003504:	b9e0      	cbnz	r0, 8003540 <LSM6DSO_GYRO_GetFullScale+0x4c>
  switch (fs_low_level)
 8003506:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800350a:	2b06      	cmp	r3, #6
 800350c:	d81b      	bhi.n	8003546 <LSM6DSO_GYRO_GetFullScale+0x52>
 800350e:	e8df f003 	tbb	[pc, r3]
 8003512:	0408      	.short	0x0408
 8003514:	1a0f1a0b 	.word	0x1a0f1a0b
 8003518:	13          	.byte	0x13
 8003519:	00          	.byte	0x00
      *FullScale =  125;
 800351a:	237d      	movs	r3, #125	; 0x7d
 800351c:	6023      	str	r3, [r4, #0]
}
 800351e:	b002      	add	sp, #8
 8003520:	bd10      	pop	{r4, pc}
      *FullScale =  250;
 8003522:	23fa      	movs	r3, #250	; 0xfa
 8003524:	6023      	str	r3, [r4, #0]
      break;
 8003526:	e7fa      	b.n	800351e <LSM6DSO_GYRO_GetFullScale+0x2a>
      *FullScale =  500;
 8003528:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800352c:	6023      	str	r3, [r4, #0]
      break;
 800352e:	e7f6      	b.n	800351e <LSM6DSO_GYRO_GetFullScale+0x2a>
      *FullScale = 1000;
 8003530:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003534:	6023      	str	r3, [r4, #0]
      break;
 8003536:	e7f2      	b.n	800351e <LSM6DSO_GYRO_GetFullScale+0x2a>
      *FullScale = 2000;
 8003538:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800353c:	6023      	str	r3, [r4, #0]
      break;
 800353e:	e7ee      	b.n	800351e <LSM6DSO_GYRO_GetFullScale+0x2a>
    return LSM6DSO_ERROR;
 8003540:	f04f 30ff 	mov.w	r0, #4294967295
 8003544:	e7eb      	b.n	800351e <LSM6DSO_GYRO_GetFullScale+0x2a>
  switch (fs_low_level)
 8003546:	f04f 30ff 	mov.w	r0, #4294967295
 800354a:	e7e8      	b.n	800351e <LSM6DSO_GYRO_GetFullScale+0x2a>

0800354c <LSM6DSO_GYRO_GetAxesRaw>:
{
 800354c:	b510      	push	{r4, lr}
 800354e:	b082      	sub	sp, #8
 8003550:	460c      	mov	r4, r1
  if (lsm6dso_angular_rate_raw_get(&(pObj->Ctx), data_raw.i16bit) != LSM6DSO_OK)
 8003552:	4669      	mov	r1, sp
 8003554:	3020      	adds	r0, #32
 8003556:	f000 fb36 	bl	8003bc6 <lsm6dso_angular_rate_raw_get>
 800355a:	b950      	cbnz	r0, 8003572 <LSM6DSO_GYRO_GetAxesRaw+0x26>
  Value->x = data_raw.i16bit[0];
 800355c:	f9bd 3000 	ldrsh.w	r3, [sp]
 8003560:	8023      	strh	r3, [r4, #0]
  Value->y = data_raw.i16bit[1];
 8003562:	f9bd 3002 	ldrsh.w	r3, [sp, #2]
 8003566:	8063      	strh	r3, [r4, #2]
  Value->z = data_raw.i16bit[2];
 8003568:	f9bd 3004 	ldrsh.w	r3, [sp, #4]
 800356c:	80a3      	strh	r3, [r4, #4]
}
 800356e:	b002      	add	sp, #8
 8003570:	bd10      	pop	{r4, pc}
    return LSM6DSO_ERROR;
 8003572:	f04f 30ff 	mov.w	r0, #4294967295
 8003576:	e7fa      	b.n	800356e <LSM6DSO_GYRO_GetAxesRaw+0x22>

08003578 <LSM6DSO_GYRO_GetAxes>:
{
 8003578:	b530      	push	{r4, r5, lr}
 800357a:	b085      	sub	sp, #20
 800357c:	4605      	mov	r5, r0
 800357e:	460c      	mov	r4, r1
  if (lsm6dso_angular_rate_raw_get(&(pObj->Ctx), data_raw.i16bit) != LSM6DSO_OK)
 8003580:	a902      	add	r1, sp, #8
 8003582:	3020      	adds	r0, #32
 8003584:	f000 fb1f 	bl	8003bc6 <lsm6dso_angular_rate_raw_get>
 8003588:	bb60      	cbnz	r0, 80035e4 <LSM6DSO_GYRO_GetAxes+0x6c>
  if (LSM6DSO_GYRO_GetSensitivity(pObj, &sensitivity) != LSM6DSO_OK)
 800358a:	a901      	add	r1, sp, #4
 800358c:	4628      	mov	r0, r5
 800358e:	f7ff ff7d 	bl	800348c <LSM6DSO_GYRO_GetSensitivity>
 8003592:	bb50      	cbnz	r0, 80035ea <LSM6DSO_GYRO_GetAxes+0x72>
  AngularRate->x = (int32_t)((float_t)((float_t)data_raw.i16bit[0] * sensitivity));
 8003594:	f9bd 3008 	ldrsh.w	r3, [sp, #8]
 8003598:	ee07 3a10 	vmov	s14, r3
 800359c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80035a0:	eddd 7a01 	vldr	s15, [sp, #4]
 80035a4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80035a8:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 80035ac:	ed84 7a00 	vstr	s14, [r4]
  AngularRate->y = (int32_t)((float_t)((float_t)data_raw.i16bit[1] * sensitivity));
 80035b0:	f9bd 300a 	ldrsh.w	r3, [sp, #10]
 80035b4:	ee07 3a10 	vmov	s14, r3
 80035b8:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80035bc:	ee27 7a27 	vmul.f32	s14, s14, s15
 80035c0:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 80035c4:	ed84 7a01 	vstr	s14, [r4, #4]
  AngularRate->z = (int32_t)((float_t)((float_t)data_raw.i16bit[2] * sensitivity));
 80035c8:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 80035cc:	ee07 3a10 	vmov	s14, r3
 80035d0:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80035d4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80035d8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80035dc:	edc4 7a02 	vstr	s15, [r4, #8]
}
 80035e0:	b005      	add	sp, #20
 80035e2:	bd30      	pop	{r4, r5, pc}
    return LSM6DSO_ERROR;
 80035e4:	f04f 30ff 	mov.w	r0, #4294967295
 80035e8:	e7fa      	b.n	80035e0 <LSM6DSO_GYRO_GetAxes+0x68>
    return LSM6DSO_ERROR;
 80035ea:	f04f 30ff 	mov.w	r0, #4294967295
 80035ee:	e7f7      	b.n	80035e0 <LSM6DSO_GYRO_GetAxes+0x68>

080035f0 <LSM6DSO_ACC_SetOutputDataRate_With_Mode>:
{
 80035f0:	b530      	push	{r4, r5, lr}
 80035f2:	ed2d 8b02 	vpush	{d8}
 80035f6:	b083      	sub	sp, #12
 80035f8:	4604      	mov	r4, r0
 80035fa:	eeb0 8a40 	vmov.f32	s16, s0
  switch (Mode)
 80035fe:	2901      	cmp	r1, #1
 8003600:	d061      	beq.n	80036c6 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0xd6>
 8003602:	2902      	cmp	r1, #2
 8003604:	f000 80aa 	beq.w	800375c <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x16c>
 8003608:	b129      	cbz	r1, 8003616 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x26>
 800360a:	f04f 30ff 	mov.w	r0, #4294967295
}
 800360e:	b003      	add	sp, #12
 8003610:	ecbd 8b02 	vpop	{d8}
 8003614:	bd30      	pop	{r4, r5, pc}
      if (lsm6dso_read_reg(&(pObj->Ctx), LSM6DSO_CTRL5_C, (uint8_t *)&val1, 1) != LSM6DSO_OK)
 8003616:	f100 0520 	add.w	r5, r0, #32
 800361a:	2301      	movs	r3, #1
 800361c:	466a      	mov	r2, sp
 800361e:	2114      	movs	r1, #20
 8003620:	4628      	mov	r0, r5
 8003622:	f000 f9bb 	bl	800399c <lsm6dso_read_reg>
 8003626:	2800      	cmp	r0, #0
 8003628:	d147      	bne.n	80036ba <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0xca>
      if (val1.xl_ulp_en != 0U)
 800362a:	f99d 3000 	ldrsb.w	r3, [sp]
 800362e:	2b00      	cmp	r3, #0
 8003630:	da10      	bge.n	8003654 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x64>
        if (pObj->acc_is_enabled == 1U)
 8003632:	f894 3031 	ldrb.w	r3, [r4, #49]	; 0x31
 8003636:	2b01      	cmp	r3, #1
 8003638:	d02a      	beq.n	8003690 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0xa0>
        val1.xl_ulp_en = 0;
 800363a:	f89d 3000 	ldrb.w	r3, [sp]
 800363e:	f36f 13c7 	bfc	r3, #7, #1
 8003642:	f88d 3000 	strb.w	r3, [sp]
        if (lsm6dso_write_reg(&(pObj->Ctx), LSM6DSO_CTRL5_C, (uint8_t *)&val1, 1) != LSM6DSO_OK)
 8003646:	2301      	movs	r3, #1
 8003648:	466a      	mov	r2, sp
 800364a:	2114      	movs	r1, #20
 800364c:	4628      	mov	r0, r5
 800364e:	f000 f9aa 	bl	80039a6 <lsm6dso_write_reg>
 8003652:	bb90      	cbnz	r0, 80036ba <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0xca>
      if (lsm6dso_read_reg(&(pObj->Ctx), LSM6DSO_CTRL6_C, (uint8_t *)&val2, 1) != LSM6DSO_OK)
 8003654:	2301      	movs	r3, #1
 8003656:	aa01      	add	r2, sp, #4
 8003658:	2115      	movs	r1, #21
 800365a:	4628      	mov	r0, r5
 800365c:	f000 f99e 	bl	800399c <lsm6dso_read_reg>
 8003660:	bb58      	cbnz	r0, 80036ba <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0xca>
      if (val2.xl_hm_mode != 0U)
 8003662:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8003666:	f013 0f10 	tst.w	r3, #16
 800366a:	d118      	bne.n	800369e <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0xae>
      if (newOdr < 12.5f)
 800366c:	eef2 7a09 	vmov.f32	s15, #41	; 0x41480000  12.5
 8003670:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8003674:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003678:	d422      	bmi.n	80036c0 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0xd0>
  if (pObj->acc_is_enabled == 1U)
 800367a:	f894 3031 	ldrb.w	r3, [r4, #49]	; 0x31
 800367e:	2b01      	cmp	r3, #1
 8003680:	f000 80c4 	beq.w	800380c <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x21c>
    ret = LSM6DSO_ACC_SetOutputDataRate_When_Disabled(pObj, newOdr);
 8003684:	eeb0 0a48 	vmov.f32	s0, s16
 8003688:	4620      	mov	r0, r4
 800368a:	f7ff faef 	bl	8002c6c <LSM6DSO_ACC_SetOutputDataRate_When_Disabled>
 800368e:	e7be      	b.n	800360e <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x1e>
          if (lsm6dso_xl_data_rate_set(&(pObj->Ctx), LSM6DSO_XL_ODR_OFF) != LSM6DSO_OK)
 8003690:	2100      	movs	r1, #0
 8003692:	4628      	mov	r0, r5
 8003694:	f000 fba0 	bl	8003dd8 <lsm6dso_xl_data_rate_set>
 8003698:	2800      	cmp	r0, #0
 800369a:	d0ce      	beq.n	800363a <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x4a>
 800369c:	e00d      	b.n	80036ba <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0xca>
        val2.xl_hm_mode = 0U;
 800369e:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80036a2:	f36f 1304 	bfc	r3, #4, #1
 80036a6:	f88d 3004 	strb.w	r3, [sp, #4]
        if (lsm6dso_write_reg(&(pObj->Ctx), LSM6DSO_CTRL6_C, (uint8_t *)&val2, 1) != LSM6DSO_OK)
 80036aa:	2301      	movs	r3, #1
 80036ac:	aa01      	add	r2, sp, #4
 80036ae:	2115      	movs	r1, #21
 80036b0:	4628      	mov	r0, r5
 80036b2:	f000 f978 	bl	80039a6 <lsm6dso_write_reg>
 80036b6:	2800      	cmp	r0, #0
 80036b8:	d0d8      	beq.n	800366c <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x7c>
        return LSM6DSO_ERROR;
 80036ba:	f04f 30ff 	mov.w	r0, #4294967295
 80036be:	e7a6      	b.n	800360e <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x1e>
        newOdr = 12.5f;
 80036c0:	eeb2 8a09 	vmov.f32	s16, #41	; 0x41480000  12.5
  if (ret == LSM6DSO_ERROR)
 80036c4:	e7d9      	b.n	800367a <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x8a>
      if (lsm6dso_read_reg(&(pObj->Ctx), LSM6DSO_CTRL5_C, (uint8_t *)&val1, 1) != LSM6DSO_OK)
 80036c6:	f100 0520 	add.w	r5, r0, #32
 80036ca:	2301      	movs	r3, #1
 80036cc:	466a      	mov	r2, sp
 80036ce:	2114      	movs	r1, #20
 80036d0:	4628      	mov	r0, r5
 80036d2:	f000 f963 	bl	800399c <lsm6dso_read_reg>
 80036d6:	2800      	cmp	r0, #0
 80036d8:	d13d      	bne.n	8003756 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x166>
      if (val1.xl_ulp_en != 0U)
 80036da:	f99d 3000 	ldrsb.w	r3, [sp]
 80036de:	2b00      	cmp	r3, #0
 80036e0:	da10      	bge.n	8003704 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x114>
        if (pObj->acc_is_enabled == 1U)
 80036e2:	f894 3031 	ldrb.w	r3, [r4, #49]	; 0x31
 80036e6:	2b01      	cmp	r3, #1
 80036e8:	d022      	beq.n	8003730 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x140>
        val1.xl_ulp_en = 0;
 80036ea:	f89d 3000 	ldrb.w	r3, [sp]
 80036ee:	f36f 13c7 	bfc	r3, #7, #1
 80036f2:	f88d 3000 	strb.w	r3, [sp]
        if (lsm6dso_write_reg(&(pObj->Ctx), LSM6DSO_CTRL5_C, (uint8_t *)&val1, 1) != LSM6DSO_OK)
 80036f6:	2301      	movs	r3, #1
 80036f8:	466a      	mov	r2, sp
 80036fa:	2114      	movs	r1, #20
 80036fc:	4628      	mov	r0, r5
 80036fe:	f000 f952 	bl	80039a6 <lsm6dso_write_reg>
 8003702:	bb40      	cbnz	r0, 8003756 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x166>
      if (lsm6dso_read_reg(&(pObj->Ctx), LSM6DSO_CTRL6_C, (uint8_t *)&val2, 1) != LSM6DSO_OK)
 8003704:	2301      	movs	r3, #1
 8003706:	aa01      	add	r2, sp, #4
 8003708:	2115      	movs	r1, #21
 800370a:	4628      	mov	r0, r5
 800370c:	f000 f946 	bl	800399c <lsm6dso_read_reg>
 8003710:	bb08      	cbnz	r0, 8003756 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x166>
      if (val2.xl_hm_mode == 0U)
 8003712:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8003716:	f013 0f10 	tst.w	r3, #16
 800371a:	d010      	beq.n	800373e <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x14e>
      if (newOdr > 208.0f)
 800371c:	eddf 7a3e 	vldr	s15, [pc, #248]	; 8003818 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x228>
 8003720:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8003724:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003728:	dda7      	ble.n	800367a <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x8a>
        newOdr = 208.0f;
 800372a:	ed9f 8a3b 	vldr	s16, [pc, #236]	; 8003818 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x228>
  if (ret == LSM6DSO_ERROR)
 800372e:	e7a4      	b.n	800367a <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x8a>
          if (lsm6dso_xl_data_rate_set(&(pObj->Ctx), LSM6DSO_XL_ODR_OFF) != LSM6DSO_OK)
 8003730:	2100      	movs	r1, #0
 8003732:	4628      	mov	r0, r5
 8003734:	f000 fb50 	bl	8003dd8 <lsm6dso_xl_data_rate_set>
 8003738:	2800      	cmp	r0, #0
 800373a:	d0d6      	beq.n	80036ea <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0xfa>
 800373c:	e00b      	b.n	8003756 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x166>
        val2.xl_hm_mode = 1U;
 800373e:	f043 0310 	orr.w	r3, r3, #16
 8003742:	f88d 3004 	strb.w	r3, [sp, #4]
        if (lsm6dso_write_reg(&(pObj->Ctx), LSM6DSO_CTRL6_C, (uint8_t *)&val2, 1) != LSM6DSO_OK)
 8003746:	2301      	movs	r3, #1
 8003748:	aa01      	add	r2, sp, #4
 800374a:	2115      	movs	r1, #21
 800374c:	4628      	mov	r0, r5
 800374e:	f000 f92a 	bl	80039a6 <lsm6dso_write_reg>
 8003752:	2800      	cmp	r0, #0
 8003754:	d0e2      	beq.n	800371c <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x12c>
        return LSM6DSO_ERROR;
 8003756:	f04f 30ff 	mov.w	r0, #4294967295
 800375a:	e758      	b.n	800360e <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x1e>
      if (lsm6dso_read_reg(&(pObj->Ctx), LSM6DSO_CTRL6_C, (uint8_t *)&val2, 1) != LSM6DSO_OK)
 800375c:	f100 0520 	add.w	r5, r0, #32
 8003760:	2301      	movs	r3, #1
 8003762:	aa01      	add	r2, sp, #4
 8003764:	2115      	movs	r1, #21
 8003766:	4628      	mov	r0, r5
 8003768:	f000 f918 	bl	800399c <lsm6dso_read_reg>
 800376c:	2800      	cmp	r0, #0
 800376e:	d143      	bne.n	80037f8 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x208>
      if (val2.xl_hm_mode != 0U)
 8003770:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8003774:	f013 0f10 	tst.w	r3, #16
 8003778:	d12a      	bne.n	80037d0 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x1e0>
      if (pObj->gyro_is_enabled == 1U)
 800377a:	f894 3032 	ldrb.w	r3, [r4, #50]	; 0x32
 800377e:	2b01      	cmp	r3, #1
 8003780:	d035      	beq.n	80037ee <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x1fe>
      if (lsm6dso_read_reg(&(pObj->Ctx), LSM6DSO_CTRL5_C, (uint8_t *)&val1, 1) != LSM6DSO_OK)
 8003782:	2301      	movs	r3, #1
 8003784:	466a      	mov	r2, sp
 8003786:	2114      	movs	r1, #20
 8003788:	4628      	mov	r0, r5
 800378a:	f000 f907 	bl	800399c <lsm6dso_read_reg>
 800378e:	bb98      	cbnz	r0, 80037f8 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x208>
      if (val1.xl_ulp_en == 0U)
 8003790:	f99d 3000 	ldrsb.w	r3, [sp]
 8003794:	2b00      	cmp	r3, #0
 8003796:	db10      	blt.n	80037ba <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x1ca>
        if (pObj->acc_is_enabled == 1U)
 8003798:	f894 3031 	ldrb.w	r3, [r4, #49]	; 0x31
 800379c:	2b01      	cmp	r3, #1
 800379e:	d02e      	beq.n	80037fe <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x20e>
        val1.xl_ulp_en = 1U;
 80037a0:	f89d 3000 	ldrb.w	r3, [sp]
 80037a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80037a8:	f88d 3000 	strb.w	r3, [sp]
        if (lsm6dso_write_reg(&(pObj->Ctx), LSM6DSO_CTRL5_C, (uint8_t *)&val1, 1) != LSM6DSO_OK)
 80037ac:	2301      	movs	r3, #1
 80037ae:	466a      	mov	r2, sp
 80037b0:	2114      	movs	r1, #20
 80037b2:	4628      	mov	r0, r5
 80037b4:	f000 f8f7 	bl	80039a6 <lsm6dso_write_reg>
 80037b8:	b9f0      	cbnz	r0, 80037f8 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x208>
      if (newOdr > 208.0f)
 80037ba:	eddf 7a17 	vldr	s15, [pc, #92]	; 8003818 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x228>
 80037be:	eeb4 8ae7 	vcmpe.f32	s16, s15
 80037c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80037c6:	f77f af58 	ble.w	800367a <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x8a>
        newOdr = 208.0f;
 80037ca:	ed9f 8a13 	vldr	s16, [pc, #76]	; 8003818 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x228>
  if (ret == LSM6DSO_ERROR)
 80037ce:	e754      	b.n	800367a <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x8a>
        val2.xl_hm_mode = 0U;
 80037d0:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80037d4:	f36f 1304 	bfc	r3, #4, #1
 80037d8:	f88d 3004 	strb.w	r3, [sp, #4]
        if (lsm6dso_write_reg(&(pObj->Ctx), LSM6DSO_CTRL6_C, (uint8_t *)&val2, 1) != LSM6DSO_OK)
 80037dc:	2301      	movs	r3, #1
 80037de:	aa01      	add	r2, sp, #4
 80037e0:	2115      	movs	r1, #21
 80037e2:	4628      	mov	r0, r5
 80037e4:	f000 f8df 	bl	80039a6 <lsm6dso_write_reg>
 80037e8:	2800      	cmp	r0, #0
 80037ea:	d0c6      	beq.n	800377a <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x18a>
 80037ec:	e004      	b.n	80037f8 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x208>
        if (LSM6DSO_GYRO_Disable(pObj) != LSM6DSO_OK)
 80037ee:	4620      	mov	r0, r4
 80037f0:	f7ff fdc6 	bl	8003380 <LSM6DSO_GYRO_Disable>
 80037f4:	2800      	cmp	r0, #0
 80037f6:	d0c4      	beq.n	8003782 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x192>
        return LSM6DSO_ERROR;
 80037f8:	f04f 30ff 	mov.w	r0, #4294967295
 80037fc:	e707      	b.n	800360e <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x1e>
          if (lsm6dso_xl_data_rate_set(&(pObj->Ctx), LSM6DSO_XL_ODR_OFF) != LSM6DSO_OK)
 80037fe:	2100      	movs	r1, #0
 8003800:	4628      	mov	r0, r5
 8003802:	f000 fae9 	bl	8003dd8 <lsm6dso_xl_data_rate_set>
 8003806:	2800      	cmp	r0, #0
 8003808:	d0ca      	beq.n	80037a0 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x1b0>
 800380a:	e7f5      	b.n	80037f8 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x208>
    ret = LSM6DSO_ACC_SetOutputDataRate_When_Enabled(pObj, newOdr);
 800380c:	eeb0 0a48 	vmov.f32	s0, s16
 8003810:	4620      	mov	r0, r4
 8003812:	f7ff fb1f 	bl	8002e54 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled>
 8003816:	e6fa      	b.n	800360e <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x1e>
 8003818:	43500000 	.word	0x43500000

0800381c <LSM6DSO_ACC_SetOutputDataRate>:
{
 800381c:	b508      	push	{r3, lr}
  return LSM6DSO_ACC_SetOutputDataRate_With_Mode(pObj, Odr, LSM6DSO_ACC_HIGH_PERFORMANCE_MODE);
 800381e:	2100      	movs	r1, #0
 8003820:	f7ff fee6 	bl	80035f0 <LSM6DSO_ACC_SetOutputDataRate_With_Mode>
}
 8003824:	bd08      	pop	{r3, pc}
	...

08003828 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode>:
{
 8003828:	b530      	push	{r4, r5, lr}
 800382a:	ed2d 8b02 	vpush	{d8}
 800382e:	b083      	sub	sp, #12
 8003830:	4604      	mov	r4, r0
 8003832:	eeb0 8a40 	vmov.f32	s16, s0
  switch (Mode)
 8003836:	b139      	cbz	r1, 8003848 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x20>
 8003838:	2901      	cmp	r1, #1
 800383a:	d02d      	beq.n	8003898 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x70>
 800383c:	f04f 30ff 	mov.w	r0, #4294967295
}
 8003840:	b003      	add	sp, #12
 8003842:	ecbd 8b02 	vpop	{d8}
 8003846:	bd30      	pop	{r4, r5, pc}
      if (lsm6dso_read_reg(&(pObj->Ctx), LSM6DSO_CTRL7_G, (uint8_t *)&val1, 1) != LSM6DSO_OK)
 8003848:	f100 0520 	add.w	r5, r0, #32
 800384c:	2301      	movs	r3, #1
 800384e:	aa01      	add	r2, sp, #4
 8003850:	2116      	movs	r1, #22
 8003852:	4628      	mov	r0, r5
 8003854:	f000 f8a2 	bl	800399c <lsm6dso_read_reg>
 8003858:	b9d8      	cbnz	r0, 8003892 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x6a>
      if (val1.g_hm_mode != 0U)
 800385a:	f99d 3004 	ldrsb.w	r3, [sp, #4]
 800385e:	2b00      	cmp	r3, #0
 8003860:	db09      	blt.n	8003876 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x4e>
  if (pObj->gyro_is_enabled == 1U)
 8003862:	f894 3032 	ldrb.w	r3, [r4, #50]	; 0x32
 8003866:	2b01      	cmp	r3, #1
 8003868:	d03e      	beq.n	80038e8 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0xc0>
    ret = LSM6DSO_GYRO_SetOutputDataRate_When_Disabled(pObj, newOdr);
 800386a:	eeb0 0a48 	vmov.f32	s0, s16
 800386e:	4620      	mov	r0, r4
 8003870:	f7ff fa6c 	bl	8002d4c <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled>
 8003874:	e7e4      	b.n	8003840 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x18>
        val1.g_hm_mode = 0U;
 8003876:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800387a:	f36f 13c7 	bfc	r3, #7, #1
 800387e:	f88d 3004 	strb.w	r3, [sp, #4]
        if (lsm6dso_write_reg(&(pObj->Ctx), LSM6DSO_CTRL7_G, (uint8_t *)&val1, 1) != LSM6DSO_OK)
 8003882:	2301      	movs	r3, #1
 8003884:	aa01      	add	r2, sp, #4
 8003886:	2116      	movs	r1, #22
 8003888:	4628      	mov	r0, r5
 800388a:	f000 f88c 	bl	80039a6 <lsm6dso_write_reg>
 800388e:	2800      	cmp	r0, #0
 8003890:	d0e7      	beq.n	8003862 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x3a>
        return LSM6DSO_ERROR;
 8003892:	f04f 30ff 	mov.w	r0, #4294967295
 8003896:	e7d3      	b.n	8003840 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x18>
      if (lsm6dso_read_reg(&(pObj->Ctx), LSM6DSO_CTRL7_G, (uint8_t *)&val1, 1) != LSM6DSO_OK)
 8003898:	f100 0520 	add.w	r5, r0, #32
 800389c:	2301      	movs	r3, #1
 800389e:	aa01      	add	r2, sp, #4
 80038a0:	2116      	movs	r1, #22
 80038a2:	4628      	mov	r0, r5
 80038a4:	f000 f87a 	bl	800399c <lsm6dso_read_reg>
 80038a8:	b9d8      	cbnz	r0, 80038e2 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0xba>
      if (val1.g_hm_mode == 0U)
 80038aa:	f99d 3004 	ldrsb.w	r3, [sp, #4]
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	da09      	bge.n	80038c6 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x9e>
      if (newOdr > 208.0f)
 80038b2:	eddf 7a10 	vldr	s15, [pc, #64]	; 80038f4 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0xcc>
 80038b6:	eeb4 8ae7 	vcmpe.f32	s16, s15
 80038ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80038be:	ddd0      	ble.n	8003862 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x3a>
        newOdr = 208.0f;
 80038c0:	ed9f 8a0c 	vldr	s16, [pc, #48]	; 80038f4 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0xcc>
  if (ret == LSM6DSO_ERROR)
 80038c4:	e7cd      	b.n	8003862 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x3a>
        val1.g_hm_mode = 1U;
 80038c6:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80038ca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80038ce:	f88d 3004 	strb.w	r3, [sp, #4]
        if (lsm6dso_write_reg(&(pObj->Ctx), LSM6DSO_CTRL7_G, (uint8_t *)&val1, 1) != LSM6DSO_OK)
 80038d2:	2301      	movs	r3, #1
 80038d4:	aa01      	add	r2, sp, #4
 80038d6:	2116      	movs	r1, #22
 80038d8:	4628      	mov	r0, r5
 80038da:	f000 f864 	bl	80039a6 <lsm6dso_write_reg>
 80038de:	2800      	cmp	r0, #0
 80038e0:	d0e7      	beq.n	80038b2 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x8a>
        return LSM6DSO_ERROR;
 80038e2:	f04f 30ff 	mov.w	r0, #4294967295
 80038e6:	e7ab      	b.n	8003840 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x18>
    ret = LSM6DSO_GYRO_SetOutputDataRate_When_Enabled(pObj, newOdr);
 80038e8:	eeb0 0a48 	vmov.f32	s0, s16
 80038ec:	4620      	mov	r0, r4
 80038ee:	f7ff fb51 	bl	8002f94 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled>
 80038f2:	e7a5      	b.n	8003840 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x18>
 80038f4:	43500000 	.word	0x43500000

080038f8 <LSM6DSO_GYRO_SetOutputDataRate>:
{
 80038f8:	b508      	push	{r3, lr}
  return LSM6DSO_GYRO_SetOutputDataRate_With_Mode(pObj, Odr, LSM6DSO_GYRO_HIGH_PERFORMANCE_MODE);
 80038fa:	2100      	movs	r1, #0
 80038fc:	f7ff ff94 	bl	8003828 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode>
}
 8003900:	bd08      	pop	{r3, pc}

08003902 <LSM6DSO_Write_Reg>:
{
 8003902:	b500      	push	{lr}
 8003904:	b083      	sub	sp, #12
 8003906:	f88d 2007 	strb.w	r2, [sp, #7]
  if (lsm6dso_write_reg(&(pObj->Ctx), Reg, &Data, 1) != LSM6DSO_OK)
 800390a:	2301      	movs	r3, #1
 800390c:	f10d 0207 	add.w	r2, sp, #7
 8003910:	3020      	adds	r0, #32
 8003912:	f000 f848 	bl	80039a6 <lsm6dso_write_reg>
 8003916:	b910      	cbnz	r0, 800391e <LSM6DSO_Write_Reg+0x1c>
}
 8003918:	b003      	add	sp, #12
 800391a:	f85d fb04 	ldr.w	pc, [sp], #4
    return LSM6DSO_ERROR;
 800391e:	f04f 30ff 	mov.w	r0, #4294967295
 8003922:	e7f9      	b.n	8003918 <LSM6DSO_Write_Reg+0x16>

08003924 <LSM6DSO_RegisterBusIO>:
  if (pObj == NULL)
 8003924:	2800      	cmp	r0, #0
 8003926:	d02b      	beq.n	8003980 <LSM6DSO_RegisterBusIO+0x5c>
{
 8003928:	b510      	push	{r4, lr}
 800392a:	4604      	mov	r4, r0
    pObj->IO.Init      = pIO->Init;
 800392c:	680b      	ldr	r3, [r1, #0]
 800392e:	6003      	str	r3, [r0, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 8003930:	684a      	ldr	r2, [r1, #4]
 8003932:	6042      	str	r2, [r0, #4]
    pObj->IO.BusType   = pIO->BusType;
 8003934:	688a      	ldr	r2, [r1, #8]
 8003936:	6082      	str	r2, [r0, #8]
    pObj->IO.Address   = pIO->Address;
 8003938:	7b0a      	ldrb	r2, [r1, #12]
 800393a:	7302      	strb	r2, [r0, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 800393c:	690a      	ldr	r2, [r1, #16]
 800393e:	6102      	str	r2, [r0, #16]
    pObj->IO.ReadReg   = pIO->ReadReg;
 8003940:	694a      	ldr	r2, [r1, #20]
 8003942:	6142      	str	r2, [r0, #20]
    pObj->IO.GetTick   = pIO->GetTick;
 8003944:	698a      	ldr	r2, [r1, #24]
 8003946:	6182      	str	r2, [r0, #24]
    pObj->Ctx.read_reg  = ReadRegWrap;
 8003948:	4a12      	ldr	r2, [pc, #72]	; (8003994 <LSM6DSO_RegisterBusIO+0x70>)
 800394a:	6242      	str	r2, [r0, #36]	; 0x24
    pObj->Ctx.write_reg = WriteRegWrap;
 800394c:	4a12      	ldr	r2, [pc, #72]	; (8003998 <LSM6DSO_RegisterBusIO+0x74>)
 800394e:	6202      	str	r2, [r0, #32]
    pObj->Ctx.mdelay    = pIO->Delay;
 8003950:	69ca      	ldr	r2, [r1, #28]
 8003952:	6282      	str	r2, [r0, #40]	; 0x28
    pObj->Ctx.handle   = pObj;
 8003954:	62c0      	str	r0, [r0, #44]	; 0x2c
    if (pObj->IO.Init == NULL)
 8003956:	b1b3      	cbz	r3, 8003986 <LSM6DSO_RegisterBusIO+0x62>
    else if (pObj->IO.Init() != LSM6DSO_OK)
 8003958:	4798      	blx	r3
 800395a:	b9b8      	cbnz	r0, 800398c <LSM6DSO_RegisterBusIO+0x68>
      if (pObj->IO.BusType == LSM6DSO_SPI_3WIRES_BUS) /* SPI 3-Wires */
 800395c:	68a3      	ldr	r3, [r4, #8]
 800395e:	2b02      	cmp	r3, #2
 8003960:	d000      	beq.n	8003964 <LSM6DSO_RegisterBusIO+0x40>
}
 8003962:	bd10      	pop	{r4, pc}
        if (pObj->is_initialized == 0U)
 8003964:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
 8003968:	2b00      	cmp	r3, #0
 800396a:	d1fa      	bne.n	8003962 <LSM6DSO_RegisterBusIO+0x3e>
          if (LSM6DSO_Write_Reg(pObj, LSM6DSO_CTRL3_C, data) != LSM6DSO_OK)
 800396c:	220c      	movs	r2, #12
 800396e:	2112      	movs	r1, #18
 8003970:	4620      	mov	r0, r4
 8003972:	f7ff ffc6 	bl	8003902 <LSM6DSO_Write_Reg>
 8003976:	2800      	cmp	r0, #0
 8003978:	d0f3      	beq.n	8003962 <LSM6DSO_RegisterBusIO+0x3e>
            ret = LSM6DSO_ERROR;
 800397a:	f04f 30ff 	mov.w	r0, #4294967295
  return ret;
 800397e:	e7f0      	b.n	8003962 <LSM6DSO_RegisterBusIO+0x3e>
    ret = LSM6DSO_ERROR;
 8003980:	f04f 30ff 	mov.w	r0, #4294967295
}
 8003984:	4770      	bx	lr
      ret = LSM6DSO_ERROR;
 8003986:	f04f 30ff 	mov.w	r0, #4294967295
 800398a:	e7ea      	b.n	8003962 <LSM6DSO_RegisterBusIO+0x3e>
      ret = LSM6DSO_ERROR;
 800398c:	f04f 30ff 	mov.w	r0, #4294967295
 8003990:	e7e7      	b.n	8003962 <LSM6DSO_RegisterBusIO+0x3e>
 8003992:	bf00      	nop
 8003994:	08002e15 	.word	0x08002e15
 8003998:	08002e1f 	.word	0x08002e1f

0800399c <lsm6dso_read_reg>:
  *
  */
int32_t __weak lsm6dso_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                                uint8_t *data,
                                uint16_t len)
{
 800399c:	b510      	push	{r4, lr}
  int32_t ret;

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 800399e:	6844      	ldr	r4, [r0, #4]
 80039a0:	68c0      	ldr	r0, [r0, #12]
 80039a2:	47a0      	blx	r4

  return ret;
}
 80039a4:	bd10      	pop	{r4, pc}

080039a6 <lsm6dso_write_reg>:
  *
  */
int32_t __weak lsm6dso_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                                 uint8_t *data,
                                 uint16_t len)
{
 80039a6:	b510      	push	{r4, lr}
  int32_t ret;

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 80039a8:	6804      	ldr	r4, [r0, #0]
 80039aa:	68c0      	ldr	r0, [r0, #12]
 80039ac:	47a0      	blx	r4

  return ret;
}
 80039ae:	bd10      	pop	{r4, pc}

080039b0 <lsm6dso_xl_full_scale_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_xl_full_scale_set(stmdev_ctx_t *ctx,
                                  lsm6dso_fs_xl_t val)
{
 80039b0:	b530      	push	{r4, r5, lr}
 80039b2:	b083      	sub	sp, #12
 80039b4:	4604      	mov	r4, r0
 80039b6:	460d      	mov	r5, r1
  lsm6dso_ctrl1_xl_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL1_XL, (uint8_t *)&reg, 1);
 80039b8:	2301      	movs	r3, #1
 80039ba:	aa01      	add	r2, sp, #4
 80039bc:	2110      	movs	r1, #16
 80039be:	f7ff ffed 	bl	800399c <lsm6dso_read_reg>

  if (ret == 0)
 80039c2:	b108      	cbz	r0, 80039c8 <lsm6dso_xl_full_scale_set+0x18>
    reg.fs_xl = (uint8_t) val;
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL1_XL, (uint8_t *)&reg, 1);
  }

  return ret;
}
 80039c4:	b003      	add	sp, #12
 80039c6:	bd30      	pop	{r4, r5, pc}
    reg.fs_xl = (uint8_t) val;
 80039c8:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80039cc:	f365 0383 	bfi	r3, r5, #2, #2
 80039d0:	f88d 3004 	strb.w	r3, [sp, #4]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL1_XL, (uint8_t *)&reg, 1);
 80039d4:	2301      	movs	r3, #1
 80039d6:	aa01      	add	r2, sp, #4
 80039d8:	2110      	movs	r1, #16
 80039da:	4620      	mov	r0, r4
 80039dc:	f7ff ffe3 	bl	80039a6 <lsm6dso_write_reg>
  return ret;
 80039e0:	e7f0      	b.n	80039c4 <lsm6dso_xl_full_scale_set+0x14>

080039e2 <lsm6dso_xl_full_scale_get>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_xl_full_scale_get(stmdev_ctx_t *ctx,
                                  lsm6dso_fs_xl_t *val)
{
 80039e2:	b510      	push	{r4, lr}
 80039e4:	b082      	sub	sp, #8
 80039e6:	460c      	mov	r4, r1
  lsm6dso_ctrl1_xl_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL1_XL, (uint8_t *)&reg, 1);
 80039e8:	2301      	movs	r3, #1
 80039ea:	aa01      	add	r2, sp, #4
 80039ec:	2110      	movs	r1, #16
 80039ee:	f7ff ffd5 	bl	800399c <lsm6dso_read_reg>

  switch (reg.fs_xl)
 80039f2:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80039f6:	f3c3 0381 	ubfx	r3, r3, #2, #2
 80039fa:	2b03      	cmp	r3, #3
 80039fc:	d810      	bhi.n	8003a20 <lsm6dso_xl_full_scale_get+0x3e>
 80039fe:	e8df f003 	tbb	[pc, r3]
 8003a02:	0602      	.short	0x0602
 8003a04:	0c09      	.short	0x0c09
  {
    case LSM6DSO_2g:
      *val = LSM6DSO_2g;
 8003a06:	2300      	movs	r3, #0
 8003a08:	7023      	strb	r3, [r4, #0]
      *val = LSM6DSO_2g;
      break;
  }

  return ret;
}
 8003a0a:	b002      	add	sp, #8
 8003a0c:	bd10      	pop	{r4, pc}
      *val = LSM6DSO_16g;
 8003a0e:	2301      	movs	r3, #1
 8003a10:	7023      	strb	r3, [r4, #0]
      break;
 8003a12:	e7fa      	b.n	8003a0a <lsm6dso_xl_full_scale_get+0x28>
      *val = LSM6DSO_4g;
 8003a14:	2302      	movs	r3, #2
 8003a16:	7023      	strb	r3, [r4, #0]
      break;
 8003a18:	e7f7      	b.n	8003a0a <lsm6dso_xl_full_scale_get+0x28>
      *val = LSM6DSO_8g;
 8003a1a:	2303      	movs	r3, #3
 8003a1c:	7023      	strb	r3, [r4, #0]
      break;
 8003a1e:	e7f4      	b.n	8003a0a <lsm6dso_xl_full_scale_get+0x28>
      *val = LSM6DSO_2g;
 8003a20:	2300      	movs	r3, #0
 8003a22:	7023      	strb	r3, [r4, #0]
  return ret;
 8003a24:	e7f1      	b.n	8003a0a <lsm6dso_xl_full_scale_get+0x28>

08003a26 <lsm6dso_xl_data_rate_get>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_xl_data_rate_get(stmdev_ctx_t *ctx,
                                 lsm6dso_odr_xl_t *val)
{
 8003a26:	b510      	push	{r4, lr}
 8003a28:	b082      	sub	sp, #8
 8003a2a:	460c      	mov	r4, r1
  lsm6dso_ctrl1_xl_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL1_XL, (uint8_t *)&reg, 1);
 8003a2c:	2301      	movs	r3, #1
 8003a2e:	aa01      	add	r2, sp, #4
 8003a30:	2110      	movs	r1, #16
 8003a32:	f7ff ffb3 	bl	800399c <lsm6dso_read_reg>

  switch (reg.odr_xl)
 8003a36:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8003a3a:	091b      	lsrs	r3, r3, #4
 8003a3c:	2b0b      	cmp	r3, #11
 8003a3e:	d82c      	bhi.n	8003a9a <lsm6dso_xl_data_rate_get+0x74>
 8003a40:	e8df f003 	tbb	[pc, r3]
 8003a44:	100d0a06 	.word	0x100d0a06
 8003a48:	1c191613 	.word	0x1c191613
 8003a4c:	2825221f 	.word	0x2825221f
  {
    case LSM6DSO_XL_ODR_OFF:
      *val = LSM6DSO_XL_ODR_OFF;
 8003a50:	2300      	movs	r3, #0
 8003a52:	7023      	strb	r3, [r4, #0]
      *val = LSM6DSO_XL_ODR_OFF;
      break;
  }

  return ret;
}
 8003a54:	b002      	add	sp, #8
 8003a56:	bd10      	pop	{r4, pc}
      *val = LSM6DSO_XL_ODR_12Hz5;
 8003a58:	2301      	movs	r3, #1
 8003a5a:	7023      	strb	r3, [r4, #0]
      break;
 8003a5c:	e7fa      	b.n	8003a54 <lsm6dso_xl_data_rate_get+0x2e>
      *val = LSM6DSO_XL_ODR_26Hz;
 8003a5e:	2302      	movs	r3, #2
 8003a60:	7023      	strb	r3, [r4, #0]
      break;
 8003a62:	e7f7      	b.n	8003a54 <lsm6dso_xl_data_rate_get+0x2e>
      *val = LSM6DSO_XL_ODR_52Hz;
 8003a64:	2303      	movs	r3, #3
 8003a66:	7023      	strb	r3, [r4, #0]
      break;
 8003a68:	e7f4      	b.n	8003a54 <lsm6dso_xl_data_rate_get+0x2e>
      *val = LSM6DSO_XL_ODR_104Hz;
 8003a6a:	2304      	movs	r3, #4
 8003a6c:	7023      	strb	r3, [r4, #0]
      break;
 8003a6e:	e7f1      	b.n	8003a54 <lsm6dso_xl_data_rate_get+0x2e>
      *val = LSM6DSO_XL_ODR_208Hz;
 8003a70:	2305      	movs	r3, #5
 8003a72:	7023      	strb	r3, [r4, #0]
      break;
 8003a74:	e7ee      	b.n	8003a54 <lsm6dso_xl_data_rate_get+0x2e>
      *val = LSM6DSO_XL_ODR_417Hz;
 8003a76:	2306      	movs	r3, #6
 8003a78:	7023      	strb	r3, [r4, #0]
      break;
 8003a7a:	e7eb      	b.n	8003a54 <lsm6dso_xl_data_rate_get+0x2e>
      *val = LSM6DSO_XL_ODR_833Hz;
 8003a7c:	2307      	movs	r3, #7
 8003a7e:	7023      	strb	r3, [r4, #0]
      break;
 8003a80:	e7e8      	b.n	8003a54 <lsm6dso_xl_data_rate_get+0x2e>
      *val = LSM6DSO_XL_ODR_1667Hz;
 8003a82:	2308      	movs	r3, #8
 8003a84:	7023      	strb	r3, [r4, #0]
      break;
 8003a86:	e7e5      	b.n	8003a54 <lsm6dso_xl_data_rate_get+0x2e>
      *val = LSM6DSO_XL_ODR_3333Hz;
 8003a88:	2309      	movs	r3, #9
 8003a8a:	7023      	strb	r3, [r4, #0]
      break;
 8003a8c:	e7e2      	b.n	8003a54 <lsm6dso_xl_data_rate_get+0x2e>
      *val = LSM6DSO_XL_ODR_6667Hz;
 8003a8e:	230a      	movs	r3, #10
 8003a90:	7023      	strb	r3, [r4, #0]
      break;
 8003a92:	e7df      	b.n	8003a54 <lsm6dso_xl_data_rate_get+0x2e>
      *val = LSM6DSO_XL_ODR_1Hz6;
 8003a94:	230b      	movs	r3, #11
 8003a96:	7023      	strb	r3, [r4, #0]
      break;
 8003a98:	e7dc      	b.n	8003a54 <lsm6dso_xl_data_rate_get+0x2e>
      *val = LSM6DSO_XL_ODR_OFF;
 8003a9a:	2300      	movs	r3, #0
 8003a9c:	7023      	strb	r3, [r4, #0]
  return ret;
 8003a9e:	e7d9      	b.n	8003a54 <lsm6dso_xl_data_rate_get+0x2e>

08003aa0 <lsm6dso_gy_full_scale_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_gy_full_scale_set(stmdev_ctx_t *ctx,
                                  lsm6dso_fs_g_t val)
{
 8003aa0:	b530      	push	{r4, r5, lr}
 8003aa2:	b083      	sub	sp, #12
 8003aa4:	4604      	mov	r4, r0
 8003aa6:	460d      	mov	r5, r1
  lsm6dso_ctrl2_g_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL2_G, (uint8_t *)&reg, 1);
 8003aa8:	2301      	movs	r3, #1
 8003aaa:	aa01      	add	r2, sp, #4
 8003aac:	2111      	movs	r1, #17
 8003aae:	f7ff ff75 	bl	800399c <lsm6dso_read_reg>

  if (ret == 0)
 8003ab2:	b108      	cbz	r0, 8003ab8 <lsm6dso_gy_full_scale_set+0x18>
    reg.fs_g = (uint8_t) val;
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL2_G, (uint8_t *)&reg, 1);
  }

  return ret;
}
 8003ab4:	b003      	add	sp, #12
 8003ab6:	bd30      	pop	{r4, r5, pc}
    reg.fs_g = (uint8_t) val;
 8003ab8:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8003abc:	f365 0343 	bfi	r3, r5, #1, #3
 8003ac0:	f88d 3004 	strb.w	r3, [sp, #4]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL2_G, (uint8_t *)&reg, 1);
 8003ac4:	2301      	movs	r3, #1
 8003ac6:	aa01      	add	r2, sp, #4
 8003ac8:	2111      	movs	r1, #17
 8003aca:	4620      	mov	r0, r4
 8003acc:	f7ff ff6b 	bl	80039a6 <lsm6dso_write_reg>
  return ret;
 8003ad0:	e7f0      	b.n	8003ab4 <lsm6dso_gy_full_scale_set+0x14>

08003ad2 <lsm6dso_gy_full_scale_get>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_gy_full_scale_get(stmdev_ctx_t *ctx,
                                  lsm6dso_fs_g_t *val)
{
 8003ad2:	b510      	push	{r4, lr}
 8003ad4:	b082      	sub	sp, #8
 8003ad6:	460c      	mov	r4, r1
  lsm6dso_ctrl2_g_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL2_G, (uint8_t *)&reg, 1);
 8003ad8:	2301      	movs	r3, #1
 8003ada:	aa01      	add	r2, sp, #4
 8003adc:	2111      	movs	r1, #17
 8003ade:	f7ff ff5d 	bl	800399c <lsm6dso_read_reg>

  switch (reg.fs_g)
 8003ae2:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8003ae6:	f3c3 0342 	ubfx	r3, r3, #1, #3
 8003aea:	2b06      	cmp	r3, #6
 8003aec:	d815      	bhi.n	8003b1a <lsm6dso_gy_full_scale_get+0x48>
 8003aee:	e8df f003 	tbb	[pc, r3]
 8003af2:	0804      	.short	0x0804
 8003af4:	140e140b 	.word	0x140e140b
 8003af8:	11          	.byte	0x11
 8003af9:	00          	.byte	0x00
  {
    case LSM6DSO_250dps:
      *val = LSM6DSO_250dps;
 8003afa:	2300      	movs	r3, #0
 8003afc:	7023      	strb	r3, [r4, #0]
      *val = LSM6DSO_250dps;
      break;
  }

  return ret;
}
 8003afe:	b002      	add	sp, #8
 8003b00:	bd10      	pop	{r4, pc}
      *val = LSM6DSO_125dps;
 8003b02:	2301      	movs	r3, #1
 8003b04:	7023      	strb	r3, [r4, #0]
      break;
 8003b06:	e7fa      	b.n	8003afe <lsm6dso_gy_full_scale_get+0x2c>
      *val = LSM6DSO_500dps;
 8003b08:	2302      	movs	r3, #2
 8003b0a:	7023      	strb	r3, [r4, #0]
      break;
 8003b0c:	e7f7      	b.n	8003afe <lsm6dso_gy_full_scale_get+0x2c>
      *val = LSM6DSO_1000dps;
 8003b0e:	2304      	movs	r3, #4
 8003b10:	7023      	strb	r3, [r4, #0]
      break;
 8003b12:	e7f4      	b.n	8003afe <lsm6dso_gy_full_scale_get+0x2c>
      *val = LSM6DSO_2000dps;
 8003b14:	2306      	movs	r3, #6
 8003b16:	7023      	strb	r3, [r4, #0]
      break;
 8003b18:	e7f1      	b.n	8003afe <lsm6dso_gy_full_scale_get+0x2c>
      *val = LSM6DSO_250dps;
 8003b1a:	2300      	movs	r3, #0
 8003b1c:	7023      	strb	r3, [r4, #0]
  return ret;
 8003b1e:	e7ee      	b.n	8003afe <lsm6dso_gy_full_scale_get+0x2c>

08003b20 <lsm6dso_gy_data_rate_get>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_gy_data_rate_get(stmdev_ctx_t *ctx,
                                 lsm6dso_odr_g_t *val)
{
 8003b20:	b510      	push	{r4, lr}
 8003b22:	b082      	sub	sp, #8
 8003b24:	460c      	mov	r4, r1
  lsm6dso_ctrl2_g_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL2_G, (uint8_t *)&reg, 1);
 8003b26:	2301      	movs	r3, #1
 8003b28:	aa01      	add	r2, sp, #4
 8003b2a:	2111      	movs	r1, #17
 8003b2c:	f7ff ff36 	bl	800399c <lsm6dso_read_reg>

  switch (reg.odr_g)
 8003b30:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8003b34:	091b      	lsrs	r3, r3, #4
 8003b36:	2b0a      	cmp	r3, #10
 8003b38:	d829      	bhi.n	8003b8e <lsm6dso_gy_data_rate_get+0x6e>
 8003b3a:	e8df f003 	tbb	[pc, r3]
 8003b3e:	0a06      	.short	0x0a06
 8003b40:	1613100d 	.word	0x1613100d
 8003b44:	221f1c19 	.word	0x221f1c19
 8003b48:	25          	.byte	0x25
 8003b49:	00          	.byte	0x00
  {
    case LSM6DSO_GY_ODR_OFF:
      *val = LSM6DSO_GY_ODR_OFF;
 8003b4a:	2300      	movs	r3, #0
 8003b4c:	7023      	strb	r3, [r4, #0]
      *val = LSM6DSO_GY_ODR_OFF;
      break;
  }

  return ret;
}
 8003b4e:	b002      	add	sp, #8
 8003b50:	bd10      	pop	{r4, pc}
      *val = LSM6DSO_GY_ODR_12Hz5;
 8003b52:	2301      	movs	r3, #1
 8003b54:	7023      	strb	r3, [r4, #0]
      break;
 8003b56:	e7fa      	b.n	8003b4e <lsm6dso_gy_data_rate_get+0x2e>
      *val = LSM6DSO_GY_ODR_26Hz;
 8003b58:	2302      	movs	r3, #2
 8003b5a:	7023      	strb	r3, [r4, #0]
      break;
 8003b5c:	e7f7      	b.n	8003b4e <lsm6dso_gy_data_rate_get+0x2e>
      *val = LSM6DSO_GY_ODR_52Hz;
 8003b5e:	2303      	movs	r3, #3
 8003b60:	7023      	strb	r3, [r4, #0]
      break;
 8003b62:	e7f4      	b.n	8003b4e <lsm6dso_gy_data_rate_get+0x2e>
      *val = LSM6DSO_GY_ODR_104Hz;
 8003b64:	2304      	movs	r3, #4
 8003b66:	7023      	strb	r3, [r4, #0]
      break;
 8003b68:	e7f1      	b.n	8003b4e <lsm6dso_gy_data_rate_get+0x2e>
      *val = LSM6DSO_GY_ODR_208Hz;
 8003b6a:	2305      	movs	r3, #5
 8003b6c:	7023      	strb	r3, [r4, #0]
      break;
 8003b6e:	e7ee      	b.n	8003b4e <lsm6dso_gy_data_rate_get+0x2e>
      *val = LSM6DSO_GY_ODR_417Hz;
 8003b70:	2306      	movs	r3, #6
 8003b72:	7023      	strb	r3, [r4, #0]
      break;
 8003b74:	e7eb      	b.n	8003b4e <lsm6dso_gy_data_rate_get+0x2e>
      *val = LSM6DSO_GY_ODR_833Hz;
 8003b76:	2307      	movs	r3, #7
 8003b78:	7023      	strb	r3, [r4, #0]
      break;
 8003b7a:	e7e8      	b.n	8003b4e <lsm6dso_gy_data_rate_get+0x2e>
      *val = LSM6DSO_GY_ODR_1667Hz;
 8003b7c:	2308      	movs	r3, #8
 8003b7e:	7023      	strb	r3, [r4, #0]
      break;
 8003b80:	e7e5      	b.n	8003b4e <lsm6dso_gy_data_rate_get+0x2e>
      *val = LSM6DSO_GY_ODR_3333Hz;
 8003b82:	2309      	movs	r3, #9
 8003b84:	7023      	strb	r3, [r4, #0]
      break;
 8003b86:	e7e2      	b.n	8003b4e <lsm6dso_gy_data_rate_get+0x2e>
      *val = LSM6DSO_GY_ODR_6667Hz;
 8003b88:	230a      	movs	r3, #10
 8003b8a:	7023      	strb	r3, [r4, #0]
      break;
 8003b8c:	e7df      	b.n	8003b4e <lsm6dso_gy_data_rate_get+0x2e>
      *val = LSM6DSO_GY_ODR_OFF;
 8003b8e:	2300      	movs	r3, #0
 8003b90:	7023      	strb	r3, [r4, #0]
  return ret;
 8003b92:	e7dc      	b.n	8003b4e <lsm6dso_gy_data_rate_get+0x2e>

08003b94 <lsm6dso_block_data_update_set>:
  * @param  val      change the values of bdu in reg CTRL3_C
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8003b94:	b530      	push	{r4, r5, lr}
 8003b96:	b083      	sub	sp, #12
 8003b98:	4604      	mov	r4, r0
 8003b9a:	460d      	mov	r5, r1
  lsm6dso_ctrl3_c_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL3_C, (uint8_t *)&reg, 1);
 8003b9c:	2301      	movs	r3, #1
 8003b9e:	aa01      	add	r2, sp, #4
 8003ba0:	2112      	movs	r1, #18
 8003ba2:	f7ff fefb 	bl	800399c <lsm6dso_read_reg>

  if (ret == 0)
 8003ba6:	b108      	cbz	r0, 8003bac <lsm6dso_block_data_update_set+0x18>
    reg.bdu = val;
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL3_C, (uint8_t *)&reg, 1);
  }

  return ret;
}
 8003ba8:	b003      	add	sp, #12
 8003baa:	bd30      	pop	{r4, r5, pc}
    reg.bdu = val;
 8003bac:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8003bb0:	f365 1386 	bfi	r3, r5, #6, #1
 8003bb4:	f88d 3004 	strb.w	r3, [sp, #4]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL3_C, (uint8_t *)&reg, 1);
 8003bb8:	2301      	movs	r3, #1
 8003bba:	aa01      	add	r2, sp, #4
 8003bbc:	2112      	movs	r1, #18
 8003bbe:	4620      	mov	r0, r4
 8003bc0:	f7ff fef1 	bl	80039a6 <lsm6dso_write_reg>
  return ret;
 8003bc4:	e7f0      	b.n	8003ba8 <lsm6dso_block_data_update_set+0x14>

08003bc6 <lsm6dso_angular_rate_raw_get>:
  * @param  buff     buffer that stores data read
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_angular_rate_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 8003bc6:	b510      	push	{r4, lr}
 8003bc8:	b082      	sub	sp, #8
 8003bca:	460c      	mov	r4, r1
  uint8_t buff[6];
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_OUTX_L_G, buff, 6);
 8003bcc:	2306      	movs	r3, #6
 8003bce:	466a      	mov	r2, sp
 8003bd0:	2122      	movs	r1, #34	; 0x22
 8003bd2:	f7ff fee3 	bl	800399c <lsm6dso_read_reg>
  val[0] = (int16_t)buff[1];
 8003bd6:	f89d 2001 	ldrb.w	r2, [sp, #1]
 8003bda:	8022      	strh	r2, [r4, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 8003bdc:	f89d 3000 	ldrb.w	r3, [sp]
 8003be0:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8003be4:	8023      	strh	r3, [r4, #0]
  val[1] = (int16_t)buff[3];
 8003be6:	f89d 2003 	ldrb.w	r2, [sp, #3]
 8003bea:	8062      	strh	r2, [r4, #2]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 8003bec:	f89d 3002 	ldrb.w	r3, [sp, #2]
 8003bf0:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8003bf4:	8063      	strh	r3, [r4, #2]
  val[2] = (int16_t)buff[5];
 8003bf6:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8003bfa:	80a2      	strh	r2, [r4, #4]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 8003bfc:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8003c00:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8003c04:	80a3      	strh	r3, [r4, #4]

  return ret;
}
 8003c06:	b002      	add	sp, #8
 8003c08:	bd10      	pop	{r4, pc}

08003c0a <lsm6dso_acceleration_raw_get>:
  * @param  buff     buffer that stores data read
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_acceleration_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 8003c0a:	b510      	push	{r4, lr}
 8003c0c:	b082      	sub	sp, #8
 8003c0e:	460c      	mov	r4, r1
  uint8_t buff[6];
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_OUTX_L_A, buff, 6);
 8003c10:	2306      	movs	r3, #6
 8003c12:	466a      	mov	r2, sp
 8003c14:	2128      	movs	r1, #40	; 0x28
 8003c16:	f7ff fec1 	bl	800399c <lsm6dso_read_reg>
  val[0] = (int16_t)buff[1];
 8003c1a:	f89d 2001 	ldrb.w	r2, [sp, #1]
 8003c1e:	8022      	strh	r2, [r4, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 8003c20:	f89d 3000 	ldrb.w	r3, [sp]
 8003c24:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8003c28:	8023      	strh	r3, [r4, #0]
  val[1] = (int16_t)buff[3];
 8003c2a:	f89d 2003 	ldrb.w	r2, [sp, #3]
 8003c2e:	8062      	strh	r2, [r4, #2]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 8003c30:	f89d 3002 	ldrb.w	r3, [sp, #2]
 8003c34:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8003c38:	8063      	strh	r3, [r4, #2]
  val[2] = (int16_t)buff[5];
 8003c3a:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8003c3e:	80a2      	strh	r2, [r4, #4]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 8003c40:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8003c44:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8003c48:	80a3      	strh	r3, [r4, #4]

  return ret;
}
 8003c4a:	b002      	add	sp, #8
 8003c4c:	bd10      	pop	{r4, pc}

08003c4e <lsm6dso_mem_bank_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_mem_bank_set(stmdev_ctx_t *ctx,
                             lsm6dso_reg_access_t val)
{
 8003c4e:	b530      	push	{r4, r5, lr}
 8003c50:	b083      	sub	sp, #12
 8003c52:	4604      	mov	r4, r0
 8003c54:	460d      	mov	r5, r1
  lsm6dso_func_cfg_access_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_FUNC_CFG_ACCESS, (uint8_t *)&reg, 1);
 8003c56:	2301      	movs	r3, #1
 8003c58:	aa01      	add	r2, sp, #4
 8003c5a:	4619      	mov	r1, r3
 8003c5c:	f7ff fe9e 	bl	800399c <lsm6dso_read_reg>

  if (ret == 0)
 8003c60:	b108      	cbz	r0, 8003c66 <lsm6dso_mem_bank_set+0x18>
    reg.reg_access = (uint8_t)val;
    ret = lsm6dso_write_reg(ctx, LSM6DSO_FUNC_CFG_ACCESS, (uint8_t *)&reg, 1);
  }

  return ret;
}
 8003c62:	b003      	add	sp, #12
 8003c64:	bd30      	pop	{r4, r5, pc}
    reg.reg_access = (uint8_t)val;
 8003c66:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8003c6a:	f365 1387 	bfi	r3, r5, #6, #2
 8003c6e:	f88d 3004 	strb.w	r3, [sp, #4]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_FUNC_CFG_ACCESS, (uint8_t *)&reg, 1);
 8003c72:	2301      	movs	r3, #1
 8003c74:	aa01      	add	r2, sp, #4
 8003c76:	4619      	mov	r1, r3
 8003c78:	4620      	mov	r0, r4
 8003c7a:	f7ff fe94 	bl	80039a6 <lsm6dso_write_reg>
  return ret;
 8003c7e:	e7f0      	b.n	8003c62 <lsm6dso_mem_bank_set+0x14>

08003c80 <lsm6dso_device_id_get>:
  * @param  buff     buffer that stores data read
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 8003c80:	b508      	push	{r3, lr}
 8003c82:	460a      	mov	r2, r1
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_WHO_AM_I, buff, 1);
 8003c84:	2301      	movs	r3, #1
 8003c86:	210f      	movs	r1, #15
 8003c88:	f7ff fe88 	bl	800399c <lsm6dso_read_reg>

  return ret;
}
 8003c8c:	bd08      	pop	{r3, pc}

08003c8e <lsm6dso_auto_increment_set>:
  * @param  val      change the values of if_inc in reg CTRL3_C
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_auto_increment_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8003c8e:	b530      	push	{r4, r5, lr}
 8003c90:	b083      	sub	sp, #12
 8003c92:	4604      	mov	r4, r0
 8003c94:	460d      	mov	r5, r1
  lsm6dso_ctrl3_c_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL3_C, (uint8_t *)&reg, 1);
 8003c96:	2301      	movs	r3, #1
 8003c98:	aa01      	add	r2, sp, #4
 8003c9a:	2112      	movs	r1, #18
 8003c9c:	f7ff fe7e 	bl	800399c <lsm6dso_read_reg>

  if (ret == 0)
 8003ca0:	b108      	cbz	r0, 8003ca6 <lsm6dso_auto_increment_set+0x18>
    reg.if_inc = val;
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL3_C, (uint8_t *)&reg, 1);
  }

  return ret;
}
 8003ca2:	b003      	add	sp, #12
 8003ca4:	bd30      	pop	{r4, r5, pc}
    reg.if_inc = val;
 8003ca6:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8003caa:	f365 0382 	bfi	r3, r5, #2, #1
 8003cae:	f88d 3004 	strb.w	r3, [sp, #4]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL3_C, (uint8_t *)&reg, 1);
 8003cb2:	2301      	movs	r3, #1
 8003cb4:	aa01      	add	r2, sp, #4
 8003cb6:	2112      	movs	r1, #18
 8003cb8:	4620      	mov	r0, r4
 8003cba:	f7ff fe74 	bl	80039a6 <lsm6dso_write_reg>
  return ret;
 8003cbe:	e7f0      	b.n	8003ca2 <lsm6dso_auto_increment_set+0x14>

08003cc0 <lsm6dso_i3c_disable_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_i3c_disable_set(stmdev_ctx_t *ctx,
                                lsm6dso_i3c_disable_t val)
{
 8003cc0:	b530      	push	{r4, r5, lr}
 8003cc2:	b083      	sub	sp, #12
 8003cc4:	4605      	mov	r5, r0
 8003cc6:	460c      	mov	r4, r1
  lsm6dso_i3c_bus_avb_t i3c_bus_avb;
  lsm6dso_ctrl9_xl_t ctrl9_xl;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL9_XL, (uint8_t *)&ctrl9_xl, 1);
 8003cc8:	2301      	movs	r3, #1
 8003cca:	466a      	mov	r2, sp
 8003ccc:	2118      	movs	r1, #24
 8003cce:	f7ff fe65 	bl	800399c <lsm6dso_read_reg>

  if (ret == 0)
 8003cd2:	b118      	cbz	r0, 8003cdc <lsm6dso_i3c_disable_set+0x1c>
  {
    ctrl9_xl.i3c_disable = ((uint8_t)val & 0x80U) >> 7;
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL9_XL, (uint8_t *)&ctrl9_xl, 1);
  }

  if (ret == 0)
 8003cd4:	b180      	cbz	r0, 8003cf8 <lsm6dso_i3c_disable_set+0x38>
  {
    ret = lsm6dso_read_reg(ctx, LSM6DSO_I3C_BUS_AVB,
                           (uint8_t *)&i3c_bus_avb, 1);
  }

  if (ret == 0)
 8003cd6:	b1b0      	cbz	r0, 8003d06 <lsm6dso_i3c_disable_set+0x46>
    ret = lsm6dso_write_reg(ctx, LSM6DSO_I3C_BUS_AVB,
                            (uint8_t *)&i3c_bus_avb, 1);
  }

  return ret;
}
 8003cd8:	b003      	add	sp, #12
 8003cda:	bd30      	pop	{r4, r5, pc}
    ctrl9_xl.i3c_disable = ((uint8_t)val & 0x80U) >> 7;
 8003cdc:	09e3      	lsrs	r3, r4, #7
 8003cde:	f89d 2000 	ldrb.w	r2, [sp]
 8003ce2:	f363 0241 	bfi	r2, r3, #1, #1
 8003ce6:	f88d 2000 	strb.w	r2, [sp]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL9_XL, (uint8_t *)&ctrl9_xl, 1);
 8003cea:	2301      	movs	r3, #1
 8003cec:	466a      	mov	r2, sp
 8003cee:	2118      	movs	r1, #24
 8003cf0:	4628      	mov	r0, r5
 8003cf2:	f7ff fe58 	bl	80039a6 <lsm6dso_write_reg>
 8003cf6:	e7ed      	b.n	8003cd4 <lsm6dso_i3c_disable_set+0x14>
    ret = lsm6dso_read_reg(ctx, LSM6DSO_I3C_BUS_AVB,
 8003cf8:	2301      	movs	r3, #1
 8003cfa:	aa01      	add	r2, sp, #4
 8003cfc:	2162      	movs	r1, #98	; 0x62
 8003cfe:	4628      	mov	r0, r5
 8003d00:	f7ff fe4c 	bl	800399c <lsm6dso_read_reg>
 8003d04:	e7e7      	b.n	8003cd6 <lsm6dso_i3c_disable_set+0x16>
    i3c_bus_avb.i3c_bus_avb_sel = (uint8_t)val & 0x03U;
 8003d06:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8003d0a:	f364 03c4 	bfi	r3, r4, #3, #2
 8003d0e:	f88d 3004 	strb.w	r3, [sp, #4]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_I3C_BUS_AVB,
 8003d12:	2301      	movs	r3, #1
 8003d14:	aa01      	add	r2, sp, #4
 8003d16:	2162      	movs	r1, #98	; 0x62
 8003d18:	4628      	mov	r0, r5
 8003d1a:	f7ff fe44 	bl	80039a6 <lsm6dso_write_reg>
  return ret;
 8003d1e:	e7db      	b.n	8003cd8 <lsm6dso_i3c_disable_set+0x18>

08003d20 <lsm6dso_fifo_mode_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_fifo_mode_set(stmdev_ctx_t *ctx,
                              lsm6dso_fifo_mode_t val)
{
 8003d20:	b530      	push	{r4, r5, lr}
 8003d22:	b083      	sub	sp, #12
 8003d24:	4604      	mov	r4, r0
 8003d26:	460d      	mov	r5, r1
  lsm6dso_fifo_ctrl4_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_FIFO_CTRL4, (uint8_t *)&reg, 1);
 8003d28:	2301      	movs	r3, #1
 8003d2a:	aa01      	add	r2, sp, #4
 8003d2c:	210a      	movs	r1, #10
 8003d2e:	f7ff fe35 	bl	800399c <lsm6dso_read_reg>

  if (ret == 0)
 8003d32:	b108      	cbz	r0, 8003d38 <lsm6dso_fifo_mode_set+0x18>
    reg.fifo_mode = (uint8_t)val;
    ret = lsm6dso_write_reg(ctx, LSM6DSO_FIFO_CTRL4, (uint8_t *)&reg, 1);
  }

  return ret;
}
 8003d34:	b003      	add	sp, #12
 8003d36:	bd30      	pop	{r4, r5, pc}
    reg.fifo_mode = (uint8_t)val;
 8003d38:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8003d3c:	f365 0302 	bfi	r3, r5, #0, #3
 8003d40:	f88d 3004 	strb.w	r3, [sp, #4]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_FIFO_CTRL4, (uint8_t *)&reg, 1);
 8003d44:	2301      	movs	r3, #1
 8003d46:	aa01      	add	r2, sp, #4
 8003d48:	210a      	movs	r1, #10
 8003d4a:	4620      	mov	r0, r4
 8003d4c:	f7ff fe2b 	bl	80039a6 <lsm6dso_write_reg>
  return ret;
 8003d50:	e7f0      	b.n	8003d34 <lsm6dso_fifo_mode_set+0x14>

08003d52 <lsm6dso_fsm_enable_get>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_fsm_enable_get(stmdev_ctx_t *ctx,
                               lsm6dso_emb_fsm_enable_t *val)
{
 8003d52:	b538      	push	{r3, r4, r5, lr}
 8003d54:	4604      	mov	r4, r0
 8003d56:	460d      	mov	r5, r1
  int32_t ret;

  ret = lsm6dso_mem_bank_set(ctx, LSM6DSO_EMBEDDED_FUNC_BANK);
 8003d58:	2102      	movs	r1, #2
 8003d5a:	f7ff ff78 	bl	8003c4e <lsm6dso_mem_bank_set>

  if (ret == 0)
 8003d5e:	b108      	cbz	r0, 8003d64 <lsm6dso_fsm_enable_get+0x12>
  {
    ret = lsm6dso_read_reg(ctx, LSM6DSO_FSM_ENABLE_A, (uint8_t *) val, 2);
  }

  if (ret == 0)
 8003d60:	b138      	cbz	r0, 8003d72 <lsm6dso_fsm_enable_get+0x20>
  {
    ret = lsm6dso_mem_bank_set(ctx, LSM6DSO_USER_BANK);
  }

  return ret;
}
 8003d62:	bd38      	pop	{r3, r4, r5, pc}
    ret = lsm6dso_read_reg(ctx, LSM6DSO_FSM_ENABLE_A, (uint8_t *) val, 2);
 8003d64:	2302      	movs	r3, #2
 8003d66:	462a      	mov	r2, r5
 8003d68:	2146      	movs	r1, #70	; 0x46
 8003d6a:	4620      	mov	r0, r4
 8003d6c:	f7ff fe16 	bl	800399c <lsm6dso_read_reg>
 8003d70:	e7f6      	b.n	8003d60 <lsm6dso_fsm_enable_get+0xe>
    ret = lsm6dso_mem_bank_set(ctx, LSM6DSO_USER_BANK);
 8003d72:	2100      	movs	r1, #0
 8003d74:	4620      	mov	r0, r4
 8003d76:	f7ff ff6a 	bl	8003c4e <lsm6dso_mem_bank_set>
  return ret;
 8003d7a:	e7f2      	b.n	8003d62 <lsm6dso_fsm_enable_get+0x10>

08003d7c <lsm6dso_fsm_data_rate_get>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_fsm_data_rate_get(stmdev_ctx_t *ctx,
                                  lsm6dso_fsm_odr_t *val)
{
 8003d7c:	b530      	push	{r4, r5, lr}
 8003d7e:	b083      	sub	sp, #12
 8003d80:	4605      	mov	r5, r0
 8003d82:	460c      	mov	r4, r1
  lsm6dso_emb_func_odr_cfg_b_t reg;
  int32_t ret;

  ret = lsm6dso_mem_bank_set(ctx, LSM6DSO_EMBEDDED_FUNC_BANK);
 8003d84:	2102      	movs	r1, #2
 8003d86:	f7ff ff62 	bl	8003c4e <lsm6dso_mem_bank_set>

  if (ret == 0)
 8003d8a:	b150      	cbz	r0, 8003da2 <lsm6dso_fsm_data_rate_get+0x26>
  {
    ret = lsm6dso_read_reg(ctx, LSM6DSO_EMB_FUNC_ODR_CFG_B,
                           (uint8_t *)&reg, 1);
  }

  if (ret == 0)
 8003d8c:	b9b0      	cbnz	r0, 8003dbc <lsm6dso_fsm_data_rate_get+0x40>
  {
    switch (reg.fsm_odr)
 8003d8e:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8003d92:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8003d96:	2b03      	cmp	r3, #3
 8003d98:	d81b      	bhi.n	8003dd2 <lsm6dso_fsm_data_rate_get+0x56>
 8003d9a:	e8df f003 	tbb	[pc, r3]
 8003d9e:	1109      	.short	0x1109
 8003da0:	1714      	.short	0x1714
    ret = lsm6dso_read_reg(ctx, LSM6DSO_EMB_FUNC_ODR_CFG_B,
 8003da2:	2301      	movs	r3, #1
 8003da4:	aa01      	add	r2, sp, #4
 8003da6:	215f      	movs	r1, #95	; 0x5f
 8003da8:	4628      	mov	r0, r5
 8003daa:	f7ff fdf7 	bl	800399c <lsm6dso_read_reg>
 8003dae:	e7ed      	b.n	8003d8c <lsm6dso_fsm_data_rate_get+0x10>
    {
      case LSM6DSO_ODR_FSM_12Hz5:
        *val = LSM6DSO_ODR_FSM_12Hz5;
 8003db0:	2300      	movs	r3, #0
 8003db2:	7023      	strb	r3, [r4, #0]
      default:
        *val = LSM6DSO_ODR_FSM_12Hz5;
        break;
    }

    ret = lsm6dso_mem_bank_set(ctx, LSM6DSO_USER_BANK);
 8003db4:	2100      	movs	r1, #0
 8003db6:	4628      	mov	r0, r5
 8003db8:	f7ff ff49 	bl	8003c4e <lsm6dso_mem_bank_set>
  }

  return ret;
}
 8003dbc:	b003      	add	sp, #12
 8003dbe:	bd30      	pop	{r4, r5, pc}
        *val = LSM6DSO_ODR_FSM_26Hz;
 8003dc0:	2301      	movs	r3, #1
 8003dc2:	7023      	strb	r3, [r4, #0]
        break;
 8003dc4:	e7f6      	b.n	8003db4 <lsm6dso_fsm_data_rate_get+0x38>
        *val = LSM6DSO_ODR_FSM_52Hz;
 8003dc6:	2302      	movs	r3, #2
 8003dc8:	7023      	strb	r3, [r4, #0]
        break;
 8003dca:	e7f3      	b.n	8003db4 <lsm6dso_fsm_data_rate_get+0x38>
        *val = LSM6DSO_ODR_FSM_104Hz;
 8003dcc:	2303      	movs	r3, #3
 8003dce:	7023      	strb	r3, [r4, #0]
        break;
 8003dd0:	e7f0      	b.n	8003db4 <lsm6dso_fsm_data_rate_get+0x38>
        *val = LSM6DSO_ODR_FSM_12Hz5;
 8003dd2:	2300      	movs	r3, #0
 8003dd4:	7023      	strb	r3, [r4, #0]
        break;
 8003dd6:	e7ed      	b.n	8003db4 <lsm6dso_fsm_data_rate_get+0x38>

08003dd8 <lsm6dso_xl_data_rate_set>:
{
 8003dd8:	b530      	push	{r4, r5, lr}
 8003dda:	b083      	sub	sp, #12
 8003ddc:	4604      	mov	r4, r0
 8003dde:	460d      	mov	r5, r1
  ret =  lsm6dso_fsm_enable_get(ctx, &fsm_enable);
 8003de0:	a901      	add	r1, sp, #4
 8003de2:	f7ff ffb6 	bl	8003d52 <lsm6dso_fsm_enable_get>
  if (ret == 0)
 8003de6:	bb88      	cbnz	r0, 8003e4c <lsm6dso_xl_data_rate_set+0x74>
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
 8003de8:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8003dec:	f002 0301 	and.w	r3, r2, #1
         fsm_enable.fsm_enable_a.fsm2_en  |
 8003df0:	f3c2 0140 	ubfx	r1, r2, #1, #1
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
 8003df4:	430b      	orrs	r3, r1
         fsm_enable.fsm_enable_a.fsm3_en  |
 8003df6:	f3c2 0180 	ubfx	r1, r2, #2, #1
         fsm_enable.fsm_enable_a.fsm2_en  |
 8003dfa:	430b      	orrs	r3, r1
         fsm_enable.fsm_enable_a.fsm4_en  |
 8003dfc:	f3c2 01c0 	ubfx	r1, r2, #3, #1
         fsm_enable.fsm_enable_a.fsm3_en  |
 8003e00:	430b      	orrs	r3, r1
         fsm_enable.fsm_enable_a.fsm5_en  |
 8003e02:	f3c2 1100 	ubfx	r1, r2, #4, #1
         fsm_enable.fsm_enable_a.fsm4_en  |
 8003e06:	430b      	orrs	r3, r1
         fsm_enable.fsm_enable_a.fsm6_en  |
 8003e08:	f3c2 1140 	ubfx	r1, r2, #5, #1
         fsm_enable.fsm_enable_a.fsm5_en  |
 8003e0c:	430b      	orrs	r3, r1
         fsm_enable.fsm_enable_a.fsm7_en  |
 8003e0e:	f3c2 1180 	ubfx	r1, r2, #6, #1
         fsm_enable.fsm_enable_a.fsm6_en  |
 8003e12:	430b      	orrs	r3, r1
         fsm_enable.fsm_enable_a.fsm7_en  |
 8003e14:	ea43 13d2 	orr.w	r3, r3, r2, lsr #7
         fsm_enable.fsm_enable_b.fsm9_en  |
 8003e18:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8003e1c:	f002 0101 	and.w	r1, r2, #1
         fsm_enable.fsm_enable_a.fsm8_en  |
 8003e20:	430b      	orrs	r3, r1
         fsm_enable.fsm_enable_b.fsm10_en |
 8003e22:	f3c2 0140 	ubfx	r1, r2, #1, #1
         fsm_enable.fsm_enable_b.fsm9_en  |
 8003e26:	430b      	orrs	r3, r1
         fsm_enable.fsm_enable_b.fsm11_en |
 8003e28:	f3c2 0180 	ubfx	r1, r2, #2, #1
         fsm_enable.fsm_enable_b.fsm10_en |
 8003e2c:	430b      	orrs	r3, r1
         fsm_enable.fsm_enable_b.fsm12_en |
 8003e2e:	f3c2 01c0 	ubfx	r1, r2, #3, #1
         fsm_enable.fsm_enable_b.fsm11_en |
 8003e32:	430b      	orrs	r3, r1
         fsm_enable.fsm_enable_b.fsm13_en |
 8003e34:	f3c2 1100 	ubfx	r1, r2, #4, #1
         fsm_enable.fsm_enable_b.fsm12_en |
 8003e38:	430b      	orrs	r3, r1
         fsm_enable.fsm_enable_b.fsm14_en |
 8003e3a:	f3c2 1140 	ubfx	r1, r2, #5, #1
         fsm_enable.fsm_enable_b.fsm13_en |
 8003e3e:	430b      	orrs	r3, r1
         fsm_enable.fsm_enable_b.fsm15_en |
 8003e40:	f3c2 1180 	ubfx	r1, r2, #6, #1
         fsm_enable.fsm_enable_b.fsm14_en |
 8003e44:	430b      	orrs	r3, r1
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
 8003e46:	ea53 13d2 	orrs.w	r3, r3, r2, lsr #7
 8003e4a:	d105      	bne.n	8003e58 <lsm6dso_xl_data_rate_set+0x80>
  if (ret == 0)
 8003e4c:	2800      	cmp	r0, #0
 8003e4e:	d037      	beq.n	8003ec0 <lsm6dso_xl_data_rate_set+0xe8>
  if (ret == 0)
 8003e50:	2800      	cmp	r0, #0
 8003e52:	d03c      	beq.n	8003ece <lsm6dso_xl_data_rate_set+0xf6>
}
 8003e54:	b003      	add	sp, #12
 8003e56:	bd30      	pop	{r4, r5, pc}
      ret =  lsm6dso_fsm_data_rate_get(ctx, &fsm_odr);
 8003e58:	f10d 0103 	add.w	r1, sp, #3
 8003e5c:	4620      	mov	r0, r4
 8003e5e:	f7ff ff8d 	bl	8003d7c <lsm6dso_fsm_data_rate_get>
      if (ret == 0)
 8003e62:	2800      	cmp	r0, #0
 8003e64:	d1f2      	bne.n	8003e4c <lsm6dso_xl_data_rate_set+0x74>
        switch (fsm_odr)
 8003e66:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8003e6a:	2b03      	cmp	r3, #3
 8003e6c:	d8ee      	bhi.n	8003e4c <lsm6dso_xl_data_rate_set+0x74>
 8003e6e:	e8df f003 	tbb	[pc, r3]
 8003e72:	0602      	.short	0x0602
 8003e74:	120b      	.short	0x120b
            if (val == LSM6DSO_XL_ODR_OFF)
 8003e76:	2d00      	cmp	r5, #0
 8003e78:	d1e8      	bne.n	8003e4c <lsm6dso_xl_data_rate_set+0x74>
              odr_xl = LSM6DSO_XL_ODR_12Hz5;
 8003e7a:	2501      	movs	r5, #1
 8003e7c:	e7e6      	b.n	8003e4c <lsm6dso_xl_data_rate_set+0x74>
            if (val == LSM6DSO_XL_ODR_OFF)
 8003e7e:	b19d      	cbz	r5, 8003ea8 <lsm6dso_xl_data_rate_set+0xd0>
            else if (val == LSM6DSO_XL_ODR_12Hz5)
 8003e80:	2d01      	cmp	r5, #1
 8003e82:	d1e3      	bne.n	8003e4c <lsm6dso_xl_data_rate_set+0x74>
              odr_xl = LSM6DSO_XL_ODR_26Hz;
 8003e84:	2502      	movs	r5, #2
 8003e86:	e7e1      	b.n	8003e4c <lsm6dso_xl_data_rate_set+0x74>
            if (val == LSM6DSO_XL_ODR_OFF)
 8003e88:	b185      	cbz	r5, 8003eac <lsm6dso_xl_data_rate_set+0xd4>
            else if (val == LSM6DSO_XL_ODR_12Hz5)
 8003e8a:	2d01      	cmp	r5, #1
 8003e8c:	d010      	beq.n	8003eb0 <lsm6dso_xl_data_rate_set+0xd8>
            else if (val == LSM6DSO_XL_ODR_26Hz)
 8003e8e:	2d02      	cmp	r5, #2
 8003e90:	d1dc      	bne.n	8003e4c <lsm6dso_xl_data_rate_set+0x74>
              odr_xl = LSM6DSO_XL_ODR_52Hz;
 8003e92:	2503      	movs	r5, #3
 8003e94:	e7da      	b.n	8003e4c <lsm6dso_xl_data_rate_set+0x74>
            if (val == LSM6DSO_XL_ODR_OFF)
 8003e96:	b16d      	cbz	r5, 8003eb4 <lsm6dso_xl_data_rate_set+0xdc>
            else if (val == LSM6DSO_XL_ODR_12Hz5)
 8003e98:	2d01      	cmp	r5, #1
 8003e9a:	d00d      	beq.n	8003eb8 <lsm6dso_xl_data_rate_set+0xe0>
            else if (val == LSM6DSO_XL_ODR_26Hz)
 8003e9c:	2d02      	cmp	r5, #2
 8003e9e:	d00d      	beq.n	8003ebc <lsm6dso_xl_data_rate_set+0xe4>
            else if (val == LSM6DSO_XL_ODR_52Hz)
 8003ea0:	2d03      	cmp	r5, #3
 8003ea2:	d1d3      	bne.n	8003e4c <lsm6dso_xl_data_rate_set+0x74>
              odr_xl = LSM6DSO_XL_ODR_104Hz;
 8003ea4:	2504      	movs	r5, #4
 8003ea6:	e7d1      	b.n	8003e4c <lsm6dso_xl_data_rate_set+0x74>
              odr_xl = LSM6DSO_XL_ODR_26Hz;
 8003ea8:	2502      	movs	r5, #2
 8003eaa:	e7cf      	b.n	8003e4c <lsm6dso_xl_data_rate_set+0x74>
              odr_xl = LSM6DSO_XL_ODR_52Hz;
 8003eac:	2503      	movs	r5, #3
 8003eae:	e7cd      	b.n	8003e4c <lsm6dso_xl_data_rate_set+0x74>
              odr_xl = LSM6DSO_XL_ODR_52Hz;
 8003eb0:	2503      	movs	r5, #3
 8003eb2:	e7cb      	b.n	8003e4c <lsm6dso_xl_data_rate_set+0x74>
              odr_xl = LSM6DSO_XL_ODR_104Hz;
 8003eb4:	2504      	movs	r5, #4
 8003eb6:	e7c9      	b.n	8003e4c <lsm6dso_xl_data_rate_set+0x74>
              odr_xl = LSM6DSO_XL_ODR_104Hz;
 8003eb8:	2504      	movs	r5, #4
 8003eba:	e7c7      	b.n	8003e4c <lsm6dso_xl_data_rate_set+0x74>
              odr_xl = LSM6DSO_XL_ODR_104Hz;
 8003ebc:	2504      	movs	r5, #4
 8003ebe:	e7c5      	b.n	8003e4c <lsm6dso_xl_data_rate_set+0x74>
    ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL1_XL, (uint8_t *)&reg, 1);
 8003ec0:	2301      	movs	r3, #1
 8003ec2:	466a      	mov	r2, sp
 8003ec4:	2110      	movs	r1, #16
 8003ec6:	4620      	mov	r0, r4
 8003ec8:	f7ff fd68 	bl	800399c <lsm6dso_read_reg>
 8003ecc:	e7c0      	b.n	8003e50 <lsm6dso_xl_data_rate_set+0x78>
    reg.odr_xl = (uint8_t) odr_xl;
 8003ece:	f89d 3000 	ldrb.w	r3, [sp]
 8003ed2:	f365 1307 	bfi	r3, r5, #4, #4
 8003ed6:	f88d 3000 	strb.w	r3, [sp]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL1_XL, (uint8_t *)&reg, 1);
 8003eda:	2301      	movs	r3, #1
 8003edc:	466a      	mov	r2, sp
 8003ede:	2110      	movs	r1, #16
 8003ee0:	4620      	mov	r0, r4
 8003ee2:	f7ff fd60 	bl	80039a6 <lsm6dso_write_reg>
  return ret;
 8003ee6:	e7b5      	b.n	8003e54 <lsm6dso_xl_data_rate_set+0x7c>

08003ee8 <lsm6dso_gy_data_rate_set>:
{
 8003ee8:	b530      	push	{r4, r5, lr}
 8003eea:	b083      	sub	sp, #12
 8003eec:	4604      	mov	r4, r0
 8003eee:	460d      	mov	r5, r1
  ret =  lsm6dso_fsm_enable_get(ctx, &fsm_enable);
 8003ef0:	a901      	add	r1, sp, #4
 8003ef2:	f7ff ff2e 	bl	8003d52 <lsm6dso_fsm_enable_get>
  if (ret == 0)
 8003ef6:	bb88      	cbnz	r0, 8003f5c <lsm6dso_gy_data_rate_set+0x74>
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
 8003ef8:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8003efc:	f002 0301 	and.w	r3, r2, #1
         fsm_enable.fsm_enable_a.fsm2_en  |
 8003f00:	f3c2 0140 	ubfx	r1, r2, #1, #1
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
 8003f04:	430b      	orrs	r3, r1
         fsm_enable.fsm_enable_a.fsm3_en  |
 8003f06:	f3c2 0180 	ubfx	r1, r2, #2, #1
         fsm_enable.fsm_enable_a.fsm2_en  |
 8003f0a:	430b      	orrs	r3, r1
         fsm_enable.fsm_enable_a.fsm4_en  |
 8003f0c:	f3c2 01c0 	ubfx	r1, r2, #3, #1
         fsm_enable.fsm_enable_a.fsm3_en  |
 8003f10:	430b      	orrs	r3, r1
         fsm_enable.fsm_enable_a.fsm5_en  |
 8003f12:	f3c2 1100 	ubfx	r1, r2, #4, #1
         fsm_enable.fsm_enable_a.fsm4_en  |
 8003f16:	430b      	orrs	r3, r1
         fsm_enable.fsm_enable_a.fsm6_en  |
 8003f18:	f3c2 1140 	ubfx	r1, r2, #5, #1
         fsm_enable.fsm_enable_a.fsm5_en  |
 8003f1c:	430b      	orrs	r3, r1
         fsm_enable.fsm_enable_a.fsm7_en  |
 8003f1e:	f3c2 1180 	ubfx	r1, r2, #6, #1
         fsm_enable.fsm_enable_a.fsm6_en  |
 8003f22:	430b      	orrs	r3, r1
         fsm_enable.fsm_enable_a.fsm7_en  |
 8003f24:	ea43 13d2 	orr.w	r3, r3, r2, lsr #7
         fsm_enable.fsm_enable_b.fsm9_en  |
 8003f28:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8003f2c:	f002 0101 	and.w	r1, r2, #1
         fsm_enable.fsm_enable_a.fsm8_en  |
 8003f30:	430b      	orrs	r3, r1
         fsm_enable.fsm_enable_b.fsm10_en |
 8003f32:	f3c2 0140 	ubfx	r1, r2, #1, #1
         fsm_enable.fsm_enable_b.fsm9_en  |
 8003f36:	430b      	orrs	r3, r1
         fsm_enable.fsm_enable_b.fsm11_en |
 8003f38:	f3c2 0180 	ubfx	r1, r2, #2, #1
         fsm_enable.fsm_enable_b.fsm10_en |
 8003f3c:	430b      	orrs	r3, r1
         fsm_enable.fsm_enable_b.fsm12_en |
 8003f3e:	f3c2 01c0 	ubfx	r1, r2, #3, #1
         fsm_enable.fsm_enable_b.fsm11_en |
 8003f42:	430b      	orrs	r3, r1
         fsm_enable.fsm_enable_b.fsm13_en |
 8003f44:	f3c2 1100 	ubfx	r1, r2, #4, #1
         fsm_enable.fsm_enable_b.fsm12_en |
 8003f48:	430b      	orrs	r3, r1
         fsm_enable.fsm_enable_b.fsm14_en |
 8003f4a:	f3c2 1140 	ubfx	r1, r2, #5, #1
         fsm_enable.fsm_enable_b.fsm13_en |
 8003f4e:	430b      	orrs	r3, r1
         fsm_enable.fsm_enable_b.fsm15_en |
 8003f50:	f3c2 1180 	ubfx	r1, r2, #6, #1
         fsm_enable.fsm_enable_b.fsm14_en |
 8003f54:	430b      	orrs	r3, r1
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
 8003f56:	ea53 13d2 	orrs.w	r3, r3, r2, lsr #7
 8003f5a:	d105      	bne.n	8003f68 <lsm6dso_gy_data_rate_set+0x80>
  if (ret == 0)
 8003f5c:	2800      	cmp	r0, #0
 8003f5e:	d037      	beq.n	8003fd0 <lsm6dso_gy_data_rate_set+0xe8>
  if (ret == 0)
 8003f60:	2800      	cmp	r0, #0
 8003f62:	d03c      	beq.n	8003fde <lsm6dso_gy_data_rate_set+0xf6>
}
 8003f64:	b003      	add	sp, #12
 8003f66:	bd30      	pop	{r4, r5, pc}
      ret =  lsm6dso_fsm_data_rate_get(ctx, &fsm_odr);
 8003f68:	f10d 0103 	add.w	r1, sp, #3
 8003f6c:	4620      	mov	r0, r4
 8003f6e:	f7ff ff05 	bl	8003d7c <lsm6dso_fsm_data_rate_get>
      if (ret == 0)
 8003f72:	2800      	cmp	r0, #0
 8003f74:	d1f2      	bne.n	8003f5c <lsm6dso_gy_data_rate_set+0x74>
        switch (fsm_odr)
 8003f76:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8003f7a:	2b03      	cmp	r3, #3
 8003f7c:	d8ee      	bhi.n	8003f5c <lsm6dso_gy_data_rate_set+0x74>
 8003f7e:	e8df f003 	tbb	[pc, r3]
 8003f82:	0602      	.short	0x0602
 8003f84:	120b      	.short	0x120b
            if (val == LSM6DSO_GY_ODR_OFF)
 8003f86:	2d00      	cmp	r5, #0
 8003f88:	d1e8      	bne.n	8003f5c <lsm6dso_gy_data_rate_set+0x74>
              odr_gy = LSM6DSO_GY_ODR_12Hz5;
 8003f8a:	2501      	movs	r5, #1
 8003f8c:	e7e6      	b.n	8003f5c <lsm6dso_gy_data_rate_set+0x74>
            if (val == LSM6DSO_GY_ODR_OFF)
 8003f8e:	b19d      	cbz	r5, 8003fb8 <lsm6dso_gy_data_rate_set+0xd0>
            else if (val == LSM6DSO_GY_ODR_12Hz5)
 8003f90:	2d01      	cmp	r5, #1
 8003f92:	d1e3      	bne.n	8003f5c <lsm6dso_gy_data_rate_set+0x74>
              odr_gy = LSM6DSO_GY_ODR_26Hz;
 8003f94:	2502      	movs	r5, #2
 8003f96:	e7e1      	b.n	8003f5c <lsm6dso_gy_data_rate_set+0x74>
            if (val == LSM6DSO_GY_ODR_OFF)
 8003f98:	b185      	cbz	r5, 8003fbc <lsm6dso_gy_data_rate_set+0xd4>
            else if (val == LSM6DSO_GY_ODR_12Hz5)
 8003f9a:	2d01      	cmp	r5, #1
 8003f9c:	d010      	beq.n	8003fc0 <lsm6dso_gy_data_rate_set+0xd8>
            else if (val == LSM6DSO_GY_ODR_26Hz)
 8003f9e:	2d02      	cmp	r5, #2
 8003fa0:	d1dc      	bne.n	8003f5c <lsm6dso_gy_data_rate_set+0x74>
              odr_gy = LSM6DSO_GY_ODR_52Hz;
 8003fa2:	2503      	movs	r5, #3
 8003fa4:	e7da      	b.n	8003f5c <lsm6dso_gy_data_rate_set+0x74>
            if (val == LSM6DSO_GY_ODR_OFF)
 8003fa6:	b16d      	cbz	r5, 8003fc4 <lsm6dso_gy_data_rate_set+0xdc>
            else if (val == LSM6DSO_GY_ODR_12Hz5)
 8003fa8:	2d01      	cmp	r5, #1
 8003faa:	d00d      	beq.n	8003fc8 <lsm6dso_gy_data_rate_set+0xe0>
            else if (val == LSM6DSO_GY_ODR_26Hz)
 8003fac:	2d02      	cmp	r5, #2
 8003fae:	d00d      	beq.n	8003fcc <lsm6dso_gy_data_rate_set+0xe4>
            else if (val == LSM6DSO_GY_ODR_52Hz)
 8003fb0:	2d03      	cmp	r5, #3
 8003fb2:	d1d3      	bne.n	8003f5c <lsm6dso_gy_data_rate_set+0x74>
              odr_gy = LSM6DSO_GY_ODR_104Hz;
 8003fb4:	2504      	movs	r5, #4
 8003fb6:	e7d1      	b.n	8003f5c <lsm6dso_gy_data_rate_set+0x74>
              odr_gy = LSM6DSO_GY_ODR_26Hz;
 8003fb8:	2502      	movs	r5, #2
 8003fba:	e7cf      	b.n	8003f5c <lsm6dso_gy_data_rate_set+0x74>
              odr_gy = LSM6DSO_GY_ODR_52Hz;
 8003fbc:	2503      	movs	r5, #3
 8003fbe:	e7cd      	b.n	8003f5c <lsm6dso_gy_data_rate_set+0x74>
              odr_gy = LSM6DSO_GY_ODR_52Hz;
 8003fc0:	2503      	movs	r5, #3
 8003fc2:	e7cb      	b.n	8003f5c <lsm6dso_gy_data_rate_set+0x74>
              odr_gy = LSM6DSO_GY_ODR_104Hz;
 8003fc4:	2504      	movs	r5, #4
 8003fc6:	e7c9      	b.n	8003f5c <lsm6dso_gy_data_rate_set+0x74>
              odr_gy = LSM6DSO_GY_ODR_104Hz;
 8003fc8:	2504      	movs	r5, #4
 8003fca:	e7c7      	b.n	8003f5c <lsm6dso_gy_data_rate_set+0x74>
              odr_gy = LSM6DSO_GY_ODR_104Hz;
 8003fcc:	2504      	movs	r5, #4
 8003fce:	e7c5      	b.n	8003f5c <lsm6dso_gy_data_rate_set+0x74>
    ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL2_G, (uint8_t *)&reg, 1);
 8003fd0:	2301      	movs	r3, #1
 8003fd2:	466a      	mov	r2, sp
 8003fd4:	2111      	movs	r1, #17
 8003fd6:	4620      	mov	r0, r4
 8003fd8:	f7ff fce0 	bl	800399c <lsm6dso_read_reg>
 8003fdc:	e7c0      	b.n	8003f60 <lsm6dso_gy_data_rate_set+0x78>
    reg.odr_g = (uint8_t) odr_gy;
 8003fde:	f89d 3000 	ldrb.w	r3, [sp]
 8003fe2:	f365 1307 	bfi	r3, r5, #4, #4
 8003fe6:	f88d 3000 	strb.w	r3, [sp]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL2_G, (uint8_t *)&reg, 1);
 8003fea:	2301      	movs	r3, #1
 8003fec:	466a      	mov	r2, sp
 8003fee:	2111      	movs	r1, #17
 8003ff0:	4620      	mov	r0, r4
 8003ff2:	f7ff fcd8 	bl	80039a6 <lsm6dso_write_reg>
  return ret;
 8003ff6:	e7b5      	b.n	8003f64 <lsm6dso_gy_data_rate_set+0x7c>

08003ff8 <LSM6DSO_0_Probe>:
/**
  * @brief  Register Bus IOs for instance 0 if component ID is OK
  * @retval BSP status
  */
static int32_t LSM6DSO_0_Probe(uint32_t Functions)
{
 8003ff8:	b570      	push	{r4, r5, r6, lr}
 8003ffa:	b090      	sub	sp, #64	; 0x40
 8003ffc:	4604      	mov	r4, r0
  static LSM6DSO_Object_t lsm6dso_obj_0;
  LSM6DSO_Capabilities_t  cap;
  int32_t ret = BSP_ERROR_NONE;

  /* Configure the accelero driver */
  io_ctx.BusType     = LSM6DSO_I2C_BUS; /* I2C */
 8003ffe:	2300      	movs	r3, #0
 8004000:	930a      	str	r3, [sp, #40]	; 0x28
  io_ctx.Address     = LSM6DSO_I2C_ADD_H;
 8004002:	23d7      	movs	r3, #215	; 0xd7
 8004004:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
  io_ctx.Init        = IKS01A3_I2C_Init;
 8004008:	4b36      	ldr	r3, [pc, #216]	; (80040e4 <LSM6DSO_0_Probe+0xec>)
 800400a:	9308      	str	r3, [sp, #32]
  io_ctx.DeInit      = IKS01A3_I2C_DeInit;
 800400c:	4b36      	ldr	r3, [pc, #216]	; (80040e8 <LSM6DSO_0_Probe+0xf0>)
 800400e:	9309      	str	r3, [sp, #36]	; 0x24
  io_ctx.ReadReg     = IKS01A3_I2C_ReadReg;
 8004010:	4b36      	ldr	r3, [pc, #216]	; (80040ec <LSM6DSO_0_Probe+0xf4>)
 8004012:	930d      	str	r3, [sp, #52]	; 0x34
  io_ctx.WriteReg    = IKS01A3_I2C_WriteReg;
 8004014:	4b36      	ldr	r3, [pc, #216]	; (80040f0 <LSM6DSO_0_Probe+0xf8>)
 8004016:	930c      	str	r3, [sp, #48]	; 0x30
  io_ctx.GetTick     = IKS01A3_GetTick;
 8004018:	4b36      	ldr	r3, [pc, #216]	; (80040f4 <LSM6DSO_0_Probe+0xfc>)
 800401a:	930e      	str	r3, [sp, #56]	; 0x38
  io_ctx.Delay       = IKS01A3_Delay;
 800401c:	4b36      	ldr	r3, [pc, #216]	; (80040f8 <LSM6DSO_0_Probe+0x100>)
 800401e:	930f      	str	r3, [sp, #60]	; 0x3c

  if (LSM6DSO_RegisterBusIO(&lsm6dso_obj_0, &io_ctx) != LSM6DSO_OK)
 8004020:	a908      	add	r1, sp, #32
 8004022:	4836      	ldr	r0, [pc, #216]	; (80040fc <LSM6DSO_0_Probe+0x104>)
 8004024:	f7ff fc7e 	bl	8003924 <LSM6DSO_RegisterBusIO>
 8004028:	2800      	cmp	r0, #0
 800402a:	d14e      	bne.n	80040ca <LSM6DSO_0_Probe+0xd2>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
  }
  else if (LSM6DSO_ReadID(&lsm6dso_obj_0, &id) != LSM6DSO_OK)
 800402c:	f10d 011f 	add.w	r1, sp, #31
 8004030:	4832      	ldr	r0, [pc, #200]	; (80040fc <LSM6DSO_0_Probe+0x104>)
 8004032:	f7ff f883 	bl	800313c <LSM6DSO_ReadID>
 8004036:	4605      	mov	r5, r0
 8004038:	2800      	cmp	r0, #0
 800403a:	d149      	bne.n	80040d0 <LSM6DSO_0_Probe+0xd8>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
  }
  else if (id != LSM6DSO_ID)
 800403c:	f89d 301f 	ldrb.w	r3, [sp, #31]
 8004040:	2b6c      	cmp	r3, #108	; 0x6c
 8004042:	d148      	bne.n	80040d6 <LSM6DSO_0_Probe+0xde>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
  }
  else
  {
    (void)LSM6DSO_GetCapabilities(&lsm6dso_obj_0, &cap);
 8004044:	4e2d      	ldr	r6, [pc, #180]	; (80040fc <LSM6DSO_0_Probe+0x104>)
 8004046:	4669      	mov	r1, sp
 8004048:	4630      	mov	r0, r6
 800404a:	f7fe fdfb 	bl	8002c44 <LSM6DSO_GetCapabilities>
    MotionCtx[IKS01A3_LSM6DSO_0].Functions = ((uint32_t)cap.Gyro) | ((uint32_t)cap.Acc << 1) | ((uint32_t)cap.Magneto << 2);
 800404e:	f89d 2001 	ldrb.w	r2, [sp, #1]
 8004052:	f89d 3000 	ldrb.w	r3, [sp]
 8004056:	ea42 0343 	orr.w	r3, r2, r3, lsl #1
 800405a:	f89d 1002 	ldrb.w	r1, [sp, #2]
 800405e:	ea43 0381 	orr.w	r3, r3, r1, lsl #2
 8004062:	4927      	ldr	r1, [pc, #156]	; (8004100 <LSM6DSO_0_Probe+0x108>)
 8004064:	600b      	str	r3, [r1, #0]

    MotionCompObj[IKS01A3_LSM6DSO_0] = &lsm6dso_obj_0;
 8004066:	4b27      	ldr	r3, [pc, #156]	; (8004104 <LSM6DSO_0_Probe+0x10c>)
 8004068:	601e      	str	r6, [r3, #0]
    /* The second cast (void *) is added to bypass Misra R11.3 rule */
    MotionDrv[IKS01A3_LSM6DSO_0] = (MOTION_SENSOR_CommonDrv_t *)(void *)&LSM6DSO_COMMON_Driver;
 800406a:	4b27      	ldr	r3, [pc, #156]	; (8004108 <LSM6DSO_0_Probe+0x110>)
 800406c:	4927      	ldr	r1, [pc, #156]	; (800410c <LSM6DSO_0_Probe+0x114>)
 800406e:	6019      	str	r1, [r3, #0]

    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_GYRO) == MOTION_GYRO) && (cap.Gyro == 1U))
 8004070:	f014 0f01 	tst.w	r4, #1
 8004074:	d001      	beq.n	800407a <LSM6DSO_0_Probe+0x82>
 8004076:	2a01      	cmp	r2, #1
 8004078:	d00d      	beq.n	8004096 <LSM6DSO_0_Probe+0x9e>
      else
      {
        ret = BSP_ERROR_NONE;
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_ACCELERO) == MOTION_ACCELERO) && (cap.Acc == 1U))
 800407a:	f014 0f02 	tst.w	r4, #2
 800407e:	d003      	beq.n	8004088 <LSM6DSO_0_Probe+0x90>
 8004080:	f89d 3000 	ldrb.w	r3, [sp]
 8004084:	2b01      	cmp	r3, #1
 8004086:	d011      	beq.n	80040ac <LSM6DSO_0_Probe+0xb4>
      else
      {
        ret = BSP_ERROR_NONE;
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_MAGNETO) == MOTION_MAGNETO))
 8004088:	b915      	cbnz	r5, 8004090 <LSM6DSO_0_Probe+0x98>
 800408a:	f014 0f04 	tst.w	r4, #4
 800408e:	d125      	bne.n	80040dc <LSM6DSO_0_Probe+0xe4>
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
    }
  }
  return ret;
}
 8004090:	4628      	mov	r0, r5
 8004092:	b010      	add	sp, #64	; 0x40
 8004094:	bd70      	pop	{r4, r5, r6, pc}
      MotionFuncDrv[IKS01A3_LSM6DSO_0][FunctionIndex[MOTION_GYRO]] = (MOTION_SENSOR_FuncDrv_t *)(void *)&LSM6DSO_GYRO_Driver;
 8004096:	4b1e      	ldr	r3, [pc, #120]	; (8004110 <LSM6DSO_0_Probe+0x118>)
 8004098:	4a1e      	ldr	r2, [pc, #120]	; (8004114 <LSM6DSO_0_Probe+0x11c>)
 800409a:	601a      	str	r2, [r3, #0]
      if (MotionDrv[IKS01A3_LSM6DSO_0]->Init(MotionCompObj[IKS01A3_LSM6DSO_0]) != LSM6DSO_OK)
 800409c:	680b      	ldr	r3, [r1, #0]
 800409e:	4630      	mov	r0, r6
 80040a0:	4798      	blx	r3
 80040a2:	2800      	cmp	r0, #0
 80040a4:	d0e9      	beq.n	800407a <LSM6DSO_0_Probe+0x82>
        ret = BSP_ERROR_COMPONENT_FAILURE;
 80040a6:	f06f 0504 	mvn.w	r5, #4
 80040aa:	e7ed      	b.n	8004088 <LSM6DSO_0_Probe+0x90>
      MotionFuncDrv[IKS01A3_LSM6DSO_0][FunctionIndex[MOTION_ACCELERO]] = (MOTION_SENSOR_FuncDrv_t *)(
 80040ac:	4b18      	ldr	r3, [pc, #96]	; (8004110 <LSM6DSO_0_Probe+0x118>)
 80040ae:	4a1a      	ldr	r2, [pc, #104]	; (8004118 <LSM6DSO_0_Probe+0x120>)
 80040b0:	605a      	str	r2, [r3, #4]
      if (MotionDrv[IKS01A3_LSM6DSO_0]->Init(MotionCompObj[IKS01A3_LSM6DSO_0]) != LSM6DSO_OK)
 80040b2:	4b15      	ldr	r3, [pc, #84]	; (8004108 <LSM6DSO_0_Probe+0x110>)
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	4a12      	ldr	r2, [pc, #72]	; (8004104 <LSM6DSO_0_Probe+0x10c>)
 80040ba:	6810      	ldr	r0, [r2, #0]
 80040bc:	4798      	blx	r3
 80040be:	4605      	mov	r5, r0
 80040c0:	2800      	cmp	r0, #0
 80040c2:	d0e2      	beq.n	800408a <LSM6DSO_0_Probe+0x92>
        ret = BSP_ERROR_COMPONENT_FAILURE;
 80040c4:	f06f 0504 	mvn.w	r5, #4
 80040c8:	e7e2      	b.n	8004090 <LSM6DSO_0_Probe+0x98>
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 80040ca:	f06f 0506 	mvn.w	r5, #6
 80040ce:	e7df      	b.n	8004090 <LSM6DSO_0_Probe+0x98>
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 80040d0:	f06f 0506 	mvn.w	r5, #6
 80040d4:	e7dc      	b.n	8004090 <LSM6DSO_0_Probe+0x98>
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 80040d6:	f06f 0506 	mvn.w	r5, #6
 80040da:	e7d9      	b.n	8004090 <LSM6DSO_0_Probe+0x98>
      ret = BSP_ERROR_COMPONENT_FAILURE;
 80040dc:	f06f 0504 	mvn.w	r5, #4
  return ret;
 80040e0:	e7d6      	b.n	8004090 <LSM6DSO_0_Probe+0x98>
 80040e2:	bf00      	nop
 80040e4:	080014bd 	.word	0x080014bd
 80040e8:	080013d5 	.word	0x080013d5
 80040ec:	08001449 	.word	0x08001449
 80040f0:	0800140d 	.word	0x0800140d
 80040f4:	08001485 	.word	0x08001485
 80040f8:	0800471d 	.word	0x0800471d
 80040fc:	20016e20 	.word	0x20016e20
 8004100:	20016d74 	.word	0x20016d74
 8004104:	20016d68 	.word	0x20016d68
 8004108:	20016d80 	.word	0x20016d80
 800410c:	20000094 	.word	0x20000094
 8004110:	20016d8c 	.word	0x20016d8c
 8004114:	200000a4 	.word	0x200000a4
 8004118:	20000070 	.word	0x20000070

0800411c <LIS2DW12_0_Probe>:
/**
  * @brief  Register Bus IOs for instance 1 if component ID is OK
  * @retval BSP status
  */
static int32_t LIS2DW12_0_Probe(uint32_t Functions)
{
 800411c:	b570      	push	{r4, r5, r6, lr}
 800411e:	b090      	sub	sp, #64	; 0x40
 8004120:	4604      	mov	r4, r0
  static LIS2DW12_Object_t lis2dw12_obj_0;
  LIS2DW12_Capabilities_t  cap;
  int32_t ret = BSP_ERROR_NONE;

  /* Configure the accelero driver */
  io_ctx.BusType     = LIS2DW12_I2C_BUS; /* I2C */
 8004122:	2300      	movs	r3, #0
 8004124:	930a      	str	r3, [sp, #40]	; 0x28
  io_ctx.Address     = LIS2DW12_I2C_ADD_H;
 8004126:	2333      	movs	r3, #51	; 0x33
 8004128:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
  io_ctx.Init        = IKS01A3_I2C_Init;
 800412c:	4b2e      	ldr	r3, [pc, #184]	; (80041e8 <LIS2DW12_0_Probe+0xcc>)
 800412e:	9308      	str	r3, [sp, #32]
  io_ctx.DeInit      = IKS01A3_I2C_DeInit;
 8004130:	4b2e      	ldr	r3, [pc, #184]	; (80041ec <LIS2DW12_0_Probe+0xd0>)
 8004132:	9309      	str	r3, [sp, #36]	; 0x24
  io_ctx.ReadReg     = IKS01A3_I2C_ReadReg;
 8004134:	4b2e      	ldr	r3, [pc, #184]	; (80041f0 <LIS2DW12_0_Probe+0xd4>)
 8004136:	930d      	str	r3, [sp, #52]	; 0x34
  io_ctx.WriteReg    = IKS01A3_I2C_WriteReg;
 8004138:	4b2e      	ldr	r3, [pc, #184]	; (80041f4 <LIS2DW12_0_Probe+0xd8>)
 800413a:	930c      	str	r3, [sp, #48]	; 0x30
  io_ctx.GetTick     = IKS01A3_GetTick;
 800413c:	4b2e      	ldr	r3, [pc, #184]	; (80041f8 <LIS2DW12_0_Probe+0xdc>)
 800413e:	930e      	str	r3, [sp, #56]	; 0x38
  io_ctx.Delay       = IKS01A3_Delay;
 8004140:	4b2e      	ldr	r3, [pc, #184]	; (80041fc <LIS2DW12_0_Probe+0xe0>)
 8004142:	930f      	str	r3, [sp, #60]	; 0x3c

  if (LIS2DW12_RegisterBusIO(&lis2dw12_obj_0, &io_ctx) != LIS2DW12_OK)
 8004144:	a908      	add	r1, sp, #32
 8004146:	482e      	ldr	r0, [pc, #184]	; (8004200 <LIS2DW12_0_Probe+0xe4>)
 8004148:	f7fd fe6c 	bl	8001e24 <LIS2DW12_RegisterBusIO>
 800414c:	2800      	cmp	r0, #0
 800414e:	d13b      	bne.n	80041c8 <LIS2DW12_0_Probe+0xac>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
  }
  else if (LIS2DW12_ReadID(&lis2dw12_obj_0, &id) != LIS2DW12_OK)
 8004150:	f10d 011f 	add.w	r1, sp, #31
 8004154:	482a      	ldr	r0, [pc, #168]	; (8004200 <LIS2DW12_0_Probe+0xe4>)
 8004156:	f7fd fc1d 	bl	8001994 <LIS2DW12_ReadID>
 800415a:	4605      	mov	r5, r0
 800415c:	2800      	cmp	r0, #0
 800415e:	d136      	bne.n	80041ce <LIS2DW12_0_Probe+0xb2>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
  }
  else if (id != LIS2DW12_ID)
 8004160:	f89d 301f 	ldrb.w	r3, [sp, #31]
 8004164:	2b44      	cmp	r3, #68	; 0x44
 8004166:	d135      	bne.n	80041d4 <LIS2DW12_0_Probe+0xb8>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
  }
  else
  {
    (void)LIS2DW12_GetCapabilities(&lis2dw12_obj_0, &cap);
 8004168:	4e25      	ldr	r6, [pc, #148]	; (8004200 <LIS2DW12_0_Probe+0xe4>)
 800416a:	4669      	mov	r1, sp
 800416c:	4630      	mov	r0, r6
 800416e:	f7fd fa21 	bl	80015b4 <LIS2DW12_GetCapabilities>
    MotionCtx[IKS01A3_LIS2DW12_0].Functions = ((uint32_t)cap.Gyro) | ((uint32_t)cap.Acc << 1) | ((uint32_t)cap.Magneto << 2);
 8004172:	f89d 3001 	ldrb.w	r3, [sp, #1]
 8004176:	f89d 2000 	ldrb.w	r2, [sp]
 800417a:	ea43 0342 	orr.w	r3, r3, r2, lsl #1
 800417e:	f89d 1002 	ldrb.w	r1, [sp, #2]
 8004182:	ea43 0381 	orr.w	r3, r3, r1, lsl #2
 8004186:	491f      	ldr	r1, [pc, #124]	; (8004204 <LIS2DW12_0_Probe+0xe8>)
 8004188:	604b      	str	r3, [r1, #4]

    MotionCompObj[IKS01A3_LIS2DW12_0] = &lis2dw12_obj_0;
 800418a:	4b1f      	ldr	r3, [pc, #124]	; (8004208 <LIS2DW12_0_Probe+0xec>)
 800418c:	605e      	str	r6, [r3, #4]
    /* The second cast (void *) is added to bypass Misra R11.3 rule */
    MotionDrv[IKS01A3_LIS2DW12_0] = (MOTION_SENSOR_CommonDrv_t *)(void *)&LIS2DW12_COMMON_Driver;
 800418e:	4b1f      	ldr	r3, [pc, #124]	; (800420c <LIS2DW12_0_Probe+0xf0>)
 8004190:	491f      	ldr	r1, [pc, #124]	; (8004210 <LIS2DW12_0_Probe+0xf4>)
 8004192:	6059      	str	r1, [r3, #4]

    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_ACCELERO) == MOTION_ACCELERO) && (cap.Acc == 1U))
 8004194:	f014 0f02 	tst.w	r4, #2
 8004198:	d001      	beq.n	800419e <LIS2DW12_0_Probe+0x82>
 800419a:	2a01      	cmp	r2, #1
 800419c:	d009      	beq.n	80041b2 <LIS2DW12_0_Probe+0x96>
      else
      {
        ret = BSP_ERROR_NONE;
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_GYRO) == MOTION_GYRO))
 800419e:	f014 0f01 	tst.w	r4, #1
 80041a2:	d11a      	bne.n	80041da <LIS2DW12_0_Probe+0xbe>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_MAGNETO) == MOTION_MAGNETO))
 80041a4:	b915      	cbnz	r5, 80041ac <LIS2DW12_0_Probe+0x90>
 80041a6:	f014 0f04 	tst.w	r4, #4
 80041aa:	d119      	bne.n	80041e0 <LIS2DW12_0_Probe+0xc4>
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
    }
  }
  return ret;
}
 80041ac:	4628      	mov	r0, r5
 80041ae:	b010      	add	sp, #64	; 0x40
 80041b0:	bd70      	pop	{r4, r5, r6, pc}
      MotionFuncDrv[IKS01A3_LIS2DW12_0][FunctionIndex[MOTION_ACCELERO]] = (MOTION_SENSOR_FuncDrv_t *)(
 80041b2:	4b18      	ldr	r3, [pc, #96]	; (8004214 <LIS2DW12_0_Probe+0xf8>)
 80041b4:	4a18      	ldr	r2, [pc, #96]	; (8004218 <LIS2DW12_0_Probe+0xfc>)
 80041b6:	611a      	str	r2, [r3, #16]
      if (MotionDrv[IKS01A3_LIS2DW12_0]->Init(MotionCompObj[IKS01A3_LIS2DW12_0]) != LIS2DW12_OK)
 80041b8:	680b      	ldr	r3, [r1, #0]
 80041ba:	4630      	mov	r0, r6
 80041bc:	4798      	blx	r3
 80041be:	2800      	cmp	r0, #0
 80041c0:	d0ed      	beq.n	800419e <LIS2DW12_0_Probe+0x82>
        ret = BSP_ERROR_COMPONENT_FAILURE;
 80041c2:	f06f 0504 	mvn.w	r5, #4
 80041c6:	e7ed      	b.n	80041a4 <LIS2DW12_0_Probe+0x88>
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 80041c8:	f06f 0506 	mvn.w	r5, #6
 80041cc:	e7ee      	b.n	80041ac <LIS2DW12_0_Probe+0x90>
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 80041ce:	f06f 0506 	mvn.w	r5, #6
 80041d2:	e7eb      	b.n	80041ac <LIS2DW12_0_Probe+0x90>
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 80041d4:	f06f 0506 	mvn.w	r5, #6
 80041d8:	e7e8      	b.n	80041ac <LIS2DW12_0_Probe+0x90>
      ret = BSP_ERROR_COMPONENT_FAILURE;
 80041da:	f06f 0504 	mvn.w	r5, #4
 80041de:	e7e5      	b.n	80041ac <LIS2DW12_0_Probe+0x90>
      ret = BSP_ERROR_COMPONENT_FAILURE;
 80041e0:	f06f 0504 	mvn.w	r5, #4
  return ret;
 80041e4:	e7e2      	b.n	80041ac <LIS2DW12_0_Probe+0x90>
 80041e6:	bf00      	nop
 80041e8:	080014bd 	.word	0x080014bd
 80041ec:	080013d5 	.word	0x080013d5
 80041f0:	08001449 	.word	0x08001449
 80041f4:	0800140d 	.word	0x0800140d
 80041f8:	08001485 	.word	0x08001485
 80041fc:	0800471d 	.word	0x0800471d
 8004200:	20016db0 	.word	0x20016db0
 8004204:	20016d74 	.word	0x20016d74
 8004208:	20016d68 	.word	0x20016d68
 800420c:	20016d80 	.word	0x20016d80
 8004210:	2000002c 	.word	0x2000002c
 8004214:	20016d8c 	.word	0x20016d8c
 8004218:	20000008 	.word	0x20000008

0800421c <LIS2MDL_0_Probe>:
/**
  * @brief  Register Bus IOs for instance 1 if component ID is OK
  * @retval BSP status
  */
static int32_t LIS2MDL_0_Probe(uint32_t Functions)
{
 800421c:	b570      	push	{r4, r5, r6, lr}
 800421e:	b090      	sub	sp, #64	; 0x40
 8004220:	4604      	mov	r4, r0
  static LIS2MDL_Object_t lis2mdl_obj_0;
  LIS2MDL_Capabilities_t  cap;
  int32_t                 ret = BSP_ERROR_NONE;

  /* Configure the accelero driver */
  io_ctx.BusType     = LIS2MDL_I2C_BUS; /* I2C */
 8004222:	2300      	movs	r3, #0
 8004224:	930a      	str	r3, [sp, #40]	; 0x28
  io_ctx.Address     = LIS2MDL_I2C_ADD;
 8004226:	233d      	movs	r3, #61	; 0x3d
 8004228:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
  io_ctx.Init        = IKS01A3_I2C_Init;
 800422c:	4b2e      	ldr	r3, [pc, #184]	; (80042e8 <LIS2MDL_0_Probe+0xcc>)
 800422e:	9308      	str	r3, [sp, #32]
  io_ctx.DeInit      = IKS01A3_I2C_DeInit;
 8004230:	4b2e      	ldr	r3, [pc, #184]	; (80042ec <LIS2MDL_0_Probe+0xd0>)
 8004232:	9309      	str	r3, [sp, #36]	; 0x24
  io_ctx.ReadReg     = IKS01A3_I2C_ReadReg;
 8004234:	4b2e      	ldr	r3, [pc, #184]	; (80042f0 <LIS2MDL_0_Probe+0xd4>)
 8004236:	930d      	str	r3, [sp, #52]	; 0x34
  io_ctx.WriteReg    = IKS01A3_I2C_WriteReg;
 8004238:	4b2e      	ldr	r3, [pc, #184]	; (80042f4 <LIS2MDL_0_Probe+0xd8>)
 800423a:	930c      	str	r3, [sp, #48]	; 0x30
  io_ctx.GetTick     = IKS01A3_GetTick;
 800423c:	4b2e      	ldr	r3, [pc, #184]	; (80042f8 <LIS2MDL_0_Probe+0xdc>)
 800423e:	930e      	str	r3, [sp, #56]	; 0x38
  io_ctx.Delay       = IKS01A3_Delay;
 8004240:	4b2e      	ldr	r3, [pc, #184]	; (80042fc <LIS2MDL_0_Probe+0xe0>)
 8004242:	930f      	str	r3, [sp, #60]	; 0x3c

  if (LIS2MDL_RegisterBusIO(&lis2mdl_obj_0, &io_ctx) != LIS2MDL_OK)
 8004244:	a908      	add	r1, sp, #32
 8004246:	482e      	ldr	r0, [pc, #184]	; (8004300 <LIS2MDL_0_Probe+0xe4>)
 8004248:	f7fe fbe4 	bl	8002a14 <LIS2MDL_RegisterBusIO>
 800424c:	2800      	cmp	r0, #0
 800424e:	d13b      	bne.n	80042c8 <LIS2MDL_0_Probe+0xac>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
  }
  else if (LIS2MDL_ReadID(&lis2mdl_obj_0, &id) != LIS2MDL_OK)
 8004250:	f10d 011f 	add.w	r1, sp, #31
 8004254:	482a      	ldr	r0, [pc, #168]	; (8004300 <LIS2MDL_0_Probe+0xe4>)
 8004256:	f7fe fafb 	bl	8002850 <LIS2MDL_ReadID>
 800425a:	4605      	mov	r5, r0
 800425c:	2800      	cmp	r0, #0
 800425e:	d136      	bne.n	80042ce <LIS2MDL_0_Probe+0xb2>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
  }
  else if (id != LIS2MDL_ID)
 8004260:	f89d 301f 	ldrb.w	r3, [sp, #31]
 8004264:	2b40      	cmp	r3, #64	; 0x40
 8004266:	d135      	bne.n	80042d4 <LIS2MDL_0_Probe+0xb8>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
  }
  else
  {
    (void)LIS2MDL_GetCapabilities(&lis2mdl_obj_0, &cap);
 8004268:	4e25      	ldr	r6, [pc, #148]	; (8004300 <LIS2MDL_0_Probe+0xe4>)
 800426a:	4669      	mov	r1, sp
 800426c:	4630      	mov	r0, r6
 800426e:	f7fe f801 	bl	8002274 <LIS2MDL_GetCapabilities>
    MotionCtx[IKS01A3_LIS2MDL_0].Functions = ((uint32_t)cap.Gyro) | ((uint32_t)cap.Acc << 1) | ((uint32_t)cap.Magneto << 2);
 8004272:	f89d 3001 	ldrb.w	r3, [sp, #1]
 8004276:	f89d 2000 	ldrb.w	r2, [sp]
 800427a:	ea43 0342 	orr.w	r3, r3, r2, lsl #1
 800427e:	f89d 2002 	ldrb.w	r2, [sp, #2]
 8004282:	ea43 0382 	orr.w	r3, r3, r2, lsl #2
 8004286:	491f      	ldr	r1, [pc, #124]	; (8004304 <LIS2MDL_0_Probe+0xe8>)
 8004288:	608b      	str	r3, [r1, #8]

    MotionCompObj[IKS01A3_LIS2MDL_0] = &lis2mdl_obj_0;
 800428a:	4b1f      	ldr	r3, [pc, #124]	; (8004308 <LIS2MDL_0_Probe+0xec>)
 800428c:	609e      	str	r6, [r3, #8]
    /* The second cast (void *) is added to bypass Misra R11.3 rule */
    MotionDrv[IKS01A3_LIS2MDL_0] = (MOTION_SENSOR_CommonDrv_t *)(void *)&LIS2MDL_COMMON_Driver;
 800428e:	4b1f      	ldr	r3, [pc, #124]	; (800430c <LIS2MDL_0_Probe+0xf0>)
 8004290:	491f      	ldr	r1, [pc, #124]	; (8004310 <LIS2MDL_0_Probe+0xf4>)
 8004292:	6099      	str	r1, [r3, #8]

    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_MAGNETO) == MOTION_MAGNETO) && (cap.Magneto == 1U))
 8004294:	f014 0f04 	tst.w	r4, #4
 8004298:	d001      	beq.n	800429e <LIS2MDL_0_Probe+0x82>
 800429a:	2a01      	cmp	r2, #1
 800429c:	d009      	beq.n	80042b2 <LIS2MDL_0_Probe+0x96>
      else
      {
        ret = BSP_ERROR_NONE;
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_ACCELERO) == MOTION_ACCELERO))
 800429e:	f014 0f02 	tst.w	r4, #2
 80042a2:	d11a      	bne.n	80042da <LIS2MDL_0_Probe+0xbe>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_GYRO) == MOTION_GYRO))
 80042a4:	b915      	cbnz	r5, 80042ac <LIS2MDL_0_Probe+0x90>
 80042a6:	f014 0f01 	tst.w	r4, #1
 80042aa:	d119      	bne.n	80042e0 <LIS2MDL_0_Probe+0xc4>
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
    }
  }
  return ret;
}
 80042ac:	4628      	mov	r0, r5
 80042ae:	b010      	add	sp, #64	; 0x40
 80042b0:	bd70      	pop	{r4, r5, r6, pc}
      MotionFuncDrv[IKS01A3_LIS2MDL_0][FunctionIndex[MOTION_MAGNETO]] = (MOTION_SENSOR_FuncDrv_t *)(
 80042b2:	4b18      	ldr	r3, [pc, #96]	; (8004314 <LIS2MDL_0_Probe+0xf8>)
 80042b4:	4a18      	ldr	r2, [pc, #96]	; (8004318 <LIS2MDL_0_Probe+0xfc>)
 80042b6:	621a      	str	r2, [r3, #32]
      if (MotionDrv[IKS01A3_LIS2MDL_0]->Init(MotionCompObj[IKS01A3_LIS2MDL_0]) != LIS2MDL_OK)
 80042b8:	680b      	ldr	r3, [r1, #0]
 80042ba:	4630      	mov	r0, r6
 80042bc:	4798      	blx	r3
 80042be:	2800      	cmp	r0, #0
 80042c0:	d0ed      	beq.n	800429e <LIS2MDL_0_Probe+0x82>
        ret = BSP_ERROR_COMPONENT_FAILURE;
 80042c2:	f06f 0504 	mvn.w	r5, #4
 80042c6:	e7ed      	b.n	80042a4 <LIS2MDL_0_Probe+0x88>
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 80042c8:	f06f 0506 	mvn.w	r5, #6
 80042cc:	e7ee      	b.n	80042ac <LIS2MDL_0_Probe+0x90>
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 80042ce:	f06f 0506 	mvn.w	r5, #6
 80042d2:	e7eb      	b.n	80042ac <LIS2MDL_0_Probe+0x90>
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 80042d4:	f06f 0506 	mvn.w	r5, #6
 80042d8:	e7e8      	b.n	80042ac <LIS2MDL_0_Probe+0x90>
      ret = BSP_ERROR_COMPONENT_FAILURE;
 80042da:	f06f 0504 	mvn.w	r5, #4
 80042de:	e7e5      	b.n	80042ac <LIS2MDL_0_Probe+0x90>
      ret = BSP_ERROR_COMPONENT_FAILURE;
 80042e0:	f06f 0504 	mvn.w	r5, #4
  return ret;
 80042e4:	e7e2      	b.n	80042ac <LIS2MDL_0_Probe+0x90>
 80042e6:	bf00      	nop
 80042e8:	080014bd 	.word	0x080014bd
 80042ec:	080013d5 	.word	0x080013d5
 80042f0:	08001449 	.word	0x08001449
 80042f4:	0800140d 	.word	0x0800140d
 80042f8:	08001485 	.word	0x08001485
 80042fc:	0800471d 	.word	0x0800471d
 8004300:	20016dec 	.word	0x20016dec
 8004304:	20016d74 	.word	0x20016d74
 8004308:	20016d68 	.word	0x20016d68
 800430c:	20016d80 	.word	0x20016d80
 8004310:	2000003c 	.word	0x2000003c
 8004314:	20016d8c 	.word	0x20016d8c
 8004318:	2000004c 	.word	0x2000004c

0800431c <IKS01A3_MOTION_SENSOR_Init>:
{
 800431c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004320:	b088      	sub	sp, #32
 8004322:	4604      	mov	r4, r0
 8004324:	460f      	mov	r7, r1
  switch (Instance)
 8004326:	2801      	cmp	r0, #1
 8004328:	d030      	beq.n	800438c <IKS01A3_MOTION_SENSOR_Init+0x70>
 800432a:	2802      	cmp	r0, #2
 800432c:	d055      	beq.n	80043da <IKS01A3_MOTION_SENSOR_Init+0xbe>
 800432e:	b110      	cbz	r0, 8004336 <IKS01A3_MOTION_SENSOR_Init+0x1a>
 8004330:	f06f 0001 	mvn.w	r0, #1
 8004334:	e095      	b.n	8004462 <IKS01A3_MOTION_SENSOR_Init+0x146>
      if (LSM6DSO_0_Probe(Functions) != BSP_ERROR_NONE)
 8004336:	4608      	mov	r0, r1
 8004338:	f7ff fe5e 	bl	8003ff8 <LSM6DSO_0_Probe>
 800433c:	2800      	cmp	r0, #0
 800433e:	f040 8093 	bne.w	8004468 <IKS01A3_MOTION_SENSOR_Init+0x14c>
      if (MotionDrv[Instance]->GetCapabilities(MotionCompObj[Instance], (void *)&cap) != BSP_ERROR_NONE)
 8004342:	4b52      	ldr	r3, [pc, #328]	; (800448c <IKS01A3_MOTION_SENSOR_Init+0x170>)
 8004344:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8004348:	68db      	ldr	r3, [r3, #12]
 800434a:	a901      	add	r1, sp, #4
 800434c:	4a50      	ldr	r2, [pc, #320]	; (8004490 <IKS01A3_MOTION_SENSOR_Init+0x174>)
 800434e:	f852 0024 	ldr.w	r0, [r2, r4, lsl #2]
 8004352:	4798      	blx	r3
 8004354:	2800      	cmp	r0, #0
 8004356:	f040 808a 	bne.w	800446e <IKS01A3_MOTION_SENSOR_Init+0x152>
      if (cap.Acc == 1U)
 800435a:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800435e:	2b01      	cmp	r3, #1
 8004360:	d00b      	beq.n	800437a <IKS01A3_MOTION_SENSOR_Init+0x5e>
  uint32_t component_functions = 0;
 8004362:	46a0      	mov	r8, r4
      if (cap.Gyro == 1U)
 8004364:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8004368:	2b01      	cmp	r3, #1
 800436a:	d009      	beq.n	8004380 <IKS01A3_MOTION_SENSOR_Init+0x64>
      if (cap.Magneto == 1U)
 800436c:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8004370:	2b01      	cmp	r3, #1
 8004372:	d008      	beq.n	8004386 <IKS01A3_MOTION_SENSOR_Init+0x6a>
  uint32_t component_functions = 0;
 8004374:	2600      	movs	r6, #0
 8004376:	2501      	movs	r5, #1
 8004378:	e057      	b.n	800442a <IKS01A3_MOTION_SENSOR_Init+0x10e>
        component_functions |= MOTION_ACCELERO;
 800437a:	f04f 0802 	mov.w	r8, #2
 800437e:	e7f1      	b.n	8004364 <IKS01A3_MOTION_SENSOR_Init+0x48>
        component_functions |= MOTION_GYRO;
 8004380:	f048 0801 	orr.w	r8, r8, #1
 8004384:	e7f2      	b.n	800436c <IKS01A3_MOTION_SENSOR_Init+0x50>
        component_functions |= MOTION_MAGNETO;
 8004386:	f048 0804 	orr.w	r8, r8, #4
  if (ret != BSP_ERROR_NONE)
 800438a:	e7f3      	b.n	8004374 <IKS01A3_MOTION_SENSOR_Init+0x58>
      if (LIS2DW12_0_Probe(Functions) != BSP_ERROR_NONE)
 800438c:	4608      	mov	r0, r1
 800438e:	f7ff fec5 	bl	800411c <LIS2DW12_0_Probe>
 8004392:	2800      	cmp	r0, #0
 8004394:	d16e      	bne.n	8004474 <IKS01A3_MOTION_SENSOR_Init+0x158>
      if (MotionDrv[Instance]->GetCapabilities(MotionCompObj[Instance], (void *)&cap) != BSP_ERROR_NONE)
 8004396:	4b3d      	ldr	r3, [pc, #244]	; (800448c <IKS01A3_MOTION_SENSOR_Init+0x170>)
 8004398:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 800439c:	68db      	ldr	r3, [r3, #12]
 800439e:	a901      	add	r1, sp, #4
 80043a0:	4a3b      	ldr	r2, [pc, #236]	; (8004490 <IKS01A3_MOTION_SENSOR_Init+0x174>)
 80043a2:	f852 0024 	ldr.w	r0, [r2, r4, lsl #2]
 80043a6:	4798      	blx	r3
 80043a8:	2800      	cmp	r0, #0
 80043aa:	d166      	bne.n	800447a <IKS01A3_MOTION_SENSOR_Init+0x15e>
      if (cap.Acc == 1U)
 80043ac:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80043b0:	2b01      	cmp	r3, #1
 80043b2:	d00c      	beq.n	80043ce <IKS01A3_MOTION_SENSOR_Init+0xb2>
  uint32_t component_functions = 0;
 80043b4:	f04f 0800 	mov.w	r8, #0
      if (cap.Gyro == 1U)
 80043b8:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80043bc:	2b01      	cmp	r3, #1
 80043be:	d009      	beq.n	80043d4 <IKS01A3_MOTION_SENSOR_Init+0xb8>
      if (cap.Magneto == 1U)
 80043c0:	f89d 3006 	ldrb.w	r3, [sp, #6]
 80043c4:	2b01      	cmp	r3, #1
 80043c6:	d1d5      	bne.n	8004374 <IKS01A3_MOTION_SENSOR_Init+0x58>
        component_functions |= MOTION_MAGNETO;
 80043c8:	f048 0804 	orr.w	r8, r8, #4
  if (ret != BSP_ERROR_NONE)
 80043cc:	e7d2      	b.n	8004374 <IKS01A3_MOTION_SENSOR_Init+0x58>
        component_functions |= MOTION_ACCELERO;
 80043ce:	f04f 0802 	mov.w	r8, #2
 80043d2:	e7f1      	b.n	80043b8 <IKS01A3_MOTION_SENSOR_Init+0x9c>
        component_functions |= MOTION_GYRO;
 80043d4:	f048 0801 	orr.w	r8, r8, #1
 80043d8:	e7f2      	b.n	80043c0 <IKS01A3_MOTION_SENSOR_Init+0xa4>
      if (LIS2MDL_0_Probe(Functions) != BSP_ERROR_NONE)
 80043da:	4608      	mov	r0, r1
 80043dc:	f7ff ff1e 	bl	800421c <LIS2MDL_0_Probe>
 80043e0:	2800      	cmp	r0, #0
 80043e2:	d14d      	bne.n	8004480 <IKS01A3_MOTION_SENSOR_Init+0x164>
      if (MotionDrv[Instance]->GetCapabilities(MotionCompObj[Instance], (void *)&cap) != BSP_ERROR_NONE)
 80043e4:	4b29      	ldr	r3, [pc, #164]	; (800448c <IKS01A3_MOTION_SENSOR_Init+0x170>)
 80043e6:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 80043ea:	68db      	ldr	r3, [r3, #12]
 80043ec:	a901      	add	r1, sp, #4
 80043ee:	4a28      	ldr	r2, [pc, #160]	; (8004490 <IKS01A3_MOTION_SENSOR_Init+0x174>)
 80043f0:	f852 0024 	ldr.w	r0, [r2, r4, lsl #2]
 80043f4:	4798      	blx	r3
 80043f6:	2800      	cmp	r0, #0
 80043f8:	d145      	bne.n	8004486 <IKS01A3_MOTION_SENSOR_Init+0x16a>
      if (cap.Acc == 1U)
 80043fa:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80043fe:	2b01      	cmp	r3, #1
 8004400:	d00c      	beq.n	800441c <IKS01A3_MOTION_SENSOR_Init+0x100>
  uint32_t component_functions = 0;
 8004402:	f04f 0800 	mov.w	r8, #0
      if (cap.Gyro == 1U)
 8004406:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800440a:	2b01      	cmp	r3, #1
 800440c:	d008      	beq.n	8004420 <IKS01A3_MOTION_SENSOR_Init+0x104>
      if (cap.Magneto == 1U)
 800440e:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8004412:	2b01      	cmp	r3, #1
 8004414:	d1ae      	bne.n	8004374 <IKS01A3_MOTION_SENSOR_Init+0x58>
        component_functions |= MOTION_MAGNETO;
 8004416:	f048 0804 	orr.w	r8, r8, #4
  if (ret != BSP_ERROR_NONE)
 800441a:	e7ab      	b.n	8004374 <IKS01A3_MOTION_SENSOR_Init+0x58>
        component_functions |= MOTION_ACCELERO;
 800441c:	46a0      	mov	r8, r4
 800441e:	e7f2      	b.n	8004406 <IKS01A3_MOTION_SENSOR_Init+0xea>
        component_functions |= MOTION_GYRO;
 8004420:	f048 0801 	orr.w	r8, r8, #1
 8004424:	e7f3      	b.n	800440e <IKS01A3_MOTION_SENSOR_Init+0xf2>
    function = function << 1;
 8004426:	006d      	lsls	r5, r5, #1
  for (i = 0; i < IKS01A3_MOTION_FUNCTIONS_NBR; i++)
 8004428:	3601      	adds	r6, #1
 800442a:	2e02      	cmp	r6, #2
 800442c:	d818      	bhi.n	8004460 <IKS01A3_MOTION_SENSOR_Init+0x144>
    if (((Functions & function) == function) && ((component_functions & function) == function))
 800442e:	ea35 0307 	bics.w	r3, r5, r7
 8004432:	d1f8      	bne.n	8004426 <IKS01A3_MOTION_SENSOR_Init+0x10a>
 8004434:	ea35 0308 	bics.w	r3, r5, r8
 8004438:	d1f5      	bne.n	8004426 <IKS01A3_MOTION_SENSOR_Init+0x10a>
      if (MotionFuncDrv[Instance][FunctionIndex[function]]->Enable(MotionCompObj[Instance]) != BSP_ERROR_NONE)
 800443a:	4b16      	ldr	r3, [pc, #88]	; (8004494 <IKS01A3_MOTION_SENSOR_Init+0x178>)
 800443c:	f853 2025 	ldr.w	r2, [r3, r5, lsl #2]
 8004440:	eb04 0344 	add.w	r3, r4, r4, lsl #1
 8004444:	4413      	add	r3, r2
 8004446:	4a14      	ldr	r2, [pc, #80]	; (8004498 <IKS01A3_MOTION_SENSOR_Init+0x17c>)
 8004448:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	4a10      	ldr	r2, [pc, #64]	; (8004490 <IKS01A3_MOTION_SENSOR_Init+0x174>)
 8004450:	f852 0024 	ldr.w	r0, [r2, r4, lsl #2]
 8004454:	4798      	blx	r3
 8004456:	2800      	cmp	r0, #0
 8004458:	d0e5      	beq.n	8004426 <IKS01A3_MOTION_SENSOR_Init+0x10a>
        return BSP_ERROR_COMPONENT_FAILURE;
 800445a:	f06f 0004 	mvn.w	r0, #4
 800445e:	e000      	b.n	8004462 <IKS01A3_MOTION_SENSOR_Init+0x146>
 8004460:	2000      	movs	r0, #0
}
 8004462:	b008      	add	sp, #32
 8004464:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return BSP_ERROR_NO_INIT;
 8004468:	f04f 30ff 	mov.w	r0, #4294967295
 800446c:	e7f9      	b.n	8004462 <IKS01A3_MOTION_SENSOR_Init+0x146>
        return BSP_ERROR_UNKNOWN_COMPONENT;
 800446e:	f06f 0006 	mvn.w	r0, #6
 8004472:	e7f6      	b.n	8004462 <IKS01A3_MOTION_SENSOR_Init+0x146>
        return BSP_ERROR_NO_INIT;
 8004474:	f04f 30ff 	mov.w	r0, #4294967295
 8004478:	e7f3      	b.n	8004462 <IKS01A3_MOTION_SENSOR_Init+0x146>
        return BSP_ERROR_UNKNOWN_COMPONENT;
 800447a:	f06f 0006 	mvn.w	r0, #6
 800447e:	e7f0      	b.n	8004462 <IKS01A3_MOTION_SENSOR_Init+0x146>
        return BSP_ERROR_NO_INIT;
 8004480:	f04f 30ff 	mov.w	r0, #4294967295
 8004484:	e7ed      	b.n	8004462 <IKS01A3_MOTION_SENSOR_Init+0x146>
        return BSP_ERROR_UNKNOWN_COMPONENT;
 8004486:	f06f 0006 	mvn.w	r0, #6
 800448a:	e7ea      	b.n	8004462 <IKS01A3_MOTION_SENSOR_Init+0x146>
 800448c:	20016d80 	.word	0x20016d80
 8004490:	20016d68 	.word	0x20016d68
 8004494:	08009070 	.word	0x08009070
 8004498:	20016d8c 	.word	0x20016d8c

0800449c <IKS01A3_MOTION_SENSOR_DeInit>:
  if (Instance >= IKS01A3_MOTION_INSTANCES_NBR)
 800449c:	2802      	cmp	r0, #2
 800449e:	d80d      	bhi.n	80044bc <IKS01A3_MOTION_SENSOR_DeInit+0x20>
{
 80044a0:	b508      	push	{r3, lr}
  else if (MotionDrv[Instance]->DeInit(MotionCompObj[Instance]) != BSP_ERROR_NONE)
 80044a2:	4b08      	ldr	r3, [pc, #32]	; (80044c4 <IKS01A3_MOTION_SENSOR_DeInit+0x28>)
 80044a4:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 80044a8:	685b      	ldr	r3, [r3, #4]
 80044aa:	4a07      	ldr	r2, [pc, #28]	; (80044c8 <IKS01A3_MOTION_SENSOR_DeInit+0x2c>)
 80044ac:	f852 0020 	ldr.w	r0, [r2, r0, lsl #2]
 80044b0:	4798      	blx	r3
 80044b2:	b900      	cbnz	r0, 80044b6 <IKS01A3_MOTION_SENSOR_DeInit+0x1a>
}
 80044b4:	bd08      	pop	{r3, pc}
    ret = BSP_ERROR_COMPONENT_FAILURE;
 80044b6:	f06f 0004 	mvn.w	r0, #4
 80044ba:	e7fb      	b.n	80044b4 <IKS01A3_MOTION_SENSOR_DeInit+0x18>
    ret = BSP_ERROR_WRONG_PARAM;
 80044bc:	f06f 0001 	mvn.w	r0, #1
}
 80044c0:	4770      	bx	lr
 80044c2:	bf00      	nop
 80044c4:	20016d80 	.word	0x20016d80
 80044c8:	20016d68 	.word	0x20016d68

080044cc <IKS01A3_MOTION_SENSOR_Enable>:
  if (Instance >= IKS01A3_MOTION_INSTANCES_NBR)
 80044cc:	2802      	cmp	r0, #2
 80044ce:	d819      	bhi.n	8004504 <IKS01A3_MOTION_SENSOR_Enable+0x38>
{
 80044d0:	b508      	push	{r3, lr}
    if ((MotionCtx[Instance].Functions & Function) == Function)
 80044d2:	4b0f      	ldr	r3, [pc, #60]	; (8004510 <IKS01A3_MOTION_SENSOR_Enable+0x44>)
 80044d4:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 80044d8:	ea31 0303 	bics.w	r3, r1, r3
 80044dc:	d115      	bne.n	800450a <IKS01A3_MOTION_SENSOR_Enable+0x3e>
      if (MotionFuncDrv[Instance][FunctionIndex[Function]]->Enable(MotionCompObj[Instance]) != BSP_ERROR_NONE)
 80044de:	4b0d      	ldr	r3, [pc, #52]	; (8004514 <IKS01A3_MOTION_SENSOR_Enable+0x48>)
 80044e0:	f853 2021 	ldr.w	r2, [r3, r1, lsl #2]
 80044e4:	eb00 0340 	add.w	r3, r0, r0, lsl #1
 80044e8:	4413      	add	r3, r2
 80044ea:	4a0b      	ldr	r2, [pc, #44]	; (8004518 <IKS01A3_MOTION_SENSOR_Enable+0x4c>)
 80044ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	4a0a      	ldr	r2, [pc, #40]	; (800451c <IKS01A3_MOTION_SENSOR_Enable+0x50>)
 80044f4:	f852 0020 	ldr.w	r0, [r2, r0, lsl #2]
 80044f8:	4798      	blx	r3
 80044fa:	b900      	cbnz	r0, 80044fe <IKS01A3_MOTION_SENSOR_Enable+0x32>
}
 80044fc:	bd08      	pop	{r3, pc}
        ret = BSP_ERROR_COMPONENT_FAILURE;
 80044fe:	f06f 0004 	mvn.w	r0, #4
 8004502:	e7fb      	b.n	80044fc <IKS01A3_MOTION_SENSOR_Enable+0x30>
    ret = BSP_ERROR_WRONG_PARAM;
 8004504:	f06f 0001 	mvn.w	r0, #1
}
 8004508:	4770      	bx	lr
      ret = BSP_ERROR_WRONG_PARAM;
 800450a:	f06f 0001 	mvn.w	r0, #1
  return ret;
 800450e:	e7f5      	b.n	80044fc <IKS01A3_MOTION_SENSOR_Enable+0x30>
 8004510:	20016d74 	.word	0x20016d74
 8004514:	08009070 	.word	0x08009070
 8004518:	20016d8c 	.word	0x20016d8c
 800451c:	20016d68 	.word	0x20016d68

08004520 <IKS01A3_MOTION_SENSOR_Disable>:
  if (Instance >= IKS01A3_MOTION_INSTANCES_NBR)
 8004520:	2802      	cmp	r0, #2
 8004522:	d819      	bhi.n	8004558 <IKS01A3_MOTION_SENSOR_Disable+0x38>
{
 8004524:	b508      	push	{r3, lr}
    if ((MotionCtx[Instance].Functions & Function) == Function)
 8004526:	4b0f      	ldr	r3, [pc, #60]	; (8004564 <IKS01A3_MOTION_SENSOR_Disable+0x44>)
 8004528:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 800452c:	ea31 0303 	bics.w	r3, r1, r3
 8004530:	d115      	bne.n	800455e <IKS01A3_MOTION_SENSOR_Disable+0x3e>
      if (MotionFuncDrv[Instance][FunctionIndex[Function]]->Disable(MotionCompObj[Instance]) != BSP_ERROR_NONE)
 8004532:	4b0d      	ldr	r3, [pc, #52]	; (8004568 <IKS01A3_MOTION_SENSOR_Disable+0x48>)
 8004534:	f853 2021 	ldr.w	r2, [r3, r1, lsl #2]
 8004538:	eb00 0340 	add.w	r3, r0, r0, lsl #1
 800453c:	4413      	add	r3, r2
 800453e:	4a0b      	ldr	r2, [pc, #44]	; (800456c <IKS01A3_MOTION_SENSOR_Disable+0x4c>)
 8004540:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004544:	685b      	ldr	r3, [r3, #4]
 8004546:	4a0a      	ldr	r2, [pc, #40]	; (8004570 <IKS01A3_MOTION_SENSOR_Disable+0x50>)
 8004548:	f852 0020 	ldr.w	r0, [r2, r0, lsl #2]
 800454c:	4798      	blx	r3
 800454e:	b900      	cbnz	r0, 8004552 <IKS01A3_MOTION_SENSOR_Disable+0x32>
}
 8004550:	bd08      	pop	{r3, pc}
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8004552:	f06f 0004 	mvn.w	r0, #4
 8004556:	e7fb      	b.n	8004550 <IKS01A3_MOTION_SENSOR_Disable+0x30>
    ret = BSP_ERROR_WRONG_PARAM;
 8004558:	f06f 0001 	mvn.w	r0, #1
}
 800455c:	4770      	bx	lr
      ret = BSP_ERROR_WRONG_PARAM;
 800455e:	f06f 0001 	mvn.w	r0, #1
  return ret;
 8004562:	e7f5      	b.n	8004550 <IKS01A3_MOTION_SENSOR_Disable+0x30>
 8004564:	20016d74 	.word	0x20016d74
 8004568:	08009070 	.word	0x08009070
 800456c:	20016d8c 	.word	0x20016d8c
 8004570:	20016d68 	.word	0x20016d68

08004574 <IKS01A3_MOTION_SENSOR_GetAxes>:
  if (Instance >= IKS01A3_MOTION_INSTANCES_NBR)
 8004574:	2802      	cmp	r0, #2
 8004576:	d81b      	bhi.n	80045b0 <IKS01A3_MOTION_SENSOR_GetAxes+0x3c>
{
 8004578:	b508      	push	{r3, lr}
 800457a:	460b      	mov	r3, r1
 800457c:	4611      	mov	r1, r2
    if ((MotionCtx[Instance].Functions & Function) == Function)
 800457e:	4a0f      	ldr	r2, [pc, #60]	; (80045bc <IKS01A3_MOTION_SENSOR_GetAxes+0x48>)
 8004580:	f852 2020 	ldr.w	r2, [r2, r0, lsl #2]
 8004584:	ea33 0202 	bics.w	r2, r3, r2
 8004588:	d115      	bne.n	80045b6 <IKS01A3_MOTION_SENSOR_GetAxes+0x42>
      if (MotionFuncDrv[Instance][FunctionIndex[Function]]->GetAxes(MotionCompObj[Instance], Axes) != BSP_ERROR_NONE)
 800458a:	4a0d      	ldr	r2, [pc, #52]	; (80045c0 <IKS01A3_MOTION_SENSOR_GetAxes+0x4c>)
 800458c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8004590:	eb00 0340 	add.w	r3, r0, r0, lsl #1
 8004594:	4413      	add	r3, r2
 8004596:	4a0b      	ldr	r2, [pc, #44]	; (80045c4 <IKS01A3_MOTION_SENSOR_GetAxes+0x50>)
 8004598:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800459c:	69db      	ldr	r3, [r3, #28]
 800459e:	4a0a      	ldr	r2, [pc, #40]	; (80045c8 <IKS01A3_MOTION_SENSOR_GetAxes+0x54>)
 80045a0:	f852 0020 	ldr.w	r0, [r2, r0, lsl #2]
 80045a4:	4798      	blx	r3
 80045a6:	b900      	cbnz	r0, 80045aa <IKS01A3_MOTION_SENSOR_GetAxes+0x36>
}
 80045a8:	bd08      	pop	{r3, pc}
        ret = BSP_ERROR_COMPONENT_FAILURE;
 80045aa:	f06f 0004 	mvn.w	r0, #4
 80045ae:	e7fb      	b.n	80045a8 <IKS01A3_MOTION_SENSOR_GetAxes+0x34>
    ret = BSP_ERROR_WRONG_PARAM;
 80045b0:	f06f 0001 	mvn.w	r0, #1
}
 80045b4:	4770      	bx	lr
      ret = BSP_ERROR_WRONG_PARAM;
 80045b6:	f06f 0001 	mvn.w	r0, #1
  return ret;
 80045ba:	e7f5      	b.n	80045a8 <IKS01A3_MOTION_SENSOR_GetAxes+0x34>
 80045bc:	20016d74 	.word	0x20016d74
 80045c0:	08009070 	.word	0x08009070
 80045c4:	20016d8c 	.word	0x20016d8c
 80045c8:	20016d68 	.word	0x20016d68

080045cc <IKS01A3_MOTION_SENSOR_GetOutputDataRate>:
  if (Instance >= IKS01A3_MOTION_INSTANCES_NBR)
 80045cc:	2802      	cmp	r0, #2
 80045ce:	d81b      	bhi.n	8004608 <IKS01A3_MOTION_SENSOR_GetOutputDataRate+0x3c>
{
 80045d0:	b508      	push	{r3, lr}
 80045d2:	460b      	mov	r3, r1
 80045d4:	4611      	mov	r1, r2
    if ((MotionCtx[Instance].Functions & Function) == Function)
 80045d6:	4a0f      	ldr	r2, [pc, #60]	; (8004614 <IKS01A3_MOTION_SENSOR_GetOutputDataRate+0x48>)
 80045d8:	f852 2020 	ldr.w	r2, [r2, r0, lsl #2]
 80045dc:	ea33 0202 	bics.w	r2, r3, r2
 80045e0:	d115      	bne.n	800460e <IKS01A3_MOTION_SENSOR_GetOutputDataRate+0x42>
      if (MotionFuncDrv[Instance][FunctionIndex[Function]]->GetOutputDataRate(MotionCompObj[Instance], Odr) != BSP_ERROR_NONE)
 80045e2:	4a0d      	ldr	r2, [pc, #52]	; (8004618 <IKS01A3_MOTION_SENSOR_GetOutputDataRate+0x4c>)
 80045e4:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80045e8:	eb00 0340 	add.w	r3, r0, r0, lsl #1
 80045ec:	4413      	add	r3, r2
 80045ee:	4a0b      	ldr	r2, [pc, #44]	; (800461c <IKS01A3_MOTION_SENSOR_GetOutputDataRate+0x50>)
 80045f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80045f4:	68db      	ldr	r3, [r3, #12]
 80045f6:	4a0a      	ldr	r2, [pc, #40]	; (8004620 <IKS01A3_MOTION_SENSOR_GetOutputDataRate+0x54>)
 80045f8:	f852 0020 	ldr.w	r0, [r2, r0, lsl #2]
 80045fc:	4798      	blx	r3
 80045fe:	b900      	cbnz	r0, 8004602 <IKS01A3_MOTION_SENSOR_GetOutputDataRate+0x36>
}
 8004600:	bd08      	pop	{r3, pc}
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8004602:	f06f 0004 	mvn.w	r0, #4
 8004606:	e7fb      	b.n	8004600 <IKS01A3_MOTION_SENSOR_GetOutputDataRate+0x34>
    ret = BSP_ERROR_WRONG_PARAM;
 8004608:	f06f 0001 	mvn.w	r0, #1
}
 800460c:	4770      	bx	lr
      ret = BSP_ERROR_WRONG_PARAM;
 800460e:	f06f 0001 	mvn.w	r0, #1
  return ret;
 8004612:	e7f5      	b.n	8004600 <IKS01A3_MOTION_SENSOR_GetOutputDataRate+0x34>
 8004614:	20016d74 	.word	0x20016d74
 8004618:	08009070 	.word	0x08009070
 800461c:	20016d8c 	.word	0x20016d8c
 8004620:	20016d68 	.word	0x20016d68

08004624 <IKS01A3_MOTION_SENSOR_SetOutputDataRate>:
  if (Instance >= IKS01A3_MOTION_INSTANCES_NBR)
 8004624:	2802      	cmp	r0, #2
 8004626:	d819      	bhi.n	800465c <IKS01A3_MOTION_SENSOR_SetOutputDataRate+0x38>
{
 8004628:	b508      	push	{r3, lr}
    if ((MotionCtx[Instance].Functions & Function) == Function)
 800462a:	4b0f      	ldr	r3, [pc, #60]	; (8004668 <IKS01A3_MOTION_SENSOR_SetOutputDataRate+0x44>)
 800462c:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8004630:	ea31 0303 	bics.w	r3, r1, r3
 8004634:	d115      	bne.n	8004662 <IKS01A3_MOTION_SENSOR_SetOutputDataRate+0x3e>
      if (MotionFuncDrv[Instance][FunctionIndex[Function]]->SetOutputDataRate(MotionCompObj[Instance], Odr) != BSP_ERROR_NONE)
 8004636:	4b0d      	ldr	r3, [pc, #52]	; (800466c <IKS01A3_MOTION_SENSOR_SetOutputDataRate+0x48>)
 8004638:	f853 2021 	ldr.w	r2, [r3, r1, lsl #2]
 800463c:	eb00 0340 	add.w	r3, r0, r0, lsl #1
 8004640:	4413      	add	r3, r2
 8004642:	4a0b      	ldr	r2, [pc, #44]	; (8004670 <IKS01A3_MOTION_SENSOR_SetOutputDataRate+0x4c>)
 8004644:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004648:	691b      	ldr	r3, [r3, #16]
 800464a:	4a0a      	ldr	r2, [pc, #40]	; (8004674 <IKS01A3_MOTION_SENSOR_SetOutputDataRate+0x50>)
 800464c:	f852 0020 	ldr.w	r0, [r2, r0, lsl #2]
 8004650:	4798      	blx	r3
 8004652:	b900      	cbnz	r0, 8004656 <IKS01A3_MOTION_SENSOR_SetOutputDataRate+0x32>
}
 8004654:	bd08      	pop	{r3, pc}
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8004656:	f06f 0004 	mvn.w	r0, #4
 800465a:	e7fb      	b.n	8004654 <IKS01A3_MOTION_SENSOR_SetOutputDataRate+0x30>
    ret = BSP_ERROR_WRONG_PARAM;
 800465c:	f06f 0001 	mvn.w	r0, #1
}
 8004660:	4770      	bx	lr
      ret = BSP_ERROR_WRONG_PARAM;
 8004662:	f06f 0001 	mvn.w	r0, #1
  return ret;
 8004666:	e7f5      	b.n	8004654 <IKS01A3_MOTION_SENSOR_SetOutputDataRate+0x30>
 8004668:	20016d74 	.word	0x20016d74
 800466c:	08009070 	.word	0x08009070
 8004670:	20016d8c 	.word	0x20016d8c
 8004674:	20016d68 	.word	0x20016d68

08004678 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004678:	b510      	push	{r4, lr}
 800467a:	4604      	mov	r4, r0
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800467c:	4b0e      	ldr	r3, [pc, #56]	; (80046b8 <HAL_InitTick+0x40>)
 800467e:	7818      	ldrb	r0, [r3, #0]
 8004680:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004684:	fbb3 f3f0 	udiv	r3, r3, r0
 8004688:	4a0c      	ldr	r2, [pc, #48]	; (80046bc <HAL_InitTick+0x44>)
 800468a:	6810      	ldr	r0, [r2, #0]
 800468c:	fbb0 f0f3 	udiv	r0, r0, r3
 8004690:	f000 f8b0 	bl	80047f4 <HAL_SYSTICK_Config>
 8004694:	b968      	cbnz	r0, 80046b2 <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004696:	2c0f      	cmp	r4, #15
 8004698:	d901      	bls.n	800469e <HAL_InitTick+0x26>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
    uwTickPrio = TickPriority;
  }
  else
  {
    return HAL_ERROR;
 800469a:	2001      	movs	r0, #1
 800469c:	e00a      	b.n	80046b4 <HAL_InitTick+0x3c>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800469e:	2200      	movs	r2, #0
 80046a0:	4621      	mov	r1, r4
 80046a2:	f04f 30ff 	mov.w	r0, #4294967295
 80046a6:	f000 f85f 	bl	8004768 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80046aa:	4b05      	ldr	r3, [pc, #20]	; (80046c0 <HAL_InitTick+0x48>)
 80046ac:	601c      	str	r4, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80046ae:	2000      	movs	r0, #0
 80046b0:	e000      	b.n	80046b4 <HAL_InitTick+0x3c>
    return HAL_ERROR;
 80046b2:	2001      	movs	r0, #1
}
 80046b4:	bd10      	pop	{r4, pc}
 80046b6:	bf00      	nop
 80046b8:	200000c8 	.word	0x200000c8
 80046bc:	20000004 	.word	0x20000004
 80046c0:	200000cc 	.word	0x200000cc

080046c4 <HAL_Init>:
{
 80046c4:	b508      	push	{r3, lr}
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80046c6:	4b0b      	ldr	r3, [pc, #44]	; (80046f4 <HAL_Init+0x30>)
 80046c8:	681a      	ldr	r2, [r3, #0]
 80046ca:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80046ce:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80046d0:	681a      	ldr	r2, [r3, #0]
 80046d2:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80046d6:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80046d8:	681a      	ldr	r2, [r3, #0]
 80046da:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80046de:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80046e0:	2003      	movs	r0, #3
 80046e2:	f000 f82f 	bl	8004744 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 80046e6:	2000      	movs	r0, #0
 80046e8:	f7ff ffc6 	bl	8004678 <HAL_InitTick>
  HAL_MspInit();
 80046ec:	f7fc fd0e 	bl	800110c <HAL_MspInit>
}
 80046f0:	2000      	movs	r0, #0
 80046f2:	bd08      	pop	{r3, pc}
 80046f4:	40023c00 	.word	0x40023c00

080046f8 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 80046f8:	4a03      	ldr	r2, [pc, #12]	; (8004708 <HAL_IncTick+0x10>)
 80046fa:	6811      	ldr	r1, [r2, #0]
 80046fc:	4b03      	ldr	r3, [pc, #12]	; (800470c <HAL_IncTick+0x14>)
 80046fe:	781b      	ldrb	r3, [r3, #0]
 8004700:	440b      	add	r3, r1
 8004702:	6013      	str	r3, [r2, #0]
}
 8004704:	4770      	bx	lr
 8004706:	bf00      	nop
 8004708:	20016e58 	.word	0x20016e58
 800470c:	200000c8 	.word	0x200000c8

08004710 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8004710:	4b01      	ldr	r3, [pc, #4]	; (8004718 <HAL_GetTick+0x8>)
 8004712:	6818      	ldr	r0, [r3, #0]
}
 8004714:	4770      	bx	lr
 8004716:	bf00      	nop
 8004718:	20016e58 	.word	0x20016e58

0800471c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800471c:	b538      	push	{r3, r4, r5, lr}
 800471e:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8004720:	f7ff fff6 	bl	8004710 <HAL_GetTick>
 8004724:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004726:	f1b4 3fff 	cmp.w	r4, #4294967295
 800472a:	d002      	beq.n	8004732 <HAL_Delay+0x16>
  {
    wait += (uint32_t)(uwTickFreq);
 800472c:	4b04      	ldr	r3, [pc, #16]	; (8004740 <HAL_Delay+0x24>)
 800472e:	781b      	ldrb	r3, [r3, #0]
 8004730:	441c      	add	r4, r3
  }

  while((HAL_GetTick() - tickstart) < wait)
 8004732:	f7ff ffed 	bl	8004710 <HAL_GetTick>
 8004736:	1b40      	subs	r0, r0, r5
 8004738:	42a0      	cmp	r0, r4
 800473a:	d3fa      	bcc.n	8004732 <HAL_Delay+0x16>
  {
  }
}
 800473c:	bd38      	pop	{r3, r4, r5, pc}
 800473e:	bf00      	nop
 8004740:	200000c8 	.word	0x200000c8

08004744 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004744:	4a07      	ldr	r2, [pc, #28]	; (8004764 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8004746:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004748:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800474c:	041b      	lsls	r3, r3, #16
 800474e:	0c1b      	lsrs	r3, r3, #16
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004750:	0200      	lsls	r0, r0, #8
 8004752:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004756:	4303      	orrs	r3, r0
  reg_value  =  (reg_value                                   |
 8004758:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800475c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 8004760:	60d3      	str	r3, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8004762:	4770      	bx	lr
 8004764:	e000ed00 	.word	0xe000ed00

08004768 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004768:	b500      	push	{lr}
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800476a:	4b19      	ldr	r3, [pc, #100]	; (80047d0 <HAL_NVIC_SetPriority+0x68>)
 800476c:	68db      	ldr	r3, [r3, #12]
 800476e:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004772:	f1c3 0c07 	rsb	ip, r3, #7
 8004776:	f1bc 0f04 	cmp.w	ip, #4
 800477a:	bf28      	it	cs
 800477c:	f04f 0c04 	movcs.w	ip, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004780:	f103 0e04 	add.w	lr, r3, #4
 8004784:	f1be 0f06 	cmp.w	lr, #6
 8004788:	d918      	bls.n	80047bc <HAL_NVIC_SetPriority+0x54>
 800478a:	3b03      	subs	r3, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800478c:	f04f 3eff 	mov.w	lr, #4294967295
 8004790:	fa0e fc0c 	lsl.w	ip, lr, ip
 8004794:	ea21 010c 	bic.w	r1, r1, ip
 8004798:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800479a:	fa0e f303 	lsl.w	r3, lr, r3
 800479e:	ea22 0303 	bic.w	r3, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80047a2:	4319      	orrs	r1, r3
  if ((int32_t)(IRQn) >= 0)
 80047a4:	2800      	cmp	r0, #0
 80047a6:	db0b      	blt.n	80047c0 <HAL_NVIC_SetPriority+0x58>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80047a8:	0109      	lsls	r1, r1, #4
 80047aa:	b2c9      	uxtb	r1, r1
 80047ac:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 80047b0:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 80047b4:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 80047b8:	f85d fb04 	ldr.w	pc, [sp], #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80047bc:	2300      	movs	r3, #0
 80047be:	e7e5      	b.n	800478c <HAL_NVIC_SetPriority+0x24>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80047c0:	f000 000f 	and.w	r0, r0, #15
 80047c4:	0109      	lsls	r1, r1, #4
 80047c6:	b2c9      	uxtb	r1, r1
 80047c8:	4b02      	ldr	r3, [pc, #8]	; (80047d4 <HAL_NVIC_SetPriority+0x6c>)
 80047ca:	5419      	strb	r1, [r3, r0]
 80047cc:	e7f4      	b.n	80047b8 <HAL_NVIC_SetPriority+0x50>
 80047ce:	bf00      	nop
 80047d0:	e000ed00 	.word	0xe000ed00
 80047d4:	e000ed14 	.word	0xe000ed14

080047d8 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 80047d8:	2800      	cmp	r0, #0
 80047da:	db07      	blt.n	80047ec <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80047dc:	f000 021f 	and.w	r2, r0, #31
 80047e0:	0940      	lsrs	r0, r0, #5
 80047e2:	2301      	movs	r3, #1
 80047e4:	4093      	lsls	r3, r2
 80047e6:	4a02      	ldr	r2, [pc, #8]	; (80047f0 <HAL_NVIC_EnableIRQ+0x18>)
 80047e8:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 80047ec:	4770      	bx	lr
 80047ee:	bf00      	nop
 80047f0:	e000e100 	.word	0xe000e100

080047f4 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80047f4:	3801      	subs	r0, #1
 80047f6:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80047fa:	d20b      	bcs.n	8004814 <HAL_SYSTICK_Config+0x20>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80047fc:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8004800:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004802:	4a05      	ldr	r2, [pc, #20]	; (8004818 <HAL_SYSTICK_Config+0x24>)
 8004804:	21f0      	movs	r1, #240	; 0xf0
 8004806:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800480a:	2000      	movs	r0, #0
 800480c:	6198      	str	r0, [r3, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800480e:	2207      	movs	r2, #7
 8004810:	611a      	str	r2, [r3, #16]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004812:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8004814:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8004816:	4770      	bx	lr
 8004818:	e000ed00 	.word	0xe000ed00

0800481c <HAL_GPIO_Init>:
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800481c:	2300      	movs	r3, #0
 800481e:	2b0f      	cmp	r3, #15
 8004820:	f200 80d2 	bhi.w	80049c8 <HAL_GPIO_Init+0x1ac>
{
 8004824:	b570      	push	{r4, r5, r6, lr}
 8004826:	b082      	sub	sp, #8
 8004828:	e060      	b.n	80048ec <HAL_GPIO_Init+0xd0>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800482a:	6885      	ldr	r5, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800482c:	005e      	lsls	r6, r3, #1
 800482e:	2403      	movs	r4, #3
 8004830:	40b4      	lsls	r4, r6
 8004832:	ea25 0504 	bic.w	r5, r5, r4
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004836:	68cc      	ldr	r4, [r1, #12]
 8004838:	40b4      	lsls	r4, r6
 800483a:	432c      	orrs	r4, r5
        GPIOx->OSPEEDR = temp;
 800483c:	6084      	str	r4, [r0, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800483e:	6845      	ldr	r5, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004840:	ea25 0502 	bic.w	r5, r5, r2
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004844:	684c      	ldr	r4, [r1, #4]
 8004846:	f3c4 1200 	ubfx	r2, r4, #4, #1
 800484a:	409a      	lsls	r2, r3
 800484c:	432a      	orrs	r2, r5
        GPIOx->OTYPER = temp;
 800484e:	6042      	str	r2, [r0, #4]
 8004850:	e05a      	b.n	8004908 <HAL_GPIO_Init+0xec>
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004852:	08dc      	lsrs	r4, r3, #3
 8004854:	3408      	adds	r4, #8
 8004856:	f850 6024 	ldr.w	r6, [r0, r4, lsl #2]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800485a:	f003 0207 	and.w	r2, r3, #7
 800485e:	0095      	lsls	r5, r2, #2
 8004860:	220f      	movs	r2, #15
 8004862:	40aa      	lsls	r2, r5
 8004864:	ea26 0e02 	bic.w	lr, r6, r2
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004868:	690a      	ldr	r2, [r1, #16]
 800486a:	40aa      	lsls	r2, r5
 800486c:	ea42 020e 	orr.w	r2, r2, lr
        GPIOx->AFR[position >> 3U] = temp;
 8004870:	f840 2024 	str.w	r2, [r0, r4, lsl #2]
 8004874:	e05c      	b.n	8004930 <HAL_GPIO_Init+0x114>
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2U];
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004876:	2204      	movs	r2, #4
 8004878:	e000      	b.n	800487c <HAL_GPIO_Init+0x60>
 800487a:	2200      	movs	r2, #0
 800487c:	fa02 f20e 	lsl.w	r2, r2, lr
 8004880:	432a      	orrs	r2, r5
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004882:	3402      	adds	r4, #2
 8004884:	4d51      	ldr	r5, [pc, #324]	; (80049cc <HAL_GPIO_Init+0x1b0>)
 8004886:	f845 2024 	str.w	r2, [r5, r4, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800488a:	4a51      	ldr	r2, [pc, #324]	; (80049d0 <HAL_GPIO_Init+0x1b4>)
 800488c:	6894      	ldr	r4, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
 800488e:	ea6f 020c 	mvn.w	r2, ip
 8004892:	ea24 050c 	bic.w	r5, r4, ip
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004896:	684e      	ldr	r6, [r1, #4]
 8004898:	f416 1f80 	tst.w	r6, #1048576	; 0x100000
 800489c:	d001      	beq.n	80048a2 <HAL_GPIO_Init+0x86>
        {
          temp |= iocurrent;
 800489e:	ea4c 0504 	orr.w	r5, ip, r4
        }
        EXTI->RTSR = temp;
 80048a2:	4c4b      	ldr	r4, [pc, #300]	; (80049d0 <HAL_GPIO_Init+0x1b4>)
 80048a4:	60a5      	str	r5, [r4, #8]

        temp = EXTI->FTSR;
 80048a6:	68e4      	ldr	r4, [r4, #12]
        temp &= ~((uint32_t)iocurrent);
 80048a8:	ea02 0504 	and.w	r5, r2, r4
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80048ac:	684e      	ldr	r6, [r1, #4]
 80048ae:	f416 1f00 	tst.w	r6, #2097152	; 0x200000
 80048b2:	d001      	beq.n	80048b8 <HAL_GPIO_Init+0x9c>
        {
          temp |= iocurrent;
 80048b4:	ea4c 0504 	orr.w	r5, ip, r4
        }
        EXTI->FTSR = temp;
 80048b8:	4c45      	ldr	r4, [pc, #276]	; (80049d0 <HAL_GPIO_Init+0x1b4>)
 80048ba:	60e5      	str	r5, [r4, #12]

        temp = EXTI->EMR;
 80048bc:	6864      	ldr	r4, [r4, #4]
        temp &= ~((uint32_t)iocurrent);
 80048be:	ea02 0504 	and.w	r5, r2, r4
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80048c2:	684e      	ldr	r6, [r1, #4]
 80048c4:	f416 3f00 	tst.w	r6, #131072	; 0x20000
 80048c8:	d001      	beq.n	80048ce <HAL_GPIO_Init+0xb2>
        {
          temp |= iocurrent;
 80048ca:	ea4c 0504 	orr.w	r5, ip, r4
        }
        EXTI->EMR = temp;
 80048ce:	4c40      	ldr	r4, [pc, #256]	; (80049d0 <HAL_GPIO_Init+0x1b4>)
 80048d0:	6065      	str	r5, [r4, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80048d2:	6824      	ldr	r4, [r4, #0]
        temp &= ~((uint32_t)iocurrent);
 80048d4:	4022      	ands	r2, r4
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80048d6:	684d      	ldr	r5, [r1, #4]
 80048d8:	f415 3f80 	tst.w	r5, #65536	; 0x10000
 80048dc:	d001      	beq.n	80048e2 <HAL_GPIO_Init+0xc6>
        {
          temp |= iocurrent;
 80048de:	ea4c 0204 	orr.w	r2, ip, r4
        }
        EXTI->IMR = temp;
 80048e2:	4c3b      	ldr	r4, [pc, #236]	; (80049d0 <HAL_GPIO_Init+0x1b4>)
 80048e4:	6022      	str	r2, [r4, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80048e6:	3301      	adds	r3, #1
 80048e8:	2b0f      	cmp	r3, #15
 80048ea:	d86b      	bhi.n	80049c4 <HAL_GPIO_Init+0x1a8>
    ioposition = 0x01U << position;
 80048ec:	2201      	movs	r2, #1
 80048ee:	409a      	lsls	r2, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80048f0:	680c      	ldr	r4, [r1, #0]
 80048f2:	ea04 0c02 	and.w	ip, r4, r2
    if(iocurrent == ioposition)
 80048f6:	ea32 0404 	bics.w	r4, r2, r4
 80048fa:	d1f4      	bne.n	80048e6 <HAL_GPIO_Init+0xca>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80048fc:	684c      	ldr	r4, [r1, #4]
 80048fe:	f004 0403 	and.w	r4, r4, #3
 8004902:	3c01      	subs	r4, #1
 8004904:	2c01      	cmp	r4, #1
 8004906:	d990      	bls.n	800482a <HAL_GPIO_Init+0xe>
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004908:	684a      	ldr	r2, [r1, #4]
 800490a:	f002 0203 	and.w	r2, r2, #3
 800490e:	2a03      	cmp	r2, #3
 8004910:	d009      	beq.n	8004926 <HAL_GPIO_Init+0x10a>
        temp = GPIOx->PUPDR;
 8004912:	68c4      	ldr	r4, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004914:	005d      	lsls	r5, r3, #1
 8004916:	2203      	movs	r2, #3
 8004918:	40aa      	lsls	r2, r5
 800491a:	ea24 0402 	bic.w	r4, r4, r2
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800491e:	688a      	ldr	r2, [r1, #8]
 8004920:	40aa      	lsls	r2, r5
 8004922:	4322      	orrs	r2, r4
        GPIOx->PUPDR = temp;
 8004924:	60c2      	str	r2, [r0, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004926:	684a      	ldr	r2, [r1, #4]
 8004928:	f002 0203 	and.w	r2, r2, #3
 800492c:	2a02      	cmp	r2, #2
 800492e:	d090      	beq.n	8004852 <HAL_GPIO_Init+0x36>
      temp = GPIOx->MODER;
 8004930:	6804      	ldr	r4, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004932:	ea4f 0e43 	mov.w	lr, r3, lsl #1
 8004936:	2203      	movs	r2, #3
 8004938:	fa02 f20e 	lsl.w	r2, r2, lr
 800493c:	ea24 0402 	bic.w	r4, r4, r2
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004940:	684a      	ldr	r2, [r1, #4]
 8004942:	f002 0203 	and.w	r2, r2, #3
 8004946:	fa02 f20e 	lsl.w	r2, r2, lr
 800494a:	4322      	orrs	r2, r4
      GPIOx->MODER = temp;
 800494c:	6002      	str	r2, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800494e:	684a      	ldr	r2, [r1, #4]
 8004950:	f412 3f40 	tst.w	r2, #196608	; 0x30000
 8004954:	d0c7      	beq.n	80048e6 <HAL_GPIO_Init+0xca>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004956:	2200      	movs	r2, #0
 8004958:	9201      	str	r2, [sp, #4]
 800495a:	4a1e      	ldr	r2, [pc, #120]	; (80049d4 <HAL_GPIO_Init+0x1b8>)
 800495c:	6c54      	ldr	r4, [r2, #68]	; 0x44
 800495e:	f444 4480 	orr.w	r4, r4, #16384	; 0x4000
 8004962:	6454      	str	r4, [r2, #68]	; 0x44
 8004964:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8004966:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 800496a:	9201      	str	r2, [sp, #4]
 800496c:	9a01      	ldr	r2, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2U];
 800496e:	089c      	lsrs	r4, r3, #2
 8004970:	1ca5      	adds	r5, r4, #2
 8004972:	4a16      	ldr	r2, [pc, #88]	; (80049cc <HAL_GPIO_Init+0x1b0>)
 8004974:	f852 5025 	ldr.w	r5, [r2, r5, lsl #2]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004978:	f003 0203 	and.w	r2, r3, #3
 800497c:	ea4f 0e82 	mov.w	lr, r2, lsl #2
 8004980:	220f      	movs	r2, #15
 8004982:	fa02 f20e 	lsl.w	r2, r2, lr
 8004986:	ea25 0502 	bic.w	r5, r5, r2
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800498a:	4a13      	ldr	r2, [pc, #76]	; (80049d8 <HAL_GPIO_Init+0x1bc>)
 800498c:	4290      	cmp	r0, r2
 800498e:	f43f af74 	beq.w	800487a <HAL_GPIO_Init+0x5e>
 8004992:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004996:	4290      	cmp	r0, r2
 8004998:	d00e      	beq.n	80049b8 <HAL_GPIO_Init+0x19c>
 800499a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800499e:	4290      	cmp	r0, r2
 80049a0:	d00c      	beq.n	80049bc <HAL_GPIO_Init+0x1a0>
 80049a2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80049a6:	4290      	cmp	r0, r2
 80049a8:	d00a      	beq.n	80049c0 <HAL_GPIO_Init+0x1a4>
 80049aa:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80049ae:	4290      	cmp	r0, r2
 80049b0:	f43f af61 	beq.w	8004876 <HAL_GPIO_Init+0x5a>
 80049b4:	2207      	movs	r2, #7
 80049b6:	e761      	b.n	800487c <HAL_GPIO_Init+0x60>
 80049b8:	2201      	movs	r2, #1
 80049ba:	e75f      	b.n	800487c <HAL_GPIO_Init+0x60>
 80049bc:	2202      	movs	r2, #2
 80049be:	e75d      	b.n	800487c <HAL_GPIO_Init+0x60>
 80049c0:	2203      	movs	r2, #3
 80049c2:	e75b      	b.n	800487c <HAL_GPIO_Init+0x60>
      }
    }
  }
}
 80049c4:	b002      	add	sp, #8
 80049c6:	bd70      	pop	{r4, r5, r6, pc}
 80049c8:	4770      	bx	lr
 80049ca:	bf00      	nop
 80049cc:	40013800 	.word	0x40013800
 80049d0:	40013c00 	.word	0x40013c00
 80049d4:	40023800 	.word	0x40023800
 80049d8:	40020000 	.word	0x40020000

080049dc <HAL_GPIO_DeInit>:

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80049dc:	2300      	movs	r3, #0
 80049de:	2b0f      	cmp	r3, #15
 80049e0:	d87c      	bhi.n	8004adc <HAL_GPIO_DeInit+0x100>
{
 80049e2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80049e4:	e02d      	b.n	8004a42 <HAL_GPIO_DeInit+0x66>
    if(iocurrent == ioposition)
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
      tmp &= (0x0FU << (4U * (position & 0x03U)));
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 80049e6:	2504      	movs	r5, #4
 80049e8:	e000      	b.n	80049ec <HAL_GPIO_DeInit+0x10>
 80049ea:	2500      	movs	r5, #0
 80049ec:	fa05 fc0c 	lsl.w	ip, r5, ip
 80049f0:	45a4      	cmp	ip, r4
 80049f2:	d057      	beq.n	8004aa4 <HAL_GPIO_DeInit+0xc8>
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80049f4:	6804      	ldr	r4, [r0, #0]
 80049f6:	005d      	lsls	r5, r3, #1
 80049f8:	f04f 0c03 	mov.w	ip, #3
 80049fc:	fa0c fc05 	lsl.w	ip, ip, r5
 8004a00:	ea24 040c 	bic.w	r4, r4, ip
 8004a04:	6004      	str	r4, [r0, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004a06:	ea4f 0ed3 	mov.w	lr, r3, lsr #3
 8004a0a:	f10e 0e08 	add.w	lr, lr, #8
 8004a0e:	f850 402e 	ldr.w	r4, [r0, lr, lsl #2]
 8004a12:	f003 0507 	and.w	r5, r3, #7
 8004a16:	00ae      	lsls	r6, r5, #2
 8004a18:	250f      	movs	r5, #15
 8004a1a:	40b5      	lsls	r5, r6
 8004a1c:	ea24 0405 	bic.w	r4, r4, r5
 8004a20:	f840 402e 	str.w	r4, [r0, lr, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004a24:	68c4      	ldr	r4, [r0, #12]
 8004a26:	ea24 040c 	bic.w	r4, r4, ip
 8004a2a:	60c4      	str	r4, [r0, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004a2c:	6844      	ldr	r4, [r0, #4]
 8004a2e:	ea24 0202 	bic.w	r2, r4, r2
 8004a32:	6042      	str	r2, [r0, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004a34:	6882      	ldr	r2, [r0, #8]
 8004a36:	ea22 020c 	bic.w	r2, r2, ip
 8004a3a:	6082      	str	r2, [r0, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004a3c:	3301      	adds	r3, #1
 8004a3e:	2b0f      	cmp	r3, #15
 8004a40:	d84b      	bhi.n	8004ada <HAL_GPIO_DeInit+0xfe>
    ioposition = 0x01U << position;
 8004a42:	2201      	movs	r2, #1
 8004a44:	409a      	lsls	r2, r3
    iocurrent = (GPIO_Pin) & ioposition;
 8004a46:	ea02 0601 	and.w	r6, r2, r1
    if(iocurrent == ioposition)
 8004a4a:	ea32 0401 	bics.w	r4, r2, r1
 8004a4e:	d1f5      	bne.n	8004a3c <HAL_GPIO_DeInit+0x60>
      tmp = SYSCFG->EXTICR[position >> 2U];
 8004a50:	ea4f 0e93 	mov.w	lr, r3, lsr #2
 8004a54:	f10e 0502 	add.w	r5, lr, #2
 8004a58:	4c21      	ldr	r4, [pc, #132]	; (8004ae0 <HAL_GPIO_DeInit+0x104>)
 8004a5a:	f854 4025 	ldr.w	r4, [r4, r5, lsl #2]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 8004a5e:	f003 0c03 	and.w	ip, r3, #3
 8004a62:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 8004a66:	250f      	movs	r5, #15
 8004a68:	fa05 f70c 	lsl.w	r7, r5, ip
 8004a6c:	403c      	ands	r4, r7
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 8004a6e:	4d1d      	ldr	r5, [pc, #116]	; (8004ae4 <HAL_GPIO_DeInit+0x108>)
 8004a70:	42a8      	cmp	r0, r5
 8004a72:	d0ba      	beq.n	80049ea <HAL_GPIO_DeInit+0xe>
 8004a74:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8004a78:	42a8      	cmp	r0, r5
 8004a7a:	d00d      	beq.n	8004a98 <HAL_GPIO_DeInit+0xbc>
 8004a7c:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8004a80:	42a8      	cmp	r0, r5
 8004a82:	d00b      	beq.n	8004a9c <HAL_GPIO_DeInit+0xc0>
 8004a84:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8004a88:	42a8      	cmp	r0, r5
 8004a8a:	d009      	beq.n	8004aa0 <HAL_GPIO_DeInit+0xc4>
 8004a8c:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8004a90:	42a8      	cmp	r0, r5
 8004a92:	d0a8      	beq.n	80049e6 <HAL_GPIO_DeInit+0xa>
 8004a94:	2507      	movs	r5, #7
 8004a96:	e7a9      	b.n	80049ec <HAL_GPIO_DeInit+0x10>
 8004a98:	2501      	movs	r5, #1
 8004a9a:	e7a7      	b.n	80049ec <HAL_GPIO_DeInit+0x10>
 8004a9c:	2502      	movs	r5, #2
 8004a9e:	e7a5      	b.n	80049ec <HAL_GPIO_DeInit+0x10>
 8004aa0:	2503      	movs	r5, #3
 8004aa2:	e7a3      	b.n	80049ec <HAL_GPIO_DeInit+0x10>
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8004aa4:	4c10      	ldr	r4, [pc, #64]	; (8004ae8 <HAL_GPIO_DeInit+0x10c>)
 8004aa6:	6825      	ldr	r5, [r4, #0]
 8004aa8:	ea25 0506 	bic.w	r5, r5, r6
 8004aac:	6025      	str	r5, [r4, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8004aae:	6865      	ldr	r5, [r4, #4]
 8004ab0:	ea25 0506 	bic.w	r5, r5, r6
 8004ab4:	6065      	str	r5, [r4, #4]
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8004ab6:	68e5      	ldr	r5, [r4, #12]
 8004ab8:	ea25 0506 	bic.w	r5, r5, r6
 8004abc:	60e5      	str	r5, [r4, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8004abe:	68a5      	ldr	r5, [r4, #8]
 8004ac0:	ea25 0606 	bic.w	r6, r5, r6
 8004ac4:	60a6      	str	r6, [r4, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8004ac6:	4e06      	ldr	r6, [pc, #24]	; (8004ae0 <HAL_GPIO_DeInit+0x104>)
 8004ac8:	f10e 0402 	add.w	r4, lr, #2
 8004acc:	f856 5024 	ldr.w	r5, [r6, r4, lsl #2]
 8004ad0:	ea25 0507 	bic.w	r5, r5, r7
 8004ad4:	f846 5024 	str.w	r5, [r6, r4, lsl #2]
 8004ad8:	e78c      	b.n	80049f4 <HAL_GPIO_DeInit+0x18>
    }
  }
}
 8004ada:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004adc:	4770      	bx	lr
 8004ade:	bf00      	nop
 8004ae0:	40013800 	.word	0x40013800
 8004ae4:	40020000 	.word	0x40020000
 8004ae8:	40013c00 	.word	0x40013c00

08004aec <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004aec:	6903      	ldr	r3, [r0, #16]
 8004aee:	4219      	tst	r1, r3
 8004af0:	d001      	beq.n	8004af6 <HAL_GPIO_ReadPin+0xa>
  {
    bitstatus = GPIO_PIN_SET;
 8004af2:	2001      	movs	r0, #1
 8004af4:	4770      	bx	lr
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004af6:	2000      	movs	r0, #0
  }
  return bitstatus;
}
 8004af8:	4770      	bx	lr

08004afa <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004afa:	b10a      	cbz	r2, 8004b00 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004afc:	6181      	str	r1, [r0, #24]
 8004afe:	4770      	bx	lr
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004b00:	0409      	lsls	r1, r1, #16
 8004b02:	6181      	str	r1, [r0, #24]
  }
}
 8004b04:	4770      	bx	lr

08004b06 <I2C_IsAcknowledgeFailed>:
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004b06:	6803      	ldr	r3, [r0, #0]
 8004b08:	695a      	ldr	r2, [r3, #20]
 8004b0a:	f412 6f80 	tst.w	r2, #1024	; 0x400
 8004b0e:	d101      	bne.n	8004b14 <I2C_IsAcknowledgeFailed+0xe>
    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);

    return HAL_ERROR;
  }
  return HAL_OK;
 8004b10:	2000      	movs	r0, #0
}
 8004b12:	4770      	bx	lr
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004b14:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004b18:	615a      	str	r2, [r3, #20]
    hi2c->PreviousState       = I2C_STATE_NONE;
 8004b1a:	2300      	movs	r3, #0
 8004b1c:	6303      	str	r3, [r0, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004b1e:	2220      	movs	r2, #32
 8004b20:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004b24:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004b28:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8004b2a:	f042 0204 	orr.w	r2, r2, #4
 8004b2e:	6402      	str	r2, [r0, #64]	; 0x40
    __HAL_UNLOCK(hi2c);
 8004b30:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    return HAL_ERROR;
 8004b34:	2001      	movs	r0, #1
 8004b36:	4770      	bx	lr

08004b38 <I2C_WaitOnFlagUntilTimeout>:
{
 8004b38:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004b3c:	4607      	mov	r7, r0
 8004b3e:	460d      	mov	r5, r1
 8004b40:	4690      	mov	r8, r2
 8004b42:	461e      	mov	r6, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004b44:	e024      	b.n	8004b90 <I2C_WaitOnFlagUntilTimeout+0x58>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004b46:	f7ff fde3 	bl	8004710 <HAL_GetTick>
 8004b4a:	9b06      	ldr	r3, [sp, #24]
 8004b4c:	1ac0      	subs	r0, r0, r3
 8004b4e:	42b0      	cmp	r0, r6
 8004b50:	d800      	bhi.n	8004b54 <I2C_WaitOnFlagUntilTimeout+0x1c>
 8004b52:	b9ee      	cbnz	r6, 8004b90 <I2C_WaitOnFlagUntilTimeout+0x58>
        hi2c->PreviousState     = I2C_STATE_NONE;
 8004b54:	2300      	movs	r3, #0
 8004b56:	633b      	str	r3, [r7, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8004b58:	2220      	movs	r2, #32
 8004b5a:	f887 203d 	strb.w	r2, [r7, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004b5e:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004b62:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004b64:	f042 0220 	orr.w	r2, r2, #32
 8004b68:	643a      	str	r2, [r7, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8004b6a:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
        return HAL_ERROR;
 8004b6e:	2001      	movs	r0, #1
 8004b70:	e01e      	b.n	8004bb0 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004b72:	683b      	ldr	r3, [r7, #0]
 8004b74:	699c      	ldr	r4, [r3, #24]
 8004b76:	ea25 0c04 	bic.w	ip, r5, r4
 8004b7a:	fa1f fc8c 	uxth.w	ip, ip
 8004b7e:	fabc fc8c 	clz	ip, ip
 8004b82:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 8004b86:	45e0      	cmp	r8, ip
 8004b88:	d111      	bne.n	8004bae <I2C_WaitOnFlagUntilTimeout+0x76>
    if (Timeout != HAL_MAX_DELAY)
 8004b8a:	f1b6 3fff 	cmp.w	r6, #4294967295
 8004b8e:	d1da      	bne.n	8004b46 <I2C_WaitOnFlagUntilTimeout+0xe>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004b90:	f3c5 4307 	ubfx	r3, r5, #16, #8
 8004b94:	2b01      	cmp	r3, #1
 8004b96:	d1ec      	bne.n	8004b72 <I2C_WaitOnFlagUntilTimeout+0x3a>
 8004b98:	683b      	ldr	r3, [r7, #0]
 8004b9a:	695b      	ldr	r3, [r3, #20]
 8004b9c:	ea25 0c03 	bic.w	ip, r5, r3
 8004ba0:	fa1f fc8c 	uxth.w	ip, ip
 8004ba4:	fabc fc8c 	clz	ip, ip
 8004ba8:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 8004bac:	e7eb      	b.n	8004b86 <I2C_WaitOnFlagUntilTimeout+0x4e>
  return HAL_OK;
 8004bae:	2000      	movs	r0, #0
}
 8004bb0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08004bb4 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
{
 8004bb4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004bb8:	4605      	mov	r5, r0
 8004bba:	460e      	mov	r6, r1
 8004bbc:	4617      	mov	r7, r2
 8004bbe:	4698      	mov	r8, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004bc0:	e03d      	b.n	8004c3e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x8a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004bc2:	681a      	ldr	r2, [r3, #0]
 8004bc4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004bc8:	601a      	str	r2, [r3, #0]
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004bca:	682b      	ldr	r3, [r5, #0]
 8004bcc:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004bd0:	615a      	str	r2, [r3, #20]
      hi2c->PreviousState       = I2C_STATE_NONE;
 8004bd2:	2300      	movs	r3, #0
 8004bd4:	632b      	str	r3, [r5, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004bd6:	2220      	movs	r2, #32
 8004bd8:	f885 203d 	strb.w	r2, [r5, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004bdc:	f885 303e 	strb.w	r3, [r5, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004be0:	6c2a      	ldr	r2, [r5, #64]	; 0x40
 8004be2:	f042 0204 	orr.w	r2, r2, #4
 8004be6:	642a      	str	r2, [r5, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 8004be8:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
      return HAL_ERROR;
 8004bec:	2001      	movs	r0, #1
 8004bee:	e034      	b.n	8004c5a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xa6>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004bf0:	f7ff fd8e 	bl	8004710 <HAL_GetTick>
 8004bf4:	eba0 0008 	sub.w	r0, r0, r8
 8004bf8:	42b8      	cmp	r0, r7
 8004bfa:	d800      	bhi.n	8004bfe <I2C_WaitOnMasterAddressFlagUntilTimeout+0x4a>
 8004bfc:	b9ff      	cbnz	r7, 8004c3e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x8a>
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004bfe:	2300      	movs	r3, #0
 8004c00:	632b      	str	r3, [r5, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004c02:	2220      	movs	r2, #32
 8004c04:	f885 203d 	strb.w	r2, [r5, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004c08:	f885 303e 	strb.w	r3, [r5, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004c0c:	6c2a      	ldr	r2, [r5, #64]	; 0x40
 8004c0e:	f042 0220 	orr.w	r2, r2, #32
 8004c12:	642a      	str	r2, [r5, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8004c14:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
        return HAL_ERROR;
 8004c18:	2001      	movs	r0, #1
 8004c1a:	e01e      	b.n	8004c5a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004c1c:	682b      	ldr	r3, [r5, #0]
 8004c1e:	699c      	ldr	r4, [r3, #24]
 8004c20:	ea26 0404 	bic.w	r4, r6, r4
 8004c24:	b2a4      	uxth	r4, r4
 8004c26:	3c00      	subs	r4, #0
 8004c28:	bf18      	it	ne
 8004c2a:	2401      	movne	r4, #1
 8004c2c:	b1a4      	cbz	r4, 8004c58 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xa4>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004c2e:	682b      	ldr	r3, [r5, #0]
 8004c30:	695a      	ldr	r2, [r3, #20]
 8004c32:	f412 6f80 	tst.w	r2, #1024	; 0x400
 8004c36:	d1c4      	bne.n	8004bc2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xe>
    if (Timeout != HAL_MAX_DELAY)
 8004c38:	f1b7 3fff 	cmp.w	r7, #4294967295
 8004c3c:	d1d8      	bne.n	8004bf0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x3c>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004c3e:	f3c6 4307 	ubfx	r3, r6, #16, #8
 8004c42:	2b01      	cmp	r3, #1
 8004c44:	d1ea      	bne.n	8004c1c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
 8004c46:	682b      	ldr	r3, [r5, #0]
 8004c48:	695c      	ldr	r4, [r3, #20]
 8004c4a:	ea26 0404 	bic.w	r4, r6, r4
 8004c4e:	b2a4      	uxth	r4, r4
 8004c50:	3c00      	subs	r4, #0
 8004c52:	bf18      	it	ne
 8004c54:	2401      	movne	r4, #1
 8004c56:	e7e9      	b.n	8004c2c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x78>
  return HAL_OK;
 8004c58:	2000      	movs	r0, #0
}
 8004c5a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08004c5e <I2C_WaitOnTXEFlagUntilTimeout>:
{
 8004c5e:	b570      	push	{r4, r5, r6, lr}
 8004c60:	4604      	mov	r4, r0
 8004c62:	460d      	mov	r5, r1
 8004c64:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004c66:	6823      	ldr	r3, [r4, #0]
 8004c68:	695b      	ldr	r3, [r3, #20]
 8004c6a:	f013 0f80 	tst.w	r3, #128	; 0x80
 8004c6e:	d11c      	bne.n	8004caa <I2C_WaitOnTXEFlagUntilTimeout+0x4c>
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004c70:	4620      	mov	r0, r4
 8004c72:	f7ff ff48 	bl	8004b06 <I2C_IsAcknowledgeFailed>
 8004c76:	b9d0      	cbnz	r0, 8004cae <I2C_WaitOnTXEFlagUntilTimeout+0x50>
    if (Timeout != HAL_MAX_DELAY)
 8004c78:	f1b5 3fff 	cmp.w	r5, #4294967295
 8004c7c:	d0f3      	beq.n	8004c66 <I2C_WaitOnTXEFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004c7e:	f7ff fd47 	bl	8004710 <HAL_GetTick>
 8004c82:	1b80      	subs	r0, r0, r6
 8004c84:	42a8      	cmp	r0, r5
 8004c86:	d801      	bhi.n	8004c8c <I2C_WaitOnTXEFlagUntilTimeout+0x2e>
 8004c88:	2d00      	cmp	r5, #0
 8004c8a:	d1ec      	bne.n	8004c66 <I2C_WaitOnTXEFlagUntilTimeout+0x8>
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004c8c:	2300      	movs	r3, #0
 8004c8e:	6323      	str	r3, [r4, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004c90:	2220      	movs	r2, #32
 8004c92:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004c96:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004c9a:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8004c9c:	f042 0220 	orr.w	r2, r2, #32
 8004ca0:	6422      	str	r2, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8004ca2:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        return HAL_ERROR;
 8004ca6:	2001      	movs	r0, #1
 8004ca8:	e000      	b.n	8004cac <I2C_WaitOnTXEFlagUntilTimeout+0x4e>
  return HAL_OK;
 8004caa:	2000      	movs	r0, #0
}
 8004cac:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 8004cae:	2001      	movs	r0, #1
 8004cb0:	e7fc      	b.n	8004cac <I2C_WaitOnTXEFlagUntilTimeout+0x4e>
	...

08004cb4 <I2C_RequestMemoryWrite>:
{
 8004cb4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004cb8:	b085      	sub	sp, #20
 8004cba:	4604      	mov	r4, r0
 8004cbc:	460d      	mov	r5, r1
 8004cbe:	4691      	mov	r9, r2
 8004cc0:	461f      	mov	r7, r3
 8004cc2:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
 8004cc6:	9e0d      	ldr	r6, [sp, #52]	; 0x34
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004cc8:	6803      	ldr	r3, [r0, #0]
 8004cca:	6819      	ldr	r1, [r3, #0]
 8004ccc:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 8004cd0:	6019      	str	r1, [r3, #0]
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004cd2:	9600      	str	r6, [sp, #0]
 8004cd4:	4643      	mov	r3, r8
 8004cd6:	2200      	movs	r2, #0
 8004cd8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004cdc:	f7ff ff2c 	bl	8004b38 <I2C_WaitOnFlagUntilTimeout>
 8004ce0:	b960      	cbnz	r0, 8004cfc <I2C_RequestMemoryWrite+0x48>
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004ce2:	6823      	ldr	r3, [r4, #0]
 8004ce4:	f005 05fe 	and.w	r5, r5, #254	; 0xfe
 8004ce8:	611d      	str	r5, [r3, #16]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004cea:	4633      	mov	r3, r6
 8004cec:	4642      	mov	r2, r8
 8004cee:	4926      	ldr	r1, [pc, #152]	; (8004d88 <I2C_RequestMemoryWrite+0xd4>)
 8004cf0:	4620      	mov	r0, r4
 8004cf2:	f7ff ff5f 	bl	8004bb4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004cf6:	b168      	cbz	r0, 8004d14 <I2C_RequestMemoryWrite+0x60>
    return HAL_ERROR;
 8004cf8:	2001      	movs	r0, #1
 8004cfa:	e008      	b.n	8004d0e <I2C_RequestMemoryWrite+0x5a>
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004cfc:	6823      	ldr	r3, [r4, #0]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	f413 7f80 	tst.w	r3, #256	; 0x100
 8004d04:	d002      	beq.n	8004d0c <I2C_RequestMemoryWrite+0x58>
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004d06:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004d0a:	6423      	str	r3, [r4, #64]	; 0x40
    return HAL_TIMEOUT;
 8004d0c:	2003      	movs	r0, #3
}
 8004d0e:	b005      	add	sp, #20
 8004d10:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004d14:	2300      	movs	r3, #0
 8004d16:	9303      	str	r3, [sp, #12]
 8004d18:	6823      	ldr	r3, [r4, #0]
 8004d1a:	695a      	ldr	r2, [r3, #20]
 8004d1c:	9203      	str	r2, [sp, #12]
 8004d1e:	699b      	ldr	r3, [r3, #24]
 8004d20:	9303      	str	r3, [sp, #12]
 8004d22:	9b03      	ldr	r3, [sp, #12]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004d24:	4632      	mov	r2, r6
 8004d26:	4641      	mov	r1, r8
 8004d28:	4620      	mov	r0, r4
 8004d2a:	f7ff ff98 	bl	8004c5e <I2C_WaitOnTXEFlagUntilTimeout>
 8004d2e:	b930      	cbnz	r0, 8004d3e <I2C_RequestMemoryWrite+0x8a>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004d30:	2f01      	cmp	r7, #1
 8004d32:	d10f      	bne.n	8004d54 <I2C_RequestMemoryWrite+0xa0>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004d34:	6823      	ldr	r3, [r4, #0]
 8004d36:	fa5f f689 	uxtb.w	r6, r9
 8004d3a:	611e      	str	r6, [r3, #16]
 8004d3c:	e7e7      	b.n	8004d0e <I2C_RequestMemoryWrite+0x5a>
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004d3e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004d40:	2b04      	cmp	r3, #4
 8004d42:	d001      	beq.n	8004d48 <I2C_RequestMemoryWrite+0x94>
    return HAL_ERROR;
 8004d44:	2001      	movs	r0, #1
 8004d46:	e7e2      	b.n	8004d0e <I2C_RequestMemoryWrite+0x5a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004d48:	6822      	ldr	r2, [r4, #0]
 8004d4a:	6813      	ldr	r3, [r2, #0]
 8004d4c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004d50:	6013      	str	r3, [r2, #0]
 8004d52:	e7f7      	b.n	8004d44 <I2C_RequestMemoryWrite+0x90>
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004d54:	6823      	ldr	r3, [r4, #0]
 8004d56:	ea4f 2219 	mov.w	r2, r9, lsr #8
 8004d5a:	611a      	str	r2, [r3, #16]
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004d5c:	4632      	mov	r2, r6
 8004d5e:	4641      	mov	r1, r8
 8004d60:	4620      	mov	r0, r4
 8004d62:	f7ff ff7c 	bl	8004c5e <I2C_WaitOnTXEFlagUntilTimeout>
 8004d66:	b920      	cbnz	r0, 8004d72 <I2C_RequestMemoryWrite+0xbe>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004d68:	6823      	ldr	r3, [r4, #0]
 8004d6a:	fa5f f689 	uxtb.w	r6, r9
 8004d6e:	611e      	str	r6, [r3, #16]
 8004d70:	e7cd      	b.n	8004d0e <I2C_RequestMemoryWrite+0x5a>
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004d72:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004d74:	2b04      	cmp	r3, #4
 8004d76:	d001      	beq.n	8004d7c <I2C_RequestMemoryWrite+0xc8>
      return HAL_ERROR;
 8004d78:	2001      	movs	r0, #1
 8004d7a:	e7c8      	b.n	8004d0e <I2C_RequestMemoryWrite+0x5a>
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004d7c:	6822      	ldr	r2, [r4, #0]
 8004d7e:	6813      	ldr	r3, [r2, #0]
 8004d80:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004d84:	6013      	str	r3, [r2, #0]
 8004d86:	e7f7      	b.n	8004d78 <I2C_RequestMemoryWrite+0xc4>
 8004d88:	00010002 	.word	0x00010002

08004d8c <I2C_RequestMemoryRead>:
{
 8004d8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004d90:	b084      	sub	sp, #16
 8004d92:	4604      	mov	r4, r0
 8004d94:	460d      	mov	r5, r1
 8004d96:	4616      	mov	r6, r2
 8004d98:	4699      	mov	r9, r3
 8004d9a:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 8004d9c:	f8dd 8034 	ldr.w	r8, [sp, #52]	; 0x34
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004da0:	6802      	ldr	r2, [r0, #0]
 8004da2:	6813      	ldr	r3, [r2, #0]
 8004da4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004da8:	6013      	str	r3, [r2, #0]
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004daa:	6803      	ldr	r3, [r0, #0]
 8004dac:	6819      	ldr	r1, [r3, #0]
 8004dae:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 8004db2:	6019      	str	r1, [r3, #0]
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004db4:	f8cd 8000 	str.w	r8, [sp]
 8004db8:	463b      	mov	r3, r7
 8004dba:	2200      	movs	r2, #0
 8004dbc:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004dc0:	f7ff feba 	bl	8004b38 <I2C_WaitOnFlagUntilTimeout>
 8004dc4:	b970      	cbnz	r0, 8004de4 <I2C_RequestMemoryRead+0x58>
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004dc6:	fa5f fa85 	uxtb.w	sl, r5
 8004dca:	6823      	ldr	r3, [r4, #0]
 8004dcc:	f005 05fe 	and.w	r5, r5, #254	; 0xfe
 8004dd0:	611d      	str	r5, [r3, #16]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004dd2:	4643      	mov	r3, r8
 8004dd4:	463a      	mov	r2, r7
 8004dd6:	4941      	ldr	r1, [pc, #260]	; (8004edc <I2C_RequestMemoryRead+0x150>)
 8004dd8:	4620      	mov	r0, r4
 8004dda:	f7ff feeb 	bl	8004bb4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004dde:	b168      	cbz	r0, 8004dfc <I2C_RequestMemoryRead+0x70>
    return HAL_ERROR;
 8004de0:	2001      	movs	r0, #1
 8004de2:	e008      	b.n	8004df6 <I2C_RequestMemoryRead+0x6a>
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004de4:	6823      	ldr	r3, [r4, #0]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	f413 7f80 	tst.w	r3, #256	; 0x100
 8004dec:	d002      	beq.n	8004df4 <I2C_RequestMemoryRead+0x68>
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004dee:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004df2:	6423      	str	r3, [r4, #64]	; 0x40
    return HAL_TIMEOUT;
 8004df4:	2003      	movs	r0, #3
}
 8004df6:	b004      	add	sp, #16
 8004df8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004dfc:	2300      	movs	r3, #0
 8004dfe:	9303      	str	r3, [sp, #12]
 8004e00:	6823      	ldr	r3, [r4, #0]
 8004e02:	695a      	ldr	r2, [r3, #20]
 8004e04:	9203      	str	r2, [sp, #12]
 8004e06:	699b      	ldr	r3, [r3, #24]
 8004e08:	9303      	str	r3, [sp, #12]
 8004e0a:	9b03      	ldr	r3, [sp, #12]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004e0c:	4642      	mov	r2, r8
 8004e0e:	4639      	mov	r1, r7
 8004e10:	4620      	mov	r0, r4
 8004e12:	f7ff ff24 	bl	8004c5e <I2C_WaitOnTXEFlagUntilTimeout>
 8004e16:	b980      	cbnz	r0, 8004e3a <I2C_RequestMemoryRead+0xae>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004e18:	f1b9 0f01 	cmp.w	r9, #1
 8004e1c:	d118      	bne.n	8004e50 <I2C_RequestMemoryRead+0xc4>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004e1e:	6823      	ldr	r3, [r4, #0]
 8004e20:	b2f6      	uxtb	r6, r6
 8004e22:	611e      	str	r6, [r3, #16]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004e24:	4642      	mov	r2, r8
 8004e26:	4639      	mov	r1, r7
 8004e28:	4620      	mov	r0, r4
 8004e2a:	f7ff ff18 	bl	8004c5e <I2C_WaitOnTXEFlagUntilTimeout>
 8004e2e:	b368      	cbz	r0, 8004e8c <I2C_RequestMemoryRead+0x100>
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004e30:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004e32:	2b04      	cmp	r3, #4
 8004e34:	d024      	beq.n	8004e80 <I2C_RequestMemoryRead+0xf4>
    return HAL_ERROR;
 8004e36:	2001      	movs	r0, #1
 8004e38:	e7dd      	b.n	8004df6 <I2C_RequestMemoryRead+0x6a>
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004e3a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004e3c:	2b04      	cmp	r3, #4
 8004e3e:	d001      	beq.n	8004e44 <I2C_RequestMemoryRead+0xb8>
    return HAL_ERROR;
 8004e40:	2001      	movs	r0, #1
 8004e42:	e7d8      	b.n	8004df6 <I2C_RequestMemoryRead+0x6a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004e44:	6822      	ldr	r2, [r4, #0]
 8004e46:	6813      	ldr	r3, [r2, #0]
 8004e48:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004e4c:	6013      	str	r3, [r2, #0]
 8004e4e:	e7f7      	b.n	8004e40 <I2C_RequestMemoryRead+0xb4>
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004e50:	6823      	ldr	r3, [r4, #0]
 8004e52:	0a32      	lsrs	r2, r6, #8
 8004e54:	611a      	str	r2, [r3, #16]
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004e56:	4642      	mov	r2, r8
 8004e58:	4639      	mov	r1, r7
 8004e5a:	4620      	mov	r0, r4
 8004e5c:	f7ff feff 	bl	8004c5e <I2C_WaitOnTXEFlagUntilTimeout>
 8004e60:	b918      	cbnz	r0, 8004e6a <I2C_RequestMemoryRead+0xde>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004e62:	6823      	ldr	r3, [r4, #0]
 8004e64:	b2f6      	uxtb	r6, r6
 8004e66:	611e      	str	r6, [r3, #16]
 8004e68:	e7dc      	b.n	8004e24 <I2C_RequestMemoryRead+0x98>
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004e6a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004e6c:	2b04      	cmp	r3, #4
 8004e6e:	d001      	beq.n	8004e74 <I2C_RequestMemoryRead+0xe8>
      return HAL_ERROR;
 8004e70:	2001      	movs	r0, #1
 8004e72:	e7c0      	b.n	8004df6 <I2C_RequestMemoryRead+0x6a>
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004e74:	6822      	ldr	r2, [r4, #0]
 8004e76:	6813      	ldr	r3, [r2, #0]
 8004e78:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004e7c:	6013      	str	r3, [r2, #0]
 8004e7e:	e7f7      	b.n	8004e70 <I2C_RequestMemoryRead+0xe4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004e80:	6822      	ldr	r2, [r4, #0]
 8004e82:	6813      	ldr	r3, [r2, #0]
 8004e84:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004e88:	6013      	str	r3, [r2, #0]
 8004e8a:	e7d4      	b.n	8004e36 <I2C_RequestMemoryRead+0xaa>
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004e8c:	6822      	ldr	r2, [r4, #0]
 8004e8e:	6813      	ldr	r3, [r2, #0]
 8004e90:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004e94:	6013      	str	r3, [r2, #0]
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004e96:	f8cd 8000 	str.w	r8, [sp]
 8004e9a:	463b      	mov	r3, r7
 8004e9c:	2200      	movs	r2, #0
 8004e9e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004ea2:	4620      	mov	r0, r4
 8004ea4:	f7ff fe48 	bl	8004b38 <I2C_WaitOnFlagUntilTimeout>
 8004ea8:	b968      	cbnz	r0, 8004ec6 <I2C_RequestMemoryRead+0x13a>
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8004eaa:	6822      	ldr	r2, [r4, #0]
 8004eac:	f04a 0301 	orr.w	r3, sl, #1
 8004eb0:	6113      	str	r3, [r2, #16]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004eb2:	4643      	mov	r3, r8
 8004eb4:	463a      	mov	r2, r7
 8004eb6:	4909      	ldr	r1, [pc, #36]	; (8004edc <I2C_RequestMemoryRead+0x150>)
 8004eb8:	4620      	mov	r0, r4
 8004eba:	f7ff fe7b 	bl	8004bb4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004ebe:	2800      	cmp	r0, #0
 8004ec0:	d099      	beq.n	8004df6 <I2C_RequestMemoryRead+0x6a>
    return HAL_ERROR;
 8004ec2:	2001      	movs	r0, #1
 8004ec4:	e797      	b.n	8004df6 <I2C_RequestMemoryRead+0x6a>
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004ec6:	6823      	ldr	r3, [r4, #0]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	f413 7f80 	tst.w	r3, #256	; 0x100
 8004ece:	d002      	beq.n	8004ed6 <I2C_RequestMemoryRead+0x14a>
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004ed0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004ed4:	6423      	str	r3, [r4, #64]	; 0x40
    return HAL_TIMEOUT;
 8004ed6:	2003      	movs	r0, #3
 8004ed8:	e78d      	b.n	8004df6 <I2C_RequestMemoryRead+0x6a>
 8004eda:	bf00      	nop
 8004edc:	00010002 	.word	0x00010002

08004ee0 <I2C_WaitOnBTFFlagUntilTimeout>:
{
 8004ee0:	b570      	push	{r4, r5, r6, lr}
 8004ee2:	4604      	mov	r4, r0
 8004ee4:	460d      	mov	r5, r1
 8004ee6:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004ee8:	6823      	ldr	r3, [r4, #0]
 8004eea:	695b      	ldr	r3, [r3, #20]
 8004eec:	f013 0f04 	tst.w	r3, #4
 8004ef0:	d11c      	bne.n	8004f2c <I2C_WaitOnBTFFlagUntilTimeout+0x4c>
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004ef2:	4620      	mov	r0, r4
 8004ef4:	f7ff fe07 	bl	8004b06 <I2C_IsAcknowledgeFailed>
 8004ef8:	b9d0      	cbnz	r0, 8004f30 <I2C_WaitOnBTFFlagUntilTimeout+0x50>
    if (Timeout != HAL_MAX_DELAY)
 8004efa:	f1b5 3fff 	cmp.w	r5, #4294967295
 8004efe:	d0f3      	beq.n	8004ee8 <I2C_WaitOnBTFFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004f00:	f7ff fc06 	bl	8004710 <HAL_GetTick>
 8004f04:	1b80      	subs	r0, r0, r6
 8004f06:	42a8      	cmp	r0, r5
 8004f08:	d801      	bhi.n	8004f0e <I2C_WaitOnBTFFlagUntilTimeout+0x2e>
 8004f0a:	2d00      	cmp	r5, #0
 8004f0c:	d1ec      	bne.n	8004ee8 <I2C_WaitOnBTFFlagUntilTimeout+0x8>
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004f0e:	2300      	movs	r3, #0
 8004f10:	6323      	str	r3, [r4, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004f12:	2220      	movs	r2, #32
 8004f14:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004f18:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004f1c:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8004f1e:	f042 0220 	orr.w	r2, r2, #32
 8004f22:	6422      	str	r2, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8004f24:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        return HAL_ERROR;
 8004f28:	2001      	movs	r0, #1
 8004f2a:	e000      	b.n	8004f2e <I2C_WaitOnBTFFlagUntilTimeout+0x4e>
  return HAL_OK;
 8004f2c:	2000      	movs	r0, #0
}
 8004f2e:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 8004f30:	2001      	movs	r0, #1
 8004f32:	e7fc      	b.n	8004f2e <I2C_WaitOnBTFFlagUntilTimeout+0x4e>

08004f34 <I2C_WaitOnRXNEFlagUntilTimeout>:
{
 8004f34:	b570      	push	{r4, r5, r6, lr}
 8004f36:	4605      	mov	r5, r0
 8004f38:	460c      	mov	r4, r1
 8004f3a:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004f3c:	682b      	ldr	r3, [r5, #0]
 8004f3e:	6959      	ldr	r1, [r3, #20]
 8004f40:	f011 0f40 	tst.w	r1, #64	; 0x40
 8004f44:	d129      	bne.n	8004f9a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8004f46:	6959      	ldr	r1, [r3, #20]
 8004f48:	f011 0f10 	tst.w	r1, #16
 8004f4c:	d115      	bne.n	8004f7a <I2C_WaitOnRXNEFlagUntilTimeout+0x46>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004f4e:	f7ff fbdf 	bl	8004710 <HAL_GetTick>
 8004f52:	1b80      	subs	r0, r0, r6
 8004f54:	42a0      	cmp	r0, r4
 8004f56:	d801      	bhi.n	8004f5c <I2C_WaitOnRXNEFlagUntilTimeout+0x28>
 8004f58:	2c00      	cmp	r4, #0
 8004f5a:	d1ef      	bne.n	8004f3c <I2C_WaitOnRXNEFlagUntilTimeout+0x8>
      hi2c->PreviousState       = I2C_STATE_NONE;
 8004f5c:	2300      	movs	r3, #0
 8004f5e:	632b      	str	r3, [r5, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004f60:	2220      	movs	r2, #32
 8004f62:	f885 203d 	strb.w	r2, [r5, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004f66:	f885 303e 	strb.w	r3, [r5, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004f6a:	6c2a      	ldr	r2, [r5, #64]	; 0x40
 8004f6c:	f042 0220 	orr.w	r2, r2, #32
 8004f70:	642a      	str	r2, [r5, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 8004f72:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
      return HAL_ERROR;
 8004f76:	2001      	movs	r0, #1
}
 8004f78:	bd70      	pop	{r4, r5, r6, pc}
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004f7a:	f06f 0210 	mvn.w	r2, #16
 8004f7e:	615a      	str	r2, [r3, #20]
      hi2c->PreviousState       = I2C_STATE_NONE;
 8004f80:	2300      	movs	r3, #0
 8004f82:	632b      	str	r3, [r5, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004f84:	2220      	movs	r2, #32
 8004f86:	f885 203d 	strb.w	r2, [r5, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004f8a:	f885 303e 	strb.w	r3, [r5, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8004f8e:	6c2a      	ldr	r2, [r5, #64]	; 0x40
 8004f90:	642a      	str	r2, [r5, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 8004f92:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
      return HAL_ERROR;
 8004f96:	2001      	movs	r0, #1
 8004f98:	e7ee      	b.n	8004f78 <I2C_WaitOnRXNEFlagUntilTimeout+0x44>
  return HAL_OK;
 8004f9a:	2000      	movs	r0, #0
 8004f9c:	e7ec      	b.n	8004f78 <I2C_WaitOnRXNEFlagUntilTimeout+0x44>

08004f9e <HAL_I2C_MspInit>:
}
 8004f9e:	4770      	bx	lr

08004fa0 <HAL_I2C_Init>:
  if (hi2c == NULL)
 8004fa0:	2800      	cmp	r0, #0
 8004fa2:	f000 80cc 	beq.w	800513e <HAL_I2C_Init+0x19e>
{
 8004fa6:	b570      	push	{r4, r5, r6, lr}
 8004fa8:	4604      	mov	r4, r0
  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004faa:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	d077      	beq.n	80050a2 <HAL_I2C_Init+0x102>
  hi2c->State = HAL_I2C_STATE_BUSY;
 8004fb2:	2324      	movs	r3, #36	; 0x24
 8004fb4:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_I2C_DISABLE(hi2c);
 8004fb8:	6822      	ldr	r2, [r4, #0]
 8004fba:	6813      	ldr	r3, [r2, #0]
 8004fbc:	f023 0301 	bic.w	r3, r3, #1
 8004fc0:	6013      	str	r3, [r2, #0]
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004fc2:	6822      	ldr	r2, [r4, #0]
 8004fc4:	6813      	ldr	r3, [r2, #0]
 8004fc6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004fca:	6013      	str	r3, [r2, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004fcc:	6822      	ldr	r2, [r4, #0]
 8004fce:	6813      	ldr	r3, [r2, #0]
 8004fd0:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004fd4:	6013      	str	r3, [r2, #0]
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004fd6:	f000 fe21 	bl	8005c1c <HAL_RCC_GetPCLK1Freq>
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004fda:	6862      	ldr	r2, [r4, #4]
 8004fdc:	4b5a      	ldr	r3, [pc, #360]	; (8005148 <HAL_I2C_Init+0x1a8>)
 8004fde:	429a      	cmp	r2, r3
 8004fe0:	d864      	bhi.n	80050ac <HAL_I2C_Init+0x10c>
 8004fe2:	4b5a      	ldr	r3, [pc, #360]	; (800514c <HAL_I2C_Init+0x1ac>)
 8004fe4:	4298      	cmp	r0, r3
 8004fe6:	bf8c      	ite	hi
 8004fe8:	2300      	movhi	r3, #0
 8004fea:	2301      	movls	r3, #1
 8004fec:	2b00      	cmp	r3, #0
 8004fee:	f040 80a8 	bne.w	8005142 <HAL_I2C_Init+0x1a2>
  freqrange = I2C_FREQRANGE(pclk1);
 8004ff2:	4957      	ldr	r1, [pc, #348]	; (8005150 <HAL_I2C_Init+0x1b0>)
 8004ff4:	fba1 3100 	umull	r3, r1, r1, r0
 8004ff8:	0c8b      	lsrs	r3, r1, #18
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004ffa:	6825      	ldr	r5, [r4, #0]
 8004ffc:	686a      	ldr	r2, [r5, #4]
 8004ffe:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 8005002:	ea42 4291 	orr.w	r2, r2, r1, lsr #18
 8005006:	606a      	str	r2, [r5, #4]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8005008:	6821      	ldr	r1, [r4, #0]
 800500a:	6a0a      	ldr	r2, [r1, #32]
 800500c:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 8005010:	6866      	ldr	r6, [r4, #4]
 8005012:	4d4d      	ldr	r5, [pc, #308]	; (8005148 <HAL_I2C_Init+0x1a8>)
 8005014:	42ae      	cmp	r6, r5
 8005016:	d84f      	bhi.n	80050b8 <HAL_I2C_Init+0x118>
 8005018:	3301      	adds	r3, #1
 800501a:	4313      	orrs	r3, r2
 800501c:	620b      	str	r3, [r1, #32]
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800501e:	6821      	ldr	r1, [r4, #0]
 8005020:	69ca      	ldr	r2, [r1, #28]
 8005022:	f422 424f 	bic.w	r2, r2, #52992	; 0xcf00
 8005026:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800502a:	6866      	ldr	r6, [r4, #4]
 800502c:	4b46      	ldr	r3, [pc, #280]	; (8005148 <HAL_I2C_Init+0x1a8>)
 800502e:	429e      	cmp	r6, r3
 8005030:	d84c      	bhi.n	80050cc <HAL_I2C_Init+0x12c>
 8005032:	1e43      	subs	r3, r0, #1
 8005034:	0076      	lsls	r6, r6, #1
 8005036:	fbb3 f3f6 	udiv	r3, r3, r6
 800503a:	3301      	adds	r3, #1
 800503c:	f640 70fc 	movw	r0, #4092	; 0xffc
 8005040:	4203      	tst	r3, r0
 8005042:	d078      	beq.n	8005136 <HAL_I2C_Init+0x196>
 8005044:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005048:	4313      	orrs	r3, r2
 800504a:	61cb      	str	r3, [r1, #28]
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800504c:	6821      	ldr	r1, [r4, #0]
 800504e:	680b      	ldr	r3, [r1, #0]
 8005050:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8005054:	69e2      	ldr	r2, [r4, #28]
 8005056:	6a20      	ldr	r0, [r4, #32]
 8005058:	4302      	orrs	r2, r0
 800505a:	4313      	orrs	r3, r2
 800505c:	600b      	str	r3, [r1, #0]
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800505e:	6821      	ldr	r1, [r4, #0]
 8005060:	688b      	ldr	r3, [r1, #8]
 8005062:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8005066:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800506a:	6922      	ldr	r2, [r4, #16]
 800506c:	68e0      	ldr	r0, [r4, #12]
 800506e:	4302      	orrs	r2, r0
 8005070:	4313      	orrs	r3, r2
 8005072:	608b      	str	r3, [r1, #8]
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8005074:	6821      	ldr	r1, [r4, #0]
 8005076:	68cb      	ldr	r3, [r1, #12]
 8005078:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800507c:	6962      	ldr	r2, [r4, #20]
 800507e:	69a0      	ldr	r0, [r4, #24]
 8005080:	4302      	orrs	r2, r0
 8005082:	4313      	orrs	r3, r2
 8005084:	60cb      	str	r3, [r1, #12]
  __HAL_I2C_ENABLE(hi2c);
 8005086:	6822      	ldr	r2, [r4, #0]
 8005088:	6813      	ldr	r3, [r2, #0]
 800508a:	f043 0301 	orr.w	r3, r3, #1
 800508e:	6013      	str	r3, [r2, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005090:	2000      	movs	r0, #0
 8005092:	6420      	str	r0, [r4, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8005094:	2320      	movs	r3, #32
 8005096:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800509a:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800509c:	f884 003e 	strb.w	r0, [r4, #62]	; 0x3e
}
 80050a0:	bd70      	pop	{r4, r5, r6, pc}
    hi2c->Lock = HAL_UNLOCKED;
 80050a2:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_I2C_MspInit(hi2c);
 80050a6:	f7ff ff7a 	bl	8004f9e <HAL_I2C_MspInit>
 80050aa:	e782      	b.n	8004fb2 <HAL_I2C_Init+0x12>
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80050ac:	4b29      	ldr	r3, [pc, #164]	; (8005154 <HAL_I2C_Init+0x1b4>)
 80050ae:	4298      	cmp	r0, r3
 80050b0:	bf8c      	ite	hi
 80050b2:	2300      	movhi	r3, #0
 80050b4:	2301      	movls	r3, #1
 80050b6:	e799      	b.n	8004fec <HAL_I2C_Init+0x4c>
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80050b8:	f44f 7596 	mov.w	r5, #300	; 0x12c
 80050bc:	fb05 f303 	mul.w	r3, r5, r3
 80050c0:	4d25      	ldr	r5, [pc, #148]	; (8005158 <HAL_I2C_Init+0x1b8>)
 80050c2:	fba5 5303 	umull	r5, r3, r5, r3
 80050c6:	099b      	lsrs	r3, r3, #6
 80050c8:	3301      	adds	r3, #1
 80050ca:	e7a6      	b.n	800501a <HAL_I2C_Init+0x7a>
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80050cc:	68a3      	ldr	r3, [r4, #8]
 80050ce:	b9bb      	cbnz	r3, 8005100 <HAL_I2C_Init+0x160>
 80050d0:	1e45      	subs	r5, r0, #1
 80050d2:	eb06 0c46 	add.w	ip, r6, r6, lsl #1
 80050d6:	fbb5 f5fc 	udiv	r5, r5, ip
 80050da:	3501      	adds	r5, #1
 80050dc:	f3c5 050b 	ubfx	r5, r5, #0, #12
 80050e0:	fab5 f585 	clz	r5, r5
 80050e4:	096d      	lsrs	r5, r5, #5
 80050e6:	bb45      	cbnz	r5, 800513a <HAL_I2C_Init+0x19a>
 80050e8:	b9c3      	cbnz	r3, 800511c <HAL_I2C_Init+0x17c>
 80050ea:	3801      	subs	r0, #1
 80050ec:	eb06 0346 	add.w	r3, r6, r6, lsl #1
 80050f0:	fbb0 f3f3 	udiv	r3, r0, r3
 80050f4:	3301      	adds	r3, #1
 80050f6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80050fa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80050fe:	e7a3      	b.n	8005048 <HAL_I2C_Init+0xa8>
 8005100:	1e45      	subs	r5, r0, #1
 8005102:	eb06 0c86 	add.w	ip, r6, r6, lsl #2
 8005106:	eb0c 0c8c 	add.w	ip, ip, ip, lsl #2
 800510a:	fbb5 f5fc 	udiv	r5, r5, ip
 800510e:	3501      	adds	r5, #1
 8005110:	f3c5 050b 	ubfx	r5, r5, #0, #12
 8005114:	fab5 f585 	clz	r5, r5
 8005118:	096d      	lsrs	r5, r5, #5
 800511a:	e7e4      	b.n	80050e6 <HAL_I2C_Init+0x146>
 800511c:	3801      	subs	r0, #1
 800511e:	eb06 0386 	add.w	r3, r6, r6, lsl #2
 8005122:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8005126:	fbb0 f3f3 	udiv	r3, r0, r3
 800512a:	3301      	adds	r3, #1
 800512c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005130:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005134:	e788      	b.n	8005048 <HAL_I2C_Init+0xa8>
 8005136:	2304      	movs	r3, #4
 8005138:	e786      	b.n	8005048 <HAL_I2C_Init+0xa8>
 800513a:	2301      	movs	r3, #1
 800513c:	e784      	b.n	8005048 <HAL_I2C_Init+0xa8>
    return HAL_ERROR;
 800513e:	2001      	movs	r0, #1
}
 8005140:	4770      	bx	lr
    return HAL_ERROR;
 8005142:	2001      	movs	r0, #1
 8005144:	e7ac      	b.n	80050a0 <HAL_I2C_Init+0x100>
 8005146:	bf00      	nop
 8005148:	000186a0 	.word	0x000186a0
 800514c:	001e847f 	.word	0x001e847f
 8005150:	431bde83 	.word	0x431bde83
 8005154:	003d08ff 	.word	0x003d08ff
 8005158:	10624dd3 	.word	0x10624dd3

0800515c <HAL_I2C_MspDeInit>:
}
 800515c:	4770      	bx	lr

0800515e <HAL_I2C_DeInit>:
  if (hi2c == NULL)
 800515e:	b1a8      	cbz	r0, 800518c <HAL_I2C_DeInit+0x2e>
{
 8005160:	b510      	push	{r4, lr}
 8005162:	4604      	mov	r4, r0
  hi2c->State = HAL_I2C_STATE_BUSY;
 8005164:	2324      	movs	r3, #36	; 0x24
 8005166:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  __HAL_I2C_DISABLE(hi2c);
 800516a:	6802      	ldr	r2, [r0, #0]
 800516c:	6813      	ldr	r3, [r2, #0]
 800516e:	f023 0301 	bic.w	r3, r3, #1
 8005172:	6013      	str	r3, [r2, #0]
  HAL_I2C_MspDeInit(hi2c);
 8005174:	f7ff fff2 	bl	800515c <HAL_I2C_MspDeInit>
  hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8005178:	2000      	movs	r0, #0
 800517a:	6420      	str	r0, [r4, #64]	; 0x40
  hi2c->State         = HAL_I2C_STATE_RESET;
 800517c:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8005180:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005182:	f884 003e 	strb.w	r0, [r4, #62]	; 0x3e
  __HAL_UNLOCK(hi2c);
 8005186:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 800518a:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 800518c:	2001      	movs	r0, #1
}
 800518e:	4770      	bx	lr

08005190 <HAL_I2C_Mem_Write>:
{
 8005190:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005194:	b083      	sub	sp, #12
 8005196:	4604      	mov	r4, r0
 8005198:	460f      	mov	r7, r1
 800519a:	4690      	mov	r8, r2
 800519c:	4699      	mov	r9, r3
 800519e:	9e0c      	ldr	r6, [sp, #48]	; 0x30
  uint32_t tickstart = HAL_GetTick();
 80051a0:	f7ff fab6 	bl	8004710 <HAL_GetTick>
 80051a4:	4605      	mov	r5, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 80051a6:	f894 003d 	ldrb.w	r0, [r4, #61]	; 0x3d
 80051aa:	b2c0      	uxtb	r0, r0
 80051ac:	2820      	cmp	r0, #32
 80051ae:	d003      	beq.n	80051b8 <HAL_I2C_Mem_Write+0x28>
    return HAL_BUSY;
 80051b0:	2002      	movs	r0, #2
}
 80051b2:	b003      	add	sp, #12
 80051b4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80051b8:	9500      	str	r5, [sp, #0]
 80051ba:	2319      	movs	r3, #25
 80051bc:	2201      	movs	r2, #1
 80051be:	494b      	ldr	r1, [pc, #300]	; (80052ec <HAL_I2C_Mem_Write+0x15c>)
 80051c0:	4620      	mov	r0, r4
 80051c2:	f7ff fcb9 	bl	8004b38 <I2C_WaitOnFlagUntilTimeout>
 80051c6:	2800      	cmp	r0, #0
 80051c8:	f040 8089 	bne.w	80052de <HAL_I2C_Mem_Write+0x14e>
    __HAL_LOCK(hi2c);
 80051cc:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 80051d0:	2b01      	cmp	r3, #1
 80051d2:	f000 8086 	beq.w	80052e2 <HAL_I2C_Mem_Write+0x152>
 80051d6:	2301      	movs	r3, #1
 80051d8:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80051dc:	6823      	ldr	r3, [r4, #0]
 80051de:	681a      	ldr	r2, [r3, #0]
 80051e0:	f012 0f01 	tst.w	r2, #1
 80051e4:	d103      	bne.n	80051ee <HAL_I2C_Mem_Write+0x5e>
      __HAL_I2C_ENABLE(hi2c);
 80051e6:	681a      	ldr	r2, [r3, #0]
 80051e8:	f042 0201 	orr.w	r2, r2, #1
 80051ec:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80051ee:	6822      	ldr	r2, [r4, #0]
 80051f0:	6813      	ldr	r3, [r2, #0]
 80051f2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80051f6:	6013      	str	r3, [r2, #0]
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80051f8:	2321      	movs	r3, #33	; 0x21
 80051fa:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80051fe:	2340      	movs	r3, #64	; 0x40
 8005200:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005204:	2300      	movs	r3, #0
 8005206:	6423      	str	r3, [r4, #64]	; 0x40
    hi2c->pBuffPtr    = pData;
 8005208:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800520a:	6263      	str	r3, [r4, #36]	; 0x24
    hi2c->XferCount   = Size;
 800520c:	f8bd 302c 	ldrh.w	r3, [sp, #44]	; 0x2c
 8005210:	8563      	strh	r3, [r4, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005212:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8005214:	8523      	strh	r3, [r4, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005216:	4b36      	ldr	r3, [pc, #216]	; (80052f0 <HAL_I2C_Mem_Write+0x160>)
 8005218:	62e3      	str	r3, [r4, #44]	; 0x2c
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800521a:	9501      	str	r5, [sp, #4]
 800521c:	9600      	str	r6, [sp, #0]
 800521e:	464b      	mov	r3, r9
 8005220:	4642      	mov	r2, r8
 8005222:	4639      	mov	r1, r7
 8005224:	4620      	mov	r0, r4
 8005226:	f7ff fd45 	bl	8004cb4 <I2C_RequestMemoryWrite>
 800522a:	2800      	cmp	r0, #0
 800522c:	d15b      	bne.n	80052e6 <HAL_I2C_Mem_Write+0x156>
    while (hi2c->XferSize > 0U)
 800522e:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8005230:	2b00      	cmp	r3, #0
 8005232:	d035      	beq.n	80052a0 <HAL_I2C_Mem_Write+0x110>
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005234:	462a      	mov	r2, r5
 8005236:	4631      	mov	r1, r6
 8005238:	4620      	mov	r0, r4
 800523a:	f7ff fd10 	bl	8004c5e <I2C_WaitOnTXEFlagUntilTimeout>
 800523e:	bb20      	cbnz	r0, 800528a <HAL_I2C_Mem_Write+0xfa>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005240:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8005242:	6823      	ldr	r3, [r4, #0]
 8005244:	7812      	ldrb	r2, [r2, #0]
 8005246:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8005248:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800524a:	1c53      	adds	r3, r2, #1
 800524c:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferSize--;
 800524e:	8d21      	ldrh	r1, [r4, #40]	; 0x28
 8005250:	3901      	subs	r1, #1
 8005252:	b289      	uxth	r1, r1
 8005254:	8521      	strh	r1, [r4, #40]	; 0x28
      hi2c->XferCount--;
 8005256:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8005258:	b29b      	uxth	r3, r3
 800525a:	3b01      	subs	r3, #1
 800525c:	b29b      	uxth	r3, r3
 800525e:	8563      	strh	r3, [r4, #42]	; 0x2a
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8005260:	6823      	ldr	r3, [r4, #0]
 8005262:	6958      	ldr	r0, [r3, #20]
 8005264:	f010 0f04 	tst.w	r0, #4
 8005268:	d0e1      	beq.n	800522e <HAL_I2C_Mem_Write+0x9e>
 800526a:	2900      	cmp	r1, #0
 800526c:	d0df      	beq.n	800522e <HAL_I2C_Mem_Write+0x9e>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800526e:	7852      	ldrb	r2, [r2, #1]
 8005270:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8005272:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005274:	3301      	adds	r3, #1
 8005276:	6263      	str	r3, [r4, #36]	; 0x24
        hi2c->XferSize--;
 8005278:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 800527a:	3b01      	subs	r3, #1
 800527c:	8523      	strh	r3, [r4, #40]	; 0x28
        hi2c->XferCount--;
 800527e:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8005280:	b29b      	uxth	r3, r3
 8005282:	3b01      	subs	r3, #1
 8005284:	b29b      	uxth	r3, r3
 8005286:	8563      	strh	r3, [r4, #42]	; 0x2a
 8005288:	e7d1      	b.n	800522e <HAL_I2C_Mem_Write+0x9e>
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800528a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800528c:	2b04      	cmp	r3, #4
 800528e:	d001      	beq.n	8005294 <HAL_I2C_Mem_Write+0x104>
        return HAL_ERROR;
 8005290:	2001      	movs	r0, #1
 8005292:	e78e      	b.n	80051b2 <HAL_I2C_Mem_Write+0x22>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005294:	6822      	ldr	r2, [r4, #0]
 8005296:	6813      	ldr	r3, [r2, #0]
 8005298:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800529c:	6013      	str	r3, [r2, #0]
 800529e:	e7f7      	b.n	8005290 <HAL_I2C_Mem_Write+0x100>
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80052a0:	462a      	mov	r2, r5
 80052a2:	4631      	mov	r1, r6
 80052a4:	4620      	mov	r0, r4
 80052a6:	f7ff fe1b 	bl	8004ee0 <I2C_WaitOnBTFFlagUntilTimeout>
 80052aa:	b150      	cbz	r0, 80052c2 <HAL_I2C_Mem_Write+0x132>
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80052ac:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80052ae:	2b04      	cmp	r3, #4
 80052b0:	d001      	beq.n	80052b6 <HAL_I2C_Mem_Write+0x126>
      return HAL_ERROR;
 80052b2:	2001      	movs	r0, #1
 80052b4:	e77d      	b.n	80051b2 <HAL_I2C_Mem_Write+0x22>
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80052b6:	6822      	ldr	r2, [r4, #0]
 80052b8:	6813      	ldr	r3, [r2, #0]
 80052ba:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80052be:	6013      	str	r3, [r2, #0]
 80052c0:	e7f7      	b.n	80052b2 <HAL_I2C_Mem_Write+0x122>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80052c2:	6822      	ldr	r2, [r4, #0]
 80052c4:	6813      	ldr	r3, [r2, #0]
 80052c6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80052ca:	6013      	str	r3, [r2, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 80052cc:	2320      	movs	r3, #32
 80052ce:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80052d2:	2300      	movs	r3, #0
 80052d4:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    __HAL_UNLOCK(hi2c);
 80052d8:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    return HAL_OK;
 80052dc:	e769      	b.n	80051b2 <HAL_I2C_Mem_Write+0x22>
      return HAL_BUSY;
 80052de:	2002      	movs	r0, #2
 80052e0:	e767      	b.n	80051b2 <HAL_I2C_Mem_Write+0x22>
    __HAL_LOCK(hi2c);
 80052e2:	2002      	movs	r0, #2
 80052e4:	e765      	b.n	80051b2 <HAL_I2C_Mem_Write+0x22>
      return HAL_ERROR;
 80052e6:	2001      	movs	r0, #1
 80052e8:	e763      	b.n	80051b2 <HAL_I2C_Mem_Write+0x22>
 80052ea:	bf00      	nop
 80052ec:	00100002 	.word	0x00100002
 80052f0:	ffff0000 	.word	0xffff0000

080052f4 <HAL_I2C_Mem_Read>:
{
 80052f4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80052f8:	b087      	sub	sp, #28
 80052fa:	4604      	mov	r4, r0
 80052fc:	460f      	mov	r7, r1
 80052fe:	4690      	mov	r8, r2
 8005300:	4699      	mov	r9, r3
 8005302:	9e10      	ldr	r6, [sp, #64]	; 0x40
  uint32_t tickstart = HAL_GetTick();
 8005304:	f7ff fa04 	bl	8004710 <HAL_GetTick>
 8005308:	4605      	mov	r5, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 800530a:	f894 003d 	ldrb.w	r0, [r4, #61]	; 0x3d
 800530e:	b2c0      	uxtb	r0, r0
 8005310:	2820      	cmp	r0, #32
 8005312:	d004      	beq.n	800531e <HAL_I2C_Mem_Read+0x2a>
    return HAL_BUSY;
 8005314:	2702      	movs	r7, #2
}
 8005316:	4638      	mov	r0, r7
 8005318:	b007      	add	sp, #28
 800531a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800531e:	9500      	str	r5, [sp, #0]
 8005320:	2319      	movs	r3, #25
 8005322:	2201      	movs	r2, #1
 8005324:	4988      	ldr	r1, [pc, #544]	; (8005548 <HAL_I2C_Mem_Read+0x254>)
 8005326:	4620      	mov	r0, r4
 8005328:	f7ff fc06 	bl	8004b38 <I2C_WaitOnFlagUntilTimeout>
 800532c:	2800      	cmp	r0, #0
 800532e:	f040 8143 	bne.w	80055b8 <HAL_I2C_Mem_Read+0x2c4>
    __HAL_LOCK(hi2c);
 8005332:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 8005336:	2b01      	cmp	r3, #1
 8005338:	f000 8140 	beq.w	80055bc <HAL_I2C_Mem_Read+0x2c8>
 800533c:	2301      	movs	r3, #1
 800533e:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005342:	6823      	ldr	r3, [r4, #0]
 8005344:	681a      	ldr	r2, [r3, #0]
 8005346:	f012 0f01 	tst.w	r2, #1
 800534a:	d103      	bne.n	8005354 <HAL_I2C_Mem_Read+0x60>
      __HAL_I2C_ENABLE(hi2c);
 800534c:	681a      	ldr	r2, [r3, #0]
 800534e:	f042 0201 	orr.w	r2, r2, #1
 8005352:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005354:	6822      	ldr	r2, [r4, #0]
 8005356:	6813      	ldr	r3, [r2, #0]
 8005358:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800535c:	6013      	str	r3, [r2, #0]
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800535e:	2322      	movs	r3, #34	; 0x22
 8005360:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005364:	2340      	movs	r3, #64	; 0x40
 8005366:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800536a:	2300      	movs	r3, #0
 800536c:	6423      	str	r3, [r4, #64]	; 0x40
    hi2c->pBuffPtr    = pData;
 800536e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005370:	6263      	str	r3, [r4, #36]	; 0x24
    hi2c->XferCount   = Size;
 8005372:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
 8005376:	8563      	strh	r3, [r4, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005378:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800537a:	8523      	strh	r3, [r4, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800537c:	4b73      	ldr	r3, [pc, #460]	; (800554c <HAL_I2C_Mem_Read+0x258>)
 800537e:	62e3      	str	r3, [r4, #44]	; 0x2c
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005380:	9501      	str	r5, [sp, #4]
 8005382:	9600      	str	r6, [sp, #0]
 8005384:	464b      	mov	r3, r9
 8005386:	4642      	mov	r2, r8
 8005388:	4639      	mov	r1, r7
 800538a:	4620      	mov	r0, r4
 800538c:	f7ff fcfe 	bl	8004d8c <I2C_RequestMemoryRead>
 8005390:	4607      	mov	r7, r0
 8005392:	2800      	cmp	r0, #0
 8005394:	f040 8114 	bne.w	80055c0 <HAL_I2C_Mem_Read+0x2cc>
    if (hi2c->XferSize == 0U)
 8005398:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 800539a:	b95b      	cbnz	r3, 80053b4 <HAL_I2C_Mem_Read+0xc0>
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800539c:	9302      	str	r3, [sp, #8]
 800539e:	6823      	ldr	r3, [r4, #0]
 80053a0:	695a      	ldr	r2, [r3, #20]
 80053a2:	9202      	str	r2, [sp, #8]
 80053a4:	699a      	ldr	r2, [r3, #24]
 80053a6:	9202      	str	r2, [sp, #8]
 80053a8:	9a02      	ldr	r2, [sp, #8]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80053aa:	681a      	ldr	r2, [r3, #0]
 80053ac:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80053b0:	601a      	str	r2, [r3, #0]
 80053b2:	e075      	b.n	80054a0 <HAL_I2C_Mem_Read+0x1ac>
    else if (hi2c->XferSize == 1U)
 80053b4:	2b01      	cmp	r3, #1
 80053b6:	d00a      	beq.n	80053ce <HAL_I2C_Mem_Read+0xda>
    else if (hi2c->XferSize == 2U)
 80053b8:	2b02      	cmp	r3, #2
 80053ba:	d01a      	beq.n	80053f2 <HAL_I2C_Mem_Read+0xfe>
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80053bc:	2300      	movs	r3, #0
 80053be:	9305      	str	r3, [sp, #20]
 80053c0:	6823      	ldr	r3, [r4, #0]
 80053c2:	695a      	ldr	r2, [r3, #20]
 80053c4:	9205      	str	r2, [sp, #20]
 80053c6:	699b      	ldr	r3, [r3, #24]
 80053c8:	9305      	str	r3, [sp, #20]
 80053ca:	9b05      	ldr	r3, [sp, #20]
 80053cc:	e068      	b.n	80054a0 <HAL_I2C_Mem_Read+0x1ac>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80053ce:	6822      	ldr	r2, [r4, #0]
 80053d0:	6813      	ldr	r3, [r2, #0]
 80053d2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80053d6:	6013      	str	r3, [r2, #0]
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80053d8:	2300      	movs	r3, #0
 80053da:	9303      	str	r3, [sp, #12]
 80053dc:	6823      	ldr	r3, [r4, #0]
 80053de:	695a      	ldr	r2, [r3, #20]
 80053e0:	9203      	str	r2, [sp, #12]
 80053e2:	699a      	ldr	r2, [r3, #24]
 80053e4:	9203      	str	r2, [sp, #12]
 80053e6:	9a03      	ldr	r2, [sp, #12]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80053e8:	681a      	ldr	r2, [r3, #0]
 80053ea:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80053ee:	601a      	str	r2, [r3, #0]
 80053f0:	e056      	b.n	80054a0 <HAL_I2C_Mem_Read+0x1ac>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80053f2:	6822      	ldr	r2, [r4, #0]
 80053f4:	6813      	ldr	r3, [r2, #0]
 80053f6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80053fa:	6013      	str	r3, [r2, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80053fc:	6822      	ldr	r2, [r4, #0]
 80053fe:	6813      	ldr	r3, [r2, #0]
 8005400:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8005404:	6013      	str	r3, [r2, #0]
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005406:	2300      	movs	r3, #0
 8005408:	9304      	str	r3, [sp, #16]
 800540a:	6823      	ldr	r3, [r4, #0]
 800540c:	695a      	ldr	r2, [r3, #20]
 800540e:	9204      	str	r2, [sp, #16]
 8005410:	699b      	ldr	r3, [r3, #24]
 8005412:	9304      	str	r3, [sp, #16]
 8005414:	9b04      	ldr	r3, [sp, #16]
 8005416:	e043      	b.n	80054a0 <HAL_I2C_Mem_Read+0x1ac>
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005418:	462a      	mov	r2, r5
 800541a:	4631      	mov	r1, r6
 800541c:	4620      	mov	r0, r4
 800541e:	f7ff fd89 	bl	8004f34 <I2C_WaitOnRXNEFlagUntilTimeout>
 8005422:	2800      	cmp	r0, #0
 8005424:	f040 80ce 	bne.w	80055c4 <HAL_I2C_Mem_Read+0x2d0>
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005428:	6823      	ldr	r3, [r4, #0]
 800542a:	691a      	ldr	r2, [r3, #16]
 800542c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800542e:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 8005430:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005432:	3301      	adds	r3, #1
 8005434:	6263      	str	r3, [r4, #36]	; 0x24
          hi2c->XferSize--;
 8005436:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8005438:	3b01      	subs	r3, #1
 800543a:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 800543c:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800543e:	b29b      	uxth	r3, r3
 8005440:	3b01      	subs	r3, #1
 8005442:	b29b      	uxth	r3, r3
 8005444:	8563      	strh	r3, [r4, #42]	; 0x2a
 8005446:	e02b      	b.n	80054a0 <HAL_I2C_Mem_Read+0x1ac>
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005448:	9500      	str	r5, [sp, #0]
 800544a:	4633      	mov	r3, r6
 800544c:	2200      	movs	r2, #0
 800544e:	4940      	ldr	r1, [pc, #256]	; (8005550 <HAL_I2C_Mem_Read+0x25c>)
 8005450:	4620      	mov	r0, r4
 8005452:	f7ff fb71 	bl	8004b38 <I2C_WaitOnFlagUntilTimeout>
 8005456:	2800      	cmp	r0, #0
 8005458:	f040 80b6 	bne.w	80055c8 <HAL_I2C_Mem_Read+0x2d4>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800545c:	6822      	ldr	r2, [r4, #0]
 800545e:	6813      	ldr	r3, [r2, #0]
 8005460:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005464:	6013      	str	r3, [r2, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005466:	6823      	ldr	r3, [r4, #0]
 8005468:	691a      	ldr	r2, [r3, #16]
 800546a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800546c:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 800546e:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8005470:	1c53      	adds	r3, r2, #1
 8005472:	6263      	str	r3, [r4, #36]	; 0x24
          hi2c->XferSize--;
 8005474:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8005476:	3b01      	subs	r3, #1
 8005478:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 800547a:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800547c:	b29b      	uxth	r3, r3
 800547e:	3b01      	subs	r3, #1
 8005480:	b29b      	uxth	r3, r3
 8005482:	8563      	strh	r3, [r4, #42]	; 0x2a
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005484:	6823      	ldr	r3, [r4, #0]
 8005486:	691b      	ldr	r3, [r3, #16]
 8005488:	7053      	strb	r3, [r2, #1]
          hi2c->pBuffPtr++;
 800548a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800548c:	3301      	adds	r3, #1
 800548e:	6263      	str	r3, [r4, #36]	; 0x24
          hi2c->XferSize--;
 8005490:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8005492:	3b01      	subs	r3, #1
 8005494:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 8005496:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8005498:	b29b      	uxth	r3, r3
 800549a:	3b01      	subs	r3, #1
 800549c:	b29b      	uxth	r3, r3
 800549e:	8563      	strh	r3, [r4, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80054a0:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	d07f      	beq.n	80055a6 <HAL_I2C_Mem_Read+0x2b2>
      if (hi2c->XferSize <= 3U)
 80054a6:	2b03      	cmp	r3, #3
 80054a8:	d854      	bhi.n	8005554 <HAL_I2C_Mem_Read+0x260>
        if (hi2c->XferSize == 1U)
 80054aa:	2b01      	cmp	r3, #1
 80054ac:	d0b4      	beq.n	8005418 <HAL_I2C_Mem_Read+0x124>
        else if (hi2c->XferSize == 2U)
 80054ae:	2b02      	cmp	r3, #2
 80054b0:	d0ca      	beq.n	8005448 <HAL_I2C_Mem_Read+0x154>
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80054b2:	9500      	str	r5, [sp, #0]
 80054b4:	4633      	mov	r3, r6
 80054b6:	2200      	movs	r2, #0
 80054b8:	4925      	ldr	r1, [pc, #148]	; (8005550 <HAL_I2C_Mem_Read+0x25c>)
 80054ba:	4620      	mov	r0, r4
 80054bc:	f7ff fb3c 	bl	8004b38 <I2C_WaitOnFlagUntilTimeout>
 80054c0:	2800      	cmp	r0, #0
 80054c2:	f040 8083 	bne.w	80055cc <HAL_I2C_Mem_Read+0x2d8>
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80054c6:	6822      	ldr	r2, [r4, #0]
 80054c8:	6813      	ldr	r3, [r2, #0]
 80054ca:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80054ce:	6013      	str	r3, [r2, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80054d0:	6823      	ldr	r3, [r4, #0]
 80054d2:	691a      	ldr	r2, [r3, #16]
 80054d4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80054d6:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 80054d8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80054da:	3301      	adds	r3, #1
 80054dc:	6263      	str	r3, [r4, #36]	; 0x24
          hi2c->XferSize--;
 80054de:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 80054e0:	3b01      	subs	r3, #1
 80054e2:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 80054e4:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80054e6:	b29b      	uxth	r3, r3
 80054e8:	3b01      	subs	r3, #1
 80054ea:	b29b      	uxth	r3, r3
 80054ec:	8563      	strh	r3, [r4, #42]	; 0x2a
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80054ee:	9500      	str	r5, [sp, #0]
 80054f0:	4633      	mov	r3, r6
 80054f2:	2200      	movs	r2, #0
 80054f4:	4916      	ldr	r1, [pc, #88]	; (8005550 <HAL_I2C_Mem_Read+0x25c>)
 80054f6:	4620      	mov	r0, r4
 80054f8:	f7ff fb1e 	bl	8004b38 <I2C_WaitOnFlagUntilTimeout>
 80054fc:	2800      	cmp	r0, #0
 80054fe:	d167      	bne.n	80055d0 <HAL_I2C_Mem_Read+0x2dc>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005500:	6822      	ldr	r2, [r4, #0]
 8005502:	6813      	ldr	r3, [r2, #0]
 8005504:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005508:	6013      	str	r3, [r2, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800550a:	6823      	ldr	r3, [r4, #0]
 800550c:	691a      	ldr	r2, [r3, #16]
 800550e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005510:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 8005512:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8005514:	1c53      	adds	r3, r2, #1
 8005516:	6263      	str	r3, [r4, #36]	; 0x24
          hi2c->XferSize--;
 8005518:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 800551a:	3b01      	subs	r3, #1
 800551c:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 800551e:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8005520:	b29b      	uxth	r3, r3
 8005522:	3b01      	subs	r3, #1
 8005524:	b29b      	uxth	r3, r3
 8005526:	8563      	strh	r3, [r4, #42]	; 0x2a
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005528:	6823      	ldr	r3, [r4, #0]
 800552a:	691b      	ldr	r3, [r3, #16]
 800552c:	7053      	strb	r3, [r2, #1]
          hi2c->pBuffPtr++;
 800552e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005530:	3301      	adds	r3, #1
 8005532:	6263      	str	r3, [r4, #36]	; 0x24
          hi2c->XferSize--;
 8005534:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8005536:	3b01      	subs	r3, #1
 8005538:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 800553a:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800553c:	b29b      	uxth	r3, r3
 800553e:	3b01      	subs	r3, #1
 8005540:	b29b      	uxth	r3, r3
 8005542:	8563      	strh	r3, [r4, #42]	; 0x2a
 8005544:	e7ac      	b.n	80054a0 <HAL_I2C_Mem_Read+0x1ac>
 8005546:	bf00      	nop
 8005548:	00100002 	.word	0x00100002
 800554c:	ffff0000 	.word	0xffff0000
 8005550:	00010004 	.word	0x00010004
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005554:	462a      	mov	r2, r5
 8005556:	4631      	mov	r1, r6
 8005558:	4620      	mov	r0, r4
 800555a:	f7ff fceb 	bl	8004f34 <I2C_WaitOnRXNEFlagUntilTimeout>
 800555e:	2800      	cmp	r0, #0
 8005560:	d138      	bne.n	80055d4 <HAL_I2C_Mem_Read+0x2e0>
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005562:	6823      	ldr	r3, [r4, #0]
 8005564:	691a      	ldr	r2, [r3, #16]
 8005566:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005568:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 800556a:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800556c:	1c53      	adds	r3, r2, #1
 800556e:	6263      	str	r3, [r4, #36]	; 0x24
        hi2c->XferSize--;
 8005570:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8005572:	3b01      	subs	r3, #1
 8005574:	8523      	strh	r3, [r4, #40]	; 0x28
        hi2c->XferCount--;
 8005576:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8005578:	b29b      	uxth	r3, r3
 800557a:	3b01      	subs	r3, #1
 800557c:	b29b      	uxth	r3, r3
 800557e:	8563      	strh	r3, [r4, #42]	; 0x2a
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8005580:	6823      	ldr	r3, [r4, #0]
 8005582:	6959      	ldr	r1, [r3, #20]
 8005584:	f011 0f04 	tst.w	r1, #4
 8005588:	d08a      	beq.n	80054a0 <HAL_I2C_Mem_Read+0x1ac>
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800558a:	691b      	ldr	r3, [r3, #16]
 800558c:	7053      	strb	r3, [r2, #1]
          hi2c->pBuffPtr++;
 800558e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005590:	3301      	adds	r3, #1
 8005592:	6263      	str	r3, [r4, #36]	; 0x24
          hi2c->XferSize--;
 8005594:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8005596:	3b01      	subs	r3, #1
 8005598:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 800559a:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800559c:	b29b      	uxth	r3, r3
 800559e:	3b01      	subs	r3, #1
 80055a0:	b29b      	uxth	r3, r3
 80055a2:	8563      	strh	r3, [r4, #42]	; 0x2a
 80055a4:	e77c      	b.n	80054a0 <HAL_I2C_Mem_Read+0x1ac>
    hi2c->State = HAL_I2C_STATE_READY;
 80055a6:	2320      	movs	r3, #32
 80055a8:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80055ac:	2300      	movs	r3, #0
 80055ae:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    __HAL_UNLOCK(hi2c);
 80055b2:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    return HAL_OK;
 80055b6:	e6ae      	b.n	8005316 <HAL_I2C_Mem_Read+0x22>
      return HAL_BUSY;
 80055b8:	2702      	movs	r7, #2
 80055ba:	e6ac      	b.n	8005316 <HAL_I2C_Mem_Read+0x22>
    __HAL_LOCK(hi2c);
 80055bc:	2702      	movs	r7, #2
 80055be:	e6aa      	b.n	8005316 <HAL_I2C_Mem_Read+0x22>
      return HAL_ERROR;
 80055c0:	2701      	movs	r7, #1
 80055c2:	e6a8      	b.n	8005316 <HAL_I2C_Mem_Read+0x22>
            return HAL_ERROR;
 80055c4:	2701      	movs	r7, #1
 80055c6:	e6a6      	b.n	8005316 <HAL_I2C_Mem_Read+0x22>
            return HAL_ERROR;
 80055c8:	2701      	movs	r7, #1
 80055ca:	e6a4      	b.n	8005316 <HAL_I2C_Mem_Read+0x22>
            return HAL_ERROR;
 80055cc:	2701      	movs	r7, #1
 80055ce:	e6a2      	b.n	8005316 <HAL_I2C_Mem_Read+0x22>
            return HAL_ERROR;
 80055d0:	2701      	movs	r7, #1
 80055d2:	e6a0      	b.n	8005316 <HAL_I2C_Mem_Read+0x22>
          return HAL_ERROR;
 80055d4:	2701      	movs	r7, #1
 80055d6:	e69e      	b.n	8005316 <HAL_I2C_Mem_Read+0x22>

080055d8 <HAL_I2C_GetState>:
  return hi2c->State;
 80055d8:	f890 003d 	ldrb.w	r0, [r0, #61]	; 0x3d
}
 80055dc:	4770      	bx	lr

080055de <HAL_I2C_GetError>:
  return hi2c->ErrorCode;
 80055de:	6c00      	ldr	r0, [r0, #64]	; 0x40
}
 80055e0:	4770      	bx	lr
	...

080055e4 <HAL_RCC_OscConfig>:
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80055e4:	2800      	cmp	r0, #0
 80055e6:	f000 81e0 	beq.w	80059aa <HAL_RCC_OscConfig+0x3c6>
{
 80055ea:	b570      	push	{r4, r5, r6, lr}
 80055ec:	b082      	sub	sp, #8
 80055ee:	4604      	mov	r4, r0
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80055f0:	6803      	ldr	r3, [r0, #0]
 80055f2:	f013 0f01 	tst.w	r3, #1
 80055f6:	d03b      	beq.n	8005670 <HAL_RCC_OscConfig+0x8c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80055f8:	4b9f      	ldr	r3, [pc, #636]	; (8005878 <HAL_RCC_OscConfig+0x294>)
 80055fa:	689b      	ldr	r3, [r3, #8]
 80055fc:	f003 030c 	and.w	r3, r3, #12
 8005600:	2b04      	cmp	r3, #4
 8005602:	d02c      	beq.n	800565e <HAL_RCC_OscConfig+0x7a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005604:	4b9c      	ldr	r3, [pc, #624]	; (8005878 <HAL_RCC_OscConfig+0x294>)
 8005606:	689b      	ldr	r3, [r3, #8]
 8005608:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800560c:	2b08      	cmp	r3, #8
 800560e:	d021      	beq.n	8005654 <HAL_RCC_OscConfig+0x70>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005610:	6863      	ldr	r3, [r4, #4]
 8005612:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005616:	d04f      	beq.n	80056b8 <HAL_RCC_OscConfig+0xd4>
 8005618:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800561c:	d052      	beq.n	80056c4 <HAL_RCC_OscConfig+0xe0>
 800561e:	4b96      	ldr	r3, [pc, #600]	; (8005878 <HAL_RCC_OscConfig+0x294>)
 8005620:	681a      	ldr	r2, [r3, #0]
 8005622:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8005626:	601a      	str	r2, [r3, #0]
 8005628:	681a      	ldr	r2, [r3, #0]
 800562a:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800562e:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005630:	6863      	ldr	r3, [r4, #4]
 8005632:	2b00      	cmp	r3, #0
 8005634:	d050      	beq.n	80056d8 <HAL_RCC_OscConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005636:	f7ff f86b 	bl	8004710 <HAL_GetTick>
 800563a:	4605      	mov	r5, r0

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800563c:	4b8e      	ldr	r3, [pc, #568]	; (8005878 <HAL_RCC_OscConfig+0x294>)
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8005644:	d114      	bne.n	8005670 <HAL_RCC_OscConfig+0x8c>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005646:	f7ff f863 	bl	8004710 <HAL_GetTick>
 800564a:	1b40      	subs	r0, r0, r5
 800564c:	2864      	cmp	r0, #100	; 0x64
 800564e:	d9f5      	bls.n	800563c <HAL_RCC_OscConfig+0x58>
          {
            return HAL_TIMEOUT;
 8005650:	2003      	movs	r0, #3
 8005652:	e1b1      	b.n	80059b8 <HAL_RCC_OscConfig+0x3d4>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005654:	4b88      	ldr	r3, [pc, #544]	; (8005878 <HAL_RCC_OscConfig+0x294>)
 8005656:	685b      	ldr	r3, [r3, #4]
 8005658:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 800565c:	d0d8      	beq.n	8005610 <HAL_RCC_OscConfig+0x2c>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800565e:	4b86      	ldr	r3, [pc, #536]	; (8005878 <HAL_RCC_OscConfig+0x294>)
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8005666:	d003      	beq.n	8005670 <HAL_RCC_OscConfig+0x8c>
 8005668:	6863      	ldr	r3, [r4, #4]
 800566a:	2b00      	cmp	r3, #0
 800566c:	f000 819f 	beq.w	80059ae <HAL_RCC_OscConfig+0x3ca>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005670:	6823      	ldr	r3, [r4, #0]
 8005672:	f013 0f02 	tst.w	r3, #2
 8005676:	d054      	beq.n	8005722 <HAL_RCC_OscConfig+0x13e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005678:	4b7f      	ldr	r3, [pc, #508]	; (8005878 <HAL_RCC_OscConfig+0x294>)
 800567a:	689b      	ldr	r3, [r3, #8]
 800567c:	f013 0f0c 	tst.w	r3, #12
 8005680:	d03e      	beq.n	8005700 <HAL_RCC_OscConfig+0x11c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005682:	4b7d      	ldr	r3, [pc, #500]	; (8005878 <HAL_RCC_OscConfig+0x294>)
 8005684:	689b      	ldr	r3, [r3, #8]
 8005686:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800568a:	2b08      	cmp	r3, #8
 800568c:	d033      	beq.n	80056f6 <HAL_RCC_OscConfig+0x112>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800568e:	68e3      	ldr	r3, [r4, #12]
 8005690:	2b00      	cmp	r3, #0
 8005692:	d068      	beq.n	8005766 <HAL_RCC_OscConfig+0x182>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005694:	4b79      	ldr	r3, [pc, #484]	; (800587c <HAL_RCC_OscConfig+0x298>)
 8005696:	2201      	movs	r2, #1
 8005698:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800569a:	f7ff f839 	bl	8004710 <HAL_GetTick>
 800569e:	4605      	mov	r5, r0

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80056a0:	4b75      	ldr	r3, [pc, #468]	; (8005878 <HAL_RCC_OscConfig+0x294>)
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	f013 0f02 	tst.w	r3, #2
 80056a8:	d154      	bne.n	8005754 <HAL_RCC_OscConfig+0x170>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80056aa:	f7ff f831 	bl	8004710 <HAL_GetTick>
 80056ae:	1b40      	subs	r0, r0, r5
 80056b0:	2802      	cmp	r0, #2
 80056b2:	d9f5      	bls.n	80056a0 <HAL_RCC_OscConfig+0xbc>
          {
            return HAL_TIMEOUT;
 80056b4:	2003      	movs	r0, #3
 80056b6:	e17f      	b.n	80059b8 <HAL_RCC_OscConfig+0x3d4>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80056b8:	4a6f      	ldr	r2, [pc, #444]	; (8005878 <HAL_RCC_OscConfig+0x294>)
 80056ba:	6813      	ldr	r3, [r2, #0]
 80056bc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80056c0:	6013      	str	r3, [r2, #0]
 80056c2:	e7b5      	b.n	8005630 <HAL_RCC_OscConfig+0x4c>
 80056c4:	4b6c      	ldr	r3, [pc, #432]	; (8005878 <HAL_RCC_OscConfig+0x294>)
 80056c6:	681a      	ldr	r2, [r3, #0]
 80056c8:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 80056cc:	601a      	str	r2, [r3, #0]
 80056ce:	681a      	ldr	r2, [r3, #0]
 80056d0:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80056d4:	601a      	str	r2, [r3, #0]
 80056d6:	e7ab      	b.n	8005630 <HAL_RCC_OscConfig+0x4c>
        tickstart = HAL_GetTick();
 80056d8:	f7ff f81a 	bl	8004710 <HAL_GetTick>
 80056dc:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80056de:	4b66      	ldr	r3, [pc, #408]	; (8005878 <HAL_RCC_OscConfig+0x294>)
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 80056e6:	d0c3      	beq.n	8005670 <HAL_RCC_OscConfig+0x8c>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80056e8:	f7ff f812 	bl	8004710 <HAL_GetTick>
 80056ec:	1b40      	subs	r0, r0, r5
 80056ee:	2864      	cmp	r0, #100	; 0x64
 80056f0:	d9f5      	bls.n	80056de <HAL_RCC_OscConfig+0xfa>
            return HAL_TIMEOUT;
 80056f2:	2003      	movs	r0, #3
 80056f4:	e160      	b.n	80059b8 <HAL_RCC_OscConfig+0x3d4>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80056f6:	4b60      	ldr	r3, [pc, #384]	; (8005878 <HAL_RCC_OscConfig+0x294>)
 80056f8:	685b      	ldr	r3, [r3, #4]
 80056fa:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 80056fe:	d1c6      	bne.n	800568e <HAL_RCC_OscConfig+0xaa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005700:	4b5d      	ldr	r3, [pc, #372]	; (8005878 <HAL_RCC_OscConfig+0x294>)
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	f013 0f02 	tst.w	r3, #2
 8005708:	d003      	beq.n	8005712 <HAL_RCC_OscConfig+0x12e>
 800570a:	68e3      	ldr	r3, [r4, #12]
 800570c:	2b01      	cmp	r3, #1
 800570e:	f040 8150 	bne.w	80059b2 <HAL_RCC_OscConfig+0x3ce>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005712:	4a59      	ldr	r2, [pc, #356]	; (8005878 <HAL_RCC_OscConfig+0x294>)
 8005714:	6813      	ldr	r3, [r2, #0]
 8005716:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800571a:	6921      	ldr	r1, [r4, #16]
 800571c:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8005720:	6013      	str	r3, [r2, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005722:	6823      	ldr	r3, [r4, #0]
 8005724:	f013 0f08 	tst.w	r3, #8
 8005728:	d042      	beq.n	80057b0 <HAL_RCC_OscConfig+0x1cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800572a:	6963      	ldr	r3, [r4, #20]
 800572c:	b36b      	cbz	r3, 800578a <HAL_RCC_OscConfig+0x1a6>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800572e:	4b53      	ldr	r3, [pc, #332]	; (800587c <HAL_RCC_OscConfig+0x298>)
 8005730:	2201      	movs	r2, #1
 8005732:	f8c3 2e80 	str.w	r2, [r3, #3712]	; 0xe80

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005736:	f7fe ffeb 	bl	8004710 <HAL_GetTick>
 800573a:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800573c:	4b4e      	ldr	r3, [pc, #312]	; (8005878 <HAL_RCC_OscConfig+0x294>)
 800573e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005740:	f013 0f02 	tst.w	r3, #2
 8005744:	d134      	bne.n	80057b0 <HAL_RCC_OscConfig+0x1cc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005746:	f7fe ffe3 	bl	8004710 <HAL_GetTick>
 800574a:	1b40      	subs	r0, r0, r5
 800574c:	2802      	cmp	r0, #2
 800574e:	d9f5      	bls.n	800573c <HAL_RCC_OscConfig+0x158>
        {
          return HAL_TIMEOUT;
 8005750:	2003      	movs	r0, #3
 8005752:	e131      	b.n	80059b8 <HAL_RCC_OscConfig+0x3d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005754:	4a48      	ldr	r2, [pc, #288]	; (8005878 <HAL_RCC_OscConfig+0x294>)
 8005756:	6813      	ldr	r3, [r2, #0]
 8005758:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800575c:	6921      	ldr	r1, [r4, #16]
 800575e:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8005762:	6013      	str	r3, [r2, #0]
 8005764:	e7dd      	b.n	8005722 <HAL_RCC_OscConfig+0x13e>
        __HAL_RCC_HSI_DISABLE();
 8005766:	4b45      	ldr	r3, [pc, #276]	; (800587c <HAL_RCC_OscConfig+0x298>)
 8005768:	2200      	movs	r2, #0
 800576a:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800576c:	f7fe ffd0 	bl	8004710 <HAL_GetTick>
 8005770:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005772:	4b41      	ldr	r3, [pc, #260]	; (8005878 <HAL_RCC_OscConfig+0x294>)
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	f013 0f02 	tst.w	r3, #2
 800577a:	d0d2      	beq.n	8005722 <HAL_RCC_OscConfig+0x13e>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800577c:	f7fe ffc8 	bl	8004710 <HAL_GetTick>
 8005780:	1b40      	subs	r0, r0, r5
 8005782:	2802      	cmp	r0, #2
 8005784:	d9f5      	bls.n	8005772 <HAL_RCC_OscConfig+0x18e>
            return HAL_TIMEOUT;
 8005786:	2003      	movs	r0, #3
 8005788:	e116      	b.n	80059b8 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800578a:	4b3c      	ldr	r3, [pc, #240]	; (800587c <HAL_RCC_OscConfig+0x298>)
 800578c:	2200      	movs	r2, #0
 800578e:	f8c3 2e80 	str.w	r2, [r3, #3712]	; 0xe80

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005792:	f7fe ffbd 	bl	8004710 <HAL_GetTick>
 8005796:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005798:	4b37      	ldr	r3, [pc, #220]	; (8005878 <HAL_RCC_OscConfig+0x294>)
 800579a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800579c:	f013 0f02 	tst.w	r3, #2
 80057a0:	d006      	beq.n	80057b0 <HAL_RCC_OscConfig+0x1cc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80057a2:	f7fe ffb5 	bl	8004710 <HAL_GetTick>
 80057a6:	1b40      	subs	r0, r0, r5
 80057a8:	2802      	cmp	r0, #2
 80057aa:	d9f5      	bls.n	8005798 <HAL_RCC_OscConfig+0x1b4>
        {
          return HAL_TIMEOUT;
 80057ac:	2003      	movs	r0, #3
 80057ae:	e103      	b.n	80059b8 <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80057b0:	6823      	ldr	r3, [r4, #0]
 80057b2:	f013 0f04 	tst.w	r3, #4
 80057b6:	d077      	beq.n	80058a8 <HAL_RCC_OscConfig+0x2c4>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80057b8:	4b2f      	ldr	r3, [pc, #188]	; (8005878 <HAL_RCC_OscConfig+0x294>)
 80057ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057bc:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 80057c0:	d133      	bne.n	800582a <HAL_RCC_OscConfig+0x246>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80057c2:	2300      	movs	r3, #0
 80057c4:	9301      	str	r3, [sp, #4]
 80057c6:	4b2c      	ldr	r3, [pc, #176]	; (8005878 <HAL_RCC_OscConfig+0x294>)
 80057c8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80057ca:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80057ce:	641a      	str	r2, [r3, #64]	; 0x40
 80057d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80057d6:	9301      	str	r3, [sp, #4]
 80057d8:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 80057da:	2501      	movs	r5, #1
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80057dc:	4b28      	ldr	r3, [pc, #160]	; (8005880 <HAL_RCC_OscConfig+0x29c>)
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	f413 7f80 	tst.w	r3, #256	; 0x100
 80057e4:	d023      	beq.n	800582e <HAL_RCC_OscConfig+0x24a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80057e6:	68a3      	ldr	r3, [r4, #8]
 80057e8:	2b01      	cmp	r3, #1
 80057ea:	d034      	beq.n	8005856 <HAL_RCC_OscConfig+0x272>
 80057ec:	2b05      	cmp	r3, #5
 80057ee:	d038      	beq.n	8005862 <HAL_RCC_OscConfig+0x27e>
 80057f0:	4b21      	ldr	r3, [pc, #132]	; (8005878 <HAL_RCC_OscConfig+0x294>)
 80057f2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80057f4:	f022 0201 	bic.w	r2, r2, #1
 80057f8:	671a      	str	r2, [r3, #112]	; 0x70
 80057fa:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80057fc:	f022 0204 	bic.w	r2, r2, #4
 8005800:	671a      	str	r2, [r3, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005802:	68a3      	ldr	r3, [r4, #8]
 8005804:	2b00      	cmp	r3, #0
 8005806:	d03d      	beq.n	8005884 <HAL_RCC_OscConfig+0x2a0>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005808:	f7fe ff82 	bl	8004710 <HAL_GetTick>
 800580c:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800580e:	4b1a      	ldr	r3, [pc, #104]	; (8005878 <HAL_RCC_OscConfig+0x294>)
 8005810:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005812:	f013 0f02 	tst.w	r3, #2
 8005816:	d146      	bne.n	80058a6 <HAL_RCC_OscConfig+0x2c2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005818:	f7fe ff7a 	bl	8004710 <HAL_GetTick>
 800581c:	1b80      	subs	r0, r0, r6
 800581e:	f241 3388 	movw	r3, #5000	; 0x1388
 8005822:	4298      	cmp	r0, r3
 8005824:	d9f3      	bls.n	800580e <HAL_RCC_OscConfig+0x22a>
        {
          return HAL_TIMEOUT;
 8005826:	2003      	movs	r0, #3
 8005828:	e0c6      	b.n	80059b8 <HAL_RCC_OscConfig+0x3d4>
    FlagStatus       pwrclkchanged = RESET;
 800582a:	2500      	movs	r5, #0
 800582c:	e7d6      	b.n	80057dc <HAL_RCC_OscConfig+0x1f8>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800582e:	4a14      	ldr	r2, [pc, #80]	; (8005880 <HAL_RCC_OscConfig+0x29c>)
 8005830:	6813      	ldr	r3, [r2, #0]
 8005832:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005836:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 8005838:	f7fe ff6a 	bl	8004710 <HAL_GetTick>
 800583c:	4606      	mov	r6, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800583e:	4b10      	ldr	r3, [pc, #64]	; (8005880 <HAL_RCC_OscConfig+0x29c>)
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	f413 7f80 	tst.w	r3, #256	; 0x100
 8005846:	d1ce      	bne.n	80057e6 <HAL_RCC_OscConfig+0x202>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005848:	f7fe ff62 	bl	8004710 <HAL_GetTick>
 800584c:	1b80      	subs	r0, r0, r6
 800584e:	2802      	cmp	r0, #2
 8005850:	d9f5      	bls.n	800583e <HAL_RCC_OscConfig+0x25a>
          return HAL_TIMEOUT;
 8005852:	2003      	movs	r0, #3
 8005854:	e0b0      	b.n	80059b8 <HAL_RCC_OscConfig+0x3d4>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005856:	4a08      	ldr	r2, [pc, #32]	; (8005878 <HAL_RCC_OscConfig+0x294>)
 8005858:	6f13      	ldr	r3, [r2, #112]	; 0x70
 800585a:	f043 0301 	orr.w	r3, r3, #1
 800585e:	6713      	str	r3, [r2, #112]	; 0x70
 8005860:	e7cf      	b.n	8005802 <HAL_RCC_OscConfig+0x21e>
 8005862:	4b05      	ldr	r3, [pc, #20]	; (8005878 <HAL_RCC_OscConfig+0x294>)
 8005864:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005866:	f042 0204 	orr.w	r2, r2, #4
 800586a:	671a      	str	r2, [r3, #112]	; 0x70
 800586c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800586e:	f042 0201 	orr.w	r2, r2, #1
 8005872:	671a      	str	r2, [r3, #112]	; 0x70
 8005874:	e7c5      	b.n	8005802 <HAL_RCC_OscConfig+0x21e>
 8005876:	bf00      	nop
 8005878:	40023800 	.word	0x40023800
 800587c:	42470000 	.word	0x42470000
 8005880:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005884:	f7fe ff44 	bl	8004710 <HAL_GetTick>
 8005888:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800588a:	4b52      	ldr	r3, [pc, #328]	; (80059d4 <HAL_RCC_OscConfig+0x3f0>)
 800588c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800588e:	f013 0f02 	tst.w	r3, #2
 8005892:	d008      	beq.n	80058a6 <HAL_RCC_OscConfig+0x2c2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005894:	f7fe ff3c 	bl	8004710 <HAL_GetTick>
 8005898:	1b80      	subs	r0, r0, r6
 800589a:	f241 3388 	movw	r3, #5000	; 0x1388
 800589e:	4298      	cmp	r0, r3
 80058a0:	d9f3      	bls.n	800588a <HAL_RCC_OscConfig+0x2a6>
        {
          return HAL_TIMEOUT;
 80058a2:	2003      	movs	r0, #3
 80058a4:	e088      	b.n	80059b8 <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80058a6:	b9ed      	cbnz	r5, 80058e4 <HAL_RCC_OscConfig+0x300>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80058a8:	69a3      	ldr	r3, [r4, #24]
 80058aa:	2b00      	cmp	r3, #0
 80058ac:	f000 8083 	beq.w	80059b6 <HAL_RCC_OscConfig+0x3d2>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80058b0:	4a48      	ldr	r2, [pc, #288]	; (80059d4 <HAL_RCC_OscConfig+0x3f0>)
 80058b2:	6892      	ldr	r2, [r2, #8]
 80058b4:	f002 020c 	and.w	r2, r2, #12
 80058b8:	2a08      	cmp	r2, #8
 80058ba:	d051      	beq.n	8005960 <HAL_RCC_OscConfig+0x37c>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80058bc:	2b02      	cmp	r3, #2
 80058be:	d017      	beq.n	80058f0 <HAL_RCC_OscConfig+0x30c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80058c0:	4b45      	ldr	r3, [pc, #276]	; (80059d8 <HAL_RCC_OscConfig+0x3f4>)
 80058c2:	2200      	movs	r2, #0
 80058c4:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80058c6:	f7fe ff23 	bl	8004710 <HAL_GetTick>
 80058ca:	4604      	mov	r4, r0

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80058cc:	4b41      	ldr	r3, [pc, #260]	; (80059d4 <HAL_RCC_OscConfig+0x3f0>)
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 80058d4:	d042      	beq.n	800595c <HAL_RCC_OscConfig+0x378>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80058d6:	f7fe ff1b 	bl	8004710 <HAL_GetTick>
 80058da:	1b00      	subs	r0, r0, r4
 80058dc:	2802      	cmp	r0, #2
 80058de:	d9f5      	bls.n	80058cc <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 80058e0:	2003      	movs	r0, #3
 80058e2:	e069      	b.n	80059b8 <HAL_RCC_OscConfig+0x3d4>
      __HAL_RCC_PWR_CLK_DISABLE();
 80058e4:	4a3b      	ldr	r2, [pc, #236]	; (80059d4 <HAL_RCC_OscConfig+0x3f0>)
 80058e6:	6c13      	ldr	r3, [r2, #64]	; 0x40
 80058e8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80058ec:	6413      	str	r3, [r2, #64]	; 0x40
 80058ee:	e7db      	b.n	80058a8 <HAL_RCC_OscConfig+0x2c4>
        __HAL_RCC_PLL_DISABLE();
 80058f0:	4b39      	ldr	r3, [pc, #228]	; (80059d8 <HAL_RCC_OscConfig+0x3f4>)
 80058f2:	2200      	movs	r2, #0
 80058f4:	661a      	str	r2, [r3, #96]	; 0x60
        tickstart = HAL_GetTick();
 80058f6:	f7fe ff0b 	bl	8004710 <HAL_GetTick>
 80058fa:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80058fc:	4b35      	ldr	r3, [pc, #212]	; (80059d4 <HAL_RCC_OscConfig+0x3f0>)
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8005904:	d006      	beq.n	8005914 <HAL_RCC_OscConfig+0x330>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005906:	f7fe ff03 	bl	8004710 <HAL_GetTick>
 800590a:	1b40      	subs	r0, r0, r5
 800590c:	2802      	cmp	r0, #2
 800590e:	d9f5      	bls.n	80058fc <HAL_RCC_OscConfig+0x318>
            return HAL_TIMEOUT;
 8005910:	2003      	movs	r0, #3
 8005912:	e051      	b.n	80059b8 <HAL_RCC_OscConfig+0x3d4>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005914:	69e3      	ldr	r3, [r4, #28]
 8005916:	6a22      	ldr	r2, [r4, #32]
 8005918:	4313      	orrs	r3, r2
 800591a:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800591c:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8005920:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8005922:	0852      	lsrs	r2, r2, #1
 8005924:	3a01      	subs	r2, #1
 8005926:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800592a:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800592c:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8005930:	4a28      	ldr	r2, [pc, #160]	; (80059d4 <HAL_RCC_OscConfig+0x3f0>)
 8005932:	6053      	str	r3, [r2, #4]
        __HAL_RCC_PLL_ENABLE();
 8005934:	4b28      	ldr	r3, [pc, #160]	; (80059d8 <HAL_RCC_OscConfig+0x3f4>)
 8005936:	2201      	movs	r2, #1
 8005938:	661a      	str	r2, [r3, #96]	; 0x60
        tickstart = HAL_GetTick();
 800593a:	f7fe fee9 	bl	8004710 <HAL_GetTick>
 800593e:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005940:	4b24      	ldr	r3, [pc, #144]	; (80059d4 <HAL_RCC_OscConfig+0x3f0>)
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8005948:	d106      	bne.n	8005958 <HAL_RCC_OscConfig+0x374>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800594a:	f7fe fee1 	bl	8004710 <HAL_GetTick>
 800594e:	1b00      	subs	r0, r0, r4
 8005950:	2802      	cmp	r0, #2
 8005952:	d9f5      	bls.n	8005940 <HAL_RCC_OscConfig+0x35c>
            return HAL_TIMEOUT;
 8005954:	2003      	movs	r0, #3
 8005956:	e02f      	b.n	80059b8 <HAL_RCC_OscConfig+0x3d4>
          return HAL_ERROR;
        }
      }
    }
  }
  return HAL_OK;
 8005958:	2000      	movs	r0, #0
 800595a:	e02d      	b.n	80059b8 <HAL_RCC_OscConfig+0x3d4>
 800595c:	2000      	movs	r0, #0
 800595e:	e02b      	b.n	80059b8 <HAL_RCC_OscConfig+0x3d4>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005960:	2b01      	cmp	r3, #1
 8005962:	d02b      	beq.n	80059bc <HAL_RCC_OscConfig+0x3d8>
        pll_config = RCC->PLLCFGR;
 8005964:	4b1b      	ldr	r3, [pc, #108]	; (80059d4 <HAL_RCC_OscConfig+0x3f0>)
 8005966:	685b      	ldr	r3, [r3, #4]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005968:	f403 0180 	and.w	r1, r3, #4194304	; 0x400000
 800596c:	69e2      	ldr	r2, [r4, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800596e:	4291      	cmp	r1, r2
 8005970:	d126      	bne.n	80059c0 <HAL_RCC_OscConfig+0x3dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005972:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005976:	6a21      	ldr	r1, [r4, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005978:	428a      	cmp	r2, r1
 800597a:	d123      	bne.n	80059c4 <HAL_RCC_OscConfig+0x3e0>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800597c:	6a61      	ldr	r1, [r4, #36]	; 0x24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800597e:	f647 72c0 	movw	r2, #32704	; 0x7fc0
 8005982:	401a      	ands	r2, r3
 8005984:	ebb2 1f81 	cmp.w	r2, r1, lsl #6
 8005988:	d11e      	bne.n	80059c8 <HAL_RCC_OscConfig+0x3e4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800598a:	f403 3140 	and.w	r1, r3, #196608	; 0x30000
 800598e:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8005990:	0852      	lsrs	r2, r2, #1
 8005992:	3a01      	subs	r2, #1
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005994:	ebb1 4f02 	cmp.w	r1, r2, lsl #16
 8005998:	d118      	bne.n	80059cc <HAL_RCC_OscConfig+0x3e8>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800599a:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
 800599e:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80059a0:	ebb3 6f02 	cmp.w	r3, r2, lsl #24
 80059a4:	d114      	bne.n	80059d0 <HAL_RCC_OscConfig+0x3ec>
  return HAL_OK;
 80059a6:	2000      	movs	r0, #0
 80059a8:	e006      	b.n	80059b8 <HAL_RCC_OscConfig+0x3d4>
    return HAL_ERROR;
 80059aa:	2001      	movs	r0, #1
}
 80059ac:	4770      	bx	lr
        return HAL_ERROR;
 80059ae:	2001      	movs	r0, #1
 80059b0:	e002      	b.n	80059b8 <HAL_RCC_OscConfig+0x3d4>
        return HAL_ERROR;
 80059b2:	2001      	movs	r0, #1
 80059b4:	e000      	b.n	80059b8 <HAL_RCC_OscConfig+0x3d4>
  return HAL_OK;
 80059b6:	2000      	movs	r0, #0
}
 80059b8:	b002      	add	sp, #8
 80059ba:	bd70      	pop	{r4, r5, r6, pc}
        return HAL_ERROR;
 80059bc:	2001      	movs	r0, #1
 80059be:	e7fb      	b.n	80059b8 <HAL_RCC_OscConfig+0x3d4>
          return HAL_ERROR;
 80059c0:	2001      	movs	r0, #1
 80059c2:	e7f9      	b.n	80059b8 <HAL_RCC_OscConfig+0x3d4>
 80059c4:	2001      	movs	r0, #1
 80059c6:	e7f7      	b.n	80059b8 <HAL_RCC_OscConfig+0x3d4>
 80059c8:	2001      	movs	r0, #1
 80059ca:	e7f5      	b.n	80059b8 <HAL_RCC_OscConfig+0x3d4>
 80059cc:	2001      	movs	r0, #1
 80059ce:	e7f3      	b.n	80059b8 <HAL_RCC_OscConfig+0x3d4>
 80059d0:	2001      	movs	r0, #1
 80059d2:	e7f1      	b.n	80059b8 <HAL_RCC_OscConfig+0x3d4>
 80059d4:	40023800 	.word	0x40023800
 80059d8:	42470000 	.word	0x42470000

080059dc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80059dc:	b508      	push	{r3, lr}
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80059de:	4b31      	ldr	r3, [pc, #196]	; (8005aa4 <HAL_RCC_GetSysClockFreq+0xc8>)
 80059e0:	689b      	ldr	r3, [r3, #8]
 80059e2:	f003 030c 	and.w	r3, r3, #12
 80059e6:	2b04      	cmp	r3, #4
 80059e8:	d057      	beq.n	8005a9a <HAL_RCC_GetSysClockFreq+0xbe>
 80059ea:	2b08      	cmp	r3, #8
 80059ec:	d157      	bne.n	8005a9e <HAL_RCC_GetSysClockFreq+0xc2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80059ee:	4b2d      	ldr	r3, [pc, #180]	; (8005aa4 <HAL_RCC_GetSysClockFreq+0xc8>)
 80059f0:	685a      	ldr	r2, [r3, #4]
 80059f2:	f002 023f 	and.w	r2, r2, #63	; 0x3f
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80059f6:	685b      	ldr	r3, [r3, #4]
 80059f8:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 80059fc:	d02a      	beq.n	8005a54 <HAL_RCC_GetSysClockFreq+0x78>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80059fe:	4b29      	ldr	r3, [pc, #164]	; (8005aa4 <HAL_RCC_GetSysClockFreq+0xc8>)
 8005a00:	6859      	ldr	r1, [r3, #4]
 8005a02:	f3c1 1c88 	ubfx	ip, r1, #6, #9
 8005a06:	ea4f 114c 	mov.w	r1, ip, lsl #5
 8005a0a:	ebb1 000c 	subs.w	r0, r1, ip
 8005a0e:	eb6e 0e0e 	sbc.w	lr, lr, lr
 8005a12:	ea4f 138e 	mov.w	r3, lr, lsl #6
 8005a16:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8005a1a:	0181      	lsls	r1, r0, #6
 8005a1c:	1a09      	subs	r1, r1, r0
 8005a1e:	eb63 030e 	sbc.w	r3, r3, lr
 8005a22:	00db      	lsls	r3, r3, #3
 8005a24:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005a28:	00c9      	lsls	r1, r1, #3
 8005a2a:	eb11 0c0c 	adds.w	ip, r1, ip
 8005a2e:	f143 0300 	adc.w	r3, r3, #0
 8005a32:	0259      	lsls	r1, r3, #9
 8005a34:	2300      	movs	r3, #0
 8005a36:	ea4f 204c 	mov.w	r0, ip, lsl #9
 8005a3a:	ea41 51dc 	orr.w	r1, r1, ip, lsr #23
 8005a3e:	f7fa fc27 	bl	8000290 <__aeabi_uldivmod>
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005a42:	4b18      	ldr	r3, [pc, #96]	; (8005aa4 <HAL_RCC_GetSysClockFreq+0xc8>)
 8005a44:	685b      	ldr	r3, [r3, #4]
 8005a46:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8005a4a:	3301      	adds	r3, #1
 8005a4c:	005b      	lsls	r3, r3, #1

      sysclockfreq = pllvco/pllp;
 8005a4e:	fbb0 f0f3 	udiv	r0, r0, r3
      break;
 8005a52:	e025      	b.n	8005aa0 <HAL_RCC_GetSysClockFreq+0xc4>
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005a54:	4b13      	ldr	r3, [pc, #76]	; (8005aa4 <HAL_RCC_GetSysClockFreq+0xc8>)
 8005a56:	6859      	ldr	r1, [r3, #4]
 8005a58:	f3c1 1c88 	ubfx	ip, r1, #6, #9
 8005a5c:	ea4f 114c 	mov.w	r1, ip, lsl #5
 8005a60:	ebb1 000c 	subs.w	r0, r1, ip
 8005a64:	eb6e 0e0e 	sbc.w	lr, lr, lr
 8005a68:	ea4f 138e 	mov.w	r3, lr, lsl #6
 8005a6c:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8005a70:	0181      	lsls	r1, r0, #6
 8005a72:	1a09      	subs	r1, r1, r0
 8005a74:	eb63 030e 	sbc.w	r3, r3, lr
 8005a78:	00db      	lsls	r3, r3, #3
 8005a7a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005a7e:	00c9      	lsls	r1, r1, #3
 8005a80:	eb11 0c0c 	adds.w	ip, r1, ip
 8005a84:	f143 0300 	adc.w	r3, r3, #0
 8005a88:	0299      	lsls	r1, r3, #10
 8005a8a:	2300      	movs	r3, #0
 8005a8c:	ea4f 208c 	mov.w	r0, ip, lsl #10
 8005a90:	ea41 519c 	orr.w	r1, r1, ip, lsr #22
 8005a94:	f7fa fbfc 	bl	8000290 <__aeabi_uldivmod>
 8005a98:	e7d3      	b.n	8005a42 <HAL_RCC_GetSysClockFreq+0x66>
      sysclockfreq = HSE_VALUE;
 8005a9a:	4803      	ldr	r0, [pc, #12]	; (8005aa8 <HAL_RCC_GetSysClockFreq+0xcc>)
 8005a9c:	e000      	b.n	8005aa0 <HAL_RCC_GetSysClockFreq+0xc4>
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005a9e:	4803      	ldr	r0, [pc, #12]	; (8005aac <HAL_RCC_GetSysClockFreq+0xd0>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8005aa0:	bd08      	pop	{r3, pc}
 8005aa2:	bf00      	nop
 8005aa4:	40023800 	.word	0x40023800
 8005aa8:	007a1200 	.word	0x007a1200
 8005aac:	00f42400 	.word	0x00f42400

08005ab0 <HAL_RCC_ClockConfig>:
  if(RCC_ClkInitStruct == NULL)
 8005ab0:	2800      	cmp	r0, #0
 8005ab2:	f000 809b 	beq.w	8005bec <HAL_RCC_ClockConfig+0x13c>
{
 8005ab6:	b570      	push	{r4, r5, r6, lr}
 8005ab8:	460d      	mov	r5, r1
 8005aba:	4604      	mov	r4, r0
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005abc:	4b4f      	ldr	r3, [pc, #316]	; (8005bfc <HAL_RCC_ClockConfig+0x14c>)
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	f003 0307 	and.w	r3, r3, #7
 8005ac4:	428b      	cmp	r3, r1
 8005ac6:	d208      	bcs.n	8005ada <HAL_RCC_ClockConfig+0x2a>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005ac8:	b2cb      	uxtb	r3, r1
 8005aca:	4a4c      	ldr	r2, [pc, #304]	; (8005bfc <HAL_RCC_ClockConfig+0x14c>)
 8005acc:	7013      	strb	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005ace:	6813      	ldr	r3, [r2, #0]
 8005ad0:	f003 0307 	and.w	r3, r3, #7
 8005ad4:	428b      	cmp	r3, r1
 8005ad6:	f040 808b 	bne.w	8005bf0 <HAL_RCC_ClockConfig+0x140>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005ada:	6823      	ldr	r3, [r4, #0]
 8005adc:	f013 0f02 	tst.w	r3, #2
 8005ae0:	d017      	beq.n	8005b12 <HAL_RCC_ClockConfig+0x62>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005ae2:	f013 0f04 	tst.w	r3, #4
 8005ae6:	d004      	beq.n	8005af2 <HAL_RCC_ClockConfig+0x42>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005ae8:	4a45      	ldr	r2, [pc, #276]	; (8005c00 <HAL_RCC_ClockConfig+0x150>)
 8005aea:	6893      	ldr	r3, [r2, #8]
 8005aec:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8005af0:	6093      	str	r3, [r2, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005af2:	6823      	ldr	r3, [r4, #0]
 8005af4:	f013 0f08 	tst.w	r3, #8
 8005af8:	d004      	beq.n	8005b04 <HAL_RCC_ClockConfig+0x54>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005afa:	4a41      	ldr	r2, [pc, #260]	; (8005c00 <HAL_RCC_ClockConfig+0x150>)
 8005afc:	6893      	ldr	r3, [r2, #8]
 8005afe:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005b02:	6093      	str	r3, [r2, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005b04:	4a3e      	ldr	r2, [pc, #248]	; (8005c00 <HAL_RCC_ClockConfig+0x150>)
 8005b06:	6893      	ldr	r3, [r2, #8]
 8005b08:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005b0c:	68a1      	ldr	r1, [r4, #8]
 8005b0e:	430b      	orrs	r3, r1
 8005b10:	6093      	str	r3, [r2, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005b12:	6823      	ldr	r3, [r4, #0]
 8005b14:	f013 0f01 	tst.w	r3, #1
 8005b18:	d032      	beq.n	8005b80 <HAL_RCC_ClockConfig+0xd0>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005b1a:	6863      	ldr	r3, [r4, #4]
 8005b1c:	2b01      	cmp	r3, #1
 8005b1e:	d021      	beq.n	8005b64 <HAL_RCC_ClockConfig+0xb4>
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005b20:	1e9a      	subs	r2, r3, #2
 8005b22:	2a01      	cmp	r2, #1
 8005b24:	d925      	bls.n	8005b72 <HAL_RCC_ClockConfig+0xc2>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005b26:	4a36      	ldr	r2, [pc, #216]	; (8005c00 <HAL_RCC_ClockConfig+0x150>)
 8005b28:	6812      	ldr	r2, [r2, #0]
 8005b2a:	f012 0f02 	tst.w	r2, #2
 8005b2e:	d061      	beq.n	8005bf4 <HAL_RCC_ClockConfig+0x144>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005b30:	4933      	ldr	r1, [pc, #204]	; (8005c00 <HAL_RCC_ClockConfig+0x150>)
 8005b32:	688a      	ldr	r2, [r1, #8]
 8005b34:	f022 0203 	bic.w	r2, r2, #3
 8005b38:	4313      	orrs	r3, r2
 8005b3a:	608b      	str	r3, [r1, #8]
    tickstart = HAL_GetTick();
 8005b3c:	f7fe fde8 	bl	8004710 <HAL_GetTick>
 8005b40:	4606      	mov	r6, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005b42:	4b2f      	ldr	r3, [pc, #188]	; (8005c00 <HAL_RCC_ClockConfig+0x150>)
 8005b44:	689b      	ldr	r3, [r3, #8]
 8005b46:	f003 030c 	and.w	r3, r3, #12
 8005b4a:	6862      	ldr	r2, [r4, #4]
 8005b4c:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8005b50:	d016      	beq.n	8005b80 <HAL_RCC_ClockConfig+0xd0>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005b52:	f7fe fddd 	bl	8004710 <HAL_GetTick>
 8005b56:	1b80      	subs	r0, r0, r6
 8005b58:	f241 3388 	movw	r3, #5000	; 0x1388
 8005b5c:	4298      	cmp	r0, r3
 8005b5e:	d9f0      	bls.n	8005b42 <HAL_RCC_ClockConfig+0x92>
        return HAL_TIMEOUT;
 8005b60:	2003      	movs	r0, #3
 8005b62:	e042      	b.n	8005bea <HAL_RCC_ClockConfig+0x13a>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005b64:	4a26      	ldr	r2, [pc, #152]	; (8005c00 <HAL_RCC_ClockConfig+0x150>)
 8005b66:	6812      	ldr	r2, [r2, #0]
 8005b68:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 8005b6c:	d1e0      	bne.n	8005b30 <HAL_RCC_ClockConfig+0x80>
        return HAL_ERROR;
 8005b6e:	2001      	movs	r0, #1
 8005b70:	e03b      	b.n	8005bea <HAL_RCC_ClockConfig+0x13a>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005b72:	4a23      	ldr	r2, [pc, #140]	; (8005c00 <HAL_RCC_ClockConfig+0x150>)
 8005b74:	6812      	ldr	r2, [r2, #0]
 8005b76:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 8005b7a:	d1d9      	bne.n	8005b30 <HAL_RCC_ClockConfig+0x80>
        return HAL_ERROR;
 8005b7c:	2001      	movs	r0, #1
 8005b7e:	e034      	b.n	8005bea <HAL_RCC_ClockConfig+0x13a>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005b80:	4b1e      	ldr	r3, [pc, #120]	; (8005bfc <HAL_RCC_ClockConfig+0x14c>)
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	f003 0307 	and.w	r3, r3, #7
 8005b88:	42ab      	cmp	r3, r5
 8005b8a:	d907      	bls.n	8005b9c <HAL_RCC_ClockConfig+0xec>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005b8c:	b2ea      	uxtb	r2, r5
 8005b8e:	4b1b      	ldr	r3, [pc, #108]	; (8005bfc <HAL_RCC_ClockConfig+0x14c>)
 8005b90:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	f003 0307 	and.w	r3, r3, #7
 8005b98:	42ab      	cmp	r3, r5
 8005b9a:	d12d      	bne.n	8005bf8 <HAL_RCC_ClockConfig+0x148>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005b9c:	6823      	ldr	r3, [r4, #0]
 8005b9e:	f013 0f04 	tst.w	r3, #4
 8005ba2:	d006      	beq.n	8005bb2 <HAL_RCC_ClockConfig+0x102>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005ba4:	4a16      	ldr	r2, [pc, #88]	; (8005c00 <HAL_RCC_ClockConfig+0x150>)
 8005ba6:	6893      	ldr	r3, [r2, #8]
 8005ba8:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 8005bac:	68e1      	ldr	r1, [r4, #12]
 8005bae:	430b      	orrs	r3, r1
 8005bb0:	6093      	str	r3, [r2, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005bb2:	6823      	ldr	r3, [r4, #0]
 8005bb4:	f013 0f08 	tst.w	r3, #8
 8005bb8:	d007      	beq.n	8005bca <HAL_RCC_ClockConfig+0x11a>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005bba:	4a11      	ldr	r2, [pc, #68]	; (8005c00 <HAL_RCC_ClockConfig+0x150>)
 8005bbc:	6893      	ldr	r3, [r2, #8]
 8005bbe:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8005bc2:	6921      	ldr	r1, [r4, #16]
 8005bc4:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8005bc8:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005bca:	f7ff ff07 	bl	80059dc <HAL_RCC_GetSysClockFreq>
 8005bce:	4b0c      	ldr	r3, [pc, #48]	; (8005c00 <HAL_RCC_ClockConfig+0x150>)
 8005bd0:	689b      	ldr	r3, [r3, #8]
 8005bd2:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8005bd6:	4a0b      	ldr	r2, [pc, #44]	; (8005c04 <HAL_RCC_ClockConfig+0x154>)
 8005bd8:	5cd3      	ldrb	r3, [r2, r3]
 8005bda:	40d8      	lsrs	r0, r3
 8005bdc:	4b0a      	ldr	r3, [pc, #40]	; (8005c08 <HAL_RCC_ClockConfig+0x158>)
 8005bde:	6018      	str	r0, [r3, #0]
  HAL_InitTick (uwTickPrio);
 8005be0:	4b0a      	ldr	r3, [pc, #40]	; (8005c0c <HAL_RCC_ClockConfig+0x15c>)
 8005be2:	6818      	ldr	r0, [r3, #0]
 8005be4:	f7fe fd48 	bl	8004678 <HAL_InitTick>
  return HAL_OK;
 8005be8:	2000      	movs	r0, #0
}
 8005bea:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 8005bec:	2001      	movs	r0, #1
}
 8005bee:	4770      	bx	lr
      return HAL_ERROR;
 8005bf0:	2001      	movs	r0, #1
 8005bf2:	e7fa      	b.n	8005bea <HAL_RCC_ClockConfig+0x13a>
        return HAL_ERROR;
 8005bf4:	2001      	movs	r0, #1
 8005bf6:	e7f8      	b.n	8005bea <HAL_RCC_ClockConfig+0x13a>
      return HAL_ERROR;
 8005bf8:	2001      	movs	r0, #1
 8005bfa:	e7f6      	b.n	8005bea <HAL_RCC_ClockConfig+0x13a>
 8005bfc:	40023c00 	.word	0x40023c00
 8005c00:	40023800 	.word	0x40023800
 8005c04:	08009058 	.word	0x08009058
 8005c08:	20000004 	.word	0x20000004
 8005c0c:	200000cc 	.word	0x200000cc

08005c10 <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 8005c10:	4b01      	ldr	r3, [pc, #4]	; (8005c18 <HAL_RCC_GetHCLKFreq+0x8>)
 8005c12:	6818      	ldr	r0, [r3, #0]
 8005c14:	4770      	bx	lr
 8005c16:	bf00      	nop
 8005c18:	20000004 	.word	0x20000004

08005c1c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005c1c:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005c1e:	f7ff fff7 	bl	8005c10 <HAL_RCC_GetHCLKFreq>
 8005c22:	4b04      	ldr	r3, [pc, #16]	; (8005c34 <HAL_RCC_GetPCLK1Freq+0x18>)
 8005c24:	689b      	ldr	r3, [r3, #8]
 8005c26:	f3c3 2382 	ubfx	r3, r3, #10, #3
 8005c2a:	4a03      	ldr	r2, [pc, #12]	; (8005c38 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8005c2c:	5cd3      	ldrb	r3, [r2, r3]
}
 8005c2e:	40d8      	lsrs	r0, r3
 8005c30:	bd08      	pop	{r3, pc}
 8005c32:	bf00      	nop
 8005c34:	40023800 	.word	0x40023800
 8005c38:	08009068 	.word	0x08009068

08005c3c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005c3c:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8005c3e:	f7ff ffe7 	bl	8005c10 <HAL_RCC_GetHCLKFreq>
 8005c42:	4b04      	ldr	r3, [pc, #16]	; (8005c54 <HAL_RCC_GetPCLK2Freq+0x18>)
 8005c44:	689b      	ldr	r3, [r3, #8]
 8005c46:	f3c3 3342 	ubfx	r3, r3, #13, #3
 8005c4a:	4a03      	ldr	r2, [pc, #12]	; (8005c58 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8005c4c:	5cd3      	ldrb	r3, [r2, r3]
}
 8005c4e:	40d8      	lsrs	r0, r3
 8005c50:	bd08      	pop	{r3, pc}
 8005c52:	bf00      	nop
 8005c54:	40023800 	.word	0x40023800
 8005c58:	08009068 	.word	0x08009068

08005c5c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005c5c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005c60:	b082      	sub	sp, #8
 8005c62:	4605      	mov	r5, r0
 8005c64:	4688      	mov	r8, r1
 8005c66:	4617      	mov	r7, r2
 8005c68:	461e      	mov	r6, r3
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005c6a:	f7fe fd51 	bl	8004710 <HAL_GetTick>
 8005c6e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005c70:	1a1b      	subs	r3, r3, r0
 8005c72:	eb03 0906 	add.w	r9, r3, r6
  tmp_tickstart = HAL_GetTick();
 8005c76:	f7fe fd4b 	bl	8004710 <HAL_GetTick>
 8005c7a:	4682      	mov	sl, r0

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005c7c:	4b2b      	ldr	r3, [pc, #172]	; (8005d2c <SPI_WaitFlagStateUntilTimeout+0xd0>)
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	f3c3 33cb 	ubfx	r3, r3, #15, #12
 8005c84:	fb09 f303 	mul.w	r3, r9, r3
 8005c88:	9301      	str	r3, [sp, #4]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005c8a:	682b      	ldr	r3, [r5, #0]
 8005c8c:	689c      	ldr	r4, [r3, #8]
 8005c8e:	ea38 0304 	bics.w	r3, r8, r4
 8005c92:	bf0c      	ite	eq
 8005c94:	f04f 0c01 	moveq.w	ip, #1
 8005c98:	f04f 0c00 	movne.w	ip, #0
 8005c9c:	45bc      	cmp	ip, r7
 8005c9e:	d040      	beq.n	8005d22 <SPI_WaitFlagStateUntilTimeout+0xc6>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005ca0:	f1b6 3fff 	cmp.w	r6, #4294967295
 8005ca4:	d0f1      	beq.n	8005c8a <SPI_WaitFlagStateUntilTimeout+0x2e>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005ca6:	f7fe fd33 	bl	8004710 <HAL_GetTick>
 8005caa:	eba0 000a 	sub.w	r0, r0, sl
 8005cae:	4548      	cmp	r0, r9
 8005cb0:	d20a      	bcs.n	8005cc8 <SPI_WaitFlagStateUntilTimeout+0x6c>
 8005cb2:	f1b9 0f00 	cmp.w	r9, #0
 8005cb6:	d007      	beq.n	8005cc8 <SPI_WaitFlagStateUntilTimeout+0x6c>
        __HAL_UNLOCK(hspi);

        return HAL_TIMEOUT;
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005cb8:	9a01      	ldr	r2, [sp, #4]
 8005cba:	b102      	cbz	r2, 8005cbe <SPI_WaitFlagStateUntilTimeout+0x62>
 8005cbc:	464a      	mov	r2, r9
      {
        tmp_timeout = 0U;
      }
      count--;
 8005cbe:	9b01      	ldr	r3, [sp, #4]
 8005cc0:	3b01      	subs	r3, #1
 8005cc2:	9301      	str	r3, [sp, #4]
 8005cc4:	4691      	mov	r9, r2
 8005cc6:	e7e0      	b.n	8005c8a <SPI_WaitFlagStateUntilTimeout+0x2e>
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005cc8:	682a      	ldr	r2, [r5, #0]
 8005cca:	6853      	ldr	r3, [r2, #4]
 8005ccc:	f023 03e0 	bic.w	r3, r3, #224	; 0xe0
 8005cd0:	6053      	str	r3, [r2, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005cd2:	686b      	ldr	r3, [r5, #4]
 8005cd4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005cd8:	d00b      	beq.n	8005cf2 <SPI_WaitFlagStateUntilTimeout+0x96>
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005cda:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8005cdc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005ce0:	d014      	beq.n	8005d0c <SPI_WaitFlagStateUntilTimeout+0xb0>
        hspi->State = HAL_SPI_STATE_READY;
 8005ce2:	2301      	movs	r3, #1
 8005ce4:	f885 3051 	strb.w	r3, [r5, #81]	; 0x51
        __HAL_UNLOCK(hspi);
 8005ce8:	2300      	movs	r3, #0
 8005cea:	f885 3050 	strb.w	r3, [r5, #80]	; 0x50
        return HAL_TIMEOUT;
 8005cee:	2003      	movs	r0, #3
 8005cf0:	e018      	b.n	8005d24 <SPI_WaitFlagStateUntilTimeout+0xc8>
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005cf2:	68ab      	ldr	r3, [r5, #8]
 8005cf4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005cf8:	d002      	beq.n	8005d00 <SPI_WaitFlagStateUntilTimeout+0xa4>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005cfa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005cfe:	d1ec      	bne.n	8005cda <SPI_WaitFlagStateUntilTimeout+0x7e>
          __HAL_SPI_DISABLE(hspi);
 8005d00:	682a      	ldr	r2, [r5, #0]
 8005d02:	6813      	ldr	r3, [r2, #0]
 8005d04:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005d08:	6013      	str	r3, [r2, #0]
 8005d0a:	e7e6      	b.n	8005cda <SPI_WaitFlagStateUntilTimeout+0x7e>
          SPI_RESET_CRC(hspi);
 8005d0c:	682a      	ldr	r2, [r5, #0]
 8005d0e:	6813      	ldr	r3, [r2, #0]
 8005d10:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005d14:	6013      	str	r3, [r2, #0]
 8005d16:	682a      	ldr	r2, [r5, #0]
 8005d18:	6813      	ldr	r3, [r2, #0]
 8005d1a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8005d1e:	6013      	str	r3, [r2, #0]
 8005d20:	e7df      	b.n	8005ce2 <SPI_WaitFlagStateUntilTimeout+0x86>
    }
  }

  return HAL_OK;
 8005d22:	2000      	movs	r0, #0
}
 8005d24:	b002      	add	sp, #8
 8005d26:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005d2a:	bf00      	nop
 8005d2c:	20000004 	.word	0x20000004

08005d30 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005d30:	b510      	push	{r4, lr}
 8005d32:	b084      	sub	sp, #16
 8005d34:	4604      	mov	r4, r0
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8005d36:	4b16      	ldr	r3, [pc, #88]	; (8005d90 <SPI_EndRxTxTransaction+0x60>)
 8005d38:	6818      	ldr	r0, [r3, #0]
 8005d3a:	4b16      	ldr	r3, [pc, #88]	; (8005d94 <SPI_EndRxTxTransaction+0x64>)
 8005d3c:	fba3 3000 	umull	r3, r0, r3, r0
 8005d40:	0d40      	lsrs	r0, r0, #21
 8005d42:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005d46:	fb03 f000 	mul.w	r0, r3, r0
 8005d4a:	9003      	str	r0, [sp, #12]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005d4c:	6863      	ldr	r3, [r4, #4]
 8005d4e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005d52:	d00b      	beq.n	8005d6c <SPI_EndRxTxTransaction+0x3c>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8005d54:	9b03      	ldr	r3, [sp, #12]
 8005d56:	b1bb      	cbz	r3, 8005d88 <SPI_EndRxTxTransaction+0x58>
      {
        break;
      }
      count--;
 8005d58:	9b03      	ldr	r3, [sp, #12]
 8005d5a:	3b01      	subs	r3, #1
 8005d5c:	9303      	str	r3, [sp, #12]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8005d5e:	6823      	ldr	r3, [r4, #0]
 8005d60:	689b      	ldr	r3, [r3, #8]
 8005d62:	f013 0f80 	tst.w	r3, #128	; 0x80
 8005d66:	d1f5      	bne.n	8005d54 <SPI_EndRxTxTransaction+0x24>
  }

  return HAL_OK;
 8005d68:	2000      	movs	r0, #0
 8005d6a:	e00e      	b.n	8005d8a <SPI_EndRxTxTransaction+0x5a>
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005d6c:	9200      	str	r2, [sp, #0]
 8005d6e:	460b      	mov	r3, r1
 8005d70:	2200      	movs	r2, #0
 8005d72:	2180      	movs	r1, #128	; 0x80
 8005d74:	4620      	mov	r0, r4
 8005d76:	f7ff ff71 	bl	8005c5c <SPI_WaitFlagStateUntilTimeout>
 8005d7a:	b130      	cbz	r0, 8005d8a <SPI_EndRxTxTransaction+0x5a>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005d7c:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8005d7e:	f043 0320 	orr.w	r3, r3, #32
 8005d82:	6563      	str	r3, [r4, #84]	; 0x54
      return HAL_TIMEOUT;
 8005d84:	2003      	movs	r0, #3
 8005d86:	e000      	b.n	8005d8a <SPI_EndRxTxTransaction+0x5a>
  return HAL_OK;
 8005d88:	2000      	movs	r0, #0
}
 8005d8a:	b004      	add	sp, #16
 8005d8c:	bd10      	pop	{r4, pc}
 8005d8e:	bf00      	nop
 8005d90:	20000004 	.word	0x20000004
 8005d94:	165e9f81 	.word	0x165e9f81

08005d98 <HAL_SPI_Init>:
  if (hspi == NULL)
 8005d98:	2800      	cmp	r0, #0
 8005d9a:	d05a      	beq.n	8005e52 <HAL_SPI_Init+0xba>
{
 8005d9c:	b510      	push	{r4, lr}
 8005d9e:	4604      	mov	r4, r0
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005da0:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8005da2:	b933      	cbnz	r3, 8005db2 <HAL_SPI_Init+0x1a>
    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005da4:	6843      	ldr	r3, [r0, #4]
 8005da6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005daa:	d005      	beq.n	8005db8 <HAL_SPI_Init+0x20>
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005dac:	2300      	movs	r3, #0
 8005dae:	61c3      	str	r3, [r0, #28]
 8005db0:	e002      	b.n	8005db8 <HAL_SPI_Init+0x20>
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005db2:	2300      	movs	r3, #0
 8005db4:	6103      	str	r3, [r0, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005db6:	6143      	str	r3, [r0, #20]
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005db8:	2300      	movs	r3, #0
 8005dba:	62a3      	str	r3, [r4, #40]	; 0x28
  if (hspi->State == HAL_SPI_STATE_RESET)
 8005dbc:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
 8005dc0:	2b00      	cmp	r3, #0
 8005dc2:	d040      	beq.n	8005e46 <HAL_SPI_Init+0xae>
  hspi->State = HAL_SPI_STATE_BUSY;
 8005dc4:	2302      	movs	r3, #2
 8005dc6:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_SPI_DISABLE(hspi);
 8005dca:	6822      	ldr	r2, [r4, #0]
 8005dcc:	6813      	ldr	r3, [r2, #0]
 8005dce:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005dd2:	6013      	str	r3, [r2, #0]
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005dd4:	6863      	ldr	r3, [r4, #4]
 8005dd6:	f403 7382 	and.w	r3, r3, #260	; 0x104
 8005dda:	68a2      	ldr	r2, [r4, #8]
 8005ddc:	f402 4204 	and.w	r2, r2, #33792	; 0x8400
 8005de0:	4313      	orrs	r3, r2
 8005de2:	68e2      	ldr	r2, [r4, #12]
 8005de4:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8005de8:	4313      	orrs	r3, r2
 8005dea:	6922      	ldr	r2, [r4, #16]
 8005dec:	f002 0202 	and.w	r2, r2, #2
 8005df0:	4313      	orrs	r3, r2
 8005df2:	6962      	ldr	r2, [r4, #20]
 8005df4:	f002 0201 	and.w	r2, r2, #1
 8005df8:	4313      	orrs	r3, r2
 8005dfa:	69a2      	ldr	r2, [r4, #24]
 8005dfc:	f402 7200 	and.w	r2, r2, #512	; 0x200
 8005e00:	4313      	orrs	r3, r2
 8005e02:	69e2      	ldr	r2, [r4, #28]
 8005e04:	f002 0238 	and.w	r2, r2, #56	; 0x38
 8005e08:	4313      	orrs	r3, r2
 8005e0a:	6a22      	ldr	r2, [r4, #32]
 8005e0c:	f002 0280 	and.w	r2, r2, #128	; 0x80
 8005e10:	4313      	orrs	r3, r2
 8005e12:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8005e14:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8005e18:	6821      	ldr	r1, [r4, #0]
 8005e1a:	4313      	orrs	r3, r2
 8005e1c:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8005e1e:	8b63      	ldrh	r3, [r4, #26]
 8005e20:	f003 0304 	and.w	r3, r3, #4
 8005e24:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8005e26:	f002 0210 	and.w	r2, r2, #16
 8005e2a:	6821      	ldr	r1, [r4, #0]
 8005e2c:	4313      	orrs	r3, r2
 8005e2e:	604b      	str	r3, [r1, #4]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005e30:	6822      	ldr	r2, [r4, #0]
 8005e32:	69d3      	ldr	r3, [r2, #28]
 8005e34:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005e38:	61d3      	str	r3, [r2, #28]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005e3a:	2000      	movs	r0, #0
 8005e3c:	6560      	str	r0, [r4, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005e3e:	2301      	movs	r3, #1
 8005e40:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
}
 8005e44:	bd10      	pop	{r4, pc}
    hspi->Lock = HAL_UNLOCKED;
 8005e46:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
    HAL_SPI_MspInit(hspi);
 8005e4a:	4620      	mov	r0, r4
 8005e4c:	f7fb f97e 	bl	800114c <HAL_SPI_MspInit>
 8005e50:	e7b8      	b.n	8005dc4 <HAL_SPI_Init+0x2c>
    return HAL_ERROR;
 8005e52:	2001      	movs	r0, #1
}
 8005e54:	4770      	bx	lr

08005e56 <HAL_SPI_Transmit>:
{
 8005e56:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005e5a:	b083      	sub	sp, #12
 8005e5c:	461d      	mov	r5, r3
  __HAL_LOCK(hspi);
 8005e5e:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
 8005e62:	2b01      	cmp	r3, #1
 8005e64:	f000 80d1 	beq.w	800600a <HAL_SPI_Transmit+0x1b4>
 8005e68:	4604      	mov	r4, r0
 8005e6a:	4688      	mov	r8, r1
 8005e6c:	4691      	mov	r9, r2
 8005e6e:	2301      	movs	r3, #1
 8005e70:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50
  tickstart = HAL_GetTick();
 8005e74:	f7fe fc4c 	bl	8004710 <HAL_GetTick>
 8005e78:	4607      	mov	r7, r0
  if (hspi->State != HAL_SPI_STATE_READY)
 8005e7a:	f894 6051 	ldrb.w	r6, [r4, #81]	; 0x51
 8005e7e:	b2f6      	uxtb	r6, r6
 8005e80:	2e01      	cmp	r6, #1
 8005e82:	f040 80af 	bne.w	8005fe4 <HAL_SPI_Transmit+0x18e>
  if ((pData == NULL) || (Size == 0U))
 8005e86:	f1b8 0f00 	cmp.w	r8, #0
 8005e8a:	f000 80ac 	beq.w	8005fe6 <HAL_SPI_Transmit+0x190>
 8005e8e:	f1b9 0f00 	cmp.w	r9, #0
 8005e92:	f000 80a8 	beq.w	8005fe6 <HAL_SPI_Transmit+0x190>
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005e96:	2303      	movs	r3, #3
 8005e98:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005e9c:	2300      	movs	r3, #0
 8005e9e:	6563      	str	r3, [r4, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8005ea0:	f8c4 8030 	str.w	r8, [r4, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8005ea4:	f8a4 9034 	strh.w	r9, [r4, #52]	; 0x34
  hspi->TxXferCount = Size;
 8005ea8:	f8a4 9036 	strh.w	r9, [r4, #54]	; 0x36
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8005eac:	63a3      	str	r3, [r4, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8005eae:	87a3      	strh	r3, [r4, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8005eb0:	87e3      	strh	r3, [r4, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8005eb2:	6463      	str	r3, [r4, #68]	; 0x44
  hspi->RxISR       = NULL;
 8005eb4:	6423      	str	r3, [r4, #64]	; 0x40
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005eb6:	68a3      	ldr	r3, [r4, #8]
 8005eb8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005ebc:	d01e      	beq.n	8005efc <HAL_SPI_Transmit+0xa6>
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005ebe:	6823      	ldr	r3, [r4, #0]
 8005ec0:	681a      	ldr	r2, [r3, #0]
 8005ec2:	f012 0f40 	tst.w	r2, #64	; 0x40
 8005ec6:	d103      	bne.n	8005ed0 <HAL_SPI_Transmit+0x7a>
    __HAL_SPI_ENABLE(hspi);
 8005ec8:	681a      	ldr	r2, [r3, #0]
 8005eca:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005ece:	601a      	str	r2, [r3, #0]
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005ed0:	68e3      	ldr	r3, [r4, #12]
 8005ed2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005ed6:	d01c      	beq.n	8005f12 <HAL_SPI_Transmit+0xbc>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005ed8:	6863      	ldr	r3, [r4, #4]
 8005eda:	b113      	cbz	r3, 8005ee2 <HAL_SPI_Transmit+0x8c>
 8005edc:	f1b9 0f01 	cmp.w	r9, #1
 8005ee0:	d152      	bne.n	8005f88 <HAL_SPI_Transmit+0x132>
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005ee2:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8005ee4:	6823      	ldr	r3, [r4, #0]
 8005ee6:	7812      	ldrb	r2, [r2, #0]
 8005ee8:	731a      	strb	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005eea:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8005eec:	3301      	adds	r3, #1
 8005eee:	6323      	str	r3, [r4, #48]	; 0x30
      hspi->TxXferCount--;
 8005ef0:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8005ef2:	b29b      	uxth	r3, r3
 8005ef4:	3b01      	subs	r3, #1
 8005ef6:	b29b      	uxth	r3, r3
 8005ef8:	86e3      	strh	r3, [r4, #54]	; 0x36
 8005efa:	e045      	b.n	8005f88 <HAL_SPI_Transmit+0x132>
    __HAL_SPI_DISABLE(hspi);
 8005efc:	6822      	ldr	r2, [r4, #0]
 8005efe:	6813      	ldr	r3, [r2, #0]
 8005f00:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005f04:	6013      	str	r3, [r2, #0]
    SPI_1LINE_TX(hspi);
 8005f06:	6822      	ldr	r2, [r4, #0]
 8005f08:	6813      	ldr	r3, [r2, #0]
 8005f0a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005f0e:	6013      	str	r3, [r2, #0]
 8005f10:	e7d5      	b.n	8005ebe <HAL_SPI_Transmit+0x68>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005f12:	6863      	ldr	r3, [r4, #4]
 8005f14:	b113      	cbz	r3, 8005f1c <HAL_SPI_Transmit+0xc6>
 8005f16:	f1b9 0f01 	cmp.w	r9, #1
 8005f1a:	d116      	bne.n	8005f4a <HAL_SPI_Transmit+0xf4>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005f1c:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8005f1e:	6823      	ldr	r3, [r4, #0]
 8005f20:	8812      	ldrh	r2, [r2, #0]
 8005f22:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005f24:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8005f26:	3302      	adds	r3, #2
 8005f28:	6323      	str	r3, [r4, #48]	; 0x30
      hspi->TxXferCount--;
 8005f2a:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8005f2c:	b29b      	uxth	r3, r3
 8005f2e:	3b01      	subs	r3, #1
 8005f30:	b29b      	uxth	r3, r3
 8005f32:	86e3      	strh	r3, [r4, #54]	; 0x36
 8005f34:	e009      	b.n	8005f4a <HAL_SPI_Transmit+0xf4>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005f36:	f7fe fbeb 	bl	8004710 <HAL_GetTick>
 8005f3a:	1bc0      	subs	r0, r0, r7
 8005f3c:	42a8      	cmp	r0, r5
 8005f3e:	d302      	bcc.n	8005f46 <HAL_SPI_Transmit+0xf0>
 8005f40:	f1b5 3fff 	cmp.w	r5, #4294967295
 8005f44:	d159      	bne.n	8005ffa <HAL_SPI_Transmit+0x1a4>
 8005f46:	2d00      	cmp	r5, #0
 8005f48:	d059      	beq.n	8005ffe <HAL_SPI_Transmit+0x1a8>
    while (hspi->TxXferCount > 0U)
 8005f4a:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8005f4c:	b29b      	uxth	r3, r3
 8005f4e:	2b00      	cmp	r3, #0
 8005f50:	d033      	beq.n	8005fba <HAL_SPI_Transmit+0x164>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005f52:	6823      	ldr	r3, [r4, #0]
 8005f54:	689a      	ldr	r2, [r3, #8]
 8005f56:	f012 0f02 	tst.w	r2, #2
 8005f5a:	d0ec      	beq.n	8005f36 <HAL_SPI_Transmit+0xe0>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005f5c:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8005f5e:	8812      	ldrh	r2, [r2, #0]
 8005f60:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005f62:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8005f64:	3302      	adds	r3, #2
 8005f66:	6323      	str	r3, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 8005f68:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8005f6a:	b29b      	uxth	r3, r3
 8005f6c:	3b01      	subs	r3, #1
 8005f6e:	b29b      	uxth	r3, r3
 8005f70:	86e3      	strh	r3, [r4, #54]	; 0x36
 8005f72:	e7ea      	b.n	8005f4a <HAL_SPI_Transmit+0xf4>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005f74:	f7fe fbcc 	bl	8004710 <HAL_GetTick>
 8005f78:	1bc0      	subs	r0, r0, r7
 8005f7a:	42a8      	cmp	r0, r5
 8005f7c:	d302      	bcc.n	8005f84 <HAL_SPI_Transmit+0x12e>
 8005f7e:	f1b5 3fff 	cmp.w	r5, #4294967295
 8005f82:	d13e      	bne.n	8006002 <HAL_SPI_Transmit+0x1ac>
 8005f84:	2d00      	cmp	r5, #0
 8005f86:	d03e      	beq.n	8006006 <HAL_SPI_Transmit+0x1b0>
    while (hspi->TxXferCount > 0U)
 8005f88:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8005f8a:	b29b      	uxth	r3, r3
 8005f8c:	b1ab      	cbz	r3, 8005fba <HAL_SPI_Transmit+0x164>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005f8e:	6823      	ldr	r3, [r4, #0]
 8005f90:	689a      	ldr	r2, [r3, #8]
 8005f92:	f012 0f02 	tst.w	r2, #2
 8005f96:	d0ed      	beq.n	8005f74 <HAL_SPI_Transmit+0x11e>
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005f98:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8005f9a:	7812      	ldrb	r2, [r2, #0]
 8005f9c:	731a      	strb	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8005f9e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8005fa0:	3301      	adds	r3, #1
 8005fa2:	6323      	str	r3, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 8005fa4:	f8b4 c036 	ldrh.w	ip, [r4, #54]	; 0x36
 8005fa8:	fa1f fc8c 	uxth.w	ip, ip
 8005fac:	f10c 3cff 	add.w	ip, ip, #4294967295
 8005fb0:	fa1f fc8c 	uxth.w	ip, ip
 8005fb4:	f8a4 c036 	strh.w	ip, [r4, #54]	; 0x36
 8005fb8:	e7e6      	b.n	8005f88 <HAL_SPI_Transmit+0x132>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005fba:	463a      	mov	r2, r7
 8005fbc:	4629      	mov	r1, r5
 8005fbe:	4620      	mov	r0, r4
 8005fc0:	f7ff feb6 	bl	8005d30 <SPI_EndRxTxTransaction>
 8005fc4:	b108      	cbz	r0, 8005fca <HAL_SPI_Transmit+0x174>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005fc6:	2320      	movs	r3, #32
 8005fc8:	6563      	str	r3, [r4, #84]	; 0x54
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005fca:	68a3      	ldr	r3, [r4, #8]
 8005fcc:	b933      	cbnz	r3, 8005fdc <HAL_SPI_Transmit+0x186>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005fce:	9301      	str	r3, [sp, #4]
 8005fd0:	6823      	ldr	r3, [r4, #0]
 8005fd2:	68da      	ldr	r2, [r3, #12]
 8005fd4:	9201      	str	r2, [sp, #4]
 8005fd6:	689b      	ldr	r3, [r3, #8]
 8005fd8:	9301      	str	r3, [sp, #4]
 8005fda:	9b01      	ldr	r3, [sp, #4]
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005fdc:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8005fde:	b913      	cbnz	r3, 8005fe6 <HAL_SPI_Transmit+0x190>
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005fe0:	2600      	movs	r6, #0
 8005fe2:	e000      	b.n	8005fe6 <HAL_SPI_Transmit+0x190>
    errorcode = HAL_BUSY;
 8005fe4:	2602      	movs	r6, #2
  hspi->State = HAL_SPI_STATE_READY;
 8005fe6:	2301      	movs	r3, #1
 8005fe8:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8005fec:	2300      	movs	r3, #0
 8005fee:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
}
 8005ff2:	4630      	mov	r0, r6
 8005ff4:	b003      	add	sp, #12
 8005ff6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
          errorcode = HAL_TIMEOUT;
 8005ffa:	2603      	movs	r6, #3
 8005ffc:	e7f3      	b.n	8005fe6 <HAL_SPI_Transmit+0x190>
 8005ffe:	2603      	movs	r6, #3
 8006000:	e7f1      	b.n	8005fe6 <HAL_SPI_Transmit+0x190>
          errorcode = HAL_TIMEOUT;
 8006002:	2603      	movs	r6, #3
 8006004:	e7ef      	b.n	8005fe6 <HAL_SPI_Transmit+0x190>
 8006006:	2603      	movs	r6, #3
 8006008:	e7ed      	b.n	8005fe6 <HAL_SPI_Transmit+0x190>
  __HAL_LOCK(hspi);
 800600a:	2602      	movs	r6, #2
 800600c:	e7f1      	b.n	8005ff2 <HAL_SPI_Transmit+0x19c>

0800600e <HAL_SPI_TransmitReceive>:
{
 800600e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006012:	b083      	sub	sp, #12
 8006014:	461f      	mov	r7, r3
 8006016:	9d0a      	ldr	r5, [sp, #40]	; 0x28
  __HAL_LOCK(hspi);
 8006018:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
 800601c:	2b01      	cmp	r3, #1
 800601e:	f000 8110 	beq.w	8006242 <HAL_SPI_TransmitReceive+0x234>
 8006022:	4604      	mov	r4, r0
 8006024:	4688      	mov	r8, r1
 8006026:	4691      	mov	r9, r2
 8006028:	2301      	movs	r3, #1
 800602a:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50
  tickstart = HAL_GetTick();
 800602e:	f7fe fb6f 	bl	8004710 <HAL_GetTick>
 8006032:	4606      	mov	r6, r0
  tmp_state           = hspi->State;
 8006034:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
 8006038:	b2db      	uxtb	r3, r3
  tmp_mode            = hspi->Init.Mode;
 800603a:	6862      	ldr	r2, [r4, #4]
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800603c:	2b01      	cmp	r3, #1
 800603e:	d00a      	beq.n	8006056 <HAL_SPI_TransmitReceive+0x48>
 8006040:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
 8006044:	f040 80e3 	bne.w	800620e <HAL_SPI_TransmitReceive+0x200>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8006048:	68a2      	ldr	r2, [r4, #8]
 800604a:	2a00      	cmp	r2, #0
 800604c:	f040 80e9 	bne.w	8006222 <HAL_SPI_TransmitReceive+0x214>
 8006050:	2b04      	cmp	r3, #4
 8006052:	f040 80e8 	bne.w	8006226 <HAL_SPI_TransmitReceive+0x218>
  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8006056:	f1b8 0f00 	cmp.w	r8, #0
 800605a:	f000 80e6 	beq.w	800622a <HAL_SPI_TransmitReceive+0x21c>
 800605e:	f1b9 0f00 	cmp.w	r9, #0
 8006062:	f000 80e4 	beq.w	800622e <HAL_SPI_TransmitReceive+0x220>
 8006066:	2f00      	cmp	r7, #0
 8006068:	f000 80e3 	beq.w	8006232 <HAL_SPI_TransmitReceive+0x224>
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800606c:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
 8006070:	b2db      	uxtb	r3, r3
 8006072:	2b04      	cmp	r3, #4
 8006074:	d002      	beq.n	800607c <HAL_SPI_TransmitReceive+0x6e>
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8006076:	2305      	movs	r3, #5
 8006078:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800607c:	2300      	movs	r3, #0
 800607e:	6563      	str	r3, [r4, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8006080:	f8c4 9038 	str.w	r9, [r4, #56]	; 0x38
  hspi->RxXferCount = Size;
 8006084:	87e7      	strh	r7, [r4, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8006086:	87a7      	strh	r7, [r4, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8006088:	f8c4 8030 	str.w	r8, [r4, #48]	; 0x30
  hspi->TxXferCount = Size;
 800608c:	86e7      	strh	r7, [r4, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800608e:	86a7      	strh	r7, [r4, #52]	; 0x34
  hspi->RxISR       = NULL;
 8006090:	6423      	str	r3, [r4, #64]	; 0x40
  hspi->TxISR       = NULL;
 8006092:	6463      	str	r3, [r4, #68]	; 0x44
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006094:	6823      	ldr	r3, [r4, #0]
 8006096:	681a      	ldr	r2, [r3, #0]
 8006098:	f012 0f40 	tst.w	r2, #64	; 0x40
 800609c:	d103      	bne.n	80060a6 <HAL_SPI_TransmitReceive+0x98>
    __HAL_SPI_ENABLE(hspi);
 800609e:	681a      	ldr	r2, [r3, #0]
 80060a0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80060a4:	601a      	str	r2, [r3, #0]
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80060a6:	68e3      	ldr	r3, [r4, #12]
 80060a8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80060ac:	d011      	beq.n	80060d2 <HAL_SPI_TransmitReceive+0xc4>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80060ae:	6863      	ldr	r3, [r4, #4]
 80060b0:	b10b      	cbz	r3, 80060b6 <HAL_SPI_TransmitReceive+0xa8>
 80060b2:	2f01      	cmp	r7, #1
 80060b4:	d10b      	bne.n	80060ce <HAL_SPI_TransmitReceive+0xc0>
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80060b6:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80060b8:	6823      	ldr	r3, [r4, #0]
 80060ba:	7812      	ldrb	r2, [r2, #0]
 80060bc:	731a      	strb	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80060be:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80060c0:	3301      	adds	r3, #1
 80060c2:	6323      	str	r3, [r4, #48]	; 0x30
      hspi->TxXferCount--;
 80060c4:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80060c6:	b29b      	uxth	r3, r3
 80060c8:	3b01      	subs	r3, #1
 80060ca:	b29b      	uxth	r3, r3
 80060cc:	86e3      	strh	r3, [r4, #54]	; 0x36
        txallowed = 1U;
 80060ce:	2701      	movs	r7, #1
 80060d0:	e06b      	b.n	80061aa <HAL_SPI_TransmitReceive+0x19c>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80060d2:	6863      	ldr	r3, [r4, #4]
 80060d4:	b10b      	cbz	r3, 80060da <HAL_SPI_TransmitReceive+0xcc>
 80060d6:	2f01      	cmp	r7, #1
 80060d8:	d10b      	bne.n	80060f2 <HAL_SPI_TransmitReceive+0xe4>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80060da:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80060dc:	6823      	ldr	r3, [r4, #0]
 80060de:	8812      	ldrh	r2, [r2, #0]
 80060e0:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80060e2:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80060e4:	3302      	adds	r3, #2
 80060e6:	6323      	str	r3, [r4, #48]	; 0x30
      hspi->TxXferCount--;
 80060e8:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80060ea:	b29b      	uxth	r3, r3
 80060ec:	3b01      	subs	r3, #1
 80060ee:	b29b      	uxth	r3, r3
 80060f0:	86e3      	strh	r3, [r4, #54]	; 0x36
        txallowed = 1U;
 80060f2:	2701      	movs	r7, #1
 80060f4:	e01c      	b.n	8006130 <HAL_SPI_TransmitReceive+0x122>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80060f6:	6823      	ldr	r3, [r4, #0]
 80060f8:	689a      	ldr	r2, [r3, #8]
 80060fa:	f012 0f01 	tst.w	r2, #1
 80060fe:	d00e      	beq.n	800611e <HAL_SPI_TransmitReceive+0x110>
 8006100:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 8006102:	b292      	uxth	r2, r2
 8006104:	b15a      	cbz	r2, 800611e <HAL_SPI_TransmitReceive+0x110>
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006106:	68da      	ldr	r2, [r3, #12]
 8006108:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800610a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800610c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800610e:	3302      	adds	r3, #2
 8006110:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->RxXferCount--;
 8006112:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8006114:	b29b      	uxth	r3, r3
 8006116:	3b01      	subs	r3, #1
 8006118:	b29b      	uxth	r3, r3
 800611a:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 1U;
 800611c:	2701      	movs	r7, #1
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800611e:	f7fe faf7 	bl	8004710 <HAL_GetTick>
 8006122:	1b80      	subs	r0, r0, r6
 8006124:	42a8      	cmp	r0, r5
 8006126:	d303      	bcc.n	8006130 <HAL_SPI_TransmitReceive+0x122>
 8006128:	f1b5 3fff 	cmp.w	r5, #4294967295
 800612c:	f040 8083 	bne.w	8006236 <HAL_SPI_TransmitReceive+0x228>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006130:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8006132:	b29b      	uxth	r3, r3
 8006134:	b91b      	cbnz	r3, 800613e <HAL_SPI_TransmitReceive+0x130>
 8006136:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8006138:	b29b      	uxth	r3, r3
 800613a:	2b00      	cmp	r3, #0
 800613c:	d053      	beq.n	80061e6 <HAL_SPI_TransmitReceive+0x1d8>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800613e:	6823      	ldr	r3, [r4, #0]
 8006140:	689a      	ldr	r2, [r3, #8]
 8006142:	f012 0f02 	tst.w	r2, #2
 8006146:	d0d6      	beq.n	80060f6 <HAL_SPI_TransmitReceive+0xe8>
 8006148:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 800614a:	b292      	uxth	r2, r2
 800614c:	2a00      	cmp	r2, #0
 800614e:	d0d2      	beq.n	80060f6 <HAL_SPI_TransmitReceive+0xe8>
 8006150:	2f00      	cmp	r7, #0
 8006152:	d0d0      	beq.n	80060f6 <HAL_SPI_TransmitReceive+0xe8>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006154:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8006156:	8812      	ldrh	r2, [r2, #0]
 8006158:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800615a:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800615c:	3302      	adds	r3, #2
 800615e:	6323      	str	r3, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 8006160:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8006162:	b29b      	uxth	r3, r3
 8006164:	3b01      	subs	r3, #1
 8006166:	b29b      	uxth	r3, r3
 8006168:	86e3      	strh	r3, [r4, #54]	; 0x36
        txallowed = 0U;
 800616a:	2700      	movs	r7, #0
 800616c:	e7c3      	b.n	80060f6 <HAL_SPI_TransmitReceive+0xe8>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800616e:	6823      	ldr	r3, [r4, #0]
 8006170:	689a      	ldr	r2, [r3, #8]
 8006172:	f012 0f01 	tst.w	r2, #1
 8006176:	d00e      	beq.n	8006196 <HAL_SPI_TransmitReceive+0x188>
 8006178:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 800617a:	b292      	uxth	r2, r2
 800617c:	b15a      	cbz	r2, 8006196 <HAL_SPI_TransmitReceive+0x188>
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800617e:	68da      	ldr	r2, [r3, #12]
 8006180:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8006182:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8006184:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8006186:	3301      	adds	r3, #1
 8006188:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->RxXferCount--;
 800618a:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800618c:	b29b      	uxth	r3, r3
 800618e:	3b01      	subs	r3, #1
 8006190:	b29b      	uxth	r3, r3
 8006192:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 1U;
 8006194:	2701      	movs	r7, #1
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8006196:	f7fe fabb 	bl	8004710 <HAL_GetTick>
 800619a:	1b83      	subs	r3, r0, r6
 800619c:	42ab      	cmp	r3, r5
 800619e:	d302      	bcc.n	80061a6 <HAL_SPI_TransmitReceive+0x198>
 80061a0:	f1b5 3fff 	cmp.w	r5, #4294967295
 80061a4:	d149      	bne.n	800623a <HAL_SPI_TransmitReceive+0x22c>
 80061a6:	2d00      	cmp	r5, #0
 80061a8:	d049      	beq.n	800623e <HAL_SPI_TransmitReceive+0x230>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80061aa:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80061ac:	b29b      	uxth	r3, r3
 80061ae:	b913      	cbnz	r3, 80061b6 <HAL_SPI_TransmitReceive+0x1a8>
 80061b0:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80061b2:	b29b      	uxth	r3, r3
 80061b4:	b1bb      	cbz	r3, 80061e6 <HAL_SPI_TransmitReceive+0x1d8>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80061b6:	6823      	ldr	r3, [r4, #0]
 80061b8:	689a      	ldr	r2, [r3, #8]
 80061ba:	f012 0f02 	tst.w	r2, #2
 80061be:	d0d6      	beq.n	800616e <HAL_SPI_TransmitReceive+0x160>
 80061c0:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 80061c2:	b292      	uxth	r2, r2
 80061c4:	2a00      	cmp	r2, #0
 80061c6:	d0d2      	beq.n	800616e <HAL_SPI_TransmitReceive+0x160>
 80061c8:	2f00      	cmp	r7, #0
 80061ca:	d0d0      	beq.n	800616e <HAL_SPI_TransmitReceive+0x160>
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80061cc:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80061ce:	7812      	ldrb	r2, [r2, #0]
 80061d0:	731a      	strb	r2, [r3, #12]
        hspi->pTxBuffPtr++;
 80061d2:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80061d4:	3301      	adds	r3, #1
 80061d6:	6323      	str	r3, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 80061d8:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80061da:	b29b      	uxth	r3, r3
 80061dc:	3b01      	subs	r3, #1
 80061de:	b29b      	uxth	r3, r3
 80061e0:	86e3      	strh	r3, [r4, #54]	; 0x36
        txallowed = 0U;
 80061e2:	2700      	movs	r7, #0
 80061e4:	e7c3      	b.n	800616e <HAL_SPI_TransmitReceive+0x160>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80061e6:	4632      	mov	r2, r6
 80061e8:	4629      	mov	r1, r5
 80061ea:	4620      	mov	r0, r4
 80061ec:	f7ff fda0 	bl	8005d30 <SPI_EndRxTxTransaction>
 80061f0:	b948      	cbnz	r0, 8006206 <HAL_SPI_TransmitReceive+0x1f8>
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80061f2:	68a3      	ldr	r3, [r4, #8]
 80061f4:	b963      	cbnz	r3, 8006210 <HAL_SPI_TransmitReceive+0x202>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80061f6:	9301      	str	r3, [sp, #4]
 80061f8:	6823      	ldr	r3, [r4, #0]
 80061fa:	68da      	ldr	r2, [r3, #12]
 80061fc:	9201      	str	r2, [sp, #4]
 80061fe:	689b      	ldr	r3, [r3, #8]
 8006200:	9301      	str	r3, [sp, #4]
 8006202:	9b01      	ldr	r3, [sp, #4]
 8006204:	e004      	b.n	8006210 <HAL_SPI_TransmitReceive+0x202>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006206:	2320      	movs	r3, #32
 8006208:	6563      	str	r3, [r4, #84]	; 0x54
    errorcode = HAL_ERROR;
 800620a:	2001      	movs	r0, #1
    goto error;
 800620c:	e000      	b.n	8006210 <HAL_SPI_TransmitReceive+0x202>
    errorcode = HAL_BUSY;
 800620e:	2002      	movs	r0, #2
  hspi->State = HAL_SPI_STATE_READY;
 8006210:	2301      	movs	r3, #1
 8006212:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8006216:	2300      	movs	r3, #0
 8006218:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
}
 800621c:	b003      	add	sp, #12
 800621e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    errorcode = HAL_BUSY;
 8006222:	2002      	movs	r0, #2
 8006224:	e7f4      	b.n	8006210 <HAL_SPI_TransmitReceive+0x202>
 8006226:	2002      	movs	r0, #2
 8006228:	e7f2      	b.n	8006210 <HAL_SPI_TransmitReceive+0x202>
    errorcode = HAL_ERROR;
 800622a:	2001      	movs	r0, #1
 800622c:	e7f0      	b.n	8006210 <HAL_SPI_TransmitReceive+0x202>
 800622e:	2001      	movs	r0, #1
 8006230:	e7ee      	b.n	8006210 <HAL_SPI_TransmitReceive+0x202>
 8006232:	2001      	movs	r0, #1
 8006234:	e7ec      	b.n	8006210 <HAL_SPI_TransmitReceive+0x202>
        errorcode = HAL_TIMEOUT;
 8006236:	2003      	movs	r0, #3
 8006238:	e7ea      	b.n	8006210 <HAL_SPI_TransmitReceive+0x202>
        errorcode = HAL_TIMEOUT;
 800623a:	2003      	movs	r0, #3
 800623c:	e7e8      	b.n	8006210 <HAL_SPI_TransmitReceive+0x202>
 800623e:	2003      	movs	r0, #3
 8006240:	e7e6      	b.n	8006210 <HAL_SPI_TransmitReceive+0x202>
  __HAL_LOCK(hspi);
 8006242:	2002      	movs	r0, #2
 8006244:	e7ea      	b.n	800621c <HAL_SPI_TransmitReceive+0x20e>

08006246 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006246:	b410      	push	{r4}
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006248:	6a03      	ldr	r3, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800624a:	6a04      	ldr	r4, [r0, #32]
 800624c:	f024 0401 	bic.w	r4, r4, #1
 8006250:	6204      	str	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006252:	6984      	ldr	r4, [r0, #24]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006254:	f024 0cf0 	bic.w	ip, r4, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006258:	ea4c 1202 	orr.w	r2, ip, r2, lsl #4

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800625c:	f023 030a 	bic.w	r3, r3, #10
  tmpccer |= TIM_ICPolarity;
 8006260:	430b      	orrs	r3, r1

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006262:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 8006264:	6203      	str	r3, [r0, #32]
}
 8006266:	f85d 4b04 	ldr.w	r4, [sp], #4
 800626a:	4770      	bx	lr

0800626c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800626c:	b410      	push	{r4}
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800626e:	6a04      	ldr	r4, [r0, #32]
 8006270:	f024 0410 	bic.w	r4, r4, #16
 8006274:	6204      	str	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006276:	6984      	ldr	r4, [r0, #24]
  tmpccer = TIMx->CCER;
 8006278:	6a03      	ldr	r3, [r0, #32]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800627a:	f424 4c70 	bic.w	ip, r4, #61440	; 0xf000
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800627e:	ea4c 3202 	orr.w	r2, ip, r2, lsl #12

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006282:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 8006286:	ea43 1301 	orr.w	r3, r3, r1, lsl #4

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800628a:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 800628c:	6203      	str	r3, [r0, #32]
}
 800628e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006292:	4770      	bx	lr

08006294 <TIM_ITRx_SetConfig>:
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006294:	6883      	ldr	r3, [r0, #8]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006296:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800629a:	430b      	orrs	r3, r1
 800629c:	f043 0307 	orr.w	r3, r3, #7
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80062a0:	6083      	str	r3, [r0, #8]
}
 80062a2:	4770      	bx	lr

080062a4 <HAL_TIM_Base_Start_IT>:
  if (htim->State != HAL_TIM_STATE_READY)
 80062a4:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80062a8:	b2db      	uxtb	r3, r3
 80062aa:	2b01      	cmp	r3, #1
 80062ac:	d12f      	bne.n	800630e <HAL_TIM_Base_Start_IT+0x6a>
  htim->State = HAL_TIM_STATE_BUSY;
 80062ae:	2302      	movs	r3, #2
 80062b0:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80062b4:	6802      	ldr	r2, [r0, #0]
 80062b6:	68d3      	ldr	r3, [r2, #12]
 80062b8:	f043 0301 	orr.w	r3, r3, #1
 80062bc:	60d3      	str	r3, [r2, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80062be:	6803      	ldr	r3, [r0, #0]
 80062c0:	4a15      	ldr	r2, [pc, #84]	; (8006318 <HAL_TIM_Base_Start_IT+0x74>)
 80062c2:	4293      	cmp	r3, r2
 80062c4:	d018      	beq.n	80062f8 <HAL_TIM_Base_Start_IT+0x54>
 80062c6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80062ca:	d015      	beq.n	80062f8 <HAL_TIM_Base_Start_IT+0x54>
 80062cc:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 80062d0:	4293      	cmp	r3, r2
 80062d2:	d011      	beq.n	80062f8 <HAL_TIM_Base_Start_IT+0x54>
 80062d4:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80062d8:	4293      	cmp	r3, r2
 80062da:	d00d      	beq.n	80062f8 <HAL_TIM_Base_Start_IT+0x54>
 80062dc:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80062e0:	4293      	cmp	r3, r2
 80062e2:	d009      	beq.n	80062f8 <HAL_TIM_Base_Start_IT+0x54>
 80062e4:	f502 329a 	add.w	r2, r2, #78848	; 0x13400
 80062e8:	4293      	cmp	r3, r2
 80062ea:	d005      	beq.n	80062f8 <HAL_TIM_Base_Start_IT+0x54>
    __HAL_TIM_ENABLE(htim);
 80062ec:	681a      	ldr	r2, [r3, #0]
 80062ee:	f042 0201 	orr.w	r2, r2, #1
 80062f2:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 80062f4:	2000      	movs	r0, #0
 80062f6:	4770      	bx	lr
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80062f8:	689a      	ldr	r2, [r3, #8]
 80062fa:	f002 0207 	and.w	r2, r2, #7
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80062fe:	2a06      	cmp	r2, #6
 8006300:	d007      	beq.n	8006312 <HAL_TIM_Base_Start_IT+0x6e>
      __HAL_TIM_ENABLE(htim);
 8006302:	681a      	ldr	r2, [r3, #0]
 8006304:	f042 0201 	orr.w	r2, r2, #1
 8006308:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 800630a:	2000      	movs	r0, #0
 800630c:	4770      	bx	lr
    return HAL_ERROR;
 800630e:	2001      	movs	r0, #1
 8006310:	4770      	bx	lr
  return HAL_OK;
 8006312:	2000      	movs	r0, #0
}
 8006314:	4770      	bx	lr
 8006316:	bf00      	nop
 8006318:	40010000 	.word	0x40010000

0800631c <HAL_TIM_Base_Stop_IT>:
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 800631c:	6802      	ldr	r2, [r0, #0]
 800631e:	68d3      	ldr	r3, [r2, #12]
 8006320:	f023 0301 	bic.w	r3, r3, #1
 8006324:	60d3      	str	r3, [r2, #12]
  __HAL_TIM_DISABLE(htim);
 8006326:	6803      	ldr	r3, [r0, #0]
 8006328:	6a19      	ldr	r1, [r3, #32]
 800632a:	f241 1211 	movw	r2, #4369	; 0x1111
 800632e:	4211      	tst	r1, r2
 8006330:	d108      	bne.n	8006344 <HAL_TIM_Base_Stop_IT+0x28>
 8006332:	6a19      	ldr	r1, [r3, #32]
 8006334:	f240 4244 	movw	r2, #1092	; 0x444
 8006338:	4211      	tst	r1, r2
 800633a:	d103      	bne.n	8006344 <HAL_TIM_Base_Stop_IT+0x28>
 800633c:	681a      	ldr	r2, [r3, #0]
 800633e:	f022 0201 	bic.w	r2, r2, #1
 8006342:	601a      	str	r2, [r3, #0]
  htim->State = HAL_TIM_STATE_READY;
 8006344:	2301      	movs	r3, #1
 8006346:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
}
 800634a:	2000      	movs	r0, #0
 800634c:	4770      	bx	lr

0800634e <HAL_TIM_PeriodElapsedCallback>:
}
 800634e:	4770      	bx	lr

08006350 <HAL_TIM_OC_DelayElapsedCallback>:
}
 8006350:	4770      	bx	lr

08006352 <HAL_TIM_IC_CaptureCallback>:
}
 8006352:	4770      	bx	lr

08006354 <HAL_TIM_PWM_PulseFinishedCallback>:
}
 8006354:	4770      	bx	lr

08006356 <HAL_TIM_TriggerCallback>:
}
 8006356:	4770      	bx	lr

08006358 <HAL_TIM_IRQHandler>:
{
 8006358:	b510      	push	{r4, lr}
 800635a:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800635c:	6803      	ldr	r3, [r0, #0]
 800635e:	691a      	ldr	r2, [r3, #16]
 8006360:	f012 0f02 	tst.w	r2, #2
 8006364:	d011      	beq.n	800638a <HAL_TIM_IRQHandler+0x32>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006366:	68da      	ldr	r2, [r3, #12]
 8006368:	f012 0f02 	tst.w	r2, #2
 800636c:	d00d      	beq.n	800638a <HAL_TIM_IRQHandler+0x32>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800636e:	f06f 0202 	mvn.w	r2, #2
 8006372:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006374:	2301      	movs	r3, #1
 8006376:	7703      	strb	r3, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006378:	6803      	ldr	r3, [r0, #0]
 800637a:	699b      	ldr	r3, [r3, #24]
 800637c:	f013 0f03 	tst.w	r3, #3
 8006380:	d070      	beq.n	8006464 <HAL_TIM_IRQHandler+0x10c>
          HAL_TIM_IC_CaptureCallback(htim);
 8006382:	f7ff ffe6 	bl	8006352 <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006386:	2300      	movs	r3, #0
 8006388:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800638a:	6823      	ldr	r3, [r4, #0]
 800638c:	691a      	ldr	r2, [r3, #16]
 800638e:	f012 0f04 	tst.w	r2, #4
 8006392:	d012      	beq.n	80063ba <HAL_TIM_IRQHandler+0x62>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006394:	68da      	ldr	r2, [r3, #12]
 8006396:	f012 0f04 	tst.w	r2, #4
 800639a:	d00e      	beq.n	80063ba <HAL_TIM_IRQHandler+0x62>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800639c:	f06f 0204 	mvn.w	r2, #4
 80063a0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80063a2:	2302      	movs	r3, #2
 80063a4:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80063a6:	6823      	ldr	r3, [r4, #0]
 80063a8:	699b      	ldr	r3, [r3, #24]
 80063aa:	f413 7f40 	tst.w	r3, #768	; 0x300
 80063ae:	d05f      	beq.n	8006470 <HAL_TIM_IRQHandler+0x118>
        HAL_TIM_IC_CaptureCallback(htim);
 80063b0:	4620      	mov	r0, r4
 80063b2:	f7ff ffce 	bl	8006352 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80063b6:	2300      	movs	r3, #0
 80063b8:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80063ba:	6823      	ldr	r3, [r4, #0]
 80063bc:	691a      	ldr	r2, [r3, #16]
 80063be:	f012 0f08 	tst.w	r2, #8
 80063c2:	d012      	beq.n	80063ea <HAL_TIM_IRQHandler+0x92>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80063c4:	68da      	ldr	r2, [r3, #12]
 80063c6:	f012 0f08 	tst.w	r2, #8
 80063ca:	d00e      	beq.n	80063ea <HAL_TIM_IRQHandler+0x92>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80063cc:	f06f 0208 	mvn.w	r2, #8
 80063d0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80063d2:	2304      	movs	r3, #4
 80063d4:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80063d6:	6823      	ldr	r3, [r4, #0]
 80063d8:	69db      	ldr	r3, [r3, #28]
 80063da:	f013 0f03 	tst.w	r3, #3
 80063de:	d04e      	beq.n	800647e <HAL_TIM_IRQHandler+0x126>
        HAL_TIM_IC_CaptureCallback(htim);
 80063e0:	4620      	mov	r0, r4
 80063e2:	f7ff ffb6 	bl	8006352 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80063e6:	2300      	movs	r3, #0
 80063e8:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80063ea:	6823      	ldr	r3, [r4, #0]
 80063ec:	691a      	ldr	r2, [r3, #16]
 80063ee:	f012 0f10 	tst.w	r2, #16
 80063f2:	d012      	beq.n	800641a <HAL_TIM_IRQHandler+0xc2>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80063f4:	68da      	ldr	r2, [r3, #12]
 80063f6:	f012 0f10 	tst.w	r2, #16
 80063fa:	d00e      	beq.n	800641a <HAL_TIM_IRQHandler+0xc2>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80063fc:	f06f 0210 	mvn.w	r2, #16
 8006400:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006402:	2308      	movs	r3, #8
 8006404:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006406:	6823      	ldr	r3, [r4, #0]
 8006408:	69db      	ldr	r3, [r3, #28]
 800640a:	f413 7f40 	tst.w	r3, #768	; 0x300
 800640e:	d03d      	beq.n	800648c <HAL_TIM_IRQHandler+0x134>
        HAL_TIM_IC_CaptureCallback(htim);
 8006410:	4620      	mov	r0, r4
 8006412:	f7ff ff9e 	bl	8006352 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006416:	2300      	movs	r3, #0
 8006418:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800641a:	6823      	ldr	r3, [r4, #0]
 800641c:	691a      	ldr	r2, [r3, #16]
 800641e:	f012 0f01 	tst.w	r2, #1
 8006422:	d003      	beq.n	800642c <HAL_TIM_IRQHandler+0xd4>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006424:	68da      	ldr	r2, [r3, #12]
 8006426:	f012 0f01 	tst.w	r2, #1
 800642a:	d136      	bne.n	800649a <HAL_TIM_IRQHandler+0x142>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800642c:	6823      	ldr	r3, [r4, #0]
 800642e:	691a      	ldr	r2, [r3, #16]
 8006430:	f012 0f80 	tst.w	r2, #128	; 0x80
 8006434:	d003      	beq.n	800643e <HAL_TIM_IRQHandler+0xe6>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006436:	68da      	ldr	r2, [r3, #12]
 8006438:	f012 0f80 	tst.w	r2, #128	; 0x80
 800643c:	d134      	bne.n	80064a8 <HAL_TIM_IRQHandler+0x150>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800643e:	6823      	ldr	r3, [r4, #0]
 8006440:	691a      	ldr	r2, [r3, #16]
 8006442:	f012 0f40 	tst.w	r2, #64	; 0x40
 8006446:	d003      	beq.n	8006450 <HAL_TIM_IRQHandler+0xf8>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006448:	68da      	ldr	r2, [r3, #12]
 800644a:	f012 0f40 	tst.w	r2, #64	; 0x40
 800644e:	d132      	bne.n	80064b6 <HAL_TIM_IRQHandler+0x15e>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006450:	6823      	ldr	r3, [r4, #0]
 8006452:	691a      	ldr	r2, [r3, #16]
 8006454:	f012 0f20 	tst.w	r2, #32
 8006458:	d003      	beq.n	8006462 <HAL_TIM_IRQHandler+0x10a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800645a:	68da      	ldr	r2, [r3, #12]
 800645c:	f012 0f20 	tst.w	r2, #32
 8006460:	d130      	bne.n	80064c4 <HAL_TIM_IRQHandler+0x16c>
}
 8006462:	bd10      	pop	{r4, pc}
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006464:	f7ff ff74 	bl	8006350 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006468:	4620      	mov	r0, r4
 800646a:	f7ff ff73 	bl	8006354 <HAL_TIM_PWM_PulseFinishedCallback>
 800646e:	e78a      	b.n	8006386 <HAL_TIM_IRQHandler+0x2e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006470:	4620      	mov	r0, r4
 8006472:	f7ff ff6d 	bl	8006350 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006476:	4620      	mov	r0, r4
 8006478:	f7ff ff6c 	bl	8006354 <HAL_TIM_PWM_PulseFinishedCallback>
 800647c:	e79b      	b.n	80063b6 <HAL_TIM_IRQHandler+0x5e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800647e:	4620      	mov	r0, r4
 8006480:	f7ff ff66 	bl	8006350 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006484:	4620      	mov	r0, r4
 8006486:	f7ff ff65 	bl	8006354 <HAL_TIM_PWM_PulseFinishedCallback>
 800648a:	e7ac      	b.n	80063e6 <HAL_TIM_IRQHandler+0x8e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800648c:	4620      	mov	r0, r4
 800648e:	f7ff ff5f 	bl	8006350 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006492:	4620      	mov	r0, r4
 8006494:	f7ff ff5e 	bl	8006354 <HAL_TIM_PWM_PulseFinishedCallback>
 8006498:	e7bd      	b.n	8006416 <HAL_TIM_IRQHandler+0xbe>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800649a:	f06f 0201 	mvn.w	r2, #1
 800649e:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 80064a0:	4620      	mov	r0, r4
 80064a2:	f7ff ff54 	bl	800634e <HAL_TIM_PeriodElapsedCallback>
 80064a6:	e7c1      	b.n	800642c <HAL_TIM_IRQHandler+0xd4>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80064a8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80064ac:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 80064ae:	4620      	mov	r0, r4
 80064b0:	f000 f955 	bl	800675e <HAL_TIMEx_BreakCallback>
 80064b4:	e7c3      	b.n	800643e <HAL_TIM_IRQHandler+0xe6>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80064b6:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80064ba:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 80064bc:	4620      	mov	r0, r4
 80064be:	f7ff ff4a 	bl	8006356 <HAL_TIM_TriggerCallback>
 80064c2:	e7c5      	b.n	8006450 <HAL_TIM_IRQHandler+0xf8>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80064c4:	f06f 0220 	mvn.w	r2, #32
 80064c8:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutCallback(htim);
 80064ca:	4620      	mov	r0, r4
 80064cc:	f000 f946 	bl	800675c <HAL_TIMEx_CommutCallback>
}
 80064d0:	e7c7      	b.n	8006462 <HAL_TIM_IRQHandler+0x10a>
	...

080064d4 <TIM_Base_SetConfig>:
  tmpcr1 = TIMx->CR1;
 80064d4:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80064d6:	4a25      	ldr	r2, [pc, #148]	; (800656c <TIM_Base_SetConfig+0x98>)
 80064d8:	4290      	cmp	r0, r2
 80064da:	d00e      	beq.n	80064fa <TIM_Base_SetConfig+0x26>
 80064dc:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 80064e0:	d00b      	beq.n	80064fa <TIM_Base_SetConfig+0x26>
 80064e2:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 80064e6:	4290      	cmp	r0, r2
 80064e8:	d007      	beq.n	80064fa <TIM_Base_SetConfig+0x26>
 80064ea:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80064ee:	4290      	cmp	r0, r2
 80064f0:	d003      	beq.n	80064fa <TIM_Base_SetConfig+0x26>
 80064f2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80064f6:	4290      	cmp	r0, r2
 80064f8:	d103      	bne.n	8006502 <TIM_Base_SetConfig+0x2e>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80064fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 80064fe:	684a      	ldr	r2, [r1, #4]
 8006500:	4313      	orrs	r3, r2
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006502:	4a1a      	ldr	r2, [pc, #104]	; (800656c <TIM_Base_SetConfig+0x98>)
 8006504:	4290      	cmp	r0, r2
 8006506:	d01a      	beq.n	800653e <TIM_Base_SetConfig+0x6a>
 8006508:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 800650c:	d017      	beq.n	800653e <TIM_Base_SetConfig+0x6a>
 800650e:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8006512:	4290      	cmp	r0, r2
 8006514:	d013      	beq.n	800653e <TIM_Base_SetConfig+0x6a>
 8006516:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800651a:	4290      	cmp	r0, r2
 800651c:	d00f      	beq.n	800653e <TIM_Base_SetConfig+0x6a>
 800651e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006522:	4290      	cmp	r0, r2
 8006524:	d00b      	beq.n	800653e <TIM_Base_SetConfig+0x6a>
 8006526:	f502 329a 	add.w	r2, r2, #78848	; 0x13400
 800652a:	4290      	cmp	r0, r2
 800652c:	d007      	beq.n	800653e <TIM_Base_SetConfig+0x6a>
 800652e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006532:	4290      	cmp	r0, r2
 8006534:	d003      	beq.n	800653e <TIM_Base_SetConfig+0x6a>
 8006536:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800653a:	4290      	cmp	r0, r2
 800653c:	d103      	bne.n	8006546 <TIM_Base_SetConfig+0x72>
    tmpcr1 &= ~TIM_CR1_CKD;
 800653e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006542:	68ca      	ldr	r2, [r1, #12]
 8006544:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006546:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800654a:	694a      	ldr	r2, [r1, #20]
 800654c:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 800654e:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006550:	688b      	ldr	r3, [r1, #8]
 8006552:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8006554:	680b      	ldr	r3, [r1, #0]
 8006556:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006558:	4b04      	ldr	r3, [pc, #16]	; (800656c <TIM_Base_SetConfig+0x98>)
 800655a:	4298      	cmp	r0, r3
 800655c:	d002      	beq.n	8006564 <TIM_Base_SetConfig+0x90>
  TIMx->EGR = TIM_EGR_UG;
 800655e:	2301      	movs	r3, #1
 8006560:	6143      	str	r3, [r0, #20]
}
 8006562:	4770      	bx	lr
    TIMx->RCR = Structure->RepetitionCounter;
 8006564:	690b      	ldr	r3, [r1, #16]
 8006566:	6303      	str	r3, [r0, #48]	; 0x30
 8006568:	e7f9      	b.n	800655e <TIM_Base_SetConfig+0x8a>
 800656a:	bf00      	nop
 800656c:	40010000 	.word	0x40010000

08006570 <HAL_TIM_Base_Init>:
  if (htim == NULL)
 8006570:	b340      	cbz	r0, 80065c4 <HAL_TIM_Base_Init+0x54>
{
 8006572:	b510      	push	{r4, lr}
 8006574:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 8006576:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800657a:	b1f3      	cbz	r3, 80065ba <HAL_TIM_Base_Init+0x4a>
  htim->State = HAL_TIM_STATE_BUSY;
 800657c:	2302      	movs	r3, #2
 800657e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006582:	4621      	mov	r1, r4
 8006584:	f851 0b04 	ldr.w	r0, [r1], #4
 8006588:	f7ff ffa4 	bl	80064d4 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800658c:	2301      	movs	r3, #1
 800658e:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006592:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 8006596:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 800659a:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 800659e:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80065a2:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80065a6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80065aa:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 80065ae:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
  htim->State = HAL_TIM_STATE_READY;
 80065b2:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 80065b6:	2000      	movs	r0, #0
}
 80065b8:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 80065ba:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 80065be:	f7fa fe11 	bl	80011e4 <HAL_TIM_Base_MspInit>
 80065c2:	e7db      	b.n	800657c <HAL_TIM_Base_Init+0xc>
    return HAL_ERROR;
 80065c4:	2001      	movs	r0, #1
}
 80065c6:	4770      	bx	lr

080065c8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80065c8:	b410      	push	{r4}
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80065ca:	6884      	ldr	r4, [r0, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80065cc:	f424 4c7f 	bic.w	ip, r4, #65280	; 0xff00

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80065d0:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
 80065d4:	430a      	orrs	r2, r1
 80065d6:	ea42 020c 	orr.w	r2, r2, ip

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80065da:	6082      	str	r2, [r0, #8]
}
 80065dc:	f85d 4b04 	ldr.w	r4, [sp], #4
 80065e0:	4770      	bx	lr

080065e2 <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 80065e2:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80065e6:	2b01      	cmp	r3, #1
 80065e8:	d078      	beq.n	80066dc <HAL_TIM_ConfigClockSource+0xfa>
{
 80065ea:	b510      	push	{r4, lr}
 80065ec:	4604      	mov	r4, r0
  __HAL_LOCK(htim);
 80065ee:	2301      	movs	r3, #1
 80065f0:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 80065f4:	2302      	movs	r3, #2
 80065f6:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  tmpsmcr = htim->Instance->SMCR;
 80065fa:	6802      	ldr	r2, [r0, #0]
 80065fc:	6893      	ldr	r3, [r2, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80065fe:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006602:	f023 0377 	bic.w	r3, r3, #119	; 0x77
  htim->Instance->SMCR = tmpsmcr;
 8006606:	6093      	str	r3, [r2, #8]
  switch (sClockSourceConfig->ClockSource)
 8006608:	680b      	ldr	r3, [r1, #0]
 800660a:	2b60      	cmp	r3, #96	; 0x60
 800660c:	d04c      	beq.n	80066a8 <HAL_TIM_ConfigClockSource+0xc6>
 800660e:	d829      	bhi.n	8006664 <HAL_TIM_ConfigClockSource+0x82>
 8006610:	2b40      	cmp	r3, #64	; 0x40
 8006612:	d054      	beq.n	80066be <HAL_TIM_ConfigClockSource+0xdc>
 8006614:	d90c      	bls.n	8006630 <HAL_TIM_ConfigClockSource+0x4e>
 8006616:	2b50      	cmp	r3, #80	; 0x50
 8006618:	d122      	bne.n	8006660 <HAL_TIM_ConfigClockSource+0x7e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800661a:	68ca      	ldr	r2, [r1, #12]
 800661c:	6849      	ldr	r1, [r1, #4]
 800661e:	6800      	ldr	r0, [r0, #0]
 8006620:	f7ff fe11 	bl	8006246 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006624:	2150      	movs	r1, #80	; 0x50
 8006626:	6820      	ldr	r0, [r4, #0]
 8006628:	f7ff fe34 	bl	8006294 <TIM_ITRx_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 800662c:	2000      	movs	r0, #0
      break;
 800662e:	e005      	b.n	800663c <HAL_TIM_ConfigClockSource+0x5a>
  switch (sClockSourceConfig->ClockSource)
 8006630:	2b20      	cmp	r3, #32
 8006632:	d00d      	beq.n	8006650 <HAL_TIM_ConfigClockSource+0x6e>
 8006634:	d909      	bls.n	800664a <HAL_TIM_ConfigClockSource+0x68>
 8006636:	2b30      	cmp	r3, #48	; 0x30
 8006638:	d00a      	beq.n	8006650 <HAL_TIM_ConfigClockSource+0x6e>
      status = HAL_ERROR;
 800663a:	2001      	movs	r0, #1
  htim->State = HAL_TIM_STATE_READY;
 800663c:	2301      	movs	r3, #1
 800663e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8006642:	2300      	movs	r3, #0
 8006644:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 8006648:	bd10      	pop	{r4, pc}
  switch (sClockSourceConfig->ClockSource)
 800664a:	b10b      	cbz	r3, 8006650 <HAL_TIM_ConfigClockSource+0x6e>
 800664c:	2b10      	cmp	r3, #16
 800664e:	d105      	bne.n	800665c <HAL_TIM_ConfigClockSource+0x7a>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006650:	4619      	mov	r1, r3
 8006652:	6820      	ldr	r0, [r4, #0]
 8006654:	f7ff fe1e 	bl	8006294 <TIM_ITRx_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 8006658:	2000      	movs	r0, #0
      break;
 800665a:	e7ef      	b.n	800663c <HAL_TIM_ConfigClockSource+0x5a>
      status = HAL_ERROR;
 800665c:	2001      	movs	r0, #1
 800665e:	e7ed      	b.n	800663c <HAL_TIM_ConfigClockSource+0x5a>
 8006660:	2001      	movs	r0, #1
 8006662:	e7eb      	b.n	800663c <HAL_TIM_ConfigClockSource+0x5a>
  switch (sClockSourceConfig->ClockSource)
 8006664:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006668:	d034      	beq.n	80066d4 <HAL_TIM_ConfigClockSource+0xf2>
 800666a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800666e:	d10c      	bne.n	800668a <HAL_TIM_ConfigClockSource+0xa8>
      TIM_ETR_SetConfig(htim->Instance,
 8006670:	68cb      	ldr	r3, [r1, #12]
 8006672:	684a      	ldr	r2, [r1, #4]
 8006674:	6889      	ldr	r1, [r1, #8]
 8006676:	6800      	ldr	r0, [r0, #0]
 8006678:	f7ff ffa6 	bl	80065c8 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800667c:	6822      	ldr	r2, [r4, #0]
 800667e:	6893      	ldr	r3, [r2, #8]
 8006680:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006684:	6093      	str	r3, [r2, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8006686:	2000      	movs	r0, #0
      break;
 8006688:	e7d8      	b.n	800663c <HAL_TIM_ConfigClockSource+0x5a>
  switch (sClockSourceConfig->ClockSource)
 800668a:	2b70      	cmp	r3, #112	; 0x70
 800668c:	d124      	bne.n	80066d8 <HAL_TIM_ConfigClockSource+0xf6>
      TIM_ETR_SetConfig(htim->Instance,
 800668e:	68cb      	ldr	r3, [r1, #12]
 8006690:	684a      	ldr	r2, [r1, #4]
 8006692:	6889      	ldr	r1, [r1, #8]
 8006694:	6800      	ldr	r0, [r0, #0]
 8006696:	f7ff ff97 	bl	80065c8 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800669a:	6822      	ldr	r2, [r4, #0]
 800669c:	6893      	ldr	r3, [r2, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800669e:	f043 0377 	orr.w	r3, r3, #119	; 0x77
      htim->Instance->SMCR = tmpsmcr;
 80066a2:	6093      	str	r3, [r2, #8]
  HAL_StatusTypeDef status = HAL_OK;
 80066a4:	2000      	movs	r0, #0
      break;
 80066a6:	e7c9      	b.n	800663c <HAL_TIM_ConfigClockSource+0x5a>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80066a8:	68ca      	ldr	r2, [r1, #12]
 80066aa:	6849      	ldr	r1, [r1, #4]
 80066ac:	6800      	ldr	r0, [r0, #0]
 80066ae:	f7ff fddd 	bl	800626c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80066b2:	2160      	movs	r1, #96	; 0x60
 80066b4:	6820      	ldr	r0, [r4, #0]
 80066b6:	f7ff fded 	bl	8006294 <TIM_ITRx_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 80066ba:	2000      	movs	r0, #0
      break;
 80066bc:	e7be      	b.n	800663c <HAL_TIM_ConfigClockSource+0x5a>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80066be:	68ca      	ldr	r2, [r1, #12]
 80066c0:	6849      	ldr	r1, [r1, #4]
 80066c2:	6800      	ldr	r0, [r0, #0]
 80066c4:	f7ff fdbf 	bl	8006246 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80066c8:	2140      	movs	r1, #64	; 0x40
 80066ca:	6820      	ldr	r0, [r4, #0]
 80066cc:	f7ff fde2 	bl	8006294 <TIM_ITRx_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 80066d0:	2000      	movs	r0, #0
      break;
 80066d2:	e7b3      	b.n	800663c <HAL_TIM_ConfigClockSource+0x5a>
  switch (sClockSourceConfig->ClockSource)
 80066d4:	2000      	movs	r0, #0
 80066d6:	e7b1      	b.n	800663c <HAL_TIM_ConfigClockSource+0x5a>
      status = HAL_ERROR;
 80066d8:	2001      	movs	r0, #1
 80066da:	e7af      	b.n	800663c <HAL_TIM_ConfigClockSource+0x5a>
  __HAL_LOCK(htim);
 80066dc:	2002      	movs	r0, #2
}
 80066de:	4770      	bx	lr

080066e0 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80066e0:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80066e4:	2b01      	cmp	r3, #1
 80066e6:	d035      	beq.n	8006754 <HAL_TIMEx_MasterConfigSynchronization+0x74>
{
 80066e8:	b410      	push	{r4}
  __HAL_LOCK(htim);
 80066ea:	2301      	movs	r3, #1
 80066ec:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80066f0:	2302      	movs	r3, #2
 80066f2:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80066f6:	6803      	ldr	r3, [r0, #0]
 80066f8:	685a      	ldr	r2, [r3, #4]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80066fa:	689c      	ldr	r4, [r3, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80066fc:	f022 0c70 	bic.w	ip, r2, #112	; 0x70
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006700:	680a      	ldr	r2, [r1, #0]
 8006702:	ea42 020c 	orr.w	r2, r2, ip

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006706:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006708:	6803      	ldr	r3, [r0, #0]
 800670a:	4a13      	ldr	r2, [pc, #76]	; (8006758 <HAL_TIMEx_MasterConfigSynchronization+0x78>)
 800670c:	4293      	cmp	r3, r2
 800670e:	d012      	beq.n	8006736 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8006710:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006714:	d00f      	beq.n	8006736 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8006716:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 800671a:	4293      	cmp	r3, r2
 800671c:	d00b      	beq.n	8006736 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800671e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006722:	4293      	cmp	r3, r2
 8006724:	d007      	beq.n	8006736 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8006726:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800672a:	4293      	cmp	r3, r2
 800672c:	d003      	beq.n	8006736 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800672e:	f502 329a 	add.w	r2, r2, #78848	; 0x13400
 8006732:	4293      	cmp	r3, r2
 8006734:	d104      	bne.n	8006740 <HAL_TIMEx_MasterConfigSynchronization+0x60>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006736:	f024 0480 	bic.w	r4, r4, #128	; 0x80
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800673a:	684a      	ldr	r2, [r1, #4]
 800673c:	4314      	orrs	r4, r2

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800673e:	609c      	str	r4, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006740:	2301      	movs	r3, #1
 8006742:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006746:	2300      	movs	r3, #0
 8006748:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  return HAL_OK;
 800674c:	4618      	mov	r0, r3
}
 800674e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006752:	4770      	bx	lr
  __HAL_LOCK(htim);
 8006754:	2002      	movs	r0, #2
}
 8006756:	4770      	bx	lr
 8006758:	40010000 	.word	0x40010000

0800675c <HAL_TIMEx_CommutCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800675c:	4770      	bx	lr

0800675e <HAL_TIMEx_BreakCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800675e:	4770      	bx	lr

08006760 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006760:	b538      	push	{r3, r4, r5, lr}
 8006762:	4604      	mov	r4, r0
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006764:	6802      	ldr	r2, [r0, #0]
 8006766:	6913      	ldr	r3, [r2, #16]
 8006768:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800676c:	68c1      	ldr	r1, [r0, #12]
 800676e:	430b      	orrs	r3, r1
 8006770:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006772:	6883      	ldr	r3, [r0, #8]
 8006774:	6902      	ldr	r2, [r0, #16]
 8006776:	4313      	orrs	r3, r2
 8006778:	6942      	ldr	r2, [r0, #20]
 800677a:	4313      	orrs	r3, r2
 800677c:	69c2      	ldr	r2, [r0, #28]
 800677e:	431a      	orrs	r2, r3
  MODIFY_REG(huart->Instance->CR1,
 8006780:	6801      	ldr	r1, [r0, #0]
 8006782:	68cb      	ldr	r3, [r1, #12]
 8006784:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8006788:	f023 030c 	bic.w	r3, r3, #12
 800678c:	4313      	orrs	r3, r2
 800678e:	60cb      	str	r3, [r1, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006790:	6802      	ldr	r2, [r0, #0]
 8006792:	6953      	ldr	r3, [r2, #20]
 8006794:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006798:	6981      	ldr	r1, [r0, #24]
 800679a:	430b      	orrs	r3, r1
 800679c:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800679e:	6803      	ldr	r3, [r0, #0]
 80067a0:	4a31      	ldr	r2, [pc, #196]	; (8006868 <UART_SetConfig+0x108>)
 80067a2:	4293      	cmp	r3, r2
 80067a4:	d006      	beq.n	80067b4 <UART_SetConfig+0x54>
 80067a6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80067aa:	4293      	cmp	r3, r2
 80067ac:	d002      	beq.n	80067b4 <UART_SetConfig+0x54>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80067ae:	f7ff fa35 	bl	8005c1c <HAL_RCC_GetPCLK1Freq>
 80067b2:	e001      	b.n	80067b8 <UART_SetConfig+0x58>
      pclk = HAL_RCC_GetPCLK2Freq();
 80067b4:	f7ff fa42 	bl	8005c3c <HAL_RCC_GetPCLK2Freq>
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80067b8:	69e3      	ldr	r3, [r4, #28]
 80067ba:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80067be:	d029      	beq.n	8006814 <UART_SetConfig+0xb4>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80067c0:	2100      	movs	r1, #0
 80067c2:	1803      	adds	r3, r0, r0
 80067c4:	4149      	adcs	r1, r1
 80067c6:	181b      	adds	r3, r3, r0
 80067c8:	f141 0100 	adc.w	r1, r1, #0
 80067cc:	00c9      	lsls	r1, r1, #3
 80067ce:	ea41 7153 	orr.w	r1, r1, r3, lsr #29
 80067d2:	00db      	lsls	r3, r3, #3
 80067d4:	1818      	adds	r0, r3, r0
 80067d6:	6863      	ldr	r3, [r4, #4]
 80067d8:	ea4f 0283 	mov.w	r2, r3, lsl #2
 80067dc:	ea4f 7393 	mov.w	r3, r3, lsr #30
 80067e0:	f141 0100 	adc.w	r1, r1, #0
 80067e4:	f7f9 fd54 	bl	8000290 <__aeabi_uldivmod>
 80067e8:	4d20      	ldr	r5, [pc, #128]	; (800686c <UART_SetConfig+0x10c>)
 80067ea:	fba5 3200 	umull	r3, r2, r5, r0
 80067ee:	0951      	lsrs	r1, r2, #5
 80067f0:	2364      	movs	r3, #100	; 0x64
 80067f2:	fb03 0311 	mls	r3, r3, r1, r0
 80067f6:	011b      	lsls	r3, r3, #4
 80067f8:	3332      	adds	r3, #50	; 0x32
 80067fa:	fba5 2303 	umull	r2, r3, r5, r3
 80067fe:	095b      	lsrs	r3, r3, #5
 8006800:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8006804:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 8006808:	f003 030f 	and.w	r3, r3, #15
 800680c:	6821      	ldr	r1, [r4, #0]
 800680e:	4413      	add	r3, r2
 8006810:	608b      	str	r3, [r1, #8]
  }
}
 8006812:	bd38      	pop	{r3, r4, r5, pc}
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006814:	2300      	movs	r3, #0
 8006816:	1802      	adds	r2, r0, r0
 8006818:	eb43 0103 	adc.w	r1, r3, r3
 800681c:	1812      	adds	r2, r2, r0
 800681e:	f141 0100 	adc.w	r1, r1, #0
 8006822:	00c9      	lsls	r1, r1, #3
 8006824:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8006828:	00d2      	lsls	r2, r2, #3
 800682a:	1810      	adds	r0, r2, r0
 800682c:	f141 0100 	adc.w	r1, r1, #0
 8006830:	6862      	ldr	r2, [r4, #4]
 8006832:	1892      	adds	r2, r2, r2
 8006834:	415b      	adcs	r3, r3
 8006836:	f7f9 fd2b 	bl	8000290 <__aeabi_uldivmod>
 800683a:	4d0c      	ldr	r5, [pc, #48]	; (800686c <UART_SetConfig+0x10c>)
 800683c:	fba5 3200 	umull	r3, r2, r5, r0
 8006840:	0951      	lsrs	r1, r2, #5
 8006842:	2364      	movs	r3, #100	; 0x64
 8006844:	fb03 0311 	mls	r3, r3, r1, r0
 8006848:	00db      	lsls	r3, r3, #3
 800684a:	3332      	adds	r3, #50	; 0x32
 800684c:	fba5 2303 	umull	r2, r3, r5, r3
 8006850:	095b      	lsrs	r3, r3, #5
 8006852:	005a      	lsls	r2, r3, #1
 8006854:	f402 72f8 	and.w	r2, r2, #496	; 0x1f0
 8006858:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 800685c:	f003 0307 	and.w	r3, r3, #7
 8006860:	6821      	ldr	r1, [r4, #0]
 8006862:	4413      	add	r3, r2
 8006864:	608b      	str	r3, [r1, #8]
 8006866:	e7d4      	b.n	8006812 <UART_SetConfig+0xb2>
 8006868:	40011000 	.word	0x40011000
 800686c:	51eb851f 	.word	0x51eb851f

08006870 <UART_WaitOnFlagUntilTimeout>:
{
 8006870:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006874:	4605      	mov	r5, r0
 8006876:	460f      	mov	r7, r1
 8006878:	4616      	mov	r6, r2
 800687a:	4699      	mov	r9, r3
 800687c:	f8dd 8020 	ldr.w	r8, [sp, #32]
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006880:	682c      	ldr	r4, [r5, #0]
 8006882:	6824      	ldr	r4, [r4, #0]
 8006884:	ea37 0304 	bics.w	r3, r7, r4
 8006888:	bf0c      	ite	eq
 800688a:	f04f 0c01 	moveq.w	ip, #1
 800688e:	f04f 0c00 	movne.w	ip, #0
 8006892:	45b4      	cmp	ip, r6
 8006894:	d12d      	bne.n	80068f2 <UART_WaitOnFlagUntilTimeout+0x82>
    if (Timeout != HAL_MAX_DELAY)
 8006896:	f1b8 3fff 	cmp.w	r8, #4294967295
 800689a:	d0f1      	beq.n	8006880 <UART_WaitOnFlagUntilTimeout+0x10>
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800689c:	f1b8 0f00 	cmp.w	r8, #0
 80068a0:	d005      	beq.n	80068ae <UART_WaitOnFlagUntilTimeout+0x3e>
 80068a2:	f7fd ff35 	bl	8004710 <HAL_GetTick>
 80068a6:	eba0 0009 	sub.w	r0, r0, r9
 80068aa:	4540      	cmp	r0, r8
 80068ac:	d9e8      	bls.n	8006880 <UART_WaitOnFlagUntilTimeout+0x10>
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80068ae:	682a      	ldr	r2, [r5, #0]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068b0:	f102 030c 	add.w	r3, r2, #12
 80068b4:	e853 3f00 	ldrex	r3, [r3]
 80068b8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068bc:	320c      	adds	r2, #12
 80068be:	e842 3100 	strex	r1, r3, [r2]
 80068c2:	2900      	cmp	r1, #0
 80068c4:	d1f3      	bne.n	80068ae <UART_WaitOnFlagUntilTimeout+0x3e>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80068c6:	682a      	ldr	r2, [r5, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068c8:	f102 0314 	add.w	r3, r2, #20
 80068cc:	e853 3f00 	ldrex	r3, [r3]
 80068d0:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068d4:	3214      	adds	r2, #20
 80068d6:	e842 3100 	strex	r1, r3, [r2]
 80068da:	2900      	cmp	r1, #0
 80068dc:	d1f3      	bne.n	80068c6 <UART_WaitOnFlagUntilTimeout+0x56>
        huart->gState  = HAL_UART_STATE_READY;
 80068de:	2320      	movs	r3, #32
 80068e0:	f885 303d 	strb.w	r3, [r5, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80068e4:	f885 303e 	strb.w	r3, [r5, #62]	; 0x3e
        __HAL_UNLOCK(huart);
 80068e8:	2300      	movs	r3, #0
 80068ea:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
        return HAL_TIMEOUT;
 80068ee:	2003      	movs	r0, #3
 80068f0:	e000      	b.n	80068f4 <UART_WaitOnFlagUntilTimeout+0x84>
  return HAL_OK;
 80068f2:	2000      	movs	r0, #0
}
 80068f4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

080068f8 <HAL_UART_Init>:
  if (huart == NULL)
 80068f8:	b358      	cbz	r0, 8006952 <HAL_UART_Init+0x5a>
{
 80068fa:	b510      	push	{r4, lr}
 80068fc:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_RESET)
 80068fe:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8006902:	b30b      	cbz	r3, 8006948 <HAL_UART_Init+0x50>
  huart->gState = HAL_UART_STATE_BUSY;
 8006904:	2324      	movs	r3, #36	; 0x24
 8006906:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UART_DISABLE(huart);
 800690a:	6822      	ldr	r2, [r4, #0]
 800690c:	68d3      	ldr	r3, [r2, #12]
 800690e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006912:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 8006914:	4620      	mov	r0, r4
 8006916:	f7ff ff23 	bl	8006760 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800691a:	6822      	ldr	r2, [r4, #0]
 800691c:	6913      	ldr	r3, [r2, #16]
 800691e:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 8006922:	6113      	str	r3, [r2, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006924:	6822      	ldr	r2, [r4, #0]
 8006926:	6953      	ldr	r3, [r2, #20]
 8006928:	f023 032a 	bic.w	r3, r3, #42	; 0x2a
 800692c:	6153      	str	r3, [r2, #20]
  __HAL_UART_ENABLE(huart);
 800692e:	6822      	ldr	r2, [r4, #0]
 8006930:	68d3      	ldr	r3, [r2, #12]
 8006932:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8006936:	60d3      	str	r3, [r2, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006938:	2000      	movs	r0, #0
 800693a:	6420      	str	r0, [r4, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800693c:	2320      	movs	r3, #32
 800693e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8006942:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
}
 8006946:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 8006948:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_UART_MspInit(huart);
 800694c:	f7fa fc6a 	bl	8001224 <HAL_UART_MspInit>
 8006950:	e7d8      	b.n	8006904 <HAL_UART_Init+0xc>
    return HAL_ERROR;
 8006952:	2001      	movs	r0, #1
}
 8006954:	4770      	bx	lr

08006956 <HAL_UART_Transmit>:
{
 8006956:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800695a:	b082      	sub	sp, #8
 800695c:	461e      	mov	r6, r3
  if (huart->gState == HAL_UART_STATE_READY)
 800695e:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8006962:	b2db      	uxtb	r3, r3
 8006964:	2b20      	cmp	r3, #32
 8006966:	d154      	bne.n	8006a12 <HAL_UART_Transmit+0xbc>
 8006968:	4604      	mov	r4, r0
 800696a:	460d      	mov	r5, r1
 800696c:	4690      	mov	r8, r2
    if ((pData == NULL) || (Size == 0U))
 800696e:	2900      	cmp	r1, #0
 8006970:	d053      	beq.n	8006a1a <HAL_UART_Transmit+0xc4>
 8006972:	2a00      	cmp	r2, #0
 8006974:	d053      	beq.n	8006a1e <HAL_UART_Transmit+0xc8>
    __HAL_LOCK(huart);
 8006976:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 800697a:	2b01      	cmp	r3, #1
 800697c:	d051      	beq.n	8006a22 <HAL_UART_Transmit+0xcc>
 800697e:	2301      	movs	r3, #1
 8006980:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006984:	2300      	movs	r3, #0
 8006986:	6403      	str	r3, [r0, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006988:	2321      	movs	r3, #33	; 0x21
 800698a:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
    tickstart = HAL_GetTick();
 800698e:	f7fd febf 	bl	8004710 <HAL_GetTick>
 8006992:	4607      	mov	r7, r0
    huart->TxXferSize = Size;
 8006994:	f8a4 8024 	strh.w	r8, [r4, #36]	; 0x24
    huart->TxXferCount = Size;
 8006998:	f8a4 8026 	strh.w	r8, [r4, #38]	; 0x26
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800699c:	68a3      	ldr	r3, [r4, #8]
 800699e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80069a2:	d005      	beq.n	80069b0 <HAL_UART_Transmit+0x5a>
      pdata16bits = NULL;
 80069a4:	f04f 0800 	mov.w	r8, #0
    __HAL_UNLOCK(huart);
 80069a8:	2300      	movs	r3, #0
 80069aa:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    while (huart->TxXferCount > 0U)
 80069ae:	e012      	b.n	80069d6 <HAL_UART_Transmit+0x80>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80069b0:	6923      	ldr	r3, [r4, #16]
 80069b2:	b113      	cbz	r3, 80069ba <HAL_UART_Transmit+0x64>
      pdata16bits = NULL;
 80069b4:	f04f 0800 	mov.w	r8, #0
 80069b8:	e7f6      	b.n	80069a8 <HAL_UART_Transmit+0x52>
      pdata16bits = (const uint16_t *) pData;
 80069ba:	46a8      	mov	r8, r5
      pdata8bits  = NULL;
 80069bc:	2500      	movs	r5, #0
 80069be:	e7f3      	b.n	80069a8 <HAL_UART_Transmit+0x52>
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80069c0:	f838 3b02 	ldrh.w	r3, [r8], #2
 80069c4:	6822      	ldr	r2, [r4, #0]
 80069c6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80069ca:	6053      	str	r3, [r2, #4]
      huart->TxXferCount--;
 80069cc:	8ce2      	ldrh	r2, [r4, #38]	; 0x26
 80069ce:	b292      	uxth	r2, r2
 80069d0:	3a01      	subs	r2, #1
 80069d2:	b292      	uxth	r2, r2
 80069d4:	84e2      	strh	r2, [r4, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80069d6:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 80069d8:	b29b      	uxth	r3, r3
 80069da:	b173      	cbz	r3, 80069fa <HAL_UART_Transmit+0xa4>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80069dc:	9600      	str	r6, [sp, #0]
 80069de:	463b      	mov	r3, r7
 80069e0:	2200      	movs	r2, #0
 80069e2:	2180      	movs	r1, #128	; 0x80
 80069e4:	4620      	mov	r0, r4
 80069e6:	f7ff ff43 	bl	8006870 <UART_WaitOnFlagUntilTimeout>
 80069ea:	b9e0      	cbnz	r0, 8006a26 <HAL_UART_Transmit+0xd0>
      if (pdata8bits == NULL)
 80069ec:	2d00      	cmp	r5, #0
 80069ee:	d0e7      	beq.n	80069c0 <HAL_UART_Transmit+0x6a>
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80069f0:	f815 2b01 	ldrb.w	r2, [r5], #1
 80069f4:	6823      	ldr	r3, [r4, #0]
 80069f6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80069f8:	e7e8      	b.n	80069cc <HAL_UART_Transmit+0x76>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80069fa:	9600      	str	r6, [sp, #0]
 80069fc:	463b      	mov	r3, r7
 80069fe:	2200      	movs	r2, #0
 8006a00:	2140      	movs	r1, #64	; 0x40
 8006a02:	4620      	mov	r0, r4
 8006a04:	f7ff ff34 	bl	8006870 <UART_WaitOnFlagUntilTimeout>
 8006a08:	b978      	cbnz	r0, 8006a2a <HAL_UART_Transmit+0xd4>
    huart->gState = HAL_UART_STATE_READY;
 8006a0a:	2320      	movs	r3, #32
 8006a0c:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    return HAL_OK;
 8006a10:	e000      	b.n	8006a14 <HAL_UART_Transmit+0xbe>
    return HAL_BUSY;
 8006a12:	2002      	movs	r0, #2
}
 8006a14:	b002      	add	sp, #8
 8006a16:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      return  HAL_ERROR;
 8006a1a:	2001      	movs	r0, #1
 8006a1c:	e7fa      	b.n	8006a14 <HAL_UART_Transmit+0xbe>
 8006a1e:	2001      	movs	r0, #1
 8006a20:	e7f8      	b.n	8006a14 <HAL_UART_Transmit+0xbe>
    __HAL_LOCK(huart);
 8006a22:	2002      	movs	r0, #2
 8006a24:	e7f6      	b.n	8006a14 <HAL_UART_Transmit+0xbe>
        return HAL_TIMEOUT;
 8006a26:	2003      	movs	r0, #3
 8006a28:	e7f4      	b.n	8006a14 <HAL_UART_Transmit+0xbe>
      return HAL_TIMEOUT;
 8006a2a:	2003      	movs	r0, #3
 8006a2c:	e7f2      	b.n	8006a14 <HAL_UART_Transmit+0xbe>
	...

08006a30 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8006a30:	b508      	push	{r3, lr}
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 8006a32:	4903      	ldr	r1, [pc, #12]	; (8006a40 <MX_FATFS_Init+0x10>)
 8006a34:	4803      	ldr	r0, [pc, #12]	; (8006a44 <MX_FATFS_Init+0x14>)
 8006a36:	f001 fd97 	bl	8008568 <FATFS_LinkDriver>
 8006a3a:	4b03      	ldr	r3, [pc, #12]	; (8006a48 <MX_FATFS_Init+0x18>)
 8006a3c:	7018      	strb	r0, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8006a3e:	bd08      	pop	{r3, pc}
 8006a40:	20016e5c 	.word	0x20016e5c
 8006a44:	200000d0 	.word	0x200000d0
 8006a48:	20016e60 	.word	0x20016e60

08006a4c <get_fattime>:
DWORD get_fattime(void)
{
  /* USER CODE BEGIN get_fattime */
  return 0;
  /* USER CODE END get_fattime */
}
 8006a4c:	2000      	movs	r0, #0
 8006a4e:	4770      	bx	lr

08006a50 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 8006a50:	b508      	push	{r3, lr}
  /* USER CODE BEGIN INIT */
	return SD_disk_initialize (pdrv);
 8006a52:	f7f9 fedf 	bl	8000814 <SD_disk_initialize>
  /* USER CODE END INIT */
}
 8006a56:	bd08      	pop	{r3, pc}

08006a58 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 8006a58:	b508      	push	{r3, lr}
  /* USER CODE BEGIN STATUS */
	return SD_disk_status (pdrv);
 8006a5a:	f7f9 ff9d 	bl	8000998 <SD_disk_status>
  /* USER CODE END STATUS */
}
 8006a5e:	bd08      	pop	{r3, pc}

08006a60 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8006a60:	b508      	push	{r3, lr}
  /* USER CODE BEGIN READ */
	return SD_disk_read (pdrv, buff, sector, count);
 8006a62:	f7f9 ffa3 	bl	80009ac <SD_disk_read>
  /* USER CODE END READ */
}
 8006a66:	bd08      	pop	{r3, pc}

08006a68 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 8006a68:	b508      	push	{r3, lr}
  /* USER CODE BEGIN WRITE */
	/* USER CODE HERE */
	return SD_disk_write (pdrv, buff, sector, count);
 8006a6a:	f7f9 ffeb 	bl	8000a44 <SD_disk_write>
  /* USER CODE END WRITE */
}
 8006a6e:	bd08      	pop	{r3, pc}

08006a70 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 8006a70:	b508      	push	{r3, lr}
  /* USER CODE BEGIN IOCTL */
	return SD_disk_ioctl (pdrv, cmd, buff);
 8006a72:	f7fa f849 	bl	8000b08 <SD_disk_ioctl>
  /* USER CODE END IOCTL */
}
 8006a76:	bd08      	pop	{r3, pc}

08006a78 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8006a78:	b508      	push	{r3, lr}
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8006a7a:	4b04      	ldr	r3, [pc, #16]	; (8006a8c <disk_status+0x14>)
 8006a7c:	eb03 0280 	add.w	r2, r3, r0, lsl #2
 8006a80:	6852      	ldr	r2, [r2, #4]
 8006a82:	6852      	ldr	r2, [r2, #4]
 8006a84:	4403      	add	r3, r0
 8006a86:	7a18      	ldrb	r0, [r3, #8]
 8006a88:	4790      	blx	r2
  return stat;
}
 8006a8a:	bd08      	pop	{r3, pc}
 8006a8c:	2001708c 	.word	0x2001708c

08006a90 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8006a90:	b508      	push	{r3, lr}
  DSTATUS stat = RES_OK;

  if(disk.is_initialized[pdrv] == 0)
 8006a92:	4b08      	ldr	r3, [pc, #32]	; (8006ab4 <disk_initialize+0x24>)
 8006a94:	5c1b      	ldrb	r3, [r3, r0]
 8006a96:	b953      	cbnz	r3, 8006aae <disk_initialize+0x1e>
  {
    disk.is_initialized[pdrv] = 1;
 8006a98:	4b06      	ldr	r3, [pc, #24]	; (8006ab4 <disk_initialize+0x24>)
 8006a9a:	2201      	movs	r2, #1
 8006a9c:	541a      	strb	r2, [r3, r0]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8006a9e:	eb03 0280 	add.w	r2, r3, r0, lsl #2
 8006aa2:	6852      	ldr	r2, [r2, #4]
 8006aa4:	6812      	ldr	r2, [r2, #0]
 8006aa6:	4418      	add	r0, r3
 8006aa8:	7a00      	ldrb	r0, [r0, #8]
 8006aaa:	4790      	blx	r2
  }
  return stat;
}
 8006aac:	bd08      	pop	{r3, pc}
  DSTATUS stat = RES_OK;
 8006aae:	2000      	movs	r0, #0
 8006ab0:	e7fc      	b.n	8006aac <disk_initialize+0x1c>
 8006ab2:	bf00      	nop
 8006ab4:	2001708c 	.word	0x2001708c

08006ab8 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8006ab8:	b538      	push	{r3, r4, r5, lr}
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8006aba:	4c04      	ldr	r4, [pc, #16]	; (8006acc <disk_read+0x14>)
 8006abc:	eb04 0580 	add.w	r5, r4, r0, lsl #2
 8006ac0:	686d      	ldr	r5, [r5, #4]
 8006ac2:	68ad      	ldr	r5, [r5, #8]
 8006ac4:	4404      	add	r4, r0
 8006ac6:	7a20      	ldrb	r0, [r4, #8]
 8006ac8:	47a8      	blx	r5
  return res;
}
 8006aca:	bd38      	pop	{r3, r4, r5, pc}
 8006acc:	2001708c 	.word	0x2001708c

08006ad0 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8006ad0:	b538      	push	{r3, r4, r5, lr}
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8006ad2:	4c04      	ldr	r4, [pc, #16]	; (8006ae4 <disk_write+0x14>)
 8006ad4:	eb04 0580 	add.w	r5, r4, r0, lsl #2
 8006ad8:	686d      	ldr	r5, [r5, #4]
 8006ada:	68ed      	ldr	r5, [r5, #12]
 8006adc:	4404      	add	r4, r0
 8006ade:	7a20      	ldrb	r0, [r4, #8]
 8006ae0:	47a8      	blx	r5
  return res;
}
 8006ae2:	bd38      	pop	{r3, r4, r5, pc}
 8006ae4:	2001708c 	.word	0x2001708c

08006ae8 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8006ae8:	b510      	push	{r4, lr}
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8006aea:	4b04      	ldr	r3, [pc, #16]	; (8006afc <disk_ioctl+0x14>)
 8006aec:	eb03 0480 	add.w	r4, r3, r0, lsl #2
 8006af0:	6864      	ldr	r4, [r4, #4]
 8006af2:	6924      	ldr	r4, [r4, #16]
 8006af4:	4403      	add	r3, r0
 8006af6:	7a18      	ldrb	r0, [r3, #8]
 8006af8:	47a0      	blx	r4
  return res;
}
 8006afa:	bd10      	pop	{r4, pc}
 8006afc:	2001708c 	.word	0x2001708c

08006b00 <ld_word>:
static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
	WORD rv;

	rv = ptr[1];
 8006b00:	7842      	ldrb	r2, [r0, #1]
	rv = rv << 8 | ptr[0];
 8006b02:	7800      	ldrb	r0, [r0, #0]
	return rv;
}
 8006b04:	ea40 2002 	orr.w	r0, r0, r2, lsl #8
 8006b08:	4770      	bx	lr

08006b0a <ld_dword>:
static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
	DWORD rv;

	rv = ptr[3];
 8006b0a:	78c2      	ldrb	r2, [r0, #3]
	rv = rv << 8 | ptr[2];
 8006b0c:	7883      	ldrb	r3, [r0, #2]
 8006b0e:	ea43 2202 	orr.w	r2, r3, r2, lsl #8
	rv = rv << 8 | ptr[1];
 8006b12:	7843      	ldrb	r3, [r0, #1]
 8006b14:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
	rv = rv << 8 | ptr[0];
 8006b18:	7800      	ldrb	r0, [r0, #0]
	return rv;
}
 8006b1a:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
 8006b1e:	4770      	bx	lr

08006b20 <st_word>:

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
	*ptr++ = (BYTE)val; val >>= 8;
 8006b20:	7001      	strb	r1, [r0, #0]
	*ptr++ = (BYTE)val;
 8006b22:	0a09      	lsrs	r1, r1, #8
 8006b24:	7041      	strb	r1, [r0, #1]
}
 8006b26:	4770      	bx	lr

08006b28 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
	*ptr++ = (BYTE)val; val >>= 8;
 8006b28:	7001      	strb	r1, [r0, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8006b2a:	f3c1 2307 	ubfx	r3, r1, #8, #8
 8006b2e:	7043      	strb	r3, [r0, #1]
	*ptr++ = (BYTE)val; val >>= 8;
 8006b30:	f3c1 4307 	ubfx	r3, r1, #16, #8
 8006b34:	7083      	strb	r3, [r0, #2]
	*ptr++ = (BYTE)val;
 8006b36:	0e09      	lsrs	r1, r1, #24
 8006b38:	70c1      	strb	r1, [r0, #3]
}
 8006b3a:	4770      	bx	lr

08006b3c <mem_cpy>:
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
	BYTE *d = (BYTE*)dst;
	const BYTE *s = (const BYTE*)src;

	if (cnt) {
 8006b3c:	4694      	mov	ip, r2
 8006b3e:	b132      	cbz	r2, 8006b4e <mem_cpy+0x12>
		do {
			*d++ = *s++;
 8006b40:	780a      	ldrb	r2, [r1, #0]
 8006b42:	3101      	adds	r1, #1
 8006b44:	7002      	strb	r2, [r0, #0]
 8006b46:	3001      	adds	r0, #1
		} while (--cnt);
 8006b48:	f1bc 0c01 	subs.w	ip, ip, #1
 8006b4c:	d1f8      	bne.n	8006b40 <mem_cpy+0x4>
	}
}
 8006b4e:	4770      	bx	lr

08006b50 <mem_set>:
static
void mem_set (void* dst, int val, UINT cnt) {
	BYTE *d = (BYTE*)dst;

	do {
		*d++ = (BYTE)val;
 8006b50:	7001      	strb	r1, [r0, #0]
 8006b52:	3001      	adds	r0, #1
	} while (--cnt);
 8006b54:	3a01      	subs	r2, #1
 8006b56:	d1fb      	bne.n	8006b50 <mem_set>
}
 8006b58:	4770      	bx	lr

08006b5a <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8006b5a:	4684      	mov	ip, r0
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
	int r = 0;

	do {
		r = *d++ - *s++;
 8006b5c:	f89c 0000 	ldrb.w	r0, [ip]
 8006b60:	f10c 0c01 	add.w	ip, ip, #1
 8006b64:	780b      	ldrb	r3, [r1, #0]
 8006b66:	3101      	adds	r1, #1
 8006b68:	1ac0      	subs	r0, r0, r3
	} while (--cnt && r == 0);
 8006b6a:	3a01      	subs	r2, #1
 8006b6c:	d001      	beq.n	8006b72 <mem_cmp+0x18>
 8006b6e:	2800      	cmp	r0, #0
 8006b70:	d0f4      	beq.n	8006b5c <mem_cmp+0x2>

	return r;
}
 8006b72:	4770      	bx	lr

08006b74 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8006b74:	4603      	mov	r3, r0
	while (*str && *str != chr) str++;
 8006b76:	e000      	b.n	8006b7a <chk_chr+0x6>
 8006b78:	3301      	adds	r3, #1
 8006b7a:	7818      	ldrb	r0, [r3, #0]
 8006b7c:	b108      	cbz	r0, 8006b82 <chk_chr+0xe>
 8006b7e:	4288      	cmp	r0, r1
 8006b80:	d1fa      	bne.n	8006b78 <chk_chr+0x4>
	return *str;
}
 8006b82:	4770      	bx	lr

08006b84 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8006b84:	b430      	push	{r4, r5}
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8006b86:	2500      	movs	r5, #0
 8006b88:	462b      	mov	r3, r5
 8006b8a:	e001      	b.n	8006b90 <chk_lock+0xc>
		if (Files[i].fs) {	/* Existing entry */
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
				Files[i].clu == dp->obj.sclust &&
				Files[i].ofs == dp->dptr) break;
		} else {			/* Blank entry */
			be = 1;
 8006b8c:	2501      	movs	r5, #1
	for (i = be = 0; i < _FS_LOCK; i++) {
 8006b8e:	3301      	adds	r3, #1
 8006b90:	2b01      	cmp	r3, #1
 8006b92:	d815      	bhi.n	8006bc0 <chk_lock+0x3c>
		if (Files[i].fs) {	/* Existing entry */
 8006b94:	011a      	lsls	r2, r3, #4
 8006b96:	4c17      	ldr	r4, [pc, #92]	; (8006bf4 <chk_lock+0x70>)
 8006b98:	58a2      	ldr	r2, [r4, r2]
 8006b9a:	2a00      	cmp	r2, #0
 8006b9c:	d0f6      	beq.n	8006b8c <chk_lock+0x8>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8006b9e:	6804      	ldr	r4, [r0, #0]
 8006ba0:	42a2      	cmp	r2, r4
 8006ba2:	d1f4      	bne.n	8006b8e <chk_lock+0xa>
				Files[i].clu == dp->obj.sclust &&
 8006ba4:	4a13      	ldr	r2, [pc, #76]	; (8006bf4 <chk_lock+0x70>)
 8006ba6:	eb02 1203 	add.w	r2, r2, r3, lsl #4
 8006baa:	6854      	ldr	r4, [r2, #4]
 8006bac:	6882      	ldr	r2, [r0, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8006bae:	4294      	cmp	r4, r2
 8006bb0:	d1ed      	bne.n	8006b8e <chk_lock+0xa>
				Files[i].ofs == dp->dptr) break;
 8006bb2:	4a10      	ldr	r2, [pc, #64]	; (8006bf4 <chk_lock+0x70>)
 8006bb4:	eb02 1203 	add.w	r2, r2, r3, lsl #4
 8006bb8:	6894      	ldr	r4, [r2, #8]
 8006bba:	6942      	ldr	r2, [r0, #20]
				Files[i].clu == dp->obj.sclust &&
 8006bbc:	4294      	cmp	r4, r2
 8006bbe:	d1e6      	bne.n	8006b8e <chk_lock+0xa>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 8006bc0:	2b02      	cmp	r3, #2
 8006bc2:	d00a      	beq.n	8006bda <chk_lock+0x56>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8006bc4:	b9a1      	cbnz	r1, 8006bf0 <chk_lock+0x6c>
 8006bc6:	4a0b      	ldr	r2, [pc, #44]	; (8006bf4 <chk_lock+0x70>)
 8006bc8:	eb02 1303 	add.w	r3, r2, r3, lsl #4
 8006bcc:	899b      	ldrh	r3, [r3, #12]
 8006bce:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006bd2:	d00b      	beq.n	8006bec <chk_lock+0x68>
 8006bd4:	2000      	movs	r0, #0
}
 8006bd6:	bc30      	pop	{r4, r5}
 8006bd8:	4770      	bx	lr
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8006bda:	b92d      	cbnz	r5, 8006be8 <chk_lock+0x64>
 8006bdc:	2902      	cmp	r1, #2
 8006bde:	d001      	beq.n	8006be4 <chk_lock+0x60>
 8006be0:	2012      	movs	r0, #18
 8006be2:	e7f8      	b.n	8006bd6 <chk_lock+0x52>
 8006be4:	2000      	movs	r0, #0
 8006be6:	e7f6      	b.n	8006bd6 <chk_lock+0x52>
 8006be8:	2000      	movs	r0, #0
 8006bea:	e7f4      	b.n	8006bd6 <chk_lock+0x52>
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8006bec:	2010      	movs	r0, #16
 8006bee:	e7f2      	b.n	8006bd6 <chk_lock+0x52>
 8006bf0:	2010      	movs	r0, #16
 8006bf2:	e7f0      	b.n	8006bd6 <chk_lock+0x52>
 8006bf4:	20016e68 	.word	0x20016e68

08006bf8 <enq_lock>:
static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8006bf8:	2000      	movs	r0, #0
 8006bfa:	e000      	b.n	8006bfe <enq_lock+0x6>
 8006bfc:	3001      	adds	r0, #1
 8006bfe:	2801      	cmp	r0, #1
 8006c00:	d804      	bhi.n	8006c0c <enq_lock+0x14>
 8006c02:	0103      	lsls	r3, r0, #4
 8006c04:	4a03      	ldr	r2, [pc, #12]	; (8006c14 <enq_lock+0x1c>)
 8006c06:	58d3      	ldr	r3, [r2, r3]
 8006c08:	2b00      	cmp	r3, #0
 8006c0a:	d1f7      	bne.n	8006bfc <enq_lock+0x4>
	return (i == _FS_LOCK) ? 0 : 1;
}
 8006c0c:	3802      	subs	r0, #2
 8006c0e:	bf18      	it	ne
 8006c10:	2001      	movne	r0, #1
 8006c12:	4770      	bx	lr
 8006c14:	20016e68 	.word	0x20016e68

08006c18 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8006c18:	b470      	push	{r4, r5, r6}
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8006c1a:	2300      	movs	r3, #0
 8006c1c:	e000      	b.n	8006c20 <inc_lock+0x8>
 8006c1e:	3301      	adds	r3, #1
 8006c20:	2b01      	cmp	r3, #1
 8006c22:	d813      	bhi.n	8006c4c <inc_lock+0x34>
		if (Files[i].fs == dp->obj.fs &&
 8006c24:	011a      	lsls	r2, r3, #4
 8006c26:	4c24      	ldr	r4, [pc, #144]	; (8006cb8 <inc_lock+0xa0>)
 8006c28:	58a4      	ldr	r4, [r4, r2]
 8006c2a:	6802      	ldr	r2, [r0, #0]
 8006c2c:	4294      	cmp	r4, r2
 8006c2e:	d1f6      	bne.n	8006c1e <inc_lock+0x6>
			Files[i].clu == dp->obj.sclust &&
 8006c30:	4a21      	ldr	r2, [pc, #132]	; (8006cb8 <inc_lock+0xa0>)
 8006c32:	eb02 1203 	add.w	r2, r2, r3, lsl #4
 8006c36:	6854      	ldr	r4, [r2, #4]
 8006c38:	6882      	ldr	r2, [r0, #8]
		if (Files[i].fs == dp->obj.fs &&
 8006c3a:	4294      	cmp	r4, r2
 8006c3c:	d1ef      	bne.n	8006c1e <inc_lock+0x6>
			Files[i].ofs == dp->dptr) break;
 8006c3e:	4a1e      	ldr	r2, [pc, #120]	; (8006cb8 <inc_lock+0xa0>)
 8006c40:	eb02 1203 	add.w	r2, r2, r3, lsl #4
 8006c44:	6894      	ldr	r4, [r2, #8]
 8006c46:	6942      	ldr	r2, [r0, #20]
			Files[i].clu == dp->obj.sclust &&
 8006c48:	4294      	cmp	r4, r2
 8006c4a:	d1e8      	bne.n	8006c1e <inc_lock+0x6>
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8006c4c:	2b02      	cmp	r3, #2
 8006c4e:	d00d      	beq.n	8006c6c <inc_lock+0x54>
		Files[i].clu = dp->obj.sclust;
		Files[i].ofs = dp->dptr;
		Files[i].ctr = 0;
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8006c50:	b121      	cbz	r1, 8006c5c <inc_lock+0x44>
 8006c52:	4a19      	ldr	r2, [pc, #100]	; (8006cb8 <inc_lock+0xa0>)
 8006c54:	eb02 1203 	add.w	r2, r2, r3, lsl #4
 8006c58:	8992      	ldrh	r2, [r2, #12]
 8006c5a:	bb52      	cbnz	r2, 8006cb2 <inc_lock+0x9a>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8006c5c:	b9f1      	cbnz	r1, 8006c9c <inc_lock+0x84>
 8006c5e:	4a16      	ldr	r2, [pc, #88]	; (8006cb8 <inc_lock+0xa0>)
 8006c60:	eb02 1203 	add.w	r2, r2, r3, lsl #4
 8006c64:	8991      	ldrh	r1, [r2, #12]
 8006c66:	3101      	adds	r1, #1
 8006c68:	b289      	uxth	r1, r1
 8006c6a:	e019      	b.n	8006ca0 <inc_lock+0x88>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8006c6c:	2300      	movs	r3, #0
 8006c6e:	2b01      	cmp	r3, #1
 8006c70:	d805      	bhi.n	8006c7e <inc_lock+0x66>
 8006c72:	011a      	lsls	r2, r3, #4
 8006c74:	4c10      	ldr	r4, [pc, #64]	; (8006cb8 <inc_lock+0xa0>)
 8006c76:	58a2      	ldr	r2, [r4, r2]
 8006c78:	b10a      	cbz	r2, 8006c7e <inc_lock+0x66>
 8006c7a:	3301      	adds	r3, #1
 8006c7c:	e7f7      	b.n	8006c6e <inc_lock+0x56>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8006c7e:	2b02      	cmp	r3, #2
 8006c80:	d015      	beq.n	8006cae <inc_lock+0x96>
		Files[i].fs = dp->obj.fs;
 8006c82:	4d0d      	ldr	r5, [pc, #52]	; (8006cb8 <inc_lock+0xa0>)
 8006c84:	011c      	lsls	r4, r3, #4
 8006c86:	eb05 1203 	add.w	r2, r5, r3, lsl #4
 8006c8a:	6806      	ldr	r6, [r0, #0]
 8006c8c:	512e      	str	r6, [r5, r4]
		Files[i].clu = dp->obj.sclust;
 8006c8e:	6884      	ldr	r4, [r0, #8]
 8006c90:	6054      	str	r4, [r2, #4]
		Files[i].ofs = dp->dptr;
 8006c92:	6940      	ldr	r0, [r0, #20]
 8006c94:	6090      	str	r0, [r2, #8]
		Files[i].ctr = 0;
 8006c96:	2000      	movs	r0, #0
 8006c98:	8190      	strh	r0, [r2, #12]
 8006c9a:	e7d9      	b.n	8006c50 <inc_lock+0x38>
	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8006c9c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8006ca0:	4a05      	ldr	r2, [pc, #20]	; (8006cb8 <inc_lock+0xa0>)
 8006ca2:	eb02 1203 	add.w	r2, r2, r3, lsl #4
 8006ca6:	8191      	strh	r1, [r2, #12]

	return i + 1;
 8006ca8:	1c58      	adds	r0, r3, #1
}
 8006caa:	bc70      	pop	{r4, r5, r6}
 8006cac:	4770      	bx	lr
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8006cae:	2000      	movs	r0, #0
 8006cb0:	e7fb      	b.n	8006caa <inc_lock+0x92>
	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8006cb2:	2000      	movs	r0, #0
 8006cb4:	e7f9      	b.n	8006caa <inc_lock+0x92>
 8006cb6:	bf00      	nop
 8006cb8:	20016e68 	.word	0x20016e68

08006cbc <dec_lock>:
{
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8006cbc:	3801      	subs	r0, #1
 8006cbe:	2801      	cmp	r0, #1
 8006cc0:	d815      	bhi.n	8006cee <dec_lock+0x32>
		n = Files[i].ctr;
 8006cc2:	4b0d      	ldr	r3, [pc, #52]	; (8006cf8 <dec_lock+0x3c>)
 8006cc4:	eb03 1300 	add.w	r3, r3, r0, lsl #4
 8006cc8:	899b      	ldrh	r3, [r3, #12]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8006cca:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006cce:	d003      	beq.n	8006cd8 <dec_lock+0x1c>
		if (n > 0) n--;				/* Decrement read mode open count */
 8006cd0:	b11b      	cbz	r3, 8006cda <dec_lock+0x1e>
 8006cd2:	3b01      	subs	r3, #1
 8006cd4:	b29b      	uxth	r3, r3
 8006cd6:	e000      	b.n	8006cda <dec_lock+0x1e>
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8006cd8:	2300      	movs	r3, #0
		Files[i].ctr = n;
 8006cda:	4a07      	ldr	r2, [pc, #28]	; (8006cf8 <dec_lock+0x3c>)
 8006cdc:	eb02 1200 	add.w	r2, r2, r0, lsl #4
 8006ce0:	8193      	strh	r3, [r2, #12]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8006ce2:	b933      	cbnz	r3, 8006cf2 <dec_lock+0x36>
 8006ce4:	0103      	lsls	r3, r0, #4
 8006ce6:	2000      	movs	r0, #0
 8006ce8:	4a03      	ldr	r2, [pc, #12]	; (8006cf8 <dec_lock+0x3c>)
 8006cea:	50d0      	str	r0, [r2, r3]
 8006cec:	4770      	bx	lr
		res = FR_OK;
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8006cee:	2002      	movs	r0, #2
 8006cf0:	4770      	bx	lr
		res = FR_OK;
 8006cf2:	2000      	movs	r0, #0
	}
	return res;
}
 8006cf4:	4770      	bx	lr
 8006cf6:	bf00      	nop
 8006cf8:	20016e68 	.word	0x20016e68

08006cfc <clear_lock>:
	FATFS *fs
)
{
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8006cfc:	2300      	movs	r3, #0
 8006cfe:	e003      	b.n	8006d08 <clear_lock+0xc>
		if (Files[i].fs == fs) Files[i].fs = 0;
	}
}
 8006d00:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006d04:	4770      	bx	lr
	for (i = 0; i < _FS_LOCK; i++) {
 8006d06:	3301      	adds	r3, #1
 8006d08:	2b01      	cmp	r3, #1
 8006d0a:	d811      	bhi.n	8006d30 <clear_lock+0x34>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8006d0c:	011a      	lsls	r2, r3, #4
 8006d0e:	4909      	ldr	r1, [pc, #36]	; (8006d34 <clear_lock+0x38>)
 8006d10:	588a      	ldr	r2, [r1, r2]
 8006d12:	4282      	cmp	r2, r0
 8006d14:	d1f7      	bne.n	8006d06 <clear_lock+0xa>
{
 8006d16:	b410      	push	{r4}
		if (Files[i].fs == fs) Files[i].fs = 0;
 8006d18:	011a      	lsls	r2, r3, #4
 8006d1a:	2400      	movs	r4, #0
 8006d1c:	508c      	str	r4, [r1, r2]
	for (i = 0; i < _FS_LOCK; i++) {
 8006d1e:	3301      	adds	r3, #1
 8006d20:	2b01      	cmp	r3, #1
 8006d22:	d8ed      	bhi.n	8006d00 <clear_lock+0x4>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8006d24:	011a      	lsls	r2, r3, #4
 8006d26:	4903      	ldr	r1, [pc, #12]	; (8006d34 <clear_lock+0x38>)
 8006d28:	588a      	ldr	r2, [r1, r2]
 8006d2a:	4282      	cmp	r2, r0
 8006d2c:	d1f7      	bne.n	8006d1e <clear_lock+0x22>
 8006d2e:	e7f3      	b.n	8006d18 <clear_lock+0x1c>
 8006d30:	4770      	bx	lr
 8006d32:	bf00      	nop
 8006d34:	20016e68 	.word	0x20016e68

08006d38 <clust2sect>:
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
	clst -= 2;
 8006d38:	3902      	subs	r1, #2
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8006d3a:	69c3      	ldr	r3, [r0, #28]
 8006d3c:	3b02      	subs	r3, #2
 8006d3e:	428b      	cmp	r3, r1
 8006d40:	d904      	bls.n	8006d4c <clust2sect+0x14>
	return clst * fs->csize + fs->database;
 8006d42:	8943      	ldrh	r3, [r0, #10]
 8006d44:	6b00      	ldr	r0, [r0, #48]	; 0x30
 8006d46:	fb01 0003 	mla	r0, r1, r3, r0
 8006d4a:	4770      	bx	lr
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8006d4c:	2000      	movs	r0, #0
}
 8006d4e:	4770      	bx	lr

08006d50 <clmt_clust>:
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8006d50:	6802      	ldr	r2, [r0, #0]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8006d52:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8006d54:	3304      	adds	r3, #4
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8006d56:	8990      	ldrh	r0, [r2, #12]
 8006d58:	fbb1 f1f0 	udiv	r1, r1, r0
 8006d5c:	8952      	ldrh	r2, [r2, #10]
 8006d5e:	fbb1 f1f2 	udiv	r1, r1, r2
 8006d62:	e001      	b.n	8006d68 <clmt_clust+0x18>
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
		if (ncl == 0) return 0;	/* End of table? (error) */
		if (cl < ncl) break;	/* In this fragment? */
		cl -= ncl; tbl++;		/* Next fragment */
 8006d64:	1a09      	subs	r1, r1, r0
 8006d66:	3308      	adds	r3, #8
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8006d68:	6818      	ldr	r0, [r3, #0]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8006d6a:	b118      	cbz	r0, 8006d74 <clmt_clust+0x24>
		if (cl < ncl) break;	/* In this fragment? */
 8006d6c:	4281      	cmp	r1, r0
 8006d6e:	d2f9      	bcs.n	8006d64 <clmt_clust+0x14>
	}
	return cl + *tbl;	/* Return the cluster number */
 8006d70:	6858      	ldr	r0, [r3, #4]
 8006d72:	4408      	add	r0, r1
}
 8006d74:	4770      	bx	lr

08006d76 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 8006d76:	b570      	push	{r4, r5, r6, lr}
 8006d78:	4606      	mov	r6, r0
 8006d7a:	460d      	mov	r5, r1
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8006d7c:	f101 001a 	add.w	r0, r1, #26
 8006d80:	f7ff febe 	bl	8006b00 <ld_word>
	if (fs->fs_type == FS_FAT32) {
 8006d84:	7833      	ldrb	r3, [r6, #0]
 8006d86:	2b03      	cmp	r3, #3
 8006d88:	d000      	beq.n	8006d8c <ld_clust+0x16>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
	}

	return cl;
}
 8006d8a:	bd70      	pop	{r4, r5, r6, pc}
 8006d8c:	4604      	mov	r4, r0
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8006d8e:	f105 0014 	add.w	r0, r5, #20
 8006d92:	f7ff feb5 	bl	8006b00 <ld_word>
 8006d96:	ea44 4000 	orr.w	r0, r4, r0, lsl #16
	return cl;
 8006d9a:	e7f6      	b.n	8006d8a <ld_clust+0x14>

08006d9c <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8006d9c:	b570      	push	{r4, r5, r6, lr}
 8006d9e:	4606      	mov	r6, r0
 8006da0:	460c      	mov	r4, r1
 8006da2:	4615      	mov	r5, r2
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8006da4:	b291      	uxth	r1, r2
 8006da6:	f104 001a 	add.w	r0, r4, #26
 8006daa:	f7ff feb9 	bl	8006b20 <st_word>
	if (fs->fs_type == FS_FAT32) {
 8006dae:	7833      	ldrb	r3, [r6, #0]
 8006db0:	2b03      	cmp	r3, #3
 8006db2:	d000      	beq.n	8006db6 <st_clust+0x1a>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
	}
}
 8006db4:	bd70      	pop	{r4, r5, r6, pc}
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8006db6:	0c29      	lsrs	r1, r5, #16
 8006db8:	f104 0014 	add.w	r0, r4, #20
 8006dbc:	f7ff feb0 	bl	8006b20 <st_word>
}
 8006dc0:	e7f8      	b.n	8006db4 <st_clust+0x18>
	...

08006dc4 <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 8006dc4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006dc8:	4680      	mov	r8, r0
 8006dca:	460f      	mov	r7, r1
 8006dcc:	4691      	mov	r9, r2
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 8006dce:	734b      	strb	r3, [r1, #13]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 8006dd0:	230f      	movs	r3, #15
 8006dd2:	72cb      	strb	r3, [r1, #11]
	dir[LDIR_Type] = 0;
 8006dd4:	2400      	movs	r4, #0
 8006dd6:	730c      	strb	r4, [r1, #12]
	st_word(dir + LDIR_FstClusLO, 0);
 8006dd8:	4621      	mov	r1, r4
 8006dda:	f107 001a 	add.w	r0, r7, #26
 8006dde:	f7ff fe9f 	bl	8006b20 <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 8006de2:	f109 36ff 	add.w	r6, r9, #4294967295
 8006de6:	eb06 0346 	add.w	r3, r6, r6, lsl #1
 8006dea:	eb06 0683 	add.w	r6, r6, r3, lsl #2
	s = wc = 0;
 8006dee:	4625      	mov	r5, r4
 8006df0:	e002      	b.n	8006df8 <put_lfn+0x34>
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
		st_word(dir + LfnOfs[s], wc);		/* Put it */
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
	} while (++s < 13);
 8006df2:	3401      	adds	r4, #1
 8006df4:	2c0c      	cmp	r4, #12
 8006df6:	d811      	bhi.n	8006e1c <put_lfn+0x58>
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 8006df8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8006dfc:	429d      	cmp	r5, r3
 8006dfe:	d002      	beq.n	8006e06 <put_lfn+0x42>
 8006e00:	f838 5016 	ldrh.w	r5, [r8, r6, lsl #1]
 8006e04:	3601      	adds	r6, #1
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 8006e06:	4b0c      	ldr	r3, [pc, #48]	; (8006e38 <put_lfn+0x74>)
 8006e08:	5d18      	ldrb	r0, [r3, r4]
 8006e0a:	4629      	mov	r1, r5
 8006e0c:	4438      	add	r0, r7
 8006e0e:	f7ff fe87 	bl	8006b20 <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 8006e12:	2d00      	cmp	r5, #0
 8006e14:	d1ed      	bne.n	8006df2 <put_lfn+0x2e>
 8006e16:	f64f 75ff 	movw	r5, #65535	; 0xffff
 8006e1a:	e7ea      	b.n	8006df2 <put_lfn+0x2e>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 8006e1c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8006e20:	429d      	cmp	r5, r3
 8006e22:	d002      	beq.n	8006e2a <put_lfn+0x66>
 8006e24:	f838 3016 	ldrh.w	r3, [r8, r6, lsl #1]
 8006e28:	b90b      	cbnz	r3, 8006e2e <put_lfn+0x6a>
 8006e2a:	f049 0940 	orr.w	r9, r9, #64	; 0x40
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 8006e2e:	f887 9000 	strb.w	r9, [r7]
}
 8006e32:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006e36:	bf00      	nop
 8006e38:	08009118 	.word	0x08009118

08006e3c <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 8006e3c:	b570      	push	{r4, r5, r6, lr}
 8006e3e:	b082      	sub	sp, #8
 8006e40:	4605      	mov	r5, r0
 8006e42:	4616      	mov	r6, r2
 8006e44:	461c      	mov	r4, r3
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 8006e46:	220b      	movs	r2, #11
 8006e48:	f7ff fe78 	bl	8006b3c <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 8006e4c:	2c05      	cmp	r4, #5
 8006e4e:	d811      	bhi.n	8006e74 <gen_numname+0x38>
		sr = seq;
		while (*lfn) {	/* Create a CRC */
			wc = *lfn++;
			for (i = 0; i < 16; i++) {
 8006e50:	2307      	movs	r3, #7
 8006e52:	e01f      	b.n	8006e94 <gen_numname+0x58>
 8006e54:	3101      	adds	r1, #1
 8006e56:	290f      	cmp	r1, #15
 8006e58:	d80c      	bhi.n	8006e74 <gen_numname+0x38>
				sr = (sr << 1) + (wc & 1);
 8006e5a:	f003 0c01 	and.w	ip, r3, #1
 8006e5e:	eb0c 0444 	add.w	r4, ip, r4, lsl #1
				wc >>= 1;
 8006e62:	085b      	lsrs	r3, r3, #1
				if (sr & 0x10000) sr ^= 0x11021;
 8006e64:	f414 3f80 	tst.w	r4, #65536	; 0x10000
 8006e68:	d0f4      	beq.n	8006e54 <gen_numname+0x18>
 8006e6a:	f484 3488 	eor.w	r4, r4, #69632	; 0x11000
 8006e6e:	f084 0421 	eor.w	r4, r4, #33	; 0x21
 8006e72:	e7ef      	b.n	8006e54 <gen_numname+0x18>
		while (*lfn) {	/* Create a CRC */
 8006e74:	8833      	ldrh	r3, [r6, #0]
 8006e76:	2b00      	cmp	r3, #0
 8006e78:	d0ea      	beq.n	8006e50 <gen_numname+0x14>
			wc = *lfn++;
 8006e7a:	3602      	adds	r6, #2
			for (i = 0; i < 16; i++) {
 8006e7c:	2100      	movs	r1, #0
 8006e7e:	e7ea      	b.n	8006e56 <gen_numname+0x1a>
	/* itoa (hexdecimal) */
	i = 7;
	do {
		c = (BYTE)((seq % 16) + '0');
		if (c > '9') c += 7;
		ns[i--] = c;
 8006e80:	1e5a      	subs	r2, r3, #1
 8006e82:	3308      	adds	r3, #8
 8006e84:	446b      	add	r3, sp
 8006e86:	f803 1c08 	strb.w	r1, [r3, #-8]
		seq /= 16;
 8006e8a:	0921      	lsrs	r1, r4, #4
	} while (seq);
 8006e8c:	2c0f      	cmp	r4, #15
 8006e8e:	d90a      	bls.n	8006ea6 <gen_numname+0x6a>
		ns[i--] = c;
 8006e90:	4613      	mov	r3, r2
		seq /= 16;
 8006e92:	460c      	mov	r4, r1
		c = (BYTE)((seq % 16) + '0');
 8006e94:	f004 020f 	and.w	r2, r4, #15
 8006e98:	f102 0130 	add.w	r1, r2, #48	; 0x30
		if (c > '9') c += 7;
 8006e9c:	2939      	cmp	r1, #57	; 0x39
 8006e9e:	d9ef      	bls.n	8006e80 <gen_numname+0x44>
 8006ea0:	f102 0137 	add.w	r1, r2, #55	; 0x37
 8006ea4:	e7ec      	b.n	8006e80 <gen_numname+0x44>
	ns[i] = '~';
 8006ea6:	217e      	movs	r1, #126	; 0x7e
 8006ea8:	f102 0308 	add.w	r3, r2, #8
 8006eac:	446b      	add	r3, sp
 8006eae:	f803 1c08 	strb.w	r1, [r3, #-8]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 8006eb2:	2300      	movs	r3, #0
 8006eb4:	e000      	b.n	8006eb8 <gen_numname+0x7c>
 8006eb6:	3301      	adds	r3, #1
 8006eb8:	4293      	cmp	r3, r2
 8006eba:	d209      	bcs.n	8006ed0 <gen_numname+0x94>
 8006ebc:	5ce9      	ldrb	r1, [r5, r3]
 8006ebe:	2920      	cmp	r1, #32
 8006ec0:	d1f9      	bne.n	8006eb6 <gen_numname+0x7a>
 8006ec2:	e005      	b.n	8006ed0 <gen_numname+0x94>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8006ec4:	2020      	movs	r0, #32
 8006ec6:	1c59      	adds	r1, r3, #1
 8006ec8:	54e8      	strb	r0, [r5, r3]
	} while (j < 8);
 8006eca:	2907      	cmp	r1, #7
 8006ecc:	d809      	bhi.n	8006ee2 <gen_numname+0xa6>
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8006ece:	460b      	mov	r3, r1
 8006ed0:	2a07      	cmp	r2, #7
 8006ed2:	d8f7      	bhi.n	8006ec4 <gen_numname+0x88>
 8006ed4:	f102 0108 	add.w	r1, r2, #8
 8006ed8:	4469      	add	r1, sp
 8006eda:	f811 0c08 	ldrb.w	r0, [r1, #-8]
 8006ede:	3201      	adds	r2, #1
 8006ee0:	e7f1      	b.n	8006ec6 <gen_numname+0x8a>
}
 8006ee2:	b002      	add	sp, #8
 8006ee4:	bd70      	pop	{r4, r5, r6, pc}

08006ee6 <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 8006ee6:	4601      	mov	r1, r0
	BYTE sum = 0;
	UINT n = 11;
 8006ee8:	f04f 0c0b 	mov.w	ip, #11
	BYTE sum = 0;
 8006eec:	2000      	movs	r0, #0

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 8006eee:	01c3      	lsls	r3, r0, #7
 8006ef0:	ea43 0350 	orr.w	r3, r3, r0, lsr #1
 8006ef4:	7808      	ldrb	r0, [r1, #0]
 8006ef6:	3101      	adds	r1, #1
 8006ef8:	fa50 f383 	uxtab	r3, r0, r3
 8006efc:	b2d8      	uxtb	r0, r3
	} while (--n);
 8006efe:	f1bc 0c01 	subs.w	ip, ip, #1
 8006f02:	d1f4      	bne.n	8006eee <sum_sfn+0x8>
	return sum;
}
 8006f04:	4770      	bx	lr

08006f06 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8006f06:	4601      	mov	r1, r0
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8006f08:	6800      	ldr	r0, [r0, #0]
 8006f0a:	b138      	cbz	r0, 8006f1c <get_ldnumber+0x16>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8006f0c:	4602      	mov	r2, r0
 8006f0e:	7813      	ldrb	r3, [r2, #0]
 8006f10:	2b1f      	cmp	r3, #31
 8006f12:	d906      	bls.n	8006f22 <get_ldnumber+0x1c>
 8006f14:	2b3a      	cmp	r3, #58	; 0x3a
 8006f16:	d004      	beq.n	8006f22 <get_ldnumber+0x1c>
 8006f18:	3201      	adds	r2, #1
 8006f1a:	e7f8      	b.n	8006f0e <get_ldnumber+0x8>
	int vol = -1;
 8006f1c:	f04f 30ff 	mov.w	r0, #4294967295
 8006f20:	4770      	bx	lr
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8006f22:	2b3a      	cmp	r3, #58	; 0x3a
 8006f24:	d001      	beq.n	8006f2a <get_ldnumber+0x24>
			return vol;
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8006f26:	2000      	movs	r0, #0
#endif
	}
	return vol;
}
 8006f28:	4770      	bx	lr
{
 8006f2a:	b410      	push	{r4}
			i = *tp++ - '0';
 8006f2c:	4603      	mov	r3, r0
 8006f2e:	f813 0b01 	ldrb.w	r0, [r3], #1
 8006f32:	3830      	subs	r0, #48	; 0x30
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8006f34:	2809      	cmp	r0, #9
 8006f36:	d808      	bhi.n	8006f4a <get_ldnumber+0x44>
 8006f38:	429a      	cmp	r2, r3
 8006f3a:	d002      	beq.n	8006f42 <get_ldnumber+0x3c>
	int vol = -1;
 8006f3c:	f04f 30ff 	mov.w	r0, #4294967295
 8006f40:	e005      	b.n	8006f4e <get_ldnumber+0x48>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8006f42:	b938      	cbnz	r0, 8006f54 <get_ldnumber+0x4e>
					*path = ++tt;
 8006f44:	3201      	adds	r2, #1
 8006f46:	600a      	str	r2, [r1, #0]
 8006f48:	e001      	b.n	8006f4e <get_ldnumber+0x48>
	int vol = -1;
 8006f4a:	f04f 30ff 	mov.w	r0, #4294967295
}
 8006f4e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006f52:	4770      	bx	lr
	int vol = -1;
 8006f54:	f04f 30ff 	mov.w	r0, #4294967295
			return vol;
 8006f58:	e7f9      	b.n	8006f4e <get_ldnumber+0x48>

08006f5a <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8006f5a:	b538      	push	{r3, r4, r5, lr}
 8006f5c:	460d      	mov	r5, r1
	FRESULT res = FR_INVALID_OBJECT;


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8006f5e:	4604      	mov	r4, r0
 8006f60:	b198      	cbz	r0, 8006f8a <validate+0x30>
 8006f62:	6803      	ldr	r3, [r0, #0]
 8006f64:	b19b      	cbz	r3, 8006f8e <validate+0x34>
 8006f66:	781a      	ldrb	r2, [r3, #0]
 8006f68:	b1a2      	cbz	r2, 8006f94 <validate+0x3a>
 8006f6a:	8881      	ldrh	r1, [r0, #4]
 8006f6c:	88da      	ldrh	r2, [r3, #6]
 8006f6e:	4291      	cmp	r1, r2
 8006f70:	d003      	beq.n	8006f7a <validate+0x20>
	FRESULT res = FR_INVALID_OBJECT;
 8006f72:	2009      	movs	r0, #9
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
			res = FR_OK;
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8006f74:	2400      	movs	r4, #0
 8006f76:	602c      	str	r4, [r5, #0]
	return res;
}
 8006f78:	bd38      	pop	{r3, r4, r5, pc}
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8006f7a:	7858      	ldrb	r0, [r3, #1]
 8006f7c:	f7ff fd7c 	bl	8006a78 <disk_status>
 8006f80:	f010 0001 	ands.w	r0, r0, #1
 8006f84:	d109      	bne.n	8006f9a <validate+0x40>
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8006f86:	6824      	ldr	r4, [r4, #0]
 8006f88:	e7f5      	b.n	8006f76 <validate+0x1c>
	FRESULT res = FR_INVALID_OBJECT;
 8006f8a:	2009      	movs	r0, #9
 8006f8c:	e7f3      	b.n	8006f76 <validate+0x1c>
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8006f8e:	461c      	mov	r4, r3
	FRESULT res = FR_INVALID_OBJECT;
 8006f90:	2009      	movs	r0, #9
 8006f92:	e7f0      	b.n	8006f76 <validate+0x1c>
 8006f94:	2009      	movs	r0, #9
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8006f96:	2400      	movs	r4, #0
 8006f98:	e7ed      	b.n	8006f76 <validate+0x1c>
	FRESULT res = FR_INVALID_OBJECT;
 8006f9a:	2009      	movs	r0, #9
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8006f9c:	2400      	movs	r4, #0
 8006f9e:	e7ea      	b.n	8006f76 <validate+0x1c>

08006fa0 <sync_window>:
{
 8006fa0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8006fa4:	78c5      	ldrb	r5, [r0, #3]
 8006fa6:	b915      	cbnz	r5, 8006fae <sync_window+0xe>
}
 8006fa8:	4628      	mov	r0, r5
 8006faa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006fae:	4604      	mov	r4, r0
		wsect = fs->winsect;	/* Current sector number */
 8006fb0:	6b47      	ldr	r7, [r0, #52]	; 0x34
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8006fb2:	f100 0838 	add.w	r8, r0, #56	; 0x38
 8006fb6:	2301      	movs	r3, #1
 8006fb8:	463a      	mov	r2, r7
 8006fba:	4641      	mov	r1, r8
 8006fbc:	7840      	ldrb	r0, [r0, #1]
 8006fbe:	f7ff fd87 	bl	8006ad0 <disk_write>
 8006fc2:	4605      	mov	r5, r0
 8006fc4:	b9a0      	cbnz	r0, 8006ff0 <sync_window+0x50>
			fs->wflag = 0;
 8006fc6:	2300      	movs	r3, #0
 8006fc8:	70e3      	strb	r3, [r4, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8006fca:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8006fcc:	1afb      	subs	r3, r7, r3
 8006fce:	6a22      	ldr	r2, [r4, #32]
 8006fd0:	4293      	cmp	r3, r2
 8006fd2:	d2e9      	bcs.n	8006fa8 <sync_window+0x8>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8006fd4:	78a6      	ldrb	r6, [r4, #2]
 8006fd6:	e008      	b.n	8006fea <sync_window+0x4a>
					wsect += fs->fsize;
 8006fd8:	6a23      	ldr	r3, [r4, #32]
 8006fda:	441f      	add	r7, r3
					disk_write(fs->drv, fs->win, wsect, 1);
 8006fdc:	2301      	movs	r3, #1
 8006fde:	463a      	mov	r2, r7
 8006fe0:	4641      	mov	r1, r8
 8006fe2:	7860      	ldrb	r0, [r4, #1]
 8006fe4:	f7ff fd74 	bl	8006ad0 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8006fe8:	3e01      	subs	r6, #1
 8006fea:	2e01      	cmp	r6, #1
 8006fec:	d8f4      	bhi.n	8006fd8 <sync_window+0x38>
 8006fee:	e7db      	b.n	8006fa8 <sync_window+0x8>
			res = FR_DISK_ERR;
 8006ff0:	2501      	movs	r5, #1
 8006ff2:	e7d9      	b.n	8006fa8 <sync_window+0x8>

08006ff4 <move_window>:
{
 8006ff4:	b570      	push	{r4, r5, r6, lr}
	if (sector != fs->winsect) {	/* Window offset changed? */
 8006ff6:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8006ff8:	428b      	cmp	r3, r1
 8006ffa:	d102      	bne.n	8007002 <move_window+0xe>
	FRESULT res = FR_OK;
 8006ffc:	2600      	movs	r6, #0
}
 8006ffe:	4630      	mov	r0, r6
 8007000:	bd70      	pop	{r4, r5, r6, pc}
 8007002:	4604      	mov	r4, r0
 8007004:	460d      	mov	r5, r1
		res = sync_window(fs);		/* Write-back changes */
 8007006:	f7ff ffcb 	bl	8006fa0 <sync_window>
		if (res == FR_OK) {			/* Fill sector window with new data */
 800700a:	4606      	mov	r6, r0
 800700c:	2800      	cmp	r0, #0
 800700e:	d1f6      	bne.n	8006ffe <move_window+0xa>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8007010:	2301      	movs	r3, #1
 8007012:	462a      	mov	r2, r5
 8007014:	f104 0138 	add.w	r1, r4, #56	; 0x38
 8007018:	7860      	ldrb	r0, [r4, #1]
 800701a:	f7ff fd4d 	bl	8006ab8 <disk_read>
 800701e:	b110      	cbz	r0, 8007026 <move_window+0x32>
				res = FR_DISK_ERR;
 8007020:	2601      	movs	r6, #1
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8007022:	f04f 35ff 	mov.w	r5, #4294967295
			fs->winsect = sector;
 8007026:	6365      	str	r5, [r4, #52]	; 0x34
 8007028:	e7e9      	b.n	8006ffe <move_window+0xa>
	...

0800702c <check_fs>:
{
 800702c:	b538      	push	{r3, r4, r5, lr}
 800702e:	4604      	mov	r4, r0
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8007030:	2300      	movs	r3, #0
 8007032:	70c3      	strb	r3, [r0, #3]
 8007034:	f04f 33ff 	mov.w	r3, #4294967295
 8007038:	6343      	str	r3, [r0, #52]	; 0x34
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800703a:	f7ff ffdb 	bl	8006ff4 <move_window>
 800703e:	bb30      	cbnz	r0, 800708e <check_fs+0x62>
 8007040:	4605      	mov	r5, r0
	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8007042:	f204 2036 	addw	r0, r4, #566	; 0x236
 8007046:	f7ff fd5b 	bl	8006b00 <ld_word>
 800704a:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800704e:	4298      	cmp	r0, r3
 8007050:	d11f      	bne.n	8007092 <check_fs+0x66>
	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8007052:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 8007056:	2be9      	cmp	r3, #233	; 0xe9
 8007058:	d007      	beq.n	800706a <check_fs+0x3e>
 800705a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800705c:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8007060:	4a0d      	ldr	r2, [pc, #52]	; (8007098 <check_fs+0x6c>)
 8007062:	4293      	cmp	r3, r2
 8007064:	d001      	beq.n	800706a <check_fs+0x3e>
	return 2;
 8007066:	2502      	movs	r5, #2
 8007068:	e014      	b.n	8007094 <check_fs+0x68>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800706a:	f104 006e 	add.w	r0, r4, #110	; 0x6e
 800706e:	f7ff fd4c 	bl	8006b0a <ld_dword>
 8007072:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8007076:	4b09      	ldr	r3, [pc, #36]	; (800709c <check_fs+0x70>)
 8007078:	4298      	cmp	r0, r3
 800707a:	d00b      	beq.n	8007094 <check_fs+0x68>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800707c:	f104 008a 	add.w	r0, r4, #138	; 0x8a
 8007080:	f7ff fd43 	bl	8006b0a <ld_dword>
 8007084:	4b06      	ldr	r3, [pc, #24]	; (80070a0 <check_fs+0x74>)
 8007086:	4298      	cmp	r0, r3
 8007088:	d004      	beq.n	8007094 <check_fs+0x68>
	return 2;
 800708a:	2502      	movs	r5, #2
 800708c:	e002      	b.n	8007094 <check_fs+0x68>
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800708e:	2504      	movs	r5, #4
 8007090:	e000      	b.n	8007094 <check_fs+0x68>
	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8007092:	2503      	movs	r5, #3
}
 8007094:	4628      	mov	r0, r5
 8007096:	bd38      	pop	{r3, r4, r5, pc}
 8007098:	009000eb 	.word	0x009000eb
 800709c:	00544146 	.word	0x00544146
 80070a0:	33544146 	.word	0x33544146

080070a4 <find_volume>:
{
 80070a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80070a8:	b087      	sub	sp, #28
 80070aa:	460d      	mov	r5, r1
 80070ac:	4616      	mov	r6, r2
	*rfs = 0;
 80070ae:	2300      	movs	r3, #0
 80070b0:	600b      	str	r3, [r1, #0]
	vol = get_ldnumber(path);
 80070b2:	f7ff ff28 	bl	8006f06 <get_ldnumber>
	if (vol < 0) return FR_INVALID_DRIVE;
 80070b6:	1e07      	subs	r7, r0, #0
 80070b8:	f2c0 8168 	blt.w	800738c <find_volume+0x2e8>
	fs = FatFs[vol];					/* Get pointer to the file system object */
 80070bc:	4bbe      	ldr	r3, [pc, #760]	; (80073b8 <find_volume+0x314>)
 80070be:	f853 4027 	ldr.w	r4, [r3, r7, lsl #2]
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 80070c2:	2c00      	cmp	r4, #0
 80070c4:	f000 8167 	beq.w	8007396 <find_volume+0x2f2>
	*rfs = fs;							/* Return pointer to the file system object */
 80070c8:	602c      	str	r4, [r5, #0]
	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 80070ca:	f006 06fe 	and.w	r6, r6, #254	; 0xfe
	if (fs->fs_type) {					/* If the volume has been mounted */
 80070ce:	7823      	ldrb	r3, [r4, #0]
 80070d0:	b173      	cbz	r3, 80070f0 <find_volume+0x4c>
		stat = disk_status(fs->drv);
 80070d2:	7860      	ldrb	r0, [r4, #1]
 80070d4:	f7ff fcd0 	bl	8006a78 <disk_status>
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 80070d8:	f010 0501 	ands.w	r5, r0, #1
 80070dc:	d108      	bne.n	80070f0 <find_volume+0x4c>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 80070de:	2e00      	cmp	r6, #0
 80070e0:	f000 8155 	beq.w	800738e <find_volume+0x2ea>
 80070e4:	f010 0f04 	tst.w	r0, #4
 80070e8:	f000 8151 	beq.w	800738e <find_volume+0x2ea>
				return FR_WRITE_PROTECTED;
 80070ec:	250a      	movs	r5, #10
 80070ee:	e14e      	b.n	800738e <find_volume+0x2ea>
	fs->fs_type = 0;					/* Clear the file system object */
 80070f0:	2300      	movs	r3, #0
 80070f2:	7023      	strb	r3, [r4, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 80070f4:	b2f8      	uxtb	r0, r7
 80070f6:	7060      	strb	r0, [r4, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 80070f8:	f7ff fcca 	bl	8006a90 <disk_initialize>
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 80070fc:	f010 0f01 	tst.w	r0, #1
 8007100:	f040 814b 	bne.w	800739a <find_volume+0x2f6>
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8007104:	b11e      	cbz	r6, 800710e <find_volume+0x6a>
 8007106:	f010 0f04 	tst.w	r0, #4
 800710a:	f040 8148 	bne.w	800739e <find_volume+0x2fa>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 800710e:	f104 020c 	add.w	r2, r4, #12
 8007112:	2102      	movs	r1, #2
 8007114:	7860      	ldrb	r0, [r4, #1]
 8007116:	f7ff fce7 	bl	8006ae8 <disk_ioctl>
 800711a:	4605      	mov	r5, r0
 800711c:	2800      	cmp	r0, #0
 800711e:	f040 8140 	bne.w	80073a2 <find_volume+0x2fe>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 8007122:	89a2      	ldrh	r2, [r4, #12]
 8007124:	f5a2 7300 	sub.w	r3, r2, #512	; 0x200
 8007128:	b29b      	uxth	r3, r3
 800712a:	f5b3 6f60 	cmp.w	r3, #3584	; 0xe00
 800712e:	f200 813a 	bhi.w	80073a6 <find_volume+0x302>
 8007132:	1e53      	subs	r3, r2, #1
 8007134:	421a      	tst	r2, r3
 8007136:	d001      	beq.n	800713c <find_volume+0x98>
 8007138:	2501      	movs	r5, #1
 800713a:	e128      	b.n	800738e <find_volume+0x2ea>
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800713c:	2100      	movs	r1, #0
 800713e:	4620      	mov	r0, r4
 8007140:	f7ff ff74 	bl	800702c <check_fs>
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8007144:	2802      	cmp	r0, #2
 8007146:	f000 80c3 	beq.w	80072d0 <find_volume+0x22c>
	bsect = 0;
 800714a:	2600      	movs	r6, #0
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800714c:	2804      	cmp	r0, #4
 800714e:	f000 812c 	beq.w	80073aa <find_volume+0x306>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8007152:	2801      	cmp	r0, #1
 8007154:	f200 812b 	bhi.w	80073ae <find_volume+0x30a>
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8007158:	f104 0043 	add.w	r0, r4, #67	; 0x43
 800715c:	f7ff fcd0 	bl	8006b00 <ld_word>
 8007160:	f8b4 800c 	ldrh.w	r8, [r4, #12]
 8007164:	4540      	cmp	r0, r8
 8007166:	f040 8124 	bne.w	80073b2 <find_volume+0x30e>
		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800716a:	f104 004e 	add.w	r0, r4, #78	; 0x4e
 800716e:	f7ff fcc7 	bl	8006b00 <ld_word>
 8007172:	4607      	mov	r7, r0
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8007174:	b920      	cbnz	r0, 8007180 <find_volume+0xdc>
 8007176:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800717a:	f7ff fcc6 	bl	8006b0a <ld_dword>
 800717e:	4607      	mov	r7, r0
		fs->fsize = fasize;
 8007180:	6227      	str	r7, [r4, #32]
		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8007182:	f894 2048 	ldrb.w	r2, [r4, #72]	; 0x48
 8007186:	70a2      	strb	r2, [r4, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8007188:	1e53      	subs	r3, r2, #1
 800718a:	b2db      	uxtb	r3, r3
 800718c:	2b01      	cmp	r3, #1
 800718e:	f200 811d 	bhi.w	80073cc <find_volume+0x328>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8007192:	fb07 f302 	mul.w	r3, r7, r2
 8007196:	9300      	str	r3, [sp, #0]
		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8007198:	f894 9045 	ldrb.w	r9, [r4, #69]	; 0x45
 800719c:	f8a4 900a 	strh.w	r9, [r4, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 80071a0:	f1b9 0f00 	cmp.w	r9, #0
 80071a4:	f000 8114 	beq.w	80073d0 <find_volume+0x32c>
 80071a8:	f109 33ff 	add.w	r3, r9, #4294967295
 80071ac:	ea19 0f03 	tst.w	r9, r3
 80071b0:	f040 8110 	bne.w	80073d4 <find_volume+0x330>
		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 80071b4:	f104 0049 	add.w	r0, r4, #73	; 0x49
 80071b8:	f7ff fca2 	bl	8006b00 <ld_word>
 80071bc:	4682      	mov	sl, r0
 80071be:	8120      	strh	r0, [r4, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 80071c0:	ea4f 1b58 	mov.w	fp, r8, lsr #5
 80071c4:	fbb0 f3fb 	udiv	r3, r0, fp
 80071c8:	fb0b 0313 	mls	r3, fp, r3, r0
 80071cc:	b29b      	uxth	r3, r3
 80071ce:	2b00      	cmp	r3, #0
 80071d0:	f040 8102 	bne.w	80073d8 <find_volume+0x334>
		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 80071d4:	f104 004b 	add.w	r0, r4, #75	; 0x4b
 80071d8:	f7ff fc92 	bl	8006b00 <ld_word>
 80071dc:	9001      	str	r0, [sp, #4]
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 80071de:	b920      	cbnz	r0, 80071ea <find_volume+0x146>
 80071e0:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80071e4:	f7ff fc91 	bl	8006b0a <ld_dword>
 80071e8:	9001      	str	r0, [sp, #4]
		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 80071ea:	f104 0046 	add.w	r0, r4, #70	; 0x46
 80071ee:	f7ff fc87 	bl	8006b00 <ld_word>
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 80071f2:	4601      	mov	r1, r0
 80071f4:	2800      	cmp	r0, #0
 80071f6:	f000 80f1 	beq.w	80073dc <find_volume+0x338>
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 80071fa:	9b00      	ldr	r3, [sp, #0]
 80071fc:	18c3      	adds	r3, r0, r3
 80071fe:	fbba fbfb 	udiv	fp, sl, fp
 8007202:	445b      	add	r3, fp
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8007204:	9a01      	ldr	r2, [sp, #4]
 8007206:	429a      	cmp	r2, r3
 8007208:	f0c0 80ea 	bcc.w	80073e0 <find_volume+0x33c>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800720c:	1ad2      	subs	r2, r2, r3
 800720e:	fbb2 f0f9 	udiv	r0, r2, r9
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8007212:	454a      	cmp	r2, r9
 8007214:	f0c0 80e6 	bcc.w	80073e4 <find_volume+0x340>
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8007218:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800721c:	4290      	cmp	r0, r2
 800721e:	d96f      	bls.n	8007300 <find_volume+0x25c>
		fmt = FS_FAT32;
 8007220:	f04f 0b03 	mov.w	fp, #3
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8007224:	f640 72f5 	movw	r2, #4085	; 0xff5
 8007228:	4290      	cmp	r0, r2
 800722a:	d801      	bhi.n	8007230 <find_volume+0x18c>
 800722c:	f04f 0b01 	mov.w	fp, #1
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8007230:	f100 0902 	add.w	r9, r0, #2
 8007234:	f8c4 901c 	str.w	r9, [r4, #28]
		fs->volbase = bsect;							/* Volume start sector */
 8007238:	6266      	str	r6, [r4, #36]	; 0x24
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800723a:	198a      	adds	r2, r1, r6
 800723c:	62a2      	str	r2, [r4, #40]	; 0x28
		fs->database = bsect + sysect;					/* Data start sector */
 800723e:	4433      	add	r3, r6
 8007240:	6323      	str	r3, [r4, #48]	; 0x30
		if (fmt == FS_FAT32) {
 8007242:	f1bb 0f03 	cmp.w	fp, #3
 8007246:	d05e      	beq.n	8007306 <find_volume+0x262>
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8007248:	f1ba 0f00 	cmp.w	sl, #0
 800724c:	f000 80d0 	beq.w	80073f0 <find_volume+0x34c>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8007250:	9b00      	ldr	r3, [sp, #0]
 8007252:	441a      	add	r2, r3
 8007254:	62e2      	str	r2, [r4, #44]	; 0x2c
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8007256:	f1bb 0f02 	cmp.w	fp, #2
 800725a:	d065      	beq.n	8007328 <find_volume+0x284>
 800725c:	eb09 0249 	add.w	r2, r9, r9, lsl #1
 8007260:	f009 0301 	and.w	r3, r9, #1
 8007264:	eb03 0352 	add.w	r3, r3, r2, lsr #1
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8007268:	4443      	add	r3, r8
 800726a:	3b01      	subs	r3, #1
 800726c:	fbb3 f8f8 	udiv	r8, r3, r8
 8007270:	45b8      	cmp	r8, r7
 8007272:	f200 80bf 	bhi.w	80073f4 <find_volume+0x350>
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8007276:	f04f 33ff 	mov.w	r3, #4294967295
 800727a:	61a3      	str	r3, [r4, #24]
 800727c:	6163      	str	r3, [r4, #20]
		fs->fsi_flag = 0x80;
 800727e:	2380      	movs	r3, #128	; 0x80
 8007280:	7123      	strb	r3, [r4, #4]
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8007282:	f1bb 0f03 	cmp.w	fp, #3
 8007286:	d052      	beq.n	800732e <find_volume+0x28a>
	fs->fs_type = fmt;		/* FAT sub-type */
 8007288:	f884 b000 	strb.w	fp, [r4]
	fs->id = ++Fsid;		/* File system mount ID */
 800728c:	4a4b      	ldr	r2, [pc, #300]	; (80073bc <find_volume+0x318>)
 800728e:	8813      	ldrh	r3, [r2, #0]
 8007290:	3301      	adds	r3, #1
 8007292:	b29b      	uxth	r3, r3
 8007294:	8013      	strh	r3, [r2, #0]
 8007296:	80e3      	strh	r3, [r4, #6]
	fs->lfnbuf = LfnBuf;	/* Static LFN working buffer */
 8007298:	4b49      	ldr	r3, [pc, #292]	; (80073c0 <find_volume+0x31c>)
 800729a:	6123      	str	r3, [r4, #16]
	clear_lock(fs);
 800729c:	4620      	mov	r0, r4
 800729e:	f7ff fd2d 	bl	8006cfc <clear_lock>
	return FR_OK;
 80072a2:	e074      	b.n	800738e <find_volume+0x2ea>
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 80072a4:	2000      	movs	r0, #0
 80072a6:	ab06      	add	r3, sp, #24
 80072a8:	eb03 0386 	add.w	r3, r3, r6, lsl #2
 80072ac:	f843 0c10 	str.w	r0, [r3, #-16]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 80072b0:	3601      	adds	r6, #1
 80072b2:	2e03      	cmp	r6, #3
 80072b4:	d80e      	bhi.n	80072d4 <find_volume+0x230>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 80072b6:	f104 0038 	add.w	r0, r4, #56	; 0x38
 80072ba:	0133      	lsls	r3, r6, #4
 80072bc:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 80072c0:	4418      	add	r0, r3
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 80072c2:	7903      	ldrb	r3, [r0, #4]
 80072c4:	2b00      	cmp	r3, #0
 80072c6:	d0ed      	beq.n	80072a4 <find_volume+0x200>
 80072c8:	3008      	adds	r0, #8
 80072ca:	f7ff fc1e 	bl	8006b0a <ld_dword>
 80072ce:	e7ea      	b.n	80072a6 <find_volume+0x202>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 80072d0:	2600      	movs	r6, #0
 80072d2:	e7ee      	b.n	80072b2 <find_volume+0x20e>
 80072d4:	2700      	movs	r7, #0
 80072d6:	e00a      	b.n	80072ee <find_volume+0x24a>
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 80072d8:	4631      	mov	r1, r6
 80072da:	4620      	mov	r0, r4
 80072dc:	f7ff fea6 	bl	800702c <check_fs>
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 80072e0:	2801      	cmp	r0, #1
 80072e2:	f67f af33 	bls.w	800714c <find_volume+0xa8>
 80072e6:	3701      	adds	r7, #1
 80072e8:	2f03      	cmp	r7, #3
 80072ea:	f63f af2f 	bhi.w	800714c <find_volume+0xa8>
			bsect = br[i];
 80072ee:	ab06      	add	r3, sp, #24
 80072f0:	eb03 0387 	add.w	r3, r3, r7, lsl #2
 80072f4:	f853 6c10 	ldr.w	r6, [r3, #-16]
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 80072f8:	2e00      	cmp	r6, #0
 80072fa:	d1ed      	bne.n	80072d8 <find_volume+0x234>
 80072fc:	2003      	movs	r0, #3
 80072fe:	e7f2      	b.n	80072e6 <find_volume+0x242>
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8007300:	f04f 0b02 	mov.w	fp, #2
 8007304:	e78e      	b.n	8007224 <find_volume+0x180>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8007306:	f104 0062 	add.w	r0, r4, #98	; 0x62
 800730a:	f7ff fbf9 	bl	8006b00 <ld_word>
 800730e:	2800      	cmp	r0, #0
 8007310:	d16a      	bne.n	80073e8 <find_volume+0x344>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8007312:	f1ba 0f00 	cmp.w	sl, #0
 8007316:	d169      	bne.n	80073ec <find_volume+0x348>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8007318:	f104 0064 	add.w	r0, r4, #100	; 0x64
 800731c:	f7ff fbf5 	bl	8006b0a <ld_dword>
 8007320:	62e0      	str	r0, [r4, #44]	; 0x2c
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8007322:	ea4f 0389 	mov.w	r3, r9, lsl #2
 8007326:	e79f      	b.n	8007268 <find_volume+0x1c4>
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8007328:	ea4f 0349 	mov.w	r3, r9, lsl #1
 800732c:	e79c      	b.n	8007268 <find_volume+0x1c4>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800732e:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8007332:	f7ff fbe5 	bl	8006b00 <ld_word>
 8007336:	2801      	cmp	r0, #1
 8007338:	d1a6      	bne.n	8007288 <find_volume+0x1e4>
			&& move_window(fs, bsect + 1) == FR_OK)
 800733a:	1c71      	adds	r1, r6, #1
 800733c:	4620      	mov	r0, r4
 800733e:	f7ff fe59 	bl	8006ff4 <move_window>
 8007342:	2800      	cmp	r0, #0
 8007344:	d1a0      	bne.n	8007288 <find_volume+0x1e4>
			fs->fsi_flag = 0;
 8007346:	2300      	movs	r3, #0
 8007348:	7123      	strb	r3, [r4, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800734a:	f204 2036 	addw	r0, r4, #566	; 0x236
 800734e:	f7ff fbd7 	bl	8006b00 <ld_word>
 8007352:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8007356:	4298      	cmp	r0, r3
 8007358:	d196      	bne.n	8007288 <find_volume+0x1e4>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800735a:	f104 0038 	add.w	r0, r4, #56	; 0x38
 800735e:	f7ff fbd4 	bl	8006b0a <ld_dword>
 8007362:	4b18      	ldr	r3, [pc, #96]	; (80073c4 <find_volume+0x320>)
 8007364:	4298      	cmp	r0, r3
 8007366:	d18f      	bne.n	8007288 <find_volume+0x1e4>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8007368:	f504 7007 	add.w	r0, r4, #540	; 0x21c
 800736c:	f7ff fbcd 	bl	8006b0a <ld_dword>
 8007370:	4b15      	ldr	r3, [pc, #84]	; (80073c8 <find_volume+0x324>)
 8007372:	4298      	cmp	r0, r3
 8007374:	d188      	bne.n	8007288 <find_volume+0x1e4>
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8007376:	f504 7008 	add.w	r0, r4, #544	; 0x220
 800737a:	f7ff fbc6 	bl	8006b0a <ld_dword>
 800737e:	61a0      	str	r0, [r4, #24]
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8007380:	f504 7009 	add.w	r0, r4, #548	; 0x224
 8007384:	f7ff fbc1 	bl	8006b0a <ld_dword>
 8007388:	6160      	str	r0, [r4, #20]
 800738a:	e77d      	b.n	8007288 <find_volume+0x1e4>
	if (vol < 0) return FR_INVALID_DRIVE;
 800738c:	250b      	movs	r5, #11
}
 800738e:	4628      	mov	r0, r5
 8007390:	b007      	add	sp, #28
 8007392:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8007396:	250c      	movs	r5, #12
 8007398:	e7f9      	b.n	800738e <find_volume+0x2ea>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800739a:	2503      	movs	r5, #3
 800739c:	e7f7      	b.n	800738e <find_volume+0x2ea>
		return FR_WRITE_PROTECTED;
 800739e:	250a      	movs	r5, #10
 80073a0:	e7f5      	b.n	800738e <find_volume+0x2ea>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 80073a2:	2501      	movs	r5, #1
 80073a4:	e7f3      	b.n	800738e <find_volume+0x2ea>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 80073a6:	2501      	movs	r5, #1
 80073a8:	e7f1      	b.n	800738e <find_volume+0x2ea>
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 80073aa:	2501      	movs	r5, #1
 80073ac:	e7ef      	b.n	800738e <find_volume+0x2ea>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 80073ae:	250d      	movs	r5, #13
 80073b0:	e7ed      	b.n	800738e <find_volume+0x2ea>
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 80073b2:	250d      	movs	r5, #13
 80073b4:	e7eb      	b.n	800738e <find_volume+0x2ea>
 80073b6:	bf00      	nop
 80073b8:	20016e64 	.word	0x20016e64
 80073bc:	20016e88 	.word	0x20016e88
 80073c0:	20016e8c 	.word	0x20016e8c
 80073c4:	41615252 	.word	0x41615252
 80073c8:	61417272 	.word	0x61417272
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 80073cc:	250d      	movs	r5, #13
 80073ce:	e7de      	b.n	800738e <find_volume+0x2ea>
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 80073d0:	250d      	movs	r5, #13
 80073d2:	e7dc      	b.n	800738e <find_volume+0x2ea>
 80073d4:	250d      	movs	r5, #13
 80073d6:	e7da      	b.n	800738e <find_volume+0x2ea>
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 80073d8:	250d      	movs	r5, #13
 80073da:	e7d8      	b.n	800738e <find_volume+0x2ea>
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 80073dc:	250d      	movs	r5, #13
 80073de:	e7d6      	b.n	800738e <find_volume+0x2ea>
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 80073e0:	250d      	movs	r5, #13
 80073e2:	e7d4      	b.n	800738e <find_volume+0x2ea>
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 80073e4:	250d      	movs	r5, #13
 80073e6:	e7d2      	b.n	800738e <find_volume+0x2ea>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 80073e8:	250d      	movs	r5, #13
 80073ea:	e7d0      	b.n	800738e <find_volume+0x2ea>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 80073ec:	250d      	movs	r5, #13
 80073ee:	e7ce      	b.n	800738e <find_volume+0x2ea>
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 80073f0:	250d      	movs	r5, #13
 80073f2:	e7cc      	b.n	800738e <find_volume+0x2ea>
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 80073f4:	250d      	movs	r5, #13
 80073f6:	e7ca      	b.n	800738e <find_volume+0x2ea>

080073f8 <put_fat>:
{
 80073f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 80073fc:	2901      	cmp	r1, #1
 80073fe:	f240 8096 	bls.w	800752e <put_fat+0x136>
 8007402:	4604      	mov	r4, r0
 8007404:	460d      	mov	r5, r1
 8007406:	4617      	mov	r7, r2
 8007408:	69c3      	ldr	r3, [r0, #28]
 800740a:	428b      	cmp	r3, r1
 800740c:	f240 8091 	bls.w	8007532 <put_fat+0x13a>
		switch (fs->fs_type) {
 8007410:	7803      	ldrb	r3, [r0, #0]
 8007412:	2b02      	cmp	r3, #2
 8007414:	d04f      	beq.n	80074b6 <put_fat+0xbe>
 8007416:	2b03      	cmp	r3, #3
 8007418:	d067      	beq.n	80074ea <put_fat+0xf2>
 800741a:	2b01      	cmp	r3, #1
 800741c:	d003      	beq.n	8007426 <put_fat+0x2e>
 800741e:	2602      	movs	r6, #2
}
 8007420:	4630      	mov	r0, r6
 8007422:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			bc = (UINT)clst; bc += bc / 2;
 8007426:	eb01 0851 	add.w	r8, r1, r1, lsr #1
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800742a:	6a81      	ldr	r1, [r0, #40]	; 0x28
 800742c:	8983      	ldrh	r3, [r0, #12]
 800742e:	fbb8 f3f3 	udiv	r3, r8, r3
 8007432:	4419      	add	r1, r3
 8007434:	f7ff fdde 	bl	8006ff4 <move_window>
			if (res != FR_OK) break;
 8007438:	4606      	mov	r6, r0
 800743a:	2800      	cmp	r0, #0
 800743c:	d1f0      	bne.n	8007420 <put_fat+0x28>
			p = fs->win + bc++ % SS(fs);
 800743e:	f104 0a38 	add.w	sl, r4, #56	; 0x38
 8007442:	f108 0901 	add.w	r9, r8, #1
 8007446:	89a3      	ldrh	r3, [r4, #12]
 8007448:	fbb8 f2f3 	udiv	r2, r8, r3
 800744c:	fb03 8812 	mls	r8, r3, r2, r8
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8007450:	f015 0501 	ands.w	r5, r5, #1
 8007454:	d024      	beq.n	80074a0 <put_fat+0xa8>
 8007456:	f91a 3008 	ldrsb.w	r3, [sl, r8]
 800745a:	f003 030f 	and.w	r3, r3, #15
 800745e:	013a      	lsls	r2, r7, #4
 8007460:	f402 627f 	and.w	r2, r2, #4080	; 0xff0
 8007464:	4313      	orrs	r3, r2
 8007466:	b2db      	uxtb	r3, r3
 8007468:	f80a 3008 	strb.w	r3, [sl, r8]
			fs->wflag = 1;
 800746c:	2301      	movs	r3, #1
 800746e:	70e3      	strb	r3, [r4, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8007470:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8007472:	89a3      	ldrh	r3, [r4, #12]
 8007474:	fbb9 f3f3 	udiv	r3, r9, r3
 8007478:	4419      	add	r1, r3
 800747a:	4620      	mov	r0, r4
 800747c:	f7ff fdba 	bl	8006ff4 <move_window>
			if (res != FR_OK) break;
 8007480:	4606      	mov	r6, r0
 8007482:	2800      	cmp	r0, #0
 8007484:	d1cc      	bne.n	8007420 <put_fat+0x28>
			p = fs->win + bc % SS(fs);
 8007486:	89a3      	ldrh	r3, [r4, #12]
 8007488:	fbb9 f2f3 	udiv	r2, r9, r3
 800748c:	fb03 9912 	mls	r9, r3, r2, r9
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8007490:	b145      	cbz	r5, 80074a4 <put_fat+0xac>
 8007492:	f3c7 1207 	ubfx	r2, r7, #4, #8
 8007496:	f80a 2009 	strb.w	r2, [sl, r9]
			fs->wflag = 1;
 800749a:	2301      	movs	r3, #1
 800749c:	70e3      	strb	r3, [r4, #3]
			break;
 800749e:	e7bf      	b.n	8007420 <put_fat+0x28>
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 80074a0:	b2fb      	uxtb	r3, r7
 80074a2:	e7e1      	b.n	8007468 <put_fat+0x70>
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 80074a4:	f91a 2009 	ldrsb.w	r2, [sl, r9]
 80074a8:	f022 020f 	bic.w	r2, r2, #15
 80074ac:	f3c7 2703 	ubfx	r7, r7, #8, #4
 80074b0:	433a      	orrs	r2, r7
 80074b2:	b2d2      	uxtb	r2, r2
 80074b4:	e7ef      	b.n	8007496 <put_fat+0x9e>
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 80074b6:	6a81      	ldr	r1, [r0, #40]	; 0x28
 80074b8:	8983      	ldrh	r3, [r0, #12]
 80074ba:	085b      	lsrs	r3, r3, #1
 80074bc:	fbb5 f3f3 	udiv	r3, r5, r3
 80074c0:	4419      	add	r1, r3
 80074c2:	f7ff fd97 	bl	8006ff4 <move_window>
			if (res != FR_OK) break;
 80074c6:	4606      	mov	r6, r0
 80074c8:	2800      	cmp	r0, #0
 80074ca:	d1a9      	bne.n	8007420 <put_fat+0x28>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 80074cc:	f104 0038 	add.w	r0, r4, #56	; 0x38
 80074d0:	006d      	lsls	r5, r5, #1
 80074d2:	89a3      	ldrh	r3, [r4, #12]
 80074d4:	fbb5 f2f3 	udiv	r2, r5, r3
 80074d8:	fb03 5512 	mls	r5, r3, r2, r5
 80074dc:	b2b9      	uxth	r1, r7
 80074de:	4428      	add	r0, r5
 80074e0:	f7ff fb1e 	bl	8006b20 <st_word>
			fs->wflag = 1;
 80074e4:	2301      	movs	r3, #1
 80074e6:	70e3      	strb	r3, [r4, #3]
			break;
 80074e8:	e79a      	b.n	8007420 <put_fat+0x28>
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 80074ea:	6a81      	ldr	r1, [r0, #40]	; 0x28
 80074ec:	8983      	ldrh	r3, [r0, #12]
 80074ee:	089b      	lsrs	r3, r3, #2
 80074f0:	fbb5 f3f3 	udiv	r3, r5, r3
 80074f4:	4419      	add	r1, r3
 80074f6:	f7ff fd7d 	bl	8006ff4 <move_window>
			if (res != FR_OK) break;
 80074fa:	4606      	mov	r6, r0
 80074fc:	2800      	cmp	r0, #0
 80074fe:	d18f      	bne.n	8007420 <put_fat+0x28>
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8007500:	f027 4770 	bic.w	r7, r7, #4026531840	; 0xf0000000
 8007504:	f104 0338 	add.w	r3, r4, #56	; 0x38
 8007508:	00ad      	lsls	r5, r5, #2
 800750a:	89a2      	ldrh	r2, [r4, #12]
 800750c:	fbb5 f1f2 	udiv	r1, r5, r2
 8007510:	fb02 5511 	mls	r5, r2, r1, r5
 8007514:	441d      	add	r5, r3
 8007516:	4628      	mov	r0, r5
 8007518:	f7ff faf7 	bl	8006b0a <ld_dword>
 800751c:	f000 4170 	and.w	r1, r0, #4026531840	; 0xf0000000
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8007520:	4339      	orrs	r1, r7
 8007522:	4628      	mov	r0, r5
 8007524:	f7ff fb00 	bl	8006b28 <st_dword>
			fs->wflag = 1;
 8007528:	2301      	movs	r3, #1
 800752a:	70e3      	strb	r3, [r4, #3]
			break;
 800752c:	e778      	b.n	8007420 <put_fat+0x28>
	FRESULT res = FR_INT_ERR;
 800752e:	2602      	movs	r6, #2
 8007530:	e776      	b.n	8007420 <put_fat+0x28>
 8007532:	2602      	movs	r6, #2
 8007534:	e774      	b.n	8007420 <put_fat+0x28>

08007536 <get_fat>:
{
 8007536:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	FATFS *fs = obj->fs;
 8007538:	6805      	ldr	r5, [r0, #0]
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800753a:	2901      	cmp	r1, #1
 800753c:	d96c      	bls.n	8007618 <get_fat+0xe2>
 800753e:	460c      	mov	r4, r1
 8007540:	69eb      	ldr	r3, [r5, #28]
 8007542:	428b      	cmp	r3, r1
 8007544:	d96a      	bls.n	800761c <get_fat+0xe6>
		switch (fs->fs_type) {
 8007546:	782b      	ldrb	r3, [r5, #0]
 8007548:	2b02      	cmp	r3, #2
 800754a:	d037      	beq.n	80075bc <get_fat+0x86>
 800754c:	2b03      	cmp	r3, #3
 800754e:	d04b      	beq.n	80075e8 <get_fat+0xb2>
 8007550:	2b01      	cmp	r3, #1
 8007552:	d001      	beq.n	8007558 <get_fat+0x22>
 8007554:	2001      	movs	r0, #1
 8007556:	e060      	b.n	800761a <get_fat+0xe4>
			bc = (UINT)clst; bc += bc / 2;
 8007558:	eb01 0651 	add.w	r6, r1, r1, lsr #1
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800755c:	6aa9      	ldr	r1, [r5, #40]	; 0x28
 800755e:	89ab      	ldrh	r3, [r5, #12]
 8007560:	fbb6 f3f3 	udiv	r3, r6, r3
 8007564:	4419      	add	r1, r3
 8007566:	4628      	mov	r0, r5
 8007568:	f7ff fd44 	bl	8006ff4 <move_window>
 800756c:	b110      	cbz	r0, 8007574 <get_fat+0x3e>
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800756e:	f04f 30ff 	mov.w	r0, #4294967295
 8007572:	e052      	b.n	800761a <get_fat+0xe4>
			wc = fs->win[bc++ % SS(fs)];
 8007574:	1c77      	adds	r7, r6, #1
 8007576:	89ab      	ldrh	r3, [r5, #12]
 8007578:	fbb6 f2f3 	udiv	r2, r6, r3
 800757c:	fb03 6612 	mls	r6, r3, r2, r6
 8007580:	442e      	add	r6, r5
 8007582:	f896 6038 	ldrb.w	r6, [r6, #56]	; 0x38
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8007586:	6aa9      	ldr	r1, [r5, #40]	; 0x28
 8007588:	fbb7 f3f3 	udiv	r3, r7, r3
 800758c:	4419      	add	r1, r3
 800758e:	4628      	mov	r0, r5
 8007590:	f7ff fd30 	bl	8006ff4 <move_window>
 8007594:	2800      	cmp	r0, #0
 8007596:	d143      	bne.n	8007620 <get_fat+0xea>
			wc |= fs->win[bc % SS(fs)] << 8;
 8007598:	89ab      	ldrh	r3, [r5, #12]
 800759a:	fbb7 f2f3 	udiv	r2, r7, r3
 800759e:	fb03 7712 	mls	r7, r3, r2, r7
 80075a2:	443d      	add	r5, r7
 80075a4:	f895 0038 	ldrb.w	r0, [r5, #56]	; 0x38
 80075a8:	ea46 2000 	orr.w	r0, r6, r0, lsl #8
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 80075ac:	f014 0f01 	tst.w	r4, #1
 80075b0:	d001      	beq.n	80075b6 <get_fat+0x80>
 80075b2:	0900      	lsrs	r0, r0, #4
 80075b4:	e031      	b.n	800761a <get_fat+0xe4>
 80075b6:	f3c0 000b 	ubfx	r0, r0, #0, #12
 80075ba:	e02e      	b.n	800761a <get_fat+0xe4>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80075bc:	6aa9      	ldr	r1, [r5, #40]	; 0x28
 80075be:	89ab      	ldrh	r3, [r5, #12]
 80075c0:	085b      	lsrs	r3, r3, #1
 80075c2:	fbb4 f3f3 	udiv	r3, r4, r3
 80075c6:	4419      	add	r1, r3
 80075c8:	4628      	mov	r0, r5
 80075ca:	f7ff fd13 	bl	8006ff4 <move_window>
 80075ce:	bb50      	cbnz	r0, 8007626 <get_fat+0xf0>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 80075d0:	f105 0038 	add.w	r0, r5, #56	; 0x38
 80075d4:	0064      	lsls	r4, r4, #1
 80075d6:	89ab      	ldrh	r3, [r5, #12]
 80075d8:	fbb4 f2f3 	udiv	r2, r4, r3
 80075dc:	fb03 4412 	mls	r4, r3, r2, r4
 80075e0:	4420      	add	r0, r4
 80075e2:	f7ff fa8d 	bl	8006b00 <ld_word>
			break;
 80075e6:	e018      	b.n	800761a <get_fat+0xe4>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80075e8:	6aa9      	ldr	r1, [r5, #40]	; 0x28
 80075ea:	89ab      	ldrh	r3, [r5, #12]
 80075ec:	089b      	lsrs	r3, r3, #2
 80075ee:	fbb4 f3f3 	udiv	r3, r4, r3
 80075f2:	4419      	add	r1, r3
 80075f4:	4628      	mov	r0, r5
 80075f6:	f7ff fcfd 	bl	8006ff4 <move_window>
 80075fa:	b9b8      	cbnz	r0, 800762c <get_fat+0xf6>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 80075fc:	f105 0038 	add.w	r0, r5, #56	; 0x38
 8007600:	00a4      	lsls	r4, r4, #2
 8007602:	89ab      	ldrh	r3, [r5, #12]
 8007604:	fbb4 f2f3 	udiv	r2, r4, r3
 8007608:	fb03 4412 	mls	r4, r3, r2, r4
 800760c:	4420      	add	r0, r4
 800760e:	f7ff fa7c 	bl	8006b0a <ld_dword>
 8007612:	f020 4070 	bic.w	r0, r0, #4026531840	; 0xf0000000
			break;
 8007616:	e000      	b.n	800761a <get_fat+0xe4>
		val = 1;	/* Internal error */
 8007618:	2001      	movs	r0, #1
}
 800761a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		val = 1;	/* Internal error */
 800761c:	2001      	movs	r0, #1
 800761e:	e7fc      	b.n	800761a <get_fat+0xe4>
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8007620:	f04f 30ff 	mov.w	r0, #4294967295
 8007624:	e7f9      	b.n	800761a <get_fat+0xe4>
 8007626:	f04f 30ff 	mov.w	r0, #4294967295
 800762a:	e7f6      	b.n	800761a <get_fat+0xe4>
 800762c:	f04f 30ff 	mov.w	r0, #4294967295
	return val;
 8007630:	e7f3      	b.n	800761a <get_fat+0xe4>

08007632 <dir_sdi>:
{
 8007632:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	FATFS *fs = dp->obj.fs;
 8007636:	f8d0 8000 	ldr.w	r8, [r0]
	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800763a:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800763e:	d24a      	bcs.n	80076d6 <dir_sdi+0xa4>
 8007640:	4607      	mov	r7, r0
 8007642:	460e      	mov	r6, r1
 8007644:	f011 0f1f 	tst.w	r1, #31
 8007648:	d147      	bne.n	80076da <dir_sdi+0xa8>
	dp->dptr = ofs;				/* Set current offset */
 800764a:	6141      	str	r1, [r0, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800764c:	6884      	ldr	r4, [r0, #8]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800764e:	b92c      	cbnz	r4, 800765c <dir_sdi+0x2a>
 8007650:	f898 3000 	ldrb.w	r3, [r8]
 8007654:	2b02      	cmp	r3, #2
 8007656:	d901      	bls.n	800765c <dir_sdi+0x2a>
		clst = fs->dirbase;
 8007658:	f8d8 402c 	ldr.w	r4, [r8, #44]	; 0x2c
	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800765c:	b9ec      	cbnz	r4, 800769a <dir_sdi+0x68>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800765e:	f8b8 3008 	ldrh.w	r3, [r8, #8]
 8007662:	ebb3 1f56 	cmp.w	r3, r6, lsr #5
 8007666:	d93a      	bls.n	80076de <dir_sdi+0xac>
		dp->sect = fs->dirbase;
 8007668:	f8d8 302c 	ldr.w	r3, [r8, #44]	; 0x2c
 800766c:	61fb      	str	r3, [r7, #28]
	dp->clust = clst;					/* Current cluster# */
 800766e:	61bc      	str	r4, [r7, #24]
	if (!dp->sect) return FR_INT_ERR;
 8007670:	69fb      	ldr	r3, [r7, #28]
 8007672:	b3e3      	cbz	r3, 80076ee <dir_sdi+0xbc>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8007674:	f8b8 200c 	ldrh.w	r2, [r8, #12]
 8007678:	fbb6 f2f2 	udiv	r2, r6, r2
 800767c:	4413      	add	r3, r2
 800767e:	61fb      	str	r3, [r7, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8007680:	f108 0338 	add.w	r3, r8, #56	; 0x38
 8007684:	f8b8 100c 	ldrh.w	r1, [r8, #12]
 8007688:	fbb6 f2f1 	udiv	r2, r6, r1
 800768c:	fb01 6112 	mls	r1, r1, r2, r6
 8007690:	4419      	add	r1, r3
 8007692:	6239      	str	r1, [r7, #32]
	return FR_OK;
 8007694:	2000      	movs	r0, #0
}
 8007696:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800769a:	f8b8 500a 	ldrh.w	r5, [r8, #10]
 800769e:	f8b8 300c 	ldrh.w	r3, [r8, #12]
 80076a2:	fb03 f505 	mul.w	r5, r3, r5
		while (ofs >= csz) {				/* Follow cluster chain */
 80076a6:	42ae      	cmp	r6, r5
 80076a8:	d30f      	bcc.n	80076ca <dir_sdi+0x98>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 80076aa:	4621      	mov	r1, r4
 80076ac:	4638      	mov	r0, r7
 80076ae:	f7ff ff42 	bl	8007536 <get_fat>
 80076b2:	4604      	mov	r4, r0
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80076b4:	f1b0 3fff 	cmp.w	r0, #4294967295
 80076b8:	d013      	beq.n	80076e2 <dir_sdi+0xb0>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 80076ba:	2801      	cmp	r0, #1
 80076bc:	d913      	bls.n	80076e6 <dir_sdi+0xb4>
 80076be:	f8d8 301c 	ldr.w	r3, [r8, #28]
 80076c2:	4283      	cmp	r3, r0
 80076c4:	d911      	bls.n	80076ea <dir_sdi+0xb8>
			ofs -= csz;
 80076c6:	1b76      	subs	r6, r6, r5
 80076c8:	e7ed      	b.n	80076a6 <dir_sdi+0x74>
		dp->sect = clust2sect(fs, clst);
 80076ca:	4621      	mov	r1, r4
 80076cc:	4640      	mov	r0, r8
 80076ce:	f7ff fb33 	bl	8006d38 <clust2sect>
 80076d2:	61f8      	str	r0, [r7, #28]
 80076d4:	e7cb      	b.n	800766e <dir_sdi+0x3c>
		return FR_INT_ERR;
 80076d6:	2002      	movs	r0, #2
 80076d8:	e7dd      	b.n	8007696 <dir_sdi+0x64>
 80076da:	2002      	movs	r0, #2
 80076dc:	e7db      	b.n	8007696 <dir_sdi+0x64>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 80076de:	2002      	movs	r0, #2
 80076e0:	e7d9      	b.n	8007696 <dir_sdi+0x64>
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80076e2:	2001      	movs	r0, #1
 80076e4:	e7d7      	b.n	8007696 <dir_sdi+0x64>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 80076e6:	2002      	movs	r0, #2
 80076e8:	e7d5      	b.n	8007696 <dir_sdi+0x64>
 80076ea:	2002      	movs	r0, #2
 80076ec:	e7d3      	b.n	8007696 <dir_sdi+0x64>
	if (!dp->sect) return FR_INT_ERR;
 80076ee:	2002      	movs	r0, #2
 80076f0:	e7d1      	b.n	8007696 <dir_sdi+0x64>

080076f2 <create_chain>:
{
 80076f2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80076f6:	4605      	mov	r5, r0
	FATFS *fs = obj->fs;
 80076f8:	6806      	ldr	r6, [r0, #0]
	if (clst == 0) {	/* Create a new chain */
 80076fa:	460f      	mov	r7, r1
 80076fc:	b951      	cbnz	r1, 8007714 <create_chain+0x22>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 80076fe:	f8d6 8014 	ldr.w	r8, [r6, #20]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8007702:	f1b8 0f00 	cmp.w	r8, #0
 8007706:	d012      	beq.n	800772e <create_chain+0x3c>
 8007708:	69f3      	ldr	r3, [r6, #28]
 800770a:	4543      	cmp	r3, r8
 800770c:	d811      	bhi.n	8007732 <create_chain+0x40>
 800770e:	f04f 0801 	mov.w	r8, #1
 8007712:	e00e      	b.n	8007732 <create_chain+0x40>
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8007714:	f7ff ff0f 	bl	8007536 <get_fat>
 8007718:	4603      	mov	r3, r0
		if (cs < 2) return 1;				/* Invalid FAT value */
 800771a:	2801      	cmp	r0, #1
 800771c:	d947      	bls.n	80077ae <create_chain+0xbc>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800771e:	f1b0 3fff 	cmp.w	r0, #4294967295
 8007722:	d049      	beq.n	80077b8 <create_chain+0xc6>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8007724:	69f2      	ldr	r2, [r6, #28]
 8007726:	4282      	cmp	r2, r0
 8007728:	d846      	bhi.n	80077b8 <create_chain+0xc6>
		scl = clst;
 800772a:	46b8      	mov	r8, r7
 800772c:	e001      	b.n	8007732 <create_chain+0x40>
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800772e:	f04f 0801 	mov.w	r8, #1
		ncl = scl;	/* Start cluster */
 8007732:	4644      	mov	r4, r8
 8007734:	e00c      	b.n	8007750 <create_chain+0x5e>
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8007736:	4621      	mov	r1, r4
 8007738:	4628      	mov	r0, r5
 800773a:	f7ff fefc 	bl	8007536 <get_fat>
			if (cs == 0) break;				/* Found a free cluster */
 800773e:	4603      	mov	r3, r0
 8007740:	b178      	cbz	r0, 8007762 <create_chain+0x70>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8007742:	2801      	cmp	r0, #1
 8007744:	d038      	beq.n	80077b8 <create_chain+0xc6>
 8007746:	f1b0 3fff 	cmp.w	r0, #4294967295
 800774a:	d035      	beq.n	80077b8 <create_chain+0xc6>
			if (ncl == scl) return 0;		/* No free cluster */
 800774c:	4544      	cmp	r4, r8
 800774e:	d032      	beq.n	80077b6 <create_chain+0xc4>
			ncl++;							/* Next cluster */
 8007750:	3401      	adds	r4, #1
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8007752:	69f3      	ldr	r3, [r6, #28]
 8007754:	42a3      	cmp	r3, r4
 8007756:	d8ee      	bhi.n	8007736 <create_chain+0x44>
				if (ncl > scl) return 0;	/* No free cluster */
 8007758:	f1b8 0f01 	cmp.w	r8, #1
 800775c:	d929      	bls.n	80077b2 <create_chain+0xc0>
				ncl = 2;
 800775e:	2402      	movs	r4, #2
 8007760:	e7e9      	b.n	8007736 <create_chain+0x44>
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8007762:	f04f 32ff 	mov.w	r2, #4294967295
 8007766:	4621      	mov	r1, r4
 8007768:	4630      	mov	r0, r6
 800776a:	f7ff fe45 	bl	80073f8 <put_fat>
		if (res == FR_OK && clst != 0) {
 800776e:	4603      	mov	r3, r0
 8007770:	b900      	cbnz	r0, 8007774 <create_chain+0x82>
 8007772:	b977      	cbnz	r7, 8007792 <create_chain+0xa0>
	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8007774:	b9a3      	cbnz	r3, 80077a0 <create_chain+0xae>
		fs->last_clst = ncl;
 8007776:	6174      	str	r4, [r6, #20]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8007778:	69b2      	ldr	r2, [r6, #24]
 800777a:	69f3      	ldr	r3, [r6, #28]
 800777c:	3b02      	subs	r3, #2
 800777e:	429a      	cmp	r2, r3
 8007780:	d801      	bhi.n	8007786 <create_chain+0x94>
 8007782:	3a01      	subs	r2, #1
 8007784:	61b2      	str	r2, [r6, #24]
		fs->fsi_flag |= 1;
 8007786:	7933      	ldrb	r3, [r6, #4]
 8007788:	f043 0301 	orr.w	r3, r3, #1
 800778c:	7133      	strb	r3, [r6, #4]
 800778e:	4623      	mov	r3, r4
 8007790:	e012      	b.n	80077b8 <create_chain+0xc6>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8007792:	4622      	mov	r2, r4
 8007794:	4639      	mov	r1, r7
 8007796:	4630      	mov	r0, r6
 8007798:	f7ff fe2e 	bl	80073f8 <put_fat>
 800779c:	4603      	mov	r3, r0
 800779e:	e7e9      	b.n	8007774 <create_chain+0x82>
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 80077a0:	2b01      	cmp	r3, #1
 80077a2:	d001      	beq.n	80077a8 <create_chain+0xb6>
 80077a4:	2301      	movs	r3, #1
 80077a6:	e007      	b.n	80077b8 <create_chain+0xc6>
 80077a8:	f04f 33ff 	mov.w	r3, #4294967295
 80077ac:	e004      	b.n	80077b8 <create_chain+0xc6>
		if (cs < 2) return 1;				/* Invalid FAT value */
 80077ae:	2301      	movs	r3, #1
 80077b0:	e002      	b.n	80077b8 <create_chain+0xc6>
				if (ncl > scl) return 0;	/* No free cluster */
 80077b2:	2300      	movs	r3, #0
 80077b4:	e000      	b.n	80077b8 <create_chain+0xc6>
			if (ncl == scl) return 0;		/* No free cluster */
 80077b6:	2300      	movs	r3, #0
}
 80077b8:	4618      	mov	r0, r3
 80077ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080077be <remove_chain>:
{
 80077be:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80077c0:	460c      	mov	r4, r1
	FATFS *fs = obj->fs;
 80077c2:	6805      	ldr	r5, [r0, #0]
	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 80077c4:	2901      	cmp	r1, #1
 80077c6:	d92e      	bls.n	8007826 <remove_chain+0x68>
 80077c8:	4606      	mov	r6, r0
 80077ca:	4611      	mov	r1, r2
 80077cc:	69eb      	ldr	r3, [r5, #28]
 80077ce:	42a3      	cmp	r3, r4
 80077d0:	d92b      	bls.n	800782a <remove_chain+0x6c>
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 80077d2:	b14a      	cbz	r2, 80077e8 <remove_chain+0x2a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 80077d4:	f04f 32ff 	mov.w	r2, #4294967295
 80077d8:	4628      	mov	r0, r5
 80077da:	f7ff fe0d 	bl	80073f8 <put_fat>
		if (res != FR_OK) return res;
 80077de:	4607      	mov	r7, r0
 80077e0:	b110      	cbz	r0, 80077e8 <remove_chain+0x2a>
 80077e2:	e023      	b.n	800782c <remove_chain+0x6e>
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 80077e4:	42a2      	cmp	r2, r4
 80077e6:	d921      	bls.n	800782c <remove_chain+0x6e>
		nxt = get_fat(obj, clst);			/* Get cluster status */
 80077e8:	4627      	mov	r7, r4
 80077ea:	4621      	mov	r1, r4
 80077ec:	4630      	mov	r0, r6
 80077ee:	f7ff fea2 	bl	8007536 <get_fat>
		if (nxt == 0) break;				/* Empty cluster? */
 80077f2:	4604      	mov	r4, r0
 80077f4:	b1e0      	cbz	r0, 8007830 <remove_chain+0x72>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 80077f6:	2801      	cmp	r0, #1
 80077f8:	d01c      	beq.n	8007834 <remove_chain+0x76>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 80077fa:	f1b0 3fff 	cmp.w	r0, #4294967295
 80077fe:	d01b      	beq.n	8007838 <remove_chain+0x7a>
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8007800:	2200      	movs	r2, #0
 8007802:	4639      	mov	r1, r7
 8007804:	4628      	mov	r0, r5
 8007806:	f7ff fdf7 	bl	80073f8 <put_fat>
			if (res != FR_OK) return res;
 800780a:	4607      	mov	r7, r0
 800780c:	b970      	cbnz	r0, 800782c <remove_chain+0x6e>
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800780e:	69ab      	ldr	r3, [r5, #24]
 8007810:	69ea      	ldr	r2, [r5, #28]
 8007812:	1e91      	subs	r1, r2, #2
 8007814:	428b      	cmp	r3, r1
 8007816:	d2e5      	bcs.n	80077e4 <remove_chain+0x26>
			fs->free_clst++;
 8007818:	3301      	adds	r3, #1
 800781a:	61ab      	str	r3, [r5, #24]
			fs->fsi_flag |= 1;
 800781c:	792b      	ldrb	r3, [r5, #4]
 800781e:	f043 0301 	orr.w	r3, r3, #1
 8007822:	712b      	strb	r3, [r5, #4]
 8007824:	e7de      	b.n	80077e4 <remove_chain+0x26>
	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8007826:	2702      	movs	r7, #2
 8007828:	e000      	b.n	800782c <remove_chain+0x6e>
 800782a:	2702      	movs	r7, #2
}
 800782c:	4638      	mov	r0, r7
 800782e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return FR_OK;
 8007830:	2700      	movs	r7, #0
 8007832:	e7fb      	b.n	800782c <remove_chain+0x6e>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8007834:	2702      	movs	r7, #2
 8007836:	e7f9      	b.n	800782c <remove_chain+0x6e>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8007838:	2701      	movs	r7, #1
 800783a:	e7f7      	b.n	800782c <remove_chain+0x6e>

0800783c <dir_next>:
{
 800783c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	FATFS *fs = dp->obj.fs;
 8007840:	6806      	ldr	r6, [r0, #0]
	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8007842:	6944      	ldr	r4, [r0, #20]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8007844:	69c3      	ldr	r3, [r0, #28]
 8007846:	2b00      	cmp	r3, #0
 8007848:	d074      	beq.n	8007934 <dir_next+0xf8>
 800784a:	4605      	mov	r5, r0
 800784c:	460f      	mov	r7, r1
 800784e:	3420      	adds	r4, #32
 8007850:	f5b4 1f00 	cmp.w	r4, #2097152	; 0x200000
 8007854:	d270      	bcs.n	8007938 <dir_next+0xfc>
	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8007856:	89b1      	ldrh	r1, [r6, #12]
 8007858:	fbb4 f2f1 	udiv	r2, r4, r1
 800785c:	fb01 4212 	mls	r2, r1, r2, r4
 8007860:	b93a      	cbnz	r2, 8007872 <dir_next+0x36>
		dp->sect++;				/* Next sector */
 8007862:	3301      	adds	r3, #1
 8007864:	61c3      	str	r3, [r0, #28]
		if (!dp->clust) {		/* Static table */
 8007866:	6981      	ldr	r1, [r0, #24]
 8007868:	b9a1      	cbnz	r1, 8007894 <dir_next+0x58>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800786a:	8933      	ldrh	r3, [r6, #8]
 800786c:	ebb3 1f54 	cmp.w	r3, r4, lsr #5
 8007870:	d90c      	bls.n	800788c <dir_next+0x50>
	dp->dptr = ofs;						/* Current entry */
 8007872:	616c      	str	r4, [r5, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8007874:	f106 0338 	add.w	r3, r6, #56	; 0x38
 8007878:	89b2      	ldrh	r2, [r6, #12]
 800787a:	fbb4 f1f2 	udiv	r1, r4, r2
 800787e:	fb02 4411 	mls	r4, r2, r1, r4
 8007882:	441c      	add	r4, r3
 8007884:	622c      	str	r4, [r5, #32]
	return FR_OK;
 8007886:	2000      	movs	r0, #0
}
 8007888:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				dp->sect = 0; return FR_NO_FILE;
 800788c:	2300      	movs	r3, #0
 800788e:	61c3      	str	r3, [r0, #28]
 8007890:	2004      	movs	r0, #4
 8007892:	e7f9      	b.n	8007888 <dir_next+0x4c>
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8007894:	89b2      	ldrh	r2, [r6, #12]
 8007896:	fbb4 f2f2 	udiv	r2, r4, r2
 800789a:	8973      	ldrh	r3, [r6, #10]
 800789c:	3b01      	subs	r3, #1
 800789e:	ea12 0803 	ands.w	r8, r2, r3
 80078a2:	d1e6      	bne.n	8007872 <dir_next+0x36>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 80078a4:	f7ff fe47 	bl	8007536 <get_fat>
 80078a8:	4681      	mov	r9, r0
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 80078aa:	2801      	cmp	r0, #1
 80078ac:	d946      	bls.n	800793c <dir_next+0x100>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 80078ae:	f1b0 3fff 	cmp.w	r0, #4294967295
 80078b2:	d045      	beq.n	8007940 <dir_next+0x104>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 80078b4:	69f3      	ldr	r3, [r6, #28]
 80078b6:	4283      	cmp	r3, r0
 80078b8:	d834      	bhi.n	8007924 <dir_next+0xe8>
					if (!stretch) {								/* If no stretch, report EOT */
 80078ba:	b18f      	cbz	r7, 80078e0 <dir_next+0xa4>
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 80078bc:	69a9      	ldr	r1, [r5, #24]
 80078be:	4628      	mov	r0, r5
 80078c0:	f7ff ff17 	bl	80076f2 <create_chain>
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 80078c4:	4681      	mov	r9, r0
 80078c6:	2800      	cmp	r0, #0
 80078c8:	d03c      	beq.n	8007944 <dir_next+0x108>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 80078ca:	2801      	cmp	r0, #1
 80078cc:	d03c      	beq.n	8007948 <dir_next+0x10c>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80078ce:	f1b0 3fff 	cmp.w	r0, #4294967295
 80078d2:	d03b      	beq.n	800794c <dir_next+0x110>
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 80078d4:	4630      	mov	r0, r6
 80078d6:	f7ff fb63 	bl	8006fa0 <sync_window>
 80078da:	b128      	cbz	r0, 80078e8 <dir_next+0xac>
 80078dc:	2001      	movs	r0, #1
 80078de:	e7d3      	b.n	8007888 <dir_next+0x4c>
						dp->sect = 0; return FR_NO_FILE;
 80078e0:	2300      	movs	r3, #0
 80078e2:	61eb      	str	r3, [r5, #28]
 80078e4:	2004      	movs	r0, #4
 80078e6:	e7cf      	b.n	8007888 <dir_next+0x4c>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 80078e8:	89b2      	ldrh	r2, [r6, #12]
 80078ea:	2100      	movs	r1, #0
 80078ec:	f106 0038 	add.w	r0, r6, #56	; 0x38
 80078f0:	f7ff f92e 	bl	8006b50 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 80078f4:	4649      	mov	r1, r9
 80078f6:	4630      	mov	r0, r6
 80078f8:	f7ff fa1e 	bl	8006d38 <clust2sect>
 80078fc:	6370      	str	r0, [r6, #52]	; 0x34
 80078fe:	8973      	ldrh	r3, [r6, #10]
 8007900:	4598      	cmp	r8, r3
 8007902:	d20b      	bcs.n	800791c <dir_next+0xe0>
						fs->wflag = 1;
 8007904:	2301      	movs	r3, #1
 8007906:	70f3      	strb	r3, [r6, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8007908:	4630      	mov	r0, r6
 800790a:	f7ff fb49 	bl	8006fa0 <sync_window>
 800790e:	b9f8      	cbnz	r0, 8007950 <dir_next+0x114>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8007910:	f108 0801 	add.w	r8, r8, #1
 8007914:	6b73      	ldr	r3, [r6, #52]	; 0x34
 8007916:	3301      	adds	r3, #1
 8007918:	6373      	str	r3, [r6, #52]	; 0x34
 800791a:	e7f0      	b.n	80078fe <dir_next+0xc2>
					fs->winsect -= n;							/* Restore window offset */
 800791c:	6b73      	ldr	r3, [r6, #52]	; 0x34
 800791e:	eba3 0308 	sub.w	r3, r3, r8
 8007922:	6373      	str	r3, [r6, #52]	; 0x34
				dp->clust = clst;		/* Initialize data for new cluster */
 8007924:	f8c5 9018 	str.w	r9, [r5, #24]
				dp->sect = clust2sect(fs, clst);
 8007928:	4649      	mov	r1, r9
 800792a:	4630      	mov	r0, r6
 800792c:	f7ff fa04 	bl	8006d38 <clust2sect>
 8007930:	61e8      	str	r0, [r5, #28]
 8007932:	e79e      	b.n	8007872 <dir_next+0x36>
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8007934:	2004      	movs	r0, #4
 8007936:	e7a7      	b.n	8007888 <dir_next+0x4c>
 8007938:	2004      	movs	r0, #4
 800793a:	e7a5      	b.n	8007888 <dir_next+0x4c>
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800793c:	2002      	movs	r0, #2
 800793e:	e7a3      	b.n	8007888 <dir_next+0x4c>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8007940:	2001      	movs	r0, #1
 8007942:	e7a1      	b.n	8007888 <dir_next+0x4c>
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8007944:	2007      	movs	r0, #7
 8007946:	e79f      	b.n	8007888 <dir_next+0x4c>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8007948:	2002      	movs	r0, #2
 800794a:	e79d      	b.n	8007888 <dir_next+0x4c>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800794c:	2001      	movs	r0, #1
 800794e:	e79b      	b.n	8007888 <dir_next+0x4c>
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8007950:	2001      	movs	r0, #1
 8007952:	e799      	b.n	8007888 <dir_next+0x4c>

08007954 <dir_alloc>:
{
 8007954:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007956:	4604      	mov	r4, r0
 8007958:	460e      	mov	r6, r1
	FATFS *fs = dp->obj.fs;
 800795a:	6807      	ldr	r7, [r0, #0]
	res = dir_sdi(dp, 0);
 800795c:	2100      	movs	r1, #0
 800795e:	f7ff fe68 	bl	8007632 <dir_sdi>
	if (res == FR_OK) {
 8007962:	4602      	mov	r2, r0
 8007964:	b9c0      	cbnz	r0, 8007998 <dir_alloc+0x44>
		n = 0;
 8007966:	2500      	movs	r5, #0
 8007968:	e008      	b.n	800797c <dir_alloc+0x28>
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800796a:	3501      	adds	r5, #1
 800796c:	42b5      	cmp	r5, r6
 800796e:	d013      	beq.n	8007998 <dir_alloc+0x44>
			res = dir_next(dp, 1);
 8007970:	2101      	movs	r1, #1
 8007972:	4620      	mov	r0, r4
 8007974:	f7ff ff62 	bl	800783c <dir_next>
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8007978:	4602      	mov	r2, r0
 800797a:	b968      	cbnz	r0, 8007998 <dir_alloc+0x44>
			res = move_window(fs, dp->sect);
 800797c:	69e1      	ldr	r1, [r4, #28]
 800797e:	4638      	mov	r0, r7
 8007980:	f7ff fb38 	bl	8006ff4 <move_window>
			if (res != FR_OK) break;
 8007984:	4602      	mov	r2, r0
 8007986:	b938      	cbnz	r0, 8007998 <dir_alloc+0x44>
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8007988:	6a23      	ldr	r3, [r4, #32]
 800798a:	781b      	ldrb	r3, [r3, #0]
 800798c:	2be5      	cmp	r3, #229	; 0xe5
 800798e:	d0ec      	beq.n	800796a <dir_alloc+0x16>
 8007990:	2b00      	cmp	r3, #0
 8007992:	d0ea      	beq.n	800796a <dir_alloc+0x16>
				n = 0;					/* Not a blank entry. Restart to search */
 8007994:	2500      	movs	r5, #0
 8007996:	e7eb      	b.n	8007970 <dir_alloc+0x1c>
	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8007998:	2a04      	cmp	r2, #4
 800799a:	d001      	beq.n	80079a0 <dir_alloc+0x4c>
}
 800799c:	4610      	mov	r0, r2
 800799e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 80079a0:	2207      	movs	r2, #7
 80079a2:	e7fb      	b.n	800799c <dir_alloc+0x48>

080079a4 <sync_fs>:
{
 80079a4:	b570      	push	{r4, r5, r6, lr}
 80079a6:	4604      	mov	r4, r0
	res = sync_window(fs);
 80079a8:	f7ff fafa 	bl	8006fa0 <sync_window>
	if (res == FR_OK) {
 80079ac:	4605      	mov	r5, r0
 80079ae:	b948      	cbnz	r0, 80079c4 <sync_fs+0x20>
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 80079b0:	7823      	ldrb	r3, [r4, #0]
 80079b2:	2b03      	cmp	r3, #3
 80079b4:	d008      	beq.n	80079c8 <sync_fs+0x24>
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 80079b6:	2200      	movs	r2, #0
 80079b8:	4611      	mov	r1, r2
 80079ba:	7860      	ldrb	r0, [r4, #1]
 80079bc:	f7ff f894 	bl	8006ae8 <disk_ioctl>
 80079c0:	b100      	cbz	r0, 80079c4 <sync_fs+0x20>
 80079c2:	2501      	movs	r5, #1
}
 80079c4:	4628      	mov	r0, r5
 80079c6:	bd70      	pop	{r4, r5, r6, pc}
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 80079c8:	7923      	ldrb	r3, [r4, #4]
 80079ca:	2b01      	cmp	r3, #1
 80079cc:	d1f3      	bne.n	80079b6 <sync_fs+0x12>
			mem_set(fs->win, 0, SS(fs));
 80079ce:	f104 0638 	add.w	r6, r4, #56	; 0x38
 80079d2:	89a2      	ldrh	r2, [r4, #12]
 80079d4:	2100      	movs	r1, #0
 80079d6:	4630      	mov	r0, r6
 80079d8:	f7ff f8ba 	bl	8006b50 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 80079dc:	f64a 2155 	movw	r1, #43605	; 0xaa55
 80079e0:	f204 2036 	addw	r0, r4, #566	; 0x236
 80079e4:	f7ff f89c 	bl	8006b20 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 80079e8:	490e      	ldr	r1, [pc, #56]	; (8007a24 <sync_fs+0x80>)
 80079ea:	4630      	mov	r0, r6
 80079ec:	f7ff f89c 	bl	8006b28 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 80079f0:	490d      	ldr	r1, [pc, #52]	; (8007a28 <sync_fs+0x84>)
 80079f2:	f504 7007 	add.w	r0, r4, #540	; 0x21c
 80079f6:	f7ff f897 	bl	8006b28 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 80079fa:	69a1      	ldr	r1, [r4, #24]
 80079fc:	f504 7008 	add.w	r0, r4, #544	; 0x220
 8007a00:	f7ff f892 	bl	8006b28 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8007a04:	6961      	ldr	r1, [r4, #20]
 8007a06:	f504 7009 	add.w	r0, r4, #548	; 0x224
 8007a0a:	f7ff f88d 	bl	8006b28 <st_dword>
			fs->winsect = fs->volbase + 1;
 8007a0e:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8007a10:	3201      	adds	r2, #1
 8007a12:	6362      	str	r2, [r4, #52]	; 0x34
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8007a14:	2301      	movs	r3, #1
 8007a16:	4631      	mov	r1, r6
 8007a18:	7860      	ldrb	r0, [r4, #1]
 8007a1a:	f7ff f859 	bl	8006ad0 <disk_write>
			fs->fsi_flag = 0;
 8007a1e:	2300      	movs	r3, #0
 8007a20:	7123      	strb	r3, [r4, #4]
 8007a22:	e7c8      	b.n	80079b6 <sync_fs+0x12>
 8007a24:	41615252 	.word	0x41615252
 8007a28:	61417272 	.word	0x61417272

08007a2c <create_name>:
{
 8007a2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007a30:	b083      	sub	sp, #12
 8007a32:	4607      	mov	r7, r0
 8007a34:	468a      	mov	sl, r1
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 8007a36:	f8d1 9000 	ldr.w	r9, [r1]
 8007a3a:	6803      	ldr	r3, [r0, #0]
 8007a3c:	691d      	ldr	r5, [r3, #16]
 8007a3e:	2400      	movs	r4, #0
 8007a40:	4623      	mov	r3, r4
 8007a42:	e012      	b.n	8007a6a <create_name+0x3e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8007a44:	3601      	adds	r6, #1
 8007a46:	f819 3006 	ldrb.w	r3, [r9, r6]
 8007a4a:	2b2f      	cmp	r3, #47	; 0x2f
 8007a4c:	d0fa      	beq.n	8007a44 <create_name+0x18>
 8007a4e:	2b5c      	cmp	r3, #92	; 0x5c
 8007a50:	d0f8      	beq.n	8007a44 <create_name+0x18>
	*path = &p[si];						/* Return pointer to the next segment */
 8007a52:	444e      	add	r6, r9
 8007a54:	f8ca 6000 	str.w	r6, [sl]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8007a58:	281f      	cmp	r0, #31
 8007a5a:	d823      	bhi.n	8007aa4 <create_name+0x78>
 8007a5c:	f04f 0804 	mov.w	r8, #4
 8007a60:	e024      	b.n	8007aac <create_name+0x80>
		lfn[di++] = w;					/* Store the Unicode character */
 8007a62:	f825 8014 	strh.w	r8, [r5, r4, lsl #1]
 8007a66:	3401      	adds	r4, #1
		w = p[si++];					/* Get a character */
 8007a68:	4633      	mov	r3, r6
 8007a6a:	1c5e      	adds	r6, r3, #1
 8007a6c:	f819 0003 	ldrb.w	r0, [r9, r3]
		if (w < ' ') break;				/* Break if end of the path name */
 8007a70:	281f      	cmp	r0, #31
 8007a72:	d9ee      	bls.n	8007a52 <create_name+0x26>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 8007a74:	282f      	cmp	r0, #47	; 0x2f
 8007a76:	d0e6      	beq.n	8007a46 <create_name+0x1a>
 8007a78:	285c      	cmp	r0, #92	; 0x5c
 8007a7a:	d0e4      	beq.n	8007a46 <create_name+0x1a>
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 8007a7c:	2cfe      	cmp	r4, #254	; 0xfe
 8007a7e:	f200 80df 	bhi.w	8007c40 <create_name+0x214>
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 8007a82:	2101      	movs	r1, #1
 8007a84:	f000 fd76 	bl	8008574 <ff_convert>
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 8007a88:	4680      	mov	r8, r0
 8007a8a:	2800      	cmp	r0, #0
 8007a8c:	f000 80da 	beq.w	8007c44 <create_name+0x218>
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 8007a90:	287f      	cmp	r0, #127	; 0x7f
 8007a92:	d8e6      	bhi.n	8007a62 <create_name+0x36>
 8007a94:	4601      	mov	r1, r0
 8007a96:	486d      	ldr	r0, [pc, #436]	; (8007c4c <create_name+0x220>)
 8007a98:	f7ff f86c 	bl	8006b74 <chk_chr>
 8007a9c:	2800      	cmp	r0, #0
 8007a9e:	d0e0      	beq.n	8007a62 <create_name+0x36>
 8007aa0:	2006      	movs	r0, #6
 8007aa2:	e085      	b.n	8007bb0 <create_name+0x184>
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8007aa4:	f04f 0800 	mov.w	r8, #0
	while (di) {						/* Snip off trailing spaces and dots if exist */
 8007aa8:	e000      	b.n	8007aac <create_name+0x80>
		di--;
 8007aaa:	3c01      	subs	r4, #1
	while (di) {						/* Snip off trailing spaces and dots if exist */
 8007aac:	b144      	cbz	r4, 8007ac0 <create_name+0x94>
		w = lfn[di - 1];
 8007aae:	f104 4300 	add.w	r3, r4, #2147483648	; 0x80000000
 8007ab2:	3b01      	subs	r3, #1
 8007ab4:	f835 3013 	ldrh.w	r3, [r5, r3, lsl #1]
		if (w != ' ' && w != '.') break;
 8007ab8:	2b20      	cmp	r3, #32
 8007aba:	d0f6      	beq.n	8007aaa <create_name+0x7e>
 8007abc:	2b2e      	cmp	r3, #46	; 0x2e
 8007abe:	d0f4      	beq.n	8007aaa <create_name+0x7e>
	lfn[di] = 0;						/* LFN is created */
 8007ac0:	2300      	movs	r3, #0
 8007ac2:	f825 3014 	strh.w	r3, [r5, r4, lsl #1]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 8007ac6:	2c00      	cmp	r4, #0
 8007ac8:	f000 80be 	beq.w	8007c48 <create_name+0x21c>
	mem_set(dp->fn, ' ', 11);
 8007acc:	220b      	movs	r2, #11
 8007ace:	2120      	movs	r1, #32
 8007ad0:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8007ad4:	f7ff f83c 	bl	8006b50 <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 8007ad8:	2300      	movs	r3, #0
 8007ada:	e000      	b.n	8007ade <create_name+0xb2>
 8007adc:	3301      	adds	r3, #1
 8007ade:	f835 2013 	ldrh.w	r2, [r5, r3, lsl #1]
 8007ae2:	2a20      	cmp	r2, #32
 8007ae4:	d0fa      	beq.n	8007adc <create_name+0xb0>
 8007ae6:	2a2e      	cmp	r2, #46	; 0x2e
 8007ae8:	d0f8      	beq.n	8007adc <create_name+0xb0>
	if (si) cf |= NS_LOSS | NS_LFN;
 8007aea:	b11b      	cbz	r3, 8007af4 <create_name+0xc8>
 8007aec:	f048 0803 	orr.w	r8, r8, #3
 8007af0:	e000      	b.n	8007af4 <create_name+0xc8>
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 8007af2:	3c01      	subs	r4, #1
 8007af4:	b16c      	cbz	r4, 8007b12 <create_name+0xe6>
 8007af6:	f104 4200 	add.w	r2, r4, #2147483648	; 0x80000000
 8007afa:	3a01      	subs	r2, #1
 8007afc:	f835 2012 	ldrh.w	r2, [r5, r2, lsl #1]
 8007b00:	2a2e      	cmp	r2, #46	; 0x2e
 8007b02:	d1f6      	bne.n	8007af2 <create_name+0xc6>
 8007b04:	f04f 0b08 	mov.w	fp, #8
 8007b08:	f04f 0a00 	mov.w	sl, #0
 8007b0c:	f8cd a004 	str.w	sl, [sp, #4]
 8007b10:	e00a      	b.n	8007b28 <create_name+0xfc>
 8007b12:	46a2      	mov	sl, r4
 8007b14:	f04f 0b08 	mov.w	fp, #8
 8007b18:	2200      	movs	r2, #0
 8007b1a:	9201      	str	r2, [sp, #4]
 8007b1c:	e004      	b.n	8007b28 <create_name+0xfc>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 8007b1e:	454c      	cmp	r4, r9
 8007b20:	d00b      	beq.n	8007b3a <create_name+0x10e>
			cf |= NS_LOSS | NS_LFN; continue;
 8007b22:	f048 0803 	orr.w	r8, r8, #3
		w = lfn[si++];					/* Get an LFN character */
 8007b26:	464b      	mov	r3, r9
 8007b28:	f103 0901 	add.w	r9, r3, #1
 8007b2c:	f835 6013 	ldrh.w	r6, [r5, r3, lsl #1]
		if (!w) break;					/* Break on end of the LFN */
 8007b30:	b1fe      	cbz	r6, 8007b72 <create_name+0x146>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 8007b32:	2e20      	cmp	r6, #32
 8007b34:	d0f5      	beq.n	8007b22 <create_name+0xf6>
 8007b36:	2e2e      	cmp	r6, #46	; 0x2e
 8007b38:	d0f1      	beq.n	8007b1e <create_name+0xf2>
		if (i >= ni || si == di) {		/* Extension or end of SFN */
 8007b3a:	45da      	cmp	sl, fp
 8007b3c:	d210      	bcs.n	8007b60 <create_name+0x134>
 8007b3e:	454c      	cmp	r4, r9
 8007b40:	d00e      	beq.n	8007b60 <create_name+0x134>
		if (w >= 0x80) {				/* Non ASCII character */
 8007b42:	2e7f      	cmp	r6, #127	; 0x7f
 8007b44:	d844      	bhi.n	8007bd0 <create_name+0x1a4>
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 8007b46:	2e00      	cmp	r6, #0
 8007b48:	d14f      	bne.n	8007bea <create_name+0x1be>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 8007b4a:	f048 0803 	orr.w	r8, r8, #3
 8007b4e:	265f      	movs	r6, #95	; 0x5f
		dp->fn[i++] = (BYTE)w;
 8007b50:	eb07 030a 	add.w	r3, r7, sl
 8007b54:	f883 6024 	strb.w	r6, [r3, #36]	; 0x24
		w = lfn[si++];					/* Get an LFN character */
 8007b58:	464b      	mov	r3, r9
		dp->fn[i++] = (BYTE)w;
 8007b5a:	f10a 0a01 	add.w	sl, sl, #1
 8007b5e:	e7e3      	b.n	8007b28 <create_name+0xfc>
			if (ni == 11) {				/* Long extension */
 8007b60:	f1bb 0f0b 	cmp.w	fp, #11
 8007b64:	d027      	beq.n	8007bb6 <create_name+0x18a>
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 8007b66:	454c      	cmp	r4, r9
 8007b68:	d001      	beq.n	8007b6e <create_name+0x142>
 8007b6a:	f048 0803 	orr.w	r8, r8, #3
			if (si > di) break;			/* No extension */
 8007b6e:	454c      	cmp	r4, r9
 8007b70:	d224      	bcs.n	8007bbc <create_name+0x190>
	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8007b72:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8007b76:	2be5      	cmp	r3, #229	; 0xe5
 8007b78:	d053      	beq.n	8007c22 <create_name+0x1f6>
	if (ni == 8) b <<= 2;
 8007b7a:	f1bb 0f08 	cmp.w	fp, #8
 8007b7e:	d054      	beq.n	8007c2a <create_name+0x1fe>
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 8007b80:	9b01      	ldr	r3, [sp, #4]
 8007b82:	f003 020c 	and.w	r2, r3, #12
 8007b86:	2a0c      	cmp	r2, #12
 8007b88:	d003      	beq.n	8007b92 <create_name+0x166>
 8007b8a:	f003 0303 	and.w	r3, r3, #3
 8007b8e:	2b03      	cmp	r3, #3
 8007b90:	d101      	bne.n	8007b96 <create_name+0x16a>
 8007b92:	f048 0802 	orr.w	r8, r8, #2
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 8007b96:	f018 0f02 	tst.w	r8, #2
 8007b9a:	d106      	bne.n	8007baa <create_name+0x17e>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 8007b9c:	9b01      	ldr	r3, [sp, #4]
 8007b9e:	f003 0303 	and.w	r3, r3, #3
 8007ba2:	2b01      	cmp	r3, #1
 8007ba4:	d046      	beq.n	8007c34 <create_name+0x208>
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 8007ba6:	2a04      	cmp	r2, #4
 8007ba8:	d047      	beq.n	8007c3a <create_name+0x20e>
	dp->fn[NSFLAG] = cf;	/* SFN is created */
 8007baa:	f887 802f 	strb.w	r8, [r7, #47]	; 0x2f
	return FR_OK;
 8007bae:	2000      	movs	r0, #0
}
 8007bb0:	b003      	add	sp, #12
 8007bb2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				cf |= NS_LOSS | NS_LFN; break;
 8007bb6:	f048 0803 	orr.w	r8, r8, #3
 8007bba:	e7da      	b.n	8007b72 <create_name+0x146>
			b <<= 2; continue;
 8007bbc:	9b01      	ldr	r3, [sp, #4]
 8007bbe:	009b      	lsls	r3, r3, #2
 8007bc0:	b2db      	uxtb	r3, r3
 8007bc2:	9301      	str	r3, [sp, #4]
			si = di; i = 8; ni = 11;	/* Enter extension section */
 8007bc4:	4623      	mov	r3, r4
 8007bc6:	f04f 0b0b 	mov.w	fp, #11
 8007bca:	f04f 0a08 	mov.w	sl, #8
			b <<= 2; continue;
 8007bce:	e7ab      	b.n	8007b28 <create_name+0xfc>
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 8007bd0:	2100      	movs	r1, #0
 8007bd2:	4630      	mov	r0, r6
 8007bd4:	f000 fcce 	bl	8008574 <ff_convert>
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 8007bd8:	4606      	mov	r6, r0
 8007bda:	b118      	cbz	r0, 8007be4 <create_name+0x1b8>
 8007bdc:	f1a0 0680 	sub.w	r6, r0, #128	; 0x80
 8007be0:	4b1b      	ldr	r3, [pc, #108]	; (8007c50 <create_name+0x224>)
 8007be2:	5d9e      	ldrb	r6, [r3, r6]
			cf |= NS_LFN;				/* Force create LFN entry */
 8007be4:	f048 0802 	orr.w	r8, r8, #2
 8007be8:	e7ad      	b.n	8007b46 <create_name+0x11a>
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 8007bea:	4631      	mov	r1, r6
 8007bec:	4819      	ldr	r0, [pc, #100]	; (8007c54 <create_name+0x228>)
 8007bee:	f7fe ffc1 	bl	8006b74 <chk_chr>
 8007bf2:	2800      	cmp	r0, #0
 8007bf4:	d1a9      	bne.n	8007b4a <create_name+0x11e>
				if (IsUpper(w)) {		/* ASCII large capital */
 8007bf6:	f1a6 0341 	sub.w	r3, r6, #65	; 0x41
 8007bfa:	b29b      	uxth	r3, r3
 8007bfc:	2b19      	cmp	r3, #25
 8007bfe:	d804      	bhi.n	8007c0a <create_name+0x1de>
					b |= 2;
 8007c00:	9b01      	ldr	r3, [sp, #4]
 8007c02:	f043 0302 	orr.w	r3, r3, #2
 8007c06:	9301      	str	r3, [sp, #4]
 8007c08:	e7a2      	b.n	8007b50 <create_name+0x124>
					if (IsLower(w)) {	/* ASCII small capital */
 8007c0a:	f1a6 0361 	sub.w	r3, r6, #97	; 0x61
 8007c0e:	b29b      	uxth	r3, r3
 8007c10:	2b19      	cmp	r3, #25
 8007c12:	d89d      	bhi.n	8007b50 <create_name+0x124>
						b |= 1; w -= 0x20;
 8007c14:	9b01      	ldr	r3, [sp, #4]
 8007c16:	f043 0301 	orr.w	r3, r3, #1
 8007c1a:	9301      	str	r3, [sp, #4]
 8007c1c:	3e20      	subs	r6, #32
 8007c1e:	b2b6      	uxth	r6, r6
 8007c20:	e796      	b.n	8007b50 <create_name+0x124>
	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8007c22:	2305      	movs	r3, #5
 8007c24:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
 8007c28:	e7a7      	b.n	8007b7a <create_name+0x14e>
	if (ni == 8) b <<= 2;
 8007c2a:	9b01      	ldr	r3, [sp, #4]
 8007c2c:	009b      	lsls	r3, r3, #2
 8007c2e:	b2db      	uxtb	r3, r3
 8007c30:	9301      	str	r3, [sp, #4]
 8007c32:	e7a5      	b.n	8007b80 <create_name+0x154>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 8007c34:	f048 0810 	orr.w	r8, r8, #16
 8007c38:	e7b5      	b.n	8007ba6 <create_name+0x17a>
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 8007c3a:	f048 0808 	orr.w	r8, r8, #8
 8007c3e:	e7b4      	b.n	8007baa <create_name+0x17e>
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 8007c40:	2006      	movs	r0, #6
 8007c42:	e7b5      	b.n	8007bb0 <create_name+0x184>
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 8007c44:	2006      	movs	r0, #6
 8007c46:	e7b3      	b.n	8007bb0 <create_name+0x184>
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 8007c48:	2006      	movs	r0, #6
 8007c4a:	e7b1      	b.n	8007bb0 <create_name+0x184>
 8007c4c:	08009084 	.word	0x08009084
 8007c50:	08009098 	.word	0x08009098
 8007c54:	08009090 	.word	0x08009090

08007c58 <cmp_lfn>:
{
 8007c58:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007c5c:	4681      	mov	r9, r0
 8007c5e:	460f      	mov	r7, r1
	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 8007c60:	f101 001a 	add.w	r0, r1, #26
 8007c64:	f7fe ff4c 	bl	8006b00 <ld_word>
 8007c68:	bbc8      	cbnz	r0, 8007cde <cmp_lfn+0x86>
	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 8007c6a:	783e      	ldrb	r6, [r7, #0]
 8007c6c:	f006 063f 	and.w	r6, r6, #63	; 0x3f
 8007c70:	3e01      	subs	r6, #1
 8007c72:	eb06 0346 	add.w	r3, r6, r6, lsl #1
 8007c76:	eb06 0683 	add.w	r6, r6, r3, lsl #2
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8007c7a:	f04f 0801 	mov.w	r8, #1
 8007c7e:	2500      	movs	r5, #0
 8007c80:	e006      	b.n	8007c90 <cmp_lfn+0x38>
				return 0;					/* Not matched */
 8007c82:	2000      	movs	r0, #0
 8007c84:	e02c      	b.n	8007ce0 <cmp_lfn+0x88>
			if (uc != 0xFFFF) return 0;		/* Check filler */
 8007c86:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8007c8a:	4298      	cmp	r0, r3
 8007c8c:	d12a      	bne.n	8007ce4 <cmp_lfn+0x8c>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8007c8e:	3501      	adds	r5, #1
 8007c90:	2d0c      	cmp	r5, #12
 8007c92:	d818      	bhi.n	8007cc6 <cmp_lfn+0x6e>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 8007c94:	4b17      	ldr	r3, [pc, #92]	; (8007cf4 <cmp_lfn+0x9c>)
 8007c96:	5d58      	ldrb	r0, [r3, r5]
 8007c98:	4438      	add	r0, r7
 8007c9a:	f7fe ff31 	bl	8006b00 <ld_word>
 8007c9e:	4604      	mov	r4, r0
		if (wc) {
 8007ca0:	f1b8 0f00 	cmp.w	r8, #0
 8007ca4:	d0ef      	beq.n	8007c86 <cmp_lfn+0x2e>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 8007ca6:	2efe      	cmp	r6, #254	; 0xfe
 8007ca8:	d8eb      	bhi.n	8007c82 <cmp_lfn+0x2a>
 8007caa:	f000 fc81 	bl	80085b0 <ff_wtoupper>
 8007cae:	4680      	mov	r8, r0
 8007cb0:	f106 0a01 	add.w	sl, r6, #1
 8007cb4:	f839 0016 	ldrh.w	r0, [r9, r6, lsl #1]
 8007cb8:	f000 fc7a 	bl	80085b0 <ff_wtoupper>
 8007cbc:	4580      	cmp	r8, r0
 8007cbe:	d1e0      	bne.n	8007c82 <cmp_lfn+0x2a>
			wc = uc;
 8007cc0:	46a0      	mov	r8, r4
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 8007cc2:	4656      	mov	r6, sl
 8007cc4:	e7e3      	b.n	8007c8e <cmp_lfn+0x36>
	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 8007cc6:	783b      	ldrb	r3, [r7, #0]
 8007cc8:	f013 0f40 	tst.w	r3, #64	; 0x40
 8007ccc:	d00c      	beq.n	8007ce8 <cmp_lfn+0x90>
 8007cce:	f1b8 0f00 	cmp.w	r8, #0
 8007cd2:	d00b      	beq.n	8007cec <cmp_lfn+0x94>
 8007cd4:	f839 3016 	ldrh.w	r3, [r9, r6, lsl #1]
 8007cd8:	b953      	cbnz	r3, 8007cf0 <cmp_lfn+0x98>
	return 1;		/* The part of LFN matched */
 8007cda:	2001      	movs	r0, #1
 8007cdc:	e000      	b.n	8007ce0 <cmp_lfn+0x88>
	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 8007cde:	2000      	movs	r0, #0
}
 8007ce0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			if (uc != 0xFFFF) return 0;		/* Check filler */
 8007ce4:	2000      	movs	r0, #0
 8007ce6:	e7fb      	b.n	8007ce0 <cmp_lfn+0x88>
	return 1;		/* The part of LFN matched */
 8007ce8:	2001      	movs	r0, #1
 8007cea:	e7f9      	b.n	8007ce0 <cmp_lfn+0x88>
 8007cec:	2001      	movs	r0, #1
 8007cee:	e7f7      	b.n	8007ce0 <cmp_lfn+0x88>
	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 8007cf0:	2000      	movs	r0, #0
 8007cf2:	e7f5      	b.n	8007ce0 <cmp_lfn+0x88>
 8007cf4:	08009118 	.word	0x08009118

08007cf8 <dir_find>:
{
 8007cf8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007cfc:	4604      	mov	r4, r0
	FATFS *fs = dp->obj.fs;
 8007cfe:	f8d0 8000 	ldr.w	r8, [r0]
	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8007d02:	2100      	movs	r1, #0
 8007d04:	f7ff fc95 	bl	8007632 <dir_sdi>
	if (res != FR_OK) return res;
 8007d08:	4606      	mov	r6, r0
 8007d0a:	2800      	cmp	r0, #0
 8007d0c:	d164      	bne.n	8007dd8 <dir_find+0xe0>
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8007d0e:	f04f 33ff 	mov.w	r3, #4294967295
 8007d12:	6323      	str	r3, [r4, #48]	; 0x30
 8007d14:	f04f 09ff 	mov.w	r9, #255	; 0xff
 8007d18:	464f      	mov	r7, r9
 8007d1a:	e00a      	b.n	8007d32 <dir_find+0x3a>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8007d1c:	f04f 33ff 	mov.w	r3, #4294967295
 8007d20:	6323      	str	r3, [r4, #48]	; 0x30
 8007d22:	27ff      	movs	r7, #255	; 0xff
		res = dir_next(dp, 0);	/* Next entry */
 8007d24:	2100      	movs	r1, #0
 8007d26:	4620      	mov	r0, r4
 8007d28:	f7ff fd88 	bl	800783c <dir_next>
	} while (res == FR_OK);
 8007d2c:	4606      	mov	r6, r0
 8007d2e:	2800      	cmp	r0, #0
 8007d30:	d152      	bne.n	8007dd8 <dir_find+0xe0>
		res = move_window(fs, dp->sect);
 8007d32:	69e1      	ldr	r1, [r4, #28]
 8007d34:	4640      	mov	r0, r8
 8007d36:	f7ff f95d 	bl	8006ff4 <move_window>
		if (res != FR_OK) break;
 8007d3a:	4606      	mov	r6, r0
 8007d3c:	2800      	cmp	r0, #0
 8007d3e:	d14b      	bne.n	8007dd8 <dir_find+0xe0>
		c = dp->dir[DIR_Name];
 8007d40:	6a25      	ldr	r5, [r4, #32]
 8007d42:	782b      	ldrb	r3, [r5, #0]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8007d44:	2b00      	cmp	r3, #0
 8007d46:	d046      	beq.n	8007dd6 <dir_find+0xde>
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 8007d48:	7ae9      	ldrb	r1, [r5, #11]
 8007d4a:	f001 023f 	and.w	r2, r1, #63	; 0x3f
 8007d4e:	71a2      	strb	r2, [r4, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 8007d50:	2be5      	cmp	r3, #229	; 0xe5
 8007d52:	d0e3      	beq.n	8007d1c <dir_find+0x24>
 8007d54:	f011 0f08 	tst.w	r1, #8
 8007d58:	d001      	beq.n	8007d5e <dir_find+0x66>
 8007d5a:	2a0f      	cmp	r2, #15
 8007d5c:	d1de      	bne.n	8007d1c <dir_find+0x24>
			if (a == AM_LFN) {			/* An LFN entry is found */
 8007d5e:	2a0f      	cmp	r2, #15
 8007d60:	d016      	beq.n	8007d90 <dir_find+0x98>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 8007d62:	b927      	cbnz	r7, 8007d6e <dir_find+0x76>
 8007d64:	4628      	mov	r0, r5
 8007d66:	f7ff f8be 	bl	8006ee6 <sum_sfn>
 8007d6a:	4548      	cmp	r0, r9
 8007d6c:	d034      	beq.n	8007dd8 <dir_find+0xe0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 8007d6e:	f894 302f 	ldrb.w	r3, [r4, #47]	; 0x2f
 8007d72:	f013 0f01 	tst.w	r3, #1
 8007d76:	d106      	bne.n	8007d86 <dir_find+0x8e>
 8007d78:	220b      	movs	r2, #11
 8007d7a:	f104 0124 	add.w	r1, r4, #36	; 0x24
 8007d7e:	4628      	mov	r0, r5
 8007d80:	f7fe feeb 	bl	8006b5a <mem_cmp>
 8007d84:	b340      	cbz	r0, 8007dd8 <dir_find+0xe0>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8007d86:	f04f 33ff 	mov.w	r3, #4294967295
 8007d8a:	6323      	str	r3, [r4, #48]	; 0x30
 8007d8c:	27ff      	movs	r7, #255	; 0xff
 8007d8e:	e7c9      	b.n	8007d24 <dir_find+0x2c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 8007d90:	f894 202f 	ldrb.w	r2, [r4, #47]	; 0x2f
 8007d94:	f012 0f40 	tst.w	r2, #64	; 0x40
 8007d98:	d1c4      	bne.n	8007d24 <dir_find+0x2c>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 8007d9a:	f013 0f40 	tst.w	r3, #64	; 0x40
 8007d9e:	d006      	beq.n	8007dae <dir_find+0xb6>
						sum = dp->dir[LDIR_Chksum];
 8007da0:	f895 900d 	ldrb.w	r9, [r5, #13]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 8007da4:	f003 03bf 	and.w	r3, r3, #191	; 0xbf
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 8007da8:	6962      	ldr	r2, [r4, #20]
 8007daa:	6322      	str	r2, [r4, #48]	; 0x30
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 8007dac:	461f      	mov	r7, r3
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 8007dae:	42bb      	cmp	r3, r7
 8007db0:	d001      	beq.n	8007db6 <dir_find+0xbe>
 8007db2:	27ff      	movs	r7, #255	; 0xff
 8007db4:	e7b6      	b.n	8007d24 <dir_find+0x2c>
 8007db6:	7b6b      	ldrb	r3, [r5, #13]
 8007db8:	454b      	cmp	r3, r9
 8007dba:	d001      	beq.n	8007dc0 <dir_find+0xc8>
 8007dbc:	27ff      	movs	r7, #255	; 0xff
 8007dbe:	e7b1      	b.n	8007d24 <dir_find+0x2c>
 8007dc0:	4629      	mov	r1, r5
 8007dc2:	f8d8 0010 	ldr.w	r0, [r8, #16]
 8007dc6:	f7ff ff47 	bl	8007c58 <cmp_lfn>
 8007dca:	b110      	cbz	r0, 8007dd2 <dir_find+0xda>
 8007dcc:	3f01      	subs	r7, #1
 8007dce:	b2ff      	uxtb	r7, r7
 8007dd0:	e7a8      	b.n	8007d24 <dir_find+0x2c>
 8007dd2:	27ff      	movs	r7, #255	; 0xff
 8007dd4:	e7a6      	b.n	8007d24 <dir_find+0x2c>
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8007dd6:	2604      	movs	r6, #4
}
 8007dd8:	4630      	mov	r0, r6
 8007dda:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08007dde <follow_path>:
{
 8007dde:	b530      	push	{r4, r5, lr}
 8007de0:	b083      	sub	sp, #12
 8007de2:	4604      	mov	r4, r0
 8007de4:	9101      	str	r1, [sp, #4]
	FATFS *fs = obj->fs;
 8007de6:	6805      	ldr	r5, [r0, #0]
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8007de8:	e001      	b.n	8007dee <follow_path+0x10>
 8007dea:	3301      	adds	r3, #1
 8007dec:	9301      	str	r3, [sp, #4]
 8007dee:	9b01      	ldr	r3, [sp, #4]
 8007df0:	781a      	ldrb	r2, [r3, #0]
 8007df2:	2a2f      	cmp	r2, #47	; 0x2f
 8007df4:	d0f9      	beq.n	8007dea <follow_path+0xc>
 8007df6:	2a5c      	cmp	r2, #92	; 0x5c
 8007df8:	d0f7      	beq.n	8007dea <follow_path+0xc>
		obj->sclust = 0;					/* Start from root directory */
 8007dfa:	2200      	movs	r2, #0
 8007dfc:	60a2      	str	r2, [r4, #8]
	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8007dfe:	781b      	ldrb	r3, [r3, #0]
 8007e00:	2b1f      	cmp	r3, #31
 8007e02:	d921      	bls.n	8007e48 <follow_path+0x6a>
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8007e04:	a901      	add	r1, sp, #4
 8007e06:	4620      	mov	r0, r4
 8007e08:	f7ff fe10 	bl	8007a2c <create_name>
			if (res != FR_OK) break;
 8007e0c:	4603      	mov	r3, r0
 8007e0e:	bb18      	cbnz	r0, 8007e58 <follow_path+0x7a>
			res = dir_find(dp);				/* Find an object with the segment name */
 8007e10:	4620      	mov	r0, r4
 8007e12:	f7ff ff71 	bl	8007cf8 <dir_find>
			ns = dp->fn[NSFLAG];
 8007e16:	f894 202f 	ldrb.w	r2, [r4, #47]	; 0x2f
			if (res != FR_OK) {				/* Failed to find the object */
 8007e1a:	4603      	mov	r3, r0
 8007e1c:	b9f8      	cbnz	r0, 8007e5e <follow_path+0x80>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8007e1e:	f012 0f04 	tst.w	r2, #4
 8007e22:	d119      	bne.n	8007e58 <follow_path+0x7a>
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8007e24:	79a3      	ldrb	r3, [r4, #6]
 8007e26:	f013 0f10 	tst.w	r3, #16
 8007e2a:	d01f      	beq.n	8007e6c <follow_path+0x8e>
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8007e2c:	f105 0338 	add.w	r3, r5, #56	; 0x38
 8007e30:	6961      	ldr	r1, [r4, #20]
 8007e32:	89aa      	ldrh	r2, [r5, #12]
 8007e34:	fbb1 f0f2 	udiv	r0, r1, r2
 8007e38:	fb02 1110 	mls	r1, r2, r0, r1
 8007e3c:	4419      	add	r1, r3
 8007e3e:	4628      	mov	r0, r5
 8007e40:	f7fe ff99 	bl	8006d76 <ld_clust>
 8007e44:	60a0      	str	r0, [r4, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8007e46:	e7dd      	b.n	8007e04 <follow_path+0x26>
		dp->fn[NSFLAG] = NS_NONAME;
 8007e48:	2380      	movs	r3, #128	; 0x80
 8007e4a:	f884 302f 	strb.w	r3, [r4, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 8007e4e:	4611      	mov	r1, r2
 8007e50:	4620      	mov	r0, r4
 8007e52:	f7ff fbee 	bl	8007632 <dir_sdi>
 8007e56:	4603      	mov	r3, r0
}
 8007e58:	4618      	mov	r0, r3
 8007e5a:	b003      	add	sp, #12
 8007e5c:	bd30      	pop	{r4, r5, pc}
				if (res == FR_NO_FILE) {	/* Object is not found */
 8007e5e:	2804      	cmp	r0, #4
 8007e60:	d1fa      	bne.n	8007e58 <follow_path+0x7a>
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8007e62:	f012 0f04 	tst.w	r2, #4
 8007e66:	d1f7      	bne.n	8007e58 <follow_path+0x7a>
 8007e68:	2305      	movs	r3, #5
 8007e6a:	e7f5      	b.n	8007e58 <follow_path+0x7a>
				res = FR_NO_PATH; break;
 8007e6c:	2305      	movs	r3, #5
 8007e6e:	e7f3      	b.n	8007e58 <follow_path+0x7a>

08007e70 <dir_register>:
{
 8007e70:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007e74:	b085      	sub	sp, #20
	FATFS *fs = dp->obj.fs;
 8007e76:	6806      	ldr	r6, [r0, #0]
	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 8007e78:	f890 302f 	ldrb.w	r3, [r0, #47]	; 0x2f
 8007e7c:	f013 0fa0 	tst.w	r3, #160	; 0xa0
 8007e80:	f040 808e 	bne.w	8007fa0 <dir_register+0x130>
 8007e84:	4607      	mov	r7, r0
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 8007e86:	2400      	movs	r4, #0
 8007e88:	e000      	b.n	8007e8c <dir_register+0x1c>
 8007e8a:	3401      	adds	r4, #1
 8007e8c:	6933      	ldr	r3, [r6, #16]
 8007e8e:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
 8007e92:	2b00      	cmp	r3, #0
 8007e94:	d1f9      	bne.n	8007e8a <dir_register+0x1a>
	mem_cpy(sn, dp->fn, 12);
 8007e96:	f107 0824 	add.w	r8, r7, #36	; 0x24
 8007e9a:	220c      	movs	r2, #12
 8007e9c:	4641      	mov	r1, r8
 8007e9e:	a801      	add	r0, sp, #4
 8007ea0:	f7fe fe4c 	bl	8006b3c <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 8007ea4:	f89d 300f 	ldrb.w	r3, [sp, #15]
 8007ea8:	f013 0f01 	tst.w	r3, #1
 8007eac:	d01c      	beq.n	8007ee8 <dir_register+0x78>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 8007eae:	2340      	movs	r3, #64	; 0x40
 8007eb0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		for (n = 1; n < 100; n++) {
 8007eb4:	2501      	movs	r5, #1
 8007eb6:	e000      	b.n	8007eba <dir_register+0x4a>
 8007eb8:	3501      	adds	r5, #1
 8007eba:	2d63      	cmp	r5, #99	; 0x63
 8007ebc:	d80b      	bhi.n	8007ed6 <dir_register+0x66>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 8007ebe:	462b      	mov	r3, r5
 8007ec0:	6932      	ldr	r2, [r6, #16]
 8007ec2:	a901      	add	r1, sp, #4
 8007ec4:	4640      	mov	r0, r8
 8007ec6:	f7fe ffb9 	bl	8006e3c <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 8007eca:	4638      	mov	r0, r7
 8007ecc:	f7ff ff14 	bl	8007cf8 <dir_find>
			if (res != FR_OK) break;
 8007ed0:	4681      	mov	r9, r0
 8007ed2:	2800      	cmp	r0, #0
 8007ed4:	d0f0      	beq.n	8007eb8 <dir_register+0x48>
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 8007ed6:	2d64      	cmp	r5, #100	; 0x64
 8007ed8:	d065      	beq.n	8007fa6 <dir_register+0x136>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 8007eda:	f1b9 0f04 	cmp.w	r9, #4
 8007ede:	d11b      	bne.n	8007f18 <dir_register+0xa8>
		dp->fn[NSFLAG] = sn[NSFLAG];
 8007ee0:	f89d 300f 	ldrb.w	r3, [sp, #15]
 8007ee4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 8007ee8:	f89d 300f 	ldrb.w	r3, [sp, #15]
 8007eec:	f013 0f02 	tst.w	r3, #2
 8007ef0:	d006      	beq.n	8007f00 <dir_register+0x90>
 8007ef2:	340c      	adds	r4, #12
 8007ef4:	4b2d      	ldr	r3, [pc, #180]	; (8007fac <dir_register+0x13c>)
 8007ef6:	fba3 3404 	umull	r3, r4, r3, r4
 8007efa:	08a4      	lsrs	r4, r4, #2
 8007efc:	3401      	adds	r4, #1
 8007efe:	e000      	b.n	8007f02 <dir_register+0x92>
 8007f00:	2401      	movs	r4, #1
	res = dir_alloc(dp, nent);		/* Allocate entries */
 8007f02:	4621      	mov	r1, r4
 8007f04:	4638      	mov	r0, r7
 8007f06:	f7ff fd25 	bl	8007954 <dir_alloc>
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 8007f0a:	4681      	mov	r9, r0
 8007f0c:	b908      	cbnz	r0, 8007f12 <dir_register+0xa2>
 8007f0e:	3c01      	subs	r4, #1
 8007f10:	d106      	bne.n	8007f20 <dir_register+0xb0>
	if (res == FR_OK) {
 8007f12:	f1b9 0f00 	cmp.w	r9, #0
 8007f16:	d029      	beq.n	8007f6c <dir_register+0xfc>
}
 8007f18:	4648      	mov	r0, r9
 8007f1a:	b005      	add	sp, #20
 8007f1c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 8007f20:	6979      	ldr	r1, [r7, #20]
 8007f22:	eba1 1144 	sub.w	r1, r1, r4, lsl #5
 8007f26:	4638      	mov	r0, r7
 8007f28:	f7ff fb83 	bl	8007632 <dir_sdi>
		if (res == FR_OK) {
 8007f2c:	4681      	mov	r9, r0
 8007f2e:	2800      	cmp	r0, #0
 8007f30:	d1ef      	bne.n	8007f12 <dir_register+0xa2>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 8007f32:	4640      	mov	r0, r8
 8007f34:	f7fe ffd7 	bl	8006ee6 <sum_sfn>
 8007f38:	4605      	mov	r5, r0
				res = move_window(fs, dp->sect);
 8007f3a:	69f9      	ldr	r1, [r7, #28]
 8007f3c:	4630      	mov	r0, r6
 8007f3e:	f7ff f859 	bl	8006ff4 <move_window>
				if (res != FR_OK) break;
 8007f42:	4681      	mov	r9, r0
 8007f44:	2800      	cmp	r0, #0
 8007f46:	d1e4      	bne.n	8007f12 <dir_register+0xa2>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 8007f48:	462b      	mov	r3, r5
 8007f4a:	b2e2      	uxtb	r2, r4
 8007f4c:	6a39      	ldr	r1, [r7, #32]
 8007f4e:	6930      	ldr	r0, [r6, #16]
 8007f50:	f7fe ff38 	bl	8006dc4 <put_lfn>
				fs->wflag = 1;
 8007f54:	2301      	movs	r3, #1
 8007f56:	70f3      	strb	r3, [r6, #3]
				res = dir_next(dp, 0);	/* Next entry */
 8007f58:	2100      	movs	r1, #0
 8007f5a:	4638      	mov	r0, r7
 8007f5c:	f7ff fc6e 	bl	800783c <dir_next>
			} while (res == FR_OK && --nent);
 8007f60:	4681      	mov	r9, r0
 8007f62:	2800      	cmp	r0, #0
 8007f64:	d1d5      	bne.n	8007f12 <dir_register+0xa2>
 8007f66:	3c01      	subs	r4, #1
 8007f68:	d1e7      	bne.n	8007f3a <dir_register+0xca>
 8007f6a:	e7d2      	b.n	8007f12 <dir_register+0xa2>
		res = move_window(fs, dp->sect);
 8007f6c:	69f9      	ldr	r1, [r7, #28]
 8007f6e:	4630      	mov	r0, r6
 8007f70:	f7ff f840 	bl	8006ff4 <move_window>
		if (res == FR_OK) {
 8007f74:	4681      	mov	r9, r0
 8007f76:	2800      	cmp	r0, #0
 8007f78:	d1ce      	bne.n	8007f18 <dir_register+0xa8>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8007f7a:	2220      	movs	r2, #32
 8007f7c:	2100      	movs	r1, #0
 8007f7e:	6a38      	ldr	r0, [r7, #32]
 8007f80:	f7fe fde6 	bl	8006b50 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8007f84:	220b      	movs	r2, #11
 8007f86:	4641      	mov	r1, r8
 8007f88:	6a38      	ldr	r0, [r7, #32]
 8007f8a:	f7fe fdd7 	bl	8006b3c <mem_cpy>
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 8007f8e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8007f92:	6a3a      	ldr	r2, [r7, #32]
 8007f94:	f003 0318 	and.w	r3, r3, #24
 8007f98:	7313      	strb	r3, [r2, #12]
			fs->wflag = 1;
 8007f9a:	2301      	movs	r3, #1
 8007f9c:	70f3      	strb	r3, [r6, #3]
 8007f9e:	e7bb      	b.n	8007f18 <dir_register+0xa8>
	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 8007fa0:	f04f 0906 	mov.w	r9, #6
 8007fa4:	e7b8      	b.n	8007f18 <dir_register+0xa8>
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 8007fa6:	f04f 0907 	mov.w	r9, #7
 8007faa:	e7b5      	b.n	8007f18 <dir_register+0xa8>
 8007fac:	4ec4ec4f 	.word	0x4ec4ec4f

08007fb0 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8007fb0:	b570      	push	{r4, r5, r6, lr}
 8007fb2:	b084      	sub	sp, #16
 8007fb4:	9001      	str	r0, [sp, #4]
 8007fb6:	9100      	str	r1, [sp, #0]
 8007fb8:	4616      	mov	r6, r2
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8007fba:	9103      	str	r1, [sp, #12]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8007fbc:	a803      	add	r0, sp, #12
 8007fbe:	f7fe ffa2 	bl	8006f06 <get_ldnumber>
	if (vol < 0) return FR_INVALID_DRIVE;
 8007fc2:	1e04      	subs	r4, r0, #0
 8007fc4:	db1c      	blt.n	8008000 <f_mount+0x50>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8007fc6:	4b10      	ldr	r3, [pc, #64]	; (8008008 <f_mount+0x58>)
 8007fc8:	f853 5024 	ldr.w	r5, [r3, r4, lsl #2]

	if (cfs) {
 8007fcc:	b125      	cbz	r5, 8007fd8 <f_mount+0x28>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8007fce:	4628      	mov	r0, r5
 8007fd0:	f7fe fe94 	bl	8006cfc <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8007fd4:	2300      	movs	r3, #0
 8007fd6:	702b      	strb	r3, [r5, #0]
	}

	if (fs) {
 8007fd8:	9b01      	ldr	r3, [sp, #4]
 8007fda:	b10b      	cbz	r3, 8007fe0 <f_mount+0x30>
		fs->fs_type = 0;				/* Clear new fs object */
 8007fdc:	2200      	movs	r2, #0
 8007fde:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8007fe0:	9b01      	ldr	r3, [sp, #4]
 8007fe2:	4a09      	ldr	r2, [pc, #36]	; (8008008 <f_mount+0x58>)
 8007fe4:	f842 3024 	str.w	r3, [r2, r4, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8007fe8:	b163      	cbz	r3, 8008004 <f_mount+0x54>
 8007fea:	2e01      	cmp	r6, #1
 8007fec:	d002      	beq.n	8007ff4 <f_mount+0x44>
 8007fee:	2000      	movs	r0, #0

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
	LEAVE_FF(fs, res);
}
 8007ff0:	b004      	add	sp, #16
 8007ff2:	bd70      	pop	{r4, r5, r6, pc}
	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8007ff4:	2200      	movs	r2, #0
 8007ff6:	a901      	add	r1, sp, #4
 8007ff8:	4668      	mov	r0, sp
 8007ffa:	f7ff f853 	bl	80070a4 <find_volume>
	LEAVE_FF(fs, res);
 8007ffe:	e7f7      	b.n	8007ff0 <f_mount+0x40>
	if (vol < 0) return FR_INVALID_DRIVE;
 8008000:	200b      	movs	r0, #11
 8008002:	e7f5      	b.n	8007ff0 <f_mount+0x40>
	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8008004:	2000      	movs	r0, #0
 8008006:	e7f3      	b.n	8007ff0 <f_mount+0x40>
 8008008:	20016e64 	.word	0x20016e64

0800800c <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800800c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008010:	b091      	sub	sp, #68	; 0x44
 8008012:	9101      	str	r1, [sp, #4]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 8008014:	2800      	cmp	r0, #0
 8008016:	f000 8111 	beq.w	800823c <f_open+0x230>
 800801a:	4615      	mov	r5, r2
 800801c:	4606      	mov	r6, r0

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800801e:	f002 073f 	and.w	r7, r2, #63	; 0x3f
	res = find_volume(&path, &fs, mode);
 8008022:	463a      	mov	r2, r7
 8008024:	a902      	add	r1, sp, #8
 8008026:	a801      	add	r0, sp, #4
 8008028:	f7ff f83c 	bl	80070a4 <find_volume>
	if (res == FR_OK) {
 800802c:	4604      	mov	r4, r0
 800802e:	b130      	cbz	r0, 800803e <f_open+0x32>
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8008030:	b10c      	cbz	r4, 8008036 <f_open+0x2a>
 8008032:	2300      	movs	r3, #0
 8008034:	6033      	str	r3, [r6, #0]

	LEAVE_FF(fs, res);
}
 8008036:	4620      	mov	r0, r4
 8008038:	b011      	add	sp, #68	; 0x44
 800803a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		dj.obj.fs = fs;
 800803e:	9b02      	ldr	r3, [sp, #8]
 8008040:	9303      	str	r3, [sp, #12]
		res = follow_path(&dj, path);	/* Follow the file path */
 8008042:	9901      	ldr	r1, [sp, #4]
 8008044:	a803      	add	r0, sp, #12
 8008046:	f7ff feca 	bl	8007dde <follow_path>
		if (res == FR_OK) {
 800804a:	4604      	mov	r4, r0
 800804c:	b960      	cbnz	r0, 8008068 <f_open+0x5c>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800804e:	f99d 303b 	ldrsb.w	r3, [sp, #59]	; 0x3b
 8008052:	2b00      	cmp	r3, #0
 8008054:	db50      	blt.n	80080f8 <f_open+0xec>
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8008056:	f037 0301 	bics.w	r3, r7, #1
 800805a:	bf14      	ite	ne
 800805c:	2101      	movne	r1, #1
 800805e:	2100      	moveq	r1, #0
 8008060:	a803      	add	r0, sp, #12
 8008062:	f7fe fd8f 	bl	8006b84 <chk_lock>
 8008066:	4604      	mov	r4, r0
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8008068:	f015 0f1c 	tst.w	r5, #28
 800806c:	d05a      	beq.n	8008124 <f_open+0x118>
			if (res != FR_OK) {					/* No file, create new */
 800806e:	2c00      	cmp	r4, #0
 8008070:	d04e      	beq.n	8008110 <f_open+0x104>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8008072:	2c04      	cmp	r4, #4
 8008074:	d042      	beq.n	80080fc <f_open+0xf0>
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8008076:	f047 0708 	orr.w	r7, r7, #8
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800807a:	2c00      	cmp	r4, #0
 800807c:	d161      	bne.n	8008142 <f_open+0x136>
 800807e:	f017 0f08 	tst.w	r7, #8
 8008082:	d05e      	beq.n	8008142 <f_open+0x136>
				dw = GET_FATTIME();
 8008084:	f7fe fce2 	bl	8006a4c <get_fattime>
 8008088:	4605      	mov	r5, r0
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800808a:	4601      	mov	r1, r0
 800808c:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800808e:	300e      	adds	r0, #14
 8008090:	f7fe fd4a 	bl	8006b28 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 8008094:	4629      	mov	r1, r5
 8008096:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8008098:	3016      	adds	r0, #22
 800809a:	f7fe fd45 	bl	8006b28 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800809e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80080a0:	2220      	movs	r2, #32
 80080a2:	72da      	strb	r2, [r3, #11]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 80080a4:	f8dd 8008 	ldr.w	r8, [sp, #8]
 80080a8:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
 80080ac:	4649      	mov	r1, r9
 80080ae:	4640      	mov	r0, r8
 80080b0:	f7fe fe61 	bl	8006d76 <ld_clust>
 80080b4:	4605      	mov	r5, r0
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 80080b6:	2200      	movs	r2, #0
 80080b8:	4649      	mov	r1, r9
 80080ba:	4640      	mov	r0, r8
 80080bc:	f7fe fe6e 	bl	8006d9c <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 80080c0:	2100      	movs	r1, #0
 80080c2:	980b      	ldr	r0, [sp, #44]	; 0x2c
 80080c4:	301c      	adds	r0, #28
 80080c6:	f7fe fd2f 	bl	8006b28 <st_dword>
					fs->wflag = 1;
 80080ca:	9b02      	ldr	r3, [sp, #8]
 80080cc:	2201      	movs	r2, #1
 80080ce:	70da      	strb	r2, [r3, #3]
					if (cl) {							/* Remove the cluster chain if exist */
 80080d0:	b3bd      	cbz	r5, 8008142 <f_open+0x136>
						dw = fs->winsect;
 80080d2:	9b02      	ldr	r3, [sp, #8]
 80080d4:	f8d3 8034 	ldr.w	r8, [r3, #52]	; 0x34
						res = remove_chain(&dj.obj, cl, 0);
 80080d8:	2200      	movs	r2, #0
 80080da:	4629      	mov	r1, r5
 80080dc:	a803      	add	r0, sp, #12
 80080de:	f7ff fb6e 	bl	80077be <remove_chain>
						if (res == FR_OK) {
 80080e2:	4604      	mov	r4, r0
 80080e4:	bb68      	cbnz	r0, 8008142 <f_open+0x136>
							res = move_window(fs, dw);
 80080e6:	4641      	mov	r1, r8
 80080e8:	9802      	ldr	r0, [sp, #8]
 80080ea:	f7fe ff83 	bl	8006ff4 <move_window>
 80080ee:	4604      	mov	r4, r0
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 80080f0:	3d01      	subs	r5, #1
 80080f2:	9b02      	ldr	r3, [sp, #8]
 80080f4:	615d      	str	r5, [r3, #20]
 80080f6:	e024      	b.n	8008142 <f_open+0x136>
				res = FR_INVALID_NAME;
 80080f8:	2406      	movs	r4, #6
 80080fa:	e7b5      	b.n	8008068 <f_open+0x5c>
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 80080fc:	f7fe fd7c 	bl	8006bf8 <enq_lock>
 8008100:	b908      	cbnz	r0, 8008106 <f_open+0xfa>
 8008102:	2412      	movs	r4, #18
 8008104:	e7b7      	b.n	8008076 <f_open+0x6a>
 8008106:	a803      	add	r0, sp, #12
 8008108:	f7ff feb2 	bl	8007e70 <dir_register>
 800810c:	4604      	mov	r4, r0
 800810e:	e7b2      	b.n	8008076 <f_open+0x6a>
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8008110:	f89d 3012 	ldrb.w	r3, [sp, #18]
 8008114:	f013 0f11 	tst.w	r3, #17
 8008118:	d112      	bne.n	8008140 <f_open+0x134>
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800811a:	f015 0f04 	tst.w	r5, #4
 800811e:	d0ac      	beq.n	800807a <f_open+0x6e>
 8008120:	2408      	movs	r4, #8
 8008122:	e00e      	b.n	8008142 <f_open+0x136>
			if (res == FR_OK) {					/* Following succeeded */
 8008124:	b96c      	cbnz	r4, 8008142 <f_open+0x136>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8008126:	f89d 3012 	ldrb.w	r3, [sp, #18]
 800812a:	f013 0f10 	tst.w	r3, #16
 800812e:	d14e      	bne.n	80081ce <f_open+0x1c2>
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 8008130:	f015 0f02 	tst.w	r5, #2
 8008134:	d005      	beq.n	8008142 <f_open+0x136>
 8008136:	f013 0f01 	tst.w	r3, #1
 800813a:	d002      	beq.n	8008142 <f_open+0x136>
						res = FR_DENIED;
 800813c:	2407      	movs	r4, #7
 800813e:	e016      	b.n	800816e <f_open+0x162>
					res = FR_DENIED;
 8008140:	2407      	movs	r4, #7
		if (res == FR_OK) {
 8008142:	b9a4      	cbnz	r4, 800816e <f_open+0x162>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8008144:	f017 0f08 	tst.w	r7, #8
 8008148:	d001      	beq.n	800814e <f_open+0x142>
				mode |= FA_MODIFIED;
 800814a:	f047 0740 	orr.w	r7, r7, #64	; 0x40
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800814e:	9b02      	ldr	r3, [sp, #8]
 8008150:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008152:	6273      	str	r3, [r6, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 8008154:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008156:	62b3      	str	r3, [r6, #40]	; 0x28
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8008158:	f037 0301 	bics.w	r3, r7, #1
 800815c:	bf14      	ite	ne
 800815e:	2101      	movne	r1, #1
 8008160:	2100      	moveq	r1, #0
 8008162:	a803      	add	r0, sp, #12
 8008164:	f7fe fd58 	bl	8006c18 <inc_lock>
 8008168:	6130      	str	r0, [r6, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800816a:	2800      	cmp	r0, #0
 800816c:	d064      	beq.n	8008238 <f_open+0x22c>
		if (res == FR_OK) {
 800816e:	2c00      	cmp	r4, #0
 8008170:	f47f af5e 	bne.w	8008030 <f_open+0x24>
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8008174:	9d02      	ldr	r5, [sp, #8]
 8008176:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
 800817a:	4641      	mov	r1, r8
 800817c:	4628      	mov	r0, r5
 800817e:	f7fe fdfa 	bl	8006d76 <ld_clust>
 8008182:	60b0      	str	r0, [r6, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8008184:	f108 001c 	add.w	r0, r8, #28
 8008188:	f7fe fcbf 	bl	8006b0a <ld_dword>
 800818c:	60f0      	str	r0, [r6, #12]
			fp->cltbl = 0;			/* Disable fast seek mode */
 800818e:	2100      	movs	r1, #0
 8008190:	62f1      	str	r1, [r6, #44]	; 0x2c
			fp->obj.fs = fs;	 	/* Validate the file object */
 8008192:	6035      	str	r5, [r6, #0]
			fp->obj.id = fs->id;
 8008194:	88eb      	ldrh	r3, [r5, #6]
 8008196:	80b3      	strh	r3, [r6, #4]
			fp->flag = mode;		/* Set file access mode */
 8008198:	7537      	strb	r7, [r6, #20]
			fp->err = 0;			/* Clear error flag */
 800819a:	7571      	strb	r1, [r6, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800819c:	6231      	str	r1, [r6, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800819e:	61b1      	str	r1, [r6, #24]
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 80081a0:	f106 0830 	add.w	r8, r6, #48	; 0x30
 80081a4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80081a8:	4640      	mov	r0, r8
 80081aa:	f7fe fcd1 	bl	8006b50 <mem_set>
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 80081ae:	f017 0f20 	tst.w	r7, #32
 80081b2:	f43f af3d 	beq.w	8008030 <f_open+0x24>
 80081b6:	68f5      	ldr	r5, [r6, #12]
 80081b8:	2d00      	cmp	r5, #0
 80081ba:	f43f af39 	beq.w	8008030 <f_open+0x24>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 80081be:	61b5      	str	r5, [r6, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 80081c0:	9b02      	ldr	r3, [sp, #8]
 80081c2:	895f      	ldrh	r7, [r3, #10]
 80081c4:	899b      	ldrh	r3, [r3, #12]
 80081c6:	fb03 f707 	mul.w	r7, r3, r7
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 80081ca:	68b1      	ldr	r1, [r6, #8]
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 80081cc:	e005      	b.n	80081da <f_open+0x1ce>
					res = FR_NO_FILE;
 80081ce:	2404      	movs	r4, #4
 80081d0:	e7cd      	b.n	800816e <f_open+0x162>
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 80081d2:	f1b1 3fff 	cmp.w	r1, #4294967295
 80081d6:	d00b      	beq.n	80081f0 <f_open+0x1e4>
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 80081d8:	1bed      	subs	r5, r5, r7
 80081da:	b95c      	cbnz	r4, 80081f4 <f_open+0x1e8>
 80081dc:	42bd      	cmp	r5, r7
 80081de:	d909      	bls.n	80081f4 <f_open+0x1e8>
					clst = get_fat(&fp->obj, clst);
 80081e0:	4630      	mov	r0, r6
 80081e2:	f7ff f9a8 	bl	8007536 <get_fat>
 80081e6:	4601      	mov	r1, r0
					if (clst <= 1) res = FR_INT_ERR;
 80081e8:	2801      	cmp	r0, #1
 80081ea:	d8f2      	bhi.n	80081d2 <f_open+0x1c6>
 80081ec:	2402      	movs	r4, #2
 80081ee:	e7f0      	b.n	80081d2 <f_open+0x1c6>
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 80081f0:	2401      	movs	r4, #1
 80081f2:	e7f1      	b.n	80081d8 <f_open+0x1cc>
				fp->clust = clst;
 80081f4:	61f1      	str	r1, [r6, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 80081f6:	2c00      	cmp	r4, #0
 80081f8:	f47f af1a 	bne.w	8008030 <f_open+0x24>
 80081fc:	9f02      	ldr	r7, [sp, #8]
 80081fe:	f8b7 900c 	ldrh.w	r9, [r7, #12]
 8008202:	fbb5 f3f9 	udiv	r3, r5, r9
 8008206:	fb09 5313 	mls	r3, r9, r3, r5
 800820a:	2b00      	cmp	r3, #0
 800820c:	f43f af10 	beq.w	8008030 <f_open+0x24>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8008210:	4638      	mov	r0, r7
 8008212:	f7fe fd91 	bl	8006d38 <clust2sect>
 8008216:	b908      	cbnz	r0, 800821c <f_open+0x210>
						res = FR_INT_ERR;
 8008218:	2402      	movs	r4, #2
 800821a:	e70a      	b.n	8008032 <f_open+0x26>
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800821c:	fbb5 f2f9 	udiv	r2, r5, r9
 8008220:	4402      	add	r2, r0
 8008222:	6232      	str	r2, [r6, #32]
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8008224:	2301      	movs	r3, #1
 8008226:	4641      	mov	r1, r8
 8008228:	7878      	ldrb	r0, [r7, #1]
 800822a:	f7fe fc45 	bl	8006ab8 <disk_read>
 800822e:	2800      	cmp	r0, #0
 8008230:	f43f aefe 	beq.w	8008030 <f_open+0x24>
 8008234:	2401      	movs	r4, #1
 8008236:	e6fc      	b.n	8008032 <f_open+0x26>
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8008238:	2402      	movs	r4, #2
 800823a:	e6f9      	b.n	8008030 <f_open+0x24>
	if (!fp) return FR_INVALID_OBJECT;
 800823c:	2409      	movs	r4, #9
 800823e:	e6fa      	b.n	8008036 <f_open+0x2a>

08008240 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 8008240:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008244:	b085      	sub	sp, #20
 8008246:	4604      	mov	r4, r0
 8008248:	460f      	mov	r7, r1
 800824a:	4615      	mov	r5, r2
 800824c:	4698      	mov	r8, r3
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;


	*bw = 0;	/* Clear write byte counter */
 800824e:	2300      	movs	r3, #0
 8008250:	f8c8 3000 	str.w	r3, [r8]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 8008254:	a903      	add	r1, sp, #12
 8008256:	f7fe fe80 	bl	8006f5a <validate>
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800825a:	9001      	str	r0, [sp, #4]
 800825c:	2800      	cmp	r0, #0
 800825e:	d14a      	bne.n	80082f6 <f_write+0xb6>
 8008260:	7d63      	ldrb	r3, [r4, #21]
 8008262:	9301      	str	r3, [sp, #4]
 8008264:	2b00      	cmp	r3, #0
 8008266:	d146      	bne.n	80082f6 <f_write+0xb6>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 8008268:	7d23      	ldrb	r3, [r4, #20]
 800826a:	f013 0f02 	tst.w	r3, #2
 800826e:	f000 80ec 	beq.w	800844a <f_write+0x20a>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 8008272:	69a3      	ldr	r3, [r4, #24]
 8008274:	42eb      	cmn	r3, r5
 8008276:	f0c0 80b6 	bcc.w	80083e6 <f_write+0x1a6>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 800827a:	43dd      	mvns	r5, r3
 800827c:	e0b3      	b.n	80083e6 <f_write+0x1a6>
					if (clst == 0) {		/* If no cluster is allocated, */
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800827e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8008280:	2b00      	cmp	r3, #0
 8008282:	d03c      	beq.n	80082fe <f_write+0xbe>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8008284:	4620      	mov	r0, r4
 8008286:	f7fe fd63 	bl	8006d50 <clmt_clust>
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800828a:	2800      	cmp	r0, #0
 800828c:	f000 80d8 	beq.w	8008440 <f_write+0x200>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 8008290:	2801      	cmp	r0, #1
 8008292:	d039      	beq.n	8008308 <f_write+0xc8>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8008294:	f1b0 3fff 	cmp.w	r0, #4294967295
 8008298:	d03d      	beq.n	8008316 <f_write+0xd6>
				fp->clust = clst;			/* Update current cluster */
 800829a:	61e0      	str	r0, [r4, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 800829c:	68a3      	ldr	r3, [r4, #8]
 800829e:	b903      	cbnz	r3, 80082a2 <f_write+0x62>
 80082a0:	60a0      	str	r0, [r4, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 80082a2:	f994 3014 	ldrsb.w	r3, [r4, #20]
 80082a6:	2b00      	cmp	r3, #0
 80082a8:	db3c      	blt.n	8008324 <f_write+0xe4>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
				fp->flag &= (BYTE)~FA_DIRTY;
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 80082aa:	f8dd b00c 	ldr.w	fp, [sp, #12]
 80082ae:	69e1      	ldr	r1, [r4, #28]
 80082b0:	4658      	mov	r0, fp
 80082b2:	f7fe fd41 	bl	8006d38 <clust2sect>
			if (!sect) ABORT(fs, FR_INT_ERR);
 80082b6:	4681      	mov	r9, r0
 80082b8:	2800      	cmp	r0, #0
 80082ba:	d048      	beq.n	800834e <f_write+0x10e>
			sect += csect;
 80082bc:	44b1      	add	r9, r6
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 80082be:	f8bb 300c 	ldrh.w	r3, [fp, #12]
 80082c2:	fbb5 faf3 	udiv	sl, r5, r3
			if (cc) {						/* Write maximum contiguous sectors directly */
 80082c6:	42ab      	cmp	r3, r5
 80082c8:	d85f      	bhi.n	800838a <f_write+0x14a>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 80082ca:	eb06 030a 	add.w	r3, r6, sl
 80082ce:	f8bb 200a 	ldrh.w	r2, [fp, #10]
 80082d2:	4293      	cmp	r3, r2
 80082d4:	d901      	bls.n	80082da <f_write+0x9a>
					cc = fs->csize - csect;
 80082d6:	eba2 0a06 	sub.w	sl, r2, r6
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80082da:	4653      	mov	r3, sl
 80082dc:	464a      	mov	r2, r9
 80082de:	4639      	mov	r1, r7
 80082e0:	f89b 0001 	ldrb.w	r0, [fp, #1]
 80082e4:	f7fe fbf4 	bl	8006ad0 <disk_write>
 80082e8:	b3c0      	cbz	r0, 800835c <f_write+0x11c>
 80082ea:	f04f 0a01 	mov.w	sl, #1
 80082ee:	f884 a015 	strb.w	sl, [r4, #21]
 80082f2:	f8cd a004 	str.w	sl, [sp, #4]
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */

	LEAVE_FF(fs, FR_OK);
}
 80082f6:	9801      	ldr	r0, [sp, #4]
 80082f8:	b005      	add	sp, #20
 80082fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 80082fe:	69e1      	ldr	r1, [r4, #28]
 8008300:	4620      	mov	r0, r4
 8008302:	f7ff f9f6 	bl	80076f2 <create_chain>
 8008306:	e7c0      	b.n	800828a <f_write+0x4a>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 8008308:	f04f 0a02 	mov.w	sl, #2
 800830c:	f884 a015 	strb.w	sl, [r4, #21]
 8008310:	f8cd a004 	str.w	sl, [sp, #4]
 8008314:	e7ef      	b.n	80082f6 <f_write+0xb6>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8008316:	f04f 0a01 	mov.w	sl, #1
 800831a:	f884 a015 	strb.w	sl, [r4, #21]
 800831e:	f8cd a004 	str.w	sl, [sp, #4]
 8008322:	e7e8      	b.n	80082f6 <f_write+0xb6>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8008324:	2301      	movs	r3, #1
 8008326:	6a22      	ldr	r2, [r4, #32]
 8008328:	f104 0130 	add.w	r1, r4, #48	; 0x30
 800832c:	9803      	ldr	r0, [sp, #12]
 800832e:	7840      	ldrb	r0, [r0, #1]
 8008330:	f7fe fbce 	bl	8006ad0 <disk_write>
 8008334:	b920      	cbnz	r0, 8008340 <f_write+0x100>
				fp->flag &= (BYTE)~FA_DIRTY;
 8008336:	7d23      	ldrb	r3, [r4, #20]
 8008338:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800833c:	7523      	strb	r3, [r4, #20]
 800833e:	e7b4      	b.n	80082aa <f_write+0x6a>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8008340:	f04f 0a01 	mov.w	sl, #1
 8008344:	f884 a015 	strb.w	sl, [r4, #21]
 8008348:	f8cd a004 	str.w	sl, [sp, #4]
 800834c:	e7d3      	b.n	80082f6 <f_write+0xb6>
			if (!sect) ABORT(fs, FR_INT_ERR);
 800834e:	f04f 0a02 	mov.w	sl, #2
 8008352:	f884 a015 	strb.w	sl, [r4, #21]
 8008356:	f8cd a004 	str.w	sl, [sp, #4]
 800835a:	e7cc      	b.n	80082f6 <f_write+0xb6>
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 800835c:	6a21      	ldr	r1, [r4, #32]
 800835e:	eba1 0109 	sub.w	r1, r1, r9
 8008362:	4551      	cmp	r1, sl
 8008364:	d304      	bcc.n	8008370 <f_write+0x130>
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 8008366:	9b03      	ldr	r3, [sp, #12]
 8008368:	899e      	ldrh	r6, [r3, #12]
 800836a:	fb0a f606 	mul.w	r6, sl, r6
				continue;
 800836e:	e02b      	b.n	80083c8 <f_write+0x188>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 8008370:	9b03      	ldr	r3, [sp, #12]
 8008372:	899a      	ldrh	r2, [r3, #12]
 8008374:	fb02 7101 	mla	r1, r2, r1, r7
 8008378:	f104 0030 	add.w	r0, r4, #48	; 0x30
 800837c:	f7fe fbde 	bl	8006b3c <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 8008380:	7d23      	ldrb	r3, [r4, #20]
 8008382:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008386:	7523      	strb	r3, [r4, #20]
 8008388:	e7ed      	b.n	8008366 <f_write+0x126>
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800838a:	6a23      	ldr	r3, [r4, #32]
 800838c:	454b      	cmp	r3, r9
 800838e:	d003      	beq.n	8008398 <f_write+0x158>
				fp->fptr < fp->obj.objsize &&
 8008390:	69a2      	ldr	r2, [r4, #24]
 8008392:	68e3      	ldr	r3, [r4, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8008394:	429a      	cmp	r2, r3
 8008396:	d342      	bcc.n	800841e <f_write+0x1de>
			fp->sect = sect;
 8008398:	f8c4 9020 	str.w	r9, [r4, #32]
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800839c:	9b03      	ldr	r3, [sp, #12]
 800839e:	899e      	ldrh	r6, [r3, #12]
 80083a0:	69a3      	ldr	r3, [r4, #24]
 80083a2:	fbb3 f0f6 	udiv	r0, r3, r6
 80083a6:	fb06 3310 	mls	r3, r6, r0, r3
 80083aa:	1af6      	subs	r6, r6, r3
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 80083ac:	42b5      	cmp	r5, r6
 80083ae:	d200      	bcs.n	80083b2 <f_write+0x172>
 80083b0:	462e      	mov	r6, r5
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 80083b2:	f104 0030 	add.w	r0, r4, #48	; 0x30
 80083b6:	4632      	mov	r2, r6
 80083b8:	4639      	mov	r1, r7
 80083ba:	4418      	add	r0, r3
 80083bc:	f7fe fbbe 	bl	8006b3c <mem_cpy>
		fp->flag |= FA_DIRTY;
 80083c0:	7d23      	ldrb	r3, [r4, #20]
 80083c2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80083c6:	7523      	strb	r3, [r4, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 80083c8:	4437      	add	r7, r6
 80083ca:	69a3      	ldr	r3, [r4, #24]
 80083cc:	4433      	add	r3, r6
 80083ce:	61a3      	str	r3, [r4, #24]
 80083d0:	68e2      	ldr	r2, [r4, #12]
 80083d2:	4293      	cmp	r3, r2
 80083d4:	bf38      	it	cc
 80083d6:	4613      	movcc	r3, r2
 80083d8:	60e3      	str	r3, [r4, #12]
 80083da:	f8d8 3000 	ldr.w	r3, [r8]
 80083de:	4433      	add	r3, r6
 80083e0:	f8c8 3000 	str.w	r3, [r8]
 80083e4:	1bad      	subs	r5, r5, r6
	for ( ;  btw;							/* Repeat until all data written */
 80083e6:	b35d      	cbz	r5, 8008440 <f_write+0x200>
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 80083e8:	69a1      	ldr	r1, [r4, #24]
 80083ea:	9a03      	ldr	r2, [sp, #12]
 80083ec:	8996      	ldrh	r6, [r2, #12]
 80083ee:	fbb1 f3f6 	udiv	r3, r1, r6
 80083f2:	fb06 1313 	mls	r3, r6, r3, r1
 80083f6:	2b00      	cmp	r3, #0
 80083f8:	d1d0      	bne.n	800839c <f_write+0x15c>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 80083fa:	fbb1 f6f6 	udiv	r6, r1, r6
 80083fe:	8953      	ldrh	r3, [r2, #10]
 8008400:	3b01      	subs	r3, #1
			if (csect == 0) {				/* On the cluster boundary? */
 8008402:	401e      	ands	r6, r3
 8008404:	f47f af4d 	bne.w	80082a2 <f_write+0x62>
				if (fp->fptr == 0) {		/* On the top of the file? */
 8008408:	2900      	cmp	r1, #0
 800840a:	f47f af38 	bne.w	800827e <f_write+0x3e>
					clst = fp->obj.sclust;	/* Follow from the origin */
 800840e:	68a0      	ldr	r0, [r4, #8]
					if (clst == 0) {		/* If no cluster is allocated, */
 8008410:	2800      	cmp	r0, #0
 8008412:	f47f af3a 	bne.w	800828a <f_write+0x4a>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 8008416:	4620      	mov	r0, r4
 8008418:	f7ff f96b 	bl	80076f2 <create_chain>
 800841c:	e735      	b.n	800828a <f_write+0x4a>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 800841e:	2301      	movs	r3, #1
 8008420:	464a      	mov	r2, r9
 8008422:	f104 0130 	add.w	r1, r4, #48	; 0x30
 8008426:	f89b 0001 	ldrb.w	r0, [fp, #1]
 800842a:	f7fe fb45 	bl	8006ab8 <disk_read>
				fp->fptr < fp->obj.objsize &&
 800842e:	2800      	cmp	r0, #0
 8008430:	d0b2      	beq.n	8008398 <f_write+0x158>
					ABORT(fs, FR_DISK_ERR);
 8008432:	f04f 0a01 	mov.w	sl, #1
 8008436:	f884 a015 	strb.w	sl, [r4, #21]
 800843a:	f8cd a004 	str.w	sl, [sp, #4]
 800843e:	e75a      	b.n	80082f6 <f_write+0xb6>
	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 8008440:	7d23      	ldrb	r3, [r4, #20]
 8008442:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008446:	7523      	strb	r3, [r4, #20]
	LEAVE_FF(fs, FR_OK);
 8008448:	e755      	b.n	80082f6 <f_write+0xb6>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 800844a:	2307      	movs	r3, #7
 800844c:	9301      	str	r3, [sp, #4]
 800844e:	e752      	b.n	80082f6 <f_write+0xb6>

08008450 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8008450:	b570      	push	{r4, r5, r6, lr}
 8008452:	b082      	sub	sp, #8
 8008454:	4604      	mov	r4, r0
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8008456:	a901      	add	r1, sp, #4
 8008458:	f7fe fd7f 	bl	8006f5a <validate>
	if (res == FR_OK) {
 800845c:	b970      	cbnz	r0, 800847c <f_sync+0x2c>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800845e:	7d23      	ldrb	r3, [r4, #20]
 8008460:	f013 0f40 	tst.w	r3, #64	; 0x40
 8008464:	d00a      	beq.n	800847c <f_sync+0x2c>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8008466:	f013 0f80 	tst.w	r3, #128	; 0x80
 800846a:	d109      	bne.n	8008480 <f_sync+0x30>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
				fp->flag &= (BYTE)~FA_DIRTY;
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800846c:	f7fe faee 	bl	8006a4c <get_fattime>
 8008470:	4605      	mov	r5, r0
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 8008472:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8008474:	9801      	ldr	r0, [sp, #4]
 8008476:	f7fe fdbd 	bl	8006ff4 <move_window>
				if (res == FR_OK) {
 800847a:	b178      	cbz	r0, 800849c <f_sync+0x4c>
			}
		}
	}

	LEAVE_FF(fs, res);
}
 800847c:	b002      	add	sp, #8
 800847e:	bd70      	pop	{r4, r5, r6, pc}
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8008480:	2301      	movs	r3, #1
 8008482:	6a22      	ldr	r2, [r4, #32]
 8008484:	f104 0130 	add.w	r1, r4, #48	; 0x30
 8008488:	9801      	ldr	r0, [sp, #4]
 800848a:	7840      	ldrb	r0, [r0, #1]
 800848c:	f7fe fb20 	bl	8006ad0 <disk_write>
 8008490:	bb40      	cbnz	r0, 80084e4 <f_sync+0x94>
				fp->flag &= (BYTE)~FA_DIRTY;
 8008492:	7d23      	ldrb	r3, [r4, #20]
 8008494:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008498:	7523      	strb	r3, [r4, #20]
 800849a:	e7e7      	b.n	800846c <f_sync+0x1c>
					dir = fp->dir_ptr;
 800849c:	6aa6      	ldr	r6, [r4, #40]	; 0x28
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800849e:	7af3      	ldrb	r3, [r6, #11]
 80084a0:	f043 0320 	orr.w	r3, r3, #32
 80084a4:	72f3      	strb	r3, [r6, #11]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 80084a6:	68a2      	ldr	r2, [r4, #8]
 80084a8:	4631      	mov	r1, r6
 80084aa:	6820      	ldr	r0, [r4, #0]
 80084ac:	f7fe fc76 	bl	8006d9c <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 80084b0:	68e1      	ldr	r1, [r4, #12]
 80084b2:	f106 001c 	add.w	r0, r6, #28
 80084b6:	f7fe fb37 	bl	8006b28 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 80084ba:	4629      	mov	r1, r5
 80084bc:	f106 0016 	add.w	r0, r6, #22
 80084c0:	f7fe fb32 	bl	8006b28 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 80084c4:	2100      	movs	r1, #0
 80084c6:	f106 0012 	add.w	r0, r6, #18
 80084ca:	f7fe fb29 	bl	8006b20 <st_word>
					fs->wflag = 1;
 80084ce:	9b01      	ldr	r3, [sp, #4]
 80084d0:	2201      	movs	r2, #1
 80084d2:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 80084d4:	9801      	ldr	r0, [sp, #4]
 80084d6:	f7ff fa65 	bl	80079a4 <sync_fs>
					fp->flag &= (BYTE)~FA_MODIFIED;
 80084da:	7d23      	ldrb	r3, [r4, #20]
 80084dc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80084e0:	7523      	strb	r3, [r4, #20]
 80084e2:	e7cb      	b.n	800847c <f_sync+0x2c>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 80084e4:	2001      	movs	r0, #1
 80084e6:	e7c9      	b.n	800847c <f_sync+0x2c>

080084e8 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 80084e8:	b510      	push	{r4, lr}
 80084ea:	b082      	sub	sp, #8
 80084ec:	4604      	mov	r4, r0
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 80084ee:	f7ff ffaf 	bl	8008450 <f_sync>
	if (res == FR_OK)
 80084f2:	b108      	cbz	r0, 80084f8 <f_close+0x10>
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
}
 80084f4:	b002      	add	sp, #8
 80084f6:	bd10      	pop	{r4, pc}
		res = validate(&fp->obj, &fs);	/* Lock volume */
 80084f8:	a901      	add	r1, sp, #4
 80084fa:	4620      	mov	r0, r4
 80084fc:	f7fe fd2d 	bl	8006f5a <validate>
		if (res == FR_OK) {
 8008500:	2800      	cmp	r0, #0
 8008502:	d1f7      	bne.n	80084f4 <f_close+0xc>
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 8008504:	6920      	ldr	r0, [r4, #16]
 8008506:	f7fe fbd9 	bl	8006cbc <dec_lock>
			if (res == FR_OK)
 800850a:	2800      	cmp	r0, #0
 800850c:	d1f2      	bne.n	80084f4 <f_close+0xc>
				fp->obj.fs = 0;			/* Invalidate file object */
 800850e:	6020      	str	r0, [r4, #0]
 8008510:	e7f0      	b.n	80084f4 <f_close+0xc>
	...

08008514 <FATFS_LinkDriverEx>:
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
  uint8_t ret = 1;
  uint8_t DiskNum = 0;

  if(disk.nbr < _VOLUMES)
 8008514:	4b13      	ldr	r3, [pc, #76]	; (8008564 <FATFS_LinkDriverEx+0x50>)
 8008516:	7a5b      	ldrb	r3, [r3, #9]
 8008518:	bb13      	cbnz	r3, 8008560 <FATFS_LinkDriverEx+0x4c>
{
 800851a:	b510      	push	{r4, lr}
 800851c:	4604      	mov	r4, r0
 800851e:	f003 00ff 	and.w	r0, r3, #255	; 0xff
  {
    disk.is_initialized[disk.nbr] = 0;
 8008522:	4b10      	ldr	r3, [pc, #64]	; (8008564 <FATFS_LinkDriverEx+0x50>)
 8008524:	f893 c009 	ldrb.w	ip, [r3, #9]
 8008528:	fa5f fc8c 	uxtb.w	ip, ip
 800852c:	f04f 0e00 	mov.w	lr, #0
 8008530:	f803 e00c 	strb.w	lr, [r3, ip]
    disk.drv[disk.nbr] = drv;
 8008534:	f893 c009 	ldrb.w	ip, [r3, #9]
 8008538:	eb03 0c8c 	add.w	ip, r3, ip, lsl #2
 800853c:	f8cc 4004 	str.w	r4, [ip, #4]
    disk.lun[disk.nbr] = lun;
 8008540:	7a5c      	ldrb	r4, [r3, #9]
 8008542:	441c      	add	r4, r3
 8008544:	7222      	strb	r2, [r4, #8]
    DiskNum = disk.nbr++;
 8008546:	7a5a      	ldrb	r2, [r3, #9]
 8008548:	1c54      	adds	r4, r2, #1
 800854a:	b2e4      	uxtb	r4, r4
 800854c:	725c      	strb	r4, [r3, #9]
    path[0] = DiskNum + '0';
 800854e:	3230      	adds	r2, #48	; 0x30
 8008550:	700a      	strb	r2, [r1, #0]
    path[1] = ':';
 8008552:	233a      	movs	r3, #58	; 0x3a
 8008554:	704b      	strb	r3, [r1, #1]
    path[2] = '/';
 8008556:	232f      	movs	r3, #47	; 0x2f
 8008558:	708b      	strb	r3, [r1, #2]
    path[3] = 0;
 800855a:	f881 e003 	strb.w	lr, [r1, #3]
    ret = 0;
  }

  return ret;
}
 800855e:	bd10      	pop	{r4, pc}
  uint8_t ret = 1;
 8008560:	2001      	movs	r0, #1
}
 8008562:	4770      	bx	lr
 8008564:	2001708c 	.word	0x2001708c

08008568 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8008568:	b508      	push	{r3, lr}
  return FATFS_LinkDriverEx(drv, path, 0);
 800856a:	2200      	movs	r2, #0
 800856c:	f7ff ffd2 	bl	8008514 <FATFS_LinkDriverEx>
}
 8008570:	bd08      	pop	{r3, pc}
	...

08008574 <ff_convert>:
)
{
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 8008574:	287f      	cmp	r0, #127	; 0x7f
 8008576:	d917      	bls.n	80085a8 <ff_convert+0x34>
		c = chr;

	} else {
		if (dir) {		/* OEM code to Unicode */
 8008578:	b131      	cbz	r1, 8008588 <ff_convert+0x14>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 800857a:	28ff      	cmp	r0, #255	; 0xff
 800857c:	d813      	bhi.n	80085a6 <ff_convert+0x32>
 800857e:	3880      	subs	r0, #128	; 0x80
 8008580:	4b0a      	ldr	r3, [pc, #40]	; (80085ac <ff_convert+0x38>)
 8008582:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
 8008586:	4770      	bx	lr

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 8008588:	2300      	movs	r3, #0
 800858a:	2b7f      	cmp	r3, #127	; 0x7f
 800858c:	d807      	bhi.n	800859e <ff_convert+0x2a>
				if (chr == Tbl[c]) break;
 800858e:	4a07      	ldr	r2, [pc, #28]	; (80085ac <ff_convert+0x38>)
 8008590:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8008594:	4282      	cmp	r2, r0
 8008596:	d002      	beq.n	800859e <ff_convert+0x2a>
			for (c = 0; c < 0x80; c++) {
 8008598:	3301      	adds	r3, #1
 800859a:	b29b      	uxth	r3, r3
 800859c:	e7f5      	b.n	800858a <ff_convert+0x16>
			}
			c = (c + 0x80) & 0xFF;
 800859e:	f103 0080 	add.w	r0, r3, #128	; 0x80
 80085a2:	b2c0      	uxtb	r0, r0
 80085a4:	4770      	bx	lr
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 80085a6:	2000      	movs	r0, #0
		}
	}

	return c;
}
 80085a8:	4770      	bx	lr
 80085aa:	bf00      	nop
 80085ac:	08009128 	.word	0x08009128

080085b0 <ff_wtoupper>:
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 80085b0:	f5b0 5f80 	cmp.w	r0, #4096	; 0x1000
 80085b4:	d207      	bcs.n	80085c6 <ff_wtoupper+0x16>
 80085b6:	4b23      	ldr	r3, [pc, #140]	; (8008644 <ff_wtoupper+0x94>)
	for (;;) {
		bc = *p++;								/* Get block base */
 80085b8:	881a      	ldrh	r2, [r3, #0]
		if (!bc || chr < bc) break;
 80085ba:	2a00      	cmp	r2, #0
 80085bc:	d041      	beq.n	8008642 <ff_wtoupper+0x92>
 80085be:	4290      	cmp	r0, r2
 80085c0:	d33f      	bcc.n	8008642 <ff_wtoupper+0x92>
{
 80085c2:	b510      	push	{r4, lr}
 80085c4:	e006      	b.n	80085d4 <ff_wtoupper+0x24>
	p = chr < 0x1000 ? cvt1 : cvt2;
 80085c6:	4b20      	ldr	r3, [pc, #128]	; (8008648 <ff_wtoupper+0x98>)
 80085c8:	e7f6      	b.n	80085b8 <ff_wtoupper+0x8>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 80085ca:	4673      	mov	r3, lr
		bc = *p++;								/* Get block base */
 80085cc:	881a      	ldrh	r2, [r3, #0]
		if (!bc || chr < bc) break;
 80085ce:	b1da      	cbz	r2, 8008608 <ff_wtoupper+0x58>
 80085d0:	4290      	cmp	r0, r2
 80085d2:	d319      	bcc.n	8008608 <ff_wtoupper+0x58>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 80085d4:	f103 0e04 	add.w	lr, r3, #4
 80085d8:	885b      	ldrh	r3, [r3, #2]
 80085da:	0a19      	lsrs	r1, r3, #8
 80085dc:	b2db      	uxtb	r3, r3
		if (chr < bc + nc) {	/* In the block? */
 80085de:	eb03 0c02 	add.w	ip, r3, r2
 80085e2:	4560      	cmp	r0, ip
 80085e4:	db04      	blt.n	80085f0 <ff_wtoupper+0x40>
			case 7: chr -= 80; break;				/* Shift -80 */
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
			}
			break;
		}
		if (!cmd) p += nc;
 80085e6:	2900      	cmp	r1, #0
 80085e8:	d1ef      	bne.n	80085ca <ff_wtoupper+0x1a>
 80085ea:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 80085ee:	e7ed      	b.n	80085cc <ff_wtoupper+0x1c>
			switch (cmd) {
 80085f0:	2908      	cmp	r1, #8
 80085f2:	d809      	bhi.n	8008608 <ff_wtoupper+0x58>
 80085f4:	e8df f001 	tbb	[pc, r1]
 80085f8:	120f0905 	.word	0x120f0905
 80085fc:	1e1b1815 	.word	0x1e1b1815
 8008600:	21          	.byte	0x21
 8008601:	00          	.byte	0x00
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 8008602:	1a82      	subs	r2, r0, r2
 8008604:	f83e 0012 	ldrh.w	r0, [lr, r2, lsl #1]
	}

	return chr;
}
 8008608:	bd10      	pop	{r4, pc}
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 800860a:	1a83      	subs	r3, r0, r2
 800860c:	f003 0301 	and.w	r3, r3, #1
 8008610:	1ac0      	subs	r0, r0, r3
 8008612:	b280      	uxth	r0, r0
 8008614:	e7f8      	b.n	8008608 <ff_wtoupper+0x58>
			case 2: chr -= 16; break;				/* Shift -16 */
 8008616:	3810      	subs	r0, #16
 8008618:	b280      	uxth	r0, r0
 800861a:	e7f5      	b.n	8008608 <ff_wtoupper+0x58>
			case 3:	chr -= 32; break;				/* Shift -32 */
 800861c:	3820      	subs	r0, #32
 800861e:	b280      	uxth	r0, r0
 8008620:	e7f2      	b.n	8008608 <ff_wtoupper+0x58>
			case 4:	chr -= 48; break;				/* Shift -48 */
 8008622:	3830      	subs	r0, #48	; 0x30
 8008624:	b280      	uxth	r0, r0
 8008626:	e7ef      	b.n	8008608 <ff_wtoupper+0x58>
			case 5:	chr -= 26; break;				/* Shift -26 */
 8008628:	381a      	subs	r0, #26
 800862a:	b280      	uxth	r0, r0
 800862c:	e7ec      	b.n	8008608 <ff_wtoupper+0x58>
			case 6:	chr += 8; break;				/* Shift +8 */
 800862e:	3008      	adds	r0, #8
 8008630:	b280      	uxth	r0, r0
 8008632:	e7e9      	b.n	8008608 <ff_wtoupper+0x58>
			case 7: chr -= 80; break;				/* Shift -80 */
 8008634:	3850      	subs	r0, #80	; 0x50
 8008636:	b280      	uxth	r0, r0
 8008638:	e7e6      	b.n	8008608 <ff_wtoupper+0x58>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 800863a:	f5a0 50e3 	sub.w	r0, r0, #7264	; 0x1c60
 800863e:	b280      	uxth	r0, r0
 8008640:	e7e2      	b.n	8008608 <ff_wtoupper+0x58>
}
 8008642:	4770      	bx	lr
 8008644:	08009228 	.word	0x08009228
 8008648:	0800941c 	.word	0x0800941c

0800864c <__errno>:
 800864c:	4b01      	ldr	r3, [pc, #4]	; (8008654 <__errno+0x8>)
 800864e:	6818      	ldr	r0, [r3, #0]
 8008650:	4770      	bx	lr
 8008652:	bf00      	nop
 8008654:	200000e4 	.word	0x200000e4

08008658 <__libc_init_array>:
 8008658:	b570      	push	{r4, r5, r6, lr}
 800865a:	4d0d      	ldr	r5, [pc, #52]	; (8008690 <__libc_init_array+0x38>)
 800865c:	4c0d      	ldr	r4, [pc, #52]	; (8008694 <__libc_init_array+0x3c>)
 800865e:	1b64      	subs	r4, r4, r5
 8008660:	10a4      	asrs	r4, r4, #2
 8008662:	2600      	movs	r6, #0
 8008664:	42a6      	cmp	r6, r4
 8008666:	d109      	bne.n	800867c <__libc_init_array+0x24>
 8008668:	4d0b      	ldr	r5, [pc, #44]	; (8008698 <__libc_init_array+0x40>)
 800866a:	4c0c      	ldr	r4, [pc, #48]	; (800869c <__libc_init_array+0x44>)
 800866c:	f000 fc8e 	bl	8008f8c <_init>
 8008670:	1b64      	subs	r4, r4, r5
 8008672:	10a4      	asrs	r4, r4, #2
 8008674:	2600      	movs	r6, #0
 8008676:	42a6      	cmp	r6, r4
 8008678:	d105      	bne.n	8008686 <__libc_init_array+0x2e>
 800867a:	bd70      	pop	{r4, r5, r6, pc}
 800867c:	f855 3b04 	ldr.w	r3, [r5], #4
 8008680:	4798      	blx	r3
 8008682:	3601      	adds	r6, #1
 8008684:	e7ee      	b.n	8008664 <__libc_init_array+0xc>
 8008686:	f855 3b04 	ldr.w	r3, [r5], #4
 800868a:	4798      	blx	r3
 800868c:	3601      	adds	r6, #1
 800868e:	e7f2      	b.n	8008676 <__libc_init_array+0x1e>
 8008690:	08009514 	.word	0x08009514
 8008694:	08009514 	.word	0x08009514
 8008698:	08009514 	.word	0x08009514
 800869c:	08009518 	.word	0x08009518

080086a0 <memset>:
 80086a0:	4402      	add	r2, r0
 80086a2:	4603      	mov	r3, r0
 80086a4:	4293      	cmp	r3, r2
 80086a6:	d100      	bne.n	80086aa <memset+0xa>
 80086a8:	4770      	bx	lr
 80086aa:	f803 1b01 	strb.w	r1, [r3], #1
 80086ae:	e7f9      	b.n	80086a4 <memset+0x4>

080086b0 <siprintf>:
 80086b0:	b40e      	push	{r1, r2, r3}
 80086b2:	b500      	push	{lr}
 80086b4:	b09c      	sub	sp, #112	; 0x70
 80086b6:	ab1d      	add	r3, sp, #116	; 0x74
 80086b8:	9002      	str	r0, [sp, #8]
 80086ba:	9006      	str	r0, [sp, #24]
 80086bc:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80086c0:	4809      	ldr	r0, [pc, #36]	; (80086e8 <siprintf+0x38>)
 80086c2:	9107      	str	r1, [sp, #28]
 80086c4:	9104      	str	r1, [sp, #16]
 80086c6:	4909      	ldr	r1, [pc, #36]	; (80086ec <siprintf+0x3c>)
 80086c8:	f853 2b04 	ldr.w	r2, [r3], #4
 80086cc:	9105      	str	r1, [sp, #20]
 80086ce:	6800      	ldr	r0, [r0, #0]
 80086d0:	9301      	str	r3, [sp, #4]
 80086d2:	a902      	add	r1, sp, #8
 80086d4:	f000 f868 	bl	80087a8 <_svfiprintf_r>
 80086d8:	9b02      	ldr	r3, [sp, #8]
 80086da:	2200      	movs	r2, #0
 80086dc:	701a      	strb	r2, [r3, #0]
 80086de:	b01c      	add	sp, #112	; 0x70
 80086e0:	f85d eb04 	ldr.w	lr, [sp], #4
 80086e4:	b003      	add	sp, #12
 80086e6:	4770      	bx	lr
 80086e8:	200000e4 	.word	0x200000e4
 80086ec:	ffff0208 	.word	0xffff0208

080086f0 <__ssputs_r>:
 80086f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80086f4:	688e      	ldr	r6, [r1, #8]
 80086f6:	429e      	cmp	r6, r3
 80086f8:	4682      	mov	sl, r0
 80086fa:	460c      	mov	r4, r1
 80086fc:	4690      	mov	r8, r2
 80086fe:	461f      	mov	r7, r3
 8008700:	d838      	bhi.n	8008774 <__ssputs_r+0x84>
 8008702:	898a      	ldrh	r2, [r1, #12]
 8008704:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008708:	d032      	beq.n	8008770 <__ssputs_r+0x80>
 800870a:	6825      	ldr	r5, [r4, #0]
 800870c:	6909      	ldr	r1, [r1, #16]
 800870e:	eba5 0901 	sub.w	r9, r5, r1
 8008712:	6965      	ldr	r5, [r4, #20]
 8008714:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008718:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800871c:	3301      	adds	r3, #1
 800871e:	444b      	add	r3, r9
 8008720:	106d      	asrs	r5, r5, #1
 8008722:	429d      	cmp	r5, r3
 8008724:	bf38      	it	cc
 8008726:	461d      	movcc	r5, r3
 8008728:	0553      	lsls	r3, r2, #21
 800872a:	d531      	bpl.n	8008790 <__ssputs_r+0xa0>
 800872c:	4629      	mov	r1, r5
 800872e:	f000 fb63 	bl	8008df8 <_malloc_r>
 8008732:	4606      	mov	r6, r0
 8008734:	b950      	cbnz	r0, 800874c <__ssputs_r+0x5c>
 8008736:	230c      	movs	r3, #12
 8008738:	f8ca 3000 	str.w	r3, [sl]
 800873c:	89a3      	ldrh	r3, [r4, #12]
 800873e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008742:	81a3      	strh	r3, [r4, #12]
 8008744:	f04f 30ff 	mov.w	r0, #4294967295
 8008748:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800874c:	6921      	ldr	r1, [r4, #16]
 800874e:	464a      	mov	r2, r9
 8008750:	f000 fabe 	bl	8008cd0 <memcpy>
 8008754:	89a3      	ldrh	r3, [r4, #12]
 8008756:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800875a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800875e:	81a3      	strh	r3, [r4, #12]
 8008760:	6126      	str	r6, [r4, #16]
 8008762:	6165      	str	r5, [r4, #20]
 8008764:	444e      	add	r6, r9
 8008766:	eba5 0509 	sub.w	r5, r5, r9
 800876a:	6026      	str	r6, [r4, #0]
 800876c:	60a5      	str	r5, [r4, #8]
 800876e:	463e      	mov	r6, r7
 8008770:	42be      	cmp	r6, r7
 8008772:	d900      	bls.n	8008776 <__ssputs_r+0x86>
 8008774:	463e      	mov	r6, r7
 8008776:	6820      	ldr	r0, [r4, #0]
 8008778:	4632      	mov	r2, r6
 800877a:	4641      	mov	r1, r8
 800877c:	f000 fab6 	bl	8008cec <memmove>
 8008780:	68a3      	ldr	r3, [r4, #8]
 8008782:	1b9b      	subs	r3, r3, r6
 8008784:	60a3      	str	r3, [r4, #8]
 8008786:	6823      	ldr	r3, [r4, #0]
 8008788:	4433      	add	r3, r6
 800878a:	6023      	str	r3, [r4, #0]
 800878c:	2000      	movs	r0, #0
 800878e:	e7db      	b.n	8008748 <__ssputs_r+0x58>
 8008790:	462a      	mov	r2, r5
 8008792:	f000 fba5 	bl	8008ee0 <_realloc_r>
 8008796:	4606      	mov	r6, r0
 8008798:	2800      	cmp	r0, #0
 800879a:	d1e1      	bne.n	8008760 <__ssputs_r+0x70>
 800879c:	6921      	ldr	r1, [r4, #16]
 800879e:	4650      	mov	r0, sl
 80087a0:	f000 fabe 	bl	8008d20 <_free_r>
 80087a4:	e7c7      	b.n	8008736 <__ssputs_r+0x46>
	...

080087a8 <_svfiprintf_r>:
 80087a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80087ac:	4698      	mov	r8, r3
 80087ae:	898b      	ldrh	r3, [r1, #12]
 80087b0:	061b      	lsls	r3, r3, #24
 80087b2:	b09d      	sub	sp, #116	; 0x74
 80087b4:	4607      	mov	r7, r0
 80087b6:	460d      	mov	r5, r1
 80087b8:	4614      	mov	r4, r2
 80087ba:	d50e      	bpl.n	80087da <_svfiprintf_r+0x32>
 80087bc:	690b      	ldr	r3, [r1, #16]
 80087be:	b963      	cbnz	r3, 80087da <_svfiprintf_r+0x32>
 80087c0:	2140      	movs	r1, #64	; 0x40
 80087c2:	f000 fb19 	bl	8008df8 <_malloc_r>
 80087c6:	6028      	str	r0, [r5, #0]
 80087c8:	6128      	str	r0, [r5, #16]
 80087ca:	b920      	cbnz	r0, 80087d6 <_svfiprintf_r+0x2e>
 80087cc:	230c      	movs	r3, #12
 80087ce:	603b      	str	r3, [r7, #0]
 80087d0:	f04f 30ff 	mov.w	r0, #4294967295
 80087d4:	e0d1      	b.n	800897a <_svfiprintf_r+0x1d2>
 80087d6:	2340      	movs	r3, #64	; 0x40
 80087d8:	616b      	str	r3, [r5, #20]
 80087da:	2300      	movs	r3, #0
 80087dc:	9309      	str	r3, [sp, #36]	; 0x24
 80087de:	2320      	movs	r3, #32
 80087e0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80087e4:	f8cd 800c 	str.w	r8, [sp, #12]
 80087e8:	2330      	movs	r3, #48	; 0x30
 80087ea:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8008994 <_svfiprintf_r+0x1ec>
 80087ee:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80087f2:	f04f 0901 	mov.w	r9, #1
 80087f6:	4623      	mov	r3, r4
 80087f8:	469a      	mov	sl, r3
 80087fa:	f813 2b01 	ldrb.w	r2, [r3], #1
 80087fe:	b10a      	cbz	r2, 8008804 <_svfiprintf_r+0x5c>
 8008800:	2a25      	cmp	r2, #37	; 0x25
 8008802:	d1f9      	bne.n	80087f8 <_svfiprintf_r+0x50>
 8008804:	ebba 0b04 	subs.w	fp, sl, r4
 8008808:	d00b      	beq.n	8008822 <_svfiprintf_r+0x7a>
 800880a:	465b      	mov	r3, fp
 800880c:	4622      	mov	r2, r4
 800880e:	4629      	mov	r1, r5
 8008810:	4638      	mov	r0, r7
 8008812:	f7ff ff6d 	bl	80086f0 <__ssputs_r>
 8008816:	3001      	adds	r0, #1
 8008818:	f000 80aa 	beq.w	8008970 <_svfiprintf_r+0x1c8>
 800881c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800881e:	445a      	add	r2, fp
 8008820:	9209      	str	r2, [sp, #36]	; 0x24
 8008822:	f89a 3000 	ldrb.w	r3, [sl]
 8008826:	2b00      	cmp	r3, #0
 8008828:	f000 80a2 	beq.w	8008970 <_svfiprintf_r+0x1c8>
 800882c:	2300      	movs	r3, #0
 800882e:	f04f 32ff 	mov.w	r2, #4294967295
 8008832:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008836:	f10a 0a01 	add.w	sl, sl, #1
 800883a:	9304      	str	r3, [sp, #16]
 800883c:	9307      	str	r3, [sp, #28]
 800883e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008842:	931a      	str	r3, [sp, #104]	; 0x68
 8008844:	4654      	mov	r4, sl
 8008846:	2205      	movs	r2, #5
 8008848:	f814 1b01 	ldrb.w	r1, [r4], #1
 800884c:	4851      	ldr	r0, [pc, #324]	; (8008994 <_svfiprintf_r+0x1ec>)
 800884e:	f7f7 fccf 	bl	80001f0 <memchr>
 8008852:	9a04      	ldr	r2, [sp, #16]
 8008854:	b9d8      	cbnz	r0, 800888e <_svfiprintf_r+0xe6>
 8008856:	06d0      	lsls	r0, r2, #27
 8008858:	bf44      	itt	mi
 800885a:	2320      	movmi	r3, #32
 800885c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008860:	0711      	lsls	r1, r2, #28
 8008862:	bf44      	itt	mi
 8008864:	232b      	movmi	r3, #43	; 0x2b
 8008866:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800886a:	f89a 3000 	ldrb.w	r3, [sl]
 800886e:	2b2a      	cmp	r3, #42	; 0x2a
 8008870:	d015      	beq.n	800889e <_svfiprintf_r+0xf6>
 8008872:	9a07      	ldr	r2, [sp, #28]
 8008874:	4654      	mov	r4, sl
 8008876:	2000      	movs	r0, #0
 8008878:	f04f 0c0a 	mov.w	ip, #10
 800887c:	4621      	mov	r1, r4
 800887e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008882:	3b30      	subs	r3, #48	; 0x30
 8008884:	2b09      	cmp	r3, #9
 8008886:	d94e      	bls.n	8008926 <_svfiprintf_r+0x17e>
 8008888:	b1b0      	cbz	r0, 80088b8 <_svfiprintf_r+0x110>
 800888a:	9207      	str	r2, [sp, #28]
 800888c:	e014      	b.n	80088b8 <_svfiprintf_r+0x110>
 800888e:	eba0 0308 	sub.w	r3, r0, r8
 8008892:	fa09 f303 	lsl.w	r3, r9, r3
 8008896:	4313      	orrs	r3, r2
 8008898:	9304      	str	r3, [sp, #16]
 800889a:	46a2      	mov	sl, r4
 800889c:	e7d2      	b.n	8008844 <_svfiprintf_r+0x9c>
 800889e:	9b03      	ldr	r3, [sp, #12]
 80088a0:	1d19      	adds	r1, r3, #4
 80088a2:	681b      	ldr	r3, [r3, #0]
 80088a4:	9103      	str	r1, [sp, #12]
 80088a6:	2b00      	cmp	r3, #0
 80088a8:	bfbb      	ittet	lt
 80088aa:	425b      	neglt	r3, r3
 80088ac:	f042 0202 	orrlt.w	r2, r2, #2
 80088b0:	9307      	strge	r3, [sp, #28]
 80088b2:	9307      	strlt	r3, [sp, #28]
 80088b4:	bfb8      	it	lt
 80088b6:	9204      	strlt	r2, [sp, #16]
 80088b8:	7823      	ldrb	r3, [r4, #0]
 80088ba:	2b2e      	cmp	r3, #46	; 0x2e
 80088bc:	d10c      	bne.n	80088d8 <_svfiprintf_r+0x130>
 80088be:	7863      	ldrb	r3, [r4, #1]
 80088c0:	2b2a      	cmp	r3, #42	; 0x2a
 80088c2:	d135      	bne.n	8008930 <_svfiprintf_r+0x188>
 80088c4:	9b03      	ldr	r3, [sp, #12]
 80088c6:	1d1a      	adds	r2, r3, #4
 80088c8:	681b      	ldr	r3, [r3, #0]
 80088ca:	9203      	str	r2, [sp, #12]
 80088cc:	2b00      	cmp	r3, #0
 80088ce:	bfb8      	it	lt
 80088d0:	f04f 33ff 	movlt.w	r3, #4294967295
 80088d4:	3402      	adds	r4, #2
 80088d6:	9305      	str	r3, [sp, #20]
 80088d8:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80089a4 <_svfiprintf_r+0x1fc>
 80088dc:	7821      	ldrb	r1, [r4, #0]
 80088de:	2203      	movs	r2, #3
 80088e0:	4650      	mov	r0, sl
 80088e2:	f7f7 fc85 	bl	80001f0 <memchr>
 80088e6:	b140      	cbz	r0, 80088fa <_svfiprintf_r+0x152>
 80088e8:	2340      	movs	r3, #64	; 0x40
 80088ea:	eba0 000a 	sub.w	r0, r0, sl
 80088ee:	fa03 f000 	lsl.w	r0, r3, r0
 80088f2:	9b04      	ldr	r3, [sp, #16]
 80088f4:	4303      	orrs	r3, r0
 80088f6:	3401      	adds	r4, #1
 80088f8:	9304      	str	r3, [sp, #16]
 80088fa:	f814 1b01 	ldrb.w	r1, [r4], #1
 80088fe:	4826      	ldr	r0, [pc, #152]	; (8008998 <_svfiprintf_r+0x1f0>)
 8008900:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008904:	2206      	movs	r2, #6
 8008906:	f7f7 fc73 	bl	80001f0 <memchr>
 800890a:	2800      	cmp	r0, #0
 800890c:	d038      	beq.n	8008980 <_svfiprintf_r+0x1d8>
 800890e:	4b23      	ldr	r3, [pc, #140]	; (800899c <_svfiprintf_r+0x1f4>)
 8008910:	bb1b      	cbnz	r3, 800895a <_svfiprintf_r+0x1b2>
 8008912:	9b03      	ldr	r3, [sp, #12]
 8008914:	3307      	adds	r3, #7
 8008916:	f023 0307 	bic.w	r3, r3, #7
 800891a:	3308      	adds	r3, #8
 800891c:	9303      	str	r3, [sp, #12]
 800891e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008920:	4433      	add	r3, r6
 8008922:	9309      	str	r3, [sp, #36]	; 0x24
 8008924:	e767      	b.n	80087f6 <_svfiprintf_r+0x4e>
 8008926:	fb0c 3202 	mla	r2, ip, r2, r3
 800892a:	460c      	mov	r4, r1
 800892c:	2001      	movs	r0, #1
 800892e:	e7a5      	b.n	800887c <_svfiprintf_r+0xd4>
 8008930:	2300      	movs	r3, #0
 8008932:	3401      	adds	r4, #1
 8008934:	9305      	str	r3, [sp, #20]
 8008936:	4619      	mov	r1, r3
 8008938:	f04f 0c0a 	mov.w	ip, #10
 800893c:	4620      	mov	r0, r4
 800893e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008942:	3a30      	subs	r2, #48	; 0x30
 8008944:	2a09      	cmp	r2, #9
 8008946:	d903      	bls.n	8008950 <_svfiprintf_r+0x1a8>
 8008948:	2b00      	cmp	r3, #0
 800894a:	d0c5      	beq.n	80088d8 <_svfiprintf_r+0x130>
 800894c:	9105      	str	r1, [sp, #20]
 800894e:	e7c3      	b.n	80088d8 <_svfiprintf_r+0x130>
 8008950:	fb0c 2101 	mla	r1, ip, r1, r2
 8008954:	4604      	mov	r4, r0
 8008956:	2301      	movs	r3, #1
 8008958:	e7f0      	b.n	800893c <_svfiprintf_r+0x194>
 800895a:	ab03      	add	r3, sp, #12
 800895c:	9300      	str	r3, [sp, #0]
 800895e:	462a      	mov	r2, r5
 8008960:	4b0f      	ldr	r3, [pc, #60]	; (80089a0 <_svfiprintf_r+0x1f8>)
 8008962:	a904      	add	r1, sp, #16
 8008964:	4638      	mov	r0, r7
 8008966:	f3af 8000 	nop.w
 800896a:	1c42      	adds	r2, r0, #1
 800896c:	4606      	mov	r6, r0
 800896e:	d1d6      	bne.n	800891e <_svfiprintf_r+0x176>
 8008970:	89ab      	ldrh	r3, [r5, #12]
 8008972:	065b      	lsls	r3, r3, #25
 8008974:	f53f af2c 	bmi.w	80087d0 <_svfiprintf_r+0x28>
 8008978:	9809      	ldr	r0, [sp, #36]	; 0x24
 800897a:	b01d      	add	sp, #116	; 0x74
 800897c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008980:	ab03      	add	r3, sp, #12
 8008982:	9300      	str	r3, [sp, #0]
 8008984:	462a      	mov	r2, r5
 8008986:	4b06      	ldr	r3, [pc, #24]	; (80089a0 <_svfiprintf_r+0x1f8>)
 8008988:	a904      	add	r1, sp, #16
 800898a:	4638      	mov	r0, r7
 800898c:	f000 f87a 	bl	8008a84 <_printf_i>
 8008990:	e7eb      	b.n	800896a <_svfiprintf_r+0x1c2>
 8008992:	bf00      	nop
 8008994:	080094d8 	.word	0x080094d8
 8008998:	080094e2 	.word	0x080094e2
 800899c:	00000000 	.word	0x00000000
 80089a0:	080086f1 	.word	0x080086f1
 80089a4:	080094de 	.word	0x080094de

080089a8 <_printf_common>:
 80089a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80089ac:	4616      	mov	r6, r2
 80089ae:	4699      	mov	r9, r3
 80089b0:	688a      	ldr	r2, [r1, #8]
 80089b2:	690b      	ldr	r3, [r1, #16]
 80089b4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80089b8:	4293      	cmp	r3, r2
 80089ba:	bfb8      	it	lt
 80089bc:	4613      	movlt	r3, r2
 80089be:	6033      	str	r3, [r6, #0]
 80089c0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80089c4:	4607      	mov	r7, r0
 80089c6:	460c      	mov	r4, r1
 80089c8:	b10a      	cbz	r2, 80089ce <_printf_common+0x26>
 80089ca:	3301      	adds	r3, #1
 80089cc:	6033      	str	r3, [r6, #0]
 80089ce:	6823      	ldr	r3, [r4, #0]
 80089d0:	0699      	lsls	r1, r3, #26
 80089d2:	bf42      	ittt	mi
 80089d4:	6833      	ldrmi	r3, [r6, #0]
 80089d6:	3302      	addmi	r3, #2
 80089d8:	6033      	strmi	r3, [r6, #0]
 80089da:	6825      	ldr	r5, [r4, #0]
 80089dc:	f015 0506 	ands.w	r5, r5, #6
 80089e0:	d106      	bne.n	80089f0 <_printf_common+0x48>
 80089e2:	f104 0a19 	add.w	sl, r4, #25
 80089e6:	68e3      	ldr	r3, [r4, #12]
 80089e8:	6832      	ldr	r2, [r6, #0]
 80089ea:	1a9b      	subs	r3, r3, r2
 80089ec:	42ab      	cmp	r3, r5
 80089ee:	dc26      	bgt.n	8008a3e <_printf_common+0x96>
 80089f0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80089f4:	1e13      	subs	r3, r2, #0
 80089f6:	6822      	ldr	r2, [r4, #0]
 80089f8:	bf18      	it	ne
 80089fa:	2301      	movne	r3, #1
 80089fc:	0692      	lsls	r2, r2, #26
 80089fe:	d42b      	bmi.n	8008a58 <_printf_common+0xb0>
 8008a00:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008a04:	4649      	mov	r1, r9
 8008a06:	4638      	mov	r0, r7
 8008a08:	47c0      	blx	r8
 8008a0a:	3001      	adds	r0, #1
 8008a0c:	d01e      	beq.n	8008a4c <_printf_common+0xa4>
 8008a0e:	6823      	ldr	r3, [r4, #0]
 8008a10:	68e5      	ldr	r5, [r4, #12]
 8008a12:	6832      	ldr	r2, [r6, #0]
 8008a14:	f003 0306 	and.w	r3, r3, #6
 8008a18:	2b04      	cmp	r3, #4
 8008a1a:	bf08      	it	eq
 8008a1c:	1aad      	subeq	r5, r5, r2
 8008a1e:	68a3      	ldr	r3, [r4, #8]
 8008a20:	6922      	ldr	r2, [r4, #16]
 8008a22:	bf0c      	ite	eq
 8008a24:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008a28:	2500      	movne	r5, #0
 8008a2a:	4293      	cmp	r3, r2
 8008a2c:	bfc4      	itt	gt
 8008a2e:	1a9b      	subgt	r3, r3, r2
 8008a30:	18ed      	addgt	r5, r5, r3
 8008a32:	2600      	movs	r6, #0
 8008a34:	341a      	adds	r4, #26
 8008a36:	42b5      	cmp	r5, r6
 8008a38:	d11a      	bne.n	8008a70 <_printf_common+0xc8>
 8008a3a:	2000      	movs	r0, #0
 8008a3c:	e008      	b.n	8008a50 <_printf_common+0xa8>
 8008a3e:	2301      	movs	r3, #1
 8008a40:	4652      	mov	r2, sl
 8008a42:	4649      	mov	r1, r9
 8008a44:	4638      	mov	r0, r7
 8008a46:	47c0      	blx	r8
 8008a48:	3001      	adds	r0, #1
 8008a4a:	d103      	bne.n	8008a54 <_printf_common+0xac>
 8008a4c:	f04f 30ff 	mov.w	r0, #4294967295
 8008a50:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008a54:	3501      	adds	r5, #1
 8008a56:	e7c6      	b.n	80089e6 <_printf_common+0x3e>
 8008a58:	18e1      	adds	r1, r4, r3
 8008a5a:	1c5a      	adds	r2, r3, #1
 8008a5c:	2030      	movs	r0, #48	; 0x30
 8008a5e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008a62:	4422      	add	r2, r4
 8008a64:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008a68:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008a6c:	3302      	adds	r3, #2
 8008a6e:	e7c7      	b.n	8008a00 <_printf_common+0x58>
 8008a70:	2301      	movs	r3, #1
 8008a72:	4622      	mov	r2, r4
 8008a74:	4649      	mov	r1, r9
 8008a76:	4638      	mov	r0, r7
 8008a78:	47c0      	blx	r8
 8008a7a:	3001      	adds	r0, #1
 8008a7c:	d0e6      	beq.n	8008a4c <_printf_common+0xa4>
 8008a7e:	3601      	adds	r6, #1
 8008a80:	e7d9      	b.n	8008a36 <_printf_common+0x8e>
	...

08008a84 <_printf_i>:
 8008a84:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008a88:	7e0f      	ldrb	r7, [r1, #24]
 8008a8a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8008a8c:	2f78      	cmp	r7, #120	; 0x78
 8008a8e:	4691      	mov	r9, r2
 8008a90:	4680      	mov	r8, r0
 8008a92:	460c      	mov	r4, r1
 8008a94:	469a      	mov	sl, r3
 8008a96:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8008a9a:	d807      	bhi.n	8008aac <_printf_i+0x28>
 8008a9c:	2f62      	cmp	r7, #98	; 0x62
 8008a9e:	d80a      	bhi.n	8008ab6 <_printf_i+0x32>
 8008aa0:	2f00      	cmp	r7, #0
 8008aa2:	f000 80d8 	beq.w	8008c56 <_printf_i+0x1d2>
 8008aa6:	2f58      	cmp	r7, #88	; 0x58
 8008aa8:	f000 80a3 	beq.w	8008bf2 <_printf_i+0x16e>
 8008aac:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008ab0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008ab4:	e03a      	b.n	8008b2c <_printf_i+0xa8>
 8008ab6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8008aba:	2b15      	cmp	r3, #21
 8008abc:	d8f6      	bhi.n	8008aac <_printf_i+0x28>
 8008abe:	a101      	add	r1, pc, #4	; (adr r1, 8008ac4 <_printf_i+0x40>)
 8008ac0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008ac4:	08008b1d 	.word	0x08008b1d
 8008ac8:	08008b31 	.word	0x08008b31
 8008acc:	08008aad 	.word	0x08008aad
 8008ad0:	08008aad 	.word	0x08008aad
 8008ad4:	08008aad 	.word	0x08008aad
 8008ad8:	08008aad 	.word	0x08008aad
 8008adc:	08008b31 	.word	0x08008b31
 8008ae0:	08008aad 	.word	0x08008aad
 8008ae4:	08008aad 	.word	0x08008aad
 8008ae8:	08008aad 	.word	0x08008aad
 8008aec:	08008aad 	.word	0x08008aad
 8008af0:	08008c3d 	.word	0x08008c3d
 8008af4:	08008b61 	.word	0x08008b61
 8008af8:	08008c1f 	.word	0x08008c1f
 8008afc:	08008aad 	.word	0x08008aad
 8008b00:	08008aad 	.word	0x08008aad
 8008b04:	08008c5f 	.word	0x08008c5f
 8008b08:	08008aad 	.word	0x08008aad
 8008b0c:	08008b61 	.word	0x08008b61
 8008b10:	08008aad 	.word	0x08008aad
 8008b14:	08008aad 	.word	0x08008aad
 8008b18:	08008c27 	.word	0x08008c27
 8008b1c:	682b      	ldr	r3, [r5, #0]
 8008b1e:	1d1a      	adds	r2, r3, #4
 8008b20:	681b      	ldr	r3, [r3, #0]
 8008b22:	602a      	str	r2, [r5, #0]
 8008b24:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008b28:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008b2c:	2301      	movs	r3, #1
 8008b2e:	e0a3      	b.n	8008c78 <_printf_i+0x1f4>
 8008b30:	6820      	ldr	r0, [r4, #0]
 8008b32:	6829      	ldr	r1, [r5, #0]
 8008b34:	0606      	lsls	r6, r0, #24
 8008b36:	f101 0304 	add.w	r3, r1, #4
 8008b3a:	d50a      	bpl.n	8008b52 <_printf_i+0xce>
 8008b3c:	680e      	ldr	r6, [r1, #0]
 8008b3e:	602b      	str	r3, [r5, #0]
 8008b40:	2e00      	cmp	r6, #0
 8008b42:	da03      	bge.n	8008b4c <_printf_i+0xc8>
 8008b44:	232d      	movs	r3, #45	; 0x2d
 8008b46:	4276      	negs	r6, r6
 8008b48:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008b4c:	485e      	ldr	r0, [pc, #376]	; (8008cc8 <_printf_i+0x244>)
 8008b4e:	230a      	movs	r3, #10
 8008b50:	e019      	b.n	8008b86 <_printf_i+0x102>
 8008b52:	680e      	ldr	r6, [r1, #0]
 8008b54:	602b      	str	r3, [r5, #0]
 8008b56:	f010 0f40 	tst.w	r0, #64	; 0x40
 8008b5a:	bf18      	it	ne
 8008b5c:	b236      	sxthne	r6, r6
 8008b5e:	e7ef      	b.n	8008b40 <_printf_i+0xbc>
 8008b60:	682b      	ldr	r3, [r5, #0]
 8008b62:	6820      	ldr	r0, [r4, #0]
 8008b64:	1d19      	adds	r1, r3, #4
 8008b66:	6029      	str	r1, [r5, #0]
 8008b68:	0601      	lsls	r1, r0, #24
 8008b6a:	d501      	bpl.n	8008b70 <_printf_i+0xec>
 8008b6c:	681e      	ldr	r6, [r3, #0]
 8008b6e:	e002      	b.n	8008b76 <_printf_i+0xf2>
 8008b70:	0646      	lsls	r6, r0, #25
 8008b72:	d5fb      	bpl.n	8008b6c <_printf_i+0xe8>
 8008b74:	881e      	ldrh	r6, [r3, #0]
 8008b76:	4854      	ldr	r0, [pc, #336]	; (8008cc8 <_printf_i+0x244>)
 8008b78:	2f6f      	cmp	r7, #111	; 0x6f
 8008b7a:	bf0c      	ite	eq
 8008b7c:	2308      	moveq	r3, #8
 8008b7e:	230a      	movne	r3, #10
 8008b80:	2100      	movs	r1, #0
 8008b82:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008b86:	6865      	ldr	r5, [r4, #4]
 8008b88:	60a5      	str	r5, [r4, #8]
 8008b8a:	2d00      	cmp	r5, #0
 8008b8c:	bfa2      	ittt	ge
 8008b8e:	6821      	ldrge	r1, [r4, #0]
 8008b90:	f021 0104 	bicge.w	r1, r1, #4
 8008b94:	6021      	strge	r1, [r4, #0]
 8008b96:	b90e      	cbnz	r6, 8008b9c <_printf_i+0x118>
 8008b98:	2d00      	cmp	r5, #0
 8008b9a:	d04d      	beq.n	8008c38 <_printf_i+0x1b4>
 8008b9c:	4615      	mov	r5, r2
 8008b9e:	fbb6 f1f3 	udiv	r1, r6, r3
 8008ba2:	fb03 6711 	mls	r7, r3, r1, r6
 8008ba6:	5dc7      	ldrb	r7, [r0, r7]
 8008ba8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8008bac:	4637      	mov	r7, r6
 8008bae:	42bb      	cmp	r3, r7
 8008bb0:	460e      	mov	r6, r1
 8008bb2:	d9f4      	bls.n	8008b9e <_printf_i+0x11a>
 8008bb4:	2b08      	cmp	r3, #8
 8008bb6:	d10b      	bne.n	8008bd0 <_printf_i+0x14c>
 8008bb8:	6823      	ldr	r3, [r4, #0]
 8008bba:	07de      	lsls	r6, r3, #31
 8008bbc:	d508      	bpl.n	8008bd0 <_printf_i+0x14c>
 8008bbe:	6923      	ldr	r3, [r4, #16]
 8008bc0:	6861      	ldr	r1, [r4, #4]
 8008bc2:	4299      	cmp	r1, r3
 8008bc4:	bfde      	ittt	le
 8008bc6:	2330      	movle	r3, #48	; 0x30
 8008bc8:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008bcc:	f105 35ff 	addle.w	r5, r5, #4294967295
 8008bd0:	1b52      	subs	r2, r2, r5
 8008bd2:	6122      	str	r2, [r4, #16]
 8008bd4:	f8cd a000 	str.w	sl, [sp]
 8008bd8:	464b      	mov	r3, r9
 8008bda:	aa03      	add	r2, sp, #12
 8008bdc:	4621      	mov	r1, r4
 8008bde:	4640      	mov	r0, r8
 8008be0:	f7ff fee2 	bl	80089a8 <_printf_common>
 8008be4:	3001      	adds	r0, #1
 8008be6:	d14c      	bne.n	8008c82 <_printf_i+0x1fe>
 8008be8:	f04f 30ff 	mov.w	r0, #4294967295
 8008bec:	b004      	add	sp, #16
 8008bee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008bf2:	4835      	ldr	r0, [pc, #212]	; (8008cc8 <_printf_i+0x244>)
 8008bf4:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8008bf8:	6829      	ldr	r1, [r5, #0]
 8008bfa:	6823      	ldr	r3, [r4, #0]
 8008bfc:	f851 6b04 	ldr.w	r6, [r1], #4
 8008c00:	6029      	str	r1, [r5, #0]
 8008c02:	061d      	lsls	r5, r3, #24
 8008c04:	d514      	bpl.n	8008c30 <_printf_i+0x1ac>
 8008c06:	07df      	lsls	r7, r3, #31
 8008c08:	bf44      	itt	mi
 8008c0a:	f043 0320 	orrmi.w	r3, r3, #32
 8008c0e:	6023      	strmi	r3, [r4, #0]
 8008c10:	b91e      	cbnz	r6, 8008c1a <_printf_i+0x196>
 8008c12:	6823      	ldr	r3, [r4, #0]
 8008c14:	f023 0320 	bic.w	r3, r3, #32
 8008c18:	6023      	str	r3, [r4, #0]
 8008c1a:	2310      	movs	r3, #16
 8008c1c:	e7b0      	b.n	8008b80 <_printf_i+0xfc>
 8008c1e:	6823      	ldr	r3, [r4, #0]
 8008c20:	f043 0320 	orr.w	r3, r3, #32
 8008c24:	6023      	str	r3, [r4, #0]
 8008c26:	2378      	movs	r3, #120	; 0x78
 8008c28:	4828      	ldr	r0, [pc, #160]	; (8008ccc <_printf_i+0x248>)
 8008c2a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008c2e:	e7e3      	b.n	8008bf8 <_printf_i+0x174>
 8008c30:	0659      	lsls	r1, r3, #25
 8008c32:	bf48      	it	mi
 8008c34:	b2b6      	uxthmi	r6, r6
 8008c36:	e7e6      	b.n	8008c06 <_printf_i+0x182>
 8008c38:	4615      	mov	r5, r2
 8008c3a:	e7bb      	b.n	8008bb4 <_printf_i+0x130>
 8008c3c:	682b      	ldr	r3, [r5, #0]
 8008c3e:	6826      	ldr	r6, [r4, #0]
 8008c40:	6961      	ldr	r1, [r4, #20]
 8008c42:	1d18      	adds	r0, r3, #4
 8008c44:	6028      	str	r0, [r5, #0]
 8008c46:	0635      	lsls	r5, r6, #24
 8008c48:	681b      	ldr	r3, [r3, #0]
 8008c4a:	d501      	bpl.n	8008c50 <_printf_i+0x1cc>
 8008c4c:	6019      	str	r1, [r3, #0]
 8008c4e:	e002      	b.n	8008c56 <_printf_i+0x1d2>
 8008c50:	0670      	lsls	r0, r6, #25
 8008c52:	d5fb      	bpl.n	8008c4c <_printf_i+0x1c8>
 8008c54:	8019      	strh	r1, [r3, #0]
 8008c56:	2300      	movs	r3, #0
 8008c58:	6123      	str	r3, [r4, #16]
 8008c5a:	4615      	mov	r5, r2
 8008c5c:	e7ba      	b.n	8008bd4 <_printf_i+0x150>
 8008c5e:	682b      	ldr	r3, [r5, #0]
 8008c60:	1d1a      	adds	r2, r3, #4
 8008c62:	602a      	str	r2, [r5, #0]
 8008c64:	681d      	ldr	r5, [r3, #0]
 8008c66:	6862      	ldr	r2, [r4, #4]
 8008c68:	2100      	movs	r1, #0
 8008c6a:	4628      	mov	r0, r5
 8008c6c:	f7f7 fac0 	bl	80001f0 <memchr>
 8008c70:	b108      	cbz	r0, 8008c76 <_printf_i+0x1f2>
 8008c72:	1b40      	subs	r0, r0, r5
 8008c74:	6060      	str	r0, [r4, #4]
 8008c76:	6863      	ldr	r3, [r4, #4]
 8008c78:	6123      	str	r3, [r4, #16]
 8008c7a:	2300      	movs	r3, #0
 8008c7c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008c80:	e7a8      	b.n	8008bd4 <_printf_i+0x150>
 8008c82:	6923      	ldr	r3, [r4, #16]
 8008c84:	462a      	mov	r2, r5
 8008c86:	4649      	mov	r1, r9
 8008c88:	4640      	mov	r0, r8
 8008c8a:	47d0      	blx	sl
 8008c8c:	3001      	adds	r0, #1
 8008c8e:	d0ab      	beq.n	8008be8 <_printf_i+0x164>
 8008c90:	6823      	ldr	r3, [r4, #0]
 8008c92:	079b      	lsls	r3, r3, #30
 8008c94:	d413      	bmi.n	8008cbe <_printf_i+0x23a>
 8008c96:	68e0      	ldr	r0, [r4, #12]
 8008c98:	9b03      	ldr	r3, [sp, #12]
 8008c9a:	4298      	cmp	r0, r3
 8008c9c:	bfb8      	it	lt
 8008c9e:	4618      	movlt	r0, r3
 8008ca0:	e7a4      	b.n	8008bec <_printf_i+0x168>
 8008ca2:	2301      	movs	r3, #1
 8008ca4:	4632      	mov	r2, r6
 8008ca6:	4649      	mov	r1, r9
 8008ca8:	4640      	mov	r0, r8
 8008caa:	47d0      	blx	sl
 8008cac:	3001      	adds	r0, #1
 8008cae:	d09b      	beq.n	8008be8 <_printf_i+0x164>
 8008cb0:	3501      	adds	r5, #1
 8008cb2:	68e3      	ldr	r3, [r4, #12]
 8008cb4:	9903      	ldr	r1, [sp, #12]
 8008cb6:	1a5b      	subs	r3, r3, r1
 8008cb8:	42ab      	cmp	r3, r5
 8008cba:	dcf2      	bgt.n	8008ca2 <_printf_i+0x21e>
 8008cbc:	e7eb      	b.n	8008c96 <_printf_i+0x212>
 8008cbe:	2500      	movs	r5, #0
 8008cc0:	f104 0619 	add.w	r6, r4, #25
 8008cc4:	e7f5      	b.n	8008cb2 <_printf_i+0x22e>
 8008cc6:	bf00      	nop
 8008cc8:	080094e9 	.word	0x080094e9
 8008ccc:	080094fa 	.word	0x080094fa

08008cd0 <memcpy>:
 8008cd0:	440a      	add	r2, r1
 8008cd2:	4291      	cmp	r1, r2
 8008cd4:	f100 33ff 	add.w	r3, r0, #4294967295
 8008cd8:	d100      	bne.n	8008cdc <memcpy+0xc>
 8008cda:	4770      	bx	lr
 8008cdc:	b510      	push	{r4, lr}
 8008cde:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008ce2:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008ce6:	4291      	cmp	r1, r2
 8008ce8:	d1f9      	bne.n	8008cde <memcpy+0xe>
 8008cea:	bd10      	pop	{r4, pc}

08008cec <memmove>:
 8008cec:	4288      	cmp	r0, r1
 8008cee:	b510      	push	{r4, lr}
 8008cf0:	eb01 0402 	add.w	r4, r1, r2
 8008cf4:	d902      	bls.n	8008cfc <memmove+0x10>
 8008cf6:	4284      	cmp	r4, r0
 8008cf8:	4623      	mov	r3, r4
 8008cfa:	d807      	bhi.n	8008d0c <memmove+0x20>
 8008cfc:	1e43      	subs	r3, r0, #1
 8008cfe:	42a1      	cmp	r1, r4
 8008d00:	d008      	beq.n	8008d14 <memmove+0x28>
 8008d02:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008d06:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008d0a:	e7f8      	b.n	8008cfe <memmove+0x12>
 8008d0c:	4402      	add	r2, r0
 8008d0e:	4601      	mov	r1, r0
 8008d10:	428a      	cmp	r2, r1
 8008d12:	d100      	bne.n	8008d16 <memmove+0x2a>
 8008d14:	bd10      	pop	{r4, pc}
 8008d16:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008d1a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008d1e:	e7f7      	b.n	8008d10 <memmove+0x24>

08008d20 <_free_r>:
 8008d20:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008d22:	2900      	cmp	r1, #0
 8008d24:	d044      	beq.n	8008db0 <_free_r+0x90>
 8008d26:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008d2a:	9001      	str	r0, [sp, #4]
 8008d2c:	2b00      	cmp	r3, #0
 8008d2e:	f1a1 0404 	sub.w	r4, r1, #4
 8008d32:	bfb8      	it	lt
 8008d34:	18e4      	addlt	r4, r4, r3
 8008d36:	f000 f913 	bl	8008f60 <__malloc_lock>
 8008d3a:	4a1e      	ldr	r2, [pc, #120]	; (8008db4 <_free_r+0x94>)
 8008d3c:	9801      	ldr	r0, [sp, #4]
 8008d3e:	6813      	ldr	r3, [r2, #0]
 8008d40:	b933      	cbnz	r3, 8008d50 <_free_r+0x30>
 8008d42:	6063      	str	r3, [r4, #4]
 8008d44:	6014      	str	r4, [r2, #0]
 8008d46:	b003      	add	sp, #12
 8008d48:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008d4c:	f000 b90e 	b.w	8008f6c <__malloc_unlock>
 8008d50:	42a3      	cmp	r3, r4
 8008d52:	d908      	bls.n	8008d66 <_free_r+0x46>
 8008d54:	6825      	ldr	r5, [r4, #0]
 8008d56:	1961      	adds	r1, r4, r5
 8008d58:	428b      	cmp	r3, r1
 8008d5a:	bf01      	itttt	eq
 8008d5c:	6819      	ldreq	r1, [r3, #0]
 8008d5e:	685b      	ldreq	r3, [r3, #4]
 8008d60:	1949      	addeq	r1, r1, r5
 8008d62:	6021      	streq	r1, [r4, #0]
 8008d64:	e7ed      	b.n	8008d42 <_free_r+0x22>
 8008d66:	461a      	mov	r2, r3
 8008d68:	685b      	ldr	r3, [r3, #4]
 8008d6a:	b10b      	cbz	r3, 8008d70 <_free_r+0x50>
 8008d6c:	42a3      	cmp	r3, r4
 8008d6e:	d9fa      	bls.n	8008d66 <_free_r+0x46>
 8008d70:	6811      	ldr	r1, [r2, #0]
 8008d72:	1855      	adds	r5, r2, r1
 8008d74:	42a5      	cmp	r5, r4
 8008d76:	d10b      	bne.n	8008d90 <_free_r+0x70>
 8008d78:	6824      	ldr	r4, [r4, #0]
 8008d7a:	4421      	add	r1, r4
 8008d7c:	1854      	adds	r4, r2, r1
 8008d7e:	42a3      	cmp	r3, r4
 8008d80:	6011      	str	r1, [r2, #0]
 8008d82:	d1e0      	bne.n	8008d46 <_free_r+0x26>
 8008d84:	681c      	ldr	r4, [r3, #0]
 8008d86:	685b      	ldr	r3, [r3, #4]
 8008d88:	6053      	str	r3, [r2, #4]
 8008d8a:	4421      	add	r1, r4
 8008d8c:	6011      	str	r1, [r2, #0]
 8008d8e:	e7da      	b.n	8008d46 <_free_r+0x26>
 8008d90:	d902      	bls.n	8008d98 <_free_r+0x78>
 8008d92:	230c      	movs	r3, #12
 8008d94:	6003      	str	r3, [r0, #0]
 8008d96:	e7d6      	b.n	8008d46 <_free_r+0x26>
 8008d98:	6825      	ldr	r5, [r4, #0]
 8008d9a:	1961      	adds	r1, r4, r5
 8008d9c:	428b      	cmp	r3, r1
 8008d9e:	bf04      	itt	eq
 8008da0:	6819      	ldreq	r1, [r3, #0]
 8008da2:	685b      	ldreq	r3, [r3, #4]
 8008da4:	6063      	str	r3, [r4, #4]
 8008da6:	bf04      	itt	eq
 8008da8:	1949      	addeq	r1, r1, r5
 8008daa:	6021      	streq	r1, [r4, #0]
 8008dac:	6054      	str	r4, [r2, #4]
 8008dae:	e7ca      	b.n	8008d46 <_free_r+0x26>
 8008db0:	b003      	add	sp, #12
 8008db2:	bd30      	pop	{r4, r5, pc}
 8008db4:	20017098 	.word	0x20017098

08008db8 <sbrk_aligned>:
 8008db8:	b570      	push	{r4, r5, r6, lr}
 8008dba:	4e0e      	ldr	r6, [pc, #56]	; (8008df4 <sbrk_aligned+0x3c>)
 8008dbc:	460c      	mov	r4, r1
 8008dbe:	6831      	ldr	r1, [r6, #0]
 8008dc0:	4605      	mov	r5, r0
 8008dc2:	b911      	cbnz	r1, 8008dca <sbrk_aligned+0x12>
 8008dc4:	f000 f8bc 	bl	8008f40 <_sbrk_r>
 8008dc8:	6030      	str	r0, [r6, #0]
 8008dca:	4621      	mov	r1, r4
 8008dcc:	4628      	mov	r0, r5
 8008dce:	f000 f8b7 	bl	8008f40 <_sbrk_r>
 8008dd2:	1c43      	adds	r3, r0, #1
 8008dd4:	d00a      	beq.n	8008dec <sbrk_aligned+0x34>
 8008dd6:	1cc4      	adds	r4, r0, #3
 8008dd8:	f024 0403 	bic.w	r4, r4, #3
 8008ddc:	42a0      	cmp	r0, r4
 8008dde:	d007      	beq.n	8008df0 <sbrk_aligned+0x38>
 8008de0:	1a21      	subs	r1, r4, r0
 8008de2:	4628      	mov	r0, r5
 8008de4:	f000 f8ac 	bl	8008f40 <_sbrk_r>
 8008de8:	3001      	adds	r0, #1
 8008dea:	d101      	bne.n	8008df0 <sbrk_aligned+0x38>
 8008dec:	f04f 34ff 	mov.w	r4, #4294967295
 8008df0:	4620      	mov	r0, r4
 8008df2:	bd70      	pop	{r4, r5, r6, pc}
 8008df4:	2001709c 	.word	0x2001709c

08008df8 <_malloc_r>:
 8008df8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008dfc:	1ccd      	adds	r5, r1, #3
 8008dfe:	f025 0503 	bic.w	r5, r5, #3
 8008e02:	3508      	adds	r5, #8
 8008e04:	2d0c      	cmp	r5, #12
 8008e06:	bf38      	it	cc
 8008e08:	250c      	movcc	r5, #12
 8008e0a:	2d00      	cmp	r5, #0
 8008e0c:	4607      	mov	r7, r0
 8008e0e:	db01      	blt.n	8008e14 <_malloc_r+0x1c>
 8008e10:	42a9      	cmp	r1, r5
 8008e12:	d905      	bls.n	8008e20 <_malloc_r+0x28>
 8008e14:	230c      	movs	r3, #12
 8008e16:	603b      	str	r3, [r7, #0]
 8008e18:	2600      	movs	r6, #0
 8008e1a:	4630      	mov	r0, r6
 8008e1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008e20:	4e2e      	ldr	r6, [pc, #184]	; (8008edc <_malloc_r+0xe4>)
 8008e22:	f000 f89d 	bl	8008f60 <__malloc_lock>
 8008e26:	6833      	ldr	r3, [r6, #0]
 8008e28:	461c      	mov	r4, r3
 8008e2a:	bb34      	cbnz	r4, 8008e7a <_malloc_r+0x82>
 8008e2c:	4629      	mov	r1, r5
 8008e2e:	4638      	mov	r0, r7
 8008e30:	f7ff ffc2 	bl	8008db8 <sbrk_aligned>
 8008e34:	1c43      	adds	r3, r0, #1
 8008e36:	4604      	mov	r4, r0
 8008e38:	d14d      	bne.n	8008ed6 <_malloc_r+0xde>
 8008e3a:	6834      	ldr	r4, [r6, #0]
 8008e3c:	4626      	mov	r6, r4
 8008e3e:	2e00      	cmp	r6, #0
 8008e40:	d140      	bne.n	8008ec4 <_malloc_r+0xcc>
 8008e42:	6823      	ldr	r3, [r4, #0]
 8008e44:	4631      	mov	r1, r6
 8008e46:	4638      	mov	r0, r7
 8008e48:	eb04 0803 	add.w	r8, r4, r3
 8008e4c:	f000 f878 	bl	8008f40 <_sbrk_r>
 8008e50:	4580      	cmp	r8, r0
 8008e52:	d13a      	bne.n	8008eca <_malloc_r+0xd2>
 8008e54:	6821      	ldr	r1, [r4, #0]
 8008e56:	3503      	adds	r5, #3
 8008e58:	1a6d      	subs	r5, r5, r1
 8008e5a:	f025 0503 	bic.w	r5, r5, #3
 8008e5e:	3508      	adds	r5, #8
 8008e60:	2d0c      	cmp	r5, #12
 8008e62:	bf38      	it	cc
 8008e64:	250c      	movcc	r5, #12
 8008e66:	4629      	mov	r1, r5
 8008e68:	4638      	mov	r0, r7
 8008e6a:	f7ff ffa5 	bl	8008db8 <sbrk_aligned>
 8008e6e:	3001      	adds	r0, #1
 8008e70:	d02b      	beq.n	8008eca <_malloc_r+0xd2>
 8008e72:	6823      	ldr	r3, [r4, #0]
 8008e74:	442b      	add	r3, r5
 8008e76:	6023      	str	r3, [r4, #0]
 8008e78:	e00e      	b.n	8008e98 <_malloc_r+0xa0>
 8008e7a:	6822      	ldr	r2, [r4, #0]
 8008e7c:	1b52      	subs	r2, r2, r5
 8008e7e:	d41e      	bmi.n	8008ebe <_malloc_r+0xc6>
 8008e80:	2a0b      	cmp	r2, #11
 8008e82:	d916      	bls.n	8008eb2 <_malloc_r+0xba>
 8008e84:	1961      	adds	r1, r4, r5
 8008e86:	42a3      	cmp	r3, r4
 8008e88:	6025      	str	r5, [r4, #0]
 8008e8a:	bf18      	it	ne
 8008e8c:	6059      	strne	r1, [r3, #4]
 8008e8e:	6863      	ldr	r3, [r4, #4]
 8008e90:	bf08      	it	eq
 8008e92:	6031      	streq	r1, [r6, #0]
 8008e94:	5162      	str	r2, [r4, r5]
 8008e96:	604b      	str	r3, [r1, #4]
 8008e98:	4638      	mov	r0, r7
 8008e9a:	f104 060b 	add.w	r6, r4, #11
 8008e9e:	f000 f865 	bl	8008f6c <__malloc_unlock>
 8008ea2:	f026 0607 	bic.w	r6, r6, #7
 8008ea6:	1d23      	adds	r3, r4, #4
 8008ea8:	1af2      	subs	r2, r6, r3
 8008eaa:	d0b6      	beq.n	8008e1a <_malloc_r+0x22>
 8008eac:	1b9b      	subs	r3, r3, r6
 8008eae:	50a3      	str	r3, [r4, r2]
 8008eb0:	e7b3      	b.n	8008e1a <_malloc_r+0x22>
 8008eb2:	6862      	ldr	r2, [r4, #4]
 8008eb4:	42a3      	cmp	r3, r4
 8008eb6:	bf0c      	ite	eq
 8008eb8:	6032      	streq	r2, [r6, #0]
 8008eba:	605a      	strne	r2, [r3, #4]
 8008ebc:	e7ec      	b.n	8008e98 <_malloc_r+0xa0>
 8008ebe:	4623      	mov	r3, r4
 8008ec0:	6864      	ldr	r4, [r4, #4]
 8008ec2:	e7b2      	b.n	8008e2a <_malloc_r+0x32>
 8008ec4:	4634      	mov	r4, r6
 8008ec6:	6876      	ldr	r6, [r6, #4]
 8008ec8:	e7b9      	b.n	8008e3e <_malloc_r+0x46>
 8008eca:	230c      	movs	r3, #12
 8008ecc:	603b      	str	r3, [r7, #0]
 8008ece:	4638      	mov	r0, r7
 8008ed0:	f000 f84c 	bl	8008f6c <__malloc_unlock>
 8008ed4:	e7a1      	b.n	8008e1a <_malloc_r+0x22>
 8008ed6:	6025      	str	r5, [r4, #0]
 8008ed8:	e7de      	b.n	8008e98 <_malloc_r+0xa0>
 8008eda:	bf00      	nop
 8008edc:	20017098 	.word	0x20017098

08008ee0 <_realloc_r>:
 8008ee0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008ee4:	4680      	mov	r8, r0
 8008ee6:	4614      	mov	r4, r2
 8008ee8:	460e      	mov	r6, r1
 8008eea:	b921      	cbnz	r1, 8008ef6 <_realloc_r+0x16>
 8008eec:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008ef0:	4611      	mov	r1, r2
 8008ef2:	f7ff bf81 	b.w	8008df8 <_malloc_r>
 8008ef6:	b92a      	cbnz	r2, 8008f04 <_realloc_r+0x24>
 8008ef8:	f7ff ff12 	bl	8008d20 <_free_r>
 8008efc:	4625      	mov	r5, r4
 8008efe:	4628      	mov	r0, r5
 8008f00:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008f04:	f000 f838 	bl	8008f78 <_malloc_usable_size_r>
 8008f08:	4284      	cmp	r4, r0
 8008f0a:	4607      	mov	r7, r0
 8008f0c:	d802      	bhi.n	8008f14 <_realloc_r+0x34>
 8008f0e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8008f12:	d812      	bhi.n	8008f3a <_realloc_r+0x5a>
 8008f14:	4621      	mov	r1, r4
 8008f16:	4640      	mov	r0, r8
 8008f18:	f7ff ff6e 	bl	8008df8 <_malloc_r>
 8008f1c:	4605      	mov	r5, r0
 8008f1e:	2800      	cmp	r0, #0
 8008f20:	d0ed      	beq.n	8008efe <_realloc_r+0x1e>
 8008f22:	42bc      	cmp	r4, r7
 8008f24:	4622      	mov	r2, r4
 8008f26:	4631      	mov	r1, r6
 8008f28:	bf28      	it	cs
 8008f2a:	463a      	movcs	r2, r7
 8008f2c:	f7ff fed0 	bl	8008cd0 <memcpy>
 8008f30:	4631      	mov	r1, r6
 8008f32:	4640      	mov	r0, r8
 8008f34:	f7ff fef4 	bl	8008d20 <_free_r>
 8008f38:	e7e1      	b.n	8008efe <_realloc_r+0x1e>
 8008f3a:	4635      	mov	r5, r6
 8008f3c:	e7df      	b.n	8008efe <_realloc_r+0x1e>
	...

08008f40 <_sbrk_r>:
 8008f40:	b538      	push	{r3, r4, r5, lr}
 8008f42:	4d06      	ldr	r5, [pc, #24]	; (8008f5c <_sbrk_r+0x1c>)
 8008f44:	2300      	movs	r3, #0
 8008f46:	4604      	mov	r4, r0
 8008f48:	4608      	mov	r0, r1
 8008f4a:	602b      	str	r3, [r5, #0]
 8008f4c:	f7f8 fada 	bl	8001504 <_sbrk>
 8008f50:	1c43      	adds	r3, r0, #1
 8008f52:	d102      	bne.n	8008f5a <_sbrk_r+0x1a>
 8008f54:	682b      	ldr	r3, [r5, #0]
 8008f56:	b103      	cbz	r3, 8008f5a <_sbrk_r+0x1a>
 8008f58:	6023      	str	r3, [r4, #0]
 8008f5a:	bd38      	pop	{r3, r4, r5, pc}
 8008f5c:	200170a0 	.word	0x200170a0

08008f60 <__malloc_lock>:
 8008f60:	4801      	ldr	r0, [pc, #4]	; (8008f68 <__malloc_lock+0x8>)
 8008f62:	f000 b811 	b.w	8008f88 <__retarget_lock_acquire_recursive>
 8008f66:	bf00      	nop
 8008f68:	200170a4 	.word	0x200170a4

08008f6c <__malloc_unlock>:
 8008f6c:	4801      	ldr	r0, [pc, #4]	; (8008f74 <__malloc_unlock+0x8>)
 8008f6e:	f000 b80c 	b.w	8008f8a <__retarget_lock_release_recursive>
 8008f72:	bf00      	nop
 8008f74:	200170a4 	.word	0x200170a4

08008f78 <_malloc_usable_size_r>:
 8008f78:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008f7c:	1f18      	subs	r0, r3, #4
 8008f7e:	2b00      	cmp	r3, #0
 8008f80:	bfbc      	itt	lt
 8008f82:	580b      	ldrlt	r3, [r1, r0]
 8008f84:	18c0      	addlt	r0, r0, r3
 8008f86:	4770      	bx	lr

08008f88 <__retarget_lock_acquire_recursive>:
 8008f88:	4770      	bx	lr

08008f8a <__retarget_lock_release_recursive>:
 8008f8a:	4770      	bx	lr

08008f8c <_init>:
 8008f8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008f8e:	bf00      	nop
 8008f90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008f92:	bc08      	pop	{r3}
 8008f94:	469e      	mov	lr, r3
 8008f96:	4770      	bx	lr

08008f98 <_fini>:
 8008f98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008f9a:	bf00      	nop
 8008f9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008f9e:	bc08      	pop	{r3}
 8008fa0:	469e      	mov	lr, r3
 8008fa2:	4770      	bx	lr
