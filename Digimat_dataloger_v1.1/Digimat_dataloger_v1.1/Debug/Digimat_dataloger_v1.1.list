
Digimat_dataloger_v1.1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d040  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000580  0800d1e0  0800d1e0  0001d1e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d760  0800d760  0002015c  2**0
                  CONTENTS
  4 .ARM          00000008  0800d760  0800d760  0001d760  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d768  0800d768  0002015c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d768  0800d768  0001d768  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800d76c  0800d76c  0001d76c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000015c  20000000  0800d770  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000026d8  2000015c  0800d8cc  0002015c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20002834  0800d8cc  00022834  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002015c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0003031f  00000000  00000000  0002018c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003997  00000000  00000000  000504ab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002540  00000000  00000000  00053e48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000023e8  00000000  00000000  00056388  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a0e1  00000000  00000000  00058770  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00022d83  00000000  00000000  00072851  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00099ce9  00000000  00000000  000955d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0012f2bd  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000a478  00000000  00000000  0012f310  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000015c 	.word	0x2000015c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800d1c8 	.word	0x0800d1c8

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000160 	.word	0x20000160
 80001dc:	0800d1c8 	.word	0x0800d1c8

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b974 	b.w	8000590 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	4604      	mov	r4, r0
 80002c8:	468e      	mov	lr, r1
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	d14d      	bne.n	800036a <__udivmoddi4+0xaa>
 80002ce:	428a      	cmp	r2, r1
 80002d0:	4694      	mov	ip, r2
 80002d2:	d969      	bls.n	80003a8 <__udivmoddi4+0xe8>
 80002d4:	fab2 f282 	clz	r2, r2
 80002d8:	b152      	cbz	r2, 80002f0 <__udivmoddi4+0x30>
 80002da:	fa01 f302 	lsl.w	r3, r1, r2
 80002de:	f1c2 0120 	rsb	r1, r2, #32
 80002e2:	fa20 f101 	lsr.w	r1, r0, r1
 80002e6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002ea:	ea41 0e03 	orr.w	lr, r1, r3
 80002ee:	4094      	lsls	r4, r2
 80002f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002f4:	0c21      	lsrs	r1, r4, #16
 80002f6:	fbbe f6f8 	udiv	r6, lr, r8
 80002fa:	fa1f f78c 	uxth.w	r7, ip
 80002fe:	fb08 e316 	mls	r3, r8, r6, lr
 8000302:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000306:	fb06 f107 	mul.w	r1, r6, r7
 800030a:	4299      	cmp	r1, r3
 800030c:	d90a      	bls.n	8000324 <__udivmoddi4+0x64>
 800030e:	eb1c 0303 	adds.w	r3, ip, r3
 8000312:	f106 30ff 	add.w	r0, r6, #4294967295
 8000316:	f080 811f 	bcs.w	8000558 <__udivmoddi4+0x298>
 800031a:	4299      	cmp	r1, r3
 800031c:	f240 811c 	bls.w	8000558 <__udivmoddi4+0x298>
 8000320:	3e02      	subs	r6, #2
 8000322:	4463      	add	r3, ip
 8000324:	1a5b      	subs	r3, r3, r1
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb3 f0f8 	udiv	r0, r3, r8
 800032c:	fb08 3310 	mls	r3, r8, r0, r3
 8000330:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000334:	fb00 f707 	mul.w	r7, r0, r7
 8000338:	42a7      	cmp	r7, r4
 800033a:	d90a      	bls.n	8000352 <__udivmoddi4+0x92>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 33ff 	add.w	r3, r0, #4294967295
 8000344:	f080 810a 	bcs.w	800055c <__udivmoddi4+0x29c>
 8000348:	42a7      	cmp	r7, r4
 800034a:	f240 8107 	bls.w	800055c <__udivmoddi4+0x29c>
 800034e:	4464      	add	r4, ip
 8000350:	3802      	subs	r0, #2
 8000352:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000356:	1be4      	subs	r4, r4, r7
 8000358:	2600      	movs	r6, #0
 800035a:	b11d      	cbz	r5, 8000364 <__udivmoddi4+0xa4>
 800035c:	40d4      	lsrs	r4, r2
 800035e:	2300      	movs	r3, #0
 8000360:	e9c5 4300 	strd	r4, r3, [r5]
 8000364:	4631      	mov	r1, r6
 8000366:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036a:	428b      	cmp	r3, r1
 800036c:	d909      	bls.n	8000382 <__udivmoddi4+0xc2>
 800036e:	2d00      	cmp	r5, #0
 8000370:	f000 80ef 	beq.w	8000552 <__udivmoddi4+0x292>
 8000374:	2600      	movs	r6, #0
 8000376:	e9c5 0100 	strd	r0, r1, [r5]
 800037a:	4630      	mov	r0, r6
 800037c:	4631      	mov	r1, r6
 800037e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000382:	fab3 f683 	clz	r6, r3
 8000386:	2e00      	cmp	r6, #0
 8000388:	d14a      	bne.n	8000420 <__udivmoddi4+0x160>
 800038a:	428b      	cmp	r3, r1
 800038c:	d302      	bcc.n	8000394 <__udivmoddi4+0xd4>
 800038e:	4282      	cmp	r2, r0
 8000390:	f200 80f9 	bhi.w	8000586 <__udivmoddi4+0x2c6>
 8000394:	1a84      	subs	r4, r0, r2
 8000396:	eb61 0303 	sbc.w	r3, r1, r3
 800039a:	2001      	movs	r0, #1
 800039c:	469e      	mov	lr, r3
 800039e:	2d00      	cmp	r5, #0
 80003a0:	d0e0      	beq.n	8000364 <__udivmoddi4+0xa4>
 80003a2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003a6:	e7dd      	b.n	8000364 <__udivmoddi4+0xa4>
 80003a8:	b902      	cbnz	r2, 80003ac <__udivmoddi4+0xec>
 80003aa:	deff      	udf	#255	; 0xff
 80003ac:	fab2 f282 	clz	r2, r2
 80003b0:	2a00      	cmp	r2, #0
 80003b2:	f040 8092 	bne.w	80004da <__udivmoddi4+0x21a>
 80003b6:	eba1 010c 	sub.w	r1, r1, ip
 80003ba:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003be:	fa1f fe8c 	uxth.w	lr, ip
 80003c2:	2601      	movs	r6, #1
 80003c4:	0c20      	lsrs	r0, r4, #16
 80003c6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ca:	fb07 1113 	mls	r1, r7, r3, r1
 80003ce:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003d2:	fb0e f003 	mul.w	r0, lr, r3
 80003d6:	4288      	cmp	r0, r1
 80003d8:	d908      	bls.n	80003ec <__udivmoddi4+0x12c>
 80003da:	eb1c 0101 	adds.w	r1, ip, r1
 80003de:	f103 38ff 	add.w	r8, r3, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x12a>
 80003e4:	4288      	cmp	r0, r1
 80003e6:	f200 80cb 	bhi.w	8000580 <__udivmoddi4+0x2c0>
 80003ea:	4643      	mov	r3, r8
 80003ec:	1a09      	subs	r1, r1, r0
 80003ee:	b2a4      	uxth	r4, r4
 80003f0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003f4:	fb07 1110 	mls	r1, r7, r0, r1
 80003f8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003fc:	fb0e fe00 	mul.w	lr, lr, r0
 8000400:	45a6      	cmp	lr, r4
 8000402:	d908      	bls.n	8000416 <__udivmoddi4+0x156>
 8000404:	eb1c 0404 	adds.w	r4, ip, r4
 8000408:	f100 31ff 	add.w	r1, r0, #4294967295
 800040c:	d202      	bcs.n	8000414 <__udivmoddi4+0x154>
 800040e:	45a6      	cmp	lr, r4
 8000410:	f200 80bb 	bhi.w	800058a <__udivmoddi4+0x2ca>
 8000414:	4608      	mov	r0, r1
 8000416:	eba4 040e 	sub.w	r4, r4, lr
 800041a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800041e:	e79c      	b.n	800035a <__udivmoddi4+0x9a>
 8000420:	f1c6 0720 	rsb	r7, r6, #32
 8000424:	40b3      	lsls	r3, r6
 8000426:	fa22 fc07 	lsr.w	ip, r2, r7
 800042a:	ea4c 0c03 	orr.w	ip, ip, r3
 800042e:	fa20 f407 	lsr.w	r4, r0, r7
 8000432:	fa01 f306 	lsl.w	r3, r1, r6
 8000436:	431c      	orrs	r4, r3
 8000438:	40f9      	lsrs	r1, r7
 800043a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800043e:	fa00 f306 	lsl.w	r3, r0, r6
 8000442:	fbb1 f8f9 	udiv	r8, r1, r9
 8000446:	0c20      	lsrs	r0, r4, #16
 8000448:	fa1f fe8c 	uxth.w	lr, ip
 800044c:	fb09 1118 	mls	r1, r9, r8, r1
 8000450:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000454:	fb08 f00e 	mul.w	r0, r8, lr
 8000458:	4288      	cmp	r0, r1
 800045a:	fa02 f206 	lsl.w	r2, r2, r6
 800045e:	d90b      	bls.n	8000478 <__udivmoddi4+0x1b8>
 8000460:	eb1c 0101 	adds.w	r1, ip, r1
 8000464:	f108 3aff 	add.w	sl, r8, #4294967295
 8000468:	f080 8088 	bcs.w	800057c <__udivmoddi4+0x2bc>
 800046c:	4288      	cmp	r0, r1
 800046e:	f240 8085 	bls.w	800057c <__udivmoddi4+0x2bc>
 8000472:	f1a8 0802 	sub.w	r8, r8, #2
 8000476:	4461      	add	r1, ip
 8000478:	1a09      	subs	r1, r1, r0
 800047a:	b2a4      	uxth	r4, r4
 800047c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000480:	fb09 1110 	mls	r1, r9, r0, r1
 8000484:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000488:	fb00 fe0e 	mul.w	lr, r0, lr
 800048c:	458e      	cmp	lr, r1
 800048e:	d908      	bls.n	80004a2 <__udivmoddi4+0x1e2>
 8000490:	eb1c 0101 	adds.w	r1, ip, r1
 8000494:	f100 34ff 	add.w	r4, r0, #4294967295
 8000498:	d26c      	bcs.n	8000574 <__udivmoddi4+0x2b4>
 800049a:	458e      	cmp	lr, r1
 800049c:	d96a      	bls.n	8000574 <__udivmoddi4+0x2b4>
 800049e:	3802      	subs	r0, #2
 80004a0:	4461      	add	r1, ip
 80004a2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004a6:	fba0 9402 	umull	r9, r4, r0, r2
 80004aa:	eba1 010e 	sub.w	r1, r1, lr
 80004ae:	42a1      	cmp	r1, r4
 80004b0:	46c8      	mov	r8, r9
 80004b2:	46a6      	mov	lr, r4
 80004b4:	d356      	bcc.n	8000564 <__udivmoddi4+0x2a4>
 80004b6:	d053      	beq.n	8000560 <__udivmoddi4+0x2a0>
 80004b8:	b15d      	cbz	r5, 80004d2 <__udivmoddi4+0x212>
 80004ba:	ebb3 0208 	subs.w	r2, r3, r8
 80004be:	eb61 010e 	sbc.w	r1, r1, lr
 80004c2:	fa01 f707 	lsl.w	r7, r1, r7
 80004c6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ca:	40f1      	lsrs	r1, r6
 80004cc:	431f      	orrs	r7, r3
 80004ce:	e9c5 7100 	strd	r7, r1, [r5]
 80004d2:	2600      	movs	r6, #0
 80004d4:	4631      	mov	r1, r6
 80004d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004da:	f1c2 0320 	rsb	r3, r2, #32
 80004de:	40d8      	lsrs	r0, r3
 80004e0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004e4:	fa21 f303 	lsr.w	r3, r1, r3
 80004e8:	4091      	lsls	r1, r2
 80004ea:	4301      	orrs	r1, r0
 80004ec:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004f0:	fa1f fe8c 	uxth.w	lr, ip
 80004f4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004f8:	fb07 3610 	mls	r6, r7, r0, r3
 80004fc:	0c0b      	lsrs	r3, r1, #16
 80004fe:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000502:	fb00 f60e 	mul.w	r6, r0, lr
 8000506:	429e      	cmp	r6, r3
 8000508:	fa04 f402 	lsl.w	r4, r4, r2
 800050c:	d908      	bls.n	8000520 <__udivmoddi4+0x260>
 800050e:	eb1c 0303 	adds.w	r3, ip, r3
 8000512:	f100 38ff 	add.w	r8, r0, #4294967295
 8000516:	d22f      	bcs.n	8000578 <__udivmoddi4+0x2b8>
 8000518:	429e      	cmp	r6, r3
 800051a:	d92d      	bls.n	8000578 <__udivmoddi4+0x2b8>
 800051c:	3802      	subs	r0, #2
 800051e:	4463      	add	r3, ip
 8000520:	1b9b      	subs	r3, r3, r6
 8000522:	b289      	uxth	r1, r1
 8000524:	fbb3 f6f7 	udiv	r6, r3, r7
 8000528:	fb07 3316 	mls	r3, r7, r6, r3
 800052c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000530:	fb06 f30e 	mul.w	r3, r6, lr
 8000534:	428b      	cmp	r3, r1
 8000536:	d908      	bls.n	800054a <__udivmoddi4+0x28a>
 8000538:	eb1c 0101 	adds.w	r1, ip, r1
 800053c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000540:	d216      	bcs.n	8000570 <__udivmoddi4+0x2b0>
 8000542:	428b      	cmp	r3, r1
 8000544:	d914      	bls.n	8000570 <__udivmoddi4+0x2b0>
 8000546:	3e02      	subs	r6, #2
 8000548:	4461      	add	r1, ip
 800054a:	1ac9      	subs	r1, r1, r3
 800054c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000550:	e738      	b.n	80003c4 <__udivmoddi4+0x104>
 8000552:	462e      	mov	r6, r5
 8000554:	4628      	mov	r0, r5
 8000556:	e705      	b.n	8000364 <__udivmoddi4+0xa4>
 8000558:	4606      	mov	r6, r0
 800055a:	e6e3      	b.n	8000324 <__udivmoddi4+0x64>
 800055c:	4618      	mov	r0, r3
 800055e:	e6f8      	b.n	8000352 <__udivmoddi4+0x92>
 8000560:	454b      	cmp	r3, r9
 8000562:	d2a9      	bcs.n	80004b8 <__udivmoddi4+0x1f8>
 8000564:	ebb9 0802 	subs.w	r8, r9, r2
 8000568:	eb64 0e0c 	sbc.w	lr, r4, ip
 800056c:	3801      	subs	r0, #1
 800056e:	e7a3      	b.n	80004b8 <__udivmoddi4+0x1f8>
 8000570:	4646      	mov	r6, r8
 8000572:	e7ea      	b.n	800054a <__udivmoddi4+0x28a>
 8000574:	4620      	mov	r0, r4
 8000576:	e794      	b.n	80004a2 <__udivmoddi4+0x1e2>
 8000578:	4640      	mov	r0, r8
 800057a:	e7d1      	b.n	8000520 <__udivmoddi4+0x260>
 800057c:	46d0      	mov	r8, sl
 800057e:	e77b      	b.n	8000478 <__udivmoddi4+0x1b8>
 8000580:	3b02      	subs	r3, #2
 8000582:	4461      	add	r1, ip
 8000584:	e732      	b.n	80003ec <__udivmoddi4+0x12c>
 8000586:	4630      	mov	r0, r6
 8000588:	e709      	b.n	800039e <__udivmoddi4+0xde>
 800058a:	4464      	add	r4, ip
 800058c:	3802      	subs	r0, #2
 800058e:	e742      	b.n	8000416 <__udivmoddi4+0x156>

08000590 <__aeabi_idiv0>:
 8000590:	4770      	bx	lr
 8000592:	bf00      	nop

08000594 <SELECT>:
 * SPI functions
 **************************************/

/* slave select */
static void SELECT(void)
{
 8000594:	b580      	push	{r7, lr}
 8000596:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_RESET);
 8000598:	2200      	movs	r2, #0
 800059a:	2110      	movs	r1, #16
 800059c:	4803      	ldr	r0, [pc, #12]	; (80005ac <SELECT+0x18>)
 800059e:	f006 fcf5 	bl	8006f8c <HAL_GPIO_WritePin>
	HAL_Delay(1);
 80005a2:	2001      	movs	r0, #1
 80005a4:	f006 f980 	bl	80068a8 <HAL_Delay>
}
 80005a8:	bf00      	nop
 80005aa:	bd80      	pop	{r7, pc}
 80005ac:	40020000 	.word	0x40020000

080005b0 <DESELECT>:

/* slave deselect */
static void DESELECT(void)
{
 80005b0:	b580      	push	{r7, lr}
 80005b2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_SET);
 80005b4:	2201      	movs	r2, #1
 80005b6:	2110      	movs	r1, #16
 80005b8:	4803      	ldr	r0, [pc, #12]	; (80005c8 <DESELECT+0x18>)
 80005ba:	f006 fce7 	bl	8006f8c <HAL_GPIO_WritePin>
	HAL_Delay(1);
 80005be:	2001      	movs	r0, #1
 80005c0:	f006 f972 	bl	80068a8 <HAL_Delay>
}
 80005c4:	bf00      	nop
 80005c6:	bd80      	pop	{r7, pc}
 80005c8:	40020000 	.word	0x40020000

080005cc <SPI_TxByte>:

/* SPI transmit a byte */
static void SPI_TxByte(uint8_t data)
{
 80005cc:	b580      	push	{r7, lr}
 80005ce:	b082      	sub	sp, #8
 80005d0:	af00      	add	r7, sp, #0
 80005d2:	4603      	mov	r3, r0
 80005d4:	71fb      	strb	r3, [r7, #7]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 80005d6:	bf00      	nop
 80005d8:	4b08      	ldr	r3, [pc, #32]	; (80005fc <SPI_TxByte+0x30>)
 80005da:	681b      	ldr	r3, [r3, #0]
 80005dc:	689b      	ldr	r3, [r3, #8]
 80005de:	f003 0302 	and.w	r3, r3, #2
 80005e2:	2b02      	cmp	r3, #2
 80005e4:	d1f8      	bne.n	80005d8 <SPI_TxByte+0xc>
	HAL_SPI_Transmit(HSPI_SDCARD, &data, 1, SPI_TIMEOUT);
 80005e6:	1df9      	adds	r1, r7, #7
 80005e8:	2364      	movs	r3, #100	; 0x64
 80005ea:	2201      	movs	r2, #1
 80005ec:	4803      	ldr	r0, [pc, #12]	; (80005fc <SPI_TxByte+0x30>)
 80005ee:	f008 fa26 	bl	8008a3e <HAL_SPI_Transmit>
}
 80005f2:	bf00      	nop
 80005f4:	3708      	adds	r7, #8
 80005f6:	46bd      	mov	sp, r7
 80005f8:	bd80      	pop	{r7, pc}
 80005fa:	bf00      	nop
 80005fc:	2000017c 	.word	0x2000017c

08000600 <SPI_TxBuffer>:

/* SPI transmit buffer */
static void SPI_TxBuffer(uint8_t *buffer, uint16_t len)
{
 8000600:	b580      	push	{r7, lr}
 8000602:	b082      	sub	sp, #8
 8000604:	af00      	add	r7, sp, #0
 8000606:	6078      	str	r0, [r7, #4]
 8000608:	460b      	mov	r3, r1
 800060a:	807b      	strh	r3, [r7, #2]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 800060c:	bf00      	nop
 800060e:	4b08      	ldr	r3, [pc, #32]	; (8000630 <SPI_TxBuffer+0x30>)
 8000610:	681b      	ldr	r3, [r3, #0]
 8000612:	689b      	ldr	r3, [r3, #8]
 8000614:	f003 0302 	and.w	r3, r3, #2
 8000618:	2b02      	cmp	r3, #2
 800061a:	d1f8      	bne.n	800060e <SPI_TxBuffer+0xe>
	HAL_SPI_Transmit(HSPI_SDCARD, buffer, len, SPI_TIMEOUT);
 800061c:	887a      	ldrh	r2, [r7, #2]
 800061e:	2364      	movs	r3, #100	; 0x64
 8000620:	6879      	ldr	r1, [r7, #4]
 8000622:	4803      	ldr	r0, [pc, #12]	; (8000630 <SPI_TxBuffer+0x30>)
 8000624:	f008 fa0b 	bl	8008a3e <HAL_SPI_Transmit>
}
 8000628:	bf00      	nop
 800062a:	3708      	adds	r7, #8
 800062c:	46bd      	mov	sp, r7
 800062e:	bd80      	pop	{r7, pc}
 8000630:	2000017c 	.word	0x2000017c

08000634 <SPI_RxByte>:

/* SPI receive a byte */
static uint8_t SPI_RxByte(void)
{
 8000634:	b580      	push	{r7, lr}
 8000636:	b084      	sub	sp, #16
 8000638:	af02      	add	r7, sp, #8
	uint8_t dummy, data;
	dummy = 0xFF;
 800063a:	23ff      	movs	r3, #255	; 0xff
 800063c:	71fb      	strb	r3, [r7, #7]

	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 800063e:	bf00      	nop
 8000640:	4b09      	ldr	r3, [pc, #36]	; (8000668 <SPI_RxByte+0x34>)
 8000642:	681b      	ldr	r3, [r3, #0]
 8000644:	689b      	ldr	r3, [r3, #8]
 8000646:	f003 0302 	and.w	r3, r3, #2
 800064a:	2b02      	cmp	r3, #2
 800064c:	d1f8      	bne.n	8000640 <SPI_RxByte+0xc>
	HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 800064e:	1dba      	adds	r2, r7, #6
 8000650:	1df9      	adds	r1, r7, #7
 8000652:	2364      	movs	r3, #100	; 0x64
 8000654:	9300      	str	r3, [sp, #0]
 8000656:	2301      	movs	r3, #1
 8000658:	4803      	ldr	r0, [pc, #12]	; (8000668 <SPI_RxByte+0x34>)
 800065a:	f008 fb2c 	bl	8008cb6 <HAL_SPI_TransmitReceive>

	return data;
 800065e:	79bb      	ldrb	r3, [r7, #6]
}
 8000660:	4618      	mov	r0, r3
 8000662:	3708      	adds	r7, #8
 8000664:	46bd      	mov	sp, r7
 8000666:	bd80      	pop	{r7, pc}
 8000668:	2000017c 	.word	0x2000017c

0800066c <SPI_RxBytePtr>:

/* SPI receive a byte via pointer */
static void SPI_RxBytePtr(uint8_t *buff) 
{
 800066c:	b580      	push	{r7, lr}
 800066e:	b082      	sub	sp, #8
 8000670:	af00      	add	r7, sp, #0
 8000672:	6078      	str	r0, [r7, #4]
	*buff = SPI_RxByte();
 8000674:	f7ff ffde 	bl	8000634 <SPI_RxByte>
 8000678:	4603      	mov	r3, r0
 800067a:	461a      	mov	r2, r3
 800067c:	687b      	ldr	r3, [r7, #4]
 800067e:	701a      	strb	r2, [r3, #0]
}
 8000680:	bf00      	nop
 8000682:	3708      	adds	r7, #8
 8000684:	46bd      	mov	sp, r7
 8000686:	bd80      	pop	{r7, pc}

08000688 <SD_ReadyWait>:
 * SD functions
 **************************************/

/* wait SD ready */
static uint8_t SD_ReadyWait(void)
{
 8000688:	b580      	push	{r7, lr}
 800068a:	b082      	sub	sp, #8
 800068c:	af00      	add	r7, sp, #0
	uint8_t res;

	/* timeout 500ms */
	Timer2 = 500;
 800068e:	4b0a      	ldr	r3, [pc, #40]	; (80006b8 <SD_ReadyWait+0x30>)
 8000690:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8000694:	801a      	strh	r2, [r3, #0]

	/* if SD goes ready, receives 0xFF */
	do {
		res = SPI_RxByte();
 8000696:	f7ff ffcd 	bl	8000634 <SPI_RxByte>
 800069a:	4603      	mov	r3, r0
 800069c:	71fb      	strb	r3, [r7, #7]
	} while ((res != 0xFF) && Timer2);
 800069e:	79fb      	ldrb	r3, [r7, #7]
 80006a0:	2bff      	cmp	r3, #255	; 0xff
 80006a2:	d004      	beq.n	80006ae <SD_ReadyWait+0x26>
 80006a4:	4b04      	ldr	r3, [pc, #16]	; (80006b8 <SD_ReadyWait+0x30>)
 80006a6:	881b      	ldrh	r3, [r3, #0]
 80006a8:	b29b      	uxth	r3, r3
 80006aa:	2b00      	cmp	r3, #0
 80006ac:	d1f3      	bne.n	8000696 <SD_ReadyWait+0xe>

	return res;
 80006ae:	79fb      	ldrb	r3, [r7, #7]
}
 80006b0:	4618      	mov	r0, r3
 80006b2:	3708      	adds	r7, #8
 80006b4:	46bd      	mov	sp, r7
 80006b6:	bd80      	pop	{r7, pc}
 80006b8:	20002496 	.word	0x20002496

080006bc <SD_PowerOn>:

/* power on */
static void SD_PowerOn(void) 
{
 80006bc:	b580      	push	{r7, lr}
 80006be:	b084      	sub	sp, #16
 80006c0:	af00      	add	r7, sp, #0
	uint8_t args[6];
	uint32_t cnt = 0x1FFF;
 80006c2:	f641 73ff 	movw	r3, #8191	; 0x1fff
 80006c6:	60fb      	str	r3, [r7, #12]

	/* transmit bytes to wake up */
	DESELECT();
 80006c8:	f7ff ff72 	bl	80005b0 <DESELECT>
	for(int i = 0; i < 10; i++)
 80006cc:	2300      	movs	r3, #0
 80006ce:	60bb      	str	r3, [r7, #8]
 80006d0:	e005      	b.n	80006de <SD_PowerOn+0x22>
	{
		SPI_TxByte(0xFF);
 80006d2:	20ff      	movs	r0, #255	; 0xff
 80006d4:	f7ff ff7a 	bl	80005cc <SPI_TxByte>
	for(int i = 0; i < 10; i++)
 80006d8:	68bb      	ldr	r3, [r7, #8]
 80006da:	3301      	adds	r3, #1
 80006dc:	60bb      	str	r3, [r7, #8]
 80006de:	68bb      	ldr	r3, [r7, #8]
 80006e0:	2b09      	cmp	r3, #9
 80006e2:	ddf6      	ble.n	80006d2 <SD_PowerOn+0x16>
	}

	/* slave select */
	SELECT();
 80006e4:	f7ff ff56 	bl	8000594 <SELECT>

	/* make idle state */
	args[0] = CMD0;		/* CMD0:GO_IDLE_STATE */
 80006e8:	2340      	movs	r3, #64	; 0x40
 80006ea:	703b      	strb	r3, [r7, #0]
	args[1] = 0;
 80006ec:	2300      	movs	r3, #0
 80006ee:	707b      	strb	r3, [r7, #1]
	args[2] = 0;
 80006f0:	2300      	movs	r3, #0
 80006f2:	70bb      	strb	r3, [r7, #2]
	args[3] = 0;
 80006f4:	2300      	movs	r3, #0
 80006f6:	70fb      	strb	r3, [r7, #3]
	args[4] = 0;
 80006f8:	2300      	movs	r3, #0
 80006fa:	713b      	strb	r3, [r7, #4]
	args[5] = 0x95;		/* CRC */
 80006fc:	2395      	movs	r3, #149	; 0x95
 80006fe:	717b      	strb	r3, [r7, #5]

	SPI_TxBuffer(args, sizeof(args));
 8000700:	463b      	mov	r3, r7
 8000702:	2106      	movs	r1, #6
 8000704:	4618      	mov	r0, r3
 8000706:	f7ff ff7b 	bl	8000600 <SPI_TxBuffer>

	/* wait response */
	while ((SPI_RxByte() != 0x01) && cnt)
 800070a:	e002      	b.n	8000712 <SD_PowerOn+0x56>
	{
		cnt--;
 800070c:	68fb      	ldr	r3, [r7, #12]
 800070e:	3b01      	subs	r3, #1
 8000710:	60fb      	str	r3, [r7, #12]
	while ((SPI_RxByte() != 0x01) && cnt)
 8000712:	f7ff ff8f 	bl	8000634 <SPI_RxByte>
 8000716:	4603      	mov	r3, r0
 8000718:	2b01      	cmp	r3, #1
 800071a:	d002      	beq.n	8000722 <SD_PowerOn+0x66>
 800071c:	68fb      	ldr	r3, [r7, #12]
 800071e:	2b00      	cmp	r3, #0
 8000720:	d1f4      	bne.n	800070c <SD_PowerOn+0x50>
	}

	DESELECT();
 8000722:	f7ff ff45 	bl	80005b0 <DESELECT>
	SPI_TxByte(0XFF);
 8000726:	20ff      	movs	r0, #255	; 0xff
 8000728:	f7ff ff50 	bl	80005cc <SPI_TxByte>

	PowerFlag = 1;
 800072c:	4b03      	ldr	r3, [pc, #12]	; (800073c <SD_PowerOn+0x80>)
 800072e:	2201      	movs	r2, #1
 8000730:	701a      	strb	r2, [r3, #0]
}
 8000732:	bf00      	nop
 8000734:	3710      	adds	r7, #16
 8000736:	46bd      	mov	sp, r7
 8000738:	bd80      	pop	{r7, pc}
 800073a:	bf00      	nop
 800073c:	20000179 	.word	0x20000179

08000740 <SD_PowerOff>:

/* power off */
static void SD_PowerOff(void) 
{
 8000740:	b480      	push	{r7}
 8000742:	af00      	add	r7, sp, #0
	PowerFlag = 0;
 8000744:	4b03      	ldr	r3, [pc, #12]	; (8000754 <SD_PowerOff+0x14>)
 8000746:	2200      	movs	r2, #0
 8000748:	701a      	strb	r2, [r3, #0]
}
 800074a:	bf00      	nop
 800074c:	46bd      	mov	sp, r7
 800074e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000752:	4770      	bx	lr
 8000754:	20000179 	.word	0x20000179

08000758 <SD_CheckPower>:

/* check power flag */
static uint8_t SD_CheckPower(void) 
{
 8000758:	b480      	push	{r7}
 800075a:	af00      	add	r7, sp, #0
	return PowerFlag;
 800075c:	4b03      	ldr	r3, [pc, #12]	; (800076c <SD_CheckPower+0x14>)
 800075e:	781b      	ldrb	r3, [r3, #0]
}
 8000760:	4618      	mov	r0, r3
 8000762:	46bd      	mov	sp, r7
 8000764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000768:	4770      	bx	lr
 800076a:	bf00      	nop
 800076c:	20000179 	.word	0x20000179

08000770 <SD_RxDataBlock>:

/* receive data block */
static bool SD_RxDataBlock(BYTE *buff, UINT len)
{
 8000770:	b580      	push	{r7, lr}
 8000772:	b084      	sub	sp, #16
 8000774:	af00      	add	r7, sp, #0
 8000776:	6078      	str	r0, [r7, #4]
 8000778:	6039      	str	r1, [r7, #0]
	uint8_t token;

	/* timeout 200ms */
	Timer1 = 200;
 800077a:	4b14      	ldr	r3, [pc, #80]	; (80007cc <SD_RxDataBlock+0x5c>)
 800077c:	22c8      	movs	r2, #200	; 0xc8
 800077e:	801a      	strh	r2, [r3, #0]

	/* loop until receive a response or timeout */
	do {
		token = SPI_RxByte();
 8000780:	f7ff ff58 	bl	8000634 <SPI_RxByte>
 8000784:	4603      	mov	r3, r0
 8000786:	73fb      	strb	r3, [r7, #15]
	} while((token == 0xFF) && Timer1);
 8000788:	7bfb      	ldrb	r3, [r7, #15]
 800078a:	2bff      	cmp	r3, #255	; 0xff
 800078c:	d104      	bne.n	8000798 <SD_RxDataBlock+0x28>
 800078e:	4b0f      	ldr	r3, [pc, #60]	; (80007cc <SD_RxDataBlock+0x5c>)
 8000790:	881b      	ldrh	r3, [r3, #0]
 8000792:	b29b      	uxth	r3, r3
 8000794:	2b00      	cmp	r3, #0
 8000796:	d1f3      	bne.n	8000780 <SD_RxDataBlock+0x10>

	/* invalid response */
	if(token != 0xFE) return FALSE;
 8000798:	7bfb      	ldrb	r3, [r7, #15]
 800079a:	2bfe      	cmp	r3, #254	; 0xfe
 800079c:	d001      	beq.n	80007a2 <SD_RxDataBlock+0x32>
 800079e:	2300      	movs	r3, #0
 80007a0:	e00f      	b.n	80007c2 <SD_RxDataBlock+0x52>

	/* receive data */
	do {
		SPI_RxBytePtr(buff++);
 80007a2:	687b      	ldr	r3, [r7, #4]
 80007a4:	1c5a      	adds	r2, r3, #1
 80007a6:	607a      	str	r2, [r7, #4]
 80007a8:	4618      	mov	r0, r3
 80007aa:	f7ff ff5f 	bl	800066c <SPI_RxBytePtr>
	} while(len--);
 80007ae:	683b      	ldr	r3, [r7, #0]
 80007b0:	1e5a      	subs	r2, r3, #1
 80007b2:	603a      	str	r2, [r7, #0]
 80007b4:	2b00      	cmp	r3, #0
 80007b6:	d1f4      	bne.n	80007a2 <SD_RxDataBlock+0x32>

	/* discard CRC */
	SPI_RxByte();
 80007b8:	f7ff ff3c 	bl	8000634 <SPI_RxByte>
	SPI_RxByte();
 80007bc:	f7ff ff3a 	bl	8000634 <SPI_RxByte>

	return TRUE;
 80007c0:	2301      	movs	r3, #1
}
 80007c2:	4618      	mov	r0, r3
 80007c4:	3710      	adds	r7, #16
 80007c6:	46bd      	mov	sp, r7
 80007c8:	bd80      	pop	{r7, pc}
 80007ca:	bf00      	nop
 80007cc:	20002495 	.word	0x20002495

080007d0 <SD_TxDataBlock>:

/* transmit data block */
#if _USE_WRITE == 1
static bool SD_TxDataBlock(const uint8_t *buff, BYTE token)
{
 80007d0:	b580      	push	{r7, lr}
 80007d2:	b084      	sub	sp, #16
 80007d4:	af00      	add	r7, sp, #0
 80007d6:	6078      	str	r0, [r7, #4]
 80007d8:	460b      	mov	r3, r1
 80007da:	70fb      	strb	r3, [r7, #3]
	uint8_t resp;
	uint8_t i = 0;
 80007dc:	2300      	movs	r3, #0
 80007de:	73bb      	strb	r3, [r7, #14]

	/* wait SD ready */
	if (SD_ReadyWait() != 0xFF) return FALSE;
 80007e0:	f7ff ff52 	bl	8000688 <SD_ReadyWait>
 80007e4:	4603      	mov	r3, r0
 80007e6:	2bff      	cmp	r3, #255	; 0xff
 80007e8:	d001      	beq.n	80007ee <SD_TxDataBlock+0x1e>
 80007ea:	2300      	movs	r3, #0
 80007ec:	e02f      	b.n	800084e <SD_TxDataBlock+0x7e>

	/* transmit token */
	SPI_TxByte(token);
 80007ee:	78fb      	ldrb	r3, [r7, #3]
 80007f0:	4618      	mov	r0, r3
 80007f2:	f7ff feeb 	bl	80005cc <SPI_TxByte>

	/* if it's not STOP token, transmit data */
	if (token != 0xFD)
 80007f6:	78fb      	ldrb	r3, [r7, #3]
 80007f8:	2bfd      	cmp	r3, #253	; 0xfd
 80007fa:	d020      	beq.n	800083e <SD_TxDataBlock+0x6e>
	{
		SPI_TxBuffer((uint8_t*)buff, 512);
 80007fc:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000800:	6878      	ldr	r0, [r7, #4]
 8000802:	f7ff fefd 	bl	8000600 <SPI_TxBuffer>

		/* discard CRC */
		SPI_RxByte();
 8000806:	f7ff ff15 	bl	8000634 <SPI_RxByte>
		SPI_RxByte();
 800080a:	f7ff ff13 	bl	8000634 <SPI_RxByte>

		/* receive response */
		while (i <= 64)
 800080e:	e00b      	b.n	8000828 <SD_TxDataBlock+0x58>
		{
			resp = SPI_RxByte();
 8000810:	f7ff ff10 	bl	8000634 <SPI_RxByte>
 8000814:	4603      	mov	r3, r0
 8000816:	73fb      	strb	r3, [r7, #15]

			/* transmit 0x05 accepted */
			if ((resp & 0x1F) == 0x05) break;
 8000818:	7bfb      	ldrb	r3, [r7, #15]
 800081a:	f003 031f 	and.w	r3, r3, #31
 800081e:	2b05      	cmp	r3, #5
 8000820:	d006      	beq.n	8000830 <SD_TxDataBlock+0x60>
			i++;
 8000822:	7bbb      	ldrb	r3, [r7, #14]
 8000824:	3301      	adds	r3, #1
 8000826:	73bb      	strb	r3, [r7, #14]
		while (i <= 64)
 8000828:	7bbb      	ldrb	r3, [r7, #14]
 800082a:	2b40      	cmp	r3, #64	; 0x40
 800082c:	d9f0      	bls.n	8000810 <SD_TxDataBlock+0x40>
 800082e:	e000      	b.n	8000832 <SD_TxDataBlock+0x62>
			if ((resp & 0x1F) == 0x05) break;
 8000830:	bf00      	nop
		}

		/* recv buffer clear */
		while (SPI_RxByte() == 0);
 8000832:	bf00      	nop
 8000834:	f7ff fefe 	bl	8000634 <SPI_RxByte>
 8000838:	4603      	mov	r3, r0
 800083a:	2b00      	cmp	r3, #0
 800083c:	d0fa      	beq.n	8000834 <SD_TxDataBlock+0x64>
	}

	/* transmit 0x05 accepted */
	if ((resp & 0x1F) == 0x05) return TRUE;
 800083e:	7bfb      	ldrb	r3, [r7, #15]
 8000840:	f003 031f 	and.w	r3, r3, #31
 8000844:	2b05      	cmp	r3, #5
 8000846:	d101      	bne.n	800084c <SD_TxDataBlock+0x7c>
 8000848:	2301      	movs	r3, #1
 800084a:	e000      	b.n	800084e <SD_TxDataBlock+0x7e>

	return FALSE;
 800084c:	2300      	movs	r3, #0
}
 800084e:	4618      	mov	r0, r3
 8000850:	3710      	adds	r7, #16
 8000852:	46bd      	mov	sp, r7
 8000854:	bd80      	pop	{r7, pc}

08000856 <SD_SendCmd>:
#endif /* _USE_WRITE */

/* transmit command */
static BYTE SD_SendCmd(BYTE cmd, uint32_t arg)
{
 8000856:	b580      	push	{r7, lr}
 8000858:	b084      	sub	sp, #16
 800085a:	af00      	add	r7, sp, #0
 800085c:	4603      	mov	r3, r0
 800085e:	6039      	str	r1, [r7, #0]
 8000860:	71fb      	strb	r3, [r7, #7]
	uint8_t crc, res;

	/* wait SD ready */
	if (SD_ReadyWait() != 0xFF) return 0xFF;
 8000862:	f7ff ff11 	bl	8000688 <SD_ReadyWait>
 8000866:	4603      	mov	r3, r0
 8000868:	2bff      	cmp	r3, #255	; 0xff
 800086a:	d001      	beq.n	8000870 <SD_SendCmd+0x1a>
 800086c:	23ff      	movs	r3, #255	; 0xff
 800086e:	e042      	b.n	80008f6 <SD_SendCmd+0xa0>

	/* transmit command */
	SPI_TxByte(cmd); 					/* Command */
 8000870:	79fb      	ldrb	r3, [r7, #7]
 8000872:	4618      	mov	r0, r3
 8000874:	f7ff feaa 	bl	80005cc <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 24)); 	/* Argument[31..24] */
 8000878:	683b      	ldr	r3, [r7, #0]
 800087a:	0e1b      	lsrs	r3, r3, #24
 800087c:	b2db      	uxtb	r3, r3
 800087e:	4618      	mov	r0, r3
 8000880:	f7ff fea4 	bl	80005cc <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 16)); 	/* Argument[23..16] */
 8000884:	683b      	ldr	r3, [r7, #0]
 8000886:	0c1b      	lsrs	r3, r3, #16
 8000888:	b2db      	uxtb	r3, r3
 800088a:	4618      	mov	r0, r3
 800088c:	f7ff fe9e 	bl	80005cc <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 8)); 	/* Argument[15..8] */
 8000890:	683b      	ldr	r3, [r7, #0]
 8000892:	0a1b      	lsrs	r3, r3, #8
 8000894:	b2db      	uxtb	r3, r3
 8000896:	4618      	mov	r0, r3
 8000898:	f7ff fe98 	bl	80005cc <SPI_TxByte>
	SPI_TxByte((uint8_t)arg); 			/* Argument[7..0] */
 800089c:	683b      	ldr	r3, [r7, #0]
 800089e:	b2db      	uxtb	r3, r3
 80008a0:	4618      	mov	r0, r3
 80008a2:	f7ff fe93 	bl	80005cc <SPI_TxByte>

	/* prepare CRC */
	if(cmd == CMD0) crc = 0x95;	/* CRC for CMD0(0) */
 80008a6:	79fb      	ldrb	r3, [r7, #7]
 80008a8:	2b40      	cmp	r3, #64	; 0x40
 80008aa:	d102      	bne.n	80008b2 <SD_SendCmd+0x5c>
 80008ac:	2395      	movs	r3, #149	; 0x95
 80008ae:	73fb      	strb	r3, [r7, #15]
 80008b0:	e007      	b.n	80008c2 <SD_SendCmd+0x6c>
	else if(cmd == CMD8) crc = 0x87;	/* CRC for CMD8(0x1AA) */
 80008b2:	79fb      	ldrb	r3, [r7, #7]
 80008b4:	2b48      	cmp	r3, #72	; 0x48
 80008b6:	d102      	bne.n	80008be <SD_SendCmd+0x68>
 80008b8:	2387      	movs	r3, #135	; 0x87
 80008ba:	73fb      	strb	r3, [r7, #15]
 80008bc:	e001      	b.n	80008c2 <SD_SendCmd+0x6c>
	else crc = 1;
 80008be:	2301      	movs	r3, #1
 80008c0:	73fb      	strb	r3, [r7, #15]

	/* transmit CRC */
	SPI_TxByte(crc);
 80008c2:	7bfb      	ldrb	r3, [r7, #15]
 80008c4:	4618      	mov	r0, r3
 80008c6:	f7ff fe81 	bl	80005cc <SPI_TxByte>

	/* Skip a stuff byte when STOP_TRANSMISSION */
	if (cmd == CMD12) SPI_RxByte();
 80008ca:	79fb      	ldrb	r3, [r7, #7]
 80008cc:	2b4c      	cmp	r3, #76	; 0x4c
 80008ce:	d101      	bne.n	80008d4 <SD_SendCmd+0x7e>
 80008d0:	f7ff feb0 	bl	8000634 <SPI_RxByte>

	/* receive response */
	uint8_t n = 10;
 80008d4:	230a      	movs	r3, #10
 80008d6:	73bb      	strb	r3, [r7, #14]
	do {
		res = SPI_RxByte();
 80008d8:	f7ff feac 	bl	8000634 <SPI_RxByte>
 80008dc:	4603      	mov	r3, r0
 80008de:	737b      	strb	r3, [r7, #13]
	} while ((res & 0x80) && --n);
 80008e0:	f997 300d 	ldrsb.w	r3, [r7, #13]
 80008e4:	2b00      	cmp	r3, #0
 80008e6:	da05      	bge.n	80008f4 <SD_SendCmd+0x9e>
 80008e8:	7bbb      	ldrb	r3, [r7, #14]
 80008ea:	3b01      	subs	r3, #1
 80008ec:	73bb      	strb	r3, [r7, #14]
 80008ee:	7bbb      	ldrb	r3, [r7, #14]
 80008f0:	2b00      	cmp	r3, #0
 80008f2:	d1f1      	bne.n	80008d8 <SD_SendCmd+0x82>

	return res;
 80008f4:	7b7b      	ldrb	r3, [r7, #13]
}
 80008f6:	4618      	mov	r0, r3
 80008f8:	3710      	adds	r7, #16
 80008fa:	46bd      	mov	sp, r7
 80008fc:	bd80      	pop	{r7, pc}
	...

08000900 <SD_disk_initialize>:
 * user_diskio.c functions
 **************************************/

/* initialize SD */
DSTATUS SD_disk_initialize(BYTE drv) 
{
 8000900:	b590      	push	{r4, r7, lr}
 8000902:	b085      	sub	sp, #20
 8000904:	af00      	add	r7, sp, #0
 8000906:	4603      	mov	r3, r0
 8000908:	71fb      	strb	r3, [r7, #7]
	uint8_t n, type, ocr[4];

	/* single drive, drv should be 0 */
	if(drv) return STA_NOINIT;
 800090a:	79fb      	ldrb	r3, [r7, #7]
 800090c:	2b00      	cmp	r3, #0
 800090e:	d001      	beq.n	8000914 <SD_disk_initialize+0x14>
 8000910:	2301      	movs	r3, #1
 8000912:	e0d6      	b.n	8000ac2 <SD_disk_initialize+0x1c2>

	/* no disk */
	if(Stat & STA_NODISK) return Stat;
 8000914:	4b6d      	ldr	r3, [pc, #436]	; (8000acc <SD_disk_initialize+0x1cc>)
 8000916:	781b      	ldrb	r3, [r3, #0]
 8000918:	b2db      	uxtb	r3, r3
 800091a:	f003 0302 	and.w	r3, r3, #2
 800091e:	2b00      	cmp	r3, #0
 8000920:	d003      	beq.n	800092a <SD_disk_initialize+0x2a>
 8000922:	4b6a      	ldr	r3, [pc, #424]	; (8000acc <SD_disk_initialize+0x1cc>)
 8000924:	781b      	ldrb	r3, [r3, #0]
 8000926:	b2db      	uxtb	r3, r3
 8000928:	e0cb      	b.n	8000ac2 <SD_disk_initialize+0x1c2>

	/* power on */
	SD_PowerOn();
 800092a:	f7ff fec7 	bl	80006bc <SD_PowerOn>

	/* slave select */
	SELECT();
 800092e:	f7ff fe31 	bl	8000594 <SELECT>

	/* check disk type */
	type = 0;
 8000932:	2300      	movs	r3, #0
 8000934:	73bb      	strb	r3, [r7, #14]

	/* send GO_IDLE_STATE command */
	if (SD_SendCmd(CMD0, 0) == 1)
 8000936:	2100      	movs	r1, #0
 8000938:	2040      	movs	r0, #64	; 0x40
 800093a:	f7ff ff8c 	bl	8000856 <SD_SendCmd>
 800093e:	4603      	mov	r3, r0
 8000940:	2b01      	cmp	r3, #1
 8000942:	f040 80a6 	bne.w	8000a92 <SD_disk_initialize+0x192>
	{
		/* timeout 1 sec */
		Timer1 = 1000;
 8000946:	4b62      	ldr	r3, [pc, #392]	; (8000ad0 <SD_disk_initialize+0x1d0>)
 8000948:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800094c:	801a      	strh	r2, [r3, #0]

		/* SDC V2+ accept CMD8 command, http://elm-chan.org/docs/mmc/mmc_e.html */
		if (SD_SendCmd(CMD8, 0x1AA) == 1)
 800094e:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8000952:	2048      	movs	r0, #72	; 0x48
 8000954:	f7ff ff7f 	bl	8000856 <SD_SendCmd>
 8000958:	4603      	mov	r3, r0
 800095a:	2b01      	cmp	r3, #1
 800095c:	d158      	bne.n	8000a10 <SD_disk_initialize+0x110>
		{
			/* operation condition register */
			for (n = 0; n < 4; n++)
 800095e:	2300      	movs	r3, #0
 8000960:	73fb      	strb	r3, [r7, #15]
 8000962:	e00c      	b.n	800097e <SD_disk_initialize+0x7e>
			{
				ocr[n] = SPI_RxByte();
 8000964:	7bfc      	ldrb	r4, [r7, #15]
 8000966:	f7ff fe65 	bl	8000634 <SPI_RxByte>
 800096a:	4603      	mov	r3, r0
 800096c:	461a      	mov	r2, r3
 800096e:	f104 0310 	add.w	r3, r4, #16
 8000972:	443b      	add	r3, r7
 8000974:	f803 2c08 	strb.w	r2, [r3, #-8]
			for (n = 0; n < 4; n++)
 8000978:	7bfb      	ldrb	r3, [r7, #15]
 800097a:	3301      	adds	r3, #1
 800097c:	73fb      	strb	r3, [r7, #15]
 800097e:	7bfb      	ldrb	r3, [r7, #15]
 8000980:	2b03      	cmp	r3, #3
 8000982:	d9ef      	bls.n	8000964 <SD_disk_initialize+0x64>
			}

			/* voltage range 2.7-3.6V */
			if (ocr[2] == 0x01 && ocr[3] == 0xAA)
 8000984:	7abb      	ldrb	r3, [r7, #10]
 8000986:	2b01      	cmp	r3, #1
 8000988:	f040 8083 	bne.w	8000a92 <SD_disk_initialize+0x192>
 800098c:	7afb      	ldrb	r3, [r7, #11]
 800098e:	2baa      	cmp	r3, #170	; 0xaa
 8000990:	d17f      	bne.n	8000a92 <SD_disk_initialize+0x192>
			{
				/* ACMD41 with HCS bit */
				do {
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 8000992:	2100      	movs	r1, #0
 8000994:	2077      	movs	r0, #119	; 0x77
 8000996:	f7ff ff5e 	bl	8000856 <SD_SendCmd>
 800099a:	4603      	mov	r3, r0
 800099c:	2b01      	cmp	r3, #1
 800099e:	d807      	bhi.n	80009b0 <SD_disk_initialize+0xb0>
 80009a0:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 80009a4:	2069      	movs	r0, #105	; 0x69
 80009a6:	f7ff ff56 	bl	8000856 <SD_SendCmd>
 80009aa:	4603      	mov	r3, r0
 80009ac:	2b00      	cmp	r3, #0
 80009ae:	d005      	beq.n	80009bc <SD_disk_initialize+0xbc>
				} while (Timer1);
 80009b0:	4b47      	ldr	r3, [pc, #284]	; (8000ad0 <SD_disk_initialize+0x1d0>)
 80009b2:	881b      	ldrh	r3, [r3, #0]
 80009b4:	b29b      	uxth	r3, r3
 80009b6:	2b00      	cmp	r3, #0
 80009b8:	d1eb      	bne.n	8000992 <SD_disk_initialize+0x92>
 80009ba:	e000      	b.n	80009be <SD_disk_initialize+0xbe>
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 80009bc:	bf00      	nop

				/* READ_OCR */
				if (Timer1 && SD_SendCmd(CMD58, 0) == 0)
 80009be:	4b44      	ldr	r3, [pc, #272]	; (8000ad0 <SD_disk_initialize+0x1d0>)
 80009c0:	881b      	ldrh	r3, [r3, #0]
 80009c2:	b29b      	uxth	r3, r3
 80009c4:	2b00      	cmp	r3, #0
 80009c6:	d064      	beq.n	8000a92 <SD_disk_initialize+0x192>
 80009c8:	2100      	movs	r1, #0
 80009ca:	207a      	movs	r0, #122	; 0x7a
 80009cc:	f7ff ff43 	bl	8000856 <SD_SendCmd>
 80009d0:	4603      	mov	r3, r0
 80009d2:	2b00      	cmp	r3, #0
 80009d4:	d15d      	bne.n	8000a92 <SD_disk_initialize+0x192>
				{
					/* Check CCS bit */
					for (n = 0; n < 4; n++)
 80009d6:	2300      	movs	r3, #0
 80009d8:	73fb      	strb	r3, [r7, #15]
 80009da:	e00c      	b.n	80009f6 <SD_disk_initialize+0xf6>
					{
						ocr[n] = SPI_RxByte();
 80009dc:	7bfc      	ldrb	r4, [r7, #15]
 80009de:	f7ff fe29 	bl	8000634 <SPI_RxByte>
 80009e2:	4603      	mov	r3, r0
 80009e4:	461a      	mov	r2, r3
 80009e6:	f104 0310 	add.w	r3, r4, #16
 80009ea:	443b      	add	r3, r7
 80009ec:	f803 2c08 	strb.w	r2, [r3, #-8]
					for (n = 0; n < 4; n++)
 80009f0:	7bfb      	ldrb	r3, [r7, #15]
 80009f2:	3301      	adds	r3, #1
 80009f4:	73fb      	strb	r3, [r7, #15]
 80009f6:	7bfb      	ldrb	r3, [r7, #15]
 80009f8:	2b03      	cmp	r3, #3
 80009fa:	d9ef      	bls.n	80009dc <SD_disk_initialize+0xdc>
					}

					/* SDv2 (HC or SC) */
					type = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;
 80009fc:	7a3b      	ldrb	r3, [r7, #8]
 80009fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000a02:	2b00      	cmp	r3, #0
 8000a04:	d001      	beq.n	8000a0a <SD_disk_initialize+0x10a>
 8000a06:	230c      	movs	r3, #12
 8000a08:	e000      	b.n	8000a0c <SD_disk_initialize+0x10c>
 8000a0a:	2304      	movs	r3, #4
 8000a0c:	73bb      	strb	r3, [r7, #14]
 8000a0e:	e040      	b.n	8000a92 <SD_disk_initialize+0x192>
			}
		}
		else
		{
			/* SDC V1 or MMC */
			type = (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) <= 1) ? CT_SD1 : CT_MMC;
 8000a10:	2100      	movs	r1, #0
 8000a12:	2077      	movs	r0, #119	; 0x77
 8000a14:	f7ff ff1f 	bl	8000856 <SD_SendCmd>
 8000a18:	4603      	mov	r3, r0
 8000a1a:	2b01      	cmp	r3, #1
 8000a1c:	d808      	bhi.n	8000a30 <SD_disk_initialize+0x130>
 8000a1e:	2100      	movs	r1, #0
 8000a20:	2069      	movs	r0, #105	; 0x69
 8000a22:	f7ff ff18 	bl	8000856 <SD_SendCmd>
 8000a26:	4603      	mov	r3, r0
 8000a28:	2b01      	cmp	r3, #1
 8000a2a:	d801      	bhi.n	8000a30 <SD_disk_initialize+0x130>
 8000a2c:	2302      	movs	r3, #2
 8000a2e:	e000      	b.n	8000a32 <SD_disk_initialize+0x132>
 8000a30:	2301      	movs	r3, #1
 8000a32:	73bb      	strb	r3, [r7, #14]

			do
			{
				if (type == CT_SD1)
 8000a34:	7bbb      	ldrb	r3, [r7, #14]
 8000a36:	2b02      	cmp	r3, #2
 8000a38:	d10e      	bne.n	8000a58 <SD_disk_initialize+0x158>
				{
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) == 0) break; /* ACMD41 */
 8000a3a:	2100      	movs	r1, #0
 8000a3c:	2077      	movs	r0, #119	; 0x77
 8000a3e:	f7ff ff0a 	bl	8000856 <SD_SendCmd>
 8000a42:	4603      	mov	r3, r0
 8000a44:	2b01      	cmp	r3, #1
 8000a46:	d80e      	bhi.n	8000a66 <SD_disk_initialize+0x166>
 8000a48:	2100      	movs	r1, #0
 8000a4a:	2069      	movs	r0, #105	; 0x69
 8000a4c:	f7ff ff03 	bl	8000856 <SD_SendCmd>
 8000a50:	4603      	mov	r3, r0
 8000a52:	2b00      	cmp	r3, #0
 8000a54:	d107      	bne.n	8000a66 <SD_disk_initialize+0x166>
 8000a56:	e00d      	b.n	8000a74 <SD_disk_initialize+0x174>
				}
				else
				{
					if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 8000a58:	2100      	movs	r1, #0
 8000a5a:	2041      	movs	r0, #65	; 0x41
 8000a5c:	f7ff fefb 	bl	8000856 <SD_SendCmd>
 8000a60:	4603      	mov	r3, r0
 8000a62:	2b00      	cmp	r3, #0
 8000a64:	d005      	beq.n	8000a72 <SD_disk_initialize+0x172>
				}

			} while (Timer1);
 8000a66:	4b1a      	ldr	r3, [pc, #104]	; (8000ad0 <SD_disk_initialize+0x1d0>)
 8000a68:	881b      	ldrh	r3, [r3, #0]
 8000a6a:	b29b      	uxth	r3, r3
 8000a6c:	2b00      	cmp	r3, #0
 8000a6e:	d1e1      	bne.n	8000a34 <SD_disk_initialize+0x134>
 8000a70:	e000      	b.n	8000a74 <SD_disk_initialize+0x174>
					if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 8000a72:	bf00      	nop

			/* SET_BLOCKLEN */
			if (!Timer1 || SD_SendCmd(CMD16, 512) != 0) type = 0;
 8000a74:	4b16      	ldr	r3, [pc, #88]	; (8000ad0 <SD_disk_initialize+0x1d0>)
 8000a76:	881b      	ldrh	r3, [r3, #0]
 8000a78:	b29b      	uxth	r3, r3
 8000a7a:	2b00      	cmp	r3, #0
 8000a7c:	d007      	beq.n	8000a8e <SD_disk_initialize+0x18e>
 8000a7e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000a82:	2050      	movs	r0, #80	; 0x50
 8000a84:	f7ff fee7 	bl	8000856 <SD_SendCmd>
 8000a88:	4603      	mov	r3, r0
 8000a8a:	2b00      	cmp	r3, #0
 8000a8c:	d001      	beq.n	8000a92 <SD_disk_initialize+0x192>
 8000a8e:	2300      	movs	r3, #0
 8000a90:	73bb      	strb	r3, [r7, #14]
		}
	}

	CardType = type;
 8000a92:	4a10      	ldr	r2, [pc, #64]	; (8000ad4 <SD_disk_initialize+0x1d4>)
 8000a94:	7bbb      	ldrb	r3, [r7, #14]
 8000a96:	7013      	strb	r3, [r2, #0]

	/* Idle */
	DESELECT();
 8000a98:	f7ff fd8a 	bl	80005b0 <DESELECT>
	SPI_RxByte();
 8000a9c:	f7ff fdca 	bl	8000634 <SPI_RxByte>

	/* Clear STA_NOINIT */
	if (type)
 8000aa0:	7bbb      	ldrb	r3, [r7, #14]
 8000aa2:	2b00      	cmp	r3, #0
 8000aa4:	d008      	beq.n	8000ab8 <SD_disk_initialize+0x1b8>
	{
		Stat &= ~STA_NOINIT;
 8000aa6:	4b09      	ldr	r3, [pc, #36]	; (8000acc <SD_disk_initialize+0x1cc>)
 8000aa8:	781b      	ldrb	r3, [r3, #0]
 8000aaa:	b2db      	uxtb	r3, r3
 8000aac:	f023 0301 	bic.w	r3, r3, #1
 8000ab0:	b2da      	uxtb	r2, r3
 8000ab2:	4b06      	ldr	r3, [pc, #24]	; (8000acc <SD_disk_initialize+0x1cc>)
 8000ab4:	701a      	strb	r2, [r3, #0]
 8000ab6:	e001      	b.n	8000abc <SD_disk_initialize+0x1bc>
	}
	else
	{
		/* Initialization failed */
		SD_PowerOff();
 8000ab8:	f7ff fe42 	bl	8000740 <SD_PowerOff>
	}

	return Stat;
 8000abc:	4b03      	ldr	r3, [pc, #12]	; (8000acc <SD_disk_initialize+0x1cc>)
 8000abe:	781b      	ldrb	r3, [r3, #0]
 8000ac0:	b2db      	uxtb	r3, r3
}
 8000ac2:	4618      	mov	r0, r3
 8000ac4:	3714      	adds	r7, #20
 8000ac6:	46bd      	mov	sp, r7
 8000ac8:	bd90      	pop	{r4, r7, pc}
 8000aca:	bf00      	nop
 8000acc:	20000000 	.word	0x20000000
 8000ad0:	20002495 	.word	0x20002495
 8000ad4:	20000178 	.word	0x20000178

08000ad8 <SD_disk_status>:

/* return disk status */
DSTATUS SD_disk_status(BYTE drv) 
{
 8000ad8:	b480      	push	{r7}
 8000ada:	b083      	sub	sp, #12
 8000adc:	af00      	add	r7, sp, #0
 8000ade:	4603      	mov	r3, r0
 8000ae0:	71fb      	strb	r3, [r7, #7]
	if (drv) return STA_NOINIT;
 8000ae2:	79fb      	ldrb	r3, [r7, #7]
 8000ae4:	2b00      	cmp	r3, #0
 8000ae6:	d001      	beq.n	8000aec <SD_disk_status+0x14>
 8000ae8:	2301      	movs	r3, #1
 8000aea:	e002      	b.n	8000af2 <SD_disk_status+0x1a>
	return Stat;
 8000aec:	4b04      	ldr	r3, [pc, #16]	; (8000b00 <SD_disk_status+0x28>)
 8000aee:	781b      	ldrb	r3, [r3, #0]
 8000af0:	b2db      	uxtb	r3, r3
}
 8000af2:	4618      	mov	r0, r3
 8000af4:	370c      	adds	r7, #12
 8000af6:	46bd      	mov	sp, r7
 8000af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000afc:	4770      	bx	lr
 8000afe:	bf00      	nop
 8000b00:	20000000 	.word	0x20000000

08000b04 <SD_disk_read>:

/* read sector */
DRESULT SD_disk_read(BYTE pdrv, BYTE* buff, DWORD sector, UINT count) 
{
 8000b04:	b580      	push	{r7, lr}
 8000b06:	b084      	sub	sp, #16
 8000b08:	af00      	add	r7, sp, #0
 8000b0a:	60b9      	str	r1, [r7, #8]
 8000b0c:	607a      	str	r2, [r7, #4]
 8000b0e:	603b      	str	r3, [r7, #0]
 8000b10:	4603      	mov	r3, r0
 8000b12:	73fb      	strb	r3, [r7, #15]
	/* pdrv should be 0 */
	if (pdrv || !count) return RES_PARERR;
 8000b14:	7bfb      	ldrb	r3, [r7, #15]
 8000b16:	2b00      	cmp	r3, #0
 8000b18:	d102      	bne.n	8000b20 <SD_disk_read+0x1c>
 8000b1a:	683b      	ldr	r3, [r7, #0]
 8000b1c:	2b00      	cmp	r3, #0
 8000b1e:	d101      	bne.n	8000b24 <SD_disk_read+0x20>
 8000b20:	2304      	movs	r3, #4
 8000b22:	e051      	b.n	8000bc8 <SD_disk_read+0xc4>

	/* no disk */
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 8000b24:	4b2a      	ldr	r3, [pc, #168]	; (8000bd0 <SD_disk_read+0xcc>)
 8000b26:	781b      	ldrb	r3, [r3, #0]
 8000b28:	b2db      	uxtb	r3, r3
 8000b2a:	f003 0301 	and.w	r3, r3, #1
 8000b2e:	2b00      	cmp	r3, #0
 8000b30:	d001      	beq.n	8000b36 <SD_disk_read+0x32>
 8000b32:	2303      	movs	r3, #3
 8000b34:	e048      	b.n	8000bc8 <SD_disk_read+0xc4>

	/* convert to byte address */
	if (!(CardType & CT_SD2)) sector *= 512;
 8000b36:	4b27      	ldr	r3, [pc, #156]	; (8000bd4 <SD_disk_read+0xd0>)
 8000b38:	781b      	ldrb	r3, [r3, #0]
 8000b3a:	f003 0304 	and.w	r3, r3, #4
 8000b3e:	2b00      	cmp	r3, #0
 8000b40:	d102      	bne.n	8000b48 <SD_disk_read+0x44>
 8000b42:	687b      	ldr	r3, [r7, #4]
 8000b44:	025b      	lsls	r3, r3, #9
 8000b46:	607b      	str	r3, [r7, #4]

	SELECT();
 8000b48:	f7ff fd24 	bl	8000594 <SELECT>

	if (count == 1)
 8000b4c:	683b      	ldr	r3, [r7, #0]
 8000b4e:	2b01      	cmp	r3, #1
 8000b50:	d111      	bne.n	8000b76 <SD_disk_read+0x72>
	{
		/* READ_SINGLE_BLOCK */
		if ((SD_SendCmd(CMD17, sector) == 0) && SD_RxDataBlock(buff, 512)) count = 0;
 8000b52:	6879      	ldr	r1, [r7, #4]
 8000b54:	2051      	movs	r0, #81	; 0x51
 8000b56:	f7ff fe7e 	bl	8000856 <SD_SendCmd>
 8000b5a:	4603      	mov	r3, r0
 8000b5c:	2b00      	cmp	r3, #0
 8000b5e:	d129      	bne.n	8000bb4 <SD_disk_read+0xb0>
 8000b60:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000b64:	68b8      	ldr	r0, [r7, #8]
 8000b66:	f7ff fe03 	bl	8000770 <SD_RxDataBlock>
 8000b6a:	4603      	mov	r3, r0
 8000b6c:	2b00      	cmp	r3, #0
 8000b6e:	d021      	beq.n	8000bb4 <SD_disk_read+0xb0>
 8000b70:	2300      	movs	r3, #0
 8000b72:	603b      	str	r3, [r7, #0]
 8000b74:	e01e      	b.n	8000bb4 <SD_disk_read+0xb0>
	}
	else
	{
		/* READ_MULTIPLE_BLOCK */
		if (SD_SendCmd(CMD18, sector) == 0)
 8000b76:	6879      	ldr	r1, [r7, #4]
 8000b78:	2052      	movs	r0, #82	; 0x52
 8000b7a:	f7ff fe6c 	bl	8000856 <SD_SendCmd>
 8000b7e:	4603      	mov	r3, r0
 8000b80:	2b00      	cmp	r3, #0
 8000b82:	d117      	bne.n	8000bb4 <SD_disk_read+0xb0>
		{
			do {
				if (!SD_RxDataBlock(buff, 512)) break;
 8000b84:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000b88:	68b8      	ldr	r0, [r7, #8]
 8000b8a:	f7ff fdf1 	bl	8000770 <SD_RxDataBlock>
 8000b8e:	4603      	mov	r3, r0
 8000b90:	2b00      	cmp	r3, #0
 8000b92:	d00a      	beq.n	8000baa <SD_disk_read+0xa6>
				buff += 512;
 8000b94:	68bb      	ldr	r3, [r7, #8]
 8000b96:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8000b9a:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8000b9c:	683b      	ldr	r3, [r7, #0]
 8000b9e:	3b01      	subs	r3, #1
 8000ba0:	603b      	str	r3, [r7, #0]
 8000ba2:	683b      	ldr	r3, [r7, #0]
 8000ba4:	2b00      	cmp	r3, #0
 8000ba6:	d1ed      	bne.n	8000b84 <SD_disk_read+0x80>
 8000ba8:	e000      	b.n	8000bac <SD_disk_read+0xa8>
				if (!SD_RxDataBlock(buff, 512)) break;
 8000baa:	bf00      	nop

			/* STOP_TRANSMISSION */
			SD_SendCmd(CMD12, 0);
 8000bac:	2100      	movs	r1, #0
 8000bae:	204c      	movs	r0, #76	; 0x4c
 8000bb0:	f7ff fe51 	bl	8000856 <SD_SendCmd>
		}
	}

	/* Idle */
	DESELECT();
 8000bb4:	f7ff fcfc 	bl	80005b0 <DESELECT>
	SPI_RxByte();
 8000bb8:	f7ff fd3c 	bl	8000634 <SPI_RxByte>

	return count ? RES_ERROR : RES_OK;
 8000bbc:	683b      	ldr	r3, [r7, #0]
 8000bbe:	2b00      	cmp	r3, #0
 8000bc0:	bf14      	ite	ne
 8000bc2:	2301      	movne	r3, #1
 8000bc4:	2300      	moveq	r3, #0
 8000bc6:	b2db      	uxtb	r3, r3
}
 8000bc8:	4618      	mov	r0, r3
 8000bca:	3710      	adds	r7, #16
 8000bcc:	46bd      	mov	sp, r7
 8000bce:	bd80      	pop	{r7, pc}
 8000bd0:	20000000 	.word	0x20000000
 8000bd4:	20000178 	.word	0x20000178

08000bd8 <SD_disk_write>:

/* write sector */
#if _USE_WRITE == 1
DRESULT SD_disk_write(BYTE pdrv, const BYTE* buff, DWORD sector, UINT count) 
{
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	b084      	sub	sp, #16
 8000bdc:	af00      	add	r7, sp, #0
 8000bde:	60b9      	str	r1, [r7, #8]
 8000be0:	607a      	str	r2, [r7, #4]
 8000be2:	603b      	str	r3, [r7, #0]
 8000be4:	4603      	mov	r3, r0
 8000be6:	73fb      	strb	r3, [r7, #15]
	/* pdrv should be 0 */
	if (pdrv || !count) return RES_PARERR;
 8000be8:	7bfb      	ldrb	r3, [r7, #15]
 8000bea:	2b00      	cmp	r3, #0
 8000bec:	d102      	bne.n	8000bf4 <SD_disk_write+0x1c>
 8000bee:	683b      	ldr	r3, [r7, #0]
 8000bf0:	2b00      	cmp	r3, #0
 8000bf2:	d101      	bne.n	8000bf8 <SD_disk_write+0x20>
 8000bf4:	2304      	movs	r3, #4
 8000bf6:	e06b      	b.n	8000cd0 <SD_disk_write+0xf8>

	/* no disk */
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 8000bf8:	4b37      	ldr	r3, [pc, #220]	; (8000cd8 <SD_disk_write+0x100>)
 8000bfa:	781b      	ldrb	r3, [r3, #0]
 8000bfc:	b2db      	uxtb	r3, r3
 8000bfe:	f003 0301 	and.w	r3, r3, #1
 8000c02:	2b00      	cmp	r3, #0
 8000c04:	d001      	beq.n	8000c0a <SD_disk_write+0x32>
 8000c06:	2303      	movs	r3, #3
 8000c08:	e062      	b.n	8000cd0 <SD_disk_write+0xf8>

	/* write protection */
	if (Stat & STA_PROTECT) return RES_WRPRT;
 8000c0a:	4b33      	ldr	r3, [pc, #204]	; (8000cd8 <SD_disk_write+0x100>)
 8000c0c:	781b      	ldrb	r3, [r3, #0]
 8000c0e:	b2db      	uxtb	r3, r3
 8000c10:	f003 0304 	and.w	r3, r3, #4
 8000c14:	2b00      	cmp	r3, #0
 8000c16:	d001      	beq.n	8000c1c <SD_disk_write+0x44>
 8000c18:	2302      	movs	r3, #2
 8000c1a:	e059      	b.n	8000cd0 <SD_disk_write+0xf8>

	/* convert to byte address */
	if (!(CardType & CT_SD2)) sector *= 512;
 8000c1c:	4b2f      	ldr	r3, [pc, #188]	; (8000cdc <SD_disk_write+0x104>)
 8000c1e:	781b      	ldrb	r3, [r3, #0]
 8000c20:	f003 0304 	and.w	r3, r3, #4
 8000c24:	2b00      	cmp	r3, #0
 8000c26:	d102      	bne.n	8000c2e <SD_disk_write+0x56>
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	025b      	lsls	r3, r3, #9
 8000c2c:	607b      	str	r3, [r7, #4]

	SELECT();
 8000c2e:	f7ff fcb1 	bl	8000594 <SELECT>

	if (count == 1)
 8000c32:	683b      	ldr	r3, [r7, #0]
 8000c34:	2b01      	cmp	r3, #1
 8000c36:	d110      	bne.n	8000c5a <SD_disk_write+0x82>
	{
		/* WRITE_BLOCK */
		if ((SD_SendCmd(CMD24, sector) == 0) && SD_TxDataBlock(buff, 0xFE))
 8000c38:	6879      	ldr	r1, [r7, #4]
 8000c3a:	2058      	movs	r0, #88	; 0x58
 8000c3c:	f7ff fe0b 	bl	8000856 <SD_SendCmd>
 8000c40:	4603      	mov	r3, r0
 8000c42:	2b00      	cmp	r3, #0
 8000c44:	d13a      	bne.n	8000cbc <SD_disk_write+0xe4>
 8000c46:	21fe      	movs	r1, #254	; 0xfe
 8000c48:	68b8      	ldr	r0, [r7, #8]
 8000c4a:	f7ff fdc1 	bl	80007d0 <SD_TxDataBlock>
 8000c4e:	4603      	mov	r3, r0
 8000c50:	2b00      	cmp	r3, #0
 8000c52:	d033      	beq.n	8000cbc <SD_disk_write+0xe4>
			count = 0;
 8000c54:	2300      	movs	r3, #0
 8000c56:	603b      	str	r3, [r7, #0]
 8000c58:	e030      	b.n	8000cbc <SD_disk_write+0xe4>
	}
	else
	{
		/* WRITE_MULTIPLE_BLOCK */
		if (CardType & CT_SD1)
 8000c5a:	4b20      	ldr	r3, [pc, #128]	; (8000cdc <SD_disk_write+0x104>)
 8000c5c:	781b      	ldrb	r3, [r3, #0]
 8000c5e:	f003 0302 	and.w	r3, r3, #2
 8000c62:	2b00      	cmp	r3, #0
 8000c64:	d007      	beq.n	8000c76 <SD_disk_write+0x9e>
		{
			SD_SendCmd(CMD55, 0);
 8000c66:	2100      	movs	r1, #0
 8000c68:	2077      	movs	r0, #119	; 0x77
 8000c6a:	f7ff fdf4 	bl	8000856 <SD_SendCmd>
			SD_SendCmd(CMD23, count); /* ACMD23 */
 8000c6e:	6839      	ldr	r1, [r7, #0]
 8000c70:	2057      	movs	r0, #87	; 0x57
 8000c72:	f7ff fdf0 	bl	8000856 <SD_SendCmd>
		}

		if (SD_SendCmd(CMD25, sector) == 0)
 8000c76:	6879      	ldr	r1, [r7, #4]
 8000c78:	2059      	movs	r0, #89	; 0x59
 8000c7a:	f7ff fdec 	bl	8000856 <SD_SendCmd>
 8000c7e:	4603      	mov	r3, r0
 8000c80:	2b00      	cmp	r3, #0
 8000c82:	d11b      	bne.n	8000cbc <SD_disk_write+0xe4>
		{
			do {
				if(!SD_TxDataBlock(buff, 0xFC)) break;
 8000c84:	21fc      	movs	r1, #252	; 0xfc
 8000c86:	68b8      	ldr	r0, [r7, #8]
 8000c88:	f7ff fda2 	bl	80007d0 <SD_TxDataBlock>
 8000c8c:	4603      	mov	r3, r0
 8000c8e:	2b00      	cmp	r3, #0
 8000c90:	d00a      	beq.n	8000ca8 <SD_disk_write+0xd0>
				buff += 512;
 8000c92:	68bb      	ldr	r3, [r7, #8]
 8000c94:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8000c98:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8000c9a:	683b      	ldr	r3, [r7, #0]
 8000c9c:	3b01      	subs	r3, #1
 8000c9e:	603b      	str	r3, [r7, #0]
 8000ca0:	683b      	ldr	r3, [r7, #0]
 8000ca2:	2b00      	cmp	r3, #0
 8000ca4:	d1ee      	bne.n	8000c84 <SD_disk_write+0xac>
 8000ca6:	e000      	b.n	8000caa <SD_disk_write+0xd2>
				if(!SD_TxDataBlock(buff, 0xFC)) break;
 8000ca8:	bf00      	nop

			/* STOP_TRAN token */
			if(!SD_TxDataBlock(0, 0xFD))
 8000caa:	21fd      	movs	r1, #253	; 0xfd
 8000cac:	2000      	movs	r0, #0
 8000cae:	f7ff fd8f 	bl	80007d0 <SD_TxDataBlock>
 8000cb2:	4603      	mov	r3, r0
 8000cb4:	2b00      	cmp	r3, #0
 8000cb6:	d101      	bne.n	8000cbc <SD_disk_write+0xe4>
			{
				count = 1;
 8000cb8:	2301      	movs	r3, #1
 8000cba:	603b      	str	r3, [r7, #0]
			}
		}
	}

	/* Idle */
	DESELECT();
 8000cbc:	f7ff fc78 	bl	80005b0 <DESELECT>
	SPI_RxByte();
 8000cc0:	f7ff fcb8 	bl	8000634 <SPI_RxByte>

	return count ? RES_ERROR : RES_OK;
 8000cc4:	683b      	ldr	r3, [r7, #0]
 8000cc6:	2b00      	cmp	r3, #0
 8000cc8:	bf14      	ite	ne
 8000cca:	2301      	movne	r3, #1
 8000ccc:	2300      	moveq	r3, #0
 8000cce:	b2db      	uxtb	r3, r3
}
 8000cd0:	4618      	mov	r0, r3
 8000cd2:	3710      	adds	r7, #16
 8000cd4:	46bd      	mov	sp, r7
 8000cd6:	bd80      	pop	{r7, pc}
 8000cd8:	20000000 	.word	0x20000000
 8000cdc:	20000178 	.word	0x20000178

08000ce0 <SD_disk_ioctl>:
#endif /* _USE_WRITE */

/* ioctl */
DRESULT SD_disk_ioctl(BYTE drv, BYTE ctrl, void *buff) 
{
 8000ce0:	b590      	push	{r4, r7, lr}
 8000ce2:	b08b      	sub	sp, #44	; 0x2c
 8000ce4:	af00      	add	r7, sp, #0
 8000ce6:	4603      	mov	r3, r0
 8000ce8:	603a      	str	r2, [r7, #0]
 8000cea:	71fb      	strb	r3, [r7, #7]
 8000cec:	460b      	mov	r3, r1
 8000cee:	71bb      	strb	r3, [r7, #6]
	DRESULT res;
	uint8_t n, csd[16], *ptr = buff;
 8000cf0:	683b      	ldr	r3, [r7, #0]
 8000cf2:	623b      	str	r3, [r7, #32]
	WORD csize;

	/* pdrv should be 0 */
	if (drv) return RES_PARERR;
 8000cf4:	79fb      	ldrb	r3, [r7, #7]
 8000cf6:	2b00      	cmp	r3, #0
 8000cf8:	d001      	beq.n	8000cfe <SD_disk_ioctl+0x1e>
 8000cfa:	2304      	movs	r3, #4
 8000cfc:	e115      	b.n	8000f2a <SD_disk_ioctl+0x24a>
	res = RES_ERROR;
 8000cfe:	2301      	movs	r3, #1
 8000d00:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if (ctrl == CTRL_POWER)
 8000d04:	79bb      	ldrb	r3, [r7, #6]
 8000d06:	2b05      	cmp	r3, #5
 8000d08:	d124      	bne.n	8000d54 <SD_disk_ioctl+0x74>
	{
		switch (*ptr)
 8000d0a:	6a3b      	ldr	r3, [r7, #32]
 8000d0c:	781b      	ldrb	r3, [r3, #0]
 8000d0e:	2b02      	cmp	r3, #2
 8000d10:	d012      	beq.n	8000d38 <SD_disk_ioctl+0x58>
 8000d12:	2b02      	cmp	r3, #2
 8000d14:	dc1a      	bgt.n	8000d4c <SD_disk_ioctl+0x6c>
 8000d16:	2b00      	cmp	r3, #0
 8000d18:	d002      	beq.n	8000d20 <SD_disk_ioctl+0x40>
 8000d1a:	2b01      	cmp	r3, #1
 8000d1c:	d006      	beq.n	8000d2c <SD_disk_ioctl+0x4c>
 8000d1e:	e015      	b.n	8000d4c <SD_disk_ioctl+0x6c>
		{
		case 0:
			SD_PowerOff();		/* Power Off */
 8000d20:	f7ff fd0e 	bl	8000740 <SD_PowerOff>
			res = RES_OK;
 8000d24:	2300      	movs	r3, #0
 8000d26:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8000d2a:	e0fc      	b.n	8000f26 <SD_disk_ioctl+0x246>
		case 1:
			SD_PowerOn();		/* Power On */
 8000d2c:	f7ff fcc6 	bl	80006bc <SD_PowerOn>
			res = RES_OK;
 8000d30:	2300      	movs	r3, #0
 8000d32:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8000d36:	e0f6      	b.n	8000f26 <SD_disk_ioctl+0x246>
		case 2:
			*(ptr + 1) = SD_CheckPower();
 8000d38:	6a3b      	ldr	r3, [r7, #32]
 8000d3a:	1c5c      	adds	r4, r3, #1
 8000d3c:	f7ff fd0c 	bl	8000758 <SD_CheckPower>
 8000d40:	4603      	mov	r3, r0
 8000d42:	7023      	strb	r3, [r4, #0]
			res = RES_OK;		/* Power Check */
 8000d44:	2300      	movs	r3, #0
 8000d46:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8000d4a:	e0ec      	b.n	8000f26 <SD_disk_ioctl+0x246>
		default:
			res = RES_PARERR;
 8000d4c:	2304      	movs	r3, #4
 8000d4e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8000d52:	e0e8      	b.n	8000f26 <SD_disk_ioctl+0x246>
		}
	}
	else
	{
		/* no disk */
		if (Stat & STA_NOINIT) return RES_NOTRDY;
 8000d54:	4b77      	ldr	r3, [pc, #476]	; (8000f34 <SD_disk_ioctl+0x254>)
 8000d56:	781b      	ldrb	r3, [r3, #0]
 8000d58:	b2db      	uxtb	r3, r3
 8000d5a:	f003 0301 	and.w	r3, r3, #1
 8000d5e:	2b00      	cmp	r3, #0
 8000d60:	d001      	beq.n	8000d66 <SD_disk_ioctl+0x86>
 8000d62:	2303      	movs	r3, #3
 8000d64:	e0e1      	b.n	8000f2a <SD_disk_ioctl+0x24a>

		SELECT();
 8000d66:	f7ff fc15 	bl	8000594 <SELECT>

		switch (ctrl)
 8000d6a:	79bb      	ldrb	r3, [r7, #6]
 8000d6c:	2b0d      	cmp	r3, #13
 8000d6e:	f200 80cb 	bhi.w	8000f08 <SD_disk_ioctl+0x228>
 8000d72:	a201      	add	r2, pc, #4	; (adr r2, 8000d78 <SD_disk_ioctl+0x98>)
 8000d74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000d78:	08000e73 	.word	0x08000e73
 8000d7c:	08000db1 	.word	0x08000db1
 8000d80:	08000e63 	.word	0x08000e63
 8000d84:	08000f09 	.word	0x08000f09
 8000d88:	08000f09 	.word	0x08000f09
 8000d8c:	08000f09 	.word	0x08000f09
 8000d90:	08000f09 	.word	0x08000f09
 8000d94:	08000f09 	.word	0x08000f09
 8000d98:	08000f09 	.word	0x08000f09
 8000d9c:	08000f09 	.word	0x08000f09
 8000da0:	08000f09 	.word	0x08000f09
 8000da4:	08000e85 	.word	0x08000e85
 8000da8:	08000ea9 	.word	0x08000ea9
 8000dac:	08000ecd 	.word	0x08000ecd
		{
		case GET_SECTOR_COUNT:
			/* SEND_CSD */
			if ((SD_SendCmd(CMD9, 0) == 0) && SD_RxDataBlock(csd, 16))
 8000db0:	2100      	movs	r1, #0
 8000db2:	2049      	movs	r0, #73	; 0x49
 8000db4:	f7ff fd4f 	bl	8000856 <SD_SendCmd>
 8000db8:	4603      	mov	r3, r0
 8000dba:	2b00      	cmp	r3, #0
 8000dbc:	f040 80a8 	bne.w	8000f10 <SD_disk_ioctl+0x230>
 8000dc0:	f107 030c 	add.w	r3, r7, #12
 8000dc4:	2110      	movs	r1, #16
 8000dc6:	4618      	mov	r0, r3
 8000dc8:	f7ff fcd2 	bl	8000770 <SD_RxDataBlock>
 8000dcc:	4603      	mov	r3, r0
 8000dce:	2b00      	cmp	r3, #0
 8000dd0:	f000 809e 	beq.w	8000f10 <SD_disk_ioctl+0x230>
			{
				if ((csd[0] >> 6) == 1)
 8000dd4:	7b3b      	ldrb	r3, [r7, #12]
 8000dd6:	099b      	lsrs	r3, r3, #6
 8000dd8:	b2db      	uxtb	r3, r3
 8000dda:	2b01      	cmp	r3, #1
 8000ddc:	d10e      	bne.n	8000dfc <SD_disk_ioctl+0x11c>
				{
					/* SDC V2 */
					csize = csd[9] + ((WORD) csd[8] << 8) + 1;
 8000dde:	7d7b      	ldrb	r3, [r7, #21]
 8000de0:	b29a      	uxth	r2, r3
 8000de2:	7d3b      	ldrb	r3, [r7, #20]
 8000de4:	b29b      	uxth	r3, r3
 8000de6:	021b      	lsls	r3, r3, #8
 8000de8:	b29b      	uxth	r3, r3
 8000dea:	4413      	add	r3, r2
 8000dec:	b29b      	uxth	r3, r3
 8000dee:	3301      	adds	r3, #1
 8000df0:	83fb      	strh	r3, [r7, #30]
					*(DWORD*) buff = (DWORD) csize << 10;
 8000df2:	8bfb      	ldrh	r3, [r7, #30]
 8000df4:	029a      	lsls	r2, r3, #10
 8000df6:	683b      	ldr	r3, [r7, #0]
 8000df8:	601a      	str	r2, [r3, #0]
 8000dfa:	e02e      	b.n	8000e5a <SD_disk_ioctl+0x17a>
				}
				else
				{
					/* MMC or SDC V1 */
					n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 8000dfc:	7c7b      	ldrb	r3, [r7, #17]
 8000dfe:	f003 030f 	and.w	r3, r3, #15
 8000e02:	b2da      	uxtb	r2, r3
 8000e04:	7dbb      	ldrb	r3, [r7, #22]
 8000e06:	09db      	lsrs	r3, r3, #7
 8000e08:	b2db      	uxtb	r3, r3
 8000e0a:	4413      	add	r3, r2
 8000e0c:	b2da      	uxtb	r2, r3
 8000e0e:	7d7b      	ldrb	r3, [r7, #21]
 8000e10:	005b      	lsls	r3, r3, #1
 8000e12:	b2db      	uxtb	r3, r3
 8000e14:	f003 0306 	and.w	r3, r3, #6
 8000e18:	b2db      	uxtb	r3, r3
 8000e1a:	4413      	add	r3, r2
 8000e1c:	b2db      	uxtb	r3, r3
 8000e1e:	3302      	adds	r3, #2
 8000e20:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
					csize = (csd[8] >> 6) + ((WORD) csd[7] << 2) + ((WORD) (csd[6] & 3) << 10) + 1;
 8000e24:	7d3b      	ldrb	r3, [r7, #20]
 8000e26:	099b      	lsrs	r3, r3, #6
 8000e28:	b2db      	uxtb	r3, r3
 8000e2a:	b29a      	uxth	r2, r3
 8000e2c:	7cfb      	ldrb	r3, [r7, #19]
 8000e2e:	b29b      	uxth	r3, r3
 8000e30:	009b      	lsls	r3, r3, #2
 8000e32:	b29b      	uxth	r3, r3
 8000e34:	4413      	add	r3, r2
 8000e36:	b29a      	uxth	r2, r3
 8000e38:	7cbb      	ldrb	r3, [r7, #18]
 8000e3a:	029b      	lsls	r3, r3, #10
 8000e3c:	b29b      	uxth	r3, r3
 8000e3e:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8000e42:	b29b      	uxth	r3, r3
 8000e44:	4413      	add	r3, r2
 8000e46:	b29b      	uxth	r3, r3
 8000e48:	3301      	adds	r3, #1
 8000e4a:	83fb      	strh	r3, [r7, #30]
					*(DWORD*) buff = (DWORD) csize << (n - 9);
 8000e4c:	8bfa      	ldrh	r2, [r7, #30]
 8000e4e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000e52:	3b09      	subs	r3, #9
 8000e54:	409a      	lsls	r2, r3
 8000e56:	683b      	ldr	r3, [r7, #0]
 8000e58:	601a      	str	r2, [r3, #0]
				}
				res = RES_OK;
 8000e5a:	2300      	movs	r3, #0
 8000e5c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			}
			break;
 8000e60:	e056      	b.n	8000f10 <SD_disk_ioctl+0x230>
		case GET_SECTOR_SIZE:
			*(WORD*) buff = 512;
 8000e62:	683b      	ldr	r3, [r7, #0]
 8000e64:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000e68:	801a      	strh	r2, [r3, #0]
			res = RES_OK;
 8000e6a:	2300      	movs	r3, #0
 8000e6c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8000e70:	e055      	b.n	8000f1e <SD_disk_ioctl+0x23e>
		case CTRL_SYNC:
			if (SD_ReadyWait() == 0xFF) res = RES_OK;
 8000e72:	f7ff fc09 	bl	8000688 <SD_ReadyWait>
 8000e76:	4603      	mov	r3, r0
 8000e78:	2bff      	cmp	r3, #255	; 0xff
 8000e7a:	d14b      	bne.n	8000f14 <SD_disk_ioctl+0x234>
 8000e7c:	2300      	movs	r3, #0
 8000e7e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8000e82:	e047      	b.n	8000f14 <SD_disk_ioctl+0x234>
		case MMC_GET_CSD:
			/* SEND_CSD */
			if (SD_SendCmd(CMD9, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 8000e84:	2100      	movs	r1, #0
 8000e86:	2049      	movs	r0, #73	; 0x49
 8000e88:	f7ff fce5 	bl	8000856 <SD_SendCmd>
 8000e8c:	4603      	mov	r3, r0
 8000e8e:	2b00      	cmp	r3, #0
 8000e90:	d142      	bne.n	8000f18 <SD_disk_ioctl+0x238>
 8000e92:	2110      	movs	r1, #16
 8000e94:	6a38      	ldr	r0, [r7, #32]
 8000e96:	f7ff fc6b 	bl	8000770 <SD_RxDataBlock>
 8000e9a:	4603      	mov	r3, r0
 8000e9c:	2b00      	cmp	r3, #0
 8000e9e:	d03b      	beq.n	8000f18 <SD_disk_ioctl+0x238>
 8000ea0:	2300      	movs	r3, #0
 8000ea2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8000ea6:	e037      	b.n	8000f18 <SD_disk_ioctl+0x238>
		case MMC_GET_CID:
			/* SEND_CID */
			if (SD_SendCmd(CMD10, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 8000ea8:	2100      	movs	r1, #0
 8000eaa:	204a      	movs	r0, #74	; 0x4a
 8000eac:	f7ff fcd3 	bl	8000856 <SD_SendCmd>
 8000eb0:	4603      	mov	r3, r0
 8000eb2:	2b00      	cmp	r3, #0
 8000eb4:	d132      	bne.n	8000f1c <SD_disk_ioctl+0x23c>
 8000eb6:	2110      	movs	r1, #16
 8000eb8:	6a38      	ldr	r0, [r7, #32]
 8000eba:	f7ff fc59 	bl	8000770 <SD_RxDataBlock>
 8000ebe:	4603      	mov	r3, r0
 8000ec0:	2b00      	cmp	r3, #0
 8000ec2:	d02b      	beq.n	8000f1c <SD_disk_ioctl+0x23c>
 8000ec4:	2300      	movs	r3, #0
 8000ec6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8000eca:	e027      	b.n	8000f1c <SD_disk_ioctl+0x23c>
		case MMC_GET_OCR:
			/* READ_OCR */
			if (SD_SendCmd(CMD58, 0) == 0)
 8000ecc:	2100      	movs	r1, #0
 8000ece:	207a      	movs	r0, #122	; 0x7a
 8000ed0:	f7ff fcc1 	bl	8000856 <SD_SendCmd>
 8000ed4:	4603      	mov	r3, r0
 8000ed6:	2b00      	cmp	r3, #0
 8000ed8:	d116      	bne.n	8000f08 <SD_disk_ioctl+0x228>
			{
				for (n = 0; n < 4; n++)
 8000eda:	2300      	movs	r3, #0
 8000edc:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8000ee0:	e00b      	b.n	8000efa <SD_disk_ioctl+0x21a>
				{
					*ptr++ = SPI_RxByte();
 8000ee2:	6a3c      	ldr	r4, [r7, #32]
 8000ee4:	1c63      	adds	r3, r4, #1
 8000ee6:	623b      	str	r3, [r7, #32]
 8000ee8:	f7ff fba4 	bl	8000634 <SPI_RxByte>
 8000eec:	4603      	mov	r3, r0
 8000eee:	7023      	strb	r3, [r4, #0]
				for (n = 0; n < 4; n++)
 8000ef0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000ef4:	3301      	adds	r3, #1
 8000ef6:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8000efa:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000efe:	2b03      	cmp	r3, #3
 8000f00:	d9ef      	bls.n	8000ee2 <SD_disk_ioctl+0x202>
				}
				res = RES_OK;
 8000f02:	2300      	movs	r3, #0
 8000f04:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			}
		default:
			res = RES_PARERR;
 8000f08:	2304      	movs	r3, #4
 8000f0a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8000f0e:	e006      	b.n	8000f1e <SD_disk_ioctl+0x23e>
			break;
 8000f10:	bf00      	nop
 8000f12:	e004      	b.n	8000f1e <SD_disk_ioctl+0x23e>
			break;
 8000f14:	bf00      	nop
 8000f16:	e002      	b.n	8000f1e <SD_disk_ioctl+0x23e>
			break;
 8000f18:	bf00      	nop
 8000f1a:	e000      	b.n	8000f1e <SD_disk_ioctl+0x23e>
			break;
 8000f1c:	bf00      	nop
		}

		DESELECT();
 8000f1e:	f7ff fb47 	bl	80005b0 <DESELECT>
		SPI_RxByte();
 8000f22:	f7ff fb87 	bl	8000634 <SPI_RxByte>
	}

	return res;
 8000f26:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8000f2a:	4618      	mov	r0, r3
 8000f2c:	372c      	adds	r7, #44	; 0x2c
 8000f2e:	46bd      	mov	sp, r7
 8000f30:	bd90      	pop	{r4, r7, pc}
 8000f32:	bf00      	nop
 8000f34:	20000000 	.word	0x20000000

08000f38 <bufsize>:
char buffer[BUFFER_SIZE];  // to store strings..

int i=0;

int bufsize (char *buf)
{
 8000f38:	b480      	push	{r7}
 8000f3a:	b085      	sub	sp, #20
 8000f3c:	af00      	add	r7, sp, #0
 8000f3e:	6078      	str	r0, [r7, #4]
	int i=0;
 8000f40:	2300      	movs	r3, #0
 8000f42:	60fb      	str	r3, [r7, #12]
	while (*buf++ != '\0') i++;
 8000f44:	e002      	b.n	8000f4c <bufsize+0x14>
 8000f46:	68fb      	ldr	r3, [r7, #12]
 8000f48:	3301      	adds	r3, #1
 8000f4a:	60fb      	str	r3, [r7, #12]
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	1c5a      	adds	r2, r3, #1
 8000f50:	607a      	str	r2, [r7, #4]
 8000f52:	781b      	ldrb	r3, [r3, #0]
 8000f54:	2b00      	cmp	r3, #0
 8000f56:	d1f6      	bne.n	8000f46 <bufsize+0xe>
	return i;
 8000f58:	68fb      	ldr	r3, [r7, #12]
}
 8000f5a:	4618      	mov	r0, r3
 8000f5c:	3714      	adds	r7, #20
 8000f5e:	46bd      	mov	sp, r7
 8000f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f64:	4770      	bx	lr
	...

08000f68 <send_uart>:
{
	for (int i=0; i<BUFFER_SIZE; i++) buffer[i] = '\0';
}

void send_uart (char *string)
{
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	b084      	sub	sp, #16
 8000f6c:	af00      	add	r7, sp, #0
 8000f6e:	6078      	str	r0, [r7, #4]
	uint8_t len = strlen (string);
 8000f70:	6878      	ldr	r0, [r7, #4]
 8000f72:	f7ff f935 	bl	80001e0 <strlen>
 8000f76:	4603      	mov	r3, r0
 8000f78:	73fb      	strb	r3, [r7, #15]
	HAL_UART_Transmit(&huart2, (uint8_t *) string, len, HAL_MAX_DELAY);  // transmit in blocking mode
 8000f7a:	7bfb      	ldrb	r3, [r7, #15]
 8000f7c:	b29a      	uxth	r2, r3
 8000f7e:	f04f 33ff 	mov.w	r3, #4294967295
 8000f82:	6879      	ldr	r1, [r7, #4]
 8000f84:	4803      	ldr	r0, [pc, #12]	; (8000f94 <send_uart+0x2c>)
 8000f86:	f008 f950 	bl	800922a <HAL_UART_Transmit>
}
 8000f8a:	bf00      	nop
 8000f8c:	3710      	adds	r7, #16
 8000f8e:	46bd      	mov	sp, r7
 8000f90:	bd80      	pop	{r7, pc}
 8000f92:	bf00      	nop
 8000f94:	200001d4 	.word	0x200001d4

08000f98 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	b082      	sub	sp, #8
 8000f9c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f9e:	f005 fc11 	bl	80067c4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000fa2:	f000 f88d 	bl	80010c0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000fa6:	f000 f957 	bl	8001258 <MX_GPIO_Init>
  MX_SPI1_Init();
 8000faa:	f000 f8f5 	bl	8001198 <MX_SPI1_Init>
  MX_USART2_UART_Init();
 8000fae:	f000 f929 	bl	8001204 <MX_USART2_UART_Init>
  MX_FATFS_Init();
 8000fb2:	f008 fcaf 	bl	8009914 <MX_FATFS_Init>
  /* USER CODE BEGIN 2 */

	HAL_Delay (500);
 8000fb6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000fba:	f005 fc75 	bl	80068a8 <HAL_Delay>
	//	LSM6DSO_Init(&accelerometro);
	//	LSM6DSO_ACC_Enable(&accelerometro);



	if (IKS01A3_MOTION_SENSOR_Init(IKS01A3_LSM6DSO_0, MOTION_ACCELERO)==HAL_OK){
 8000fbe:	2102      	movs	r1, #2
 8000fc0:	2000      	movs	r0, #0
 8000fc2:	f005 f803 	bl	8005fcc <IKS01A3_MOTION_SENSOR_Init>
 8000fc6:	4603      	mov	r3, r0
 8000fc8:	2b00      	cmp	r3, #0
 8000fca:	d103      	bne.n	8000fd4 <main+0x3c>
		IKS01A3_MOTION_SENSOR_Enable(IKS01A3_LSM6DSO_0, MOTION_ACCELERO);
 8000fcc:	2102      	movs	r1, #2
 8000fce:	2000      	movs	r0, #0
 8000fd0:	f005 f920 	bl	8006214 <IKS01A3_MOTION_SENSOR_Enable>
	}

	//	fresult = f_mount(NULL, "/", 1);
	fresult = f_mount(&fs, "/", 1);
 8000fd4:	2201      	movs	r2, #1
 8000fd6:	492e      	ldr	r1, [pc, #184]	; (8001090 <main+0xf8>)
 8000fd8:	482e      	ldr	r0, [pc, #184]	; (8001094 <main+0xfc>)
 8000fda:	f00a fee5 	bl	800bda8 <f_mount>
 8000fde:	4603      	mov	r3, r0
 8000fe0:	461a      	mov	r2, r3
 8000fe2:	4b2d      	ldr	r3, [pc, #180]	; (8001098 <main+0x100>)
 8000fe4:	701a      	strb	r2, [r3, #0]
	if (fresult != FR_OK) send_uart ("ERROR!!! in mounting SD CARD...\n\n");
 8000fe6:	4b2c      	ldr	r3, [pc, #176]	; (8001098 <main+0x100>)
 8000fe8:	781b      	ldrb	r3, [r3, #0]
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	d003      	beq.n	8000ff6 <main+0x5e>
 8000fee:	482b      	ldr	r0, [pc, #172]	; (800109c <main+0x104>)
 8000ff0:	f7ff ffba 	bl	8000f68 <send_uart>
 8000ff4:	e002      	b.n	8000ffc <main+0x64>
	else send_uart("SD CARD mounted successfully...\n\n");
 8000ff6:	482a      	ldr	r0, [pc, #168]	; (80010a0 <main+0x108>)
 8000ff8:	f7ff ffb6 	bl	8000f68 <send_uart>
	/* Create second file with read write access and open it */
	fresult = f_open(&fil, "file4.txt", FA_CREATE_ALWAYS | FA_WRITE);
 8000ffc:	220a      	movs	r2, #10
 8000ffe:	4929      	ldr	r1, [pc, #164]	; (80010a4 <main+0x10c>)
 8001000:	4829      	ldr	r0, [pc, #164]	; (80010a8 <main+0x110>)
 8001002:	f00a ff17 	bl	800be34 <f_open>
 8001006:	4603      	mov	r3, r0
 8001008:	461a      	mov	r2, r3
 800100a:	4b23      	ldr	r3, [pc, #140]	; (8001098 <main+0x100>)
 800100c:	701a      	strb	r2, [r3, #0]
	IKS01A3_MOTION_SENSOR_GetAxes(IKS01A3_LSM6DSO_0, MOTION_ACCELERO, &misure_accelerometro);
 800100e:	4a27      	ldr	r2, [pc, #156]	; (80010ac <main+0x114>)
 8001010:	2102      	movs	r1, #2
 8001012:	2000      	movs	r0, #0
 8001014:	f005 f982 	bl	800631c <IKS01A3_MOTION_SENSOR_GetAxes>
	//	LSM6DSO_ACC_GetAxes(&accelerometro, &misure_accelerometro);


	sprintf((char *)buffer, "misure x: %ld, misure y: %ld, misure z: %ld ",misure_accelerometro.x, misure_accelerometro.y, misure_accelerometro.z );
 8001018:	4b24      	ldr	r3, [pc, #144]	; (80010ac <main+0x114>)
 800101a:	681a      	ldr	r2, [r3, #0]
 800101c:	4b23      	ldr	r3, [pc, #140]	; (80010ac <main+0x114>)
 800101e:	6859      	ldr	r1, [r3, #4]
 8001020:	4b22      	ldr	r3, [pc, #136]	; (80010ac <main+0x114>)
 8001022:	689b      	ldr	r3, [r3, #8]
 8001024:	9300      	str	r3, [sp, #0]
 8001026:	460b      	mov	r3, r1
 8001028:	4921      	ldr	r1, [pc, #132]	; (80010b0 <main+0x118>)
 800102a:	4822      	ldr	r0, [pc, #136]	; (80010b4 <main+0x11c>)
 800102c:	f00b fc5e 	bl	800c8ec <siprintf>
	//	sprintf((char *)buffer, "misure x:, misure y:, misure z");

	fresult = f_write(&fil, buffer, bufsize(buffer), &bw);
 8001030:	4820      	ldr	r0, [pc, #128]	; (80010b4 <main+0x11c>)
 8001032:	f7ff ff81 	bl	8000f38 <bufsize>
 8001036:	4603      	mov	r3, r0
 8001038:	461a      	mov	r2, r3
 800103a:	4b1f      	ldr	r3, [pc, #124]	; (80010b8 <main+0x120>)
 800103c:	491d      	ldr	r1, [pc, #116]	; (80010b4 <main+0x11c>)
 800103e:	481a      	ldr	r0, [pc, #104]	; (80010a8 <main+0x110>)
 8001040:	f00b f8c4 	bl	800c1cc <f_write>
 8001044:	4603      	mov	r3, r0
 8001046:	461a      	mov	r2, r3
 8001048:	4b13      	ldr	r3, [pc, #76]	; (8001098 <main+0x100>)
 800104a:	701a      	strb	r2, [r3, #0]

	/* Close file */
	f_close(&fil);
 800104c:	4816      	ldr	r0, [pc, #88]	; (80010a8 <main+0x110>)
 800104e:	f00b facf 	bl	800c5f0 <f_close>
	f_sync(&fil);
 8001052:	4815      	ldr	r0, [pc, #84]	; (80010a8 <main+0x110>)
 8001054:	f00b fa4e 	bl	800c4f4 <f_sync>

	/* Unmount SDCARD */
	fresult = f_mount(NULL, "/", 1);
 8001058:	2201      	movs	r2, #1
 800105a:	490d      	ldr	r1, [pc, #52]	; (8001090 <main+0xf8>)
 800105c:	2000      	movs	r0, #0
 800105e:	f00a fea3 	bl	800bda8 <f_mount>
 8001062:	4603      	mov	r3, r0
 8001064:	461a      	mov	r2, r3
 8001066:	4b0c      	ldr	r3, [pc, #48]	; (8001098 <main+0x100>)
 8001068:	701a      	strb	r2, [r3, #0]
	if (fresult == FR_OK) send_uart ("SD CARD UNMOUNTED successfully...\n");
 800106a:	4b0b      	ldr	r3, [pc, #44]	; (8001098 <main+0x100>)
 800106c:	781b      	ldrb	r3, [r3, #0]
 800106e:	2b00      	cmp	r3, #0
 8001070:	d102      	bne.n	8001078 <main+0xe0>
 8001072:	4812      	ldr	r0, [pc, #72]	; (80010bc <main+0x124>)
 8001074:	f7ff ff78 	bl	8000f68 <send_uart>


		if(IKS01A3_MOTION_SENSOR_Disable(IKS01A3_LSM6DSO_0, MOTION_ACCELERO)==HAL_OK){
 8001078:	2102      	movs	r1, #2
 800107a:	2000      	movs	r0, #0
 800107c:	f005 f90c 	bl	8006298 <IKS01A3_MOTION_SENSOR_Disable>
 8001080:	4603      	mov	r3, r0
 8001082:	2b00      	cmp	r3, #0
 8001084:	d102      	bne.n	800108c <main+0xf4>
			IKS01A3_MOTION_SENSOR_DeInit(IKS01A3_LSM6DSO_0);
 8001086:	2000      	movs	r0, #0
 8001088:	f005 f89c 	bl	80061c4 <IKS01A3_MOTION_SENSOR_DeInit>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1)
 800108c:	e7fe      	b.n	800108c <main+0xf4>
 800108e:	bf00      	nop
 8001090:	0800d1e0 	.word	0x0800d1e0
 8001094:	20000224 	.word	0x20000224
 8001098:	2000228c 	.word	0x2000228c
 800109c:	0800d1e4 	.word	0x0800d1e4
 80010a0:	0800d208 	.word	0x0800d208
 80010a4:	0800d22c 	.word	0x0800d22c
 80010a8:	2000125c 	.word	0x2000125c
 80010ac:	20000218 	.word	0x20000218
 80010b0:	0800d238 	.word	0x0800d238
 80010b4:	20002294 	.word	0x20002294
 80010b8:	20002290 	.word	0x20002290
 80010bc:	0800d268 	.word	0x0800d268

080010c0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80010c0:	b580      	push	{r7, lr}
 80010c2:	b094      	sub	sp, #80	; 0x50
 80010c4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80010c6:	f107 0320 	add.w	r3, r7, #32
 80010ca:	2230      	movs	r2, #48	; 0x30
 80010cc:	2100      	movs	r1, #0
 80010ce:	4618      	mov	r0, r3
 80010d0:	f00b fc04 	bl	800c8dc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80010d4:	f107 030c 	add.w	r3, r7, #12
 80010d8:	2200      	movs	r2, #0
 80010da:	601a      	str	r2, [r3, #0]
 80010dc:	605a      	str	r2, [r3, #4]
 80010de:	609a      	str	r2, [r3, #8]
 80010e0:	60da      	str	r2, [r3, #12]
 80010e2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80010e4:	2300      	movs	r3, #0
 80010e6:	60bb      	str	r3, [r7, #8]
 80010e8:	4b29      	ldr	r3, [pc, #164]	; (8001190 <SystemClock_Config+0xd0>)
 80010ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010ec:	4a28      	ldr	r2, [pc, #160]	; (8001190 <SystemClock_Config+0xd0>)
 80010ee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80010f2:	6413      	str	r3, [r2, #64]	; 0x40
 80010f4:	4b26      	ldr	r3, [pc, #152]	; (8001190 <SystemClock_Config+0xd0>)
 80010f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010f8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010fc:	60bb      	str	r3, [r7, #8]
 80010fe:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8001100:	2300      	movs	r3, #0
 8001102:	607b      	str	r3, [r7, #4]
 8001104:	4b23      	ldr	r3, [pc, #140]	; (8001194 <SystemClock_Config+0xd4>)
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800110c:	4a21      	ldr	r2, [pc, #132]	; (8001194 <SystemClock_Config+0xd4>)
 800110e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001112:	6013      	str	r3, [r2, #0]
 8001114:	4b1f      	ldr	r3, [pc, #124]	; (8001194 <SystemClock_Config+0xd4>)
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800111c:	607b      	str	r3, [r7, #4]
 800111e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001120:	2302      	movs	r3, #2
 8001122:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001124:	2301      	movs	r3, #1
 8001126:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001128:	2310      	movs	r3, #16
 800112a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800112c:	2302      	movs	r3, #2
 800112e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001130:	2300      	movs	r3, #0
 8001132:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8001134:	2310      	movs	r3, #16
 8001136:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001138:	f44f 73a8 	mov.w	r3, #336	; 0x150
 800113c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800113e:	2304      	movs	r3, #4
 8001140:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001142:	2307      	movs	r3, #7
 8001144:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001146:	f107 0320 	add.w	r3, r7, #32
 800114a:	4618      	mov	r0, r3
 800114c:	f006 ff56 	bl	8007ffc <HAL_RCC_OscConfig>
 8001150:	4603      	mov	r3, r0
 8001152:	2b00      	cmp	r3, #0
 8001154:	d001      	beq.n	800115a <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8001156:	f000 f8ed 	bl	8001334 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800115a:	230f      	movs	r3, #15
 800115c:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800115e:	2302      	movs	r3, #2
 8001160:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001162:	2300      	movs	r3, #0
 8001164:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001166:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800116a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800116c:	2300      	movs	r3, #0
 800116e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001170:	f107 030c 	add.w	r3, r7, #12
 8001174:	2102      	movs	r1, #2
 8001176:	4618      	mov	r0, r3
 8001178:	f007 f9b8 	bl	80084ec <HAL_RCC_ClockConfig>
 800117c:	4603      	mov	r3, r0
 800117e:	2b00      	cmp	r3, #0
 8001180:	d001      	beq.n	8001186 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8001182:	f000 f8d7 	bl	8001334 <Error_Handler>
  }
}
 8001186:	bf00      	nop
 8001188:	3750      	adds	r7, #80	; 0x50
 800118a:	46bd      	mov	sp, r7
 800118c:	bd80      	pop	{r7, pc}
 800118e:	bf00      	nop
 8001190:	40023800 	.word	0x40023800
 8001194:	40007000 	.word	0x40007000

08001198 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001198:	b580      	push	{r7, lr}
 800119a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800119c:	4b17      	ldr	r3, [pc, #92]	; (80011fc <MX_SPI1_Init+0x64>)
 800119e:	4a18      	ldr	r2, [pc, #96]	; (8001200 <MX_SPI1_Init+0x68>)
 80011a0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80011a2:	4b16      	ldr	r3, [pc, #88]	; (80011fc <MX_SPI1_Init+0x64>)
 80011a4:	f44f 7282 	mov.w	r2, #260	; 0x104
 80011a8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80011aa:	4b14      	ldr	r3, [pc, #80]	; (80011fc <MX_SPI1_Init+0x64>)
 80011ac:	2200      	movs	r2, #0
 80011ae:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80011b0:	4b12      	ldr	r3, [pc, #72]	; (80011fc <MX_SPI1_Init+0x64>)
 80011b2:	2200      	movs	r2, #0
 80011b4:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80011b6:	4b11      	ldr	r3, [pc, #68]	; (80011fc <MX_SPI1_Init+0x64>)
 80011b8:	2200      	movs	r2, #0
 80011ba:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80011bc:	4b0f      	ldr	r3, [pc, #60]	; (80011fc <MX_SPI1_Init+0x64>)
 80011be:	2200      	movs	r2, #0
 80011c0:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80011c2:	4b0e      	ldr	r3, [pc, #56]	; (80011fc <MX_SPI1_Init+0x64>)
 80011c4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80011c8:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 80011ca:	4b0c      	ldr	r3, [pc, #48]	; (80011fc <MX_SPI1_Init+0x64>)
 80011cc:	2230      	movs	r2, #48	; 0x30
 80011ce:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80011d0:	4b0a      	ldr	r3, [pc, #40]	; (80011fc <MX_SPI1_Init+0x64>)
 80011d2:	2200      	movs	r2, #0
 80011d4:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80011d6:	4b09      	ldr	r3, [pc, #36]	; (80011fc <MX_SPI1_Init+0x64>)
 80011d8:	2200      	movs	r2, #0
 80011da:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80011dc:	4b07      	ldr	r3, [pc, #28]	; (80011fc <MX_SPI1_Init+0x64>)
 80011de:	2200      	movs	r2, #0
 80011e0:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80011e2:	4b06      	ldr	r3, [pc, #24]	; (80011fc <MX_SPI1_Init+0x64>)
 80011e4:	220a      	movs	r2, #10
 80011e6:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80011e8:	4804      	ldr	r0, [pc, #16]	; (80011fc <MX_SPI1_Init+0x64>)
 80011ea:	f007 fb9f 	bl	800892c <HAL_SPI_Init>
 80011ee:	4603      	mov	r3, r0
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	d001      	beq.n	80011f8 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80011f4:	f000 f89e 	bl	8001334 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80011f8:	bf00      	nop
 80011fa:	bd80      	pop	{r7, pc}
 80011fc:	2000017c 	.word	0x2000017c
 8001200:	40013000 	.word	0x40013000

08001204 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001204:	b580      	push	{r7, lr}
 8001206:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001208:	4b11      	ldr	r3, [pc, #68]	; (8001250 <MX_USART2_UART_Init+0x4c>)
 800120a:	4a12      	ldr	r2, [pc, #72]	; (8001254 <MX_USART2_UART_Init+0x50>)
 800120c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800120e:	4b10      	ldr	r3, [pc, #64]	; (8001250 <MX_USART2_UART_Init+0x4c>)
 8001210:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001214:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001216:	4b0e      	ldr	r3, [pc, #56]	; (8001250 <MX_USART2_UART_Init+0x4c>)
 8001218:	2200      	movs	r2, #0
 800121a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800121c:	4b0c      	ldr	r3, [pc, #48]	; (8001250 <MX_USART2_UART_Init+0x4c>)
 800121e:	2200      	movs	r2, #0
 8001220:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001222:	4b0b      	ldr	r3, [pc, #44]	; (8001250 <MX_USART2_UART_Init+0x4c>)
 8001224:	2200      	movs	r2, #0
 8001226:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001228:	4b09      	ldr	r3, [pc, #36]	; (8001250 <MX_USART2_UART_Init+0x4c>)
 800122a:	220c      	movs	r2, #12
 800122c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800122e:	4b08      	ldr	r3, [pc, #32]	; (8001250 <MX_USART2_UART_Init+0x4c>)
 8001230:	2200      	movs	r2, #0
 8001232:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001234:	4b06      	ldr	r3, [pc, #24]	; (8001250 <MX_USART2_UART_Init+0x4c>)
 8001236:	2200      	movs	r2, #0
 8001238:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800123a:	4805      	ldr	r0, [pc, #20]	; (8001250 <MX_USART2_UART_Init+0x4c>)
 800123c:	f007 ffa8 	bl	8009190 <HAL_UART_Init>
 8001240:	4603      	mov	r3, r0
 8001242:	2b00      	cmp	r3, #0
 8001244:	d001      	beq.n	800124a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001246:	f000 f875 	bl	8001334 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800124a:	bf00      	nop
 800124c:	bd80      	pop	{r7, pc}
 800124e:	bf00      	nop
 8001250:	200001d4 	.word	0x200001d4
 8001254:	40004400 	.word	0x40004400

08001258 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001258:	b580      	push	{r7, lr}
 800125a:	b08a      	sub	sp, #40	; 0x28
 800125c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800125e:	f107 0314 	add.w	r3, r7, #20
 8001262:	2200      	movs	r2, #0
 8001264:	601a      	str	r2, [r3, #0]
 8001266:	605a      	str	r2, [r3, #4]
 8001268:	609a      	str	r2, [r3, #8]
 800126a:	60da      	str	r2, [r3, #12]
 800126c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800126e:	2300      	movs	r3, #0
 8001270:	613b      	str	r3, [r7, #16]
 8001272:	4b2d      	ldr	r3, [pc, #180]	; (8001328 <MX_GPIO_Init+0xd0>)
 8001274:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001276:	4a2c      	ldr	r2, [pc, #176]	; (8001328 <MX_GPIO_Init+0xd0>)
 8001278:	f043 0304 	orr.w	r3, r3, #4
 800127c:	6313      	str	r3, [r2, #48]	; 0x30
 800127e:	4b2a      	ldr	r3, [pc, #168]	; (8001328 <MX_GPIO_Init+0xd0>)
 8001280:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001282:	f003 0304 	and.w	r3, r3, #4
 8001286:	613b      	str	r3, [r7, #16]
 8001288:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800128a:	2300      	movs	r3, #0
 800128c:	60fb      	str	r3, [r7, #12]
 800128e:	4b26      	ldr	r3, [pc, #152]	; (8001328 <MX_GPIO_Init+0xd0>)
 8001290:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001292:	4a25      	ldr	r2, [pc, #148]	; (8001328 <MX_GPIO_Init+0xd0>)
 8001294:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001298:	6313      	str	r3, [r2, #48]	; 0x30
 800129a:	4b23      	ldr	r3, [pc, #140]	; (8001328 <MX_GPIO_Init+0xd0>)
 800129c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800129e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80012a2:	60fb      	str	r3, [r7, #12]
 80012a4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80012a6:	2300      	movs	r3, #0
 80012a8:	60bb      	str	r3, [r7, #8]
 80012aa:	4b1f      	ldr	r3, [pc, #124]	; (8001328 <MX_GPIO_Init+0xd0>)
 80012ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ae:	4a1e      	ldr	r2, [pc, #120]	; (8001328 <MX_GPIO_Init+0xd0>)
 80012b0:	f043 0301 	orr.w	r3, r3, #1
 80012b4:	6313      	str	r3, [r2, #48]	; 0x30
 80012b6:	4b1c      	ldr	r3, [pc, #112]	; (8001328 <MX_GPIO_Init+0xd0>)
 80012b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ba:	f003 0301 	and.w	r3, r3, #1
 80012be:	60bb      	str	r3, [r7, #8]
 80012c0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80012c2:	2300      	movs	r3, #0
 80012c4:	607b      	str	r3, [r7, #4]
 80012c6:	4b18      	ldr	r3, [pc, #96]	; (8001328 <MX_GPIO_Init+0xd0>)
 80012c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ca:	4a17      	ldr	r2, [pc, #92]	; (8001328 <MX_GPIO_Init+0xd0>)
 80012cc:	f043 0302 	orr.w	r3, r3, #2
 80012d0:	6313      	str	r3, [r2, #48]	; 0x30
 80012d2:	4b15      	ldr	r3, [pc, #84]	; (8001328 <MX_GPIO_Init+0xd0>)
 80012d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012d6:	f003 0302 	and.w	r3, r3, #2
 80012da:	607b      	str	r3, [r7, #4]
 80012dc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, SD_CS_Pin|LD2_Pin, GPIO_PIN_RESET);
 80012de:	2200      	movs	r2, #0
 80012e0:	2130      	movs	r1, #48	; 0x30
 80012e2:	4812      	ldr	r0, [pc, #72]	; (800132c <MX_GPIO_Init+0xd4>)
 80012e4:	f005 fe52 	bl	8006f8c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80012e8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80012ec:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80012ee:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80012f2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012f4:	2300      	movs	r3, #0
 80012f6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80012f8:	f107 0314 	add.w	r3, r7, #20
 80012fc:	4619      	mov	r1, r3
 80012fe:	480c      	ldr	r0, [pc, #48]	; (8001330 <MX_GPIO_Init+0xd8>)
 8001300:	f005 fbdc 	bl	8006abc <HAL_GPIO_Init>

  /*Configure GPIO pins : SD_CS_Pin LD2_Pin */
  GPIO_InitStruct.Pin = SD_CS_Pin|LD2_Pin;
 8001304:	2330      	movs	r3, #48	; 0x30
 8001306:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001308:	2301      	movs	r3, #1
 800130a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800130c:	2300      	movs	r3, #0
 800130e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001310:	2300      	movs	r3, #0
 8001312:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001314:	f107 0314 	add.w	r3, r7, #20
 8001318:	4619      	mov	r1, r3
 800131a:	4804      	ldr	r0, [pc, #16]	; (800132c <MX_GPIO_Init+0xd4>)
 800131c:	f005 fbce 	bl	8006abc <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001320:	bf00      	nop
 8001322:	3728      	adds	r7, #40	; 0x28
 8001324:	46bd      	mov	sp, r7
 8001326:	bd80      	pop	{r7, pc}
 8001328:	40023800 	.word	0x40023800
 800132c:	40020000 	.word	0x40020000
 8001330:	40020800 	.word	0x40020800

08001334 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001334:	b480      	push	{r7}
 8001336:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001338:	b672      	cpsid	i
}
 800133a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 800133c:	e7fe      	b.n	800133c <Error_Handler+0x8>
	...

08001340 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001340:	b580      	push	{r7, lr}
 8001342:	b082      	sub	sp, #8
 8001344:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001346:	2300      	movs	r3, #0
 8001348:	607b      	str	r3, [r7, #4]
 800134a:	4b10      	ldr	r3, [pc, #64]	; (800138c <HAL_MspInit+0x4c>)
 800134c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800134e:	4a0f      	ldr	r2, [pc, #60]	; (800138c <HAL_MspInit+0x4c>)
 8001350:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001354:	6453      	str	r3, [r2, #68]	; 0x44
 8001356:	4b0d      	ldr	r3, [pc, #52]	; (800138c <HAL_MspInit+0x4c>)
 8001358:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800135a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800135e:	607b      	str	r3, [r7, #4]
 8001360:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001362:	2300      	movs	r3, #0
 8001364:	603b      	str	r3, [r7, #0]
 8001366:	4b09      	ldr	r3, [pc, #36]	; (800138c <HAL_MspInit+0x4c>)
 8001368:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800136a:	4a08      	ldr	r2, [pc, #32]	; (800138c <HAL_MspInit+0x4c>)
 800136c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001370:	6413      	str	r3, [r2, #64]	; 0x40
 8001372:	4b06      	ldr	r3, [pc, #24]	; (800138c <HAL_MspInit+0x4c>)
 8001374:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001376:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800137a:	603b      	str	r3, [r7, #0]
 800137c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800137e:	2007      	movs	r0, #7
 8001380:	f005 fb68 	bl	8006a54 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001384:	bf00      	nop
 8001386:	3708      	adds	r7, #8
 8001388:	46bd      	mov	sp, r7
 800138a:	bd80      	pop	{r7, pc}
 800138c:	40023800 	.word	0x40023800

08001390 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001390:	b580      	push	{r7, lr}
 8001392:	b08a      	sub	sp, #40	; 0x28
 8001394:	af00      	add	r7, sp, #0
 8001396:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001398:	f107 0314 	add.w	r3, r7, #20
 800139c:	2200      	movs	r2, #0
 800139e:	601a      	str	r2, [r3, #0]
 80013a0:	605a      	str	r2, [r3, #4]
 80013a2:	609a      	str	r2, [r3, #8]
 80013a4:	60da      	str	r2, [r3, #12]
 80013a6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	4a28      	ldr	r2, [pc, #160]	; (8001450 <HAL_SPI_MspInit+0xc0>)
 80013ae:	4293      	cmp	r3, r2
 80013b0:	d149      	bne.n	8001446 <HAL_SPI_MspInit+0xb6>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80013b2:	2300      	movs	r3, #0
 80013b4:	613b      	str	r3, [r7, #16]
 80013b6:	4b27      	ldr	r3, [pc, #156]	; (8001454 <HAL_SPI_MspInit+0xc4>)
 80013b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013ba:	4a26      	ldr	r2, [pc, #152]	; (8001454 <HAL_SPI_MspInit+0xc4>)
 80013bc:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80013c0:	6453      	str	r3, [r2, #68]	; 0x44
 80013c2:	4b24      	ldr	r3, [pc, #144]	; (8001454 <HAL_SPI_MspInit+0xc4>)
 80013c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013c6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80013ca:	613b      	str	r3, [r7, #16]
 80013cc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013ce:	2300      	movs	r3, #0
 80013d0:	60fb      	str	r3, [r7, #12]
 80013d2:	4b20      	ldr	r3, [pc, #128]	; (8001454 <HAL_SPI_MspInit+0xc4>)
 80013d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013d6:	4a1f      	ldr	r2, [pc, #124]	; (8001454 <HAL_SPI_MspInit+0xc4>)
 80013d8:	f043 0301 	orr.w	r3, r3, #1
 80013dc:	6313      	str	r3, [r2, #48]	; 0x30
 80013de:	4b1d      	ldr	r3, [pc, #116]	; (8001454 <HAL_SPI_MspInit+0xc4>)
 80013e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013e2:	f003 0301 	and.w	r3, r3, #1
 80013e6:	60fb      	str	r3, [r7, #12]
 80013e8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80013ea:	2300      	movs	r3, #0
 80013ec:	60bb      	str	r3, [r7, #8]
 80013ee:	4b19      	ldr	r3, [pc, #100]	; (8001454 <HAL_SPI_MspInit+0xc4>)
 80013f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013f2:	4a18      	ldr	r2, [pc, #96]	; (8001454 <HAL_SPI_MspInit+0xc4>)
 80013f4:	f043 0302 	orr.w	r3, r3, #2
 80013f8:	6313      	str	r3, [r2, #48]	; 0x30
 80013fa:	4b16      	ldr	r3, [pc, #88]	; (8001454 <HAL_SPI_MspInit+0xc4>)
 80013fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013fe:	f003 0302 	and.w	r3, r3, #2
 8001402:	60bb      	str	r3, [r7, #8]
 8001404:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    PB3     ------> SPI1_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001406:	23c0      	movs	r3, #192	; 0xc0
 8001408:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800140a:	2302      	movs	r3, #2
 800140c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800140e:	2300      	movs	r3, #0
 8001410:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001412:	2303      	movs	r3, #3
 8001414:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001416:	2305      	movs	r3, #5
 8001418:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800141a:	f107 0314 	add.w	r3, r7, #20
 800141e:	4619      	mov	r1, r3
 8001420:	480d      	ldr	r0, [pc, #52]	; (8001458 <HAL_SPI_MspInit+0xc8>)
 8001422:	f005 fb4b 	bl	8006abc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001426:	2308      	movs	r3, #8
 8001428:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800142a:	2302      	movs	r3, #2
 800142c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800142e:	2300      	movs	r3, #0
 8001430:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001432:	2303      	movs	r3, #3
 8001434:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001436:	2305      	movs	r3, #5
 8001438:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800143a:	f107 0314 	add.w	r3, r7, #20
 800143e:	4619      	mov	r1, r3
 8001440:	4806      	ldr	r0, [pc, #24]	; (800145c <HAL_SPI_MspInit+0xcc>)
 8001442:	f005 fb3b 	bl	8006abc <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001446:	bf00      	nop
 8001448:	3728      	adds	r7, #40	; 0x28
 800144a:	46bd      	mov	sp, r7
 800144c:	bd80      	pop	{r7, pc}
 800144e:	bf00      	nop
 8001450:	40013000 	.word	0x40013000
 8001454:	40023800 	.word	0x40023800
 8001458:	40020000 	.word	0x40020000
 800145c:	40020400 	.word	0x40020400

08001460 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001460:	b580      	push	{r7, lr}
 8001462:	b08a      	sub	sp, #40	; 0x28
 8001464:	af00      	add	r7, sp, #0
 8001466:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001468:	f107 0314 	add.w	r3, r7, #20
 800146c:	2200      	movs	r2, #0
 800146e:	601a      	str	r2, [r3, #0]
 8001470:	605a      	str	r2, [r3, #4]
 8001472:	609a      	str	r2, [r3, #8]
 8001474:	60da      	str	r2, [r3, #12]
 8001476:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	4a19      	ldr	r2, [pc, #100]	; (80014e4 <HAL_UART_MspInit+0x84>)
 800147e:	4293      	cmp	r3, r2
 8001480:	d12b      	bne.n	80014da <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001482:	2300      	movs	r3, #0
 8001484:	613b      	str	r3, [r7, #16]
 8001486:	4b18      	ldr	r3, [pc, #96]	; (80014e8 <HAL_UART_MspInit+0x88>)
 8001488:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800148a:	4a17      	ldr	r2, [pc, #92]	; (80014e8 <HAL_UART_MspInit+0x88>)
 800148c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001490:	6413      	str	r3, [r2, #64]	; 0x40
 8001492:	4b15      	ldr	r3, [pc, #84]	; (80014e8 <HAL_UART_MspInit+0x88>)
 8001494:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001496:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800149a:	613b      	str	r3, [r7, #16]
 800149c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800149e:	2300      	movs	r3, #0
 80014a0:	60fb      	str	r3, [r7, #12]
 80014a2:	4b11      	ldr	r3, [pc, #68]	; (80014e8 <HAL_UART_MspInit+0x88>)
 80014a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014a6:	4a10      	ldr	r2, [pc, #64]	; (80014e8 <HAL_UART_MspInit+0x88>)
 80014a8:	f043 0301 	orr.w	r3, r3, #1
 80014ac:	6313      	str	r3, [r2, #48]	; 0x30
 80014ae:	4b0e      	ldr	r3, [pc, #56]	; (80014e8 <HAL_UART_MspInit+0x88>)
 80014b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014b2:	f003 0301 	and.w	r3, r3, #1
 80014b6:	60fb      	str	r3, [r7, #12]
 80014b8:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80014ba:	230c      	movs	r3, #12
 80014bc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014be:	2302      	movs	r3, #2
 80014c0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014c2:	2300      	movs	r3, #0
 80014c4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014c6:	2300      	movs	r3, #0
 80014c8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80014ca:	2307      	movs	r3, #7
 80014cc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014ce:	f107 0314 	add.w	r3, r7, #20
 80014d2:	4619      	mov	r1, r3
 80014d4:	4805      	ldr	r0, [pc, #20]	; (80014ec <HAL_UART_MspInit+0x8c>)
 80014d6:	f005 faf1 	bl	8006abc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80014da:	bf00      	nop
 80014dc:	3728      	adds	r7, #40	; 0x28
 80014de:	46bd      	mov	sp, r7
 80014e0:	bd80      	pop	{r7, pc}
 80014e2:	bf00      	nop
 80014e4:	40004400 	.word	0x40004400
 80014e8:	40023800 	.word	0x40023800
 80014ec:	40020000 	.word	0x40020000

080014f0 <SDTimer_Handler>:

/* External variables --------------------------------------------------------*/

/* USER CODE BEGIN EV */
void SDTimer_Handler(void)
{
 80014f0:	b480      	push	{r7}
 80014f2:	af00      	add	r7, sp, #0
  if(Timer1 > 0)
 80014f4:	4b0e      	ldr	r3, [pc, #56]	; (8001530 <SDTimer_Handler+0x40>)
 80014f6:	781b      	ldrb	r3, [r3, #0]
 80014f8:	b2db      	uxtb	r3, r3
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d006      	beq.n	800150c <SDTimer_Handler+0x1c>
    Timer1--;
 80014fe:	4b0c      	ldr	r3, [pc, #48]	; (8001530 <SDTimer_Handler+0x40>)
 8001500:	781b      	ldrb	r3, [r3, #0]
 8001502:	b2db      	uxtb	r3, r3
 8001504:	3b01      	subs	r3, #1
 8001506:	b2da      	uxtb	r2, r3
 8001508:	4b09      	ldr	r3, [pc, #36]	; (8001530 <SDTimer_Handler+0x40>)
 800150a:	701a      	strb	r2, [r3, #0]

  if(Timer2 > 0)
 800150c:	4b09      	ldr	r3, [pc, #36]	; (8001534 <SDTimer_Handler+0x44>)
 800150e:	781b      	ldrb	r3, [r3, #0]
 8001510:	b2db      	uxtb	r3, r3
 8001512:	2b00      	cmp	r3, #0
 8001514:	d006      	beq.n	8001524 <SDTimer_Handler+0x34>
    Timer2--;
 8001516:	4b07      	ldr	r3, [pc, #28]	; (8001534 <SDTimer_Handler+0x44>)
 8001518:	781b      	ldrb	r3, [r3, #0]
 800151a:	b2db      	uxtb	r3, r3
 800151c:	3b01      	subs	r3, #1
 800151e:	b2da      	uxtb	r2, r3
 8001520:	4b04      	ldr	r3, [pc, #16]	; (8001534 <SDTimer_Handler+0x44>)
 8001522:	701a      	strb	r2, [r3, #0]
}
 8001524:	bf00      	nop
 8001526:	46bd      	mov	sp, r7
 8001528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800152c:	4770      	bx	lr
 800152e:	bf00      	nop
 8001530:	20002495 	.word	0x20002495
 8001534:	20002496 	.word	0x20002496

08001538 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001538:	b480      	push	{r7}
 800153a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800153c:	e7fe      	b.n	800153c <NMI_Handler+0x4>

0800153e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800153e:	b480      	push	{r7}
 8001540:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001542:	e7fe      	b.n	8001542 <HardFault_Handler+0x4>

08001544 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001544:	b480      	push	{r7}
 8001546:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001548:	e7fe      	b.n	8001548 <MemManage_Handler+0x4>

0800154a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800154a:	b480      	push	{r7}
 800154c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800154e:	e7fe      	b.n	800154e <BusFault_Handler+0x4>

08001550 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001550:	b480      	push	{r7}
 8001552:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001554:	e7fe      	b.n	8001554 <UsageFault_Handler+0x4>

08001556 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001556:	b480      	push	{r7}
 8001558:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800155a:	bf00      	nop
 800155c:	46bd      	mov	sp, r7
 800155e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001562:	4770      	bx	lr

08001564 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001564:	b480      	push	{r7}
 8001566:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001568:	bf00      	nop
 800156a:	46bd      	mov	sp, r7
 800156c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001570:	4770      	bx	lr

08001572 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001572:	b480      	push	{r7}
 8001574:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001576:	bf00      	nop
 8001578:	46bd      	mov	sp, r7
 800157a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800157e:	4770      	bx	lr

08001580 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001580:	b580      	push	{r7, lr}
 8001582:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

	  FatFsCnt++;
 8001584:	4b0a      	ldr	r3, [pc, #40]	; (80015b0 <SysTick_Handler+0x30>)
 8001586:	781b      	ldrb	r3, [r3, #0]
 8001588:	b2db      	uxtb	r3, r3
 800158a:	3301      	adds	r3, #1
 800158c:	b2da      	uxtb	r2, r3
 800158e:	4b08      	ldr	r3, [pc, #32]	; (80015b0 <SysTick_Handler+0x30>)
 8001590:	701a      	strb	r2, [r3, #0]
	  if(FatFsCnt >= 10)
 8001592:	4b07      	ldr	r3, [pc, #28]	; (80015b0 <SysTick_Handler+0x30>)
 8001594:	781b      	ldrb	r3, [r3, #0]
 8001596:	b2db      	uxtb	r3, r3
 8001598:	2b09      	cmp	r3, #9
 800159a:	d904      	bls.n	80015a6 <SysTick_Handler+0x26>
	  {
	    FatFsCnt = 0;
 800159c:	4b04      	ldr	r3, [pc, #16]	; (80015b0 <SysTick_Handler+0x30>)
 800159e:	2200      	movs	r2, #0
 80015a0:	701a      	strb	r2, [r3, #0]
	    SDTimer_Handler();
 80015a2:	f7ff ffa5 	bl	80014f0 <SDTimer_Handler>
	  }

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80015a6:	f005 f95f 	bl	8006868 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80015aa:	bf00      	nop
 80015ac:	bd80      	pop	{r7, pc}
 80015ae:	bf00      	nop
 80015b0:	20002494 	.word	0x20002494

080015b4 <BSP_I2C1_Init>:
/**
  * @brief  Initialize I2C HAL
  * @retval BSP status
  */
int32_t BSP_I2C1_Init(void)
{
 80015b4:	b580      	push	{r7, lr}
 80015b6:	b082      	sub	sp, #8
 80015b8:	af00      	add	r7, sp, #0

  int32_t ret = BSP_ERROR_NONE;
 80015ba:	2300      	movs	r3, #0
 80015bc:	607b      	str	r3, [r7, #4]

  hi2c1.Instance  = I2C1;
 80015be:	4b13      	ldr	r3, [pc, #76]	; (800160c <BSP_I2C1_Init+0x58>)
 80015c0:	4a13      	ldr	r2, [pc, #76]	; (8001610 <BSP_I2C1_Init+0x5c>)
 80015c2:	601a      	str	r2, [r3, #0]

  if(I2C1InitCounter++ == 0)
 80015c4:	4b13      	ldr	r3, [pc, #76]	; (8001614 <BSP_I2C1_Init+0x60>)
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	1c5a      	adds	r2, r3, #1
 80015ca:	4912      	ldr	r1, [pc, #72]	; (8001614 <BSP_I2C1_Init+0x60>)
 80015cc:	600a      	str	r2, [r1, #0]
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d117      	bne.n	8001602 <BSP_I2C1_Init+0x4e>
  {
    if (HAL_I2C_GetState(&hi2c1) == HAL_I2C_STATE_RESET)
 80015d2:	480e      	ldr	r0, [pc, #56]	; (800160c <BSP_I2C1_Init+0x58>)
 80015d4:	f006 f99c 	bl	8007910 <HAL_I2C_GetState>
 80015d8:	4603      	mov	r3, r0
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d111      	bne.n	8001602 <BSP_I2C1_Init+0x4e>
    {
    #if (USE_HAL_I2C_REGISTER_CALLBACKS == 0U)
      /* Init the I2C Msp */
      I2C1_MspInit(&hi2c1);
 80015de:	480b      	ldr	r0, [pc, #44]	; (800160c <BSP_I2C1_Init+0x58>)
 80015e0:	f000 f8e2 	bl	80017a8 <I2C1_MspInit>
        {
          return BSP_ERROR_MSP_FAILURE;
        }
      }
    #endif
      if(ret == BSP_ERROR_NONE)
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d10b      	bne.n	8001602 <BSP_I2C1_Init+0x4e>
      {
        /* Init the I2C */
        if(MX_I2C1_Init(&hi2c1) != HAL_OK)
 80015ea:	4808      	ldr	r0, [pc, #32]	; (800160c <BSP_I2C1_Init+0x58>)
 80015ec:	f000 f8a8 	bl	8001740 <MX_I2C1_Init>
 80015f0:	4603      	mov	r3, r0
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d003      	beq.n	80015fe <BSP_I2C1_Init+0x4a>
        {
          ret = BSP_ERROR_BUS_FAILURE;
 80015f6:	f06f 0307 	mvn.w	r3, #7
 80015fa:	607b      	str	r3, [r7, #4]
 80015fc:	e001      	b.n	8001602 <BSP_I2C1_Init+0x4e>
        }
        else
        {
          ret = BSP_ERROR_NONE;
 80015fe:	2300      	movs	r3, #0
 8001600:	607b      	str	r3, [r7, #4]
        }
      }
    }
  }
  return ret;
 8001602:	687b      	ldr	r3, [r7, #4]
}
 8001604:	4618      	mov	r0, r3
 8001606:	3708      	adds	r7, #8
 8001608:	46bd      	mov	sp, r7
 800160a:	bd80      	pop	{r7, pc}
 800160c:	20002498 	.word	0x20002498
 8001610:	40005400 	.word	0x40005400
 8001614:	200024ec 	.word	0x200024ec

08001618 <BSP_I2C1_DeInit>:
/**
  * @brief  DeInitialize I2C HAL.
  * @retval BSP status
  */
int32_t BSP_I2C1_DeInit(void)
{
 8001618:	b580      	push	{r7, lr}
 800161a:	b082      	sub	sp, #8
 800161c:	af00      	add	r7, sp, #0
  int32_t ret = BSP_ERROR_NONE;
 800161e:	2300      	movs	r3, #0
 8001620:	607b      	str	r3, [r7, #4]

  if (I2C1InitCounter > 0)
 8001622:	4b0f      	ldr	r3, [pc, #60]	; (8001660 <BSP_I2C1_DeInit+0x48>)
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	2b00      	cmp	r3, #0
 8001628:	d014      	beq.n	8001654 <BSP_I2C1_DeInit+0x3c>
  {
    if (--I2C1InitCounter == 0)
 800162a:	4b0d      	ldr	r3, [pc, #52]	; (8001660 <BSP_I2C1_DeInit+0x48>)
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	3b01      	subs	r3, #1
 8001630:	4a0b      	ldr	r2, [pc, #44]	; (8001660 <BSP_I2C1_DeInit+0x48>)
 8001632:	6013      	str	r3, [r2, #0]
 8001634:	4b0a      	ldr	r3, [pc, #40]	; (8001660 <BSP_I2C1_DeInit+0x48>)
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	2b00      	cmp	r3, #0
 800163a:	d10b      	bne.n	8001654 <BSP_I2C1_DeInit+0x3c>
    {
  #if (USE_HAL_I2C_REGISTER_CALLBACKS == 0U)
      /* DeInit the I2C */
      I2C1_MspDeInit(&hi2c1);
 800163c:	4809      	ldr	r0, [pc, #36]	; (8001664 <BSP_I2C1_DeInit+0x4c>)
 800163e:	f000 f8fd 	bl	800183c <I2C1_MspDeInit>
  #endif
      /* DeInit the I2C */
      if (HAL_I2C_DeInit(&hi2c1) != HAL_OK)
 8001642:	4808      	ldr	r0, [pc, #32]	; (8001664 <BSP_I2C1_DeInit+0x4c>)
 8001644:	f005 fe00 	bl	8007248 <HAL_I2C_DeInit>
 8001648:	4603      	mov	r3, r0
 800164a:	2b00      	cmp	r3, #0
 800164c:	d002      	beq.n	8001654 <BSP_I2C1_DeInit+0x3c>
      {
        ret = BSP_ERROR_BUS_FAILURE;
 800164e:	f06f 0307 	mvn.w	r3, #7
 8001652:	607b      	str	r3, [r7, #4]
      }
    }
  }
  return ret;
 8001654:	687b      	ldr	r3, [r7, #4]
}
 8001656:	4618      	mov	r0, r3
 8001658:	3708      	adds	r7, #8
 800165a:	46bd      	mov	sp, r7
 800165c:	bd80      	pop	{r7, pc}
 800165e:	bf00      	nop
 8001660:	200024ec 	.word	0x200024ec
 8001664:	20002498 	.word	0x20002498

08001668 <BSP_I2C1_WriteReg>:
  * @param  Length Data Length
  * @retval BSP status
  */

int32_t BSP_I2C1_WriteReg(uint16_t DevAddr, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 8001668:	b580      	push	{r7, lr}
 800166a:	b08a      	sub	sp, #40	; 0x28
 800166c:	af04      	add	r7, sp, #16
 800166e:	60ba      	str	r2, [r7, #8]
 8001670:	461a      	mov	r2, r3
 8001672:	4603      	mov	r3, r0
 8001674:	81fb      	strh	r3, [r7, #14]
 8001676:	460b      	mov	r3, r1
 8001678:	81bb      	strh	r3, [r7, #12]
 800167a:	4613      	mov	r3, r2
 800167c:	80fb      	strh	r3, [r7, #6]
  int32_t ret = BSP_ERROR_NONE;
 800167e:	2300      	movs	r3, #0
 8001680:	617b      	str	r3, [r7, #20]

  if (HAL_I2C_Mem_Write(&hi2c1, DevAddr,Reg, I2C_MEMADD_SIZE_8BIT,pData, Length, BUS_I2C1_POLL_TIMEOUT) != HAL_OK)
 8001682:	89ba      	ldrh	r2, [r7, #12]
 8001684:	89f9      	ldrh	r1, [r7, #14]
 8001686:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800168a:	9302      	str	r3, [sp, #8]
 800168c:	88fb      	ldrh	r3, [r7, #6]
 800168e:	9301      	str	r3, [sp, #4]
 8001690:	68bb      	ldr	r3, [r7, #8]
 8001692:	9300      	str	r3, [sp, #0]
 8001694:	2301      	movs	r3, #1
 8001696:	480c      	ldr	r0, [pc, #48]	; (80016c8 <BSP_I2C1_WriteReg+0x60>)
 8001698:	f005 fe1a 	bl	80072d0 <HAL_I2C_Mem_Write>
 800169c:	4603      	mov	r3, r0
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d00c      	beq.n	80016bc <BSP_I2C1_WriteReg+0x54>
  {
    if (HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF)
 80016a2:	4809      	ldr	r0, [pc, #36]	; (80016c8 <BSP_I2C1_WriteReg+0x60>)
 80016a4:	f006 f942 	bl	800792c <HAL_I2C_GetError>
 80016a8:	4603      	mov	r3, r0
 80016aa:	2b04      	cmp	r3, #4
 80016ac:	d103      	bne.n	80016b6 <BSP_I2C1_WriteReg+0x4e>
    {
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 80016ae:	f06f 0365 	mvn.w	r3, #101	; 0x65
 80016b2:	617b      	str	r3, [r7, #20]
 80016b4:	e002      	b.n	80016bc <BSP_I2C1_WriteReg+0x54>
    }
    else
    {
      ret =  BSP_ERROR_PERIPH_FAILURE;
 80016b6:	f06f 0303 	mvn.w	r3, #3
 80016ba:	617b      	str	r3, [r7, #20]
    }
  }
  return ret;
 80016bc:	697b      	ldr	r3, [r7, #20]
}
 80016be:	4618      	mov	r0, r3
 80016c0:	3718      	adds	r7, #24
 80016c2:	46bd      	mov	sp, r7
 80016c4:	bd80      	pop	{r7, pc}
 80016c6:	bf00      	nop
 80016c8:	20002498 	.word	0x20002498

080016cc <BSP_I2C1_ReadReg>:
  * @param  pData  Pointer to data buffer to read
  * @param  Length Data Length
  * @retval BSP status
  */
int32_t  BSP_I2C1_ReadReg(uint16_t DevAddr, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 80016cc:	b580      	push	{r7, lr}
 80016ce:	b08a      	sub	sp, #40	; 0x28
 80016d0:	af04      	add	r7, sp, #16
 80016d2:	60ba      	str	r2, [r7, #8]
 80016d4:	461a      	mov	r2, r3
 80016d6:	4603      	mov	r3, r0
 80016d8:	81fb      	strh	r3, [r7, #14]
 80016da:	460b      	mov	r3, r1
 80016dc:	81bb      	strh	r3, [r7, #12]
 80016de:	4613      	mov	r3, r2
 80016e0:	80fb      	strh	r3, [r7, #6]
  int32_t ret = BSP_ERROR_NONE;
 80016e2:	2300      	movs	r3, #0
 80016e4:	617b      	str	r3, [r7, #20]

  if (HAL_I2C_Mem_Read(&hi2c1, DevAddr, Reg, I2C_MEMADD_SIZE_8BIT, pData, Length, BUS_I2C1_POLL_TIMEOUT) != HAL_OK)
 80016e6:	89ba      	ldrh	r2, [r7, #12]
 80016e8:	89f9      	ldrh	r1, [r7, #14]
 80016ea:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80016ee:	9302      	str	r3, [sp, #8]
 80016f0:	88fb      	ldrh	r3, [r7, #6]
 80016f2:	9301      	str	r3, [sp, #4]
 80016f4:	68bb      	ldr	r3, [r7, #8]
 80016f6:	9300      	str	r3, [sp, #0]
 80016f8:	2301      	movs	r3, #1
 80016fa:	480c      	ldr	r0, [pc, #48]	; (800172c <BSP_I2C1_ReadReg+0x60>)
 80016fc:	f005 fee2 	bl	80074c4 <HAL_I2C_Mem_Read>
 8001700:	4603      	mov	r3, r0
 8001702:	2b00      	cmp	r3, #0
 8001704:	d00c      	beq.n	8001720 <BSP_I2C1_ReadReg+0x54>
  {
    if (HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF)
 8001706:	4809      	ldr	r0, [pc, #36]	; (800172c <BSP_I2C1_ReadReg+0x60>)
 8001708:	f006 f910 	bl	800792c <HAL_I2C_GetError>
 800170c:	4603      	mov	r3, r0
 800170e:	2b04      	cmp	r3, #4
 8001710:	d103      	bne.n	800171a <BSP_I2C1_ReadReg+0x4e>
    {
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 8001712:	f06f 0365 	mvn.w	r3, #101	; 0x65
 8001716:	617b      	str	r3, [r7, #20]
 8001718:	e002      	b.n	8001720 <BSP_I2C1_ReadReg+0x54>
    }
    else
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 800171a:	f06f 0303 	mvn.w	r3, #3
 800171e:	617b      	str	r3, [r7, #20]
    }
  }
  return ret;
 8001720:	697b      	ldr	r3, [r7, #20]
}
 8001722:	4618      	mov	r0, r3
 8001724:	3718      	adds	r7, #24
 8001726:	46bd      	mov	sp, r7
 8001728:	bd80      	pop	{r7, pc}
 800172a:	bf00      	nop
 800172c:	20002498 	.word	0x20002498

08001730 <BSP_GetTick>:

/**
  * @brief  Return system tick in ms
  * @retval Current HAL time base time stamp
  */
int32_t BSP_GetTick(void) {
 8001730:	b580      	push	{r7, lr}
 8001732:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8001734:	f005 f8ac 	bl	8006890 <HAL_GetTick>
 8001738:	4603      	mov	r3, r0
}
 800173a:	4618      	mov	r0, r3
 800173c:	bd80      	pop	{r7, pc}
	...

08001740 <MX_I2C1_Init>:

/* I2C1 init function */

__weak HAL_StatusTypeDef MX_I2C1_Init(I2C_HandleTypeDef* hi2c)
{
 8001740:	b580      	push	{r7, lr}
 8001742:	b084      	sub	sp, #16
 8001744:	af00      	add	r7, sp, #0
 8001746:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8001748:	2300      	movs	r3, #0
 800174a:	73fb      	strb	r3, [r7, #15]

  hi2c->Instance = I2C1;
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	4a14      	ldr	r2, [pc, #80]	; (80017a0 <MX_I2C1_Init+0x60>)
 8001750:	601a      	str	r2, [r3, #0]
  hi2c->Init.ClockSpeed = 100000;
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	4a13      	ldr	r2, [pc, #76]	; (80017a4 <MX_I2C1_Init+0x64>)
 8001756:	605a      	str	r2, [r3, #4]
  hi2c->Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	2200      	movs	r2, #0
 800175c:	609a      	str	r2, [r3, #8]
  hi2c->Init.OwnAddress1 = 0;
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	2200      	movs	r2, #0
 8001762:	60da      	str	r2, [r3, #12]
  hi2c->Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800176a:	611a      	str	r2, [r3, #16]
  hi2c->Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	2200      	movs	r2, #0
 8001770:	615a      	str	r2, [r3, #20]
  hi2c->Init.OwnAddress2 = 0;
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	2200      	movs	r2, #0
 8001776:	619a      	str	r2, [r3, #24]
  hi2c->Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	2200      	movs	r2, #0
 800177c:	61da      	str	r2, [r3, #28]
  hi2c->Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	2200      	movs	r2, #0
 8001782:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(hi2c) != HAL_OK)
 8001784:	6878      	ldr	r0, [r7, #4]
 8001786:	f005 fc1b 	bl	8006fc0 <HAL_I2C_Init>
 800178a:	4603      	mov	r3, r0
 800178c:	2b00      	cmp	r3, #0
 800178e:	d001      	beq.n	8001794 <MX_I2C1_Init+0x54>
  {
    ret = HAL_ERROR;
 8001790:	2301      	movs	r3, #1
 8001792:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8001794:	7bfb      	ldrb	r3, [r7, #15]
}
 8001796:	4618      	mov	r0, r3
 8001798:	3710      	adds	r7, #16
 800179a:	46bd      	mov	sp, r7
 800179c:	bd80      	pop	{r7, pc}
 800179e:	bf00      	nop
 80017a0:	40005400 	.word	0x40005400
 80017a4:	000186a0 	.word	0x000186a0

080017a8 <I2C1_MspInit>:

static void I2C1_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80017a8:	b580      	push	{r7, lr}
 80017aa:	b08a      	sub	sp, #40	; 0x28
 80017ac:	af00      	add	r7, sp, #0
 80017ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80017b0:	2300      	movs	r3, #0
 80017b2:	613b      	str	r3, [r7, #16]
 80017b4:	4b1f      	ldr	r3, [pc, #124]	; (8001834 <I2C1_MspInit+0x8c>)
 80017b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017b8:	4a1e      	ldr	r2, [pc, #120]	; (8001834 <I2C1_MspInit+0x8c>)
 80017ba:	f043 0302 	orr.w	r3, r3, #2
 80017be:	6313      	str	r3, [r2, #48]	; 0x30
 80017c0:	4b1c      	ldr	r3, [pc, #112]	; (8001834 <I2C1_MspInit+0x8c>)
 80017c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017c4:	f003 0302 	and.w	r3, r3, #2
 80017c8:	613b      	str	r3, [r7, #16]
 80017ca:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = BUS_I2C1_SCL_GPIO_PIN;
 80017cc:	f44f 7380 	mov.w	r3, #256	; 0x100
 80017d0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80017d2:	2312      	movs	r3, #18
 80017d4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017d6:	2300      	movs	r3, #0
 80017d8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017da:	2303      	movs	r3, #3
 80017dc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_I2C1_SCL_GPIO_AF;
 80017de:	2304      	movs	r3, #4
 80017e0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(BUS_I2C1_SCL_GPIO_PORT, &GPIO_InitStruct);
 80017e2:	f107 0314 	add.w	r3, r7, #20
 80017e6:	4619      	mov	r1, r3
 80017e8:	4813      	ldr	r0, [pc, #76]	; (8001838 <I2C1_MspInit+0x90>)
 80017ea:	f005 f967 	bl	8006abc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BUS_I2C1_SDA_GPIO_PIN;
 80017ee:	f44f 7300 	mov.w	r3, #512	; 0x200
 80017f2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80017f4:	2312      	movs	r3, #18
 80017f6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017f8:	2300      	movs	r3, #0
 80017fa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017fc:	2303      	movs	r3, #3
 80017fe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_I2C1_SDA_GPIO_AF;
 8001800:	2304      	movs	r3, #4
 8001802:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(BUS_I2C1_SDA_GPIO_PORT, &GPIO_InitStruct);
 8001804:	f107 0314 	add.w	r3, r7, #20
 8001808:	4619      	mov	r1, r3
 800180a:	480b      	ldr	r0, [pc, #44]	; (8001838 <I2C1_MspInit+0x90>)
 800180c:	f005 f956 	bl	8006abc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001810:	2300      	movs	r3, #0
 8001812:	60fb      	str	r3, [r7, #12]
 8001814:	4b07      	ldr	r3, [pc, #28]	; (8001834 <I2C1_MspInit+0x8c>)
 8001816:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001818:	4a06      	ldr	r2, [pc, #24]	; (8001834 <I2C1_MspInit+0x8c>)
 800181a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800181e:	6413      	str	r3, [r2, #64]	; 0x40
 8001820:	4b04      	ldr	r3, [pc, #16]	; (8001834 <I2C1_MspInit+0x8c>)
 8001822:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001824:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001828:	60fb      	str	r3, [r7, #12]
 800182a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
}
 800182c:	bf00      	nop
 800182e:	3728      	adds	r7, #40	; 0x28
 8001830:	46bd      	mov	sp, r7
 8001832:	bd80      	pop	{r7, pc}
 8001834:	40023800 	.word	0x40023800
 8001838:	40020400 	.word	0x40020400

0800183c <I2C1_MspDeInit>:

static void I2C1_MspDeInit(I2C_HandleTypeDef* i2cHandle)
{
 800183c:	b580      	push	{r7, lr}
 800183e:	b082      	sub	sp, #8
 8001840:	af00      	add	r7, sp, #0
 8001842:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 8001844:	4b09      	ldr	r3, [pc, #36]	; (800186c <I2C1_MspDeInit+0x30>)
 8001846:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001848:	4a08      	ldr	r2, [pc, #32]	; (800186c <I2C1_MspDeInit+0x30>)
 800184a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800184e:	6413      	str	r3, [r2, #64]	; 0x40

    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(BUS_I2C1_SCL_GPIO_PORT, BUS_I2C1_SCL_GPIO_PIN);
 8001850:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001854:	4806      	ldr	r0, [pc, #24]	; (8001870 <I2C1_MspDeInit+0x34>)
 8001856:	f005 fab5 	bl	8006dc4 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(BUS_I2C1_SDA_GPIO_PORT, BUS_I2C1_SDA_GPIO_PIN);
 800185a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800185e:	4804      	ldr	r0, [pc, #16]	; (8001870 <I2C1_MspDeInit+0x34>)
 8001860:	f005 fab0 	bl	8006dc4 <HAL_GPIO_DeInit>

  /* USER CODE BEGIN I2C1_MspDeInit 1 */

  /* USER CODE END I2C1_MspDeInit 1 */
}
 8001864:	bf00      	nop
 8001866:	3708      	adds	r7, #8
 8001868:	46bd      	mov	sp, r7
 800186a:	bd80      	pop	{r7, pc}
 800186c:	40023800 	.word	0x40023800
 8001870:	40020400 	.word	0x40020400

08001874 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001874:	b580      	push	{r7, lr}
 8001876:	b086      	sub	sp, #24
 8001878:	af00      	add	r7, sp, #0
 800187a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800187c:	4a14      	ldr	r2, [pc, #80]	; (80018d0 <_sbrk+0x5c>)
 800187e:	4b15      	ldr	r3, [pc, #84]	; (80018d4 <_sbrk+0x60>)
 8001880:	1ad3      	subs	r3, r2, r3
 8001882:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001884:	697b      	ldr	r3, [r7, #20]
 8001886:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001888:	4b13      	ldr	r3, [pc, #76]	; (80018d8 <_sbrk+0x64>)
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	2b00      	cmp	r3, #0
 800188e:	d102      	bne.n	8001896 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001890:	4b11      	ldr	r3, [pc, #68]	; (80018d8 <_sbrk+0x64>)
 8001892:	4a12      	ldr	r2, [pc, #72]	; (80018dc <_sbrk+0x68>)
 8001894:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001896:	4b10      	ldr	r3, [pc, #64]	; (80018d8 <_sbrk+0x64>)
 8001898:	681a      	ldr	r2, [r3, #0]
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	4413      	add	r3, r2
 800189e:	693a      	ldr	r2, [r7, #16]
 80018a0:	429a      	cmp	r2, r3
 80018a2:	d207      	bcs.n	80018b4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80018a4:	f00a fff0 	bl	800c888 <__errno>
 80018a8:	4603      	mov	r3, r0
 80018aa:	220c      	movs	r2, #12
 80018ac:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80018ae:	f04f 33ff 	mov.w	r3, #4294967295
 80018b2:	e009      	b.n	80018c8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80018b4:	4b08      	ldr	r3, [pc, #32]	; (80018d8 <_sbrk+0x64>)
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80018ba:	4b07      	ldr	r3, [pc, #28]	; (80018d8 <_sbrk+0x64>)
 80018bc:	681a      	ldr	r2, [r3, #0]
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	4413      	add	r3, r2
 80018c2:	4a05      	ldr	r2, [pc, #20]	; (80018d8 <_sbrk+0x64>)
 80018c4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80018c6:	68fb      	ldr	r3, [r7, #12]
}
 80018c8:	4618      	mov	r0, r3
 80018ca:	3718      	adds	r7, #24
 80018cc:	46bd      	mov	sp, r7
 80018ce:	bd80      	pop	{r7, pc}
 80018d0:	20018000 	.word	0x20018000
 80018d4:	00000400 	.word	0x00000400
 80018d8:	200024f0 	.word	0x200024f0
 80018dc:	20002838 	.word	0x20002838

080018e0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80018e0:	b480      	push	{r7}
 80018e2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80018e4:	4b06      	ldr	r3, [pc, #24]	; (8001900 <SystemInit+0x20>)
 80018e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80018ea:	4a05      	ldr	r2, [pc, #20]	; (8001900 <SystemInit+0x20>)
 80018ec:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80018f0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80018f4:	bf00      	nop
 80018f6:	46bd      	mov	sp, r7
 80018f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018fc:	4770      	bx	lr
 80018fe:	bf00      	nop
 8001900:	e000ed00 	.word	0xe000ed00

08001904 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001904:	f8df d034 	ldr.w	sp, [pc, #52]	; 800193c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001908:	480d      	ldr	r0, [pc, #52]	; (8001940 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800190a:	490e      	ldr	r1, [pc, #56]	; (8001944 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800190c:	4a0e      	ldr	r2, [pc, #56]	; (8001948 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800190e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001910:	e002      	b.n	8001918 <LoopCopyDataInit>

08001912 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001912:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001914:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001916:	3304      	adds	r3, #4

08001918 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001918:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800191a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800191c:	d3f9      	bcc.n	8001912 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800191e:	4a0b      	ldr	r2, [pc, #44]	; (800194c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001920:	4c0b      	ldr	r4, [pc, #44]	; (8001950 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001922:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001924:	e001      	b.n	800192a <LoopFillZerobss>

08001926 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001926:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001928:	3204      	adds	r2, #4

0800192a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800192a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800192c:	d3fb      	bcc.n	8001926 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800192e:	f7ff ffd7 	bl	80018e0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001932:	f00a ffaf 	bl	800c894 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001936:	f7ff fb2f 	bl	8000f98 <main>
  bx  lr    
 800193a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 800193c:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001940:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001944:	2000015c 	.word	0x2000015c
  ldr r2, =_sidata
 8001948:	0800d770 	.word	0x0800d770
  ldr r2, =_sbss
 800194c:	2000015c 	.word	0x2000015c
  ldr r4, =_ebss
 8001950:	20002834 	.word	0x20002834

08001954 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001954:	e7fe      	b.n	8001954 <ADC_IRQHandler>
	...

08001958 <LIS2DW12_RegisterBusIO>:
  * @brief  Register Component Bus IO operations
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DW12_RegisterBusIO(LIS2DW12_Object_t *pObj, LIS2DW12_IO_t *pIO)
{
 8001958:	b580      	push	{r7, lr}
 800195a:	b084      	sub	sp, #16
 800195c:	af00      	add	r7, sp, #0
 800195e:	6078      	str	r0, [r7, #4]
 8001960:	6039      	str	r1, [r7, #0]
  int32_t ret = LIS2DW12_OK;
 8001962:	2300      	movs	r3, #0
 8001964:	60fb      	str	r3, [r7, #12]

  if (pObj == NULL)
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	2b00      	cmp	r3, #0
 800196a:	d103      	bne.n	8001974 <LIS2DW12_RegisterBusIO+0x1c>
  {
    ret = LIS2DW12_ERROR;
 800196c:	f04f 33ff 	mov.w	r3, #4294967295
 8001970:	60fb      	str	r3, [r7, #12]
 8001972:	e051      	b.n	8001a18 <LIS2DW12_RegisterBusIO+0xc0>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 8001974:	683b      	ldr	r3, [r7, #0]
 8001976:	681a      	ldr	r2, [r3, #0]
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 800197c:	683b      	ldr	r3, [r7, #0]
 800197e:	685a      	ldr	r2, [r3, #4]
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	605a      	str	r2, [r3, #4]
    pObj->IO.BusType   = pIO->BusType;
 8001984:	683b      	ldr	r3, [r7, #0]
 8001986:	689a      	ldr	r2, [r3, #8]
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	609a      	str	r2, [r3, #8]
    pObj->IO.Address   = pIO->Address;
 800198c:	683b      	ldr	r3, [r7, #0]
 800198e:	7b1a      	ldrb	r2, [r3, #12]
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	731a      	strb	r2, [r3, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 8001994:	683b      	ldr	r3, [r7, #0]
 8001996:	691a      	ldr	r2, [r3, #16]
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	611a      	str	r2, [r3, #16]
    pObj->IO.ReadReg   = pIO->ReadReg;
 800199c:	683b      	ldr	r3, [r7, #0]
 800199e:	695a      	ldr	r2, [r3, #20]
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	615a      	str	r2, [r3, #20]
    pObj->IO.GetTick   = pIO->GetTick;
 80019a4:	683b      	ldr	r3, [r7, #0]
 80019a6:	699a      	ldr	r2, [r3, #24]
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	619a      	str	r2, [r3, #24]

    pObj->Ctx.read_reg  = ReadRegWrap;
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	4a1d      	ldr	r2, [pc, #116]	; (8001a24 <LIS2DW12_RegisterBusIO+0xcc>)
 80019b0:	625a      	str	r2, [r3, #36]	; 0x24
    pObj->Ctx.write_reg = WriteRegWrap;
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	4a1c      	ldr	r2, [pc, #112]	; (8001a28 <LIS2DW12_RegisterBusIO+0xd0>)
 80019b6:	621a      	str	r2, [r3, #32]
    pObj->Ctx.mdelay    = pIO->Delay;
 80019b8:	683b      	ldr	r3, [r7, #0]
 80019ba:	69da      	ldr	r2, [r3, #28]
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	629a      	str	r2, [r3, #40]	; 0x28
    pObj->Ctx.handle   = pObj;
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	687a      	ldr	r2, [r7, #4]
 80019c4:	62da      	str	r2, [r3, #44]	; 0x2c

    if (pObj->IO.Init == NULL)
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d103      	bne.n	80019d6 <LIS2DW12_RegisterBusIO+0x7e>
    {
      ret = LIS2DW12_ERROR;
 80019ce:	f04f 33ff 	mov.w	r3, #4294967295
 80019d2:	60fb      	str	r3, [r7, #12]
 80019d4:	e020      	b.n	8001a18 <LIS2DW12_RegisterBusIO+0xc0>
    }
    else if (pObj->IO.Init() != LIS2DW12_OK)
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	4798      	blx	r3
 80019dc:	4603      	mov	r3, r0
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d003      	beq.n	80019ea <LIS2DW12_RegisterBusIO+0x92>
    {
      ret = LIS2DW12_ERROR;
 80019e2:	f04f 33ff 	mov.w	r3, #4294967295
 80019e6:	60fb      	str	r3, [r7, #12]
 80019e8:	e016      	b.n	8001a18 <LIS2DW12_RegisterBusIO+0xc0>
    }
    else
    {
      if (pObj->IO.BusType == LIS2DW12_SPI_3WIRES_BUS) /* SPI 3-Wires */
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	689b      	ldr	r3, [r3, #8]
 80019ee:	2b02      	cmp	r3, #2
 80019f0:	d112      	bne.n	8001a18 <LIS2DW12_RegisterBusIO+0xc0>
      {
        /* Enable the SPI 3-Wires support only the first time */
        if (pObj->is_initialized == 0U)
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d10d      	bne.n	8001a18 <LIS2DW12_RegisterBusIO+0xc0>
        {
          /* Enable SPI 3-Wires on the component */
          uint8_t data = 0x05;
 80019fc:	2305      	movs	r3, #5
 80019fe:	72fb      	strb	r3, [r7, #11]

          if (LIS2DW12_Write_Reg(pObj, LIS2DW12_CTRL2, data) != LIS2DW12_OK)
 8001a00:	7afb      	ldrb	r3, [r7, #11]
 8001a02:	461a      	mov	r2, r3
 8001a04:	2121      	movs	r1, #33	; 0x21
 8001a06:	6878      	ldr	r0, [r7, #4]
 8001a08:	f000 fd87 	bl	800251a <LIS2DW12_Write_Reg>
 8001a0c:	4603      	mov	r3, r0
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d002      	beq.n	8001a18 <LIS2DW12_RegisterBusIO+0xc0>
          {
            ret = LIS2DW12_ERROR;
 8001a12:	f04f 33ff 	mov.w	r3, #4294967295
 8001a16:	60fb      	str	r3, [r7, #12]
        }
      }
    }
  }

  return ret;
 8001a18:	68fb      	ldr	r3, [r7, #12]
}
 8001a1a:	4618      	mov	r0, r3
 8001a1c:	3710      	adds	r7, #16
 8001a1e:	46bd      	mov	sp, r7
 8001a20:	bd80      	pop	{r7, pc}
 8001a22:	bf00      	nop
 8001a24:	080028ad 	.word	0x080028ad
 8001a28:	080028e3 	.word	0x080028e3

08001a2c <LIS2DW12_Init>:
  * @brief  Initialize the LIS2DW12 sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DW12_Init(LIS2DW12_Object_t *pObj)
{
 8001a2c:	b580      	push	{r7, lr}
 8001a2e:	b082      	sub	sp, #8
 8001a30:	af00      	add	r7, sp, #0
 8001a32:	6078      	str	r0, [r7, #4]
  /* Enable register address automatically incremented during a multiple byte
  access with a serial interface. */
  if (lis2dw12_auto_increment_set(&(pObj->Ctx), PROPERTY_ENABLE) != LIS2DW12_OK)
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	3320      	adds	r3, #32
 8001a38:	2101      	movs	r1, #1
 8001a3a:	4618      	mov	r0, r3
 8001a3c:	f001 fa94 	bl	8002f68 <lis2dw12_auto_increment_set>
 8001a40:	4603      	mov	r3, r0
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d002      	beq.n	8001a4c <LIS2DW12_Init+0x20>
  {
    return LIS2DW12_ERROR;
 8001a46:	f04f 33ff 	mov.w	r3, #4294967295
 8001a4a:	e04b      	b.n	8001ae4 <LIS2DW12_Init+0xb8>
  }

  /* Enable BDU */
  if (lis2dw12_block_data_update_set(&(pObj->Ctx), PROPERTY_ENABLE) != LIS2DW12_OK)
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	3320      	adds	r3, #32
 8001a50:	2101      	movs	r1, #1
 8001a52:	4618      	mov	r0, r3
 8001a54:	f001 f9a8 	bl	8002da8 <lis2dw12_block_data_update_set>
 8001a58:	4603      	mov	r3, r0
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d002      	beq.n	8001a64 <LIS2DW12_Init+0x38>
  {
    return LIS2DW12_ERROR;
 8001a5e:	f04f 33ff 	mov.w	r3, #4294967295
 8001a62:	e03f      	b.n	8001ae4 <LIS2DW12_Init+0xb8>
  }

  /* FIFO mode selection */
  if (lis2dw12_fifo_mode_set(&(pObj->Ctx), LIS2DW12_BYPASS_MODE) != LIS2DW12_OK)
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	3320      	adds	r3, #32
 8001a68:	2100      	movs	r1, #0
 8001a6a:	4618      	mov	r0, r3
 8001a6c:	f001 faa2 	bl	8002fb4 <lis2dw12_fifo_mode_set>
 8001a70:	4603      	mov	r3, r0
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d002      	beq.n	8001a7c <LIS2DW12_Init+0x50>
  {
    return LIS2DW12_ERROR;
 8001a76:	f04f 33ff 	mov.w	r3, #4294967295
 8001a7a:	e033      	b.n	8001ae4 <LIS2DW12_Init+0xb8>
  }

  /* Power mode selection */
  if (lis2dw12_power_mode_set(&(pObj->Ctx), LIS2DW12_HIGH_PERFORMANCE) != LIS2DW12_OK)
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	3320      	adds	r3, #32
 8001a80:	2104      	movs	r1, #4
 8001a82:	4618      	mov	r0, r3
 8001a84:	f000 ff78 	bl	8002978 <lis2dw12_power_mode_set>
 8001a88:	4603      	mov	r3, r0
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d002      	beq.n	8001a94 <LIS2DW12_Init+0x68>
  {
    return LIS2DW12_ERROR;
 8001a8e:	f04f 33ff 	mov.w	r3, #4294967295
 8001a92:	e027      	b.n	8001ae4 <LIS2DW12_Init+0xb8>
  }

  /* Select default output data rate. */
  pObj->acc_odr = 100.0f;
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	4a15      	ldr	r2, [pc, #84]	; (8001aec <LIS2DW12_Init+0xc0>)
 8001a98:	635a      	str	r2, [r3, #52]	; 0x34
  /* Select default operating mode. */
  pObj->acc_operating_mode = LIS2DW12_HIGH_PERFORMANCE_MODE;
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	2200      	movs	r2, #0
 8001a9e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  /* Select default low noise (disabled). */
  pObj->acc_low_noise = LIS2DW12_LOW_NOISE_DISABLE;
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	2200      	movs	r2, #0
 8001aa6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Output data rate selection - power down. */
  if (lis2dw12_data_rate_set(&(pObj->Ctx), LIS2DW12_XL_ODR_OFF) != LIS2DW12_OK)
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	3320      	adds	r3, #32
 8001aae:	2100      	movs	r1, #0
 8001ab0:	4618      	mov	r0, r3
 8001ab2:	f001 f869 	bl	8002b88 <lis2dw12_data_rate_set>
 8001ab6:	4603      	mov	r3, r0
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d002      	beq.n	8001ac2 <LIS2DW12_Init+0x96>
  {
    return LIS2DW12_ERROR;
 8001abc:	f04f 33ff 	mov.w	r3, #4294967295
 8001ac0:	e010      	b.n	8001ae4 <LIS2DW12_Init+0xb8>
  }

  /* Full scale selection. */
  if (lis2dw12_full_scale_set(&(pObj->Ctx), LIS2DW12_2g) != LIS2DW12_OK)
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	3320      	adds	r3, #32
 8001ac6:	2100      	movs	r1, #0
 8001ac8:	4618      	mov	r0, r3
 8001aca:	f001 f993 	bl	8002df4 <lis2dw12_full_scale_set>
 8001ace:	4603      	mov	r3, r0
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d002      	beq.n	8001ada <LIS2DW12_Init+0xae>
  {
    return LIS2DW12_ERROR;
 8001ad4:	f04f 33ff 	mov.w	r3, #4294967295
 8001ad8:	e004      	b.n	8001ae4 <LIS2DW12_Init+0xb8>
  }

  pObj->is_initialized = 1;
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	2201      	movs	r2, #1
 8001ade:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return LIS2DW12_OK;
 8001ae2:	2300      	movs	r3, #0
}
 8001ae4:	4618      	mov	r0, r3
 8001ae6:	3708      	adds	r7, #8
 8001ae8:	46bd      	mov	sp, r7
 8001aea:	bd80      	pop	{r7, pc}
 8001aec:	42c80000 	.word	0x42c80000

08001af0 <LIS2DW12_DeInit>:
  * @brief  Deinitialize the LIS2DW12 sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DW12_DeInit(LIS2DW12_Object_t *pObj)
{
 8001af0:	b580      	push	{r7, lr}
 8001af2:	b082      	sub	sp, #8
 8001af4:	af00      	add	r7, sp, #0
 8001af6:	6078      	str	r0, [r7, #4]
  /* Disable the component */
  if (LIS2DW12_ACC_Disable(pObj) != LIS2DW12_OK)
 8001af8:	6878      	ldr	r0, [r7, #4]
 8001afa:	f000 f888 	bl	8001c0e <LIS2DW12_ACC_Disable>
 8001afe:	4603      	mov	r3, r0
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d002      	beq.n	8001b0a <LIS2DW12_DeInit+0x1a>
  {
    return LIS2DW12_ERROR;
 8001b04:	f04f 33ff 	mov.w	r3, #4294967295
 8001b08:	e010      	b.n	8001b2c <LIS2DW12_DeInit+0x3c>
  }

  /* Reset output data rate. */
  pObj->acc_odr = 0.0f;
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	f04f 0200 	mov.w	r2, #0
 8001b10:	635a      	str	r2, [r3, #52]	; 0x34
  /* Reset operating mode to default value. */
  pObj->acc_operating_mode = LIS2DW12_HIGH_PERFORMANCE_MODE;
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	2200      	movs	r2, #0
 8001b16:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  /* Reset low noise to default value (disabled). */
  pObj->acc_low_noise = LIS2DW12_LOW_NOISE_DISABLE;
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	2200      	movs	r2, #0
 8001b1e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  pObj->is_initialized = 0;
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	2200      	movs	r2, #0
 8001b26:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return LIS2DW12_OK;
 8001b2a:	2300      	movs	r3, #0
}
 8001b2c:	4618      	mov	r0, r3
 8001b2e:	3708      	adds	r7, #8
 8001b30:	46bd      	mov	sp, r7
 8001b32:	bd80      	pop	{r7, pc}

08001b34 <LIS2DW12_ReadID>:
  * @param  pObj the device pObj
  * @param  Id the WHO_AM_I value
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DW12_ReadID(LIS2DW12_Object_t *pObj, uint8_t *Id)
{
 8001b34:	b580      	push	{r7, lr}
 8001b36:	b082      	sub	sp, #8
 8001b38:	af00      	add	r7, sp, #0
 8001b3a:	6078      	str	r0, [r7, #4]
 8001b3c:	6039      	str	r1, [r7, #0]
  if (lis2dw12_device_id_get(&(pObj->Ctx), Id) != LIS2DW12_OK)
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	3320      	adds	r3, #32
 8001b42:	6839      	ldr	r1, [r7, #0]
 8001b44:	4618      	mov	r0, r3
 8001b46:	f001 f9fe 	bl	8002f46 <lis2dw12_device_id_get>
 8001b4a:	4603      	mov	r3, r0
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d002      	beq.n	8001b56 <LIS2DW12_ReadID+0x22>
  {
    return LIS2DW12_ERROR;
 8001b50:	f04f 33ff 	mov.w	r3, #4294967295
 8001b54:	e000      	b.n	8001b58 <LIS2DW12_ReadID+0x24>
  }

  return LIS2DW12_OK;
 8001b56:	2300      	movs	r3, #0
}
 8001b58:	4618      	mov	r0, r3
 8001b5a:	3708      	adds	r7, #8
 8001b5c:	46bd      	mov	sp, r7
 8001b5e:	bd80      	pop	{r7, pc}

08001b60 <LIS2DW12_GetCapabilities>:
  * @param  pObj Component object pointer
  * @param  Capabilities pointer to LIS2DW12 sensor capabilities
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DW12_GetCapabilities(LIS2DW12_Object_t *pObj, LIS2DW12_Capabilities_t *Capabilities)
{
 8001b60:	b480      	push	{r7}
 8001b62:	b083      	sub	sp, #12
 8001b64:	af00      	add	r7, sp, #0
 8001b66:	6078      	str	r0, [r7, #4]
 8001b68:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  Capabilities->Acc          = 1;
 8001b6a:	683b      	ldr	r3, [r7, #0]
 8001b6c:	2201      	movs	r2, #1
 8001b6e:	701a      	strb	r2, [r3, #0]
  Capabilities->Gyro         = 0;
 8001b70:	683b      	ldr	r3, [r7, #0]
 8001b72:	2200      	movs	r2, #0
 8001b74:	705a      	strb	r2, [r3, #1]
  Capabilities->Magneto      = 0;
 8001b76:	683b      	ldr	r3, [r7, #0]
 8001b78:	2200      	movs	r2, #0
 8001b7a:	709a      	strb	r2, [r3, #2]
  Capabilities->LowPower     = 0;
 8001b7c:	683b      	ldr	r3, [r7, #0]
 8001b7e:	2200      	movs	r2, #0
 8001b80:	70da      	strb	r2, [r3, #3]
  Capabilities->GyroMaxFS    = 0;
 8001b82:	683b      	ldr	r3, [r7, #0]
 8001b84:	2200      	movs	r2, #0
 8001b86:	605a      	str	r2, [r3, #4]
  Capabilities->AccMaxFS     = 16;
 8001b88:	683b      	ldr	r3, [r7, #0]
 8001b8a:	2210      	movs	r2, #16
 8001b8c:	609a      	str	r2, [r3, #8]
  Capabilities->MagMaxFS     = 0;
 8001b8e:	683b      	ldr	r3, [r7, #0]
 8001b90:	2200      	movs	r2, #0
 8001b92:	60da      	str	r2, [r3, #12]
  Capabilities->GyroMaxOdr   = 0.0f;
 8001b94:	683b      	ldr	r3, [r7, #0]
 8001b96:	f04f 0200 	mov.w	r2, #0
 8001b9a:	611a      	str	r2, [r3, #16]
  Capabilities->AccMaxOdr    = 1600.0f;
 8001b9c:	683b      	ldr	r3, [r7, #0]
 8001b9e:	4a06      	ldr	r2, [pc, #24]	; (8001bb8 <LIS2DW12_GetCapabilities+0x58>)
 8001ba0:	615a      	str	r2, [r3, #20]
  Capabilities->MagMaxOdr    = 0.0f;
 8001ba2:	683b      	ldr	r3, [r7, #0]
 8001ba4:	f04f 0200 	mov.w	r2, #0
 8001ba8:	619a      	str	r2, [r3, #24]
  return LIS2DW12_OK;
 8001baa:	2300      	movs	r3, #0
}
 8001bac:	4618      	mov	r0, r3
 8001bae:	370c      	adds	r7, #12
 8001bb0:	46bd      	mov	sp, r7
 8001bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb6:	4770      	bx	lr
 8001bb8:	44c80000 	.word	0x44c80000

08001bbc <LIS2DW12_ACC_Enable>:
  * @brief  Enable the LIS2DW12 accelerometer sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DW12_ACC_Enable(LIS2DW12_Object_t *pObj)
{
 8001bbc:	b580      	push	{r7, lr}
 8001bbe:	b082      	sub	sp, #8
 8001bc0:	af00      	add	r7, sp, #0
 8001bc2:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->acc_is_enabled == 1U)
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8001bca:	2b01      	cmp	r3, #1
 8001bcc:	d101      	bne.n	8001bd2 <LIS2DW12_ACC_Enable+0x16>
  {
    return LIS2DW12_OK;
 8001bce:	2300      	movs	r3, #0
 8001bd0:	e019      	b.n	8001c06 <LIS2DW12_ACC_Enable+0x4a>
  }

  /* Output data rate selection. */
  if (LIS2DW12_ACC_SetOutputDataRate_When_Enabled(pObj, pObj->acc_odr, pObj->acc_operating_mode,
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	f893 1038 	ldrb.w	r1, [r3, #56]	; 0x38
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001be4:	461a      	mov	r2, r3
 8001be6:	eeb0 0a67 	vmov.f32	s0, s15
 8001bea:	6878      	ldr	r0, [r7, #4]
 8001bec:	f000 fcb0 	bl	8002550 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled>
 8001bf0:	4603      	mov	r3, r0
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d002      	beq.n	8001bfc <LIS2DW12_ACC_Enable+0x40>
                                                  pObj->acc_low_noise) != LIS2DW12_OK)
  {
    return LIS2DW12_ERROR;
 8001bf6:	f04f 33ff 	mov.w	r3, #4294967295
 8001bfa:	e004      	b.n	8001c06 <LIS2DW12_ACC_Enable+0x4a>
  }

  pObj->acc_is_enabled = 1;
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	2201      	movs	r2, #1
 8001c00:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

  return LIS2DW12_OK;
 8001c04:	2300      	movs	r3, #0
}
 8001c06:	4618      	mov	r0, r3
 8001c08:	3708      	adds	r7, #8
 8001c0a:	46bd      	mov	sp, r7
 8001c0c:	bd80      	pop	{r7, pc}

08001c0e <LIS2DW12_ACC_Disable>:
  * @brief  Disable the LIS2DW12 accelerometer sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DW12_ACC_Disable(LIS2DW12_Object_t *pObj)
{
 8001c0e:	b580      	push	{r7, lr}
 8001c10:	b082      	sub	sp, #8
 8001c12:	af00      	add	r7, sp, #0
 8001c14:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->acc_is_enabled == 0U)
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d101      	bne.n	8001c24 <LIS2DW12_ACC_Disable+0x16>
  {
    return LIS2DW12_OK;
 8001c20:	2300      	movs	r3, #0
 8001c22:	e010      	b.n	8001c46 <LIS2DW12_ACC_Disable+0x38>
  }

  /* Output data rate selection - power down. */
  if (lis2dw12_data_rate_set(&(pObj->Ctx), LIS2DW12_XL_ODR_OFF) != LIS2DW12_OK)
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	3320      	adds	r3, #32
 8001c28:	2100      	movs	r1, #0
 8001c2a:	4618      	mov	r0, r3
 8001c2c:	f000 ffac 	bl	8002b88 <lis2dw12_data_rate_set>
 8001c30:	4603      	mov	r3, r0
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d002      	beq.n	8001c3c <LIS2DW12_ACC_Disable+0x2e>
  {
    return LIS2DW12_ERROR;
 8001c36:	f04f 33ff 	mov.w	r3, #4294967295
 8001c3a:	e004      	b.n	8001c46 <LIS2DW12_ACC_Disable+0x38>
  }

  pObj->acc_is_enabled = 0;
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	2200      	movs	r2, #0
 8001c40:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

  return LIS2DW12_OK;
 8001c44:	2300      	movs	r3, #0
}
 8001c46:	4618      	mov	r0, r3
 8001c48:	3708      	adds	r7, #8
 8001c4a:	46bd      	mov	sp, r7
 8001c4c:	bd80      	pop	{r7, pc}
	...

08001c50 <LIS2DW12_ACC_GetSensitivity>:
  * @param  pObj the device pObj
  * @param  Sensitivity pointer
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DW12_ACC_GetSensitivity(LIS2DW12_Object_t *pObj, float *Sensitivity)
{
 8001c50:	b580      	push	{r7, lr}
 8001c52:	b084      	sub	sp, #16
 8001c54:	af00      	add	r7, sp, #0
 8001c56:	6078      	str	r0, [r7, #4]
 8001c58:	6039      	str	r1, [r7, #0]
  int32_t ret = LIS2DW12_OK;
 8001c5a:	2300      	movs	r3, #0
 8001c5c:	60fb      	str	r3, [r7, #12]
  lis2dw12_fs_t full_scale;
  lis2dw12_mode_t mode;

  /* Read actual full scale selection from sensor. */
  if (lis2dw12_full_scale_get(&(pObj->Ctx), &full_scale) != LIS2DW12_OK)
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	3320      	adds	r3, #32
 8001c62:	f107 020b 	add.w	r2, r7, #11
 8001c66:	4611      	mov	r1, r2
 8001c68:	4618      	mov	r0, r3
 8001c6a:	f001 f8e9 	bl	8002e40 <lis2dw12_full_scale_get>
 8001c6e:	4603      	mov	r3, r0
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d002      	beq.n	8001c7a <LIS2DW12_ACC_GetSensitivity+0x2a>
  {
    return LIS2DW12_ERROR;
 8001c74:	f04f 33ff 	mov.w	r3, #4294967295
 8001c78:	e0a0      	b.n	8001dbc <LIS2DW12_ACC_GetSensitivity+0x16c>
  }

  /* Read actual power mode selection from sensor. */
  if (lis2dw12_power_mode_get(&(pObj->Ctx), &mode) != LIS2DW12_OK)
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	3320      	adds	r3, #32
 8001c7e:	f107 020a 	add.w	r2, r7, #10
 8001c82:	4611      	mov	r1, r2
 8001c84:	4618      	mov	r0, r3
 8001c86:	f000 fec5 	bl	8002a14 <lis2dw12_power_mode_get>
 8001c8a:	4603      	mov	r3, r0
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d002      	beq.n	8001c96 <LIS2DW12_ACC_GetSensitivity+0x46>
  {
    return LIS2DW12_ERROR;
 8001c90:	f04f 33ff 	mov.w	r3, #4294967295
 8001c94:	e092      	b.n	8001dbc <LIS2DW12_ACC_GetSensitivity+0x16c>
  }

  switch (mode)
 8001c96:	7abb      	ldrb	r3, [r7, #10]
 8001c98:	2b1b      	cmp	r3, #27
 8001c9a:	f200 8087 	bhi.w	8001dac <LIS2DW12_ACC_GetSensitivity+0x15c>
 8001c9e:	a201      	add	r2, pc, #4	; (adr r2, 8001ca4 <LIS2DW12_ACC_GetSensitivity+0x54>)
 8001ca0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ca4:	08001d15 	.word	0x08001d15
 8001ca8:	08001d61 	.word	0x08001d61
 8001cac:	08001d61 	.word	0x08001d61
 8001cb0:	08001d61 	.word	0x08001d61
 8001cb4:	08001d61 	.word	0x08001d61
 8001cb8:	08001dad 	.word	0x08001dad
 8001cbc:	08001dad 	.word	0x08001dad
 8001cc0:	08001dad 	.word	0x08001dad
 8001cc4:	08001d15 	.word	0x08001d15
 8001cc8:	08001d61 	.word	0x08001d61
 8001ccc:	08001d61 	.word	0x08001d61
 8001cd0:	08001d61 	.word	0x08001d61
 8001cd4:	08001dad 	.word	0x08001dad
 8001cd8:	08001dad 	.word	0x08001dad
 8001cdc:	08001dad 	.word	0x08001dad
 8001ce0:	08001dad 	.word	0x08001dad
 8001ce4:	08001d15 	.word	0x08001d15
 8001ce8:	08001d61 	.word	0x08001d61
 8001cec:	08001d61 	.word	0x08001d61
 8001cf0:	08001d61 	.word	0x08001d61
 8001cf4:	08001d61 	.word	0x08001d61
 8001cf8:	08001dad 	.word	0x08001dad
 8001cfc:	08001dad 	.word	0x08001dad
 8001d00:	08001dad 	.word	0x08001dad
 8001d04:	08001d15 	.word	0x08001d15
 8001d08:	08001d61 	.word	0x08001d61
 8001d0c:	08001d61 	.word	0x08001d61
 8001d10:	08001d61 	.word	0x08001d61
  {
    case LIS2DW12_CONT_LOW_PWR_12bit:
    case LIS2DW12_SINGLE_LOW_PWR_12bit:
    case LIS2DW12_CONT_LOW_PWR_LOW_NOISE_12bit:
    case LIS2DW12_SINGLE_LOW_LOW_NOISE_PWR_12bit:
      switch (full_scale)
 8001d14:	7afb      	ldrb	r3, [r7, #11]
 8001d16:	2b03      	cmp	r3, #3
 8001d18:	d81a      	bhi.n	8001d50 <LIS2DW12_ACC_GetSensitivity+0x100>
 8001d1a:	a201      	add	r2, pc, #4	; (adr r2, 8001d20 <LIS2DW12_ACC_GetSensitivity+0xd0>)
 8001d1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d20:	08001d31 	.word	0x08001d31
 8001d24:	08001d39 	.word	0x08001d39
 8001d28:	08001d41 	.word	0x08001d41
 8001d2c:	08001d49 	.word	0x08001d49
      {
        case LIS2DW12_2g:
          *Sensitivity = LIS2DW12_ACC_SENSITIVITY_FOR_FS_2G_LOPOW1_MODE;
 8001d30:	683b      	ldr	r3, [r7, #0]
 8001d32:	4a24      	ldr	r2, [pc, #144]	; (8001dc4 <LIS2DW12_ACC_GetSensitivity+0x174>)
 8001d34:	601a      	str	r2, [r3, #0]
          break;
 8001d36:	e012      	b.n	8001d5e <LIS2DW12_ACC_GetSensitivity+0x10e>

        case LIS2DW12_4g:
          *Sensitivity = LIS2DW12_ACC_SENSITIVITY_FOR_FS_4G_LOPOW1_MODE;
 8001d38:	683b      	ldr	r3, [r7, #0]
 8001d3a:	4a23      	ldr	r2, [pc, #140]	; (8001dc8 <LIS2DW12_ACC_GetSensitivity+0x178>)
 8001d3c:	601a      	str	r2, [r3, #0]
          break;
 8001d3e:	e00e      	b.n	8001d5e <LIS2DW12_ACC_GetSensitivity+0x10e>

        case LIS2DW12_8g:
          *Sensitivity = LIS2DW12_ACC_SENSITIVITY_FOR_FS_8G_LOPOW1_MODE;
 8001d40:	683b      	ldr	r3, [r7, #0]
 8001d42:	4a22      	ldr	r2, [pc, #136]	; (8001dcc <LIS2DW12_ACC_GetSensitivity+0x17c>)
 8001d44:	601a      	str	r2, [r3, #0]
          break;
 8001d46:	e00a      	b.n	8001d5e <LIS2DW12_ACC_GetSensitivity+0x10e>

        case LIS2DW12_16g:
          *Sensitivity = LIS2DW12_ACC_SENSITIVITY_FOR_FS_16G_LOPOW1_MODE;
 8001d48:	683b      	ldr	r3, [r7, #0]
 8001d4a:	4a21      	ldr	r2, [pc, #132]	; (8001dd0 <LIS2DW12_ACC_GetSensitivity+0x180>)
 8001d4c:	601a      	str	r2, [r3, #0]
          break;
 8001d4e:	e006      	b.n	8001d5e <LIS2DW12_ACC_GetSensitivity+0x10e>

        default:
          *Sensitivity = -1.0f;
 8001d50:	683b      	ldr	r3, [r7, #0]
 8001d52:	4a20      	ldr	r2, [pc, #128]	; (8001dd4 <LIS2DW12_ACC_GetSensitivity+0x184>)
 8001d54:	601a      	str	r2, [r3, #0]
          ret = LIS2DW12_ERROR;
 8001d56:	f04f 33ff 	mov.w	r3, #4294967295
 8001d5a:	60fb      	str	r3, [r7, #12]
          break;
 8001d5c:	bf00      	nop
      }
      break;
 8001d5e:	e02c      	b.n	8001dba <LIS2DW12_ACC_GetSensitivity+0x16a>
    case LIS2DW12_CONT_LOW_PWR_LOW_NOISE_3:
    case LIS2DW12_CONT_LOW_PWR_LOW_NOISE_2:
    case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_4:
    case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_3:
    case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_2:
      switch (full_scale)
 8001d60:	7afb      	ldrb	r3, [r7, #11]
 8001d62:	2b03      	cmp	r3, #3
 8001d64:	d81a      	bhi.n	8001d9c <LIS2DW12_ACC_GetSensitivity+0x14c>
 8001d66:	a201      	add	r2, pc, #4	; (adr r2, 8001d6c <LIS2DW12_ACC_GetSensitivity+0x11c>)
 8001d68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d6c:	08001d7d 	.word	0x08001d7d
 8001d70:	08001d85 	.word	0x08001d85
 8001d74:	08001d8d 	.word	0x08001d8d
 8001d78:	08001d95 	.word	0x08001d95
      {
        case LIS2DW12_2g:
          *Sensitivity = LIS2DW12_ACC_SENSITIVITY_FOR_FS_2G_OTHER_MODES;
 8001d7c:	683b      	ldr	r3, [r7, #0]
 8001d7e:	4a16      	ldr	r2, [pc, #88]	; (8001dd8 <LIS2DW12_ACC_GetSensitivity+0x188>)
 8001d80:	601a      	str	r2, [r3, #0]
          break;
 8001d82:	e012      	b.n	8001daa <LIS2DW12_ACC_GetSensitivity+0x15a>

        case LIS2DW12_4g:
          *Sensitivity = LIS2DW12_ACC_SENSITIVITY_FOR_FS_4G_OTHER_MODES;
 8001d84:	683b      	ldr	r3, [r7, #0]
 8001d86:	4a15      	ldr	r2, [pc, #84]	; (8001ddc <LIS2DW12_ACC_GetSensitivity+0x18c>)
 8001d88:	601a      	str	r2, [r3, #0]
          break;
 8001d8a:	e00e      	b.n	8001daa <LIS2DW12_ACC_GetSensitivity+0x15a>

        case LIS2DW12_8g:
          *Sensitivity = LIS2DW12_ACC_SENSITIVITY_FOR_FS_8G_OTHER_MODES;
 8001d8c:	683b      	ldr	r3, [r7, #0]
 8001d8e:	4a0d      	ldr	r2, [pc, #52]	; (8001dc4 <LIS2DW12_ACC_GetSensitivity+0x174>)
 8001d90:	601a      	str	r2, [r3, #0]
          break;
 8001d92:	e00a      	b.n	8001daa <LIS2DW12_ACC_GetSensitivity+0x15a>

        case LIS2DW12_16g:
          *Sensitivity = LIS2DW12_ACC_SENSITIVITY_FOR_FS_16G_OTHER_MODES;
 8001d94:	683b      	ldr	r3, [r7, #0]
 8001d96:	4a0c      	ldr	r2, [pc, #48]	; (8001dc8 <LIS2DW12_ACC_GetSensitivity+0x178>)
 8001d98:	601a      	str	r2, [r3, #0]
          break;
 8001d9a:	e006      	b.n	8001daa <LIS2DW12_ACC_GetSensitivity+0x15a>

        default:
          *Sensitivity = -1.0f;
 8001d9c:	683b      	ldr	r3, [r7, #0]
 8001d9e:	4a0d      	ldr	r2, [pc, #52]	; (8001dd4 <LIS2DW12_ACC_GetSensitivity+0x184>)
 8001da0:	601a      	str	r2, [r3, #0]
          ret = LIS2DW12_ERROR;
 8001da2:	f04f 33ff 	mov.w	r3, #4294967295
 8001da6:	60fb      	str	r3, [r7, #12]
          break;
 8001da8:	bf00      	nop
      }
      break;
 8001daa:	e006      	b.n	8001dba <LIS2DW12_ACC_GetSensitivity+0x16a>

    default:
      *Sensitivity = -1.0f;
 8001dac:	683b      	ldr	r3, [r7, #0]
 8001dae:	4a09      	ldr	r2, [pc, #36]	; (8001dd4 <LIS2DW12_ACC_GetSensitivity+0x184>)
 8001db0:	601a      	str	r2, [r3, #0]
      ret = LIS2DW12_ERROR;
 8001db2:	f04f 33ff 	mov.w	r3, #4294967295
 8001db6:	60fb      	str	r3, [r7, #12]
      break;
 8001db8:	bf00      	nop
  }

  return ret;
 8001dba:	68fb      	ldr	r3, [r7, #12]
}
 8001dbc:	4618      	mov	r0, r3
 8001dbe:	3710      	adds	r7, #16
 8001dc0:	46bd      	mov	sp, r7
 8001dc2:	bd80      	pop	{r7, pc}
 8001dc4:	3f79db23 	.word	0x3f79db23
 8001dc8:	3ff9db23 	.word	0x3ff9db23
 8001dcc:	4079db23 	.word	0x4079db23
 8001dd0:	40f9db23 	.word	0x40f9db23
 8001dd4:	bf800000 	.word	0xbf800000
 8001dd8:	3e79db23 	.word	0x3e79db23
 8001ddc:	3ef9db23 	.word	0x3ef9db23

08001de0 <LIS2DW12_ACC_GetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr pointer where the output data rate is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DW12_ACC_GetOutputDataRate(LIS2DW12_Object_t *pObj, float *Odr)
{
 8001de0:	b580      	push	{r7, lr}
 8001de2:	b084      	sub	sp, #16
 8001de4:	af00      	add	r7, sp, #0
 8001de6:	6078      	str	r0, [r7, #4]
 8001de8:	6039      	str	r1, [r7, #0]
  int32_t ret = LIS2DW12_OK;
 8001dea:	2300      	movs	r3, #0
 8001dec:	60fb      	str	r3, [r7, #12]
  lis2dw12_odr_t odr_low_level;
  lis2dw12_mode_t mode;

  /* Get current output data rate. */
  if (lis2dw12_data_rate_get(&(pObj->Ctx), &odr_low_level) != LIS2DW12_OK)
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	3320      	adds	r3, #32
 8001df2:	f107 020b 	add.w	r2, r7, #11
 8001df6:	4611      	mov	r1, r2
 8001df8:	4618      	mov	r0, r3
 8001dfa:	f000 ff0b 	bl	8002c14 <lis2dw12_data_rate_get>
 8001dfe:	4603      	mov	r3, r0
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d002      	beq.n	8001e0a <LIS2DW12_ACC_GetOutputDataRate+0x2a>
  {
    return LIS2DW12_ERROR;
 8001e04:	f04f 33ff 	mov.w	r3, #4294967295
 8001e08:	e1d4      	b.n	80021b4 <LIS2DW12_ACC_GetOutputDataRate+0x3d4>
  }

  /* Read actual power mode selection from sensor. */
  if (lis2dw12_power_mode_get(&(pObj->Ctx), &mode) != LIS2DW12_OK)
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	3320      	adds	r3, #32
 8001e0e:	f107 020a 	add.w	r2, r7, #10
 8001e12:	4611      	mov	r1, r2
 8001e14:	4618      	mov	r0, r3
 8001e16:	f000 fdfd 	bl	8002a14 <lis2dw12_power_mode_get>
 8001e1a:	4603      	mov	r3, r0
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d002      	beq.n	8001e26 <LIS2DW12_ACC_GetOutputDataRate+0x46>
  {
    return LIS2DW12_ERROR;
 8001e20:	f04f 33ff 	mov.w	r3, #4294967295
 8001e24:	e1c6      	b.n	80021b4 <LIS2DW12_ACC_GetOutputDataRate+0x3d4>
  }

  switch (odr_low_level)
 8001e26:	7afb      	ldrb	r3, [r7, #11]
 8001e28:	2b32      	cmp	r3, #50	; 0x32
 8001e2a:	f200 81bb 	bhi.w	80021a4 <LIS2DW12_ACC_GetOutputDataRate+0x3c4>
 8001e2e:	a201      	add	r2, pc, #4	; (adr r2, 8001e34 <LIS2DW12_ACC_GetOutputDataRate+0x54>)
 8001e30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e34:	08001f01 	.word	0x08001f01
 8001e38:	08001f0b 	.word	0x08001f0b
 8001e3c:	08001fa9 	.word	0x08001fa9
 8001e40:	08001fb1 	.word	0x08001fb1
 8001e44:	08001fb9 	.word	0x08001fb9
 8001e48:	08001fc1 	.word	0x08001fc1
 8001e4c:	08001fc9 	.word	0x08001fc9
 8001e50:	08001fd1 	.word	0x08001fd1
 8001e54:	0800206d 	.word	0x0800206d
 8001e58:	08002109 	.word	0x08002109
 8001e5c:	080021a5 	.word	0x080021a5
 8001e60:	080021a5 	.word	0x080021a5
 8001e64:	080021a5 	.word	0x080021a5
 8001e68:	080021a5 	.word	0x080021a5
 8001e6c:	080021a5 	.word	0x080021a5
 8001e70:	080021a5 	.word	0x080021a5
 8001e74:	080021a5 	.word	0x080021a5
 8001e78:	080021a5 	.word	0x080021a5
 8001e7c:	08001f01 	.word	0x08001f01
 8001e80:	080021a5 	.word	0x080021a5
 8001e84:	080021a5 	.word	0x080021a5
 8001e88:	080021a5 	.word	0x080021a5
 8001e8c:	080021a5 	.word	0x080021a5
 8001e90:	080021a5 	.word	0x080021a5
 8001e94:	080021a5 	.word	0x080021a5
 8001e98:	080021a5 	.word	0x080021a5
 8001e9c:	080021a5 	.word	0x080021a5
 8001ea0:	080021a5 	.word	0x080021a5
 8001ea4:	080021a5 	.word	0x080021a5
 8001ea8:	080021a5 	.word	0x080021a5
 8001eac:	080021a5 	.word	0x080021a5
 8001eb0:	080021a5 	.word	0x080021a5
 8001eb4:	080021a5 	.word	0x080021a5
 8001eb8:	080021a5 	.word	0x080021a5
 8001ebc:	080021a5 	.word	0x080021a5
 8001ec0:	080021a5 	.word	0x080021a5
 8001ec4:	080021a5 	.word	0x080021a5
 8001ec8:	080021a5 	.word	0x080021a5
 8001ecc:	080021a5 	.word	0x080021a5
 8001ed0:	080021a5 	.word	0x080021a5
 8001ed4:	080021a5 	.word	0x080021a5
 8001ed8:	080021a5 	.word	0x080021a5
 8001edc:	080021a5 	.word	0x080021a5
 8001ee0:	080021a5 	.word	0x080021a5
 8001ee4:	080021a5 	.word	0x080021a5
 8001ee8:	080021a5 	.word	0x080021a5
 8001eec:	080021a5 	.word	0x080021a5
 8001ef0:	080021a5 	.word	0x080021a5
 8001ef4:	080021a5 	.word	0x080021a5
 8001ef8:	080021a5 	.word	0x080021a5
 8001efc:	08001f01 	.word	0x08001f01
  {
    case LIS2DW12_XL_ODR_OFF:
    case LIS2DW12_XL_SET_SW_TRIG:
    case LIS2DW12_XL_SET_PIN_TRIG:
      *Odr = 0.0f;
 8001f00:	683b      	ldr	r3, [r7, #0]
 8001f02:	f04f 0200 	mov.w	r2, #0
 8001f06:	601a      	str	r2, [r3, #0]
      break;
 8001f08:	e153      	b.n	80021b2 <LIS2DW12_ACC_GetOutputDataRate+0x3d2>

    case LIS2DW12_XL_ODR_1Hz6_LP_ONLY:
      switch (mode)
 8001f0a:	7abb      	ldrb	r3, [r7, #10]
 8001f0c:	2b1b      	cmp	r3, #27
 8001f0e:	d843      	bhi.n	8001f98 <LIS2DW12_ACC_GetOutputDataRate+0x1b8>
 8001f10:	a201      	add	r2, pc, #4	; (adr r2, 8001f18 <LIS2DW12_ACC_GetOutputDataRate+0x138>)
 8001f12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f16:	bf00      	nop
 8001f18:	08001f91 	.word	0x08001f91
 8001f1c:	08001f91 	.word	0x08001f91
 8001f20:	08001f91 	.word	0x08001f91
 8001f24:	08001f91 	.word	0x08001f91
 8001f28:	08001f89 	.word	0x08001f89
 8001f2c:	08001f99 	.word	0x08001f99
 8001f30:	08001f99 	.word	0x08001f99
 8001f34:	08001f99 	.word	0x08001f99
 8001f38:	08001f91 	.word	0x08001f91
 8001f3c:	08001f91 	.word	0x08001f91
 8001f40:	08001f91 	.word	0x08001f91
 8001f44:	08001f91 	.word	0x08001f91
 8001f48:	08001f99 	.word	0x08001f99
 8001f4c:	08001f99 	.word	0x08001f99
 8001f50:	08001f99 	.word	0x08001f99
 8001f54:	08001f99 	.word	0x08001f99
 8001f58:	08001f91 	.word	0x08001f91
 8001f5c:	08001f91 	.word	0x08001f91
 8001f60:	08001f91 	.word	0x08001f91
 8001f64:	08001f91 	.word	0x08001f91
 8001f68:	08001f89 	.word	0x08001f89
 8001f6c:	08001f99 	.word	0x08001f99
 8001f70:	08001f99 	.word	0x08001f99
 8001f74:	08001f99 	.word	0x08001f99
 8001f78:	08001f91 	.word	0x08001f91
 8001f7c:	08001f91 	.word	0x08001f91
 8001f80:	08001f91 	.word	0x08001f91
 8001f84:	08001f91 	.word	0x08001f91
      {
        case LIS2DW12_HIGH_PERFORMANCE:
        case LIS2DW12_HIGH_PERFORMANCE_LOW_NOISE:
          *Odr = 12.5f;
 8001f88:	683b      	ldr	r3, [r7, #0]
 8001f8a:	4a8c      	ldr	r2, [pc, #560]	; (80021bc <LIS2DW12_ACC_GetOutputDataRate+0x3dc>)
 8001f8c:	601a      	str	r2, [r3, #0]
          break;
 8001f8e:	e00a      	b.n	8001fa6 <LIS2DW12_ACC_GetOutputDataRate+0x1c6>
        case LIS2DW12_CONT_LOW_PWR_LOW_NOISE_12bit:
        case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_4:
        case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_3:
        case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_2:
        case LIS2DW12_SINGLE_LOW_LOW_NOISE_PWR_12bit:
          *Odr = 1.6f;
 8001f90:	683b      	ldr	r3, [r7, #0]
 8001f92:	4a8b      	ldr	r2, [pc, #556]	; (80021c0 <LIS2DW12_ACC_GetOutputDataRate+0x3e0>)
 8001f94:	601a      	str	r2, [r3, #0]
          break;
 8001f96:	e006      	b.n	8001fa6 <LIS2DW12_ACC_GetOutputDataRate+0x1c6>

        default:
          *Odr = -1.0f;
 8001f98:	683b      	ldr	r3, [r7, #0]
 8001f9a:	4a8a      	ldr	r2, [pc, #552]	; (80021c4 <LIS2DW12_ACC_GetOutputDataRate+0x3e4>)
 8001f9c:	601a      	str	r2, [r3, #0]
          ret = LIS2DW12_ERROR;
 8001f9e:	f04f 33ff 	mov.w	r3, #4294967295
 8001fa2:	60fb      	str	r3, [r7, #12]
          break;
 8001fa4:	bf00      	nop
      }
      break;
 8001fa6:	e104      	b.n	80021b2 <LIS2DW12_ACC_GetOutputDataRate+0x3d2>

    case LIS2DW12_XL_ODR_12Hz5:
      *Odr = 12.5f;
 8001fa8:	683b      	ldr	r3, [r7, #0]
 8001faa:	4a84      	ldr	r2, [pc, #528]	; (80021bc <LIS2DW12_ACC_GetOutputDataRate+0x3dc>)
 8001fac:	601a      	str	r2, [r3, #0]
      break;
 8001fae:	e100      	b.n	80021b2 <LIS2DW12_ACC_GetOutputDataRate+0x3d2>

    case LIS2DW12_XL_ODR_25Hz:
      *Odr = 25.0f;
 8001fb0:	683b      	ldr	r3, [r7, #0]
 8001fb2:	4a85      	ldr	r2, [pc, #532]	; (80021c8 <LIS2DW12_ACC_GetOutputDataRate+0x3e8>)
 8001fb4:	601a      	str	r2, [r3, #0]
      break;
 8001fb6:	e0fc      	b.n	80021b2 <LIS2DW12_ACC_GetOutputDataRate+0x3d2>

    case LIS2DW12_XL_ODR_50Hz:
      *Odr = 50.0f;
 8001fb8:	683b      	ldr	r3, [r7, #0]
 8001fba:	4a84      	ldr	r2, [pc, #528]	; (80021cc <LIS2DW12_ACC_GetOutputDataRate+0x3ec>)
 8001fbc:	601a      	str	r2, [r3, #0]
      break;
 8001fbe:	e0f8      	b.n	80021b2 <LIS2DW12_ACC_GetOutputDataRate+0x3d2>

    case LIS2DW12_XL_ODR_100Hz:
      *Odr = 100.0f;
 8001fc0:	683b      	ldr	r3, [r7, #0]
 8001fc2:	4a83      	ldr	r2, [pc, #524]	; (80021d0 <LIS2DW12_ACC_GetOutputDataRate+0x3f0>)
 8001fc4:	601a      	str	r2, [r3, #0]
      break;
 8001fc6:	e0f4      	b.n	80021b2 <LIS2DW12_ACC_GetOutputDataRate+0x3d2>

    case LIS2DW12_XL_ODR_200Hz:
      *Odr = 200.0f;
 8001fc8:	683b      	ldr	r3, [r7, #0]
 8001fca:	4a82      	ldr	r2, [pc, #520]	; (80021d4 <LIS2DW12_ACC_GetOutputDataRate+0x3f4>)
 8001fcc:	601a      	str	r2, [r3, #0]
      break;
 8001fce:	e0f0      	b.n	80021b2 <LIS2DW12_ACC_GetOutputDataRate+0x3d2>

    case LIS2DW12_XL_ODR_400Hz:
      switch (mode)
 8001fd0:	7abb      	ldrb	r3, [r7, #10]
 8001fd2:	2b1b      	cmp	r3, #27
 8001fd4:	d842      	bhi.n	800205c <LIS2DW12_ACC_GetOutputDataRate+0x27c>
 8001fd6:	a201      	add	r2, pc, #4	; (adr r2, 8001fdc <LIS2DW12_ACC_GetOutputDataRate+0x1fc>)
 8001fd8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001fdc:	08002055 	.word	0x08002055
 8001fe0:	08002055 	.word	0x08002055
 8001fe4:	08002055 	.word	0x08002055
 8001fe8:	08002055 	.word	0x08002055
 8001fec:	0800204d 	.word	0x0800204d
 8001ff0:	0800205d 	.word	0x0800205d
 8001ff4:	0800205d 	.word	0x0800205d
 8001ff8:	0800205d 	.word	0x0800205d
 8001ffc:	08002055 	.word	0x08002055
 8002000:	08002055 	.word	0x08002055
 8002004:	08002055 	.word	0x08002055
 8002008:	08002055 	.word	0x08002055
 800200c:	0800205d 	.word	0x0800205d
 8002010:	0800205d 	.word	0x0800205d
 8002014:	0800205d 	.word	0x0800205d
 8002018:	0800205d 	.word	0x0800205d
 800201c:	08002055 	.word	0x08002055
 8002020:	08002055 	.word	0x08002055
 8002024:	08002055 	.word	0x08002055
 8002028:	08002055 	.word	0x08002055
 800202c:	0800204d 	.word	0x0800204d
 8002030:	0800205d 	.word	0x0800205d
 8002034:	0800205d 	.word	0x0800205d
 8002038:	0800205d 	.word	0x0800205d
 800203c:	08002055 	.word	0x08002055
 8002040:	08002055 	.word	0x08002055
 8002044:	08002055 	.word	0x08002055
 8002048:	08002055 	.word	0x08002055
      {
        case LIS2DW12_HIGH_PERFORMANCE:
        case LIS2DW12_HIGH_PERFORMANCE_LOW_NOISE:
          *Odr = 400.0f;
 800204c:	683b      	ldr	r3, [r7, #0]
 800204e:	4a62      	ldr	r2, [pc, #392]	; (80021d8 <LIS2DW12_ACC_GetOutputDataRate+0x3f8>)
 8002050:	601a      	str	r2, [r3, #0]
          break;
 8002052:	e00a      	b.n	800206a <LIS2DW12_ACC_GetOutputDataRate+0x28a>
        case LIS2DW12_CONT_LOW_PWR_LOW_NOISE_12bit:
        case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_4:
        case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_3:
        case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_2:
        case LIS2DW12_SINGLE_LOW_LOW_NOISE_PWR_12bit:
          *Odr = 200.0f;
 8002054:	683b      	ldr	r3, [r7, #0]
 8002056:	4a5f      	ldr	r2, [pc, #380]	; (80021d4 <LIS2DW12_ACC_GetOutputDataRate+0x3f4>)
 8002058:	601a      	str	r2, [r3, #0]
          break;
 800205a:	e006      	b.n	800206a <LIS2DW12_ACC_GetOutputDataRate+0x28a>

        default:
          *Odr = -1.0f;
 800205c:	683b      	ldr	r3, [r7, #0]
 800205e:	4a59      	ldr	r2, [pc, #356]	; (80021c4 <LIS2DW12_ACC_GetOutputDataRate+0x3e4>)
 8002060:	601a      	str	r2, [r3, #0]
          ret = LIS2DW12_ERROR;
 8002062:	f04f 33ff 	mov.w	r3, #4294967295
 8002066:	60fb      	str	r3, [r7, #12]
          break;
 8002068:	bf00      	nop
      }
      break;
 800206a:	e0a2      	b.n	80021b2 <LIS2DW12_ACC_GetOutputDataRate+0x3d2>

    case LIS2DW12_XL_ODR_800Hz:
      switch (mode)
 800206c:	7abb      	ldrb	r3, [r7, #10]
 800206e:	2b1b      	cmp	r3, #27
 8002070:	d842      	bhi.n	80020f8 <LIS2DW12_ACC_GetOutputDataRate+0x318>
 8002072:	a201      	add	r2, pc, #4	; (adr r2, 8002078 <LIS2DW12_ACC_GetOutputDataRate+0x298>)
 8002074:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002078:	080020f1 	.word	0x080020f1
 800207c:	080020f1 	.word	0x080020f1
 8002080:	080020f1 	.word	0x080020f1
 8002084:	080020f1 	.word	0x080020f1
 8002088:	080020e9 	.word	0x080020e9
 800208c:	080020f9 	.word	0x080020f9
 8002090:	080020f9 	.word	0x080020f9
 8002094:	080020f9 	.word	0x080020f9
 8002098:	080020f1 	.word	0x080020f1
 800209c:	080020f1 	.word	0x080020f1
 80020a0:	080020f1 	.word	0x080020f1
 80020a4:	080020f1 	.word	0x080020f1
 80020a8:	080020f9 	.word	0x080020f9
 80020ac:	080020f9 	.word	0x080020f9
 80020b0:	080020f9 	.word	0x080020f9
 80020b4:	080020f9 	.word	0x080020f9
 80020b8:	080020f1 	.word	0x080020f1
 80020bc:	080020f1 	.word	0x080020f1
 80020c0:	080020f1 	.word	0x080020f1
 80020c4:	080020f1 	.word	0x080020f1
 80020c8:	080020e9 	.word	0x080020e9
 80020cc:	080020f9 	.word	0x080020f9
 80020d0:	080020f9 	.word	0x080020f9
 80020d4:	080020f9 	.word	0x080020f9
 80020d8:	080020f1 	.word	0x080020f1
 80020dc:	080020f1 	.word	0x080020f1
 80020e0:	080020f1 	.word	0x080020f1
 80020e4:	080020f1 	.word	0x080020f1
      {
        case LIS2DW12_HIGH_PERFORMANCE:
        case LIS2DW12_HIGH_PERFORMANCE_LOW_NOISE:
          *Odr = 800.0f;
 80020e8:	683b      	ldr	r3, [r7, #0]
 80020ea:	4a3c      	ldr	r2, [pc, #240]	; (80021dc <LIS2DW12_ACC_GetOutputDataRate+0x3fc>)
 80020ec:	601a      	str	r2, [r3, #0]
          break;
 80020ee:	e00a      	b.n	8002106 <LIS2DW12_ACC_GetOutputDataRate+0x326>
        case LIS2DW12_CONT_LOW_PWR_LOW_NOISE_12bit:
        case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_4:
        case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_3:
        case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_2:
        case LIS2DW12_SINGLE_LOW_LOW_NOISE_PWR_12bit:
          *Odr = 200.0f;
 80020f0:	683b      	ldr	r3, [r7, #0]
 80020f2:	4a38      	ldr	r2, [pc, #224]	; (80021d4 <LIS2DW12_ACC_GetOutputDataRate+0x3f4>)
 80020f4:	601a      	str	r2, [r3, #0]
          break;
 80020f6:	e006      	b.n	8002106 <LIS2DW12_ACC_GetOutputDataRate+0x326>

        default:
          *Odr = -1.0f;
 80020f8:	683b      	ldr	r3, [r7, #0]
 80020fa:	4a32      	ldr	r2, [pc, #200]	; (80021c4 <LIS2DW12_ACC_GetOutputDataRate+0x3e4>)
 80020fc:	601a      	str	r2, [r3, #0]
          ret = LIS2DW12_ERROR;
 80020fe:	f04f 33ff 	mov.w	r3, #4294967295
 8002102:	60fb      	str	r3, [r7, #12]
          break;
 8002104:	bf00      	nop
      }
      break;
 8002106:	e054      	b.n	80021b2 <LIS2DW12_ACC_GetOutputDataRate+0x3d2>

    case LIS2DW12_XL_ODR_1k6Hz:
      switch (mode)
 8002108:	7abb      	ldrb	r3, [r7, #10]
 800210a:	2b1b      	cmp	r3, #27
 800210c:	d842      	bhi.n	8002194 <LIS2DW12_ACC_GetOutputDataRate+0x3b4>
 800210e:	a201      	add	r2, pc, #4	; (adr r2, 8002114 <LIS2DW12_ACC_GetOutputDataRate+0x334>)
 8002110:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002114:	0800218d 	.word	0x0800218d
 8002118:	0800218d 	.word	0x0800218d
 800211c:	0800218d 	.word	0x0800218d
 8002120:	0800218d 	.word	0x0800218d
 8002124:	08002185 	.word	0x08002185
 8002128:	08002195 	.word	0x08002195
 800212c:	08002195 	.word	0x08002195
 8002130:	08002195 	.word	0x08002195
 8002134:	0800218d 	.word	0x0800218d
 8002138:	0800218d 	.word	0x0800218d
 800213c:	0800218d 	.word	0x0800218d
 8002140:	0800218d 	.word	0x0800218d
 8002144:	08002195 	.word	0x08002195
 8002148:	08002195 	.word	0x08002195
 800214c:	08002195 	.word	0x08002195
 8002150:	08002195 	.word	0x08002195
 8002154:	0800218d 	.word	0x0800218d
 8002158:	0800218d 	.word	0x0800218d
 800215c:	0800218d 	.word	0x0800218d
 8002160:	0800218d 	.word	0x0800218d
 8002164:	08002185 	.word	0x08002185
 8002168:	08002195 	.word	0x08002195
 800216c:	08002195 	.word	0x08002195
 8002170:	08002195 	.word	0x08002195
 8002174:	0800218d 	.word	0x0800218d
 8002178:	0800218d 	.word	0x0800218d
 800217c:	0800218d 	.word	0x0800218d
 8002180:	0800218d 	.word	0x0800218d
      {
        case LIS2DW12_HIGH_PERFORMANCE:
        case LIS2DW12_HIGH_PERFORMANCE_LOW_NOISE:
          *Odr = 1600.0f;
 8002184:	683b      	ldr	r3, [r7, #0]
 8002186:	4a16      	ldr	r2, [pc, #88]	; (80021e0 <LIS2DW12_ACC_GetOutputDataRate+0x400>)
 8002188:	601a      	str	r2, [r3, #0]
          break;
 800218a:	e00a      	b.n	80021a2 <LIS2DW12_ACC_GetOutputDataRate+0x3c2>
        case LIS2DW12_CONT_LOW_PWR_LOW_NOISE_12bit:
        case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_4:
        case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_3:
        case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_2:
        case LIS2DW12_SINGLE_LOW_LOW_NOISE_PWR_12bit:
          *Odr = 200.0f;
 800218c:	683b      	ldr	r3, [r7, #0]
 800218e:	4a11      	ldr	r2, [pc, #68]	; (80021d4 <LIS2DW12_ACC_GetOutputDataRate+0x3f4>)
 8002190:	601a      	str	r2, [r3, #0]
          break;
 8002192:	e006      	b.n	80021a2 <LIS2DW12_ACC_GetOutputDataRate+0x3c2>

        default:
          *Odr = -1.0f;
 8002194:	683b      	ldr	r3, [r7, #0]
 8002196:	4a0b      	ldr	r2, [pc, #44]	; (80021c4 <LIS2DW12_ACC_GetOutputDataRate+0x3e4>)
 8002198:	601a      	str	r2, [r3, #0]
          ret = LIS2DW12_ERROR;
 800219a:	f04f 33ff 	mov.w	r3, #4294967295
 800219e:	60fb      	str	r3, [r7, #12]
          break;
 80021a0:	bf00      	nop
      }
      break;
 80021a2:	e006      	b.n	80021b2 <LIS2DW12_ACC_GetOutputDataRate+0x3d2>

    default:
      *Odr = -1.0f;
 80021a4:	683b      	ldr	r3, [r7, #0]
 80021a6:	4a07      	ldr	r2, [pc, #28]	; (80021c4 <LIS2DW12_ACC_GetOutputDataRate+0x3e4>)
 80021a8:	601a      	str	r2, [r3, #0]
      ret = LIS2DW12_ERROR;
 80021aa:	f04f 33ff 	mov.w	r3, #4294967295
 80021ae:	60fb      	str	r3, [r7, #12]
      break;
 80021b0:	bf00      	nop
  }

  return ret;
 80021b2:	68fb      	ldr	r3, [r7, #12]
}
 80021b4:	4618      	mov	r0, r3
 80021b6:	3710      	adds	r7, #16
 80021b8:	46bd      	mov	sp, r7
 80021ba:	bd80      	pop	{r7, pc}
 80021bc:	41480000 	.word	0x41480000
 80021c0:	3fcccccd 	.word	0x3fcccccd
 80021c4:	bf800000 	.word	0xbf800000
 80021c8:	41c80000 	.word	0x41c80000
 80021cc:	42480000 	.word	0x42480000
 80021d0:	42c80000 	.word	0x42c80000
 80021d4:	43480000 	.word	0x43480000
 80021d8:	43c80000 	.word	0x43c80000
 80021dc:	44480000 	.word	0x44480000
 80021e0:	44c80000 	.word	0x44c80000

080021e4 <LIS2DW12_ACC_SetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DW12_ACC_SetOutputDataRate(LIS2DW12_Object_t *pObj, float Odr)
{
 80021e4:	b580      	push	{r7, lr}
 80021e6:	b082      	sub	sp, #8
 80021e8:	af00      	add	r7, sp, #0
 80021ea:	6078      	str	r0, [r7, #4]
 80021ec:	ed87 0a00 	vstr	s0, [r7]
  /* By default we use High Performance mode and Low Noise disabled */
  return LIS2DW12_ACC_SetOutputDataRate_With_Mode(pObj, Odr, LIS2DW12_HIGH_PERFORMANCE_MODE, LIS2DW12_LOW_NOISE_DISABLE);
 80021f0:	2200      	movs	r2, #0
 80021f2:	2100      	movs	r1, #0
 80021f4:	ed97 0a00 	vldr	s0, [r7]
 80021f8:	6878      	ldr	r0, [r7, #4]
 80021fa:	f000 f805 	bl	8002208 <LIS2DW12_ACC_SetOutputDataRate_With_Mode>
 80021fe:	4603      	mov	r3, r0
}
 8002200:	4618      	mov	r0, r3
 8002202:	3708      	adds	r7, #8
 8002204:	46bd      	mov	sp, r7
 8002206:	bd80      	pop	{r7, pc}

08002208 <LIS2DW12_ACC_SetOutputDataRate_With_Mode>:
  * @param  Noise the low noise option
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DW12_ACC_SetOutputDataRate_With_Mode(LIS2DW12_Object_t *pObj, float Odr, LIS2DW12_Operating_Mode_t Mode,
                                                 LIS2DW12_Low_Noise_t Noise)
{
 8002208:	b580      	push	{r7, lr}
 800220a:	b084      	sub	sp, #16
 800220c:	af00      	add	r7, sp, #0
 800220e:	60f8      	str	r0, [r7, #12]
 8002210:	ed87 0a02 	vstr	s0, [r7, #8]
 8002214:	460b      	mov	r3, r1
 8002216:	71fb      	strb	r3, [r7, #7]
 8002218:	4613      	mov	r3, r2
 800221a:	71bb      	strb	r3, [r7, #6]
  /* Check if the component is enabled */
  if (pObj->acc_is_enabled == 1U)
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8002222:	2b01      	cmp	r3, #1
 8002224:	d109      	bne.n	800223a <LIS2DW12_ACC_SetOutputDataRate_With_Mode+0x32>
  {
    return LIS2DW12_ACC_SetOutputDataRate_When_Enabled(pObj, Odr, Mode, Noise);
 8002226:	79ba      	ldrb	r2, [r7, #6]
 8002228:	79fb      	ldrb	r3, [r7, #7]
 800222a:	4619      	mov	r1, r3
 800222c:	ed97 0a02 	vldr	s0, [r7, #8]
 8002230:	68f8      	ldr	r0, [r7, #12]
 8002232:	f000 f98d 	bl	8002550 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled>
 8002236:	4603      	mov	r3, r0
 8002238:	e008      	b.n	800224c <LIS2DW12_ACC_SetOutputDataRate_With_Mode+0x44>
  }
  else
  {
    return LIS2DW12_ACC_SetOutputDataRate_When_Disabled(pObj, Odr, Mode, Noise);
 800223a:	79ba      	ldrb	r2, [r7, #6]
 800223c:	79fb      	ldrb	r3, [r7, #7]
 800223e:	4619      	mov	r1, r3
 8002240:	ed97 0a02 	vldr	s0, [r7, #8]
 8002244:	68f8      	ldr	r0, [r7, #12]
 8002246:	f000 fa9f 	bl	8002788 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled>
 800224a:	4603      	mov	r3, r0
  }
}
 800224c:	4618      	mov	r0, r3
 800224e:	3710      	adds	r7, #16
 8002250:	46bd      	mov	sp, r7
 8002252:	bd80      	pop	{r7, pc}

08002254 <LIS2DW12_ACC_GetFullScale>:
  * @param  pObj the device pObj
  * @param  FullScale pointer where the full scale is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DW12_ACC_GetFullScale(LIS2DW12_Object_t *pObj, int32_t *FullScale)
{
 8002254:	b580      	push	{r7, lr}
 8002256:	b084      	sub	sp, #16
 8002258:	af00      	add	r7, sp, #0
 800225a:	6078      	str	r0, [r7, #4]
 800225c:	6039      	str	r1, [r7, #0]
  int32_t ret = LIS2DW12_OK;
 800225e:	2300      	movs	r3, #0
 8002260:	60fb      	str	r3, [r7, #12]
  lis2dw12_fs_t fs_low_level;

  /* Read actual full scale selection from sensor. */
  if (lis2dw12_full_scale_get(&(pObj->Ctx), &fs_low_level) != LIS2DW12_OK)
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	3320      	adds	r3, #32
 8002266:	f107 020b 	add.w	r2, r7, #11
 800226a:	4611      	mov	r1, r2
 800226c:	4618      	mov	r0, r3
 800226e:	f000 fde7 	bl	8002e40 <lis2dw12_full_scale_get>
 8002272:	4603      	mov	r3, r0
 8002274:	2b00      	cmp	r3, #0
 8002276:	d002      	beq.n	800227e <LIS2DW12_ACC_GetFullScale+0x2a>
  {
    return LIS2DW12_ERROR;
 8002278:	f04f 33ff 	mov.w	r3, #4294967295
 800227c:	e027      	b.n	80022ce <LIS2DW12_ACC_GetFullScale+0x7a>
  }

  switch (fs_low_level)
 800227e:	7afb      	ldrb	r3, [r7, #11]
 8002280:	2b03      	cmp	r3, #3
 8002282:	d81b      	bhi.n	80022bc <LIS2DW12_ACC_GetFullScale+0x68>
 8002284:	a201      	add	r2, pc, #4	; (adr r2, 800228c <LIS2DW12_ACC_GetFullScale+0x38>)
 8002286:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800228a:	bf00      	nop
 800228c:	0800229d 	.word	0x0800229d
 8002290:	080022a5 	.word	0x080022a5
 8002294:	080022ad 	.word	0x080022ad
 8002298:	080022b5 	.word	0x080022b5
  {
    case LIS2DW12_2g:
      *FullScale =  2;
 800229c:	683b      	ldr	r3, [r7, #0]
 800229e:	2202      	movs	r2, #2
 80022a0:	601a      	str	r2, [r3, #0]
      break;
 80022a2:	e013      	b.n	80022cc <LIS2DW12_ACC_GetFullScale+0x78>

    case LIS2DW12_4g:
      *FullScale =  4;
 80022a4:	683b      	ldr	r3, [r7, #0]
 80022a6:	2204      	movs	r2, #4
 80022a8:	601a      	str	r2, [r3, #0]
      break;
 80022aa:	e00f      	b.n	80022cc <LIS2DW12_ACC_GetFullScale+0x78>

    case LIS2DW12_8g:
      *FullScale =  8;
 80022ac:	683b      	ldr	r3, [r7, #0]
 80022ae:	2208      	movs	r2, #8
 80022b0:	601a      	str	r2, [r3, #0]
      break;
 80022b2:	e00b      	b.n	80022cc <LIS2DW12_ACC_GetFullScale+0x78>

    case LIS2DW12_16g:
      *FullScale = 16;
 80022b4:	683b      	ldr	r3, [r7, #0]
 80022b6:	2210      	movs	r2, #16
 80022b8:	601a      	str	r2, [r3, #0]
      break;
 80022ba:	e007      	b.n	80022cc <LIS2DW12_ACC_GetFullScale+0x78>

    default:
      *FullScale = -1;
 80022bc:	683b      	ldr	r3, [r7, #0]
 80022be:	f04f 32ff 	mov.w	r2, #4294967295
 80022c2:	601a      	str	r2, [r3, #0]
      ret = LIS2DW12_ERROR;
 80022c4:	f04f 33ff 	mov.w	r3, #4294967295
 80022c8:	60fb      	str	r3, [r7, #12]
      break;
 80022ca:	bf00      	nop
  }

  return ret;
 80022cc:	68fb      	ldr	r3, [r7, #12]
}
 80022ce:	4618      	mov	r0, r3
 80022d0:	3710      	adds	r7, #16
 80022d2:	46bd      	mov	sp, r7
 80022d4:	bd80      	pop	{r7, pc}
 80022d6:	bf00      	nop

080022d8 <LIS2DW12_ACC_SetFullScale>:
  * @param  pObj the device pObj
  * @param  FullScale the functional full scale to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DW12_ACC_SetFullScale(LIS2DW12_Object_t *pObj, int32_t FullScale)
{
 80022d8:	b580      	push	{r7, lr}
 80022da:	b084      	sub	sp, #16
 80022dc:	af00      	add	r7, sp, #0
 80022de:	6078      	str	r0, [r7, #4]
 80022e0:	6039      	str	r1, [r7, #0]
  lis2dw12_fs_t new_fs;

  /* Seems like MISRA C-2012 rule 14.3a violation but only from single file statical analysis point of view because
     the parameter passed to the function is not known at the moment of analysis */
  new_fs = (FullScale <= 2) ? LIS2DW12_2g
           : (FullScale <= 4) ? LIS2DW12_4g
 80022e2:	683b      	ldr	r3, [r7, #0]
 80022e4:	2b02      	cmp	r3, #2
 80022e6:	dd0b      	ble.n	8002300 <LIS2DW12_ACC_SetFullScale+0x28>
 80022e8:	683b      	ldr	r3, [r7, #0]
 80022ea:	2b04      	cmp	r3, #4
 80022ec:	dd06      	ble.n	80022fc <LIS2DW12_ACC_SetFullScale+0x24>
 80022ee:	683b      	ldr	r3, [r7, #0]
 80022f0:	2b08      	cmp	r3, #8
 80022f2:	dc01      	bgt.n	80022f8 <LIS2DW12_ACC_SetFullScale+0x20>
 80022f4:	2302      	movs	r3, #2
 80022f6:	e004      	b.n	8002302 <LIS2DW12_ACC_SetFullScale+0x2a>
 80022f8:	2303      	movs	r3, #3
 80022fa:	e002      	b.n	8002302 <LIS2DW12_ACC_SetFullScale+0x2a>
 80022fc:	2301      	movs	r3, #1
 80022fe:	e000      	b.n	8002302 <LIS2DW12_ACC_SetFullScale+0x2a>
 8002300:	2300      	movs	r3, #0
  new_fs = (FullScale <= 2) ? LIS2DW12_2g
 8002302:	73fb      	strb	r3, [r7, #15]
           : (FullScale <= 8) ? LIS2DW12_8g
           :                    LIS2DW12_16g;

  if (lis2dw12_full_scale_set(&(pObj->Ctx), new_fs) != LIS2DW12_OK)
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	3320      	adds	r3, #32
 8002308:	7bfa      	ldrb	r2, [r7, #15]
 800230a:	4611      	mov	r1, r2
 800230c:	4618      	mov	r0, r3
 800230e:	f000 fd71 	bl	8002df4 <lis2dw12_full_scale_set>
 8002312:	4603      	mov	r3, r0
 8002314:	2b00      	cmp	r3, #0
 8002316:	d002      	beq.n	800231e <LIS2DW12_ACC_SetFullScale+0x46>
  {
    return LIS2DW12_ERROR;
 8002318:	f04f 33ff 	mov.w	r3, #4294967295
 800231c:	e000      	b.n	8002320 <LIS2DW12_ACC_SetFullScale+0x48>
  }

  return LIS2DW12_OK;
 800231e:	2300      	movs	r3, #0
}
 8002320:	4618      	mov	r0, r3
 8002322:	3710      	adds	r7, #16
 8002324:	46bd      	mov	sp, r7
 8002326:	bd80      	pop	{r7, pc}

08002328 <LIS2DW12_ACC_GetAxesRaw>:
  * @param  pObj the device pObj
  * @param  Value pointer where the raw values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DW12_ACC_GetAxesRaw(LIS2DW12_Object_t *pObj, LIS2DW12_AxesRaw_t *Value)
{
 8002328:	b580      	push	{r7, lr}
 800232a:	b086      	sub	sp, #24
 800232c:	af00      	add	r7, sp, #0
 800232e:	6078      	str	r0, [r7, #4]
 8002330:	6039      	str	r1, [r7, #0]
  lis2dw12_axis3bit16_t data_raw;
  lis2dw12_mode_t mode;
  int32_t ret = LIS2DW12_OK;
 8002332:	2300      	movs	r3, #0
 8002334:	617b      	str	r3, [r7, #20]

  /* Read actual power mode selection from sensor. */
  if (lis2dw12_power_mode_get(&(pObj->Ctx), &mode) != LIS2DW12_OK)
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	3320      	adds	r3, #32
 800233a:	f107 020b 	add.w	r2, r7, #11
 800233e:	4611      	mov	r1, r2
 8002340:	4618      	mov	r0, r3
 8002342:	f000 fb67 	bl	8002a14 <lis2dw12_power_mode_get>
 8002346:	4603      	mov	r3, r0
 8002348:	2b00      	cmp	r3, #0
 800234a:	d002      	beq.n	8002352 <LIS2DW12_ACC_GetAxesRaw+0x2a>
  {
    return LIS2DW12_ERROR;
 800234c:	f04f 33ff 	mov.w	r3, #4294967295
 8002350:	e089      	b.n	8002466 <LIS2DW12_ACC_GetAxesRaw+0x13e>
  }

  /* Read raw data values. */
  if (lis2dw12_acceleration_raw_get(&(pObj->Ctx), data_raw.i16bit) != LIS2DW12_OK)
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	3320      	adds	r3, #32
 8002356:	f107 020c 	add.w	r2, r7, #12
 800235a:	4611      	mov	r1, r2
 800235c:	4618      	mov	r0, r3
 800235e:	f000 fda7 	bl	8002eb0 <lis2dw12_acceleration_raw_get>
 8002362:	4603      	mov	r3, r0
 8002364:	2b00      	cmp	r3, #0
 8002366:	d002      	beq.n	800236e <LIS2DW12_ACC_GetAxesRaw+0x46>
  {
    return LIS2DW12_ERROR;
 8002368:	f04f 33ff 	mov.w	r3, #4294967295
 800236c:	e07b      	b.n	8002466 <LIS2DW12_ACC_GetAxesRaw+0x13e>
  }

  switch (mode)
 800236e:	7afb      	ldrb	r3, [r7, #11]
 8002370:	2b1b      	cmp	r3, #27
 8002372:	d873      	bhi.n	800245c <LIS2DW12_ACC_GetAxesRaw+0x134>
 8002374:	a201      	add	r2, pc, #4	; (adr r2, 800237c <LIS2DW12_ACC_GetAxesRaw+0x54>)
 8002376:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800237a:	bf00      	nop
 800237c:	080023ed 	.word	0x080023ed
 8002380:	08002425 	.word	0x08002425
 8002384:	08002425 	.word	0x08002425
 8002388:	08002425 	.word	0x08002425
 800238c:	08002425 	.word	0x08002425
 8002390:	0800245d 	.word	0x0800245d
 8002394:	0800245d 	.word	0x0800245d
 8002398:	0800245d 	.word	0x0800245d
 800239c:	080023ed 	.word	0x080023ed
 80023a0:	08002425 	.word	0x08002425
 80023a4:	08002425 	.word	0x08002425
 80023a8:	08002425 	.word	0x08002425
 80023ac:	0800245d 	.word	0x0800245d
 80023b0:	0800245d 	.word	0x0800245d
 80023b4:	0800245d 	.word	0x0800245d
 80023b8:	0800245d 	.word	0x0800245d
 80023bc:	080023ed 	.word	0x080023ed
 80023c0:	08002425 	.word	0x08002425
 80023c4:	08002425 	.word	0x08002425
 80023c8:	08002425 	.word	0x08002425
 80023cc:	08002425 	.word	0x08002425
 80023d0:	0800245d 	.word	0x0800245d
 80023d4:	0800245d 	.word	0x0800245d
 80023d8:	0800245d 	.word	0x0800245d
 80023dc:	080023ed 	.word	0x080023ed
 80023e0:	08002425 	.word	0x08002425
 80023e4:	08002425 	.word	0x08002425
 80023e8:	08002425 	.word	0x08002425
    case LIS2DW12_CONT_LOW_PWR_12bit:
    case LIS2DW12_SINGLE_LOW_PWR_12bit:
    case LIS2DW12_CONT_LOW_PWR_LOW_NOISE_12bit:
    case LIS2DW12_SINGLE_LOW_LOW_NOISE_PWR_12bit:
      /* Data format 12 bits. */
      Value->x = (data_raw.i16bit[0] / 16);
 80023ec:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	da00      	bge.n	80023f6 <LIS2DW12_ACC_GetAxesRaw+0xce>
 80023f4:	330f      	adds	r3, #15
 80023f6:	111b      	asrs	r3, r3, #4
 80023f8:	b21a      	sxth	r2, r3
 80023fa:	683b      	ldr	r3, [r7, #0]
 80023fc:	801a      	strh	r2, [r3, #0]
      Value->y = (data_raw.i16bit[1] / 16);
 80023fe:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002402:	2b00      	cmp	r3, #0
 8002404:	da00      	bge.n	8002408 <LIS2DW12_ACC_GetAxesRaw+0xe0>
 8002406:	330f      	adds	r3, #15
 8002408:	111b      	asrs	r3, r3, #4
 800240a:	b21a      	sxth	r2, r3
 800240c:	683b      	ldr	r3, [r7, #0]
 800240e:	805a      	strh	r2, [r3, #2]
      Value->z = (data_raw.i16bit[2] / 16);
 8002410:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8002414:	2b00      	cmp	r3, #0
 8002416:	da00      	bge.n	800241a <LIS2DW12_ACC_GetAxesRaw+0xf2>
 8002418:	330f      	adds	r3, #15
 800241a:	111b      	asrs	r3, r3, #4
 800241c:	b21a      	sxth	r2, r3
 800241e:	683b      	ldr	r3, [r7, #0]
 8002420:	809a      	strh	r2, [r3, #4]
      break;
 8002422:	e01f      	b.n	8002464 <LIS2DW12_ACC_GetAxesRaw+0x13c>
    case LIS2DW12_CONT_LOW_PWR_LOW_NOISE_2:
    case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_4:
    case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_3:
    case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_2:
      /* Data format 14 bits. */
      Value->x = (data_raw.i16bit[0] / 4);
 8002424:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8002428:	2b00      	cmp	r3, #0
 800242a:	da00      	bge.n	800242e <LIS2DW12_ACC_GetAxesRaw+0x106>
 800242c:	3303      	adds	r3, #3
 800242e:	109b      	asrs	r3, r3, #2
 8002430:	b21a      	sxth	r2, r3
 8002432:	683b      	ldr	r3, [r7, #0]
 8002434:	801a      	strh	r2, [r3, #0]
      Value->y = (data_raw.i16bit[1] / 4);
 8002436:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800243a:	2b00      	cmp	r3, #0
 800243c:	da00      	bge.n	8002440 <LIS2DW12_ACC_GetAxesRaw+0x118>
 800243e:	3303      	adds	r3, #3
 8002440:	109b      	asrs	r3, r3, #2
 8002442:	b21a      	sxth	r2, r3
 8002444:	683b      	ldr	r3, [r7, #0]
 8002446:	805a      	strh	r2, [r3, #2]
      Value->z = (data_raw.i16bit[2] / 4);
 8002448:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800244c:	2b00      	cmp	r3, #0
 800244e:	da00      	bge.n	8002452 <LIS2DW12_ACC_GetAxesRaw+0x12a>
 8002450:	3303      	adds	r3, #3
 8002452:	109b      	asrs	r3, r3, #2
 8002454:	b21a      	sxth	r2, r3
 8002456:	683b      	ldr	r3, [r7, #0]
 8002458:	809a      	strh	r2, [r3, #4]
      break;
 800245a:	e003      	b.n	8002464 <LIS2DW12_ACC_GetAxesRaw+0x13c>

    default:
      ret = LIS2DW12_ERROR;
 800245c:	f04f 33ff 	mov.w	r3, #4294967295
 8002460:	617b      	str	r3, [r7, #20]
      break;
 8002462:	bf00      	nop
  }

  return ret;
 8002464:	697b      	ldr	r3, [r7, #20]
}
 8002466:	4618      	mov	r0, r3
 8002468:	3718      	adds	r7, #24
 800246a:	46bd      	mov	sp, r7
 800246c:	bd80      	pop	{r7, pc}
 800246e:	bf00      	nop

08002470 <LIS2DW12_ACC_GetAxes>:
  * @param  pObj the device pObj
  * @param  Acceleration pointer where the values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DW12_ACC_GetAxes(LIS2DW12_Object_t *pObj, LIS2DW12_Axes_t *Acceleration)
{
 8002470:	b580      	push	{r7, lr}
 8002472:	b086      	sub	sp, #24
 8002474:	af00      	add	r7, sp, #0
 8002476:	6078      	str	r0, [r7, #4]
 8002478:	6039      	str	r1, [r7, #0]
  LIS2DW12_AxesRaw_t data_raw;
  float sensitivity = 0.0f;
 800247a:	f04f 0300 	mov.w	r3, #0
 800247e:	60fb      	str	r3, [r7, #12]

  /* Read raw data values. */
  if (LIS2DW12_ACC_GetAxesRaw(pObj, &data_raw) != LIS2DW12_OK)
 8002480:	f107 0310 	add.w	r3, r7, #16
 8002484:	4619      	mov	r1, r3
 8002486:	6878      	ldr	r0, [r7, #4]
 8002488:	f7ff ff4e 	bl	8002328 <LIS2DW12_ACC_GetAxesRaw>
 800248c:	4603      	mov	r3, r0
 800248e:	2b00      	cmp	r3, #0
 8002490:	d002      	beq.n	8002498 <LIS2DW12_ACC_GetAxes+0x28>
  {
    return LIS2DW12_ERROR;
 8002492:	f04f 33ff 	mov.w	r3, #4294967295
 8002496:	e03c      	b.n	8002512 <LIS2DW12_ACC_GetAxes+0xa2>
  }

  /* Get LIS2DW12 actual sensitivity. */
  if (LIS2DW12_ACC_GetSensitivity(pObj, &sensitivity) != LIS2DW12_OK)
 8002498:	f107 030c 	add.w	r3, r7, #12
 800249c:	4619      	mov	r1, r3
 800249e:	6878      	ldr	r0, [r7, #4]
 80024a0:	f7ff fbd6 	bl	8001c50 <LIS2DW12_ACC_GetSensitivity>
 80024a4:	4603      	mov	r3, r0
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d002      	beq.n	80024b0 <LIS2DW12_ACC_GetAxes+0x40>
  {
    return LIS2DW12_ERROR;
 80024aa:	f04f 33ff 	mov.w	r3, #4294967295
 80024ae:	e030      	b.n	8002512 <LIS2DW12_ACC_GetAxes+0xa2>
  }

  /* Calculate the data. */
  Acceleration->x = (int32_t)((float)((float)data_raw.x * sensitivity));
 80024b0:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80024b4:	ee07 3a90 	vmov	s15, r3
 80024b8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80024bc:	edd7 7a03 	vldr	s15, [r7, #12]
 80024c0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80024c4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80024c8:	ee17 2a90 	vmov	r2, s15
 80024cc:	683b      	ldr	r3, [r7, #0]
 80024ce:	601a      	str	r2, [r3, #0]
  Acceleration->y = (int32_t)((float)((float)data_raw.y * sensitivity));
 80024d0:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80024d4:	ee07 3a90 	vmov	s15, r3
 80024d8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80024dc:	edd7 7a03 	vldr	s15, [r7, #12]
 80024e0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80024e4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80024e8:	ee17 2a90 	vmov	r2, s15
 80024ec:	683b      	ldr	r3, [r7, #0]
 80024ee:	605a      	str	r2, [r3, #4]
  Acceleration->z = (int32_t)((float)((float)data_raw.z * sensitivity));
 80024f0:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80024f4:	ee07 3a90 	vmov	s15, r3
 80024f8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80024fc:	edd7 7a03 	vldr	s15, [r7, #12]
 8002500:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002504:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002508:	ee17 2a90 	vmov	r2, s15
 800250c:	683b      	ldr	r3, [r7, #0]
 800250e:	609a      	str	r2, [r3, #8]

  return LIS2DW12_OK;
 8002510:	2300      	movs	r3, #0
}
 8002512:	4618      	mov	r0, r3
 8002514:	3718      	adds	r7, #24
 8002516:	46bd      	mov	sp, r7
 8002518:	bd80      	pop	{r7, pc}

0800251a <LIS2DW12_Write_Reg>:
  * @param  Reg address to be written
  * @param  Data value to be written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DW12_Write_Reg(LIS2DW12_Object_t *pObj, uint8_t Reg, uint8_t Data)
{
 800251a:	b580      	push	{r7, lr}
 800251c:	b082      	sub	sp, #8
 800251e:	af00      	add	r7, sp, #0
 8002520:	6078      	str	r0, [r7, #4]
 8002522:	460b      	mov	r3, r1
 8002524:	70fb      	strb	r3, [r7, #3]
 8002526:	4613      	mov	r3, r2
 8002528:	70bb      	strb	r3, [r7, #2]
  if (lis2dw12_write_reg(&(pObj->Ctx), Reg, &Data, 1) != LIS2DW12_OK)
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	f103 0020 	add.w	r0, r3, #32
 8002530:	1cba      	adds	r2, r7, #2
 8002532:	78f9      	ldrb	r1, [r7, #3]
 8002534:	2301      	movs	r3, #1
 8002536:	f000 fa07 	bl	8002948 <lis2dw12_write_reg>
 800253a:	4603      	mov	r3, r0
 800253c:	2b00      	cmp	r3, #0
 800253e:	d002      	beq.n	8002546 <LIS2DW12_Write_Reg+0x2c>
  {
    return LIS2DW12_ERROR;
 8002540:	f04f 33ff 	mov.w	r3, #4294967295
 8002544:	e000      	b.n	8002548 <LIS2DW12_Write_Reg+0x2e>
  }

  return LIS2DW12_OK;
 8002546:	2300      	movs	r3, #0
}
 8002548:	4618      	mov	r0, r3
 800254a:	3708      	adds	r7, #8
 800254c:	46bd      	mov	sp, r7
 800254e:	bd80      	pop	{r7, pc}

08002550 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled>:
  * @param  Noise the low noise option
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LIS2DW12_ACC_SetOutputDataRate_When_Enabled(LIS2DW12_Object_t *pObj, float Odr,
                                                           LIS2DW12_Operating_Mode_t Mode, LIS2DW12_Low_Noise_t Noise)
{
 8002550:	b580      	push	{r7, lr}
 8002552:	b086      	sub	sp, #24
 8002554:	af00      	add	r7, sp, #0
 8002556:	60f8      	str	r0, [r7, #12]
 8002558:	ed87 0a02 	vstr	s0, [r7, #8]
 800255c:	460b      	mov	r3, r1
 800255e:	71fb      	strb	r3, [r7, #7]
 8002560:	4613      	mov	r3, r2
 8002562:	71bb      	strb	r3, [r7, #6]
  lis2dw12_odr_t new_odr;
  lis2dw12_mode_t new_power_mode;

  switch (Mode)
 8002564:	79fb      	ldrb	r3, [r7, #7]
 8002566:	3b01      	subs	r3, #1
 8002568:	2b03      	cmp	r3, #3
 800256a:	d80b      	bhi.n	8002584 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x34>
 800256c:	a201      	add	r2, pc, #4	; (adr r2, 8002574 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x24>)
 800256e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002572:	bf00      	nop
 8002574:	080025b1 	.word	0x080025b1
 8002578:	080025dd 	.word	0x080025dd
 800257c:	08002609 	.word	0x08002609
 8002580:	08002635 	.word	0x08002635
  {
    case LIS2DW12_HIGH_PERFORMANCE_MODE:
    default:
      switch (Noise)
 8002584:	79bb      	ldrb	r3, [r7, #6]
 8002586:	2b01      	cmp	r3, #1
 8002588:	d002      	beq.n	8002590 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x40>
      {
        case LIS2DW12_LOW_NOISE_DISABLE:
        default:
          new_power_mode = LIS2DW12_HIGH_PERFORMANCE;
 800258a:	2304      	movs	r3, #4
 800258c:	75fb      	strb	r3, [r7, #23]
          break;
 800258e:	e002      	b.n	8002596 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x46>
        case LIS2DW12_LOW_NOISE_ENABLE:
          new_power_mode = LIS2DW12_HIGH_PERFORMANCE_LOW_NOISE;
 8002590:	2314      	movs	r3, #20
 8002592:	75fb      	strb	r3, [r7, #23]
          break;
 8002594:	bf00      	nop
      }

      /* If High Performance mode minimum ODR is 12.5Hz */
      if (Odr < 12.5f)
 8002596:	edd7 7a02 	vldr	s15, [r7, #8]
 800259a:	eeb2 7a09 	vmov.f32	s14, #41	; 0x41480000  12.5
 800259e:	eef4 7ac7 	vcmpe.f32	s15, s14
 80025a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80025a6:	d400      	bmi.n	80025aa <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x5a>
      {
        Odr = 12.5f;
      }
      break;
 80025a8:	e05a      	b.n	8002660 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x110>
        Odr = 12.5f;
 80025aa:	4b6f      	ldr	r3, [pc, #444]	; (8002768 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x218>)
 80025ac:	60bb      	str	r3, [r7, #8]
      break;
 80025ae:	e057      	b.n	8002660 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x110>
    case LIS2DW12_LOW_POWER_MODE4:
      switch (Noise)
 80025b0:	79bb      	ldrb	r3, [r7, #6]
 80025b2:	2b01      	cmp	r3, #1
 80025b4:	d002      	beq.n	80025bc <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x6c>
      {
        case LIS2DW12_LOW_NOISE_DISABLE:
        default:
          new_power_mode = LIS2DW12_CONT_LOW_PWR_4;
 80025b6:	2303      	movs	r3, #3
 80025b8:	75fb      	strb	r3, [r7, #23]
          break;
 80025ba:	e002      	b.n	80025c2 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x72>
        case LIS2DW12_LOW_NOISE_ENABLE:
          new_power_mode = LIS2DW12_CONT_LOW_PWR_LOW_NOISE_4;
 80025bc:	2313      	movs	r3, #19
 80025be:	75fb      	strb	r3, [r7, #23]
          break;
 80025c0:	bf00      	nop
      }

      /* If Low Power mode maximum ODR is 200Hz */
      if (Odr > 200.0f)
 80025c2:	edd7 7a02 	vldr	s15, [r7, #8]
 80025c6:	ed9f 7a69 	vldr	s14, [pc, #420]	; 800276c <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x21c>
 80025ca:	eef4 7ac7 	vcmpe.f32	s15, s14
 80025ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80025d2:	dc00      	bgt.n	80025d6 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x86>
      {
        Odr = 200.0f;
      }
      break;
 80025d4:	e044      	b.n	8002660 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x110>
        Odr = 200.0f;
 80025d6:	4b66      	ldr	r3, [pc, #408]	; (8002770 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x220>)
 80025d8:	60bb      	str	r3, [r7, #8]
      break;
 80025da:	e041      	b.n	8002660 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x110>
    case LIS2DW12_LOW_POWER_MODE3:
      switch (Noise)
 80025dc:	79bb      	ldrb	r3, [r7, #6]
 80025de:	2b01      	cmp	r3, #1
 80025e0:	d002      	beq.n	80025e8 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x98>
      {
        case LIS2DW12_LOW_NOISE_DISABLE:
        default:
          new_power_mode = LIS2DW12_CONT_LOW_PWR_3;
 80025e2:	2302      	movs	r3, #2
 80025e4:	75fb      	strb	r3, [r7, #23]
          break;
 80025e6:	e002      	b.n	80025ee <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x9e>
        case LIS2DW12_LOW_NOISE_ENABLE:
          new_power_mode = LIS2DW12_CONT_LOW_PWR_LOW_NOISE_3;
 80025e8:	2312      	movs	r3, #18
 80025ea:	75fb      	strb	r3, [r7, #23]
          break;
 80025ec:	bf00      	nop
      }

      /* If Low Power mode maximum ODR is 200Hz */
      if (Odr > 200.0f)
 80025ee:	edd7 7a02 	vldr	s15, [r7, #8]
 80025f2:	ed9f 7a5e 	vldr	s14, [pc, #376]	; 800276c <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x21c>
 80025f6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80025fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80025fe:	dc00      	bgt.n	8002602 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0xb2>
      {
        Odr = 200.0f;
      }
      break;
 8002600:	e02e      	b.n	8002660 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x110>
        Odr = 200.0f;
 8002602:	4b5b      	ldr	r3, [pc, #364]	; (8002770 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x220>)
 8002604:	60bb      	str	r3, [r7, #8]
      break;
 8002606:	e02b      	b.n	8002660 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x110>
    case LIS2DW12_LOW_POWER_MODE2:
      switch (Noise)
 8002608:	79bb      	ldrb	r3, [r7, #6]
 800260a:	2b01      	cmp	r3, #1
 800260c:	d002      	beq.n	8002614 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0xc4>
      {
        case LIS2DW12_LOW_NOISE_DISABLE:
        default:
          new_power_mode = LIS2DW12_CONT_LOW_PWR_2;
 800260e:	2301      	movs	r3, #1
 8002610:	75fb      	strb	r3, [r7, #23]
          break;
 8002612:	e002      	b.n	800261a <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0xca>
        case LIS2DW12_LOW_NOISE_ENABLE:
          new_power_mode = LIS2DW12_CONT_LOW_PWR_LOW_NOISE_2;
 8002614:	2311      	movs	r3, #17
 8002616:	75fb      	strb	r3, [r7, #23]
          break;
 8002618:	bf00      	nop
      }

      /* If Low Power mode maximum ODR is 200Hz */
      if (Odr > 200.0f)
 800261a:	edd7 7a02 	vldr	s15, [r7, #8]
 800261e:	ed9f 7a53 	vldr	s14, [pc, #332]	; 800276c <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x21c>
 8002622:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002626:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800262a:	dc00      	bgt.n	800262e <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0xde>
      {
        Odr = 200.0f;
      }
      break;
 800262c:	e018      	b.n	8002660 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x110>
        Odr = 200.0f;
 800262e:	4b50      	ldr	r3, [pc, #320]	; (8002770 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x220>)
 8002630:	60bb      	str	r3, [r7, #8]
      break;
 8002632:	e015      	b.n	8002660 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x110>
    case LIS2DW12_LOW_POWER_MODE1:
      switch (Noise)
 8002634:	79bb      	ldrb	r3, [r7, #6]
 8002636:	2b01      	cmp	r3, #1
 8002638:	d002      	beq.n	8002640 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0xf0>
      {
        case LIS2DW12_LOW_NOISE_DISABLE:
        default:
          new_power_mode = LIS2DW12_CONT_LOW_PWR_12bit;
 800263a:	2300      	movs	r3, #0
 800263c:	75fb      	strb	r3, [r7, #23]
          break;
 800263e:	e002      	b.n	8002646 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0xf6>
        case LIS2DW12_LOW_NOISE_ENABLE:
          new_power_mode = LIS2DW12_CONT_LOW_PWR_LOW_NOISE_12bit;
 8002640:	2310      	movs	r3, #16
 8002642:	75fb      	strb	r3, [r7, #23]
          break;
 8002644:	bf00      	nop
      }

      /* If Low Power mode maximum ODR is 200Hz */
      if (Odr > 200.0f)
 8002646:	edd7 7a02 	vldr	s15, [r7, #8]
 800264a:	ed9f 7a48 	vldr	s14, [pc, #288]	; 800276c <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x21c>
 800264e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002652:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002656:	dc00      	bgt.n	800265a <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x10a>
      {
        Odr = 200.0f;
      }
      break;
 8002658:	e001      	b.n	800265e <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x10e>
        Odr = 200.0f;
 800265a:	4b45      	ldr	r3, [pc, #276]	; (8002770 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x220>)
 800265c:	60bb      	str	r3, [r7, #8]
      break;
 800265e:	bf00      	nop
  }

  new_odr = (Odr <=    1.6f) ? LIS2DW12_XL_ODR_1Hz6_LP_ONLY
            : (Odr <=   12.5f) ? LIS2DW12_XL_ODR_12Hz5
 8002660:	edd7 7a02 	vldr	s15, [r7, #8]
 8002664:	ed9f 7a43 	vldr	s14, [pc, #268]	; 8002774 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x224>
 8002668:	eef4 7ac7 	vcmpe.f32	s15, s14
 800266c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002670:	d801      	bhi.n	8002676 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x126>
 8002672:	2301      	movs	r3, #1
 8002674:	e04d      	b.n	8002712 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x1c2>
 8002676:	edd7 7a02 	vldr	s15, [r7, #8]
 800267a:	eeb2 7a09 	vmov.f32	s14, #41	; 0x41480000  12.5
 800267e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002682:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002686:	d801      	bhi.n	800268c <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x13c>
 8002688:	2302      	movs	r3, #2
 800268a:	e042      	b.n	8002712 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x1c2>
 800268c:	edd7 7a02 	vldr	s15, [r7, #8]
 8002690:	eeb3 7a09 	vmov.f32	s14, #57	; 0x41c80000  25.0
 8002694:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002698:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800269c:	d801      	bhi.n	80026a2 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x152>
 800269e:	2303      	movs	r3, #3
 80026a0:	e037      	b.n	8002712 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x1c2>
 80026a2:	edd7 7a02 	vldr	s15, [r7, #8]
 80026a6:	ed9f 7a34 	vldr	s14, [pc, #208]	; 8002778 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x228>
 80026aa:	eef4 7ac7 	vcmpe.f32	s15, s14
 80026ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80026b2:	d801      	bhi.n	80026b8 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x168>
 80026b4:	2304      	movs	r3, #4
 80026b6:	e02c      	b.n	8002712 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x1c2>
 80026b8:	edd7 7a02 	vldr	s15, [r7, #8]
 80026bc:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 800277c <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x22c>
 80026c0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80026c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80026c8:	d801      	bhi.n	80026ce <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x17e>
 80026ca:	2305      	movs	r3, #5
 80026cc:	e021      	b.n	8002712 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x1c2>
 80026ce:	edd7 7a02 	vldr	s15, [r7, #8]
 80026d2:	ed9f 7a26 	vldr	s14, [pc, #152]	; 800276c <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x21c>
 80026d6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80026da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80026de:	d801      	bhi.n	80026e4 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x194>
 80026e0:	2306      	movs	r3, #6
 80026e2:	e016      	b.n	8002712 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x1c2>
 80026e4:	edd7 7a02 	vldr	s15, [r7, #8]
 80026e8:	ed9f 7a25 	vldr	s14, [pc, #148]	; 8002780 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x230>
 80026ec:	eef4 7ac7 	vcmpe.f32	s15, s14
 80026f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80026f4:	d801      	bhi.n	80026fa <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x1aa>
 80026f6:	2307      	movs	r3, #7
 80026f8:	e00b      	b.n	8002712 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x1c2>
 80026fa:	edd7 7a02 	vldr	s15, [r7, #8]
 80026fe:	ed9f 7a21 	vldr	s14, [pc, #132]	; 8002784 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x234>
 8002702:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002706:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800270a:	d801      	bhi.n	8002710 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x1c0>
 800270c:	2308      	movs	r3, #8
 800270e:	e000      	b.n	8002712 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x1c2>
 8002710:	2309      	movs	r3, #9
  new_odr = (Odr <=    1.6f) ? LIS2DW12_XL_ODR_1Hz6_LP_ONLY
 8002712:	75bb      	strb	r3, [r7, #22]
            : (Odr <=  400.0f) ? LIS2DW12_XL_ODR_400Hz
            : (Odr <=  800.0f) ? LIS2DW12_XL_ODR_800Hz
            :                    LIS2DW12_XL_ODR_1k6Hz;

  /* Output data rate selection. */
  if (lis2dw12_data_rate_set(&(pObj->Ctx), new_odr) != LIS2DW12_OK)
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	3320      	adds	r3, #32
 8002718:	7dba      	ldrb	r2, [r7, #22]
 800271a:	4611      	mov	r1, r2
 800271c:	4618      	mov	r0, r3
 800271e:	f000 fa33 	bl	8002b88 <lis2dw12_data_rate_set>
 8002722:	4603      	mov	r3, r0
 8002724:	2b00      	cmp	r3, #0
 8002726:	d002      	beq.n	800272e <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x1de>
  {
    return LIS2DW12_ERROR;
 8002728:	f04f 33ff 	mov.w	r3, #4294967295
 800272c:	e018      	b.n	8002760 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x210>
  }

  /* Power mode selection. */
  if (lis2dw12_power_mode_set(&(pObj->Ctx), new_power_mode) != LIS2DW12_OK)
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	3320      	adds	r3, #32
 8002732:	7dfa      	ldrb	r2, [r7, #23]
 8002734:	4611      	mov	r1, r2
 8002736:	4618      	mov	r0, r3
 8002738:	f000 f91e 	bl	8002978 <lis2dw12_power_mode_set>
 800273c:	4603      	mov	r3, r0
 800273e:	2b00      	cmp	r3, #0
 8002740:	d002      	beq.n	8002748 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x1f8>
  {
    return LIS2DW12_ERROR;
 8002742:	f04f 33ff 	mov.w	r3, #4294967295
 8002746:	e00b      	b.n	8002760 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x210>
  }

  /* Store the current Odr, Mode and Noise values */
  pObj->acc_odr = Odr;
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	68ba      	ldr	r2, [r7, #8]
 800274c:	635a      	str	r2, [r3, #52]	; 0x34
  pObj->acc_operating_mode = Mode;
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	79fa      	ldrb	r2, [r7, #7]
 8002752:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  pObj->acc_low_noise = Noise;
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	79ba      	ldrb	r2, [r7, #6]
 800275a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return LIS2DW12_OK;
 800275e:	2300      	movs	r3, #0
}
 8002760:	4618      	mov	r0, r3
 8002762:	3718      	adds	r7, #24
 8002764:	46bd      	mov	sp, r7
 8002766:	bd80      	pop	{r7, pc}
 8002768:	41480000 	.word	0x41480000
 800276c:	43480000 	.word	0x43480000
 8002770:	43480000 	.word	0x43480000
 8002774:	3fcccccd 	.word	0x3fcccccd
 8002778:	42480000 	.word	0x42480000
 800277c:	42c80000 	.word	0x42c80000
 8002780:	43c80000 	.word	0x43c80000
 8002784:	44480000 	.word	0x44480000

08002788 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled>:
  * @param  Noise the low noise option
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LIS2DW12_ACC_SetOutputDataRate_When_Disabled(LIS2DW12_Object_t *pObj, float Odr,
                                                            LIS2DW12_Operating_Mode_t Mode, LIS2DW12_Low_Noise_t Noise)
{
 8002788:	b480      	push	{r7}
 800278a:	b085      	sub	sp, #20
 800278c:	af00      	add	r7, sp, #0
 800278e:	60f8      	str	r0, [r7, #12]
 8002790:	ed87 0a02 	vstr	s0, [r7, #8]
 8002794:	460b      	mov	r3, r1
 8002796:	71fb      	strb	r3, [r7, #7]
 8002798:	4613      	mov	r3, r2
 800279a:	71bb      	strb	r3, [r7, #6]
  /* Store the new Odr, Mode and Noise values */
  pObj->acc_operating_mode = Mode;
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	79fa      	ldrb	r2, [r7, #7]
 80027a0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  pObj->acc_low_noise = Noise;
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	79ba      	ldrb	r2, [r7, #6]
 80027a8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  pObj->acc_odr = (Odr <=    1.6f) ?    1.6f
                  : (Odr <=   12.5f) ?   12.5f
 80027ac:	edd7 7a02 	vldr	s15, [r7, #8]
 80027b0:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 8002870 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xe8>
 80027b4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80027b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80027bc:	d801      	bhi.n	80027c2 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0x3a>
 80027be:	4b2d      	ldr	r3, [pc, #180]	; (8002874 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xec>)
 80027c0:	e04d      	b.n	800285e <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xd6>
                  : (Odr <=   25.0f) ?   25.0f
 80027c2:	edd7 7a02 	vldr	s15, [r7, #8]
 80027c6:	eeb2 7a09 	vmov.f32	s14, #41	; 0x41480000  12.5
 80027ca:	eef4 7ac7 	vcmpe.f32	s15, s14
 80027ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80027d2:	d801      	bhi.n	80027d8 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0x50>
 80027d4:	4b28      	ldr	r3, [pc, #160]	; (8002878 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xf0>)
 80027d6:	e042      	b.n	800285e <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xd6>
                  : (Odr <=   50.0f) ?   50.0f
 80027d8:	edd7 7a02 	vldr	s15, [r7, #8]
 80027dc:	eeb3 7a09 	vmov.f32	s14, #57	; 0x41c80000  25.0
 80027e0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80027e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80027e8:	d801      	bhi.n	80027ee <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0x66>
 80027ea:	4b24      	ldr	r3, [pc, #144]	; (800287c <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xf4>)
 80027ec:	e037      	b.n	800285e <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xd6>
                  : (Odr <=  100.0f) ?  100.0f
 80027ee:	edd7 7a02 	vldr	s15, [r7, #8]
 80027f2:	ed9f 7a23 	vldr	s14, [pc, #140]	; 8002880 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xf8>
 80027f6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80027fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80027fe:	d801      	bhi.n	8002804 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0x7c>
 8002800:	4b20      	ldr	r3, [pc, #128]	; (8002884 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xfc>)
 8002802:	e02c      	b.n	800285e <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xd6>
                  : (Odr <=  200.0f) ?  200.0f
 8002804:	edd7 7a02 	vldr	s15, [r7, #8]
 8002808:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 8002888 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0x100>
 800280c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002810:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002814:	d801      	bhi.n	800281a <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0x92>
 8002816:	4b1d      	ldr	r3, [pc, #116]	; (800288c <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0x104>)
 8002818:	e021      	b.n	800285e <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xd6>
                  : (Odr <=  400.0f) ?  400.0f
 800281a:	edd7 7a02 	vldr	s15, [r7, #8]
 800281e:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 8002890 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0x108>
 8002822:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002826:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800282a:	d801      	bhi.n	8002830 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xa8>
 800282c:	4b19      	ldr	r3, [pc, #100]	; (8002894 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0x10c>)
 800282e:	e016      	b.n	800285e <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xd6>
                  : (Odr <=  800.0f) ?  800.0f
 8002830:	edd7 7a02 	vldr	s15, [r7, #8]
 8002834:	ed9f 7a18 	vldr	s14, [pc, #96]	; 8002898 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0x110>
 8002838:	eef4 7ac7 	vcmpe.f32	s15, s14
 800283c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002840:	d801      	bhi.n	8002846 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xbe>
 8002842:	4b16      	ldr	r3, [pc, #88]	; (800289c <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0x114>)
 8002844:	e00b      	b.n	800285e <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xd6>
                  :                    1600.0f;
 8002846:	edd7 7a02 	vldr	s15, [r7, #8]
 800284a:	ed9f 7a15 	vldr	s14, [pc, #84]	; 80028a0 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0x118>
 800284e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002852:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002856:	d801      	bhi.n	800285c <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xd4>
 8002858:	4b12      	ldr	r3, [pc, #72]	; (80028a4 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0x11c>)
 800285a:	e000      	b.n	800285e <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xd6>
 800285c:	4b12      	ldr	r3, [pc, #72]	; (80028a8 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0x120>)
  pObj->acc_odr = (Odr <=    1.6f) ?    1.6f
 800285e:	68fa      	ldr	r2, [r7, #12]
 8002860:	6353      	str	r3, [r2, #52]	; 0x34

  return LIS2DW12_OK;
 8002862:	2300      	movs	r3, #0
}
 8002864:	4618      	mov	r0, r3
 8002866:	3714      	adds	r7, #20
 8002868:	46bd      	mov	sp, r7
 800286a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800286e:	4770      	bx	lr
 8002870:	3fcccccd 	.word	0x3fcccccd
 8002874:	3fcccccd 	.word	0x3fcccccd
 8002878:	41480000 	.word	0x41480000
 800287c:	41c80000 	.word	0x41c80000
 8002880:	42480000 	.word	0x42480000
 8002884:	42480000 	.word	0x42480000
 8002888:	42c80000 	.word	0x42c80000
 800288c:	42c80000 	.word	0x42c80000
 8002890:	43480000 	.word	0x43480000
 8002894:	43480000 	.word	0x43480000
 8002898:	43c80000 	.word	0x43c80000
 800289c:	43c80000 	.word	0x43c80000
 80028a0:	44480000 	.word	0x44480000
 80028a4:	44480000 	.word	0x44480000
 80028a8:	44c80000 	.word	0x44c80000

080028ac <ReadRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t ReadRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 80028ac:	b590      	push	{r4, r7, lr}
 80028ae:	b087      	sub	sp, #28
 80028b0:	af00      	add	r7, sp, #0
 80028b2:	60f8      	str	r0, [r7, #12]
 80028b4:	607a      	str	r2, [r7, #4]
 80028b6:	461a      	mov	r2, r3
 80028b8:	460b      	mov	r3, r1
 80028ba:	72fb      	strb	r3, [r7, #11]
 80028bc:	4613      	mov	r3, r2
 80028be:	813b      	strh	r3, [r7, #8]
  LIS2DW12_Object_t *pObj = (LIS2DW12_Object_t *)Handle;
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	617b      	str	r3, [r7, #20]

  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 80028c4:	697b      	ldr	r3, [r7, #20]
 80028c6:	695c      	ldr	r4, [r3, #20]
 80028c8:	697b      	ldr	r3, [r7, #20]
 80028ca:	7b1b      	ldrb	r3, [r3, #12]
 80028cc:	b298      	uxth	r0, r3
 80028ce:	7afb      	ldrb	r3, [r7, #11]
 80028d0:	b299      	uxth	r1, r3
 80028d2:	893b      	ldrh	r3, [r7, #8]
 80028d4:	687a      	ldr	r2, [r7, #4]
 80028d6:	47a0      	blx	r4
 80028d8:	4603      	mov	r3, r0
}
 80028da:	4618      	mov	r0, r3
 80028dc:	371c      	adds	r7, #28
 80028de:	46bd      	mov	sp, r7
 80028e0:	bd90      	pop	{r4, r7, pc}

080028e2 <WriteRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t WriteRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 80028e2:	b590      	push	{r4, r7, lr}
 80028e4:	b087      	sub	sp, #28
 80028e6:	af00      	add	r7, sp, #0
 80028e8:	60f8      	str	r0, [r7, #12]
 80028ea:	607a      	str	r2, [r7, #4]
 80028ec:	461a      	mov	r2, r3
 80028ee:	460b      	mov	r3, r1
 80028f0:	72fb      	strb	r3, [r7, #11]
 80028f2:	4613      	mov	r3, r2
 80028f4:	813b      	strh	r3, [r7, #8]
  LIS2DW12_Object_t *pObj = (LIS2DW12_Object_t *)Handle;
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	617b      	str	r3, [r7, #20]

  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 80028fa:	697b      	ldr	r3, [r7, #20]
 80028fc:	691c      	ldr	r4, [r3, #16]
 80028fe:	697b      	ldr	r3, [r7, #20]
 8002900:	7b1b      	ldrb	r3, [r3, #12]
 8002902:	b298      	uxth	r0, r3
 8002904:	7afb      	ldrb	r3, [r7, #11]
 8002906:	b299      	uxth	r1, r3
 8002908:	893b      	ldrh	r3, [r7, #8]
 800290a:	687a      	ldr	r2, [r7, #4]
 800290c:	47a0      	blx	r4
 800290e:	4603      	mov	r3, r0
}
 8002910:	4618      	mov	r0, r3
 8002912:	371c      	adds	r7, #28
 8002914:	46bd      	mov	sp, r7
 8002916:	bd90      	pop	{r4, r7, pc}

08002918 <lis2dw12_read_reg>:
  *
  */
int32_t lis2dw12_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                          uint8_t *data,
                          uint16_t len)
{
 8002918:	b590      	push	{r4, r7, lr}
 800291a:	b087      	sub	sp, #28
 800291c:	af00      	add	r7, sp, #0
 800291e:	60f8      	str	r0, [r7, #12]
 8002920:	607a      	str	r2, [r7, #4]
 8002922:	461a      	mov	r2, r3
 8002924:	460b      	mov	r3, r1
 8002926:	72fb      	strb	r3, [r7, #11]
 8002928:	4613      	mov	r3, r2
 800292a:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	685c      	ldr	r4, [r3, #4]
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	68d8      	ldr	r0, [r3, #12]
 8002934:	893b      	ldrh	r3, [r7, #8]
 8002936:	7af9      	ldrb	r1, [r7, #11]
 8002938:	687a      	ldr	r2, [r7, #4]
 800293a:	47a0      	blx	r4
 800293c:	6178      	str	r0, [r7, #20]

  return ret;
 800293e:	697b      	ldr	r3, [r7, #20]
}
 8002940:	4618      	mov	r0, r3
 8002942:	371c      	adds	r7, #28
 8002944:	46bd      	mov	sp, r7
 8002946:	bd90      	pop	{r4, r7, pc}

08002948 <lis2dw12_write_reg>:
  *
  */
int32_t lis2dw12_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                           uint8_t *data,
                           uint16_t len)
{
 8002948:	b590      	push	{r4, r7, lr}
 800294a:	b087      	sub	sp, #28
 800294c:	af00      	add	r7, sp, #0
 800294e:	60f8      	str	r0, [r7, #12]
 8002950:	607a      	str	r2, [r7, #4]
 8002952:	461a      	mov	r2, r3
 8002954:	460b      	mov	r3, r1
 8002956:	72fb      	strb	r3, [r7, #11]
 8002958:	4613      	mov	r3, r2
 800295a:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	681c      	ldr	r4, [r3, #0]
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	68d8      	ldr	r0, [r3, #12]
 8002964:	893b      	ldrh	r3, [r7, #8]
 8002966:	7af9      	ldrb	r1, [r7, #11]
 8002968:	687a      	ldr	r2, [r7, #4]
 800296a:	47a0      	blx	r4
 800296c:	6178      	str	r0, [r7, #20]

  return ret;
 800296e:	697b      	ldr	r3, [r7, #20]
}
 8002970:	4618      	mov	r0, r3
 8002972:	371c      	adds	r7, #28
 8002974:	46bd      	mov	sp, r7
 8002976:	bd90      	pop	{r4, r7, pc}

08002978 <lis2dw12_power_mode_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_power_mode_set(stmdev_ctx_t *ctx,
                                lis2dw12_mode_t val)
{
 8002978:	b580      	push	{r7, lr}
 800297a:	b086      	sub	sp, #24
 800297c:	af00      	add	r7, sp, #0
 800297e:	6078      	str	r0, [r7, #4]
 8002980:	460b      	mov	r3, r1
 8002982:	70fb      	strb	r3, [r7, #3]
  lis2dw12_ctrl1_t ctrl1;
  lis2dw12_ctrl6_t ctrl6;
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL1, (uint8_t *) &ctrl1, 1);
 8002984:	f107 0210 	add.w	r2, r7, #16
 8002988:	2301      	movs	r3, #1
 800298a:	2120      	movs	r1, #32
 800298c:	6878      	ldr	r0, [r7, #4]
 800298e:	f7ff ffc3 	bl	8002918 <lis2dw12_read_reg>
 8002992:	6178      	str	r0, [r7, #20]

  if (ret == 0)
 8002994:	697b      	ldr	r3, [r7, #20]
 8002996:	2b00      	cmp	r3, #0
 8002998:	d118      	bne.n	80029cc <lis2dw12_power_mode_set+0x54>
  {
    ctrl1.mode = ((uint8_t) val & 0x0CU) >> 2;
 800299a:	78fb      	ldrb	r3, [r7, #3]
 800299c:	089b      	lsrs	r3, r3, #2
 800299e:	f003 0303 	and.w	r3, r3, #3
 80029a2:	b2da      	uxtb	r2, r3
 80029a4:	7c3b      	ldrb	r3, [r7, #16]
 80029a6:	f362 0383 	bfi	r3, r2, #2, #2
 80029aa:	743b      	strb	r3, [r7, #16]
    ctrl1.lp_mode = (uint8_t) val & 0x03U ;
 80029ac:	78fb      	ldrb	r3, [r7, #3]
 80029ae:	f003 0303 	and.w	r3, r3, #3
 80029b2:	b2da      	uxtb	r2, r3
 80029b4:	7c3b      	ldrb	r3, [r7, #16]
 80029b6:	f362 0301 	bfi	r3, r2, #0, #2
 80029ba:	743b      	strb	r3, [r7, #16]
    ret = lis2dw12_write_reg(ctx, LIS2DW12_CTRL1, (uint8_t *) &ctrl1, 1);
 80029bc:	f107 0210 	add.w	r2, r7, #16
 80029c0:	2301      	movs	r3, #1
 80029c2:	2120      	movs	r1, #32
 80029c4:	6878      	ldr	r0, [r7, #4]
 80029c6:	f7ff ffbf 	bl	8002948 <lis2dw12_write_reg>
 80029ca:	6178      	str	r0, [r7, #20]
  }

  if (ret == 0)
 80029cc:	697b      	ldr	r3, [r7, #20]
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d107      	bne.n	80029e2 <lis2dw12_power_mode_set+0x6a>
  {
    ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL6, (uint8_t *) &ctrl6, 1);
 80029d2:	f107 020c 	add.w	r2, r7, #12
 80029d6:	2301      	movs	r3, #1
 80029d8:	2125      	movs	r1, #37	; 0x25
 80029da:	6878      	ldr	r0, [r7, #4]
 80029dc:	f7ff ff9c 	bl	8002918 <lis2dw12_read_reg>
 80029e0:	6178      	str	r0, [r7, #20]
  }

  if (ret == 0)
 80029e2:	697b      	ldr	r3, [r7, #20]
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d110      	bne.n	8002a0a <lis2dw12_power_mode_set+0x92>
  {
    ctrl6.low_noise = ((uint8_t) val & 0x10U) >> 4;
 80029e8:	78fb      	ldrb	r3, [r7, #3]
 80029ea:	091b      	lsrs	r3, r3, #4
 80029ec:	f003 0301 	and.w	r3, r3, #1
 80029f0:	b2da      	uxtb	r2, r3
 80029f2:	7b3b      	ldrb	r3, [r7, #12]
 80029f4:	f362 0382 	bfi	r3, r2, #2, #1
 80029f8:	733b      	strb	r3, [r7, #12]
    ret = lis2dw12_write_reg(ctx, LIS2DW12_CTRL6, (uint8_t *) &ctrl6, 1);
 80029fa:	f107 020c 	add.w	r2, r7, #12
 80029fe:	2301      	movs	r3, #1
 8002a00:	2125      	movs	r1, #37	; 0x25
 8002a02:	6878      	ldr	r0, [r7, #4]
 8002a04:	f7ff ffa0 	bl	8002948 <lis2dw12_write_reg>
 8002a08:	6178      	str	r0, [r7, #20]
  }

  return ret;
 8002a0a:	697b      	ldr	r3, [r7, #20]
}
 8002a0c:	4618      	mov	r0, r3
 8002a0e:	3718      	adds	r7, #24
 8002a10:	46bd      	mov	sp, r7
 8002a12:	bd80      	pop	{r7, pc}

08002a14 <lis2dw12_power_mode_get>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_power_mode_get(stmdev_ctx_t *ctx,
                                lis2dw12_mode_t *val)
{
 8002a14:	b580      	push	{r7, lr}
 8002a16:	b086      	sub	sp, #24
 8002a18:	af00      	add	r7, sp, #0
 8002a1a:	6078      	str	r0, [r7, #4]
 8002a1c:	6039      	str	r1, [r7, #0]
  lis2dw12_ctrl1_t ctrl1;
  lis2dw12_ctrl6_t ctrl6;
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL1, (uint8_t *) &ctrl1, 1);
 8002a1e:	f107 0210 	add.w	r2, r7, #16
 8002a22:	2301      	movs	r3, #1
 8002a24:	2120      	movs	r1, #32
 8002a26:	6878      	ldr	r0, [r7, #4]
 8002a28:	f7ff ff76 	bl	8002918 <lis2dw12_read_reg>
 8002a2c:	6178      	str	r0, [r7, #20]

  if (ret == 0)
 8002a2e:	697b      	ldr	r3, [r7, #20]
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	f040 80a3 	bne.w	8002b7c <lis2dw12_power_mode_get+0x168>
  {
    ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL6, (uint8_t *) &ctrl6, 1);
 8002a36:	f107 020c 	add.w	r2, r7, #12
 8002a3a:	2301      	movs	r3, #1
 8002a3c:	2125      	movs	r1, #37	; 0x25
 8002a3e:	6878      	ldr	r0, [r7, #4]
 8002a40:	f7ff ff6a 	bl	8002918 <lis2dw12_read_reg>
 8002a44:	6178      	str	r0, [r7, #20]

    switch (((ctrl6.low_noise << 4) + (ctrl1.mode << 2) +
 8002a46:	7b3b      	ldrb	r3, [r7, #12]
 8002a48:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8002a4c:	b2db      	uxtb	r3, r3
 8002a4e:	011a      	lsls	r2, r3, #4
 8002a50:	7c3b      	ldrb	r3, [r7, #16]
 8002a52:	f3c3 0381 	ubfx	r3, r3, #2, #2
 8002a56:	b2db      	uxtb	r3, r3
 8002a58:	009b      	lsls	r3, r3, #2
 8002a5a:	4413      	add	r3, r2
             ctrl1.lp_mode))
 8002a5c:	7c3a      	ldrb	r2, [r7, #16]
 8002a5e:	f3c2 0201 	ubfx	r2, r2, #0, #2
 8002a62:	b2d2      	uxtb	r2, r2
    switch (((ctrl6.low_noise << 4) + (ctrl1.mode << 2) +
 8002a64:	4413      	add	r3, r2
 8002a66:	2b1b      	cmp	r3, #27
 8002a68:	f200 8084 	bhi.w	8002b74 <lis2dw12_power_mode_get+0x160>
 8002a6c:	a201      	add	r2, pc, #4	; (adr r2, 8002a74 <lis2dw12_power_mode_get+0x60>)
 8002a6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a72:	bf00      	nop
 8002a74:	08002b05 	.word	0x08002b05
 8002a78:	08002afd 	.word	0x08002afd
 8002a7c:	08002af5 	.word	0x08002af5
 8002a80:	08002aed 	.word	0x08002aed
 8002a84:	08002ae5 	.word	0x08002ae5
 8002a88:	08002b75 	.word	0x08002b75
 8002a8c:	08002b75 	.word	0x08002b75
 8002a90:	08002b75 	.word	0x08002b75
 8002a94:	08002b25 	.word	0x08002b25
 8002a98:	08002b1d 	.word	0x08002b1d
 8002a9c:	08002b15 	.word	0x08002b15
 8002aa0:	08002b0d 	.word	0x08002b0d
 8002aa4:	08002b75 	.word	0x08002b75
 8002aa8:	08002b75 	.word	0x08002b75
 8002aac:	08002b75 	.word	0x08002b75
 8002ab0:	08002b75 	.word	0x08002b75
 8002ab4:	08002b4d 	.word	0x08002b4d
 8002ab8:	08002b45 	.word	0x08002b45
 8002abc:	08002b3d 	.word	0x08002b3d
 8002ac0:	08002b35 	.word	0x08002b35
 8002ac4:	08002b2d 	.word	0x08002b2d
 8002ac8:	08002b75 	.word	0x08002b75
 8002acc:	08002b75 	.word	0x08002b75
 8002ad0:	08002b75 	.word	0x08002b75
 8002ad4:	08002b6d 	.word	0x08002b6d
 8002ad8:	08002b65 	.word	0x08002b65
 8002adc:	08002b5d 	.word	0x08002b5d
 8002ae0:	08002b55 	.word	0x08002b55
    {
      case LIS2DW12_HIGH_PERFORMANCE:
        *val = LIS2DW12_HIGH_PERFORMANCE;
 8002ae4:	683b      	ldr	r3, [r7, #0]
 8002ae6:	2204      	movs	r2, #4
 8002ae8:	701a      	strb	r2, [r3, #0]
        break;
 8002aea:	e048      	b.n	8002b7e <lis2dw12_power_mode_get+0x16a>

      case LIS2DW12_CONT_LOW_PWR_4:
        *val = LIS2DW12_CONT_LOW_PWR_4;
 8002aec:	683b      	ldr	r3, [r7, #0]
 8002aee:	2203      	movs	r2, #3
 8002af0:	701a      	strb	r2, [r3, #0]
        break;
 8002af2:	e044      	b.n	8002b7e <lis2dw12_power_mode_get+0x16a>

      case LIS2DW12_CONT_LOW_PWR_3:
        *val = LIS2DW12_CONT_LOW_PWR_3;
 8002af4:	683b      	ldr	r3, [r7, #0]
 8002af6:	2202      	movs	r2, #2
 8002af8:	701a      	strb	r2, [r3, #0]
        break;
 8002afa:	e040      	b.n	8002b7e <lis2dw12_power_mode_get+0x16a>

      case LIS2DW12_CONT_LOW_PWR_2:
        *val = LIS2DW12_CONT_LOW_PWR_2;
 8002afc:	683b      	ldr	r3, [r7, #0]
 8002afe:	2201      	movs	r2, #1
 8002b00:	701a      	strb	r2, [r3, #0]
        break;
 8002b02:	e03c      	b.n	8002b7e <lis2dw12_power_mode_get+0x16a>

      case LIS2DW12_CONT_LOW_PWR_12bit:
        *val = LIS2DW12_CONT_LOW_PWR_12bit;
 8002b04:	683b      	ldr	r3, [r7, #0]
 8002b06:	2200      	movs	r2, #0
 8002b08:	701a      	strb	r2, [r3, #0]
        break;
 8002b0a:	e038      	b.n	8002b7e <lis2dw12_power_mode_get+0x16a>

      case LIS2DW12_SINGLE_LOW_PWR_4:
        *val = LIS2DW12_SINGLE_LOW_PWR_4;
 8002b0c:	683b      	ldr	r3, [r7, #0]
 8002b0e:	220b      	movs	r2, #11
 8002b10:	701a      	strb	r2, [r3, #0]
        break;
 8002b12:	e034      	b.n	8002b7e <lis2dw12_power_mode_get+0x16a>

      case LIS2DW12_SINGLE_LOW_PWR_3:
        *val = LIS2DW12_SINGLE_LOW_PWR_3;
 8002b14:	683b      	ldr	r3, [r7, #0]
 8002b16:	220a      	movs	r2, #10
 8002b18:	701a      	strb	r2, [r3, #0]
        break;
 8002b1a:	e030      	b.n	8002b7e <lis2dw12_power_mode_get+0x16a>

      case LIS2DW12_SINGLE_LOW_PWR_2:
        *val = LIS2DW12_SINGLE_LOW_PWR_2;
 8002b1c:	683b      	ldr	r3, [r7, #0]
 8002b1e:	2209      	movs	r2, #9
 8002b20:	701a      	strb	r2, [r3, #0]
        break;
 8002b22:	e02c      	b.n	8002b7e <lis2dw12_power_mode_get+0x16a>

      case LIS2DW12_SINGLE_LOW_PWR_12bit:
        *val = LIS2DW12_SINGLE_LOW_PWR_12bit;
 8002b24:	683b      	ldr	r3, [r7, #0]
 8002b26:	2208      	movs	r2, #8
 8002b28:	701a      	strb	r2, [r3, #0]
        break;
 8002b2a:	e028      	b.n	8002b7e <lis2dw12_power_mode_get+0x16a>

      case LIS2DW12_HIGH_PERFORMANCE_LOW_NOISE:
        *val = LIS2DW12_HIGH_PERFORMANCE_LOW_NOISE;
 8002b2c:	683b      	ldr	r3, [r7, #0]
 8002b2e:	2214      	movs	r2, #20
 8002b30:	701a      	strb	r2, [r3, #0]
        break;
 8002b32:	e024      	b.n	8002b7e <lis2dw12_power_mode_get+0x16a>

      case LIS2DW12_CONT_LOW_PWR_LOW_NOISE_4:
        *val = LIS2DW12_CONT_LOW_PWR_LOW_NOISE_4;
 8002b34:	683b      	ldr	r3, [r7, #0]
 8002b36:	2213      	movs	r2, #19
 8002b38:	701a      	strb	r2, [r3, #0]
        break;
 8002b3a:	e020      	b.n	8002b7e <lis2dw12_power_mode_get+0x16a>

      case LIS2DW12_CONT_LOW_PWR_LOW_NOISE_3:
        *val = LIS2DW12_CONT_LOW_PWR_LOW_NOISE_3;
 8002b3c:	683b      	ldr	r3, [r7, #0]
 8002b3e:	2212      	movs	r2, #18
 8002b40:	701a      	strb	r2, [r3, #0]
        break;
 8002b42:	e01c      	b.n	8002b7e <lis2dw12_power_mode_get+0x16a>

      case LIS2DW12_CONT_LOW_PWR_LOW_NOISE_2:
        *val = LIS2DW12_CONT_LOW_PWR_LOW_NOISE_2;
 8002b44:	683b      	ldr	r3, [r7, #0]
 8002b46:	2211      	movs	r2, #17
 8002b48:	701a      	strb	r2, [r3, #0]
        break;
 8002b4a:	e018      	b.n	8002b7e <lis2dw12_power_mode_get+0x16a>

      case LIS2DW12_CONT_LOW_PWR_LOW_NOISE_12bit:
        *val = LIS2DW12_CONT_LOW_PWR_LOW_NOISE_12bit;
 8002b4c:	683b      	ldr	r3, [r7, #0]
 8002b4e:	2210      	movs	r2, #16
 8002b50:	701a      	strb	r2, [r3, #0]
        break;
 8002b52:	e014      	b.n	8002b7e <lis2dw12_power_mode_get+0x16a>

      case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_4:
        *val = LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_4;
 8002b54:	683b      	ldr	r3, [r7, #0]
 8002b56:	221b      	movs	r2, #27
 8002b58:	701a      	strb	r2, [r3, #0]
        break;
 8002b5a:	e010      	b.n	8002b7e <lis2dw12_power_mode_get+0x16a>

      case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_3:
        *val = LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_3;
 8002b5c:	683b      	ldr	r3, [r7, #0]
 8002b5e:	221a      	movs	r2, #26
 8002b60:	701a      	strb	r2, [r3, #0]
        break;
 8002b62:	e00c      	b.n	8002b7e <lis2dw12_power_mode_get+0x16a>

      case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_2:
        *val = LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_2;
 8002b64:	683b      	ldr	r3, [r7, #0]
 8002b66:	2219      	movs	r2, #25
 8002b68:	701a      	strb	r2, [r3, #0]
        break;
 8002b6a:	e008      	b.n	8002b7e <lis2dw12_power_mode_get+0x16a>

      case LIS2DW12_SINGLE_LOW_LOW_NOISE_PWR_12bit:
        *val = LIS2DW12_SINGLE_LOW_LOW_NOISE_PWR_12bit;
 8002b6c:	683b      	ldr	r3, [r7, #0]
 8002b6e:	2218      	movs	r2, #24
 8002b70:	701a      	strb	r2, [r3, #0]
        break;
 8002b72:	e004      	b.n	8002b7e <lis2dw12_power_mode_get+0x16a>

      default:
        *val = LIS2DW12_HIGH_PERFORMANCE;
 8002b74:	683b      	ldr	r3, [r7, #0]
 8002b76:	2204      	movs	r2, #4
 8002b78:	701a      	strb	r2, [r3, #0]
        break;
 8002b7a:	e000      	b.n	8002b7e <lis2dw12_power_mode_get+0x16a>
    }
  }
 8002b7c:	bf00      	nop

  return ret;
 8002b7e:	697b      	ldr	r3, [r7, #20]
}
 8002b80:	4618      	mov	r0, r3
 8002b82:	3718      	adds	r7, #24
 8002b84:	46bd      	mov	sp, r7
 8002b86:	bd80      	pop	{r7, pc}

08002b88 <lis2dw12_data_rate_set>:
  * @param  val      change the values of odr in reg CTRL1
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_data_rate_set(stmdev_ctx_t *ctx, lis2dw12_odr_t val)
{
 8002b88:	b580      	push	{r7, lr}
 8002b8a:	b086      	sub	sp, #24
 8002b8c:	af00      	add	r7, sp, #0
 8002b8e:	6078      	str	r0, [r7, #4]
 8002b90:	460b      	mov	r3, r1
 8002b92:	70fb      	strb	r3, [r7, #3]
  lis2dw12_ctrl1_t ctrl1;
  lis2dw12_ctrl3_t ctrl3;
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL1, (uint8_t *) &ctrl1, 1);
 8002b94:	f107 0210 	add.w	r2, r7, #16
 8002b98:	2301      	movs	r3, #1
 8002b9a:	2120      	movs	r1, #32
 8002b9c:	6878      	ldr	r0, [r7, #4]
 8002b9e:	f7ff febb 	bl	8002918 <lis2dw12_read_reg>
 8002ba2:	6178      	str	r0, [r7, #20]

  if (ret == 0)
 8002ba4:	697b      	ldr	r3, [r7, #20]
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d10f      	bne.n	8002bca <lis2dw12_data_rate_set+0x42>
  {
    ctrl1.odr = (uint8_t) val;
 8002baa:	78fb      	ldrb	r3, [r7, #3]
 8002bac:	f003 030f 	and.w	r3, r3, #15
 8002bb0:	b2da      	uxtb	r2, r3
 8002bb2:	7c3b      	ldrb	r3, [r7, #16]
 8002bb4:	f362 1307 	bfi	r3, r2, #4, #4
 8002bb8:	743b      	strb	r3, [r7, #16]
    ret = lis2dw12_write_reg(ctx, LIS2DW12_CTRL1, (uint8_t *) &ctrl1, 1);
 8002bba:	f107 0210 	add.w	r2, r7, #16
 8002bbe:	2301      	movs	r3, #1
 8002bc0:	2120      	movs	r1, #32
 8002bc2:	6878      	ldr	r0, [r7, #4]
 8002bc4:	f7ff fec0 	bl	8002948 <lis2dw12_write_reg>
 8002bc8:	6178      	str	r0, [r7, #20]
  }

  if (ret == 0)
 8002bca:	697b      	ldr	r3, [r7, #20]
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d107      	bne.n	8002be0 <lis2dw12_data_rate_set+0x58>
  {
    ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL3, (uint8_t *) &ctrl3, 1);
 8002bd0:	f107 020c 	add.w	r2, r7, #12
 8002bd4:	2301      	movs	r3, #1
 8002bd6:	2122      	movs	r1, #34	; 0x22
 8002bd8:	6878      	ldr	r0, [r7, #4]
 8002bda:	f7ff fe9d 	bl	8002918 <lis2dw12_read_reg>
 8002bde:	6178      	str	r0, [r7, #20]
  }

  if (ret == 0)
 8002be0:	697b      	ldr	r3, [r7, #20]
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d110      	bne.n	8002c08 <lis2dw12_data_rate_set+0x80>
  {
    ctrl3.slp_mode = ((uint8_t) val & 0x30U) >> 4;
 8002be6:	78fb      	ldrb	r3, [r7, #3]
 8002be8:	091b      	lsrs	r3, r3, #4
 8002bea:	f003 0303 	and.w	r3, r3, #3
 8002bee:	b2da      	uxtb	r2, r3
 8002bf0:	7b3b      	ldrb	r3, [r7, #12]
 8002bf2:	f362 0301 	bfi	r3, r2, #0, #2
 8002bf6:	733b      	strb	r3, [r7, #12]
    ret = lis2dw12_write_reg(ctx, LIS2DW12_CTRL3, (uint8_t *) &ctrl3, 1);
 8002bf8:	f107 020c 	add.w	r2, r7, #12
 8002bfc:	2301      	movs	r3, #1
 8002bfe:	2122      	movs	r1, #34	; 0x22
 8002c00:	6878      	ldr	r0, [r7, #4]
 8002c02:	f7ff fea1 	bl	8002948 <lis2dw12_write_reg>
 8002c06:	6178      	str	r0, [r7, #20]
  }

  return ret;
 8002c08:	697b      	ldr	r3, [r7, #20]
}
 8002c0a:	4618      	mov	r0, r3
 8002c0c:	3718      	adds	r7, #24
 8002c0e:	46bd      	mov	sp, r7
 8002c10:	bd80      	pop	{r7, pc}
	...

08002c14 <lis2dw12_data_rate_get>:
  * @param  val      Get the values of odr in reg CTRL1
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_data_rate_get(stmdev_ctx_t *ctx, lis2dw12_odr_t *val)
{
 8002c14:	b580      	push	{r7, lr}
 8002c16:	b086      	sub	sp, #24
 8002c18:	af00      	add	r7, sp, #0
 8002c1a:	6078      	str	r0, [r7, #4]
 8002c1c:	6039      	str	r1, [r7, #0]
  lis2dw12_ctrl1_t ctrl1;
  lis2dw12_ctrl3_t ctrl3;
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL1, (uint8_t *) &ctrl1, 1);
 8002c1e:	f107 0210 	add.w	r2, r7, #16
 8002c22:	2301      	movs	r3, #1
 8002c24:	2120      	movs	r1, #32
 8002c26:	6878      	ldr	r0, [r7, #4]
 8002c28:	f7ff fe76 	bl	8002918 <lis2dw12_read_reg>
 8002c2c:	6178      	str	r0, [r7, #20]

  if (ret == 0)
 8002c2e:	697b      	ldr	r3, [r7, #20]
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	f040 80b3 	bne.w	8002d9c <lis2dw12_data_rate_get+0x188>
  {
    ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL3, (uint8_t *) &ctrl3, 1);
 8002c36:	f107 020c 	add.w	r2, r7, #12
 8002c3a:	2301      	movs	r3, #1
 8002c3c:	2122      	movs	r1, #34	; 0x22
 8002c3e:	6878      	ldr	r0, [r7, #4]
 8002c40:	f7ff fe6a 	bl	8002918 <lis2dw12_read_reg>
 8002c44:	6178      	str	r0, [r7, #20]

    switch ((ctrl3.slp_mode << 4) + ctrl1.odr)
 8002c46:	7b3b      	ldrb	r3, [r7, #12]
 8002c48:	f3c3 0301 	ubfx	r3, r3, #0, #2
 8002c4c:	b2db      	uxtb	r3, r3
 8002c4e:	011b      	lsls	r3, r3, #4
 8002c50:	7c3a      	ldrb	r2, [r7, #16]
 8002c52:	f3c2 1203 	ubfx	r2, r2, #4, #4
 8002c56:	b2d2      	uxtb	r2, r2
 8002c58:	4413      	add	r3, r2
 8002c5a:	2b32      	cmp	r3, #50	; 0x32
 8002c5c:	f200 809a 	bhi.w	8002d94 <lis2dw12_data_rate_get+0x180>
 8002c60:	a201      	add	r2, pc, #4	; (adr r2, 8002c68 <lis2dw12_data_rate_get+0x54>)
 8002c62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c66:	bf00      	nop
 8002c68:	08002d35 	.word	0x08002d35
 8002c6c:	08002d3d 	.word	0x08002d3d
 8002c70:	08002d45 	.word	0x08002d45
 8002c74:	08002d4d 	.word	0x08002d4d
 8002c78:	08002d55 	.word	0x08002d55
 8002c7c:	08002d5d 	.word	0x08002d5d
 8002c80:	08002d65 	.word	0x08002d65
 8002c84:	08002d6d 	.word	0x08002d6d
 8002c88:	08002d75 	.word	0x08002d75
 8002c8c:	08002d7d 	.word	0x08002d7d
 8002c90:	08002d95 	.word	0x08002d95
 8002c94:	08002d95 	.word	0x08002d95
 8002c98:	08002d95 	.word	0x08002d95
 8002c9c:	08002d95 	.word	0x08002d95
 8002ca0:	08002d95 	.word	0x08002d95
 8002ca4:	08002d95 	.word	0x08002d95
 8002ca8:	08002d95 	.word	0x08002d95
 8002cac:	08002d95 	.word	0x08002d95
 8002cb0:	08002d8d 	.word	0x08002d8d
 8002cb4:	08002d95 	.word	0x08002d95
 8002cb8:	08002d95 	.word	0x08002d95
 8002cbc:	08002d95 	.word	0x08002d95
 8002cc0:	08002d95 	.word	0x08002d95
 8002cc4:	08002d95 	.word	0x08002d95
 8002cc8:	08002d95 	.word	0x08002d95
 8002ccc:	08002d95 	.word	0x08002d95
 8002cd0:	08002d95 	.word	0x08002d95
 8002cd4:	08002d95 	.word	0x08002d95
 8002cd8:	08002d95 	.word	0x08002d95
 8002cdc:	08002d95 	.word	0x08002d95
 8002ce0:	08002d95 	.word	0x08002d95
 8002ce4:	08002d95 	.word	0x08002d95
 8002ce8:	08002d95 	.word	0x08002d95
 8002cec:	08002d95 	.word	0x08002d95
 8002cf0:	08002d95 	.word	0x08002d95
 8002cf4:	08002d95 	.word	0x08002d95
 8002cf8:	08002d95 	.word	0x08002d95
 8002cfc:	08002d95 	.word	0x08002d95
 8002d00:	08002d95 	.word	0x08002d95
 8002d04:	08002d95 	.word	0x08002d95
 8002d08:	08002d95 	.word	0x08002d95
 8002d0c:	08002d95 	.word	0x08002d95
 8002d10:	08002d95 	.word	0x08002d95
 8002d14:	08002d95 	.word	0x08002d95
 8002d18:	08002d95 	.word	0x08002d95
 8002d1c:	08002d95 	.word	0x08002d95
 8002d20:	08002d95 	.word	0x08002d95
 8002d24:	08002d95 	.word	0x08002d95
 8002d28:	08002d95 	.word	0x08002d95
 8002d2c:	08002d95 	.word	0x08002d95
 8002d30:	08002d85 	.word	0x08002d85
    {
      case LIS2DW12_XL_ODR_OFF:
        *val = LIS2DW12_XL_ODR_OFF;
 8002d34:	683b      	ldr	r3, [r7, #0]
 8002d36:	2200      	movs	r2, #0
 8002d38:	701a      	strb	r2, [r3, #0]
        break;
 8002d3a:	e030      	b.n	8002d9e <lis2dw12_data_rate_get+0x18a>

      case LIS2DW12_XL_ODR_1Hz6_LP_ONLY:
        *val = LIS2DW12_XL_ODR_1Hz6_LP_ONLY;
 8002d3c:	683b      	ldr	r3, [r7, #0]
 8002d3e:	2201      	movs	r2, #1
 8002d40:	701a      	strb	r2, [r3, #0]
        break;
 8002d42:	e02c      	b.n	8002d9e <lis2dw12_data_rate_get+0x18a>

      case LIS2DW12_XL_ODR_12Hz5:
        *val = LIS2DW12_XL_ODR_12Hz5;
 8002d44:	683b      	ldr	r3, [r7, #0]
 8002d46:	2202      	movs	r2, #2
 8002d48:	701a      	strb	r2, [r3, #0]
        break;
 8002d4a:	e028      	b.n	8002d9e <lis2dw12_data_rate_get+0x18a>

      case LIS2DW12_XL_ODR_25Hz:
        *val = LIS2DW12_XL_ODR_25Hz;
 8002d4c:	683b      	ldr	r3, [r7, #0]
 8002d4e:	2203      	movs	r2, #3
 8002d50:	701a      	strb	r2, [r3, #0]
        break;
 8002d52:	e024      	b.n	8002d9e <lis2dw12_data_rate_get+0x18a>

      case LIS2DW12_XL_ODR_50Hz:
        *val = LIS2DW12_XL_ODR_50Hz;
 8002d54:	683b      	ldr	r3, [r7, #0]
 8002d56:	2204      	movs	r2, #4
 8002d58:	701a      	strb	r2, [r3, #0]
        break;
 8002d5a:	e020      	b.n	8002d9e <lis2dw12_data_rate_get+0x18a>

      case LIS2DW12_XL_ODR_100Hz:
        *val = LIS2DW12_XL_ODR_100Hz;
 8002d5c:	683b      	ldr	r3, [r7, #0]
 8002d5e:	2205      	movs	r2, #5
 8002d60:	701a      	strb	r2, [r3, #0]
        break;
 8002d62:	e01c      	b.n	8002d9e <lis2dw12_data_rate_get+0x18a>

      case LIS2DW12_XL_ODR_200Hz:
        *val = LIS2DW12_XL_ODR_200Hz;
 8002d64:	683b      	ldr	r3, [r7, #0]
 8002d66:	2206      	movs	r2, #6
 8002d68:	701a      	strb	r2, [r3, #0]
        break;
 8002d6a:	e018      	b.n	8002d9e <lis2dw12_data_rate_get+0x18a>

      case LIS2DW12_XL_ODR_400Hz:
        *val = LIS2DW12_XL_ODR_400Hz;
 8002d6c:	683b      	ldr	r3, [r7, #0]
 8002d6e:	2207      	movs	r2, #7
 8002d70:	701a      	strb	r2, [r3, #0]
        break;
 8002d72:	e014      	b.n	8002d9e <lis2dw12_data_rate_get+0x18a>

      case LIS2DW12_XL_ODR_800Hz:
        *val = LIS2DW12_XL_ODR_800Hz;
 8002d74:	683b      	ldr	r3, [r7, #0]
 8002d76:	2208      	movs	r2, #8
 8002d78:	701a      	strb	r2, [r3, #0]
        break;
 8002d7a:	e010      	b.n	8002d9e <lis2dw12_data_rate_get+0x18a>

      case LIS2DW12_XL_ODR_1k6Hz:
        *val = LIS2DW12_XL_ODR_1k6Hz;
 8002d7c:	683b      	ldr	r3, [r7, #0]
 8002d7e:	2209      	movs	r2, #9
 8002d80:	701a      	strb	r2, [r3, #0]
        break;
 8002d82:	e00c      	b.n	8002d9e <lis2dw12_data_rate_get+0x18a>

      case LIS2DW12_XL_SET_SW_TRIG:
        *val = LIS2DW12_XL_SET_SW_TRIG;
 8002d84:	683b      	ldr	r3, [r7, #0]
 8002d86:	2232      	movs	r2, #50	; 0x32
 8002d88:	701a      	strb	r2, [r3, #0]
        break;
 8002d8a:	e008      	b.n	8002d9e <lis2dw12_data_rate_get+0x18a>

      case LIS2DW12_XL_SET_PIN_TRIG:
        *val = LIS2DW12_XL_SET_PIN_TRIG;
 8002d8c:	683b      	ldr	r3, [r7, #0]
 8002d8e:	2212      	movs	r2, #18
 8002d90:	701a      	strb	r2, [r3, #0]
        break;
 8002d92:	e004      	b.n	8002d9e <lis2dw12_data_rate_get+0x18a>

      default:
        *val = LIS2DW12_XL_ODR_OFF;
 8002d94:	683b      	ldr	r3, [r7, #0]
 8002d96:	2200      	movs	r2, #0
 8002d98:	701a      	strb	r2, [r3, #0]
        break;
 8002d9a:	e000      	b.n	8002d9e <lis2dw12_data_rate_get+0x18a>
    }
  }
 8002d9c:	bf00      	nop

  return ret;
 8002d9e:	697b      	ldr	r3, [r7, #20]
}
 8002da0:	4618      	mov	r0, r3
 8002da2:	3718      	adds	r7, #24
 8002da4:	46bd      	mov	sp, r7
 8002da6:	bd80      	pop	{r7, pc}

08002da8 <lis2dw12_block_data_update_set>:
  * @param  val      change the values of bdu in reg CTRL2
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8002da8:	b580      	push	{r7, lr}
 8002daa:	b084      	sub	sp, #16
 8002dac:	af00      	add	r7, sp, #0
 8002dae:	6078      	str	r0, [r7, #4]
 8002db0:	460b      	mov	r3, r1
 8002db2:	70fb      	strb	r3, [r7, #3]
  lis2dw12_ctrl2_t reg;
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL2, (uint8_t *) &reg, 1);
 8002db4:	f107 0208 	add.w	r2, r7, #8
 8002db8:	2301      	movs	r3, #1
 8002dba:	2121      	movs	r1, #33	; 0x21
 8002dbc:	6878      	ldr	r0, [r7, #4]
 8002dbe:	f7ff fdab 	bl	8002918 <lis2dw12_read_reg>
 8002dc2:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d10f      	bne.n	8002dea <lis2dw12_block_data_update_set+0x42>
  {
    reg.bdu = val;
 8002dca:	78fb      	ldrb	r3, [r7, #3]
 8002dcc:	f003 0301 	and.w	r3, r3, #1
 8002dd0:	b2da      	uxtb	r2, r3
 8002dd2:	7a3b      	ldrb	r3, [r7, #8]
 8002dd4:	f362 03c3 	bfi	r3, r2, #3, #1
 8002dd8:	723b      	strb	r3, [r7, #8]
    ret = lis2dw12_write_reg(ctx, LIS2DW12_CTRL2, (uint8_t *) &reg, 1);
 8002dda:	f107 0208 	add.w	r2, r7, #8
 8002dde:	2301      	movs	r3, #1
 8002de0:	2121      	movs	r1, #33	; 0x21
 8002de2:	6878      	ldr	r0, [r7, #4]
 8002de4:	f7ff fdb0 	bl	8002948 <lis2dw12_write_reg>
 8002de8:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8002dea:	68fb      	ldr	r3, [r7, #12]
}
 8002dec:	4618      	mov	r0, r3
 8002dee:	3710      	adds	r7, #16
 8002df0:	46bd      	mov	sp, r7
 8002df2:	bd80      	pop	{r7, pc}

08002df4 <lis2dw12_full_scale_set>:
  * @param  val      change the values of fs in reg CTRL6
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_full_scale_set(stmdev_ctx_t *ctx, lis2dw12_fs_t val)
{
 8002df4:	b580      	push	{r7, lr}
 8002df6:	b084      	sub	sp, #16
 8002df8:	af00      	add	r7, sp, #0
 8002dfa:	6078      	str	r0, [r7, #4]
 8002dfc:	460b      	mov	r3, r1
 8002dfe:	70fb      	strb	r3, [r7, #3]
  lis2dw12_ctrl6_t reg;
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL6, (uint8_t *) &reg, 1);
 8002e00:	f107 0208 	add.w	r2, r7, #8
 8002e04:	2301      	movs	r3, #1
 8002e06:	2125      	movs	r1, #37	; 0x25
 8002e08:	6878      	ldr	r0, [r7, #4]
 8002e0a:	f7ff fd85 	bl	8002918 <lis2dw12_read_reg>
 8002e0e:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d10f      	bne.n	8002e36 <lis2dw12_full_scale_set+0x42>
  {
    reg.fs = (uint8_t) val;
 8002e16:	78fb      	ldrb	r3, [r7, #3]
 8002e18:	f003 0303 	and.w	r3, r3, #3
 8002e1c:	b2da      	uxtb	r2, r3
 8002e1e:	7a3b      	ldrb	r3, [r7, #8]
 8002e20:	f362 1305 	bfi	r3, r2, #4, #2
 8002e24:	723b      	strb	r3, [r7, #8]
    ret = lis2dw12_write_reg(ctx, LIS2DW12_CTRL6, (uint8_t *) &reg, 1);
 8002e26:	f107 0208 	add.w	r2, r7, #8
 8002e2a:	2301      	movs	r3, #1
 8002e2c:	2125      	movs	r1, #37	; 0x25
 8002e2e:	6878      	ldr	r0, [r7, #4]
 8002e30:	f7ff fd8a 	bl	8002948 <lis2dw12_write_reg>
 8002e34:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8002e36:	68fb      	ldr	r3, [r7, #12]
}
 8002e38:	4618      	mov	r0, r3
 8002e3a:	3710      	adds	r7, #16
 8002e3c:	46bd      	mov	sp, r7
 8002e3e:	bd80      	pop	{r7, pc}

08002e40 <lis2dw12_full_scale_get>:
  * @param  val      Get the values of fs in reg CTRL6
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_full_scale_get(stmdev_ctx_t *ctx, lis2dw12_fs_t *val)
{
 8002e40:	b580      	push	{r7, lr}
 8002e42:	b084      	sub	sp, #16
 8002e44:	af00      	add	r7, sp, #0
 8002e46:	6078      	str	r0, [r7, #4]
 8002e48:	6039      	str	r1, [r7, #0]
  lis2dw12_ctrl6_t reg;
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL6, (uint8_t *) &reg, 1);
 8002e4a:	f107 0208 	add.w	r2, r7, #8
 8002e4e:	2301      	movs	r3, #1
 8002e50:	2125      	movs	r1, #37	; 0x25
 8002e52:	6878      	ldr	r0, [r7, #4]
 8002e54:	f7ff fd60 	bl	8002918 <lis2dw12_read_reg>
 8002e58:	60f8      	str	r0, [r7, #12]

  switch (reg.fs)
 8002e5a:	7a3b      	ldrb	r3, [r7, #8]
 8002e5c:	f3c3 1301 	ubfx	r3, r3, #4, #2
 8002e60:	b2db      	uxtb	r3, r3
 8002e62:	2b03      	cmp	r3, #3
 8002e64:	d81a      	bhi.n	8002e9c <lis2dw12_full_scale_get+0x5c>
 8002e66:	a201      	add	r2, pc, #4	; (adr r2, 8002e6c <lis2dw12_full_scale_get+0x2c>)
 8002e68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e6c:	08002e7d 	.word	0x08002e7d
 8002e70:	08002e85 	.word	0x08002e85
 8002e74:	08002e8d 	.word	0x08002e8d
 8002e78:	08002e95 	.word	0x08002e95
  {
    case LIS2DW12_2g:
      *val = LIS2DW12_2g;
 8002e7c:	683b      	ldr	r3, [r7, #0]
 8002e7e:	2200      	movs	r2, #0
 8002e80:	701a      	strb	r2, [r3, #0]
      break;
 8002e82:	e00f      	b.n	8002ea4 <lis2dw12_full_scale_get+0x64>

    case LIS2DW12_4g:
      *val = LIS2DW12_4g;
 8002e84:	683b      	ldr	r3, [r7, #0]
 8002e86:	2201      	movs	r2, #1
 8002e88:	701a      	strb	r2, [r3, #0]
      break;
 8002e8a:	e00b      	b.n	8002ea4 <lis2dw12_full_scale_get+0x64>

    case LIS2DW12_8g:
      *val = LIS2DW12_8g;
 8002e8c:	683b      	ldr	r3, [r7, #0]
 8002e8e:	2202      	movs	r2, #2
 8002e90:	701a      	strb	r2, [r3, #0]
      break;
 8002e92:	e007      	b.n	8002ea4 <lis2dw12_full_scale_get+0x64>

    case LIS2DW12_16g:
      *val = LIS2DW12_16g;
 8002e94:	683b      	ldr	r3, [r7, #0]
 8002e96:	2203      	movs	r2, #3
 8002e98:	701a      	strb	r2, [r3, #0]
      break;
 8002e9a:	e003      	b.n	8002ea4 <lis2dw12_full_scale_get+0x64>

    default:
      *val = LIS2DW12_2g;
 8002e9c:	683b      	ldr	r3, [r7, #0]
 8002e9e:	2200      	movs	r2, #0
 8002ea0:	701a      	strb	r2, [r3, #0]
      break;
 8002ea2:	bf00      	nop
  }

  return ret;
 8002ea4:	68fb      	ldr	r3, [r7, #12]
}
 8002ea6:	4618      	mov	r0, r3
 8002ea8:	3710      	adds	r7, #16
 8002eaa:	46bd      	mov	sp, r7
 8002eac:	bd80      	pop	{r7, pc}
 8002eae:	bf00      	nop

08002eb0 <lis2dw12_acceleration_raw_get>:
  * @param  val      buffer that stores data read
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_acceleration_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 8002eb0:	b580      	push	{r7, lr}
 8002eb2:	b086      	sub	sp, #24
 8002eb4:	af00      	add	r7, sp, #0
 8002eb6:	6078      	str	r0, [r7, #4]
 8002eb8:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_OUT_X_L, buff, 6);
 8002eba:	f107 020c 	add.w	r2, r7, #12
 8002ebe:	2306      	movs	r3, #6
 8002ec0:	2128      	movs	r1, #40	; 0x28
 8002ec2:	6878      	ldr	r0, [r7, #4]
 8002ec4:	f7ff fd28 	bl	8002918 <lis2dw12_read_reg>
 8002ec8:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 8002eca:	7b7b      	ldrb	r3, [r7, #13]
 8002ecc:	b21a      	sxth	r2, r3
 8002ece:	683b      	ldr	r3, [r7, #0]
 8002ed0:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 8002ed2:	683b      	ldr	r3, [r7, #0]
 8002ed4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002ed8:	b29b      	uxth	r3, r3
 8002eda:	021b      	lsls	r3, r3, #8
 8002edc:	b29a      	uxth	r2, r3
 8002ede:	7b3b      	ldrb	r3, [r7, #12]
 8002ee0:	b29b      	uxth	r3, r3
 8002ee2:	4413      	add	r3, r2
 8002ee4:	b29b      	uxth	r3, r3
 8002ee6:	b21a      	sxth	r2, r3
 8002ee8:	683b      	ldr	r3, [r7, #0]
 8002eea:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 8002eec:	7bfa      	ldrb	r2, [r7, #15]
 8002eee:	683b      	ldr	r3, [r7, #0]
 8002ef0:	3302      	adds	r3, #2
 8002ef2:	b212      	sxth	r2, r2
 8002ef4:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 8002ef6:	683b      	ldr	r3, [r7, #0]
 8002ef8:	3302      	adds	r3, #2
 8002efa:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002efe:	b29b      	uxth	r3, r3
 8002f00:	021b      	lsls	r3, r3, #8
 8002f02:	b29a      	uxth	r2, r3
 8002f04:	7bbb      	ldrb	r3, [r7, #14]
 8002f06:	b29b      	uxth	r3, r3
 8002f08:	4413      	add	r3, r2
 8002f0a:	b29a      	uxth	r2, r3
 8002f0c:	683b      	ldr	r3, [r7, #0]
 8002f0e:	3302      	adds	r3, #2
 8002f10:	b212      	sxth	r2, r2
 8002f12:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 8002f14:	7c7a      	ldrb	r2, [r7, #17]
 8002f16:	683b      	ldr	r3, [r7, #0]
 8002f18:	3304      	adds	r3, #4
 8002f1a:	b212      	sxth	r2, r2
 8002f1c:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 8002f1e:	683b      	ldr	r3, [r7, #0]
 8002f20:	3304      	adds	r3, #4
 8002f22:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002f26:	b29b      	uxth	r3, r3
 8002f28:	021b      	lsls	r3, r3, #8
 8002f2a:	b29a      	uxth	r2, r3
 8002f2c:	7c3b      	ldrb	r3, [r7, #16]
 8002f2e:	b29b      	uxth	r3, r3
 8002f30:	4413      	add	r3, r2
 8002f32:	b29a      	uxth	r2, r3
 8002f34:	683b      	ldr	r3, [r7, #0]
 8002f36:	3304      	adds	r3, #4
 8002f38:	b212      	sxth	r2, r2
 8002f3a:	801a      	strh	r2, [r3, #0]

  return ret;
 8002f3c:	697b      	ldr	r3, [r7, #20]
}
 8002f3e:	4618      	mov	r0, r3
 8002f40:	3718      	adds	r7, #24
 8002f42:	46bd      	mov	sp, r7
 8002f44:	bd80      	pop	{r7, pc}

08002f46 <lis2dw12_device_id_get>:
  * @param  buff     buffer that stores data read
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 8002f46:	b580      	push	{r7, lr}
 8002f48:	b084      	sub	sp, #16
 8002f4a:	af00      	add	r7, sp, #0
 8002f4c:	6078      	str	r0, [r7, #4]
 8002f4e:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_WHO_AM_I, buff, 1);
 8002f50:	2301      	movs	r3, #1
 8002f52:	683a      	ldr	r2, [r7, #0]
 8002f54:	210f      	movs	r1, #15
 8002f56:	6878      	ldr	r0, [r7, #4]
 8002f58:	f7ff fcde 	bl	8002918 <lis2dw12_read_reg>
 8002f5c:	60f8      	str	r0, [r7, #12]

  return ret;
 8002f5e:	68fb      	ldr	r3, [r7, #12]
}
 8002f60:	4618      	mov	r0, r3
 8002f62:	3710      	adds	r7, #16
 8002f64:	46bd      	mov	sp, r7
 8002f66:	bd80      	pop	{r7, pc}

08002f68 <lis2dw12_auto_increment_set>:
  * @param  val      change the values of if_add_inc in reg CTRL2
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_auto_increment_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8002f68:	b580      	push	{r7, lr}
 8002f6a:	b084      	sub	sp, #16
 8002f6c:	af00      	add	r7, sp, #0
 8002f6e:	6078      	str	r0, [r7, #4]
 8002f70:	460b      	mov	r3, r1
 8002f72:	70fb      	strb	r3, [r7, #3]
  lis2dw12_ctrl2_t reg;
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL2, (uint8_t *) &reg, 1);
 8002f74:	f107 0208 	add.w	r2, r7, #8
 8002f78:	2301      	movs	r3, #1
 8002f7a:	2121      	movs	r1, #33	; 0x21
 8002f7c:	6878      	ldr	r0, [r7, #4]
 8002f7e:	f7ff fccb 	bl	8002918 <lis2dw12_read_reg>
 8002f82:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d10f      	bne.n	8002faa <lis2dw12_auto_increment_set+0x42>
  {
    reg.if_add_inc = val;
 8002f8a:	78fb      	ldrb	r3, [r7, #3]
 8002f8c:	f003 0301 	and.w	r3, r3, #1
 8002f90:	b2da      	uxtb	r2, r3
 8002f92:	7a3b      	ldrb	r3, [r7, #8]
 8002f94:	f362 0382 	bfi	r3, r2, #2, #1
 8002f98:	723b      	strb	r3, [r7, #8]
    ret = lis2dw12_write_reg(ctx, LIS2DW12_CTRL2, (uint8_t *) &reg, 1);
 8002f9a:	f107 0208 	add.w	r2, r7, #8
 8002f9e:	2301      	movs	r3, #1
 8002fa0:	2121      	movs	r1, #33	; 0x21
 8002fa2:	6878      	ldr	r0, [r7, #4]
 8002fa4:	f7ff fcd0 	bl	8002948 <lis2dw12_write_reg>
 8002fa8:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8002faa:	68fb      	ldr	r3, [r7, #12]
}
 8002fac:	4618      	mov	r0, r3
 8002fae:	3710      	adds	r7, #16
 8002fb0:	46bd      	mov	sp, r7
 8002fb2:	bd80      	pop	{r7, pc}

08002fb4 <lis2dw12_fifo_mode_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_fifo_mode_set(stmdev_ctx_t *ctx,
                               lis2dw12_fmode_t val)
{
 8002fb4:	b580      	push	{r7, lr}
 8002fb6:	b084      	sub	sp, #16
 8002fb8:	af00      	add	r7, sp, #0
 8002fba:	6078      	str	r0, [r7, #4]
 8002fbc:	460b      	mov	r3, r1
 8002fbe:	70fb      	strb	r3, [r7, #3]
  lis2dw12_fifo_ctrl_t reg;
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_FIFO_CTRL, (uint8_t *) &reg, 1);
 8002fc0:	f107 0208 	add.w	r2, r7, #8
 8002fc4:	2301      	movs	r3, #1
 8002fc6:	212e      	movs	r1, #46	; 0x2e
 8002fc8:	6878      	ldr	r0, [r7, #4]
 8002fca:	f7ff fca5 	bl	8002918 <lis2dw12_read_reg>
 8002fce:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d10f      	bne.n	8002ff6 <lis2dw12_fifo_mode_set+0x42>
  {
    reg.fmode = (uint8_t) val;
 8002fd6:	78fb      	ldrb	r3, [r7, #3]
 8002fd8:	f003 0307 	and.w	r3, r3, #7
 8002fdc:	b2da      	uxtb	r2, r3
 8002fde:	7a3b      	ldrb	r3, [r7, #8]
 8002fe0:	f362 1347 	bfi	r3, r2, #5, #3
 8002fe4:	723b      	strb	r3, [r7, #8]
    ret = lis2dw12_write_reg(ctx, LIS2DW12_FIFO_CTRL, (uint8_t *) &reg, 1);
 8002fe6:	f107 0208 	add.w	r2, r7, #8
 8002fea:	2301      	movs	r3, #1
 8002fec:	212e      	movs	r1, #46	; 0x2e
 8002fee:	6878      	ldr	r0, [r7, #4]
 8002ff0:	f7ff fcaa 	bl	8002948 <lis2dw12_write_reg>
 8002ff4:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8002ff6:	68fb      	ldr	r3, [r7, #12]
}
 8002ff8:	4618      	mov	r0, r3
 8002ffa:	3710      	adds	r7, #16
 8002ffc:	46bd      	mov	sp, r7
 8002ffe:	bd80      	pop	{r7, pc}

08003000 <LIS2MDL_RegisterBusIO>:
  * @brief  Register Component Bus IO operations
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_RegisterBusIO(LIS2MDL_Object_t *pObj, LIS2MDL_IO_t *pIO)
{
 8003000:	b580      	push	{r7, lr}
 8003002:	b084      	sub	sp, #16
 8003004:	af00      	add	r7, sp, #0
 8003006:	6078      	str	r0, [r7, #4]
 8003008:	6039      	str	r1, [r7, #0]
  int32_t ret = LIS2MDL_OK;
 800300a:	2300      	movs	r3, #0
 800300c:	60fb      	str	r3, [r7, #12]

  if (pObj == NULL)
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	2b00      	cmp	r3, #0
 8003012:	d103      	bne.n	800301c <LIS2MDL_RegisterBusIO+0x1c>
  {
    ret = LIS2MDL_ERROR;
 8003014:	f04f 33ff 	mov.w	r3, #4294967295
 8003018:	60fb      	str	r3, [r7, #12]
 800301a:	e067      	b.n	80030ec <LIS2MDL_RegisterBusIO+0xec>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 800301c:	683b      	ldr	r3, [r7, #0]
 800301e:	681a      	ldr	r2, [r3, #0]
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 8003024:	683b      	ldr	r3, [r7, #0]
 8003026:	685a      	ldr	r2, [r3, #4]
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	605a      	str	r2, [r3, #4]
    pObj->IO.BusType   = pIO->BusType;
 800302c:	683b      	ldr	r3, [r7, #0]
 800302e:	689a      	ldr	r2, [r3, #8]
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	609a      	str	r2, [r3, #8]
    pObj->IO.Address   = pIO->Address;
 8003034:	683b      	ldr	r3, [r7, #0]
 8003036:	7b1a      	ldrb	r2, [r3, #12]
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	731a      	strb	r2, [r3, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 800303c:	683b      	ldr	r3, [r7, #0]
 800303e:	691a      	ldr	r2, [r3, #16]
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	611a      	str	r2, [r3, #16]
    pObj->IO.ReadReg   = pIO->ReadReg;
 8003044:	683b      	ldr	r3, [r7, #0]
 8003046:	695a      	ldr	r2, [r3, #20]
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	615a      	str	r2, [r3, #20]
    pObj->IO.GetTick   = pIO->GetTick;
 800304c:	683b      	ldr	r3, [r7, #0]
 800304e:	699a      	ldr	r2, [r3, #24]
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	619a      	str	r2, [r3, #24]

    pObj->Ctx.read_reg  = ReadMagRegWrap;
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	4a28      	ldr	r2, [pc, #160]	; (80030f8 <LIS2MDL_RegisterBusIO+0xf8>)
 8003058:	625a      	str	r2, [r3, #36]	; 0x24
    pObj->Ctx.write_reg = WriteMagRegWrap;
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	4a27      	ldr	r2, [pc, #156]	; (80030fc <LIS2MDL_RegisterBusIO+0xfc>)
 800305e:	621a      	str	r2, [r3, #32]
    pObj->Ctx.mdelay    = pIO->Delay;
 8003060:	683b      	ldr	r3, [r7, #0]
 8003062:	69da      	ldr	r2, [r3, #28]
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	629a      	str	r2, [r3, #40]	; 0x28
    pObj->Ctx.handle    = pObj;
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	687a      	ldr	r2, [r7, #4]
 800306c:	62da      	str	r2, [r3, #44]	; 0x2c

    if (pObj->IO.Init == NULL)
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	2b00      	cmp	r3, #0
 8003074:	d103      	bne.n	800307e <LIS2MDL_RegisterBusIO+0x7e>
    {
      ret = LIS2MDL_ERROR;
 8003076:	f04f 33ff 	mov.w	r3, #4294967295
 800307a:	60fb      	str	r3, [r7, #12]
 800307c:	e036      	b.n	80030ec <LIS2MDL_RegisterBusIO+0xec>
    }
    else if (pObj->IO.Init() != LIS2MDL_OK)
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	4798      	blx	r3
 8003084:	4603      	mov	r3, r0
 8003086:	2b00      	cmp	r3, #0
 8003088:	d003      	beq.n	8003092 <LIS2MDL_RegisterBusIO+0x92>
    {
      ret = LIS2MDL_ERROR;
 800308a:	f04f 33ff 	mov.w	r3, #4294967295
 800308e:	60fb      	str	r3, [r7, #12]
 8003090:	e02c      	b.n	80030ec <LIS2MDL_RegisterBusIO+0xec>
    }
    else
    {
      if (pObj->IO.BusType != LIS2MDL_I2C_BUS) /* If the bus type is not I2C */
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	689b      	ldr	r3, [r3, #8]
 8003096:	2b00      	cmp	r3, #0
 8003098:	d028      	beq.n	80030ec <LIS2MDL_RegisterBusIO+0xec>
      {
        /* Disable I2C interface support and enable eventually SPI 4-Wires only the first time */
        if (pObj->is_initialized == 0U)
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d123      	bne.n	80030ec <LIS2MDL_RegisterBusIO+0xec>
        {
          if (pObj->IO.BusType == LIS2MDL_SPI_4WIRES_BUS) /* SPI 4-Wires */
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	689b      	ldr	r3, [r3, #8]
 80030a8:	2b01      	cmp	r3, #1
 80030aa:	d10d      	bne.n	80030c8 <LIS2MDL_RegisterBusIO+0xc8>
          {
            /* Enable SPI 4-Wires and disable I2C support on the component */
            uint8_t data = 0x34;
 80030ac:	2334      	movs	r3, #52	; 0x34
 80030ae:	72fb      	strb	r3, [r7, #11]

            if (LIS2MDL_Write_Reg(pObj, LIS2MDL_CFG_REG_C, data) != LIS2MDL_OK)
 80030b0:	7afb      	ldrb	r3, [r7, #11]
 80030b2:	461a      	mov	r2, r3
 80030b4:	2162      	movs	r1, #98	; 0x62
 80030b6:	6878      	ldr	r0, [r7, #4]
 80030b8:	f000 fb1b 	bl	80036f2 <LIS2MDL_Write_Reg>
 80030bc:	4603      	mov	r3, r0
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d014      	beq.n	80030ec <LIS2MDL_RegisterBusIO+0xec>
            {
              return LIS2MDL_ERROR;
 80030c2:	f04f 33ff 	mov.w	r3, #4294967295
 80030c6:	e012      	b.n	80030ee <LIS2MDL_RegisterBusIO+0xee>
            }
          }
          else if (pObj->IO.BusType == LSM6DSOX_SENSORHUB_LIS2MDL_I2C_BUS) /* LSM6DSOX SensorHub with LIS2MDL example */
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	689b      	ldr	r3, [r3, #8]
 80030cc:	2b03      	cmp	r3, #3
 80030ce:	d101      	bne.n	80030d4 <LIS2MDL_RegisterBusIO+0xd4>
          {
            /* Do nothing, just keep I2C support on the component */
            return ret;
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	e00c      	b.n	80030ee <LIS2MDL_RegisterBusIO+0xee>
          }
          else
          {
            /* Disable I2C interface on the component */
            if (lis2mdl_i2c_interface_set(&(pObj->Ctx), LIS2MDL_I2C_DISABLE) != LIS2MDL_OK)
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	3320      	adds	r3, #32
 80030d8:	2101      	movs	r1, #1
 80030da:	4618      	mov	r0, r3
 80030dc:	f000 ff70 	bl	8003fc0 <lis2mdl_i2c_interface_set>
 80030e0:	4603      	mov	r3, r0
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d002      	beq.n	80030ec <LIS2MDL_RegisterBusIO+0xec>
            {
              return LIS2MDL_ERROR;
 80030e6:	f04f 33ff 	mov.w	r3, #4294967295
 80030ea:	e000      	b.n	80030ee <LIS2MDL_RegisterBusIO+0xee>
        }
      }
    }
  }

  return ret;
 80030ec:	68fb      	ldr	r3, [r7, #12]
}
 80030ee:	4618      	mov	r0, r3
 80030f0:	3710      	adds	r7, #16
 80030f2:	46bd      	mov	sp, r7
 80030f4:	bd80      	pop	{r7, pc}
 80030f6:	bf00      	nop
 80030f8:	08003749 	.word	0x08003749
 80030fc:	080037cb 	.word	0x080037cb

08003100 <LIS2MDL_Init>:
  * @brief  Initialize the LIS2MDL sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_Init(LIS2MDL_Object_t *pObj)
{
 8003100:	b580      	push	{r7, lr}
 8003102:	b084      	sub	sp, #16
 8003104:	af00      	add	r7, sp, #0
 8003106:	6078      	str	r0, [r7, #4]
  lis2mdl_cfg_reg_a_t reg_a;
  lis2mdl_cfg_reg_c_t reg_c;

  if (pObj->IO.BusType == LSM6DSOX_SENSORHUB_LIS2MDL_I2C_BUS) /* LSM6DSOX SensorHub with LIS2MDL example */
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	689b      	ldr	r3, [r3, #8]
 800310c:	2b03      	cmp	r3, #3
 800310e:	d144      	bne.n	800319a <LIS2MDL_Init+0x9a>
  {
    /* Read configuration from CFG_REG_C & CFG_REG_A regs */
    if (LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData(pObj, LIS2MDL_CFG_REG_C, (uint8_t *)&reg_c, 1) != LIS2MDL_OK)
 8003110:	f107 0208 	add.w	r2, r7, #8
 8003114:	2301      	movs	r3, #1
 8003116:	2162      	movs	r1, #98	; 0x62
 8003118:	6878      	ldr	r0, [r7, #4]
 800311a:	f000 fb97 	bl	800384c <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData>
 800311e:	4603      	mov	r3, r0
 8003120:	2b00      	cmp	r3, #0
 8003122:	d002      	beq.n	800312a <LIS2MDL_Init+0x2a>
    {
      return LIS2MDL_ERROR;
 8003124:	f04f 33ff 	mov.w	r3, #4294967295
 8003128:	e06c      	b.n	8003204 <LIS2MDL_Init+0x104>
    }
    if (LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData(pObj, LIS2MDL_CFG_REG_A, (uint8_t *)&reg_a, 1) != LIS2MDL_OK)
 800312a:	f107 020c 	add.w	r2, r7, #12
 800312e:	2301      	movs	r3, #1
 8003130:	2160      	movs	r1, #96	; 0x60
 8003132:	6878      	ldr	r0, [r7, #4]
 8003134:	f000 fb8a 	bl	800384c <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData>
 8003138:	4603      	mov	r3, r0
 800313a:	2b00      	cmp	r3, #0
 800313c:	d002      	beq.n	8003144 <LIS2MDL_Init+0x44>
    {
      return LIS2MDL_ERROR;
 800313e:	f04f 33ff 	mov.w	r3, #4294967295
 8003142:	e05f      	b.n	8003204 <LIS2MDL_Init+0x104>
    }

    /* Enable BDU */
    reg_c.bdu = PROPERTY_ENABLE;
 8003144:	7a3b      	ldrb	r3, [r7, #8]
 8003146:	f043 0310 	orr.w	r3, r3, #16
 800314a:	723b      	strb	r3, [r7, #8]

    /* Self Test disabled. */
    reg_c.self_test = PROPERTY_DISABLE;
 800314c:	7a3b      	ldrb	r3, [r7, #8]
 800314e:	f36f 0341 	bfc	r3, #1, #1
 8003152:	723b      	strb	r3, [r7, #8]

    /* Operating mode selection - power down */
    reg_a.md = LIS2MDL_POWER_DOWN;
 8003154:	7b3b      	ldrb	r3, [r7, #12]
 8003156:	2202      	movs	r2, #2
 8003158:	f362 0301 	bfi	r3, r2, #0, #2
 800315c:	733b      	strb	r3, [r7, #12]

    /* Output data rate selection */
    reg_a.odr = LIS2MDL_ODR_100Hz;
 800315e:	7b3b      	ldrb	r3, [r7, #12]
 8003160:	f043 030c 	orr.w	r3, r3, #12
 8003164:	733b      	strb	r3, [r7, #12]

    /* Write configuration to CFG_REG_C & CFG_REG_A regs */
    if (LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData(pObj, LIS2MDL_CFG_REG_C, (uint8_t *)&reg_c, 1) != LIS2MDL_OK)
 8003166:	f107 0208 	add.w	r2, r7, #8
 800316a:	2301      	movs	r3, #1
 800316c:	2162      	movs	r1, #98	; 0x62
 800316e:	6878      	ldr	r0, [r7, #4]
 8003170:	f000 fcab 	bl	8003aca <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData>
 8003174:	4603      	mov	r3, r0
 8003176:	2b00      	cmp	r3, #0
 8003178:	d002      	beq.n	8003180 <LIS2MDL_Init+0x80>
    {
      return LIS2MDL_ERROR;
 800317a:	f04f 33ff 	mov.w	r3, #4294967295
 800317e:	e041      	b.n	8003204 <LIS2MDL_Init+0x104>
    }
    if (LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData(pObj, LIS2MDL_CFG_REG_A, (uint8_t *)&reg_a, 1) != LIS2MDL_OK)
 8003180:	f107 020c 	add.w	r2, r7, #12
 8003184:	2301      	movs	r3, #1
 8003186:	2160      	movs	r1, #96	; 0x60
 8003188:	6878      	ldr	r0, [r7, #4]
 800318a:	f000 fc9e 	bl	8003aca <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData>
 800318e:	4603      	mov	r3, r0
 8003190:	2b00      	cmp	r3, #0
 8003192:	d032      	beq.n	80031fa <LIS2MDL_Init+0xfa>
    {
      return LIS2MDL_ERROR;
 8003194:	f04f 33ff 	mov.w	r3, #4294967295
 8003198:	e034      	b.n	8003204 <LIS2MDL_Init+0x104>
    }
  }
  else
  {
    /* Enable BDU */
    if (lis2mdl_block_data_update_set(&(pObj->Ctx), PROPERTY_ENABLE) != LIS2MDL_OK)
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	3320      	adds	r3, #32
 800319e:	2101      	movs	r1, #1
 80031a0:	4618      	mov	r0, r3
 80031a2:	f000 fe65 	bl	8003e70 <lis2mdl_block_data_update_set>
 80031a6:	4603      	mov	r3, r0
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d002      	beq.n	80031b2 <LIS2MDL_Init+0xb2>
    {
      return LIS2MDL_ERROR;
 80031ac:	f04f 33ff 	mov.w	r3, #4294967295
 80031b0:	e028      	b.n	8003204 <LIS2MDL_Init+0x104>
    }

    /* Operating mode selection - power down */
    if (lis2mdl_operating_mode_set(&(pObj->Ctx), LIS2MDL_POWER_DOWN) != LIS2MDL_OK)
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	3320      	adds	r3, #32
 80031b6:	2102      	movs	r1, #2
 80031b8:	4618      	mov	r0, r3
 80031ba:	f000 fdd4 	bl	8003d66 <lis2mdl_operating_mode_set>
 80031be:	4603      	mov	r3, r0
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d002      	beq.n	80031ca <LIS2MDL_Init+0xca>
    {
      return LIS2MDL_ERROR;
 80031c4:	f04f 33ff 	mov.w	r3, #4294967295
 80031c8:	e01c      	b.n	8003204 <LIS2MDL_Init+0x104>
    }

    /* Output data rate selection */
    if (lis2mdl_data_rate_set(&(pObj->Ctx), LIS2MDL_ODR_100Hz) != LIS2MDL_OK)
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	3320      	adds	r3, #32
 80031ce:	2103      	movs	r1, #3
 80031d0:	4618      	mov	r0, r3
 80031d2:	f000 fdee 	bl	8003db2 <lis2mdl_data_rate_set>
 80031d6:	4603      	mov	r3, r0
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d002      	beq.n	80031e2 <LIS2MDL_Init+0xe2>
    {
      return LIS2MDL_ERROR;
 80031dc:	f04f 33ff 	mov.w	r3, #4294967295
 80031e0:	e010      	b.n	8003204 <LIS2MDL_Init+0x104>
    }

    /* Self Test disabled. */
    if (lis2mdl_self_test_set(&(pObj->Ctx), PROPERTY_DISABLE) != LIS2MDL_OK)
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	3320      	adds	r3, #32
 80031e6:	2100      	movs	r1, #0
 80031e8:	4618      	mov	r0, r3
 80031ea:	f000 fec3 	bl	8003f74 <lis2mdl_self_test_set>
 80031ee:	4603      	mov	r3, r0
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d002      	beq.n	80031fa <LIS2MDL_Init+0xfa>
    {
      return LIS2MDL_ERROR;
 80031f4:	f04f 33ff 	mov.w	r3, #4294967295
 80031f8:	e004      	b.n	8003204 <LIS2MDL_Init+0x104>
    }
  }

  pObj->is_initialized = 1;
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	2201      	movs	r2, #1
 80031fe:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return LIS2MDL_OK;
 8003202:	2300      	movs	r3, #0
}
 8003204:	4618      	mov	r0, r3
 8003206:	3710      	adds	r7, #16
 8003208:	46bd      	mov	sp, r7
 800320a:	bd80      	pop	{r7, pc}

0800320c <LIS2MDL_DeInit>:
  * @brief  Deinitialize the LIS2MDL magnetometer sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_DeInit(LIS2MDL_Object_t *pObj)
{
 800320c:	b580      	push	{r7, lr}
 800320e:	b082      	sub	sp, #8
 8003210:	af00      	add	r7, sp, #0
 8003212:	6078      	str	r0, [r7, #4]
  /* Disable the component */
  if (LIS2MDL_MAG_Disable(pObj) != LIS2MDL_OK)
 8003214:	6878      	ldr	r0, [r7, #4]
 8003216:	f000 f8a5 	bl	8003364 <LIS2MDL_MAG_Disable>
 800321a:	4603      	mov	r3, r0
 800321c:	2b00      	cmp	r3, #0
 800321e:	d002      	beq.n	8003226 <LIS2MDL_DeInit+0x1a>
  {
    return LIS2MDL_ERROR;
 8003220:	f04f 33ff 	mov.w	r3, #4294967295
 8003224:	e004      	b.n	8003230 <LIS2MDL_DeInit+0x24>
  }

  pObj->is_initialized = 0;
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	2200      	movs	r2, #0
 800322a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return LIS2MDL_OK;
 800322e:	2300      	movs	r3, #0
}
 8003230:	4618      	mov	r0, r3
 8003232:	3708      	adds	r7, #8
 8003234:	46bd      	mov	sp, r7
 8003236:	bd80      	pop	{r7, pc}

08003238 <LIS2MDL_ReadID>:
  * @param  pObj the device pObj
  * @param  Id the WHO_AM_I value
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_ReadID(LIS2MDL_Object_t *pObj, uint8_t *Id)
{
 8003238:	b580      	push	{r7, lr}
 800323a:	b082      	sub	sp, #8
 800323c:	af00      	add	r7, sp, #0
 800323e:	6078      	str	r0, [r7, #4]
 8003240:	6039      	str	r1, [r7, #0]
  if (pObj->IO.BusType == LSM6DSOX_SENSORHUB_LIS2MDL_I2C_BUS) /* LSM6DSOX SensorHub with LIS2MDL example */
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	689b      	ldr	r3, [r3, #8]
 8003246:	2b03      	cmp	r3, #3
 8003248:	d10b      	bne.n	8003262 <LIS2MDL_ReadID+0x2a>
  {
    if (LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData(pObj, LIS2MDL_WHO_AM_I, Id, 1) != LIS2MDL_OK)
 800324a:	2301      	movs	r3, #1
 800324c:	683a      	ldr	r2, [r7, #0]
 800324e:	214f      	movs	r1, #79	; 0x4f
 8003250:	6878      	ldr	r0, [r7, #4]
 8003252:	f000 fafb 	bl	800384c <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData>
 8003256:	4603      	mov	r3, r0
 8003258:	2b00      	cmp	r3, #0
 800325a:	d00e      	beq.n	800327a <LIS2MDL_ReadID+0x42>
    {
      return LIS2MDL_ERROR;
 800325c:	f04f 33ff 	mov.w	r3, #4294967295
 8003260:	e00c      	b.n	800327c <LIS2MDL_ReadID+0x44>
    }
  }
  else
  {
    if (lis2mdl_device_id_get(&(pObj->Ctx), Id) != LIS2MDL_OK)
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	3320      	adds	r3, #32
 8003266:	6839      	ldr	r1, [r7, #0]
 8003268:	4618      	mov	r0, r3
 800326a:	f000 fe72 	bl	8003f52 <lis2mdl_device_id_get>
 800326e:	4603      	mov	r3, r0
 8003270:	2b00      	cmp	r3, #0
 8003272:	d002      	beq.n	800327a <LIS2MDL_ReadID+0x42>
    {
      return LIS2MDL_ERROR;
 8003274:	f04f 33ff 	mov.w	r3, #4294967295
 8003278:	e000      	b.n	800327c <LIS2MDL_ReadID+0x44>
    }
  }

  return LIS2MDL_OK;
 800327a:	2300      	movs	r3, #0
}
 800327c:	4618      	mov	r0, r3
 800327e:	3708      	adds	r7, #8
 8003280:	46bd      	mov	sp, r7
 8003282:	bd80      	pop	{r7, pc}

08003284 <LIS2MDL_GetCapabilities>:
  * @param  pObj Component object pointer
  * @param  Capabilities pointer to LIS2MDL magnetometer sensor capabilities
  * @retval Component status
  */
int32_t LIS2MDL_GetCapabilities(LIS2MDL_Object_t *pObj, LIS2MDL_Capabilities_t *Capabilities)
{
 8003284:	b480      	push	{r7}
 8003286:	b083      	sub	sp, #12
 8003288:	af00      	add	r7, sp, #0
 800328a:	6078      	str	r0, [r7, #4]
 800328c:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  Capabilities->Acc          = 0;
 800328e:	683b      	ldr	r3, [r7, #0]
 8003290:	2200      	movs	r2, #0
 8003292:	701a      	strb	r2, [r3, #0]
  Capabilities->Gyro         = 0;
 8003294:	683b      	ldr	r3, [r7, #0]
 8003296:	2200      	movs	r2, #0
 8003298:	705a      	strb	r2, [r3, #1]
  Capabilities->Magneto      = 1;
 800329a:	683b      	ldr	r3, [r7, #0]
 800329c:	2201      	movs	r2, #1
 800329e:	709a      	strb	r2, [r3, #2]
  Capabilities->LowPower     = 0;
 80032a0:	683b      	ldr	r3, [r7, #0]
 80032a2:	2200      	movs	r2, #0
 80032a4:	70da      	strb	r2, [r3, #3]
  Capabilities->GyroMaxFS    = 0;
 80032a6:	683b      	ldr	r3, [r7, #0]
 80032a8:	2200      	movs	r2, #0
 80032aa:	605a      	str	r2, [r3, #4]
  Capabilities->AccMaxFS     = 0;
 80032ac:	683b      	ldr	r3, [r7, #0]
 80032ae:	2200      	movs	r2, #0
 80032b0:	609a      	str	r2, [r3, #8]
  Capabilities->MagMaxFS     = 50;
 80032b2:	683b      	ldr	r3, [r7, #0]
 80032b4:	2232      	movs	r2, #50	; 0x32
 80032b6:	60da      	str	r2, [r3, #12]
  Capabilities->GyroMaxOdr   = 0.0f;
 80032b8:	683b      	ldr	r3, [r7, #0]
 80032ba:	f04f 0200 	mov.w	r2, #0
 80032be:	611a      	str	r2, [r3, #16]
  Capabilities->AccMaxOdr    = 0.0f;
 80032c0:	683b      	ldr	r3, [r7, #0]
 80032c2:	f04f 0200 	mov.w	r2, #0
 80032c6:	615a      	str	r2, [r3, #20]
  Capabilities->MagMaxOdr    = 100.0f;
 80032c8:	683b      	ldr	r3, [r7, #0]
 80032ca:	4a04      	ldr	r2, [pc, #16]	; (80032dc <LIS2MDL_GetCapabilities+0x58>)
 80032cc:	619a      	str	r2, [r3, #24]
  return LIS2MDL_OK;
 80032ce:	2300      	movs	r3, #0
}
 80032d0:	4618      	mov	r0, r3
 80032d2:	370c      	adds	r7, #12
 80032d4:	46bd      	mov	sp, r7
 80032d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032da:	4770      	bx	lr
 80032dc:	42c80000 	.word	0x42c80000

080032e0 <LIS2MDL_MAG_Enable>:
  * @brief Enable the LIS2MDL magnetometer sensor
  * @param pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_MAG_Enable(LIS2MDL_Object_t *pObj)
{
 80032e0:	b580      	push	{r7, lr}
 80032e2:	b084      	sub	sp, #16
 80032e4:	af00      	add	r7, sp, #0
 80032e6:	6078      	str	r0, [r7, #4]
  lis2mdl_cfg_reg_a_t reg_a;

  /* Check if the component is already enabled */
  if (pObj->mag_is_enabled == 1U)
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80032ee:	2b01      	cmp	r3, #1
 80032f0:	d101      	bne.n	80032f6 <LIS2MDL_MAG_Enable+0x16>
  {
    return LIS2MDL_OK;
 80032f2:	2300      	movs	r3, #0
 80032f4:	e032      	b.n	800335c <LIS2MDL_MAG_Enable+0x7c>
  }

  if (pObj->IO.BusType == LSM6DSOX_SENSORHUB_LIS2MDL_I2C_BUS) /* LSM6DSOX SensorHub with LIS2MDL example */
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	689b      	ldr	r3, [r3, #8]
 80032fa:	2b03      	cmp	r3, #3
 80032fc:	d11d      	bne.n	800333a <LIS2MDL_MAG_Enable+0x5a>
  {
    /* Read configuration from CFG_REG_A reg */
    if (LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData(pObj, LIS2MDL_CFG_REG_A, (uint8_t *)&reg_a, 1) != LIS2MDL_OK)
 80032fe:	f107 020c 	add.w	r2, r7, #12
 8003302:	2301      	movs	r3, #1
 8003304:	2160      	movs	r1, #96	; 0x60
 8003306:	6878      	ldr	r0, [r7, #4]
 8003308:	f000 faa0 	bl	800384c <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData>
 800330c:	4603      	mov	r3, r0
 800330e:	2b00      	cmp	r3, #0
 8003310:	d002      	beq.n	8003318 <LIS2MDL_MAG_Enable+0x38>
    {
      return LIS2MDL_ERROR;
 8003312:	f04f 33ff 	mov.w	r3, #4294967295
 8003316:	e021      	b.n	800335c <LIS2MDL_MAG_Enable+0x7c>
    }

    /* Operation mode selection. */
    reg_a.md = LIS2MDL_CONTINUOUS_MODE;
 8003318:	7b3b      	ldrb	r3, [r7, #12]
 800331a:	f36f 0301 	bfc	r3, #0, #2
 800331e:	733b      	strb	r3, [r7, #12]

    /* Write configuration to CFG_REG_A reg */
    if (LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData(pObj, LIS2MDL_CFG_REG_A, (uint8_t *)&reg_a, 1) != LIS2MDL_OK)
 8003320:	f107 020c 	add.w	r2, r7, #12
 8003324:	2301      	movs	r3, #1
 8003326:	2160      	movs	r1, #96	; 0x60
 8003328:	6878      	ldr	r0, [r7, #4]
 800332a:	f000 fbce 	bl	8003aca <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData>
 800332e:	4603      	mov	r3, r0
 8003330:	2b00      	cmp	r3, #0
 8003332:	d00e      	beq.n	8003352 <LIS2MDL_MAG_Enable+0x72>
    {
      return LIS2MDL_ERROR;
 8003334:	f04f 33ff 	mov.w	r3, #4294967295
 8003338:	e010      	b.n	800335c <LIS2MDL_MAG_Enable+0x7c>
    }
  }
  else
  {
    /* Operation mode selection. */
    if (lis2mdl_operating_mode_set(&(pObj->Ctx), LIS2MDL_CONTINUOUS_MODE) != LIS2MDL_OK)
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	3320      	adds	r3, #32
 800333e:	2100      	movs	r1, #0
 8003340:	4618      	mov	r0, r3
 8003342:	f000 fd10 	bl	8003d66 <lis2mdl_operating_mode_set>
 8003346:	4603      	mov	r3, r0
 8003348:	2b00      	cmp	r3, #0
 800334a:	d002      	beq.n	8003352 <LIS2MDL_MAG_Enable+0x72>
    {
      return LIS2MDL_ERROR;
 800334c:	f04f 33ff 	mov.w	r3, #4294967295
 8003350:	e004      	b.n	800335c <LIS2MDL_MAG_Enable+0x7c>
    }
  }

  pObj->mag_is_enabled = 1;
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	2201      	movs	r2, #1
 8003356:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

  return LIS2MDL_OK;
 800335a:	2300      	movs	r3, #0
}
 800335c:	4618      	mov	r0, r3
 800335e:	3710      	adds	r7, #16
 8003360:	46bd      	mov	sp, r7
 8003362:	bd80      	pop	{r7, pc}

08003364 <LIS2MDL_MAG_Disable>:
  * @brief Disable the LIS2MDL magnetometer sensor
  * @param pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_MAG_Disable(LIS2MDL_Object_t *pObj)
{
 8003364:	b580      	push	{r7, lr}
 8003366:	b084      	sub	sp, #16
 8003368:	af00      	add	r7, sp, #0
 800336a:	6078      	str	r0, [r7, #4]
  lis2mdl_cfg_reg_a_t reg_a;

  /* Check if the component is already disabled */
  if (pObj->mag_is_enabled == 0U)
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8003372:	2b00      	cmp	r3, #0
 8003374:	d101      	bne.n	800337a <LIS2MDL_MAG_Disable+0x16>
  {
    return LIS2MDL_OK;
 8003376:	2300      	movs	r3, #0
 8003378:	e033      	b.n	80033e2 <LIS2MDL_MAG_Disable+0x7e>
  }

  if (pObj->IO.BusType == LSM6DSOX_SENSORHUB_LIS2MDL_I2C_BUS) /* LSM6DSOX SensorHub with LIS2MDL example */
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	689b      	ldr	r3, [r3, #8]
 800337e:	2b03      	cmp	r3, #3
 8003380:	d11e      	bne.n	80033c0 <LIS2MDL_MAG_Disable+0x5c>
  {
    /* Read configuration from CFG_REG_A reg */
    if (LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData(pObj, LIS2MDL_CFG_REG_A, (uint8_t *)&reg_a, 1) != LIS2MDL_OK)
 8003382:	f107 020c 	add.w	r2, r7, #12
 8003386:	2301      	movs	r3, #1
 8003388:	2160      	movs	r1, #96	; 0x60
 800338a:	6878      	ldr	r0, [r7, #4]
 800338c:	f000 fa5e 	bl	800384c <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData>
 8003390:	4603      	mov	r3, r0
 8003392:	2b00      	cmp	r3, #0
 8003394:	d002      	beq.n	800339c <LIS2MDL_MAG_Disable+0x38>
    {
      return LIS2MDL_ERROR;
 8003396:	f04f 33ff 	mov.w	r3, #4294967295
 800339a:	e022      	b.n	80033e2 <LIS2MDL_MAG_Disable+0x7e>
    }

    /* Operation mode selection. */
    reg_a.md = LIS2MDL_POWER_DOWN;
 800339c:	7b3b      	ldrb	r3, [r7, #12]
 800339e:	2202      	movs	r2, #2
 80033a0:	f362 0301 	bfi	r3, r2, #0, #2
 80033a4:	733b      	strb	r3, [r7, #12]

    /* Write configuration to CFG_REG_A reg */
    if (LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData(pObj, LIS2MDL_CFG_REG_A, (uint8_t *)&reg_a, 1) != LIS2MDL_OK)
 80033a6:	f107 020c 	add.w	r2, r7, #12
 80033aa:	2301      	movs	r3, #1
 80033ac:	2160      	movs	r1, #96	; 0x60
 80033ae:	6878      	ldr	r0, [r7, #4]
 80033b0:	f000 fb8b 	bl	8003aca <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData>
 80033b4:	4603      	mov	r3, r0
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d00e      	beq.n	80033d8 <LIS2MDL_MAG_Disable+0x74>
    {
      return LIS2MDL_ERROR;
 80033ba:	f04f 33ff 	mov.w	r3, #4294967295
 80033be:	e010      	b.n	80033e2 <LIS2MDL_MAG_Disable+0x7e>
    }
  }
  else
  {
    /* Operation mode selection. */
    if (lis2mdl_operating_mode_set(&(pObj->Ctx), LIS2MDL_POWER_DOWN) != LIS2MDL_OK)
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	3320      	adds	r3, #32
 80033c4:	2102      	movs	r1, #2
 80033c6:	4618      	mov	r0, r3
 80033c8:	f000 fccd 	bl	8003d66 <lis2mdl_operating_mode_set>
 80033cc:	4603      	mov	r3, r0
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d002      	beq.n	80033d8 <LIS2MDL_MAG_Disable+0x74>
    {
      return LIS2MDL_ERROR;
 80033d2:	f04f 33ff 	mov.w	r3, #4294967295
 80033d6:	e004      	b.n	80033e2 <LIS2MDL_MAG_Disable+0x7e>
    }
  }

  pObj->mag_is_enabled = 0;
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	2200      	movs	r2, #0
 80033dc:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

  return LIS2MDL_OK;
 80033e0:	2300      	movs	r3, #0
}
 80033e2:	4618      	mov	r0, r3
 80033e4:	3710      	adds	r7, #16
 80033e6:	46bd      	mov	sp, r7
 80033e8:	bd80      	pop	{r7, pc}

080033ea <LIS2MDL_MAG_GetSensitivity>:
  * @param  pObj the device pObj
  * @param  Sensitivity pointer
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_MAG_GetSensitivity(LIS2MDL_Object_t *pObj, float *Sensitivity)
{
 80033ea:	b480      	push	{r7}
 80033ec:	b083      	sub	sp, #12
 80033ee:	af00      	add	r7, sp, #0
 80033f0:	6078      	str	r0, [r7, #4]
 80033f2:	6039      	str	r1, [r7, #0]
  *Sensitivity = LIS2MDL_MAG_SENSITIVITY_FS_50GAUSS;
 80033f4:	683b      	ldr	r3, [r7, #0]
 80033f6:	f04f 527f 	mov.w	r2, #1069547520	; 0x3fc00000
 80033fa:	601a      	str	r2, [r3, #0]

  return LIS2MDL_OK;
 80033fc:	2300      	movs	r3, #0
}
 80033fe:	4618      	mov	r0, r3
 8003400:	370c      	adds	r7, #12
 8003402:	46bd      	mov	sp, r7
 8003404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003408:	4770      	bx	lr
	...

0800340c <LIS2MDL_MAG_GetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr pointer where the output data rate is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_MAG_GetOutputDataRate(LIS2MDL_Object_t *pObj, float *Odr)
{
 800340c:	b580      	push	{r7, lr}
 800340e:	b084      	sub	sp, #16
 8003410:	af00      	add	r7, sp, #0
 8003412:	6078      	str	r0, [r7, #4]
 8003414:	6039      	str	r1, [r7, #0]
  int32_t ret = LIS2MDL_OK;
 8003416:	2300      	movs	r3, #0
 8003418:	60fb      	str	r3, [r7, #12]
  lis2mdl_odr_t odr_low_level;

  /* Get current output data rate. */
  if (lis2mdl_data_rate_get(&(pObj->Ctx), &odr_low_level) != LIS2MDL_OK)
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	3320      	adds	r3, #32
 800341e:	f107 020b 	add.w	r2, r7, #11
 8003422:	4611      	mov	r1, r2
 8003424:	4618      	mov	r0, r3
 8003426:	f000 fceb 	bl	8003e00 <lis2mdl_data_rate_get>
 800342a:	4603      	mov	r3, r0
 800342c:	2b00      	cmp	r3, #0
 800342e:	d002      	beq.n	8003436 <LIS2MDL_MAG_GetOutputDataRate+0x2a>
  {
    return LIS2MDL_ERROR;
 8003430:	f04f 33ff 	mov.w	r3, #4294967295
 8003434:	e023      	b.n	800347e <LIS2MDL_MAG_GetOutputDataRate+0x72>
  }

  switch (odr_low_level)
 8003436:	7afb      	ldrb	r3, [r7, #11]
 8003438:	2b03      	cmp	r3, #3
 800343a:	d81b      	bhi.n	8003474 <LIS2MDL_MAG_GetOutputDataRate+0x68>
 800343c:	a201      	add	r2, pc, #4	; (adr r2, 8003444 <LIS2MDL_MAG_GetOutputDataRate+0x38>)
 800343e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003442:	bf00      	nop
 8003444:	08003455 	.word	0x08003455
 8003448:	0800345d 	.word	0x0800345d
 800344c:	08003465 	.word	0x08003465
 8003450:	0800346d 	.word	0x0800346d
  {
    case LIS2MDL_ODR_10Hz:
      *Odr = 10.0f;
 8003454:	683b      	ldr	r3, [r7, #0]
 8003456:	4a0c      	ldr	r2, [pc, #48]	; (8003488 <LIS2MDL_MAG_GetOutputDataRate+0x7c>)
 8003458:	601a      	str	r2, [r3, #0]
      break;
 800345a:	e00f      	b.n	800347c <LIS2MDL_MAG_GetOutputDataRate+0x70>

    case LIS2MDL_ODR_20Hz:
      *Odr = 20.0f;
 800345c:	683b      	ldr	r3, [r7, #0]
 800345e:	4a0b      	ldr	r2, [pc, #44]	; (800348c <LIS2MDL_MAG_GetOutputDataRate+0x80>)
 8003460:	601a      	str	r2, [r3, #0]
      break;
 8003462:	e00b      	b.n	800347c <LIS2MDL_MAG_GetOutputDataRate+0x70>

    case LIS2MDL_ODR_50Hz:
      *Odr = 50.0f;
 8003464:	683b      	ldr	r3, [r7, #0]
 8003466:	4a0a      	ldr	r2, [pc, #40]	; (8003490 <LIS2MDL_MAG_GetOutputDataRate+0x84>)
 8003468:	601a      	str	r2, [r3, #0]
      break;
 800346a:	e007      	b.n	800347c <LIS2MDL_MAG_GetOutputDataRate+0x70>

    case LIS2MDL_ODR_100Hz:
      *Odr = 100.0f;
 800346c:	683b      	ldr	r3, [r7, #0]
 800346e:	4a09      	ldr	r2, [pc, #36]	; (8003494 <LIS2MDL_MAG_GetOutputDataRate+0x88>)
 8003470:	601a      	str	r2, [r3, #0]
      break;
 8003472:	e003      	b.n	800347c <LIS2MDL_MAG_GetOutputDataRate+0x70>

    default:
      ret = LIS2MDL_ERROR;
 8003474:	f04f 33ff 	mov.w	r3, #4294967295
 8003478:	60fb      	str	r3, [r7, #12]
      break;
 800347a:	bf00      	nop
  }

  return ret;
 800347c:	68fb      	ldr	r3, [r7, #12]
}
 800347e:	4618      	mov	r0, r3
 8003480:	3710      	adds	r7, #16
 8003482:	46bd      	mov	sp, r7
 8003484:	bd80      	pop	{r7, pc}
 8003486:	bf00      	nop
 8003488:	41200000 	.word	0x41200000
 800348c:	41a00000 	.word	0x41a00000
 8003490:	42480000 	.word	0x42480000
 8003494:	42c80000 	.word	0x42c80000

08003498 <LIS2MDL_MAG_SetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_MAG_SetOutputDataRate(LIS2MDL_Object_t *pObj, float Odr)
{
 8003498:	b580      	push	{r7, lr}
 800349a:	b084      	sub	sp, #16
 800349c:	af00      	add	r7, sp, #0
 800349e:	6078      	str	r0, [r7, #4]
 80034a0:	ed87 0a00 	vstr	s0, [r7]
  lis2mdl_odr_t new_odr;
  lis2mdl_cfg_reg_a_t reg_a;

  new_odr = (Odr <= 10.000f) ? LIS2MDL_ODR_10Hz
            : (Odr <= 20.000f) ? LIS2MDL_ODR_20Hz
 80034a4:	edd7 7a00 	vldr	s15, [r7]
 80034a8:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80034ac:	eef4 7ac7 	vcmpe.f32	s15, s14
 80034b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80034b4:	d801      	bhi.n	80034ba <LIS2MDL_MAG_SetOutputDataRate+0x22>
 80034b6:	2300      	movs	r3, #0
 80034b8:	e016      	b.n	80034e8 <LIS2MDL_MAG_SetOutputDataRate+0x50>
 80034ba:	edd7 7a00 	vldr	s15, [r7]
 80034be:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 80034c2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80034c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80034ca:	d801      	bhi.n	80034d0 <LIS2MDL_MAG_SetOutputDataRate+0x38>
 80034cc:	2301      	movs	r3, #1
 80034ce:	e00b      	b.n	80034e8 <LIS2MDL_MAG_SetOutputDataRate+0x50>
 80034d0:	edd7 7a00 	vldr	s15, [r7]
 80034d4:	ed9f 7a21 	vldr	s14, [pc, #132]	; 800355c <LIS2MDL_MAG_SetOutputDataRate+0xc4>
 80034d8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80034dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80034e0:	d801      	bhi.n	80034e6 <LIS2MDL_MAG_SetOutputDataRate+0x4e>
 80034e2:	2302      	movs	r3, #2
 80034e4:	e000      	b.n	80034e8 <LIS2MDL_MAG_SetOutputDataRate+0x50>
 80034e6:	2303      	movs	r3, #3
  new_odr = (Odr <= 10.000f) ? LIS2MDL_ODR_10Hz
 80034e8:	73fb      	strb	r3, [r7, #15]
            : (Odr <= 50.000f) ? LIS2MDL_ODR_50Hz
            :                    LIS2MDL_ODR_100Hz;

  if (pObj->IO.BusType == LSM6DSOX_SENSORHUB_LIS2MDL_I2C_BUS) /* LSM6DSOX SensorHub with LIS2MDL example */
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	689b      	ldr	r3, [r3, #8]
 80034ee:	2b03      	cmp	r3, #3
 80034f0:	d121      	bne.n	8003536 <LIS2MDL_MAG_SetOutputDataRate+0x9e>
  {
    /* Read configuration from CFG_REG_A reg */
    if (LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData(pObj, LIS2MDL_CFG_REG_A, (uint8_t *)&reg_a, 1) != LIS2MDL_OK)
 80034f2:	f107 020c 	add.w	r2, r7, #12
 80034f6:	2301      	movs	r3, #1
 80034f8:	2160      	movs	r1, #96	; 0x60
 80034fa:	6878      	ldr	r0, [r7, #4]
 80034fc:	f000 f9a6 	bl	800384c <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData>
 8003500:	4603      	mov	r3, r0
 8003502:	2b00      	cmp	r3, #0
 8003504:	d002      	beq.n	800350c <LIS2MDL_MAG_SetOutputDataRate+0x74>
    {
      return LIS2MDL_ERROR;
 8003506:	f04f 33ff 	mov.w	r3, #4294967295
 800350a:	e022      	b.n	8003552 <LIS2MDL_MAG_SetOutputDataRate+0xba>
    }

    /* Output data rate selection */
    reg_a.odr = new_odr;
 800350c:	7bfb      	ldrb	r3, [r7, #15]
 800350e:	f003 0303 	and.w	r3, r3, #3
 8003512:	b2da      	uxtb	r2, r3
 8003514:	7b3b      	ldrb	r3, [r7, #12]
 8003516:	f362 0383 	bfi	r3, r2, #2, #2
 800351a:	733b      	strb	r3, [r7, #12]

    /* Write configuration to CFG_REG_A reg */
    if (LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData(pObj, LIS2MDL_CFG_REG_A, (uint8_t *)&reg_a, 1) != LIS2MDL_OK)
 800351c:	f107 020c 	add.w	r2, r7, #12
 8003520:	2301      	movs	r3, #1
 8003522:	2160      	movs	r1, #96	; 0x60
 8003524:	6878      	ldr	r0, [r7, #4]
 8003526:	f000 fad0 	bl	8003aca <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData>
 800352a:	4603      	mov	r3, r0
 800352c:	2b00      	cmp	r3, #0
 800352e:	d00f      	beq.n	8003550 <LIS2MDL_MAG_SetOutputDataRate+0xb8>
    {
      return LIS2MDL_ERROR;
 8003530:	f04f 33ff 	mov.w	r3, #4294967295
 8003534:	e00d      	b.n	8003552 <LIS2MDL_MAG_SetOutputDataRate+0xba>
    }
  }
  else
  {
    if (lis2mdl_data_rate_set(&(pObj->Ctx), new_odr) != LIS2MDL_OK)
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	3320      	adds	r3, #32
 800353a:	7bfa      	ldrb	r2, [r7, #15]
 800353c:	4611      	mov	r1, r2
 800353e:	4618      	mov	r0, r3
 8003540:	f000 fc37 	bl	8003db2 <lis2mdl_data_rate_set>
 8003544:	4603      	mov	r3, r0
 8003546:	2b00      	cmp	r3, #0
 8003548:	d002      	beq.n	8003550 <LIS2MDL_MAG_SetOutputDataRate+0xb8>
    {
      return LIS2MDL_ERROR;
 800354a:	f04f 33ff 	mov.w	r3, #4294967295
 800354e:	e000      	b.n	8003552 <LIS2MDL_MAG_SetOutputDataRate+0xba>
    }
  }

  return LIS2MDL_OK;
 8003550:	2300      	movs	r3, #0
}
 8003552:	4618      	mov	r0, r3
 8003554:	3710      	adds	r7, #16
 8003556:	46bd      	mov	sp, r7
 8003558:	bd80      	pop	{r7, pc}
 800355a:	bf00      	nop
 800355c:	42480000 	.word	0x42480000

08003560 <LIS2MDL_MAG_GetFullScale>:
  * @param  pObj the device pObj
  * @param  FullScale pointer where the full scale is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_MAG_GetFullScale(LIS2MDL_Object_t *pObj, int32_t *FullScale)
{
 8003560:	b480      	push	{r7}
 8003562:	b083      	sub	sp, #12
 8003564:	af00      	add	r7, sp, #0
 8003566:	6078      	str	r0, [r7, #4]
 8003568:	6039      	str	r1, [r7, #0]
  *FullScale = 50;
 800356a:	683b      	ldr	r3, [r7, #0]
 800356c:	2232      	movs	r2, #50	; 0x32
 800356e:	601a      	str	r2, [r3, #0]

  return LIS2MDL_OK;
 8003570:	2300      	movs	r3, #0
}
 8003572:	4618      	mov	r0, r3
 8003574:	370c      	adds	r7, #12
 8003576:	46bd      	mov	sp, r7
 8003578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800357c:	4770      	bx	lr

0800357e <LIS2MDL_MAG_SetFullScale>:
  * @param  pObj the device pObj
  * @param  FullScale the functional full scale to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_MAG_SetFullScale(LIS2MDL_Object_t *pObj, int32_t FullScale)
{
 800357e:	b480      	push	{r7}
 8003580:	b083      	sub	sp, #12
 8003582:	af00      	add	r7, sp, #0
 8003584:	6078      	str	r0, [r7, #4]
 8003586:	6039      	str	r1, [r7, #0]
  return LIS2MDL_OK;
 8003588:	2300      	movs	r3, #0
}
 800358a:	4618      	mov	r0, r3
 800358c:	370c      	adds	r7, #12
 800358e:	46bd      	mov	sp, r7
 8003590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003594:	4770      	bx	lr

08003596 <LIS2MDL_MAG_GetAxesRaw>:
  * @param  pObj the device pObj
  * @param  Value pointer where the raw values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_MAG_GetAxesRaw(LIS2MDL_Object_t *pObj, LIS2MDL_AxesRaw_t *Value)
{
 8003596:	b580      	push	{r7, lr}
 8003598:	b084      	sub	sp, #16
 800359a:	af00      	add	r7, sp, #0
 800359c:	6078      	str	r0, [r7, #4]
 800359e:	6039      	str	r1, [r7, #0]
  lis2mdl_axis3bit16_t data_raw;

  /* Read raw data values. */
  if (lis2mdl_magnetic_raw_get(&(pObj->Ctx), data_raw.i16bit) != LIS2MDL_OK)
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	3320      	adds	r3, #32
 80035a4:	f107 0208 	add.w	r2, r7, #8
 80035a8:	4611      	mov	r1, r2
 80035aa:	4618      	mov	r0, r3
 80035ac:	f000 fc86 	bl	8003ebc <lis2mdl_magnetic_raw_get>
 80035b0:	4603      	mov	r3, r0
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d002      	beq.n	80035bc <LIS2MDL_MAG_GetAxesRaw+0x26>
  {
    return LIS2MDL_ERROR;
 80035b6:	f04f 33ff 	mov.w	r3, #4294967295
 80035ba:	e00c      	b.n	80035d6 <LIS2MDL_MAG_GetAxesRaw+0x40>
  }

  /* Format the data. */
  Value->x = data_raw.i16bit[0];
 80035bc:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 80035c0:	683b      	ldr	r3, [r7, #0]
 80035c2:	801a      	strh	r2, [r3, #0]
  Value->y = data_raw.i16bit[1];
 80035c4:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 80035c8:	683b      	ldr	r3, [r7, #0]
 80035ca:	805a      	strh	r2, [r3, #2]
  Value->z = data_raw.i16bit[2];
 80035cc:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 80035d0:	683b      	ldr	r3, [r7, #0]
 80035d2:	809a      	strh	r2, [r3, #4]

  return LIS2MDL_OK;
 80035d4:	2300      	movs	r3, #0
}
 80035d6:	4618      	mov	r0, r3
 80035d8:	3710      	adds	r7, #16
 80035da:	46bd      	mov	sp, r7
 80035dc:	bd80      	pop	{r7, pc}

080035de <LIS2MDL_MAG_GetAxes>:
  * @param  pObj the device pObj
  * @param  MagneticField pointer where the values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_MAG_GetAxes(LIS2MDL_Object_t *pObj, LIS2MDL_Axes_t *MagneticField)
{
 80035de:	b580      	push	{r7, lr}
 80035e0:	b088      	sub	sp, #32
 80035e2:	af00      	add	r7, sp, #0
 80035e4:	6078      	str	r0, [r7, #4]
 80035e6:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  lis2mdl_axis3bit16_t data_raw;
  float sensitivity;

  if (pObj->IO.BusType == LSM6DSOX_SENSORHUB_LIS2MDL_I2C_BUS) /* LSM6DSOX SensorHub with LIS2MDL example */
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	689b      	ldr	r3, [r3, #8]
 80035ec:	2b03      	cmp	r3, #3
 80035ee:	d137      	bne.n	8003660 <LIS2MDL_MAG_GetAxes+0x82>
  {
    /* Read raw data values. */
    if (LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData(pObj, LIS2MDL_OUTX_L_REG, buff, 6) != LIS2MDL_OK)
 80035f0:	f107 0218 	add.w	r2, r7, #24
 80035f4:	2306      	movs	r3, #6
 80035f6:	2168      	movs	r1, #104	; 0x68
 80035f8:	6878      	ldr	r0, [r7, #4]
 80035fa:	f000 f927 	bl	800384c <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData>
 80035fe:	4603      	mov	r3, r0
 8003600:	2b00      	cmp	r3, #0
 8003602:	d002      	beq.n	800360a <LIS2MDL_MAG_GetAxes+0x2c>
    {
      return LIS2MDL_ERROR;
 8003604:	f04f 33ff 	mov.w	r3, #4294967295
 8003608:	e06f      	b.n	80036ea <LIS2MDL_MAG_GetAxes+0x10c>
    }
    data_raw.i16bit[0] = (int16_t)buff[1];
 800360a:	7e7b      	ldrb	r3, [r7, #25]
 800360c:	b21b      	sxth	r3, r3
 800360e:	823b      	strh	r3, [r7, #16]
    data_raw.i16bit[0] = (data_raw.i16bit[0] * 256) + (int16_t)buff[0];
 8003610:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8003614:	b29b      	uxth	r3, r3
 8003616:	021b      	lsls	r3, r3, #8
 8003618:	b29a      	uxth	r2, r3
 800361a:	7e3b      	ldrb	r3, [r7, #24]
 800361c:	b29b      	uxth	r3, r3
 800361e:	4413      	add	r3, r2
 8003620:	b29b      	uxth	r3, r3
 8003622:	b21b      	sxth	r3, r3
 8003624:	823b      	strh	r3, [r7, #16]
    data_raw.i16bit[1] = (int16_t)buff[3];
 8003626:	7efb      	ldrb	r3, [r7, #27]
 8003628:	b21b      	sxth	r3, r3
 800362a:	827b      	strh	r3, [r7, #18]
    data_raw.i16bit[1] = (data_raw.i16bit[1] * 256) + (int16_t)buff[2];
 800362c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8003630:	b29b      	uxth	r3, r3
 8003632:	021b      	lsls	r3, r3, #8
 8003634:	b29a      	uxth	r2, r3
 8003636:	7ebb      	ldrb	r3, [r7, #26]
 8003638:	b29b      	uxth	r3, r3
 800363a:	4413      	add	r3, r2
 800363c:	b29b      	uxth	r3, r3
 800363e:	b21b      	sxth	r3, r3
 8003640:	827b      	strh	r3, [r7, #18]
    data_raw.i16bit[2] = (int16_t)buff[5];
 8003642:	7f7b      	ldrb	r3, [r7, #29]
 8003644:	b21b      	sxth	r3, r3
 8003646:	82bb      	strh	r3, [r7, #20]
    data_raw.i16bit[2] = (data_raw.i16bit[2] * 256) + (int16_t)buff[4];
 8003648:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800364c:	b29b      	uxth	r3, r3
 800364e:	021b      	lsls	r3, r3, #8
 8003650:	b29a      	uxth	r2, r3
 8003652:	7f3b      	ldrb	r3, [r7, #28]
 8003654:	b29b      	uxth	r3, r3
 8003656:	4413      	add	r3, r2
 8003658:	b29b      	uxth	r3, r3
 800365a:	b21b      	sxth	r3, r3
 800365c:	82bb      	strh	r3, [r7, #20]
 800365e:	e00d      	b.n	800367c <LIS2MDL_MAG_GetAxes+0x9e>
  }
  else
  {
    /* Read raw data values. */
    if (lis2mdl_magnetic_raw_get(&(pObj->Ctx), data_raw.i16bit) != LIS2MDL_OK)
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	3320      	adds	r3, #32
 8003664:	f107 0210 	add.w	r2, r7, #16
 8003668:	4611      	mov	r1, r2
 800366a:	4618      	mov	r0, r3
 800366c:	f000 fc26 	bl	8003ebc <lis2mdl_magnetic_raw_get>
 8003670:	4603      	mov	r3, r0
 8003672:	2b00      	cmp	r3, #0
 8003674:	d002      	beq.n	800367c <LIS2MDL_MAG_GetAxes+0x9e>
    {
      return LIS2MDL_ERROR;
 8003676:	f04f 33ff 	mov.w	r3, #4294967295
 800367a:	e036      	b.n	80036ea <LIS2MDL_MAG_GetAxes+0x10c>
    }
  }

  /* Get LIS2MDL actual sensitivity. */
  (void)LIS2MDL_MAG_GetSensitivity(pObj, &sensitivity);
 800367c:	f107 030c 	add.w	r3, r7, #12
 8003680:	4619      	mov	r1, r3
 8003682:	6878      	ldr	r0, [r7, #4]
 8003684:	f7ff feb1 	bl	80033ea <LIS2MDL_MAG_GetSensitivity>

  /* Calculate the data. */
  MagneticField->x = (int32_t)((float)((float)data_raw.i16bit[0] * sensitivity));
 8003688:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800368c:	ee07 3a90 	vmov	s15, r3
 8003690:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003694:	edd7 7a03 	vldr	s15, [r7, #12]
 8003698:	ee67 7a27 	vmul.f32	s15, s14, s15
 800369c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80036a0:	ee17 2a90 	vmov	r2, s15
 80036a4:	683b      	ldr	r3, [r7, #0]
 80036a6:	601a      	str	r2, [r3, #0]
  MagneticField->y = (int32_t)((float)((float)data_raw.i16bit[1] * sensitivity));
 80036a8:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80036ac:	ee07 3a90 	vmov	s15, r3
 80036b0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80036b4:	edd7 7a03 	vldr	s15, [r7, #12]
 80036b8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80036bc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80036c0:	ee17 2a90 	vmov	r2, s15
 80036c4:	683b      	ldr	r3, [r7, #0]
 80036c6:	605a      	str	r2, [r3, #4]
  MagneticField->z = (int32_t)((float)((float)data_raw.i16bit[2] * sensitivity));
 80036c8:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80036cc:	ee07 3a90 	vmov	s15, r3
 80036d0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80036d4:	edd7 7a03 	vldr	s15, [r7, #12]
 80036d8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80036dc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80036e0:	ee17 2a90 	vmov	r2, s15
 80036e4:	683b      	ldr	r3, [r7, #0]
 80036e6:	609a      	str	r2, [r3, #8]

  return LIS2MDL_OK;
 80036e8:	2300      	movs	r3, #0
}
 80036ea:	4618      	mov	r0, r3
 80036ec:	3720      	adds	r7, #32
 80036ee:	46bd      	mov	sp, r7
 80036f0:	bd80      	pop	{r7, pc}

080036f2 <LIS2MDL_Write_Reg>:
  * @param  Reg address to be written
  * @param  Data value to be written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_Write_Reg(LIS2MDL_Object_t *pObj, uint8_t Reg, uint8_t Data)
{
 80036f2:	b580      	push	{r7, lr}
 80036f4:	b082      	sub	sp, #8
 80036f6:	af00      	add	r7, sp, #0
 80036f8:	6078      	str	r0, [r7, #4]
 80036fa:	460b      	mov	r3, r1
 80036fc:	70fb      	strb	r3, [r7, #3]
 80036fe:	4613      	mov	r3, r2
 8003700:	70bb      	strb	r3, [r7, #2]
  if (pObj->IO.BusType == LSM6DSOX_SENSORHUB_LIS2MDL_I2C_BUS) /* LSM6DSOX SensorHub with LIS2MDL example */
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	689b      	ldr	r3, [r3, #8]
 8003706:	2b03      	cmp	r3, #3
 8003708:	d10b      	bne.n	8003722 <LIS2MDL_Write_Reg+0x30>
  {
    if (LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData(pObj, Reg, (uint8_t *)&Data, 1) != LIS2MDL_OK)
 800370a:	1cba      	adds	r2, r7, #2
 800370c:	78f9      	ldrb	r1, [r7, #3]
 800370e:	2301      	movs	r3, #1
 8003710:	6878      	ldr	r0, [r7, #4]
 8003712:	f000 f9da 	bl	8003aca <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData>
 8003716:	4603      	mov	r3, r0
 8003718:	2b00      	cmp	r3, #0
 800371a:	d010      	beq.n	800373e <LIS2MDL_Write_Reg+0x4c>
    {
      return LIS2MDL_ERROR;
 800371c:	f04f 33ff 	mov.w	r3, #4294967295
 8003720:	e00e      	b.n	8003740 <LIS2MDL_Write_Reg+0x4e>
    }
  }
  else
  {
    if (lis2mdl_write_reg(&(pObj->Ctx), Reg, &Data, 1) != LIS2MDL_OK)
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	f103 0020 	add.w	r0, r3, #32
 8003728:	1cba      	adds	r2, r7, #2
 800372a:	78f9      	ldrb	r1, [r7, #3]
 800372c:	2301      	movs	r3, #1
 800372e:	f000 fb02 	bl	8003d36 <lis2mdl_write_reg>
 8003732:	4603      	mov	r3, r0
 8003734:	2b00      	cmp	r3, #0
 8003736:	d002      	beq.n	800373e <LIS2MDL_Write_Reg+0x4c>
    {
      return LIS2MDL_ERROR;
 8003738:	f04f 33ff 	mov.w	r3, #4294967295
 800373c:	e000      	b.n	8003740 <LIS2MDL_Write_Reg+0x4e>
    }
  }

  return LIS2MDL_OK;
 800373e:	2300      	movs	r3, #0
}
 8003740:	4618      	mov	r0, r3
 8003742:	3708      	adds	r7, #8
 8003744:	46bd      	mov	sp, r7
 8003746:	bd80      	pop	{r7, pc}

08003748 <ReadMagRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t ReadMagRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8003748:	b590      	push	{r4, r7, lr}
 800374a:	b087      	sub	sp, #28
 800374c:	af00      	add	r7, sp, #0
 800374e:	60f8      	str	r0, [r7, #12]
 8003750:	607a      	str	r2, [r7, #4]
 8003752:	461a      	mov	r2, r3
 8003754:	460b      	mov	r3, r1
 8003756:	72fb      	strb	r3, [r7, #11]
 8003758:	4613      	mov	r3, r2
 800375a:	813b      	strh	r3, [r7, #8]
  LIS2MDL_Object_t *pObj = (LIS2MDL_Object_t *)Handle;
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	617b      	str	r3, [r7, #20]

  if (pObj->IO.BusType == LIS2MDL_I2C_BUS) /* I2C */
 8003760:	697b      	ldr	r3, [r7, #20]
 8003762:	689b      	ldr	r3, [r3, #8]
 8003764:	2b00      	cmp	r3, #0
 8003766:	d10e      	bne.n	8003786 <ReadMagRegWrap+0x3e>
  {
    /* Enable Multi-byte read */
    return pObj->IO.ReadReg(pObj->IO.Address, (Reg | 0x80U), pData, Length);
 8003768:	697b      	ldr	r3, [r7, #20]
 800376a:	695c      	ldr	r4, [r3, #20]
 800376c:	697b      	ldr	r3, [r7, #20]
 800376e:	7b1b      	ldrb	r3, [r3, #12]
 8003770:	b298      	uxth	r0, r3
 8003772:	7afb      	ldrb	r3, [r7, #11]
 8003774:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003778:	b2db      	uxtb	r3, r3
 800377a:	b299      	uxth	r1, r3
 800377c:	893b      	ldrh	r3, [r7, #8]
 800377e:	687a      	ldr	r2, [r7, #4]
 8003780:	47a0      	blx	r4
 8003782:	4603      	mov	r3, r0
 8003784:	e01d      	b.n	80037c2 <ReadMagRegWrap+0x7a>
  }
  else if (pObj->IO.BusType == LSM6DSOX_SENSORHUB_LIS2MDL_I2C_BUS) /* LSM6DSOX SensorHub with LIS2MDL example */
 8003786:	697b      	ldr	r3, [r7, #20]
 8003788:	689b      	ldr	r3, [r3, #8]
 800378a:	2b03      	cmp	r3, #3
 800378c:	d10b      	bne.n	80037a6 <ReadMagRegWrap+0x5e>
  {
    return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 800378e:	697b      	ldr	r3, [r7, #20]
 8003790:	695c      	ldr	r4, [r3, #20]
 8003792:	697b      	ldr	r3, [r7, #20]
 8003794:	7b1b      	ldrb	r3, [r3, #12]
 8003796:	b298      	uxth	r0, r3
 8003798:	7afb      	ldrb	r3, [r7, #11]
 800379a:	b299      	uxth	r1, r3
 800379c:	893b      	ldrh	r3, [r7, #8]
 800379e:	687a      	ldr	r2, [r7, #4]
 80037a0:	47a0      	blx	r4
 80037a2:	4603      	mov	r3, r0
 80037a4:	e00d      	b.n	80037c2 <ReadMagRegWrap+0x7a>
  }
  else   /* SPI 3-Wires or SPI 4-Wires */
  {
    /* Enable Multi-byte read */
    return pObj->IO.ReadReg(pObj->IO.Address, (Reg | 0x40U), pData, Length);
 80037a6:	697b      	ldr	r3, [r7, #20]
 80037a8:	695c      	ldr	r4, [r3, #20]
 80037aa:	697b      	ldr	r3, [r7, #20]
 80037ac:	7b1b      	ldrb	r3, [r3, #12]
 80037ae:	b298      	uxth	r0, r3
 80037b0:	7afb      	ldrb	r3, [r7, #11]
 80037b2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80037b6:	b2db      	uxtb	r3, r3
 80037b8:	b299      	uxth	r1, r3
 80037ba:	893b      	ldrh	r3, [r7, #8]
 80037bc:	687a      	ldr	r2, [r7, #4]
 80037be:	47a0      	blx	r4
 80037c0:	4603      	mov	r3, r0
  }
}
 80037c2:	4618      	mov	r0, r3
 80037c4:	371c      	adds	r7, #28
 80037c6:	46bd      	mov	sp, r7
 80037c8:	bd90      	pop	{r4, r7, pc}

080037ca <WriteMagRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t WriteMagRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 80037ca:	b590      	push	{r4, r7, lr}
 80037cc:	b087      	sub	sp, #28
 80037ce:	af00      	add	r7, sp, #0
 80037d0:	60f8      	str	r0, [r7, #12]
 80037d2:	607a      	str	r2, [r7, #4]
 80037d4:	461a      	mov	r2, r3
 80037d6:	460b      	mov	r3, r1
 80037d8:	72fb      	strb	r3, [r7, #11]
 80037da:	4613      	mov	r3, r2
 80037dc:	813b      	strh	r3, [r7, #8]
  LIS2MDL_Object_t *pObj = (LIS2MDL_Object_t *)Handle;
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	617b      	str	r3, [r7, #20]

  if (pObj->IO.BusType == LIS2MDL_I2C_BUS) /* I2C */
 80037e2:	697b      	ldr	r3, [r7, #20]
 80037e4:	689b      	ldr	r3, [r3, #8]
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d10e      	bne.n	8003808 <WriteMagRegWrap+0x3e>
  {
    /* Enable Multi-byte write */
    return pObj->IO.WriteReg(pObj->IO.Address, (Reg | 0x80U), pData, Length);
 80037ea:	697b      	ldr	r3, [r7, #20]
 80037ec:	691c      	ldr	r4, [r3, #16]
 80037ee:	697b      	ldr	r3, [r7, #20]
 80037f0:	7b1b      	ldrb	r3, [r3, #12]
 80037f2:	b298      	uxth	r0, r3
 80037f4:	7afb      	ldrb	r3, [r7, #11]
 80037f6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80037fa:	b2db      	uxtb	r3, r3
 80037fc:	b299      	uxth	r1, r3
 80037fe:	893b      	ldrh	r3, [r7, #8]
 8003800:	687a      	ldr	r2, [r7, #4]
 8003802:	47a0      	blx	r4
 8003804:	4603      	mov	r3, r0
 8003806:	e01d      	b.n	8003844 <WriteMagRegWrap+0x7a>
  }
  else if (pObj->IO.BusType == LSM6DSOX_SENSORHUB_LIS2MDL_I2C_BUS) /* LSM6DSOX SensorHub with LIS2MDL example */
 8003808:	697b      	ldr	r3, [r7, #20]
 800380a:	689b      	ldr	r3, [r3, #8]
 800380c:	2b03      	cmp	r3, #3
 800380e:	d10b      	bne.n	8003828 <WriteMagRegWrap+0x5e>
  {
    return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 8003810:	697b      	ldr	r3, [r7, #20]
 8003812:	691c      	ldr	r4, [r3, #16]
 8003814:	697b      	ldr	r3, [r7, #20]
 8003816:	7b1b      	ldrb	r3, [r3, #12]
 8003818:	b298      	uxth	r0, r3
 800381a:	7afb      	ldrb	r3, [r7, #11]
 800381c:	b299      	uxth	r1, r3
 800381e:	893b      	ldrh	r3, [r7, #8]
 8003820:	687a      	ldr	r2, [r7, #4]
 8003822:	47a0      	blx	r4
 8003824:	4603      	mov	r3, r0
 8003826:	e00d      	b.n	8003844 <WriteMagRegWrap+0x7a>
  }
  else   /* SPI 3-Wires or SPI 4-Wires */
  {
    /* Enable Multi-byte write */
    return pObj->IO.WriteReg(pObj->IO.Address, (Reg | 0x40U), pData, Length);
 8003828:	697b      	ldr	r3, [r7, #20]
 800382a:	691c      	ldr	r4, [r3, #16]
 800382c:	697b      	ldr	r3, [r7, #20]
 800382e:	7b1b      	ldrb	r3, [r3, #12]
 8003830:	b298      	uxth	r0, r3
 8003832:	7afb      	ldrb	r3, [r7, #11]
 8003834:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003838:	b2db      	uxtb	r3, r3
 800383a:	b299      	uxth	r1, r3
 800383c:	893b      	ldrh	r3, [r7, #8]
 800383e:	687a      	ldr	r2, [r7, #4]
 8003840:	47a0      	blx	r4
 8003842:	4603      	mov	r3, r0
  }
}
 8003844:	4618      	mov	r0, r3
 8003846:	371c      	adds	r7, #28
 8003848:	46bd      	mov	sp, r7
 800384a:	bd90      	pop	{r4, r7, pc}

0800384c <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData>:
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData(LIS2MDL_Object_t *pObj, uint8_t Reg, uint8_t *pData,
                                                     uint16_t Length)
{
 800384c:	b580      	push	{r7, lr}
 800384e:	b08c      	sub	sp, #48	; 0x30
 8003850:	af00      	add	r7, sp, #0
 8003852:	60f8      	str	r0, [r7, #12]
 8003854:	607a      	str	r2, [r7, #4]
 8003856:	461a      	mov	r2, r3
 8003858:	460b      	mov	r3, r1
 800385a:	72fb      	strb	r3, [r7, #11]
 800385c:	4613      	mov	r3, r2
 800385e:	813b      	strh	r3, [r7, #8]
  uint8_t lsm6dsox_func_cfg_access = 0x01U;
 8003860:	2301      	movs	r3, #1
 8003862:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  uint8_t shub_reg_access_en = 0x40U;
 8003866:	2340      	movs	r3, #64	; 0x40
 8003868:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
  uint8_t shub_reg_access_dis = 0x00U;
 800386c:	2300      	movs	r3, #0
 800386e:	f887 3020 	strb.w	r3, [r7, #32]
  uint8_t ext_sens_addr_read = LIS2MDL_I2C_ADD | 0x01U;
 8003872:	233d      	movs	r3, #61	; 0x3d
 8003874:	77fb      	strb	r3, [r7, #31]
  uint8_t slv0_add = 0x15U;
 8003876:	2315      	movs	r3, #21
 8003878:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
  uint8_t slv0_subadd = 0x16U;
 800387c:	2316      	movs	r3, #22
 800387e:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  uint8_t slave0_config = 0x17U;
 8003882:	2317      	movs	r3, #23
 8003884:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  uint8_t master_config = 0x14U;
 8003888:	2314      	movs	r3, #20
 800388a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
  uint8_t write_once_i2c_en = 0x44U;
 800388e:	2344      	movs	r3, #68	; 0x44
 8003890:	77bb      	strb	r3, [r7, #30]
  uint8_t sensor_hub_1 = 0x02U;
 8003892:	2302      	movs	r3, #2
 8003894:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  uint8_t status_master_mainpage = 0x39U;
 8003898:	2339      	movs	r3, #57	; 0x39
 800389a:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
  uint8_t sens_hub_endop = 0x01U;
 800389e:	2301      	movs	r3, #1
 80038a0:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
  uint8_t lsm6dsox_outx_h_a = 0x29U;
 80038a4:	2329      	movs	r3, #41	; 0x29
 80038a6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint8_t lsm6dsox_status_reg = 0x1EU;
 80038aa:	231e      	movs	r3, #30
 80038ac:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  uint8_t xlda = 0x01U;
 80038b0:	2301      	movs	r3, #1
 80038b2:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  uint8_t len = (uint8_t)Length;
 80038b6:	893b      	ldrh	r3, [r7, #8]
 80038b8:	b2db      	uxtb	r3, r3
 80038ba:	777b      	strb	r3, [r7, #29]
  uint8_t lsm6dsox_ctrl1_xl = 0x10U;
 80038bc:	2310      	movs	r3, #16
 80038be:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  uint8_t lsm6dsox_xl_prev_odr;
  uint8_t lsm6dsox_xl_odr_off = 0x00U;
 80038c2:	2300      	movs	r3, #0
 80038c4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint8_t lsm6dsox_xl_odr_104hz = 0x40U;
 80038c8:	2340      	movs	r3, #64	; 0x40
 80038ca:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  uint8_t data;
  uint8_t data_array[6];

  /* Enable access to sensor hub registers */
  if (lis2mdl_write_reg(&(pObj->Ctx), lsm6dsox_func_cfg_access, &shub_reg_access_en, 1) != LIS2MDL_OK)
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	f103 0020 	add.w	r0, r3, #32
 80038d4:	f107 0221 	add.w	r2, r7, #33	; 0x21
 80038d8:	f897 102f 	ldrb.w	r1, [r7, #47]	; 0x2f
 80038dc:	2301      	movs	r3, #1
 80038de:	f000 fa2a 	bl	8003d36 <lis2mdl_write_reg>
 80038e2:	4603      	mov	r3, r0
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d002      	beq.n	80038ee <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0xa2>
  {
    return LIS2MDL_ERROR;
 80038e8:	f04f 33ff 	mov.w	r3, #4294967295
 80038ec:	e0e9      	b.n	8003ac2 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
  }

  /* Configure external device address, Enable read operation (rw_0 = 1) */
  if (lis2mdl_write_reg(&(pObj->Ctx), slv0_add, &ext_sens_addr_read, 1) != LIS2MDL_OK)
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	f103 0020 	add.w	r0, r3, #32
 80038f4:	f107 021f 	add.w	r2, r7, #31
 80038f8:	f897 102e 	ldrb.w	r1, [r7, #46]	; 0x2e
 80038fc:	2301      	movs	r3, #1
 80038fe:	f000 fa1a 	bl	8003d36 <lis2mdl_write_reg>
 8003902:	4603      	mov	r3, r0
 8003904:	2b00      	cmp	r3, #0
 8003906:	d002      	beq.n	800390e <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0xc2>
  {
    return LIS2MDL_ERROR;
 8003908:	f04f 33ff 	mov.w	r3, #4294967295
 800390c:	e0d9      	b.n	8003ac2 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
  }

  /* Configure address of the LIS2MDL register to be read */
  if (lis2mdl_write_reg(&(pObj->Ctx), slv0_subadd, &Reg, 1) != LIS2MDL_OK)
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	f103 0020 	add.w	r0, r3, #32
 8003914:	f107 020b 	add.w	r2, r7, #11
 8003918:	f897 102d 	ldrb.w	r1, [r7, #45]	; 0x2d
 800391c:	2301      	movs	r3, #1
 800391e:	f000 fa0a 	bl	8003d36 <lis2mdl_write_reg>
 8003922:	4603      	mov	r3, r0
 8003924:	2b00      	cmp	r3, #0
 8003926:	d002      	beq.n	800392e <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0xe2>
  {
    return LIS2MDL_ERROR;
 8003928:	f04f 33ff 	mov.w	r3, #4294967295
 800392c:	e0c9      	b.n	8003ac2 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
  }

  /* Read required number of bytes (up to 6), SHUB_ODR = 104 Hz */
  if (lis2mdl_write_reg(&(pObj->Ctx), slave0_config, &len, 1) != LIS2MDL_OK)
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	f103 0020 	add.w	r0, r3, #32
 8003934:	f107 021d 	add.w	r2, r7, #29
 8003938:	f897 102c 	ldrb.w	r1, [r7, #44]	; 0x2c
 800393c:	2301      	movs	r3, #1
 800393e:	f000 f9fa 	bl	8003d36 <lis2mdl_write_reg>
 8003942:	4603      	mov	r3, r0
 8003944:	2b00      	cmp	r3, #0
 8003946:	d002      	beq.n	800394e <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x102>
  {
    return LIS2MDL_ERROR;
 8003948:	f04f 33ff 	mov.w	r3, #4294967295
 800394c:	e0b9      	b.n	8003ac2 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
  }

  /* WRITE_ONCE is mandatory for read, I2C master enabled using slave 0, I2C pull-ups disabled */
  if (lis2mdl_write_reg(&(pObj->Ctx), master_config, &write_once_i2c_en, 1) != LIS2MDL_OK)
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	f103 0020 	add.w	r0, r3, #32
 8003954:	f107 021e 	add.w	r2, r7, #30
 8003958:	f897 102b 	ldrb.w	r1, [r7, #43]	; 0x2b
 800395c:	2301      	movs	r3, #1
 800395e:	f000 f9ea 	bl	8003d36 <lis2mdl_write_reg>
 8003962:	4603      	mov	r3, r0
 8003964:	2b00      	cmp	r3, #0
 8003966:	d002      	beq.n	800396e <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x122>
  {
    return LIS2MDL_ERROR;
 8003968:	f04f 33ff 	mov.w	r3, #4294967295
 800396c:	e0a9      	b.n	8003ac2 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
  }

  /* Disable access to sensor hub registers */
  if (lis2mdl_write_reg(&(pObj->Ctx), lsm6dsox_func_cfg_access, &shub_reg_access_dis, 1) != LIS2MDL_OK)
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	f103 0020 	add.w	r0, r3, #32
 8003974:	f107 0220 	add.w	r2, r7, #32
 8003978:	f897 102f 	ldrb.w	r1, [r7, #47]	; 0x2f
 800397c:	2301      	movs	r3, #1
 800397e:	f000 f9da 	bl	8003d36 <lis2mdl_write_reg>
 8003982:	4603      	mov	r3, r0
 8003984:	2b00      	cmp	r3, #0
 8003986:	d002      	beq.n	800398e <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x142>
  {
    return LIS2MDL_ERROR;
 8003988:	f04f 33ff 	mov.w	r3, #4294967295
 800398c:	e099      	b.n	8003ac2 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
  }

  /* Read LSM6DSOX ODR */
  if (lis2mdl_read_reg(&(pObj->Ctx), lsm6dsox_ctrl1_xl, &lsm6dsox_xl_prev_odr, 1) != LIS2MDL_OK)
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	f103 0020 	add.w	r0, r3, #32
 8003994:	f107 021c 	add.w	r2, r7, #28
 8003998:	f897 1024 	ldrb.w	r1, [r7, #36]	; 0x24
 800399c:	2301      	movs	r3, #1
 800399e:	f000 f9b2 	bl	8003d06 <lis2mdl_read_reg>
 80039a2:	4603      	mov	r3, r0
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d002      	beq.n	80039ae <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x162>
  {
    return LIS2MDL_ERROR;
 80039a8:	f04f 33ff 	mov.w	r3, #4294967295
 80039ac:	e089      	b.n	8003ac2 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
  }

  /* Set XL_ODR_104HZ if the accelerometer is disabled */
  if (lsm6dsox_xl_prev_odr == lsm6dsox_xl_odr_off)
 80039ae:	7f3b      	ldrb	r3, [r7, #28]
 80039b0:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 80039b4:	429a      	cmp	r2, r3
 80039b6:	d102      	bne.n	80039be <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x172>
  {
    lsm6dsox_xl_prev_odr = lsm6dsox_xl_odr_104hz;
 80039b8:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80039bc:	773b      	strb	r3, [r7, #28]
  }

  /* Enable accelerometer to trigger Sensor Hub operation */
  if (lis2mdl_write_reg(&(pObj->Ctx), lsm6dsox_ctrl1_xl, &lsm6dsox_xl_prev_odr, 1) != LIS2MDL_OK)
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	f103 0020 	add.w	r0, r3, #32
 80039c4:	f107 021c 	add.w	r2, r7, #28
 80039c8:	f897 1024 	ldrb.w	r1, [r7, #36]	; 0x24
 80039cc:	2301      	movs	r3, #1
 80039ce:	f000 f9b2 	bl	8003d36 <lis2mdl_write_reg>
 80039d2:	4603      	mov	r3, r0
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d002      	beq.n	80039de <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x192>
  {
    return LIS2MDL_ERROR;
 80039d8:	f04f 33ff 	mov.w	r3, #4294967295
 80039dc:	e071      	b.n	8003ac2 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
  }

  /* Read ACC data starting from LSM6DSOX OUTX_H_A register to clear accelerometer data-ready XLDA */
  if (lis2mdl_read_reg(&(pObj->Ctx), lsm6dsox_outx_h_a, data_array, 6) != LIS2MDL_OK)
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	f103 0020 	add.w	r0, r3, #32
 80039e4:	f107 0214 	add.w	r2, r7, #20
 80039e8:	f897 1027 	ldrb.w	r1, [r7, #39]	; 0x27
 80039ec:	2306      	movs	r3, #6
 80039ee:	f000 f98a 	bl	8003d06 <lis2mdl_read_reg>
 80039f2:	4603      	mov	r3, r0
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d002      	beq.n	80039fe <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x1b2>
  {
    return LIS2MDL_ERROR;
 80039f8:	f04f 33ff 	mov.w	r3, #4294967295
 80039fc:	e061      	b.n	8003ac2 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
  }

  /* Poll LSM6DSOX LSM6DSOX_STATUS_REG until XLDA = 1 (Wait for sensor hub trigger) */
  do
  {
    if (lis2mdl_read_reg(&(pObj->Ctx), lsm6dsox_status_reg, &data, 1) != LIS2MDL_OK)
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	f103 0020 	add.w	r0, r3, #32
 8003a04:	f107 021b 	add.w	r2, r7, #27
 8003a08:	f897 1026 	ldrb.w	r1, [r7, #38]	; 0x26
 8003a0c:	2301      	movs	r3, #1
 8003a0e:	f000 f97a 	bl	8003d06 <lis2mdl_read_reg>
 8003a12:	4603      	mov	r3, r0
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d002      	beq.n	8003a1e <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x1d2>
    {
      return LIS2MDL_ERROR;
 8003a18:	f04f 33ff 	mov.w	r3, #4294967295
 8003a1c:	e051      	b.n	8003ac2 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
    }
  } while ((data & xlda) != xlda);
 8003a1e:	7efa      	ldrb	r2, [r7, #27]
 8003a20:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8003a24:	4013      	ands	r3, r2
 8003a26:	b2db      	uxtb	r3, r3
 8003a28:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
 8003a2c:	429a      	cmp	r2, r3
 8003a2e:	d1e6      	bne.n	80039fe <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x1b2>

  /* Poll LSM6DSOX SensorHub SENS_HUB_ENDOP bit in STATUS_MASTER_MAINPAGE reg until the end of SW write operations */
  do
  {
    if (lis2mdl_read_reg(&(pObj->Ctx), status_master_mainpage, &data, 1) != LIS2MDL_OK)
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	f103 0020 	add.w	r0, r3, #32
 8003a36:	f107 021b 	add.w	r2, r7, #27
 8003a3a:	f897 1029 	ldrb.w	r1, [r7, #41]	; 0x29
 8003a3e:	2301      	movs	r3, #1
 8003a40:	f000 f961 	bl	8003d06 <lis2mdl_read_reg>
 8003a44:	4603      	mov	r3, r0
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d002      	beq.n	8003a50 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x204>
    {
      return LIS2MDL_ERROR;
 8003a4a:	f04f 33ff 	mov.w	r3, #4294967295
 8003a4e:	e038      	b.n	8003ac2 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
    }
  } while ((data & sens_hub_endop) != sens_hub_endop);
 8003a50:	7efa      	ldrb	r2, [r7, #27]
 8003a52:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8003a56:	4013      	ands	r3, r2
 8003a58:	b2db      	uxtb	r3, r3
 8003a5a:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8003a5e:	429a      	cmp	r2, r3
 8003a60:	d1e6      	bne.n	8003a30 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x1e4>

  /* Enable access to sensor hub registers */
  if (lis2mdl_write_reg(&(pObj->Ctx), lsm6dsox_func_cfg_access, &shub_reg_access_en, 1) != LIS2MDL_OK)
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	f103 0020 	add.w	r0, r3, #32
 8003a68:	f107 0221 	add.w	r2, r7, #33	; 0x21
 8003a6c:	f897 102f 	ldrb.w	r1, [r7, #47]	; 0x2f
 8003a70:	2301      	movs	r3, #1
 8003a72:	f000 f960 	bl	8003d36 <lis2mdl_write_reg>
 8003a76:	4603      	mov	r3, r0
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d002      	beq.n	8003a82 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x236>
  {
    return LIS2MDL_ERROR;
 8003a7c:	f04f 33ff 	mov.w	r3, #4294967295
 8003a80:	e01f      	b.n	8003ac2 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
  }

  /* Read data from LSM6DSOX SensorHub regs containing values from required LIS2MDL regs */
  if (lis2mdl_read_reg(&(pObj->Ctx), sensor_hub_1, pData, Length) != LIS2MDL_OK)
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	f103 0020 	add.w	r0, r3, #32
 8003a88:	893b      	ldrh	r3, [r7, #8]
 8003a8a:	f897 102a 	ldrb.w	r1, [r7, #42]	; 0x2a
 8003a8e:	687a      	ldr	r2, [r7, #4]
 8003a90:	f000 f939 	bl	8003d06 <lis2mdl_read_reg>
 8003a94:	4603      	mov	r3, r0
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d002      	beq.n	8003aa0 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x254>
  {
    return LIS2MDL_ERROR;
 8003a9a:	f04f 33ff 	mov.w	r3, #4294967295
 8003a9e:	e010      	b.n	8003ac2 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
  }

  /* Disable access to sensor hub registers */
  if (lis2mdl_write_reg(&(pObj->Ctx), lsm6dsox_func_cfg_access, &shub_reg_access_dis, 1) != LIS2MDL_OK)
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	f103 0020 	add.w	r0, r3, #32
 8003aa6:	f107 0220 	add.w	r2, r7, #32
 8003aaa:	f897 102f 	ldrb.w	r1, [r7, #47]	; 0x2f
 8003aae:	2301      	movs	r3, #1
 8003ab0:	f000 f941 	bl	8003d36 <lis2mdl_write_reg>
 8003ab4:	4603      	mov	r3, r0
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d002      	beq.n	8003ac0 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x274>
  {
    return LIS2MDL_ERROR;
 8003aba:	f04f 33ff 	mov.w	r3, #4294967295
 8003abe:	e000      	b.n	8003ac2 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
  }

  return LIS2MDL_OK;
 8003ac0:	2300      	movs	r3, #0
}
 8003ac2:	4618      	mov	r0, r3
 8003ac4:	3730      	adds	r7, #48	; 0x30
 8003ac6:	46bd      	mov	sp, r7
 8003ac8:	bd80      	pop	{r7, pc}

08003aca <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData>:
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData(LIS2MDL_Object_t *pObj, uint8_t Reg, uint8_t *pData,
                                                      uint16_t Length)
{
 8003aca:	b580      	push	{r7, lr}
 8003acc:	b08c      	sub	sp, #48	; 0x30
 8003ace:	af00      	add	r7, sp, #0
 8003ad0:	60f8      	str	r0, [r7, #12]
 8003ad2:	607a      	str	r2, [r7, #4]
 8003ad4:	461a      	mov	r2, r3
 8003ad6:	460b      	mov	r3, r1
 8003ad8:	72fb      	strb	r3, [r7, #11]
 8003ada:	4613      	mov	r3, r2
 8003adc:	813b      	strh	r3, [r7, #8]
  uint8_t lsm6dsox_func_cfg_access = 0x01U;
 8003ade:	2301      	movs	r3, #1
 8003ae0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  uint8_t shub_reg_access_en = 0x40U;
 8003ae4:	2340      	movs	r3, #64	; 0x40
 8003ae6:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
  uint8_t shub_reg_access_dis = 0x00U;
 8003aea:	2300      	movs	r3, #0
 8003aec:	f887 3020 	strb.w	r3, [r7, #32]
  uint8_t ext_sens_addr_write = LIS2MDL_I2C_ADD & 0xFEU;
 8003af0:	233c      	movs	r3, #60	; 0x3c
 8003af2:	77fb      	strb	r3, [r7, #31]
  uint8_t slv0_add = 0x15U;
 8003af4:	2315      	movs	r3, #21
 8003af6:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
  uint8_t slv0_subadd = 0x16U;
 8003afa:	2316      	movs	r3, #22
 8003afc:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  uint8_t slave0_config = 0x17U;
 8003b00:	2317      	movs	r3, #23
 8003b02:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  uint8_t shub_odr_104 = 0x00U;
 8003b06:	2300      	movs	r3, #0
 8003b08:	77bb      	strb	r3, [r7, #30]
  uint8_t master_config = 0x14U;
 8003b0a:	2314      	movs	r3, #20
 8003b0c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
  uint8_t write_once_i2c_en = 0x44U;
 8003b10:	2344      	movs	r3, #68	; 0x44
 8003b12:	777b      	strb	r3, [r7, #29]
  uint8_t status_master_mainpage = 0x39U;
 8003b14:	2339      	movs	r3, #57	; 0x39
 8003b16:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  uint8_t wr_once_done = 0x80U;
 8003b1a:	2380      	movs	r3, #128	; 0x80
 8003b1c:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
  uint8_t lsm6dsox_outx_h_a = 0x29U;
 8003b20:	2329      	movs	r3, #41	; 0x29
 8003b22:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
  uint8_t lsm6dsox_status_reg = 0x1EU;
 8003b26:	231e      	movs	r3, #30
 8003b28:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint8_t xlda = 0x01U;
 8003b2c:	2301      	movs	r3, #1
 8003b2e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  uint8_t lsm6dsox_ctrl1_xl = 0x10U;
 8003b32:	2310      	movs	r3, #16
 8003b34:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  uint8_t lsm6dsox_xl_prev_odr;
  uint8_t lsm6dsox_xl_odr_off = 0x00U;
 8003b38:	2300      	movs	r3, #0
 8003b3a:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  uint8_t lsm6dsox_xl_odr_104hz = 0x40U;
 8003b3e:	2340      	movs	r3, #64	; 0x40
 8003b40:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint8_t datawrite_slv0 = 0x0EU;
 8003b44:	230e      	movs	r3, #14
 8003b46:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  uint8_t data;
  uint8_t data_array[6];

  /* Enable access to sensor hub registers */
  if (lis2mdl_write_reg(&(pObj->Ctx), lsm6dsox_func_cfg_access, &shub_reg_access_en, 1) != LIS2MDL_OK)
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	f103 0020 	add.w	r0, r3, #32
 8003b50:	f107 0221 	add.w	r2, r7, #33	; 0x21
 8003b54:	f897 102f 	ldrb.w	r1, [r7, #47]	; 0x2f
 8003b58:	2301      	movs	r3, #1
 8003b5a:	f000 f8ec 	bl	8003d36 <lis2mdl_write_reg>
 8003b5e:	4603      	mov	r3, r0
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d002      	beq.n	8003b6a <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0xa0>
  {
    return LIS2MDL_ERROR;
 8003b64:	f04f 33ff 	mov.w	r3, #4294967295
 8003b68:	e0c9      	b.n	8003cfe <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x234>
  }

  /* Configure external device address, Enable write operation (rw_0 = 0) */
  if (lis2mdl_write_reg(&(pObj->Ctx), slv0_add, &ext_sens_addr_write, 1) != LIS2MDL_OK)
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	f103 0020 	add.w	r0, r3, #32
 8003b70:	f107 021f 	add.w	r2, r7, #31
 8003b74:	f897 102e 	ldrb.w	r1, [r7, #46]	; 0x2e
 8003b78:	2301      	movs	r3, #1
 8003b7a:	f000 f8dc 	bl	8003d36 <lis2mdl_write_reg>
 8003b7e:	4603      	mov	r3, r0
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d002      	beq.n	8003b8a <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0xc0>
  {
    return LIS2MDL_ERROR;
 8003b84:	f04f 33ff 	mov.w	r3, #4294967295
 8003b88:	e0b9      	b.n	8003cfe <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x234>
  }

  /* Configure address of the LIS2MDL register to be written to */
  if (lis2mdl_write_reg(&(pObj->Ctx), slv0_subadd, &Reg, 1) != LIS2MDL_OK)
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	f103 0020 	add.w	r0, r3, #32
 8003b90:	f107 020b 	add.w	r2, r7, #11
 8003b94:	f897 102d 	ldrb.w	r1, [r7, #45]	; 0x2d
 8003b98:	2301      	movs	r3, #1
 8003b9a:	f000 f8cc 	bl	8003d36 <lis2mdl_write_reg>
 8003b9e:	4603      	mov	r3, r0
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d002      	beq.n	8003baa <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0xe0>
  {
    return LIS2MDL_ERROR;
 8003ba4:	f04f 33ff 	mov.w	r3, #4294967295
 8003ba8:	e0a9      	b.n	8003cfe <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x234>
  }

  /* Set SHUB_ODR = 104 Hz */
  if (lis2mdl_write_reg(&(pObj->Ctx), slave0_config, &shub_odr_104, 1) != LIS2MDL_OK)
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	f103 0020 	add.w	r0, r3, #32
 8003bb0:	f107 021e 	add.w	r2, r7, #30
 8003bb4:	f897 102c 	ldrb.w	r1, [r7, #44]	; 0x2c
 8003bb8:	2301      	movs	r3, #1
 8003bba:	f000 f8bc 	bl	8003d36 <lis2mdl_write_reg>
 8003bbe:	4603      	mov	r3, r0
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d002      	beq.n	8003bca <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x100>
  {
    return LIS2MDL_ERROR;
 8003bc4:	f04f 33ff 	mov.w	r3, #4294967295
 8003bc8:	e099      	b.n	8003cfe <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x234>
  }

  /* Store data to be written to LIS2MDL in LSM6DSOX SH reg */
  if (lis2mdl_write_reg(&(pObj->Ctx), datawrite_slv0, pData, 1) != LIS2MDL_OK)
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	f103 0020 	add.w	r0, r3, #32
 8003bd0:	f897 1022 	ldrb.w	r1, [r7, #34]	; 0x22
 8003bd4:	2301      	movs	r3, #1
 8003bd6:	687a      	ldr	r2, [r7, #4]
 8003bd8:	f000 f8ad 	bl	8003d36 <lis2mdl_write_reg>
 8003bdc:	4603      	mov	r3, r0
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d002      	beq.n	8003be8 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x11e>
  {
    return LIS2MDL_ERROR;
 8003be2:	f04f 33ff 	mov.w	r3, #4294967295
 8003be6:	e08a      	b.n	8003cfe <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x234>
  }

  /* WRITE_ONCE enabled for single write, I2C master enabled using slave 0, I2C pull-ups disabled */
  if (lis2mdl_write_reg(&(pObj->Ctx), master_config, &write_once_i2c_en, 1) != LIS2MDL_OK)
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	f103 0020 	add.w	r0, r3, #32
 8003bee:	f107 021d 	add.w	r2, r7, #29
 8003bf2:	f897 102b 	ldrb.w	r1, [r7, #43]	; 0x2b
 8003bf6:	2301      	movs	r3, #1
 8003bf8:	f000 f89d 	bl	8003d36 <lis2mdl_write_reg>
 8003bfc:	4603      	mov	r3, r0
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d002      	beq.n	8003c08 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x13e>
  {
    return LIS2MDL_ERROR;
 8003c02:	f04f 33ff 	mov.w	r3, #4294967295
 8003c06:	e07a      	b.n	8003cfe <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x234>
  }

  /* Disable access to sensor hub registers */
  if (lis2mdl_write_reg(&(pObj->Ctx), lsm6dsox_func_cfg_access, &shub_reg_access_dis, 1) != LIS2MDL_OK)
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	f103 0020 	add.w	r0, r3, #32
 8003c0e:	f107 0220 	add.w	r2, r7, #32
 8003c12:	f897 102f 	ldrb.w	r1, [r7, #47]	; 0x2f
 8003c16:	2301      	movs	r3, #1
 8003c18:	f000 f88d 	bl	8003d36 <lis2mdl_write_reg>
 8003c1c:	4603      	mov	r3, r0
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d002      	beq.n	8003c28 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x15e>
  {
    return LIS2MDL_ERROR;
 8003c22:	f04f 33ff 	mov.w	r3, #4294967295
 8003c26:	e06a      	b.n	8003cfe <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x234>
  }

  /* Read LSM6DSOX ODR */
  if (lis2mdl_read_reg(&(pObj->Ctx), lsm6dsox_ctrl1_xl, &lsm6dsox_xl_prev_odr, 1) != LIS2MDL_OK)
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	f103 0020 	add.w	r0, r3, #32
 8003c2e:	f107 021c 	add.w	r2, r7, #28
 8003c32:	f897 1025 	ldrb.w	r1, [r7, #37]	; 0x25
 8003c36:	2301      	movs	r3, #1
 8003c38:	f000 f865 	bl	8003d06 <lis2mdl_read_reg>
 8003c3c:	4603      	mov	r3, r0
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d002      	beq.n	8003c48 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x17e>
  {
    return LIS2MDL_ERROR;
 8003c42:	f04f 33ff 	mov.w	r3, #4294967295
 8003c46:	e05a      	b.n	8003cfe <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x234>
  }

  /* Set XL_ODR_104HZ if the accelerometer is disabled */
  if (lsm6dsox_xl_prev_odr == lsm6dsox_xl_odr_off)
 8003c48:	7f3b      	ldrb	r3, [r7, #28]
 8003c4a:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8003c4e:	429a      	cmp	r2, r3
 8003c50:	d102      	bne.n	8003c58 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x18e>
  {
    lsm6dsox_xl_prev_odr = lsm6dsox_xl_odr_104hz;
 8003c52:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003c56:	773b      	strb	r3, [r7, #28]
  }

  /* Enable accelerometer to trigger Sensor Hub operation */
  if (lis2mdl_write_reg(&(pObj->Ctx), lsm6dsox_ctrl1_xl, &lsm6dsox_xl_prev_odr, 1) != LIS2MDL_OK)
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	f103 0020 	add.w	r0, r3, #32
 8003c5e:	f107 021c 	add.w	r2, r7, #28
 8003c62:	f897 1025 	ldrb.w	r1, [r7, #37]	; 0x25
 8003c66:	2301      	movs	r3, #1
 8003c68:	f000 f865 	bl	8003d36 <lis2mdl_write_reg>
 8003c6c:	4603      	mov	r3, r0
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d002      	beq.n	8003c78 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x1ae>
  {
    return LIS2MDL_ERROR;
 8003c72:	f04f 33ff 	mov.w	r3, #4294967295
 8003c76:	e042      	b.n	8003cfe <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x234>
  }

  /* Read ACC data starting from LSM6DSOX OUTX_H_A register to clear accelerometer data-ready XLDA */
  if (lis2mdl_read_reg(&(pObj->Ctx), lsm6dsox_outx_h_a, data_array, 6) != LIS2MDL_OK)
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	f103 0020 	add.w	r0, r3, #32
 8003c7e:	f107 0214 	add.w	r2, r7, #20
 8003c82:	f897 1028 	ldrb.w	r1, [r7, #40]	; 0x28
 8003c86:	2306      	movs	r3, #6
 8003c88:	f000 f83d 	bl	8003d06 <lis2mdl_read_reg>
 8003c8c:	4603      	mov	r3, r0
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d002      	beq.n	8003c98 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x1ce>
  {
    return LIS2MDL_ERROR;
 8003c92:	f04f 33ff 	mov.w	r3, #4294967295
 8003c96:	e032      	b.n	8003cfe <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x234>
  }

  /* Poll LSM6DSOX LSM6DSOX_STATUS_REG until XLDA = 1 (Wait for sensor hub trigger) */
  do
  {
    if (lis2mdl_read_reg(&(pObj->Ctx), lsm6dsox_status_reg, &data, 1) != LIS2MDL_OK)
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	f103 0020 	add.w	r0, r3, #32
 8003c9e:	f107 021b 	add.w	r2, r7, #27
 8003ca2:	f897 1027 	ldrb.w	r1, [r7, #39]	; 0x27
 8003ca6:	2301      	movs	r3, #1
 8003ca8:	f000 f82d 	bl	8003d06 <lis2mdl_read_reg>
 8003cac:	4603      	mov	r3, r0
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d002      	beq.n	8003cb8 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x1ee>
    {
      return LIS2MDL_ERROR;
 8003cb2:	f04f 33ff 	mov.w	r3, #4294967295
 8003cb6:	e022      	b.n	8003cfe <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x234>
    }
  } while ((data & xlda) != xlda);
 8003cb8:	7efa      	ldrb	r2, [r7, #27]
 8003cba:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8003cbe:	4013      	ands	r3, r2
 8003cc0:	b2db      	uxtb	r3, r3
 8003cc2:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8003cc6:	429a      	cmp	r2, r3
 8003cc8:	d1e6      	bne.n	8003c98 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x1ce>

  /* Poll LSM6DSOX SensorHub WR_ONCE_DONE bit in STATUS_MASTER_MAINPAGE reg until the end of SW write operations */
  do
  {
    if (lis2mdl_read_reg(&(pObj->Ctx), status_master_mainpage, &data, 1) != LIS2MDL_OK)
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	f103 0020 	add.w	r0, r3, #32
 8003cd0:	f107 021b 	add.w	r2, r7, #27
 8003cd4:	f897 102a 	ldrb.w	r1, [r7, #42]	; 0x2a
 8003cd8:	2301      	movs	r3, #1
 8003cda:	f000 f814 	bl	8003d06 <lis2mdl_read_reg>
 8003cde:	4603      	mov	r3, r0
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d002      	beq.n	8003cea <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x220>
    {
      return LIS2MDL_ERROR;
 8003ce4:	f04f 33ff 	mov.w	r3, #4294967295
 8003ce8:	e009      	b.n	8003cfe <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x234>
    }
  } while ((data & wr_once_done) != wr_once_done);
 8003cea:	7efa      	ldrb	r2, [r7, #27]
 8003cec:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8003cf0:	4013      	ands	r3, r2
 8003cf2:	b2db      	uxtb	r3, r3
 8003cf4:	f897 2029 	ldrb.w	r2, [r7, #41]	; 0x29
 8003cf8:	429a      	cmp	r2, r3
 8003cfa:	d1e6      	bne.n	8003cca <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x200>

  return LIS2MDL_OK;
 8003cfc:	2300      	movs	r3, #0
}
 8003cfe:	4618      	mov	r0, r3
 8003d00:	3730      	adds	r7, #48	; 0x30
 8003d02:	46bd      	mov	sp, r7
 8003d04:	bd80      	pop	{r7, pc}

08003d06 <lis2mdl_read_reg>:
  *
  */
int32_t lis2mdl_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                         uint8_t *data,
                         uint16_t len)
{
 8003d06:	b590      	push	{r4, r7, lr}
 8003d08:	b087      	sub	sp, #28
 8003d0a:	af00      	add	r7, sp, #0
 8003d0c:	60f8      	str	r0, [r7, #12]
 8003d0e:	607a      	str	r2, [r7, #4]
 8003d10:	461a      	mov	r2, r3
 8003d12:	460b      	mov	r3, r1
 8003d14:	72fb      	strb	r3, [r7, #11]
 8003d16:	4613      	mov	r3, r2
 8003d18:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	685c      	ldr	r4, [r3, #4]
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	68d8      	ldr	r0, [r3, #12]
 8003d22:	893b      	ldrh	r3, [r7, #8]
 8003d24:	7af9      	ldrb	r1, [r7, #11]
 8003d26:	687a      	ldr	r2, [r7, #4]
 8003d28:	47a0      	blx	r4
 8003d2a:	6178      	str	r0, [r7, #20]

  return ret;
 8003d2c:	697b      	ldr	r3, [r7, #20]
}
 8003d2e:	4618      	mov	r0, r3
 8003d30:	371c      	adds	r7, #28
 8003d32:	46bd      	mov	sp, r7
 8003d34:	bd90      	pop	{r4, r7, pc}

08003d36 <lis2mdl_write_reg>:
  *
  */
int32_t lis2mdl_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                          uint8_t *data,
                          uint16_t len)
{
 8003d36:	b590      	push	{r4, r7, lr}
 8003d38:	b087      	sub	sp, #28
 8003d3a:	af00      	add	r7, sp, #0
 8003d3c:	60f8      	str	r0, [r7, #12]
 8003d3e:	607a      	str	r2, [r7, #4]
 8003d40:	461a      	mov	r2, r3
 8003d42:	460b      	mov	r3, r1
 8003d44:	72fb      	strb	r3, [r7, #11]
 8003d46:	4613      	mov	r3, r2
 8003d48:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	681c      	ldr	r4, [r3, #0]
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	68d8      	ldr	r0, [r3, #12]
 8003d52:	893b      	ldrh	r3, [r7, #8]
 8003d54:	7af9      	ldrb	r1, [r7, #11]
 8003d56:	687a      	ldr	r2, [r7, #4]
 8003d58:	47a0      	blx	r4
 8003d5a:	6178      	str	r0, [r7, #20]

  return ret;
 8003d5c:	697b      	ldr	r3, [r7, #20]
}
 8003d5e:	4618      	mov	r0, r3
 8003d60:	371c      	adds	r7, #28
 8003d62:	46bd      	mov	sp, r7
 8003d64:	bd90      	pop	{r4, r7, pc}

08003d66 <lis2mdl_operating_mode_set>:
  * @retval        interface status.(MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2mdl_operating_mode_set(stmdev_ctx_t *ctx,
                                   lis2mdl_md_t val)
{
 8003d66:	b580      	push	{r7, lr}
 8003d68:	b084      	sub	sp, #16
 8003d6a:	af00      	add	r7, sp, #0
 8003d6c:	6078      	str	r0, [r7, #4]
 8003d6e:	460b      	mov	r3, r1
 8003d70:	70fb      	strb	r3, [r7, #3]
  lis2mdl_cfg_reg_a_t reg;
  int32_t ret;

  ret = lis2mdl_read_reg(ctx, LIS2MDL_CFG_REG_A, (uint8_t *)&reg, 1);
 8003d72:	f107 0208 	add.w	r2, r7, #8
 8003d76:	2301      	movs	r3, #1
 8003d78:	2160      	movs	r1, #96	; 0x60
 8003d7a:	6878      	ldr	r0, [r7, #4]
 8003d7c:	f7ff ffc3 	bl	8003d06 <lis2mdl_read_reg>
 8003d80:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d10f      	bne.n	8003da8 <lis2mdl_operating_mode_set+0x42>
  {
    reg.md = (uint8_t)val;
 8003d88:	78fb      	ldrb	r3, [r7, #3]
 8003d8a:	f003 0303 	and.w	r3, r3, #3
 8003d8e:	b2da      	uxtb	r2, r3
 8003d90:	7a3b      	ldrb	r3, [r7, #8]
 8003d92:	f362 0301 	bfi	r3, r2, #0, #2
 8003d96:	723b      	strb	r3, [r7, #8]
    ret = lis2mdl_write_reg(ctx, LIS2MDL_CFG_REG_A, (uint8_t *)&reg, 1);
 8003d98:	f107 0208 	add.w	r2, r7, #8
 8003d9c:	2301      	movs	r3, #1
 8003d9e:	2160      	movs	r1, #96	; 0x60
 8003da0:	6878      	ldr	r0, [r7, #4]
 8003da2:	f7ff ffc8 	bl	8003d36 <lis2mdl_write_reg>
 8003da6:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8003da8:	68fb      	ldr	r3, [r7, #12]
}
 8003daa:	4618      	mov	r0, r3
 8003dac:	3710      	adds	r7, #16
 8003dae:	46bd      	mov	sp, r7
 8003db0:	bd80      	pop	{r7, pc}

08003db2 <lis2mdl_data_rate_set>:
  * @param  val   change the values of odr in reg CFG_REG_A
  * @retval       interface status.(MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2mdl_data_rate_set(stmdev_ctx_t *ctx, lis2mdl_odr_t val)
{
 8003db2:	b580      	push	{r7, lr}
 8003db4:	b084      	sub	sp, #16
 8003db6:	af00      	add	r7, sp, #0
 8003db8:	6078      	str	r0, [r7, #4]
 8003dba:	460b      	mov	r3, r1
 8003dbc:	70fb      	strb	r3, [r7, #3]
  lis2mdl_cfg_reg_a_t reg;
  int32_t ret;

  ret = lis2mdl_read_reg(ctx, LIS2MDL_CFG_REG_A, (uint8_t *)&reg, 1);
 8003dbe:	f107 0208 	add.w	r2, r7, #8
 8003dc2:	2301      	movs	r3, #1
 8003dc4:	2160      	movs	r1, #96	; 0x60
 8003dc6:	6878      	ldr	r0, [r7, #4]
 8003dc8:	f7ff ff9d 	bl	8003d06 <lis2mdl_read_reg>
 8003dcc:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d10f      	bne.n	8003df4 <lis2mdl_data_rate_set+0x42>
  {
    reg.odr = (uint8_t)val;
 8003dd4:	78fb      	ldrb	r3, [r7, #3]
 8003dd6:	f003 0303 	and.w	r3, r3, #3
 8003dda:	b2da      	uxtb	r2, r3
 8003ddc:	7a3b      	ldrb	r3, [r7, #8]
 8003dde:	f362 0383 	bfi	r3, r2, #2, #2
 8003de2:	723b      	strb	r3, [r7, #8]
    ret = lis2mdl_write_reg(ctx, LIS2MDL_CFG_REG_A, (uint8_t *)&reg, 1);
 8003de4:	f107 0208 	add.w	r2, r7, #8
 8003de8:	2301      	movs	r3, #1
 8003dea:	2160      	movs	r1, #96	; 0x60
 8003dec:	6878      	ldr	r0, [r7, #4]
 8003dee:	f7ff ffa2 	bl	8003d36 <lis2mdl_write_reg>
 8003df2:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8003df4:	68fb      	ldr	r3, [r7, #12]
}
 8003df6:	4618      	mov	r0, r3
 8003df8:	3710      	adds	r7, #16
 8003dfa:	46bd      	mov	sp, r7
 8003dfc:	bd80      	pop	{r7, pc}
	...

08003e00 <lis2mdl_data_rate_get>:
  * @param  val   Get the values of odr in reg CFG_REG_A.(ptr)
  * @retval       interface status.(MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2mdl_data_rate_get(stmdev_ctx_t *ctx, lis2mdl_odr_t *val)
{
 8003e00:	b580      	push	{r7, lr}
 8003e02:	b084      	sub	sp, #16
 8003e04:	af00      	add	r7, sp, #0
 8003e06:	6078      	str	r0, [r7, #4]
 8003e08:	6039      	str	r1, [r7, #0]
  lis2mdl_cfg_reg_a_t reg;
  int32_t ret;

  ret = lis2mdl_read_reg(ctx, LIS2MDL_CFG_REG_A, (uint8_t *)&reg, 1);
 8003e0a:	f107 0208 	add.w	r2, r7, #8
 8003e0e:	2301      	movs	r3, #1
 8003e10:	2160      	movs	r1, #96	; 0x60
 8003e12:	6878      	ldr	r0, [r7, #4]
 8003e14:	f7ff ff77 	bl	8003d06 <lis2mdl_read_reg>
 8003e18:	60f8      	str	r0, [r7, #12]

  switch (reg.odr)
 8003e1a:	7a3b      	ldrb	r3, [r7, #8]
 8003e1c:	f3c3 0381 	ubfx	r3, r3, #2, #2
 8003e20:	b2db      	uxtb	r3, r3
 8003e22:	2b03      	cmp	r3, #3
 8003e24:	d81a      	bhi.n	8003e5c <lis2mdl_data_rate_get+0x5c>
 8003e26:	a201      	add	r2, pc, #4	; (adr r2, 8003e2c <lis2mdl_data_rate_get+0x2c>)
 8003e28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e2c:	08003e3d 	.word	0x08003e3d
 8003e30:	08003e45 	.word	0x08003e45
 8003e34:	08003e4d 	.word	0x08003e4d
 8003e38:	08003e55 	.word	0x08003e55
  {
    case LIS2MDL_ODR_10Hz:
      *val = LIS2MDL_ODR_10Hz;
 8003e3c:	683b      	ldr	r3, [r7, #0]
 8003e3e:	2200      	movs	r2, #0
 8003e40:	701a      	strb	r2, [r3, #0]
      break;
 8003e42:	e00f      	b.n	8003e64 <lis2mdl_data_rate_get+0x64>

    case LIS2MDL_ODR_20Hz:
      *val = LIS2MDL_ODR_20Hz;
 8003e44:	683b      	ldr	r3, [r7, #0]
 8003e46:	2201      	movs	r2, #1
 8003e48:	701a      	strb	r2, [r3, #0]
      break;
 8003e4a:	e00b      	b.n	8003e64 <lis2mdl_data_rate_get+0x64>

    case LIS2MDL_ODR_50Hz:
      *val = LIS2MDL_ODR_50Hz;
 8003e4c:	683b      	ldr	r3, [r7, #0]
 8003e4e:	2202      	movs	r2, #2
 8003e50:	701a      	strb	r2, [r3, #0]
      break;
 8003e52:	e007      	b.n	8003e64 <lis2mdl_data_rate_get+0x64>

    case LIS2MDL_ODR_100Hz:
      *val = LIS2MDL_ODR_100Hz;
 8003e54:	683b      	ldr	r3, [r7, #0]
 8003e56:	2203      	movs	r2, #3
 8003e58:	701a      	strb	r2, [r3, #0]
      break;
 8003e5a:	e003      	b.n	8003e64 <lis2mdl_data_rate_get+0x64>

    default:
      *val = LIS2MDL_ODR_10Hz;
 8003e5c:	683b      	ldr	r3, [r7, #0]
 8003e5e:	2200      	movs	r2, #0
 8003e60:	701a      	strb	r2, [r3, #0]
      break;
 8003e62:	bf00      	nop
  }

  return ret;
 8003e64:	68fb      	ldr	r3, [r7, #12]
}
 8003e66:	4618      	mov	r0, r3
 8003e68:	3710      	adds	r7, #16
 8003e6a:	46bd      	mov	sp, r7
 8003e6c:	bd80      	pop	{r7, pc}
 8003e6e:	bf00      	nop

08003e70 <lis2mdl_block_data_update_set>:
  * @param  val   change the values of bdu in reg CFG_REG_C
  * @retval       interface status.(MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2mdl_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8003e70:	b580      	push	{r7, lr}
 8003e72:	b084      	sub	sp, #16
 8003e74:	af00      	add	r7, sp, #0
 8003e76:	6078      	str	r0, [r7, #4]
 8003e78:	460b      	mov	r3, r1
 8003e7a:	70fb      	strb	r3, [r7, #3]
  lis2mdl_cfg_reg_c_t reg;
  int32_t ret;

  ret = lis2mdl_read_reg(ctx, LIS2MDL_CFG_REG_C, (uint8_t *)&reg, 1);
 8003e7c:	f107 0208 	add.w	r2, r7, #8
 8003e80:	2301      	movs	r3, #1
 8003e82:	2162      	movs	r1, #98	; 0x62
 8003e84:	6878      	ldr	r0, [r7, #4]
 8003e86:	f7ff ff3e 	bl	8003d06 <lis2mdl_read_reg>
 8003e8a:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d10f      	bne.n	8003eb2 <lis2mdl_block_data_update_set+0x42>
  {
    reg.bdu = val;
 8003e92:	78fb      	ldrb	r3, [r7, #3]
 8003e94:	f003 0301 	and.w	r3, r3, #1
 8003e98:	b2da      	uxtb	r2, r3
 8003e9a:	7a3b      	ldrb	r3, [r7, #8]
 8003e9c:	f362 1304 	bfi	r3, r2, #4, #1
 8003ea0:	723b      	strb	r3, [r7, #8]
    ret = lis2mdl_write_reg(ctx, LIS2MDL_CFG_REG_C, (uint8_t *)&reg, 1);
 8003ea2:	f107 0208 	add.w	r2, r7, #8
 8003ea6:	2301      	movs	r3, #1
 8003ea8:	2162      	movs	r1, #98	; 0x62
 8003eaa:	6878      	ldr	r0, [r7, #4]
 8003eac:	f7ff ff43 	bl	8003d36 <lis2mdl_write_reg>
 8003eb0:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8003eb2:	68fb      	ldr	r3, [r7, #12]
}
 8003eb4:	4618      	mov	r0, r3
 8003eb6:	3710      	adds	r7, #16
 8003eb8:	46bd      	mov	sp, r7
 8003eba:	bd80      	pop	{r7, pc}

08003ebc <lis2mdl_magnetic_raw_get>:
  * @param  buff  that stores data read
  * @retval       interface status.(MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2mdl_magnetic_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 8003ebc:	b580      	push	{r7, lr}
 8003ebe:	b086      	sub	sp, #24
 8003ec0:	af00      	add	r7, sp, #0
 8003ec2:	6078      	str	r0, [r7, #4]
 8003ec4:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;

  ret = lis2mdl_read_reg(ctx, LIS2MDL_OUTX_L_REG, buff, 6);
 8003ec6:	f107 020c 	add.w	r2, r7, #12
 8003eca:	2306      	movs	r3, #6
 8003ecc:	2168      	movs	r1, #104	; 0x68
 8003ece:	6878      	ldr	r0, [r7, #4]
 8003ed0:	f7ff ff19 	bl	8003d06 <lis2mdl_read_reg>
 8003ed4:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 8003ed6:	7b7b      	ldrb	r3, [r7, #13]
 8003ed8:	b21a      	sxth	r2, r3
 8003eda:	683b      	ldr	r3, [r7, #0]
 8003edc:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 8003ede:	683b      	ldr	r3, [r7, #0]
 8003ee0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003ee4:	b29b      	uxth	r3, r3
 8003ee6:	021b      	lsls	r3, r3, #8
 8003ee8:	b29a      	uxth	r2, r3
 8003eea:	7b3b      	ldrb	r3, [r7, #12]
 8003eec:	b29b      	uxth	r3, r3
 8003eee:	4413      	add	r3, r2
 8003ef0:	b29b      	uxth	r3, r3
 8003ef2:	b21a      	sxth	r2, r3
 8003ef4:	683b      	ldr	r3, [r7, #0]
 8003ef6:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 8003ef8:	7bfa      	ldrb	r2, [r7, #15]
 8003efa:	683b      	ldr	r3, [r7, #0]
 8003efc:	3302      	adds	r3, #2
 8003efe:	b212      	sxth	r2, r2
 8003f00:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 8003f02:	683b      	ldr	r3, [r7, #0]
 8003f04:	3302      	adds	r3, #2
 8003f06:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003f0a:	b29b      	uxth	r3, r3
 8003f0c:	021b      	lsls	r3, r3, #8
 8003f0e:	b29a      	uxth	r2, r3
 8003f10:	7bbb      	ldrb	r3, [r7, #14]
 8003f12:	b29b      	uxth	r3, r3
 8003f14:	4413      	add	r3, r2
 8003f16:	b29a      	uxth	r2, r3
 8003f18:	683b      	ldr	r3, [r7, #0]
 8003f1a:	3302      	adds	r3, #2
 8003f1c:	b212      	sxth	r2, r2
 8003f1e:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 8003f20:	7c7a      	ldrb	r2, [r7, #17]
 8003f22:	683b      	ldr	r3, [r7, #0]
 8003f24:	3304      	adds	r3, #4
 8003f26:	b212      	sxth	r2, r2
 8003f28:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 8003f2a:	683b      	ldr	r3, [r7, #0]
 8003f2c:	3304      	adds	r3, #4
 8003f2e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003f32:	b29b      	uxth	r3, r3
 8003f34:	021b      	lsls	r3, r3, #8
 8003f36:	b29a      	uxth	r2, r3
 8003f38:	7c3b      	ldrb	r3, [r7, #16]
 8003f3a:	b29b      	uxth	r3, r3
 8003f3c:	4413      	add	r3, r2
 8003f3e:	b29a      	uxth	r2, r3
 8003f40:	683b      	ldr	r3, [r7, #0]
 8003f42:	3304      	adds	r3, #4
 8003f44:	b212      	sxth	r2, r2
 8003f46:	801a      	strh	r2, [r3, #0]

  return ret;
 8003f48:	697b      	ldr	r3, [r7, #20]
}
 8003f4a:	4618      	mov	r0, r3
 8003f4c:	3718      	adds	r7, #24
 8003f4e:	46bd      	mov	sp, r7
 8003f50:	bd80      	pop	{r7, pc}

08003f52 <lis2mdl_device_id_get>:
  * @param  buff  that stores data read
  * @retval       interface status.(MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2mdl_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 8003f52:	b580      	push	{r7, lr}
 8003f54:	b084      	sub	sp, #16
 8003f56:	af00      	add	r7, sp, #0
 8003f58:	6078      	str	r0, [r7, #4]
 8003f5a:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = lis2mdl_read_reg(ctx, LIS2MDL_WHO_AM_I, buff, 1);
 8003f5c:	2301      	movs	r3, #1
 8003f5e:	683a      	ldr	r2, [r7, #0]
 8003f60:	214f      	movs	r1, #79	; 0x4f
 8003f62:	6878      	ldr	r0, [r7, #4]
 8003f64:	f7ff fecf 	bl	8003d06 <lis2mdl_read_reg>
 8003f68:	60f8      	str	r0, [r7, #12]

  return ret;
 8003f6a:	68fb      	ldr	r3, [r7, #12]
}
 8003f6c:	4618      	mov	r0, r3
 8003f6e:	3710      	adds	r7, #16
 8003f70:	46bd      	mov	sp, r7
 8003f72:	bd80      	pop	{r7, pc}

08003f74 <lis2mdl_self_test_set>:
  * @param  val   change the values of self_test in reg CFG_REG_C
  * @retval       interface status.(MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2mdl_self_test_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8003f74:	b580      	push	{r7, lr}
 8003f76:	b084      	sub	sp, #16
 8003f78:	af00      	add	r7, sp, #0
 8003f7a:	6078      	str	r0, [r7, #4]
 8003f7c:	460b      	mov	r3, r1
 8003f7e:	70fb      	strb	r3, [r7, #3]
  lis2mdl_cfg_reg_c_t reg;
  int32_t ret;

  ret = lis2mdl_read_reg(ctx, LIS2MDL_CFG_REG_C, (uint8_t *)&reg, 1);
 8003f80:	f107 0208 	add.w	r2, r7, #8
 8003f84:	2301      	movs	r3, #1
 8003f86:	2162      	movs	r1, #98	; 0x62
 8003f88:	6878      	ldr	r0, [r7, #4]
 8003f8a:	f7ff febc 	bl	8003d06 <lis2mdl_read_reg>
 8003f8e:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d10f      	bne.n	8003fb6 <lis2mdl_self_test_set+0x42>
  {
    reg.self_test = val;
 8003f96:	78fb      	ldrb	r3, [r7, #3]
 8003f98:	f003 0301 	and.w	r3, r3, #1
 8003f9c:	b2da      	uxtb	r2, r3
 8003f9e:	7a3b      	ldrb	r3, [r7, #8]
 8003fa0:	f362 0341 	bfi	r3, r2, #1, #1
 8003fa4:	723b      	strb	r3, [r7, #8]
    ret = lis2mdl_write_reg(ctx, LIS2MDL_CFG_REG_C, (uint8_t *)&reg, 1);
 8003fa6:	f107 0208 	add.w	r2, r7, #8
 8003faa:	2301      	movs	r3, #1
 8003fac:	2162      	movs	r1, #98	; 0x62
 8003fae:	6878      	ldr	r0, [r7, #4]
 8003fb0:	f7ff fec1 	bl	8003d36 <lis2mdl_write_reg>
 8003fb4:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8003fb6:	68fb      	ldr	r3, [r7, #12]
}
 8003fb8:	4618      	mov	r0, r3
 8003fba:	3710      	adds	r7, #16
 8003fbc:	46bd      	mov	sp, r7
 8003fbe:	bd80      	pop	{r7, pc}

08003fc0 <lis2mdl_i2c_interface_set>:
  * @retval       interface status.(MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2mdl_i2c_interface_set(stmdev_ctx_t *ctx,
                                  lis2mdl_i2c_dis_t val)
{
 8003fc0:	b580      	push	{r7, lr}
 8003fc2:	b084      	sub	sp, #16
 8003fc4:	af00      	add	r7, sp, #0
 8003fc6:	6078      	str	r0, [r7, #4]
 8003fc8:	460b      	mov	r3, r1
 8003fca:	70fb      	strb	r3, [r7, #3]
  lis2mdl_cfg_reg_c_t reg;
  int32_t ret;

  ret = lis2mdl_read_reg(ctx, LIS2MDL_CFG_REG_C, (uint8_t *)&reg, 1);
 8003fcc:	f107 0208 	add.w	r2, r7, #8
 8003fd0:	2301      	movs	r3, #1
 8003fd2:	2162      	movs	r1, #98	; 0x62
 8003fd4:	6878      	ldr	r0, [r7, #4]
 8003fd6:	f7ff fe96 	bl	8003d06 <lis2mdl_read_reg>
 8003fda:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d10f      	bne.n	8004002 <lis2mdl_i2c_interface_set+0x42>
  {
    reg.i2c_dis = (uint8_t)val;
 8003fe2:	78fb      	ldrb	r3, [r7, #3]
 8003fe4:	f003 0301 	and.w	r3, r3, #1
 8003fe8:	b2da      	uxtb	r2, r3
 8003fea:	7a3b      	ldrb	r3, [r7, #8]
 8003fec:	f362 1345 	bfi	r3, r2, #5, #1
 8003ff0:	723b      	strb	r3, [r7, #8]
    ret = lis2mdl_write_reg(ctx, LIS2MDL_CFG_REG_C, (uint8_t *)&reg, 1);
 8003ff2:	f107 0208 	add.w	r2, r7, #8
 8003ff6:	2301      	movs	r3, #1
 8003ff8:	2162      	movs	r1, #98	; 0x62
 8003ffa:	6878      	ldr	r0, [r7, #4]
 8003ffc:	f7ff fe9b 	bl	8003d36 <lis2mdl_write_reg>
 8004000:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8004002:	68fb      	ldr	r3, [r7, #12]
}
 8004004:	4618      	mov	r0, r3
 8004006:	3710      	adds	r7, #16
 8004008:	46bd      	mov	sp, r7
 800400a:	bd80      	pop	{r7, pc}

0800400c <LSM6DSO_RegisterBusIO>:
  * @brief  Register Component Bus IO operations
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_RegisterBusIO(LSM6DSO_Object_t *pObj, LSM6DSO_IO_t *pIO)
{
 800400c:	b580      	push	{r7, lr}
 800400e:	b084      	sub	sp, #16
 8004010:	af00      	add	r7, sp, #0
 8004012:	6078      	str	r0, [r7, #4]
 8004014:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSO_OK;
 8004016:	2300      	movs	r3, #0
 8004018:	60fb      	str	r3, [r7, #12]

  if (pObj == NULL)
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	2b00      	cmp	r3, #0
 800401e:	d103      	bne.n	8004028 <LSM6DSO_RegisterBusIO+0x1c>
  {
    ret = LSM6DSO_ERROR;
 8004020:	f04f 33ff 	mov.w	r3, #4294967295
 8004024:	60fb      	str	r3, [r7, #12]
 8004026:	e051      	b.n	80040cc <LSM6DSO_RegisterBusIO+0xc0>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 8004028:	683b      	ldr	r3, [r7, #0]
 800402a:	681a      	ldr	r2, [r3, #0]
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 8004030:	683b      	ldr	r3, [r7, #0]
 8004032:	685a      	ldr	r2, [r3, #4]
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	605a      	str	r2, [r3, #4]
    pObj->IO.BusType   = pIO->BusType;
 8004038:	683b      	ldr	r3, [r7, #0]
 800403a:	689a      	ldr	r2, [r3, #8]
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	609a      	str	r2, [r3, #8]
    pObj->IO.Address   = pIO->Address;
 8004040:	683b      	ldr	r3, [r7, #0]
 8004042:	7b1a      	ldrb	r2, [r3, #12]
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	731a      	strb	r2, [r3, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 8004048:	683b      	ldr	r3, [r7, #0]
 800404a:	691a      	ldr	r2, [r3, #16]
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	611a      	str	r2, [r3, #16]
    pObj->IO.ReadReg   = pIO->ReadReg;
 8004050:	683b      	ldr	r3, [r7, #0]
 8004052:	695a      	ldr	r2, [r3, #20]
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	615a      	str	r2, [r3, #20]
    pObj->IO.GetTick   = pIO->GetTick;
 8004058:	683b      	ldr	r3, [r7, #0]
 800405a:	699a      	ldr	r2, [r3, #24]
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	619a      	str	r2, [r3, #24]

    pObj->Ctx.read_reg  = ReadRegWrap;
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	4a1d      	ldr	r2, [pc, #116]	; (80040d8 <LSM6DSO_RegisterBusIO+0xcc>)
 8004064:	625a      	str	r2, [r3, #36]	; 0x24
    pObj->Ctx.write_reg = WriteRegWrap;
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	4a1c      	ldr	r2, [pc, #112]	; (80040dc <LSM6DSO_RegisterBusIO+0xd0>)
 800406a:	621a      	str	r2, [r3, #32]
    pObj->Ctx.mdelay    = pIO->Delay;
 800406c:	683b      	ldr	r3, [r7, #0]
 800406e:	69da      	ldr	r2, [r3, #28]
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	629a      	str	r2, [r3, #40]	; 0x28
    pObj->Ctx.handle   = pObj;
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	687a      	ldr	r2, [r7, #4]
 8004078:	62da      	str	r2, [r3, #44]	; 0x2c

    if (pObj->IO.Init == NULL)
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	2b00      	cmp	r3, #0
 8004080:	d103      	bne.n	800408a <LSM6DSO_RegisterBusIO+0x7e>
    {
      ret = LSM6DSO_ERROR;
 8004082:	f04f 33ff 	mov.w	r3, #4294967295
 8004086:	60fb      	str	r3, [r7, #12]
 8004088:	e020      	b.n	80040cc <LSM6DSO_RegisterBusIO+0xc0>
    }
    else if (pObj->IO.Init() != LSM6DSO_OK)
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	4798      	blx	r3
 8004090:	4603      	mov	r3, r0
 8004092:	2b00      	cmp	r3, #0
 8004094:	d003      	beq.n	800409e <LSM6DSO_RegisterBusIO+0x92>
    {
      ret = LSM6DSO_ERROR;
 8004096:	f04f 33ff 	mov.w	r3, #4294967295
 800409a:	60fb      	str	r3, [r7, #12]
 800409c:	e016      	b.n	80040cc <LSM6DSO_RegisterBusIO+0xc0>
    }
    else
    {
      if (pObj->IO.BusType == LSM6DSO_SPI_3WIRES_BUS) /* SPI 3-Wires */
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	689b      	ldr	r3, [r3, #8]
 80040a2:	2b02      	cmp	r3, #2
 80040a4:	d112      	bne.n	80040cc <LSM6DSO_RegisterBusIO+0xc0>
      {
        /* Enable the SPI 3-Wires support only the first time */
        if (pObj->is_initialized == 0U)
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d10d      	bne.n	80040cc <LSM6DSO_RegisterBusIO+0xc0>
        {
          /* Enable SPI 3-Wires on the component */
          uint8_t data = 0x0C;
 80040b0:	230c      	movs	r3, #12
 80040b2:	72fb      	strb	r3, [r7, #11]

          if (LSM6DSO_Write_Reg(pObj, LSM6DSO_CTRL3_C, data) != LSM6DSO_OK)
 80040b4:	7afb      	ldrb	r3, [r7, #11]
 80040b6:	461a      	mov	r2, r3
 80040b8:	2112      	movs	r1, #18
 80040ba:	6878      	ldr	r0, [r7, #4]
 80040bc:	f000 ff59 	bl	8004f72 <LSM6DSO_Write_Reg>
 80040c0:	4603      	mov	r3, r0
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d002      	beq.n	80040cc <LSM6DSO_RegisterBusIO+0xc0>
          {
            ret = LSM6DSO_ERROR;
 80040c6:	f04f 33ff 	mov.w	r3, #4294967295
 80040ca:	60fb      	str	r3, [r7, #12]
        }
      }
    }
  }

  return ret;
 80040cc:	68fb      	ldr	r3, [r7, #12]
}
 80040ce:	4618      	mov	r0, r3
 80040d0:	3710      	adds	r7, #16
 80040d2:	46bd      	mov	sp, r7
 80040d4:	bd80      	pop	{r7, pc}
 80040d6:	bf00      	nop
 80040d8:	08005415 	.word	0x08005415
 80040dc:	0800544b 	.word	0x0800544b

080040e0 <LSM6DSO_Init>:
  * @brief  Initialize the LSM6DSO sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_Init(LSM6DSO_Object_t *pObj)
{
 80040e0:	b580      	push	{r7, lr}
 80040e2:	b082      	sub	sp, #8
 80040e4:	af00      	add	r7, sp, #0
 80040e6:	6078      	str	r0, [r7, #4]
  /* Disable I3C */
  if (lsm6dso_i3c_disable_set(&(pObj->Ctx), LSM6DSO_I3C_DISABLE) != LSM6DSO_OK)
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	3320      	adds	r3, #32
 80040ec:	2180      	movs	r1, #128	; 0x80
 80040ee:	4618      	mov	r0, r3
 80040f0:	f001 fe97 	bl	8005e22 <lsm6dso_i3c_disable_set>
 80040f4:	4603      	mov	r3, r0
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d002      	beq.n	8004100 <LSM6DSO_Init+0x20>
  {
    return LSM6DSO_ERROR;
 80040fa:	f04f 33ff 	mov.w	r3, #4294967295
 80040fe:	e060      	b.n	80041c2 <LSM6DSO_Init+0xe2>
  }

  /* Enable register address automatically incremented during a multiple byte
  access with a serial interface. */
  if (lsm6dso_auto_increment_set(&(pObj->Ctx), PROPERTY_ENABLE) != LSM6DSO_OK)
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	3320      	adds	r3, #32
 8004104:	2101      	movs	r1, #1
 8004106:	4618      	mov	r0, r3
 8004108:	f001 fe65 	bl	8005dd6 <lsm6dso_auto_increment_set>
 800410c:	4603      	mov	r3, r0
 800410e:	2b00      	cmp	r3, #0
 8004110:	d002      	beq.n	8004118 <LSM6DSO_Init+0x38>
  {
    return LSM6DSO_ERROR;
 8004112:	f04f 33ff 	mov.w	r3, #4294967295
 8004116:	e054      	b.n	80041c2 <LSM6DSO_Init+0xe2>
  }

  /* Enable BDU */
  if (lsm6dso_block_data_update_set(&(pObj->Ctx), PROPERTY_ENABLE) != LSM6DSO_OK)
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	3320      	adds	r3, #32
 800411c:	2101      	movs	r1, #1
 800411e:	4618      	mov	r0, r3
 8004120:	f001 fd66 	bl	8005bf0 <lsm6dso_block_data_update_set>
 8004124:	4603      	mov	r3, r0
 8004126:	2b00      	cmp	r3, #0
 8004128:	d002      	beq.n	8004130 <LSM6DSO_Init+0x50>
  {
    return LSM6DSO_ERROR;
 800412a:	f04f 33ff 	mov.w	r3, #4294967295
 800412e:	e048      	b.n	80041c2 <LSM6DSO_Init+0xe2>
  }

  /* FIFO mode selection */
  if (lsm6dso_fifo_mode_set(&(pObj->Ctx), LSM6DSO_BYPASS_MODE) != LSM6DSO_OK)
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	3320      	adds	r3, #32
 8004134:	2100      	movs	r1, #0
 8004136:	4618      	mov	r0, r3
 8004138:	f001 feb9 	bl	8005eae <lsm6dso_fifo_mode_set>
 800413c:	4603      	mov	r3, r0
 800413e:	2b00      	cmp	r3, #0
 8004140:	d002      	beq.n	8004148 <LSM6DSO_Init+0x68>
  {
    return LSM6DSO_ERROR;
 8004142:	f04f 33ff 	mov.w	r3, #4294967295
 8004146:	e03c      	b.n	80041c2 <LSM6DSO_Init+0xe2>
  }

  /* Select default output data rate. */
  pObj->acc_odr = LSM6DSO_XL_ODR_104Hz;
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	2204      	movs	r2, #4
 800414c:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33

  /* Output data rate selection - power down. */
  if (lsm6dso_xl_data_rate_set(&(pObj->Ctx), LSM6DSO_XL_ODR_OFF) != LSM6DSO_OK)
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	3320      	adds	r3, #32
 8004154:	2100      	movs	r1, #0
 8004156:	4618      	mov	r0, r3
 8004158:	f001 fa20 	bl	800559c <lsm6dso_xl_data_rate_set>
 800415c:	4603      	mov	r3, r0
 800415e:	2b00      	cmp	r3, #0
 8004160:	d002      	beq.n	8004168 <LSM6DSO_Init+0x88>
  {
    return LSM6DSO_ERROR;
 8004162:	f04f 33ff 	mov.w	r3, #4294967295
 8004166:	e02c      	b.n	80041c2 <LSM6DSO_Init+0xe2>
  }

  /* Full scale selection. */
  if (lsm6dso_xl_full_scale_set(&(pObj->Ctx), LSM6DSO_2g) != LSM6DSO_OK)
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	3320      	adds	r3, #32
 800416c:	2100      	movs	r1, #0
 800416e:	4618      	mov	r0, r3
 8004170:	f001 f9b6 	bl	80054e0 <lsm6dso_xl_full_scale_set>
 8004174:	4603      	mov	r3, r0
 8004176:	2b00      	cmp	r3, #0
 8004178:	d002      	beq.n	8004180 <LSM6DSO_Init+0xa0>
  {
    return LSM6DSO_ERROR;
 800417a:	f04f 33ff 	mov.w	r3, #4294967295
 800417e:	e020      	b.n	80041c2 <LSM6DSO_Init+0xe2>
  }

  /* Select default output data rate. */
  pObj->gyro_odr = LSM6DSO_GY_ODR_104Hz;
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	2204      	movs	r2, #4
 8004184:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Output data rate selection - power down. */
  if (lsm6dso_gy_data_rate_set(&(pObj->Ctx), LSM6DSO_GY_ODR_OFF) != LSM6DSO_OK)
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	3320      	adds	r3, #32
 800418c:	2100      	movs	r1, #0
 800418e:	4618      	mov	r0, r3
 8004190:	f001 fbd0 	bl	8005934 <lsm6dso_gy_data_rate_set>
 8004194:	4603      	mov	r3, r0
 8004196:	2b00      	cmp	r3, #0
 8004198:	d002      	beq.n	80041a0 <LSM6DSO_Init+0xc0>
  {
    return LSM6DSO_ERROR;
 800419a:	f04f 33ff 	mov.w	r3, #4294967295
 800419e:	e010      	b.n	80041c2 <LSM6DSO_Init+0xe2>
  }

  /* Full scale selection. */
  if (lsm6dso_gy_full_scale_set(&(pObj->Ctx), LSM6DSO_2000dps) != LSM6DSO_OK)
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	3320      	adds	r3, #32
 80041a4:	2106      	movs	r1, #6
 80041a6:	4618      	mov	r0, r3
 80041a8:	f001 fb5c 	bl	8005864 <lsm6dso_gy_full_scale_set>
 80041ac:	4603      	mov	r3, r0
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d002      	beq.n	80041b8 <LSM6DSO_Init+0xd8>
  {
    return LSM6DSO_ERROR;
 80041b2:	f04f 33ff 	mov.w	r3, #4294967295
 80041b6:	e004      	b.n	80041c2 <LSM6DSO_Init+0xe2>
  }

  pObj->is_initialized = 1;
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	2201      	movs	r2, #1
 80041bc:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return LSM6DSO_OK;
 80041c0:	2300      	movs	r3, #0
}
 80041c2:	4618      	mov	r0, r3
 80041c4:	3708      	adds	r7, #8
 80041c6:	46bd      	mov	sp, r7
 80041c8:	bd80      	pop	{r7, pc}

080041ca <LSM6DSO_DeInit>:
  * @brief  Deinitialize the LSM6DSO sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_DeInit(LSM6DSO_Object_t *pObj)
{
 80041ca:	b580      	push	{r7, lr}
 80041cc:	b082      	sub	sp, #8
 80041ce:	af00      	add	r7, sp, #0
 80041d0:	6078      	str	r0, [r7, #4]
  /* Disable the component */
  if (LSM6DSO_ACC_Disable(pObj) != LSM6DSO_OK)
 80041d2:	6878      	ldr	r0, [r7, #4]
 80041d4:	f000 f888 	bl	80042e8 <LSM6DSO_ACC_Disable>
 80041d8:	4603      	mov	r3, r0
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d002      	beq.n	80041e4 <LSM6DSO_DeInit+0x1a>
  {
    return LSM6DSO_ERROR;
 80041de:	f04f 33ff 	mov.w	r3, #4294967295
 80041e2:	e015      	b.n	8004210 <LSM6DSO_DeInit+0x46>
  }

  if (LSM6DSO_GYRO_Disable(pObj) != LSM6DSO_OK)
 80041e4:	6878      	ldr	r0, [r7, #4]
 80041e6:	f000 fc2e 	bl	8004a46 <LSM6DSO_GYRO_Disable>
 80041ea:	4603      	mov	r3, r0
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d002      	beq.n	80041f6 <LSM6DSO_DeInit+0x2c>
  {
    return LSM6DSO_ERROR;
 80041f0:	f04f 33ff 	mov.w	r3, #4294967295
 80041f4:	e00c      	b.n	8004210 <LSM6DSO_DeInit+0x46>
  }

  /* Reset output data rate. */
  pObj->acc_odr = LSM6DSO_XL_ODR_OFF;
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	2200      	movs	r2, #0
 80041fa:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
  pObj->gyro_odr = LSM6DSO_GY_ODR_OFF;
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	2200      	movs	r2, #0
 8004202:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  pObj->is_initialized = 0;
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	2200      	movs	r2, #0
 800420a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return LSM6DSO_OK;
 800420e:	2300      	movs	r3, #0
}
 8004210:	4618      	mov	r0, r3
 8004212:	3708      	adds	r7, #8
 8004214:	46bd      	mov	sp, r7
 8004216:	bd80      	pop	{r7, pc}

08004218 <LSM6DSO_ReadID>:
  * @param  pObj the device pObj
  * @param  Id the WHO_AM_I value
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_ReadID(LSM6DSO_Object_t *pObj, uint8_t *Id)
{
 8004218:	b580      	push	{r7, lr}
 800421a:	b082      	sub	sp, #8
 800421c:	af00      	add	r7, sp, #0
 800421e:	6078      	str	r0, [r7, #4]
 8004220:	6039      	str	r1, [r7, #0]
  if (lsm6dso_device_id_get(&(pObj->Ctx), Id) != LSM6DSO_OK)
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	3320      	adds	r3, #32
 8004226:	6839      	ldr	r1, [r7, #0]
 8004228:	4618      	mov	r0, r3
 800422a:	f001 fdc3 	bl	8005db4 <lsm6dso_device_id_get>
 800422e:	4603      	mov	r3, r0
 8004230:	2b00      	cmp	r3, #0
 8004232:	d002      	beq.n	800423a <LSM6DSO_ReadID+0x22>
  {
    return LSM6DSO_ERROR;
 8004234:	f04f 33ff 	mov.w	r3, #4294967295
 8004238:	e000      	b.n	800423c <LSM6DSO_ReadID+0x24>
  }

  return LSM6DSO_OK;
 800423a:	2300      	movs	r3, #0
}
 800423c:	4618      	mov	r0, r3
 800423e:	3708      	adds	r7, #8
 8004240:	46bd      	mov	sp, r7
 8004242:	bd80      	pop	{r7, pc}

08004244 <LSM6DSO_GetCapabilities>:
  * @param  pObj Component object pointer
  * @param  Capabilities pointer to LSM6DSO sensor capabilities
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_GetCapabilities(LSM6DSO_Object_t *pObj, LSM6DSO_Capabilities_t *Capabilities)
{
 8004244:	b480      	push	{r7}
 8004246:	b083      	sub	sp, #12
 8004248:	af00      	add	r7, sp, #0
 800424a:	6078      	str	r0, [r7, #4]
 800424c:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  Capabilities->Acc          = 1;
 800424e:	683b      	ldr	r3, [r7, #0]
 8004250:	2201      	movs	r2, #1
 8004252:	701a      	strb	r2, [r3, #0]
  Capabilities->Gyro         = 1;
 8004254:	683b      	ldr	r3, [r7, #0]
 8004256:	2201      	movs	r2, #1
 8004258:	705a      	strb	r2, [r3, #1]
  Capabilities->Magneto      = 0;
 800425a:	683b      	ldr	r3, [r7, #0]
 800425c:	2200      	movs	r2, #0
 800425e:	709a      	strb	r2, [r3, #2]
  Capabilities->LowPower     = 0;
 8004260:	683b      	ldr	r3, [r7, #0]
 8004262:	2200      	movs	r2, #0
 8004264:	70da      	strb	r2, [r3, #3]
  Capabilities->GyroMaxFS    = 2000;
 8004266:	683b      	ldr	r3, [r7, #0]
 8004268:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800426c:	605a      	str	r2, [r3, #4]
  Capabilities->AccMaxFS     = 16;
 800426e:	683b      	ldr	r3, [r7, #0]
 8004270:	2210      	movs	r2, #16
 8004272:	609a      	str	r2, [r3, #8]
  Capabilities->MagMaxFS     = 0;
 8004274:	683b      	ldr	r3, [r7, #0]
 8004276:	2200      	movs	r2, #0
 8004278:	60da      	str	r2, [r3, #12]
  Capabilities->GyroMaxOdr   = 6660.0f;
 800427a:	683b      	ldr	r3, [r7, #0]
 800427c:	4a07      	ldr	r2, [pc, #28]	; (800429c <LSM6DSO_GetCapabilities+0x58>)
 800427e:	611a      	str	r2, [r3, #16]
  Capabilities->AccMaxOdr    = 6660.0f;
 8004280:	683b      	ldr	r3, [r7, #0]
 8004282:	4a06      	ldr	r2, [pc, #24]	; (800429c <LSM6DSO_GetCapabilities+0x58>)
 8004284:	615a      	str	r2, [r3, #20]
  Capabilities->MagMaxOdr    = 0.0f;
 8004286:	683b      	ldr	r3, [r7, #0]
 8004288:	f04f 0200 	mov.w	r2, #0
 800428c:	619a      	str	r2, [r3, #24]
  return LSM6DSO_OK;
 800428e:	2300      	movs	r3, #0
}
 8004290:	4618      	mov	r0, r3
 8004292:	370c      	adds	r7, #12
 8004294:	46bd      	mov	sp, r7
 8004296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800429a:	4770      	bx	lr
 800429c:	45d02000 	.word	0x45d02000

080042a0 <LSM6DSO_ACC_Enable>:
  * @brief  Enable the LSM6DSO accelerometer sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_ACC_Enable(LSM6DSO_Object_t *pObj)
{
 80042a0:	b580      	push	{r7, lr}
 80042a2:	b082      	sub	sp, #8
 80042a4:	af00      	add	r7, sp, #0
 80042a6:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->acc_is_enabled == 1U)
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80042ae:	2b01      	cmp	r3, #1
 80042b0:	d101      	bne.n	80042b6 <LSM6DSO_ACC_Enable+0x16>
  {
    return LSM6DSO_OK;
 80042b2:	2300      	movs	r3, #0
 80042b4:	e014      	b.n	80042e0 <LSM6DSO_ACC_Enable+0x40>
  }

  /* Output data rate selection. */
  if (lsm6dso_xl_data_rate_set(&(pObj->Ctx), pObj->acc_odr) != LSM6DSO_OK)
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	f103 0220 	add.w	r2, r3, #32
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 80042c2:	4619      	mov	r1, r3
 80042c4:	4610      	mov	r0, r2
 80042c6:	f001 f969 	bl	800559c <lsm6dso_xl_data_rate_set>
 80042ca:	4603      	mov	r3, r0
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d002      	beq.n	80042d6 <LSM6DSO_ACC_Enable+0x36>
  {
    return LSM6DSO_ERROR;
 80042d0:	f04f 33ff 	mov.w	r3, #4294967295
 80042d4:	e004      	b.n	80042e0 <LSM6DSO_ACC_Enable+0x40>
  }

  pObj->acc_is_enabled = 1;
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	2201      	movs	r2, #1
 80042da:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

  return LSM6DSO_OK;
 80042de:	2300      	movs	r3, #0
}
 80042e0:	4618      	mov	r0, r3
 80042e2:	3708      	adds	r7, #8
 80042e4:	46bd      	mov	sp, r7
 80042e6:	bd80      	pop	{r7, pc}

080042e8 <LSM6DSO_ACC_Disable>:
  * @brief  Disable the LSM6DSO accelerometer sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_ACC_Disable(LSM6DSO_Object_t *pObj)
{
 80042e8:	b580      	push	{r7, lr}
 80042ea:	b082      	sub	sp, #8
 80042ec:	af00      	add	r7, sp, #0
 80042ee:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->acc_is_enabled == 0U)
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d101      	bne.n	80042fe <LSM6DSO_ACC_Disable+0x16>
  {
    return LSM6DSO_OK;
 80042fa:	2300      	movs	r3, #0
 80042fc:	e01f      	b.n	800433e <LSM6DSO_ACC_Disable+0x56>
  }

  /* Get current output data rate. */
  if (lsm6dso_xl_data_rate_get(&(pObj->Ctx), &pObj->acc_odr) != LSM6DSO_OK)
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	f103 0220 	add.w	r2, r3, #32
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	3333      	adds	r3, #51	; 0x33
 8004308:	4619      	mov	r1, r3
 800430a:	4610      	mov	r0, r2
 800430c:	f001 fa42 	bl	8005794 <lsm6dso_xl_data_rate_get>
 8004310:	4603      	mov	r3, r0
 8004312:	2b00      	cmp	r3, #0
 8004314:	d002      	beq.n	800431c <LSM6DSO_ACC_Disable+0x34>
  {
    return LSM6DSO_ERROR;
 8004316:	f04f 33ff 	mov.w	r3, #4294967295
 800431a:	e010      	b.n	800433e <LSM6DSO_ACC_Disable+0x56>
  }

  /* Output data rate selection - power down. */
  if (lsm6dso_xl_data_rate_set(&(pObj->Ctx), LSM6DSO_XL_ODR_OFF) != LSM6DSO_OK)
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	3320      	adds	r3, #32
 8004320:	2100      	movs	r1, #0
 8004322:	4618      	mov	r0, r3
 8004324:	f001 f93a 	bl	800559c <lsm6dso_xl_data_rate_set>
 8004328:	4603      	mov	r3, r0
 800432a:	2b00      	cmp	r3, #0
 800432c:	d002      	beq.n	8004334 <LSM6DSO_ACC_Disable+0x4c>
  {
    return LSM6DSO_ERROR;
 800432e:	f04f 33ff 	mov.w	r3, #4294967295
 8004332:	e004      	b.n	800433e <LSM6DSO_ACC_Disable+0x56>
  }

  pObj->acc_is_enabled = 0;
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	2200      	movs	r2, #0
 8004338:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

  return LSM6DSO_OK;
 800433c:	2300      	movs	r3, #0
}
 800433e:	4618      	mov	r0, r3
 8004340:	3708      	adds	r7, #8
 8004342:	46bd      	mov	sp, r7
 8004344:	bd80      	pop	{r7, pc}
	...

08004348 <LSM6DSO_ACC_GetSensitivity>:
  * @param  pObj the device pObj
  * @param  Sensitivity pointer
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_ACC_GetSensitivity(LSM6DSO_Object_t *pObj, float_t *Sensitivity)
{
 8004348:	b580      	push	{r7, lr}
 800434a:	b084      	sub	sp, #16
 800434c:	af00      	add	r7, sp, #0
 800434e:	6078      	str	r0, [r7, #4]
 8004350:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSO_OK;
 8004352:	2300      	movs	r3, #0
 8004354:	60fb      	str	r3, [r7, #12]
  lsm6dso_fs_xl_t full_scale;

  /* Read actual full scale selection from sensor. */
  if (lsm6dso_xl_full_scale_get(&(pObj->Ctx), &full_scale) != LSM6DSO_OK)
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	3320      	adds	r3, #32
 800435a:	f107 020b 	add.w	r2, r7, #11
 800435e:	4611      	mov	r1, r2
 8004360:	4618      	mov	r0, r3
 8004362:	f001 f8e3 	bl	800552c <lsm6dso_xl_full_scale_get>
 8004366:	4603      	mov	r3, r0
 8004368:	2b00      	cmp	r3, #0
 800436a:	d002      	beq.n	8004372 <LSM6DSO_ACC_GetSensitivity+0x2a>
  {
    return LSM6DSO_ERROR;
 800436c:	f04f 33ff 	mov.w	r3, #4294967295
 8004370:	e023      	b.n	80043ba <LSM6DSO_ACC_GetSensitivity+0x72>
  }

  /* Store the Sensitivity based on actual full scale. */
  switch (full_scale)
 8004372:	7afb      	ldrb	r3, [r7, #11]
 8004374:	2b03      	cmp	r3, #3
 8004376:	d81b      	bhi.n	80043b0 <LSM6DSO_ACC_GetSensitivity+0x68>
 8004378:	a201      	add	r2, pc, #4	; (adr r2, 8004380 <LSM6DSO_ACC_GetSensitivity+0x38>)
 800437a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800437e:	bf00      	nop
 8004380:	08004391 	.word	0x08004391
 8004384:	080043a9 	.word	0x080043a9
 8004388:	08004399 	.word	0x08004399
 800438c:	080043a1 	.word	0x080043a1
  {
    case LSM6DSO_2g:
      *Sensitivity = LSM6DSO_ACC_SENSITIVITY_FS_2G;
 8004390:	683b      	ldr	r3, [r7, #0]
 8004392:	4a0c      	ldr	r2, [pc, #48]	; (80043c4 <LSM6DSO_ACC_GetSensitivity+0x7c>)
 8004394:	601a      	str	r2, [r3, #0]
      break;
 8004396:	e00f      	b.n	80043b8 <LSM6DSO_ACC_GetSensitivity+0x70>

    case LSM6DSO_4g:
      *Sensitivity = LSM6DSO_ACC_SENSITIVITY_FS_4G;
 8004398:	683b      	ldr	r3, [r7, #0]
 800439a:	4a0b      	ldr	r2, [pc, #44]	; (80043c8 <LSM6DSO_ACC_GetSensitivity+0x80>)
 800439c:	601a      	str	r2, [r3, #0]
      break;
 800439e:	e00b      	b.n	80043b8 <LSM6DSO_ACC_GetSensitivity+0x70>

    case LSM6DSO_8g:
      *Sensitivity = LSM6DSO_ACC_SENSITIVITY_FS_8G;
 80043a0:	683b      	ldr	r3, [r7, #0]
 80043a2:	4a0a      	ldr	r2, [pc, #40]	; (80043cc <LSM6DSO_ACC_GetSensitivity+0x84>)
 80043a4:	601a      	str	r2, [r3, #0]
      break;
 80043a6:	e007      	b.n	80043b8 <LSM6DSO_ACC_GetSensitivity+0x70>

    case LSM6DSO_16g:
      *Sensitivity = LSM6DSO_ACC_SENSITIVITY_FS_16G;
 80043a8:	683b      	ldr	r3, [r7, #0]
 80043aa:	4a09      	ldr	r2, [pc, #36]	; (80043d0 <LSM6DSO_ACC_GetSensitivity+0x88>)
 80043ac:	601a      	str	r2, [r3, #0]
      break;
 80043ae:	e003      	b.n	80043b8 <LSM6DSO_ACC_GetSensitivity+0x70>

    default:
      ret = LSM6DSO_ERROR;
 80043b0:	f04f 33ff 	mov.w	r3, #4294967295
 80043b4:	60fb      	str	r3, [r7, #12]
      break;
 80043b6:	bf00      	nop
  }

  return ret;
 80043b8:	68fb      	ldr	r3, [r7, #12]
}
 80043ba:	4618      	mov	r0, r3
 80043bc:	3710      	adds	r7, #16
 80043be:	46bd      	mov	sp, r7
 80043c0:	bd80      	pop	{r7, pc}
 80043c2:	bf00      	nop
 80043c4:	3d79db23 	.word	0x3d79db23
 80043c8:	3df9db23 	.word	0x3df9db23
 80043cc:	3e79db23 	.word	0x3e79db23
 80043d0:	3ef9db23 	.word	0x3ef9db23

080043d4 <LSM6DSO_ACC_GetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr pointer where the output data rate is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_ACC_GetOutputDataRate(LSM6DSO_Object_t *pObj, float_t *Odr)
{
 80043d4:	b580      	push	{r7, lr}
 80043d6:	b084      	sub	sp, #16
 80043d8:	af00      	add	r7, sp, #0
 80043da:	6078      	str	r0, [r7, #4]
 80043dc:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSO_OK;
 80043de:	2300      	movs	r3, #0
 80043e0:	60fb      	str	r3, [r7, #12]
  lsm6dso_odr_xl_t odr_low_level;

  /* Get current output data rate. */
  if (lsm6dso_xl_data_rate_get(&(pObj->Ctx), &odr_low_level) != LSM6DSO_OK)
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	3320      	adds	r3, #32
 80043e6:	f107 020b 	add.w	r2, r7, #11
 80043ea:	4611      	mov	r1, r2
 80043ec:	4618      	mov	r0, r3
 80043ee:	f001 f9d1 	bl	8005794 <lsm6dso_xl_data_rate_get>
 80043f2:	4603      	mov	r3, r0
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	d002      	beq.n	80043fe <LSM6DSO_ACC_GetOutputDataRate+0x2a>
  {
    return LSM6DSO_ERROR;
 80043f8:	f04f 33ff 	mov.w	r3, #4294967295
 80043fc:	e054      	b.n	80044a8 <LSM6DSO_ACC_GetOutputDataRate+0xd4>
  }

  switch (odr_low_level)
 80043fe:	7afb      	ldrb	r3, [r7, #11]
 8004400:	2b0b      	cmp	r3, #11
 8004402:	d84c      	bhi.n	800449e <LSM6DSO_ACC_GetOutputDataRate+0xca>
 8004404:	a201      	add	r2, pc, #4	; (adr r2, 800440c <LSM6DSO_ACC_GetOutputDataRate+0x38>)
 8004406:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800440a:	bf00      	nop
 800440c:	0800443d 	.word	0x0800443d
 8004410:	0800444f 	.word	0x0800444f
 8004414:	08004457 	.word	0x08004457
 8004418:	0800445f 	.word	0x0800445f
 800441c:	08004467 	.word	0x08004467
 8004420:	0800446f 	.word	0x0800446f
 8004424:	08004477 	.word	0x08004477
 8004428:	0800447f 	.word	0x0800447f
 800442c:	08004487 	.word	0x08004487
 8004430:	0800448f 	.word	0x0800448f
 8004434:	08004497 	.word	0x08004497
 8004438:	08004447 	.word	0x08004447
  {
    case LSM6DSO_XL_ODR_OFF:
      *Odr = 0.0f;
 800443c:	683b      	ldr	r3, [r7, #0]
 800443e:	f04f 0200 	mov.w	r2, #0
 8004442:	601a      	str	r2, [r3, #0]
      break;
 8004444:	e02f      	b.n	80044a6 <LSM6DSO_ACC_GetOutputDataRate+0xd2>

    case LSM6DSO_XL_ODR_1Hz6:
      *Odr = 1.6f;
 8004446:	683b      	ldr	r3, [r7, #0]
 8004448:	4a19      	ldr	r2, [pc, #100]	; (80044b0 <LSM6DSO_ACC_GetOutputDataRate+0xdc>)
 800444a:	601a      	str	r2, [r3, #0]
      break;
 800444c:	e02b      	b.n	80044a6 <LSM6DSO_ACC_GetOutputDataRate+0xd2>

    case LSM6DSO_XL_ODR_12Hz5:
      *Odr = 12.5f;
 800444e:	683b      	ldr	r3, [r7, #0]
 8004450:	4a18      	ldr	r2, [pc, #96]	; (80044b4 <LSM6DSO_ACC_GetOutputDataRate+0xe0>)
 8004452:	601a      	str	r2, [r3, #0]
      break;
 8004454:	e027      	b.n	80044a6 <LSM6DSO_ACC_GetOutputDataRate+0xd2>

    case LSM6DSO_XL_ODR_26Hz:
      *Odr = 26.0f;
 8004456:	683b      	ldr	r3, [r7, #0]
 8004458:	4a17      	ldr	r2, [pc, #92]	; (80044b8 <LSM6DSO_ACC_GetOutputDataRate+0xe4>)
 800445a:	601a      	str	r2, [r3, #0]
      break;
 800445c:	e023      	b.n	80044a6 <LSM6DSO_ACC_GetOutputDataRate+0xd2>

    case LSM6DSO_XL_ODR_52Hz:
      *Odr = 52.0f;
 800445e:	683b      	ldr	r3, [r7, #0]
 8004460:	4a16      	ldr	r2, [pc, #88]	; (80044bc <LSM6DSO_ACC_GetOutputDataRate+0xe8>)
 8004462:	601a      	str	r2, [r3, #0]
      break;
 8004464:	e01f      	b.n	80044a6 <LSM6DSO_ACC_GetOutputDataRate+0xd2>

    case LSM6DSO_XL_ODR_104Hz:
      *Odr = 104.0f;
 8004466:	683b      	ldr	r3, [r7, #0]
 8004468:	4a15      	ldr	r2, [pc, #84]	; (80044c0 <LSM6DSO_ACC_GetOutputDataRate+0xec>)
 800446a:	601a      	str	r2, [r3, #0]
      break;
 800446c:	e01b      	b.n	80044a6 <LSM6DSO_ACC_GetOutputDataRate+0xd2>

    case LSM6DSO_XL_ODR_208Hz:
      *Odr = 208.0f;
 800446e:	683b      	ldr	r3, [r7, #0]
 8004470:	4a14      	ldr	r2, [pc, #80]	; (80044c4 <LSM6DSO_ACC_GetOutputDataRate+0xf0>)
 8004472:	601a      	str	r2, [r3, #0]
      break;
 8004474:	e017      	b.n	80044a6 <LSM6DSO_ACC_GetOutputDataRate+0xd2>

    case LSM6DSO_XL_ODR_417Hz:
      *Odr = 417.0f;
 8004476:	683b      	ldr	r3, [r7, #0]
 8004478:	4a13      	ldr	r2, [pc, #76]	; (80044c8 <LSM6DSO_ACC_GetOutputDataRate+0xf4>)
 800447a:	601a      	str	r2, [r3, #0]
      break;
 800447c:	e013      	b.n	80044a6 <LSM6DSO_ACC_GetOutputDataRate+0xd2>

    case LSM6DSO_XL_ODR_833Hz:
      *Odr = 833.0f;
 800447e:	683b      	ldr	r3, [r7, #0]
 8004480:	4a12      	ldr	r2, [pc, #72]	; (80044cc <LSM6DSO_ACC_GetOutputDataRate+0xf8>)
 8004482:	601a      	str	r2, [r3, #0]
      break;
 8004484:	e00f      	b.n	80044a6 <LSM6DSO_ACC_GetOutputDataRate+0xd2>

    case LSM6DSO_XL_ODR_1667Hz:
      *Odr = 1667.0f;
 8004486:	683b      	ldr	r3, [r7, #0]
 8004488:	4a11      	ldr	r2, [pc, #68]	; (80044d0 <LSM6DSO_ACC_GetOutputDataRate+0xfc>)
 800448a:	601a      	str	r2, [r3, #0]
      break;
 800448c:	e00b      	b.n	80044a6 <LSM6DSO_ACC_GetOutputDataRate+0xd2>

    case LSM6DSO_XL_ODR_3333Hz:
      *Odr = 3333.0f;
 800448e:	683b      	ldr	r3, [r7, #0]
 8004490:	4a10      	ldr	r2, [pc, #64]	; (80044d4 <LSM6DSO_ACC_GetOutputDataRate+0x100>)
 8004492:	601a      	str	r2, [r3, #0]
      break;
 8004494:	e007      	b.n	80044a6 <LSM6DSO_ACC_GetOutputDataRate+0xd2>

    case LSM6DSO_XL_ODR_6667Hz:
      *Odr = 6667.0f;
 8004496:	683b      	ldr	r3, [r7, #0]
 8004498:	4a0f      	ldr	r2, [pc, #60]	; (80044d8 <LSM6DSO_ACC_GetOutputDataRate+0x104>)
 800449a:	601a      	str	r2, [r3, #0]
      break;
 800449c:	e003      	b.n	80044a6 <LSM6DSO_ACC_GetOutputDataRate+0xd2>

    default:
      ret = LSM6DSO_ERROR;
 800449e:	f04f 33ff 	mov.w	r3, #4294967295
 80044a2:	60fb      	str	r3, [r7, #12]
      break;
 80044a4:	bf00      	nop
  }

  return ret;
 80044a6:	68fb      	ldr	r3, [r7, #12]
}
 80044a8:	4618      	mov	r0, r3
 80044aa:	3710      	adds	r7, #16
 80044ac:	46bd      	mov	sp, r7
 80044ae:	bd80      	pop	{r7, pc}
 80044b0:	3fcccccd 	.word	0x3fcccccd
 80044b4:	41480000 	.word	0x41480000
 80044b8:	41d00000 	.word	0x41d00000
 80044bc:	42500000 	.word	0x42500000
 80044c0:	42d00000 	.word	0x42d00000
 80044c4:	43500000 	.word	0x43500000
 80044c8:	43d08000 	.word	0x43d08000
 80044cc:	44504000 	.word	0x44504000
 80044d0:	44d06000 	.word	0x44d06000
 80044d4:	45505000 	.word	0x45505000
 80044d8:	45d05800 	.word	0x45d05800

080044dc <LSM6DSO_ACC_SetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_ACC_SetOutputDataRate(LSM6DSO_Object_t *pObj, float_t Odr)
{
 80044dc:	b580      	push	{r7, lr}
 80044de:	b082      	sub	sp, #8
 80044e0:	af00      	add	r7, sp, #0
 80044e2:	6078      	str	r0, [r7, #4]
 80044e4:	ed87 0a00 	vstr	s0, [r7]
  return LSM6DSO_ACC_SetOutputDataRate_With_Mode(pObj, Odr, LSM6DSO_ACC_HIGH_PERFORMANCE_MODE);
 80044e8:	2100      	movs	r1, #0
 80044ea:	ed97 0a00 	vldr	s0, [r7]
 80044ee:	6878      	ldr	r0, [r7, #4]
 80044f0:	f000 f806 	bl	8004500 <LSM6DSO_ACC_SetOutputDataRate_With_Mode>
 80044f4:	4603      	mov	r3, r0
}
 80044f6:	4618      	mov	r0, r3
 80044f8:	3708      	adds	r7, #8
 80044fa:	46bd      	mov	sp, r7
 80044fc:	bd80      	pop	{r7, pc}
	...

08004500 <LSM6DSO_ACC_SetOutputDataRate_With_Mode>:
  * @param  Mode the accelerometer operating mode
  * @note   This function switches off the gyroscope if Ultra Low Power Mode is set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_ACC_SetOutputDataRate_With_Mode(LSM6DSO_Object_t *pObj, float_t Odr, LSM6DSO_ACC_Operating_Mode_t Mode)
{
 8004500:	b580      	push	{r7, lr}
 8004502:	b08c      	sub	sp, #48	; 0x30
 8004504:	af00      	add	r7, sp, #0
 8004506:	60f8      	str	r0, [r7, #12]
 8004508:	ed87 0a02 	vstr	s0, [r7, #8]
 800450c:	460b      	mov	r3, r1
 800450e:	71fb      	strb	r3, [r7, #7]
  int32_t ret = LSM6DSO_OK;
 8004510:	2300      	movs	r3, #0
 8004512:	62fb      	str	r3, [r7, #44]	; 0x2c
  float_t newOdr = Odr;
 8004514:	68bb      	ldr	r3, [r7, #8]
 8004516:	62bb      	str	r3, [r7, #40]	; 0x28

  switch (Mode)
 8004518:	79fb      	ldrb	r3, [r7, #7]
 800451a:	2b02      	cmp	r3, #2
 800451c:	f000 80ea 	beq.w	80046f4 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x1f4>
 8004520:	2b02      	cmp	r3, #2
 8004522:	f300 8163 	bgt.w	80047ec <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2ec>
 8004526:	2b00      	cmp	r3, #0
 8004528:	d002      	beq.n	8004530 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x30>
 800452a:	2b01      	cmp	r3, #1
 800452c:	d074      	beq.n	8004618 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x118>
 800452e:	e15d      	b.n	80047ec <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2ec>
    {
      /* We must uncheck Low Power and Ultra Low Power bits if they are enabled */
      lsm6dso_ctrl5_c_t val1;
      lsm6dso_ctrl6_c_t val2;

      if (lsm6dso_read_reg(&(pObj->Ctx), LSM6DSO_CTRL5_C, (uint8_t *)&val1, 1) != LSM6DSO_OK)
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	f103 0020 	add.w	r0, r3, #32
 8004536:	f107 0224 	add.w	r2, r7, #36	; 0x24
 800453a:	2301      	movs	r3, #1
 800453c:	2114      	movs	r1, #20
 800453e:	f000 ff9f 	bl	8005480 <lsm6dso_read_reg>
 8004542:	4603      	mov	r3, r0
 8004544:	2b00      	cmp	r3, #0
 8004546:	d002      	beq.n	800454e <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x4e>
      {
        return LSM6DSO_ERROR;
 8004548:	f04f 33ff 	mov.w	r3, #4294967295
 800454c:	e16c      	b.n	8004828 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
      }

      if (val1.xl_ulp_en != 0U)
 800454e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8004552:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8004556:	b2db      	uxtb	r3, r3
 8004558:	2b00      	cmp	r3, #0
 800455a:	d025      	beq.n	80045a8 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0xa8>
      {
        /* Power off the accelerometer */
        if (pObj->acc_is_enabled == 1U)
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8004562:	2b01      	cmp	r3, #1
 8004564:	d10b      	bne.n	800457e <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x7e>
        {
          if (lsm6dso_xl_data_rate_set(&(pObj->Ctx), LSM6DSO_XL_ODR_OFF) != LSM6DSO_OK)
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	3320      	adds	r3, #32
 800456a:	2100      	movs	r1, #0
 800456c:	4618      	mov	r0, r3
 800456e:	f001 f815 	bl	800559c <lsm6dso_xl_data_rate_set>
 8004572:	4603      	mov	r3, r0
 8004574:	2b00      	cmp	r3, #0
 8004576:	d002      	beq.n	800457e <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x7e>
          {
            return LSM6DSO_ERROR;
 8004578:	f04f 33ff 	mov.w	r3, #4294967295
 800457c:	e154      	b.n	8004828 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
          }
        }

        val1.xl_ulp_en = 0;
 800457e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8004582:	f36f 13c7 	bfc	r3, #7, #1
 8004586:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
        if (lsm6dso_write_reg(&(pObj->Ctx), LSM6DSO_CTRL5_C, (uint8_t *)&val1, 1) != LSM6DSO_OK)
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	f103 0020 	add.w	r0, r3, #32
 8004590:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8004594:	2301      	movs	r3, #1
 8004596:	2114      	movs	r1, #20
 8004598:	f000 ff8a 	bl	80054b0 <lsm6dso_write_reg>
 800459c:	4603      	mov	r3, r0
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d002      	beq.n	80045a8 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0xa8>
        {
          return LSM6DSO_ERROR;
 80045a2:	f04f 33ff 	mov.w	r3, #4294967295
 80045a6:	e13f      	b.n	8004828 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
        }
      }

      if (lsm6dso_read_reg(&(pObj->Ctx), LSM6DSO_CTRL6_C, (uint8_t *)&val2, 1) != LSM6DSO_OK)
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	f103 0020 	add.w	r0, r3, #32
 80045ae:	f107 0220 	add.w	r2, r7, #32
 80045b2:	2301      	movs	r3, #1
 80045b4:	2115      	movs	r1, #21
 80045b6:	f000 ff63 	bl	8005480 <lsm6dso_read_reg>
 80045ba:	4603      	mov	r3, r0
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d002      	beq.n	80045c6 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0xc6>
      {
        return LSM6DSO_ERROR;
 80045c0:	f04f 33ff 	mov.w	r3, #4294967295
 80045c4:	e130      	b.n	8004828 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
      }

      if (val2.xl_hm_mode != 0U)
 80045c6:	f897 3020 	ldrb.w	r3, [r7, #32]
 80045ca:	f003 0310 	and.w	r3, r3, #16
 80045ce:	b2db      	uxtb	r3, r3
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d014      	beq.n	80045fe <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0xfe>
      {
        val2.xl_hm_mode = 0U;
 80045d4:	f897 3020 	ldrb.w	r3, [r7, #32]
 80045d8:	f36f 1304 	bfc	r3, #4, #1
 80045dc:	f887 3020 	strb.w	r3, [r7, #32]
        if (lsm6dso_write_reg(&(pObj->Ctx), LSM6DSO_CTRL6_C, (uint8_t *)&val2, 1) != LSM6DSO_OK)
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	f103 0020 	add.w	r0, r3, #32
 80045e6:	f107 0220 	add.w	r2, r7, #32
 80045ea:	2301      	movs	r3, #1
 80045ec:	2115      	movs	r1, #21
 80045ee:	f000 ff5f 	bl	80054b0 <lsm6dso_write_reg>
 80045f2:	4603      	mov	r3, r0
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	d002      	beq.n	80045fe <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0xfe>
        {
          return LSM6DSO_ERROR;
 80045f8:	f04f 33ff 	mov.w	r3, #4294967295
 80045fc:	e114      	b.n	8004828 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
        }
      }

      /* ODR should be at least 12.5Hz */
      if (newOdr < 12.5f)
 80045fe:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8004602:	eeb2 7a09 	vmov.f32	s14, #41	; 0x41480000  12.5
 8004606:	eef4 7ac7 	vcmpe.f32	s15, s14
 800460a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800460e:	d400      	bmi.n	8004612 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x112>
      {
        newOdr = 12.5f;
      }
      break;
 8004610:	e0f0      	b.n	80047f4 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2f4>
        newOdr = 12.5f;
 8004612:	4b87      	ldr	r3, [pc, #540]	; (8004830 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x330>)
 8004614:	62bb      	str	r3, [r7, #40]	; 0x28
 8004616:	e0ed      	b.n	80047f4 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2f4>
      /* We must uncheck Ultra Low Power bit if it is enabled */
      /* and check the Low Power bit if it is unchecked       */
      lsm6dso_ctrl5_c_t val1;
      lsm6dso_ctrl6_c_t val2;

      if (lsm6dso_read_reg(&(pObj->Ctx), LSM6DSO_CTRL5_C, (uint8_t *)&val1, 1) != LSM6DSO_OK)
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	f103 0020 	add.w	r0, r3, #32
 800461e:	f107 021c 	add.w	r2, r7, #28
 8004622:	2301      	movs	r3, #1
 8004624:	2114      	movs	r1, #20
 8004626:	f000 ff2b 	bl	8005480 <lsm6dso_read_reg>
 800462a:	4603      	mov	r3, r0
 800462c:	2b00      	cmp	r3, #0
 800462e:	d002      	beq.n	8004636 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x136>
      {
        return LSM6DSO_ERROR;
 8004630:	f04f 33ff 	mov.w	r3, #4294967295
 8004634:	e0f8      	b.n	8004828 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
      }

      if (val1.xl_ulp_en != 0U)
 8004636:	7f3b      	ldrb	r3, [r7, #28]
 8004638:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800463c:	b2db      	uxtb	r3, r3
 800463e:	2b00      	cmp	r3, #0
 8004640:	d023      	beq.n	800468a <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x18a>
      {
        /* Power off the accelerometer */
        if (pObj->acc_is_enabled == 1U)
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8004648:	2b01      	cmp	r3, #1
 800464a:	d10b      	bne.n	8004664 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x164>
        {
          if (lsm6dso_xl_data_rate_set(&(pObj->Ctx), LSM6DSO_XL_ODR_OFF) != LSM6DSO_OK)
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	3320      	adds	r3, #32
 8004650:	2100      	movs	r1, #0
 8004652:	4618      	mov	r0, r3
 8004654:	f000 ffa2 	bl	800559c <lsm6dso_xl_data_rate_set>
 8004658:	4603      	mov	r3, r0
 800465a:	2b00      	cmp	r3, #0
 800465c:	d002      	beq.n	8004664 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x164>
          {
            return LSM6DSO_ERROR;
 800465e:	f04f 33ff 	mov.w	r3, #4294967295
 8004662:	e0e1      	b.n	8004828 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
          }
        }

        val1.xl_ulp_en = 0;
 8004664:	7f3b      	ldrb	r3, [r7, #28]
 8004666:	f36f 13c7 	bfc	r3, #7, #1
 800466a:	773b      	strb	r3, [r7, #28]
        if (lsm6dso_write_reg(&(pObj->Ctx), LSM6DSO_CTRL5_C, (uint8_t *)&val1, 1) != LSM6DSO_OK)
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	f103 0020 	add.w	r0, r3, #32
 8004672:	f107 021c 	add.w	r2, r7, #28
 8004676:	2301      	movs	r3, #1
 8004678:	2114      	movs	r1, #20
 800467a:	f000 ff19 	bl	80054b0 <lsm6dso_write_reg>
 800467e:	4603      	mov	r3, r0
 8004680:	2b00      	cmp	r3, #0
 8004682:	d002      	beq.n	800468a <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x18a>
        {
          return LSM6DSO_ERROR;
 8004684:	f04f 33ff 	mov.w	r3, #4294967295
 8004688:	e0ce      	b.n	8004828 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
        }
      }

      if (lsm6dso_read_reg(&(pObj->Ctx), LSM6DSO_CTRL6_C, (uint8_t *)&val2, 1) != LSM6DSO_OK)
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	f103 0020 	add.w	r0, r3, #32
 8004690:	f107 0218 	add.w	r2, r7, #24
 8004694:	2301      	movs	r3, #1
 8004696:	2115      	movs	r1, #21
 8004698:	f000 fef2 	bl	8005480 <lsm6dso_read_reg>
 800469c:	4603      	mov	r3, r0
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d002      	beq.n	80046a8 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x1a8>
      {
        return LSM6DSO_ERROR;
 80046a2:	f04f 33ff 	mov.w	r3, #4294967295
 80046a6:	e0bf      	b.n	8004828 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
      }

      if (val2.xl_hm_mode == 0U)
 80046a8:	7e3b      	ldrb	r3, [r7, #24]
 80046aa:	f003 0310 	and.w	r3, r3, #16
 80046ae:	b2db      	uxtb	r3, r3
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d112      	bne.n	80046da <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x1da>
      {
        val2.xl_hm_mode = 1U;
 80046b4:	7e3b      	ldrb	r3, [r7, #24]
 80046b6:	f043 0310 	orr.w	r3, r3, #16
 80046ba:	763b      	strb	r3, [r7, #24]
        if (lsm6dso_write_reg(&(pObj->Ctx), LSM6DSO_CTRL6_C, (uint8_t *)&val2, 1) != LSM6DSO_OK)
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	f103 0020 	add.w	r0, r3, #32
 80046c2:	f107 0218 	add.w	r2, r7, #24
 80046c6:	2301      	movs	r3, #1
 80046c8:	2115      	movs	r1, #21
 80046ca:	f000 fef1 	bl	80054b0 <lsm6dso_write_reg>
 80046ce:	4603      	mov	r3, r0
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	d002      	beq.n	80046da <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x1da>
        {
          return LSM6DSO_ERROR;
 80046d4:	f04f 33ff 	mov.w	r3, #4294967295
 80046d8:	e0a6      	b.n	8004828 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
        }
      }

      /* Now we need to limit the ODR to 208 Hz if it is higher */
      if (newOdr > 208.0f)
 80046da:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 80046de:	ed9f 7a55 	vldr	s14, [pc, #340]	; 8004834 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x334>
 80046e2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80046e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80046ea:	dc00      	bgt.n	80046ee <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x1ee>
      {
        newOdr = 208.0f;
      }
      break;
 80046ec:	e082      	b.n	80047f4 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2f4>
        newOdr = 208.0f;
 80046ee:	4b52      	ldr	r3, [pc, #328]	; (8004838 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x338>)
 80046f0:	62bb      	str	r3, [r7, #40]	; 0x28
 80046f2:	e07f      	b.n	80047f4 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2f4>
      /* and check the Ultra Low Power bit if it is unchecked             */
      /* We must switch off gyro otherwise Ultra Low Power does not work  */
      lsm6dso_ctrl5_c_t val1;
      lsm6dso_ctrl6_c_t val2;

      if (lsm6dso_read_reg(&(pObj->Ctx), LSM6DSO_CTRL6_C, (uint8_t *)&val2, 1) != LSM6DSO_OK)
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	f103 0020 	add.w	r0, r3, #32
 80046fa:	f107 0210 	add.w	r2, r7, #16
 80046fe:	2301      	movs	r3, #1
 8004700:	2115      	movs	r1, #21
 8004702:	f000 febd 	bl	8005480 <lsm6dso_read_reg>
 8004706:	4603      	mov	r3, r0
 8004708:	2b00      	cmp	r3, #0
 800470a:	d002      	beq.n	8004712 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x212>
      {
        return LSM6DSO_ERROR;
 800470c:	f04f 33ff 	mov.w	r3, #4294967295
 8004710:	e08a      	b.n	8004828 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
      }

      if (val2.xl_hm_mode != 0U)
 8004712:	7c3b      	ldrb	r3, [r7, #16]
 8004714:	f003 0310 	and.w	r3, r3, #16
 8004718:	b2db      	uxtb	r3, r3
 800471a:	2b00      	cmp	r3, #0
 800471c:	d012      	beq.n	8004744 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x244>
      {
        val2.xl_hm_mode = 0U;
 800471e:	7c3b      	ldrb	r3, [r7, #16]
 8004720:	f36f 1304 	bfc	r3, #4, #1
 8004724:	743b      	strb	r3, [r7, #16]
        if (lsm6dso_write_reg(&(pObj->Ctx), LSM6DSO_CTRL6_C, (uint8_t *)&val2, 1) != LSM6DSO_OK)
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	f103 0020 	add.w	r0, r3, #32
 800472c:	f107 0210 	add.w	r2, r7, #16
 8004730:	2301      	movs	r3, #1
 8004732:	2115      	movs	r1, #21
 8004734:	f000 febc 	bl	80054b0 <lsm6dso_write_reg>
 8004738:	4603      	mov	r3, r0
 800473a:	2b00      	cmp	r3, #0
 800473c:	d002      	beq.n	8004744 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x244>
        {
          return LSM6DSO_ERROR;
 800473e:	f04f 33ff 	mov.w	r3, #4294967295
 8004742:	e071      	b.n	8004828 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
        }
      }

      /* Disable Gyro */
      if (pObj->gyro_is_enabled == 1U)
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800474a:	2b01      	cmp	r3, #1
 800474c:	d108      	bne.n	8004760 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x260>
      {
        if (LSM6DSO_GYRO_Disable(pObj) != LSM6DSO_OK)
 800474e:	68f8      	ldr	r0, [r7, #12]
 8004750:	f000 f979 	bl	8004a46 <LSM6DSO_GYRO_Disable>
 8004754:	4603      	mov	r3, r0
 8004756:	2b00      	cmp	r3, #0
 8004758:	d002      	beq.n	8004760 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x260>
        {
          return LSM6DSO_ERROR;
 800475a:	f04f 33ff 	mov.w	r3, #4294967295
 800475e:	e063      	b.n	8004828 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
        }
      }

      if (lsm6dso_read_reg(&(pObj->Ctx), LSM6DSO_CTRL5_C, (uint8_t *)&val1, 1) != LSM6DSO_OK)
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	f103 0020 	add.w	r0, r3, #32
 8004766:	f107 0214 	add.w	r2, r7, #20
 800476a:	2301      	movs	r3, #1
 800476c:	2114      	movs	r1, #20
 800476e:	f000 fe87 	bl	8005480 <lsm6dso_read_reg>
 8004772:	4603      	mov	r3, r0
 8004774:	2b00      	cmp	r3, #0
 8004776:	d002      	beq.n	800477e <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x27e>
      {
        return LSM6DSO_ERROR;
 8004778:	f04f 33ff 	mov.w	r3, #4294967295
 800477c:	e054      	b.n	8004828 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
      }

      if (val1.xl_ulp_en == 0U)
 800477e:	7d3b      	ldrb	r3, [r7, #20]
 8004780:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8004784:	b2db      	uxtb	r3, r3
 8004786:	2b00      	cmp	r3, #0
 8004788:	d123      	bne.n	80047d2 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2d2>
      {
        /* Power off the accelerometer */
        if (pObj->acc_is_enabled == 1U)
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8004790:	2b01      	cmp	r3, #1
 8004792:	d10b      	bne.n	80047ac <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2ac>
        {
          if (lsm6dso_xl_data_rate_set(&(pObj->Ctx), LSM6DSO_XL_ODR_OFF) != LSM6DSO_OK)
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	3320      	adds	r3, #32
 8004798:	2100      	movs	r1, #0
 800479a:	4618      	mov	r0, r3
 800479c:	f000 fefe 	bl	800559c <lsm6dso_xl_data_rate_set>
 80047a0:	4603      	mov	r3, r0
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d002      	beq.n	80047ac <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2ac>
          {
            return LSM6DSO_ERROR;
 80047a6:	f04f 33ff 	mov.w	r3, #4294967295
 80047aa:	e03d      	b.n	8004828 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
          }
        }

        val1.xl_ulp_en = 1U;
 80047ac:	7d3b      	ldrb	r3, [r7, #20]
 80047ae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80047b2:	753b      	strb	r3, [r7, #20]
        if (lsm6dso_write_reg(&(pObj->Ctx), LSM6DSO_CTRL5_C, (uint8_t *)&val1, 1) != LSM6DSO_OK)
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	f103 0020 	add.w	r0, r3, #32
 80047ba:	f107 0214 	add.w	r2, r7, #20
 80047be:	2301      	movs	r3, #1
 80047c0:	2114      	movs	r1, #20
 80047c2:	f000 fe75 	bl	80054b0 <lsm6dso_write_reg>
 80047c6:	4603      	mov	r3, r0
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d002      	beq.n	80047d2 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2d2>
        {
          return LSM6DSO_ERROR;
 80047cc:	f04f 33ff 	mov.w	r3, #4294967295
 80047d0:	e02a      	b.n	8004828 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
        }
      }

      /* Now we need to limit the ODR to 208 Hz if it is higher */
      if (newOdr > 208.0f)
 80047d2:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 80047d6:	ed9f 7a17 	vldr	s14, [pc, #92]	; 8004834 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x334>
 80047da:	eef4 7ac7 	vcmpe.f32	s15, s14
 80047de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80047e2:	dc00      	bgt.n	80047e6 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2e6>
      {
        newOdr = 208.0f;
      }
      break;
 80047e4:	e006      	b.n	80047f4 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2f4>
        newOdr = 208.0f;
 80047e6:	4b14      	ldr	r3, [pc, #80]	; (8004838 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x338>)
 80047e8:	62bb      	str	r3, [r7, #40]	; 0x28
 80047ea:	e003      	b.n	80047f4 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2f4>
    }
    default:
      ret = LSM6DSO_ERROR;
 80047ec:	f04f 33ff 	mov.w	r3, #4294967295
 80047f0:	62fb      	str	r3, [r7, #44]	; 0x2c
      break;
 80047f2:	bf00      	nop
  }

  if (ret == LSM6DSO_ERROR)
 80047f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80047f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80047fa:	d102      	bne.n	8004802 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x302>
  {
    return LSM6DSO_ERROR;
 80047fc:	f04f 33ff 	mov.w	r3, #4294967295
 8004800:	e012      	b.n	8004828 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
  }

  if (pObj->acc_is_enabled == 1U)
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8004808:	2b01      	cmp	r3, #1
 800480a:	d106      	bne.n	800481a <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x31a>
  {
    ret = LSM6DSO_ACC_SetOutputDataRate_When_Enabled(pObj, newOdr);
 800480c:	ed97 0a0a 	vldr	s0, [r7, #40]	; 0x28
 8004810:	68f8      	ldr	r0, [r7, #12]
 8004812:	f000 fbc9 	bl	8004fa8 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled>
 8004816:	62f8      	str	r0, [r7, #44]	; 0x2c
 8004818:	e005      	b.n	8004826 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x326>
  }
  else
  {
    ret = LSM6DSO_ACC_SetOutputDataRate_When_Disabled(pObj, newOdr);
 800481a:	ed97 0a0a 	vldr	s0, [r7, #40]	; 0x28
 800481e:	68f8      	ldr	r0, [r7, #12]
 8004820:	f000 fc5a 	bl	80050d8 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled>
 8004824:	62f8      	str	r0, [r7, #44]	; 0x2c
  }

  return ret;
 8004826:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8004828:	4618      	mov	r0, r3
 800482a:	3730      	adds	r7, #48	; 0x30
 800482c:	46bd      	mov	sp, r7
 800482e:	bd80      	pop	{r7, pc}
 8004830:	41480000 	.word	0x41480000
 8004834:	43500000 	.word	0x43500000
 8004838:	43500000 	.word	0x43500000

0800483c <LSM6DSO_ACC_GetFullScale>:
  * @param  pObj the device pObj
  * @param  FullScale pointer where the full scale is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_ACC_GetFullScale(LSM6DSO_Object_t *pObj, int32_t *FullScale)
{
 800483c:	b580      	push	{r7, lr}
 800483e:	b084      	sub	sp, #16
 8004840:	af00      	add	r7, sp, #0
 8004842:	6078      	str	r0, [r7, #4]
 8004844:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSO_OK;
 8004846:	2300      	movs	r3, #0
 8004848:	60fb      	str	r3, [r7, #12]
  lsm6dso_fs_xl_t fs_low_level;

  /* Read actual full scale selection from sensor. */
  if (lsm6dso_xl_full_scale_get(&(pObj->Ctx), &fs_low_level) != LSM6DSO_OK)
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	3320      	adds	r3, #32
 800484e:	f107 020b 	add.w	r2, r7, #11
 8004852:	4611      	mov	r1, r2
 8004854:	4618      	mov	r0, r3
 8004856:	f000 fe69 	bl	800552c <lsm6dso_xl_full_scale_get>
 800485a:	4603      	mov	r3, r0
 800485c:	2b00      	cmp	r3, #0
 800485e:	d002      	beq.n	8004866 <LSM6DSO_ACC_GetFullScale+0x2a>
  {
    return LSM6DSO_ERROR;
 8004860:	f04f 33ff 	mov.w	r3, #4294967295
 8004864:	e023      	b.n	80048ae <LSM6DSO_ACC_GetFullScale+0x72>
  }

  switch (fs_low_level)
 8004866:	7afb      	ldrb	r3, [r7, #11]
 8004868:	2b03      	cmp	r3, #3
 800486a:	d81b      	bhi.n	80048a4 <LSM6DSO_ACC_GetFullScale+0x68>
 800486c:	a201      	add	r2, pc, #4	; (adr r2, 8004874 <LSM6DSO_ACC_GetFullScale+0x38>)
 800486e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004872:	bf00      	nop
 8004874:	08004885 	.word	0x08004885
 8004878:	0800489d 	.word	0x0800489d
 800487c:	0800488d 	.word	0x0800488d
 8004880:	08004895 	.word	0x08004895
  {
    case LSM6DSO_2g:
      *FullScale =  2;
 8004884:	683b      	ldr	r3, [r7, #0]
 8004886:	2202      	movs	r2, #2
 8004888:	601a      	str	r2, [r3, #0]
      break;
 800488a:	e00f      	b.n	80048ac <LSM6DSO_ACC_GetFullScale+0x70>

    case LSM6DSO_4g:
      *FullScale =  4;
 800488c:	683b      	ldr	r3, [r7, #0]
 800488e:	2204      	movs	r2, #4
 8004890:	601a      	str	r2, [r3, #0]
      break;
 8004892:	e00b      	b.n	80048ac <LSM6DSO_ACC_GetFullScale+0x70>

    case LSM6DSO_8g:
      *FullScale =  8;
 8004894:	683b      	ldr	r3, [r7, #0]
 8004896:	2208      	movs	r2, #8
 8004898:	601a      	str	r2, [r3, #0]
      break;
 800489a:	e007      	b.n	80048ac <LSM6DSO_ACC_GetFullScale+0x70>

    case LSM6DSO_16g:
      *FullScale = 16;
 800489c:	683b      	ldr	r3, [r7, #0]
 800489e:	2210      	movs	r2, #16
 80048a0:	601a      	str	r2, [r3, #0]
      break;
 80048a2:	e003      	b.n	80048ac <LSM6DSO_ACC_GetFullScale+0x70>

    default:
      ret = LSM6DSO_ERROR;
 80048a4:	f04f 33ff 	mov.w	r3, #4294967295
 80048a8:	60fb      	str	r3, [r7, #12]
      break;
 80048aa:	bf00      	nop
  }

  return ret;
 80048ac:	68fb      	ldr	r3, [r7, #12]
}
 80048ae:	4618      	mov	r0, r3
 80048b0:	3710      	adds	r7, #16
 80048b2:	46bd      	mov	sp, r7
 80048b4:	bd80      	pop	{r7, pc}
 80048b6:	bf00      	nop

080048b8 <LSM6DSO_ACC_SetFullScale>:
  * @param  pObj the device pObj
  * @param  FullScale the functional full scale to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_ACC_SetFullScale(LSM6DSO_Object_t *pObj, int32_t FullScale)
{
 80048b8:	b580      	push	{r7, lr}
 80048ba:	b084      	sub	sp, #16
 80048bc:	af00      	add	r7, sp, #0
 80048be:	6078      	str	r0, [r7, #4]
 80048c0:	6039      	str	r1, [r7, #0]
  lsm6dso_fs_xl_t new_fs;

  /* Seems like MISRA C-2012 rule 14.3a violation but only from single file statical analysis point of view because
     the parameter passed to the function is not known at the moment of analysis */
  new_fs = (FullScale <= 2) ? LSM6DSO_2g
           : (FullScale <= 4) ? LSM6DSO_4g
 80048c2:	683b      	ldr	r3, [r7, #0]
 80048c4:	2b02      	cmp	r3, #2
 80048c6:	dd0b      	ble.n	80048e0 <LSM6DSO_ACC_SetFullScale+0x28>
 80048c8:	683b      	ldr	r3, [r7, #0]
 80048ca:	2b04      	cmp	r3, #4
 80048cc:	dd06      	ble.n	80048dc <LSM6DSO_ACC_SetFullScale+0x24>
 80048ce:	683b      	ldr	r3, [r7, #0]
 80048d0:	2b08      	cmp	r3, #8
 80048d2:	dc01      	bgt.n	80048d8 <LSM6DSO_ACC_SetFullScale+0x20>
 80048d4:	2303      	movs	r3, #3
 80048d6:	e004      	b.n	80048e2 <LSM6DSO_ACC_SetFullScale+0x2a>
 80048d8:	2301      	movs	r3, #1
 80048da:	e002      	b.n	80048e2 <LSM6DSO_ACC_SetFullScale+0x2a>
 80048dc:	2302      	movs	r3, #2
 80048de:	e000      	b.n	80048e2 <LSM6DSO_ACC_SetFullScale+0x2a>
 80048e0:	2300      	movs	r3, #0
  new_fs = (FullScale <= 2) ? LSM6DSO_2g
 80048e2:	73fb      	strb	r3, [r7, #15]
           : (FullScale <= 8) ? LSM6DSO_8g
           :                    LSM6DSO_16g;

  if (lsm6dso_xl_full_scale_set(&(pObj->Ctx), new_fs) != LSM6DSO_OK)
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	3320      	adds	r3, #32
 80048e8:	7bfa      	ldrb	r2, [r7, #15]
 80048ea:	4611      	mov	r1, r2
 80048ec:	4618      	mov	r0, r3
 80048ee:	f000 fdf7 	bl	80054e0 <lsm6dso_xl_full_scale_set>
 80048f2:	4603      	mov	r3, r0
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d002      	beq.n	80048fe <LSM6DSO_ACC_SetFullScale+0x46>
  {
    return LSM6DSO_ERROR;
 80048f8:	f04f 33ff 	mov.w	r3, #4294967295
 80048fc:	e000      	b.n	8004900 <LSM6DSO_ACC_SetFullScale+0x48>
  }

  return LSM6DSO_OK;
 80048fe:	2300      	movs	r3, #0
}
 8004900:	4618      	mov	r0, r3
 8004902:	3710      	adds	r7, #16
 8004904:	46bd      	mov	sp, r7
 8004906:	bd80      	pop	{r7, pc}

08004908 <LSM6DSO_ACC_GetAxesRaw>:
  * @param  pObj the device pObj
  * @param  Value pointer where the raw values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_ACC_GetAxesRaw(LSM6DSO_Object_t *pObj, LSM6DSO_AxesRaw_t *Value)
{
 8004908:	b580      	push	{r7, lr}
 800490a:	b084      	sub	sp, #16
 800490c:	af00      	add	r7, sp, #0
 800490e:	6078      	str	r0, [r7, #4]
 8004910:	6039      	str	r1, [r7, #0]
  lsm6dso_axis3bit16_t data_raw;

  /* Read raw data values. */
  if (lsm6dso_acceleration_raw_get(&(pObj->Ctx), data_raw.i16bit) != LSM6DSO_OK)
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	3320      	adds	r3, #32
 8004916:	f107 0208 	add.w	r2, r7, #8
 800491a:	4611      	mov	r1, r2
 800491c:	4618      	mov	r0, r3
 800491e:	f001 f9d8 	bl	8005cd2 <lsm6dso_acceleration_raw_get>
 8004922:	4603      	mov	r3, r0
 8004924:	2b00      	cmp	r3, #0
 8004926:	d002      	beq.n	800492e <LSM6DSO_ACC_GetAxesRaw+0x26>
  {
    return LSM6DSO_ERROR;
 8004928:	f04f 33ff 	mov.w	r3, #4294967295
 800492c:	e00c      	b.n	8004948 <LSM6DSO_ACC_GetAxesRaw+0x40>
  }

  /* Format the data. */
  Value->x = data_raw.i16bit[0];
 800492e:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8004932:	683b      	ldr	r3, [r7, #0]
 8004934:	801a      	strh	r2, [r3, #0]
  Value->y = data_raw.i16bit[1];
 8004936:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 800493a:	683b      	ldr	r3, [r7, #0]
 800493c:	805a      	strh	r2, [r3, #2]
  Value->z = data_raw.i16bit[2];
 800493e:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8004942:	683b      	ldr	r3, [r7, #0]
 8004944:	809a      	strh	r2, [r3, #4]

  return LSM6DSO_OK;
 8004946:	2300      	movs	r3, #0
}
 8004948:	4618      	mov	r0, r3
 800494a:	3710      	adds	r7, #16
 800494c:	46bd      	mov	sp, r7
 800494e:	bd80      	pop	{r7, pc}

08004950 <LSM6DSO_ACC_GetAxes>:
  * @param  pObj the device pObj
  * @param  Acceleration pointer where the values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_ACC_GetAxes(LSM6DSO_Object_t *pObj, LSM6DSO_Axes_t *Acceleration)
{
 8004950:	b580      	push	{r7, lr}
 8004952:	b086      	sub	sp, #24
 8004954:	af00      	add	r7, sp, #0
 8004956:	6078      	str	r0, [r7, #4]
 8004958:	6039      	str	r1, [r7, #0]
  lsm6dso_axis3bit16_t data_raw;
  float_t sensitivity = 0.0f;
 800495a:	f04f 0300 	mov.w	r3, #0
 800495e:	60fb      	str	r3, [r7, #12]

  /* Read raw data values. */
  if (lsm6dso_acceleration_raw_get(&(pObj->Ctx), data_raw.i16bit) != LSM6DSO_OK)
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	3320      	adds	r3, #32
 8004964:	f107 0210 	add.w	r2, r7, #16
 8004968:	4611      	mov	r1, r2
 800496a:	4618      	mov	r0, r3
 800496c:	f001 f9b1 	bl	8005cd2 <lsm6dso_acceleration_raw_get>
 8004970:	4603      	mov	r3, r0
 8004972:	2b00      	cmp	r3, #0
 8004974:	d002      	beq.n	800497c <LSM6DSO_ACC_GetAxes+0x2c>
  {
    return LSM6DSO_ERROR;
 8004976:	f04f 33ff 	mov.w	r3, #4294967295
 800497a:	e03c      	b.n	80049f6 <LSM6DSO_ACC_GetAxes+0xa6>
  }

  /* Get LSM6DSO actual sensitivity. */
  if (LSM6DSO_ACC_GetSensitivity(pObj, &sensitivity) != LSM6DSO_OK)
 800497c:	f107 030c 	add.w	r3, r7, #12
 8004980:	4619      	mov	r1, r3
 8004982:	6878      	ldr	r0, [r7, #4]
 8004984:	f7ff fce0 	bl	8004348 <LSM6DSO_ACC_GetSensitivity>
 8004988:	4603      	mov	r3, r0
 800498a:	2b00      	cmp	r3, #0
 800498c:	d002      	beq.n	8004994 <LSM6DSO_ACC_GetAxes+0x44>
  {
    return LSM6DSO_ERROR;
 800498e:	f04f 33ff 	mov.w	r3, #4294967295
 8004992:	e030      	b.n	80049f6 <LSM6DSO_ACC_GetAxes+0xa6>
  }

  /* Calculate the data. */
  Acceleration->x = (int32_t)((float_t)((float_t)data_raw.i16bit[0] * sensitivity));
 8004994:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8004998:	ee07 3a90 	vmov	s15, r3
 800499c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80049a0:	edd7 7a03 	vldr	s15, [r7, #12]
 80049a4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80049a8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80049ac:	ee17 2a90 	vmov	r2, s15
 80049b0:	683b      	ldr	r3, [r7, #0]
 80049b2:	601a      	str	r2, [r3, #0]
  Acceleration->y = (int32_t)((float_t)((float_t)data_raw.i16bit[1] * sensitivity));
 80049b4:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80049b8:	ee07 3a90 	vmov	s15, r3
 80049bc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80049c0:	edd7 7a03 	vldr	s15, [r7, #12]
 80049c4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80049c8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80049cc:	ee17 2a90 	vmov	r2, s15
 80049d0:	683b      	ldr	r3, [r7, #0]
 80049d2:	605a      	str	r2, [r3, #4]
  Acceleration->z = (int32_t)((float_t)((float_t)data_raw.i16bit[2] * sensitivity));
 80049d4:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80049d8:	ee07 3a90 	vmov	s15, r3
 80049dc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80049e0:	edd7 7a03 	vldr	s15, [r7, #12]
 80049e4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80049e8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80049ec:	ee17 2a90 	vmov	r2, s15
 80049f0:	683b      	ldr	r3, [r7, #0]
 80049f2:	609a      	str	r2, [r3, #8]

  return LSM6DSO_OK;
 80049f4:	2300      	movs	r3, #0
}
 80049f6:	4618      	mov	r0, r3
 80049f8:	3718      	adds	r7, #24
 80049fa:	46bd      	mov	sp, r7
 80049fc:	bd80      	pop	{r7, pc}

080049fe <LSM6DSO_GYRO_Enable>:
  * @brief  Enable the LSM6DSO gyroscope sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_GYRO_Enable(LSM6DSO_Object_t *pObj)
{
 80049fe:	b580      	push	{r7, lr}
 8004a00:	b082      	sub	sp, #8
 8004a02:	af00      	add	r7, sp, #0
 8004a04:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->gyro_is_enabled == 1U)
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8004a0c:	2b01      	cmp	r3, #1
 8004a0e:	d101      	bne.n	8004a14 <LSM6DSO_GYRO_Enable+0x16>
  {
    return LSM6DSO_OK;
 8004a10:	2300      	movs	r3, #0
 8004a12:	e014      	b.n	8004a3e <LSM6DSO_GYRO_Enable+0x40>
  }

  /* Output data rate selection. */
  if (lsm6dso_gy_data_rate_set(&(pObj->Ctx), pObj->gyro_odr) != LSM6DSO_OK)
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	f103 0220 	add.w	r2, r3, #32
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8004a20:	4619      	mov	r1, r3
 8004a22:	4610      	mov	r0, r2
 8004a24:	f000 ff86 	bl	8005934 <lsm6dso_gy_data_rate_set>
 8004a28:	4603      	mov	r3, r0
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d002      	beq.n	8004a34 <LSM6DSO_GYRO_Enable+0x36>
  {
    return LSM6DSO_ERROR;
 8004a2e:	f04f 33ff 	mov.w	r3, #4294967295
 8004a32:	e004      	b.n	8004a3e <LSM6DSO_GYRO_Enable+0x40>
  }

  pObj->gyro_is_enabled = 1;
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	2201      	movs	r2, #1
 8004a38:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32

  return LSM6DSO_OK;
 8004a3c:	2300      	movs	r3, #0
}
 8004a3e:	4618      	mov	r0, r3
 8004a40:	3708      	adds	r7, #8
 8004a42:	46bd      	mov	sp, r7
 8004a44:	bd80      	pop	{r7, pc}

08004a46 <LSM6DSO_GYRO_Disable>:
  * @brief  Disable the LSM6DSO gyroscope sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_GYRO_Disable(LSM6DSO_Object_t *pObj)
{
 8004a46:	b580      	push	{r7, lr}
 8004a48:	b082      	sub	sp, #8
 8004a4a:	af00      	add	r7, sp, #0
 8004a4c:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->gyro_is_enabled == 0U)
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	d101      	bne.n	8004a5c <LSM6DSO_GYRO_Disable+0x16>
  {
    return LSM6DSO_OK;
 8004a58:	2300      	movs	r3, #0
 8004a5a:	e01f      	b.n	8004a9c <LSM6DSO_GYRO_Disable+0x56>
  }

  /* Get current output data rate. */
  if (lsm6dso_gy_data_rate_get(&(pObj->Ctx), &pObj->gyro_odr) != LSM6DSO_OK)
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	f103 0220 	add.w	r2, r3, #32
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	3334      	adds	r3, #52	; 0x34
 8004a66:	4619      	mov	r1, r3
 8004a68:	4610      	mov	r0, r2
 8004a6a:	f001 f85f 	bl	8005b2c <lsm6dso_gy_data_rate_get>
 8004a6e:	4603      	mov	r3, r0
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	d002      	beq.n	8004a7a <LSM6DSO_GYRO_Disable+0x34>
  {
    return LSM6DSO_ERROR;
 8004a74:	f04f 33ff 	mov.w	r3, #4294967295
 8004a78:	e010      	b.n	8004a9c <LSM6DSO_GYRO_Disable+0x56>
  }

  /* Output data rate selection - power down. */
  if (lsm6dso_gy_data_rate_set(&(pObj->Ctx), LSM6DSO_GY_ODR_OFF) != LSM6DSO_OK)
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	3320      	adds	r3, #32
 8004a7e:	2100      	movs	r1, #0
 8004a80:	4618      	mov	r0, r3
 8004a82:	f000 ff57 	bl	8005934 <lsm6dso_gy_data_rate_set>
 8004a86:	4603      	mov	r3, r0
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	d002      	beq.n	8004a92 <LSM6DSO_GYRO_Disable+0x4c>
  {
    return LSM6DSO_ERROR;
 8004a8c:	f04f 33ff 	mov.w	r3, #4294967295
 8004a90:	e004      	b.n	8004a9c <LSM6DSO_GYRO_Disable+0x56>
  }

  pObj->gyro_is_enabled = 0;
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	2200      	movs	r2, #0
 8004a96:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32

  return LSM6DSO_OK;
 8004a9a:	2300      	movs	r3, #0
}
 8004a9c:	4618      	mov	r0, r3
 8004a9e:	3708      	adds	r7, #8
 8004aa0:	46bd      	mov	sp, r7
 8004aa2:	bd80      	pop	{r7, pc}

08004aa4 <LSM6DSO_GYRO_GetSensitivity>:
  * @param  pObj the device pObj
  * @param  Sensitivity pointer
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_GYRO_GetSensitivity(LSM6DSO_Object_t *pObj, float_t *Sensitivity)
{
 8004aa4:	b580      	push	{r7, lr}
 8004aa6:	b084      	sub	sp, #16
 8004aa8:	af00      	add	r7, sp, #0
 8004aaa:	6078      	str	r0, [r7, #4]
 8004aac:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSO_OK;
 8004aae:	2300      	movs	r3, #0
 8004ab0:	60fb      	str	r3, [r7, #12]
  lsm6dso_fs_g_t full_scale;

  /* Read actual full scale selection from sensor. */
  if (lsm6dso_gy_full_scale_get(&(pObj->Ctx), &full_scale) != LSM6DSO_OK)
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	3320      	adds	r3, #32
 8004ab6:	f107 020b 	add.w	r2, r7, #11
 8004aba:	4611      	mov	r1, r2
 8004abc:	4618      	mov	r0, r3
 8004abe:	f000 fef7 	bl	80058b0 <lsm6dso_gy_full_scale_get>
 8004ac2:	4603      	mov	r3, r0
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	d002      	beq.n	8004ace <LSM6DSO_GYRO_GetSensitivity+0x2a>
  {
    return LSM6DSO_ERROR;
 8004ac8:	f04f 33ff 	mov.w	r3, #4294967295
 8004acc:	e02d      	b.n	8004b2a <LSM6DSO_GYRO_GetSensitivity+0x86>
  }

  /* Store the sensitivity based on actual full scale. */
  switch (full_scale)
 8004ace:	7afb      	ldrb	r3, [r7, #11]
 8004ad0:	2b06      	cmp	r3, #6
 8004ad2:	d825      	bhi.n	8004b20 <LSM6DSO_GYRO_GetSensitivity+0x7c>
 8004ad4:	a201      	add	r2, pc, #4	; (adr r2, 8004adc <LSM6DSO_GYRO_GetSensitivity+0x38>)
 8004ad6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ada:	bf00      	nop
 8004adc:	08004b01 	.word	0x08004b01
 8004ae0:	08004af9 	.word	0x08004af9
 8004ae4:	08004b09 	.word	0x08004b09
 8004ae8:	08004b21 	.word	0x08004b21
 8004aec:	08004b11 	.word	0x08004b11
 8004af0:	08004b21 	.word	0x08004b21
 8004af4:	08004b19 	.word	0x08004b19
  {
    case LSM6DSO_125dps:
      *Sensitivity = LSM6DSO_GYRO_SENSITIVITY_FS_125DPS;
 8004af8:	683b      	ldr	r3, [r7, #0]
 8004afa:	4a0e      	ldr	r2, [pc, #56]	; (8004b34 <LSM6DSO_GYRO_GetSensitivity+0x90>)
 8004afc:	601a      	str	r2, [r3, #0]
      break;
 8004afe:	e013      	b.n	8004b28 <LSM6DSO_GYRO_GetSensitivity+0x84>

    case LSM6DSO_250dps:
      *Sensitivity = LSM6DSO_GYRO_SENSITIVITY_FS_250DPS;
 8004b00:	683b      	ldr	r3, [r7, #0]
 8004b02:	4a0d      	ldr	r2, [pc, #52]	; (8004b38 <LSM6DSO_GYRO_GetSensitivity+0x94>)
 8004b04:	601a      	str	r2, [r3, #0]
      break;
 8004b06:	e00f      	b.n	8004b28 <LSM6DSO_GYRO_GetSensitivity+0x84>

    case LSM6DSO_500dps:
      *Sensitivity = LSM6DSO_GYRO_SENSITIVITY_FS_500DPS;
 8004b08:	683b      	ldr	r3, [r7, #0]
 8004b0a:	4a0c      	ldr	r2, [pc, #48]	; (8004b3c <LSM6DSO_GYRO_GetSensitivity+0x98>)
 8004b0c:	601a      	str	r2, [r3, #0]
      break;
 8004b0e:	e00b      	b.n	8004b28 <LSM6DSO_GYRO_GetSensitivity+0x84>

    case LSM6DSO_1000dps:
      *Sensitivity = LSM6DSO_GYRO_SENSITIVITY_FS_1000DPS;
 8004b10:	683b      	ldr	r3, [r7, #0]
 8004b12:	4a0b      	ldr	r2, [pc, #44]	; (8004b40 <LSM6DSO_GYRO_GetSensitivity+0x9c>)
 8004b14:	601a      	str	r2, [r3, #0]
      break;
 8004b16:	e007      	b.n	8004b28 <LSM6DSO_GYRO_GetSensitivity+0x84>

    case LSM6DSO_2000dps:
      *Sensitivity = LSM6DSO_GYRO_SENSITIVITY_FS_2000DPS;
 8004b18:	683b      	ldr	r3, [r7, #0]
 8004b1a:	4a0a      	ldr	r2, [pc, #40]	; (8004b44 <LSM6DSO_GYRO_GetSensitivity+0xa0>)
 8004b1c:	601a      	str	r2, [r3, #0]
      break;
 8004b1e:	e003      	b.n	8004b28 <LSM6DSO_GYRO_GetSensitivity+0x84>

    default:
      ret = LSM6DSO_ERROR;
 8004b20:	f04f 33ff 	mov.w	r3, #4294967295
 8004b24:	60fb      	str	r3, [r7, #12]
      break;
 8004b26:	bf00      	nop
  }

  return ret;
 8004b28:	68fb      	ldr	r3, [r7, #12]
}
 8004b2a:	4618      	mov	r0, r3
 8004b2c:	3710      	adds	r7, #16
 8004b2e:	46bd      	mov	sp, r7
 8004b30:	bd80      	pop	{r7, pc}
 8004b32:	bf00      	nop
 8004b34:	408c0000 	.word	0x408c0000
 8004b38:	410c0000 	.word	0x410c0000
 8004b3c:	418c0000 	.word	0x418c0000
 8004b40:	420c0000 	.word	0x420c0000
 8004b44:	428c0000 	.word	0x428c0000

08004b48 <LSM6DSO_GYRO_GetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr pointer where the output data rate is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_GYRO_GetOutputDataRate(LSM6DSO_Object_t *pObj, float_t *Odr)
{
 8004b48:	b580      	push	{r7, lr}
 8004b4a:	b084      	sub	sp, #16
 8004b4c:	af00      	add	r7, sp, #0
 8004b4e:	6078      	str	r0, [r7, #4]
 8004b50:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSO_OK;
 8004b52:	2300      	movs	r3, #0
 8004b54:	60fb      	str	r3, [r7, #12]
  lsm6dso_odr_g_t odr_low_level;

  /* Get current output data rate. */
  if (lsm6dso_gy_data_rate_get(&(pObj->Ctx), &odr_low_level) != LSM6DSO_OK)
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	3320      	adds	r3, #32
 8004b5a:	f107 020b 	add.w	r2, r7, #11
 8004b5e:	4611      	mov	r1, r2
 8004b60:	4618      	mov	r0, r3
 8004b62:	f000 ffe3 	bl	8005b2c <lsm6dso_gy_data_rate_get>
 8004b66:	4603      	mov	r3, r0
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	d002      	beq.n	8004b72 <LSM6DSO_GYRO_GetOutputDataRate+0x2a>
  {
    return LSM6DSO_ERROR;
 8004b6c:	f04f 33ff 	mov.w	r3, #4294967295
 8004b70:	e04e      	b.n	8004c10 <LSM6DSO_GYRO_GetOutputDataRate+0xc8>
  }

  switch (odr_low_level)
 8004b72:	7afb      	ldrb	r3, [r7, #11]
 8004b74:	2b0a      	cmp	r3, #10
 8004b76:	d846      	bhi.n	8004c06 <LSM6DSO_GYRO_GetOutputDataRate+0xbe>
 8004b78:	a201      	add	r2, pc, #4	; (adr r2, 8004b80 <LSM6DSO_GYRO_GetOutputDataRate+0x38>)
 8004b7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b7e:	bf00      	nop
 8004b80:	08004bad 	.word	0x08004bad
 8004b84:	08004bb7 	.word	0x08004bb7
 8004b88:	08004bbf 	.word	0x08004bbf
 8004b8c:	08004bc7 	.word	0x08004bc7
 8004b90:	08004bcf 	.word	0x08004bcf
 8004b94:	08004bd7 	.word	0x08004bd7
 8004b98:	08004bdf 	.word	0x08004bdf
 8004b9c:	08004be7 	.word	0x08004be7
 8004ba0:	08004bef 	.word	0x08004bef
 8004ba4:	08004bf7 	.word	0x08004bf7
 8004ba8:	08004bff 	.word	0x08004bff
  {
    case LSM6DSO_GY_ODR_OFF:
      *Odr = 0.0f;
 8004bac:	683b      	ldr	r3, [r7, #0]
 8004bae:	f04f 0200 	mov.w	r2, #0
 8004bb2:	601a      	str	r2, [r3, #0]
      break;
 8004bb4:	e02b      	b.n	8004c0e <LSM6DSO_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSO_GY_ODR_12Hz5:
      *Odr = 12.5f;
 8004bb6:	683b      	ldr	r3, [r7, #0]
 8004bb8:	4a17      	ldr	r2, [pc, #92]	; (8004c18 <LSM6DSO_GYRO_GetOutputDataRate+0xd0>)
 8004bba:	601a      	str	r2, [r3, #0]
      break;
 8004bbc:	e027      	b.n	8004c0e <LSM6DSO_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSO_GY_ODR_26Hz:
      *Odr = 26.0f;
 8004bbe:	683b      	ldr	r3, [r7, #0]
 8004bc0:	4a16      	ldr	r2, [pc, #88]	; (8004c1c <LSM6DSO_GYRO_GetOutputDataRate+0xd4>)
 8004bc2:	601a      	str	r2, [r3, #0]
      break;
 8004bc4:	e023      	b.n	8004c0e <LSM6DSO_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSO_GY_ODR_52Hz:
      *Odr = 52.0f;
 8004bc6:	683b      	ldr	r3, [r7, #0]
 8004bc8:	4a15      	ldr	r2, [pc, #84]	; (8004c20 <LSM6DSO_GYRO_GetOutputDataRate+0xd8>)
 8004bca:	601a      	str	r2, [r3, #0]
      break;
 8004bcc:	e01f      	b.n	8004c0e <LSM6DSO_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSO_GY_ODR_104Hz:
      *Odr = 104.0f;
 8004bce:	683b      	ldr	r3, [r7, #0]
 8004bd0:	4a14      	ldr	r2, [pc, #80]	; (8004c24 <LSM6DSO_GYRO_GetOutputDataRate+0xdc>)
 8004bd2:	601a      	str	r2, [r3, #0]
      break;
 8004bd4:	e01b      	b.n	8004c0e <LSM6DSO_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSO_GY_ODR_208Hz:
      *Odr = 208.0f;
 8004bd6:	683b      	ldr	r3, [r7, #0]
 8004bd8:	4a13      	ldr	r2, [pc, #76]	; (8004c28 <LSM6DSO_GYRO_GetOutputDataRate+0xe0>)
 8004bda:	601a      	str	r2, [r3, #0]
      break;
 8004bdc:	e017      	b.n	8004c0e <LSM6DSO_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSO_GY_ODR_417Hz:
      *Odr = 417.0f;
 8004bde:	683b      	ldr	r3, [r7, #0]
 8004be0:	4a12      	ldr	r2, [pc, #72]	; (8004c2c <LSM6DSO_GYRO_GetOutputDataRate+0xe4>)
 8004be2:	601a      	str	r2, [r3, #0]
      break;
 8004be4:	e013      	b.n	8004c0e <LSM6DSO_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSO_GY_ODR_833Hz:
      *Odr = 833.0f;
 8004be6:	683b      	ldr	r3, [r7, #0]
 8004be8:	4a11      	ldr	r2, [pc, #68]	; (8004c30 <LSM6DSO_GYRO_GetOutputDataRate+0xe8>)
 8004bea:	601a      	str	r2, [r3, #0]
      break;
 8004bec:	e00f      	b.n	8004c0e <LSM6DSO_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSO_GY_ODR_1667Hz:
      *Odr = 1667.0f;
 8004bee:	683b      	ldr	r3, [r7, #0]
 8004bf0:	4a10      	ldr	r2, [pc, #64]	; (8004c34 <LSM6DSO_GYRO_GetOutputDataRate+0xec>)
 8004bf2:	601a      	str	r2, [r3, #0]
      break;
 8004bf4:	e00b      	b.n	8004c0e <LSM6DSO_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSO_GY_ODR_3333Hz:
      *Odr = 3333.0f;
 8004bf6:	683b      	ldr	r3, [r7, #0]
 8004bf8:	4a0f      	ldr	r2, [pc, #60]	; (8004c38 <LSM6DSO_GYRO_GetOutputDataRate+0xf0>)
 8004bfa:	601a      	str	r2, [r3, #0]
      break;
 8004bfc:	e007      	b.n	8004c0e <LSM6DSO_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSO_GY_ODR_6667Hz:
      *Odr = 6667.0f;
 8004bfe:	683b      	ldr	r3, [r7, #0]
 8004c00:	4a0e      	ldr	r2, [pc, #56]	; (8004c3c <LSM6DSO_GYRO_GetOutputDataRate+0xf4>)
 8004c02:	601a      	str	r2, [r3, #0]
      break;
 8004c04:	e003      	b.n	8004c0e <LSM6DSO_GYRO_GetOutputDataRate+0xc6>

    default:
      ret = LSM6DSO_ERROR;
 8004c06:	f04f 33ff 	mov.w	r3, #4294967295
 8004c0a:	60fb      	str	r3, [r7, #12]
      break;
 8004c0c:	bf00      	nop
  }

  return ret;
 8004c0e:	68fb      	ldr	r3, [r7, #12]
}
 8004c10:	4618      	mov	r0, r3
 8004c12:	3710      	adds	r7, #16
 8004c14:	46bd      	mov	sp, r7
 8004c16:	bd80      	pop	{r7, pc}
 8004c18:	41480000 	.word	0x41480000
 8004c1c:	41d00000 	.word	0x41d00000
 8004c20:	42500000 	.word	0x42500000
 8004c24:	42d00000 	.word	0x42d00000
 8004c28:	43500000 	.word	0x43500000
 8004c2c:	43d08000 	.word	0x43d08000
 8004c30:	44504000 	.word	0x44504000
 8004c34:	44d06000 	.word	0x44d06000
 8004c38:	45505000 	.word	0x45505000
 8004c3c:	45d05800 	.word	0x45d05800

08004c40 <LSM6DSO_GYRO_SetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_GYRO_SetOutputDataRate(LSM6DSO_Object_t *pObj, float_t Odr)
{
 8004c40:	b580      	push	{r7, lr}
 8004c42:	b082      	sub	sp, #8
 8004c44:	af00      	add	r7, sp, #0
 8004c46:	6078      	str	r0, [r7, #4]
 8004c48:	ed87 0a00 	vstr	s0, [r7]
  return LSM6DSO_GYRO_SetOutputDataRate_With_Mode(pObj, Odr, LSM6DSO_GYRO_HIGH_PERFORMANCE_MODE);
 8004c4c:	2100      	movs	r1, #0
 8004c4e:	ed97 0a00 	vldr	s0, [r7]
 8004c52:	6878      	ldr	r0, [r7, #4]
 8004c54:	f000 f806 	bl	8004c64 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode>
 8004c58:	4603      	mov	r3, r0
}
 8004c5a:	4618      	mov	r0, r3
 8004c5c:	3708      	adds	r7, #8
 8004c5e:	46bd      	mov	sp, r7
 8004c60:	bd80      	pop	{r7, pc}
	...

08004c64 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode>:
  * @param  Mode the gyroscope operating mode
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_GYRO_SetOutputDataRate_With_Mode(LSM6DSO_Object_t *pObj, float_t Odr,
                                                 LSM6DSO_GYRO_Operating_Mode_t Mode)
{
 8004c64:	b580      	push	{r7, lr}
 8004c66:	b088      	sub	sp, #32
 8004c68:	af00      	add	r7, sp, #0
 8004c6a:	60f8      	str	r0, [r7, #12]
 8004c6c:	ed87 0a02 	vstr	s0, [r7, #8]
 8004c70:	460b      	mov	r3, r1
 8004c72:	71fb      	strb	r3, [r7, #7]
  int32_t ret = LSM6DSO_OK;
 8004c74:	2300      	movs	r3, #0
 8004c76:	61fb      	str	r3, [r7, #28]
  float_t newOdr = Odr;
 8004c78:	68bb      	ldr	r3, [r7, #8]
 8004c7a:	61bb      	str	r3, [r7, #24]

  switch (Mode)
 8004c7c:	79fb      	ldrb	r3, [r7, #7]
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d002      	beq.n	8004c88 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x24>
 8004c82:	2b01      	cmp	r3, #1
 8004c84:	d028      	beq.n	8004cd8 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x74>
 8004c86:	e05c      	b.n	8004d42 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0xde>
    case LSM6DSO_GYRO_HIGH_PERFORMANCE_MODE:
    {
      /* We must uncheck Low Power bit if it is enabled */
      lsm6dso_ctrl7_g_t val1;

      if (lsm6dso_read_reg(&(pObj->Ctx), LSM6DSO_CTRL7_G, (uint8_t *)&val1, 1) != LSM6DSO_OK)
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	f103 0020 	add.w	r0, r3, #32
 8004c8e:	f107 0214 	add.w	r2, r7, #20
 8004c92:	2301      	movs	r3, #1
 8004c94:	2116      	movs	r1, #22
 8004c96:	f000 fbf3 	bl	8005480 <lsm6dso_read_reg>
 8004c9a:	4603      	mov	r3, r0
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	d002      	beq.n	8004ca6 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x42>
      {
        return LSM6DSO_ERROR;
 8004ca0:	f04f 33ff 	mov.w	r3, #4294967295
 8004ca4:	e06c      	b.n	8004d80 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x11c>
      }

      if (val1.g_hm_mode != 0U)
 8004ca6:	7d3b      	ldrb	r3, [r7, #20]
 8004ca8:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8004cac:	b2db      	uxtb	r3, r3
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d04b      	beq.n	8004d4a <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0xe6>
      {
        val1.g_hm_mode = 0U;
 8004cb2:	7d3b      	ldrb	r3, [r7, #20]
 8004cb4:	f36f 13c7 	bfc	r3, #7, #1
 8004cb8:	753b      	strb	r3, [r7, #20]
        if (lsm6dso_write_reg(&(pObj->Ctx), LSM6DSO_CTRL7_G, (uint8_t *)&val1, 1) != LSM6DSO_OK)
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	f103 0020 	add.w	r0, r3, #32
 8004cc0:	f107 0214 	add.w	r2, r7, #20
 8004cc4:	2301      	movs	r3, #1
 8004cc6:	2116      	movs	r1, #22
 8004cc8:	f000 fbf2 	bl	80054b0 <lsm6dso_write_reg>
 8004ccc:	4603      	mov	r3, r0
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d03b      	beq.n	8004d4a <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0xe6>
        {
          return LSM6DSO_ERROR;
 8004cd2:	f04f 33ff 	mov.w	r3, #4294967295
 8004cd6:	e053      	b.n	8004d80 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x11c>
    case LSM6DSO_GYRO_LOW_POWER_NORMAL_MODE:
    {
      /* We must check the Low Power bit if it is unchecked */
      lsm6dso_ctrl7_g_t val1;

      if (lsm6dso_read_reg(&(pObj->Ctx), LSM6DSO_CTRL7_G, (uint8_t *)&val1, 1) != LSM6DSO_OK)
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	f103 0020 	add.w	r0, r3, #32
 8004cde:	f107 0210 	add.w	r2, r7, #16
 8004ce2:	2301      	movs	r3, #1
 8004ce4:	2116      	movs	r1, #22
 8004ce6:	f000 fbcb 	bl	8005480 <lsm6dso_read_reg>
 8004cea:	4603      	mov	r3, r0
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d002      	beq.n	8004cf6 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x92>
      {
        return LSM6DSO_ERROR;
 8004cf0:	f04f 33ff 	mov.w	r3, #4294967295
 8004cf4:	e044      	b.n	8004d80 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x11c>
      }

      if (val1.g_hm_mode == 0U)
 8004cf6:	7c3b      	ldrb	r3, [r7, #16]
 8004cf8:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8004cfc:	b2db      	uxtb	r3, r3
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d112      	bne.n	8004d28 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0xc4>
      {
        val1.g_hm_mode = 1U;
 8004d02:	7c3b      	ldrb	r3, [r7, #16]
 8004d04:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004d08:	743b      	strb	r3, [r7, #16]
        if (lsm6dso_write_reg(&(pObj->Ctx), LSM6DSO_CTRL7_G, (uint8_t *)&val1, 1) != LSM6DSO_OK)
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	f103 0020 	add.w	r0, r3, #32
 8004d10:	f107 0210 	add.w	r2, r7, #16
 8004d14:	2301      	movs	r3, #1
 8004d16:	2116      	movs	r1, #22
 8004d18:	f000 fbca 	bl	80054b0 <lsm6dso_write_reg>
 8004d1c:	4603      	mov	r3, r0
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d002      	beq.n	8004d28 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0xc4>
        {
          return LSM6DSO_ERROR;
 8004d22:	f04f 33ff 	mov.w	r3, #4294967295
 8004d26:	e02b      	b.n	8004d80 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x11c>
        }
      }

      /* Now we need to limit the ODR to 208 Hz if it is higher */
      if (newOdr > 208.0f)
 8004d28:	edd7 7a06 	vldr	s15, [r7, #24]
 8004d2c:	ed9f 7a16 	vldr	s14, [pc, #88]	; 8004d88 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x124>
 8004d30:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004d34:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004d38:	dc00      	bgt.n	8004d3c <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0xd8>
      {
        newOdr = 208.0f;
      }
      break;
 8004d3a:	e007      	b.n	8004d4c <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0xe8>
        newOdr = 208.0f;
 8004d3c:	4b13      	ldr	r3, [pc, #76]	; (8004d8c <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x128>)
 8004d3e:	61bb      	str	r3, [r7, #24]
 8004d40:	e004      	b.n	8004d4c <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0xe8>
    }
    default:
      ret = LSM6DSO_ERROR;
 8004d42:	f04f 33ff 	mov.w	r3, #4294967295
 8004d46:	61fb      	str	r3, [r7, #28]
      break;
 8004d48:	e000      	b.n	8004d4c <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0xe8>
      break;
 8004d4a:	bf00      	nop
  }

  if (ret == LSM6DSO_ERROR)
 8004d4c:	69fb      	ldr	r3, [r7, #28]
 8004d4e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d52:	d102      	bne.n	8004d5a <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0xf6>
  {
    return LSM6DSO_ERROR;
 8004d54:	f04f 33ff 	mov.w	r3, #4294967295
 8004d58:	e012      	b.n	8004d80 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x11c>
  }

  if (pObj->gyro_is_enabled == 1U)
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8004d60:	2b01      	cmp	r3, #1
 8004d62:	d106      	bne.n	8004d72 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x10e>
  {
    ret = LSM6DSO_GYRO_SetOutputDataRate_When_Enabled(pObj, newOdr);
 8004d64:	ed97 0a06 	vldr	s0, [r7, #24]
 8004d68:	68f8      	ldr	r0, [r7, #12]
 8004d6a:	f000 fa45 	bl	80051f8 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled>
 8004d6e:	61f8      	str	r0, [r7, #28]
 8004d70:	e005      	b.n	8004d7e <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x11a>
  }
  else
  {
    ret = LSM6DSO_GYRO_SetOutputDataRate_When_Disabled(pObj, newOdr);
 8004d72:	ed97 0a06 	vldr	s0, [r7, #24]
 8004d76:	68f8      	ldr	r0, [r7, #12]
 8004d78:	f000 faca 	bl	8005310 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled>
 8004d7c:	61f8      	str	r0, [r7, #28]
  }

  return ret;
 8004d7e:	69fb      	ldr	r3, [r7, #28]
}
 8004d80:	4618      	mov	r0, r3
 8004d82:	3720      	adds	r7, #32
 8004d84:	46bd      	mov	sp, r7
 8004d86:	bd80      	pop	{r7, pc}
 8004d88:	43500000 	.word	0x43500000
 8004d8c:	43500000 	.word	0x43500000

08004d90 <LSM6DSO_GYRO_GetFullScale>:
  * @param  pObj the device pObj
  * @param  FullScale pointer where the full scale is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_GYRO_GetFullScale(LSM6DSO_Object_t *pObj, int32_t  *FullScale)
{
 8004d90:	b580      	push	{r7, lr}
 8004d92:	b084      	sub	sp, #16
 8004d94:	af00      	add	r7, sp, #0
 8004d96:	6078      	str	r0, [r7, #4]
 8004d98:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSO_OK;
 8004d9a:	2300      	movs	r3, #0
 8004d9c:	60fb      	str	r3, [r7, #12]
  lsm6dso_fs_g_t fs_low_level;

  /* Read actual full scale selection from sensor. */
  if (lsm6dso_gy_full_scale_get(&(pObj->Ctx), &fs_low_level) != LSM6DSO_OK)
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	3320      	adds	r3, #32
 8004da2:	f107 020b 	add.w	r2, r7, #11
 8004da6:	4611      	mov	r1, r2
 8004da8:	4618      	mov	r0, r3
 8004daa:	f000 fd81 	bl	80058b0 <lsm6dso_gy_full_scale_get>
 8004dae:	4603      	mov	r3, r0
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	d002      	beq.n	8004dba <LSM6DSO_GYRO_GetFullScale+0x2a>
  {
    return LSM6DSO_ERROR;
 8004db4:	f04f 33ff 	mov.w	r3, #4294967295
 8004db8:	e030      	b.n	8004e1c <LSM6DSO_GYRO_GetFullScale+0x8c>
  }

  switch (fs_low_level)
 8004dba:	7afb      	ldrb	r3, [r7, #11]
 8004dbc:	2b06      	cmp	r3, #6
 8004dbe:	d828      	bhi.n	8004e12 <LSM6DSO_GYRO_GetFullScale+0x82>
 8004dc0:	a201      	add	r2, pc, #4	; (adr r2, 8004dc8 <LSM6DSO_GYRO_GetFullScale+0x38>)
 8004dc2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004dc6:	bf00      	nop
 8004dc8:	08004ded 	.word	0x08004ded
 8004dcc:	08004de5 	.word	0x08004de5
 8004dd0:	08004df5 	.word	0x08004df5
 8004dd4:	08004e13 	.word	0x08004e13
 8004dd8:	08004dff 	.word	0x08004dff
 8004ddc:	08004e13 	.word	0x08004e13
 8004de0:	08004e09 	.word	0x08004e09
  {
    case LSM6DSO_125dps:
      *FullScale =  125;
 8004de4:	683b      	ldr	r3, [r7, #0]
 8004de6:	227d      	movs	r2, #125	; 0x7d
 8004de8:	601a      	str	r2, [r3, #0]
      break;
 8004dea:	e016      	b.n	8004e1a <LSM6DSO_GYRO_GetFullScale+0x8a>

    case LSM6DSO_250dps:
      *FullScale =  250;
 8004dec:	683b      	ldr	r3, [r7, #0]
 8004dee:	22fa      	movs	r2, #250	; 0xfa
 8004df0:	601a      	str	r2, [r3, #0]
      break;
 8004df2:	e012      	b.n	8004e1a <LSM6DSO_GYRO_GetFullScale+0x8a>

    case LSM6DSO_500dps:
      *FullScale =  500;
 8004df4:	683b      	ldr	r3, [r7, #0]
 8004df6:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8004dfa:	601a      	str	r2, [r3, #0]
      break;
 8004dfc:	e00d      	b.n	8004e1a <LSM6DSO_GYRO_GetFullScale+0x8a>

    case LSM6DSO_1000dps:
      *FullScale = 1000;
 8004dfe:	683b      	ldr	r3, [r7, #0]
 8004e00:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004e04:	601a      	str	r2, [r3, #0]
      break;
 8004e06:	e008      	b.n	8004e1a <LSM6DSO_GYRO_GetFullScale+0x8a>

    case LSM6DSO_2000dps:
      *FullScale = 2000;
 8004e08:	683b      	ldr	r3, [r7, #0]
 8004e0a:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8004e0e:	601a      	str	r2, [r3, #0]
      break;
 8004e10:	e003      	b.n	8004e1a <LSM6DSO_GYRO_GetFullScale+0x8a>

    default:
      ret = LSM6DSO_ERROR;
 8004e12:	f04f 33ff 	mov.w	r3, #4294967295
 8004e16:	60fb      	str	r3, [r7, #12]
      break;
 8004e18:	bf00      	nop
  }

  return ret;
 8004e1a:	68fb      	ldr	r3, [r7, #12]
}
 8004e1c:	4618      	mov	r0, r3
 8004e1e:	3710      	adds	r7, #16
 8004e20:	46bd      	mov	sp, r7
 8004e22:	bd80      	pop	{r7, pc}

08004e24 <LSM6DSO_GYRO_SetFullScale>:
  * @param  pObj the device pObj
  * @param  FullScale the functional full scale to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_GYRO_SetFullScale(LSM6DSO_Object_t *pObj, int32_t FullScale)
{
 8004e24:	b580      	push	{r7, lr}
 8004e26:	b084      	sub	sp, #16
 8004e28:	af00      	add	r7, sp, #0
 8004e2a:	6078      	str	r0, [r7, #4]
 8004e2c:	6039      	str	r1, [r7, #0]
  lsm6dso_fs_g_t new_fs;

  new_fs = (FullScale <= 125)  ? LSM6DSO_125dps
           : (FullScale <= 250)  ? LSM6DSO_250dps
 8004e2e:	683b      	ldr	r3, [r7, #0]
 8004e30:	2b7d      	cmp	r3, #125	; 0x7d
 8004e32:	dd12      	ble.n	8004e5a <LSM6DSO_GYRO_SetFullScale+0x36>
 8004e34:	683b      	ldr	r3, [r7, #0]
 8004e36:	2bfa      	cmp	r3, #250	; 0xfa
 8004e38:	dd0d      	ble.n	8004e56 <LSM6DSO_GYRO_SetFullScale+0x32>
 8004e3a:	683b      	ldr	r3, [r7, #0]
 8004e3c:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8004e40:	dd07      	ble.n	8004e52 <LSM6DSO_GYRO_SetFullScale+0x2e>
 8004e42:	683b      	ldr	r3, [r7, #0]
 8004e44:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004e48:	dc01      	bgt.n	8004e4e <LSM6DSO_GYRO_SetFullScale+0x2a>
 8004e4a:	2304      	movs	r3, #4
 8004e4c:	e006      	b.n	8004e5c <LSM6DSO_GYRO_SetFullScale+0x38>
 8004e4e:	2306      	movs	r3, #6
 8004e50:	e004      	b.n	8004e5c <LSM6DSO_GYRO_SetFullScale+0x38>
 8004e52:	2302      	movs	r3, #2
 8004e54:	e002      	b.n	8004e5c <LSM6DSO_GYRO_SetFullScale+0x38>
 8004e56:	2300      	movs	r3, #0
 8004e58:	e000      	b.n	8004e5c <LSM6DSO_GYRO_SetFullScale+0x38>
 8004e5a:	2301      	movs	r3, #1
  new_fs = (FullScale <= 125)  ? LSM6DSO_125dps
 8004e5c:	73fb      	strb	r3, [r7, #15]
           : (FullScale <= 500)  ? LSM6DSO_500dps
           : (FullScale <= 1000) ? LSM6DSO_1000dps
           :                       LSM6DSO_2000dps;

  if (lsm6dso_gy_full_scale_set(&(pObj->Ctx), new_fs) != LSM6DSO_OK)
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	3320      	adds	r3, #32
 8004e62:	7bfa      	ldrb	r2, [r7, #15]
 8004e64:	4611      	mov	r1, r2
 8004e66:	4618      	mov	r0, r3
 8004e68:	f000 fcfc 	bl	8005864 <lsm6dso_gy_full_scale_set>
 8004e6c:	4603      	mov	r3, r0
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d002      	beq.n	8004e78 <LSM6DSO_GYRO_SetFullScale+0x54>
  {
    return LSM6DSO_ERROR;
 8004e72:	f04f 33ff 	mov.w	r3, #4294967295
 8004e76:	e000      	b.n	8004e7a <LSM6DSO_GYRO_SetFullScale+0x56>
  }

  return LSM6DSO_OK;
 8004e78:	2300      	movs	r3, #0
}
 8004e7a:	4618      	mov	r0, r3
 8004e7c:	3710      	adds	r7, #16
 8004e7e:	46bd      	mov	sp, r7
 8004e80:	bd80      	pop	{r7, pc}

08004e82 <LSM6DSO_GYRO_GetAxesRaw>:
  * @param  pObj the device pObj
  * @param  Value pointer where the raw values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_GYRO_GetAxesRaw(LSM6DSO_Object_t *pObj, LSM6DSO_AxesRaw_t *Value)
{
 8004e82:	b580      	push	{r7, lr}
 8004e84:	b084      	sub	sp, #16
 8004e86:	af00      	add	r7, sp, #0
 8004e88:	6078      	str	r0, [r7, #4]
 8004e8a:	6039      	str	r1, [r7, #0]
  lsm6dso_axis3bit16_t data_raw;

  /* Read raw data values. */
  if (lsm6dso_angular_rate_raw_get(&(pObj->Ctx), data_raw.i16bit) != LSM6DSO_OK)
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	3320      	adds	r3, #32
 8004e90:	f107 0208 	add.w	r2, r7, #8
 8004e94:	4611      	mov	r1, r2
 8004e96:	4618      	mov	r0, r3
 8004e98:	f000 fed0 	bl	8005c3c <lsm6dso_angular_rate_raw_get>
 8004e9c:	4603      	mov	r3, r0
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	d002      	beq.n	8004ea8 <LSM6DSO_GYRO_GetAxesRaw+0x26>
  {
    return LSM6DSO_ERROR;
 8004ea2:	f04f 33ff 	mov.w	r3, #4294967295
 8004ea6:	e00c      	b.n	8004ec2 <LSM6DSO_GYRO_GetAxesRaw+0x40>
  }

  /* Format the data. */
  Value->x = data_raw.i16bit[0];
 8004ea8:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8004eac:	683b      	ldr	r3, [r7, #0]
 8004eae:	801a      	strh	r2, [r3, #0]
  Value->y = data_raw.i16bit[1];
 8004eb0:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8004eb4:	683b      	ldr	r3, [r7, #0]
 8004eb6:	805a      	strh	r2, [r3, #2]
  Value->z = data_raw.i16bit[2];
 8004eb8:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8004ebc:	683b      	ldr	r3, [r7, #0]
 8004ebe:	809a      	strh	r2, [r3, #4]

  return LSM6DSO_OK;
 8004ec0:	2300      	movs	r3, #0
}
 8004ec2:	4618      	mov	r0, r3
 8004ec4:	3710      	adds	r7, #16
 8004ec6:	46bd      	mov	sp, r7
 8004ec8:	bd80      	pop	{r7, pc}

08004eca <LSM6DSO_GYRO_GetAxes>:
  * @param  pObj the device pObj
  * @param  AngularRate pointer where the values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_GYRO_GetAxes(LSM6DSO_Object_t *pObj, LSM6DSO_Axes_t *AngularRate)
{
 8004eca:	b580      	push	{r7, lr}
 8004ecc:	b086      	sub	sp, #24
 8004ece:	af00      	add	r7, sp, #0
 8004ed0:	6078      	str	r0, [r7, #4]
 8004ed2:	6039      	str	r1, [r7, #0]
  lsm6dso_axis3bit16_t data_raw;
  float_t sensitivity;

  /* Read raw data values. */
  if (lsm6dso_angular_rate_raw_get(&(pObj->Ctx), data_raw.i16bit) != LSM6DSO_OK)
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	3320      	adds	r3, #32
 8004ed8:	f107 0210 	add.w	r2, r7, #16
 8004edc:	4611      	mov	r1, r2
 8004ede:	4618      	mov	r0, r3
 8004ee0:	f000 feac 	bl	8005c3c <lsm6dso_angular_rate_raw_get>
 8004ee4:	4603      	mov	r3, r0
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	d002      	beq.n	8004ef0 <LSM6DSO_GYRO_GetAxes+0x26>
  {
    return LSM6DSO_ERROR;
 8004eea:	f04f 33ff 	mov.w	r3, #4294967295
 8004eee:	e03c      	b.n	8004f6a <LSM6DSO_GYRO_GetAxes+0xa0>
  }

  /* Get LSM6DSO actual sensitivity. */
  if (LSM6DSO_GYRO_GetSensitivity(pObj, &sensitivity) != LSM6DSO_OK)
 8004ef0:	f107 030c 	add.w	r3, r7, #12
 8004ef4:	4619      	mov	r1, r3
 8004ef6:	6878      	ldr	r0, [r7, #4]
 8004ef8:	f7ff fdd4 	bl	8004aa4 <LSM6DSO_GYRO_GetSensitivity>
 8004efc:	4603      	mov	r3, r0
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	d002      	beq.n	8004f08 <LSM6DSO_GYRO_GetAxes+0x3e>
  {
    return LSM6DSO_ERROR;
 8004f02:	f04f 33ff 	mov.w	r3, #4294967295
 8004f06:	e030      	b.n	8004f6a <LSM6DSO_GYRO_GetAxes+0xa0>
  }

  /* Calculate the data. */
  AngularRate->x = (int32_t)((float_t)((float_t)data_raw.i16bit[0] * sensitivity));
 8004f08:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8004f0c:	ee07 3a90 	vmov	s15, r3
 8004f10:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004f14:	edd7 7a03 	vldr	s15, [r7, #12]
 8004f18:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004f1c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004f20:	ee17 2a90 	vmov	r2, s15
 8004f24:	683b      	ldr	r3, [r7, #0]
 8004f26:	601a      	str	r2, [r3, #0]
  AngularRate->y = (int32_t)((float_t)((float_t)data_raw.i16bit[1] * sensitivity));
 8004f28:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8004f2c:	ee07 3a90 	vmov	s15, r3
 8004f30:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004f34:	edd7 7a03 	vldr	s15, [r7, #12]
 8004f38:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004f3c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004f40:	ee17 2a90 	vmov	r2, s15
 8004f44:	683b      	ldr	r3, [r7, #0]
 8004f46:	605a      	str	r2, [r3, #4]
  AngularRate->z = (int32_t)((float_t)((float_t)data_raw.i16bit[2] * sensitivity));
 8004f48:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8004f4c:	ee07 3a90 	vmov	s15, r3
 8004f50:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004f54:	edd7 7a03 	vldr	s15, [r7, #12]
 8004f58:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004f5c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004f60:	ee17 2a90 	vmov	r2, s15
 8004f64:	683b      	ldr	r3, [r7, #0]
 8004f66:	609a      	str	r2, [r3, #8]

  return LSM6DSO_OK;
 8004f68:	2300      	movs	r3, #0
}
 8004f6a:	4618      	mov	r0, r3
 8004f6c:	3718      	adds	r7, #24
 8004f6e:	46bd      	mov	sp, r7
 8004f70:	bd80      	pop	{r7, pc}

08004f72 <LSM6DSO_Write_Reg>:
  * @param  Reg address to be written
  * @param  Data value to be written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_Write_Reg(LSM6DSO_Object_t *pObj, uint8_t Reg, uint8_t Data)
{
 8004f72:	b580      	push	{r7, lr}
 8004f74:	b082      	sub	sp, #8
 8004f76:	af00      	add	r7, sp, #0
 8004f78:	6078      	str	r0, [r7, #4]
 8004f7a:	460b      	mov	r3, r1
 8004f7c:	70fb      	strb	r3, [r7, #3]
 8004f7e:	4613      	mov	r3, r2
 8004f80:	70bb      	strb	r3, [r7, #2]
  if (lsm6dso_write_reg(&(pObj->Ctx), Reg, &Data, 1) != LSM6DSO_OK)
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	f103 0020 	add.w	r0, r3, #32
 8004f88:	1cba      	adds	r2, r7, #2
 8004f8a:	78f9      	ldrb	r1, [r7, #3]
 8004f8c:	2301      	movs	r3, #1
 8004f8e:	f000 fa8f 	bl	80054b0 <lsm6dso_write_reg>
 8004f92:	4603      	mov	r3, r0
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	d002      	beq.n	8004f9e <LSM6DSO_Write_Reg+0x2c>
  {
    return LSM6DSO_ERROR;
 8004f98:	f04f 33ff 	mov.w	r3, #4294967295
 8004f9c:	e000      	b.n	8004fa0 <LSM6DSO_Write_Reg+0x2e>
  }

  return LSM6DSO_OK;
 8004f9e:	2300      	movs	r3, #0
}
 8004fa0:	4618      	mov	r0, r3
 8004fa2:	3708      	adds	r7, #8
 8004fa4:	46bd      	mov	sp, r7
 8004fa6:	bd80      	pop	{r7, pc}

08004fa8 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled>:
  * @param  pObj the device pObj
  * @param  Odr the functional output data rate to be set
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LSM6DSO_ACC_SetOutputDataRate_When_Enabled(LSM6DSO_Object_t *pObj, float_t Odr)
{
 8004fa8:	b580      	push	{r7, lr}
 8004faa:	b084      	sub	sp, #16
 8004fac:	af00      	add	r7, sp, #0
 8004fae:	6078      	str	r0, [r7, #4]
 8004fb0:	ed87 0a00 	vstr	s0, [r7]
  lsm6dso_odr_xl_t new_odr;

  new_odr = (Odr <=    1.6f) ? LSM6DSO_XL_ODR_1Hz6
            : (Odr <=   12.5f) ? LSM6DSO_XL_ODR_12Hz5
 8004fb4:	edd7 7a00 	vldr	s15, [r7]
 8004fb8:	ed9f 7a3f 	vldr	s14, [pc, #252]	; 80050b8 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x110>
 8004fbc:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004fc0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004fc4:	d801      	bhi.n	8004fca <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x22>
 8004fc6:	230b      	movs	r3, #11
 8004fc8:	e063      	b.n	8005092 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xea>
 8004fca:	edd7 7a00 	vldr	s15, [r7]
 8004fce:	eeb2 7a09 	vmov.f32	s14, #41	; 0x41480000  12.5
 8004fd2:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004fd6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004fda:	d801      	bhi.n	8004fe0 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x38>
 8004fdc:	2301      	movs	r3, #1
 8004fde:	e058      	b.n	8005092 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xea>
 8004fe0:	edd7 7a00 	vldr	s15, [r7]
 8004fe4:	eeb3 7a0a 	vmov.f32	s14, #58	; 0x41d00000  26.0
 8004fe8:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004fec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004ff0:	d801      	bhi.n	8004ff6 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x4e>
 8004ff2:	2302      	movs	r3, #2
 8004ff4:	e04d      	b.n	8005092 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xea>
 8004ff6:	edd7 7a00 	vldr	s15, [r7]
 8004ffa:	ed9f 7a30 	vldr	s14, [pc, #192]	; 80050bc <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x114>
 8004ffe:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005002:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005006:	d801      	bhi.n	800500c <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x64>
 8005008:	2303      	movs	r3, #3
 800500a:	e042      	b.n	8005092 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xea>
 800500c:	edd7 7a00 	vldr	s15, [r7]
 8005010:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 80050c0 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x118>
 8005014:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005018:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800501c:	d801      	bhi.n	8005022 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x7a>
 800501e:	2304      	movs	r3, #4
 8005020:	e037      	b.n	8005092 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xea>
 8005022:	edd7 7a00 	vldr	s15, [r7]
 8005026:	ed9f 7a27 	vldr	s14, [pc, #156]	; 80050c4 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x11c>
 800502a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800502e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005032:	d801      	bhi.n	8005038 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x90>
 8005034:	2305      	movs	r3, #5
 8005036:	e02c      	b.n	8005092 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xea>
 8005038:	edd7 7a00 	vldr	s15, [r7]
 800503c:	ed9f 7a22 	vldr	s14, [pc, #136]	; 80050c8 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x120>
 8005040:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005044:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005048:	d801      	bhi.n	800504e <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xa6>
 800504a:	2306      	movs	r3, #6
 800504c:	e021      	b.n	8005092 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xea>
 800504e:	edd7 7a00 	vldr	s15, [r7]
 8005052:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 80050cc <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x124>
 8005056:	eef4 7ac7 	vcmpe.f32	s15, s14
 800505a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800505e:	d801      	bhi.n	8005064 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xbc>
 8005060:	2307      	movs	r3, #7
 8005062:	e016      	b.n	8005092 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xea>
 8005064:	edd7 7a00 	vldr	s15, [r7]
 8005068:	ed9f 7a19 	vldr	s14, [pc, #100]	; 80050d0 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x128>
 800506c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005070:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005074:	d801      	bhi.n	800507a <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xd2>
 8005076:	2308      	movs	r3, #8
 8005078:	e00b      	b.n	8005092 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xea>
 800507a:	edd7 7a00 	vldr	s15, [r7]
 800507e:	ed9f 7a15 	vldr	s14, [pc, #84]	; 80050d4 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x12c>
 8005082:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005086:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800508a:	d801      	bhi.n	8005090 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xe8>
 800508c:	2309      	movs	r3, #9
 800508e:	e000      	b.n	8005092 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xea>
 8005090:	230a      	movs	r3, #10
  new_odr = (Odr <=    1.6f) ? LSM6DSO_XL_ODR_1Hz6
 8005092:	73fb      	strb	r3, [r7, #15]
            : (Odr <= 1667.0f) ? LSM6DSO_XL_ODR_1667Hz
            : (Odr <= 3333.0f) ? LSM6DSO_XL_ODR_3333Hz
            :                    LSM6DSO_XL_ODR_6667Hz;

  /* Output data rate selection. */
  if (lsm6dso_xl_data_rate_set(&(pObj->Ctx), new_odr) != LSM6DSO_OK)
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	3320      	adds	r3, #32
 8005098:	7bfa      	ldrb	r2, [r7, #15]
 800509a:	4611      	mov	r1, r2
 800509c:	4618      	mov	r0, r3
 800509e:	f000 fa7d 	bl	800559c <lsm6dso_xl_data_rate_set>
 80050a2:	4603      	mov	r3, r0
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	d002      	beq.n	80050ae <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x106>
  {
    return LSM6DSO_ERROR;
 80050a8:	f04f 33ff 	mov.w	r3, #4294967295
 80050ac:	e000      	b.n	80050b0 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x108>
  }

  return LSM6DSO_OK;
 80050ae:	2300      	movs	r3, #0
}
 80050b0:	4618      	mov	r0, r3
 80050b2:	3710      	adds	r7, #16
 80050b4:	46bd      	mov	sp, r7
 80050b6:	bd80      	pop	{r7, pc}
 80050b8:	3fcccccd 	.word	0x3fcccccd
 80050bc:	42500000 	.word	0x42500000
 80050c0:	42d00000 	.word	0x42d00000
 80050c4:	43500000 	.word	0x43500000
 80050c8:	43d08000 	.word	0x43d08000
 80050cc:	44504000 	.word	0x44504000
 80050d0:	44d06000 	.word	0x44d06000
 80050d4:	45505000 	.word	0x45505000

080050d8 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled>:
  * @param  pObj the device pObj
  * @param  Odr the functional output data rate to be set
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LSM6DSO_ACC_SetOutputDataRate_When_Disabled(LSM6DSO_Object_t *pObj, float_t Odr)
{
 80050d8:	b480      	push	{r7}
 80050da:	b083      	sub	sp, #12
 80050dc:	af00      	add	r7, sp, #0
 80050de:	6078      	str	r0, [r7, #4]
 80050e0:	ed87 0a00 	vstr	s0, [r7]
  pObj->acc_odr = (Odr <=    1.6f) ? LSM6DSO_XL_ODR_1Hz6
                  : (Odr <=   12.5f) ? LSM6DSO_XL_ODR_12Hz5
 80050e4:	edd7 7a00 	vldr	s15, [r7]
 80050e8:	ed9f 7a3b 	vldr	s14, [pc, #236]	; 80051d8 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x100>
 80050ec:	eef4 7ac7 	vcmpe.f32	s15, s14
 80050f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80050f4:	d801      	bhi.n	80050fa <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x22>
 80050f6:	230b      	movs	r3, #11
 80050f8:	e063      	b.n	80051c2 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xea>
 80050fa:	edd7 7a00 	vldr	s15, [r7]
 80050fe:	eeb2 7a09 	vmov.f32	s14, #41	; 0x41480000  12.5
 8005102:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005106:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800510a:	d801      	bhi.n	8005110 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x38>
 800510c:	2301      	movs	r3, #1
 800510e:	e058      	b.n	80051c2 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xea>
 8005110:	edd7 7a00 	vldr	s15, [r7]
 8005114:	eeb3 7a0a 	vmov.f32	s14, #58	; 0x41d00000  26.0
 8005118:	eef4 7ac7 	vcmpe.f32	s15, s14
 800511c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005120:	d801      	bhi.n	8005126 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x4e>
 8005122:	2302      	movs	r3, #2
 8005124:	e04d      	b.n	80051c2 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xea>
 8005126:	edd7 7a00 	vldr	s15, [r7]
 800512a:	ed9f 7a2c 	vldr	s14, [pc, #176]	; 80051dc <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x104>
 800512e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005132:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005136:	d801      	bhi.n	800513c <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x64>
 8005138:	2303      	movs	r3, #3
 800513a:	e042      	b.n	80051c2 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xea>
 800513c:	edd7 7a00 	vldr	s15, [r7]
 8005140:	ed9f 7a27 	vldr	s14, [pc, #156]	; 80051e0 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x108>
 8005144:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005148:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800514c:	d801      	bhi.n	8005152 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x7a>
 800514e:	2304      	movs	r3, #4
 8005150:	e037      	b.n	80051c2 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xea>
 8005152:	edd7 7a00 	vldr	s15, [r7]
 8005156:	ed9f 7a23 	vldr	s14, [pc, #140]	; 80051e4 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x10c>
 800515a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800515e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005162:	d801      	bhi.n	8005168 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x90>
 8005164:	2305      	movs	r3, #5
 8005166:	e02c      	b.n	80051c2 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xea>
 8005168:	edd7 7a00 	vldr	s15, [r7]
 800516c:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 80051e8 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x110>
 8005170:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005174:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005178:	d801      	bhi.n	800517e <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xa6>
 800517a:	2306      	movs	r3, #6
 800517c:	e021      	b.n	80051c2 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xea>
 800517e:	edd7 7a00 	vldr	s15, [r7]
 8005182:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 80051ec <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x114>
 8005186:	eef4 7ac7 	vcmpe.f32	s15, s14
 800518a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800518e:	d801      	bhi.n	8005194 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xbc>
 8005190:	2307      	movs	r3, #7
 8005192:	e016      	b.n	80051c2 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xea>
 8005194:	edd7 7a00 	vldr	s15, [r7]
 8005198:	ed9f 7a15 	vldr	s14, [pc, #84]	; 80051f0 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x118>
 800519c:	eef4 7ac7 	vcmpe.f32	s15, s14
 80051a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80051a4:	d801      	bhi.n	80051aa <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xd2>
 80051a6:	2308      	movs	r3, #8
 80051a8:	e00b      	b.n	80051c2 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xea>
 80051aa:	edd7 7a00 	vldr	s15, [r7]
 80051ae:	ed9f 7a11 	vldr	s14, [pc, #68]	; 80051f4 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x11c>
 80051b2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80051b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80051ba:	d801      	bhi.n	80051c0 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xe8>
 80051bc:	2309      	movs	r3, #9
 80051be:	e000      	b.n	80051c2 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xea>
 80051c0:	230a      	movs	r3, #10
  pObj->acc_odr = (Odr <=    1.6f) ? LSM6DSO_XL_ODR_1Hz6
 80051c2:	687a      	ldr	r2, [r7, #4]
 80051c4:	f882 3033 	strb.w	r3, [r2, #51]	; 0x33
                  : (Odr <=  833.0f) ? LSM6DSO_XL_ODR_833Hz
                  : (Odr <= 1667.0f) ? LSM6DSO_XL_ODR_1667Hz
                  : (Odr <= 3333.0f) ? LSM6DSO_XL_ODR_3333Hz
                  :                    LSM6DSO_XL_ODR_6667Hz;

  return LSM6DSO_OK;
 80051c8:	2300      	movs	r3, #0
}
 80051ca:	4618      	mov	r0, r3
 80051cc:	370c      	adds	r7, #12
 80051ce:	46bd      	mov	sp, r7
 80051d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051d4:	4770      	bx	lr
 80051d6:	bf00      	nop
 80051d8:	3fcccccd 	.word	0x3fcccccd
 80051dc:	42500000 	.word	0x42500000
 80051e0:	42d00000 	.word	0x42d00000
 80051e4:	43500000 	.word	0x43500000
 80051e8:	43d08000 	.word	0x43d08000
 80051ec:	44504000 	.word	0x44504000
 80051f0:	44d06000 	.word	0x44d06000
 80051f4:	45505000 	.word	0x45505000

080051f8 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled>:
  * @param  pObj the device pObj
  * @param  Odr the functional output data rate to be set
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LSM6DSO_GYRO_SetOutputDataRate_When_Enabled(LSM6DSO_Object_t *pObj, float_t Odr)
{
 80051f8:	b580      	push	{r7, lr}
 80051fa:	b084      	sub	sp, #16
 80051fc:	af00      	add	r7, sp, #0
 80051fe:	6078      	str	r0, [r7, #4]
 8005200:	ed87 0a00 	vstr	s0, [r7]
  lsm6dso_odr_g_t new_odr;

  new_odr = (Odr <=   12.5f) ? LSM6DSO_GY_ODR_12Hz5
            : (Odr <=   26.0f) ? LSM6DSO_GY_ODR_26Hz
 8005204:	edd7 7a00 	vldr	s15, [r7]
 8005208:	eeb2 7a09 	vmov.f32	s14, #41	; 0x41480000  12.5
 800520c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005210:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005214:	d801      	bhi.n	800521a <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x22>
 8005216:	2301      	movs	r3, #1
 8005218:	e058      	b.n	80052cc <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 800521a:	edd7 7a00 	vldr	s15, [r7]
 800521e:	eeb3 7a0a 	vmov.f32	s14, #58	; 0x41d00000  26.0
 8005222:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005226:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800522a:	d801      	bhi.n	8005230 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x38>
 800522c:	2302      	movs	r3, #2
 800522e:	e04d      	b.n	80052cc <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 8005230:	edd7 7a00 	vldr	s15, [r7]
 8005234:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 80052f4 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xfc>
 8005238:	eef4 7ac7 	vcmpe.f32	s15, s14
 800523c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005240:	d801      	bhi.n	8005246 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x4e>
 8005242:	2303      	movs	r3, #3
 8005244:	e042      	b.n	80052cc <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 8005246:	edd7 7a00 	vldr	s15, [r7]
 800524a:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 80052f8 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x100>
 800524e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005252:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005256:	d801      	bhi.n	800525c <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x64>
 8005258:	2304      	movs	r3, #4
 800525a:	e037      	b.n	80052cc <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 800525c:	edd7 7a00 	vldr	s15, [r7]
 8005260:	ed9f 7a26 	vldr	s14, [pc, #152]	; 80052fc <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x104>
 8005264:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005268:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800526c:	d801      	bhi.n	8005272 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x7a>
 800526e:	2305      	movs	r3, #5
 8005270:	e02c      	b.n	80052cc <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 8005272:	edd7 7a00 	vldr	s15, [r7]
 8005276:	ed9f 7a22 	vldr	s14, [pc, #136]	; 8005300 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x108>
 800527a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800527e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005282:	d801      	bhi.n	8005288 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x90>
 8005284:	2306      	movs	r3, #6
 8005286:	e021      	b.n	80052cc <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 8005288:	edd7 7a00 	vldr	s15, [r7]
 800528c:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 8005304 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x10c>
 8005290:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005294:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005298:	d801      	bhi.n	800529e <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xa6>
 800529a:	2307      	movs	r3, #7
 800529c:	e016      	b.n	80052cc <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 800529e:	edd7 7a00 	vldr	s15, [r7]
 80052a2:	ed9f 7a19 	vldr	s14, [pc, #100]	; 8005308 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x110>
 80052a6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80052aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80052ae:	d801      	bhi.n	80052b4 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xbc>
 80052b0:	2308      	movs	r3, #8
 80052b2:	e00b      	b.n	80052cc <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 80052b4:	edd7 7a00 	vldr	s15, [r7]
 80052b8:	ed9f 7a14 	vldr	s14, [pc, #80]	; 800530c <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x114>
 80052bc:	eef4 7ac7 	vcmpe.f32	s15, s14
 80052c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80052c4:	d801      	bhi.n	80052ca <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xd2>
 80052c6:	2309      	movs	r3, #9
 80052c8:	e000      	b.n	80052cc <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 80052ca:	230a      	movs	r3, #10
  new_odr = (Odr <=   12.5f) ? LSM6DSO_GY_ODR_12Hz5
 80052cc:	73fb      	strb	r3, [r7, #15]
            : (Odr <= 1667.0f) ? LSM6DSO_GY_ODR_1667Hz
            : (Odr <= 3333.0f) ? LSM6DSO_GY_ODR_3333Hz
            :                    LSM6DSO_GY_ODR_6667Hz;

  /* Output data rate selection. */
  if (lsm6dso_gy_data_rate_set(&(pObj->Ctx), new_odr) != LSM6DSO_OK)
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	3320      	adds	r3, #32
 80052d2:	7bfa      	ldrb	r2, [r7, #15]
 80052d4:	4611      	mov	r1, r2
 80052d6:	4618      	mov	r0, r3
 80052d8:	f000 fb2c 	bl	8005934 <lsm6dso_gy_data_rate_set>
 80052dc:	4603      	mov	r3, r0
 80052de:	2b00      	cmp	r3, #0
 80052e0:	d002      	beq.n	80052e8 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xf0>
  {
    return LSM6DSO_ERROR;
 80052e2:	f04f 33ff 	mov.w	r3, #4294967295
 80052e6:	e000      	b.n	80052ea <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xf2>
  }

  return LSM6DSO_OK;
 80052e8:	2300      	movs	r3, #0
}
 80052ea:	4618      	mov	r0, r3
 80052ec:	3710      	adds	r7, #16
 80052ee:	46bd      	mov	sp, r7
 80052f0:	bd80      	pop	{r7, pc}
 80052f2:	bf00      	nop
 80052f4:	42500000 	.word	0x42500000
 80052f8:	42d00000 	.word	0x42d00000
 80052fc:	43500000 	.word	0x43500000
 8005300:	43d08000 	.word	0x43d08000
 8005304:	44504000 	.word	0x44504000
 8005308:	44d06000 	.word	0x44d06000
 800530c:	45505000 	.word	0x45505000

08005310 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled>:
  * @param  pObj the device pObj
  * @param  Odr the functional output data rate to be set
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LSM6DSO_GYRO_SetOutputDataRate_When_Disabled(LSM6DSO_Object_t *pObj, float_t Odr)
{
 8005310:	b480      	push	{r7}
 8005312:	b083      	sub	sp, #12
 8005314:	af00      	add	r7, sp, #0
 8005316:	6078      	str	r0, [r7, #4]
 8005318:	ed87 0a00 	vstr	s0, [r7]
  pObj->gyro_odr = (Odr <=   12.5f) ? LSM6DSO_GY_ODR_12Hz5
                   : (Odr <=   26.0f) ? LSM6DSO_GY_ODR_26Hz
 800531c:	edd7 7a00 	vldr	s15, [r7]
 8005320:	eeb2 7a09 	vmov.f32	s14, #41	; 0x41480000  12.5
 8005324:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005328:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800532c:	d801      	bhi.n	8005332 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0x22>
 800532e:	2301      	movs	r3, #1
 8005330:	e058      	b.n	80053e4 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 8005332:	edd7 7a00 	vldr	s15, [r7]
 8005336:	eeb3 7a0a 	vmov.f32	s14, #58	; 0x41d00000  26.0
 800533a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800533e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005342:	d801      	bhi.n	8005348 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0x38>
 8005344:	2302      	movs	r3, #2
 8005346:	e04d      	b.n	80053e4 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 8005348:	edd7 7a00 	vldr	s15, [r7]
 800534c:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 80053f8 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xe8>
 8005350:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005354:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005358:	d801      	bhi.n	800535e <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0x4e>
 800535a:	2303      	movs	r3, #3
 800535c:	e042      	b.n	80053e4 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 800535e:	edd7 7a00 	vldr	s15, [r7]
 8005362:	ed9f 7a26 	vldr	s14, [pc, #152]	; 80053fc <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xec>
 8005366:	eef4 7ac7 	vcmpe.f32	s15, s14
 800536a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800536e:	d801      	bhi.n	8005374 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0x64>
 8005370:	2304      	movs	r3, #4
 8005372:	e037      	b.n	80053e4 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 8005374:	edd7 7a00 	vldr	s15, [r7]
 8005378:	ed9f 7a21 	vldr	s14, [pc, #132]	; 8005400 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xf0>
 800537c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005380:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005384:	d801      	bhi.n	800538a <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0x7a>
 8005386:	2305      	movs	r3, #5
 8005388:	e02c      	b.n	80053e4 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 800538a:	edd7 7a00 	vldr	s15, [r7]
 800538e:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 8005404 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xf4>
 8005392:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005396:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800539a:	d801      	bhi.n	80053a0 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0x90>
 800539c:	2306      	movs	r3, #6
 800539e:	e021      	b.n	80053e4 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 80053a0:	edd7 7a00 	vldr	s15, [r7]
 80053a4:	ed9f 7a18 	vldr	s14, [pc, #96]	; 8005408 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xf8>
 80053a8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80053ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80053b0:	d801      	bhi.n	80053b6 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xa6>
 80053b2:	2307      	movs	r3, #7
 80053b4:	e016      	b.n	80053e4 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 80053b6:	edd7 7a00 	vldr	s15, [r7]
 80053ba:	ed9f 7a14 	vldr	s14, [pc, #80]	; 800540c <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xfc>
 80053be:	eef4 7ac7 	vcmpe.f32	s15, s14
 80053c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80053c6:	d801      	bhi.n	80053cc <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xbc>
 80053c8:	2308      	movs	r3, #8
 80053ca:	e00b      	b.n	80053e4 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 80053cc:	edd7 7a00 	vldr	s15, [r7]
 80053d0:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 8005410 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0x100>
 80053d4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80053d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80053dc:	d801      	bhi.n	80053e2 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xd2>
 80053de:	2309      	movs	r3, #9
 80053e0:	e000      	b.n	80053e4 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 80053e2:	230a      	movs	r3, #10
  pObj->gyro_odr = (Odr <=   12.5f) ? LSM6DSO_GY_ODR_12Hz5
 80053e4:	687a      	ldr	r2, [r7, #4]
 80053e6:	f882 3034 	strb.w	r3, [r2, #52]	; 0x34
                   : (Odr <=  833.0f) ? LSM6DSO_GY_ODR_833Hz
                   : (Odr <= 1667.0f) ? LSM6DSO_GY_ODR_1667Hz
                   : (Odr <= 3333.0f) ? LSM6DSO_GY_ODR_3333Hz
                   :                    LSM6DSO_GY_ODR_6667Hz;

  return LSM6DSO_OK;
 80053ea:	2300      	movs	r3, #0
}
 80053ec:	4618      	mov	r0, r3
 80053ee:	370c      	adds	r7, #12
 80053f0:	46bd      	mov	sp, r7
 80053f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053f6:	4770      	bx	lr
 80053f8:	42500000 	.word	0x42500000
 80053fc:	42d00000 	.word	0x42d00000
 8005400:	43500000 	.word	0x43500000
 8005404:	43d08000 	.word	0x43d08000
 8005408:	44504000 	.word	0x44504000
 800540c:	44d06000 	.word	0x44d06000
 8005410:	45505000 	.word	0x45505000

08005414 <ReadRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t ReadRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8005414:	b590      	push	{r4, r7, lr}
 8005416:	b087      	sub	sp, #28
 8005418:	af00      	add	r7, sp, #0
 800541a:	60f8      	str	r0, [r7, #12]
 800541c:	607a      	str	r2, [r7, #4]
 800541e:	461a      	mov	r2, r3
 8005420:	460b      	mov	r3, r1
 8005422:	72fb      	strb	r3, [r7, #11]
 8005424:	4613      	mov	r3, r2
 8005426:	813b      	strh	r3, [r7, #8]
  LSM6DSO_Object_t *pObj = (LSM6DSO_Object_t *)Handle;
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	617b      	str	r3, [r7, #20]

  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 800542c:	697b      	ldr	r3, [r7, #20]
 800542e:	695c      	ldr	r4, [r3, #20]
 8005430:	697b      	ldr	r3, [r7, #20]
 8005432:	7b1b      	ldrb	r3, [r3, #12]
 8005434:	b298      	uxth	r0, r3
 8005436:	7afb      	ldrb	r3, [r7, #11]
 8005438:	b299      	uxth	r1, r3
 800543a:	893b      	ldrh	r3, [r7, #8]
 800543c:	687a      	ldr	r2, [r7, #4]
 800543e:	47a0      	blx	r4
 8005440:	4603      	mov	r3, r0
}
 8005442:	4618      	mov	r0, r3
 8005444:	371c      	adds	r7, #28
 8005446:	46bd      	mov	sp, r7
 8005448:	bd90      	pop	{r4, r7, pc}

0800544a <WriteRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t WriteRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 800544a:	b590      	push	{r4, r7, lr}
 800544c:	b087      	sub	sp, #28
 800544e:	af00      	add	r7, sp, #0
 8005450:	60f8      	str	r0, [r7, #12]
 8005452:	607a      	str	r2, [r7, #4]
 8005454:	461a      	mov	r2, r3
 8005456:	460b      	mov	r3, r1
 8005458:	72fb      	strb	r3, [r7, #11]
 800545a:	4613      	mov	r3, r2
 800545c:	813b      	strh	r3, [r7, #8]
  LSM6DSO_Object_t *pObj = (LSM6DSO_Object_t *)Handle;
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	617b      	str	r3, [r7, #20]

  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 8005462:	697b      	ldr	r3, [r7, #20]
 8005464:	691c      	ldr	r4, [r3, #16]
 8005466:	697b      	ldr	r3, [r7, #20]
 8005468:	7b1b      	ldrb	r3, [r3, #12]
 800546a:	b298      	uxth	r0, r3
 800546c:	7afb      	ldrb	r3, [r7, #11]
 800546e:	b299      	uxth	r1, r3
 8005470:	893b      	ldrh	r3, [r7, #8]
 8005472:	687a      	ldr	r2, [r7, #4]
 8005474:	47a0      	blx	r4
 8005476:	4603      	mov	r3, r0
}
 8005478:	4618      	mov	r0, r3
 800547a:	371c      	adds	r7, #28
 800547c:	46bd      	mov	sp, r7
 800547e:	bd90      	pop	{r4, r7, pc}

08005480 <lsm6dso_read_reg>:
  *
  */
int32_t __weak lsm6dso_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                                uint8_t *data,
                                uint16_t len)
{
 8005480:	b590      	push	{r4, r7, lr}
 8005482:	b087      	sub	sp, #28
 8005484:	af00      	add	r7, sp, #0
 8005486:	60f8      	str	r0, [r7, #12]
 8005488:	607a      	str	r2, [r7, #4]
 800548a:	461a      	mov	r2, r3
 800548c:	460b      	mov	r3, r1
 800548e:	72fb      	strb	r3, [r7, #11]
 8005490:	4613      	mov	r3, r2
 8005492:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	685c      	ldr	r4, [r3, #4]
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	68d8      	ldr	r0, [r3, #12]
 800549c:	893b      	ldrh	r3, [r7, #8]
 800549e:	7af9      	ldrb	r1, [r7, #11]
 80054a0:	687a      	ldr	r2, [r7, #4]
 80054a2:	47a0      	blx	r4
 80054a4:	6178      	str	r0, [r7, #20]

  return ret;
 80054a6:	697b      	ldr	r3, [r7, #20]
}
 80054a8:	4618      	mov	r0, r3
 80054aa:	371c      	adds	r7, #28
 80054ac:	46bd      	mov	sp, r7
 80054ae:	bd90      	pop	{r4, r7, pc}

080054b0 <lsm6dso_write_reg>:
  *
  */
int32_t __weak lsm6dso_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                                 uint8_t *data,
                                 uint16_t len)
{
 80054b0:	b590      	push	{r4, r7, lr}
 80054b2:	b087      	sub	sp, #28
 80054b4:	af00      	add	r7, sp, #0
 80054b6:	60f8      	str	r0, [r7, #12]
 80054b8:	607a      	str	r2, [r7, #4]
 80054ba:	461a      	mov	r2, r3
 80054bc:	460b      	mov	r3, r1
 80054be:	72fb      	strb	r3, [r7, #11]
 80054c0:	4613      	mov	r3, r2
 80054c2:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	681c      	ldr	r4, [r3, #0]
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	68d8      	ldr	r0, [r3, #12]
 80054cc:	893b      	ldrh	r3, [r7, #8]
 80054ce:	7af9      	ldrb	r1, [r7, #11]
 80054d0:	687a      	ldr	r2, [r7, #4]
 80054d2:	47a0      	blx	r4
 80054d4:	6178      	str	r0, [r7, #20]

  return ret;
 80054d6:	697b      	ldr	r3, [r7, #20]
}
 80054d8:	4618      	mov	r0, r3
 80054da:	371c      	adds	r7, #28
 80054dc:	46bd      	mov	sp, r7
 80054de:	bd90      	pop	{r4, r7, pc}

080054e0 <lsm6dso_xl_full_scale_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_xl_full_scale_set(stmdev_ctx_t *ctx,
                                  lsm6dso_fs_xl_t val)
{
 80054e0:	b580      	push	{r7, lr}
 80054e2:	b084      	sub	sp, #16
 80054e4:	af00      	add	r7, sp, #0
 80054e6:	6078      	str	r0, [r7, #4]
 80054e8:	460b      	mov	r3, r1
 80054ea:	70fb      	strb	r3, [r7, #3]
  lsm6dso_ctrl1_xl_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL1_XL, (uint8_t *)&reg, 1);
 80054ec:	f107 0208 	add.w	r2, r7, #8
 80054f0:	2301      	movs	r3, #1
 80054f2:	2110      	movs	r1, #16
 80054f4:	6878      	ldr	r0, [r7, #4]
 80054f6:	f7ff ffc3 	bl	8005480 <lsm6dso_read_reg>
 80054fa:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	2b00      	cmp	r3, #0
 8005500:	d10f      	bne.n	8005522 <lsm6dso_xl_full_scale_set+0x42>
  {
    reg.fs_xl = (uint8_t) val;
 8005502:	78fb      	ldrb	r3, [r7, #3]
 8005504:	f003 0303 	and.w	r3, r3, #3
 8005508:	b2da      	uxtb	r2, r3
 800550a:	7a3b      	ldrb	r3, [r7, #8]
 800550c:	f362 0383 	bfi	r3, r2, #2, #2
 8005510:	723b      	strb	r3, [r7, #8]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL1_XL, (uint8_t *)&reg, 1);
 8005512:	f107 0208 	add.w	r2, r7, #8
 8005516:	2301      	movs	r3, #1
 8005518:	2110      	movs	r1, #16
 800551a:	6878      	ldr	r0, [r7, #4]
 800551c:	f7ff ffc8 	bl	80054b0 <lsm6dso_write_reg>
 8005520:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8005522:	68fb      	ldr	r3, [r7, #12]
}
 8005524:	4618      	mov	r0, r3
 8005526:	3710      	adds	r7, #16
 8005528:	46bd      	mov	sp, r7
 800552a:	bd80      	pop	{r7, pc}

0800552c <lsm6dso_xl_full_scale_get>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_xl_full_scale_get(stmdev_ctx_t *ctx,
                                  lsm6dso_fs_xl_t *val)
{
 800552c:	b580      	push	{r7, lr}
 800552e:	b084      	sub	sp, #16
 8005530:	af00      	add	r7, sp, #0
 8005532:	6078      	str	r0, [r7, #4]
 8005534:	6039      	str	r1, [r7, #0]
  lsm6dso_ctrl1_xl_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL1_XL, (uint8_t *)&reg, 1);
 8005536:	f107 0208 	add.w	r2, r7, #8
 800553a:	2301      	movs	r3, #1
 800553c:	2110      	movs	r1, #16
 800553e:	6878      	ldr	r0, [r7, #4]
 8005540:	f7ff ff9e 	bl	8005480 <lsm6dso_read_reg>
 8005544:	60f8      	str	r0, [r7, #12]

  switch (reg.fs_xl)
 8005546:	7a3b      	ldrb	r3, [r7, #8]
 8005548:	f3c3 0381 	ubfx	r3, r3, #2, #2
 800554c:	b2db      	uxtb	r3, r3
 800554e:	2b03      	cmp	r3, #3
 8005550:	d81a      	bhi.n	8005588 <lsm6dso_xl_full_scale_get+0x5c>
 8005552:	a201      	add	r2, pc, #4	; (adr r2, 8005558 <lsm6dso_xl_full_scale_get+0x2c>)
 8005554:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005558:	08005569 	.word	0x08005569
 800555c:	08005571 	.word	0x08005571
 8005560:	08005579 	.word	0x08005579
 8005564:	08005581 	.word	0x08005581
  {
    case LSM6DSO_2g:
      *val = LSM6DSO_2g;
 8005568:	683b      	ldr	r3, [r7, #0]
 800556a:	2200      	movs	r2, #0
 800556c:	701a      	strb	r2, [r3, #0]
      break;
 800556e:	e00f      	b.n	8005590 <lsm6dso_xl_full_scale_get+0x64>

    case LSM6DSO_16g:
      *val = LSM6DSO_16g;
 8005570:	683b      	ldr	r3, [r7, #0]
 8005572:	2201      	movs	r2, #1
 8005574:	701a      	strb	r2, [r3, #0]
      break;
 8005576:	e00b      	b.n	8005590 <lsm6dso_xl_full_scale_get+0x64>

    case LSM6DSO_4g:
      *val = LSM6DSO_4g;
 8005578:	683b      	ldr	r3, [r7, #0]
 800557a:	2202      	movs	r2, #2
 800557c:	701a      	strb	r2, [r3, #0]
      break;
 800557e:	e007      	b.n	8005590 <lsm6dso_xl_full_scale_get+0x64>

    case LSM6DSO_8g:
      *val = LSM6DSO_8g;
 8005580:	683b      	ldr	r3, [r7, #0]
 8005582:	2203      	movs	r2, #3
 8005584:	701a      	strb	r2, [r3, #0]
      break;
 8005586:	e003      	b.n	8005590 <lsm6dso_xl_full_scale_get+0x64>

    default:
      *val = LSM6DSO_2g;
 8005588:	683b      	ldr	r3, [r7, #0]
 800558a:	2200      	movs	r2, #0
 800558c:	701a      	strb	r2, [r3, #0]
      break;
 800558e:	bf00      	nop
  }

  return ret;
 8005590:	68fb      	ldr	r3, [r7, #12]
}
 8005592:	4618      	mov	r0, r3
 8005594:	3710      	adds	r7, #16
 8005596:	46bd      	mov	sp, r7
 8005598:	bd80      	pop	{r7, pc}
 800559a:	bf00      	nop

0800559c <lsm6dso_xl_data_rate_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_xl_data_rate_set(stmdev_ctx_t *ctx,
                                 lsm6dso_odr_xl_t val)
{
 800559c:	b580      	push	{r7, lr}
 800559e:	b086      	sub	sp, #24
 80055a0:	af00      	add	r7, sp, #0
 80055a2:	6078      	str	r0, [r7, #4]
 80055a4:	460b      	mov	r3, r1
 80055a6:	70fb      	strb	r3, [r7, #3]
  lsm6dso_odr_xl_t odr_xl =  val;
 80055a8:	78fb      	ldrb	r3, [r7, #3]
 80055aa:	75fb      	strb	r3, [r7, #23]
  lsm6dso_fsm_odr_t fsm_odr;
  lsm6dso_ctrl1_xl_t reg;
  int32_t ret;

  /* Check the Finite State Machine data rate constraints */
  ret =  lsm6dso_fsm_enable_get(ctx, &fsm_enable);
 80055ac:	f107 030c 	add.w	r3, r7, #12
 80055b0:	4619      	mov	r1, r3
 80055b2:	6878      	ldr	r0, [r7, #4]
 80055b4:	f000 fca1 	bl	8005efa <lsm6dso_fsm_enable_get>
 80055b8:	6138      	str	r0, [r7, #16]

  if (ret == 0)
 80055ba:	693b      	ldr	r3, [r7, #16]
 80055bc:	2b00      	cmp	r3, #0
 80055be:	f040 80c4 	bne.w	800574a <lsm6dso_xl_data_rate_set+0x1ae>
  {
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
 80055c2:	7b3b      	ldrb	r3, [r7, #12]
 80055c4:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80055c8:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm2_en  |
 80055ca:	7b3b      	ldrb	r3, [r7, #12]
 80055cc:	f3c3 0340 	ubfx	r3, r3, #1, #1
 80055d0:	b2db      	uxtb	r3, r3
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
 80055d2:	4313      	orrs	r3, r2
 80055d4:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm3_en  |
 80055d6:	7b3b      	ldrb	r3, [r7, #12]
 80055d8:	f3c3 0380 	ubfx	r3, r3, #2, #1
 80055dc:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm2_en  |
 80055de:	4313      	orrs	r3, r2
 80055e0:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm4_en  |
 80055e2:	7b3b      	ldrb	r3, [r7, #12]
 80055e4:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80055e8:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm3_en  |
 80055ea:	4313      	orrs	r3, r2
 80055ec:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm5_en  |
 80055ee:	7b3b      	ldrb	r3, [r7, #12]
 80055f0:	f3c3 1300 	ubfx	r3, r3, #4, #1
 80055f4:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm4_en  |
 80055f6:	4313      	orrs	r3, r2
 80055f8:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm6_en  |
 80055fa:	7b3b      	ldrb	r3, [r7, #12]
 80055fc:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8005600:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm5_en  |
 8005602:	4313      	orrs	r3, r2
 8005604:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm7_en  |
 8005606:	7b3b      	ldrb	r3, [r7, #12]
 8005608:	f3c3 1380 	ubfx	r3, r3, #6, #1
 800560c:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm6_en  |
 800560e:	4313      	orrs	r3, r2
 8005610:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm8_en  |
 8005612:	7b3b      	ldrb	r3, [r7, #12]
 8005614:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8005618:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm7_en  |
 800561a:	4313      	orrs	r3, r2
 800561c:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm9_en  |
 800561e:	7b7b      	ldrb	r3, [r7, #13]
 8005620:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8005624:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm8_en  |
 8005626:	4313      	orrs	r3, r2
 8005628:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm10_en |
 800562a:	7b7b      	ldrb	r3, [r7, #13]
 800562c:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8005630:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm9_en  |
 8005632:	4313      	orrs	r3, r2
 8005634:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm11_en |
 8005636:	7b7b      	ldrb	r3, [r7, #13]
 8005638:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800563c:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm10_en |
 800563e:	4313      	orrs	r3, r2
 8005640:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm12_en |
 8005642:	7b7b      	ldrb	r3, [r7, #13]
 8005644:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8005648:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm11_en |
 800564a:	4313      	orrs	r3, r2
 800564c:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm13_en |
 800564e:	7b7b      	ldrb	r3, [r7, #13]
 8005650:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8005654:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm12_en |
 8005656:	4313      	orrs	r3, r2
 8005658:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm14_en |
 800565a:	7b7b      	ldrb	r3, [r7, #13]
 800565c:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8005660:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm13_en |
 8005662:	4313      	orrs	r3, r2
 8005664:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm15_en |
 8005666:	7b7b      	ldrb	r3, [r7, #13]
 8005668:	f3c3 1380 	ubfx	r3, r3, #6, #1
 800566c:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm14_en |
 800566e:	4313      	orrs	r3, r2
 8005670:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm16_en) == PROPERTY_ENABLE)
 8005672:	7b7b      	ldrb	r3, [r7, #13]
 8005674:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8005678:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm15_en |
 800567a:	4313      	orrs	r3, r2
 800567c:	b2db      	uxtb	r3, r3
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
 800567e:	2b01      	cmp	r3, #1
 8005680:	d163      	bne.n	800574a <lsm6dso_xl_data_rate_set+0x1ae>
    {
      ret =  lsm6dso_fsm_data_rate_get(ctx, &fsm_odr);
 8005682:	f107 030b 	add.w	r3, r7, #11
 8005686:	4619      	mov	r1, r3
 8005688:	6878      	ldr	r0, [r7, #4]
 800568a:	f000 fc57 	bl	8005f3c <lsm6dso_fsm_data_rate_get>
 800568e:	6138      	str	r0, [r7, #16]

      if (ret == 0)
 8005690:	693b      	ldr	r3, [r7, #16]
 8005692:	2b00      	cmp	r3, #0
 8005694:	d159      	bne.n	800574a <lsm6dso_xl_data_rate_set+0x1ae>
      {
        switch (fsm_odr)
 8005696:	7afb      	ldrb	r3, [r7, #11]
 8005698:	2b03      	cmp	r3, #3
 800569a:	d853      	bhi.n	8005744 <lsm6dso_xl_data_rate_set+0x1a8>
 800569c:	a201      	add	r2, pc, #4	; (adr r2, 80056a4 <lsm6dso_xl_data_rate_set+0x108>)
 800569e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80056a2:	bf00      	nop
 80056a4:	080056b5 	.word	0x080056b5
 80056a8:	080056c7 	.word	0x080056c7
 80056ac:	080056e5 	.word	0x080056e5
 80056b0:	0800570f 	.word	0x0800570f
        {
          case LSM6DSO_ODR_FSM_12Hz5:
            if (val == LSM6DSO_XL_ODR_OFF)
 80056b4:	78fb      	ldrb	r3, [r7, #3]
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	d102      	bne.n	80056c0 <lsm6dso_xl_data_rate_set+0x124>
            {
              odr_xl = LSM6DSO_XL_ODR_12Hz5;
 80056ba:	2301      	movs	r3, #1
 80056bc:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_xl = val;
            }

            break;
 80056be:	e045      	b.n	800574c <lsm6dso_xl_data_rate_set+0x1b0>
              odr_xl = val;
 80056c0:	78fb      	ldrb	r3, [r7, #3]
 80056c2:	75fb      	strb	r3, [r7, #23]
            break;
 80056c4:	e042      	b.n	800574c <lsm6dso_xl_data_rate_set+0x1b0>

          case LSM6DSO_ODR_FSM_26Hz:
            if (val == LSM6DSO_XL_ODR_OFF)
 80056c6:	78fb      	ldrb	r3, [r7, #3]
 80056c8:	2b00      	cmp	r3, #0
 80056ca:	d102      	bne.n	80056d2 <lsm6dso_xl_data_rate_set+0x136>
            {
              odr_xl = LSM6DSO_XL_ODR_26Hz;
 80056cc:	2302      	movs	r3, #2
 80056ce:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_xl = val;
            }

            break;
 80056d0:	e03c      	b.n	800574c <lsm6dso_xl_data_rate_set+0x1b0>
            else if (val == LSM6DSO_XL_ODR_12Hz5)
 80056d2:	78fb      	ldrb	r3, [r7, #3]
 80056d4:	2b01      	cmp	r3, #1
 80056d6:	d102      	bne.n	80056de <lsm6dso_xl_data_rate_set+0x142>
              odr_xl = LSM6DSO_XL_ODR_26Hz;
 80056d8:	2302      	movs	r3, #2
 80056da:	75fb      	strb	r3, [r7, #23]
            break;
 80056dc:	e036      	b.n	800574c <lsm6dso_xl_data_rate_set+0x1b0>
              odr_xl = val;
 80056de:	78fb      	ldrb	r3, [r7, #3]
 80056e0:	75fb      	strb	r3, [r7, #23]
            break;
 80056e2:	e033      	b.n	800574c <lsm6dso_xl_data_rate_set+0x1b0>

          case LSM6DSO_ODR_FSM_52Hz:
            if (val == LSM6DSO_XL_ODR_OFF)
 80056e4:	78fb      	ldrb	r3, [r7, #3]
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	d102      	bne.n	80056f0 <lsm6dso_xl_data_rate_set+0x154>
            {
              odr_xl = LSM6DSO_XL_ODR_52Hz;
 80056ea:	2303      	movs	r3, #3
 80056ec:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_xl = val;
            }

            break;
 80056ee:	e02d      	b.n	800574c <lsm6dso_xl_data_rate_set+0x1b0>
            else if (val == LSM6DSO_XL_ODR_12Hz5)
 80056f0:	78fb      	ldrb	r3, [r7, #3]
 80056f2:	2b01      	cmp	r3, #1
 80056f4:	d102      	bne.n	80056fc <lsm6dso_xl_data_rate_set+0x160>
              odr_xl = LSM6DSO_XL_ODR_52Hz;
 80056f6:	2303      	movs	r3, #3
 80056f8:	75fb      	strb	r3, [r7, #23]
            break;
 80056fa:	e027      	b.n	800574c <lsm6dso_xl_data_rate_set+0x1b0>
            else if (val == LSM6DSO_XL_ODR_26Hz)
 80056fc:	78fb      	ldrb	r3, [r7, #3]
 80056fe:	2b02      	cmp	r3, #2
 8005700:	d102      	bne.n	8005708 <lsm6dso_xl_data_rate_set+0x16c>
              odr_xl = LSM6DSO_XL_ODR_52Hz;
 8005702:	2303      	movs	r3, #3
 8005704:	75fb      	strb	r3, [r7, #23]
            break;
 8005706:	e021      	b.n	800574c <lsm6dso_xl_data_rate_set+0x1b0>
              odr_xl = val;
 8005708:	78fb      	ldrb	r3, [r7, #3]
 800570a:	75fb      	strb	r3, [r7, #23]
            break;
 800570c:	e01e      	b.n	800574c <lsm6dso_xl_data_rate_set+0x1b0>

          case LSM6DSO_ODR_FSM_104Hz:
            if (val == LSM6DSO_XL_ODR_OFF)
 800570e:	78fb      	ldrb	r3, [r7, #3]
 8005710:	2b00      	cmp	r3, #0
 8005712:	d102      	bne.n	800571a <lsm6dso_xl_data_rate_set+0x17e>
            {
              odr_xl = LSM6DSO_XL_ODR_104Hz;
 8005714:	2304      	movs	r3, #4
 8005716:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_xl = val;
            }

            break;
 8005718:	e018      	b.n	800574c <lsm6dso_xl_data_rate_set+0x1b0>
            else if (val == LSM6DSO_XL_ODR_12Hz5)
 800571a:	78fb      	ldrb	r3, [r7, #3]
 800571c:	2b01      	cmp	r3, #1
 800571e:	d102      	bne.n	8005726 <lsm6dso_xl_data_rate_set+0x18a>
              odr_xl = LSM6DSO_XL_ODR_104Hz;
 8005720:	2304      	movs	r3, #4
 8005722:	75fb      	strb	r3, [r7, #23]
            break;
 8005724:	e012      	b.n	800574c <lsm6dso_xl_data_rate_set+0x1b0>
            else if (val == LSM6DSO_XL_ODR_26Hz)
 8005726:	78fb      	ldrb	r3, [r7, #3]
 8005728:	2b02      	cmp	r3, #2
 800572a:	d102      	bne.n	8005732 <lsm6dso_xl_data_rate_set+0x196>
              odr_xl = LSM6DSO_XL_ODR_104Hz;
 800572c:	2304      	movs	r3, #4
 800572e:	75fb      	strb	r3, [r7, #23]
            break;
 8005730:	e00c      	b.n	800574c <lsm6dso_xl_data_rate_set+0x1b0>
            else if (val == LSM6DSO_XL_ODR_52Hz)
 8005732:	78fb      	ldrb	r3, [r7, #3]
 8005734:	2b03      	cmp	r3, #3
 8005736:	d102      	bne.n	800573e <lsm6dso_xl_data_rate_set+0x1a2>
              odr_xl = LSM6DSO_XL_ODR_104Hz;
 8005738:	2304      	movs	r3, #4
 800573a:	75fb      	strb	r3, [r7, #23]
            break;
 800573c:	e006      	b.n	800574c <lsm6dso_xl_data_rate_set+0x1b0>
              odr_xl = val;
 800573e:	78fb      	ldrb	r3, [r7, #3]
 8005740:	75fb      	strb	r3, [r7, #23]
            break;
 8005742:	e003      	b.n	800574c <lsm6dso_xl_data_rate_set+0x1b0>

          default:
            odr_xl = val;
 8005744:	78fb      	ldrb	r3, [r7, #3]
 8005746:	75fb      	strb	r3, [r7, #23]
            break;
 8005748:	e000      	b.n	800574c <lsm6dso_xl_data_rate_set+0x1b0>
        }
      }
 800574a:	bf00      	nop
    }
  }

  if (ret == 0)
 800574c:	693b      	ldr	r3, [r7, #16]
 800574e:	2b00      	cmp	r3, #0
 8005750:	d107      	bne.n	8005762 <lsm6dso_xl_data_rate_set+0x1c6>
  {
    ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL1_XL, (uint8_t *)&reg, 1);
 8005752:	f107 0208 	add.w	r2, r7, #8
 8005756:	2301      	movs	r3, #1
 8005758:	2110      	movs	r1, #16
 800575a:	6878      	ldr	r0, [r7, #4]
 800575c:	f7ff fe90 	bl	8005480 <lsm6dso_read_reg>
 8005760:	6138      	str	r0, [r7, #16]
  }

  if (ret == 0)
 8005762:	693b      	ldr	r3, [r7, #16]
 8005764:	2b00      	cmp	r3, #0
 8005766:	d10f      	bne.n	8005788 <lsm6dso_xl_data_rate_set+0x1ec>
  {
    reg.odr_xl = (uint8_t) odr_xl;
 8005768:	7dfb      	ldrb	r3, [r7, #23]
 800576a:	f003 030f 	and.w	r3, r3, #15
 800576e:	b2da      	uxtb	r2, r3
 8005770:	7a3b      	ldrb	r3, [r7, #8]
 8005772:	f362 1307 	bfi	r3, r2, #4, #4
 8005776:	723b      	strb	r3, [r7, #8]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL1_XL, (uint8_t *)&reg, 1);
 8005778:	f107 0208 	add.w	r2, r7, #8
 800577c:	2301      	movs	r3, #1
 800577e:	2110      	movs	r1, #16
 8005780:	6878      	ldr	r0, [r7, #4]
 8005782:	f7ff fe95 	bl	80054b0 <lsm6dso_write_reg>
 8005786:	6138      	str	r0, [r7, #16]
  }

  return ret;
 8005788:	693b      	ldr	r3, [r7, #16]
}
 800578a:	4618      	mov	r0, r3
 800578c:	3718      	adds	r7, #24
 800578e:	46bd      	mov	sp, r7
 8005790:	bd80      	pop	{r7, pc}
 8005792:	bf00      	nop

08005794 <lsm6dso_xl_data_rate_get>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_xl_data_rate_get(stmdev_ctx_t *ctx,
                                 lsm6dso_odr_xl_t *val)
{
 8005794:	b580      	push	{r7, lr}
 8005796:	b084      	sub	sp, #16
 8005798:	af00      	add	r7, sp, #0
 800579a:	6078      	str	r0, [r7, #4]
 800579c:	6039      	str	r1, [r7, #0]
  lsm6dso_ctrl1_xl_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL1_XL, (uint8_t *)&reg, 1);
 800579e:	f107 0208 	add.w	r2, r7, #8
 80057a2:	2301      	movs	r3, #1
 80057a4:	2110      	movs	r1, #16
 80057a6:	6878      	ldr	r0, [r7, #4]
 80057a8:	f7ff fe6a 	bl	8005480 <lsm6dso_read_reg>
 80057ac:	60f8      	str	r0, [r7, #12]

  switch (reg.odr_xl)
 80057ae:	7a3b      	ldrb	r3, [r7, #8]
 80057b0:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80057b4:	b2db      	uxtb	r3, r3
 80057b6:	2b0b      	cmp	r3, #11
 80057b8:	d84a      	bhi.n	8005850 <lsm6dso_xl_data_rate_get+0xbc>
 80057ba:	a201      	add	r2, pc, #4	; (adr r2, 80057c0 <lsm6dso_xl_data_rate_get+0x2c>)
 80057bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80057c0:	080057f1 	.word	0x080057f1
 80057c4:	080057f9 	.word	0x080057f9
 80057c8:	08005801 	.word	0x08005801
 80057cc:	08005809 	.word	0x08005809
 80057d0:	08005811 	.word	0x08005811
 80057d4:	08005819 	.word	0x08005819
 80057d8:	08005821 	.word	0x08005821
 80057dc:	08005829 	.word	0x08005829
 80057e0:	08005831 	.word	0x08005831
 80057e4:	08005839 	.word	0x08005839
 80057e8:	08005841 	.word	0x08005841
 80057ec:	08005849 	.word	0x08005849
  {
    case LSM6DSO_XL_ODR_OFF:
      *val = LSM6DSO_XL_ODR_OFF;
 80057f0:	683b      	ldr	r3, [r7, #0]
 80057f2:	2200      	movs	r2, #0
 80057f4:	701a      	strb	r2, [r3, #0]
      break;
 80057f6:	e02f      	b.n	8005858 <lsm6dso_xl_data_rate_get+0xc4>

    case LSM6DSO_XL_ODR_12Hz5:
      *val = LSM6DSO_XL_ODR_12Hz5;
 80057f8:	683b      	ldr	r3, [r7, #0]
 80057fa:	2201      	movs	r2, #1
 80057fc:	701a      	strb	r2, [r3, #0]
      break;
 80057fe:	e02b      	b.n	8005858 <lsm6dso_xl_data_rate_get+0xc4>

    case LSM6DSO_XL_ODR_26Hz:
      *val = LSM6DSO_XL_ODR_26Hz;
 8005800:	683b      	ldr	r3, [r7, #0]
 8005802:	2202      	movs	r2, #2
 8005804:	701a      	strb	r2, [r3, #0]
      break;
 8005806:	e027      	b.n	8005858 <lsm6dso_xl_data_rate_get+0xc4>

    case LSM6DSO_XL_ODR_52Hz:
      *val = LSM6DSO_XL_ODR_52Hz;
 8005808:	683b      	ldr	r3, [r7, #0]
 800580a:	2203      	movs	r2, #3
 800580c:	701a      	strb	r2, [r3, #0]
      break;
 800580e:	e023      	b.n	8005858 <lsm6dso_xl_data_rate_get+0xc4>

    case LSM6DSO_XL_ODR_104Hz:
      *val = LSM6DSO_XL_ODR_104Hz;
 8005810:	683b      	ldr	r3, [r7, #0]
 8005812:	2204      	movs	r2, #4
 8005814:	701a      	strb	r2, [r3, #0]
      break;
 8005816:	e01f      	b.n	8005858 <lsm6dso_xl_data_rate_get+0xc4>

    case LSM6DSO_XL_ODR_208Hz:
      *val = LSM6DSO_XL_ODR_208Hz;
 8005818:	683b      	ldr	r3, [r7, #0]
 800581a:	2205      	movs	r2, #5
 800581c:	701a      	strb	r2, [r3, #0]
      break;
 800581e:	e01b      	b.n	8005858 <lsm6dso_xl_data_rate_get+0xc4>

    case LSM6DSO_XL_ODR_417Hz:
      *val = LSM6DSO_XL_ODR_417Hz;
 8005820:	683b      	ldr	r3, [r7, #0]
 8005822:	2206      	movs	r2, #6
 8005824:	701a      	strb	r2, [r3, #0]
      break;
 8005826:	e017      	b.n	8005858 <lsm6dso_xl_data_rate_get+0xc4>

    case LSM6DSO_XL_ODR_833Hz:
      *val = LSM6DSO_XL_ODR_833Hz;
 8005828:	683b      	ldr	r3, [r7, #0]
 800582a:	2207      	movs	r2, #7
 800582c:	701a      	strb	r2, [r3, #0]
      break;
 800582e:	e013      	b.n	8005858 <lsm6dso_xl_data_rate_get+0xc4>

    case LSM6DSO_XL_ODR_1667Hz:
      *val = LSM6DSO_XL_ODR_1667Hz;
 8005830:	683b      	ldr	r3, [r7, #0]
 8005832:	2208      	movs	r2, #8
 8005834:	701a      	strb	r2, [r3, #0]
      break;
 8005836:	e00f      	b.n	8005858 <lsm6dso_xl_data_rate_get+0xc4>

    case LSM6DSO_XL_ODR_3333Hz:
      *val = LSM6DSO_XL_ODR_3333Hz;
 8005838:	683b      	ldr	r3, [r7, #0]
 800583a:	2209      	movs	r2, #9
 800583c:	701a      	strb	r2, [r3, #0]
      break;
 800583e:	e00b      	b.n	8005858 <lsm6dso_xl_data_rate_get+0xc4>

    case LSM6DSO_XL_ODR_6667Hz:
      *val = LSM6DSO_XL_ODR_6667Hz;
 8005840:	683b      	ldr	r3, [r7, #0]
 8005842:	220a      	movs	r2, #10
 8005844:	701a      	strb	r2, [r3, #0]
      break;
 8005846:	e007      	b.n	8005858 <lsm6dso_xl_data_rate_get+0xc4>

    case LSM6DSO_XL_ODR_1Hz6:
      *val = LSM6DSO_XL_ODR_1Hz6;
 8005848:	683b      	ldr	r3, [r7, #0]
 800584a:	220b      	movs	r2, #11
 800584c:	701a      	strb	r2, [r3, #0]
      break;
 800584e:	e003      	b.n	8005858 <lsm6dso_xl_data_rate_get+0xc4>

    default:
      *val = LSM6DSO_XL_ODR_OFF;
 8005850:	683b      	ldr	r3, [r7, #0]
 8005852:	2200      	movs	r2, #0
 8005854:	701a      	strb	r2, [r3, #0]
      break;
 8005856:	bf00      	nop
  }

  return ret;
 8005858:	68fb      	ldr	r3, [r7, #12]
}
 800585a:	4618      	mov	r0, r3
 800585c:	3710      	adds	r7, #16
 800585e:	46bd      	mov	sp, r7
 8005860:	bd80      	pop	{r7, pc}
 8005862:	bf00      	nop

08005864 <lsm6dso_gy_full_scale_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_gy_full_scale_set(stmdev_ctx_t *ctx,
                                  lsm6dso_fs_g_t val)
{
 8005864:	b580      	push	{r7, lr}
 8005866:	b084      	sub	sp, #16
 8005868:	af00      	add	r7, sp, #0
 800586a:	6078      	str	r0, [r7, #4]
 800586c:	460b      	mov	r3, r1
 800586e:	70fb      	strb	r3, [r7, #3]
  lsm6dso_ctrl2_g_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL2_G, (uint8_t *)&reg, 1);
 8005870:	f107 0208 	add.w	r2, r7, #8
 8005874:	2301      	movs	r3, #1
 8005876:	2111      	movs	r1, #17
 8005878:	6878      	ldr	r0, [r7, #4]
 800587a:	f7ff fe01 	bl	8005480 <lsm6dso_read_reg>
 800587e:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8005880:	68fb      	ldr	r3, [r7, #12]
 8005882:	2b00      	cmp	r3, #0
 8005884:	d10f      	bne.n	80058a6 <lsm6dso_gy_full_scale_set+0x42>
  {
    reg.fs_g = (uint8_t) val;
 8005886:	78fb      	ldrb	r3, [r7, #3]
 8005888:	f003 0307 	and.w	r3, r3, #7
 800588c:	b2da      	uxtb	r2, r3
 800588e:	7a3b      	ldrb	r3, [r7, #8]
 8005890:	f362 0343 	bfi	r3, r2, #1, #3
 8005894:	723b      	strb	r3, [r7, #8]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL2_G, (uint8_t *)&reg, 1);
 8005896:	f107 0208 	add.w	r2, r7, #8
 800589a:	2301      	movs	r3, #1
 800589c:	2111      	movs	r1, #17
 800589e:	6878      	ldr	r0, [r7, #4]
 80058a0:	f7ff fe06 	bl	80054b0 <lsm6dso_write_reg>
 80058a4:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80058a6:	68fb      	ldr	r3, [r7, #12]
}
 80058a8:	4618      	mov	r0, r3
 80058aa:	3710      	adds	r7, #16
 80058ac:	46bd      	mov	sp, r7
 80058ae:	bd80      	pop	{r7, pc}

080058b0 <lsm6dso_gy_full_scale_get>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_gy_full_scale_get(stmdev_ctx_t *ctx,
                                  lsm6dso_fs_g_t *val)
{
 80058b0:	b580      	push	{r7, lr}
 80058b2:	b084      	sub	sp, #16
 80058b4:	af00      	add	r7, sp, #0
 80058b6:	6078      	str	r0, [r7, #4]
 80058b8:	6039      	str	r1, [r7, #0]
  lsm6dso_ctrl2_g_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL2_G, (uint8_t *)&reg, 1);
 80058ba:	f107 0208 	add.w	r2, r7, #8
 80058be:	2301      	movs	r3, #1
 80058c0:	2111      	movs	r1, #17
 80058c2:	6878      	ldr	r0, [r7, #4]
 80058c4:	f7ff fddc 	bl	8005480 <lsm6dso_read_reg>
 80058c8:	60f8      	str	r0, [r7, #12]

  switch (reg.fs_g)
 80058ca:	7a3b      	ldrb	r3, [r7, #8]
 80058cc:	f3c3 0342 	ubfx	r3, r3, #1, #3
 80058d0:	b2db      	uxtb	r3, r3
 80058d2:	2b06      	cmp	r3, #6
 80058d4:	d824      	bhi.n	8005920 <lsm6dso_gy_full_scale_get+0x70>
 80058d6:	a201      	add	r2, pc, #4	; (adr r2, 80058dc <lsm6dso_gy_full_scale_get+0x2c>)
 80058d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80058dc:	080058f9 	.word	0x080058f9
 80058e0:	08005901 	.word	0x08005901
 80058e4:	08005909 	.word	0x08005909
 80058e8:	08005921 	.word	0x08005921
 80058ec:	08005911 	.word	0x08005911
 80058f0:	08005921 	.word	0x08005921
 80058f4:	08005919 	.word	0x08005919
  {
    case LSM6DSO_250dps:
      *val = LSM6DSO_250dps;
 80058f8:	683b      	ldr	r3, [r7, #0]
 80058fa:	2200      	movs	r2, #0
 80058fc:	701a      	strb	r2, [r3, #0]
      break;
 80058fe:	e013      	b.n	8005928 <lsm6dso_gy_full_scale_get+0x78>

    case LSM6DSO_125dps:
      *val = LSM6DSO_125dps;
 8005900:	683b      	ldr	r3, [r7, #0]
 8005902:	2201      	movs	r2, #1
 8005904:	701a      	strb	r2, [r3, #0]
      break;
 8005906:	e00f      	b.n	8005928 <lsm6dso_gy_full_scale_get+0x78>

    case LSM6DSO_500dps:
      *val = LSM6DSO_500dps;
 8005908:	683b      	ldr	r3, [r7, #0]
 800590a:	2202      	movs	r2, #2
 800590c:	701a      	strb	r2, [r3, #0]
      break;
 800590e:	e00b      	b.n	8005928 <lsm6dso_gy_full_scale_get+0x78>

    case LSM6DSO_1000dps:
      *val = LSM6DSO_1000dps;
 8005910:	683b      	ldr	r3, [r7, #0]
 8005912:	2204      	movs	r2, #4
 8005914:	701a      	strb	r2, [r3, #0]
      break;
 8005916:	e007      	b.n	8005928 <lsm6dso_gy_full_scale_get+0x78>

    case LSM6DSO_2000dps:
      *val = LSM6DSO_2000dps;
 8005918:	683b      	ldr	r3, [r7, #0]
 800591a:	2206      	movs	r2, #6
 800591c:	701a      	strb	r2, [r3, #0]
      break;
 800591e:	e003      	b.n	8005928 <lsm6dso_gy_full_scale_get+0x78>

    default:
      *val = LSM6DSO_250dps;
 8005920:	683b      	ldr	r3, [r7, #0]
 8005922:	2200      	movs	r2, #0
 8005924:	701a      	strb	r2, [r3, #0]
      break;
 8005926:	bf00      	nop
  }

  return ret;
 8005928:	68fb      	ldr	r3, [r7, #12]
}
 800592a:	4618      	mov	r0, r3
 800592c:	3710      	adds	r7, #16
 800592e:	46bd      	mov	sp, r7
 8005930:	bd80      	pop	{r7, pc}
 8005932:	bf00      	nop

08005934 <lsm6dso_gy_data_rate_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_gy_data_rate_set(stmdev_ctx_t *ctx,
                                 lsm6dso_odr_g_t val)
{
 8005934:	b580      	push	{r7, lr}
 8005936:	b086      	sub	sp, #24
 8005938:	af00      	add	r7, sp, #0
 800593a:	6078      	str	r0, [r7, #4]
 800593c:	460b      	mov	r3, r1
 800593e:	70fb      	strb	r3, [r7, #3]
  lsm6dso_odr_g_t odr_gy =  val;
 8005940:	78fb      	ldrb	r3, [r7, #3]
 8005942:	75fb      	strb	r3, [r7, #23]
  lsm6dso_fsm_odr_t fsm_odr;
  lsm6dso_ctrl2_g_t reg;
  int32_t ret;

  /* Check the Finite State Machine data rate constraints */
  ret =  lsm6dso_fsm_enable_get(ctx, &fsm_enable);
 8005944:	f107 030c 	add.w	r3, r7, #12
 8005948:	4619      	mov	r1, r3
 800594a:	6878      	ldr	r0, [r7, #4]
 800594c:	f000 fad5 	bl	8005efa <lsm6dso_fsm_enable_get>
 8005950:	6138      	str	r0, [r7, #16]

  if (ret == 0)
 8005952:	693b      	ldr	r3, [r7, #16]
 8005954:	2b00      	cmp	r3, #0
 8005956:	f040 80c4 	bne.w	8005ae2 <lsm6dso_gy_data_rate_set+0x1ae>
  {
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
 800595a:	7b3b      	ldrb	r3, [r7, #12]
 800595c:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8005960:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm2_en  |
 8005962:	7b3b      	ldrb	r3, [r7, #12]
 8005964:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8005968:	b2db      	uxtb	r3, r3
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
 800596a:	4313      	orrs	r3, r2
 800596c:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm3_en  |
 800596e:	7b3b      	ldrb	r3, [r7, #12]
 8005970:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8005974:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm2_en  |
 8005976:	4313      	orrs	r3, r2
 8005978:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm4_en  |
 800597a:	7b3b      	ldrb	r3, [r7, #12]
 800597c:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8005980:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm3_en  |
 8005982:	4313      	orrs	r3, r2
 8005984:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm5_en  |
 8005986:	7b3b      	ldrb	r3, [r7, #12]
 8005988:	f3c3 1300 	ubfx	r3, r3, #4, #1
 800598c:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm4_en  |
 800598e:	4313      	orrs	r3, r2
 8005990:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm6_en  |
 8005992:	7b3b      	ldrb	r3, [r7, #12]
 8005994:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8005998:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm5_en  |
 800599a:	4313      	orrs	r3, r2
 800599c:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm7_en  |
 800599e:	7b3b      	ldrb	r3, [r7, #12]
 80059a0:	f3c3 1380 	ubfx	r3, r3, #6, #1
 80059a4:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm6_en  |
 80059a6:	4313      	orrs	r3, r2
 80059a8:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm8_en  |
 80059aa:	7b3b      	ldrb	r3, [r7, #12]
 80059ac:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 80059b0:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm7_en  |
 80059b2:	4313      	orrs	r3, r2
 80059b4:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm9_en  |
 80059b6:	7b7b      	ldrb	r3, [r7, #13]
 80059b8:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80059bc:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm8_en  |
 80059be:	4313      	orrs	r3, r2
 80059c0:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm10_en |
 80059c2:	7b7b      	ldrb	r3, [r7, #13]
 80059c4:	f3c3 0340 	ubfx	r3, r3, #1, #1
 80059c8:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm9_en  |
 80059ca:	4313      	orrs	r3, r2
 80059cc:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm11_en |
 80059ce:	7b7b      	ldrb	r3, [r7, #13]
 80059d0:	f3c3 0380 	ubfx	r3, r3, #2, #1
 80059d4:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm10_en |
 80059d6:	4313      	orrs	r3, r2
 80059d8:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm12_en |
 80059da:	7b7b      	ldrb	r3, [r7, #13]
 80059dc:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80059e0:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm11_en |
 80059e2:	4313      	orrs	r3, r2
 80059e4:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm13_en |
 80059e6:	7b7b      	ldrb	r3, [r7, #13]
 80059e8:	f3c3 1300 	ubfx	r3, r3, #4, #1
 80059ec:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm12_en |
 80059ee:	4313      	orrs	r3, r2
 80059f0:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm14_en |
 80059f2:	7b7b      	ldrb	r3, [r7, #13]
 80059f4:	f3c3 1340 	ubfx	r3, r3, #5, #1
 80059f8:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm13_en |
 80059fa:	4313      	orrs	r3, r2
 80059fc:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm15_en |
 80059fe:	7b7b      	ldrb	r3, [r7, #13]
 8005a00:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8005a04:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm14_en |
 8005a06:	4313      	orrs	r3, r2
 8005a08:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm16_en) == PROPERTY_ENABLE)
 8005a0a:	7b7b      	ldrb	r3, [r7, #13]
 8005a0c:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8005a10:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm15_en |
 8005a12:	4313      	orrs	r3, r2
 8005a14:	b2db      	uxtb	r3, r3
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
 8005a16:	2b01      	cmp	r3, #1
 8005a18:	d163      	bne.n	8005ae2 <lsm6dso_gy_data_rate_set+0x1ae>
    {
      ret =  lsm6dso_fsm_data_rate_get(ctx, &fsm_odr);
 8005a1a:	f107 030b 	add.w	r3, r7, #11
 8005a1e:	4619      	mov	r1, r3
 8005a20:	6878      	ldr	r0, [r7, #4]
 8005a22:	f000 fa8b 	bl	8005f3c <lsm6dso_fsm_data_rate_get>
 8005a26:	6138      	str	r0, [r7, #16]

      if (ret == 0)
 8005a28:	693b      	ldr	r3, [r7, #16]
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	d159      	bne.n	8005ae2 <lsm6dso_gy_data_rate_set+0x1ae>
      {
        switch (fsm_odr)
 8005a2e:	7afb      	ldrb	r3, [r7, #11]
 8005a30:	2b03      	cmp	r3, #3
 8005a32:	d853      	bhi.n	8005adc <lsm6dso_gy_data_rate_set+0x1a8>
 8005a34:	a201      	add	r2, pc, #4	; (adr r2, 8005a3c <lsm6dso_gy_data_rate_set+0x108>)
 8005a36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a3a:	bf00      	nop
 8005a3c:	08005a4d 	.word	0x08005a4d
 8005a40:	08005a5f 	.word	0x08005a5f
 8005a44:	08005a7d 	.word	0x08005a7d
 8005a48:	08005aa7 	.word	0x08005aa7
        {
          case LSM6DSO_ODR_FSM_12Hz5:
            if (val == LSM6DSO_GY_ODR_OFF)
 8005a4c:	78fb      	ldrb	r3, [r7, #3]
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	d102      	bne.n	8005a58 <lsm6dso_gy_data_rate_set+0x124>
            {
              odr_gy = LSM6DSO_GY_ODR_12Hz5;
 8005a52:	2301      	movs	r3, #1
 8005a54:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_gy = val;
            }

            break;
 8005a56:	e045      	b.n	8005ae4 <lsm6dso_gy_data_rate_set+0x1b0>
              odr_gy = val;
 8005a58:	78fb      	ldrb	r3, [r7, #3]
 8005a5a:	75fb      	strb	r3, [r7, #23]
            break;
 8005a5c:	e042      	b.n	8005ae4 <lsm6dso_gy_data_rate_set+0x1b0>

          case LSM6DSO_ODR_FSM_26Hz:
            if (val == LSM6DSO_GY_ODR_OFF)
 8005a5e:	78fb      	ldrb	r3, [r7, #3]
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	d102      	bne.n	8005a6a <lsm6dso_gy_data_rate_set+0x136>
            {
              odr_gy = LSM6DSO_GY_ODR_26Hz;
 8005a64:	2302      	movs	r3, #2
 8005a66:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_gy = val;
            }

            break;
 8005a68:	e03c      	b.n	8005ae4 <lsm6dso_gy_data_rate_set+0x1b0>
            else if (val == LSM6DSO_GY_ODR_12Hz5)
 8005a6a:	78fb      	ldrb	r3, [r7, #3]
 8005a6c:	2b01      	cmp	r3, #1
 8005a6e:	d102      	bne.n	8005a76 <lsm6dso_gy_data_rate_set+0x142>
              odr_gy = LSM6DSO_GY_ODR_26Hz;
 8005a70:	2302      	movs	r3, #2
 8005a72:	75fb      	strb	r3, [r7, #23]
            break;
 8005a74:	e036      	b.n	8005ae4 <lsm6dso_gy_data_rate_set+0x1b0>
              odr_gy = val;
 8005a76:	78fb      	ldrb	r3, [r7, #3]
 8005a78:	75fb      	strb	r3, [r7, #23]
            break;
 8005a7a:	e033      	b.n	8005ae4 <lsm6dso_gy_data_rate_set+0x1b0>

          case LSM6DSO_ODR_FSM_52Hz:
            if (val == LSM6DSO_GY_ODR_OFF)
 8005a7c:	78fb      	ldrb	r3, [r7, #3]
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	d102      	bne.n	8005a88 <lsm6dso_gy_data_rate_set+0x154>
            {
              odr_gy = LSM6DSO_GY_ODR_52Hz;
 8005a82:	2303      	movs	r3, #3
 8005a84:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_gy = val;
            }

            break;
 8005a86:	e02d      	b.n	8005ae4 <lsm6dso_gy_data_rate_set+0x1b0>
            else if (val == LSM6DSO_GY_ODR_12Hz5)
 8005a88:	78fb      	ldrb	r3, [r7, #3]
 8005a8a:	2b01      	cmp	r3, #1
 8005a8c:	d102      	bne.n	8005a94 <lsm6dso_gy_data_rate_set+0x160>
              odr_gy = LSM6DSO_GY_ODR_52Hz;
 8005a8e:	2303      	movs	r3, #3
 8005a90:	75fb      	strb	r3, [r7, #23]
            break;
 8005a92:	e027      	b.n	8005ae4 <lsm6dso_gy_data_rate_set+0x1b0>
            else if (val == LSM6DSO_GY_ODR_26Hz)
 8005a94:	78fb      	ldrb	r3, [r7, #3]
 8005a96:	2b02      	cmp	r3, #2
 8005a98:	d102      	bne.n	8005aa0 <lsm6dso_gy_data_rate_set+0x16c>
              odr_gy = LSM6DSO_GY_ODR_52Hz;
 8005a9a:	2303      	movs	r3, #3
 8005a9c:	75fb      	strb	r3, [r7, #23]
            break;
 8005a9e:	e021      	b.n	8005ae4 <lsm6dso_gy_data_rate_set+0x1b0>
              odr_gy = val;
 8005aa0:	78fb      	ldrb	r3, [r7, #3]
 8005aa2:	75fb      	strb	r3, [r7, #23]
            break;
 8005aa4:	e01e      	b.n	8005ae4 <lsm6dso_gy_data_rate_set+0x1b0>

          case LSM6DSO_ODR_FSM_104Hz:
            if (val == LSM6DSO_GY_ODR_OFF)
 8005aa6:	78fb      	ldrb	r3, [r7, #3]
 8005aa8:	2b00      	cmp	r3, #0
 8005aaa:	d102      	bne.n	8005ab2 <lsm6dso_gy_data_rate_set+0x17e>
            {
              odr_gy = LSM6DSO_GY_ODR_104Hz;
 8005aac:	2304      	movs	r3, #4
 8005aae:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_gy = val;
            }

            break;
 8005ab0:	e018      	b.n	8005ae4 <lsm6dso_gy_data_rate_set+0x1b0>
            else if (val == LSM6DSO_GY_ODR_12Hz5)
 8005ab2:	78fb      	ldrb	r3, [r7, #3]
 8005ab4:	2b01      	cmp	r3, #1
 8005ab6:	d102      	bne.n	8005abe <lsm6dso_gy_data_rate_set+0x18a>
              odr_gy = LSM6DSO_GY_ODR_104Hz;
 8005ab8:	2304      	movs	r3, #4
 8005aba:	75fb      	strb	r3, [r7, #23]
            break;
 8005abc:	e012      	b.n	8005ae4 <lsm6dso_gy_data_rate_set+0x1b0>
            else if (val == LSM6DSO_GY_ODR_26Hz)
 8005abe:	78fb      	ldrb	r3, [r7, #3]
 8005ac0:	2b02      	cmp	r3, #2
 8005ac2:	d102      	bne.n	8005aca <lsm6dso_gy_data_rate_set+0x196>
              odr_gy = LSM6DSO_GY_ODR_104Hz;
 8005ac4:	2304      	movs	r3, #4
 8005ac6:	75fb      	strb	r3, [r7, #23]
            break;
 8005ac8:	e00c      	b.n	8005ae4 <lsm6dso_gy_data_rate_set+0x1b0>
            else if (val == LSM6DSO_GY_ODR_52Hz)
 8005aca:	78fb      	ldrb	r3, [r7, #3]
 8005acc:	2b03      	cmp	r3, #3
 8005ace:	d102      	bne.n	8005ad6 <lsm6dso_gy_data_rate_set+0x1a2>
              odr_gy = LSM6DSO_GY_ODR_104Hz;
 8005ad0:	2304      	movs	r3, #4
 8005ad2:	75fb      	strb	r3, [r7, #23]
            break;
 8005ad4:	e006      	b.n	8005ae4 <lsm6dso_gy_data_rate_set+0x1b0>
              odr_gy = val;
 8005ad6:	78fb      	ldrb	r3, [r7, #3]
 8005ad8:	75fb      	strb	r3, [r7, #23]
            break;
 8005ada:	e003      	b.n	8005ae4 <lsm6dso_gy_data_rate_set+0x1b0>

          default:
            odr_gy = val;
 8005adc:	78fb      	ldrb	r3, [r7, #3]
 8005ade:	75fb      	strb	r3, [r7, #23]
            break;
 8005ae0:	e000      	b.n	8005ae4 <lsm6dso_gy_data_rate_set+0x1b0>
        }
      }
 8005ae2:	bf00      	nop
    }
  }

  if (ret == 0)
 8005ae4:	693b      	ldr	r3, [r7, #16]
 8005ae6:	2b00      	cmp	r3, #0
 8005ae8:	d107      	bne.n	8005afa <lsm6dso_gy_data_rate_set+0x1c6>
  {
    ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL2_G, (uint8_t *)&reg, 1);
 8005aea:	f107 0208 	add.w	r2, r7, #8
 8005aee:	2301      	movs	r3, #1
 8005af0:	2111      	movs	r1, #17
 8005af2:	6878      	ldr	r0, [r7, #4]
 8005af4:	f7ff fcc4 	bl	8005480 <lsm6dso_read_reg>
 8005af8:	6138      	str	r0, [r7, #16]
  }

  if (ret == 0)
 8005afa:	693b      	ldr	r3, [r7, #16]
 8005afc:	2b00      	cmp	r3, #0
 8005afe:	d10f      	bne.n	8005b20 <lsm6dso_gy_data_rate_set+0x1ec>
  {
    reg.odr_g = (uint8_t) odr_gy;
 8005b00:	7dfb      	ldrb	r3, [r7, #23]
 8005b02:	f003 030f 	and.w	r3, r3, #15
 8005b06:	b2da      	uxtb	r2, r3
 8005b08:	7a3b      	ldrb	r3, [r7, #8]
 8005b0a:	f362 1307 	bfi	r3, r2, #4, #4
 8005b0e:	723b      	strb	r3, [r7, #8]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL2_G, (uint8_t *)&reg, 1);
 8005b10:	f107 0208 	add.w	r2, r7, #8
 8005b14:	2301      	movs	r3, #1
 8005b16:	2111      	movs	r1, #17
 8005b18:	6878      	ldr	r0, [r7, #4]
 8005b1a:	f7ff fcc9 	bl	80054b0 <lsm6dso_write_reg>
 8005b1e:	6138      	str	r0, [r7, #16]
  }

  return ret;
 8005b20:	693b      	ldr	r3, [r7, #16]
}
 8005b22:	4618      	mov	r0, r3
 8005b24:	3718      	adds	r7, #24
 8005b26:	46bd      	mov	sp, r7
 8005b28:	bd80      	pop	{r7, pc}
 8005b2a:	bf00      	nop

08005b2c <lsm6dso_gy_data_rate_get>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_gy_data_rate_get(stmdev_ctx_t *ctx,
                                 lsm6dso_odr_g_t *val)
{
 8005b2c:	b580      	push	{r7, lr}
 8005b2e:	b084      	sub	sp, #16
 8005b30:	af00      	add	r7, sp, #0
 8005b32:	6078      	str	r0, [r7, #4]
 8005b34:	6039      	str	r1, [r7, #0]
  lsm6dso_ctrl2_g_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL2_G, (uint8_t *)&reg, 1);
 8005b36:	f107 0208 	add.w	r2, r7, #8
 8005b3a:	2301      	movs	r3, #1
 8005b3c:	2111      	movs	r1, #17
 8005b3e:	6878      	ldr	r0, [r7, #4]
 8005b40:	f7ff fc9e 	bl	8005480 <lsm6dso_read_reg>
 8005b44:	60f8      	str	r0, [r7, #12]

  switch (reg.odr_g)
 8005b46:	7a3b      	ldrb	r3, [r7, #8]
 8005b48:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8005b4c:	b2db      	uxtb	r3, r3
 8005b4e:	2b0a      	cmp	r3, #10
 8005b50:	d844      	bhi.n	8005bdc <lsm6dso_gy_data_rate_get+0xb0>
 8005b52:	a201      	add	r2, pc, #4	; (adr r2, 8005b58 <lsm6dso_gy_data_rate_get+0x2c>)
 8005b54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b58:	08005b85 	.word	0x08005b85
 8005b5c:	08005b8d 	.word	0x08005b8d
 8005b60:	08005b95 	.word	0x08005b95
 8005b64:	08005b9d 	.word	0x08005b9d
 8005b68:	08005ba5 	.word	0x08005ba5
 8005b6c:	08005bad 	.word	0x08005bad
 8005b70:	08005bb5 	.word	0x08005bb5
 8005b74:	08005bbd 	.word	0x08005bbd
 8005b78:	08005bc5 	.word	0x08005bc5
 8005b7c:	08005bcd 	.word	0x08005bcd
 8005b80:	08005bd5 	.word	0x08005bd5
  {
    case LSM6DSO_GY_ODR_OFF:
      *val = LSM6DSO_GY_ODR_OFF;
 8005b84:	683b      	ldr	r3, [r7, #0]
 8005b86:	2200      	movs	r2, #0
 8005b88:	701a      	strb	r2, [r3, #0]
      break;
 8005b8a:	e02b      	b.n	8005be4 <lsm6dso_gy_data_rate_get+0xb8>

    case LSM6DSO_GY_ODR_12Hz5:
      *val = LSM6DSO_GY_ODR_12Hz5;
 8005b8c:	683b      	ldr	r3, [r7, #0]
 8005b8e:	2201      	movs	r2, #1
 8005b90:	701a      	strb	r2, [r3, #0]
      break;
 8005b92:	e027      	b.n	8005be4 <lsm6dso_gy_data_rate_get+0xb8>

    case LSM6DSO_GY_ODR_26Hz:
      *val = LSM6DSO_GY_ODR_26Hz;
 8005b94:	683b      	ldr	r3, [r7, #0]
 8005b96:	2202      	movs	r2, #2
 8005b98:	701a      	strb	r2, [r3, #0]
      break;
 8005b9a:	e023      	b.n	8005be4 <lsm6dso_gy_data_rate_get+0xb8>

    case LSM6DSO_GY_ODR_52Hz:
      *val = LSM6DSO_GY_ODR_52Hz;
 8005b9c:	683b      	ldr	r3, [r7, #0]
 8005b9e:	2203      	movs	r2, #3
 8005ba0:	701a      	strb	r2, [r3, #0]
      break;
 8005ba2:	e01f      	b.n	8005be4 <lsm6dso_gy_data_rate_get+0xb8>

    case LSM6DSO_GY_ODR_104Hz:
      *val = LSM6DSO_GY_ODR_104Hz;
 8005ba4:	683b      	ldr	r3, [r7, #0]
 8005ba6:	2204      	movs	r2, #4
 8005ba8:	701a      	strb	r2, [r3, #0]
      break;
 8005baa:	e01b      	b.n	8005be4 <lsm6dso_gy_data_rate_get+0xb8>

    case LSM6DSO_GY_ODR_208Hz:
      *val = LSM6DSO_GY_ODR_208Hz;
 8005bac:	683b      	ldr	r3, [r7, #0]
 8005bae:	2205      	movs	r2, #5
 8005bb0:	701a      	strb	r2, [r3, #0]
      break;
 8005bb2:	e017      	b.n	8005be4 <lsm6dso_gy_data_rate_get+0xb8>

    case LSM6DSO_GY_ODR_417Hz:
      *val = LSM6DSO_GY_ODR_417Hz;
 8005bb4:	683b      	ldr	r3, [r7, #0]
 8005bb6:	2206      	movs	r2, #6
 8005bb8:	701a      	strb	r2, [r3, #0]
      break;
 8005bba:	e013      	b.n	8005be4 <lsm6dso_gy_data_rate_get+0xb8>

    case LSM6DSO_GY_ODR_833Hz:
      *val = LSM6DSO_GY_ODR_833Hz;
 8005bbc:	683b      	ldr	r3, [r7, #0]
 8005bbe:	2207      	movs	r2, #7
 8005bc0:	701a      	strb	r2, [r3, #0]
      break;
 8005bc2:	e00f      	b.n	8005be4 <lsm6dso_gy_data_rate_get+0xb8>

    case LSM6DSO_GY_ODR_1667Hz:
      *val = LSM6DSO_GY_ODR_1667Hz;
 8005bc4:	683b      	ldr	r3, [r7, #0]
 8005bc6:	2208      	movs	r2, #8
 8005bc8:	701a      	strb	r2, [r3, #0]
      break;
 8005bca:	e00b      	b.n	8005be4 <lsm6dso_gy_data_rate_get+0xb8>

    case LSM6DSO_GY_ODR_3333Hz:
      *val = LSM6DSO_GY_ODR_3333Hz;
 8005bcc:	683b      	ldr	r3, [r7, #0]
 8005bce:	2209      	movs	r2, #9
 8005bd0:	701a      	strb	r2, [r3, #0]
      break;
 8005bd2:	e007      	b.n	8005be4 <lsm6dso_gy_data_rate_get+0xb8>

    case LSM6DSO_GY_ODR_6667Hz:
      *val = LSM6DSO_GY_ODR_6667Hz;
 8005bd4:	683b      	ldr	r3, [r7, #0]
 8005bd6:	220a      	movs	r2, #10
 8005bd8:	701a      	strb	r2, [r3, #0]
      break;
 8005bda:	e003      	b.n	8005be4 <lsm6dso_gy_data_rate_get+0xb8>

    default:
      *val = LSM6DSO_GY_ODR_OFF;
 8005bdc:	683b      	ldr	r3, [r7, #0]
 8005bde:	2200      	movs	r2, #0
 8005be0:	701a      	strb	r2, [r3, #0]
      break;
 8005be2:	bf00      	nop
  }

  return ret;
 8005be4:	68fb      	ldr	r3, [r7, #12]
}
 8005be6:	4618      	mov	r0, r3
 8005be8:	3710      	adds	r7, #16
 8005bea:	46bd      	mov	sp, r7
 8005bec:	bd80      	pop	{r7, pc}
 8005bee:	bf00      	nop

08005bf0 <lsm6dso_block_data_update_set>:
  * @param  val      change the values of bdu in reg CTRL3_C
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8005bf0:	b580      	push	{r7, lr}
 8005bf2:	b084      	sub	sp, #16
 8005bf4:	af00      	add	r7, sp, #0
 8005bf6:	6078      	str	r0, [r7, #4]
 8005bf8:	460b      	mov	r3, r1
 8005bfa:	70fb      	strb	r3, [r7, #3]
  lsm6dso_ctrl3_c_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL3_C, (uint8_t *)&reg, 1);
 8005bfc:	f107 0208 	add.w	r2, r7, #8
 8005c00:	2301      	movs	r3, #1
 8005c02:	2112      	movs	r1, #18
 8005c04:	6878      	ldr	r0, [r7, #4]
 8005c06:	f7ff fc3b 	bl	8005480 <lsm6dso_read_reg>
 8005c0a:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	2b00      	cmp	r3, #0
 8005c10:	d10f      	bne.n	8005c32 <lsm6dso_block_data_update_set+0x42>
  {
    reg.bdu = val;
 8005c12:	78fb      	ldrb	r3, [r7, #3]
 8005c14:	f003 0301 	and.w	r3, r3, #1
 8005c18:	b2da      	uxtb	r2, r3
 8005c1a:	7a3b      	ldrb	r3, [r7, #8]
 8005c1c:	f362 1386 	bfi	r3, r2, #6, #1
 8005c20:	723b      	strb	r3, [r7, #8]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL3_C, (uint8_t *)&reg, 1);
 8005c22:	f107 0208 	add.w	r2, r7, #8
 8005c26:	2301      	movs	r3, #1
 8005c28:	2112      	movs	r1, #18
 8005c2a:	6878      	ldr	r0, [r7, #4]
 8005c2c:	f7ff fc40 	bl	80054b0 <lsm6dso_write_reg>
 8005c30:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8005c32:	68fb      	ldr	r3, [r7, #12]
}
 8005c34:	4618      	mov	r0, r3
 8005c36:	3710      	adds	r7, #16
 8005c38:	46bd      	mov	sp, r7
 8005c3a:	bd80      	pop	{r7, pc}

08005c3c <lsm6dso_angular_rate_raw_get>:
  * @param  buff     buffer that stores data read
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_angular_rate_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 8005c3c:	b580      	push	{r7, lr}
 8005c3e:	b086      	sub	sp, #24
 8005c40:	af00      	add	r7, sp, #0
 8005c42:	6078      	str	r0, [r7, #4]
 8005c44:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_OUTX_L_G, buff, 6);
 8005c46:	f107 020c 	add.w	r2, r7, #12
 8005c4a:	2306      	movs	r3, #6
 8005c4c:	2122      	movs	r1, #34	; 0x22
 8005c4e:	6878      	ldr	r0, [r7, #4]
 8005c50:	f7ff fc16 	bl	8005480 <lsm6dso_read_reg>
 8005c54:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 8005c56:	7b7b      	ldrb	r3, [r7, #13]
 8005c58:	b21a      	sxth	r2, r3
 8005c5a:	683b      	ldr	r3, [r7, #0]
 8005c5c:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 8005c5e:	683b      	ldr	r3, [r7, #0]
 8005c60:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005c64:	b29b      	uxth	r3, r3
 8005c66:	021b      	lsls	r3, r3, #8
 8005c68:	b29a      	uxth	r2, r3
 8005c6a:	7b3b      	ldrb	r3, [r7, #12]
 8005c6c:	b29b      	uxth	r3, r3
 8005c6e:	4413      	add	r3, r2
 8005c70:	b29b      	uxth	r3, r3
 8005c72:	b21a      	sxth	r2, r3
 8005c74:	683b      	ldr	r3, [r7, #0]
 8005c76:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 8005c78:	7bfa      	ldrb	r2, [r7, #15]
 8005c7a:	683b      	ldr	r3, [r7, #0]
 8005c7c:	3302      	adds	r3, #2
 8005c7e:	b212      	sxth	r2, r2
 8005c80:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 8005c82:	683b      	ldr	r3, [r7, #0]
 8005c84:	3302      	adds	r3, #2
 8005c86:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005c8a:	b29b      	uxth	r3, r3
 8005c8c:	021b      	lsls	r3, r3, #8
 8005c8e:	b29a      	uxth	r2, r3
 8005c90:	7bbb      	ldrb	r3, [r7, #14]
 8005c92:	b29b      	uxth	r3, r3
 8005c94:	4413      	add	r3, r2
 8005c96:	b29a      	uxth	r2, r3
 8005c98:	683b      	ldr	r3, [r7, #0]
 8005c9a:	3302      	adds	r3, #2
 8005c9c:	b212      	sxth	r2, r2
 8005c9e:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 8005ca0:	7c7a      	ldrb	r2, [r7, #17]
 8005ca2:	683b      	ldr	r3, [r7, #0]
 8005ca4:	3304      	adds	r3, #4
 8005ca6:	b212      	sxth	r2, r2
 8005ca8:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 8005caa:	683b      	ldr	r3, [r7, #0]
 8005cac:	3304      	adds	r3, #4
 8005cae:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005cb2:	b29b      	uxth	r3, r3
 8005cb4:	021b      	lsls	r3, r3, #8
 8005cb6:	b29a      	uxth	r2, r3
 8005cb8:	7c3b      	ldrb	r3, [r7, #16]
 8005cba:	b29b      	uxth	r3, r3
 8005cbc:	4413      	add	r3, r2
 8005cbe:	b29a      	uxth	r2, r3
 8005cc0:	683b      	ldr	r3, [r7, #0]
 8005cc2:	3304      	adds	r3, #4
 8005cc4:	b212      	sxth	r2, r2
 8005cc6:	801a      	strh	r2, [r3, #0]

  return ret;
 8005cc8:	697b      	ldr	r3, [r7, #20]
}
 8005cca:	4618      	mov	r0, r3
 8005ccc:	3718      	adds	r7, #24
 8005cce:	46bd      	mov	sp, r7
 8005cd0:	bd80      	pop	{r7, pc}

08005cd2 <lsm6dso_acceleration_raw_get>:
  * @param  buff     buffer that stores data read
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_acceleration_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 8005cd2:	b580      	push	{r7, lr}
 8005cd4:	b086      	sub	sp, #24
 8005cd6:	af00      	add	r7, sp, #0
 8005cd8:	6078      	str	r0, [r7, #4]
 8005cda:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_OUTX_L_A, buff, 6);
 8005cdc:	f107 020c 	add.w	r2, r7, #12
 8005ce0:	2306      	movs	r3, #6
 8005ce2:	2128      	movs	r1, #40	; 0x28
 8005ce4:	6878      	ldr	r0, [r7, #4]
 8005ce6:	f7ff fbcb 	bl	8005480 <lsm6dso_read_reg>
 8005cea:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 8005cec:	7b7b      	ldrb	r3, [r7, #13]
 8005cee:	b21a      	sxth	r2, r3
 8005cf0:	683b      	ldr	r3, [r7, #0]
 8005cf2:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 8005cf4:	683b      	ldr	r3, [r7, #0]
 8005cf6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005cfa:	b29b      	uxth	r3, r3
 8005cfc:	021b      	lsls	r3, r3, #8
 8005cfe:	b29a      	uxth	r2, r3
 8005d00:	7b3b      	ldrb	r3, [r7, #12]
 8005d02:	b29b      	uxth	r3, r3
 8005d04:	4413      	add	r3, r2
 8005d06:	b29b      	uxth	r3, r3
 8005d08:	b21a      	sxth	r2, r3
 8005d0a:	683b      	ldr	r3, [r7, #0]
 8005d0c:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 8005d0e:	7bfa      	ldrb	r2, [r7, #15]
 8005d10:	683b      	ldr	r3, [r7, #0]
 8005d12:	3302      	adds	r3, #2
 8005d14:	b212      	sxth	r2, r2
 8005d16:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 8005d18:	683b      	ldr	r3, [r7, #0]
 8005d1a:	3302      	adds	r3, #2
 8005d1c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005d20:	b29b      	uxth	r3, r3
 8005d22:	021b      	lsls	r3, r3, #8
 8005d24:	b29a      	uxth	r2, r3
 8005d26:	7bbb      	ldrb	r3, [r7, #14]
 8005d28:	b29b      	uxth	r3, r3
 8005d2a:	4413      	add	r3, r2
 8005d2c:	b29a      	uxth	r2, r3
 8005d2e:	683b      	ldr	r3, [r7, #0]
 8005d30:	3302      	adds	r3, #2
 8005d32:	b212      	sxth	r2, r2
 8005d34:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 8005d36:	7c7a      	ldrb	r2, [r7, #17]
 8005d38:	683b      	ldr	r3, [r7, #0]
 8005d3a:	3304      	adds	r3, #4
 8005d3c:	b212      	sxth	r2, r2
 8005d3e:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 8005d40:	683b      	ldr	r3, [r7, #0]
 8005d42:	3304      	adds	r3, #4
 8005d44:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005d48:	b29b      	uxth	r3, r3
 8005d4a:	021b      	lsls	r3, r3, #8
 8005d4c:	b29a      	uxth	r2, r3
 8005d4e:	7c3b      	ldrb	r3, [r7, #16]
 8005d50:	b29b      	uxth	r3, r3
 8005d52:	4413      	add	r3, r2
 8005d54:	b29a      	uxth	r2, r3
 8005d56:	683b      	ldr	r3, [r7, #0]
 8005d58:	3304      	adds	r3, #4
 8005d5a:	b212      	sxth	r2, r2
 8005d5c:	801a      	strh	r2, [r3, #0]

  return ret;
 8005d5e:	697b      	ldr	r3, [r7, #20]
}
 8005d60:	4618      	mov	r0, r3
 8005d62:	3718      	adds	r7, #24
 8005d64:	46bd      	mov	sp, r7
 8005d66:	bd80      	pop	{r7, pc}

08005d68 <lsm6dso_mem_bank_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_mem_bank_set(stmdev_ctx_t *ctx,
                             lsm6dso_reg_access_t val)
{
 8005d68:	b580      	push	{r7, lr}
 8005d6a:	b084      	sub	sp, #16
 8005d6c:	af00      	add	r7, sp, #0
 8005d6e:	6078      	str	r0, [r7, #4]
 8005d70:	460b      	mov	r3, r1
 8005d72:	70fb      	strb	r3, [r7, #3]
  lsm6dso_func_cfg_access_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_FUNC_CFG_ACCESS, (uint8_t *)&reg, 1);
 8005d74:	f107 0208 	add.w	r2, r7, #8
 8005d78:	2301      	movs	r3, #1
 8005d7a:	2101      	movs	r1, #1
 8005d7c:	6878      	ldr	r0, [r7, #4]
 8005d7e:	f7ff fb7f 	bl	8005480 <lsm6dso_read_reg>
 8005d82:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	2b00      	cmp	r3, #0
 8005d88:	d10f      	bne.n	8005daa <lsm6dso_mem_bank_set+0x42>
  {
    reg.reg_access = (uint8_t)val;
 8005d8a:	78fb      	ldrb	r3, [r7, #3]
 8005d8c:	f003 0303 	and.w	r3, r3, #3
 8005d90:	b2da      	uxtb	r2, r3
 8005d92:	7a3b      	ldrb	r3, [r7, #8]
 8005d94:	f362 1387 	bfi	r3, r2, #6, #2
 8005d98:	723b      	strb	r3, [r7, #8]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_FUNC_CFG_ACCESS, (uint8_t *)&reg, 1);
 8005d9a:	f107 0208 	add.w	r2, r7, #8
 8005d9e:	2301      	movs	r3, #1
 8005da0:	2101      	movs	r1, #1
 8005da2:	6878      	ldr	r0, [r7, #4]
 8005da4:	f7ff fb84 	bl	80054b0 <lsm6dso_write_reg>
 8005da8:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8005daa:	68fb      	ldr	r3, [r7, #12]
}
 8005dac:	4618      	mov	r0, r3
 8005dae:	3710      	adds	r7, #16
 8005db0:	46bd      	mov	sp, r7
 8005db2:	bd80      	pop	{r7, pc}

08005db4 <lsm6dso_device_id_get>:
  * @param  buff     buffer that stores data read
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 8005db4:	b580      	push	{r7, lr}
 8005db6:	b084      	sub	sp, #16
 8005db8:	af00      	add	r7, sp, #0
 8005dba:	6078      	str	r0, [r7, #4]
 8005dbc:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_WHO_AM_I, buff, 1);
 8005dbe:	2301      	movs	r3, #1
 8005dc0:	683a      	ldr	r2, [r7, #0]
 8005dc2:	210f      	movs	r1, #15
 8005dc4:	6878      	ldr	r0, [r7, #4]
 8005dc6:	f7ff fb5b 	bl	8005480 <lsm6dso_read_reg>
 8005dca:	60f8      	str	r0, [r7, #12]

  return ret;
 8005dcc:	68fb      	ldr	r3, [r7, #12]
}
 8005dce:	4618      	mov	r0, r3
 8005dd0:	3710      	adds	r7, #16
 8005dd2:	46bd      	mov	sp, r7
 8005dd4:	bd80      	pop	{r7, pc}

08005dd6 <lsm6dso_auto_increment_set>:
  * @param  val      change the values of if_inc in reg CTRL3_C
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_auto_increment_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8005dd6:	b580      	push	{r7, lr}
 8005dd8:	b084      	sub	sp, #16
 8005dda:	af00      	add	r7, sp, #0
 8005ddc:	6078      	str	r0, [r7, #4]
 8005dde:	460b      	mov	r3, r1
 8005de0:	70fb      	strb	r3, [r7, #3]
  lsm6dso_ctrl3_c_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL3_C, (uint8_t *)&reg, 1);
 8005de2:	f107 0208 	add.w	r2, r7, #8
 8005de6:	2301      	movs	r3, #1
 8005de8:	2112      	movs	r1, #18
 8005dea:	6878      	ldr	r0, [r7, #4]
 8005dec:	f7ff fb48 	bl	8005480 <lsm6dso_read_reg>
 8005df0:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	2b00      	cmp	r3, #0
 8005df6:	d10f      	bne.n	8005e18 <lsm6dso_auto_increment_set+0x42>
  {
    reg.if_inc = val;
 8005df8:	78fb      	ldrb	r3, [r7, #3]
 8005dfa:	f003 0301 	and.w	r3, r3, #1
 8005dfe:	b2da      	uxtb	r2, r3
 8005e00:	7a3b      	ldrb	r3, [r7, #8]
 8005e02:	f362 0382 	bfi	r3, r2, #2, #1
 8005e06:	723b      	strb	r3, [r7, #8]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL3_C, (uint8_t *)&reg, 1);
 8005e08:	f107 0208 	add.w	r2, r7, #8
 8005e0c:	2301      	movs	r3, #1
 8005e0e:	2112      	movs	r1, #18
 8005e10:	6878      	ldr	r0, [r7, #4]
 8005e12:	f7ff fb4d 	bl	80054b0 <lsm6dso_write_reg>
 8005e16:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8005e18:	68fb      	ldr	r3, [r7, #12]
}
 8005e1a:	4618      	mov	r0, r3
 8005e1c:	3710      	adds	r7, #16
 8005e1e:	46bd      	mov	sp, r7
 8005e20:	bd80      	pop	{r7, pc}

08005e22 <lsm6dso_i3c_disable_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_i3c_disable_set(stmdev_ctx_t *ctx,
                                lsm6dso_i3c_disable_t val)
{
 8005e22:	b580      	push	{r7, lr}
 8005e24:	b086      	sub	sp, #24
 8005e26:	af00      	add	r7, sp, #0
 8005e28:	6078      	str	r0, [r7, #4]
 8005e2a:	460b      	mov	r3, r1
 8005e2c:	70fb      	strb	r3, [r7, #3]
  lsm6dso_i3c_bus_avb_t i3c_bus_avb;
  lsm6dso_ctrl9_xl_t ctrl9_xl;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL9_XL, (uint8_t *)&ctrl9_xl, 1);
 8005e2e:	f107 020c 	add.w	r2, r7, #12
 8005e32:	2301      	movs	r3, #1
 8005e34:	2118      	movs	r1, #24
 8005e36:	6878      	ldr	r0, [r7, #4]
 8005e38:	f7ff fb22 	bl	8005480 <lsm6dso_read_reg>
 8005e3c:	6178      	str	r0, [r7, #20]

  if (ret == 0)
 8005e3e:	697b      	ldr	r3, [r7, #20]
 8005e40:	2b00      	cmp	r3, #0
 8005e42:	d111      	bne.n	8005e68 <lsm6dso_i3c_disable_set+0x46>
  {
    ctrl9_xl.i3c_disable = ((uint8_t)val & 0x80U) >> 7;
 8005e44:	78fb      	ldrb	r3, [r7, #3]
 8005e46:	09db      	lsrs	r3, r3, #7
 8005e48:	b2db      	uxtb	r3, r3
 8005e4a:	f003 0301 	and.w	r3, r3, #1
 8005e4e:	b2da      	uxtb	r2, r3
 8005e50:	7b3b      	ldrb	r3, [r7, #12]
 8005e52:	f362 0341 	bfi	r3, r2, #1, #1
 8005e56:	733b      	strb	r3, [r7, #12]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL9_XL, (uint8_t *)&ctrl9_xl, 1);
 8005e58:	f107 020c 	add.w	r2, r7, #12
 8005e5c:	2301      	movs	r3, #1
 8005e5e:	2118      	movs	r1, #24
 8005e60:	6878      	ldr	r0, [r7, #4]
 8005e62:	f7ff fb25 	bl	80054b0 <lsm6dso_write_reg>
 8005e66:	6178      	str	r0, [r7, #20]
  }

  if (ret == 0)
 8005e68:	697b      	ldr	r3, [r7, #20]
 8005e6a:	2b00      	cmp	r3, #0
 8005e6c:	d107      	bne.n	8005e7e <lsm6dso_i3c_disable_set+0x5c>
  {
    ret = lsm6dso_read_reg(ctx, LSM6DSO_I3C_BUS_AVB,
 8005e6e:	f107 0210 	add.w	r2, r7, #16
 8005e72:	2301      	movs	r3, #1
 8005e74:	2162      	movs	r1, #98	; 0x62
 8005e76:	6878      	ldr	r0, [r7, #4]
 8005e78:	f7ff fb02 	bl	8005480 <lsm6dso_read_reg>
 8005e7c:	6178      	str	r0, [r7, #20]
                           (uint8_t *)&i3c_bus_avb, 1);
  }

  if (ret == 0)
 8005e7e:	697b      	ldr	r3, [r7, #20]
 8005e80:	2b00      	cmp	r3, #0
 8005e82:	d10f      	bne.n	8005ea4 <lsm6dso_i3c_disable_set+0x82>
  {
    i3c_bus_avb.i3c_bus_avb_sel = (uint8_t)val & 0x03U;
 8005e84:	78fb      	ldrb	r3, [r7, #3]
 8005e86:	f003 0303 	and.w	r3, r3, #3
 8005e8a:	b2da      	uxtb	r2, r3
 8005e8c:	7c3b      	ldrb	r3, [r7, #16]
 8005e8e:	f362 03c4 	bfi	r3, r2, #3, #2
 8005e92:	743b      	strb	r3, [r7, #16]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_I3C_BUS_AVB,
 8005e94:	f107 0210 	add.w	r2, r7, #16
 8005e98:	2301      	movs	r3, #1
 8005e9a:	2162      	movs	r1, #98	; 0x62
 8005e9c:	6878      	ldr	r0, [r7, #4]
 8005e9e:	f7ff fb07 	bl	80054b0 <lsm6dso_write_reg>
 8005ea2:	6178      	str	r0, [r7, #20]
                            (uint8_t *)&i3c_bus_avb, 1);
  }

  return ret;
 8005ea4:	697b      	ldr	r3, [r7, #20]
}
 8005ea6:	4618      	mov	r0, r3
 8005ea8:	3718      	adds	r7, #24
 8005eaa:	46bd      	mov	sp, r7
 8005eac:	bd80      	pop	{r7, pc}

08005eae <lsm6dso_fifo_mode_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_fifo_mode_set(stmdev_ctx_t *ctx,
                              lsm6dso_fifo_mode_t val)
{
 8005eae:	b580      	push	{r7, lr}
 8005eb0:	b084      	sub	sp, #16
 8005eb2:	af00      	add	r7, sp, #0
 8005eb4:	6078      	str	r0, [r7, #4]
 8005eb6:	460b      	mov	r3, r1
 8005eb8:	70fb      	strb	r3, [r7, #3]
  lsm6dso_fifo_ctrl4_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_FIFO_CTRL4, (uint8_t *)&reg, 1);
 8005eba:	f107 0208 	add.w	r2, r7, #8
 8005ebe:	2301      	movs	r3, #1
 8005ec0:	210a      	movs	r1, #10
 8005ec2:	6878      	ldr	r0, [r7, #4]
 8005ec4:	f7ff fadc 	bl	8005480 <lsm6dso_read_reg>
 8005ec8:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	2b00      	cmp	r3, #0
 8005ece:	d10f      	bne.n	8005ef0 <lsm6dso_fifo_mode_set+0x42>
  {
    reg.fifo_mode = (uint8_t)val;
 8005ed0:	78fb      	ldrb	r3, [r7, #3]
 8005ed2:	f003 0307 	and.w	r3, r3, #7
 8005ed6:	b2da      	uxtb	r2, r3
 8005ed8:	7a3b      	ldrb	r3, [r7, #8]
 8005eda:	f362 0302 	bfi	r3, r2, #0, #3
 8005ede:	723b      	strb	r3, [r7, #8]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_FIFO_CTRL4, (uint8_t *)&reg, 1);
 8005ee0:	f107 0208 	add.w	r2, r7, #8
 8005ee4:	2301      	movs	r3, #1
 8005ee6:	210a      	movs	r1, #10
 8005ee8:	6878      	ldr	r0, [r7, #4]
 8005eea:	f7ff fae1 	bl	80054b0 <lsm6dso_write_reg>
 8005eee:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8005ef0:	68fb      	ldr	r3, [r7, #12]
}
 8005ef2:	4618      	mov	r0, r3
 8005ef4:	3710      	adds	r7, #16
 8005ef6:	46bd      	mov	sp, r7
 8005ef8:	bd80      	pop	{r7, pc}

08005efa <lsm6dso_fsm_enable_get>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_fsm_enable_get(stmdev_ctx_t *ctx,
                               lsm6dso_emb_fsm_enable_t *val)
{
 8005efa:	b580      	push	{r7, lr}
 8005efc:	b084      	sub	sp, #16
 8005efe:	af00      	add	r7, sp, #0
 8005f00:	6078      	str	r0, [r7, #4]
 8005f02:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = lsm6dso_mem_bank_set(ctx, LSM6DSO_EMBEDDED_FUNC_BANK);
 8005f04:	2102      	movs	r1, #2
 8005f06:	6878      	ldr	r0, [r7, #4]
 8005f08:	f7ff ff2e 	bl	8005d68 <lsm6dso_mem_bank_set>
 8005f0c:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	2b00      	cmp	r3, #0
 8005f12:	d106      	bne.n	8005f22 <lsm6dso_fsm_enable_get+0x28>
  {
    ret = lsm6dso_read_reg(ctx, LSM6DSO_FSM_ENABLE_A, (uint8_t *) val, 2);
 8005f14:	2302      	movs	r3, #2
 8005f16:	683a      	ldr	r2, [r7, #0]
 8005f18:	2146      	movs	r1, #70	; 0x46
 8005f1a:	6878      	ldr	r0, [r7, #4]
 8005f1c:	f7ff fab0 	bl	8005480 <lsm6dso_read_reg>
 8005f20:	60f8      	str	r0, [r7, #12]
  }

  if (ret == 0)
 8005f22:	68fb      	ldr	r3, [r7, #12]
 8005f24:	2b00      	cmp	r3, #0
 8005f26:	d104      	bne.n	8005f32 <lsm6dso_fsm_enable_get+0x38>
  {
    ret = lsm6dso_mem_bank_set(ctx, LSM6DSO_USER_BANK);
 8005f28:	2100      	movs	r1, #0
 8005f2a:	6878      	ldr	r0, [r7, #4]
 8005f2c:	f7ff ff1c 	bl	8005d68 <lsm6dso_mem_bank_set>
 8005f30:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8005f32:	68fb      	ldr	r3, [r7, #12]
}
 8005f34:	4618      	mov	r0, r3
 8005f36:	3710      	adds	r7, #16
 8005f38:	46bd      	mov	sp, r7
 8005f3a:	bd80      	pop	{r7, pc}

08005f3c <lsm6dso_fsm_data_rate_get>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_fsm_data_rate_get(stmdev_ctx_t *ctx,
                                  lsm6dso_fsm_odr_t *val)
{
 8005f3c:	b580      	push	{r7, lr}
 8005f3e:	b084      	sub	sp, #16
 8005f40:	af00      	add	r7, sp, #0
 8005f42:	6078      	str	r0, [r7, #4]
 8005f44:	6039      	str	r1, [r7, #0]
  lsm6dso_emb_func_odr_cfg_b_t reg;
  int32_t ret;

  ret = lsm6dso_mem_bank_set(ctx, LSM6DSO_EMBEDDED_FUNC_BANK);
 8005f46:	2102      	movs	r1, #2
 8005f48:	6878      	ldr	r0, [r7, #4]
 8005f4a:	f7ff ff0d 	bl	8005d68 <lsm6dso_mem_bank_set>
 8005f4e:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	d107      	bne.n	8005f66 <lsm6dso_fsm_data_rate_get+0x2a>
  {
    ret = lsm6dso_read_reg(ctx, LSM6DSO_EMB_FUNC_ODR_CFG_B,
 8005f56:	f107 0208 	add.w	r2, r7, #8
 8005f5a:	2301      	movs	r3, #1
 8005f5c:	215f      	movs	r1, #95	; 0x5f
 8005f5e:	6878      	ldr	r0, [r7, #4]
 8005f60:	f7ff fa8e 	bl	8005480 <lsm6dso_read_reg>
 8005f64:	60f8      	str	r0, [r7, #12]
                           (uint8_t *)&reg, 1);
  }

  if (ret == 0)
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	2b00      	cmp	r3, #0
 8005f6a:	d12a      	bne.n	8005fc2 <lsm6dso_fsm_data_rate_get+0x86>
  {
    switch (reg.fsm_odr)
 8005f6c:	7a3b      	ldrb	r3, [r7, #8]
 8005f6e:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8005f72:	b2db      	uxtb	r3, r3
 8005f74:	2b03      	cmp	r3, #3
 8005f76:	d81b      	bhi.n	8005fb0 <lsm6dso_fsm_data_rate_get+0x74>
 8005f78:	a201      	add	r2, pc, #4	; (adr r2, 8005f80 <lsm6dso_fsm_data_rate_get+0x44>)
 8005f7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f7e:	bf00      	nop
 8005f80:	08005f91 	.word	0x08005f91
 8005f84:	08005f99 	.word	0x08005f99
 8005f88:	08005fa1 	.word	0x08005fa1
 8005f8c:	08005fa9 	.word	0x08005fa9
    {
      case LSM6DSO_ODR_FSM_12Hz5:
        *val = LSM6DSO_ODR_FSM_12Hz5;
 8005f90:	683b      	ldr	r3, [r7, #0]
 8005f92:	2200      	movs	r2, #0
 8005f94:	701a      	strb	r2, [r3, #0]
        break;
 8005f96:	e00f      	b.n	8005fb8 <lsm6dso_fsm_data_rate_get+0x7c>

      case LSM6DSO_ODR_FSM_26Hz:
        *val = LSM6DSO_ODR_FSM_26Hz;
 8005f98:	683b      	ldr	r3, [r7, #0]
 8005f9a:	2201      	movs	r2, #1
 8005f9c:	701a      	strb	r2, [r3, #0]
        break;
 8005f9e:	e00b      	b.n	8005fb8 <lsm6dso_fsm_data_rate_get+0x7c>

      case LSM6DSO_ODR_FSM_52Hz:
        *val = LSM6DSO_ODR_FSM_52Hz;
 8005fa0:	683b      	ldr	r3, [r7, #0]
 8005fa2:	2202      	movs	r2, #2
 8005fa4:	701a      	strb	r2, [r3, #0]
        break;
 8005fa6:	e007      	b.n	8005fb8 <lsm6dso_fsm_data_rate_get+0x7c>

      case LSM6DSO_ODR_FSM_104Hz:
        *val = LSM6DSO_ODR_FSM_104Hz;
 8005fa8:	683b      	ldr	r3, [r7, #0]
 8005faa:	2203      	movs	r2, #3
 8005fac:	701a      	strb	r2, [r3, #0]
        break;
 8005fae:	e003      	b.n	8005fb8 <lsm6dso_fsm_data_rate_get+0x7c>

      default:
        *val = LSM6DSO_ODR_FSM_12Hz5;
 8005fb0:	683b      	ldr	r3, [r7, #0]
 8005fb2:	2200      	movs	r2, #0
 8005fb4:	701a      	strb	r2, [r3, #0]
        break;
 8005fb6:	bf00      	nop
    }

    ret = lsm6dso_mem_bank_set(ctx, LSM6DSO_USER_BANK);
 8005fb8:	2100      	movs	r1, #0
 8005fba:	6878      	ldr	r0, [r7, #4]
 8005fbc:	f7ff fed4 	bl	8005d68 <lsm6dso_mem_bank_set>
 8005fc0:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8005fc2:	68fb      	ldr	r3, [r7, #12]
}
 8005fc4:	4618      	mov	r0, r3
 8005fc6:	3710      	adds	r7, #16
 8005fc8:	46bd      	mov	sp, r7
 8005fca:	bd80      	pop	{r7, pc}

08005fcc <IKS01A3_MOTION_SENSOR_Init>:
  *         - MOTION_ACCELERO for instance 1
  *         - MOTION_MAGNETO for instance 2
  * @retval BSP status
  */
int32_t IKS01A3_MOTION_SENSOR_Init(uint32_t Instance, uint32_t Functions)
{
 8005fcc:	b580      	push	{r7, lr}
 8005fce:	b08e      	sub	sp, #56	; 0x38
 8005fd0:	af00      	add	r7, sp, #0
 8005fd2:	6078      	str	r0, [r7, #4]
 8005fd4:	6039      	str	r1, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
 8005fd6:	2300      	movs	r3, #0
 8005fd8:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t function = MOTION_GYRO;
 8005fda:	2301      	movs	r3, #1
 8005fdc:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t i;
  uint32_t component_functions = 0;
 8005fde:	2300      	movs	r3, #0
 8005fe0:	62bb      	str	r3, [r7, #40]	; 0x28
  IKS01A3_MOTION_SENSOR_Capabilities_t cap;

  switch (Instance)
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	2b02      	cmp	r3, #2
 8005fe6:	d06e      	beq.n	80060c6 <IKS01A3_MOTION_SENSOR_Init+0xfa>
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	2b02      	cmp	r3, #2
 8005fec:	f200 809d 	bhi.w	800612a <IKS01A3_MOTION_SENSOR_Init+0x15e>
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	2b00      	cmp	r3, #0
 8005ff4:	d003      	beq.n	8005ffe <IKS01A3_MOTION_SENSOR_Init+0x32>
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	2b01      	cmp	r3, #1
 8005ffa:	d032      	beq.n	8006062 <IKS01A3_MOTION_SENSOR_Init+0x96>
 8005ffc:	e095      	b.n	800612a <IKS01A3_MOTION_SENSOR_Init+0x15e>
  {
#if (USE_IKS01A3_MOTION_SENSOR_LSM6DSO_0 == 1)
    case IKS01A3_LSM6DSO_0:
      if (LSM6DSO_0_Probe(Functions) != BSP_ERROR_NONE)
 8005ffe:	6838      	ldr	r0, [r7, #0]
 8006000:	f000 f9d0 	bl	80063a4 <LSM6DSO_0_Probe>
 8006004:	4603      	mov	r3, r0
 8006006:	2b00      	cmp	r3, #0
 8006008:	d002      	beq.n	8006010 <IKS01A3_MOTION_SENSOR_Init+0x44>
      {
        return BSP_ERROR_NO_INIT;
 800600a:	f04f 33ff 	mov.w	r3, #4294967295
 800600e:	e0cc      	b.n	80061aa <IKS01A3_MOTION_SENSOR_Init+0x1de>
      }
      if (MotionDrv[Instance]->GetCapabilities(MotionCompObj[Instance], (void *)&cap) != BSP_ERROR_NONE)
 8006010:	4a68      	ldr	r2, [pc, #416]	; (80061b4 <IKS01A3_MOTION_SENSOR_Init+0x1e8>)
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006018:	68db      	ldr	r3, [r3, #12]
 800601a:	4967      	ldr	r1, [pc, #412]	; (80061b8 <IKS01A3_MOTION_SENSOR_Init+0x1ec>)
 800601c:	687a      	ldr	r2, [r7, #4]
 800601e:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8006022:	f107 010c 	add.w	r1, r7, #12
 8006026:	4610      	mov	r0, r2
 8006028:	4798      	blx	r3
 800602a:	4603      	mov	r3, r0
 800602c:	2b00      	cmp	r3, #0
 800602e:	d002      	beq.n	8006036 <IKS01A3_MOTION_SENSOR_Init+0x6a>
      {
        return BSP_ERROR_UNKNOWN_COMPONENT;
 8006030:	f06f 0306 	mvn.w	r3, #6
 8006034:	e0b9      	b.n	80061aa <IKS01A3_MOTION_SENSOR_Init+0x1de>
      }
      if (cap.Acc == 1U)
 8006036:	7b3b      	ldrb	r3, [r7, #12]
 8006038:	2b01      	cmp	r3, #1
 800603a:	d103      	bne.n	8006044 <IKS01A3_MOTION_SENSOR_Init+0x78>
      {
        component_functions |= MOTION_ACCELERO;
 800603c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800603e:	f043 0302 	orr.w	r3, r3, #2
 8006042:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      if (cap.Gyro == 1U)
 8006044:	7b7b      	ldrb	r3, [r7, #13]
 8006046:	2b01      	cmp	r3, #1
 8006048:	d103      	bne.n	8006052 <IKS01A3_MOTION_SENSOR_Init+0x86>
      {
        component_functions |= MOTION_GYRO;
 800604a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800604c:	f043 0301 	orr.w	r3, r3, #1
 8006050:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      if (cap.Magneto == 1U)
 8006052:	7bbb      	ldrb	r3, [r7, #14]
 8006054:	2b01      	cmp	r3, #1
 8006056:	d16c      	bne.n	8006132 <IKS01A3_MOTION_SENSOR_Init+0x166>
      {
        component_functions |= MOTION_MAGNETO;
 8006058:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800605a:	f043 0304 	orr.w	r3, r3, #4
 800605e:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      break;
 8006060:	e067      	b.n	8006132 <IKS01A3_MOTION_SENSOR_Init+0x166>
#endif

#if (USE_IKS01A3_MOTION_SENSOR_LIS2DW12_0 == 1)
    case IKS01A3_LIS2DW12_0:
      if (LIS2DW12_0_Probe(Functions) != BSP_ERROR_NONE)
 8006062:	6838      	ldr	r0, [r7, #0]
 8006064:	f000 fa5e 	bl	8006524 <LIS2DW12_0_Probe>
 8006068:	4603      	mov	r3, r0
 800606a:	2b00      	cmp	r3, #0
 800606c:	d002      	beq.n	8006074 <IKS01A3_MOTION_SENSOR_Init+0xa8>
      {
        return BSP_ERROR_NO_INIT;
 800606e:	f04f 33ff 	mov.w	r3, #4294967295
 8006072:	e09a      	b.n	80061aa <IKS01A3_MOTION_SENSOR_Init+0x1de>
      }
      if (MotionDrv[Instance]->GetCapabilities(MotionCompObj[Instance], (void *)&cap) != BSP_ERROR_NONE)
 8006074:	4a4f      	ldr	r2, [pc, #316]	; (80061b4 <IKS01A3_MOTION_SENSOR_Init+0x1e8>)
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800607c:	68db      	ldr	r3, [r3, #12]
 800607e:	494e      	ldr	r1, [pc, #312]	; (80061b8 <IKS01A3_MOTION_SENSOR_Init+0x1ec>)
 8006080:	687a      	ldr	r2, [r7, #4]
 8006082:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8006086:	f107 010c 	add.w	r1, r7, #12
 800608a:	4610      	mov	r0, r2
 800608c:	4798      	blx	r3
 800608e:	4603      	mov	r3, r0
 8006090:	2b00      	cmp	r3, #0
 8006092:	d002      	beq.n	800609a <IKS01A3_MOTION_SENSOR_Init+0xce>
      {
        return BSP_ERROR_UNKNOWN_COMPONENT;
 8006094:	f06f 0306 	mvn.w	r3, #6
 8006098:	e087      	b.n	80061aa <IKS01A3_MOTION_SENSOR_Init+0x1de>
      }
      if (cap.Acc == 1U)
 800609a:	7b3b      	ldrb	r3, [r7, #12]
 800609c:	2b01      	cmp	r3, #1
 800609e:	d103      	bne.n	80060a8 <IKS01A3_MOTION_SENSOR_Init+0xdc>
      {
        component_functions |= MOTION_ACCELERO;
 80060a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060a2:	f043 0302 	orr.w	r3, r3, #2
 80060a6:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      if (cap.Gyro == 1U)
 80060a8:	7b7b      	ldrb	r3, [r7, #13]
 80060aa:	2b01      	cmp	r3, #1
 80060ac:	d103      	bne.n	80060b6 <IKS01A3_MOTION_SENSOR_Init+0xea>
      {
        component_functions |= MOTION_GYRO;
 80060ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060b0:	f043 0301 	orr.w	r3, r3, #1
 80060b4:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      if (cap.Magneto == 1U)
 80060b6:	7bbb      	ldrb	r3, [r7, #14]
 80060b8:	2b01      	cmp	r3, #1
 80060ba:	d13c      	bne.n	8006136 <IKS01A3_MOTION_SENSOR_Init+0x16a>
      {
        component_functions |= MOTION_MAGNETO;
 80060bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060be:	f043 0304 	orr.w	r3, r3, #4
 80060c2:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      break;
 80060c4:	e037      	b.n	8006136 <IKS01A3_MOTION_SENSOR_Init+0x16a>
#endif

#if (USE_IKS01A3_MOTION_SENSOR_LIS2MDL_0 == 1)
    case IKS01A3_LIS2MDL_0:
      if (LIS2MDL_0_Probe(Functions) != BSP_ERROR_NONE)
 80060c6:	6838      	ldr	r0, [r7, #0]
 80060c8:	f000 fad4 	bl	8006674 <LIS2MDL_0_Probe>
 80060cc:	4603      	mov	r3, r0
 80060ce:	2b00      	cmp	r3, #0
 80060d0:	d002      	beq.n	80060d8 <IKS01A3_MOTION_SENSOR_Init+0x10c>
      {
        return BSP_ERROR_NO_INIT;
 80060d2:	f04f 33ff 	mov.w	r3, #4294967295
 80060d6:	e068      	b.n	80061aa <IKS01A3_MOTION_SENSOR_Init+0x1de>
      }
      if (MotionDrv[Instance]->GetCapabilities(MotionCompObj[Instance], (void *)&cap) != BSP_ERROR_NONE)
 80060d8:	4a36      	ldr	r2, [pc, #216]	; (80061b4 <IKS01A3_MOTION_SENSOR_Init+0x1e8>)
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80060e0:	68db      	ldr	r3, [r3, #12]
 80060e2:	4935      	ldr	r1, [pc, #212]	; (80061b8 <IKS01A3_MOTION_SENSOR_Init+0x1ec>)
 80060e4:	687a      	ldr	r2, [r7, #4]
 80060e6:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80060ea:	f107 010c 	add.w	r1, r7, #12
 80060ee:	4610      	mov	r0, r2
 80060f0:	4798      	blx	r3
 80060f2:	4603      	mov	r3, r0
 80060f4:	2b00      	cmp	r3, #0
 80060f6:	d002      	beq.n	80060fe <IKS01A3_MOTION_SENSOR_Init+0x132>
      {
        return BSP_ERROR_UNKNOWN_COMPONENT;
 80060f8:	f06f 0306 	mvn.w	r3, #6
 80060fc:	e055      	b.n	80061aa <IKS01A3_MOTION_SENSOR_Init+0x1de>
      }
      if (cap.Acc == 1U)
 80060fe:	7b3b      	ldrb	r3, [r7, #12]
 8006100:	2b01      	cmp	r3, #1
 8006102:	d103      	bne.n	800610c <IKS01A3_MOTION_SENSOR_Init+0x140>
      {
        component_functions |= MOTION_ACCELERO;
 8006104:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006106:	f043 0302 	orr.w	r3, r3, #2
 800610a:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      if (cap.Gyro == 1U)
 800610c:	7b7b      	ldrb	r3, [r7, #13]
 800610e:	2b01      	cmp	r3, #1
 8006110:	d103      	bne.n	800611a <IKS01A3_MOTION_SENSOR_Init+0x14e>
      {
        component_functions |= MOTION_GYRO;
 8006112:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006114:	f043 0301 	orr.w	r3, r3, #1
 8006118:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      if (cap.Magneto == 1U)
 800611a:	7bbb      	ldrb	r3, [r7, #14]
 800611c:	2b01      	cmp	r3, #1
 800611e:	d10c      	bne.n	800613a <IKS01A3_MOTION_SENSOR_Init+0x16e>
      {
        component_functions |= MOTION_MAGNETO;
 8006120:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006122:	f043 0304 	orr.w	r3, r3, #4
 8006126:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      break;
 8006128:	e007      	b.n	800613a <IKS01A3_MOTION_SENSOR_Init+0x16e>
      }
      break;
#endif

    default:
      ret = BSP_ERROR_WRONG_PARAM;
 800612a:	f06f 0301 	mvn.w	r3, #1
 800612e:	637b      	str	r3, [r7, #52]	; 0x34
      break;
 8006130:	e004      	b.n	800613c <IKS01A3_MOTION_SENSOR_Init+0x170>
      break;
 8006132:	bf00      	nop
 8006134:	e002      	b.n	800613c <IKS01A3_MOTION_SENSOR_Init+0x170>
      break;
 8006136:	bf00      	nop
 8006138:	e000      	b.n	800613c <IKS01A3_MOTION_SENSOR_Init+0x170>
      break;
 800613a:	bf00      	nop
  }

  if (ret != BSP_ERROR_NONE)
 800613c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800613e:	2b00      	cmp	r3, #0
 8006140:	d001      	beq.n	8006146 <IKS01A3_MOTION_SENSOR_Init+0x17a>
  {
    return ret;
 8006142:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006144:	e031      	b.n	80061aa <IKS01A3_MOTION_SENSOR_Init+0x1de>
  }

  for (i = 0; i < IKS01A3_MOTION_FUNCTIONS_NBR; i++)
 8006146:	2300      	movs	r3, #0
 8006148:	62fb      	str	r3, [r7, #44]	; 0x2c
 800614a:	e02a      	b.n	80061a2 <IKS01A3_MOTION_SENSOR_Init+0x1d6>
  {
    if (((Functions & function) == function) && ((component_functions & function) == function))
 800614c:	683a      	ldr	r2, [r7, #0]
 800614e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006150:	4013      	ands	r3, r2
 8006152:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006154:	429a      	cmp	r2, r3
 8006156:	d11e      	bne.n	8006196 <IKS01A3_MOTION_SENSOR_Init+0x1ca>
 8006158:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800615a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800615c:	4013      	ands	r3, r2
 800615e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006160:	429a      	cmp	r2, r3
 8006162:	d118      	bne.n	8006196 <IKS01A3_MOTION_SENSOR_Init+0x1ca>
    {
      if (MotionFuncDrv[Instance][FunctionIndex[function]]->Enable(MotionCompObj[Instance]) != BSP_ERROR_NONE)
 8006164:	4a15      	ldr	r2, [pc, #84]	; (80061bc <IKS01A3_MOTION_SENSOR_Init+0x1f0>)
 8006166:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006168:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800616c:	4814      	ldr	r0, [pc, #80]	; (80061c0 <IKS01A3_MOTION_SENSOR_Init+0x1f4>)
 800616e:	687a      	ldr	r2, [r7, #4]
 8006170:	4613      	mov	r3, r2
 8006172:	005b      	lsls	r3, r3, #1
 8006174:	4413      	add	r3, r2
 8006176:	440b      	add	r3, r1
 8006178:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	490e      	ldr	r1, [pc, #56]	; (80061b8 <IKS01A3_MOTION_SENSOR_Init+0x1ec>)
 8006180:	687a      	ldr	r2, [r7, #4]
 8006182:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8006186:	4610      	mov	r0, r2
 8006188:	4798      	blx	r3
 800618a:	4603      	mov	r3, r0
 800618c:	2b00      	cmp	r3, #0
 800618e:	d002      	beq.n	8006196 <IKS01A3_MOTION_SENSOR_Init+0x1ca>
      {
        return BSP_ERROR_COMPONENT_FAILURE;
 8006190:	f06f 0304 	mvn.w	r3, #4
 8006194:	e009      	b.n	80061aa <IKS01A3_MOTION_SENSOR_Init+0x1de>
      }
    }
    function = function << 1;
 8006196:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006198:	005b      	lsls	r3, r3, #1
 800619a:	633b      	str	r3, [r7, #48]	; 0x30
  for (i = 0; i < IKS01A3_MOTION_FUNCTIONS_NBR; i++)
 800619c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800619e:	3301      	adds	r3, #1
 80061a0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80061a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061a4:	2b02      	cmp	r3, #2
 80061a6:	d9d1      	bls.n	800614c <IKS01A3_MOTION_SENSOR_Init+0x180>
  }

  return ret;
 80061a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80061aa:	4618      	mov	r0, r3
 80061ac:	3738      	adds	r7, #56	; 0x38
 80061ae:	46bd      	mov	sp, r7
 80061b0:	bd80      	pop	{r7, pc}
 80061b2:	bf00      	nop
 80061b4:	20002524 	.word	0x20002524
 80061b8:	200024f4 	.word	0x200024f4
 80061bc:	200000c8 	.word	0x200000c8
 80061c0:	20002500 	.word	0x20002500

080061c4 <IKS01A3_MOTION_SENSOR_DeInit>:
  * @brief  Deinitialize Motion sensor
  * @param  Instance Motion sensor instance
  * @retval BSP status
  */
int32_t IKS01A3_MOTION_SENSOR_DeInit(uint32_t Instance)
{
 80061c4:	b580      	push	{r7, lr}
 80061c6:	b084      	sub	sp, #16
 80061c8:	af00      	add	r7, sp, #0
 80061ca:	6078      	str	r0, [r7, #4]
  int32_t ret;

  if (Instance >= IKS01A3_MOTION_INSTANCES_NBR)
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	2b02      	cmp	r3, #2
 80061d0:	d903      	bls.n	80061da <IKS01A3_MOTION_SENSOR_DeInit+0x16>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 80061d2:	f06f 0301 	mvn.w	r3, #1
 80061d6:	60fb      	str	r3, [r7, #12]
 80061d8:	e013      	b.n	8006202 <IKS01A3_MOTION_SENSOR_DeInit+0x3e>
  }
  else if (MotionDrv[Instance]->DeInit(MotionCompObj[Instance]) != BSP_ERROR_NONE)
 80061da:	4a0c      	ldr	r2, [pc, #48]	; (800620c <IKS01A3_MOTION_SENSOR_DeInit+0x48>)
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80061e2:	685b      	ldr	r3, [r3, #4]
 80061e4:	490a      	ldr	r1, [pc, #40]	; (8006210 <IKS01A3_MOTION_SENSOR_DeInit+0x4c>)
 80061e6:	687a      	ldr	r2, [r7, #4]
 80061e8:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80061ec:	4610      	mov	r0, r2
 80061ee:	4798      	blx	r3
 80061f0:	4603      	mov	r3, r0
 80061f2:	2b00      	cmp	r3, #0
 80061f4:	d003      	beq.n	80061fe <IKS01A3_MOTION_SENSOR_DeInit+0x3a>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 80061f6:	f06f 0304 	mvn.w	r3, #4
 80061fa:	60fb      	str	r3, [r7, #12]
 80061fc:	e001      	b.n	8006202 <IKS01A3_MOTION_SENSOR_DeInit+0x3e>
  }
  else
  {
    ret = BSP_ERROR_NONE;
 80061fe:	2300      	movs	r3, #0
 8006200:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8006202:	68fb      	ldr	r3, [r7, #12]
}
 8006204:	4618      	mov	r0, r3
 8006206:	3710      	adds	r7, #16
 8006208:	46bd      	mov	sp, r7
 800620a:	bd80      	pop	{r7, pc}
 800620c:	20002524 	.word	0x20002524
 8006210:	200024f4 	.word	0x200024f4

08006214 <IKS01A3_MOTION_SENSOR_Enable>:
  *         - MOTION_ACCELERO for instance 1
  *         - MOTION_MAGNETO for instance 2
  * @retval BSP status
  */
int32_t IKS01A3_MOTION_SENSOR_Enable(uint32_t Instance, uint32_t Function)
{
 8006214:	b580      	push	{r7, lr}
 8006216:	b084      	sub	sp, #16
 8006218:	af00      	add	r7, sp, #0
 800621a:	6078      	str	r0, [r7, #4]
 800621c:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (Instance >= IKS01A3_MOTION_INSTANCES_NBR)
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	2b02      	cmp	r3, #2
 8006222:	d903      	bls.n	800622c <IKS01A3_MOTION_SENSOR_Enable+0x18>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8006224:	f06f 0301 	mvn.w	r3, #1
 8006228:	60fb      	str	r3, [r7, #12]
 800622a:	e028      	b.n	800627e <IKS01A3_MOTION_SENSOR_Enable+0x6a>
  }
  else
  {
    if ((MotionCtx[Instance].Functions & Function) == Function)
 800622c:	4a16      	ldr	r2, [pc, #88]	; (8006288 <IKS01A3_MOTION_SENSOR_Enable+0x74>)
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8006234:	683b      	ldr	r3, [r7, #0]
 8006236:	4013      	ands	r3, r2
 8006238:	683a      	ldr	r2, [r7, #0]
 800623a:	429a      	cmp	r2, r3
 800623c:	d11c      	bne.n	8006278 <IKS01A3_MOTION_SENSOR_Enable+0x64>
    {
      if (MotionFuncDrv[Instance][FunctionIndex[Function]]->Enable(MotionCompObj[Instance]) != BSP_ERROR_NONE)
 800623e:	4a13      	ldr	r2, [pc, #76]	; (800628c <IKS01A3_MOTION_SENSOR_Enable+0x78>)
 8006240:	683b      	ldr	r3, [r7, #0]
 8006242:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8006246:	4812      	ldr	r0, [pc, #72]	; (8006290 <IKS01A3_MOTION_SENSOR_Enable+0x7c>)
 8006248:	687a      	ldr	r2, [r7, #4]
 800624a:	4613      	mov	r3, r2
 800624c:	005b      	lsls	r3, r3, #1
 800624e:	4413      	add	r3, r2
 8006250:	440b      	add	r3, r1
 8006252:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	490e      	ldr	r1, [pc, #56]	; (8006294 <IKS01A3_MOTION_SENSOR_Enable+0x80>)
 800625a:	687a      	ldr	r2, [r7, #4]
 800625c:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8006260:	4610      	mov	r0, r2
 8006262:	4798      	blx	r3
 8006264:	4603      	mov	r3, r0
 8006266:	2b00      	cmp	r3, #0
 8006268:	d003      	beq.n	8006272 <IKS01A3_MOTION_SENSOR_Enable+0x5e>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800626a:	f06f 0304 	mvn.w	r3, #4
 800626e:	60fb      	str	r3, [r7, #12]
 8006270:	e005      	b.n	800627e <IKS01A3_MOTION_SENSOR_Enable+0x6a>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 8006272:	2300      	movs	r3, #0
 8006274:	60fb      	str	r3, [r7, #12]
 8006276:	e002      	b.n	800627e <IKS01A3_MOTION_SENSOR_Enable+0x6a>
      }
    }
    else
    {
      ret = BSP_ERROR_WRONG_PARAM;
 8006278:	f06f 0301 	mvn.w	r3, #1
 800627c:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 800627e:	68fb      	ldr	r3, [r7, #12]
}
 8006280:	4618      	mov	r0, r3
 8006282:	3710      	adds	r7, #16
 8006284:	46bd      	mov	sp, r7
 8006286:	bd80      	pop	{r7, pc}
 8006288:	20002530 	.word	0x20002530
 800628c:	200000c8 	.word	0x200000c8
 8006290:	20002500 	.word	0x20002500
 8006294:	200024f4 	.word	0x200024f4

08006298 <IKS01A3_MOTION_SENSOR_Disable>:
  *         - MOTION_ACCELERO for instance 1
  *         - MOTION_MAGNETO for instance 2
  * @retval BSP status
  */
int32_t IKS01A3_MOTION_SENSOR_Disable(uint32_t Instance, uint32_t Function)
{
 8006298:	b580      	push	{r7, lr}
 800629a:	b084      	sub	sp, #16
 800629c:	af00      	add	r7, sp, #0
 800629e:	6078      	str	r0, [r7, #4]
 80062a0:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (Instance >= IKS01A3_MOTION_INSTANCES_NBR)
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	2b02      	cmp	r3, #2
 80062a6:	d903      	bls.n	80062b0 <IKS01A3_MOTION_SENSOR_Disable+0x18>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 80062a8:	f06f 0301 	mvn.w	r3, #1
 80062ac:	60fb      	str	r3, [r7, #12]
 80062ae:	e028      	b.n	8006302 <IKS01A3_MOTION_SENSOR_Disable+0x6a>
  }
  else
  {
    if ((MotionCtx[Instance].Functions & Function) == Function)
 80062b0:	4a16      	ldr	r2, [pc, #88]	; (800630c <IKS01A3_MOTION_SENSOR_Disable+0x74>)
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80062b8:	683b      	ldr	r3, [r7, #0]
 80062ba:	4013      	ands	r3, r2
 80062bc:	683a      	ldr	r2, [r7, #0]
 80062be:	429a      	cmp	r2, r3
 80062c0:	d11c      	bne.n	80062fc <IKS01A3_MOTION_SENSOR_Disable+0x64>
    {
      if (MotionFuncDrv[Instance][FunctionIndex[Function]]->Disable(MotionCompObj[Instance]) != BSP_ERROR_NONE)
 80062c2:	4a13      	ldr	r2, [pc, #76]	; (8006310 <IKS01A3_MOTION_SENSOR_Disable+0x78>)
 80062c4:	683b      	ldr	r3, [r7, #0]
 80062c6:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80062ca:	4812      	ldr	r0, [pc, #72]	; (8006314 <IKS01A3_MOTION_SENSOR_Disable+0x7c>)
 80062cc:	687a      	ldr	r2, [r7, #4]
 80062ce:	4613      	mov	r3, r2
 80062d0:	005b      	lsls	r3, r3, #1
 80062d2:	4413      	add	r3, r2
 80062d4:	440b      	add	r3, r1
 80062d6:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80062da:	685b      	ldr	r3, [r3, #4]
 80062dc:	490e      	ldr	r1, [pc, #56]	; (8006318 <IKS01A3_MOTION_SENSOR_Disable+0x80>)
 80062de:	687a      	ldr	r2, [r7, #4]
 80062e0:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80062e4:	4610      	mov	r0, r2
 80062e6:	4798      	blx	r3
 80062e8:	4603      	mov	r3, r0
 80062ea:	2b00      	cmp	r3, #0
 80062ec:	d003      	beq.n	80062f6 <IKS01A3_MOTION_SENSOR_Disable+0x5e>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 80062ee:	f06f 0304 	mvn.w	r3, #4
 80062f2:	60fb      	str	r3, [r7, #12]
 80062f4:	e005      	b.n	8006302 <IKS01A3_MOTION_SENSOR_Disable+0x6a>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 80062f6:	2300      	movs	r3, #0
 80062f8:	60fb      	str	r3, [r7, #12]
 80062fa:	e002      	b.n	8006302 <IKS01A3_MOTION_SENSOR_Disable+0x6a>
      }
    }
    else
    {
      ret = BSP_ERROR_WRONG_PARAM;
 80062fc:	f06f 0301 	mvn.w	r3, #1
 8006300:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 8006302:	68fb      	ldr	r3, [r7, #12]
}
 8006304:	4618      	mov	r0, r3
 8006306:	3710      	adds	r7, #16
 8006308:	46bd      	mov	sp, r7
 800630a:	bd80      	pop	{r7, pc}
 800630c:	20002530 	.word	0x20002530
 8006310:	200000c8 	.word	0x200000c8
 8006314:	20002500 	.word	0x20002500
 8006318:	200024f4 	.word	0x200024f4

0800631c <IKS01A3_MOTION_SENSOR_GetAxes>:
  *         - MOTION_MAGNETO for instance 2
  * @param  Axes pointer to axes data structure
  * @retval BSP status
  */
int32_t IKS01A3_MOTION_SENSOR_GetAxes(uint32_t Instance, uint32_t Function, IKS01A3_MOTION_SENSOR_Axes_t *Axes)
{
 800631c:	b580      	push	{r7, lr}
 800631e:	b086      	sub	sp, #24
 8006320:	af00      	add	r7, sp, #0
 8006322:	60f8      	str	r0, [r7, #12]
 8006324:	60b9      	str	r1, [r7, #8]
 8006326:	607a      	str	r2, [r7, #4]
  int32_t ret;

  if (Instance >= IKS01A3_MOTION_INSTANCES_NBR)
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	2b02      	cmp	r3, #2
 800632c:	d903      	bls.n	8006336 <IKS01A3_MOTION_SENSOR_GetAxes+0x1a>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 800632e:	f06f 0301 	mvn.w	r3, #1
 8006332:	617b      	str	r3, [r7, #20]
 8006334:	e029      	b.n	800638a <IKS01A3_MOTION_SENSOR_GetAxes+0x6e>
  }
  else
  {
    if ((MotionCtx[Instance].Functions & Function) == Function)
 8006336:	4a17      	ldr	r2, [pc, #92]	; (8006394 <IKS01A3_MOTION_SENSOR_GetAxes+0x78>)
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800633e:	68bb      	ldr	r3, [r7, #8]
 8006340:	4013      	ands	r3, r2
 8006342:	68ba      	ldr	r2, [r7, #8]
 8006344:	429a      	cmp	r2, r3
 8006346:	d11d      	bne.n	8006384 <IKS01A3_MOTION_SENSOR_GetAxes+0x68>
    {
      if (MotionFuncDrv[Instance][FunctionIndex[Function]]->GetAxes(MotionCompObj[Instance], Axes) != BSP_ERROR_NONE)
 8006348:	4a13      	ldr	r2, [pc, #76]	; (8006398 <IKS01A3_MOTION_SENSOR_GetAxes+0x7c>)
 800634a:	68bb      	ldr	r3, [r7, #8]
 800634c:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8006350:	4812      	ldr	r0, [pc, #72]	; (800639c <IKS01A3_MOTION_SENSOR_GetAxes+0x80>)
 8006352:	68fa      	ldr	r2, [r7, #12]
 8006354:	4613      	mov	r3, r2
 8006356:	005b      	lsls	r3, r3, #1
 8006358:	4413      	add	r3, r2
 800635a:	440b      	add	r3, r1
 800635c:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8006360:	69db      	ldr	r3, [r3, #28]
 8006362:	490f      	ldr	r1, [pc, #60]	; (80063a0 <IKS01A3_MOTION_SENSOR_GetAxes+0x84>)
 8006364:	68fa      	ldr	r2, [r7, #12]
 8006366:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800636a:	6879      	ldr	r1, [r7, #4]
 800636c:	4610      	mov	r0, r2
 800636e:	4798      	blx	r3
 8006370:	4603      	mov	r3, r0
 8006372:	2b00      	cmp	r3, #0
 8006374:	d003      	beq.n	800637e <IKS01A3_MOTION_SENSOR_GetAxes+0x62>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8006376:	f06f 0304 	mvn.w	r3, #4
 800637a:	617b      	str	r3, [r7, #20]
 800637c:	e005      	b.n	800638a <IKS01A3_MOTION_SENSOR_GetAxes+0x6e>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 800637e:	2300      	movs	r3, #0
 8006380:	617b      	str	r3, [r7, #20]
 8006382:	e002      	b.n	800638a <IKS01A3_MOTION_SENSOR_GetAxes+0x6e>
      }
    }
    else
    {
      ret = BSP_ERROR_WRONG_PARAM;
 8006384:	f06f 0301 	mvn.w	r3, #1
 8006388:	617b      	str	r3, [r7, #20]
    }
  }

  return ret;
 800638a:	697b      	ldr	r3, [r7, #20]
}
 800638c:	4618      	mov	r0, r3
 800638e:	3718      	adds	r7, #24
 8006390:	46bd      	mov	sp, r7
 8006392:	bd80      	pop	{r7, pc}
 8006394:	20002530 	.word	0x20002530
 8006398:	200000c8 	.word	0x200000c8
 800639c:	20002500 	.word	0x20002500
 80063a0:	200024f4 	.word	0x200024f4

080063a4 <LSM6DSO_0_Probe>:
/**
  * @brief  Register Bus IOs for instance 0 if component ID is OK
  * @retval BSP status
  */
static int32_t LSM6DSO_0_Probe(uint32_t Functions)
{
 80063a4:	b580      	push	{r7, lr}
 80063a6:	b094      	sub	sp, #80	; 0x50
 80063a8:	af00      	add	r7, sp, #0
 80063aa:	6078      	str	r0, [r7, #4]
  LSM6DSO_IO_t            io_ctx;
  uint8_t                 id;
  static LSM6DSO_Object_t lsm6dso_obj_0;
  LSM6DSO_Capabilities_t  cap;
  int32_t ret = BSP_ERROR_NONE;
 80063ac:	2300      	movs	r3, #0
 80063ae:	64fb      	str	r3, [r7, #76]	; 0x4c

  /* Configure the accelero driver */
  io_ctx.BusType     = LSM6DSO_I2C_BUS; /* I2C */
 80063b0:	2300      	movs	r3, #0
 80063b2:	637b      	str	r3, [r7, #52]	; 0x34
  io_ctx.Address     = LSM6DSO_I2C_ADD_H;
 80063b4:	23d7      	movs	r3, #215	; 0xd7
 80063b6:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  io_ctx.Init        = IKS01A3_I2C_Init;
 80063ba:	4b4b      	ldr	r3, [pc, #300]	; (80064e8 <LSM6DSO_0_Probe+0x144>)
 80063bc:	62fb      	str	r3, [r7, #44]	; 0x2c
  io_ctx.DeInit      = IKS01A3_I2C_DeInit;
 80063be:	4b4b      	ldr	r3, [pc, #300]	; (80064ec <LSM6DSO_0_Probe+0x148>)
 80063c0:	633b      	str	r3, [r7, #48]	; 0x30
  io_ctx.ReadReg     = IKS01A3_I2C_ReadReg;
 80063c2:	4b4b      	ldr	r3, [pc, #300]	; (80064f0 <LSM6DSO_0_Probe+0x14c>)
 80063c4:	643b      	str	r3, [r7, #64]	; 0x40
  io_ctx.WriteReg    = IKS01A3_I2C_WriteReg;
 80063c6:	4b4b      	ldr	r3, [pc, #300]	; (80064f4 <LSM6DSO_0_Probe+0x150>)
 80063c8:	63fb      	str	r3, [r7, #60]	; 0x3c
  io_ctx.GetTick     = IKS01A3_GetTick;
 80063ca:	4b4b      	ldr	r3, [pc, #300]	; (80064f8 <LSM6DSO_0_Probe+0x154>)
 80063cc:	647b      	str	r3, [r7, #68]	; 0x44
  io_ctx.Delay       = IKS01A3_Delay;
 80063ce:	4b4b      	ldr	r3, [pc, #300]	; (80064fc <LSM6DSO_0_Probe+0x158>)
 80063d0:	64bb      	str	r3, [r7, #72]	; 0x48

  if (LSM6DSO_RegisterBusIO(&lsm6dso_obj_0, &io_ctx) != LSM6DSO_OK)
 80063d2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80063d6:	4619      	mov	r1, r3
 80063d8:	4849      	ldr	r0, [pc, #292]	; (8006500 <LSM6DSO_0_Probe+0x15c>)
 80063da:	f7fd fe17 	bl	800400c <LSM6DSO_RegisterBusIO>
 80063de:	4603      	mov	r3, r0
 80063e0:	2b00      	cmp	r3, #0
 80063e2:	d003      	beq.n	80063ec <LSM6DSO_0_Probe+0x48>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 80063e4:	f06f 0306 	mvn.w	r3, #6
 80063e8:	64fb      	str	r3, [r7, #76]	; 0x4c
 80063ea:	e077      	b.n	80064dc <LSM6DSO_0_Probe+0x138>
  }
  else if (LSM6DSO_ReadID(&lsm6dso_obj_0, &id) != LSM6DSO_OK)
 80063ec:	f107 032b 	add.w	r3, r7, #43	; 0x2b
 80063f0:	4619      	mov	r1, r3
 80063f2:	4843      	ldr	r0, [pc, #268]	; (8006500 <LSM6DSO_0_Probe+0x15c>)
 80063f4:	f7fd ff10 	bl	8004218 <LSM6DSO_ReadID>
 80063f8:	4603      	mov	r3, r0
 80063fa:	2b00      	cmp	r3, #0
 80063fc:	d003      	beq.n	8006406 <LSM6DSO_0_Probe+0x62>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 80063fe:	f06f 0306 	mvn.w	r3, #6
 8006402:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006404:	e06a      	b.n	80064dc <LSM6DSO_0_Probe+0x138>
  }
  else if (id != LSM6DSO_ID)
 8006406:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800640a:	2b6c      	cmp	r3, #108	; 0x6c
 800640c:	d003      	beq.n	8006416 <LSM6DSO_0_Probe+0x72>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800640e:	f06f 0306 	mvn.w	r3, #6
 8006412:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006414:	e062      	b.n	80064dc <LSM6DSO_0_Probe+0x138>
  }
  else
  {
    (void)LSM6DSO_GetCapabilities(&lsm6dso_obj_0, &cap);
 8006416:	f107 030c 	add.w	r3, r7, #12
 800641a:	4619      	mov	r1, r3
 800641c:	4838      	ldr	r0, [pc, #224]	; (8006500 <LSM6DSO_0_Probe+0x15c>)
 800641e:	f7fd ff11 	bl	8004244 <LSM6DSO_GetCapabilities>
    MotionCtx[IKS01A3_LSM6DSO_0].Functions = ((uint32_t)cap.Gyro) | ((uint32_t)cap.Acc << 1) | ((uint32_t)cap.Magneto << 2);
 8006422:	7b7b      	ldrb	r3, [r7, #13]
 8006424:	461a      	mov	r2, r3
 8006426:	7b3b      	ldrb	r3, [r7, #12]
 8006428:	005b      	lsls	r3, r3, #1
 800642a:	431a      	orrs	r2, r3
 800642c:	7bbb      	ldrb	r3, [r7, #14]
 800642e:	009b      	lsls	r3, r3, #2
 8006430:	4313      	orrs	r3, r2
 8006432:	4a34      	ldr	r2, [pc, #208]	; (8006504 <LSM6DSO_0_Probe+0x160>)
 8006434:	6013      	str	r3, [r2, #0]

    MotionCompObj[IKS01A3_LSM6DSO_0] = &lsm6dso_obj_0;
 8006436:	4b34      	ldr	r3, [pc, #208]	; (8006508 <LSM6DSO_0_Probe+0x164>)
 8006438:	4a31      	ldr	r2, [pc, #196]	; (8006500 <LSM6DSO_0_Probe+0x15c>)
 800643a:	601a      	str	r2, [r3, #0]
    /* The second cast (void *) is added to bypass Misra R11.3 rule */
    MotionDrv[IKS01A3_LSM6DSO_0] = (MOTION_SENSOR_CommonDrv_t *)(void *)&LSM6DSO_COMMON_Driver;
 800643c:	4b33      	ldr	r3, [pc, #204]	; (800650c <LSM6DSO_0_Probe+0x168>)
 800643e:	4a34      	ldr	r2, [pc, #208]	; (8006510 <LSM6DSO_0_Probe+0x16c>)
 8006440:	601a      	str	r2, [r3, #0]

    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_GYRO) == MOTION_GYRO) && (cap.Gyro == 1U))
 8006442:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006444:	2b00      	cmp	r3, #0
 8006446:	d11d      	bne.n	8006484 <LSM6DSO_0_Probe+0xe0>
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	f003 0301 	and.w	r3, r3, #1
 800644e:	2b00      	cmp	r3, #0
 8006450:	d018      	beq.n	8006484 <LSM6DSO_0_Probe+0xe0>
 8006452:	7b7b      	ldrb	r3, [r7, #13]
 8006454:	2b01      	cmp	r3, #1
 8006456:	d115      	bne.n	8006484 <LSM6DSO_0_Probe+0xe0>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      MotionFuncDrv[IKS01A3_LSM6DSO_0][FunctionIndex[MOTION_GYRO]] = (MOTION_SENSOR_FuncDrv_t *)(void *)&LSM6DSO_GYRO_Driver;
 8006458:	4b2e      	ldr	r3, [pc, #184]	; (8006514 <LSM6DSO_0_Probe+0x170>)
 800645a:	685b      	ldr	r3, [r3, #4]
 800645c:	4a2e      	ldr	r2, [pc, #184]	; (8006518 <LSM6DSO_0_Probe+0x174>)
 800645e:	492f      	ldr	r1, [pc, #188]	; (800651c <LSM6DSO_0_Probe+0x178>)
 8006460:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

      if (MotionDrv[IKS01A3_LSM6DSO_0]->Init(MotionCompObj[IKS01A3_LSM6DSO_0]) != LSM6DSO_OK)
 8006464:	4b29      	ldr	r3, [pc, #164]	; (800650c <LSM6DSO_0_Probe+0x168>)
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	4a27      	ldr	r2, [pc, #156]	; (8006508 <LSM6DSO_0_Probe+0x164>)
 800646c:	6812      	ldr	r2, [r2, #0]
 800646e:	4610      	mov	r0, r2
 8006470:	4798      	blx	r3
 8006472:	4603      	mov	r3, r0
 8006474:	2b00      	cmp	r3, #0
 8006476:	d003      	beq.n	8006480 <LSM6DSO_0_Probe+0xdc>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8006478:	f06f 0304 	mvn.w	r3, #4
 800647c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800647e:	e001      	b.n	8006484 <LSM6DSO_0_Probe+0xe0>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 8006480:	2300      	movs	r3, #0
 8006482:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_ACCELERO) == MOTION_ACCELERO) && (cap.Acc == 1U))
 8006484:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006486:	2b00      	cmp	r3, #0
 8006488:	d11d      	bne.n	80064c6 <LSM6DSO_0_Probe+0x122>
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	f003 0302 	and.w	r3, r3, #2
 8006490:	2b00      	cmp	r3, #0
 8006492:	d018      	beq.n	80064c6 <LSM6DSO_0_Probe+0x122>
 8006494:	7b3b      	ldrb	r3, [r7, #12]
 8006496:	2b01      	cmp	r3, #1
 8006498:	d115      	bne.n	80064c6 <LSM6DSO_0_Probe+0x122>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      MotionFuncDrv[IKS01A3_LSM6DSO_0][FunctionIndex[MOTION_ACCELERO]] = (MOTION_SENSOR_FuncDrv_t *)(
 800649a:	4b1e      	ldr	r3, [pc, #120]	; (8006514 <LSM6DSO_0_Probe+0x170>)
 800649c:	689b      	ldr	r3, [r3, #8]
 800649e:	4a1e      	ldr	r2, [pc, #120]	; (8006518 <LSM6DSO_0_Probe+0x174>)
 80064a0:	491f      	ldr	r1, [pc, #124]	; (8006520 <LSM6DSO_0_Probe+0x17c>)
 80064a2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                                                                           void *)&LSM6DSO_ACC_Driver;

      if (MotionDrv[IKS01A3_LSM6DSO_0]->Init(MotionCompObj[IKS01A3_LSM6DSO_0]) != LSM6DSO_OK)
 80064a6:	4b19      	ldr	r3, [pc, #100]	; (800650c <LSM6DSO_0_Probe+0x168>)
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	4a16      	ldr	r2, [pc, #88]	; (8006508 <LSM6DSO_0_Probe+0x164>)
 80064ae:	6812      	ldr	r2, [r2, #0]
 80064b0:	4610      	mov	r0, r2
 80064b2:	4798      	blx	r3
 80064b4:	4603      	mov	r3, r0
 80064b6:	2b00      	cmp	r3, #0
 80064b8:	d003      	beq.n	80064c2 <LSM6DSO_0_Probe+0x11e>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 80064ba:	f06f 0304 	mvn.w	r3, #4
 80064be:	64fb      	str	r3, [r7, #76]	; 0x4c
 80064c0:	e001      	b.n	80064c6 <LSM6DSO_0_Probe+0x122>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 80064c2:	2300      	movs	r3, #0
 80064c4:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_MAGNETO) == MOTION_MAGNETO))
 80064c6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80064c8:	2b00      	cmp	r3, #0
 80064ca:	d107      	bne.n	80064dc <LSM6DSO_0_Probe+0x138>
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	f003 0304 	and.w	r3, r3, #4
 80064d2:	2b00      	cmp	r3, #0
 80064d4:	d002      	beq.n	80064dc <LSM6DSO_0_Probe+0x138>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 80064d6:	f06f 0304 	mvn.w	r3, #4
 80064da:	64fb      	str	r3, [r7, #76]	; 0x4c
    }
  }
  return ret;
 80064dc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
}
 80064de:	4618      	mov	r0, r3
 80064e0:	3750      	adds	r7, #80	; 0x50
 80064e2:	46bd      	mov	sp, r7
 80064e4:	bd80      	pop	{r7, pc}
 80064e6:	bf00      	nop
 80064e8:	080015b5 	.word	0x080015b5
 80064ec:	08001619 	.word	0x08001619
 80064f0:	080016cd 	.word	0x080016cd
 80064f4:	08001669 	.word	0x08001669
 80064f8:	08001731 	.word	0x08001731
 80064fc:	080068a9 	.word	0x080068a9
 8006500:	2000253c 	.word	0x2000253c
 8006504:	20002530 	.word	0x20002530
 8006508:	200024f4 	.word	0x200024f4
 800650c:	20002524 	.word	0x20002524
 8006510:	20000070 	.word	0x20000070
 8006514:	200000c8 	.word	0x200000c8
 8006518:	20002500 	.word	0x20002500
 800651c:	200000a4 	.word	0x200000a4
 8006520:	20000080 	.word	0x20000080

08006524 <LIS2DW12_0_Probe>:
/**
  * @brief  Register Bus IOs for instance 1 if component ID is OK
  * @retval BSP status
  */
static int32_t LIS2DW12_0_Probe(uint32_t Functions)
{
 8006524:	b580      	push	{r7, lr}
 8006526:	b094      	sub	sp, #80	; 0x50
 8006528:	af00      	add	r7, sp, #0
 800652a:	6078      	str	r0, [r7, #4]
  LIS2DW12_IO_t            io_ctx;
  uint8_t                  id;
  static LIS2DW12_Object_t lis2dw12_obj_0;
  LIS2DW12_Capabilities_t  cap;
  int32_t ret = BSP_ERROR_NONE;
 800652c:	2300      	movs	r3, #0
 800652e:	64fb      	str	r3, [r7, #76]	; 0x4c

  /* Configure the accelero driver */
  io_ctx.BusType     = LIS2DW12_I2C_BUS; /* I2C */
 8006530:	2300      	movs	r3, #0
 8006532:	637b      	str	r3, [r7, #52]	; 0x34
  io_ctx.Address     = LIS2DW12_I2C_ADD_H;
 8006534:	2333      	movs	r3, #51	; 0x33
 8006536:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  io_ctx.Init        = IKS01A3_I2C_Init;
 800653a:	4b40      	ldr	r3, [pc, #256]	; (800663c <LIS2DW12_0_Probe+0x118>)
 800653c:	62fb      	str	r3, [r7, #44]	; 0x2c
  io_ctx.DeInit      = IKS01A3_I2C_DeInit;
 800653e:	4b40      	ldr	r3, [pc, #256]	; (8006640 <LIS2DW12_0_Probe+0x11c>)
 8006540:	633b      	str	r3, [r7, #48]	; 0x30
  io_ctx.ReadReg     = IKS01A3_I2C_ReadReg;
 8006542:	4b40      	ldr	r3, [pc, #256]	; (8006644 <LIS2DW12_0_Probe+0x120>)
 8006544:	643b      	str	r3, [r7, #64]	; 0x40
  io_ctx.WriteReg    = IKS01A3_I2C_WriteReg;
 8006546:	4b40      	ldr	r3, [pc, #256]	; (8006648 <LIS2DW12_0_Probe+0x124>)
 8006548:	63fb      	str	r3, [r7, #60]	; 0x3c
  io_ctx.GetTick     = IKS01A3_GetTick;
 800654a:	4b40      	ldr	r3, [pc, #256]	; (800664c <LIS2DW12_0_Probe+0x128>)
 800654c:	647b      	str	r3, [r7, #68]	; 0x44
  io_ctx.Delay       = IKS01A3_Delay;
 800654e:	4b40      	ldr	r3, [pc, #256]	; (8006650 <LIS2DW12_0_Probe+0x12c>)
 8006550:	64bb      	str	r3, [r7, #72]	; 0x48

  if (LIS2DW12_RegisterBusIO(&lis2dw12_obj_0, &io_ctx) != LIS2DW12_OK)
 8006552:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8006556:	4619      	mov	r1, r3
 8006558:	483e      	ldr	r0, [pc, #248]	; (8006654 <LIS2DW12_0_Probe+0x130>)
 800655a:	f7fb f9fd 	bl	8001958 <LIS2DW12_RegisterBusIO>
 800655e:	4603      	mov	r3, r0
 8006560:	2b00      	cmp	r3, #0
 8006562:	d003      	beq.n	800656c <LIS2DW12_0_Probe+0x48>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8006564:	f06f 0306 	mvn.w	r3, #6
 8006568:	64fb      	str	r3, [r7, #76]	; 0x4c
 800656a:	e062      	b.n	8006632 <LIS2DW12_0_Probe+0x10e>
  }
  else if (LIS2DW12_ReadID(&lis2dw12_obj_0, &id) != LIS2DW12_OK)
 800656c:	f107 032b 	add.w	r3, r7, #43	; 0x2b
 8006570:	4619      	mov	r1, r3
 8006572:	4838      	ldr	r0, [pc, #224]	; (8006654 <LIS2DW12_0_Probe+0x130>)
 8006574:	f7fb fade 	bl	8001b34 <LIS2DW12_ReadID>
 8006578:	4603      	mov	r3, r0
 800657a:	2b00      	cmp	r3, #0
 800657c:	d003      	beq.n	8006586 <LIS2DW12_0_Probe+0x62>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800657e:	f06f 0306 	mvn.w	r3, #6
 8006582:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006584:	e055      	b.n	8006632 <LIS2DW12_0_Probe+0x10e>
  }
  else if (id != LIS2DW12_ID)
 8006586:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800658a:	2b44      	cmp	r3, #68	; 0x44
 800658c:	d003      	beq.n	8006596 <LIS2DW12_0_Probe+0x72>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800658e:	f06f 0306 	mvn.w	r3, #6
 8006592:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006594:	e04d      	b.n	8006632 <LIS2DW12_0_Probe+0x10e>
  }
  else
  {
    (void)LIS2DW12_GetCapabilities(&lis2dw12_obj_0, &cap);
 8006596:	f107 030c 	add.w	r3, r7, #12
 800659a:	4619      	mov	r1, r3
 800659c:	482d      	ldr	r0, [pc, #180]	; (8006654 <LIS2DW12_0_Probe+0x130>)
 800659e:	f7fb fadf 	bl	8001b60 <LIS2DW12_GetCapabilities>
    MotionCtx[IKS01A3_LIS2DW12_0].Functions = ((uint32_t)cap.Gyro) | ((uint32_t)cap.Acc << 1) | ((uint32_t)cap.Magneto << 2);
 80065a2:	7b7b      	ldrb	r3, [r7, #13]
 80065a4:	461a      	mov	r2, r3
 80065a6:	7b3b      	ldrb	r3, [r7, #12]
 80065a8:	005b      	lsls	r3, r3, #1
 80065aa:	431a      	orrs	r2, r3
 80065ac:	7bbb      	ldrb	r3, [r7, #14]
 80065ae:	009b      	lsls	r3, r3, #2
 80065b0:	4313      	orrs	r3, r2
 80065b2:	4a29      	ldr	r2, [pc, #164]	; (8006658 <LIS2DW12_0_Probe+0x134>)
 80065b4:	6053      	str	r3, [r2, #4]

    MotionCompObj[IKS01A3_LIS2DW12_0] = &lis2dw12_obj_0;
 80065b6:	4b29      	ldr	r3, [pc, #164]	; (800665c <LIS2DW12_0_Probe+0x138>)
 80065b8:	4a26      	ldr	r2, [pc, #152]	; (8006654 <LIS2DW12_0_Probe+0x130>)
 80065ba:	605a      	str	r2, [r3, #4]
    /* The second cast (void *) is added to bypass Misra R11.3 rule */
    MotionDrv[IKS01A3_LIS2DW12_0] = (MOTION_SENSOR_CommonDrv_t *)(void *)&LIS2DW12_COMMON_Driver;
 80065bc:	4b28      	ldr	r3, [pc, #160]	; (8006660 <LIS2DW12_0_Probe+0x13c>)
 80065be:	4a29      	ldr	r2, [pc, #164]	; (8006664 <LIS2DW12_0_Probe+0x140>)
 80065c0:	605a      	str	r2, [r3, #4]

    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_ACCELERO) == MOTION_ACCELERO) && (cap.Acc == 1U))
 80065c2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80065c4:	2b00      	cmp	r3, #0
 80065c6:	d11e      	bne.n	8006606 <LIS2DW12_0_Probe+0xe2>
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	f003 0302 	and.w	r3, r3, #2
 80065ce:	2b00      	cmp	r3, #0
 80065d0:	d019      	beq.n	8006606 <LIS2DW12_0_Probe+0xe2>
 80065d2:	7b3b      	ldrb	r3, [r7, #12]
 80065d4:	2b01      	cmp	r3, #1
 80065d6:	d116      	bne.n	8006606 <LIS2DW12_0_Probe+0xe2>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      MotionFuncDrv[IKS01A3_LIS2DW12_0][FunctionIndex[MOTION_ACCELERO]] = (MOTION_SENSOR_FuncDrv_t *)(
 80065d8:	4b23      	ldr	r3, [pc, #140]	; (8006668 <LIS2DW12_0_Probe+0x144>)
 80065da:	689b      	ldr	r3, [r3, #8]
 80065dc:	4a23      	ldr	r2, [pc, #140]	; (800666c <LIS2DW12_0_Probe+0x148>)
 80065de:	3303      	adds	r3, #3
 80065e0:	4923      	ldr	r1, [pc, #140]	; (8006670 <LIS2DW12_0_Probe+0x14c>)
 80065e2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                                                                            void *)&LIS2DW12_ACC_Driver;

      if (MotionDrv[IKS01A3_LIS2DW12_0]->Init(MotionCompObj[IKS01A3_LIS2DW12_0]) != LIS2DW12_OK)
 80065e6:	4b1e      	ldr	r3, [pc, #120]	; (8006660 <LIS2DW12_0_Probe+0x13c>)
 80065e8:	685b      	ldr	r3, [r3, #4]
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	4a1b      	ldr	r2, [pc, #108]	; (800665c <LIS2DW12_0_Probe+0x138>)
 80065ee:	6852      	ldr	r2, [r2, #4]
 80065f0:	4610      	mov	r0, r2
 80065f2:	4798      	blx	r3
 80065f4:	4603      	mov	r3, r0
 80065f6:	2b00      	cmp	r3, #0
 80065f8:	d003      	beq.n	8006602 <LIS2DW12_0_Probe+0xde>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 80065fa:	f06f 0304 	mvn.w	r3, #4
 80065fe:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006600:	e001      	b.n	8006606 <LIS2DW12_0_Probe+0xe2>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 8006602:	2300      	movs	r3, #0
 8006604:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_GYRO) == MOTION_GYRO))
 8006606:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006608:	2b00      	cmp	r3, #0
 800660a:	d107      	bne.n	800661c <LIS2DW12_0_Probe+0xf8>
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	f003 0301 	and.w	r3, r3, #1
 8006612:	2b00      	cmp	r3, #0
 8006614:	d002      	beq.n	800661c <LIS2DW12_0_Probe+0xf8>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8006616:	f06f 0304 	mvn.w	r3, #4
 800661a:	64fb      	str	r3, [r7, #76]	; 0x4c
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_MAGNETO) == MOTION_MAGNETO))
 800661c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800661e:	2b00      	cmp	r3, #0
 8006620:	d107      	bne.n	8006632 <LIS2DW12_0_Probe+0x10e>
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	f003 0304 	and.w	r3, r3, #4
 8006628:	2b00      	cmp	r3, #0
 800662a:	d002      	beq.n	8006632 <LIS2DW12_0_Probe+0x10e>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 800662c:	f06f 0304 	mvn.w	r3, #4
 8006630:	64fb      	str	r3, [r7, #76]	; 0x4c
    }
  }
  return ret;
 8006632:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
}
 8006634:	4618      	mov	r0, r3
 8006636:	3750      	adds	r7, #80	; 0x50
 8006638:	46bd      	mov	sp, r7
 800663a:	bd80      	pop	{r7, pc}
 800663c:	080015b5 	.word	0x080015b5
 8006640:	08001619 	.word	0x08001619
 8006644:	080016cd 	.word	0x080016cd
 8006648:	08001669 	.word	0x08001669
 800664c:	08001731 	.word	0x08001731
 8006650:	080068a9 	.word	0x080068a9
 8006654:	20002574 	.word	0x20002574
 8006658:	20002530 	.word	0x20002530
 800665c:	200024f4 	.word	0x200024f4
 8006660:	20002524 	.word	0x20002524
 8006664:	20000008 	.word	0x20000008
 8006668:	200000c8 	.word	0x200000c8
 800666c:	20002500 	.word	0x20002500
 8006670:	20000018 	.word	0x20000018

08006674 <LIS2MDL_0_Probe>:
/**
  * @brief  Register Bus IOs for instance 1 if component ID is OK
  * @retval BSP status
  */
static int32_t LIS2MDL_0_Probe(uint32_t Functions)
{
 8006674:	b580      	push	{r7, lr}
 8006676:	b094      	sub	sp, #80	; 0x50
 8006678:	af00      	add	r7, sp, #0
 800667a:	6078      	str	r0, [r7, #4]
  LIS2MDL_IO_t            io_ctx;
  uint8_t                 id;
  static LIS2MDL_Object_t lis2mdl_obj_0;
  LIS2MDL_Capabilities_t  cap;
  int32_t                 ret = BSP_ERROR_NONE;
 800667c:	2300      	movs	r3, #0
 800667e:	64fb      	str	r3, [r7, #76]	; 0x4c

  /* Configure the accelero driver */
  io_ctx.BusType     = LIS2MDL_I2C_BUS; /* I2C */
 8006680:	2300      	movs	r3, #0
 8006682:	637b      	str	r3, [r7, #52]	; 0x34
  io_ctx.Address     = LIS2MDL_I2C_ADD;
 8006684:	233d      	movs	r3, #61	; 0x3d
 8006686:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  io_ctx.Init        = IKS01A3_I2C_Init;
 800668a:	4b40      	ldr	r3, [pc, #256]	; (800678c <LIS2MDL_0_Probe+0x118>)
 800668c:	62fb      	str	r3, [r7, #44]	; 0x2c
  io_ctx.DeInit      = IKS01A3_I2C_DeInit;
 800668e:	4b40      	ldr	r3, [pc, #256]	; (8006790 <LIS2MDL_0_Probe+0x11c>)
 8006690:	633b      	str	r3, [r7, #48]	; 0x30
  io_ctx.ReadReg     = IKS01A3_I2C_ReadReg;
 8006692:	4b40      	ldr	r3, [pc, #256]	; (8006794 <LIS2MDL_0_Probe+0x120>)
 8006694:	643b      	str	r3, [r7, #64]	; 0x40
  io_ctx.WriteReg    = IKS01A3_I2C_WriteReg;
 8006696:	4b40      	ldr	r3, [pc, #256]	; (8006798 <LIS2MDL_0_Probe+0x124>)
 8006698:	63fb      	str	r3, [r7, #60]	; 0x3c
  io_ctx.GetTick     = IKS01A3_GetTick;
 800669a:	4b40      	ldr	r3, [pc, #256]	; (800679c <LIS2MDL_0_Probe+0x128>)
 800669c:	647b      	str	r3, [r7, #68]	; 0x44
  io_ctx.Delay       = IKS01A3_Delay;
 800669e:	4b40      	ldr	r3, [pc, #256]	; (80067a0 <LIS2MDL_0_Probe+0x12c>)
 80066a0:	64bb      	str	r3, [r7, #72]	; 0x48

  if (LIS2MDL_RegisterBusIO(&lis2mdl_obj_0, &io_ctx) != LIS2MDL_OK)
 80066a2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80066a6:	4619      	mov	r1, r3
 80066a8:	483e      	ldr	r0, [pc, #248]	; (80067a4 <LIS2MDL_0_Probe+0x130>)
 80066aa:	f7fc fca9 	bl	8003000 <LIS2MDL_RegisterBusIO>
 80066ae:	4603      	mov	r3, r0
 80066b0:	2b00      	cmp	r3, #0
 80066b2:	d003      	beq.n	80066bc <LIS2MDL_0_Probe+0x48>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 80066b4:	f06f 0306 	mvn.w	r3, #6
 80066b8:	64fb      	str	r3, [r7, #76]	; 0x4c
 80066ba:	e062      	b.n	8006782 <LIS2MDL_0_Probe+0x10e>
  }
  else if (LIS2MDL_ReadID(&lis2mdl_obj_0, &id) != LIS2MDL_OK)
 80066bc:	f107 032b 	add.w	r3, r7, #43	; 0x2b
 80066c0:	4619      	mov	r1, r3
 80066c2:	4838      	ldr	r0, [pc, #224]	; (80067a4 <LIS2MDL_0_Probe+0x130>)
 80066c4:	f7fc fdb8 	bl	8003238 <LIS2MDL_ReadID>
 80066c8:	4603      	mov	r3, r0
 80066ca:	2b00      	cmp	r3, #0
 80066cc:	d003      	beq.n	80066d6 <LIS2MDL_0_Probe+0x62>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 80066ce:	f06f 0306 	mvn.w	r3, #6
 80066d2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80066d4:	e055      	b.n	8006782 <LIS2MDL_0_Probe+0x10e>
  }
  else if (id != LIS2MDL_ID)
 80066d6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80066da:	2b40      	cmp	r3, #64	; 0x40
 80066dc:	d003      	beq.n	80066e6 <LIS2MDL_0_Probe+0x72>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 80066de:	f06f 0306 	mvn.w	r3, #6
 80066e2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80066e4:	e04d      	b.n	8006782 <LIS2MDL_0_Probe+0x10e>
  }
  else
  {
    (void)LIS2MDL_GetCapabilities(&lis2mdl_obj_0, &cap);
 80066e6:	f107 030c 	add.w	r3, r7, #12
 80066ea:	4619      	mov	r1, r3
 80066ec:	482d      	ldr	r0, [pc, #180]	; (80067a4 <LIS2MDL_0_Probe+0x130>)
 80066ee:	f7fc fdc9 	bl	8003284 <LIS2MDL_GetCapabilities>
    MotionCtx[IKS01A3_LIS2MDL_0].Functions = ((uint32_t)cap.Gyro) | ((uint32_t)cap.Acc << 1) | ((uint32_t)cap.Magneto << 2);
 80066f2:	7b7b      	ldrb	r3, [r7, #13]
 80066f4:	461a      	mov	r2, r3
 80066f6:	7b3b      	ldrb	r3, [r7, #12]
 80066f8:	005b      	lsls	r3, r3, #1
 80066fa:	431a      	orrs	r2, r3
 80066fc:	7bbb      	ldrb	r3, [r7, #14]
 80066fe:	009b      	lsls	r3, r3, #2
 8006700:	4313      	orrs	r3, r2
 8006702:	4a29      	ldr	r2, [pc, #164]	; (80067a8 <LIS2MDL_0_Probe+0x134>)
 8006704:	6093      	str	r3, [r2, #8]

    MotionCompObj[IKS01A3_LIS2MDL_0] = &lis2mdl_obj_0;
 8006706:	4b29      	ldr	r3, [pc, #164]	; (80067ac <LIS2MDL_0_Probe+0x138>)
 8006708:	4a26      	ldr	r2, [pc, #152]	; (80067a4 <LIS2MDL_0_Probe+0x130>)
 800670a:	609a      	str	r2, [r3, #8]
    /* The second cast (void *) is added to bypass Misra R11.3 rule */
    MotionDrv[IKS01A3_LIS2MDL_0] = (MOTION_SENSOR_CommonDrv_t *)(void *)&LIS2MDL_COMMON_Driver;
 800670c:	4b28      	ldr	r3, [pc, #160]	; (80067b0 <LIS2MDL_0_Probe+0x13c>)
 800670e:	4a29      	ldr	r2, [pc, #164]	; (80067b4 <LIS2MDL_0_Probe+0x140>)
 8006710:	609a      	str	r2, [r3, #8]

    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_MAGNETO) == MOTION_MAGNETO) && (cap.Magneto == 1U))
 8006712:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006714:	2b00      	cmp	r3, #0
 8006716:	d11e      	bne.n	8006756 <LIS2MDL_0_Probe+0xe2>
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	f003 0304 	and.w	r3, r3, #4
 800671e:	2b00      	cmp	r3, #0
 8006720:	d019      	beq.n	8006756 <LIS2MDL_0_Probe+0xe2>
 8006722:	7bbb      	ldrb	r3, [r7, #14]
 8006724:	2b01      	cmp	r3, #1
 8006726:	d116      	bne.n	8006756 <LIS2MDL_0_Probe+0xe2>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      MotionFuncDrv[IKS01A3_LIS2MDL_0][FunctionIndex[MOTION_MAGNETO]] = (MOTION_SENSOR_FuncDrv_t *)(
 8006728:	4b23      	ldr	r3, [pc, #140]	; (80067b8 <LIS2MDL_0_Probe+0x144>)
 800672a:	691b      	ldr	r3, [r3, #16]
 800672c:	4a23      	ldr	r2, [pc, #140]	; (80067bc <LIS2MDL_0_Probe+0x148>)
 800672e:	3306      	adds	r3, #6
 8006730:	4923      	ldr	r1, [pc, #140]	; (80067c0 <LIS2MDL_0_Probe+0x14c>)
 8006732:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                                                                          void *)&LIS2MDL_MAG_Driver;

      if (MotionDrv[IKS01A3_LIS2MDL_0]->Init(MotionCompObj[IKS01A3_LIS2MDL_0]) != LIS2MDL_OK)
 8006736:	4b1e      	ldr	r3, [pc, #120]	; (80067b0 <LIS2MDL_0_Probe+0x13c>)
 8006738:	689b      	ldr	r3, [r3, #8]
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	4a1b      	ldr	r2, [pc, #108]	; (80067ac <LIS2MDL_0_Probe+0x138>)
 800673e:	6892      	ldr	r2, [r2, #8]
 8006740:	4610      	mov	r0, r2
 8006742:	4798      	blx	r3
 8006744:	4603      	mov	r3, r0
 8006746:	2b00      	cmp	r3, #0
 8006748:	d003      	beq.n	8006752 <LIS2MDL_0_Probe+0xde>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800674a:	f06f 0304 	mvn.w	r3, #4
 800674e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006750:	e001      	b.n	8006756 <LIS2MDL_0_Probe+0xe2>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 8006752:	2300      	movs	r3, #0
 8006754:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_ACCELERO) == MOTION_ACCELERO))
 8006756:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006758:	2b00      	cmp	r3, #0
 800675a:	d107      	bne.n	800676c <LIS2MDL_0_Probe+0xf8>
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	f003 0302 	and.w	r3, r3, #2
 8006762:	2b00      	cmp	r3, #0
 8006764:	d002      	beq.n	800676c <LIS2MDL_0_Probe+0xf8>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8006766:	f06f 0304 	mvn.w	r3, #4
 800676a:	64fb      	str	r3, [r7, #76]	; 0x4c
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_GYRO) == MOTION_GYRO))
 800676c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800676e:	2b00      	cmp	r3, #0
 8006770:	d107      	bne.n	8006782 <LIS2MDL_0_Probe+0x10e>
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	f003 0301 	and.w	r3, r3, #1
 8006778:	2b00      	cmp	r3, #0
 800677a:	d002      	beq.n	8006782 <LIS2MDL_0_Probe+0x10e>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 800677c:	f06f 0304 	mvn.w	r3, #4
 8006780:	64fb      	str	r3, [r7, #76]	; 0x4c
    }
  }
  return ret;
 8006782:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
}
 8006784:	4618      	mov	r0, r3
 8006786:	3750      	adds	r7, #80	; 0x50
 8006788:	46bd      	mov	sp, r7
 800678a:	bd80      	pop	{r7, pc}
 800678c:	080015b5 	.word	0x080015b5
 8006790:	08001619 	.word	0x08001619
 8006794:	080016cd 	.word	0x080016cd
 8006798:	08001669 	.word	0x08001669
 800679c:	08001731 	.word	0x08001731
 80067a0:	080068a9 	.word	0x080068a9
 80067a4:	200025b0 	.word	0x200025b0
 80067a8:	20002530 	.word	0x20002530
 80067ac:	200024f4 	.word	0x200024f4
 80067b0:	20002524 	.word	0x20002524
 80067b4:	2000003c 	.word	0x2000003c
 80067b8:	200000c8 	.word	0x200000c8
 80067bc:	20002500 	.word	0x20002500
 80067c0:	2000004c 	.word	0x2000004c

080067c4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80067c4:	b580      	push	{r7, lr}
 80067c6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80067c8:	4b0e      	ldr	r3, [pc, #56]	; (8006804 <HAL_Init+0x40>)
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	4a0d      	ldr	r2, [pc, #52]	; (8006804 <HAL_Init+0x40>)
 80067ce:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80067d2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80067d4:	4b0b      	ldr	r3, [pc, #44]	; (8006804 <HAL_Init+0x40>)
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	4a0a      	ldr	r2, [pc, #40]	; (8006804 <HAL_Init+0x40>)
 80067da:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80067de:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80067e0:	4b08      	ldr	r3, [pc, #32]	; (8006804 <HAL_Init+0x40>)
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	4a07      	ldr	r2, [pc, #28]	; (8006804 <HAL_Init+0x40>)
 80067e6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80067ea:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80067ec:	2003      	movs	r0, #3
 80067ee:	f000 f931 	bl	8006a54 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80067f2:	2000      	movs	r0, #0
 80067f4:	f000 f808 	bl	8006808 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80067f8:	f7fa fda2 	bl	8001340 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80067fc:	2300      	movs	r3, #0
}
 80067fe:	4618      	mov	r0, r3
 8006800:	bd80      	pop	{r7, pc}
 8006802:	bf00      	nop
 8006804:	40023c00 	.word	0x40023c00

08006808 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8006808:	b580      	push	{r7, lr}
 800680a:	b082      	sub	sp, #8
 800680c:	af00      	add	r7, sp, #0
 800680e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8006810:	4b12      	ldr	r3, [pc, #72]	; (800685c <HAL_InitTick+0x54>)
 8006812:	681a      	ldr	r2, [r3, #0]
 8006814:	4b12      	ldr	r3, [pc, #72]	; (8006860 <HAL_InitTick+0x58>)
 8006816:	781b      	ldrb	r3, [r3, #0]
 8006818:	4619      	mov	r1, r3
 800681a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800681e:	fbb3 f3f1 	udiv	r3, r3, r1
 8006822:	fbb2 f3f3 	udiv	r3, r2, r3
 8006826:	4618      	mov	r0, r3
 8006828:	f000 f93b 	bl	8006aa2 <HAL_SYSTICK_Config>
 800682c:	4603      	mov	r3, r0
 800682e:	2b00      	cmp	r3, #0
 8006830:	d001      	beq.n	8006836 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8006832:	2301      	movs	r3, #1
 8006834:	e00e      	b.n	8006854 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	2b0f      	cmp	r3, #15
 800683a:	d80a      	bhi.n	8006852 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800683c:	2200      	movs	r2, #0
 800683e:	6879      	ldr	r1, [r7, #4]
 8006840:	f04f 30ff 	mov.w	r0, #4294967295
 8006844:	f000 f911 	bl	8006a6a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8006848:	4a06      	ldr	r2, [pc, #24]	; (8006864 <HAL_InitTick+0x5c>)
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800684e:	2300      	movs	r3, #0
 8006850:	e000      	b.n	8006854 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8006852:	2301      	movs	r3, #1
}
 8006854:	4618      	mov	r0, r3
 8006856:	3708      	adds	r7, #8
 8006858:	46bd      	mov	sp, r7
 800685a:	bd80      	pop	{r7, pc}
 800685c:	20000004 	.word	0x20000004
 8006860:	200000e0 	.word	0x200000e0
 8006864:	200000dc 	.word	0x200000dc

08006868 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8006868:	b480      	push	{r7}
 800686a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800686c:	4b06      	ldr	r3, [pc, #24]	; (8006888 <HAL_IncTick+0x20>)
 800686e:	781b      	ldrb	r3, [r3, #0]
 8006870:	461a      	mov	r2, r3
 8006872:	4b06      	ldr	r3, [pc, #24]	; (800688c <HAL_IncTick+0x24>)
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	4413      	add	r3, r2
 8006878:	4a04      	ldr	r2, [pc, #16]	; (800688c <HAL_IncTick+0x24>)
 800687a:	6013      	str	r3, [r2, #0]
}
 800687c:	bf00      	nop
 800687e:	46bd      	mov	sp, r7
 8006880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006884:	4770      	bx	lr
 8006886:	bf00      	nop
 8006888:	200000e0 	.word	0x200000e0
 800688c:	200025e4 	.word	0x200025e4

08006890 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8006890:	b480      	push	{r7}
 8006892:	af00      	add	r7, sp, #0
  return uwTick;
 8006894:	4b03      	ldr	r3, [pc, #12]	; (80068a4 <HAL_GetTick+0x14>)
 8006896:	681b      	ldr	r3, [r3, #0]
}
 8006898:	4618      	mov	r0, r3
 800689a:	46bd      	mov	sp, r7
 800689c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068a0:	4770      	bx	lr
 80068a2:	bf00      	nop
 80068a4:	200025e4 	.word	0x200025e4

080068a8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80068a8:	b580      	push	{r7, lr}
 80068aa:	b084      	sub	sp, #16
 80068ac:	af00      	add	r7, sp, #0
 80068ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80068b0:	f7ff ffee 	bl	8006890 <HAL_GetTick>
 80068b4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80068ba:	68fb      	ldr	r3, [r7, #12]
 80068bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80068c0:	d005      	beq.n	80068ce <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80068c2:	4b0a      	ldr	r3, [pc, #40]	; (80068ec <HAL_Delay+0x44>)
 80068c4:	781b      	ldrb	r3, [r3, #0]
 80068c6:	461a      	mov	r2, r3
 80068c8:	68fb      	ldr	r3, [r7, #12]
 80068ca:	4413      	add	r3, r2
 80068cc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80068ce:	bf00      	nop
 80068d0:	f7ff ffde 	bl	8006890 <HAL_GetTick>
 80068d4:	4602      	mov	r2, r0
 80068d6:	68bb      	ldr	r3, [r7, #8]
 80068d8:	1ad3      	subs	r3, r2, r3
 80068da:	68fa      	ldr	r2, [r7, #12]
 80068dc:	429a      	cmp	r2, r3
 80068de:	d8f7      	bhi.n	80068d0 <HAL_Delay+0x28>
  {
  }
}
 80068e0:	bf00      	nop
 80068e2:	bf00      	nop
 80068e4:	3710      	adds	r7, #16
 80068e6:	46bd      	mov	sp, r7
 80068e8:	bd80      	pop	{r7, pc}
 80068ea:	bf00      	nop
 80068ec:	200000e0 	.word	0x200000e0

080068f0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80068f0:	b480      	push	{r7}
 80068f2:	b085      	sub	sp, #20
 80068f4:	af00      	add	r7, sp, #0
 80068f6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	f003 0307 	and.w	r3, r3, #7
 80068fe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8006900:	4b0c      	ldr	r3, [pc, #48]	; (8006934 <__NVIC_SetPriorityGrouping+0x44>)
 8006902:	68db      	ldr	r3, [r3, #12]
 8006904:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8006906:	68ba      	ldr	r2, [r7, #8]
 8006908:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800690c:	4013      	ands	r3, r2
 800690e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8006910:	68fb      	ldr	r3, [r7, #12]
 8006912:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8006914:	68bb      	ldr	r3, [r7, #8]
 8006916:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8006918:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800691c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006920:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8006922:	4a04      	ldr	r2, [pc, #16]	; (8006934 <__NVIC_SetPriorityGrouping+0x44>)
 8006924:	68bb      	ldr	r3, [r7, #8]
 8006926:	60d3      	str	r3, [r2, #12]
}
 8006928:	bf00      	nop
 800692a:	3714      	adds	r7, #20
 800692c:	46bd      	mov	sp, r7
 800692e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006932:	4770      	bx	lr
 8006934:	e000ed00 	.word	0xe000ed00

08006938 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8006938:	b480      	push	{r7}
 800693a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800693c:	4b04      	ldr	r3, [pc, #16]	; (8006950 <__NVIC_GetPriorityGrouping+0x18>)
 800693e:	68db      	ldr	r3, [r3, #12]
 8006940:	0a1b      	lsrs	r3, r3, #8
 8006942:	f003 0307 	and.w	r3, r3, #7
}
 8006946:	4618      	mov	r0, r3
 8006948:	46bd      	mov	sp, r7
 800694a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800694e:	4770      	bx	lr
 8006950:	e000ed00 	.word	0xe000ed00

08006954 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8006954:	b480      	push	{r7}
 8006956:	b083      	sub	sp, #12
 8006958:	af00      	add	r7, sp, #0
 800695a:	4603      	mov	r3, r0
 800695c:	6039      	str	r1, [r7, #0]
 800695e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006960:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006964:	2b00      	cmp	r3, #0
 8006966:	db0a      	blt.n	800697e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006968:	683b      	ldr	r3, [r7, #0]
 800696a:	b2da      	uxtb	r2, r3
 800696c:	490c      	ldr	r1, [pc, #48]	; (80069a0 <__NVIC_SetPriority+0x4c>)
 800696e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006972:	0112      	lsls	r2, r2, #4
 8006974:	b2d2      	uxtb	r2, r2
 8006976:	440b      	add	r3, r1
 8006978:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800697c:	e00a      	b.n	8006994 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800697e:	683b      	ldr	r3, [r7, #0]
 8006980:	b2da      	uxtb	r2, r3
 8006982:	4908      	ldr	r1, [pc, #32]	; (80069a4 <__NVIC_SetPriority+0x50>)
 8006984:	79fb      	ldrb	r3, [r7, #7]
 8006986:	f003 030f 	and.w	r3, r3, #15
 800698a:	3b04      	subs	r3, #4
 800698c:	0112      	lsls	r2, r2, #4
 800698e:	b2d2      	uxtb	r2, r2
 8006990:	440b      	add	r3, r1
 8006992:	761a      	strb	r2, [r3, #24]
}
 8006994:	bf00      	nop
 8006996:	370c      	adds	r7, #12
 8006998:	46bd      	mov	sp, r7
 800699a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800699e:	4770      	bx	lr
 80069a0:	e000e100 	.word	0xe000e100
 80069a4:	e000ed00 	.word	0xe000ed00

080069a8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80069a8:	b480      	push	{r7}
 80069aa:	b089      	sub	sp, #36	; 0x24
 80069ac:	af00      	add	r7, sp, #0
 80069ae:	60f8      	str	r0, [r7, #12]
 80069b0:	60b9      	str	r1, [r7, #8]
 80069b2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80069b4:	68fb      	ldr	r3, [r7, #12]
 80069b6:	f003 0307 	and.w	r3, r3, #7
 80069ba:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80069bc:	69fb      	ldr	r3, [r7, #28]
 80069be:	f1c3 0307 	rsb	r3, r3, #7
 80069c2:	2b04      	cmp	r3, #4
 80069c4:	bf28      	it	cs
 80069c6:	2304      	movcs	r3, #4
 80069c8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80069ca:	69fb      	ldr	r3, [r7, #28]
 80069cc:	3304      	adds	r3, #4
 80069ce:	2b06      	cmp	r3, #6
 80069d0:	d902      	bls.n	80069d8 <NVIC_EncodePriority+0x30>
 80069d2:	69fb      	ldr	r3, [r7, #28]
 80069d4:	3b03      	subs	r3, #3
 80069d6:	e000      	b.n	80069da <NVIC_EncodePriority+0x32>
 80069d8:	2300      	movs	r3, #0
 80069da:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80069dc:	f04f 32ff 	mov.w	r2, #4294967295
 80069e0:	69bb      	ldr	r3, [r7, #24]
 80069e2:	fa02 f303 	lsl.w	r3, r2, r3
 80069e6:	43da      	mvns	r2, r3
 80069e8:	68bb      	ldr	r3, [r7, #8]
 80069ea:	401a      	ands	r2, r3
 80069ec:	697b      	ldr	r3, [r7, #20]
 80069ee:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80069f0:	f04f 31ff 	mov.w	r1, #4294967295
 80069f4:	697b      	ldr	r3, [r7, #20]
 80069f6:	fa01 f303 	lsl.w	r3, r1, r3
 80069fa:	43d9      	mvns	r1, r3
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006a00:	4313      	orrs	r3, r2
         );
}
 8006a02:	4618      	mov	r0, r3
 8006a04:	3724      	adds	r7, #36	; 0x24
 8006a06:	46bd      	mov	sp, r7
 8006a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a0c:	4770      	bx	lr
	...

08006a10 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8006a10:	b580      	push	{r7, lr}
 8006a12:	b082      	sub	sp, #8
 8006a14:	af00      	add	r7, sp, #0
 8006a16:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	3b01      	subs	r3, #1
 8006a1c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006a20:	d301      	bcc.n	8006a26 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8006a22:	2301      	movs	r3, #1
 8006a24:	e00f      	b.n	8006a46 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8006a26:	4a0a      	ldr	r2, [pc, #40]	; (8006a50 <SysTick_Config+0x40>)
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	3b01      	subs	r3, #1
 8006a2c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8006a2e:	210f      	movs	r1, #15
 8006a30:	f04f 30ff 	mov.w	r0, #4294967295
 8006a34:	f7ff ff8e 	bl	8006954 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8006a38:	4b05      	ldr	r3, [pc, #20]	; (8006a50 <SysTick_Config+0x40>)
 8006a3a:	2200      	movs	r2, #0
 8006a3c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8006a3e:	4b04      	ldr	r3, [pc, #16]	; (8006a50 <SysTick_Config+0x40>)
 8006a40:	2207      	movs	r2, #7
 8006a42:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8006a44:	2300      	movs	r3, #0
}
 8006a46:	4618      	mov	r0, r3
 8006a48:	3708      	adds	r7, #8
 8006a4a:	46bd      	mov	sp, r7
 8006a4c:	bd80      	pop	{r7, pc}
 8006a4e:	bf00      	nop
 8006a50:	e000e010 	.word	0xe000e010

08006a54 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006a54:	b580      	push	{r7, lr}
 8006a56:	b082      	sub	sp, #8
 8006a58:	af00      	add	r7, sp, #0
 8006a5a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8006a5c:	6878      	ldr	r0, [r7, #4]
 8006a5e:	f7ff ff47 	bl	80068f0 <__NVIC_SetPriorityGrouping>
}
 8006a62:	bf00      	nop
 8006a64:	3708      	adds	r7, #8
 8006a66:	46bd      	mov	sp, r7
 8006a68:	bd80      	pop	{r7, pc}

08006a6a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8006a6a:	b580      	push	{r7, lr}
 8006a6c:	b086      	sub	sp, #24
 8006a6e:	af00      	add	r7, sp, #0
 8006a70:	4603      	mov	r3, r0
 8006a72:	60b9      	str	r1, [r7, #8]
 8006a74:	607a      	str	r2, [r7, #4]
 8006a76:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8006a78:	2300      	movs	r3, #0
 8006a7a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8006a7c:	f7ff ff5c 	bl	8006938 <__NVIC_GetPriorityGrouping>
 8006a80:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8006a82:	687a      	ldr	r2, [r7, #4]
 8006a84:	68b9      	ldr	r1, [r7, #8]
 8006a86:	6978      	ldr	r0, [r7, #20]
 8006a88:	f7ff ff8e 	bl	80069a8 <NVIC_EncodePriority>
 8006a8c:	4602      	mov	r2, r0
 8006a8e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006a92:	4611      	mov	r1, r2
 8006a94:	4618      	mov	r0, r3
 8006a96:	f7ff ff5d 	bl	8006954 <__NVIC_SetPriority>
}
 8006a9a:	bf00      	nop
 8006a9c:	3718      	adds	r7, #24
 8006a9e:	46bd      	mov	sp, r7
 8006aa0:	bd80      	pop	{r7, pc}

08006aa2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8006aa2:	b580      	push	{r7, lr}
 8006aa4:	b082      	sub	sp, #8
 8006aa6:	af00      	add	r7, sp, #0
 8006aa8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8006aaa:	6878      	ldr	r0, [r7, #4]
 8006aac:	f7ff ffb0 	bl	8006a10 <SysTick_Config>
 8006ab0:	4603      	mov	r3, r0
}
 8006ab2:	4618      	mov	r0, r3
 8006ab4:	3708      	adds	r7, #8
 8006ab6:	46bd      	mov	sp, r7
 8006ab8:	bd80      	pop	{r7, pc}
	...

08006abc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006abc:	b480      	push	{r7}
 8006abe:	b089      	sub	sp, #36	; 0x24
 8006ac0:	af00      	add	r7, sp, #0
 8006ac2:	6078      	str	r0, [r7, #4]
 8006ac4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8006ac6:	2300      	movs	r3, #0
 8006ac8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8006aca:	2300      	movs	r3, #0
 8006acc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8006ace:	2300      	movs	r3, #0
 8006ad0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8006ad2:	2300      	movs	r3, #0
 8006ad4:	61fb      	str	r3, [r7, #28]
 8006ad6:	e159      	b.n	8006d8c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8006ad8:	2201      	movs	r2, #1
 8006ada:	69fb      	ldr	r3, [r7, #28]
 8006adc:	fa02 f303 	lsl.w	r3, r2, r3
 8006ae0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8006ae2:	683b      	ldr	r3, [r7, #0]
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	697a      	ldr	r2, [r7, #20]
 8006ae8:	4013      	ands	r3, r2
 8006aea:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8006aec:	693a      	ldr	r2, [r7, #16]
 8006aee:	697b      	ldr	r3, [r7, #20]
 8006af0:	429a      	cmp	r2, r3
 8006af2:	f040 8148 	bne.w	8006d86 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8006af6:	683b      	ldr	r3, [r7, #0]
 8006af8:	685b      	ldr	r3, [r3, #4]
 8006afa:	f003 0303 	and.w	r3, r3, #3
 8006afe:	2b01      	cmp	r3, #1
 8006b00:	d005      	beq.n	8006b0e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006b02:	683b      	ldr	r3, [r7, #0]
 8006b04:	685b      	ldr	r3, [r3, #4]
 8006b06:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8006b0a:	2b02      	cmp	r3, #2
 8006b0c:	d130      	bne.n	8006b70 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	689b      	ldr	r3, [r3, #8]
 8006b12:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8006b14:	69fb      	ldr	r3, [r7, #28]
 8006b16:	005b      	lsls	r3, r3, #1
 8006b18:	2203      	movs	r2, #3
 8006b1a:	fa02 f303 	lsl.w	r3, r2, r3
 8006b1e:	43db      	mvns	r3, r3
 8006b20:	69ba      	ldr	r2, [r7, #24]
 8006b22:	4013      	ands	r3, r2
 8006b24:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8006b26:	683b      	ldr	r3, [r7, #0]
 8006b28:	68da      	ldr	r2, [r3, #12]
 8006b2a:	69fb      	ldr	r3, [r7, #28]
 8006b2c:	005b      	lsls	r3, r3, #1
 8006b2e:	fa02 f303 	lsl.w	r3, r2, r3
 8006b32:	69ba      	ldr	r2, [r7, #24]
 8006b34:	4313      	orrs	r3, r2
 8006b36:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	69ba      	ldr	r2, [r7, #24]
 8006b3c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	685b      	ldr	r3, [r3, #4]
 8006b42:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8006b44:	2201      	movs	r2, #1
 8006b46:	69fb      	ldr	r3, [r7, #28]
 8006b48:	fa02 f303 	lsl.w	r3, r2, r3
 8006b4c:	43db      	mvns	r3, r3
 8006b4e:	69ba      	ldr	r2, [r7, #24]
 8006b50:	4013      	ands	r3, r2
 8006b52:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8006b54:	683b      	ldr	r3, [r7, #0]
 8006b56:	685b      	ldr	r3, [r3, #4]
 8006b58:	091b      	lsrs	r3, r3, #4
 8006b5a:	f003 0201 	and.w	r2, r3, #1
 8006b5e:	69fb      	ldr	r3, [r7, #28]
 8006b60:	fa02 f303 	lsl.w	r3, r2, r3
 8006b64:	69ba      	ldr	r2, [r7, #24]
 8006b66:	4313      	orrs	r3, r2
 8006b68:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	69ba      	ldr	r2, [r7, #24]
 8006b6e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8006b70:	683b      	ldr	r3, [r7, #0]
 8006b72:	685b      	ldr	r3, [r3, #4]
 8006b74:	f003 0303 	and.w	r3, r3, #3
 8006b78:	2b03      	cmp	r3, #3
 8006b7a:	d017      	beq.n	8006bac <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	68db      	ldr	r3, [r3, #12]
 8006b80:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8006b82:	69fb      	ldr	r3, [r7, #28]
 8006b84:	005b      	lsls	r3, r3, #1
 8006b86:	2203      	movs	r2, #3
 8006b88:	fa02 f303 	lsl.w	r3, r2, r3
 8006b8c:	43db      	mvns	r3, r3
 8006b8e:	69ba      	ldr	r2, [r7, #24]
 8006b90:	4013      	ands	r3, r2
 8006b92:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8006b94:	683b      	ldr	r3, [r7, #0]
 8006b96:	689a      	ldr	r2, [r3, #8]
 8006b98:	69fb      	ldr	r3, [r7, #28]
 8006b9a:	005b      	lsls	r3, r3, #1
 8006b9c:	fa02 f303 	lsl.w	r3, r2, r3
 8006ba0:	69ba      	ldr	r2, [r7, #24]
 8006ba2:	4313      	orrs	r3, r2
 8006ba4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	69ba      	ldr	r2, [r7, #24]
 8006baa:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006bac:	683b      	ldr	r3, [r7, #0]
 8006bae:	685b      	ldr	r3, [r3, #4]
 8006bb0:	f003 0303 	and.w	r3, r3, #3
 8006bb4:	2b02      	cmp	r3, #2
 8006bb6:	d123      	bne.n	8006c00 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8006bb8:	69fb      	ldr	r3, [r7, #28]
 8006bba:	08da      	lsrs	r2, r3, #3
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	3208      	adds	r2, #8
 8006bc0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006bc4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8006bc6:	69fb      	ldr	r3, [r7, #28]
 8006bc8:	f003 0307 	and.w	r3, r3, #7
 8006bcc:	009b      	lsls	r3, r3, #2
 8006bce:	220f      	movs	r2, #15
 8006bd0:	fa02 f303 	lsl.w	r3, r2, r3
 8006bd4:	43db      	mvns	r3, r3
 8006bd6:	69ba      	ldr	r2, [r7, #24]
 8006bd8:	4013      	ands	r3, r2
 8006bda:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8006bdc:	683b      	ldr	r3, [r7, #0]
 8006bde:	691a      	ldr	r2, [r3, #16]
 8006be0:	69fb      	ldr	r3, [r7, #28]
 8006be2:	f003 0307 	and.w	r3, r3, #7
 8006be6:	009b      	lsls	r3, r3, #2
 8006be8:	fa02 f303 	lsl.w	r3, r2, r3
 8006bec:	69ba      	ldr	r2, [r7, #24]
 8006bee:	4313      	orrs	r3, r2
 8006bf0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8006bf2:	69fb      	ldr	r3, [r7, #28]
 8006bf4:	08da      	lsrs	r2, r3, #3
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	3208      	adds	r2, #8
 8006bfa:	69b9      	ldr	r1, [r7, #24]
 8006bfc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8006c06:	69fb      	ldr	r3, [r7, #28]
 8006c08:	005b      	lsls	r3, r3, #1
 8006c0a:	2203      	movs	r2, #3
 8006c0c:	fa02 f303 	lsl.w	r3, r2, r3
 8006c10:	43db      	mvns	r3, r3
 8006c12:	69ba      	ldr	r2, [r7, #24]
 8006c14:	4013      	ands	r3, r2
 8006c16:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8006c18:	683b      	ldr	r3, [r7, #0]
 8006c1a:	685b      	ldr	r3, [r3, #4]
 8006c1c:	f003 0203 	and.w	r2, r3, #3
 8006c20:	69fb      	ldr	r3, [r7, #28]
 8006c22:	005b      	lsls	r3, r3, #1
 8006c24:	fa02 f303 	lsl.w	r3, r2, r3
 8006c28:	69ba      	ldr	r2, [r7, #24]
 8006c2a:	4313      	orrs	r3, r2
 8006c2c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	69ba      	ldr	r2, [r7, #24]
 8006c32:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8006c34:	683b      	ldr	r3, [r7, #0]
 8006c36:	685b      	ldr	r3, [r3, #4]
 8006c38:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8006c3c:	2b00      	cmp	r3, #0
 8006c3e:	f000 80a2 	beq.w	8006d86 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006c42:	2300      	movs	r3, #0
 8006c44:	60fb      	str	r3, [r7, #12]
 8006c46:	4b57      	ldr	r3, [pc, #348]	; (8006da4 <HAL_GPIO_Init+0x2e8>)
 8006c48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006c4a:	4a56      	ldr	r2, [pc, #344]	; (8006da4 <HAL_GPIO_Init+0x2e8>)
 8006c4c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006c50:	6453      	str	r3, [r2, #68]	; 0x44
 8006c52:	4b54      	ldr	r3, [pc, #336]	; (8006da4 <HAL_GPIO_Init+0x2e8>)
 8006c54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006c56:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006c5a:	60fb      	str	r3, [r7, #12]
 8006c5c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8006c5e:	4a52      	ldr	r2, [pc, #328]	; (8006da8 <HAL_GPIO_Init+0x2ec>)
 8006c60:	69fb      	ldr	r3, [r7, #28]
 8006c62:	089b      	lsrs	r3, r3, #2
 8006c64:	3302      	adds	r3, #2
 8006c66:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006c6a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8006c6c:	69fb      	ldr	r3, [r7, #28]
 8006c6e:	f003 0303 	and.w	r3, r3, #3
 8006c72:	009b      	lsls	r3, r3, #2
 8006c74:	220f      	movs	r2, #15
 8006c76:	fa02 f303 	lsl.w	r3, r2, r3
 8006c7a:	43db      	mvns	r3, r3
 8006c7c:	69ba      	ldr	r2, [r7, #24]
 8006c7e:	4013      	ands	r3, r2
 8006c80:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	4a49      	ldr	r2, [pc, #292]	; (8006dac <HAL_GPIO_Init+0x2f0>)
 8006c86:	4293      	cmp	r3, r2
 8006c88:	d019      	beq.n	8006cbe <HAL_GPIO_Init+0x202>
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	4a48      	ldr	r2, [pc, #288]	; (8006db0 <HAL_GPIO_Init+0x2f4>)
 8006c8e:	4293      	cmp	r3, r2
 8006c90:	d013      	beq.n	8006cba <HAL_GPIO_Init+0x1fe>
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	4a47      	ldr	r2, [pc, #284]	; (8006db4 <HAL_GPIO_Init+0x2f8>)
 8006c96:	4293      	cmp	r3, r2
 8006c98:	d00d      	beq.n	8006cb6 <HAL_GPIO_Init+0x1fa>
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	4a46      	ldr	r2, [pc, #280]	; (8006db8 <HAL_GPIO_Init+0x2fc>)
 8006c9e:	4293      	cmp	r3, r2
 8006ca0:	d007      	beq.n	8006cb2 <HAL_GPIO_Init+0x1f6>
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	4a45      	ldr	r2, [pc, #276]	; (8006dbc <HAL_GPIO_Init+0x300>)
 8006ca6:	4293      	cmp	r3, r2
 8006ca8:	d101      	bne.n	8006cae <HAL_GPIO_Init+0x1f2>
 8006caa:	2304      	movs	r3, #4
 8006cac:	e008      	b.n	8006cc0 <HAL_GPIO_Init+0x204>
 8006cae:	2307      	movs	r3, #7
 8006cb0:	e006      	b.n	8006cc0 <HAL_GPIO_Init+0x204>
 8006cb2:	2303      	movs	r3, #3
 8006cb4:	e004      	b.n	8006cc0 <HAL_GPIO_Init+0x204>
 8006cb6:	2302      	movs	r3, #2
 8006cb8:	e002      	b.n	8006cc0 <HAL_GPIO_Init+0x204>
 8006cba:	2301      	movs	r3, #1
 8006cbc:	e000      	b.n	8006cc0 <HAL_GPIO_Init+0x204>
 8006cbe:	2300      	movs	r3, #0
 8006cc0:	69fa      	ldr	r2, [r7, #28]
 8006cc2:	f002 0203 	and.w	r2, r2, #3
 8006cc6:	0092      	lsls	r2, r2, #2
 8006cc8:	4093      	lsls	r3, r2
 8006cca:	69ba      	ldr	r2, [r7, #24]
 8006ccc:	4313      	orrs	r3, r2
 8006cce:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8006cd0:	4935      	ldr	r1, [pc, #212]	; (8006da8 <HAL_GPIO_Init+0x2ec>)
 8006cd2:	69fb      	ldr	r3, [r7, #28]
 8006cd4:	089b      	lsrs	r3, r3, #2
 8006cd6:	3302      	adds	r3, #2
 8006cd8:	69ba      	ldr	r2, [r7, #24]
 8006cda:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8006cde:	4b38      	ldr	r3, [pc, #224]	; (8006dc0 <HAL_GPIO_Init+0x304>)
 8006ce0:	689b      	ldr	r3, [r3, #8]
 8006ce2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006ce4:	693b      	ldr	r3, [r7, #16]
 8006ce6:	43db      	mvns	r3, r3
 8006ce8:	69ba      	ldr	r2, [r7, #24]
 8006cea:	4013      	ands	r3, r2
 8006cec:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8006cee:	683b      	ldr	r3, [r7, #0]
 8006cf0:	685b      	ldr	r3, [r3, #4]
 8006cf2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006cf6:	2b00      	cmp	r3, #0
 8006cf8:	d003      	beq.n	8006d02 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8006cfa:	69ba      	ldr	r2, [r7, #24]
 8006cfc:	693b      	ldr	r3, [r7, #16]
 8006cfe:	4313      	orrs	r3, r2
 8006d00:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8006d02:	4a2f      	ldr	r2, [pc, #188]	; (8006dc0 <HAL_GPIO_Init+0x304>)
 8006d04:	69bb      	ldr	r3, [r7, #24]
 8006d06:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8006d08:	4b2d      	ldr	r3, [pc, #180]	; (8006dc0 <HAL_GPIO_Init+0x304>)
 8006d0a:	68db      	ldr	r3, [r3, #12]
 8006d0c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006d0e:	693b      	ldr	r3, [r7, #16]
 8006d10:	43db      	mvns	r3, r3
 8006d12:	69ba      	ldr	r2, [r7, #24]
 8006d14:	4013      	ands	r3, r2
 8006d16:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8006d18:	683b      	ldr	r3, [r7, #0]
 8006d1a:	685b      	ldr	r3, [r3, #4]
 8006d1c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006d20:	2b00      	cmp	r3, #0
 8006d22:	d003      	beq.n	8006d2c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8006d24:	69ba      	ldr	r2, [r7, #24]
 8006d26:	693b      	ldr	r3, [r7, #16]
 8006d28:	4313      	orrs	r3, r2
 8006d2a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8006d2c:	4a24      	ldr	r2, [pc, #144]	; (8006dc0 <HAL_GPIO_Init+0x304>)
 8006d2e:	69bb      	ldr	r3, [r7, #24]
 8006d30:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8006d32:	4b23      	ldr	r3, [pc, #140]	; (8006dc0 <HAL_GPIO_Init+0x304>)
 8006d34:	685b      	ldr	r3, [r3, #4]
 8006d36:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006d38:	693b      	ldr	r3, [r7, #16]
 8006d3a:	43db      	mvns	r3, r3
 8006d3c:	69ba      	ldr	r2, [r7, #24]
 8006d3e:	4013      	ands	r3, r2
 8006d40:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8006d42:	683b      	ldr	r3, [r7, #0]
 8006d44:	685b      	ldr	r3, [r3, #4]
 8006d46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006d4a:	2b00      	cmp	r3, #0
 8006d4c:	d003      	beq.n	8006d56 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8006d4e:	69ba      	ldr	r2, [r7, #24]
 8006d50:	693b      	ldr	r3, [r7, #16]
 8006d52:	4313      	orrs	r3, r2
 8006d54:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8006d56:	4a1a      	ldr	r2, [pc, #104]	; (8006dc0 <HAL_GPIO_Init+0x304>)
 8006d58:	69bb      	ldr	r3, [r7, #24]
 8006d5a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8006d5c:	4b18      	ldr	r3, [pc, #96]	; (8006dc0 <HAL_GPIO_Init+0x304>)
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006d62:	693b      	ldr	r3, [r7, #16]
 8006d64:	43db      	mvns	r3, r3
 8006d66:	69ba      	ldr	r2, [r7, #24]
 8006d68:	4013      	ands	r3, r2
 8006d6a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8006d6c:	683b      	ldr	r3, [r7, #0]
 8006d6e:	685b      	ldr	r3, [r3, #4]
 8006d70:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006d74:	2b00      	cmp	r3, #0
 8006d76:	d003      	beq.n	8006d80 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8006d78:	69ba      	ldr	r2, [r7, #24]
 8006d7a:	693b      	ldr	r3, [r7, #16]
 8006d7c:	4313      	orrs	r3, r2
 8006d7e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8006d80:	4a0f      	ldr	r2, [pc, #60]	; (8006dc0 <HAL_GPIO_Init+0x304>)
 8006d82:	69bb      	ldr	r3, [r7, #24]
 8006d84:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8006d86:	69fb      	ldr	r3, [r7, #28]
 8006d88:	3301      	adds	r3, #1
 8006d8a:	61fb      	str	r3, [r7, #28]
 8006d8c:	69fb      	ldr	r3, [r7, #28]
 8006d8e:	2b0f      	cmp	r3, #15
 8006d90:	f67f aea2 	bls.w	8006ad8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8006d94:	bf00      	nop
 8006d96:	bf00      	nop
 8006d98:	3724      	adds	r7, #36	; 0x24
 8006d9a:	46bd      	mov	sp, r7
 8006d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006da0:	4770      	bx	lr
 8006da2:	bf00      	nop
 8006da4:	40023800 	.word	0x40023800
 8006da8:	40013800 	.word	0x40013800
 8006dac:	40020000 	.word	0x40020000
 8006db0:	40020400 	.word	0x40020400
 8006db4:	40020800 	.word	0x40020800
 8006db8:	40020c00 	.word	0x40020c00
 8006dbc:	40021000 	.word	0x40021000
 8006dc0:	40013c00 	.word	0x40013c00

08006dc4 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8006dc4:	b480      	push	{r7}
 8006dc6:	b087      	sub	sp, #28
 8006dc8:	af00      	add	r7, sp, #0
 8006dca:	6078      	str	r0, [r7, #4]
 8006dcc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8006dce:	2300      	movs	r3, #0
 8006dd0:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 8006dd2:	2300      	movs	r3, #0
 8006dd4:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 8006dd6:	2300      	movs	r3, #0
 8006dd8:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8006dda:	2300      	movs	r3, #0
 8006ddc:	617b      	str	r3, [r7, #20]
 8006dde:	e0bb      	b.n	8006f58 <HAL_GPIO_DeInit+0x194>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8006de0:	2201      	movs	r2, #1
 8006de2:	697b      	ldr	r3, [r7, #20]
 8006de4:	fa02 f303 	lsl.w	r3, r2, r3
 8006de8:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 8006dea:	683a      	ldr	r2, [r7, #0]
 8006dec:	693b      	ldr	r3, [r7, #16]
 8006dee:	4013      	ands	r3, r2
 8006df0:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 8006df2:	68fa      	ldr	r2, [r7, #12]
 8006df4:	693b      	ldr	r3, [r7, #16]
 8006df6:	429a      	cmp	r2, r3
 8006df8:	f040 80ab 	bne.w	8006f52 <HAL_GPIO_DeInit+0x18e>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 8006dfc:	4a5c      	ldr	r2, [pc, #368]	; (8006f70 <HAL_GPIO_DeInit+0x1ac>)
 8006dfe:	697b      	ldr	r3, [r7, #20]
 8006e00:	089b      	lsrs	r3, r3, #2
 8006e02:	3302      	adds	r3, #2
 8006e04:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006e08:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 8006e0a:	697b      	ldr	r3, [r7, #20]
 8006e0c:	f003 0303 	and.w	r3, r3, #3
 8006e10:	009b      	lsls	r3, r3, #2
 8006e12:	220f      	movs	r2, #15
 8006e14:	fa02 f303 	lsl.w	r3, r2, r3
 8006e18:	68ba      	ldr	r2, [r7, #8]
 8006e1a:	4013      	ands	r3, r2
 8006e1c:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	4a54      	ldr	r2, [pc, #336]	; (8006f74 <HAL_GPIO_DeInit+0x1b0>)
 8006e22:	4293      	cmp	r3, r2
 8006e24:	d019      	beq.n	8006e5a <HAL_GPIO_DeInit+0x96>
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	4a53      	ldr	r2, [pc, #332]	; (8006f78 <HAL_GPIO_DeInit+0x1b4>)
 8006e2a:	4293      	cmp	r3, r2
 8006e2c:	d013      	beq.n	8006e56 <HAL_GPIO_DeInit+0x92>
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	4a52      	ldr	r2, [pc, #328]	; (8006f7c <HAL_GPIO_DeInit+0x1b8>)
 8006e32:	4293      	cmp	r3, r2
 8006e34:	d00d      	beq.n	8006e52 <HAL_GPIO_DeInit+0x8e>
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	4a51      	ldr	r2, [pc, #324]	; (8006f80 <HAL_GPIO_DeInit+0x1bc>)
 8006e3a:	4293      	cmp	r3, r2
 8006e3c:	d007      	beq.n	8006e4e <HAL_GPIO_DeInit+0x8a>
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	4a50      	ldr	r2, [pc, #320]	; (8006f84 <HAL_GPIO_DeInit+0x1c0>)
 8006e42:	4293      	cmp	r3, r2
 8006e44:	d101      	bne.n	8006e4a <HAL_GPIO_DeInit+0x86>
 8006e46:	2304      	movs	r3, #4
 8006e48:	e008      	b.n	8006e5c <HAL_GPIO_DeInit+0x98>
 8006e4a:	2307      	movs	r3, #7
 8006e4c:	e006      	b.n	8006e5c <HAL_GPIO_DeInit+0x98>
 8006e4e:	2303      	movs	r3, #3
 8006e50:	e004      	b.n	8006e5c <HAL_GPIO_DeInit+0x98>
 8006e52:	2302      	movs	r3, #2
 8006e54:	e002      	b.n	8006e5c <HAL_GPIO_DeInit+0x98>
 8006e56:	2301      	movs	r3, #1
 8006e58:	e000      	b.n	8006e5c <HAL_GPIO_DeInit+0x98>
 8006e5a:	2300      	movs	r3, #0
 8006e5c:	697a      	ldr	r2, [r7, #20]
 8006e5e:	f002 0203 	and.w	r2, r2, #3
 8006e62:	0092      	lsls	r2, r2, #2
 8006e64:	4093      	lsls	r3, r2
 8006e66:	68ba      	ldr	r2, [r7, #8]
 8006e68:	429a      	cmp	r2, r3
 8006e6a:	d132      	bne.n	8006ed2 <HAL_GPIO_DeInit+0x10e>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8006e6c:	4b46      	ldr	r3, [pc, #280]	; (8006f88 <HAL_GPIO_DeInit+0x1c4>)
 8006e6e:	681a      	ldr	r2, [r3, #0]
 8006e70:	68fb      	ldr	r3, [r7, #12]
 8006e72:	43db      	mvns	r3, r3
 8006e74:	4944      	ldr	r1, [pc, #272]	; (8006f88 <HAL_GPIO_DeInit+0x1c4>)
 8006e76:	4013      	ands	r3, r2
 8006e78:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8006e7a:	4b43      	ldr	r3, [pc, #268]	; (8006f88 <HAL_GPIO_DeInit+0x1c4>)
 8006e7c:	685a      	ldr	r2, [r3, #4]
 8006e7e:	68fb      	ldr	r3, [r7, #12]
 8006e80:	43db      	mvns	r3, r3
 8006e82:	4941      	ldr	r1, [pc, #260]	; (8006f88 <HAL_GPIO_DeInit+0x1c4>)
 8006e84:	4013      	ands	r3, r2
 8006e86:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8006e88:	4b3f      	ldr	r3, [pc, #252]	; (8006f88 <HAL_GPIO_DeInit+0x1c4>)
 8006e8a:	68da      	ldr	r2, [r3, #12]
 8006e8c:	68fb      	ldr	r3, [r7, #12]
 8006e8e:	43db      	mvns	r3, r3
 8006e90:	493d      	ldr	r1, [pc, #244]	; (8006f88 <HAL_GPIO_DeInit+0x1c4>)
 8006e92:	4013      	ands	r3, r2
 8006e94:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8006e96:	4b3c      	ldr	r3, [pc, #240]	; (8006f88 <HAL_GPIO_DeInit+0x1c4>)
 8006e98:	689a      	ldr	r2, [r3, #8]
 8006e9a:	68fb      	ldr	r3, [r7, #12]
 8006e9c:	43db      	mvns	r3, r3
 8006e9e:	493a      	ldr	r1, [pc, #232]	; (8006f88 <HAL_GPIO_DeInit+0x1c4>)
 8006ea0:	4013      	ands	r3, r2
 8006ea2:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 8006ea4:	697b      	ldr	r3, [r7, #20]
 8006ea6:	f003 0303 	and.w	r3, r3, #3
 8006eaa:	009b      	lsls	r3, r3, #2
 8006eac:	220f      	movs	r2, #15
 8006eae:	fa02 f303 	lsl.w	r3, r2, r3
 8006eb2:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8006eb4:	4a2e      	ldr	r2, [pc, #184]	; (8006f70 <HAL_GPIO_DeInit+0x1ac>)
 8006eb6:	697b      	ldr	r3, [r7, #20]
 8006eb8:	089b      	lsrs	r3, r3, #2
 8006eba:	3302      	adds	r3, #2
 8006ebc:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8006ec0:	68bb      	ldr	r3, [r7, #8]
 8006ec2:	43da      	mvns	r2, r3
 8006ec4:	482a      	ldr	r0, [pc, #168]	; (8006f70 <HAL_GPIO_DeInit+0x1ac>)
 8006ec6:	697b      	ldr	r3, [r7, #20]
 8006ec8:	089b      	lsrs	r3, r3, #2
 8006eca:	400a      	ands	r2, r1
 8006ecc:	3302      	adds	r3, #2
 8006ece:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	681a      	ldr	r2, [r3, #0]
 8006ed6:	697b      	ldr	r3, [r7, #20]
 8006ed8:	005b      	lsls	r3, r3, #1
 8006eda:	2103      	movs	r1, #3
 8006edc:	fa01 f303 	lsl.w	r3, r1, r3
 8006ee0:	43db      	mvns	r3, r3
 8006ee2:	401a      	ands	r2, r3
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8006ee8:	697b      	ldr	r3, [r7, #20]
 8006eea:	08da      	lsrs	r2, r3, #3
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	3208      	adds	r2, #8
 8006ef0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006ef4:	697b      	ldr	r3, [r7, #20]
 8006ef6:	f003 0307 	and.w	r3, r3, #7
 8006efa:	009b      	lsls	r3, r3, #2
 8006efc:	220f      	movs	r2, #15
 8006efe:	fa02 f303 	lsl.w	r3, r2, r3
 8006f02:	43db      	mvns	r3, r3
 8006f04:	697a      	ldr	r2, [r7, #20]
 8006f06:	08d2      	lsrs	r2, r2, #3
 8006f08:	4019      	ands	r1, r3
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	3208      	adds	r2, #8
 8006f0e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	68da      	ldr	r2, [r3, #12]
 8006f16:	697b      	ldr	r3, [r7, #20]
 8006f18:	005b      	lsls	r3, r3, #1
 8006f1a:	2103      	movs	r1, #3
 8006f1c:	fa01 f303 	lsl.w	r3, r1, r3
 8006f20:	43db      	mvns	r3, r3
 8006f22:	401a      	ands	r2, r3
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	685a      	ldr	r2, [r3, #4]
 8006f2c:	2101      	movs	r1, #1
 8006f2e:	697b      	ldr	r3, [r7, #20]
 8006f30:	fa01 f303 	lsl.w	r3, r1, r3
 8006f34:	43db      	mvns	r3, r3
 8006f36:	401a      	ands	r2, r3
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	689a      	ldr	r2, [r3, #8]
 8006f40:	697b      	ldr	r3, [r7, #20]
 8006f42:	005b      	lsls	r3, r3, #1
 8006f44:	2103      	movs	r1, #3
 8006f46:	fa01 f303 	lsl.w	r3, r1, r3
 8006f4a:	43db      	mvns	r3, r3
 8006f4c:	401a      	ands	r2, r3
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8006f52:	697b      	ldr	r3, [r7, #20]
 8006f54:	3301      	adds	r3, #1
 8006f56:	617b      	str	r3, [r7, #20]
 8006f58:	697b      	ldr	r3, [r7, #20]
 8006f5a:	2b0f      	cmp	r3, #15
 8006f5c:	f67f af40 	bls.w	8006de0 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8006f60:	bf00      	nop
 8006f62:	bf00      	nop
 8006f64:	371c      	adds	r7, #28
 8006f66:	46bd      	mov	sp, r7
 8006f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f6c:	4770      	bx	lr
 8006f6e:	bf00      	nop
 8006f70:	40013800 	.word	0x40013800
 8006f74:	40020000 	.word	0x40020000
 8006f78:	40020400 	.word	0x40020400
 8006f7c:	40020800 	.word	0x40020800
 8006f80:	40020c00 	.word	0x40020c00
 8006f84:	40021000 	.word	0x40021000
 8006f88:	40013c00 	.word	0x40013c00

08006f8c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006f8c:	b480      	push	{r7}
 8006f8e:	b083      	sub	sp, #12
 8006f90:	af00      	add	r7, sp, #0
 8006f92:	6078      	str	r0, [r7, #4]
 8006f94:	460b      	mov	r3, r1
 8006f96:	807b      	strh	r3, [r7, #2]
 8006f98:	4613      	mov	r3, r2
 8006f9a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8006f9c:	787b      	ldrb	r3, [r7, #1]
 8006f9e:	2b00      	cmp	r3, #0
 8006fa0:	d003      	beq.n	8006faa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8006fa2:	887a      	ldrh	r2, [r7, #2]
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8006fa8:	e003      	b.n	8006fb2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8006faa:	887b      	ldrh	r3, [r7, #2]
 8006fac:	041a      	lsls	r2, r3, #16
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	619a      	str	r2, [r3, #24]
}
 8006fb2:	bf00      	nop
 8006fb4:	370c      	adds	r7, #12
 8006fb6:	46bd      	mov	sp, r7
 8006fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fbc:	4770      	bx	lr
	...

08006fc0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8006fc0:	b580      	push	{r7, lr}
 8006fc2:	b084      	sub	sp, #16
 8006fc4:	af00      	add	r7, sp, #0
 8006fc6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	2b00      	cmp	r3, #0
 8006fcc:	d101      	bne.n	8006fd2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8006fce:	2301      	movs	r3, #1
 8006fd0:	e12b      	b.n	800722a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006fd8:	b2db      	uxtb	r3, r3
 8006fda:	2b00      	cmp	r3, #0
 8006fdc:	d106      	bne.n	8006fec <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	2200      	movs	r2, #0
 8006fe2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8006fe6:	6878      	ldr	r0, [r7, #4]
 8006fe8:	f000 f95d 	bl	80072a6 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	2224      	movs	r2, #36	; 0x24
 8006ff0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	681a      	ldr	r2, [r3, #0]
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	681b      	ldr	r3, [r3, #0]
 8006ffe:	f022 0201 	bic.w	r2, r2, #1
 8007002:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	681a      	ldr	r2, [r3, #0]
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	681b      	ldr	r3, [r3, #0]
 800700e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007012:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	681a      	ldr	r2, [r3, #0]
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	681b      	ldr	r3, [r3, #0]
 800701e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8007022:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8007024:	f001 fc5a 	bl	80088dc <HAL_RCC_GetPCLK1Freq>
 8007028:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	685b      	ldr	r3, [r3, #4]
 800702e:	4a81      	ldr	r2, [pc, #516]	; (8007234 <HAL_I2C_Init+0x274>)
 8007030:	4293      	cmp	r3, r2
 8007032:	d807      	bhi.n	8007044 <HAL_I2C_Init+0x84>
 8007034:	68fb      	ldr	r3, [r7, #12]
 8007036:	4a80      	ldr	r2, [pc, #512]	; (8007238 <HAL_I2C_Init+0x278>)
 8007038:	4293      	cmp	r3, r2
 800703a:	bf94      	ite	ls
 800703c:	2301      	movls	r3, #1
 800703e:	2300      	movhi	r3, #0
 8007040:	b2db      	uxtb	r3, r3
 8007042:	e006      	b.n	8007052 <HAL_I2C_Init+0x92>
 8007044:	68fb      	ldr	r3, [r7, #12]
 8007046:	4a7d      	ldr	r2, [pc, #500]	; (800723c <HAL_I2C_Init+0x27c>)
 8007048:	4293      	cmp	r3, r2
 800704a:	bf94      	ite	ls
 800704c:	2301      	movls	r3, #1
 800704e:	2300      	movhi	r3, #0
 8007050:	b2db      	uxtb	r3, r3
 8007052:	2b00      	cmp	r3, #0
 8007054:	d001      	beq.n	800705a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8007056:	2301      	movs	r3, #1
 8007058:	e0e7      	b.n	800722a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800705a:	68fb      	ldr	r3, [r7, #12]
 800705c:	4a78      	ldr	r2, [pc, #480]	; (8007240 <HAL_I2C_Init+0x280>)
 800705e:	fba2 2303 	umull	r2, r3, r2, r3
 8007062:	0c9b      	lsrs	r3, r3, #18
 8007064:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	685b      	ldr	r3, [r3, #4]
 800706c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	681b      	ldr	r3, [r3, #0]
 8007074:	68ba      	ldr	r2, [r7, #8]
 8007076:	430a      	orrs	r2, r1
 8007078:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	681b      	ldr	r3, [r3, #0]
 800707e:	6a1b      	ldr	r3, [r3, #32]
 8007080:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	685b      	ldr	r3, [r3, #4]
 8007088:	4a6a      	ldr	r2, [pc, #424]	; (8007234 <HAL_I2C_Init+0x274>)
 800708a:	4293      	cmp	r3, r2
 800708c:	d802      	bhi.n	8007094 <HAL_I2C_Init+0xd4>
 800708e:	68bb      	ldr	r3, [r7, #8]
 8007090:	3301      	adds	r3, #1
 8007092:	e009      	b.n	80070a8 <HAL_I2C_Init+0xe8>
 8007094:	68bb      	ldr	r3, [r7, #8]
 8007096:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800709a:	fb02 f303 	mul.w	r3, r2, r3
 800709e:	4a69      	ldr	r2, [pc, #420]	; (8007244 <HAL_I2C_Init+0x284>)
 80070a0:	fba2 2303 	umull	r2, r3, r2, r3
 80070a4:	099b      	lsrs	r3, r3, #6
 80070a6:	3301      	adds	r3, #1
 80070a8:	687a      	ldr	r2, [r7, #4]
 80070aa:	6812      	ldr	r2, [r2, #0]
 80070ac:	430b      	orrs	r3, r1
 80070ae:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	69db      	ldr	r3, [r3, #28]
 80070b6:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80070ba:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	685b      	ldr	r3, [r3, #4]
 80070c2:	495c      	ldr	r1, [pc, #368]	; (8007234 <HAL_I2C_Init+0x274>)
 80070c4:	428b      	cmp	r3, r1
 80070c6:	d819      	bhi.n	80070fc <HAL_I2C_Init+0x13c>
 80070c8:	68fb      	ldr	r3, [r7, #12]
 80070ca:	1e59      	subs	r1, r3, #1
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	685b      	ldr	r3, [r3, #4]
 80070d0:	005b      	lsls	r3, r3, #1
 80070d2:	fbb1 f3f3 	udiv	r3, r1, r3
 80070d6:	1c59      	adds	r1, r3, #1
 80070d8:	f640 73fc 	movw	r3, #4092	; 0xffc
 80070dc:	400b      	ands	r3, r1
 80070de:	2b00      	cmp	r3, #0
 80070e0:	d00a      	beq.n	80070f8 <HAL_I2C_Init+0x138>
 80070e2:	68fb      	ldr	r3, [r7, #12]
 80070e4:	1e59      	subs	r1, r3, #1
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	685b      	ldr	r3, [r3, #4]
 80070ea:	005b      	lsls	r3, r3, #1
 80070ec:	fbb1 f3f3 	udiv	r3, r1, r3
 80070f0:	3301      	adds	r3, #1
 80070f2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80070f6:	e051      	b.n	800719c <HAL_I2C_Init+0x1dc>
 80070f8:	2304      	movs	r3, #4
 80070fa:	e04f      	b.n	800719c <HAL_I2C_Init+0x1dc>
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	689b      	ldr	r3, [r3, #8]
 8007100:	2b00      	cmp	r3, #0
 8007102:	d111      	bne.n	8007128 <HAL_I2C_Init+0x168>
 8007104:	68fb      	ldr	r3, [r7, #12]
 8007106:	1e58      	subs	r0, r3, #1
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	6859      	ldr	r1, [r3, #4]
 800710c:	460b      	mov	r3, r1
 800710e:	005b      	lsls	r3, r3, #1
 8007110:	440b      	add	r3, r1
 8007112:	fbb0 f3f3 	udiv	r3, r0, r3
 8007116:	3301      	adds	r3, #1
 8007118:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800711c:	2b00      	cmp	r3, #0
 800711e:	bf0c      	ite	eq
 8007120:	2301      	moveq	r3, #1
 8007122:	2300      	movne	r3, #0
 8007124:	b2db      	uxtb	r3, r3
 8007126:	e012      	b.n	800714e <HAL_I2C_Init+0x18e>
 8007128:	68fb      	ldr	r3, [r7, #12]
 800712a:	1e58      	subs	r0, r3, #1
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	6859      	ldr	r1, [r3, #4]
 8007130:	460b      	mov	r3, r1
 8007132:	009b      	lsls	r3, r3, #2
 8007134:	440b      	add	r3, r1
 8007136:	0099      	lsls	r1, r3, #2
 8007138:	440b      	add	r3, r1
 800713a:	fbb0 f3f3 	udiv	r3, r0, r3
 800713e:	3301      	adds	r3, #1
 8007140:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007144:	2b00      	cmp	r3, #0
 8007146:	bf0c      	ite	eq
 8007148:	2301      	moveq	r3, #1
 800714a:	2300      	movne	r3, #0
 800714c:	b2db      	uxtb	r3, r3
 800714e:	2b00      	cmp	r3, #0
 8007150:	d001      	beq.n	8007156 <HAL_I2C_Init+0x196>
 8007152:	2301      	movs	r3, #1
 8007154:	e022      	b.n	800719c <HAL_I2C_Init+0x1dc>
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	689b      	ldr	r3, [r3, #8]
 800715a:	2b00      	cmp	r3, #0
 800715c:	d10e      	bne.n	800717c <HAL_I2C_Init+0x1bc>
 800715e:	68fb      	ldr	r3, [r7, #12]
 8007160:	1e58      	subs	r0, r3, #1
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	6859      	ldr	r1, [r3, #4]
 8007166:	460b      	mov	r3, r1
 8007168:	005b      	lsls	r3, r3, #1
 800716a:	440b      	add	r3, r1
 800716c:	fbb0 f3f3 	udiv	r3, r0, r3
 8007170:	3301      	adds	r3, #1
 8007172:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007176:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800717a:	e00f      	b.n	800719c <HAL_I2C_Init+0x1dc>
 800717c:	68fb      	ldr	r3, [r7, #12]
 800717e:	1e58      	subs	r0, r3, #1
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	6859      	ldr	r1, [r3, #4]
 8007184:	460b      	mov	r3, r1
 8007186:	009b      	lsls	r3, r3, #2
 8007188:	440b      	add	r3, r1
 800718a:	0099      	lsls	r1, r3, #2
 800718c:	440b      	add	r3, r1
 800718e:	fbb0 f3f3 	udiv	r3, r0, r3
 8007192:	3301      	adds	r3, #1
 8007194:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007198:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800719c:	6879      	ldr	r1, [r7, #4]
 800719e:	6809      	ldr	r1, [r1, #0]
 80071a0:	4313      	orrs	r3, r2
 80071a2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	681b      	ldr	r3, [r3, #0]
 80071a8:	681b      	ldr	r3, [r3, #0]
 80071aa:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	69da      	ldr	r2, [r3, #28]
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	6a1b      	ldr	r3, [r3, #32]
 80071b6:	431a      	orrs	r2, r3
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	430a      	orrs	r2, r1
 80071be:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	681b      	ldr	r3, [r3, #0]
 80071c4:	689b      	ldr	r3, [r3, #8]
 80071c6:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80071ca:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80071ce:	687a      	ldr	r2, [r7, #4]
 80071d0:	6911      	ldr	r1, [r2, #16]
 80071d2:	687a      	ldr	r2, [r7, #4]
 80071d4:	68d2      	ldr	r2, [r2, #12]
 80071d6:	4311      	orrs	r1, r2
 80071d8:	687a      	ldr	r2, [r7, #4]
 80071da:	6812      	ldr	r2, [r2, #0]
 80071dc:	430b      	orrs	r3, r1
 80071de:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	681b      	ldr	r3, [r3, #0]
 80071e4:	68db      	ldr	r3, [r3, #12]
 80071e6:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	695a      	ldr	r2, [r3, #20]
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	699b      	ldr	r3, [r3, #24]
 80071f2:	431a      	orrs	r2, r3
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	430a      	orrs	r2, r1
 80071fa:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	681b      	ldr	r3, [r3, #0]
 8007200:	681a      	ldr	r2, [r3, #0]
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	681b      	ldr	r3, [r3, #0]
 8007206:	f042 0201 	orr.w	r2, r2, #1
 800720a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	2200      	movs	r2, #0
 8007210:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	2220      	movs	r2, #32
 8007216:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	2200      	movs	r2, #0
 800721e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	2200      	movs	r2, #0
 8007224:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8007228:	2300      	movs	r3, #0
}
 800722a:	4618      	mov	r0, r3
 800722c:	3710      	adds	r7, #16
 800722e:	46bd      	mov	sp, r7
 8007230:	bd80      	pop	{r7, pc}
 8007232:	bf00      	nop
 8007234:	000186a0 	.word	0x000186a0
 8007238:	001e847f 	.word	0x001e847f
 800723c:	003d08ff 	.word	0x003d08ff
 8007240:	431bde83 	.word	0x431bde83
 8007244:	10624dd3 	.word	0x10624dd3

08007248 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8007248:	b580      	push	{r7, lr}
 800724a:	b082      	sub	sp, #8
 800724c:	af00      	add	r7, sp, #0
 800724e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	2b00      	cmp	r3, #0
 8007254:	d101      	bne.n	800725a <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8007256:	2301      	movs	r3, #1
 8007258:	e021      	b.n	800729e <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	2224      	movs	r2, #36	; 0x24
 800725e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	681b      	ldr	r3, [r3, #0]
 8007266:	681a      	ldr	r2, [r3, #0]
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	f022 0201 	bic.w	r2, r2, #1
 8007270:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8007272:	6878      	ldr	r0, [r7, #4]
 8007274:	f000 f821 	bl	80072ba <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	2200      	movs	r2, #0
 800727c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State         = HAL_I2C_STATE_RESET;
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	2200      	movs	r2, #0
 8007282:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	2200      	movs	r2, #0
 800728a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	2200      	movs	r2, #0
 8007290:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	2200      	movs	r2, #0
 8007298:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800729c:	2300      	movs	r3, #0
}
 800729e:	4618      	mov	r0, r3
 80072a0:	3708      	adds	r7, #8
 80072a2:	46bd      	mov	sp, r7
 80072a4:	bd80      	pop	{r7, pc}

080072a6 <HAL_I2C_MspInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspInit(I2C_HandleTypeDef *hi2c)
{
 80072a6:	b480      	push	{r7}
 80072a8:	b083      	sub	sp, #12
 80072aa:	af00      	add	r7, sp, #0
 80072ac:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspInit could be implemented in the user file
   */
}
 80072ae:	bf00      	nop
 80072b0:	370c      	adds	r7, #12
 80072b2:	46bd      	mov	sp, r7
 80072b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072b8:	4770      	bx	lr

080072ba <HAL_I2C_MspDeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspDeInit(I2C_HandleTypeDef *hi2c)
{
 80072ba:	b480      	push	{r7}
 80072bc:	b083      	sub	sp, #12
 80072be:	af00      	add	r7, sp, #0
 80072c0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspDeInit could be implemented in the user file
   */
}
 80072c2:	bf00      	nop
 80072c4:	370c      	adds	r7, #12
 80072c6:	46bd      	mov	sp, r7
 80072c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072cc:	4770      	bx	lr
	...

080072d0 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80072d0:	b580      	push	{r7, lr}
 80072d2:	b088      	sub	sp, #32
 80072d4:	af02      	add	r7, sp, #8
 80072d6:	60f8      	str	r0, [r7, #12]
 80072d8:	4608      	mov	r0, r1
 80072da:	4611      	mov	r1, r2
 80072dc:	461a      	mov	r2, r3
 80072de:	4603      	mov	r3, r0
 80072e0:	817b      	strh	r3, [r7, #10]
 80072e2:	460b      	mov	r3, r1
 80072e4:	813b      	strh	r3, [r7, #8]
 80072e6:	4613      	mov	r3, r2
 80072e8:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80072ea:	f7ff fad1 	bl	8006890 <HAL_GetTick>
 80072ee:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80072f0:	68fb      	ldr	r3, [r7, #12]
 80072f2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80072f6:	b2db      	uxtb	r3, r3
 80072f8:	2b20      	cmp	r3, #32
 80072fa:	f040 80d9 	bne.w	80074b0 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80072fe:	697b      	ldr	r3, [r7, #20]
 8007300:	9300      	str	r3, [sp, #0]
 8007302:	2319      	movs	r3, #25
 8007304:	2201      	movs	r2, #1
 8007306:	496d      	ldr	r1, [pc, #436]	; (80074bc <HAL_I2C_Mem_Write+0x1ec>)
 8007308:	68f8      	ldr	r0, [r7, #12]
 800730a:	f000 fc99 	bl	8007c40 <I2C_WaitOnFlagUntilTimeout>
 800730e:	4603      	mov	r3, r0
 8007310:	2b00      	cmp	r3, #0
 8007312:	d001      	beq.n	8007318 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8007314:	2302      	movs	r3, #2
 8007316:	e0cc      	b.n	80074b2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007318:	68fb      	ldr	r3, [r7, #12]
 800731a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800731e:	2b01      	cmp	r3, #1
 8007320:	d101      	bne.n	8007326 <HAL_I2C_Mem_Write+0x56>
 8007322:	2302      	movs	r3, #2
 8007324:	e0c5      	b.n	80074b2 <HAL_I2C_Mem_Write+0x1e2>
 8007326:	68fb      	ldr	r3, [r7, #12]
 8007328:	2201      	movs	r2, #1
 800732a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800732e:	68fb      	ldr	r3, [r7, #12]
 8007330:	681b      	ldr	r3, [r3, #0]
 8007332:	681b      	ldr	r3, [r3, #0]
 8007334:	f003 0301 	and.w	r3, r3, #1
 8007338:	2b01      	cmp	r3, #1
 800733a:	d007      	beq.n	800734c <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800733c:	68fb      	ldr	r3, [r7, #12]
 800733e:	681b      	ldr	r3, [r3, #0]
 8007340:	681a      	ldr	r2, [r3, #0]
 8007342:	68fb      	ldr	r3, [r7, #12]
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	f042 0201 	orr.w	r2, r2, #1
 800734a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800734c:	68fb      	ldr	r3, [r7, #12]
 800734e:	681b      	ldr	r3, [r3, #0]
 8007350:	681a      	ldr	r2, [r3, #0]
 8007352:	68fb      	ldr	r3, [r7, #12]
 8007354:	681b      	ldr	r3, [r3, #0]
 8007356:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800735a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800735c:	68fb      	ldr	r3, [r7, #12]
 800735e:	2221      	movs	r2, #33	; 0x21
 8007360:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8007364:	68fb      	ldr	r3, [r7, #12]
 8007366:	2240      	movs	r2, #64	; 0x40
 8007368:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800736c:	68fb      	ldr	r3, [r7, #12]
 800736e:	2200      	movs	r2, #0
 8007370:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8007372:	68fb      	ldr	r3, [r7, #12]
 8007374:	6a3a      	ldr	r2, [r7, #32]
 8007376:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8007378:	68fb      	ldr	r3, [r7, #12]
 800737a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800737c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800737e:	68fb      	ldr	r3, [r7, #12]
 8007380:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007382:	b29a      	uxth	r2, r3
 8007384:	68fb      	ldr	r3, [r7, #12]
 8007386:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8007388:	68fb      	ldr	r3, [r7, #12]
 800738a:	4a4d      	ldr	r2, [pc, #308]	; (80074c0 <HAL_I2C_Mem_Write+0x1f0>)
 800738c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800738e:	88f8      	ldrh	r0, [r7, #6]
 8007390:	893a      	ldrh	r2, [r7, #8]
 8007392:	8979      	ldrh	r1, [r7, #10]
 8007394:	697b      	ldr	r3, [r7, #20]
 8007396:	9301      	str	r3, [sp, #4]
 8007398:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800739a:	9300      	str	r3, [sp, #0]
 800739c:	4603      	mov	r3, r0
 800739e:	68f8      	ldr	r0, [r7, #12]
 80073a0:	f000 fad0 	bl	8007944 <I2C_RequestMemoryWrite>
 80073a4:	4603      	mov	r3, r0
 80073a6:	2b00      	cmp	r3, #0
 80073a8:	d052      	beq.n	8007450 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80073aa:	2301      	movs	r3, #1
 80073ac:	e081      	b.n	80074b2 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80073ae:	697a      	ldr	r2, [r7, #20]
 80073b0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80073b2:	68f8      	ldr	r0, [r7, #12]
 80073b4:	f000 fd1a 	bl	8007dec <I2C_WaitOnTXEFlagUntilTimeout>
 80073b8:	4603      	mov	r3, r0
 80073ba:	2b00      	cmp	r3, #0
 80073bc:	d00d      	beq.n	80073da <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80073be:	68fb      	ldr	r3, [r7, #12]
 80073c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073c2:	2b04      	cmp	r3, #4
 80073c4:	d107      	bne.n	80073d6 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80073c6:	68fb      	ldr	r3, [r7, #12]
 80073c8:	681b      	ldr	r3, [r3, #0]
 80073ca:	681a      	ldr	r2, [r3, #0]
 80073cc:	68fb      	ldr	r3, [r7, #12]
 80073ce:	681b      	ldr	r3, [r3, #0]
 80073d0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80073d4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80073d6:	2301      	movs	r3, #1
 80073d8:	e06b      	b.n	80074b2 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80073da:	68fb      	ldr	r3, [r7, #12]
 80073dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073de:	781a      	ldrb	r2, [r3, #0]
 80073e0:	68fb      	ldr	r3, [r7, #12]
 80073e2:	681b      	ldr	r3, [r3, #0]
 80073e4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80073e6:	68fb      	ldr	r3, [r7, #12]
 80073e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073ea:	1c5a      	adds	r2, r3, #1
 80073ec:	68fb      	ldr	r3, [r7, #12]
 80073ee:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 80073f0:	68fb      	ldr	r3, [r7, #12]
 80073f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80073f4:	3b01      	subs	r3, #1
 80073f6:	b29a      	uxth	r2, r3
 80073f8:	68fb      	ldr	r3, [r7, #12]
 80073fa:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80073fc:	68fb      	ldr	r3, [r7, #12]
 80073fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007400:	b29b      	uxth	r3, r3
 8007402:	3b01      	subs	r3, #1
 8007404:	b29a      	uxth	r2, r3
 8007406:	68fb      	ldr	r3, [r7, #12]
 8007408:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800740a:	68fb      	ldr	r3, [r7, #12]
 800740c:	681b      	ldr	r3, [r3, #0]
 800740e:	695b      	ldr	r3, [r3, #20]
 8007410:	f003 0304 	and.w	r3, r3, #4
 8007414:	2b04      	cmp	r3, #4
 8007416:	d11b      	bne.n	8007450 <HAL_I2C_Mem_Write+0x180>
 8007418:	68fb      	ldr	r3, [r7, #12]
 800741a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800741c:	2b00      	cmp	r3, #0
 800741e:	d017      	beq.n	8007450 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8007420:	68fb      	ldr	r3, [r7, #12]
 8007422:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007424:	781a      	ldrb	r2, [r3, #0]
 8007426:	68fb      	ldr	r3, [r7, #12]
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800742c:	68fb      	ldr	r3, [r7, #12]
 800742e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007430:	1c5a      	adds	r2, r3, #1
 8007432:	68fb      	ldr	r3, [r7, #12]
 8007434:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8007436:	68fb      	ldr	r3, [r7, #12]
 8007438:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800743a:	3b01      	subs	r3, #1
 800743c:	b29a      	uxth	r2, r3
 800743e:	68fb      	ldr	r3, [r7, #12]
 8007440:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8007442:	68fb      	ldr	r3, [r7, #12]
 8007444:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007446:	b29b      	uxth	r3, r3
 8007448:	3b01      	subs	r3, #1
 800744a:	b29a      	uxth	r2, r3
 800744c:	68fb      	ldr	r3, [r7, #12]
 800744e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8007450:	68fb      	ldr	r3, [r7, #12]
 8007452:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007454:	2b00      	cmp	r3, #0
 8007456:	d1aa      	bne.n	80073ae <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007458:	697a      	ldr	r2, [r7, #20]
 800745a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800745c:	68f8      	ldr	r0, [r7, #12]
 800745e:	f000 fd06 	bl	8007e6e <I2C_WaitOnBTFFlagUntilTimeout>
 8007462:	4603      	mov	r3, r0
 8007464:	2b00      	cmp	r3, #0
 8007466:	d00d      	beq.n	8007484 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007468:	68fb      	ldr	r3, [r7, #12]
 800746a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800746c:	2b04      	cmp	r3, #4
 800746e:	d107      	bne.n	8007480 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007470:	68fb      	ldr	r3, [r7, #12]
 8007472:	681b      	ldr	r3, [r3, #0]
 8007474:	681a      	ldr	r2, [r3, #0]
 8007476:	68fb      	ldr	r3, [r7, #12]
 8007478:	681b      	ldr	r3, [r3, #0]
 800747a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800747e:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8007480:	2301      	movs	r3, #1
 8007482:	e016      	b.n	80074b2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007484:	68fb      	ldr	r3, [r7, #12]
 8007486:	681b      	ldr	r3, [r3, #0]
 8007488:	681a      	ldr	r2, [r3, #0]
 800748a:	68fb      	ldr	r3, [r7, #12]
 800748c:	681b      	ldr	r3, [r3, #0]
 800748e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007492:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007494:	68fb      	ldr	r3, [r7, #12]
 8007496:	2220      	movs	r2, #32
 8007498:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800749c:	68fb      	ldr	r3, [r7, #12]
 800749e:	2200      	movs	r2, #0
 80074a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80074a4:	68fb      	ldr	r3, [r7, #12]
 80074a6:	2200      	movs	r2, #0
 80074a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80074ac:	2300      	movs	r3, #0
 80074ae:	e000      	b.n	80074b2 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80074b0:	2302      	movs	r3, #2
  }
}
 80074b2:	4618      	mov	r0, r3
 80074b4:	3718      	adds	r7, #24
 80074b6:	46bd      	mov	sp, r7
 80074b8:	bd80      	pop	{r7, pc}
 80074ba:	bf00      	nop
 80074bc:	00100002 	.word	0x00100002
 80074c0:	ffff0000 	.word	0xffff0000

080074c4 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80074c4:	b580      	push	{r7, lr}
 80074c6:	b08c      	sub	sp, #48	; 0x30
 80074c8:	af02      	add	r7, sp, #8
 80074ca:	60f8      	str	r0, [r7, #12]
 80074cc:	4608      	mov	r0, r1
 80074ce:	4611      	mov	r1, r2
 80074d0:	461a      	mov	r2, r3
 80074d2:	4603      	mov	r3, r0
 80074d4:	817b      	strh	r3, [r7, #10]
 80074d6:	460b      	mov	r3, r1
 80074d8:	813b      	strh	r3, [r7, #8]
 80074da:	4613      	mov	r3, r2
 80074dc:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80074de:	f7ff f9d7 	bl	8006890 <HAL_GetTick>
 80074e2:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80074e4:	68fb      	ldr	r3, [r7, #12]
 80074e6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80074ea:	b2db      	uxtb	r3, r3
 80074ec:	2b20      	cmp	r3, #32
 80074ee:	f040 8208 	bne.w	8007902 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80074f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074f4:	9300      	str	r3, [sp, #0]
 80074f6:	2319      	movs	r3, #25
 80074f8:	2201      	movs	r2, #1
 80074fa:	497b      	ldr	r1, [pc, #492]	; (80076e8 <HAL_I2C_Mem_Read+0x224>)
 80074fc:	68f8      	ldr	r0, [r7, #12]
 80074fe:	f000 fb9f 	bl	8007c40 <I2C_WaitOnFlagUntilTimeout>
 8007502:	4603      	mov	r3, r0
 8007504:	2b00      	cmp	r3, #0
 8007506:	d001      	beq.n	800750c <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8007508:	2302      	movs	r3, #2
 800750a:	e1fb      	b.n	8007904 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800750c:	68fb      	ldr	r3, [r7, #12]
 800750e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007512:	2b01      	cmp	r3, #1
 8007514:	d101      	bne.n	800751a <HAL_I2C_Mem_Read+0x56>
 8007516:	2302      	movs	r3, #2
 8007518:	e1f4      	b.n	8007904 <HAL_I2C_Mem_Read+0x440>
 800751a:	68fb      	ldr	r3, [r7, #12]
 800751c:	2201      	movs	r2, #1
 800751e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8007522:	68fb      	ldr	r3, [r7, #12]
 8007524:	681b      	ldr	r3, [r3, #0]
 8007526:	681b      	ldr	r3, [r3, #0]
 8007528:	f003 0301 	and.w	r3, r3, #1
 800752c:	2b01      	cmp	r3, #1
 800752e:	d007      	beq.n	8007540 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8007530:	68fb      	ldr	r3, [r7, #12]
 8007532:	681b      	ldr	r3, [r3, #0]
 8007534:	681a      	ldr	r2, [r3, #0]
 8007536:	68fb      	ldr	r3, [r7, #12]
 8007538:	681b      	ldr	r3, [r3, #0]
 800753a:	f042 0201 	orr.w	r2, r2, #1
 800753e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8007540:	68fb      	ldr	r3, [r7, #12]
 8007542:	681b      	ldr	r3, [r3, #0]
 8007544:	681a      	ldr	r2, [r3, #0]
 8007546:	68fb      	ldr	r3, [r7, #12]
 8007548:	681b      	ldr	r3, [r3, #0]
 800754a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800754e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8007550:	68fb      	ldr	r3, [r7, #12]
 8007552:	2222      	movs	r2, #34	; 0x22
 8007554:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8007558:	68fb      	ldr	r3, [r7, #12]
 800755a:	2240      	movs	r2, #64	; 0x40
 800755c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007560:	68fb      	ldr	r3, [r7, #12]
 8007562:	2200      	movs	r2, #0
 8007564:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8007566:	68fb      	ldr	r3, [r7, #12]
 8007568:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800756a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800756c:	68fb      	ldr	r3, [r7, #12]
 800756e:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8007570:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8007572:	68fb      	ldr	r3, [r7, #12]
 8007574:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007576:	b29a      	uxth	r2, r3
 8007578:	68fb      	ldr	r3, [r7, #12]
 800757a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800757c:	68fb      	ldr	r3, [r7, #12]
 800757e:	4a5b      	ldr	r2, [pc, #364]	; (80076ec <HAL_I2C_Mem_Read+0x228>)
 8007580:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8007582:	88f8      	ldrh	r0, [r7, #6]
 8007584:	893a      	ldrh	r2, [r7, #8]
 8007586:	8979      	ldrh	r1, [r7, #10]
 8007588:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800758a:	9301      	str	r3, [sp, #4]
 800758c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800758e:	9300      	str	r3, [sp, #0]
 8007590:	4603      	mov	r3, r0
 8007592:	68f8      	ldr	r0, [r7, #12]
 8007594:	f000 fa6c 	bl	8007a70 <I2C_RequestMemoryRead>
 8007598:	4603      	mov	r3, r0
 800759a:	2b00      	cmp	r3, #0
 800759c:	d001      	beq.n	80075a2 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 800759e:	2301      	movs	r3, #1
 80075a0:	e1b0      	b.n	8007904 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 80075a2:	68fb      	ldr	r3, [r7, #12]
 80075a4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80075a6:	2b00      	cmp	r3, #0
 80075a8:	d113      	bne.n	80075d2 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80075aa:	2300      	movs	r3, #0
 80075ac:	623b      	str	r3, [r7, #32]
 80075ae:	68fb      	ldr	r3, [r7, #12]
 80075b0:	681b      	ldr	r3, [r3, #0]
 80075b2:	695b      	ldr	r3, [r3, #20]
 80075b4:	623b      	str	r3, [r7, #32]
 80075b6:	68fb      	ldr	r3, [r7, #12]
 80075b8:	681b      	ldr	r3, [r3, #0]
 80075ba:	699b      	ldr	r3, [r3, #24]
 80075bc:	623b      	str	r3, [r7, #32]
 80075be:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80075c0:	68fb      	ldr	r3, [r7, #12]
 80075c2:	681b      	ldr	r3, [r3, #0]
 80075c4:	681a      	ldr	r2, [r3, #0]
 80075c6:	68fb      	ldr	r3, [r7, #12]
 80075c8:	681b      	ldr	r3, [r3, #0]
 80075ca:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80075ce:	601a      	str	r2, [r3, #0]
 80075d0:	e184      	b.n	80078dc <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 80075d2:	68fb      	ldr	r3, [r7, #12]
 80075d4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80075d6:	2b01      	cmp	r3, #1
 80075d8:	d11b      	bne.n	8007612 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80075da:	68fb      	ldr	r3, [r7, #12]
 80075dc:	681b      	ldr	r3, [r3, #0]
 80075de:	681a      	ldr	r2, [r3, #0]
 80075e0:	68fb      	ldr	r3, [r7, #12]
 80075e2:	681b      	ldr	r3, [r3, #0]
 80075e4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80075e8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80075ea:	2300      	movs	r3, #0
 80075ec:	61fb      	str	r3, [r7, #28]
 80075ee:	68fb      	ldr	r3, [r7, #12]
 80075f0:	681b      	ldr	r3, [r3, #0]
 80075f2:	695b      	ldr	r3, [r3, #20]
 80075f4:	61fb      	str	r3, [r7, #28]
 80075f6:	68fb      	ldr	r3, [r7, #12]
 80075f8:	681b      	ldr	r3, [r3, #0]
 80075fa:	699b      	ldr	r3, [r3, #24]
 80075fc:	61fb      	str	r3, [r7, #28]
 80075fe:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007600:	68fb      	ldr	r3, [r7, #12]
 8007602:	681b      	ldr	r3, [r3, #0]
 8007604:	681a      	ldr	r2, [r3, #0]
 8007606:	68fb      	ldr	r3, [r7, #12]
 8007608:	681b      	ldr	r3, [r3, #0]
 800760a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800760e:	601a      	str	r2, [r3, #0]
 8007610:	e164      	b.n	80078dc <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8007612:	68fb      	ldr	r3, [r7, #12]
 8007614:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007616:	2b02      	cmp	r3, #2
 8007618:	d11b      	bne.n	8007652 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800761a:	68fb      	ldr	r3, [r7, #12]
 800761c:	681b      	ldr	r3, [r3, #0]
 800761e:	681a      	ldr	r2, [r3, #0]
 8007620:	68fb      	ldr	r3, [r7, #12]
 8007622:	681b      	ldr	r3, [r3, #0]
 8007624:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007628:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800762a:	68fb      	ldr	r3, [r7, #12]
 800762c:	681b      	ldr	r3, [r3, #0]
 800762e:	681a      	ldr	r2, [r3, #0]
 8007630:	68fb      	ldr	r3, [r7, #12]
 8007632:	681b      	ldr	r3, [r3, #0]
 8007634:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007638:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800763a:	2300      	movs	r3, #0
 800763c:	61bb      	str	r3, [r7, #24]
 800763e:	68fb      	ldr	r3, [r7, #12]
 8007640:	681b      	ldr	r3, [r3, #0]
 8007642:	695b      	ldr	r3, [r3, #20]
 8007644:	61bb      	str	r3, [r7, #24]
 8007646:	68fb      	ldr	r3, [r7, #12]
 8007648:	681b      	ldr	r3, [r3, #0]
 800764a:	699b      	ldr	r3, [r3, #24]
 800764c:	61bb      	str	r3, [r7, #24]
 800764e:	69bb      	ldr	r3, [r7, #24]
 8007650:	e144      	b.n	80078dc <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007652:	2300      	movs	r3, #0
 8007654:	617b      	str	r3, [r7, #20]
 8007656:	68fb      	ldr	r3, [r7, #12]
 8007658:	681b      	ldr	r3, [r3, #0]
 800765a:	695b      	ldr	r3, [r3, #20]
 800765c:	617b      	str	r3, [r7, #20]
 800765e:	68fb      	ldr	r3, [r7, #12]
 8007660:	681b      	ldr	r3, [r3, #0]
 8007662:	699b      	ldr	r3, [r3, #24]
 8007664:	617b      	str	r3, [r7, #20]
 8007666:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8007668:	e138      	b.n	80078dc <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 800766a:	68fb      	ldr	r3, [r7, #12]
 800766c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800766e:	2b03      	cmp	r3, #3
 8007670:	f200 80f1 	bhi.w	8007856 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8007674:	68fb      	ldr	r3, [r7, #12]
 8007676:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007678:	2b01      	cmp	r3, #1
 800767a:	d123      	bne.n	80076c4 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800767c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800767e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8007680:	68f8      	ldr	r0, [r7, #12]
 8007682:	f000 fc35 	bl	8007ef0 <I2C_WaitOnRXNEFlagUntilTimeout>
 8007686:	4603      	mov	r3, r0
 8007688:	2b00      	cmp	r3, #0
 800768a:	d001      	beq.n	8007690 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 800768c:	2301      	movs	r3, #1
 800768e:	e139      	b.n	8007904 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007690:	68fb      	ldr	r3, [r7, #12]
 8007692:	681b      	ldr	r3, [r3, #0]
 8007694:	691a      	ldr	r2, [r3, #16]
 8007696:	68fb      	ldr	r3, [r7, #12]
 8007698:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800769a:	b2d2      	uxtb	r2, r2
 800769c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800769e:	68fb      	ldr	r3, [r7, #12]
 80076a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076a2:	1c5a      	adds	r2, r3, #1
 80076a4:	68fb      	ldr	r3, [r7, #12]
 80076a6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80076a8:	68fb      	ldr	r3, [r7, #12]
 80076aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80076ac:	3b01      	subs	r3, #1
 80076ae:	b29a      	uxth	r2, r3
 80076b0:	68fb      	ldr	r3, [r7, #12]
 80076b2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80076b4:	68fb      	ldr	r3, [r7, #12]
 80076b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80076b8:	b29b      	uxth	r3, r3
 80076ba:	3b01      	subs	r3, #1
 80076bc:	b29a      	uxth	r2, r3
 80076be:	68fb      	ldr	r3, [r7, #12]
 80076c0:	855a      	strh	r2, [r3, #42]	; 0x2a
 80076c2:	e10b      	b.n	80078dc <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80076c4:	68fb      	ldr	r3, [r7, #12]
 80076c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80076c8:	2b02      	cmp	r3, #2
 80076ca:	d14e      	bne.n	800776a <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80076cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076ce:	9300      	str	r3, [sp, #0]
 80076d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80076d2:	2200      	movs	r2, #0
 80076d4:	4906      	ldr	r1, [pc, #24]	; (80076f0 <HAL_I2C_Mem_Read+0x22c>)
 80076d6:	68f8      	ldr	r0, [r7, #12]
 80076d8:	f000 fab2 	bl	8007c40 <I2C_WaitOnFlagUntilTimeout>
 80076dc:	4603      	mov	r3, r0
 80076de:	2b00      	cmp	r3, #0
 80076e0:	d008      	beq.n	80076f4 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 80076e2:	2301      	movs	r3, #1
 80076e4:	e10e      	b.n	8007904 <HAL_I2C_Mem_Read+0x440>
 80076e6:	bf00      	nop
 80076e8:	00100002 	.word	0x00100002
 80076ec:	ffff0000 	.word	0xffff0000
 80076f0:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80076f4:	68fb      	ldr	r3, [r7, #12]
 80076f6:	681b      	ldr	r3, [r3, #0]
 80076f8:	681a      	ldr	r2, [r3, #0]
 80076fa:	68fb      	ldr	r3, [r7, #12]
 80076fc:	681b      	ldr	r3, [r3, #0]
 80076fe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007702:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007704:	68fb      	ldr	r3, [r7, #12]
 8007706:	681b      	ldr	r3, [r3, #0]
 8007708:	691a      	ldr	r2, [r3, #16]
 800770a:	68fb      	ldr	r3, [r7, #12]
 800770c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800770e:	b2d2      	uxtb	r2, r2
 8007710:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007712:	68fb      	ldr	r3, [r7, #12]
 8007714:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007716:	1c5a      	adds	r2, r3, #1
 8007718:	68fb      	ldr	r3, [r7, #12]
 800771a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800771c:	68fb      	ldr	r3, [r7, #12]
 800771e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007720:	3b01      	subs	r3, #1
 8007722:	b29a      	uxth	r2, r3
 8007724:	68fb      	ldr	r3, [r7, #12]
 8007726:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007728:	68fb      	ldr	r3, [r7, #12]
 800772a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800772c:	b29b      	uxth	r3, r3
 800772e:	3b01      	subs	r3, #1
 8007730:	b29a      	uxth	r2, r3
 8007732:	68fb      	ldr	r3, [r7, #12]
 8007734:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007736:	68fb      	ldr	r3, [r7, #12]
 8007738:	681b      	ldr	r3, [r3, #0]
 800773a:	691a      	ldr	r2, [r3, #16]
 800773c:	68fb      	ldr	r3, [r7, #12]
 800773e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007740:	b2d2      	uxtb	r2, r2
 8007742:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007744:	68fb      	ldr	r3, [r7, #12]
 8007746:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007748:	1c5a      	adds	r2, r3, #1
 800774a:	68fb      	ldr	r3, [r7, #12]
 800774c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800774e:	68fb      	ldr	r3, [r7, #12]
 8007750:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007752:	3b01      	subs	r3, #1
 8007754:	b29a      	uxth	r2, r3
 8007756:	68fb      	ldr	r3, [r7, #12]
 8007758:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800775a:	68fb      	ldr	r3, [r7, #12]
 800775c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800775e:	b29b      	uxth	r3, r3
 8007760:	3b01      	subs	r3, #1
 8007762:	b29a      	uxth	r2, r3
 8007764:	68fb      	ldr	r3, [r7, #12]
 8007766:	855a      	strh	r2, [r3, #42]	; 0x2a
 8007768:	e0b8      	b.n	80078dc <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800776a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800776c:	9300      	str	r3, [sp, #0]
 800776e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007770:	2200      	movs	r2, #0
 8007772:	4966      	ldr	r1, [pc, #408]	; (800790c <HAL_I2C_Mem_Read+0x448>)
 8007774:	68f8      	ldr	r0, [r7, #12]
 8007776:	f000 fa63 	bl	8007c40 <I2C_WaitOnFlagUntilTimeout>
 800777a:	4603      	mov	r3, r0
 800777c:	2b00      	cmp	r3, #0
 800777e:	d001      	beq.n	8007784 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8007780:	2301      	movs	r3, #1
 8007782:	e0bf      	b.n	8007904 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007784:	68fb      	ldr	r3, [r7, #12]
 8007786:	681b      	ldr	r3, [r3, #0]
 8007788:	681a      	ldr	r2, [r3, #0]
 800778a:	68fb      	ldr	r3, [r7, #12]
 800778c:	681b      	ldr	r3, [r3, #0]
 800778e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007792:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007794:	68fb      	ldr	r3, [r7, #12]
 8007796:	681b      	ldr	r3, [r3, #0]
 8007798:	691a      	ldr	r2, [r3, #16]
 800779a:	68fb      	ldr	r3, [r7, #12]
 800779c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800779e:	b2d2      	uxtb	r2, r2
 80077a0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80077a2:	68fb      	ldr	r3, [r7, #12]
 80077a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077a6:	1c5a      	adds	r2, r3, #1
 80077a8:	68fb      	ldr	r3, [r7, #12]
 80077aa:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80077ac:	68fb      	ldr	r3, [r7, #12]
 80077ae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80077b0:	3b01      	subs	r3, #1
 80077b2:	b29a      	uxth	r2, r3
 80077b4:	68fb      	ldr	r3, [r7, #12]
 80077b6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80077b8:	68fb      	ldr	r3, [r7, #12]
 80077ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80077bc:	b29b      	uxth	r3, r3
 80077be:	3b01      	subs	r3, #1
 80077c0:	b29a      	uxth	r2, r3
 80077c2:	68fb      	ldr	r3, [r7, #12]
 80077c4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80077c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077c8:	9300      	str	r3, [sp, #0]
 80077ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80077cc:	2200      	movs	r2, #0
 80077ce:	494f      	ldr	r1, [pc, #316]	; (800790c <HAL_I2C_Mem_Read+0x448>)
 80077d0:	68f8      	ldr	r0, [r7, #12]
 80077d2:	f000 fa35 	bl	8007c40 <I2C_WaitOnFlagUntilTimeout>
 80077d6:	4603      	mov	r3, r0
 80077d8:	2b00      	cmp	r3, #0
 80077da:	d001      	beq.n	80077e0 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 80077dc:	2301      	movs	r3, #1
 80077de:	e091      	b.n	8007904 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80077e0:	68fb      	ldr	r3, [r7, #12]
 80077e2:	681b      	ldr	r3, [r3, #0]
 80077e4:	681a      	ldr	r2, [r3, #0]
 80077e6:	68fb      	ldr	r3, [r7, #12]
 80077e8:	681b      	ldr	r3, [r3, #0]
 80077ea:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80077ee:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80077f0:	68fb      	ldr	r3, [r7, #12]
 80077f2:	681b      	ldr	r3, [r3, #0]
 80077f4:	691a      	ldr	r2, [r3, #16]
 80077f6:	68fb      	ldr	r3, [r7, #12]
 80077f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077fa:	b2d2      	uxtb	r2, r2
 80077fc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80077fe:	68fb      	ldr	r3, [r7, #12]
 8007800:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007802:	1c5a      	adds	r2, r3, #1
 8007804:	68fb      	ldr	r3, [r7, #12]
 8007806:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007808:	68fb      	ldr	r3, [r7, #12]
 800780a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800780c:	3b01      	subs	r3, #1
 800780e:	b29a      	uxth	r2, r3
 8007810:	68fb      	ldr	r3, [r7, #12]
 8007812:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007814:	68fb      	ldr	r3, [r7, #12]
 8007816:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007818:	b29b      	uxth	r3, r3
 800781a:	3b01      	subs	r3, #1
 800781c:	b29a      	uxth	r2, r3
 800781e:	68fb      	ldr	r3, [r7, #12]
 8007820:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007822:	68fb      	ldr	r3, [r7, #12]
 8007824:	681b      	ldr	r3, [r3, #0]
 8007826:	691a      	ldr	r2, [r3, #16]
 8007828:	68fb      	ldr	r3, [r7, #12]
 800782a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800782c:	b2d2      	uxtb	r2, r2
 800782e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007830:	68fb      	ldr	r3, [r7, #12]
 8007832:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007834:	1c5a      	adds	r2, r3, #1
 8007836:	68fb      	ldr	r3, [r7, #12]
 8007838:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800783a:	68fb      	ldr	r3, [r7, #12]
 800783c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800783e:	3b01      	subs	r3, #1
 8007840:	b29a      	uxth	r2, r3
 8007842:	68fb      	ldr	r3, [r7, #12]
 8007844:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007846:	68fb      	ldr	r3, [r7, #12]
 8007848:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800784a:	b29b      	uxth	r3, r3
 800784c:	3b01      	subs	r3, #1
 800784e:	b29a      	uxth	r2, r3
 8007850:	68fb      	ldr	r3, [r7, #12]
 8007852:	855a      	strh	r2, [r3, #42]	; 0x2a
 8007854:	e042      	b.n	80078dc <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007856:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007858:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800785a:	68f8      	ldr	r0, [r7, #12]
 800785c:	f000 fb48 	bl	8007ef0 <I2C_WaitOnRXNEFlagUntilTimeout>
 8007860:	4603      	mov	r3, r0
 8007862:	2b00      	cmp	r3, #0
 8007864:	d001      	beq.n	800786a <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8007866:	2301      	movs	r3, #1
 8007868:	e04c      	b.n	8007904 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800786a:	68fb      	ldr	r3, [r7, #12]
 800786c:	681b      	ldr	r3, [r3, #0]
 800786e:	691a      	ldr	r2, [r3, #16]
 8007870:	68fb      	ldr	r3, [r7, #12]
 8007872:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007874:	b2d2      	uxtb	r2, r2
 8007876:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8007878:	68fb      	ldr	r3, [r7, #12]
 800787a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800787c:	1c5a      	adds	r2, r3, #1
 800787e:	68fb      	ldr	r3, [r7, #12]
 8007880:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8007882:	68fb      	ldr	r3, [r7, #12]
 8007884:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007886:	3b01      	subs	r3, #1
 8007888:	b29a      	uxth	r2, r3
 800788a:	68fb      	ldr	r3, [r7, #12]
 800788c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800788e:	68fb      	ldr	r3, [r7, #12]
 8007890:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007892:	b29b      	uxth	r3, r3
 8007894:	3b01      	subs	r3, #1
 8007896:	b29a      	uxth	r2, r3
 8007898:	68fb      	ldr	r3, [r7, #12]
 800789a:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800789c:	68fb      	ldr	r3, [r7, #12]
 800789e:	681b      	ldr	r3, [r3, #0]
 80078a0:	695b      	ldr	r3, [r3, #20]
 80078a2:	f003 0304 	and.w	r3, r3, #4
 80078a6:	2b04      	cmp	r3, #4
 80078a8:	d118      	bne.n	80078dc <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80078aa:	68fb      	ldr	r3, [r7, #12]
 80078ac:	681b      	ldr	r3, [r3, #0]
 80078ae:	691a      	ldr	r2, [r3, #16]
 80078b0:	68fb      	ldr	r3, [r7, #12]
 80078b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078b4:	b2d2      	uxtb	r2, r2
 80078b6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80078b8:	68fb      	ldr	r3, [r7, #12]
 80078ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078bc:	1c5a      	adds	r2, r3, #1
 80078be:	68fb      	ldr	r3, [r7, #12]
 80078c0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80078c2:	68fb      	ldr	r3, [r7, #12]
 80078c4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80078c6:	3b01      	subs	r3, #1
 80078c8:	b29a      	uxth	r2, r3
 80078ca:	68fb      	ldr	r3, [r7, #12]
 80078cc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80078ce:	68fb      	ldr	r3, [r7, #12]
 80078d0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80078d2:	b29b      	uxth	r3, r3
 80078d4:	3b01      	subs	r3, #1
 80078d6:	b29a      	uxth	r2, r3
 80078d8:	68fb      	ldr	r3, [r7, #12]
 80078da:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80078dc:	68fb      	ldr	r3, [r7, #12]
 80078de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80078e0:	2b00      	cmp	r3, #0
 80078e2:	f47f aec2 	bne.w	800766a <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80078e6:	68fb      	ldr	r3, [r7, #12]
 80078e8:	2220      	movs	r2, #32
 80078ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80078ee:	68fb      	ldr	r3, [r7, #12]
 80078f0:	2200      	movs	r2, #0
 80078f2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80078f6:	68fb      	ldr	r3, [r7, #12]
 80078f8:	2200      	movs	r2, #0
 80078fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80078fe:	2300      	movs	r3, #0
 8007900:	e000      	b.n	8007904 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8007902:	2302      	movs	r3, #2
  }
}
 8007904:	4618      	mov	r0, r3
 8007906:	3728      	adds	r7, #40	; 0x28
 8007908:	46bd      	mov	sp, r7
 800790a:	bd80      	pop	{r7, pc}
 800790c:	00010004 	.word	0x00010004

08007910 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 8007910:	b480      	push	{r7}
 8007912:	b083      	sub	sp, #12
 8007914:	af00      	add	r7, sp, #0
 8007916:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800791e:	b2db      	uxtb	r3, r3
}
 8007920:	4618      	mov	r0, r3
 8007922:	370c      	adds	r7, #12
 8007924:	46bd      	mov	sp, r7
 8007926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800792a:	4770      	bx	lr

0800792c <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(I2C_HandleTypeDef *hi2c)
{
 800792c:	b480      	push	{r7}
 800792e:	b083      	sub	sp, #12
 8007930:	af00      	add	r7, sp, #0
 8007932:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8007938:	4618      	mov	r0, r3
 800793a:	370c      	adds	r7, #12
 800793c:	46bd      	mov	sp, r7
 800793e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007942:	4770      	bx	lr

08007944 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8007944:	b580      	push	{r7, lr}
 8007946:	b088      	sub	sp, #32
 8007948:	af02      	add	r7, sp, #8
 800794a:	60f8      	str	r0, [r7, #12]
 800794c:	4608      	mov	r0, r1
 800794e:	4611      	mov	r1, r2
 8007950:	461a      	mov	r2, r3
 8007952:	4603      	mov	r3, r0
 8007954:	817b      	strh	r3, [r7, #10]
 8007956:	460b      	mov	r3, r1
 8007958:	813b      	strh	r3, [r7, #8]
 800795a:	4613      	mov	r3, r2
 800795c:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800795e:	68fb      	ldr	r3, [r7, #12]
 8007960:	681b      	ldr	r3, [r3, #0]
 8007962:	681a      	ldr	r2, [r3, #0]
 8007964:	68fb      	ldr	r3, [r7, #12]
 8007966:	681b      	ldr	r3, [r3, #0]
 8007968:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800796c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800796e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007970:	9300      	str	r3, [sp, #0]
 8007972:	6a3b      	ldr	r3, [r7, #32]
 8007974:	2200      	movs	r2, #0
 8007976:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800797a:	68f8      	ldr	r0, [r7, #12]
 800797c:	f000 f960 	bl	8007c40 <I2C_WaitOnFlagUntilTimeout>
 8007980:	4603      	mov	r3, r0
 8007982:	2b00      	cmp	r3, #0
 8007984:	d00d      	beq.n	80079a2 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8007986:	68fb      	ldr	r3, [r7, #12]
 8007988:	681b      	ldr	r3, [r3, #0]
 800798a:	681b      	ldr	r3, [r3, #0]
 800798c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007990:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007994:	d103      	bne.n	800799e <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8007996:	68fb      	ldr	r3, [r7, #12]
 8007998:	f44f 7200 	mov.w	r2, #512	; 0x200
 800799c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800799e:	2303      	movs	r3, #3
 80079a0:	e05f      	b.n	8007a62 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80079a2:	897b      	ldrh	r3, [r7, #10]
 80079a4:	b2db      	uxtb	r3, r3
 80079a6:	461a      	mov	r2, r3
 80079a8:	68fb      	ldr	r3, [r7, #12]
 80079aa:	681b      	ldr	r3, [r3, #0]
 80079ac:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80079b0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80079b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079b4:	6a3a      	ldr	r2, [r7, #32]
 80079b6:	492d      	ldr	r1, [pc, #180]	; (8007a6c <I2C_RequestMemoryWrite+0x128>)
 80079b8:	68f8      	ldr	r0, [r7, #12]
 80079ba:	f000 f998 	bl	8007cee <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80079be:	4603      	mov	r3, r0
 80079c0:	2b00      	cmp	r3, #0
 80079c2:	d001      	beq.n	80079c8 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80079c4:	2301      	movs	r3, #1
 80079c6:	e04c      	b.n	8007a62 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80079c8:	2300      	movs	r3, #0
 80079ca:	617b      	str	r3, [r7, #20]
 80079cc:	68fb      	ldr	r3, [r7, #12]
 80079ce:	681b      	ldr	r3, [r3, #0]
 80079d0:	695b      	ldr	r3, [r3, #20]
 80079d2:	617b      	str	r3, [r7, #20]
 80079d4:	68fb      	ldr	r3, [r7, #12]
 80079d6:	681b      	ldr	r3, [r3, #0]
 80079d8:	699b      	ldr	r3, [r3, #24]
 80079da:	617b      	str	r3, [r7, #20]
 80079dc:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80079de:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80079e0:	6a39      	ldr	r1, [r7, #32]
 80079e2:	68f8      	ldr	r0, [r7, #12]
 80079e4:	f000 fa02 	bl	8007dec <I2C_WaitOnTXEFlagUntilTimeout>
 80079e8:	4603      	mov	r3, r0
 80079ea:	2b00      	cmp	r3, #0
 80079ec:	d00d      	beq.n	8007a0a <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80079ee:	68fb      	ldr	r3, [r7, #12]
 80079f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80079f2:	2b04      	cmp	r3, #4
 80079f4:	d107      	bne.n	8007a06 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80079f6:	68fb      	ldr	r3, [r7, #12]
 80079f8:	681b      	ldr	r3, [r3, #0]
 80079fa:	681a      	ldr	r2, [r3, #0]
 80079fc:	68fb      	ldr	r3, [r7, #12]
 80079fe:	681b      	ldr	r3, [r3, #0]
 8007a00:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007a04:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8007a06:	2301      	movs	r3, #1
 8007a08:	e02b      	b.n	8007a62 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8007a0a:	88fb      	ldrh	r3, [r7, #6]
 8007a0c:	2b01      	cmp	r3, #1
 8007a0e:	d105      	bne.n	8007a1c <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8007a10:	893b      	ldrh	r3, [r7, #8]
 8007a12:	b2da      	uxtb	r2, r3
 8007a14:	68fb      	ldr	r3, [r7, #12]
 8007a16:	681b      	ldr	r3, [r3, #0]
 8007a18:	611a      	str	r2, [r3, #16]
 8007a1a:	e021      	b.n	8007a60 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8007a1c:	893b      	ldrh	r3, [r7, #8]
 8007a1e:	0a1b      	lsrs	r3, r3, #8
 8007a20:	b29b      	uxth	r3, r3
 8007a22:	b2da      	uxtb	r2, r3
 8007a24:	68fb      	ldr	r3, [r7, #12]
 8007a26:	681b      	ldr	r3, [r3, #0]
 8007a28:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007a2a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007a2c:	6a39      	ldr	r1, [r7, #32]
 8007a2e:	68f8      	ldr	r0, [r7, #12]
 8007a30:	f000 f9dc 	bl	8007dec <I2C_WaitOnTXEFlagUntilTimeout>
 8007a34:	4603      	mov	r3, r0
 8007a36:	2b00      	cmp	r3, #0
 8007a38:	d00d      	beq.n	8007a56 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007a3a:	68fb      	ldr	r3, [r7, #12]
 8007a3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a3e:	2b04      	cmp	r3, #4
 8007a40:	d107      	bne.n	8007a52 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007a42:	68fb      	ldr	r3, [r7, #12]
 8007a44:	681b      	ldr	r3, [r3, #0]
 8007a46:	681a      	ldr	r2, [r3, #0]
 8007a48:	68fb      	ldr	r3, [r7, #12]
 8007a4a:	681b      	ldr	r3, [r3, #0]
 8007a4c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007a50:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8007a52:	2301      	movs	r3, #1
 8007a54:	e005      	b.n	8007a62 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8007a56:	893b      	ldrh	r3, [r7, #8]
 8007a58:	b2da      	uxtb	r2, r3
 8007a5a:	68fb      	ldr	r3, [r7, #12]
 8007a5c:	681b      	ldr	r3, [r3, #0]
 8007a5e:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8007a60:	2300      	movs	r3, #0
}
 8007a62:	4618      	mov	r0, r3
 8007a64:	3718      	adds	r7, #24
 8007a66:	46bd      	mov	sp, r7
 8007a68:	bd80      	pop	{r7, pc}
 8007a6a:	bf00      	nop
 8007a6c:	00010002 	.word	0x00010002

08007a70 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8007a70:	b580      	push	{r7, lr}
 8007a72:	b088      	sub	sp, #32
 8007a74:	af02      	add	r7, sp, #8
 8007a76:	60f8      	str	r0, [r7, #12]
 8007a78:	4608      	mov	r0, r1
 8007a7a:	4611      	mov	r1, r2
 8007a7c:	461a      	mov	r2, r3
 8007a7e:	4603      	mov	r3, r0
 8007a80:	817b      	strh	r3, [r7, #10]
 8007a82:	460b      	mov	r3, r1
 8007a84:	813b      	strh	r3, [r7, #8]
 8007a86:	4613      	mov	r3, r2
 8007a88:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007a8a:	68fb      	ldr	r3, [r7, #12]
 8007a8c:	681b      	ldr	r3, [r3, #0]
 8007a8e:	681a      	ldr	r2, [r3, #0]
 8007a90:	68fb      	ldr	r3, [r7, #12]
 8007a92:	681b      	ldr	r3, [r3, #0]
 8007a94:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8007a98:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007a9a:	68fb      	ldr	r3, [r7, #12]
 8007a9c:	681b      	ldr	r3, [r3, #0]
 8007a9e:	681a      	ldr	r2, [r3, #0]
 8007aa0:	68fb      	ldr	r3, [r7, #12]
 8007aa2:	681b      	ldr	r3, [r3, #0]
 8007aa4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007aa8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8007aaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007aac:	9300      	str	r3, [sp, #0]
 8007aae:	6a3b      	ldr	r3, [r7, #32]
 8007ab0:	2200      	movs	r2, #0
 8007ab2:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8007ab6:	68f8      	ldr	r0, [r7, #12]
 8007ab8:	f000 f8c2 	bl	8007c40 <I2C_WaitOnFlagUntilTimeout>
 8007abc:	4603      	mov	r3, r0
 8007abe:	2b00      	cmp	r3, #0
 8007ac0:	d00d      	beq.n	8007ade <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8007ac2:	68fb      	ldr	r3, [r7, #12]
 8007ac4:	681b      	ldr	r3, [r3, #0]
 8007ac6:	681b      	ldr	r3, [r3, #0]
 8007ac8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007acc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007ad0:	d103      	bne.n	8007ada <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8007ad2:	68fb      	ldr	r3, [r7, #12]
 8007ad4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007ad8:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8007ada:	2303      	movs	r3, #3
 8007adc:	e0aa      	b.n	8007c34 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8007ade:	897b      	ldrh	r3, [r7, #10]
 8007ae0:	b2db      	uxtb	r3, r3
 8007ae2:	461a      	mov	r2, r3
 8007ae4:	68fb      	ldr	r3, [r7, #12]
 8007ae6:	681b      	ldr	r3, [r3, #0]
 8007ae8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8007aec:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8007aee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007af0:	6a3a      	ldr	r2, [r7, #32]
 8007af2:	4952      	ldr	r1, [pc, #328]	; (8007c3c <I2C_RequestMemoryRead+0x1cc>)
 8007af4:	68f8      	ldr	r0, [r7, #12]
 8007af6:	f000 f8fa 	bl	8007cee <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007afa:	4603      	mov	r3, r0
 8007afc:	2b00      	cmp	r3, #0
 8007afe:	d001      	beq.n	8007b04 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8007b00:	2301      	movs	r3, #1
 8007b02:	e097      	b.n	8007c34 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007b04:	2300      	movs	r3, #0
 8007b06:	617b      	str	r3, [r7, #20]
 8007b08:	68fb      	ldr	r3, [r7, #12]
 8007b0a:	681b      	ldr	r3, [r3, #0]
 8007b0c:	695b      	ldr	r3, [r3, #20]
 8007b0e:	617b      	str	r3, [r7, #20]
 8007b10:	68fb      	ldr	r3, [r7, #12]
 8007b12:	681b      	ldr	r3, [r3, #0]
 8007b14:	699b      	ldr	r3, [r3, #24]
 8007b16:	617b      	str	r3, [r7, #20]
 8007b18:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007b1a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007b1c:	6a39      	ldr	r1, [r7, #32]
 8007b1e:	68f8      	ldr	r0, [r7, #12]
 8007b20:	f000 f964 	bl	8007dec <I2C_WaitOnTXEFlagUntilTimeout>
 8007b24:	4603      	mov	r3, r0
 8007b26:	2b00      	cmp	r3, #0
 8007b28:	d00d      	beq.n	8007b46 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007b2a:	68fb      	ldr	r3, [r7, #12]
 8007b2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b2e:	2b04      	cmp	r3, #4
 8007b30:	d107      	bne.n	8007b42 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007b32:	68fb      	ldr	r3, [r7, #12]
 8007b34:	681b      	ldr	r3, [r3, #0]
 8007b36:	681a      	ldr	r2, [r3, #0]
 8007b38:	68fb      	ldr	r3, [r7, #12]
 8007b3a:	681b      	ldr	r3, [r3, #0]
 8007b3c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007b40:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8007b42:	2301      	movs	r3, #1
 8007b44:	e076      	b.n	8007c34 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8007b46:	88fb      	ldrh	r3, [r7, #6]
 8007b48:	2b01      	cmp	r3, #1
 8007b4a:	d105      	bne.n	8007b58 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8007b4c:	893b      	ldrh	r3, [r7, #8]
 8007b4e:	b2da      	uxtb	r2, r3
 8007b50:	68fb      	ldr	r3, [r7, #12]
 8007b52:	681b      	ldr	r3, [r3, #0]
 8007b54:	611a      	str	r2, [r3, #16]
 8007b56:	e021      	b.n	8007b9c <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8007b58:	893b      	ldrh	r3, [r7, #8]
 8007b5a:	0a1b      	lsrs	r3, r3, #8
 8007b5c:	b29b      	uxth	r3, r3
 8007b5e:	b2da      	uxtb	r2, r3
 8007b60:	68fb      	ldr	r3, [r7, #12]
 8007b62:	681b      	ldr	r3, [r3, #0]
 8007b64:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007b66:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007b68:	6a39      	ldr	r1, [r7, #32]
 8007b6a:	68f8      	ldr	r0, [r7, #12]
 8007b6c:	f000 f93e 	bl	8007dec <I2C_WaitOnTXEFlagUntilTimeout>
 8007b70:	4603      	mov	r3, r0
 8007b72:	2b00      	cmp	r3, #0
 8007b74:	d00d      	beq.n	8007b92 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007b76:	68fb      	ldr	r3, [r7, #12]
 8007b78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b7a:	2b04      	cmp	r3, #4
 8007b7c:	d107      	bne.n	8007b8e <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007b7e:	68fb      	ldr	r3, [r7, #12]
 8007b80:	681b      	ldr	r3, [r3, #0]
 8007b82:	681a      	ldr	r2, [r3, #0]
 8007b84:	68fb      	ldr	r3, [r7, #12]
 8007b86:	681b      	ldr	r3, [r3, #0]
 8007b88:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007b8c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8007b8e:	2301      	movs	r3, #1
 8007b90:	e050      	b.n	8007c34 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8007b92:	893b      	ldrh	r3, [r7, #8]
 8007b94:	b2da      	uxtb	r2, r3
 8007b96:	68fb      	ldr	r3, [r7, #12]
 8007b98:	681b      	ldr	r3, [r3, #0]
 8007b9a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007b9c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007b9e:	6a39      	ldr	r1, [r7, #32]
 8007ba0:	68f8      	ldr	r0, [r7, #12]
 8007ba2:	f000 f923 	bl	8007dec <I2C_WaitOnTXEFlagUntilTimeout>
 8007ba6:	4603      	mov	r3, r0
 8007ba8:	2b00      	cmp	r3, #0
 8007baa:	d00d      	beq.n	8007bc8 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007bac:	68fb      	ldr	r3, [r7, #12]
 8007bae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007bb0:	2b04      	cmp	r3, #4
 8007bb2:	d107      	bne.n	8007bc4 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007bb4:	68fb      	ldr	r3, [r7, #12]
 8007bb6:	681b      	ldr	r3, [r3, #0]
 8007bb8:	681a      	ldr	r2, [r3, #0]
 8007bba:	68fb      	ldr	r3, [r7, #12]
 8007bbc:	681b      	ldr	r3, [r3, #0]
 8007bbe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007bc2:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8007bc4:	2301      	movs	r3, #1
 8007bc6:	e035      	b.n	8007c34 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007bc8:	68fb      	ldr	r3, [r7, #12]
 8007bca:	681b      	ldr	r3, [r3, #0]
 8007bcc:	681a      	ldr	r2, [r3, #0]
 8007bce:	68fb      	ldr	r3, [r7, #12]
 8007bd0:	681b      	ldr	r3, [r3, #0]
 8007bd2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007bd6:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8007bd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bda:	9300      	str	r3, [sp, #0]
 8007bdc:	6a3b      	ldr	r3, [r7, #32]
 8007bde:	2200      	movs	r2, #0
 8007be0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8007be4:	68f8      	ldr	r0, [r7, #12]
 8007be6:	f000 f82b 	bl	8007c40 <I2C_WaitOnFlagUntilTimeout>
 8007bea:	4603      	mov	r3, r0
 8007bec:	2b00      	cmp	r3, #0
 8007bee:	d00d      	beq.n	8007c0c <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8007bf0:	68fb      	ldr	r3, [r7, #12]
 8007bf2:	681b      	ldr	r3, [r3, #0]
 8007bf4:	681b      	ldr	r3, [r3, #0]
 8007bf6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007bfa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007bfe:	d103      	bne.n	8007c08 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8007c00:	68fb      	ldr	r3, [r7, #12]
 8007c02:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007c06:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8007c08:	2303      	movs	r3, #3
 8007c0a:	e013      	b.n	8007c34 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8007c0c:	897b      	ldrh	r3, [r7, #10]
 8007c0e:	b2db      	uxtb	r3, r3
 8007c10:	f043 0301 	orr.w	r3, r3, #1
 8007c14:	b2da      	uxtb	r2, r3
 8007c16:	68fb      	ldr	r3, [r7, #12]
 8007c18:	681b      	ldr	r3, [r3, #0]
 8007c1a:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8007c1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c1e:	6a3a      	ldr	r2, [r7, #32]
 8007c20:	4906      	ldr	r1, [pc, #24]	; (8007c3c <I2C_RequestMemoryRead+0x1cc>)
 8007c22:	68f8      	ldr	r0, [r7, #12]
 8007c24:	f000 f863 	bl	8007cee <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007c28:	4603      	mov	r3, r0
 8007c2a:	2b00      	cmp	r3, #0
 8007c2c:	d001      	beq.n	8007c32 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8007c2e:	2301      	movs	r3, #1
 8007c30:	e000      	b.n	8007c34 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8007c32:	2300      	movs	r3, #0
}
 8007c34:	4618      	mov	r0, r3
 8007c36:	3718      	adds	r7, #24
 8007c38:	46bd      	mov	sp, r7
 8007c3a:	bd80      	pop	{r7, pc}
 8007c3c:	00010002 	.word	0x00010002

08007c40 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8007c40:	b580      	push	{r7, lr}
 8007c42:	b084      	sub	sp, #16
 8007c44:	af00      	add	r7, sp, #0
 8007c46:	60f8      	str	r0, [r7, #12]
 8007c48:	60b9      	str	r1, [r7, #8]
 8007c4a:	603b      	str	r3, [r7, #0]
 8007c4c:	4613      	mov	r3, r2
 8007c4e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007c50:	e025      	b.n	8007c9e <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007c52:	683b      	ldr	r3, [r7, #0]
 8007c54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007c58:	d021      	beq.n	8007c9e <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007c5a:	f7fe fe19 	bl	8006890 <HAL_GetTick>
 8007c5e:	4602      	mov	r2, r0
 8007c60:	69bb      	ldr	r3, [r7, #24]
 8007c62:	1ad3      	subs	r3, r2, r3
 8007c64:	683a      	ldr	r2, [r7, #0]
 8007c66:	429a      	cmp	r2, r3
 8007c68:	d302      	bcc.n	8007c70 <I2C_WaitOnFlagUntilTimeout+0x30>
 8007c6a:	683b      	ldr	r3, [r7, #0]
 8007c6c:	2b00      	cmp	r3, #0
 8007c6e:	d116      	bne.n	8007c9e <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8007c70:	68fb      	ldr	r3, [r7, #12]
 8007c72:	2200      	movs	r2, #0
 8007c74:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8007c76:	68fb      	ldr	r3, [r7, #12]
 8007c78:	2220      	movs	r2, #32
 8007c7a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8007c7e:	68fb      	ldr	r3, [r7, #12]
 8007c80:	2200      	movs	r2, #0
 8007c82:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8007c86:	68fb      	ldr	r3, [r7, #12]
 8007c88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c8a:	f043 0220 	orr.w	r2, r3, #32
 8007c8e:	68fb      	ldr	r3, [r7, #12]
 8007c90:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007c92:	68fb      	ldr	r3, [r7, #12]
 8007c94:	2200      	movs	r2, #0
 8007c96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8007c9a:	2301      	movs	r3, #1
 8007c9c:	e023      	b.n	8007ce6 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007c9e:	68bb      	ldr	r3, [r7, #8]
 8007ca0:	0c1b      	lsrs	r3, r3, #16
 8007ca2:	b2db      	uxtb	r3, r3
 8007ca4:	2b01      	cmp	r3, #1
 8007ca6:	d10d      	bne.n	8007cc4 <I2C_WaitOnFlagUntilTimeout+0x84>
 8007ca8:	68fb      	ldr	r3, [r7, #12]
 8007caa:	681b      	ldr	r3, [r3, #0]
 8007cac:	695b      	ldr	r3, [r3, #20]
 8007cae:	43da      	mvns	r2, r3
 8007cb0:	68bb      	ldr	r3, [r7, #8]
 8007cb2:	4013      	ands	r3, r2
 8007cb4:	b29b      	uxth	r3, r3
 8007cb6:	2b00      	cmp	r3, #0
 8007cb8:	bf0c      	ite	eq
 8007cba:	2301      	moveq	r3, #1
 8007cbc:	2300      	movne	r3, #0
 8007cbe:	b2db      	uxtb	r3, r3
 8007cc0:	461a      	mov	r2, r3
 8007cc2:	e00c      	b.n	8007cde <I2C_WaitOnFlagUntilTimeout+0x9e>
 8007cc4:	68fb      	ldr	r3, [r7, #12]
 8007cc6:	681b      	ldr	r3, [r3, #0]
 8007cc8:	699b      	ldr	r3, [r3, #24]
 8007cca:	43da      	mvns	r2, r3
 8007ccc:	68bb      	ldr	r3, [r7, #8]
 8007cce:	4013      	ands	r3, r2
 8007cd0:	b29b      	uxth	r3, r3
 8007cd2:	2b00      	cmp	r3, #0
 8007cd4:	bf0c      	ite	eq
 8007cd6:	2301      	moveq	r3, #1
 8007cd8:	2300      	movne	r3, #0
 8007cda:	b2db      	uxtb	r3, r3
 8007cdc:	461a      	mov	r2, r3
 8007cde:	79fb      	ldrb	r3, [r7, #7]
 8007ce0:	429a      	cmp	r2, r3
 8007ce2:	d0b6      	beq.n	8007c52 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8007ce4:	2300      	movs	r3, #0
}
 8007ce6:	4618      	mov	r0, r3
 8007ce8:	3710      	adds	r7, #16
 8007cea:	46bd      	mov	sp, r7
 8007cec:	bd80      	pop	{r7, pc}

08007cee <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8007cee:	b580      	push	{r7, lr}
 8007cf0:	b084      	sub	sp, #16
 8007cf2:	af00      	add	r7, sp, #0
 8007cf4:	60f8      	str	r0, [r7, #12]
 8007cf6:	60b9      	str	r1, [r7, #8]
 8007cf8:	607a      	str	r2, [r7, #4]
 8007cfa:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8007cfc:	e051      	b.n	8007da2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8007cfe:	68fb      	ldr	r3, [r7, #12]
 8007d00:	681b      	ldr	r3, [r3, #0]
 8007d02:	695b      	ldr	r3, [r3, #20]
 8007d04:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007d08:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007d0c:	d123      	bne.n	8007d56 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007d0e:	68fb      	ldr	r3, [r7, #12]
 8007d10:	681b      	ldr	r3, [r3, #0]
 8007d12:	681a      	ldr	r2, [r3, #0]
 8007d14:	68fb      	ldr	r3, [r7, #12]
 8007d16:	681b      	ldr	r3, [r3, #0]
 8007d18:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007d1c:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007d1e:	68fb      	ldr	r3, [r7, #12]
 8007d20:	681b      	ldr	r3, [r3, #0]
 8007d22:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8007d26:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8007d28:	68fb      	ldr	r3, [r7, #12]
 8007d2a:	2200      	movs	r2, #0
 8007d2c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8007d2e:	68fb      	ldr	r3, [r7, #12]
 8007d30:	2220      	movs	r2, #32
 8007d32:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007d36:	68fb      	ldr	r3, [r7, #12]
 8007d38:	2200      	movs	r2, #0
 8007d3a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8007d3e:	68fb      	ldr	r3, [r7, #12]
 8007d40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d42:	f043 0204 	orr.w	r2, r3, #4
 8007d46:	68fb      	ldr	r3, [r7, #12]
 8007d48:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007d4a:	68fb      	ldr	r3, [r7, #12]
 8007d4c:	2200      	movs	r2, #0
 8007d4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8007d52:	2301      	movs	r3, #1
 8007d54:	e046      	b.n	8007de4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007d5c:	d021      	beq.n	8007da2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007d5e:	f7fe fd97 	bl	8006890 <HAL_GetTick>
 8007d62:	4602      	mov	r2, r0
 8007d64:	683b      	ldr	r3, [r7, #0]
 8007d66:	1ad3      	subs	r3, r2, r3
 8007d68:	687a      	ldr	r2, [r7, #4]
 8007d6a:	429a      	cmp	r2, r3
 8007d6c:	d302      	bcc.n	8007d74 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	2b00      	cmp	r3, #0
 8007d72:	d116      	bne.n	8007da2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8007d74:	68fb      	ldr	r3, [r7, #12]
 8007d76:	2200      	movs	r2, #0
 8007d78:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8007d7a:	68fb      	ldr	r3, [r7, #12]
 8007d7c:	2220      	movs	r2, #32
 8007d7e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007d82:	68fb      	ldr	r3, [r7, #12]
 8007d84:	2200      	movs	r2, #0
 8007d86:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007d8a:	68fb      	ldr	r3, [r7, #12]
 8007d8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d8e:	f043 0220 	orr.w	r2, r3, #32
 8007d92:	68fb      	ldr	r3, [r7, #12]
 8007d94:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007d96:	68fb      	ldr	r3, [r7, #12]
 8007d98:	2200      	movs	r2, #0
 8007d9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8007d9e:	2301      	movs	r3, #1
 8007da0:	e020      	b.n	8007de4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8007da2:	68bb      	ldr	r3, [r7, #8]
 8007da4:	0c1b      	lsrs	r3, r3, #16
 8007da6:	b2db      	uxtb	r3, r3
 8007da8:	2b01      	cmp	r3, #1
 8007daa:	d10c      	bne.n	8007dc6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8007dac:	68fb      	ldr	r3, [r7, #12]
 8007dae:	681b      	ldr	r3, [r3, #0]
 8007db0:	695b      	ldr	r3, [r3, #20]
 8007db2:	43da      	mvns	r2, r3
 8007db4:	68bb      	ldr	r3, [r7, #8]
 8007db6:	4013      	ands	r3, r2
 8007db8:	b29b      	uxth	r3, r3
 8007dba:	2b00      	cmp	r3, #0
 8007dbc:	bf14      	ite	ne
 8007dbe:	2301      	movne	r3, #1
 8007dc0:	2300      	moveq	r3, #0
 8007dc2:	b2db      	uxtb	r3, r3
 8007dc4:	e00b      	b.n	8007dde <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8007dc6:	68fb      	ldr	r3, [r7, #12]
 8007dc8:	681b      	ldr	r3, [r3, #0]
 8007dca:	699b      	ldr	r3, [r3, #24]
 8007dcc:	43da      	mvns	r2, r3
 8007dce:	68bb      	ldr	r3, [r7, #8]
 8007dd0:	4013      	ands	r3, r2
 8007dd2:	b29b      	uxth	r3, r3
 8007dd4:	2b00      	cmp	r3, #0
 8007dd6:	bf14      	ite	ne
 8007dd8:	2301      	movne	r3, #1
 8007dda:	2300      	moveq	r3, #0
 8007ddc:	b2db      	uxtb	r3, r3
 8007dde:	2b00      	cmp	r3, #0
 8007de0:	d18d      	bne.n	8007cfe <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8007de2:	2300      	movs	r3, #0
}
 8007de4:	4618      	mov	r0, r3
 8007de6:	3710      	adds	r7, #16
 8007de8:	46bd      	mov	sp, r7
 8007dea:	bd80      	pop	{r7, pc}

08007dec <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007dec:	b580      	push	{r7, lr}
 8007dee:	b084      	sub	sp, #16
 8007df0:	af00      	add	r7, sp, #0
 8007df2:	60f8      	str	r0, [r7, #12]
 8007df4:	60b9      	str	r1, [r7, #8]
 8007df6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8007df8:	e02d      	b.n	8007e56 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8007dfa:	68f8      	ldr	r0, [r7, #12]
 8007dfc:	f000 f8ce 	bl	8007f9c <I2C_IsAcknowledgeFailed>
 8007e00:	4603      	mov	r3, r0
 8007e02:	2b00      	cmp	r3, #0
 8007e04:	d001      	beq.n	8007e0a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8007e06:	2301      	movs	r3, #1
 8007e08:	e02d      	b.n	8007e66 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007e0a:	68bb      	ldr	r3, [r7, #8]
 8007e0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007e10:	d021      	beq.n	8007e56 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007e12:	f7fe fd3d 	bl	8006890 <HAL_GetTick>
 8007e16:	4602      	mov	r2, r0
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	1ad3      	subs	r3, r2, r3
 8007e1c:	68ba      	ldr	r2, [r7, #8]
 8007e1e:	429a      	cmp	r2, r3
 8007e20:	d302      	bcc.n	8007e28 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8007e22:	68bb      	ldr	r3, [r7, #8]
 8007e24:	2b00      	cmp	r3, #0
 8007e26:	d116      	bne.n	8007e56 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8007e28:	68fb      	ldr	r3, [r7, #12]
 8007e2a:	2200      	movs	r2, #0
 8007e2c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8007e2e:	68fb      	ldr	r3, [r7, #12]
 8007e30:	2220      	movs	r2, #32
 8007e32:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007e36:	68fb      	ldr	r3, [r7, #12]
 8007e38:	2200      	movs	r2, #0
 8007e3a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007e3e:	68fb      	ldr	r3, [r7, #12]
 8007e40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e42:	f043 0220 	orr.w	r2, r3, #32
 8007e46:	68fb      	ldr	r3, [r7, #12]
 8007e48:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007e4a:	68fb      	ldr	r3, [r7, #12]
 8007e4c:	2200      	movs	r2, #0
 8007e4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8007e52:	2301      	movs	r3, #1
 8007e54:	e007      	b.n	8007e66 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8007e56:	68fb      	ldr	r3, [r7, #12]
 8007e58:	681b      	ldr	r3, [r3, #0]
 8007e5a:	695b      	ldr	r3, [r3, #20]
 8007e5c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007e60:	2b80      	cmp	r3, #128	; 0x80
 8007e62:	d1ca      	bne.n	8007dfa <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8007e64:	2300      	movs	r3, #0
}
 8007e66:	4618      	mov	r0, r3
 8007e68:	3710      	adds	r7, #16
 8007e6a:	46bd      	mov	sp, r7
 8007e6c:	bd80      	pop	{r7, pc}

08007e6e <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007e6e:	b580      	push	{r7, lr}
 8007e70:	b084      	sub	sp, #16
 8007e72:	af00      	add	r7, sp, #0
 8007e74:	60f8      	str	r0, [r7, #12]
 8007e76:	60b9      	str	r1, [r7, #8]
 8007e78:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8007e7a:	e02d      	b.n	8007ed8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8007e7c:	68f8      	ldr	r0, [r7, #12]
 8007e7e:	f000 f88d 	bl	8007f9c <I2C_IsAcknowledgeFailed>
 8007e82:	4603      	mov	r3, r0
 8007e84:	2b00      	cmp	r3, #0
 8007e86:	d001      	beq.n	8007e8c <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8007e88:	2301      	movs	r3, #1
 8007e8a:	e02d      	b.n	8007ee8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007e8c:	68bb      	ldr	r3, [r7, #8]
 8007e8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007e92:	d021      	beq.n	8007ed8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007e94:	f7fe fcfc 	bl	8006890 <HAL_GetTick>
 8007e98:	4602      	mov	r2, r0
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	1ad3      	subs	r3, r2, r3
 8007e9e:	68ba      	ldr	r2, [r7, #8]
 8007ea0:	429a      	cmp	r2, r3
 8007ea2:	d302      	bcc.n	8007eaa <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8007ea4:	68bb      	ldr	r3, [r7, #8]
 8007ea6:	2b00      	cmp	r3, #0
 8007ea8:	d116      	bne.n	8007ed8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8007eaa:	68fb      	ldr	r3, [r7, #12]
 8007eac:	2200      	movs	r2, #0
 8007eae:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8007eb0:	68fb      	ldr	r3, [r7, #12]
 8007eb2:	2220      	movs	r2, #32
 8007eb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007eb8:	68fb      	ldr	r3, [r7, #12]
 8007eba:	2200      	movs	r2, #0
 8007ebc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007ec0:	68fb      	ldr	r3, [r7, #12]
 8007ec2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ec4:	f043 0220 	orr.w	r2, r3, #32
 8007ec8:	68fb      	ldr	r3, [r7, #12]
 8007eca:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007ecc:	68fb      	ldr	r3, [r7, #12]
 8007ece:	2200      	movs	r2, #0
 8007ed0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8007ed4:	2301      	movs	r3, #1
 8007ed6:	e007      	b.n	8007ee8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8007ed8:	68fb      	ldr	r3, [r7, #12]
 8007eda:	681b      	ldr	r3, [r3, #0]
 8007edc:	695b      	ldr	r3, [r3, #20]
 8007ede:	f003 0304 	and.w	r3, r3, #4
 8007ee2:	2b04      	cmp	r3, #4
 8007ee4:	d1ca      	bne.n	8007e7c <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8007ee6:	2300      	movs	r3, #0
}
 8007ee8:	4618      	mov	r0, r3
 8007eea:	3710      	adds	r7, #16
 8007eec:	46bd      	mov	sp, r7
 8007eee:	bd80      	pop	{r7, pc}

08007ef0 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007ef0:	b580      	push	{r7, lr}
 8007ef2:	b084      	sub	sp, #16
 8007ef4:	af00      	add	r7, sp, #0
 8007ef6:	60f8      	str	r0, [r7, #12]
 8007ef8:	60b9      	str	r1, [r7, #8]
 8007efa:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8007efc:	e042      	b.n	8007f84 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8007efe:	68fb      	ldr	r3, [r7, #12]
 8007f00:	681b      	ldr	r3, [r3, #0]
 8007f02:	695b      	ldr	r3, [r3, #20]
 8007f04:	f003 0310 	and.w	r3, r3, #16
 8007f08:	2b10      	cmp	r3, #16
 8007f0a:	d119      	bne.n	8007f40 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007f0c:	68fb      	ldr	r3, [r7, #12]
 8007f0e:	681b      	ldr	r3, [r3, #0]
 8007f10:	f06f 0210 	mvn.w	r2, #16
 8007f14:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8007f16:	68fb      	ldr	r3, [r7, #12]
 8007f18:	2200      	movs	r2, #0
 8007f1a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8007f1c:	68fb      	ldr	r3, [r7, #12]
 8007f1e:	2220      	movs	r2, #32
 8007f20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007f24:	68fb      	ldr	r3, [r7, #12]
 8007f26:	2200      	movs	r2, #0
 8007f28:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8007f2c:	68fb      	ldr	r3, [r7, #12]
 8007f2e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007f30:	68fb      	ldr	r3, [r7, #12]
 8007f32:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007f34:	68fb      	ldr	r3, [r7, #12]
 8007f36:	2200      	movs	r2, #0
 8007f38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8007f3c:	2301      	movs	r3, #1
 8007f3e:	e029      	b.n	8007f94 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007f40:	f7fe fca6 	bl	8006890 <HAL_GetTick>
 8007f44:	4602      	mov	r2, r0
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	1ad3      	subs	r3, r2, r3
 8007f4a:	68ba      	ldr	r2, [r7, #8]
 8007f4c:	429a      	cmp	r2, r3
 8007f4e:	d302      	bcc.n	8007f56 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8007f50:	68bb      	ldr	r3, [r7, #8]
 8007f52:	2b00      	cmp	r3, #0
 8007f54:	d116      	bne.n	8007f84 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8007f56:	68fb      	ldr	r3, [r7, #12]
 8007f58:	2200      	movs	r2, #0
 8007f5a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8007f5c:	68fb      	ldr	r3, [r7, #12]
 8007f5e:	2220      	movs	r2, #32
 8007f60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007f64:	68fb      	ldr	r3, [r7, #12]
 8007f66:	2200      	movs	r2, #0
 8007f68:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007f6c:	68fb      	ldr	r3, [r7, #12]
 8007f6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f70:	f043 0220 	orr.w	r2, r3, #32
 8007f74:	68fb      	ldr	r3, [r7, #12]
 8007f76:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007f78:	68fb      	ldr	r3, [r7, #12]
 8007f7a:	2200      	movs	r2, #0
 8007f7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8007f80:	2301      	movs	r3, #1
 8007f82:	e007      	b.n	8007f94 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8007f84:	68fb      	ldr	r3, [r7, #12]
 8007f86:	681b      	ldr	r3, [r3, #0]
 8007f88:	695b      	ldr	r3, [r3, #20]
 8007f8a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007f8e:	2b40      	cmp	r3, #64	; 0x40
 8007f90:	d1b5      	bne.n	8007efe <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8007f92:	2300      	movs	r3, #0
}
 8007f94:	4618      	mov	r0, r3
 8007f96:	3710      	adds	r7, #16
 8007f98:	46bd      	mov	sp, r7
 8007f9a:	bd80      	pop	{r7, pc}

08007f9c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8007f9c:	b480      	push	{r7}
 8007f9e:	b083      	sub	sp, #12
 8007fa0:	af00      	add	r7, sp, #0
 8007fa2:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	681b      	ldr	r3, [r3, #0]
 8007fa8:	695b      	ldr	r3, [r3, #20]
 8007faa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007fae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007fb2:	d11b      	bne.n	8007fec <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	681b      	ldr	r3, [r3, #0]
 8007fb8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8007fbc:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	2200      	movs	r2, #0
 8007fc2:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	2220      	movs	r2, #32
 8007fc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	2200      	movs	r2, #0
 8007fd0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007fd8:	f043 0204 	orr.w	r2, r3, #4
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	2200      	movs	r2, #0
 8007fe4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8007fe8:	2301      	movs	r3, #1
 8007fea:	e000      	b.n	8007fee <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8007fec:	2300      	movs	r3, #0
}
 8007fee:	4618      	mov	r0, r3
 8007ff0:	370c      	adds	r7, #12
 8007ff2:	46bd      	mov	sp, r7
 8007ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ff8:	4770      	bx	lr
	...

08007ffc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007ffc:	b580      	push	{r7, lr}
 8007ffe:	b086      	sub	sp, #24
 8008000:	af00      	add	r7, sp, #0
 8008002:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	2b00      	cmp	r3, #0
 8008008:	d101      	bne.n	800800e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800800a:	2301      	movs	r3, #1
 800800c:	e267      	b.n	80084de <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	681b      	ldr	r3, [r3, #0]
 8008012:	f003 0301 	and.w	r3, r3, #1
 8008016:	2b00      	cmp	r3, #0
 8008018:	d075      	beq.n	8008106 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800801a:	4b88      	ldr	r3, [pc, #544]	; (800823c <HAL_RCC_OscConfig+0x240>)
 800801c:	689b      	ldr	r3, [r3, #8]
 800801e:	f003 030c 	and.w	r3, r3, #12
 8008022:	2b04      	cmp	r3, #4
 8008024:	d00c      	beq.n	8008040 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8008026:	4b85      	ldr	r3, [pc, #532]	; (800823c <HAL_RCC_OscConfig+0x240>)
 8008028:	689b      	ldr	r3, [r3, #8]
 800802a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800802e:	2b08      	cmp	r3, #8
 8008030:	d112      	bne.n	8008058 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8008032:	4b82      	ldr	r3, [pc, #520]	; (800823c <HAL_RCC_OscConfig+0x240>)
 8008034:	685b      	ldr	r3, [r3, #4]
 8008036:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800803a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800803e:	d10b      	bne.n	8008058 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008040:	4b7e      	ldr	r3, [pc, #504]	; (800823c <HAL_RCC_OscConfig+0x240>)
 8008042:	681b      	ldr	r3, [r3, #0]
 8008044:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008048:	2b00      	cmp	r3, #0
 800804a:	d05b      	beq.n	8008104 <HAL_RCC_OscConfig+0x108>
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	685b      	ldr	r3, [r3, #4]
 8008050:	2b00      	cmp	r3, #0
 8008052:	d157      	bne.n	8008104 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8008054:	2301      	movs	r3, #1
 8008056:	e242      	b.n	80084de <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	685b      	ldr	r3, [r3, #4]
 800805c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008060:	d106      	bne.n	8008070 <HAL_RCC_OscConfig+0x74>
 8008062:	4b76      	ldr	r3, [pc, #472]	; (800823c <HAL_RCC_OscConfig+0x240>)
 8008064:	681b      	ldr	r3, [r3, #0]
 8008066:	4a75      	ldr	r2, [pc, #468]	; (800823c <HAL_RCC_OscConfig+0x240>)
 8008068:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800806c:	6013      	str	r3, [r2, #0]
 800806e:	e01d      	b.n	80080ac <HAL_RCC_OscConfig+0xb0>
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	685b      	ldr	r3, [r3, #4]
 8008074:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008078:	d10c      	bne.n	8008094 <HAL_RCC_OscConfig+0x98>
 800807a:	4b70      	ldr	r3, [pc, #448]	; (800823c <HAL_RCC_OscConfig+0x240>)
 800807c:	681b      	ldr	r3, [r3, #0]
 800807e:	4a6f      	ldr	r2, [pc, #444]	; (800823c <HAL_RCC_OscConfig+0x240>)
 8008080:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8008084:	6013      	str	r3, [r2, #0]
 8008086:	4b6d      	ldr	r3, [pc, #436]	; (800823c <HAL_RCC_OscConfig+0x240>)
 8008088:	681b      	ldr	r3, [r3, #0]
 800808a:	4a6c      	ldr	r2, [pc, #432]	; (800823c <HAL_RCC_OscConfig+0x240>)
 800808c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008090:	6013      	str	r3, [r2, #0]
 8008092:	e00b      	b.n	80080ac <HAL_RCC_OscConfig+0xb0>
 8008094:	4b69      	ldr	r3, [pc, #420]	; (800823c <HAL_RCC_OscConfig+0x240>)
 8008096:	681b      	ldr	r3, [r3, #0]
 8008098:	4a68      	ldr	r2, [pc, #416]	; (800823c <HAL_RCC_OscConfig+0x240>)
 800809a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800809e:	6013      	str	r3, [r2, #0]
 80080a0:	4b66      	ldr	r3, [pc, #408]	; (800823c <HAL_RCC_OscConfig+0x240>)
 80080a2:	681b      	ldr	r3, [r3, #0]
 80080a4:	4a65      	ldr	r2, [pc, #404]	; (800823c <HAL_RCC_OscConfig+0x240>)
 80080a6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80080aa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	685b      	ldr	r3, [r3, #4]
 80080b0:	2b00      	cmp	r3, #0
 80080b2:	d013      	beq.n	80080dc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80080b4:	f7fe fbec 	bl	8006890 <HAL_GetTick>
 80080b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80080ba:	e008      	b.n	80080ce <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80080bc:	f7fe fbe8 	bl	8006890 <HAL_GetTick>
 80080c0:	4602      	mov	r2, r0
 80080c2:	693b      	ldr	r3, [r7, #16]
 80080c4:	1ad3      	subs	r3, r2, r3
 80080c6:	2b64      	cmp	r3, #100	; 0x64
 80080c8:	d901      	bls.n	80080ce <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80080ca:	2303      	movs	r3, #3
 80080cc:	e207      	b.n	80084de <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80080ce:	4b5b      	ldr	r3, [pc, #364]	; (800823c <HAL_RCC_OscConfig+0x240>)
 80080d0:	681b      	ldr	r3, [r3, #0]
 80080d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80080d6:	2b00      	cmp	r3, #0
 80080d8:	d0f0      	beq.n	80080bc <HAL_RCC_OscConfig+0xc0>
 80080da:	e014      	b.n	8008106 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80080dc:	f7fe fbd8 	bl	8006890 <HAL_GetTick>
 80080e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80080e2:	e008      	b.n	80080f6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80080e4:	f7fe fbd4 	bl	8006890 <HAL_GetTick>
 80080e8:	4602      	mov	r2, r0
 80080ea:	693b      	ldr	r3, [r7, #16]
 80080ec:	1ad3      	subs	r3, r2, r3
 80080ee:	2b64      	cmp	r3, #100	; 0x64
 80080f0:	d901      	bls.n	80080f6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80080f2:	2303      	movs	r3, #3
 80080f4:	e1f3      	b.n	80084de <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80080f6:	4b51      	ldr	r3, [pc, #324]	; (800823c <HAL_RCC_OscConfig+0x240>)
 80080f8:	681b      	ldr	r3, [r3, #0]
 80080fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80080fe:	2b00      	cmp	r3, #0
 8008100:	d1f0      	bne.n	80080e4 <HAL_RCC_OscConfig+0xe8>
 8008102:	e000      	b.n	8008106 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008104:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	681b      	ldr	r3, [r3, #0]
 800810a:	f003 0302 	and.w	r3, r3, #2
 800810e:	2b00      	cmp	r3, #0
 8008110:	d063      	beq.n	80081da <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8008112:	4b4a      	ldr	r3, [pc, #296]	; (800823c <HAL_RCC_OscConfig+0x240>)
 8008114:	689b      	ldr	r3, [r3, #8]
 8008116:	f003 030c 	and.w	r3, r3, #12
 800811a:	2b00      	cmp	r3, #0
 800811c:	d00b      	beq.n	8008136 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800811e:	4b47      	ldr	r3, [pc, #284]	; (800823c <HAL_RCC_OscConfig+0x240>)
 8008120:	689b      	ldr	r3, [r3, #8]
 8008122:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8008126:	2b08      	cmp	r3, #8
 8008128:	d11c      	bne.n	8008164 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800812a:	4b44      	ldr	r3, [pc, #272]	; (800823c <HAL_RCC_OscConfig+0x240>)
 800812c:	685b      	ldr	r3, [r3, #4]
 800812e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008132:	2b00      	cmp	r3, #0
 8008134:	d116      	bne.n	8008164 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8008136:	4b41      	ldr	r3, [pc, #260]	; (800823c <HAL_RCC_OscConfig+0x240>)
 8008138:	681b      	ldr	r3, [r3, #0]
 800813a:	f003 0302 	and.w	r3, r3, #2
 800813e:	2b00      	cmp	r3, #0
 8008140:	d005      	beq.n	800814e <HAL_RCC_OscConfig+0x152>
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	68db      	ldr	r3, [r3, #12]
 8008146:	2b01      	cmp	r3, #1
 8008148:	d001      	beq.n	800814e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800814a:	2301      	movs	r3, #1
 800814c:	e1c7      	b.n	80084de <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800814e:	4b3b      	ldr	r3, [pc, #236]	; (800823c <HAL_RCC_OscConfig+0x240>)
 8008150:	681b      	ldr	r3, [r3, #0]
 8008152:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	691b      	ldr	r3, [r3, #16]
 800815a:	00db      	lsls	r3, r3, #3
 800815c:	4937      	ldr	r1, [pc, #220]	; (800823c <HAL_RCC_OscConfig+0x240>)
 800815e:	4313      	orrs	r3, r2
 8008160:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8008162:	e03a      	b.n	80081da <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	68db      	ldr	r3, [r3, #12]
 8008168:	2b00      	cmp	r3, #0
 800816a:	d020      	beq.n	80081ae <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800816c:	4b34      	ldr	r3, [pc, #208]	; (8008240 <HAL_RCC_OscConfig+0x244>)
 800816e:	2201      	movs	r2, #1
 8008170:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008172:	f7fe fb8d 	bl	8006890 <HAL_GetTick>
 8008176:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008178:	e008      	b.n	800818c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800817a:	f7fe fb89 	bl	8006890 <HAL_GetTick>
 800817e:	4602      	mov	r2, r0
 8008180:	693b      	ldr	r3, [r7, #16]
 8008182:	1ad3      	subs	r3, r2, r3
 8008184:	2b02      	cmp	r3, #2
 8008186:	d901      	bls.n	800818c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8008188:	2303      	movs	r3, #3
 800818a:	e1a8      	b.n	80084de <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800818c:	4b2b      	ldr	r3, [pc, #172]	; (800823c <HAL_RCC_OscConfig+0x240>)
 800818e:	681b      	ldr	r3, [r3, #0]
 8008190:	f003 0302 	and.w	r3, r3, #2
 8008194:	2b00      	cmp	r3, #0
 8008196:	d0f0      	beq.n	800817a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008198:	4b28      	ldr	r3, [pc, #160]	; (800823c <HAL_RCC_OscConfig+0x240>)
 800819a:	681b      	ldr	r3, [r3, #0]
 800819c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	691b      	ldr	r3, [r3, #16]
 80081a4:	00db      	lsls	r3, r3, #3
 80081a6:	4925      	ldr	r1, [pc, #148]	; (800823c <HAL_RCC_OscConfig+0x240>)
 80081a8:	4313      	orrs	r3, r2
 80081aa:	600b      	str	r3, [r1, #0]
 80081ac:	e015      	b.n	80081da <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80081ae:	4b24      	ldr	r3, [pc, #144]	; (8008240 <HAL_RCC_OscConfig+0x244>)
 80081b0:	2200      	movs	r2, #0
 80081b2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80081b4:	f7fe fb6c 	bl	8006890 <HAL_GetTick>
 80081b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80081ba:	e008      	b.n	80081ce <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80081bc:	f7fe fb68 	bl	8006890 <HAL_GetTick>
 80081c0:	4602      	mov	r2, r0
 80081c2:	693b      	ldr	r3, [r7, #16]
 80081c4:	1ad3      	subs	r3, r2, r3
 80081c6:	2b02      	cmp	r3, #2
 80081c8:	d901      	bls.n	80081ce <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80081ca:	2303      	movs	r3, #3
 80081cc:	e187      	b.n	80084de <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80081ce:	4b1b      	ldr	r3, [pc, #108]	; (800823c <HAL_RCC_OscConfig+0x240>)
 80081d0:	681b      	ldr	r3, [r3, #0]
 80081d2:	f003 0302 	and.w	r3, r3, #2
 80081d6:	2b00      	cmp	r3, #0
 80081d8:	d1f0      	bne.n	80081bc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	681b      	ldr	r3, [r3, #0]
 80081de:	f003 0308 	and.w	r3, r3, #8
 80081e2:	2b00      	cmp	r3, #0
 80081e4:	d036      	beq.n	8008254 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	695b      	ldr	r3, [r3, #20]
 80081ea:	2b00      	cmp	r3, #0
 80081ec:	d016      	beq.n	800821c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80081ee:	4b15      	ldr	r3, [pc, #84]	; (8008244 <HAL_RCC_OscConfig+0x248>)
 80081f0:	2201      	movs	r2, #1
 80081f2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80081f4:	f7fe fb4c 	bl	8006890 <HAL_GetTick>
 80081f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80081fa:	e008      	b.n	800820e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80081fc:	f7fe fb48 	bl	8006890 <HAL_GetTick>
 8008200:	4602      	mov	r2, r0
 8008202:	693b      	ldr	r3, [r7, #16]
 8008204:	1ad3      	subs	r3, r2, r3
 8008206:	2b02      	cmp	r3, #2
 8008208:	d901      	bls.n	800820e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800820a:	2303      	movs	r3, #3
 800820c:	e167      	b.n	80084de <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800820e:	4b0b      	ldr	r3, [pc, #44]	; (800823c <HAL_RCC_OscConfig+0x240>)
 8008210:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008212:	f003 0302 	and.w	r3, r3, #2
 8008216:	2b00      	cmp	r3, #0
 8008218:	d0f0      	beq.n	80081fc <HAL_RCC_OscConfig+0x200>
 800821a:	e01b      	b.n	8008254 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800821c:	4b09      	ldr	r3, [pc, #36]	; (8008244 <HAL_RCC_OscConfig+0x248>)
 800821e:	2200      	movs	r2, #0
 8008220:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008222:	f7fe fb35 	bl	8006890 <HAL_GetTick>
 8008226:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008228:	e00e      	b.n	8008248 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800822a:	f7fe fb31 	bl	8006890 <HAL_GetTick>
 800822e:	4602      	mov	r2, r0
 8008230:	693b      	ldr	r3, [r7, #16]
 8008232:	1ad3      	subs	r3, r2, r3
 8008234:	2b02      	cmp	r3, #2
 8008236:	d907      	bls.n	8008248 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8008238:	2303      	movs	r3, #3
 800823a:	e150      	b.n	80084de <HAL_RCC_OscConfig+0x4e2>
 800823c:	40023800 	.word	0x40023800
 8008240:	42470000 	.word	0x42470000
 8008244:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008248:	4b88      	ldr	r3, [pc, #544]	; (800846c <HAL_RCC_OscConfig+0x470>)
 800824a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800824c:	f003 0302 	and.w	r3, r3, #2
 8008250:	2b00      	cmp	r3, #0
 8008252:	d1ea      	bne.n	800822a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	681b      	ldr	r3, [r3, #0]
 8008258:	f003 0304 	and.w	r3, r3, #4
 800825c:	2b00      	cmp	r3, #0
 800825e:	f000 8097 	beq.w	8008390 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8008262:	2300      	movs	r3, #0
 8008264:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8008266:	4b81      	ldr	r3, [pc, #516]	; (800846c <HAL_RCC_OscConfig+0x470>)
 8008268:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800826a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800826e:	2b00      	cmp	r3, #0
 8008270:	d10f      	bne.n	8008292 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8008272:	2300      	movs	r3, #0
 8008274:	60bb      	str	r3, [r7, #8]
 8008276:	4b7d      	ldr	r3, [pc, #500]	; (800846c <HAL_RCC_OscConfig+0x470>)
 8008278:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800827a:	4a7c      	ldr	r2, [pc, #496]	; (800846c <HAL_RCC_OscConfig+0x470>)
 800827c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008280:	6413      	str	r3, [r2, #64]	; 0x40
 8008282:	4b7a      	ldr	r3, [pc, #488]	; (800846c <HAL_RCC_OscConfig+0x470>)
 8008284:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008286:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800828a:	60bb      	str	r3, [r7, #8]
 800828c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800828e:	2301      	movs	r3, #1
 8008290:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008292:	4b77      	ldr	r3, [pc, #476]	; (8008470 <HAL_RCC_OscConfig+0x474>)
 8008294:	681b      	ldr	r3, [r3, #0]
 8008296:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800829a:	2b00      	cmp	r3, #0
 800829c:	d118      	bne.n	80082d0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800829e:	4b74      	ldr	r3, [pc, #464]	; (8008470 <HAL_RCC_OscConfig+0x474>)
 80082a0:	681b      	ldr	r3, [r3, #0]
 80082a2:	4a73      	ldr	r2, [pc, #460]	; (8008470 <HAL_RCC_OscConfig+0x474>)
 80082a4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80082a8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80082aa:	f7fe faf1 	bl	8006890 <HAL_GetTick>
 80082ae:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80082b0:	e008      	b.n	80082c4 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80082b2:	f7fe faed 	bl	8006890 <HAL_GetTick>
 80082b6:	4602      	mov	r2, r0
 80082b8:	693b      	ldr	r3, [r7, #16]
 80082ba:	1ad3      	subs	r3, r2, r3
 80082bc:	2b02      	cmp	r3, #2
 80082be:	d901      	bls.n	80082c4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80082c0:	2303      	movs	r3, #3
 80082c2:	e10c      	b.n	80084de <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80082c4:	4b6a      	ldr	r3, [pc, #424]	; (8008470 <HAL_RCC_OscConfig+0x474>)
 80082c6:	681b      	ldr	r3, [r3, #0]
 80082c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80082cc:	2b00      	cmp	r3, #0
 80082ce:	d0f0      	beq.n	80082b2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	689b      	ldr	r3, [r3, #8]
 80082d4:	2b01      	cmp	r3, #1
 80082d6:	d106      	bne.n	80082e6 <HAL_RCC_OscConfig+0x2ea>
 80082d8:	4b64      	ldr	r3, [pc, #400]	; (800846c <HAL_RCC_OscConfig+0x470>)
 80082da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80082dc:	4a63      	ldr	r2, [pc, #396]	; (800846c <HAL_RCC_OscConfig+0x470>)
 80082de:	f043 0301 	orr.w	r3, r3, #1
 80082e2:	6713      	str	r3, [r2, #112]	; 0x70
 80082e4:	e01c      	b.n	8008320 <HAL_RCC_OscConfig+0x324>
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	689b      	ldr	r3, [r3, #8]
 80082ea:	2b05      	cmp	r3, #5
 80082ec:	d10c      	bne.n	8008308 <HAL_RCC_OscConfig+0x30c>
 80082ee:	4b5f      	ldr	r3, [pc, #380]	; (800846c <HAL_RCC_OscConfig+0x470>)
 80082f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80082f2:	4a5e      	ldr	r2, [pc, #376]	; (800846c <HAL_RCC_OscConfig+0x470>)
 80082f4:	f043 0304 	orr.w	r3, r3, #4
 80082f8:	6713      	str	r3, [r2, #112]	; 0x70
 80082fa:	4b5c      	ldr	r3, [pc, #368]	; (800846c <HAL_RCC_OscConfig+0x470>)
 80082fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80082fe:	4a5b      	ldr	r2, [pc, #364]	; (800846c <HAL_RCC_OscConfig+0x470>)
 8008300:	f043 0301 	orr.w	r3, r3, #1
 8008304:	6713      	str	r3, [r2, #112]	; 0x70
 8008306:	e00b      	b.n	8008320 <HAL_RCC_OscConfig+0x324>
 8008308:	4b58      	ldr	r3, [pc, #352]	; (800846c <HAL_RCC_OscConfig+0x470>)
 800830a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800830c:	4a57      	ldr	r2, [pc, #348]	; (800846c <HAL_RCC_OscConfig+0x470>)
 800830e:	f023 0301 	bic.w	r3, r3, #1
 8008312:	6713      	str	r3, [r2, #112]	; 0x70
 8008314:	4b55      	ldr	r3, [pc, #340]	; (800846c <HAL_RCC_OscConfig+0x470>)
 8008316:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008318:	4a54      	ldr	r2, [pc, #336]	; (800846c <HAL_RCC_OscConfig+0x470>)
 800831a:	f023 0304 	bic.w	r3, r3, #4
 800831e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	689b      	ldr	r3, [r3, #8]
 8008324:	2b00      	cmp	r3, #0
 8008326:	d015      	beq.n	8008354 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008328:	f7fe fab2 	bl	8006890 <HAL_GetTick>
 800832c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800832e:	e00a      	b.n	8008346 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008330:	f7fe faae 	bl	8006890 <HAL_GetTick>
 8008334:	4602      	mov	r2, r0
 8008336:	693b      	ldr	r3, [r7, #16]
 8008338:	1ad3      	subs	r3, r2, r3
 800833a:	f241 3288 	movw	r2, #5000	; 0x1388
 800833e:	4293      	cmp	r3, r2
 8008340:	d901      	bls.n	8008346 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8008342:	2303      	movs	r3, #3
 8008344:	e0cb      	b.n	80084de <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008346:	4b49      	ldr	r3, [pc, #292]	; (800846c <HAL_RCC_OscConfig+0x470>)
 8008348:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800834a:	f003 0302 	and.w	r3, r3, #2
 800834e:	2b00      	cmp	r3, #0
 8008350:	d0ee      	beq.n	8008330 <HAL_RCC_OscConfig+0x334>
 8008352:	e014      	b.n	800837e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008354:	f7fe fa9c 	bl	8006890 <HAL_GetTick>
 8008358:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800835a:	e00a      	b.n	8008372 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800835c:	f7fe fa98 	bl	8006890 <HAL_GetTick>
 8008360:	4602      	mov	r2, r0
 8008362:	693b      	ldr	r3, [r7, #16]
 8008364:	1ad3      	subs	r3, r2, r3
 8008366:	f241 3288 	movw	r2, #5000	; 0x1388
 800836a:	4293      	cmp	r3, r2
 800836c:	d901      	bls.n	8008372 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800836e:	2303      	movs	r3, #3
 8008370:	e0b5      	b.n	80084de <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008372:	4b3e      	ldr	r3, [pc, #248]	; (800846c <HAL_RCC_OscConfig+0x470>)
 8008374:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008376:	f003 0302 	and.w	r3, r3, #2
 800837a:	2b00      	cmp	r3, #0
 800837c:	d1ee      	bne.n	800835c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800837e:	7dfb      	ldrb	r3, [r7, #23]
 8008380:	2b01      	cmp	r3, #1
 8008382:	d105      	bne.n	8008390 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008384:	4b39      	ldr	r3, [pc, #228]	; (800846c <HAL_RCC_OscConfig+0x470>)
 8008386:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008388:	4a38      	ldr	r2, [pc, #224]	; (800846c <HAL_RCC_OscConfig+0x470>)
 800838a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800838e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	699b      	ldr	r3, [r3, #24]
 8008394:	2b00      	cmp	r3, #0
 8008396:	f000 80a1 	beq.w	80084dc <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800839a:	4b34      	ldr	r3, [pc, #208]	; (800846c <HAL_RCC_OscConfig+0x470>)
 800839c:	689b      	ldr	r3, [r3, #8]
 800839e:	f003 030c 	and.w	r3, r3, #12
 80083a2:	2b08      	cmp	r3, #8
 80083a4:	d05c      	beq.n	8008460 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	699b      	ldr	r3, [r3, #24]
 80083aa:	2b02      	cmp	r3, #2
 80083ac:	d141      	bne.n	8008432 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80083ae:	4b31      	ldr	r3, [pc, #196]	; (8008474 <HAL_RCC_OscConfig+0x478>)
 80083b0:	2200      	movs	r2, #0
 80083b2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80083b4:	f7fe fa6c 	bl	8006890 <HAL_GetTick>
 80083b8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80083ba:	e008      	b.n	80083ce <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80083bc:	f7fe fa68 	bl	8006890 <HAL_GetTick>
 80083c0:	4602      	mov	r2, r0
 80083c2:	693b      	ldr	r3, [r7, #16]
 80083c4:	1ad3      	subs	r3, r2, r3
 80083c6:	2b02      	cmp	r3, #2
 80083c8:	d901      	bls.n	80083ce <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80083ca:	2303      	movs	r3, #3
 80083cc:	e087      	b.n	80084de <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80083ce:	4b27      	ldr	r3, [pc, #156]	; (800846c <HAL_RCC_OscConfig+0x470>)
 80083d0:	681b      	ldr	r3, [r3, #0]
 80083d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80083d6:	2b00      	cmp	r3, #0
 80083d8:	d1f0      	bne.n	80083bc <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	69da      	ldr	r2, [r3, #28]
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	6a1b      	ldr	r3, [r3, #32]
 80083e2:	431a      	orrs	r2, r3
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083e8:	019b      	lsls	r3, r3, #6
 80083ea:	431a      	orrs	r2, r3
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80083f0:	085b      	lsrs	r3, r3, #1
 80083f2:	3b01      	subs	r3, #1
 80083f4:	041b      	lsls	r3, r3, #16
 80083f6:	431a      	orrs	r2, r3
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80083fc:	061b      	lsls	r3, r3, #24
 80083fe:	491b      	ldr	r1, [pc, #108]	; (800846c <HAL_RCC_OscConfig+0x470>)
 8008400:	4313      	orrs	r3, r2
 8008402:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8008404:	4b1b      	ldr	r3, [pc, #108]	; (8008474 <HAL_RCC_OscConfig+0x478>)
 8008406:	2201      	movs	r2, #1
 8008408:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800840a:	f7fe fa41 	bl	8006890 <HAL_GetTick>
 800840e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008410:	e008      	b.n	8008424 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008412:	f7fe fa3d 	bl	8006890 <HAL_GetTick>
 8008416:	4602      	mov	r2, r0
 8008418:	693b      	ldr	r3, [r7, #16]
 800841a:	1ad3      	subs	r3, r2, r3
 800841c:	2b02      	cmp	r3, #2
 800841e:	d901      	bls.n	8008424 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8008420:	2303      	movs	r3, #3
 8008422:	e05c      	b.n	80084de <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008424:	4b11      	ldr	r3, [pc, #68]	; (800846c <HAL_RCC_OscConfig+0x470>)
 8008426:	681b      	ldr	r3, [r3, #0]
 8008428:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800842c:	2b00      	cmp	r3, #0
 800842e:	d0f0      	beq.n	8008412 <HAL_RCC_OscConfig+0x416>
 8008430:	e054      	b.n	80084dc <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008432:	4b10      	ldr	r3, [pc, #64]	; (8008474 <HAL_RCC_OscConfig+0x478>)
 8008434:	2200      	movs	r2, #0
 8008436:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008438:	f7fe fa2a 	bl	8006890 <HAL_GetTick>
 800843c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800843e:	e008      	b.n	8008452 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008440:	f7fe fa26 	bl	8006890 <HAL_GetTick>
 8008444:	4602      	mov	r2, r0
 8008446:	693b      	ldr	r3, [r7, #16]
 8008448:	1ad3      	subs	r3, r2, r3
 800844a:	2b02      	cmp	r3, #2
 800844c:	d901      	bls.n	8008452 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800844e:	2303      	movs	r3, #3
 8008450:	e045      	b.n	80084de <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008452:	4b06      	ldr	r3, [pc, #24]	; (800846c <HAL_RCC_OscConfig+0x470>)
 8008454:	681b      	ldr	r3, [r3, #0]
 8008456:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800845a:	2b00      	cmp	r3, #0
 800845c:	d1f0      	bne.n	8008440 <HAL_RCC_OscConfig+0x444>
 800845e:	e03d      	b.n	80084dc <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	699b      	ldr	r3, [r3, #24]
 8008464:	2b01      	cmp	r3, #1
 8008466:	d107      	bne.n	8008478 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8008468:	2301      	movs	r3, #1
 800846a:	e038      	b.n	80084de <HAL_RCC_OscConfig+0x4e2>
 800846c:	40023800 	.word	0x40023800
 8008470:	40007000 	.word	0x40007000
 8008474:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8008478:	4b1b      	ldr	r3, [pc, #108]	; (80084e8 <HAL_RCC_OscConfig+0x4ec>)
 800847a:	685b      	ldr	r3, [r3, #4]
 800847c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	699b      	ldr	r3, [r3, #24]
 8008482:	2b01      	cmp	r3, #1
 8008484:	d028      	beq.n	80084d8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008486:	68fb      	ldr	r3, [r7, #12]
 8008488:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008490:	429a      	cmp	r2, r3
 8008492:	d121      	bne.n	80084d8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8008494:	68fb      	ldr	r3, [r7, #12]
 8008496:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800849e:	429a      	cmp	r2, r3
 80084a0:	d11a      	bne.n	80084d8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80084a2:	68fa      	ldr	r2, [r7, #12]
 80084a4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80084a8:	4013      	ands	r3, r2
 80084aa:	687a      	ldr	r2, [r7, #4]
 80084ac:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80084ae:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80084b0:	4293      	cmp	r3, r2
 80084b2:	d111      	bne.n	80084d8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80084b4:	68fb      	ldr	r3, [r7, #12]
 80084b6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80084be:	085b      	lsrs	r3, r3, #1
 80084c0:	3b01      	subs	r3, #1
 80084c2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80084c4:	429a      	cmp	r2, r3
 80084c6:	d107      	bne.n	80084d8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80084c8:	68fb      	ldr	r3, [r7, #12]
 80084ca:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80084d2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80084d4:	429a      	cmp	r2, r3
 80084d6:	d001      	beq.n	80084dc <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80084d8:	2301      	movs	r3, #1
 80084da:	e000      	b.n	80084de <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80084dc:	2300      	movs	r3, #0
}
 80084de:	4618      	mov	r0, r3
 80084e0:	3718      	adds	r7, #24
 80084e2:	46bd      	mov	sp, r7
 80084e4:	bd80      	pop	{r7, pc}
 80084e6:	bf00      	nop
 80084e8:	40023800 	.word	0x40023800

080084ec <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80084ec:	b580      	push	{r7, lr}
 80084ee:	b084      	sub	sp, #16
 80084f0:	af00      	add	r7, sp, #0
 80084f2:	6078      	str	r0, [r7, #4]
 80084f4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	2b00      	cmp	r3, #0
 80084fa:	d101      	bne.n	8008500 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80084fc:	2301      	movs	r3, #1
 80084fe:	e0cc      	b.n	800869a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8008500:	4b68      	ldr	r3, [pc, #416]	; (80086a4 <HAL_RCC_ClockConfig+0x1b8>)
 8008502:	681b      	ldr	r3, [r3, #0]
 8008504:	f003 0307 	and.w	r3, r3, #7
 8008508:	683a      	ldr	r2, [r7, #0]
 800850a:	429a      	cmp	r2, r3
 800850c:	d90c      	bls.n	8008528 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800850e:	4b65      	ldr	r3, [pc, #404]	; (80086a4 <HAL_RCC_ClockConfig+0x1b8>)
 8008510:	683a      	ldr	r2, [r7, #0]
 8008512:	b2d2      	uxtb	r2, r2
 8008514:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008516:	4b63      	ldr	r3, [pc, #396]	; (80086a4 <HAL_RCC_ClockConfig+0x1b8>)
 8008518:	681b      	ldr	r3, [r3, #0]
 800851a:	f003 0307 	and.w	r3, r3, #7
 800851e:	683a      	ldr	r2, [r7, #0]
 8008520:	429a      	cmp	r2, r3
 8008522:	d001      	beq.n	8008528 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8008524:	2301      	movs	r3, #1
 8008526:	e0b8      	b.n	800869a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	681b      	ldr	r3, [r3, #0]
 800852c:	f003 0302 	and.w	r3, r3, #2
 8008530:	2b00      	cmp	r3, #0
 8008532:	d020      	beq.n	8008576 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	681b      	ldr	r3, [r3, #0]
 8008538:	f003 0304 	and.w	r3, r3, #4
 800853c:	2b00      	cmp	r3, #0
 800853e:	d005      	beq.n	800854c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8008540:	4b59      	ldr	r3, [pc, #356]	; (80086a8 <HAL_RCC_ClockConfig+0x1bc>)
 8008542:	689b      	ldr	r3, [r3, #8]
 8008544:	4a58      	ldr	r2, [pc, #352]	; (80086a8 <HAL_RCC_ClockConfig+0x1bc>)
 8008546:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800854a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	681b      	ldr	r3, [r3, #0]
 8008550:	f003 0308 	and.w	r3, r3, #8
 8008554:	2b00      	cmp	r3, #0
 8008556:	d005      	beq.n	8008564 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8008558:	4b53      	ldr	r3, [pc, #332]	; (80086a8 <HAL_RCC_ClockConfig+0x1bc>)
 800855a:	689b      	ldr	r3, [r3, #8]
 800855c:	4a52      	ldr	r2, [pc, #328]	; (80086a8 <HAL_RCC_ClockConfig+0x1bc>)
 800855e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8008562:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008564:	4b50      	ldr	r3, [pc, #320]	; (80086a8 <HAL_RCC_ClockConfig+0x1bc>)
 8008566:	689b      	ldr	r3, [r3, #8]
 8008568:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	689b      	ldr	r3, [r3, #8]
 8008570:	494d      	ldr	r1, [pc, #308]	; (80086a8 <HAL_RCC_ClockConfig+0x1bc>)
 8008572:	4313      	orrs	r3, r2
 8008574:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	681b      	ldr	r3, [r3, #0]
 800857a:	f003 0301 	and.w	r3, r3, #1
 800857e:	2b00      	cmp	r3, #0
 8008580:	d044      	beq.n	800860c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	685b      	ldr	r3, [r3, #4]
 8008586:	2b01      	cmp	r3, #1
 8008588:	d107      	bne.n	800859a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800858a:	4b47      	ldr	r3, [pc, #284]	; (80086a8 <HAL_RCC_ClockConfig+0x1bc>)
 800858c:	681b      	ldr	r3, [r3, #0]
 800858e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008592:	2b00      	cmp	r3, #0
 8008594:	d119      	bne.n	80085ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008596:	2301      	movs	r3, #1
 8008598:	e07f      	b.n	800869a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	685b      	ldr	r3, [r3, #4]
 800859e:	2b02      	cmp	r3, #2
 80085a0:	d003      	beq.n	80085aa <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80085a6:	2b03      	cmp	r3, #3
 80085a8:	d107      	bne.n	80085ba <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80085aa:	4b3f      	ldr	r3, [pc, #252]	; (80086a8 <HAL_RCC_ClockConfig+0x1bc>)
 80085ac:	681b      	ldr	r3, [r3, #0]
 80085ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80085b2:	2b00      	cmp	r3, #0
 80085b4:	d109      	bne.n	80085ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80085b6:	2301      	movs	r3, #1
 80085b8:	e06f      	b.n	800869a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80085ba:	4b3b      	ldr	r3, [pc, #236]	; (80086a8 <HAL_RCC_ClockConfig+0x1bc>)
 80085bc:	681b      	ldr	r3, [r3, #0]
 80085be:	f003 0302 	and.w	r3, r3, #2
 80085c2:	2b00      	cmp	r3, #0
 80085c4:	d101      	bne.n	80085ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80085c6:	2301      	movs	r3, #1
 80085c8:	e067      	b.n	800869a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80085ca:	4b37      	ldr	r3, [pc, #220]	; (80086a8 <HAL_RCC_ClockConfig+0x1bc>)
 80085cc:	689b      	ldr	r3, [r3, #8]
 80085ce:	f023 0203 	bic.w	r2, r3, #3
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	685b      	ldr	r3, [r3, #4]
 80085d6:	4934      	ldr	r1, [pc, #208]	; (80086a8 <HAL_RCC_ClockConfig+0x1bc>)
 80085d8:	4313      	orrs	r3, r2
 80085da:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80085dc:	f7fe f958 	bl	8006890 <HAL_GetTick>
 80085e0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80085e2:	e00a      	b.n	80085fa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80085e4:	f7fe f954 	bl	8006890 <HAL_GetTick>
 80085e8:	4602      	mov	r2, r0
 80085ea:	68fb      	ldr	r3, [r7, #12]
 80085ec:	1ad3      	subs	r3, r2, r3
 80085ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80085f2:	4293      	cmp	r3, r2
 80085f4:	d901      	bls.n	80085fa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80085f6:	2303      	movs	r3, #3
 80085f8:	e04f      	b.n	800869a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80085fa:	4b2b      	ldr	r3, [pc, #172]	; (80086a8 <HAL_RCC_ClockConfig+0x1bc>)
 80085fc:	689b      	ldr	r3, [r3, #8]
 80085fe:	f003 020c 	and.w	r2, r3, #12
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	685b      	ldr	r3, [r3, #4]
 8008606:	009b      	lsls	r3, r3, #2
 8008608:	429a      	cmp	r2, r3
 800860a:	d1eb      	bne.n	80085e4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800860c:	4b25      	ldr	r3, [pc, #148]	; (80086a4 <HAL_RCC_ClockConfig+0x1b8>)
 800860e:	681b      	ldr	r3, [r3, #0]
 8008610:	f003 0307 	and.w	r3, r3, #7
 8008614:	683a      	ldr	r2, [r7, #0]
 8008616:	429a      	cmp	r2, r3
 8008618:	d20c      	bcs.n	8008634 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800861a:	4b22      	ldr	r3, [pc, #136]	; (80086a4 <HAL_RCC_ClockConfig+0x1b8>)
 800861c:	683a      	ldr	r2, [r7, #0]
 800861e:	b2d2      	uxtb	r2, r2
 8008620:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008622:	4b20      	ldr	r3, [pc, #128]	; (80086a4 <HAL_RCC_ClockConfig+0x1b8>)
 8008624:	681b      	ldr	r3, [r3, #0]
 8008626:	f003 0307 	and.w	r3, r3, #7
 800862a:	683a      	ldr	r2, [r7, #0]
 800862c:	429a      	cmp	r2, r3
 800862e:	d001      	beq.n	8008634 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8008630:	2301      	movs	r3, #1
 8008632:	e032      	b.n	800869a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	681b      	ldr	r3, [r3, #0]
 8008638:	f003 0304 	and.w	r3, r3, #4
 800863c:	2b00      	cmp	r3, #0
 800863e:	d008      	beq.n	8008652 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8008640:	4b19      	ldr	r3, [pc, #100]	; (80086a8 <HAL_RCC_ClockConfig+0x1bc>)
 8008642:	689b      	ldr	r3, [r3, #8]
 8008644:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	68db      	ldr	r3, [r3, #12]
 800864c:	4916      	ldr	r1, [pc, #88]	; (80086a8 <HAL_RCC_ClockConfig+0x1bc>)
 800864e:	4313      	orrs	r3, r2
 8008650:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	681b      	ldr	r3, [r3, #0]
 8008656:	f003 0308 	and.w	r3, r3, #8
 800865a:	2b00      	cmp	r3, #0
 800865c:	d009      	beq.n	8008672 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800865e:	4b12      	ldr	r3, [pc, #72]	; (80086a8 <HAL_RCC_ClockConfig+0x1bc>)
 8008660:	689b      	ldr	r3, [r3, #8]
 8008662:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	691b      	ldr	r3, [r3, #16]
 800866a:	00db      	lsls	r3, r3, #3
 800866c:	490e      	ldr	r1, [pc, #56]	; (80086a8 <HAL_RCC_ClockConfig+0x1bc>)
 800866e:	4313      	orrs	r3, r2
 8008670:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8008672:	f000 f821 	bl	80086b8 <HAL_RCC_GetSysClockFreq>
 8008676:	4602      	mov	r2, r0
 8008678:	4b0b      	ldr	r3, [pc, #44]	; (80086a8 <HAL_RCC_ClockConfig+0x1bc>)
 800867a:	689b      	ldr	r3, [r3, #8]
 800867c:	091b      	lsrs	r3, r3, #4
 800867e:	f003 030f 	and.w	r3, r3, #15
 8008682:	490a      	ldr	r1, [pc, #40]	; (80086ac <HAL_RCC_ClockConfig+0x1c0>)
 8008684:	5ccb      	ldrb	r3, [r1, r3]
 8008686:	fa22 f303 	lsr.w	r3, r2, r3
 800868a:	4a09      	ldr	r2, [pc, #36]	; (80086b0 <HAL_RCC_ClockConfig+0x1c4>)
 800868c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800868e:	4b09      	ldr	r3, [pc, #36]	; (80086b4 <HAL_RCC_ClockConfig+0x1c8>)
 8008690:	681b      	ldr	r3, [r3, #0]
 8008692:	4618      	mov	r0, r3
 8008694:	f7fe f8b8 	bl	8006808 <HAL_InitTick>

  return HAL_OK;
 8008698:	2300      	movs	r3, #0
}
 800869a:	4618      	mov	r0, r3
 800869c:	3710      	adds	r7, #16
 800869e:	46bd      	mov	sp, r7
 80086a0:	bd80      	pop	{r7, pc}
 80086a2:	bf00      	nop
 80086a4:	40023c00 	.word	0x40023c00
 80086a8:	40023800 	.word	0x40023800
 80086ac:	0800d2d4 	.word	0x0800d2d4
 80086b0:	20000004 	.word	0x20000004
 80086b4:	200000dc 	.word	0x200000dc

080086b8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80086b8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80086bc:	b094      	sub	sp, #80	; 0x50
 80086be:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80086c0:	2300      	movs	r3, #0
 80086c2:	647b      	str	r3, [r7, #68]	; 0x44
 80086c4:	2300      	movs	r3, #0
 80086c6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80086c8:	2300      	movs	r3, #0
 80086ca:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80086cc:	2300      	movs	r3, #0
 80086ce:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80086d0:	4b79      	ldr	r3, [pc, #484]	; (80088b8 <HAL_RCC_GetSysClockFreq+0x200>)
 80086d2:	689b      	ldr	r3, [r3, #8]
 80086d4:	f003 030c 	and.w	r3, r3, #12
 80086d8:	2b08      	cmp	r3, #8
 80086da:	d00d      	beq.n	80086f8 <HAL_RCC_GetSysClockFreq+0x40>
 80086dc:	2b08      	cmp	r3, #8
 80086de:	f200 80e1 	bhi.w	80088a4 <HAL_RCC_GetSysClockFreq+0x1ec>
 80086e2:	2b00      	cmp	r3, #0
 80086e4:	d002      	beq.n	80086ec <HAL_RCC_GetSysClockFreq+0x34>
 80086e6:	2b04      	cmp	r3, #4
 80086e8:	d003      	beq.n	80086f2 <HAL_RCC_GetSysClockFreq+0x3a>
 80086ea:	e0db      	b.n	80088a4 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80086ec:	4b73      	ldr	r3, [pc, #460]	; (80088bc <HAL_RCC_GetSysClockFreq+0x204>)
 80086ee:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80086f0:	e0db      	b.n	80088aa <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80086f2:	4b73      	ldr	r3, [pc, #460]	; (80088c0 <HAL_RCC_GetSysClockFreq+0x208>)
 80086f4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80086f6:	e0d8      	b.n	80088aa <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80086f8:	4b6f      	ldr	r3, [pc, #444]	; (80088b8 <HAL_RCC_GetSysClockFreq+0x200>)
 80086fa:	685b      	ldr	r3, [r3, #4]
 80086fc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008700:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8008702:	4b6d      	ldr	r3, [pc, #436]	; (80088b8 <HAL_RCC_GetSysClockFreq+0x200>)
 8008704:	685b      	ldr	r3, [r3, #4]
 8008706:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800870a:	2b00      	cmp	r3, #0
 800870c:	d063      	beq.n	80087d6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800870e:	4b6a      	ldr	r3, [pc, #424]	; (80088b8 <HAL_RCC_GetSysClockFreq+0x200>)
 8008710:	685b      	ldr	r3, [r3, #4]
 8008712:	099b      	lsrs	r3, r3, #6
 8008714:	2200      	movs	r2, #0
 8008716:	63bb      	str	r3, [r7, #56]	; 0x38
 8008718:	63fa      	str	r2, [r7, #60]	; 0x3c
 800871a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800871c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008720:	633b      	str	r3, [r7, #48]	; 0x30
 8008722:	2300      	movs	r3, #0
 8008724:	637b      	str	r3, [r7, #52]	; 0x34
 8008726:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800872a:	4622      	mov	r2, r4
 800872c:	462b      	mov	r3, r5
 800872e:	f04f 0000 	mov.w	r0, #0
 8008732:	f04f 0100 	mov.w	r1, #0
 8008736:	0159      	lsls	r1, r3, #5
 8008738:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800873c:	0150      	lsls	r0, r2, #5
 800873e:	4602      	mov	r2, r0
 8008740:	460b      	mov	r3, r1
 8008742:	4621      	mov	r1, r4
 8008744:	1a51      	subs	r1, r2, r1
 8008746:	6139      	str	r1, [r7, #16]
 8008748:	4629      	mov	r1, r5
 800874a:	eb63 0301 	sbc.w	r3, r3, r1
 800874e:	617b      	str	r3, [r7, #20]
 8008750:	f04f 0200 	mov.w	r2, #0
 8008754:	f04f 0300 	mov.w	r3, #0
 8008758:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800875c:	4659      	mov	r1, fp
 800875e:	018b      	lsls	r3, r1, #6
 8008760:	4651      	mov	r1, sl
 8008762:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8008766:	4651      	mov	r1, sl
 8008768:	018a      	lsls	r2, r1, #6
 800876a:	4651      	mov	r1, sl
 800876c:	ebb2 0801 	subs.w	r8, r2, r1
 8008770:	4659      	mov	r1, fp
 8008772:	eb63 0901 	sbc.w	r9, r3, r1
 8008776:	f04f 0200 	mov.w	r2, #0
 800877a:	f04f 0300 	mov.w	r3, #0
 800877e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8008782:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8008786:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800878a:	4690      	mov	r8, r2
 800878c:	4699      	mov	r9, r3
 800878e:	4623      	mov	r3, r4
 8008790:	eb18 0303 	adds.w	r3, r8, r3
 8008794:	60bb      	str	r3, [r7, #8]
 8008796:	462b      	mov	r3, r5
 8008798:	eb49 0303 	adc.w	r3, r9, r3
 800879c:	60fb      	str	r3, [r7, #12]
 800879e:	f04f 0200 	mov.w	r2, #0
 80087a2:	f04f 0300 	mov.w	r3, #0
 80087a6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80087aa:	4629      	mov	r1, r5
 80087ac:	024b      	lsls	r3, r1, #9
 80087ae:	4621      	mov	r1, r4
 80087b0:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80087b4:	4621      	mov	r1, r4
 80087b6:	024a      	lsls	r2, r1, #9
 80087b8:	4610      	mov	r0, r2
 80087ba:	4619      	mov	r1, r3
 80087bc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80087be:	2200      	movs	r2, #0
 80087c0:	62bb      	str	r3, [r7, #40]	; 0x28
 80087c2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80087c4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80087c8:	f7f7 fd62 	bl	8000290 <__aeabi_uldivmod>
 80087cc:	4602      	mov	r2, r0
 80087ce:	460b      	mov	r3, r1
 80087d0:	4613      	mov	r3, r2
 80087d2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80087d4:	e058      	b.n	8008888 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80087d6:	4b38      	ldr	r3, [pc, #224]	; (80088b8 <HAL_RCC_GetSysClockFreq+0x200>)
 80087d8:	685b      	ldr	r3, [r3, #4]
 80087da:	099b      	lsrs	r3, r3, #6
 80087dc:	2200      	movs	r2, #0
 80087de:	4618      	mov	r0, r3
 80087e0:	4611      	mov	r1, r2
 80087e2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80087e6:	623b      	str	r3, [r7, #32]
 80087e8:	2300      	movs	r3, #0
 80087ea:	627b      	str	r3, [r7, #36]	; 0x24
 80087ec:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80087f0:	4642      	mov	r2, r8
 80087f2:	464b      	mov	r3, r9
 80087f4:	f04f 0000 	mov.w	r0, #0
 80087f8:	f04f 0100 	mov.w	r1, #0
 80087fc:	0159      	lsls	r1, r3, #5
 80087fe:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8008802:	0150      	lsls	r0, r2, #5
 8008804:	4602      	mov	r2, r0
 8008806:	460b      	mov	r3, r1
 8008808:	4641      	mov	r1, r8
 800880a:	ebb2 0a01 	subs.w	sl, r2, r1
 800880e:	4649      	mov	r1, r9
 8008810:	eb63 0b01 	sbc.w	fp, r3, r1
 8008814:	f04f 0200 	mov.w	r2, #0
 8008818:	f04f 0300 	mov.w	r3, #0
 800881c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8008820:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8008824:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8008828:	ebb2 040a 	subs.w	r4, r2, sl
 800882c:	eb63 050b 	sbc.w	r5, r3, fp
 8008830:	f04f 0200 	mov.w	r2, #0
 8008834:	f04f 0300 	mov.w	r3, #0
 8008838:	00eb      	lsls	r3, r5, #3
 800883a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800883e:	00e2      	lsls	r2, r4, #3
 8008840:	4614      	mov	r4, r2
 8008842:	461d      	mov	r5, r3
 8008844:	4643      	mov	r3, r8
 8008846:	18e3      	adds	r3, r4, r3
 8008848:	603b      	str	r3, [r7, #0]
 800884a:	464b      	mov	r3, r9
 800884c:	eb45 0303 	adc.w	r3, r5, r3
 8008850:	607b      	str	r3, [r7, #4]
 8008852:	f04f 0200 	mov.w	r2, #0
 8008856:	f04f 0300 	mov.w	r3, #0
 800885a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800885e:	4629      	mov	r1, r5
 8008860:	028b      	lsls	r3, r1, #10
 8008862:	4621      	mov	r1, r4
 8008864:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8008868:	4621      	mov	r1, r4
 800886a:	028a      	lsls	r2, r1, #10
 800886c:	4610      	mov	r0, r2
 800886e:	4619      	mov	r1, r3
 8008870:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008872:	2200      	movs	r2, #0
 8008874:	61bb      	str	r3, [r7, #24]
 8008876:	61fa      	str	r2, [r7, #28]
 8008878:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800887c:	f7f7 fd08 	bl	8000290 <__aeabi_uldivmod>
 8008880:	4602      	mov	r2, r0
 8008882:	460b      	mov	r3, r1
 8008884:	4613      	mov	r3, r2
 8008886:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8008888:	4b0b      	ldr	r3, [pc, #44]	; (80088b8 <HAL_RCC_GetSysClockFreq+0x200>)
 800888a:	685b      	ldr	r3, [r3, #4]
 800888c:	0c1b      	lsrs	r3, r3, #16
 800888e:	f003 0303 	and.w	r3, r3, #3
 8008892:	3301      	adds	r3, #1
 8008894:	005b      	lsls	r3, r3, #1
 8008896:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8008898:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800889a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800889c:	fbb2 f3f3 	udiv	r3, r2, r3
 80088a0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80088a2:	e002      	b.n	80088aa <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80088a4:	4b05      	ldr	r3, [pc, #20]	; (80088bc <HAL_RCC_GetSysClockFreq+0x204>)
 80088a6:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80088a8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80088aa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80088ac:	4618      	mov	r0, r3
 80088ae:	3750      	adds	r7, #80	; 0x50
 80088b0:	46bd      	mov	sp, r7
 80088b2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80088b6:	bf00      	nop
 80088b8:	40023800 	.word	0x40023800
 80088bc:	00f42400 	.word	0x00f42400
 80088c0:	007a1200 	.word	0x007a1200

080088c4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80088c4:	b480      	push	{r7}
 80088c6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80088c8:	4b03      	ldr	r3, [pc, #12]	; (80088d8 <HAL_RCC_GetHCLKFreq+0x14>)
 80088ca:	681b      	ldr	r3, [r3, #0]
}
 80088cc:	4618      	mov	r0, r3
 80088ce:	46bd      	mov	sp, r7
 80088d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088d4:	4770      	bx	lr
 80088d6:	bf00      	nop
 80088d8:	20000004 	.word	0x20000004

080088dc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80088dc:	b580      	push	{r7, lr}
 80088de:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80088e0:	f7ff fff0 	bl	80088c4 <HAL_RCC_GetHCLKFreq>
 80088e4:	4602      	mov	r2, r0
 80088e6:	4b05      	ldr	r3, [pc, #20]	; (80088fc <HAL_RCC_GetPCLK1Freq+0x20>)
 80088e8:	689b      	ldr	r3, [r3, #8]
 80088ea:	0a9b      	lsrs	r3, r3, #10
 80088ec:	f003 0307 	and.w	r3, r3, #7
 80088f0:	4903      	ldr	r1, [pc, #12]	; (8008900 <HAL_RCC_GetPCLK1Freq+0x24>)
 80088f2:	5ccb      	ldrb	r3, [r1, r3]
 80088f4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80088f8:	4618      	mov	r0, r3
 80088fa:	bd80      	pop	{r7, pc}
 80088fc:	40023800 	.word	0x40023800
 8008900:	0800d2e4 	.word	0x0800d2e4

08008904 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008904:	b580      	push	{r7, lr}
 8008906:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8008908:	f7ff ffdc 	bl	80088c4 <HAL_RCC_GetHCLKFreq>
 800890c:	4602      	mov	r2, r0
 800890e:	4b05      	ldr	r3, [pc, #20]	; (8008924 <HAL_RCC_GetPCLK2Freq+0x20>)
 8008910:	689b      	ldr	r3, [r3, #8]
 8008912:	0b5b      	lsrs	r3, r3, #13
 8008914:	f003 0307 	and.w	r3, r3, #7
 8008918:	4903      	ldr	r1, [pc, #12]	; (8008928 <HAL_RCC_GetPCLK2Freq+0x24>)
 800891a:	5ccb      	ldrb	r3, [r1, r3]
 800891c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008920:	4618      	mov	r0, r3
 8008922:	bd80      	pop	{r7, pc}
 8008924:	40023800 	.word	0x40023800
 8008928:	0800d2e4 	.word	0x0800d2e4

0800892c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800892c:	b580      	push	{r7, lr}
 800892e:	b082      	sub	sp, #8
 8008930:	af00      	add	r7, sp, #0
 8008932:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	2b00      	cmp	r3, #0
 8008938:	d101      	bne.n	800893e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800893a:	2301      	movs	r3, #1
 800893c:	e07b      	b.n	8008a36 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008942:	2b00      	cmp	r3, #0
 8008944:	d108      	bne.n	8008958 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	685b      	ldr	r3, [r3, #4]
 800894a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800894e:	d009      	beq.n	8008964 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	2200      	movs	r2, #0
 8008954:	61da      	str	r2, [r3, #28]
 8008956:	e005      	b.n	8008964 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	2200      	movs	r2, #0
 800895c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	2200      	movs	r2, #0
 8008962:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	2200      	movs	r2, #0
 8008968:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008970:	b2db      	uxtb	r3, r3
 8008972:	2b00      	cmp	r3, #0
 8008974:	d106      	bne.n	8008984 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	2200      	movs	r2, #0
 800897a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800897e:	6878      	ldr	r0, [r7, #4]
 8008980:	f7f8 fd06 	bl	8001390 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	2202      	movs	r2, #2
 8008988:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	681b      	ldr	r3, [r3, #0]
 8008990:	681a      	ldr	r2, [r3, #0]
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	681b      	ldr	r3, [r3, #0]
 8008996:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800899a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	685b      	ldr	r3, [r3, #4]
 80089a0:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	689b      	ldr	r3, [r3, #8]
 80089a8:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80089ac:	431a      	orrs	r2, r3
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	68db      	ldr	r3, [r3, #12]
 80089b2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80089b6:	431a      	orrs	r2, r3
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	691b      	ldr	r3, [r3, #16]
 80089bc:	f003 0302 	and.w	r3, r3, #2
 80089c0:	431a      	orrs	r2, r3
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	695b      	ldr	r3, [r3, #20]
 80089c6:	f003 0301 	and.w	r3, r3, #1
 80089ca:	431a      	orrs	r2, r3
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	699b      	ldr	r3, [r3, #24]
 80089d0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80089d4:	431a      	orrs	r2, r3
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	69db      	ldr	r3, [r3, #28]
 80089da:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80089de:	431a      	orrs	r2, r3
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	6a1b      	ldr	r3, [r3, #32]
 80089e4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80089e8:	ea42 0103 	orr.w	r1, r2, r3
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80089f0:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	681b      	ldr	r3, [r3, #0]
 80089f8:	430a      	orrs	r2, r1
 80089fa:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	699b      	ldr	r3, [r3, #24]
 8008a00:	0c1b      	lsrs	r3, r3, #16
 8008a02:	f003 0104 	and.w	r1, r3, #4
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a0a:	f003 0210 	and.w	r2, r3, #16
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	681b      	ldr	r3, [r3, #0]
 8008a12:	430a      	orrs	r2, r1
 8008a14:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8008a16:	687b      	ldr	r3, [r7, #4]
 8008a18:	681b      	ldr	r3, [r3, #0]
 8008a1a:	69da      	ldr	r2, [r3, #28]
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	681b      	ldr	r3, [r3, #0]
 8008a20:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8008a24:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	2200      	movs	r2, #0
 8008a2a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	2201      	movs	r2, #1
 8008a30:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8008a34:	2300      	movs	r3, #0
}
 8008a36:	4618      	mov	r0, r3
 8008a38:	3708      	adds	r7, #8
 8008a3a:	46bd      	mov	sp, r7
 8008a3c:	bd80      	pop	{r7, pc}

08008a3e <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008a3e:	b580      	push	{r7, lr}
 8008a40:	b088      	sub	sp, #32
 8008a42:	af00      	add	r7, sp, #0
 8008a44:	60f8      	str	r0, [r7, #12]
 8008a46:	60b9      	str	r1, [r7, #8]
 8008a48:	603b      	str	r3, [r7, #0]
 8008a4a:	4613      	mov	r3, r2
 8008a4c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8008a4e:	2300      	movs	r3, #0
 8008a50:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8008a52:	68fb      	ldr	r3, [r7, #12]
 8008a54:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8008a58:	2b01      	cmp	r3, #1
 8008a5a:	d101      	bne.n	8008a60 <HAL_SPI_Transmit+0x22>
 8008a5c:	2302      	movs	r3, #2
 8008a5e:	e126      	b.n	8008cae <HAL_SPI_Transmit+0x270>
 8008a60:	68fb      	ldr	r3, [r7, #12]
 8008a62:	2201      	movs	r2, #1
 8008a64:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8008a68:	f7fd ff12 	bl	8006890 <HAL_GetTick>
 8008a6c:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8008a6e:	88fb      	ldrh	r3, [r7, #6]
 8008a70:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8008a72:	68fb      	ldr	r3, [r7, #12]
 8008a74:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008a78:	b2db      	uxtb	r3, r3
 8008a7a:	2b01      	cmp	r3, #1
 8008a7c:	d002      	beq.n	8008a84 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8008a7e:	2302      	movs	r3, #2
 8008a80:	77fb      	strb	r3, [r7, #31]
    goto error;
 8008a82:	e10b      	b.n	8008c9c <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8008a84:	68bb      	ldr	r3, [r7, #8]
 8008a86:	2b00      	cmp	r3, #0
 8008a88:	d002      	beq.n	8008a90 <HAL_SPI_Transmit+0x52>
 8008a8a:	88fb      	ldrh	r3, [r7, #6]
 8008a8c:	2b00      	cmp	r3, #0
 8008a8e:	d102      	bne.n	8008a96 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8008a90:	2301      	movs	r3, #1
 8008a92:	77fb      	strb	r3, [r7, #31]
    goto error;
 8008a94:	e102      	b.n	8008c9c <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8008a96:	68fb      	ldr	r3, [r7, #12]
 8008a98:	2203      	movs	r2, #3
 8008a9a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008a9e:	68fb      	ldr	r3, [r7, #12]
 8008aa0:	2200      	movs	r2, #0
 8008aa2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8008aa4:	68fb      	ldr	r3, [r7, #12]
 8008aa6:	68ba      	ldr	r2, [r7, #8]
 8008aa8:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8008aaa:	68fb      	ldr	r3, [r7, #12]
 8008aac:	88fa      	ldrh	r2, [r7, #6]
 8008aae:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8008ab0:	68fb      	ldr	r3, [r7, #12]
 8008ab2:	88fa      	ldrh	r2, [r7, #6]
 8008ab4:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8008ab6:	68fb      	ldr	r3, [r7, #12]
 8008ab8:	2200      	movs	r2, #0
 8008aba:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8008abc:	68fb      	ldr	r3, [r7, #12]
 8008abe:	2200      	movs	r2, #0
 8008ac0:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8008ac2:	68fb      	ldr	r3, [r7, #12]
 8008ac4:	2200      	movs	r2, #0
 8008ac6:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8008ac8:	68fb      	ldr	r3, [r7, #12]
 8008aca:	2200      	movs	r2, #0
 8008acc:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8008ace:	68fb      	ldr	r3, [r7, #12]
 8008ad0:	2200      	movs	r2, #0
 8008ad2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008ad4:	68fb      	ldr	r3, [r7, #12]
 8008ad6:	689b      	ldr	r3, [r3, #8]
 8008ad8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008adc:	d10f      	bne.n	8008afe <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8008ade:	68fb      	ldr	r3, [r7, #12]
 8008ae0:	681b      	ldr	r3, [r3, #0]
 8008ae2:	681a      	ldr	r2, [r3, #0]
 8008ae4:	68fb      	ldr	r3, [r7, #12]
 8008ae6:	681b      	ldr	r3, [r3, #0]
 8008ae8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008aec:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8008aee:	68fb      	ldr	r3, [r7, #12]
 8008af0:	681b      	ldr	r3, [r3, #0]
 8008af2:	681a      	ldr	r2, [r3, #0]
 8008af4:	68fb      	ldr	r3, [r7, #12]
 8008af6:	681b      	ldr	r3, [r3, #0]
 8008af8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8008afc:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8008afe:	68fb      	ldr	r3, [r7, #12]
 8008b00:	681b      	ldr	r3, [r3, #0]
 8008b02:	681b      	ldr	r3, [r3, #0]
 8008b04:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008b08:	2b40      	cmp	r3, #64	; 0x40
 8008b0a:	d007      	beq.n	8008b1c <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8008b0c:	68fb      	ldr	r3, [r7, #12]
 8008b0e:	681b      	ldr	r3, [r3, #0]
 8008b10:	681a      	ldr	r2, [r3, #0]
 8008b12:	68fb      	ldr	r3, [r7, #12]
 8008b14:	681b      	ldr	r3, [r3, #0]
 8008b16:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008b1a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8008b1c:	68fb      	ldr	r3, [r7, #12]
 8008b1e:	68db      	ldr	r3, [r3, #12]
 8008b20:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008b24:	d14b      	bne.n	8008bbe <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008b26:	68fb      	ldr	r3, [r7, #12]
 8008b28:	685b      	ldr	r3, [r3, #4]
 8008b2a:	2b00      	cmp	r3, #0
 8008b2c:	d002      	beq.n	8008b34 <HAL_SPI_Transmit+0xf6>
 8008b2e:	8afb      	ldrh	r3, [r7, #22]
 8008b30:	2b01      	cmp	r3, #1
 8008b32:	d13e      	bne.n	8008bb2 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008b34:	68fb      	ldr	r3, [r7, #12]
 8008b36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008b38:	881a      	ldrh	r2, [r3, #0]
 8008b3a:	68fb      	ldr	r3, [r7, #12]
 8008b3c:	681b      	ldr	r3, [r3, #0]
 8008b3e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8008b40:	68fb      	ldr	r3, [r7, #12]
 8008b42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008b44:	1c9a      	adds	r2, r3, #2
 8008b46:	68fb      	ldr	r3, [r7, #12]
 8008b48:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8008b4a:	68fb      	ldr	r3, [r7, #12]
 8008b4c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008b4e:	b29b      	uxth	r3, r3
 8008b50:	3b01      	subs	r3, #1
 8008b52:	b29a      	uxth	r2, r3
 8008b54:	68fb      	ldr	r3, [r7, #12]
 8008b56:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8008b58:	e02b      	b.n	8008bb2 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8008b5a:	68fb      	ldr	r3, [r7, #12]
 8008b5c:	681b      	ldr	r3, [r3, #0]
 8008b5e:	689b      	ldr	r3, [r3, #8]
 8008b60:	f003 0302 	and.w	r3, r3, #2
 8008b64:	2b02      	cmp	r3, #2
 8008b66:	d112      	bne.n	8008b8e <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008b68:	68fb      	ldr	r3, [r7, #12]
 8008b6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008b6c:	881a      	ldrh	r2, [r3, #0]
 8008b6e:	68fb      	ldr	r3, [r7, #12]
 8008b70:	681b      	ldr	r3, [r3, #0]
 8008b72:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8008b74:	68fb      	ldr	r3, [r7, #12]
 8008b76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008b78:	1c9a      	adds	r2, r3, #2
 8008b7a:	68fb      	ldr	r3, [r7, #12]
 8008b7c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8008b7e:	68fb      	ldr	r3, [r7, #12]
 8008b80:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008b82:	b29b      	uxth	r3, r3
 8008b84:	3b01      	subs	r3, #1
 8008b86:	b29a      	uxth	r2, r3
 8008b88:	68fb      	ldr	r3, [r7, #12]
 8008b8a:	86da      	strh	r2, [r3, #54]	; 0x36
 8008b8c:	e011      	b.n	8008bb2 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008b8e:	f7fd fe7f 	bl	8006890 <HAL_GetTick>
 8008b92:	4602      	mov	r2, r0
 8008b94:	69bb      	ldr	r3, [r7, #24]
 8008b96:	1ad3      	subs	r3, r2, r3
 8008b98:	683a      	ldr	r2, [r7, #0]
 8008b9a:	429a      	cmp	r2, r3
 8008b9c:	d803      	bhi.n	8008ba6 <HAL_SPI_Transmit+0x168>
 8008b9e:	683b      	ldr	r3, [r7, #0]
 8008ba0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008ba4:	d102      	bne.n	8008bac <HAL_SPI_Transmit+0x16e>
 8008ba6:	683b      	ldr	r3, [r7, #0]
 8008ba8:	2b00      	cmp	r3, #0
 8008baa:	d102      	bne.n	8008bb2 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8008bac:	2303      	movs	r3, #3
 8008bae:	77fb      	strb	r3, [r7, #31]
          goto error;
 8008bb0:	e074      	b.n	8008c9c <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8008bb2:	68fb      	ldr	r3, [r7, #12]
 8008bb4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008bb6:	b29b      	uxth	r3, r3
 8008bb8:	2b00      	cmp	r3, #0
 8008bba:	d1ce      	bne.n	8008b5a <HAL_SPI_Transmit+0x11c>
 8008bbc:	e04c      	b.n	8008c58 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008bbe:	68fb      	ldr	r3, [r7, #12]
 8008bc0:	685b      	ldr	r3, [r3, #4]
 8008bc2:	2b00      	cmp	r3, #0
 8008bc4:	d002      	beq.n	8008bcc <HAL_SPI_Transmit+0x18e>
 8008bc6:	8afb      	ldrh	r3, [r7, #22]
 8008bc8:	2b01      	cmp	r3, #1
 8008bca:	d140      	bne.n	8008c4e <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8008bcc:	68fb      	ldr	r3, [r7, #12]
 8008bce:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008bd0:	68fb      	ldr	r3, [r7, #12]
 8008bd2:	681b      	ldr	r3, [r3, #0]
 8008bd4:	330c      	adds	r3, #12
 8008bd6:	7812      	ldrb	r2, [r2, #0]
 8008bd8:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8008bda:	68fb      	ldr	r3, [r7, #12]
 8008bdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008bde:	1c5a      	adds	r2, r3, #1
 8008be0:	68fb      	ldr	r3, [r7, #12]
 8008be2:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8008be4:	68fb      	ldr	r3, [r7, #12]
 8008be6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008be8:	b29b      	uxth	r3, r3
 8008bea:	3b01      	subs	r3, #1
 8008bec:	b29a      	uxth	r2, r3
 8008bee:	68fb      	ldr	r3, [r7, #12]
 8008bf0:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8008bf2:	e02c      	b.n	8008c4e <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8008bf4:	68fb      	ldr	r3, [r7, #12]
 8008bf6:	681b      	ldr	r3, [r3, #0]
 8008bf8:	689b      	ldr	r3, [r3, #8]
 8008bfa:	f003 0302 	and.w	r3, r3, #2
 8008bfe:	2b02      	cmp	r3, #2
 8008c00:	d113      	bne.n	8008c2a <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8008c02:	68fb      	ldr	r3, [r7, #12]
 8008c04:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008c06:	68fb      	ldr	r3, [r7, #12]
 8008c08:	681b      	ldr	r3, [r3, #0]
 8008c0a:	330c      	adds	r3, #12
 8008c0c:	7812      	ldrb	r2, [r2, #0]
 8008c0e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8008c10:	68fb      	ldr	r3, [r7, #12]
 8008c12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008c14:	1c5a      	adds	r2, r3, #1
 8008c16:	68fb      	ldr	r3, [r7, #12]
 8008c18:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8008c1a:	68fb      	ldr	r3, [r7, #12]
 8008c1c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008c1e:	b29b      	uxth	r3, r3
 8008c20:	3b01      	subs	r3, #1
 8008c22:	b29a      	uxth	r2, r3
 8008c24:	68fb      	ldr	r3, [r7, #12]
 8008c26:	86da      	strh	r2, [r3, #54]	; 0x36
 8008c28:	e011      	b.n	8008c4e <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008c2a:	f7fd fe31 	bl	8006890 <HAL_GetTick>
 8008c2e:	4602      	mov	r2, r0
 8008c30:	69bb      	ldr	r3, [r7, #24]
 8008c32:	1ad3      	subs	r3, r2, r3
 8008c34:	683a      	ldr	r2, [r7, #0]
 8008c36:	429a      	cmp	r2, r3
 8008c38:	d803      	bhi.n	8008c42 <HAL_SPI_Transmit+0x204>
 8008c3a:	683b      	ldr	r3, [r7, #0]
 8008c3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008c40:	d102      	bne.n	8008c48 <HAL_SPI_Transmit+0x20a>
 8008c42:	683b      	ldr	r3, [r7, #0]
 8008c44:	2b00      	cmp	r3, #0
 8008c46:	d102      	bne.n	8008c4e <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8008c48:	2303      	movs	r3, #3
 8008c4a:	77fb      	strb	r3, [r7, #31]
          goto error;
 8008c4c:	e026      	b.n	8008c9c <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8008c4e:	68fb      	ldr	r3, [r7, #12]
 8008c50:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008c52:	b29b      	uxth	r3, r3
 8008c54:	2b00      	cmp	r3, #0
 8008c56:	d1cd      	bne.n	8008bf4 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8008c58:	69ba      	ldr	r2, [r7, #24]
 8008c5a:	6839      	ldr	r1, [r7, #0]
 8008c5c:	68f8      	ldr	r0, [r7, #12]
 8008c5e:	f000 fa55 	bl	800910c <SPI_EndRxTxTransaction>
 8008c62:	4603      	mov	r3, r0
 8008c64:	2b00      	cmp	r3, #0
 8008c66:	d002      	beq.n	8008c6e <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8008c68:	68fb      	ldr	r3, [r7, #12]
 8008c6a:	2220      	movs	r2, #32
 8008c6c:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8008c6e:	68fb      	ldr	r3, [r7, #12]
 8008c70:	689b      	ldr	r3, [r3, #8]
 8008c72:	2b00      	cmp	r3, #0
 8008c74:	d10a      	bne.n	8008c8c <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8008c76:	2300      	movs	r3, #0
 8008c78:	613b      	str	r3, [r7, #16]
 8008c7a:	68fb      	ldr	r3, [r7, #12]
 8008c7c:	681b      	ldr	r3, [r3, #0]
 8008c7e:	68db      	ldr	r3, [r3, #12]
 8008c80:	613b      	str	r3, [r7, #16]
 8008c82:	68fb      	ldr	r3, [r7, #12]
 8008c84:	681b      	ldr	r3, [r3, #0]
 8008c86:	689b      	ldr	r3, [r3, #8]
 8008c88:	613b      	str	r3, [r7, #16]
 8008c8a:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008c8c:	68fb      	ldr	r3, [r7, #12]
 8008c8e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008c90:	2b00      	cmp	r3, #0
 8008c92:	d002      	beq.n	8008c9a <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8008c94:	2301      	movs	r3, #1
 8008c96:	77fb      	strb	r3, [r7, #31]
 8008c98:	e000      	b.n	8008c9c <HAL_SPI_Transmit+0x25e>
  }

error:
 8008c9a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8008c9c:	68fb      	ldr	r3, [r7, #12]
 8008c9e:	2201      	movs	r2, #1
 8008ca0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8008ca4:	68fb      	ldr	r3, [r7, #12]
 8008ca6:	2200      	movs	r2, #0
 8008ca8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8008cac:	7ffb      	ldrb	r3, [r7, #31]
}
 8008cae:	4618      	mov	r0, r3
 8008cb0:	3720      	adds	r7, #32
 8008cb2:	46bd      	mov	sp, r7
 8008cb4:	bd80      	pop	{r7, pc}

08008cb6 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8008cb6:	b580      	push	{r7, lr}
 8008cb8:	b08c      	sub	sp, #48	; 0x30
 8008cba:	af00      	add	r7, sp, #0
 8008cbc:	60f8      	str	r0, [r7, #12]
 8008cbe:	60b9      	str	r1, [r7, #8]
 8008cc0:	607a      	str	r2, [r7, #4]
 8008cc2:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8008cc4:	2301      	movs	r3, #1
 8008cc6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8008cc8:	2300      	movs	r3, #0
 8008cca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8008cce:	68fb      	ldr	r3, [r7, #12]
 8008cd0:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8008cd4:	2b01      	cmp	r3, #1
 8008cd6:	d101      	bne.n	8008cdc <HAL_SPI_TransmitReceive+0x26>
 8008cd8:	2302      	movs	r3, #2
 8008cda:	e18a      	b.n	8008ff2 <HAL_SPI_TransmitReceive+0x33c>
 8008cdc:	68fb      	ldr	r3, [r7, #12]
 8008cde:	2201      	movs	r2, #1
 8008ce0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8008ce4:	f7fd fdd4 	bl	8006890 <HAL_GetTick>
 8008ce8:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8008cea:	68fb      	ldr	r3, [r7, #12]
 8008cec:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008cf0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8008cf4:	68fb      	ldr	r3, [r7, #12]
 8008cf6:	685b      	ldr	r3, [r3, #4]
 8008cf8:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8008cfa:	887b      	ldrh	r3, [r7, #2]
 8008cfc:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8008cfe:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008d02:	2b01      	cmp	r3, #1
 8008d04:	d00f      	beq.n	8008d26 <HAL_SPI_TransmitReceive+0x70>
 8008d06:	69fb      	ldr	r3, [r7, #28]
 8008d08:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008d0c:	d107      	bne.n	8008d1e <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8008d0e:	68fb      	ldr	r3, [r7, #12]
 8008d10:	689b      	ldr	r3, [r3, #8]
 8008d12:	2b00      	cmp	r3, #0
 8008d14:	d103      	bne.n	8008d1e <HAL_SPI_TransmitReceive+0x68>
 8008d16:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008d1a:	2b04      	cmp	r3, #4
 8008d1c:	d003      	beq.n	8008d26 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8008d1e:	2302      	movs	r3, #2
 8008d20:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8008d24:	e15b      	b.n	8008fde <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8008d26:	68bb      	ldr	r3, [r7, #8]
 8008d28:	2b00      	cmp	r3, #0
 8008d2a:	d005      	beq.n	8008d38 <HAL_SPI_TransmitReceive+0x82>
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	2b00      	cmp	r3, #0
 8008d30:	d002      	beq.n	8008d38 <HAL_SPI_TransmitReceive+0x82>
 8008d32:	887b      	ldrh	r3, [r7, #2]
 8008d34:	2b00      	cmp	r3, #0
 8008d36:	d103      	bne.n	8008d40 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8008d38:	2301      	movs	r3, #1
 8008d3a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8008d3e:	e14e      	b.n	8008fde <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8008d40:	68fb      	ldr	r3, [r7, #12]
 8008d42:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008d46:	b2db      	uxtb	r3, r3
 8008d48:	2b04      	cmp	r3, #4
 8008d4a:	d003      	beq.n	8008d54 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8008d4c:	68fb      	ldr	r3, [r7, #12]
 8008d4e:	2205      	movs	r2, #5
 8008d50:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008d54:	68fb      	ldr	r3, [r7, #12]
 8008d56:	2200      	movs	r2, #0
 8008d58:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8008d5a:	68fb      	ldr	r3, [r7, #12]
 8008d5c:	687a      	ldr	r2, [r7, #4]
 8008d5e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8008d60:	68fb      	ldr	r3, [r7, #12]
 8008d62:	887a      	ldrh	r2, [r7, #2]
 8008d64:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8008d66:	68fb      	ldr	r3, [r7, #12]
 8008d68:	887a      	ldrh	r2, [r7, #2]
 8008d6a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8008d6c:	68fb      	ldr	r3, [r7, #12]
 8008d6e:	68ba      	ldr	r2, [r7, #8]
 8008d70:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8008d72:	68fb      	ldr	r3, [r7, #12]
 8008d74:	887a      	ldrh	r2, [r7, #2]
 8008d76:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8008d78:	68fb      	ldr	r3, [r7, #12]
 8008d7a:	887a      	ldrh	r2, [r7, #2]
 8008d7c:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8008d7e:	68fb      	ldr	r3, [r7, #12]
 8008d80:	2200      	movs	r2, #0
 8008d82:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8008d84:	68fb      	ldr	r3, [r7, #12]
 8008d86:	2200      	movs	r2, #0
 8008d88:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8008d8a:	68fb      	ldr	r3, [r7, #12]
 8008d8c:	681b      	ldr	r3, [r3, #0]
 8008d8e:	681b      	ldr	r3, [r3, #0]
 8008d90:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008d94:	2b40      	cmp	r3, #64	; 0x40
 8008d96:	d007      	beq.n	8008da8 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8008d98:	68fb      	ldr	r3, [r7, #12]
 8008d9a:	681b      	ldr	r3, [r3, #0]
 8008d9c:	681a      	ldr	r2, [r3, #0]
 8008d9e:	68fb      	ldr	r3, [r7, #12]
 8008da0:	681b      	ldr	r3, [r3, #0]
 8008da2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008da6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8008da8:	68fb      	ldr	r3, [r7, #12]
 8008daa:	68db      	ldr	r3, [r3, #12]
 8008dac:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008db0:	d178      	bne.n	8008ea4 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008db2:	68fb      	ldr	r3, [r7, #12]
 8008db4:	685b      	ldr	r3, [r3, #4]
 8008db6:	2b00      	cmp	r3, #0
 8008db8:	d002      	beq.n	8008dc0 <HAL_SPI_TransmitReceive+0x10a>
 8008dba:	8b7b      	ldrh	r3, [r7, #26]
 8008dbc:	2b01      	cmp	r3, #1
 8008dbe:	d166      	bne.n	8008e8e <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008dc0:	68fb      	ldr	r3, [r7, #12]
 8008dc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008dc4:	881a      	ldrh	r2, [r3, #0]
 8008dc6:	68fb      	ldr	r3, [r7, #12]
 8008dc8:	681b      	ldr	r3, [r3, #0]
 8008dca:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8008dcc:	68fb      	ldr	r3, [r7, #12]
 8008dce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008dd0:	1c9a      	adds	r2, r3, #2
 8008dd2:	68fb      	ldr	r3, [r7, #12]
 8008dd4:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8008dd6:	68fb      	ldr	r3, [r7, #12]
 8008dd8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008dda:	b29b      	uxth	r3, r3
 8008ddc:	3b01      	subs	r3, #1
 8008dde:	b29a      	uxth	r2, r3
 8008de0:	68fb      	ldr	r3, [r7, #12]
 8008de2:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008de4:	e053      	b.n	8008e8e <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8008de6:	68fb      	ldr	r3, [r7, #12]
 8008de8:	681b      	ldr	r3, [r3, #0]
 8008dea:	689b      	ldr	r3, [r3, #8]
 8008dec:	f003 0302 	and.w	r3, r3, #2
 8008df0:	2b02      	cmp	r3, #2
 8008df2:	d11b      	bne.n	8008e2c <HAL_SPI_TransmitReceive+0x176>
 8008df4:	68fb      	ldr	r3, [r7, #12]
 8008df6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008df8:	b29b      	uxth	r3, r3
 8008dfa:	2b00      	cmp	r3, #0
 8008dfc:	d016      	beq.n	8008e2c <HAL_SPI_TransmitReceive+0x176>
 8008dfe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e00:	2b01      	cmp	r3, #1
 8008e02:	d113      	bne.n	8008e2c <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008e04:	68fb      	ldr	r3, [r7, #12]
 8008e06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008e08:	881a      	ldrh	r2, [r3, #0]
 8008e0a:	68fb      	ldr	r3, [r7, #12]
 8008e0c:	681b      	ldr	r3, [r3, #0]
 8008e0e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8008e10:	68fb      	ldr	r3, [r7, #12]
 8008e12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008e14:	1c9a      	adds	r2, r3, #2
 8008e16:	68fb      	ldr	r3, [r7, #12]
 8008e18:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8008e1a:	68fb      	ldr	r3, [r7, #12]
 8008e1c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008e1e:	b29b      	uxth	r3, r3
 8008e20:	3b01      	subs	r3, #1
 8008e22:	b29a      	uxth	r2, r3
 8008e24:	68fb      	ldr	r3, [r7, #12]
 8008e26:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8008e28:	2300      	movs	r3, #0
 8008e2a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8008e2c:	68fb      	ldr	r3, [r7, #12]
 8008e2e:	681b      	ldr	r3, [r3, #0]
 8008e30:	689b      	ldr	r3, [r3, #8]
 8008e32:	f003 0301 	and.w	r3, r3, #1
 8008e36:	2b01      	cmp	r3, #1
 8008e38:	d119      	bne.n	8008e6e <HAL_SPI_TransmitReceive+0x1b8>
 8008e3a:	68fb      	ldr	r3, [r7, #12]
 8008e3c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008e3e:	b29b      	uxth	r3, r3
 8008e40:	2b00      	cmp	r3, #0
 8008e42:	d014      	beq.n	8008e6e <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8008e44:	68fb      	ldr	r3, [r7, #12]
 8008e46:	681b      	ldr	r3, [r3, #0]
 8008e48:	68da      	ldr	r2, [r3, #12]
 8008e4a:	68fb      	ldr	r3, [r7, #12]
 8008e4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e4e:	b292      	uxth	r2, r2
 8008e50:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8008e52:	68fb      	ldr	r3, [r7, #12]
 8008e54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e56:	1c9a      	adds	r2, r3, #2
 8008e58:	68fb      	ldr	r3, [r7, #12]
 8008e5a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8008e5c:	68fb      	ldr	r3, [r7, #12]
 8008e5e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008e60:	b29b      	uxth	r3, r3
 8008e62:	3b01      	subs	r3, #1
 8008e64:	b29a      	uxth	r2, r3
 8008e66:	68fb      	ldr	r3, [r7, #12]
 8008e68:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8008e6a:	2301      	movs	r3, #1
 8008e6c:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8008e6e:	f7fd fd0f 	bl	8006890 <HAL_GetTick>
 8008e72:	4602      	mov	r2, r0
 8008e74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e76:	1ad3      	subs	r3, r2, r3
 8008e78:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008e7a:	429a      	cmp	r2, r3
 8008e7c:	d807      	bhi.n	8008e8e <HAL_SPI_TransmitReceive+0x1d8>
 8008e7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008e84:	d003      	beq.n	8008e8e <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8008e86:	2303      	movs	r3, #3
 8008e88:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8008e8c:	e0a7      	b.n	8008fde <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008e8e:	68fb      	ldr	r3, [r7, #12]
 8008e90:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008e92:	b29b      	uxth	r3, r3
 8008e94:	2b00      	cmp	r3, #0
 8008e96:	d1a6      	bne.n	8008de6 <HAL_SPI_TransmitReceive+0x130>
 8008e98:	68fb      	ldr	r3, [r7, #12]
 8008e9a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008e9c:	b29b      	uxth	r3, r3
 8008e9e:	2b00      	cmp	r3, #0
 8008ea0:	d1a1      	bne.n	8008de6 <HAL_SPI_TransmitReceive+0x130>
 8008ea2:	e07c      	b.n	8008f9e <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008ea4:	68fb      	ldr	r3, [r7, #12]
 8008ea6:	685b      	ldr	r3, [r3, #4]
 8008ea8:	2b00      	cmp	r3, #0
 8008eaa:	d002      	beq.n	8008eb2 <HAL_SPI_TransmitReceive+0x1fc>
 8008eac:	8b7b      	ldrh	r3, [r7, #26]
 8008eae:	2b01      	cmp	r3, #1
 8008eb0:	d16b      	bne.n	8008f8a <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8008eb2:	68fb      	ldr	r3, [r7, #12]
 8008eb4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008eb6:	68fb      	ldr	r3, [r7, #12]
 8008eb8:	681b      	ldr	r3, [r3, #0]
 8008eba:	330c      	adds	r3, #12
 8008ebc:	7812      	ldrb	r2, [r2, #0]
 8008ebe:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8008ec0:	68fb      	ldr	r3, [r7, #12]
 8008ec2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008ec4:	1c5a      	adds	r2, r3, #1
 8008ec6:	68fb      	ldr	r3, [r7, #12]
 8008ec8:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8008eca:	68fb      	ldr	r3, [r7, #12]
 8008ecc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008ece:	b29b      	uxth	r3, r3
 8008ed0:	3b01      	subs	r3, #1
 8008ed2:	b29a      	uxth	r2, r3
 8008ed4:	68fb      	ldr	r3, [r7, #12]
 8008ed6:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008ed8:	e057      	b.n	8008f8a <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8008eda:	68fb      	ldr	r3, [r7, #12]
 8008edc:	681b      	ldr	r3, [r3, #0]
 8008ede:	689b      	ldr	r3, [r3, #8]
 8008ee0:	f003 0302 	and.w	r3, r3, #2
 8008ee4:	2b02      	cmp	r3, #2
 8008ee6:	d11c      	bne.n	8008f22 <HAL_SPI_TransmitReceive+0x26c>
 8008ee8:	68fb      	ldr	r3, [r7, #12]
 8008eea:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008eec:	b29b      	uxth	r3, r3
 8008eee:	2b00      	cmp	r3, #0
 8008ef0:	d017      	beq.n	8008f22 <HAL_SPI_TransmitReceive+0x26c>
 8008ef2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ef4:	2b01      	cmp	r3, #1
 8008ef6:	d114      	bne.n	8008f22 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8008ef8:	68fb      	ldr	r3, [r7, #12]
 8008efa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008efc:	68fb      	ldr	r3, [r7, #12]
 8008efe:	681b      	ldr	r3, [r3, #0]
 8008f00:	330c      	adds	r3, #12
 8008f02:	7812      	ldrb	r2, [r2, #0]
 8008f04:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8008f06:	68fb      	ldr	r3, [r7, #12]
 8008f08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008f0a:	1c5a      	adds	r2, r3, #1
 8008f0c:	68fb      	ldr	r3, [r7, #12]
 8008f0e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8008f10:	68fb      	ldr	r3, [r7, #12]
 8008f12:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008f14:	b29b      	uxth	r3, r3
 8008f16:	3b01      	subs	r3, #1
 8008f18:	b29a      	uxth	r2, r3
 8008f1a:	68fb      	ldr	r3, [r7, #12]
 8008f1c:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8008f1e:	2300      	movs	r3, #0
 8008f20:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8008f22:	68fb      	ldr	r3, [r7, #12]
 8008f24:	681b      	ldr	r3, [r3, #0]
 8008f26:	689b      	ldr	r3, [r3, #8]
 8008f28:	f003 0301 	and.w	r3, r3, #1
 8008f2c:	2b01      	cmp	r3, #1
 8008f2e:	d119      	bne.n	8008f64 <HAL_SPI_TransmitReceive+0x2ae>
 8008f30:	68fb      	ldr	r3, [r7, #12]
 8008f32:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008f34:	b29b      	uxth	r3, r3
 8008f36:	2b00      	cmp	r3, #0
 8008f38:	d014      	beq.n	8008f64 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8008f3a:	68fb      	ldr	r3, [r7, #12]
 8008f3c:	681b      	ldr	r3, [r3, #0]
 8008f3e:	68da      	ldr	r2, [r3, #12]
 8008f40:	68fb      	ldr	r3, [r7, #12]
 8008f42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008f44:	b2d2      	uxtb	r2, r2
 8008f46:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8008f48:	68fb      	ldr	r3, [r7, #12]
 8008f4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008f4c:	1c5a      	adds	r2, r3, #1
 8008f4e:	68fb      	ldr	r3, [r7, #12]
 8008f50:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8008f52:	68fb      	ldr	r3, [r7, #12]
 8008f54:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008f56:	b29b      	uxth	r3, r3
 8008f58:	3b01      	subs	r3, #1
 8008f5a:	b29a      	uxth	r2, r3
 8008f5c:	68fb      	ldr	r3, [r7, #12]
 8008f5e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8008f60:	2301      	movs	r3, #1
 8008f62:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8008f64:	f7fd fc94 	bl	8006890 <HAL_GetTick>
 8008f68:	4602      	mov	r2, r0
 8008f6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f6c:	1ad3      	subs	r3, r2, r3
 8008f6e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008f70:	429a      	cmp	r2, r3
 8008f72:	d803      	bhi.n	8008f7c <HAL_SPI_TransmitReceive+0x2c6>
 8008f74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f76:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008f7a:	d102      	bne.n	8008f82 <HAL_SPI_TransmitReceive+0x2cc>
 8008f7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f7e:	2b00      	cmp	r3, #0
 8008f80:	d103      	bne.n	8008f8a <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8008f82:	2303      	movs	r3, #3
 8008f84:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8008f88:	e029      	b.n	8008fde <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008f8a:	68fb      	ldr	r3, [r7, #12]
 8008f8c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008f8e:	b29b      	uxth	r3, r3
 8008f90:	2b00      	cmp	r3, #0
 8008f92:	d1a2      	bne.n	8008eda <HAL_SPI_TransmitReceive+0x224>
 8008f94:	68fb      	ldr	r3, [r7, #12]
 8008f96:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008f98:	b29b      	uxth	r3, r3
 8008f9a:	2b00      	cmp	r3, #0
 8008f9c:	d19d      	bne.n	8008eda <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8008f9e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008fa0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8008fa2:	68f8      	ldr	r0, [r7, #12]
 8008fa4:	f000 f8b2 	bl	800910c <SPI_EndRxTxTransaction>
 8008fa8:	4603      	mov	r3, r0
 8008faa:	2b00      	cmp	r3, #0
 8008fac:	d006      	beq.n	8008fbc <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8008fae:	2301      	movs	r3, #1
 8008fb0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8008fb4:	68fb      	ldr	r3, [r7, #12]
 8008fb6:	2220      	movs	r2, #32
 8008fb8:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8008fba:	e010      	b.n	8008fde <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8008fbc:	68fb      	ldr	r3, [r7, #12]
 8008fbe:	689b      	ldr	r3, [r3, #8]
 8008fc0:	2b00      	cmp	r3, #0
 8008fc2:	d10b      	bne.n	8008fdc <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8008fc4:	2300      	movs	r3, #0
 8008fc6:	617b      	str	r3, [r7, #20]
 8008fc8:	68fb      	ldr	r3, [r7, #12]
 8008fca:	681b      	ldr	r3, [r3, #0]
 8008fcc:	68db      	ldr	r3, [r3, #12]
 8008fce:	617b      	str	r3, [r7, #20]
 8008fd0:	68fb      	ldr	r3, [r7, #12]
 8008fd2:	681b      	ldr	r3, [r3, #0]
 8008fd4:	689b      	ldr	r3, [r3, #8]
 8008fd6:	617b      	str	r3, [r7, #20]
 8008fd8:	697b      	ldr	r3, [r7, #20]
 8008fda:	e000      	b.n	8008fde <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8008fdc:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8008fde:	68fb      	ldr	r3, [r7, #12]
 8008fe0:	2201      	movs	r2, #1
 8008fe2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8008fe6:	68fb      	ldr	r3, [r7, #12]
 8008fe8:	2200      	movs	r2, #0
 8008fea:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8008fee:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8008ff2:	4618      	mov	r0, r3
 8008ff4:	3730      	adds	r7, #48	; 0x30
 8008ff6:	46bd      	mov	sp, r7
 8008ff8:	bd80      	pop	{r7, pc}
	...

08008ffc <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8008ffc:	b580      	push	{r7, lr}
 8008ffe:	b088      	sub	sp, #32
 8009000:	af00      	add	r7, sp, #0
 8009002:	60f8      	str	r0, [r7, #12]
 8009004:	60b9      	str	r1, [r7, #8]
 8009006:	603b      	str	r3, [r7, #0]
 8009008:	4613      	mov	r3, r2
 800900a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800900c:	f7fd fc40 	bl	8006890 <HAL_GetTick>
 8009010:	4602      	mov	r2, r0
 8009012:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009014:	1a9b      	subs	r3, r3, r2
 8009016:	683a      	ldr	r2, [r7, #0]
 8009018:	4413      	add	r3, r2
 800901a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800901c:	f7fd fc38 	bl	8006890 <HAL_GetTick>
 8009020:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8009022:	4b39      	ldr	r3, [pc, #228]	; (8009108 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8009024:	681b      	ldr	r3, [r3, #0]
 8009026:	015b      	lsls	r3, r3, #5
 8009028:	0d1b      	lsrs	r3, r3, #20
 800902a:	69fa      	ldr	r2, [r7, #28]
 800902c:	fb02 f303 	mul.w	r3, r2, r3
 8009030:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8009032:	e054      	b.n	80090de <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8009034:	683b      	ldr	r3, [r7, #0]
 8009036:	f1b3 3fff 	cmp.w	r3, #4294967295
 800903a:	d050      	beq.n	80090de <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800903c:	f7fd fc28 	bl	8006890 <HAL_GetTick>
 8009040:	4602      	mov	r2, r0
 8009042:	69bb      	ldr	r3, [r7, #24]
 8009044:	1ad3      	subs	r3, r2, r3
 8009046:	69fa      	ldr	r2, [r7, #28]
 8009048:	429a      	cmp	r2, r3
 800904a:	d902      	bls.n	8009052 <SPI_WaitFlagStateUntilTimeout+0x56>
 800904c:	69fb      	ldr	r3, [r7, #28]
 800904e:	2b00      	cmp	r3, #0
 8009050:	d13d      	bne.n	80090ce <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8009052:	68fb      	ldr	r3, [r7, #12]
 8009054:	681b      	ldr	r3, [r3, #0]
 8009056:	685a      	ldr	r2, [r3, #4]
 8009058:	68fb      	ldr	r3, [r7, #12]
 800905a:	681b      	ldr	r3, [r3, #0]
 800905c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8009060:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009062:	68fb      	ldr	r3, [r7, #12]
 8009064:	685b      	ldr	r3, [r3, #4]
 8009066:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800906a:	d111      	bne.n	8009090 <SPI_WaitFlagStateUntilTimeout+0x94>
 800906c:	68fb      	ldr	r3, [r7, #12]
 800906e:	689b      	ldr	r3, [r3, #8]
 8009070:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009074:	d004      	beq.n	8009080 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8009076:	68fb      	ldr	r3, [r7, #12]
 8009078:	689b      	ldr	r3, [r3, #8]
 800907a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800907e:	d107      	bne.n	8009090 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8009080:	68fb      	ldr	r3, [r7, #12]
 8009082:	681b      	ldr	r3, [r3, #0]
 8009084:	681a      	ldr	r2, [r3, #0]
 8009086:	68fb      	ldr	r3, [r7, #12]
 8009088:	681b      	ldr	r3, [r3, #0]
 800908a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800908e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8009090:	68fb      	ldr	r3, [r7, #12]
 8009092:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009094:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009098:	d10f      	bne.n	80090ba <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800909a:	68fb      	ldr	r3, [r7, #12]
 800909c:	681b      	ldr	r3, [r3, #0]
 800909e:	681a      	ldr	r2, [r3, #0]
 80090a0:	68fb      	ldr	r3, [r7, #12]
 80090a2:	681b      	ldr	r3, [r3, #0]
 80090a4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80090a8:	601a      	str	r2, [r3, #0]
 80090aa:	68fb      	ldr	r3, [r7, #12]
 80090ac:	681b      	ldr	r3, [r3, #0]
 80090ae:	681a      	ldr	r2, [r3, #0]
 80090b0:	68fb      	ldr	r3, [r7, #12]
 80090b2:	681b      	ldr	r3, [r3, #0]
 80090b4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80090b8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80090ba:	68fb      	ldr	r3, [r7, #12]
 80090bc:	2201      	movs	r2, #1
 80090be:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80090c2:	68fb      	ldr	r3, [r7, #12]
 80090c4:	2200      	movs	r2, #0
 80090c6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80090ca:	2303      	movs	r3, #3
 80090cc:	e017      	b.n	80090fe <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80090ce:	697b      	ldr	r3, [r7, #20]
 80090d0:	2b00      	cmp	r3, #0
 80090d2:	d101      	bne.n	80090d8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80090d4:	2300      	movs	r3, #0
 80090d6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80090d8:	697b      	ldr	r3, [r7, #20]
 80090da:	3b01      	subs	r3, #1
 80090dc:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80090de:	68fb      	ldr	r3, [r7, #12]
 80090e0:	681b      	ldr	r3, [r3, #0]
 80090e2:	689a      	ldr	r2, [r3, #8]
 80090e4:	68bb      	ldr	r3, [r7, #8]
 80090e6:	4013      	ands	r3, r2
 80090e8:	68ba      	ldr	r2, [r7, #8]
 80090ea:	429a      	cmp	r2, r3
 80090ec:	bf0c      	ite	eq
 80090ee:	2301      	moveq	r3, #1
 80090f0:	2300      	movne	r3, #0
 80090f2:	b2db      	uxtb	r3, r3
 80090f4:	461a      	mov	r2, r3
 80090f6:	79fb      	ldrb	r3, [r7, #7]
 80090f8:	429a      	cmp	r2, r3
 80090fa:	d19b      	bne.n	8009034 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80090fc:	2300      	movs	r3, #0
}
 80090fe:	4618      	mov	r0, r3
 8009100:	3720      	adds	r7, #32
 8009102:	46bd      	mov	sp, r7
 8009104:	bd80      	pop	{r7, pc}
 8009106:	bf00      	nop
 8009108:	20000004 	.word	0x20000004

0800910c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800910c:	b580      	push	{r7, lr}
 800910e:	b088      	sub	sp, #32
 8009110:	af02      	add	r7, sp, #8
 8009112:	60f8      	str	r0, [r7, #12]
 8009114:	60b9      	str	r1, [r7, #8]
 8009116:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8009118:	4b1b      	ldr	r3, [pc, #108]	; (8009188 <SPI_EndRxTxTransaction+0x7c>)
 800911a:	681b      	ldr	r3, [r3, #0]
 800911c:	4a1b      	ldr	r2, [pc, #108]	; (800918c <SPI_EndRxTxTransaction+0x80>)
 800911e:	fba2 2303 	umull	r2, r3, r2, r3
 8009122:	0d5b      	lsrs	r3, r3, #21
 8009124:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8009128:	fb02 f303 	mul.w	r3, r2, r3
 800912c:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800912e:	68fb      	ldr	r3, [r7, #12]
 8009130:	685b      	ldr	r3, [r3, #4]
 8009132:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009136:	d112      	bne.n	800915e <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8009138:	687b      	ldr	r3, [r7, #4]
 800913a:	9300      	str	r3, [sp, #0]
 800913c:	68bb      	ldr	r3, [r7, #8]
 800913e:	2200      	movs	r2, #0
 8009140:	2180      	movs	r1, #128	; 0x80
 8009142:	68f8      	ldr	r0, [r7, #12]
 8009144:	f7ff ff5a 	bl	8008ffc <SPI_WaitFlagStateUntilTimeout>
 8009148:	4603      	mov	r3, r0
 800914a:	2b00      	cmp	r3, #0
 800914c:	d016      	beq.n	800917c <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800914e:	68fb      	ldr	r3, [r7, #12]
 8009150:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009152:	f043 0220 	orr.w	r2, r3, #32
 8009156:	68fb      	ldr	r3, [r7, #12]
 8009158:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800915a:	2303      	movs	r3, #3
 800915c:	e00f      	b.n	800917e <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800915e:	697b      	ldr	r3, [r7, #20]
 8009160:	2b00      	cmp	r3, #0
 8009162:	d00a      	beq.n	800917a <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8009164:	697b      	ldr	r3, [r7, #20]
 8009166:	3b01      	subs	r3, #1
 8009168:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800916a:	68fb      	ldr	r3, [r7, #12]
 800916c:	681b      	ldr	r3, [r3, #0]
 800916e:	689b      	ldr	r3, [r3, #8]
 8009170:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009174:	2b80      	cmp	r3, #128	; 0x80
 8009176:	d0f2      	beq.n	800915e <SPI_EndRxTxTransaction+0x52>
 8009178:	e000      	b.n	800917c <SPI_EndRxTxTransaction+0x70>
        break;
 800917a:	bf00      	nop
  }

  return HAL_OK;
 800917c:	2300      	movs	r3, #0
}
 800917e:	4618      	mov	r0, r3
 8009180:	3718      	adds	r7, #24
 8009182:	46bd      	mov	sp, r7
 8009184:	bd80      	pop	{r7, pc}
 8009186:	bf00      	nop
 8009188:	20000004 	.word	0x20000004
 800918c:	165e9f81 	.word	0x165e9f81

08009190 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009190:	b580      	push	{r7, lr}
 8009192:	b082      	sub	sp, #8
 8009194:	af00      	add	r7, sp, #0
 8009196:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009198:	687b      	ldr	r3, [r7, #4]
 800919a:	2b00      	cmp	r3, #0
 800919c:	d101      	bne.n	80091a2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800919e:	2301      	movs	r3, #1
 80091a0:	e03f      	b.n	8009222 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80091a2:	687b      	ldr	r3, [r7, #4]
 80091a4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80091a8:	b2db      	uxtb	r3, r3
 80091aa:	2b00      	cmp	r3, #0
 80091ac:	d106      	bne.n	80091bc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80091ae:	687b      	ldr	r3, [r7, #4]
 80091b0:	2200      	movs	r2, #0
 80091b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80091b6:	6878      	ldr	r0, [r7, #4]
 80091b8:	f7f8 f952 	bl	8001460 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80091bc:	687b      	ldr	r3, [r7, #4]
 80091be:	2224      	movs	r2, #36	; 0x24
 80091c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80091c4:	687b      	ldr	r3, [r7, #4]
 80091c6:	681b      	ldr	r3, [r3, #0]
 80091c8:	68da      	ldr	r2, [r3, #12]
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	681b      	ldr	r3, [r3, #0]
 80091ce:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80091d2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80091d4:	6878      	ldr	r0, [r7, #4]
 80091d6:	f000 f929 	bl	800942c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80091da:	687b      	ldr	r3, [r7, #4]
 80091dc:	681b      	ldr	r3, [r3, #0]
 80091de:	691a      	ldr	r2, [r3, #16]
 80091e0:	687b      	ldr	r3, [r7, #4]
 80091e2:	681b      	ldr	r3, [r3, #0]
 80091e4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80091e8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80091ea:	687b      	ldr	r3, [r7, #4]
 80091ec:	681b      	ldr	r3, [r3, #0]
 80091ee:	695a      	ldr	r2, [r3, #20]
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	681b      	ldr	r3, [r3, #0]
 80091f4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80091f8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80091fa:	687b      	ldr	r3, [r7, #4]
 80091fc:	681b      	ldr	r3, [r3, #0]
 80091fe:	68da      	ldr	r2, [r3, #12]
 8009200:	687b      	ldr	r3, [r7, #4]
 8009202:	681b      	ldr	r3, [r3, #0]
 8009204:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8009208:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800920a:	687b      	ldr	r3, [r7, #4]
 800920c:	2200      	movs	r2, #0
 800920e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8009210:	687b      	ldr	r3, [r7, #4]
 8009212:	2220      	movs	r2, #32
 8009214:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	2220      	movs	r2, #32
 800921c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8009220:	2300      	movs	r3, #0
}
 8009222:	4618      	mov	r0, r3
 8009224:	3708      	adds	r7, #8
 8009226:	46bd      	mov	sp, r7
 8009228:	bd80      	pop	{r7, pc}

0800922a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800922a:	b580      	push	{r7, lr}
 800922c:	b08a      	sub	sp, #40	; 0x28
 800922e:	af02      	add	r7, sp, #8
 8009230:	60f8      	str	r0, [r7, #12]
 8009232:	60b9      	str	r1, [r7, #8]
 8009234:	603b      	str	r3, [r7, #0]
 8009236:	4613      	mov	r3, r2
 8009238:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800923a:	2300      	movs	r3, #0
 800923c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800923e:	68fb      	ldr	r3, [r7, #12]
 8009240:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009244:	b2db      	uxtb	r3, r3
 8009246:	2b20      	cmp	r3, #32
 8009248:	d17c      	bne.n	8009344 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800924a:	68bb      	ldr	r3, [r7, #8]
 800924c:	2b00      	cmp	r3, #0
 800924e:	d002      	beq.n	8009256 <HAL_UART_Transmit+0x2c>
 8009250:	88fb      	ldrh	r3, [r7, #6]
 8009252:	2b00      	cmp	r3, #0
 8009254:	d101      	bne.n	800925a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8009256:	2301      	movs	r3, #1
 8009258:	e075      	b.n	8009346 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800925a:	68fb      	ldr	r3, [r7, #12]
 800925c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009260:	2b01      	cmp	r3, #1
 8009262:	d101      	bne.n	8009268 <HAL_UART_Transmit+0x3e>
 8009264:	2302      	movs	r3, #2
 8009266:	e06e      	b.n	8009346 <HAL_UART_Transmit+0x11c>
 8009268:	68fb      	ldr	r3, [r7, #12]
 800926a:	2201      	movs	r2, #1
 800926c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009270:	68fb      	ldr	r3, [r7, #12]
 8009272:	2200      	movs	r2, #0
 8009274:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8009276:	68fb      	ldr	r3, [r7, #12]
 8009278:	2221      	movs	r2, #33	; 0x21
 800927a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800927e:	f7fd fb07 	bl	8006890 <HAL_GetTick>
 8009282:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8009284:	68fb      	ldr	r3, [r7, #12]
 8009286:	88fa      	ldrh	r2, [r7, #6]
 8009288:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800928a:	68fb      	ldr	r3, [r7, #12]
 800928c:	88fa      	ldrh	r2, [r7, #6]
 800928e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009290:	68fb      	ldr	r3, [r7, #12]
 8009292:	689b      	ldr	r3, [r3, #8]
 8009294:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009298:	d108      	bne.n	80092ac <HAL_UART_Transmit+0x82>
 800929a:	68fb      	ldr	r3, [r7, #12]
 800929c:	691b      	ldr	r3, [r3, #16]
 800929e:	2b00      	cmp	r3, #0
 80092a0:	d104      	bne.n	80092ac <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80092a2:	2300      	movs	r3, #0
 80092a4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80092a6:	68bb      	ldr	r3, [r7, #8]
 80092a8:	61bb      	str	r3, [r7, #24]
 80092aa:	e003      	b.n	80092b4 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80092ac:	68bb      	ldr	r3, [r7, #8]
 80092ae:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80092b0:	2300      	movs	r3, #0
 80092b2:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80092b4:	68fb      	ldr	r3, [r7, #12]
 80092b6:	2200      	movs	r2, #0
 80092b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80092bc:	e02a      	b.n	8009314 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80092be:	683b      	ldr	r3, [r7, #0]
 80092c0:	9300      	str	r3, [sp, #0]
 80092c2:	697b      	ldr	r3, [r7, #20]
 80092c4:	2200      	movs	r2, #0
 80092c6:	2180      	movs	r1, #128	; 0x80
 80092c8:	68f8      	ldr	r0, [r7, #12]
 80092ca:	f000 f840 	bl	800934e <UART_WaitOnFlagUntilTimeout>
 80092ce:	4603      	mov	r3, r0
 80092d0:	2b00      	cmp	r3, #0
 80092d2:	d001      	beq.n	80092d8 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80092d4:	2303      	movs	r3, #3
 80092d6:	e036      	b.n	8009346 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80092d8:	69fb      	ldr	r3, [r7, #28]
 80092da:	2b00      	cmp	r3, #0
 80092dc:	d10b      	bne.n	80092f6 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80092de:	69bb      	ldr	r3, [r7, #24]
 80092e0:	881b      	ldrh	r3, [r3, #0]
 80092e2:	461a      	mov	r2, r3
 80092e4:	68fb      	ldr	r3, [r7, #12]
 80092e6:	681b      	ldr	r3, [r3, #0]
 80092e8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80092ec:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80092ee:	69bb      	ldr	r3, [r7, #24]
 80092f0:	3302      	adds	r3, #2
 80092f2:	61bb      	str	r3, [r7, #24]
 80092f4:	e007      	b.n	8009306 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80092f6:	69fb      	ldr	r3, [r7, #28]
 80092f8:	781a      	ldrb	r2, [r3, #0]
 80092fa:	68fb      	ldr	r3, [r7, #12]
 80092fc:	681b      	ldr	r3, [r3, #0]
 80092fe:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8009300:	69fb      	ldr	r3, [r7, #28]
 8009302:	3301      	adds	r3, #1
 8009304:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8009306:	68fb      	ldr	r3, [r7, #12]
 8009308:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800930a:	b29b      	uxth	r3, r3
 800930c:	3b01      	subs	r3, #1
 800930e:	b29a      	uxth	r2, r3
 8009310:	68fb      	ldr	r3, [r7, #12]
 8009312:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8009314:	68fb      	ldr	r3, [r7, #12]
 8009316:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8009318:	b29b      	uxth	r3, r3
 800931a:	2b00      	cmp	r3, #0
 800931c:	d1cf      	bne.n	80092be <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800931e:	683b      	ldr	r3, [r7, #0]
 8009320:	9300      	str	r3, [sp, #0]
 8009322:	697b      	ldr	r3, [r7, #20]
 8009324:	2200      	movs	r2, #0
 8009326:	2140      	movs	r1, #64	; 0x40
 8009328:	68f8      	ldr	r0, [r7, #12]
 800932a:	f000 f810 	bl	800934e <UART_WaitOnFlagUntilTimeout>
 800932e:	4603      	mov	r3, r0
 8009330:	2b00      	cmp	r3, #0
 8009332:	d001      	beq.n	8009338 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8009334:	2303      	movs	r3, #3
 8009336:	e006      	b.n	8009346 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8009338:	68fb      	ldr	r3, [r7, #12]
 800933a:	2220      	movs	r2, #32
 800933c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8009340:	2300      	movs	r3, #0
 8009342:	e000      	b.n	8009346 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8009344:	2302      	movs	r3, #2
  }
}
 8009346:	4618      	mov	r0, r3
 8009348:	3720      	adds	r7, #32
 800934a:	46bd      	mov	sp, r7
 800934c:	bd80      	pop	{r7, pc}

0800934e <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800934e:	b580      	push	{r7, lr}
 8009350:	b090      	sub	sp, #64	; 0x40
 8009352:	af00      	add	r7, sp, #0
 8009354:	60f8      	str	r0, [r7, #12]
 8009356:	60b9      	str	r1, [r7, #8]
 8009358:	603b      	str	r3, [r7, #0]
 800935a:	4613      	mov	r3, r2
 800935c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800935e:	e050      	b.n	8009402 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009360:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009362:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009366:	d04c      	beq.n	8009402 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8009368:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800936a:	2b00      	cmp	r3, #0
 800936c:	d007      	beq.n	800937e <UART_WaitOnFlagUntilTimeout+0x30>
 800936e:	f7fd fa8f 	bl	8006890 <HAL_GetTick>
 8009372:	4602      	mov	r2, r0
 8009374:	683b      	ldr	r3, [r7, #0]
 8009376:	1ad3      	subs	r3, r2, r3
 8009378:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800937a:	429a      	cmp	r2, r3
 800937c:	d241      	bcs.n	8009402 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800937e:	68fb      	ldr	r3, [r7, #12]
 8009380:	681b      	ldr	r3, [r3, #0]
 8009382:	330c      	adds	r3, #12
 8009384:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009386:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009388:	e853 3f00 	ldrex	r3, [r3]
 800938c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800938e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009390:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8009394:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009396:	68fb      	ldr	r3, [r7, #12]
 8009398:	681b      	ldr	r3, [r3, #0]
 800939a:	330c      	adds	r3, #12
 800939c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800939e:	637a      	str	r2, [r7, #52]	; 0x34
 80093a0:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80093a2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80093a4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80093a6:	e841 2300 	strex	r3, r2, [r1]
 80093aa:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80093ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80093ae:	2b00      	cmp	r3, #0
 80093b0:	d1e5      	bne.n	800937e <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80093b2:	68fb      	ldr	r3, [r7, #12]
 80093b4:	681b      	ldr	r3, [r3, #0]
 80093b6:	3314      	adds	r3, #20
 80093b8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80093ba:	697b      	ldr	r3, [r7, #20]
 80093bc:	e853 3f00 	ldrex	r3, [r3]
 80093c0:	613b      	str	r3, [r7, #16]
   return(result);
 80093c2:	693b      	ldr	r3, [r7, #16]
 80093c4:	f023 0301 	bic.w	r3, r3, #1
 80093c8:	63bb      	str	r3, [r7, #56]	; 0x38
 80093ca:	68fb      	ldr	r3, [r7, #12]
 80093cc:	681b      	ldr	r3, [r3, #0]
 80093ce:	3314      	adds	r3, #20
 80093d0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80093d2:	623a      	str	r2, [r7, #32]
 80093d4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80093d6:	69f9      	ldr	r1, [r7, #28]
 80093d8:	6a3a      	ldr	r2, [r7, #32]
 80093da:	e841 2300 	strex	r3, r2, [r1]
 80093de:	61bb      	str	r3, [r7, #24]
   return(result);
 80093e0:	69bb      	ldr	r3, [r7, #24]
 80093e2:	2b00      	cmp	r3, #0
 80093e4:	d1e5      	bne.n	80093b2 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80093e6:	68fb      	ldr	r3, [r7, #12]
 80093e8:	2220      	movs	r2, #32
 80093ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80093ee:	68fb      	ldr	r3, [r7, #12]
 80093f0:	2220      	movs	r2, #32
 80093f2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80093f6:	68fb      	ldr	r3, [r7, #12]
 80093f8:	2200      	movs	r2, #0
 80093fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80093fe:	2303      	movs	r3, #3
 8009400:	e00f      	b.n	8009422 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009402:	68fb      	ldr	r3, [r7, #12]
 8009404:	681b      	ldr	r3, [r3, #0]
 8009406:	681a      	ldr	r2, [r3, #0]
 8009408:	68bb      	ldr	r3, [r7, #8]
 800940a:	4013      	ands	r3, r2
 800940c:	68ba      	ldr	r2, [r7, #8]
 800940e:	429a      	cmp	r2, r3
 8009410:	bf0c      	ite	eq
 8009412:	2301      	moveq	r3, #1
 8009414:	2300      	movne	r3, #0
 8009416:	b2db      	uxtb	r3, r3
 8009418:	461a      	mov	r2, r3
 800941a:	79fb      	ldrb	r3, [r7, #7]
 800941c:	429a      	cmp	r2, r3
 800941e:	d09f      	beq.n	8009360 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8009420:	2300      	movs	r3, #0
}
 8009422:	4618      	mov	r0, r3
 8009424:	3740      	adds	r7, #64	; 0x40
 8009426:	46bd      	mov	sp, r7
 8009428:	bd80      	pop	{r7, pc}
	...

0800942c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800942c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009430:	b0c0      	sub	sp, #256	; 0x100
 8009432:	af00      	add	r7, sp, #0
 8009434:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009438:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800943c:	681b      	ldr	r3, [r3, #0]
 800943e:	691b      	ldr	r3, [r3, #16]
 8009440:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8009444:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009448:	68d9      	ldr	r1, [r3, #12]
 800944a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800944e:	681a      	ldr	r2, [r3, #0]
 8009450:	ea40 0301 	orr.w	r3, r0, r1
 8009454:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8009456:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800945a:	689a      	ldr	r2, [r3, #8]
 800945c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009460:	691b      	ldr	r3, [r3, #16]
 8009462:	431a      	orrs	r2, r3
 8009464:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009468:	695b      	ldr	r3, [r3, #20]
 800946a:	431a      	orrs	r2, r3
 800946c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009470:	69db      	ldr	r3, [r3, #28]
 8009472:	4313      	orrs	r3, r2
 8009474:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8009478:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800947c:	681b      	ldr	r3, [r3, #0]
 800947e:	68db      	ldr	r3, [r3, #12]
 8009480:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8009484:	f021 010c 	bic.w	r1, r1, #12
 8009488:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800948c:	681a      	ldr	r2, [r3, #0]
 800948e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8009492:	430b      	orrs	r3, r1
 8009494:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8009496:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800949a:	681b      	ldr	r3, [r3, #0]
 800949c:	695b      	ldr	r3, [r3, #20]
 800949e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80094a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80094a6:	6999      	ldr	r1, [r3, #24]
 80094a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80094ac:	681a      	ldr	r2, [r3, #0]
 80094ae:	ea40 0301 	orr.w	r3, r0, r1
 80094b2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80094b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80094b8:	681a      	ldr	r2, [r3, #0]
 80094ba:	4b8f      	ldr	r3, [pc, #572]	; (80096f8 <UART_SetConfig+0x2cc>)
 80094bc:	429a      	cmp	r2, r3
 80094be:	d005      	beq.n	80094cc <UART_SetConfig+0xa0>
 80094c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80094c4:	681a      	ldr	r2, [r3, #0]
 80094c6:	4b8d      	ldr	r3, [pc, #564]	; (80096fc <UART_SetConfig+0x2d0>)
 80094c8:	429a      	cmp	r2, r3
 80094ca:	d104      	bne.n	80094d6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80094cc:	f7ff fa1a 	bl	8008904 <HAL_RCC_GetPCLK2Freq>
 80094d0:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80094d4:	e003      	b.n	80094de <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80094d6:	f7ff fa01 	bl	80088dc <HAL_RCC_GetPCLK1Freq>
 80094da:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80094de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80094e2:	69db      	ldr	r3, [r3, #28]
 80094e4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80094e8:	f040 810c 	bne.w	8009704 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80094ec:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80094f0:	2200      	movs	r2, #0
 80094f2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80094f6:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80094fa:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80094fe:	4622      	mov	r2, r4
 8009500:	462b      	mov	r3, r5
 8009502:	1891      	adds	r1, r2, r2
 8009504:	65b9      	str	r1, [r7, #88]	; 0x58
 8009506:	415b      	adcs	r3, r3
 8009508:	65fb      	str	r3, [r7, #92]	; 0x5c
 800950a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800950e:	4621      	mov	r1, r4
 8009510:	eb12 0801 	adds.w	r8, r2, r1
 8009514:	4629      	mov	r1, r5
 8009516:	eb43 0901 	adc.w	r9, r3, r1
 800951a:	f04f 0200 	mov.w	r2, #0
 800951e:	f04f 0300 	mov.w	r3, #0
 8009522:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8009526:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800952a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800952e:	4690      	mov	r8, r2
 8009530:	4699      	mov	r9, r3
 8009532:	4623      	mov	r3, r4
 8009534:	eb18 0303 	adds.w	r3, r8, r3
 8009538:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800953c:	462b      	mov	r3, r5
 800953e:	eb49 0303 	adc.w	r3, r9, r3
 8009542:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8009546:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800954a:	685b      	ldr	r3, [r3, #4]
 800954c:	2200      	movs	r2, #0
 800954e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8009552:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8009556:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800955a:	460b      	mov	r3, r1
 800955c:	18db      	adds	r3, r3, r3
 800955e:	653b      	str	r3, [r7, #80]	; 0x50
 8009560:	4613      	mov	r3, r2
 8009562:	eb42 0303 	adc.w	r3, r2, r3
 8009566:	657b      	str	r3, [r7, #84]	; 0x54
 8009568:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800956c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8009570:	f7f6 fe8e 	bl	8000290 <__aeabi_uldivmod>
 8009574:	4602      	mov	r2, r0
 8009576:	460b      	mov	r3, r1
 8009578:	4b61      	ldr	r3, [pc, #388]	; (8009700 <UART_SetConfig+0x2d4>)
 800957a:	fba3 2302 	umull	r2, r3, r3, r2
 800957e:	095b      	lsrs	r3, r3, #5
 8009580:	011c      	lsls	r4, r3, #4
 8009582:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009586:	2200      	movs	r2, #0
 8009588:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800958c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8009590:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8009594:	4642      	mov	r2, r8
 8009596:	464b      	mov	r3, r9
 8009598:	1891      	adds	r1, r2, r2
 800959a:	64b9      	str	r1, [r7, #72]	; 0x48
 800959c:	415b      	adcs	r3, r3
 800959e:	64fb      	str	r3, [r7, #76]	; 0x4c
 80095a0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80095a4:	4641      	mov	r1, r8
 80095a6:	eb12 0a01 	adds.w	sl, r2, r1
 80095aa:	4649      	mov	r1, r9
 80095ac:	eb43 0b01 	adc.w	fp, r3, r1
 80095b0:	f04f 0200 	mov.w	r2, #0
 80095b4:	f04f 0300 	mov.w	r3, #0
 80095b8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80095bc:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80095c0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80095c4:	4692      	mov	sl, r2
 80095c6:	469b      	mov	fp, r3
 80095c8:	4643      	mov	r3, r8
 80095ca:	eb1a 0303 	adds.w	r3, sl, r3
 80095ce:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80095d2:	464b      	mov	r3, r9
 80095d4:	eb4b 0303 	adc.w	r3, fp, r3
 80095d8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80095dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80095e0:	685b      	ldr	r3, [r3, #4]
 80095e2:	2200      	movs	r2, #0
 80095e4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80095e8:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80095ec:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80095f0:	460b      	mov	r3, r1
 80095f2:	18db      	adds	r3, r3, r3
 80095f4:	643b      	str	r3, [r7, #64]	; 0x40
 80095f6:	4613      	mov	r3, r2
 80095f8:	eb42 0303 	adc.w	r3, r2, r3
 80095fc:	647b      	str	r3, [r7, #68]	; 0x44
 80095fe:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8009602:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8009606:	f7f6 fe43 	bl	8000290 <__aeabi_uldivmod>
 800960a:	4602      	mov	r2, r0
 800960c:	460b      	mov	r3, r1
 800960e:	4611      	mov	r1, r2
 8009610:	4b3b      	ldr	r3, [pc, #236]	; (8009700 <UART_SetConfig+0x2d4>)
 8009612:	fba3 2301 	umull	r2, r3, r3, r1
 8009616:	095b      	lsrs	r3, r3, #5
 8009618:	2264      	movs	r2, #100	; 0x64
 800961a:	fb02 f303 	mul.w	r3, r2, r3
 800961e:	1acb      	subs	r3, r1, r3
 8009620:	00db      	lsls	r3, r3, #3
 8009622:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8009626:	4b36      	ldr	r3, [pc, #216]	; (8009700 <UART_SetConfig+0x2d4>)
 8009628:	fba3 2302 	umull	r2, r3, r3, r2
 800962c:	095b      	lsrs	r3, r3, #5
 800962e:	005b      	lsls	r3, r3, #1
 8009630:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8009634:	441c      	add	r4, r3
 8009636:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800963a:	2200      	movs	r2, #0
 800963c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8009640:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8009644:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8009648:	4642      	mov	r2, r8
 800964a:	464b      	mov	r3, r9
 800964c:	1891      	adds	r1, r2, r2
 800964e:	63b9      	str	r1, [r7, #56]	; 0x38
 8009650:	415b      	adcs	r3, r3
 8009652:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009654:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8009658:	4641      	mov	r1, r8
 800965a:	1851      	adds	r1, r2, r1
 800965c:	6339      	str	r1, [r7, #48]	; 0x30
 800965e:	4649      	mov	r1, r9
 8009660:	414b      	adcs	r3, r1
 8009662:	637b      	str	r3, [r7, #52]	; 0x34
 8009664:	f04f 0200 	mov.w	r2, #0
 8009668:	f04f 0300 	mov.w	r3, #0
 800966c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8009670:	4659      	mov	r1, fp
 8009672:	00cb      	lsls	r3, r1, #3
 8009674:	4651      	mov	r1, sl
 8009676:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800967a:	4651      	mov	r1, sl
 800967c:	00ca      	lsls	r2, r1, #3
 800967e:	4610      	mov	r0, r2
 8009680:	4619      	mov	r1, r3
 8009682:	4603      	mov	r3, r0
 8009684:	4642      	mov	r2, r8
 8009686:	189b      	adds	r3, r3, r2
 8009688:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800968c:	464b      	mov	r3, r9
 800968e:	460a      	mov	r2, r1
 8009690:	eb42 0303 	adc.w	r3, r2, r3
 8009694:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8009698:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800969c:	685b      	ldr	r3, [r3, #4]
 800969e:	2200      	movs	r2, #0
 80096a0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80096a4:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80096a8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80096ac:	460b      	mov	r3, r1
 80096ae:	18db      	adds	r3, r3, r3
 80096b0:	62bb      	str	r3, [r7, #40]	; 0x28
 80096b2:	4613      	mov	r3, r2
 80096b4:	eb42 0303 	adc.w	r3, r2, r3
 80096b8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80096ba:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80096be:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80096c2:	f7f6 fde5 	bl	8000290 <__aeabi_uldivmod>
 80096c6:	4602      	mov	r2, r0
 80096c8:	460b      	mov	r3, r1
 80096ca:	4b0d      	ldr	r3, [pc, #52]	; (8009700 <UART_SetConfig+0x2d4>)
 80096cc:	fba3 1302 	umull	r1, r3, r3, r2
 80096d0:	095b      	lsrs	r3, r3, #5
 80096d2:	2164      	movs	r1, #100	; 0x64
 80096d4:	fb01 f303 	mul.w	r3, r1, r3
 80096d8:	1ad3      	subs	r3, r2, r3
 80096da:	00db      	lsls	r3, r3, #3
 80096dc:	3332      	adds	r3, #50	; 0x32
 80096de:	4a08      	ldr	r2, [pc, #32]	; (8009700 <UART_SetConfig+0x2d4>)
 80096e0:	fba2 2303 	umull	r2, r3, r2, r3
 80096e4:	095b      	lsrs	r3, r3, #5
 80096e6:	f003 0207 	and.w	r2, r3, #7
 80096ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80096ee:	681b      	ldr	r3, [r3, #0]
 80096f0:	4422      	add	r2, r4
 80096f2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80096f4:	e105      	b.n	8009902 <UART_SetConfig+0x4d6>
 80096f6:	bf00      	nop
 80096f8:	40011000 	.word	0x40011000
 80096fc:	40011400 	.word	0x40011400
 8009700:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8009704:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009708:	2200      	movs	r2, #0
 800970a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800970e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8009712:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8009716:	4642      	mov	r2, r8
 8009718:	464b      	mov	r3, r9
 800971a:	1891      	adds	r1, r2, r2
 800971c:	6239      	str	r1, [r7, #32]
 800971e:	415b      	adcs	r3, r3
 8009720:	627b      	str	r3, [r7, #36]	; 0x24
 8009722:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8009726:	4641      	mov	r1, r8
 8009728:	1854      	adds	r4, r2, r1
 800972a:	4649      	mov	r1, r9
 800972c:	eb43 0501 	adc.w	r5, r3, r1
 8009730:	f04f 0200 	mov.w	r2, #0
 8009734:	f04f 0300 	mov.w	r3, #0
 8009738:	00eb      	lsls	r3, r5, #3
 800973a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800973e:	00e2      	lsls	r2, r4, #3
 8009740:	4614      	mov	r4, r2
 8009742:	461d      	mov	r5, r3
 8009744:	4643      	mov	r3, r8
 8009746:	18e3      	adds	r3, r4, r3
 8009748:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800974c:	464b      	mov	r3, r9
 800974e:	eb45 0303 	adc.w	r3, r5, r3
 8009752:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8009756:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800975a:	685b      	ldr	r3, [r3, #4]
 800975c:	2200      	movs	r2, #0
 800975e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8009762:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8009766:	f04f 0200 	mov.w	r2, #0
 800976a:	f04f 0300 	mov.w	r3, #0
 800976e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8009772:	4629      	mov	r1, r5
 8009774:	008b      	lsls	r3, r1, #2
 8009776:	4621      	mov	r1, r4
 8009778:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800977c:	4621      	mov	r1, r4
 800977e:	008a      	lsls	r2, r1, #2
 8009780:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8009784:	f7f6 fd84 	bl	8000290 <__aeabi_uldivmod>
 8009788:	4602      	mov	r2, r0
 800978a:	460b      	mov	r3, r1
 800978c:	4b60      	ldr	r3, [pc, #384]	; (8009910 <UART_SetConfig+0x4e4>)
 800978e:	fba3 2302 	umull	r2, r3, r3, r2
 8009792:	095b      	lsrs	r3, r3, #5
 8009794:	011c      	lsls	r4, r3, #4
 8009796:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800979a:	2200      	movs	r2, #0
 800979c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80097a0:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80097a4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80097a8:	4642      	mov	r2, r8
 80097aa:	464b      	mov	r3, r9
 80097ac:	1891      	adds	r1, r2, r2
 80097ae:	61b9      	str	r1, [r7, #24]
 80097b0:	415b      	adcs	r3, r3
 80097b2:	61fb      	str	r3, [r7, #28]
 80097b4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80097b8:	4641      	mov	r1, r8
 80097ba:	1851      	adds	r1, r2, r1
 80097bc:	6139      	str	r1, [r7, #16]
 80097be:	4649      	mov	r1, r9
 80097c0:	414b      	adcs	r3, r1
 80097c2:	617b      	str	r3, [r7, #20]
 80097c4:	f04f 0200 	mov.w	r2, #0
 80097c8:	f04f 0300 	mov.w	r3, #0
 80097cc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80097d0:	4659      	mov	r1, fp
 80097d2:	00cb      	lsls	r3, r1, #3
 80097d4:	4651      	mov	r1, sl
 80097d6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80097da:	4651      	mov	r1, sl
 80097dc:	00ca      	lsls	r2, r1, #3
 80097de:	4610      	mov	r0, r2
 80097e0:	4619      	mov	r1, r3
 80097e2:	4603      	mov	r3, r0
 80097e4:	4642      	mov	r2, r8
 80097e6:	189b      	adds	r3, r3, r2
 80097e8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80097ec:	464b      	mov	r3, r9
 80097ee:	460a      	mov	r2, r1
 80097f0:	eb42 0303 	adc.w	r3, r2, r3
 80097f4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80097f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80097fc:	685b      	ldr	r3, [r3, #4]
 80097fe:	2200      	movs	r2, #0
 8009800:	67bb      	str	r3, [r7, #120]	; 0x78
 8009802:	67fa      	str	r2, [r7, #124]	; 0x7c
 8009804:	f04f 0200 	mov.w	r2, #0
 8009808:	f04f 0300 	mov.w	r3, #0
 800980c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8009810:	4649      	mov	r1, r9
 8009812:	008b      	lsls	r3, r1, #2
 8009814:	4641      	mov	r1, r8
 8009816:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800981a:	4641      	mov	r1, r8
 800981c:	008a      	lsls	r2, r1, #2
 800981e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8009822:	f7f6 fd35 	bl	8000290 <__aeabi_uldivmod>
 8009826:	4602      	mov	r2, r0
 8009828:	460b      	mov	r3, r1
 800982a:	4b39      	ldr	r3, [pc, #228]	; (8009910 <UART_SetConfig+0x4e4>)
 800982c:	fba3 1302 	umull	r1, r3, r3, r2
 8009830:	095b      	lsrs	r3, r3, #5
 8009832:	2164      	movs	r1, #100	; 0x64
 8009834:	fb01 f303 	mul.w	r3, r1, r3
 8009838:	1ad3      	subs	r3, r2, r3
 800983a:	011b      	lsls	r3, r3, #4
 800983c:	3332      	adds	r3, #50	; 0x32
 800983e:	4a34      	ldr	r2, [pc, #208]	; (8009910 <UART_SetConfig+0x4e4>)
 8009840:	fba2 2303 	umull	r2, r3, r2, r3
 8009844:	095b      	lsrs	r3, r3, #5
 8009846:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800984a:	441c      	add	r4, r3
 800984c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009850:	2200      	movs	r2, #0
 8009852:	673b      	str	r3, [r7, #112]	; 0x70
 8009854:	677a      	str	r2, [r7, #116]	; 0x74
 8009856:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800985a:	4642      	mov	r2, r8
 800985c:	464b      	mov	r3, r9
 800985e:	1891      	adds	r1, r2, r2
 8009860:	60b9      	str	r1, [r7, #8]
 8009862:	415b      	adcs	r3, r3
 8009864:	60fb      	str	r3, [r7, #12]
 8009866:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800986a:	4641      	mov	r1, r8
 800986c:	1851      	adds	r1, r2, r1
 800986e:	6039      	str	r1, [r7, #0]
 8009870:	4649      	mov	r1, r9
 8009872:	414b      	adcs	r3, r1
 8009874:	607b      	str	r3, [r7, #4]
 8009876:	f04f 0200 	mov.w	r2, #0
 800987a:	f04f 0300 	mov.w	r3, #0
 800987e:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8009882:	4659      	mov	r1, fp
 8009884:	00cb      	lsls	r3, r1, #3
 8009886:	4651      	mov	r1, sl
 8009888:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800988c:	4651      	mov	r1, sl
 800988e:	00ca      	lsls	r2, r1, #3
 8009890:	4610      	mov	r0, r2
 8009892:	4619      	mov	r1, r3
 8009894:	4603      	mov	r3, r0
 8009896:	4642      	mov	r2, r8
 8009898:	189b      	adds	r3, r3, r2
 800989a:	66bb      	str	r3, [r7, #104]	; 0x68
 800989c:	464b      	mov	r3, r9
 800989e:	460a      	mov	r2, r1
 80098a0:	eb42 0303 	adc.w	r3, r2, r3
 80098a4:	66fb      	str	r3, [r7, #108]	; 0x6c
 80098a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80098aa:	685b      	ldr	r3, [r3, #4]
 80098ac:	2200      	movs	r2, #0
 80098ae:	663b      	str	r3, [r7, #96]	; 0x60
 80098b0:	667a      	str	r2, [r7, #100]	; 0x64
 80098b2:	f04f 0200 	mov.w	r2, #0
 80098b6:	f04f 0300 	mov.w	r3, #0
 80098ba:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80098be:	4649      	mov	r1, r9
 80098c0:	008b      	lsls	r3, r1, #2
 80098c2:	4641      	mov	r1, r8
 80098c4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80098c8:	4641      	mov	r1, r8
 80098ca:	008a      	lsls	r2, r1, #2
 80098cc:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80098d0:	f7f6 fcde 	bl	8000290 <__aeabi_uldivmod>
 80098d4:	4602      	mov	r2, r0
 80098d6:	460b      	mov	r3, r1
 80098d8:	4b0d      	ldr	r3, [pc, #52]	; (8009910 <UART_SetConfig+0x4e4>)
 80098da:	fba3 1302 	umull	r1, r3, r3, r2
 80098de:	095b      	lsrs	r3, r3, #5
 80098e0:	2164      	movs	r1, #100	; 0x64
 80098e2:	fb01 f303 	mul.w	r3, r1, r3
 80098e6:	1ad3      	subs	r3, r2, r3
 80098e8:	011b      	lsls	r3, r3, #4
 80098ea:	3332      	adds	r3, #50	; 0x32
 80098ec:	4a08      	ldr	r2, [pc, #32]	; (8009910 <UART_SetConfig+0x4e4>)
 80098ee:	fba2 2303 	umull	r2, r3, r2, r3
 80098f2:	095b      	lsrs	r3, r3, #5
 80098f4:	f003 020f 	and.w	r2, r3, #15
 80098f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80098fc:	681b      	ldr	r3, [r3, #0]
 80098fe:	4422      	add	r2, r4
 8009900:	609a      	str	r2, [r3, #8]
}
 8009902:	bf00      	nop
 8009904:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8009908:	46bd      	mov	sp, r7
 800990a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800990e:	bf00      	nop
 8009910:	51eb851f 	.word	0x51eb851f

08009914 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8009914:	b580      	push	{r7, lr}
 8009916:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 8009918:	4904      	ldr	r1, [pc, #16]	; (800992c <MX_FATFS_Init+0x18>)
 800991a:	4805      	ldr	r0, [pc, #20]	; (8009930 <MX_FATFS_Init+0x1c>)
 800991c:	f002 fede 	bl	800c6dc <FATFS_LinkDriver>
 8009920:	4603      	mov	r3, r0
 8009922:	461a      	mov	r2, r3
 8009924:	4b03      	ldr	r3, [pc, #12]	; (8009934 <MX_FATFS_Init+0x20>)
 8009926:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8009928:	bf00      	nop
 800992a:	bd80      	pop	{r7, pc}
 800992c:	200025ec 	.word	0x200025ec
 8009930:	200000e4 	.word	0x200000e4
 8009934:	200025e8 	.word	0x200025e8

08009938 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8009938:	b480      	push	{r7}
 800993a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 800993c:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 800993e:	4618      	mov	r0, r3
 8009940:	46bd      	mov	sp, r7
 8009942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009946:	4770      	bx	lr

08009948 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 8009948:	b580      	push	{r7, lr}
 800994a:	b082      	sub	sp, #8
 800994c:	af00      	add	r7, sp, #0
 800994e:	4603      	mov	r3, r0
 8009950:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
	return SD_disk_initialize (pdrv);
 8009952:	79fb      	ldrb	r3, [r7, #7]
 8009954:	4618      	mov	r0, r3
 8009956:	f7f6 ffd3 	bl	8000900 <SD_disk_initialize>
 800995a:	4603      	mov	r3, r0
  /* USER CODE END INIT */
}
 800995c:	4618      	mov	r0, r3
 800995e:	3708      	adds	r7, #8
 8009960:	46bd      	mov	sp, r7
 8009962:	bd80      	pop	{r7, pc}

08009964 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 8009964:	b580      	push	{r7, lr}
 8009966:	b082      	sub	sp, #8
 8009968:	af00      	add	r7, sp, #0
 800996a:	4603      	mov	r3, r0
 800996c:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
	return SD_disk_status (pdrv);
 800996e:	79fb      	ldrb	r3, [r7, #7]
 8009970:	4618      	mov	r0, r3
 8009972:	f7f7 f8b1 	bl	8000ad8 <SD_disk_status>
 8009976:	4603      	mov	r3, r0
  /* USER CODE END STATUS */
}
 8009978:	4618      	mov	r0, r3
 800997a:	3708      	adds	r7, #8
 800997c:	46bd      	mov	sp, r7
 800997e:	bd80      	pop	{r7, pc}

08009980 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8009980:	b580      	push	{r7, lr}
 8009982:	b084      	sub	sp, #16
 8009984:	af00      	add	r7, sp, #0
 8009986:	60b9      	str	r1, [r7, #8]
 8009988:	607a      	str	r2, [r7, #4]
 800998a:	603b      	str	r3, [r7, #0]
 800998c:	4603      	mov	r3, r0
 800998e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
	return SD_disk_read (pdrv, buff, sector, count);
 8009990:	7bf8      	ldrb	r0, [r7, #15]
 8009992:	683b      	ldr	r3, [r7, #0]
 8009994:	687a      	ldr	r2, [r7, #4]
 8009996:	68b9      	ldr	r1, [r7, #8]
 8009998:	f7f7 f8b4 	bl	8000b04 <SD_disk_read>
 800999c:	4603      	mov	r3, r0
  /* USER CODE END READ */
}
 800999e:	4618      	mov	r0, r3
 80099a0:	3710      	adds	r7, #16
 80099a2:	46bd      	mov	sp, r7
 80099a4:	bd80      	pop	{r7, pc}

080099a6 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 80099a6:	b580      	push	{r7, lr}
 80099a8:	b084      	sub	sp, #16
 80099aa:	af00      	add	r7, sp, #0
 80099ac:	60b9      	str	r1, [r7, #8]
 80099ae:	607a      	str	r2, [r7, #4]
 80099b0:	603b      	str	r3, [r7, #0]
 80099b2:	4603      	mov	r3, r0
 80099b4:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
	/* USER CODE HERE */
	return SD_disk_write (pdrv, buff, sector, count);
 80099b6:	7bf8      	ldrb	r0, [r7, #15]
 80099b8:	683b      	ldr	r3, [r7, #0]
 80099ba:	687a      	ldr	r2, [r7, #4]
 80099bc:	68b9      	ldr	r1, [r7, #8]
 80099be:	f7f7 f90b 	bl	8000bd8 <SD_disk_write>
 80099c2:	4603      	mov	r3, r0
  /* USER CODE END WRITE */
}
 80099c4:	4618      	mov	r0, r3
 80099c6:	3710      	adds	r7, #16
 80099c8:	46bd      	mov	sp, r7
 80099ca:	bd80      	pop	{r7, pc}

080099cc <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 80099cc:	b580      	push	{r7, lr}
 80099ce:	b082      	sub	sp, #8
 80099d0:	af00      	add	r7, sp, #0
 80099d2:	4603      	mov	r3, r0
 80099d4:	603a      	str	r2, [r7, #0]
 80099d6:	71fb      	strb	r3, [r7, #7]
 80099d8:	460b      	mov	r3, r1
 80099da:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
	return SD_disk_ioctl (pdrv, cmd, buff);
 80099dc:	79b9      	ldrb	r1, [r7, #6]
 80099de:	79fb      	ldrb	r3, [r7, #7]
 80099e0:	683a      	ldr	r2, [r7, #0]
 80099e2:	4618      	mov	r0, r3
 80099e4:	f7f7 f97c 	bl	8000ce0 <SD_disk_ioctl>
 80099e8:	4603      	mov	r3, r0
  /* USER CODE END IOCTL */
}
 80099ea:	4618      	mov	r0, r3
 80099ec:	3708      	adds	r7, #8
 80099ee:	46bd      	mov	sp, r7
 80099f0:	bd80      	pop	{r7, pc}
	...

080099f4 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 80099f4:	b580      	push	{r7, lr}
 80099f6:	b084      	sub	sp, #16
 80099f8:	af00      	add	r7, sp, #0
 80099fa:	4603      	mov	r3, r0
 80099fc:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 80099fe:	79fb      	ldrb	r3, [r7, #7]
 8009a00:	4a08      	ldr	r2, [pc, #32]	; (8009a24 <disk_status+0x30>)
 8009a02:	009b      	lsls	r3, r3, #2
 8009a04:	4413      	add	r3, r2
 8009a06:	685b      	ldr	r3, [r3, #4]
 8009a08:	685b      	ldr	r3, [r3, #4]
 8009a0a:	79fa      	ldrb	r2, [r7, #7]
 8009a0c:	4905      	ldr	r1, [pc, #20]	; (8009a24 <disk_status+0x30>)
 8009a0e:	440a      	add	r2, r1
 8009a10:	7a12      	ldrb	r2, [r2, #8]
 8009a12:	4610      	mov	r0, r2
 8009a14:	4798      	blx	r3
 8009a16:	4603      	mov	r3, r0
 8009a18:	73fb      	strb	r3, [r7, #15]
  return stat;
 8009a1a:	7bfb      	ldrb	r3, [r7, #15]
}
 8009a1c:	4618      	mov	r0, r3
 8009a1e:	3710      	adds	r7, #16
 8009a20:	46bd      	mov	sp, r7
 8009a22:	bd80      	pop	{r7, pc}
 8009a24:	20002818 	.word	0x20002818

08009a28 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8009a28:	b580      	push	{r7, lr}
 8009a2a:	b084      	sub	sp, #16
 8009a2c:	af00      	add	r7, sp, #0
 8009a2e:	4603      	mov	r3, r0
 8009a30:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8009a32:	2300      	movs	r3, #0
 8009a34:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8009a36:	79fb      	ldrb	r3, [r7, #7]
 8009a38:	4a0d      	ldr	r2, [pc, #52]	; (8009a70 <disk_initialize+0x48>)
 8009a3a:	5cd3      	ldrb	r3, [r2, r3]
 8009a3c:	2b00      	cmp	r3, #0
 8009a3e:	d111      	bne.n	8009a64 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 8009a40:	79fb      	ldrb	r3, [r7, #7]
 8009a42:	4a0b      	ldr	r2, [pc, #44]	; (8009a70 <disk_initialize+0x48>)
 8009a44:	2101      	movs	r1, #1
 8009a46:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8009a48:	79fb      	ldrb	r3, [r7, #7]
 8009a4a:	4a09      	ldr	r2, [pc, #36]	; (8009a70 <disk_initialize+0x48>)
 8009a4c:	009b      	lsls	r3, r3, #2
 8009a4e:	4413      	add	r3, r2
 8009a50:	685b      	ldr	r3, [r3, #4]
 8009a52:	681b      	ldr	r3, [r3, #0]
 8009a54:	79fa      	ldrb	r2, [r7, #7]
 8009a56:	4906      	ldr	r1, [pc, #24]	; (8009a70 <disk_initialize+0x48>)
 8009a58:	440a      	add	r2, r1
 8009a5a:	7a12      	ldrb	r2, [r2, #8]
 8009a5c:	4610      	mov	r0, r2
 8009a5e:	4798      	blx	r3
 8009a60:	4603      	mov	r3, r0
 8009a62:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8009a64:	7bfb      	ldrb	r3, [r7, #15]
}
 8009a66:	4618      	mov	r0, r3
 8009a68:	3710      	adds	r7, #16
 8009a6a:	46bd      	mov	sp, r7
 8009a6c:	bd80      	pop	{r7, pc}
 8009a6e:	bf00      	nop
 8009a70:	20002818 	.word	0x20002818

08009a74 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8009a74:	b590      	push	{r4, r7, lr}
 8009a76:	b087      	sub	sp, #28
 8009a78:	af00      	add	r7, sp, #0
 8009a7a:	60b9      	str	r1, [r7, #8]
 8009a7c:	607a      	str	r2, [r7, #4]
 8009a7e:	603b      	str	r3, [r7, #0]
 8009a80:	4603      	mov	r3, r0
 8009a82:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8009a84:	7bfb      	ldrb	r3, [r7, #15]
 8009a86:	4a0a      	ldr	r2, [pc, #40]	; (8009ab0 <disk_read+0x3c>)
 8009a88:	009b      	lsls	r3, r3, #2
 8009a8a:	4413      	add	r3, r2
 8009a8c:	685b      	ldr	r3, [r3, #4]
 8009a8e:	689c      	ldr	r4, [r3, #8]
 8009a90:	7bfb      	ldrb	r3, [r7, #15]
 8009a92:	4a07      	ldr	r2, [pc, #28]	; (8009ab0 <disk_read+0x3c>)
 8009a94:	4413      	add	r3, r2
 8009a96:	7a18      	ldrb	r0, [r3, #8]
 8009a98:	683b      	ldr	r3, [r7, #0]
 8009a9a:	687a      	ldr	r2, [r7, #4]
 8009a9c:	68b9      	ldr	r1, [r7, #8]
 8009a9e:	47a0      	blx	r4
 8009aa0:	4603      	mov	r3, r0
 8009aa2:	75fb      	strb	r3, [r7, #23]
  return res;
 8009aa4:	7dfb      	ldrb	r3, [r7, #23]
}
 8009aa6:	4618      	mov	r0, r3
 8009aa8:	371c      	adds	r7, #28
 8009aaa:	46bd      	mov	sp, r7
 8009aac:	bd90      	pop	{r4, r7, pc}
 8009aae:	bf00      	nop
 8009ab0:	20002818 	.word	0x20002818

08009ab4 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8009ab4:	b590      	push	{r4, r7, lr}
 8009ab6:	b087      	sub	sp, #28
 8009ab8:	af00      	add	r7, sp, #0
 8009aba:	60b9      	str	r1, [r7, #8]
 8009abc:	607a      	str	r2, [r7, #4]
 8009abe:	603b      	str	r3, [r7, #0]
 8009ac0:	4603      	mov	r3, r0
 8009ac2:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8009ac4:	7bfb      	ldrb	r3, [r7, #15]
 8009ac6:	4a0a      	ldr	r2, [pc, #40]	; (8009af0 <disk_write+0x3c>)
 8009ac8:	009b      	lsls	r3, r3, #2
 8009aca:	4413      	add	r3, r2
 8009acc:	685b      	ldr	r3, [r3, #4]
 8009ace:	68dc      	ldr	r4, [r3, #12]
 8009ad0:	7bfb      	ldrb	r3, [r7, #15]
 8009ad2:	4a07      	ldr	r2, [pc, #28]	; (8009af0 <disk_write+0x3c>)
 8009ad4:	4413      	add	r3, r2
 8009ad6:	7a18      	ldrb	r0, [r3, #8]
 8009ad8:	683b      	ldr	r3, [r7, #0]
 8009ada:	687a      	ldr	r2, [r7, #4]
 8009adc:	68b9      	ldr	r1, [r7, #8]
 8009ade:	47a0      	blx	r4
 8009ae0:	4603      	mov	r3, r0
 8009ae2:	75fb      	strb	r3, [r7, #23]
  return res;
 8009ae4:	7dfb      	ldrb	r3, [r7, #23]
}
 8009ae6:	4618      	mov	r0, r3
 8009ae8:	371c      	adds	r7, #28
 8009aea:	46bd      	mov	sp, r7
 8009aec:	bd90      	pop	{r4, r7, pc}
 8009aee:	bf00      	nop
 8009af0:	20002818 	.word	0x20002818

08009af4 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8009af4:	b580      	push	{r7, lr}
 8009af6:	b084      	sub	sp, #16
 8009af8:	af00      	add	r7, sp, #0
 8009afa:	4603      	mov	r3, r0
 8009afc:	603a      	str	r2, [r7, #0]
 8009afe:	71fb      	strb	r3, [r7, #7]
 8009b00:	460b      	mov	r3, r1
 8009b02:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8009b04:	79fb      	ldrb	r3, [r7, #7]
 8009b06:	4a09      	ldr	r2, [pc, #36]	; (8009b2c <disk_ioctl+0x38>)
 8009b08:	009b      	lsls	r3, r3, #2
 8009b0a:	4413      	add	r3, r2
 8009b0c:	685b      	ldr	r3, [r3, #4]
 8009b0e:	691b      	ldr	r3, [r3, #16]
 8009b10:	79fa      	ldrb	r2, [r7, #7]
 8009b12:	4906      	ldr	r1, [pc, #24]	; (8009b2c <disk_ioctl+0x38>)
 8009b14:	440a      	add	r2, r1
 8009b16:	7a10      	ldrb	r0, [r2, #8]
 8009b18:	79b9      	ldrb	r1, [r7, #6]
 8009b1a:	683a      	ldr	r2, [r7, #0]
 8009b1c:	4798      	blx	r3
 8009b1e:	4603      	mov	r3, r0
 8009b20:	73fb      	strb	r3, [r7, #15]
  return res;
 8009b22:	7bfb      	ldrb	r3, [r7, #15]
}
 8009b24:	4618      	mov	r0, r3
 8009b26:	3710      	adds	r7, #16
 8009b28:	46bd      	mov	sp, r7
 8009b2a:	bd80      	pop	{r7, pc}
 8009b2c:	20002818 	.word	0x20002818

08009b30 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8009b30:	b480      	push	{r7}
 8009b32:	b085      	sub	sp, #20
 8009b34:	af00      	add	r7, sp, #0
 8009b36:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8009b38:	687b      	ldr	r3, [r7, #4]
 8009b3a:	3301      	adds	r3, #1
 8009b3c:	781b      	ldrb	r3, [r3, #0]
 8009b3e:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8009b40:	89fb      	ldrh	r3, [r7, #14]
 8009b42:	021b      	lsls	r3, r3, #8
 8009b44:	b21a      	sxth	r2, r3
 8009b46:	687b      	ldr	r3, [r7, #4]
 8009b48:	781b      	ldrb	r3, [r3, #0]
 8009b4a:	b21b      	sxth	r3, r3
 8009b4c:	4313      	orrs	r3, r2
 8009b4e:	b21b      	sxth	r3, r3
 8009b50:	81fb      	strh	r3, [r7, #14]
	return rv;
 8009b52:	89fb      	ldrh	r3, [r7, #14]
}
 8009b54:	4618      	mov	r0, r3
 8009b56:	3714      	adds	r7, #20
 8009b58:	46bd      	mov	sp, r7
 8009b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b5e:	4770      	bx	lr

08009b60 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8009b60:	b480      	push	{r7}
 8009b62:	b085      	sub	sp, #20
 8009b64:	af00      	add	r7, sp, #0
 8009b66:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8009b68:	687b      	ldr	r3, [r7, #4]
 8009b6a:	3303      	adds	r3, #3
 8009b6c:	781b      	ldrb	r3, [r3, #0]
 8009b6e:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8009b70:	68fb      	ldr	r3, [r7, #12]
 8009b72:	021b      	lsls	r3, r3, #8
 8009b74:	687a      	ldr	r2, [r7, #4]
 8009b76:	3202      	adds	r2, #2
 8009b78:	7812      	ldrb	r2, [r2, #0]
 8009b7a:	4313      	orrs	r3, r2
 8009b7c:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8009b7e:	68fb      	ldr	r3, [r7, #12]
 8009b80:	021b      	lsls	r3, r3, #8
 8009b82:	687a      	ldr	r2, [r7, #4]
 8009b84:	3201      	adds	r2, #1
 8009b86:	7812      	ldrb	r2, [r2, #0]
 8009b88:	4313      	orrs	r3, r2
 8009b8a:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8009b8c:	68fb      	ldr	r3, [r7, #12]
 8009b8e:	021b      	lsls	r3, r3, #8
 8009b90:	687a      	ldr	r2, [r7, #4]
 8009b92:	7812      	ldrb	r2, [r2, #0]
 8009b94:	4313      	orrs	r3, r2
 8009b96:	60fb      	str	r3, [r7, #12]
	return rv;
 8009b98:	68fb      	ldr	r3, [r7, #12]
}
 8009b9a:	4618      	mov	r0, r3
 8009b9c:	3714      	adds	r7, #20
 8009b9e:	46bd      	mov	sp, r7
 8009ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ba4:	4770      	bx	lr

08009ba6 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8009ba6:	b480      	push	{r7}
 8009ba8:	b083      	sub	sp, #12
 8009baa:	af00      	add	r7, sp, #0
 8009bac:	6078      	str	r0, [r7, #4]
 8009bae:	460b      	mov	r3, r1
 8009bb0:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8009bb2:	687b      	ldr	r3, [r7, #4]
 8009bb4:	1c5a      	adds	r2, r3, #1
 8009bb6:	607a      	str	r2, [r7, #4]
 8009bb8:	887a      	ldrh	r2, [r7, #2]
 8009bba:	b2d2      	uxtb	r2, r2
 8009bbc:	701a      	strb	r2, [r3, #0]
 8009bbe:	887b      	ldrh	r3, [r7, #2]
 8009bc0:	0a1b      	lsrs	r3, r3, #8
 8009bc2:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8009bc4:	687b      	ldr	r3, [r7, #4]
 8009bc6:	1c5a      	adds	r2, r3, #1
 8009bc8:	607a      	str	r2, [r7, #4]
 8009bca:	887a      	ldrh	r2, [r7, #2]
 8009bcc:	b2d2      	uxtb	r2, r2
 8009bce:	701a      	strb	r2, [r3, #0]
}
 8009bd0:	bf00      	nop
 8009bd2:	370c      	adds	r7, #12
 8009bd4:	46bd      	mov	sp, r7
 8009bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bda:	4770      	bx	lr

08009bdc <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8009bdc:	b480      	push	{r7}
 8009bde:	b083      	sub	sp, #12
 8009be0:	af00      	add	r7, sp, #0
 8009be2:	6078      	str	r0, [r7, #4]
 8009be4:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8009be6:	687b      	ldr	r3, [r7, #4]
 8009be8:	1c5a      	adds	r2, r3, #1
 8009bea:	607a      	str	r2, [r7, #4]
 8009bec:	683a      	ldr	r2, [r7, #0]
 8009bee:	b2d2      	uxtb	r2, r2
 8009bf0:	701a      	strb	r2, [r3, #0]
 8009bf2:	683b      	ldr	r3, [r7, #0]
 8009bf4:	0a1b      	lsrs	r3, r3, #8
 8009bf6:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8009bf8:	687b      	ldr	r3, [r7, #4]
 8009bfa:	1c5a      	adds	r2, r3, #1
 8009bfc:	607a      	str	r2, [r7, #4]
 8009bfe:	683a      	ldr	r2, [r7, #0]
 8009c00:	b2d2      	uxtb	r2, r2
 8009c02:	701a      	strb	r2, [r3, #0]
 8009c04:	683b      	ldr	r3, [r7, #0]
 8009c06:	0a1b      	lsrs	r3, r3, #8
 8009c08:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8009c0a:	687b      	ldr	r3, [r7, #4]
 8009c0c:	1c5a      	adds	r2, r3, #1
 8009c0e:	607a      	str	r2, [r7, #4]
 8009c10:	683a      	ldr	r2, [r7, #0]
 8009c12:	b2d2      	uxtb	r2, r2
 8009c14:	701a      	strb	r2, [r3, #0]
 8009c16:	683b      	ldr	r3, [r7, #0]
 8009c18:	0a1b      	lsrs	r3, r3, #8
 8009c1a:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8009c1c:	687b      	ldr	r3, [r7, #4]
 8009c1e:	1c5a      	adds	r2, r3, #1
 8009c20:	607a      	str	r2, [r7, #4]
 8009c22:	683a      	ldr	r2, [r7, #0]
 8009c24:	b2d2      	uxtb	r2, r2
 8009c26:	701a      	strb	r2, [r3, #0]
}
 8009c28:	bf00      	nop
 8009c2a:	370c      	adds	r7, #12
 8009c2c:	46bd      	mov	sp, r7
 8009c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c32:	4770      	bx	lr

08009c34 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8009c34:	b480      	push	{r7}
 8009c36:	b087      	sub	sp, #28
 8009c38:	af00      	add	r7, sp, #0
 8009c3a:	60f8      	str	r0, [r7, #12]
 8009c3c:	60b9      	str	r1, [r7, #8]
 8009c3e:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8009c40:	68fb      	ldr	r3, [r7, #12]
 8009c42:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8009c44:	68bb      	ldr	r3, [r7, #8]
 8009c46:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8009c48:	687b      	ldr	r3, [r7, #4]
 8009c4a:	2b00      	cmp	r3, #0
 8009c4c:	d00d      	beq.n	8009c6a <mem_cpy+0x36>
		do {
			*d++ = *s++;
 8009c4e:	693a      	ldr	r2, [r7, #16]
 8009c50:	1c53      	adds	r3, r2, #1
 8009c52:	613b      	str	r3, [r7, #16]
 8009c54:	697b      	ldr	r3, [r7, #20]
 8009c56:	1c59      	adds	r1, r3, #1
 8009c58:	6179      	str	r1, [r7, #20]
 8009c5a:	7812      	ldrb	r2, [r2, #0]
 8009c5c:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 8009c5e:	687b      	ldr	r3, [r7, #4]
 8009c60:	3b01      	subs	r3, #1
 8009c62:	607b      	str	r3, [r7, #4]
 8009c64:	687b      	ldr	r3, [r7, #4]
 8009c66:	2b00      	cmp	r3, #0
 8009c68:	d1f1      	bne.n	8009c4e <mem_cpy+0x1a>
	}
}
 8009c6a:	bf00      	nop
 8009c6c:	371c      	adds	r7, #28
 8009c6e:	46bd      	mov	sp, r7
 8009c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c74:	4770      	bx	lr

08009c76 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8009c76:	b480      	push	{r7}
 8009c78:	b087      	sub	sp, #28
 8009c7a:	af00      	add	r7, sp, #0
 8009c7c:	60f8      	str	r0, [r7, #12]
 8009c7e:	60b9      	str	r1, [r7, #8]
 8009c80:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8009c82:	68fb      	ldr	r3, [r7, #12]
 8009c84:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8009c86:	697b      	ldr	r3, [r7, #20]
 8009c88:	1c5a      	adds	r2, r3, #1
 8009c8a:	617a      	str	r2, [r7, #20]
 8009c8c:	68ba      	ldr	r2, [r7, #8]
 8009c8e:	b2d2      	uxtb	r2, r2
 8009c90:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8009c92:	687b      	ldr	r3, [r7, #4]
 8009c94:	3b01      	subs	r3, #1
 8009c96:	607b      	str	r3, [r7, #4]
 8009c98:	687b      	ldr	r3, [r7, #4]
 8009c9a:	2b00      	cmp	r3, #0
 8009c9c:	d1f3      	bne.n	8009c86 <mem_set+0x10>
}
 8009c9e:	bf00      	nop
 8009ca0:	bf00      	nop
 8009ca2:	371c      	adds	r7, #28
 8009ca4:	46bd      	mov	sp, r7
 8009ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009caa:	4770      	bx	lr

08009cac <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8009cac:	b480      	push	{r7}
 8009cae:	b089      	sub	sp, #36	; 0x24
 8009cb0:	af00      	add	r7, sp, #0
 8009cb2:	60f8      	str	r0, [r7, #12]
 8009cb4:	60b9      	str	r1, [r7, #8]
 8009cb6:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8009cb8:	68fb      	ldr	r3, [r7, #12]
 8009cba:	61fb      	str	r3, [r7, #28]
 8009cbc:	68bb      	ldr	r3, [r7, #8]
 8009cbe:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8009cc0:	2300      	movs	r3, #0
 8009cc2:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8009cc4:	69fb      	ldr	r3, [r7, #28]
 8009cc6:	1c5a      	adds	r2, r3, #1
 8009cc8:	61fa      	str	r2, [r7, #28]
 8009cca:	781b      	ldrb	r3, [r3, #0]
 8009ccc:	4619      	mov	r1, r3
 8009cce:	69bb      	ldr	r3, [r7, #24]
 8009cd0:	1c5a      	adds	r2, r3, #1
 8009cd2:	61ba      	str	r2, [r7, #24]
 8009cd4:	781b      	ldrb	r3, [r3, #0]
 8009cd6:	1acb      	subs	r3, r1, r3
 8009cd8:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8009cda:	687b      	ldr	r3, [r7, #4]
 8009cdc:	3b01      	subs	r3, #1
 8009cde:	607b      	str	r3, [r7, #4]
 8009ce0:	687b      	ldr	r3, [r7, #4]
 8009ce2:	2b00      	cmp	r3, #0
 8009ce4:	d002      	beq.n	8009cec <mem_cmp+0x40>
 8009ce6:	697b      	ldr	r3, [r7, #20]
 8009ce8:	2b00      	cmp	r3, #0
 8009cea:	d0eb      	beq.n	8009cc4 <mem_cmp+0x18>

	return r;
 8009cec:	697b      	ldr	r3, [r7, #20]
}
 8009cee:	4618      	mov	r0, r3
 8009cf0:	3724      	adds	r7, #36	; 0x24
 8009cf2:	46bd      	mov	sp, r7
 8009cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cf8:	4770      	bx	lr

08009cfa <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8009cfa:	b480      	push	{r7}
 8009cfc:	b083      	sub	sp, #12
 8009cfe:	af00      	add	r7, sp, #0
 8009d00:	6078      	str	r0, [r7, #4]
 8009d02:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8009d04:	e002      	b.n	8009d0c <chk_chr+0x12>
 8009d06:	687b      	ldr	r3, [r7, #4]
 8009d08:	3301      	adds	r3, #1
 8009d0a:	607b      	str	r3, [r7, #4]
 8009d0c:	687b      	ldr	r3, [r7, #4]
 8009d0e:	781b      	ldrb	r3, [r3, #0]
 8009d10:	2b00      	cmp	r3, #0
 8009d12:	d005      	beq.n	8009d20 <chk_chr+0x26>
 8009d14:	687b      	ldr	r3, [r7, #4]
 8009d16:	781b      	ldrb	r3, [r3, #0]
 8009d18:	461a      	mov	r2, r3
 8009d1a:	683b      	ldr	r3, [r7, #0]
 8009d1c:	4293      	cmp	r3, r2
 8009d1e:	d1f2      	bne.n	8009d06 <chk_chr+0xc>
	return *str;
 8009d20:	687b      	ldr	r3, [r7, #4]
 8009d22:	781b      	ldrb	r3, [r3, #0]
}
 8009d24:	4618      	mov	r0, r3
 8009d26:	370c      	adds	r7, #12
 8009d28:	46bd      	mov	sp, r7
 8009d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d2e:	4770      	bx	lr

08009d30 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8009d30:	b480      	push	{r7}
 8009d32:	b085      	sub	sp, #20
 8009d34:	af00      	add	r7, sp, #0
 8009d36:	6078      	str	r0, [r7, #4]
 8009d38:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8009d3a:	2300      	movs	r3, #0
 8009d3c:	60bb      	str	r3, [r7, #8]
 8009d3e:	68bb      	ldr	r3, [r7, #8]
 8009d40:	60fb      	str	r3, [r7, #12]
 8009d42:	e029      	b.n	8009d98 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8009d44:	4a27      	ldr	r2, [pc, #156]	; (8009de4 <chk_lock+0xb4>)
 8009d46:	68fb      	ldr	r3, [r7, #12]
 8009d48:	011b      	lsls	r3, r3, #4
 8009d4a:	4413      	add	r3, r2
 8009d4c:	681b      	ldr	r3, [r3, #0]
 8009d4e:	2b00      	cmp	r3, #0
 8009d50:	d01d      	beq.n	8009d8e <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8009d52:	4a24      	ldr	r2, [pc, #144]	; (8009de4 <chk_lock+0xb4>)
 8009d54:	68fb      	ldr	r3, [r7, #12]
 8009d56:	011b      	lsls	r3, r3, #4
 8009d58:	4413      	add	r3, r2
 8009d5a:	681a      	ldr	r2, [r3, #0]
 8009d5c:	687b      	ldr	r3, [r7, #4]
 8009d5e:	681b      	ldr	r3, [r3, #0]
 8009d60:	429a      	cmp	r2, r3
 8009d62:	d116      	bne.n	8009d92 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8009d64:	4a1f      	ldr	r2, [pc, #124]	; (8009de4 <chk_lock+0xb4>)
 8009d66:	68fb      	ldr	r3, [r7, #12]
 8009d68:	011b      	lsls	r3, r3, #4
 8009d6a:	4413      	add	r3, r2
 8009d6c:	3304      	adds	r3, #4
 8009d6e:	681a      	ldr	r2, [r3, #0]
 8009d70:	687b      	ldr	r3, [r7, #4]
 8009d72:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8009d74:	429a      	cmp	r2, r3
 8009d76:	d10c      	bne.n	8009d92 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8009d78:	4a1a      	ldr	r2, [pc, #104]	; (8009de4 <chk_lock+0xb4>)
 8009d7a:	68fb      	ldr	r3, [r7, #12]
 8009d7c:	011b      	lsls	r3, r3, #4
 8009d7e:	4413      	add	r3, r2
 8009d80:	3308      	adds	r3, #8
 8009d82:	681a      	ldr	r2, [r3, #0]
 8009d84:	687b      	ldr	r3, [r7, #4]
 8009d86:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8009d88:	429a      	cmp	r2, r3
 8009d8a:	d102      	bne.n	8009d92 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8009d8c:	e007      	b.n	8009d9e <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 8009d8e:	2301      	movs	r3, #1
 8009d90:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8009d92:	68fb      	ldr	r3, [r7, #12]
 8009d94:	3301      	adds	r3, #1
 8009d96:	60fb      	str	r3, [r7, #12]
 8009d98:	68fb      	ldr	r3, [r7, #12]
 8009d9a:	2b01      	cmp	r3, #1
 8009d9c:	d9d2      	bls.n	8009d44 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 8009d9e:	68fb      	ldr	r3, [r7, #12]
 8009da0:	2b02      	cmp	r3, #2
 8009da2:	d109      	bne.n	8009db8 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8009da4:	68bb      	ldr	r3, [r7, #8]
 8009da6:	2b00      	cmp	r3, #0
 8009da8:	d102      	bne.n	8009db0 <chk_lock+0x80>
 8009daa:	683b      	ldr	r3, [r7, #0]
 8009dac:	2b02      	cmp	r3, #2
 8009dae:	d101      	bne.n	8009db4 <chk_lock+0x84>
 8009db0:	2300      	movs	r3, #0
 8009db2:	e010      	b.n	8009dd6 <chk_lock+0xa6>
 8009db4:	2312      	movs	r3, #18
 8009db6:	e00e      	b.n	8009dd6 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8009db8:	683b      	ldr	r3, [r7, #0]
 8009dba:	2b00      	cmp	r3, #0
 8009dbc:	d108      	bne.n	8009dd0 <chk_lock+0xa0>
 8009dbe:	4a09      	ldr	r2, [pc, #36]	; (8009de4 <chk_lock+0xb4>)
 8009dc0:	68fb      	ldr	r3, [r7, #12]
 8009dc2:	011b      	lsls	r3, r3, #4
 8009dc4:	4413      	add	r3, r2
 8009dc6:	330c      	adds	r3, #12
 8009dc8:	881b      	ldrh	r3, [r3, #0]
 8009dca:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009dce:	d101      	bne.n	8009dd4 <chk_lock+0xa4>
 8009dd0:	2310      	movs	r3, #16
 8009dd2:	e000      	b.n	8009dd6 <chk_lock+0xa6>
 8009dd4:	2300      	movs	r3, #0
}
 8009dd6:	4618      	mov	r0, r3
 8009dd8:	3714      	adds	r7, #20
 8009dda:	46bd      	mov	sp, r7
 8009ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009de0:	4770      	bx	lr
 8009de2:	bf00      	nop
 8009de4:	200025f8 	.word	0x200025f8

08009de8 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8009de8:	b480      	push	{r7}
 8009dea:	b083      	sub	sp, #12
 8009dec:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8009dee:	2300      	movs	r3, #0
 8009df0:	607b      	str	r3, [r7, #4]
 8009df2:	e002      	b.n	8009dfa <enq_lock+0x12>
 8009df4:	687b      	ldr	r3, [r7, #4]
 8009df6:	3301      	adds	r3, #1
 8009df8:	607b      	str	r3, [r7, #4]
 8009dfa:	687b      	ldr	r3, [r7, #4]
 8009dfc:	2b01      	cmp	r3, #1
 8009dfe:	d806      	bhi.n	8009e0e <enq_lock+0x26>
 8009e00:	4a09      	ldr	r2, [pc, #36]	; (8009e28 <enq_lock+0x40>)
 8009e02:	687b      	ldr	r3, [r7, #4]
 8009e04:	011b      	lsls	r3, r3, #4
 8009e06:	4413      	add	r3, r2
 8009e08:	681b      	ldr	r3, [r3, #0]
 8009e0a:	2b00      	cmp	r3, #0
 8009e0c:	d1f2      	bne.n	8009df4 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8009e0e:	687b      	ldr	r3, [r7, #4]
 8009e10:	2b02      	cmp	r3, #2
 8009e12:	bf14      	ite	ne
 8009e14:	2301      	movne	r3, #1
 8009e16:	2300      	moveq	r3, #0
 8009e18:	b2db      	uxtb	r3, r3
}
 8009e1a:	4618      	mov	r0, r3
 8009e1c:	370c      	adds	r7, #12
 8009e1e:	46bd      	mov	sp, r7
 8009e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e24:	4770      	bx	lr
 8009e26:	bf00      	nop
 8009e28:	200025f8 	.word	0x200025f8

08009e2c <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8009e2c:	b480      	push	{r7}
 8009e2e:	b085      	sub	sp, #20
 8009e30:	af00      	add	r7, sp, #0
 8009e32:	6078      	str	r0, [r7, #4]
 8009e34:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8009e36:	2300      	movs	r3, #0
 8009e38:	60fb      	str	r3, [r7, #12]
 8009e3a:	e01f      	b.n	8009e7c <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8009e3c:	4a41      	ldr	r2, [pc, #260]	; (8009f44 <inc_lock+0x118>)
 8009e3e:	68fb      	ldr	r3, [r7, #12]
 8009e40:	011b      	lsls	r3, r3, #4
 8009e42:	4413      	add	r3, r2
 8009e44:	681a      	ldr	r2, [r3, #0]
 8009e46:	687b      	ldr	r3, [r7, #4]
 8009e48:	681b      	ldr	r3, [r3, #0]
 8009e4a:	429a      	cmp	r2, r3
 8009e4c:	d113      	bne.n	8009e76 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 8009e4e:	4a3d      	ldr	r2, [pc, #244]	; (8009f44 <inc_lock+0x118>)
 8009e50:	68fb      	ldr	r3, [r7, #12]
 8009e52:	011b      	lsls	r3, r3, #4
 8009e54:	4413      	add	r3, r2
 8009e56:	3304      	adds	r3, #4
 8009e58:	681a      	ldr	r2, [r3, #0]
 8009e5a:	687b      	ldr	r3, [r7, #4]
 8009e5c:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 8009e5e:	429a      	cmp	r2, r3
 8009e60:	d109      	bne.n	8009e76 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 8009e62:	4a38      	ldr	r2, [pc, #224]	; (8009f44 <inc_lock+0x118>)
 8009e64:	68fb      	ldr	r3, [r7, #12]
 8009e66:	011b      	lsls	r3, r3, #4
 8009e68:	4413      	add	r3, r2
 8009e6a:	3308      	adds	r3, #8
 8009e6c:	681a      	ldr	r2, [r3, #0]
 8009e6e:	687b      	ldr	r3, [r7, #4]
 8009e70:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 8009e72:	429a      	cmp	r2, r3
 8009e74:	d006      	beq.n	8009e84 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8009e76:	68fb      	ldr	r3, [r7, #12]
 8009e78:	3301      	adds	r3, #1
 8009e7a:	60fb      	str	r3, [r7, #12]
 8009e7c:	68fb      	ldr	r3, [r7, #12]
 8009e7e:	2b01      	cmp	r3, #1
 8009e80:	d9dc      	bls.n	8009e3c <inc_lock+0x10>
 8009e82:	e000      	b.n	8009e86 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8009e84:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8009e86:	68fb      	ldr	r3, [r7, #12]
 8009e88:	2b02      	cmp	r3, #2
 8009e8a:	d132      	bne.n	8009ef2 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8009e8c:	2300      	movs	r3, #0
 8009e8e:	60fb      	str	r3, [r7, #12]
 8009e90:	e002      	b.n	8009e98 <inc_lock+0x6c>
 8009e92:	68fb      	ldr	r3, [r7, #12]
 8009e94:	3301      	adds	r3, #1
 8009e96:	60fb      	str	r3, [r7, #12]
 8009e98:	68fb      	ldr	r3, [r7, #12]
 8009e9a:	2b01      	cmp	r3, #1
 8009e9c:	d806      	bhi.n	8009eac <inc_lock+0x80>
 8009e9e:	4a29      	ldr	r2, [pc, #164]	; (8009f44 <inc_lock+0x118>)
 8009ea0:	68fb      	ldr	r3, [r7, #12]
 8009ea2:	011b      	lsls	r3, r3, #4
 8009ea4:	4413      	add	r3, r2
 8009ea6:	681b      	ldr	r3, [r3, #0]
 8009ea8:	2b00      	cmp	r3, #0
 8009eaa:	d1f2      	bne.n	8009e92 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8009eac:	68fb      	ldr	r3, [r7, #12]
 8009eae:	2b02      	cmp	r3, #2
 8009eb0:	d101      	bne.n	8009eb6 <inc_lock+0x8a>
 8009eb2:	2300      	movs	r3, #0
 8009eb4:	e040      	b.n	8009f38 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 8009eb6:	687b      	ldr	r3, [r7, #4]
 8009eb8:	681a      	ldr	r2, [r3, #0]
 8009eba:	4922      	ldr	r1, [pc, #136]	; (8009f44 <inc_lock+0x118>)
 8009ebc:	68fb      	ldr	r3, [r7, #12]
 8009ebe:	011b      	lsls	r3, r3, #4
 8009ec0:	440b      	add	r3, r1
 8009ec2:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8009ec4:	687b      	ldr	r3, [r7, #4]
 8009ec6:	689a      	ldr	r2, [r3, #8]
 8009ec8:	491e      	ldr	r1, [pc, #120]	; (8009f44 <inc_lock+0x118>)
 8009eca:	68fb      	ldr	r3, [r7, #12]
 8009ecc:	011b      	lsls	r3, r3, #4
 8009ece:	440b      	add	r3, r1
 8009ed0:	3304      	adds	r3, #4
 8009ed2:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8009ed4:	687b      	ldr	r3, [r7, #4]
 8009ed6:	695a      	ldr	r2, [r3, #20]
 8009ed8:	491a      	ldr	r1, [pc, #104]	; (8009f44 <inc_lock+0x118>)
 8009eda:	68fb      	ldr	r3, [r7, #12]
 8009edc:	011b      	lsls	r3, r3, #4
 8009ede:	440b      	add	r3, r1
 8009ee0:	3308      	adds	r3, #8
 8009ee2:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8009ee4:	4a17      	ldr	r2, [pc, #92]	; (8009f44 <inc_lock+0x118>)
 8009ee6:	68fb      	ldr	r3, [r7, #12]
 8009ee8:	011b      	lsls	r3, r3, #4
 8009eea:	4413      	add	r3, r2
 8009eec:	330c      	adds	r3, #12
 8009eee:	2200      	movs	r2, #0
 8009ef0:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8009ef2:	683b      	ldr	r3, [r7, #0]
 8009ef4:	2b00      	cmp	r3, #0
 8009ef6:	d009      	beq.n	8009f0c <inc_lock+0xe0>
 8009ef8:	4a12      	ldr	r2, [pc, #72]	; (8009f44 <inc_lock+0x118>)
 8009efa:	68fb      	ldr	r3, [r7, #12]
 8009efc:	011b      	lsls	r3, r3, #4
 8009efe:	4413      	add	r3, r2
 8009f00:	330c      	adds	r3, #12
 8009f02:	881b      	ldrh	r3, [r3, #0]
 8009f04:	2b00      	cmp	r3, #0
 8009f06:	d001      	beq.n	8009f0c <inc_lock+0xe0>
 8009f08:	2300      	movs	r3, #0
 8009f0a:	e015      	b.n	8009f38 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8009f0c:	683b      	ldr	r3, [r7, #0]
 8009f0e:	2b00      	cmp	r3, #0
 8009f10:	d108      	bne.n	8009f24 <inc_lock+0xf8>
 8009f12:	4a0c      	ldr	r2, [pc, #48]	; (8009f44 <inc_lock+0x118>)
 8009f14:	68fb      	ldr	r3, [r7, #12]
 8009f16:	011b      	lsls	r3, r3, #4
 8009f18:	4413      	add	r3, r2
 8009f1a:	330c      	adds	r3, #12
 8009f1c:	881b      	ldrh	r3, [r3, #0]
 8009f1e:	3301      	adds	r3, #1
 8009f20:	b29a      	uxth	r2, r3
 8009f22:	e001      	b.n	8009f28 <inc_lock+0xfc>
 8009f24:	f44f 7280 	mov.w	r2, #256	; 0x100
 8009f28:	4906      	ldr	r1, [pc, #24]	; (8009f44 <inc_lock+0x118>)
 8009f2a:	68fb      	ldr	r3, [r7, #12]
 8009f2c:	011b      	lsls	r3, r3, #4
 8009f2e:	440b      	add	r3, r1
 8009f30:	330c      	adds	r3, #12
 8009f32:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8009f34:	68fb      	ldr	r3, [r7, #12]
 8009f36:	3301      	adds	r3, #1
}
 8009f38:	4618      	mov	r0, r3
 8009f3a:	3714      	adds	r7, #20
 8009f3c:	46bd      	mov	sp, r7
 8009f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f42:	4770      	bx	lr
 8009f44:	200025f8 	.word	0x200025f8

08009f48 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8009f48:	b480      	push	{r7}
 8009f4a:	b085      	sub	sp, #20
 8009f4c:	af00      	add	r7, sp, #0
 8009f4e:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8009f50:	687b      	ldr	r3, [r7, #4]
 8009f52:	3b01      	subs	r3, #1
 8009f54:	607b      	str	r3, [r7, #4]
 8009f56:	687b      	ldr	r3, [r7, #4]
 8009f58:	2b01      	cmp	r3, #1
 8009f5a:	d825      	bhi.n	8009fa8 <dec_lock+0x60>
		n = Files[i].ctr;
 8009f5c:	4a17      	ldr	r2, [pc, #92]	; (8009fbc <dec_lock+0x74>)
 8009f5e:	687b      	ldr	r3, [r7, #4]
 8009f60:	011b      	lsls	r3, r3, #4
 8009f62:	4413      	add	r3, r2
 8009f64:	330c      	adds	r3, #12
 8009f66:	881b      	ldrh	r3, [r3, #0]
 8009f68:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8009f6a:	89fb      	ldrh	r3, [r7, #14]
 8009f6c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009f70:	d101      	bne.n	8009f76 <dec_lock+0x2e>
 8009f72:	2300      	movs	r3, #0
 8009f74:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 8009f76:	89fb      	ldrh	r3, [r7, #14]
 8009f78:	2b00      	cmp	r3, #0
 8009f7a:	d002      	beq.n	8009f82 <dec_lock+0x3a>
 8009f7c:	89fb      	ldrh	r3, [r7, #14]
 8009f7e:	3b01      	subs	r3, #1
 8009f80:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8009f82:	4a0e      	ldr	r2, [pc, #56]	; (8009fbc <dec_lock+0x74>)
 8009f84:	687b      	ldr	r3, [r7, #4]
 8009f86:	011b      	lsls	r3, r3, #4
 8009f88:	4413      	add	r3, r2
 8009f8a:	330c      	adds	r3, #12
 8009f8c:	89fa      	ldrh	r2, [r7, #14]
 8009f8e:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8009f90:	89fb      	ldrh	r3, [r7, #14]
 8009f92:	2b00      	cmp	r3, #0
 8009f94:	d105      	bne.n	8009fa2 <dec_lock+0x5a>
 8009f96:	4a09      	ldr	r2, [pc, #36]	; (8009fbc <dec_lock+0x74>)
 8009f98:	687b      	ldr	r3, [r7, #4]
 8009f9a:	011b      	lsls	r3, r3, #4
 8009f9c:	4413      	add	r3, r2
 8009f9e:	2200      	movs	r2, #0
 8009fa0:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8009fa2:	2300      	movs	r3, #0
 8009fa4:	737b      	strb	r3, [r7, #13]
 8009fa6:	e001      	b.n	8009fac <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8009fa8:	2302      	movs	r3, #2
 8009faa:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8009fac:	7b7b      	ldrb	r3, [r7, #13]
}
 8009fae:	4618      	mov	r0, r3
 8009fb0:	3714      	adds	r7, #20
 8009fb2:	46bd      	mov	sp, r7
 8009fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fb8:	4770      	bx	lr
 8009fba:	bf00      	nop
 8009fbc:	200025f8 	.word	0x200025f8

08009fc0 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8009fc0:	b480      	push	{r7}
 8009fc2:	b085      	sub	sp, #20
 8009fc4:	af00      	add	r7, sp, #0
 8009fc6:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8009fc8:	2300      	movs	r3, #0
 8009fca:	60fb      	str	r3, [r7, #12]
 8009fcc:	e010      	b.n	8009ff0 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8009fce:	4a0d      	ldr	r2, [pc, #52]	; (800a004 <clear_lock+0x44>)
 8009fd0:	68fb      	ldr	r3, [r7, #12]
 8009fd2:	011b      	lsls	r3, r3, #4
 8009fd4:	4413      	add	r3, r2
 8009fd6:	681b      	ldr	r3, [r3, #0]
 8009fd8:	687a      	ldr	r2, [r7, #4]
 8009fda:	429a      	cmp	r2, r3
 8009fdc:	d105      	bne.n	8009fea <clear_lock+0x2a>
 8009fde:	4a09      	ldr	r2, [pc, #36]	; (800a004 <clear_lock+0x44>)
 8009fe0:	68fb      	ldr	r3, [r7, #12]
 8009fe2:	011b      	lsls	r3, r3, #4
 8009fe4:	4413      	add	r3, r2
 8009fe6:	2200      	movs	r2, #0
 8009fe8:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8009fea:	68fb      	ldr	r3, [r7, #12]
 8009fec:	3301      	adds	r3, #1
 8009fee:	60fb      	str	r3, [r7, #12]
 8009ff0:	68fb      	ldr	r3, [r7, #12]
 8009ff2:	2b01      	cmp	r3, #1
 8009ff4:	d9eb      	bls.n	8009fce <clear_lock+0xe>
	}
}
 8009ff6:	bf00      	nop
 8009ff8:	bf00      	nop
 8009ffa:	3714      	adds	r7, #20
 8009ffc:	46bd      	mov	sp, r7
 8009ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a002:	4770      	bx	lr
 800a004:	200025f8 	.word	0x200025f8

0800a008 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800a008:	b580      	push	{r7, lr}
 800a00a:	b086      	sub	sp, #24
 800a00c:	af00      	add	r7, sp, #0
 800a00e:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800a010:	2300      	movs	r3, #0
 800a012:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800a014:	687b      	ldr	r3, [r7, #4]
 800a016:	78db      	ldrb	r3, [r3, #3]
 800a018:	2b00      	cmp	r3, #0
 800a01a:	d034      	beq.n	800a086 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800a01c:	687b      	ldr	r3, [r7, #4]
 800a01e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a020:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800a022:	687b      	ldr	r3, [r7, #4]
 800a024:	7858      	ldrb	r0, [r3, #1]
 800a026:	687b      	ldr	r3, [r7, #4]
 800a028:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800a02c:	2301      	movs	r3, #1
 800a02e:	697a      	ldr	r2, [r7, #20]
 800a030:	f7ff fd40 	bl	8009ab4 <disk_write>
 800a034:	4603      	mov	r3, r0
 800a036:	2b00      	cmp	r3, #0
 800a038:	d002      	beq.n	800a040 <sync_window+0x38>
			res = FR_DISK_ERR;
 800a03a:	2301      	movs	r3, #1
 800a03c:	73fb      	strb	r3, [r7, #15]
 800a03e:	e022      	b.n	800a086 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800a040:	687b      	ldr	r3, [r7, #4]
 800a042:	2200      	movs	r2, #0
 800a044:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800a046:	687b      	ldr	r3, [r7, #4]
 800a048:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a04a:	697a      	ldr	r2, [r7, #20]
 800a04c:	1ad2      	subs	r2, r2, r3
 800a04e:	687b      	ldr	r3, [r7, #4]
 800a050:	6a1b      	ldr	r3, [r3, #32]
 800a052:	429a      	cmp	r2, r3
 800a054:	d217      	bcs.n	800a086 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800a056:	687b      	ldr	r3, [r7, #4]
 800a058:	789b      	ldrb	r3, [r3, #2]
 800a05a:	613b      	str	r3, [r7, #16]
 800a05c:	e010      	b.n	800a080 <sync_window+0x78>
					wsect += fs->fsize;
 800a05e:	687b      	ldr	r3, [r7, #4]
 800a060:	6a1b      	ldr	r3, [r3, #32]
 800a062:	697a      	ldr	r2, [r7, #20]
 800a064:	4413      	add	r3, r2
 800a066:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800a068:	687b      	ldr	r3, [r7, #4]
 800a06a:	7858      	ldrb	r0, [r3, #1]
 800a06c:	687b      	ldr	r3, [r7, #4]
 800a06e:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800a072:	2301      	movs	r3, #1
 800a074:	697a      	ldr	r2, [r7, #20]
 800a076:	f7ff fd1d 	bl	8009ab4 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800a07a:	693b      	ldr	r3, [r7, #16]
 800a07c:	3b01      	subs	r3, #1
 800a07e:	613b      	str	r3, [r7, #16]
 800a080:	693b      	ldr	r3, [r7, #16]
 800a082:	2b01      	cmp	r3, #1
 800a084:	d8eb      	bhi.n	800a05e <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800a086:	7bfb      	ldrb	r3, [r7, #15]
}
 800a088:	4618      	mov	r0, r3
 800a08a:	3718      	adds	r7, #24
 800a08c:	46bd      	mov	sp, r7
 800a08e:	bd80      	pop	{r7, pc}

0800a090 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800a090:	b580      	push	{r7, lr}
 800a092:	b084      	sub	sp, #16
 800a094:	af00      	add	r7, sp, #0
 800a096:	6078      	str	r0, [r7, #4]
 800a098:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800a09a:	2300      	movs	r3, #0
 800a09c:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800a09e:	687b      	ldr	r3, [r7, #4]
 800a0a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a0a2:	683a      	ldr	r2, [r7, #0]
 800a0a4:	429a      	cmp	r2, r3
 800a0a6:	d01b      	beq.n	800a0e0 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800a0a8:	6878      	ldr	r0, [r7, #4]
 800a0aa:	f7ff ffad 	bl	800a008 <sync_window>
 800a0ae:	4603      	mov	r3, r0
 800a0b0:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800a0b2:	7bfb      	ldrb	r3, [r7, #15]
 800a0b4:	2b00      	cmp	r3, #0
 800a0b6:	d113      	bne.n	800a0e0 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800a0b8:	687b      	ldr	r3, [r7, #4]
 800a0ba:	7858      	ldrb	r0, [r3, #1]
 800a0bc:	687b      	ldr	r3, [r7, #4]
 800a0be:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800a0c2:	2301      	movs	r3, #1
 800a0c4:	683a      	ldr	r2, [r7, #0]
 800a0c6:	f7ff fcd5 	bl	8009a74 <disk_read>
 800a0ca:	4603      	mov	r3, r0
 800a0cc:	2b00      	cmp	r3, #0
 800a0ce:	d004      	beq.n	800a0da <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800a0d0:	f04f 33ff 	mov.w	r3, #4294967295
 800a0d4:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800a0d6:	2301      	movs	r3, #1
 800a0d8:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800a0da:	687b      	ldr	r3, [r7, #4]
 800a0dc:	683a      	ldr	r2, [r7, #0]
 800a0de:	635a      	str	r2, [r3, #52]	; 0x34
		}
	}
	return res;
 800a0e0:	7bfb      	ldrb	r3, [r7, #15]
}
 800a0e2:	4618      	mov	r0, r3
 800a0e4:	3710      	adds	r7, #16
 800a0e6:	46bd      	mov	sp, r7
 800a0e8:	bd80      	pop	{r7, pc}
	...

0800a0ec <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 800a0ec:	b580      	push	{r7, lr}
 800a0ee:	b084      	sub	sp, #16
 800a0f0:	af00      	add	r7, sp, #0
 800a0f2:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800a0f4:	6878      	ldr	r0, [r7, #4]
 800a0f6:	f7ff ff87 	bl	800a008 <sync_window>
 800a0fa:	4603      	mov	r3, r0
 800a0fc:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800a0fe:	7bfb      	ldrb	r3, [r7, #15]
 800a100:	2b00      	cmp	r3, #0
 800a102:	d159      	bne.n	800a1b8 <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800a104:	687b      	ldr	r3, [r7, #4]
 800a106:	781b      	ldrb	r3, [r3, #0]
 800a108:	2b03      	cmp	r3, #3
 800a10a:	d149      	bne.n	800a1a0 <sync_fs+0xb4>
 800a10c:	687b      	ldr	r3, [r7, #4]
 800a10e:	791b      	ldrb	r3, [r3, #4]
 800a110:	2b01      	cmp	r3, #1
 800a112:	d145      	bne.n	800a1a0 <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 800a114:	687b      	ldr	r3, [r7, #4]
 800a116:	f103 0038 	add.w	r0, r3, #56	; 0x38
 800a11a:	687b      	ldr	r3, [r7, #4]
 800a11c:	899b      	ldrh	r3, [r3, #12]
 800a11e:	461a      	mov	r2, r3
 800a120:	2100      	movs	r1, #0
 800a122:	f7ff fda8 	bl	8009c76 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800a126:	687b      	ldr	r3, [r7, #4]
 800a128:	3338      	adds	r3, #56	; 0x38
 800a12a:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800a12e:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800a132:	4618      	mov	r0, r3
 800a134:	f7ff fd37 	bl	8009ba6 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800a138:	687b      	ldr	r3, [r7, #4]
 800a13a:	3338      	adds	r3, #56	; 0x38
 800a13c:	4921      	ldr	r1, [pc, #132]	; (800a1c4 <sync_fs+0xd8>)
 800a13e:	4618      	mov	r0, r3
 800a140:	f7ff fd4c 	bl	8009bdc <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800a144:	687b      	ldr	r3, [r7, #4]
 800a146:	3338      	adds	r3, #56	; 0x38
 800a148:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800a14c:	491e      	ldr	r1, [pc, #120]	; (800a1c8 <sync_fs+0xdc>)
 800a14e:	4618      	mov	r0, r3
 800a150:	f7ff fd44 	bl	8009bdc <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800a154:	687b      	ldr	r3, [r7, #4]
 800a156:	3338      	adds	r3, #56	; 0x38
 800a158:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 800a15c:	687b      	ldr	r3, [r7, #4]
 800a15e:	699b      	ldr	r3, [r3, #24]
 800a160:	4619      	mov	r1, r3
 800a162:	4610      	mov	r0, r2
 800a164:	f7ff fd3a 	bl	8009bdc <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800a168:	687b      	ldr	r3, [r7, #4]
 800a16a:	3338      	adds	r3, #56	; 0x38
 800a16c:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 800a170:	687b      	ldr	r3, [r7, #4]
 800a172:	695b      	ldr	r3, [r3, #20]
 800a174:	4619      	mov	r1, r3
 800a176:	4610      	mov	r0, r2
 800a178:	f7ff fd30 	bl	8009bdc <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800a17c:	687b      	ldr	r3, [r7, #4]
 800a17e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a180:	1c5a      	adds	r2, r3, #1
 800a182:	687b      	ldr	r3, [r7, #4]
 800a184:	635a      	str	r2, [r3, #52]	; 0x34
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800a186:	687b      	ldr	r3, [r7, #4]
 800a188:	7858      	ldrb	r0, [r3, #1]
 800a18a:	687b      	ldr	r3, [r7, #4]
 800a18c:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800a190:	687b      	ldr	r3, [r7, #4]
 800a192:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a194:	2301      	movs	r3, #1
 800a196:	f7ff fc8d 	bl	8009ab4 <disk_write>
			fs->fsi_flag = 0;
 800a19a:	687b      	ldr	r3, [r7, #4]
 800a19c:	2200      	movs	r2, #0
 800a19e:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800a1a0:	687b      	ldr	r3, [r7, #4]
 800a1a2:	785b      	ldrb	r3, [r3, #1]
 800a1a4:	2200      	movs	r2, #0
 800a1a6:	2100      	movs	r1, #0
 800a1a8:	4618      	mov	r0, r3
 800a1aa:	f7ff fca3 	bl	8009af4 <disk_ioctl>
 800a1ae:	4603      	mov	r3, r0
 800a1b0:	2b00      	cmp	r3, #0
 800a1b2:	d001      	beq.n	800a1b8 <sync_fs+0xcc>
 800a1b4:	2301      	movs	r3, #1
 800a1b6:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800a1b8:	7bfb      	ldrb	r3, [r7, #15]
}
 800a1ba:	4618      	mov	r0, r3
 800a1bc:	3710      	adds	r7, #16
 800a1be:	46bd      	mov	sp, r7
 800a1c0:	bd80      	pop	{r7, pc}
 800a1c2:	bf00      	nop
 800a1c4:	41615252 	.word	0x41615252
 800a1c8:	61417272 	.word	0x61417272

0800a1cc <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800a1cc:	b480      	push	{r7}
 800a1ce:	b083      	sub	sp, #12
 800a1d0:	af00      	add	r7, sp, #0
 800a1d2:	6078      	str	r0, [r7, #4]
 800a1d4:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800a1d6:	683b      	ldr	r3, [r7, #0]
 800a1d8:	3b02      	subs	r3, #2
 800a1da:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800a1dc:	687b      	ldr	r3, [r7, #4]
 800a1de:	69db      	ldr	r3, [r3, #28]
 800a1e0:	3b02      	subs	r3, #2
 800a1e2:	683a      	ldr	r2, [r7, #0]
 800a1e4:	429a      	cmp	r2, r3
 800a1e6:	d301      	bcc.n	800a1ec <clust2sect+0x20>
 800a1e8:	2300      	movs	r3, #0
 800a1ea:	e008      	b.n	800a1fe <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800a1ec:	687b      	ldr	r3, [r7, #4]
 800a1ee:	895b      	ldrh	r3, [r3, #10]
 800a1f0:	461a      	mov	r2, r3
 800a1f2:	683b      	ldr	r3, [r7, #0]
 800a1f4:	fb03 f202 	mul.w	r2, r3, r2
 800a1f8:	687b      	ldr	r3, [r7, #4]
 800a1fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a1fc:	4413      	add	r3, r2
}
 800a1fe:	4618      	mov	r0, r3
 800a200:	370c      	adds	r7, #12
 800a202:	46bd      	mov	sp, r7
 800a204:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a208:	4770      	bx	lr

0800a20a <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800a20a:	b580      	push	{r7, lr}
 800a20c:	b086      	sub	sp, #24
 800a20e:	af00      	add	r7, sp, #0
 800a210:	6078      	str	r0, [r7, #4]
 800a212:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800a214:	687b      	ldr	r3, [r7, #4]
 800a216:	681b      	ldr	r3, [r3, #0]
 800a218:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800a21a:	683b      	ldr	r3, [r7, #0]
 800a21c:	2b01      	cmp	r3, #1
 800a21e:	d904      	bls.n	800a22a <get_fat+0x20>
 800a220:	693b      	ldr	r3, [r7, #16]
 800a222:	69db      	ldr	r3, [r3, #28]
 800a224:	683a      	ldr	r2, [r7, #0]
 800a226:	429a      	cmp	r2, r3
 800a228:	d302      	bcc.n	800a230 <get_fat+0x26>
		val = 1;	/* Internal error */
 800a22a:	2301      	movs	r3, #1
 800a22c:	617b      	str	r3, [r7, #20]
 800a22e:	e0bb      	b.n	800a3a8 <get_fat+0x19e>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800a230:	f04f 33ff 	mov.w	r3, #4294967295
 800a234:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800a236:	693b      	ldr	r3, [r7, #16]
 800a238:	781b      	ldrb	r3, [r3, #0]
 800a23a:	2b03      	cmp	r3, #3
 800a23c:	f000 8083 	beq.w	800a346 <get_fat+0x13c>
 800a240:	2b03      	cmp	r3, #3
 800a242:	f300 80a7 	bgt.w	800a394 <get_fat+0x18a>
 800a246:	2b01      	cmp	r3, #1
 800a248:	d002      	beq.n	800a250 <get_fat+0x46>
 800a24a:	2b02      	cmp	r3, #2
 800a24c:	d056      	beq.n	800a2fc <get_fat+0xf2>
 800a24e:	e0a1      	b.n	800a394 <get_fat+0x18a>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800a250:	683b      	ldr	r3, [r7, #0]
 800a252:	60fb      	str	r3, [r7, #12]
 800a254:	68fb      	ldr	r3, [r7, #12]
 800a256:	085b      	lsrs	r3, r3, #1
 800a258:	68fa      	ldr	r2, [r7, #12]
 800a25a:	4413      	add	r3, r2
 800a25c:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800a25e:	693b      	ldr	r3, [r7, #16]
 800a260:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800a262:	693b      	ldr	r3, [r7, #16]
 800a264:	899b      	ldrh	r3, [r3, #12]
 800a266:	4619      	mov	r1, r3
 800a268:	68fb      	ldr	r3, [r7, #12]
 800a26a:	fbb3 f3f1 	udiv	r3, r3, r1
 800a26e:	4413      	add	r3, r2
 800a270:	4619      	mov	r1, r3
 800a272:	6938      	ldr	r0, [r7, #16]
 800a274:	f7ff ff0c 	bl	800a090 <move_window>
 800a278:	4603      	mov	r3, r0
 800a27a:	2b00      	cmp	r3, #0
 800a27c:	f040 808d 	bne.w	800a39a <get_fat+0x190>
			wc = fs->win[bc++ % SS(fs)];
 800a280:	68fb      	ldr	r3, [r7, #12]
 800a282:	1c5a      	adds	r2, r3, #1
 800a284:	60fa      	str	r2, [r7, #12]
 800a286:	693a      	ldr	r2, [r7, #16]
 800a288:	8992      	ldrh	r2, [r2, #12]
 800a28a:	fbb3 f1f2 	udiv	r1, r3, r2
 800a28e:	fb01 f202 	mul.w	r2, r1, r2
 800a292:	1a9b      	subs	r3, r3, r2
 800a294:	693a      	ldr	r2, [r7, #16]
 800a296:	4413      	add	r3, r2
 800a298:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800a29c:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800a29e:	693b      	ldr	r3, [r7, #16]
 800a2a0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800a2a2:	693b      	ldr	r3, [r7, #16]
 800a2a4:	899b      	ldrh	r3, [r3, #12]
 800a2a6:	4619      	mov	r1, r3
 800a2a8:	68fb      	ldr	r3, [r7, #12]
 800a2aa:	fbb3 f3f1 	udiv	r3, r3, r1
 800a2ae:	4413      	add	r3, r2
 800a2b0:	4619      	mov	r1, r3
 800a2b2:	6938      	ldr	r0, [r7, #16]
 800a2b4:	f7ff feec 	bl	800a090 <move_window>
 800a2b8:	4603      	mov	r3, r0
 800a2ba:	2b00      	cmp	r3, #0
 800a2bc:	d16f      	bne.n	800a39e <get_fat+0x194>
			wc |= fs->win[bc % SS(fs)] << 8;
 800a2be:	693b      	ldr	r3, [r7, #16]
 800a2c0:	899b      	ldrh	r3, [r3, #12]
 800a2c2:	461a      	mov	r2, r3
 800a2c4:	68fb      	ldr	r3, [r7, #12]
 800a2c6:	fbb3 f1f2 	udiv	r1, r3, r2
 800a2ca:	fb01 f202 	mul.w	r2, r1, r2
 800a2ce:	1a9b      	subs	r3, r3, r2
 800a2d0:	693a      	ldr	r2, [r7, #16]
 800a2d2:	4413      	add	r3, r2
 800a2d4:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800a2d8:	021b      	lsls	r3, r3, #8
 800a2da:	461a      	mov	r2, r3
 800a2dc:	68bb      	ldr	r3, [r7, #8]
 800a2de:	4313      	orrs	r3, r2
 800a2e0:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800a2e2:	683b      	ldr	r3, [r7, #0]
 800a2e4:	f003 0301 	and.w	r3, r3, #1
 800a2e8:	2b00      	cmp	r3, #0
 800a2ea:	d002      	beq.n	800a2f2 <get_fat+0xe8>
 800a2ec:	68bb      	ldr	r3, [r7, #8]
 800a2ee:	091b      	lsrs	r3, r3, #4
 800a2f0:	e002      	b.n	800a2f8 <get_fat+0xee>
 800a2f2:	68bb      	ldr	r3, [r7, #8]
 800a2f4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800a2f8:	617b      	str	r3, [r7, #20]
			break;
 800a2fa:	e055      	b.n	800a3a8 <get_fat+0x19e>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800a2fc:	693b      	ldr	r3, [r7, #16]
 800a2fe:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800a300:	693b      	ldr	r3, [r7, #16]
 800a302:	899b      	ldrh	r3, [r3, #12]
 800a304:	085b      	lsrs	r3, r3, #1
 800a306:	b29b      	uxth	r3, r3
 800a308:	4619      	mov	r1, r3
 800a30a:	683b      	ldr	r3, [r7, #0]
 800a30c:	fbb3 f3f1 	udiv	r3, r3, r1
 800a310:	4413      	add	r3, r2
 800a312:	4619      	mov	r1, r3
 800a314:	6938      	ldr	r0, [r7, #16]
 800a316:	f7ff febb 	bl	800a090 <move_window>
 800a31a:	4603      	mov	r3, r0
 800a31c:	2b00      	cmp	r3, #0
 800a31e:	d140      	bne.n	800a3a2 <get_fat+0x198>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800a320:	693b      	ldr	r3, [r7, #16]
 800a322:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800a326:	683b      	ldr	r3, [r7, #0]
 800a328:	005b      	lsls	r3, r3, #1
 800a32a:	693a      	ldr	r2, [r7, #16]
 800a32c:	8992      	ldrh	r2, [r2, #12]
 800a32e:	fbb3 f0f2 	udiv	r0, r3, r2
 800a332:	fb00 f202 	mul.w	r2, r0, r2
 800a336:	1a9b      	subs	r3, r3, r2
 800a338:	440b      	add	r3, r1
 800a33a:	4618      	mov	r0, r3
 800a33c:	f7ff fbf8 	bl	8009b30 <ld_word>
 800a340:	4603      	mov	r3, r0
 800a342:	617b      	str	r3, [r7, #20]
			break;
 800a344:	e030      	b.n	800a3a8 <get_fat+0x19e>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800a346:	693b      	ldr	r3, [r7, #16]
 800a348:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800a34a:	693b      	ldr	r3, [r7, #16]
 800a34c:	899b      	ldrh	r3, [r3, #12]
 800a34e:	089b      	lsrs	r3, r3, #2
 800a350:	b29b      	uxth	r3, r3
 800a352:	4619      	mov	r1, r3
 800a354:	683b      	ldr	r3, [r7, #0]
 800a356:	fbb3 f3f1 	udiv	r3, r3, r1
 800a35a:	4413      	add	r3, r2
 800a35c:	4619      	mov	r1, r3
 800a35e:	6938      	ldr	r0, [r7, #16]
 800a360:	f7ff fe96 	bl	800a090 <move_window>
 800a364:	4603      	mov	r3, r0
 800a366:	2b00      	cmp	r3, #0
 800a368:	d11d      	bne.n	800a3a6 <get_fat+0x19c>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800a36a:	693b      	ldr	r3, [r7, #16]
 800a36c:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800a370:	683b      	ldr	r3, [r7, #0]
 800a372:	009b      	lsls	r3, r3, #2
 800a374:	693a      	ldr	r2, [r7, #16]
 800a376:	8992      	ldrh	r2, [r2, #12]
 800a378:	fbb3 f0f2 	udiv	r0, r3, r2
 800a37c:	fb00 f202 	mul.w	r2, r0, r2
 800a380:	1a9b      	subs	r3, r3, r2
 800a382:	440b      	add	r3, r1
 800a384:	4618      	mov	r0, r3
 800a386:	f7ff fbeb 	bl	8009b60 <ld_dword>
 800a38a:	4603      	mov	r3, r0
 800a38c:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800a390:	617b      	str	r3, [r7, #20]
			break;
 800a392:	e009      	b.n	800a3a8 <get_fat+0x19e>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800a394:	2301      	movs	r3, #1
 800a396:	617b      	str	r3, [r7, #20]
 800a398:	e006      	b.n	800a3a8 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800a39a:	bf00      	nop
 800a39c:	e004      	b.n	800a3a8 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800a39e:	bf00      	nop
 800a3a0:	e002      	b.n	800a3a8 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800a3a2:	bf00      	nop
 800a3a4:	e000      	b.n	800a3a8 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800a3a6:	bf00      	nop
		}
	}

	return val;
 800a3a8:	697b      	ldr	r3, [r7, #20]
}
 800a3aa:	4618      	mov	r0, r3
 800a3ac:	3718      	adds	r7, #24
 800a3ae:	46bd      	mov	sp, r7
 800a3b0:	bd80      	pop	{r7, pc}

0800a3b2 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800a3b2:	b590      	push	{r4, r7, lr}
 800a3b4:	b089      	sub	sp, #36	; 0x24
 800a3b6:	af00      	add	r7, sp, #0
 800a3b8:	60f8      	str	r0, [r7, #12]
 800a3ba:	60b9      	str	r1, [r7, #8]
 800a3bc:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800a3be:	2302      	movs	r3, #2
 800a3c0:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800a3c2:	68bb      	ldr	r3, [r7, #8]
 800a3c4:	2b01      	cmp	r3, #1
 800a3c6:	f240 8102 	bls.w	800a5ce <put_fat+0x21c>
 800a3ca:	68fb      	ldr	r3, [r7, #12]
 800a3cc:	69db      	ldr	r3, [r3, #28]
 800a3ce:	68ba      	ldr	r2, [r7, #8]
 800a3d0:	429a      	cmp	r2, r3
 800a3d2:	f080 80fc 	bcs.w	800a5ce <put_fat+0x21c>
		switch (fs->fs_type) {
 800a3d6:	68fb      	ldr	r3, [r7, #12]
 800a3d8:	781b      	ldrb	r3, [r3, #0]
 800a3da:	2b03      	cmp	r3, #3
 800a3dc:	f000 80b6 	beq.w	800a54c <put_fat+0x19a>
 800a3e0:	2b03      	cmp	r3, #3
 800a3e2:	f300 80fd 	bgt.w	800a5e0 <put_fat+0x22e>
 800a3e6:	2b01      	cmp	r3, #1
 800a3e8:	d003      	beq.n	800a3f2 <put_fat+0x40>
 800a3ea:	2b02      	cmp	r3, #2
 800a3ec:	f000 8083 	beq.w	800a4f6 <put_fat+0x144>
 800a3f0:	e0f6      	b.n	800a5e0 <put_fat+0x22e>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800a3f2:	68bb      	ldr	r3, [r7, #8]
 800a3f4:	61bb      	str	r3, [r7, #24]
 800a3f6:	69bb      	ldr	r3, [r7, #24]
 800a3f8:	085b      	lsrs	r3, r3, #1
 800a3fa:	69ba      	ldr	r2, [r7, #24]
 800a3fc:	4413      	add	r3, r2
 800a3fe:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800a400:	68fb      	ldr	r3, [r7, #12]
 800a402:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800a404:	68fb      	ldr	r3, [r7, #12]
 800a406:	899b      	ldrh	r3, [r3, #12]
 800a408:	4619      	mov	r1, r3
 800a40a:	69bb      	ldr	r3, [r7, #24]
 800a40c:	fbb3 f3f1 	udiv	r3, r3, r1
 800a410:	4413      	add	r3, r2
 800a412:	4619      	mov	r1, r3
 800a414:	68f8      	ldr	r0, [r7, #12]
 800a416:	f7ff fe3b 	bl	800a090 <move_window>
 800a41a:	4603      	mov	r3, r0
 800a41c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800a41e:	7ffb      	ldrb	r3, [r7, #31]
 800a420:	2b00      	cmp	r3, #0
 800a422:	f040 80d6 	bne.w	800a5d2 <put_fat+0x220>
			p = fs->win + bc++ % SS(fs);
 800a426:	68fb      	ldr	r3, [r7, #12]
 800a428:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800a42c:	69bb      	ldr	r3, [r7, #24]
 800a42e:	1c5a      	adds	r2, r3, #1
 800a430:	61ba      	str	r2, [r7, #24]
 800a432:	68fa      	ldr	r2, [r7, #12]
 800a434:	8992      	ldrh	r2, [r2, #12]
 800a436:	fbb3 f0f2 	udiv	r0, r3, r2
 800a43a:	fb00 f202 	mul.w	r2, r0, r2
 800a43e:	1a9b      	subs	r3, r3, r2
 800a440:	440b      	add	r3, r1
 800a442:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800a444:	68bb      	ldr	r3, [r7, #8]
 800a446:	f003 0301 	and.w	r3, r3, #1
 800a44a:	2b00      	cmp	r3, #0
 800a44c:	d00d      	beq.n	800a46a <put_fat+0xb8>
 800a44e:	697b      	ldr	r3, [r7, #20]
 800a450:	781b      	ldrb	r3, [r3, #0]
 800a452:	b25b      	sxtb	r3, r3
 800a454:	f003 030f 	and.w	r3, r3, #15
 800a458:	b25a      	sxtb	r2, r3
 800a45a:	687b      	ldr	r3, [r7, #4]
 800a45c:	b2db      	uxtb	r3, r3
 800a45e:	011b      	lsls	r3, r3, #4
 800a460:	b25b      	sxtb	r3, r3
 800a462:	4313      	orrs	r3, r2
 800a464:	b25b      	sxtb	r3, r3
 800a466:	b2db      	uxtb	r3, r3
 800a468:	e001      	b.n	800a46e <put_fat+0xbc>
 800a46a:	687b      	ldr	r3, [r7, #4]
 800a46c:	b2db      	uxtb	r3, r3
 800a46e:	697a      	ldr	r2, [r7, #20]
 800a470:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800a472:	68fb      	ldr	r3, [r7, #12]
 800a474:	2201      	movs	r2, #1
 800a476:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800a478:	68fb      	ldr	r3, [r7, #12]
 800a47a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800a47c:	68fb      	ldr	r3, [r7, #12]
 800a47e:	899b      	ldrh	r3, [r3, #12]
 800a480:	4619      	mov	r1, r3
 800a482:	69bb      	ldr	r3, [r7, #24]
 800a484:	fbb3 f3f1 	udiv	r3, r3, r1
 800a488:	4413      	add	r3, r2
 800a48a:	4619      	mov	r1, r3
 800a48c:	68f8      	ldr	r0, [r7, #12]
 800a48e:	f7ff fdff 	bl	800a090 <move_window>
 800a492:	4603      	mov	r3, r0
 800a494:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800a496:	7ffb      	ldrb	r3, [r7, #31]
 800a498:	2b00      	cmp	r3, #0
 800a49a:	f040 809c 	bne.w	800a5d6 <put_fat+0x224>
			p = fs->win + bc % SS(fs);
 800a49e:	68fb      	ldr	r3, [r7, #12]
 800a4a0:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800a4a4:	68fb      	ldr	r3, [r7, #12]
 800a4a6:	899b      	ldrh	r3, [r3, #12]
 800a4a8:	461a      	mov	r2, r3
 800a4aa:	69bb      	ldr	r3, [r7, #24]
 800a4ac:	fbb3 f0f2 	udiv	r0, r3, r2
 800a4b0:	fb00 f202 	mul.w	r2, r0, r2
 800a4b4:	1a9b      	subs	r3, r3, r2
 800a4b6:	440b      	add	r3, r1
 800a4b8:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800a4ba:	68bb      	ldr	r3, [r7, #8]
 800a4bc:	f003 0301 	and.w	r3, r3, #1
 800a4c0:	2b00      	cmp	r3, #0
 800a4c2:	d003      	beq.n	800a4cc <put_fat+0x11a>
 800a4c4:	687b      	ldr	r3, [r7, #4]
 800a4c6:	091b      	lsrs	r3, r3, #4
 800a4c8:	b2db      	uxtb	r3, r3
 800a4ca:	e00e      	b.n	800a4ea <put_fat+0x138>
 800a4cc:	697b      	ldr	r3, [r7, #20]
 800a4ce:	781b      	ldrb	r3, [r3, #0]
 800a4d0:	b25b      	sxtb	r3, r3
 800a4d2:	f023 030f 	bic.w	r3, r3, #15
 800a4d6:	b25a      	sxtb	r2, r3
 800a4d8:	687b      	ldr	r3, [r7, #4]
 800a4da:	0a1b      	lsrs	r3, r3, #8
 800a4dc:	b25b      	sxtb	r3, r3
 800a4de:	f003 030f 	and.w	r3, r3, #15
 800a4e2:	b25b      	sxtb	r3, r3
 800a4e4:	4313      	orrs	r3, r2
 800a4e6:	b25b      	sxtb	r3, r3
 800a4e8:	b2db      	uxtb	r3, r3
 800a4ea:	697a      	ldr	r2, [r7, #20]
 800a4ec:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800a4ee:	68fb      	ldr	r3, [r7, #12]
 800a4f0:	2201      	movs	r2, #1
 800a4f2:	70da      	strb	r2, [r3, #3]
			break;
 800a4f4:	e074      	b.n	800a5e0 <put_fat+0x22e>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800a4f6:	68fb      	ldr	r3, [r7, #12]
 800a4f8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800a4fa:	68fb      	ldr	r3, [r7, #12]
 800a4fc:	899b      	ldrh	r3, [r3, #12]
 800a4fe:	085b      	lsrs	r3, r3, #1
 800a500:	b29b      	uxth	r3, r3
 800a502:	4619      	mov	r1, r3
 800a504:	68bb      	ldr	r3, [r7, #8]
 800a506:	fbb3 f3f1 	udiv	r3, r3, r1
 800a50a:	4413      	add	r3, r2
 800a50c:	4619      	mov	r1, r3
 800a50e:	68f8      	ldr	r0, [r7, #12]
 800a510:	f7ff fdbe 	bl	800a090 <move_window>
 800a514:	4603      	mov	r3, r0
 800a516:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800a518:	7ffb      	ldrb	r3, [r7, #31]
 800a51a:	2b00      	cmp	r3, #0
 800a51c:	d15d      	bne.n	800a5da <put_fat+0x228>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800a51e:	68fb      	ldr	r3, [r7, #12]
 800a520:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800a524:	68bb      	ldr	r3, [r7, #8]
 800a526:	005b      	lsls	r3, r3, #1
 800a528:	68fa      	ldr	r2, [r7, #12]
 800a52a:	8992      	ldrh	r2, [r2, #12]
 800a52c:	fbb3 f0f2 	udiv	r0, r3, r2
 800a530:	fb00 f202 	mul.w	r2, r0, r2
 800a534:	1a9b      	subs	r3, r3, r2
 800a536:	440b      	add	r3, r1
 800a538:	687a      	ldr	r2, [r7, #4]
 800a53a:	b292      	uxth	r2, r2
 800a53c:	4611      	mov	r1, r2
 800a53e:	4618      	mov	r0, r3
 800a540:	f7ff fb31 	bl	8009ba6 <st_word>
			fs->wflag = 1;
 800a544:	68fb      	ldr	r3, [r7, #12]
 800a546:	2201      	movs	r2, #1
 800a548:	70da      	strb	r2, [r3, #3]
			break;
 800a54a:	e049      	b.n	800a5e0 <put_fat+0x22e>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800a54c:	68fb      	ldr	r3, [r7, #12]
 800a54e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800a550:	68fb      	ldr	r3, [r7, #12]
 800a552:	899b      	ldrh	r3, [r3, #12]
 800a554:	089b      	lsrs	r3, r3, #2
 800a556:	b29b      	uxth	r3, r3
 800a558:	4619      	mov	r1, r3
 800a55a:	68bb      	ldr	r3, [r7, #8]
 800a55c:	fbb3 f3f1 	udiv	r3, r3, r1
 800a560:	4413      	add	r3, r2
 800a562:	4619      	mov	r1, r3
 800a564:	68f8      	ldr	r0, [r7, #12]
 800a566:	f7ff fd93 	bl	800a090 <move_window>
 800a56a:	4603      	mov	r3, r0
 800a56c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800a56e:	7ffb      	ldrb	r3, [r7, #31]
 800a570:	2b00      	cmp	r3, #0
 800a572:	d134      	bne.n	800a5de <put_fat+0x22c>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800a574:	687b      	ldr	r3, [r7, #4]
 800a576:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 800a57a:	68fb      	ldr	r3, [r7, #12]
 800a57c:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800a580:	68bb      	ldr	r3, [r7, #8]
 800a582:	009b      	lsls	r3, r3, #2
 800a584:	68fa      	ldr	r2, [r7, #12]
 800a586:	8992      	ldrh	r2, [r2, #12]
 800a588:	fbb3 f0f2 	udiv	r0, r3, r2
 800a58c:	fb00 f202 	mul.w	r2, r0, r2
 800a590:	1a9b      	subs	r3, r3, r2
 800a592:	440b      	add	r3, r1
 800a594:	4618      	mov	r0, r3
 800a596:	f7ff fae3 	bl	8009b60 <ld_dword>
 800a59a:	4603      	mov	r3, r0
 800a59c:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800a5a0:	4323      	orrs	r3, r4
 800a5a2:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800a5a4:	68fb      	ldr	r3, [r7, #12]
 800a5a6:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800a5aa:	68bb      	ldr	r3, [r7, #8]
 800a5ac:	009b      	lsls	r3, r3, #2
 800a5ae:	68fa      	ldr	r2, [r7, #12]
 800a5b0:	8992      	ldrh	r2, [r2, #12]
 800a5b2:	fbb3 f0f2 	udiv	r0, r3, r2
 800a5b6:	fb00 f202 	mul.w	r2, r0, r2
 800a5ba:	1a9b      	subs	r3, r3, r2
 800a5bc:	440b      	add	r3, r1
 800a5be:	6879      	ldr	r1, [r7, #4]
 800a5c0:	4618      	mov	r0, r3
 800a5c2:	f7ff fb0b 	bl	8009bdc <st_dword>
			fs->wflag = 1;
 800a5c6:	68fb      	ldr	r3, [r7, #12]
 800a5c8:	2201      	movs	r2, #1
 800a5ca:	70da      	strb	r2, [r3, #3]
			break;
 800a5cc:	e008      	b.n	800a5e0 <put_fat+0x22e>
		}
	}
 800a5ce:	bf00      	nop
 800a5d0:	e006      	b.n	800a5e0 <put_fat+0x22e>
			if (res != FR_OK) break;
 800a5d2:	bf00      	nop
 800a5d4:	e004      	b.n	800a5e0 <put_fat+0x22e>
			if (res != FR_OK) break;
 800a5d6:	bf00      	nop
 800a5d8:	e002      	b.n	800a5e0 <put_fat+0x22e>
			if (res != FR_OK) break;
 800a5da:	bf00      	nop
 800a5dc:	e000      	b.n	800a5e0 <put_fat+0x22e>
			if (res != FR_OK) break;
 800a5de:	bf00      	nop
	return res;
 800a5e0:	7ffb      	ldrb	r3, [r7, #31]
}
 800a5e2:	4618      	mov	r0, r3
 800a5e4:	3724      	adds	r7, #36	; 0x24
 800a5e6:	46bd      	mov	sp, r7
 800a5e8:	bd90      	pop	{r4, r7, pc}

0800a5ea <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800a5ea:	b580      	push	{r7, lr}
 800a5ec:	b088      	sub	sp, #32
 800a5ee:	af00      	add	r7, sp, #0
 800a5f0:	60f8      	str	r0, [r7, #12]
 800a5f2:	60b9      	str	r1, [r7, #8]
 800a5f4:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800a5f6:	2300      	movs	r3, #0
 800a5f8:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800a5fa:	68fb      	ldr	r3, [r7, #12]
 800a5fc:	681b      	ldr	r3, [r3, #0]
 800a5fe:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800a600:	68bb      	ldr	r3, [r7, #8]
 800a602:	2b01      	cmp	r3, #1
 800a604:	d904      	bls.n	800a610 <remove_chain+0x26>
 800a606:	69bb      	ldr	r3, [r7, #24]
 800a608:	69db      	ldr	r3, [r3, #28]
 800a60a:	68ba      	ldr	r2, [r7, #8]
 800a60c:	429a      	cmp	r2, r3
 800a60e:	d301      	bcc.n	800a614 <remove_chain+0x2a>
 800a610:	2302      	movs	r3, #2
 800a612:	e04b      	b.n	800a6ac <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800a614:	687b      	ldr	r3, [r7, #4]
 800a616:	2b00      	cmp	r3, #0
 800a618:	d00c      	beq.n	800a634 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800a61a:	f04f 32ff 	mov.w	r2, #4294967295
 800a61e:	6879      	ldr	r1, [r7, #4]
 800a620:	69b8      	ldr	r0, [r7, #24]
 800a622:	f7ff fec6 	bl	800a3b2 <put_fat>
 800a626:	4603      	mov	r3, r0
 800a628:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800a62a:	7ffb      	ldrb	r3, [r7, #31]
 800a62c:	2b00      	cmp	r3, #0
 800a62e:	d001      	beq.n	800a634 <remove_chain+0x4a>
 800a630:	7ffb      	ldrb	r3, [r7, #31]
 800a632:	e03b      	b.n	800a6ac <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800a634:	68b9      	ldr	r1, [r7, #8]
 800a636:	68f8      	ldr	r0, [r7, #12]
 800a638:	f7ff fde7 	bl	800a20a <get_fat>
 800a63c:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800a63e:	697b      	ldr	r3, [r7, #20]
 800a640:	2b00      	cmp	r3, #0
 800a642:	d031      	beq.n	800a6a8 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800a644:	697b      	ldr	r3, [r7, #20]
 800a646:	2b01      	cmp	r3, #1
 800a648:	d101      	bne.n	800a64e <remove_chain+0x64>
 800a64a:	2302      	movs	r3, #2
 800a64c:	e02e      	b.n	800a6ac <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800a64e:	697b      	ldr	r3, [r7, #20]
 800a650:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a654:	d101      	bne.n	800a65a <remove_chain+0x70>
 800a656:	2301      	movs	r3, #1
 800a658:	e028      	b.n	800a6ac <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800a65a:	2200      	movs	r2, #0
 800a65c:	68b9      	ldr	r1, [r7, #8]
 800a65e:	69b8      	ldr	r0, [r7, #24]
 800a660:	f7ff fea7 	bl	800a3b2 <put_fat>
 800a664:	4603      	mov	r3, r0
 800a666:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800a668:	7ffb      	ldrb	r3, [r7, #31]
 800a66a:	2b00      	cmp	r3, #0
 800a66c:	d001      	beq.n	800a672 <remove_chain+0x88>
 800a66e:	7ffb      	ldrb	r3, [r7, #31]
 800a670:	e01c      	b.n	800a6ac <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800a672:	69bb      	ldr	r3, [r7, #24]
 800a674:	699a      	ldr	r2, [r3, #24]
 800a676:	69bb      	ldr	r3, [r7, #24]
 800a678:	69db      	ldr	r3, [r3, #28]
 800a67a:	3b02      	subs	r3, #2
 800a67c:	429a      	cmp	r2, r3
 800a67e:	d20b      	bcs.n	800a698 <remove_chain+0xae>
			fs->free_clst++;
 800a680:	69bb      	ldr	r3, [r7, #24]
 800a682:	699b      	ldr	r3, [r3, #24]
 800a684:	1c5a      	adds	r2, r3, #1
 800a686:	69bb      	ldr	r3, [r7, #24]
 800a688:	619a      	str	r2, [r3, #24]
			fs->fsi_flag |= 1;
 800a68a:	69bb      	ldr	r3, [r7, #24]
 800a68c:	791b      	ldrb	r3, [r3, #4]
 800a68e:	f043 0301 	orr.w	r3, r3, #1
 800a692:	b2da      	uxtb	r2, r3
 800a694:	69bb      	ldr	r3, [r7, #24]
 800a696:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800a698:	697b      	ldr	r3, [r7, #20]
 800a69a:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800a69c:	69bb      	ldr	r3, [r7, #24]
 800a69e:	69db      	ldr	r3, [r3, #28]
 800a6a0:	68ba      	ldr	r2, [r7, #8]
 800a6a2:	429a      	cmp	r2, r3
 800a6a4:	d3c6      	bcc.n	800a634 <remove_chain+0x4a>
 800a6a6:	e000      	b.n	800a6aa <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800a6a8:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800a6aa:	2300      	movs	r3, #0
}
 800a6ac:	4618      	mov	r0, r3
 800a6ae:	3720      	adds	r7, #32
 800a6b0:	46bd      	mov	sp, r7
 800a6b2:	bd80      	pop	{r7, pc}

0800a6b4 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800a6b4:	b580      	push	{r7, lr}
 800a6b6:	b088      	sub	sp, #32
 800a6b8:	af00      	add	r7, sp, #0
 800a6ba:	6078      	str	r0, [r7, #4]
 800a6bc:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800a6be:	687b      	ldr	r3, [r7, #4]
 800a6c0:	681b      	ldr	r3, [r3, #0]
 800a6c2:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800a6c4:	683b      	ldr	r3, [r7, #0]
 800a6c6:	2b00      	cmp	r3, #0
 800a6c8:	d10d      	bne.n	800a6e6 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800a6ca:	693b      	ldr	r3, [r7, #16]
 800a6cc:	695b      	ldr	r3, [r3, #20]
 800a6ce:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800a6d0:	69bb      	ldr	r3, [r7, #24]
 800a6d2:	2b00      	cmp	r3, #0
 800a6d4:	d004      	beq.n	800a6e0 <create_chain+0x2c>
 800a6d6:	693b      	ldr	r3, [r7, #16]
 800a6d8:	69db      	ldr	r3, [r3, #28]
 800a6da:	69ba      	ldr	r2, [r7, #24]
 800a6dc:	429a      	cmp	r2, r3
 800a6de:	d31b      	bcc.n	800a718 <create_chain+0x64>
 800a6e0:	2301      	movs	r3, #1
 800a6e2:	61bb      	str	r3, [r7, #24]
 800a6e4:	e018      	b.n	800a718 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800a6e6:	6839      	ldr	r1, [r7, #0]
 800a6e8:	6878      	ldr	r0, [r7, #4]
 800a6ea:	f7ff fd8e 	bl	800a20a <get_fat>
 800a6ee:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800a6f0:	68fb      	ldr	r3, [r7, #12]
 800a6f2:	2b01      	cmp	r3, #1
 800a6f4:	d801      	bhi.n	800a6fa <create_chain+0x46>
 800a6f6:	2301      	movs	r3, #1
 800a6f8:	e070      	b.n	800a7dc <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800a6fa:	68fb      	ldr	r3, [r7, #12]
 800a6fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a700:	d101      	bne.n	800a706 <create_chain+0x52>
 800a702:	68fb      	ldr	r3, [r7, #12]
 800a704:	e06a      	b.n	800a7dc <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800a706:	693b      	ldr	r3, [r7, #16]
 800a708:	69db      	ldr	r3, [r3, #28]
 800a70a:	68fa      	ldr	r2, [r7, #12]
 800a70c:	429a      	cmp	r2, r3
 800a70e:	d201      	bcs.n	800a714 <create_chain+0x60>
 800a710:	68fb      	ldr	r3, [r7, #12]
 800a712:	e063      	b.n	800a7dc <create_chain+0x128>
		scl = clst;
 800a714:	683b      	ldr	r3, [r7, #0]
 800a716:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800a718:	69bb      	ldr	r3, [r7, #24]
 800a71a:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800a71c:	69fb      	ldr	r3, [r7, #28]
 800a71e:	3301      	adds	r3, #1
 800a720:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800a722:	693b      	ldr	r3, [r7, #16]
 800a724:	69db      	ldr	r3, [r3, #28]
 800a726:	69fa      	ldr	r2, [r7, #28]
 800a728:	429a      	cmp	r2, r3
 800a72a:	d307      	bcc.n	800a73c <create_chain+0x88>
				ncl = 2;
 800a72c:	2302      	movs	r3, #2
 800a72e:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800a730:	69fa      	ldr	r2, [r7, #28]
 800a732:	69bb      	ldr	r3, [r7, #24]
 800a734:	429a      	cmp	r2, r3
 800a736:	d901      	bls.n	800a73c <create_chain+0x88>
 800a738:	2300      	movs	r3, #0
 800a73a:	e04f      	b.n	800a7dc <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800a73c:	69f9      	ldr	r1, [r7, #28]
 800a73e:	6878      	ldr	r0, [r7, #4]
 800a740:	f7ff fd63 	bl	800a20a <get_fat>
 800a744:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800a746:	68fb      	ldr	r3, [r7, #12]
 800a748:	2b00      	cmp	r3, #0
 800a74a:	d00e      	beq.n	800a76a <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800a74c:	68fb      	ldr	r3, [r7, #12]
 800a74e:	2b01      	cmp	r3, #1
 800a750:	d003      	beq.n	800a75a <create_chain+0xa6>
 800a752:	68fb      	ldr	r3, [r7, #12]
 800a754:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a758:	d101      	bne.n	800a75e <create_chain+0xaa>
 800a75a:	68fb      	ldr	r3, [r7, #12]
 800a75c:	e03e      	b.n	800a7dc <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800a75e:	69fa      	ldr	r2, [r7, #28]
 800a760:	69bb      	ldr	r3, [r7, #24]
 800a762:	429a      	cmp	r2, r3
 800a764:	d1da      	bne.n	800a71c <create_chain+0x68>
 800a766:	2300      	movs	r3, #0
 800a768:	e038      	b.n	800a7dc <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800a76a:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800a76c:	f04f 32ff 	mov.w	r2, #4294967295
 800a770:	69f9      	ldr	r1, [r7, #28]
 800a772:	6938      	ldr	r0, [r7, #16]
 800a774:	f7ff fe1d 	bl	800a3b2 <put_fat>
 800a778:	4603      	mov	r3, r0
 800a77a:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800a77c:	7dfb      	ldrb	r3, [r7, #23]
 800a77e:	2b00      	cmp	r3, #0
 800a780:	d109      	bne.n	800a796 <create_chain+0xe2>
 800a782:	683b      	ldr	r3, [r7, #0]
 800a784:	2b00      	cmp	r3, #0
 800a786:	d006      	beq.n	800a796 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800a788:	69fa      	ldr	r2, [r7, #28]
 800a78a:	6839      	ldr	r1, [r7, #0]
 800a78c:	6938      	ldr	r0, [r7, #16]
 800a78e:	f7ff fe10 	bl	800a3b2 <put_fat>
 800a792:	4603      	mov	r3, r0
 800a794:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800a796:	7dfb      	ldrb	r3, [r7, #23]
 800a798:	2b00      	cmp	r3, #0
 800a79a:	d116      	bne.n	800a7ca <create_chain+0x116>
		fs->last_clst = ncl;
 800a79c:	693b      	ldr	r3, [r7, #16]
 800a79e:	69fa      	ldr	r2, [r7, #28]
 800a7a0:	615a      	str	r2, [r3, #20]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800a7a2:	693b      	ldr	r3, [r7, #16]
 800a7a4:	699a      	ldr	r2, [r3, #24]
 800a7a6:	693b      	ldr	r3, [r7, #16]
 800a7a8:	69db      	ldr	r3, [r3, #28]
 800a7aa:	3b02      	subs	r3, #2
 800a7ac:	429a      	cmp	r2, r3
 800a7ae:	d804      	bhi.n	800a7ba <create_chain+0x106>
 800a7b0:	693b      	ldr	r3, [r7, #16]
 800a7b2:	699b      	ldr	r3, [r3, #24]
 800a7b4:	1e5a      	subs	r2, r3, #1
 800a7b6:	693b      	ldr	r3, [r7, #16]
 800a7b8:	619a      	str	r2, [r3, #24]
		fs->fsi_flag |= 1;
 800a7ba:	693b      	ldr	r3, [r7, #16]
 800a7bc:	791b      	ldrb	r3, [r3, #4]
 800a7be:	f043 0301 	orr.w	r3, r3, #1
 800a7c2:	b2da      	uxtb	r2, r3
 800a7c4:	693b      	ldr	r3, [r7, #16]
 800a7c6:	711a      	strb	r2, [r3, #4]
 800a7c8:	e007      	b.n	800a7da <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800a7ca:	7dfb      	ldrb	r3, [r7, #23]
 800a7cc:	2b01      	cmp	r3, #1
 800a7ce:	d102      	bne.n	800a7d6 <create_chain+0x122>
 800a7d0:	f04f 33ff 	mov.w	r3, #4294967295
 800a7d4:	e000      	b.n	800a7d8 <create_chain+0x124>
 800a7d6:	2301      	movs	r3, #1
 800a7d8:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800a7da:	69fb      	ldr	r3, [r7, #28]
}
 800a7dc:	4618      	mov	r0, r3
 800a7de:	3720      	adds	r7, #32
 800a7e0:	46bd      	mov	sp, r7
 800a7e2:	bd80      	pop	{r7, pc}

0800a7e4 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800a7e4:	b480      	push	{r7}
 800a7e6:	b087      	sub	sp, #28
 800a7e8:	af00      	add	r7, sp, #0
 800a7ea:	6078      	str	r0, [r7, #4]
 800a7ec:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800a7ee:	687b      	ldr	r3, [r7, #4]
 800a7f0:	681b      	ldr	r3, [r3, #0]
 800a7f2:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800a7f4:	687b      	ldr	r3, [r7, #4]
 800a7f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a7f8:	3304      	adds	r3, #4
 800a7fa:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800a7fc:	68fb      	ldr	r3, [r7, #12]
 800a7fe:	899b      	ldrh	r3, [r3, #12]
 800a800:	461a      	mov	r2, r3
 800a802:	683b      	ldr	r3, [r7, #0]
 800a804:	fbb3 f3f2 	udiv	r3, r3, r2
 800a808:	68fa      	ldr	r2, [r7, #12]
 800a80a:	8952      	ldrh	r2, [r2, #10]
 800a80c:	fbb3 f3f2 	udiv	r3, r3, r2
 800a810:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800a812:	693b      	ldr	r3, [r7, #16]
 800a814:	1d1a      	adds	r2, r3, #4
 800a816:	613a      	str	r2, [r7, #16]
 800a818:	681b      	ldr	r3, [r3, #0]
 800a81a:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800a81c:	68bb      	ldr	r3, [r7, #8]
 800a81e:	2b00      	cmp	r3, #0
 800a820:	d101      	bne.n	800a826 <clmt_clust+0x42>
 800a822:	2300      	movs	r3, #0
 800a824:	e010      	b.n	800a848 <clmt_clust+0x64>
		if (cl < ncl) break;	/* In this fragment? */
 800a826:	697a      	ldr	r2, [r7, #20]
 800a828:	68bb      	ldr	r3, [r7, #8]
 800a82a:	429a      	cmp	r2, r3
 800a82c:	d307      	bcc.n	800a83e <clmt_clust+0x5a>
		cl -= ncl; tbl++;		/* Next fragment */
 800a82e:	697a      	ldr	r2, [r7, #20]
 800a830:	68bb      	ldr	r3, [r7, #8]
 800a832:	1ad3      	subs	r3, r2, r3
 800a834:	617b      	str	r3, [r7, #20]
 800a836:	693b      	ldr	r3, [r7, #16]
 800a838:	3304      	adds	r3, #4
 800a83a:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800a83c:	e7e9      	b.n	800a812 <clmt_clust+0x2e>
		if (cl < ncl) break;	/* In this fragment? */
 800a83e:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800a840:	693b      	ldr	r3, [r7, #16]
 800a842:	681a      	ldr	r2, [r3, #0]
 800a844:	697b      	ldr	r3, [r7, #20]
 800a846:	4413      	add	r3, r2
}
 800a848:	4618      	mov	r0, r3
 800a84a:	371c      	adds	r7, #28
 800a84c:	46bd      	mov	sp, r7
 800a84e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a852:	4770      	bx	lr

0800a854 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800a854:	b580      	push	{r7, lr}
 800a856:	b086      	sub	sp, #24
 800a858:	af00      	add	r7, sp, #0
 800a85a:	6078      	str	r0, [r7, #4]
 800a85c:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800a85e:	687b      	ldr	r3, [r7, #4]
 800a860:	681b      	ldr	r3, [r3, #0]
 800a862:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800a864:	683b      	ldr	r3, [r7, #0]
 800a866:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800a86a:	d204      	bcs.n	800a876 <dir_sdi+0x22>
 800a86c:	683b      	ldr	r3, [r7, #0]
 800a86e:	f003 031f 	and.w	r3, r3, #31
 800a872:	2b00      	cmp	r3, #0
 800a874:	d001      	beq.n	800a87a <dir_sdi+0x26>
		return FR_INT_ERR;
 800a876:	2302      	movs	r3, #2
 800a878:	e071      	b.n	800a95e <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 800a87a:	687b      	ldr	r3, [r7, #4]
 800a87c:	683a      	ldr	r2, [r7, #0]
 800a87e:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800a880:	687b      	ldr	r3, [r7, #4]
 800a882:	689b      	ldr	r3, [r3, #8]
 800a884:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800a886:	697b      	ldr	r3, [r7, #20]
 800a888:	2b00      	cmp	r3, #0
 800a88a:	d106      	bne.n	800a89a <dir_sdi+0x46>
 800a88c:	693b      	ldr	r3, [r7, #16]
 800a88e:	781b      	ldrb	r3, [r3, #0]
 800a890:	2b02      	cmp	r3, #2
 800a892:	d902      	bls.n	800a89a <dir_sdi+0x46>
		clst = fs->dirbase;
 800a894:	693b      	ldr	r3, [r7, #16]
 800a896:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a898:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800a89a:	697b      	ldr	r3, [r7, #20]
 800a89c:	2b00      	cmp	r3, #0
 800a89e:	d10c      	bne.n	800a8ba <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800a8a0:	683b      	ldr	r3, [r7, #0]
 800a8a2:	095b      	lsrs	r3, r3, #5
 800a8a4:	693a      	ldr	r2, [r7, #16]
 800a8a6:	8912      	ldrh	r2, [r2, #8]
 800a8a8:	4293      	cmp	r3, r2
 800a8aa:	d301      	bcc.n	800a8b0 <dir_sdi+0x5c>
 800a8ac:	2302      	movs	r3, #2
 800a8ae:	e056      	b.n	800a95e <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 800a8b0:	693b      	ldr	r3, [r7, #16]
 800a8b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a8b4:	687b      	ldr	r3, [r7, #4]
 800a8b6:	61da      	str	r2, [r3, #28]
 800a8b8:	e02d      	b.n	800a916 <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800a8ba:	693b      	ldr	r3, [r7, #16]
 800a8bc:	895b      	ldrh	r3, [r3, #10]
 800a8be:	461a      	mov	r2, r3
 800a8c0:	693b      	ldr	r3, [r7, #16]
 800a8c2:	899b      	ldrh	r3, [r3, #12]
 800a8c4:	fb02 f303 	mul.w	r3, r2, r3
 800a8c8:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800a8ca:	e019      	b.n	800a900 <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800a8cc:	687b      	ldr	r3, [r7, #4]
 800a8ce:	6979      	ldr	r1, [r7, #20]
 800a8d0:	4618      	mov	r0, r3
 800a8d2:	f7ff fc9a 	bl	800a20a <get_fat>
 800a8d6:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800a8d8:	697b      	ldr	r3, [r7, #20]
 800a8da:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a8de:	d101      	bne.n	800a8e4 <dir_sdi+0x90>
 800a8e0:	2301      	movs	r3, #1
 800a8e2:	e03c      	b.n	800a95e <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800a8e4:	697b      	ldr	r3, [r7, #20]
 800a8e6:	2b01      	cmp	r3, #1
 800a8e8:	d904      	bls.n	800a8f4 <dir_sdi+0xa0>
 800a8ea:	693b      	ldr	r3, [r7, #16]
 800a8ec:	69db      	ldr	r3, [r3, #28]
 800a8ee:	697a      	ldr	r2, [r7, #20]
 800a8f0:	429a      	cmp	r2, r3
 800a8f2:	d301      	bcc.n	800a8f8 <dir_sdi+0xa4>
 800a8f4:	2302      	movs	r3, #2
 800a8f6:	e032      	b.n	800a95e <dir_sdi+0x10a>
			ofs -= csz;
 800a8f8:	683a      	ldr	r2, [r7, #0]
 800a8fa:	68fb      	ldr	r3, [r7, #12]
 800a8fc:	1ad3      	subs	r3, r2, r3
 800a8fe:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800a900:	683a      	ldr	r2, [r7, #0]
 800a902:	68fb      	ldr	r3, [r7, #12]
 800a904:	429a      	cmp	r2, r3
 800a906:	d2e1      	bcs.n	800a8cc <dir_sdi+0x78>
		}
		dp->sect = clust2sect(fs, clst);
 800a908:	6979      	ldr	r1, [r7, #20]
 800a90a:	6938      	ldr	r0, [r7, #16]
 800a90c:	f7ff fc5e 	bl	800a1cc <clust2sect>
 800a910:	4602      	mov	r2, r0
 800a912:	687b      	ldr	r3, [r7, #4]
 800a914:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800a916:	687b      	ldr	r3, [r7, #4]
 800a918:	697a      	ldr	r2, [r7, #20]
 800a91a:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 800a91c:	687b      	ldr	r3, [r7, #4]
 800a91e:	69db      	ldr	r3, [r3, #28]
 800a920:	2b00      	cmp	r3, #0
 800a922:	d101      	bne.n	800a928 <dir_sdi+0xd4>
 800a924:	2302      	movs	r3, #2
 800a926:	e01a      	b.n	800a95e <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800a928:	687b      	ldr	r3, [r7, #4]
 800a92a:	69da      	ldr	r2, [r3, #28]
 800a92c:	693b      	ldr	r3, [r7, #16]
 800a92e:	899b      	ldrh	r3, [r3, #12]
 800a930:	4619      	mov	r1, r3
 800a932:	683b      	ldr	r3, [r7, #0]
 800a934:	fbb3 f3f1 	udiv	r3, r3, r1
 800a938:	441a      	add	r2, r3
 800a93a:	687b      	ldr	r3, [r7, #4]
 800a93c:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800a93e:	693b      	ldr	r3, [r7, #16]
 800a940:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800a944:	693b      	ldr	r3, [r7, #16]
 800a946:	899b      	ldrh	r3, [r3, #12]
 800a948:	461a      	mov	r2, r3
 800a94a:	683b      	ldr	r3, [r7, #0]
 800a94c:	fbb3 f0f2 	udiv	r0, r3, r2
 800a950:	fb00 f202 	mul.w	r2, r0, r2
 800a954:	1a9b      	subs	r3, r3, r2
 800a956:	18ca      	adds	r2, r1, r3
 800a958:	687b      	ldr	r3, [r7, #4]
 800a95a:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800a95c:	2300      	movs	r3, #0
}
 800a95e:	4618      	mov	r0, r3
 800a960:	3718      	adds	r7, #24
 800a962:	46bd      	mov	sp, r7
 800a964:	bd80      	pop	{r7, pc}

0800a966 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800a966:	b580      	push	{r7, lr}
 800a968:	b086      	sub	sp, #24
 800a96a:	af00      	add	r7, sp, #0
 800a96c:	6078      	str	r0, [r7, #4]
 800a96e:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800a970:	687b      	ldr	r3, [r7, #4]
 800a972:	681b      	ldr	r3, [r3, #0]
 800a974:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800a976:	687b      	ldr	r3, [r7, #4]
 800a978:	695b      	ldr	r3, [r3, #20]
 800a97a:	3320      	adds	r3, #32
 800a97c:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800a97e:	687b      	ldr	r3, [r7, #4]
 800a980:	69db      	ldr	r3, [r3, #28]
 800a982:	2b00      	cmp	r3, #0
 800a984:	d003      	beq.n	800a98e <dir_next+0x28>
 800a986:	68bb      	ldr	r3, [r7, #8]
 800a988:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800a98c:	d301      	bcc.n	800a992 <dir_next+0x2c>
 800a98e:	2304      	movs	r3, #4
 800a990:	e0bb      	b.n	800ab0a <dir_next+0x1a4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800a992:	68fb      	ldr	r3, [r7, #12]
 800a994:	899b      	ldrh	r3, [r3, #12]
 800a996:	461a      	mov	r2, r3
 800a998:	68bb      	ldr	r3, [r7, #8]
 800a99a:	fbb3 f1f2 	udiv	r1, r3, r2
 800a99e:	fb01 f202 	mul.w	r2, r1, r2
 800a9a2:	1a9b      	subs	r3, r3, r2
 800a9a4:	2b00      	cmp	r3, #0
 800a9a6:	f040 809d 	bne.w	800aae4 <dir_next+0x17e>
		dp->sect++;				/* Next sector */
 800a9aa:	687b      	ldr	r3, [r7, #4]
 800a9ac:	69db      	ldr	r3, [r3, #28]
 800a9ae:	1c5a      	adds	r2, r3, #1
 800a9b0:	687b      	ldr	r3, [r7, #4]
 800a9b2:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 800a9b4:	687b      	ldr	r3, [r7, #4]
 800a9b6:	699b      	ldr	r3, [r3, #24]
 800a9b8:	2b00      	cmp	r3, #0
 800a9ba:	d10b      	bne.n	800a9d4 <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800a9bc:	68bb      	ldr	r3, [r7, #8]
 800a9be:	095b      	lsrs	r3, r3, #5
 800a9c0:	68fa      	ldr	r2, [r7, #12]
 800a9c2:	8912      	ldrh	r2, [r2, #8]
 800a9c4:	4293      	cmp	r3, r2
 800a9c6:	f0c0 808d 	bcc.w	800aae4 <dir_next+0x17e>
				dp->sect = 0; return FR_NO_FILE;
 800a9ca:	687b      	ldr	r3, [r7, #4]
 800a9cc:	2200      	movs	r2, #0
 800a9ce:	61da      	str	r2, [r3, #28]
 800a9d0:	2304      	movs	r3, #4
 800a9d2:	e09a      	b.n	800ab0a <dir_next+0x1a4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800a9d4:	68fb      	ldr	r3, [r7, #12]
 800a9d6:	899b      	ldrh	r3, [r3, #12]
 800a9d8:	461a      	mov	r2, r3
 800a9da:	68bb      	ldr	r3, [r7, #8]
 800a9dc:	fbb3 f3f2 	udiv	r3, r3, r2
 800a9e0:	68fa      	ldr	r2, [r7, #12]
 800a9e2:	8952      	ldrh	r2, [r2, #10]
 800a9e4:	3a01      	subs	r2, #1
 800a9e6:	4013      	ands	r3, r2
 800a9e8:	2b00      	cmp	r3, #0
 800a9ea:	d17b      	bne.n	800aae4 <dir_next+0x17e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800a9ec:	687a      	ldr	r2, [r7, #4]
 800a9ee:	687b      	ldr	r3, [r7, #4]
 800a9f0:	699b      	ldr	r3, [r3, #24]
 800a9f2:	4619      	mov	r1, r3
 800a9f4:	4610      	mov	r0, r2
 800a9f6:	f7ff fc08 	bl	800a20a <get_fat>
 800a9fa:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800a9fc:	697b      	ldr	r3, [r7, #20]
 800a9fe:	2b01      	cmp	r3, #1
 800aa00:	d801      	bhi.n	800aa06 <dir_next+0xa0>
 800aa02:	2302      	movs	r3, #2
 800aa04:	e081      	b.n	800ab0a <dir_next+0x1a4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800aa06:	697b      	ldr	r3, [r7, #20]
 800aa08:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aa0c:	d101      	bne.n	800aa12 <dir_next+0xac>
 800aa0e:	2301      	movs	r3, #1
 800aa10:	e07b      	b.n	800ab0a <dir_next+0x1a4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800aa12:	68fb      	ldr	r3, [r7, #12]
 800aa14:	69db      	ldr	r3, [r3, #28]
 800aa16:	697a      	ldr	r2, [r7, #20]
 800aa18:	429a      	cmp	r2, r3
 800aa1a:	d359      	bcc.n	800aad0 <dir_next+0x16a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800aa1c:	683b      	ldr	r3, [r7, #0]
 800aa1e:	2b00      	cmp	r3, #0
 800aa20:	d104      	bne.n	800aa2c <dir_next+0xc6>
						dp->sect = 0; return FR_NO_FILE;
 800aa22:	687b      	ldr	r3, [r7, #4]
 800aa24:	2200      	movs	r2, #0
 800aa26:	61da      	str	r2, [r3, #28]
 800aa28:	2304      	movs	r3, #4
 800aa2a:	e06e      	b.n	800ab0a <dir_next+0x1a4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800aa2c:	687a      	ldr	r2, [r7, #4]
 800aa2e:	687b      	ldr	r3, [r7, #4]
 800aa30:	699b      	ldr	r3, [r3, #24]
 800aa32:	4619      	mov	r1, r3
 800aa34:	4610      	mov	r0, r2
 800aa36:	f7ff fe3d 	bl	800a6b4 <create_chain>
 800aa3a:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800aa3c:	697b      	ldr	r3, [r7, #20]
 800aa3e:	2b00      	cmp	r3, #0
 800aa40:	d101      	bne.n	800aa46 <dir_next+0xe0>
 800aa42:	2307      	movs	r3, #7
 800aa44:	e061      	b.n	800ab0a <dir_next+0x1a4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800aa46:	697b      	ldr	r3, [r7, #20]
 800aa48:	2b01      	cmp	r3, #1
 800aa4a:	d101      	bne.n	800aa50 <dir_next+0xea>
 800aa4c:	2302      	movs	r3, #2
 800aa4e:	e05c      	b.n	800ab0a <dir_next+0x1a4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800aa50:	697b      	ldr	r3, [r7, #20]
 800aa52:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aa56:	d101      	bne.n	800aa5c <dir_next+0xf6>
 800aa58:	2301      	movs	r3, #1
 800aa5a:	e056      	b.n	800ab0a <dir_next+0x1a4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800aa5c:	68f8      	ldr	r0, [r7, #12]
 800aa5e:	f7ff fad3 	bl	800a008 <sync_window>
 800aa62:	4603      	mov	r3, r0
 800aa64:	2b00      	cmp	r3, #0
 800aa66:	d001      	beq.n	800aa6c <dir_next+0x106>
 800aa68:	2301      	movs	r3, #1
 800aa6a:	e04e      	b.n	800ab0a <dir_next+0x1a4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800aa6c:	68fb      	ldr	r3, [r7, #12]
 800aa6e:	f103 0038 	add.w	r0, r3, #56	; 0x38
 800aa72:	68fb      	ldr	r3, [r7, #12]
 800aa74:	899b      	ldrh	r3, [r3, #12]
 800aa76:	461a      	mov	r2, r3
 800aa78:	2100      	movs	r1, #0
 800aa7a:	f7ff f8fc 	bl	8009c76 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800aa7e:	2300      	movs	r3, #0
 800aa80:	613b      	str	r3, [r7, #16]
 800aa82:	6979      	ldr	r1, [r7, #20]
 800aa84:	68f8      	ldr	r0, [r7, #12]
 800aa86:	f7ff fba1 	bl	800a1cc <clust2sect>
 800aa8a:	4602      	mov	r2, r0
 800aa8c:	68fb      	ldr	r3, [r7, #12]
 800aa8e:	635a      	str	r2, [r3, #52]	; 0x34
 800aa90:	e012      	b.n	800aab8 <dir_next+0x152>
						fs->wflag = 1;
 800aa92:	68fb      	ldr	r3, [r7, #12]
 800aa94:	2201      	movs	r2, #1
 800aa96:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800aa98:	68f8      	ldr	r0, [r7, #12]
 800aa9a:	f7ff fab5 	bl	800a008 <sync_window>
 800aa9e:	4603      	mov	r3, r0
 800aaa0:	2b00      	cmp	r3, #0
 800aaa2:	d001      	beq.n	800aaa8 <dir_next+0x142>
 800aaa4:	2301      	movs	r3, #1
 800aaa6:	e030      	b.n	800ab0a <dir_next+0x1a4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800aaa8:	693b      	ldr	r3, [r7, #16]
 800aaaa:	3301      	adds	r3, #1
 800aaac:	613b      	str	r3, [r7, #16]
 800aaae:	68fb      	ldr	r3, [r7, #12]
 800aab0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800aab2:	1c5a      	adds	r2, r3, #1
 800aab4:	68fb      	ldr	r3, [r7, #12]
 800aab6:	635a      	str	r2, [r3, #52]	; 0x34
 800aab8:	68fb      	ldr	r3, [r7, #12]
 800aaba:	895b      	ldrh	r3, [r3, #10]
 800aabc:	461a      	mov	r2, r3
 800aabe:	693b      	ldr	r3, [r7, #16]
 800aac0:	4293      	cmp	r3, r2
 800aac2:	d3e6      	bcc.n	800aa92 <dir_next+0x12c>
					}
					fs->winsect -= n;							/* Restore window offset */
 800aac4:	68fb      	ldr	r3, [r7, #12]
 800aac6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800aac8:	693b      	ldr	r3, [r7, #16]
 800aaca:	1ad2      	subs	r2, r2, r3
 800aacc:	68fb      	ldr	r3, [r7, #12]
 800aace:	635a      	str	r2, [r3, #52]	; 0x34
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800aad0:	687b      	ldr	r3, [r7, #4]
 800aad2:	697a      	ldr	r2, [r7, #20]
 800aad4:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 800aad6:	6979      	ldr	r1, [r7, #20]
 800aad8:	68f8      	ldr	r0, [r7, #12]
 800aada:	f7ff fb77 	bl	800a1cc <clust2sect>
 800aade:	4602      	mov	r2, r0
 800aae0:	687b      	ldr	r3, [r7, #4]
 800aae2:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800aae4:	687b      	ldr	r3, [r7, #4]
 800aae6:	68ba      	ldr	r2, [r7, #8]
 800aae8:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800aaea:	68fb      	ldr	r3, [r7, #12]
 800aaec:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800aaf0:	68fb      	ldr	r3, [r7, #12]
 800aaf2:	899b      	ldrh	r3, [r3, #12]
 800aaf4:	461a      	mov	r2, r3
 800aaf6:	68bb      	ldr	r3, [r7, #8]
 800aaf8:	fbb3 f0f2 	udiv	r0, r3, r2
 800aafc:	fb00 f202 	mul.w	r2, r0, r2
 800ab00:	1a9b      	subs	r3, r3, r2
 800ab02:	18ca      	adds	r2, r1, r3
 800ab04:	687b      	ldr	r3, [r7, #4]
 800ab06:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800ab08:	2300      	movs	r3, #0
}
 800ab0a:	4618      	mov	r0, r3
 800ab0c:	3718      	adds	r7, #24
 800ab0e:	46bd      	mov	sp, r7
 800ab10:	bd80      	pop	{r7, pc}

0800ab12 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800ab12:	b580      	push	{r7, lr}
 800ab14:	b086      	sub	sp, #24
 800ab16:	af00      	add	r7, sp, #0
 800ab18:	6078      	str	r0, [r7, #4]
 800ab1a:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800ab1c:	687b      	ldr	r3, [r7, #4]
 800ab1e:	681b      	ldr	r3, [r3, #0]
 800ab20:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800ab22:	2100      	movs	r1, #0
 800ab24:	6878      	ldr	r0, [r7, #4]
 800ab26:	f7ff fe95 	bl	800a854 <dir_sdi>
 800ab2a:	4603      	mov	r3, r0
 800ab2c:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800ab2e:	7dfb      	ldrb	r3, [r7, #23]
 800ab30:	2b00      	cmp	r3, #0
 800ab32:	d12b      	bne.n	800ab8c <dir_alloc+0x7a>
		n = 0;
 800ab34:	2300      	movs	r3, #0
 800ab36:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800ab38:	687b      	ldr	r3, [r7, #4]
 800ab3a:	69db      	ldr	r3, [r3, #28]
 800ab3c:	4619      	mov	r1, r3
 800ab3e:	68f8      	ldr	r0, [r7, #12]
 800ab40:	f7ff faa6 	bl	800a090 <move_window>
 800ab44:	4603      	mov	r3, r0
 800ab46:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800ab48:	7dfb      	ldrb	r3, [r7, #23]
 800ab4a:	2b00      	cmp	r3, #0
 800ab4c:	d11d      	bne.n	800ab8a <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800ab4e:	687b      	ldr	r3, [r7, #4]
 800ab50:	6a1b      	ldr	r3, [r3, #32]
 800ab52:	781b      	ldrb	r3, [r3, #0]
 800ab54:	2be5      	cmp	r3, #229	; 0xe5
 800ab56:	d004      	beq.n	800ab62 <dir_alloc+0x50>
 800ab58:	687b      	ldr	r3, [r7, #4]
 800ab5a:	6a1b      	ldr	r3, [r3, #32]
 800ab5c:	781b      	ldrb	r3, [r3, #0]
 800ab5e:	2b00      	cmp	r3, #0
 800ab60:	d107      	bne.n	800ab72 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800ab62:	693b      	ldr	r3, [r7, #16]
 800ab64:	3301      	adds	r3, #1
 800ab66:	613b      	str	r3, [r7, #16]
 800ab68:	693a      	ldr	r2, [r7, #16]
 800ab6a:	683b      	ldr	r3, [r7, #0]
 800ab6c:	429a      	cmp	r2, r3
 800ab6e:	d102      	bne.n	800ab76 <dir_alloc+0x64>
 800ab70:	e00c      	b.n	800ab8c <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800ab72:	2300      	movs	r3, #0
 800ab74:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800ab76:	2101      	movs	r1, #1
 800ab78:	6878      	ldr	r0, [r7, #4]
 800ab7a:	f7ff fef4 	bl	800a966 <dir_next>
 800ab7e:	4603      	mov	r3, r0
 800ab80:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800ab82:	7dfb      	ldrb	r3, [r7, #23]
 800ab84:	2b00      	cmp	r3, #0
 800ab86:	d0d7      	beq.n	800ab38 <dir_alloc+0x26>
 800ab88:	e000      	b.n	800ab8c <dir_alloc+0x7a>
			if (res != FR_OK) break;
 800ab8a:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800ab8c:	7dfb      	ldrb	r3, [r7, #23]
 800ab8e:	2b04      	cmp	r3, #4
 800ab90:	d101      	bne.n	800ab96 <dir_alloc+0x84>
 800ab92:	2307      	movs	r3, #7
 800ab94:	75fb      	strb	r3, [r7, #23]
	return res;
 800ab96:	7dfb      	ldrb	r3, [r7, #23]
}
 800ab98:	4618      	mov	r0, r3
 800ab9a:	3718      	adds	r7, #24
 800ab9c:	46bd      	mov	sp, r7
 800ab9e:	bd80      	pop	{r7, pc}

0800aba0 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800aba0:	b580      	push	{r7, lr}
 800aba2:	b084      	sub	sp, #16
 800aba4:	af00      	add	r7, sp, #0
 800aba6:	6078      	str	r0, [r7, #4]
 800aba8:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800abaa:	683b      	ldr	r3, [r7, #0]
 800abac:	331a      	adds	r3, #26
 800abae:	4618      	mov	r0, r3
 800abb0:	f7fe ffbe 	bl	8009b30 <ld_word>
 800abb4:	4603      	mov	r3, r0
 800abb6:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800abb8:	687b      	ldr	r3, [r7, #4]
 800abba:	781b      	ldrb	r3, [r3, #0]
 800abbc:	2b03      	cmp	r3, #3
 800abbe:	d109      	bne.n	800abd4 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800abc0:	683b      	ldr	r3, [r7, #0]
 800abc2:	3314      	adds	r3, #20
 800abc4:	4618      	mov	r0, r3
 800abc6:	f7fe ffb3 	bl	8009b30 <ld_word>
 800abca:	4603      	mov	r3, r0
 800abcc:	041b      	lsls	r3, r3, #16
 800abce:	68fa      	ldr	r2, [r7, #12]
 800abd0:	4313      	orrs	r3, r2
 800abd2:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800abd4:	68fb      	ldr	r3, [r7, #12]
}
 800abd6:	4618      	mov	r0, r3
 800abd8:	3710      	adds	r7, #16
 800abda:	46bd      	mov	sp, r7
 800abdc:	bd80      	pop	{r7, pc}

0800abde <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800abde:	b580      	push	{r7, lr}
 800abe0:	b084      	sub	sp, #16
 800abe2:	af00      	add	r7, sp, #0
 800abe4:	60f8      	str	r0, [r7, #12]
 800abe6:	60b9      	str	r1, [r7, #8]
 800abe8:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800abea:	68bb      	ldr	r3, [r7, #8]
 800abec:	331a      	adds	r3, #26
 800abee:	687a      	ldr	r2, [r7, #4]
 800abf0:	b292      	uxth	r2, r2
 800abf2:	4611      	mov	r1, r2
 800abf4:	4618      	mov	r0, r3
 800abf6:	f7fe ffd6 	bl	8009ba6 <st_word>
	if (fs->fs_type == FS_FAT32) {
 800abfa:	68fb      	ldr	r3, [r7, #12]
 800abfc:	781b      	ldrb	r3, [r3, #0]
 800abfe:	2b03      	cmp	r3, #3
 800ac00:	d109      	bne.n	800ac16 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800ac02:	68bb      	ldr	r3, [r7, #8]
 800ac04:	f103 0214 	add.w	r2, r3, #20
 800ac08:	687b      	ldr	r3, [r7, #4]
 800ac0a:	0c1b      	lsrs	r3, r3, #16
 800ac0c:	b29b      	uxth	r3, r3
 800ac0e:	4619      	mov	r1, r3
 800ac10:	4610      	mov	r0, r2
 800ac12:	f7fe ffc8 	bl	8009ba6 <st_word>
	}
}
 800ac16:	bf00      	nop
 800ac18:	3710      	adds	r7, #16
 800ac1a:	46bd      	mov	sp, r7
 800ac1c:	bd80      	pop	{r7, pc}
	...

0800ac20 <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 800ac20:	b590      	push	{r4, r7, lr}
 800ac22:	b087      	sub	sp, #28
 800ac24:	af00      	add	r7, sp, #0
 800ac26:	6078      	str	r0, [r7, #4]
 800ac28:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 800ac2a:	683b      	ldr	r3, [r7, #0]
 800ac2c:	331a      	adds	r3, #26
 800ac2e:	4618      	mov	r0, r3
 800ac30:	f7fe ff7e 	bl	8009b30 <ld_word>
 800ac34:	4603      	mov	r3, r0
 800ac36:	2b00      	cmp	r3, #0
 800ac38:	d001      	beq.n	800ac3e <cmp_lfn+0x1e>
 800ac3a:	2300      	movs	r3, #0
 800ac3c:	e059      	b.n	800acf2 <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 800ac3e:	683b      	ldr	r3, [r7, #0]
 800ac40:	781b      	ldrb	r3, [r3, #0]
 800ac42:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800ac46:	1e5a      	subs	r2, r3, #1
 800ac48:	4613      	mov	r3, r2
 800ac4a:	005b      	lsls	r3, r3, #1
 800ac4c:	4413      	add	r3, r2
 800ac4e:	009b      	lsls	r3, r3, #2
 800ac50:	4413      	add	r3, r2
 800ac52:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800ac54:	2301      	movs	r3, #1
 800ac56:	81fb      	strh	r3, [r7, #14]
 800ac58:	2300      	movs	r3, #0
 800ac5a:	613b      	str	r3, [r7, #16]
 800ac5c:	e033      	b.n	800acc6 <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 800ac5e:	4a27      	ldr	r2, [pc, #156]	; (800acfc <cmp_lfn+0xdc>)
 800ac60:	693b      	ldr	r3, [r7, #16]
 800ac62:	4413      	add	r3, r2
 800ac64:	781b      	ldrb	r3, [r3, #0]
 800ac66:	461a      	mov	r2, r3
 800ac68:	683b      	ldr	r3, [r7, #0]
 800ac6a:	4413      	add	r3, r2
 800ac6c:	4618      	mov	r0, r3
 800ac6e:	f7fe ff5f 	bl	8009b30 <ld_word>
 800ac72:	4603      	mov	r3, r0
 800ac74:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 800ac76:	89fb      	ldrh	r3, [r7, #14]
 800ac78:	2b00      	cmp	r3, #0
 800ac7a:	d01a      	beq.n	800acb2 <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 800ac7c:	697b      	ldr	r3, [r7, #20]
 800ac7e:	2bfe      	cmp	r3, #254	; 0xfe
 800ac80:	d812      	bhi.n	800aca8 <cmp_lfn+0x88>
 800ac82:	89bb      	ldrh	r3, [r7, #12]
 800ac84:	4618      	mov	r0, r3
 800ac86:	f001 fd75 	bl	800c774 <ff_wtoupper>
 800ac8a:	4603      	mov	r3, r0
 800ac8c:	461c      	mov	r4, r3
 800ac8e:	697b      	ldr	r3, [r7, #20]
 800ac90:	1c5a      	adds	r2, r3, #1
 800ac92:	617a      	str	r2, [r7, #20]
 800ac94:	005b      	lsls	r3, r3, #1
 800ac96:	687a      	ldr	r2, [r7, #4]
 800ac98:	4413      	add	r3, r2
 800ac9a:	881b      	ldrh	r3, [r3, #0]
 800ac9c:	4618      	mov	r0, r3
 800ac9e:	f001 fd69 	bl	800c774 <ff_wtoupper>
 800aca2:	4603      	mov	r3, r0
 800aca4:	429c      	cmp	r4, r3
 800aca6:	d001      	beq.n	800acac <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 800aca8:	2300      	movs	r3, #0
 800acaa:	e022      	b.n	800acf2 <cmp_lfn+0xd2>
			}
			wc = uc;
 800acac:	89bb      	ldrh	r3, [r7, #12]
 800acae:	81fb      	strh	r3, [r7, #14]
 800acb0:	e006      	b.n	800acc0 <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800acb2:	89bb      	ldrh	r3, [r7, #12]
 800acb4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800acb8:	4293      	cmp	r3, r2
 800acba:	d001      	beq.n	800acc0 <cmp_lfn+0xa0>
 800acbc:	2300      	movs	r3, #0
 800acbe:	e018      	b.n	800acf2 <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800acc0:	693b      	ldr	r3, [r7, #16]
 800acc2:	3301      	adds	r3, #1
 800acc4:	613b      	str	r3, [r7, #16]
 800acc6:	693b      	ldr	r3, [r7, #16]
 800acc8:	2b0c      	cmp	r3, #12
 800acca:	d9c8      	bls.n	800ac5e <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 800accc:	683b      	ldr	r3, [r7, #0]
 800acce:	781b      	ldrb	r3, [r3, #0]
 800acd0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800acd4:	2b00      	cmp	r3, #0
 800acd6:	d00b      	beq.n	800acf0 <cmp_lfn+0xd0>
 800acd8:	89fb      	ldrh	r3, [r7, #14]
 800acda:	2b00      	cmp	r3, #0
 800acdc:	d008      	beq.n	800acf0 <cmp_lfn+0xd0>
 800acde:	697b      	ldr	r3, [r7, #20]
 800ace0:	005b      	lsls	r3, r3, #1
 800ace2:	687a      	ldr	r2, [r7, #4]
 800ace4:	4413      	add	r3, r2
 800ace6:	881b      	ldrh	r3, [r3, #0]
 800ace8:	2b00      	cmp	r3, #0
 800acea:	d001      	beq.n	800acf0 <cmp_lfn+0xd0>
 800acec:	2300      	movs	r3, #0
 800acee:	e000      	b.n	800acf2 <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 800acf0:	2301      	movs	r3, #1
}
 800acf2:	4618      	mov	r0, r3
 800acf4:	371c      	adds	r7, #28
 800acf6:	46bd      	mov	sp, r7
 800acf8:	bd90      	pop	{r4, r7, pc}
 800acfa:	bf00      	nop
 800acfc:	0800d36c 	.word	0x0800d36c

0800ad00 <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 800ad00:	b580      	push	{r7, lr}
 800ad02:	b088      	sub	sp, #32
 800ad04:	af00      	add	r7, sp, #0
 800ad06:	60f8      	str	r0, [r7, #12]
 800ad08:	60b9      	str	r1, [r7, #8]
 800ad0a:	4611      	mov	r1, r2
 800ad0c:	461a      	mov	r2, r3
 800ad0e:	460b      	mov	r3, r1
 800ad10:	71fb      	strb	r3, [r7, #7]
 800ad12:	4613      	mov	r3, r2
 800ad14:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 800ad16:	68bb      	ldr	r3, [r7, #8]
 800ad18:	330d      	adds	r3, #13
 800ad1a:	79ba      	ldrb	r2, [r7, #6]
 800ad1c:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 800ad1e:	68bb      	ldr	r3, [r7, #8]
 800ad20:	330b      	adds	r3, #11
 800ad22:	220f      	movs	r2, #15
 800ad24:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 800ad26:	68bb      	ldr	r3, [r7, #8]
 800ad28:	330c      	adds	r3, #12
 800ad2a:	2200      	movs	r2, #0
 800ad2c:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 800ad2e:	68bb      	ldr	r3, [r7, #8]
 800ad30:	331a      	adds	r3, #26
 800ad32:	2100      	movs	r1, #0
 800ad34:	4618      	mov	r0, r3
 800ad36:	f7fe ff36 	bl	8009ba6 <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 800ad3a:	79fb      	ldrb	r3, [r7, #7]
 800ad3c:	1e5a      	subs	r2, r3, #1
 800ad3e:	4613      	mov	r3, r2
 800ad40:	005b      	lsls	r3, r3, #1
 800ad42:	4413      	add	r3, r2
 800ad44:	009b      	lsls	r3, r3, #2
 800ad46:	4413      	add	r3, r2
 800ad48:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 800ad4a:	2300      	movs	r3, #0
 800ad4c:	82fb      	strh	r3, [r7, #22]
 800ad4e:	2300      	movs	r3, #0
 800ad50:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 800ad52:	8afb      	ldrh	r3, [r7, #22]
 800ad54:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ad58:	4293      	cmp	r3, r2
 800ad5a:	d007      	beq.n	800ad6c <put_lfn+0x6c>
 800ad5c:	69fb      	ldr	r3, [r7, #28]
 800ad5e:	1c5a      	adds	r2, r3, #1
 800ad60:	61fa      	str	r2, [r7, #28]
 800ad62:	005b      	lsls	r3, r3, #1
 800ad64:	68fa      	ldr	r2, [r7, #12]
 800ad66:	4413      	add	r3, r2
 800ad68:	881b      	ldrh	r3, [r3, #0]
 800ad6a:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 800ad6c:	4a17      	ldr	r2, [pc, #92]	; (800adcc <put_lfn+0xcc>)
 800ad6e:	69bb      	ldr	r3, [r7, #24]
 800ad70:	4413      	add	r3, r2
 800ad72:	781b      	ldrb	r3, [r3, #0]
 800ad74:	461a      	mov	r2, r3
 800ad76:	68bb      	ldr	r3, [r7, #8]
 800ad78:	4413      	add	r3, r2
 800ad7a:	8afa      	ldrh	r2, [r7, #22]
 800ad7c:	4611      	mov	r1, r2
 800ad7e:	4618      	mov	r0, r3
 800ad80:	f7fe ff11 	bl	8009ba6 <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 800ad84:	8afb      	ldrh	r3, [r7, #22]
 800ad86:	2b00      	cmp	r3, #0
 800ad88:	d102      	bne.n	800ad90 <put_lfn+0x90>
 800ad8a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800ad8e:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 800ad90:	69bb      	ldr	r3, [r7, #24]
 800ad92:	3301      	adds	r3, #1
 800ad94:	61bb      	str	r3, [r7, #24]
 800ad96:	69bb      	ldr	r3, [r7, #24]
 800ad98:	2b0c      	cmp	r3, #12
 800ad9a:	d9da      	bls.n	800ad52 <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 800ad9c:	8afb      	ldrh	r3, [r7, #22]
 800ad9e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ada2:	4293      	cmp	r3, r2
 800ada4:	d006      	beq.n	800adb4 <put_lfn+0xb4>
 800ada6:	69fb      	ldr	r3, [r7, #28]
 800ada8:	005b      	lsls	r3, r3, #1
 800adaa:	68fa      	ldr	r2, [r7, #12]
 800adac:	4413      	add	r3, r2
 800adae:	881b      	ldrh	r3, [r3, #0]
 800adb0:	2b00      	cmp	r3, #0
 800adb2:	d103      	bne.n	800adbc <put_lfn+0xbc>
 800adb4:	79fb      	ldrb	r3, [r7, #7]
 800adb6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800adba:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 800adbc:	68bb      	ldr	r3, [r7, #8]
 800adbe:	79fa      	ldrb	r2, [r7, #7]
 800adc0:	701a      	strb	r2, [r3, #0]
}
 800adc2:	bf00      	nop
 800adc4:	3720      	adds	r7, #32
 800adc6:	46bd      	mov	sp, r7
 800adc8:	bd80      	pop	{r7, pc}
 800adca:	bf00      	nop
 800adcc:	0800d36c 	.word	0x0800d36c

0800add0 <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 800add0:	b580      	push	{r7, lr}
 800add2:	b08c      	sub	sp, #48	; 0x30
 800add4:	af00      	add	r7, sp, #0
 800add6:	60f8      	str	r0, [r7, #12]
 800add8:	60b9      	str	r1, [r7, #8]
 800adda:	607a      	str	r2, [r7, #4]
 800addc:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 800adde:	220b      	movs	r2, #11
 800ade0:	68b9      	ldr	r1, [r7, #8]
 800ade2:	68f8      	ldr	r0, [r7, #12]
 800ade4:	f7fe ff26 	bl	8009c34 <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 800ade8:	683b      	ldr	r3, [r7, #0]
 800adea:	2b05      	cmp	r3, #5
 800adec:	d92b      	bls.n	800ae46 <gen_numname+0x76>
		sr = seq;
 800adee:	683b      	ldr	r3, [r7, #0]
 800adf0:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 800adf2:	e022      	b.n	800ae3a <gen_numname+0x6a>
			wc = *lfn++;
 800adf4:	687b      	ldr	r3, [r7, #4]
 800adf6:	1c9a      	adds	r2, r3, #2
 800adf8:	607a      	str	r2, [r7, #4]
 800adfa:	881b      	ldrh	r3, [r3, #0]
 800adfc:	847b      	strh	r3, [r7, #34]	; 0x22
			for (i = 0; i < 16; i++) {
 800adfe:	2300      	movs	r3, #0
 800ae00:	62bb      	str	r3, [r7, #40]	; 0x28
 800ae02:	e017      	b.n	800ae34 <gen_numname+0x64>
				sr = (sr << 1) + (wc & 1);
 800ae04:	69fb      	ldr	r3, [r7, #28]
 800ae06:	005a      	lsls	r2, r3, #1
 800ae08:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800ae0a:	f003 0301 	and.w	r3, r3, #1
 800ae0e:	4413      	add	r3, r2
 800ae10:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 800ae12:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800ae14:	085b      	lsrs	r3, r3, #1
 800ae16:	847b      	strh	r3, [r7, #34]	; 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 800ae18:	69fb      	ldr	r3, [r7, #28]
 800ae1a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800ae1e:	2b00      	cmp	r3, #0
 800ae20:	d005      	beq.n	800ae2e <gen_numname+0x5e>
 800ae22:	69fb      	ldr	r3, [r7, #28]
 800ae24:	f483 3388 	eor.w	r3, r3, #69632	; 0x11000
 800ae28:	f083 0321 	eor.w	r3, r3, #33	; 0x21
 800ae2c:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 800ae2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae30:	3301      	adds	r3, #1
 800ae32:	62bb      	str	r3, [r7, #40]	; 0x28
 800ae34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae36:	2b0f      	cmp	r3, #15
 800ae38:	d9e4      	bls.n	800ae04 <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 800ae3a:	687b      	ldr	r3, [r7, #4]
 800ae3c:	881b      	ldrh	r3, [r3, #0]
 800ae3e:	2b00      	cmp	r3, #0
 800ae40:	d1d8      	bne.n	800adf4 <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 800ae42:	69fb      	ldr	r3, [r7, #28]
 800ae44:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 800ae46:	2307      	movs	r3, #7
 800ae48:	62bb      	str	r3, [r7, #40]	; 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 800ae4a:	683b      	ldr	r3, [r7, #0]
 800ae4c:	b2db      	uxtb	r3, r3
 800ae4e:	f003 030f 	and.w	r3, r3, #15
 800ae52:	b2db      	uxtb	r3, r3
 800ae54:	3330      	adds	r3, #48	; 0x30
 800ae56:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (c > '9') c += 7;
 800ae5a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800ae5e:	2b39      	cmp	r3, #57	; 0x39
 800ae60:	d904      	bls.n	800ae6c <gen_numname+0x9c>
 800ae62:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800ae66:	3307      	adds	r3, #7
 800ae68:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		ns[i--] = c;
 800ae6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae6e:	1e5a      	subs	r2, r3, #1
 800ae70:	62ba      	str	r2, [r7, #40]	; 0x28
 800ae72:	3330      	adds	r3, #48	; 0x30
 800ae74:	443b      	add	r3, r7
 800ae76:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800ae7a:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 800ae7e:	683b      	ldr	r3, [r7, #0]
 800ae80:	091b      	lsrs	r3, r3, #4
 800ae82:	603b      	str	r3, [r7, #0]
	} while (seq);
 800ae84:	683b      	ldr	r3, [r7, #0]
 800ae86:	2b00      	cmp	r3, #0
 800ae88:	d1df      	bne.n	800ae4a <gen_numname+0x7a>
	ns[i] = '~';
 800ae8a:	f107 0214 	add.w	r2, r7, #20
 800ae8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae90:	4413      	add	r3, r2
 800ae92:	227e      	movs	r2, #126	; 0x7e
 800ae94:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 800ae96:	2300      	movs	r3, #0
 800ae98:	627b      	str	r3, [r7, #36]	; 0x24
 800ae9a:	e002      	b.n	800aea2 <gen_numname+0xd2>
 800ae9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae9e:	3301      	adds	r3, #1
 800aea0:	627b      	str	r3, [r7, #36]	; 0x24
 800aea2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800aea4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aea6:	429a      	cmp	r2, r3
 800aea8:	d205      	bcs.n	800aeb6 <gen_numname+0xe6>
 800aeaa:	68fa      	ldr	r2, [r7, #12]
 800aeac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aeae:	4413      	add	r3, r2
 800aeb0:	781b      	ldrb	r3, [r3, #0]
 800aeb2:	2b20      	cmp	r3, #32
 800aeb4:	d1f2      	bne.n	800ae9c <gen_numname+0xcc>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 800aeb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aeb8:	2b07      	cmp	r3, #7
 800aeba:	d807      	bhi.n	800aecc <gen_numname+0xfc>
 800aebc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aebe:	1c5a      	adds	r2, r3, #1
 800aec0:	62ba      	str	r2, [r7, #40]	; 0x28
 800aec2:	3330      	adds	r3, #48	; 0x30
 800aec4:	443b      	add	r3, r7
 800aec6:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 800aeca:	e000      	b.n	800aece <gen_numname+0xfe>
 800aecc:	2120      	movs	r1, #32
 800aece:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aed0:	1c5a      	adds	r2, r3, #1
 800aed2:	627a      	str	r2, [r7, #36]	; 0x24
 800aed4:	68fa      	ldr	r2, [r7, #12]
 800aed6:	4413      	add	r3, r2
 800aed8:	460a      	mov	r2, r1
 800aeda:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 800aedc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aede:	2b07      	cmp	r3, #7
 800aee0:	d9e9      	bls.n	800aeb6 <gen_numname+0xe6>
}
 800aee2:	bf00      	nop
 800aee4:	bf00      	nop
 800aee6:	3730      	adds	r7, #48	; 0x30
 800aee8:	46bd      	mov	sp, r7
 800aeea:	bd80      	pop	{r7, pc}

0800aeec <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 800aeec:	b480      	push	{r7}
 800aeee:	b085      	sub	sp, #20
 800aef0:	af00      	add	r7, sp, #0
 800aef2:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 800aef4:	2300      	movs	r3, #0
 800aef6:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 800aef8:	230b      	movs	r3, #11
 800aefa:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 800aefc:	7bfb      	ldrb	r3, [r7, #15]
 800aefe:	b2da      	uxtb	r2, r3
 800af00:	0852      	lsrs	r2, r2, #1
 800af02:	01db      	lsls	r3, r3, #7
 800af04:	4313      	orrs	r3, r2
 800af06:	b2da      	uxtb	r2, r3
 800af08:	687b      	ldr	r3, [r7, #4]
 800af0a:	1c59      	adds	r1, r3, #1
 800af0c:	6079      	str	r1, [r7, #4]
 800af0e:	781b      	ldrb	r3, [r3, #0]
 800af10:	4413      	add	r3, r2
 800af12:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 800af14:	68bb      	ldr	r3, [r7, #8]
 800af16:	3b01      	subs	r3, #1
 800af18:	60bb      	str	r3, [r7, #8]
 800af1a:	68bb      	ldr	r3, [r7, #8]
 800af1c:	2b00      	cmp	r3, #0
 800af1e:	d1ed      	bne.n	800aefc <sum_sfn+0x10>
	return sum;
 800af20:	7bfb      	ldrb	r3, [r7, #15]
}
 800af22:	4618      	mov	r0, r3
 800af24:	3714      	adds	r7, #20
 800af26:	46bd      	mov	sp, r7
 800af28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af2c:	4770      	bx	lr

0800af2e <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800af2e:	b580      	push	{r7, lr}
 800af30:	b086      	sub	sp, #24
 800af32:	af00      	add	r7, sp, #0
 800af34:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800af36:	687b      	ldr	r3, [r7, #4]
 800af38:	681b      	ldr	r3, [r3, #0]
 800af3a:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800af3c:	2100      	movs	r1, #0
 800af3e:	6878      	ldr	r0, [r7, #4]
 800af40:	f7ff fc88 	bl	800a854 <dir_sdi>
 800af44:	4603      	mov	r3, r0
 800af46:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800af48:	7dfb      	ldrb	r3, [r7, #23]
 800af4a:	2b00      	cmp	r3, #0
 800af4c:	d001      	beq.n	800af52 <dir_find+0x24>
 800af4e:	7dfb      	ldrb	r3, [r7, #23]
 800af50:	e0a9      	b.n	800b0a6 <dir_find+0x178>
		return res;
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800af52:	23ff      	movs	r3, #255	; 0xff
 800af54:	753b      	strb	r3, [r7, #20]
 800af56:	7d3b      	ldrb	r3, [r7, #20]
 800af58:	757b      	strb	r3, [r7, #21]
 800af5a:	687b      	ldr	r3, [r7, #4]
 800af5c:	f04f 32ff 	mov.w	r2, #4294967295
 800af60:	631a      	str	r2, [r3, #48]	; 0x30
#endif
	do {
		res = move_window(fs, dp->sect);
 800af62:	687b      	ldr	r3, [r7, #4]
 800af64:	69db      	ldr	r3, [r3, #28]
 800af66:	4619      	mov	r1, r3
 800af68:	6938      	ldr	r0, [r7, #16]
 800af6a:	f7ff f891 	bl	800a090 <move_window>
 800af6e:	4603      	mov	r3, r0
 800af70:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800af72:	7dfb      	ldrb	r3, [r7, #23]
 800af74:	2b00      	cmp	r3, #0
 800af76:	f040 8090 	bne.w	800b09a <dir_find+0x16c>
		c = dp->dir[DIR_Name];
 800af7a:	687b      	ldr	r3, [r7, #4]
 800af7c:	6a1b      	ldr	r3, [r3, #32]
 800af7e:	781b      	ldrb	r3, [r3, #0]
 800af80:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800af82:	7dbb      	ldrb	r3, [r7, #22]
 800af84:	2b00      	cmp	r3, #0
 800af86:	d102      	bne.n	800af8e <dir_find+0x60>
 800af88:	2304      	movs	r3, #4
 800af8a:	75fb      	strb	r3, [r7, #23]
 800af8c:	e08a      	b.n	800b0a4 <dir_find+0x176>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 800af8e:	687b      	ldr	r3, [r7, #4]
 800af90:	6a1b      	ldr	r3, [r3, #32]
 800af92:	330b      	adds	r3, #11
 800af94:	781b      	ldrb	r3, [r3, #0]
 800af96:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800af9a:	73fb      	strb	r3, [r7, #15]
 800af9c:	687b      	ldr	r3, [r7, #4]
 800af9e:	7bfa      	ldrb	r2, [r7, #15]
 800afa0:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 800afa2:	7dbb      	ldrb	r3, [r7, #22]
 800afa4:	2be5      	cmp	r3, #229	; 0xe5
 800afa6:	d007      	beq.n	800afb8 <dir_find+0x8a>
 800afa8:	7bfb      	ldrb	r3, [r7, #15]
 800afaa:	f003 0308 	and.w	r3, r3, #8
 800afae:	2b00      	cmp	r3, #0
 800afb0:	d009      	beq.n	800afc6 <dir_find+0x98>
 800afb2:	7bfb      	ldrb	r3, [r7, #15]
 800afb4:	2b0f      	cmp	r3, #15
 800afb6:	d006      	beq.n	800afc6 <dir_find+0x98>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800afb8:	23ff      	movs	r3, #255	; 0xff
 800afba:	757b      	strb	r3, [r7, #21]
 800afbc:	687b      	ldr	r3, [r7, #4]
 800afbe:	f04f 32ff 	mov.w	r2, #4294967295
 800afc2:	631a      	str	r2, [r3, #48]	; 0x30
 800afc4:	e05e      	b.n	800b084 <dir_find+0x156>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 800afc6:	7bfb      	ldrb	r3, [r7, #15]
 800afc8:	2b0f      	cmp	r3, #15
 800afca:	d136      	bne.n	800b03a <dir_find+0x10c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 800afcc:	687b      	ldr	r3, [r7, #4]
 800afce:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800afd2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800afd6:	2b00      	cmp	r3, #0
 800afd8:	d154      	bne.n	800b084 <dir_find+0x156>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 800afda:	7dbb      	ldrb	r3, [r7, #22]
 800afdc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800afe0:	2b00      	cmp	r3, #0
 800afe2:	d00d      	beq.n	800b000 <dir_find+0xd2>
						sum = dp->dir[LDIR_Chksum];
 800afe4:	687b      	ldr	r3, [r7, #4]
 800afe6:	6a1b      	ldr	r3, [r3, #32]
 800afe8:	7b5b      	ldrb	r3, [r3, #13]
 800afea:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 800afec:	7dbb      	ldrb	r3, [r7, #22]
 800afee:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800aff2:	75bb      	strb	r3, [r7, #22]
 800aff4:	7dbb      	ldrb	r3, [r7, #22]
 800aff6:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 800aff8:	687b      	ldr	r3, [r7, #4]
 800affa:	695a      	ldr	r2, [r3, #20]
 800affc:	687b      	ldr	r3, [r7, #4]
 800affe:	631a      	str	r2, [r3, #48]	; 0x30
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800b000:	7dba      	ldrb	r2, [r7, #22]
 800b002:	7d7b      	ldrb	r3, [r7, #21]
 800b004:	429a      	cmp	r2, r3
 800b006:	d115      	bne.n	800b034 <dir_find+0x106>
 800b008:	687b      	ldr	r3, [r7, #4]
 800b00a:	6a1b      	ldr	r3, [r3, #32]
 800b00c:	330d      	adds	r3, #13
 800b00e:	781b      	ldrb	r3, [r3, #0]
 800b010:	7d3a      	ldrb	r2, [r7, #20]
 800b012:	429a      	cmp	r2, r3
 800b014:	d10e      	bne.n	800b034 <dir_find+0x106>
 800b016:	693b      	ldr	r3, [r7, #16]
 800b018:	691a      	ldr	r2, [r3, #16]
 800b01a:	687b      	ldr	r3, [r7, #4]
 800b01c:	6a1b      	ldr	r3, [r3, #32]
 800b01e:	4619      	mov	r1, r3
 800b020:	4610      	mov	r0, r2
 800b022:	f7ff fdfd 	bl	800ac20 <cmp_lfn>
 800b026:	4603      	mov	r3, r0
 800b028:	2b00      	cmp	r3, #0
 800b02a:	d003      	beq.n	800b034 <dir_find+0x106>
 800b02c:	7d7b      	ldrb	r3, [r7, #21]
 800b02e:	3b01      	subs	r3, #1
 800b030:	b2db      	uxtb	r3, r3
 800b032:	e000      	b.n	800b036 <dir_find+0x108>
 800b034:	23ff      	movs	r3, #255	; 0xff
 800b036:	757b      	strb	r3, [r7, #21]
 800b038:	e024      	b.n	800b084 <dir_find+0x156>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800b03a:	7d7b      	ldrb	r3, [r7, #21]
 800b03c:	2b00      	cmp	r3, #0
 800b03e:	d109      	bne.n	800b054 <dir_find+0x126>
 800b040:	687b      	ldr	r3, [r7, #4]
 800b042:	6a1b      	ldr	r3, [r3, #32]
 800b044:	4618      	mov	r0, r3
 800b046:	f7ff ff51 	bl	800aeec <sum_sfn>
 800b04a:	4603      	mov	r3, r0
 800b04c:	461a      	mov	r2, r3
 800b04e:	7d3b      	ldrb	r3, [r7, #20]
 800b050:	4293      	cmp	r3, r2
 800b052:	d024      	beq.n	800b09e <dir_find+0x170>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800b054:	687b      	ldr	r3, [r7, #4]
 800b056:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800b05a:	f003 0301 	and.w	r3, r3, #1
 800b05e:	2b00      	cmp	r3, #0
 800b060:	d10a      	bne.n	800b078 <dir_find+0x14a>
 800b062:	687b      	ldr	r3, [r7, #4]
 800b064:	6a18      	ldr	r0, [r3, #32]
 800b066:	687b      	ldr	r3, [r7, #4]
 800b068:	3324      	adds	r3, #36	; 0x24
 800b06a:	220b      	movs	r2, #11
 800b06c:	4619      	mov	r1, r3
 800b06e:	f7fe fe1d 	bl	8009cac <mem_cmp>
 800b072:	4603      	mov	r3, r0
 800b074:	2b00      	cmp	r3, #0
 800b076:	d014      	beq.n	800b0a2 <dir_find+0x174>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800b078:	23ff      	movs	r3, #255	; 0xff
 800b07a:	757b      	strb	r3, [r7, #21]
 800b07c:	687b      	ldr	r3, [r7, #4]
 800b07e:	f04f 32ff 	mov.w	r2, #4294967295
 800b082:	631a      	str	r2, [r3, #48]	; 0x30
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800b084:	2100      	movs	r1, #0
 800b086:	6878      	ldr	r0, [r7, #4]
 800b088:	f7ff fc6d 	bl	800a966 <dir_next>
 800b08c:	4603      	mov	r3, r0
 800b08e:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800b090:	7dfb      	ldrb	r3, [r7, #23]
 800b092:	2b00      	cmp	r3, #0
 800b094:	f43f af65 	beq.w	800af62 <dir_find+0x34>
 800b098:	e004      	b.n	800b0a4 <dir_find+0x176>
		if (res != FR_OK) break;
 800b09a:	bf00      	nop
 800b09c:	e002      	b.n	800b0a4 <dir_find+0x176>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800b09e:	bf00      	nop
 800b0a0:	e000      	b.n	800b0a4 <dir_find+0x176>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800b0a2:	bf00      	nop

	return res;
 800b0a4:	7dfb      	ldrb	r3, [r7, #23]
}
 800b0a6:	4618      	mov	r0, r3
 800b0a8:	3718      	adds	r7, #24
 800b0aa:	46bd      	mov	sp, r7
 800b0ac:	bd80      	pop	{r7, pc}
	...

0800b0b0 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800b0b0:	b580      	push	{r7, lr}
 800b0b2:	b08c      	sub	sp, #48	; 0x30
 800b0b4:	af00      	add	r7, sp, #0
 800b0b6:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800b0b8:	687b      	ldr	r3, [r7, #4]
 800b0ba:	681b      	ldr	r3, [r3, #0]
 800b0bc:	61fb      	str	r3, [r7, #28]
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 800b0be:	687b      	ldr	r3, [r7, #4]
 800b0c0:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800b0c4:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 800b0c8:	2b00      	cmp	r3, #0
 800b0ca:	d001      	beq.n	800b0d0 <dir_register+0x20>
 800b0cc:	2306      	movs	r3, #6
 800b0ce:	e0e0      	b.n	800b292 <dir_register+0x1e2>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 800b0d0:	2300      	movs	r3, #0
 800b0d2:	627b      	str	r3, [r7, #36]	; 0x24
 800b0d4:	e002      	b.n	800b0dc <dir_register+0x2c>
 800b0d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b0d8:	3301      	adds	r3, #1
 800b0da:	627b      	str	r3, [r7, #36]	; 0x24
 800b0dc:	69fb      	ldr	r3, [r7, #28]
 800b0de:	691a      	ldr	r2, [r3, #16]
 800b0e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b0e2:	005b      	lsls	r3, r3, #1
 800b0e4:	4413      	add	r3, r2
 800b0e6:	881b      	ldrh	r3, [r3, #0]
 800b0e8:	2b00      	cmp	r3, #0
 800b0ea:	d1f4      	bne.n	800b0d6 <dir_register+0x26>
		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
		return FR_OK;
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 800b0ec:	687b      	ldr	r3, [r7, #4]
 800b0ee:	f103 0124 	add.w	r1, r3, #36	; 0x24
 800b0f2:	f107 030c 	add.w	r3, r7, #12
 800b0f6:	220c      	movs	r2, #12
 800b0f8:	4618      	mov	r0, r3
 800b0fa:	f7fe fd9b 	bl	8009c34 <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 800b0fe:	7dfb      	ldrb	r3, [r7, #23]
 800b100:	f003 0301 	and.w	r3, r3, #1
 800b104:	2b00      	cmp	r3, #0
 800b106:	d032      	beq.n	800b16e <dir_register+0xbe>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 800b108:	687b      	ldr	r3, [r7, #4]
 800b10a:	2240      	movs	r2, #64	; 0x40
 800b10c:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		for (n = 1; n < 100; n++) {
 800b110:	2301      	movs	r3, #1
 800b112:	62bb      	str	r3, [r7, #40]	; 0x28
 800b114:	e016      	b.n	800b144 <dir_register+0x94>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 800b116:	687b      	ldr	r3, [r7, #4]
 800b118:	f103 0024 	add.w	r0, r3, #36	; 0x24
 800b11c:	69fb      	ldr	r3, [r7, #28]
 800b11e:	691a      	ldr	r2, [r3, #16]
 800b120:	f107 010c 	add.w	r1, r7, #12
 800b124:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b126:	f7ff fe53 	bl	800add0 <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 800b12a:	6878      	ldr	r0, [r7, #4]
 800b12c:	f7ff feff 	bl	800af2e <dir_find>
 800b130:	4603      	mov	r3, r0
 800b132:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			if (res != FR_OK) break;
 800b136:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800b13a:	2b00      	cmp	r3, #0
 800b13c:	d106      	bne.n	800b14c <dir_register+0x9c>
		for (n = 1; n < 100; n++) {
 800b13e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b140:	3301      	adds	r3, #1
 800b142:	62bb      	str	r3, [r7, #40]	; 0x28
 800b144:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b146:	2b63      	cmp	r3, #99	; 0x63
 800b148:	d9e5      	bls.n	800b116 <dir_register+0x66>
 800b14a:	e000      	b.n	800b14e <dir_register+0x9e>
			if (res != FR_OK) break;
 800b14c:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 800b14e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b150:	2b64      	cmp	r3, #100	; 0x64
 800b152:	d101      	bne.n	800b158 <dir_register+0xa8>
 800b154:	2307      	movs	r3, #7
 800b156:	e09c      	b.n	800b292 <dir_register+0x1e2>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 800b158:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800b15c:	2b04      	cmp	r3, #4
 800b15e:	d002      	beq.n	800b166 <dir_register+0xb6>
 800b160:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800b164:	e095      	b.n	800b292 <dir_register+0x1e2>
		dp->fn[NSFLAG] = sn[NSFLAG];
 800b166:	7dfa      	ldrb	r2, [r7, #23]
 800b168:	687b      	ldr	r3, [r7, #4]
 800b16a:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 800b16e:	7dfb      	ldrb	r3, [r7, #23]
 800b170:	f003 0302 	and.w	r3, r3, #2
 800b174:	2b00      	cmp	r3, #0
 800b176:	d007      	beq.n	800b188 <dir_register+0xd8>
 800b178:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b17a:	330c      	adds	r3, #12
 800b17c:	4a47      	ldr	r2, [pc, #284]	; (800b29c <dir_register+0x1ec>)
 800b17e:	fba2 2303 	umull	r2, r3, r2, r3
 800b182:	089b      	lsrs	r3, r3, #2
 800b184:	3301      	adds	r3, #1
 800b186:	e000      	b.n	800b18a <dir_register+0xda>
 800b188:	2301      	movs	r3, #1
 800b18a:	623b      	str	r3, [r7, #32]
	res = dir_alloc(dp, nent);		/* Allocate entries */
 800b18c:	6a39      	ldr	r1, [r7, #32]
 800b18e:	6878      	ldr	r0, [r7, #4]
 800b190:	f7ff fcbf 	bl	800ab12 <dir_alloc>
 800b194:	4603      	mov	r3, r0
 800b196:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 800b19a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800b19e:	2b00      	cmp	r3, #0
 800b1a0:	d148      	bne.n	800b234 <dir_register+0x184>
 800b1a2:	6a3b      	ldr	r3, [r7, #32]
 800b1a4:	3b01      	subs	r3, #1
 800b1a6:	623b      	str	r3, [r7, #32]
 800b1a8:	6a3b      	ldr	r3, [r7, #32]
 800b1aa:	2b00      	cmp	r3, #0
 800b1ac:	d042      	beq.n	800b234 <dir_register+0x184>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 800b1ae:	687b      	ldr	r3, [r7, #4]
 800b1b0:	695a      	ldr	r2, [r3, #20]
 800b1b2:	6a3b      	ldr	r3, [r7, #32]
 800b1b4:	015b      	lsls	r3, r3, #5
 800b1b6:	1ad3      	subs	r3, r2, r3
 800b1b8:	4619      	mov	r1, r3
 800b1ba:	6878      	ldr	r0, [r7, #4]
 800b1bc:	f7ff fb4a 	bl	800a854 <dir_sdi>
 800b1c0:	4603      	mov	r3, r0
 800b1c2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 800b1c6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800b1ca:	2b00      	cmp	r3, #0
 800b1cc:	d132      	bne.n	800b234 <dir_register+0x184>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 800b1ce:	687b      	ldr	r3, [r7, #4]
 800b1d0:	3324      	adds	r3, #36	; 0x24
 800b1d2:	4618      	mov	r0, r3
 800b1d4:	f7ff fe8a 	bl	800aeec <sum_sfn>
 800b1d8:	4603      	mov	r3, r0
 800b1da:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 800b1dc:	687b      	ldr	r3, [r7, #4]
 800b1de:	69db      	ldr	r3, [r3, #28]
 800b1e0:	4619      	mov	r1, r3
 800b1e2:	69f8      	ldr	r0, [r7, #28]
 800b1e4:	f7fe ff54 	bl	800a090 <move_window>
 800b1e8:	4603      	mov	r3, r0
 800b1ea:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				if (res != FR_OK) break;
 800b1ee:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800b1f2:	2b00      	cmp	r3, #0
 800b1f4:	d11d      	bne.n	800b232 <dir_register+0x182>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 800b1f6:	69fb      	ldr	r3, [r7, #28]
 800b1f8:	6918      	ldr	r0, [r3, #16]
 800b1fa:	687b      	ldr	r3, [r7, #4]
 800b1fc:	6a19      	ldr	r1, [r3, #32]
 800b1fe:	6a3b      	ldr	r3, [r7, #32]
 800b200:	b2da      	uxtb	r2, r3
 800b202:	7efb      	ldrb	r3, [r7, #27]
 800b204:	f7ff fd7c 	bl	800ad00 <put_lfn>
				fs->wflag = 1;
 800b208:	69fb      	ldr	r3, [r7, #28]
 800b20a:	2201      	movs	r2, #1
 800b20c:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 800b20e:	2100      	movs	r1, #0
 800b210:	6878      	ldr	r0, [r7, #4]
 800b212:	f7ff fba8 	bl	800a966 <dir_next>
 800b216:	4603      	mov	r3, r0
 800b218:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			} while (res == FR_OK && --nent);
 800b21c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800b220:	2b00      	cmp	r3, #0
 800b222:	d107      	bne.n	800b234 <dir_register+0x184>
 800b224:	6a3b      	ldr	r3, [r7, #32]
 800b226:	3b01      	subs	r3, #1
 800b228:	623b      	str	r3, [r7, #32]
 800b22a:	6a3b      	ldr	r3, [r7, #32]
 800b22c:	2b00      	cmp	r3, #0
 800b22e:	d1d5      	bne.n	800b1dc <dir_register+0x12c>
 800b230:	e000      	b.n	800b234 <dir_register+0x184>
				if (res != FR_OK) break;
 800b232:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800b234:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800b238:	2b00      	cmp	r3, #0
 800b23a:	d128      	bne.n	800b28e <dir_register+0x1de>
		res = move_window(fs, dp->sect);
 800b23c:	687b      	ldr	r3, [r7, #4]
 800b23e:	69db      	ldr	r3, [r3, #28]
 800b240:	4619      	mov	r1, r3
 800b242:	69f8      	ldr	r0, [r7, #28]
 800b244:	f7fe ff24 	bl	800a090 <move_window>
 800b248:	4603      	mov	r3, r0
 800b24a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 800b24e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800b252:	2b00      	cmp	r3, #0
 800b254:	d11b      	bne.n	800b28e <dir_register+0x1de>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800b256:	687b      	ldr	r3, [r7, #4]
 800b258:	6a1b      	ldr	r3, [r3, #32]
 800b25a:	2220      	movs	r2, #32
 800b25c:	2100      	movs	r1, #0
 800b25e:	4618      	mov	r0, r3
 800b260:	f7fe fd09 	bl	8009c76 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800b264:	687b      	ldr	r3, [r7, #4]
 800b266:	6a18      	ldr	r0, [r3, #32]
 800b268:	687b      	ldr	r3, [r7, #4]
 800b26a:	3324      	adds	r3, #36	; 0x24
 800b26c:	220b      	movs	r2, #11
 800b26e:	4619      	mov	r1, r3
 800b270:	f7fe fce0 	bl	8009c34 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 800b274:	687b      	ldr	r3, [r7, #4]
 800b276:	f893 202f 	ldrb.w	r2, [r3, #47]	; 0x2f
 800b27a:	687b      	ldr	r3, [r7, #4]
 800b27c:	6a1b      	ldr	r3, [r3, #32]
 800b27e:	330c      	adds	r3, #12
 800b280:	f002 0218 	and.w	r2, r2, #24
 800b284:	b2d2      	uxtb	r2, r2
 800b286:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 800b288:	69fb      	ldr	r3, [r7, #28]
 800b28a:	2201      	movs	r2, #1
 800b28c:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800b28e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800b292:	4618      	mov	r0, r3
 800b294:	3730      	adds	r7, #48	; 0x30
 800b296:	46bd      	mov	sp, r7
 800b298:	bd80      	pop	{r7, pc}
 800b29a:	bf00      	nop
 800b29c:	4ec4ec4f 	.word	0x4ec4ec4f

0800b2a0 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800b2a0:	b580      	push	{r7, lr}
 800b2a2:	b08a      	sub	sp, #40	; 0x28
 800b2a4:	af00      	add	r7, sp, #0
 800b2a6:	6078      	str	r0, [r7, #4]
 800b2a8:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 800b2aa:	683b      	ldr	r3, [r7, #0]
 800b2ac:	681b      	ldr	r3, [r3, #0]
 800b2ae:	613b      	str	r3, [r7, #16]
 800b2b0:	687b      	ldr	r3, [r7, #4]
 800b2b2:	681b      	ldr	r3, [r3, #0]
 800b2b4:	691b      	ldr	r3, [r3, #16]
 800b2b6:	60fb      	str	r3, [r7, #12]
 800b2b8:	2300      	movs	r3, #0
 800b2ba:	617b      	str	r3, [r7, #20]
 800b2bc:	697b      	ldr	r3, [r7, #20]
 800b2be:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 800b2c0:	69bb      	ldr	r3, [r7, #24]
 800b2c2:	1c5a      	adds	r2, r3, #1
 800b2c4:	61ba      	str	r2, [r7, #24]
 800b2c6:	693a      	ldr	r2, [r7, #16]
 800b2c8:	4413      	add	r3, r2
 800b2ca:	781b      	ldrb	r3, [r3, #0]
 800b2cc:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 800b2ce:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b2d0:	2b1f      	cmp	r3, #31
 800b2d2:	d940      	bls.n	800b356 <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 800b2d4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b2d6:	2b2f      	cmp	r3, #47	; 0x2f
 800b2d8:	d006      	beq.n	800b2e8 <create_name+0x48>
 800b2da:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b2dc:	2b5c      	cmp	r3, #92	; 0x5c
 800b2de:	d110      	bne.n	800b302 <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800b2e0:	e002      	b.n	800b2e8 <create_name+0x48>
 800b2e2:	69bb      	ldr	r3, [r7, #24]
 800b2e4:	3301      	adds	r3, #1
 800b2e6:	61bb      	str	r3, [r7, #24]
 800b2e8:	693a      	ldr	r2, [r7, #16]
 800b2ea:	69bb      	ldr	r3, [r7, #24]
 800b2ec:	4413      	add	r3, r2
 800b2ee:	781b      	ldrb	r3, [r3, #0]
 800b2f0:	2b2f      	cmp	r3, #47	; 0x2f
 800b2f2:	d0f6      	beq.n	800b2e2 <create_name+0x42>
 800b2f4:	693a      	ldr	r2, [r7, #16]
 800b2f6:	69bb      	ldr	r3, [r7, #24]
 800b2f8:	4413      	add	r3, r2
 800b2fa:	781b      	ldrb	r3, [r3, #0]
 800b2fc:	2b5c      	cmp	r3, #92	; 0x5c
 800b2fe:	d0f0      	beq.n	800b2e2 <create_name+0x42>
			break;
 800b300:	e02a      	b.n	800b358 <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 800b302:	697b      	ldr	r3, [r7, #20]
 800b304:	2bfe      	cmp	r3, #254	; 0xfe
 800b306:	d901      	bls.n	800b30c <create_name+0x6c>
 800b308:	2306      	movs	r3, #6
 800b30a:	e17d      	b.n	800b608 <create_name+0x368>
#if !_LFN_UNICODE
		w &= 0xFF;
 800b30c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b30e:	b2db      	uxtb	r3, r3
 800b310:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 800b312:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b314:	2101      	movs	r1, #1
 800b316:	4618      	mov	r0, r3
 800b318:	f001 f9f0 	bl	800c6fc <ff_convert>
 800b31c:	4603      	mov	r3, r0
 800b31e:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 800b320:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b322:	2b00      	cmp	r3, #0
 800b324:	d101      	bne.n	800b32a <create_name+0x8a>
 800b326:	2306      	movs	r3, #6
 800b328:	e16e      	b.n	800b608 <create_name+0x368>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 800b32a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b32c:	2b7f      	cmp	r3, #127	; 0x7f
 800b32e:	d809      	bhi.n	800b344 <create_name+0xa4>
 800b330:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b332:	4619      	mov	r1, r3
 800b334:	488d      	ldr	r0, [pc, #564]	; (800b56c <create_name+0x2cc>)
 800b336:	f7fe fce0 	bl	8009cfa <chk_chr>
 800b33a:	4603      	mov	r3, r0
 800b33c:	2b00      	cmp	r3, #0
 800b33e:	d001      	beq.n	800b344 <create_name+0xa4>
 800b340:	2306      	movs	r3, #6
 800b342:	e161      	b.n	800b608 <create_name+0x368>
		lfn[di++] = w;					/* Store the Unicode character */
 800b344:	697b      	ldr	r3, [r7, #20]
 800b346:	1c5a      	adds	r2, r3, #1
 800b348:	617a      	str	r2, [r7, #20]
 800b34a:	005b      	lsls	r3, r3, #1
 800b34c:	68fa      	ldr	r2, [r7, #12]
 800b34e:	4413      	add	r3, r2
 800b350:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800b352:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 800b354:	e7b4      	b.n	800b2c0 <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 800b356:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 800b358:	693a      	ldr	r2, [r7, #16]
 800b35a:	69bb      	ldr	r3, [r7, #24]
 800b35c:	441a      	add	r2, r3
 800b35e:	683b      	ldr	r3, [r7, #0]
 800b360:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800b362:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b364:	2b1f      	cmp	r3, #31
 800b366:	d801      	bhi.n	800b36c <create_name+0xcc>
 800b368:	2304      	movs	r3, #4
 800b36a:	e000      	b.n	800b36e <create_name+0xce>
 800b36c:	2300      	movs	r3, #0
 800b36e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800b372:	e011      	b.n	800b398 <create_name+0xf8>
		w = lfn[di - 1];
 800b374:	697b      	ldr	r3, [r7, #20]
 800b376:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800b37a:	3b01      	subs	r3, #1
 800b37c:	005b      	lsls	r3, r3, #1
 800b37e:	68fa      	ldr	r2, [r7, #12]
 800b380:	4413      	add	r3, r2
 800b382:	881b      	ldrh	r3, [r3, #0]
 800b384:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w != ' ' && w != '.') break;
 800b386:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b388:	2b20      	cmp	r3, #32
 800b38a:	d002      	beq.n	800b392 <create_name+0xf2>
 800b38c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b38e:	2b2e      	cmp	r3, #46	; 0x2e
 800b390:	d106      	bne.n	800b3a0 <create_name+0x100>
		di--;
 800b392:	697b      	ldr	r3, [r7, #20]
 800b394:	3b01      	subs	r3, #1
 800b396:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800b398:	697b      	ldr	r3, [r7, #20]
 800b39a:	2b00      	cmp	r3, #0
 800b39c:	d1ea      	bne.n	800b374 <create_name+0xd4>
 800b39e:	e000      	b.n	800b3a2 <create_name+0x102>
		if (w != ' ' && w != '.') break;
 800b3a0:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 800b3a2:	697b      	ldr	r3, [r7, #20]
 800b3a4:	005b      	lsls	r3, r3, #1
 800b3a6:	68fa      	ldr	r2, [r7, #12]
 800b3a8:	4413      	add	r3, r2
 800b3aa:	2200      	movs	r2, #0
 800b3ac:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 800b3ae:	697b      	ldr	r3, [r7, #20]
 800b3b0:	2b00      	cmp	r3, #0
 800b3b2:	d101      	bne.n	800b3b8 <create_name+0x118>
 800b3b4:	2306      	movs	r3, #6
 800b3b6:	e127      	b.n	800b608 <create_name+0x368>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 800b3b8:	687b      	ldr	r3, [r7, #4]
 800b3ba:	3324      	adds	r3, #36	; 0x24
 800b3bc:	220b      	movs	r2, #11
 800b3be:	2120      	movs	r1, #32
 800b3c0:	4618      	mov	r0, r3
 800b3c2:	f7fe fc58 	bl	8009c76 <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 800b3c6:	2300      	movs	r3, #0
 800b3c8:	61bb      	str	r3, [r7, #24]
 800b3ca:	e002      	b.n	800b3d2 <create_name+0x132>
 800b3cc:	69bb      	ldr	r3, [r7, #24]
 800b3ce:	3301      	adds	r3, #1
 800b3d0:	61bb      	str	r3, [r7, #24]
 800b3d2:	69bb      	ldr	r3, [r7, #24]
 800b3d4:	005b      	lsls	r3, r3, #1
 800b3d6:	68fa      	ldr	r2, [r7, #12]
 800b3d8:	4413      	add	r3, r2
 800b3da:	881b      	ldrh	r3, [r3, #0]
 800b3dc:	2b20      	cmp	r3, #32
 800b3de:	d0f5      	beq.n	800b3cc <create_name+0x12c>
 800b3e0:	69bb      	ldr	r3, [r7, #24]
 800b3e2:	005b      	lsls	r3, r3, #1
 800b3e4:	68fa      	ldr	r2, [r7, #12]
 800b3e6:	4413      	add	r3, r2
 800b3e8:	881b      	ldrh	r3, [r3, #0]
 800b3ea:	2b2e      	cmp	r3, #46	; 0x2e
 800b3ec:	d0ee      	beq.n	800b3cc <create_name+0x12c>
	if (si) cf |= NS_LOSS | NS_LFN;
 800b3ee:	69bb      	ldr	r3, [r7, #24]
 800b3f0:	2b00      	cmp	r3, #0
 800b3f2:	d009      	beq.n	800b408 <create_name+0x168>
 800b3f4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b3f8:	f043 0303 	orr.w	r3, r3, #3
 800b3fc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 800b400:	e002      	b.n	800b408 <create_name+0x168>
 800b402:	697b      	ldr	r3, [r7, #20]
 800b404:	3b01      	subs	r3, #1
 800b406:	617b      	str	r3, [r7, #20]
 800b408:	697b      	ldr	r3, [r7, #20]
 800b40a:	2b00      	cmp	r3, #0
 800b40c:	d009      	beq.n	800b422 <create_name+0x182>
 800b40e:	697b      	ldr	r3, [r7, #20]
 800b410:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800b414:	3b01      	subs	r3, #1
 800b416:	005b      	lsls	r3, r3, #1
 800b418:	68fa      	ldr	r2, [r7, #12]
 800b41a:	4413      	add	r3, r2
 800b41c:	881b      	ldrh	r3, [r3, #0]
 800b41e:	2b2e      	cmp	r3, #46	; 0x2e
 800b420:	d1ef      	bne.n	800b402 <create_name+0x162>

	i = b = 0; ni = 8;
 800b422:	2300      	movs	r3, #0
 800b424:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800b428:	2300      	movs	r3, #0
 800b42a:	623b      	str	r3, [r7, #32]
 800b42c:	2308      	movs	r3, #8
 800b42e:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 800b430:	69bb      	ldr	r3, [r7, #24]
 800b432:	1c5a      	adds	r2, r3, #1
 800b434:	61ba      	str	r2, [r7, #24]
 800b436:	005b      	lsls	r3, r3, #1
 800b438:	68fa      	ldr	r2, [r7, #12]
 800b43a:	4413      	add	r3, r2
 800b43c:	881b      	ldrh	r3, [r3, #0]
 800b43e:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) break;					/* Break on end of the LFN */
 800b440:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b442:	2b00      	cmp	r3, #0
 800b444:	f000 8090 	beq.w	800b568 <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 800b448:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b44a:	2b20      	cmp	r3, #32
 800b44c:	d006      	beq.n	800b45c <create_name+0x1bc>
 800b44e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b450:	2b2e      	cmp	r3, #46	; 0x2e
 800b452:	d10a      	bne.n	800b46a <create_name+0x1ca>
 800b454:	69ba      	ldr	r2, [r7, #24]
 800b456:	697b      	ldr	r3, [r7, #20]
 800b458:	429a      	cmp	r2, r3
 800b45a:	d006      	beq.n	800b46a <create_name+0x1ca>
			cf |= NS_LOSS | NS_LFN; continue;
 800b45c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b460:	f043 0303 	orr.w	r3, r3, #3
 800b464:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800b468:	e07d      	b.n	800b566 <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 800b46a:	6a3a      	ldr	r2, [r7, #32]
 800b46c:	69fb      	ldr	r3, [r7, #28]
 800b46e:	429a      	cmp	r2, r3
 800b470:	d203      	bcs.n	800b47a <create_name+0x1da>
 800b472:	69ba      	ldr	r2, [r7, #24]
 800b474:	697b      	ldr	r3, [r7, #20]
 800b476:	429a      	cmp	r2, r3
 800b478:	d123      	bne.n	800b4c2 <create_name+0x222>
			if (ni == 11) {				/* Long extension */
 800b47a:	69fb      	ldr	r3, [r7, #28]
 800b47c:	2b0b      	cmp	r3, #11
 800b47e:	d106      	bne.n	800b48e <create_name+0x1ee>
				cf |= NS_LOSS | NS_LFN; break;
 800b480:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b484:	f043 0303 	orr.w	r3, r3, #3
 800b488:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800b48c:	e075      	b.n	800b57a <create_name+0x2da>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 800b48e:	69ba      	ldr	r2, [r7, #24]
 800b490:	697b      	ldr	r3, [r7, #20]
 800b492:	429a      	cmp	r2, r3
 800b494:	d005      	beq.n	800b4a2 <create_name+0x202>
 800b496:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b49a:	f043 0303 	orr.w	r3, r3, #3
 800b49e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (si > di) break;			/* No extension */
 800b4a2:	69ba      	ldr	r2, [r7, #24]
 800b4a4:	697b      	ldr	r3, [r7, #20]
 800b4a6:	429a      	cmp	r2, r3
 800b4a8:	d866      	bhi.n	800b578 <create_name+0x2d8>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 800b4aa:	697b      	ldr	r3, [r7, #20]
 800b4ac:	61bb      	str	r3, [r7, #24]
 800b4ae:	2308      	movs	r3, #8
 800b4b0:	623b      	str	r3, [r7, #32]
 800b4b2:	230b      	movs	r3, #11
 800b4b4:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 800b4b6:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800b4ba:	009b      	lsls	r3, r3, #2
 800b4bc:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800b4c0:	e051      	b.n	800b566 <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 800b4c2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b4c4:	2b7f      	cmp	r3, #127	; 0x7f
 800b4c6:	d914      	bls.n	800b4f2 <create_name+0x252>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 800b4c8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b4ca:	2100      	movs	r1, #0
 800b4cc:	4618      	mov	r0, r3
 800b4ce:	f001 f915 	bl	800c6fc <ff_convert>
 800b4d2:	4603      	mov	r3, r0
 800b4d4:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 800b4d6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b4d8:	2b00      	cmp	r3, #0
 800b4da:	d004      	beq.n	800b4e6 <create_name+0x246>
 800b4dc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b4de:	3b80      	subs	r3, #128	; 0x80
 800b4e0:	4a23      	ldr	r2, [pc, #140]	; (800b570 <create_name+0x2d0>)
 800b4e2:	5cd3      	ldrb	r3, [r2, r3]
 800b4e4:	84bb      	strh	r3, [r7, #36]	; 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 800b4e6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b4ea:	f043 0302 	orr.w	r3, r3, #2
 800b4ee:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 800b4f2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b4f4:	2b00      	cmp	r3, #0
 800b4f6:	d007      	beq.n	800b508 <create_name+0x268>
 800b4f8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b4fa:	4619      	mov	r1, r3
 800b4fc:	481d      	ldr	r0, [pc, #116]	; (800b574 <create_name+0x2d4>)
 800b4fe:	f7fe fbfc 	bl	8009cfa <chk_chr>
 800b502:	4603      	mov	r3, r0
 800b504:	2b00      	cmp	r3, #0
 800b506:	d008      	beq.n	800b51a <create_name+0x27a>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 800b508:	235f      	movs	r3, #95	; 0x5f
 800b50a:	84bb      	strh	r3, [r7, #36]	; 0x24
 800b50c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b510:	f043 0303 	orr.w	r3, r3, #3
 800b514:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800b518:	e01b      	b.n	800b552 <create_name+0x2b2>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 800b51a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b51c:	2b40      	cmp	r3, #64	; 0x40
 800b51e:	d909      	bls.n	800b534 <create_name+0x294>
 800b520:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b522:	2b5a      	cmp	r3, #90	; 0x5a
 800b524:	d806      	bhi.n	800b534 <create_name+0x294>
					b |= 2;
 800b526:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800b52a:	f043 0302 	orr.w	r3, r3, #2
 800b52e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800b532:	e00e      	b.n	800b552 <create_name+0x2b2>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 800b534:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b536:	2b60      	cmp	r3, #96	; 0x60
 800b538:	d90b      	bls.n	800b552 <create_name+0x2b2>
 800b53a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b53c:	2b7a      	cmp	r3, #122	; 0x7a
 800b53e:	d808      	bhi.n	800b552 <create_name+0x2b2>
						b |= 1; w -= 0x20;
 800b540:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800b544:	f043 0301 	orr.w	r3, r3, #1
 800b548:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800b54c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b54e:	3b20      	subs	r3, #32
 800b550:	84bb      	strh	r3, [r7, #36]	; 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 800b552:	6a3b      	ldr	r3, [r7, #32]
 800b554:	1c5a      	adds	r2, r3, #1
 800b556:	623a      	str	r2, [r7, #32]
 800b558:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800b55a:	b2d1      	uxtb	r1, r2
 800b55c:	687a      	ldr	r2, [r7, #4]
 800b55e:	4413      	add	r3, r2
 800b560:	460a      	mov	r2, r1
 800b562:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		w = lfn[si++];					/* Get an LFN character */
 800b566:	e763      	b.n	800b430 <create_name+0x190>
		if (!w) break;					/* Break on end of the LFN */
 800b568:	bf00      	nop
 800b56a:	e006      	b.n	800b57a <create_name+0x2da>
 800b56c:	0800d28c 	.word	0x0800d28c
 800b570:	0800d2ec 	.word	0x0800d2ec
 800b574:	0800d298 	.word	0x0800d298
			if (si > di) break;			/* No extension */
 800b578:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800b57a:	687b      	ldr	r3, [r7, #4]
 800b57c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800b580:	2be5      	cmp	r3, #229	; 0xe5
 800b582:	d103      	bne.n	800b58c <create_name+0x2ec>
 800b584:	687b      	ldr	r3, [r7, #4]
 800b586:	2205      	movs	r2, #5
 800b588:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

	if (ni == 8) b <<= 2;
 800b58c:	69fb      	ldr	r3, [r7, #28]
 800b58e:	2b08      	cmp	r3, #8
 800b590:	d104      	bne.n	800b59c <create_name+0x2fc>
 800b592:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800b596:	009b      	lsls	r3, r3, #2
 800b598:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 800b59c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800b5a0:	f003 030c 	and.w	r3, r3, #12
 800b5a4:	2b0c      	cmp	r3, #12
 800b5a6:	d005      	beq.n	800b5b4 <create_name+0x314>
 800b5a8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800b5ac:	f003 0303 	and.w	r3, r3, #3
 800b5b0:	2b03      	cmp	r3, #3
 800b5b2:	d105      	bne.n	800b5c0 <create_name+0x320>
 800b5b4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b5b8:	f043 0302 	orr.w	r3, r3, #2
 800b5bc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 800b5c0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b5c4:	f003 0302 	and.w	r3, r3, #2
 800b5c8:	2b00      	cmp	r3, #0
 800b5ca:	d117      	bne.n	800b5fc <create_name+0x35c>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 800b5cc:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800b5d0:	f003 0303 	and.w	r3, r3, #3
 800b5d4:	2b01      	cmp	r3, #1
 800b5d6:	d105      	bne.n	800b5e4 <create_name+0x344>
 800b5d8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b5dc:	f043 0310 	orr.w	r3, r3, #16
 800b5e0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 800b5e4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800b5e8:	f003 030c 	and.w	r3, r3, #12
 800b5ec:	2b04      	cmp	r3, #4
 800b5ee:	d105      	bne.n	800b5fc <create_name+0x35c>
 800b5f0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b5f4:	f043 0308 	orr.w	r3, r3, #8
 800b5f8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 800b5fc:	687b      	ldr	r3, [r7, #4]
 800b5fe:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800b602:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

	return FR_OK;
 800b606:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 800b608:	4618      	mov	r0, r3
 800b60a:	3728      	adds	r7, #40	; 0x28
 800b60c:	46bd      	mov	sp, r7
 800b60e:	bd80      	pop	{r7, pc}

0800b610 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800b610:	b580      	push	{r7, lr}
 800b612:	b086      	sub	sp, #24
 800b614:	af00      	add	r7, sp, #0
 800b616:	6078      	str	r0, [r7, #4]
 800b618:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800b61a:	687b      	ldr	r3, [r7, #4]
 800b61c:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800b61e:	693b      	ldr	r3, [r7, #16]
 800b620:	681b      	ldr	r3, [r3, #0]
 800b622:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800b624:	e002      	b.n	800b62c <follow_path+0x1c>
 800b626:	683b      	ldr	r3, [r7, #0]
 800b628:	3301      	adds	r3, #1
 800b62a:	603b      	str	r3, [r7, #0]
 800b62c:	683b      	ldr	r3, [r7, #0]
 800b62e:	781b      	ldrb	r3, [r3, #0]
 800b630:	2b2f      	cmp	r3, #47	; 0x2f
 800b632:	d0f8      	beq.n	800b626 <follow_path+0x16>
 800b634:	683b      	ldr	r3, [r7, #0]
 800b636:	781b      	ldrb	r3, [r3, #0]
 800b638:	2b5c      	cmp	r3, #92	; 0x5c
 800b63a:	d0f4      	beq.n	800b626 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800b63c:	693b      	ldr	r3, [r7, #16]
 800b63e:	2200      	movs	r2, #0
 800b640:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800b642:	683b      	ldr	r3, [r7, #0]
 800b644:	781b      	ldrb	r3, [r3, #0]
 800b646:	2b1f      	cmp	r3, #31
 800b648:	d80a      	bhi.n	800b660 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800b64a:	687b      	ldr	r3, [r7, #4]
 800b64c:	2280      	movs	r2, #128	; 0x80
 800b64e:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 800b652:	2100      	movs	r1, #0
 800b654:	6878      	ldr	r0, [r7, #4]
 800b656:	f7ff f8fd 	bl	800a854 <dir_sdi>
 800b65a:	4603      	mov	r3, r0
 800b65c:	75fb      	strb	r3, [r7, #23]
 800b65e:	e048      	b.n	800b6f2 <follow_path+0xe2>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800b660:	463b      	mov	r3, r7
 800b662:	4619      	mov	r1, r3
 800b664:	6878      	ldr	r0, [r7, #4]
 800b666:	f7ff fe1b 	bl	800b2a0 <create_name>
 800b66a:	4603      	mov	r3, r0
 800b66c:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800b66e:	7dfb      	ldrb	r3, [r7, #23]
 800b670:	2b00      	cmp	r3, #0
 800b672:	d139      	bne.n	800b6e8 <follow_path+0xd8>
			res = dir_find(dp);				/* Find an object with the segment name */
 800b674:	6878      	ldr	r0, [r7, #4]
 800b676:	f7ff fc5a 	bl	800af2e <dir_find>
 800b67a:	4603      	mov	r3, r0
 800b67c:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800b67e:	687b      	ldr	r3, [r7, #4]
 800b680:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800b684:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800b686:	7dfb      	ldrb	r3, [r7, #23]
 800b688:	2b00      	cmp	r3, #0
 800b68a:	d00a      	beq.n	800b6a2 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800b68c:	7dfb      	ldrb	r3, [r7, #23]
 800b68e:	2b04      	cmp	r3, #4
 800b690:	d12c      	bne.n	800b6ec <follow_path+0xdc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800b692:	7afb      	ldrb	r3, [r7, #11]
 800b694:	f003 0304 	and.w	r3, r3, #4
 800b698:	2b00      	cmp	r3, #0
 800b69a:	d127      	bne.n	800b6ec <follow_path+0xdc>
 800b69c:	2305      	movs	r3, #5
 800b69e:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800b6a0:	e024      	b.n	800b6ec <follow_path+0xdc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800b6a2:	7afb      	ldrb	r3, [r7, #11]
 800b6a4:	f003 0304 	and.w	r3, r3, #4
 800b6a8:	2b00      	cmp	r3, #0
 800b6aa:	d121      	bne.n	800b6f0 <follow_path+0xe0>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800b6ac:	693b      	ldr	r3, [r7, #16]
 800b6ae:	799b      	ldrb	r3, [r3, #6]
 800b6b0:	f003 0310 	and.w	r3, r3, #16
 800b6b4:	2b00      	cmp	r3, #0
 800b6b6:	d102      	bne.n	800b6be <follow_path+0xae>
				res = FR_NO_PATH; break;
 800b6b8:	2305      	movs	r3, #5
 800b6ba:	75fb      	strb	r3, [r7, #23]
 800b6bc:	e019      	b.n	800b6f2 <follow_path+0xe2>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800b6be:	68fb      	ldr	r3, [r7, #12]
 800b6c0:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800b6c4:	687b      	ldr	r3, [r7, #4]
 800b6c6:	695b      	ldr	r3, [r3, #20]
 800b6c8:	68fa      	ldr	r2, [r7, #12]
 800b6ca:	8992      	ldrh	r2, [r2, #12]
 800b6cc:	fbb3 f0f2 	udiv	r0, r3, r2
 800b6d0:	fb00 f202 	mul.w	r2, r0, r2
 800b6d4:	1a9b      	subs	r3, r3, r2
 800b6d6:	440b      	add	r3, r1
 800b6d8:	4619      	mov	r1, r3
 800b6da:	68f8      	ldr	r0, [r7, #12]
 800b6dc:	f7ff fa60 	bl	800aba0 <ld_clust>
 800b6e0:	4602      	mov	r2, r0
 800b6e2:	693b      	ldr	r3, [r7, #16]
 800b6e4:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800b6e6:	e7bb      	b.n	800b660 <follow_path+0x50>
			if (res != FR_OK) break;
 800b6e8:	bf00      	nop
 800b6ea:	e002      	b.n	800b6f2 <follow_path+0xe2>
				break;
 800b6ec:	bf00      	nop
 800b6ee:	e000      	b.n	800b6f2 <follow_path+0xe2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800b6f0:	bf00      	nop
			}
		}
	}

	return res;
 800b6f2:	7dfb      	ldrb	r3, [r7, #23]
}
 800b6f4:	4618      	mov	r0, r3
 800b6f6:	3718      	adds	r7, #24
 800b6f8:	46bd      	mov	sp, r7
 800b6fa:	bd80      	pop	{r7, pc}

0800b6fc <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800b6fc:	b480      	push	{r7}
 800b6fe:	b087      	sub	sp, #28
 800b700:	af00      	add	r7, sp, #0
 800b702:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800b704:	f04f 33ff 	mov.w	r3, #4294967295
 800b708:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800b70a:	687b      	ldr	r3, [r7, #4]
 800b70c:	681b      	ldr	r3, [r3, #0]
 800b70e:	2b00      	cmp	r3, #0
 800b710:	d031      	beq.n	800b776 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800b712:	687b      	ldr	r3, [r7, #4]
 800b714:	681b      	ldr	r3, [r3, #0]
 800b716:	617b      	str	r3, [r7, #20]
 800b718:	e002      	b.n	800b720 <get_ldnumber+0x24>
 800b71a:	697b      	ldr	r3, [r7, #20]
 800b71c:	3301      	adds	r3, #1
 800b71e:	617b      	str	r3, [r7, #20]
 800b720:	697b      	ldr	r3, [r7, #20]
 800b722:	781b      	ldrb	r3, [r3, #0]
 800b724:	2b1f      	cmp	r3, #31
 800b726:	d903      	bls.n	800b730 <get_ldnumber+0x34>
 800b728:	697b      	ldr	r3, [r7, #20]
 800b72a:	781b      	ldrb	r3, [r3, #0]
 800b72c:	2b3a      	cmp	r3, #58	; 0x3a
 800b72e:	d1f4      	bne.n	800b71a <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800b730:	697b      	ldr	r3, [r7, #20]
 800b732:	781b      	ldrb	r3, [r3, #0]
 800b734:	2b3a      	cmp	r3, #58	; 0x3a
 800b736:	d11c      	bne.n	800b772 <get_ldnumber+0x76>
			tp = *path;
 800b738:	687b      	ldr	r3, [r7, #4]
 800b73a:	681b      	ldr	r3, [r3, #0]
 800b73c:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800b73e:	68fb      	ldr	r3, [r7, #12]
 800b740:	1c5a      	adds	r2, r3, #1
 800b742:	60fa      	str	r2, [r7, #12]
 800b744:	781b      	ldrb	r3, [r3, #0]
 800b746:	3b30      	subs	r3, #48	; 0x30
 800b748:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800b74a:	68bb      	ldr	r3, [r7, #8]
 800b74c:	2b09      	cmp	r3, #9
 800b74e:	d80e      	bhi.n	800b76e <get_ldnumber+0x72>
 800b750:	68fa      	ldr	r2, [r7, #12]
 800b752:	697b      	ldr	r3, [r7, #20]
 800b754:	429a      	cmp	r2, r3
 800b756:	d10a      	bne.n	800b76e <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800b758:	68bb      	ldr	r3, [r7, #8]
 800b75a:	2b00      	cmp	r3, #0
 800b75c:	d107      	bne.n	800b76e <get_ldnumber+0x72>
					vol = (int)i;
 800b75e:	68bb      	ldr	r3, [r7, #8]
 800b760:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800b762:	697b      	ldr	r3, [r7, #20]
 800b764:	3301      	adds	r3, #1
 800b766:	617b      	str	r3, [r7, #20]
 800b768:	687b      	ldr	r3, [r7, #4]
 800b76a:	697a      	ldr	r2, [r7, #20]
 800b76c:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800b76e:	693b      	ldr	r3, [r7, #16]
 800b770:	e002      	b.n	800b778 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800b772:	2300      	movs	r3, #0
 800b774:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800b776:	693b      	ldr	r3, [r7, #16]
}
 800b778:	4618      	mov	r0, r3
 800b77a:	371c      	adds	r7, #28
 800b77c:	46bd      	mov	sp, r7
 800b77e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b782:	4770      	bx	lr

0800b784 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800b784:	b580      	push	{r7, lr}
 800b786:	b082      	sub	sp, #8
 800b788:	af00      	add	r7, sp, #0
 800b78a:	6078      	str	r0, [r7, #4]
 800b78c:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800b78e:	687b      	ldr	r3, [r7, #4]
 800b790:	2200      	movs	r2, #0
 800b792:	70da      	strb	r2, [r3, #3]
 800b794:	687b      	ldr	r3, [r7, #4]
 800b796:	f04f 32ff 	mov.w	r2, #4294967295
 800b79a:	635a      	str	r2, [r3, #52]	; 0x34
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800b79c:	6839      	ldr	r1, [r7, #0]
 800b79e:	6878      	ldr	r0, [r7, #4]
 800b7a0:	f7fe fc76 	bl	800a090 <move_window>
 800b7a4:	4603      	mov	r3, r0
 800b7a6:	2b00      	cmp	r3, #0
 800b7a8:	d001      	beq.n	800b7ae <check_fs+0x2a>
 800b7aa:	2304      	movs	r3, #4
 800b7ac:	e038      	b.n	800b820 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800b7ae:	687b      	ldr	r3, [r7, #4]
 800b7b0:	3338      	adds	r3, #56	; 0x38
 800b7b2:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800b7b6:	4618      	mov	r0, r3
 800b7b8:	f7fe f9ba 	bl	8009b30 <ld_word>
 800b7bc:	4603      	mov	r3, r0
 800b7be:	461a      	mov	r2, r3
 800b7c0:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800b7c4:	429a      	cmp	r2, r3
 800b7c6:	d001      	beq.n	800b7cc <check_fs+0x48>
 800b7c8:	2303      	movs	r3, #3
 800b7ca:	e029      	b.n	800b820 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800b7cc:	687b      	ldr	r3, [r7, #4]
 800b7ce:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800b7d2:	2be9      	cmp	r3, #233	; 0xe9
 800b7d4:	d009      	beq.n	800b7ea <check_fs+0x66>
 800b7d6:	687b      	ldr	r3, [r7, #4]
 800b7d8:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800b7dc:	2beb      	cmp	r3, #235	; 0xeb
 800b7de:	d11e      	bne.n	800b81e <check_fs+0x9a>
 800b7e0:	687b      	ldr	r3, [r7, #4]
 800b7e2:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800b7e6:	2b90      	cmp	r3, #144	; 0x90
 800b7e8:	d119      	bne.n	800b81e <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800b7ea:	687b      	ldr	r3, [r7, #4]
 800b7ec:	3338      	adds	r3, #56	; 0x38
 800b7ee:	3336      	adds	r3, #54	; 0x36
 800b7f0:	4618      	mov	r0, r3
 800b7f2:	f7fe f9b5 	bl	8009b60 <ld_dword>
 800b7f6:	4603      	mov	r3, r0
 800b7f8:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800b7fc:	4a0a      	ldr	r2, [pc, #40]	; (800b828 <check_fs+0xa4>)
 800b7fe:	4293      	cmp	r3, r2
 800b800:	d101      	bne.n	800b806 <check_fs+0x82>
 800b802:	2300      	movs	r3, #0
 800b804:	e00c      	b.n	800b820 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800b806:	687b      	ldr	r3, [r7, #4]
 800b808:	3338      	adds	r3, #56	; 0x38
 800b80a:	3352      	adds	r3, #82	; 0x52
 800b80c:	4618      	mov	r0, r3
 800b80e:	f7fe f9a7 	bl	8009b60 <ld_dword>
 800b812:	4603      	mov	r3, r0
 800b814:	4a05      	ldr	r2, [pc, #20]	; (800b82c <check_fs+0xa8>)
 800b816:	4293      	cmp	r3, r2
 800b818:	d101      	bne.n	800b81e <check_fs+0x9a>
 800b81a:	2300      	movs	r3, #0
 800b81c:	e000      	b.n	800b820 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800b81e:	2302      	movs	r3, #2
}
 800b820:	4618      	mov	r0, r3
 800b822:	3708      	adds	r7, #8
 800b824:	46bd      	mov	sp, r7
 800b826:	bd80      	pop	{r7, pc}
 800b828:	00544146 	.word	0x00544146
 800b82c:	33544146 	.word	0x33544146

0800b830 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800b830:	b580      	push	{r7, lr}
 800b832:	b096      	sub	sp, #88	; 0x58
 800b834:	af00      	add	r7, sp, #0
 800b836:	60f8      	str	r0, [r7, #12]
 800b838:	60b9      	str	r1, [r7, #8]
 800b83a:	4613      	mov	r3, r2
 800b83c:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800b83e:	68bb      	ldr	r3, [r7, #8]
 800b840:	2200      	movs	r2, #0
 800b842:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800b844:	68f8      	ldr	r0, [r7, #12]
 800b846:	f7ff ff59 	bl	800b6fc <get_ldnumber>
 800b84a:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800b84c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b84e:	2b00      	cmp	r3, #0
 800b850:	da01      	bge.n	800b856 <find_volume+0x26>
 800b852:	230b      	movs	r3, #11
 800b854:	e265      	b.n	800bd22 <find_volume+0x4f2>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800b856:	4a9f      	ldr	r2, [pc, #636]	; (800bad4 <find_volume+0x2a4>)
 800b858:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b85a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b85e:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800b860:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b862:	2b00      	cmp	r3, #0
 800b864:	d101      	bne.n	800b86a <find_volume+0x3a>
 800b866:	230c      	movs	r3, #12
 800b868:	e25b      	b.n	800bd22 <find_volume+0x4f2>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800b86a:	68bb      	ldr	r3, [r7, #8]
 800b86c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b86e:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800b870:	79fb      	ldrb	r3, [r7, #7]
 800b872:	f023 0301 	bic.w	r3, r3, #1
 800b876:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800b878:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b87a:	781b      	ldrb	r3, [r3, #0]
 800b87c:	2b00      	cmp	r3, #0
 800b87e:	d01a      	beq.n	800b8b6 <find_volume+0x86>
		stat = disk_status(fs->drv);
 800b880:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b882:	785b      	ldrb	r3, [r3, #1]
 800b884:	4618      	mov	r0, r3
 800b886:	f7fe f8b5 	bl	80099f4 <disk_status>
 800b88a:	4603      	mov	r3, r0
 800b88c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800b890:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800b894:	f003 0301 	and.w	r3, r3, #1
 800b898:	2b00      	cmp	r3, #0
 800b89a:	d10c      	bne.n	800b8b6 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800b89c:	79fb      	ldrb	r3, [r7, #7]
 800b89e:	2b00      	cmp	r3, #0
 800b8a0:	d007      	beq.n	800b8b2 <find_volume+0x82>
 800b8a2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800b8a6:	f003 0304 	and.w	r3, r3, #4
 800b8aa:	2b00      	cmp	r3, #0
 800b8ac:	d001      	beq.n	800b8b2 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 800b8ae:	230a      	movs	r3, #10
 800b8b0:	e237      	b.n	800bd22 <find_volume+0x4f2>
			}
			return FR_OK;				/* The file system object is valid */
 800b8b2:	2300      	movs	r3, #0
 800b8b4:	e235      	b.n	800bd22 <find_volume+0x4f2>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800b8b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b8b8:	2200      	movs	r2, #0
 800b8ba:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800b8bc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b8be:	b2da      	uxtb	r2, r3
 800b8c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b8c2:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800b8c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b8c6:	785b      	ldrb	r3, [r3, #1]
 800b8c8:	4618      	mov	r0, r3
 800b8ca:	f7fe f8ad 	bl	8009a28 <disk_initialize>
 800b8ce:	4603      	mov	r3, r0
 800b8d0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800b8d4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800b8d8:	f003 0301 	and.w	r3, r3, #1
 800b8dc:	2b00      	cmp	r3, #0
 800b8de:	d001      	beq.n	800b8e4 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800b8e0:	2303      	movs	r3, #3
 800b8e2:	e21e      	b.n	800bd22 <find_volume+0x4f2>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800b8e4:	79fb      	ldrb	r3, [r7, #7]
 800b8e6:	2b00      	cmp	r3, #0
 800b8e8:	d007      	beq.n	800b8fa <find_volume+0xca>
 800b8ea:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800b8ee:	f003 0304 	and.w	r3, r3, #4
 800b8f2:	2b00      	cmp	r3, #0
 800b8f4:	d001      	beq.n	800b8fa <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 800b8f6:	230a      	movs	r3, #10
 800b8f8:	e213      	b.n	800bd22 <find_volume+0x4f2>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 800b8fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b8fc:	7858      	ldrb	r0, [r3, #1]
 800b8fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b900:	330c      	adds	r3, #12
 800b902:	461a      	mov	r2, r3
 800b904:	2102      	movs	r1, #2
 800b906:	f7fe f8f5 	bl	8009af4 <disk_ioctl>
 800b90a:	4603      	mov	r3, r0
 800b90c:	2b00      	cmp	r3, #0
 800b90e:	d001      	beq.n	800b914 <find_volume+0xe4>
 800b910:	2301      	movs	r3, #1
 800b912:	e206      	b.n	800bd22 <find_volume+0x4f2>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 800b914:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b916:	899b      	ldrh	r3, [r3, #12]
 800b918:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b91c:	d80d      	bhi.n	800b93a <find_volume+0x10a>
 800b91e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b920:	899b      	ldrh	r3, [r3, #12]
 800b922:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b926:	d308      	bcc.n	800b93a <find_volume+0x10a>
 800b928:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b92a:	899b      	ldrh	r3, [r3, #12]
 800b92c:	461a      	mov	r2, r3
 800b92e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b930:	899b      	ldrh	r3, [r3, #12]
 800b932:	3b01      	subs	r3, #1
 800b934:	4013      	ands	r3, r2
 800b936:	2b00      	cmp	r3, #0
 800b938:	d001      	beq.n	800b93e <find_volume+0x10e>
 800b93a:	2301      	movs	r3, #1
 800b93c:	e1f1      	b.n	800bd22 <find_volume+0x4f2>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800b93e:	2300      	movs	r3, #0
 800b940:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800b942:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800b944:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800b946:	f7ff ff1d 	bl	800b784 <check_fs>
 800b94a:	4603      	mov	r3, r0
 800b94c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800b950:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800b954:	2b02      	cmp	r3, #2
 800b956:	d149      	bne.n	800b9ec <find_volume+0x1bc>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800b958:	2300      	movs	r3, #0
 800b95a:	643b      	str	r3, [r7, #64]	; 0x40
 800b95c:	e01e      	b.n	800b99c <find_volume+0x16c>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800b95e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b960:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800b964:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b966:	011b      	lsls	r3, r3, #4
 800b968:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800b96c:	4413      	add	r3, r2
 800b96e:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800b970:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b972:	3304      	adds	r3, #4
 800b974:	781b      	ldrb	r3, [r3, #0]
 800b976:	2b00      	cmp	r3, #0
 800b978:	d006      	beq.n	800b988 <find_volume+0x158>
 800b97a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b97c:	3308      	adds	r3, #8
 800b97e:	4618      	mov	r0, r3
 800b980:	f7fe f8ee 	bl	8009b60 <ld_dword>
 800b984:	4602      	mov	r2, r0
 800b986:	e000      	b.n	800b98a <find_volume+0x15a>
 800b988:	2200      	movs	r2, #0
 800b98a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b98c:	009b      	lsls	r3, r3, #2
 800b98e:	3358      	adds	r3, #88	; 0x58
 800b990:	443b      	add	r3, r7
 800b992:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800b996:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b998:	3301      	adds	r3, #1
 800b99a:	643b      	str	r3, [r7, #64]	; 0x40
 800b99c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b99e:	2b03      	cmp	r3, #3
 800b9a0:	d9dd      	bls.n	800b95e <find_volume+0x12e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800b9a2:	2300      	movs	r3, #0
 800b9a4:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 800b9a6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b9a8:	2b00      	cmp	r3, #0
 800b9aa:	d002      	beq.n	800b9b2 <find_volume+0x182>
 800b9ac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b9ae:	3b01      	subs	r3, #1
 800b9b0:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800b9b2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b9b4:	009b      	lsls	r3, r3, #2
 800b9b6:	3358      	adds	r3, #88	; 0x58
 800b9b8:	443b      	add	r3, r7
 800b9ba:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800b9be:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800b9c0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b9c2:	2b00      	cmp	r3, #0
 800b9c4:	d005      	beq.n	800b9d2 <find_volume+0x1a2>
 800b9c6:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800b9c8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800b9ca:	f7ff fedb 	bl	800b784 <check_fs>
 800b9ce:	4603      	mov	r3, r0
 800b9d0:	e000      	b.n	800b9d4 <find_volume+0x1a4>
 800b9d2:	2303      	movs	r3, #3
 800b9d4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800b9d8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800b9dc:	2b01      	cmp	r3, #1
 800b9de:	d905      	bls.n	800b9ec <find_volume+0x1bc>
 800b9e0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b9e2:	3301      	adds	r3, #1
 800b9e4:	643b      	str	r3, [r7, #64]	; 0x40
 800b9e6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b9e8:	2b03      	cmp	r3, #3
 800b9ea:	d9e2      	bls.n	800b9b2 <find_volume+0x182>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800b9ec:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800b9f0:	2b04      	cmp	r3, #4
 800b9f2:	d101      	bne.n	800b9f8 <find_volume+0x1c8>
 800b9f4:	2301      	movs	r3, #1
 800b9f6:	e194      	b.n	800bd22 <find_volume+0x4f2>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800b9f8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800b9fc:	2b01      	cmp	r3, #1
 800b9fe:	d901      	bls.n	800ba04 <find_volume+0x1d4>
 800ba00:	230d      	movs	r3, #13
 800ba02:	e18e      	b.n	800bd22 <find_volume+0x4f2>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800ba04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ba06:	3338      	adds	r3, #56	; 0x38
 800ba08:	330b      	adds	r3, #11
 800ba0a:	4618      	mov	r0, r3
 800ba0c:	f7fe f890 	bl	8009b30 <ld_word>
 800ba10:	4603      	mov	r3, r0
 800ba12:	461a      	mov	r2, r3
 800ba14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ba16:	899b      	ldrh	r3, [r3, #12]
 800ba18:	429a      	cmp	r2, r3
 800ba1a:	d001      	beq.n	800ba20 <find_volume+0x1f0>
 800ba1c:	230d      	movs	r3, #13
 800ba1e:	e180      	b.n	800bd22 <find_volume+0x4f2>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800ba20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ba22:	3338      	adds	r3, #56	; 0x38
 800ba24:	3316      	adds	r3, #22
 800ba26:	4618      	mov	r0, r3
 800ba28:	f7fe f882 	bl	8009b30 <ld_word>
 800ba2c:	4603      	mov	r3, r0
 800ba2e:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800ba30:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ba32:	2b00      	cmp	r3, #0
 800ba34:	d106      	bne.n	800ba44 <find_volume+0x214>
 800ba36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ba38:	3338      	adds	r3, #56	; 0x38
 800ba3a:	3324      	adds	r3, #36	; 0x24
 800ba3c:	4618      	mov	r0, r3
 800ba3e:	f7fe f88f 	bl	8009b60 <ld_dword>
 800ba42:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 800ba44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ba46:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800ba48:	621a      	str	r2, [r3, #32]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800ba4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ba4c:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 800ba50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ba52:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800ba54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ba56:	789b      	ldrb	r3, [r3, #2]
 800ba58:	2b01      	cmp	r3, #1
 800ba5a:	d005      	beq.n	800ba68 <find_volume+0x238>
 800ba5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ba5e:	789b      	ldrb	r3, [r3, #2]
 800ba60:	2b02      	cmp	r3, #2
 800ba62:	d001      	beq.n	800ba68 <find_volume+0x238>
 800ba64:	230d      	movs	r3, #13
 800ba66:	e15c      	b.n	800bd22 <find_volume+0x4f2>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800ba68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ba6a:	789b      	ldrb	r3, [r3, #2]
 800ba6c:	461a      	mov	r2, r3
 800ba6e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ba70:	fb02 f303 	mul.w	r3, r2, r3
 800ba74:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800ba76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ba78:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800ba7c:	b29a      	uxth	r2, r3
 800ba7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ba80:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800ba82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ba84:	895b      	ldrh	r3, [r3, #10]
 800ba86:	2b00      	cmp	r3, #0
 800ba88:	d008      	beq.n	800ba9c <find_volume+0x26c>
 800ba8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ba8c:	895b      	ldrh	r3, [r3, #10]
 800ba8e:	461a      	mov	r2, r3
 800ba90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ba92:	895b      	ldrh	r3, [r3, #10]
 800ba94:	3b01      	subs	r3, #1
 800ba96:	4013      	ands	r3, r2
 800ba98:	2b00      	cmp	r3, #0
 800ba9a:	d001      	beq.n	800baa0 <find_volume+0x270>
 800ba9c:	230d      	movs	r3, #13
 800ba9e:	e140      	b.n	800bd22 <find_volume+0x4f2>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800baa0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800baa2:	3338      	adds	r3, #56	; 0x38
 800baa4:	3311      	adds	r3, #17
 800baa6:	4618      	mov	r0, r3
 800baa8:	f7fe f842 	bl	8009b30 <ld_word>
 800baac:	4603      	mov	r3, r0
 800baae:	461a      	mov	r2, r3
 800bab0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bab2:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800bab4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bab6:	891b      	ldrh	r3, [r3, #8]
 800bab8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800baba:	8992      	ldrh	r2, [r2, #12]
 800babc:	0952      	lsrs	r2, r2, #5
 800babe:	b292      	uxth	r2, r2
 800bac0:	fbb3 f1f2 	udiv	r1, r3, r2
 800bac4:	fb01 f202 	mul.w	r2, r1, r2
 800bac8:	1a9b      	subs	r3, r3, r2
 800baca:	b29b      	uxth	r3, r3
 800bacc:	2b00      	cmp	r3, #0
 800bace:	d003      	beq.n	800bad8 <find_volume+0x2a8>
 800bad0:	230d      	movs	r3, #13
 800bad2:	e126      	b.n	800bd22 <find_volume+0x4f2>
 800bad4:	200025f0 	.word	0x200025f0

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800bad8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bada:	3338      	adds	r3, #56	; 0x38
 800badc:	3313      	adds	r3, #19
 800bade:	4618      	mov	r0, r3
 800bae0:	f7fe f826 	bl	8009b30 <ld_word>
 800bae4:	4603      	mov	r3, r0
 800bae6:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800bae8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800baea:	2b00      	cmp	r3, #0
 800baec:	d106      	bne.n	800bafc <find_volume+0x2cc>
 800baee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800baf0:	3338      	adds	r3, #56	; 0x38
 800baf2:	3320      	adds	r3, #32
 800baf4:	4618      	mov	r0, r3
 800baf6:	f7fe f833 	bl	8009b60 <ld_dword>
 800bafa:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800bafc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bafe:	3338      	adds	r3, #56	; 0x38
 800bb00:	330e      	adds	r3, #14
 800bb02:	4618      	mov	r0, r3
 800bb04:	f7fe f814 	bl	8009b30 <ld_word>
 800bb08:	4603      	mov	r3, r0
 800bb0a:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800bb0c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800bb0e:	2b00      	cmp	r3, #0
 800bb10:	d101      	bne.n	800bb16 <find_volume+0x2e6>
 800bb12:	230d      	movs	r3, #13
 800bb14:	e105      	b.n	800bd22 <find_volume+0x4f2>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800bb16:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800bb18:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bb1a:	4413      	add	r3, r2
 800bb1c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800bb1e:	8911      	ldrh	r1, [r2, #8]
 800bb20:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800bb22:	8992      	ldrh	r2, [r2, #12]
 800bb24:	0952      	lsrs	r2, r2, #5
 800bb26:	b292      	uxth	r2, r2
 800bb28:	fbb1 f2f2 	udiv	r2, r1, r2
 800bb2c:	b292      	uxth	r2, r2
 800bb2e:	4413      	add	r3, r2
 800bb30:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800bb32:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800bb34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bb36:	429a      	cmp	r2, r3
 800bb38:	d201      	bcs.n	800bb3e <find_volume+0x30e>
 800bb3a:	230d      	movs	r3, #13
 800bb3c:	e0f1      	b.n	800bd22 <find_volume+0x4f2>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800bb3e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800bb40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bb42:	1ad3      	subs	r3, r2, r3
 800bb44:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800bb46:	8952      	ldrh	r2, [r2, #10]
 800bb48:	fbb3 f3f2 	udiv	r3, r3, r2
 800bb4c:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800bb4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb50:	2b00      	cmp	r3, #0
 800bb52:	d101      	bne.n	800bb58 <find_volume+0x328>
 800bb54:	230d      	movs	r3, #13
 800bb56:	e0e4      	b.n	800bd22 <find_volume+0x4f2>
		fmt = FS_FAT32;
 800bb58:	2303      	movs	r3, #3
 800bb5a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800bb5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb60:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800bb64:	4293      	cmp	r3, r2
 800bb66:	d802      	bhi.n	800bb6e <find_volume+0x33e>
 800bb68:	2302      	movs	r3, #2
 800bb6a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800bb6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb70:	f640 72f5 	movw	r2, #4085	; 0xff5
 800bb74:	4293      	cmp	r3, r2
 800bb76:	d802      	bhi.n	800bb7e <find_volume+0x34e>
 800bb78:	2301      	movs	r3, #1
 800bb7a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800bb7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb80:	1c9a      	adds	r2, r3, #2
 800bb82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bb84:	61da      	str	r2, [r3, #28]
		fs->volbase = bsect;							/* Volume start sector */
 800bb86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bb88:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800bb8a:	625a      	str	r2, [r3, #36]	; 0x24
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800bb8c:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800bb8e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bb90:	441a      	add	r2, r3
 800bb92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bb94:	629a      	str	r2, [r3, #40]	; 0x28
		fs->database = bsect + sysect;					/* Data start sector */
 800bb96:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800bb98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bb9a:	441a      	add	r2, r3
 800bb9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bb9e:	631a      	str	r2, [r3, #48]	; 0x30
		if (fmt == FS_FAT32) {
 800bba0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800bba4:	2b03      	cmp	r3, #3
 800bba6:	d11e      	bne.n	800bbe6 <find_volume+0x3b6>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800bba8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bbaa:	3338      	adds	r3, #56	; 0x38
 800bbac:	332a      	adds	r3, #42	; 0x2a
 800bbae:	4618      	mov	r0, r3
 800bbb0:	f7fd ffbe 	bl	8009b30 <ld_word>
 800bbb4:	4603      	mov	r3, r0
 800bbb6:	2b00      	cmp	r3, #0
 800bbb8:	d001      	beq.n	800bbbe <find_volume+0x38e>
 800bbba:	230d      	movs	r3, #13
 800bbbc:	e0b1      	b.n	800bd22 <find_volume+0x4f2>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800bbbe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bbc0:	891b      	ldrh	r3, [r3, #8]
 800bbc2:	2b00      	cmp	r3, #0
 800bbc4:	d001      	beq.n	800bbca <find_volume+0x39a>
 800bbc6:	230d      	movs	r3, #13
 800bbc8:	e0ab      	b.n	800bd22 <find_volume+0x4f2>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800bbca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bbcc:	3338      	adds	r3, #56	; 0x38
 800bbce:	332c      	adds	r3, #44	; 0x2c
 800bbd0:	4618      	mov	r0, r3
 800bbd2:	f7fd ffc5 	bl	8009b60 <ld_dword>
 800bbd6:	4602      	mov	r2, r0
 800bbd8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bbda:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800bbdc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bbde:	69db      	ldr	r3, [r3, #28]
 800bbe0:	009b      	lsls	r3, r3, #2
 800bbe2:	647b      	str	r3, [r7, #68]	; 0x44
 800bbe4:	e01f      	b.n	800bc26 <find_volume+0x3f6>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800bbe6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bbe8:	891b      	ldrh	r3, [r3, #8]
 800bbea:	2b00      	cmp	r3, #0
 800bbec:	d101      	bne.n	800bbf2 <find_volume+0x3c2>
 800bbee:	230d      	movs	r3, #13
 800bbf0:	e097      	b.n	800bd22 <find_volume+0x4f2>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800bbf2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bbf4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800bbf6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bbf8:	441a      	add	r2, r3
 800bbfa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bbfc:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800bbfe:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800bc02:	2b02      	cmp	r3, #2
 800bc04:	d103      	bne.n	800bc0e <find_volume+0x3de>
 800bc06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bc08:	69db      	ldr	r3, [r3, #28]
 800bc0a:	005b      	lsls	r3, r3, #1
 800bc0c:	e00a      	b.n	800bc24 <find_volume+0x3f4>
 800bc0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bc10:	69da      	ldr	r2, [r3, #28]
 800bc12:	4613      	mov	r3, r2
 800bc14:	005b      	lsls	r3, r3, #1
 800bc16:	4413      	add	r3, r2
 800bc18:	085a      	lsrs	r2, r3, #1
 800bc1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bc1c:	69db      	ldr	r3, [r3, #28]
 800bc1e:	f003 0301 	and.w	r3, r3, #1
 800bc22:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800bc24:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800bc26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bc28:	6a1a      	ldr	r2, [r3, #32]
 800bc2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bc2c:	899b      	ldrh	r3, [r3, #12]
 800bc2e:	4619      	mov	r1, r3
 800bc30:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800bc32:	440b      	add	r3, r1
 800bc34:	3b01      	subs	r3, #1
 800bc36:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800bc38:	8989      	ldrh	r1, [r1, #12]
 800bc3a:	fbb3 f3f1 	udiv	r3, r3, r1
 800bc3e:	429a      	cmp	r2, r3
 800bc40:	d201      	bcs.n	800bc46 <find_volume+0x416>
 800bc42:	230d      	movs	r3, #13
 800bc44:	e06d      	b.n	800bd22 <find_volume+0x4f2>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800bc46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bc48:	f04f 32ff 	mov.w	r2, #4294967295
 800bc4c:	619a      	str	r2, [r3, #24]
 800bc4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bc50:	699a      	ldr	r2, [r3, #24]
 800bc52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bc54:	615a      	str	r2, [r3, #20]
		fs->fsi_flag = 0x80;
 800bc56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bc58:	2280      	movs	r2, #128	; 0x80
 800bc5a:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800bc5c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800bc60:	2b03      	cmp	r3, #3
 800bc62:	d149      	bne.n	800bcf8 <find_volume+0x4c8>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800bc64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bc66:	3338      	adds	r3, #56	; 0x38
 800bc68:	3330      	adds	r3, #48	; 0x30
 800bc6a:	4618      	mov	r0, r3
 800bc6c:	f7fd ff60 	bl	8009b30 <ld_word>
 800bc70:	4603      	mov	r3, r0
 800bc72:	2b01      	cmp	r3, #1
 800bc74:	d140      	bne.n	800bcf8 <find_volume+0x4c8>
			&& move_window(fs, bsect + 1) == FR_OK)
 800bc76:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bc78:	3301      	adds	r3, #1
 800bc7a:	4619      	mov	r1, r3
 800bc7c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800bc7e:	f7fe fa07 	bl	800a090 <move_window>
 800bc82:	4603      	mov	r3, r0
 800bc84:	2b00      	cmp	r3, #0
 800bc86:	d137      	bne.n	800bcf8 <find_volume+0x4c8>
		{
			fs->fsi_flag = 0;
 800bc88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bc8a:	2200      	movs	r2, #0
 800bc8c:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800bc8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bc90:	3338      	adds	r3, #56	; 0x38
 800bc92:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800bc96:	4618      	mov	r0, r3
 800bc98:	f7fd ff4a 	bl	8009b30 <ld_word>
 800bc9c:	4603      	mov	r3, r0
 800bc9e:	461a      	mov	r2, r3
 800bca0:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800bca4:	429a      	cmp	r2, r3
 800bca6:	d127      	bne.n	800bcf8 <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800bca8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bcaa:	3338      	adds	r3, #56	; 0x38
 800bcac:	4618      	mov	r0, r3
 800bcae:	f7fd ff57 	bl	8009b60 <ld_dword>
 800bcb2:	4603      	mov	r3, r0
 800bcb4:	4a1d      	ldr	r2, [pc, #116]	; (800bd2c <find_volume+0x4fc>)
 800bcb6:	4293      	cmp	r3, r2
 800bcb8:	d11e      	bne.n	800bcf8 <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800bcba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bcbc:	3338      	adds	r3, #56	; 0x38
 800bcbe:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800bcc2:	4618      	mov	r0, r3
 800bcc4:	f7fd ff4c 	bl	8009b60 <ld_dword>
 800bcc8:	4603      	mov	r3, r0
 800bcca:	4a19      	ldr	r2, [pc, #100]	; (800bd30 <find_volume+0x500>)
 800bccc:	4293      	cmp	r3, r2
 800bcce:	d113      	bne.n	800bcf8 <find_volume+0x4c8>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800bcd0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bcd2:	3338      	adds	r3, #56	; 0x38
 800bcd4:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 800bcd8:	4618      	mov	r0, r3
 800bcda:	f7fd ff41 	bl	8009b60 <ld_dword>
 800bcde:	4602      	mov	r2, r0
 800bce0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bce2:	619a      	str	r2, [r3, #24]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800bce4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bce6:	3338      	adds	r3, #56	; 0x38
 800bce8:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 800bcec:	4618      	mov	r0, r3
 800bcee:	f7fd ff37 	bl	8009b60 <ld_dword>
 800bcf2:	4602      	mov	r2, r0
 800bcf4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bcf6:	615a      	str	r2, [r3, #20]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800bcf8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bcfa:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 800bcfe:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800bd00:	4b0c      	ldr	r3, [pc, #48]	; (800bd34 <find_volume+0x504>)
 800bd02:	881b      	ldrh	r3, [r3, #0]
 800bd04:	3301      	adds	r3, #1
 800bd06:	b29a      	uxth	r2, r3
 800bd08:	4b0a      	ldr	r3, [pc, #40]	; (800bd34 <find_volume+0x504>)
 800bd0a:	801a      	strh	r2, [r3, #0]
 800bd0c:	4b09      	ldr	r3, [pc, #36]	; (800bd34 <find_volume+0x504>)
 800bd0e:	881a      	ldrh	r2, [r3, #0]
 800bd10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bd12:	80da      	strh	r2, [r3, #6]
#if _USE_LFN == 1
	fs->lfnbuf = LfnBuf;	/* Static LFN working buffer */
 800bd14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bd16:	4a08      	ldr	r2, [pc, #32]	; (800bd38 <find_volume+0x508>)
 800bd18:	611a      	str	r2, [r3, #16]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800bd1a:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800bd1c:	f7fe f950 	bl	8009fc0 <clear_lock>
#endif
	return FR_OK;
 800bd20:	2300      	movs	r3, #0
}
 800bd22:	4618      	mov	r0, r3
 800bd24:	3758      	adds	r7, #88	; 0x58
 800bd26:	46bd      	mov	sp, r7
 800bd28:	bd80      	pop	{r7, pc}
 800bd2a:	bf00      	nop
 800bd2c:	41615252 	.word	0x41615252
 800bd30:	61417272 	.word	0x61417272
 800bd34:	200025f4 	.word	0x200025f4
 800bd38:	20002618 	.word	0x20002618

0800bd3c <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800bd3c:	b580      	push	{r7, lr}
 800bd3e:	b084      	sub	sp, #16
 800bd40:	af00      	add	r7, sp, #0
 800bd42:	6078      	str	r0, [r7, #4]
 800bd44:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800bd46:	2309      	movs	r3, #9
 800bd48:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800bd4a:	687b      	ldr	r3, [r7, #4]
 800bd4c:	2b00      	cmp	r3, #0
 800bd4e:	d01c      	beq.n	800bd8a <validate+0x4e>
 800bd50:	687b      	ldr	r3, [r7, #4]
 800bd52:	681b      	ldr	r3, [r3, #0]
 800bd54:	2b00      	cmp	r3, #0
 800bd56:	d018      	beq.n	800bd8a <validate+0x4e>
 800bd58:	687b      	ldr	r3, [r7, #4]
 800bd5a:	681b      	ldr	r3, [r3, #0]
 800bd5c:	781b      	ldrb	r3, [r3, #0]
 800bd5e:	2b00      	cmp	r3, #0
 800bd60:	d013      	beq.n	800bd8a <validate+0x4e>
 800bd62:	687b      	ldr	r3, [r7, #4]
 800bd64:	889a      	ldrh	r2, [r3, #4]
 800bd66:	687b      	ldr	r3, [r7, #4]
 800bd68:	681b      	ldr	r3, [r3, #0]
 800bd6a:	88db      	ldrh	r3, [r3, #6]
 800bd6c:	429a      	cmp	r2, r3
 800bd6e:	d10c      	bne.n	800bd8a <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800bd70:	687b      	ldr	r3, [r7, #4]
 800bd72:	681b      	ldr	r3, [r3, #0]
 800bd74:	785b      	ldrb	r3, [r3, #1]
 800bd76:	4618      	mov	r0, r3
 800bd78:	f7fd fe3c 	bl	80099f4 <disk_status>
 800bd7c:	4603      	mov	r3, r0
 800bd7e:	f003 0301 	and.w	r3, r3, #1
 800bd82:	2b00      	cmp	r3, #0
 800bd84:	d101      	bne.n	800bd8a <validate+0x4e>
			res = FR_OK;
 800bd86:	2300      	movs	r3, #0
 800bd88:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800bd8a:	7bfb      	ldrb	r3, [r7, #15]
 800bd8c:	2b00      	cmp	r3, #0
 800bd8e:	d102      	bne.n	800bd96 <validate+0x5a>
 800bd90:	687b      	ldr	r3, [r7, #4]
 800bd92:	681b      	ldr	r3, [r3, #0]
 800bd94:	e000      	b.n	800bd98 <validate+0x5c>
 800bd96:	2300      	movs	r3, #0
 800bd98:	683a      	ldr	r2, [r7, #0]
 800bd9a:	6013      	str	r3, [r2, #0]
	return res;
 800bd9c:	7bfb      	ldrb	r3, [r7, #15]
}
 800bd9e:	4618      	mov	r0, r3
 800bda0:	3710      	adds	r7, #16
 800bda2:	46bd      	mov	sp, r7
 800bda4:	bd80      	pop	{r7, pc}
	...

0800bda8 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800bda8:	b580      	push	{r7, lr}
 800bdaa:	b088      	sub	sp, #32
 800bdac:	af00      	add	r7, sp, #0
 800bdae:	60f8      	str	r0, [r7, #12]
 800bdb0:	60b9      	str	r1, [r7, #8]
 800bdb2:	4613      	mov	r3, r2
 800bdb4:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800bdb6:	68bb      	ldr	r3, [r7, #8]
 800bdb8:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800bdba:	f107 0310 	add.w	r3, r7, #16
 800bdbe:	4618      	mov	r0, r3
 800bdc0:	f7ff fc9c 	bl	800b6fc <get_ldnumber>
 800bdc4:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800bdc6:	69fb      	ldr	r3, [r7, #28]
 800bdc8:	2b00      	cmp	r3, #0
 800bdca:	da01      	bge.n	800bdd0 <f_mount+0x28>
 800bdcc:	230b      	movs	r3, #11
 800bdce:	e02b      	b.n	800be28 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800bdd0:	4a17      	ldr	r2, [pc, #92]	; (800be30 <f_mount+0x88>)
 800bdd2:	69fb      	ldr	r3, [r7, #28]
 800bdd4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800bdd8:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800bdda:	69bb      	ldr	r3, [r7, #24]
 800bddc:	2b00      	cmp	r3, #0
 800bdde:	d005      	beq.n	800bdec <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800bde0:	69b8      	ldr	r0, [r7, #24]
 800bde2:	f7fe f8ed 	bl	8009fc0 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800bde6:	69bb      	ldr	r3, [r7, #24]
 800bde8:	2200      	movs	r2, #0
 800bdea:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800bdec:	68fb      	ldr	r3, [r7, #12]
 800bdee:	2b00      	cmp	r3, #0
 800bdf0:	d002      	beq.n	800bdf8 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 800bdf2:	68fb      	ldr	r3, [r7, #12]
 800bdf4:	2200      	movs	r2, #0
 800bdf6:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800bdf8:	68fa      	ldr	r2, [r7, #12]
 800bdfa:	490d      	ldr	r1, [pc, #52]	; (800be30 <f_mount+0x88>)
 800bdfc:	69fb      	ldr	r3, [r7, #28]
 800bdfe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800be02:	68fb      	ldr	r3, [r7, #12]
 800be04:	2b00      	cmp	r3, #0
 800be06:	d002      	beq.n	800be0e <f_mount+0x66>
 800be08:	79fb      	ldrb	r3, [r7, #7]
 800be0a:	2b01      	cmp	r3, #1
 800be0c:	d001      	beq.n	800be12 <f_mount+0x6a>
 800be0e:	2300      	movs	r3, #0
 800be10:	e00a      	b.n	800be28 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800be12:	f107 010c 	add.w	r1, r7, #12
 800be16:	f107 0308 	add.w	r3, r7, #8
 800be1a:	2200      	movs	r2, #0
 800be1c:	4618      	mov	r0, r3
 800be1e:	f7ff fd07 	bl	800b830 <find_volume>
 800be22:	4603      	mov	r3, r0
 800be24:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800be26:	7dfb      	ldrb	r3, [r7, #23]
}
 800be28:	4618      	mov	r0, r3
 800be2a:	3720      	adds	r7, #32
 800be2c:	46bd      	mov	sp, r7
 800be2e:	bd80      	pop	{r7, pc}
 800be30:	200025f0 	.word	0x200025f0

0800be34 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800be34:	b580      	push	{r7, lr}
 800be36:	b09a      	sub	sp, #104	; 0x68
 800be38:	af00      	add	r7, sp, #0
 800be3a:	60f8      	str	r0, [r7, #12]
 800be3c:	60b9      	str	r1, [r7, #8]
 800be3e:	4613      	mov	r3, r2
 800be40:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800be42:	68fb      	ldr	r3, [r7, #12]
 800be44:	2b00      	cmp	r3, #0
 800be46:	d101      	bne.n	800be4c <f_open+0x18>
 800be48:	2309      	movs	r3, #9
 800be4a:	e1bb      	b.n	800c1c4 <f_open+0x390>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800be4c:	79fb      	ldrb	r3, [r7, #7]
 800be4e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800be52:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 800be54:	79fa      	ldrb	r2, [r7, #7]
 800be56:	f107 0114 	add.w	r1, r7, #20
 800be5a:	f107 0308 	add.w	r3, r7, #8
 800be5e:	4618      	mov	r0, r3
 800be60:	f7ff fce6 	bl	800b830 <find_volume>
 800be64:	4603      	mov	r3, r0
 800be66:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	if (res == FR_OK) {
 800be6a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800be6e:	2b00      	cmp	r3, #0
 800be70:	f040 819f 	bne.w	800c1b2 <f_open+0x37e>
		dj.obj.fs = fs;
 800be74:	697b      	ldr	r3, [r7, #20]
 800be76:	61bb      	str	r3, [r7, #24]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800be78:	68ba      	ldr	r2, [r7, #8]
 800be7a:	f107 0318 	add.w	r3, r7, #24
 800be7e:	4611      	mov	r1, r2
 800be80:	4618      	mov	r0, r3
 800be82:	f7ff fbc5 	bl	800b610 <follow_path>
 800be86:	4603      	mov	r3, r0
 800be88:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800be8c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800be90:	2b00      	cmp	r3, #0
 800be92:	d11a      	bne.n	800beca <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800be94:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800be98:	b25b      	sxtb	r3, r3
 800be9a:	2b00      	cmp	r3, #0
 800be9c:	da03      	bge.n	800bea6 <f_open+0x72>
				res = FR_INVALID_NAME;
 800be9e:	2306      	movs	r3, #6
 800bea0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800bea4:	e011      	b.n	800beca <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800bea6:	79fb      	ldrb	r3, [r7, #7]
 800bea8:	f023 0301 	bic.w	r3, r3, #1
 800beac:	2b00      	cmp	r3, #0
 800beae:	bf14      	ite	ne
 800beb0:	2301      	movne	r3, #1
 800beb2:	2300      	moveq	r3, #0
 800beb4:	b2db      	uxtb	r3, r3
 800beb6:	461a      	mov	r2, r3
 800beb8:	f107 0318 	add.w	r3, r7, #24
 800bebc:	4611      	mov	r1, r2
 800bebe:	4618      	mov	r0, r3
 800bec0:	f7fd ff36 	bl	8009d30 <chk_lock>
 800bec4:	4603      	mov	r3, r0
 800bec6:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800beca:	79fb      	ldrb	r3, [r7, #7]
 800becc:	f003 031c 	and.w	r3, r3, #28
 800bed0:	2b00      	cmp	r3, #0
 800bed2:	d07f      	beq.n	800bfd4 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 800bed4:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800bed8:	2b00      	cmp	r3, #0
 800beda:	d017      	beq.n	800bf0c <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800bedc:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800bee0:	2b04      	cmp	r3, #4
 800bee2:	d10e      	bne.n	800bf02 <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800bee4:	f7fd ff80 	bl	8009de8 <enq_lock>
 800bee8:	4603      	mov	r3, r0
 800beea:	2b00      	cmp	r3, #0
 800beec:	d006      	beq.n	800befc <f_open+0xc8>
 800beee:	f107 0318 	add.w	r3, r7, #24
 800bef2:	4618      	mov	r0, r3
 800bef4:	f7ff f8dc 	bl	800b0b0 <dir_register>
 800bef8:	4603      	mov	r3, r0
 800befa:	e000      	b.n	800befe <f_open+0xca>
 800befc:	2312      	movs	r3, #18
 800befe:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800bf02:	79fb      	ldrb	r3, [r7, #7]
 800bf04:	f043 0308 	orr.w	r3, r3, #8
 800bf08:	71fb      	strb	r3, [r7, #7]
 800bf0a:	e010      	b.n	800bf2e <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800bf0c:	7fbb      	ldrb	r3, [r7, #30]
 800bf0e:	f003 0311 	and.w	r3, r3, #17
 800bf12:	2b00      	cmp	r3, #0
 800bf14:	d003      	beq.n	800bf1e <f_open+0xea>
					res = FR_DENIED;
 800bf16:	2307      	movs	r3, #7
 800bf18:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800bf1c:	e007      	b.n	800bf2e <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800bf1e:	79fb      	ldrb	r3, [r7, #7]
 800bf20:	f003 0304 	and.w	r3, r3, #4
 800bf24:	2b00      	cmp	r3, #0
 800bf26:	d002      	beq.n	800bf2e <f_open+0xfa>
 800bf28:	2308      	movs	r3, #8
 800bf2a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800bf2e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800bf32:	2b00      	cmp	r3, #0
 800bf34:	d168      	bne.n	800c008 <f_open+0x1d4>
 800bf36:	79fb      	ldrb	r3, [r7, #7]
 800bf38:	f003 0308 	and.w	r3, r3, #8
 800bf3c:	2b00      	cmp	r3, #0
 800bf3e:	d063      	beq.n	800c008 <f_open+0x1d4>
				dw = GET_FATTIME();
 800bf40:	f7fd fcfa 	bl	8009938 <get_fattime>
 800bf44:	65b8      	str	r0, [r7, #88]	; 0x58
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800bf46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bf48:	330e      	adds	r3, #14
 800bf4a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800bf4c:	4618      	mov	r0, r3
 800bf4e:	f7fd fe45 	bl	8009bdc <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800bf52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bf54:	3316      	adds	r3, #22
 800bf56:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800bf58:	4618      	mov	r0, r3
 800bf5a:	f7fd fe3f 	bl	8009bdc <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800bf5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bf60:	330b      	adds	r3, #11
 800bf62:	2220      	movs	r2, #32
 800bf64:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800bf66:	697b      	ldr	r3, [r7, #20]
 800bf68:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800bf6a:	4611      	mov	r1, r2
 800bf6c:	4618      	mov	r0, r3
 800bf6e:	f7fe fe17 	bl	800aba0 <ld_clust>
 800bf72:	6578      	str	r0, [r7, #84]	; 0x54
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800bf74:	697b      	ldr	r3, [r7, #20]
 800bf76:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800bf78:	2200      	movs	r2, #0
 800bf7a:	4618      	mov	r0, r3
 800bf7c:	f7fe fe2f 	bl	800abde <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800bf80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bf82:	331c      	adds	r3, #28
 800bf84:	2100      	movs	r1, #0
 800bf86:	4618      	mov	r0, r3
 800bf88:	f7fd fe28 	bl	8009bdc <st_dword>
					fs->wflag = 1;
 800bf8c:	697b      	ldr	r3, [r7, #20]
 800bf8e:	2201      	movs	r2, #1
 800bf90:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800bf92:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800bf94:	2b00      	cmp	r3, #0
 800bf96:	d037      	beq.n	800c008 <f_open+0x1d4>
						dw = fs->winsect;
 800bf98:	697b      	ldr	r3, [r7, #20]
 800bf9a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bf9c:	65bb      	str	r3, [r7, #88]	; 0x58
						res = remove_chain(&dj.obj, cl, 0);
 800bf9e:	f107 0318 	add.w	r3, r7, #24
 800bfa2:	2200      	movs	r2, #0
 800bfa4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800bfa6:	4618      	mov	r0, r3
 800bfa8:	f7fe fb1f 	bl	800a5ea <remove_chain>
 800bfac:	4603      	mov	r3, r0
 800bfae:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
						if (res == FR_OK) {
 800bfb2:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800bfb6:	2b00      	cmp	r3, #0
 800bfb8:	d126      	bne.n	800c008 <f_open+0x1d4>
							res = move_window(fs, dw);
 800bfba:	697b      	ldr	r3, [r7, #20]
 800bfbc:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800bfbe:	4618      	mov	r0, r3
 800bfc0:	f7fe f866 	bl	800a090 <move_window>
 800bfc4:	4603      	mov	r3, r0
 800bfc6:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800bfca:	697b      	ldr	r3, [r7, #20]
 800bfcc:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800bfce:	3a01      	subs	r2, #1
 800bfd0:	615a      	str	r2, [r3, #20]
 800bfd2:	e019      	b.n	800c008 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800bfd4:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800bfd8:	2b00      	cmp	r3, #0
 800bfda:	d115      	bne.n	800c008 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800bfdc:	7fbb      	ldrb	r3, [r7, #30]
 800bfde:	f003 0310 	and.w	r3, r3, #16
 800bfe2:	2b00      	cmp	r3, #0
 800bfe4:	d003      	beq.n	800bfee <f_open+0x1ba>
					res = FR_NO_FILE;
 800bfe6:	2304      	movs	r3, #4
 800bfe8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800bfec:	e00c      	b.n	800c008 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800bfee:	79fb      	ldrb	r3, [r7, #7]
 800bff0:	f003 0302 	and.w	r3, r3, #2
 800bff4:	2b00      	cmp	r3, #0
 800bff6:	d007      	beq.n	800c008 <f_open+0x1d4>
 800bff8:	7fbb      	ldrb	r3, [r7, #30]
 800bffa:	f003 0301 	and.w	r3, r3, #1
 800bffe:	2b00      	cmp	r3, #0
 800c000:	d002      	beq.n	800c008 <f_open+0x1d4>
						res = FR_DENIED;
 800c002:	2307      	movs	r3, #7
 800c004:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					}
				}
			}
		}
		if (res == FR_OK) {
 800c008:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800c00c:	2b00      	cmp	r3, #0
 800c00e:	d128      	bne.n	800c062 <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800c010:	79fb      	ldrb	r3, [r7, #7]
 800c012:	f003 0308 	and.w	r3, r3, #8
 800c016:	2b00      	cmp	r3, #0
 800c018:	d003      	beq.n	800c022 <f_open+0x1ee>
				mode |= FA_MODIFIED;
 800c01a:	79fb      	ldrb	r3, [r7, #7]
 800c01c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c020:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800c022:	697b      	ldr	r3, [r7, #20]
 800c024:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800c026:	68fb      	ldr	r3, [r7, #12]
 800c028:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 800c02a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c02c:	68fb      	ldr	r3, [r7, #12]
 800c02e:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800c030:	79fb      	ldrb	r3, [r7, #7]
 800c032:	f023 0301 	bic.w	r3, r3, #1
 800c036:	2b00      	cmp	r3, #0
 800c038:	bf14      	ite	ne
 800c03a:	2301      	movne	r3, #1
 800c03c:	2300      	moveq	r3, #0
 800c03e:	b2db      	uxtb	r3, r3
 800c040:	461a      	mov	r2, r3
 800c042:	f107 0318 	add.w	r3, r7, #24
 800c046:	4611      	mov	r1, r2
 800c048:	4618      	mov	r0, r3
 800c04a:	f7fd feef 	bl	8009e2c <inc_lock>
 800c04e:	4602      	mov	r2, r0
 800c050:	68fb      	ldr	r3, [r7, #12]
 800c052:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800c054:	68fb      	ldr	r3, [r7, #12]
 800c056:	691b      	ldr	r3, [r3, #16]
 800c058:	2b00      	cmp	r3, #0
 800c05a:	d102      	bne.n	800c062 <f_open+0x22e>
 800c05c:	2302      	movs	r3, #2
 800c05e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
		}
#endif

		if (res == FR_OK) {
 800c062:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800c066:	2b00      	cmp	r3, #0
 800c068:	f040 80a3 	bne.w	800c1b2 <f_open+0x37e>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800c06c:	697b      	ldr	r3, [r7, #20]
 800c06e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c070:	4611      	mov	r1, r2
 800c072:	4618      	mov	r0, r3
 800c074:	f7fe fd94 	bl	800aba0 <ld_clust>
 800c078:	4602      	mov	r2, r0
 800c07a:	68fb      	ldr	r3, [r7, #12]
 800c07c:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800c07e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c080:	331c      	adds	r3, #28
 800c082:	4618      	mov	r0, r3
 800c084:	f7fd fd6c 	bl	8009b60 <ld_dword>
 800c088:	4602      	mov	r2, r0
 800c08a:	68fb      	ldr	r3, [r7, #12]
 800c08c:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800c08e:	68fb      	ldr	r3, [r7, #12]
 800c090:	2200      	movs	r2, #0
 800c092:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800c094:	697a      	ldr	r2, [r7, #20]
 800c096:	68fb      	ldr	r3, [r7, #12]
 800c098:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800c09a:	697b      	ldr	r3, [r7, #20]
 800c09c:	88da      	ldrh	r2, [r3, #6]
 800c09e:	68fb      	ldr	r3, [r7, #12]
 800c0a0:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800c0a2:	68fb      	ldr	r3, [r7, #12]
 800c0a4:	79fa      	ldrb	r2, [r7, #7]
 800c0a6:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 800c0a8:	68fb      	ldr	r3, [r7, #12]
 800c0aa:	2200      	movs	r2, #0
 800c0ac:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800c0ae:	68fb      	ldr	r3, [r7, #12]
 800c0b0:	2200      	movs	r2, #0
 800c0b2:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800c0b4:	68fb      	ldr	r3, [r7, #12]
 800c0b6:	2200      	movs	r2, #0
 800c0b8:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800c0ba:	68fb      	ldr	r3, [r7, #12]
 800c0bc:	3330      	adds	r3, #48	; 0x30
 800c0be:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800c0c2:	2100      	movs	r1, #0
 800c0c4:	4618      	mov	r0, r3
 800c0c6:	f7fd fdd6 	bl	8009c76 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800c0ca:	79fb      	ldrb	r3, [r7, #7]
 800c0cc:	f003 0320 	and.w	r3, r3, #32
 800c0d0:	2b00      	cmp	r3, #0
 800c0d2:	d06e      	beq.n	800c1b2 <f_open+0x37e>
 800c0d4:	68fb      	ldr	r3, [r7, #12]
 800c0d6:	68db      	ldr	r3, [r3, #12]
 800c0d8:	2b00      	cmp	r3, #0
 800c0da:	d06a      	beq.n	800c1b2 <f_open+0x37e>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800c0dc:	68fb      	ldr	r3, [r7, #12]
 800c0de:	68da      	ldr	r2, [r3, #12]
 800c0e0:	68fb      	ldr	r3, [r7, #12]
 800c0e2:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800c0e4:	697b      	ldr	r3, [r7, #20]
 800c0e6:	895b      	ldrh	r3, [r3, #10]
 800c0e8:	461a      	mov	r2, r3
 800c0ea:	697b      	ldr	r3, [r7, #20]
 800c0ec:	899b      	ldrh	r3, [r3, #12]
 800c0ee:	fb02 f303 	mul.w	r3, r2, r3
 800c0f2:	653b      	str	r3, [r7, #80]	; 0x50
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800c0f4:	68fb      	ldr	r3, [r7, #12]
 800c0f6:	689b      	ldr	r3, [r3, #8]
 800c0f8:	663b      	str	r3, [r7, #96]	; 0x60
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800c0fa:	68fb      	ldr	r3, [r7, #12]
 800c0fc:	68db      	ldr	r3, [r3, #12]
 800c0fe:	65fb      	str	r3, [r7, #92]	; 0x5c
 800c100:	e016      	b.n	800c130 <f_open+0x2fc>
					clst = get_fat(&fp->obj, clst);
 800c102:	68fb      	ldr	r3, [r7, #12]
 800c104:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800c106:	4618      	mov	r0, r3
 800c108:	f7fe f87f 	bl	800a20a <get_fat>
 800c10c:	6638      	str	r0, [r7, #96]	; 0x60
					if (clst <= 1) res = FR_INT_ERR;
 800c10e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800c110:	2b01      	cmp	r3, #1
 800c112:	d802      	bhi.n	800c11a <f_open+0x2e6>
 800c114:	2302      	movs	r3, #2
 800c116:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800c11a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800c11c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c120:	d102      	bne.n	800c128 <f_open+0x2f4>
 800c122:	2301      	movs	r3, #1
 800c124:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800c128:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800c12a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c12c:	1ad3      	subs	r3, r2, r3
 800c12e:	65fb      	str	r3, [r7, #92]	; 0x5c
 800c130:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800c134:	2b00      	cmp	r3, #0
 800c136:	d103      	bne.n	800c140 <f_open+0x30c>
 800c138:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800c13a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c13c:	429a      	cmp	r2, r3
 800c13e:	d8e0      	bhi.n	800c102 <f_open+0x2ce>
				}
				fp->clust = clst;
 800c140:	68fb      	ldr	r3, [r7, #12]
 800c142:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800c144:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800c146:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800c14a:	2b00      	cmp	r3, #0
 800c14c:	d131      	bne.n	800c1b2 <f_open+0x37e>
 800c14e:	697b      	ldr	r3, [r7, #20]
 800c150:	899b      	ldrh	r3, [r3, #12]
 800c152:	461a      	mov	r2, r3
 800c154:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c156:	fbb3 f1f2 	udiv	r1, r3, r2
 800c15a:	fb01 f202 	mul.w	r2, r1, r2
 800c15e:	1a9b      	subs	r3, r3, r2
 800c160:	2b00      	cmp	r3, #0
 800c162:	d026      	beq.n	800c1b2 <f_open+0x37e>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800c164:	697b      	ldr	r3, [r7, #20]
 800c166:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800c168:	4618      	mov	r0, r3
 800c16a:	f7fe f82f 	bl	800a1cc <clust2sect>
 800c16e:	64f8      	str	r0, [r7, #76]	; 0x4c
 800c170:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c172:	2b00      	cmp	r3, #0
 800c174:	d103      	bne.n	800c17e <f_open+0x34a>
						res = FR_INT_ERR;
 800c176:	2302      	movs	r3, #2
 800c178:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800c17c:	e019      	b.n	800c1b2 <f_open+0x37e>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800c17e:	697b      	ldr	r3, [r7, #20]
 800c180:	899b      	ldrh	r3, [r3, #12]
 800c182:	461a      	mov	r2, r3
 800c184:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c186:	fbb3 f2f2 	udiv	r2, r3, r2
 800c18a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c18c:	441a      	add	r2, r3
 800c18e:	68fb      	ldr	r3, [r7, #12]
 800c190:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800c192:	697b      	ldr	r3, [r7, #20]
 800c194:	7858      	ldrb	r0, [r3, #1]
 800c196:	68fb      	ldr	r3, [r7, #12]
 800c198:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800c19c:	68fb      	ldr	r3, [r7, #12]
 800c19e:	6a1a      	ldr	r2, [r3, #32]
 800c1a0:	2301      	movs	r3, #1
 800c1a2:	f7fd fc67 	bl	8009a74 <disk_read>
 800c1a6:	4603      	mov	r3, r0
 800c1a8:	2b00      	cmp	r3, #0
 800c1aa:	d002      	beq.n	800c1b2 <f_open+0x37e>
 800c1ac:	2301      	movs	r3, #1
 800c1ae:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800c1b2:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800c1b6:	2b00      	cmp	r3, #0
 800c1b8:	d002      	beq.n	800c1c0 <f_open+0x38c>
 800c1ba:	68fb      	ldr	r3, [r7, #12]
 800c1bc:	2200      	movs	r2, #0
 800c1be:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800c1c0:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 800c1c4:	4618      	mov	r0, r3
 800c1c6:	3768      	adds	r7, #104	; 0x68
 800c1c8:	46bd      	mov	sp, r7
 800c1ca:	bd80      	pop	{r7, pc}

0800c1cc <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 800c1cc:	b580      	push	{r7, lr}
 800c1ce:	b08c      	sub	sp, #48	; 0x30
 800c1d0:	af00      	add	r7, sp, #0
 800c1d2:	60f8      	str	r0, [r7, #12]
 800c1d4:	60b9      	str	r1, [r7, #8]
 800c1d6:	607a      	str	r2, [r7, #4]
 800c1d8:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 800c1da:	68bb      	ldr	r3, [r7, #8]
 800c1dc:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 800c1de:	683b      	ldr	r3, [r7, #0]
 800c1e0:	2200      	movs	r2, #0
 800c1e2:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 800c1e4:	68fb      	ldr	r3, [r7, #12]
 800c1e6:	f107 0210 	add.w	r2, r7, #16
 800c1ea:	4611      	mov	r1, r2
 800c1ec:	4618      	mov	r0, r3
 800c1ee:	f7ff fda5 	bl	800bd3c <validate>
 800c1f2:	4603      	mov	r3, r0
 800c1f4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800c1f8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800c1fc:	2b00      	cmp	r3, #0
 800c1fe:	d107      	bne.n	800c210 <f_write+0x44>
 800c200:	68fb      	ldr	r3, [r7, #12]
 800c202:	7d5b      	ldrb	r3, [r3, #21]
 800c204:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800c208:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800c20c:	2b00      	cmp	r3, #0
 800c20e:	d002      	beq.n	800c216 <f_write+0x4a>
 800c210:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800c214:	e16a      	b.n	800c4ec <f_write+0x320>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 800c216:	68fb      	ldr	r3, [r7, #12]
 800c218:	7d1b      	ldrb	r3, [r3, #20]
 800c21a:	f003 0302 	and.w	r3, r3, #2
 800c21e:	2b00      	cmp	r3, #0
 800c220:	d101      	bne.n	800c226 <f_write+0x5a>
 800c222:	2307      	movs	r3, #7
 800c224:	e162      	b.n	800c4ec <f_write+0x320>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 800c226:	68fb      	ldr	r3, [r7, #12]
 800c228:	699a      	ldr	r2, [r3, #24]
 800c22a:	687b      	ldr	r3, [r7, #4]
 800c22c:	441a      	add	r2, r3
 800c22e:	68fb      	ldr	r3, [r7, #12]
 800c230:	699b      	ldr	r3, [r3, #24]
 800c232:	429a      	cmp	r2, r3
 800c234:	f080 814c 	bcs.w	800c4d0 <f_write+0x304>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 800c238:	68fb      	ldr	r3, [r7, #12]
 800c23a:	699b      	ldr	r3, [r3, #24]
 800c23c:	43db      	mvns	r3, r3
 800c23e:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 800c240:	e146      	b.n	800c4d0 <f_write+0x304>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 800c242:	68fb      	ldr	r3, [r7, #12]
 800c244:	699b      	ldr	r3, [r3, #24]
 800c246:	693a      	ldr	r2, [r7, #16]
 800c248:	8992      	ldrh	r2, [r2, #12]
 800c24a:	fbb3 f1f2 	udiv	r1, r3, r2
 800c24e:	fb01 f202 	mul.w	r2, r1, r2
 800c252:	1a9b      	subs	r3, r3, r2
 800c254:	2b00      	cmp	r3, #0
 800c256:	f040 80f1 	bne.w	800c43c <f_write+0x270>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 800c25a:	68fb      	ldr	r3, [r7, #12]
 800c25c:	699b      	ldr	r3, [r3, #24]
 800c25e:	693a      	ldr	r2, [r7, #16]
 800c260:	8992      	ldrh	r2, [r2, #12]
 800c262:	fbb3 f3f2 	udiv	r3, r3, r2
 800c266:	693a      	ldr	r2, [r7, #16]
 800c268:	8952      	ldrh	r2, [r2, #10]
 800c26a:	3a01      	subs	r2, #1
 800c26c:	4013      	ands	r3, r2
 800c26e:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 800c270:	69bb      	ldr	r3, [r7, #24]
 800c272:	2b00      	cmp	r3, #0
 800c274:	d143      	bne.n	800c2fe <f_write+0x132>
				if (fp->fptr == 0) {		/* On the top of the file? */
 800c276:	68fb      	ldr	r3, [r7, #12]
 800c278:	699b      	ldr	r3, [r3, #24]
 800c27a:	2b00      	cmp	r3, #0
 800c27c:	d10c      	bne.n	800c298 <f_write+0xcc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 800c27e:	68fb      	ldr	r3, [r7, #12]
 800c280:	689b      	ldr	r3, [r3, #8]
 800c282:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 800c284:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c286:	2b00      	cmp	r3, #0
 800c288:	d11a      	bne.n	800c2c0 <f_write+0xf4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 800c28a:	68fb      	ldr	r3, [r7, #12]
 800c28c:	2100      	movs	r1, #0
 800c28e:	4618      	mov	r0, r3
 800c290:	f7fe fa10 	bl	800a6b4 <create_chain>
 800c294:	62b8      	str	r0, [r7, #40]	; 0x28
 800c296:	e013      	b.n	800c2c0 <f_write+0xf4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800c298:	68fb      	ldr	r3, [r7, #12]
 800c29a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c29c:	2b00      	cmp	r3, #0
 800c29e:	d007      	beq.n	800c2b0 <f_write+0xe4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800c2a0:	68fb      	ldr	r3, [r7, #12]
 800c2a2:	699b      	ldr	r3, [r3, #24]
 800c2a4:	4619      	mov	r1, r3
 800c2a6:	68f8      	ldr	r0, [r7, #12]
 800c2a8:	f7fe fa9c 	bl	800a7e4 <clmt_clust>
 800c2ac:	62b8      	str	r0, [r7, #40]	; 0x28
 800c2ae:	e007      	b.n	800c2c0 <f_write+0xf4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 800c2b0:	68fa      	ldr	r2, [r7, #12]
 800c2b2:	68fb      	ldr	r3, [r7, #12]
 800c2b4:	69db      	ldr	r3, [r3, #28]
 800c2b6:	4619      	mov	r1, r3
 800c2b8:	4610      	mov	r0, r2
 800c2ba:	f7fe f9fb 	bl	800a6b4 <create_chain>
 800c2be:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800c2c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c2c2:	2b00      	cmp	r3, #0
 800c2c4:	f000 8109 	beq.w	800c4da <f_write+0x30e>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 800c2c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c2ca:	2b01      	cmp	r3, #1
 800c2cc:	d104      	bne.n	800c2d8 <f_write+0x10c>
 800c2ce:	68fb      	ldr	r3, [r7, #12]
 800c2d0:	2202      	movs	r2, #2
 800c2d2:	755a      	strb	r2, [r3, #21]
 800c2d4:	2302      	movs	r3, #2
 800c2d6:	e109      	b.n	800c4ec <f_write+0x320>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800c2d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c2da:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c2de:	d104      	bne.n	800c2ea <f_write+0x11e>
 800c2e0:	68fb      	ldr	r3, [r7, #12]
 800c2e2:	2201      	movs	r2, #1
 800c2e4:	755a      	strb	r2, [r3, #21]
 800c2e6:	2301      	movs	r3, #1
 800c2e8:	e100      	b.n	800c4ec <f_write+0x320>
				fp->clust = clst;			/* Update current cluster */
 800c2ea:	68fb      	ldr	r3, [r7, #12]
 800c2ec:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c2ee:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 800c2f0:	68fb      	ldr	r3, [r7, #12]
 800c2f2:	689b      	ldr	r3, [r3, #8]
 800c2f4:	2b00      	cmp	r3, #0
 800c2f6:	d102      	bne.n	800c2fe <f_write+0x132>
 800c2f8:	68fb      	ldr	r3, [r7, #12]
 800c2fa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c2fc:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 800c2fe:	68fb      	ldr	r3, [r7, #12]
 800c300:	7d1b      	ldrb	r3, [r3, #20]
 800c302:	b25b      	sxtb	r3, r3
 800c304:	2b00      	cmp	r3, #0
 800c306:	da18      	bge.n	800c33a <f_write+0x16e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800c308:	693b      	ldr	r3, [r7, #16]
 800c30a:	7858      	ldrb	r0, [r3, #1]
 800c30c:	68fb      	ldr	r3, [r7, #12]
 800c30e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800c312:	68fb      	ldr	r3, [r7, #12]
 800c314:	6a1a      	ldr	r2, [r3, #32]
 800c316:	2301      	movs	r3, #1
 800c318:	f7fd fbcc 	bl	8009ab4 <disk_write>
 800c31c:	4603      	mov	r3, r0
 800c31e:	2b00      	cmp	r3, #0
 800c320:	d004      	beq.n	800c32c <f_write+0x160>
 800c322:	68fb      	ldr	r3, [r7, #12]
 800c324:	2201      	movs	r2, #1
 800c326:	755a      	strb	r2, [r3, #21]
 800c328:	2301      	movs	r3, #1
 800c32a:	e0df      	b.n	800c4ec <f_write+0x320>
				fp->flag &= (BYTE)~FA_DIRTY;
 800c32c:	68fb      	ldr	r3, [r7, #12]
 800c32e:	7d1b      	ldrb	r3, [r3, #20]
 800c330:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c334:	b2da      	uxtb	r2, r3
 800c336:	68fb      	ldr	r3, [r7, #12]
 800c338:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800c33a:	693a      	ldr	r2, [r7, #16]
 800c33c:	68fb      	ldr	r3, [r7, #12]
 800c33e:	69db      	ldr	r3, [r3, #28]
 800c340:	4619      	mov	r1, r3
 800c342:	4610      	mov	r0, r2
 800c344:	f7fd ff42 	bl	800a1cc <clust2sect>
 800c348:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800c34a:	697b      	ldr	r3, [r7, #20]
 800c34c:	2b00      	cmp	r3, #0
 800c34e:	d104      	bne.n	800c35a <f_write+0x18e>
 800c350:	68fb      	ldr	r3, [r7, #12]
 800c352:	2202      	movs	r2, #2
 800c354:	755a      	strb	r2, [r3, #21]
 800c356:	2302      	movs	r3, #2
 800c358:	e0c8      	b.n	800c4ec <f_write+0x320>
			sect += csect;
 800c35a:	697a      	ldr	r2, [r7, #20]
 800c35c:	69bb      	ldr	r3, [r7, #24]
 800c35e:	4413      	add	r3, r2
 800c360:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 800c362:	693b      	ldr	r3, [r7, #16]
 800c364:	899b      	ldrh	r3, [r3, #12]
 800c366:	461a      	mov	r2, r3
 800c368:	687b      	ldr	r3, [r7, #4]
 800c36a:	fbb3 f3f2 	udiv	r3, r3, r2
 800c36e:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 800c370:	6a3b      	ldr	r3, [r7, #32]
 800c372:	2b00      	cmp	r3, #0
 800c374:	d043      	beq.n	800c3fe <f_write+0x232>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800c376:	69ba      	ldr	r2, [r7, #24]
 800c378:	6a3b      	ldr	r3, [r7, #32]
 800c37a:	4413      	add	r3, r2
 800c37c:	693a      	ldr	r2, [r7, #16]
 800c37e:	8952      	ldrh	r2, [r2, #10]
 800c380:	4293      	cmp	r3, r2
 800c382:	d905      	bls.n	800c390 <f_write+0x1c4>
					cc = fs->csize - csect;
 800c384:	693b      	ldr	r3, [r7, #16]
 800c386:	895b      	ldrh	r3, [r3, #10]
 800c388:	461a      	mov	r2, r3
 800c38a:	69bb      	ldr	r3, [r7, #24]
 800c38c:	1ad3      	subs	r3, r2, r3
 800c38e:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800c390:	693b      	ldr	r3, [r7, #16]
 800c392:	7858      	ldrb	r0, [r3, #1]
 800c394:	6a3b      	ldr	r3, [r7, #32]
 800c396:	697a      	ldr	r2, [r7, #20]
 800c398:	69f9      	ldr	r1, [r7, #28]
 800c39a:	f7fd fb8b 	bl	8009ab4 <disk_write>
 800c39e:	4603      	mov	r3, r0
 800c3a0:	2b00      	cmp	r3, #0
 800c3a2:	d004      	beq.n	800c3ae <f_write+0x1e2>
 800c3a4:	68fb      	ldr	r3, [r7, #12]
 800c3a6:	2201      	movs	r2, #1
 800c3a8:	755a      	strb	r2, [r3, #21]
 800c3aa:	2301      	movs	r3, #1
 800c3ac:	e09e      	b.n	800c4ec <f_write+0x320>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 800c3ae:	68fb      	ldr	r3, [r7, #12]
 800c3b0:	6a1a      	ldr	r2, [r3, #32]
 800c3b2:	697b      	ldr	r3, [r7, #20]
 800c3b4:	1ad3      	subs	r3, r2, r3
 800c3b6:	6a3a      	ldr	r2, [r7, #32]
 800c3b8:	429a      	cmp	r2, r3
 800c3ba:	d918      	bls.n	800c3ee <f_write+0x222>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 800c3bc:	68fb      	ldr	r3, [r7, #12]
 800c3be:	f103 0030 	add.w	r0, r3, #48	; 0x30
 800c3c2:	68fb      	ldr	r3, [r7, #12]
 800c3c4:	6a1a      	ldr	r2, [r3, #32]
 800c3c6:	697b      	ldr	r3, [r7, #20]
 800c3c8:	1ad3      	subs	r3, r2, r3
 800c3ca:	693a      	ldr	r2, [r7, #16]
 800c3cc:	8992      	ldrh	r2, [r2, #12]
 800c3ce:	fb02 f303 	mul.w	r3, r2, r3
 800c3d2:	69fa      	ldr	r2, [r7, #28]
 800c3d4:	18d1      	adds	r1, r2, r3
 800c3d6:	693b      	ldr	r3, [r7, #16]
 800c3d8:	899b      	ldrh	r3, [r3, #12]
 800c3da:	461a      	mov	r2, r3
 800c3dc:	f7fd fc2a 	bl	8009c34 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 800c3e0:	68fb      	ldr	r3, [r7, #12]
 800c3e2:	7d1b      	ldrb	r3, [r3, #20]
 800c3e4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c3e8:	b2da      	uxtb	r2, r3
 800c3ea:	68fb      	ldr	r3, [r7, #12]
 800c3ec:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 800c3ee:	693b      	ldr	r3, [r7, #16]
 800c3f0:	899b      	ldrh	r3, [r3, #12]
 800c3f2:	461a      	mov	r2, r3
 800c3f4:	6a3b      	ldr	r3, [r7, #32]
 800c3f6:	fb02 f303 	mul.w	r3, r2, r3
 800c3fa:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 800c3fc:	e04b      	b.n	800c496 <f_write+0x2ca>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800c3fe:	68fb      	ldr	r3, [r7, #12]
 800c400:	6a1b      	ldr	r3, [r3, #32]
 800c402:	697a      	ldr	r2, [r7, #20]
 800c404:	429a      	cmp	r2, r3
 800c406:	d016      	beq.n	800c436 <f_write+0x26a>
				fp->fptr < fp->obj.objsize &&
 800c408:	68fb      	ldr	r3, [r7, #12]
 800c40a:	699a      	ldr	r2, [r3, #24]
 800c40c:	68fb      	ldr	r3, [r7, #12]
 800c40e:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800c410:	429a      	cmp	r2, r3
 800c412:	d210      	bcs.n	800c436 <f_write+0x26a>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 800c414:	693b      	ldr	r3, [r7, #16]
 800c416:	7858      	ldrb	r0, [r3, #1]
 800c418:	68fb      	ldr	r3, [r7, #12]
 800c41a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800c41e:	2301      	movs	r3, #1
 800c420:	697a      	ldr	r2, [r7, #20]
 800c422:	f7fd fb27 	bl	8009a74 <disk_read>
 800c426:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 800c428:	2b00      	cmp	r3, #0
 800c42a:	d004      	beq.n	800c436 <f_write+0x26a>
					ABORT(fs, FR_DISK_ERR);
 800c42c:	68fb      	ldr	r3, [r7, #12]
 800c42e:	2201      	movs	r2, #1
 800c430:	755a      	strb	r2, [r3, #21]
 800c432:	2301      	movs	r3, #1
 800c434:	e05a      	b.n	800c4ec <f_write+0x320>
			}
#endif
			fp->sect = sect;
 800c436:	68fb      	ldr	r3, [r7, #12]
 800c438:	697a      	ldr	r2, [r7, #20]
 800c43a:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800c43c:	693b      	ldr	r3, [r7, #16]
 800c43e:	899b      	ldrh	r3, [r3, #12]
 800c440:	4618      	mov	r0, r3
 800c442:	68fb      	ldr	r3, [r7, #12]
 800c444:	699b      	ldr	r3, [r3, #24]
 800c446:	693a      	ldr	r2, [r7, #16]
 800c448:	8992      	ldrh	r2, [r2, #12]
 800c44a:	fbb3 f1f2 	udiv	r1, r3, r2
 800c44e:	fb01 f202 	mul.w	r2, r1, r2
 800c452:	1a9b      	subs	r3, r3, r2
 800c454:	1ac3      	subs	r3, r0, r3
 800c456:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 800c458:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c45a:	687b      	ldr	r3, [r7, #4]
 800c45c:	429a      	cmp	r2, r3
 800c45e:	d901      	bls.n	800c464 <f_write+0x298>
 800c460:	687b      	ldr	r3, [r7, #4]
 800c462:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 800c464:	68fb      	ldr	r3, [r7, #12]
 800c466:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800c46a:	68fb      	ldr	r3, [r7, #12]
 800c46c:	699b      	ldr	r3, [r3, #24]
 800c46e:	693a      	ldr	r2, [r7, #16]
 800c470:	8992      	ldrh	r2, [r2, #12]
 800c472:	fbb3 f0f2 	udiv	r0, r3, r2
 800c476:	fb00 f202 	mul.w	r2, r0, r2
 800c47a:	1a9b      	subs	r3, r3, r2
 800c47c:	440b      	add	r3, r1
 800c47e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c480:	69f9      	ldr	r1, [r7, #28]
 800c482:	4618      	mov	r0, r3
 800c484:	f7fd fbd6 	bl	8009c34 <mem_cpy>
		fp->flag |= FA_DIRTY;
 800c488:	68fb      	ldr	r3, [r7, #12]
 800c48a:	7d1b      	ldrb	r3, [r3, #20]
 800c48c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800c490:	b2da      	uxtb	r2, r3
 800c492:	68fb      	ldr	r3, [r7, #12]
 800c494:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 800c496:	69fa      	ldr	r2, [r7, #28]
 800c498:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c49a:	4413      	add	r3, r2
 800c49c:	61fb      	str	r3, [r7, #28]
 800c49e:	68fb      	ldr	r3, [r7, #12]
 800c4a0:	699a      	ldr	r2, [r3, #24]
 800c4a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c4a4:	441a      	add	r2, r3
 800c4a6:	68fb      	ldr	r3, [r7, #12]
 800c4a8:	619a      	str	r2, [r3, #24]
 800c4aa:	68fb      	ldr	r3, [r7, #12]
 800c4ac:	68da      	ldr	r2, [r3, #12]
 800c4ae:	68fb      	ldr	r3, [r7, #12]
 800c4b0:	699b      	ldr	r3, [r3, #24]
 800c4b2:	429a      	cmp	r2, r3
 800c4b4:	bf38      	it	cc
 800c4b6:	461a      	movcc	r2, r3
 800c4b8:	68fb      	ldr	r3, [r7, #12]
 800c4ba:	60da      	str	r2, [r3, #12]
 800c4bc:	683b      	ldr	r3, [r7, #0]
 800c4be:	681a      	ldr	r2, [r3, #0]
 800c4c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c4c2:	441a      	add	r2, r3
 800c4c4:	683b      	ldr	r3, [r7, #0]
 800c4c6:	601a      	str	r2, [r3, #0]
 800c4c8:	687a      	ldr	r2, [r7, #4]
 800c4ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c4cc:	1ad3      	subs	r3, r2, r3
 800c4ce:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 800c4d0:	687b      	ldr	r3, [r7, #4]
 800c4d2:	2b00      	cmp	r3, #0
 800c4d4:	f47f aeb5 	bne.w	800c242 <f_write+0x76>
 800c4d8:	e000      	b.n	800c4dc <f_write+0x310>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800c4da:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 800c4dc:	68fb      	ldr	r3, [r7, #12]
 800c4de:	7d1b      	ldrb	r3, [r3, #20]
 800c4e0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c4e4:	b2da      	uxtb	r2, r3
 800c4e6:	68fb      	ldr	r3, [r7, #12]
 800c4e8:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 800c4ea:	2300      	movs	r3, #0
}
 800c4ec:	4618      	mov	r0, r3
 800c4ee:	3730      	adds	r7, #48	; 0x30
 800c4f0:	46bd      	mov	sp, r7
 800c4f2:	bd80      	pop	{r7, pc}

0800c4f4 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800c4f4:	b580      	push	{r7, lr}
 800c4f6:	b086      	sub	sp, #24
 800c4f8:	af00      	add	r7, sp, #0
 800c4fa:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800c4fc:	687b      	ldr	r3, [r7, #4]
 800c4fe:	f107 0208 	add.w	r2, r7, #8
 800c502:	4611      	mov	r1, r2
 800c504:	4618      	mov	r0, r3
 800c506:	f7ff fc19 	bl	800bd3c <validate>
 800c50a:	4603      	mov	r3, r0
 800c50c:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800c50e:	7dfb      	ldrb	r3, [r7, #23]
 800c510:	2b00      	cmp	r3, #0
 800c512:	d168      	bne.n	800c5e6 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800c514:	687b      	ldr	r3, [r7, #4]
 800c516:	7d1b      	ldrb	r3, [r3, #20]
 800c518:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c51c:	2b00      	cmp	r3, #0
 800c51e:	d062      	beq.n	800c5e6 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800c520:	687b      	ldr	r3, [r7, #4]
 800c522:	7d1b      	ldrb	r3, [r3, #20]
 800c524:	b25b      	sxtb	r3, r3
 800c526:	2b00      	cmp	r3, #0
 800c528:	da15      	bge.n	800c556 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800c52a:	68bb      	ldr	r3, [r7, #8]
 800c52c:	7858      	ldrb	r0, [r3, #1]
 800c52e:	687b      	ldr	r3, [r7, #4]
 800c530:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800c534:	687b      	ldr	r3, [r7, #4]
 800c536:	6a1a      	ldr	r2, [r3, #32]
 800c538:	2301      	movs	r3, #1
 800c53a:	f7fd fabb 	bl	8009ab4 <disk_write>
 800c53e:	4603      	mov	r3, r0
 800c540:	2b00      	cmp	r3, #0
 800c542:	d001      	beq.n	800c548 <f_sync+0x54>
 800c544:	2301      	movs	r3, #1
 800c546:	e04f      	b.n	800c5e8 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 800c548:	687b      	ldr	r3, [r7, #4]
 800c54a:	7d1b      	ldrb	r3, [r3, #20]
 800c54c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c550:	b2da      	uxtb	r2, r3
 800c552:	687b      	ldr	r3, [r7, #4]
 800c554:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800c556:	f7fd f9ef 	bl	8009938 <get_fattime>
 800c55a:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800c55c:	68ba      	ldr	r2, [r7, #8]
 800c55e:	687b      	ldr	r3, [r7, #4]
 800c560:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c562:	4619      	mov	r1, r3
 800c564:	4610      	mov	r0, r2
 800c566:	f7fd fd93 	bl	800a090 <move_window>
 800c56a:	4603      	mov	r3, r0
 800c56c:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800c56e:	7dfb      	ldrb	r3, [r7, #23]
 800c570:	2b00      	cmp	r3, #0
 800c572:	d138      	bne.n	800c5e6 <f_sync+0xf2>
					dir = fp->dir_ptr;
 800c574:	687b      	ldr	r3, [r7, #4]
 800c576:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c578:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800c57a:	68fb      	ldr	r3, [r7, #12]
 800c57c:	330b      	adds	r3, #11
 800c57e:	781a      	ldrb	r2, [r3, #0]
 800c580:	68fb      	ldr	r3, [r7, #12]
 800c582:	330b      	adds	r3, #11
 800c584:	f042 0220 	orr.w	r2, r2, #32
 800c588:	b2d2      	uxtb	r2, r2
 800c58a:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800c58c:	687b      	ldr	r3, [r7, #4]
 800c58e:	6818      	ldr	r0, [r3, #0]
 800c590:	687b      	ldr	r3, [r7, #4]
 800c592:	689b      	ldr	r3, [r3, #8]
 800c594:	461a      	mov	r2, r3
 800c596:	68f9      	ldr	r1, [r7, #12]
 800c598:	f7fe fb21 	bl	800abde <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800c59c:	68fb      	ldr	r3, [r7, #12]
 800c59e:	f103 021c 	add.w	r2, r3, #28
 800c5a2:	687b      	ldr	r3, [r7, #4]
 800c5a4:	68db      	ldr	r3, [r3, #12]
 800c5a6:	4619      	mov	r1, r3
 800c5a8:	4610      	mov	r0, r2
 800c5aa:	f7fd fb17 	bl	8009bdc <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800c5ae:	68fb      	ldr	r3, [r7, #12]
 800c5b0:	3316      	adds	r3, #22
 800c5b2:	6939      	ldr	r1, [r7, #16]
 800c5b4:	4618      	mov	r0, r3
 800c5b6:	f7fd fb11 	bl	8009bdc <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800c5ba:	68fb      	ldr	r3, [r7, #12]
 800c5bc:	3312      	adds	r3, #18
 800c5be:	2100      	movs	r1, #0
 800c5c0:	4618      	mov	r0, r3
 800c5c2:	f7fd faf0 	bl	8009ba6 <st_word>
					fs->wflag = 1;
 800c5c6:	68bb      	ldr	r3, [r7, #8]
 800c5c8:	2201      	movs	r2, #1
 800c5ca:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800c5cc:	68bb      	ldr	r3, [r7, #8]
 800c5ce:	4618      	mov	r0, r3
 800c5d0:	f7fd fd8c 	bl	800a0ec <sync_fs>
 800c5d4:	4603      	mov	r3, r0
 800c5d6:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800c5d8:	687b      	ldr	r3, [r7, #4]
 800c5da:	7d1b      	ldrb	r3, [r3, #20]
 800c5dc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c5e0:	b2da      	uxtb	r2, r3
 800c5e2:	687b      	ldr	r3, [r7, #4]
 800c5e4:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800c5e6:	7dfb      	ldrb	r3, [r7, #23]
}
 800c5e8:	4618      	mov	r0, r3
 800c5ea:	3718      	adds	r7, #24
 800c5ec:	46bd      	mov	sp, r7
 800c5ee:	bd80      	pop	{r7, pc}

0800c5f0 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800c5f0:	b580      	push	{r7, lr}
 800c5f2:	b084      	sub	sp, #16
 800c5f4:	af00      	add	r7, sp, #0
 800c5f6:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800c5f8:	6878      	ldr	r0, [r7, #4]
 800c5fa:	f7ff ff7b 	bl	800c4f4 <f_sync>
 800c5fe:	4603      	mov	r3, r0
 800c600:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800c602:	7bfb      	ldrb	r3, [r7, #15]
 800c604:	2b00      	cmp	r3, #0
 800c606:	d118      	bne.n	800c63a <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800c608:	687b      	ldr	r3, [r7, #4]
 800c60a:	f107 0208 	add.w	r2, r7, #8
 800c60e:	4611      	mov	r1, r2
 800c610:	4618      	mov	r0, r3
 800c612:	f7ff fb93 	bl	800bd3c <validate>
 800c616:	4603      	mov	r3, r0
 800c618:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800c61a:	7bfb      	ldrb	r3, [r7, #15]
 800c61c:	2b00      	cmp	r3, #0
 800c61e:	d10c      	bne.n	800c63a <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800c620:	687b      	ldr	r3, [r7, #4]
 800c622:	691b      	ldr	r3, [r3, #16]
 800c624:	4618      	mov	r0, r3
 800c626:	f7fd fc8f 	bl	8009f48 <dec_lock>
 800c62a:	4603      	mov	r3, r0
 800c62c:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800c62e:	7bfb      	ldrb	r3, [r7, #15]
 800c630:	2b00      	cmp	r3, #0
 800c632:	d102      	bne.n	800c63a <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800c634:	687b      	ldr	r3, [r7, #4]
 800c636:	2200      	movs	r2, #0
 800c638:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 800c63a:	7bfb      	ldrb	r3, [r7, #15]
}
 800c63c:	4618      	mov	r0, r3
 800c63e:	3710      	adds	r7, #16
 800c640:	46bd      	mov	sp, r7
 800c642:	bd80      	pop	{r7, pc}

0800c644 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800c644:	b480      	push	{r7}
 800c646:	b087      	sub	sp, #28
 800c648:	af00      	add	r7, sp, #0
 800c64a:	60f8      	str	r0, [r7, #12]
 800c64c:	60b9      	str	r1, [r7, #8]
 800c64e:	4613      	mov	r3, r2
 800c650:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800c652:	2301      	movs	r3, #1
 800c654:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800c656:	2300      	movs	r3, #0
 800c658:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800c65a:	4b1f      	ldr	r3, [pc, #124]	; (800c6d8 <FATFS_LinkDriverEx+0x94>)
 800c65c:	7a5b      	ldrb	r3, [r3, #9]
 800c65e:	b2db      	uxtb	r3, r3
 800c660:	2b00      	cmp	r3, #0
 800c662:	d131      	bne.n	800c6c8 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800c664:	4b1c      	ldr	r3, [pc, #112]	; (800c6d8 <FATFS_LinkDriverEx+0x94>)
 800c666:	7a5b      	ldrb	r3, [r3, #9]
 800c668:	b2db      	uxtb	r3, r3
 800c66a:	461a      	mov	r2, r3
 800c66c:	4b1a      	ldr	r3, [pc, #104]	; (800c6d8 <FATFS_LinkDriverEx+0x94>)
 800c66e:	2100      	movs	r1, #0
 800c670:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800c672:	4b19      	ldr	r3, [pc, #100]	; (800c6d8 <FATFS_LinkDriverEx+0x94>)
 800c674:	7a5b      	ldrb	r3, [r3, #9]
 800c676:	b2db      	uxtb	r3, r3
 800c678:	4a17      	ldr	r2, [pc, #92]	; (800c6d8 <FATFS_LinkDriverEx+0x94>)
 800c67a:	009b      	lsls	r3, r3, #2
 800c67c:	4413      	add	r3, r2
 800c67e:	68fa      	ldr	r2, [r7, #12]
 800c680:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800c682:	4b15      	ldr	r3, [pc, #84]	; (800c6d8 <FATFS_LinkDriverEx+0x94>)
 800c684:	7a5b      	ldrb	r3, [r3, #9]
 800c686:	b2db      	uxtb	r3, r3
 800c688:	461a      	mov	r2, r3
 800c68a:	4b13      	ldr	r3, [pc, #76]	; (800c6d8 <FATFS_LinkDriverEx+0x94>)
 800c68c:	4413      	add	r3, r2
 800c68e:	79fa      	ldrb	r2, [r7, #7]
 800c690:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800c692:	4b11      	ldr	r3, [pc, #68]	; (800c6d8 <FATFS_LinkDriverEx+0x94>)
 800c694:	7a5b      	ldrb	r3, [r3, #9]
 800c696:	b2db      	uxtb	r3, r3
 800c698:	1c5a      	adds	r2, r3, #1
 800c69a:	b2d1      	uxtb	r1, r2
 800c69c:	4a0e      	ldr	r2, [pc, #56]	; (800c6d8 <FATFS_LinkDriverEx+0x94>)
 800c69e:	7251      	strb	r1, [r2, #9]
 800c6a0:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800c6a2:	7dbb      	ldrb	r3, [r7, #22]
 800c6a4:	3330      	adds	r3, #48	; 0x30
 800c6a6:	b2da      	uxtb	r2, r3
 800c6a8:	68bb      	ldr	r3, [r7, #8]
 800c6aa:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800c6ac:	68bb      	ldr	r3, [r7, #8]
 800c6ae:	3301      	adds	r3, #1
 800c6b0:	223a      	movs	r2, #58	; 0x3a
 800c6b2:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800c6b4:	68bb      	ldr	r3, [r7, #8]
 800c6b6:	3302      	adds	r3, #2
 800c6b8:	222f      	movs	r2, #47	; 0x2f
 800c6ba:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800c6bc:	68bb      	ldr	r3, [r7, #8]
 800c6be:	3303      	adds	r3, #3
 800c6c0:	2200      	movs	r2, #0
 800c6c2:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800c6c4:	2300      	movs	r3, #0
 800c6c6:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800c6c8:	7dfb      	ldrb	r3, [r7, #23]
}
 800c6ca:	4618      	mov	r0, r3
 800c6cc:	371c      	adds	r7, #28
 800c6ce:	46bd      	mov	sp, r7
 800c6d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6d4:	4770      	bx	lr
 800c6d6:	bf00      	nop
 800c6d8:	20002818 	.word	0x20002818

0800c6dc <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800c6dc:	b580      	push	{r7, lr}
 800c6de:	b082      	sub	sp, #8
 800c6e0:	af00      	add	r7, sp, #0
 800c6e2:	6078      	str	r0, [r7, #4]
 800c6e4:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800c6e6:	2200      	movs	r2, #0
 800c6e8:	6839      	ldr	r1, [r7, #0]
 800c6ea:	6878      	ldr	r0, [r7, #4]
 800c6ec:	f7ff ffaa 	bl	800c644 <FATFS_LinkDriverEx>
 800c6f0:	4603      	mov	r3, r0
}
 800c6f2:	4618      	mov	r0, r3
 800c6f4:	3708      	adds	r7, #8
 800c6f6:	46bd      	mov	sp, r7
 800c6f8:	bd80      	pop	{r7, pc}
	...

0800c6fc <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 800c6fc:	b480      	push	{r7}
 800c6fe:	b085      	sub	sp, #20
 800c700:	af00      	add	r7, sp, #0
 800c702:	4603      	mov	r3, r0
 800c704:	6039      	str	r1, [r7, #0]
 800c706:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 800c708:	88fb      	ldrh	r3, [r7, #6]
 800c70a:	2b7f      	cmp	r3, #127	; 0x7f
 800c70c:	d802      	bhi.n	800c714 <ff_convert+0x18>
		c = chr;
 800c70e:	88fb      	ldrh	r3, [r7, #6]
 800c710:	81fb      	strh	r3, [r7, #14]
 800c712:	e025      	b.n	800c760 <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 800c714:	683b      	ldr	r3, [r7, #0]
 800c716:	2b00      	cmp	r3, #0
 800c718:	d00b      	beq.n	800c732 <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 800c71a:	88fb      	ldrh	r3, [r7, #6]
 800c71c:	2bff      	cmp	r3, #255	; 0xff
 800c71e:	d805      	bhi.n	800c72c <ff_convert+0x30>
 800c720:	88fb      	ldrh	r3, [r7, #6]
 800c722:	3b80      	subs	r3, #128	; 0x80
 800c724:	4a12      	ldr	r2, [pc, #72]	; (800c770 <ff_convert+0x74>)
 800c726:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c72a:	e000      	b.n	800c72e <ff_convert+0x32>
 800c72c:	2300      	movs	r3, #0
 800c72e:	81fb      	strh	r3, [r7, #14]
 800c730:	e016      	b.n	800c760 <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 800c732:	2300      	movs	r3, #0
 800c734:	81fb      	strh	r3, [r7, #14]
 800c736:	e009      	b.n	800c74c <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 800c738:	89fb      	ldrh	r3, [r7, #14]
 800c73a:	4a0d      	ldr	r2, [pc, #52]	; (800c770 <ff_convert+0x74>)
 800c73c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c740:	88fa      	ldrh	r2, [r7, #6]
 800c742:	429a      	cmp	r2, r3
 800c744:	d006      	beq.n	800c754 <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 800c746:	89fb      	ldrh	r3, [r7, #14]
 800c748:	3301      	adds	r3, #1
 800c74a:	81fb      	strh	r3, [r7, #14]
 800c74c:	89fb      	ldrh	r3, [r7, #14]
 800c74e:	2b7f      	cmp	r3, #127	; 0x7f
 800c750:	d9f2      	bls.n	800c738 <ff_convert+0x3c>
 800c752:	e000      	b.n	800c756 <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 800c754:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 800c756:	89fb      	ldrh	r3, [r7, #14]
 800c758:	3380      	adds	r3, #128	; 0x80
 800c75a:	b29b      	uxth	r3, r3
 800c75c:	b2db      	uxtb	r3, r3
 800c75e:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 800c760:	89fb      	ldrh	r3, [r7, #14]
}
 800c762:	4618      	mov	r0, r3
 800c764:	3714      	adds	r7, #20
 800c766:	46bd      	mov	sp, r7
 800c768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c76c:	4770      	bx	lr
 800c76e:	bf00      	nop
 800c770:	0800d37c 	.word	0x0800d37c

0800c774 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 800c774:	b480      	push	{r7}
 800c776:	b087      	sub	sp, #28
 800c778:	af00      	add	r7, sp, #0
 800c77a:	4603      	mov	r3, r0
 800c77c:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 800c77e:	88fb      	ldrh	r3, [r7, #6]
 800c780:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c784:	d201      	bcs.n	800c78a <ff_wtoupper+0x16>
 800c786:	4b3e      	ldr	r3, [pc, #248]	; (800c880 <ff_wtoupper+0x10c>)
 800c788:	e000      	b.n	800c78c <ff_wtoupper+0x18>
 800c78a:	4b3e      	ldr	r3, [pc, #248]	; (800c884 <ff_wtoupper+0x110>)
 800c78c:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 800c78e:	697b      	ldr	r3, [r7, #20]
 800c790:	1c9a      	adds	r2, r3, #2
 800c792:	617a      	str	r2, [r7, #20]
 800c794:	881b      	ldrh	r3, [r3, #0]
 800c796:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 800c798:	8a7b      	ldrh	r3, [r7, #18]
 800c79a:	2b00      	cmp	r3, #0
 800c79c:	d068      	beq.n	800c870 <ff_wtoupper+0xfc>
 800c79e:	88fa      	ldrh	r2, [r7, #6]
 800c7a0:	8a7b      	ldrh	r3, [r7, #18]
 800c7a2:	429a      	cmp	r2, r3
 800c7a4:	d364      	bcc.n	800c870 <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 800c7a6:	697b      	ldr	r3, [r7, #20]
 800c7a8:	1c9a      	adds	r2, r3, #2
 800c7aa:	617a      	str	r2, [r7, #20]
 800c7ac:	881b      	ldrh	r3, [r3, #0]
 800c7ae:	823b      	strh	r3, [r7, #16]
 800c7b0:	8a3b      	ldrh	r3, [r7, #16]
 800c7b2:	0a1b      	lsrs	r3, r3, #8
 800c7b4:	81fb      	strh	r3, [r7, #14]
 800c7b6:	8a3b      	ldrh	r3, [r7, #16]
 800c7b8:	b2db      	uxtb	r3, r3
 800c7ba:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 800c7bc:	88fa      	ldrh	r2, [r7, #6]
 800c7be:	8a79      	ldrh	r1, [r7, #18]
 800c7c0:	8a3b      	ldrh	r3, [r7, #16]
 800c7c2:	440b      	add	r3, r1
 800c7c4:	429a      	cmp	r2, r3
 800c7c6:	da49      	bge.n	800c85c <ff_wtoupper+0xe8>
			switch (cmd) {
 800c7c8:	89fb      	ldrh	r3, [r7, #14]
 800c7ca:	2b08      	cmp	r3, #8
 800c7cc:	d84f      	bhi.n	800c86e <ff_wtoupper+0xfa>
 800c7ce:	a201      	add	r2, pc, #4	; (adr r2, 800c7d4 <ff_wtoupper+0x60>)
 800c7d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c7d4:	0800c7f9 	.word	0x0800c7f9
 800c7d8:	0800c80b 	.word	0x0800c80b
 800c7dc:	0800c821 	.word	0x0800c821
 800c7e0:	0800c829 	.word	0x0800c829
 800c7e4:	0800c831 	.word	0x0800c831
 800c7e8:	0800c839 	.word	0x0800c839
 800c7ec:	0800c841 	.word	0x0800c841
 800c7f0:	0800c849 	.word	0x0800c849
 800c7f4:	0800c851 	.word	0x0800c851
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 800c7f8:	88fa      	ldrh	r2, [r7, #6]
 800c7fa:	8a7b      	ldrh	r3, [r7, #18]
 800c7fc:	1ad3      	subs	r3, r2, r3
 800c7fe:	005b      	lsls	r3, r3, #1
 800c800:	697a      	ldr	r2, [r7, #20]
 800c802:	4413      	add	r3, r2
 800c804:	881b      	ldrh	r3, [r3, #0]
 800c806:	80fb      	strh	r3, [r7, #6]
 800c808:	e027      	b.n	800c85a <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 800c80a:	88fa      	ldrh	r2, [r7, #6]
 800c80c:	8a7b      	ldrh	r3, [r7, #18]
 800c80e:	1ad3      	subs	r3, r2, r3
 800c810:	b29b      	uxth	r3, r3
 800c812:	f003 0301 	and.w	r3, r3, #1
 800c816:	b29b      	uxth	r3, r3
 800c818:	88fa      	ldrh	r2, [r7, #6]
 800c81a:	1ad3      	subs	r3, r2, r3
 800c81c:	80fb      	strh	r3, [r7, #6]
 800c81e:	e01c      	b.n	800c85a <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 800c820:	88fb      	ldrh	r3, [r7, #6]
 800c822:	3b10      	subs	r3, #16
 800c824:	80fb      	strh	r3, [r7, #6]
 800c826:	e018      	b.n	800c85a <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 800c828:	88fb      	ldrh	r3, [r7, #6]
 800c82a:	3b20      	subs	r3, #32
 800c82c:	80fb      	strh	r3, [r7, #6]
 800c82e:	e014      	b.n	800c85a <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 800c830:	88fb      	ldrh	r3, [r7, #6]
 800c832:	3b30      	subs	r3, #48	; 0x30
 800c834:	80fb      	strh	r3, [r7, #6]
 800c836:	e010      	b.n	800c85a <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 800c838:	88fb      	ldrh	r3, [r7, #6]
 800c83a:	3b1a      	subs	r3, #26
 800c83c:	80fb      	strh	r3, [r7, #6]
 800c83e:	e00c      	b.n	800c85a <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 800c840:	88fb      	ldrh	r3, [r7, #6]
 800c842:	3308      	adds	r3, #8
 800c844:	80fb      	strh	r3, [r7, #6]
 800c846:	e008      	b.n	800c85a <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 800c848:	88fb      	ldrh	r3, [r7, #6]
 800c84a:	3b50      	subs	r3, #80	; 0x50
 800c84c:	80fb      	strh	r3, [r7, #6]
 800c84e:	e004      	b.n	800c85a <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 800c850:	88fb      	ldrh	r3, [r7, #6]
 800c852:	f5a3 53e3 	sub.w	r3, r3, #7264	; 0x1c60
 800c856:	80fb      	strh	r3, [r7, #6]
 800c858:	bf00      	nop
			}
			break;
 800c85a:	e008      	b.n	800c86e <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 800c85c:	89fb      	ldrh	r3, [r7, #14]
 800c85e:	2b00      	cmp	r3, #0
 800c860:	d195      	bne.n	800c78e <ff_wtoupper+0x1a>
 800c862:	8a3b      	ldrh	r3, [r7, #16]
 800c864:	005b      	lsls	r3, r3, #1
 800c866:	697a      	ldr	r2, [r7, #20]
 800c868:	4413      	add	r3, r2
 800c86a:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 800c86c:	e78f      	b.n	800c78e <ff_wtoupper+0x1a>
			break;
 800c86e:	bf00      	nop
	}

	return chr;
 800c870:	88fb      	ldrh	r3, [r7, #6]
}
 800c872:	4618      	mov	r0, r3
 800c874:	371c      	adds	r7, #28
 800c876:	46bd      	mov	sp, r7
 800c878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c87c:	4770      	bx	lr
 800c87e:	bf00      	nop
 800c880:	0800d47c 	.word	0x0800d47c
 800c884:	0800d670 	.word	0x0800d670

0800c888 <__errno>:
 800c888:	4b01      	ldr	r3, [pc, #4]	; (800c890 <__errno+0x8>)
 800c88a:	6818      	ldr	r0, [r3, #0]
 800c88c:	4770      	bx	lr
 800c88e:	bf00      	nop
 800c890:	200000f8 	.word	0x200000f8

0800c894 <__libc_init_array>:
 800c894:	b570      	push	{r4, r5, r6, lr}
 800c896:	4d0d      	ldr	r5, [pc, #52]	; (800c8cc <__libc_init_array+0x38>)
 800c898:	4c0d      	ldr	r4, [pc, #52]	; (800c8d0 <__libc_init_array+0x3c>)
 800c89a:	1b64      	subs	r4, r4, r5
 800c89c:	10a4      	asrs	r4, r4, #2
 800c89e:	2600      	movs	r6, #0
 800c8a0:	42a6      	cmp	r6, r4
 800c8a2:	d109      	bne.n	800c8b8 <__libc_init_array+0x24>
 800c8a4:	4d0b      	ldr	r5, [pc, #44]	; (800c8d4 <__libc_init_array+0x40>)
 800c8a6:	4c0c      	ldr	r4, [pc, #48]	; (800c8d8 <__libc_init_array+0x44>)
 800c8a8:	f000 fc8e 	bl	800d1c8 <_init>
 800c8ac:	1b64      	subs	r4, r4, r5
 800c8ae:	10a4      	asrs	r4, r4, #2
 800c8b0:	2600      	movs	r6, #0
 800c8b2:	42a6      	cmp	r6, r4
 800c8b4:	d105      	bne.n	800c8c2 <__libc_init_array+0x2e>
 800c8b6:	bd70      	pop	{r4, r5, r6, pc}
 800c8b8:	f855 3b04 	ldr.w	r3, [r5], #4
 800c8bc:	4798      	blx	r3
 800c8be:	3601      	adds	r6, #1
 800c8c0:	e7ee      	b.n	800c8a0 <__libc_init_array+0xc>
 800c8c2:	f855 3b04 	ldr.w	r3, [r5], #4
 800c8c6:	4798      	blx	r3
 800c8c8:	3601      	adds	r6, #1
 800c8ca:	e7f2      	b.n	800c8b2 <__libc_init_array+0x1e>
 800c8cc:	0800d768 	.word	0x0800d768
 800c8d0:	0800d768 	.word	0x0800d768
 800c8d4:	0800d768 	.word	0x0800d768
 800c8d8:	0800d76c 	.word	0x0800d76c

0800c8dc <memset>:
 800c8dc:	4402      	add	r2, r0
 800c8de:	4603      	mov	r3, r0
 800c8e0:	4293      	cmp	r3, r2
 800c8e2:	d100      	bne.n	800c8e6 <memset+0xa>
 800c8e4:	4770      	bx	lr
 800c8e6:	f803 1b01 	strb.w	r1, [r3], #1
 800c8ea:	e7f9      	b.n	800c8e0 <memset+0x4>

0800c8ec <siprintf>:
 800c8ec:	b40e      	push	{r1, r2, r3}
 800c8ee:	b500      	push	{lr}
 800c8f0:	b09c      	sub	sp, #112	; 0x70
 800c8f2:	ab1d      	add	r3, sp, #116	; 0x74
 800c8f4:	9002      	str	r0, [sp, #8]
 800c8f6:	9006      	str	r0, [sp, #24]
 800c8f8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800c8fc:	4809      	ldr	r0, [pc, #36]	; (800c924 <siprintf+0x38>)
 800c8fe:	9107      	str	r1, [sp, #28]
 800c900:	9104      	str	r1, [sp, #16]
 800c902:	4909      	ldr	r1, [pc, #36]	; (800c928 <siprintf+0x3c>)
 800c904:	f853 2b04 	ldr.w	r2, [r3], #4
 800c908:	9105      	str	r1, [sp, #20]
 800c90a:	6800      	ldr	r0, [r0, #0]
 800c90c:	9301      	str	r3, [sp, #4]
 800c90e:	a902      	add	r1, sp, #8
 800c910:	f000 f868 	bl	800c9e4 <_svfiprintf_r>
 800c914:	9b02      	ldr	r3, [sp, #8]
 800c916:	2200      	movs	r2, #0
 800c918:	701a      	strb	r2, [r3, #0]
 800c91a:	b01c      	add	sp, #112	; 0x70
 800c91c:	f85d eb04 	ldr.w	lr, [sp], #4
 800c920:	b003      	add	sp, #12
 800c922:	4770      	bx	lr
 800c924:	200000f8 	.word	0x200000f8
 800c928:	ffff0208 	.word	0xffff0208

0800c92c <__ssputs_r>:
 800c92c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c930:	688e      	ldr	r6, [r1, #8]
 800c932:	429e      	cmp	r6, r3
 800c934:	4682      	mov	sl, r0
 800c936:	460c      	mov	r4, r1
 800c938:	4690      	mov	r8, r2
 800c93a:	461f      	mov	r7, r3
 800c93c:	d838      	bhi.n	800c9b0 <__ssputs_r+0x84>
 800c93e:	898a      	ldrh	r2, [r1, #12]
 800c940:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800c944:	d032      	beq.n	800c9ac <__ssputs_r+0x80>
 800c946:	6825      	ldr	r5, [r4, #0]
 800c948:	6909      	ldr	r1, [r1, #16]
 800c94a:	eba5 0901 	sub.w	r9, r5, r1
 800c94e:	6965      	ldr	r5, [r4, #20]
 800c950:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800c954:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800c958:	3301      	adds	r3, #1
 800c95a:	444b      	add	r3, r9
 800c95c:	106d      	asrs	r5, r5, #1
 800c95e:	429d      	cmp	r5, r3
 800c960:	bf38      	it	cc
 800c962:	461d      	movcc	r5, r3
 800c964:	0553      	lsls	r3, r2, #21
 800c966:	d531      	bpl.n	800c9cc <__ssputs_r+0xa0>
 800c968:	4629      	mov	r1, r5
 800c96a:	f000 fb63 	bl	800d034 <_malloc_r>
 800c96e:	4606      	mov	r6, r0
 800c970:	b950      	cbnz	r0, 800c988 <__ssputs_r+0x5c>
 800c972:	230c      	movs	r3, #12
 800c974:	f8ca 3000 	str.w	r3, [sl]
 800c978:	89a3      	ldrh	r3, [r4, #12]
 800c97a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c97e:	81a3      	strh	r3, [r4, #12]
 800c980:	f04f 30ff 	mov.w	r0, #4294967295
 800c984:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c988:	6921      	ldr	r1, [r4, #16]
 800c98a:	464a      	mov	r2, r9
 800c98c:	f000 fabe 	bl	800cf0c <memcpy>
 800c990:	89a3      	ldrh	r3, [r4, #12]
 800c992:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800c996:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c99a:	81a3      	strh	r3, [r4, #12]
 800c99c:	6126      	str	r6, [r4, #16]
 800c99e:	6165      	str	r5, [r4, #20]
 800c9a0:	444e      	add	r6, r9
 800c9a2:	eba5 0509 	sub.w	r5, r5, r9
 800c9a6:	6026      	str	r6, [r4, #0]
 800c9a8:	60a5      	str	r5, [r4, #8]
 800c9aa:	463e      	mov	r6, r7
 800c9ac:	42be      	cmp	r6, r7
 800c9ae:	d900      	bls.n	800c9b2 <__ssputs_r+0x86>
 800c9b0:	463e      	mov	r6, r7
 800c9b2:	6820      	ldr	r0, [r4, #0]
 800c9b4:	4632      	mov	r2, r6
 800c9b6:	4641      	mov	r1, r8
 800c9b8:	f000 fab6 	bl	800cf28 <memmove>
 800c9bc:	68a3      	ldr	r3, [r4, #8]
 800c9be:	1b9b      	subs	r3, r3, r6
 800c9c0:	60a3      	str	r3, [r4, #8]
 800c9c2:	6823      	ldr	r3, [r4, #0]
 800c9c4:	4433      	add	r3, r6
 800c9c6:	6023      	str	r3, [r4, #0]
 800c9c8:	2000      	movs	r0, #0
 800c9ca:	e7db      	b.n	800c984 <__ssputs_r+0x58>
 800c9cc:	462a      	mov	r2, r5
 800c9ce:	f000 fba5 	bl	800d11c <_realloc_r>
 800c9d2:	4606      	mov	r6, r0
 800c9d4:	2800      	cmp	r0, #0
 800c9d6:	d1e1      	bne.n	800c99c <__ssputs_r+0x70>
 800c9d8:	6921      	ldr	r1, [r4, #16]
 800c9da:	4650      	mov	r0, sl
 800c9dc:	f000 fabe 	bl	800cf5c <_free_r>
 800c9e0:	e7c7      	b.n	800c972 <__ssputs_r+0x46>
	...

0800c9e4 <_svfiprintf_r>:
 800c9e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c9e8:	4698      	mov	r8, r3
 800c9ea:	898b      	ldrh	r3, [r1, #12]
 800c9ec:	061b      	lsls	r3, r3, #24
 800c9ee:	b09d      	sub	sp, #116	; 0x74
 800c9f0:	4607      	mov	r7, r0
 800c9f2:	460d      	mov	r5, r1
 800c9f4:	4614      	mov	r4, r2
 800c9f6:	d50e      	bpl.n	800ca16 <_svfiprintf_r+0x32>
 800c9f8:	690b      	ldr	r3, [r1, #16]
 800c9fa:	b963      	cbnz	r3, 800ca16 <_svfiprintf_r+0x32>
 800c9fc:	2140      	movs	r1, #64	; 0x40
 800c9fe:	f000 fb19 	bl	800d034 <_malloc_r>
 800ca02:	6028      	str	r0, [r5, #0]
 800ca04:	6128      	str	r0, [r5, #16]
 800ca06:	b920      	cbnz	r0, 800ca12 <_svfiprintf_r+0x2e>
 800ca08:	230c      	movs	r3, #12
 800ca0a:	603b      	str	r3, [r7, #0]
 800ca0c:	f04f 30ff 	mov.w	r0, #4294967295
 800ca10:	e0d1      	b.n	800cbb6 <_svfiprintf_r+0x1d2>
 800ca12:	2340      	movs	r3, #64	; 0x40
 800ca14:	616b      	str	r3, [r5, #20]
 800ca16:	2300      	movs	r3, #0
 800ca18:	9309      	str	r3, [sp, #36]	; 0x24
 800ca1a:	2320      	movs	r3, #32
 800ca1c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ca20:	f8cd 800c 	str.w	r8, [sp, #12]
 800ca24:	2330      	movs	r3, #48	; 0x30
 800ca26:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800cbd0 <_svfiprintf_r+0x1ec>
 800ca2a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800ca2e:	f04f 0901 	mov.w	r9, #1
 800ca32:	4623      	mov	r3, r4
 800ca34:	469a      	mov	sl, r3
 800ca36:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ca3a:	b10a      	cbz	r2, 800ca40 <_svfiprintf_r+0x5c>
 800ca3c:	2a25      	cmp	r2, #37	; 0x25
 800ca3e:	d1f9      	bne.n	800ca34 <_svfiprintf_r+0x50>
 800ca40:	ebba 0b04 	subs.w	fp, sl, r4
 800ca44:	d00b      	beq.n	800ca5e <_svfiprintf_r+0x7a>
 800ca46:	465b      	mov	r3, fp
 800ca48:	4622      	mov	r2, r4
 800ca4a:	4629      	mov	r1, r5
 800ca4c:	4638      	mov	r0, r7
 800ca4e:	f7ff ff6d 	bl	800c92c <__ssputs_r>
 800ca52:	3001      	adds	r0, #1
 800ca54:	f000 80aa 	beq.w	800cbac <_svfiprintf_r+0x1c8>
 800ca58:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ca5a:	445a      	add	r2, fp
 800ca5c:	9209      	str	r2, [sp, #36]	; 0x24
 800ca5e:	f89a 3000 	ldrb.w	r3, [sl]
 800ca62:	2b00      	cmp	r3, #0
 800ca64:	f000 80a2 	beq.w	800cbac <_svfiprintf_r+0x1c8>
 800ca68:	2300      	movs	r3, #0
 800ca6a:	f04f 32ff 	mov.w	r2, #4294967295
 800ca6e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ca72:	f10a 0a01 	add.w	sl, sl, #1
 800ca76:	9304      	str	r3, [sp, #16]
 800ca78:	9307      	str	r3, [sp, #28]
 800ca7a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800ca7e:	931a      	str	r3, [sp, #104]	; 0x68
 800ca80:	4654      	mov	r4, sl
 800ca82:	2205      	movs	r2, #5
 800ca84:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ca88:	4851      	ldr	r0, [pc, #324]	; (800cbd0 <_svfiprintf_r+0x1ec>)
 800ca8a:	f7f3 fbb1 	bl	80001f0 <memchr>
 800ca8e:	9a04      	ldr	r2, [sp, #16]
 800ca90:	b9d8      	cbnz	r0, 800caca <_svfiprintf_r+0xe6>
 800ca92:	06d0      	lsls	r0, r2, #27
 800ca94:	bf44      	itt	mi
 800ca96:	2320      	movmi	r3, #32
 800ca98:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ca9c:	0711      	lsls	r1, r2, #28
 800ca9e:	bf44      	itt	mi
 800caa0:	232b      	movmi	r3, #43	; 0x2b
 800caa2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800caa6:	f89a 3000 	ldrb.w	r3, [sl]
 800caaa:	2b2a      	cmp	r3, #42	; 0x2a
 800caac:	d015      	beq.n	800cada <_svfiprintf_r+0xf6>
 800caae:	9a07      	ldr	r2, [sp, #28]
 800cab0:	4654      	mov	r4, sl
 800cab2:	2000      	movs	r0, #0
 800cab4:	f04f 0c0a 	mov.w	ip, #10
 800cab8:	4621      	mov	r1, r4
 800caba:	f811 3b01 	ldrb.w	r3, [r1], #1
 800cabe:	3b30      	subs	r3, #48	; 0x30
 800cac0:	2b09      	cmp	r3, #9
 800cac2:	d94e      	bls.n	800cb62 <_svfiprintf_r+0x17e>
 800cac4:	b1b0      	cbz	r0, 800caf4 <_svfiprintf_r+0x110>
 800cac6:	9207      	str	r2, [sp, #28]
 800cac8:	e014      	b.n	800caf4 <_svfiprintf_r+0x110>
 800caca:	eba0 0308 	sub.w	r3, r0, r8
 800cace:	fa09 f303 	lsl.w	r3, r9, r3
 800cad2:	4313      	orrs	r3, r2
 800cad4:	9304      	str	r3, [sp, #16]
 800cad6:	46a2      	mov	sl, r4
 800cad8:	e7d2      	b.n	800ca80 <_svfiprintf_r+0x9c>
 800cada:	9b03      	ldr	r3, [sp, #12]
 800cadc:	1d19      	adds	r1, r3, #4
 800cade:	681b      	ldr	r3, [r3, #0]
 800cae0:	9103      	str	r1, [sp, #12]
 800cae2:	2b00      	cmp	r3, #0
 800cae4:	bfbb      	ittet	lt
 800cae6:	425b      	neglt	r3, r3
 800cae8:	f042 0202 	orrlt.w	r2, r2, #2
 800caec:	9307      	strge	r3, [sp, #28]
 800caee:	9307      	strlt	r3, [sp, #28]
 800caf0:	bfb8      	it	lt
 800caf2:	9204      	strlt	r2, [sp, #16]
 800caf4:	7823      	ldrb	r3, [r4, #0]
 800caf6:	2b2e      	cmp	r3, #46	; 0x2e
 800caf8:	d10c      	bne.n	800cb14 <_svfiprintf_r+0x130>
 800cafa:	7863      	ldrb	r3, [r4, #1]
 800cafc:	2b2a      	cmp	r3, #42	; 0x2a
 800cafe:	d135      	bne.n	800cb6c <_svfiprintf_r+0x188>
 800cb00:	9b03      	ldr	r3, [sp, #12]
 800cb02:	1d1a      	adds	r2, r3, #4
 800cb04:	681b      	ldr	r3, [r3, #0]
 800cb06:	9203      	str	r2, [sp, #12]
 800cb08:	2b00      	cmp	r3, #0
 800cb0a:	bfb8      	it	lt
 800cb0c:	f04f 33ff 	movlt.w	r3, #4294967295
 800cb10:	3402      	adds	r4, #2
 800cb12:	9305      	str	r3, [sp, #20]
 800cb14:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800cbe0 <_svfiprintf_r+0x1fc>
 800cb18:	7821      	ldrb	r1, [r4, #0]
 800cb1a:	2203      	movs	r2, #3
 800cb1c:	4650      	mov	r0, sl
 800cb1e:	f7f3 fb67 	bl	80001f0 <memchr>
 800cb22:	b140      	cbz	r0, 800cb36 <_svfiprintf_r+0x152>
 800cb24:	2340      	movs	r3, #64	; 0x40
 800cb26:	eba0 000a 	sub.w	r0, r0, sl
 800cb2a:	fa03 f000 	lsl.w	r0, r3, r0
 800cb2e:	9b04      	ldr	r3, [sp, #16]
 800cb30:	4303      	orrs	r3, r0
 800cb32:	3401      	adds	r4, #1
 800cb34:	9304      	str	r3, [sp, #16]
 800cb36:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cb3a:	4826      	ldr	r0, [pc, #152]	; (800cbd4 <_svfiprintf_r+0x1f0>)
 800cb3c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800cb40:	2206      	movs	r2, #6
 800cb42:	f7f3 fb55 	bl	80001f0 <memchr>
 800cb46:	2800      	cmp	r0, #0
 800cb48:	d038      	beq.n	800cbbc <_svfiprintf_r+0x1d8>
 800cb4a:	4b23      	ldr	r3, [pc, #140]	; (800cbd8 <_svfiprintf_r+0x1f4>)
 800cb4c:	bb1b      	cbnz	r3, 800cb96 <_svfiprintf_r+0x1b2>
 800cb4e:	9b03      	ldr	r3, [sp, #12]
 800cb50:	3307      	adds	r3, #7
 800cb52:	f023 0307 	bic.w	r3, r3, #7
 800cb56:	3308      	adds	r3, #8
 800cb58:	9303      	str	r3, [sp, #12]
 800cb5a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cb5c:	4433      	add	r3, r6
 800cb5e:	9309      	str	r3, [sp, #36]	; 0x24
 800cb60:	e767      	b.n	800ca32 <_svfiprintf_r+0x4e>
 800cb62:	fb0c 3202 	mla	r2, ip, r2, r3
 800cb66:	460c      	mov	r4, r1
 800cb68:	2001      	movs	r0, #1
 800cb6a:	e7a5      	b.n	800cab8 <_svfiprintf_r+0xd4>
 800cb6c:	2300      	movs	r3, #0
 800cb6e:	3401      	adds	r4, #1
 800cb70:	9305      	str	r3, [sp, #20]
 800cb72:	4619      	mov	r1, r3
 800cb74:	f04f 0c0a 	mov.w	ip, #10
 800cb78:	4620      	mov	r0, r4
 800cb7a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800cb7e:	3a30      	subs	r2, #48	; 0x30
 800cb80:	2a09      	cmp	r2, #9
 800cb82:	d903      	bls.n	800cb8c <_svfiprintf_r+0x1a8>
 800cb84:	2b00      	cmp	r3, #0
 800cb86:	d0c5      	beq.n	800cb14 <_svfiprintf_r+0x130>
 800cb88:	9105      	str	r1, [sp, #20]
 800cb8a:	e7c3      	b.n	800cb14 <_svfiprintf_r+0x130>
 800cb8c:	fb0c 2101 	mla	r1, ip, r1, r2
 800cb90:	4604      	mov	r4, r0
 800cb92:	2301      	movs	r3, #1
 800cb94:	e7f0      	b.n	800cb78 <_svfiprintf_r+0x194>
 800cb96:	ab03      	add	r3, sp, #12
 800cb98:	9300      	str	r3, [sp, #0]
 800cb9a:	462a      	mov	r2, r5
 800cb9c:	4b0f      	ldr	r3, [pc, #60]	; (800cbdc <_svfiprintf_r+0x1f8>)
 800cb9e:	a904      	add	r1, sp, #16
 800cba0:	4638      	mov	r0, r7
 800cba2:	f3af 8000 	nop.w
 800cba6:	1c42      	adds	r2, r0, #1
 800cba8:	4606      	mov	r6, r0
 800cbaa:	d1d6      	bne.n	800cb5a <_svfiprintf_r+0x176>
 800cbac:	89ab      	ldrh	r3, [r5, #12]
 800cbae:	065b      	lsls	r3, r3, #25
 800cbb0:	f53f af2c 	bmi.w	800ca0c <_svfiprintf_r+0x28>
 800cbb4:	9809      	ldr	r0, [sp, #36]	; 0x24
 800cbb6:	b01d      	add	sp, #116	; 0x74
 800cbb8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cbbc:	ab03      	add	r3, sp, #12
 800cbbe:	9300      	str	r3, [sp, #0]
 800cbc0:	462a      	mov	r2, r5
 800cbc2:	4b06      	ldr	r3, [pc, #24]	; (800cbdc <_svfiprintf_r+0x1f8>)
 800cbc4:	a904      	add	r1, sp, #16
 800cbc6:	4638      	mov	r0, r7
 800cbc8:	f000 f87a 	bl	800ccc0 <_printf_i>
 800cbcc:	e7eb      	b.n	800cba6 <_svfiprintf_r+0x1c2>
 800cbce:	bf00      	nop
 800cbd0:	0800d72c 	.word	0x0800d72c
 800cbd4:	0800d736 	.word	0x0800d736
 800cbd8:	00000000 	.word	0x00000000
 800cbdc:	0800c92d 	.word	0x0800c92d
 800cbe0:	0800d732 	.word	0x0800d732

0800cbe4 <_printf_common>:
 800cbe4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cbe8:	4616      	mov	r6, r2
 800cbea:	4699      	mov	r9, r3
 800cbec:	688a      	ldr	r2, [r1, #8]
 800cbee:	690b      	ldr	r3, [r1, #16]
 800cbf0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800cbf4:	4293      	cmp	r3, r2
 800cbf6:	bfb8      	it	lt
 800cbf8:	4613      	movlt	r3, r2
 800cbfa:	6033      	str	r3, [r6, #0]
 800cbfc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800cc00:	4607      	mov	r7, r0
 800cc02:	460c      	mov	r4, r1
 800cc04:	b10a      	cbz	r2, 800cc0a <_printf_common+0x26>
 800cc06:	3301      	adds	r3, #1
 800cc08:	6033      	str	r3, [r6, #0]
 800cc0a:	6823      	ldr	r3, [r4, #0]
 800cc0c:	0699      	lsls	r1, r3, #26
 800cc0e:	bf42      	ittt	mi
 800cc10:	6833      	ldrmi	r3, [r6, #0]
 800cc12:	3302      	addmi	r3, #2
 800cc14:	6033      	strmi	r3, [r6, #0]
 800cc16:	6825      	ldr	r5, [r4, #0]
 800cc18:	f015 0506 	ands.w	r5, r5, #6
 800cc1c:	d106      	bne.n	800cc2c <_printf_common+0x48>
 800cc1e:	f104 0a19 	add.w	sl, r4, #25
 800cc22:	68e3      	ldr	r3, [r4, #12]
 800cc24:	6832      	ldr	r2, [r6, #0]
 800cc26:	1a9b      	subs	r3, r3, r2
 800cc28:	42ab      	cmp	r3, r5
 800cc2a:	dc26      	bgt.n	800cc7a <_printf_common+0x96>
 800cc2c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800cc30:	1e13      	subs	r3, r2, #0
 800cc32:	6822      	ldr	r2, [r4, #0]
 800cc34:	bf18      	it	ne
 800cc36:	2301      	movne	r3, #1
 800cc38:	0692      	lsls	r2, r2, #26
 800cc3a:	d42b      	bmi.n	800cc94 <_printf_common+0xb0>
 800cc3c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800cc40:	4649      	mov	r1, r9
 800cc42:	4638      	mov	r0, r7
 800cc44:	47c0      	blx	r8
 800cc46:	3001      	adds	r0, #1
 800cc48:	d01e      	beq.n	800cc88 <_printf_common+0xa4>
 800cc4a:	6823      	ldr	r3, [r4, #0]
 800cc4c:	68e5      	ldr	r5, [r4, #12]
 800cc4e:	6832      	ldr	r2, [r6, #0]
 800cc50:	f003 0306 	and.w	r3, r3, #6
 800cc54:	2b04      	cmp	r3, #4
 800cc56:	bf08      	it	eq
 800cc58:	1aad      	subeq	r5, r5, r2
 800cc5a:	68a3      	ldr	r3, [r4, #8]
 800cc5c:	6922      	ldr	r2, [r4, #16]
 800cc5e:	bf0c      	ite	eq
 800cc60:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800cc64:	2500      	movne	r5, #0
 800cc66:	4293      	cmp	r3, r2
 800cc68:	bfc4      	itt	gt
 800cc6a:	1a9b      	subgt	r3, r3, r2
 800cc6c:	18ed      	addgt	r5, r5, r3
 800cc6e:	2600      	movs	r6, #0
 800cc70:	341a      	adds	r4, #26
 800cc72:	42b5      	cmp	r5, r6
 800cc74:	d11a      	bne.n	800ccac <_printf_common+0xc8>
 800cc76:	2000      	movs	r0, #0
 800cc78:	e008      	b.n	800cc8c <_printf_common+0xa8>
 800cc7a:	2301      	movs	r3, #1
 800cc7c:	4652      	mov	r2, sl
 800cc7e:	4649      	mov	r1, r9
 800cc80:	4638      	mov	r0, r7
 800cc82:	47c0      	blx	r8
 800cc84:	3001      	adds	r0, #1
 800cc86:	d103      	bne.n	800cc90 <_printf_common+0xac>
 800cc88:	f04f 30ff 	mov.w	r0, #4294967295
 800cc8c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cc90:	3501      	adds	r5, #1
 800cc92:	e7c6      	b.n	800cc22 <_printf_common+0x3e>
 800cc94:	18e1      	adds	r1, r4, r3
 800cc96:	1c5a      	adds	r2, r3, #1
 800cc98:	2030      	movs	r0, #48	; 0x30
 800cc9a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800cc9e:	4422      	add	r2, r4
 800cca0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800cca4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800cca8:	3302      	adds	r3, #2
 800ccaa:	e7c7      	b.n	800cc3c <_printf_common+0x58>
 800ccac:	2301      	movs	r3, #1
 800ccae:	4622      	mov	r2, r4
 800ccb0:	4649      	mov	r1, r9
 800ccb2:	4638      	mov	r0, r7
 800ccb4:	47c0      	blx	r8
 800ccb6:	3001      	adds	r0, #1
 800ccb8:	d0e6      	beq.n	800cc88 <_printf_common+0xa4>
 800ccba:	3601      	adds	r6, #1
 800ccbc:	e7d9      	b.n	800cc72 <_printf_common+0x8e>
	...

0800ccc0 <_printf_i>:
 800ccc0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ccc4:	7e0f      	ldrb	r7, [r1, #24]
 800ccc6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800ccc8:	2f78      	cmp	r7, #120	; 0x78
 800ccca:	4691      	mov	r9, r2
 800cccc:	4680      	mov	r8, r0
 800ccce:	460c      	mov	r4, r1
 800ccd0:	469a      	mov	sl, r3
 800ccd2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800ccd6:	d807      	bhi.n	800cce8 <_printf_i+0x28>
 800ccd8:	2f62      	cmp	r7, #98	; 0x62
 800ccda:	d80a      	bhi.n	800ccf2 <_printf_i+0x32>
 800ccdc:	2f00      	cmp	r7, #0
 800ccde:	f000 80d8 	beq.w	800ce92 <_printf_i+0x1d2>
 800cce2:	2f58      	cmp	r7, #88	; 0x58
 800cce4:	f000 80a3 	beq.w	800ce2e <_printf_i+0x16e>
 800cce8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800ccec:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800ccf0:	e03a      	b.n	800cd68 <_printf_i+0xa8>
 800ccf2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800ccf6:	2b15      	cmp	r3, #21
 800ccf8:	d8f6      	bhi.n	800cce8 <_printf_i+0x28>
 800ccfa:	a101      	add	r1, pc, #4	; (adr r1, 800cd00 <_printf_i+0x40>)
 800ccfc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800cd00:	0800cd59 	.word	0x0800cd59
 800cd04:	0800cd6d 	.word	0x0800cd6d
 800cd08:	0800cce9 	.word	0x0800cce9
 800cd0c:	0800cce9 	.word	0x0800cce9
 800cd10:	0800cce9 	.word	0x0800cce9
 800cd14:	0800cce9 	.word	0x0800cce9
 800cd18:	0800cd6d 	.word	0x0800cd6d
 800cd1c:	0800cce9 	.word	0x0800cce9
 800cd20:	0800cce9 	.word	0x0800cce9
 800cd24:	0800cce9 	.word	0x0800cce9
 800cd28:	0800cce9 	.word	0x0800cce9
 800cd2c:	0800ce79 	.word	0x0800ce79
 800cd30:	0800cd9d 	.word	0x0800cd9d
 800cd34:	0800ce5b 	.word	0x0800ce5b
 800cd38:	0800cce9 	.word	0x0800cce9
 800cd3c:	0800cce9 	.word	0x0800cce9
 800cd40:	0800ce9b 	.word	0x0800ce9b
 800cd44:	0800cce9 	.word	0x0800cce9
 800cd48:	0800cd9d 	.word	0x0800cd9d
 800cd4c:	0800cce9 	.word	0x0800cce9
 800cd50:	0800cce9 	.word	0x0800cce9
 800cd54:	0800ce63 	.word	0x0800ce63
 800cd58:	682b      	ldr	r3, [r5, #0]
 800cd5a:	1d1a      	adds	r2, r3, #4
 800cd5c:	681b      	ldr	r3, [r3, #0]
 800cd5e:	602a      	str	r2, [r5, #0]
 800cd60:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800cd64:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800cd68:	2301      	movs	r3, #1
 800cd6a:	e0a3      	b.n	800ceb4 <_printf_i+0x1f4>
 800cd6c:	6820      	ldr	r0, [r4, #0]
 800cd6e:	6829      	ldr	r1, [r5, #0]
 800cd70:	0606      	lsls	r6, r0, #24
 800cd72:	f101 0304 	add.w	r3, r1, #4
 800cd76:	d50a      	bpl.n	800cd8e <_printf_i+0xce>
 800cd78:	680e      	ldr	r6, [r1, #0]
 800cd7a:	602b      	str	r3, [r5, #0]
 800cd7c:	2e00      	cmp	r6, #0
 800cd7e:	da03      	bge.n	800cd88 <_printf_i+0xc8>
 800cd80:	232d      	movs	r3, #45	; 0x2d
 800cd82:	4276      	negs	r6, r6
 800cd84:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800cd88:	485e      	ldr	r0, [pc, #376]	; (800cf04 <_printf_i+0x244>)
 800cd8a:	230a      	movs	r3, #10
 800cd8c:	e019      	b.n	800cdc2 <_printf_i+0x102>
 800cd8e:	680e      	ldr	r6, [r1, #0]
 800cd90:	602b      	str	r3, [r5, #0]
 800cd92:	f010 0f40 	tst.w	r0, #64	; 0x40
 800cd96:	bf18      	it	ne
 800cd98:	b236      	sxthne	r6, r6
 800cd9a:	e7ef      	b.n	800cd7c <_printf_i+0xbc>
 800cd9c:	682b      	ldr	r3, [r5, #0]
 800cd9e:	6820      	ldr	r0, [r4, #0]
 800cda0:	1d19      	adds	r1, r3, #4
 800cda2:	6029      	str	r1, [r5, #0]
 800cda4:	0601      	lsls	r1, r0, #24
 800cda6:	d501      	bpl.n	800cdac <_printf_i+0xec>
 800cda8:	681e      	ldr	r6, [r3, #0]
 800cdaa:	e002      	b.n	800cdb2 <_printf_i+0xf2>
 800cdac:	0646      	lsls	r6, r0, #25
 800cdae:	d5fb      	bpl.n	800cda8 <_printf_i+0xe8>
 800cdb0:	881e      	ldrh	r6, [r3, #0]
 800cdb2:	4854      	ldr	r0, [pc, #336]	; (800cf04 <_printf_i+0x244>)
 800cdb4:	2f6f      	cmp	r7, #111	; 0x6f
 800cdb6:	bf0c      	ite	eq
 800cdb8:	2308      	moveq	r3, #8
 800cdba:	230a      	movne	r3, #10
 800cdbc:	2100      	movs	r1, #0
 800cdbe:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800cdc2:	6865      	ldr	r5, [r4, #4]
 800cdc4:	60a5      	str	r5, [r4, #8]
 800cdc6:	2d00      	cmp	r5, #0
 800cdc8:	bfa2      	ittt	ge
 800cdca:	6821      	ldrge	r1, [r4, #0]
 800cdcc:	f021 0104 	bicge.w	r1, r1, #4
 800cdd0:	6021      	strge	r1, [r4, #0]
 800cdd2:	b90e      	cbnz	r6, 800cdd8 <_printf_i+0x118>
 800cdd4:	2d00      	cmp	r5, #0
 800cdd6:	d04d      	beq.n	800ce74 <_printf_i+0x1b4>
 800cdd8:	4615      	mov	r5, r2
 800cdda:	fbb6 f1f3 	udiv	r1, r6, r3
 800cdde:	fb03 6711 	mls	r7, r3, r1, r6
 800cde2:	5dc7      	ldrb	r7, [r0, r7]
 800cde4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800cde8:	4637      	mov	r7, r6
 800cdea:	42bb      	cmp	r3, r7
 800cdec:	460e      	mov	r6, r1
 800cdee:	d9f4      	bls.n	800cdda <_printf_i+0x11a>
 800cdf0:	2b08      	cmp	r3, #8
 800cdf2:	d10b      	bne.n	800ce0c <_printf_i+0x14c>
 800cdf4:	6823      	ldr	r3, [r4, #0]
 800cdf6:	07de      	lsls	r6, r3, #31
 800cdf8:	d508      	bpl.n	800ce0c <_printf_i+0x14c>
 800cdfa:	6923      	ldr	r3, [r4, #16]
 800cdfc:	6861      	ldr	r1, [r4, #4]
 800cdfe:	4299      	cmp	r1, r3
 800ce00:	bfde      	ittt	le
 800ce02:	2330      	movle	r3, #48	; 0x30
 800ce04:	f805 3c01 	strble.w	r3, [r5, #-1]
 800ce08:	f105 35ff 	addle.w	r5, r5, #4294967295
 800ce0c:	1b52      	subs	r2, r2, r5
 800ce0e:	6122      	str	r2, [r4, #16]
 800ce10:	f8cd a000 	str.w	sl, [sp]
 800ce14:	464b      	mov	r3, r9
 800ce16:	aa03      	add	r2, sp, #12
 800ce18:	4621      	mov	r1, r4
 800ce1a:	4640      	mov	r0, r8
 800ce1c:	f7ff fee2 	bl	800cbe4 <_printf_common>
 800ce20:	3001      	adds	r0, #1
 800ce22:	d14c      	bne.n	800cebe <_printf_i+0x1fe>
 800ce24:	f04f 30ff 	mov.w	r0, #4294967295
 800ce28:	b004      	add	sp, #16
 800ce2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ce2e:	4835      	ldr	r0, [pc, #212]	; (800cf04 <_printf_i+0x244>)
 800ce30:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800ce34:	6829      	ldr	r1, [r5, #0]
 800ce36:	6823      	ldr	r3, [r4, #0]
 800ce38:	f851 6b04 	ldr.w	r6, [r1], #4
 800ce3c:	6029      	str	r1, [r5, #0]
 800ce3e:	061d      	lsls	r5, r3, #24
 800ce40:	d514      	bpl.n	800ce6c <_printf_i+0x1ac>
 800ce42:	07df      	lsls	r7, r3, #31
 800ce44:	bf44      	itt	mi
 800ce46:	f043 0320 	orrmi.w	r3, r3, #32
 800ce4a:	6023      	strmi	r3, [r4, #0]
 800ce4c:	b91e      	cbnz	r6, 800ce56 <_printf_i+0x196>
 800ce4e:	6823      	ldr	r3, [r4, #0]
 800ce50:	f023 0320 	bic.w	r3, r3, #32
 800ce54:	6023      	str	r3, [r4, #0]
 800ce56:	2310      	movs	r3, #16
 800ce58:	e7b0      	b.n	800cdbc <_printf_i+0xfc>
 800ce5a:	6823      	ldr	r3, [r4, #0]
 800ce5c:	f043 0320 	orr.w	r3, r3, #32
 800ce60:	6023      	str	r3, [r4, #0]
 800ce62:	2378      	movs	r3, #120	; 0x78
 800ce64:	4828      	ldr	r0, [pc, #160]	; (800cf08 <_printf_i+0x248>)
 800ce66:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800ce6a:	e7e3      	b.n	800ce34 <_printf_i+0x174>
 800ce6c:	0659      	lsls	r1, r3, #25
 800ce6e:	bf48      	it	mi
 800ce70:	b2b6      	uxthmi	r6, r6
 800ce72:	e7e6      	b.n	800ce42 <_printf_i+0x182>
 800ce74:	4615      	mov	r5, r2
 800ce76:	e7bb      	b.n	800cdf0 <_printf_i+0x130>
 800ce78:	682b      	ldr	r3, [r5, #0]
 800ce7a:	6826      	ldr	r6, [r4, #0]
 800ce7c:	6961      	ldr	r1, [r4, #20]
 800ce7e:	1d18      	adds	r0, r3, #4
 800ce80:	6028      	str	r0, [r5, #0]
 800ce82:	0635      	lsls	r5, r6, #24
 800ce84:	681b      	ldr	r3, [r3, #0]
 800ce86:	d501      	bpl.n	800ce8c <_printf_i+0x1cc>
 800ce88:	6019      	str	r1, [r3, #0]
 800ce8a:	e002      	b.n	800ce92 <_printf_i+0x1d2>
 800ce8c:	0670      	lsls	r0, r6, #25
 800ce8e:	d5fb      	bpl.n	800ce88 <_printf_i+0x1c8>
 800ce90:	8019      	strh	r1, [r3, #0]
 800ce92:	2300      	movs	r3, #0
 800ce94:	6123      	str	r3, [r4, #16]
 800ce96:	4615      	mov	r5, r2
 800ce98:	e7ba      	b.n	800ce10 <_printf_i+0x150>
 800ce9a:	682b      	ldr	r3, [r5, #0]
 800ce9c:	1d1a      	adds	r2, r3, #4
 800ce9e:	602a      	str	r2, [r5, #0]
 800cea0:	681d      	ldr	r5, [r3, #0]
 800cea2:	6862      	ldr	r2, [r4, #4]
 800cea4:	2100      	movs	r1, #0
 800cea6:	4628      	mov	r0, r5
 800cea8:	f7f3 f9a2 	bl	80001f0 <memchr>
 800ceac:	b108      	cbz	r0, 800ceb2 <_printf_i+0x1f2>
 800ceae:	1b40      	subs	r0, r0, r5
 800ceb0:	6060      	str	r0, [r4, #4]
 800ceb2:	6863      	ldr	r3, [r4, #4]
 800ceb4:	6123      	str	r3, [r4, #16]
 800ceb6:	2300      	movs	r3, #0
 800ceb8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800cebc:	e7a8      	b.n	800ce10 <_printf_i+0x150>
 800cebe:	6923      	ldr	r3, [r4, #16]
 800cec0:	462a      	mov	r2, r5
 800cec2:	4649      	mov	r1, r9
 800cec4:	4640      	mov	r0, r8
 800cec6:	47d0      	blx	sl
 800cec8:	3001      	adds	r0, #1
 800ceca:	d0ab      	beq.n	800ce24 <_printf_i+0x164>
 800cecc:	6823      	ldr	r3, [r4, #0]
 800cece:	079b      	lsls	r3, r3, #30
 800ced0:	d413      	bmi.n	800cefa <_printf_i+0x23a>
 800ced2:	68e0      	ldr	r0, [r4, #12]
 800ced4:	9b03      	ldr	r3, [sp, #12]
 800ced6:	4298      	cmp	r0, r3
 800ced8:	bfb8      	it	lt
 800ceda:	4618      	movlt	r0, r3
 800cedc:	e7a4      	b.n	800ce28 <_printf_i+0x168>
 800cede:	2301      	movs	r3, #1
 800cee0:	4632      	mov	r2, r6
 800cee2:	4649      	mov	r1, r9
 800cee4:	4640      	mov	r0, r8
 800cee6:	47d0      	blx	sl
 800cee8:	3001      	adds	r0, #1
 800ceea:	d09b      	beq.n	800ce24 <_printf_i+0x164>
 800ceec:	3501      	adds	r5, #1
 800ceee:	68e3      	ldr	r3, [r4, #12]
 800cef0:	9903      	ldr	r1, [sp, #12]
 800cef2:	1a5b      	subs	r3, r3, r1
 800cef4:	42ab      	cmp	r3, r5
 800cef6:	dcf2      	bgt.n	800cede <_printf_i+0x21e>
 800cef8:	e7eb      	b.n	800ced2 <_printf_i+0x212>
 800cefa:	2500      	movs	r5, #0
 800cefc:	f104 0619 	add.w	r6, r4, #25
 800cf00:	e7f5      	b.n	800ceee <_printf_i+0x22e>
 800cf02:	bf00      	nop
 800cf04:	0800d73d 	.word	0x0800d73d
 800cf08:	0800d74e 	.word	0x0800d74e

0800cf0c <memcpy>:
 800cf0c:	440a      	add	r2, r1
 800cf0e:	4291      	cmp	r1, r2
 800cf10:	f100 33ff 	add.w	r3, r0, #4294967295
 800cf14:	d100      	bne.n	800cf18 <memcpy+0xc>
 800cf16:	4770      	bx	lr
 800cf18:	b510      	push	{r4, lr}
 800cf1a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800cf1e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800cf22:	4291      	cmp	r1, r2
 800cf24:	d1f9      	bne.n	800cf1a <memcpy+0xe>
 800cf26:	bd10      	pop	{r4, pc}

0800cf28 <memmove>:
 800cf28:	4288      	cmp	r0, r1
 800cf2a:	b510      	push	{r4, lr}
 800cf2c:	eb01 0402 	add.w	r4, r1, r2
 800cf30:	d902      	bls.n	800cf38 <memmove+0x10>
 800cf32:	4284      	cmp	r4, r0
 800cf34:	4623      	mov	r3, r4
 800cf36:	d807      	bhi.n	800cf48 <memmove+0x20>
 800cf38:	1e43      	subs	r3, r0, #1
 800cf3a:	42a1      	cmp	r1, r4
 800cf3c:	d008      	beq.n	800cf50 <memmove+0x28>
 800cf3e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800cf42:	f803 2f01 	strb.w	r2, [r3, #1]!
 800cf46:	e7f8      	b.n	800cf3a <memmove+0x12>
 800cf48:	4402      	add	r2, r0
 800cf4a:	4601      	mov	r1, r0
 800cf4c:	428a      	cmp	r2, r1
 800cf4e:	d100      	bne.n	800cf52 <memmove+0x2a>
 800cf50:	bd10      	pop	{r4, pc}
 800cf52:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800cf56:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800cf5a:	e7f7      	b.n	800cf4c <memmove+0x24>

0800cf5c <_free_r>:
 800cf5c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800cf5e:	2900      	cmp	r1, #0
 800cf60:	d044      	beq.n	800cfec <_free_r+0x90>
 800cf62:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800cf66:	9001      	str	r0, [sp, #4]
 800cf68:	2b00      	cmp	r3, #0
 800cf6a:	f1a1 0404 	sub.w	r4, r1, #4
 800cf6e:	bfb8      	it	lt
 800cf70:	18e4      	addlt	r4, r4, r3
 800cf72:	f000 f913 	bl	800d19c <__malloc_lock>
 800cf76:	4a1e      	ldr	r2, [pc, #120]	; (800cff0 <_free_r+0x94>)
 800cf78:	9801      	ldr	r0, [sp, #4]
 800cf7a:	6813      	ldr	r3, [r2, #0]
 800cf7c:	b933      	cbnz	r3, 800cf8c <_free_r+0x30>
 800cf7e:	6063      	str	r3, [r4, #4]
 800cf80:	6014      	str	r4, [r2, #0]
 800cf82:	b003      	add	sp, #12
 800cf84:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800cf88:	f000 b90e 	b.w	800d1a8 <__malloc_unlock>
 800cf8c:	42a3      	cmp	r3, r4
 800cf8e:	d908      	bls.n	800cfa2 <_free_r+0x46>
 800cf90:	6825      	ldr	r5, [r4, #0]
 800cf92:	1961      	adds	r1, r4, r5
 800cf94:	428b      	cmp	r3, r1
 800cf96:	bf01      	itttt	eq
 800cf98:	6819      	ldreq	r1, [r3, #0]
 800cf9a:	685b      	ldreq	r3, [r3, #4]
 800cf9c:	1949      	addeq	r1, r1, r5
 800cf9e:	6021      	streq	r1, [r4, #0]
 800cfa0:	e7ed      	b.n	800cf7e <_free_r+0x22>
 800cfa2:	461a      	mov	r2, r3
 800cfa4:	685b      	ldr	r3, [r3, #4]
 800cfa6:	b10b      	cbz	r3, 800cfac <_free_r+0x50>
 800cfa8:	42a3      	cmp	r3, r4
 800cfaa:	d9fa      	bls.n	800cfa2 <_free_r+0x46>
 800cfac:	6811      	ldr	r1, [r2, #0]
 800cfae:	1855      	adds	r5, r2, r1
 800cfb0:	42a5      	cmp	r5, r4
 800cfb2:	d10b      	bne.n	800cfcc <_free_r+0x70>
 800cfb4:	6824      	ldr	r4, [r4, #0]
 800cfb6:	4421      	add	r1, r4
 800cfb8:	1854      	adds	r4, r2, r1
 800cfba:	42a3      	cmp	r3, r4
 800cfbc:	6011      	str	r1, [r2, #0]
 800cfbe:	d1e0      	bne.n	800cf82 <_free_r+0x26>
 800cfc0:	681c      	ldr	r4, [r3, #0]
 800cfc2:	685b      	ldr	r3, [r3, #4]
 800cfc4:	6053      	str	r3, [r2, #4]
 800cfc6:	4421      	add	r1, r4
 800cfc8:	6011      	str	r1, [r2, #0]
 800cfca:	e7da      	b.n	800cf82 <_free_r+0x26>
 800cfcc:	d902      	bls.n	800cfd4 <_free_r+0x78>
 800cfce:	230c      	movs	r3, #12
 800cfd0:	6003      	str	r3, [r0, #0]
 800cfd2:	e7d6      	b.n	800cf82 <_free_r+0x26>
 800cfd4:	6825      	ldr	r5, [r4, #0]
 800cfd6:	1961      	adds	r1, r4, r5
 800cfd8:	428b      	cmp	r3, r1
 800cfda:	bf04      	itt	eq
 800cfdc:	6819      	ldreq	r1, [r3, #0]
 800cfde:	685b      	ldreq	r3, [r3, #4]
 800cfe0:	6063      	str	r3, [r4, #4]
 800cfe2:	bf04      	itt	eq
 800cfe4:	1949      	addeq	r1, r1, r5
 800cfe6:	6021      	streq	r1, [r4, #0]
 800cfe8:	6054      	str	r4, [r2, #4]
 800cfea:	e7ca      	b.n	800cf82 <_free_r+0x26>
 800cfec:	b003      	add	sp, #12
 800cfee:	bd30      	pop	{r4, r5, pc}
 800cff0:	20002824 	.word	0x20002824

0800cff4 <sbrk_aligned>:
 800cff4:	b570      	push	{r4, r5, r6, lr}
 800cff6:	4e0e      	ldr	r6, [pc, #56]	; (800d030 <sbrk_aligned+0x3c>)
 800cff8:	460c      	mov	r4, r1
 800cffa:	6831      	ldr	r1, [r6, #0]
 800cffc:	4605      	mov	r5, r0
 800cffe:	b911      	cbnz	r1, 800d006 <sbrk_aligned+0x12>
 800d000:	f000 f8bc 	bl	800d17c <_sbrk_r>
 800d004:	6030      	str	r0, [r6, #0]
 800d006:	4621      	mov	r1, r4
 800d008:	4628      	mov	r0, r5
 800d00a:	f000 f8b7 	bl	800d17c <_sbrk_r>
 800d00e:	1c43      	adds	r3, r0, #1
 800d010:	d00a      	beq.n	800d028 <sbrk_aligned+0x34>
 800d012:	1cc4      	adds	r4, r0, #3
 800d014:	f024 0403 	bic.w	r4, r4, #3
 800d018:	42a0      	cmp	r0, r4
 800d01a:	d007      	beq.n	800d02c <sbrk_aligned+0x38>
 800d01c:	1a21      	subs	r1, r4, r0
 800d01e:	4628      	mov	r0, r5
 800d020:	f000 f8ac 	bl	800d17c <_sbrk_r>
 800d024:	3001      	adds	r0, #1
 800d026:	d101      	bne.n	800d02c <sbrk_aligned+0x38>
 800d028:	f04f 34ff 	mov.w	r4, #4294967295
 800d02c:	4620      	mov	r0, r4
 800d02e:	bd70      	pop	{r4, r5, r6, pc}
 800d030:	20002828 	.word	0x20002828

0800d034 <_malloc_r>:
 800d034:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d038:	1ccd      	adds	r5, r1, #3
 800d03a:	f025 0503 	bic.w	r5, r5, #3
 800d03e:	3508      	adds	r5, #8
 800d040:	2d0c      	cmp	r5, #12
 800d042:	bf38      	it	cc
 800d044:	250c      	movcc	r5, #12
 800d046:	2d00      	cmp	r5, #0
 800d048:	4607      	mov	r7, r0
 800d04a:	db01      	blt.n	800d050 <_malloc_r+0x1c>
 800d04c:	42a9      	cmp	r1, r5
 800d04e:	d905      	bls.n	800d05c <_malloc_r+0x28>
 800d050:	230c      	movs	r3, #12
 800d052:	603b      	str	r3, [r7, #0]
 800d054:	2600      	movs	r6, #0
 800d056:	4630      	mov	r0, r6
 800d058:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d05c:	4e2e      	ldr	r6, [pc, #184]	; (800d118 <_malloc_r+0xe4>)
 800d05e:	f000 f89d 	bl	800d19c <__malloc_lock>
 800d062:	6833      	ldr	r3, [r6, #0]
 800d064:	461c      	mov	r4, r3
 800d066:	bb34      	cbnz	r4, 800d0b6 <_malloc_r+0x82>
 800d068:	4629      	mov	r1, r5
 800d06a:	4638      	mov	r0, r7
 800d06c:	f7ff ffc2 	bl	800cff4 <sbrk_aligned>
 800d070:	1c43      	adds	r3, r0, #1
 800d072:	4604      	mov	r4, r0
 800d074:	d14d      	bne.n	800d112 <_malloc_r+0xde>
 800d076:	6834      	ldr	r4, [r6, #0]
 800d078:	4626      	mov	r6, r4
 800d07a:	2e00      	cmp	r6, #0
 800d07c:	d140      	bne.n	800d100 <_malloc_r+0xcc>
 800d07e:	6823      	ldr	r3, [r4, #0]
 800d080:	4631      	mov	r1, r6
 800d082:	4638      	mov	r0, r7
 800d084:	eb04 0803 	add.w	r8, r4, r3
 800d088:	f000 f878 	bl	800d17c <_sbrk_r>
 800d08c:	4580      	cmp	r8, r0
 800d08e:	d13a      	bne.n	800d106 <_malloc_r+0xd2>
 800d090:	6821      	ldr	r1, [r4, #0]
 800d092:	3503      	adds	r5, #3
 800d094:	1a6d      	subs	r5, r5, r1
 800d096:	f025 0503 	bic.w	r5, r5, #3
 800d09a:	3508      	adds	r5, #8
 800d09c:	2d0c      	cmp	r5, #12
 800d09e:	bf38      	it	cc
 800d0a0:	250c      	movcc	r5, #12
 800d0a2:	4629      	mov	r1, r5
 800d0a4:	4638      	mov	r0, r7
 800d0a6:	f7ff ffa5 	bl	800cff4 <sbrk_aligned>
 800d0aa:	3001      	adds	r0, #1
 800d0ac:	d02b      	beq.n	800d106 <_malloc_r+0xd2>
 800d0ae:	6823      	ldr	r3, [r4, #0]
 800d0b0:	442b      	add	r3, r5
 800d0b2:	6023      	str	r3, [r4, #0]
 800d0b4:	e00e      	b.n	800d0d4 <_malloc_r+0xa0>
 800d0b6:	6822      	ldr	r2, [r4, #0]
 800d0b8:	1b52      	subs	r2, r2, r5
 800d0ba:	d41e      	bmi.n	800d0fa <_malloc_r+0xc6>
 800d0bc:	2a0b      	cmp	r2, #11
 800d0be:	d916      	bls.n	800d0ee <_malloc_r+0xba>
 800d0c0:	1961      	adds	r1, r4, r5
 800d0c2:	42a3      	cmp	r3, r4
 800d0c4:	6025      	str	r5, [r4, #0]
 800d0c6:	bf18      	it	ne
 800d0c8:	6059      	strne	r1, [r3, #4]
 800d0ca:	6863      	ldr	r3, [r4, #4]
 800d0cc:	bf08      	it	eq
 800d0ce:	6031      	streq	r1, [r6, #0]
 800d0d0:	5162      	str	r2, [r4, r5]
 800d0d2:	604b      	str	r3, [r1, #4]
 800d0d4:	4638      	mov	r0, r7
 800d0d6:	f104 060b 	add.w	r6, r4, #11
 800d0da:	f000 f865 	bl	800d1a8 <__malloc_unlock>
 800d0de:	f026 0607 	bic.w	r6, r6, #7
 800d0e2:	1d23      	adds	r3, r4, #4
 800d0e4:	1af2      	subs	r2, r6, r3
 800d0e6:	d0b6      	beq.n	800d056 <_malloc_r+0x22>
 800d0e8:	1b9b      	subs	r3, r3, r6
 800d0ea:	50a3      	str	r3, [r4, r2]
 800d0ec:	e7b3      	b.n	800d056 <_malloc_r+0x22>
 800d0ee:	6862      	ldr	r2, [r4, #4]
 800d0f0:	42a3      	cmp	r3, r4
 800d0f2:	bf0c      	ite	eq
 800d0f4:	6032      	streq	r2, [r6, #0]
 800d0f6:	605a      	strne	r2, [r3, #4]
 800d0f8:	e7ec      	b.n	800d0d4 <_malloc_r+0xa0>
 800d0fa:	4623      	mov	r3, r4
 800d0fc:	6864      	ldr	r4, [r4, #4]
 800d0fe:	e7b2      	b.n	800d066 <_malloc_r+0x32>
 800d100:	4634      	mov	r4, r6
 800d102:	6876      	ldr	r6, [r6, #4]
 800d104:	e7b9      	b.n	800d07a <_malloc_r+0x46>
 800d106:	230c      	movs	r3, #12
 800d108:	603b      	str	r3, [r7, #0]
 800d10a:	4638      	mov	r0, r7
 800d10c:	f000 f84c 	bl	800d1a8 <__malloc_unlock>
 800d110:	e7a1      	b.n	800d056 <_malloc_r+0x22>
 800d112:	6025      	str	r5, [r4, #0]
 800d114:	e7de      	b.n	800d0d4 <_malloc_r+0xa0>
 800d116:	bf00      	nop
 800d118:	20002824 	.word	0x20002824

0800d11c <_realloc_r>:
 800d11c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d120:	4680      	mov	r8, r0
 800d122:	4614      	mov	r4, r2
 800d124:	460e      	mov	r6, r1
 800d126:	b921      	cbnz	r1, 800d132 <_realloc_r+0x16>
 800d128:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d12c:	4611      	mov	r1, r2
 800d12e:	f7ff bf81 	b.w	800d034 <_malloc_r>
 800d132:	b92a      	cbnz	r2, 800d140 <_realloc_r+0x24>
 800d134:	f7ff ff12 	bl	800cf5c <_free_r>
 800d138:	4625      	mov	r5, r4
 800d13a:	4628      	mov	r0, r5
 800d13c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d140:	f000 f838 	bl	800d1b4 <_malloc_usable_size_r>
 800d144:	4284      	cmp	r4, r0
 800d146:	4607      	mov	r7, r0
 800d148:	d802      	bhi.n	800d150 <_realloc_r+0x34>
 800d14a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800d14e:	d812      	bhi.n	800d176 <_realloc_r+0x5a>
 800d150:	4621      	mov	r1, r4
 800d152:	4640      	mov	r0, r8
 800d154:	f7ff ff6e 	bl	800d034 <_malloc_r>
 800d158:	4605      	mov	r5, r0
 800d15a:	2800      	cmp	r0, #0
 800d15c:	d0ed      	beq.n	800d13a <_realloc_r+0x1e>
 800d15e:	42bc      	cmp	r4, r7
 800d160:	4622      	mov	r2, r4
 800d162:	4631      	mov	r1, r6
 800d164:	bf28      	it	cs
 800d166:	463a      	movcs	r2, r7
 800d168:	f7ff fed0 	bl	800cf0c <memcpy>
 800d16c:	4631      	mov	r1, r6
 800d16e:	4640      	mov	r0, r8
 800d170:	f7ff fef4 	bl	800cf5c <_free_r>
 800d174:	e7e1      	b.n	800d13a <_realloc_r+0x1e>
 800d176:	4635      	mov	r5, r6
 800d178:	e7df      	b.n	800d13a <_realloc_r+0x1e>
	...

0800d17c <_sbrk_r>:
 800d17c:	b538      	push	{r3, r4, r5, lr}
 800d17e:	4d06      	ldr	r5, [pc, #24]	; (800d198 <_sbrk_r+0x1c>)
 800d180:	2300      	movs	r3, #0
 800d182:	4604      	mov	r4, r0
 800d184:	4608      	mov	r0, r1
 800d186:	602b      	str	r3, [r5, #0]
 800d188:	f7f4 fb74 	bl	8001874 <_sbrk>
 800d18c:	1c43      	adds	r3, r0, #1
 800d18e:	d102      	bne.n	800d196 <_sbrk_r+0x1a>
 800d190:	682b      	ldr	r3, [r5, #0]
 800d192:	b103      	cbz	r3, 800d196 <_sbrk_r+0x1a>
 800d194:	6023      	str	r3, [r4, #0]
 800d196:	bd38      	pop	{r3, r4, r5, pc}
 800d198:	2000282c 	.word	0x2000282c

0800d19c <__malloc_lock>:
 800d19c:	4801      	ldr	r0, [pc, #4]	; (800d1a4 <__malloc_lock+0x8>)
 800d19e:	f000 b811 	b.w	800d1c4 <__retarget_lock_acquire_recursive>
 800d1a2:	bf00      	nop
 800d1a4:	20002830 	.word	0x20002830

0800d1a8 <__malloc_unlock>:
 800d1a8:	4801      	ldr	r0, [pc, #4]	; (800d1b0 <__malloc_unlock+0x8>)
 800d1aa:	f000 b80c 	b.w	800d1c6 <__retarget_lock_release_recursive>
 800d1ae:	bf00      	nop
 800d1b0:	20002830 	.word	0x20002830

0800d1b4 <_malloc_usable_size_r>:
 800d1b4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d1b8:	1f18      	subs	r0, r3, #4
 800d1ba:	2b00      	cmp	r3, #0
 800d1bc:	bfbc      	itt	lt
 800d1be:	580b      	ldrlt	r3, [r1, r0]
 800d1c0:	18c0      	addlt	r0, r0, r3
 800d1c2:	4770      	bx	lr

0800d1c4 <__retarget_lock_acquire_recursive>:
 800d1c4:	4770      	bx	lr

0800d1c6 <__retarget_lock_release_recursive>:
 800d1c6:	4770      	bx	lr

0800d1c8 <_init>:
 800d1c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d1ca:	bf00      	nop
 800d1cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d1ce:	bc08      	pop	{r3}
 800d1d0:	469e      	mov	lr, r3
 800d1d2:	4770      	bx	lr

0800d1d4 <_fini>:
 800d1d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d1d6:	bf00      	nop
 800d1d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d1da:	bc08      	pop	{r3}
 800d1dc:	469e      	mov	lr, r3
 800d1de:	4770      	bx	lr
