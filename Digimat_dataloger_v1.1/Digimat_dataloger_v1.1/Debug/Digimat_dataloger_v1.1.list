
Digimat_dataloger_v1.1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000766c  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000041c  0800780c  0800780c  0001780c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007c28  08007c28  00020088  2**0
                  CONTENTS
  4 .ARM          00000008  08007c28  08007c28  00017c28  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007c30  08007c30  00020088  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007c30  08007c30  00017c30  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007c34  08007c34  00017c34  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000088  20000000  08007c38  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000610  20000088  08007cc0  00020088  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000698  08007cc0  00020698  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020088  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000dd25  00000000  00000000  000200b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000216b  00000000  00000000  0002dddd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000bd0  00000000  00000000  0002ff48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000ae8  00000000  00000000  00030b18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000179fd  00000000  00000000  00031600  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001044a  00000000  00000000  00048ffd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008a391  00000000  00000000  00059447  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000e37d8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000034a4  00000000  00000000  000e3828  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000088 	.word	0x20000088
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080077f4 	.word	0x080077f4

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000008c 	.word	0x2000008c
 80001dc:	080077f4 	.word	0x080077f4

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_dmul>:
 8000290:	b570      	push	{r4, r5, r6, lr}
 8000292:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000296:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800029a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800029e:	bf1d      	ittte	ne
 80002a0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80002a4:	ea94 0f0c 	teqne	r4, ip
 80002a8:	ea95 0f0c 	teqne	r5, ip
 80002ac:	f000 f8de 	bleq	800046c <__aeabi_dmul+0x1dc>
 80002b0:	442c      	add	r4, r5
 80002b2:	ea81 0603 	eor.w	r6, r1, r3
 80002b6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80002ba:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80002be:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80002c2:	bf18      	it	ne
 80002c4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80002c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80002cc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80002d0:	d038      	beq.n	8000344 <__aeabi_dmul+0xb4>
 80002d2:	fba0 ce02 	umull	ip, lr, r0, r2
 80002d6:	f04f 0500 	mov.w	r5, #0
 80002da:	fbe1 e502 	umlal	lr, r5, r1, r2
 80002de:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80002e2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80002e6:	f04f 0600 	mov.w	r6, #0
 80002ea:	fbe1 5603 	umlal	r5, r6, r1, r3
 80002ee:	f09c 0f00 	teq	ip, #0
 80002f2:	bf18      	it	ne
 80002f4:	f04e 0e01 	orrne.w	lr, lr, #1
 80002f8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80002fc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000300:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000304:	d204      	bcs.n	8000310 <__aeabi_dmul+0x80>
 8000306:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800030a:	416d      	adcs	r5, r5
 800030c:	eb46 0606 	adc.w	r6, r6, r6
 8000310:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000314:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000318:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800031c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000320:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000324:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000328:	bf88      	it	hi
 800032a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800032e:	d81e      	bhi.n	800036e <__aeabi_dmul+0xde>
 8000330:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000334:	bf08      	it	eq
 8000336:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800033a:	f150 0000 	adcs.w	r0, r0, #0
 800033e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000342:	bd70      	pop	{r4, r5, r6, pc}
 8000344:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000348:	ea46 0101 	orr.w	r1, r6, r1
 800034c:	ea40 0002 	orr.w	r0, r0, r2
 8000350:	ea81 0103 	eor.w	r1, r1, r3
 8000354:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000358:	bfc2      	ittt	gt
 800035a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800035e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000362:	bd70      	popgt	{r4, r5, r6, pc}
 8000364:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000368:	f04f 0e00 	mov.w	lr, #0
 800036c:	3c01      	subs	r4, #1
 800036e:	f300 80ab 	bgt.w	80004c8 <__aeabi_dmul+0x238>
 8000372:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000376:	bfde      	ittt	le
 8000378:	2000      	movle	r0, #0
 800037a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800037e:	bd70      	pople	{r4, r5, r6, pc}
 8000380:	f1c4 0400 	rsb	r4, r4, #0
 8000384:	3c20      	subs	r4, #32
 8000386:	da35      	bge.n	80003f4 <__aeabi_dmul+0x164>
 8000388:	340c      	adds	r4, #12
 800038a:	dc1b      	bgt.n	80003c4 <__aeabi_dmul+0x134>
 800038c:	f104 0414 	add.w	r4, r4, #20
 8000390:	f1c4 0520 	rsb	r5, r4, #32
 8000394:	fa00 f305 	lsl.w	r3, r0, r5
 8000398:	fa20 f004 	lsr.w	r0, r0, r4
 800039c:	fa01 f205 	lsl.w	r2, r1, r5
 80003a0:	ea40 0002 	orr.w	r0, r0, r2
 80003a4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80003a8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80003ac:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003b0:	fa21 f604 	lsr.w	r6, r1, r4
 80003b4:	eb42 0106 	adc.w	r1, r2, r6
 80003b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003bc:	bf08      	it	eq
 80003be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003c2:	bd70      	pop	{r4, r5, r6, pc}
 80003c4:	f1c4 040c 	rsb	r4, r4, #12
 80003c8:	f1c4 0520 	rsb	r5, r4, #32
 80003cc:	fa00 f304 	lsl.w	r3, r0, r4
 80003d0:	fa20 f005 	lsr.w	r0, r0, r5
 80003d4:	fa01 f204 	lsl.w	r2, r1, r4
 80003d8:	ea40 0002 	orr.w	r0, r0, r2
 80003dc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80003e0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003e4:	f141 0100 	adc.w	r1, r1, #0
 80003e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003ec:	bf08      	it	eq
 80003ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003f2:	bd70      	pop	{r4, r5, r6, pc}
 80003f4:	f1c4 0520 	rsb	r5, r4, #32
 80003f8:	fa00 f205 	lsl.w	r2, r0, r5
 80003fc:	ea4e 0e02 	orr.w	lr, lr, r2
 8000400:	fa20 f304 	lsr.w	r3, r0, r4
 8000404:	fa01 f205 	lsl.w	r2, r1, r5
 8000408:	ea43 0302 	orr.w	r3, r3, r2
 800040c:	fa21 f004 	lsr.w	r0, r1, r4
 8000410:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000414:	fa21 f204 	lsr.w	r2, r1, r4
 8000418:	ea20 0002 	bic.w	r0, r0, r2
 800041c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000420:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000424:	bf08      	it	eq
 8000426:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800042a:	bd70      	pop	{r4, r5, r6, pc}
 800042c:	f094 0f00 	teq	r4, #0
 8000430:	d10f      	bne.n	8000452 <__aeabi_dmul+0x1c2>
 8000432:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000436:	0040      	lsls	r0, r0, #1
 8000438:	eb41 0101 	adc.w	r1, r1, r1
 800043c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000440:	bf08      	it	eq
 8000442:	3c01      	subeq	r4, #1
 8000444:	d0f7      	beq.n	8000436 <__aeabi_dmul+0x1a6>
 8000446:	ea41 0106 	orr.w	r1, r1, r6
 800044a:	f095 0f00 	teq	r5, #0
 800044e:	bf18      	it	ne
 8000450:	4770      	bxne	lr
 8000452:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000456:	0052      	lsls	r2, r2, #1
 8000458:	eb43 0303 	adc.w	r3, r3, r3
 800045c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000460:	bf08      	it	eq
 8000462:	3d01      	subeq	r5, #1
 8000464:	d0f7      	beq.n	8000456 <__aeabi_dmul+0x1c6>
 8000466:	ea43 0306 	orr.w	r3, r3, r6
 800046a:	4770      	bx	lr
 800046c:	ea94 0f0c 	teq	r4, ip
 8000470:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000474:	bf18      	it	ne
 8000476:	ea95 0f0c 	teqne	r5, ip
 800047a:	d00c      	beq.n	8000496 <__aeabi_dmul+0x206>
 800047c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000480:	bf18      	it	ne
 8000482:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000486:	d1d1      	bne.n	800042c <__aeabi_dmul+0x19c>
 8000488:	ea81 0103 	eor.w	r1, r1, r3
 800048c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000490:	f04f 0000 	mov.w	r0, #0
 8000494:	bd70      	pop	{r4, r5, r6, pc}
 8000496:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800049a:	bf06      	itte	eq
 800049c:	4610      	moveq	r0, r2
 800049e:	4619      	moveq	r1, r3
 80004a0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80004a4:	d019      	beq.n	80004da <__aeabi_dmul+0x24a>
 80004a6:	ea94 0f0c 	teq	r4, ip
 80004aa:	d102      	bne.n	80004b2 <__aeabi_dmul+0x222>
 80004ac:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80004b0:	d113      	bne.n	80004da <__aeabi_dmul+0x24a>
 80004b2:	ea95 0f0c 	teq	r5, ip
 80004b6:	d105      	bne.n	80004c4 <__aeabi_dmul+0x234>
 80004b8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80004bc:	bf1c      	itt	ne
 80004be:	4610      	movne	r0, r2
 80004c0:	4619      	movne	r1, r3
 80004c2:	d10a      	bne.n	80004da <__aeabi_dmul+0x24a>
 80004c4:	ea81 0103 	eor.w	r1, r1, r3
 80004c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80004cc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd70      	pop	{r4, r5, r6, pc}
 80004da:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80004de:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80004e2:	bd70      	pop	{r4, r5, r6, pc}

080004e4 <__aeabi_drsub>:
 80004e4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80004e8:	e002      	b.n	80004f0 <__adddf3>
 80004ea:	bf00      	nop

080004ec <__aeabi_dsub>:
 80004ec:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080004f0 <__adddf3>:
 80004f0:	b530      	push	{r4, r5, lr}
 80004f2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80004f6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80004fa:	ea94 0f05 	teq	r4, r5
 80004fe:	bf08      	it	eq
 8000500:	ea90 0f02 	teqeq	r0, r2
 8000504:	bf1f      	itttt	ne
 8000506:	ea54 0c00 	orrsne.w	ip, r4, r0
 800050a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800050e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000512:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000516:	f000 80e2 	beq.w	80006de <__adddf3+0x1ee>
 800051a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800051e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000522:	bfb8      	it	lt
 8000524:	426d      	neglt	r5, r5
 8000526:	dd0c      	ble.n	8000542 <__adddf3+0x52>
 8000528:	442c      	add	r4, r5
 800052a:	ea80 0202 	eor.w	r2, r0, r2
 800052e:	ea81 0303 	eor.w	r3, r1, r3
 8000532:	ea82 0000 	eor.w	r0, r2, r0
 8000536:	ea83 0101 	eor.w	r1, r3, r1
 800053a:	ea80 0202 	eor.w	r2, r0, r2
 800053e:	ea81 0303 	eor.w	r3, r1, r3
 8000542:	2d36      	cmp	r5, #54	; 0x36
 8000544:	bf88      	it	hi
 8000546:	bd30      	pophi	{r4, r5, pc}
 8000548:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800054c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000550:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000554:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000558:	d002      	beq.n	8000560 <__adddf3+0x70>
 800055a:	4240      	negs	r0, r0
 800055c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000560:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000564:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000568:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800056c:	d002      	beq.n	8000574 <__adddf3+0x84>
 800056e:	4252      	negs	r2, r2
 8000570:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000574:	ea94 0f05 	teq	r4, r5
 8000578:	f000 80a7 	beq.w	80006ca <__adddf3+0x1da>
 800057c:	f1a4 0401 	sub.w	r4, r4, #1
 8000580:	f1d5 0e20 	rsbs	lr, r5, #32
 8000584:	db0d      	blt.n	80005a2 <__adddf3+0xb2>
 8000586:	fa02 fc0e 	lsl.w	ip, r2, lr
 800058a:	fa22 f205 	lsr.w	r2, r2, r5
 800058e:	1880      	adds	r0, r0, r2
 8000590:	f141 0100 	adc.w	r1, r1, #0
 8000594:	fa03 f20e 	lsl.w	r2, r3, lr
 8000598:	1880      	adds	r0, r0, r2
 800059a:	fa43 f305 	asr.w	r3, r3, r5
 800059e:	4159      	adcs	r1, r3
 80005a0:	e00e      	b.n	80005c0 <__adddf3+0xd0>
 80005a2:	f1a5 0520 	sub.w	r5, r5, #32
 80005a6:	f10e 0e20 	add.w	lr, lr, #32
 80005aa:	2a01      	cmp	r2, #1
 80005ac:	fa03 fc0e 	lsl.w	ip, r3, lr
 80005b0:	bf28      	it	cs
 80005b2:	f04c 0c02 	orrcs.w	ip, ip, #2
 80005b6:	fa43 f305 	asr.w	r3, r3, r5
 80005ba:	18c0      	adds	r0, r0, r3
 80005bc:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	d507      	bpl.n	80005d6 <__adddf3+0xe6>
 80005c6:	f04f 0e00 	mov.w	lr, #0
 80005ca:	f1dc 0c00 	rsbs	ip, ip, #0
 80005ce:	eb7e 0000 	sbcs.w	r0, lr, r0
 80005d2:	eb6e 0101 	sbc.w	r1, lr, r1
 80005d6:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80005da:	d31b      	bcc.n	8000614 <__adddf3+0x124>
 80005dc:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80005e0:	d30c      	bcc.n	80005fc <__adddf3+0x10c>
 80005e2:	0849      	lsrs	r1, r1, #1
 80005e4:	ea5f 0030 	movs.w	r0, r0, rrx
 80005e8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80005ec:	f104 0401 	add.w	r4, r4, #1
 80005f0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80005f4:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80005f8:	f080 809a 	bcs.w	8000730 <__adddf3+0x240>
 80005fc:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000600:	bf08      	it	eq
 8000602:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000606:	f150 0000 	adcs.w	r0, r0, #0
 800060a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800060e:	ea41 0105 	orr.w	r1, r1, r5
 8000612:	bd30      	pop	{r4, r5, pc}
 8000614:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000618:	4140      	adcs	r0, r0
 800061a:	eb41 0101 	adc.w	r1, r1, r1
 800061e:	3c01      	subs	r4, #1
 8000620:	bf28      	it	cs
 8000622:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000626:	d2e9      	bcs.n	80005fc <__adddf3+0x10c>
 8000628:	f091 0f00 	teq	r1, #0
 800062c:	bf04      	itt	eq
 800062e:	4601      	moveq	r1, r0
 8000630:	2000      	moveq	r0, #0
 8000632:	fab1 f381 	clz	r3, r1
 8000636:	bf08      	it	eq
 8000638:	3320      	addeq	r3, #32
 800063a:	f1a3 030b 	sub.w	r3, r3, #11
 800063e:	f1b3 0220 	subs.w	r2, r3, #32
 8000642:	da0c      	bge.n	800065e <__adddf3+0x16e>
 8000644:	320c      	adds	r2, #12
 8000646:	dd08      	ble.n	800065a <__adddf3+0x16a>
 8000648:	f102 0c14 	add.w	ip, r2, #20
 800064c:	f1c2 020c 	rsb	r2, r2, #12
 8000650:	fa01 f00c 	lsl.w	r0, r1, ip
 8000654:	fa21 f102 	lsr.w	r1, r1, r2
 8000658:	e00c      	b.n	8000674 <__adddf3+0x184>
 800065a:	f102 0214 	add.w	r2, r2, #20
 800065e:	bfd8      	it	le
 8000660:	f1c2 0c20 	rsble	ip, r2, #32
 8000664:	fa01 f102 	lsl.w	r1, r1, r2
 8000668:	fa20 fc0c 	lsr.w	ip, r0, ip
 800066c:	bfdc      	itt	le
 800066e:	ea41 010c 	orrle.w	r1, r1, ip
 8000672:	4090      	lslle	r0, r2
 8000674:	1ae4      	subs	r4, r4, r3
 8000676:	bfa2      	ittt	ge
 8000678:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800067c:	4329      	orrge	r1, r5
 800067e:	bd30      	popge	{r4, r5, pc}
 8000680:	ea6f 0404 	mvn.w	r4, r4
 8000684:	3c1f      	subs	r4, #31
 8000686:	da1c      	bge.n	80006c2 <__adddf3+0x1d2>
 8000688:	340c      	adds	r4, #12
 800068a:	dc0e      	bgt.n	80006aa <__adddf3+0x1ba>
 800068c:	f104 0414 	add.w	r4, r4, #20
 8000690:	f1c4 0220 	rsb	r2, r4, #32
 8000694:	fa20 f004 	lsr.w	r0, r0, r4
 8000698:	fa01 f302 	lsl.w	r3, r1, r2
 800069c:	ea40 0003 	orr.w	r0, r0, r3
 80006a0:	fa21 f304 	lsr.w	r3, r1, r4
 80006a4:	ea45 0103 	orr.w	r1, r5, r3
 80006a8:	bd30      	pop	{r4, r5, pc}
 80006aa:	f1c4 040c 	rsb	r4, r4, #12
 80006ae:	f1c4 0220 	rsb	r2, r4, #32
 80006b2:	fa20 f002 	lsr.w	r0, r0, r2
 80006b6:	fa01 f304 	lsl.w	r3, r1, r4
 80006ba:	ea40 0003 	orr.w	r0, r0, r3
 80006be:	4629      	mov	r1, r5
 80006c0:	bd30      	pop	{r4, r5, pc}
 80006c2:	fa21 f004 	lsr.w	r0, r1, r4
 80006c6:	4629      	mov	r1, r5
 80006c8:	bd30      	pop	{r4, r5, pc}
 80006ca:	f094 0f00 	teq	r4, #0
 80006ce:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80006d2:	bf06      	itte	eq
 80006d4:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80006d8:	3401      	addeq	r4, #1
 80006da:	3d01      	subne	r5, #1
 80006dc:	e74e      	b.n	800057c <__adddf3+0x8c>
 80006de:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80006e2:	bf18      	it	ne
 80006e4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80006e8:	d029      	beq.n	800073e <__adddf3+0x24e>
 80006ea:	ea94 0f05 	teq	r4, r5
 80006ee:	bf08      	it	eq
 80006f0:	ea90 0f02 	teqeq	r0, r2
 80006f4:	d005      	beq.n	8000702 <__adddf3+0x212>
 80006f6:	ea54 0c00 	orrs.w	ip, r4, r0
 80006fa:	bf04      	itt	eq
 80006fc:	4619      	moveq	r1, r3
 80006fe:	4610      	moveq	r0, r2
 8000700:	bd30      	pop	{r4, r5, pc}
 8000702:	ea91 0f03 	teq	r1, r3
 8000706:	bf1e      	ittt	ne
 8000708:	2100      	movne	r1, #0
 800070a:	2000      	movne	r0, #0
 800070c:	bd30      	popne	{r4, r5, pc}
 800070e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000712:	d105      	bne.n	8000720 <__adddf3+0x230>
 8000714:	0040      	lsls	r0, r0, #1
 8000716:	4149      	adcs	r1, r1
 8000718:	bf28      	it	cs
 800071a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800071e:	bd30      	pop	{r4, r5, pc}
 8000720:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000724:	bf3c      	itt	cc
 8000726:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800072a:	bd30      	popcc	{r4, r5, pc}
 800072c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000730:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000734:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000738:	f04f 0000 	mov.w	r0, #0
 800073c:	bd30      	pop	{r4, r5, pc}
 800073e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000742:	bf1a      	itte	ne
 8000744:	4619      	movne	r1, r3
 8000746:	4610      	movne	r0, r2
 8000748:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800074c:	bf1c      	itt	ne
 800074e:	460b      	movne	r3, r1
 8000750:	4602      	movne	r2, r0
 8000752:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000756:	bf06      	itte	eq
 8000758:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800075c:	ea91 0f03 	teqeq	r1, r3
 8000760:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000764:	bd30      	pop	{r4, r5, pc}
 8000766:	bf00      	nop

08000768 <__aeabi_ui2d>:
 8000768:	f090 0f00 	teq	r0, #0
 800076c:	bf04      	itt	eq
 800076e:	2100      	moveq	r1, #0
 8000770:	4770      	bxeq	lr
 8000772:	b530      	push	{r4, r5, lr}
 8000774:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000778:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800077c:	f04f 0500 	mov.w	r5, #0
 8000780:	f04f 0100 	mov.w	r1, #0
 8000784:	e750      	b.n	8000628 <__adddf3+0x138>
 8000786:	bf00      	nop

08000788 <__aeabi_i2d>:
 8000788:	f090 0f00 	teq	r0, #0
 800078c:	bf04      	itt	eq
 800078e:	2100      	moveq	r1, #0
 8000790:	4770      	bxeq	lr
 8000792:	b530      	push	{r4, r5, lr}
 8000794:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000798:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800079c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80007a0:	bf48      	it	mi
 80007a2:	4240      	negmi	r0, r0
 80007a4:	f04f 0100 	mov.w	r1, #0
 80007a8:	e73e      	b.n	8000628 <__adddf3+0x138>
 80007aa:	bf00      	nop

080007ac <__aeabi_f2d>:
 80007ac:	0042      	lsls	r2, r0, #1
 80007ae:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80007b2:	ea4f 0131 	mov.w	r1, r1, rrx
 80007b6:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80007ba:	bf1f      	itttt	ne
 80007bc:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80007c0:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80007c4:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80007c8:	4770      	bxne	lr
 80007ca:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80007ce:	bf08      	it	eq
 80007d0:	4770      	bxeq	lr
 80007d2:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80007d6:	bf04      	itt	eq
 80007d8:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80007dc:	4770      	bxeq	lr
 80007de:	b530      	push	{r4, r5, lr}
 80007e0:	f44f 7460 	mov.w	r4, #896	; 0x380
 80007e4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80007e8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80007ec:	e71c      	b.n	8000628 <__adddf3+0x138>
 80007ee:	bf00      	nop

080007f0 <__aeabi_ul2d>:
 80007f0:	ea50 0201 	orrs.w	r2, r0, r1
 80007f4:	bf08      	it	eq
 80007f6:	4770      	bxeq	lr
 80007f8:	b530      	push	{r4, r5, lr}
 80007fa:	f04f 0500 	mov.w	r5, #0
 80007fe:	e00a      	b.n	8000816 <__aeabi_l2d+0x16>

08000800 <__aeabi_l2d>:
 8000800:	ea50 0201 	orrs.w	r2, r0, r1
 8000804:	bf08      	it	eq
 8000806:	4770      	bxeq	lr
 8000808:	b530      	push	{r4, r5, lr}
 800080a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800080e:	d502      	bpl.n	8000816 <__aeabi_l2d+0x16>
 8000810:	4240      	negs	r0, r0
 8000812:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000816:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800081a:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800081e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000822:	f43f aed8 	beq.w	80005d6 <__adddf3+0xe6>
 8000826:	f04f 0203 	mov.w	r2, #3
 800082a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800082e:	bf18      	it	ne
 8000830:	3203      	addne	r2, #3
 8000832:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000836:	bf18      	it	ne
 8000838:	3203      	addne	r2, #3
 800083a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800083e:	f1c2 0320 	rsb	r3, r2, #32
 8000842:	fa00 fc03 	lsl.w	ip, r0, r3
 8000846:	fa20 f002 	lsr.w	r0, r0, r2
 800084a:	fa01 fe03 	lsl.w	lr, r1, r3
 800084e:	ea40 000e 	orr.w	r0, r0, lr
 8000852:	fa21 f102 	lsr.w	r1, r1, r2
 8000856:	4414      	add	r4, r2
 8000858:	e6bd      	b.n	80005d6 <__adddf3+0xe6>
 800085a:	bf00      	nop

0800085c <__aeabi_d2uiz>:
 800085c:	004a      	lsls	r2, r1, #1
 800085e:	d211      	bcs.n	8000884 <__aeabi_d2uiz+0x28>
 8000860:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000864:	d211      	bcs.n	800088a <__aeabi_d2uiz+0x2e>
 8000866:	d50d      	bpl.n	8000884 <__aeabi_d2uiz+0x28>
 8000868:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 800086c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000870:	d40e      	bmi.n	8000890 <__aeabi_d2uiz+0x34>
 8000872:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000876:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800087a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800087e:	fa23 f002 	lsr.w	r0, r3, r2
 8000882:	4770      	bx	lr
 8000884:	f04f 0000 	mov.w	r0, #0
 8000888:	4770      	bx	lr
 800088a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800088e:	d102      	bne.n	8000896 <__aeabi_d2uiz+0x3a>
 8000890:	f04f 30ff 	mov.w	r0, #4294967295
 8000894:	4770      	bx	lr
 8000896:	f04f 0000 	mov.w	r0, #0
 800089a:	4770      	bx	lr

0800089c <__aeabi_uldivmod>:
 800089c:	b953      	cbnz	r3, 80008b4 <__aeabi_uldivmod+0x18>
 800089e:	b94a      	cbnz	r2, 80008b4 <__aeabi_uldivmod+0x18>
 80008a0:	2900      	cmp	r1, #0
 80008a2:	bf08      	it	eq
 80008a4:	2800      	cmpeq	r0, #0
 80008a6:	bf1c      	itt	ne
 80008a8:	f04f 31ff 	movne.w	r1, #4294967295
 80008ac:	f04f 30ff 	movne.w	r0, #4294967295
 80008b0:	f000 b974 	b.w	8000b9c <__aeabi_idiv0>
 80008b4:	f1ad 0c08 	sub.w	ip, sp, #8
 80008b8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80008bc:	f000 f806 	bl	80008cc <__udivmoddi4>
 80008c0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80008c4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80008c8:	b004      	add	sp, #16
 80008ca:	4770      	bx	lr

080008cc <__udivmoddi4>:
 80008cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80008d0:	9d08      	ldr	r5, [sp, #32]
 80008d2:	4604      	mov	r4, r0
 80008d4:	468e      	mov	lr, r1
 80008d6:	2b00      	cmp	r3, #0
 80008d8:	d14d      	bne.n	8000976 <__udivmoddi4+0xaa>
 80008da:	428a      	cmp	r2, r1
 80008dc:	4694      	mov	ip, r2
 80008de:	d969      	bls.n	80009b4 <__udivmoddi4+0xe8>
 80008e0:	fab2 f282 	clz	r2, r2
 80008e4:	b152      	cbz	r2, 80008fc <__udivmoddi4+0x30>
 80008e6:	fa01 f302 	lsl.w	r3, r1, r2
 80008ea:	f1c2 0120 	rsb	r1, r2, #32
 80008ee:	fa20 f101 	lsr.w	r1, r0, r1
 80008f2:	fa0c fc02 	lsl.w	ip, ip, r2
 80008f6:	ea41 0e03 	orr.w	lr, r1, r3
 80008fa:	4094      	lsls	r4, r2
 80008fc:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000900:	0c21      	lsrs	r1, r4, #16
 8000902:	fbbe f6f8 	udiv	r6, lr, r8
 8000906:	fa1f f78c 	uxth.w	r7, ip
 800090a:	fb08 e316 	mls	r3, r8, r6, lr
 800090e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000912:	fb06 f107 	mul.w	r1, r6, r7
 8000916:	4299      	cmp	r1, r3
 8000918:	d90a      	bls.n	8000930 <__udivmoddi4+0x64>
 800091a:	eb1c 0303 	adds.w	r3, ip, r3
 800091e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000922:	f080 811f 	bcs.w	8000b64 <__udivmoddi4+0x298>
 8000926:	4299      	cmp	r1, r3
 8000928:	f240 811c 	bls.w	8000b64 <__udivmoddi4+0x298>
 800092c:	3e02      	subs	r6, #2
 800092e:	4463      	add	r3, ip
 8000930:	1a5b      	subs	r3, r3, r1
 8000932:	b2a4      	uxth	r4, r4
 8000934:	fbb3 f0f8 	udiv	r0, r3, r8
 8000938:	fb08 3310 	mls	r3, r8, r0, r3
 800093c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000940:	fb00 f707 	mul.w	r7, r0, r7
 8000944:	42a7      	cmp	r7, r4
 8000946:	d90a      	bls.n	800095e <__udivmoddi4+0x92>
 8000948:	eb1c 0404 	adds.w	r4, ip, r4
 800094c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000950:	f080 810a 	bcs.w	8000b68 <__udivmoddi4+0x29c>
 8000954:	42a7      	cmp	r7, r4
 8000956:	f240 8107 	bls.w	8000b68 <__udivmoddi4+0x29c>
 800095a:	4464      	add	r4, ip
 800095c:	3802      	subs	r0, #2
 800095e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000962:	1be4      	subs	r4, r4, r7
 8000964:	2600      	movs	r6, #0
 8000966:	b11d      	cbz	r5, 8000970 <__udivmoddi4+0xa4>
 8000968:	40d4      	lsrs	r4, r2
 800096a:	2300      	movs	r3, #0
 800096c:	e9c5 4300 	strd	r4, r3, [r5]
 8000970:	4631      	mov	r1, r6
 8000972:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000976:	428b      	cmp	r3, r1
 8000978:	d909      	bls.n	800098e <__udivmoddi4+0xc2>
 800097a:	2d00      	cmp	r5, #0
 800097c:	f000 80ef 	beq.w	8000b5e <__udivmoddi4+0x292>
 8000980:	2600      	movs	r6, #0
 8000982:	e9c5 0100 	strd	r0, r1, [r5]
 8000986:	4630      	mov	r0, r6
 8000988:	4631      	mov	r1, r6
 800098a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800098e:	fab3 f683 	clz	r6, r3
 8000992:	2e00      	cmp	r6, #0
 8000994:	d14a      	bne.n	8000a2c <__udivmoddi4+0x160>
 8000996:	428b      	cmp	r3, r1
 8000998:	d302      	bcc.n	80009a0 <__udivmoddi4+0xd4>
 800099a:	4282      	cmp	r2, r0
 800099c:	f200 80f9 	bhi.w	8000b92 <__udivmoddi4+0x2c6>
 80009a0:	1a84      	subs	r4, r0, r2
 80009a2:	eb61 0303 	sbc.w	r3, r1, r3
 80009a6:	2001      	movs	r0, #1
 80009a8:	469e      	mov	lr, r3
 80009aa:	2d00      	cmp	r5, #0
 80009ac:	d0e0      	beq.n	8000970 <__udivmoddi4+0xa4>
 80009ae:	e9c5 4e00 	strd	r4, lr, [r5]
 80009b2:	e7dd      	b.n	8000970 <__udivmoddi4+0xa4>
 80009b4:	b902      	cbnz	r2, 80009b8 <__udivmoddi4+0xec>
 80009b6:	deff      	udf	#255	; 0xff
 80009b8:	fab2 f282 	clz	r2, r2
 80009bc:	2a00      	cmp	r2, #0
 80009be:	f040 8092 	bne.w	8000ae6 <__udivmoddi4+0x21a>
 80009c2:	eba1 010c 	sub.w	r1, r1, ip
 80009c6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80009ca:	fa1f fe8c 	uxth.w	lr, ip
 80009ce:	2601      	movs	r6, #1
 80009d0:	0c20      	lsrs	r0, r4, #16
 80009d2:	fbb1 f3f7 	udiv	r3, r1, r7
 80009d6:	fb07 1113 	mls	r1, r7, r3, r1
 80009da:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80009de:	fb0e f003 	mul.w	r0, lr, r3
 80009e2:	4288      	cmp	r0, r1
 80009e4:	d908      	bls.n	80009f8 <__udivmoddi4+0x12c>
 80009e6:	eb1c 0101 	adds.w	r1, ip, r1
 80009ea:	f103 38ff 	add.w	r8, r3, #4294967295
 80009ee:	d202      	bcs.n	80009f6 <__udivmoddi4+0x12a>
 80009f0:	4288      	cmp	r0, r1
 80009f2:	f200 80cb 	bhi.w	8000b8c <__udivmoddi4+0x2c0>
 80009f6:	4643      	mov	r3, r8
 80009f8:	1a09      	subs	r1, r1, r0
 80009fa:	b2a4      	uxth	r4, r4
 80009fc:	fbb1 f0f7 	udiv	r0, r1, r7
 8000a00:	fb07 1110 	mls	r1, r7, r0, r1
 8000a04:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000a08:	fb0e fe00 	mul.w	lr, lr, r0
 8000a0c:	45a6      	cmp	lr, r4
 8000a0e:	d908      	bls.n	8000a22 <__udivmoddi4+0x156>
 8000a10:	eb1c 0404 	adds.w	r4, ip, r4
 8000a14:	f100 31ff 	add.w	r1, r0, #4294967295
 8000a18:	d202      	bcs.n	8000a20 <__udivmoddi4+0x154>
 8000a1a:	45a6      	cmp	lr, r4
 8000a1c:	f200 80bb 	bhi.w	8000b96 <__udivmoddi4+0x2ca>
 8000a20:	4608      	mov	r0, r1
 8000a22:	eba4 040e 	sub.w	r4, r4, lr
 8000a26:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000a2a:	e79c      	b.n	8000966 <__udivmoddi4+0x9a>
 8000a2c:	f1c6 0720 	rsb	r7, r6, #32
 8000a30:	40b3      	lsls	r3, r6
 8000a32:	fa22 fc07 	lsr.w	ip, r2, r7
 8000a36:	ea4c 0c03 	orr.w	ip, ip, r3
 8000a3a:	fa20 f407 	lsr.w	r4, r0, r7
 8000a3e:	fa01 f306 	lsl.w	r3, r1, r6
 8000a42:	431c      	orrs	r4, r3
 8000a44:	40f9      	lsrs	r1, r7
 8000a46:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000a4a:	fa00 f306 	lsl.w	r3, r0, r6
 8000a4e:	fbb1 f8f9 	udiv	r8, r1, r9
 8000a52:	0c20      	lsrs	r0, r4, #16
 8000a54:	fa1f fe8c 	uxth.w	lr, ip
 8000a58:	fb09 1118 	mls	r1, r9, r8, r1
 8000a5c:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000a60:	fb08 f00e 	mul.w	r0, r8, lr
 8000a64:	4288      	cmp	r0, r1
 8000a66:	fa02 f206 	lsl.w	r2, r2, r6
 8000a6a:	d90b      	bls.n	8000a84 <__udivmoddi4+0x1b8>
 8000a6c:	eb1c 0101 	adds.w	r1, ip, r1
 8000a70:	f108 3aff 	add.w	sl, r8, #4294967295
 8000a74:	f080 8088 	bcs.w	8000b88 <__udivmoddi4+0x2bc>
 8000a78:	4288      	cmp	r0, r1
 8000a7a:	f240 8085 	bls.w	8000b88 <__udivmoddi4+0x2bc>
 8000a7e:	f1a8 0802 	sub.w	r8, r8, #2
 8000a82:	4461      	add	r1, ip
 8000a84:	1a09      	subs	r1, r1, r0
 8000a86:	b2a4      	uxth	r4, r4
 8000a88:	fbb1 f0f9 	udiv	r0, r1, r9
 8000a8c:	fb09 1110 	mls	r1, r9, r0, r1
 8000a90:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000a94:	fb00 fe0e 	mul.w	lr, r0, lr
 8000a98:	458e      	cmp	lr, r1
 8000a9a:	d908      	bls.n	8000aae <__udivmoddi4+0x1e2>
 8000a9c:	eb1c 0101 	adds.w	r1, ip, r1
 8000aa0:	f100 34ff 	add.w	r4, r0, #4294967295
 8000aa4:	d26c      	bcs.n	8000b80 <__udivmoddi4+0x2b4>
 8000aa6:	458e      	cmp	lr, r1
 8000aa8:	d96a      	bls.n	8000b80 <__udivmoddi4+0x2b4>
 8000aaa:	3802      	subs	r0, #2
 8000aac:	4461      	add	r1, ip
 8000aae:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000ab2:	fba0 9402 	umull	r9, r4, r0, r2
 8000ab6:	eba1 010e 	sub.w	r1, r1, lr
 8000aba:	42a1      	cmp	r1, r4
 8000abc:	46c8      	mov	r8, r9
 8000abe:	46a6      	mov	lr, r4
 8000ac0:	d356      	bcc.n	8000b70 <__udivmoddi4+0x2a4>
 8000ac2:	d053      	beq.n	8000b6c <__udivmoddi4+0x2a0>
 8000ac4:	b15d      	cbz	r5, 8000ade <__udivmoddi4+0x212>
 8000ac6:	ebb3 0208 	subs.w	r2, r3, r8
 8000aca:	eb61 010e 	sbc.w	r1, r1, lr
 8000ace:	fa01 f707 	lsl.w	r7, r1, r7
 8000ad2:	fa22 f306 	lsr.w	r3, r2, r6
 8000ad6:	40f1      	lsrs	r1, r6
 8000ad8:	431f      	orrs	r7, r3
 8000ada:	e9c5 7100 	strd	r7, r1, [r5]
 8000ade:	2600      	movs	r6, #0
 8000ae0:	4631      	mov	r1, r6
 8000ae2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ae6:	f1c2 0320 	rsb	r3, r2, #32
 8000aea:	40d8      	lsrs	r0, r3
 8000aec:	fa0c fc02 	lsl.w	ip, ip, r2
 8000af0:	fa21 f303 	lsr.w	r3, r1, r3
 8000af4:	4091      	lsls	r1, r2
 8000af6:	4301      	orrs	r1, r0
 8000af8:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000afc:	fa1f fe8c 	uxth.w	lr, ip
 8000b00:	fbb3 f0f7 	udiv	r0, r3, r7
 8000b04:	fb07 3610 	mls	r6, r7, r0, r3
 8000b08:	0c0b      	lsrs	r3, r1, #16
 8000b0a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000b0e:	fb00 f60e 	mul.w	r6, r0, lr
 8000b12:	429e      	cmp	r6, r3
 8000b14:	fa04 f402 	lsl.w	r4, r4, r2
 8000b18:	d908      	bls.n	8000b2c <__udivmoddi4+0x260>
 8000b1a:	eb1c 0303 	adds.w	r3, ip, r3
 8000b1e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000b22:	d22f      	bcs.n	8000b84 <__udivmoddi4+0x2b8>
 8000b24:	429e      	cmp	r6, r3
 8000b26:	d92d      	bls.n	8000b84 <__udivmoddi4+0x2b8>
 8000b28:	3802      	subs	r0, #2
 8000b2a:	4463      	add	r3, ip
 8000b2c:	1b9b      	subs	r3, r3, r6
 8000b2e:	b289      	uxth	r1, r1
 8000b30:	fbb3 f6f7 	udiv	r6, r3, r7
 8000b34:	fb07 3316 	mls	r3, r7, r6, r3
 8000b38:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000b3c:	fb06 f30e 	mul.w	r3, r6, lr
 8000b40:	428b      	cmp	r3, r1
 8000b42:	d908      	bls.n	8000b56 <__udivmoddi4+0x28a>
 8000b44:	eb1c 0101 	adds.w	r1, ip, r1
 8000b48:	f106 38ff 	add.w	r8, r6, #4294967295
 8000b4c:	d216      	bcs.n	8000b7c <__udivmoddi4+0x2b0>
 8000b4e:	428b      	cmp	r3, r1
 8000b50:	d914      	bls.n	8000b7c <__udivmoddi4+0x2b0>
 8000b52:	3e02      	subs	r6, #2
 8000b54:	4461      	add	r1, ip
 8000b56:	1ac9      	subs	r1, r1, r3
 8000b58:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000b5c:	e738      	b.n	80009d0 <__udivmoddi4+0x104>
 8000b5e:	462e      	mov	r6, r5
 8000b60:	4628      	mov	r0, r5
 8000b62:	e705      	b.n	8000970 <__udivmoddi4+0xa4>
 8000b64:	4606      	mov	r6, r0
 8000b66:	e6e3      	b.n	8000930 <__udivmoddi4+0x64>
 8000b68:	4618      	mov	r0, r3
 8000b6a:	e6f8      	b.n	800095e <__udivmoddi4+0x92>
 8000b6c:	454b      	cmp	r3, r9
 8000b6e:	d2a9      	bcs.n	8000ac4 <__udivmoddi4+0x1f8>
 8000b70:	ebb9 0802 	subs.w	r8, r9, r2
 8000b74:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000b78:	3801      	subs	r0, #1
 8000b7a:	e7a3      	b.n	8000ac4 <__udivmoddi4+0x1f8>
 8000b7c:	4646      	mov	r6, r8
 8000b7e:	e7ea      	b.n	8000b56 <__udivmoddi4+0x28a>
 8000b80:	4620      	mov	r0, r4
 8000b82:	e794      	b.n	8000aae <__udivmoddi4+0x1e2>
 8000b84:	4640      	mov	r0, r8
 8000b86:	e7d1      	b.n	8000b2c <__udivmoddi4+0x260>
 8000b88:	46d0      	mov	r8, sl
 8000b8a:	e77b      	b.n	8000a84 <__udivmoddi4+0x1b8>
 8000b8c:	3b02      	subs	r3, #2
 8000b8e:	4461      	add	r1, ip
 8000b90:	e732      	b.n	80009f8 <__udivmoddi4+0x12c>
 8000b92:	4630      	mov	r0, r6
 8000b94:	e709      	b.n	80009aa <__udivmoddi4+0xde>
 8000b96:	4464      	add	r4, ip
 8000b98:	3802      	subs	r0, #2
 8000b9a:	e742      	b.n	8000a22 <__udivmoddi4+0x156>

08000b9c <__aeabi_idiv0>:
 8000b9c:	4770      	bx	lr
 8000b9e:	bf00      	nop

08000ba0 <SELECT>:
 * SPI functions
 **************************************/

/* slave select */
static void SELECT(void)
{
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_RESET);
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	2110      	movs	r1, #16
 8000ba8:	4803      	ldr	r0, [pc, #12]	; (8000bb8 <SELECT+0x18>)
 8000baa:	f001 fcb7 	bl	800251c <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8000bae:	2001      	movs	r0, #1
 8000bb0:	f001 fa26 	bl	8002000 <HAL_Delay>
}
 8000bb4:	bf00      	nop
 8000bb6:	bd80      	pop	{r7, pc}
 8000bb8:	40020000 	.word	0x40020000

08000bbc <DESELECT>:

/* slave deselect */
static void DESELECT(void)
{
 8000bbc:	b580      	push	{r7, lr}
 8000bbe:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_SET);
 8000bc0:	2201      	movs	r2, #1
 8000bc2:	2110      	movs	r1, #16
 8000bc4:	4803      	ldr	r0, [pc, #12]	; (8000bd4 <DESELECT+0x18>)
 8000bc6:	f001 fca9 	bl	800251c <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8000bca:	2001      	movs	r0, #1
 8000bcc:	f001 fa18 	bl	8002000 <HAL_Delay>
}
 8000bd0:	bf00      	nop
 8000bd2:	bd80      	pop	{r7, pc}
 8000bd4:	40020000 	.word	0x40020000

08000bd8 <SPI_TxByte>:

/* SPI transmit a byte */
static void SPI_TxByte(uint8_t data)
{
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	b082      	sub	sp, #8
 8000bdc:	af00      	add	r7, sp, #0
 8000bde:	4603      	mov	r3, r0
 8000be0:	71fb      	strb	r3, [r7, #7]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8000be2:	bf00      	nop
 8000be4:	4b08      	ldr	r3, [pc, #32]	; (8000c08 <SPI_TxByte+0x30>)
 8000be6:	681b      	ldr	r3, [r3, #0]
 8000be8:	689b      	ldr	r3, [r3, #8]
 8000bea:	f003 0302 	and.w	r3, r3, #2
 8000bee:	2b02      	cmp	r3, #2
 8000bf0:	d1f8      	bne.n	8000be4 <SPI_TxByte+0xc>
	HAL_SPI_Transmit(HSPI_SDCARD, &data, 1, SPI_TIMEOUT);
 8000bf2:	1df9      	adds	r1, r7, #7
 8000bf4:	2364      	movs	r3, #100	; 0x64
 8000bf6:	2201      	movs	r2, #1
 8000bf8:	4803      	ldr	r0, [pc, #12]	; (8000c08 <SPI_TxByte+0x30>)
 8000bfa:	f002 f9ca 	bl	8002f92 <HAL_SPI_Transmit>
}
 8000bfe:	bf00      	nop
 8000c00:	3708      	adds	r7, #8
 8000c02:	46bd      	mov	sp, r7
 8000c04:	bd80      	pop	{r7, pc}
 8000c06:	bf00      	nop
 8000c08:	200000a8 	.word	0x200000a8

08000c0c <SPI_TxBuffer>:

/* SPI transmit buffer */
static void SPI_TxBuffer(uint8_t *buffer, uint16_t len)
{
 8000c0c:	b580      	push	{r7, lr}
 8000c0e:	b082      	sub	sp, #8
 8000c10:	af00      	add	r7, sp, #0
 8000c12:	6078      	str	r0, [r7, #4]
 8000c14:	460b      	mov	r3, r1
 8000c16:	807b      	strh	r3, [r7, #2]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8000c18:	bf00      	nop
 8000c1a:	4b08      	ldr	r3, [pc, #32]	; (8000c3c <SPI_TxBuffer+0x30>)
 8000c1c:	681b      	ldr	r3, [r3, #0]
 8000c1e:	689b      	ldr	r3, [r3, #8]
 8000c20:	f003 0302 	and.w	r3, r3, #2
 8000c24:	2b02      	cmp	r3, #2
 8000c26:	d1f8      	bne.n	8000c1a <SPI_TxBuffer+0xe>
	HAL_SPI_Transmit(HSPI_SDCARD, buffer, len, SPI_TIMEOUT);
 8000c28:	887a      	ldrh	r2, [r7, #2]
 8000c2a:	2364      	movs	r3, #100	; 0x64
 8000c2c:	6879      	ldr	r1, [r7, #4]
 8000c2e:	4803      	ldr	r0, [pc, #12]	; (8000c3c <SPI_TxBuffer+0x30>)
 8000c30:	f002 f9af 	bl	8002f92 <HAL_SPI_Transmit>
}
 8000c34:	bf00      	nop
 8000c36:	3708      	adds	r7, #8
 8000c38:	46bd      	mov	sp, r7
 8000c3a:	bd80      	pop	{r7, pc}
 8000c3c:	200000a8 	.word	0x200000a8

08000c40 <SPI_RxByte>:

/* SPI receive a byte */
static uint8_t SPI_RxByte(void)
{
 8000c40:	b580      	push	{r7, lr}
 8000c42:	b084      	sub	sp, #16
 8000c44:	af02      	add	r7, sp, #8
	uint8_t dummy, data;
	dummy = 0xFF;
 8000c46:	23ff      	movs	r3, #255	; 0xff
 8000c48:	71fb      	strb	r3, [r7, #7]

	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8000c4a:	bf00      	nop
 8000c4c:	4b09      	ldr	r3, [pc, #36]	; (8000c74 <SPI_RxByte+0x34>)
 8000c4e:	681b      	ldr	r3, [r3, #0]
 8000c50:	689b      	ldr	r3, [r3, #8]
 8000c52:	f003 0302 	and.w	r3, r3, #2
 8000c56:	2b02      	cmp	r3, #2
 8000c58:	d1f8      	bne.n	8000c4c <SPI_RxByte+0xc>
	HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 8000c5a:	1dba      	adds	r2, r7, #6
 8000c5c:	1df9      	adds	r1, r7, #7
 8000c5e:	2364      	movs	r3, #100	; 0x64
 8000c60:	9300      	str	r3, [sp, #0]
 8000c62:	2301      	movs	r3, #1
 8000c64:	4803      	ldr	r0, [pc, #12]	; (8000c74 <SPI_RxByte+0x34>)
 8000c66:	f002 fad0 	bl	800320a <HAL_SPI_TransmitReceive>

	return data;
 8000c6a:	79bb      	ldrb	r3, [r7, #6]
}
 8000c6c:	4618      	mov	r0, r3
 8000c6e:	3708      	adds	r7, #8
 8000c70:	46bd      	mov	sp, r7
 8000c72:	bd80      	pop	{r7, pc}
 8000c74:	200000a8 	.word	0x200000a8

08000c78 <SPI_RxBytePtr>:

/* SPI receive a byte via pointer */
static void SPI_RxBytePtr(uint8_t *buff) 
{
 8000c78:	b580      	push	{r7, lr}
 8000c7a:	b082      	sub	sp, #8
 8000c7c:	af00      	add	r7, sp, #0
 8000c7e:	6078      	str	r0, [r7, #4]
	*buff = SPI_RxByte();
 8000c80:	f7ff ffde 	bl	8000c40 <SPI_RxByte>
 8000c84:	4603      	mov	r3, r0
 8000c86:	461a      	mov	r2, r3
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	701a      	strb	r2, [r3, #0]
}
 8000c8c:	bf00      	nop
 8000c8e:	3708      	adds	r7, #8
 8000c90:	46bd      	mov	sp, r7
 8000c92:	bd80      	pop	{r7, pc}

08000c94 <SD_ReadyWait>:
 * SD functions
 **************************************/

/* wait SD ready */
static uint8_t SD_ReadyWait(void)
{
 8000c94:	b580      	push	{r7, lr}
 8000c96:	b082      	sub	sp, #8
 8000c98:	af00      	add	r7, sp, #0
	uint8_t res;

	/* timeout 500ms */
	Timer2 = 500;
 8000c9a:	4b0a      	ldr	r3, [pc, #40]	; (8000cc4 <SD_ReadyWait+0x30>)
 8000c9c:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8000ca0:	801a      	strh	r2, [r3, #0]

	/* if SD goes ready, receives 0xFF */
	do {
		res = SPI_RxByte();
 8000ca2:	f7ff ffcd 	bl	8000c40 <SPI_RxByte>
 8000ca6:	4603      	mov	r3, r0
 8000ca8:	71fb      	strb	r3, [r7, #7]
	} while ((res != 0xFF) && Timer2);
 8000caa:	79fb      	ldrb	r3, [r7, #7]
 8000cac:	2bff      	cmp	r3, #255	; 0xff
 8000cae:	d004      	beq.n	8000cba <SD_ReadyWait+0x26>
 8000cb0:	4b04      	ldr	r3, [pc, #16]	; (8000cc4 <SD_ReadyWait+0x30>)
 8000cb2:	881b      	ldrh	r3, [r3, #0]
 8000cb4:	b29b      	uxth	r3, r3
 8000cb6:	2b00      	cmp	r3, #0
 8000cb8:	d1f3      	bne.n	8000ca2 <SD_ReadyWait+0xe>

	return res;
 8000cba:	79fb      	ldrb	r3, [r7, #7]
}
 8000cbc:	4618      	mov	r0, r3
 8000cbe:	3708      	adds	r7, #8
 8000cc0:	46bd      	mov	sp, r7
 8000cc2:	bd80      	pop	{r7, pc}
 8000cc4:	20000642 	.word	0x20000642

08000cc8 <SD_PowerOn>:

/* power on */
static void SD_PowerOn(void) 
{
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	b084      	sub	sp, #16
 8000ccc:	af00      	add	r7, sp, #0
	uint8_t args[6];
	uint32_t cnt = 0x1FFF;
 8000cce:	f641 73ff 	movw	r3, #8191	; 0x1fff
 8000cd2:	60fb      	str	r3, [r7, #12]

	/* transmit bytes to wake up */
	DESELECT();
 8000cd4:	f7ff ff72 	bl	8000bbc <DESELECT>
	for(int i = 0; i < 10; i++)
 8000cd8:	2300      	movs	r3, #0
 8000cda:	60bb      	str	r3, [r7, #8]
 8000cdc:	e005      	b.n	8000cea <SD_PowerOn+0x22>
	{
		SPI_TxByte(0xFF);
 8000cde:	20ff      	movs	r0, #255	; 0xff
 8000ce0:	f7ff ff7a 	bl	8000bd8 <SPI_TxByte>
	for(int i = 0; i < 10; i++)
 8000ce4:	68bb      	ldr	r3, [r7, #8]
 8000ce6:	3301      	adds	r3, #1
 8000ce8:	60bb      	str	r3, [r7, #8]
 8000cea:	68bb      	ldr	r3, [r7, #8]
 8000cec:	2b09      	cmp	r3, #9
 8000cee:	ddf6      	ble.n	8000cde <SD_PowerOn+0x16>
	}

	/* slave select */
	SELECT();
 8000cf0:	f7ff ff56 	bl	8000ba0 <SELECT>

	/* make idle state */
	args[0] = CMD0;		/* CMD0:GO_IDLE_STATE */
 8000cf4:	2340      	movs	r3, #64	; 0x40
 8000cf6:	703b      	strb	r3, [r7, #0]
	args[1] = 0;
 8000cf8:	2300      	movs	r3, #0
 8000cfa:	707b      	strb	r3, [r7, #1]
	args[2] = 0;
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	70bb      	strb	r3, [r7, #2]
	args[3] = 0;
 8000d00:	2300      	movs	r3, #0
 8000d02:	70fb      	strb	r3, [r7, #3]
	args[4] = 0;
 8000d04:	2300      	movs	r3, #0
 8000d06:	713b      	strb	r3, [r7, #4]
	args[5] = 0x95;		/* CRC */
 8000d08:	2395      	movs	r3, #149	; 0x95
 8000d0a:	717b      	strb	r3, [r7, #5]

	SPI_TxBuffer(args, sizeof(args));
 8000d0c:	463b      	mov	r3, r7
 8000d0e:	2106      	movs	r1, #6
 8000d10:	4618      	mov	r0, r3
 8000d12:	f7ff ff7b 	bl	8000c0c <SPI_TxBuffer>

	/* wait response */
	while ((SPI_RxByte() != 0x01) && cnt)
 8000d16:	e002      	b.n	8000d1e <SD_PowerOn+0x56>
	{
		cnt--;
 8000d18:	68fb      	ldr	r3, [r7, #12]
 8000d1a:	3b01      	subs	r3, #1
 8000d1c:	60fb      	str	r3, [r7, #12]
	while ((SPI_RxByte() != 0x01) && cnt)
 8000d1e:	f7ff ff8f 	bl	8000c40 <SPI_RxByte>
 8000d22:	4603      	mov	r3, r0
 8000d24:	2b01      	cmp	r3, #1
 8000d26:	d002      	beq.n	8000d2e <SD_PowerOn+0x66>
 8000d28:	68fb      	ldr	r3, [r7, #12]
 8000d2a:	2b00      	cmp	r3, #0
 8000d2c:	d1f4      	bne.n	8000d18 <SD_PowerOn+0x50>
	}

	DESELECT();
 8000d2e:	f7ff ff45 	bl	8000bbc <DESELECT>
	SPI_TxByte(0XFF);
 8000d32:	20ff      	movs	r0, #255	; 0xff
 8000d34:	f7ff ff50 	bl	8000bd8 <SPI_TxByte>

	PowerFlag = 1;
 8000d38:	4b03      	ldr	r3, [pc, #12]	; (8000d48 <SD_PowerOn+0x80>)
 8000d3a:	2201      	movs	r2, #1
 8000d3c:	701a      	strb	r2, [r3, #0]
}
 8000d3e:	bf00      	nop
 8000d40:	3710      	adds	r7, #16
 8000d42:	46bd      	mov	sp, r7
 8000d44:	bd80      	pop	{r7, pc}
 8000d46:	bf00      	nop
 8000d48:	200000a5 	.word	0x200000a5

08000d4c <SD_PowerOff>:

/* power off */
static void SD_PowerOff(void) 
{
 8000d4c:	b480      	push	{r7}
 8000d4e:	af00      	add	r7, sp, #0
	PowerFlag = 0;
 8000d50:	4b03      	ldr	r3, [pc, #12]	; (8000d60 <SD_PowerOff+0x14>)
 8000d52:	2200      	movs	r2, #0
 8000d54:	701a      	strb	r2, [r3, #0]
}
 8000d56:	bf00      	nop
 8000d58:	46bd      	mov	sp, r7
 8000d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d5e:	4770      	bx	lr
 8000d60:	200000a5 	.word	0x200000a5

08000d64 <SD_CheckPower>:

/* check power flag */
static uint8_t SD_CheckPower(void) 
{
 8000d64:	b480      	push	{r7}
 8000d66:	af00      	add	r7, sp, #0
	return PowerFlag;
 8000d68:	4b03      	ldr	r3, [pc, #12]	; (8000d78 <SD_CheckPower+0x14>)
 8000d6a:	781b      	ldrb	r3, [r3, #0]
}
 8000d6c:	4618      	mov	r0, r3
 8000d6e:	46bd      	mov	sp, r7
 8000d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d74:	4770      	bx	lr
 8000d76:	bf00      	nop
 8000d78:	200000a5 	.word	0x200000a5

08000d7c <SD_RxDataBlock>:

/* receive data block */
static bool SD_RxDataBlock(BYTE *buff, UINT len)
{
 8000d7c:	b580      	push	{r7, lr}
 8000d7e:	b084      	sub	sp, #16
 8000d80:	af00      	add	r7, sp, #0
 8000d82:	6078      	str	r0, [r7, #4]
 8000d84:	6039      	str	r1, [r7, #0]
	uint8_t token;

	/* timeout 200ms */
	Timer1 = 200;
 8000d86:	4b14      	ldr	r3, [pc, #80]	; (8000dd8 <SD_RxDataBlock+0x5c>)
 8000d88:	22c8      	movs	r2, #200	; 0xc8
 8000d8a:	801a      	strh	r2, [r3, #0]

	/* loop until receive a response or timeout */
	do {
		token = SPI_RxByte();
 8000d8c:	f7ff ff58 	bl	8000c40 <SPI_RxByte>
 8000d90:	4603      	mov	r3, r0
 8000d92:	73fb      	strb	r3, [r7, #15]
	} while((token == 0xFF) && Timer1);
 8000d94:	7bfb      	ldrb	r3, [r7, #15]
 8000d96:	2bff      	cmp	r3, #255	; 0xff
 8000d98:	d104      	bne.n	8000da4 <SD_RxDataBlock+0x28>
 8000d9a:	4b0f      	ldr	r3, [pc, #60]	; (8000dd8 <SD_RxDataBlock+0x5c>)
 8000d9c:	881b      	ldrh	r3, [r3, #0]
 8000d9e:	b29b      	uxth	r3, r3
 8000da0:	2b00      	cmp	r3, #0
 8000da2:	d1f3      	bne.n	8000d8c <SD_RxDataBlock+0x10>

	/* invalid response */
	if(token != 0xFE) return FALSE;
 8000da4:	7bfb      	ldrb	r3, [r7, #15]
 8000da6:	2bfe      	cmp	r3, #254	; 0xfe
 8000da8:	d001      	beq.n	8000dae <SD_RxDataBlock+0x32>
 8000daa:	2300      	movs	r3, #0
 8000dac:	e00f      	b.n	8000dce <SD_RxDataBlock+0x52>

	/* receive data */
	do {
		SPI_RxBytePtr(buff++);
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	1c5a      	adds	r2, r3, #1
 8000db2:	607a      	str	r2, [r7, #4]
 8000db4:	4618      	mov	r0, r3
 8000db6:	f7ff ff5f 	bl	8000c78 <SPI_RxBytePtr>
	} while(len--);
 8000dba:	683b      	ldr	r3, [r7, #0]
 8000dbc:	1e5a      	subs	r2, r3, #1
 8000dbe:	603a      	str	r2, [r7, #0]
 8000dc0:	2b00      	cmp	r3, #0
 8000dc2:	d1f4      	bne.n	8000dae <SD_RxDataBlock+0x32>

	/* discard CRC */
	SPI_RxByte();
 8000dc4:	f7ff ff3c 	bl	8000c40 <SPI_RxByte>
	SPI_RxByte();
 8000dc8:	f7ff ff3a 	bl	8000c40 <SPI_RxByte>

	return TRUE;
 8000dcc:	2301      	movs	r3, #1
}
 8000dce:	4618      	mov	r0, r3
 8000dd0:	3710      	adds	r7, #16
 8000dd2:	46bd      	mov	sp, r7
 8000dd4:	bd80      	pop	{r7, pc}
 8000dd6:	bf00      	nop
 8000dd8:	20000641 	.word	0x20000641

08000ddc <SD_TxDataBlock>:

/* transmit data block */
#if _USE_WRITE == 1
static bool SD_TxDataBlock(const uint8_t *buff, BYTE token)
{
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	b084      	sub	sp, #16
 8000de0:	af00      	add	r7, sp, #0
 8000de2:	6078      	str	r0, [r7, #4]
 8000de4:	460b      	mov	r3, r1
 8000de6:	70fb      	strb	r3, [r7, #3]
	uint8_t resp;
	uint8_t i = 0;
 8000de8:	2300      	movs	r3, #0
 8000dea:	73bb      	strb	r3, [r7, #14]

	/* wait SD ready */
	if (SD_ReadyWait() != 0xFF) return FALSE;
 8000dec:	f7ff ff52 	bl	8000c94 <SD_ReadyWait>
 8000df0:	4603      	mov	r3, r0
 8000df2:	2bff      	cmp	r3, #255	; 0xff
 8000df4:	d001      	beq.n	8000dfa <SD_TxDataBlock+0x1e>
 8000df6:	2300      	movs	r3, #0
 8000df8:	e02f      	b.n	8000e5a <SD_TxDataBlock+0x7e>

	/* transmit token */
	SPI_TxByte(token);
 8000dfa:	78fb      	ldrb	r3, [r7, #3]
 8000dfc:	4618      	mov	r0, r3
 8000dfe:	f7ff feeb 	bl	8000bd8 <SPI_TxByte>

	/* if it's not STOP token, transmit data */
	if (token != 0xFD)
 8000e02:	78fb      	ldrb	r3, [r7, #3]
 8000e04:	2bfd      	cmp	r3, #253	; 0xfd
 8000e06:	d020      	beq.n	8000e4a <SD_TxDataBlock+0x6e>
	{
		SPI_TxBuffer((uint8_t*)buff, 512);
 8000e08:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000e0c:	6878      	ldr	r0, [r7, #4]
 8000e0e:	f7ff fefd 	bl	8000c0c <SPI_TxBuffer>

		/* discard CRC */
		SPI_RxByte();
 8000e12:	f7ff ff15 	bl	8000c40 <SPI_RxByte>
		SPI_RxByte();
 8000e16:	f7ff ff13 	bl	8000c40 <SPI_RxByte>

		/* receive response */
		while (i <= 64)
 8000e1a:	e00b      	b.n	8000e34 <SD_TxDataBlock+0x58>
		{
			resp = SPI_RxByte();
 8000e1c:	f7ff ff10 	bl	8000c40 <SPI_RxByte>
 8000e20:	4603      	mov	r3, r0
 8000e22:	73fb      	strb	r3, [r7, #15]

			/* transmit 0x05 accepted */
			if ((resp & 0x1F) == 0x05) break;
 8000e24:	7bfb      	ldrb	r3, [r7, #15]
 8000e26:	f003 031f 	and.w	r3, r3, #31
 8000e2a:	2b05      	cmp	r3, #5
 8000e2c:	d006      	beq.n	8000e3c <SD_TxDataBlock+0x60>
			i++;
 8000e2e:	7bbb      	ldrb	r3, [r7, #14]
 8000e30:	3301      	adds	r3, #1
 8000e32:	73bb      	strb	r3, [r7, #14]
		while (i <= 64)
 8000e34:	7bbb      	ldrb	r3, [r7, #14]
 8000e36:	2b40      	cmp	r3, #64	; 0x40
 8000e38:	d9f0      	bls.n	8000e1c <SD_TxDataBlock+0x40>
 8000e3a:	e000      	b.n	8000e3e <SD_TxDataBlock+0x62>
			if ((resp & 0x1F) == 0x05) break;
 8000e3c:	bf00      	nop
		}

		/* recv buffer clear */
		while (SPI_RxByte() == 0);
 8000e3e:	bf00      	nop
 8000e40:	f7ff fefe 	bl	8000c40 <SPI_RxByte>
 8000e44:	4603      	mov	r3, r0
 8000e46:	2b00      	cmp	r3, #0
 8000e48:	d0fa      	beq.n	8000e40 <SD_TxDataBlock+0x64>
	}

	/* transmit 0x05 accepted */
	if ((resp & 0x1F) == 0x05) return TRUE;
 8000e4a:	7bfb      	ldrb	r3, [r7, #15]
 8000e4c:	f003 031f 	and.w	r3, r3, #31
 8000e50:	2b05      	cmp	r3, #5
 8000e52:	d101      	bne.n	8000e58 <SD_TxDataBlock+0x7c>
 8000e54:	2301      	movs	r3, #1
 8000e56:	e000      	b.n	8000e5a <SD_TxDataBlock+0x7e>

	return FALSE;
 8000e58:	2300      	movs	r3, #0
}
 8000e5a:	4618      	mov	r0, r3
 8000e5c:	3710      	adds	r7, #16
 8000e5e:	46bd      	mov	sp, r7
 8000e60:	bd80      	pop	{r7, pc}

08000e62 <SD_SendCmd>:
#endif /* _USE_WRITE */

/* transmit command */
static BYTE SD_SendCmd(BYTE cmd, uint32_t arg)
{
 8000e62:	b580      	push	{r7, lr}
 8000e64:	b084      	sub	sp, #16
 8000e66:	af00      	add	r7, sp, #0
 8000e68:	4603      	mov	r3, r0
 8000e6a:	6039      	str	r1, [r7, #0]
 8000e6c:	71fb      	strb	r3, [r7, #7]
	uint8_t crc, res;

	/* wait SD ready */
	if (SD_ReadyWait() != 0xFF) return 0xFF;
 8000e6e:	f7ff ff11 	bl	8000c94 <SD_ReadyWait>
 8000e72:	4603      	mov	r3, r0
 8000e74:	2bff      	cmp	r3, #255	; 0xff
 8000e76:	d001      	beq.n	8000e7c <SD_SendCmd+0x1a>
 8000e78:	23ff      	movs	r3, #255	; 0xff
 8000e7a:	e042      	b.n	8000f02 <SD_SendCmd+0xa0>

	/* transmit command */
	SPI_TxByte(cmd); 					/* Command */
 8000e7c:	79fb      	ldrb	r3, [r7, #7]
 8000e7e:	4618      	mov	r0, r3
 8000e80:	f7ff feaa 	bl	8000bd8 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 24)); 	/* Argument[31..24] */
 8000e84:	683b      	ldr	r3, [r7, #0]
 8000e86:	0e1b      	lsrs	r3, r3, #24
 8000e88:	b2db      	uxtb	r3, r3
 8000e8a:	4618      	mov	r0, r3
 8000e8c:	f7ff fea4 	bl	8000bd8 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 16)); 	/* Argument[23..16] */
 8000e90:	683b      	ldr	r3, [r7, #0]
 8000e92:	0c1b      	lsrs	r3, r3, #16
 8000e94:	b2db      	uxtb	r3, r3
 8000e96:	4618      	mov	r0, r3
 8000e98:	f7ff fe9e 	bl	8000bd8 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 8)); 	/* Argument[15..8] */
 8000e9c:	683b      	ldr	r3, [r7, #0]
 8000e9e:	0a1b      	lsrs	r3, r3, #8
 8000ea0:	b2db      	uxtb	r3, r3
 8000ea2:	4618      	mov	r0, r3
 8000ea4:	f7ff fe98 	bl	8000bd8 <SPI_TxByte>
	SPI_TxByte((uint8_t)arg); 			/* Argument[7..0] */
 8000ea8:	683b      	ldr	r3, [r7, #0]
 8000eaa:	b2db      	uxtb	r3, r3
 8000eac:	4618      	mov	r0, r3
 8000eae:	f7ff fe93 	bl	8000bd8 <SPI_TxByte>

	/* prepare CRC */
	if(cmd == CMD0) crc = 0x95;	/* CRC for CMD0(0) */
 8000eb2:	79fb      	ldrb	r3, [r7, #7]
 8000eb4:	2b40      	cmp	r3, #64	; 0x40
 8000eb6:	d102      	bne.n	8000ebe <SD_SendCmd+0x5c>
 8000eb8:	2395      	movs	r3, #149	; 0x95
 8000eba:	73fb      	strb	r3, [r7, #15]
 8000ebc:	e007      	b.n	8000ece <SD_SendCmd+0x6c>
	else if(cmd == CMD8) crc = 0x87;	/* CRC for CMD8(0x1AA) */
 8000ebe:	79fb      	ldrb	r3, [r7, #7]
 8000ec0:	2b48      	cmp	r3, #72	; 0x48
 8000ec2:	d102      	bne.n	8000eca <SD_SendCmd+0x68>
 8000ec4:	2387      	movs	r3, #135	; 0x87
 8000ec6:	73fb      	strb	r3, [r7, #15]
 8000ec8:	e001      	b.n	8000ece <SD_SendCmd+0x6c>
	else crc = 1;
 8000eca:	2301      	movs	r3, #1
 8000ecc:	73fb      	strb	r3, [r7, #15]

	/* transmit CRC */
	SPI_TxByte(crc);
 8000ece:	7bfb      	ldrb	r3, [r7, #15]
 8000ed0:	4618      	mov	r0, r3
 8000ed2:	f7ff fe81 	bl	8000bd8 <SPI_TxByte>

	/* Skip a stuff byte when STOP_TRANSMISSION */
	if (cmd == CMD12) SPI_RxByte();
 8000ed6:	79fb      	ldrb	r3, [r7, #7]
 8000ed8:	2b4c      	cmp	r3, #76	; 0x4c
 8000eda:	d101      	bne.n	8000ee0 <SD_SendCmd+0x7e>
 8000edc:	f7ff feb0 	bl	8000c40 <SPI_RxByte>

	/* receive response */
	uint8_t n = 10;
 8000ee0:	230a      	movs	r3, #10
 8000ee2:	73bb      	strb	r3, [r7, #14]
	do {
		res = SPI_RxByte();
 8000ee4:	f7ff feac 	bl	8000c40 <SPI_RxByte>
 8000ee8:	4603      	mov	r3, r0
 8000eea:	737b      	strb	r3, [r7, #13]
	} while ((res & 0x80) && --n);
 8000eec:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8000ef0:	2b00      	cmp	r3, #0
 8000ef2:	da05      	bge.n	8000f00 <SD_SendCmd+0x9e>
 8000ef4:	7bbb      	ldrb	r3, [r7, #14]
 8000ef6:	3b01      	subs	r3, #1
 8000ef8:	73bb      	strb	r3, [r7, #14]
 8000efa:	7bbb      	ldrb	r3, [r7, #14]
 8000efc:	2b00      	cmp	r3, #0
 8000efe:	d1f1      	bne.n	8000ee4 <SD_SendCmd+0x82>

	return res;
 8000f00:	7b7b      	ldrb	r3, [r7, #13]
}
 8000f02:	4618      	mov	r0, r3
 8000f04:	3710      	adds	r7, #16
 8000f06:	46bd      	mov	sp, r7
 8000f08:	bd80      	pop	{r7, pc}
	...

08000f0c <SD_disk_initialize>:
 * user_diskio.c functions
 **************************************/

/* initialize SD */
DSTATUS SD_disk_initialize(BYTE drv) 
{
 8000f0c:	b590      	push	{r4, r7, lr}
 8000f0e:	b085      	sub	sp, #20
 8000f10:	af00      	add	r7, sp, #0
 8000f12:	4603      	mov	r3, r0
 8000f14:	71fb      	strb	r3, [r7, #7]
	uint8_t n, type, ocr[4];

	/* single drive, drv should be 0 */
	if(drv) return STA_NOINIT;
 8000f16:	79fb      	ldrb	r3, [r7, #7]
 8000f18:	2b00      	cmp	r3, #0
 8000f1a:	d001      	beq.n	8000f20 <SD_disk_initialize+0x14>
 8000f1c:	2301      	movs	r3, #1
 8000f1e:	e0d6      	b.n	80010ce <SD_disk_initialize+0x1c2>

	/* no disk */
	if(Stat & STA_NODISK) return Stat;
 8000f20:	4b6d      	ldr	r3, [pc, #436]	; (80010d8 <SD_disk_initialize+0x1cc>)
 8000f22:	781b      	ldrb	r3, [r3, #0]
 8000f24:	b2db      	uxtb	r3, r3
 8000f26:	f003 0302 	and.w	r3, r3, #2
 8000f2a:	2b00      	cmp	r3, #0
 8000f2c:	d003      	beq.n	8000f36 <SD_disk_initialize+0x2a>
 8000f2e:	4b6a      	ldr	r3, [pc, #424]	; (80010d8 <SD_disk_initialize+0x1cc>)
 8000f30:	781b      	ldrb	r3, [r3, #0]
 8000f32:	b2db      	uxtb	r3, r3
 8000f34:	e0cb      	b.n	80010ce <SD_disk_initialize+0x1c2>

	/* power on */
	SD_PowerOn();
 8000f36:	f7ff fec7 	bl	8000cc8 <SD_PowerOn>

	/* slave select */
	SELECT();
 8000f3a:	f7ff fe31 	bl	8000ba0 <SELECT>

	/* check disk type */
	type = 0;
 8000f3e:	2300      	movs	r3, #0
 8000f40:	73bb      	strb	r3, [r7, #14]

	/* send GO_IDLE_STATE command */
	if (SD_SendCmd(CMD0, 0) == 1)
 8000f42:	2100      	movs	r1, #0
 8000f44:	2040      	movs	r0, #64	; 0x40
 8000f46:	f7ff ff8c 	bl	8000e62 <SD_SendCmd>
 8000f4a:	4603      	mov	r3, r0
 8000f4c:	2b01      	cmp	r3, #1
 8000f4e:	f040 80a6 	bne.w	800109e <SD_disk_initialize+0x192>
	{
		/* timeout 1 sec */
		Timer1 = 1000;
 8000f52:	4b62      	ldr	r3, [pc, #392]	; (80010dc <SD_disk_initialize+0x1d0>)
 8000f54:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000f58:	801a      	strh	r2, [r3, #0]

		/* SDC V2+ accept CMD8 command, http://elm-chan.org/docs/mmc/mmc_e.html */
		if (SD_SendCmd(CMD8, 0x1AA) == 1)
 8000f5a:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8000f5e:	2048      	movs	r0, #72	; 0x48
 8000f60:	f7ff ff7f 	bl	8000e62 <SD_SendCmd>
 8000f64:	4603      	mov	r3, r0
 8000f66:	2b01      	cmp	r3, #1
 8000f68:	d158      	bne.n	800101c <SD_disk_initialize+0x110>
		{
			/* operation condition register */
			for (n = 0; n < 4; n++)
 8000f6a:	2300      	movs	r3, #0
 8000f6c:	73fb      	strb	r3, [r7, #15]
 8000f6e:	e00c      	b.n	8000f8a <SD_disk_initialize+0x7e>
			{
				ocr[n] = SPI_RxByte();
 8000f70:	7bfc      	ldrb	r4, [r7, #15]
 8000f72:	f7ff fe65 	bl	8000c40 <SPI_RxByte>
 8000f76:	4603      	mov	r3, r0
 8000f78:	461a      	mov	r2, r3
 8000f7a:	f104 0310 	add.w	r3, r4, #16
 8000f7e:	443b      	add	r3, r7
 8000f80:	f803 2c08 	strb.w	r2, [r3, #-8]
			for (n = 0; n < 4; n++)
 8000f84:	7bfb      	ldrb	r3, [r7, #15]
 8000f86:	3301      	adds	r3, #1
 8000f88:	73fb      	strb	r3, [r7, #15]
 8000f8a:	7bfb      	ldrb	r3, [r7, #15]
 8000f8c:	2b03      	cmp	r3, #3
 8000f8e:	d9ef      	bls.n	8000f70 <SD_disk_initialize+0x64>
			}

			/* voltage range 2.7-3.6V */
			if (ocr[2] == 0x01 && ocr[3] == 0xAA)
 8000f90:	7abb      	ldrb	r3, [r7, #10]
 8000f92:	2b01      	cmp	r3, #1
 8000f94:	f040 8083 	bne.w	800109e <SD_disk_initialize+0x192>
 8000f98:	7afb      	ldrb	r3, [r7, #11]
 8000f9a:	2baa      	cmp	r3, #170	; 0xaa
 8000f9c:	d17f      	bne.n	800109e <SD_disk_initialize+0x192>
			{
				/* ACMD41 with HCS bit */
				do {
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 8000f9e:	2100      	movs	r1, #0
 8000fa0:	2077      	movs	r0, #119	; 0x77
 8000fa2:	f7ff ff5e 	bl	8000e62 <SD_SendCmd>
 8000fa6:	4603      	mov	r3, r0
 8000fa8:	2b01      	cmp	r3, #1
 8000faa:	d807      	bhi.n	8000fbc <SD_disk_initialize+0xb0>
 8000fac:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8000fb0:	2069      	movs	r0, #105	; 0x69
 8000fb2:	f7ff ff56 	bl	8000e62 <SD_SendCmd>
 8000fb6:	4603      	mov	r3, r0
 8000fb8:	2b00      	cmp	r3, #0
 8000fba:	d005      	beq.n	8000fc8 <SD_disk_initialize+0xbc>
				} while (Timer1);
 8000fbc:	4b47      	ldr	r3, [pc, #284]	; (80010dc <SD_disk_initialize+0x1d0>)
 8000fbe:	881b      	ldrh	r3, [r3, #0]
 8000fc0:	b29b      	uxth	r3, r3
 8000fc2:	2b00      	cmp	r3, #0
 8000fc4:	d1eb      	bne.n	8000f9e <SD_disk_initialize+0x92>
 8000fc6:	e000      	b.n	8000fca <SD_disk_initialize+0xbe>
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 8000fc8:	bf00      	nop

				/* READ_OCR */
				if (Timer1 && SD_SendCmd(CMD58, 0) == 0)
 8000fca:	4b44      	ldr	r3, [pc, #272]	; (80010dc <SD_disk_initialize+0x1d0>)
 8000fcc:	881b      	ldrh	r3, [r3, #0]
 8000fce:	b29b      	uxth	r3, r3
 8000fd0:	2b00      	cmp	r3, #0
 8000fd2:	d064      	beq.n	800109e <SD_disk_initialize+0x192>
 8000fd4:	2100      	movs	r1, #0
 8000fd6:	207a      	movs	r0, #122	; 0x7a
 8000fd8:	f7ff ff43 	bl	8000e62 <SD_SendCmd>
 8000fdc:	4603      	mov	r3, r0
 8000fde:	2b00      	cmp	r3, #0
 8000fe0:	d15d      	bne.n	800109e <SD_disk_initialize+0x192>
				{
					/* Check CCS bit */
					for (n = 0; n < 4; n++)
 8000fe2:	2300      	movs	r3, #0
 8000fe4:	73fb      	strb	r3, [r7, #15]
 8000fe6:	e00c      	b.n	8001002 <SD_disk_initialize+0xf6>
					{
						ocr[n] = SPI_RxByte();
 8000fe8:	7bfc      	ldrb	r4, [r7, #15]
 8000fea:	f7ff fe29 	bl	8000c40 <SPI_RxByte>
 8000fee:	4603      	mov	r3, r0
 8000ff0:	461a      	mov	r2, r3
 8000ff2:	f104 0310 	add.w	r3, r4, #16
 8000ff6:	443b      	add	r3, r7
 8000ff8:	f803 2c08 	strb.w	r2, [r3, #-8]
					for (n = 0; n < 4; n++)
 8000ffc:	7bfb      	ldrb	r3, [r7, #15]
 8000ffe:	3301      	adds	r3, #1
 8001000:	73fb      	strb	r3, [r7, #15]
 8001002:	7bfb      	ldrb	r3, [r7, #15]
 8001004:	2b03      	cmp	r3, #3
 8001006:	d9ef      	bls.n	8000fe8 <SD_disk_initialize+0xdc>
					}

					/* SDv2 (HC or SC) */
					type = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;
 8001008:	7a3b      	ldrb	r3, [r7, #8]
 800100a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800100e:	2b00      	cmp	r3, #0
 8001010:	d001      	beq.n	8001016 <SD_disk_initialize+0x10a>
 8001012:	230c      	movs	r3, #12
 8001014:	e000      	b.n	8001018 <SD_disk_initialize+0x10c>
 8001016:	2304      	movs	r3, #4
 8001018:	73bb      	strb	r3, [r7, #14]
 800101a:	e040      	b.n	800109e <SD_disk_initialize+0x192>
			}
		}
		else
		{
			/* SDC V1 or MMC */
			type = (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) <= 1) ? CT_SD1 : CT_MMC;
 800101c:	2100      	movs	r1, #0
 800101e:	2077      	movs	r0, #119	; 0x77
 8001020:	f7ff ff1f 	bl	8000e62 <SD_SendCmd>
 8001024:	4603      	mov	r3, r0
 8001026:	2b01      	cmp	r3, #1
 8001028:	d808      	bhi.n	800103c <SD_disk_initialize+0x130>
 800102a:	2100      	movs	r1, #0
 800102c:	2069      	movs	r0, #105	; 0x69
 800102e:	f7ff ff18 	bl	8000e62 <SD_SendCmd>
 8001032:	4603      	mov	r3, r0
 8001034:	2b01      	cmp	r3, #1
 8001036:	d801      	bhi.n	800103c <SD_disk_initialize+0x130>
 8001038:	2302      	movs	r3, #2
 800103a:	e000      	b.n	800103e <SD_disk_initialize+0x132>
 800103c:	2301      	movs	r3, #1
 800103e:	73bb      	strb	r3, [r7, #14]

			do
			{
				if (type == CT_SD1)
 8001040:	7bbb      	ldrb	r3, [r7, #14]
 8001042:	2b02      	cmp	r3, #2
 8001044:	d10e      	bne.n	8001064 <SD_disk_initialize+0x158>
				{
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) == 0) break; /* ACMD41 */
 8001046:	2100      	movs	r1, #0
 8001048:	2077      	movs	r0, #119	; 0x77
 800104a:	f7ff ff0a 	bl	8000e62 <SD_SendCmd>
 800104e:	4603      	mov	r3, r0
 8001050:	2b01      	cmp	r3, #1
 8001052:	d80e      	bhi.n	8001072 <SD_disk_initialize+0x166>
 8001054:	2100      	movs	r1, #0
 8001056:	2069      	movs	r0, #105	; 0x69
 8001058:	f7ff ff03 	bl	8000e62 <SD_SendCmd>
 800105c:	4603      	mov	r3, r0
 800105e:	2b00      	cmp	r3, #0
 8001060:	d107      	bne.n	8001072 <SD_disk_initialize+0x166>
 8001062:	e00d      	b.n	8001080 <SD_disk_initialize+0x174>
				}
				else
				{
					if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 8001064:	2100      	movs	r1, #0
 8001066:	2041      	movs	r0, #65	; 0x41
 8001068:	f7ff fefb 	bl	8000e62 <SD_SendCmd>
 800106c:	4603      	mov	r3, r0
 800106e:	2b00      	cmp	r3, #0
 8001070:	d005      	beq.n	800107e <SD_disk_initialize+0x172>
				}

			} while (Timer1);
 8001072:	4b1a      	ldr	r3, [pc, #104]	; (80010dc <SD_disk_initialize+0x1d0>)
 8001074:	881b      	ldrh	r3, [r3, #0]
 8001076:	b29b      	uxth	r3, r3
 8001078:	2b00      	cmp	r3, #0
 800107a:	d1e1      	bne.n	8001040 <SD_disk_initialize+0x134>
 800107c:	e000      	b.n	8001080 <SD_disk_initialize+0x174>
					if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 800107e:	bf00      	nop

			/* SET_BLOCKLEN */
			if (!Timer1 || SD_SendCmd(CMD16, 512) != 0) type = 0;
 8001080:	4b16      	ldr	r3, [pc, #88]	; (80010dc <SD_disk_initialize+0x1d0>)
 8001082:	881b      	ldrh	r3, [r3, #0]
 8001084:	b29b      	uxth	r3, r3
 8001086:	2b00      	cmp	r3, #0
 8001088:	d007      	beq.n	800109a <SD_disk_initialize+0x18e>
 800108a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800108e:	2050      	movs	r0, #80	; 0x50
 8001090:	f7ff fee7 	bl	8000e62 <SD_SendCmd>
 8001094:	4603      	mov	r3, r0
 8001096:	2b00      	cmp	r3, #0
 8001098:	d001      	beq.n	800109e <SD_disk_initialize+0x192>
 800109a:	2300      	movs	r3, #0
 800109c:	73bb      	strb	r3, [r7, #14]
		}
	}

	CardType = type;
 800109e:	4a10      	ldr	r2, [pc, #64]	; (80010e0 <SD_disk_initialize+0x1d4>)
 80010a0:	7bbb      	ldrb	r3, [r7, #14]
 80010a2:	7013      	strb	r3, [r2, #0]

	/* Idle */
	DESELECT();
 80010a4:	f7ff fd8a 	bl	8000bbc <DESELECT>
	SPI_RxByte();
 80010a8:	f7ff fdca 	bl	8000c40 <SPI_RxByte>

	/* Clear STA_NOINIT */
	if (type)
 80010ac:	7bbb      	ldrb	r3, [r7, #14]
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	d008      	beq.n	80010c4 <SD_disk_initialize+0x1b8>
	{
		Stat &= ~STA_NOINIT;
 80010b2:	4b09      	ldr	r3, [pc, #36]	; (80010d8 <SD_disk_initialize+0x1cc>)
 80010b4:	781b      	ldrb	r3, [r3, #0]
 80010b6:	b2db      	uxtb	r3, r3
 80010b8:	f023 0301 	bic.w	r3, r3, #1
 80010bc:	b2da      	uxtb	r2, r3
 80010be:	4b06      	ldr	r3, [pc, #24]	; (80010d8 <SD_disk_initialize+0x1cc>)
 80010c0:	701a      	strb	r2, [r3, #0]
 80010c2:	e001      	b.n	80010c8 <SD_disk_initialize+0x1bc>
	}
	else
	{
		/* Initialization failed */
		SD_PowerOff();
 80010c4:	f7ff fe42 	bl	8000d4c <SD_PowerOff>
	}

	return Stat;
 80010c8:	4b03      	ldr	r3, [pc, #12]	; (80010d8 <SD_disk_initialize+0x1cc>)
 80010ca:	781b      	ldrb	r3, [r3, #0]
 80010cc:	b2db      	uxtb	r3, r3
}
 80010ce:	4618      	mov	r0, r3
 80010d0:	3714      	adds	r7, #20
 80010d2:	46bd      	mov	sp, r7
 80010d4:	bd90      	pop	{r4, r7, pc}
 80010d6:	bf00      	nop
 80010d8:	20000000 	.word	0x20000000
 80010dc:	20000641 	.word	0x20000641
 80010e0:	200000a4 	.word	0x200000a4

080010e4 <SD_disk_status>:

/* return disk status */
DSTATUS SD_disk_status(BYTE drv) 
{
 80010e4:	b480      	push	{r7}
 80010e6:	b083      	sub	sp, #12
 80010e8:	af00      	add	r7, sp, #0
 80010ea:	4603      	mov	r3, r0
 80010ec:	71fb      	strb	r3, [r7, #7]
	if (drv) return STA_NOINIT;
 80010ee:	79fb      	ldrb	r3, [r7, #7]
 80010f0:	2b00      	cmp	r3, #0
 80010f2:	d001      	beq.n	80010f8 <SD_disk_status+0x14>
 80010f4:	2301      	movs	r3, #1
 80010f6:	e002      	b.n	80010fe <SD_disk_status+0x1a>
	return Stat;
 80010f8:	4b04      	ldr	r3, [pc, #16]	; (800110c <SD_disk_status+0x28>)
 80010fa:	781b      	ldrb	r3, [r3, #0]
 80010fc:	b2db      	uxtb	r3, r3
}
 80010fe:	4618      	mov	r0, r3
 8001100:	370c      	adds	r7, #12
 8001102:	46bd      	mov	sp, r7
 8001104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001108:	4770      	bx	lr
 800110a:	bf00      	nop
 800110c:	20000000 	.word	0x20000000

08001110 <SD_disk_read>:

/* read sector */
DRESULT SD_disk_read(BYTE pdrv, BYTE* buff, DWORD sector, UINT count) 
{
 8001110:	b580      	push	{r7, lr}
 8001112:	b084      	sub	sp, #16
 8001114:	af00      	add	r7, sp, #0
 8001116:	60b9      	str	r1, [r7, #8]
 8001118:	607a      	str	r2, [r7, #4]
 800111a:	603b      	str	r3, [r7, #0]
 800111c:	4603      	mov	r3, r0
 800111e:	73fb      	strb	r3, [r7, #15]
	/* pdrv should be 0 */
	if (pdrv || !count) return RES_PARERR;
 8001120:	7bfb      	ldrb	r3, [r7, #15]
 8001122:	2b00      	cmp	r3, #0
 8001124:	d102      	bne.n	800112c <SD_disk_read+0x1c>
 8001126:	683b      	ldr	r3, [r7, #0]
 8001128:	2b00      	cmp	r3, #0
 800112a:	d101      	bne.n	8001130 <SD_disk_read+0x20>
 800112c:	2304      	movs	r3, #4
 800112e:	e051      	b.n	80011d4 <SD_disk_read+0xc4>

	/* no disk */
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 8001130:	4b2a      	ldr	r3, [pc, #168]	; (80011dc <SD_disk_read+0xcc>)
 8001132:	781b      	ldrb	r3, [r3, #0]
 8001134:	b2db      	uxtb	r3, r3
 8001136:	f003 0301 	and.w	r3, r3, #1
 800113a:	2b00      	cmp	r3, #0
 800113c:	d001      	beq.n	8001142 <SD_disk_read+0x32>
 800113e:	2303      	movs	r3, #3
 8001140:	e048      	b.n	80011d4 <SD_disk_read+0xc4>

	/* convert to byte address */
	if (!(CardType & CT_SD2)) sector *= 512;
 8001142:	4b27      	ldr	r3, [pc, #156]	; (80011e0 <SD_disk_read+0xd0>)
 8001144:	781b      	ldrb	r3, [r3, #0]
 8001146:	f003 0304 	and.w	r3, r3, #4
 800114a:	2b00      	cmp	r3, #0
 800114c:	d102      	bne.n	8001154 <SD_disk_read+0x44>
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	025b      	lsls	r3, r3, #9
 8001152:	607b      	str	r3, [r7, #4]

	SELECT();
 8001154:	f7ff fd24 	bl	8000ba0 <SELECT>

	if (count == 1)
 8001158:	683b      	ldr	r3, [r7, #0]
 800115a:	2b01      	cmp	r3, #1
 800115c:	d111      	bne.n	8001182 <SD_disk_read+0x72>
	{
		/* READ_SINGLE_BLOCK */
		if ((SD_SendCmd(CMD17, sector) == 0) && SD_RxDataBlock(buff, 512)) count = 0;
 800115e:	6879      	ldr	r1, [r7, #4]
 8001160:	2051      	movs	r0, #81	; 0x51
 8001162:	f7ff fe7e 	bl	8000e62 <SD_SendCmd>
 8001166:	4603      	mov	r3, r0
 8001168:	2b00      	cmp	r3, #0
 800116a:	d129      	bne.n	80011c0 <SD_disk_read+0xb0>
 800116c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001170:	68b8      	ldr	r0, [r7, #8]
 8001172:	f7ff fe03 	bl	8000d7c <SD_RxDataBlock>
 8001176:	4603      	mov	r3, r0
 8001178:	2b00      	cmp	r3, #0
 800117a:	d021      	beq.n	80011c0 <SD_disk_read+0xb0>
 800117c:	2300      	movs	r3, #0
 800117e:	603b      	str	r3, [r7, #0]
 8001180:	e01e      	b.n	80011c0 <SD_disk_read+0xb0>
	}
	else
	{
		/* READ_MULTIPLE_BLOCK */
		if (SD_SendCmd(CMD18, sector) == 0)
 8001182:	6879      	ldr	r1, [r7, #4]
 8001184:	2052      	movs	r0, #82	; 0x52
 8001186:	f7ff fe6c 	bl	8000e62 <SD_SendCmd>
 800118a:	4603      	mov	r3, r0
 800118c:	2b00      	cmp	r3, #0
 800118e:	d117      	bne.n	80011c0 <SD_disk_read+0xb0>
		{
			do {
				if (!SD_RxDataBlock(buff, 512)) break;
 8001190:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001194:	68b8      	ldr	r0, [r7, #8]
 8001196:	f7ff fdf1 	bl	8000d7c <SD_RxDataBlock>
 800119a:	4603      	mov	r3, r0
 800119c:	2b00      	cmp	r3, #0
 800119e:	d00a      	beq.n	80011b6 <SD_disk_read+0xa6>
				buff += 512;
 80011a0:	68bb      	ldr	r3, [r7, #8]
 80011a2:	f503 7300 	add.w	r3, r3, #512	; 0x200
 80011a6:	60bb      	str	r3, [r7, #8]
			} while (--count);
 80011a8:	683b      	ldr	r3, [r7, #0]
 80011aa:	3b01      	subs	r3, #1
 80011ac:	603b      	str	r3, [r7, #0]
 80011ae:	683b      	ldr	r3, [r7, #0]
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	d1ed      	bne.n	8001190 <SD_disk_read+0x80>
 80011b4:	e000      	b.n	80011b8 <SD_disk_read+0xa8>
				if (!SD_RxDataBlock(buff, 512)) break;
 80011b6:	bf00      	nop

			/* STOP_TRANSMISSION */
			SD_SendCmd(CMD12, 0);
 80011b8:	2100      	movs	r1, #0
 80011ba:	204c      	movs	r0, #76	; 0x4c
 80011bc:	f7ff fe51 	bl	8000e62 <SD_SendCmd>
		}
	}

	/* Idle */
	DESELECT();
 80011c0:	f7ff fcfc 	bl	8000bbc <DESELECT>
	SPI_RxByte();
 80011c4:	f7ff fd3c 	bl	8000c40 <SPI_RxByte>

	return count ? RES_ERROR : RES_OK;
 80011c8:	683b      	ldr	r3, [r7, #0]
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	bf14      	ite	ne
 80011ce:	2301      	movne	r3, #1
 80011d0:	2300      	moveq	r3, #0
 80011d2:	b2db      	uxtb	r3, r3
}
 80011d4:	4618      	mov	r0, r3
 80011d6:	3710      	adds	r7, #16
 80011d8:	46bd      	mov	sp, r7
 80011da:	bd80      	pop	{r7, pc}
 80011dc:	20000000 	.word	0x20000000
 80011e0:	200000a4 	.word	0x200000a4

080011e4 <SD_disk_write>:

/* write sector */
#if _USE_WRITE == 1
DRESULT SD_disk_write(BYTE pdrv, const BYTE* buff, DWORD sector, UINT count) 
{
 80011e4:	b580      	push	{r7, lr}
 80011e6:	b084      	sub	sp, #16
 80011e8:	af00      	add	r7, sp, #0
 80011ea:	60b9      	str	r1, [r7, #8]
 80011ec:	607a      	str	r2, [r7, #4]
 80011ee:	603b      	str	r3, [r7, #0]
 80011f0:	4603      	mov	r3, r0
 80011f2:	73fb      	strb	r3, [r7, #15]
	/* pdrv should be 0 */
	if (pdrv || !count) return RES_PARERR;
 80011f4:	7bfb      	ldrb	r3, [r7, #15]
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d102      	bne.n	8001200 <SD_disk_write+0x1c>
 80011fa:	683b      	ldr	r3, [r7, #0]
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	d101      	bne.n	8001204 <SD_disk_write+0x20>
 8001200:	2304      	movs	r3, #4
 8001202:	e06b      	b.n	80012dc <SD_disk_write+0xf8>

	/* no disk */
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 8001204:	4b37      	ldr	r3, [pc, #220]	; (80012e4 <SD_disk_write+0x100>)
 8001206:	781b      	ldrb	r3, [r3, #0]
 8001208:	b2db      	uxtb	r3, r3
 800120a:	f003 0301 	and.w	r3, r3, #1
 800120e:	2b00      	cmp	r3, #0
 8001210:	d001      	beq.n	8001216 <SD_disk_write+0x32>
 8001212:	2303      	movs	r3, #3
 8001214:	e062      	b.n	80012dc <SD_disk_write+0xf8>

	/* write protection */
	if (Stat & STA_PROTECT) return RES_WRPRT;
 8001216:	4b33      	ldr	r3, [pc, #204]	; (80012e4 <SD_disk_write+0x100>)
 8001218:	781b      	ldrb	r3, [r3, #0]
 800121a:	b2db      	uxtb	r3, r3
 800121c:	f003 0304 	and.w	r3, r3, #4
 8001220:	2b00      	cmp	r3, #0
 8001222:	d001      	beq.n	8001228 <SD_disk_write+0x44>
 8001224:	2302      	movs	r3, #2
 8001226:	e059      	b.n	80012dc <SD_disk_write+0xf8>

	/* convert to byte address */
	if (!(CardType & CT_SD2)) sector *= 512;
 8001228:	4b2f      	ldr	r3, [pc, #188]	; (80012e8 <SD_disk_write+0x104>)
 800122a:	781b      	ldrb	r3, [r3, #0]
 800122c:	f003 0304 	and.w	r3, r3, #4
 8001230:	2b00      	cmp	r3, #0
 8001232:	d102      	bne.n	800123a <SD_disk_write+0x56>
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	025b      	lsls	r3, r3, #9
 8001238:	607b      	str	r3, [r7, #4]

	SELECT();
 800123a:	f7ff fcb1 	bl	8000ba0 <SELECT>

	if (count == 1)
 800123e:	683b      	ldr	r3, [r7, #0]
 8001240:	2b01      	cmp	r3, #1
 8001242:	d110      	bne.n	8001266 <SD_disk_write+0x82>
	{
		/* WRITE_BLOCK */
		if ((SD_SendCmd(CMD24, sector) == 0) && SD_TxDataBlock(buff, 0xFE))
 8001244:	6879      	ldr	r1, [r7, #4]
 8001246:	2058      	movs	r0, #88	; 0x58
 8001248:	f7ff fe0b 	bl	8000e62 <SD_SendCmd>
 800124c:	4603      	mov	r3, r0
 800124e:	2b00      	cmp	r3, #0
 8001250:	d13a      	bne.n	80012c8 <SD_disk_write+0xe4>
 8001252:	21fe      	movs	r1, #254	; 0xfe
 8001254:	68b8      	ldr	r0, [r7, #8]
 8001256:	f7ff fdc1 	bl	8000ddc <SD_TxDataBlock>
 800125a:	4603      	mov	r3, r0
 800125c:	2b00      	cmp	r3, #0
 800125e:	d033      	beq.n	80012c8 <SD_disk_write+0xe4>
			count = 0;
 8001260:	2300      	movs	r3, #0
 8001262:	603b      	str	r3, [r7, #0]
 8001264:	e030      	b.n	80012c8 <SD_disk_write+0xe4>
	}
	else
	{
		/* WRITE_MULTIPLE_BLOCK */
		if (CardType & CT_SD1)
 8001266:	4b20      	ldr	r3, [pc, #128]	; (80012e8 <SD_disk_write+0x104>)
 8001268:	781b      	ldrb	r3, [r3, #0]
 800126a:	f003 0302 	and.w	r3, r3, #2
 800126e:	2b00      	cmp	r3, #0
 8001270:	d007      	beq.n	8001282 <SD_disk_write+0x9e>
		{
			SD_SendCmd(CMD55, 0);
 8001272:	2100      	movs	r1, #0
 8001274:	2077      	movs	r0, #119	; 0x77
 8001276:	f7ff fdf4 	bl	8000e62 <SD_SendCmd>
			SD_SendCmd(CMD23, count); /* ACMD23 */
 800127a:	6839      	ldr	r1, [r7, #0]
 800127c:	2057      	movs	r0, #87	; 0x57
 800127e:	f7ff fdf0 	bl	8000e62 <SD_SendCmd>
		}

		if (SD_SendCmd(CMD25, sector) == 0)
 8001282:	6879      	ldr	r1, [r7, #4]
 8001284:	2059      	movs	r0, #89	; 0x59
 8001286:	f7ff fdec 	bl	8000e62 <SD_SendCmd>
 800128a:	4603      	mov	r3, r0
 800128c:	2b00      	cmp	r3, #0
 800128e:	d11b      	bne.n	80012c8 <SD_disk_write+0xe4>
		{
			do {
				if(!SD_TxDataBlock(buff, 0xFC)) break;
 8001290:	21fc      	movs	r1, #252	; 0xfc
 8001292:	68b8      	ldr	r0, [r7, #8]
 8001294:	f7ff fda2 	bl	8000ddc <SD_TxDataBlock>
 8001298:	4603      	mov	r3, r0
 800129a:	2b00      	cmp	r3, #0
 800129c:	d00a      	beq.n	80012b4 <SD_disk_write+0xd0>
				buff += 512;
 800129e:	68bb      	ldr	r3, [r7, #8]
 80012a0:	f503 7300 	add.w	r3, r3, #512	; 0x200
 80012a4:	60bb      	str	r3, [r7, #8]
			} while (--count);
 80012a6:	683b      	ldr	r3, [r7, #0]
 80012a8:	3b01      	subs	r3, #1
 80012aa:	603b      	str	r3, [r7, #0]
 80012ac:	683b      	ldr	r3, [r7, #0]
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d1ee      	bne.n	8001290 <SD_disk_write+0xac>
 80012b2:	e000      	b.n	80012b6 <SD_disk_write+0xd2>
				if(!SD_TxDataBlock(buff, 0xFC)) break;
 80012b4:	bf00      	nop

			/* STOP_TRAN token */
			if(!SD_TxDataBlock(0, 0xFD))
 80012b6:	21fd      	movs	r1, #253	; 0xfd
 80012b8:	2000      	movs	r0, #0
 80012ba:	f7ff fd8f 	bl	8000ddc <SD_TxDataBlock>
 80012be:	4603      	mov	r3, r0
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d101      	bne.n	80012c8 <SD_disk_write+0xe4>
			{
				count = 1;
 80012c4:	2301      	movs	r3, #1
 80012c6:	603b      	str	r3, [r7, #0]
			}
		}
	}

	/* Idle */
	DESELECT();
 80012c8:	f7ff fc78 	bl	8000bbc <DESELECT>
	SPI_RxByte();
 80012cc:	f7ff fcb8 	bl	8000c40 <SPI_RxByte>

	return count ? RES_ERROR : RES_OK;
 80012d0:	683b      	ldr	r3, [r7, #0]
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	bf14      	ite	ne
 80012d6:	2301      	movne	r3, #1
 80012d8:	2300      	moveq	r3, #0
 80012da:	b2db      	uxtb	r3, r3
}
 80012dc:	4618      	mov	r0, r3
 80012de:	3710      	adds	r7, #16
 80012e0:	46bd      	mov	sp, r7
 80012e2:	bd80      	pop	{r7, pc}
 80012e4:	20000000 	.word	0x20000000
 80012e8:	200000a4 	.word	0x200000a4

080012ec <SD_disk_ioctl>:
#endif /* _USE_WRITE */

/* ioctl */
DRESULT SD_disk_ioctl(BYTE drv, BYTE ctrl, void *buff) 
{
 80012ec:	b590      	push	{r4, r7, lr}
 80012ee:	b08b      	sub	sp, #44	; 0x2c
 80012f0:	af00      	add	r7, sp, #0
 80012f2:	4603      	mov	r3, r0
 80012f4:	603a      	str	r2, [r7, #0]
 80012f6:	71fb      	strb	r3, [r7, #7]
 80012f8:	460b      	mov	r3, r1
 80012fa:	71bb      	strb	r3, [r7, #6]
	DRESULT res;
	uint8_t n, csd[16], *ptr = buff;
 80012fc:	683b      	ldr	r3, [r7, #0]
 80012fe:	623b      	str	r3, [r7, #32]
	WORD csize;

	/* pdrv should be 0 */
	if (drv) return RES_PARERR;
 8001300:	79fb      	ldrb	r3, [r7, #7]
 8001302:	2b00      	cmp	r3, #0
 8001304:	d001      	beq.n	800130a <SD_disk_ioctl+0x1e>
 8001306:	2304      	movs	r3, #4
 8001308:	e115      	b.n	8001536 <SD_disk_ioctl+0x24a>
	res = RES_ERROR;
 800130a:	2301      	movs	r3, #1
 800130c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if (ctrl == CTRL_POWER)
 8001310:	79bb      	ldrb	r3, [r7, #6]
 8001312:	2b05      	cmp	r3, #5
 8001314:	d124      	bne.n	8001360 <SD_disk_ioctl+0x74>
	{
		switch (*ptr)
 8001316:	6a3b      	ldr	r3, [r7, #32]
 8001318:	781b      	ldrb	r3, [r3, #0]
 800131a:	2b02      	cmp	r3, #2
 800131c:	d012      	beq.n	8001344 <SD_disk_ioctl+0x58>
 800131e:	2b02      	cmp	r3, #2
 8001320:	dc1a      	bgt.n	8001358 <SD_disk_ioctl+0x6c>
 8001322:	2b00      	cmp	r3, #0
 8001324:	d002      	beq.n	800132c <SD_disk_ioctl+0x40>
 8001326:	2b01      	cmp	r3, #1
 8001328:	d006      	beq.n	8001338 <SD_disk_ioctl+0x4c>
 800132a:	e015      	b.n	8001358 <SD_disk_ioctl+0x6c>
		{
		case 0:
			SD_PowerOff();		/* Power Off */
 800132c:	f7ff fd0e 	bl	8000d4c <SD_PowerOff>
			res = RES_OK;
 8001330:	2300      	movs	r3, #0
 8001332:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8001336:	e0fc      	b.n	8001532 <SD_disk_ioctl+0x246>
		case 1:
			SD_PowerOn();		/* Power On */
 8001338:	f7ff fcc6 	bl	8000cc8 <SD_PowerOn>
			res = RES_OK;
 800133c:	2300      	movs	r3, #0
 800133e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8001342:	e0f6      	b.n	8001532 <SD_disk_ioctl+0x246>
		case 2:
			*(ptr + 1) = SD_CheckPower();
 8001344:	6a3b      	ldr	r3, [r7, #32]
 8001346:	1c5c      	adds	r4, r3, #1
 8001348:	f7ff fd0c 	bl	8000d64 <SD_CheckPower>
 800134c:	4603      	mov	r3, r0
 800134e:	7023      	strb	r3, [r4, #0]
			res = RES_OK;		/* Power Check */
 8001350:	2300      	movs	r3, #0
 8001352:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8001356:	e0ec      	b.n	8001532 <SD_disk_ioctl+0x246>
		default:
			res = RES_PARERR;
 8001358:	2304      	movs	r3, #4
 800135a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800135e:	e0e8      	b.n	8001532 <SD_disk_ioctl+0x246>
		}
	}
	else
	{
		/* no disk */
		if (Stat & STA_NOINIT) return RES_NOTRDY;
 8001360:	4b77      	ldr	r3, [pc, #476]	; (8001540 <SD_disk_ioctl+0x254>)
 8001362:	781b      	ldrb	r3, [r3, #0]
 8001364:	b2db      	uxtb	r3, r3
 8001366:	f003 0301 	and.w	r3, r3, #1
 800136a:	2b00      	cmp	r3, #0
 800136c:	d001      	beq.n	8001372 <SD_disk_ioctl+0x86>
 800136e:	2303      	movs	r3, #3
 8001370:	e0e1      	b.n	8001536 <SD_disk_ioctl+0x24a>

		SELECT();
 8001372:	f7ff fc15 	bl	8000ba0 <SELECT>

		switch (ctrl)
 8001376:	79bb      	ldrb	r3, [r7, #6]
 8001378:	2b0d      	cmp	r3, #13
 800137a:	f200 80cb 	bhi.w	8001514 <SD_disk_ioctl+0x228>
 800137e:	a201      	add	r2, pc, #4	; (adr r2, 8001384 <SD_disk_ioctl+0x98>)
 8001380:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001384:	0800147f 	.word	0x0800147f
 8001388:	080013bd 	.word	0x080013bd
 800138c:	0800146f 	.word	0x0800146f
 8001390:	08001515 	.word	0x08001515
 8001394:	08001515 	.word	0x08001515
 8001398:	08001515 	.word	0x08001515
 800139c:	08001515 	.word	0x08001515
 80013a0:	08001515 	.word	0x08001515
 80013a4:	08001515 	.word	0x08001515
 80013a8:	08001515 	.word	0x08001515
 80013ac:	08001515 	.word	0x08001515
 80013b0:	08001491 	.word	0x08001491
 80013b4:	080014b5 	.word	0x080014b5
 80013b8:	080014d9 	.word	0x080014d9
		{
		case GET_SECTOR_COUNT:
			/* SEND_CSD */
			if ((SD_SendCmd(CMD9, 0) == 0) && SD_RxDataBlock(csd, 16))
 80013bc:	2100      	movs	r1, #0
 80013be:	2049      	movs	r0, #73	; 0x49
 80013c0:	f7ff fd4f 	bl	8000e62 <SD_SendCmd>
 80013c4:	4603      	mov	r3, r0
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	f040 80a8 	bne.w	800151c <SD_disk_ioctl+0x230>
 80013cc:	f107 030c 	add.w	r3, r7, #12
 80013d0:	2110      	movs	r1, #16
 80013d2:	4618      	mov	r0, r3
 80013d4:	f7ff fcd2 	bl	8000d7c <SD_RxDataBlock>
 80013d8:	4603      	mov	r3, r0
 80013da:	2b00      	cmp	r3, #0
 80013dc:	f000 809e 	beq.w	800151c <SD_disk_ioctl+0x230>
			{
				if ((csd[0] >> 6) == 1)
 80013e0:	7b3b      	ldrb	r3, [r7, #12]
 80013e2:	099b      	lsrs	r3, r3, #6
 80013e4:	b2db      	uxtb	r3, r3
 80013e6:	2b01      	cmp	r3, #1
 80013e8:	d10e      	bne.n	8001408 <SD_disk_ioctl+0x11c>
				{
					/* SDC V2 */
					csize = csd[9] + ((WORD) csd[8] << 8) + 1;
 80013ea:	7d7b      	ldrb	r3, [r7, #21]
 80013ec:	b29a      	uxth	r2, r3
 80013ee:	7d3b      	ldrb	r3, [r7, #20]
 80013f0:	b29b      	uxth	r3, r3
 80013f2:	021b      	lsls	r3, r3, #8
 80013f4:	b29b      	uxth	r3, r3
 80013f6:	4413      	add	r3, r2
 80013f8:	b29b      	uxth	r3, r3
 80013fa:	3301      	adds	r3, #1
 80013fc:	83fb      	strh	r3, [r7, #30]
					*(DWORD*) buff = (DWORD) csize << 10;
 80013fe:	8bfb      	ldrh	r3, [r7, #30]
 8001400:	029a      	lsls	r2, r3, #10
 8001402:	683b      	ldr	r3, [r7, #0]
 8001404:	601a      	str	r2, [r3, #0]
 8001406:	e02e      	b.n	8001466 <SD_disk_ioctl+0x17a>
				}
				else
				{
					/* MMC or SDC V1 */
					n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 8001408:	7c7b      	ldrb	r3, [r7, #17]
 800140a:	f003 030f 	and.w	r3, r3, #15
 800140e:	b2da      	uxtb	r2, r3
 8001410:	7dbb      	ldrb	r3, [r7, #22]
 8001412:	09db      	lsrs	r3, r3, #7
 8001414:	b2db      	uxtb	r3, r3
 8001416:	4413      	add	r3, r2
 8001418:	b2da      	uxtb	r2, r3
 800141a:	7d7b      	ldrb	r3, [r7, #21]
 800141c:	005b      	lsls	r3, r3, #1
 800141e:	b2db      	uxtb	r3, r3
 8001420:	f003 0306 	and.w	r3, r3, #6
 8001424:	b2db      	uxtb	r3, r3
 8001426:	4413      	add	r3, r2
 8001428:	b2db      	uxtb	r3, r3
 800142a:	3302      	adds	r3, #2
 800142c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
					csize = (csd[8] >> 6) + ((WORD) csd[7] << 2) + ((WORD) (csd[6] & 3) << 10) + 1;
 8001430:	7d3b      	ldrb	r3, [r7, #20]
 8001432:	099b      	lsrs	r3, r3, #6
 8001434:	b2db      	uxtb	r3, r3
 8001436:	b29a      	uxth	r2, r3
 8001438:	7cfb      	ldrb	r3, [r7, #19]
 800143a:	b29b      	uxth	r3, r3
 800143c:	009b      	lsls	r3, r3, #2
 800143e:	b29b      	uxth	r3, r3
 8001440:	4413      	add	r3, r2
 8001442:	b29a      	uxth	r2, r3
 8001444:	7cbb      	ldrb	r3, [r7, #18]
 8001446:	029b      	lsls	r3, r3, #10
 8001448:	b29b      	uxth	r3, r3
 800144a:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800144e:	b29b      	uxth	r3, r3
 8001450:	4413      	add	r3, r2
 8001452:	b29b      	uxth	r3, r3
 8001454:	3301      	adds	r3, #1
 8001456:	83fb      	strh	r3, [r7, #30]
					*(DWORD*) buff = (DWORD) csize << (n - 9);
 8001458:	8bfa      	ldrh	r2, [r7, #30]
 800145a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800145e:	3b09      	subs	r3, #9
 8001460:	409a      	lsls	r2, r3
 8001462:	683b      	ldr	r3, [r7, #0]
 8001464:	601a      	str	r2, [r3, #0]
				}
				res = RES_OK;
 8001466:	2300      	movs	r3, #0
 8001468:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			}
			break;
 800146c:	e056      	b.n	800151c <SD_disk_ioctl+0x230>
		case GET_SECTOR_SIZE:
			*(WORD*) buff = 512;
 800146e:	683b      	ldr	r3, [r7, #0]
 8001470:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001474:	801a      	strh	r2, [r3, #0]
			res = RES_OK;
 8001476:	2300      	movs	r3, #0
 8001478:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 800147c:	e055      	b.n	800152a <SD_disk_ioctl+0x23e>
		case CTRL_SYNC:
			if (SD_ReadyWait() == 0xFF) res = RES_OK;
 800147e:	f7ff fc09 	bl	8000c94 <SD_ReadyWait>
 8001482:	4603      	mov	r3, r0
 8001484:	2bff      	cmp	r3, #255	; 0xff
 8001486:	d14b      	bne.n	8001520 <SD_disk_ioctl+0x234>
 8001488:	2300      	movs	r3, #0
 800148a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 800148e:	e047      	b.n	8001520 <SD_disk_ioctl+0x234>
		case MMC_GET_CSD:
			/* SEND_CSD */
			if (SD_SendCmd(CMD9, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 8001490:	2100      	movs	r1, #0
 8001492:	2049      	movs	r0, #73	; 0x49
 8001494:	f7ff fce5 	bl	8000e62 <SD_SendCmd>
 8001498:	4603      	mov	r3, r0
 800149a:	2b00      	cmp	r3, #0
 800149c:	d142      	bne.n	8001524 <SD_disk_ioctl+0x238>
 800149e:	2110      	movs	r1, #16
 80014a0:	6a38      	ldr	r0, [r7, #32]
 80014a2:	f7ff fc6b 	bl	8000d7c <SD_RxDataBlock>
 80014a6:	4603      	mov	r3, r0
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	d03b      	beq.n	8001524 <SD_disk_ioctl+0x238>
 80014ac:	2300      	movs	r3, #0
 80014ae:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 80014b2:	e037      	b.n	8001524 <SD_disk_ioctl+0x238>
		case MMC_GET_CID:
			/* SEND_CID */
			if (SD_SendCmd(CMD10, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 80014b4:	2100      	movs	r1, #0
 80014b6:	204a      	movs	r0, #74	; 0x4a
 80014b8:	f7ff fcd3 	bl	8000e62 <SD_SendCmd>
 80014bc:	4603      	mov	r3, r0
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d132      	bne.n	8001528 <SD_disk_ioctl+0x23c>
 80014c2:	2110      	movs	r1, #16
 80014c4:	6a38      	ldr	r0, [r7, #32]
 80014c6:	f7ff fc59 	bl	8000d7c <SD_RxDataBlock>
 80014ca:	4603      	mov	r3, r0
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d02b      	beq.n	8001528 <SD_disk_ioctl+0x23c>
 80014d0:	2300      	movs	r3, #0
 80014d2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 80014d6:	e027      	b.n	8001528 <SD_disk_ioctl+0x23c>
		case MMC_GET_OCR:
			/* READ_OCR */
			if (SD_SendCmd(CMD58, 0) == 0)
 80014d8:	2100      	movs	r1, #0
 80014da:	207a      	movs	r0, #122	; 0x7a
 80014dc:	f7ff fcc1 	bl	8000e62 <SD_SendCmd>
 80014e0:	4603      	mov	r3, r0
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d116      	bne.n	8001514 <SD_disk_ioctl+0x228>
			{
				for (n = 0; n < 4; n++)
 80014e6:	2300      	movs	r3, #0
 80014e8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80014ec:	e00b      	b.n	8001506 <SD_disk_ioctl+0x21a>
				{
					*ptr++ = SPI_RxByte();
 80014ee:	6a3c      	ldr	r4, [r7, #32]
 80014f0:	1c63      	adds	r3, r4, #1
 80014f2:	623b      	str	r3, [r7, #32]
 80014f4:	f7ff fba4 	bl	8000c40 <SPI_RxByte>
 80014f8:	4603      	mov	r3, r0
 80014fa:	7023      	strb	r3, [r4, #0]
				for (n = 0; n < 4; n++)
 80014fc:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001500:	3301      	adds	r3, #1
 8001502:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8001506:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800150a:	2b03      	cmp	r3, #3
 800150c:	d9ef      	bls.n	80014ee <SD_disk_ioctl+0x202>
				}
				res = RES_OK;
 800150e:	2300      	movs	r3, #0
 8001510:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			}
		default:
			res = RES_PARERR;
 8001514:	2304      	movs	r3, #4
 8001516:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800151a:	e006      	b.n	800152a <SD_disk_ioctl+0x23e>
			break;
 800151c:	bf00      	nop
 800151e:	e004      	b.n	800152a <SD_disk_ioctl+0x23e>
			break;
 8001520:	bf00      	nop
 8001522:	e002      	b.n	800152a <SD_disk_ioctl+0x23e>
			break;
 8001524:	bf00      	nop
 8001526:	e000      	b.n	800152a <SD_disk_ioctl+0x23e>
			break;
 8001528:	bf00      	nop
		}

		DESELECT();
 800152a:	f7ff fb47 	bl	8000bbc <DESELECT>
		SPI_RxByte();
 800152e:	f7ff fb87 	bl	8000c40 <SPI_RxByte>
	}

	return res;
 8001532:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8001536:	4618      	mov	r0, r3
 8001538:	372c      	adds	r7, #44	; 0x2c
 800153a:	46bd      	mov	sp, r7
 800153c:	bd90      	pop	{r4, r7, pc}
 800153e:	bf00      	nop
 8001540:	20000000 	.word	0x20000000

08001544 <bufsize>:
char buffer[BUFFER_SIZE];  // to store strings..

int i=0;

int bufsize (char *buf)
{
 8001544:	b480      	push	{r7}
 8001546:	b085      	sub	sp, #20
 8001548:	af00      	add	r7, sp, #0
 800154a:	6078      	str	r0, [r7, #4]
	int i=0;
 800154c:	2300      	movs	r3, #0
 800154e:	60fb      	str	r3, [r7, #12]
	while (*buf++ != '\0') i++;
 8001550:	e002      	b.n	8001558 <bufsize+0x14>
 8001552:	68fb      	ldr	r3, [r7, #12]
 8001554:	3301      	adds	r3, #1
 8001556:	60fb      	str	r3, [r7, #12]
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	1c5a      	adds	r2, r3, #1
 800155c:	607a      	str	r2, [r7, #4]
 800155e:	781b      	ldrb	r3, [r3, #0]
 8001560:	2b00      	cmp	r3, #0
 8001562:	d1f6      	bne.n	8001552 <bufsize+0xe>
	return i;
 8001564:	68fb      	ldr	r3, [r7, #12]
}
 8001566:	4618      	mov	r0, r3
 8001568:	3714      	adds	r7, #20
 800156a:	46bd      	mov	sp, r7
 800156c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001570:	4770      	bx	lr
	...

08001574 <clear_buffer>:

void clear_buffer (void)
{
 8001574:	b480      	push	{r7}
 8001576:	b083      	sub	sp, #12
 8001578:	af00      	add	r7, sp, #0
	for (int i=0; i<BUFFER_SIZE; i++) buffer[i] = '\0';
 800157a:	2300      	movs	r3, #0
 800157c:	607b      	str	r3, [r7, #4]
 800157e:	e007      	b.n	8001590 <clear_buffer+0x1c>
 8001580:	4a08      	ldr	r2, [pc, #32]	; (80015a4 <clear_buffer+0x30>)
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	4413      	add	r3, r2
 8001586:	2200      	movs	r2, #0
 8001588:	701a      	strb	r2, [r3, #0]
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	3301      	adds	r3, #1
 800158e:	607b      	str	r3, [r7, #4]
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	2b7f      	cmp	r3, #127	; 0x7f
 8001594:	ddf4      	ble.n	8001580 <clear_buffer+0xc>
}
 8001596:	bf00      	nop
 8001598:	bf00      	nop
 800159a:	370c      	adds	r7, #12
 800159c:	46bd      	mov	sp, r7
 800159e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a2:	4770      	bx	lr
 80015a4:	200005c0 	.word	0x200005c0

080015a8 <send_uart>:

void send_uart (char *string)
{
 80015a8:	b580      	push	{r7, lr}
 80015aa:	b084      	sub	sp, #16
 80015ac:	af00      	add	r7, sp, #0
 80015ae:	6078      	str	r0, [r7, #4]
	uint8_t len = strlen (string);
 80015b0:	6878      	ldr	r0, [r7, #4]
 80015b2:	f7fe fe15 	bl	80001e0 <strlen>
 80015b6:	4603      	mov	r3, r0
 80015b8:	73fb      	strb	r3, [r7, #15]
	HAL_UART_Transmit(&huart2, (uint8_t *) string, len, HAL_MAX_DELAY);  // transmit in blocking mode
 80015ba:	7bfb      	ldrb	r3, [r7, #15]
 80015bc:	b29a      	uxth	r2, r3
 80015be:	f04f 33ff 	mov.w	r3, #4294967295
 80015c2:	6879      	ldr	r1, [r7, #4]
 80015c4:	4803      	ldr	r0, [pc, #12]	; (80015d4 <send_uart+0x2c>)
 80015c6:	f002 f8da 	bl	800377e <HAL_UART_Transmit>
}
 80015ca:	bf00      	nop
 80015cc:	3710      	adds	r7, #16
 80015ce:	46bd      	mov	sp, r7
 80015d0:	bd80      	pop	{r7, pc}
 80015d2:	bf00      	nop
 80015d4:	20000100 	.word	0x20000100

080015d8 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 80015d8:	b580      	push	{r7, lr}
 80015da:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80015dc:	f000 fc9e 	bl	8001f1c <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80015e0:	f000 f9b0 	bl	8001944 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80015e4:	f000 fa7a 	bl	8001adc <MX_GPIO_Init>
	MX_SPI1_Init();
 80015e8:	f000 fa18 	bl	8001a1c <MX_SPI1_Init>
	MX_USART2_UART_Init();
 80015ec:	f000 fa4c 	bl	8001a88 <MX_USART2_UART_Init>
	MX_FATFS_Init();
 80015f0:	f002 fc3a 	bl	8003e68 <MX_FATFS_Init>
	/* USER CODE BEGIN 2 */

	HAL_Delay (500);
 80015f4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80015f8:	f000 fd02 	bl	8002000 <HAL_Delay>

	fresult = f_mount(&fs, "/", 1);
 80015fc:	2201      	movs	r2, #1
 80015fe:	49af      	ldr	r1, [pc, #700]	; (80018bc <main+0x2e4>)
 8001600:	48af      	ldr	r0, [pc, #700]	; (80018c0 <main+0x2e8>)
 8001602:	f004 fa59 	bl	8005ab8 <f_mount>
 8001606:	4603      	mov	r3, r0
 8001608:	461a      	mov	r2, r3
 800160a:	4bae      	ldr	r3, [pc, #696]	; (80018c4 <main+0x2ec>)
 800160c:	701a      	strb	r2, [r3, #0]
	if (fresult != FR_OK) send_uart ("ERROR!!! in mounting SD CARD...\n\n");
 800160e:	4bad      	ldr	r3, [pc, #692]	; (80018c4 <main+0x2ec>)
 8001610:	781b      	ldrb	r3, [r3, #0]
 8001612:	2b00      	cmp	r3, #0
 8001614:	d003      	beq.n	800161e <main+0x46>
 8001616:	48ac      	ldr	r0, [pc, #688]	; (80018c8 <main+0x2f0>)
 8001618:	f7ff ffc6 	bl	80015a8 <send_uart>
 800161c:	e002      	b.n	8001624 <main+0x4c>
	else send_uart("SD CARD mounted successfully...\n\n");
 800161e:	48ab      	ldr	r0, [pc, #684]	; (80018cc <main+0x2f4>)
 8001620:	f7ff ffc2 	bl	80015a8 <send_uart>


	/*************** Card capacity details ********************/

	/* Check free space */
	f_getfree("", &fre_clust, &pfs);
 8001624:	4aaa      	ldr	r2, [pc, #680]	; (80018d0 <main+0x2f8>)
 8001626:	49ab      	ldr	r1, [pc, #684]	; (80018d4 <main+0x2fc>)
 8001628:	48ab      	ldr	r0, [pc, #684]	; (80018d8 <main+0x300>)
 800162a:	f005 f9ae 	bl	800698a <f_getfree>

	total = (uint32_t)((pfs->n_fatent - 2) * pfs->csize * 0.5);
 800162e:	4ba8      	ldr	r3, [pc, #672]	; (80018d0 <main+0x2f8>)
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	695b      	ldr	r3, [r3, #20]
 8001634:	3b02      	subs	r3, #2
 8001636:	4aa6      	ldr	r2, [pc, #664]	; (80018d0 <main+0x2f8>)
 8001638:	6812      	ldr	r2, [r2, #0]
 800163a:	8952      	ldrh	r2, [r2, #10]
 800163c:	fb02 f303 	mul.w	r3, r2, r3
 8001640:	4618      	mov	r0, r3
 8001642:	f7ff f891 	bl	8000768 <__aeabi_ui2d>
 8001646:	f04f 0200 	mov.w	r2, #0
 800164a:	4ba4      	ldr	r3, [pc, #656]	; (80018dc <main+0x304>)
 800164c:	f7fe fe20 	bl	8000290 <__aeabi_dmul>
 8001650:	4602      	mov	r2, r0
 8001652:	460b      	mov	r3, r1
 8001654:	4610      	mov	r0, r2
 8001656:	4619      	mov	r1, r3
 8001658:	f7ff f900 	bl	800085c <__aeabi_d2uiz>
 800165c:	4603      	mov	r3, r0
 800165e:	4aa0      	ldr	r2, [pc, #640]	; (80018e0 <main+0x308>)
 8001660:	6013      	str	r3, [r2, #0]
	sprintf (buffer, "SD CARD Total Size: \t%lu\n",total);
 8001662:	4b9f      	ldr	r3, [pc, #636]	; (80018e0 <main+0x308>)
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	461a      	mov	r2, r3
 8001668:	499e      	ldr	r1, [pc, #632]	; (80018e4 <main+0x30c>)
 800166a:	489f      	ldr	r0, [pc, #636]	; (80018e8 <main+0x310>)
 800166c:	f005 fc62 	bl	8006f34 <siprintf>
	send_uart(buffer);
 8001670:	489d      	ldr	r0, [pc, #628]	; (80018e8 <main+0x310>)
 8001672:	f7ff ff99 	bl	80015a8 <send_uart>
	clear_buffer();
 8001676:	f7ff ff7d 	bl	8001574 <clear_buffer>
	free_space = (uint32_t)(fre_clust * pfs->csize * 0.5);
 800167a:	4b95      	ldr	r3, [pc, #596]	; (80018d0 <main+0x2f8>)
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	895b      	ldrh	r3, [r3, #10]
 8001680:	461a      	mov	r2, r3
 8001682:	4b94      	ldr	r3, [pc, #592]	; (80018d4 <main+0x2fc>)
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	fb02 f303 	mul.w	r3, r2, r3
 800168a:	4618      	mov	r0, r3
 800168c:	f7ff f86c 	bl	8000768 <__aeabi_ui2d>
 8001690:	f04f 0200 	mov.w	r2, #0
 8001694:	4b91      	ldr	r3, [pc, #580]	; (80018dc <main+0x304>)
 8001696:	f7fe fdfb 	bl	8000290 <__aeabi_dmul>
 800169a:	4602      	mov	r2, r0
 800169c:	460b      	mov	r3, r1
 800169e:	4610      	mov	r0, r2
 80016a0:	4619      	mov	r1, r3
 80016a2:	f7ff f8db 	bl	800085c <__aeabi_d2uiz>
 80016a6:	4603      	mov	r3, r0
 80016a8:	4a90      	ldr	r2, [pc, #576]	; (80018ec <main+0x314>)
 80016aa:	6013      	str	r3, [r2, #0]
	sprintf (buffer, "SD CARD Free Space: \t%lu\n\n",free_space);
 80016ac:	4b8f      	ldr	r3, [pc, #572]	; (80018ec <main+0x314>)
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	461a      	mov	r2, r3
 80016b2:	498f      	ldr	r1, [pc, #572]	; (80018f0 <main+0x318>)
 80016b4:	488c      	ldr	r0, [pc, #560]	; (80018e8 <main+0x310>)
 80016b6:	f005 fc3d 	bl	8006f34 <siprintf>
	send_uart(buffer);
 80016ba:	488b      	ldr	r0, [pc, #556]	; (80018e8 <main+0x310>)
 80016bc:	f7ff ff74 	bl	80015a8 <send_uart>
	clear_buffer();
 80016c0:	f7ff ff58 	bl	8001574 <clear_buffer>


	/************* The following operation is using PUTS and GETS *********************/

	/* Open file to write/ create a file if it doesn't exist */
	fresult = f_open(&fil, "file1.txt", FA_OPEN_ALWAYS | FA_READ | FA_WRITE);
 80016c4:	2213      	movs	r2, #19
 80016c6:	498b      	ldr	r1, [pc, #556]	; (80018f4 <main+0x31c>)
 80016c8:	488b      	ldr	r0, [pc, #556]	; (80018f8 <main+0x320>)
 80016ca:	f004 fa3b 	bl	8005b44 <f_open>
 80016ce:	4603      	mov	r3, r0
 80016d0:	461a      	mov	r2, r3
 80016d2:	4b7c      	ldr	r3, [pc, #496]	; (80018c4 <main+0x2ec>)
 80016d4:	701a      	strb	r2, [r3, #0]

	/* Writing text */
	f_puts("This data is from the FILE1.txt. And it was written using ...f_puts... ", &fil);
 80016d6:	4988      	ldr	r1, [pc, #544]	; (80018f8 <main+0x320>)
 80016d8:	4888      	ldr	r0, [pc, #544]	; (80018fc <main+0x324>)
 80016da:	f005 fb6a 	bl	8006db2 <f_puts>

	/* Close file */
	fresult = f_close(&fil);
 80016de:	4886      	ldr	r0, [pc, #536]	; (80018f8 <main+0x320>)
 80016e0:	f004 ff20 	bl	8006524 <f_close>
 80016e4:	4603      	mov	r3, r0
 80016e6:	461a      	mov	r2, r3
 80016e8:	4b76      	ldr	r3, [pc, #472]	; (80018c4 <main+0x2ec>)
 80016ea:	701a      	strb	r2, [r3, #0]

	if (fresult == FR_OK)send_uart ("File1.txt created and the data is written \n");
 80016ec:	4b75      	ldr	r3, [pc, #468]	; (80018c4 <main+0x2ec>)
 80016ee:	781b      	ldrb	r3, [r3, #0]
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	d102      	bne.n	80016fa <main+0x122>
 80016f4:	4882      	ldr	r0, [pc, #520]	; (8001900 <main+0x328>)
 80016f6:	f7ff ff57 	bl	80015a8 <send_uart>

	/* Open file to read */
	fresult = f_open(&fil, "file1.txt", FA_READ);
 80016fa:	2201      	movs	r2, #1
 80016fc:	497d      	ldr	r1, [pc, #500]	; (80018f4 <main+0x31c>)
 80016fe:	487e      	ldr	r0, [pc, #504]	; (80018f8 <main+0x320>)
 8001700:	f004 fa20 	bl	8005b44 <f_open>
 8001704:	4603      	mov	r3, r0
 8001706:	461a      	mov	r2, r3
 8001708:	4b6e      	ldr	r3, [pc, #440]	; (80018c4 <main+0x2ec>)
 800170a:	701a      	strb	r2, [r3, #0]

	/* Read string from the file */
	f_gets(buffer, f_size(&fil), &fil);
 800170c:	4b7a      	ldr	r3, [pc, #488]	; (80018f8 <main+0x320>)
 800170e:	68db      	ldr	r3, [r3, #12]
 8001710:	4a79      	ldr	r2, [pc, #484]	; (80018f8 <main+0x320>)
 8001712:	4619      	mov	r1, r3
 8001714:	4874      	ldr	r0, [pc, #464]	; (80018e8 <main+0x310>)
 8001716:	f005 fa98 	bl	8006c4a <f_gets>

	send_uart("File1.txt is opened and it contains the data as shown below\n");
 800171a:	487a      	ldr	r0, [pc, #488]	; (8001904 <main+0x32c>)
 800171c:	f7ff ff44 	bl	80015a8 <send_uart>
	send_uart(buffer);
 8001720:	4871      	ldr	r0, [pc, #452]	; (80018e8 <main+0x310>)
 8001722:	f7ff ff41 	bl	80015a8 <send_uart>
	send_uart("\n\n");
 8001726:	4878      	ldr	r0, [pc, #480]	; (8001908 <main+0x330>)
 8001728:	f7ff ff3e 	bl	80015a8 <send_uart>

	/* Close file */
	f_close(&fil);
 800172c:	4872      	ldr	r0, [pc, #456]	; (80018f8 <main+0x320>)
 800172e:	f004 fef9 	bl	8006524 <f_close>

	clear_buffer();
 8001732:	f7ff ff1f 	bl	8001574 <clear_buffer>


	/**************** The following operation is using f_write and f_read **************************/

	/* Create second file with read write access and open it */
	fresult = f_open(&fil, "file2.txt", FA_CREATE_ALWAYS | FA_WRITE);
 8001736:	220a      	movs	r2, #10
 8001738:	4974      	ldr	r1, [pc, #464]	; (800190c <main+0x334>)
 800173a:	486f      	ldr	r0, [pc, #444]	; (80018f8 <main+0x320>)
 800173c:	f004 fa02 	bl	8005b44 <f_open>
 8001740:	4603      	mov	r3, r0
 8001742:	461a      	mov	r2, r3
 8001744:	4b5f      	ldr	r3, [pc, #380]	; (80018c4 <main+0x2ec>)
 8001746:	701a      	strb	r2, [r3, #0]

	/* Writing text */
	strcpy (buffer, "This is File2.txt, written using ...f_write... and it says Hello from Controllerstech\n");
 8001748:	4a67      	ldr	r2, [pc, #412]	; (80018e8 <main+0x310>)
 800174a:	4b71      	ldr	r3, [pc, #452]	; (8001910 <main+0x338>)
 800174c:	4610      	mov	r0, r2
 800174e:	4619      	mov	r1, r3
 8001750:	2357      	movs	r3, #87	; 0x57
 8001752:	461a      	mov	r2, r3
 8001754:	f005 fbd8 	bl	8006f08 <memcpy>

	fresult = f_write(&fil, buffer, bufsize(buffer), &bw);
 8001758:	4863      	ldr	r0, [pc, #396]	; (80018e8 <main+0x310>)
 800175a:	f7ff fef3 	bl	8001544 <bufsize>
 800175e:	4603      	mov	r3, r0
 8001760:	461a      	mov	r2, r3
 8001762:	4b6c      	ldr	r3, [pc, #432]	; (8001914 <main+0x33c>)
 8001764:	4960      	ldr	r1, [pc, #384]	; (80018e8 <main+0x310>)
 8001766:	4864      	ldr	r0, [pc, #400]	; (80018f8 <main+0x320>)
 8001768:	f004 fce9 	bl	800613e <f_write>
 800176c:	4603      	mov	r3, r0
 800176e:	461a      	mov	r2, r3
 8001770:	4b54      	ldr	r3, [pc, #336]	; (80018c4 <main+0x2ec>)
 8001772:	701a      	strb	r2, [r3, #0]

	send_uart ("File2.txt created and data is written\n");
 8001774:	4868      	ldr	r0, [pc, #416]	; (8001918 <main+0x340>)
 8001776:	f7ff ff17 	bl	80015a8 <send_uart>

	/* Close file */
	f_close(&fil);
 800177a:	485f      	ldr	r0, [pc, #380]	; (80018f8 <main+0x320>)
 800177c:	f004 fed2 	bl	8006524 <f_close>



	// clearing buffer to show that result obtained is from the file
	clear_buffer();
 8001780:	f7ff fef8 	bl	8001574 <clear_buffer>

	/* Open second file to read */
	fresult = f_open(&fil, "file2.txt", FA_READ);
 8001784:	2201      	movs	r2, #1
 8001786:	4961      	ldr	r1, [pc, #388]	; (800190c <main+0x334>)
 8001788:	485b      	ldr	r0, [pc, #364]	; (80018f8 <main+0x320>)
 800178a:	f004 f9db 	bl	8005b44 <f_open>
 800178e:	4603      	mov	r3, r0
 8001790:	461a      	mov	r2, r3
 8001792:	4b4c      	ldr	r3, [pc, #304]	; (80018c4 <main+0x2ec>)
 8001794:	701a      	strb	r2, [r3, #0]
	if (fresult == FR_OK)send_uart ("file2.txt is open and the data is shown below\n");
 8001796:	4b4b      	ldr	r3, [pc, #300]	; (80018c4 <main+0x2ec>)
 8001798:	781b      	ldrb	r3, [r3, #0]
 800179a:	2b00      	cmp	r3, #0
 800179c:	d102      	bne.n	80017a4 <main+0x1cc>
 800179e:	485f      	ldr	r0, [pc, #380]	; (800191c <main+0x344>)
 80017a0:	f7ff ff02 	bl	80015a8 <send_uart>

	/* Read data from the file
	 * Please see the function details for the arguments */
	f_read (&fil, buffer, f_size(&fil), &br);
 80017a4:	4b54      	ldr	r3, [pc, #336]	; (80018f8 <main+0x320>)
 80017a6:	68da      	ldr	r2, [r3, #12]
 80017a8:	4b5d      	ldr	r3, [pc, #372]	; (8001920 <main+0x348>)
 80017aa:	494f      	ldr	r1, [pc, #316]	; (80018e8 <main+0x310>)
 80017ac:	4852      	ldr	r0, [pc, #328]	; (80018f8 <main+0x320>)
 80017ae:	f004 fb87 	bl	8005ec0 <f_read>
	send_uart(buffer);
 80017b2:	484d      	ldr	r0, [pc, #308]	; (80018e8 <main+0x310>)
 80017b4:	f7ff fef8 	bl	80015a8 <send_uart>
	send_uart("\n\n");
 80017b8:	4853      	ldr	r0, [pc, #332]	; (8001908 <main+0x330>)
 80017ba:	f7ff fef5 	bl	80015a8 <send_uart>

	/* Close file */
	f_close(&fil);
 80017be:	484e      	ldr	r0, [pc, #312]	; (80018f8 <main+0x320>)
 80017c0:	f004 feb0 	bl	8006524 <f_close>

	clear_buffer();
 80017c4:	f7ff fed6 	bl	8001574 <clear_buffer>


	/*********************UPDATING an existing file ***************************/

	/* Open the file with write access */
	fresult = f_open(&fil, "file2.txt", FA_OPEN_EXISTING | FA_READ | FA_WRITE);
 80017c8:	2203      	movs	r2, #3
 80017ca:	4950      	ldr	r1, [pc, #320]	; (800190c <main+0x334>)
 80017cc:	484a      	ldr	r0, [pc, #296]	; (80018f8 <main+0x320>)
 80017ce:	f004 f9b9 	bl	8005b44 <f_open>
 80017d2:	4603      	mov	r3, r0
 80017d4:	461a      	mov	r2, r3
 80017d6:	4b3b      	ldr	r3, [pc, #236]	; (80018c4 <main+0x2ec>)
 80017d8:	701a      	strb	r2, [r3, #0]

	/* Move to offset to the end of the file */
	fresult = f_lseek(&fil, f_size(&fil));
 80017da:	4b47      	ldr	r3, [pc, #284]	; (80018f8 <main+0x320>)
 80017dc:	68db      	ldr	r3, [r3, #12]
 80017de:	4619      	mov	r1, r3
 80017e0:	4845      	ldr	r0, [pc, #276]	; (80018f8 <main+0x320>)
 80017e2:	f004 fec9 	bl	8006578 <f_lseek>
 80017e6:	4603      	mov	r3, r0
 80017e8:	461a      	mov	r2, r3
 80017ea:	4b36      	ldr	r3, [pc, #216]	; (80018c4 <main+0x2ec>)
 80017ec:	701a      	strb	r2, [r3, #0]

	if (fresult == FR_OK)send_uart ("About to update the file2.txt\n");
 80017ee:	4b35      	ldr	r3, [pc, #212]	; (80018c4 <main+0x2ec>)
 80017f0:	781b      	ldrb	r3, [r3, #0]
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d102      	bne.n	80017fc <main+0x224>
 80017f6:	484b      	ldr	r0, [pc, #300]	; (8001924 <main+0x34c>)
 80017f8:	f7ff fed6 	bl	80015a8 <send_uart>

	/* write the string to the file */
	fresult = f_puts("This is updated data and it should be in the end", &fil);
 80017fc:	493e      	ldr	r1, [pc, #248]	; (80018f8 <main+0x320>)
 80017fe:	484a      	ldr	r0, [pc, #296]	; (8001928 <main+0x350>)
 8001800:	f005 fad7 	bl	8006db2 <f_puts>
 8001804:	4603      	mov	r3, r0
 8001806:	b2da      	uxtb	r2, r3
 8001808:	4b2e      	ldr	r3, [pc, #184]	; (80018c4 <main+0x2ec>)
 800180a:	701a      	strb	r2, [r3, #0]

	f_close (&fil);
 800180c:	483a      	ldr	r0, [pc, #232]	; (80018f8 <main+0x320>)
 800180e:	f004 fe89 	bl	8006524 <f_close>

	clear_buffer();
 8001812:	f7ff feaf 	bl	8001574 <clear_buffer>

	/* Open to read the file */
	fresult = f_open (&fil, "file2.txt", FA_READ);
 8001816:	2201      	movs	r2, #1
 8001818:	493c      	ldr	r1, [pc, #240]	; (800190c <main+0x334>)
 800181a:	4837      	ldr	r0, [pc, #220]	; (80018f8 <main+0x320>)
 800181c:	f004 f992 	bl	8005b44 <f_open>
 8001820:	4603      	mov	r3, r0
 8001822:	461a      	mov	r2, r3
 8001824:	4b27      	ldr	r3, [pc, #156]	; (80018c4 <main+0x2ec>)
 8001826:	701a      	strb	r2, [r3, #0]

	/* Read string from the file */
	fresult = f_read (&fil, buffer, f_size(&fil), &br);
 8001828:	4b33      	ldr	r3, [pc, #204]	; (80018f8 <main+0x320>)
 800182a:	68da      	ldr	r2, [r3, #12]
 800182c:	4b3c      	ldr	r3, [pc, #240]	; (8001920 <main+0x348>)
 800182e:	492e      	ldr	r1, [pc, #184]	; (80018e8 <main+0x310>)
 8001830:	4831      	ldr	r0, [pc, #196]	; (80018f8 <main+0x320>)
 8001832:	f004 fb45 	bl	8005ec0 <f_read>
 8001836:	4603      	mov	r3, r0
 8001838:	461a      	mov	r2, r3
 800183a:	4b22      	ldr	r3, [pc, #136]	; (80018c4 <main+0x2ec>)
 800183c:	701a      	strb	r2, [r3, #0]
	if (fresult == FR_OK)send_uart ("Below is the data from updated file2.txt\n");
 800183e:	4b21      	ldr	r3, [pc, #132]	; (80018c4 <main+0x2ec>)
 8001840:	781b      	ldrb	r3, [r3, #0]
 8001842:	2b00      	cmp	r3, #0
 8001844:	d102      	bne.n	800184c <main+0x274>
 8001846:	4839      	ldr	r0, [pc, #228]	; (800192c <main+0x354>)
 8001848:	f7ff feae 	bl	80015a8 <send_uart>
	send_uart(buffer);
 800184c:	4826      	ldr	r0, [pc, #152]	; (80018e8 <main+0x310>)
 800184e:	f7ff feab 	bl	80015a8 <send_uart>
	send_uart("\n\n");
 8001852:	482d      	ldr	r0, [pc, #180]	; (8001908 <main+0x330>)
 8001854:	f7ff fea8 	bl	80015a8 <send_uart>

	/* Close file */
	f_close(&fil);
 8001858:	4827      	ldr	r0, [pc, #156]	; (80018f8 <main+0x320>)
 800185a:	f004 fe63 	bl	8006524 <f_close>

	clear_buffer();
 800185e:	f7ff fe89 	bl	8001574 <clear_buffer>


	/*************************REMOVING FILES FROM THE DIRECTORY ****************************/

	fresult = f_unlink("/file1.txt");
 8001862:	4833      	ldr	r0, [pc, #204]	; (8001930 <main+0x358>)
 8001864:	f005 f946 	bl	8006af4 <f_unlink>
 8001868:	4603      	mov	r3, r0
 800186a:	461a      	mov	r2, r3
 800186c:	4b15      	ldr	r3, [pc, #84]	; (80018c4 <main+0x2ec>)
 800186e:	701a      	strb	r2, [r3, #0]
	if (fresult == FR_OK) send_uart("file1.txt removed successfully...\n");
 8001870:	4b14      	ldr	r3, [pc, #80]	; (80018c4 <main+0x2ec>)
 8001872:	781b      	ldrb	r3, [r3, #0]
 8001874:	2b00      	cmp	r3, #0
 8001876:	d102      	bne.n	800187e <main+0x2a6>
 8001878:	482e      	ldr	r0, [pc, #184]	; (8001934 <main+0x35c>)
 800187a:	f7ff fe95 	bl	80015a8 <send_uart>

	fresult = f_unlink("/file2.txt");
 800187e:	482e      	ldr	r0, [pc, #184]	; (8001938 <main+0x360>)
 8001880:	f005 f938 	bl	8006af4 <f_unlink>
 8001884:	4603      	mov	r3, r0
 8001886:	461a      	mov	r2, r3
 8001888:	4b0e      	ldr	r3, [pc, #56]	; (80018c4 <main+0x2ec>)
 800188a:	701a      	strb	r2, [r3, #0]
	if (fresult == FR_OK) send_uart("file2.txt removed successfully...\n");
 800188c:	4b0d      	ldr	r3, [pc, #52]	; (80018c4 <main+0x2ec>)
 800188e:	781b      	ldrb	r3, [r3, #0]
 8001890:	2b00      	cmp	r3, #0
 8001892:	d102      	bne.n	800189a <main+0x2c2>
 8001894:	4829      	ldr	r0, [pc, #164]	; (800193c <main+0x364>)
 8001896:	f7ff fe87 	bl	80015a8 <send_uart>

	/* Unmount SDCARD */
	fresult = f_mount(NULL, "/", 1);
 800189a:	2201      	movs	r2, #1
 800189c:	4907      	ldr	r1, [pc, #28]	; (80018bc <main+0x2e4>)
 800189e:	2000      	movs	r0, #0
 80018a0:	f004 f90a 	bl	8005ab8 <f_mount>
 80018a4:	4603      	mov	r3, r0
 80018a6:	461a      	mov	r2, r3
 80018a8:	4b06      	ldr	r3, [pc, #24]	; (80018c4 <main+0x2ec>)
 80018aa:	701a      	strb	r2, [r3, #0]
	if (fresult == FR_OK) send_uart ("SD CARD UNMOUNTED successfully...\n");
 80018ac:	4b05      	ldr	r3, [pc, #20]	; (80018c4 <main+0x2ec>)
 80018ae:	781b      	ldrb	r3, [r3, #0]
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d102      	bne.n	80018ba <main+0x2e2>
 80018b4:	4822      	ldr	r0, [pc, #136]	; (8001940 <main+0x368>)
 80018b6:	f7ff fe77 	bl	80015a8 <send_uart>

	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1)
 80018ba:	e7fe      	b.n	80018ba <main+0x2e2>
 80018bc:	0800780c 	.word	0x0800780c
 80018c0:	20000144 	.word	0x20000144
 80018c4:	200005a4 	.word	0x200005a4
 80018c8:	08007810 	.word	0x08007810
 80018cc:	08007834 	.word	0x08007834
 80018d0:	200005b0 	.word	0x200005b0
 80018d4:	200005b4 	.word	0x200005b4
 80018d8:	08007858 	.word	0x08007858
 80018dc:	3fe00000 	.word	0x3fe00000
 80018e0:	200005b8 	.word	0x200005b8
 80018e4:	0800785c 	.word	0x0800785c
 80018e8:	200005c0 	.word	0x200005c0
 80018ec:	200005bc 	.word	0x200005bc
 80018f0:	08007878 	.word	0x08007878
 80018f4:	08007894 	.word	0x08007894
 80018f8:	20000374 	.word	0x20000374
 80018fc:	080078a0 	.word	0x080078a0
 8001900:	080078e8 	.word	0x080078e8
 8001904:	08007914 	.word	0x08007914
 8001908:	08007954 	.word	0x08007954
 800190c:	08007958 	.word	0x08007958
 8001910:	08007964 	.word	0x08007964
 8001914:	200005ac 	.word	0x200005ac
 8001918:	080079bc 	.word	0x080079bc
 800191c:	080079e4 	.word	0x080079e4
 8001920:	200005a8 	.word	0x200005a8
 8001924:	08007a14 	.word	0x08007a14
 8001928:	08007a34 	.word	0x08007a34
 800192c:	08007a68 	.word	0x08007a68
 8001930:	08007a94 	.word	0x08007a94
 8001934:	08007aa0 	.word	0x08007aa0
 8001938:	08007ac4 	.word	0x08007ac4
 800193c:	08007ad0 	.word	0x08007ad0
 8001940:	08007af4 	.word	0x08007af4

08001944 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8001944:	b580      	push	{r7, lr}
 8001946:	b094      	sub	sp, #80	; 0x50
 8001948:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800194a:	f107 0320 	add.w	r3, r7, #32
 800194e:	2230      	movs	r2, #48	; 0x30
 8001950:	2100      	movs	r1, #0
 8001952:	4618      	mov	r0, r3
 8001954:	f005 fae6 	bl	8006f24 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001958:	f107 030c 	add.w	r3, r7, #12
 800195c:	2200      	movs	r2, #0
 800195e:	601a      	str	r2, [r3, #0]
 8001960:	605a      	str	r2, [r3, #4]
 8001962:	609a      	str	r2, [r3, #8]
 8001964:	60da      	str	r2, [r3, #12]
 8001966:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 8001968:	2300      	movs	r3, #0
 800196a:	60bb      	str	r3, [r7, #8]
 800196c:	4b29      	ldr	r3, [pc, #164]	; (8001a14 <SystemClock_Config+0xd0>)
 800196e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001970:	4a28      	ldr	r2, [pc, #160]	; (8001a14 <SystemClock_Config+0xd0>)
 8001972:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001976:	6413      	str	r3, [r2, #64]	; 0x40
 8001978:	4b26      	ldr	r3, [pc, #152]	; (8001a14 <SystemClock_Config+0xd0>)
 800197a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800197c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001980:	60bb      	str	r3, [r7, #8]
 8001982:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8001984:	2300      	movs	r3, #0
 8001986:	607b      	str	r3, [r7, #4]
 8001988:	4b23      	ldr	r3, [pc, #140]	; (8001a18 <SystemClock_Config+0xd4>)
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001990:	4a21      	ldr	r2, [pc, #132]	; (8001a18 <SystemClock_Config+0xd4>)
 8001992:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001996:	6013      	str	r3, [r2, #0]
 8001998:	4b1f      	ldr	r3, [pc, #124]	; (8001a18 <SystemClock_Config+0xd4>)
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80019a0:	607b      	str	r3, [r7, #4]
 80019a2:	687b      	ldr	r3, [r7, #4]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80019a4:	2302      	movs	r3, #2
 80019a6:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80019a8:	2301      	movs	r3, #1
 80019aa:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80019ac:	2310      	movs	r3, #16
 80019ae:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80019b0:	2302      	movs	r3, #2
 80019b2:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80019b4:	2300      	movs	r3, #0
 80019b6:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLM = 16;
 80019b8:	2310      	movs	r3, #16
 80019ba:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLN = 336;
 80019bc:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80019c0:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80019c2:	2304      	movs	r3, #4
 80019c4:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLQ = 7;
 80019c6:	2307      	movs	r3, #7
 80019c8:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80019ca:	f107 0320 	add.w	r3, r7, #32
 80019ce:	4618      	mov	r0, r3
 80019d0:	f000 fdbe 	bl	8002550 <HAL_RCC_OscConfig>
 80019d4:	4603      	mov	r3, r0
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d001      	beq.n	80019de <SystemClock_Config+0x9a>
	{
		Error_Handler();
 80019da:	f000 f8ed 	bl	8001bb8 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80019de:	230f      	movs	r3, #15
 80019e0:	60fb      	str	r3, [r7, #12]
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80019e2:	2302      	movs	r3, #2
 80019e4:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80019e6:	2300      	movs	r3, #0
 80019e8:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80019ea:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80019ee:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80019f0:	2300      	movs	r3, #0
 80019f2:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80019f4:	f107 030c 	add.w	r3, r7, #12
 80019f8:	2102      	movs	r1, #2
 80019fa:	4618      	mov	r0, r3
 80019fc:	f001 f820 	bl	8002a40 <HAL_RCC_ClockConfig>
 8001a00:	4603      	mov	r3, r0
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d001      	beq.n	8001a0a <SystemClock_Config+0xc6>
	{
		Error_Handler();
 8001a06:	f000 f8d7 	bl	8001bb8 <Error_Handler>
	}
}
 8001a0a:	bf00      	nop
 8001a0c:	3750      	adds	r7, #80	; 0x50
 8001a0e:	46bd      	mov	sp, r7
 8001a10:	bd80      	pop	{r7, pc}
 8001a12:	bf00      	nop
 8001a14:	40023800 	.word	0x40023800
 8001a18:	40007000 	.word	0x40007000

08001a1c <MX_SPI1_Init>:
 * @brief SPI1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI1_Init(void)
{
 8001a1c:	b580      	push	{r7, lr}
 8001a1e:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN SPI1_Init 1 */

	/* USER CODE END SPI1_Init 1 */
	/* SPI1 parameter configuration*/
	hspi1.Instance = SPI1;
 8001a20:	4b17      	ldr	r3, [pc, #92]	; (8001a80 <MX_SPI1_Init+0x64>)
 8001a22:	4a18      	ldr	r2, [pc, #96]	; (8001a84 <MX_SPI1_Init+0x68>)
 8001a24:	601a      	str	r2, [r3, #0]
	hspi1.Init.Mode = SPI_MODE_MASTER;
 8001a26:	4b16      	ldr	r3, [pc, #88]	; (8001a80 <MX_SPI1_Init+0x64>)
 8001a28:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001a2c:	605a      	str	r2, [r3, #4]
	hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001a2e:	4b14      	ldr	r3, [pc, #80]	; (8001a80 <MX_SPI1_Init+0x64>)
 8001a30:	2200      	movs	r2, #0
 8001a32:	609a      	str	r2, [r3, #8]
	hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001a34:	4b12      	ldr	r3, [pc, #72]	; (8001a80 <MX_SPI1_Init+0x64>)
 8001a36:	2200      	movs	r2, #0
 8001a38:	60da      	str	r2, [r3, #12]
	hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001a3a:	4b11      	ldr	r3, [pc, #68]	; (8001a80 <MX_SPI1_Init+0x64>)
 8001a3c:	2200      	movs	r2, #0
 8001a3e:	611a      	str	r2, [r3, #16]
	hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001a40:	4b0f      	ldr	r3, [pc, #60]	; (8001a80 <MX_SPI1_Init+0x64>)
 8001a42:	2200      	movs	r2, #0
 8001a44:	615a      	str	r2, [r3, #20]
	hspi1.Init.NSS = SPI_NSS_SOFT;
 8001a46:	4b0e      	ldr	r3, [pc, #56]	; (8001a80 <MX_SPI1_Init+0x64>)
 8001a48:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001a4c:	619a      	str	r2, [r3, #24]
	hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8001a4e:	4b0c      	ldr	r3, [pc, #48]	; (8001a80 <MX_SPI1_Init+0x64>)
 8001a50:	2228      	movs	r2, #40	; 0x28
 8001a52:	61da      	str	r2, [r3, #28]
	hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001a54:	4b0a      	ldr	r3, [pc, #40]	; (8001a80 <MX_SPI1_Init+0x64>)
 8001a56:	2200      	movs	r2, #0
 8001a58:	621a      	str	r2, [r3, #32]
	hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001a5a:	4b09      	ldr	r3, [pc, #36]	; (8001a80 <MX_SPI1_Init+0x64>)
 8001a5c:	2200      	movs	r2, #0
 8001a5e:	625a      	str	r2, [r3, #36]	; 0x24
	hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001a60:	4b07      	ldr	r3, [pc, #28]	; (8001a80 <MX_SPI1_Init+0x64>)
 8001a62:	2200      	movs	r2, #0
 8001a64:	629a      	str	r2, [r3, #40]	; 0x28
	hspi1.Init.CRCPolynomial = 10;
 8001a66:	4b06      	ldr	r3, [pc, #24]	; (8001a80 <MX_SPI1_Init+0x64>)
 8001a68:	220a      	movs	r2, #10
 8001a6a:	62da      	str	r2, [r3, #44]	; 0x2c
	if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001a6c:	4804      	ldr	r0, [pc, #16]	; (8001a80 <MX_SPI1_Init+0x64>)
 8001a6e:	f001 fa07 	bl	8002e80 <HAL_SPI_Init>
 8001a72:	4603      	mov	r3, r0
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d001      	beq.n	8001a7c <MX_SPI1_Init+0x60>
	{
		Error_Handler();
 8001a78:	f000 f89e 	bl	8001bb8 <Error_Handler>
	}
	/* USER CODE BEGIN SPI1_Init 2 */

	/* USER CODE END SPI1_Init 2 */

}
 8001a7c:	bf00      	nop
 8001a7e:	bd80      	pop	{r7, pc}
 8001a80:	200000a8 	.word	0x200000a8
 8001a84:	40013000 	.word	0x40013000

08001a88 <MX_USART2_UART_Init>:
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void)
{
 8001a88:	b580      	push	{r7, lr}
 8001a8a:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 8001a8c:	4b11      	ldr	r3, [pc, #68]	; (8001ad4 <MX_USART2_UART_Init+0x4c>)
 8001a8e:	4a12      	ldr	r2, [pc, #72]	; (8001ad8 <MX_USART2_UART_Init+0x50>)
 8001a90:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 115200;
 8001a92:	4b10      	ldr	r3, [pc, #64]	; (8001ad4 <MX_USART2_UART_Init+0x4c>)
 8001a94:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001a98:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001a9a:	4b0e      	ldr	r3, [pc, #56]	; (8001ad4 <MX_USART2_UART_Init+0x4c>)
 8001a9c:	2200      	movs	r2, #0
 8001a9e:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 8001aa0:	4b0c      	ldr	r3, [pc, #48]	; (8001ad4 <MX_USART2_UART_Init+0x4c>)
 8001aa2:	2200      	movs	r2, #0
 8001aa4:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 8001aa6:	4b0b      	ldr	r3, [pc, #44]	; (8001ad4 <MX_USART2_UART_Init+0x4c>)
 8001aa8:	2200      	movs	r2, #0
 8001aaa:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 8001aac:	4b09      	ldr	r3, [pc, #36]	; (8001ad4 <MX_USART2_UART_Init+0x4c>)
 8001aae:	220c      	movs	r2, #12
 8001ab0:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001ab2:	4b08      	ldr	r3, [pc, #32]	; (8001ad4 <MX_USART2_UART_Init+0x4c>)
 8001ab4:	2200      	movs	r2, #0
 8001ab6:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001ab8:	4b06      	ldr	r3, [pc, #24]	; (8001ad4 <MX_USART2_UART_Init+0x4c>)
 8001aba:	2200      	movs	r2, #0
 8001abc:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart2) != HAL_OK)
 8001abe:	4805      	ldr	r0, [pc, #20]	; (8001ad4 <MX_USART2_UART_Init+0x4c>)
 8001ac0:	f001 fe10 	bl	80036e4 <HAL_UART_Init>
 8001ac4:	4603      	mov	r3, r0
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d001      	beq.n	8001ace <MX_USART2_UART_Init+0x46>
	{
		Error_Handler();
 8001aca:	f000 f875 	bl	8001bb8 <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */

}
 8001ace:	bf00      	nop
 8001ad0:	bd80      	pop	{r7, pc}
 8001ad2:	bf00      	nop
 8001ad4:	20000100 	.word	0x20000100
 8001ad8:	40004400 	.word	0x40004400

08001adc <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 8001adc:	b580      	push	{r7, lr}
 8001ade:	b08a      	sub	sp, #40	; 0x28
 8001ae0:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ae2:	f107 0314 	add.w	r3, r7, #20
 8001ae6:	2200      	movs	r2, #0
 8001ae8:	601a      	str	r2, [r3, #0]
 8001aea:	605a      	str	r2, [r3, #4]
 8001aec:	609a      	str	r2, [r3, #8]
 8001aee:	60da      	str	r2, [r3, #12]
 8001af0:	611a      	str	r2, [r3, #16]
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8001af2:	2300      	movs	r3, #0
 8001af4:	613b      	str	r3, [r7, #16]
 8001af6:	4b2d      	ldr	r3, [pc, #180]	; (8001bac <MX_GPIO_Init+0xd0>)
 8001af8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001afa:	4a2c      	ldr	r2, [pc, #176]	; (8001bac <MX_GPIO_Init+0xd0>)
 8001afc:	f043 0304 	orr.w	r3, r3, #4
 8001b00:	6313      	str	r3, [r2, #48]	; 0x30
 8001b02:	4b2a      	ldr	r3, [pc, #168]	; (8001bac <MX_GPIO_Init+0xd0>)
 8001b04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b06:	f003 0304 	and.w	r3, r3, #4
 8001b0a:	613b      	str	r3, [r7, #16]
 8001b0c:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 8001b0e:	2300      	movs	r3, #0
 8001b10:	60fb      	str	r3, [r7, #12]
 8001b12:	4b26      	ldr	r3, [pc, #152]	; (8001bac <MX_GPIO_Init+0xd0>)
 8001b14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b16:	4a25      	ldr	r2, [pc, #148]	; (8001bac <MX_GPIO_Init+0xd0>)
 8001b18:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001b1c:	6313      	str	r3, [r2, #48]	; 0x30
 8001b1e:	4b23      	ldr	r3, [pc, #140]	; (8001bac <MX_GPIO_Init+0xd0>)
 8001b20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b22:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001b26:	60fb      	str	r3, [r7, #12]
 8001b28:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8001b2a:	2300      	movs	r3, #0
 8001b2c:	60bb      	str	r3, [r7, #8]
 8001b2e:	4b1f      	ldr	r3, [pc, #124]	; (8001bac <MX_GPIO_Init+0xd0>)
 8001b30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b32:	4a1e      	ldr	r2, [pc, #120]	; (8001bac <MX_GPIO_Init+0xd0>)
 8001b34:	f043 0301 	orr.w	r3, r3, #1
 8001b38:	6313      	str	r3, [r2, #48]	; 0x30
 8001b3a:	4b1c      	ldr	r3, [pc, #112]	; (8001bac <MX_GPIO_Init+0xd0>)
 8001b3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b3e:	f003 0301 	and.w	r3, r3, #1
 8001b42:	60bb      	str	r3, [r7, #8]
 8001b44:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8001b46:	2300      	movs	r3, #0
 8001b48:	607b      	str	r3, [r7, #4]
 8001b4a:	4b18      	ldr	r3, [pc, #96]	; (8001bac <MX_GPIO_Init+0xd0>)
 8001b4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b4e:	4a17      	ldr	r2, [pc, #92]	; (8001bac <MX_GPIO_Init+0xd0>)
 8001b50:	f043 0302 	orr.w	r3, r3, #2
 8001b54:	6313      	str	r3, [r2, #48]	; 0x30
 8001b56:	4b15      	ldr	r3, [pc, #84]	; (8001bac <MX_GPIO_Init+0xd0>)
 8001b58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b5a:	f003 0302 	and.w	r3, r3, #2
 8001b5e:	607b      	str	r3, [r7, #4]
 8001b60:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOA, SD_CS_Pin|LD2_Pin, GPIO_PIN_RESET);
 8001b62:	2200      	movs	r2, #0
 8001b64:	2130      	movs	r1, #48	; 0x30
 8001b66:	4812      	ldr	r0, [pc, #72]	; (8001bb0 <MX_GPIO_Init+0xd4>)
 8001b68:	f000 fcd8 	bl	800251c <HAL_GPIO_WritePin>

	/*Configure GPIO pin : B1_Pin */
	GPIO_InitStruct.Pin = B1_Pin;
 8001b6c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001b70:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001b72:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001b76:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b78:	2300      	movs	r3, #0
 8001b7a:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001b7c:	f107 0314 	add.w	r3, r7, #20
 8001b80:	4619      	mov	r1, r3
 8001b82:	480c      	ldr	r0, [pc, #48]	; (8001bb4 <MX_GPIO_Init+0xd8>)
 8001b84:	f000 fb46 	bl	8002214 <HAL_GPIO_Init>

	/*Configure GPIO pins : SD_CS_Pin LD2_Pin */
	GPIO_InitStruct.Pin = SD_CS_Pin|LD2_Pin;
 8001b88:	2330      	movs	r3, #48	; 0x30
 8001b8a:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b8c:	2301      	movs	r3, #1
 8001b8e:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b90:	2300      	movs	r3, #0
 8001b92:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b94:	2300      	movs	r3, #0
 8001b96:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b98:	f107 0314 	add.w	r3, r7, #20
 8001b9c:	4619      	mov	r1, r3
 8001b9e:	4804      	ldr	r0, [pc, #16]	; (8001bb0 <MX_GPIO_Init+0xd4>)
 8001ba0:	f000 fb38 	bl	8002214 <HAL_GPIO_Init>

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 8001ba4:	bf00      	nop
 8001ba6:	3728      	adds	r7, #40	; 0x28
 8001ba8:	46bd      	mov	sp, r7
 8001baa:	bd80      	pop	{r7, pc}
 8001bac:	40023800 	.word	0x40023800
 8001bb0:	40020000 	.word	0x40020000
 8001bb4:	40020800 	.word	0x40020800

08001bb8 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8001bb8:	b480      	push	{r7}
 8001bba:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001bbc:	b672      	cpsid	i
}
 8001bbe:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8001bc0:	e7fe      	b.n	8001bc0 <Error_Handler+0x8>
	...

08001bc4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001bc4:	b580      	push	{r7, lr}
 8001bc6:	b082      	sub	sp, #8
 8001bc8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001bca:	2300      	movs	r3, #0
 8001bcc:	607b      	str	r3, [r7, #4]
 8001bce:	4b10      	ldr	r3, [pc, #64]	; (8001c10 <HAL_MspInit+0x4c>)
 8001bd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bd2:	4a0f      	ldr	r2, [pc, #60]	; (8001c10 <HAL_MspInit+0x4c>)
 8001bd4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001bd8:	6453      	str	r3, [r2, #68]	; 0x44
 8001bda:	4b0d      	ldr	r3, [pc, #52]	; (8001c10 <HAL_MspInit+0x4c>)
 8001bdc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bde:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001be2:	607b      	str	r3, [r7, #4]
 8001be4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001be6:	2300      	movs	r3, #0
 8001be8:	603b      	str	r3, [r7, #0]
 8001bea:	4b09      	ldr	r3, [pc, #36]	; (8001c10 <HAL_MspInit+0x4c>)
 8001bec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bee:	4a08      	ldr	r2, [pc, #32]	; (8001c10 <HAL_MspInit+0x4c>)
 8001bf0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001bf4:	6413      	str	r3, [r2, #64]	; 0x40
 8001bf6:	4b06      	ldr	r3, [pc, #24]	; (8001c10 <HAL_MspInit+0x4c>)
 8001bf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bfa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001bfe:	603b      	str	r3, [r7, #0]
 8001c00:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001c02:	2007      	movs	r0, #7
 8001c04:	f000 fad2 	bl	80021ac <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001c08:	bf00      	nop
 8001c0a:	3708      	adds	r7, #8
 8001c0c:	46bd      	mov	sp, r7
 8001c0e:	bd80      	pop	{r7, pc}
 8001c10:	40023800 	.word	0x40023800

08001c14 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001c14:	b580      	push	{r7, lr}
 8001c16:	b08a      	sub	sp, #40	; 0x28
 8001c18:	af00      	add	r7, sp, #0
 8001c1a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c1c:	f107 0314 	add.w	r3, r7, #20
 8001c20:	2200      	movs	r2, #0
 8001c22:	601a      	str	r2, [r3, #0]
 8001c24:	605a      	str	r2, [r3, #4]
 8001c26:	609a      	str	r2, [r3, #8]
 8001c28:	60da      	str	r2, [r3, #12]
 8001c2a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	4a28      	ldr	r2, [pc, #160]	; (8001cd4 <HAL_SPI_MspInit+0xc0>)
 8001c32:	4293      	cmp	r3, r2
 8001c34:	d149      	bne.n	8001cca <HAL_SPI_MspInit+0xb6>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001c36:	2300      	movs	r3, #0
 8001c38:	613b      	str	r3, [r7, #16]
 8001c3a:	4b27      	ldr	r3, [pc, #156]	; (8001cd8 <HAL_SPI_MspInit+0xc4>)
 8001c3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c3e:	4a26      	ldr	r2, [pc, #152]	; (8001cd8 <HAL_SPI_MspInit+0xc4>)
 8001c40:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001c44:	6453      	str	r3, [r2, #68]	; 0x44
 8001c46:	4b24      	ldr	r3, [pc, #144]	; (8001cd8 <HAL_SPI_MspInit+0xc4>)
 8001c48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c4a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001c4e:	613b      	str	r3, [r7, #16]
 8001c50:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c52:	2300      	movs	r3, #0
 8001c54:	60fb      	str	r3, [r7, #12]
 8001c56:	4b20      	ldr	r3, [pc, #128]	; (8001cd8 <HAL_SPI_MspInit+0xc4>)
 8001c58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c5a:	4a1f      	ldr	r2, [pc, #124]	; (8001cd8 <HAL_SPI_MspInit+0xc4>)
 8001c5c:	f043 0301 	orr.w	r3, r3, #1
 8001c60:	6313      	str	r3, [r2, #48]	; 0x30
 8001c62:	4b1d      	ldr	r3, [pc, #116]	; (8001cd8 <HAL_SPI_MspInit+0xc4>)
 8001c64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c66:	f003 0301 	and.w	r3, r3, #1
 8001c6a:	60fb      	str	r3, [r7, #12]
 8001c6c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c6e:	2300      	movs	r3, #0
 8001c70:	60bb      	str	r3, [r7, #8]
 8001c72:	4b19      	ldr	r3, [pc, #100]	; (8001cd8 <HAL_SPI_MspInit+0xc4>)
 8001c74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c76:	4a18      	ldr	r2, [pc, #96]	; (8001cd8 <HAL_SPI_MspInit+0xc4>)
 8001c78:	f043 0302 	orr.w	r3, r3, #2
 8001c7c:	6313      	str	r3, [r2, #48]	; 0x30
 8001c7e:	4b16      	ldr	r3, [pc, #88]	; (8001cd8 <HAL_SPI_MspInit+0xc4>)
 8001c80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c82:	f003 0302 	and.w	r3, r3, #2
 8001c86:	60bb      	str	r3, [r7, #8]
 8001c88:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    PB3     ------> SPI1_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001c8a:	23c0      	movs	r3, #192	; 0xc0
 8001c8c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c8e:	2302      	movs	r3, #2
 8001c90:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c92:	2300      	movs	r3, #0
 8001c94:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c96:	2303      	movs	r3, #3
 8001c98:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001c9a:	2305      	movs	r3, #5
 8001c9c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c9e:	f107 0314 	add.w	r3, r7, #20
 8001ca2:	4619      	mov	r1, r3
 8001ca4:	480d      	ldr	r0, [pc, #52]	; (8001cdc <HAL_SPI_MspInit+0xc8>)
 8001ca6:	f000 fab5 	bl	8002214 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001caa:	2308      	movs	r3, #8
 8001cac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cae:	2302      	movs	r3, #2
 8001cb0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cb2:	2300      	movs	r3, #0
 8001cb4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001cb6:	2303      	movs	r3, #3
 8001cb8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001cba:	2305      	movs	r3, #5
 8001cbc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001cbe:	f107 0314 	add.w	r3, r7, #20
 8001cc2:	4619      	mov	r1, r3
 8001cc4:	4806      	ldr	r0, [pc, #24]	; (8001ce0 <HAL_SPI_MspInit+0xcc>)
 8001cc6:	f000 faa5 	bl	8002214 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001cca:	bf00      	nop
 8001ccc:	3728      	adds	r7, #40	; 0x28
 8001cce:	46bd      	mov	sp, r7
 8001cd0:	bd80      	pop	{r7, pc}
 8001cd2:	bf00      	nop
 8001cd4:	40013000 	.word	0x40013000
 8001cd8:	40023800 	.word	0x40023800
 8001cdc:	40020000 	.word	0x40020000
 8001ce0:	40020400 	.word	0x40020400

08001ce4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001ce4:	b580      	push	{r7, lr}
 8001ce6:	b08a      	sub	sp, #40	; 0x28
 8001ce8:	af00      	add	r7, sp, #0
 8001cea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cec:	f107 0314 	add.w	r3, r7, #20
 8001cf0:	2200      	movs	r2, #0
 8001cf2:	601a      	str	r2, [r3, #0]
 8001cf4:	605a      	str	r2, [r3, #4]
 8001cf6:	609a      	str	r2, [r3, #8]
 8001cf8:	60da      	str	r2, [r3, #12]
 8001cfa:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	4a19      	ldr	r2, [pc, #100]	; (8001d68 <HAL_UART_MspInit+0x84>)
 8001d02:	4293      	cmp	r3, r2
 8001d04:	d12b      	bne.n	8001d5e <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001d06:	2300      	movs	r3, #0
 8001d08:	613b      	str	r3, [r7, #16]
 8001d0a:	4b18      	ldr	r3, [pc, #96]	; (8001d6c <HAL_UART_MspInit+0x88>)
 8001d0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d0e:	4a17      	ldr	r2, [pc, #92]	; (8001d6c <HAL_UART_MspInit+0x88>)
 8001d10:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001d14:	6413      	str	r3, [r2, #64]	; 0x40
 8001d16:	4b15      	ldr	r3, [pc, #84]	; (8001d6c <HAL_UART_MspInit+0x88>)
 8001d18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d1e:	613b      	str	r3, [r7, #16]
 8001d20:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d22:	2300      	movs	r3, #0
 8001d24:	60fb      	str	r3, [r7, #12]
 8001d26:	4b11      	ldr	r3, [pc, #68]	; (8001d6c <HAL_UART_MspInit+0x88>)
 8001d28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d2a:	4a10      	ldr	r2, [pc, #64]	; (8001d6c <HAL_UART_MspInit+0x88>)
 8001d2c:	f043 0301 	orr.w	r3, r3, #1
 8001d30:	6313      	str	r3, [r2, #48]	; 0x30
 8001d32:	4b0e      	ldr	r3, [pc, #56]	; (8001d6c <HAL_UART_MspInit+0x88>)
 8001d34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d36:	f003 0301 	and.w	r3, r3, #1
 8001d3a:	60fb      	str	r3, [r7, #12]
 8001d3c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001d3e:	230c      	movs	r3, #12
 8001d40:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d42:	2302      	movs	r3, #2
 8001d44:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d46:	2300      	movs	r3, #0
 8001d48:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d4a:	2300      	movs	r3, #0
 8001d4c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001d4e:	2307      	movs	r3, #7
 8001d50:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d52:	f107 0314 	add.w	r3, r7, #20
 8001d56:	4619      	mov	r1, r3
 8001d58:	4805      	ldr	r0, [pc, #20]	; (8001d70 <HAL_UART_MspInit+0x8c>)
 8001d5a:	f000 fa5b 	bl	8002214 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001d5e:	bf00      	nop
 8001d60:	3728      	adds	r7, #40	; 0x28
 8001d62:	46bd      	mov	sp, r7
 8001d64:	bd80      	pop	{r7, pc}
 8001d66:	bf00      	nop
 8001d68:	40004400 	.word	0x40004400
 8001d6c:	40023800 	.word	0x40023800
 8001d70:	40020000 	.word	0x40020000

08001d74 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001d74:	b480      	push	{r7}
 8001d76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001d78:	e7fe      	b.n	8001d78 <NMI_Handler+0x4>

08001d7a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001d7a:	b480      	push	{r7}
 8001d7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001d7e:	e7fe      	b.n	8001d7e <HardFault_Handler+0x4>

08001d80 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001d80:	b480      	push	{r7}
 8001d82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001d84:	e7fe      	b.n	8001d84 <MemManage_Handler+0x4>

08001d86 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001d86:	b480      	push	{r7}
 8001d88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001d8a:	e7fe      	b.n	8001d8a <BusFault_Handler+0x4>

08001d8c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001d8c:	b480      	push	{r7}
 8001d8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001d90:	e7fe      	b.n	8001d90 <UsageFault_Handler+0x4>

08001d92 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001d92:	b480      	push	{r7}
 8001d94:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001d96:	bf00      	nop
 8001d98:	46bd      	mov	sp, r7
 8001d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d9e:	4770      	bx	lr

08001da0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001da0:	b480      	push	{r7}
 8001da2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001da4:	bf00      	nop
 8001da6:	46bd      	mov	sp, r7
 8001da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dac:	4770      	bx	lr

08001dae <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001dae:	b480      	push	{r7}
 8001db0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001db2:	bf00      	nop
 8001db4:	46bd      	mov	sp, r7
 8001db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dba:	4770      	bx	lr

08001dbc <SDTimer_Handler>:

void SDTimer_Handler(void)
{
 8001dbc:	b480      	push	{r7}
 8001dbe:	af00      	add	r7, sp, #0
  if(Timer1 > 0)
 8001dc0:	4b0e      	ldr	r3, [pc, #56]	; (8001dfc <SDTimer_Handler+0x40>)
 8001dc2:	781b      	ldrb	r3, [r3, #0]
 8001dc4:	b2db      	uxtb	r3, r3
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d006      	beq.n	8001dd8 <SDTimer_Handler+0x1c>
    Timer1--;
 8001dca:	4b0c      	ldr	r3, [pc, #48]	; (8001dfc <SDTimer_Handler+0x40>)
 8001dcc:	781b      	ldrb	r3, [r3, #0]
 8001dce:	b2db      	uxtb	r3, r3
 8001dd0:	3b01      	subs	r3, #1
 8001dd2:	b2da      	uxtb	r2, r3
 8001dd4:	4b09      	ldr	r3, [pc, #36]	; (8001dfc <SDTimer_Handler+0x40>)
 8001dd6:	701a      	strb	r2, [r3, #0]

  if(Timer2 > 0)
 8001dd8:	4b09      	ldr	r3, [pc, #36]	; (8001e00 <SDTimer_Handler+0x44>)
 8001dda:	781b      	ldrb	r3, [r3, #0]
 8001ddc:	b2db      	uxtb	r3, r3
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d006      	beq.n	8001df0 <SDTimer_Handler+0x34>
    Timer2--;
 8001de2:	4b07      	ldr	r3, [pc, #28]	; (8001e00 <SDTimer_Handler+0x44>)
 8001de4:	781b      	ldrb	r3, [r3, #0]
 8001de6:	b2db      	uxtb	r3, r3
 8001de8:	3b01      	subs	r3, #1
 8001dea:	b2da      	uxtb	r2, r3
 8001dec:	4b04      	ldr	r3, [pc, #16]	; (8001e00 <SDTimer_Handler+0x44>)
 8001dee:	701a      	strb	r2, [r3, #0]
}
 8001df0:	bf00      	nop
 8001df2:	46bd      	mov	sp, r7
 8001df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df8:	4770      	bx	lr
 8001dfa:	bf00      	nop
 8001dfc:	20000641 	.word	0x20000641
 8001e00:	20000642 	.word	0x20000642

08001e04 <SysTick_Handler>:



void SysTick_Handler(void)
{
 8001e04:	b580      	push	{r7, lr}
 8001e06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

	  FatFsCnt++;
 8001e08:	4b0a      	ldr	r3, [pc, #40]	; (8001e34 <SysTick_Handler+0x30>)
 8001e0a:	781b      	ldrb	r3, [r3, #0]
 8001e0c:	b2db      	uxtb	r3, r3
 8001e0e:	3301      	adds	r3, #1
 8001e10:	b2da      	uxtb	r2, r3
 8001e12:	4b08      	ldr	r3, [pc, #32]	; (8001e34 <SysTick_Handler+0x30>)
 8001e14:	701a      	strb	r2, [r3, #0]
	  if(FatFsCnt >= 10)
 8001e16:	4b07      	ldr	r3, [pc, #28]	; (8001e34 <SysTick_Handler+0x30>)
 8001e18:	781b      	ldrb	r3, [r3, #0]
 8001e1a:	b2db      	uxtb	r3, r3
 8001e1c:	2b09      	cmp	r3, #9
 8001e1e:	d904      	bls.n	8001e2a <SysTick_Handler+0x26>
	  {
	    FatFsCnt = 0;
 8001e20:	4b04      	ldr	r3, [pc, #16]	; (8001e34 <SysTick_Handler+0x30>)
 8001e22:	2200      	movs	r2, #0
 8001e24:	701a      	strb	r2, [r3, #0]
	    SDTimer_Handler();
 8001e26:	f7ff ffc9 	bl	8001dbc <SDTimer_Handler>
	  }

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001e2a:	f000 f8c9 	bl	8001fc0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001e2e:	bf00      	nop
 8001e30:	bd80      	pop	{r7, pc}
 8001e32:	bf00      	nop
 8001e34:	20000640 	.word	0x20000640

08001e38 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001e38:	b580      	push	{r7, lr}
 8001e3a:	b086      	sub	sp, #24
 8001e3c:	af00      	add	r7, sp, #0
 8001e3e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001e40:	4a14      	ldr	r2, [pc, #80]	; (8001e94 <_sbrk+0x5c>)
 8001e42:	4b15      	ldr	r3, [pc, #84]	; (8001e98 <_sbrk+0x60>)
 8001e44:	1ad3      	subs	r3, r2, r3
 8001e46:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001e48:	697b      	ldr	r3, [r7, #20]
 8001e4a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001e4c:	4b13      	ldr	r3, [pc, #76]	; (8001e9c <_sbrk+0x64>)
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d102      	bne.n	8001e5a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001e54:	4b11      	ldr	r3, [pc, #68]	; (8001e9c <_sbrk+0x64>)
 8001e56:	4a12      	ldr	r2, [pc, #72]	; (8001ea0 <_sbrk+0x68>)
 8001e58:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001e5a:	4b10      	ldr	r3, [pc, #64]	; (8001e9c <_sbrk+0x64>)
 8001e5c:	681a      	ldr	r2, [r3, #0]
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	4413      	add	r3, r2
 8001e62:	693a      	ldr	r2, [r7, #16]
 8001e64:	429a      	cmp	r2, r3
 8001e66:	d207      	bcs.n	8001e78 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001e68:	f005 f824 	bl	8006eb4 <__errno>
 8001e6c:	4603      	mov	r3, r0
 8001e6e:	220c      	movs	r2, #12
 8001e70:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001e72:	f04f 33ff 	mov.w	r3, #4294967295
 8001e76:	e009      	b.n	8001e8c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001e78:	4b08      	ldr	r3, [pc, #32]	; (8001e9c <_sbrk+0x64>)
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001e7e:	4b07      	ldr	r3, [pc, #28]	; (8001e9c <_sbrk+0x64>)
 8001e80:	681a      	ldr	r2, [r3, #0]
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	4413      	add	r3, r2
 8001e86:	4a05      	ldr	r2, [pc, #20]	; (8001e9c <_sbrk+0x64>)
 8001e88:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001e8a:	68fb      	ldr	r3, [r7, #12]
}
 8001e8c:	4618      	mov	r0, r3
 8001e8e:	3718      	adds	r7, #24
 8001e90:	46bd      	mov	sp, r7
 8001e92:	bd80      	pop	{r7, pc}
 8001e94:	20018000 	.word	0x20018000
 8001e98:	00000400 	.word	0x00000400
 8001e9c:	20000644 	.word	0x20000644
 8001ea0:	20000698 	.word	0x20000698

08001ea4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001ea4:	b480      	push	{r7}
 8001ea6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001ea8:	4b06      	ldr	r3, [pc, #24]	; (8001ec4 <SystemInit+0x20>)
 8001eaa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001eae:	4a05      	ldr	r2, [pc, #20]	; (8001ec4 <SystemInit+0x20>)
 8001eb0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001eb4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001eb8:	bf00      	nop
 8001eba:	46bd      	mov	sp, r7
 8001ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec0:	4770      	bx	lr
 8001ec2:	bf00      	nop
 8001ec4:	e000ed00 	.word	0xe000ed00

08001ec8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001ec8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001f00 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001ecc:	480d      	ldr	r0, [pc, #52]	; (8001f04 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001ece:	490e      	ldr	r1, [pc, #56]	; (8001f08 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001ed0:	4a0e      	ldr	r2, [pc, #56]	; (8001f0c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001ed2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001ed4:	e002      	b.n	8001edc <LoopCopyDataInit>

08001ed6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001ed6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001ed8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001eda:	3304      	adds	r3, #4

08001edc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001edc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001ede:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001ee0:	d3f9      	bcc.n	8001ed6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001ee2:	4a0b      	ldr	r2, [pc, #44]	; (8001f10 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001ee4:	4c0b      	ldr	r4, [pc, #44]	; (8001f14 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001ee6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001ee8:	e001      	b.n	8001eee <LoopFillZerobss>

08001eea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001eea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001eec:	3204      	adds	r2, #4

08001eee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001eee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001ef0:	d3fb      	bcc.n	8001eea <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001ef2:	f7ff ffd7 	bl	8001ea4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001ef6:	f004 ffe3 	bl	8006ec0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001efa:	f7ff fb6d 	bl	80015d8 <main>
  bx  lr    
 8001efe:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001f00:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001f04:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001f08:	20000088 	.word	0x20000088
  ldr r2, =_sidata
 8001f0c:	08007c38 	.word	0x08007c38
  ldr r2, =_sbss
 8001f10:	20000088 	.word	0x20000088
  ldr r4, =_ebss
 8001f14:	20000698 	.word	0x20000698

08001f18 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001f18:	e7fe      	b.n	8001f18 <ADC_IRQHandler>
	...

08001f1c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001f1c:	b580      	push	{r7, lr}
 8001f1e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001f20:	4b0e      	ldr	r3, [pc, #56]	; (8001f5c <HAL_Init+0x40>)
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	4a0d      	ldr	r2, [pc, #52]	; (8001f5c <HAL_Init+0x40>)
 8001f26:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001f2a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001f2c:	4b0b      	ldr	r3, [pc, #44]	; (8001f5c <HAL_Init+0x40>)
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	4a0a      	ldr	r2, [pc, #40]	; (8001f5c <HAL_Init+0x40>)
 8001f32:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001f36:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001f38:	4b08      	ldr	r3, [pc, #32]	; (8001f5c <HAL_Init+0x40>)
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	4a07      	ldr	r2, [pc, #28]	; (8001f5c <HAL_Init+0x40>)
 8001f3e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f42:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001f44:	2003      	movs	r0, #3
 8001f46:	f000 f931 	bl	80021ac <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001f4a:	2000      	movs	r0, #0
 8001f4c:	f000 f808 	bl	8001f60 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001f50:	f7ff fe38 	bl	8001bc4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001f54:	2300      	movs	r3, #0
}
 8001f56:	4618      	mov	r0, r3
 8001f58:	bd80      	pop	{r7, pc}
 8001f5a:	bf00      	nop
 8001f5c:	40023c00 	.word	0x40023c00

08001f60 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001f60:	b580      	push	{r7, lr}
 8001f62:	b082      	sub	sp, #8
 8001f64:	af00      	add	r7, sp, #0
 8001f66:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001f68:	4b12      	ldr	r3, [pc, #72]	; (8001fb4 <HAL_InitTick+0x54>)
 8001f6a:	681a      	ldr	r2, [r3, #0]
 8001f6c:	4b12      	ldr	r3, [pc, #72]	; (8001fb8 <HAL_InitTick+0x58>)
 8001f6e:	781b      	ldrb	r3, [r3, #0]
 8001f70:	4619      	mov	r1, r3
 8001f72:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001f76:	fbb3 f3f1 	udiv	r3, r3, r1
 8001f7a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f7e:	4618      	mov	r0, r3
 8001f80:	f000 f93b 	bl	80021fa <HAL_SYSTICK_Config>
 8001f84:	4603      	mov	r3, r0
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d001      	beq.n	8001f8e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001f8a:	2301      	movs	r3, #1
 8001f8c:	e00e      	b.n	8001fac <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	2b0f      	cmp	r3, #15
 8001f92:	d80a      	bhi.n	8001faa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001f94:	2200      	movs	r2, #0
 8001f96:	6879      	ldr	r1, [r7, #4]
 8001f98:	f04f 30ff 	mov.w	r0, #4294967295
 8001f9c:	f000 f911 	bl	80021c2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001fa0:	4a06      	ldr	r2, [pc, #24]	; (8001fbc <HAL_InitTick+0x5c>)
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001fa6:	2300      	movs	r3, #0
 8001fa8:	e000      	b.n	8001fac <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001faa:	2301      	movs	r3, #1
}
 8001fac:	4618      	mov	r0, r3
 8001fae:	3708      	adds	r7, #8
 8001fb0:	46bd      	mov	sp, r7
 8001fb2:	bd80      	pop	{r7, pc}
 8001fb4:	20000004 	.word	0x20000004
 8001fb8:	2000000c 	.word	0x2000000c
 8001fbc:	20000008 	.word	0x20000008

08001fc0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001fc0:	b480      	push	{r7}
 8001fc2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001fc4:	4b06      	ldr	r3, [pc, #24]	; (8001fe0 <HAL_IncTick+0x20>)
 8001fc6:	781b      	ldrb	r3, [r3, #0]
 8001fc8:	461a      	mov	r2, r3
 8001fca:	4b06      	ldr	r3, [pc, #24]	; (8001fe4 <HAL_IncTick+0x24>)
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	4413      	add	r3, r2
 8001fd0:	4a04      	ldr	r2, [pc, #16]	; (8001fe4 <HAL_IncTick+0x24>)
 8001fd2:	6013      	str	r3, [r2, #0]
}
 8001fd4:	bf00      	nop
 8001fd6:	46bd      	mov	sp, r7
 8001fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fdc:	4770      	bx	lr
 8001fde:	bf00      	nop
 8001fe0:	2000000c 	.word	0x2000000c
 8001fe4:	20000648 	.word	0x20000648

08001fe8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001fe8:	b480      	push	{r7}
 8001fea:	af00      	add	r7, sp, #0
  return uwTick;
 8001fec:	4b03      	ldr	r3, [pc, #12]	; (8001ffc <HAL_GetTick+0x14>)
 8001fee:	681b      	ldr	r3, [r3, #0]
}
 8001ff0:	4618      	mov	r0, r3
 8001ff2:	46bd      	mov	sp, r7
 8001ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff8:	4770      	bx	lr
 8001ffa:	bf00      	nop
 8001ffc:	20000648 	.word	0x20000648

08002000 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002000:	b580      	push	{r7, lr}
 8002002:	b084      	sub	sp, #16
 8002004:	af00      	add	r7, sp, #0
 8002006:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002008:	f7ff ffee 	bl	8001fe8 <HAL_GetTick>
 800200c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002012:	68fb      	ldr	r3, [r7, #12]
 8002014:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002018:	d005      	beq.n	8002026 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800201a:	4b0a      	ldr	r3, [pc, #40]	; (8002044 <HAL_Delay+0x44>)
 800201c:	781b      	ldrb	r3, [r3, #0]
 800201e:	461a      	mov	r2, r3
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	4413      	add	r3, r2
 8002024:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002026:	bf00      	nop
 8002028:	f7ff ffde 	bl	8001fe8 <HAL_GetTick>
 800202c:	4602      	mov	r2, r0
 800202e:	68bb      	ldr	r3, [r7, #8]
 8002030:	1ad3      	subs	r3, r2, r3
 8002032:	68fa      	ldr	r2, [r7, #12]
 8002034:	429a      	cmp	r2, r3
 8002036:	d8f7      	bhi.n	8002028 <HAL_Delay+0x28>
  {
  }
}
 8002038:	bf00      	nop
 800203a:	bf00      	nop
 800203c:	3710      	adds	r7, #16
 800203e:	46bd      	mov	sp, r7
 8002040:	bd80      	pop	{r7, pc}
 8002042:	bf00      	nop
 8002044:	2000000c 	.word	0x2000000c

08002048 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002048:	b480      	push	{r7}
 800204a:	b085      	sub	sp, #20
 800204c:	af00      	add	r7, sp, #0
 800204e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	f003 0307 	and.w	r3, r3, #7
 8002056:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002058:	4b0c      	ldr	r3, [pc, #48]	; (800208c <__NVIC_SetPriorityGrouping+0x44>)
 800205a:	68db      	ldr	r3, [r3, #12]
 800205c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800205e:	68ba      	ldr	r2, [r7, #8]
 8002060:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002064:	4013      	ands	r3, r2
 8002066:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800206c:	68bb      	ldr	r3, [r7, #8]
 800206e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002070:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002074:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002078:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800207a:	4a04      	ldr	r2, [pc, #16]	; (800208c <__NVIC_SetPriorityGrouping+0x44>)
 800207c:	68bb      	ldr	r3, [r7, #8]
 800207e:	60d3      	str	r3, [r2, #12]
}
 8002080:	bf00      	nop
 8002082:	3714      	adds	r7, #20
 8002084:	46bd      	mov	sp, r7
 8002086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800208a:	4770      	bx	lr
 800208c:	e000ed00 	.word	0xe000ed00

08002090 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002090:	b480      	push	{r7}
 8002092:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002094:	4b04      	ldr	r3, [pc, #16]	; (80020a8 <__NVIC_GetPriorityGrouping+0x18>)
 8002096:	68db      	ldr	r3, [r3, #12]
 8002098:	0a1b      	lsrs	r3, r3, #8
 800209a:	f003 0307 	and.w	r3, r3, #7
}
 800209e:	4618      	mov	r0, r3
 80020a0:	46bd      	mov	sp, r7
 80020a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a6:	4770      	bx	lr
 80020a8:	e000ed00 	.word	0xe000ed00

080020ac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80020ac:	b480      	push	{r7}
 80020ae:	b083      	sub	sp, #12
 80020b0:	af00      	add	r7, sp, #0
 80020b2:	4603      	mov	r3, r0
 80020b4:	6039      	str	r1, [r7, #0]
 80020b6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80020b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020bc:	2b00      	cmp	r3, #0
 80020be:	db0a      	blt.n	80020d6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80020c0:	683b      	ldr	r3, [r7, #0]
 80020c2:	b2da      	uxtb	r2, r3
 80020c4:	490c      	ldr	r1, [pc, #48]	; (80020f8 <__NVIC_SetPriority+0x4c>)
 80020c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020ca:	0112      	lsls	r2, r2, #4
 80020cc:	b2d2      	uxtb	r2, r2
 80020ce:	440b      	add	r3, r1
 80020d0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80020d4:	e00a      	b.n	80020ec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80020d6:	683b      	ldr	r3, [r7, #0]
 80020d8:	b2da      	uxtb	r2, r3
 80020da:	4908      	ldr	r1, [pc, #32]	; (80020fc <__NVIC_SetPriority+0x50>)
 80020dc:	79fb      	ldrb	r3, [r7, #7]
 80020de:	f003 030f 	and.w	r3, r3, #15
 80020e2:	3b04      	subs	r3, #4
 80020e4:	0112      	lsls	r2, r2, #4
 80020e6:	b2d2      	uxtb	r2, r2
 80020e8:	440b      	add	r3, r1
 80020ea:	761a      	strb	r2, [r3, #24]
}
 80020ec:	bf00      	nop
 80020ee:	370c      	adds	r7, #12
 80020f0:	46bd      	mov	sp, r7
 80020f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f6:	4770      	bx	lr
 80020f8:	e000e100 	.word	0xe000e100
 80020fc:	e000ed00 	.word	0xe000ed00

08002100 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002100:	b480      	push	{r7}
 8002102:	b089      	sub	sp, #36	; 0x24
 8002104:	af00      	add	r7, sp, #0
 8002106:	60f8      	str	r0, [r7, #12]
 8002108:	60b9      	str	r1, [r7, #8]
 800210a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	f003 0307 	and.w	r3, r3, #7
 8002112:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002114:	69fb      	ldr	r3, [r7, #28]
 8002116:	f1c3 0307 	rsb	r3, r3, #7
 800211a:	2b04      	cmp	r3, #4
 800211c:	bf28      	it	cs
 800211e:	2304      	movcs	r3, #4
 8002120:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002122:	69fb      	ldr	r3, [r7, #28]
 8002124:	3304      	adds	r3, #4
 8002126:	2b06      	cmp	r3, #6
 8002128:	d902      	bls.n	8002130 <NVIC_EncodePriority+0x30>
 800212a:	69fb      	ldr	r3, [r7, #28]
 800212c:	3b03      	subs	r3, #3
 800212e:	e000      	b.n	8002132 <NVIC_EncodePriority+0x32>
 8002130:	2300      	movs	r3, #0
 8002132:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002134:	f04f 32ff 	mov.w	r2, #4294967295
 8002138:	69bb      	ldr	r3, [r7, #24]
 800213a:	fa02 f303 	lsl.w	r3, r2, r3
 800213e:	43da      	mvns	r2, r3
 8002140:	68bb      	ldr	r3, [r7, #8]
 8002142:	401a      	ands	r2, r3
 8002144:	697b      	ldr	r3, [r7, #20]
 8002146:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002148:	f04f 31ff 	mov.w	r1, #4294967295
 800214c:	697b      	ldr	r3, [r7, #20]
 800214e:	fa01 f303 	lsl.w	r3, r1, r3
 8002152:	43d9      	mvns	r1, r3
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002158:	4313      	orrs	r3, r2
         );
}
 800215a:	4618      	mov	r0, r3
 800215c:	3724      	adds	r7, #36	; 0x24
 800215e:	46bd      	mov	sp, r7
 8002160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002164:	4770      	bx	lr
	...

08002168 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002168:	b580      	push	{r7, lr}
 800216a:	b082      	sub	sp, #8
 800216c:	af00      	add	r7, sp, #0
 800216e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	3b01      	subs	r3, #1
 8002174:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002178:	d301      	bcc.n	800217e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800217a:	2301      	movs	r3, #1
 800217c:	e00f      	b.n	800219e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800217e:	4a0a      	ldr	r2, [pc, #40]	; (80021a8 <SysTick_Config+0x40>)
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	3b01      	subs	r3, #1
 8002184:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002186:	210f      	movs	r1, #15
 8002188:	f04f 30ff 	mov.w	r0, #4294967295
 800218c:	f7ff ff8e 	bl	80020ac <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002190:	4b05      	ldr	r3, [pc, #20]	; (80021a8 <SysTick_Config+0x40>)
 8002192:	2200      	movs	r2, #0
 8002194:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002196:	4b04      	ldr	r3, [pc, #16]	; (80021a8 <SysTick_Config+0x40>)
 8002198:	2207      	movs	r2, #7
 800219a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800219c:	2300      	movs	r3, #0
}
 800219e:	4618      	mov	r0, r3
 80021a0:	3708      	adds	r7, #8
 80021a2:	46bd      	mov	sp, r7
 80021a4:	bd80      	pop	{r7, pc}
 80021a6:	bf00      	nop
 80021a8:	e000e010 	.word	0xe000e010

080021ac <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80021ac:	b580      	push	{r7, lr}
 80021ae:	b082      	sub	sp, #8
 80021b0:	af00      	add	r7, sp, #0
 80021b2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80021b4:	6878      	ldr	r0, [r7, #4]
 80021b6:	f7ff ff47 	bl	8002048 <__NVIC_SetPriorityGrouping>
}
 80021ba:	bf00      	nop
 80021bc:	3708      	adds	r7, #8
 80021be:	46bd      	mov	sp, r7
 80021c0:	bd80      	pop	{r7, pc}

080021c2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80021c2:	b580      	push	{r7, lr}
 80021c4:	b086      	sub	sp, #24
 80021c6:	af00      	add	r7, sp, #0
 80021c8:	4603      	mov	r3, r0
 80021ca:	60b9      	str	r1, [r7, #8]
 80021cc:	607a      	str	r2, [r7, #4]
 80021ce:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80021d0:	2300      	movs	r3, #0
 80021d2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80021d4:	f7ff ff5c 	bl	8002090 <__NVIC_GetPriorityGrouping>
 80021d8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80021da:	687a      	ldr	r2, [r7, #4]
 80021dc:	68b9      	ldr	r1, [r7, #8]
 80021de:	6978      	ldr	r0, [r7, #20]
 80021e0:	f7ff ff8e 	bl	8002100 <NVIC_EncodePriority>
 80021e4:	4602      	mov	r2, r0
 80021e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80021ea:	4611      	mov	r1, r2
 80021ec:	4618      	mov	r0, r3
 80021ee:	f7ff ff5d 	bl	80020ac <__NVIC_SetPriority>
}
 80021f2:	bf00      	nop
 80021f4:	3718      	adds	r7, #24
 80021f6:	46bd      	mov	sp, r7
 80021f8:	bd80      	pop	{r7, pc}

080021fa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80021fa:	b580      	push	{r7, lr}
 80021fc:	b082      	sub	sp, #8
 80021fe:	af00      	add	r7, sp, #0
 8002200:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002202:	6878      	ldr	r0, [r7, #4]
 8002204:	f7ff ffb0 	bl	8002168 <SysTick_Config>
 8002208:	4603      	mov	r3, r0
}
 800220a:	4618      	mov	r0, r3
 800220c:	3708      	adds	r7, #8
 800220e:	46bd      	mov	sp, r7
 8002210:	bd80      	pop	{r7, pc}
	...

08002214 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002214:	b480      	push	{r7}
 8002216:	b089      	sub	sp, #36	; 0x24
 8002218:	af00      	add	r7, sp, #0
 800221a:	6078      	str	r0, [r7, #4]
 800221c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800221e:	2300      	movs	r3, #0
 8002220:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002222:	2300      	movs	r3, #0
 8002224:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002226:	2300      	movs	r3, #0
 8002228:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800222a:	2300      	movs	r3, #0
 800222c:	61fb      	str	r3, [r7, #28]
 800222e:	e159      	b.n	80024e4 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002230:	2201      	movs	r2, #1
 8002232:	69fb      	ldr	r3, [r7, #28]
 8002234:	fa02 f303 	lsl.w	r3, r2, r3
 8002238:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800223a:	683b      	ldr	r3, [r7, #0]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	697a      	ldr	r2, [r7, #20]
 8002240:	4013      	ands	r3, r2
 8002242:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002244:	693a      	ldr	r2, [r7, #16]
 8002246:	697b      	ldr	r3, [r7, #20]
 8002248:	429a      	cmp	r2, r3
 800224a:	f040 8148 	bne.w	80024de <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800224e:	683b      	ldr	r3, [r7, #0]
 8002250:	685b      	ldr	r3, [r3, #4]
 8002252:	f003 0303 	and.w	r3, r3, #3
 8002256:	2b01      	cmp	r3, #1
 8002258:	d005      	beq.n	8002266 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800225a:	683b      	ldr	r3, [r7, #0]
 800225c:	685b      	ldr	r3, [r3, #4]
 800225e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002262:	2b02      	cmp	r3, #2
 8002264:	d130      	bne.n	80022c8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	689b      	ldr	r3, [r3, #8]
 800226a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800226c:	69fb      	ldr	r3, [r7, #28]
 800226e:	005b      	lsls	r3, r3, #1
 8002270:	2203      	movs	r2, #3
 8002272:	fa02 f303 	lsl.w	r3, r2, r3
 8002276:	43db      	mvns	r3, r3
 8002278:	69ba      	ldr	r2, [r7, #24]
 800227a:	4013      	ands	r3, r2
 800227c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800227e:	683b      	ldr	r3, [r7, #0]
 8002280:	68da      	ldr	r2, [r3, #12]
 8002282:	69fb      	ldr	r3, [r7, #28]
 8002284:	005b      	lsls	r3, r3, #1
 8002286:	fa02 f303 	lsl.w	r3, r2, r3
 800228a:	69ba      	ldr	r2, [r7, #24]
 800228c:	4313      	orrs	r3, r2
 800228e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	69ba      	ldr	r2, [r7, #24]
 8002294:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	685b      	ldr	r3, [r3, #4]
 800229a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800229c:	2201      	movs	r2, #1
 800229e:	69fb      	ldr	r3, [r7, #28]
 80022a0:	fa02 f303 	lsl.w	r3, r2, r3
 80022a4:	43db      	mvns	r3, r3
 80022a6:	69ba      	ldr	r2, [r7, #24]
 80022a8:	4013      	ands	r3, r2
 80022aa:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80022ac:	683b      	ldr	r3, [r7, #0]
 80022ae:	685b      	ldr	r3, [r3, #4]
 80022b0:	091b      	lsrs	r3, r3, #4
 80022b2:	f003 0201 	and.w	r2, r3, #1
 80022b6:	69fb      	ldr	r3, [r7, #28]
 80022b8:	fa02 f303 	lsl.w	r3, r2, r3
 80022bc:	69ba      	ldr	r2, [r7, #24]
 80022be:	4313      	orrs	r3, r2
 80022c0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	69ba      	ldr	r2, [r7, #24]
 80022c6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80022c8:	683b      	ldr	r3, [r7, #0]
 80022ca:	685b      	ldr	r3, [r3, #4]
 80022cc:	f003 0303 	and.w	r3, r3, #3
 80022d0:	2b03      	cmp	r3, #3
 80022d2:	d017      	beq.n	8002304 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	68db      	ldr	r3, [r3, #12]
 80022d8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80022da:	69fb      	ldr	r3, [r7, #28]
 80022dc:	005b      	lsls	r3, r3, #1
 80022de:	2203      	movs	r2, #3
 80022e0:	fa02 f303 	lsl.w	r3, r2, r3
 80022e4:	43db      	mvns	r3, r3
 80022e6:	69ba      	ldr	r2, [r7, #24]
 80022e8:	4013      	ands	r3, r2
 80022ea:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80022ec:	683b      	ldr	r3, [r7, #0]
 80022ee:	689a      	ldr	r2, [r3, #8]
 80022f0:	69fb      	ldr	r3, [r7, #28]
 80022f2:	005b      	lsls	r3, r3, #1
 80022f4:	fa02 f303 	lsl.w	r3, r2, r3
 80022f8:	69ba      	ldr	r2, [r7, #24]
 80022fa:	4313      	orrs	r3, r2
 80022fc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	69ba      	ldr	r2, [r7, #24]
 8002302:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002304:	683b      	ldr	r3, [r7, #0]
 8002306:	685b      	ldr	r3, [r3, #4]
 8002308:	f003 0303 	and.w	r3, r3, #3
 800230c:	2b02      	cmp	r3, #2
 800230e:	d123      	bne.n	8002358 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002310:	69fb      	ldr	r3, [r7, #28]
 8002312:	08da      	lsrs	r2, r3, #3
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	3208      	adds	r2, #8
 8002318:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800231c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800231e:	69fb      	ldr	r3, [r7, #28]
 8002320:	f003 0307 	and.w	r3, r3, #7
 8002324:	009b      	lsls	r3, r3, #2
 8002326:	220f      	movs	r2, #15
 8002328:	fa02 f303 	lsl.w	r3, r2, r3
 800232c:	43db      	mvns	r3, r3
 800232e:	69ba      	ldr	r2, [r7, #24]
 8002330:	4013      	ands	r3, r2
 8002332:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002334:	683b      	ldr	r3, [r7, #0]
 8002336:	691a      	ldr	r2, [r3, #16]
 8002338:	69fb      	ldr	r3, [r7, #28]
 800233a:	f003 0307 	and.w	r3, r3, #7
 800233e:	009b      	lsls	r3, r3, #2
 8002340:	fa02 f303 	lsl.w	r3, r2, r3
 8002344:	69ba      	ldr	r2, [r7, #24]
 8002346:	4313      	orrs	r3, r2
 8002348:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800234a:	69fb      	ldr	r3, [r7, #28]
 800234c:	08da      	lsrs	r2, r3, #3
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	3208      	adds	r2, #8
 8002352:	69b9      	ldr	r1, [r7, #24]
 8002354:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800235e:	69fb      	ldr	r3, [r7, #28]
 8002360:	005b      	lsls	r3, r3, #1
 8002362:	2203      	movs	r2, #3
 8002364:	fa02 f303 	lsl.w	r3, r2, r3
 8002368:	43db      	mvns	r3, r3
 800236a:	69ba      	ldr	r2, [r7, #24]
 800236c:	4013      	ands	r3, r2
 800236e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002370:	683b      	ldr	r3, [r7, #0]
 8002372:	685b      	ldr	r3, [r3, #4]
 8002374:	f003 0203 	and.w	r2, r3, #3
 8002378:	69fb      	ldr	r3, [r7, #28]
 800237a:	005b      	lsls	r3, r3, #1
 800237c:	fa02 f303 	lsl.w	r3, r2, r3
 8002380:	69ba      	ldr	r2, [r7, #24]
 8002382:	4313      	orrs	r3, r2
 8002384:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	69ba      	ldr	r2, [r7, #24]
 800238a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800238c:	683b      	ldr	r3, [r7, #0]
 800238e:	685b      	ldr	r3, [r3, #4]
 8002390:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002394:	2b00      	cmp	r3, #0
 8002396:	f000 80a2 	beq.w	80024de <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800239a:	2300      	movs	r3, #0
 800239c:	60fb      	str	r3, [r7, #12]
 800239e:	4b57      	ldr	r3, [pc, #348]	; (80024fc <HAL_GPIO_Init+0x2e8>)
 80023a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023a2:	4a56      	ldr	r2, [pc, #344]	; (80024fc <HAL_GPIO_Init+0x2e8>)
 80023a4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80023a8:	6453      	str	r3, [r2, #68]	; 0x44
 80023aa:	4b54      	ldr	r3, [pc, #336]	; (80024fc <HAL_GPIO_Init+0x2e8>)
 80023ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023ae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80023b2:	60fb      	str	r3, [r7, #12]
 80023b4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80023b6:	4a52      	ldr	r2, [pc, #328]	; (8002500 <HAL_GPIO_Init+0x2ec>)
 80023b8:	69fb      	ldr	r3, [r7, #28]
 80023ba:	089b      	lsrs	r3, r3, #2
 80023bc:	3302      	adds	r3, #2
 80023be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80023c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80023c4:	69fb      	ldr	r3, [r7, #28]
 80023c6:	f003 0303 	and.w	r3, r3, #3
 80023ca:	009b      	lsls	r3, r3, #2
 80023cc:	220f      	movs	r2, #15
 80023ce:	fa02 f303 	lsl.w	r3, r2, r3
 80023d2:	43db      	mvns	r3, r3
 80023d4:	69ba      	ldr	r2, [r7, #24]
 80023d6:	4013      	ands	r3, r2
 80023d8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	4a49      	ldr	r2, [pc, #292]	; (8002504 <HAL_GPIO_Init+0x2f0>)
 80023de:	4293      	cmp	r3, r2
 80023e0:	d019      	beq.n	8002416 <HAL_GPIO_Init+0x202>
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	4a48      	ldr	r2, [pc, #288]	; (8002508 <HAL_GPIO_Init+0x2f4>)
 80023e6:	4293      	cmp	r3, r2
 80023e8:	d013      	beq.n	8002412 <HAL_GPIO_Init+0x1fe>
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	4a47      	ldr	r2, [pc, #284]	; (800250c <HAL_GPIO_Init+0x2f8>)
 80023ee:	4293      	cmp	r3, r2
 80023f0:	d00d      	beq.n	800240e <HAL_GPIO_Init+0x1fa>
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	4a46      	ldr	r2, [pc, #280]	; (8002510 <HAL_GPIO_Init+0x2fc>)
 80023f6:	4293      	cmp	r3, r2
 80023f8:	d007      	beq.n	800240a <HAL_GPIO_Init+0x1f6>
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	4a45      	ldr	r2, [pc, #276]	; (8002514 <HAL_GPIO_Init+0x300>)
 80023fe:	4293      	cmp	r3, r2
 8002400:	d101      	bne.n	8002406 <HAL_GPIO_Init+0x1f2>
 8002402:	2304      	movs	r3, #4
 8002404:	e008      	b.n	8002418 <HAL_GPIO_Init+0x204>
 8002406:	2307      	movs	r3, #7
 8002408:	e006      	b.n	8002418 <HAL_GPIO_Init+0x204>
 800240a:	2303      	movs	r3, #3
 800240c:	e004      	b.n	8002418 <HAL_GPIO_Init+0x204>
 800240e:	2302      	movs	r3, #2
 8002410:	e002      	b.n	8002418 <HAL_GPIO_Init+0x204>
 8002412:	2301      	movs	r3, #1
 8002414:	e000      	b.n	8002418 <HAL_GPIO_Init+0x204>
 8002416:	2300      	movs	r3, #0
 8002418:	69fa      	ldr	r2, [r7, #28]
 800241a:	f002 0203 	and.w	r2, r2, #3
 800241e:	0092      	lsls	r2, r2, #2
 8002420:	4093      	lsls	r3, r2
 8002422:	69ba      	ldr	r2, [r7, #24]
 8002424:	4313      	orrs	r3, r2
 8002426:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002428:	4935      	ldr	r1, [pc, #212]	; (8002500 <HAL_GPIO_Init+0x2ec>)
 800242a:	69fb      	ldr	r3, [r7, #28]
 800242c:	089b      	lsrs	r3, r3, #2
 800242e:	3302      	adds	r3, #2
 8002430:	69ba      	ldr	r2, [r7, #24]
 8002432:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002436:	4b38      	ldr	r3, [pc, #224]	; (8002518 <HAL_GPIO_Init+0x304>)
 8002438:	689b      	ldr	r3, [r3, #8]
 800243a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800243c:	693b      	ldr	r3, [r7, #16]
 800243e:	43db      	mvns	r3, r3
 8002440:	69ba      	ldr	r2, [r7, #24]
 8002442:	4013      	ands	r3, r2
 8002444:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002446:	683b      	ldr	r3, [r7, #0]
 8002448:	685b      	ldr	r3, [r3, #4]
 800244a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800244e:	2b00      	cmp	r3, #0
 8002450:	d003      	beq.n	800245a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002452:	69ba      	ldr	r2, [r7, #24]
 8002454:	693b      	ldr	r3, [r7, #16]
 8002456:	4313      	orrs	r3, r2
 8002458:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800245a:	4a2f      	ldr	r2, [pc, #188]	; (8002518 <HAL_GPIO_Init+0x304>)
 800245c:	69bb      	ldr	r3, [r7, #24]
 800245e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002460:	4b2d      	ldr	r3, [pc, #180]	; (8002518 <HAL_GPIO_Init+0x304>)
 8002462:	68db      	ldr	r3, [r3, #12]
 8002464:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002466:	693b      	ldr	r3, [r7, #16]
 8002468:	43db      	mvns	r3, r3
 800246a:	69ba      	ldr	r2, [r7, #24]
 800246c:	4013      	ands	r3, r2
 800246e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002470:	683b      	ldr	r3, [r7, #0]
 8002472:	685b      	ldr	r3, [r3, #4]
 8002474:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002478:	2b00      	cmp	r3, #0
 800247a:	d003      	beq.n	8002484 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 800247c:	69ba      	ldr	r2, [r7, #24]
 800247e:	693b      	ldr	r3, [r7, #16]
 8002480:	4313      	orrs	r3, r2
 8002482:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002484:	4a24      	ldr	r2, [pc, #144]	; (8002518 <HAL_GPIO_Init+0x304>)
 8002486:	69bb      	ldr	r3, [r7, #24]
 8002488:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800248a:	4b23      	ldr	r3, [pc, #140]	; (8002518 <HAL_GPIO_Init+0x304>)
 800248c:	685b      	ldr	r3, [r3, #4]
 800248e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002490:	693b      	ldr	r3, [r7, #16]
 8002492:	43db      	mvns	r3, r3
 8002494:	69ba      	ldr	r2, [r7, #24]
 8002496:	4013      	ands	r3, r2
 8002498:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800249a:	683b      	ldr	r3, [r7, #0]
 800249c:	685b      	ldr	r3, [r3, #4]
 800249e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d003      	beq.n	80024ae <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80024a6:	69ba      	ldr	r2, [r7, #24]
 80024a8:	693b      	ldr	r3, [r7, #16]
 80024aa:	4313      	orrs	r3, r2
 80024ac:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80024ae:	4a1a      	ldr	r2, [pc, #104]	; (8002518 <HAL_GPIO_Init+0x304>)
 80024b0:	69bb      	ldr	r3, [r7, #24]
 80024b2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80024b4:	4b18      	ldr	r3, [pc, #96]	; (8002518 <HAL_GPIO_Init+0x304>)
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80024ba:	693b      	ldr	r3, [r7, #16]
 80024bc:	43db      	mvns	r3, r3
 80024be:	69ba      	ldr	r2, [r7, #24]
 80024c0:	4013      	ands	r3, r2
 80024c2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80024c4:	683b      	ldr	r3, [r7, #0]
 80024c6:	685b      	ldr	r3, [r3, #4]
 80024c8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d003      	beq.n	80024d8 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80024d0:	69ba      	ldr	r2, [r7, #24]
 80024d2:	693b      	ldr	r3, [r7, #16]
 80024d4:	4313      	orrs	r3, r2
 80024d6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80024d8:	4a0f      	ldr	r2, [pc, #60]	; (8002518 <HAL_GPIO_Init+0x304>)
 80024da:	69bb      	ldr	r3, [r7, #24]
 80024dc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80024de:	69fb      	ldr	r3, [r7, #28]
 80024e0:	3301      	adds	r3, #1
 80024e2:	61fb      	str	r3, [r7, #28]
 80024e4:	69fb      	ldr	r3, [r7, #28]
 80024e6:	2b0f      	cmp	r3, #15
 80024e8:	f67f aea2 	bls.w	8002230 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80024ec:	bf00      	nop
 80024ee:	bf00      	nop
 80024f0:	3724      	adds	r7, #36	; 0x24
 80024f2:	46bd      	mov	sp, r7
 80024f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f8:	4770      	bx	lr
 80024fa:	bf00      	nop
 80024fc:	40023800 	.word	0x40023800
 8002500:	40013800 	.word	0x40013800
 8002504:	40020000 	.word	0x40020000
 8002508:	40020400 	.word	0x40020400
 800250c:	40020800 	.word	0x40020800
 8002510:	40020c00 	.word	0x40020c00
 8002514:	40021000 	.word	0x40021000
 8002518:	40013c00 	.word	0x40013c00

0800251c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800251c:	b480      	push	{r7}
 800251e:	b083      	sub	sp, #12
 8002520:	af00      	add	r7, sp, #0
 8002522:	6078      	str	r0, [r7, #4]
 8002524:	460b      	mov	r3, r1
 8002526:	807b      	strh	r3, [r7, #2]
 8002528:	4613      	mov	r3, r2
 800252a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800252c:	787b      	ldrb	r3, [r7, #1]
 800252e:	2b00      	cmp	r3, #0
 8002530:	d003      	beq.n	800253a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002532:	887a      	ldrh	r2, [r7, #2]
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002538:	e003      	b.n	8002542 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800253a:	887b      	ldrh	r3, [r7, #2]
 800253c:	041a      	lsls	r2, r3, #16
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	619a      	str	r2, [r3, #24]
}
 8002542:	bf00      	nop
 8002544:	370c      	adds	r7, #12
 8002546:	46bd      	mov	sp, r7
 8002548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800254c:	4770      	bx	lr
	...

08002550 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002550:	b580      	push	{r7, lr}
 8002552:	b086      	sub	sp, #24
 8002554:	af00      	add	r7, sp, #0
 8002556:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	2b00      	cmp	r3, #0
 800255c:	d101      	bne.n	8002562 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800255e:	2301      	movs	r3, #1
 8002560:	e267      	b.n	8002a32 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	f003 0301 	and.w	r3, r3, #1
 800256a:	2b00      	cmp	r3, #0
 800256c:	d075      	beq.n	800265a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800256e:	4b88      	ldr	r3, [pc, #544]	; (8002790 <HAL_RCC_OscConfig+0x240>)
 8002570:	689b      	ldr	r3, [r3, #8]
 8002572:	f003 030c 	and.w	r3, r3, #12
 8002576:	2b04      	cmp	r3, #4
 8002578:	d00c      	beq.n	8002594 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800257a:	4b85      	ldr	r3, [pc, #532]	; (8002790 <HAL_RCC_OscConfig+0x240>)
 800257c:	689b      	ldr	r3, [r3, #8]
 800257e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002582:	2b08      	cmp	r3, #8
 8002584:	d112      	bne.n	80025ac <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002586:	4b82      	ldr	r3, [pc, #520]	; (8002790 <HAL_RCC_OscConfig+0x240>)
 8002588:	685b      	ldr	r3, [r3, #4]
 800258a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800258e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002592:	d10b      	bne.n	80025ac <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002594:	4b7e      	ldr	r3, [pc, #504]	; (8002790 <HAL_RCC_OscConfig+0x240>)
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800259c:	2b00      	cmp	r3, #0
 800259e:	d05b      	beq.n	8002658 <HAL_RCC_OscConfig+0x108>
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	685b      	ldr	r3, [r3, #4]
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d157      	bne.n	8002658 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80025a8:	2301      	movs	r3, #1
 80025aa:	e242      	b.n	8002a32 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	685b      	ldr	r3, [r3, #4]
 80025b0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80025b4:	d106      	bne.n	80025c4 <HAL_RCC_OscConfig+0x74>
 80025b6:	4b76      	ldr	r3, [pc, #472]	; (8002790 <HAL_RCC_OscConfig+0x240>)
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	4a75      	ldr	r2, [pc, #468]	; (8002790 <HAL_RCC_OscConfig+0x240>)
 80025bc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80025c0:	6013      	str	r3, [r2, #0]
 80025c2:	e01d      	b.n	8002600 <HAL_RCC_OscConfig+0xb0>
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	685b      	ldr	r3, [r3, #4]
 80025c8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80025cc:	d10c      	bne.n	80025e8 <HAL_RCC_OscConfig+0x98>
 80025ce:	4b70      	ldr	r3, [pc, #448]	; (8002790 <HAL_RCC_OscConfig+0x240>)
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	4a6f      	ldr	r2, [pc, #444]	; (8002790 <HAL_RCC_OscConfig+0x240>)
 80025d4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80025d8:	6013      	str	r3, [r2, #0]
 80025da:	4b6d      	ldr	r3, [pc, #436]	; (8002790 <HAL_RCC_OscConfig+0x240>)
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	4a6c      	ldr	r2, [pc, #432]	; (8002790 <HAL_RCC_OscConfig+0x240>)
 80025e0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80025e4:	6013      	str	r3, [r2, #0]
 80025e6:	e00b      	b.n	8002600 <HAL_RCC_OscConfig+0xb0>
 80025e8:	4b69      	ldr	r3, [pc, #420]	; (8002790 <HAL_RCC_OscConfig+0x240>)
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	4a68      	ldr	r2, [pc, #416]	; (8002790 <HAL_RCC_OscConfig+0x240>)
 80025ee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80025f2:	6013      	str	r3, [r2, #0]
 80025f4:	4b66      	ldr	r3, [pc, #408]	; (8002790 <HAL_RCC_OscConfig+0x240>)
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	4a65      	ldr	r2, [pc, #404]	; (8002790 <HAL_RCC_OscConfig+0x240>)
 80025fa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80025fe:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	685b      	ldr	r3, [r3, #4]
 8002604:	2b00      	cmp	r3, #0
 8002606:	d013      	beq.n	8002630 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002608:	f7ff fcee 	bl	8001fe8 <HAL_GetTick>
 800260c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800260e:	e008      	b.n	8002622 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002610:	f7ff fcea 	bl	8001fe8 <HAL_GetTick>
 8002614:	4602      	mov	r2, r0
 8002616:	693b      	ldr	r3, [r7, #16]
 8002618:	1ad3      	subs	r3, r2, r3
 800261a:	2b64      	cmp	r3, #100	; 0x64
 800261c:	d901      	bls.n	8002622 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800261e:	2303      	movs	r3, #3
 8002620:	e207      	b.n	8002a32 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002622:	4b5b      	ldr	r3, [pc, #364]	; (8002790 <HAL_RCC_OscConfig+0x240>)
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800262a:	2b00      	cmp	r3, #0
 800262c:	d0f0      	beq.n	8002610 <HAL_RCC_OscConfig+0xc0>
 800262e:	e014      	b.n	800265a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002630:	f7ff fcda 	bl	8001fe8 <HAL_GetTick>
 8002634:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002636:	e008      	b.n	800264a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002638:	f7ff fcd6 	bl	8001fe8 <HAL_GetTick>
 800263c:	4602      	mov	r2, r0
 800263e:	693b      	ldr	r3, [r7, #16]
 8002640:	1ad3      	subs	r3, r2, r3
 8002642:	2b64      	cmp	r3, #100	; 0x64
 8002644:	d901      	bls.n	800264a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002646:	2303      	movs	r3, #3
 8002648:	e1f3      	b.n	8002a32 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800264a:	4b51      	ldr	r3, [pc, #324]	; (8002790 <HAL_RCC_OscConfig+0x240>)
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002652:	2b00      	cmp	r3, #0
 8002654:	d1f0      	bne.n	8002638 <HAL_RCC_OscConfig+0xe8>
 8002656:	e000      	b.n	800265a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002658:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	f003 0302 	and.w	r3, r3, #2
 8002662:	2b00      	cmp	r3, #0
 8002664:	d063      	beq.n	800272e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002666:	4b4a      	ldr	r3, [pc, #296]	; (8002790 <HAL_RCC_OscConfig+0x240>)
 8002668:	689b      	ldr	r3, [r3, #8]
 800266a:	f003 030c 	and.w	r3, r3, #12
 800266e:	2b00      	cmp	r3, #0
 8002670:	d00b      	beq.n	800268a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002672:	4b47      	ldr	r3, [pc, #284]	; (8002790 <HAL_RCC_OscConfig+0x240>)
 8002674:	689b      	ldr	r3, [r3, #8]
 8002676:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800267a:	2b08      	cmp	r3, #8
 800267c:	d11c      	bne.n	80026b8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800267e:	4b44      	ldr	r3, [pc, #272]	; (8002790 <HAL_RCC_OscConfig+0x240>)
 8002680:	685b      	ldr	r3, [r3, #4]
 8002682:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002686:	2b00      	cmp	r3, #0
 8002688:	d116      	bne.n	80026b8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800268a:	4b41      	ldr	r3, [pc, #260]	; (8002790 <HAL_RCC_OscConfig+0x240>)
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	f003 0302 	and.w	r3, r3, #2
 8002692:	2b00      	cmp	r3, #0
 8002694:	d005      	beq.n	80026a2 <HAL_RCC_OscConfig+0x152>
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	68db      	ldr	r3, [r3, #12]
 800269a:	2b01      	cmp	r3, #1
 800269c:	d001      	beq.n	80026a2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800269e:	2301      	movs	r3, #1
 80026a0:	e1c7      	b.n	8002a32 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80026a2:	4b3b      	ldr	r3, [pc, #236]	; (8002790 <HAL_RCC_OscConfig+0x240>)
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	691b      	ldr	r3, [r3, #16]
 80026ae:	00db      	lsls	r3, r3, #3
 80026b0:	4937      	ldr	r1, [pc, #220]	; (8002790 <HAL_RCC_OscConfig+0x240>)
 80026b2:	4313      	orrs	r3, r2
 80026b4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80026b6:	e03a      	b.n	800272e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	68db      	ldr	r3, [r3, #12]
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d020      	beq.n	8002702 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80026c0:	4b34      	ldr	r3, [pc, #208]	; (8002794 <HAL_RCC_OscConfig+0x244>)
 80026c2:	2201      	movs	r2, #1
 80026c4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026c6:	f7ff fc8f 	bl	8001fe8 <HAL_GetTick>
 80026ca:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80026cc:	e008      	b.n	80026e0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80026ce:	f7ff fc8b 	bl	8001fe8 <HAL_GetTick>
 80026d2:	4602      	mov	r2, r0
 80026d4:	693b      	ldr	r3, [r7, #16]
 80026d6:	1ad3      	subs	r3, r2, r3
 80026d8:	2b02      	cmp	r3, #2
 80026da:	d901      	bls.n	80026e0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80026dc:	2303      	movs	r3, #3
 80026de:	e1a8      	b.n	8002a32 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80026e0:	4b2b      	ldr	r3, [pc, #172]	; (8002790 <HAL_RCC_OscConfig+0x240>)
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	f003 0302 	and.w	r3, r3, #2
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d0f0      	beq.n	80026ce <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80026ec:	4b28      	ldr	r3, [pc, #160]	; (8002790 <HAL_RCC_OscConfig+0x240>)
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	691b      	ldr	r3, [r3, #16]
 80026f8:	00db      	lsls	r3, r3, #3
 80026fa:	4925      	ldr	r1, [pc, #148]	; (8002790 <HAL_RCC_OscConfig+0x240>)
 80026fc:	4313      	orrs	r3, r2
 80026fe:	600b      	str	r3, [r1, #0]
 8002700:	e015      	b.n	800272e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002702:	4b24      	ldr	r3, [pc, #144]	; (8002794 <HAL_RCC_OscConfig+0x244>)
 8002704:	2200      	movs	r2, #0
 8002706:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002708:	f7ff fc6e 	bl	8001fe8 <HAL_GetTick>
 800270c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800270e:	e008      	b.n	8002722 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002710:	f7ff fc6a 	bl	8001fe8 <HAL_GetTick>
 8002714:	4602      	mov	r2, r0
 8002716:	693b      	ldr	r3, [r7, #16]
 8002718:	1ad3      	subs	r3, r2, r3
 800271a:	2b02      	cmp	r3, #2
 800271c:	d901      	bls.n	8002722 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800271e:	2303      	movs	r3, #3
 8002720:	e187      	b.n	8002a32 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002722:	4b1b      	ldr	r3, [pc, #108]	; (8002790 <HAL_RCC_OscConfig+0x240>)
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	f003 0302 	and.w	r3, r3, #2
 800272a:	2b00      	cmp	r3, #0
 800272c:	d1f0      	bne.n	8002710 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	f003 0308 	and.w	r3, r3, #8
 8002736:	2b00      	cmp	r3, #0
 8002738:	d036      	beq.n	80027a8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	695b      	ldr	r3, [r3, #20]
 800273e:	2b00      	cmp	r3, #0
 8002740:	d016      	beq.n	8002770 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002742:	4b15      	ldr	r3, [pc, #84]	; (8002798 <HAL_RCC_OscConfig+0x248>)
 8002744:	2201      	movs	r2, #1
 8002746:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002748:	f7ff fc4e 	bl	8001fe8 <HAL_GetTick>
 800274c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800274e:	e008      	b.n	8002762 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002750:	f7ff fc4a 	bl	8001fe8 <HAL_GetTick>
 8002754:	4602      	mov	r2, r0
 8002756:	693b      	ldr	r3, [r7, #16]
 8002758:	1ad3      	subs	r3, r2, r3
 800275a:	2b02      	cmp	r3, #2
 800275c:	d901      	bls.n	8002762 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800275e:	2303      	movs	r3, #3
 8002760:	e167      	b.n	8002a32 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002762:	4b0b      	ldr	r3, [pc, #44]	; (8002790 <HAL_RCC_OscConfig+0x240>)
 8002764:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002766:	f003 0302 	and.w	r3, r3, #2
 800276a:	2b00      	cmp	r3, #0
 800276c:	d0f0      	beq.n	8002750 <HAL_RCC_OscConfig+0x200>
 800276e:	e01b      	b.n	80027a8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002770:	4b09      	ldr	r3, [pc, #36]	; (8002798 <HAL_RCC_OscConfig+0x248>)
 8002772:	2200      	movs	r2, #0
 8002774:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002776:	f7ff fc37 	bl	8001fe8 <HAL_GetTick>
 800277a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800277c:	e00e      	b.n	800279c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800277e:	f7ff fc33 	bl	8001fe8 <HAL_GetTick>
 8002782:	4602      	mov	r2, r0
 8002784:	693b      	ldr	r3, [r7, #16]
 8002786:	1ad3      	subs	r3, r2, r3
 8002788:	2b02      	cmp	r3, #2
 800278a:	d907      	bls.n	800279c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800278c:	2303      	movs	r3, #3
 800278e:	e150      	b.n	8002a32 <HAL_RCC_OscConfig+0x4e2>
 8002790:	40023800 	.word	0x40023800
 8002794:	42470000 	.word	0x42470000
 8002798:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800279c:	4b88      	ldr	r3, [pc, #544]	; (80029c0 <HAL_RCC_OscConfig+0x470>)
 800279e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80027a0:	f003 0302 	and.w	r3, r3, #2
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d1ea      	bne.n	800277e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	f003 0304 	and.w	r3, r3, #4
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	f000 8097 	beq.w	80028e4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80027b6:	2300      	movs	r3, #0
 80027b8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80027ba:	4b81      	ldr	r3, [pc, #516]	; (80029c0 <HAL_RCC_OscConfig+0x470>)
 80027bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d10f      	bne.n	80027e6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80027c6:	2300      	movs	r3, #0
 80027c8:	60bb      	str	r3, [r7, #8]
 80027ca:	4b7d      	ldr	r3, [pc, #500]	; (80029c0 <HAL_RCC_OscConfig+0x470>)
 80027cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027ce:	4a7c      	ldr	r2, [pc, #496]	; (80029c0 <HAL_RCC_OscConfig+0x470>)
 80027d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80027d4:	6413      	str	r3, [r2, #64]	; 0x40
 80027d6:	4b7a      	ldr	r3, [pc, #488]	; (80029c0 <HAL_RCC_OscConfig+0x470>)
 80027d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027de:	60bb      	str	r3, [r7, #8]
 80027e0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80027e2:	2301      	movs	r3, #1
 80027e4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80027e6:	4b77      	ldr	r3, [pc, #476]	; (80029c4 <HAL_RCC_OscConfig+0x474>)
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d118      	bne.n	8002824 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80027f2:	4b74      	ldr	r3, [pc, #464]	; (80029c4 <HAL_RCC_OscConfig+0x474>)
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	4a73      	ldr	r2, [pc, #460]	; (80029c4 <HAL_RCC_OscConfig+0x474>)
 80027f8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80027fc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80027fe:	f7ff fbf3 	bl	8001fe8 <HAL_GetTick>
 8002802:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002804:	e008      	b.n	8002818 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002806:	f7ff fbef 	bl	8001fe8 <HAL_GetTick>
 800280a:	4602      	mov	r2, r0
 800280c:	693b      	ldr	r3, [r7, #16]
 800280e:	1ad3      	subs	r3, r2, r3
 8002810:	2b02      	cmp	r3, #2
 8002812:	d901      	bls.n	8002818 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002814:	2303      	movs	r3, #3
 8002816:	e10c      	b.n	8002a32 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002818:	4b6a      	ldr	r3, [pc, #424]	; (80029c4 <HAL_RCC_OscConfig+0x474>)
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002820:	2b00      	cmp	r3, #0
 8002822:	d0f0      	beq.n	8002806 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	689b      	ldr	r3, [r3, #8]
 8002828:	2b01      	cmp	r3, #1
 800282a:	d106      	bne.n	800283a <HAL_RCC_OscConfig+0x2ea>
 800282c:	4b64      	ldr	r3, [pc, #400]	; (80029c0 <HAL_RCC_OscConfig+0x470>)
 800282e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002830:	4a63      	ldr	r2, [pc, #396]	; (80029c0 <HAL_RCC_OscConfig+0x470>)
 8002832:	f043 0301 	orr.w	r3, r3, #1
 8002836:	6713      	str	r3, [r2, #112]	; 0x70
 8002838:	e01c      	b.n	8002874 <HAL_RCC_OscConfig+0x324>
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	689b      	ldr	r3, [r3, #8]
 800283e:	2b05      	cmp	r3, #5
 8002840:	d10c      	bne.n	800285c <HAL_RCC_OscConfig+0x30c>
 8002842:	4b5f      	ldr	r3, [pc, #380]	; (80029c0 <HAL_RCC_OscConfig+0x470>)
 8002844:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002846:	4a5e      	ldr	r2, [pc, #376]	; (80029c0 <HAL_RCC_OscConfig+0x470>)
 8002848:	f043 0304 	orr.w	r3, r3, #4
 800284c:	6713      	str	r3, [r2, #112]	; 0x70
 800284e:	4b5c      	ldr	r3, [pc, #368]	; (80029c0 <HAL_RCC_OscConfig+0x470>)
 8002850:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002852:	4a5b      	ldr	r2, [pc, #364]	; (80029c0 <HAL_RCC_OscConfig+0x470>)
 8002854:	f043 0301 	orr.w	r3, r3, #1
 8002858:	6713      	str	r3, [r2, #112]	; 0x70
 800285a:	e00b      	b.n	8002874 <HAL_RCC_OscConfig+0x324>
 800285c:	4b58      	ldr	r3, [pc, #352]	; (80029c0 <HAL_RCC_OscConfig+0x470>)
 800285e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002860:	4a57      	ldr	r2, [pc, #348]	; (80029c0 <HAL_RCC_OscConfig+0x470>)
 8002862:	f023 0301 	bic.w	r3, r3, #1
 8002866:	6713      	str	r3, [r2, #112]	; 0x70
 8002868:	4b55      	ldr	r3, [pc, #340]	; (80029c0 <HAL_RCC_OscConfig+0x470>)
 800286a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800286c:	4a54      	ldr	r2, [pc, #336]	; (80029c0 <HAL_RCC_OscConfig+0x470>)
 800286e:	f023 0304 	bic.w	r3, r3, #4
 8002872:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	689b      	ldr	r3, [r3, #8]
 8002878:	2b00      	cmp	r3, #0
 800287a:	d015      	beq.n	80028a8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800287c:	f7ff fbb4 	bl	8001fe8 <HAL_GetTick>
 8002880:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002882:	e00a      	b.n	800289a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002884:	f7ff fbb0 	bl	8001fe8 <HAL_GetTick>
 8002888:	4602      	mov	r2, r0
 800288a:	693b      	ldr	r3, [r7, #16]
 800288c:	1ad3      	subs	r3, r2, r3
 800288e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002892:	4293      	cmp	r3, r2
 8002894:	d901      	bls.n	800289a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002896:	2303      	movs	r3, #3
 8002898:	e0cb      	b.n	8002a32 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800289a:	4b49      	ldr	r3, [pc, #292]	; (80029c0 <HAL_RCC_OscConfig+0x470>)
 800289c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800289e:	f003 0302 	and.w	r3, r3, #2
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d0ee      	beq.n	8002884 <HAL_RCC_OscConfig+0x334>
 80028a6:	e014      	b.n	80028d2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80028a8:	f7ff fb9e 	bl	8001fe8 <HAL_GetTick>
 80028ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80028ae:	e00a      	b.n	80028c6 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80028b0:	f7ff fb9a 	bl	8001fe8 <HAL_GetTick>
 80028b4:	4602      	mov	r2, r0
 80028b6:	693b      	ldr	r3, [r7, #16]
 80028b8:	1ad3      	subs	r3, r2, r3
 80028ba:	f241 3288 	movw	r2, #5000	; 0x1388
 80028be:	4293      	cmp	r3, r2
 80028c0:	d901      	bls.n	80028c6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80028c2:	2303      	movs	r3, #3
 80028c4:	e0b5      	b.n	8002a32 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80028c6:	4b3e      	ldr	r3, [pc, #248]	; (80029c0 <HAL_RCC_OscConfig+0x470>)
 80028c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028ca:	f003 0302 	and.w	r3, r3, #2
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d1ee      	bne.n	80028b0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80028d2:	7dfb      	ldrb	r3, [r7, #23]
 80028d4:	2b01      	cmp	r3, #1
 80028d6:	d105      	bne.n	80028e4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80028d8:	4b39      	ldr	r3, [pc, #228]	; (80029c0 <HAL_RCC_OscConfig+0x470>)
 80028da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028dc:	4a38      	ldr	r2, [pc, #224]	; (80029c0 <HAL_RCC_OscConfig+0x470>)
 80028de:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80028e2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	699b      	ldr	r3, [r3, #24]
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	f000 80a1 	beq.w	8002a30 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80028ee:	4b34      	ldr	r3, [pc, #208]	; (80029c0 <HAL_RCC_OscConfig+0x470>)
 80028f0:	689b      	ldr	r3, [r3, #8]
 80028f2:	f003 030c 	and.w	r3, r3, #12
 80028f6:	2b08      	cmp	r3, #8
 80028f8:	d05c      	beq.n	80029b4 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	699b      	ldr	r3, [r3, #24]
 80028fe:	2b02      	cmp	r3, #2
 8002900:	d141      	bne.n	8002986 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002902:	4b31      	ldr	r3, [pc, #196]	; (80029c8 <HAL_RCC_OscConfig+0x478>)
 8002904:	2200      	movs	r2, #0
 8002906:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002908:	f7ff fb6e 	bl	8001fe8 <HAL_GetTick>
 800290c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800290e:	e008      	b.n	8002922 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002910:	f7ff fb6a 	bl	8001fe8 <HAL_GetTick>
 8002914:	4602      	mov	r2, r0
 8002916:	693b      	ldr	r3, [r7, #16]
 8002918:	1ad3      	subs	r3, r2, r3
 800291a:	2b02      	cmp	r3, #2
 800291c:	d901      	bls.n	8002922 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800291e:	2303      	movs	r3, #3
 8002920:	e087      	b.n	8002a32 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002922:	4b27      	ldr	r3, [pc, #156]	; (80029c0 <HAL_RCC_OscConfig+0x470>)
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800292a:	2b00      	cmp	r3, #0
 800292c:	d1f0      	bne.n	8002910 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	69da      	ldr	r2, [r3, #28]
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	6a1b      	ldr	r3, [r3, #32]
 8002936:	431a      	orrs	r2, r3
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800293c:	019b      	lsls	r3, r3, #6
 800293e:	431a      	orrs	r2, r3
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002944:	085b      	lsrs	r3, r3, #1
 8002946:	3b01      	subs	r3, #1
 8002948:	041b      	lsls	r3, r3, #16
 800294a:	431a      	orrs	r2, r3
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002950:	061b      	lsls	r3, r3, #24
 8002952:	491b      	ldr	r1, [pc, #108]	; (80029c0 <HAL_RCC_OscConfig+0x470>)
 8002954:	4313      	orrs	r3, r2
 8002956:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002958:	4b1b      	ldr	r3, [pc, #108]	; (80029c8 <HAL_RCC_OscConfig+0x478>)
 800295a:	2201      	movs	r2, #1
 800295c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800295e:	f7ff fb43 	bl	8001fe8 <HAL_GetTick>
 8002962:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002964:	e008      	b.n	8002978 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002966:	f7ff fb3f 	bl	8001fe8 <HAL_GetTick>
 800296a:	4602      	mov	r2, r0
 800296c:	693b      	ldr	r3, [r7, #16]
 800296e:	1ad3      	subs	r3, r2, r3
 8002970:	2b02      	cmp	r3, #2
 8002972:	d901      	bls.n	8002978 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002974:	2303      	movs	r3, #3
 8002976:	e05c      	b.n	8002a32 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002978:	4b11      	ldr	r3, [pc, #68]	; (80029c0 <HAL_RCC_OscConfig+0x470>)
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002980:	2b00      	cmp	r3, #0
 8002982:	d0f0      	beq.n	8002966 <HAL_RCC_OscConfig+0x416>
 8002984:	e054      	b.n	8002a30 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002986:	4b10      	ldr	r3, [pc, #64]	; (80029c8 <HAL_RCC_OscConfig+0x478>)
 8002988:	2200      	movs	r2, #0
 800298a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800298c:	f7ff fb2c 	bl	8001fe8 <HAL_GetTick>
 8002990:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002992:	e008      	b.n	80029a6 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002994:	f7ff fb28 	bl	8001fe8 <HAL_GetTick>
 8002998:	4602      	mov	r2, r0
 800299a:	693b      	ldr	r3, [r7, #16]
 800299c:	1ad3      	subs	r3, r2, r3
 800299e:	2b02      	cmp	r3, #2
 80029a0:	d901      	bls.n	80029a6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80029a2:	2303      	movs	r3, #3
 80029a4:	e045      	b.n	8002a32 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80029a6:	4b06      	ldr	r3, [pc, #24]	; (80029c0 <HAL_RCC_OscConfig+0x470>)
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d1f0      	bne.n	8002994 <HAL_RCC_OscConfig+0x444>
 80029b2:	e03d      	b.n	8002a30 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	699b      	ldr	r3, [r3, #24]
 80029b8:	2b01      	cmp	r3, #1
 80029ba:	d107      	bne.n	80029cc <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80029bc:	2301      	movs	r3, #1
 80029be:	e038      	b.n	8002a32 <HAL_RCC_OscConfig+0x4e2>
 80029c0:	40023800 	.word	0x40023800
 80029c4:	40007000 	.word	0x40007000
 80029c8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80029cc:	4b1b      	ldr	r3, [pc, #108]	; (8002a3c <HAL_RCC_OscConfig+0x4ec>)
 80029ce:	685b      	ldr	r3, [r3, #4]
 80029d0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	699b      	ldr	r3, [r3, #24]
 80029d6:	2b01      	cmp	r3, #1
 80029d8:	d028      	beq.n	8002a2c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80029e4:	429a      	cmp	r2, r3
 80029e6:	d121      	bne.n	8002a2c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80029f2:	429a      	cmp	r2, r3
 80029f4:	d11a      	bne.n	8002a2c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80029f6:	68fa      	ldr	r2, [r7, #12]
 80029f8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80029fc:	4013      	ands	r3, r2
 80029fe:	687a      	ldr	r2, [r7, #4]
 8002a00:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002a02:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002a04:	4293      	cmp	r3, r2
 8002a06:	d111      	bne.n	8002a2c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a12:	085b      	lsrs	r3, r3, #1
 8002a14:	3b01      	subs	r3, #1
 8002a16:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002a18:	429a      	cmp	r2, r3
 8002a1a:	d107      	bne.n	8002a2c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a26:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002a28:	429a      	cmp	r2, r3
 8002a2a:	d001      	beq.n	8002a30 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002a2c:	2301      	movs	r3, #1
 8002a2e:	e000      	b.n	8002a32 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002a30:	2300      	movs	r3, #0
}
 8002a32:	4618      	mov	r0, r3
 8002a34:	3718      	adds	r7, #24
 8002a36:	46bd      	mov	sp, r7
 8002a38:	bd80      	pop	{r7, pc}
 8002a3a:	bf00      	nop
 8002a3c:	40023800 	.word	0x40023800

08002a40 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002a40:	b580      	push	{r7, lr}
 8002a42:	b084      	sub	sp, #16
 8002a44:	af00      	add	r7, sp, #0
 8002a46:	6078      	str	r0, [r7, #4]
 8002a48:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d101      	bne.n	8002a54 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002a50:	2301      	movs	r3, #1
 8002a52:	e0cc      	b.n	8002bee <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002a54:	4b68      	ldr	r3, [pc, #416]	; (8002bf8 <HAL_RCC_ClockConfig+0x1b8>)
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	f003 0307 	and.w	r3, r3, #7
 8002a5c:	683a      	ldr	r2, [r7, #0]
 8002a5e:	429a      	cmp	r2, r3
 8002a60:	d90c      	bls.n	8002a7c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a62:	4b65      	ldr	r3, [pc, #404]	; (8002bf8 <HAL_RCC_ClockConfig+0x1b8>)
 8002a64:	683a      	ldr	r2, [r7, #0]
 8002a66:	b2d2      	uxtb	r2, r2
 8002a68:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a6a:	4b63      	ldr	r3, [pc, #396]	; (8002bf8 <HAL_RCC_ClockConfig+0x1b8>)
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	f003 0307 	and.w	r3, r3, #7
 8002a72:	683a      	ldr	r2, [r7, #0]
 8002a74:	429a      	cmp	r2, r3
 8002a76:	d001      	beq.n	8002a7c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002a78:	2301      	movs	r3, #1
 8002a7a:	e0b8      	b.n	8002bee <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	f003 0302 	and.w	r3, r3, #2
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d020      	beq.n	8002aca <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	f003 0304 	and.w	r3, r3, #4
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d005      	beq.n	8002aa0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002a94:	4b59      	ldr	r3, [pc, #356]	; (8002bfc <HAL_RCC_ClockConfig+0x1bc>)
 8002a96:	689b      	ldr	r3, [r3, #8]
 8002a98:	4a58      	ldr	r2, [pc, #352]	; (8002bfc <HAL_RCC_ClockConfig+0x1bc>)
 8002a9a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002a9e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	f003 0308 	and.w	r3, r3, #8
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d005      	beq.n	8002ab8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002aac:	4b53      	ldr	r3, [pc, #332]	; (8002bfc <HAL_RCC_ClockConfig+0x1bc>)
 8002aae:	689b      	ldr	r3, [r3, #8]
 8002ab0:	4a52      	ldr	r2, [pc, #328]	; (8002bfc <HAL_RCC_ClockConfig+0x1bc>)
 8002ab2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002ab6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002ab8:	4b50      	ldr	r3, [pc, #320]	; (8002bfc <HAL_RCC_ClockConfig+0x1bc>)
 8002aba:	689b      	ldr	r3, [r3, #8]
 8002abc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	689b      	ldr	r3, [r3, #8]
 8002ac4:	494d      	ldr	r1, [pc, #308]	; (8002bfc <HAL_RCC_ClockConfig+0x1bc>)
 8002ac6:	4313      	orrs	r3, r2
 8002ac8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	f003 0301 	and.w	r3, r3, #1
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d044      	beq.n	8002b60 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	685b      	ldr	r3, [r3, #4]
 8002ada:	2b01      	cmp	r3, #1
 8002adc:	d107      	bne.n	8002aee <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ade:	4b47      	ldr	r3, [pc, #284]	; (8002bfc <HAL_RCC_ClockConfig+0x1bc>)
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d119      	bne.n	8002b1e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002aea:	2301      	movs	r3, #1
 8002aec:	e07f      	b.n	8002bee <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	685b      	ldr	r3, [r3, #4]
 8002af2:	2b02      	cmp	r3, #2
 8002af4:	d003      	beq.n	8002afe <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002afa:	2b03      	cmp	r3, #3
 8002afc:	d107      	bne.n	8002b0e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002afe:	4b3f      	ldr	r3, [pc, #252]	; (8002bfc <HAL_RCC_ClockConfig+0x1bc>)
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d109      	bne.n	8002b1e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002b0a:	2301      	movs	r3, #1
 8002b0c:	e06f      	b.n	8002bee <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b0e:	4b3b      	ldr	r3, [pc, #236]	; (8002bfc <HAL_RCC_ClockConfig+0x1bc>)
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	f003 0302 	and.w	r3, r3, #2
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d101      	bne.n	8002b1e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002b1a:	2301      	movs	r3, #1
 8002b1c:	e067      	b.n	8002bee <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002b1e:	4b37      	ldr	r3, [pc, #220]	; (8002bfc <HAL_RCC_ClockConfig+0x1bc>)
 8002b20:	689b      	ldr	r3, [r3, #8]
 8002b22:	f023 0203 	bic.w	r2, r3, #3
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	685b      	ldr	r3, [r3, #4]
 8002b2a:	4934      	ldr	r1, [pc, #208]	; (8002bfc <HAL_RCC_ClockConfig+0x1bc>)
 8002b2c:	4313      	orrs	r3, r2
 8002b2e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002b30:	f7ff fa5a 	bl	8001fe8 <HAL_GetTick>
 8002b34:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b36:	e00a      	b.n	8002b4e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002b38:	f7ff fa56 	bl	8001fe8 <HAL_GetTick>
 8002b3c:	4602      	mov	r2, r0
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	1ad3      	subs	r3, r2, r3
 8002b42:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b46:	4293      	cmp	r3, r2
 8002b48:	d901      	bls.n	8002b4e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002b4a:	2303      	movs	r3, #3
 8002b4c:	e04f      	b.n	8002bee <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b4e:	4b2b      	ldr	r3, [pc, #172]	; (8002bfc <HAL_RCC_ClockConfig+0x1bc>)
 8002b50:	689b      	ldr	r3, [r3, #8]
 8002b52:	f003 020c 	and.w	r2, r3, #12
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	685b      	ldr	r3, [r3, #4]
 8002b5a:	009b      	lsls	r3, r3, #2
 8002b5c:	429a      	cmp	r2, r3
 8002b5e:	d1eb      	bne.n	8002b38 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002b60:	4b25      	ldr	r3, [pc, #148]	; (8002bf8 <HAL_RCC_ClockConfig+0x1b8>)
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	f003 0307 	and.w	r3, r3, #7
 8002b68:	683a      	ldr	r2, [r7, #0]
 8002b6a:	429a      	cmp	r2, r3
 8002b6c:	d20c      	bcs.n	8002b88 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b6e:	4b22      	ldr	r3, [pc, #136]	; (8002bf8 <HAL_RCC_ClockConfig+0x1b8>)
 8002b70:	683a      	ldr	r2, [r7, #0]
 8002b72:	b2d2      	uxtb	r2, r2
 8002b74:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b76:	4b20      	ldr	r3, [pc, #128]	; (8002bf8 <HAL_RCC_ClockConfig+0x1b8>)
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	f003 0307 	and.w	r3, r3, #7
 8002b7e:	683a      	ldr	r2, [r7, #0]
 8002b80:	429a      	cmp	r2, r3
 8002b82:	d001      	beq.n	8002b88 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002b84:	2301      	movs	r3, #1
 8002b86:	e032      	b.n	8002bee <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	f003 0304 	and.w	r3, r3, #4
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d008      	beq.n	8002ba6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002b94:	4b19      	ldr	r3, [pc, #100]	; (8002bfc <HAL_RCC_ClockConfig+0x1bc>)
 8002b96:	689b      	ldr	r3, [r3, #8]
 8002b98:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	68db      	ldr	r3, [r3, #12]
 8002ba0:	4916      	ldr	r1, [pc, #88]	; (8002bfc <HAL_RCC_ClockConfig+0x1bc>)
 8002ba2:	4313      	orrs	r3, r2
 8002ba4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	f003 0308 	and.w	r3, r3, #8
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d009      	beq.n	8002bc6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002bb2:	4b12      	ldr	r3, [pc, #72]	; (8002bfc <HAL_RCC_ClockConfig+0x1bc>)
 8002bb4:	689b      	ldr	r3, [r3, #8]
 8002bb6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	691b      	ldr	r3, [r3, #16]
 8002bbe:	00db      	lsls	r3, r3, #3
 8002bc0:	490e      	ldr	r1, [pc, #56]	; (8002bfc <HAL_RCC_ClockConfig+0x1bc>)
 8002bc2:	4313      	orrs	r3, r2
 8002bc4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002bc6:	f000 f821 	bl	8002c0c <HAL_RCC_GetSysClockFreq>
 8002bca:	4602      	mov	r2, r0
 8002bcc:	4b0b      	ldr	r3, [pc, #44]	; (8002bfc <HAL_RCC_ClockConfig+0x1bc>)
 8002bce:	689b      	ldr	r3, [r3, #8]
 8002bd0:	091b      	lsrs	r3, r3, #4
 8002bd2:	f003 030f 	and.w	r3, r3, #15
 8002bd6:	490a      	ldr	r1, [pc, #40]	; (8002c00 <HAL_RCC_ClockConfig+0x1c0>)
 8002bd8:	5ccb      	ldrb	r3, [r1, r3]
 8002bda:	fa22 f303 	lsr.w	r3, r2, r3
 8002bde:	4a09      	ldr	r2, [pc, #36]	; (8002c04 <HAL_RCC_ClockConfig+0x1c4>)
 8002be0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002be2:	4b09      	ldr	r3, [pc, #36]	; (8002c08 <HAL_RCC_ClockConfig+0x1c8>)
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	4618      	mov	r0, r3
 8002be8:	f7ff f9ba 	bl	8001f60 <HAL_InitTick>

  return HAL_OK;
 8002bec:	2300      	movs	r3, #0
}
 8002bee:	4618      	mov	r0, r3
 8002bf0:	3710      	adds	r7, #16
 8002bf2:	46bd      	mov	sp, r7
 8002bf4:	bd80      	pop	{r7, pc}
 8002bf6:	bf00      	nop
 8002bf8:	40023c00 	.word	0x40023c00
 8002bfc:	40023800 	.word	0x40023800
 8002c00:	08007b5c 	.word	0x08007b5c
 8002c04:	20000004 	.word	0x20000004
 8002c08:	20000008 	.word	0x20000008

08002c0c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002c0c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002c10:	b094      	sub	sp, #80	; 0x50
 8002c12:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002c14:	2300      	movs	r3, #0
 8002c16:	647b      	str	r3, [r7, #68]	; 0x44
 8002c18:	2300      	movs	r3, #0
 8002c1a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002c1c:	2300      	movs	r3, #0
 8002c1e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8002c20:	2300      	movs	r3, #0
 8002c22:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002c24:	4b79      	ldr	r3, [pc, #484]	; (8002e0c <HAL_RCC_GetSysClockFreq+0x200>)
 8002c26:	689b      	ldr	r3, [r3, #8]
 8002c28:	f003 030c 	and.w	r3, r3, #12
 8002c2c:	2b08      	cmp	r3, #8
 8002c2e:	d00d      	beq.n	8002c4c <HAL_RCC_GetSysClockFreq+0x40>
 8002c30:	2b08      	cmp	r3, #8
 8002c32:	f200 80e1 	bhi.w	8002df8 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d002      	beq.n	8002c40 <HAL_RCC_GetSysClockFreq+0x34>
 8002c3a:	2b04      	cmp	r3, #4
 8002c3c:	d003      	beq.n	8002c46 <HAL_RCC_GetSysClockFreq+0x3a>
 8002c3e:	e0db      	b.n	8002df8 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002c40:	4b73      	ldr	r3, [pc, #460]	; (8002e10 <HAL_RCC_GetSysClockFreq+0x204>)
 8002c42:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8002c44:	e0db      	b.n	8002dfe <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002c46:	4b73      	ldr	r3, [pc, #460]	; (8002e14 <HAL_RCC_GetSysClockFreq+0x208>)
 8002c48:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002c4a:	e0d8      	b.n	8002dfe <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002c4c:	4b6f      	ldr	r3, [pc, #444]	; (8002e0c <HAL_RCC_GetSysClockFreq+0x200>)
 8002c4e:	685b      	ldr	r3, [r3, #4]
 8002c50:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002c54:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002c56:	4b6d      	ldr	r3, [pc, #436]	; (8002e0c <HAL_RCC_GetSysClockFreq+0x200>)
 8002c58:	685b      	ldr	r3, [r3, #4]
 8002c5a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d063      	beq.n	8002d2a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002c62:	4b6a      	ldr	r3, [pc, #424]	; (8002e0c <HAL_RCC_GetSysClockFreq+0x200>)
 8002c64:	685b      	ldr	r3, [r3, #4]
 8002c66:	099b      	lsrs	r3, r3, #6
 8002c68:	2200      	movs	r2, #0
 8002c6a:	63bb      	str	r3, [r7, #56]	; 0x38
 8002c6c:	63fa      	str	r2, [r7, #60]	; 0x3c
 8002c6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c70:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002c74:	633b      	str	r3, [r7, #48]	; 0x30
 8002c76:	2300      	movs	r3, #0
 8002c78:	637b      	str	r3, [r7, #52]	; 0x34
 8002c7a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002c7e:	4622      	mov	r2, r4
 8002c80:	462b      	mov	r3, r5
 8002c82:	f04f 0000 	mov.w	r0, #0
 8002c86:	f04f 0100 	mov.w	r1, #0
 8002c8a:	0159      	lsls	r1, r3, #5
 8002c8c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002c90:	0150      	lsls	r0, r2, #5
 8002c92:	4602      	mov	r2, r0
 8002c94:	460b      	mov	r3, r1
 8002c96:	4621      	mov	r1, r4
 8002c98:	1a51      	subs	r1, r2, r1
 8002c9a:	6139      	str	r1, [r7, #16]
 8002c9c:	4629      	mov	r1, r5
 8002c9e:	eb63 0301 	sbc.w	r3, r3, r1
 8002ca2:	617b      	str	r3, [r7, #20]
 8002ca4:	f04f 0200 	mov.w	r2, #0
 8002ca8:	f04f 0300 	mov.w	r3, #0
 8002cac:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002cb0:	4659      	mov	r1, fp
 8002cb2:	018b      	lsls	r3, r1, #6
 8002cb4:	4651      	mov	r1, sl
 8002cb6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002cba:	4651      	mov	r1, sl
 8002cbc:	018a      	lsls	r2, r1, #6
 8002cbe:	4651      	mov	r1, sl
 8002cc0:	ebb2 0801 	subs.w	r8, r2, r1
 8002cc4:	4659      	mov	r1, fp
 8002cc6:	eb63 0901 	sbc.w	r9, r3, r1
 8002cca:	f04f 0200 	mov.w	r2, #0
 8002cce:	f04f 0300 	mov.w	r3, #0
 8002cd2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002cd6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002cda:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002cde:	4690      	mov	r8, r2
 8002ce0:	4699      	mov	r9, r3
 8002ce2:	4623      	mov	r3, r4
 8002ce4:	eb18 0303 	adds.w	r3, r8, r3
 8002ce8:	60bb      	str	r3, [r7, #8]
 8002cea:	462b      	mov	r3, r5
 8002cec:	eb49 0303 	adc.w	r3, r9, r3
 8002cf0:	60fb      	str	r3, [r7, #12]
 8002cf2:	f04f 0200 	mov.w	r2, #0
 8002cf6:	f04f 0300 	mov.w	r3, #0
 8002cfa:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002cfe:	4629      	mov	r1, r5
 8002d00:	024b      	lsls	r3, r1, #9
 8002d02:	4621      	mov	r1, r4
 8002d04:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002d08:	4621      	mov	r1, r4
 8002d0a:	024a      	lsls	r2, r1, #9
 8002d0c:	4610      	mov	r0, r2
 8002d0e:	4619      	mov	r1, r3
 8002d10:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002d12:	2200      	movs	r2, #0
 8002d14:	62bb      	str	r3, [r7, #40]	; 0x28
 8002d16:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002d18:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002d1c:	f7fd fdbe 	bl	800089c <__aeabi_uldivmod>
 8002d20:	4602      	mov	r2, r0
 8002d22:	460b      	mov	r3, r1
 8002d24:	4613      	mov	r3, r2
 8002d26:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002d28:	e058      	b.n	8002ddc <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002d2a:	4b38      	ldr	r3, [pc, #224]	; (8002e0c <HAL_RCC_GetSysClockFreq+0x200>)
 8002d2c:	685b      	ldr	r3, [r3, #4]
 8002d2e:	099b      	lsrs	r3, r3, #6
 8002d30:	2200      	movs	r2, #0
 8002d32:	4618      	mov	r0, r3
 8002d34:	4611      	mov	r1, r2
 8002d36:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002d3a:	623b      	str	r3, [r7, #32]
 8002d3c:	2300      	movs	r3, #0
 8002d3e:	627b      	str	r3, [r7, #36]	; 0x24
 8002d40:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002d44:	4642      	mov	r2, r8
 8002d46:	464b      	mov	r3, r9
 8002d48:	f04f 0000 	mov.w	r0, #0
 8002d4c:	f04f 0100 	mov.w	r1, #0
 8002d50:	0159      	lsls	r1, r3, #5
 8002d52:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002d56:	0150      	lsls	r0, r2, #5
 8002d58:	4602      	mov	r2, r0
 8002d5a:	460b      	mov	r3, r1
 8002d5c:	4641      	mov	r1, r8
 8002d5e:	ebb2 0a01 	subs.w	sl, r2, r1
 8002d62:	4649      	mov	r1, r9
 8002d64:	eb63 0b01 	sbc.w	fp, r3, r1
 8002d68:	f04f 0200 	mov.w	r2, #0
 8002d6c:	f04f 0300 	mov.w	r3, #0
 8002d70:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002d74:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002d78:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002d7c:	ebb2 040a 	subs.w	r4, r2, sl
 8002d80:	eb63 050b 	sbc.w	r5, r3, fp
 8002d84:	f04f 0200 	mov.w	r2, #0
 8002d88:	f04f 0300 	mov.w	r3, #0
 8002d8c:	00eb      	lsls	r3, r5, #3
 8002d8e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002d92:	00e2      	lsls	r2, r4, #3
 8002d94:	4614      	mov	r4, r2
 8002d96:	461d      	mov	r5, r3
 8002d98:	4643      	mov	r3, r8
 8002d9a:	18e3      	adds	r3, r4, r3
 8002d9c:	603b      	str	r3, [r7, #0]
 8002d9e:	464b      	mov	r3, r9
 8002da0:	eb45 0303 	adc.w	r3, r5, r3
 8002da4:	607b      	str	r3, [r7, #4]
 8002da6:	f04f 0200 	mov.w	r2, #0
 8002daa:	f04f 0300 	mov.w	r3, #0
 8002dae:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002db2:	4629      	mov	r1, r5
 8002db4:	028b      	lsls	r3, r1, #10
 8002db6:	4621      	mov	r1, r4
 8002db8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002dbc:	4621      	mov	r1, r4
 8002dbe:	028a      	lsls	r2, r1, #10
 8002dc0:	4610      	mov	r0, r2
 8002dc2:	4619      	mov	r1, r3
 8002dc4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002dc6:	2200      	movs	r2, #0
 8002dc8:	61bb      	str	r3, [r7, #24]
 8002dca:	61fa      	str	r2, [r7, #28]
 8002dcc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002dd0:	f7fd fd64 	bl	800089c <__aeabi_uldivmod>
 8002dd4:	4602      	mov	r2, r0
 8002dd6:	460b      	mov	r3, r1
 8002dd8:	4613      	mov	r3, r2
 8002dda:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002ddc:	4b0b      	ldr	r3, [pc, #44]	; (8002e0c <HAL_RCC_GetSysClockFreq+0x200>)
 8002dde:	685b      	ldr	r3, [r3, #4]
 8002de0:	0c1b      	lsrs	r3, r3, #16
 8002de2:	f003 0303 	and.w	r3, r3, #3
 8002de6:	3301      	adds	r3, #1
 8002de8:	005b      	lsls	r3, r3, #1
 8002dea:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8002dec:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002dee:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002df0:	fbb2 f3f3 	udiv	r3, r2, r3
 8002df4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002df6:	e002      	b.n	8002dfe <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002df8:	4b05      	ldr	r3, [pc, #20]	; (8002e10 <HAL_RCC_GetSysClockFreq+0x204>)
 8002dfa:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002dfc:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002dfe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8002e00:	4618      	mov	r0, r3
 8002e02:	3750      	adds	r7, #80	; 0x50
 8002e04:	46bd      	mov	sp, r7
 8002e06:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002e0a:	bf00      	nop
 8002e0c:	40023800 	.word	0x40023800
 8002e10:	00f42400 	.word	0x00f42400
 8002e14:	007a1200 	.word	0x007a1200

08002e18 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002e18:	b480      	push	{r7}
 8002e1a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002e1c:	4b03      	ldr	r3, [pc, #12]	; (8002e2c <HAL_RCC_GetHCLKFreq+0x14>)
 8002e1e:	681b      	ldr	r3, [r3, #0]
}
 8002e20:	4618      	mov	r0, r3
 8002e22:	46bd      	mov	sp, r7
 8002e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e28:	4770      	bx	lr
 8002e2a:	bf00      	nop
 8002e2c:	20000004 	.word	0x20000004

08002e30 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002e30:	b580      	push	{r7, lr}
 8002e32:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002e34:	f7ff fff0 	bl	8002e18 <HAL_RCC_GetHCLKFreq>
 8002e38:	4602      	mov	r2, r0
 8002e3a:	4b05      	ldr	r3, [pc, #20]	; (8002e50 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002e3c:	689b      	ldr	r3, [r3, #8]
 8002e3e:	0a9b      	lsrs	r3, r3, #10
 8002e40:	f003 0307 	and.w	r3, r3, #7
 8002e44:	4903      	ldr	r1, [pc, #12]	; (8002e54 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002e46:	5ccb      	ldrb	r3, [r1, r3]
 8002e48:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002e4c:	4618      	mov	r0, r3
 8002e4e:	bd80      	pop	{r7, pc}
 8002e50:	40023800 	.word	0x40023800
 8002e54:	08007b6c 	.word	0x08007b6c

08002e58 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002e58:	b580      	push	{r7, lr}
 8002e5a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002e5c:	f7ff ffdc 	bl	8002e18 <HAL_RCC_GetHCLKFreq>
 8002e60:	4602      	mov	r2, r0
 8002e62:	4b05      	ldr	r3, [pc, #20]	; (8002e78 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002e64:	689b      	ldr	r3, [r3, #8]
 8002e66:	0b5b      	lsrs	r3, r3, #13
 8002e68:	f003 0307 	and.w	r3, r3, #7
 8002e6c:	4903      	ldr	r1, [pc, #12]	; (8002e7c <HAL_RCC_GetPCLK2Freq+0x24>)
 8002e6e:	5ccb      	ldrb	r3, [r1, r3]
 8002e70:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002e74:	4618      	mov	r0, r3
 8002e76:	bd80      	pop	{r7, pc}
 8002e78:	40023800 	.word	0x40023800
 8002e7c:	08007b6c 	.word	0x08007b6c

08002e80 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002e80:	b580      	push	{r7, lr}
 8002e82:	b082      	sub	sp, #8
 8002e84:	af00      	add	r7, sp, #0
 8002e86:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d101      	bne.n	8002e92 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002e8e:	2301      	movs	r3, #1
 8002e90:	e07b      	b.n	8002f8a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d108      	bne.n	8002eac <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	685b      	ldr	r3, [r3, #4]
 8002e9e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002ea2:	d009      	beq.n	8002eb8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	2200      	movs	r2, #0
 8002ea8:	61da      	str	r2, [r3, #28]
 8002eaa:	e005      	b.n	8002eb8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	2200      	movs	r2, #0
 8002eb0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	2200      	movs	r2, #0
 8002eb6:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	2200      	movs	r2, #0
 8002ebc:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002ec4:	b2db      	uxtb	r3, r3
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d106      	bne.n	8002ed8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	2200      	movs	r2, #0
 8002ece:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002ed2:	6878      	ldr	r0, [r7, #4]
 8002ed4:	f7fe fe9e 	bl	8001c14 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	2202      	movs	r2, #2
 8002edc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	681a      	ldr	r2, [r3, #0]
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002eee:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	685b      	ldr	r3, [r3, #4]
 8002ef4:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	689b      	ldr	r3, [r3, #8]
 8002efc:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8002f00:	431a      	orrs	r2, r3
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	68db      	ldr	r3, [r3, #12]
 8002f06:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002f0a:	431a      	orrs	r2, r3
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	691b      	ldr	r3, [r3, #16]
 8002f10:	f003 0302 	and.w	r3, r3, #2
 8002f14:	431a      	orrs	r2, r3
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	695b      	ldr	r3, [r3, #20]
 8002f1a:	f003 0301 	and.w	r3, r3, #1
 8002f1e:	431a      	orrs	r2, r3
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	699b      	ldr	r3, [r3, #24]
 8002f24:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002f28:	431a      	orrs	r2, r3
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	69db      	ldr	r3, [r3, #28]
 8002f2e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002f32:	431a      	orrs	r2, r3
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	6a1b      	ldr	r3, [r3, #32]
 8002f38:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f3c:	ea42 0103 	orr.w	r1, r2, r3
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f44:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	430a      	orrs	r2, r1
 8002f4e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	699b      	ldr	r3, [r3, #24]
 8002f54:	0c1b      	lsrs	r3, r3, #16
 8002f56:	f003 0104 	and.w	r1, r3, #4
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f5e:	f003 0210 	and.w	r2, r3, #16
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	430a      	orrs	r2, r1
 8002f68:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	69da      	ldr	r2, [r3, #28]
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002f78:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	2200      	movs	r2, #0
 8002f7e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	2201      	movs	r2, #1
 8002f84:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8002f88:	2300      	movs	r3, #0
}
 8002f8a:	4618      	mov	r0, r3
 8002f8c:	3708      	adds	r7, #8
 8002f8e:	46bd      	mov	sp, r7
 8002f90:	bd80      	pop	{r7, pc}

08002f92 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002f92:	b580      	push	{r7, lr}
 8002f94:	b088      	sub	sp, #32
 8002f96:	af00      	add	r7, sp, #0
 8002f98:	60f8      	str	r0, [r7, #12]
 8002f9a:	60b9      	str	r1, [r7, #8]
 8002f9c:	603b      	str	r3, [r7, #0]
 8002f9e:	4613      	mov	r3, r2
 8002fa0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002fa2:	2300      	movs	r3, #0
 8002fa4:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002fac:	2b01      	cmp	r3, #1
 8002fae:	d101      	bne.n	8002fb4 <HAL_SPI_Transmit+0x22>
 8002fb0:	2302      	movs	r3, #2
 8002fb2:	e126      	b.n	8003202 <HAL_SPI_Transmit+0x270>
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	2201      	movs	r2, #1
 8002fb8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002fbc:	f7ff f814 	bl	8001fe8 <HAL_GetTick>
 8002fc0:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8002fc2:	88fb      	ldrh	r3, [r7, #6]
 8002fc4:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002fcc:	b2db      	uxtb	r3, r3
 8002fce:	2b01      	cmp	r3, #1
 8002fd0:	d002      	beq.n	8002fd8 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8002fd2:	2302      	movs	r3, #2
 8002fd4:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002fd6:	e10b      	b.n	80031f0 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8002fd8:	68bb      	ldr	r3, [r7, #8]
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d002      	beq.n	8002fe4 <HAL_SPI_Transmit+0x52>
 8002fde:	88fb      	ldrh	r3, [r7, #6]
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d102      	bne.n	8002fea <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8002fe4:	2301      	movs	r3, #1
 8002fe6:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002fe8:	e102      	b.n	80031f0 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	2203      	movs	r2, #3
 8002fee:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	2200      	movs	r2, #0
 8002ff6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	68ba      	ldr	r2, [r7, #8]
 8002ffc:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	88fa      	ldrh	r2, [r7, #6]
 8003002:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	88fa      	ldrh	r2, [r7, #6]
 8003008:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	2200      	movs	r2, #0
 800300e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	2200      	movs	r2, #0
 8003014:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	2200      	movs	r2, #0
 800301a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	2200      	movs	r2, #0
 8003020:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	2200      	movs	r2, #0
 8003026:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	689b      	ldr	r3, [r3, #8]
 800302c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003030:	d10f      	bne.n	8003052 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	681a      	ldr	r2, [r3, #0]
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003040:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	681a      	ldr	r2, [r3, #0]
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003050:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800305c:	2b40      	cmp	r3, #64	; 0x40
 800305e:	d007      	beq.n	8003070 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	681a      	ldr	r2, [r3, #0]
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800306e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	68db      	ldr	r3, [r3, #12]
 8003074:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003078:	d14b      	bne.n	8003112 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	685b      	ldr	r3, [r3, #4]
 800307e:	2b00      	cmp	r3, #0
 8003080:	d002      	beq.n	8003088 <HAL_SPI_Transmit+0xf6>
 8003082:	8afb      	ldrh	r3, [r7, #22]
 8003084:	2b01      	cmp	r3, #1
 8003086:	d13e      	bne.n	8003106 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800308c:	881a      	ldrh	r2, [r3, #0]
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003098:	1c9a      	adds	r2, r3, #2
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80030a2:	b29b      	uxth	r3, r3
 80030a4:	3b01      	subs	r3, #1
 80030a6:	b29a      	uxth	r2, r3
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80030ac:	e02b      	b.n	8003106 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	689b      	ldr	r3, [r3, #8]
 80030b4:	f003 0302 	and.w	r3, r3, #2
 80030b8:	2b02      	cmp	r3, #2
 80030ba:	d112      	bne.n	80030e2 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030c0:	881a      	ldrh	r2, [r3, #0]
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030cc:	1c9a      	adds	r2, r3, #2
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80030d6:	b29b      	uxth	r3, r3
 80030d8:	3b01      	subs	r3, #1
 80030da:	b29a      	uxth	r2, r3
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	86da      	strh	r2, [r3, #54]	; 0x36
 80030e0:	e011      	b.n	8003106 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80030e2:	f7fe ff81 	bl	8001fe8 <HAL_GetTick>
 80030e6:	4602      	mov	r2, r0
 80030e8:	69bb      	ldr	r3, [r7, #24]
 80030ea:	1ad3      	subs	r3, r2, r3
 80030ec:	683a      	ldr	r2, [r7, #0]
 80030ee:	429a      	cmp	r2, r3
 80030f0:	d803      	bhi.n	80030fa <HAL_SPI_Transmit+0x168>
 80030f2:	683b      	ldr	r3, [r7, #0]
 80030f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030f8:	d102      	bne.n	8003100 <HAL_SPI_Transmit+0x16e>
 80030fa:	683b      	ldr	r3, [r7, #0]
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d102      	bne.n	8003106 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8003100:	2303      	movs	r3, #3
 8003102:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003104:	e074      	b.n	80031f0 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800310a:	b29b      	uxth	r3, r3
 800310c:	2b00      	cmp	r3, #0
 800310e:	d1ce      	bne.n	80030ae <HAL_SPI_Transmit+0x11c>
 8003110:	e04c      	b.n	80031ac <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	685b      	ldr	r3, [r3, #4]
 8003116:	2b00      	cmp	r3, #0
 8003118:	d002      	beq.n	8003120 <HAL_SPI_Transmit+0x18e>
 800311a:	8afb      	ldrh	r3, [r7, #22]
 800311c:	2b01      	cmp	r3, #1
 800311e:	d140      	bne.n	80031a2 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	330c      	adds	r3, #12
 800312a:	7812      	ldrb	r2, [r2, #0]
 800312c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003132:	1c5a      	adds	r2, r3, #1
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800313c:	b29b      	uxth	r3, r3
 800313e:	3b01      	subs	r3, #1
 8003140:	b29a      	uxth	r2, r3
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8003146:	e02c      	b.n	80031a2 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	689b      	ldr	r3, [r3, #8]
 800314e:	f003 0302 	and.w	r3, r3, #2
 8003152:	2b02      	cmp	r3, #2
 8003154:	d113      	bne.n	800317e <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	330c      	adds	r3, #12
 8003160:	7812      	ldrb	r2, [r2, #0]
 8003162:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003168:	1c5a      	adds	r2, r3, #1
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003172:	b29b      	uxth	r3, r3
 8003174:	3b01      	subs	r3, #1
 8003176:	b29a      	uxth	r2, r3
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	86da      	strh	r2, [r3, #54]	; 0x36
 800317c:	e011      	b.n	80031a2 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800317e:	f7fe ff33 	bl	8001fe8 <HAL_GetTick>
 8003182:	4602      	mov	r2, r0
 8003184:	69bb      	ldr	r3, [r7, #24]
 8003186:	1ad3      	subs	r3, r2, r3
 8003188:	683a      	ldr	r2, [r7, #0]
 800318a:	429a      	cmp	r2, r3
 800318c:	d803      	bhi.n	8003196 <HAL_SPI_Transmit+0x204>
 800318e:	683b      	ldr	r3, [r7, #0]
 8003190:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003194:	d102      	bne.n	800319c <HAL_SPI_Transmit+0x20a>
 8003196:	683b      	ldr	r3, [r7, #0]
 8003198:	2b00      	cmp	r3, #0
 800319a:	d102      	bne.n	80031a2 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 800319c:	2303      	movs	r3, #3
 800319e:	77fb      	strb	r3, [r7, #31]
          goto error;
 80031a0:	e026      	b.n	80031f0 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80031a6:	b29b      	uxth	r3, r3
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d1cd      	bne.n	8003148 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80031ac:	69ba      	ldr	r2, [r7, #24]
 80031ae:	6839      	ldr	r1, [r7, #0]
 80031b0:	68f8      	ldr	r0, [r7, #12]
 80031b2:	f000 fa55 	bl	8003660 <SPI_EndRxTxTransaction>
 80031b6:	4603      	mov	r3, r0
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d002      	beq.n	80031c2 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	2220      	movs	r2, #32
 80031c0:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	689b      	ldr	r3, [r3, #8]
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d10a      	bne.n	80031e0 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80031ca:	2300      	movs	r3, #0
 80031cc:	613b      	str	r3, [r7, #16]
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	68db      	ldr	r3, [r3, #12]
 80031d4:	613b      	str	r3, [r7, #16]
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	689b      	ldr	r3, [r3, #8]
 80031dc:	613b      	str	r3, [r7, #16]
 80031de:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d002      	beq.n	80031ee <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 80031e8:	2301      	movs	r3, #1
 80031ea:	77fb      	strb	r3, [r7, #31]
 80031ec:	e000      	b.n	80031f0 <HAL_SPI_Transmit+0x25e>
  }

error:
 80031ee:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	2201      	movs	r2, #1
 80031f4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	2200      	movs	r2, #0
 80031fc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003200:	7ffb      	ldrb	r3, [r7, #31]
}
 8003202:	4618      	mov	r0, r3
 8003204:	3720      	adds	r7, #32
 8003206:	46bd      	mov	sp, r7
 8003208:	bd80      	pop	{r7, pc}

0800320a <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800320a:	b580      	push	{r7, lr}
 800320c:	b08c      	sub	sp, #48	; 0x30
 800320e:	af00      	add	r7, sp, #0
 8003210:	60f8      	str	r0, [r7, #12]
 8003212:	60b9      	str	r1, [r7, #8]
 8003214:	607a      	str	r2, [r7, #4]
 8003216:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8003218:	2301      	movs	r3, #1
 800321a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800321c:	2300      	movs	r3, #0
 800321e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003228:	2b01      	cmp	r3, #1
 800322a:	d101      	bne.n	8003230 <HAL_SPI_TransmitReceive+0x26>
 800322c:	2302      	movs	r3, #2
 800322e:	e18a      	b.n	8003546 <HAL_SPI_TransmitReceive+0x33c>
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	2201      	movs	r2, #1
 8003234:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003238:	f7fe fed6 	bl	8001fe8 <HAL_GetTick>
 800323c:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003244:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	685b      	ldr	r3, [r3, #4]
 800324c:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800324e:	887b      	ldrh	r3, [r7, #2]
 8003250:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003252:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003256:	2b01      	cmp	r3, #1
 8003258:	d00f      	beq.n	800327a <HAL_SPI_TransmitReceive+0x70>
 800325a:	69fb      	ldr	r3, [r7, #28]
 800325c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003260:	d107      	bne.n	8003272 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	689b      	ldr	r3, [r3, #8]
 8003266:	2b00      	cmp	r3, #0
 8003268:	d103      	bne.n	8003272 <HAL_SPI_TransmitReceive+0x68>
 800326a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800326e:	2b04      	cmp	r3, #4
 8003270:	d003      	beq.n	800327a <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8003272:	2302      	movs	r3, #2
 8003274:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8003278:	e15b      	b.n	8003532 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800327a:	68bb      	ldr	r3, [r7, #8]
 800327c:	2b00      	cmp	r3, #0
 800327e:	d005      	beq.n	800328c <HAL_SPI_TransmitReceive+0x82>
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	2b00      	cmp	r3, #0
 8003284:	d002      	beq.n	800328c <HAL_SPI_TransmitReceive+0x82>
 8003286:	887b      	ldrh	r3, [r7, #2]
 8003288:	2b00      	cmp	r3, #0
 800328a:	d103      	bne.n	8003294 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800328c:	2301      	movs	r3, #1
 800328e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8003292:	e14e      	b.n	8003532 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800329a:	b2db      	uxtb	r3, r3
 800329c:	2b04      	cmp	r3, #4
 800329e:	d003      	beq.n	80032a8 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	2205      	movs	r2, #5
 80032a4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	2200      	movs	r2, #0
 80032ac:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	687a      	ldr	r2, [r7, #4]
 80032b2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	887a      	ldrh	r2, [r7, #2]
 80032b8:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	887a      	ldrh	r2, [r7, #2]
 80032be:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	68ba      	ldr	r2, [r7, #8]
 80032c4:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	887a      	ldrh	r2, [r7, #2]
 80032ca:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	887a      	ldrh	r2, [r7, #2]
 80032d0:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	2200      	movs	r2, #0
 80032d6:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	2200      	movs	r2, #0
 80032dc:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80032e8:	2b40      	cmp	r3, #64	; 0x40
 80032ea:	d007      	beq.n	80032fc <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	681a      	ldr	r2, [r3, #0]
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80032fa:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	68db      	ldr	r3, [r3, #12]
 8003300:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003304:	d178      	bne.n	80033f8 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	685b      	ldr	r3, [r3, #4]
 800330a:	2b00      	cmp	r3, #0
 800330c:	d002      	beq.n	8003314 <HAL_SPI_TransmitReceive+0x10a>
 800330e:	8b7b      	ldrh	r3, [r7, #26]
 8003310:	2b01      	cmp	r3, #1
 8003312:	d166      	bne.n	80033e2 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003318:	881a      	ldrh	r2, [r3, #0]
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003324:	1c9a      	adds	r2, r3, #2
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800332e:	b29b      	uxth	r3, r3
 8003330:	3b01      	subs	r3, #1
 8003332:	b29a      	uxth	r2, r3
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003338:	e053      	b.n	80033e2 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	689b      	ldr	r3, [r3, #8]
 8003340:	f003 0302 	and.w	r3, r3, #2
 8003344:	2b02      	cmp	r3, #2
 8003346:	d11b      	bne.n	8003380 <HAL_SPI_TransmitReceive+0x176>
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800334c:	b29b      	uxth	r3, r3
 800334e:	2b00      	cmp	r3, #0
 8003350:	d016      	beq.n	8003380 <HAL_SPI_TransmitReceive+0x176>
 8003352:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003354:	2b01      	cmp	r3, #1
 8003356:	d113      	bne.n	8003380 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800335c:	881a      	ldrh	r2, [r3, #0]
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003368:	1c9a      	adds	r2, r3, #2
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003372:	b29b      	uxth	r3, r3
 8003374:	3b01      	subs	r3, #1
 8003376:	b29a      	uxth	r2, r3
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800337c:	2300      	movs	r3, #0
 800337e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	689b      	ldr	r3, [r3, #8]
 8003386:	f003 0301 	and.w	r3, r3, #1
 800338a:	2b01      	cmp	r3, #1
 800338c:	d119      	bne.n	80033c2 <HAL_SPI_TransmitReceive+0x1b8>
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003392:	b29b      	uxth	r3, r3
 8003394:	2b00      	cmp	r3, #0
 8003396:	d014      	beq.n	80033c2 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	68da      	ldr	r2, [r3, #12]
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033a2:	b292      	uxth	r2, r2
 80033a4:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033aa:	1c9a      	adds	r2, r3, #2
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80033b4:	b29b      	uxth	r3, r3
 80033b6:	3b01      	subs	r3, #1
 80033b8:	b29a      	uxth	r2, r3
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80033be:	2301      	movs	r3, #1
 80033c0:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80033c2:	f7fe fe11 	bl	8001fe8 <HAL_GetTick>
 80033c6:	4602      	mov	r2, r0
 80033c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033ca:	1ad3      	subs	r3, r2, r3
 80033cc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80033ce:	429a      	cmp	r2, r3
 80033d0:	d807      	bhi.n	80033e2 <HAL_SPI_TransmitReceive+0x1d8>
 80033d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80033d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033d8:	d003      	beq.n	80033e2 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 80033da:	2303      	movs	r3, #3
 80033dc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80033e0:	e0a7      	b.n	8003532 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80033e6:	b29b      	uxth	r3, r3
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d1a6      	bne.n	800333a <HAL_SPI_TransmitReceive+0x130>
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80033f0:	b29b      	uxth	r3, r3
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d1a1      	bne.n	800333a <HAL_SPI_TransmitReceive+0x130>
 80033f6:	e07c      	b.n	80034f2 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	685b      	ldr	r3, [r3, #4]
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d002      	beq.n	8003406 <HAL_SPI_TransmitReceive+0x1fc>
 8003400:	8b7b      	ldrh	r3, [r7, #26]
 8003402:	2b01      	cmp	r3, #1
 8003404:	d16b      	bne.n	80034de <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	330c      	adds	r3, #12
 8003410:	7812      	ldrb	r2, [r2, #0]
 8003412:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003418:	1c5a      	adds	r2, r3, #1
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003422:	b29b      	uxth	r3, r3
 8003424:	3b01      	subs	r3, #1
 8003426:	b29a      	uxth	r2, r3
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800342c:	e057      	b.n	80034de <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	689b      	ldr	r3, [r3, #8]
 8003434:	f003 0302 	and.w	r3, r3, #2
 8003438:	2b02      	cmp	r3, #2
 800343a:	d11c      	bne.n	8003476 <HAL_SPI_TransmitReceive+0x26c>
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003440:	b29b      	uxth	r3, r3
 8003442:	2b00      	cmp	r3, #0
 8003444:	d017      	beq.n	8003476 <HAL_SPI_TransmitReceive+0x26c>
 8003446:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003448:	2b01      	cmp	r3, #1
 800344a:	d114      	bne.n	8003476 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	330c      	adds	r3, #12
 8003456:	7812      	ldrb	r2, [r2, #0]
 8003458:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800345e:	1c5a      	adds	r2, r3, #1
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003468:	b29b      	uxth	r3, r3
 800346a:	3b01      	subs	r3, #1
 800346c:	b29a      	uxth	r2, r3
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003472:	2300      	movs	r3, #0
 8003474:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	689b      	ldr	r3, [r3, #8]
 800347c:	f003 0301 	and.w	r3, r3, #1
 8003480:	2b01      	cmp	r3, #1
 8003482:	d119      	bne.n	80034b8 <HAL_SPI_TransmitReceive+0x2ae>
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003488:	b29b      	uxth	r3, r3
 800348a:	2b00      	cmp	r3, #0
 800348c:	d014      	beq.n	80034b8 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	68da      	ldr	r2, [r3, #12]
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003498:	b2d2      	uxtb	r2, r2
 800349a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034a0:	1c5a      	adds	r2, r3, #1
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80034aa:	b29b      	uxth	r3, r3
 80034ac:	3b01      	subs	r3, #1
 80034ae:	b29a      	uxth	r2, r3
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80034b4:	2301      	movs	r3, #1
 80034b6:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80034b8:	f7fe fd96 	bl	8001fe8 <HAL_GetTick>
 80034bc:	4602      	mov	r2, r0
 80034be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034c0:	1ad3      	subs	r3, r2, r3
 80034c2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80034c4:	429a      	cmp	r2, r3
 80034c6:	d803      	bhi.n	80034d0 <HAL_SPI_TransmitReceive+0x2c6>
 80034c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80034ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80034ce:	d102      	bne.n	80034d6 <HAL_SPI_TransmitReceive+0x2cc>
 80034d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d103      	bne.n	80034de <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 80034d6:	2303      	movs	r3, #3
 80034d8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80034dc:	e029      	b.n	8003532 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80034e2:	b29b      	uxth	r3, r3
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d1a2      	bne.n	800342e <HAL_SPI_TransmitReceive+0x224>
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80034ec:	b29b      	uxth	r3, r3
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d19d      	bne.n	800342e <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80034f2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80034f4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80034f6:	68f8      	ldr	r0, [r7, #12]
 80034f8:	f000 f8b2 	bl	8003660 <SPI_EndRxTxTransaction>
 80034fc:	4603      	mov	r3, r0
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d006      	beq.n	8003510 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8003502:	2301      	movs	r3, #1
 8003504:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	2220      	movs	r2, #32
 800350c:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800350e:	e010      	b.n	8003532 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	689b      	ldr	r3, [r3, #8]
 8003514:	2b00      	cmp	r3, #0
 8003516:	d10b      	bne.n	8003530 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003518:	2300      	movs	r3, #0
 800351a:	617b      	str	r3, [r7, #20]
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	68db      	ldr	r3, [r3, #12]
 8003522:	617b      	str	r3, [r7, #20]
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	689b      	ldr	r3, [r3, #8]
 800352a:	617b      	str	r3, [r7, #20]
 800352c:	697b      	ldr	r3, [r7, #20]
 800352e:	e000      	b.n	8003532 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8003530:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	2201      	movs	r2, #1
 8003536:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	2200      	movs	r2, #0
 800353e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003542:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8003546:	4618      	mov	r0, r3
 8003548:	3730      	adds	r7, #48	; 0x30
 800354a:	46bd      	mov	sp, r7
 800354c:	bd80      	pop	{r7, pc}
	...

08003550 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003550:	b580      	push	{r7, lr}
 8003552:	b088      	sub	sp, #32
 8003554:	af00      	add	r7, sp, #0
 8003556:	60f8      	str	r0, [r7, #12]
 8003558:	60b9      	str	r1, [r7, #8]
 800355a:	603b      	str	r3, [r7, #0]
 800355c:	4613      	mov	r3, r2
 800355e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003560:	f7fe fd42 	bl	8001fe8 <HAL_GetTick>
 8003564:	4602      	mov	r2, r0
 8003566:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003568:	1a9b      	subs	r3, r3, r2
 800356a:	683a      	ldr	r2, [r7, #0]
 800356c:	4413      	add	r3, r2
 800356e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003570:	f7fe fd3a 	bl	8001fe8 <HAL_GetTick>
 8003574:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003576:	4b39      	ldr	r3, [pc, #228]	; (800365c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	015b      	lsls	r3, r3, #5
 800357c:	0d1b      	lsrs	r3, r3, #20
 800357e:	69fa      	ldr	r2, [r7, #28]
 8003580:	fb02 f303 	mul.w	r3, r2, r3
 8003584:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003586:	e054      	b.n	8003632 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003588:	683b      	ldr	r3, [r7, #0]
 800358a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800358e:	d050      	beq.n	8003632 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003590:	f7fe fd2a 	bl	8001fe8 <HAL_GetTick>
 8003594:	4602      	mov	r2, r0
 8003596:	69bb      	ldr	r3, [r7, #24]
 8003598:	1ad3      	subs	r3, r2, r3
 800359a:	69fa      	ldr	r2, [r7, #28]
 800359c:	429a      	cmp	r2, r3
 800359e:	d902      	bls.n	80035a6 <SPI_WaitFlagStateUntilTimeout+0x56>
 80035a0:	69fb      	ldr	r3, [r7, #28]
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d13d      	bne.n	8003622 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	685a      	ldr	r2, [r3, #4]
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80035b4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	685b      	ldr	r3, [r3, #4]
 80035ba:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80035be:	d111      	bne.n	80035e4 <SPI_WaitFlagStateUntilTimeout+0x94>
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	689b      	ldr	r3, [r3, #8]
 80035c4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80035c8:	d004      	beq.n	80035d4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	689b      	ldr	r3, [r3, #8]
 80035ce:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80035d2:	d107      	bne.n	80035e4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	681a      	ldr	r2, [r3, #0]
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80035e2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035e8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80035ec:	d10f      	bne.n	800360e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	681a      	ldr	r2, [r3, #0]
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80035fc:	601a      	str	r2, [r3, #0]
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	681a      	ldr	r2, [r3, #0]
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800360c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	2201      	movs	r2, #1
 8003612:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	2200      	movs	r2, #0
 800361a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800361e:	2303      	movs	r3, #3
 8003620:	e017      	b.n	8003652 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003622:	697b      	ldr	r3, [r7, #20]
 8003624:	2b00      	cmp	r3, #0
 8003626:	d101      	bne.n	800362c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003628:	2300      	movs	r3, #0
 800362a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800362c:	697b      	ldr	r3, [r7, #20]
 800362e:	3b01      	subs	r3, #1
 8003630:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	689a      	ldr	r2, [r3, #8]
 8003638:	68bb      	ldr	r3, [r7, #8]
 800363a:	4013      	ands	r3, r2
 800363c:	68ba      	ldr	r2, [r7, #8]
 800363e:	429a      	cmp	r2, r3
 8003640:	bf0c      	ite	eq
 8003642:	2301      	moveq	r3, #1
 8003644:	2300      	movne	r3, #0
 8003646:	b2db      	uxtb	r3, r3
 8003648:	461a      	mov	r2, r3
 800364a:	79fb      	ldrb	r3, [r7, #7]
 800364c:	429a      	cmp	r2, r3
 800364e:	d19b      	bne.n	8003588 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003650:	2300      	movs	r3, #0
}
 8003652:	4618      	mov	r0, r3
 8003654:	3720      	adds	r7, #32
 8003656:	46bd      	mov	sp, r7
 8003658:	bd80      	pop	{r7, pc}
 800365a:	bf00      	nop
 800365c:	20000004 	.word	0x20000004

08003660 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003660:	b580      	push	{r7, lr}
 8003662:	b088      	sub	sp, #32
 8003664:	af02      	add	r7, sp, #8
 8003666:	60f8      	str	r0, [r7, #12]
 8003668:	60b9      	str	r1, [r7, #8]
 800366a:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800366c:	4b1b      	ldr	r3, [pc, #108]	; (80036dc <SPI_EndRxTxTransaction+0x7c>)
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	4a1b      	ldr	r2, [pc, #108]	; (80036e0 <SPI_EndRxTxTransaction+0x80>)
 8003672:	fba2 2303 	umull	r2, r3, r2, r3
 8003676:	0d5b      	lsrs	r3, r3, #21
 8003678:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800367c:	fb02 f303 	mul.w	r3, r2, r3
 8003680:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	685b      	ldr	r3, [r3, #4]
 8003686:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800368a:	d112      	bne.n	80036b2 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	9300      	str	r3, [sp, #0]
 8003690:	68bb      	ldr	r3, [r7, #8]
 8003692:	2200      	movs	r2, #0
 8003694:	2180      	movs	r1, #128	; 0x80
 8003696:	68f8      	ldr	r0, [r7, #12]
 8003698:	f7ff ff5a 	bl	8003550 <SPI_WaitFlagStateUntilTimeout>
 800369c:	4603      	mov	r3, r0
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d016      	beq.n	80036d0 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80036a6:	f043 0220 	orr.w	r2, r3, #32
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80036ae:	2303      	movs	r3, #3
 80036b0:	e00f      	b.n	80036d2 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80036b2:	697b      	ldr	r3, [r7, #20]
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d00a      	beq.n	80036ce <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 80036b8:	697b      	ldr	r3, [r7, #20]
 80036ba:	3b01      	subs	r3, #1
 80036bc:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	689b      	ldr	r3, [r3, #8]
 80036c4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80036c8:	2b80      	cmp	r3, #128	; 0x80
 80036ca:	d0f2      	beq.n	80036b2 <SPI_EndRxTxTransaction+0x52>
 80036cc:	e000      	b.n	80036d0 <SPI_EndRxTxTransaction+0x70>
        break;
 80036ce:	bf00      	nop
  }

  return HAL_OK;
 80036d0:	2300      	movs	r3, #0
}
 80036d2:	4618      	mov	r0, r3
 80036d4:	3718      	adds	r7, #24
 80036d6:	46bd      	mov	sp, r7
 80036d8:	bd80      	pop	{r7, pc}
 80036da:	bf00      	nop
 80036dc:	20000004 	.word	0x20000004
 80036e0:	165e9f81 	.word	0x165e9f81

080036e4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80036e4:	b580      	push	{r7, lr}
 80036e6:	b082      	sub	sp, #8
 80036e8:	af00      	add	r7, sp, #0
 80036ea:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d101      	bne.n	80036f6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80036f2:	2301      	movs	r3, #1
 80036f4:	e03f      	b.n	8003776 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80036fc:	b2db      	uxtb	r3, r3
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d106      	bne.n	8003710 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	2200      	movs	r2, #0
 8003706:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800370a:	6878      	ldr	r0, [r7, #4]
 800370c:	f7fe faea 	bl	8001ce4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	2224      	movs	r2, #36	; 0x24
 8003714:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	68da      	ldr	r2, [r3, #12]
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003726:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003728:	6878      	ldr	r0, [r7, #4]
 800372a:	f000 f929 	bl	8003980 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	691a      	ldr	r2, [r3, #16]
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800373c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	695a      	ldr	r2, [r3, #20]
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800374c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	68da      	ldr	r2, [r3, #12]
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800375c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	2200      	movs	r2, #0
 8003762:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	2220      	movs	r2, #32
 8003768:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	2220      	movs	r2, #32
 8003770:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003774:	2300      	movs	r3, #0
}
 8003776:	4618      	mov	r0, r3
 8003778:	3708      	adds	r7, #8
 800377a:	46bd      	mov	sp, r7
 800377c:	bd80      	pop	{r7, pc}

0800377e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800377e:	b580      	push	{r7, lr}
 8003780:	b08a      	sub	sp, #40	; 0x28
 8003782:	af02      	add	r7, sp, #8
 8003784:	60f8      	str	r0, [r7, #12]
 8003786:	60b9      	str	r1, [r7, #8]
 8003788:	603b      	str	r3, [r7, #0]
 800378a:	4613      	mov	r3, r2
 800378c:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800378e:	2300      	movs	r3, #0
 8003790:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003798:	b2db      	uxtb	r3, r3
 800379a:	2b20      	cmp	r3, #32
 800379c:	d17c      	bne.n	8003898 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800379e:	68bb      	ldr	r3, [r7, #8]
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d002      	beq.n	80037aa <HAL_UART_Transmit+0x2c>
 80037a4:	88fb      	ldrh	r3, [r7, #6]
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d101      	bne.n	80037ae <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80037aa:	2301      	movs	r3, #1
 80037ac:	e075      	b.n	800389a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80037b4:	2b01      	cmp	r3, #1
 80037b6:	d101      	bne.n	80037bc <HAL_UART_Transmit+0x3e>
 80037b8:	2302      	movs	r3, #2
 80037ba:	e06e      	b.n	800389a <HAL_UART_Transmit+0x11c>
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	2201      	movs	r2, #1
 80037c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	2200      	movs	r2, #0
 80037c8:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	2221      	movs	r2, #33	; 0x21
 80037ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80037d2:	f7fe fc09 	bl	8001fe8 <HAL_GetTick>
 80037d6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	88fa      	ldrh	r2, [r7, #6]
 80037dc:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	88fa      	ldrh	r2, [r7, #6]
 80037e2:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	689b      	ldr	r3, [r3, #8]
 80037e8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80037ec:	d108      	bne.n	8003800 <HAL_UART_Transmit+0x82>
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	691b      	ldr	r3, [r3, #16]
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d104      	bne.n	8003800 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80037f6:	2300      	movs	r3, #0
 80037f8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80037fa:	68bb      	ldr	r3, [r7, #8]
 80037fc:	61bb      	str	r3, [r7, #24]
 80037fe:	e003      	b.n	8003808 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8003800:	68bb      	ldr	r3, [r7, #8]
 8003802:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003804:	2300      	movs	r3, #0
 8003806:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	2200      	movs	r2, #0
 800380c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8003810:	e02a      	b.n	8003868 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003812:	683b      	ldr	r3, [r7, #0]
 8003814:	9300      	str	r3, [sp, #0]
 8003816:	697b      	ldr	r3, [r7, #20]
 8003818:	2200      	movs	r2, #0
 800381a:	2180      	movs	r1, #128	; 0x80
 800381c:	68f8      	ldr	r0, [r7, #12]
 800381e:	f000 f840 	bl	80038a2 <UART_WaitOnFlagUntilTimeout>
 8003822:	4603      	mov	r3, r0
 8003824:	2b00      	cmp	r3, #0
 8003826:	d001      	beq.n	800382c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8003828:	2303      	movs	r3, #3
 800382a:	e036      	b.n	800389a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800382c:	69fb      	ldr	r3, [r7, #28]
 800382e:	2b00      	cmp	r3, #0
 8003830:	d10b      	bne.n	800384a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003832:	69bb      	ldr	r3, [r7, #24]
 8003834:	881b      	ldrh	r3, [r3, #0]
 8003836:	461a      	mov	r2, r3
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003840:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003842:	69bb      	ldr	r3, [r7, #24]
 8003844:	3302      	adds	r3, #2
 8003846:	61bb      	str	r3, [r7, #24]
 8003848:	e007      	b.n	800385a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800384a:	69fb      	ldr	r3, [r7, #28]
 800384c:	781a      	ldrb	r2, [r3, #0]
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003854:	69fb      	ldr	r3, [r7, #28]
 8003856:	3301      	adds	r3, #1
 8003858:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800385e:	b29b      	uxth	r3, r3
 8003860:	3b01      	subs	r3, #1
 8003862:	b29a      	uxth	r2, r3
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800386c:	b29b      	uxth	r3, r3
 800386e:	2b00      	cmp	r3, #0
 8003870:	d1cf      	bne.n	8003812 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003872:	683b      	ldr	r3, [r7, #0]
 8003874:	9300      	str	r3, [sp, #0]
 8003876:	697b      	ldr	r3, [r7, #20]
 8003878:	2200      	movs	r2, #0
 800387a:	2140      	movs	r1, #64	; 0x40
 800387c:	68f8      	ldr	r0, [r7, #12]
 800387e:	f000 f810 	bl	80038a2 <UART_WaitOnFlagUntilTimeout>
 8003882:	4603      	mov	r3, r0
 8003884:	2b00      	cmp	r3, #0
 8003886:	d001      	beq.n	800388c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8003888:	2303      	movs	r3, #3
 800388a:	e006      	b.n	800389a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	2220      	movs	r2, #32
 8003890:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003894:	2300      	movs	r3, #0
 8003896:	e000      	b.n	800389a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8003898:	2302      	movs	r3, #2
  }
}
 800389a:	4618      	mov	r0, r3
 800389c:	3720      	adds	r7, #32
 800389e:	46bd      	mov	sp, r7
 80038a0:	bd80      	pop	{r7, pc}

080038a2 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80038a2:	b580      	push	{r7, lr}
 80038a4:	b090      	sub	sp, #64	; 0x40
 80038a6:	af00      	add	r7, sp, #0
 80038a8:	60f8      	str	r0, [r7, #12]
 80038aa:	60b9      	str	r1, [r7, #8]
 80038ac:	603b      	str	r3, [r7, #0]
 80038ae:	4613      	mov	r3, r2
 80038b0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80038b2:	e050      	b.n	8003956 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80038b4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80038b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80038ba:	d04c      	beq.n	8003956 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80038bc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d007      	beq.n	80038d2 <UART_WaitOnFlagUntilTimeout+0x30>
 80038c2:	f7fe fb91 	bl	8001fe8 <HAL_GetTick>
 80038c6:	4602      	mov	r2, r0
 80038c8:	683b      	ldr	r3, [r7, #0]
 80038ca:	1ad3      	subs	r3, r2, r3
 80038cc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80038ce:	429a      	cmp	r2, r3
 80038d0:	d241      	bcs.n	8003956 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	330c      	adds	r3, #12
 80038d8:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038dc:	e853 3f00 	ldrex	r3, [r3]
 80038e0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80038e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038e4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80038e8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	330c      	adds	r3, #12
 80038f0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80038f2:	637a      	str	r2, [r7, #52]	; 0x34
 80038f4:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038f6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80038f8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80038fa:	e841 2300 	strex	r3, r2, [r1]
 80038fe:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003900:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003902:	2b00      	cmp	r3, #0
 8003904:	d1e5      	bne.n	80038d2 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	3314      	adds	r3, #20
 800390c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800390e:	697b      	ldr	r3, [r7, #20]
 8003910:	e853 3f00 	ldrex	r3, [r3]
 8003914:	613b      	str	r3, [r7, #16]
   return(result);
 8003916:	693b      	ldr	r3, [r7, #16]
 8003918:	f023 0301 	bic.w	r3, r3, #1
 800391c:	63bb      	str	r3, [r7, #56]	; 0x38
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	3314      	adds	r3, #20
 8003924:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003926:	623a      	str	r2, [r7, #32]
 8003928:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800392a:	69f9      	ldr	r1, [r7, #28]
 800392c:	6a3a      	ldr	r2, [r7, #32]
 800392e:	e841 2300 	strex	r3, r2, [r1]
 8003932:	61bb      	str	r3, [r7, #24]
   return(result);
 8003934:	69bb      	ldr	r3, [r7, #24]
 8003936:	2b00      	cmp	r3, #0
 8003938:	d1e5      	bne.n	8003906 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	2220      	movs	r2, #32
 800393e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	2220      	movs	r2, #32
 8003946:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	2200      	movs	r2, #0
 800394e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8003952:	2303      	movs	r3, #3
 8003954:	e00f      	b.n	8003976 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	681a      	ldr	r2, [r3, #0]
 800395c:	68bb      	ldr	r3, [r7, #8]
 800395e:	4013      	ands	r3, r2
 8003960:	68ba      	ldr	r2, [r7, #8]
 8003962:	429a      	cmp	r2, r3
 8003964:	bf0c      	ite	eq
 8003966:	2301      	moveq	r3, #1
 8003968:	2300      	movne	r3, #0
 800396a:	b2db      	uxtb	r3, r3
 800396c:	461a      	mov	r2, r3
 800396e:	79fb      	ldrb	r3, [r7, #7]
 8003970:	429a      	cmp	r2, r3
 8003972:	d09f      	beq.n	80038b4 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003974:	2300      	movs	r3, #0
}
 8003976:	4618      	mov	r0, r3
 8003978:	3740      	adds	r7, #64	; 0x40
 800397a:	46bd      	mov	sp, r7
 800397c:	bd80      	pop	{r7, pc}
	...

08003980 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003980:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003984:	b0c0      	sub	sp, #256	; 0x100
 8003986:	af00      	add	r7, sp, #0
 8003988:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800398c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	691b      	ldr	r3, [r3, #16]
 8003994:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003998:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800399c:	68d9      	ldr	r1, [r3, #12]
 800399e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80039a2:	681a      	ldr	r2, [r3, #0]
 80039a4:	ea40 0301 	orr.w	r3, r0, r1
 80039a8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80039aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80039ae:	689a      	ldr	r2, [r3, #8]
 80039b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80039b4:	691b      	ldr	r3, [r3, #16]
 80039b6:	431a      	orrs	r2, r3
 80039b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80039bc:	695b      	ldr	r3, [r3, #20]
 80039be:	431a      	orrs	r2, r3
 80039c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80039c4:	69db      	ldr	r3, [r3, #28]
 80039c6:	4313      	orrs	r3, r2
 80039c8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80039cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	68db      	ldr	r3, [r3, #12]
 80039d4:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80039d8:	f021 010c 	bic.w	r1, r1, #12
 80039dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80039e0:	681a      	ldr	r2, [r3, #0]
 80039e2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80039e6:	430b      	orrs	r3, r1
 80039e8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80039ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	695b      	ldr	r3, [r3, #20]
 80039f2:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80039f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80039fa:	6999      	ldr	r1, [r3, #24]
 80039fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003a00:	681a      	ldr	r2, [r3, #0]
 8003a02:	ea40 0301 	orr.w	r3, r0, r1
 8003a06:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003a08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003a0c:	681a      	ldr	r2, [r3, #0]
 8003a0e:	4b8f      	ldr	r3, [pc, #572]	; (8003c4c <UART_SetConfig+0x2cc>)
 8003a10:	429a      	cmp	r2, r3
 8003a12:	d005      	beq.n	8003a20 <UART_SetConfig+0xa0>
 8003a14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003a18:	681a      	ldr	r2, [r3, #0]
 8003a1a:	4b8d      	ldr	r3, [pc, #564]	; (8003c50 <UART_SetConfig+0x2d0>)
 8003a1c:	429a      	cmp	r2, r3
 8003a1e:	d104      	bne.n	8003a2a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003a20:	f7ff fa1a 	bl	8002e58 <HAL_RCC_GetPCLK2Freq>
 8003a24:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8003a28:	e003      	b.n	8003a32 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003a2a:	f7ff fa01 	bl	8002e30 <HAL_RCC_GetPCLK1Freq>
 8003a2e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003a32:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003a36:	69db      	ldr	r3, [r3, #28]
 8003a38:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003a3c:	f040 810c 	bne.w	8003c58 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003a40:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003a44:	2200      	movs	r2, #0
 8003a46:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8003a4a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8003a4e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8003a52:	4622      	mov	r2, r4
 8003a54:	462b      	mov	r3, r5
 8003a56:	1891      	adds	r1, r2, r2
 8003a58:	65b9      	str	r1, [r7, #88]	; 0x58
 8003a5a:	415b      	adcs	r3, r3
 8003a5c:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003a5e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003a62:	4621      	mov	r1, r4
 8003a64:	eb12 0801 	adds.w	r8, r2, r1
 8003a68:	4629      	mov	r1, r5
 8003a6a:	eb43 0901 	adc.w	r9, r3, r1
 8003a6e:	f04f 0200 	mov.w	r2, #0
 8003a72:	f04f 0300 	mov.w	r3, #0
 8003a76:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003a7a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003a7e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003a82:	4690      	mov	r8, r2
 8003a84:	4699      	mov	r9, r3
 8003a86:	4623      	mov	r3, r4
 8003a88:	eb18 0303 	adds.w	r3, r8, r3
 8003a8c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8003a90:	462b      	mov	r3, r5
 8003a92:	eb49 0303 	adc.w	r3, r9, r3
 8003a96:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8003a9a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003a9e:	685b      	ldr	r3, [r3, #4]
 8003aa0:	2200      	movs	r2, #0
 8003aa2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8003aa6:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8003aaa:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8003aae:	460b      	mov	r3, r1
 8003ab0:	18db      	adds	r3, r3, r3
 8003ab2:	653b      	str	r3, [r7, #80]	; 0x50
 8003ab4:	4613      	mov	r3, r2
 8003ab6:	eb42 0303 	adc.w	r3, r2, r3
 8003aba:	657b      	str	r3, [r7, #84]	; 0x54
 8003abc:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8003ac0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8003ac4:	f7fc feea 	bl	800089c <__aeabi_uldivmod>
 8003ac8:	4602      	mov	r2, r0
 8003aca:	460b      	mov	r3, r1
 8003acc:	4b61      	ldr	r3, [pc, #388]	; (8003c54 <UART_SetConfig+0x2d4>)
 8003ace:	fba3 2302 	umull	r2, r3, r3, r2
 8003ad2:	095b      	lsrs	r3, r3, #5
 8003ad4:	011c      	lsls	r4, r3, #4
 8003ad6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003ada:	2200      	movs	r2, #0
 8003adc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003ae0:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8003ae4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8003ae8:	4642      	mov	r2, r8
 8003aea:	464b      	mov	r3, r9
 8003aec:	1891      	adds	r1, r2, r2
 8003aee:	64b9      	str	r1, [r7, #72]	; 0x48
 8003af0:	415b      	adcs	r3, r3
 8003af2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003af4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003af8:	4641      	mov	r1, r8
 8003afa:	eb12 0a01 	adds.w	sl, r2, r1
 8003afe:	4649      	mov	r1, r9
 8003b00:	eb43 0b01 	adc.w	fp, r3, r1
 8003b04:	f04f 0200 	mov.w	r2, #0
 8003b08:	f04f 0300 	mov.w	r3, #0
 8003b0c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003b10:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003b14:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003b18:	4692      	mov	sl, r2
 8003b1a:	469b      	mov	fp, r3
 8003b1c:	4643      	mov	r3, r8
 8003b1e:	eb1a 0303 	adds.w	r3, sl, r3
 8003b22:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003b26:	464b      	mov	r3, r9
 8003b28:	eb4b 0303 	adc.w	r3, fp, r3
 8003b2c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003b30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b34:	685b      	ldr	r3, [r3, #4]
 8003b36:	2200      	movs	r2, #0
 8003b38:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003b3c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8003b40:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8003b44:	460b      	mov	r3, r1
 8003b46:	18db      	adds	r3, r3, r3
 8003b48:	643b      	str	r3, [r7, #64]	; 0x40
 8003b4a:	4613      	mov	r3, r2
 8003b4c:	eb42 0303 	adc.w	r3, r2, r3
 8003b50:	647b      	str	r3, [r7, #68]	; 0x44
 8003b52:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003b56:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8003b5a:	f7fc fe9f 	bl	800089c <__aeabi_uldivmod>
 8003b5e:	4602      	mov	r2, r0
 8003b60:	460b      	mov	r3, r1
 8003b62:	4611      	mov	r1, r2
 8003b64:	4b3b      	ldr	r3, [pc, #236]	; (8003c54 <UART_SetConfig+0x2d4>)
 8003b66:	fba3 2301 	umull	r2, r3, r3, r1
 8003b6a:	095b      	lsrs	r3, r3, #5
 8003b6c:	2264      	movs	r2, #100	; 0x64
 8003b6e:	fb02 f303 	mul.w	r3, r2, r3
 8003b72:	1acb      	subs	r3, r1, r3
 8003b74:	00db      	lsls	r3, r3, #3
 8003b76:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8003b7a:	4b36      	ldr	r3, [pc, #216]	; (8003c54 <UART_SetConfig+0x2d4>)
 8003b7c:	fba3 2302 	umull	r2, r3, r3, r2
 8003b80:	095b      	lsrs	r3, r3, #5
 8003b82:	005b      	lsls	r3, r3, #1
 8003b84:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003b88:	441c      	add	r4, r3
 8003b8a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003b8e:	2200      	movs	r2, #0
 8003b90:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003b94:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8003b98:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8003b9c:	4642      	mov	r2, r8
 8003b9e:	464b      	mov	r3, r9
 8003ba0:	1891      	adds	r1, r2, r2
 8003ba2:	63b9      	str	r1, [r7, #56]	; 0x38
 8003ba4:	415b      	adcs	r3, r3
 8003ba6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003ba8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003bac:	4641      	mov	r1, r8
 8003bae:	1851      	adds	r1, r2, r1
 8003bb0:	6339      	str	r1, [r7, #48]	; 0x30
 8003bb2:	4649      	mov	r1, r9
 8003bb4:	414b      	adcs	r3, r1
 8003bb6:	637b      	str	r3, [r7, #52]	; 0x34
 8003bb8:	f04f 0200 	mov.w	r2, #0
 8003bbc:	f04f 0300 	mov.w	r3, #0
 8003bc0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8003bc4:	4659      	mov	r1, fp
 8003bc6:	00cb      	lsls	r3, r1, #3
 8003bc8:	4651      	mov	r1, sl
 8003bca:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003bce:	4651      	mov	r1, sl
 8003bd0:	00ca      	lsls	r2, r1, #3
 8003bd2:	4610      	mov	r0, r2
 8003bd4:	4619      	mov	r1, r3
 8003bd6:	4603      	mov	r3, r0
 8003bd8:	4642      	mov	r2, r8
 8003bda:	189b      	adds	r3, r3, r2
 8003bdc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003be0:	464b      	mov	r3, r9
 8003be2:	460a      	mov	r2, r1
 8003be4:	eb42 0303 	adc.w	r3, r2, r3
 8003be8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003bec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003bf0:	685b      	ldr	r3, [r3, #4]
 8003bf2:	2200      	movs	r2, #0
 8003bf4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003bf8:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8003bfc:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8003c00:	460b      	mov	r3, r1
 8003c02:	18db      	adds	r3, r3, r3
 8003c04:	62bb      	str	r3, [r7, #40]	; 0x28
 8003c06:	4613      	mov	r3, r2
 8003c08:	eb42 0303 	adc.w	r3, r2, r3
 8003c0c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003c0e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003c12:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8003c16:	f7fc fe41 	bl	800089c <__aeabi_uldivmod>
 8003c1a:	4602      	mov	r2, r0
 8003c1c:	460b      	mov	r3, r1
 8003c1e:	4b0d      	ldr	r3, [pc, #52]	; (8003c54 <UART_SetConfig+0x2d4>)
 8003c20:	fba3 1302 	umull	r1, r3, r3, r2
 8003c24:	095b      	lsrs	r3, r3, #5
 8003c26:	2164      	movs	r1, #100	; 0x64
 8003c28:	fb01 f303 	mul.w	r3, r1, r3
 8003c2c:	1ad3      	subs	r3, r2, r3
 8003c2e:	00db      	lsls	r3, r3, #3
 8003c30:	3332      	adds	r3, #50	; 0x32
 8003c32:	4a08      	ldr	r2, [pc, #32]	; (8003c54 <UART_SetConfig+0x2d4>)
 8003c34:	fba2 2303 	umull	r2, r3, r2, r3
 8003c38:	095b      	lsrs	r3, r3, #5
 8003c3a:	f003 0207 	and.w	r2, r3, #7
 8003c3e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	4422      	add	r2, r4
 8003c46:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003c48:	e105      	b.n	8003e56 <UART_SetConfig+0x4d6>
 8003c4a:	bf00      	nop
 8003c4c:	40011000 	.word	0x40011000
 8003c50:	40011400 	.word	0x40011400
 8003c54:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003c58:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003c5c:	2200      	movs	r2, #0
 8003c5e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8003c62:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8003c66:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8003c6a:	4642      	mov	r2, r8
 8003c6c:	464b      	mov	r3, r9
 8003c6e:	1891      	adds	r1, r2, r2
 8003c70:	6239      	str	r1, [r7, #32]
 8003c72:	415b      	adcs	r3, r3
 8003c74:	627b      	str	r3, [r7, #36]	; 0x24
 8003c76:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003c7a:	4641      	mov	r1, r8
 8003c7c:	1854      	adds	r4, r2, r1
 8003c7e:	4649      	mov	r1, r9
 8003c80:	eb43 0501 	adc.w	r5, r3, r1
 8003c84:	f04f 0200 	mov.w	r2, #0
 8003c88:	f04f 0300 	mov.w	r3, #0
 8003c8c:	00eb      	lsls	r3, r5, #3
 8003c8e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003c92:	00e2      	lsls	r2, r4, #3
 8003c94:	4614      	mov	r4, r2
 8003c96:	461d      	mov	r5, r3
 8003c98:	4643      	mov	r3, r8
 8003c9a:	18e3      	adds	r3, r4, r3
 8003c9c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003ca0:	464b      	mov	r3, r9
 8003ca2:	eb45 0303 	adc.w	r3, r5, r3
 8003ca6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8003caa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003cae:	685b      	ldr	r3, [r3, #4]
 8003cb0:	2200      	movs	r2, #0
 8003cb2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003cb6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003cba:	f04f 0200 	mov.w	r2, #0
 8003cbe:	f04f 0300 	mov.w	r3, #0
 8003cc2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8003cc6:	4629      	mov	r1, r5
 8003cc8:	008b      	lsls	r3, r1, #2
 8003cca:	4621      	mov	r1, r4
 8003ccc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003cd0:	4621      	mov	r1, r4
 8003cd2:	008a      	lsls	r2, r1, #2
 8003cd4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8003cd8:	f7fc fde0 	bl	800089c <__aeabi_uldivmod>
 8003cdc:	4602      	mov	r2, r0
 8003cde:	460b      	mov	r3, r1
 8003ce0:	4b60      	ldr	r3, [pc, #384]	; (8003e64 <UART_SetConfig+0x4e4>)
 8003ce2:	fba3 2302 	umull	r2, r3, r3, r2
 8003ce6:	095b      	lsrs	r3, r3, #5
 8003ce8:	011c      	lsls	r4, r3, #4
 8003cea:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003cee:	2200      	movs	r2, #0
 8003cf0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003cf4:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8003cf8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8003cfc:	4642      	mov	r2, r8
 8003cfe:	464b      	mov	r3, r9
 8003d00:	1891      	adds	r1, r2, r2
 8003d02:	61b9      	str	r1, [r7, #24]
 8003d04:	415b      	adcs	r3, r3
 8003d06:	61fb      	str	r3, [r7, #28]
 8003d08:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003d0c:	4641      	mov	r1, r8
 8003d0e:	1851      	adds	r1, r2, r1
 8003d10:	6139      	str	r1, [r7, #16]
 8003d12:	4649      	mov	r1, r9
 8003d14:	414b      	adcs	r3, r1
 8003d16:	617b      	str	r3, [r7, #20]
 8003d18:	f04f 0200 	mov.w	r2, #0
 8003d1c:	f04f 0300 	mov.w	r3, #0
 8003d20:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003d24:	4659      	mov	r1, fp
 8003d26:	00cb      	lsls	r3, r1, #3
 8003d28:	4651      	mov	r1, sl
 8003d2a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003d2e:	4651      	mov	r1, sl
 8003d30:	00ca      	lsls	r2, r1, #3
 8003d32:	4610      	mov	r0, r2
 8003d34:	4619      	mov	r1, r3
 8003d36:	4603      	mov	r3, r0
 8003d38:	4642      	mov	r2, r8
 8003d3a:	189b      	adds	r3, r3, r2
 8003d3c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003d40:	464b      	mov	r3, r9
 8003d42:	460a      	mov	r2, r1
 8003d44:	eb42 0303 	adc.w	r3, r2, r3
 8003d48:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003d4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d50:	685b      	ldr	r3, [r3, #4]
 8003d52:	2200      	movs	r2, #0
 8003d54:	67bb      	str	r3, [r7, #120]	; 0x78
 8003d56:	67fa      	str	r2, [r7, #124]	; 0x7c
 8003d58:	f04f 0200 	mov.w	r2, #0
 8003d5c:	f04f 0300 	mov.w	r3, #0
 8003d60:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8003d64:	4649      	mov	r1, r9
 8003d66:	008b      	lsls	r3, r1, #2
 8003d68:	4641      	mov	r1, r8
 8003d6a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003d6e:	4641      	mov	r1, r8
 8003d70:	008a      	lsls	r2, r1, #2
 8003d72:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8003d76:	f7fc fd91 	bl	800089c <__aeabi_uldivmod>
 8003d7a:	4602      	mov	r2, r0
 8003d7c:	460b      	mov	r3, r1
 8003d7e:	4b39      	ldr	r3, [pc, #228]	; (8003e64 <UART_SetConfig+0x4e4>)
 8003d80:	fba3 1302 	umull	r1, r3, r3, r2
 8003d84:	095b      	lsrs	r3, r3, #5
 8003d86:	2164      	movs	r1, #100	; 0x64
 8003d88:	fb01 f303 	mul.w	r3, r1, r3
 8003d8c:	1ad3      	subs	r3, r2, r3
 8003d8e:	011b      	lsls	r3, r3, #4
 8003d90:	3332      	adds	r3, #50	; 0x32
 8003d92:	4a34      	ldr	r2, [pc, #208]	; (8003e64 <UART_SetConfig+0x4e4>)
 8003d94:	fba2 2303 	umull	r2, r3, r2, r3
 8003d98:	095b      	lsrs	r3, r3, #5
 8003d9a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003d9e:	441c      	add	r4, r3
 8003da0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003da4:	2200      	movs	r2, #0
 8003da6:	673b      	str	r3, [r7, #112]	; 0x70
 8003da8:	677a      	str	r2, [r7, #116]	; 0x74
 8003daa:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8003dae:	4642      	mov	r2, r8
 8003db0:	464b      	mov	r3, r9
 8003db2:	1891      	adds	r1, r2, r2
 8003db4:	60b9      	str	r1, [r7, #8]
 8003db6:	415b      	adcs	r3, r3
 8003db8:	60fb      	str	r3, [r7, #12]
 8003dba:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003dbe:	4641      	mov	r1, r8
 8003dc0:	1851      	adds	r1, r2, r1
 8003dc2:	6039      	str	r1, [r7, #0]
 8003dc4:	4649      	mov	r1, r9
 8003dc6:	414b      	adcs	r3, r1
 8003dc8:	607b      	str	r3, [r7, #4]
 8003dca:	f04f 0200 	mov.w	r2, #0
 8003dce:	f04f 0300 	mov.w	r3, #0
 8003dd2:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003dd6:	4659      	mov	r1, fp
 8003dd8:	00cb      	lsls	r3, r1, #3
 8003dda:	4651      	mov	r1, sl
 8003ddc:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003de0:	4651      	mov	r1, sl
 8003de2:	00ca      	lsls	r2, r1, #3
 8003de4:	4610      	mov	r0, r2
 8003de6:	4619      	mov	r1, r3
 8003de8:	4603      	mov	r3, r0
 8003dea:	4642      	mov	r2, r8
 8003dec:	189b      	adds	r3, r3, r2
 8003dee:	66bb      	str	r3, [r7, #104]	; 0x68
 8003df0:	464b      	mov	r3, r9
 8003df2:	460a      	mov	r2, r1
 8003df4:	eb42 0303 	adc.w	r3, r2, r3
 8003df8:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003dfa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003dfe:	685b      	ldr	r3, [r3, #4]
 8003e00:	2200      	movs	r2, #0
 8003e02:	663b      	str	r3, [r7, #96]	; 0x60
 8003e04:	667a      	str	r2, [r7, #100]	; 0x64
 8003e06:	f04f 0200 	mov.w	r2, #0
 8003e0a:	f04f 0300 	mov.w	r3, #0
 8003e0e:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8003e12:	4649      	mov	r1, r9
 8003e14:	008b      	lsls	r3, r1, #2
 8003e16:	4641      	mov	r1, r8
 8003e18:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003e1c:	4641      	mov	r1, r8
 8003e1e:	008a      	lsls	r2, r1, #2
 8003e20:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8003e24:	f7fc fd3a 	bl	800089c <__aeabi_uldivmod>
 8003e28:	4602      	mov	r2, r0
 8003e2a:	460b      	mov	r3, r1
 8003e2c:	4b0d      	ldr	r3, [pc, #52]	; (8003e64 <UART_SetConfig+0x4e4>)
 8003e2e:	fba3 1302 	umull	r1, r3, r3, r2
 8003e32:	095b      	lsrs	r3, r3, #5
 8003e34:	2164      	movs	r1, #100	; 0x64
 8003e36:	fb01 f303 	mul.w	r3, r1, r3
 8003e3a:	1ad3      	subs	r3, r2, r3
 8003e3c:	011b      	lsls	r3, r3, #4
 8003e3e:	3332      	adds	r3, #50	; 0x32
 8003e40:	4a08      	ldr	r2, [pc, #32]	; (8003e64 <UART_SetConfig+0x4e4>)
 8003e42:	fba2 2303 	umull	r2, r3, r2, r3
 8003e46:	095b      	lsrs	r3, r3, #5
 8003e48:	f003 020f 	and.w	r2, r3, #15
 8003e4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	4422      	add	r2, r4
 8003e54:	609a      	str	r2, [r3, #8]
}
 8003e56:	bf00      	nop
 8003e58:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8003e5c:	46bd      	mov	sp, r7
 8003e5e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003e62:	bf00      	nop
 8003e64:	51eb851f 	.word	0x51eb851f

08003e68 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8003e68:	b580      	push	{r7, lr}
 8003e6a:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 8003e6c:	4904      	ldr	r1, [pc, #16]	; (8003e80 <MX_FATFS_Init+0x18>)
 8003e6e:	4805      	ldr	r0, [pc, #20]	; (8003e84 <MX_FATFS_Init+0x1c>)
 8003e70:	f003 f810 	bl	8006e94 <FATFS_LinkDriver>
 8003e74:	4603      	mov	r3, r0
 8003e76:	461a      	mov	r2, r3
 8003e78:	4b03      	ldr	r3, [pc, #12]	; (8003e88 <MX_FATFS_Init+0x20>)
 8003e7a:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8003e7c:	bf00      	nop
 8003e7e:	bd80      	pop	{r7, pc}
 8003e80:	20000650 	.word	0x20000650
 8003e84:	20000010 	.word	0x20000010
 8003e88:	2000064c 	.word	0x2000064c

08003e8c <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8003e8c:	b480      	push	{r7}
 8003e8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8003e90:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 8003e92:	4618      	mov	r0, r3
 8003e94:	46bd      	mov	sp, r7
 8003e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e9a:	4770      	bx	lr

08003e9c <USER_initialize>:
 * @retval DSTATUS: Operation status
 */
DSTATUS USER_initialize (
		BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 8003e9c:	b580      	push	{r7, lr}
 8003e9e:	b082      	sub	sp, #8
 8003ea0:	af00      	add	r7, sp, #0
 8003ea2:	4603      	mov	r3, r0
 8003ea4:	71fb      	strb	r3, [r7, #7]
	/* USER CODE BEGIN INIT */
	return SD_disk_initialize (pdrv);
 8003ea6:	79fb      	ldrb	r3, [r7, #7]
 8003ea8:	4618      	mov	r0, r3
 8003eaa:	f7fd f82f 	bl	8000f0c <SD_disk_initialize>
 8003eae:	4603      	mov	r3, r0
	/* USER CODE END INIT */
}
 8003eb0:	4618      	mov	r0, r3
 8003eb2:	3708      	adds	r7, #8
 8003eb4:	46bd      	mov	sp, r7
 8003eb6:	bd80      	pop	{r7, pc}

08003eb8 <USER_status>:
 * @retval DSTATUS: Operation status
 */
DSTATUS USER_status (
		BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 8003eb8:	b580      	push	{r7, lr}
 8003eba:	b082      	sub	sp, #8
 8003ebc:	af00      	add	r7, sp, #0
 8003ebe:	4603      	mov	r3, r0
 8003ec0:	71fb      	strb	r3, [r7, #7]
	/* USER CODE BEGIN STATUS */
	return SD_disk_status (pdrv);
 8003ec2:	79fb      	ldrb	r3, [r7, #7]
 8003ec4:	4618      	mov	r0, r3
 8003ec6:	f7fd f90d 	bl	80010e4 <SD_disk_status>
 8003eca:	4603      	mov	r3, r0
	/* USER CODE END STATUS */
}
 8003ecc:	4618      	mov	r0, r3
 8003ece:	3708      	adds	r7, #8
 8003ed0:	46bd      	mov	sp, r7
 8003ed2:	bd80      	pop	{r7, pc}

08003ed4 <USER_read>:
		BYTE pdrv,      /* Physical drive nmuber to identify the drive */
		BYTE *buff,     /* Data buffer to store read data */
		DWORD sector,   /* Sector address in LBA */
		UINT count      /* Number of sectors to read */
)
{
 8003ed4:	b580      	push	{r7, lr}
 8003ed6:	b084      	sub	sp, #16
 8003ed8:	af00      	add	r7, sp, #0
 8003eda:	60b9      	str	r1, [r7, #8]
 8003edc:	607a      	str	r2, [r7, #4]
 8003ede:	603b      	str	r3, [r7, #0]
 8003ee0:	4603      	mov	r3, r0
 8003ee2:	73fb      	strb	r3, [r7, #15]
	/* USER CODE BEGIN READ */
	return SD_disk_read (pdrv, buff, sector, count);
 8003ee4:	7bf8      	ldrb	r0, [r7, #15]
 8003ee6:	683b      	ldr	r3, [r7, #0]
 8003ee8:	687a      	ldr	r2, [r7, #4]
 8003eea:	68b9      	ldr	r1, [r7, #8]
 8003eec:	f7fd f910 	bl	8001110 <SD_disk_read>
 8003ef0:	4603      	mov	r3, r0
	/* USER CODE END READ */
}
 8003ef2:	4618      	mov	r0, r3
 8003ef4:	3710      	adds	r7, #16
 8003ef6:	46bd      	mov	sp, r7
 8003ef8:	bd80      	pop	{r7, pc}

08003efa <USER_write>:
		BYTE pdrv,          /* Physical drive nmuber to identify the drive */
		const BYTE *buff,   /* Data to be written */
		DWORD sector,       /* Sector address in LBA */
		UINT count          /* Number of sectors to write */
)
{
 8003efa:	b580      	push	{r7, lr}
 8003efc:	b084      	sub	sp, #16
 8003efe:	af00      	add	r7, sp, #0
 8003f00:	60b9      	str	r1, [r7, #8]
 8003f02:	607a      	str	r2, [r7, #4]
 8003f04:	603b      	str	r3, [r7, #0]
 8003f06:	4603      	mov	r3, r0
 8003f08:	73fb      	strb	r3, [r7, #15]
	/* USER CODE BEGIN WRITE */
	/* USER CODE HERE */
	return SD_disk_write (pdrv, buff, sector, count);
 8003f0a:	7bf8      	ldrb	r0, [r7, #15]
 8003f0c:	683b      	ldr	r3, [r7, #0]
 8003f0e:	687a      	ldr	r2, [r7, #4]
 8003f10:	68b9      	ldr	r1, [r7, #8]
 8003f12:	f7fd f967 	bl	80011e4 <SD_disk_write>
 8003f16:	4603      	mov	r3, r0
	/* USER CODE END WRITE */
}
 8003f18:	4618      	mov	r0, r3
 8003f1a:	3710      	adds	r7, #16
 8003f1c:	46bd      	mov	sp, r7
 8003f1e:	bd80      	pop	{r7, pc}

08003f20 <USER_ioctl>:
DRESULT USER_ioctl (
		BYTE pdrv,      /* Physical drive nmuber (0..) */
		BYTE cmd,       /* Control code */
		void *buff      /* Buffer to send/receive control data */
)
{
 8003f20:	b580      	push	{r7, lr}
 8003f22:	b082      	sub	sp, #8
 8003f24:	af00      	add	r7, sp, #0
 8003f26:	4603      	mov	r3, r0
 8003f28:	603a      	str	r2, [r7, #0]
 8003f2a:	71fb      	strb	r3, [r7, #7]
 8003f2c:	460b      	mov	r3, r1
 8003f2e:	71bb      	strb	r3, [r7, #6]
	/* USER CODE BEGIN IOCTL */
	return SD_disk_ioctl (pdrv, cmd, buff);
 8003f30:	79b9      	ldrb	r1, [r7, #6]
 8003f32:	79fb      	ldrb	r3, [r7, #7]
 8003f34:	683a      	ldr	r2, [r7, #0]
 8003f36:	4618      	mov	r0, r3
 8003f38:	f7fd f9d8 	bl	80012ec <SD_disk_ioctl>
 8003f3c:	4603      	mov	r3, r0
	/* USER CODE END IOCTL */
}
 8003f3e:	4618      	mov	r0, r3
 8003f40:	3708      	adds	r7, #8
 8003f42:	46bd      	mov	sp, r7
 8003f44:	bd80      	pop	{r7, pc}
	...

08003f48 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8003f48:	b580      	push	{r7, lr}
 8003f4a:	b084      	sub	sp, #16
 8003f4c:	af00      	add	r7, sp, #0
 8003f4e:	4603      	mov	r3, r0
 8003f50:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8003f52:	79fb      	ldrb	r3, [r7, #7]
 8003f54:	4a08      	ldr	r2, [pc, #32]	; (8003f78 <disk_status+0x30>)
 8003f56:	009b      	lsls	r3, r3, #2
 8003f58:	4413      	add	r3, r2
 8003f5a:	685b      	ldr	r3, [r3, #4]
 8003f5c:	685b      	ldr	r3, [r3, #4]
 8003f5e:	79fa      	ldrb	r2, [r7, #7]
 8003f60:	4905      	ldr	r1, [pc, #20]	; (8003f78 <disk_status+0x30>)
 8003f62:	440a      	add	r2, r1
 8003f64:	7a12      	ldrb	r2, [r2, #8]
 8003f66:	4610      	mov	r0, r2
 8003f68:	4798      	blx	r3
 8003f6a:	4603      	mov	r3, r0
 8003f6c:	73fb      	strb	r3, [r7, #15]
  return stat;
 8003f6e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f70:	4618      	mov	r0, r3
 8003f72:	3710      	adds	r7, #16
 8003f74:	46bd      	mov	sp, r7
 8003f76:	bd80      	pop	{r7, pc}
 8003f78:	2000067c 	.word	0x2000067c

08003f7c <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8003f7c:	b580      	push	{r7, lr}
 8003f7e:	b084      	sub	sp, #16
 8003f80:	af00      	add	r7, sp, #0
 8003f82:	4603      	mov	r3, r0
 8003f84:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8003f86:	2300      	movs	r3, #0
 8003f88:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8003f8a:	79fb      	ldrb	r3, [r7, #7]
 8003f8c:	4a0d      	ldr	r2, [pc, #52]	; (8003fc4 <disk_initialize+0x48>)
 8003f8e:	5cd3      	ldrb	r3, [r2, r3]
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d111      	bne.n	8003fb8 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 8003f94:	79fb      	ldrb	r3, [r7, #7]
 8003f96:	4a0b      	ldr	r2, [pc, #44]	; (8003fc4 <disk_initialize+0x48>)
 8003f98:	2101      	movs	r1, #1
 8003f9a:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8003f9c:	79fb      	ldrb	r3, [r7, #7]
 8003f9e:	4a09      	ldr	r2, [pc, #36]	; (8003fc4 <disk_initialize+0x48>)
 8003fa0:	009b      	lsls	r3, r3, #2
 8003fa2:	4413      	add	r3, r2
 8003fa4:	685b      	ldr	r3, [r3, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	79fa      	ldrb	r2, [r7, #7]
 8003faa:	4906      	ldr	r1, [pc, #24]	; (8003fc4 <disk_initialize+0x48>)
 8003fac:	440a      	add	r2, r1
 8003fae:	7a12      	ldrb	r2, [r2, #8]
 8003fb0:	4610      	mov	r0, r2
 8003fb2:	4798      	blx	r3
 8003fb4:	4603      	mov	r3, r0
 8003fb6:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8003fb8:	7bfb      	ldrb	r3, [r7, #15]
}
 8003fba:	4618      	mov	r0, r3
 8003fbc:	3710      	adds	r7, #16
 8003fbe:	46bd      	mov	sp, r7
 8003fc0:	bd80      	pop	{r7, pc}
 8003fc2:	bf00      	nop
 8003fc4:	2000067c 	.word	0x2000067c

08003fc8 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8003fc8:	b590      	push	{r4, r7, lr}
 8003fca:	b087      	sub	sp, #28
 8003fcc:	af00      	add	r7, sp, #0
 8003fce:	60b9      	str	r1, [r7, #8]
 8003fd0:	607a      	str	r2, [r7, #4]
 8003fd2:	603b      	str	r3, [r7, #0]
 8003fd4:	4603      	mov	r3, r0
 8003fd6:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8003fd8:	7bfb      	ldrb	r3, [r7, #15]
 8003fda:	4a0a      	ldr	r2, [pc, #40]	; (8004004 <disk_read+0x3c>)
 8003fdc:	009b      	lsls	r3, r3, #2
 8003fde:	4413      	add	r3, r2
 8003fe0:	685b      	ldr	r3, [r3, #4]
 8003fe2:	689c      	ldr	r4, [r3, #8]
 8003fe4:	7bfb      	ldrb	r3, [r7, #15]
 8003fe6:	4a07      	ldr	r2, [pc, #28]	; (8004004 <disk_read+0x3c>)
 8003fe8:	4413      	add	r3, r2
 8003fea:	7a18      	ldrb	r0, [r3, #8]
 8003fec:	683b      	ldr	r3, [r7, #0]
 8003fee:	687a      	ldr	r2, [r7, #4]
 8003ff0:	68b9      	ldr	r1, [r7, #8]
 8003ff2:	47a0      	blx	r4
 8003ff4:	4603      	mov	r3, r0
 8003ff6:	75fb      	strb	r3, [r7, #23]
  return res;
 8003ff8:	7dfb      	ldrb	r3, [r7, #23]
}
 8003ffa:	4618      	mov	r0, r3
 8003ffc:	371c      	adds	r7, #28
 8003ffe:	46bd      	mov	sp, r7
 8004000:	bd90      	pop	{r4, r7, pc}
 8004002:	bf00      	nop
 8004004:	2000067c 	.word	0x2000067c

08004008 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8004008:	b590      	push	{r4, r7, lr}
 800400a:	b087      	sub	sp, #28
 800400c:	af00      	add	r7, sp, #0
 800400e:	60b9      	str	r1, [r7, #8]
 8004010:	607a      	str	r2, [r7, #4]
 8004012:	603b      	str	r3, [r7, #0]
 8004014:	4603      	mov	r3, r0
 8004016:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8004018:	7bfb      	ldrb	r3, [r7, #15]
 800401a:	4a0a      	ldr	r2, [pc, #40]	; (8004044 <disk_write+0x3c>)
 800401c:	009b      	lsls	r3, r3, #2
 800401e:	4413      	add	r3, r2
 8004020:	685b      	ldr	r3, [r3, #4]
 8004022:	68dc      	ldr	r4, [r3, #12]
 8004024:	7bfb      	ldrb	r3, [r7, #15]
 8004026:	4a07      	ldr	r2, [pc, #28]	; (8004044 <disk_write+0x3c>)
 8004028:	4413      	add	r3, r2
 800402a:	7a18      	ldrb	r0, [r3, #8]
 800402c:	683b      	ldr	r3, [r7, #0]
 800402e:	687a      	ldr	r2, [r7, #4]
 8004030:	68b9      	ldr	r1, [r7, #8]
 8004032:	47a0      	blx	r4
 8004034:	4603      	mov	r3, r0
 8004036:	75fb      	strb	r3, [r7, #23]
  return res;
 8004038:	7dfb      	ldrb	r3, [r7, #23]
}
 800403a:	4618      	mov	r0, r3
 800403c:	371c      	adds	r7, #28
 800403e:	46bd      	mov	sp, r7
 8004040:	bd90      	pop	{r4, r7, pc}
 8004042:	bf00      	nop
 8004044:	2000067c 	.word	0x2000067c

08004048 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8004048:	b580      	push	{r7, lr}
 800404a:	b084      	sub	sp, #16
 800404c:	af00      	add	r7, sp, #0
 800404e:	4603      	mov	r3, r0
 8004050:	603a      	str	r2, [r7, #0]
 8004052:	71fb      	strb	r3, [r7, #7]
 8004054:	460b      	mov	r3, r1
 8004056:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8004058:	79fb      	ldrb	r3, [r7, #7]
 800405a:	4a09      	ldr	r2, [pc, #36]	; (8004080 <disk_ioctl+0x38>)
 800405c:	009b      	lsls	r3, r3, #2
 800405e:	4413      	add	r3, r2
 8004060:	685b      	ldr	r3, [r3, #4]
 8004062:	691b      	ldr	r3, [r3, #16]
 8004064:	79fa      	ldrb	r2, [r7, #7]
 8004066:	4906      	ldr	r1, [pc, #24]	; (8004080 <disk_ioctl+0x38>)
 8004068:	440a      	add	r2, r1
 800406a:	7a10      	ldrb	r0, [r2, #8]
 800406c:	79b9      	ldrb	r1, [r7, #6]
 800406e:	683a      	ldr	r2, [r7, #0]
 8004070:	4798      	blx	r3
 8004072:	4603      	mov	r3, r0
 8004074:	73fb      	strb	r3, [r7, #15]
  return res;
 8004076:	7bfb      	ldrb	r3, [r7, #15]
}
 8004078:	4618      	mov	r0, r3
 800407a:	3710      	adds	r7, #16
 800407c:	46bd      	mov	sp, r7
 800407e:	bd80      	pop	{r7, pc}
 8004080:	2000067c 	.word	0x2000067c

08004084 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8004084:	b480      	push	{r7}
 8004086:	b085      	sub	sp, #20
 8004088:	af00      	add	r7, sp, #0
 800408a:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	3301      	adds	r3, #1
 8004090:	781b      	ldrb	r3, [r3, #0]
 8004092:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8004094:	89fb      	ldrh	r3, [r7, #14]
 8004096:	021b      	lsls	r3, r3, #8
 8004098:	b21a      	sxth	r2, r3
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	781b      	ldrb	r3, [r3, #0]
 800409e:	b21b      	sxth	r3, r3
 80040a0:	4313      	orrs	r3, r2
 80040a2:	b21b      	sxth	r3, r3
 80040a4:	81fb      	strh	r3, [r7, #14]
	return rv;
 80040a6:	89fb      	ldrh	r3, [r7, #14]
}
 80040a8:	4618      	mov	r0, r3
 80040aa:	3714      	adds	r7, #20
 80040ac:	46bd      	mov	sp, r7
 80040ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040b2:	4770      	bx	lr

080040b4 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 80040b4:	b480      	push	{r7}
 80040b6:	b085      	sub	sp, #20
 80040b8:	af00      	add	r7, sp, #0
 80040ba:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	3303      	adds	r3, #3
 80040c0:	781b      	ldrb	r3, [r3, #0]
 80040c2:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	021b      	lsls	r3, r3, #8
 80040c8:	687a      	ldr	r2, [r7, #4]
 80040ca:	3202      	adds	r2, #2
 80040cc:	7812      	ldrb	r2, [r2, #0]
 80040ce:	4313      	orrs	r3, r2
 80040d0:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	021b      	lsls	r3, r3, #8
 80040d6:	687a      	ldr	r2, [r7, #4]
 80040d8:	3201      	adds	r2, #1
 80040da:	7812      	ldrb	r2, [r2, #0]
 80040dc:	4313      	orrs	r3, r2
 80040de:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	021b      	lsls	r3, r3, #8
 80040e4:	687a      	ldr	r2, [r7, #4]
 80040e6:	7812      	ldrb	r2, [r2, #0]
 80040e8:	4313      	orrs	r3, r2
 80040ea:	60fb      	str	r3, [r7, #12]
	return rv;
 80040ec:	68fb      	ldr	r3, [r7, #12]
}
 80040ee:	4618      	mov	r0, r3
 80040f0:	3714      	adds	r7, #20
 80040f2:	46bd      	mov	sp, r7
 80040f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040f8:	4770      	bx	lr

080040fa <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 80040fa:	b480      	push	{r7}
 80040fc:	b083      	sub	sp, #12
 80040fe:	af00      	add	r7, sp, #0
 8004100:	6078      	str	r0, [r7, #4]
 8004102:	460b      	mov	r3, r1
 8004104:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	1c5a      	adds	r2, r3, #1
 800410a:	607a      	str	r2, [r7, #4]
 800410c:	887a      	ldrh	r2, [r7, #2]
 800410e:	b2d2      	uxtb	r2, r2
 8004110:	701a      	strb	r2, [r3, #0]
 8004112:	887b      	ldrh	r3, [r7, #2]
 8004114:	0a1b      	lsrs	r3, r3, #8
 8004116:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	1c5a      	adds	r2, r3, #1
 800411c:	607a      	str	r2, [r7, #4]
 800411e:	887a      	ldrh	r2, [r7, #2]
 8004120:	b2d2      	uxtb	r2, r2
 8004122:	701a      	strb	r2, [r3, #0]
}
 8004124:	bf00      	nop
 8004126:	370c      	adds	r7, #12
 8004128:	46bd      	mov	sp, r7
 800412a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800412e:	4770      	bx	lr

08004130 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8004130:	b480      	push	{r7}
 8004132:	b083      	sub	sp, #12
 8004134:	af00      	add	r7, sp, #0
 8004136:	6078      	str	r0, [r7, #4]
 8004138:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	1c5a      	adds	r2, r3, #1
 800413e:	607a      	str	r2, [r7, #4]
 8004140:	683a      	ldr	r2, [r7, #0]
 8004142:	b2d2      	uxtb	r2, r2
 8004144:	701a      	strb	r2, [r3, #0]
 8004146:	683b      	ldr	r3, [r7, #0]
 8004148:	0a1b      	lsrs	r3, r3, #8
 800414a:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	1c5a      	adds	r2, r3, #1
 8004150:	607a      	str	r2, [r7, #4]
 8004152:	683a      	ldr	r2, [r7, #0]
 8004154:	b2d2      	uxtb	r2, r2
 8004156:	701a      	strb	r2, [r3, #0]
 8004158:	683b      	ldr	r3, [r7, #0]
 800415a:	0a1b      	lsrs	r3, r3, #8
 800415c:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	1c5a      	adds	r2, r3, #1
 8004162:	607a      	str	r2, [r7, #4]
 8004164:	683a      	ldr	r2, [r7, #0]
 8004166:	b2d2      	uxtb	r2, r2
 8004168:	701a      	strb	r2, [r3, #0]
 800416a:	683b      	ldr	r3, [r7, #0]
 800416c:	0a1b      	lsrs	r3, r3, #8
 800416e:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	1c5a      	adds	r2, r3, #1
 8004174:	607a      	str	r2, [r7, #4]
 8004176:	683a      	ldr	r2, [r7, #0]
 8004178:	b2d2      	uxtb	r2, r2
 800417a:	701a      	strb	r2, [r3, #0]
}
 800417c:	bf00      	nop
 800417e:	370c      	adds	r7, #12
 8004180:	46bd      	mov	sp, r7
 8004182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004186:	4770      	bx	lr

08004188 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8004188:	b480      	push	{r7}
 800418a:	b087      	sub	sp, #28
 800418c:	af00      	add	r7, sp, #0
 800418e:	60f8      	str	r0, [r7, #12]
 8004190:	60b9      	str	r1, [r7, #8]
 8004192:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8004198:	68bb      	ldr	r3, [r7, #8]
 800419a:	613b      	str	r3, [r7, #16]

	if (cnt) {
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d00d      	beq.n	80041be <mem_cpy+0x36>
		do {
			*d++ = *s++;
 80041a2:	693a      	ldr	r2, [r7, #16]
 80041a4:	1c53      	adds	r3, r2, #1
 80041a6:	613b      	str	r3, [r7, #16]
 80041a8:	697b      	ldr	r3, [r7, #20]
 80041aa:	1c59      	adds	r1, r3, #1
 80041ac:	6179      	str	r1, [r7, #20]
 80041ae:	7812      	ldrb	r2, [r2, #0]
 80041b0:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	3b01      	subs	r3, #1
 80041b6:	607b      	str	r3, [r7, #4]
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d1f1      	bne.n	80041a2 <mem_cpy+0x1a>
	}
}
 80041be:	bf00      	nop
 80041c0:	371c      	adds	r7, #28
 80041c2:	46bd      	mov	sp, r7
 80041c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041c8:	4770      	bx	lr

080041ca <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 80041ca:	b480      	push	{r7}
 80041cc:	b087      	sub	sp, #28
 80041ce:	af00      	add	r7, sp, #0
 80041d0:	60f8      	str	r0, [r7, #12]
 80041d2:	60b9      	str	r1, [r7, #8]
 80041d4:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 80041da:	697b      	ldr	r3, [r7, #20]
 80041dc:	1c5a      	adds	r2, r3, #1
 80041de:	617a      	str	r2, [r7, #20]
 80041e0:	68ba      	ldr	r2, [r7, #8]
 80041e2:	b2d2      	uxtb	r2, r2
 80041e4:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	3b01      	subs	r3, #1
 80041ea:	607b      	str	r3, [r7, #4]
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d1f3      	bne.n	80041da <mem_set+0x10>
}
 80041f2:	bf00      	nop
 80041f4:	bf00      	nop
 80041f6:	371c      	adds	r7, #28
 80041f8:	46bd      	mov	sp, r7
 80041fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041fe:	4770      	bx	lr

08004200 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8004200:	b480      	push	{r7}
 8004202:	b089      	sub	sp, #36	; 0x24
 8004204:	af00      	add	r7, sp, #0
 8004206:	60f8      	str	r0, [r7, #12]
 8004208:	60b9      	str	r1, [r7, #8]
 800420a:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	61fb      	str	r3, [r7, #28]
 8004210:	68bb      	ldr	r3, [r7, #8]
 8004212:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8004214:	2300      	movs	r3, #0
 8004216:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8004218:	69fb      	ldr	r3, [r7, #28]
 800421a:	1c5a      	adds	r2, r3, #1
 800421c:	61fa      	str	r2, [r7, #28]
 800421e:	781b      	ldrb	r3, [r3, #0]
 8004220:	4619      	mov	r1, r3
 8004222:	69bb      	ldr	r3, [r7, #24]
 8004224:	1c5a      	adds	r2, r3, #1
 8004226:	61ba      	str	r2, [r7, #24]
 8004228:	781b      	ldrb	r3, [r3, #0]
 800422a:	1acb      	subs	r3, r1, r3
 800422c:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	3b01      	subs	r3, #1
 8004232:	607b      	str	r3, [r7, #4]
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	2b00      	cmp	r3, #0
 8004238:	d002      	beq.n	8004240 <mem_cmp+0x40>
 800423a:	697b      	ldr	r3, [r7, #20]
 800423c:	2b00      	cmp	r3, #0
 800423e:	d0eb      	beq.n	8004218 <mem_cmp+0x18>

	return r;
 8004240:	697b      	ldr	r3, [r7, #20]
}
 8004242:	4618      	mov	r0, r3
 8004244:	3724      	adds	r7, #36	; 0x24
 8004246:	46bd      	mov	sp, r7
 8004248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800424c:	4770      	bx	lr

0800424e <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800424e:	b480      	push	{r7}
 8004250:	b083      	sub	sp, #12
 8004252:	af00      	add	r7, sp, #0
 8004254:	6078      	str	r0, [r7, #4]
 8004256:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8004258:	e002      	b.n	8004260 <chk_chr+0x12>
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	3301      	adds	r3, #1
 800425e:	607b      	str	r3, [r7, #4]
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	781b      	ldrb	r3, [r3, #0]
 8004264:	2b00      	cmp	r3, #0
 8004266:	d005      	beq.n	8004274 <chk_chr+0x26>
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	781b      	ldrb	r3, [r3, #0]
 800426c:	461a      	mov	r2, r3
 800426e:	683b      	ldr	r3, [r7, #0]
 8004270:	4293      	cmp	r3, r2
 8004272:	d1f2      	bne.n	800425a <chk_chr+0xc>
	return *str;
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	781b      	ldrb	r3, [r3, #0]
}
 8004278:	4618      	mov	r0, r3
 800427a:	370c      	adds	r7, #12
 800427c:	46bd      	mov	sp, r7
 800427e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004282:	4770      	bx	lr

08004284 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8004284:	b480      	push	{r7}
 8004286:	b085      	sub	sp, #20
 8004288:	af00      	add	r7, sp, #0
 800428a:	6078      	str	r0, [r7, #4]
 800428c:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800428e:	2300      	movs	r3, #0
 8004290:	60bb      	str	r3, [r7, #8]
 8004292:	68bb      	ldr	r3, [r7, #8]
 8004294:	60fb      	str	r3, [r7, #12]
 8004296:	e029      	b.n	80042ec <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8004298:	4a27      	ldr	r2, [pc, #156]	; (8004338 <chk_lock+0xb4>)
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	011b      	lsls	r3, r3, #4
 800429e:	4413      	add	r3, r2
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d01d      	beq.n	80042e2 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 80042a6:	4a24      	ldr	r2, [pc, #144]	; (8004338 <chk_lock+0xb4>)
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	011b      	lsls	r3, r3, #4
 80042ac:	4413      	add	r3, r2
 80042ae:	681a      	ldr	r2, [r3, #0]
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	429a      	cmp	r2, r3
 80042b6:	d116      	bne.n	80042e6 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 80042b8:	4a1f      	ldr	r2, [pc, #124]	; (8004338 <chk_lock+0xb4>)
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	011b      	lsls	r3, r3, #4
 80042be:	4413      	add	r3, r2
 80042c0:	3304      	adds	r3, #4
 80042c2:	681a      	ldr	r2, [r3, #0]
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 80042c8:	429a      	cmp	r2, r3
 80042ca:	d10c      	bne.n	80042e6 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 80042cc:	4a1a      	ldr	r2, [pc, #104]	; (8004338 <chk_lock+0xb4>)
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	011b      	lsls	r3, r3, #4
 80042d2:	4413      	add	r3, r2
 80042d4:	3308      	adds	r3, #8
 80042d6:	681a      	ldr	r2, [r3, #0]
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 80042dc:	429a      	cmp	r2, r3
 80042de:	d102      	bne.n	80042e6 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 80042e0:	e007      	b.n	80042f2 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 80042e2:	2301      	movs	r3, #1
 80042e4:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	3301      	adds	r3, #1
 80042ea:	60fb      	str	r3, [r7, #12]
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	2b01      	cmp	r3, #1
 80042f0:	d9d2      	bls.n	8004298 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	2b02      	cmp	r3, #2
 80042f6:	d109      	bne.n	800430c <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 80042f8:	68bb      	ldr	r3, [r7, #8]
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d102      	bne.n	8004304 <chk_lock+0x80>
 80042fe:	683b      	ldr	r3, [r7, #0]
 8004300:	2b02      	cmp	r3, #2
 8004302:	d101      	bne.n	8004308 <chk_lock+0x84>
 8004304:	2300      	movs	r3, #0
 8004306:	e010      	b.n	800432a <chk_lock+0xa6>
 8004308:	2312      	movs	r3, #18
 800430a:	e00e      	b.n	800432a <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800430c:	683b      	ldr	r3, [r7, #0]
 800430e:	2b00      	cmp	r3, #0
 8004310:	d108      	bne.n	8004324 <chk_lock+0xa0>
 8004312:	4a09      	ldr	r2, [pc, #36]	; (8004338 <chk_lock+0xb4>)
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	011b      	lsls	r3, r3, #4
 8004318:	4413      	add	r3, r2
 800431a:	330c      	adds	r3, #12
 800431c:	881b      	ldrh	r3, [r3, #0]
 800431e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004322:	d101      	bne.n	8004328 <chk_lock+0xa4>
 8004324:	2310      	movs	r3, #16
 8004326:	e000      	b.n	800432a <chk_lock+0xa6>
 8004328:	2300      	movs	r3, #0
}
 800432a:	4618      	mov	r0, r3
 800432c:	3714      	adds	r7, #20
 800432e:	46bd      	mov	sp, r7
 8004330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004334:	4770      	bx	lr
 8004336:	bf00      	nop
 8004338:	2000065c 	.word	0x2000065c

0800433c <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800433c:	b480      	push	{r7}
 800433e:	b083      	sub	sp, #12
 8004340:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8004342:	2300      	movs	r3, #0
 8004344:	607b      	str	r3, [r7, #4]
 8004346:	e002      	b.n	800434e <enq_lock+0x12>
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	3301      	adds	r3, #1
 800434c:	607b      	str	r3, [r7, #4]
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	2b01      	cmp	r3, #1
 8004352:	d806      	bhi.n	8004362 <enq_lock+0x26>
 8004354:	4a09      	ldr	r2, [pc, #36]	; (800437c <enq_lock+0x40>)
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	011b      	lsls	r3, r3, #4
 800435a:	4413      	add	r3, r2
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	2b00      	cmp	r3, #0
 8004360:	d1f2      	bne.n	8004348 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	2b02      	cmp	r3, #2
 8004366:	bf14      	ite	ne
 8004368:	2301      	movne	r3, #1
 800436a:	2300      	moveq	r3, #0
 800436c:	b2db      	uxtb	r3, r3
}
 800436e:	4618      	mov	r0, r3
 8004370:	370c      	adds	r7, #12
 8004372:	46bd      	mov	sp, r7
 8004374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004378:	4770      	bx	lr
 800437a:	bf00      	nop
 800437c:	2000065c 	.word	0x2000065c

08004380 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8004380:	b480      	push	{r7}
 8004382:	b085      	sub	sp, #20
 8004384:	af00      	add	r7, sp, #0
 8004386:	6078      	str	r0, [r7, #4]
 8004388:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800438a:	2300      	movs	r3, #0
 800438c:	60fb      	str	r3, [r7, #12]
 800438e:	e01f      	b.n	80043d0 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8004390:	4a41      	ldr	r2, [pc, #260]	; (8004498 <inc_lock+0x118>)
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	011b      	lsls	r3, r3, #4
 8004396:	4413      	add	r3, r2
 8004398:	681a      	ldr	r2, [r3, #0]
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	429a      	cmp	r2, r3
 80043a0:	d113      	bne.n	80043ca <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 80043a2:	4a3d      	ldr	r2, [pc, #244]	; (8004498 <inc_lock+0x118>)
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	011b      	lsls	r3, r3, #4
 80043a8:	4413      	add	r3, r2
 80043aa:	3304      	adds	r3, #4
 80043ac:	681a      	ldr	r2, [r3, #0]
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 80043b2:	429a      	cmp	r2, r3
 80043b4:	d109      	bne.n	80043ca <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 80043b6:	4a38      	ldr	r2, [pc, #224]	; (8004498 <inc_lock+0x118>)
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	011b      	lsls	r3, r3, #4
 80043bc:	4413      	add	r3, r2
 80043be:	3308      	adds	r3, #8
 80043c0:	681a      	ldr	r2, [r3, #0]
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 80043c6:	429a      	cmp	r2, r3
 80043c8:	d006      	beq.n	80043d8 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	3301      	adds	r3, #1
 80043ce:	60fb      	str	r3, [r7, #12]
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	2b01      	cmp	r3, #1
 80043d4:	d9dc      	bls.n	8004390 <inc_lock+0x10>
 80043d6:	e000      	b.n	80043da <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 80043d8:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	2b02      	cmp	r3, #2
 80043de:	d132      	bne.n	8004446 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 80043e0:	2300      	movs	r3, #0
 80043e2:	60fb      	str	r3, [r7, #12]
 80043e4:	e002      	b.n	80043ec <inc_lock+0x6c>
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	3301      	adds	r3, #1
 80043ea:	60fb      	str	r3, [r7, #12]
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	2b01      	cmp	r3, #1
 80043f0:	d806      	bhi.n	8004400 <inc_lock+0x80>
 80043f2:	4a29      	ldr	r2, [pc, #164]	; (8004498 <inc_lock+0x118>)
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	011b      	lsls	r3, r3, #4
 80043f8:	4413      	add	r3, r2
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d1f2      	bne.n	80043e6 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	2b02      	cmp	r3, #2
 8004404:	d101      	bne.n	800440a <inc_lock+0x8a>
 8004406:	2300      	movs	r3, #0
 8004408:	e040      	b.n	800448c <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	681a      	ldr	r2, [r3, #0]
 800440e:	4922      	ldr	r1, [pc, #136]	; (8004498 <inc_lock+0x118>)
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	011b      	lsls	r3, r3, #4
 8004414:	440b      	add	r3, r1
 8004416:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	689a      	ldr	r2, [r3, #8]
 800441c:	491e      	ldr	r1, [pc, #120]	; (8004498 <inc_lock+0x118>)
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	011b      	lsls	r3, r3, #4
 8004422:	440b      	add	r3, r1
 8004424:	3304      	adds	r3, #4
 8004426:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	695a      	ldr	r2, [r3, #20]
 800442c:	491a      	ldr	r1, [pc, #104]	; (8004498 <inc_lock+0x118>)
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	011b      	lsls	r3, r3, #4
 8004432:	440b      	add	r3, r1
 8004434:	3308      	adds	r3, #8
 8004436:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8004438:	4a17      	ldr	r2, [pc, #92]	; (8004498 <inc_lock+0x118>)
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	011b      	lsls	r3, r3, #4
 800443e:	4413      	add	r3, r2
 8004440:	330c      	adds	r3, #12
 8004442:	2200      	movs	r2, #0
 8004444:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8004446:	683b      	ldr	r3, [r7, #0]
 8004448:	2b00      	cmp	r3, #0
 800444a:	d009      	beq.n	8004460 <inc_lock+0xe0>
 800444c:	4a12      	ldr	r2, [pc, #72]	; (8004498 <inc_lock+0x118>)
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	011b      	lsls	r3, r3, #4
 8004452:	4413      	add	r3, r2
 8004454:	330c      	adds	r3, #12
 8004456:	881b      	ldrh	r3, [r3, #0]
 8004458:	2b00      	cmp	r3, #0
 800445a:	d001      	beq.n	8004460 <inc_lock+0xe0>
 800445c:	2300      	movs	r3, #0
 800445e:	e015      	b.n	800448c <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8004460:	683b      	ldr	r3, [r7, #0]
 8004462:	2b00      	cmp	r3, #0
 8004464:	d108      	bne.n	8004478 <inc_lock+0xf8>
 8004466:	4a0c      	ldr	r2, [pc, #48]	; (8004498 <inc_lock+0x118>)
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	011b      	lsls	r3, r3, #4
 800446c:	4413      	add	r3, r2
 800446e:	330c      	adds	r3, #12
 8004470:	881b      	ldrh	r3, [r3, #0]
 8004472:	3301      	adds	r3, #1
 8004474:	b29a      	uxth	r2, r3
 8004476:	e001      	b.n	800447c <inc_lock+0xfc>
 8004478:	f44f 7280 	mov.w	r2, #256	; 0x100
 800447c:	4906      	ldr	r1, [pc, #24]	; (8004498 <inc_lock+0x118>)
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	011b      	lsls	r3, r3, #4
 8004482:	440b      	add	r3, r1
 8004484:	330c      	adds	r3, #12
 8004486:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	3301      	adds	r3, #1
}
 800448c:	4618      	mov	r0, r3
 800448e:	3714      	adds	r7, #20
 8004490:	46bd      	mov	sp, r7
 8004492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004496:	4770      	bx	lr
 8004498:	2000065c 	.word	0x2000065c

0800449c <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800449c:	b480      	push	{r7}
 800449e:	b085      	sub	sp, #20
 80044a0:	af00      	add	r7, sp, #0
 80044a2:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	3b01      	subs	r3, #1
 80044a8:	607b      	str	r3, [r7, #4]
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	2b01      	cmp	r3, #1
 80044ae:	d825      	bhi.n	80044fc <dec_lock+0x60>
		n = Files[i].ctr;
 80044b0:	4a17      	ldr	r2, [pc, #92]	; (8004510 <dec_lock+0x74>)
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	011b      	lsls	r3, r3, #4
 80044b6:	4413      	add	r3, r2
 80044b8:	330c      	adds	r3, #12
 80044ba:	881b      	ldrh	r3, [r3, #0]
 80044bc:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 80044be:	89fb      	ldrh	r3, [r7, #14]
 80044c0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80044c4:	d101      	bne.n	80044ca <dec_lock+0x2e>
 80044c6:	2300      	movs	r3, #0
 80044c8:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 80044ca:	89fb      	ldrh	r3, [r7, #14]
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	d002      	beq.n	80044d6 <dec_lock+0x3a>
 80044d0:	89fb      	ldrh	r3, [r7, #14]
 80044d2:	3b01      	subs	r3, #1
 80044d4:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 80044d6:	4a0e      	ldr	r2, [pc, #56]	; (8004510 <dec_lock+0x74>)
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	011b      	lsls	r3, r3, #4
 80044dc:	4413      	add	r3, r2
 80044de:	330c      	adds	r3, #12
 80044e0:	89fa      	ldrh	r2, [r7, #14]
 80044e2:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 80044e4:	89fb      	ldrh	r3, [r7, #14]
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d105      	bne.n	80044f6 <dec_lock+0x5a>
 80044ea:	4a09      	ldr	r2, [pc, #36]	; (8004510 <dec_lock+0x74>)
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	011b      	lsls	r3, r3, #4
 80044f0:	4413      	add	r3, r2
 80044f2:	2200      	movs	r2, #0
 80044f4:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 80044f6:	2300      	movs	r3, #0
 80044f8:	737b      	strb	r3, [r7, #13]
 80044fa:	e001      	b.n	8004500 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 80044fc:	2302      	movs	r3, #2
 80044fe:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8004500:	7b7b      	ldrb	r3, [r7, #13]
}
 8004502:	4618      	mov	r0, r3
 8004504:	3714      	adds	r7, #20
 8004506:	46bd      	mov	sp, r7
 8004508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800450c:	4770      	bx	lr
 800450e:	bf00      	nop
 8004510:	2000065c 	.word	0x2000065c

08004514 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8004514:	b480      	push	{r7}
 8004516:	b085      	sub	sp, #20
 8004518:	af00      	add	r7, sp, #0
 800451a:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800451c:	2300      	movs	r3, #0
 800451e:	60fb      	str	r3, [r7, #12]
 8004520:	e010      	b.n	8004544 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8004522:	4a0d      	ldr	r2, [pc, #52]	; (8004558 <clear_lock+0x44>)
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	011b      	lsls	r3, r3, #4
 8004528:	4413      	add	r3, r2
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	687a      	ldr	r2, [r7, #4]
 800452e:	429a      	cmp	r2, r3
 8004530:	d105      	bne.n	800453e <clear_lock+0x2a>
 8004532:	4a09      	ldr	r2, [pc, #36]	; (8004558 <clear_lock+0x44>)
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	011b      	lsls	r3, r3, #4
 8004538:	4413      	add	r3, r2
 800453a:	2200      	movs	r2, #0
 800453c:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	3301      	adds	r3, #1
 8004542:	60fb      	str	r3, [r7, #12]
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	2b01      	cmp	r3, #1
 8004548:	d9eb      	bls.n	8004522 <clear_lock+0xe>
	}
}
 800454a:	bf00      	nop
 800454c:	bf00      	nop
 800454e:	3714      	adds	r7, #20
 8004550:	46bd      	mov	sp, r7
 8004552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004556:	4770      	bx	lr
 8004558:	2000065c 	.word	0x2000065c

0800455c <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800455c:	b580      	push	{r7, lr}
 800455e:	b086      	sub	sp, #24
 8004560:	af00      	add	r7, sp, #0
 8004562:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8004564:	2300      	movs	r3, #0
 8004566:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	78db      	ldrb	r3, [r3, #3]
 800456c:	2b00      	cmp	r3, #0
 800456e:	d034      	beq.n	80045da <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004574:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	7858      	ldrb	r0, [r3, #1]
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8004580:	2301      	movs	r3, #1
 8004582:	697a      	ldr	r2, [r7, #20]
 8004584:	f7ff fd40 	bl	8004008 <disk_write>
 8004588:	4603      	mov	r3, r0
 800458a:	2b00      	cmp	r3, #0
 800458c:	d002      	beq.n	8004594 <sync_window+0x38>
			res = FR_DISK_ERR;
 800458e:	2301      	movs	r3, #1
 8004590:	73fb      	strb	r3, [r7, #15]
 8004592:	e022      	b.n	80045da <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	2200      	movs	r2, #0
 8004598:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	6a1b      	ldr	r3, [r3, #32]
 800459e:	697a      	ldr	r2, [r7, #20]
 80045a0:	1ad2      	subs	r2, r2, r3
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	699b      	ldr	r3, [r3, #24]
 80045a6:	429a      	cmp	r2, r3
 80045a8:	d217      	bcs.n	80045da <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	789b      	ldrb	r3, [r3, #2]
 80045ae:	613b      	str	r3, [r7, #16]
 80045b0:	e010      	b.n	80045d4 <sync_window+0x78>
					wsect += fs->fsize;
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	699b      	ldr	r3, [r3, #24]
 80045b6:	697a      	ldr	r2, [r7, #20]
 80045b8:	4413      	add	r3, r2
 80045ba:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	7858      	ldrb	r0, [r3, #1]
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80045c6:	2301      	movs	r3, #1
 80045c8:	697a      	ldr	r2, [r7, #20]
 80045ca:	f7ff fd1d 	bl	8004008 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80045ce:	693b      	ldr	r3, [r7, #16]
 80045d0:	3b01      	subs	r3, #1
 80045d2:	613b      	str	r3, [r7, #16]
 80045d4:	693b      	ldr	r3, [r7, #16]
 80045d6:	2b01      	cmp	r3, #1
 80045d8:	d8eb      	bhi.n	80045b2 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 80045da:	7bfb      	ldrb	r3, [r7, #15]
}
 80045dc:	4618      	mov	r0, r3
 80045de:	3718      	adds	r7, #24
 80045e0:	46bd      	mov	sp, r7
 80045e2:	bd80      	pop	{r7, pc}

080045e4 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 80045e4:	b580      	push	{r7, lr}
 80045e6:	b084      	sub	sp, #16
 80045e8:	af00      	add	r7, sp, #0
 80045ea:	6078      	str	r0, [r7, #4]
 80045ec:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 80045ee:	2300      	movs	r3, #0
 80045f0:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045f6:	683a      	ldr	r2, [r7, #0]
 80045f8:	429a      	cmp	r2, r3
 80045fa:	d01b      	beq.n	8004634 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 80045fc:	6878      	ldr	r0, [r7, #4]
 80045fe:	f7ff ffad 	bl	800455c <sync_window>
 8004602:	4603      	mov	r3, r0
 8004604:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8004606:	7bfb      	ldrb	r3, [r7, #15]
 8004608:	2b00      	cmp	r3, #0
 800460a:	d113      	bne.n	8004634 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	7858      	ldrb	r0, [r3, #1]
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8004616:	2301      	movs	r3, #1
 8004618:	683a      	ldr	r2, [r7, #0]
 800461a:	f7ff fcd5 	bl	8003fc8 <disk_read>
 800461e:	4603      	mov	r3, r0
 8004620:	2b00      	cmp	r3, #0
 8004622:	d004      	beq.n	800462e <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8004624:	f04f 33ff 	mov.w	r3, #4294967295
 8004628:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800462a:	2301      	movs	r3, #1
 800462c:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	683a      	ldr	r2, [r7, #0]
 8004632:	62da      	str	r2, [r3, #44]	; 0x2c
		}
	}
	return res;
 8004634:	7bfb      	ldrb	r3, [r7, #15]
}
 8004636:	4618      	mov	r0, r3
 8004638:	3710      	adds	r7, #16
 800463a:	46bd      	mov	sp, r7
 800463c:	bd80      	pop	{r7, pc}
	...

08004640 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8004640:	b580      	push	{r7, lr}
 8004642:	b084      	sub	sp, #16
 8004644:	af00      	add	r7, sp, #0
 8004646:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8004648:	6878      	ldr	r0, [r7, #4]
 800464a:	f7ff ff87 	bl	800455c <sync_window>
 800464e:	4603      	mov	r3, r0
 8004650:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8004652:	7bfb      	ldrb	r3, [r7, #15]
 8004654:	2b00      	cmp	r3, #0
 8004656:	d158      	bne.n	800470a <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	781b      	ldrb	r3, [r3, #0]
 800465c:	2b03      	cmp	r3, #3
 800465e:	d148      	bne.n	80046f2 <sync_fs+0xb2>
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	791b      	ldrb	r3, [r3, #4]
 8004664:	2b01      	cmp	r3, #1
 8004666:	d144      	bne.n	80046f2 <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	3330      	adds	r3, #48	; 0x30
 800466c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004670:	2100      	movs	r1, #0
 8004672:	4618      	mov	r0, r3
 8004674:	f7ff fda9 	bl	80041ca <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	3330      	adds	r3, #48	; 0x30
 800467c:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8004680:	f64a 2155 	movw	r1, #43605	; 0xaa55
 8004684:	4618      	mov	r0, r3
 8004686:	f7ff fd38 	bl	80040fa <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	3330      	adds	r3, #48	; 0x30
 800468e:	4921      	ldr	r1, [pc, #132]	; (8004714 <sync_fs+0xd4>)
 8004690:	4618      	mov	r0, r3
 8004692:	f7ff fd4d 	bl	8004130 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	3330      	adds	r3, #48	; 0x30
 800469a:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800469e:	491e      	ldr	r1, [pc, #120]	; (8004718 <sync_fs+0xd8>)
 80046a0:	4618      	mov	r0, r3
 80046a2:	f7ff fd45 	bl	8004130 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	3330      	adds	r3, #48	; 0x30
 80046aa:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	691b      	ldr	r3, [r3, #16]
 80046b2:	4619      	mov	r1, r3
 80046b4:	4610      	mov	r0, r2
 80046b6:	f7ff fd3b 	bl	8004130 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	3330      	adds	r3, #48	; 0x30
 80046be:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	68db      	ldr	r3, [r3, #12]
 80046c6:	4619      	mov	r1, r3
 80046c8:	4610      	mov	r0, r2
 80046ca:	f7ff fd31 	bl	8004130 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	69db      	ldr	r3, [r3, #28]
 80046d2:	1c5a      	adds	r2, r3, #1
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	62da      	str	r2, [r3, #44]	; 0x2c
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	7858      	ldrb	r0, [r3, #1]
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80046e6:	2301      	movs	r3, #1
 80046e8:	f7ff fc8e 	bl	8004008 <disk_write>
			fs->fsi_flag = 0;
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	2200      	movs	r2, #0
 80046f0:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	785b      	ldrb	r3, [r3, #1]
 80046f6:	2200      	movs	r2, #0
 80046f8:	2100      	movs	r1, #0
 80046fa:	4618      	mov	r0, r3
 80046fc:	f7ff fca4 	bl	8004048 <disk_ioctl>
 8004700:	4603      	mov	r3, r0
 8004702:	2b00      	cmp	r3, #0
 8004704:	d001      	beq.n	800470a <sync_fs+0xca>
 8004706:	2301      	movs	r3, #1
 8004708:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800470a:	7bfb      	ldrb	r3, [r7, #15]
}
 800470c:	4618      	mov	r0, r3
 800470e:	3710      	adds	r7, #16
 8004710:	46bd      	mov	sp, r7
 8004712:	bd80      	pop	{r7, pc}
 8004714:	41615252 	.word	0x41615252
 8004718:	61417272 	.word	0x61417272

0800471c <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800471c:	b480      	push	{r7}
 800471e:	b083      	sub	sp, #12
 8004720:	af00      	add	r7, sp, #0
 8004722:	6078      	str	r0, [r7, #4]
 8004724:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8004726:	683b      	ldr	r3, [r7, #0]
 8004728:	3b02      	subs	r3, #2
 800472a:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	695b      	ldr	r3, [r3, #20]
 8004730:	3b02      	subs	r3, #2
 8004732:	683a      	ldr	r2, [r7, #0]
 8004734:	429a      	cmp	r2, r3
 8004736:	d301      	bcc.n	800473c <clust2sect+0x20>
 8004738:	2300      	movs	r3, #0
 800473a:	e008      	b.n	800474e <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	895b      	ldrh	r3, [r3, #10]
 8004740:	461a      	mov	r2, r3
 8004742:	683b      	ldr	r3, [r7, #0]
 8004744:	fb03 f202 	mul.w	r2, r3, r2
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800474c:	4413      	add	r3, r2
}
 800474e:	4618      	mov	r0, r3
 8004750:	370c      	adds	r7, #12
 8004752:	46bd      	mov	sp, r7
 8004754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004758:	4770      	bx	lr

0800475a <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800475a:	b580      	push	{r7, lr}
 800475c:	b086      	sub	sp, #24
 800475e:	af00      	add	r7, sp, #0
 8004760:	6078      	str	r0, [r7, #4]
 8004762:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800476a:	683b      	ldr	r3, [r7, #0]
 800476c:	2b01      	cmp	r3, #1
 800476e:	d904      	bls.n	800477a <get_fat+0x20>
 8004770:	693b      	ldr	r3, [r7, #16]
 8004772:	695b      	ldr	r3, [r3, #20]
 8004774:	683a      	ldr	r2, [r7, #0]
 8004776:	429a      	cmp	r2, r3
 8004778:	d302      	bcc.n	8004780 <get_fat+0x26>
		val = 1;	/* Internal error */
 800477a:	2301      	movs	r3, #1
 800477c:	617b      	str	r3, [r7, #20]
 800477e:	e08f      	b.n	80048a0 <get_fat+0x146>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8004780:	f04f 33ff 	mov.w	r3, #4294967295
 8004784:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8004786:	693b      	ldr	r3, [r7, #16]
 8004788:	781b      	ldrb	r3, [r3, #0]
 800478a:	2b03      	cmp	r3, #3
 800478c:	d062      	beq.n	8004854 <get_fat+0xfa>
 800478e:	2b03      	cmp	r3, #3
 8004790:	dc7c      	bgt.n	800488c <get_fat+0x132>
 8004792:	2b01      	cmp	r3, #1
 8004794:	d002      	beq.n	800479c <get_fat+0x42>
 8004796:	2b02      	cmp	r3, #2
 8004798:	d042      	beq.n	8004820 <get_fat+0xc6>
 800479a:	e077      	b.n	800488c <get_fat+0x132>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800479c:	683b      	ldr	r3, [r7, #0]
 800479e:	60fb      	str	r3, [r7, #12]
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	085b      	lsrs	r3, r3, #1
 80047a4:	68fa      	ldr	r2, [r7, #12]
 80047a6:	4413      	add	r3, r2
 80047a8:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80047aa:	693b      	ldr	r3, [r7, #16]
 80047ac:	6a1a      	ldr	r2, [r3, #32]
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	0a5b      	lsrs	r3, r3, #9
 80047b2:	4413      	add	r3, r2
 80047b4:	4619      	mov	r1, r3
 80047b6:	6938      	ldr	r0, [r7, #16]
 80047b8:	f7ff ff14 	bl	80045e4 <move_window>
 80047bc:	4603      	mov	r3, r0
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d167      	bne.n	8004892 <get_fat+0x138>
			wc = fs->win[bc++ % SS(fs)];
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	1c5a      	adds	r2, r3, #1
 80047c6:	60fa      	str	r2, [r7, #12]
 80047c8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80047cc:	693a      	ldr	r2, [r7, #16]
 80047ce:	4413      	add	r3, r2
 80047d0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80047d4:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80047d6:	693b      	ldr	r3, [r7, #16]
 80047d8:	6a1a      	ldr	r2, [r3, #32]
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	0a5b      	lsrs	r3, r3, #9
 80047de:	4413      	add	r3, r2
 80047e0:	4619      	mov	r1, r3
 80047e2:	6938      	ldr	r0, [r7, #16]
 80047e4:	f7ff fefe 	bl	80045e4 <move_window>
 80047e8:	4603      	mov	r3, r0
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d153      	bne.n	8004896 <get_fat+0x13c>
			wc |= fs->win[bc % SS(fs)] << 8;
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80047f4:	693a      	ldr	r2, [r7, #16]
 80047f6:	4413      	add	r3, r2
 80047f8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80047fc:	021b      	lsls	r3, r3, #8
 80047fe:	461a      	mov	r2, r3
 8004800:	68bb      	ldr	r3, [r7, #8]
 8004802:	4313      	orrs	r3, r2
 8004804:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8004806:	683b      	ldr	r3, [r7, #0]
 8004808:	f003 0301 	and.w	r3, r3, #1
 800480c:	2b00      	cmp	r3, #0
 800480e:	d002      	beq.n	8004816 <get_fat+0xbc>
 8004810:	68bb      	ldr	r3, [r7, #8]
 8004812:	091b      	lsrs	r3, r3, #4
 8004814:	e002      	b.n	800481c <get_fat+0xc2>
 8004816:	68bb      	ldr	r3, [r7, #8]
 8004818:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800481c:	617b      	str	r3, [r7, #20]
			break;
 800481e:	e03f      	b.n	80048a0 <get_fat+0x146>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8004820:	693b      	ldr	r3, [r7, #16]
 8004822:	6a1a      	ldr	r2, [r3, #32]
 8004824:	683b      	ldr	r3, [r7, #0]
 8004826:	0a1b      	lsrs	r3, r3, #8
 8004828:	4413      	add	r3, r2
 800482a:	4619      	mov	r1, r3
 800482c:	6938      	ldr	r0, [r7, #16]
 800482e:	f7ff fed9 	bl	80045e4 <move_window>
 8004832:	4603      	mov	r3, r0
 8004834:	2b00      	cmp	r3, #0
 8004836:	d130      	bne.n	800489a <get_fat+0x140>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8004838:	693b      	ldr	r3, [r7, #16]
 800483a:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800483e:	683b      	ldr	r3, [r7, #0]
 8004840:	005b      	lsls	r3, r3, #1
 8004842:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 8004846:	4413      	add	r3, r2
 8004848:	4618      	mov	r0, r3
 800484a:	f7ff fc1b 	bl	8004084 <ld_word>
 800484e:	4603      	mov	r3, r0
 8004850:	617b      	str	r3, [r7, #20]
			break;
 8004852:	e025      	b.n	80048a0 <get_fat+0x146>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8004854:	693b      	ldr	r3, [r7, #16]
 8004856:	6a1a      	ldr	r2, [r3, #32]
 8004858:	683b      	ldr	r3, [r7, #0]
 800485a:	09db      	lsrs	r3, r3, #7
 800485c:	4413      	add	r3, r2
 800485e:	4619      	mov	r1, r3
 8004860:	6938      	ldr	r0, [r7, #16]
 8004862:	f7ff febf 	bl	80045e4 <move_window>
 8004866:	4603      	mov	r3, r0
 8004868:	2b00      	cmp	r3, #0
 800486a:	d118      	bne.n	800489e <get_fat+0x144>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800486c:	693b      	ldr	r3, [r7, #16]
 800486e:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8004872:	683b      	ldr	r3, [r7, #0]
 8004874:	009b      	lsls	r3, r3, #2
 8004876:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800487a:	4413      	add	r3, r2
 800487c:	4618      	mov	r0, r3
 800487e:	f7ff fc19 	bl	80040b4 <ld_dword>
 8004882:	4603      	mov	r3, r0
 8004884:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8004888:	617b      	str	r3, [r7, #20]
			break;
 800488a:	e009      	b.n	80048a0 <get_fat+0x146>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800488c:	2301      	movs	r3, #1
 800488e:	617b      	str	r3, [r7, #20]
 8004890:	e006      	b.n	80048a0 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8004892:	bf00      	nop
 8004894:	e004      	b.n	80048a0 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8004896:	bf00      	nop
 8004898:	e002      	b.n	80048a0 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800489a:	bf00      	nop
 800489c:	e000      	b.n	80048a0 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800489e:	bf00      	nop
		}
	}

	return val;
 80048a0:	697b      	ldr	r3, [r7, #20]
}
 80048a2:	4618      	mov	r0, r3
 80048a4:	3718      	adds	r7, #24
 80048a6:	46bd      	mov	sp, r7
 80048a8:	bd80      	pop	{r7, pc}

080048aa <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 80048aa:	b590      	push	{r4, r7, lr}
 80048ac:	b089      	sub	sp, #36	; 0x24
 80048ae:	af00      	add	r7, sp, #0
 80048b0:	60f8      	str	r0, [r7, #12]
 80048b2:	60b9      	str	r1, [r7, #8]
 80048b4:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 80048b6:	2302      	movs	r3, #2
 80048b8:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 80048ba:	68bb      	ldr	r3, [r7, #8]
 80048bc:	2b01      	cmp	r3, #1
 80048be:	f240 80d2 	bls.w	8004a66 <put_fat+0x1bc>
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	695b      	ldr	r3, [r3, #20]
 80048c6:	68ba      	ldr	r2, [r7, #8]
 80048c8:	429a      	cmp	r2, r3
 80048ca:	f080 80cc 	bcs.w	8004a66 <put_fat+0x1bc>
		switch (fs->fs_type) {
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	781b      	ldrb	r3, [r3, #0]
 80048d2:	2b03      	cmp	r3, #3
 80048d4:	f000 8096 	beq.w	8004a04 <put_fat+0x15a>
 80048d8:	2b03      	cmp	r3, #3
 80048da:	f300 80cd 	bgt.w	8004a78 <put_fat+0x1ce>
 80048de:	2b01      	cmp	r3, #1
 80048e0:	d002      	beq.n	80048e8 <put_fat+0x3e>
 80048e2:	2b02      	cmp	r3, #2
 80048e4:	d06e      	beq.n	80049c4 <put_fat+0x11a>
 80048e6:	e0c7      	b.n	8004a78 <put_fat+0x1ce>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 80048e8:	68bb      	ldr	r3, [r7, #8]
 80048ea:	61bb      	str	r3, [r7, #24]
 80048ec:	69bb      	ldr	r3, [r7, #24]
 80048ee:	085b      	lsrs	r3, r3, #1
 80048f0:	69ba      	ldr	r2, [r7, #24]
 80048f2:	4413      	add	r3, r2
 80048f4:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	6a1a      	ldr	r2, [r3, #32]
 80048fa:	69bb      	ldr	r3, [r7, #24]
 80048fc:	0a5b      	lsrs	r3, r3, #9
 80048fe:	4413      	add	r3, r2
 8004900:	4619      	mov	r1, r3
 8004902:	68f8      	ldr	r0, [r7, #12]
 8004904:	f7ff fe6e 	bl	80045e4 <move_window>
 8004908:	4603      	mov	r3, r0
 800490a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800490c:	7ffb      	ldrb	r3, [r7, #31]
 800490e:	2b00      	cmp	r3, #0
 8004910:	f040 80ab 	bne.w	8004a6a <put_fat+0x1c0>
			p = fs->win + bc++ % SS(fs);
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800491a:	69bb      	ldr	r3, [r7, #24]
 800491c:	1c59      	adds	r1, r3, #1
 800491e:	61b9      	str	r1, [r7, #24]
 8004920:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004924:	4413      	add	r3, r2
 8004926:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8004928:	68bb      	ldr	r3, [r7, #8]
 800492a:	f003 0301 	and.w	r3, r3, #1
 800492e:	2b00      	cmp	r3, #0
 8004930:	d00d      	beq.n	800494e <put_fat+0xa4>
 8004932:	697b      	ldr	r3, [r7, #20]
 8004934:	781b      	ldrb	r3, [r3, #0]
 8004936:	b25b      	sxtb	r3, r3
 8004938:	f003 030f 	and.w	r3, r3, #15
 800493c:	b25a      	sxtb	r2, r3
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	b2db      	uxtb	r3, r3
 8004942:	011b      	lsls	r3, r3, #4
 8004944:	b25b      	sxtb	r3, r3
 8004946:	4313      	orrs	r3, r2
 8004948:	b25b      	sxtb	r3, r3
 800494a:	b2db      	uxtb	r3, r3
 800494c:	e001      	b.n	8004952 <put_fat+0xa8>
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	b2db      	uxtb	r3, r3
 8004952:	697a      	ldr	r2, [r7, #20]
 8004954:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	2201      	movs	r2, #1
 800495a:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	6a1a      	ldr	r2, [r3, #32]
 8004960:	69bb      	ldr	r3, [r7, #24]
 8004962:	0a5b      	lsrs	r3, r3, #9
 8004964:	4413      	add	r3, r2
 8004966:	4619      	mov	r1, r3
 8004968:	68f8      	ldr	r0, [r7, #12]
 800496a:	f7ff fe3b 	bl	80045e4 <move_window>
 800496e:	4603      	mov	r3, r0
 8004970:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8004972:	7ffb      	ldrb	r3, [r7, #31]
 8004974:	2b00      	cmp	r3, #0
 8004976:	d17a      	bne.n	8004a6e <put_fat+0x1c4>
			p = fs->win + bc % SS(fs);
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800497e:	69bb      	ldr	r3, [r7, #24]
 8004980:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004984:	4413      	add	r3, r2
 8004986:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8004988:	68bb      	ldr	r3, [r7, #8]
 800498a:	f003 0301 	and.w	r3, r3, #1
 800498e:	2b00      	cmp	r3, #0
 8004990:	d003      	beq.n	800499a <put_fat+0xf0>
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	091b      	lsrs	r3, r3, #4
 8004996:	b2db      	uxtb	r3, r3
 8004998:	e00e      	b.n	80049b8 <put_fat+0x10e>
 800499a:	697b      	ldr	r3, [r7, #20]
 800499c:	781b      	ldrb	r3, [r3, #0]
 800499e:	b25b      	sxtb	r3, r3
 80049a0:	f023 030f 	bic.w	r3, r3, #15
 80049a4:	b25a      	sxtb	r2, r3
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	0a1b      	lsrs	r3, r3, #8
 80049aa:	b25b      	sxtb	r3, r3
 80049ac:	f003 030f 	and.w	r3, r3, #15
 80049b0:	b25b      	sxtb	r3, r3
 80049b2:	4313      	orrs	r3, r2
 80049b4:	b25b      	sxtb	r3, r3
 80049b6:	b2db      	uxtb	r3, r3
 80049b8:	697a      	ldr	r2, [r7, #20]
 80049ba:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	2201      	movs	r2, #1
 80049c0:	70da      	strb	r2, [r3, #3]
			break;
 80049c2:	e059      	b.n	8004a78 <put_fat+0x1ce>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	6a1a      	ldr	r2, [r3, #32]
 80049c8:	68bb      	ldr	r3, [r7, #8]
 80049ca:	0a1b      	lsrs	r3, r3, #8
 80049cc:	4413      	add	r3, r2
 80049ce:	4619      	mov	r1, r3
 80049d0:	68f8      	ldr	r0, [r7, #12]
 80049d2:	f7ff fe07 	bl	80045e4 <move_window>
 80049d6:	4603      	mov	r3, r0
 80049d8:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80049da:	7ffb      	ldrb	r3, [r7, #31]
 80049dc:	2b00      	cmp	r3, #0
 80049de:	d148      	bne.n	8004a72 <put_fat+0x1c8>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80049e6:	68bb      	ldr	r3, [r7, #8]
 80049e8:	005b      	lsls	r3, r3, #1
 80049ea:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 80049ee:	4413      	add	r3, r2
 80049f0:	687a      	ldr	r2, [r7, #4]
 80049f2:	b292      	uxth	r2, r2
 80049f4:	4611      	mov	r1, r2
 80049f6:	4618      	mov	r0, r3
 80049f8:	f7ff fb7f 	bl	80040fa <st_word>
			fs->wflag = 1;
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	2201      	movs	r2, #1
 8004a00:	70da      	strb	r2, [r3, #3]
			break;
 8004a02:	e039      	b.n	8004a78 <put_fat+0x1ce>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	6a1a      	ldr	r2, [r3, #32]
 8004a08:	68bb      	ldr	r3, [r7, #8]
 8004a0a:	09db      	lsrs	r3, r3, #7
 8004a0c:	4413      	add	r3, r2
 8004a0e:	4619      	mov	r1, r3
 8004a10:	68f8      	ldr	r0, [r7, #12]
 8004a12:	f7ff fde7 	bl	80045e4 <move_window>
 8004a16:	4603      	mov	r3, r0
 8004a18:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8004a1a:	7ffb      	ldrb	r3, [r7, #31]
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	d12a      	bne.n	8004a76 <put_fat+0x1cc>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8004a2c:	68bb      	ldr	r3, [r7, #8]
 8004a2e:	009b      	lsls	r3, r3, #2
 8004a30:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8004a34:	4413      	add	r3, r2
 8004a36:	4618      	mov	r0, r3
 8004a38:	f7ff fb3c 	bl	80040b4 <ld_dword>
 8004a3c:	4603      	mov	r3, r0
 8004a3e:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8004a42:	4323      	orrs	r3, r4
 8004a44:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8004a4c:	68bb      	ldr	r3, [r7, #8]
 8004a4e:	009b      	lsls	r3, r3, #2
 8004a50:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8004a54:	4413      	add	r3, r2
 8004a56:	6879      	ldr	r1, [r7, #4]
 8004a58:	4618      	mov	r0, r3
 8004a5a:	f7ff fb69 	bl	8004130 <st_dword>
			fs->wflag = 1;
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	2201      	movs	r2, #1
 8004a62:	70da      	strb	r2, [r3, #3]
			break;
 8004a64:	e008      	b.n	8004a78 <put_fat+0x1ce>
		}
	}
 8004a66:	bf00      	nop
 8004a68:	e006      	b.n	8004a78 <put_fat+0x1ce>
			if (res != FR_OK) break;
 8004a6a:	bf00      	nop
 8004a6c:	e004      	b.n	8004a78 <put_fat+0x1ce>
			if (res != FR_OK) break;
 8004a6e:	bf00      	nop
 8004a70:	e002      	b.n	8004a78 <put_fat+0x1ce>
			if (res != FR_OK) break;
 8004a72:	bf00      	nop
 8004a74:	e000      	b.n	8004a78 <put_fat+0x1ce>
			if (res != FR_OK) break;
 8004a76:	bf00      	nop
	return res;
 8004a78:	7ffb      	ldrb	r3, [r7, #31]
}
 8004a7a:	4618      	mov	r0, r3
 8004a7c:	3724      	adds	r7, #36	; 0x24
 8004a7e:	46bd      	mov	sp, r7
 8004a80:	bd90      	pop	{r4, r7, pc}

08004a82 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8004a82:	b580      	push	{r7, lr}
 8004a84:	b088      	sub	sp, #32
 8004a86:	af00      	add	r7, sp, #0
 8004a88:	60f8      	str	r0, [r7, #12]
 8004a8a:	60b9      	str	r1, [r7, #8]
 8004a8c:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8004a8e:	2300      	movs	r3, #0
 8004a90:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8004a98:	68bb      	ldr	r3, [r7, #8]
 8004a9a:	2b01      	cmp	r3, #1
 8004a9c:	d904      	bls.n	8004aa8 <remove_chain+0x26>
 8004a9e:	69bb      	ldr	r3, [r7, #24]
 8004aa0:	695b      	ldr	r3, [r3, #20]
 8004aa2:	68ba      	ldr	r2, [r7, #8]
 8004aa4:	429a      	cmp	r2, r3
 8004aa6:	d301      	bcc.n	8004aac <remove_chain+0x2a>
 8004aa8:	2302      	movs	r3, #2
 8004aaa:	e04b      	b.n	8004b44 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d00c      	beq.n	8004acc <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8004ab2:	f04f 32ff 	mov.w	r2, #4294967295
 8004ab6:	6879      	ldr	r1, [r7, #4]
 8004ab8:	69b8      	ldr	r0, [r7, #24]
 8004aba:	f7ff fef6 	bl	80048aa <put_fat>
 8004abe:	4603      	mov	r3, r0
 8004ac0:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8004ac2:	7ffb      	ldrb	r3, [r7, #31]
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	d001      	beq.n	8004acc <remove_chain+0x4a>
 8004ac8:	7ffb      	ldrb	r3, [r7, #31]
 8004aca:	e03b      	b.n	8004b44 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8004acc:	68b9      	ldr	r1, [r7, #8]
 8004ace:	68f8      	ldr	r0, [r7, #12]
 8004ad0:	f7ff fe43 	bl	800475a <get_fat>
 8004ad4:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8004ad6:	697b      	ldr	r3, [r7, #20]
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	d031      	beq.n	8004b40 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8004adc:	697b      	ldr	r3, [r7, #20]
 8004ade:	2b01      	cmp	r3, #1
 8004ae0:	d101      	bne.n	8004ae6 <remove_chain+0x64>
 8004ae2:	2302      	movs	r3, #2
 8004ae4:	e02e      	b.n	8004b44 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8004ae6:	697b      	ldr	r3, [r7, #20]
 8004ae8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004aec:	d101      	bne.n	8004af2 <remove_chain+0x70>
 8004aee:	2301      	movs	r3, #1
 8004af0:	e028      	b.n	8004b44 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8004af2:	2200      	movs	r2, #0
 8004af4:	68b9      	ldr	r1, [r7, #8]
 8004af6:	69b8      	ldr	r0, [r7, #24]
 8004af8:	f7ff fed7 	bl	80048aa <put_fat>
 8004afc:	4603      	mov	r3, r0
 8004afe:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8004b00:	7ffb      	ldrb	r3, [r7, #31]
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d001      	beq.n	8004b0a <remove_chain+0x88>
 8004b06:	7ffb      	ldrb	r3, [r7, #31]
 8004b08:	e01c      	b.n	8004b44 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8004b0a:	69bb      	ldr	r3, [r7, #24]
 8004b0c:	691a      	ldr	r2, [r3, #16]
 8004b0e:	69bb      	ldr	r3, [r7, #24]
 8004b10:	695b      	ldr	r3, [r3, #20]
 8004b12:	3b02      	subs	r3, #2
 8004b14:	429a      	cmp	r2, r3
 8004b16:	d20b      	bcs.n	8004b30 <remove_chain+0xae>
			fs->free_clst++;
 8004b18:	69bb      	ldr	r3, [r7, #24]
 8004b1a:	691b      	ldr	r3, [r3, #16]
 8004b1c:	1c5a      	adds	r2, r3, #1
 8004b1e:	69bb      	ldr	r3, [r7, #24]
 8004b20:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;
 8004b22:	69bb      	ldr	r3, [r7, #24]
 8004b24:	791b      	ldrb	r3, [r3, #4]
 8004b26:	f043 0301 	orr.w	r3, r3, #1
 8004b2a:	b2da      	uxtb	r2, r3
 8004b2c:	69bb      	ldr	r3, [r7, #24]
 8004b2e:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 8004b30:	697b      	ldr	r3, [r7, #20]
 8004b32:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8004b34:	69bb      	ldr	r3, [r7, #24]
 8004b36:	695b      	ldr	r3, [r3, #20]
 8004b38:	68ba      	ldr	r2, [r7, #8]
 8004b3a:	429a      	cmp	r2, r3
 8004b3c:	d3c6      	bcc.n	8004acc <remove_chain+0x4a>
 8004b3e:	e000      	b.n	8004b42 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 8004b40:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 8004b42:	2300      	movs	r3, #0
}
 8004b44:	4618      	mov	r0, r3
 8004b46:	3720      	adds	r7, #32
 8004b48:	46bd      	mov	sp, r7
 8004b4a:	bd80      	pop	{r7, pc}

08004b4c <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8004b4c:	b580      	push	{r7, lr}
 8004b4e:	b088      	sub	sp, #32
 8004b50:	af00      	add	r7, sp, #0
 8004b52:	6078      	str	r0, [r7, #4]
 8004b54:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8004b5c:	683b      	ldr	r3, [r7, #0]
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d10d      	bne.n	8004b7e <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8004b62:	693b      	ldr	r3, [r7, #16]
 8004b64:	68db      	ldr	r3, [r3, #12]
 8004b66:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8004b68:	69bb      	ldr	r3, [r7, #24]
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d004      	beq.n	8004b78 <create_chain+0x2c>
 8004b6e:	693b      	ldr	r3, [r7, #16]
 8004b70:	695b      	ldr	r3, [r3, #20]
 8004b72:	69ba      	ldr	r2, [r7, #24]
 8004b74:	429a      	cmp	r2, r3
 8004b76:	d31b      	bcc.n	8004bb0 <create_chain+0x64>
 8004b78:	2301      	movs	r3, #1
 8004b7a:	61bb      	str	r3, [r7, #24]
 8004b7c:	e018      	b.n	8004bb0 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8004b7e:	6839      	ldr	r1, [r7, #0]
 8004b80:	6878      	ldr	r0, [r7, #4]
 8004b82:	f7ff fdea 	bl	800475a <get_fat>
 8004b86:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	2b01      	cmp	r3, #1
 8004b8c:	d801      	bhi.n	8004b92 <create_chain+0x46>
 8004b8e:	2301      	movs	r3, #1
 8004b90:	e070      	b.n	8004c74 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b98:	d101      	bne.n	8004b9e <create_chain+0x52>
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	e06a      	b.n	8004c74 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8004b9e:	693b      	ldr	r3, [r7, #16]
 8004ba0:	695b      	ldr	r3, [r3, #20]
 8004ba2:	68fa      	ldr	r2, [r7, #12]
 8004ba4:	429a      	cmp	r2, r3
 8004ba6:	d201      	bcs.n	8004bac <create_chain+0x60>
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	e063      	b.n	8004c74 <create_chain+0x128>
		scl = clst;
 8004bac:	683b      	ldr	r3, [r7, #0]
 8004bae:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8004bb0:	69bb      	ldr	r3, [r7, #24]
 8004bb2:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8004bb4:	69fb      	ldr	r3, [r7, #28]
 8004bb6:	3301      	adds	r3, #1
 8004bb8:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8004bba:	693b      	ldr	r3, [r7, #16]
 8004bbc:	695b      	ldr	r3, [r3, #20]
 8004bbe:	69fa      	ldr	r2, [r7, #28]
 8004bc0:	429a      	cmp	r2, r3
 8004bc2:	d307      	bcc.n	8004bd4 <create_chain+0x88>
				ncl = 2;
 8004bc4:	2302      	movs	r3, #2
 8004bc6:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8004bc8:	69fa      	ldr	r2, [r7, #28]
 8004bca:	69bb      	ldr	r3, [r7, #24]
 8004bcc:	429a      	cmp	r2, r3
 8004bce:	d901      	bls.n	8004bd4 <create_chain+0x88>
 8004bd0:	2300      	movs	r3, #0
 8004bd2:	e04f      	b.n	8004c74 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8004bd4:	69f9      	ldr	r1, [r7, #28]
 8004bd6:	6878      	ldr	r0, [r7, #4]
 8004bd8:	f7ff fdbf 	bl	800475a <get_fat>
 8004bdc:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	d00e      	beq.n	8004c02 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	2b01      	cmp	r3, #1
 8004be8:	d003      	beq.n	8004bf2 <create_chain+0xa6>
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004bf0:	d101      	bne.n	8004bf6 <create_chain+0xaa>
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	e03e      	b.n	8004c74 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 8004bf6:	69fa      	ldr	r2, [r7, #28]
 8004bf8:	69bb      	ldr	r3, [r7, #24]
 8004bfa:	429a      	cmp	r2, r3
 8004bfc:	d1da      	bne.n	8004bb4 <create_chain+0x68>
 8004bfe:	2300      	movs	r3, #0
 8004c00:	e038      	b.n	8004c74 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 8004c02:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8004c04:	f04f 32ff 	mov.w	r2, #4294967295
 8004c08:	69f9      	ldr	r1, [r7, #28]
 8004c0a:	6938      	ldr	r0, [r7, #16]
 8004c0c:	f7ff fe4d 	bl	80048aa <put_fat>
 8004c10:	4603      	mov	r3, r0
 8004c12:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8004c14:	7dfb      	ldrb	r3, [r7, #23]
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d109      	bne.n	8004c2e <create_chain+0xe2>
 8004c1a:	683b      	ldr	r3, [r7, #0]
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d006      	beq.n	8004c2e <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8004c20:	69fa      	ldr	r2, [r7, #28]
 8004c22:	6839      	ldr	r1, [r7, #0]
 8004c24:	6938      	ldr	r0, [r7, #16]
 8004c26:	f7ff fe40 	bl	80048aa <put_fat>
 8004c2a:	4603      	mov	r3, r0
 8004c2c:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8004c2e:	7dfb      	ldrb	r3, [r7, #23]
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	d116      	bne.n	8004c62 <create_chain+0x116>
		fs->last_clst = ncl;
 8004c34:	693b      	ldr	r3, [r7, #16]
 8004c36:	69fa      	ldr	r2, [r7, #28]
 8004c38:	60da      	str	r2, [r3, #12]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8004c3a:	693b      	ldr	r3, [r7, #16]
 8004c3c:	691a      	ldr	r2, [r3, #16]
 8004c3e:	693b      	ldr	r3, [r7, #16]
 8004c40:	695b      	ldr	r3, [r3, #20]
 8004c42:	3b02      	subs	r3, #2
 8004c44:	429a      	cmp	r2, r3
 8004c46:	d804      	bhi.n	8004c52 <create_chain+0x106>
 8004c48:	693b      	ldr	r3, [r7, #16]
 8004c4a:	691b      	ldr	r3, [r3, #16]
 8004c4c:	1e5a      	subs	r2, r3, #1
 8004c4e:	693b      	ldr	r3, [r7, #16]
 8004c50:	611a      	str	r2, [r3, #16]
		fs->fsi_flag |= 1;
 8004c52:	693b      	ldr	r3, [r7, #16]
 8004c54:	791b      	ldrb	r3, [r3, #4]
 8004c56:	f043 0301 	orr.w	r3, r3, #1
 8004c5a:	b2da      	uxtb	r2, r3
 8004c5c:	693b      	ldr	r3, [r7, #16]
 8004c5e:	711a      	strb	r2, [r3, #4]
 8004c60:	e007      	b.n	8004c72 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8004c62:	7dfb      	ldrb	r3, [r7, #23]
 8004c64:	2b01      	cmp	r3, #1
 8004c66:	d102      	bne.n	8004c6e <create_chain+0x122>
 8004c68:	f04f 33ff 	mov.w	r3, #4294967295
 8004c6c:	e000      	b.n	8004c70 <create_chain+0x124>
 8004c6e:	2301      	movs	r3, #1
 8004c70:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8004c72:	69fb      	ldr	r3, [r7, #28]
}
 8004c74:	4618      	mov	r0, r3
 8004c76:	3720      	adds	r7, #32
 8004c78:	46bd      	mov	sp, r7
 8004c7a:	bd80      	pop	{r7, pc}

08004c7c <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8004c7c:	b480      	push	{r7}
 8004c7e:	b087      	sub	sp, #28
 8004c80:	af00      	add	r7, sp, #0
 8004c82:	6078      	str	r0, [r7, #4]
 8004c84:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c90:	3304      	adds	r3, #4
 8004c92:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8004c94:	683b      	ldr	r3, [r7, #0]
 8004c96:	0a5b      	lsrs	r3, r3, #9
 8004c98:	68fa      	ldr	r2, [r7, #12]
 8004c9a:	8952      	ldrh	r2, [r2, #10]
 8004c9c:	fbb3 f3f2 	udiv	r3, r3, r2
 8004ca0:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8004ca2:	693b      	ldr	r3, [r7, #16]
 8004ca4:	1d1a      	adds	r2, r3, #4
 8004ca6:	613a      	str	r2, [r7, #16]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8004cac:	68bb      	ldr	r3, [r7, #8]
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d101      	bne.n	8004cb6 <clmt_clust+0x3a>
 8004cb2:	2300      	movs	r3, #0
 8004cb4:	e010      	b.n	8004cd8 <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 8004cb6:	697a      	ldr	r2, [r7, #20]
 8004cb8:	68bb      	ldr	r3, [r7, #8]
 8004cba:	429a      	cmp	r2, r3
 8004cbc:	d307      	bcc.n	8004cce <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 8004cbe:	697a      	ldr	r2, [r7, #20]
 8004cc0:	68bb      	ldr	r3, [r7, #8]
 8004cc2:	1ad3      	subs	r3, r2, r3
 8004cc4:	617b      	str	r3, [r7, #20]
 8004cc6:	693b      	ldr	r3, [r7, #16]
 8004cc8:	3304      	adds	r3, #4
 8004cca:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8004ccc:	e7e9      	b.n	8004ca2 <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 8004cce:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8004cd0:	693b      	ldr	r3, [r7, #16]
 8004cd2:	681a      	ldr	r2, [r3, #0]
 8004cd4:	697b      	ldr	r3, [r7, #20]
 8004cd6:	4413      	add	r3, r2
}
 8004cd8:	4618      	mov	r0, r3
 8004cda:	371c      	adds	r7, #28
 8004cdc:	46bd      	mov	sp, r7
 8004cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ce2:	4770      	bx	lr

08004ce4 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8004ce4:	b580      	push	{r7, lr}
 8004ce6:	b086      	sub	sp, #24
 8004ce8:	af00      	add	r7, sp, #0
 8004cea:	6078      	str	r0, [r7, #4]
 8004cec:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8004cf4:	683b      	ldr	r3, [r7, #0]
 8004cf6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004cfa:	d204      	bcs.n	8004d06 <dir_sdi+0x22>
 8004cfc:	683b      	ldr	r3, [r7, #0]
 8004cfe:	f003 031f 	and.w	r3, r3, #31
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d001      	beq.n	8004d0a <dir_sdi+0x26>
		return FR_INT_ERR;
 8004d06:	2302      	movs	r3, #2
 8004d08:	e063      	b.n	8004dd2 <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	683a      	ldr	r2, [r7, #0]
 8004d0e:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	689b      	ldr	r3, [r3, #8]
 8004d14:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8004d16:	697b      	ldr	r3, [r7, #20]
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	d106      	bne.n	8004d2a <dir_sdi+0x46>
 8004d1c:	693b      	ldr	r3, [r7, #16]
 8004d1e:	781b      	ldrb	r3, [r3, #0]
 8004d20:	2b02      	cmp	r3, #2
 8004d22:	d902      	bls.n	8004d2a <dir_sdi+0x46>
		clst = fs->dirbase;
 8004d24:	693b      	ldr	r3, [r7, #16]
 8004d26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d28:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8004d2a:	697b      	ldr	r3, [r7, #20]
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	d10c      	bne.n	8004d4a <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8004d30:	683b      	ldr	r3, [r7, #0]
 8004d32:	095b      	lsrs	r3, r3, #5
 8004d34:	693a      	ldr	r2, [r7, #16]
 8004d36:	8912      	ldrh	r2, [r2, #8]
 8004d38:	4293      	cmp	r3, r2
 8004d3a:	d301      	bcc.n	8004d40 <dir_sdi+0x5c>
 8004d3c:	2302      	movs	r3, #2
 8004d3e:	e048      	b.n	8004dd2 <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 8004d40:	693b      	ldr	r3, [r7, #16]
 8004d42:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	61da      	str	r2, [r3, #28]
 8004d48:	e029      	b.n	8004d9e <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8004d4a:	693b      	ldr	r3, [r7, #16]
 8004d4c:	895b      	ldrh	r3, [r3, #10]
 8004d4e:	025b      	lsls	r3, r3, #9
 8004d50:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8004d52:	e019      	b.n	8004d88 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	6979      	ldr	r1, [r7, #20]
 8004d58:	4618      	mov	r0, r3
 8004d5a:	f7ff fcfe 	bl	800475a <get_fat>
 8004d5e:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8004d60:	697b      	ldr	r3, [r7, #20]
 8004d62:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d66:	d101      	bne.n	8004d6c <dir_sdi+0x88>
 8004d68:	2301      	movs	r3, #1
 8004d6a:	e032      	b.n	8004dd2 <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8004d6c:	697b      	ldr	r3, [r7, #20]
 8004d6e:	2b01      	cmp	r3, #1
 8004d70:	d904      	bls.n	8004d7c <dir_sdi+0x98>
 8004d72:	693b      	ldr	r3, [r7, #16]
 8004d74:	695b      	ldr	r3, [r3, #20]
 8004d76:	697a      	ldr	r2, [r7, #20]
 8004d78:	429a      	cmp	r2, r3
 8004d7a:	d301      	bcc.n	8004d80 <dir_sdi+0x9c>
 8004d7c:	2302      	movs	r3, #2
 8004d7e:	e028      	b.n	8004dd2 <dir_sdi+0xee>
			ofs -= csz;
 8004d80:	683a      	ldr	r2, [r7, #0]
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	1ad3      	subs	r3, r2, r3
 8004d86:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8004d88:	683a      	ldr	r2, [r7, #0]
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	429a      	cmp	r2, r3
 8004d8e:	d2e1      	bcs.n	8004d54 <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 8004d90:	6979      	ldr	r1, [r7, #20]
 8004d92:	6938      	ldr	r0, [r7, #16]
 8004d94:	f7ff fcc2 	bl	800471c <clust2sect>
 8004d98:	4602      	mov	r2, r0
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	697a      	ldr	r2, [r7, #20]
 8004da2:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	69db      	ldr	r3, [r3, #28]
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	d101      	bne.n	8004db0 <dir_sdi+0xcc>
 8004dac:	2302      	movs	r3, #2
 8004dae:	e010      	b.n	8004dd2 <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	69da      	ldr	r2, [r3, #28]
 8004db4:	683b      	ldr	r3, [r7, #0]
 8004db6:	0a5b      	lsrs	r3, r3, #9
 8004db8:	441a      	add	r2, r3
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8004dbe:	693b      	ldr	r3, [r7, #16]
 8004dc0:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8004dc4:	683b      	ldr	r3, [r7, #0]
 8004dc6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004dca:	441a      	add	r2, r3
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8004dd0:	2300      	movs	r3, #0
}
 8004dd2:	4618      	mov	r0, r3
 8004dd4:	3718      	adds	r7, #24
 8004dd6:	46bd      	mov	sp, r7
 8004dd8:	bd80      	pop	{r7, pc}

08004dda <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8004dda:	b580      	push	{r7, lr}
 8004ddc:	b086      	sub	sp, #24
 8004dde:	af00      	add	r7, sp, #0
 8004de0:	6078      	str	r0, [r7, #4]
 8004de2:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	695b      	ldr	r3, [r3, #20]
 8004dee:	3320      	adds	r3, #32
 8004df0:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	69db      	ldr	r3, [r3, #28]
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d003      	beq.n	8004e02 <dir_next+0x28>
 8004dfa:	68bb      	ldr	r3, [r7, #8]
 8004dfc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004e00:	d301      	bcc.n	8004e06 <dir_next+0x2c>
 8004e02:	2304      	movs	r3, #4
 8004e04:	e0aa      	b.n	8004f5c <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8004e06:	68bb      	ldr	r3, [r7, #8]
 8004e08:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	f040 8098 	bne.w	8004f42 <dir_next+0x168>
		dp->sect++;				/* Next sector */
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	69db      	ldr	r3, [r3, #28]
 8004e16:	1c5a      	adds	r2, r3, #1
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	699b      	ldr	r3, [r3, #24]
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	d10b      	bne.n	8004e3c <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8004e24:	68bb      	ldr	r3, [r7, #8]
 8004e26:	095b      	lsrs	r3, r3, #5
 8004e28:	68fa      	ldr	r2, [r7, #12]
 8004e2a:	8912      	ldrh	r2, [r2, #8]
 8004e2c:	4293      	cmp	r3, r2
 8004e2e:	f0c0 8088 	bcc.w	8004f42 <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	2200      	movs	r2, #0
 8004e36:	61da      	str	r2, [r3, #28]
 8004e38:	2304      	movs	r3, #4
 8004e3a:	e08f      	b.n	8004f5c <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8004e3c:	68bb      	ldr	r3, [r7, #8]
 8004e3e:	0a5b      	lsrs	r3, r3, #9
 8004e40:	68fa      	ldr	r2, [r7, #12]
 8004e42:	8952      	ldrh	r2, [r2, #10]
 8004e44:	3a01      	subs	r2, #1
 8004e46:	4013      	ands	r3, r2
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	d17a      	bne.n	8004f42 <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8004e4c:	687a      	ldr	r2, [r7, #4]
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	699b      	ldr	r3, [r3, #24]
 8004e52:	4619      	mov	r1, r3
 8004e54:	4610      	mov	r0, r2
 8004e56:	f7ff fc80 	bl	800475a <get_fat>
 8004e5a:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8004e5c:	697b      	ldr	r3, [r7, #20]
 8004e5e:	2b01      	cmp	r3, #1
 8004e60:	d801      	bhi.n	8004e66 <dir_next+0x8c>
 8004e62:	2302      	movs	r3, #2
 8004e64:	e07a      	b.n	8004f5c <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8004e66:	697b      	ldr	r3, [r7, #20]
 8004e68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e6c:	d101      	bne.n	8004e72 <dir_next+0x98>
 8004e6e:	2301      	movs	r3, #1
 8004e70:	e074      	b.n	8004f5c <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	695b      	ldr	r3, [r3, #20]
 8004e76:	697a      	ldr	r2, [r7, #20]
 8004e78:	429a      	cmp	r2, r3
 8004e7a:	d358      	bcc.n	8004f2e <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8004e7c:	683b      	ldr	r3, [r7, #0]
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d104      	bne.n	8004e8c <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	2200      	movs	r2, #0
 8004e86:	61da      	str	r2, [r3, #28]
 8004e88:	2304      	movs	r3, #4
 8004e8a:	e067      	b.n	8004f5c <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8004e8c:	687a      	ldr	r2, [r7, #4]
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	699b      	ldr	r3, [r3, #24]
 8004e92:	4619      	mov	r1, r3
 8004e94:	4610      	mov	r0, r2
 8004e96:	f7ff fe59 	bl	8004b4c <create_chain>
 8004e9a:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8004e9c:	697b      	ldr	r3, [r7, #20]
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	d101      	bne.n	8004ea6 <dir_next+0xcc>
 8004ea2:	2307      	movs	r3, #7
 8004ea4:	e05a      	b.n	8004f5c <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8004ea6:	697b      	ldr	r3, [r7, #20]
 8004ea8:	2b01      	cmp	r3, #1
 8004eaa:	d101      	bne.n	8004eb0 <dir_next+0xd6>
 8004eac:	2302      	movs	r3, #2
 8004eae:	e055      	b.n	8004f5c <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8004eb0:	697b      	ldr	r3, [r7, #20]
 8004eb2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004eb6:	d101      	bne.n	8004ebc <dir_next+0xe2>
 8004eb8:	2301      	movs	r3, #1
 8004eba:	e04f      	b.n	8004f5c <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8004ebc:	68f8      	ldr	r0, [r7, #12]
 8004ebe:	f7ff fb4d 	bl	800455c <sync_window>
 8004ec2:	4603      	mov	r3, r0
 8004ec4:	2b00      	cmp	r3, #0
 8004ec6:	d001      	beq.n	8004ecc <dir_next+0xf2>
 8004ec8:	2301      	movs	r3, #1
 8004eca:	e047      	b.n	8004f5c <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	3330      	adds	r3, #48	; 0x30
 8004ed0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004ed4:	2100      	movs	r1, #0
 8004ed6:	4618      	mov	r0, r3
 8004ed8:	f7ff f977 	bl	80041ca <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8004edc:	2300      	movs	r3, #0
 8004ede:	613b      	str	r3, [r7, #16]
 8004ee0:	6979      	ldr	r1, [r7, #20]
 8004ee2:	68f8      	ldr	r0, [r7, #12]
 8004ee4:	f7ff fc1a 	bl	800471c <clust2sect>
 8004ee8:	4602      	mov	r2, r0
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	62da      	str	r2, [r3, #44]	; 0x2c
 8004eee:	e012      	b.n	8004f16 <dir_next+0x13c>
						fs->wflag = 1;
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	2201      	movs	r2, #1
 8004ef4:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8004ef6:	68f8      	ldr	r0, [r7, #12]
 8004ef8:	f7ff fb30 	bl	800455c <sync_window>
 8004efc:	4603      	mov	r3, r0
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	d001      	beq.n	8004f06 <dir_next+0x12c>
 8004f02:	2301      	movs	r3, #1
 8004f04:	e02a      	b.n	8004f5c <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8004f06:	693b      	ldr	r3, [r7, #16]
 8004f08:	3301      	adds	r3, #1
 8004f0a:	613b      	str	r3, [r7, #16]
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f10:	1c5a      	adds	r2, r3, #1
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	62da      	str	r2, [r3, #44]	; 0x2c
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	895b      	ldrh	r3, [r3, #10]
 8004f1a:	461a      	mov	r2, r3
 8004f1c:	693b      	ldr	r3, [r7, #16]
 8004f1e:	4293      	cmp	r3, r2
 8004f20:	d3e6      	bcc.n	8004ef0 <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004f26:	693b      	ldr	r3, [r7, #16]
 8004f28:	1ad2      	subs	r2, r2, r3
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	62da      	str	r2, [r3, #44]	; 0x2c
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	697a      	ldr	r2, [r7, #20]
 8004f32:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 8004f34:	6979      	ldr	r1, [r7, #20]
 8004f36:	68f8      	ldr	r0, [r7, #12]
 8004f38:	f7ff fbf0 	bl	800471c <clust2sect>
 8004f3c:	4602      	mov	r2, r0
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	68ba      	ldr	r2, [r7, #8]
 8004f46:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8004f4e:	68bb      	ldr	r3, [r7, #8]
 8004f50:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004f54:	441a      	add	r2, r3
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8004f5a:	2300      	movs	r3, #0
}
 8004f5c:	4618      	mov	r0, r3
 8004f5e:	3718      	adds	r7, #24
 8004f60:	46bd      	mov	sp, r7
 8004f62:	bd80      	pop	{r7, pc}

08004f64 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 8004f64:	b580      	push	{r7, lr}
 8004f66:	b086      	sub	sp, #24
 8004f68:	af00      	add	r7, sp, #0
 8004f6a:	6078      	str	r0, [r7, #4]
 8004f6c:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8004f74:	2100      	movs	r1, #0
 8004f76:	6878      	ldr	r0, [r7, #4]
 8004f78:	f7ff feb4 	bl	8004ce4 <dir_sdi>
 8004f7c:	4603      	mov	r3, r0
 8004f7e:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8004f80:	7dfb      	ldrb	r3, [r7, #23]
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d12b      	bne.n	8004fde <dir_alloc+0x7a>
		n = 0;
 8004f86:	2300      	movs	r3, #0
 8004f88:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	69db      	ldr	r3, [r3, #28]
 8004f8e:	4619      	mov	r1, r3
 8004f90:	68f8      	ldr	r0, [r7, #12]
 8004f92:	f7ff fb27 	bl	80045e4 <move_window>
 8004f96:	4603      	mov	r3, r0
 8004f98:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8004f9a:	7dfb      	ldrb	r3, [r7, #23]
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	d11d      	bne.n	8004fdc <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	6a1b      	ldr	r3, [r3, #32]
 8004fa4:	781b      	ldrb	r3, [r3, #0]
 8004fa6:	2be5      	cmp	r3, #229	; 0xe5
 8004fa8:	d004      	beq.n	8004fb4 <dir_alloc+0x50>
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	6a1b      	ldr	r3, [r3, #32]
 8004fae:	781b      	ldrb	r3, [r3, #0]
 8004fb0:	2b00      	cmp	r3, #0
 8004fb2:	d107      	bne.n	8004fc4 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8004fb4:	693b      	ldr	r3, [r7, #16]
 8004fb6:	3301      	adds	r3, #1
 8004fb8:	613b      	str	r3, [r7, #16]
 8004fba:	693a      	ldr	r2, [r7, #16]
 8004fbc:	683b      	ldr	r3, [r7, #0]
 8004fbe:	429a      	cmp	r2, r3
 8004fc0:	d102      	bne.n	8004fc8 <dir_alloc+0x64>
 8004fc2:	e00c      	b.n	8004fde <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8004fc4:	2300      	movs	r3, #0
 8004fc6:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 8004fc8:	2101      	movs	r1, #1
 8004fca:	6878      	ldr	r0, [r7, #4]
 8004fcc:	f7ff ff05 	bl	8004dda <dir_next>
 8004fd0:	4603      	mov	r3, r0
 8004fd2:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8004fd4:	7dfb      	ldrb	r3, [r7, #23]
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d0d7      	beq.n	8004f8a <dir_alloc+0x26>
 8004fda:	e000      	b.n	8004fde <dir_alloc+0x7a>
			if (res != FR_OK) break;
 8004fdc:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8004fde:	7dfb      	ldrb	r3, [r7, #23]
 8004fe0:	2b04      	cmp	r3, #4
 8004fe2:	d101      	bne.n	8004fe8 <dir_alloc+0x84>
 8004fe4:	2307      	movs	r3, #7
 8004fe6:	75fb      	strb	r3, [r7, #23]
	return res;
 8004fe8:	7dfb      	ldrb	r3, [r7, #23]
}
 8004fea:	4618      	mov	r0, r3
 8004fec:	3718      	adds	r7, #24
 8004fee:	46bd      	mov	sp, r7
 8004ff0:	bd80      	pop	{r7, pc}

08004ff2 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 8004ff2:	b580      	push	{r7, lr}
 8004ff4:	b084      	sub	sp, #16
 8004ff6:	af00      	add	r7, sp, #0
 8004ff8:	6078      	str	r0, [r7, #4]
 8004ffa:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8004ffc:	683b      	ldr	r3, [r7, #0]
 8004ffe:	331a      	adds	r3, #26
 8005000:	4618      	mov	r0, r3
 8005002:	f7ff f83f 	bl	8004084 <ld_word>
 8005006:	4603      	mov	r3, r0
 8005008:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	781b      	ldrb	r3, [r3, #0]
 800500e:	2b03      	cmp	r3, #3
 8005010:	d109      	bne.n	8005026 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8005012:	683b      	ldr	r3, [r7, #0]
 8005014:	3314      	adds	r3, #20
 8005016:	4618      	mov	r0, r3
 8005018:	f7ff f834 	bl	8004084 <ld_word>
 800501c:	4603      	mov	r3, r0
 800501e:	041b      	lsls	r3, r3, #16
 8005020:	68fa      	ldr	r2, [r7, #12]
 8005022:	4313      	orrs	r3, r2
 8005024:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8005026:	68fb      	ldr	r3, [r7, #12]
}
 8005028:	4618      	mov	r0, r3
 800502a:	3710      	adds	r7, #16
 800502c:	46bd      	mov	sp, r7
 800502e:	bd80      	pop	{r7, pc}

08005030 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8005030:	b580      	push	{r7, lr}
 8005032:	b084      	sub	sp, #16
 8005034:	af00      	add	r7, sp, #0
 8005036:	60f8      	str	r0, [r7, #12]
 8005038:	60b9      	str	r1, [r7, #8]
 800503a:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800503c:	68bb      	ldr	r3, [r7, #8]
 800503e:	331a      	adds	r3, #26
 8005040:	687a      	ldr	r2, [r7, #4]
 8005042:	b292      	uxth	r2, r2
 8005044:	4611      	mov	r1, r2
 8005046:	4618      	mov	r0, r3
 8005048:	f7ff f857 	bl	80040fa <st_word>
	if (fs->fs_type == FS_FAT32) {
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	781b      	ldrb	r3, [r3, #0]
 8005050:	2b03      	cmp	r3, #3
 8005052:	d109      	bne.n	8005068 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8005054:	68bb      	ldr	r3, [r7, #8]
 8005056:	f103 0214 	add.w	r2, r3, #20
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	0c1b      	lsrs	r3, r3, #16
 800505e:	b29b      	uxth	r3, r3
 8005060:	4619      	mov	r1, r3
 8005062:	4610      	mov	r0, r2
 8005064:	f7ff f849 	bl	80040fa <st_word>
	}
}
 8005068:	bf00      	nop
 800506a:	3710      	adds	r7, #16
 800506c:	46bd      	mov	sp, r7
 800506e:	bd80      	pop	{r7, pc}

08005070 <dir_read>:
static
FRESULT dir_read (
	DIR* dp,		/* Pointer to the directory object */
	int vol			/* Filtered by 0:file/directory or 1:volume label */
)
{
 8005070:	b580      	push	{r7, lr}
 8005072:	b086      	sub	sp, #24
 8005074:	af00      	add	r7, sp, #0
 8005076:	6078      	str	r0, [r7, #4]
 8005078:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_NO_FILE;
 800507a:	2304      	movs	r3, #4
 800507c:	75fb      	strb	r3, [r7, #23]
	FATFS *fs = dp->obj.fs;
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	613b      	str	r3, [r7, #16]
	BYTE a, c;
#if _USE_LFN != 0
	BYTE ord = 0xFF, sum = 0xFF;
#endif

	while (dp->sect) {
 8005084:	e03c      	b.n	8005100 <dir_read+0x90>
		res = move_window(fs, dp->sect);
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	69db      	ldr	r3, [r3, #28]
 800508a:	4619      	mov	r1, r3
 800508c:	6938      	ldr	r0, [r7, #16]
 800508e:	f7ff faa9 	bl	80045e4 <move_window>
 8005092:	4603      	mov	r3, r0
 8005094:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8005096:	7dfb      	ldrb	r3, [r7, #23]
 8005098:	2b00      	cmp	r3, #0
 800509a:	d136      	bne.n	800510a <dir_read+0x9a>
		c = dp->dir[DIR_Name];	/* Test for the entry type */
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	6a1b      	ldr	r3, [r3, #32]
 80050a0:	781b      	ldrb	r3, [r3, #0]
 80050a2:	73fb      	strb	r3, [r7, #15]
		if (c == 0) {
 80050a4:	7bfb      	ldrb	r3, [r7, #15]
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	d102      	bne.n	80050b0 <dir_read+0x40>
			res = FR_NO_FILE; break; /* Reached to end of the directory */
 80050aa:	2304      	movs	r3, #4
 80050ac:	75fb      	strb	r3, [r7, #23]
 80050ae:	e031      	b.n	8005114 <dir_read+0xa4>
				}
			}
		} else
#endif
		{	/* On the FAT12/16/32 volume */
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	6a1b      	ldr	r3, [r3, #32]
 80050b4:	330b      	adds	r3, #11
 80050b6:	781b      	ldrb	r3, [r3, #0]
 80050b8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80050bc:	73bb      	strb	r3, [r7, #14]
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	7bba      	ldrb	r2, [r7, #14]
 80050c2:	719a      	strb	r2, [r3, #6]
					}
					break;
				}
			}
#else		/* Non LFN configuration */
			if (c != DDEM && c != '.' && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol) {	/* Is it a valid entry? */
 80050c4:	7bfb      	ldrb	r3, [r7, #15]
 80050c6:	2be5      	cmp	r3, #229	; 0xe5
 80050c8:	d011      	beq.n	80050ee <dir_read+0x7e>
 80050ca:	7bfb      	ldrb	r3, [r7, #15]
 80050cc:	2b2e      	cmp	r3, #46	; 0x2e
 80050ce:	d00e      	beq.n	80050ee <dir_read+0x7e>
 80050d0:	7bbb      	ldrb	r3, [r7, #14]
 80050d2:	2b0f      	cmp	r3, #15
 80050d4:	d00b      	beq.n	80050ee <dir_read+0x7e>
 80050d6:	7bbb      	ldrb	r3, [r7, #14]
 80050d8:	f023 0320 	bic.w	r3, r3, #32
 80050dc:	2b08      	cmp	r3, #8
 80050de:	bf0c      	ite	eq
 80050e0:	2301      	moveq	r3, #1
 80050e2:	2300      	movne	r3, #0
 80050e4:	b2db      	uxtb	r3, r3
 80050e6:	461a      	mov	r2, r3
 80050e8:	683b      	ldr	r3, [r7, #0]
 80050ea:	4293      	cmp	r3, r2
 80050ec:	d00f      	beq.n	800510e <dir_read+0x9e>
				break;
			}
#endif
		}
		res = dir_next(dp, 0);		/* Next entry */
 80050ee:	2100      	movs	r1, #0
 80050f0:	6878      	ldr	r0, [r7, #4]
 80050f2:	f7ff fe72 	bl	8004dda <dir_next>
 80050f6:	4603      	mov	r3, r0
 80050f8:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 80050fa:	7dfb      	ldrb	r3, [r7, #23]
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	d108      	bne.n	8005112 <dir_read+0xa2>
	while (dp->sect) {
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	69db      	ldr	r3, [r3, #28]
 8005104:	2b00      	cmp	r3, #0
 8005106:	d1be      	bne.n	8005086 <dir_read+0x16>
 8005108:	e004      	b.n	8005114 <dir_read+0xa4>
		if (res != FR_OK) break;
 800510a:	bf00      	nop
 800510c:	e002      	b.n	8005114 <dir_read+0xa4>
				break;
 800510e:	bf00      	nop
 8005110:	e000      	b.n	8005114 <dir_read+0xa4>
		if (res != FR_OK) break;
 8005112:	bf00      	nop
	}

	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 8005114:	7dfb      	ldrb	r3, [r7, #23]
 8005116:	2b00      	cmp	r3, #0
 8005118:	d002      	beq.n	8005120 <dir_read+0xb0>
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	2200      	movs	r2, #0
 800511e:	61da      	str	r2, [r3, #28]
	return res;
 8005120:	7dfb      	ldrb	r3, [r7, #23]
}
 8005122:	4618      	mov	r0, r3
 8005124:	3718      	adds	r7, #24
 8005126:	46bd      	mov	sp, r7
 8005128:	bd80      	pop	{r7, pc}

0800512a <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800512a:	b580      	push	{r7, lr}
 800512c:	b086      	sub	sp, #24
 800512e:	af00      	add	r7, sp, #0
 8005130:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8005138:	2100      	movs	r1, #0
 800513a:	6878      	ldr	r0, [r7, #4]
 800513c:	f7ff fdd2 	bl	8004ce4 <dir_sdi>
 8005140:	4603      	mov	r3, r0
 8005142:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8005144:	7dfb      	ldrb	r3, [r7, #23]
 8005146:	2b00      	cmp	r3, #0
 8005148:	d001      	beq.n	800514e <dir_find+0x24>
 800514a:	7dfb      	ldrb	r3, [r7, #23]
 800514c:	e03e      	b.n	80051cc <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	69db      	ldr	r3, [r3, #28]
 8005152:	4619      	mov	r1, r3
 8005154:	6938      	ldr	r0, [r7, #16]
 8005156:	f7ff fa45 	bl	80045e4 <move_window>
 800515a:	4603      	mov	r3, r0
 800515c:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800515e:	7dfb      	ldrb	r3, [r7, #23]
 8005160:	2b00      	cmp	r3, #0
 8005162:	d12f      	bne.n	80051c4 <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	6a1b      	ldr	r3, [r3, #32]
 8005168:	781b      	ldrb	r3, [r3, #0]
 800516a:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800516c:	7bfb      	ldrb	r3, [r7, #15]
 800516e:	2b00      	cmp	r3, #0
 8005170:	d102      	bne.n	8005178 <dir_find+0x4e>
 8005172:	2304      	movs	r3, #4
 8005174:	75fb      	strb	r3, [r7, #23]
 8005176:	e028      	b.n	80051ca <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	6a1b      	ldr	r3, [r3, #32]
 800517c:	330b      	adds	r3, #11
 800517e:	781b      	ldrb	r3, [r3, #0]
 8005180:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005184:	b2da      	uxtb	r2, r3
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	6a1b      	ldr	r3, [r3, #32]
 800518e:	330b      	adds	r3, #11
 8005190:	781b      	ldrb	r3, [r3, #0]
 8005192:	f003 0308 	and.w	r3, r3, #8
 8005196:	2b00      	cmp	r3, #0
 8005198:	d10a      	bne.n	80051b0 <dir_find+0x86>
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	6a18      	ldr	r0, [r3, #32]
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	3324      	adds	r3, #36	; 0x24
 80051a2:	220b      	movs	r2, #11
 80051a4:	4619      	mov	r1, r3
 80051a6:	f7ff f82b 	bl	8004200 <mem_cmp>
 80051aa:	4603      	mov	r3, r0
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	d00b      	beq.n	80051c8 <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 80051b0:	2100      	movs	r1, #0
 80051b2:	6878      	ldr	r0, [r7, #4]
 80051b4:	f7ff fe11 	bl	8004dda <dir_next>
 80051b8:	4603      	mov	r3, r0
 80051ba:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 80051bc:	7dfb      	ldrb	r3, [r7, #23]
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d0c5      	beq.n	800514e <dir_find+0x24>
 80051c2:	e002      	b.n	80051ca <dir_find+0xa0>
		if (res != FR_OK) break;
 80051c4:	bf00      	nop
 80051c6:	e000      	b.n	80051ca <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 80051c8:	bf00      	nop

	return res;
 80051ca:	7dfb      	ldrb	r3, [r7, #23]
}
 80051cc:	4618      	mov	r0, r3
 80051ce:	3718      	adds	r7, #24
 80051d0:	46bd      	mov	sp, r7
 80051d2:	bd80      	pop	{r7, pc}

080051d4 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 80051d4:	b580      	push	{r7, lr}
 80051d6:	b084      	sub	sp, #16
 80051d8:	af00      	add	r7, sp, #0
 80051da:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 80051e2:	2101      	movs	r1, #1
 80051e4:	6878      	ldr	r0, [r7, #4]
 80051e6:	f7ff febd 	bl	8004f64 <dir_alloc>
 80051ea:	4603      	mov	r3, r0
 80051ec:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 80051ee:	7bfb      	ldrb	r3, [r7, #15]
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	d11c      	bne.n	800522e <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	69db      	ldr	r3, [r3, #28]
 80051f8:	4619      	mov	r1, r3
 80051fa:	68b8      	ldr	r0, [r7, #8]
 80051fc:	f7ff f9f2 	bl	80045e4 <move_window>
 8005200:	4603      	mov	r3, r0
 8005202:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8005204:	7bfb      	ldrb	r3, [r7, #15]
 8005206:	2b00      	cmp	r3, #0
 8005208:	d111      	bne.n	800522e <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	6a1b      	ldr	r3, [r3, #32]
 800520e:	2220      	movs	r2, #32
 8005210:	2100      	movs	r1, #0
 8005212:	4618      	mov	r0, r3
 8005214:	f7fe ffd9 	bl	80041ca <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	6a18      	ldr	r0, [r3, #32]
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	3324      	adds	r3, #36	; 0x24
 8005220:	220b      	movs	r2, #11
 8005222:	4619      	mov	r1, r3
 8005224:	f7fe ffb0 	bl	8004188 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 8005228:	68bb      	ldr	r3, [r7, #8]
 800522a:	2201      	movs	r2, #1
 800522c:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800522e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005230:	4618      	mov	r0, r3
 8005232:	3710      	adds	r7, #16
 8005234:	46bd      	mov	sp, r7
 8005236:	bd80      	pop	{r7, pc}

08005238 <dir_remove>:

static
FRESULT dir_remove (	/* FR_OK:Succeeded, FR_DISK_ERR:A disk error */
	DIR* dp				/* Directory object pointing the entry to be removed */
)
{
 8005238:	b580      	push	{r7, lr}
 800523a:	b084      	sub	sp, #16
 800523c:	af00      	add	r7, sp, #0
 800523e:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	60fb      	str	r3, [r7, #12]
		} while (res == FR_OK);
		if (res == FR_NO_FILE) res = FR_INT_ERR;
	}
#else			/* Non LFN configuration */

	res = move_window(fs, dp->sect);
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	69db      	ldr	r3, [r3, #28]
 800524a:	4619      	mov	r1, r3
 800524c:	68f8      	ldr	r0, [r7, #12]
 800524e:	f7ff f9c9 	bl	80045e4 <move_window>
 8005252:	4603      	mov	r3, r0
 8005254:	72fb      	strb	r3, [r7, #11]
	if (res == FR_OK) {
 8005256:	7afb      	ldrb	r3, [r7, #11]
 8005258:	2b00      	cmp	r3, #0
 800525a:	d106      	bne.n	800526a <dir_remove+0x32>
		dp->dir[DIR_Name] = DDEM;
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	6a1b      	ldr	r3, [r3, #32]
 8005260:	22e5      	movs	r2, #229	; 0xe5
 8005262:	701a      	strb	r2, [r3, #0]
		fs->wflag = 1;
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	2201      	movs	r2, #1
 8005268:	70da      	strb	r2, [r3, #3]
	}
#endif

	return res;
 800526a:	7afb      	ldrb	r3, [r7, #11]
}
 800526c:	4618      	mov	r0, r3
 800526e:	3710      	adds	r7, #16
 8005270:	46bd      	mov	sp, r7
 8005272:	bd80      	pop	{r7, pc}

08005274 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8005274:	b580      	push	{r7, lr}
 8005276:	b088      	sub	sp, #32
 8005278:	af00      	add	r7, sp, #0
 800527a:	6078      	str	r0, [r7, #4]
 800527c:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 800527e:	683b      	ldr	r3, [r7, #0]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	60fb      	str	r3, [r7, #12]
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	3324      	adds	r3, #36	; 0x24
 8005288:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 800528a:	220b      	movs	r2, #11
 800528c:	2120      	movs	r1, #32
 800528e:	68b8      	ldr	r0, [r7, #8]
 8005290:	f7fe ff9b 	bl	80041ca <mem_set>
	si = i = 0; ni = 8;
 8005294:	2300      	movs	r3, #0
 8005296:	613b      	str	r3, [r7, #16]
 8005298:	693b      	ldr	r3, [r7, #16]
 800529a:	61fb      	str	r3, [r7, #28]
 800529c:	2308      	movs	r3, #8
 800529e:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 80052a0:	69fb      	ldr	r3, [r7, #28]
 80052a2:	1c5a      	adds	r2, r3, #1
 80052a4:	61fa      	str	r2, [r7, #28]
 80052a6:	68fa      	ldr	r2, [r7, #12]
 80052a8:	4413      	add	r3, r2
 80052aa:	781b      	ldrb	r3, [r3, #0]
 80052ac:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 80052ae:	7efb      	ldrb	r3, [r7, #27]
 80052b0:	2b20      	cmp	r3, #32
 80052b2:	d94e      	bls.n	8005352 <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 80052b4:	7efb      	ldrb	r3, [r7, #27]
 80052b6:	2b2f      	cmp	r3, #47	; 0x2f
 80052b8:	d006      	beq.n	80052c8 <create_name+0x54>
 80052ba:	7efb      	ldrb	r3, [r7, #27]
 80052bc:	2b5c      	cmp	r3, #92	; 0x5c
 80052be:	d110      	bne.n	80052e2 <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 80052c0:	e002      	b.n	80052c8 <create_name+0x54>
 80052c2:	69fb      	ldr	r3, [r7, #28]
 80052c4:	3301      	adds	r3, #1
 80052c6:	61fb      	str	r3, [r7, #28]
 80052c8:	68fa      	ldr	r2, [r7, #12]
 80052ca:	69fb      	ldr	r3, [r7, #28]
 80052cc:	4413      	add	r3, r2
 80052ce:	781b      	ldrb	r3, [r3, #0]
 80052d0:	2b2f      	cmp	r3, #47	; 0x2f
 80052d2:	d0f6      	beq.n	80052c2 <create_name+0x4e>
 80052d4:	68fa      	ldr	r2, [r7, #12]
 80052d6:	69fb      	ldr	r3, [r7, #28]
 80052d8:	4413      	add	r3, r2
 80052da:	781b      	ldrb	r3, [r3, #0]
 80052dc:	2b5c      	cmp	r3, #92	; 0x5c
 80052de:	d0f0      	beq.n	80052c2 <create_name+0x4e>
			break;
 80052e0:	e038      	b.n	8005354 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 80052e2:	7efb      	ldrb	r3, [r7, #27]
 80052e4:	2b2e      	cmp	r3, #46	; 0x2e
 80052e6:	d003      	beq.n	80052f0 <create_name+0x7c>
 80052e8:	693a      	ldr	r2, [r7, #16]
 80052ea:	697b      	ldr	r3, [r7, #20]
 80052ec:	429a      	cmp	r2, r3
 80052ee:	d30c      	bcc.n	800530a <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 80052f0:	697b      	ldr	r3, [r7, #20]
 80052f2:	2b0b      	cmp	r3, #11
 80052f4:	d002      	beq.n	80052fc <create_name+0x88>
 80052f6:	7efb      	ldrb	r3, [r7, #27]
 80052f8:	2b2e      	cmp	r3, #46	; 0x2e
 80052fa:	d001      	beq.n	8005300 <create_name+0x8c>
 80052fc:	2306      	movs	r3, #6
 80052fe:	e044      	b.n	800538a <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 8005300:	2308      	movs	r3, #8
 8005302:	613b      	str	r3, [r7, #16]
 8005304:	230b      	movs	r3, #11
 8005306:	617b      	str	r3, [r7, #20]
			continue;
 8005308:	e022      	b.n	8005350 <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 800530a:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800530e:	2b00      	cmp	r3, #0
 8005310:	da04      	bge.n	800531c <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 8005312:	7efb      	ldrb	r3, [r7, #27]
 8005314:	3b80      	subs	r3, #128	; 0x80
 8005316:	4a1f      	ldr	r2, [pc, #124]	; (8005394 <create_name+0x120>)
 8005318:	5cd3      	ldrb	r3, [r2, r3]
 800531a:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 800531c:	7efb      	ldrb	r3, [r7, #27]
 800531e:	4619      	mov	r1, r3
 8005320:	481d      	ldr	r0, [pc, #116]	; (8005398 <create_name+0x124>)
 8005322:	f7fe ff94 	bl	800424e <chk_chr>
 8005326:	4603      	mov	r3, r0
 8005328:	2b00      	cmp	r3, #0
 800532a:	d001      	beq.n	8005330 <create_name+0xbc>
 800532c:	2306      	movs	r3, #6
 800532e:	e02c      	b.n	800538a <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 8005330:	7efb      	ldrb	r3, [r7, #27]
 8005332:	2b60      	cmp	r3, #96	; 0x60
 8005334:	d905      	bls.n	8005342 <create_name+0xce>
 8005336:	7efb      	ldrb	r3, [r7, #27]
 8005338:	2b7a      	cmp	r3, #122	; 0x7a
 800533a:	d802      	bhi.n	8005342 <create_name+0xce>
 800533c:	7efb      	ldrb	r3, [r7, #27]
 800533e:	3b20      	subs	r3, #32
 8005340:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 8005342:	693b      	ldr	r3, [r7, #16]
 8005344:	1c5a      	adds	r2, r3, #1
 8005346:	613a      	str	r2, [r7, #16]
 8005348:	68ba      	ldr	r2, [r7, #8]
 800534a:	4413      	add	r3, r2
 800534c:	7efa      	ldrb	r2, [r7, #27]
 800534e:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 8005350:	e7a6      	b.n	80052a0 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 8005352:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 8005354:	68fa      	ldr	r2, [r7, #12]
 8005356:	69fb      	ldr	r3, [r7, #28]
 8005358:	441a      	add	r2, r3
 800535a:	683b      	ldr	r3, [r7, #0]
 800535c:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 800535e:	693b      	ldr	r3, [r7, #16]
 8005360:	2b00      	cmp	r3, #0
 8005362:	d101      	bne.n	8005368 <create_name+0xf4>
 8005364:	2306      	movs	r3, #6
 8005366:	e010      	b.n	800538a <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8005368:	68bb      	ldr	r3, [r7, #8]
 800536a:	781b      	ldrb	r3, [r3, #0]
 800536c:	2be5      	cmp	r3, #229	; 0xe5
 800536e:	d102      	bne.n	8005376 <create_name+0x102>
 8005370:	68bb      	ldr	r3, [r7, #8]
 8005372:	2205      	movs	r2, #5
 8005374:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8005376:	7efb      	ldrb	r3, [r7, #27]
 8005378:	2b20      	cmp	r3, #32
 800537a:	d801      	bhi.n	8005380 <create_name+0x10c>
 800537c:	2204      	movs	r2, #4
 800537e:	e000      	b.n	8005382 <create_name+0x10e>
 8005380:	2200      	movs	r2, #0
 8005382:	68bb      	ldr	r3, [r7, #8]
 8005384:	330b      	adds	r3, #11
 8005386:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 8005388:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 800538a:	4618      	mov	r0, r3
 800538c:	3720      	adds	r7, #32
 800538e:	46bd      	mov	sp, r7
 8005390:	bd80      	pop	{r7, pc}
 8005392:	bf00      	nop
 8005394:	08007b74 	.word	0x08007b74
 8005398:	08007b18 	.word	0x08007b18

0800539c <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800539c:	b580      	push	{r7, lr}
 800539e:	b086      	sub	sp, #24
 80053a0:	af00      	add	r7, sp, #0
 80053a2:	6078      	str	r0, [r7, #4]
 80053a4:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 80053aa:	693b      	ldr	r3, [r7, #16]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 80053b0:	e002      	b.n	80053b8 <follow_path+0x1c>
 80053b2:	683b      	ldr	r3, [r7, #0]
 80053b4:	3301      	adds	r3, #1
 80053b6:	603b      	str	r3, [r7, #0]
 80053b8:	683b      	ldr	r3, [r7, #0]
 80053ba:	781b      	ldrb	r3, [r3, #0]
 80053bc:	2b2f      	cmp	r3, #47	; 0x2f
 80053be:	d0f8      	beq.n	80053b2 <follow_path+0x16>
 80053c0:	683b      	ldr	r3, [r7, #0]
 80053c2:	781b      	ldrb	r3, [r3, #0]
 80053c4:	2b5c      	cmp	r3, #92	; 0x5c
 80053c6:	d0f4      	beq.n	80053b2 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 80053c8:	693b      	ldr	r3, [r7, #16]
 80053ca:	2200      	movs	r2, #0
 80053cc:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 80053ce:	683b      	ldr	r3, [r7, #0]
 80053d0:	781b      	ldrb	r3, [r3, #0]
 80053d2:	2b1f      	cmp	r3, #31
 80053d4:	d80a      	bhi.n	80053ec <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	2280      	movs	r2, #128	; 0x80
 80053da:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 80053de:	2100      	movs	r1, #0
 80053e0:	6878      	ldr	r0, [r7, #4]
 80053e2:	f7ff fc7f 	bl	8004ce4 <dir_sdi>
 80053e6:	4603      	mov	r3, r0
 80053e8:	75fb      	strb	r3, [r7, #23]
 80053ea:	e043      	b.n	8005474 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 80053ec:	463b      	mov	r3, r7
 80053ee:	4619      	mov	r1, r3
 80053f0:	6878      	ldr	r0, [r7, #4]
 80053f2:	f7ff ff3f 	bl	8005274 <create_name>
 80053f6:	4603      	mov	r3, r0
 80053f8:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 80053fa:	7dfb      	ldrb	r3, [r7, #23]
 80053fc:	2b00      	cmp	r3, #0
 80053fe:	d134      	bne.n	800546a <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 8005400:	6878      	ldr	r0, [r7, #4]
 8005402:	f7ff fe92 	bl	800512a <dir_find>
 8005406:	4603      	mov	r3, r0
 8005408:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8005410:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 8005412:	7dfb      	ldrb	r3, [r7, #23]
 8005414:	2b00      	cmp	r3, #0
 8005416:	d00a      	beq.n	800542e <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8005418:	7dfb      	ldrb	r3, [r7, #23]
 800541a:	2b04      	cmp	r3, #4
 800541c:	d127      	bne.n	800546e <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800541e:	7afb      	ldrb	r3, [r7, #11]
 8005420:	f003 0304 	and.w	r3, r3, #4
 8005424:	2b00      	cmp	r3, #0
 8005426:	d122      	bne.n	800546e <follow_path+0xd2>
 8005428:	2305      	movs	r3, #5
 800542a:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800542c:	e01f      	b.n	800546e <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800542e:	7afb      	ldrb	r3, [r7, #11]
 8005430:	f003 0304 	and.w	r3, r3, #4
 8005434:	2b00      	cmp	r3, #0
 8005436:	d11c      	bne.n	8005472 <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8005438:	693b      	ldr	r3, [r7, #16]
 800543a:	799b      	ldrb	r3, [r3, #6]
 800543c:	f003 0310 	and.w	r3, r3, #16
 8005440:	2b00      	cmp	r3, #0
 8005442:	d102      	bne.n	800544a <follow_path+0xae>
				res = FR_NO_PATH; break;
 8005444:	2305      	movs	r3, #5
 8005446:	75fb      	strb	r3, [r7, #23]
 8005448:	e014      	b.n	8005474 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	695b      	ldr	r3, [r3, #20]
 8005454:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005458:	4413      	add	r3, r2
 800545a:	4619      	mov	r1, r3
 800545c:	68f8      	ldr	r0, [r7, #12]
 800545e:	f7ff fdc8 	bl	8004ff2 <ld_clust>
 8005462:	4602      	mov	r2, r0
 8005464:	693b      	ldr	r3, [r7, #16]
 8005466:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8005468:	e7c0      	b.n	80053ec <follow_path+0x50>
			if (res != FR_OK) break;
 800546a:	bf00      	nop
 800546c:	e002      	b.n	8005474 <follow_path+0xd8>
				break;
 800546e:	bf00      	nop
 8005470:	e000      	b.n	8005474 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8005472:	bf00      	nop
			}
		}
	}

	return res;
 8005474:	7dfb      	ldrb	r3, [r7, #23]
}
 8005476:	4618      	mov	r0, r3
 8005478:	3718      	adds	r7, #24
 800547a:	46bd      	mov	sp, r7
 800547c:	bd80      	pop	{r7, pc}

0800547e <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800547e:	b480      	push	{r7}
 8005480:	b087      	sub	sp, #28
 8005482:	af00      	add	r7, sp, #0
 8005484:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8005486:	f04f 33ff 	mov.w	r3, #4294967295
 800548a:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	2b00      	cmp	r3, #0
 8005492:	d031      	beq.n	80054f8 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	617b      	str	r3, [r7, #20]
 800549a:	e002      	b.n	80054a2 <get_ldnumber+0x24>
 800549c:	697b      	ldr	r3, [r7, #20]
 800549e:	3301      	adds	r3, #1
 80054a0:	617b      	str	r3, [r7, #20]
 80054a2:	697b      	ldr	r3, [r7, #20]
 80054a4:	781b      	ldrb	r3, [r3, #0]
 80054a6:	2b20      	cmp	r3, #32
 80054a8:	d903      	bls.n	80054b2 <get_ldnumber+0x34>
 80054aa:	697b      	ldr	r3, [r7, #20]
 80054ac:	781b      	ldrb	r3, [r3, #0]
 80054ae:	2b3a      	cmp	r3, #58	; 0x3a
 80054b0:	d1f4      	bne.n	800549c <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 80054b2:	697b      	ldr	r3, [r7, #20]
 80054b4:	781b      	ldrb	r3, [r3, #0]
 80054b6:	2b3a      	cmp	r3, #58	; 0x3a
 80054b8:	d11c      	bne.n	80054f4 <get_ldnumber+0x76>
			tp = *path;
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	1c5a      	adds	r2, r3, #1
 80054c4:	60fa      	str	r2, [r7, #12]
 80054c6:	781b      	ldrb	r3, [r3, #0]
 80054c8:	3b30      	subs	r3, #48	; 0x30
 80054ca:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 80054cc:	68bb      	ldr	r3, [r7, #8]
 80054ce:	2b09      	cmp	r3, #9
 80054d0:	d80e      	bhi.n	80054f0 <get_ldnumber+0x72>
 80054d2:	68fa      	ldr	r2, [r7, #12]
 80054d4:	697b      	ldr	r3, [r7, #20]
 80054d6:	429a      	cmp	r2, r3
 80054d8:	d10a      	bne.n	80054f0 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 80054da:	68bb      	ldr	r3, [r7, #8]
 80054dc:	2b00      	cmp	r3, #0
 80054de:	d107      	bne.n	80054f0 <get_ldnumber+0x72>
					vol = (int)i;
 80054e0:	68bb      	ldr	r3, [r7, #8]
 80054e2:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 80054e4:	697b      	ldr	r3, [r7, #20]
 80054e6:	3301      	adds	r3, #1
 80054e8:	617b      	str	r3, [r7, #20]
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	697a      	ldr	r2, [r7, #20]
 80054ee:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 80054f0:	693b      	ldr	r3, [r7, #16]
 80054f2:	e002      	b.n	80054fa <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 80054f4:	2300      	movs	r3, #0
 80054f6:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 80054f8:	693b      	ldr	r3, [r7, #16]
}
 80054fa:	4618      	mov	r0, r3
 80054fc:	371c      	adds	r7, #28
 80054fe:	46bd      	mov	sp, r7
 8005500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005504:	4770      	bx	lr
	...

08005508 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8005508:	b580      	push	{r7, lr}
 800550a:	b082      	sub	sp, #8
 800550c:	af00      	add	r7, sp, #0
 800550e:	6078      	str	r0, [r7, #4]
 8005510:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	2200      	movs	r2, #0
 8005516:	70da      	strb	r2, [r3, #3]
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	f04f 32ff 	mov.w	r2, #4294967295
 800551e:	62da      	str	r2, [r3, #44]	; 0x2c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8005520:	6839      	ldr	r1, [r7, #0]
 8005522:	6878      	ldr	r0, [r7, #4]
 8005524:	f7ff f85e 	bl	80045e4 <move_window>
 8005528:	4603      	mov	r3, r0
 800552a:	2b00      	cmp	r3, #0
 800552c:	d001      	beq.n	8005532 <check_fs+0x2a>
 800552e:	2304      	movs	r3, #4
 8005530:	e038      	b.n	80055a4 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	3330      	adds	r3, #48	; 0x30
 8005536:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800553a:	4618      	mov	r0, r3
 800553c:	f7fe fda2 	bl	8004084 <ld_word>
 8005540:	4603      	mov	r3, r0
 8005542:	461a      	mov	r2, r3
 8005544:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8005548:	429a      	cmp	r2, r3
 800554a:	d001      	beq.n	8005550 <check_fs+0x48>
 800554c:	2303      	movs	r3, #3
 800554e:	e029      	b.n	80055a4 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005556:	2be9      	cmp	r3, #233	; 0xe9
 8005558:	d009      	beq.n	800556e <check_fs+0x66>
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005560:	2beb      	cmp	r3, #235	; 0xeb
 8005562:	d11e      	bne.n	80055a2 <check_fs+0x9a>
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800556a:	2b90      	cmp	r3, #144	; 0x90
 800556c:	d119      	bne.n	80055a2 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	3330      	adds	r3, #48	; 0x30
 8005572:	3336      	adds	r3, #54	; 0x36
 8005574:	4618      	mov	r0, r3
 8005576:	f7fe fd9d 	bl	80040b4 <ld_dword>
 800557a:	4603      	mov	r3, r0
 800557c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8005580:	4a0a      	ldr	r2, [pc, #40]	; (80055ac <check_fs+0xa4>)
 8005582:	4293      	cmp	r3, r2
 8005584:	d101      	bne.n	800558a <check_fs+0x82>
 8005586:	2300      	movs	r3, #0
 8005588:	e00c      	b.n	80055a4 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	3330      	adds	r3, #48	; 0x30
 800558e:	3352      	adds	r3, #82	; 0x52
 8005590:	4618      	mov	r0, r3
 8005592:	f7fe fd8f 	bl	80040b4 <ld_dword>
 8005596:	4603      	mov	r3, r0
 8005598:	4a05      	ldr	r2, [pc, #20]	; (80055b0 <check_fs+0xa8>)
 800559a:	4293      	cmp	r3, r2
 800559c:	d101      	bne.n	80055a2 <check_fs+0x9a>
 800559e:	2300      	movs	r3, #0
 80055a0:	e000      	b.n	80055a4 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 80055a2:	2302      	movs	r3, #2
}
 80055a4:	4618      	mov	r0, r3
 80055a6:	3708      	adds	r7, #8
 80055a8:	46bd      	mov	sp, r7
 80055aa:	bd80      	pop	{r7, pc}
 80055ac:	00544146 	.word	0x00544146
 80055b0:	33544146 	.word	0x33544146

080055b4 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 80055b4:	b580      	push	{r7, lr}
 80055b6:	b096      	sub	sp, #88	; 0x58
 80055b8:	af00      	add	r7, sp, #0
 80055ba:	60f8      	str	r0, [r7, #12]
 80055bc:	60b9      	str	r1, [r7, #8]
 80055be:	4613      	mov	r3, r2
 80055c0:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 80055c2:	68bb      	ldr	r3, [r7, #8]
 80055c4:	2200      	movs	r2, #0
 80055c6:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 80055c8:	68f8      	ldr	r0, [r7, #12]
 80055ca:	f7ff ff58 	bl	800547e <get_ldnumber>
 80055ce:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 80055d0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80055d2:	2b00      	cmp	r3, #0
 80055d4:	da01      	bge.n	80055da <find_volume+0x26>
 80055d6:	230b      	movs	r3, #11
 80055d8:	e22d      	b.n	8005a36 <find_volume+0x482>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 80055da:	4aa1      	ldr	r2, [pc, #644]	; (8005860 <find_volume+0x2ac>)
 80055dc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80055de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80055e2:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 80055e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	d101      	bne.n	80055ee <find_volume+0x3a>
 80055ea:	230c      	movs	r3, #12
 80055ec:	e223      	b.n	8005a36 <find_volume+0x482>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 80055ee:	68bb      	ldr	r3, [r7, #8]
 80055f0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80055f2:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 80055f4:	79fb      	ldrb	r3, [r7, #7]
 80055f6:	f023 0301 	bic.w	r3, r3, #1
 80055fa:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 80055fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055fe:	781b      	ldrb	r3, [r3, #0]
 8005600:	2b00      	cmp	r3, #0
 8005602:	d01a      	beq.n	800563a <find_volume+0x86>
		stat = disk_status(fs->drv);
 8005604:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005606:	785b      	ldrb	r3, [r3, #1]
 8005608:	4618      	mov	r0, r3
 800560a:	f7fe fc9d 	bl	8003f48 <disk_status>
 800560e:	4603      	mov	r3, r0
 8005610:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8005614:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8005618:	f003 0301 	and.w	r3, r3, #1
 800561c:	2b00      	cmp	r3, #0
 800561e:	d10c      	bne.n	800563a <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8005620:	79fb      	ldrb	r3, [r7, #7]
 8005622:	2b00      	cmp	r3, #0
 8005624:	d007      	beq.n	8005636 <find_volume+0x82>
 8005626:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800562a:	f003 0304 	and.w	r3, r3, #4
 800562e:	2b00      	cmp	r3, #0
 8005630:	d001      	beq.n	8005636 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 8005632:	230a      	movs	r3, #10
 8005634:	e1ff      	b.n	8005a36 <find_volume+0x482>
			}
			return FR_OK;				/* The file system object is valid */
 8005636:	2300      	movs	r3, #0
 8005638:	e1fd      	b.n	8005a36 <find_volume+0x482>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800563a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800563c:	2200      	movs	r2, #0
 800563e:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8005640:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005642:	b2da      	uxtb	r2, r3
 8005644:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005646:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8005648:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800564a:	785b      	ldrb	r3, [r3, #1]
 800564c:	4618      	mov	r0, r3
 800564e:	f7fe fc95 	bl	8003f7c <disk_initialize>
 8005652:	4603      	mov	r3, r0
 8005654:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8005658:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800565c:	f003 0301 	and.w	r3, r3, #1
 8005660:	2b00      	cmp	r3, #0
 8005662:	d001      	beq.n	8005668 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8005664:	2303      	movs	r3, #3
 8005666:	e1e6      	b.n	8005a36 <find_volume+0x482>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8005668:	79fb      	ldrb	r3, [r7, #7]
 800566a:	2b00      	cmp	r3, #0
 800566c:	d007      	beq.n	800567e <find_volume+0xca>
 800566e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8005672:	f003 0304 	and.w	r3, r3, #4
 8005676:	2b00      	cmp	r3, #0
 8005678:	d001      	beq.n	800567e <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 800567a:	230a      	movs	r3, #10
 800567c:	e1db      	b.n	8005a36 <find_volume+0x482>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800567e:	2300      	movs	r3, #0
 8005680:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8005682:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8005684:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8005686:	f7ff ff3f 	bl	8005508 <check_fs>
 800568a:	4603      	mov	r3, r0
 800568c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8005690:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005694:	2b02      	cmp	r3, #2
 8005696:	d149      	bne.n	800572c <find_volume+0x178>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8005698:	2300      	movs	r3, #0
 800569a:	643b      	str	r3, [r7, #64]	; 0x40
 800569c:	e01e      	b.n	80056dc <find_volume+0x128>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800569e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056a0:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80056a4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80056a6:	011b      	lsls	r3, r3, #4
 80056a8:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 80056ac:	4413      	add	r3, r2
 80056ae:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 80056b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056b2:	3304      	adds	r3, #4
 80056b4:	781b      	ldrb	r3, [r3, #0]
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	d006      	beq.n	80056c8 <find_volume+0x114>
 80056ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056bc:	3308      	adds	r3, #8
 80056be:	4618      	mov	r0, r3
 80056c0:	f7fe fcf8 	bl	80040b4 <ld_dword>
 80056c4:	4602      	mov	r2, r0
 80056c6:	e000      	b.n	80056ca <find_volume+0x116>
 80056c8:	2200      	movs	r2, #0
 80056ca:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80056cc:	009b      	lsls	r3, r3, #2
 80056ce:	3358      	adds	r3, #88	; 0x58
 80056d0:	443b      	add	r3, r7
 80056d2:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 80056d6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80056d8:	3301      	adds	r3, #1
 80056da:	643b      	str	r3, [r7, #64]	; 0x40
 80056dc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80056de:	2b03      	cmp	r3, #3
 80056e0:	d9dd      	bls.n	800569e <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 80056e2:	2300      	movs	r3, #0
 80056e4:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 80056e6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80056e8:	2b00      	cmp	r3, #0
 80056ea:	d002      	beq.n	80056f2 <find_volume+0x13e>
 80056ec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80056ee:	3b01      	subs	r3, #1
 80056f0:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 80056f2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80056f4:	009b      	lsls	r3, r3, #2
 80056f6:	3358      	adds	r3, #88	; 0x58
 80056f8:	443b      	add	r3, r7
 80056fa:	f853 3c44 	ldr.w	r3, [r3, #-68]
 80056fe:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8005700:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005702:	2b00      	cmp	r3, #0
 8005704:	d005      	beq.n	8005712 <find_volume+0x15e>
 8005706:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8005708:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800570a:	f7ff fefd 	bl	8005508 <check_fs>
 800570e:	4603      	mov	r3, r0
 8005710:	e000      	b.n	8005714 <find_volume+0x160>
 8005712:	2303      	movs	r3, #3
 8005714:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8005718:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800571c:	2b01      	cmp	r3, #1
 800571e:	d905      	bls.n	800572c <find_volume+0x178>
 8005720:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005722:	3301      	adds	r3, #1
 8005724:	643b      	str	r3, [r7, #64]	; 0x40
 8005726:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005728:	2b03      	cmp	r3, #3
 800572a:	d9e2      	bls.n	80056f2 <find_volume+0x13e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800572c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005730:	2b04      	cmp	r3, #4
 8005732:	d101      	bne.n	8005738 <find_volume+0x184>
 8005734:	2301      	movs	r3, #1
 8005736:	e17e      	b.n	8005a36 <find_volume+0x482>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8005738:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800573c:	2b01      	cmp	r3, #1
 800573e:	d901      	bls.n	8005744 <find_volume+0x190>
 8005740:	230d      	movs	r3, #13
 8005742:	e178      	b.n	8005a36 <find_volume+0x482>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8005744:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005746:	3330      	adds	r3, #48	; 0x30
 8005748:	330b      	adds	r3, #11
 800574a:	4618      	mov	r0, r3
 800574c:	f7fe fc9a 	bl	8004084 <ld_word>
 8005750:	4603      	mov	r3, r0
 8005752:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005756:	d001      	beq.n	800575c <find_volume+0x1a8>
 8005758:	230d      	movs	r3, #13
 800575a:	e16c      	b.n	8005a36 <find_volume+0x482>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800575c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800575e:	3330      	adds	r3, #48	; 0x30
 8005760:	3316      	adds	r3, #22
 8005762:	4618      	mov	r0, r3
 8005764:	f7fe fc8e 	bl	8004084 <ld_word>
 8005768:	4603      	mov	r3, r0
 800576a:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800576c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800576e:	2b00      	cmp	r3, #0
 8005770:	d106      	bne.n	8005780 <find_volume+0x1cc>
 8005772:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005774:	3330      	adds	r3, #48	; 0x30
 8005776:	3324      	adds	r3, #36	; 0x24
 8005778:	4618      	mov	r0, r3
 800577a:	f7fe fc9b 	bl	80040b4 <ld_dword>
 800577e:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 8005780:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005782:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005784:	619a      	str	r2, [r3, #24]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8005786:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005788:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
 800578c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800578e:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8005790:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005792:	789b      	ldrb	r3, [r3, #2]
 8005794:	2b01      	cmp	r3, #1
 8005796:	d005      	beq.n	80057a4 <find_volume+0x1f0>
 8005798:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800579a:	789b      	ldrb	r3, [r3, #2]
 800579c:	2b02      	cmp	r3, #2
 800579e:	d001      	beq.n	80057a4 <find_volume+0x1f0>
 80057a0:	230d      	movs	r3, #13
 80057a2:	e148      	b.n	8005a36 <find_volume+0x482>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 80057a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80057a6:	789b      	ldrb	r3, [r3, #2]
 80057a8:	461a      	mov	r2, r3
 80057aa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80057ac:	fb02 f303 	mul.w	r3, r2, r3
 80057b0:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 80057b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80057b4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80057b8:	b29a      	uxth	r2, r3
 80057ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80057bc:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 80057be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80057c0:	895b      	ldrh	r3, [r3, #10]
 80057c2:	2b00      	cmp	r3, #0
 80057c4:	d008      	beq.n	80057d8 <find_volume+0x224>
 80057c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80057c8:	895b      	ldrh	r3, [r3, #10]
 80057ca:	461a      	mov	r2, r3
 80057cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80057ce:	895b      	ldrh	r3, [r3, #10]
 80057d0:	3b01      	subs	r3, #1
 80057d2:	4013      	ands	r3, r2
 80057d4:	2b00      	cmp	r3, #0
 80057d6:	d001      	beq.n	80057dc <find_volume+0x228>
 80057d8:	230d      	movs	r3, #13
 80057da:	e12c      	b.n	8005a36 <find_volume+0x482>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 80057dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80057de:	3330      	adds	r3, #48	; 0x30
 80057e0:	3311      	adds	r3, #17
 80057e2:	4618      	mov	r0, r3
 80057e4:	f7fe fc4e 	bl	8004084 <ld_word>
 80057e8:	4603      	mov	r3, r0
 80057ea:	461a      	mov	r2, r3
 80057ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80057ee:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 80057f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80057f2:	891b      	ldrh	r3, [r3, #8]
 80057f4:	f003 030f 	and.w	r3, r3, #15
 80057f8:	b29b      	uxth	r3, r3
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	d001      	beq.n	8005802 <find_volume+0x24e>
 80057fe:	230d      	movs	r3, #13
 8005800:	e119      	b.n	8005a36 <find_volume+0x482>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8005802:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005804:	3330      	adds	r3, #48	; 0x30
 8005806:	3313      	adds	r3, #19
 8005808:	4618      	mov	r0, r3
 800580a:	f7fe fc3b 	bl	8004084 <ld_word>
 800580e:	4603      	mov	r3, r0
 8005810:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8005812:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005814:	2b00      	cmp	r3, #0
 8005816:	d106      	bne.n	8005826 <find_volume+0x272>
 8005818:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800581a:	3330      	adds	r3, #48	; 0x30
 800581c:	3320      	adds	r3, #32
 800581e:	4618      	mov	r0, r3
 8005820:	f7fe fc48 	bl	80040b4 <ld_dword>
 8005824:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8005826:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005828:	3330      	adds	r3, #48	; 0x30
 800582a:	330e      	adds	r3, #14
 800582c:	4618      	mov	r0, r3
 800582e:	f7fe fc29 	bl	8004084 <ld_word>
 8005832:	4603      	mov	r3, r0
 8005834:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8005836:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8005838:	2b00      	cmp	r3, #0
 800583a:	d101      	bne.n	8005840 <find_volume+0x28c>
 800583c:	230d      	movs	r3, #13
 800583e:	e0fa      	b.n	8005a36 <find_volume+0x482>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8005840:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8005842:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005844:	4413      	add	r3, r2
 8005846:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005848:	8912      	ldrh	r2, [r2, #8]
 800584a:	0912      	lsrs	r2, r2, #4
 800584c:	b292      	uxth	r2, r2
 800584e:	4413      	add	r3, r2
 8005850:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8005852:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005854:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005856:	429a      	cmp	r2, r3
 8005858:	d204      	bcs.n	8005864 <find_volume+0x2b0>
 800585a:	230d      	movs	r3, #13
 800585c:	e0eb      	b.n	8005a36 <find_volume+0x482>
 800585e:	bf00      	nop
 8005860:	20000654 	.word	0x20000654
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8005864:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005866:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005868:	1ad3      	subs	r3, r2, r3
 800586a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800586c:	8952      	ldrh	r2, [r2, #10]
 800586e:	fbb3 f3f2 	udiv	r3, r3, r2
 8005872:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8005874:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005876:	2b00      	cmp	r3, #0
 8005878:	d101      	bne.n	800587e <find_volume+0x2ca>
 800587a:	230d      	movs	r3, #13
 800587c:	e0db      	b.n	8005a36 <find_volume+0x482>
		fmt = FS_FAT32;
 800587e:	2303      	movs	r3, #3
 8005880:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8005884:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005886:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800588a:	4293      	cmp	r3, r2
 800588c:	d802      	bhi.n	8005894 <find_volume+0x2e0>
 800588e:	2302      	movs	r3, #2
 8005890:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8005894:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005896:	f640 72f5 	movw	r2, #4085	; 0xff5
 800589a:	4293      	cmp	r3, r2
 800589c:	d802      	bhi.n	80058a4 <find_volume+0x2f0>
 800589e:	2301      	movs	r3, #1
 80058a0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 80058a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058a6:	1c9a      	adds	r2, r3, #2
 80058a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80058aa:	615a      	str	r2, [r3, #20]
		fs->volbase = bsect;							/* Volume start sector */
 80058ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80058ae:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80058b0:	61da      	str	r2, [r3, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 80058b2:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80058b4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80058b6:	441a      	add	r2, r3
 80058b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80058ba:	621a      	str	r2, [r3, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 80058bc:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80058be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058c0:	441a      	add	r2, r3
 80058c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80058c4:	629a      	str	r2, [r3, #40]	; 0x28
		if (fmt == FS_FAT32) {
 80058c6:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80058ca:	2b03      	cmp	r3, #3
 80058cc:	d11e      	bne.n	800590c <find_volume+0x358>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 80058ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80058d0:	3330      	adds	r3, #48	; 0x30
 80058d2:	332a      	adds	r3, #42	; 0x2a
 80058d4:	4618      	mov	r0, r3
 80058d6:	f7fe fbd5 	bl	8004084 <ld_word>
 80058da:	4603      	mov	r3, r0
 80058dc:	2b00      	cmp	r3, #0
 80058de:	d001      	beq.n	80058e4 <find_volume+0x330>
 80058e0:	230d      	movs	r3, #13
 80058e2:	e0a8      	b.n	8005a36 <find_volume+0x482>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 80058e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80058e6:	891b      	ldrh	r3, [r3, #8]
 80058e8:	2b00      	cmp	r3, #0
 80058ea:	d001      	beq.n	80058f0 <find_volume+0x33c>
 80058ec:	230d      	movs	r3, #13
 80058ee:	e0a2      	b.n	8005a36 <find_volume+0x482>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 80058f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80058f2:	3330      	adds	r3, #48	; 0x30
 80058f4:	332c      	adds	r3, #44	; 0x2c
 80058f6:	4618      	mov	r0, r3
 80058f8:	f7fe fbdc 	bl	80040b4 <ld_dword>
 80058fc:	4602      	mov	r2, r0
 80058fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005900:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8005902:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005904:	695b      	ldr	r3, [r3, #20]
 8005906:	009b      	lsls	r3, r3, #2
 8005908:	647b      	str	r3, [r7, #68]	; 0x44
 800590a:	e01f      	b.n	800594c <find_volume+0x398>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800590c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800590e:	891b      	ldrh	r3, [r3, #8]
 8005910:	2b00      	cmp	r3, #0
 8005912:	d101      	bne.n	8005918 <find_volume+0x364>
 8005914:	230d      	movs	r3, #13
 8005916:	e08e      	b.n	8005a36 <find_volume+0x482>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8005918:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800591a:	6a1a      	ldr	r2, [r3, #32]
 800591c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800591e:	441a      	add	r2, r3
 8005920:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005922:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8005924:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005928:	2b02      	cmp	r3, #2
 800592a:	d103      	bne.n	8005934 <find_volume+0x380>
 800592c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800592e:	695b      	ldr	r3, [r3, #20]
 8005930:	005b      	lsls	r3, r3, #1
 8005932:	e00a      	b.n	800594a <find_volume+0x396>
 8005934:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005936:	695a      	ldr	r2, [r3, #20]
 8005938:	4613      	mov	r3, r2
 800593a:	005b      	lsls	r3, r3, #1
 800593c:	4413      	add	r3, r2
 800593e:	085a      	lsrs	r2, r3, #1
 8005940:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005942:	695b      	ldr	r3, [r3, #20]
 8005944:	f003 0301 	and.w	r3, r3, #1
 8005948:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800594a:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800594c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800594e:	699a      	ldr	r2, [r3, #24]
 8005950:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005952:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8005956:	0a5b      	lsrs	r3, r3, #9
 8005958:	429a      	cmp	r2, r3
 800595a:	d201      	bcs.n	8005960 <find_volume+0x3ac>
 800595c:	230d      	movs	r3, #13
 800595e:	e06a      	b.n	8005a36 <find_volume+0x482>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8005960:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005962:	f04f 32ff 	mov.w	r2, #4294967295
 8005966:	611a      	str	r2, [r3, #16]
 8005968:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800596a:	691a      	ldr	r2, [r3, #16]
 800596c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800596e:	60da      	str	r2, [r3, #12]
		fs->fsi_flag = 0x80;
 8005970:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005972:	2280      	movs	r2, #128	; 0x80
 8005974:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8005976:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800597a:	2b03      	cmp	r3, #3
 800597c:	d149      	bne.n	8005a12 <find_volume+0x45e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800597e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005980:	3330      	adds	r3, #48	; 0x30
 8005982:	3330      	adds	r3, #48	; 0x30
 8005984:	4618      	mov	r0, r3
 8005986:	f7fe fb7d 	bl	8004084 <ld_word>
 800598a:	4603      	mov	r3, r0
 800598c:	2b01      	cmp	r3, #1
 800598e:	d140      	bne.n	8005a12 <find_volume+0x45e>
			&& move_window(fs, bsect + 1) == FR_OK)
 8005990:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005992:	3301      	adds	r3, #1
 8005994:	4619      	mov	r1, r3
 8005996:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8005998:	f7fe fe24 	bl	80045e4 <move_window>
 800599c:	4603      	mov	r3, r0
 800599e:	2b00      	cmp	r3, #0
 80059a0:	d137      	bne.n	8005a12 <find_volume+0x45e>
		{
			fs->fsi_flag = 0;
 80059a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059a4:	2200      	movs	r2, #0
 80059a6:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 80059a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059aa:	3330      	adds	r3, #48	; 0x30
 80059ac:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80059b0:	4618      	mov	r0, r3
 80059b2:	f7fe fb67 	bl	8004084 <ld_word>
 80059b6:	4603      	mov	r3, r0
 80059b8:	461a      	mov	r2, r3
 80059ba:	f64a 2355 	movw	r3, #43605	; 0xaa55
 80059be:	429a      	cmp	r2, r3
 80059c0:	d127      	bne.n	8005a12 <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 80059c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059c4:	3330      	adds	r3, #48	; 0x30
 80059c6:	4618      	mov	r0, r3
 80059c8:	f7fe fb74 	bl	80040b4 <ld_dword>
 80059cc:	4603      	mov	r3, r0
 80059ce:	4a1c      	ldr	r2, [pc, #112]	; (8005a40 <find_volume+0x48c>)
 80059d0:	4293      	cmp	r3, r2
 80059d2:	d11e      	bne.n	8005a12 <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 80059d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059d6:	3330      	adds	r3, #48	; 0x30
 80059d8:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 80059dc:	4618      	mov	r0, r3
 80059de:	f7fe fb69 	bl	80040b4 <ld_dword>
 80059e2:	4603      	mov	r3, r0
 80059e4:	4a17      	ldr	r2, [pc, #92]	; (8005a44 <find_volume+0x490>)
 80059e6:	4293      	cmp	r3, r2
 80059e8:	d113      	bne.n	8005a12 <find_volume+0x45e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 80059ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059ec:	3330      	adds	r3, #48	; 0x30
 80059ee:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 80059f2:	4618      	mov	r0, r3
 80059f4:	f7fe fb5e 	bl	80040b4 <ld_dword>
 80059f8:	4602      	mov	r2, r0
 80059fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059fc:	611a      	str	r2, [r3, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 80059fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a00:	3330      	adds	r3, #48	; 0x30
 8005a02:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 8005a06:	4618      	mov	r0, r3
 8005a08:	f7fe fb54 	bl	80040b4 <ld_dword>
 8005a0c:	4602      	mov	r2, r0
 8005a0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a10:	60da      	str	r2, [r3, #12]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8005a12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a14:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8005a18:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8005a1a:	4b0b      	ldr	r3, [pc, #44]	; (8005a48 <find_volume+0x494>)
 8005a1c:	881b      	ldrh	r3, [r3, #0]
 8005a1e:	3301      	adds	r3, #1
 8005a20:	b29a      	uxth	r2, r3
 8005a22:	4b09      	ldr	r3, [pc, #36]	; (8005a48 <find_volume+0x494>)
 8005a24:	801a      	strh	r2, [r3, #0]
 8005a26:	4b08      	ldr	r3, [pc, #32]	; (8005a48 <find_volume+0x494>)
 8005a28:	881a      	ldrh	r2, [r3, #0]
 8005a2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a2c:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 8005a2e:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8005a30:	f7fe fd70 	bl	8004514 <clear_lock>
#endif
	return FR_OK;
 8005a34:	2300      	movs	r3, #0
}
 8005a36:	4618      	mov	r0, r3
 8005a38:	3758      	adds	r7, #88	; 0x58
 8005a3a:	46bd      	mov	sp, r7
 8005a3c:	bd80      	pop	{r7, pc}
 8005a3e:	bf00      	nop
 8005a40:	41615252 	.word	0x41615252
 8005a44:	61417272 	.word	0x61417272
 8005a48:	20000658 	.word	0x20000658

08005a4c <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8005a4c:	b580      	push	{r7, lr}
 8005a4e:	b084      	sub	sp, #16
 8005a50:	af00      	add	r7, sp, #0
 8005a52:	6078      	str	r0, [r7, #4]
 8005a54:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 8005a56:	2309      	movs	r3, #9
 8005a58:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	2b00      	cmp	r3, #0
 8005a5e:	d01c      	beq.n	8005a9a <validate+0x4e>
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	2b00      	cmp	r3, #0
 8005a66:	d018      	beq.n	8005a9a <validate+0x4e>
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	781b      	ldrb	r3, [r3, #0]
 8005a6e:	2b00      	cmp	r3, #0
 8005a70:	d013      	beq.n	8005a9a <validate+0x4e>
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	889a      	ldrh	r2, [r3, #4]
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	88db      	ldrh	r3, [r3, #6]
 8005a7c:	429a      	cmp	r2, r3
 8005a7e:	d10c      	bne.n	8005a9a <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	785b      	ldrb	r3, [r3, #1]
 8005a86:	4618      	mov	r0, r3
 8005a88:	f7fe fa5e 	bl	8003f48 <disk_status>
 8005a8c:	4603      	mov	r3, r0
 8005a8e:	f003 0301 	and.w	r3, r3, #1
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	d101      	bne.n	8005a9a <validate+0x4e>
			res = FR_OK;
 8005a96:	2300      	movs	r3, #0
 8005a98:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8005a9a:	7bfb      	ldrb	r3, [r7, #15]
 8005a9c:	2b00      	cmp	r3, #0
 8005a9e:	d102      	bne.n	8005aa6 <validate+0x5a>
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	e000      	b.n	8005aa8 <validate+0x5c>
 8005aa6:	2300      	movs	r3, #0
 8005aa8:	683a      	ldr	r2, [r7, #0]
 8005aaa:	6013      	str	r3, [r2, #0]
	return res;
 8005aac:	7bfb      	ldrb	r3, [r7, #15]
}
 8005aae:	4618      	mov	r0, r3
 8005ab0:	3710      	adds	r7, #16
 8005ab2:	46bd      	mov	sp, r7
 8005ab4:	bd80      	pop	{r7, pc}
	...

08005ab8 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8005ab8:	b580      	push	{r7, lr}
 8005aba:	b088      	sub	sp, #32
 8005abc:	af00      	add	r7, sp, #0
 8005abe:	60f8      	str	r0, [r7, #12]
 8005ac0:	60b9      	str	r1, [r7, #8]
 8005ac2:	4613      	mov	r3, r2
 8005ac4:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8005ac6:	68bb      	ldr	r3, [r7, #8]
 8005ac8:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8005aca:	f107 0310 	add.w	r3, r7, #16
 8005ace:	4618      	mov	r0, r3
 8005ad0:	f7ff fcd5 	bl	800547e <get_ldnumber>
 8005ad4:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8005ad6:	69fb      	ldr	r3, [r7, #28]
 8005ad8:	2b00      	cmp	r3, #0
 8005ada:	da01      	bge.n	8005ae0 <f_mount+0x28>
 8005adc:	230b      	movs	r3, #11
 8005ade:	e02b      	b.n	8005b38 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8005ae0:	4a17      	ldr	r2, [pc, #92]	; (8005b40 <f_mount+0x88>)
 8005ae2:	69fb      	ldr	r3, [r7, #28]
 8005ae4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005ae8:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8005aea:	69bb      	ldr	r3, [r7, #24]
 8005aec:	2b00      	cmp	r3, #0
 8005aee:	d005      	beq.n	8005afc <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8005af0:	69b8      	ldr	r0, [r7, #24]
 8005af2:	f7fe fd0f 	bl	8004514 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8005af6:	69bb      	ldr	r3, [r7, #24]
 8005af8:	2200      	movs	r2, #0
 8005afa:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	d002      	beq.n	8005b08 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	2200      	movs	r2, #0
 8005b06:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8005b08:	68fa      	ldr	r2, [r7, #12]
 8005b0a:	490d      	ldr	r1, [pc, #52]	; (8005b40 <f_mount+0x88>)
 8005b0c:	69fb      	ldr	r3, [r7, #28]
 8005b0e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	2b00      	cmp	r3, #0
 8005b16:	d002      	beq.n	8005b1e <f_mount+0x66>
 8005b18:	79fb      	ldrb	r3, [r7, #7]
 8005b1a:	2b01      	cmp	r3, #1
 8005b1c:	d001      	beq.n	8005b22 <f_mount+0x6a>
 8005b1e:	2300      	movs	r3, #0
 8005b20:	e00a      	b.n	8005b38 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8005b22:	f107 010c 	add.w	r1, r7, #12
 8005b26:	f107 0308 	add.w	r3, r7, #8
 8005b2a:	2200      	movs	r2, #0
 8005b2c:	4618      	mov	r0, r3
 8005b2e:	f7ff fd41 	bl	80055b4 <find_volume>
 8005b32:	4603      	mov	r3, r0
 8005b34:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8005b36:	7dfb      	ldrb	r3, [r7, #23]
}
 8005b38:	4618      	mov	r0, r3
 8005b3a:	3720      	adds	r7, #32
 8005b3c:	46bd      	mov	sp, r7
 8005b3e:	bd80      	pop	{r7, pc}
 8005b40:	20000654 	.word	0x20000654

08005b44 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8005b44:	b580      	push	{r7, lr}
 8005b46:	b098      	sub	sp, #96	; 0x60
 8005b48:	af00      	add	r7, sp, #0
 8005b4a:	60f8      	str	r0, [r7, #12]
 8005b4c:	60b9      	str	r1, [r7, #8]
 8005b4e:	4613      	mov	r3, r2
 8005b50:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	2b00      	cmp	r3, #0
 8005b56:	d101      	bne.n	8005b5c <f_open+0x18>
 8005b58:	2309      	movs	r3, #9
 8005b5a:	e1ad      	b.n	8005eb8 <f_open+0x374>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8005b5c:	79fb      	ldrb	r3, [r7, #7]
 8005b5e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005b62:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 8005b64:	79fa      	ldrb	r2, [r7, #7]
 8005b66:	f107 0110 	add.w	r1, r7, #16
 8005b6a:	f107 0308 	add.w	r3, r7, #8
 8005b6e:	4618      	mov	r0, r3
 8005b70:	f7ff fd20 	bl	80055b4 <find_volume>
 8005b74:	4603      	mov	r3, r0
 8005b76:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 8005b7a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	f040 8191 	bne.w	8005ea6 <f_open+0x362>
		dj.obj.fs = fs;
 8005b84:	693b      	ldr	r3, [r7, #16]
 8005b86:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8005b88:	68ba      	ldr	r2, [r7, #8]
 8005b8a:	f107 0314 	add.w	r3, r7, #20
 8005b8e:	4611      	mov	r1, r2
 8005b90:	4618      	mov	r0, r3
 8005b92:	f7ff fc03 	bl	800539c <follow_path>
 8005b96:	4603      	mov	r3, r0
 8005b98:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8005b9c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005ba0:	2b00      	cmp	r3, #0
 8005ba2:	d11a      	bne.n	8005bda <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8005ba4:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8005ba8:	b25b      	sxtb	r3, r3
 8005baa:	2b00      	cmp	r3, #0
 8005bac:	da03      	bge.n	8005bb6 <f_open+0x72>
				res = FR_INVALID_NAME;
 8005bae:	2306      	movs	r3, #6
 8005bb0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8005bb4:	e011      	b.n	8005bda <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8005bb6:	79fb      	ldrb	r3, [r7, #7]
 8005bb8:	f023 0301 	bic.w	r3, r3, #1
 8005bbc:	2b00      	cmp	r3, #0
 8005bbe:	bf14      	ite	ne
 8005bc0:	2301      	movne	r3, #1
 8005bc2:	2300      	moveq	r3, #0
 8005bc4:	b2db      	uxtb	r3, r3
 8005bc6:	461a      	mov	r2, r3
 8005bc8:	f107 0314 	add.w	r3, r7, #20
 8005bcc:	4611      	mov	r1, r2
 8005bce:	4618      	mov	r0, r3
 8005bd0:	f7fe fb58 	bl	8004284 <chk_lock>
 8005bd4:	4603      	mov	r3, r0
 8005bd6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8005bda:	79fb      	ldrb	r3, [r7, #7]
 8005bdc:	f003 031c 	and.w	r3, r3, #28
 8005be0:	2b00      	cmp	r3, #0
 8005be2:	d07f      	beq.n	8005ce4 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 8005be4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005be8:	2b00      	cmp	r3, #0
 8005bea:	d017      	beq.n	8005c1c <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8005bec:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005bf0:	2b04      	cmp	r3, #4
 8005bf2:	d10e      	bne.n	8005c12 <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8005bf4:	f7fe fba2 	bl	800433c <enq_lock>
 8005bf8:	4603      	mov	r3, r0
 8005bfa:	2b00      	cmp	r3, #0
 8005bfc:	d006      	beq.n	8005c0c <f_open+0xc8>
 8005bfe:	f107 0314 	add.w	r3, r7, #20
 8005c02:	4618      	mov	r0, r3
 8005c04:	f7ff fae6 	bl	80051d4 <dir_register>
 8005c08:	4603      	mov	r3, r0
 8005c0a:	e000      	b.n	8005c0e <f_open+0xca>
 8005c0c:	2312      	movs	r3, #18
 8005c0e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8005c12:	79fb      	ldrb	r3, [r7, #7]
 8005c14:	f043 0308 	orr.w	r3, r3, #8
 8005c18:	71fb      	strb	r3, [r7, #7]
 8005c1a:	e010      	b.n	8005c3e <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8005c1c:	7ebb      	ldrb	r3, [r7, #26]
 8005c1e:	f003 0311 	and.w	r3, r3, #17
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	d003      	beq.n	8005c2e <f_open+0xea>
					res = FR_DENIED;
 8005c26:	2307      	movs	r3, #7
 8005c28:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8005c2c:	e007      	b.n	8005c3e <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8005c2e:	79fb      	ldrb	r3, [r7, #7]
 8005c30:	f003 0304 	and.w	r3, r3, #4
 8005c34:	2b00      	cmp	r3, #0
 8005c36:	d002      	beq.n	8005c3e <f_open+0xfa>
 8005c38:	2308      	movs	r3, #8
 8005c3a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8005c3e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	d168      	bne.n	8005d18 <f_open+0x1d4>
 8005c46:	79fb      	ldrb	r3, [r7, #7]
 8005c48:	f003 0308 	and.w	r3, r3, #8
 8005c4c:	2b00      	cmp	r3, #0
 8005c4e:	d063      	beq.n	8005d18 <f_open+0x1d4>
				dw = GET_FATTIME();
 8005c50:	f7fe f91c 	bl	8003e8c <get_fattime>
 8005c54:	6538      	str	r0, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8005c56:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005c58:	330e      	adds	r3, #14
 8005c5a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8005c5c:	4618      	mov	r0, r3
 8005c5e:	f7fe fa67 	bl	8004130 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 8005c62:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005c64:	3316      	adds	r3, #22
 8005c66:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8005c68:	4618      	mov	r0, r3
 8005c6a:	f7fe fa61 	bl	8004130 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8005c6e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005c70:	330b      	adds	r3, #11
 8005c72:	2220      	movs	r2, #32
 8005c74:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8005c76:	693b      	ldr	r3, [r7, #16]
 8005c78:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005c7a:	4611      	mov	r1, r2
 8005c7c:	4618      	mov	r0, r3
 8005c7e:	f7ff f9b8 	bl	8004ff2 <ld_clust>
 8005c82:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8005c84:	693b      	ldr	r3, [r7, #16]
 8005c86:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8005c88:	2200      	movs	r2, #0
 8005c8a:	4618      	mov	r0, r3
 8005c8c:	f7ff f9d0 	bl	8005030 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8005c90:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005c92:	331c      	adds	r3, #28
 8005c94:	2100      	movs	r1, #0
 8005c96:	4618      	mov	r0, r3
 8005c98:	f7fe fa4a 	bl	8004130 <st_dword>
					fs->wflag = 1;
 8005c9c:	693b      	ldr	r3, [r7, #16]
 8005c9e:	2201      	movs	r2, #1
 8005ca0:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 8005ca2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005ca4:	2b00      	cmp	r3, #0
 8005ca6:	d037      	beq.n	8005d18 <f_open+0x1d4>
						dw = fs->winsect;
 8005ca8:	693b      	ldr	r3, [r7, #16]
 8005caa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005cac:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 8005cae:	f107 0314 	add.w	r3, r7, #20
 8005cb2:	2200      	movs	r2, #0
 8005cb4:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8005cb6:	4618      	mov	r0, r3
 8005cb8:	f7fe fee3 	bl	8004a82 <remove_chain>
 8005cbc:	4603      	mov	r3, r0
 8005cbe:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 8005cc2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005cc6:	2b00      	cmp	r3, #0
 8005cc8:	d126      	bne.n	8005d18 <f_open+0x1d4>
							res = move_window(fs, dw);
 8005cca:	693b      	ldr	r3, [r7, #16]
 8005ccc:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8005cce:	4618      	mov	r0, r3
 8005cd0:	f7fe fc88 	bl	80045e4 <move_window>
 8005cd4:	4603      	mov	r3, r0
 8005cd6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8005cda:	693b      	ldr	r3, [r7, #16]
 8005cdc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005cde:	3a01      	subs	r2, #1
 8005ce0:	60da      	str	r2, [r3, #12]
 8005ce2:	e019      	b.n	8005d18 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 8005ce4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005ce8:	2b00      	cmp	r3, #0
 8005cea:	d115      	bne.n	8005d18 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8005cec:	7ebb      	ldrb	r3, [r7, #26]
 8005cee:	f003 0310 	and.w	r3, r3, #16
 8005cf2:	2b00      	cmp	r3, #0
 8005cf4:	d003      	beq.n	8005cfe <f_open+0x1ba>
					res = FR_NO_FILE;
 8005cf6:	2304      	movs	r3, #4
 8005cf8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8005cfc:	e00c      	b.n	8005d18 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 8005cfe:	79fb      	ldrb	r3, [r7, #7]
 8005d00:	f003 0302 	and.w	r3, r3, #2
 8005d04:	2b00      	cmp	r3, #0
 8005d06:	d007      	beq.n	8005d18 <f_open+0x1d4>
 8005d08:	7ebb      	ldrb	r3, [r7, #26]
 8005d0a:	f003 0301 	and.w	r3, r3, #1
 8005d0e:	2b00      	cmp	r3, #0
 8005d10:	d002      	beq.n	8005d18 <f_open+0x1d4>
						res = FR_DENIED;
 8005d12:	2307      	movs	r3, #7
 8005d14:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 8005d18:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005d1c:	2b00      	cmp	r3, #0
 8005d1e:	d128      	bne.n	8005d72 <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8005d20:	79fb      	ldrb	r3, [r7, #7]
 8005d22:	f003 0308 	and.w	r3, r3, #8
 8005d26:	2b00      	cmp	r3, #0
 8005d28:	d003      	beq.n	8005d32 <f_open+0x1ee>
				mode |= FA_MODIFIED;
 8005d2a:	79fb      	ldrb	r3, [r7, #7]
 8005d2c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005d30:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8005d32:	693b      	ldr	r3, [r7, #16]
 8005d34:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005d36:	68fb      	ldr	r3, [r7, #12]
 8005d38:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 8005d3a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8005d40:	79fb      	ldrb	r3, [r7, #7]
 8005d42:	f023 0301 	bic.w	r3, r3, #1
 8005d46:	2b00      	cmp	r3, #0
 8005d48:	bf14      	ite	ne
 8005d4a:	2301      	movne	r3, #1
 8005d4c:	2300      	moveq	r3, #0
 8005d4e:	b2db      	uxtb	r3, r3
 8005d50:	461a      	mov	r2, r3
 8005d52:	f107 0314 	add.w	r3, r7, #20
 8005d56:	4611      	mov	r1, r2
 8005d58:	4618      	mov	r0, r3
 8005d5a:	f7fe fb11 	bl	8004380 <inc_lock>
 8005d5e:	4602      	mov	r2, r0
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	691b      	ldr	r3, [r3, #16]
 8005d68:	2b00      	cmp	r3, #0
 8005d6a:	d102      	bne.n	8005d72 <f_open+0x22e>
 8005d6c:	2302      	movs	r3, #2
 8005d6e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 8005d72:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005d76:	2b00      	cmp	r3, #0
 8005d78:	f040 8095 	bne.w	8005ea6 <f_open+0x362>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8005d7c:	693b      	ldr	r3, [r7, #16]
 8005d7e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005d80:	4611      	mov	r1, r2
 8005d82:	4618      	mov	r0, r3
 8005d84:	f7ff f935 	bl	8004ff2 <ld_clust>
 8005d88:	4602      	mov	r2, r0
 8005d8a:	68fb      	ldr	r3, [r7, #12]
 8005d8c:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8005d8e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005d90:	331c      	adds	r3, #28
 8005d92:	4618      	mov	r0, r3
 8005d94:	f7fe f98e 	bl	80040b4 <ld_dword>
 8005d98:	4602      	mov	r2, r0
 8005d9a:	68fb      	ldr	r3, [r7, #12]
 8005d9c:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	2200      	movs	r2, #0
 8005da2:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 8005da4:	693a      	ldr	r2, [r7, #16]
 8005da6:	68fb      	ldr	r3, [r7, #12]
 8005da8:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 8005daa:	693b      	ldr	r3, [r7, #16]
 8005dac:	88da      	ldrh	r2, [r3, #6]
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 8005db2:	68fb      	ldr	r3, [r7, #12]
 8005db4:	79fa      	ldrb	r2, [r7, #7]
 8005db6:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	2200      	movs	r2, #0
 8005dbc:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	2200      	movs	r2, #0
 8005dc2:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	2200      	movs	r2, #0
 8005dc8:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 8005dca:	68fb      	ldr	r3, [r7, #12]
 8005dcc:	3330      	adds	r3, #48	; 0x30
 8005dce:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005dd2:	2100      	movs	r1, #0
 8005dd4:	4618      	mov	r0, r3
 8005dd6:	f7fe f9f8 	bl	80041ca <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8005dda:	79fb      	ldrb	r3, [r7, #7]
 8005ddc:	f003 0320 	and.w	r3, r3, #32
 8005de0:	2b00      	cmp	r3, #0
 8005de2:	d060      	beq.n	8005ea6 <f_open+0x362>
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	68db      	ldr	r3, [r3, #12]
 8005de8:	2b00      	cmp	r3, #0
 8005dea:	d05c      	beq.n	8005ea6 <f_open+0x362>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	68da      	ldr	r2, [r3, #12]
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8005df4:	693b      	ldr	r3, [r7, #16]
 8005df6:	895b      	ldrh	r3, [r3, #10]
 8005df8:	025b      	lsls	r3, r3, #9
 8005dfa:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8005dfc:	68fb      	ldr	r3, [r7, #12]
 8005dfe:	689b      	ldr	r3, [r3, #8]
 8005e00:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8005e02:	68fb      	ldr	r3, [r7, #12]
 8005e04:	68db      	ldr	r3, [r3, #12]
 8005e06:	657b      	str	r3, [r7, #84]	; 0x54
 8005e08:	e016      	b.n	8005e38 <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8005e0e:	4618      	mov	r0, r3
 8005e10:	f7fe fca3 	bl	800475a <get_fat>
 8005e14:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 8005e16:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005e18:	2b01      	cmp	r3, #1
 8005e1a:	d802      	bhi.n	8005e22 <f_open+0x2de>
 8005e1c:	2302      	movs	r3, #2
 8005e1e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8005e22:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005e24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e28:	d102      	bne.n	8005e30 <f_open+0x2ec>
 8005e2a:	2301      	movs	r3, #1
 8005e2c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8005e30:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8005e32:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005e34:	1ad3      	subs	r3, r2, r3
 8005e36:	657b      	str	r3, [r7, #84]	; 0x54
 8005e38:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005e3c:	2b00      	cmp	r3, #0
 8005e3e:	d103      	bne.n	8005e48 <f_open+0x304>
 8005e40:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8005e42:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005e44:	429a      	cmp	r2, r3
 8005e46:	d8e0      	bhi.n	8005e0a <f_open+0x2c6>
				}
				fp->clust = clst;
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005e4c:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8005e4e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005e52:	2b00      	cmp	r3, #0
 8005e54:	d127      	bne.n	8005ea6 <f_open+0x362>
 8005e56:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005e58:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005e5c:	2b00      	cmp	r3, #0
 8005e5e:	d022      	beq.n	8005ea6 <f_open+0x362>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8005e60:	693b      	ldr	r3, [r7, #16]
 8005e62:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8005e64:	4618      	mov	r0, r3
 8005e66:	f7fe fc59 	bl	800471c <clust2sect>
 8005e6a:	6478      	str	r0, [r7, #68]	; 0x44
 8005e6c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005e6e:	2b00      	cmp	r3, #0
 8005e70:	d103      	bne.n	8005e7a <f_open+0x336>
						res = FR_INT_ERR;
 8005e72:	2302      	movs	r3, #2
 8005e74:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8005e78:	e015      	b.n	8005ea6 <f_open+0x362>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8005e7a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005e7c:	0a5a      	lsrs	r2, r3, #9
 8005e7e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005e80:	441a      	add	r2, r3
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8005e86:	693b      	ldr	r3, [r7, #16]
 8005e88:	7858      	ldrb	r0, [r3, #1]
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	6a1a      	ldr	r2, [r3, #32]
 8005e94:	2301      	movs	r3, #1
 8005e96:	f7fe f897 	bl	8003fc8 <disk_read>
 8005e9a:	4603      	mov	r3, r0
 8005e9c:	2b00      	cmp	r3, #0
 8005e9e:	d002      	beq.n	8005ea6 <f_open+0x362>
 8005ea0:	2301      	movs	r3, #1
 8005ea2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8005ea6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005eaa:	2b00      	cmp	r3, #0
 8005eac:	d002      	beq.n	8005eb4 <f_open+0x370>
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	2200      	movs	r2, #0
 8005eb2:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8005eb4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 8005eb8:	4618      	mov	r0, r3
 8005eba:	3760      	adds	r7, #96	; 0x60
 8005ebc:	46bd      	mov	sp, r7
 8005ebe:	bd80      	pop	{r7, pc}

08005ec0 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 8005ec0:	b580      	push	{r7, lr}
 8005ec2:	b08e      	sub	sp, #56	; 0x38
 8005ec4:	af00      	add	r7, sp, #0
 8005ec6:	60f8      	str	r0, [r7, #12]
 8005ec8:	60b9      	str	r1, [r7, #8]
 8005eca:	607a      	str	r2, [r7, #4]
 8005ecc:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 8005ece:	68bb      	ldr	r3, [r7, #8]
 8005ed0:	627b      	str	r3, [r7, #36]	; 0x24


	*br = 0;	/* Clear read byte counter */
 8005ed2:	683b      	ldr	r3, [r7, #0]
 8005ed4:	2200      	movs	r2, #0
 8005ed6:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	f107 0214 	add.w	r2, r7, #20
 8005ede:	4611      	mov	r1, r2
 8005ee0:	4618      	mov	r0, r3
 8005ee2:	f7ff fdb3 	bl	8005a4c <validate>
 8005ee6:	4603      	mov	r3, r0
 8005ee8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8005eec:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8005ef0:	2b00      	cmp	r3, #0
 8005ef2:	d107      	bne.n	8005f04 <f_read+0x44>
 8005ef4:	68fb      	ldr	r3, [r7, #12]
 8005ef6:	7d5b      	ldrb	r3, [r3, #21]
 8005ef8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8005efc:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8005f00:	2b00      	cmp	r3, #0
 8005f02:	d002      	beq.n	8005f0a <f_read+0x4a>
 8005f04:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8005f08:	e115      	b.n	8006136 <f_read+0x276>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 8005f0a:	68fb      	ldr	r3, [r7, #12]
 8005f0c:	7d1b      	ldrb	r3, [r3, #20]
 8005f0e:	f003 0301 	and.w	r3, r3, #1
 8005f12:	2b00      	cmp	r3, #0
 8005f14:	d101      	bne.n	8005f1a <f_read+0x5a>
 8005f16:	2307      	movs	r3, #7
 8005f18:	e10d      	b.n	8006136 <f_read+0x276>
	remain = fp->obj.objsize - fp->fptr;
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	68da      	ldr	r2, [r3, #12]
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	699b      	ldr	r3, [r3, #24]
 8005f22:	1ad3      	subs	r3, r2, r3
 8005f24:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 8005f26:	687a      	ldr	r2, [r7, #4]
 8005f28:	6a3b      	ldr	r3, [r7, #32]
 8005f2a:	429a      	cmp	r2, r3
 8005f2c:	f240 80fe 	bls.w	800612c <f_read+0x26c>
 8005f30:	6a3b      	ldr	r3, [r7, #32]
 8005f32:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 8005f34:	e0fa      	b.n	800612c <f_read+0x26c>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	699b      	ldr	r3, [r3, #24]
 8005f3a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005f3e:	2b00      	cmp	r3, #0
 8005f40:	f040 80c6 	bne.w	80060d0 <f_read+0x210>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	699b      	ldr	r3, [r3, #24]
 8005f48:	0a5b      	lsrs	r3, r3, #9
 8005f4a:	697a      	ldr	r2, [r7, #20]
 8005f4c:	8952      	ldrh	r2, [r2, #10]
 8005f4e:	3a01      	subs	r2, #1
 8005f50:	4013      	ands	r3, r2
 8005f52:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 8005f54:	69fb      	ldr	r3, [r7, #28]
 8005f56:	2b00      	cmp	r3, #0
 8005f58:	d12f      	bne.n	8005fba <f_read+0xfa>
				if (fp->fptr == 0) {			/* On the top of the file? */
 8005f5a:	68fb      	ldr	r3, [r7, #12]
 8005f5c:	699b      	ldr	r3, [r3, #24]
 8005f5e:	2b00      	cmp	r3, #0
 8005f60:	d103      	bne.n	8005f6a <f_read+0xaa>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 8005f62:	68fb      	ldr	r3, [r7, #12]
 8005f64:	689b      	ldr	r3, [r3, #8]
 8005f66:	633b      	str	r3, [r7, #48]	; 0x30
 8005f68:	e013      	b.n	8005f92 <f_read+0xd2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f6e:	2b00      	cmp	r3, #0
 8005f70:	d007      	beq.n	8005f82 <f_read+0xc2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	699b      	ldr	r3, [r3, #24]
 8005f76:	4619      	mov	r1, r3
 8005f78:	68f8      	ldr	r0, [r7, #12]
 8005f7a:	f7fe fe7f 	bl	8004c7c <clmt_clust>
 8005f7e:	6338      	str	r0, [r7, #48]	; 0x30
 8005f80:	e007      	b.n	8005f92 <f_read+0xd2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 8005f82:	68fa      	ldr	r2, [r7, #12]
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	69db      	ldr	r3, [r3, #28]
 8005f88:	4619      	mov	r1, r3
 8005f8a:	4610      	mov	r0, r2
 8005f8c:	f7fe fbe5 	bl	800475a <get_fat>
 8005f90:	6338      	str	r0, [r7, #48]	; 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 8005f92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f94:	2b01      	cmp	r3, #1
 8005f96:	d804      	bhi.n	8005fa2 <f_read+0xe2>
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	2202      	movs	r2, #2
 8005f9c:	755a      	strb	r2, [r3, #21]
 8005f9e:	2302      	movs	r3, #2
 8005fa0:	e0c9      	b.n	8006136 <f_read+0x276>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8005fa2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fa4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005fa8:	d104      	bne.n	8005fb4 <f_read+0xf4>
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	2201      	movs	r2, #1
 8005fae:	755a      	strb	r2, [r3, #21]
 8005fb0:	2301      	movs	r3, #1
 8005fb2:	e0c0      	b.n	8006136 <f_read+0x276>
				fp->clust = clst;				/* Update current cluster */
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005fb8:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8005fba:	697a      	ldr	r2, [r7, #20]
 8005fbc:	68fb      	ldr	r3, [r7, #12]
 8005fbe:	69db      	ldr	r3, [r3, #28]
 8005fc0:	4619      	mov	r1, r3
 8005fc2:	4610      	mov	r0, r2
 8005fc4:	f7fe fbaa 	bl	800471c <clust2sect>
 8005fc8:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8005fca:	69bb      	ldr	r3, [r7, #24]
 8005fcc:	2b00      	cmp	r3, #0
 8005fce:	d104      	bne.n	8005fda <f_read+0x11a>
 8005fd0:	68fb      	ldr	r3, [r7, #12]
 8005fd2:	2202      	movs	r2, #2
 8005fd4:	755a      	strb	r2, [r3, #21]
 8005fd6:	2302      	movs	r3, #2
 8005fd8:	e0ad      	b.n	8006136 <f_read+0x276>
			sect += csect;
 8005fda:	69ba      	ldr	r2, [r7, #24]
 8005fdc:	69fb      	ldr	r3, [r7, #28]
 8005fde:	4413      	add	r3, r2
 8005fe0:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	0a5b      	lsrs	r3, r3, #9
 8005fe6:	62bb      	str	r3, [r7, #40]	; 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 8005fe8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fea:	2b00      	cmp	r3, #0
 8005fec:	d039      	beq.n	8006062 <f_read+0x1a2>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8005fee:	69fa      	ldr	r2, [r7, #28]
 8005ff0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ff2:	4413      	add	r3, r2
 8005ff4:	697a      	ldr	r2, [r7, #20]
 8005ff6:	8952      	ldrh	r2, [r2, #10]
 8005ff8:	4293      	cmp	r3, r2
 8005ffa:	d905      	bls.n	8006008 <f_read+0x148>
					cc = fs->csize - csect;
 8005ffc:	697b      	ldr	r3, [r7, #20]
 8005ffe:	895b      	ldrh	r3, [r3, #10]
 8006000:	461a      	mov	r2, r3
 8006002:	69fb      	ldr	r3, [r7, #28]
 8006004:	1ad3      	subs	r3, r2, r3
 8006006:	62bb      	str	r3, [r7, #40]	; 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8006008:	697b      	ldr	r3, [r7, #20]
 800600a:	7858      	ldrb	r0, [r3, #1]
 800600c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800600e:	69ba      	ldr	r2, [r7, #24]
 8006010:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006012:	f7fd ffd9 	bl	8003fc8 <disk_read>
 8006016:	4603      	mov	r3, r0
 8006018:	2b00      	cmp	r3, #0
 800601a:	d004      	beq.n	8006026 <f_read+0x166>
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	2201      	movs	r2, #1
 8006020:	755a      	strb	r2, [r3, #21]
 8006022:	2301      	movs	r3, #1
 8006024:	e087      	b.n	8006136 <f_read+0x276>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	7d1b      	ldrb	r3, [r3, #20]
 800602a:	b25b      	sxtb	r3, r3
 800602c:	2b00      	cmp	r3, #0
 800602e:	da14      	bge.n	800605a <f_read+0x19a>
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	6a1a      	ldr	r2, [r3, #32]
 8006034:	69bb      	ldr	r3, [r7, #24]
 8006036:	1ad3      	subs	r3, r2, r3
 8006038:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800603a:	429a      	cmp	r2, r3
 800603c:	d90d      	bls.n	800605a <f_read+0x19a>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 800603e:	68fb      	ldr	r3, [r7, #12]
 8006040:	6a1a      	ldr	r2, [r3, #32]
 8006042:	69bb      	ldr	r3, [r7, #24]
 8006044:	1ad3      	subs	r3, r2, r3
 8006046:	025b      	lsls	r3, r3, #9
 8006048:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800604a:	18d0      	adds	r0, r2, r3
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	3330      	adds	r3, #48	; 0x30
 8006050:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006054:	4619      	mov	r1, r3
 8006056:	f7fe f897 	bl	8004188 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 800605a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800605c:	025b      	lsls	r3, r3, #9
 800605e:	62fb      	str	r3, [r7, #44]	; 0x2c
				continue;
 8006060:	e050      	b.n	8006104 <f_read+0x244>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 8006062:	68fb      	ldr	r3, [r7, #12]
 8006064:	6a1b      	ldr	r3, [r3, #32]
 8006066:	69ba      	ldr	r2, [r7, #24]
 8006068:	429a      	cmp	r2, r3
 800606a:	d02e      	beq.n	80060ca <f_read+0x20a>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	7d1b      	ldrb	r3, [r3, #20]
 8006070:	b25b      	sxtb	r3, r3
 8006072:	2b00      	cmp	r3, #0
 8006074:	da18      	bge.n	80060a8 <f_read+0x1e8>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8006076:	697b      	ldr	r3, [r7, #20]
 8006078:	7858      	ldrb	r0, [r3, #1]
 800607a:	68fb      	ldr	r3, [r7, #12]
 800607c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	6a1a      	ldr	r2, [r3, #32]
 8006084:	2301      	movs	r3, #1
 8006086:	f7fd ffbf 	bl	8004008 <disk_write>
 800608a:	4603      	mov	r3, r0
 800608c:	2b00      	cmp	r3, #0
 800608e:	d004      	beq.n	800609a <f_read+0x1da>
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	2201      	movs	r2, #1
 8006094:	755a      	strb	r2, [r3, #21]
 8006096:	2301      	movs	r3, #1
 8006098:	e04d      	b.n	8006136 <f_read+0x276>
					fp->flag &= (BYTE)~FA_DIRTY;
 800609a:	68fb      	ldr	r3, [r7, #12]
 800609c:	7d1b      	ldrb	r3, [r3, #20]
 800609e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80060a2:	b2da      	uxtb	r2, r3
 80060a4:	68fb      	ldr	r3, [r7, #12]
 80060a6:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 80060a8:	697b      	ldr	r3, [r7, #20]
 80060aa:	7858      	ldrb	r0, [r3, #1]
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80060b2:	2301      	movs	r3, #1
 80060b4:	69ba      	ldr	r2, [r7, #24]
 80060b6:	f7fd ff87 	bl	8003fc8 <disk_read>
 80060ba:	4603      	mov	r3, r0
 80060bc:	2b00      	cmp	r3, #0
 80060be:	d004      	beq.n	80060ca <f_read+0x20a>
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	2201      	movs	r2, #1
 80060c4:	755a      	strb	r2, [r3, #21]
 80060c6:	2301      	movs	r3, #1
 80060c8:	e035      	b.n	8006136 <f_read+0x276>
			}
#endif
			fp->sect = sect;
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	69ba      	ldr	r2, [r7, #24]
 80060ce:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	699b      	ldr	r3, [r3, #24]
 80060d4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80060d8:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 80060dc:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 80060de:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	429a      	cmp	r2, r3
 80060e4:	d901      	bls.n	80060ea <f_read+0x22a>
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	62fb      	str	r3, [r7, #44]	; 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 80060ea:	68fb      	ldr	r3, [r7, #12]
 80060ec:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80060f0:	68fb      	ldr	r3, [r7, #12]
 80060f2:	699b      	ldr	r3, [r3, #24]
 80060f4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80060f8:	4413      	add	r3, r2
 80060fa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80060fc:	4619      	mov	r1, r3
 80060fe:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006100:	f7fe f842 	bl	8004188 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 8006104:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006106:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006108:	4413      	add	r3, r2
 800610a:	627b      	str	r3, [r7, #36]	; 0x24
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	699a      	ldr	r2, [r3, #24]
 8006110:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006112:	441a      	add	r2, r3
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	619a      	str	r2, [r3, #24]
 8006118:	683b      	ldr	r3, [r7, #0]
 800611a:	681a      	ldr	r2, [r3, #0]
 800611c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800611e:	441a      	add	r2, r3
 8006120:	683b      	ldr	r3, [r7, #0]
 8006122:	601a      	str	r2, [r3, #0]
 8006124:	687a      	ldr	r2, [r7, #4]
 8006126:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006128:	1ad3      	subs	r3, r2, r3
 800612a:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	2b00      	cmp	r3, #0
 8006130:	f47f af01 	bne.w	8005f36 <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 8006134:	2300      	movs	r3, #0
}
 8006136:	4618      	mov	r0, r3
 8006138:	3738      	adds	r7, #56	; 0x38
 800613a:	46bd      	mov	sp, r7
 800613c:	bd80      	pop	{r7, pc}

0800613e <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 800613e:	b580      	push	{r7, lr}
 8006140:	b08c      	sub	sp, #48	; 0x30
 8006142:	af00      	add	r7, sp, #0
 8006144:	60f8      	str	r0, [r7, #12]
 8006146:	60b9      	str	r1, [r7, #8]
 8006148:	607a      	str	r2, [r7, #4]
 800614a:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 800614c:	68bb      	ldr	r3, [r7, #8]
 800614e:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 8006150:	683b      	ldr	r3, [r7, #0]
 8006152:	2200      	movs	r2, #0
 8006154:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 8006156:	68fb      	ldr	r3, [r7, #12]
 8006158:	f107 0210 	add.w	r2, r7, #16
 800615c:	4611      	mov	r1, r2
 800615e:	4618      	mov	r0, r3
 8006160:	f7ff fc74 	bl	8005a4c <validate>
 8006164:	4603      	mov	r3, r0
 8006166:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800616a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800616e:	2b00      	cmp	r3, #0
 8006170:	d107      	bne.n	8006182 <f_write+0x44>
 8006172:	68fb      	ldr	r3, [r7, #12]
 8006174:	7d5b      	ldrb	r3, [r3, #21]
 8006176:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800617a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800617e:	2b00      	cmp	r3, #0
 8006180:	d002      	beq.n	8006188 <f_write+0x4a>
 8006182:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006186:	e14b      	b.n	8006420 <f_write+0x2e2>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	7d1b      	ldrb	r3, [r3, #20]
 800618c:	f003 0302 	and.w	r3, r3, #2
 8006190:	2b00      	cmp	r3, #0
 8006192:	d101      	bne.n	8006198 <f_write+0x5a>
 8006194:	2307      	movs	r3, #7
 8006196:	e143      	b.n	8006420 <f_write+0x2e2>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 8006198:	68fb      	ldr	r3, [r7, #12]
 800619a:	699a      	ldr	r2, [r3, #24]
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	441a      	add	r2, r3
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	699b      	ldr	r3, [r3, #24]
 80061a4:	429a      	cmp	r2, r3
 80061a6:	f080 812d 	bcs.w	8006404 <f_write+0x2c6>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 80061aa:	68fb      	ldr	r3, [r7, #12]
 80061ac:	699b      	ldr	r3, [r3, #24]
 80061ae:	43db      	mvns	r3, r3
 80061b0:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 80061b2:	e127      	b.n	8006404 <f_write+0x2c6>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 80061b4:	68fb      	ldr	r3, [r7, #12]
 80061b6:	699b      	ldr	r3, [r3, #24]
 80061b8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80061bc:	2b00      	cmp	r3, #0
 80061be:	f040 80e3 	bne.w	8006388 <f_write+0x24a>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	699b      	ldr	r3, [r3, #24]
 80061c6:	0a5b      	lsrs	r3, r3, #9
 80061c8:	693a      	ldr	r2, [r7, #16]
 80061ca:	8952      	ldrh	r2, [r2, #10]
 80061cc:	3a01      	subs	r2, #1
 80061ce:	4013      	ands	r3, r2
 80061d0:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 80061d2:	69bb      	ldr	r3, [r7, #24]
 80061d4:	2b00      	cmp	r3, #0
 80061d6:	d143      	bne.n	8006260 <f_write+0x122>
				if (fp->fptr == 0) {		/* On the top of the file? */
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	699b      	ldr	r3, [r3, #24]
 80061dc:	2b00      	cmp	r3, #0
 80061de:	d10c      	bne.n	80061fa <f_write+0xbc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	689b      	ldr	r3, [r3, #8]
 80061e4:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 80061e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061e8:	2b00      	cmp	r3, #0
 80061ea:	d11a      	bne.n	8006222 <f_write+0xe4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	2100      	movs	r1, #0
 80061f0:	4618      	mov	r0, r3
 80061f2:	f7fe fcab 	bl	8004b4c <create_chain>
 80061f6:	62b8      	str	r0, [r7, #40]	; 0x28
 80061f8:	e013      	b.n	8006222 <f_write+0xe4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 80061fa:	68fb      	ldr	r3, [r7, #12]
 80061fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061fe:	2b00      	cmp	r3, #0
 8006200:	d007      	beq.n	8006212 <f_write+0xd4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8006202:	68fb      	ldr	r3, [r7, #12]
 8006204:	699b      	ldr	r3, [r3, #24]
 8006206:	4619      	mov	r1, r3
 8006208:	68f8      	ldr	r0, [r7, #12]
 800620a:	f7fe fd37 	bl	8004c7c <clmt_clust>
 800620e:	62b8      	str	r0, [r7, #40]	; 0x28
 8006210:	e007      	b.n	8006222 <f_write+0xe4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8006212:	68fa      	ldr	r2, [r7, #12]
 8006214:	68fb      	ldr	r3, [r7, #12]
 8006216:	69db      	ldr	r3, [r3, #28]
 8006218:	4619      	mov	r1, r3
 800621a:	4610      	mov	r0, r2
 800621c:	f7fe fc96 	bl	8004b4c <create_chain>
 8006220:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8006222:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006224:	2b00      	cmp	r3, #0
 8006226:	f000 80f2 	beq.w	800640e <f_write+0x2d0>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 800622a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800622c:	2b01      	cmp	r3, #1
 800622e:	d104      	bne.n	800623a <f_write+0xfc>
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	2202      	movs	r2, #2
 8006234:	755a      	strb	r2, [r3, #21]
 8006236:	2302      	movs	r3, #2
 8006238:	e0f2      	b.n	8006420 <f_write+0x2e2>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800623a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800623c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006240:	d104      	bne.n	800624c <f_write+0x10e>
 8006242:	68fb      	ldr	r3, [r7, #12]
 8006244:	2201      	movs	r2, #1
 8006246:	755a      	strb	r2, [r3, #21]
 8006248:	2301      	movs	r3, #1
 800624a:	e0e9      	b.n	8006420 <f_write+0x2e2>
				fp->clust = clst;			/* Update current cluster */
 800624c:	68fb      	ldr	r3, [r7, #12]
 800624e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006250:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 8006252:	68fb      	ldr	r3, [r7, #12]
 8006254:	689b      	ldr	r3, [r3, #8]
 8006256:	2b00      	cmp	r3, #0
 8006258:	d102      	bne.n	8006260 <f_write+0x122>
 800625a:	68fb      	ldr	r3, [r7, #12]
 800625c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800625e:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 8006260:	68fb      	ldr	r3, [r7, #12]
 8006262:	7d1b      	ldrb	r3, [r3, #20]
 8006264:	b25b      	sxtb	r3, r3
 8006266:	2b00      	cmp	r3, #0
 8006268:	da18      	bge.n	800629c <f_write+0x15e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800626a:	693b      	ldr	r3, [r7, #16]
 800626c:	7858      	ldrb	r0, [r3, #1]
 800626e:	68fb      	ldr	r3, [r7, #12]
 8006270:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	6a1a      	ldr	r2, [r3, #32]
 8006278:	2301      	movs	r3, #1
 800627a:	f7fd fec5 	bl	8004008 <disk_write>
 800627e:	4603      	mov	r3, r0
 8006280:	2b00      	cmp	r3, #0
 8006282:	d004      	beq.n	800628e <f_write+0x150>
 8006284:	68fb      	ldr	r3, [r7, #12]
 8006286:	2201      	movs	r2, #1
 8006288:	755a      	strb	r2, [r3, #21]
 800628a:	2301      	movs	r3, #1
 800628c:	e0c8      	b.n	8006420 <f_write+0x2e2>
				fp->flag &= (BYTE)~FA_DIRTY;
 800628e:	68fb      	ldr	r3, [r7, #12]
 8006290:	7d1b      	ldrb	r3, [r3, #20]
 8006292:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006296:	b2da      	uxtb	r2, r3
 8006298:	68fb      	ldr	r3, [r7, #12]
 800629a:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800629c:	693a      	ldr	r2, [r7, #16]
 800629e:	68fb      	ldr	r3, [r7, #12]
 80062a0:	69db      	ldr	r3, [r3, #28]
 80062a2:	4619      	mov	r1, r3
 80062a4:	4610      	mov	r0, r2
 80062a6:	f7fe fa39 	bl	800471c <clust2sect>
 80062aa:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 80062ac:	697b      	ldr	r3, [r7, #20]
 80062ae:	2b00      	cmp	r3, #0
 80062b0:	d104      	bne.n	80062bc <f_write+0x17e>
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	2202      	movs	r2, #2
 80062b6:	755a      	strb	r2, [r3, #21]
 80062b8:	2302      	movs	r3, #2
 80062ba:	e0b1      	b.n	8006420 <f_write+0x2e2>
			sect += csect;
 80062bc:	697a      	ldr	r2, [r7, #20]
 80062be:	69bb      	ldr	r3, [r7, #24]
 80062c0:	4413      	add	r3, r2
 80062c2:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	0a5b      	lsrs	r3, r3, #9
 80062c8:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 80062ca:	6a3b      	ldr	r3, [r7, #32]
 80062cc:	2b00      	cmp	r3, #0
 80062ce:	d03c      	beq.n	800634a <f_write+0x20c>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 80062d0:	69ba      	ldr	r2, [r7, #24]
 80062d2:	6a3b      	ldr	r3, [r7, #32]
 80062d4:	4413      	add	r3, r2
 80062d6:	693a      	ldr	r2, [r7, #16]
 80062d8:	8952      	ldrh	r2, [r2, #10]
 80062da:	4293      	cmp	r3, r2
 80062dc:	d905      	bls.n	80062ea <f_write+0x1ac>
					cc = fs->csize - csect;
 80062de:	693b      	ldr	r3, [r7, #16]
 80062e0:	895b      	ldrh	r3, [r3, #10]
 80062e2:	461a      	mov	r2, r3
 80062e4:	69bb      	ldr	r3, [r7, #24]
 80062e6:	1ad3      	subs	r3, r2, r3
 80062e8:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80062ea:	693b      	ldr	r3, [r7, #16]
 80062ec:	7858      	ldrb	r0, [r3, #1]
 80062ee:	6a3b      	ldr	r3, [r7, #32]
 80062f0:	697a      	ldr	r2, [r7, #20]
 80062f2:	69f9      	ldr	r1, [r7, #28]
 80062f4:	f7fd fe88 	bl	8004008 <disk_write>
 80062f8:	4603      	mov	r3, r0
 80062fa:	2b00      	cmp	r3, #0
 80062fc:	d004      	beq.n	8006308 <f_write+0x1ca>
 80062fe:	68fb      	ldr	r3, [r7, #12]
 8006300:	2201      	movs	r2, #1
 8006302:	755a      	strb	r2, [r3, #21]
 8006304:	2301      	movs	r3, #1
 8006306:	e08b      	b.n	8006420 <f_write+0x2e2>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8006308:	68fb      	ldr	r3, [r7, #12]
 800630a:	6a1a      	ldr	r2, [r3, #32]
 800630c:	697b      	ldr	r3, [r7, #20]
 800630e:	1ad3      	subs	r3, r2, r3
 8006310:	6a3a      	ldr	r2, [r7, #32]
 8006312:	429a      	cmp	r2, r3
 8006314:	d915      	bls.n	8006342 <f_write+0x204>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 8006316:	68fb      	ldr	r3, [r7, #12]
 8006318:	f103 0030 	add.w	r0, r3, #48	; 0x30
 800631c:	68fb      	ldr	r3, [r7, #12]
 800631e:	6a1a      	ldr	r2, [r3, #32]
 8006320:	697b      	ldr	r3, [r7, #20]
 8006322:	1ad3      	subs	r3, r2, r3
 8006324:	025b      	lsls	r3, r3, #9
 8006326:	69fa      	ldr	r2, [r7, #28]
 8006328:	4413      	add	r3, r2
 800632a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800632e:	4619      	mov	r1, r3
 8006330:	f7fd ff2a 	bl	8004188 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 8006334:	68fb      	ldr	r3, [r7, #12]
 8006336:	7d1b      	ldrb	r3, [r3, #20]
 8006338:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800633c:	b2da      	uxtb	r2, r3
 800633e:	68fb      	ldr	r3, [r7, #12]
 8006340:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 8006342:	6a3b      	ldr	r3, [r7, #32]
 8006344:	025b      	lsls	r3, r3, #9
 8006346:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 8006348:	e03f      	b.n	80063ca <f_write+0x28c>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800634a:	68fb      	ldr	r3, [r7, #12]
 800634c:	6a1b      	ldr	r3, [r3, #32]
 800634e:	697a      	ldr	r2, [r7, #20]
 8006350:	429a      	cmp	r2, r3
 8006352:	d016      	beq.n	8006382 <f_write+0x244>
				fp->fptr < fp->obj.objsize &&
 8006354:	68fb      	ldr	r3, [r7, #12]
 8006356:	699a      	ldr	r2, [r3, #24]
 8006358:	68fb      	ldr	r3, [r7, #12]
 800635a:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800635c:	429a      	cmp	r2, r3
 800635e:	d210      	bcs.n	8006382 <f_write+0x244>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 8006360:	693b      	ldr	r3, [r7, #16]
 8006362:	7858      	ldrb	r0, [r3, #1]
 8006364:	68fb      	ldr	r3, [r7, #12]
 8006366:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800636a:	2301      	movs	r3, #1
 800636c:	697a      	ldr	r2, [r7, #20]
 800636e:	f7fd fe2b 	bl	8003fc8 <disk_read>
 8006372:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 8006374:	2b00      	cmp	r3, #0
 8006376:	d004      	beq.n	8006382 <f_write+0x244>
					ABORT(fs, FR_DISK_ERR);
 8006378:	68fb      	ldr	r3, [r7, #12]
 800637a:	2201      	movs	r2, #1
 800637c:	755a      	strb	r2, [r3, #21]
 800637e:	2301      	movs	r3, #1
 8006380:	e04e      	b.n	8006420 <f_write+0x2e2>
			}
#endif
			fp->sect = sect;
 8006382:	68fb      	ldr	r3, [r7, #12]
 8006384:	697a      	ldr	r2, [r7, #20]
 8006386:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8006388:	68fb      	ldr	r3, [r7, #12]
 800638a:	699b      	ldr	r3, [r3, #24]
 800638c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006390:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8006394:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 8006396:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	429a      	cmp	r2, r3
 800639c:	d901      	bls.n	80063a2 <f_write+0x264>
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	699b      	ldr	r3, [r3, #24]
 80063ac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80063b0:	4413      	add	r3, r2
 80063b2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80063b4:	69f9      	ldr	r1, [r7, #28]
 80063b6:	4618      	mov	r0, r3
 80063b8:	f7fd fee6 	bl	8004188 <mem_cpy>
		fp->flag |= FA_DIRTY;
 80063bc:	68fb      	ldr	r3, [r7, #12]
 80063be:	7d1b      	ldrb	r3, [r3, #20]
 80063c0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80063c4:	b2da      	uxtb	r2, r3
 80063c6:	68fb      	ldr	r3, [r7, #12]
 80063c8:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 80063ca:	69fa      	ldr	r2, [r7, #28]
 80063cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063ce:	4413      	add	r3, r2
 80063d0:	61fb      	str	r3, [r7, #28]
 80063d2:	68fb      	ldr	r3, [r7, #12]
 80063d4:	699a      	ldr	r2, [r3, #24]
 80063d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063d8:	441a      	add	r2, r3
 80063da:	68fb      	ldr	r3, [r7, #12]
 80063dc:	619a      	str	r2, [r3, #24]
 80063de:	68fb      	ldr	r3, [r7, #12]
 80063e0:	68da      	ldr	r2, [r3, #12]
 80063e2:	68fb      	ldr	r3, [r7, #12]
 80063e4:	699b      	ldr	r3, [r3, #24]
 80063e6:	429a      	cmp	r2, r3
 80063e8:	bf38      	it	cc
 80063ea:	461a      	movcc	r2, r3
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	60da      	str	r2, [r3, #12]
 80063f0:	683b      	ldr	r3, [r7, #0]
 80063f2:	681a      	ldr	r2, [r3, #0]
 80063f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063f6:	441a      	add	r2, r3
 80063f8:	683b      	ldr	r3, [r7, #0]
 80063fa:	601a      	str	r2, [r3, #0]
 80063fc:	687a      	ldr	r2, [r7, #4]
 80063fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006400:	1ad3      	subs	r3, r2, r3
 8006402:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	2b00      	cmp	r3, #0
 8006408:	f47f aed4 	bne.w	80061b4 <f_write+0x76>
 800640c:	e000      	b.n	8006410 <f_write+0x2d2>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800640e:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 8006410:	68fb      	ldr	r3, [r7, #12]
 8006412:	7d1b      	ldrb	r3, [r3, #20]
 8006414:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006418:	b2da      	uxtb	r2, r3
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 800641e:	2300      	movs	r3, #0
}
 8006420:	4618      	mov	r0, r3
 8006422:	3730      	adds	r7, #48	; 0x30
 8006424:	46bd      	mov	sp, r7
 8006426:	bd80      	pop	{r7, pc}

08006428 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8006428:	b580      	push	{r7, lr}
 800642a:	b086      	sub	sp, #24
 800642c:	af00      	add	r7, sp, #0
 800642e:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	f107 0208 	add.w	r2, r7, #8
 8006436:	4611      	mov	r1, r2
 8006438:	4618      	mov	r0, r3
 800643a:	f7ff fb07 	bl	8005a4c <validate>
 800643e:	4603      	mov	r3, r0
 8006440:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8006442:	7dfb      	ldrb	r3, [r7, #23]
 8006444:	2b00      	cmp	r3, #0
 8006446:	d168      	bne.n	800651a <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	7d1b      	ldrb	r3, [r3, #20]
 800644c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006450:	2b00      	cmp	r3, #0
 8006452:	d062      	beq.n	800651a <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	7d1b      	ldrb	r3, [r3, #20]
 8006458:	b25b      	sxtb	r3, r3
 800645a:	2b00      	cmp	r3, #0
 800645c:	da15      	bge.n	800648a <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800645e:	68bb      	ldr	r3, [r7, #8]
 8006460:	7858      	ldrb	r0, [r3, #1]
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	6a1a      	ldr	r2, [r3, #32]
 800646c:	2301      	movs	r3, #1
 800646e:	f7fd fdcb 	bl	8004008 <disk_write>
 8006472:	4603      	mov	r3, r0
 8006474:	2b00      	cmp	r3, #0
 8006476:	d001      	beq.n	800647c <f_sync+0x54>
 8006478:	2301      	movs	r3, #1
 800647a:	e04f      	b.n	800651c <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	7d1b      	ldrb	r3, [r3, #20]
 8006480:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006484:	b2da      	uxtb	r2, r3
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800648a:	f7fd fcff 	bl	8003e8c <get_fattime>
 800648e:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 8006490:	68ba      	ldr	r2, [r7, #8]
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006496:	4619      	mov	r1, r3
 8006498:	4610      	mov	r0, r2
 800649a:	f7fe f8a3 	bl	80045e4 <move_window>
 800649e:	4603      	mov	r3, r0
 80064a0:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 80064a2:	7dfb      	ldrb	r3, [r7, #23]
 80064a4:	2b00      	cmp	r3, #0
 80064a6:	d138      	bne.n	800651a <f_sync+0xf2>
					dir = fp->dir_ptr;
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80064ac:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 80064ae:	68fb      	ldr	r3, [r7, #12]
 80064b0:	330b      	adds	r3, #11
 80064b2:	781a      	ldrb	r2, [r3, #0]
 80064b4:	68fb      	ldr	r3, [r7, #12]
 80064b6:	330b      	adds	r3, #11
 80064b8:	f042 0220 	orr.w	r2, r2, #32
 80064bc:	b2d2      	uxtb	r2, r2
 80064be:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	6818      	ldr	r0, [r3, #0]
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	689b      	ldr	r3, [r3, #8]
 80064c8:	461a      	mov	r2, r3
 80064ca:	68f9      	ldr	r1, [r7, #12]
 80064cc:	f7fe fdb0 	bl	8005030 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 80064d0:	68fb      	ldr	r3, [r7, #12]
 80064d2:	f103 021c 	add.w	r2, r3, #28
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	68db      	ldr	r3, [r3, #12]
 80064da:	4619      	mov	r1, r3
 80064dc:	4610      	mov	r0, r2
 80064de:	f7fd fe27 	bl	8004130 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 80064e2:	68fb      	ldr	r3, [r7, #12]
 80064e4:	3316      	adds	r3, #22
 80064e6:	6939      	ldr	r1, [r7, #16]
 80064e8:	4618      	mov	r0, r3
 80064ea:	f7fd fe21 	bl	8004130 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 80064ee:	68fb      	ldr	r3, [r7, #12]
 80064f0:	3312      	adds	r3, #18
 80064f2:	2100      	movs	r1, #0
 80064f4:	4618      	mov	r0, r3
 80064f6:	f7fd fe00 	bl	80040fa <st_word>
					fs->wflag = 1;
 80064fa:	68bb      	ldr	r3, [r7, #8]
 80064fc:	2201      	movs	r2, #1
 80064fe:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8006500:	68bb      	ldr	r3, [r7, #8]
 8006502:	4618      	mov	r0, r3
 8006504:	f7fe f89c 	bl	8004640 <sync_fs>
 8006508:	4603      	mov	r3, r0
 800650a:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	7d1b      	ldrb	r3, [r3, #20]
 8006510:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006514:	b2da      	uxtb	r2, r3
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800651a:	7dfb      	ldrb	r3, [r7, #23]
}
 800651c:	4618      	mov	r0, r3
 800651e:	3718      	adds	r7, #24
 8006520:	46bd      	mov	sp, r7
 8006522:	bd80      	pop	{r7, pc}

08006524 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 8006524:	b580      	push	{r7, lr}
 8006526:	b084      	sub	sp, #16
 8006528:	af00      	add	r7, sp, #0
 800652a:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800652c:	6878      	ldr	r0, [r7, #4]
 800652e:	f7ff ff7b 	bl	8006428 <f_sync>
 8006532:	4603      	mov	r3, r0
 8006534:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8006536:	7bfb      	ldrb	r3, [r7, #15]
 8006538:	2b00      	cmp	r3, #0
 800653a:	d118      	bne.n	800656e <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	f107 0208 	add.w	r2, r7, #8
 8006542:	4611      	mov	r1, r2
 8006544:	4618      	mov	r0, r3
 8006546:	f7ff fa81 	bl	8005a4c <validate>
 800654a:	4603      	mov	r3, r0
 800654c:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800654e:	7bfb      	ldrb	r3, [r7, #15]
 8006550:	2b00      	cmp	r3, #0
 8006552:	d10c      	bne.n	800656e <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	691b      	ldr	r3, [r3, #16]
 8006558:	4618      	mov	r0, r3
 800655a:	f7fd ff9f 	bl	800449c <dec_lock>
 800655e:	4603      	mov	r3, r0
 8006560:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 8006562:	7bfb      	ldrb	r3, [r7, #15]
 8006564:	2b00      	cmp	r3, #0
 8006566:	d102      	bne.n	800656e <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	2200      	movs	r2, #0
 800656c:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 800656e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006570:	4618      	mov	r0, r3
 8006572:	3710      	adds	r7, #16
 8006574:	46bd      	mov	sp, r7
 8006576:	bd80      	pop	{r7, pc}

08006578 <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File pointer from top of file */
)
{
 8006578:	b580      	push	{r7, lr}
 800657a:	b090      	sub	sp, #64	; 0x40
 800657c:	af00      	add	r7, sp, #0
 800657e:	6078      	str	r0, [r7, #4]
 8006580:	6039      	str	r1, [r7, #0]
	FSIZE_t ifptr;
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif

	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	f107 0208 	add.w	r2, r7, #8
 8006588:	4611      	mov	r1, r2
 800658a:	4618      	mov	r0, r3
 800658c:	f7ff fa5e 	bl	8005a4c <validate>
 8006590:	4603      	mov	r3, r0
 8006592:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res == FR_OK) res = (FRESULT)fp->err;
 8006596:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800659a:	2b00      	cmp	r3, #0
 800659c:	d103      	bne.n	80065a6 <f_lseek+0x2e>
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	7d5b      	ldrb	r3, [r3, #21]
 80065a2:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
#if _FS_EXFAT && !_FS_READONLY
	if (res == FR_OK && fs->fs_type == FS_EXFAT) {
		res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
	}
#endif
	if (res != FR_OK) LEAVE_FF(fs, res);
 80065a6:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80065aa:	2b00      	cmp	r3, #0
 80065ac:	d002      	beq.n	80065b4 <f_lseek+0x3c>
 80065ae:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80065b2:	e1e6      	b.n	8006982 <f_lseek+0x40a>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065b8:	2b00      	cmp	r3, #0
 80065ba:	f000 80d1 	beq.w	8006760 <f_lseek+0x1e8>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 80065be:	683b      	ldr	r3, [r7, #0]
 80065c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80065c4:	d15a      	bne.n	800667c <f_lseek+0x104>
			tbl = fp->cltbl;
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065ca:	627b      	str	r3, [r7, #36]	; 0x24
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 80065cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065ce:	1d1a      	adds	r2, r3, #4
 80065d0:	627a      	str	r2, [r7, #36]	; 0x24
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	617b      	str	r3, [r7, #20]
 80065d6:	2302      	movs	r3, #2
 80065d8:	62bb      	str	r3, [r7, #40]	; 0x28
			cl = fp->obj.sclust;		/* Origin of the chain */
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	689b      	ldr	r3, [r3, #8]
 80065de:	633b      	str	r3, [r7, #48]	; 0x30
			if (cl) {
 80065e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065e2:	2b00      	cmp	r3, #0
 80065e4:	d03a      	beq.n	800665c <f_lseek+0xe4>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 80065e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065e8:	613b      	str	r3, [r7, #16]
 80065ea:	2300      	movs	r3, #0
 80065ec:	62fb      	str	r3, [r7, #44]	; 0x2c
 80065ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065f0:	3302      	adds	r3, #2
 80065f2:	62bb      	str	r3, [r7, #40]	; 0x28
					do {
						pcl = cl; ncl++;
 80065f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065f6:	60fb      	str	r3, [r7, #12]
 80065f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80065fa:	3301      	adds	r3, #1
 80065fc:	62fb      	str	r3, [r7, #44]	; 0x2c
						cl = get_fat(&fp->obj, cl);
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006602:	4618      	mov	r0, r3
 8006604:	f7fe f8a9 	bl	800475a <get_fat>
 8006608:	6338      	str	r0, [r7, #48]	; 0x30
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 800660a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800660c:	2b01      	cmp	r3, #1
 800660e:	d804      	bhi.n	800661a <f_lseek+0xa2>
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	2202      	movs	r2, #2
 8006614:	755a      	strb	r2, [r3, #21]
 8006616:	2302      	movs	r3, #2
 8006618:	e1b3      	b.n	8006982 <f_lseek+0x40a>
						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800661a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800661c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006620:	d104      	bne.n	800662c <f_lseek+0xb4>
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	2201      	movs	r2, #1
 8006626:	755a      	strb	r2, [r3, #21]
 8006628:	2301      	movs	r3, #1
 800662a:	e1aa      	b.n	8006982 <f_lseek+0x40a>
					} while (cl == pcl + 1);
 800662c:	68fb      	ldr	r3, [r7, #12]
 800662e:	3301      	adds	r3, #1
 8006630:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006632:	429a      	cmp	r2, r3
 8006634:	d0de      	beq.n	80065f4 <f_lseek+0x7c>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 8006636:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006638:	697b      	ldr	r3, [r7, #20]
 800663a:	429a      	cmp	r2, r3
 800663c:	d809      	bhi.n	8006652 <f_lseek+0xda>
						*tbl++ = ncl; *tbl++ = tcl;
 800663e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006640:	1d1a      	adds	r2, r3, #4
 8006642:	627a      	str	r2, [r7, #36]	; 0x24
 8006644:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006646:	601a      	str	r2, [r3, #0]
 8006648:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800664a:	1d1a      	adds	r2, r3, #4
 800664c:	627a      	str	r2, [r7, #36]	; 0x24
 800664e:	693a      	ldr	r2, [r7, #16]
 8006650:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fs->n_fatent);	/* Repeat until end of chain */
 8006652:	68bb      	ldr	r3, [r7, #8]
 8006654:	695b      	ldr	r3, [r3, #20]
 8006656:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006658:	429a      	cmp	r2, r3
 800665a:	d3c4      	bcc.n	80065e6 <f_lseek+0x6e>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006660:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006662:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen) {
 8006664:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006666:	697b      	ldr	r3, [r7, #20]
 8006668:	429a      	cmp	r2, r3
 800666a:	d803      	bhi.n	8006674 <f_lseek+0xfc>
				*tbl = 0;		/* Terminate table */
 800666c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800666e:	2200      	movs	r2, #0
 8006670:	601a      	str	r2, [r3, #0]
 8006672:	e184      	b.n	800697e <f_lseek+0x406>
			} else {
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 8006674:	2311      	movs	r3, #17
 8006676:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 800667a:	e180      	b.n	800697e <f_lseek+0x406>
			}
		} else {						/* Fast seek */
			if (ofs > fp->obj.objsize) ofs = fp->obj.objsize;	/* Clip offset at the file size */
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	68db      	ldr	r3, [r3, #12]
 8006680:	683a      	ldr	r2, [r7, #0]
 8006682:	429a      	cmp	r2, r3
 8006684:	d902      	bls.n	800668c <f_lseek+0x114>
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	68db      	ldr	r3, [r3, #12]
 800668a:	603b      	str	r3, [r7, #0]
			fp->fptr = ofs;				/* Set file pointer */
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	683a      	ldr	r2, [r7, #0]
 8006690:	619a      	str	r2, [r3, #24]
			if (ofs) {
 8006692:	683b      	ldr	r3, [r7, #0]
 8006694:	2b00      	cmp	r3, #0
 8006696:	f000 8172 	beq.w	800697e <f_lseek+0x406>
				fp->clust = clmt_clust(fp, ofs - 1);
 800669a:	683b      	ldr	r3, [r7, #0]
 800669c:	3b01      	subs	r3, #1
 800669e:	4619      	mov	r1, r3
 80066a0:	6878      	ldr	r0, [r7, #4]
 80066a2:	f7fe faeb 	bl	8004c7c <clmt_clust>
 80066a6:	4602      	mov	r2, r0
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	61da      	str	r2, [r3, #28]
				dsc = clust2sect(fs, fp->clust);
 80066ac:	68ba      	ldr	r2, [r7, #8]
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	69db      	ldr	r3, [r3, #28]
 80066b2:	4619      	mov	r1, r3
 80066b4:	4610      	mov	r0, r2
 80066b6:	f7fe f831 	bl	800471c <clust2sect>
 80066ba:	61b8      	str	r0, [r7, #24]
				if (!dsc) ABORT(fs, FR_INT_ERR);
 80066bc:	69bb      	ldr	r3, [r7, #24]
 80066be:	2b00      	cmp	r3, #0
 80066c0:	d104      	bne.n	80066cc <f_lseek+0x154>
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	2202      	movs	r2, #2
 80066c6:	755a      	strb	r2, [r3, #21]
 80066c8:	2302      	movs	r3, #2
 80066ca:	e15a      	b.n	8006982 <f_lseek+0x40a>
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 80066cc:	683b      	ldr	r3, [r7, #0]
 80066ce:	3b01      	subs	r3, #1
 80066d0:	0a5b      	lsrs	r3, r3, #9
 80066d2:	68ba      	ldr	r2, [r7, #8]
 80066d4:	8952      	ldrh	r2, [r2, #10]
 80066d6:	3a01      	subs	r2, #1
 80066d8:	4013      	ands	r3, r2
 80066da:	69ba      	ldr	r2, [r7, #24]
 80066dc:	4413      	add	r3, r2
 80066de:	61bb      	str	r3, [r7, #24]
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	699b      	ldr	r3, [r3, #24]
 80066e4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80066e8:	2b00      	cmp	r3, #0
 80066ea:	f000 8148 	beq.w	800697e <f_lseek+0x406>
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	6a1b      	ldr	r3, [r3, #32]
 80066f2:	69ba      	ldr	r2, [r7, #24]
 80066f4:	429a      	cmp	r2, r3
 80066f6:	f000 8142 	beq.w	800697e <f_lseek+0x406>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	7d1b      	ldrb	r3, [r3, #20]
 80066fe:	b25b      	sxtb	r3, r3
 8006700:	2b00      	cmp	r3, #0
 8006702:	da18      	bge.n	8006736 <f_lseek+0x1be>
						if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8006704:	68bb      	ldr	r3, [r7, #8]
 8006706:	7858      	ldrb	r0, [r3, #1]
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	6a1a      	ldr	r2, [r3, #32]
 8006712:	2301      	movs	r3, #1
 8006714:	f7fd fc78 	bl	8004008 <disk_write>
 8006718:	4603      	mov	r3, r0
 800671a:	2b00      	cmp	r3, #0
 800671c:	d004      	beq.n	8006728 <f_lseek+0x1b0>
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	2201      	movs	r2, #1
 8006722:	755a      	strb	r2, [r3, #21]
 8006724:	2301      	movs	r3, #1
 8006726:	e12c      	b.n	8006982 <f_lseek+0x40a>
						fp->flag &= (BYTE)~FA_DIRTY;
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	7d1b      	ldrb	r3, [r3, #20]
 800672c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006730:	b2da      	uxtb	r2, r3
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	751a      	strb	r2, [r3, #20]
					}
#endif
					if (disk_read(fs->drv, fp->buf, dsc, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Load current sector */
 8006736:	68bb      	ldr	r3, [r7, #8]
 8006738:	7858      	ldrb	r0, [r3, #1]
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8006740:	2301      	movs	r3, #1
 8006742:	69ba      	ldr	r2, [r7, #24]
 8006744:	f7fd fc40 	bl	8003fc8 <disk_read>
 8006748:	4603      	mov	r3, r0
 800674a:	2b00      	cmp	r3, #0
 800674c:	d004      	beq.n	8006758 <f_lseek+0x1e0>
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	2201      	movs	r2, #1
 8006752:	755a      	strb	r2, [r3, #21]
 8006754:	2301      	movs	r3, #1
 8006756:	e114      	b.n	8006982 <f_lseek+0x40a>
#endif
					fp->sect = dsc;
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	69ba      	ldr	r2, [r7, #24]
 800675c:	621a      	str	r2, [r3, #32]
 800675e:	e10e      	b.n	800697e <f_lseek+0x406>
	/* Normal Seek */
	{
#if _FS_EXFAT
		if (fs->fs_type != FS_EXFAT && ofs >= 0x100000000) ofs = 0xFFFFFFFF;	/* Clip at 4GiB-1 if at FATxx */
#endif
		if (ofs > fp->obj.objsize && (_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	68db      	ldr	r3, [r3, #12]
 8006764:	683a      	ldr	r2, [r7, #0]
 8006766:	429a      	cmp	r2, r3
 8006768:	d908      	bls.n	800677c <f_lseek+0x204>
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	7d1b      	ldrb	r3, [r3, #20]
 800676e:	f003 0302 	and.w	r3, r3, #2
 8006772:	2b00      	cmp	r3, #0
 8006774:	d102      	bne.n	800677c <f_lseek+0x204>
			ofs = fp->obj.objsize;
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	68db      	ldr	r3, [r3, #12]
 800677a:	603b      	str	r3, [r7, #0]
		}
		ifptr = fp->fptr;
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	699b      	ldr	r3, [r3, #24]
 8006780:	623b      	str	r3, [r7, #32]
		fp->fptr = nsect = 0;
 8006782:	2300      	movs	r3, #0
 8006784:	637b      	str	r3, [r7, #52]	; 0x34
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800678a:	619a      	str	r2, [r3, #24]
		if (ofs) {
 800678c:	683b      	ldr	r3, [r7, #0]
 800678e:	2b00      	cmp	r3, #0
 8006790:	f000 80a7 	beq.w	80068e2 <f_lseek+0x36a>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 8006794:	68bb      	ldr	r3, [r7, #8]
 8006796:	895b      	ldrh	r3, [r3, #10]
 8006798:	025b      	lsls	r3, r3, #9
 800679a:	61fb      	str	r3, [r7, #28]
			if (ifptr > 0 &&
 800679c:	6a3b      	ldr	r3, [r7, #32]
 800679e:	2b00      	cmp	r3, #0
 80067a0:	d01b      	beq.n	80067da <f_lseek+0x262>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 80067a2:	683b      	ldr	r3, [r7, #0]
 80067a4:	1e5a      	subs	r2, r3, #1
 80067a6:	69fb      	ldr	r3, [r7, #28]
 80067a8:	fbb2 f2f3 	udiv	r2, r2, r3
 80067ac:	6a3b      	ldr	r3, [r7, #32]
 80067ae:	1e59      	subs	r1, r3, #1
 80067b0:	69fb      	ldr	r3, [r7, #28]
 80067b2:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 80067b6:	429a      	cmp	r2, r3
 80067b8:	d30f      	bcc.n	80067da <f_lseek+0x262>
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 80067ba:	6a3b      	ldr	r3, [r7, #32]
 80067bc:	1e5a      	subs	r2, r3, #1
 80067be:	69fb      	ldr	r3, [r7, #28]
 80067c0:	425b      	negs	r3, r3
 80067c2:	401a      	ands	r2, r3
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	619a      	str	r2, [r3, #24]
				ofs -= fp->fptr;
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	699b      	ldr	r3, [r3, #24]
 80067cc:	683a      	ldr	r2, [r7, #0]
 80067ce:	1ad3      	subs	r3, r2, r3
 80067d0:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	69db      	ldr	r3, [r3, #28]
 80067d6:	63bb      	str	r3, [r7, #56]	; 0x38
 80067d8:	e022      	b.n	8006820 <f_lseek+0x2a8>
			} else {									/* When seek to back cluster, */
				clst = fp->obj.sclust;					/* start from the first cluster */
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	689b      	ldr	r3, [r3, #8]
 80067de:	63bb      	str	r3, [r7, #56]	; 0x38
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 80067e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80067e2:	2b00      	cmp	r3, #0
 80067e4:	d119      	bne.n	800681a <f_lseek+0x2a2>
					clst = create_chain(&fp->obj, 0);
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	2100      	movs	r1, #0
 80067ea:	4618      	mov	r0, r3
 80067ec:	f7fe f9ae 	bl	8004b4c <create_chain>
 80067f0:	63b8      	str	r0, [r7, #56]	; 0x38
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 80067f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80067f4:	2b01      	cmp	r3, #1
 80067f6:	d104      	bne.n	8006802 <f_lseek+0x28a>
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	2202      	movs	r2, #2
 80067fc:	755a      	strb	r2, [r3, #21]
 80067fe:	2302      	movs	r3, #2
 8006800:	e0bf      	b.n	8006982 <f_lseek+0x40a>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8006802:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006804:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006808:	d104      	bne.n	8006814 <f_lseek+0x29c>
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	2201      	movs	r2, #1
 800680e:	755a      	strb	r2, [r3, #21]
 8006810:	2301      	movs	r3, #1
 8006812:	e0b6      	b.n	8006982 <f_lseek+0x40a>
					fp->obj.sclust = clst;
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006818:	609a      	str	r2, [r3, #8]
				}
#endif
				fp->clust = clst;
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800681e:	61da      	str	r2, [r3, #28]
			}
			if (clst != 0) {
 8006820:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006822:	2b00      	cmp	r3, #0
 8006824:	d05d      	beq.n	80068e2 <f_lseek+0x36a>
				while (ofs > bcs) {						/* Cluster following loop */
 8006826:	e03a      	b.n	800689e <f_lseek+0x326>
					ofs -= bcs; fp->fptr += bcs;
 8006828:	683a      	ldr	r2, [r7, #0]
 800682a:	69fb      	ldr	r3, [r7, #28]
 800682c:	1ad3      	subs	r3, r2, r3
 800682e:	603b      	str	r3, [r7, #0]
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	699a      	ldr	r2, [r3, #24]
 8006834:	69fb      	ldr	r3, [r7, #28]
 8006836:	441a      	add	r2, r3
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	7d1b      	ldrb	r3, [r3, #20]
 8006840:	f003 0302 	and.w	r3, r3, #2
 8006844:	2b00      	cmp	r3, #0
 8006846:	d00b      	beq.n	8006860 <f_lseek+0x2e8>
						if (_FS_EXFAT && fp->fptr > fp->obj.objsize) {	/* No FAT chain object needs correct objsize to generate FAT value */
							fp->obj.objsize = fp->fptr;
							fp->flag |= FA_MODIFIED;
						}
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800684c:	4618      	mov	r0, r3
 800684e:	f7fe f97d 	bl	8004b4c <create_chain>
 8006852:	63b8      	str	r0, [r7, #56]	; 0x38
						if (clst == 0) {				/* Clip file size in case of disk full */
 8006854:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006856:	2b00      	cmp	r3, #0
 8006858:	d108      	bne.n	800686c <f_lseek+0x2f4>
							ofs = 0; break;
 800685a:	2300      	movs	r3, #0
 800685c:	603b      	str	r3, [r7, #0]
 800685e:	e022      	b.n	80068a6 <f_lseek+0x32e>
						}
					} else
#endif
					{
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006864:	4618      	mov	r0, r3
 8006866:	f7fd ff78 	bl	800475a <get_fat>
 800686a:	63b8      	str	r0, [r7, #56]	; 0x38
					}
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800686c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800686e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006872:	d104      	bne.n	800687e <f_lseek+0x306>
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	2201      	movs	r2, #1
 8006878:	755a      	strb	r2, [r3, #21]
 800687a:	2301      	movs	r3, #1
 800687c:	e081      	b.n	8006982 <f_lseek+0x40a>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 800687e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006880:	2b01      	cmp	r3, #1
 8006882:	d904      	bls.n	800688e <f_lseek+0x316>
 8006884:	68bb      	ldr	r3, [r7, #8]
 8006886:	695b      	ldr	r3, [r3, #20]
 8006888:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800688a:	429a      	cmp	r2, r3
 800688c:	d304      	bcc.n	8006898 <f_lseek+0x320>
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	2202      	movs	r2, #2
 8006892:	755a      	strb	r2, [r3, #21]
 8006894:	2302      	movs	r3, #2
 8006896:	e074      	b.n	8006982 <f_lseek+0x40a>
					fp->clust = clst;
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800689c:	61da      	str	r2, [r3, #28]
				while (ofs > bcs) {						/* Cluster following loop */
 800689e:	683a      	ldr	r2, [r7, #0]
 80068a0:	69fb      	ldr	r3, [r7, #28]
 80068a2:	429a      	cmp	r2, r3
 80068a4:	d8c0      	bhi.n	8006828 <f_lseek+0x2b0>
				}
				fp->fptr += ofs;
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	699a      	ldr	r2, [r3, #24]
 80068aa:	683b      	ldr	r3, [r7, #0]
 80068ac:	441a      	add	r2, r3
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	619a      	str	r2, [r3, #24]
				if (ofs % SS(fs)) {
 80068b2:	683b      	ldr	r3, [r7, #0]
 80068b4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80068b8:	2b00      	cmp	r3, #0
 80068ba:	d012      	beq.n	80068e2 <f_lseek+0x36a>
					nsect = clust2sect(fs, clst);	/* Current sector */
 80068bc:	68bb      	ldr	r3, [r7, #8]
 80068be:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80068c0:	4618      	mov	r0, r3
 80068c2:	f7fd ff2b 	bl	800471c <clust2sect>
 80068c6:	6378      	str	r0, [r7, #52]	; 0x34
					if (!nsect) ABORT(fs, FR_INT_ERR);
 80068c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80068ca:	2b00      	cmp	r3, #0
 80068cc:	d104      	bne.n	80068d8 <f_lseek+0x360>
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	2202      	movs	r2, #2
 80068d2:	755a      	strb	r2, [r3, #21]
 80068d4:	2302      	movs	r3, #2
 80068d6:	e054      	b.n	8006982 <f_lseek+0x40a>
					nsect += (DWORD)(ofs / SS(fs));
 80068d8:	683b      	ldr	r3, [r7, #0]
 80068da:	0a5b      	lsrs	r3, r3, #9
 80068dc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80068de:	4413      	add	r3, r2
 80068e0:	637b      	str	r3, [r7, #52]	; 0x34
				}
			}
		}
		if (!_FS_READONLY && fp->fptr > fp->obj.objsize) {		/* Set file change flag if the file size is extended */
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	699a      	ldr	r2, [r3, #24]
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	68db      	ldr	r3, [r3, #12]
 80068ea:	429a      	cmp	r2, r3
 80068ec:	d90a      	bls.n	8006904 <f_lseek+0x38c>
			fp->obj.objsize = fp->fptr;
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	699a      	ldr	r2, [r3, #24]
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	60da      	str	r2, [r3, #12]
			fp->flag |= FA_MODIFIED;
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	7d1b      	ldrb	r3, [r3, #20]
 80068fa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80068fe:	b2da      	uxtb	r2, r3
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	751a      	strb	r2, [r3, #20]
		}
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	699b      	ldr	r3, [r3, #24]
 8006908:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800690c:	2b00      	cmp	r3, #0
 800690e:	d036      	beq.n	800697e <f_lseek+0x406>
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	6a1b      	ldr	r3, [r3, #32]
 8006914:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006916:	429a      	cmp	r2, r3
 8006918:	d031      	beq.n	800697e <f_lseek+0x406>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	7d1b      	ldrb	r3, [r3, #20]
 800691e:	b25b      	sxtb	r3, r3
 8006920:	2b00      	cmp	r3, #0
 8006922:	da18      	bge.n	8006956 <f_lseek+0x3de>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8006924:	68bb      	ldr	r3, [r7, #8]
 8006926:	7858      	ldrb	r0, [r3, #1]
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	6a1a      	ldr	r2, [r3, #32]
 8006932:	2301      	movs	r3, #1
 8006934:	f7fd fb68 	bl	8004008 <disk_write>
 8006938:	4603      	mov	r3, r0
 800693a:	2b00      	cmp	r3, #0
 800693c:	d004      	beq.n	8006948 <f_lseek+0x3d0>
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	2201      	movs	r2, #1
 8006942:	755a      	strb	r2, [r3, #21]
 8006944:	2301      	movs	r3, #1
 8006946:	e01c      	b.n	8006982 <f_lseek+0x40a>
				fp->flag &= (BYTE)~FA_DIRTY;
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	7d1b      	ldrb	r3, [r3, #20]
 800694c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006950:	b2da      	uxtb	r2, r3
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	751a      	strb	r2, [r3, #20]
			}
#endif
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 8006956:	68bb      	ldr	r3, [r7, #8]
 8006958:	7858      	ldrb	r0, [r3, #1]
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8006960:	2301      	movs	r3, #1
 8006962:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006964:	f7fd fb30 	bl	8003fc8 <disk_read>
 8006968:	4603      	mov	r3, r0
 800696a:	2b00      	cmp	r3, #0
 800696c:	d004      	beq.n	8006978 <f_lseek+0x400>
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	2201      	movs	r2, #1
 8006972:	755a      	strb	r2, [r3, #21]
 8006974:	2301      	movs	r3, #1
 8006976:	e004      	b.n	8006982 <f_lseek+0x40a>
#endif
			fp->sect = nsect;
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800697c:	621a      	str	r2, [r3, #32]
		}
	}

	LEAVE_FF(fs, res);
 800697e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 8006982:	4618      	mov	r0, r3
 8006984:	3740      	adds	r7, #64	; 0x40
 8006986:	46bd      	mov	sp, r7
 8006988:	bd80      	pop	{r7, pc}

0800698a <f_getfree>:
FRESULT f_getfree (
	const TCHAR* path,	/* Path name of the logical drive number */
	DWORD* nclst,		/* Pointer to a variable to return number of free clusters */
	FATFS** fatfs		/* Pointer to return pointer to corresponding file system object */
)
{
 800698a:	b580      	push	{r7, lr}
 800698c:	b092      	sub	sp, #72	; 0x48
 800698e:	af00      	add	r7, sp, #0
 8006990:	60f8      	str	r0, [r7, #12]
 8006992:	60b9      	str	r1, [r7, #8]
 8006994:	607a      	str	r2, [r7, #4]
	BYTE *p;
	_FDID obj;


	/* Get logical drive */
	res = find_volume(&path, &fs, 0);
 8006996:	f107 0128 	add.w	r1, r7, #40	; 0x28
 800699a:	f107 030c 	add.w	r3, r7, #12
 800699e:	2200      	movs	r2, #0
 80069a0:	4618      	mov	r0, r3
 80069a2:	f7fe fe07 	bl	80055b4 <find_volume>
 80069a6:	4603      	mov	r3, r0
 80069a8:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	if (res == FR_OK) {
 80069ac:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80069b0:	2b00      	cmp	r3, #0
 80069b2:	f040 8099 	bne.w	8006ae8 <f_getfree+0x15e>
		*fatfs = fs;				/* Return ptr to the fs object */
 80069b6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	601a      	str	r2, [r3, #0]
		/* If free_clst is valid, return it without full cluster scan */
		if (fs->free_clst <= fs->n_fatent - 2) {
 80069bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069be:	691a      	ldr	r2, [r3, #16]
 80069c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069c2:	695b      	ldr	r3, [r3, #20]
 80069c4:	3b02      	subs	r3, #2
 80069c6:	429a      	cmp	r2, r3
 80069c8:	d804      	bhi.n	80069d4 <f_getfree+0x4a>
			*nclst = fs->free_clst;
 80069ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069cc:	691a      	ldr	r2, [r3, #16]
 80069ce:	68bb      	ldr	r3, [r7, #8]
 80069d0:	601a      	str	r2, [r3, #0]
 80069d2:	e089      	b.n	8006ae8 <f_getfree+0x15e>
		} else {
			/* Get number of free clusters */
			nfree = 0;
 80069d4:	2300      	movs	r3, #0
 80069d6:	643b      	str	r3, [r7, #64]	; 0x40
			if (fs->fs_type == FS_FAT12) {	/* FAT12: Sector unalighed FAT entries */
 80069d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069da:	781b      	ldrb	r3, [r3, #0]
 80069dc:	2b01      	cmp	r3, #1
 80069de:	d128      	bne.n	8006a32 <f_getfree+0xa8>
				clst = 2; obj.fs = fs;
 80069e0:	2302      	movs	r3, #2
 80069e2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80069e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069e6:	617b      	str	r3, [r7, #20]
				do {
					stat = get_fat(&obj, clst);
 80069e8:	f107 0314 	add.w	r3, r7, #20
 80069ec:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80069ee:	4618      	mov	r0, r3
 80069f0:	f7fd feb3 	bl	800475a <get_fat>
 80069f4:	62f8      	str	r0, [r7, #44]	; 0x2c
					if (stat == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }
 80069f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80069f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80069fc:	d103      	bne.n	8006a06 <f_getfree+0x7c>
 80069fe:	2301      	movs	r3, #1
 8006a00:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8006a04:	e063      	b.n	8006ace <f_getfree+0x144>
					if (stat == 1) { res = FR_INT_ERR; break; }
 8006a06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a08:	2b01      	cmp	r3, #1
 8006a0a:	d103      	bne.n	8006a14 <f_getfree+0x8a>
 8006a0c:	2302      	movs	r3, #2
 8006a0e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8006a12:	e05c      	b.n	8006ace <f_getfree+0x144>
					if (stat == 0) nfree++;
 8006a14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a16:	2b00      	cmp	r3, #0
 8006a18:	d102      	bne.n	8006a20 <f_getfree+0x96>
 8006a1a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006a1c:	3301      	adds	r3, #1
 8006a1e:	643b      	str	r3, [r7, #64]	; 0x40
				} while (++clst < fs->n_fatent);
 8006a20:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006a22:	3301      	adds	r3, #1
 8006a24:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006a26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a28:	695b      	ldr	r3, [r3, #20]
 8006a2a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006a2c:	429a      	cmp	r2, r3
 8006a2e:	d3db      	bcc.n	80069e8 <f_getfree+0x5e>
 8006a30:	e04d      	b.n	8006ace <f_getfree+0x144>
						i = (i + 1) % SS(fs);
					} while (clst);
				} else
#endif
				{	/* FAT16/32: Sector alighed FAT entries */
					clst = fs->n_fatent; sect = fs->fatbase;
 8006a32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a34:	695b      	ldr	r3, [r3, #20]
 8006a36:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006a38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a3a:	6a1b      	ldr	r3, [r3, #32]
 8006a3c:	63bb      	str	r3, [r7, #56]	; 0x38
					i = 0; p = 0;
 8006a3e:	2300      	movs	r3, #0
 8006a40:	637b      	str	r3, [r7, #52]	; 0x34
 8006a42:	2300      	movs	r3, #0
 8006a44:	633b      	str	r3, [r7, #48]	; 0x30
					do {
						if (i == 0) {
 8006a46:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006a48:	2b00      	cmp	r3, #0
 8006a4a:	d113      	bne.n	8006a74 <f_getfree+0xea>
							res = move_window(fs, sect++);
 8006a4c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006a4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a50:	1c5a      	adds	r2, r3, #1
 8006a52:	63ba      	str	r2, [r7, #56]	; 0x38
 8006a54:	4619      	mov	r1, r3
 8006a56:	f7fd fdc5 	bl	80045e4 <move_window>
 8006a5a:	4603      	mov	r3, r0
 8006a5c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
							if (res != FR_OK) break;
 8006a60:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8006a64:	2b00      	cmp	r3, #0
 8006a66:	d131      	bne.n	8006acc <f_getfree+0x142>
							p = fs->win;
 8006a68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a6a:	3330      	adds	r3, #48	; 0x30
 8006a6c:	633b      	str	r3, [r7, #48]	; 0x30
							i = SS(fs);
 8006a6e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006a72:	637b      	str	r3, [r7, #52]	; 0x34
						}
						if (fs->fs_type == FS_FAT16) {
 8006a74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a76:	781b      	ldrb	r3, [r3, #0]
 8006a78:	2b02      	cmp	r3, #2
 8006a7a:	d10f      	bne.n	8006a9c <f_getfree+0x112>
							if (ld_word(p) == 0) nfree++;
 8006a7c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006a7e:	f7fd fb01 	bl	8004084 <ld_word>
 8006a82:	4603      	mov	r3, r0
 8006a84:	2b00      	cmp	r3, #0
 8006a86:	d102      	bne.n	8006a8e <f_getfree+0x104>
 8006a88:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006a8a:	3301      	adds	r3, #1
 8006a8c:	643b      	str	r3, [r7, #64]	; 0x40
							p += 2; i -= 2;
 8006a8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a90:	3302      	adds	r3, #2
 8006a92:	633b      	str	r3, [r7, #48]	; 0x30
 8006a94:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006a96:	3b02      	subs	r3, #2
 8006a98:	637b      	str	r3, [r7, #52]	; 0x34
 8006a9a:	e010      	b.n	8006abe <f_getfree+0x134>
						} else {
							if ((ld_dword(p) & 0x0FFFFFFF) == 0) nfree++;
 8006a9c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006a9e:	f7fd fb09 	bl	80040b4 <ld_dword>
 8006aa2:	4603      	mov	r3, r0
 8006aa4:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8006aa8:	2b00      	cmp	r3, #0
 8006aaa:	d102      	bne.n	8006ab2 <f_getfree+0x128>
 8006aac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006aae:	3301      	adds	r3, #1
 8006ab0:	643b      	str	r3, [r7, #64]	; 0x40
							p += 4; i -= 4;
 8006ab2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ab4:	3304      	adds	r3, #4
 8006ab6:	633b      	str	r3, [r7, #48]	; 0x30
 8006ab8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006aba:	3b04      	subs	r3, #4
 8006abc:	637b      	str	r3, [r7, #52]	; 0x34
						}
					} while (--clst);
 8006abe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006ac0:	3b01      	subs	r3, #1
 8006ac2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006ac4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006ac6:	2b00      	cmp	r3, #0
 8006ac8:	d1bd      	bne.n	8006a46 <f_getfree+0xbc>
 8006aca:	e000      	b.n	8006ace <f_getfree+0x144>
							if (res != FR_OK) break;
 8006acc:	bf00      	nop
				}
			}
			*nclst = nfree;			/* Return the free clusters */
 8006ace:	68bb      	ldr	r3, [r7, #8]
 8006ad0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006ad2:	601a      	str	r2, [r3, #0]
			fs->free_clst = nfree;	/* Now free_clst is valid */
 8006ad4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ad6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006ad8:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;		/* FSInfo is to be updated */
 8006ada:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006adc:	791a      	ldrb	r2, [r3, #4]
 8006ade:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ae0:	f042 0201 	orr.w	r2, r2, #1
 8006ae4:	b2d2      	uxtb	r2, r2
 8006ae6:	711a      	strb	r2, [r3, #4]
		}
	}

	LEAVE_FF(fs, res);
 8006ae8:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 8006aec:	4618      	mov	r0, r3
 8006aee:	3748      	adds	r7, #72	; 0x48
 8006af0:	46bd      	mov	sp, r7
 8006af2:	bd80      	pop	{r7, pc}

08006af4 <f_unlink>:
/*-----------------------------------------------------------------------*/

FRESULT f_unlink (
	const TCHAR* path		/* Pointer to the file or directory path */
)
{
 8006af4:	b580      	push	{r7, lr}
 8006af6:	b09e      	sub	sp, #120	; 0x78
 8006af8:	af00      	add	r7, sp, #0
 8006afa:	6078      	str	r0, [r7, #4]
	FRESULT res;
	DIR dj, sdj;
	DWORD dclst = 0;
 8006afc:	2300      	movs	r3, #0
 8006afe:	673b      	str	r3, [r7, #112]	; 0x70
#endif
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &fs, FA_WRITE);
 8006b00:	f107 010c 	add.w	r1, r7, #12
 8006b04:	1d3b      	adds	r3, r7, #4
 8006b06:	2202      	movs	r2, #2
 8006b08:	4618      	mov	r0, r3
 8006b0a:	f7fe fd53 	bl	80055b4 <find_volume>
 8006b0e:	4603      	mov	r3, r0
 8006b10:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
	dj.obj.fs = fs;
 8006b14:	68fb      	ldr	r3, [r7, #12]
 8006b16:	643b      	str	r3, [r7, #64]	; 0x40
	if (res == FR_OK) {
 8006b18:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8006b1c:	2b00      	cmp	r3, #0
 8006b1e:	f040 808e 	bne.w	8006c3e <f_unlink+0x14a>
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);		/* Follow the file path */
 8006b22:	687a      	ldr	r2, [r7, #4]
 8006b24:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8006b28:	4611      	mov	r1, r2
 8006b2a:	4618      	mov	r0, r3
 8006b2c:	f7fe fc36 	bl	800539c <follow_path>
 8006b30:	4603      	mov	r3, r0
 8006b32:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
		if (_FS_RPATH && res == FR_OK && (dj.fn[NSFLAG] & NS_DOT)) {
			res = FR_INVALID_NAME;			/* Cannot remove dot entry */
		}
#if _FS_LOCK != 0
		if (res == FR_OK) res = chk_lock(&dj, 2);	/* Check if it is an open object */
 8006b36:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8006b3a:	2b00      	cmp	r3, #0
 8006b3c:	d108      	bne.n	8006b50 <f_unlink+0x5c>
 8006b3e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8006b42:	2102      	movs	r1, #2
 8006b44:	4618      	mov	r0, r3
 8006b46:	f7fd fb9d 	bl	8004284 <chk_lock>
 8006b4a:	4603      	mov	r3, r0
 8006b4c:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
#endif
		if (res == FR_OK) {					/* The object is accessible */
 8006b50:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8006b54:	2b00      	cmp	r3, #0
 8006b56:	d172      	bne.n	8006c3e <f_unlink+0x14a>
			if (dj.fn[NSFLAG] & NS_NONAME) {
 8006b58:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8006b5c:	b25b      	sxtb	r3, r3
 8006b5e:	2b00      	cmp	r3, #0
 8006b60:	da03      	bge.n	8006b6a <f_unlink+0x76>
				res = FR_INVALID_NAME;		/* Cannot remove the origin directory */
 8006b62:	2306      	movs	r3, #6
 8006b64:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8006b68:	e008      	b.n	8006b7c <f_unlink+0x88>
			} else {
				if (dj.obj.attr & AM_RDO) {
 8006b6a:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8006b6e:	f003 0301 	and.w	r3, r3, #1
 8006b72:	2b00      	cmp	r3, #0
 8006b74:	d002      	beq.n	8006b7c <f_unlink+0x88>
					res = FR_DENIED;		/* Cannot remove R/O object */
 8006b76:	2307      	movs	r3, #7
 8006b78:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
				}
			}
			if (res == FR_OK) {
 8006b7c:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8006b80:	2b00      	cmp	r3, #0
 8006b82:	d134      	bne.n	8006bee <f_unlink+0xfa>
					obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
					obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
				} else
#endif
				{
					dclst = ld_clust(fs, dj.dir);
 8006b84:	68fb      	ldr	r3, [r7, #12]
 8006b86:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8006b88:	4611      	mov	r1, r2
 8006b8a:	4618      	mov	r0, r3
 8006b8c:	f7fe fa31 	bl	8004ff2 <ld_clust>
 8006b90:	6738      	str	r0, [r7, #112]	; 0x70
				}
				if (dj.obj.attr & AM_DIR) {			/* Is it a sub-directory? */
 8006b92:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8006b96:	f003 0310 	and.w	r3, r3, #16
 8006b9a:	2b00      	cmp	r3, #0
 8006b9c:	d027      	beq.n	8006bee <f_unlink+0xfa>
					if (dclst == fs->cdir) {		 		/* Is it the current directory? */
						res = FR_DENIED;
					} else
#endif
					{
						sdj.obj.fs = fs;						/* Open the sub-directory */
 8006b9e:	68fb      	ldr	r3, [r7, #12]
 8006ba0:	613b      	str	r3, [r7, #16]
						sdj.obj.sclust = dclst;
 8006ba2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006ba4:	61bb      	str	r3, [r7, #24]
						if (fs->fs_type == FS_EXFAT) {
							sdj.obj.objsize = obj.objsize;
							sdj.obj.stat = obj.stat;
						}
#endif
						res = dir_sdi(&sdj, 0);
 8006ba6:	f107 0310 	add.w	r3, r7, #16
 8006baa:	2100      	movs	r1, #0
 8006bac:	4618      	mov	r0, r3
 8006bae:	f7fe f899 	bl	8004ce4 <dir_sdi>
 8006bb2:	4603      	mov	r3, r0
 8006bb4:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
						if (res == FR_OK) {
 8006bb8:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8006bbc:	2b00      	cmp	r3, #0
 8006bbe:	d116      	bne.n	8006bee <f_unlink+0xfa>
							res = dir_read(&sdj, 0);			/* Read an item */
 8006bc0:	f107 0310 	add.w	r3, r7, #16
 8006bc4:	2100      	movs	r1, #0
 8006bc6:	4618      	mov	r0, r3
 8006bc8:	f7fe fa52 	bl	8005070 <dir_read>
 8006bcc:	4603      	mov	r3, r0
 8006bce:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
							if (res == FR_OK) res = FR_DENIED;	/* Not empty? */
 8006bd2:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8006bd6:	2b00      	cmp	r3, #0
 8006bd8:	d102      	bne.n	8006be0 <f_unlink+0xec>
 8006bda:	2307      	movs	r3, #7
 8006bdc:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
							if (res == FR_NO_FILE) res = FR_OK;	/* Empty? */
 8006be0:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8006be4:	2b04      	cmp	r3, #4
 8006be6:	d102      	bne.n	8006bee <f_unlink+0xfa>
 8006be8:	2300      	movs	r3, #0
 8006bea:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
						}
					}
				}
			}
			if (res == FR_OK) {
 8006bee:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8006bf2:	2b00      	cmp	r3, #0
 8006bf4:	d123      	bne.n	8006c3e <f_unlink+0x14a>
				res = dir_remove(&dj);			/* Remove the directory entry */
 8006bf6:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8006bfa:	4618      	mov	r0, r3
 8006bfc:	f7fe fb1c 	bl	8005238 <dir_remove>
 8006c00:	4603      	mov	r3, r0
 8006c02:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
				if (res == FR_OK && dclst) {	/* Remove the cluster chain if exist */
 8006c06:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8006c0a:	2b00      	cmp	r3, #0
 8006c0c:	d10c      	bne.n	8006c28 <f_unlink+0x134>
 8006c0e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006c10:	2b00      	cmp	r3, #0
 8006c12:	d009      	beq.n	8006c28 <f_unlink+0x134>
#if _FS_EXFAT
					res = remove_chain(&obj, dclst, 0);
#else
					res = remove_chain(&dj.obj, dclst, 0);
 8006c14:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8006c18:	2200      	movs	r2, #0
 8006c1a:	6f39      	ldr	r1, [r7, #112]	; 0x70
 8006c1c:	4618      	mov	r0, r3
 8006c1e:	f7fd ff30 	bl	8004a82 <remove_chain>
 8006c22:	4603      	mov	r3, r0
 8006c24:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
#endif
				}
				if (res == FR_OK) res = sync_fs(fs);
 8006c28:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8006c2c:	2b00      	cmp	r3, #0
 8006c2e:	d106      	bne.n	8006c3e <f_unlink+0x14a>
 8006c30:	68fb      	ldr	r3, [r7, #12]
 8006c32:	4618      	mov	r0, r3
 8006c34:	f7fd fd04 	bl	8004640 <sync_fs>
 8006c38:	4603      	mov	r3, r0
 8006c3a:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
 8006c3e:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 8006c42:	4618      	mov	r0, r3
 8006c44:	3778      	adds	r7, #120	; 0x78
 8006c46:	46bd      	mov	sp, r7
 8006c48:	bd80      	pop	{r7, pc}

08006c4a <f_gets>:
TCHAR* f_gets (
	TCHAR* buff,	/* Pointer to the string buffer to read */
	int len,		/* Size of string buffer (characters) */
	FIL* fp			/* Pointer to the file object */
)
{
 8006c4a:	b580      	push	{r7, lr}
 8006c4c:	b088      	sub	sp, #32
 8006c4e:	af00      	add	r7, sp, #0
 8006c50:	60f8      	str	r0, [r7, #12]
 8006c52:	60b9      	str	r1, [r7, #8]
 8006c54:	607a      	str	r2, [r7, #4]
	int n = 0;
 8006c56:	2300      	movs	r3, #0
 8006c58:	61fb      	str	r3, [r7, #28]
	TCHAR c, *p = buff;
 8006c5a:	68fb      	ldr	r3, [r7, #12]
 8006c5c:	61bb      	str	r3, [r7, #24]
	BYTE s[2];
	UINT rc;


	while (n < len - 1) {	/* Read characters until buffer gets filled */
 8006c5e:	e01b      	b.n	8006c98 <f_gets+0x4e>
		}
		c = ff_convert(c, 1);	/* OEM -> Unicode */
		if (!c) c = '?';
#endif
#else						/* Read a character without conversion */
		f_read(fp, s, 1, &rc);
 8006c60:	f107 0310 	add.w	r3, r7, #16
 8006c64:	f107 0114 	add.w	r1, r7, #20
 8006c68:	2201      	movs	r2, #1
 8006c6a:	6878      	ldr	r0, [r7, #4]
 8006c6c:	f7ff f928 	bl	8005ec0 <f_read>
		if (rc != 1) break;
 8006c70:	693b      	ldr	r3, [r7, #16]
 8006c72:	2b01      	cmp	r3, #1
 8006c74:	d116      	bne.n	8006ca4 <f_gets+0x5a>
		c = s[0];
 8006c76:	7d3b      	ldrb	r3, [r7, #20]
 8006c78:	75fb      	strb	r3, [r7, #23]
#endif
		if (_USE_STRFUNC == 2 && c == '\r') continue;	/* Strip '\r' */
 8006c7a:	7dfb      	ldrb	r3, [r7, #23]
 8006c7c:	2b0d      	cmp	r3, #13
 8006c7e:	d100      	bne.n	8006c82 <f_gets+0x38>
 8006c80:	e00a      	b.n	8006c98 <f_gets+0x4e>
		*p++ = c;
 8006c82:	69bb      	ldr	r3, [r7, #24]
 8006c84:	1c5a      	adds	r2, r3, #1
 8006c86:	61ba      	str	r2, [r7, #24]
 8006c88:	7dfa      	ldrb	r2, [r7, #23]
 8006c8a:	701a      	strb	r2, [r3, #0]
		n++;
 8006c8c:	69fb      	ldr	r3, [r7, #28]
 8006c8e:	3301      	adds	r3, #1
 8006c90:	61fb      	str	r3, [r7, #28]
		if (c == '\n') break;		/* Break on EOL */
 8006c92:	7dfb      	ldrb	r3, [r7, #23]
 8006c94:	2b0a      	cmp	r3, #10
 8006c96:	d007      	beq.n	8006ca8 <f_gets+0x5e>
	while (n < len - 1) {	/* Read characters until buffer gets filled */
 8006c98:	68bb      	ldr	r3, [r7, #8]
 8006c9a:	3b01      	subs	r3, #1
 8006c9c:	69fa      	ldr	r2, [r7, #28]
 8006c9e:	429a      	cmp	r2, r3
 8006ca0:	dbde      	blt.n	8006c60 <f_gets+0x16>
 8006ca2:	e002      	b.n	8006caa <f_gets+0x60>
		if (rc != 1) break;
 8006ca4:	bf00      	nop
 8006ca6:	e000      	b.n	8006caa <f_gets+0x60>
		if (c == '\n') break;		/* Break on EOL */
 8006ca8:	bf00      	nop
	}
	*p = 0;
 8006caa:	69bb      	ldr	r3, [r7, #24]
 8006cac:	2200      	movs	r2, #0
 8006cae:	701a      	strb	r2, [r3, #0]
	return n ? buff : 0;			/* When no data read (eof or error), return with error. */
 8006cb0:	69fb      	ldr	r3, [r7, #28]
 8006cb2:	2b00      	cmp	r3, #0
 8006cb4:	d001      	beq.n	8006cba <f_gets+0x70>
 8006cb6:	68fb      	ldr	r3, [r7, #12]
 8006cb8:	e000      	b.n	8006cbc <f_gets+0x72>
 8006cba:	2300      	movs	r3, #0
}
 8006cbc:	4618      	mov	r0, r3
 8006cbe:	3720      	adds	r7, #32
 8006cc0:	46bd      	mov	sp, r7
 8006cc2:	bd80      	pop	{r7, pc}

08006cc4 <putc_bfd>:
static
void putc_bfd (		/* Buffered write with code conversion */
	putbuff* pb,
	TCHAR c
)
{
 8006cc4:	b580      	push	{r7, lr}
 8006cc6:	b084      	sub	sp, #16
 8006cc8:	af00      	add	r7, sp, #0
 8006cca:	6078      	str	r0, [r7, #4]
 8006ccc:	460b      	mov	r3, r1
 8006cce:	70fb      	strb	r3, [r7, #3]
	UINT bw;
	int i;


	if (_USE_STRFUNC == 2 && c == '\n') {	 /* LF -> CRLF conversion */
 8006cd0:	78fb      	ldrb	r3, [r7, #3]
 8006cd2:	2b0a      	cmp	r3, #10
 8006cd4:	d103      	bne.n	8006cde <putc_bfd+0x1a>
		putc_bfd(pb, '\r');
 8006cd6:	210d      	movs	r1, #13
 8006cd8:	6878      	ldr	r0, [r7, #4]
 8006cda:	f7ff fff3 	bl	8006cc4 <putc_bfd>
	}

	i = pb->idx;		/* Write index of pb->buf[] */
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	685b      	ldr	r3, [r3, #4]
 8006ce2:	60fb      	str	r3, [r7, #12]
	if (i < 0) return;
 8006ce4:	68fb      	ldr	r3, [r7, #12]
 8006ce6:	2b00      	cmp	r3, #0
 8006ce8:	db25      	blt.n	8006d36 <putc_bfd+0x72>
	if (c >= 0x100)
		pb->buf[i++] = (BYTE)(c >> 8);
	pb->buf[i++] = (BYTE)c;
#endif
#else							/* Write a character without conversion */
	pb->buf[i++] = (BYTE)c;
 8006cea:	68fb      	ldr	r3, [r7, #12]
 8006cec:	1c5a      	adds	r2, r3, #1
 8006cee:	60fa      	str	r2, [r7, #12]
 8006cf0:	687a      	ldr	r2, [r7, #4]
 8006cf2:	4413      	add	r3, r2
 8006cf4:	78fa      	ldrb	r2, [r7, #3]
 8006cf6:	731a      	strb	r2, [r3, #12]
#endif

	if (i >= (int)(sizeof pb->buf) - 3) {	/* Write buffered characters to the file */
 8006cf8:	68fb      	ldr	r3, [r7, #12]
 8006cfa:	2b3c      	cmp	r3, #60	; 0x3c
 8006cfc:	dd12      	ble.n	8006d24 <putc_bfd+0x60>
		f_write(pb->fp, pb->buf, (UINT)i, &bw);
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	6818      	ldr	r0, [r3, #0]
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	f103 010c 	add.w	r1, r3, #12
 8006d08:	68fa      	ldr	r2, [r7, #12]
 8006d0a:	f107 0308 	add.w	r3, r7, #8
 8006d0e:	f7ff fa16 	bl	800613e <f_write>
		i = (bw == (UINT)i) ? 0 : -1;
 8006d12:	68ba      	ldr	r2, [r7, #8]
 8006d14:	68fb      	ldr	r3, [r7, #12]
 8006d16:	429a      	cmp	r2, r3
 8006d18:	d101      	bne.n	8006d1e <putc_bfd+0x5a>
 8006d1a:	2300      	movs	r3, #0
 8006d1c:	e001      	b.n	8006d22 <putc_bfd+0x5e>
 8006d1e:	f04f 33ff 	mov.w	r3, #4294967295
 8006d22:	60fb      	str	r3, [r7, #12]
	}
	pb->idx = i;
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	68fa      	ldr	r2, [r7, #12]
 8006d28:	605a      	str	r2, [r3, #4]
	pb->nchr++;
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	689b      	ldr	r3, [r3, #8]
 8006d2e:	1c5a      	adds	r2, r3, #1
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	609a      	str	r2, [r3, #8]
 8006d34:	e000      	b.n	8006d38 <putc_bfd+0x74>
	if (i < 0) return;
 8006d36:	bf00      	nop
}
 8006d38:	3710      	adds	r7, #16
 8006d3a:	46bd      	mov	sp, r7
 8006d3c:	bd80      	pop	{r7, pc}

08006d3e <putc_flush>:

static
int putc_flush (		/* Flush left characters in the buffer */
	putbuff* pb
)
{
 8006d3e:	b580      	push	{r7, lr}
 8006d40:	b084      	sub	sp, #16
 8006d42:	af00      	add	r7, sp, #0
 8006d44:	6078      	str	r0, [r7, #4]
	UINT nw;

	if (   pb->idx >= 0	/* Flush buffered characters to the file */
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	685b      	ldr	r3, [r3, #4]
 8006d4a:	2b00      	cmp	r3, #0
 8006d4c:	db16      	blt.n	8006d7c <putc_flush+0x3e>
		&& f_write(pb->fp, pb->buf, (UINT)pb->idx, &nw) == FR_OK
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	6818      	ldr	r0, [r3, #0]
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	f103 010c 	add.w	r1, r3, #12
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	685b      	ldr	r3, [r3, #4]
 8006d5c:	461a      	mov	r2, r3
 8006d5e:	f107 030c 	add.w	r3, r7, #12
 8006d62:	f7ff f9ec 	bl	800613e <f_write>
 8006d66:	4603      	mov	r3, r0
 8006d68:	2b00      	cmp	r3, #0
 8006d6a:	d107      	bne.n	8006d7c <putc_flush+0x3e>
		&& (UINT)pb->idx == nw) return pb->nchr;
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	685b      	ldr	r3, [r3, #4]
 8006d70:	68fa      	ldr	r2, [r7, #12]
 8006d72:	4293      	cmp	r3, r2
 8006d74:	d102      	bne.n	8006d7c <putc_flush+0x3e>
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	689b      	ldr	r3, [r3, #8]
 8006d7a:	e001      	b.n	8006d80 <putc_flush+0x42>
	return EOF;
 8006d7c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8006d80:	4618      	mov	r0, r3
 8006d82:	3710      	adds	r7, #16
 8006d84:	46bd      	mov	sp, r7
 8006d86:	bd80      	pop	{r7, pc}

08006d88 <putc_init>:
static
void putc_init (		/* Initialize write buffer */
	putbuff* pb,
	FIL* fp
)
{
 8006d88:	b480      	push	{r7}
 8006d8a:	b083      	sub	sp, #12
 8006d8c:	af00      	add	r7, sp, #0
 8006d8e:	6078      	str	r0, [r7, #4]
 8006d90:	6039      	str	r1, [r7, #0]
	pb->fp = fp;
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	683a      	ldr	r2, [r7, #0]
 8006d96:	601a      	str	r2, [r3, #0]
	pb->nchr = pb->idx = 0;
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	2200      	movs	r2, #0
 8006d9c:	605a      	str	r2, [r3, #4]
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	685a      	ldr	r2, [r3, #4]
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	609a      	str	r2, [r3, #8]
}
 8006da6:	bf00      	nop
 8006da8:	370c      	adds	r7, #12
 8006daa:	46bd      	mov	sp, r7
 8006dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006db0:	4770      	bx	lr

08006db2 <f_puts>:

int f_puts (
	const TCHAR* str,	/* Pointer to the string to be output */
	FIL* fp				/* Pointer to the file object */
)
{
 8006db2:	b580      	push	{r7, lr}
 8006db4:	b096      	sub	sp, #88	; 0x58
 8006db6:	af00      	add	r7, sp, #0
 8006db8:	6078      	str	r0, [r7, #4]
 8006dba:	6039      	str	r1, [r7, #0]
	putbuff pb;


	putc_init(&pb, fp);
 8006dbc:	f107 030c 	add.w	r3, r7, #12
 8006dc0:	6839      	ldr	r1, [r7, #0]
 8006dc2:	4618      	mov	r0, r3
 8006dc4:	f7ff ffe0 	bl	8006d88 <putc_init>
	while (*str) putc_bfd(&pb, *str++);		/* Put the string */
 8006dc8:	e009      	b.n	8006dde <f_puts+0x2c>
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	1c5a      	adds	r2, r3, #1
 8006dce:	607a      	str	r2, [r7, #4]
 8006dd0:	781a      	ldrb	r2, [r3, #0]
 8006dd2:	f107 030c 	add.w	r3, r7, #12
 8006dd6:	4611      	mov	r1, r2
 8006dd8:	4618      	mov	r0, r3
 8006dda:	f7ff ff73 	bl	8006cc4 <putc_bfd>
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	781b      	ldrb	r3, [r3, #0]
 8006de2:	2b00      	cmp	r3, #0
 8006de4:	d1f1      	bne.n	8006dca <f_puts+0x18>
	return putc_flush(&pb);
 8006de6:	f107 030c 	add.w	r3, r7, #12
 8006dea:	4618      	mov	r0, r3
 8006dec:	f7ff ffa7 	bl	8006d3e <putc_flush>
 8006df0:	4603      	mov	r3, r0
}
 8006df2:	4618      	mov	r0, r3
 8006df4:	3758      	adds	r7, #88	; 0x58
 8006df6:	46bd      	mov	sp, r7
 8006df8:	bd80      	pop	{r7, pc}
	...

08006dfc <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8006dfc:	b480      	push	{r7}
 8006dfe:	b087      	sub	sp, #28
 8006e00:	af00      	add	r7, sp, #0
 8006e02:	60f8      	str	r0, [r7, #12]
 8006e04:	60b9      	str	r1, [r7, #8]
 8006e06:	4613      	mov	r3, r2
 8006e08:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8006e0a:	2301      	movs	r3, #1
 8006e0c:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8006e0e:	2300      	movs	r3, #0
 8006e10:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8006e12:	4b1f      	ldr	r3, [pc, #124]	; (8006e90 <FATFS_LinkDriverEx+0x94>)
 8006e14:	7a5b      	ldrb	r3, [r3, #9]
 8006e16:	b2db      	uxtb	r3, r3
 8006e18:	2b00      	cmp	r3, #0
 8006e1a:	d131      	bne.n	8006e80 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8006e1c:	4b1c      	ldr	r3, [pc, #112]	; (8006e90 <FATFS_LinkDriverEx+0x94>)
 8006e1e:	7a5b      	ldrb	r3, [r3, #9]
 8006e20:	b2db      	uxtb	r3, r3
 8006e22:	461a      	mov	r2, r3
 8006e24:	4b1a      	ldr	r3, [pc, #104]	; (8006e90 <FATFS_LinkDriverEx+0x94>)
 8006e26:	2100      	movs	r1, #0
 8006e28:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8006e2a:	4b19      	ldr	r3, [pc, #100]	; (8006e90 <FATFS_LinkDriverEx+0x94>)
 8006e2c:	7a5b      	ldrb	r3, [r3, #9]
 8006e2e:	b2db      	uxtb	r3, r3
 8006e30:	4a17      	ldr	r2, [pc, #92]	; (8006e90 <FATFS_LinkDriverEx+0x94>)
 8006e32:	009b      	lsls	r3, r3, #2
 8006e34:	4413      	add	r3, r2
 8006e36:	68fa      	ldr	r2, [r7, #12]
 8006e38:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8006e3a:	4b15      	ldr	r3, [pc, #84]	; (8006e90 <FATFS_LinkDriverEx+0x94>)
 8006e3c:	7a5b      	ldrb	r3, [r3, #9]
 8006e3e:	b2db      	uxtb	r3, r3
 8006e40:	461a      	mov	r2, r3
 8006e42:	4b13      	ldr	r3, [pc, #76]	; (8006e90 <FATFS_LinkDriverEx+0x94>)
 8006e44:	4413      	add	r3, r2
 8006e46:	79fa      	ldrb	r2, [r7, #7]
 8006e48:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8006e4a:	4b11      	ldr	r3, [pc, #68]	; (8006e90 <FATFS_LinkDriverEx+0x94>)
 8006e4c:	7a5b      	ldrb	r3, [r3, #9]
 8006e4e:	b2db      	uxtb	r3, r3
 8006e50:	1c5a      	adds	r2, r3, #1
 8006e52:	b2d1      	uxtb	r1, r2
 8006e54:	4a0e      	ldr	r2, [pc, #56]	; (8006e90 <FATFS_LinkDriverEx+0x94>)
 8006e56:	7251      	strb	r1, [r2, #9]
 8006e58:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8006e5a:	7dbb      	ldrb	r3, [r7, #22]
 8006e5c:	3330      	adds	r3, #48	; 0x30
 8006e5e:	b2da      	uxtb	r2, r3
 8006e60:	68bb      	ldr	r3, [r7, #8]
 8006e62:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8006e64:	68bb      	ldr	r3, [r7, #8]
 8006e66:	3301      	adds	r3, #1
 8006e68:	223a      	movs	r2, #58	; 0x3a
 8006e6a:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8006e6c:	68bb      	ldr	r3, [r7, #8]
 8006e6e:	3302      	adds	r3, #2
 8006e70:	222f      	movs	r2, #47	; 0x2f
 8006e72:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8006e74:	68bb      	ldr	r3, [r7, #8]
 8006e76:	3303      	adds	r3, #3
 8006e78:	2200      	movs	r2, #0
 8006e7a:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8006e7c:	2300      	movs	r3, #0
 8006e7e:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8006e80:	7dfb      	ldrb	r3, [r7, #23]
}
 8006e82:	4618      	mov	r0, r3
 8006e84:	371c      	adds	r7, #28
 8006e86:	46bd      	mov	sp, r7
 8006e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e8c:	4770      	bx	lr
 8006e8e:	bf00      	nop
 8006e90:	2000067c 	.word	0x2000067c

08006e94 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8006e94:	b580      	push	{r7, lr}
 8006e96:	b082      	sub	sp, #8
 8006e98:	af00      	add	r7, sp, #0
 8006e9a:	6078      	str	r0, [r7, #4]
 8006e9c:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8006e9e:	2200      	movs	r2, #0
 8006ea0:	6839      	ldr	r1, [r7, #0]
 8006ea2:	6878      	ldr	r0, [r7, #4]
 8006ea4:	f7ff ffaa 	bl	8006dfc <FATFS_LinkDriverEx>
 8006ea8:	4603      	mov	r3, r0
}
 8006eaa:	4618      	mov	r0, r3
 8006eac:	3708      	adds	r7, #8
 8006eae:	46bd      	mov	sp, r7
 8006eb0:	bd80      	pop	{r7, pc}
	...

08006eb4 <__errno>:
 8006eb4:	4b01      	ldr	r3, [pc, #4]	; (8006ebc <__errno+0x8>)
 8006eb6:	6818      	ldr	r0, [r3, #0]
 8006eb8:	4770      	bx	lr
 8006eba:	bf00      	nop
 8006ebc:	20000024 	.word	0x20000024

08006ec0 <__libc_init_array>:
 8006ec0:	b570      	push	{r4, r5, r6, lr}
 8006ec2:	4d0d      	ldr	r5, [pc, #52]	; (8006ef8 <__libc_init_array+0x38>)
 8006ec4:	4c0d      	ldr	r4, [pc, #52]	; (8006efc <__libc_init_array+0x3c>)
 8006ec6:	1b64      	subs	r4, r4, r5
 8006ec8:	10a4      	asrs	r4, r4, #2
 8006eca:	2600      	movs	r6, #0
 8006ecc:	42a6      	cmp	r6, r4
 8006ece:	d109      	bne.n	8006ee4 <__libc_init_array+0x24>
 8006ed0:	4d0b      	ldr	r5, [pc, #44]	; (8006f00 <__libc_init_array+0x40>)
 8006ed2:	4c0c      	ldr	r4, [pc, #48]	; (8006f04 <__libc_init_array+0x44>)
 8006ed4:	f000 fc8e 	bl	80077f4 <_init>
 8006ed8:	1b64      	subs	r4, r4, r5
 8006eda:	10a4      	asrs	r4, r4, #2
 8006edc:	2600      	movs	r6, #0
 8006ede:	42a6      	cmp	r6, r4
 8006ee0:	d105      	bne.n	8006eee <__libc_init_array+0x2e>
 8006ee2:	bd70      	pop	{r4, r5, r6, pc}
 8006ee4:	f855 3b04 	ldr.w	r3, [r5], #4
 8006ee8:	4798      	blx	r3
 8006eea:	3601      	adds	r6, #1
 8006eec:	e7ee      	b.n	8006ecc <__libc_init_array+0xc>
 8006eee:	f855 3b04 	ldr.w	r3, [r5], #4
 8006ef2:	4798      	blx	r3
 8006ef4:	3601      	adds	r6, #1
 8006ef6:	e7f2      	b.n	8006ede <__libc_init_array+0x1e>
 8006ef8:	08007c30 	.word	0x08007c30
 8006efc:	08007c30 	.word	0x08007c30
 8006f00:	08007c30 	.word	0x08007c30
 8006f04:	08007c34 	.word	0x08007c34

08006f08 <memcpy>:
 8006f08:	440a      	add	r2, r1
 8006f0a:	4291      	cmp	r1, r2
 8006f0c:	f100 33ff 	add.w	r3, r0, #4294967295
 8006f10:	d100      	bne.n	8006f14 <memcpy+0xc>
 8006f12:	4770      	bx	lr
 8006f14:	b510      	push	{r4, lr}
 8006f16:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006f1a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006f1e:	4291      	cmp	r1, r2
 8006f20:	d1f9      	bne.n	8006f16 <memcpy+0xe>
 8006f22:	bd10      	pop	{r4, pc}

08006f24 <memset>:
 8006f24:	4402      	add	r2, r0
 8006f26:	4603      	mov	r3, r0
 8006f28:	4293      	cmp	r3, r2
 8006f2a:	d100      	bne.n	8006f2e <memset+0xa>
 8006f2c:	4770      	bx	lr
 8006f2e:	f803 1b01 	strb.w	r1, [r3], #1
 8006f32:	e7f9      	b.n	8006f28 <memset+0x4>

08006f34 <siprintf>:
 8006f34:	b40e      	push	{r1, r2, r3}
 8006f36:	b500      	push	{lr}
 8006f38:	b09c      	sub	sp, #112	; 0x70
 8006f3a:	ab1d      	add	r3, sp, #116	; 0x74
 8006f3c:	9002      	str	r0, [sp, #8]
 8006f3e:	9006      	str	r0, [sp, #24]
 8006f40:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006f44:	4809      	ldr	r0, [pc, #36]	; (8006f6c <siprintf+0x38>)
 8006f46:	9107      	str	r1, [sp, #28]
 8006f48:	9104      	str	r1, [sp, #16]
 8006f4a:	4909      	ldr	r1, [pc, #36]	; (8006f70 <siprintf+0x3c>)
 8006f4c:	f853 2b04 	ldr.w	r2, [r3], #4
 8006f50:	9105      	str	r1, [sp, #20]
 8006f52:	6800      	ldr	r0, [r0, #0]
 8006f54:	9301      	str	r3, [sp, #4]
 8006f56:	a902      	add	r1, sp, #8
 8006f58:	f000 f868 	bl	800702c <_svfiprintf_r>
 8006f5c:	9b02      	ldr	r3, [sp, #8]
 8006f5e:	2200      	movs	r2, #0
 8006f60:	701a      	strb	r2, [r3, #0]
 8006f62:	b01c      	add	sp, #112	; 0x70
 8006f64:	f85d eb04 	ldr.w	lr, [sp], #4
 8006f68:	b003      	add	sp, #12
 8006f6a:	4770      	bx	lr
 8006f6c:	20000024 	.word	0x20000024
 8006f70:	ffff0208 	.word	0xffff0208

08006f74 <__ssputs_r>:
 8006f74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006f78:	688e      	ldr	r6, [r1, #8]
 8006f7a:	429e      	cmp	r6, r3
 8006f7c:	4682      	mov	sl, r0
 8006f7e:	460c      	mov	r4, r1
 8006f80:	4690      	mov	r8, r2
 8006f82:	461f      	mov	r7, r3
 8006f84:	d838      	bhi.n	8006ff8 <__ssputs_r+0x84>
 8006f86:	898a      	ldrh	r2, [r1, #12]
 8006f88:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006f8c:	d032      	beq.n	8006ff4 <__ssputs_r+0x80>
 8006f8e:	6825      	ldr	r5, [r4, #0]
 8006f90:	6909      	ldr	r1, [r1, #16]
 8006f92:	eba5 0901 	sub.w	r9, r5, r1
 8006f96:	6965      	ldr	r5, [r4, #20]
 8006f98:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006f9c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006fa0:	3301      	adds	r3, #1
 8006fa2:	444b      	add	r3, r9
 8006fa4:	106d      	asrs	r5, r5, #1
 8006fa6:	429d      	cmp	r5, r3
 8006fa8:	bf38      	it	cc
 8006faa:	461d      	movcc	r5, r3
 8006fac:	0553      	lsls	r3, r2, #21
 8006fae:	d531      	bpl.n	8007014 <__ssputs_r+0xa0>
 8006fb0:	4629      	mov	r1, r5
 8006fb2:	f000 fb55 	bl	8007660 <_malloc_r>
 8006fb6:	4606      	mov	r6, r0
 8006fb8:	b950      	cbnz	r0, 8006fd0 <__ssputs_r+0x5c>
 8006fba:	230c      	movs	r3, #12
 8006fbc:	f8ca 3000 	str.w	r3, [sl]
 8006fc0:	89a3      	ldrh	r3, [r4, #12]
 8006fc2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006fc6:	81a3      	strh	r3, [r4, #12]
 8006fc8:	f04f 30ff 	mov.w	r0, #4294967295
 8006fcc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006fd0:	6921      	ldr	r1, [r4, #16]
 8006fd2:	464a      	mov	r2, r9
 8006fd4:	f7ff ff98 	bl	8006f08 <memcpy>
 8006fd8:	89a3      	ldrh	r3, [r4, #12]
 8006fda:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8006fde:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006fe2:	81a3      	strh	r3, [r4, #12]
 8006fe4:	6126      	str	r6, [r4, #16]
 8006fe6:	6165      	str	r5, [r4, #20]
 8006fe8:	444e      	add	r6, r9
 8006fea:	eba5 0509 	sub.w	r5, r5, r9
 8006fee:	6026      	str	r6, [r4, #0]
 8006ff0:	60a5      	str	r5, [r4, #8]
 8006ff2:	463e      	mov	r6, r7
 8006ff4:	42be      	cmp	r6, r7
 8006ff6:	d900      	bls.n	8006ffa <__ssputs_r+0x86>
 8006ff8:	463e      	mov	r6, r7
 8006ffa:	6820      	ldr	r0, [r4, #0]
 8006ffc:	4632      	mov	r2, r6
 8006ffe:	4641      	mov	r1, r8
 8007000:	f000 faa8 	bl	8007554 <memmove>
 8007004:	68a3      	ldr	r3, [r4, #8]
 8007006:	1b9b      	subs	r3, r3, r6
 8007008:	60a3      	str	r3, [r4, #8]
 800700a:	6823      	ldr	r3, [r4, #0]
 800700c:	4433      	add	r3, r6
 800700e:	6023      	str	r3, [r4, #0]
 8007010:	2000      	movs	r0, #0
 8007012:	e7db      	b.n	8006fcc <__ssputs_r+0x58>
 8007014:	462a      	mov	r2, r5
 8007016:	f000 fb97 	bl	8007748 <_realloc_r>
 800701a:	4606      	mov	r6, r0
 800701c:	2800      	cmp	r0, #0
 800701e:	d1e1      	bne.n	8006fe4 <__ssputs_r+0x70>
 8007020:	6921      	ldr	r1, [r4, #16]
 8007022:	4650      	mov	r0, sl
 8007024:	f000 fab0 	bl	8007588 <_free_r>
 8007028:	e7c7      	b.n	8006fba <__ssputs_r+0x46>
	...

0800702c <_svfiprintf_r>:
 800702c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007030:	4698      	mov	r8, r3
 8007032:	898b      	ldrh	r3, [r1, #12]
 8007034:	061b      	lsls	r3, r3, #24
 8007036:	b09d      	sub	sp, #116	; 0x74
 8007038:	4607      	mov	r7, r0
 800703a:	460d      	mov	r5, r1
 800703c:	4614      	mov	r4, r2
 800703e:	d50e      	bpl.n	800705e <_svfiprintf_r+0x32>
 8007040:	690b      	ldr	r3, [r1, #16]
 8007042:	b963      	cbnz	r3, 800705e <_svfiprintf_r+0x32>
 8007044:	2140      	movs	r1, #64	; 0x40
 8007046:	f000 fb0b 	bl	8007660 <_malloc_r>
 800704a:	6028      	str	r0, [r5, #0]
 800704c:	6128      	str	r0, [r5, #16]
 800704e:	b920      	cbnz	r0, 800705a <_svfiprintf_r+0x2e>
 8007050:	230c      	movs	r3, #12
 8007052:	603b      	str	r3, [r7, #0]
 8007054:	f04f 30ff 	mov.w	r0, #4294967295
 8007058:	e0d1      	b.n	80071fe <_svfiprintf_r+0x1d2>
 800705a:	2340      	movs	r3, #64	; 0x40
 800705c:	616b      	str	r3, [r5, #20]
 800705e:	2300      	movs	r3, #0
 8007060:	9309      	str	r3, [sp, #36]	; 0x24
 8007062:	2320      	movs	r3, #32
 8007064:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007068:	f8cd 800c 	str.w	r8, [sp, #12]
 800706c:	2330      	movs	r3, #48	; 0x30
 800706e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8007218 <_svfiprintf_r+0x1ec>
 8007072:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007076:	f04f 0901 	mov.w	r9, #1
 800707a:	4623      	mov	r3, r4
 800707c:	469a      	mov	sl, r3
 800707e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007082:	b10a      	cbz	r2, 8007088 <_svfiprintf_r+0x5c>
 8007084:	2a25      	cmp	r2, #37	; 0x25
 8007086:	d1f9      	bne.n	800707c <_svfiprintf_r+0x50>
 8007088:	ebba 0b04 	subs.w	fp, sl, r4
 800708c:	d00b      	beq.n	80070a6 <_svfiprintf_r+0x7a>
 800708e:	465b      	mov	r3, fp
 8007090:	4622      	mov	r2, r4
 8007092:	4629      	mov	r1, r5
 8007094:	4638      	mov	r0, r7
 8007096:	f7ff ff6d 	bl	8006f74 <__ssputs_r>
 800709a:	3001      	adds	r0, #1
 800709c:	f000 80aa 	beq.w	80071f4 <_svfiprintf_r+0x1c8>
 80070a0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80070a2:	445a      	add	r2, fp
 80070a4:	9209      	str	r2, [sp, #36]	; 0x24
 80070a6:	f89a 3000 	ldrb.w	r3, [sl]
 80070aa:	2b00      	cmp	r3, #0
 80070ac:	f000 80a2 	beq.w	80071f4 <_svfiprintf_r+0x1c8>
 80070b0:	2300      	movs	r3, #0
 80070b2:	f04f 32ff 	mov.w	r2, #4294967295
 80070b6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80070ba:	f10a 0a01 	add.w	sl, sl, #1
 80070be:	9304      	str	r3, [sp, #16]
 80070c0:	9307      	str	r3, [sp, #28]
 80070c2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80070c6:	931a      	str	r3, [sp, #104]	; 0x68
 80070c8:	4654      	mov	r4, sl
 80070ca:	2205      	movs	r2, #5
 80070cc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80070d0:	4851      	ldr	r0, [pc, #324]	; (8007218 <_svfiprintf_r+0x1ec>)
 80070d2:	f7f9 f88d 	bl	80001f0 <memchr>
 80070d6:	9a04      	ldr	r2, [sp, #16]
 80070d8:	b9d8      	cbnz	r0, 8007112 <_svfiprintf_r+0xe6>
 80070da:	06d0      	lsls	r0, r2, #27
 80070dc:	bf44      	itt	mi
 80070de:	2320      	movmi	r3, #32
 80070e0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80070e4:	0711      	lsls	r1, r2, #28
 80070e6:	bf44      	itt	mi
 80070e8:	232b      	movmi	r3, #43	; 0x2b
 80070ea:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80070ee:	f89a 3000 	ldrb.w	r3, [sl]
 80070f2:	2b2a      	cmp	r3, #42	; 0x2a
 80070f4:	d015      	beq.n	8007122 <_svfiprintf_r+0xf6>
 80070f6:	9a07      	ldr	r2, [sp, #28]
 80070f8:	4654      	mov	r4, sl
 80070fa:	2000      	movs	r0, #0
 80070fc:	f04f 0c0a 	mov.w	ip, #10
 8007100:	4621      	mov	r1, r4
 8007102:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007106:	3b30      	subs	r3, #48	; 0x30
 8007108:	2b09      	cmp	r3, #9
 800710a:	d94e      	bls.n	80071aa <_svfiprintf_r+0x17e>
 800710c:	b1b0      	cbz	r0, 800713c <_svfiprintf_r+0x110>
 800710e:	9207      	str	r2, [sp, #28]
 8007110:	e014      	b.n	800713c <_svfiprintf_r+0x110>
 8007112:	eba0 0308 	sub.w	r3, r0, r8
 8007116:	fa09 f303 	lsl.w	r3, r9, r3
 800711a:	4313      	orrs	r3, r2
 800711c:	9304      	str	r3, [sp, #16]
 800711e:	46a2      	mov	sl, r4
 8007120:	e7d2      	b.n	80070c8 <_svfiprintf_r+0x9c>
 8007122:	9b03      	ldr	r3, [sp, #12]
 8007124:	1d19      	adds	r1, r3, #4
 8007126:	681b      	ldr	r3, [r3, #0]
 8007128:	9103      	str	r1, [sp, #12]
 800712a:	2b00      	cmp	r3, #0
 800712c:	bfbb      	ittet	lt
 800712e:	425b      	neglt	r3, r3
 8007130:	f042 0202 	orrlt.w	r2, r2, #2
 8007134:	9307      	strge	r3, [sp, #28]
 8007136:	9307      	strlt	r3, [sp, #28]
 8007138:	bfb8      	it	lt
 800713a:	9204      	strlt	r2, [sp, #16]
 800713c:	7823      	ldrb	r3, [r4, #0]
 800713e:	2b2e      	cmp	r3, #46	; 0x2e
 8007140:	d10c      	bne.n	800715c <_svfiprintf_r+0x130>
 8007142:	7863      	ldrb	r3, [r4, #1]
 8007144:	2b2a      	cmp	r3, #42	; 0x2a
 8007146:	d135      	bne.n	80071b4 <_svfiprintf_r+0x188>
 8007148:	9b03      	ldr	r3, [sp, #12]
 800714a:	1d1a      	adds	r2, r3, #4
 800714c:	681b      	ldr	r3, [r3, #0]
 800714e:	9203      	str	r2, [sp, #12]
 8007150:	2b00      	cmp	r3, #0
 8007152:	bfb8      	it	lt
 8007154:	f04f 33ff 	movlt.w	r3, #4294967295
 8007158:	3402      	adds	r4, #2
 800715a:	9305      	str	r3, [sp, #20]
 800715c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8007228 <_svfiprintf_r+0x1fc>
 8007160:	7821      	ldrb	r1, [r4, #0]
 8007162:	2203      	movs	r2, #3
 8007164:	4650      	mov	r0, sl
 8007166:	f7f9 f843 	bl	80001f0 <memchr>
 800716a:	b140      	cbz	r0, 800717e <_svfiprintf_r+0x152>
 800716c:	2340      	movs	r3, #64	; 0x40
 800716e:	eba0 000a 	sub.w	r0, r0, sl
 8007172:	fa03 f000 	lsl.w	r0, r3, r0
 8007176:	9b04      	ldr	r3, [sp, #16]
 8007178:	4303      	orrs	r3, r0
 800717a:	3401      	adds	r4, #1
 800717c:	9304      	str	r3, [sp, #16]
 800717e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007182:	4826      	ldr	r0, [pc, #152]	; (800721c <_svfiprintf_r+0x1f0>)
 8007184:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007188:	2206      	movs	r2, #6
 800718a:	f7f9 f831 	bl	80001f0 <memchr>
 800718e:	2800      	cmp	r0, #0
 8007190:	d038      	beq.n	8007204 <_svfiprintf_r+0x1d8>
 8007192:	4b23      	ldr	r3, [pc, #140]	; (8007220 <_svfiprintf_r+0x1f4>)
 8007194:	bb1b      	cbnz	r3, 80071de <_svfiprintf_r+0x1b2>
 8007196:	9b03      	ldr	r3, [sp, #12]
 8007198:	3307      	adds	r3, #7
 800719a:	f023 0307 	bic.w	r3, r3, #7
 800719e:	3308      	adds	r3, #8
 80071a0:	9303      	str	r3, [sp, #12]
 80071a2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80071a4:	4433      	add	r3, r6
 80071a6:	9309      	str	r3, [sp, #36]	; 0x24
 80071a8:	e767      	b.n	800707a <_svfiprintf_r+0x4e>
 80071aa:	fb0c 3202 	mla	r2, ip, r2, r3
 80071ae:	460c      	mov	r4, r1
 80071b0:	2001      	movs	r0, #1
 80071b2:	e7a5      	b.n	8007100 <_svfiprintf_r+0xd4>
 80071b4:	2300      	movs	r3, #0
 80071b6:	3401      	adds	r4, #1
 80071b8:	9305      	str	r3, [sp, #20]
 80071ba:	4619      	mov	r1, r3
 80071bc:	f04f 0c0a 	mov.w	ip, #10
 80071c0:	4620      	mov	r0, r4
 80071c2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80071c6:	3a30      	subs	r2, #48	; 0x30
 80071c8:	2a09      	cmp	r2, #9
 80071ca:	d903      	bls.n	80071d4 <_svfiprintf_r+0x1a8>
 80071cc:	2b00      	cmp	r3, #0
 80071ce:	d0c5      	beq.n	800715c <_svfiprintf_r+0x130>
 80071d0:	9105      	str	r1, [sp, #20]
 80071d2:	e7c3      	b.n	800715c <_svfiprintf_r+0x130>
 80071d4:	fb0c 2101 	mla	r1, ip, r1, r2
 80071d8:	4604      	mov	r4, r0
 80071da:	2301      	movs	r3, #1
 80071dc:	e7f0      	b.n	80071c0 <_svfiprintf_r+0x194>
 80071de:	ab03      	add	r3, sp, #12
 80071e0:	9300      	str	r3, [sp, #0]
 80071e2:	462a      	mov	r2, r5
 80071e4:	4b0f      	ldr	r3, [pc, #60]	; (8007224 <_svfiprintf_r+0x1f8>)
 80071e6:	a904      	add	r1, sp, #16
 80071e8:	4638      	mov	r0, r7
 80071ea:	f3af 8000 	nop.w
 80071ee:	1c42      	adds	r2, r0, #1
 80071f0:	4606      	mov	r6, r0
 80071f2:	d1d6      	bne.n	80071a2 <_svfiprintf_r+0x176>
 80071f4:	89ab      	ldrh	r3, [r5, #12]
 80071f6:	065b      	lsls	r3, r3, #25
 80071f8:	f53f af2c 	bmi.w	8007054 <_svfiprintf_r+0x28>
 80071fc:	9809      	ldr	r0, [sp, #36]	; 0x24
 80071fe:	b01d      	add	sp, #116	; 0x74
 8007200:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007204:	ab03      	add	r3, sp, #12
 8007206:	9300      	str	r3, [sp, #0]
 8007208:	462a      	mov	r2, r5
 800720a:	4b06      	ldr	r3, [pc, #24]	; (8007224 <_svfiprintf_r+0x1f8>)
 800720c:	a904      	add	r1, sp, #16
 800720e:	4638      	mov	r0, r7
 8007210:	f000 f87a 	bl	8007308 <_printf_i>
 8007214:	e7eb      	b.n	80071ee <_svfiprintf_r+0x1c2>
 8007216:	bf00      	nop
 8007218:	08007bf4 	.word	0x08007bf4
 800721c:	08007bfe 	.word	0x08007bfe
 8007220:	00000000 	.word	0x00000000
 8007224:	08006f75 	.word	0x08006f75
 8007228:	08007bfa 	.word	0x08007bfa

0800722c <_printf_common>:
 800722c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007230:	4616      	mov	r6, r2
 8007232:	4699      	mov	r9, r3
 8007234:	688a      	ldr	r2, [r1, #8]
 8007236:	690b      	ldr	r3, [r1, #16]
 8007238:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800723c:	4293      	cmp	r3, r2
 800723e:	bfb8      	it	lt
 8007240:	4613      	movlt	r3, r2
 8007242:	6033      	str	r3, [r6, #0]
 8007244:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007248:	4607      	mov	r7, r0
 800724a:	460c      	mov	r4, r1
 800724c:	b10a      	cbz	r2, 8007252 <_printf_common+0x26>
 800724e:	3301      	adds	r3, #1
 8007250:	6033      	str	r3, [r6, #0]
 8007252:	6823      	ldr	r3, [r4, #0]
 8007254:	0699      	lsls	r1, r3, #26
 8007256:	bf42      	ittt	mi
 8007258:	6833      	ldrmi	r3, [r6, #0]
 800725a:	3302      	addmi	r3, #2
 800725c:	6033      	strmi	r3, [r6, #0]
 800725e:	6825      	ldr	r5, [r4, #0]
 8007260:	f015 0506 	ands.w	r5, r5, #6
 8007264:	d106      	bne.n	8007274 <_printf_common+0x48>
 8007266:	f104 0a19 	add.w	sl, r4, #25
 800726a:	68e3      	ldr	r3, [r4, #12]
 800726c:	6832      	ldr	r2, [r6, #0]
 800726e:	1a9b      	subs	r3, r3, r2
 8007270:	42ab      	cmp	r3, r5
 8007272:	dc26      	bgt.n	80072c2 <_printf_common+0x96>
 8007274:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007278:	1e13      	subs	r3, r2, #0
 800727a:	6822      	ldr	r2, [r4, #0]
 800727c:	bf18      	it	ne
 800727e:	2301      	movne	r3, #1
 8007280:	0692      	lsls	r2, r2, #26
 8007282:	d42b      	bmi.n	80072dc <_printf_common+0xb0>
 8007284:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007288:	4649      	mov	r1, r9
 800728a:	4638      	mov	r0, r7
 800728c:	47c0      	blx	r8
 800728e:	3001      	adds	r0, #1
 8007290:	d01e      	beq.n	80072d0 <_printf_common+0xa4>
 8007292:	6823      	ldr	r3, [r4, #0]
 8007294:	68e5      	ldr	r5, [r4, #12]
 8007296:	6832      	ldr	r2, [r6, #0]
 8007298:	f003 0306 	and.w	r3, r3, #6
 800729c:	2b04      	cmp	r3, #4
 800729e:	bf08      	it	eq
 80072a0:	1aad      	subeq	r5, r5, r2
 80072a2:	68a3      	ldr	r3, [r4, #8]
 80072a4:	6922      	ldr	r2, [r4, #16]
 80072a6:	bf0c      	ite	eq
 80072a8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80072ac:	2500      	movne	r5, #0
 80072ae:	4293      	cmp	r3, r2
 80072b0:	bfc4      	itt	gt
 80072b2:	1a9b      	subgt	r3, r3, r2
 80072b4:	18ed      	addgt	r5, r5, r3
 80072b6:	2600      	movs	r6, #0
 80072b8:	341a      	adds	r4, #26
 80072ba:	42b5      	cmp	r5, r6
 80072bc:	d11a      	bne.n	80072f4 <_printf_common+0xc8>
 80072be:	2000      	movs	r0, #0
 80072c0:	e008      	b.n	80072d4 <_printf_common+0xa8>
 80072c2:	2301      	movs	r3, #1
 80072c4:	4652      	mov	r2, sl
 80072c6:	4649      	mov	r1, r9
 80072c8:	4638      	mov	r0, r7
 80072ca:	47c0      	blx	r8
 80072cc:	3001      	adds	r0, #1
 80072ce:	d103      	bne.n	80072d8 <_printf_common+0xac>
 80072d0:	f04f 30ff 	mov.w	r0, #4294967295
 80072d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80072d8:	3501      	adds	r5, #1
 80072da:	e7c6      	b.n	800726a <_printf_common+0x3e>
 80072dc:	18e1      	adds	r1, r4, r3
 80072de:	1c5a      	adds	r2, r3, #1
 80072e0:	2030      	movs	r0, #48	; 0x30
 80072e2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80072e6:	4422      	add	r2, r4
 80072e8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80072ec:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80072f0:	3302      	adds	r3, #2
 80072f2:	e7c7      	b.n	8007284 <_printf_common+0x58>
 80072f4:	2301      	movs	r3, #1
 80072f6:	4622      	mov	r2, r4
 80072f8:	4649      	mov	r1, r9
 80072fa:	4638      	mov	r0, r7
 80072fc:	47c0      	blx	r8
 80072fe:	3001      	adds	r0, #1
 8007300:	d0e6      	beq.n	80072d0 <_printf_common+0xa4>
 8007302:	3601      	adds	r6, #1
 8007304:	e7d9      	b.n	80072ba <_printf_common+0x8e>
	...

08007308 <_printf_i>:
 8007308:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800730c:	7e0f      	ldrb	r7, [r1, #24]
 800730e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007310:	2f78      	cmp	r7, #120	; 0x78
 8007312:	4691      	mov	r9, r2
 8007314:	4680      	mov	r8, r0
 8007316:	460c      	mov	r4, r1
 8007318:	469a      	mov	sl, r3
 800731a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800731e:	d807      	bhi.n	8007330 <_printf_i+0x28>
 8007320:	2f62      	cmp	r7, #98	; 0x62
 8007322:	d80a      	bhi.n	800733a <_printf_i+0x32>
 8007324:	2f00      	cmp	r7, #0
 8007326:	f000 80d8 	beq.w	80074da <_printf_i+0x1d2>
 800732a:	2f58      	cmp	r7, #88	; 0x58
 800732c:	f000 80a3 	beq.w	8007476 <_printf_i+0x16e>
 8007330:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007334:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007338:	e03a      	b.n	80073b0 <_printf_i+0xa8>
 800733a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800733e:	2b15      	cmp	r3, #21
 8007340:	d8f6      	bhi.n	8007330 <_printf_i+0x28>
 8007342:	a101      	add	r1, pc, #4	; (adr r1, 8007348 <_printf_i+0x40>)
 8007344:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007348:	080073a1 	.word	0x080073a1
 800734c:	080073b5 	.word	0x080073b5
 8007350:	08007331 	.word	0x08007331
 8007354:	08007331 	.word	0x08007331
 8007358:	08007331 	.word	0x08007331
 800735c:	08007331 	.word	0x08007331
 8007360:	080073b5 	.word	0x080073b5
 8007364:	08007331 	.word	0x08007331
 8007368:	08007331 	.word	0x08007331
 800736c:	08007331 	.word	0x08007331
 8007370:	08007331 	.word	0x08007331
 8007374:	080074c1 	.word	0x080074c1
 8007378:	080073e5 	.word	0x080073e5
 800737c:	080074a3 	.word	0x080074a3
 8007380:	08007331 	.word	0x08007331
 8007384:	08007331 	.word	0x08007331
 8007388:	080074e3 	.word	0x080074e3
 800738c:	08007331 	.word	0x08007331
 8007390:	080073e5 	.word	0x080073e5
 8007394:	08007331 	.word	0x08007331
 8007398:	08007331 	.word	0x08007331
 800739c:	080074ab 	.word	0x080074ab
 80073a0:	682b      	ldr	r3, [r5, #0]
 80073a2:	1d1a      	adds	r2, r3, #4
 80073a4:	681b      	ldr	r3, [r3, #0]
 80073a6:	602a      	str	r2, [r5, #0]
 80073a8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80073ac:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80073b0:	2301      	movs	r3, #1
 80073b2:	e0a3      	b.n	80074fc <_printf_i+0x1f4>
 80073b4:	6820      	ldr	r0, [r4, #0]
 80073b6:	6829      	ldr	r1, [r5, #0]
 80073b8:	0606      	lsls	r6, r0, #24
 80073ba:	f101 0304 	add.w	r3, r1, #4
 80073be:	d50a      	bpl.n	80073d6 <_printf_i+0xce>
 80073c0:	680e      	ldr	r6, [r1, #0]
 80073c2:	602b      	str	r3, [r5, #0]
 80073c4:	2e00      	cmp	r6, #0
 80073c6:	da03      	bge.n	80073d0 <_printf_i+0xc8>
 80073c8:	232d      	movs	r3, #45	; 0x2d
 80073ca:	4276      	negs	r6, r6
 80073cc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80073d0:	485e      	ldr	r0, [pc, #376]	; (800754c <_printf_i+0x244>)
 80073d2:	230a      	movs	r3, #10
 80073d4:	e019      	b.n	800740a <_printf_i+0x102>
 80073d6:	680e      	ldr	r6, [r1, #0]
 80073d8:	602b      	str	r3, [r5, #0]
 80073da:	f010 0f40 	tst.w	r0, #64	; 0x40
 80073de:	bf18      	it	ne
 80073e0:	b236      	sxthne	r6, r6
 80073e2:	e7ef      	b.n	80073c4 <_printf_i+0xbc>
 80073e4:	682b      	ldr	r3, [r5, #0]
 80073e6:	6820      	ldr	r0, [r4, #0]
 80073e8:	1d19      	adds	r1, r3, #4
 80073ea:	6029      	str	r1, [r5, #0]
 80073ec:	0601      	lsls	r1, r0, #24
 80073ee:	d501      	bpl.n	80073f4 <_printf_i+0xec>
 80073f0:	681e      	ldr	r6, [r3, #0]
 80073f2:	e002      	b.n	80073fa <_printf_i+0xf2>
 80073f4:	0646      	lsls	r6, r0, #25
 80073f6:	d5fb      	bpl.n	80073f0 <_printf_i+0xe8>
 80073f8:	881e      	ldrh	r6, [r3, #0]
 80073fa:	4854      	ldr	r0, [pc, #336]	; (800754c <_printf_i+0x244>)
 80073fc:	2f6f      	cmp	r7, #111	; 0x6f
 80073fe:	bf0c      	ite	eq
 8007400:	2308      	moveq	r3, #8
 8007402:	230a      	movne	r3, #10
 8007404:	2100      	movs	r1, #0
 8007406:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800740a:	6865      	ldr	r5, [r4, #4]
 800740c:	60a5      	str	r5, [r4, #8]
 800740e:	2d00      	cmp	r5, #0
 8007410:	bfa2      	ittt	ge
 8007412:	6821      	ldrge	r1, [r4, #0]
 8007414:	f021 0104 	bicge.w	r1, r1, #4
 8007418:	6021      	strge	r1, [r4, #0]
 800741a:	b90e      	cbnz	r6, 8007420 <_printf_i+0x118>
 800741c:	2d00      	cmp	r5, #0
 800741e:	d04d      	beq.n	80074bc <_printf_i+0x1b4>
 8007420:	4615      	mov	r5, r2
 8007422:	fbb6 f1f3 	udiv	r1, r6, r3
 8007426:	fb03 6711 	mls	r7, r3, r1, r6
 800742a:	5dc7      	ldrb	r7, [r0, r7]
 800742c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8007430:	4637      	mov	r7, r6
 8007432:	42bb      	cmp	r3, r7
 8007434:	460e      	mov	r6, r1
 8007436:	d9f4      	bls.n	8007422 <_printf_i+0x11a>
 8007438:	2b08      	cmp	r3, #8
 800743a:	d10b      	bne.n	8007454 <_printf_i+0x14c>
 800743c:	6823      	ldr	r3, [r4, #0]
 800743e:	07de      	lsls	r6, r3, #31
 8007440:	d508      	bpl.n	8007454 <_printf_i+0x14c>
 8007442:	6923      	ldr	r3, [r4, #16]
 8007444:	6861      	ldr	r1, [r4, #4]
 8007446:	4299      	cmp	r1, r3
 8007448:	bfde      	ittt	le
 800744a:	2330      	movle	r3, #48	; 0x30
 800744c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007450:	f105 35ff 	addle.w	r5, r5, #4294967295
 8007454:	1b52      	subs	r2, r2, r5
 8007456:	6122      	str	r2, [r4, #16]
 8007458:	f8cd a000 	str.w	sl, [sp]
 800745c:	464b      	mov	r3, r9
 800745e:	aa03      	add	r2, sp, #12
 8007460:	4621      	mov	r1, r4
 8007462:	4640      	mov	r0, r8
 8007464:	f7ff fee2 	bl	800722c <_printf_common>
 8007468:	3001      	adds	r0, #1
 800746a:	d14c      	bne.n	8007506 <_printf_i+0x1fe>
 800746c:	f04f 30ff 	mov.w	r0, #4294967295
 8007470:	b004      	add	sp, #16
 8007472:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007476:	4835      	ldr	r0, [pc, #212]	; (800754c <_printf_i+0x244>)
 8007478:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800747c:	6829      	ldr	r1, [r5, #0]
 800747e:	6823      	ldr	r3, [r4, #0]
 8007480:	f851 6b04 	ldr.w	r6, [r1], #4
 8007484:	6029      	str	r1, [r5, #0]
 8007486:	061d      	lsls	r5, r3, #24
 8007488:	d514      	bpl.n	80074b4 <_printf_i+0x1ac>
 800748a:	07df      	lsls	r7, r3, #31
 800748c:	bf44      	itt	mi
 800748e:	f043 0320 	orrmi.w	r3, r3, #32
 8007492:	6023      	strmi	r3, [r4, #0]
 8007494:	b91e      	cbnz	r6, 800749e <_printf_i+0x196>
 8007496:	6823      	ldr	r3, [r4, #0]
 8007498:	f023 0320 	bic.w	r3, r3, #32
 800749c:	6023      	str	r3, [r4, #0]
 800749e:	2310      	movs	r3, #16
 80074a0:	e7b0      	b.n	8007404 <_printf_i+0xfc>
 80074a2:	6823      	ldr	r3, [r4, #0]
 80074a4:	f043 0320 	orr.w	r3, r3, #32
 80074a8:	6023      	str	r3, [r4, #0]
 80074aa:	2378      	movs	r3, #120	; 0x78
 80074ac:	4828      	ldr	r0, [pc, #160]	; (8007550 <_printf_i+0x248>)
 80074ae:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80074b2:	e7e3      	b.n	800747c <_printf_i+0x174>
 80074b4:	0659      	lsls	r1, r3, #25
 80074b6:	bf48      	it	mi
 80074b8:	b2b6      	uxthmi	r6, r6
 80074ba:	e7e6      	b.n	800748a <_printf_i+0x182>
 80074bc:	4615      	mov	r5, r2
 80074be:	e7bb      	b.n	8007438 <_printf_i+0x130>
 80074c0:	682b      	ldr	r3, [r5, #0]
 80074c2:	6826      	ldr	r6, [r4, #0]
 80074c4:	6961      	ldr	r1, [r4, #20]
 80074c6:	1d18      	adds	r0, r3, #4
 80074c8:	6028      	str	r0, [r5, #0]
 80074ca:	0635      	lsls	r5, r6, #24
 80074cc:	681b      	ldr	r3, [r3, #0]
 80074ce:	d501      	bpl.n	80074d4 <_printf_i+0x1cc>
 80074d0:	6019      	str	r1, [r3, #0]
 80074d2:	e002      	b.n	80074da <_printf_i+0x1d2>
 80074d4:	0670      	lsls	r0, r6, #25
 80074d6:	d5fb      	bpl.n	80074d0 <_printf_i+0x1c8>
 80074d8:	8019      	strh	r1, [r3, #0]
 80074da:	2300      	movs	r3, #0
 80074dc:	6123      	str	r3, [r4, #16]
 80074de:	4615      	mov	r5, r2
 80074e0:	e7ba      	b.n	8007458 <_printf_i+0x150>
 80074e2:	682b      	ldr	r3, [r5, #0]
 80074e4:	1d1a      	adds	r2, r3, #4
 80074e6:	602a      	str	r2, [r5, #0]
 80074e8:	681d      	ldr	r5, [r3, #0]
 80074ea:	6862      	ldr	r2, [r4, #4]
 80074ec:	2100      	movs	r1, #0
 80074ee:	4628      	mov	r0, r5
 80074f0:	f7f8 fe7e 	bl	80001f0 <memchr>
 80074f4:	b108      	cbz	r0, 80074fa <_printf_i+0x1f2>
 80074f6:	1b40      	subs	r0, r0, r5
 80074f8:	6060      	str	r0, [r4, #4]
 80074fa:	6863      	ldr	r3, [r4, #4]
 80074fc:	6123      	str	r3, [r4, #16]
 80074fe:	2300      	movs	r3, #0
 8007500:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007504:	e7a8      	b.n	8007458 <_printf_i+0x150>
 8007506:	6923      	ldr	r3, [r4, #16]
 8007508:	462a      	mov	r2, r5
 800750a:	4649      	mov	r1, r9
 800750c:	4640      	mov	r0, r8
 800750e:	47d0      	blx	sl
 8007510:	3001      	adds	r0, #1
 8007512:	d0ab      	beq.n	800746c <_printf_i+0x164>
 8007514:	6823      	ldr	r3, [r4, #0]
 8007516:	079b      	lsls	r3, r3, #30
 8007518:	d413      	bmi.n	8007542 <_printf_i+0x23a>
 800751a:	68e0      	ldr	r0, [r4, #12]
 800751c:	9b03      	ldr	r3, [sp, #12]
 800751e:	4298      	cmp	r0, r3
 8007520:	bfb8      	it	lt
 8007522:	4618      	movlt	r0, r3
 8007524:	e7a4      	b.n	8007470 <_printf_i+0x168>
 8007526:	2301      	movs	r3, #1
 8007528:	4632      	mov	r2, r6
 800752a:	4649      	mov	r1, r9
 800752c:	4640      	mov	r0, r8
 800752e:	47d0      	blx	sl
 8007530:	3001      	adds	r0, #1
 8007532:	d09b      	beq.n	800746c <_printf_i+0x164>
 8007534:	3501      	adds	r5, #1
 8007536:	68e3      	ldr	r3, [r4, #12]
 8007538:	9903      	ldr	r1, [sp, #12]
 800753a:	1a5b      	subs	r3, r3, r1
 800753c:	42ab      	cmp	r3, r5
 800753e:	dcf2      	bgt.n	8007526 <_printf_i+0x21e>
 8007540:	e7eb      	b.n	800751a <_printf_i+0x212>
 8007542:	2500      	movs	r5, #0
 8007544:	f104 0619 	add.w	r6, r4, #25
 8007548:	e7f5      	b.n	8007536 <_printf_i+0x22e>
 800754a:	bf00      	nop
 800754c:	08007c05 	.word	0x08007c05
 8007550:	08007c16 	.word	0x08007c16

08007554 <memmove>:
 8007554:	4288      	cmp	r0, r1
 8007556:	b510      	push	{r4, lr}
 8007558:	eb01 0402 	add.w	r4, r1, r2
 800755c:	d902      	bls.n	8007564 <memmove+0x10>
 800755e:	4284      	cmp	r4, r0
 8007560:	4623      	mov	r3, r4
 8007562:	d807      	bhi.n	8007574 <memmove+0x20>
 8007564:	1e43      	subs	r3, r0, #1
 8007566:	42a1      	cmp	r1, r4
 8007568:	d008      	beq.n	800757c <memmove+0x28>
 800756a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800756e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007572:	e7f8      	b.n	8007566 <memmove+0x12>
 8007574:	4402      	add	r2, r0
 8007576:	4601      	mov	r1, r0
 8007578:	428a      	cmp	r2, r1
 800757a:	d100      	bne.n	800757e <memmove+0x2a>
 800757c:	bd10      	pop	{r4, pc}
 800757e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007582:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007586:	e7f7      	b.n	8007578 <memmove+0x24>

08007588 <_free_r>:
 8007588:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800758a:	2900      	cmp	r1, #0
 800758c:	d044      	beq.n	8007618 <_free_r+0x90>
 800758e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007592:	9001      	str	r0, [sp, #4]
 8007594:	2b00      	cmp	r3, #0
 8007596:	f1a1 0404 	sub.w	r4, r1, #4
 800759a:	bfb8      	it	lt
 800759c:	18e4      	addlt	r4, r4, r3
 800759e:	f000 f913 	bl	80077c8 <__malloc_lock>
 80075a2:	4a1e      	ldr	r2, [pc, #120]	; (800761c <_free_r+0x94>)
 80075a4:	9801      	ldr	r0, [sp, #4]
 80075a6:	6813      	ldr	r3, [r2, #0]
 80075a8:	b933      	cbnz	r3, 80075b8 <_free_r+0x30>
 80075aa:	6063      	str	r3, [r4, #4]
 80075ac:	6014      	str	r4, [r2, #0]
 80075ae:	b003      	add	sp, #12
 80075b0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80075b4:	f000 b90e 	b.w	80077d4 <__malloc_unlock>
 80075b8:	42a3      	cmp	r3, r4
 80075ba:	d908      	bls.n	80075ce <_free_r+0x46>
 80075bc:	6825      	ldr	r5, [r4, #0]
 80075be:	1961      	adds	r1, r4, r5
 80075c0:	428b      	cmp	r3, r1
 80075c2:	bf01      	itttt	eq
 80075c4:	6819      	ldreq	r1, [r3, #0]
 80075c6:	685b      	ldreq	r3, [r3, #4]
 80075c8:	1949      	addeq	r1, r1, r5
 80075ca:	6021      	streq	r1, [r4, #0]
 80075cc:	e7ed      	b.n	80075aa <_free_r+0x22>
 80075ce:	461a      	mov	r2, r3
 80075d0:	685b      	ldr	r3, [r3, #4]
 80075d2:	b10b      	cbz	r3, 80075d8 <_free_r+0x50>
 80075d4:	42a3      	cmp	r3, r4
 80075d6:	d9fa      	bls.n	80075ce <_free_r+0x46>
 80075d8:	6811      	ldr	r1, [r2, #0]
 80075da:	1855      	adds	r5, r2, r1
 80075dc:	42a5      	cmp	r5, r4
 80075de:	d10b      	bne.n	80075f8 <_free_r+0x70>
 80075e0:	6824      	ldr	r4, [r4, #0]
 80075e2:	4421      	add	r1, r4
 80075e4:	1854      	adds	r4, r2, r1
 80075e6:	42a3      	cmp	r3, r4
 80075e8:	6011      	str	r1, [r2, #0]
 80075ea:	d1e0      	bne.n	80075ae <_free_r+0x26>
 80075ec:	681c      	ldr	r4, [r3, #0]
 80075ee:	685b      	ldr	r3, [r3, #4]
 80075f0:	6053      	str	r3, [r2, #4]
 80075f2:	4421      	add	r1, r4
 80075f4:	6011      	str	r1, [r2, #0]
 80075f6:	e7da      	b.n	80075ae <_free_r+0x26>
 80075f8:	d902      	bls.n	8007600 <_free_r+0x78>
 80075fa:	230c      	movs	r3, #12
 80075fc:	6003      	str	r3, [r0, #0]
 80075fe:	e7d6      	b.n	80075ae <_free_r+0x26>
 8007600:	6825      	ldr	r5, [r4, #0]
 8007602:	1961      	adds	r1, r4, r5
 8007604:	428b      	cmp	r3, r1
 8007606:	bf04      	itt	eq
 8007608:	6819      	ldreq	r1, [r3, #0]
 800760a:	685b      	ldreq	r3, [r3, #4]
 800760c:	6063      	str	r3, [r4, #4]
 800760e:	bf04      	itt	eq
 8007610:	1949      	addeq	r1, r1, r5
 8007612:	6021      	streq	r1, [r4, #0]
 8007614:	6054      	str	r4, [r2, #4]
 8007616:	e7ca      	b.n	80075ae <_free_r+0x26>
 8007618:	b003      	add	sp, #12
 800761a:	bd30      	pop	{r4, r5, pc}
 800761c:	20000688 	.word	0x20000688

08007620 <sbrk_aligned>:
 8007620:	b570      	push	{r4, r5, r6, lr}
 8007622:	4e0e      	ldr	r6, [pc, #56]	; (800765c <sbrk_aligned+0x3c>)
 8007624:	460c      	mov	r4, r1
 8007626:	6831      	ldr	r1, [r6, #0]
 8007628:	4605      	mov	r5, r0
 800762a:	b911      	cbnz	r1, 8007632 <sbrk_aligned+0x12>
 800762c:	f000 f8bc 	bl	80077a8 <_sbrk_r>
 8007630:	6030      	str	r0, [r6, #0]
 8007632:	4621      	mov	r1, r4
 8007634:	4628      	mov	r0, r5
 8007636:	f000 f8b7 	bl	80077a8 <_sbrk_r>
 800763a:	1c43      	adds	r3, r0, #1
 800763c:	d00a      	beq.n	8007654 <sbrk_aligned+0x34>
 800763e:	1cc4      	adds	r4, r0, #3
 8007640:	f024 0403 	bic.w	r4, r4, #3
 8007644:	42a0      	cmp	r0, r4
 8007646:	d007      	beq.n	8007658 <sbrk_aligned+0x38>
 8007648:	1a21      	subs	r1, r4, r0
 800764a:	4628      	mov	r0, r5
 800764c:	f000 f8ac 	bl	80077a8 <_sbrk_r>
 8007650:	3001      	adds	r0, #1
 8007652:	d101      	bne.n	8007658 <sbrk_aligned+0x38>
 8007654:	f04f 34ff 	mov.w	r4, #4294967295
 8007658:	4620      	mov	r0, r4
 800765a:	bd70      	pop	{r4, r5, r6, pc}
 800765c:	2000068c 	.word	0x2000068c

08007660 <_malloc_r>:
 8007660:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007664:	1ccd      	adds	r5, r1, #3
 8007666:	f025 0503 	bic.w	r5, r5, #3
 800766a:	3508      	adds	r5, #8
 800766c:	2d0c      	cmp	r5, #12
 800766e:	bf38      	it	cc
 8007670:	250c      	movcc	r5, #12
 8007672:	2d00      	cmp	r5, #0
 8007674:	4607      	mov	r7, r0
 8007676:	db01      	blt.n	800767c <_malloc_r+0x1c>
 8007678:	42a9      	cmp	r1, r5
 800767a:	d905      	bls.n	8007688 <_malloc_r+0x28>
 800767c:	230c      	movs	r3, #12
 800767e:	603b      	str	r3, [r7, #0]
 8007680:	2600      	movs	r6, #0
 8007682:	4630      	mov	r0, r6
 8007684:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007688:	4e2e      	ldr	r6, [pc, #184]	; (8007744 <_malloc_r+0xe4>)
 800768a:	f000 f89d 	bl	80077c8 <__malloc_lock>
 800768e:	6833      	ldr	r3, [r6, #0]
 8007690:	461c      	mov	r4, r3
 8007692:	bb34      	cbnz	r4, 80076e2 <_malloc_r+0x82>
 8007694:	4629      	mov	r1, r5
 8007696:	4638      	mov	r0, r7
 8007698:	f7ff ffc2 	bl	8007620 <sbrk_aligned>
 800769c:	1c43      	adds	r3, r0, #1
 800769e:	4604      	mov	r4, r0
 80076a0:	d14d      	bne.n	800773e <_malloc_r+0xde>
 80076a2:	6834      	ldr	r4, [r6, #0]
 80076a4:	4626      	mov	r6, r4
 80076a6:	2e00      	cmp	r6, #0
 80076a8:	d140      	bne.n	800772c <_malloc_r+0xcc>
 80076aa:	6823      	ldr	r3, [r4, #0]
 80076ac:	4631      	mov	r1, r6
 80076ae:	4638      	mov	r0, r7
 80076b0:	eb04 0803 	add.w	r8, r4, r3
 80076b4:	f000 f878 	bl	80077a8 <_sbrk_r>
 80076b8:	4580      	cmp	r8, r0
 80076ba:	d13a      	bne.n	8007732 <_malloc_r+0xd2>
 80076bc:	6821      	ldr	r1, [r4, #0]
 80076be:	3503      	adds	r5, #3
 80076c0:	1a6d      	subs	r5, r5, r1
 80076c2:	f025 0503 	bic.w	r5, r5, #3
 80076c6:	3508      	adds	r5, #8
 80076c8:	2d0c      	cmp	r5, #12
 80076ca:	bf38      	it	cc
 80076cc:	250c      	movcc	r5, #12
 80076ce:	4629      	mov	r1, r5
 80076d0:	4638      	mov	r0, r7
 80076d2:	f7ff ffa5 	bl	8007620 <sbrk_aligned>
 80076d6:	3001      	adds	r0, #1
 80076d8:	d02b      	beq.n	8007732 <_malloc_r+0xd2>
 80076da:	6823      	ldr	r3, [r4, #0]
 80076dc:	442b      	add	r3, r5
 80076de:	6023      	str	r3, [r4, #0]
 80076e0:	e00e      	b.n	8007700 <_malloc_r+0xa0>
 80076e2:	6822      	ldr	r2, [r4, #0]
 80076e4:	1b52      	subs	r2, r2, r5
 80076e6:	d41e      	bmi.n	8007726 <_malloc_r+0xc6>
 80076e8:	2a0b      	cmp	r2, #11
 80076ea:	d916      	bls.n	800771a <_malloc_r+0xba>
 80076ec:	1961      	adds	r1, r4, r5
 80076ee:	42a3      	cmp	r3, r4
 80076f0:	6025      	str	r5, [r4, #0]
 80076f2:	bf18      	it	ne
 80076f4:	6059      	strne	r1, [r3, #4]
 80076f6:	6863      	ldr	r3, [r4, #4]
 80076f8:	bf08      	it	eq
 80076fa:	6031      	streq	r1, [r6, #0]
 80076fc:	5162      	str	r2, [r4, r5]
 80076fe:	604b      	str	r3, [r1, #4]
 8007700:	4638      	mov	r0, r7
 8007702:	f104 060b 	add.w	r6, r4, #11
 8007706:	f000 f865 	bl	80077d4 <__malloc_unlock>
 800770a:	f026 0607 	bic.w	r6, r6, #7
 800770e:	1d23      	adds	r3, r4, #4
 8007710:	1af2      	subs	r2, r6, r3
 8007712:	d0b6      	beq.n	8007682 <_malloc_r+0x22>
 8007714:	1b9b      	subs	r3, r3, r6
 8007716:	50a3      	str	r3, [r4, r2]
 8007718:	e7b3      	b.n	8007682 <_malloc_r+0x22>
 800771a:	6862      	ldr	r2, [r4, #4]
 800771c:	42a3      	cmp	r3, r4
 800771e:	bf0c      	ite	eq
 8007720:	6032      	streq	r2, [r6, #0]
 8007722:	605a      	strne	r2, [r3, #4]
 8007724:	e7ec      	b.n	8007700 <_malloc_r+0xa0>
 8007726:	4623      	mov	r3, r4
 8007728:	6864      	ldr	r4, [r4, #4]
 800772a:	e7b2      	b.n	8007692 <_malloc_r+0x32>
 800772c:	4634      	mov	r4, r6
 800772e:	6876      	ldr	r6, [r6, #4]
 8007730:	e7b9      	b.n	80076a6 <_malloc_r+0x46>
 8007732:	230c      	movs	r3, #12
 8007734:	603b      	str	r3, [r7, #0]
 8007736:	4638      	mov	r0, r7
 8007738:	f000 f84c 	bl	80077d4 <__malloc_unlock>
 800773c:	e7a1      	b.n	8007682 <_malloc_r+0x22>
 800773e:	6025      	str	r5, [r4, #0]
 8007740:	e7de      	b.n	8007700 <_malloc_r+0xa0>
 8007742:	bf00      	nop
 8007744:	20000688 	.word	0x20000688

08007748 <_realloc_r>:
 8007748:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800774c:	4680      	mov	r8, r0
 800774e:	4614      	mov	r4, r2
 8007750:	460e      	mov	r6, r1
 8007752:	b921      	cbnz	r1, 800775e <_realloc_r+0x16>
 8007754:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007758:	4611      	mov	r1, r2
 800775a:	f7ff bf81 	b.w	8007660 <_malloc_r>
 800775e:	b92a      	cbnz	r2, 800776c <_realloc_r+0x24>
 8007760:	f7ff ff12 	bl	8007588 <_free_r>
 8007764:	4625      	mov	r5, r4
 8007766:	4628      	mov	r0, r5
 8007768:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800776c:	f000 f838 	bl	80077e0 <_malloc_usable_size_r>
 8007770:	4284      	cmp	r4, r0
 8007772:	4607      	mov	r7, r0
 8007774:	d802      	bhi.n	800777c <_realloc_r+0x34>
 8007776:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800777a:	d812      	bhi.n	80077a2 <_realloc_r+0x5a>
 800777c:	4621      	mov	r1, r4
 800777e:	4640      	mov	r0, r8
 8007780:	f7ff ff6e 	bl	8007660 <_malloc_r>
 8007784:	4605      	mov	r5, r0
 8007786:	2800      	cmp	r0, #0
 8007788:	d0ed      	beq.n	8007766 <_realloc_r+0x1e>
 800778a:	42bc      	cmp	r4, r7
 800778c:	4622      	mov	r2, r4
 800778e:	4631      	mov	r1, r6
 8007790:	bf28      	it	cs
 8007792:	463a      	movcs	r2, r7
 8007794:	f7ff fbb8 	bl	8006f08 <memcpy>
 8007798:	4631      	mov	r1, r6
 800779a:	4640      	mov	r0, r8
 800779c:	f7ff fef4 	bl	8007588 <_free_r>
 80077a0:	e7e1      	b.n	8007766 <_realloc_r+0x1e>
 80077a2:	4635      	mov	r5, r6
 80077a4:	e7df      	b.n	8007766 <_realloc_r+0x1e>
	...

080077a8 <_sbrk_r>:
 80077a8:	b538      	push	{r3, r4, r5, lr}
 80077aa:	4d06      	ldr	r5, [pc, #24]	; (80077c4 <_sbrk_r+0x1c>)
 80077ac:	2300      	movs	r3, #0
 80077ae:	4604      	mov	r4, r0
 80077b0:	4608      	mov	r0, r1
 80077b2:	602b      	str	r3, [r5, #0]
 80077b4:	f7fa fb40 	bl	8001e38 <_sbrk>
 80077b8:	1c43      	adds	r3, r0, #1
 80077ba:	d102      	bne.n	80077c2 <_sbrk_r+0x1a>
 80077bc:	682b      	ldr	r3, [r5, #0]
 80077be:	b103      	cbz	r3, 80077c2 <_sbrk_r+0x1a>
 80077c0:	6023      	str	r3, [r4, #0]
 80077c2:	bd38      	pop	{r3, r4, r5, pc}
 80077c4:	20000690 	.word	0x20000690

080077c8 <__malloc_lock>:
 80077c8:	4801      	ldr	r0, [pc, #4]	; (80077d0 <__malloc_lock+0x8>)
 80077ca:	f000 b811 	b.w	80077f0 <__retarget_lock_acquire_recursive>
 80077ce:	bf00      	nop
 80077d0:	20000694 	.word	0x20000694

080077d4 <__malloc_unlock>:
 80077d4:	4801      	ldr	r0, [pc, #4]	; (80077dc <__malloc_unlock+0x8>)
 80077d6:	f000 b80c 	b.w	80077f2 <__retarget_lock_release_recursive>
 80077da:	bf00      	nop
 80077dc:	20000694 	.word	0x20000694

080077e0 <_malloc_usable_size_r>:
 80077e0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80077e4:	1f18      	subs	r0, r3, #4
 80077e6:	2b00      	cmp	r3, #0
 80077e8:	bfbc      	itt	lt
 80077ea:	580b      	ldrlt	r3, [r1, r0]
 80077ec:	18c0      	addlt	r0, r0, r3
 80077ee:	4770      	bx	lr

080077f0 <__retarget_lock_acquire_recursive>:
 80077f0:	4770      	bx	lr

080077f2 <__retarget_lock_release_recursive>:
 80077f2:	4770      	bx	lr

080077f4 <_init>:
 80077f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80077f6:	bf00      	nop
 80077f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80077fa:	bc08      	pop	{r3}
 80077fc:	469e      	mov	lr, r3
 80077fe:	4770      	bx	lr

08007800 <_fini>:
 8007800:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007802:	bf00      	nop
 8007804:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007806:	bc08      	pop	{r3}
 8007808:	469e      	mov	lr, r3
 800780a:	4770      	bx	lr
